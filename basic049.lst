00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic049.p2asm"
00000                 | con
00000                 | 	_clkfreq = 344067797
00000                 | 	_clkmode = 32241403
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 344067797
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1ebf6fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 FB F5 80 FF 
00420 007 00 F0 65 FD | 	hubset	##32241400
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a FB F5 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##32241403
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 07 41 8A FF 
00440 00f 14 AA 6D FC | 	wrlong	##344067797, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 C4 3E A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 24 42 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed F8 3E 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 2C B9 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 D8 31 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 30 2D 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 F8 81 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 18 39 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 68 B3 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 18 F3 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa D0 F0 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb A8 02 04 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 88 5E 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     98 4F B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     18 64 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     E0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     E0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00840     52 00 00 FF 
00844     1C E5 05 F1 | 	add	objptr, ##42268
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     1C E5 85 F1 | 	sub	objptr, ##42268
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): audio.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     04 67 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     C8 6E B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     50 68 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     DC E4 05 F1 | 	add	objptr, ##42204
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     47 00 00 FF 
009bc     0C E4 85 F1 | 	sub	objptr, ##36364
009c0     14 66 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     4C 34 B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     1C E5 05 F1 | 	add	objptr, ##42268
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     1C E5 85 F1 | 	sub	objptr, ##42268
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     00 E5 05 F1 | 	add	objptr, ##42240
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     00 E5 85 F1 | 	sub	objptr, ##42240
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     44 32 B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     E4 31 B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     24 E5 05 F1 | 	add	objptr, ##42276
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     E6 E4 85 F1 | 	sub	objptr, ##42214
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     E8 E4 05 F1 | 	add	objptr, ##42216
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     E6 E4 85 F1 | 	sub	objptr, ##42214
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     74 31 B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     E0 49 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     24 E5 05 F1 | 	add	objptr, ##42276
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     24 E5 85 F1 | 	sub	objptr, ##42276
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     2C 4D B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): audio.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     40 63 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     04 6B B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     90 64 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     B8 01 00 FF 
00ccc     56 50 06 F6 | 	mov	local22, ##@LR__5457
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     08 30 B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     E4 89 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     F0 67 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     00 E5 05 F1 | 	add	objptr, ##42240
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     00 E5 85 F1 | 	sub	objptr, ##42240
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     4C 51 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     4C 53 B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): audio.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     CC 61 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     90 69 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     1C 63 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     A4 2E B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     BC 48 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     B0 48 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     40 48 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     0C 48 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     2C 48 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     1C 48 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     48 2D B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     F4 2C B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     C4 2C B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     24 E5 05 F1 | 	add	objptr, ##42276
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     E6 E4 85 F1 | 	sub	objptr, ##42214
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     E8 E4 05 F1 | 	add	objptr, ##42216
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     E6 E4 85 F1 | 	sub	objptr, ##42214
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     5C 2C B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     C8 44 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     24 E5 05 F1 | 	add	objptr, ##42276
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     24 E5 85 F1 | 	sub	objptr, ##42276
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     A4 45 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     44 2B B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     F0 2A B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     C0 2A B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     24 E5 05 F1 | 	add	objptr, ##42276
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     E6 E4 85 F1 | 	sub	objptr, ##42214
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     E8 E4 05 F1 | 	add	objptr, ##42216
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     E6 E4 85 F1 | 	sub	objptr, ##42214
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     58 2A B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     C4 42 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     24 E5 05 F1 | 	add	objptr, ##42276
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     24 E5 85 F1 | 	sub	objptr, ##42276
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     B8 01 00 FF 
01328     57 50 06 F6 | 	mov	local22, ##@LR__5458
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     C6 E4 05 F1 | 	add	objptr, ##42182
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     04 E5 85 F1 | 	sub	objptr, ##42244
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     04 E5 05 C1 |  if_b	add	objptr, ##42244
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     04 E5 85 C1 |  if_b	sub	objptr, ##42244
0137c     52 00 00 FF 
01380     04 E5 05 F1 | 	add	objptr, ##42244
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     04 E5 85 F1 | 	sub	objptr, ##42244
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     EC 43 B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     C6 E4 05 F1 | 	add	objptr, ##42182
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     04 E5 85 F1 | 	sub	objptr, ##42244
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     04 E5 05 31 |  if_ae	add	objptr, ##42244
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     04 E5 85 31 |  if_ae	sub	objptr, ##42244
013dc     52 00 00 FF 
013e0     04 E5 05 F1 | 	add	objptr, ##42244
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     04 E5 85 F1 | 	sub	objptr, ##42244
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     8C 43 B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     CC E4 05 F1 | 	add	objptr, ##42188
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     D4 E4 85 F1 | 	sub	objptr, ##14036
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     D4 E4 05 C1 |  if_b	add	objptr, ##14036
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     08 E5 85 C1 |  if_b	sub	objptr, ##42248
01458     52 00 00 FF 
0145c     08 E5 05 F1 | 	add	objptr, ##42248
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     08 E5 85 F1 | 	sub	objptr, ##42248
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     E0 42 B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     CC E4 05 F1 | 	add	objptr, ##42188
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     08 E5 85 F1 | 	sub	objptr, ##42248
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     08 E5 05 31 |  if_ae	add	objptr, ##42248
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     08 E5 85 31 |  if_ae	sub	objptr, ##42248
014b8     52 00 00 FF 
014bc     08 E5 05 F1 | 	add	objptr, ##42248
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     08 E5 85 F1 | 	sub	objptr, ##42248
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     84 42 B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     00 E5 05 F1 | 	add	objptr, ##42240
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     00 E5 85 F1 | 	sub	objptr, ##42240
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     DC 30 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     CC 30 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     83 E4 05 F1 | 	add	objptr, ##42115
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     CC E4 85 F1 | 	sub	objptr, ##42188
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     44 62 B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     CC E4 05 F1 | 	add	objptr, ##42188
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     CC E4 85 F1 | 	sub	objptr, ##42188
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     1C 62 B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     CC E4 05 F1 | 	add	objptr, ##42188
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     CC E4 85 F1 | 	sub	objptr, ##42188
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     F4 61 B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     CC E4 05 F1 | 	add	objptr, ##42188
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     CC E4 85 F1 | 	sub	objptr, ##42188
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     0A 4A 05 F6 | 	mov	COUNT_, #10
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     ED F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01650     13 00 00 FF 
01654     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
01658     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
0165c     05 12 66 F0 | 	shl	arg01, #5
01660     09 FB 01 F1 | 	add	result1, arg01
01664     FD FA 01 FB | 	rdlong	result1, result1
01668     13 00 00 FF 
0166c     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
01670     01 FA 55 F2 | 	cmps	result1, #1 wc
01674     B4 01 90 CD |  if_b	jmp	#LR__0061
01678     14 13 02 F6 | 	mov	arg01, local02
0167c     00 14 06 F6 | 	mov	arg02, #0
01680     E0 56 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01684     FD 2A 02 F6 | 	mov	local03, result1
01688     14 13 02 F6 | 	mov	arg01, local02
0168c     01 14 06 F6 | 	mov	arg02, #1
01690     D0 56 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01694     FD 2C 02 F6 | 	mov	local04, result1
01698     14 13 02 F6 | 	mov	arg01, local02
0169c     02 14 06 F6 | 	mov	arg02, #2
016a0     C0 56 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a4     FD 2E 02 F6 | 	mov	local05, result1
016a8     14 13 02 F6 | 	mov	arg01, local02
016ac     00 14 06 F6 | 	mov	arg02, #0
016b0     F4 56 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
016b4     FD 30 02 F6 | 	mov	local06, result1
016b8     14 13 02 F6 | 	mov	arg01, local02
016bc     03 14 06 F6 | 	mov	arg02, #3
016c0     A0 56 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c4     FD 32 02 F6 | 	mov	local07, result1
016c8     14 13 02 F6 | 	mov	arg01, local02
016cc     04 14 06 F6 | 	mov	arg02, #4
016d0     90 56 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016d4     FD 34 02 F6 | 	mov	local08, result1
016d8     14 13 02 F6 | 	mov	arg01, local02
016dc     05 14 06 F6 | 	mov	arg02, #5
016e0     80 56 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016e4     FD 36 02 F6 | 	mov	local09, result1
016e8     14 13 02 F6 | 	mov	arg01, local02
016ec     06 14 06 F6 | 	mov	arg02, #6
016f0     70 56 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016f4     FD 38 02 F6 | 	mov	local10, result1
016f8     14 13 02 F6 | 	mov	arg01, local02
016fc     07 14 06 F6 | 	mov	arg02, #7
01700     60 56 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01704     FD 14 02 F6 | 	mov	arg02, result1
01708     13 FB 01 F6 | 	mov	result1, local01
0170c     02 FA 65 F0 | 	shl	result1, #2
01710     51 00 00 FF 
01714     58 E5 05 F1 | 	add	objptr, ##41816
01718     F2 FA 01 F1 | 	add	result1, objptr
0171c     FD 2A 62 FC | 	wrlong	local03, result1
01720     13 FB 01 F6 | 	mov	result1, local01
01724     02 FA 65 F0 | 	shl	result1, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 FA 01 F1 | 	add	result1, objptr
01730     FD 2C 62 FC | 	wrlong	local04, result1
01734     13 FB 01 F6 | 	mov	result1, local01
01738     02 FA 65 F0 | 	shl	result1, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 FA 01 F1 | 	add	result1, objptr
01744     FD 2E 62 FC | 	wrlong	local05, result1
01748     13 2F 02 F6 | 	mov	local05, local01
0174c     02 2E 66 F0 | 	shl	local05, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 2E 02 F1 | 	add	local05, objptr
01758     17 31 62 FC | 	wrlong	local06, local05
0175c     13 31 02 F6 | 	mov	local06, local01
01760     02 30 66 F0 | 	shl	local06, #2
01764     1C E4 05 F1 | 	add	objptr, #28
01768     F2 30 02 F1 | 	add	local06, objptr
0176c     18 33 62 FC | 	wrlong	local07, local06
01770     13 33 02 F6 | 	mov	local07, local01
01774     02 32 66 F0 | 	shl	local07, #2
01778     1C E4 05 F1 | 	add	objptr, #28
0177c     F2 32 02 F1 | 	add	local07, objptr
01780     19 35 62 FC | 	wrlong	local08, local07
01784     13 35 02 F6 | 	mov	local08, local01
01788     02 34 66 F0 | 	shl	local08, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 34 02 F1 | 	add	local08, objptr
01794     1A 37 62 FC | 	wrlong	local09, local08
01798     13 37 02 F6 | 	mov	local09, local01
0179c     02 36 66 F0 | 	shl	local09, #2
017a0     1C E4 05 F1 | 	add	objptr, #28
017a4     F2 36 02 F1 | 	add	local09, objptr
017a8     1B 39 62 FC | 	wrlong	local10, local09
017ac     13 39 02 F6 | 	mov	local10, local01
017b0     02 38 66 F0 | 	shl	local10, #2
017b4     1C E4 05 F1 | 	add	objptr, #28
017b8     F2 38 02 F1 | 	add	local10, objptr
017bc     1C 15 62 FC | 	wrlong	arg02, local10
017c0     60 00 00 FF 
017c4     00 2A 06 F1 | 	add	local03, ##49152
017c8     0F 2A 46 F0 | 	shr	local03, #15
017cc     01 38 06 F6 | 	mov	local10, #1
017d0     15 39 02 F1 | 	add	local10, local03
017d4     60 00 00 FF 
017d8     00 2C 06 F1 | 	add	local04, ##49152
017dc     0F 2C 46 F0 | 	shr	local04, #15
017e0     01 36 06 F6 | 	mov	local09, #1
017e4     16 37 02 F1 | 	add	local09, local04
017e8     13 35 02 F6 | 	mov	local08, local01
017ec     02 34 66 F0 | 	shl	local08, #2
017f0     1C E4 05 F1 | 	add	objptr, #28
017f4     F2 34 02 F1 | 	add	local08, objptr
017f8     02 36 66 F0 | 	shl	local09, #2
017fc     1B 39 02 F1 | 	add	local10, local09
01800     1A 39 62 FC | 	wrlong	local10, local08
01804     13 39 02 F6 | 	mov	local10, local01
01808     02 38 66 F0 | 	shl	local10, #2
0180c     1C E4 05 F1 | 	add	objptr, #28
01810     F2 38 02 F1 | 	add	local10, objptr
01814     14 13 02 F6 | 	mov	arg01, local02
01818     52 00 00 FF 
0181c     70 E4 85 F1 | 	sub	objptr, ##42096
01820     18 55 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
01824     1C FB 61 FC | 	wrlong	result1, local10
01828     01 26 06 F1 | 	add	local01, #1
0182c                 | LR__0061
0182c     01 28 06 F1 | 	add	local02, #1
01830     07 28 16 F2 | 	cmp	local02, #7 wc
01834     14 FE 9F CD |  if_b	jmp	#LR__0060
01838     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
0183c                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
0183c                 | LR__0062
0183c     07 26 16 F2 | 	cmp	local01, #7 wc
01840     3C 00 90 3D |  if_ae	jmp	#LR__0064
01844     13 39 02 F6 | 	mov	local10, local01
01848     02 38 66 F0 | 	shl	local10, #2
0184c     52 00 00 FF 
01850     54 E4 05 F1 | 	add	objptr, ##42068
01854     F2 38 02 F1 | 	add	local10, objptr
01858     1C 01 68 FC | 	wrlong	#0, local10
0185c     13 39 02 F6 | 	mov	local10, local01
01860     02 38 66 F0 | 	shl	local10, #2
01864     1C E4 05 F1 | 	add	objptr, #28
01868     F2 38 02 F1 | 	add	local10, objptr
0186c     1C 01 68 FC | 	wrlong	#0, local10
01870     01 26 06 F1 | 	add	local01, #1
01874     52 00 00 FF 
01878     70 E4 85 F1 | 	sub	objptr, ##42096
0187c     BC FF 9F FD | 	jmp	#LR__0062
01880                 | LR__0063
01880                 | LR__0064
01880     A7 F0 03 F6 | 	mov	ptra, fp
01884     B2 00 A0 FD | 	call	#popregs_
01888                 | _gethdi_ret
01888     2D 00 64 FD | 	ret
0188c                 | 
0188c                 | ' 
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' 
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' '
0188c                 | ' '                                     LINE INTERPRETER/TOKENIZER
0188c                 | ' '
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' 
0188c                 | ' 
0188c                 | ' sub interpret
0188c                 | _interpret
0188c     35 4A 05 F6 | 	mov	COUNT_, #53
01890     A8 00 A0 FD | 	call	#pushregs_
01894     01 00 00 FF 
01898     84 F0 07 F1 | 	add	ptra, ##644
0189c     37 00 00 FF 
018a0     1C E4 05 F1 | 	add	objptr, ##28188
018a4     F2 12 02 FB | 	rdlong	arg01, objptr
018a8     37 00 00 FF 
018ac     1C E4 85 F1 | 	sub	objptr, ##28188
018b0     14 81 B2 FD | 	call	#__system__RTrim_S
018b4     FD 12 02 F6 | 	mov	arg01, result1
018b8     4C 80 B2 FD | 	call	#__system__LTrim_S
018bc     37 00 00 FF 
018c0     20 E4 05 F1 | 	add	objptr, ##28192
018c4     F2 FA 61 FC | 	wrlong	result1, objptr
018c8     04 E4 05 F1 | 	add	objptr, #4
018cc     FF FF FF FF 
018d0     F2 FE 6B FC | 	wrlong	##-1, objptr
018d4     1B 00 00 FF 
018d8     C4 E4 05 F1 | 	add	objptr, ##14020
018dc     F2 00 68 FC | 	wrlong	#0, objptr
018e0     08 00 00 FF 
018e4     6C E4 85 F1 | 	sub	objptr, ##4204
018e8     F2 00 68 FC | 	wrlong	#0, objptr
018ec     4A 00 00 FF 
018f0     7C E4 85 F1 | 	sub	objptr, ##38012
018f4     00 26 06 F6 | 	mov	local01, #0
018f8                 | LR__0070
018f8                 | ' 
018f8                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
018f8                 | ' 
018f8                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
018f8                 | ' 
018f8                 | ' 108 
018f8                 | ' for i=0 to 125: separators(i)=0 :next i
018f8     00 28 06 F6 | 	mov	local02, #0
018fc     38 4E 05 F1 | 	add	fp, #56
01900     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01904                 | LR__0071
01904     14 2B 02 F6 | 	mov	local03, local02
01908     02 2A 66 F0 | 	shl	local03, #2
0190c     A7 2A 02 F1 | 	add	local03, fp
01910     15 01 68 FC | 	wrlong	#0, local03
01914     01 28 06 F1 | 	add	local02, #1
01918     7E 28 56 F2 | 	cmps	local02, #126 wc
0191c     E4 FF 9F CD |  if_b	jmp	#LR__0071
01920                 | LR__0072
01920     38 4E 85 F1 | 	sub	fp, #56
01924                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01924     00 28 06 F6 | 	mov	local02, #0
01928     35 00 00 FF 
0192c     0C E4 05 F1 | 	add	objptr, ##27148
01930     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01934                 | LR__0073
01934     14 2D 02 F6 | 	mov	local04, local02
01938     03 2C 66 F0 | 	shl	local04, #3
0193c     F2 2C 02 F1 | 	add	local04, objptr
01940     B8 01 00 FF 
01944     58 16 06 F6 | 	mov	arg03, ##@LR__5459
01948     16 17 62 FC | 	wrlong	arg03, local04
0194c     14 2D 02 F6 | 	mov	local04, local02
01950     03 2C 66 F0 | 	shl	local04, #3
01954     F2 2E 02 F6 | 	mov	local05, objptr
01958     F2 2C 02 F1 | 	add	local04, objptr
0195c     00 30 06 F6 | 	mov	local06, #0
01960     04 2C 06 F1 | 	add	local04, #4
01964     16 01 68 FC | 	wrlong	#0, local04
01968     01 28 06 F1 | 	add	local02, #1
0196c     7E 28 56 F2 | 	cmps	local02, #126 wc
01970     C0 FF 9F CD |  if_b	jmp	#LR__0073
01974                 | LR__0074
01974     02 00 00 FF 
01978     10 E4 05 F1 | 	add	objptr, ##1040
0197c     F2 12 02 FB | 	rdlong	arg01, objptr
01980     37 00 00 FF 
01984     1C E4 85 F1 | 	sub	objptr, ##28188
01988     3C 80 B2 FD | 	call	#__system__RTrim_S
0198c     FD 12 02 F6 | 	mov	arg01, result1
01990     74 7F B2 FD | 	call	#__system__LTrim_S
01994     37 00 00 FF 
01998     1C E4 05 F1 | 	add	objptr, ##28188
0199c     F2 FA 61 FC | 	wrlong	result1, objptr
019a0     B8 01 00 FF 
019a4     59 2C 06 F6 | 	mov	local04, ##@LR__5460
019a8     1B 00 00 FF 
019ac     0C E5 05 F1 | 	add	objptr, ##14092
019b0     F2 2C 62 FC | 	wrlong	local04, objptr
019b4     1B 00 00 FF 
019b8     0C E5 85 F1 | 	sub	objptr, ##14092
019bc     F2 12 02 FB | 	rdlong	arg01, objptr
019c0     37 00 00 FF 
019c4     1C E4 85 F1 | 	sub	objptr, ##28188
019c8     09 33 02 F6 | 	mov	local07, arg01
019cc     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
019d0                 | LR__0075
019d0     19 FB C9 FA | 	rdbyte	result1, local07 wz
019d4     01 32 06 51 |  if_ne	add	local07, #1
019d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
019dc                 | LR__0076
019dc     09 33 8A F1 | 	sub	local07, arg01 wz
019e0     52 00 00 FF 
019e4     2C E5 05 F1 | 	add	objptr, ##42284
019e8     F2 32 62 FC | 	wrlong	local07, objptr
019ec                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
019ec     52 00 00 FF 
019f0     2C E5 85 F1 | 	sub	objptr, ##42284
019f4     40 2A 90 AD |  if_e	jmp	#LR__0210
019f8     00 34 06 F6 | 	mov	local08, #0
019fc                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
019fc                 | ' for i=1 to len(line$)
019fc     01 28 06 F6 | 	mov	local02, #1
01a00     37 00 00 FF 
01a04     1C E4 05 F1 | 	add	objptr, ##28188
01a08     F2 12 02 FB | 	rdlong	arg01, objptr
01a0c     37 00 00 FF 
01a10     1C E4 85 F1 | 	sub	objptr, ##28188
01a14     09 33 02 F6 | 	mov	local07, arg01
01a18     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01a1c                 | LR__0077
01a1c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a20     01 32 06 51 |  if_ne	add	local07, #1
01a24     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01a28                 | LR__0078
01a28     09 33 82 F1 | 	sub	local07, arg01
01a2c     19 37 02 F6 | 	mov	local09, local07
01a30     01 36 06 F1 | 	add	local09, #1
01a34                 | LR__0079
01a34     1B 29 52 F2 | 	cmps	local02, local09 wc
01a38     AC 00 90 3D |  if_ae	jmp	#LR__0081
01a3c                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01a3c     37 00 00 FF 
01a40     1C E4 05 F1 | 	add	objptr, ##28188
01a44     F2 12 02 FB | 	rdlong	arg01, objptr
01a48     37 00 00 FF 
01a4c     1C E4 85 F1 | 	sub	objptr, ##28188
01a50     14 15 02 F6 | 	mov	arg02, local02
01a54     01 16 06 F6 | 	mov	arg03, #1
01a58     F4 7B B2 FD | 	call	#__system__Mid_S
01a5c     FD 12 02 F6 | 	mov	arg01, result1
01a60     B8 01 00 FF 
01a64     5A 14 06 F6 | 	mov	arg02, ##@LR__5461
01a68     74 5A B2 FD | 	call	#__system___string_cmp
01a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01a70     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a74     01 34 06 A6 |  if_e	mov	local08, #1
01a78     3C 00 90 AD |  if_e	jmp	#LR__0080
01a7c     37 00 00 FF 
01a80     1C E4 05 F1 | 	add	objptr, ##28188
01a84     F2 12 02 FB | 	rdlong	arg01, objptr
01a88     37 00 00 FF 
01a8c     1C E4 85 F1 | 	sub	objptr, ##28188
01a90     14 15 02 F6 | 	mov	arg02, local02
01a94     01 16 06 F6 | 	mov	arg03, #1
01a98     B4 7B B2 FD | 	call	#__system__Mid_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     B8 01 00 FF 
01aa4     5C 14 06 F6 | 	mov	arg02, ##@LR__5462
01aa8     34 5A B2 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01ab4     00 34 06 A6 |  if_e	mov	local08, #0
01ab8                 | LR__0080
01ab8     14 2D 02 F6 | 	mov	local04, local02
01abc     03 2C 66 F0 | 	shl	local04, #3
01ac0     35 00 00 FF 
01ac4     0C E4 05 F1 | 	add	objptr, ##27148
01ac8     F2 2E 02 F6 | 	mov	local05, objptr
01acc     F2 2C 02 F1 | 	add	local04, objptr
01ad0     04 2C 06 F1 | 	add	local04, #4
01ad4     16 35 62 FC | 	wrlong	local08, local04
01ad8     01 28 06 F1 | 	add	local02, #1
01adc     35 00 00 FF 
01ae0     0C E4 85 F1 | 	sub	objptr, ##27148
01ae4     4C FF 9F FD | 	jmp	#LR__0079
01ae8                 | LR__0081
01ae8     01 28 06 F6 | 	mov	local02, #1
01aec                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01aec                 | LR__0082
01aec     37 00 00 FF 
01af0     1C E4 05 F1 | 	add	objptr, ##28188
01af4     F2 12 02 FB | 	rdlong	arg01, objptr
01af8     37 00 00 FF 
01afc     1C E4 85 F1 | 	sub	objptr, ##28188
01b00     14 15 02 F6 | 	mov	arg02, local02
01b04     01 16 06 F6 | 	mov	arg03, #1
01b08     44 7B B2 FD | 	call	#__system__Mid_S
01b0c     FD 12 02 F6 | 	mov	arg01, result1
01b10     B8 01 00 FF 
01b14     5E 38 06 F6 | 	mov	local10, ##@LR__5463
01b18     1C 15 02 F6 | 	mov	arg02, local10
01b1c     C0 59 B2 FD | 	call	#__system___string_cmp
01b20     00 FA 0D F2 | 	cmp	result1, #0 wz
01b24     34 00 90 5D |  if_ne	jmp	#LR__0083
01b28     14 2F 02 F6 | 	mov	local05, local02
01b2c     03 2E 66 F0 | 	shl	local05, #3
01b30     35 00 00 FF 
01b34     0C E4 05 F1 | 	add	objptr, ##27148
01b38     F2 30 02 F6 | 	mov	local06, objptr
01b3c     F2 2E 02 F1 | 	add	local05, objptr
01b40     04 2E 06 F1 | 	add	local05, #4
01b44     17 3B 02 FB | 	rdlong	local11, local05
01b48     04 2E 86 F1 | 	sub	local05, #4
01b4c     1D 3D 0A F6 | 	mov	local12, local11 wz
01b50     35 00 00 FF 
01b54     0C E4 85 F1 | 	sub	objptr, ##27148
01b58     24 00 90 AD |  if_e	jmp	#LR__0084
01b5c                 | LR__0083
01b5c     52 00 00 FF 
01b60     2C E5 05 F1 | 	add	objptr, ##42284
01b64     F2 3E 02 FB | 	rdlong	local13, objptr
01b68     52 00 00 FF 
01b6c     2C E5 85 F1 | 	sub	objptr, ##42284
01b70     1F 41 02 F6 | 	mov	local14, local13
01b74     20 29 52 F2 | 	cmps	local02, local14 wc
01b78     01 28 06 C1 |  if_b	add	local02, #1
01b7c     6C FF 9F CD |  if_b	jmp	#LR__0082
01b80                 | LR__0084
01b80                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b80     52 00 00 FF 
01b84     2C E5 05 F1 | 	add	objptr, ##42284
01b88     F2 2C 02 FB | 	rdlong	local04, objptr
01b8c     52 00 00 FF 
01b90     2C E5 85 F1 | 	sub	objptr, ##42284
01b94     16 29 52 F2 | 	cmps	local02, local04 wc
01b98     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b9c     37 00 00 FF 
01ba0     1C E4 05 F1 | 	add	objptr, ##28188
01ba4     F2 30 02 FB | 	rdlong	local06, objptr
01ba8     37 00 00 FF 
01bac     1C E4 85 F1 | 	sub	objptr, ##28188
01bb0     18 13 02 F6 | 	mov	arg01, local06
01bb4     09 33 02 F6 | 	mov	local07, arg01
01bb8     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01bbc                 | LR__0085
01bbc     19 FB C9 FA | 	rdbyte	result1, local07 wz
01bc0     01 32 06 51 |  if_ne	add	local07, #1
01bc4     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01bc8                 | LR__0086
01bc8     09 33 82 F1 | 	sub	local07, arg01
01bcc     19 2F 02 F6 | 	mov	local05, local07
01bd0     17 15 02 F6 | 	mov	arg02, local05
01bd4     14 15 82 F1 | 	sub	arg02, local02
01bd8     18 13 02 F6 | 	mov	arg01, local06
01bdc     E0 79 B2 FD | 	call	#__system__Right_S
01be0     FD 12 02 F6 | 	mov	arg01, result1
01be4     E0 7D B2 FD | 	call	#__system__RTrim_S
01be8     FD 12 02 F6 | 	mov	arg01, result1
01bec     18 7D B2 FD | 	call	#__system__LTrim_S
01bf0     52 00 00 FF 
01bf4     30 E5 05 F1 | 	add	objptr, ##42288
01bf8     F2 FA 61 FC | 	wrlong	result1, objptr
01bfc     1B 00 00 FF 
01c00     14 E5 85 F1 | 	sub	objptr, ##14100
01c04     F2 12 02 FB | 	rdlong	arg01, objptr
01c08     37 00 00 FF 
01c0c     1C E4 85 F1 | 	sub	objptr, ##28188
01c10     01 28 86 F1 | 	sub	local02, #1
01c14     14 15 02 F6 | 	mov	arg02, local02
01c18     1C 79 B2 FD | 	call	#__system__Left_S
01c1c     FD 12 02 F6 | 	mov	arg01, result1
01c20     A4 7D B2 FD | 	call	#__system__RTrim_S
01c24     FD 12 02 F6 | 	mov	arg01, result1
01c28     DC 7C B2 FD | 	call	#__system__LTrim_S
01c2c     37 00 00 FF 
01c30     1C E4 05 F1 | 	add	objptr, ##28188
01c34     F2 FA 61 FC | 	wrlong	result1, objptr
01c38     37 00 00 FF 
01c3c     1C E4 85 F1 | 	sub	objptr, ##28188
01c40     1C 00 90 FD | 	jmp	#LR__0088
01c44                 | LR__0087
01c44     B8 01 00 FF 
01c48     60 2C 06 F6 | 	mov	local04, ##@LR__5464
01c4c     52 00 00 FF 
01c50     30 E5 05 F1 | 	add	objptr, ##42288
01c54     F2 2C 62 FC | 	wrlong	local04, objptr
01c58     52 00 00 FF 
01c5c     30 E5 85 F1 | 	sub	objptr, ##42288
01c60                 | LR__0088
01c60                 | ' 
01c60                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01c60     37 00 00 FF 
01c64     24 E4 05 F1 | 	add	objptr, ##28196
01c68     F2 2C 02 FB | 	rdlong	local04, objptr
01c6c     37 00 00 FF 
01c70     24 E4 85 F1 | 	sub	objptr, ##28196
01c74     FF FF 7F FF 
01c78     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c7c     40 00 90 5D |  if_ne	jmp	#LR__0089
01c80     52 00 00 FF 
01c84     30 E5 05 F1 | 	add	objptr, ##42288
01c88     F2 12 02 FB | 	rdlong	arg01, objptr
01c8c     52 00 00 FF 
01c90     30 E5 85 F1 | 	sub	objptr, ##42288
01c94     B8 01 00 FF 
01c98     61 30 06 F6 | 	mov	local06, ##@LR__5465
01c9c     18 15 02 F6 | 	mov	arg02, local06
01ca0     3C 58 B2 FD | 	call	#__system___string_cmp
01ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca8     37 00 00 5F 
01cac     24 E4 05 51 |  if_ne	add	objptr, ##28196
01cb0     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01cb4     37 00 00 5F 
01cb8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01cbc     08 01 90 5D |  if_ne	jmp	#LR__0093
01cc0                 | LR__0089
01cc0                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01cc0     37 00 00 FF 
01cc4     24 E4 05 F1 | 	add	objptr, ##28196
01cc8     F2 2C 02 FB | 	rdlong	local04, objptr
01ccc     37 00 00 FF 
01cd0     24 E4 85 F1 | 	sub	objptr, ##28196
01cd4     FF FF 7F FF 
01cd8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01cdc     3C 00 90 5D |  if_ne	jmp	#LR__0090
01ce0     52 00 00 FF 
01ce4     30 E5 05 F1 | 	add	objptr, ##42288
01ce8     F2 12 02 FB | 	rdlong	arg01, objptr
01cec     52 00 00 FF 
01cf0     30 E5 85 F1 | 	sub	objptr, ##42288
01cf4     B8 01 00 FF 
01cf8     62 14 06 F6 | 	mov	arg02, ##@LR__5466
01cfc     E0 57 B2 FD | 	call	#__system___string_cmp
01d00     00 FA 0D F2 | 	cmp	result1, #0 wz
01d04     37 00 00 AF 
01d08     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d0c     F2 06 68 AC |  if_e	wrlong	#3, objptr
01d10     37 00 00 AF 
01d14     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d18     AC 00 90 AD |  if_e	jmp	#LR__0093
01d1c                 | LR__0090
01d1c                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01d1c     37 00 00 FF 
01d20     24 E4 05 F1 | 	add	objptr, ##28196
01d24     F2 2C 02 FB | 	rdlong	local04, objptr
01d28     37 00 00 FF 
01d2c     24 E4 85 F1 | 	sub	objptr, ##28196
01d30     04 2C 0E F2 | 	cmp	local04, #4 wz
01d34     3C 00 90 5D |  if_ne	jmp	#LR__0091
01d38     52 00 00 FF 
01d3c     30 E5 05 F1 | 	add	objptr, ##42288
01d40     F2 12 02 FB | 	rdlong	arg01, objptr
01d44     52 00 00 FF 
01d48     30 E5 85 F1 | 	sub	objptr, ##42288
01d4c     B8 01 00 FF 
01d50     63 14 06 F6 | 	mov	arg02, ##@LR__5467
01d54     88 57 B2 FD | 	call	#__system___string_cmp
01d58     00 FA 0D F2 | 	cmp	result1, #0 wz
01d5c     37 00 00 5F 
01d60     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d64     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d68     37 00 00 5F 
01d6c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d70     54 00 90 5D |  if_ne	jmp	#LR__0093
01d74                 | LR__0091
01d74                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d74     37 00 00 FF 
01d78     24 E4 05 F1 | 	add	objptr, ##28196
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     37 00 00 FF 
01d84     24 E4 85 F1 | 	sub	objptr, ##28196
01d88     04 2C 0E F2 | 	cmp	local04, #4 wz
01d8c     38 00 90 5D |  if_ne	jmp	#LR__0092
01d90     52 00 00 FF 
01d94     30 E5 05 F1 | 	add	objptr, ##42288
01d98     F2 12 02 FB | 	rdlong	arg01, objptr
01d9c     52 00 00 FF 
01da0     30 E5 85 F1 | 	sub	objptr, ##42288
01da4     B8 01 00 FF 
01da8     64 14 06 F6 | 	mov	arg02, ##@LR__5468
01dac     30 57 B2 FD | 	call	#__system___string_cmp
01db0     00 FA 0D F2 | 	cmp	result1, #0 wz
01db4     37 00 00 AF 
01db8     24 E4 05 A1 |  if_e	add	objptr, ##28196
01dbc     F2 04 68 AC |  if_e	wrlong	#2, objptr
01dc0     37 00 00 AF 
01dc4     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01dc8                 | LR__0092
01dc8                 | LR__0093
01dc8     38 4E 05 F1 | 	add	fp, #56
01dcc     A7 00 68 FC | 	wrlong	#0, fp
01dd0     38 4E 85 F1 | 	sub	fp, #56
01dd4     00 28 06 F6 | 	mov	local02, #0
01dd8     01 42 06 F6 | 	mov	local15, #1
01ddc                 | ' 
01ddc                 | ' ' 1b: find separators
01ddc                 | ' 
01ddc                 | ' 107
01ddc                 | ' separators(0)=0
01ddc                 | ' i=0: j=1
01ddc                 | ' do: 
01ddc                 | LR__0094
01ddc     01 28 06 F1 | 	add	local02, #1
01de0     37 00 00 FF 
01de4     1C E4 05 F1 | 	add	objptr, ##28188
01de8     F2 12 02 FB | 	rdlong	arg01, objptr
01dec     37 00 00 FF 
01df0     1C E4 85 F1 | 	sub	objptr, ##28188
01df4     14 15 02 F6 | 	mov	arg02, local02
01df8     01 16 06 F6 | 	mov	arg03, #1
01dfc     50 78 B2 FD | 	call	#__system__Mid_S
01e00     FD 44 02 F6 | 	mov	local16, result1
01e04                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01e04     22 13 02 F6 | 	mov	arg01, local16
01e08     94 2E B0 FD | 	call	#_isseparator
01e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
01e10     1C 00 90 AD |  if_e	jmp	#LR__0095
01e14     21 2B 02 F6 | 	mov	local03, local15
01e18     02 2A 66 F0 | 	shl	local03, #2
01e1c     38 4E 05 F1 | 	add	fp, #56
01e20     A7 2A 02 F1 | 	add	local03, fp
01e24     15 29 62 FC | 	wrlong	local02, local03
01e28     01 42 06 F1 | 	add	local15, #1
01e2c     38 4E 85 F1 | 	sub	fp, #56
01e30                 | LR__0095
01e30     52 00 00 FF 
01e34     2C E5 05 F1 | 	add	objptr, ##42284
01e38     F2 2C 02 FB | 	rdlong	local04, objptr
01e3c     52 00 00 FF 
01e40     2C E5 85 F1 | 	sub	objptr, ##42284
01e44     16 29 5A F2 | 	cmps	local02, local04 wcz
01e48     90 FF 9F ED |  if_be	jmp	#LR__0094
01e4c     21 2B 02 F6 | 	mov	local03, local15
01e50     02 2A 66 F0 | 	shl	local03, #2
01e54     38 4E 05 F1 | 	add	fp, #56
01e58     A7 38 02 F6 | 	mov	local10, fp
01e5c     A7 2A 02 F1 | 	add	local03, fp
01e60     15 29 62 FC | 	wrlong	local02, local03
01e64     00 46 06 F6 | 	mov	local17, #0
01e68                 | ' for i=0 to j-1 
01e68     00 28 06 F6 | 	mov	local02, #0
01e6c     21 49 02 F6 | 	mov	local18, local15
01e70     38 4E 85 F1 | 	sub	fp, #56
01e74                 | LR__0096
01e74     24 29 52 F2 | 	cmps	local02, local18 wc
01e78     50 01 90 3D |  if_ae	jmp	#LR__0100
01e7c     14 2B 02 F6 | 	mov	local03, local02
01e80     02 2A 66 F0 | 	shl	local03, #2
01e84     38 4E 05 F1 | 	add	fp, #56
01e88     A7 2A 02 F1 | 	add	local03, fp
01e8c     15 2F 02 FB | 	rdlong	local05, local03
01e90     52 00 00 FF 
01e94     38 E5 05 F1 | 	add	objptr, ##42296
01e98     F2 2E 62 FC | 	wrlong	local05, objptr
01e9c     14 2B 02 F6 | 	mov	local03, local02
01ea0     01 2A 06 F1 | 	add	local03, #1
01ea4     02 2A 66 F0 | 	shl	local03, #2
01ea8     A7 38 02 F6 | 	mov	local10, fp
01eac     A7 2A 02 F1 | 	add	local03, fp
01eb0     15 2F 02 FB | 	rdlong	local05, local03
01eb4     04 E4 05 F1 | 	add	objptr, #4
01eb8     F2 2E 62 FC | 	wrlong	local05, objptr
01ebc                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01ebc     04 E4 85 F1 | 	sub	objptr, #4
01ec0     F2 2C 02 FB | 	rdlong	local04, objptr
01ec4     52 00 00 FF 
01ec8     38 E5 85 F1 | 	sub	objptr, ##42296
01ecc     01 2C 56 F2 | 	cmps	local04, #1 wc
01ed0     38 4E 85 F1 | 	sub	fp, #56
01ed4     68 00 90 CD |  if_b	jmp	#LR__0098
01ed8     37 00 00 FF 
01edc     1C E4 05 F1 | 	add	objptr, ##28188
01ee0     F2 12 02 FB | 	rdlong	arg01, objptr
01ee4     1B 00 00 FF 
01ee8     1C E5 05 F1 | 	add	objptr, ##14108
01eec     F2 14 02 FB | 	rdlong	arg02, objptr
01ef0     52 00 00 FF 
01ef4     38 E5 85 F1 | 	sub	objptr, ##42296
01ef8     01 16 06 F6 | 	mov	arg03, #1
01efc     50 77 B2 FD | 	call	#__system__Mid_S
01f00     FD 4A 02 F6 | 	mov	local19, result1
01f04     B8 01 00 FF 
01f08     65 14 06 F6 | 	mov	arg02, ##@LR__5469
01f0c     25 13 02 F6 | 	mov	arg01, local19
01f10     CC 55 B2 FD | 	call	#__system___string_cmp
01f14     00 FA 0D F2 | 	cmp	result1, #0 wz
01f18     24 00 90 AD |  if_e	jmp	#LR__0097
01f1c     23 39 02 F6 | 	mov	local10, local17
01f20     03 38 66 F0 | 	shl	local10, #3
01f24     35 00 00 FF 
01f28     0C E4 05 F1 | 	add	objptr, ##27148
01f2c     F2 38 02 F1 | 	add	local10, objptr
01f30     1C 4B 62 FC | 	wrlong	local19, local10
01f34     01 46 06 F1 | 	add	local17, #1
01f38     35 00 00 FF 
01f3c     0C E4 85 F1 | 	sub	objptr, ##27148
01f40                 | LR__0097
01f40                 | LR__0098
01f40     37 00 00 FF 
01f44     1C E4 05 F1 | 	add	objptr, ##28188
01f48     F2 12 02 FB | 	rdlong	arg01, objptr
01f4c     1B 00 00 FF 
01f50     1C E5 05 F1 | 	add	objptr, ##14108
01f54     F2 14 02 FB | 	rdlong	arg02, objptr
01f58     01 14 06 F1 | 	add	arg02, #1
01f5c     04 E4 05 F1 | 	add	objptr, #4
01f60     F2 16 02 FB | 	rdlong	arg03, objptr
01f64     04 E4 85 F1 | 	sub	objptr, #4
01f68     F2 3A 02 FB | 	rdlong	local11, objptr
01f6c     52 00 00 FF 
01f70     38 E5 85 F1 | 	sub	objptr, ##42296
01f74     1D 3D 02 F6 | 	mov	local12, local11
01f78     1E 17 82 F1 | 	sub	arg03, local12
01f7c     01 16 86 F1 | 	sub	arg03, #1
01f80     CC 76 B2 FD | 	call	#__system__Mid_S
01f84     FD 4A 02 F6 | 	mov	local19, result1
01f88                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f88     B8 01 00 FF 
01f8c     66 14 06 F6 | 	mov	arg02, ##@LR__5470
01f90     25 13 02 F6 | 	mov	arg01, local19
01f94     48 55 B2 FD | 	call	#__system___string_cmp
01f98     00 FA 0D F2 | 	cmp	result1, #0 wz
01f9c     24 00 90 AD |  if_e	jmp	#LR__0099
01fa0     23 39 02 F6 | 	mov	local10, local17
01fa4     03 38 66 F0 | 	shl	local10, #3
01fa8     35 00 00 FF 
01fac     0C E4 05 F1 | 	add	objptr, ##27148
01fb0     F2 38 02 F1 | 	add	local10, objptr
01fb4     1C 4B 62 FC | 	wrlong	local19, local10
01fb8     01 46 06 F1 | 	add	local17, #1
01fbc     35 00 00 FF 
01fc0     0C E4 85 F1 | 	sub	objptr, ##27148
01fc4                 | LR__0099
01fc4     01 28 06 F1 | 	add	local02, #1
01fc8     A8 FE 9F FD | 	jmp	#LR__0096
01fcc                 | LR__0100
01fcc                 | ' 
01fcc                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01fcc                 | ' 
01fcc                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01fcc     37 00 00 FF 
01fd0     24 E4 05 F1 | 	add	objptr, ##28196
01fd4     F2 2C 0A FB | 	rdlong	local04, objptr wz
01fd8     37 00 00 FF 
01fdc     24 E4 85 F1 | 	sub	objptr, ##28196
01fe0     37 00 00 5F 
01fe4     24 E4 05 51 |  if_ne	add	objptr, ##28196
01fe8     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01fec     37 00 00 5F 
01ff0     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01ff4     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01ff8     B8 00 90 5D |  if_ne	jmp	#LR__0103
01ffc     35 00 00 FF 
02000     0C E4 05 F1 | 	add	objptr, ##27148
02004     F2 3A 02 FB | 	rdlong	local11, objptr
02008     35 00 00 FF 
0200c     0C E4 85 F1 | 	sub	objptr, ##27148
02010     1D 13 02 F6 | 	mov	arg01, local11
02014     8C 50 B0 FD | 	call	#_isdec
02018     FD 3C 02 F6 | 	mov	local12, result1
0201c     1E 31 22 F6 | 	not	local06, local12
02020     00 30 0E F2 | 	cmp	local06, #0 wz
02024     8C 00 90 AD |  if_e	jmp	#LR__0103
02028     23 29 02 F6 | 	mov	local02, local17
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
02038                 | LR__0101
02038     14 2F 02 F6 | 	mov	local05, local02
0203c     01 2E 86 F1 | 	sub	local05, #1
02040     03 2E 66 F0 | 	shl	local05, #3
02044     F2 2E 02 F1 | 	add	local05, objptr
02048     17 2D 02 FB | 	rdlong	local04, local05
0204c     14 31 02 F6 | 	mov	local06, local02
02050     01 30 86 F1 | 	sub	local06, #1
02054     03 30 66 F0 | 	shl	local06, #3
02058     F2 30 02 F1 | 	add	local06, objptr
0205c     04 30 06 F1 | 	add	local06, #4
02060     18 2B 02 FB | 	rdlong	local03, local06
02064     14 31 02 F6 | 	mov	local06, local02
02068     03 30 66 F0 | 	shl	local06, #3
0206c     F2 3C 02 F6 | 	mov	local12, objptr
02070     F2 30 02 F1 | 	add	local06, objptr
02074     18 2D 62 FC | 	wrlong	local04, local06
02078     14 3B 02 F6 | 	mov	local11, local02
0207c     1D 3F 02 F6 | 	mov	local13, local11
02080     03 3E 66 F0 | 	shl	local13, #3
02084     F2 3E 02 F1 | 	add	local13, objptr
02088     04 3E 06 F1 | 	add	local13, #4
0208c     1F 2B 62 FC | 	wrlong	local03, local13
02090     01 28 86 F1 | 	sub	local02, #1
02094     01 28 56 F2 | 	cmps	local02, #1 wc
02098     9C FF 9F 3D |  if_ae	jmp	#LR__0101
0209c                 | LR__0102
0209c     B8 01 00 FF 
020a0     67 2C 06 F6 | 	mov	local04, ##@LR__5471
020a4     F2 2C 62 FC | 	wrlong	local04, objptr
020a8     35 00 00 FF 
020ac     0C E4 85 F1 | 	sub	objptr, ##27148
020b0     01 46 06 F1 | 	add	local17, #1
020b4                 | LR__0103
020b4     00 28 06 F6 | 	mov	local02, #0
020b8                 | ' 
020b8                 | ' ' 1e : find strings
020b8                 | ' 
020b8                 | ' i=0
020b8                 | ' do
020b8                 | LR__0104
020b8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
020b8     14 2F 02 F6 | 	mov	local05, local02
020bc     03 2E 66 F0 | 	shl	local05, #3
020c0     35 00 00 FF 
020c4     0C E4 05 F1 | 	add	objptr, ##27148
020c8     F2 2E 02 F1 | 	add	local05, objptr
020cc     17 13 02 FB | 	rdlong	arg01, local05
020d0     B8 01 00 FF 
020d4     69 14 06 F6 | 	mov	arg02, ##@LR__5472
020d8     35 00 00 FF 
020dc     0C E4 85 F1 | 	sub	objptr, ##27148
020e0     FC 53 B2 FD | 	call	#__system___string_cmp
020e4     00 FA 0D F2 | 	cmp	result1, #0 wz
020e8     01 28 06 51 |  if_ne	add	local02, #1
020ec     20 01 90 5D |  if_ne	jmp	#LR__0109
020f0     14 4D 02 F6 | 	mov	local20, local02
020f4                 | LR__0105
020f4     14 39 02 F6 | 	mov	local10, local02
020f8     01 38 06 F1 | 	add	local10, #1
020fc     03 38 66 F0 | 	shl	local10, #3
02100     35 00 00 FF 
02104     0C E4 05 F1 | 	add	objptr, ##27148
02108     F2 38 02 F1 | 	add	local10, objptr
0210c     1C 4B 02 FB | 	rdlong	local19, local10
02110     26 39 02 F6 | 	mov	local10, local20
02114     03 38 66 F0 | 	shl	local10, #3
02118     F2 38 02 F1 | 	add	local10, objptr
0211c     26 3B 02 F6 | 	mov	local11, local20
02120     1D 41 02 F6 | 	mov	local14, local11
02124     03 40 66 F0 | 	shl	local14, #3
02128     F2 40 02 F1 | 	add	local14, objptr
0212c     20 13 02 FB | 	rdlong	arg01, local14
02130     25 3D 02 F6 | 	mov	local12, local19
02134     1E 15 02 F6 | 	mov	arg02, local12
02138     35 00 00 FF 
0213c     0C E4 85 F1 | 	sub	objptr, ##27148
02140     D0 53 B2 FD | 	call	#__system___string_concat
02144     1C FB 61 FC | 	wrlong	result1, local10
02148     14 43 02 F6 | 	mov	local15, local02
0214c     01 42 06 F1 | 	add	local15, #1
02150     23 4F 02 F6 | 	mov	local21, local17
02154     01 4E 06 F1 | 	add	local21, #1
02158     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
0215c                 | LR__0106
0215c     27 43 52 F2 | 	cmps	local15, local21 wc
02160     70 00 90 3D |  if_ae	jmp	#LR__0108
02164     21 2F 02 F6 | 	mov	local05, local15
02168     01 2E 06 F1 | 	add	local05, #1
0216c     03 2E 66 F0 | 	shl	local05, #3
02170     35 00 00 FF 
02174     0C E4 05 F1 | 	add	objptr, ##27148
02178     F2 2E 02 F1 | 	add	local05, objptr
0217c     17 2D 02 FB | 	rdlong	local04, local05
02180     21 31 02 F6 | 	mov	local06, local15
02184     01 30 06 F1 | 	add	local06, #1
02188     03 30 66 F0 | 	shl	local06, #3
0218c     F2 30 02 F1 | 	add	local06, objptr
02190     04 30 06 F1 | 	add	local06, #4
02194     18 2B 02 FB | 	rdlong	local03, local06
02198     21 31 02 F6 | 	mov	local06, local15
0219c     03 30 66 F0 | 	shl	local06, #3
021a0     F2 3C 02 F6 | 	mov	local12, objptr
021a4     F2 30 02 F1 | 	add	local06, objptr
021a8     18 2D 62 FC | 	wrlong	local04, local06
021ac     21 3B 02 F6 | 	mov	local11, local15
021b0     1D 3F 02 F6 | 	mov	local13, local11
021b4     03 3E 66 F0 | 	shl	local13, #3
021b8     F2 3E 02 F1 | 	add	local13, objptr
021bc     04 3E 06 F1 | 	add	local13, #4
021c0     1F 2B 62 FC | 	wrlong	local03, local13
021c4     01 42 06 F1 | 	add	local15, #1
021c8     35 00 00 FF 
021cc     0C E4 85 F1 | 	sub	objptr, ##27148
021d0     88 FF 9F FD | 	jmp	#LR__0106
021d4                 | LR__0107
021d4                 | LR__0108
021d4     01 46 86 F1 | 	sub	local17, #1
021d8     B8 01 00 FF 
021dc     6B 14 06 F6 | 	mov	arg02, ##@LR__5473
021e0     25 13 02 F6 | 	mov	arg01, local19
021e4     F8 52 B2 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     23 29 52 52 |  if_ne	cmps	local02, local17 wc
021f0     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
021f4                 | '   if p$<>"""" then k+=1:i+=1
021f4     B8 01 00 FF 
021f8     6D 14 06 F6 | 	mov	arg02, ##@LR__5474
021fc     25 13 02 F6 | 	mov	arg01, local19
02200     DC 52 B2 FD | 	call	#__system___string_cmp
02204     00 FA 0D F2 | 	cmp	result1, #0 wz
02208     01 46 06 51 |  if_ne	add	local17, #1
0220c     01 28 06 51 |  if_ne	add	local02, #1
02210                 | LR__0109
02210     23 29 52 F2 | 	cmps	local02, local17 wc
02214     A0 FE 9F CD |  if_b	jmp	#LR__0104
02218     00 28 06 F6 | 	mov	local02, #0
0221c                 | ' 
0221c                 | ' ' 1f : concatenate strings if "" detected between
0221c                 | '  
0221c                 | ' i=0
0221c                 | ' do
0221c                 | LR__0110
0221c                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0221c     14 2F 02 F6 | 	mov	local05, local02
02220     03 2E 66 F0 | 	shl	local05, #3
02224     35 00 00 FF 
02228     0C E4 05 F1 | 	add	objptr, ##27148
0222c     F2 30 02 F6 | 	mov	local06, objptr
02230     F2 2E 02 F1 | 	add	local05, objptr
02234     17 13 02 FB | 	rdlong	arg01, local05
02238     01 14 06 F6 | 	mov	arg02, #1
0223c     35 00 00 FF 
02240     0C E4 85 F1 | 	sub	objptr, ##27148
02244     78 73 B2 FD | 	call	#__system__Right_S
02248     FD 12 02 F6 | 	mov	arg01, result1
0224c     B8 01 00 FF 
02250     6F 14 06 F6 | 	mov	arg02, ##@LR__5475
02254     88 52 B2 FD | 	call	#__system___string_cmp
02258     00 FA 0D F2 | 	cmp	result1, #0 wz
0225c     7C 01 90 5D |  if_ne	jmp	#LR__0116
02260     14 31 02 F6 | 	mov	local06, local02
02264     01 30 06 F1 | 	add	local06, #1
02268     03 30 66 F0 | 	shl	local06, #3
0226c     35 00 00 FF 
02270     0C E4 05 F1 | 	add	objptr, ##27148
02274     F2 3C 02 F6 | 	mov	local12, objptr
02278     F2 30 02 F1 | 	add	local06, objptr
0227c     18 13 02 FB | 	rdlong	arg01, local06
02280     01 14 06 F6 | 	mov	arg02, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     A8 72 B2 FD | 	call	#__system__Left_S
02290     FD 12 02 F6 | 	mov	arg01, result1
02294     B8 01 00 FF 
02298     71 14 06 F6 | 	mov	arg02, ##@LR__5476
0229c     40 52 B2 FD | 	call	#__system___string_cmp
022a0     00 FA 0D F2 | 	cmp	result1, #0 wz
022a4     34 01 90 5D |  if_ne	jmp	#LR__0116
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     14 41 02 F6 | 	mov	local14, local02
022c0     03 40 66 F0 | 	shl	local14, #3
022c4     F2 40 02 F1 | 	add	local14, objptr
022c8     20 31 02 FB | 	rdlong	local06, local14
022cc     14 3F 02 F6 | 	mov	local13, local02
022d0     01 3E 06 F1 | 	add	local13, #1
022d4     03 3E 66 F0 | 	shl	local13, #3
022d8     F2 3E 02 F1 | 	add	local13, objptr
022dc     1F 3D 02 FB | 	rdlong	local12, local13
022e0     14 51 02 F6 | 	mov	local22, local02
022e4     01 50 06 F1 | 	add	local22, #1
022e8     28 53 02 F6 | 	mov	local23, local22
022ec     03 52 66 F0 | 	shl	local23, #3
022f0     F2 54 02 F6 | 	mov	local24, objptr
022f4     F2 52 02 F1 | 	add	local23, objptr
022f8     29 13 02 FB | 	rdlong	arg01, local23
022fc     35 00 00 FF 
02300     0C E4 85 F1 | 	sub	objptr, ##27148
02304     09 33 02 F6 | 	mov	local07, arg01
02308     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
0230c                 | LR__0111
0230c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02310     01 32 06 51 |  if_ne	add	local07, #1
02314     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02318                 | LR__0112
02318     09 33 82 F1 | 	sub	local07, arg01
0231c     19 3B 02 F6 | 	mov	local11, local07
02320     01 3A 86 F1 | 	sub	local11, #1
02324     1E 13 02 F6 | 	mov	arg01, local12
02328     1D 15 02 F6 | 	mov	arg02, local11
0232c     90 72 B2 FD | 	call	#__system__Right_S
02330     FD 3C 02 F6 | 	mov	local12, result1
02334     18 13 02 F6 | 	mov	arg01, local06
02338     1E 15 02 F6 | 	mov	arg02, local12
0233c     D4 51 B2 FD | 	call	#__system___string_concat
02340     FD 30 02 F6 | 	mov	local06, result1
02344     1C 31 62 FC | 	wrlong	local06, local10
02348                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02348     14 43 02 F6 | 	mov	local15, local02
0234c     01 42 06 F1 | 	add	local15, #1
02350     23 57 02 F6 | 	mov	local25, local17
02354     01 56 06 F1 | 	add	local25, #1
02358     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
0235c                 | LR__0113
0235c     2B 43 52 F2 | 	cmps	local15, local25 wc
02360     70 00 90 3D |  if_ae	jmp	#LR__0115
02364     21 2F 02 F6 | 	mov	local05, local15
02368     01 2E 06 F1 | 	add	local05, #1
0236c     03 2E 66 F0 | 	shl	local05, #3
02370     35 00 00 FF 
02374     0C E4 05 F1 | 	add	objptr, ##27148
02378     F2 2E 02 F1 | 	add	local05, objptr
0237c     17 2D 02 FB | 	rdlong	local04, local05
02380     21 31 02 F6 | 	mov	local06, local15
02384     01 30 06 F1 | 	add	local06, #1
02388     03 30 66 F0 | 	shl	local06, #3
0238c     F2 30 02 F1 | 	add	local06, objptr
02390     04 30 06 F1 | 	add	local06, #4
02394     18 2B 02 FB | 	rdlong	local03, local06
02398     21 31 02 F6 | 	mov	local06, local15
0239c     03 30 66 F0 | 	shl	local06, #3
023a0     F2 3C 02 F6 | 	mov	local12, objptr
023a4     F2 30 02 F1 | 	add	local06, objptr
023a8     18 2D 62 FC | 	wrlong	local04, local06
023ac     21 3B 02 F6 | 	mov	local11, local15
023b0     1D 3F 02 F6 | 	mov	local13, local11
023b4     03 3E 66 F0 | 	shl	local13, #3
023b8     F2 3E 02 F1 | 	add	local13, objptr
023bc     04 3E 06 F1 | 	add	local13, #4
023c0     1F 2B 62 FC | 	wrlong	local03, local13
023c4     01 42 06 F1 | 	add	local15, #1
023c8     35 00 00 FF 
023cc     0C E4 85 F1 | 	sub	objptr, ##27148
023d0     88 FF 9F FD | 	jmp	#LR__0113
023d4                 | LR__0114
023d4                 | LR__0115
023d4     01 28 86 F1 | 	sub	local02, #1
023d8     01 46 86 F1 | 	sub	local17, #1
023dc                 | LR__0116
023dc     01 28 06 F1 | 	add	local02, #1
023e0     23 29 52 F2 | 	cmps	local02, local17 wc
023e4     34 FE 9F CD |  if_b	jmp	#LR__0110
023e8     00 28 06 F6 | 	mov	local02, #0
023ec                 | '  
023ec                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
023ec                 | '  
023ec                 | ' i=0 
023ec                 | ' do
023ec                 | LR__0117
023ec     14 39 02 F6 | 	mov	local10, local02
023f0     03 38 66 F0 | 	shl	local10, #3
023f4     35 00 00 FF 
023f8     0C E4 05 F1 | 	add	objptr, ##27148
023fc     F2 38 02 F1 | 	add	local10, objptr
02400     1C 59 02 FB | 	rdlong	local26, local10
02404     14 39 02 F6 | 	mov	local10, local02
02408     01 38 06 F1 | 	add	local10, #1
0240c     03 38 66 F0 | 	shl	local10, #3
02410     F2 38 02 F1 | 	add	local10, objptr
02414     1C 5B 02 FB | 	rdlong	local27, local10
02418                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02418                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02418     B8 01 00 FF 
0241c     73 14 06 F6 | 	mov	arg02, ##@LR__5477
02420     2C 13 02 F6 | 	mov	arg01, local26
02424     35 00 00 FF 
02428     0C E4 85 F1 | 	sub	objptr, ##27148
0242c     B0 50 B2 FD | 	call	#__system___string_cmp
02430     00 FA 0D F2 | 	cmp	result1, #0 wz
02434     A8 00 90 AD |  if_e	jmp	#LR__0118
02438     B8 01 00 FF 
0243c     75 14 06 F6 | 	mov	arg02, ##@LR__5478
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     98 50 B2 FD | 	call	#__system___string_cmp
02448     FD 2A 0A F6 | 	mov	local03, result1 wz
0244c     90 00 90 AD |  if_e	jmp	#LR__0118
02450     B8 01 00 FF 
02454     77 30 06 F6 | 	mov	local06, ##@LR__5479
02458     2C 13 02 F6 | 	mov	arg01, local26
0245c     18 15 02 F6 | 	mov	arg02, local06
02460     7C 50 B2 FD | 	call	#__system___string_cmp
02464     00 FA 0D F2 | 	cmp	result1, #0 wz
02468     74 00 90 AD |  if_e	jmp	#LR__0118
0246c     B8 01 00 FF 
02470     79 3C 06 F6 | 	mov	local12, ##@LR__5480
02474     2C 13 02 F6 | 	mov	arg01, local26
02478     1E 15 02 F6 | 	mov	arg02, local12
0247c     60 50 B2 FD | 	call	#__system___string_cmp
02480     00 FA 0D F2 | 	cmp	result1, #0 wz
02484     58 00 90 AD |  if_e	jmp	#LR__0118
02488     B8 01 00 FF 
0248c     7B 3A 06 F6 | 	mov	local11, ##@LR__5481
02490     1D 3D 02 F6 | 	mov	local12, local11
02494     2C 13 02 F6 | 	mov	arg01, local26
02498     1E 15 02 F6 | 	mov	arg02, local12
0249c     40 50 B2 FD | 	call	#__system___string_cmp
024a0     FD 30 0A F6 | 	mov	local06, result1 wz
024a4     38 00 90 AD |  if_e	jmp	#LR__0118
024a8     B8 01 00 FF 
024ac     7D 3A 06 F6 | 	mov	local11, ##@LR__5482
024b0     2C 13 02 F6 | 	mov	arg01, local26
024b4     1D 15 02 F6 | 	mov	arg02, local11
024b8     24 50 B2 FD | 	call	#__system___string_cmp
024bc     FD 3C 0A F6 | 	mov	local12, result1 wz
024c0     1C 00 90 AD |  if_e	jmp	#LR__0118
024c4     B8 01 00 FF 
024c8     7F 40 06 F6 | 	mov	local14, ##@LR__5483
024cc     2C 13 02 F6 | 	mov	arg01, local26
024d0     20 15 02 F6 | 	mov	arg02, local14
024d4     08 50 B2 FD | 	call	#__system___string_cmp
024d8     FD 3A 0A F6 | 	mov	local11, result1 wz
024dc     20 00 90 5D |  if_ne	jmp	#LR__0119
024e0                 | LR__0118
024e0     B8 01 00 FF 
024e4     81 5C 06 F6 | 	mov	local28, ##@LR__5484
024e8     2E 3F 02 F6 | 	mov	local13, local28
024ec     2D 13 02 F6 | 	mov	arg01, local27
024f0     1F 15 02 F6 | 	mov	arg02, local13
024f4     E8 4F B2 FD | 	call	#__system___string_cmp
024f8     FD 40 0A F6 | 	mov	local14, result1 wz
024fc     B8 00 90 AD |  if_e	jmp	#LR__0122
02500                 | LR__0119
02500     B8 01 00 FF 
02504     83 5C 06 F6 | 	mov	local28, ##@LR__5485
02508     2C 13 02 F6 | 	mov	arg01, local26
0250c     2E 15 02 F6 | 	mov	arg02, local28
02510     CC 4F B2 FD | 	call	#__system___string_cmp
02514     FD 3E 0A F6 | 	mov	local13, result1 wz
02518     20 00 90 5D |  if_ne	jmp	#LR__0120
0251c     B8 01 00 FF 
02520     85 52 06 F6 | 	mov	local23, ##@LR__5486
02524     29 51 02 F6 | 	mov	local22, local23
02528     2D 13 02 F6 | 	mov	arg01, local27
0252c     28 15 02 F6 | 	mov	arg02, local22
02530     AC 4F B2 FD | 	call	#__system___string_cmp
02534     FD 5C 0A F6 | 	mov	local28, result1 wz
02538     7C 00 90 AD |  if_e	jmp	#LR__0122
0253c                 | LR__0120
0253c     B8 01 00 FF 
02540     87 52 06 F6 | 	mov	local23, ##@LR__5487
02544     2C 13 02 F6 | 	mov	arg01, local26
02548     29 15 02 F6 | 	mov	arg02, local23
0254c     90 4F B2 FD | 	call	#__system___string_cmp
02550     FD 50 0A F6 | 	mov	local22, result1 wz
02554     20 00 90 5D |  if_ne	jmp	#LR__0121
02558     B8 01 00 FF 
0255c     89 5E 06 F6 | 	mov	local29, ##@LR__5488
02560     2F 55 02 F6 | 	mov	local24, local29
02564     2D 13 02 F6 | 	mov	arg01, local27
02568     2A 15 02 F6 | 	mov	arg02, local24
0256c     70 4F B2 FD | 	call	#__system___string_cmp
02570     FD 52 0A F6 | 	mov	local23, result1 wz
02574     40 00 90 AD |  if_e	jmp	#LR__0122
02578                 | LR__0121
02578     B8 01 00 FF 
0257c     8B 60 06 F6 | 	mov	local30, ##@LR__5489
02580     30 5F 02 F6 | 	mov	local29, local30
02584     2C 13 02 F6 | 	mov	arg01, local26
02588     2F 15 02 F6 | 	mov	arg02, local29
0258c     50 4F B2 FD | 	call	#__system___string_cmp
02590     FD 54 0A F6 | 	mov	local24, result1 wz
02594     F0 00 90 5D |  if_ne	jmp	#LR__0126
02598     B8 01 00 FF 
0259c     8D 62 06 F6 | 	mov	local31, ##@LR__5490
025a0     31 61 02 F6 | 	mov	local30, local31
025a4     2D 13 02 F6 | 	mov	arg01, local27
025a8     30 15 02 F6 | 	mov	arg02, local30
025ac     30 4F B2 FD | 	call	#__system___string_cmp
025b0     FD 5E 0A F6 | 	mov	local29, result1 wz
025b4     D0 00 90 5D |  if_ne	jmp	#LR__0126
025b8                 | LR__0122
025b8     14 39 02 F6 | 	mov	local10, local02
025bc     03 38 66 F0 | 	shl	local10, #3
025c0     35 00 00 FF 
025c4     0C E4 05 F1 | 	add	objptr, ##27148
025c8     F2 38 02 F1 | 	add	local10, objptr
025cc     2D 3D 02 F6 | 	mov	local12, local27
025d0     2C 13 02 F6 | 	mov	arg01, local26
025d4     1E 15 02 F6 | 	mov	arg02, local12
025d8     35 00 00 FF 
025dc     0C E4 85 F1 | 	sub	objptr, ##27148
025e0     30 4F B2 FD | 	call	#__system___string_concat
025e4     1C FB 61 FC | 	wrlong	result1, local10
025e8                 | '     lparts(i).part$=s1$+s2$
025e8                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
025e8     14 43 02 F6 | 	mov	local15, local02
025ec     01 42 06 F1 | 	add	local15, #1
025f0     23 65 02 F6 | 	mov	local32, local17
025f4     01 64 06 F1 | 	add	local32, #1
025f8     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
025fc                 | LR__0123
025fc     32 43 52 F2 | 	cmps	local15, local32 wc
02600     7C 00 90 3D |  if_ae	jmp	#LR__0125
02604     21 2F 02 F6 | 	mov	local05, local15
02608     01 2E 06 F1 | 	add	local05, #1
0260c     03 2E 66 F0 | 	shl	local05, #3
02610     35 00 00 FF 
02614     0C E4 05 F1 | 	add	objptr, ##27148
02618     F2 2E 02 F1 | 	add	local05, objptr
0261c     17 2D 02 FB | 	rdlong	local04, local05
02620     21 31 02 F6 | 	mov	local06, local15
02624     01 30 06 F1 | 	add	local06, #1
02628     03 30 66 F0 | 	shl	local06, #3
0262c     F2 30 02 F1 | 	add	local06, objptr
02630     04 30 06 F1 | 	add	local06, #4
02634     18 2B 02 FB | 	rdlong	local03, local06
02638     21 31 02 F6 | 	mov	local06, local15
0263c     03 30 66 F0 | 	shl	local06, #3
02640     F2 3C 02 F6 | 	mov	local12, objptr
02644     F2 30 02 F1 | 	add	local06, objptr
02648     18 2D 62 FC | 	wrlong	local04, local06
0264c     21 3B 02 F6 | 	mov	local11, local15
02650     1D 41 02 F6 | 	mov	local14, local11
02654     20 3F 02 F6 | 	mov	local13, local14
02658     03 3E 66 F0 | 	shl	local13, #3
0265c     F2 5C 02 F6 | 	mov	local28, objptr
02660     F2 3E 02 F1 | 	add	local13, objptr
02664     04 3E 06 F1 | 	add	local13, #4
02668     1F 2B 62 FC | 	wrlong	local03, local13
0266c     04 3E 86 F1 | 	sub	local13, #4
02670     01 42 06 F1 | 	add	local15, #1
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     7C FF 9F FD | 	jmp	#LR__0123
02680                 | LR__0124
02680                 | LR__0125
02680     01 28 86 F1 | 	sub	local02, #1
02684     01 46 86 F1 | 	sub	local17, #1
02688                 | LR__0126
02688     01 28 06 F1 | 	add	local02, #1
0268c     23 29 52 F2 | 	cmps	local02, local17 wc
02690     58 FD 9F CD |  if_b	jmp	#LR__0117
02694                 | '  
02694                 | ' ' 1h : now remove parts that are spaces
02694                 | ' 
02694                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02694     00 28 06 F6 | 	mov	local02, #0
02698     23 67 02 F6 | 	mov	local33, local17
0269c     01 66 06 F1 | 	add	local33, #1
026a0                 | LR__0127
026a0     33 29 52 F2 | 	cmps	local02, local33 wc
026a4     50 00 90 3D |  if_ae	jmp	#LR__0128
026a8     14 39 02 F6 | 	mov	local10, local02
026ac     03 38 66 F0 | 	shl	local10, #3
026b0     35 00 00 FF 
026b4     0C E4 05 F1 | 	add	objptr, ##27148
026b8     F2 38 02 F1 | 	add	local10, objptr
026bc     14 3D 02 F6 | 	mov	local12, local02
026c0     1E 3B 02 F6 | 	mov	local11, local12
026c4     1D 41 02 F6 | 	mov	local14, local11
026c8     03 40 66 F0 | 	shl	local14, #3
026cc     F2 3E 02 F6 | 	mov	local13, objptr
026d0     F2 40 02 F1 | 	add	local14, objptr
026d4     20 13 02 FB | 	rdlong	arg01, local14
026d8     35 00 00 FF 
026dc     0C E4 85 F1 | 	sub	objptr, ##27148
026e0     E4 72 B2 FD | 	call	#__system__RTrim_S
026e4     FD 12 02 F6 | 	mov	arg01, result1
026e8     1C 72 B2 FD | 	call	#__system__LTrim_S
026ec     1C FB 61 FC | 	wrlong	result1, local10
026f0     01 28 06 F1 | 	add	local02, #1
026f4     A8 FF 9F FD | 	jmp	#LR__0127
026f8                 | LR__0128
026f8     00 28 06 F6 | 	mov	local02, #0
026fc     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02700                 | ' i=0
02700                 | ' do 
02700                 | LR__0129
02700                 | '   if len(lparts(i).part$)=0 then 
02700     14 2F 02 F6 | 	mov	local05, local02
02704     03 2E 66 F0 | 	shl	local05, #3
02708     35 00 00 FF 
0270c     0C E4 05 F1 | 	add	objptr, ##27148
02710     F2 2E 02 F1 | 	add	local05, objptr
02714     17 13 02 FB | 	rdlong	arg01, local05
02718     35 00 00 FF 
0271c     0C E4 85 F1 | 	sub	objptr, ##27148
02720     09 33 02 F6 | 	mov	local07, arg01
02724                 | LR__0130
02724     19 FB C9 FA | 	rdbyte	result1, local07 wz
02728     01 32 06 51 |  if_ne	add	local07, #1
0272c     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
02730     09 33 8A F1 | 	sub	local07, arg01 wz
02734     C4 00 90 5D |  if_ne	jmp	#LR__0134
02738                 | '     if i=k-1 then k-=1  :  exit
02738     23 2D 02 F6 | 	mov	local04, local17
0273c     01 2C 86 F1 | 	sub	local04, #1
02740     16 29 0A F2 | 	cmp	local02, local04 wz
02744     01 46 86 A1 |  if_e	sub	local17, #1
02748     C4 00 90 AD |  if_e	jmp	#LR__0136
0274c                 | '     if i<k-1 then 
0274c     23 2D 02 F6 | 	mov	local04, local17
02750     01 2C 86 F1 | 	sub	local04, #1
02754     16 29 52 F2 | 	cmps	local02, local04 wc
02758     A0 00 90 3D |  if_ae	jmp	#LR__0133
0275c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0275c     14 43 02 F6 | 	mov	local15, local02
02760     23 69 02 F6 | 	mov	local34, local17
02764     01 68 86 F1 | 	sub	local34, #1
02768                 | LR__0131
02768     34 43 52 F2 | 	cmps	local15, local34 wc
0276c     80 00 90 3D |  if_ae	jmp	#LR__0132
02770     21 2F 02 F6 | 	mov	local05, local15
02774     01 2E 06 F1 | 	add	local05, #1
02778     03 2E 66 F0 | 	shl	local05, #3
0277c     35 00 00 FF 
02780     0C E4 05 F1 | 	add	objptr, ##27148
02784     F2 2E 02 F1 | 	add	local05, objptr
02788     17 2D 02 FB | 	rdlong	local04, local05
0278c     21 31 02 F6 | 	mov	local06, local15
02790     01 30 06 F1 | 	add	local06, #1
02794     03 30 66 F0 | 	shl	local06, #3
02798     F2 30 02 F1 | 	add	local06, objptr
0279c     04 30 06 F1 | 	add	local06, #4
027a0     18 2B 02 FB | 	rdlong	local03, local06
027a4     21 39 02 F6 | 	mov	local10, local15
027a8     1C 31 02 F6 | 	mov	local06, local10
027ac     03 30 66 F0 | 	shl	local06, #3
027b0     F2 3C 02 F6 | 	mov	local12, objptr
027b4     F2 30 02 F1 | 	add	local06, objptr
027b8     18 2D 62 FC | 	wrlong	local04, local06
027bc     21 3B 02 F6 | 	mov	local11, local15
027c0     1D 41 02 F6 | 	mov	local14, local11
027c4     20 3F 02 F6 | 	mov	local13, local14
027c8     03 3E 66 F0 | 	shl	local13, #3
027cc     F2 5C 02 F6 | 	mov	local28, objptr
027d0     F2 3E 02 F1 | 	add	local13, objptr
027d4     04 3E 06 F1 | 	add	local13, #4
027d8     1F 2B 62 FC | 	wrlong	local03, local13
027dc     04 3E 86 F1 | 	sub	local13, #4
027e0     01 42 06 F1 | 	add	local15, #1
027e4     35 00 00 FF 
027e8     0C E4 85 F1 | 	sub	objptr, ##27148
027ec     78 FF 9F FD | 	jmp	#LR__0131
027f0                 | LR__0132
027f0     01 46 86 F1 | 	sub	local17, #1
027f4                 | '       if i>0 then i-=1 
027f4     01 28 56 F2 | 	cmps	local02, #1 wc
027f8     01 28 86 31 |  if_ae	sub	local02, #1
027fc                 | LR__0133
027fc                 | LR__0134
027fc     01 28 06 F1 | 	add	local02, #1
02800     23 2D 02 F6 | 	mov	local04, local17
02804     01 2C 86 F1 | 	sub	local04, #1
02808     16 29 5A F2 | 	cmps	local02, local04 wcz
0280c     F0 FE 9F ED |  if_be	jmp	#LR__0129
02810                 | LR__0135
02810                 | LR__0136
02810                 | ' 
02810                 | ' ' 1i: lowercase all that is not a string
02810                 | ' 
02810                 | ' for j=0 to k-1
02810     00 42 06 F6 | 	mov	local15, #0
02814     23 6B 02 F6 | 	mov	local35, local17
02818                 | LR__0137
02818     35 43 52 F2 | 	cmps	local15, local35 wc
0281c     CC 00 90 3D |  if_ae	jmp	#LR__0140
02820                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
02820     21 2F 02 F6 | 	mov	local05, local15
02824     03 2E 66 F0 | 	shl	local05, #3
02828     35 00 00 FF 
0282c     0C E4 05 F1 | 	add	objptr, ##27148
02830     F2 2E 02 F1 | 	add	local05, objptr
02834     17 13 02 FB | 	rdlong	arg01, local05
02838     01 14 06 F6 | 	mov	arg02, #1
0283c     35 00 00 FF 
02840     0C E4 85 F1 | 	sub	objptr, ##27148
02844     F0 6C B2 FD | 	call	#__system__Left_S
02848     FD 12 02 F6 | 	mov	arg01, result1
0284c     B8 01 00 FF 
02850     8F 14 06 F6 | 	mov	arg02, ##@LR__5491
02854     88 4C B2 FD | 	call	#__system___string_cmp
02858     00 FA 0D F2 | 	cmp	result1, #0 wz
0285c     44 00 90 5D |  if_ne	jmp	#LR__0138
02860     21 31 02 F6 | 	mov	local06, local15
02864     03 30 66 F0 | 	shl	local06, #3
02868     35 00 00 FF 
0286c     0C E4 05 F1 | 	add	objptr, ##27148
02870     F2 3C 02 F6 | 	mov	local12, objptr
02874     F2 30 02 F1 | 	add	local06, objptr
02878     18 13 02 FB | 	rdlong	arg01, local06
0287c     01 14 06 F6 | 	mov	arg02, #1
02880     35 00 00 FF 
02884     0C E4 85 F1 | 	sub	objptr, ##27148
02888     34 6D B2 FD | 	call	#__system__Right_S
0288c     FD 12 02 F6 | 	mov	arg01, result1
02890     B8 01 00 FF 
02894     91 14 06 F6 | 	mov	arg02, ##@LR__5492
02898     44 4C B2 FD | 	call	#__system___string_cmp
0289c     00 FA 0D F2 | 	cmp	result1, #0 wz
028a0     40 00 90 AD |  if_e	jmp	#LR__0139
028a4                 | LR__0138
028a4     21 39 02 F6 | 	mov	local10, local15
028a8     03 38 66 F0 | 	shl	local10, #3
028ac     35 00 00 FF 
028b0     0C E4 05 F1 | 	add	objptr, ##27148
028b4     F2 38 02 F1 | 	add	local10, objptr
028b8     21 3D 02 F6 | 	mov	local12, local15
028bc     1E 3B 02 F6 | 	mov	local11, local12
028c0     1D 41 02 F6 | 	mov	local14, local11
028c4     03 40 66 F0 | 	shl	local14, #3
028c8     F2 3E 02 F6 | 	mov	local13, objptr
028cc     F2 40 02 F1 | 	add	local14, objptr
028d0     20 13 02 FB | 	rdlong	arg01, local14
028d4     35 00 00 FF 
028d8     0C E4 85 F1 | 	sub	objptr, ##27148
028dc     68 6F B2 FD | 	call	#__system__LCase_S
028e0     1C FB 61 FC | 	wrlong	result1, local10
028e4                 | LR__0139
028e4     01 42 06 F1 | 	add	local15, #1
028e8     2C FF 9F FD | 	jmp	#LR__0137
028ec                 | LR__0140
028ec                 | ' 
028ec                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
028ec                 | ' 
028ec                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
028ec     00 28 06 F6 | 	mov	local02, #0
028f0     23 6D 02 F6 | 	mov	local36, local17
028f4     01 6C 06 F1 | 	add	local36, #1
028f8     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
028fc                 | LR__0141
028fc     36 29 52 F2 | 	cmps	local02, local36 wc
02900     30 00 90 3D |  if_ae	jmp	#LR__0143
02904     14 39 02 F6 | 	mov	local10, local02
02908     03 38 66 F0 | 	shl	local10, #3
0290c     35 00 00 FF 
02910     0C E4 05 F1 | 	add	objptr, ##27148
02914     F2 38 02 F1 | 	add	local10, objptr
02918     04 38 06 F1 | 	add	local10, #4
0291c     FF FF FF FF 
02920     1C FF 6B FC | 	wrlong	##-1, local10
02924     01 28 06 F1 | 	add	local02, #1
02928     35 00 00 FF 
0292c     0C E4 85 F1 | 	sub	objptr, ##27148
02930     C8 FF 9F FD | 	jmp	#LR__0141
02934                 | LR__0142
02934                 | LR__0143
02934                 | ' 
02934                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
02934     35 00 00 FF 
02938     0C E4 05 F1 | 	add	objptr, ##27148
0293c     F2 12 02 FB | 	rdlong	arg01, objptr
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     58 47 B0 FD | 	call	#_isdec
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     01 6E 06 56 |  if_ne	mov	local37, #1
02954     00 6E 06 A6 |  if_e	mov	local37, #0
02958                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02958     35 00 00 FF 
0295c     0C E4 05 F1 | 	add	objptr, ##27148
02960     F2 12 02 FB | 	rdlong	arg01, objptr
02964     35 00 00 FF 
02968     0C E4 85 F1 | 	sub	objptr, ##27148
0296c     B8 01 00 FF 
02970     93 14 06 F6 | 	mov	arg02, ##@LR__5493
02974     68 4B B2 FD | 	call	#__system___string_cmp
02978     00 FA 0D F2 | 	cmp	result1, #0 wz
0297c     01 6E 06 A6 |  if_e	mov	local37, #1
02980     00 28 06 F6 | 	mov	local02, #0
02984                 | ' i=0 : do 
02984                 | LR__0144
02984                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02984     14 2F 02 F6 | 	mov	local05, local02
02988     03 2E 66 F0 | 	shl	local05, #3
0298c     35 00 00 FF 
02990     0C E4 05 F1 | 	add	objptr, ##27148
02994     F2 2E 02 F1 | 	add	local05, objptr
02998     17 13 02 FB | 	rdlong	arg01, local05
0299c     B8 01 00 FF 
029a0     98 14 06 F6 | 	mov	arg02, ##@LR__5494
029a4     35 00 00 FF 
029a8     0C E4 85 F1 | 	sub	objptr, ##27148
029ac     30 4B B2 FD | 	call	#__system___string_cmp
029b0     00 FA 0D F2 | 	cmp	result1, #0 wz
029b4     0C 00 90 AD |  if_e	jmp	#LR__0145
029b8     01 28 06 F1 | 	add	local02, #1
029bc     23 29 5A F2 | 	cmps	local02, local17 wcz
029c0     C0 FF 9F ED |  if_be	jmp	#LR__0144
029c4                 | LR__0145
029c4                 | ' if i<k then addptr=i+1	 							' then found
029c4     23 29 52 F2 | 	cmps	local02, local17 wc
029c8     14 6F 02 C6 |  if_b	mov	local37, local02
029cc     01 6E 06 C1 |  if_b	add	local37, #1
029d0     35 00 00 FF 
029d4     0C E4 05 F1 | 	add	objptr, ##27148
029d8                 | ' lp$=lparts(addptr).part$ 
029d8                 | ' 
029d8                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
029d8     37 2F 02 F6 | 	mov	local05, local37
029dc     03 2E 66 F0 | 	shl	local05, #3
029e0     F2 2E 02 F1 | 	add	local05, objptr
029e4     17 13 02 FB | 	rdlong	arg01, local05
029e8     01 14 06 F6 | 	mov	arg02, #1
029ec     35 00 00 FF 
029f0     0C E4 85 F1 | 	sub	objptr, ##27148
029f4     40 6B B2 FD | 	call	#__system__Left_S
029f8     FD 12 02 F6 | 	mov	arg01, result1
029fc     B8 01 00 FF 
02a00     9D 14 06 F6 | 	mov	arg02, ##@LR__5495
02a04     D8 4A B2 FD | 	call	#__system___string_cmp
02a08     00 FA 0D F2 | 	cmp	result1, #0 wz
02a0c     60 01 90 5D |  if_ne	jmp	#LR__0152
02a10     37 31 02 F6 | 	mov	local06, local37
02a14     03 30 66 F0 | 	shl	local06, #3
02a18     35 00 00 FF 
02a1c     0C E4 05 F1 | 	add	objptr, ##27148
02a20     F2 30 02 F1 | 	add	local06, objptr
02a24     18 13 02 FB | 	rdlong	arg01, local06
02a28     35 00 00 FF 
02a2c     0C E4 85 F1 | 	sub	objptr, ##27148
02a30     09 33 02 F6 | 	mov	local07, arg01
02a34     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02a38                 | LR__0146
02a38     19 FB C9 FA | 	rdbyte	result1, local07 wz
02a3c     01 32 06 51 |  if_ne	add	local07, #1
02a40     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02a44                 | LR__0147
02a44     09 33 82 F1 | 	sub	local07, arg01
02a48     02 32 56 F2 | 	cmps	local07, #2 wc
02a4c     20 01 90 CD |  if_b	jmp	#LR__0152
02a50     01 46 06 F1 | 	add	local17, #1
02a54                 | '   k+=1
02a54                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02a54     23 29 02 F6 | 	mov	local02, local17
02a58     37 71 02 F6 | 	mov	local38, local37
02a5c     01 70 06 F1 | 	add	local38, #1
02a60     35 00 00 FF 
02a64     0C E4 05 F1 | 	add	objptr, ##27148
02a68     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a6c                 | LR__0148
02a6c     14 2F 02 F6 | 	mov	local05, local02
02a70     01 2E 86 F1 | 	sub	local05, #1
02a74     03 2E 66 F0 | 	shl	local05, #3
02a78     F2 2E 02 F1 | 	add	local05, objptr
02a7c     17 2D 02 FB | 	rdlong	local04, local05
02a80     14 31 02 F6 | 	mov	local06, local02
02a84     01 30 86 F1 | 	sub	local06, #1
02a88     03 30 66 F0 | 	shl	local06, #3
02a8c     F2 30 02 F1 | 	add	local06, objptr
02a90     04 30 06 F1 | 	add	local06, #4
02a94     18 2B 02 FB | 	rdlong	local03, local06
02a98     14 31 02 F6 | 	mov	local06, local02
02a9c     03 30 66 F0 | 	shl	local06, #3
02aa0     F2 30 02 F1 | 	add	local06, objptr
02aa4     18 2D 62 FC | 	wrlong	local04, local06
02aa8     14 3F 02 F6 | 	mov	local13, local02
02aac     03 3E 66 F0 | 	shl	local13, #3
02ab0     F2 3E 02 F1 | 	add	local13, objptr
02ab4     04 3E 06 F1 | 	add	local13, #4
02ab8     1F 2B 62 FC | 	wrlong	local03, local13
02abc     01 28 86 F1 | 	sub	local02, #1
02ac0     38 29 52 F2 | 	cmps	local02, local38 wc
02ac4     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02ac8                 | LR__0149
02ac8     37 39 02 F6 | 	mov	local10, local37
02acc     01 38 06 F1 | 	add	local10, #1
02ad0     03 38 66 F0 | 	shl	local10, #3
02ad4     F2 38 02 F1 | 	add	local10, objptr
02ad8     37 41 02 F6 | 	mov	local14, local37
02adc     03 40 66 F0 | 	shl	local14, #3
02ae0     F2 40 02 F1 | 	add	local14, objptr
02ae4     20 31 02 FB | 	rdlong	local06, local14
02ae8     37 3F 02 F6 | 	mov	local13, local37
02aec     1F 5D 02 F6 | 	mov	local28, local13
02af0     2E 51 02 F6 | 	mov	local22, local28
02af4     03 50 66 F0 | 	shl	local22, #3
02af8     F2 52 02 F6 | 	mov	local23, objptr
02afc     F2 50 02 F1 | 	add	local22, objptr
02b00     28 13 02 FB | 	rdlong	arg01, local22
02b04     35 00 00 FF 
02b08     0C E4 85 F1 | 	sub	objptr, ##27148
02b0c     09 33 02 F6 | 	mov	local07, arg01
02b10     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02b14                 | LR__0150
02b14     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b18     01 32 06 51 |  if_ne	add	local07, #1
02b1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02b20                 | LR__0151
02b20     09 33 82 F1 | 	sub	local07, arg01
02b24     19 41 02 F6 | 	mov	local14, local07
02b28     20 3B 02 F6 | 	mov	local11, local14
02b2c     01 3A 86 F1 | 	sub	local11, #1
02b30     1D 3D 02 F6 | 	mov	local12, local11
02b34     18 13 02 F6 | 	mov	arg01, local06
02b38     1E 15 02 F6 | 	mov	arg02, local12
02b3c     80 6A B2 FD | 	call	#__system__Right_S
02b40     1C FB 61 FC | 	wrlong	result1, local10
02b44     37 39 02 F6 | 	mov	local10, local37
02b48     03 38 66 F0 | 	shl	local10, #3
02b4c     35 00 00 FF 
02b50     0C E4 05 F1 | 	add	objptr, ##27148
02b54     F2 38 02 F1 | 	add	local10, objptr
02b58     B8 01 00 FF 
02b5c     9F 30 06 F6 | 	mov	local06, ##@LR__5496
02b60     1C 31 62 FC | 	wrlong	local06, local10
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     A8 01 90 FD | 	jmp	#LR__0160
02b70                 | LR__0152
02b70     37 31 02 F6 | 	mov	local06, local37
02b74     03 30 66 F0 | 	shl	local06, #3
02b78     35 00 00 FF 
02b7c     0C E4 05 F1 | 	add	objptr, ##27148
02b80     F2 3C 02 F6 | 	mov	local12, objptr
02b84     F2 30 02 F1 | 	add	local06, objptr
02b88     18 15 02 FB | 	rdlong	arg02, local06
02b8c     B8 01 00 FF 
02b90     A1 16 06 F6 | 	mov	arg03, ##@LR__5497
02b94     01 12 06 F6 | 	mov	arg01, #1
02b98     35 00 00 FF 
02b9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ba0     DC 6E B2 FD | 	call	#__system__Instr
02ba4     FD 72 02 F6 | 	mov	local39, result1
02ba8                 | ' 
02ba8                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02ba8                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02ba8     01 72 56 F2 | 	cmps	local39, #1 wc
02bac     68 01 90 CD |  if_b	jmp	#LR__0159
02bb0     37 2F 02 F6 | 	mov	local05, local37
02bb4     03 2E 66 F0 | 	shl	local05, #3
02bb8     35 00 00 FF 
02bbc     0C E4 05 F1 | 	add	objptr, ##27148
02bc0     F2 2E 02 F1 | 	add	local05, objptr
02bc4     17 13 02 FB | 	rdlong	arg01, local05
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0     09 33 02 F6 | 	mov	local07, arg01
02bd4     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02bd8                 | LR__0153
02bd8     19 FB C9 FA | 	rdbyte	result1, local07 wz
02bdc     01 32 06 51 |  if_ne	add	local07, #1
02be0     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02be4                 | LR__0154
02be4     09 33 82 F1 | 	sub	local07, arg01
02be8     19 73 52 F2 | 	cmps	local39, local07 wc
02bec     28 01 90 3D |  if_ae	jmp	#LR__0159
02bf0     01 46 06 F1 | 	add	local17, #1
02bf4                 | '   k+=1
02bf4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02bf4     23 29 02 F6 | 	mov	local02, local17
02bf8     37 75 02 F6 | 	mov	local40, local37
02bfc     01 74 06 F1 | 	add	local40, #1
02c00     35 00 00 FF 
02c04     0C E4 05 F1 | 	add	objptr, ##27148
02c08     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c0c                 | LR__0155
02c0c     14 2F 02 F6 | 	mov	local05, local02
02c10     01 2E 86 F1 | 	sub	local05, #1
02c14     03 2E 66 F0 | 	shl	local05, #3
02c18     F2 2E 02 F1 | 	add	local05, objptr
02c1c     17 2D 02 FB | 	rdlong	local04, local05
02c20     14 31 02 F6 | 	mov	local06, local02
02c24     01 30 86 F1 | 	sub	local06, #1
02c28     03 30 66 F0 | 	shl	local06, #3
02c2c     F2 30 02 F1 | 	add	local06, objptr
02c30     04 30 06 F1 | 	add	local06, #4
02c34     18 2B 02 FB | 	rdlong	local03, local06
02c38     14 31 02 F6 | 	mov	local06, local02
02c3c     03 30 66 F0 | 	shl	local06, #3
02c40     F2 30 02 F1 | 	add	local06, objptr
02c44     18 2D 62 FC | 	wrlong	local04, local06
02c48     14 3F 02 F6 | 	mov	local13, local02
02c4c     03 3E 66 F0 | 	shl	local13, #3
02c50     F2 3E 02 F1 | 	add	local13, objptr
02c54     04 3E 06 F1 | 	add	local13, #4
02c58     1F 2B 62 FC | 	wrlong	local03, local13
02c5c     01 28 86 F1 | 	sub	local02, #1
02c60     3A 29 52 F2 | 	cmps	local02, local40 wc
02c64     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c68                 | LR__0156
02c68     37 39 02 F6 | 	mov	local10, local37
02c6c     01 38 06 F1 | 	add	local10, #1
02c70     03 38 66 F0 | 	shl	local10, #3
02c74     F2 38 02 F1 | 	add	local10, objptr
02c78     37 41 02 F6 | 	mov	local14, local37
02c7c     03 40 66 F0 | 	shl	local14, #3
02c80     F2 40 02 F1 | 	add	local14, objptr
02c84     20 31 02 FB | 	rdlong	local06, local14
02c88     37 5D 02 F6 | 	mov	local28, local37
02c8c     2E 51 02 F6 | 	mov	local22, local28
02c90     03 50 66 F0 | 	shl	local22, #3
02c94     F2 52 02 F6 | 	mov	local23, objptr
02c98     F2 50 02 F1 | 	add	local22, objptr
02c9c     28 13 02 FB | 	rdlong	arg01, local22
02ca0     35 00 00 FF 
02ca4     0C E4 85 F1 | 	sub	objptr, ##27148
02ca8     09 33 02 F6 | 	mov	local07, arg01
02cac     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02cb0                 | LR__0157
02cb0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02cb4     01 32 06 51 |  if_ne	add	local07, #1
02cb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02cbc                 | LR__0158
02cbc     09 33 82 F1 | 	sub	local07, arg01
02cc0     19 15 02 F6 | 	mov	arg02, local07
02cc4     39 15 82 F1 | 	sub	arg02, local39
02cc8     18 13 02 F6 | 	mov	arg01, local06
02ccc     F0 68 B2 FD | 	call	#__system__Right_S
02cd0     1C FB 61 FC | 	wrlong	result1, local10
02cd4     37 39 02 F6 | 	mov	local10, local37
02cd8     03 38 66 F0 | 	shl	local10, #3
02cdc     35 00 00 FF 
02ce0     0C E4 05 F1 | 	add	objptr, ##27148
02ce4     F2 38 02 F1 | 	add	local10, objptr
02ce8     37 3B 02 F6 | 	mov	local11, local37
02cec     1D 41 02 F6 | 	mov	local14, local11
02cf0     03 40 66 F0 | 	shl	local14, #3
02cf4     F2 3E 02 F6 | 	mov	local13, objptr
02cf8     F2 40 02 F1 | 	add	local14, objptr
02cfc     20 13 02 FB | 	rdlong	arg01, local14
02d00     39 3D 02 F6 | 	mov	local12, local39
02d04     1E 15 02 F6 | 	mov	arg02, local12
02d08     35 00 00 FF 
02d0c     0C E4 85 F1 | 	sub	objptr, ##27148
02d10     24 68 B2 FD | 	call	#__system__Left_S
02d14     1C FB 61 FC | 	wrlong	result1, local10
02d18                 | LR__0159
02d18                 | LR__0160
02d18     37 39 02 F6 | 	mov	local10, local37
02d1c     03 38 66 F0 | 	shl	local10, #3
02d20     35 00 00 FF 
02d24     0C E4 05 F1 | 	add	objptr, ##27148
02d28     F2 38 02 F1 | 	add	local10, objptr
02d2c     1C 77 02 FB | 	rdlong	local41, local10
02d30                 | ' 
02d30                 | ' 825
02d30                 | ' lp$=lparts(addptr).part$ 
02d30                 | ' 
02d30                 | ' ' process mouse/cursor/click on/off
02d30                 | ' 
02d30                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d30     B8 01 00 FF 
02d34     A3 14 06 F6 | 	mov	arg02, ##@LR__5498
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     35 00 00 FF 
02d40     0C E4 85 F1 | 	sub	objptr, ##27148
02d44     98 47 B2 FD | 	call	#__system___string_cmp
02d48     00 FA 0D F2 | 	cmp	result1, #0 wz
02d4c     30 00 90 AD |  if_e	jmp	#LR__0161
02d50     B8 01 00 FF 
02d54     A9 14 06 F6 | 	mov	arg02, ##@LR__5499
02d58     3B 13 02 F6 | 	mov	arg01, local41
02d5c     80 47 B2 FD | 	call	#__system___string_cmp
02d60     00 FA 0D F2 | 	cmp	result1, #0 wz
02d64     18 00 90 AD |  if_e	jmp	#LR__0161
02d68     B8 01 00 FF 
02d6c     B0 14 06 F6 | 	mov	arg02, ##@LR__5500
02d70     3B 13 02 F6 | 	mov	arg01, local41
02d74     68 47 B2 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d80                 | LR__0161
02d80                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d80     37 2F 02 F6 | 	mov	local05, local37
02d84     01 2E 06 F1 | 	add	local05, #1
02d88     03 2E 66 F0 | 	shl	local05, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 2E 02 F1 | 	add	local05, objptr
02d98     17 13 02 FB | 	rdlong	arg01, local05
02d9c     B8 01 00 FF 
02da0     B6 14 06 F6 | 	mov	arg02, ##@LR__5501
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac     30 47 B2 FD | 	call	#__system___string_cmp
02db0     00 FA 0D F2 | 	cmp	result1, #0 wz
02db4     38 00 90 5D |  if_ne	jmp	#LR__0162
02db8     37 39 02 F6 | 	mov	local10, local37
02dbc     01 38 06 F1 | 	add	local10, #1
02dc0     03 38 66 F0 | 	shl	local10, #3
02dc4     35 00 00 FF 
02dc8     0C E4 05 F1 | 	add	objptr, ##27148
02dcc     F2 38 02 F1 | 	add	local10, objptr
02dd0     B8 01 00 FF 
02dd4     B9 30 06 F6 | 	mov	local06, ##@LR__5502
02dd8     1C 31 62 FC | 	wrlong	local06, local10
02ddc     14 E4 05 F1 | 	add	objptr, #20
02de0     01 00 80 FF 
02de4     F2 00 68 FC | 	wrlong	##512, objptr
02de8     35 00 00 FF 
02dec     20 E4 85 F1 | 	sub	objptr, ##27168
02df0                 | LR__0162
02df0                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02df0     37 2F 02 F6 | 	mov	local05, local37
02df4     01 2E 06 F1 | 	add	local05, #1
02df8     03 2E 66 F0 | 	shl	local05, #3
02dfc     35 00 00 FF 
02e00     0C E4 05 F1 | 	add	objptr, ##27148
02e04     F2 2E 02 F1 | 	add	local05, objptr
02e08     17 13 02 FB | 	rdlong	arg01, local05
02e0c     B8 01 00 FF 
02e10     BB 14 06 F6 | 	mov	arg02, ##@LR__5503
02e14     35 00 00 FF 
02e18     0C E4 85 F1 | 	sub	objptr, ##27148
02e1c     C0 46 B2 FD | 	call	#__system___string_cmp
02e20     00 FA 0D F2 | 	cmp	result1, #0 wz
02e24     38 00 90 5D |  if_ne	jmp	#LR__0163
02e28     37 39 02 F6 | 	mov	local10, local37
02e2c     01 38 06 F1 | 	add	local10, #1
02e30     03 38 66 F0 | 	shl	local10, #3
02e34     35 00 00 FF 
02e38     0C E4 05 F1 | 	add	objptr, ##27148
02e3c     F2 38 02 F1 | 	add	local10, objptr
02e40     B8 01 00 FF 
02e44     BF 30 06 F6 | 	mov	local06, ##@LR__5504
02e48     1C 31 62 FC | 	wrlong	local06, local10
02e4c     14 E4 05 F1 | 	add	objptr, #20
02e50     01 00 80 FF 
02e54     F2 00 68 FC | 	wrlong	##512, objptr
02e58     35 00 00 FF 
02e5c     20 E4 85 F1 | 	sub	objptr, ##27168
02e60                 | LR__0163
02e60                 | LR__0164
02e60                 | ' 		
02e60                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02e60                 | ' 
02e60                 | ' if (lp$="mode" orelse lp$="m.") then 
02e60     B8 01 00 FF 
02e64     C1 14 06 F6 | 	mov	arg02, ##@LR__5505
02e68     3B 13 02 F6 | 	mov	arg01, local41
02e6c     70 46 B2 FD | 	call	#__system___string_cmp
02e70     00 FA 0D F2 | 	cmp	result1, #0 wz
02e74     18 00 90 AD |  if_e	jmp	#LR__0165
02e78     B8 01 00 FF 
02e7c     C6 14 06 F6 | 	mov	arg02, ##@LR__5506
02e80     3B 13 02 F6 | 	mov	arg01, local41
02e84     58 46 B2 FD | 	call	#__system___string_cmp
02e88     00 FA 0D F2 | 	cmp	result1, #0 wz
02e8c     58 02 90 5D |  if_ne	jmp	#LR__0172
02e90                 | LR__0165
02e90                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     B8 01 00 FF 
02eb0     C9 14 06 F6 | 	mov	arg02, ##@LR__5507
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     20 46 B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0166
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     B8 01 00 FF 
02ee4     CF 30 06 F6 | 	mov	local06, ##@LR__5508
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0166
02ef4                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     B8 01 00 FF 
02f14     D1 14 06 F6 | 	mov	arg02, ##@LR__5509
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     BC 45 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0167
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     B8 01 00 FF 
02f48     DA 30 06 F6 | 	mov	local06, ##@LR__5510
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0167
02f58                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     B8 01 00 FF 
02f78     DC 14 06 F6 | 	mov	arg02, ##@LR__5511
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     58 45 B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     B8 01 00 FF 
02fac     E5 30 06 F6 | 	mov	local06, ##@LR__5512
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0168
02fbc                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     B8 01 00 FF 
02fdc     E7 14 06 F6 | 	mov	arg02, ##@LR__5513
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     F4 44 B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0169
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     B8 01 00 FF 
03010     F0 30 06 F6 | 	mov	local06, ##@LR__5514
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0169
03020                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03020     37 2F 02 F6 | 	mov	local05, local37
03024     01 2E 06 F1 | 	add	local05, #1
03028     03 2E 66 F0 | 	shl	local05, #3
0302c     35 00 00 FF 
03030     0C E4 05 F1 | 	add	objptr, ##27148
03034     F2 2E 02 F1 | 	add	local05, objptr
03038     17 13 02 FB | 	rdlong	arg01, local05
0303c     B8 01 00 FF 
03040     F2 14 06 F6 | 	mov	arg02, ##@LR__5515
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     90 44 B2 FD | 	call	#__system___string_cmp
03050     00 FA 0D F2 | 	cmp	result1, #0 wz
03054     2C 00 90 5D |  if_ne	jmp	#LR__0170
03058     37 39 02 F6 | 	mov	local10, local37
0305c     01 38 06 F1 | 	add	local10, #1
03060     03 38 66 F0 | 	shl	local10, #3
03064     35 00 00 FF 
03068     0C E4 05 F1 | 	add	objptr, ##27148
0306c     F2 38 02 F1 | 	add	local10, objptr
03070     B8 01 00 FF 
03074     F5 30 06 F6 | 	mov	local06, ##@LR__5516
03078     1C 31 62 FC | 	wrlong	local06, local10
0307c     35 00 00 FF 
03080     0C E4 85 F1 | 	sub	objptr, ##27148
03084                 | LR__0170
03084                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
03084     37 2F 02 F6 | 	mov	local05, local37
03088     01 2E 06 F1 | 	add	local05, #1
0308c     03 2E 66 F0 | 	shl	local05, #3
03090     35 00 00 FF 
03094     0C E4 05 F1 | 	add	objptr, ##27148
03098     F2 2E 02 F1 | 	add	local05, objptr
0309c     17 13 02 FB | 	rdlong	arg01, local05
030a0     B8 01 00 FF 
030a4     F7 14 06 F6 | 	mov	arg02, ##@LR__5517
030a8     35 00 00 FF 
030ac     0C E4 85 F1 | 	sub	objptr, ##27148
030b0     2C 44 B2 FD | 	call	#__system___string_cmp
030b4     00 FA 0D F2 | 	cmp	result1, #0 wz
030b8     2C 00 90 5D |  if_ne	jmp	#LR__0171
030bc     37 39 02 F6 | 	mov	local10, local37
030c0     01 38 06 F1 | 	add	local10, #1
030c4     03 38 66 F0 | 	shl	local10, #3
030c8     35 00 00 FF 
030cc     0C E4 05 F1 | 	add	objptr, ##27148
030d0     F2 38 02 F1 | 	add	local10, objptr
030d4     B8 01 00 FF 
030d8     FD 30 06 F6 | 	mov	local06, ##@LR__5518
030dc     1C 31 62 FC | 	wrlong	local06, local10
030e0     35 00 00 FF 
030e4     0C E4 85 F1 | 	sub	objptr, ##27148
030e8                 | LR__0171
030e8                 | LR__0172
030e8                 | ' 
030e8                 | ' ' find part types 
030e8                 | ' 
030e8                 | ' for i=0 to k-1
030e8     00 28 06 F6 | 	mov	local02, #0
030ec     23 79 02 F6 | 	mov	local42, local17
030f0                 | LR__0173
030f0     3C 29 52 F2 | 	cmps	local02, local42 wc
030f4     A4 07 90 3D |  if_ae	jmp	#LR__0185
030f8     14 39 02 F6 | 	mov	local10, local02
030fc     03 38 66 F0 | 	shl	local10, #3
03100     35 00 00 FF 
03104     0C E4 05 F1 | 	add	objptr, ##27148
03108     F2 38 02 F1 | 	add	local10, objptr
0310c     14 3B 02 F6 | 	mov	local11, local02
03110     1D 41 02 F6 | 	mov	local14, local11
03114     20 3F 02 F6 | 	mov	local13, local14
03118     03 3E 66 F0 | 	shl	local13, #3
0311c     F2 3E 02 F1 | 	add	local13, objptr
03120     1F 13 02 FB | 	rdlong	arg01, local13
03124     35 00 00 FF 
03128     0C E4 85 F1 | 	sub	objptr, ##27148
0312c     70 1B B0 FD | 	call	#_isseparator
03130     FD FA E1 F8 | 	getbyte	result1, result1, #0
03134     04 38 06 F1 | 	add	local10, #4
03138     1C FB 61 FC | 	wrlong	result1, local10
0313c                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0313c     14 39 02 F6 | 	mov	local10, local02
03140     03 38 66 F0 | 	shl	local10, #3
03144     35 00 00 FF 
03148     0C E4 05 F1 | 	add	objptr, ##27148
0314c     F2 38 02 F1 | 	add	local10, objptr
03150     04 38 06 F1 | 	add	local10, #4
03154     1C 3D 02 FB | 	rdlong	local12, local10
03158     01 3C 56 F2 | 	cmps	local12, #1 wc
0315c     35 00 00 FF 
03160     0C E4 85 F1 | 	sub	objptr, ##27148
03164     2C 07 90 3D |  if_ae	jmp	#LR__0184
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     14 3B 02 F6 | 	mov	local11, local02
03180     1D 41 02 F6 | 	mov	local14, local11
03184     20 3F 02 F6 | 	mov	local13, local14
03188     03 3E 66 F0 | 	shl	local13, #3
0318c     F2 3E 02 F1 | 	add	local13, objptr
03190     1F 13 02 FB | 	rdlong	arg01, local13
03194     35 00 00 FF 
03198     0C E4 85 F1 | 	sub	objptr, ##27148
0319c     4C 13 B0 FD | 	call	#_isoperator
031a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
031a4     04 38 06 F1 | 	add	local10, #4
031a8     1C FB 61 FC | 	wrlong	result1, local10
031ac                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031ac     14 39 02 F6 | 	mov	local10, local02
031b0     03 38 66 F0 | 	shl	local10, #3
031b4     35 00 00 FF 
031b8     0C E4 05 F1 | 	add	objptr, ##27148
031bc     F2 38 02 F1 | 	add	local10, objptr
031c0     04 38 06 F1 | 	add	local10, #4
031c4     1C 3D 02 FB | 	rdlong	local12, local10
031c8     01 3C 56 F2 | 	cmps	local12, #1 wc
031cc     35 00 00 FF 
031d0     0C E4 85 F1 | 	sub	objptr, ##27148
031d4     BC 06 90 3D |  if_ae	jmp	#LR__0184
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     0C E4 05 F1 | 	add	objptr, ##27148
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     14 3B 02 F6 | 	mov	local11, local02
031f0     1D 41 02 F6 | 	mov	local14, local11
031f4     20 3F 02 F6 | 	mov	local13, local14
031f8     03 3E 66 F0 | 	shl	local13, #3
031fc     F2 3E 02 F1 | 	add	local13, objptr
03200     1F 13 02 FB | 	rdlong	arg01, local13
03204     35 00 00 FF 
03208     0C E4 85 F1 | 	sub	objptr, ##27148
0320c                 | ' 
0320c                 | ' select case s
0320c     B9 01 00 FF 
03210     02 14 06 F6 | 	mov	arg02, ##@LR__5609
03214     C8 42 B2 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     1B FA 05 A6 |  if_e	mov	result1, #27
03220     00 FA 05 56 |  if_ne	mov	result1, #0
03224     FD FA E1 F8 | 	getbyte	result1, result1, #0
03228     04 38 06 F1 | 	add	local10, #4
0322c     1C FB 61 FC | 	wrlong	result1, local10
03230                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 38 02 F1 | 	add	local10, objptr
03244     04 38 06 F1 | 	add	local10, #4
03248     1C 3D 02 FB | 	rdlong	local12, local10
0324c     01 3C 56 F2 | 	cmps	local12, #1 wc
03250     35 00 00 FF 
03254     0C E4 85 F1 | 	sub	objptr, ##27148
03258     38 06 90 3D |  if_ae	jmp	#LR__0184
0325c     14 39 02 F6 | 	mov	local10, local02
03260     03 38 66 F0 | 	shl	local10, #3
03264     35 00 00 FF 
03268     0C E4 05 F1 | 	add	objptr, ##27148
0326c     F2 38 02 F1 | 	add	local10, objptr
03270     14 3B 02 F6 | 	mov	local11, local02
03274     1D 41 02 F6 | 	mov	local14, local11
03278     20 3F 02 F6 | 	mov	local13, local14
0327c     03 3E 66 F0 | 	shl	local13, #3
03280     F2 3E 02 F1 | 	add	local13, objptr
03284     1F 13 02 FB | 	rdlong	arg01, local13
03288     35 00 00 FF 
0328c     0C E4 85 F1 | 	sub	objptr, ##27148
03290     0C 1C B0 FD | 	call	#_iscommand
03294     FD FA E1 F8 | 	getbyte	result1, result1, #0
03298     04 38 06 F1 | 	add	local10, #4
0329c     1C FB 61 FC | 	wrlong	result1, local10
032a0                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032a0     14 39 02 F6 | 	mov	local10, local02
032a4     03 38 66 F0 | 	shl	local10, #3
032a8     35 00 00 FF 
032ac     0C E4 05 F1 | 	add	objptr, ##27148
032b0     F2 38 02 F1 | 	add	local10, objptr
032b4     04 38 06 F1 | 	add	local10, #4
032b8     1C 3D 02 FB | 	rdlong	local12, local10
032bc     01 3C 56 F2 | 	cmps	local12, #1 wc
032c0     35 00 00 FF 
032c4     0C E4 85 F1 | 	sub	objptr, ##27148
032c8     C8 05 90 3D |  if_ae	jmp	#LR__0184
032cc     14 39 02 F6 | 	mov	local10, local02
032d0     03 38 66 F0 | 	shl	local10, #3
032d4     35 00 00 FF 
032d8     0C E4 05 F1 | 	add	objptr, ##27148
032dc     F2 38 02 F1 | 	add	local10, objptr
032e0     14 3B 02 F6 | 	mov	local11, local02
032e4     1D 41 02 F6 | 	mov	local14, local11
032e8     20 3F 02 F6 | 	mov	local13, local14
032ec     03 3E 66 F0 | 	shl	local13, #3
032f0     F2 5C 02 F6 | 	mov	local28, objptr
032f4     F2 3E 02 F1 | 	add	local13, objptr
032f8     1F 13 02 FB | 	rdlong	arg01, local13
032fc     35 00 00 FF 
03300     0C E4 85 F1 | 	sub	objptr, ##27148
03304     D8 2C B0 FD | 	call	#_isfunction
03308     FD FA E1 F8 | 	getbyte	result1, result1, #0
0330c     04 38 06 F1 | 	add	local10, #4
03310     1C FB 61 FC | 	wrlong	result1, local10
03314                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     0C E4 05 F1 | 	add	objptr, ##27148
03324     F2 38 02 F1 | 	add	local10, objptr
03328     04 38 06 F1 | 	add	local10, #4
0332c     1C 3D 02 FB | 	rdlong	local12, local10
03330     01 3C 56 F2 | 	cmps	local12, #1 wc
03334     35 00 00 FF 
03338     0C E4 85 F1 | 	sub	objptr, ##27148
0333c     54 05 90 3D |  if_ae	jmp	#LR__0184
03340     14 39 02 F6 | 	mov	local10, local02
03344     03 38 66 F0 | 	shl	local10, #3
03348     35 00 00 FF 
0334c     0C E4 05 F1 | 	add	objptr, ##27148
03350     F2 38 02 F1 | 	add	local10, objptr
03354     14 3B 02 F6 | 	mov	local11, local02
03358     1D 41 02 F6 | 	mov	local14, local11
0335c     03 40 66 F0 | 	shl	local14, #3
03360     F2 3E 02 F6 | 	mov	local13, objptr
03364     F2 40 02 F1 | 	add	local14, objptr
03368     20 13 02 FB | 	rdlong	arg01, local14
0336c     35 00 00 FF 
03370     0C E4 85 F1 | 	sub	objptr, ##27148
03374     BC 15 B0 FD | 	call	#_isnotename
03378     04 38 06 F1 | 	add	local10, #4
0337c     1C FB 61 FC | 	wrlong	result1, local10
03380                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03380                 | ' if lparts(i).token>0 then 
03380     14 39 02 F6 | 	mov	local10, local02
03384     03 38 66 F0 | 	shl	local10, #3
03388     35 00 00 FF 
0338c     0C E4 05 F1 | 	add	objptr, ##27148
03390     F2 38 02 F1 | 	add	local10, objptr
03394     04 38 06 F1 | 	add	local10, #4
03398     1C 31 02 FB | 	rdlong	local06, local10
0339c     01 30 56 F2 | 	cmps	local06, #1 wc
033a0     35 00 00 FF 
033a4     0C E4 85 F1 | 	sub	objptr, ##27148
033a8     8C 00 90 CD |  if_b	jmp	#LR__0174
033ac     14 2F 02 F6 | 	mov	local05, local02
033b0     03 2E 66 F0 | 	shl	local05, #3
033b4     35 00 00 FF 
033b8     0C E4 05 F1 | 	add	objptr, ##27148
033bc     F2 2E 02 F1 | 	add	local05, objptr
033c0     04 2E 06 F1 | 	add	local05, #4
033c4     17 3D 02 FB | 	rdlong	local12, local05
033c8     1E 13 02 F6 | 	mov	arg01, local12
033cc     35 00 00 FF 
033d0     0C E4 85 F1 | 	sub	objptr, ##27148
033d4     F0 3D B0 FD | 	call	#_getnoteval
033d8     FD 7A 02 F6 | 	mov	local43, result1
033dc     14 39 02 F6 | 	mov	local10, local02
033e0     03 38 66 F0 | 	shl	local10, #3
033e4     35 00 00 FF 
033e8     0C E4 05 F1 | 	add	objptr, ##27148
033ec     F2 38 02 F1 | 	add	local10, objptr
033f0     3D 13 02 F6 | 	mov	arg01, local43
033f4     35 00 00 FF 
033f8     0C E4 85 F1 | 	sub	objptr, ##27148
033fc     30 63 B2 FD | 	call	#__system__str_S
03400     1C FB 61 FC | 	wrlong	result1, local10
03404     14 2D 02 F6 | 	mov	local04, local02
03408     16 2B 02 F6 | 	mov	local03, local04
0340c     15 39 02 F6 | 	mov	local10, local03
03410     03 38 66 F0 | 	shl	local10, #3
03414     35 00 00 FF 
03418     0C E4 05 F1 | 	add	objptr, ##27148
0341c     F2 38 02 F1 | 	add	local10, objptr
03420     04 38 06 F1 | 	add	local10, #4
03424     01 00 80 FF 
03428     1C 05 68 FC | 	wrlong	##514, local10
0342c     35 00 00 FF 
03430     0C E4 85 F1 | 	sub	objptr, ##27148
03434     5C 04 90 FD | 	jmp	#LR__0184
03438                 | LR__0174
03438     14 39 02 F6 | 	mov	local10, local02
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     14 41 02 F6 | 	mov	local14, local02
03450     03 40 66 F0 | 	shl	local14, #3
03454     F2 40 02 F1 | 	add	local14, objptr
03458     20 13 02 FB | 	rdlong	arg01, local14
0345c     35 00 00 FF 
03460     0C E4 85 F1 | 	sub	objptr, ##27148
03464     64 13 B0 FD | 	call	#_ischannel
03468     04 38 06 F1 | 	add	local10, #4
0346c     1C FB 61 FC | 	wrlong	result1, local10
03470                 | ' 
03470                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03470                 | ' 
03470                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03470     14 39 02 F6 | 	mov	local10, local02
03474     03 38 66 F0 | 	shl	local10, #3
03478     35 00 00 FF 
0347c     0C E4 05 F1 | 	add	objptr, ##27148
03480     F2 38 02 F1 | 	add	local10, objptr
03484     04 38 06 F1 | 	add	local10, #4
03488     1C 31 02 FB | 	rdlong	local06, local10
0348c     01 30 56 F2 | 	cmps	local06, #1 wc
03490     35 00 00 FF 
03494     0C E4 85 F1 | 	sub	objptr, ##27148
03498     74 00 90 CD |  if_b	jmp	#LR__0175
0349c     14 39 02 F6 | 	mov	local10, local02
034a0     03 38 66 F0 | 	shl	local10, #3
034a4     35 00 00 FF 
034a8     0C E4 05 F1 | 	add	objptr, ##27148
034ac     F2 38 02 F1 | 	add	local10, objptr
034b0     14 3B 02 F6 | 	mov	local11, local02
034b4     1D 41 02 F6 | 	mov	local14, local11
034b8     03 40 66 F0 | 	shl	local14, #3
034bc     F2 3E 02 F6 | 	mov	local13, objptr
034c0     F2 40 02 F1 | 	add	local14, objptr
034c4     20 13 02 FB | 	rdlong	arg01, local14
034c8     01 3C 06 F6 | 	mov	local12, #1
034cc     01 14 06 F6 | 	mov	arg02, #1
034d0     35 00 00 FF 
034d4     0C E4 85 F1 | 	sub	objptr, ##27148
034d8     E4 60 B2 FD | 	call	#__system__Right_S
034dc     1C FB 61 FC | 	wrlong	result1, local10
034e0     14 2D 02 F6 | 	mov	local04, local02
034e4     16 2B 02 F6 | 	mov	local03, local04
034e8     15 39 02 F6 | 	mov	local10, local03
034ec     03 38 66 F0 | 	shl	local10, #3
034f0     35 00 00 FF 
034f4     0C E4 05 F1 | 	add	objptr, ##27148
034f8     F2 38 02 F1 | 	add	local10, objptr
034fc     04 38 06 F1 | 	add	local10, #4
03500     1C 59 68 FC | 	wrlong	#44, local10
03504     35 00 00 FF 
03508     0C E4 85 F1 | 	sub	objptr, ##27148
0350c     84 03 90 FD | 	jmp	#LR__0184
03510                 | LR__0175
03510     14 39 02 F6 | 	mov	local10, local02
03514     03 38 66 F0 | 	shl	local10, #3
03518     35 00 00 FF 
0351c     0C E4 05 F1 | 	add	objptr, ##27148
03520     F2 38 02 F1 | 	add	local10, objptr
03524     14 3B 02 F6 | 	mov	local11, local02
03528     1D 41 02 F6 | 	mov	local14, local11
0352c     03 40 66 F0 | 	shl	local14, #3
03530     F2 3E 02 F6 | 	mov	local13, objptr
03534     F2 40 02 F1 | 	add	local14, objptr
03538     20 13 02 FB | 	rdlong	arg01, local14
0353c     35 00 00 FF 
03540     0C E4 85 F1 | 	sub	objptr, ##27148
03544     6C 13 B0 FD | 	call	#_isconstant
03548     04 38 06 F1 | 	add	local10, #4
0354c     1C FB 61 FC | 	wrlong	result1, local10
03550                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03550     14 39 02 F6 | 	mov	local10, local02
03554     03 38 66 F0 | 	shl	local10, #3
03558     35 00 00 FF 
0355c     0C E4 05 F1 | 	add	objptr, ##27148
03560     F2 38 02 F1 | 	add	local10, objptr
03564     04 38 06 F1 | 	add	local10, #4
03568     1C 3D 02 FB | 	rdlong	local12, local10
0356c     01 3C 56 F2 | 	cmps	local12, #1 wc
03570     35 00 00 FF 
03574     0C E4 85 F1 | 	sub	objptr, ##27148
03578     94 00 90 CD |  if_b	jmp	#LR__0176
0357c     14 39 02 F6 | 	mov	local10, local02
03580     03 38 66 F0 | 	shl	local10, #3
03584     35 00 00 FF 
03588     0C E4 05 F1 | 	add	objptr, ##27148
0358c     F2 38 02 F1 | 	add	local10, objptr
03590     14 3D 02 F6 | 	mov	local12, local02
03594     1E 3B 02 F6 | 	mov	local11, local12
03598     1D 41 02 F6 | 	mov	local14, local11
0359c     03 40 66 F0 | 	shl	local14, #3
035a0     F2 3E 02 F6 | 	mov	local13, objptr
035a4     F2 40 02 F1 | 	add	local14, objptr
035a8     04 40 06 F1 | 	add	local14, #4
035ac     20 13 02 FB | 	rdlong	arg01, local14
035b0     04 40 86 F1 | 	sub	local14, #4
035b4     35 00 00 FF 
035b8     0C E4 85 F1 | 	sub	objptr, ##27148
035bc     09 13 52 F6 | 	abs	arg01, arg01 wc
035c0     1F 7C C6 C9 |  if_b	decod	local44, #31
035c4     00 7C 06 36 |  if_ae	mov	local44, #0
035c8     64 69 B2 FD | 	call	#__system___float_fromuns
035cc     3E FB 61 F5 | 	xor	result1, local44
035d0     FD 12 02 F6 | 	mov	arg01, result1
035d4     58 61 B2 FD | 	call	#__system__str_S
035d8     1C FB 61 FC | 	wrlong	result1, local10
035dc     14 2D 02 F6 | 	mov	local04, local02
035e0     16 2B 02 F6 | 	mov	local03, local04
035e4     15 39 02 F6 | 	mov	local10, local03
035e8     03 38 66 F0 | 	shl	local10, #3
035ec     35 00 00 FF 
035f0     0C E4 05 F1 | 	add	objptr, ##27148
035f4     F2 38 02 F1 | 	add	local10, objptr
035f8     04 38 06 F1 | 	add	local10, #4
035fc     01 00 80 FF 
03600     1C 03 68 FC | 	wrlong	##513, local10
03604     35 00 00 FF 
03608     0C E4 85 F1 | 	sub	objptr, ##27148
0360c     84 02 90 FD | 	jmp	#LR__0184
03610                 | LR__0176
03610     14 2F 02 F6 | 	mov	local05, local02
03614     03 2E 66 F0 | 	shl	local05, #3
03618     35 00 00 FF 
0361c     0C E4 05 F1 | 	add	objptr, ##27148
03620     F2 2E 02 F1 | 	add	local05, objptr
03624     17 13 02 FB | 	rdlong	arg01, local05
03628     35 00 00 FF 
0362c     0C E4 85 F1 | 	sub	objptr, ##27148
03630     E0 33 B0 FD | 	call	#_isnum
03634     FD 7E 02 F6 | 	mov	local45, result1
03638     14 2F 02 F6 | 	mov	local05, local02
0363c     03 2E 66 F0 | 	shl	local05, #3
03640     35 00 00 FF 
03644     0C E4 05 F1 | 	add	objptr, ##27148
03648     F2 2E 02 F1 | 	add	local05, objptr
0364c     17 13 02 FB | 	rdlong	arg01, local05
03650     35 00 00 FF 
03654     0C E4 85 F1 | 	sub	objptr, ##27148
03658     A4 37 B0 FD | 	call	#_isint
0365c     FD 80 02 F6 | 	mov	local46, result1
03660     14 2F 02 F6 | 	mov	local05, local02
03664     03 2E 66 F0 | 	shl	local05, #3
03668     35 00 00 FF 
0366c     0C E4 05 F1 | 	add	objptr, ##27148
03670     F2 2E 02 F1 | 	add	local05, objptr
03674     17 13 02 FB | 	rdlong	arg01, local05
03678     35 00 00 FF 
0367c     0C E4 85 F1 | 	sub	objptr, ##27148
03680     20 3A B0 FD | 	call	#_isdec
03684     FD 82 02 F6 | 	mov	local47, result1
03688                 | ' 
03688                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03688                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03688     00 7E 0E F2 | 	cmp	local45, #0 wz
0368c     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03690     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
03694     34 00 90 AD |  if_e	jmp	#LR__0177
03698     14 2D 02 F6 | 	mov	local04, local02
0369c     16 2B 02 F6 | 	mov	local03, local04
036a0     15 39 02 F6 | 	mov	local10, local03
036a4     03 38 66 F0 | 	shl	local10, #3
036a8     35 00 00 FF 
036ac     0C E4 05 F1 | 	add	objptr, ##27148
036b0     F2 38 02 F1 | 	add	local10, objptr
036b4     04 38 06 F1 | 	add	local10, #4
036b8     01 00 80 FF 
036bc     1C 01 68 FC | 	wrlong	##512, local10
036c0     35 00 00 FF 
036c4     0C E4 85 F1 | 	sub	objptr, ##27148
036c8     C8 01 90 FD | 	jmp	#LR__0184
036cc                 | LR__0177
036cc                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036cc     00 7E 0E F2 | 	cmp	local45, #0 wz
036d0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
036d4     41 2D 22 56 |  if_ne	not	local04, local47
036d8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
036dc     34 00 90 AD |  if_e	jmp	#LR__0178
036e0     14 2D 02 F6 | 	mov	local04, local02
036e4     16 2B 02 F6 | 	mov	local03, local04
036e8     15 39 02 F6 | 	mov	local10, local03
036ec     03 38 66 F0 | 	shl	local10, #3
036f0     35 00 00 FF 
036f4     0C E4 05 F1 | 	add	objptr, ##27148
036f8     F2 38 02 F1 | 	add	local10, objptr
036fc     04 38 06 F1 | 	add	local10, #4
03700     01 00 80 FF 
03704     1C 03 68 FC | 	wrlong	##513, local10
03708     35 00 00 FF 
0370c     0C E4 85 F1 | 	sub	objptr, ##27148
03710     80 01 90 FD | 	jmp	#LR__0184
03714                 | LR__0178
03714                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03714     00 7E 0E F2 | 	cmp	local45, #0 wz
03718     40 2D 22 56 |  if_ne	not	local04, local46
0371c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03720     41 2B 22 56 |  if_ne	not	local03, local47
03724     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03728     34 00 90 AD |  if_e	jmp	#LR__0179
0372c     14 2D 02 F6 | 	mov	local04, local02
03730     16 2B 02 F6 | 	mov	local03, local04
03734     15 39 02 F6 | 	mov	local10, local03
03738     03 38 66 F0 | 	shl	local10, #3
0373c     35 00 00 FF 
03740     0C E4 05 F1 | 	add	objptr, ##27148
03744     F2 38 02 F1 | 	add	local10, objptr
03748     04 38 06 F1 | 	add	local10, #4
0374c     01 00 80 FF 
03750     1C 05 68 FC | 	wrlong	##514, local10
03754     35 00 00 FF 
03758     0C E4 85 F1 | 	sub	objptr, ##27148
0375c     34 01 90 FD | 	jmp	#LR__0184
03760                 | LR__0179
03760                 | ' 
03760                 | ' if isstring(lparts(i).part$) then 
03760     14 2F 02 F6 | 	mov	local05, local02
03764     03 2E 66 F0 | 	shl	local05, #3
03768     35 00 00 FF 
0376c     0C E4 05 F1 | 	add	objptr, ##27148
03770     F2 2E 02 F1 | 	add	local05, objptr
03774     17 13 02 FB | 	rdlong	arg01, local05
03778     35 00 00 FF 
0377c     0C E4 85 F1 | 	sub	objptr, ##27148
03780     E0 39 B0 FD | 	call	#_isstring
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     A8 00 90 AD |  if_e	jmp	#LR__0182
0378c     14 39 02 F6 | 	mov	local10, local02
03790     03 38 66 F0 | 	shl	local10, #3
03794     35 00 00 FF 
03798     0C E4 05 F1 | 	add	objptr, ##27148
0379c     F2 38 02 F1 | 	add	local10, objptr
037a0     04 38 06 F1 | 	add	local10, #4
037a4     01 00 80 FF 
037a8     1C 07 68 FC | 	wrlong	##515, local10
037ac     14 2D 02 F6 | 	mov	local04, local02
037b0     16 2B 02 F6 | 	mov	local03, local04
037b4     15 39 02 F6 | 	mov	local10, local03
037b8     03 38 66 F0 | 	shl	local10, #3
037bc     F2 38 02 F1 | 	add	local10, objptr
037c0     14 41 02 F6 | 	mov	local14, local02
037c4     03 40 66 F0 | 	shl	local14, #3
037c8     F2 40 02 F1 | 	add	local14, objptr
037cc     20 31 02 FB | 	rdlong	local06, local14
037d0     02 3C 06 F6 | 	mov	local12, #2
037d4     14 51 02 F6 | 	mov	local22, local02
037d8     28 53 02 F6 | 	mov	local23, local22
037dc     03 52 66 F0 | 	shl	local23, #3
037e0     F2 54 02 F6 | 	mov	local24, objptr
037e4     F2 52 02 F1 | 	add	local23, objptr
037e8     29 13 02 FB | 	rdlong	arg01, local23
037ec     35 00 00 FF 
037f0     0C E4 85 F1 | 	sub	objptr, ##27148
037f4     09 33 02 F6 | 	mov	local07, arg01
037f8     97 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037fc                 | LR__0180
037fc     19 FB C9 FA | 	rdbyte	result1, local07 wz
03800     01 32 06 51 |  if_ne	add	local07, #1
03804     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
03808                 | LR__0181
03808     09 33 82 F1 | 	sub	local07, arg01
0380c     19 3F 02 F6 | 	mov	local13, local07
03810     1F 41 02 F6 | 	mov	local14, local13
03814     02 40 86 F1 | 	sub	local14, #2
03818     20 3B 02 F6 | 	mov	local11, local14
0381c     18 13 02 F6 | 	mov	arg01, local06
03820     1E 15 02 F6 | 	mov	arg02, local12
03824     1D 17 02 F6 | 	mov	arg03, local11
03828     24 5E B2 FD | 	call	#__system__Mid_S
0382c     1C FB 61 FC | 	wrlong	result1, local10
03830     60 00 90 FD | 	jmp	#LR__0184
03834                 | LR__0182
03834                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03834     14 2B 02 F6 | 	mov	local03, local02
03838     15 2F 02 F6 | 	mov	local05, local03
0383c     03 2E 66 F0 | 	shl	local05, #3
03840     35 00 00 FF 
03844     0C E4 05 F1 | 	add	objptr, ##27148
03848     F2 2E 02 F1 | 	add	local05, objptr
0384c     17 13 02 FB | 	rdlong	arg01, local05
03850     35 00 00 FF 
03854     0C E4 85 F1 | 	sub	objptr, ##27148
03858     44 2F B0 FD | 	call	#_isname
0385c     FD 2C 0A F6 | 	mov	local04, result1 wz
03860     30 00 90 AD |  if_e	jmp	#LR__0183
03864     14 2D 02 F6 | 	mov	local04, local02
03868     16 2B 02 F6 | 	mov	local03, local04
0386c     15 39 02 F6 | 	mov	local10, local03
03870     03 38 66 F0 | 	shl	local10, #3
03874     35 00 00 FF 
03878     0C E4 05 F1 | 	add	objptr, ##27148
0387c     F2 38 02 F1 | 	add	local10, objptr
03880     04 38 06 F1 | 	add	local10, #4
03884     01 00 80 FF 
03888     1C 09 68 FC | 	wrlong	##516, local10
0388c     35 00 00 FF 
03890     0C E4 85 F1 | 	sub	objptr, ##27148
03894                 | LR__0183
03894                 | LR__0184
03894     01 28 06 F1 | 	add	local02, #1
03898     54 F8 9F FD | 	jmp	#LR__0173
0389c                 | LR__0185
0389c     23 39 02 F6 | 	mov	local10, local17
038a0     03 38 66 F0 | 	shl	local10, #3
038a4     35 00 00 FF 
038a8     0C E4 05 F1 | 	add	objptr, ##27148
038ac     F2 38 02 F1 | 	add	local10, objptr
038b0     04 38 06 F1 | 	add	local10, #4
038b4     1C FD 6B FC | 	wrlong	#510, local10
038b8     23 39 02 F6 | 	mov	local10, local17
038bc     03 38 66 F0 | 	shl	local10, #3
038c0     F2 38 02 F1 | 	add	local10, objptr
038c4     B8 01 00 FF 
038c8     FF 30 06 F6 | 	mov	local06, ##@LR__5519
038cc     1C 31 62 FC | 	wrlong	local06, local10
038d0     10 00 00 FF 
038d4     54 E4 05 F1 | 	add	objptr, ##8276
038d8     F2 46 62 FC | 	wrlong	local17, objptr
038dc     45 00 00 FF 
038e0     60 E4 85 F1 | 	sub	objptr, ##35424
038e4                 | ' 
038e4                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038e4                 | ' 
038e4                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038e4                 | '  
038e4                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038e4     B8 01 00 FF 
038e8     00 15 06 F6 | 	mov	arg02, ##@LR__5520
038ec     3B 13 02 F6 | 	mov	arg01, local41
038f0     EC 3B B2 FD | 	call	#__system___string_cmp
038f4     00 FA 0D F2 | 	cmp	result1, #0 wz
038f8     F0 00 90 AD |  if_e	jmp	#LR__0186
038fc     B8 01 00 FF 
03900     05 15 06 F6 | 	mov	arg02, ##@LR__5521
03904     3B 13 02 F6 | 	mov	arg01, local41
03908     D4 3B B2 FD | 	call	#__system___string_cmp
0390c     00 FA 0D F2 | 	cmp	result1, #0 wz
03910     D8 00 90 AD |  if_e	jmp	#LR__0186
03914     B8 01 00 FF 
03918     0A 31 06 F6 | 	mov	local06, ##@LR__5522
0391c     3B 13 02 F6 | 	mov	arg01, local41
03920     18 15 02 F6 | 	mov	arg02, local06
03924     B8 3B B2 FD | 	call	#__system___string_cmp
03928     00 FA 0D F2 | 	cmp	result1, #0 wz
0392c     BC 00 90 AD |  if_e	jmp	#LR__0186
03930     B8 01 00 FF 
03934     0F 3D 06 F6 | 	mov	local12, ##@LR__5523
03938     1E 31 02 F6 | 	mov	local06, local12
0393c     3B 13 02 F6 | 	mov	arg01, local41
03940     18 15 02 F6 | 	mov	arg02, local06
03944     98 3B B2 FD | 	call	#__system___string_cmp
03948     00 FA 0D F2 | 	cmp	result1, #0 wz
0394c     9C 00 90 AD |  if_e	jmp	#LR__0186
03950     B8 01 00 FF 
03954     13 3B 06 F6 | 	mov	local11, ##@LR__5524
03958     1D 3D 02 F6 | 	mov	local12, local11
0395c     3B 13 02 F6 | 	mov	arg01, local41
03960     1E 15 02 F6 | 	mov	arg02, local12
03964     78 3B B2 FD | 	call	#__system___string_cmp
03968     FD 30 0A F6 | 	mov	local06, result1 wz
0396c     7C 00 90 AD |  if_e	jmp	#LR__0186
03970     B8 01 00 FF 
03974     17 41 06 F6 | 	mov	local14, ##@LR__5525
03978     20 3B 02 F6 | 	mov	local11, local14
0397c     3B 13 02 F6 | 	mov	arg01, local41
03980     1D 15 02 F6 | 	mov	arg02, local11
03984     58 3B B2 FD | 	call	#__system___string_cmp
03988     FD 3C 0A F6 | 	mov	local12, result1 wz
0398c     5C 00 90 AD |  if_e	jmp	#LR__0186
03990     B8 01 00 FF 
03994     1A 3F 06 F6 | 	mov	local13, ##@LR__5526
03998     1F 41 02 F6 | 	mov	local14, local13
0399c     3B 13 02 F6 | 	mov	arg01, local41
039a0     20 15 02 F6 | 	mov	arg02, local14
039a4     38 3B B2 FD | 	call	#__system___string_cmp
039a8     FD 3A 0A F6 | 	mov	local11, result1 wz
039ac     3C 00 90 AD |  if_e	jmp	#LR__0186
039b0     B8 01 00 FF 
039b4     1E 3F 06 F6 | 	mov	local13, ##@LR__5527
039b8     3B 13 02 F6 | 	mov	arg01, local41
039bc     1F 15 02 F6 | 	mov	arg02, local13
039c0     1C 3B B2 FD | 	call	#__system___string_cmp
039c4     FD 40 0A F6 | 	mov	local14, result1 wz
039c8     20 00 90 AD |  if_e	jmp	#LR__0186
039cc     B8 01 00 FF 
039d0     24 51 06 F6 | 	mov	local22, ##@LR__5528
039d4     28 5D 02 F6 | 	mov	local28, local22
039d8     3B 13 02 F6 | 	mov	arg01, local41
039dc     2E 15 02 F6 | 	mov	arg02, local28
039e0     FC 3A B2 FD | 	call	#__system___string_cmp
039e4     FD 3E 0A F6 | 	mov	local13, result1 wz
039e8     CC 00 90 5D |  if_ne	jmp	#LR__0187
039ec                 | LR__0186
039ec     37 5D 02 F6 | 	mov	local28, local37
039f0     01 5C 06 F1 | 	add	local28, #1
039f4     2E 51 02 F6 | 	mov	local22, local28
039f8     28 53 02 F6 | 	mov	local23, local22
039fc     03 52 66 F0 | 	shl	local23, #3
03a00     35 00 00 FF 
03a04     0C E4 05 F1 | 	add	objptr, ##27148
03a08     F2 54 02 F6 | 	mov	local24, objptr
03a0c     F2 52 02 F1 | 	add	local23, objptr
03a10     04 52 06 F1 | 	add	local23, #4
03a14     29 61 02 FB | 	rdlong	local30, local23
03a18     04 52 86 F1 | 	sub	local23, #4
03a1c     30 5F 02 F6 | 	mov	local29, local30
03a20     01 00 00 FF 
03a24     04 5E 0E F2 | 	cmp	local29, ##516 wz
03a28     35 00 00 FF 
03a2c     0C E4 85 F1 | 	sub	objptr, ##27148
03a30     84 00 90 5D |  if_ne	jmp	#LR__0187
03a34     37 85 02 F6 | 	mov	local48, local37
03a38     01 84 06 F1 | 	add	local48, #1
03a3c     03 84 66 F0 | 	shl	local48, #3
03a40     35 00 00 FF 
03a44     0C E4 05 F1 | 	add	objptr, ##27148
03a48     F2 86 02 F6 | 	mov	local49, objptr
03a4c     F2 84 02 F1 | 	add	local48, objptr
03a50     42 13 02 FB | 	rdlong	arg01, local48
03a54     01 14 06 F6 | 	mov	arg02, #1
03a58     35 00 00 FF 
03a5c     0C E4 85 F1 | 	sub	objptr, ##27148
03a60     5C 5B B2 FD | 	call	#__system__Right_S
03a64     FD 12 02 F6 | 	mov	arg01, result1
03a68     B8 01 00 FF 
03a6c     27 89 06 F6 | 	mov	local50, ##@LR__5529
03a70     44 8B 02 F6 | 	mov	local51, local50
03a74     45 15 02 F6 | 	mov	arg02, local51
03a78     64 3A B2 FD | 	call	#__system___string_cmp
03a7c     FD 62 0A F6 | 	mov	local31, result1 wz
03a80     34 00 90 AD |  if_e	jmp	#LR__0187
03a84     37 39 02 F6 | 	mov	local10, local37
03a88     01 38 06 F1 | 	add	local10, #1
03a8c     03 38 66 F0 | 	shl	local10, #3
03a90     35 00 00 FF 
03a94     0C E4 05 F1 | 	add	objptr, ##27148
03a98     F2 38 02 F1 | 	add	local10, objptr
03a9c     01 00 00 FF 
03aa0     03 30 06 F6 | 	mov	local06, ##515
03aa4     04 38 06 F1 | 	add	local10, #4
03aa8     01 00 80 FF 
03aac     1C 07 68 FC | 	wrlong	##515, local10
03ab0     35 00 00 FF 
03ab4     0C E4 85 F1 | 	sub	objptr, ##27148
03ab8                 | LR__0187
03ab8                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03ab8     B8 01 00 FF 
03abc     29 15 06 F6 | 	mov	arg02, ##@LR__5530
03ac0     3B 13 02 F6 | 	mov	arg01, local41
03ac4     18 3A B2 FD | 	call	#__system___string_cmp
03ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
03acc     1C 00 90 AD |  if_e	jmp	#LR__0188
03ad0     B8 01 00 FF 
03ad4     30 2F 06 F6 | 	mov	local05, ##@LR__5531
03ad8     3B 13 02 F6 | 	mov	arg01, local41
03adc     17 15 02 F6 | 	mov	arg02, local05
03ae0     FC 39 B2 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     CC 00 90 5D |  if_ne	jmp	#LR__0189
03aec                 | LR__0188
03aec     37 2F 02 F6 | 	mov	local05, local37
03af0     01 2E 06 F1 | 	add	local05, #1
03af4     17 31 02 F6 | 	mov	local06, local05
03af8     03 30 66 F0 | 	shl	local06, #3
03afc     35 00 00 FF 
03b00     0C E4 05 F1 | 	add	objptr, ##27148
03b04     F2 3C 02 F6 | 	mov	local12, objptr
03b08     F2 30 02 F1 | 	add	local06, objptr
03b0c     04 30 06 F1 | 	add	local06, #4
03b10     18 41 02 FB | 	rdlong	local14, local06
03b14     04 30 86 F1 | 	sub	local06, #4
03b18     20 3B 02 F6 | 	mov	local11, local14
03b1c     01 00 00 FF 
03b20     04 3A 0E F2 | 	cmp	local11, ##516 wz
03b24     35 00 00 FF 
03b28     0C E4 85 F1 | 	sub	objptr, ##27148
03b2c     88 00 90 5D |  if_ne	jmp	#LR__0189
03b30     37 53 02 F6 | 	mov	local23, local37
03b34     01 52 06 F1 | 	add	local23, #1
03b38     03 52 66 F0 | 	shl	local23, #3
03b3c     35 00 00 FF 
03b40     0C E4 05 F1 | 	add	objptr, ##27148
03b44     F2 54 02 F6 | 	mov	local24, objptr
03b48     F2 52 02 F1 | 	add	local23, objptr
03b4c     29 13 02 FB | 	rdlong	arg01, local23
03b50     01 14 06 F6 | 	mov	arg02, #1
03b54     35 00 00 FF 
03b58     0C E4 85 F1 | 	sub	objptr, ##27148
03b5c     60 5A B2 FD | 	call	#__system__Right_S
03b60     FD 12 02 F6 | 	mov	arg01, result1
03b64     B8 01 00 FF 
03b68     36 51 06 F6 | 	mov	local22, ##@LR__5532
03b6c     28 5D 02 F6 | 	mov	local28, local22
03b70     2E 15 02 F6 | 	mov	arg02, local28
03b74     68 39 B2 FD | 	call	#__system___string_cmp
03b78     FD 3E 0A F6 | 	mov	local13, result1 wz
03b7c     38 00 90 AD |  if_e	jmp	#LR__0189
03b80     37 39 02 F6 | 	mov	local10, local37
03b84     01 38 06 F1 | 	add	local10, #1
03b88     03 38 66 F0 | 	shl	local10, #3
03b8c     35 00 00 FF 
03b90     0C E4 05 F1 | 	add	objptr, ##27148
03b94     F2 2E 02 F6 | 	mov	local05, objptr
03b98     F2 38 02 F1 | 	add	local10, objptr
03b9c     01 00 00 FF 
03ba0     03 30 06 F6 | 	mov	local06, ##515
03ba4     04 38 06 F1 | 	add	local10, #4
03ba8     01 00 80 FF 
03bac     1C 07 68 FC | 	wrlong	##515, local10
03bb0     35 00 00 FF 
03bb4     0C E4 85 F1 | 	sub	objptr, ##27148
03bb8                 | LR__0189
03bb8                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03bb8     B8 01 00 FF 
03bbc     38 15 06 F6 | 	mov	arg02, ##@LR__5533
03bc0     3B 13 02 F6 | 	mov	arg01, local41
03bc4     18 39 B2 FD | 	call	#__system___string_cmp
03bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
03bcc     C8 00 90 5D |  if_ne	jmp	#LR__0190
03bd0     37 2F 02 F6 | 	mov	local05, local37
03bd4     01 2E 06 F1 | 	add	local05, #1
03bd8     03 2E 66 F0 | 	shl	local05, #3
03bdc     35 00 00 FF 
03be0     0C E4 05 F1 | 	add	objptr, ##27148
03be4     F2 30 02 F6 | 	mov	local06, objptr
03be8     F2 2E 02 F1 | 	add	local05, objptr
03bec     04 2E 06 F1 | 	add	local05, #4
03bf0     17 3B 02 FB | 	rdlong	local11, local05
03bf4     04 2E 86 F1 | 	sub	local05, #4
03bf8     1D 3D 02 F6 | 	mov	local12, local11
03bfc     01 00 00 FF 
03c00     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c04     35 00 00 FF 
03c08     0C E4 85 F1 | 	sub	objptr, ##27148
03c0c     88 00 90 5D |  if_ne	jmp	#LR__0190
03c10     37 51 02 F6 | 	mov	local22, local37
03c14     01 50 06 F1 | 	add	local22, #1
03c18     03 50 66 F0 | 	shl	local22, #3
03c1c     35 00 00 FF 
03c20     0C E4 05 F1 | 	add	objptr, ##27148
03c24     F2 52 02 F6 | 	mov	local23, objptr
03c28     F2 50 02 F1 | 	add	local22, objptr
03c2c     28 13 02 FB | 	rdlong	arg01, local22
03c30     01 14 06 F6 | 	mov	arg02, #1
03c34     35 00 00 FF 
03c38     0C E4 85 F1 | 	sub	objptr, ##27148
03c3c     80 59 B2 FD | 	call	#__system__Right_S
03c40     FD 12 02 F6 | 	mov	arg01, result1
03c44     B8 01 00 FF 
03c48     3D 5D 06 F6 | 	mov	local28, ##@LR__5534
03c4c     2E 3F 02 F6 | 	mov	local13, local28
03c50     1F 15 02 F6 | 	mov	arg02, local13
03c54     88 38 B2 FD | 	call	#__system___string_cmp
03c58     FD 40 0A F6 | 	mov	local14, result1 wz
03c5c     38 00 90 AD |  if_e	jmp	#LR__0190
03c60     37 39 02 F6 | 	mov	local10, local37
03c64     01 38 06 F1 | 	add	local10, #1
03c68     03 38 66 F0 | 	shl	local10, #3
03c6c     35 00 00 FF 
03c70     0C E4 05 F1 | 	add	objptr, ##27148
03c74     F2 2E 02 F6 | 	mov	local05, objptr
03c78     F2 38 02 F1 | 	add	local10, objptr
03c7c     01 00 00 FF 
03c80     03 30 06 F6 | 	mov	local06, ##515
03c84     04 38 06 F1 | 	add	local10, #4
03c88     01 00 80 FF 
03c8c     1C 07 68 FC | 	wrlong	##515, local10
03c90     35 00 00 FF 
03c94     0C E4 85 F1 | 	sub	objptr, ##27148
03c98                 | LR__0190
03c98                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c98     B8 01 00 FF 
03c9c     3F 15 06 F6 | 	mov	arg02, ##@LR__5535
03ca0     3B 13 02 F6 | 	mov	arg01, local41
03ca4     38 38 B2 FD | 	call	#__system___string_cmp
03ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
03cac     C8 00 90 5D |  if_ne	jmp	#LR__0191
03cb0     37 2F 02 F6 | 	mov	local05, local37
03cb4     03 2E 06 F1 | 	add	local05, #3
03cb8     03 2E 66 F0 | 	shl	local05, #3
03cbc     35 00 00 FF 
03cc0     0C E4 05 F1 | 	add	objptr, ##27148
03cc4     F2 30 02 F6 | 	mov	local06, objptr
03cc8     F2 2E 02 F1 | 	add	local05, objptr
03ccc     04 2E 06 F1 | 	add	local05, #4
03cd0     17 3B 02 FB | 	rdlong	local11, local05
03cd4     04 2E 86 F1 | 	sub	local05, #4
03cd8     1D 3D 02 F6 | 	mov	local12, local11
03cdc     01 00 00 FF 
03ce0     04 3C 0E F2 | 	cmp	local12, ##516 wz
03ce4     35 00 00 FF 
03ce8     0C E4 85 F1 | 	sub	objptr, ##27148
03cec     88 00 90 5D |  if_ne	jmp	#LR__0191
03cf0     37 51 02 F6 | 	mov	local22, local37
03cf4     03 50 06 F1 | 	add	local22, #3
03cf8     03 50 66 F0 | 	shl	local22, #3
03cfc     35 00 00 FF 
03d00     0C E4 05 F1 | 	add	objptr, ##27148
03d04     F2 52 02 F6 | 	mov	local23, objptr
03d08     F2 50 02 F1 | 	add	local22, objptr
03d0c     28 13 02 FB | 	rdlong	arg01, local22
03d10     01 14 06 F6 | 	mov	arg02, #1
03d14     35 00 00 FF 
03d18     0C E4 85 F1 | 	sub	objptr, ##27148
03d1c     A0 58 B2 FD | 	call	#__system__Right_S
03d20     FD 12 02 F6 | 	mov	arg01, result1
03d24     B8 01 00 FF 
03d28     44 5D 06 F6 | 	mov	local28, ##@LR__5536
03d2c     2E 3F 02 F6 | 	mov	local13, local28
03d30     1F 15 02 F6 | 	mov	arg02, local13
03d34     A8 37 B2 FD | 	call	#__system___string_cmp
03d38     FD 40 0A F6 | 	mov	local14, result1 wz
03d3c     38 00 90 AD |  if_e	jmp	#LR__0191
03d40     37 39 02 F6 | 	mov	local10, local37
03d44     03 38 06 F1 | 	add	local10, #3
03d48     03 38 66 F0 | 	shl	local10, #3
03d4c     35 00 00 FF 
03d50     0C E4 05 F1 | 	add	objptr, ##27148
03d54     F2 2E 02 F6 | 	mov	local05, objptr
03d58     F2 38 02 F1 | 	add	local10, objptr
03d5c     01 00 00 FF 
03d60     03 30 06 F6 | 	mov	local06, ##515
03d64     04 38 06 F1 | 	add	local10, #4
03d68     01 00 80 FF 
03d6c     1C 07 68 FC | 	wrlong	##515, local10
03d70     35 00 00 FF 
03d74     0C E4 85 F1 | 	sub	objptr, ##27148
03d78                 | LR__0191
03d78                 | ' 
03d78                 | ' ' cd needs special treatment..
03d78                 | ' 
03d78                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03d78     B8 01 00 FF 
03d7c     46 15 06 F6 | 	mov	arg02, ##@LR__5537
03d80     3B 13 02 F6 | 	mov	arg01, local41
03d84     58 37 B2 FD | 	call	#__system___string_cmp
03d88     00 FA 0D F2 | 	cmp	result1, #0 wz
03d8c     38 00 90 5D |  if_ne	jmp	#LR__0192
03d90     37 39 02 F6 | 	mov	local10, local37
03d94     01 38 06 F1 | 	add	local10, #1
03d98     03 38 66 F0 | 	shl	local10, #3
03d9c     35 00 00 FF 
03da0     0C E4 05 F1 | 	add	objptr, ##27148
03da4     F2 2E 02 F6 | 	mov	local05, objptr
03da8     F2 38 02 F1 | 	add	local10, objptr
03dac     01 00 00 FF 
03db0     03 30 06 F6 | 	mov	local06, ##515
03db4     04 38 06 F1 | 	add	local10, #4
03db8     01 00 80 FF 
03dbc     1C 07 68 FC | 	wrlong	##515, local10
03dc0     35 00 00 FF 
03dc4     0C E4 85 F1 | 	sub	objptr, ##27148
03dc8                 | LR__0192
03dc8                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03dc8     B8 01 00 FF 
03dcc     49 15 06 F6 | 	mov	arg02, ##@LR__5538
03dd0     3B 13 02 F6 | 	mov	arg01, local41
03dd4     08 37 B2 FD | 	call	#__system___string_cmp
03dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
03ddc     A4 00 90 5D |  if_ne	jmp	#LR__0193
03de0     37 31 02 F6 | 	mov	local06, local37
03de4     01 30 06 F1 | 	add	local06, #1
03de8     03 30 66 F0 | 	shl	local06, #3
03dec     35 00 00 FF 
03df0     0C E4 05 F1 | 	add	objptr, ##27148
03df4     F2 3C 02 F6 | 	mov	local12, objptr
03df8     F2 30 02 F1 | 	add	local06, objptr
03dfc     18 13 02 FB | 	rdlong	arg01, local06
03e00     B8 01 00 FF 
03e04     4D 2F 06 F6 | 	mov	local05, ##@LR__5539
03e08     17 15 02 F6 | 	mov	arg02, local05
03e0c     35 00 00 FF 
03e10     0C E4 85 F1 | 	sub	objptr, ##27148
03e14     C8 36 B2 FD | 	call	#__system___string_cmp
03e18     00 FA 0D F2 | 	cmp	result1, #0 wz
03e1c     64 00 90 5D |  if_ne	jmp	#LR__0193
03e20     37 39 02 F6 | 	mov	local10, local37
03e24     01 38 06 F1 | 	add	local10, #1
03e28     03 38 66 F0 | 	shl	local10, #3
03e2c     35 00 00 FF 
03e30     0C E4 05 F1 | 	add	objptr, ##27148
03e34     F2 38 02 F1 | 	add	local10, objptr
03e38     04 38 06 F1 | 	add	local10, #4
03e3c     01 00 80 FF 
03e40     1C 07 68 FC | 	wrlong	##515, local10
03e44     37 39 02 F6 | 	mov	local10, local37
03e48     01 38 06 F1 | 	add	local10, #1
03e4c     03 38 66 F0 | 	shl	local10, #3
03e50     F2 38 02 F1 | 	add	local10, objptr
03e54     B8 01 00 FF 
03e58     4F 31 06 F6 | 	mov	local06, ##@LR__5540
03e5c     1C 31 62 FC | 	wrlong	local06, local10
03e60     37 39 02 F6 | 	mov	local10, local37
03e64     03 38 66 F0 | 	shl	local10, #3
03e68     F2 2E 02 F6 | 	mov	local05, objptr
03e6c     F2 38 02 F1 | 	add	local10, objptr
03e70     C3 30 06 F6 | 	mov	local06, #195
03e74     04 38 06 F1 | 	add	local10, #4
03e78     1C 87 69 FC | 	wrlong	#195, local10
03e7c     35 00 00 FF 
03e80     0C E4 85 F1 | 	sub	objptr, ##27148
03e84                 | LR__0193
03e84                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03e84     B8 01 00 FF 
03e88     52 39 06 F6 | 	mov	local10, ##@LR__5541
03e8c     3B 13 02 F6 | 	mov	arg01, local41
03e90     1C 15 02 F6 | 	mov	arg02, local10
03e94     48 36 B2 FD | 	call	#__system___string_cmp
03e98     00 FA 0D F2 | 	cmp	result1, #0 wz
03e9c     04 01 90 5D |  if_ne	jmp	#LR__0196
03ea0     37 31 02 F6 | 	mov	local06, local37
03ea4     01 30 06 F1 | 	add	local06, #1
03ea8     03 30 66 F0 | 	shl	local06, #3
03eac     35 00 00 FF 
03eb0     0C E4 05 F1 | 	add	objptr, ##27148
03eb4     F2 3C 02 F6 | 	mov	local12, objptr
03eb8     F2 30 02 F1 | 	add	local06, objptr
03ebc     18 13 02 FB | 	rdlong	arg01, local06
03ec0     B8 01 00 FF 
03ec4     55 2F 06 F6 | 	mov	local05, ##@LR__5542
03ec8     17 39 02 F6 | 	mov	local10, local05
03ecc     1C 15 02 F6 | 	mov	arg02, local10
03ed0     35 00 00 FF 
03ed4     0C E4 85 F1 | 	sub	objptr, ##27148
03ed8     04 36 B2 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     C0 00 90 5D |  if_ne	jmp	#LR__0196
03ee4     37 39 02 F6 | 	mov	local10, local37
03ee8     01 38 06 F1 | 	add	local10, #1
03eec     03 38 66 F0 | 	shl	local10, #3
03ef0     35 00 00 FF 
03ef4     0C E4 05 F1 | 	add	objptr, ##27148
03ef8     F2 2E 02 F6 | 	mov	local05, objptr
03efc     F2 38 02 F1 | 	add	local10, objptr
03f00     01 00 00 FF 
03f04     03 30 06 F6 | 	mov	local06, ##515
03f08     04 38 06 F1 | 	add	local10, #4
03f0c     01 00 80 FF 
03f10     1C 07 68 FC | 	wrlong	##515, local10
03f14     04 38 86 F1 | 	sub	local10, #4
03f18     37 29 02 F6 | 	mov	local02, local37
03f1c     02 28 06 F1 | 	add	local02, #2
03f20     23 8D 02 F6 | 	mov	local52, local17
03f24     01 8C 06 F1 | 	add	local52, #1
03f28     35 00 00 FF 
03f2c     0C E4 85 F1 | 	sub	objptr, ##27148
03f30                 | LR__0194
03f30     46 29 52 F2 | 	cmps	local02, local52 wc
03f34     6C 00 90 3D |  if_ae	jmp	#LR__0195
03f38     14 39 02 F6 | 	mov	local10, local02
03f3c     03 38 66 F0 | 	shl	local10, #3
03f40     35 00 00 FF 
03f44     0C E4 05 F1 | 	add	objptr, ##27148
03f48     F2 38 02 F1 | 	add	local10, objptr
03f4c     1C 8F 02 FB | 	rdlong	local53, local10
03f50     37 39 02 F6 | 	mov	local10, local37
03f54     01 38 06 F1 | 	add	local10, #1
03f58     03 38 66 F0 | 	shl	local10, #3
03f5c     F2 2E 02 F6 | 	mov	local05, objptr
03f60     F2 38 02 F1 | 	add	local10, objptr
03f64     37 3B 02 F6 | 	mov	local11, local37
03f68     01 3A 06 F1 | 	add	local11, #1
03f6c     1D 41 02 F6 | 	mov	local14, local11
03f70     03 40 66 F0 | 	shl	local14, #3
03f74     F2 3E 02 F6 | 	mov	local13, objptr
03f78     F2 40 02 F1 | 	add	local14, objptr
03f7c     20 13 02 FB | 	rdlong	arg01, local14
03f80     47 3D 02 F6 | 	mov	local12, local53
03f84     1E 15 02 F6 | 	mov	arg02, local12
03f88     35 00 00 FF 
03f8c     0C E4 85 F1 | 	sub	objptr, ##27148
03f90     80 35 B2 FD | 	call	#__system___string_concat
03f94     FD 30 02 F6 | 	mov	local06, result1
03f98     1C 31 62 FC | 	wrlong	local06, local10
03f9c     01 28 06 F1 | 	add	local02, #1
03fa0     8C FF 9F FD | 	jmp	#LR__0194
03fa4                 | LR__0195
03fa4                 | LR__0196
03fa4                 | ' 
03fa4                 | ' ' determine a type of the line and compile it
03fa4                 | ' 
03fa4                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03fa4     35 00 00 FF 
03fa8     0C E4 05 F1 | 	add	objptr, ##27148
03fac     F2 12 02 FB | 	rdlong	arg01, objptr
03fb0     35 00 00 FF 
03fb4     0C E4 85 F1 | 	sub	objptr, ##27148
03fb8     E8 30 B0 FD | 	call	#_isdec
03fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc0     30 00 90 AD |  if_e	jmp	#LR__0197
03fc4     35 00 00 FF 
03fc8     0C E4 05 F1 | 	add	objptr, ##27148
03fcc     F2 12 02 FB | 	rdlong	arg01, objptr
03fd0     35 00 00 FF 
03fd4     0C E4 85 F1 | 	sub	objptr, ##27148
03fd8     00 14 06 F6 | 	mov	arg02, #0
03fdc     CC 69 B2 FD | 	call	#__system____builtin_atoi
03fe0     52 00 00 FF 
03fe4     E8 E4 05 F1 | 	add	objptr, ##42216
03fe8     F2 FA 61 FC | 	wrlong	result1, objptr
03fec     52 00 00 FF 
03ff0     E8 E4 85 F1 | 	sub	objptr, ##42216
03ff4                 | LR__0197
03ff4                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03ff4     52 00 00 FF 
03ff8     E8 E4 05 F1 | 	add	objptr, ##42216
03ffc     F2 2C 02 FB | 	rdlong	local04, objptr
04000     52 00 00 FF 
04004     E8 E4 85 F1 | 	sub	objptr, ##42216
04008     01 2C 16 F2 | 	cmp	local04, #1 wc
0400c     40 00 90 CD |  if_b	jmp	#LR__0198
04010     01 46 0E F2 | 	cmp	local17, #1 wz
04014     37 00 00 AF 
04018     24 E4 05 A1 |  if_e	add	objptr, ##28196
0401c     F2 2E 02 AB |  if_e	rdlong	local05, objptr
04020     37 00 00 AF 
04024     24 E4 85 A1 |  if_e	sub	objptr, ##28196
04028     17 39 02 A6 |  if_e	mov	local10, local05
0402c     03 38 0E A2 |  if_e	cmp	local10, #3 wz
04030     1C 00 90 5D |  if_ne	jmp	#LR__0198
04034     52 00 00 FF 
04038     E8 E4 05 F1 | 	add	objptr, ##42216
0403c     F2 12 02 FB | 	rdlong	arg01, objptr
04040     52 00 00 FF 
04044     E8 E4 85 F1 | 	sub	objptr, ##42216
04048     04 32 B0 FD | 	call	#_deleteline
0404c     C8 03 90 FD | 	jmp	#LR__0209
04050                 | LR__0198
04050                 | ' 
04050                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
04050     37 00 00 FF 
04054     24 E4 05 F1 | 	add	objptr, ##28196
04058     F2 2C 0A FB | 	rdlong	local04, objptr wz
0405c     37 00 00 FF 
04060     24 E4 85 F1 | 	sub	objptr, ##28196
04064     20 00 90 AD |  if_e	jmp	#LR__0199
04068     37 00 00 FF 
0406c     24 E4 05 F1 | 	add	objptr, ##28196
04070     F2 2E 02 FB | 	rdlong	local05, objptr
04074     37 00 00 FF 
04078     24 E4 85 F1 | 	sub	objptr, ##28196
0407c     17 39 02 F6 | 	mov	local10, local05
04080     03 38 0E F2 | 	cmp	local10, #3 wz
04084     C0 00 90 5D |  if_ne	jmp	#LR__0201
04088                 | LR__0199
04088     35 00 00 FF 
0408c     20 E4 05 F1 | 	add	objptr, ##27168
04090     F2 3C 02 FB | 	rdlong	local12, objptr
04094     35 00 00 FF 
04098     20 E4 85 F1 | 	sub	objptr, ##27168
0409c     1B 3C 0E F2 | 	cmp	local12, #27 wz
040a0     A4 00 90 AD |  if_e	jmp	#LR__0201
040a4     52 00 00 FF 
040a8     E8 E4 05 F1 | 	add	objptr, ##42216
040ac     F2 12 02 FB | 	rdlong	arg01, objptr
040b0     1B 00 00 FF 
040b4     C4 E4 85 F1 | 	sub	objptr, ##14020
040b8     F2 16 02 FB | 	rdlong	arg03, objptr
040bc     37 00 00 FF 
040c0     24 E4 85 F1 | 	sub	objptr, ##28196
040c4     00 14 06 F6 | 	mov	arg02, #0
040c8     00 46 B0 FD | 	call	#_compile
040cc     FD 26 0A F6 | 	mov	local01, result1 wz
040d0                 | '   err=compile(linenum,0,cont) 
040d0                 | '   if err<>0 then printerror(err,linenum): goto 101
040d0     20 00 90 AD |  if_e	jmp	#LR__0200
040d4     52 00 00 FF 
040d8     E8 E4 05 F1 | 	add	objptr, ##42216
040dc     F2 14 02 FB | 	rdlong	arg02, objptr
040e0     52 00 00 FF 
040e4     E8 E4 85 F1 | 	sub	objptr, ##42216
040e8     13 13 02 F6 | 	mov	arg01, local01
040ec     B0 F9 B1 FD | 	call	#_printerror
040f0     44 03 90 FD | 	jmp	#LR__0210
040f4                 | LR__0200
040f4                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
040f4     52 00 00 FF 
040f8     30 E5 05 F1 | 	add	objptr, ##42288
040fc     F2 12 02 FB | 	rdlong	arg01, objptr
04100     52 00 00 FF 
04104     30 E5 85 F1 | 	sub	objptr, ##42288
04108     B8 01 00 FF 
0410c     57 15 06 F6 | 	mov	arg02, ##@LR__5543
04110     CC 33 B2 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     FC 02 90 AD |  if_e	jmp	#LR__0209
0411c     52 00 00 FF 
04120     30 E5 05 F1 | 	add	objptr, ##42288
04124     F2 2C 02 FB | 	rdlong	local04, objptr
04128     1B 00 00 FF 
0412c     14 E5 85 F1 | 	sub	objptr, ##14100
04130     F2 2C 62 FC | 	wrlong	local04, objptr
04134     08 E4 05 F1 | 	add	objptr, #8
04138     F2 08 68 FC | 	wrlong	#4, objptr
0413c     37 00 00 FF 
04140     24 E4 85 F1 | 	sub	objptr, ##28196
04144     B0 D7 9F FD | 	jmp	#LR__0070
04148                 | LR__0201
04148                 | '       							
04148                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
04148     37 00 00 FF 
0414c     24 E4 05 F1 | 	add	objptr, ##28196
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     37 00 00 FF 
04158     24 E4 85 F1 | 	sub	objptr, ##28196
0415c     01 2C 0E F2 | 	cmp	local04, #1 wz
04160     37 00 00 5F 
04164     24 E4 05 51 |  if_ne	add	objptr, ##28196
04168     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0416c     37 00 00 5F 
04170     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04174     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04178     C0 00 90 5D |  if_ne	jmp	#LR__0203
0417c     35 00 00 FF 
04180     18 E4 05 F1 | 	add	objptr, ##27160
04184     F2 3C 02 FB | 	rdlong	local12, objptr
04188     35 00 00 FF 
0418c     18 E4 85 F1 | 	sub	objptr, ##27160
04190     1B 3C 0E F2 | 	cmp	local12, #27 wz
04194     A4 00 90 AD |  if_e	jmp	#LR__0203
04198     52 00 00 FF 
0419c     E8 E4 05 F1 | 	add	objptr, ##42216
041a0     F2 12 02 FB | 	rdlong	arg01, objptr
041a4     1B 00 00 FF 
041a8     C4 E4 85 F1 | 	sub	objptr, ##14020
041ac     F2 16 02 FB | 	rdlong	arg03, objptr
041b0     37 00 00 FF 
041b4     24 E4 85 F1 | 	sub	objptr, ##28196
041b8     00 14 06 F6 | 	mov	arg02, #0
041bc     0C 45 B0 FD | 	call	#_compile
041c0     FD 26 0A F6 | 	mov	local01, result1 wz
041c4                 | '   err=compile(linenum,0,cont) 
041c4                 | '   if err<>0 then printerror(err,linenum): goto 101
041c4     20 00 90 AD |  if_e	jmp	#LR__0202
041c8     52 00 00 FF 
041cc     E8 E4 05 F1 | 	add	objptr, ##42216
041d0     F2 14 02 FB | 	rdlong	arg02, objptr
041d4     52 00 00 FF 
041d8     E8 E4 85 F1 | 	sub	objptr, ##42216
041dc     13 13 02 F6 | 	mov	arg01, local01
041e0     BC F8 B1 FD | 	call	#_printerror
041e4     50 02 90 FD | 	jmp	#LR__0210
041e8                 | LR__0202
041e8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
041e8     52 00 00 FF 
041ec     30 E5 05 F1 | 	add	objptr, ##42288
041f0     F2 12 02 FB | 	rdlong	arg01, objptr
041f4     52 00 00 FF 
041f8     30 E5 85 F1 | 	sub	objptr, ##42288
041fc     B8 01 00 FF 
04200     58 15 06 F6 | 	mov	arg02, ##@LR__5544
04204     D8 32 B2 FD | 	call	#__system___string_cmp
04208     00 FA 0D F2 | 	cmp	result1, #0 wz
0420c     08 02 90 AD |  if_e	jmp	#LR__0209
04210     52 00 00 FF 
04214     30 E5 05 F1 | 	add	objptr, ##42288
04218     F2 2C 02 FB | 	rdlong	local04, objptr
0421c     1B 00 00 FF 
04220     14 E5 85 F1 | 	sub	objptr, ##14100
04224     F2 2C 62 FC | 	wrlong	local04, objptr
04228     08 E4 05 F1 | 	add	objptr, #8
0422c     F2 08 68 FC | 	wrlong	#4, objptr
04230     37 00 00 FF 
04234     24 E4 85 F1 | 	sub	objptr, ##28196
04238     BC D6 9F FD | 	jmp	#LR__0070
0423c                 | LR__0203
0423c                 | ' 							 
0423c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
0423c     37 00 00 FF 
04240     24 E4 05 F1 | 	add	objptr, ##28196
04244     F2 2C 0A FB | 	rdlong	local04, objptr wz
04248     37 00 00 FF 
0424c     24 E4 85 F1 | 	sub	objptr, ##28196
04250     37 00 00 5F 
04254     24 E4 05 51 |  if_ne	add	objptr, ##28196
04258     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0425c     37 00 00 5F 
04260     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04264     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
04268     35 00 00 AF 
0426c     20 E4 05 A1 |  if_e	add	objptr, ##27168
04270     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04274     35 00 00 AF 
04278     20 E4 85 A1 |  if_e	sub	objptr, ##27168
0427c     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04280     A4 00 90 5D |  if_ne	jmp	#LR__0205
04284     52 00 00 FF 
04288     E8 E4 05 F1 | 	add	objptr, ##42216
0428c     F2 12 02 FB | 	rdlong	arg01, objptr
04290     1B 00 00 FF 
04294     C4 E4 85 F1 | 	sub	objptr, ##14020
04298     F2 16 02 FB | 	rdlong	arg03, objptr
0429c     37 00 00 FF 
042a0     24 E4 85 F1 | 	sub	objptr, ##28196
042a4     00 14 06 F6 | 	mov	arg02, #0
042a8     E8 44 B0 FD | 	call	#_compile_assign
042ac     FD 26 0A F6 | 	mov	local01, result1 wz
042b0                 | '   err=compile_assign(linenum,0,cont)
042b0                 | '   if err<>0 then printerror(err,linenum): goto 101
042b0     20 00 90 AD |  if_e	jmp	#LR__0204
042b4     52 00 00 FF 
042b8     E8 E4 05 F1 | 	add	objptr, ##42216
042bc     F2 14 02 FB | 	rdlong	arg02, objptr
042c0     52 00 00 FF 
042c4     E8 E4 85 F1 | 	sub	objptr, ##42216
042c8     13 13 02 F6 | 	mov	arg01, local01
042cc     D0 F7 B1 FD | 	call	#_printerror
042d0     64 01 90 FD | 	jmp	#LR__0210
042d4                 | LR__0204
042d4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
042d4     52 00 00 FF 
042d8     30 E5 05 F1 | 	add	objptr, ##42288
042dc     F2 12 02 FB | 	rdlong	arg01, objptr
042e0     52 00 00 FF 
042e4     30 E5 85 F1 | 	sub	objptr, ##42288
042e8     B8 01 00 FF 
042ec     59 15 06 F6 | 	mov	arg02, ##@LR__5545
042f0     EC 31 B2 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     1C 01 90 AD |  if_e	jmp	#LR__0209
042fc     52 00 00 FF 
04300     30 E5 05 F1 | 	add	objptr, ##42288
04304     F2 2C 02 FB | 	rdlong	local04, objptr
04308     1B 00 00 FF 
0430c     14 E5 85 F1 | 	sub	objptr, ##14100
04310     F2 2C 62 FC | 	wrlong	local04, objptr
04314     08 E4 05 F1 | 	add	objptr, #8
04318     F2 08 68 FC | 	wrlong	#4, objptr
0431c     37 00 00 FF 
04320     24 E4 85 F1 | 	sub	objptr, ##28196
04324     D0 D5 9F FD | 	jmp	#LR__0070
04328                 | LR__0205
04328                 | '     							 
04328                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04328     37 00 00 FF 
0432c     24 E4 05 F1 | 	add	objptr, ##28196
04330     F2 2C 02 FB | 	rdlong	local04, objptr
04334     37 00 00 FF 
04338     24 E4 85 F1 | 	sub	objptr, ##28196
0433c     01 2C 0E F2 | 	cmp	local04, #1 wz
04340     37 00 00 5F 
04344     24 E4 05 51 |  if_ne	add	objptr, ##28196
04348     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0434c     37 00 00 5F 
04350     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04354     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04358     35 00 00 AF 
0435c     18 E4 05 A1 |  if_e	add	objptr, ##27160
04360     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04364     35 00 00 AF 
04368     18 E4 85 A1 |  if_e	sub	objptr, ##27160
0436c     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04370     A4 00 90 5D |  if_ne	jmp	#LR__0208
04374     52 00 00 FF 
04378     E8 E4 05 F1 | 	add	objptr, ##42216
0437c     F2 12 02 FB | 	rdlong	arg01, objptr
04380     1B 00 00 FF 
04384     C4 E4 85 F1 | 	sub	objptr, ##14020
04388     F2 16 02 FB | 	rdlong	arg03, objptr
0438c     37 00 00 FF 
04390     24 E4 85 F1 | 	sub	objptr, ##28196
04394     00 14 06 F6 | 	mov	arg02, #0
04398     F8 43 B0 FD | 	call	#_compile_assign
0439c     FD 26 0A F6 | 	mov	local01, result1 wz
043a0                 | '   err=compile_assign(linenum,0,cont) 
043a0                 | '   if err<>0 then printerror(err,linenum): goto 101
043a0     20 00 90 AD |  if_e	jmp	#LR__0206
043a4     52 00 00 FF 
043a8     E8 E4 05 F1 | 	add	objptr, ##42216
043ac     F2 14 02 FB | 	rdlong	arg02, objptr
043b0     52 00 00 FF 
043b4     E8 E4 85 F1 | 	sub	objptr, ##42216
043b8     13 13 02 F6 | 	mov	arg01, local01
043bc     E0 F6 B1 FD | 	call	#_printerror
043c0     74 00 90 FD | 	jmp	#LR__0210
043c4                 | LR__0206
043c4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
043c4     52 00 00 FF 
043c8     30 E5 05 F1 | 	add	objptr, ##42288
043cc     F2 12 02 FB | 	rdlong	arg01, objptr
043d0     52 00 00 FF 
043d4     30 E5 85 F1 | 	sub	objptr, ##42288
043d8     B8 01 00 FF 
043dc     5A 15 06 F6 | 	mov	arg02, ##@LR__5546
043e0     FC 30 B2 FD | 	call	#__system___string_cmp
043e4     00 FA 4D F2 | 	cmps	result1, #0 wz
043e8     2C 00 90 AD |  if_e	jmp	#LR__0207
043ec     52 00 00 FF 
043f0     30 E5 05 F1 | 	add	objptr, ##42288
043f4     F2 2C 02 FB | 	rdlong	local04, objptr
043f8     1B 00 00 FF 
043fc     14 E5 85 F1 | 	sub	objptr, ##14100
04400     F2 2C 62 FC | 	wrlong	local04, objptr
04404     08 E4 05 F1 | 	add	objptr, #8
04408     F2 08 68 FC | 	wrlong	#4, objptr
0440c     37 00 00 FF 
04410     24 E4 85 F1 | 	sub	objptr, ##28196
04414     E0 D4 9F FD | 	jmp	#LR__0070
04418                 | LR__0207
04418                 | LR__0208
04418                 | LR__0209
04418                 | ' 
04418                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04418     52 00 00 FF 
0441c     E8 E4 05 F1 | 	add	objptr, ##42216
04420     F2 2C 0A FB | 	rdlong	local04, objptr wz
04424     52 00 00 FF 
04428     E8 E4 85 F1 | 	sub	objptr, ##42216
0442c     B0 00 90 5D |  if_ne	jmp	#LR__0213
04430     02 12 06 F6 | 	mov	arg01, #2
04434     70 92 B0 FD | 	call	#_execute_line
04438                 | LR__0210
04438                 | '   execute_line(2)
04438                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04438     52 00 00 FF 
0443c     0C E5 05 F1 | 	add	objptr, ##42252
04440     F2 2C 0A FB | 	rdlong	local04, objptr wz
04444     52 00 00 FF 
04448     0C E5 85 F1 | 	sub	objptr, ##42252
0444c     20 00 90 5D |  if_ne	jmp	#LR__0211
04450     B8 01 00 FF 
04454     5B 13 06 F6 | 	mov	arg01, ##@LR__5547
04458                 | ' 
04458                 | ' write(text)
04458     C0 17 B2 FD | 	call	#_hg010b_spin2_write
0445c                 | ' crlf
0445c     5C 1C B2 FD | 	call	#_hg010b_spin2_crlf
04460     B8 01 00 FF 
04464     5C 13 06 F6 | 	mov	arg01, ##@LR__5548
04468                 | ' 
04468                 | ' write(text)
04468     B0 17 B2 FD | 	call	#_hg010b_spin2_write
0446c                 | ' crlf
0446c     4C 1C B2 FD | 	call	#_hg010b_spin2_crlf
04470                 | LR__0211
04470                 | '     if inload=1 andalso err>0 then print fullline$
04470     52 00 00 FF 
04474     0C E5 05 F1 | 	add	objptr, ##42252
04478     F2 2C 02 FB | 	rdlong	local04, objptr
0447c     52 00 00 FF 
04480     0C E5 85 F1 | 	sub	objptr, ##42252
04484     01 2C 0E F2 | 	cmp	local04, #1 wz
04488     54 00 90 5D |  if_ne	jmp	#LR__0212
0448c     01 26 56 F2 | 	cmps	local01, #1 wc
04490     4C 00 90 CD |  if_b	jmp	#LR__0212
04494     00 12 06 F6 | 	mov	arg01, #0
04498     C0 8C B2 FD | 	call	#__system___getiolock_0616
0449c     FD 12 02 F6 | 	mov	arg01, result1
044a0     14 30 B2 FD | 	call	#__system___lockmem
044a4     37 00 00 FF 
044a8     20 E4 05 F1 | 	add	objptr, ##28192
044ac     F2 14 02 FB | 	rdlong	arg02, objptr
044b0     37 00 00 FF 
044b4     20 E4 85 F1 | 	sub	objptr, ##28192
044b8     00 12 06 F6 | 	mov	arg01, #0
044bc     00 16 06 F6 | 	mov	arg03, #0
044c0     EC 3C B2 FD | 	call	#__system___basic_print_string
044c4     00 12 06 F6 | 	mov	arg01, #0
044c8     0A 14 06 F6 | 	mov	arg02, #10
044cc     00 16 06 F6 | 	mov	arg03, #0
044d0     84 3C B2 FD | 	call	#__system___basic_print_char
044d4     00 12 06 F6 | 	mov	arg01, #0
044d8     80 8C B2 FD | 	call	#__system___getiolock_0616
044dc     FD 00 68 FC | 	wrlong	#0, result1
044e0                 | LR__0212
044e0                 | LR__0213
044e0     A7 F0 03 F6 | 	mov	ptra, fp
044e4     B2 00 A0 FD | 	call	#popregs_
044e8                 | _interpret_ret
044e8     2D 00 64 FD | 	ret
044ec                 | 
044ec                 | ' 
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' '
044ec                 | ' '                          END OF TOKENIZER MAIN CODE
044ec                 | ' '
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' 
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' 
044ec                 | ' ' Check if the part is an operator, return a token or 0 if not found
044ec                 | ' 
044ec                 | ' function isoperator(s as string) as ubyte
044ec                 | _isoperator
044ec     01 4A 05 F6 | 	mov	COUNT_, #1
044f0     A8 00 A0 FD | 	call	#pushregs_
044f4                 | ' 
044f4                 | ' select case s
044f4     09 27 02 F6 | 	mov	local01, arg01
044f8     B8 01 00 FF 
044fc     62 15 06 F6 | 	mov	arg02, ##@LR__5549
04500     13 13 02 F6 | 	mov	arg01, local01
04504     D8 2F B2 FD | 	call	#__system___string_cmp
04508     00 FA 0D F2 | 	cmp	result1, #0 wz
0450c     FC 01 90 AD |  if_e	jmp	#LR__0220
04510     B8 01 00 FF 
04514     64 15 06 F6 | 	mov	arg02, ##@LR__5550
04518     13 13 02 F6 | 	mov	arg01, local01
0451c     C0 2F B2 FD | 	call	#__system___string_cmp
04520     00 FA 0D F2 | 	cmp	result1, #0 wz
04524     EC 01 90 AD |  if_e	jmp	#LR__0221
04528     B8 01 00 FF 
0452c     66 15 06 F6 | 	mov	arg02, ##@LR__5551
04530     13 13 02 F6 | 	mov	arg01, local01
04534     A8 2F B2 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     DC 01 90 AD |  if_e	jmp	#LR__0222
04540     B8 01 00 FF 
04544     69 15 06 F6 | 	mov	arg02, ##@LR__5552
04548     13 13 02 F6 | 	mov	arg01, local01
0454c     90 2F B2 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     CC 01 90 AD |  if_e	jmp	#LR__0223
04558     B8 01 00 FF 
0455c     6D 15 06 F6 | 	mov	arg02, ##@LR__5553
04560     13 13 02 F6 | 	mov	arg01, local01
04564     78 2F B2 FD | 	call	#__system___string_cmp
04568     00 FA 0D F2 | 	cmp	result1, #0 wz
0456c     BC 01 90 AD |  if_e	jmp	#LR__0224
04570     B8 01 00 FF 
04574     6F 15 06 F6 | 	mov	arg02, ##@LR__5554
04578     13 13 02 F6 | 	mov	arg01, local01
0457c     60 2F B2 FD | 	call	#__system___string_cmp
04580     00 FA 0D F2 | 	cmp	result1, #0 wz
04584     AC 01 90 AD |  if_e	jmp	#LR__0225
04588     B8 01 00 FF 
0458c     71 15 06 F6 | 	mov	arg02, ##@LR__5555
04590     13 13 02 F6 | 	mov	arg01, local01
04594     48 2F B2 FD | 	call	#__system___string_cmp
04598     00 FA 0D F2 | 	cmp	result1, #0 wz
0459c     9C 01 90 AD |  if_e	jmp	#LR__0226
045a0     B8 01 00 FF 
045a4     75 15 06 F6 | 	mov	arg02, ##@LR__5556
045a8     13 13 02 F6 | 	mov	arg01, local01
045ac     30 2F B2 FD | 	call	#__system___string_cmp
045b0     00 FA 0D F2 | 	cmp	result1, #0 wz
045b4     8C 01 90 AD |  if_e	jmp	#LR__0227
045b8     B8 01 00 FF 
045bc     79 15 06 F6 | 	mov	arg02, ##@LR__5557
045c0     13 13 02 F6 | 	mov	arg01, local01
045c4     18 2F B2 FD | 	call	#__system___string_cmp
045c8     00 FA 0D F2 | 	cmp	result1, #0 wz
045cc     7C 01 90 AD |  if_e	jmp	#LR__0228
045d0     B8 01 00 FF 
045d4     7D 15 06 F6 | 	mov	arg02, ##@LR__5558
045d8     13 13 02 F6 | 	mov	arg01, local01
045dc     00 2F B2 FD | 	call	#__system___string_cmp
045e0     00 FA 0D F2 | 	cmp	result1, #0 wz
045e4     6C 01 90 AD |  if_e	jmp	#LR__0229
045e8     B8 01 00 FF 
045ec     81 15 06 F6 | 	mov	arg02, ##@LR__5559
045f0     13 13 02 F6 | 	mov	arg01, local01
045f4     E8 2E B2 FD | 	call	#__system___string_cmp
045f8     00 FA 0D F2 | 	cmp	result1, #0 wz
045fc     5C 01 90 AD |  if_e	jmp	#LR__0230
04600     B8 01 00 FF 
04604     85 15 06 F6 | 	mov	arg02, ##@LR__5560
04608     13 13 02 F6 | 	mov	arg01, local01
0460c     D0 2E B2 FD | 	call	#__system___string_cmp
04610     00 FA 0D F2 | 	cmp	result1, #0 wz
04614     4C 01 90 AD |  if_e	jmp	#LR__0231
04618     B8 01 00 FF 
0461c     87 15 06 F6 | 	mov	arg02, ##@LR__5561
04620     13 13 02 F6 | 	mov	arg01, local01
04624     B8 2E B2 FD | 	call	#__system___string_cmp
04628     00 FA 0D F2 | 	cmp	result1, #0 wz
0462c     3C 01 90 AD |  if_e	jmp	#LR__0232
04630     B8 01 00 FF 
04634     8B 15 06 F6 | 	mov	arg02, ##@LR__5562
04638     13 13 02 F6 | 	mov	arg01, local01
0463c     A0 2E B2 FD | 	call	#__system___string_cmp
04640     00 FA 0D F2 | 	cmp	result1, #0 wz
04644     2C 01 90 AD |  if_e	jmp	#LR__0233
04648     B8 01 00 FF 
0464c     8D 15 06 F6 | 	mov	arg02, ##@LR__5563
04650     13 13 02 F6 | 	mov	arg01, local01
04654     88 2E B2 FD | 	call	#__system___string_cmp
04658     00 FA 0D F2 | 	cmp	result1, #0 wz
0465c     1C 01 90 AD |  if_e	jmp	#LR__0234
04660     B8 01 00 FF 
04664     8F 15 06 F6 | 	mov	arg02, ##@LR__5564
04668     13 13 02 F6 | 	mov	arg01, local01
0466c     70 2E B2 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     0C 01 90 AD |  if_e	jmp	#LR__0235
04678     B8 01 00 FF 
0467c     92 15 06 F6 | 	mov	arg02, ##@LR__5565
04680     13 13 02 F6 | 	mov	arg01, local01
04684     58 2E B2 FD | 	call	#__system___string_cmp
04688     00 FA 0D F2 | 	cmp	result1, #0 wz
0468c     FC 00 90 AD |  if_e	jmp	#LR__0236
04690     B8 01 00 FF 
04694     95 15 06 F6 | 	mov	arg02, ##@LR__5566
04698     13 13 02 F6 | 	mov	arg01, local01
0469c     40 2E B2 FD | 	call	#__system___string_cmp
046a0     00 FA 0D F2 | 	cmp	result1, #0 wz
046a4     EC 00 90 AD |  if_e	jmp	#LR__0237
046a8     B8 01 00 FF 
046ac     97 15 06 F6 | 	mov	arg02, ##@LR__5567
046b0     13 13 02 F6 | 	mov	arg01, local01
046b4     28 2E B2 FD | 	call	#__system___string_cmp
046b8     00 FA 0D F2 | 	cmp	result1, #0 wz
046bc     DC 00 90 AD |  if_e	jmp	#LR__0238
046c0     B8 01 00 FF 
046c4     99 15 06 F6 | 	mov	arg02, ##@LR__5568
046c8     13 13 02 F6 | 	mov	arg01, local01
046cc     10 2E B2 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     CC 00 90 AD |  if_e	jmp	#LR__0239
046d8     B8 01 00 FF 
046dc     9C 15 06 F6 | 	mov	arg02, ##@LR__5569
046e0     13 13 02 F6 | 	mov	arg01, local01
046e4     F8 2D B2 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     BC 00 90 AD |  if_e	jmp	#LR__0240
046f0     B8 01 00 FF 
046f4     9F 15 06 F6 | 	mov	arg02, ##@LR__5570
046f8     13 13 02 F6 | 	mov	arg01, local01
046fc     E0 2D B2 FD | 	call	#__system___string_cmp
04700     00 FA 0D F2 | 	cmp	result1, #0 wz
04704     AC 00 90 AD |  if_e	jmp	#LR__0241
04708     B0 00 90 FD | 	jmp	#LR__0242
0470c                 | LR__0220
0470c     01 FA 05 F6 | 	mov	result1, #1
04710     AC 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0221
04714     02 FA 05 F6 | 	mov	result1, #2
04718     A4 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0222
0471c     03 FA 05 F6 | 	mov	result1, #3
04720     9C 00 90 FD | 	jmp	#LR__0243
04724                 | LR__0223
04724     04 FA 05 F6 | 	mov	result1, #4
04728     94 00 90 FD | 	jmp	#LR__0243
0472c                 | LR__0224
0472c     05 FA 05 F6 | 	mov	result1, #5
04730     8C 00 90 FD | 	jmp	#LR__0243
04734                 | LR__0225
04734     06 FA 05 F6 | 	mov	result1, #6
04738     84 00 90 FD | 	jmp	#LR__0243
0473c                 | LR__0226
0473c     07 FA 05 F6 | 	mov	result1, #7
04740     7C 00 90 FD | 	jmp	#LR__0243
04744                 | LR__0227
04744     08 FA 05 F6 | 	mov	result1, #8
04748     74 00 90 FD | 	jmp	#LR__0243
0474c                 | LR__0228
0474c     09 FA 05 F6 | 	mov	result1, #9
04750     6C 00 90 FD | 	jmp	#LR__0243
04754                 | LR__0229
04754     0A FA 05 F6 | 	mov	result1, #10
04758     64 00 90 FD | 	jmp	#LR__0243
0475c                 | LR__0230
0475c     0B FA 05 F6 | 	mov	result1, #11
04760     5C 00 90 FD | 	jmp	#LR__0243
04764                 | LR__0231
04764     0C FA 05 F6 | 	mov	result1, #12
04768     54 00 90 FD | 	jmp	#LR__0243
0476c                 | LR__0232
0476c     0D FA 05 F6 | 	mov	result1, #13
04770     4C 00 90 FD | 	jmp	#LR__0243
04774                 | LR__0233
04774     0E FA 05 F6 | 	mov	result1, #14
04778     44 00 90 FD | 	jmp	#LR__0243
0477c                 | LR__0234
0477c     1B FA 05 F6 | 	mov	result1, #27
04780     3C 00 90 FD | 	jmp	#LR__0243
04784                 | LR__0235
04784     27 FA 05 F6 | 	mov	result1, #39
04788     34 00 90 FD | 	jmp	#LR__0243
0478c                 | LR__0236
0478c     26 FA 05 F6 | 	mov	result1, #38
04790     2C 00 90 FD | 	jmp	#LR__0243
04794                 | LR__0237
04794     10 FA 05 F6 | 	mov	result1, #16
04798     24 00 90 FD | 	jmp	#LR__0243
0479c                 | LR__0238
0479c     0F FA 05 F6 | 	mov	result1, #15
047a0     1C 00 90 FD | 	jmp	#LR__0243
047a4                 | LR__0239
047a4     2A FA 05 F6 | 	mov	result1, #42
047a8     14 00 90 FD | 	jmp	#LR__0243
047ac                 | LR__0240
047ac     28 FA 05 F6 | 	mov	result1, #40
047b0     0C 00 90 FD | 	jmp	#LR__0243
047b4                 | LR__0241
047b4     29 FA 05 F6 | 	mov	result1, #41
047b8     04 00 90 FD | 	jmp	#LR__0243
047bc                 | LR__0242
047bc     00 FA 05 F6 | 	mov	result1, #0
047c0                 | LR__0243
047c0     A7 F0 03 F6 | 	mov	ptra, fp
047c4     B2 00 A0 FD | 	call	#popregs_
047c8                 | _isoperator_ret
047c8     2D 00 64 FD | 	ret
047cc                 | 
047cc                 | ' 
047cc                 | ' ' Check if the part is a channel#, return a token or 0 if not found
047cc                 | ' 
047cc                 | ' function ischannel(s as string) as ulong
047cc                 | _ischannel
047cc     02 4A 05 F6 | 	mov	COUNT_, #2
047d0     A8 00 A0 FD | 	call	#pushregs_
047d4                 | ' if left$(s,1)<>"#" then return 0
047d4     09 27 02 F6 | 	mov	local01, arg01
047d8     01 14 06 F6 | 	mov	arg02, #1
047dc     58 4D B2 FD | 	call	#__system__Left_S
047e0     FD 12 02 F6 | 	mov	arg01, result1
047e4     B8 01 00 FF 
047e8     A2 15 06 F6 | 	mov	arg02, ##@LR__5571
047ec     F0 2C B2 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     00 FA 05 56 |  if_ne	mov	result1, #0
047f8     AC 00 90 5D |  if_ne	jmp	#LR__0254
047fc                 | ' if len(s)<>2 then return 0
047fc     13 13 02 F6 | 	mov	arg01, local01
04800     09 29 02 F6 | 	mov	local02, arg01
04804     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04808                 | LR__0250
04808     14 FB C9 FA | 	rdbyte	result1, local02 wz
0480c     01 28 06 51 |  if_ne	add	local02, #1
04810     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
04814                 | LR__0251
04814     09 29 82 F1 | 	sub	local02, arg01
04818     14 FB 01 F6 | 	mov	result1, local02
0481c     02 FA 0D F2 | 	cmp	result1, #2 wz
04820     00 FA 05 56 |  if_ne	mov	result1, #0
04824     80 00 90 5D |  if_ne	jmp	#LR__0254
04828                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04828     13 13 02 F6 | 	mov	arg01, local01
0482c     01 14 06 F6 | 	mov	arg02, #1
04830     8C 4D B2 FD | 	call	#__system__Right_S
04834     FD 12 02 F6 | 	mov	arg01, result1
04838     B8 01 00 FF 
0483c     A4 15 06 F6 | 	mov	arg02, ##@LR__5572
04840     9C 2C B2 FD | 	call	#__system___string_cmp
04844     00 FA 55 F2 | 	cmps	result1, #0 wc
04848     24 00 90 CD |  if_b	jmp	#LR__0252
0484c     13 13 02 F6 | 	mov	arg01, local01
04850     01 14 06 F6 | 	mov	arg02, #1
04854     68 4D B2 FD | 	call	#__system__Right_S
04858     FD 12 02 F6 | 	mov	arg01, result1
0485c     B8 01 00 FF 
04860     A6 15 06 F6 | 	mov	arg02, ##@LR__5573
04864     78 2C B2 FD | 	call	#__system___string_cmp
04868     01 FA 55 F2 | 	cmps	result1, #1 wc
0486c     08 00 90 CD |  if_b	jmp	#LR__0253
04870                 | LR__0252
04870     00 FA 05 F6 | 	mov	result1, #0
04874     30 00 90 FD | 	jmp	#LR__0254
04878                 | LR__0253
04878                 | ' return token_channel+val(right$(s,1))
04878     13 13 02 F6 | 	mov	arg01, local01
0487c     01 14 06 F6 | 	mov	arg02, #1
04880     3C 4D B2 FD | 	call	#__system__Right_S
04884     FD 12 02 F6 | 	mov	arg01, result1
04888     B4 62 B2 FD | 	call	#__system____builtin_atof
0488c     FD 14 02 F6 | 	mov	arg02, result1
04890     00 18 21 FF 
04894     00 12 06 F6 | 	mov	arg01, ##1110441984
04898     C8 56 B2 FD | 	call	#__system___float_add
0489c     FD 12 02 F6 | 	mov	arg01, result1
048a0     00 14 06 F6 | 	mov	arg02, #0
048a4     54 5F B2 FD | 	call	#__system___float_tointeger
048a8                 | LR__0254
048a8     A7 F0 03 F6 | 	mov	ptra, fp
048ac     B2 00 A0 FD | 	call	#popregs_
048b0                 | _ischannel_ret
048b0     2D 00 64 FD | 	ret
048b4                 | 
048b4                 | ' 
048b4                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
048b4                 | ' ' todo: add spin2/pasm constants for pin control
048b4                 | ' 
048b4                 | ' function isconstant(s as string) as integer
048b4                 | _isconstant
048b4     01 4A 05 F6 | 	mov	COUNT_, #1
048b8     A8 00 A0 FD | 	call	#pushregs_
048bc                 | ' 
048bc                 | ' select case s
048bc     09 27 02 F6 | 	mov	local01, arg01
048c0     B8 01 00 FF 
048c4     A8 15 06 F6 | 	mov	arg02, ##@LR__5574
048c8     13 13 02 F6 | 	mov	arg01, local01
048cc     10 2C B2 FD | 	call	#__system___string_cmp
048d0     00 FA 0D F2 | 	cmp	result1, #0 wz
048d4     34 00 90 AD |  if_e	jmp	#LR__0260
048d8     B8 01 00 FF 
048dc     AE 15 06 F6 | 	mov	arg02, ##@LR__5575
048e0     13 13 02 F6 | 	mov	arg01, local01
048e4     F8 2B B2 FD | 	call	#__system___string_cmp
048e8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ec     24 00 90 AD |  if_e	jmp	#LR__0261
048f0     B8 01 00 FF 
048f4     B5 15 06 F6 | 	mov	arg02, ##@LR__5576
048f8     13 13 02 F6 | 	mov	arg01, local01
048fc     E0 2B B2 FD | 	call	#__system___string_cmp
04900     00 FA 0D F2 | 	cmp	result1, #0 wz
04904     14 00 90 AD |  if_e	jmp	#LR__0262
04908     18 00 90 FD | 	jmp	#LR__0263
0490c                 | LR__0260
0490c     01 FA 05 F6 | 	mov	result1, #1
04910     14 00 90 FD | 	jmp	#LR__0264
04914                 | LR__0261
04914     02 FA 05 F6 | 	mov	result1, #2
04918     0C 00 90 FD | 	jmp	#LR__0264
0491c                 | LR__0262
0491c     04 FA 05 F6 | 	mov	result1, #4
04920     04 00 90 FD | 	jmp	#LR__0264
04924                 | LR__0263
04924     00 FA 05 F6 | 	mov	result1, #0
04928                 | LR__0264
04928     A7 F0 03 F6 | 	mov	ptra, fp
0492c     B2 00 A0 FD | 	call	#popregs_
04930                 | _isconstant_ret
04930     2D 00 64 FD | 	ret
04934                 | 
04934                 | ' 
04934                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04934                 | ' 
04934                 | ' function isnotename(s as string) as ulong
04934                 | _isnotename
04934     07 4A 05 F6 | 	mov	COUNT_, #7
04938     A8 00 A0 FD | 	call	#pushregs_
0493c                 | ' if left$(s,1)<>"#" then return 0
0493c     09 27 02 F6 | 	mov	local01, arg01
04940     01 14 06 F6 | 	mov	arg02, #1
04944     F0 4B B2 FD | 	call	#__system__Left_S
04948     FD 12 02 F6 | 	mov	arg01, result1
0494c     B8 01 00 FF 
04950     BD 15 06 F6 | 	mov	arg02, ##@LR__5577
04954     88 2B B2 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     00 FA 05 56 |  if_ne	mov	result1, #0
04960     30 03 90 5D |  if_ne	jmp	#LR__0293
04964                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04964     13 13 02 F6 | 	mov	arg01, local01
04968     03 14 06 F6 | 	mov	arg02, #3
0496c     01 16 06 F6 | 	mov	arg03, #1
04970     DC 4C B2 FD | 	call	#__system__Mid_S
04974     FD 12 02 F6 | 	mov	arg01, result1
04978     B8 01 00 FF 
0497c     BF 15 06 F6 | 	mov	arg02, ##@LR__5578
04980     5C 2B B2 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     18 00 90 5D |  if_ne	jmp	#LR__0270
0498c     13 13 02 F6 | 	mov	arg01, local01
04990     02 14 06 F6 | 	mov	arg02, #2
04994     02 16 06 F6 | 	mov	arg03, #2
04998     B4 4C B2 FD | 	call	#__system__Mid_S
0499c     FD 28 02 F6 | 	mov	local02, result1
049a0     14 00 90 FD | 	jmp	#LR__0271
049a4                 | LR__0270
049a4     13 13 02 F6 | 	mov	arg01, local01
049a8     02 14 06 F6 | 	mov	arg02, #2
049ac     01 16 06 F6 | 	mov	arg03, #1
049b0     9C 4C B2 FD | 	call	#__system__Mid_S
049b4     FD 28 02 F6 | 	mov	local02, result1
049b8                 | LR__0271
049b8                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
049b8     13 13 02 F6 | 	mov	arg01, local01
049bc     09 2B 02 F6 | 	mov	local03, arg01
049c0     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
049c4                 | LR__0272
049c4     15 FB C9 FA | 	rdbyte	result1, local03 wz
049c8     01 2A 06 51 |  if_ne	add	local03, #1
049cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
049d0                 | LR__0273
049d0     09 2B 82 F1 | 	sub	local03, arg01
049d4     15 15 02 F6 | 	mov	arg02, local03
049d8     01 14 86 F1 | 	sub	arg02, #1
049dc     13 13 02 F6 | 	mov	arg01, local01
049e0     01 16 06 F6 | 	mov	arg03, #1
049e4     68 4C B2 FD | 	call	#__system__Mid_S
049e8     FD 12 02 F6 | 	mov	arg01, result1
049ec     B8 01 00 FF 
049f0     C1 15 06 F6 | 	mov	arg02, ##@LR__5579
049f4     E8 2A B2 FD | 	call	#__system___string_cmp
049f8     00 FA 0D F2 | 	cmp	result1, #0 wz
049fc     28 00 90 AD |  if_e	jmp	#LR__0274
04a00     13 13 02 F6 | 	mov	arg01, local01
04a04     01 14 06 F6 | 	mov	arg02, #1
04a08     B4 4B B2 FD | 	call	#__system__Right_S
04a0c     FD 12 02 F6 | 	mov	arg01, result1
04a10     2C 61 B2 FD | 	call	#__system____builtin_atof
04a14     FD 12 02 F6 | 	mov	arg01, result1
04a18     00 14 06 F6 | 	mov	arg02, #0
04a1c     DC 5D B2 FD | 	call	#__system___float_tointeger
04a20     FD 2C 02 F6 | 	mov	local04, result1
04a24     34 00 90 FD | 	jmp	#LR__0275
04a28                 | LR__0274
04a28     13 13 02 F6 | 	mov	arg01, local01
04a2c     01 14 06 F6 | 	mov	arg02, #1
04a30     8C 4B B2 FD | 	call	#__system__Right_S
04a34     FD 12 02 F6 | 	mov	arg01, result1
04a38     04 61 B2 FD | 	call	#__system____builtin_atof
04a3c     FD 14 02 F6 | 	mov	arg02, result1
04a40     00 C0 5F FF 
04a44     00 12 06 F6 | 	mov	arg01, ##-1082130432
04a48     E8 58 B2 FD | 	call	#__system___float_mul
04a4c     FD 12 02 F6 | 	mov	arg01, result1
04a50     00 14 06 F6 | 	mov	arg02, #0
04a54     A4 5D B2 FD | 	call	#__system___float_tointeger
04a58     FD 2C 02 F6 | 	mov	local04, result1
04a5c                 | LR__0275
04a5c                 | ' 
04a5c                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04a5c     00 2C 0E F2 | 	cmp	local04, #0 wz
04a60     24 00 90 5D |  if_ne	jmp	#LR__0276
04a64     13 13 02 F6 | 	mov	arg01, local01
04a68     01 14 06 F6 | 	mov	arg02, #1
04a6c     50 4B B2 FD | 	call	#__system__Right_S
04a70     FD 12 02 F6 | 	mov	arg01, result1
04a74     B8 01 00 FF 
04a78     C3 15 06 F6 | 	mov	arg02, ##@LR__5580
04a7c     60 2A B2 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     04 2C 06 56 |  if_ne	mov	local04, #4
04a88                 | LR__0276
04a88                 | ' 
04a88                 | ' select case s1
04a88     14 2F 02 F6 | 	mov	local05, local02
04a8c     B8 01 00 FF 
04a90     C5 15 06 F6 | 	mov	arg02, ##@LR__5581
04a94     17 13 02 F6 | 	mov	arg01, local05
04a98     44 2A B2 FD | 	call	#__system___string_cmp
04a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa0     24 01 90 AD |  if_e	jmp	#LR__0277
04aa4     B8 01 00 FF 
04aa8     C7 15 06 F6 | 	mov	arg02, ##@LR__5582
04aac     17 13 02 F6 | 	mov	arg01, local05
04ab0     2C 2A B2 FD | 	call	#__system___string_cmp
04ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab8     18 01 90 AD |  if_e	jmp	#LR__0278
04abc     B8 01 00 FF 
04ac0     CA 15 06 F6 | 	mov	arg02, ##@LR__5583
04ac4     17 13 02 F6 | 	mov	arg01, local05
04ac8     14 2A B2 FD | 	call	#__system___string_cmp
04acc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad0     0C 01 90 AD |  if_e	jmp	#LR__0279
04ad4     B8 01 00 FF 
04ad8     CC 15 06 F6 | 	mov	arg02, ##@LR__5584
04adc     17 13 02 F6 | 	mov	arg01, local05
04ae0     FC 29 B2 FD | 	call	#__system___string_cmp
04ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae8     00 01 90 AD |  if_e	jmp	#LR__0280
04aec     B8 01 00 FF 
04af0     CF 15 06 F6 | 	mov	arg02, ##@LR__5585
04af4     17 13 02 F6 | 	mov	arg01, local05
04af8     E4 29 B2 FD | 	call	#__system___string_cmp
04afc     00 FA 0D F2 | 	cmp	result1, #0 wz
04b00     F4 00 90 AD |  if_e	jmp	#LR__0281
04b04     B8 01 00 FF 
04b08     D1 15 06 F6 | 	mov	arg02, ##@LR__5586
04b0c     17 13 02 F6 | 	mov	arg01, local05
04b10     CC 29 B2 FD | 	call	#__system___string_cmp
04b14     00 FA 0D F2 | 	cmp	result1, #0 wz
04b18     E8 00 90 AD |  if_e	jmp	#LR__0282
04b1c     B8 01 00 FF 
04b20     D3 15 06 F6 | 	mov	arg02, ##@LR__5587
04b24     17 13 02 F6 | 	mov	arg01, local05
04b28     B4 29 B2 FD | 	call	#__system___string_cmp
04b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b30     DC 00 90 AD |  if_e	jmp	#LR__0283
04b34     B8 01 00 FF 
04b38     D6 15 06 F6 | 	mov	arg02, ##@LR__5588
04b3c     17 13 02 F6 | 	mov	arg01, local05
04b40     9C 29 B2 FD | 	call	#__system___string_cmp
04b44     00 FA 0D F2 | 	cmp	result1, #0 wz
04b48     D0 00 90 AD |  if_e	jmp	#LR__0284
04b4c     B8 01 00 FF 
04b50     D8 15 06 F6 | 	mov	arg02, ##@LR__5589
04b54     17 13 02 F6 | 	mov	arg01, local05
04b58     84 29 B2 FD | 	call	#__system___string_cmp
04b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b60     C4 00 90 AD |  if_e	jmp	#LR__0285
04b64     B8 01 00 FF 
04b68     DB 15 06 F6 | 	mov	arg02, ##@LR__5590
04b6c     17 13 02 F6 | 	mov	arg01, local05
04b70     6C 29 B2 FD | 	call	#__system___string_cmp
04b74     00 FA 0D F2 | 	cmp	result1, #0 wz
04b78     B8 00 90 AD |  if_e	jmp	#LR__0286
04b7c     B8 01 00 FF 
04b80     DD 15 06 F6 | 	mov	arg02, ##@LR__5591
04b84     17 13 02 F6 | 	mov	arg01, local05
04b88     54 29 B2 FD | 	call	#__system___string_cmp
04b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b90     AC 00 90 AD |  if_e	jmp	#LR__0287
04b94     B8 01 00 FF 
04b98     E0 15 06 F6 | 	mov	arg02, ##@LR__5592
04b9c     17 13 02 F6 | 	mov	arg01, local05
04ba0     3C 29 B2 FD | 	call	#__system___string_cmp
04ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba8     A0 00 90 AD |  if_e	jmp	#LR__0288
04bac     B8 01 00 FF 
04bb0     E2 15 06 F6 | 	mov	arg02, ##@LR__5593
04bb4     17 13 02 F6 | 	mov	arg01, local05
04bb8     24 29 B2 FD | 	call	#__system___string_cmp
04bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc0     94 00 90 AD |  if_e	jmp	#LR__0289
04bc4     9C 00 90 FD | 	jmp	#LR__0290
04bc8                 | LR__0277
04bc8     01 00 00 FF 
04bcc     00 31 06 F6 | 	mov	local06, ##768
04bd0     98 00 90 FD | 	jmp	#LR__0291
04bd4                 | LR__0278
04bd4     01 00 00 FF 
04bd8     01 31 06 F6 | 	mov	local06, ##769
04bdc     8C 00 90 FD | 	jmp	#LR__0291
04be0                 | LR__0279
04be0     01 00 00 FF 
04be4     02 31 06 F6 | 	mov	local06, ##770
04be8     80 00 90 FD | 	jmp	#LR__0291
04bec                 | LR__0280
04bec     01 00 00 FF 
04bf0     03 31 06 F6 | 	mov	local06, ##771
04bf4     74 00 90 FD | 	jmp	#LR__0291
04bf8                 | LR__0281
04bf8     01 00 00 FF 
04bfc     04 31 06 F6 | 	mov	local06, ##772
04c00     68 00 90 FD | 	jmp	#LR__0291
04c04                 | LR__0282
04c04     01 00 00 FF 
04c08     05 31 06 F6 | 	mov	local06, ##773
04c0c     5C 00 90 FD | 	jmp	#LR__0291
04c10                 | LR__0283
04c10     01 00 00 FF 
04c14     06 31 06 F6 | 	mov	local06, ##774
04c18     50 00 90 FD | 	jmp	#LR__0291
04c1c                 | LR__0284
04c1c     01 00 00 FF 
04c20     07 31 06 F6 | 	mov	local06, ##775
04c24     44 00 90 FD | 	jmp	#LR__0291
04c28                 | LR__0285
04c28     01 00 00 FF 
04c2c     08 31 06 F6 | 	mov	local06, ##776
04c30     38 00 90 FD | 	jmp	#LR__0291
04c34                 | LR__0286
04c34     01 00 00 FF 
04c38     09 31 06 F6 | 	mov	local06, ##777
04c3c     2C 00 90 FD | 	jmp	#LR__0291
04c40                 | LR__0287
04c40     01 00 00 FF 
04c44     0A 31 06 F6 | 	mov	local06, ##778
04c48     20 00 90 FD | 	jmp	#LR__0291
04c4c                 | LR__0288
04c4c     01 00 00 FF 
04c50     0B 31 06 F6 | 	mov	local06, ##779
04c54     14 00 90 FD | 	jmp	#LR__0291
04c58                 | LR__0289
04c58     01 00 00 FF 
04c5c     0B 31 06 F6 | 	mov	local06, ##779
04c60     08 00 90 FD | 	jmp	#LR__0291
04c64                 | LR__0290
04c64     00 FA 05 F6 | 	mov	result1, #0
04c68     28 00 90 FD | 	jmp	#LR__0293
04c6c                 | LR__0291
04c6c                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04c6c     FF FF 7F FF 
04c70     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04c74     18 00 90 CD |  if_b	jmp	#LR__0292
04c78     0A 2C 56 F2 | 	cmps	local04, #10 wc
04c7c     16 33 02 C6 |  if_b	mov	local07, local04
04c80     01 32 66 C0 |  if_b	shl	local07, #1
04c84     16 33 02 C1 |  if_b	add	local07, local04
04c88     02 32 66 C0 |  if_b	shl	local07, #2
04c8c     19 31 02 C1 |  if_b	add	local06, local07
04c90                 | LR__0292
04c90                 | ' return token
04c90     18 FB 01 F6 | 	mov	result1, local06
04c94                 | LR__0293
04c94     A7 F0 03 F6 | 	mov	ptra, fp
04c98     B2 00 A0 FD | 	call	#popregs_
04c9c                 | _isnotename_ret
04c9c     2D 00 64 FD | 	ret
04ca0                 | 
04ca0                 | ' 
04ca0                 | ' ' Check if the part is a separator, return a token or 0 if not found
04ca0                 | ' 
04ca0                 | ' function isseparator(s as string) as ubyte
04ca0                 | _isseparator
04ca0     01 4A 05 F6 | 	mov	COUNT_, #1
04ca4     A8 00 A0 FD | 	call	#pushregs_
04ca8                 | ' 
04ca8                 | ' select case s
04ca8     09 27 02 F6 | 	mov	local01, arg01
04cac     B8 01 00 FF 
04cb0     E4 15 06 F6 | 	mov	arg02, ##@LR__5594
04cb4     13 13 02 F6 | 	mov	arg01, local01
04cb8     24 28 B2 FD | 	call	#__system___string_cmp
04cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc0     54 01 90 AD |  if_e	jmp	#LR__0300
04cc4     B8 01 00 FF 
04cc8     E6 15 06 F6 | 	mov	arg02, ##@LR__5595
04ccc     13 13 02 F6 | 	mov	arg01, local01
04cd0     0C 28 B2 FD | 	call	#__system___string_cmp
04cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd8     44 01 90 AD |  if_e	jmp	#LR__0301
04cdc     B8 01 00 FF 
04ce0     E8 15 06 F6 | 	mov	arg02, ##@LR__5596
04ce4     13 13 02 F6 | 	mov	arg01, local01
04ce8     F4 27 B2 FD | 	call	#__system___string_cmp
04cec     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf0     34 01 90 AD |  if_e	jmp	#LR__0302
04cf4     B8 01 00 FF 
04cf8     EA 15 06 F6 | 	mov	arg02, ##@LR__5597
04cfc     13 13 02 F6 | 	mov	arg01, local01
04d00     DC 27 B2 FD | 	call	#__system___string_cmp
04d04     00 FA 0D F2 | 	cmp	result1, #0 wz
04d08     24 01 90 AD |  if_e	jmp	#LR__0303
04d0c     B8 01 00 FF 
04d10     EC 15 06 F6 | 	mov	arg02, ##@LR__5598
04d14     13 13 02 F6 | 	mov	arg01, local01
04d18     C4 27 B2 FD | 	call	#__system___string_cmp
04d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d20     14 01 90 AD |  if_e	jmp	#LR__0304
04d24     B8 01 00 FF 
04d28     EE 15 06 F6 | 	mov	arg02, ##@LR__5599
04d2c     13 13 02 F6 | 	mov	arg01, local01
04d30     AC 27 B2 FD | 	call	#__system___string_cmp
04d34     00 FA 0D F2 | 	cmp	result1, #0 wz
04d38     04 01 90 AD |  if_e	jmp	#LR__0305
04d3c     B8 01 00 FF 
04d40     F0 15 06 F6 | 	mov	arg02, ##@LR__5600
04d44     13 13 02 F6 | 	mov	arg01, local01
04d48     94 27 B2 FD | 	call	#__system___string_cmp
04d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d50     F4 00 90 AD |  if_e	jmp	#LR__0306
04d54     B8 01 00 FF 
04d58     F2 15 06 F6 | 	mov	arg02, ##@LR__5601
04d5c     13 13 02 F6 | 	mov	arg01, local01
04d60     7C 27 B2 FD | 	call	#__system___string_cmp
04d64     00 FA 0D F2 | 	cmp	result1, #0 wz
04d68     E4 00 90 AD |  if_e	jmp	#LR__0307
04d6c     B8 01 00 FF 
04d70     F4 15 06 F6 | 	mov	arg02, ##@LR__5602
04d74     13 13 02 F6 | 	mov	arg01, local01
04d78     64 27 B2 FD | 	call	#__system___string_cmp
04d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d80     D4 00 90 AD |  if_e	jmp	#LR__0308
04d84     B8 01 00 FF 
04d88     F6 15 06 F6 | 	mov	arg02, ##@LR__5603
04d8c     13 13 02 F6 | 	mov	arg01, local01
04d90     4C 27 B2 FD | 	call	#__system___string_cmp
04d94     00 FA 0D F2 | 	cmp	result1, #0 wz
04d98     C4 00 90 AD |  if_e	jmp	#LR__0309
04d9c     B8 01 00 FF 
04da0     F8 15 06 F6 | 	mov	arg02, ##@LR__5604
04da4     13 13 02 F6 | 	mov	arg01, local01
04da8     34 27 B2 FD | 	call	#__system___string_cmp
04dac     00 FA 0D F2 | 	cmp	result1, #0 wz
04db0     B4 00 90 AD |  if_e	jmp	#LR__0310
04db4     B8 01 00 FF 
04db8     FA 15 06 F6 | 	mov	arg02, ##@LR__5605
04dbc     13 13 02 F6 | 	mov	arg01, local01
04dc0     1C 27 B2 FD | 	call	#__system___string_cmp
04dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc8     A4 00 90 AD |  if_e	jmp	#LR__0311
04dcc     B8 01 00 FF 
04dd0     FC 15 06 F6 | 	mov	arg02, ##@LR__5606
04dd4     13 13 02 F6 | 	mov	arg01, local01
04dd8     04 27 B2 FD | 	call	#__system___string_cmp
04ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
04de0     94 00 90 AD |  if_e	jmp	#LR__0312
04de4     B8 01 00 FF 
04de8     FE 15 06 F6 | 	mov	arg02, ##@LR__5607
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     EC 26 B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     84 00 90 AD |  if_e	jmp	#LR__0313
04dfc     B9 01 00 FF 
04e00     00 14 06 F6 | 	mov	arg02, ##@LR__5608
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     D4 26 B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     74 00 90 AD |  if_e	jmp	#LR__0314
04e14     78 00 90 FD | 	jmp	#LR__0315
04e18                 | LR__0300
04e18     01 FA 05 F6 | 	mov	result1, #1
04e1c     74 00 90 FD | 	jmp	#LR__0316
04e20                 | LR__0301
04e20     02 FA 05 F6 | 	mov	result1, #2
04e24     6C 00 90 FD | 	jmp	#LR__0316
04e28                 | LR__0302
04e28     1B FA 05 F6 | 	mov	result1, #27
04e2c     64 00 90 FD | 	jmp	#LR__0316
04e30                 | LR__0303
04e30     11 FA 05 F6 | 	mov	result1, #17
04e34     5C 00 90 FD | 	jmp	#LR__0316
04e38                 | LR__0304
04e38     05 FA 05 F6 | 	mov	result1, #5
04e3c     54 00 90 FD | 	jmp	#LR__0316
04e40                 | LR__0305
04e40     06 FA 05 F6 | 	mov	result1, #6
04e44     4C 00 90 FD | 	jmp	#LR__0316
04e48                 | LR__0306
04e48     12 FA 05 F6 | 	mov	result1, #18
04e4c     44 00 90 FD | 	jmp	#LR__0316
04e50                 | LR__0307
04e50     13 FA 05 F6 | 	mov	result1, #19
04e54     3C 00 90 FD | 	jmp	#LR__0316
04e58                 | LR__0308
04e58     0C FA 05 F6 | 	mov	result1, #12
04e5c     34 00 90 FD | 	jmp	#LR__0316
04e60                 | LR__0309
04e60     14 FA 05 F6 | 	mov	result1, #20
04e64     2C 00 90 FD | 	jmp	#LR__0316
04e68                 | LR__0310
04e68     15 FA 05 F6 | 	mov	result1, #21
04e6c     24 00 90 FD | 	jmp	#LR__0316
04e70                 | LR__0311
04e70     16 FA 05 F6 | 	mov	result1, #22
04e74     1C 00 90 FD | 	jmp	#LR__0316
04e78                 | LR__0312
04e78     FF FB 05 F6 | 	mov	result1, #511
04e7c     14 00 90 FD | 	jmp	#LR__0316
04e80                 | LR__0313
04e80     0F FA 05 F6 | 	mov	result1, #15
04e84     0C 00 90 FD | 	jmp	#LR__0316
04e88                 | LR__0314
04e88     10 FA 05 F6 | 	mov	result1, #16
04e8c     04 00 90 FD | 	jmp	#LR__0316
04e90                 | LR__0315
04e90     00 FA 05 F6 | 	mov	result1, #0
04e94                 | LR__0316
04e94     A7 F0 03 F6 | 	mov	ptra, fp
04e98     B2 00 A0 FD | 	call	#popregs_
04e9c                 | _isseparator_ret
04e9c     2D 00 64 FD | 	ret
04ea0                 | 
04ea0                 | ' 
04ea0                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04ea0                 | ' 
04ea0                 | ' function iscommand(s as string) as ubyte
04ea0                 | _iscommand
04ea0     01 4A 05 F6 | 	mov	COUNT_, #1
04ea4     A8 00 A0 FD | 	call	#pushregs_
04ea8                 | ' 
04ea8                 | ' select case s
04ea8     09 27 02 F6 | 	mov	local01, arg01
04eac     B9 01 00 FF 
04eb0     04 14 06 F6 | 	mov	arg02, ##@LR__5610
04eb4     13 13 02 F6 | 	mov	arg01, local01
04eb8     24 26 B2 FD | 	call	#__system___string_cmp
04ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec0     C4 0C 90 AD |  if_e	jmp	#LR__0320
04ec4     B9 01 00 FF 
04ec8     09 14 06 F6 | 	mov	arg02, ##@LR__5611
04ecc     13 13 02 F6 | 	mov	arg01, local01
04ed0     0C 26 B2 FD | 	call	#__system___string_cmp
04ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed8     B4 0C 90 AD |  if_e	jmp	#LR__0321
04edc     B9 01 00 FF 
04ee0     0C 14 06 F6 | 	mov	arg02, ##@LR__5612
04ee4     13 13 02 F6 | 	mov	arg01, local01
04ee8     F4 25 B2 FD | 	call	#__system___string_cmp
04eec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef0     A4 0C 90 AD |  if_e	jmp	#LR__0322
04ef4     B9 01 00 FF 
04ef8     11 14 06 F6 | 	mov	arg02, ##@LR__5613
04efc     13 13 02 F6 | 	mov	arg01, local01
04f00     DC 25 B2 FD | 	call	#__system___string_cmp
04f04     00 FA 0D F2 | 	cmp	result1, #0 wz
04f08     94 0C 90 AD |  if_e	jmp	#LR__0323
04f0c     B9 01 00 FF 
04f10     15 14 06 F6 | 	mov	arg02, ##@LR__5614
04f14     13 13 02 F6 | 	mov	arg01, local01
04f18     C4 25 B2 FD | 	call	#__system___string_cmp
04f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f20     84 0C 90 AD |  if_e	jmp	#LR__0324
04f24     B9 01 00 FF 
04f28     1A 14 06 F6 | 	mov	arg02, ##@LR__5615
04f2c     13 13 02 F6 | 	mov	arg01, local01
04f30     AC 25 B2 FD | 	call	#__system___string_cmp
04f34     00 FA 0D F2 | 	cmp	result1, #0 wz
04f38     74 0C 90 AD |  if_e	jmp	#LR__0325
04f3c     B9 01 00 FF 
04f40     1E 14 06 F6 | 	mov	arg02, ##@LR__5616
04f44     13 13 02 F6 | 	mov	arg01, local01
04f48     94 25 B2 FD | 	call	#__system___string_cmp
04f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f50     64 0C 90 AD |  if_e	jmp	#LR__0326
04f54     B9 01 00 FF 
04f58     21 14 06 F6 | 	mov	arg02, ##@LR__5617
04f5c     13 13 02 F6 | 	mov	arg01, local01
04f60     7C 25 B2 FD | 	call	#__system___string_cmp
04f64     00 FA 0D F2 | 	cmp	result1, #0 wz
04f68     54 0C 90 AD |  if_e	jmp	#LR__0327
04f6c     B9 01 00 FF 
04f70     2C 14 06 F6 | 	mov	arg02, ##@LR__5618
04f74     13 13 02 F6 | 	mov	arg01, local01
04f78     64 25 B2 FD | 	call	#__system___string_cmp
04f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f80     44 0C 90 AD |  if_e	jmp	#LR__0328
04f84     B9 01 00 FF 
04f88     30 14 06 F6 | 	mov	arg02, ##@LR__5619
04f8c     13 13 02 F6 | 	mov	arg01, local01
04f90     4C 25 B2 FD | 	call	#__system___string_cmp
04f94     00 FA 0D F2 | 	cmp	result1, #0 wz
04f98     34 0C 90 AD |  if_e	jmp	#LR__0329
04f9c     B9 01 00 FF 
04fa0     3A 14 06 F6 | 	mov	arg02, ##@LR__5620
04fa4     13 13 02 F6 | 	mov	arg01, local01
04fa8     34 25 B2 FD | 	call	#__system___string_cmp
04fac     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb0     24 0C 90 AD |  if_e	jmp	#LR__0330
04fb4     B9 01 00 FF 
04fb8     3E 14 06 F6 | 	mov	arg02, ##@LR__5621
04fbc     13 13 02 F6 | 	mov	arg01, local01
04fc0     1C 25 B2 FD | 	call	#__system___string_cmp
04fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc8     14 0C 90 AD |  if_e	jmp	#LR__0331
04fcc     B9 01 00 FF 
04fd0     48 14 06 F6 | 	mov	arg02, ##@LR__5622
04fd4     13 13 02 F6 | 	mov	arg01, local01
04fd8     04 25 B2 FD | 	call	#__system___string_cmp
04fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe0     04 0C 90 AD |  if_e	jmp	#LR__0332
04fe4     B9 01 00 FF 
04fe8     4C 14 06 F6 | 	mov	arg02, ##@LR__5623
04fec     13 13 02 F6 | 	mov	arg01, local01
04ff0     EC 24 B2 FD | 	call	#__system___string_cmp
04ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff8     F4 0B 90 AD |  if_e	jmp	#LR__0333
04ffc     B9 01 00 FF 
05000     57 14 06 F6 | 	mov	arg02, ##@LR__5624
05004     13 13 02 F6 | 	mov	arg01, local01
05008     D4 24 B2 FD | 	call	#__system___string_cmp
0500c     00 FA 0D F2 | 	cmp	result1, #0 wz
05010     E4 0B 90 AD |  if_e	jmp	#LR__0334
05014     B9 01 00 FF 
05018     5B 14 06 F6 | 	mov	arg02, ##@LR__5625
0501c     13 13 02 F6 | 	mov	arg01, local01
05020     BC 24 B2 FD | 	call	#__system___string_cmp
05024     00 FA 0D F2 | 	cmp	result1, #0 wz
05028     D4 0B 90 AD |  if_e	jmp	#LR__0335
0502c     B9 01 00 FF 
05030     62 14 06 F6 | 	mov	arg02, ##@LR__5626
05034     13 13 02 F6 | 	mov	arg01, local01
05038     A4 24 B2 FD | 	call	#__system___string_cmp
0503c     00 FA 0D F2 | 	cmp	result1, #0 wz
05040     C4 0B 90 AD |  if_e	jmp	#LR__0336
05044     B9 01 00 FF 
05048     66 14 06 F6 | 	mov	arg02, ##@LR__5627
0504c     13 13 02 F6 | 	mov	arg01, local01
05050     8C 24 B2 FD | 	call	#__system___string_cmp
05054     00 FA 0D F2 | 	cmp	result1, #0 wz
05058     B4 0B 90 AD |  if_e	jmp	#LR__0337
0505c     B9 01 00 FF 
05060     6C 14 06 F6 | 	mov	arg02, ##@LR__5628
05064     13 13 02 F6 | 	mov	arg01, local01
05068     74 24 B2 FD | 	call	#__system___string_cmp
0506c     00 FA 0D F2 | 	cmp	result1, #0 wz
05070     A4 0B 90 AD |  if_e	jmp	#LR__0338
05074     B9 01 00 FF 
05078     72 14 06 F6 | 	mov	arg02, ##@LR__5629
0507c     13 13 02 F6 | 	mov	arg01, local01
05080     5C 24 B2 FD | 	call	#__system___string_cmp
05084     00 FA 0D F2 | 	cmp	result1, #0 wz
05088     94 0B 90 AD |  if_e	jmp	#LR__0339
0508c     B9 01 00 FF 
05090     76 14 06 F6 | 	mov	arg02, ##@LR__5630
05094     13 13 02 F6 | 	mov	arg01, local01
05098     44 24 B2 FD | 	call	#__system___string_cmp
0509c     00 FA 0D F2 | 	cmp	result1, #0 wz
050a0     84 0B 90 AD |  if_e	jmp	#LR__0340
050a4     B9 01 00 FF 
050a8     7E 14 06 F6 | 	mov	arg02, ##@LR__5631
050ac     13 13 02 F6 | 	mov	arg01, local01
050b0     2C 24 B2 FD | 	call	#__system___string_cmp
050b4     00 FA 0D F2 | 	cmp	result1, #0 wz
050b8     74 0B 90 AD |  if_e	jmp	#LR__0341
050bc     B9 01 00 FF 
050c0     84 14 06 F6 | 	mov	arg02, ##@LR__5632
050c4     13 13 02 F6 | 	mov	arg01, local01
050c8     14 24 B2 FD | 	call	#__system___string_cmp
050cc     00 FA 0D F2 | 	cmp	result1, #0 wz
050d0     64 0B 90 AD |  if_e	jmp	#LR__0342
050d4     B9 01 00 FF 
050d8     87 14 06 F6 | 	mov	arg02, ##@LR__5633
050dc     13 13 02 F6 | 	mov	arg01, local01
050e0     FC 23 B2 FD | 	call	#__system___string_cmp
050e4     00 FA 0D F2 | 	cmp	result1, #0 wz
050e8     54 0B 90 AD |  if_e	jmp	#LR__0343
050ec     B9 01 00 FF 
050f0     8C 14 06 F6 | 	mov	arg02, ##@LR__5634
050f4     13 13 02 F6 | 	mov	arg01, local01
050f8     E4 23 B2 FD | 	call	#__system___string_cmp
050fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05100     44 0B 90 AD |  if_e	jmp	#LR__0344
05104     B9 01 00 FF 
05108     93 14 06 F6 | 	mov	arg02, ##@LR__5635
0510c     13 13 02 F6 | 	mov	arg01, local01
05110     CC 23 B2 FD | 	call	#__system___string_cmp
05114     00 FA 0D F2 | 	cmp	result1, #0 wz
05118     34 0B 90 AD |  if_e	jmp	#LR__0345
0511c     B9 01 00 FF 
05120     98 14 06 F6 | 	mov	arg02, ##@LR__5636
05124     13 13 02 F6 | 	mov	arg01, local01
05128     B4 23 B2 FD | 	call	#__system___string_cmp
0512c     00 FA 0D F2 | 	cmp	result1, #0 wz
05130     24 0B 90 AD |  if_e	jmp	#LR__0346
05134     B9 01 00 FF 
05138     9F 14 06 F6 | 	mov	arg02, ##@LR__5637
0513c     13 13 02 F6 | 	mov	arg01, local01
05140     9C 23 B2 FD | 	call	#__system___string_cmp
05144     00 FA 0D F2 | 	cmp	result1, #0 wz
05148     14 0B 90 AD |  if_e	jmp	#LR__0347
0514c     B9 01 00 FF 
05150     A6 14 06 F6 | 	mov	arg02, ##@LR__5638
05154     13 13 02 F6 | 	mov	arg01, local01
05158     84 23 B2 FD | 	call	#__system___string_cmp
0515c     00 FA 0D F2 | 	cmp	result1, #0 wz
05160     04 0B 90 AD |  if_e	jmp	#LR__0348
05164     B9 01 00 FF 
05168     B0 14 06 F6 | 	mov	arg02, ##@LR__5639
0516c     13 13 02 F6 | 	mov	arg01, local01
05170     6C 23 B2 FD | 	call	#__system___string_cmp
05174     00 FA 0D F2 | 	cmp	result1, #0 wz
05178     F4 0A 90 AD |  if_e	jmp	#LR__0349
0517c     B9 01 00 FF 
05180     B4 14 06 F6 | 	mov	arg02, ##@LR__5640
05184     13 13 02 F6 | 	mov	arg01, local01
05188     54 23 B2 FD | 	call	#__system___string_cmp
0518c     00 FA 0D F2 | 	cmp	result1, #0 wz
05190     E4 0A 90 AD |  if_e	jmp	#LR__0350
05194     B9 01 00 FF 
05198     B8 14 06 F6 | 	mov	arg02, ##@LR__5641
0519c     13 13 02 F6 | 	mov	arg01, local01
051a0     3C 23 B2 FD | 	call	#__system___string_cmp
051a4     00 FA 0D F2 | 	cmp	result1, #0 wz
051a8     D4 0A 90 AD |  if_e	jmp	#LR__0351
051ac     B9 01 00 FF 
051b0     BF 14 06 F6 | 	mov	arg02, ##@LR__5642
051b4     13 13 02 F6 | 	mov	arg01, local01
051b8     24 23 B2 FD | 	call	#__system___string_cmp
051bc     00 FA 0D F2 | 	cmp	result1, #0 wz
051c0     C4 0A 90 AD |  if_e	jmp	#LR__0352
051c4     B9 01 00 FF 
051c8     C3 14 06 F6 | 	mov	arg02, ##@LR__5643
051cc     13 13 02 F6 | 	mov	arg01, local01
051d0     0C 23 B2 FD | 	call	#__system___string_cmp
051d4     00 FA 0D F2 | 	cmp	result1, #0 wz
051d8     B4 0A 90 AD |  if_e	jmp	#LR__0353
051dc     B9 01 00 FF 
051e0     C7 14 06 F6 | 	mov	arg02, ##@LR__5644
051e4     13 13 02 F6 | 	mov	arg01, local01
051e8     F4 22 B2 FD | 	call	#__system___string_cmp
051ec     00 FA 0D F2 | 	cmp	result1, #0 wz
051f0     A4 0A 90 AD |  if_e	jmp	#LR__0354
051f4     B9 01 00 FF 
051f8     CD 14 06 F6 | 	mov	arg02, ##@LR__5645
051fc     13 13 02 F6 | 	mov	arg01, local01
05200     DC 22 B2 FD | 	call	#__system___string_cmp
05204     00 FA 0D F2 | 	cmp	result1, #0 wz
05208     94 0A 90 AD |  if_e	jmp	#LR__0355
0520c     B9 01 00 FF 
05210     D2 14 06 F6 | 	mov	arg02, ##@LR__5646
05214     13 13 02 F6 | 	mov	arg01, local01
05218     C4 22 B2 FD | 	call	#__system___string_cmp
0521c     00 FA 0D F2 | 	cmp	result1, #0 wz
05220     84 0A 90 AD |  if_e	jmp	#LR__0356
05224     B9 01 00 FF 
05228     D9 14 06 F6 | 	mov	arg02, ##@LR__5647
0522c     13 13 02 F6 | 	mov	arg01, local01
05230     AC 22 B2 FD | 	call	#__system___string_cmp
05234     00 FA 0D F2 | 	cmp	result1, #0 wz
05238     74 0A 90 AD |  if_e	jmp	#LR__0357
0523c     B9 01 00 FF 
05240     DD 14 06 F6 | 	mov	arg02, ##@LR__5648
05244     13 13 02 F6 | 	mov	arg01, local01
05248     94 22 B2 FD | 	call	#__system___string_cmp
0524c     00 FA 0D F2 | 	cmp	result1, #0 wz
05250     64 0A 90 AD |  if_e	jmp	#LR__0358
05254     B9 01 00 FF 
05258     E2 14 06 F6 | 	mov	arg02, ##@LR__5649
0525c     13 13 02 F6 | 	mov	arg01, local01
05260     7C 22 B2 FD | 	call	#__system___string_cmp
05264     00 FA 0D F2 | 	cmp	result1, #0 wz
05268     54 0A 90 AD |  if_e	jmp	#LR__0359
0526c     B9 01 00 FF 
05270     E6 14 06 F6 | 	mov	arg02, ##@LR__5650
05274     13 13 02 F6 | 	mov	arg01, local01
05278     64 22 B2 FD | 	call	#__system___string_cmp
0527c     00 FA 0D F2 | 	cmp	result1, #0 wz
05280     44 0A 90 AD |  if_e	jmp	#LR__0360
05284     B9 01 00 FF 
05288     EC 14 06 F6 | 	mov	arg02, ##@LR__5651
0528c     13 13 02 F6 | 	mov	arg01, local01
05290     4C 22 B2 FD | 	call	#__system___string_cmp
05294     00 FA 0D F2 | 	cmp	result1, #0 wz
05298     34 0A 90 AD |  if_e	jmp	#LR__0361
0529c     B9 01 00 FF 
052a0     EF 14 06 F6 | 	mov	arg02, ##@LR__5652
052a4     13 13 02 F6 | 	mov	arg01, local01
052a8     34 22 B2 FD | 	call	#__system___string_cmp
052ac     00 FA 0D F2 | 	cmp	result1, #0 wz
052b0     24 0A 90 AD |  if_e	jmp	#LR__0362
052b4     B9 01 00 FF 
052b8     F7 14 06 F6 | 	mov	arg02, ##@LR__5653
052bc     13 13 02 F6 | 	mov	arg01, local01
052c0     1C 22 B2 FD | 	call	#__system___string_cmp
052c4     00 FA 0D F2 | 	cmp	result1, #0 wz
052c8     14 0A 90 AD |  if_e	jmp	#LR__0363
052cc     B9 01 00 FF 
052d0     FB 14 06 F6 | 	mov	arg02, ##@LR__5654
052d4     13 13 02 F6 | 	mov	arg01, local01
052d8     04 22 B2 FD | 	call	#__system___string_cmp
052dc     00 FA 0D F2 | 	cmp	result1, #0 wz
052e0     04 0A 90 AD |  if_e	jmp	#LR__0364
052e4     B9 01 00 FF 
052e8     00 15 06 F6 | 	mov	arg02, ##@LR__5655
052ec     13 13 02 F6 | 	mov	arg01, local01
052f0     EC 21 B2 FD | 	call	#__system___string_cmp
052f4     00 FA 0D F2 | 	cmp	result1, #0 wz
052f8     F4 09 90 AD |  if_e	jmp	#LR__0365
052fc     B9 01 00 FF 
05300     04 15 06 F6 | 	mov	arg02, ##@LR__5656
05304     13 13 02 F6 | 	mov	arg01, local01
05308     D4 21 B2 FD | 	call	#__system___string_cmp
0530c     00 FA 0D F2 | 	cmp	result1, #0 wz
05310     E4 09 90 AD |  if_e	jmp	#LR__0366
05314     B9 01 00 FF 
05318     09 15 06 F6 | 	mov	arg02, ##@LR__5657
0531c     13 13 02 F6 | 	mov	arg01, local01
05320     BC 21 B2 FD | 	call	#__system___string_cmp
05324     00 FA 0D F2 | 	cmp	result1, #0 wz
05328     D4 09 90 AD |  if_e	jmp	#LR__0367
0532c     B9 01 00 FF 
05330     0D 15 06 F6 | 	mov	arg02, ##@LR__5658
05334     13 13 02 F6 | 	mov	arg01, local01
05338     A4 21 B2 FD | 	call	#__system___string_cmp
0533c     00 FA 0D F2 | 	cmp	result1, #0 wz
05340     C4 09 90 AD |  if_e	jmp	#LR__0368
05344     B9 01 00 FF 
05348     10 15 06 F6 | 	mov	arg02, ##@LR__5659
0534c     13 13 02 F6 | 	mov	arg01, local01
05350     8C 21 B2 FD | 	call	#__system___string_cmp
05354     00 FA 0D F2 | 	cmp	result1, #0 wz
05358     B4 09 90 AD |  if_e	jmp	#LR__0369
0535c     B9 01 00 FF 
05360     16 15 06 F6 | 	mov	arg02, ##@LR__5660
05364     13 13 02 F6 | 	mov	arg01, local01
05368     74 21 B2 FD | 	call	#__system___string_cmp
0536c     00 FA 0D F2 | 	cmp	result1, #0 wz
05370     A4 09 90 AD |  if_e	jmp	#LR__0370
05374     B9 01 00 FF 
05378     1A 15 06 F6 | 	mov	arg02, ##@LR__5661
0537c     13 13 02 F6 | 	mov	arg01, local01
05380     5C 21 B2 FD | 	call	#__system___string_cmp
05384     00 FA 0D F2 | 	cmp	result1, #0 wz
05388     94 09 90 AD |  if_e	jmp	#LR__0371
0538c     B9 01 00 FF 
05390     1E 15 06 F6 | 	mov	arg02, ##@LR__5662
05394     13 13 02 F6 | 	mov	arg01, local01
05398     44 21 B2 FD | 	call	#__system___string_cmp
0539c     00 FA 0D F2 | 	cmp	result1, #0 wz
053a0     84 09 90 AD |  if_e	jmp	#LR__0372
053a4     B9 01 00 FF 
053a8     24 15 06 F6 | 	mov	arg02, ##@LR__5663
053ac     13 13 02 F6 | 	mov	arg01, local01
053b0     2C 21 B2 FD | 	call	#__system___string_cmp
053b4     00 FA 0D F2 | 	cmp	result1, #0 wz
053b8     74 09 90 AD |  if_e	jmp	#LR__0373
053bc     B9 01 00 FF 
053c0     29 15 06 F6 | 	mov	arg02, ##@LR__5664
053c4     13 13 02 F6 | 	mov	arg01, local01
053c8     14 21 B2 FD | 	call	#__system___string_cmp
053cc     00 FA 0D F2 | 	cmp	result1, #0 wz
053d0     64 09 90 AD |  if_e	jmp	#LR__0374
053d4     B9 01 00 FF 
053d8     2C 15 06 F6 | 	mov	arg02, ##@LR__5665
053dc     13 13 02 F6 | 	mov	arg01, local01
053e0     FC 20 B2 FD | 	call	#__system___string_cmp
053e4     00 FA 0D F2 | 	cmp	result1, #0 wz
053e8     54 09 90 AD |  if_e	jmp	#LR__0375
053ec     B9 01 00 FF 
053f0     2F 15 06 F6 | 	mov	arg02, ##@LR__5666
053f4     13 13 02 F6 | 	mov	arg01, local01
053f8     E4 20 B2 FD | 	call	#__system___string_cmp
053fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05400     44 09 90 AD |  if_e	jmp	#LR__0376
05404     B9 01 00 FF 
05408     33 15 06 F6 | 	mov	arg02, ##@LR__5667
0540c     13 13 02 F6 | 	mov	arg01, local01
05410     CC 20 B2 FD | 	call	#__system___string_cmp
05414     00 FA 0D F2 | 	cmp	result1, #0 wz
05418     34 09 90 AD |  if_e	jmp	#LR__0377
0541c     B9 01 00 FF 
05420     36 15 06 F6 | 	mov	arg02, ##@LR__5668
05424     13 13 02 F6 | 	mov	arg01, local01
05428     B4 20 B2 FD | 	call	#__system___string_cmp
0542c     00 FA 0D F2 | 	cmp	result1, #0 wz
05430     24 09 90 AD |  if_e	jmp	#LR__0378
05434     B9 01 00 FF 
05438     3C 15 06 F6 | 	mov	arg02, ##@LR__5669
0543c     13 13 02 F6 | 	mov	arg01, local01
05440     9C 20 B2 FD | 	call	#__system___string_cmp
05444     00 FA 0D F2 | 	cmp	result1, #0 wz
05448     14 09 90 AD |  if_e	jmp	#LR__0379
0544c     B9 01 00 FF 
05450     41 15 06 F6 | 	mov	arg02, ##@LR__5670
05454     13 13 02 F6 | 	mov	arg01, local01
05458     84 20 B2 FD | 	call	#__system___string_cmp
0545c     00 FA 0D F2 | 	cmp	result1, #0 wz
05460     04 09 90 AD |  if_e	jmp	#LR__0380
05464     B9 01 00 FF 
05468     44 15 06 F6 | 	mov	arg02, ##@LR__5671
0546c     13 13 02 F6 | 	mov	arg01, local01
05470     6C 20 B2 FD | 	call	#__system___string_cmp
05474     00 FA 0D F2 | 	cmp	result1, #0 wz
05478     F4 08 90 AD |  if_e	jmp	#LR__0381
0547c     B9 01 00 FF 
05480     49 15 06 F6 | 	mov	arg02, ##@LR__5672
05484     13 13 02 F6 | 	mov	arg01, local01
05488     54 20 B2 FD | 	call	#__system___string_cmp
0548c     00 FA 0D F2 | 	cmp	result1, #0 wz
05490     E4 08 90 AD |  if_e	jmp	#LR__0382
05494     B9 01 00 FF 
05498     4D 15 06 F6 | 	mov	arg02, ##@LR__5673
0549c     13 13 02 F6 | 	mov	arg01, local01
054a0     3C 20 B2 FD | 	call	#__system___string_cmp
054a4     00 FA 0D F2 | 	cmp	result1, #0 wz
054a8     D4 08 90 AD |  if_e	jmp	#LR__0383
054ac     B9 01 00 FF 
054b0     53 15 06 F6 | 	mov	arg02, ##@LR__5674
054b4     13 13 02 F6 | 	mov	arg01, local01
054b8     24 20 B2 FD | 	call	#__system___string_cmp
054bc     00 FA 0D F2 | 	cmp	result1, #0 wz
054c0     C4 08 90 AD |  if_e	jmp	#LR__0384
054c4     B9 01 00 FF 
054c8     59 15 06 F6 | 	mov	arg02, ##@LR__5675
054cc     13 13 02 F6 | 	mov	arg01, local01
054d0     0C 20 B2 FD | 	call	#__system___string_cmp
054d4     00 FA 0D F2 | 	cmp	result1, #0 wz
054d8     B4 08 90 AD |  if_e	jmp	#LR__0385
054dc     B9 01 00 FF 
054e0     5E 15 06 F6 | 	mov	arg02, ##@LR__5676
054e4     13 13 02 F6 | 	mov	arg01, local01
054e8     F4 1F B2 FD | 	call	#__system___string_cmp
054ec     00 FA 0D F2 | 	cmp	result1, #0 wz
054f0     A4 08 90 AD |  if_e	jmp	#LR__0386
054f4     B9 01 00 FF 
054f8     61 15 06 F6 | 	mov	arg02, ##@LR__5677
054fc     13 13 02 F6 | 	mov	arg01, local01
05500     DC 1F B2 FD | 	call	#__system___string_cmp
05504     00 FA 0D F2 | 	cmp	result1, #0 wz
05508     94 08 90 AD |  if_e	jmp	#LR__0387
0550c     B9 01 00 FF 
05510     67 15 06 F6 | 	mov	arg02, ##@LR__5678
05514     13 13 02 F6 | 	mov	arg01, local01
05518     C4 1F B2 FD | 	call	#__system___string_cmp
0551c     00 FA 0D F2 | 	cmp	result1, #0 wz
05520     84 08 90 AD |  if_e	jmp	#LR__0388
05524     B9 01 00 FF 
05528     6B 15 06 F6 | 	mov	arg02, ##@LR__5679
0552c     13 13 02 F6 | 	mov	arg01, local01
05530     AC 1F B2 FD | 	call	#__system___string_cmp
05534     00 FA 0D F2 | 	cmp	result1, #0 wz
05538     74 08 90 AD |  if_e	jmp	#LR__0389
0553c     B9 01 00 FF 
05540     70 15 06 F6 | 	mov	arg02, ##@LR__5680
05544     13 13 02 F6 | 	mov	arg01, local01
05548     94 1F B2 FD | 	call	#__system___string_cmp
0554c     00 FA 0D F2 | 	cmp	result1, #0 wz
05550     64 08 90 AD |  if_e	jmp	#LR__0390
05554     B9 01 00 FF 
05558     73 15 06 F6 | 	mov	arg02, ##@LR__5681
0555c     13 13 02 F6 | 	mov	arg01, local01
05560     7C 1F B2 FD | 	call	#__system___string_cmp
05564     00 FA 0D F2 | 	cmp	result1, #0 wz
05568     54 08 90 AD |  if_e	jmp	#LR__0391
0556c     B9 01 00 FF 
05570     76 15 06 F6 | 	mov	arg02, ##@LR__5682
05574     13 13 02 F6 | 	mov	arg01, local01
05578     64 1F B2 FD | 	call	#__system___string_cmp
0557c     00 FA 0D F2 | 	cmp	result1, #0 wz
05580     44 08 90 AD |  if_e	jmp	#LR__0392
05584     B9 01 00 FF 
05588     7B 15 06 F6 | 	mov	arg02, ##@LR__5683
0558c     13 13 02 F6 | 	mov	arg01, local01
05590     4C 1F B2 FD | 	call	#__system___string_cmp
05594     00 FA 0D F2 | 	cmp	result1, #0 wz
05598     34 08 90 AD |  if_e	jmp	#LR__0393
0559c     B9 01 00 FF 
055a0     81 15 06 F6 | 	mov	arg02, ##@LR__5684
055a4     13 13 02 F6 | 	mov	arg01, local01
055a8     34 1F B2 FD | 	call	#__system___string_cmp
055ac     00 FA 0D F2 | 	cmp	result1, #0 wz
055b0     24 08 90 AD |  if_e	jmp	#LR__0394
055b4     B9 01 00 FF 
055b8     85 15 06 F6 | 	mov	arg02, ##@LR__5685
055bc     13 13 02 F6 | 	mov	arg01, local01
055c0     1C 1F B2 FD | 	call	#__system___string_cmp
055c4     00 FA 0D F2 | 	cmp	result1, #0 wz
055c8     14 08 90 AD |  if_e	jmp	#LR__0395
055cc     B9 01 00 FF 
055d0     8E 15 06 F6 | 	mov	arg02, ##@LR__5686
055d4     13 13 02 F6 | 	mov	arg01, local01
055d8     04 1F B2 FD | 	call	#__system___string_cmp
055dc     00 FA 0D F2 | 	cmp	result1, #0 wz
055e0     04 08 90 AD |  if_e	jmp	#LR__0396
055e4     B9 01 00 FF 
055e8     94 15 06 F6 | 	mov	arg02, ##@LR__5687
055ec     13 13 02 F6 | 	mov	arg01, local01
055f0     EC 1E B2 FD | 	call	#__system___string_cmp
055f4     00 FA 0D F2 | 	cmp	result1, #0 wz
055f8     F4 07 90 AD |  if_e	jmp	#LR__0397
055fc     B9 01 00 FF 
05600     9A 15 06 F6 | 	mov	arg02, ##@LR__5688
05604     13 13 02 F6 | 	mov	arg01, local01
05608     D4 1E B2 FD | 	call	#__system___string_cmp
0560c     00 FA 0D F2 | 	cmp	result1, #0 wz
05610     E4 07 90 AD |  if_e	jmp	#LR__0398
05614     B9 01 00 FF 
05618     A3 15 06 F6 | 	mov	arg02, ##@LR__5689
0561c     13 13 02 F6 | 	mov	arg01, local01
05620     BC 1E B2 FD | 	call	#__system___string_cmp
05624     00 FA 0D F2 | 	cmp	result1, #0 wz
05628     D4 07 90 AD |  if_e	jmp	#LR__0399
0562c     B9 01 00 FF 
05630     AD 15 06 F6 | 	mov	arg02, ##@LR__5690
05634     13 13 02 F6 | 	mov	arg01, local01
05638     A4 1E B2 FD | 	call	#__system___string_cmp
0563c     00 FA 0D F2 | 	cmp	result1, #0 wz
05640     C4 07 90 AD |  if_e	jmp	#LR__0400
05644     B9 01 00 FF 
05648     B6 15 06 F6 | 	mov	arg02, ##@LR__5691
0564c     13 13 02 F6 | 	mov	arg01, local01
05650     8C 1E B2 FD | 	call	#__system___string_cmp
05654     00 FA 0D F2 | 	cmp	result1, #0 wz
05658     B4 07 90 AD |  if_e	jmp	#LR__0401
0565c     B9 01 00 FF 
05660     BB 15 06 F6 | 	mov	arg02, ##@LR__5692
05664     13 13 02 F6 | 	mov	arg01, local01
05668     74 1E B2 FD | 	call	#__system___string_cmp
0566c     00 FA 0D F2 | 	cmp	result1, #0 wz
05670     A4 07 90 AD |  if_e	jmp	#LR__0402
05674     B9 01 00 FF 
05678     BE 15 06 F6 | 	mov	arg02, ##@LR__5693
0567c     13 13 02 F6 | 	mov	arg01, local01
05680     5C 1E B2 FD | 	call	#__system___string_cmp
05684     00 FA 0D F2 | 	cmp	result1, #0 wz
05688     94 07 90 AD |  if_e	jmp	#LR__0403
0568c     B9 01 00 FF 
05690     C3 15 06 F6 | 	mov	arg02, ##@LR__5694
05694     13 13 02 F6 | 	mov	arg01, local01
05698     44 1E B2 FD | 	call	#__system___string_cmp
0569c     00 FA 0D F2 | 	cmp	result1, #0 wz
056a0     84 07 90 AD |  if_e	jmp	#LR__0404
056a4     B9 01 00 FF 
056a8     C7 15 06 F6 | 	mov	arg02, ##@LR__5695
056ac     13 13 02 F6 | 	mov	arg01, local01
056b0     2C 1E B2 FD | 	call	#__system___string_cmp
056b4     00 FA 0D F2 | 	cmp	result1, #0 wz
056b8     74 07 90 AD |  if_e	jmp	#LR__0405
056bc     B9 01 00 FF 
056c0     CC 15 06 F6 | 	mov	arg02, ##@LR__5696
056c4     13 13 02 F6 | 	mov	arg01, local01
056c8     14 1E B2 FD | 	call	#__system___string_cmp
056cc     00 FA 0D F2 | 	cmp	result1, #0 wz
056d0     64 07 90 AD |  if_e	jmp	#LR__0406
056d4     B9 01 00 FF 
056d8     D0 15 06 F6 | 	mov	arg02, ##@LR__5697
056dc     13 13 02 F6 | 	mov	arg01, local01
056e0     FC 1D B2 FD | 	call	#__system___string_cmp
056e4     00 FA 0D F2 | 	cmp	result1, #0 wz
056e8     54 07 90 AD |  if_e	jmp	#LR__0407
056ec     B9 01 00 FF 
056f0     D9 15 06 F6 | 	mov	arg02, ##@LR__5698
056f4     13 13 02 F6 | 	mov	arg01, local01
056f8     E4 1D B2 FD | 	call	#__system___string_cmp
056fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05700     44 07 90 AD |  if_e	jmp	#LR__0408
05704     B9 01 00 FF 
05708     DE 15 06 F6 | 	mov	arg02, ##@LR__5699
0570c     13 13 02 F6 | 	mov	arg01, local01
05710     CC 1D B2 FD | 	call	#__system___string_cmp
05714     00 FA 0D F2 | 	cmp	result1, #0 wz
05718     34 07 90 AD |  if_e	jmp	#LR__0409
0571c     B9 01 00 FF 
05720     E4 15 06 F6 | 	mov	arg02, ##@LR__5700
05724     13 13 02 F6 | 	mov	arg01, local01
05728     B4 1D B2 FD | 	call	#__system___string_cmp
0572c     00 FA 0D F2 | 	cmp	result1, #0 wz
05730     24 07 90 AD |  if_e	jmp	#LR__0410
05734     B9 01 00 FF 
05738     E6 15 06 F6 | 	mov	arg02, ##@LR__5701
0573c     13 13 02 F6 | 	mov	arg01, local01
05740     9C 1D B2 FD | 	call	#__system___string_cmp
05744     00 FA 0D F2 | 	cmp	result1, #0 wz
05748     14 07 90 AD |  if_e	jmp	#LR__0411
0574c     B9 01 00 FF 
05750     EA 15 06 F6 | 	mov	arg02, ##@LR__5702
05754     13 13 02 F6 | 	mov	arg01, local01
05758     84 1D B2 FD | 	call	#__system___string_cmp
0575c     00 FA 0D F2 | 	cmp	result1, #0 wz
05760     04 07 90 AD |  if_e	jmp	#LR__0412
05764     B9 01 00 FF 
05768     EE 15 06 F6 | 	mov	arg02, ##@LR__5703
0576c     13 13 02 F6 | 	mov	arg01, local01
05770     6C 1D B2 FD | 	call	#__system___string_cmp
05774     00 FA 0D F2 | 	cmp	result1, #0 wz
05778     F4 06 90 AD |  if_e	jmp	#LR__0413
0577c     B9 01 00 FF 
05780     F3 15 06 F6 | 	mov	arg02, ##@LR__5704
05784     13 13 02 F6 | 	mov	arg01, local01
05788     54 1D B2 FD | 	call	#__system___string_cmp
0578c     00 FA 0D F2 | 	cmp	result1, #0 wz
05790     E4 06 90 AD |  if_e	jmp	#LR__0414
05794     B9 01 00 FF 
05798     FB 15 06 F6 | 	mov	arg02, ##@LR__5705
0579c     13 13 02 F6 | 	mov	arg01, local01
057a0     3C 1D B2 FD | 	call	#__system___string_cmp
057a4     00 FA 0D F2 | 	cmp	result1, #0 wz
057a8     D4 06 90 AD |  if_e	jmp	#LR__0415
057ac     B9 01 00 FF 
057b0     FF 15 06 F6 | 	mov	arg02, ##@LR__5706
057b4     13 13 02 F6 | 	mov	arg01, local01
057b8     24 1D B2 FD | 	call	#__system___string_cmp
057bc     00 FA 0D F2 | 	cmp	result1, #0 wz
057c0     C4 06 90 AD |  if_e	jmp	#LR__0416
057c4     BA 01 00 FF 
057c8     01 14 06 F6 | 	mov	arg02, ##@LR__5707
057cc     13 13 02 F6 | 	mov	arg01, local01
057d0     0C 1D B2 FD | 	call	#__system___string_cmp
057d4     00 FA 0D F2 | 	cmp	result1, #0 wz
057d8     B4 06 90 AD |  if_e	jmp	#LR__0417
057dc     BA 01 00 FF 
057e0     09 14 06 F6 | 	mov	arg02, ##@LR__5708
057e4     13 13 02 F6 | 	mov	arg01, local01
057e8     F4 1C B2 FD | 	call	#__system___string_cmp
057ec     00 FA 0D F2 | 	cmp	result1, #0 wz
057f0     A4 06 90 AD |  if_e	jmp	#LR__0418
057f4     BA 01 00 FF 
057f8     18 14 06 F6 | 	mov	arg02, ##@LR__5709
057fc     13 13 02 F6 | 	mov	arg01, local01
05800     DC 1C B2 FD | 	call	#__system___string_cmp
05804     00 FA 0D F2 | 	cmp	result1, #0 wz
05808     94 06 90 AD |  if_e	jmp	#LR__0419
0580c     BA 01 00 FF 
05810     1C 14 06 F6 | 	mov	arg02, ##@LR__5710
05814     13 13 02 F6 | 	mov	arg01, local01
05818     C4 1C B2 FD | 	call	#__system___string_cmp
0581c     00 FA 0D F2 | 	cmp	result1, #0 wz
05820     84 06 90 AD |  if_e	jmp	#LR__0420
05824     BA 01 00 FF 
05828     23 14 06 F6 | 	mov	arg02, ##@LR__5711
0582c     13 13 02 F6 | 	mov	arg01, local01
05830     AC 1C B2 FD | 	call	#__system___string_cmp
05834     00 FA 0D F2 | 	cmp	result1, #0 wz
05838     74 06 90 AD |  if_e	jmp	#LR__0421
0583c     BA 01 00 FF 
05840     27 14 06 F6 | 	mov	arg02, ##@LR__5712
05844     13 13 02 F6 | 	mov	arg01, local01
05848     94 1C B2 FD | 	call	#__system___string_cmp
0584c     00 FA 0D F2 | 	cmp	result1, #0 wz
05850     64 06 90 AD |  if_e	jmp	#LR__0422
05854     BA 01 00 FF 
05858     2C 14 06 F6 | 	mov	arg02, ##@LR__5713
0585c     13 13 02 F6 | 	mov	arg01, local01
05860     7C 1C B2 FD | 	call	#__system___string_cmp
05864     00 FA 0D F2 | 	cmp	result1, #0 wz
05868     54 06 90 AD |  if_e	jmp	#LR__0423
0586c     BA 01 00 FF 
05870     2F 14 06 F6 | 	mov	arg02, ##@LR__5714
05874     13 13 02 F6 | 	mov	arg01, local01
05878     64 1C B2 FD | 	call	#__system___string_cmp
0587c     00 FA 0D F2 | 	cmp	result1, #0 wz
05880     44 06 90 AD |  if_e	jmp	#LR__0424
05884     BA 01 00 FF 
05888     38 14 06 F6 | 	mov	arg02, ##@LR__5715
0588c     13 13 02 F6 | 	mov	arg01, local01
05890     4C 1C B2 FD | 	call	#__system___string_cmp
05894     00 FA 0D F2 | 	cmp	result1, #0 wz
05898     34 06 90 AD |  if_e	jmp	#LR__0425
0589c     BA 01 00 FF 
058a0     3C 14 06 F6 | 	mov	arg02, ##@LR__5716
058a4     13 13 02 F6 | 	mov	arg01, local01
058a8     34 1C B2 FD | 	call	#__system___string_cmp
058ac     00 FA 0D F2 | 	cmp	result1, #0 wz
058b0     24 06 90 AD |  if_e	jmp	#LR__0426
058b4     BA 01 00 FF 
058b8     45 14 06 F6 | 	mov	arg02, ##@LR__5717
058bc     13 13 02 F6 | 	mov	arg01, local01
058c0     1C 1C B2 FD | 	call	#__system___string_cmp
058c4     00 FA 0D F2 | 	cmp	result1, #0 wz
058c8     14 06 90 AD |  if_e	jmp	#LR__0427
058cc     BA 01 00 FF 
058d0     49 14 06 F6 | 	mov	arg02, ##@LR__5718
058d4     13 13 02 F6 | 	mov	arg01, local01
058d8     04 1C B2 FD | 	call	#__system___string_cmp
058dc     00 FA 0D F2 | 	cmp	result1, #0 wz
058e0     04 06 90 AD |  if_e	jmp	#LR__0428
058e4     BA 01 00 FF 
058e8     50 14 06 F6 | 	mov	arg02, ##@LR__5719
058ec     13 13 02 F6 | 	mov	arg01, local01
058f0     EC 1B B2 FD | 	call	#__system___string_cmp
058f4     00 FA 0D F2 | 	cmp	result1, #0 wz
058f8     F4 05 90 AD |  if_e	jmp	#LR__0429
058fc     BA 01 00 FF 
05900     54 14 06 F6 | 	mov	arg02, ##@LR__5720
05904     13 13 02 F6 | 	mov	arg01, local01
05908     D4 1B B2 FD | 	call	#__system___string_cmp
0590c     00 FA 0D F2 | 	cmp	result1, #0 wz
05910     E4 05 90 AD |  if_e	jmp	#LR__0430
05914     BA 01 00 FF 
05918     5B 14 06 F6 | 	mov	arg02, ##@LR__5721
0591c     13 13 02 F6 | 	mov	arg01, local01
05920     BC 1B B2 FD | 	call	#__system___string_cmp
05924     00 FA 0D F2 | 	cmp	result1, #0 wz
05928     D4 05 90 AD |  if_e	jmp	#LR__0431
0592c     BA 01 00 FF 
05930     5F 14 06 F6 | 	mov	arg02, ##@LR__5722
05934     13 13 02 F6 | 	mov	arg01, local01
05938     A4 1B B2 FD | 	call	#__system___string_cmp
0593c     00 FA 0D F2 | 	cmp	result1, #0 wz
05940     C4 05 90 AD |  if_e	jmp	#LR__0432
05944     BA 01 00 FF 
05948     66 14 06 F6 | 	mov	arg02, ##@LR__5723
0594c     13 13 02 F6 | 	mov	arg01, local01
05950     8C 1B B2 FD | 	call	#__system___string_cmp
05954     00 FA 0D F2 | 	cmp	result1, #0 wz
05958     B4 05 90 AD |  if_e	jmp	#LR__0433
0595c     BA 01 00 FF 
05960     6A 14 06 F6 | 	mov	arg02, ##@LR__5724
05964     13 13 02 F6 | 	mov	arg01, local01
05968     74 1B B2 FD | 	call	#__system___string_cmp
0596c     00 FA 0D F2 | 	cmp	result1, #0 wz
05970     A4 05 90 AD |  if_e	jmp	#LR__0434
05974     BA 01 00 FF 
05978     75 14 06 F6 | 	mov	arg02, ##@LR__5725
0597c     13 13 02 F6 | 	mov	arg01, local01
05980     5C 1B B2 FD | 	call	#__system___string_cmp
05984     00 FA 0D F2 | 	cmp	result1, #0 wz
05988     94 05 90 AD |  if_e	jmp	#LR__0435
0598c     BA 01 00 FF 
05990     79 14 06 F6 | 	mov	arg02, ##@LR__5726
05994     13 13 02 F6 | 	mov	arg01, local01
05998     44 1B B2 FD | 	call	#__system___string_cmp
0599c     00 FA 0D F2 | 	cmp	result1, #0 wz
059a0     84 05 90 AD |  if_e	jmp	#LR__0436
059a4     BA 01 00 FF 
059a8     80 14 06 F6 | 	mov	arg02, ##@LR__5727
059ac     13 13 02 F6 | 	mov	arg01, local01
059b0     2C 1B B2 FD | 	call	#__system___string_cmp
059b4     00 FA 0D F2 | 	cmp	result1, #0 wz
059b8     74 05 90 AD |  if_e	jmp	#LR__0437
059bc     BA 01 00 FF 
059c0     84 14 06 F6 | 	mov	arg02, ##@LR__5728
059c4     13 13 02 F6 | 	mov	arg01, local01
059c8     14 1B B2 FD | 	call	#__system___string_cmp
059cc     00 FA 0D F2 | 	cmp	result1, #0 wz
059d0     64 05 90 AD |  if_e	jmp	#LR__0438
059d4     BA 01 00 FF 
059d8     8C 14 06 F6 | 	mov	arg02, ##@LR__5729
059dc     13 13 02 F6 | 	mov	arg01, local01
059e0     FC 1A B2 FD | 	call	#__system___string_cmp
059e4     00 FA 0D F2 | 	cmp	result1, #0 wz
059e8     54 05 90 AD |  if_e	jmp	#LR__0439
059ec     BA 01 00 FF 
059f0     90 14 06 F6 | 	mov	arg02, ##@LR__5730
059f4     13 13 02 F6 | 	mov	arg01, local01
059f8     E4 1A B2 FD | 	call	#__system___string_cmp
059fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05a00     44 05 90 AD |  if_e	jmp	#LR__0440
05a04     BA 01 00 FF 
05a08     97 14 06 F6 | 	mov	arg02, ##@LR__5731
05a0c     13 13 02 F6 | 	mov	arg01, local01
05a10     CC 1A B2 FD | 	call	#__system___string_cmp
05a14     00 FA 0D F2 | 	cmp	result1, #0 wz
05a18     34 05 90 AD |  if_e	jmp	#LR__0441
05a1c     BA 01 00 FF 
05a20     9E 14 06 F6 | 	mov	arg02, ##@LR__5732
05a24     13 13 02 F6 | 	mov	arg01, local01
05a28     B4 1A B2 FD | 	call	#__system___string_cmp
05a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a30     24 05 90 AD |  if_e	jmp	#LR__0442
05a34     BA 01 00 FF 
05a38     A2 14 06 F6 | 	mov	arg02, ##@LR__5733
05a3c     13 13 02 F6 | 	mov	arg01, local01
05a40     9C 1A B2 FD | 	call	#__system___string_cmp
05a44     00 FA 0D F2 | 	cmp	result1, #0 wz
05a48     14 05 90 AD |  if_e	jmp	#LR__0443
05a4c     BA 01 00 FF 
05a50     A8 14 06 F6 | 	mov	arg02, ##@LR__5734
05a54     13 13 02 F6 | 	mov	arg01, local01
05a58     84 1A B2 FD | 	call	#__system___string_cmp
05a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a60     04 05 90 AD |  if_e	jmp	#LR__0444
05a64     BA 01 00 FF 
05a68     AC 14 06 F6 | 	mov	arg02, ##@LR__5735
05a6c     13 13 02 F6 | 	mov	arg01, local01
05a70     6C 1A B2 FD | 	call	#__system___string_cmp
05a74     00 FA 0D F2 | 	cmp	result1, #0 wz
05a78     F4 04 90 AD |  if_e	jmp	#LR__0445
05a7c     BA 01 00 FF 
05a80     B3 14 06 F6 | 	mov	arg02, ##@LR__5736
05a84     13 13 02 F6 | 	mov	arg01, local01
05a88     54 1A B2 FD | 	call	#__system___string_cmp
05a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a90     E4 04 90 AD |  if_e	jmp	#LR__0446
05a94     BA 01 00 FF 
05a98     B8 14 06 F6 | 	mov	arg02, ##@LR__5737
05a9c     13 13 02 F6 | 	mov	arg01, local01
05aa0     3C 1A B2 FD | 	call	#__system___string_cmp
05aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05aa8     D4 04 90 AD |  if_e	jmp	#LR__0447
05aac     BA 01 00 FF 
05ab0     BD 14 06 F6 | 	mov	arg02, ##@LR__5738
05ab4     13 13 02 F6 | 	mov	arg01, local01
05ab8     24 1A B2 FD | 	call	#__system___string_cmp
05abc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ac0     C4 04 90 AD |  if_e	jmp	#LR__0448
05ac4     BA 01 00 FF 
05ac8     C4 14 06 F6 | 	mov	arg02, ##@LR__5739
05acc     13 13 02 F6 | 	mov	arg01, local01
05ad0     0C 1A B2 FD | 	call	#__system___string_cmp
05ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad8     B4 04 90 AD |  if_e	jmp	#LR__0449
05adc     BA 01 00 FF 
05ae0     C7 14 06 F6 | 	mov	arg02, ##@LR__5740
05ae4     13 13 02 F6 | 	mov	arg01, local01
05ae8     F4 19 B2 FD | 	call	#__system___string_cmp
05aec     00 FA 0D F2 | 	cmp	result1, #0 wz
05af0     A4 04 90 AD |  if_e	jmp	#LR__0450
05af4     BA 01 00 FF 
05af8     D1 14 06 F6 | 	mov	arg02, ##@LR__5741
05afc     13 13 02 F6 | 	mov	arg01, local01
05b00     DC 19 B2 FD | 	call	#__system___string_cmp
05b04     00 FA 0D F2 | 	cmp	result1, #0 wz
05b08     94 04 90 AD |  if_e	jmp	#LR__0451
05b0c     BA 01 00 FF 
05b10     D5 14 06 F6 | 	mov	arg02, ##@LR__5742
05b14     13 13 02 F6 | 	mov	arg01, local01
05b18     C4 19 B2 FD | 	call	#__system___string_cmp
05b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b20     84 04 90 AD |  if_e	jmp	#LR__0452
05b24     BA 01 00 FF 
05b28     DD 14 06 F6 | 	mov	arg02, ##@LR__5743
05b2c     13 13 02 F6 | 	mov	arg01, local01
05b30     AC 19 B2 FD | 	call	#__system___string_cmp
05b34     00 FA 0D F2 | 	cmp	result1, #0 wz
05b38     74 04 90 AD |  if_e	jmp	#LR__0453
05b3c     BA 01 00 FF 
05b40     E1 14 06 F6 | 	mov	arg02, ##@LR__5744
05b44     13 13 02 F6 | 	mov	arg01, local01
05b48     94 19 B2 FD | 	call	#__system___string_cmp
05b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b50     64 04 90 AD |  if_e	jmp	#LR__0454
05b54     BA 01 00 FF 
05b58     E7 14 06 F6 | 	mov	arg02, ##@LR__5745
05b5c     13 13 02 F6 | 	mov	arg01, local01
05b60     7C 19 B2 FD | 	call	#__system___string_cmp
05b64     00 FA 0D F2 | 	cmp	result1, #0 wz
05b68     54 04 90 AD |  if_e	jmp	#LR__0455
05b6c     BA 01 00 FF 
05b70     ED 14 06 F6 | 	mov	arg02, ##@LR__5746
05b74     13 13 02 F6 | 	mov	arg01, local01
05b78     64 19 B2 FD | 	call	#__system___string_cmp
05b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b80     44 04 90 AD |  if_e	jmp	#LR__0456
05b84     48 04 90 FD | 	jmp	#LR__0457
05b88                 | LR__0320
05b88     5C FA 05 F6 | 	mov	result1, #92
05b8c     44 04 90 FD | 	jmp	#LR__0458
05b90                 | LR__0321
05b90     5C FA 05 F6 | 	mov	result1, #92
05b94     3C 04 90 FD | 	jmp	#LR__0458
05b98                 | LR__0322
05b98     B9 FA 05 F6 | 	mov	result1, #185
05b9c     34 04 90 FD | 	jmp	#LR__0458
05ba0                 | LR__0323
05ba0     47 FA 05 F6 | 	mov	result1, #71
05ba4     2C 04 90 FD | 	jmp	#LR__0458
05ba8                 | LR__0324
05ba8     59 FA 05 F6 | 	mov	result1, #89
05bac     24 04 90 FD | 	jmp	#LR__0458
05bb0                 | LR__0325
05bb0     59 FA 05 F6 | 	mov	result1, #89
05bb4     1C 04 90 FD | 	jmp	#LR__0458
05bb8                 | LR__0326
05bb8     C3 FA 05 F6 | 	mov	result1, #195
05bbc     14 04 90 FD | 	jmp	#LR__0458
05bc0                 | LR__0327
05bc0     AE FA 05 F6 | 	mov	result1, #174
05bc4     0C 04 90 FD | 	jmp	#LR__0458
05bc8                 | LR__0328
05bc8     AE FA 05 F6 | 	mov	result1, #174
05bcc     04 04 90 FD | 	jmp	#LR__0458
05bd0                 | LR__0329
05bd0     B1 FA 05 F6 | 	mov	result1, #177
05bd4     FC 03 90 FD | 	jmp	#LR__0458
05bd8                 | LR__0330
05bd8     B1 FA 05 F6 | 	mov	result1, #177
05bdc     F4 03 90 FD | 	jmp	#LR__0458
05be0                 | LR__0331
05be0     AF FA 05 F6 | 	mov	result1, #175
05be4     EC 03 90 FD | 	jmp	#LR__0458
05be8                 | LR__0332
05be8     AF FA 05 F6 | 	mov	result1, #175
05bec     E4 03 90 FD | 	jmp	#LR__0458
05bf0                 | LR__0333
05bf0     B0 FA 05 F6 | 	mov	result1, #176
05bf4     DC 03 90 FD | 	jmp	#LR__0458
05bf8                 | LR__0334
05bf8     B0 FA 05 F6 | 	mov	result1, #176
05bfc     D4 03 90 FD | 	jmp	#LR__0458
05c00                 | LR__0335
05c00     45 FA 05 F6 | 	mov	result1, #69
05c04     CC 03 90 FD | 	jmp	#LR__0458
05c08                 | LR__0336
05c08     45 FA 05 F6 | 	mov	result1, #69
05c0c     C4 03 90 FD | 	jmp	#LR__0458
05c10                 | LR__0337
05c10     69 FA 05 F6 | 	mov	result1, #105
05c14     BC 03 90 FD | 	jmp	#LR__0458
05c18                 | LR__0338
05c18     B4 FA 05 F6 | 	mov	result1, #180
05c1c     B4 03 90 FD | 	jmp	#LR__0458
05c20                 | LR__0339
05c20     40 FA 05 F6 | 	mov	result1, #64
05c24     AC 03 90 FD | 	jmp	#LR__0458
05c28                 | LR__0340
05c28     CF FA 05 F6 | 	mov	result1, #207
05c2c     A4 03 90 FD | 	jmp	#LR__0458
05c30                 | LR__0341
05c30     49 FA 05 F6 | 	mov	result1, #73
05c34     9C 03 90 FD | 	jmp	#LR__0458
05c38                 | LR__0342
05c38     49 FA 05 F6 | 	mov	result1, #73
05c3c     94 03 90 FD | 	jmp	#LR__0458
05c40                 | LR__0343
05c40     C4 FA 05 F6 | 	mov	result1, #196
05c44     8C 03 90 FD | 	jmp	#LR__0458
05c48                 | LR__0344
05c48     68 FA 05 F6 | 	mov	result1, #104
05c4c     84 03 90 FD | 	jmp	#LR__0458
05c50                 | LR__0345
05c50     B7 FA 05 F6 | 	mov	result1, #183
05c54     7C 03 90 FD | 	jmp	#LR__0458
05c58                 | LR__0346
05c58     73 FA 05 F6 | 	mov	result1, #115
05c5c     74 03 90 FD | 	jmp	#LR__0458
05c60                 | LR__0347
05c60     74 FA 05 F6 | 	mov	result1, #116
05c64     6C 03 90 FD | 	jmp	#LR__0458
05c68                 | LR__0348
05c68     6C FA 05 F6 | 	mov	result1, #108
05c6c     64 03 90 FD | 	jmp	#LR__0458
05c70                 | LR__0349
05c70     6C FA 05 F6 | 	mov	result1, #108
05c74     5C 03 90 FD | 	jmp	#LR__0458
05c78                 | LR__0350
05c78     89 FA 05 F6 | 	mov	result1, #137
05c7c     54 03 90 FD | 	jmp	#LR__0458
05c80                 | LR__0351
05c80     C2 FA 05 F6 | 	mov	result1, #194
05c84     4C 03 90 FD | 	jmp	#LR__0458
05c88                 | LR__0352
05c88     72 FA 05 F6 | 	mov	result1, #114
05c8c     44 03 90 FD | 	jmp	#LR__0458
05c90                 | LR__0353
05c90     5D FA 05 F6 | 	mov	result1, #93
05c94     3C 03 90 FD | 	jmp	#LR__0458
05c98                 | LR__0354
05c98     96 FA 05 F6 | 	mov	result1, #150
05c9c     34 03 90 FD | 	jmp	#LR__0458
05ca0                 | LR__0355
05ca0     43 FA 05 F6 | 	mov	result1, #67
05ca4     2C 03 90 FD | 	jmp	#LR__0458
05ca8                 | LR__0356
05ca8     43 FA 05 F6 | 	mov	result1, #67
05cac     24 03 90 FD | 	jmp	#LR__0458
05cb0                 | LR__0357
05cb0     43 FA 05 F6 | 	mov	result1, #67
05cb4     1C 03 90 FD | 	jmp	#LR__0458
05cb8                 | LR__0358
05cb8     5A FA 05 F6 | 	mov	result1, #90
05cbc     14 03 90 FD | 	jmp	#LR__0458
05cc0                 | LR__0359
05cc0     AB FA 05 F6 | 	mov	result1, #171
05cc4     0C 03 90 FD | 	jmp	#LR__0458
05cc8                 | LR__0360
05cc8     BD FA 05 F6 | 	mov	result1, #189
05ccc     04 03 90 FD | 	jmp	#LR__0458
05cd0                 | LR__0361
05cd0     BD FA 05 F6 | 	mov	result1, #189
05cd4     FC 02 90 FD | 	jmp	#LR__0458
05cd8                 | LR__0362
05cd8     46 FA 05 F6 | 	mov	result1, #70
05cdc     F4 02 90 FD | 	jmp	#LR__0458
05ce0                 | LR__0363
05ce0     46 FA 05 F6 | 	mov	result1, #70
05ce4     EC 02 90 FD | 	jmp	#LR__0458
05ce8                 | LR__0364
05ce8     71 FA 05 F6 | 	mov	result1, #113
05cec     E4 02 90 FD | 	jmp	#LR__0458
05cf0                 | LR__0365
05cf0     71 FA 05 F6 | 	mov	result1, #113
05cf4     DC 02 90 FD | 	jmp	#LR__0458
05cf8                 | LR__0366
05cf8     60 FA 05 F6 | 	mov	result1, #96
05cfc     D4 02 90 FD | 	jmp	#LR__0458
05d00                 | LR__0367
05d00     4A FA 05 F6 | 	mov	result1, #74
05d04     CC 02 90 FD | 	jmp	#LR__0458
05d08                 | LR__0368
05d08     4A FA 05 F6 | 	mov	result1, #74
05d0c     C4 02 90 FD | 	jmp	#LR__0458
05d10                 | LR__0369
05d10     48 FA 05 F6 | 	mov	result1, #72
05d14     BC 02 90 FD | 	jmp	#LR__0458
05d18                 | LR__0370
05d18     48 FA 05 F6 | 	mov	result1, #72
05d1c     B4 02 90 FD | 	jmp	#LR__0458
05d20                 | LR__0371
05d20     BB FA 05 F6 | 	mov	result1, #187
05d24     AC 02 90 FD | 	jmp	#LR__0458
05d28                 | LR__0372
05d28     A9 FA 05 F6 | 	mov	result1, #169
05d2c     A4 02 90 FD | 	jmp	#LR__0458
05d30                 | LR__0373
05d30     4E FA 05 F6 | 	mov	result1, #78
05d34     9C 02 90 FD | 	jmp	#LR__0458
05d38                 | LR__0374
05d38     4E FA 05 F6 | 	mov	result1, #78
05d3c     94 02 90 FD | 	jmp	#LR__0458
05d40                 | LR__0375
05d40     58 FA 05 F6 | 	mov	result1, #88
05d44     8C 02 90 FD | 	jmp	#LR__0458
05d48                 | LR__0376
05d48     5F FA 05 F6 | 	mov	result1, #95
05d4c     84 02 90 FD | 	jmp	#LR__0458
05d50                 | LR__0377
05d50     5F FA 05 F6 | 	mov	result1, #95
05d54     7C 02 90 FD | 	jmp	#LR__0458
05d58                 | LR__0378
05d58     B5 FA 05 F6 | 	mov	result1, #181
05d5c     74 02 90 FD | 	jmp	#LR__0458
05d60                 | LR__0379
05d60     4C FA 05 F6 | 	mov	result1, #76
05d64     6C 02 90 FD | 	jmp	#LR__0458
05d68                 | LR__0380
05d68     4C FA 05 F6 | 	mov	result1, #76
05d6c     64 02 90 FD | 	jmp	#LR__0458
05d70                 | LR__0381
05d70     52 FA 05 F6 | 	mov	result1, #82
05d74     5C 02 90 FD | 	jmp	#LR__0458
05d78                 | LR__0382
05d78     52 FA 05 F6 | 	mov	result1, #82
05d7c     54 02 90 FD | 	jmp	#LR__0458
05d80                 | LR__0383
05d80     97 FA 05 F6 | 	mov	result1, #151
05d84     4C 02 90 FD | 	jmp	#LR__0458
05d88                 | LR__0384
05d88     C6 FA 05 F6 | 	mov	result1, #198
05d8c     44 02 90 FD | 	jmp	#LR__0458
05d90                 | LR__0385
05d90     61 FA 05 F6 | 	mov	result1, #97
05d94     3C 02 90 FD | 	jmp	#LR__0458
05d98                 | LR__0386
05d98     61 FA 05 F6 | 	mov	result1, #97
05d9c     34 02 90 FD | 	jmp	#LR__0458
05da0                 | LR__0387
05da0     63 FA 05 F6 | 	mov	result1, #99
05da4     2C 02 90 FD | 	jmp	#LR__0458
05da8                 | LR__0388
05da8     41 FA 05 F6 | 	mov	result1, #65
05dac     24 02 90 FD | 	jmp	#LR__0458
05db0                 | LR__0389
05db0     4B FA 05 F6 | 	mov	result1, #75
05db4     1C 02 90 FD | 	jmp	#LR__0458
05db8                 | LR__0390
05db8     4B FA 05 F6 | 	mov	result1, #75
05dbc     14 02 90 FD | 	jmp	#LR__0458
05dc0                 | LR__0391
05dc0     C1 FA 05 F6 | 	mov	result1, #193
05dc4     0C 02 90 FD | 	jmp	#LR__0458
05dc8                 | LR__0392
05dc8     B3 FA 05 F6 | 	mov	result1, #179
05dcc     04 02 90 FD | 	jmp	#LR__0458
05dd0                 | LR__0393
05dd0     5E FA 05 F6 | 	mov	result1, #94
05dd4     FC 01 90 FD | 	jmp	#LR__0458
05dd8                 | LR__0394
05dd8     5E FA 05 F6 | 	mov	result1, #94
05ddc     F4 01 90 FD | 	jmp	#LR__0458
05de0                 | LR__0395
05de0     7C FA 05 F6 | 	mov	result1, #124
05de4     EC 01 90 FD | 	jmp	#LR__0458
05de8                 | LR__0396
05de8     7E FA 05 F6 | 	mov	result1, #126
05dec     E4 01 90 FD | 	jmp	#LR__0458
05df0                 | LR__0397
05df0     7D FA 05 F6 | 	mov	result1, #125
05df4     DC 01 90 FD | 	jmp	#LR__0458
05df8                 | LR__0398
05df8     7F FA 05 F6 | 	mov	result1, #127
05dfc     D4 01 90 FD | 	jmp	#LR__0458
05e00                 | LR__0399
05e00     80 FA 05 F6 | 	mov	result1, #128
05e04     CC 01 90 FD | 	jmp	#LR__0458
05e08                 | LR__0400
05e08     55 FA 05 F6 | 	mov	result1, #85
05e0c     C4 01 90 FD | 	jmp	#LR__0458
05e10                 | LR__0401
05e10     75 FA 05 F6 | 	mov	result1, #117
05e14     BC 01 90 FD | 	jmp	#LR__0458
05e18                 | LR__0402
05e18     75 FA 05 F6 | 	mov	result1, #117
05e1c     B4 01 90 FD | 	jmp	#LR__0458
05e20                 | LR__0403
05e20     42 FA 05 F6 | 	mov	result1, #66
05e24     AC 01 90 FD | 	jmp	#LR__0458
05e28                 | LR__0404
05e28     42 FA 05 F6 | 	mov	result1, #66
05e2c     A4 01 90 FD | 	jmp	#LR__0458
05e30                 | LR__0405
05e30     95 FA 05 F6 | 	mov	result1, #149
05e34     9C 01 90 FD | 	jmp	#LR__0458
05e38                 | LR__0406
05e38     AC FA 05 F6 | 	mov	result1, #172
05e3c     94 01 90 FD | 	jmp	#LR__0458
05e40                 | LR__0407
05e40     81 FA 05 F6 | 	mov	result1, #129
05e44     8C 01 90 FD | 	jmp	#LR__0458
05e48                 | LR__0408
05e48     81 FA 05 F6 | 	mov	result1, #129
05e4c     84 01 90 FD | 	jmp	#LR__0458
05e50                 | LR__0409
05e50     44 FA 05 F6 | 	mov	result1, #68
05e54     7C 01 90 FD | 	jmp	#LR__0458
05e58                 | LR__0410
05e58     44 FA 05 F6 | 	mov	result1, #68
05e5c     74 01 90 FD | 	jmp	#LR__0458
05e60                 | LR__0411
05e60     BC FA 05 F6 | 	mov	result1, #188
05e64     6C 01 90 FD | 	jmp	#LR__0458
05e68                 | LR__0412
05e68     88 FA 05 F6 | 	mov	result1, #136
05e6c     64 01 90 FD | 	jmp	#LR__0458
05e70                 | LR__0413
05e70     B6 FA 05 F6 | 	mov	result1, #182
05e74     5C 01 90 FD | 	jmp	#LR__0458
05e78                 | LR__0414
05e78     92 FA 05 F6 | 	mov	result1, #146
05e7c     54 01 90 FD | 	jmp	#LR__0458
05e80                 | LR__0415
05e80     BE FA 05 F6 | 	mov	result1, #190
05e84     4C 01 90 FD | 	jmp	#LR__0458
05e88                 | LR__0416
05e88     BE FA 05 F6 | 	mov	result1, #190
05e8c     44 01 90 FD | 	jmp	#LR__0458
05e90                 | LR__0417
05e90     C7 FA 05 F6 | 	mov	result1, #199
05e94     3C 01 90 FD | 	jmp	#LR__0458
05e98                 | LR__0418
05e98     D4 FA 05 F6 | 	mov	result1, #212
05e9c     34 01 90 FD | 	jmp	#LR__0458
05ea0                 | LR__0419
05ea0     D4 FA 05 F6 | 	mov	result1, #212
05ea4     2C 01 90 FD | 	jmp	#LR__0458
05ea8                 | LR__0420
05ea8     AA FA 05 F6 | 	mov	result1, #170
05eac     24 01 90 FD | 	jmp	#LR__0458
05eb0                 | LR__0421
05eb0     4D FA 05 F6 | 	mov	result1, #77
05eb4     1C 01 90 FD | 	jmp	#LR__0458
05eb8                 | LR__0422
05eb8     51 FA 05 F6 | 	mov	result1, #81
05ebc     14 01 90 FD | 	jmp	#LR__0458
05ec0                 | LR__0423
05ec0     51 FA 05 F6 | 	mov	result1, #81
05ec4     0C 01 90 FD | 	jmp	#LR__0458
05ec8                 | LR__0424
05ec8     D2 FA 05 F6 | 	mov	result1, #210
05ecc     04 01 90 FD | 	jmp	#LR__0458
05ed0                 | LR__0425
05ed0     D2 FA 05 F6 | 	mov	result1, #210
05ed4     FC 00 90 FD | 	jmp	#LR__0458
05ed8                 | LR__0426
05ed8     8E FA 05 F6 | 	mov	result1, #142
05edc     F4 00 90 FD | 	jmp	#LR__0458
05ee0                 | LR__0427
05ee0     8E FA 05 F6 | 	mov	result1, #142
05ee4     EC 00 90 FD | 	jmp	#LR__0458
05ee8                 | LR__0428
05ee8     90 FA 05 F6 | 	mov	result1, #144
05eec     E4 00 90 FD | 	jmp	#LR__0458
05ef0                 | LR__0429
05ef0     90 FA 05 F6 | 	mov	result1, #144
05ef4     DC 00 90 FD | 	jmp	#LR__0458
05ef8                 | LR__0430
05ef8     8D FA 05 F6 | 	mov	result1, #141
05efc     D4 00 90 FD | 	jmp	#LR__0458
05f00                 | LR__0431
05f00     8D FA 05 F6 | 	mov	result1, #141
05f04     CC 00 90 FD | 	jmp	#LR__0458
05f08                 | LR__0432
05f08     8C FA 05 F6 | 	mov	result1, #140
05f0c     C4 00 90 FD | 	jmp	#LR__0458
05f10                 | LR__0433
05f10     8C FA 05 F6 | 	mov	result1, #140
05f14     BC 00 90 FD | 	jmp	#LR__0458
05f18                 | LR__0434
05f18     91 FA 05 F6 | 	mov	result1, #145
05f1c     B4 00 90 FD | 	jmp	#LR__0458
05f20                 | LR__0435
05f20     91 FA 05 F6 | 	mov	result1, #145
05f24     AC 00 90 FD | 	jmp	#LR__0458
05f28                 | LR__0436
05f28     8B FA 05 F6 | 	mov	result1, #139
05f2c     A4 00 90 FD | 	jmp	#LR__0458
05f30                 | LR__0437
05f30     8B FA 05 F6 | 	mov	result1, #139
05f34     9C 00 90 FD | 	jmp	#LR__0458
05f38                 | LR__0438
05f38     8F FA 05 F6 | 	mov	result1, #143
05f3c     94 00 90 FD | 	jmp	#LR__0458
05f40                 | LR__0439
05f40     8F FA 05 F6 | 	mov	result1, #143
05f44     8C 00 90 FD | 	jmp	#LR__0458
05f48                 | LR__0440
05f48     8F FA 05 F6 | 	mov	result1, #143
05f4c     84 00 90 FD | 	jmp	#LR__0458
05f50                 | LR__0441
05f50     B2 FA 05 F6 | 	mov	result1, #178
05f54     7C 00 90 FD | 	jmp	#LR__0458
05f58                 | LR__0442
05f58     B2 FA 05 F6 | 	mov	result1, #178
05f5c     74 00 90 FD | 	jmp	#LR__0458
05f60                 | LR__0443
05f60     75 FA 05 F6 | 	mov	result1, #117
05f64     6C 00 90 FD | 	jmp	#LR__0458
05f68                 | LR__0444
05f68     75 FA 05 F6 | 	mov	result1, #117
05f6c     64 00 90 FD | 	jmp	#LR__0458
05f70                 | LR__0445
05f70     6D FA 05 F6 | 	mov	result1, #109
05f74     5C 00 90 FD | 	jmp	#LR__0458
05f78                 | LR__0446
05f78     6D FA 05 F6 | 	mov	result1, #109
05f7c     54 00 90 FD | 	jmp	#LR__0458
05f80                 | LR__0447
05f80     5B FA 05 F6 | 	mov	result1, #91
05f84     4C 00 90 FD | 	jmp	#LR__0458
05f88                 | LR__0448
05f88     56 FA 05 F6 | 	mov	result1, #86
05f8c     44 00 90 FD | 	jmp	#LR__0458
05f90                 | LR__0449
05f90     56 FA 05 F6 | 	mov	result1, #86
05f94     3C 00 90 FD | 	jmp	#LR__0458
05f98                 | LR__0450
05f98     70 FA 05 F6 | 	mov	result1, #112
05f9c     34 00 90 FD | 	jmp	#LR__0458
05fa0                 | LR__0451
05fa0     70 FA 05 F6 | 	mov	result1, #112
05fa4     2C 00 90 FD | 	jmp	#LR__0458
05fa8                 | LR__0452
05fa8     57 FA 05 F6 | 	mov	result1, #87
05fac     24 00 90 FD | 	jmp	#LR__0458
05fb0                 | LR__0453
05fb0     57 FA 05 F6 | 	mov	result1, #87
05fb4     1C 00 90 FD | 	jmp	#LR__0458
05fb8                 | LR__0454
05fb8     79 FA 05 F6 | 	mov	result1, #121
05fbc     14 00 90 FD | 	jmp	#LR__0458
05fc0                 | LR__0455
05fc0     77 FA 05 F6 | 	mov	result1, #119
05fc4     0C 00 90 FD | 	jmp	#LR__0458
05fc8                 | LR__0456
05fc8     78 FA 05 F6 | 	mov	result1, #120
05fcc     04 00 90 FD | 	jmp	#LR__0458
05fd0                 | LR__0457
05fd0     00 FA 05 F6 | 	mov	result1, #0
05fd4                 | LR__0458
05fd4     A7 F0 03 F6 | 	mov	ptra, fp
05fd8     B2 00 A0 FD | 	call	#popregs_
05fdc                 | _iscommand_ret
05fdc     2D 00 64 FD | 	ret
05fe0                 | 
05fe0                 | ' 
05fe0                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05fe0                 | ' 
05fe0                 | ' function isfunction(s as string) as ubyte
05fe0                 | _isfunction
05fe0     01 4A 05 F6 | 	mov	COUNT_, #1
05fe4     A8 00 A0 FD | 	call	#pushregs_
05fe8                 | ' 
05fe8                 | ' select case s
05fe8     09 27 02 F6 | 	mov	local01, arg01
05fec     BA 01 00 FF 
05ff0     F3 14 06 F6 | 	mov	arg02, ##@LR__5747
05ff4     13 13 02 F6 | 	mov	arg01, local01
05ff8     E4 14 B2 FD | 	call	#__system___string_cmp
05ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
06000     A4 05 90 AD |  if_e	jmp	#LR__0460
06004     BA 01 00 FF 
06008     F7 14 06 F6 | 	mov	arg02, ##@LR__5748
0600c     13 13 02 F6 | 	mov	arg01, local01
06010     CC 14 B2 FD | 	call	#__system___string_cmp
06014     00 FA 0D F2 | 	cmp	result1, #0 wz
06018     94 05 90 AD |  if_e	jmp	#LR__0461
0601c     BA 01 00 FF 
06020     FC 14 06 F6 | 	mov	arg02, ##@LR__5749
06024     13 13 02 F6 | 	mov	arg01, local01
06028     B4 14 B2 FD | 	call	#__system___string_cmp
0602c     00 FA 0D F2 | 	cmp	result1, #0 wz
06030     84 05 90 AD |  if_e	jmp	#LR__0462
06034     BA 01 00 FF 
06038     00 15 06 F6 | 	mov	arg02, ##@LR__5750
0603c     13 13 02 F6 | 	mov	arg01, local01
06040     9C 14 B2 FD | 	call	#__system___string_cmp
06044     00 FA 0D F2 | 	cmp	result1, #0 wz
06048     74 05 90 AD |  if_e	jmp	#LR__0463
0604c     BA 01 00 FF 
06050     05 15 06 F6 | 	mov	arg02, ##@LR__5751
06054     13 13 02 F6 | 	mov	arg01, local01
06058     84 14 B2 FD | 	call	#__system___string_cmp
0605c     00 FA 0D F2 | 	cmp	result1, #0 wz
06060     64 05 90 AD |  if_e	jmp	#LR__0464
06064     BA 01 00 FF 
06068     09 15 06 F6 | 	mov	arg02, ##@LR__5752
0606c     13 13 02 F6 | 	mov	arg01, local01
06070     6C 14 B2 FD | 	call	#__system___string_cmp
06074     00 FA 0D F2 | 	cmp	result1, #0 wz
06078     54 05 90 AD |  if_e	jmp	#LR__0465
0607c     BA 01 00 FF 
06080     0E 15 06 F6 | 	mov	arg02, ##@LR__5753
06084     13 13 02 F6 | 	mov	arg01, local01
06088     54 14 B2 FD | 	call	#__system___string_cmp
0608c     00 FA 0D F2 | 	cmp	result1, #0 wz
06090     44 05 90 AD |  if_e	jmp	#LR__0466
06094     BA 01 00 FF 
06098     12 15 06 F6 | 	mov	arg02, ##@LR__5754
0609c     13 13 02 F6 | 	mov	arg01, local01
060a0     3C 14 B2 FD | 	call	#__system___string_cmp
060a4     00 FA 0D F2 | 	cmp	result1, #0 wz
060a8     34 05 90 AD |  if_e	jmp	#LR__0467
060ac     BA 01 00 FF 
060b0     17 15 06 F6 | 	mov	arg02, ##@LR__5755
060b4     13 13 02 F6 | 	mov	arg01, local01
060b8     24 14 B2 FD | 	call	#__system___string_cmp
060bc     00 FA 0D F2 | 	cmp	result1, #0 wz
060c0     24 05 90 AD |  if_e	jmp	#LR__0468
060c4     BA 01 00 FF 
060c8     1C 15 06 F6 | 	mov	arg02, ##@LR__5756
060cc     13 13 02 F6 | 	mov	arg01, local01
060d0     0C 14 B2 FD | 	call	#__system___string_cmp
060d4     00 FA 0D F2 | 	cmp	result1, #0 wz
060d8     14 05 90 AD |  if_e	jmp	#LR__0469
060dc     BA 01 00 FF 
060e0     24 15 06 F6 | 	mov	arg02, ##@LR__5757
060e4     13 13 02 F6 | 	mov	arg01, local01
060e8     F4 13 B2 FD | 	call	#__system___string_cmp
060ec     00 FA 0D F2 | 	cmp	result1, #0 wz
060f0     04 05 90 AD |  if_e	jmp	#LR__0470
060f4     BA 01 00 FF 
060f8     28 15 06 F6 | 	mov	arg02, ##@LR__5758
060fc     13 13 02 F6 | 	mov	arg01, local01
06100     DC 13 B2 FD | 	call	#__system___string_cmp
06104     00 FA 0D F2 | 	cmp	result1, #0 wz
06108     F4 04 90 AD |  if_e	jmp	#LR__0471
0610c     BA 01 00 FF 
06110     2E 15 06 F6 | 	mov	arg02, ##@LR__5759
06114     13 13 02 F6 | 	mov	arg01, local01
06118     C4 13 B2 FD | 	call	#__system___string_cmp
0611c     00 FA 0D F2 | 	cmp	result1, #0 wz
06120     E4 04 90 AD |  if_e	jmp	#LR__0472
06124     BA 01 00 FF 
06128     37 15 06 F6 | 	mov	arg02, ##@LR__5760
0612c     13 13 02 F6 | 	mov	arg01, local01
06130     AC 13 B2 FD | 	call	#__system___string_cmp
06134     00 FA 0D F2 | 	cmp	result1, #0 wz
06138     D4 04 90 AD |  if_e	jmp	#LR__0473
0613c     BA 01 00 FF 
06140     3B 15 06 F6 | 	mov	arg02, ##@LR__5761
06144     13 13 02 F6 | 	mov	arg01, local01
06148     94 13 B2 FD | 	call	#__system___string_cmp
0614c     00 FA 0D F2 | 	cmp	result1, #0 wz
06150     C4 04 90 AD |  if_e	jmp	#LR__0474
06154     BA 01 00 FF 
06158     3F 15 06 F6 | 	mov	arg02, ##@LR__5762
0615c     13 13 02 F6 | 	mov	arg01, local01
06160     7C 13 B2 FD | 	call	#__system___string_cmp
06164     00 FA 0D F2 | 	cmp	result1, #0 wz
06168     B4 04 90 AD |  if_e	jmp	#LR__0475
0616c     BA 01 00 FF 
06170     43 15 06 F6 | 	mov	arg02, ##@LR__5763
06174     13 13 02 F6 | 	mov	arg01, local01
06178     64 13 B2 FD | 	call	#__system___string_cmp
0617c     00 FA 0D F2 | 	cmp	result1, #0 wz
06180     A4 04 90 AD |  if_e	jmp	#LR__0476
06184     BA 01 00 FF 
06188     4C 15 06 F6 | 	mov	arg02, ##@LR__5764
0618c     13 13 02 F6 | 	mov	arg01, local01
06190     4C 13 B2 FD | 	call	#__system___string_cmp
06194     00 FA 0D F2 | 	cmp	result1, #0 wz
06198     94 04 90 AD |  if_e	jmp	#LR__0477
0619c     BA 01 00 FF 
061a0     55 15 06 F6 | 	mov	arg02, ##@LR__5765
061a4     13 13 02 F6 | 	mov	arg01, local01
061a8     34 13 B2 FD | 	call	#__system___string_cmp
061ac     00 FA 0D F2 | 	cmp	result1, #0 wz
061b0     84 04 90 AD |  if_e	jmp	#LR__0478
061b4     BA 01 00 FF 
061b8     59 15 06 F6 | 	mov	arg02, ##@LR__5766
061bc     13 13 02 F6 | 	mov	arg01, local01
061c0     1C 13 B2 FD | 	call	#__system___string_cmp
061c4     00 FA 0D F2 | 	cmp	result1, #0 wz
061c8     74 04 90 AD |  if_e	jmp	#LR__0479
061cc     BA 01 00 FF 
061d0     67 15 06 F6 | 	mov	arg02, ##@LR__5767
061d4     13 13 02 F6 | 	mov	arg01, local01
061d8     04 13 B2 FD | 	call	#__system___string_cmp
061dc     00 FA 0D F2 | 	cmp	result1, #0 wz
061e0     64 04 90 AD |  if_e	jmp	#LR__0480
061e4     BA 01 00 FF 
061e8     74 15 06 F6 | 	mov	arg02, ##@LR__5768
061ec     13 13 02 F6 | 	mov	arg01, local01
061f0     EC 12 B2 FD | 	call	#__system___string_cmp
061f4     00 FA 0D F2 | 	cmp	result1, #0 wz
061f8     54 04 90 AD |  if_e	jmp	#LR__0481
061fc     BA 01 00 FF 
06200     7C 15 06 F6 | 	mov	arg02, ##@LR__5769
06204     13 13 02 F6 | 	mov	arg01, local01
06208     D4 12 B2 FD | 	call	#__system___string_cmp
0620c     00 FA 0D F2 | 	cmp	result1, #0 wz
06210     44 04 90 AD |  if_e	jmp	#LR__0482
06214     BA 01 00 FF 
06218     80 15 06 F6 | 	mov	arg02, ##@LR__5770
0621c     13 13 02 F6 | 	mov	arg01, local01
06220     BC 12 B2 FD | 	call	#__system___string_cmp
06224     00 FA 0D F2 | 	cmp	result1, #0 wz
06228     34 04 90 AD |  if_e	jmp	#LR__0483
0622c     BA 01 00 FF 
06230     85 15 06 F6 | 	mov	arg02, ##@LR__5771
06234     13 13 02 F6 | 	mov	arg01, local01
06238     A4 12 B2 FD | 	call	#__system___string_cmp
0623c     00 FA 0D F2 | 	cmp	result1, #0 wz
06240     24 04 90 AD |  if_e	jmp	#LR__0484
06244     BA 01 00 FF 
06248     8C 15 06 F6 | 	mov	arg02, ##@LR__5772
0624c     13 13 02 F6 | 	mov	arg01, local01
06250     8C 12 B2 FD | 	call	#__system___string_cmp
06254     00 FA 0D F2 | 	cmp	result1, #0 wz
06258     14 04 90 AD |  if_e	jmp	#LR__0485
0625c     BA 01 00 FF 
06260     90 15 06 F6 | 	mov	arg02, ##@LR__5773
06264     13 13 02 F6 | 	mov	arg01, local01
06268     74 12 B2 FD | 	call	#__system___string_cmp
0626c     00 FA 0D F2 | 	cmp	result1, #0 wz
06270     04 04 90 AD |  if_e	jmp	#LR__0486
06274     BA 01 00 FF 
06278     96 15 06 F6 | 	mov	arg02, ##@LR__5774
0627c     13 13 02 F6 | 	mov	arg01, local01
06280     5C 12 B2 FD | 	call	#__system___string_cmp
06284     00 FA 0D F2 | 	cmp	result1, #0 wz
06288     F4 03 90 AD |  if_e	jmp	#LR__0487
0628c     BA 01 00 FF 
06290     9A 15 06 F6 | 	mov	arg02, ##@LR__5775
06294     13 13 02 F6 | 	mov	arg01, local01
06298     44 12 B2 FD | 	call	#__system___string_cmp
0629c     00 FA 0D F2 | 	cmp	result1, #0 wz
062a0     E4 03 90 AD |  if_e	jmp	#LR__0488
062a4     BA 01 00 FF 
062a8     9E 15 06 F6 | 	mov	arg02, ##@LR__5776
062ac     13 13 02 F6 | 	mov	arg01, local01
062b0     2C 12 B2 FD | 	call	#__system___string_cmp
062b4     00 FA 0D F2 | 	cmp	result1, #0 wz
062b8     D4 03 90 AD |  if_e	jmp	#LR__0489
062bc     BA 01 00 FF 
062c0     A4 15 06 F6 | 	mov	arg02, ##@LR__5777
062c4     13 13 02 F6 | 	mov	arg01, local01
062c8     14 12 B2 FD | 	call	#__system___string_cmp
062cc     00 FA 0D F2 | 	cmp	result1, #0 wz
062d0     C4 03 90 AD |  if_e	jmp	#LR__0490
062d4     BA 01 00 FF 
062d8     AB 15 06 F6 | 	mov	arg02, ##@LR__5778
062dc     13 13 02 F6 | 	mov	arg01, local01
062e0     FC 11 B2 FD | 	call	#__system___string_cmp
062e4     00 FA 0D F2 | 	cmp	result1, #0 wz
062e8     B4 03 90 AD |  if_e	jmp	#LR__0491
062ec     BA 01 00 FF 
062f0     B1 15 06 F6 | 	mov	arg02, ##@LR__5779
062f4     13 13 02 F6 | 	mov	arg01, local01
062f8     E4 11 B2 FD | 	call	#__system___string_cmp
062fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06300     A4 03 90 AD |  if_e	jmp	#LR__0492
06304     BA 01 00 FF 
06308     B6 15 06 F6 | 	mov	arg02, ##@LR__5780
0630c     13 13 02 F6 | 	mov	arg01, local01
06310     CC 11 B2 FD | 	call	#__system___string_cmp
06314     00 FA 0D F2 | 	cmp	result1, #0 wz
06318     94 03 90 AD |  if_e	jmp	#LR__0493
0631c     BA 01 00 FF 
06320     BD 15 06 F6 | 	mov	arg02, ##@LR__5781
06324     13 13 02 F6 | 	mov	arg01, local01
06328     B4 11 B2 FD | 	call	#__system___string_cmp
0632c     00 FA 0D F2 | 	cmp	result1, #0 wz
06330     84 03 90 AD |  if_e	jmp	#LR__0494
06334     BA 01 00 FF 
06338     C4 15 06 F6 | 	mov	arg02, ##@LR__5782
0633c     13 13 02 F6 | 	mov	arg01, local01
06340     9C 11 B2 FD | 	call	#__system___string_cmp
06344     00 FA 0D F2 | 	cmp	result1, #0 wz
06348     74 03 90 AD |  if_e	jmp	#LR__0495
0634c     BA 01 00 FF 
06350     CB 15 06 F6 | 	mov	arg02, ##@LR__5783
06354     13 13 02 F6 | 	mov	arg01, local01
06358     84 11 B2 FD | 	call	#__system___string_cmp
0635c     00 FA 0D F2 | 	cmp	result1, #0 wz
06360     64 03 90 AD |  if_e	jmp	#LR__0496
06364     BA 01 00 FF 
06368     D2 15 06 F6 | 	mov	arg02, ##@LR__5784
0636c     13 13 02 F6 | 	mov	arg01, local01
06370     6C 11 B2 FD | 	call	#__system___string_cmp
06374     00 FA 0D F2 | 	cmp	result1, #0 wz
06378     54 03 90 AD |  if_e	jmp	#LR__0497
0637c     BA 01 00 FF 
06380     D7 15 06 F6 | 	mov	arg02, ##@LR__5785
06384     13 13 02 F6 | 	mov	arg01, local01
06388     54 11 B2 FD | 	call	#__system___string_cmp
0638c     00 FA 0D F2 | 	cmp	result1, #0 wz
06390     44 03 90 AD |  if_e	jmp	#LR__0498
06394     BA 01 00 FF 
06398     DC 15 06 F6 | 	mov	arg02, ##@LR__5786
0639c     13 13 02 F6 | 	mov	arg01, local01
063a0     3C 11 B2 FD | 	call	#__system___string_cmp
063a4     00 FA 0D F2 | 	cmp	result1, #0 wz
063a8     34 03 90 AD |  if_e	jmp	#LR__0499
063ac     BA 01 00 FF 
063b0     E1 15 06 F6 | 	mov	arg02, ##@LR__5787
063b4     13 13 02 F6 | 	mov	arg01, local01
063b8     24 11 B2 FD | 	call	#__system___string_cmp
063bc     00 FA 0D F2 | 	cmp	result1, #0 wz
063c0     24 03 90 AD |  if_e	jmp	#LR__0500
063c4     BA 01 00 FF 
063c8     E6 15 06 F6 | 	mov	arg02, ##@LR__5788
063cc     13 13 02 F6 | 	mov	arg01, local01
063d0     0C 11 B2 FD | 	call	#__system___string_cmp
063d4     00 FA 0D F2 | 	cmp	result1, #0 wz
063d8     14 03 90 AD |  if_e	jmp	#LR__0501
063dc     BA 01 00 FF 
063e0     EB 15 06 F6 | 	mov	arg02, ##@LR__5789
063e4     13 13 02 F6 | 	mov	arg01, local01
063e8     F4 10 B2 FD | 	call	#__system___string_cmp
063ec     00 FA 0D F2 | 	cmp	result1, #0 wz
063f0     04 03 90 AD |  if_e	jmp	#LR__0502
063f4     BA 01 00 FF 
063f8     F1 15 06 F6 | 	mov	arg02, ##@LR__5790
063fc     13 13 02 F6 | 	mov	arg01, local01
06400     DC 10 B2 FD | 	call	#__system___string_cmp
06404     00 FA 0D F2 | 	cmp	result1, #0 wz
06408     F4 02 90 AD |  if_e	jmp	#LR__0503
0640c     BA 01 00 FF 
06410     F7 15 06 F6 | 	mov	arg02, ##@LR__5791
06414     13 13 02 F6 | 	mov	arg01, local01
06418     C4 10 B2 FD | 	call	#__system___string_cmp
0641c     00 FA 0D F2 | 	cmp	result1, #0 wz
06420     E4 02 90 AD |  if_e	jmp	#LR__0504
06424     BA 01 00 FF 
06428     FD 15 06 F6 | 	mov	arg02, ##@LR__5792
0642c     13 13 02 F6 | 	mov	arg01, local01
06430     AC 10 B2 FD | 	call	#__system___string_cmp
06434     00 FA 0D F2 | 	cmp	result1, #0 wz
06438     D4 02 90 AD |  if_e	jmp	#LR__0505
0643c     BB 01 00 FF 
06440     02 14 06 F6 | 	mov	arg02, ##@LR__5793
06444     13 13 02 F6 | 	mov	arg01, local01
06448     94 10 B2 FD | 	call	#__system___string_cmp
0644c     00 FA 0D F2 | 	cmp	result1, #0 wz
06450     C4 02 90 AD |  if_e	jmp	#LR__0506
06454     BB 01 00 FF 
06458     07 14 06 F6 | 	mov	arg02, ##@LR__5794
0645c     13 13 02 F6 | 	mov	arg01, local01
06460     7C 10 B2 FD | 	call	#__system___string_cmp
06464     00 FA 0D F2 | 	cmp	result1, #0 wz
06468     B4 02 90 AD |  if_e	jmp	#LR__0507
0646c     BB 01 00 FF 
06470     0F 14 06 F6 | 	mov	arg02, ##@LR__5795
06474     13 13 02 F6 | 	mov	arg01, local01
06478     64 10 B2 FD | 	call	#__system___string_cmp
0647c     00 FA 0D F2 | 	cmp	result1, #0 wz
06480     A4 02 90 AD |  if_e	jmp	#LR__0508
06484     BB 01 00 FF 
06488     15 14 06 F6 | 	mov	arg02, ##@LR__5796
0648c     13 13 02 F6 | 	mov	arg01, local01
06490     4C 10 B2 FD | 	call	#__system___string_cmp
06494     00 FA 0D F2 | 	cmp	result1, #0 wz
06498     94 02 90 AD |  if_e	jmp	#LR__0509
0649c     BB 01 00 FF 
064a0     1C 14 06 F6 | 	mov	arg02, ##@LR__5797
064a4     13 13 02 F6 | 	mov	arg01, local01
064a8     34 10 B2 FD | 	call	#__system___string_cmp
064ac     00 FA 0D F2 | 	cmp	result1, #0 wz
064b0     84 02 90 AD |  if_e	jmp	#LR__0510
064b4     BB 01 00 FF 
064b8     22 14 06 F6 | 	mov	arg02, ##@LR__5798
064bc     13 13 02 F6 | 	mov	arg01, local01
064c0     1C 10 B2 FD | 	call	#__system___string_cmp
064c4     00 FA 0D F2 | 	cmp	result1, #0 wz
064c8     74 02 90 AD |  if_e	jmp	#LR__0511
064cc     BB 01 00 FF 
064d0     28 14 06 F6 | 	mov	arg02, ##@LR__5799
064d4     13 13 02 F6 | 	mov	arg01, local01
064d8     04 10 B2 FD | 	call	#__system___string_cmp
064dc     00 FA 0D F2 | 	cmp	result1, #0 wz
064e0     64 02 90 AD |  if_e	jmp	#LR__0512
064e4     BB 01 00 FF 
064e8     2C 14 06 F6 | 	mov	arg02, ##@LR__5800
064ec     13 13 02 F6 | 	mov	arg01, local01
064f0     EC 0F B2 FD | 	call	#__system___string_cmp
064f4     00 FA 0D F2 | 	cmp	result1, #0 wz
064f8     54 02 90 AD |  if_e	jmp	#LR__0513
064fc     BB 01 00 FF 
06500     30 14 06 F6 | 	mov	arg02, ##@LR__5801
06504     13 13 02 F6 | 	mov	arg01, local01
06508     D4 0F B2 FD | 	call	#__system___string_cmp
0650c     00 FA 0D F2 | 	cmp	result1, #0 wz
06510     44 02 90 AD |  if_e	jmp	#LR__0514
06514     BB 01 00 FF 
06518     34 14 06 F6 | 	mov	arg02, ##@LR__5802
0651c     13 13 02 F6 | 	mov	arg01, local01
06520     BC 0F B2 FD | 	call	#__system___string_cmp
06524     00 FA 0D F2 | 	cmp	result1, #0 wz
06528     34 02 90 AD |  if_e	jmp	#LR__0515
0652c     BB 01 00 FF 
06530     3A 14 06 F6 | 	mov	arg02, ##@LR__5803
06534     13 13 02 F6 | 	mov	arg01, local01
06538     A4 0F B2 FD | 	call	#__system___string_cmp
0653c     00 FA 0D F2 | 	cmp	result1, #0 wz
06540     24 02 90 AD |  if_e	jmp	#LR__0516
06544     BB 01 00 FF 
06548     40 14 06 F6 | 	mov	arg02, ##@LR__5804
0654c     13 13 02 F6 | 	mov	arg01, local01
06550     8C 0F B2 FD | 	call	#__system___string_cmp
06554     00 FA 0D F2 | 	cmp	result1, #0 wz
06558     14 02 90 AD |  if_e	jmp	#LR__0517
0655c     BB 01 00 FF 
06560     45 14 06 F6 | 	mov	arg02, ##@LR__5805
06564     13 13 02 F6 | 	mov	arg01, local01
06568     74 0F B2 FD | 	call	#__system___string_cmp
0656c     00 FA 0D F2 | 	cmp	result1, #0 wz
06570     04 02 90 AD |  if_e	jmp	#LR__0518
06574     BB 01 00 FF 
06578     49 14 06 F6 | 	mov	arg02, ##@LR__5806
0657c     13 13 02 F6 | 	mov	arg01, local01
06580     5C 0F B2 FD | 	call	#__system___string_cmp
06584     00 FA 0D F2 | 	cmp	result1, #0 wz
06588     F4 01 90 AD |  if_e	jmp	#LR__0519
0658c     BB 01 00 FF 
06590     4D 14 06 F6 | 	mov	arg02, ##@LR__5807
06594     13 13 02 F6 | 	mov	arg01, local01
06598     44 0F B2 FD | 	call	#__system___string_cmp
0659c     00 FA 0D F2 | 	cmp	result1, #0 wz
065a0     E4 01 90 AD |  if_e	jmp	#LR__0520
065a4     E8 01 90 FD | 	jmp	#LR__0521
065a8                 | LR__0460
065a8     9E FA 05 F6 | 	mov	result1, #158
065ac     E4 01 90 FD | 	jmp	#LR__0522
065b0                 | LR__0461
065b0     85 FA 05 F6 | 	mov	result1, #133
065b4     DC 01 90 FD | 	jmp	#LR__0522
065b8                 | LR__0462
065b8     9B FA 05 F6 | 	mov	result1, #155
065bc     D4 01 90 FD | 	jmp	#LR__0522
065c0                 | LR__0463
065c0     9B FA 05 F6 | 	mov	result1, #155
065c4     CC 01 90 FD | 	jmp	#LR__0522
065c8                 | LR__0464
065c8     A7 FA 05 F6 | 	mov	result1, #167
065cc     C4 01 90 FD | 	jmp	#LR__0522
065d0                 | LR__0465
065d0     84 FA 05 F6 | 	mov	result1, #132
065d4     BC 01 90 FD | 	jmp	#LR__0522
065d8                 | LR__0466
065d8     86 FA 05 F6 | 	mov	result1, #134
065dc     B4 01 90 FD | 	jmp	#LR__0522
065e0                 | LR__0467
065e0     A2 FA 05 F6 | 	mov	result1, #162
065e4     AC 01 90 FD | 	jmp	#LR__0522
065e8                 | LR__0468
065e8     9F FA 05 F6 | 	mov	result1, #159
065ec     A4 01 90 FD | 	jmp	#LR__0522
065f0                 | LR__0469
065f0     C0 FA 05 F6 | 	mov	result1, #192
065f4     9C 01 90 FD | 	jmp	#LR__0522
065f8                 | LR__0470
065f8     82 FA 05 F6 | 	mov	result1, #130
065fc     94 01 90 FD | 	jmp	#LR__0522
06600                 | LR__0471
06600     99 FA 05 F6 | 	mov	result1, #153
06604     8C 01 90 FD | 	jmp	#LR__0522
06608                 | LR__0472
06608     C5 FA 05 F6 | 	mov	result1, #197
0660c     84 01 90 FD | 	jmp	#LR__0522
06610                 | LR__0473
06610     C5 FA 05 F6 | 	mov	result1, #197
06614     7C 01 90 FD | 	jmp	#LR__0522
06618                 | LR__0474
06618     9C FA 05 F6 | 	mov	result1, #156
0661c     74 01 90 FD | 	jmp	#LR__0522
06620                 | LR__0475
06620     D3 FA 05 F6 | 	mov	result1, #211
06624     6C 01 90 FD | 	jmp	#LR__0522
06628                 | LR__0476
06628     D3 FA 05 F6 | 	mov	result1, #211
0662c     64 01 90 FD | 	jmp	#LR__0522
06630                 | LR__0477
06630     6F FA 05 F6 | 	mov	result1, #111
06634     5C 01 90 FD | 	jmp	#LR__0522
06638                 | LR__0478
06638     6F FA 05 F6 | 	mov	result1, #111
0663c     54 01 90 FD | 	jmp	#LR__0522
06640                 | LR__0479
06640     93 FA 05 F6 | 	mov	result1, #147
06644     4C 01 90 FD | 	jmp	#LR__0522
06648                 | LR__0480
06648     94 FA 05 F6 | 	mov	result1, #148
0664c     44 01 90 FD | 	jmp	#LR__0522
06650                 | LR__0481
06650     62 FA 05 F6 | 	mov	result1, #98
06654     3C 01 90 FD | 	jmp	#LR__0522
06658                 | LR__0482
06658     62 FA 05 F6 | 	mov	result1, #98
0665c     34 01 90 FD | 	jmp	#LR__0522
06660                 | LR__0483
06660     A3 FA 05 F6 | 	mov	result1, #163
06664     2C 01 90 FD | 	jmp	#LR__0522
06668                 | LR__0484
06668     9D FA 05 F6 | 	mov	result1, #157
0666c     24 01 90 FD | 	jmp	#LR__0522
06670                 | LR__0485
06670     8A FA 05 F6 | 	mov	result1, #138
06674     1C 01 90 FD | 	jmp	#LR__0522
06678                 | LR__0486
06678     A4 FA 05 F6 | 	mov	result1, #164
0667c     14 01 90 FD | 	jmp	#LR__0522
06680                 | LR__0487
06680     A8 FA 05 F6 | 	mov	result1, #168
06684     0C 01 90 FD | 	jmp	#LR__0522
06688                 | LR__0488
06688     AD FA 05 F6 | 	mov	result1, #173
0668c     04 01 90 FD | 	jmp	#LR__0522
06690                 | LR__0489
06690     9A FA 05 F6 | 	mov	result1, #154
06694     FC 00 90 FD | 	jmp	#LR__0522
06698                 | LR__0490
06698     D1 FA 05 F6 | 	mov	result1, #209
0669c     F4 00 90 FD | 	jmp	#LR__0522
066a0                 | LR__0491
066a0     D0 FA 05 F6 | 	mov	result1, #208
066a4     EC 00 90 FD | 	jmp	#LR__0522
066a8                 | LR__0492
066a8     A6 FA 05 F6 | 	mov	result1, #166
066ac     E4 00 90 FD | 	jmp	#LR__0522
066b0                 | LR__0493
066b0     66 FA 05 F6 | 	mov	result1, #102
066b4     DC 00 90 FD | 	jmp	#LR__0522
066b8                 | LR__0494
066b8     67 FA 05 F6 | 	mov	result1, #103
066bc     D4 00 90 FD | 	jmp	#LR__0522
066c0                 | LR__0495
066c0     64 FA 05 F6 | 	mov	result1, #100
066c4     CC 00 90 FD | 	jmp	#LR__0522
066c8                 | LR__0496
066c8     65 FA 05 F6 | 	mov	result1, #101
066cc     C4 00 90 FD | 	jmp	#LR__0522
066d0                 | LR__0497
066d0     D5 FA 05 F6 | 	mov	result1, #213
066d4     BC 00 90 FD | 	jmp	#LR__0522
066d8                 | LR__0498
066d8     D6 FA 05 F6 | 	mov	result1, #214
066dc     B4 00 90 FD | 	jmp	#LR__0522
066e0                 | LR__0499
066e0     C8 FA 05 F6 | 	mov	result1, #200
066e4     AC 00 90 FD | 	jmp	#LR__0522
066e8                 | LR__0500
066e8     C9 FA 05 F6 | 	mov	result1, #201
066ec     A4 00 90 FD | 	jmp	#LR__0522
066f0                 | LR__0501
066f0     CA FA 05 F6 | 	mov	result1, #202
066f4     9C 00 90 FD | 	jmp	#LR__0522
066f8                 | LR__0502
066f8     CC FA 05 F6 | 	mov	result1, #204
066fc     94 00 90 FD | 	jmp	#LR__0522
06700                 | LR__0503
06700     CD FA 05 F6 | 	mov	result1, #205
06704     8C 00 90 FD | 	jmp	#LR__0522
06708                 | LR__0504
06708     CE FA 05 F6 | 	mov	result1, #206
0670c     84 00 90 FD | 	jmp	#LR__0522
06710                 | LR__0505
06710     CB FA 05 F6 | 	mov	result1, #203
06714     7C 00 90 FD | 	jmp	#LR__0522
06718                 | LR__0506
06718     98 FA 05 F6 | 	mov	result1, #152
0671c     74 00 90 FD | 	jmp	#LR__0522
06720                 | LR__0507
06720     7B FA 05 F6 | 	mov	result1, #123
06724     6C 00 90 FD | 	jmp	#LR__0522
06728                 | LR__0508
06728     76 FA 05 F6 | 	mov	result1, #118
0672c     64 00 90 FD | 	jmp	#LR__0522
06730                 | LR__0509
06730     A5 FA 05 F6 | 	mov	result1, #165
06734     5C 00 90 FD | 	jmp	#LR__0522
06738                 | LR__0510
06738     7A FA 05 F6 | 	mov	result1, #122
0673c     54 00 90 FD | 	jmp	#LR__0522
06740                 | LR__0511
06740     BF FA 05 F6 | 	mov	result1, #191
06744     4C 00 90 FD | 	jmp	#LR__0522
06748                 | LR__0512
06748     54 FA 05 F6 | 	mov	result1, #84
0674c     44 00 90 FD | 	jmp	#LR__0522
06750                 | LR__0513
06750     6B FA 05 F6 | 	mov	result1, #107
06754     3C 00 90 FD | 	jmp	#LR__0522
06758                 | LR__0514
06758     87 FA 05 F6 | 	mov	result1, #135
0675c     34 00 90 FD | 	jmp	#LR__0522
06760                 | LR__0515
06760     6A FA 05 F6 | 	mov	result1, #106
06764     2C 00 90 FD | 	jmp	#LR__0522
06768                 | LR__0516
06768     6E FA 05 F6 | 	mov	result1, #110
0676c     24 00 90 FD | 	jmp	#LR__0522
06770                 | LR__0517
06770     A1 FA 05 F6 | 	mov	result1, #161
06774     1C 00 90 FD | 	jmp	#LR__0522
06778                 | LR__0518
06778     83 FA 05 F6 | 	mov	result1, #131
0677c     14 00 90 FD | 	jmp	#LR__0522
06780                 | LR__0519
06780     A0 FA 05 F6 | 	mov	result1, #160
06784     0C 00 90 FD | 	jmp	#LR__0522
06788                 | LR__0520
06788     9B FA 05 F6 | 	mov	result1, #155
0678c     04 00 90 FD | 	jmp	#LR__0522
06790                 | LR__0521
06790     00 FA 05 F6 | 	mov	result1, #0
06794                 | LR__0522
06794     A7 F0 03 F6 | 	mov	ptra, fp
06798     B2 00 A0 FD | 	call	#popregs_
0679c                 | _isfunction_ret
0679c     2D 00 64 FD | 	ret
067a0                 | 
067a0                 | ' 
067a0                 | ' ' Check if the part is a name
067a0                 | ' 
067a0                 | ' function isname(s as string) as boolean
067a0                 | _isname
067a0     0D 4A 05 F6 | 	mov	COUNT_, #13
067a4     A8 00 A0 FD | 	call	#pushregs_
067a8     09 27 02 F6 | 	mov	local01, arg01
067ac     09 29 02 F6 | 	mov	local02, arg01
067b0     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
067b4                 | LR__0530
067b4     14 FB C9 FA | 	rdbyte	result1, local02 wz
067b8     01 28 06 51 |  if_ne	add	local02, #1
067bc     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
067c0                 | LR__0531
067c0     09 29 82 F1 | 	sub	local02, arg01
067c4     14 FB 01 F6 | 	mov	result1, local02
067c8     FD 2A 0A F6 | 	mov	local03, result1 wz
067cc     00 FA 05 A6 |  if_e	mov	result1, #0
067d0     34 02 90 AD |  if_e	jmp	#LR__0543
067d4     13 13 02 F6 | 	mov	arg01, local01
067d8     01 14 06 F6 | 	mov	arg02, #1
067dc     01 16 06 F6 | 	mov	arg03, #1
067e0     6C 2E B2 FD | 	call	#__system__Mid_S
067e4     FD 2C 02 F6 | 	mov	local04, result1
067e8                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
067e8     BB 01 00 FF 
067ec     54 14 06 F6 | 	mov	arg02, ##@LR__5808
067f0     16 13 02 F6 | 	mov	arg01, local04
067f4     E8 0C B2 FD | 	call	#__system___string_cmp
067f8     00 FA 55 F2 | 	cmps	result1, #0 wc
067fc     18 00 90 CD |  if_b	jmp	#LR__0532
06800     BB 01 00 FF 
06804     56 14 06 F6 | 	mov	arg02, ##@LR__5809
06808     16 13 02 F6 | 	mov	arg01, local04
0680c     D0 0C B2 FD | 	call	#__system___string_cmp
06810     01 FA 55 F2 | 	cmps	result1, #1 wc
06814     1C 00 90 CD |  if_b	jmp	#LR__0533
06818                 | LR__0532
06818     BB 01 00 FF 
0681c     58 14 06 F6 | 	mov	arg02, ##@LR__5810
06820     16 13 02 F6 | 	mov	arg01, local04
06824     B8 0C B2 FD | 	call	#__system___string_cmp
06828     00 FA 0D F2 | 	cmp	result1, #0 wz
0682c     00 FA 05 56 |  if_ne	mov	result1, #0
06830     D4 01 90 5D |  if_ne	jmp	#LR__0543
06834                 | LR__0533
06834                 | ' if l>2 then 
06834     03 2A 56 F2 | 	cmps	local03, #3 wc
06838     C8 01 90 CD |  if_b	jmp	#LR__0542
0683c                 | '   for i=2 to l
0683c     02 2E 06 F6 | 	mov	local05, #2
06840     15 31 02 F6 | 	mov	local06, local03
06844     01 30 06 F1 | 	add	local06, #1
06848                 | LR__0534
06848     18 2F 52 F2 | 	cmps	local05, local06 wc
0684c     B4 01 90 3D |  if_ae	jmp	#LR__0541
06850     13 13 02 F6 | 	mov	arg01, local01
06854     17 15 02 F6 | 	mov	arg02, local05
06858     01 16 06 F6 | 	mov	arg03, #1
0685c     F0 2D B2 FD | 	call	#__system__Mid_S
06860     FD 2C 02 F6 | 	mov	local04, result1
06864                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
06864     15 2F 52 F2 | 	cmps	local05, local03 wc
06868     9C 00 90 3D |  if_ae	jmp	#LR__0537
0686c     BB 01 00 FF 
06870     5A 14 06 F6 | 	mov	arg02, ##@LR__5811
06874     16 13 02 F6 | 	mov	arg01, local04
06878     64 0C B2 FD | 	call	#__system___string_cmp
0687c     00 FA 55 F2 | 	cmps	result1, #0 wc
06880     18 00 90 CD |  if_b	jmp	#LR__0535
06884     BB 01 00 FF 
06888     5C 14 06 F6 | 	mov	arg02, ##@LR__5812
0688c     16 13 02 F6 | 	mov	arg01, local04
06890     4C 0C B2 FD | 	call	#__system___string_cmp
06894     01 FA 55 F2 | 	cmps	result1, #1 wc
06898     6C 00 90 CD |  if_b	jmp	#LR__0537
0689c                 | LR__0535
0689c     BB 01 00 FF 
068a0     5E 14 06 F6 | 	mov	arg02, ##@LR__5813
068a4     16 13 02 F6 | 	mov	arg01, local04
068a8     34 0C B2 FD | 	call	#__system___string_cmp
068ac     00 FA 55 F2 | 	cmps	result1, #0 wc
068b0     18 00 90 CD |  if_b	jmp	#LR__0536
068b4     BB 01 00 FF 
068b8     60 14 06 F6 | 	mov	arg02, ##@LR__5814
068bc     16 13 02 F6 | 	mov	arg01, local04
068c0     1C 0C B2 FD | 	call	#__system___string_cmp
068c4     01 FA 55 F2 | 	cmps	result1, #1 wc
068c8     3C 00 90 CD |  if_b	jmp	#LR__0537
068cc                 | LR__0536
068cc     BB 01 00 FF 
068d0     62 32 06 F6 | 	mov	local07, ##@LR__5815
068d4     16 13 02 F6 | 	mov	arg01, local04
068d8     19 15 02 F6 | 	mov	arg02, local07
068dc     00 0C B2 FD | 	call	#__system___string_cmp
068e0     00 FA 0D F2 | 	cmp	result1, #0 wz
068e4     20 00 90 AD |  if_e	jmp	#LR__0537
068e8     BB 01 00 FF 
068ec     64 34 06 F6 | 	mov	local08, ##@LR__5816
068f0     16 13 02 F6 | 	mov	arg01, local04
068f4     1A 15 02 F6 | 	mov	arg02, local08
068f8     E4 0B B2 FD | 	call	#__system___string_cmp
068fc     FD 36 0A F6 | 	mov	local09, result1 wz
06900     00 FA 05 56 |  if_ne	mov	result1, #0
06904     00 01 90 5D |  if_ne	jmp	#LR__0543
06908                 | LR__0537
06908                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06908     15 2F 0A F2 | 	cmp	local05, local03 wz
0690c     EC 00 90 5D |  if_ne	jmp	#LR__0540
06910     BB 01 00 FF 
06914     66 38 06 F6 | 	mov	local10, ##@LR__5817
06918     16 13 02 F6 | 	mov	arg01, local04
0691c     1C 15 02 F6 | 	mov	arg02, local10
06920     BC 0B B2 FD | 	call	#__system___string_cmp
06924     FD 3A 02 F6 | 	mov	local11, result1
06928     00 3A 56 F2 | 	cmps	local11, #0 wc
0692c     1C 00 90 CD |  if_b	jmp	#LR__0538
06930     BB 01 00 FF 
06934     68 14 06 F6 | 	mov	arg02, ##@LR__5818
06938     16 13 02 F6 | 	mov	arg01, local04
0693c     A0 0B B2 FD | 	call	#__system___string_cmp
06940     FD 38 02 F6 | 	mov	local10, result1
06944     01 38 56 F2 | 	cmps	local10, #1 wc
06948     B0 00 90 CD |  if_b	jmp	#LR__0540
0694c                 | LR__0538
0694c     BB 01 00 FF 
06950     6A 14 06 F6 | 	mov	arg02, ##@LR__5819
06954     16 13 02 F6 | 	mov	arg01, local04
06958     84 0B B2 FD | 	call	#__system___string_cmp
0695c     00 FA 55 F2 | 	cmps	result1, #0 wc
06960     1C 00 90 CD |  if_b	jmp	#LR__0539
06964     BB 01 00 FF 
06968     6C 36 06 F6 | 	mov	local09, ##@LR__5820
0696c     16 13 02 F6 | 	mov	arg01, local04
06970     1B 15 02 F6 | 	mov	arg02, local09
06974     68 0B B2 FD | 	call	#__system___string_cmp
06978     01 FA 55 F2 | 	cmps	result1, #1 wc
0697c     7C 00 90 CD |  if_b	jmp	#LR__0540
06980                 | LR__0539
06980     BB 01 00 FF 
06984     6E 36 06 F6 | 	mov	local09, ##@LR__5821
06988     16 13 02 F6 | 	mov	arg01, local04
0698c     1B 15 02 F6 | 	mov	arg02, local09
06990     4C 0B B2 FD | 	call	#__system___string_cmp
06994     00 FA 4D F2 | 	cmps	result1, #0 wz
06998     60 00 90 AD |  if_e	jmp	#LR__0540
0699c     BB 01 00 FF 
069a0     70 34 06 F6 | 	mov	local08, ##@LR__5822
069a4     16 13 02 F6 | 	mov	arg01, local04
069a8     1A 15 02 F6 | 	mov	arg02, local08
069ac     30 0B B2 FD | 	call	#__system___string_cmp
069b0     FD 36 0A F6 | 	mov	local09, result1 wz
069b4     44 00 90 AD |  if_e	jmp	#LR__0540
069b8     BB 01 00 FF 
069bc     72 3C 06 F6 | 	mov	local12, ##@LR__5823
069c0     1E 35 02 F6 | 	mov	local08, local12
069c4     16 13 02 F6 | 	mov	arg01, local04
069c8     1A 15 02 F6 | 	mov	arg02, local08
069cc     10 0B B2 FD | 	call	#__system___string_cmp
069d0     FD 32 0A F6 | 	mov	local07, result1 wz
069d4     24 00 90 AD |  if_e	jmp	#LR__0540
069d8     BB 01 00 FF 
069dc     74 3E 06 F6 | 	mov	local13, ##@LR__5824
069e0     1F 3D 02 F6 | 	mov	local12, local13
069e4     16 13 02 F6 | 	mov	arg01, local04
069e8     1E 15 02 F6 | 	mov	arg02, local12
069ec     F0 0A B2 FD | 	call	#__system___string_cmp
069f0     FD 34 0A F6 | 	mov	local08, result1 wz
069f4     00 FA 05 56 |  if_ne	mov	result1, #0
069f8     0C 00 90 5D |  if_ne	jmp	#LR__0543
069fc                 | LR__0540
069fc     01 2E 06 F1 | 	add	local05, #1
06a00     44 FE 9F FD | 	jmp	#LR__0534
06a04                 | LR__0541
06a04                 | LR__0542
06a04                 | ' return true
06a04     01 FA 65 F6 | 	neg	result1, #1
06a08                 | LR__0543
06a08     A7 F0 03 F6 | 	mov	ptra, fp
06a0c     B2 00 A0 FD | 	call	#popregs_
06a10                 | _isname_ret
06a10     2D 00 64 FD | 	ret
06a14                 | 
06a14                 | ' 
06a14                 | ' ' Check if the part is a number.  
06a14                 | ' 
06a14                 | ' function isnum(s as string) as boolean 
06a14                 | _isnum
06a14     13 4A 05 F6 | 	mov	COUNT_, #19
06a18     A8 00 A0 FD | 	call	#pushregs_
06a1c     09 27 02 F6 | 	mov	local01, arg01
06a20     00 28 06 F6 | 	mov	local02, #0
06a24     00 2A 06 F6 | 	mov	local03, #0
06a28     13 13 02 F6 | 	mov	arg01, local01
06a2c     09 2D 02 F6 | 	mov	local04, arg01
06a30     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
06a34                 | LR__0550
06a34     16 FB C9 FA | 	rdbyte	result1, local04 wz
06a38     01 2C 06 51 |  if_ne	add	local04, #1
06a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
06a40                 | LR__0551
06a40     09 2D 82 F1 | 	sub	local04, arg01
06a44     16 FB 01 F6 | 	mov	result1, local04
06a48     FD 2E 0A F6 | 	mov	local05, result1 wz
06a4c     00 FA 05 A6 |  if_e	mov	result1, #0
06a50     A0 03 90 AD |  if_e	jmp	#LR__0566
06a54     13 13 02 F6 | 	mov	arg01, local01
06a58     01 14 06 F6 | 	mov	arg02, #1
06a5c     01 16 06 F6 | 	mov	arg03, #1
06a60     EC 2B B2 FD | 	call	#__system__Mid_S
06a64     FD 30 02 F6 | 	mov	local06, result1
06a68                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06a68     BB 01 00 FF 
06a6c     76 14 06 F6 | 	mov	arg02, ##@LR__5825
06a70     18 13 02 F6 | 	mov	arg01, local06
06a74     68 0A B2 FD | 	call	#__system___string_cmp
06a78     00 FA 55 F2 | 	cmps	result1, #0 wc
06a7c     1C 00 90 CD |  if_b	jmp	#LR__0552
06a80     BB 01 00 FF 
06a84     78 32 06 F6 | 	mov	local07, ##@LR__5826
06a88     18 13 02 F6 | 	mov	arg01, local06
06a8c     19 15 02 F6 | 	mov	arg02, local07
06a90     4C 0A B2 FD | 	call	#__system___string_cmp
06a94     01 FA 55 F2 | 	cmps	result1, #1 wc
06a98     84 00 90 CD |  if_b	jmp	#LR__0553
06a9c                 | LR__0552
06a9c     BB 01 00 FF 
06aa0     7A 34 06 F6 | 	mov	local08, ##@LR__5827
06aa4     1A 33 02 F6 | 	mov	local07, local08
06aa8     18 13 02 F6 | 	mov	arg01, local06
06aac     19 15 02 F6 | 	mov	arg02, local07
06ab0     2C 0A B2 FD | 	call	#__system___string_cmp
06ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ab8     64 00 90 AD |  if_e	jmp	#LR__0553
06abc     BB 01 00 FF 
06ac0     7C 36 06 F6 | 	mov	local09, ##@LR__5828
06ac4     1B 35 02 F6 | 	mov	local08, local09
06ac8     18 13 02 F6 | 	mov	arg01, local06
06acc     1A 15 02 F6 | 	mov	arg02, local08
06ad0     0C 0A B2 FD | 	call	#__system___string_cmp
06ad4     FD 32 0A F6 | 	mov	local07, result1 wz
06ad8     44 00 90 AD |  if_e	jmp	#LR__0553
06adc     BB 01 00 FF 
06ae0     7E 38 06 F6 | 	mov	local10, ##@LR__5829
06ae4     1C 37 02 F6 | 	mov	local09, local10
06ae8     18 13 02 F6 | 	mov	arg01, local06
06aec     1B 15 02 F6 | 	mov	arg02, local09
06af0     EC 09 B2 FD | 	call	#__system___string_cmp
06af4     FD 34 0A F6 | 	mov	local08, result1 wz
06af8     24 00 90 AD |  if_e	jmp	#LR__0553
06afc     BB 01 00 FF 
06b00     80 3A 06 F6 | 	mov	local11, ##@LR__5830
06b04     1D 39 02 F6 | 	mov	local10, local11
06b08     18 13 02 F6 | 	mov	arg01, local06
06b0c     1C 15 02 F6 | 	mov	arg02, local10
06b10     CC 09 B2 FD | 	call	#__system___string_cmp
06b14     FD 36 0A F6 | 	mov	local09, result1 wz
06b18     00 FA 05 56 |  if_ne	mov	result1, #0
06b1c     D4 02 90 5D |  if_ne	jmp	#LR__0566
06b20                 | LR__0553
06b20                 | ' if m$="." then ds=1
06b20     BB 01 00 FF 
06b24     82 14 06 F6 | 	mov	arg02, ##@LR__5831
06b28     18 13 02 F6 | 	mov	arg01, local06
06b2c     B0 09 B2 FD | 	call	#__system___string_cmp
06b30     00 FA 0D F2 | 	cmp	result1, #0 wz
06b34     01 28 06 A6 |  if_e	mov	local02, #1
06b38                 | ' if m$="$" then hex=1 else hex=0
06b38     BB 01 00 FF 
06b3c     84 14 06 F6 | 	mov	arg02, ##@LR__5832
06b40     18 13 02 F6 | 	mov	arg01, local06
06b44     98 09 B2 FD | 	call	#__system___string_cmp
06b48     00 FA 0D F2 | 	cmp	result1, #0 wz
06b4c     01 3C 06 A6 |  if_e	mov	local12, #1
06b50     00 3C 06 56 |  if_ne	mov	local12, #0
06b54                 | ' if m$="%" then bin=1 else bin=0
06b54     BB 01 00 FF 
06b58     86 14 06 F6 | 	mov	arg02, ##@LR__5833
06b5c     18 13 02 F6 | 	mov	arg01, local06
06b60     7C 09 B2 FD | 	call	#__system___string_cmp
06b64     00 FA 0D F2 | 	cmp	result1, #0 wz
06b68     01 3E 06 A6 |  if_e	mov	local13, #1
06b6c     00 3E 06 56 |  if_ne	mov	local13, #0
06b70                 | ' if l>1 then 
06b70     02 2E 56 F2 | 	cmps	local05, #2 wc
06b74     78 02 90 CD |  if_b	jmp	#LR__0565
06b78                 | '   for i=2 to l
06b78     02 40 06 F6 | 	mov	local14, #2
06b7c     17 43 02 F6 | 	mov	local15, local05
06b80     01 42 06 F1 | 	add	local15, #1
06b84                 | LR__0554
06b84     21 41 52 F2 | 	cmps	local14, local15 wc
06b88     64 02 90 3D |  if_ae	jmp	#LR__0564
06b8c     13 13 02 F6 | 	mov	arg01, local01
06b90     20 15 02 F6 | 	mov	arg02, local14
06b94     01 16 06 F6 | 	mov	arg03, #1
06b98     B4 2A B2 FD | 	call	#__system__Mid_S
06b9c     FD 30 02 F6 | 	mov	local06, result1
06ba0     00 44 06 F6 | 	mov	local16, #0
06ba4                 | '     m$=mid$(s,i,1) : b=false
06ba4                 | '     if m$>="0" andalso m$<="9" then b=true  
06ba4     BB 01 00 FF 
06ba8     88 14 06 F6 | 	mov	arg02, ##@LR__5834
06bac     18 13 02 F6 | 	mov	arg01, local06
06bb0     2C 09 B2 FD | 	call	#__system___string_cmp
06bb4     00 FA 55 F2 | 	cmps	result1, #0 wc
06bb8     1C 00 90 CD |  if_b	jmp	#LR__0555
06bbc     BB 01 00 FF 
06bc0     8A 32 06 F6 | 	mov	local07, ##@LR__5835
06bc4     18 13 02 F6 | 	mov	arg01, local06
06bc8     19 15 02 F6 | 	mov	arg02, local07
06bcc     10 09 B2 FD | 	call	#__system___string_cmp
06bd0     01 FA 55 F2 | 	cmps	result1, #1 wc
06bd4     01 44 66 C6 |  if_b	neg	local16, #1
06bd8                 | LR__0555
06bd8                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06bd8     BB 01 00 FF 
06bdc     8C 14 06 F6 | 	mov	arg02, ##@LR__5836
06be0     18 13 02 F6 | 	mov	arg01, local06
06be4     F8 08 B2 FD | 	call	#__system___string_cmp
06be8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bec     7C 00 90 AD |  if_e	jmp	#LR__0556
06bf0     BB 01 00 FF 
06bf4     8E 32 06 F6 | 	mov	local07, ##@LR__5837
06bf8     18 13 02 F6 | 	mov	arg01, local06
06bfc     19 15 02 F6 | 	mov	arg02, local07
06c00     DC 08 B2 FD | 	call	#__system___string_cmp
06c04     00 FA 0D F2 | 	cmp	result1, #0 wz
06c08     60 00 90 AD |  if_e	jmp	#LR__0556
06c0c     BB 01 00 FF 
06c10     90 34 06 F6 | 	mov	local08, ##@LR__5838
06c14     1A 33 02 F6 | 	mov	local07, local08
06c18     18 13 02 F6 | 	mov	arg01, local06
06c1c     19 15 02 F6 | 	mov	arg02, local07
06c20     BC 08 B2 FD | 	call	#__system___string_cmp
06c24     00 FA 0D F2 | 	cmp	result1, #0 wz
06c28     40 00 90 AD |  if_e	jmp	#LR__0556
06c2c     BB 01 00 FF 
06c30     92 36 06 F6 | 	mov	local09, ##@LR__5839
06c34     1B 35 02 F6 | 	mov	local08, local09
06c38     18 13 02 F6 | 	mov	arg01, local06
06c3c     1A 15 02 F6 | 	mov	arg02, local08
06c40     9C 08 B2 FD | 	call	#__system___string_cmp
06c44     FD 32 0A F6 | 	mov	local07, result1 wz
06c48     20 00 90 AD |  if_e	jmp	#LR__0556
06c4c     BB 01 00 FF 
06c50     94 38 06 F6 | 	mov	local10, ##@LR__5840
06c54     1C 37 02 F6 | 	mov	local09, local10
06c58     18 13 02 F6 | 	mov	arg01, local06
06c5c     1B 15 02 F6 | 	mov	arg02, local09
06c60     7C 08 B2 FD | 	call	#__system___string_cmp
06c64     FD 34 0A F6 | 	mov	local08, result1 wz
06c68     04 00 90 5D |  if_ne	jmp	#LR__0557
06c6c                 | LR__0556
06c6c     01 44 66 F6 | 	neg	local16, #1
06c70                 | LR__0557
06c70                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06c70     01 3C 0E F2 | 	cmp	local12, #1 wz
06c74     34 00 90 5D |  if_ne	jmp	#LR__0558
06c78     BB 01 00 FF 
06c7c     96 14 06 F6 | 	mov	arg02, ##@LR__5841
06c80     18 13 02 F6 | 	mov	arg01, local06
06c84     58 08 B2 FD | 	call	#__system___string_cmp
06c88     00 FA 55 F2 | 	cmps	result1, #0 wc
06c8c     1C 00 90 CD |  if_b	jmp	#LR__0558
06c90     BB 01 00 FF 
06c94     98 32 06 F6 | 	mov	local07, ##@LR__5842
06c98     18 13 02 F6 | 	mov	arg01, local06
06c9c     19 15 02 F6 | 	mov	arg02, local07
06ca0     3C 08 B2 FD | 	call	#__system___string_cmp
06ca4     01 FA 55 F2 | 	cmps	result1, #1 wc
06ca8     01 44 66 C6 |  if_b	neg	local16, #1
06cac                 | LR__0558
06cac                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06cac     01 3E 0E F2 | 	cmp	local13, #1 wz
06cb0     58 00 90 5D |  if_ne	jmp	#LR__0560
06cb4     BB 01 00 FF 
06cb8     9A 14 06 F6 | 	mov	arg02, ##@LR__5843
06cbc     18 13 02 F6 | 	mov	arg01, local06
06cc0     1C 08 B2 FD | 	call	#__system___string_cmp
06cc4     00 FA 55 F2 | 	cmps	result1, #0 wc
06cc8     1C 00 90 CD |  if_b	jmp	#LR__0559
06ccc     BB 01 00 FF 
06cd0     9C 32 06 F6 | 	mov	local07, ##@LR__5844
06cd4     18 13 02 F6 | 	mov	arg01, local06
06cd8     19 15 02 F6 | 	mov	arg02, local07
06cdc     00 08 B2 FD | 	call	#__system___string_cmp
06ce0     01 FA 55 F2 | 	cmps	result1, #1 wc
06ce4     24 00 90 CD |  if_b	jmp	#LR__0560
06ce8                 | LR__0559
06ce8     BB 01 00 FF 
06cec     9E 34 06 F6 | 	mov	local08, ##@LR__5845
06cf0     1A 33 02 F6 | 	mov	local07, local08
06cf4     18 13 02 F6 | 	mov	arg01, local06
06cf8     19 15 02 F6 | 	mov	arg02, local07
06cfc     E0 07 B2 FD | 	call	#__system___string_cmp
06d00     00 FA 0D F2 | 	cmp	result1, #0 wz
06d04     00 FA 05 56 |  if_ne	mov	result1, #0
06d08     E8 00 90 5D |  if_ne	jmp	#LR__0566
06d0c                 | LR__0560
06d0c                 | '     if not b then return false
06d0c     22 45 22 F6 | 	not	local16, local16
06d10     00 44 0E F2 | 	cmp	local16, #0 wz
06d14     00 FA 05 56 |  if_ne	mov	result1, #0
06d18     D8 00 90 5D |  if_ne	jmp	#LR__0566
06d1c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d1c     BB 01 00 FF 
06d20     A0 14 06 F6 | 	mov	arg02, ##@LR__5846
06d24     18 13 02 F6 | 	mov	arg01, local06
06d28     B4 07 B2 FD | 	call	#__system___string_cmp
06d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
06d30     3C 00 90 5D |  if_ne	jmp	#LR__0561
06d34     20 15 02 F6 | 	mov	arg02, local14
06d38     01 14 86 F1 | 	sub	arg02, #1
06d3c     13 13 02 F6 | 	mov	arg01, local01
06d40     01 16 06 F6 | 	mov	arg03, #1
06d44     08 29 B2 FD | 	call	#__system__Mid_S
06d48     FD 12 02 F6 | 	mov	arg01, result1
06d4c     F8 2A B2 FD | 	call	#__system__LCase_S
06d50     FD 12 02 F6 | 	mov	arg01, result1
06d54     BB 01 00 FF 
06d58     A2 32 06 F6 | 	mov	local07, ##@LR__5847
06d5c     19 15 02 F6 | 	mov	arg02, local07
06d60     7C 07 B2 FD | 	call	#__system___string_cmp
06d64     00 FA 0D F2 | 	cmp	result1, #0 wz
06d68     00 FA 05 56 |  if_ne	mov	result1, #0
06d6c     84 00 90 5D |  if_ne	jmp	#LR__0566
06d70                 | LR__0561
06d70                 | '     if m$="." then ds+=1: if ds>1 then return false
06d70     BB 01 00 FF 
06d74     A4 14 06 F6 | 	mov	arg02, ##@LR__5848
06d78     18 13 02 F6 | 	mov	arg01, local06
06d7c     60 07 B2 FD | 	call	#__system___string_cmp
06d80     00 FA 0D F2 | 	cmp	result1, #0 wz
06d84     01 28 06 A1 |  if_e	add	local02, #1
06d88     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06d8c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06d90     60 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06d94                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06d94     BB 01 00 FF 
06d98     A6 46 06 F6 | 	mov	local17, ##@LR__5849
06d9c     23 49 02 F6 | 	mov	local18, local17
06da0     18 13 02 F6 | 	mov	arg01, local06
06da4     24 15 02 F6 | 	mov	arg02, local18
06da8     34 07 B2 FD | 	call	#__system___string_cmp
06dac     FD 4A 0A F6 | 	mov	local19, result1 wz
06db0     20 00 90 AD |  if_e	jmp	#LR__0562
06db4     BB 01 00 FF 
06db8     A8 32 06 F6 | 	mov	local07, ##@LR__5850
06dbc     19 47 02 F6 | 	mov	local17, local07
06dc0     18 13 02 F6 | 	mov	arg01, local06
06dc4     23 15 02 F6 | 	mov	arg02, local17
06dc8     14 07 B2 FD | 	call	#__system___string_cmp
06dcc     FD 48 0A F6 | 	mov	local18, result1 wz
06dd0     14 00 90 5D |  if_ne	jmp	#LR__0563
06dd4                 | LR__0562
06dd4     01 2A 06 F1 | 	add	local03, #1
06dd8     00 3C 0E F2 | 	cmp	local12, #0 wz
06ddc     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06de0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06de4     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06de8                 | LR__0563
06de8     01 40 06 F1 | 	add	local14, #1
06dec     94 FD 9F FD | 	jmp	#LR__0554
06df0                 | LR__0564
06df0                 | LR__0565
06df0                 | ' return true
06df0     01 FA 65 F6 | 	neg	result1, #1
06df4                 | LR__0566
06df4     A7 F0 03 F6 | 	mov	ptra, fp
06df8     B2 00 A0 FD | 	call	#popregs_
06dfc                 | _isnum_ret
06dfc     2D 00 64 FD | 	ret
06e00                 | 
06e00                 | '   
06e00                 | ' ' Check if the part is an integer number.    
06e00                 | '   
06e00                 | ' function isint(s as string) as boolean
06e00                 | _isint
06e00     0E 4A 05 F6 | 	mov	COUNT_, #14
06e04     A8 00 A0 FD | 	call	#pushregs_
06e08     09 27 02 F6 | 	mov	local01, arg01
06e0c     09 29 02 F6 | 	mov	local02, arg01
06e10     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06e14                 | LR__0570
06e14     14 FB C9 FA | 	rdbyte	result1, local02 wz
06e18     01 28 06 51 |  if_ne	add	local02, #1
06e1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06e20                 | LR__0571
06e20     09 29 82 F1 | 	sub	local02, arg01
06e24     14 FB 01 F6 | 	mov	result1, local02
06e28     FD 2A 0A F6 | 	mov	local03, result1 wz
06e2c     00 FA 05 A6 |  if_e	mov	result1, #0
06e30     64 02 90 AD |  if_e	jmp	#LR__0584
06e34     13 13 02 F6 | 	mov	arg01, local01
06e38     01 14 06 F6 | 	mov	arg02, #1
06e3c     01 16 06 F6 | 	mov	arg03, #1
06e40     0C 28 B2 FD | 	call	#__system__Mid_S
06e44     FD 2C 02 F6 | 	mov	local04, result1
06e48                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06e48     BB 01 00 FF 
06e4c     AA 14 06 F6 | 	mov	arg02, ##@LR__5851
06e50     16 13 02 F6 | 	mov	arg01, local04
06e54     88 06 B2 FD | 	call	#__system___string_cmp
06e58     00 FA 55 F2 | 	cmps	result1, #0 wc
06e5c     1C 00 90 CD |  if_b	jmp	#LR__0572
06e60     BB 01 00 FF 
06e64     AC 2E 06 F6 | 	mov	local05, ##@LR__5852
06e68     16 13 02 F6 | 	mov	arg01, local04
06e6c     17 15 02 F6 | 	mov	arg02, local05
06e70     6C 06 B2 FD | 	call	#__system___string_cmp
06e74     01 FA 55 F2 | 	cmps	result1, #1 wc
06e78     64 00 90 CD |  if_b	jmp	#LR__0573
06e7c                 | LR__0572
06e7c     BB 01 00 FF 
06e80     AE 30 06 F6 | 	mov	local06, ##@LR__5853
06e84     18 2F 02 F6 | 	mov	local05, local06
06e88     16 13 02 F6 | 	mov	arg01, local04
06e8c     17 15 02 F6 | 	mov	arg02, local05
06e90     4C 06 B2 FD | 	call	#__system___string_cmp
06e94     00 FA 0D F2 | 	cmp	result1, #0 wz
06e98     44 00 90 AD |  if_e	jmp	#LR__0573
06e9c     BB 01 00 FF 
06ea0     B0 32 06 F6 | 	mov	local07, ##@LR__5854
06ea4     19 31 02 F6 | 	mov	local06, local07
06ea8     16 13 02 F6 | 	mov	arg01, local04
06eac     18 15 02 F6 | 	mov	arg02, local06
06eb0     2C 06 B2 FD | 	call	#__system___string_cmp
06eb4     FD 2E 0A F6 | 	mov	local05, result1 wz
06eb8     24 00 90 AD |  if_e	jmp	#LR__0573
06ebc     BB 01 00 FF 
06ec0     B2 34 06 F6 | 	mov	local08, ##@LR__5855
06ec4     1A 33 02 F6 | 	mov	local07, local08
06ec8     16 13 02 F6 | 	mov	arg01, local04
06ecc     19 15 02 F6 | 	mov	arg02, local07
06ed0     0C 06 B2 FD | 	call	#__system___string_cmp
06ed4     FD 30 0A F6 | 	mov	local06, result1 wz
06ed8     00 FA 05 56 |  if_ne	mov	result1, #0
06edc     B8 01 90 5D |  if_ne	jmp	#LR__0584
06ee0                 | LR__0573
06ee0                 | ' if m$="$" then hex=1 else hex=0
06ee0     BB 01 00 FF 
06ee4     B4 14 06 F6 | 	mov	arg02, ##@LR__5856
06ee8     16 13 02 F6 | 	mov	arg01, local04
06eec     F0 05 B2 FD | 	call	#__system___string_cmp
06ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
06ef4     01 36 06 A6 |  if_e	mov	local09, #1
06ef8     00 36 06 56 |  if_ne	mov	local09, #0
06efc                 | ' if m$="%" then bin=1 else bin=0
06efc     BB 01 00 FF 
06f00     B6 14 06 F6 | 	mov	arg02, ##@LR__5857
06f04     16 13 02 F6 | 	mov	arg01, local04
06f08     D4 05 B2 FD | 	call	#__system___string_cmp
06f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
06f10     01 38 06 A6 |  if_e	mov	local10, #1
06f14     00 38 06 56 |  if_ne	mov	local10, #0
06f18                 | ' if l>1 then 
06f18     02 2A 56 F2 | 	cmps	local03, #2 wc
06f1c     74 01 90 CD |  if_b	jmp	#LR__0583
06f20                 | '   for i=2 to l
06f20     02 3A 06 F6 | 	mov	local11, #2
06f24     15 3D 02 F6 | 	mov	local12, local03
06f28     01 3C 06 F1 | 	add	local12, #1
06f2c                 | LR__0574
06f2c     1E 3B 52 F2 | 	cmps	local11, local12 wc
06f30     60 01 90 3D |  if_ae	jmp	#LR__0582
06f34     13 13 02 F6 | 	mov	arg01, local01
06f38     1D 15 02 F6 | 	mov	arg02, local11
06f3c     01 16 06 F6 | 	mov	arg03, #1
06f40     0C 27 B2 FD | 	call	#__system__Mid_S
06f44     FD 2C 02 F6 | 	mov	local04, result1
06f48                 | '     m$=mid$(s,i,1) 
06f48                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06f48     00 36 0E F2 | 	cmp	local09, #0 wz
06f4c     50 00 90 5D |  if_ne	jmp	#LR__0576
06f50     BB 01 00 FF 
06f54     B8 14 06 F6 | 	mov	arg02, ##@LR__5858
06f58     16 13 02 F6 | 	mov	arg01, local04
06f5c     80 05 B2 FD | 	call	#__system___string_cmp
06f60     00 FA 55 F2 | 	cmps	result1, #0 wc
06f64     18 00 90 CD |  if_b	jmp	#LR__0575
06f68     BB 01 00 FF 
06f6c     BA 14 06 F6 | 	mov	arg02, ##@LR__5859
06f70     16 13 02 F6 | 	mov	arg01, local04
06f74     68 05 B2 FD | 	call	#__system___string_cmp
06f78     01 FA 55 F2 | 	cmps	result1, #1 wc
06f7c     20 00 90 CD |  if_b	jmp	#LR__0576
06f80                 | LR__0575
06f80     BB 01 00 FF 
06f84     BC 30 06 F6 | 	mov	local06, ##@LR__5860
06f88     16 13 02 F6 | 	mov	arg01, local04
06f8c     18 15 02 F6 | 	mov	arg02, local06
06f90     4C 05 B2 FD | 	call	#__system___string_cmp
06f94     00 FA 0D F2 | 	cmp	result1, #0 wz
06f98     00 FA 05 56 |  if_ne	mov	result1, #0
06f9c     F8 00 90 5D |  if_ne	jmp	#LR__0584
06fa0                 | LR__0576
06fa0                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06fa0     01 36 0E F2 | 	cmp	local09, #1 wz
06fa4     90 00 90 5D |  if_ne	jmp	#LR__0579
06fa8     BB 01 00 FF 
06fac     BE 14 06 F6 | 	mov	arg02, ##@LR__5861
06fb0     16 13 02 F6 | 	mov	arg01, local04
06fb4     28 05 B2 FD | 	call	#__system___string_cmp
06fb8     00 FA 55 F2 | 	cmps	result1, #0 wc
06fbc     1C 00 90 CD |  if_b	jmp	#LR__0577
06fc0     BB 01 00 FF 
06fc4     C0 14 06 F6 | 	mov	arg02, ##@LR__5862
06fc8     16 13 02 F6 | 	mov	arg01, local04
06fcc     10 05 B2 FD | 	call	#__system___string_cmp
06fd0     FD 3E 02 F6 | 	mov	local13, result1
06fd4     01 3E 56 F2 | 	cmps	local13, #1 wc
06fd8     5C 00 90 CD |  if_b	jmp	#LR__0579
06fdc                 | LR__0577
06fdc     BB 01 00 FF 
06fe0     C2 2E 06 F6 | 	mov	local05, ##@LR__5863
06fe4     16 13 02 F6 | 	mov	arg01, local04
06fe8     17 15 02 F6 | 	mov	arg02, local05
06fec     F0 04 B2 FD | 	call	#__system___string_cmp
06ff0     FD 40 02 F6 | 	mov	local14, result1
06ff4     00 40 56 F2 | 	cmps	local14, #0 wc
06ff8     1C 00 90 CD |  if_b	jmp	#LR__0578
06ffc     BB 01 00 FF 
07000     C4 32 06 F6 | 	mov	local07, ##@LR__5864
07004     16 13 02 F6 | 	mov	arg01, local04
07008     19 15 02 F6 | 	mov	arg02, local07
0700c     D0 04 B2 FD | 	call	#__system___string_cmp
07010     01 FA 55 F2 | 	cmps	result1, #1 wc
07014     20 00 90 CD |  if_b	jmp	#LR__0579
07018                 | LR__0578
07018     BB 01 00 FF 
0701c     C6 34 06 F6 | 	mov	local08, ##@LR__5865
07020     16 13 02 F6 | 	mov	arg01, local04
07024     1A 15 02 F6 | 	mov	arg02, local08
07028     B4 04 B2 FD | 	call	#__system___string_cmp
0702c     00 FA 0D F2 | 	cmp	result1, #0 wz
07030     00 FA 05 56 |  if_ne	mov	result1, #0
07034     60 00 90 5D |  if_ne	jmp	#LR__0584
07038                 | LR__0579
07038                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07038     01 38 0E F2 | 	cmp	local10, #1 wz
0703c     4C 00 90 5D |  if_ne	jmp	#LR__0581
07040     BB 01 00 FF 
07044     C8 14 06 F6 | 	mov	arg02, ##@LR__5866
07048     16 13 02 F6 | 	mov	arg01, local04
0704c     90 04 B2 FD | 	call	#__system___string_cmp
07050     00 FA 55 F2 | 	cmps	result1, #0 wc
07054     18 00 90 CD |  if_b	jmp	#LR__0580
07058     BB 01 00 FF 
0705c     CA 14 06 F6 | 	mov	arg02, ##@LR__5867
07060     16 13 02 F6 | 	mov	arg01, local04
07064     78 04 B2 FD | 	call	#__system___string_cmp
07068     01 FA 55 F2 | 	cmps	result1, #1 wc
0706c     1C 00 90 CD |  if_b	jmp	#LR__0581
07070                 | LR__0580
07070     BB 01 00 FF 
07074     CC 14 06 F6 | 	mov	arg02, ##@LR__5868
07078     16 13 02 F6 | 	mov	arg01, local04
0707c     60 04 B2 FD | 	call	#__system___string_cmp
07080     00 FA 0D F2 | 	cmp	result1, #0 wz
07084     00 FA 05 56 |  if_ne	mov	result1, #0
07088     0C 00 90 5D |  if_ne	jmp	#LR__0584
0708c                 | LR__0581
0708c     01 3A 06 F1 | 	add	local11, #1
07090     98 FE 9F FD | 	jmp	#LR__0574
07094                 | LR__0582
07094                 | LR__0583
07094                 | ' return true
07094     01 FA 65 F6 | 	neg	result1, #1
07098                 | LR__0584
07098     A7 F0 03 F6 | 	mov	ptra, fp
0709c     B2 00 A0 FD | 	call	#popregs_
070a0                 | _isint_ret
070a0     2D 00 64 FD | 	ret
070a4                 | 
070a4                 | ' 
070a4                 | ' ' Check if the part is a positive decimal number.  
070a4                 | ' 
070a4                 | ' function isdec(s as string) as boolean
070a4                 | _isdec
070a4     05 4A 05 F6 | 	mov	COUNT_, #5
070a8     A8 00 A0 FD | 	call	#pushregs_
070ac     09 27 02 F6 | 	mov	local01, arg01
070b0     09 29 02 F6 | 	mov	local02, arg01
070b4     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
070b8                 | LR__0590
070b8     14 FB C9 FA | 	rdbyte	result1, local02 wz
070bc     01 28 06 51 |  if_ne	add	local02, #1
070c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
070c4                 | LR__0591
070c4     09 29 82 F1 | 	sub	local02, arg01
070c8     14 FB 01 F6 | 	mov	result1, local02
070cc     FD 28 0A F6 | 	mov	local02, result1 wz
070d0     00 FA 05 A6 |  if_e	mov	result1, #0
070d4     80 00 90 AD |  if_e	jmp	#LR__0596
070d8                 | ' for i=1 to l
070d8     01 2A 06 F6 | 	mov	local03, #1
070dc     14 2D 02 F6 | 	mov	local04, local02
070e0     01 2C 06 F1 | 	add	local04, #1
070e4                 | LR__0592
070e4     16 2B 52 F2 | 	cmps	local03, local04 wc
070e8     68 00 90 3D |  if_ae	jmp	#LR__0595
070ec     13 13 02 F6 | 	mov	arg01, local01
070f0     15 15 02 F6 | 	mov	arg02, local03
070f4     01 16 06 F6 | 	mov	arg03, #1
070f8     54 25 B2 FD | 	call	#__system__Mid_S
070fc     FD 2E 02 F6 | 	mov	local05, result1
07100                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07100     BB 01 00 FF 
07104     CE 14 06 F6 | 	mov	arg02, ##@LR__5869
07108     17 13 02 F6 | 	mov	arg01, local05
0710c     D0 03 B2 FD | 	call	#__system___string_cmp
07110     00 FA 55 F2 | 	cmps	result1, #0 wc
07114     18 00 90 CD |  if_b	jmp	#LR__0593
07118     BB 01 00 FF 
0711c     D0 14 06 F6 | 	mov	arg02, ##@LR__5870
07120     17 13 02 F6 | 	mov	arg01, local05
07124     B8 03 B2 FD | 	call	#__system___string_cmp
07128     01 FA 55 F2 | 	cmps	result1, #1 wc
0712c     1C 00 90 CD |  if_b	jmp	#LR__0594
07130                 | LR__0593
07130     BB 01 00 FF 
07134     D2 14 06 F6 | 	mov	arg02, ##@LR__5871
07138     17 13 02 F6 | 	mov	arg01, local05
0713c     A0 03 B2 FD | 	call	#__system___string_cmp
07140     00 FA 0D F2 | 	cmp	result1, #0 wz
07144     00 FA 05 56 |  if_ne	mov	result1, #0
07148     0C 00 90 5D |  if_ne	jmp	#LR__0596
0714c                 | LR__0594
0714c     01 2A 06 F1 | 	add	local03, #1
07150     90 FF 9F FD | 	jmp	#LR__0592
07154                 | LR__0595
07154                 | ' return true
07154     01 FA 65 F6 | 	neg	result1, #1
07158                 | LR__0596
07158     A7 F0 03 F6 | 	mov	ptra, fp
0715c     B2 00 A0 FD | 	call	#popregs_
07160                 | _isdec_ret
07160     2D 00 64 FD | 	ret
07164                 | 
07164                 | ' 
07164                 | ' ' Check if the part is a string.  
07164                 | ' 
07164                 | ' function isstring(s as string) as boolean
07164                 | _isstring
07164     01 4A 05 F6 | 	mov	COUNT_, #1
07168     A8 00 A0 FD | 	call	#pushregs_
0716c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
0716c     09 27 02 F6 | 	mov	local01, arg01
07170     01 14 06 F6 | 	mov	arg02, #1
07174     C0 23 B2 FD | 	call	#__system__Left_S
07178     FD 12 02 F6 | 	mov	arg01, result1
0717c     BB 01 00 FF 
07180     D4 14 06 F6 | 	mov	arg02, ##@LR__5872
07184     58 03 B2 FD | 	call	#__system___string_cmp
07188     00 FA 4D F2 | 	cmps	result1, #0 wz
0718c     28 00 90 5D |  if_ne	jmp	#LR__0600
07190     13 13 02 F6 | 	mov	arg01, local01
07194     01 14 06 F6 | 	mov	arg02, #1
07198     24 24 B2 FD | 	call	#__system__Right_S
0719c     FD 12 02 F6 | 	mov	arg01, result1
071a0     BB 01 00 FF 
071a4     D6 14 06 F6 | 	mov	arg02, ##@LR__5873
071a8     34 03 B2 FD | 	call	#__system___string_cmp
071ac     00 FA 4D F2 | 	cmps	result1, #0 wz
071b0     01 FA 65 A6 |  if_e	neg	result1, #1
071b4     04 00 90 AD |  if_e	jmp	#LR__0601
071b8                 | LR__0600
071b8     00 FA 05 F6 | 	mov	result1, #0
071bc                 | LR__0601
071bc     A7 F0 03 F6 | 	mov	ptra, fp
071c0     B2 00 A0 FD | 	call	#popregs_
071c4                 | _isstring_ret
071c4     2D 00 64 FD | 	ret
071c8                 | 
071c8                 | ' 
071c8                 | ' ' getnoteval. Returns the frequency of note token
071c8                 | ' 
071c8                 | ' function getnoteval(token) as single
071c8                 | _getnoteval
071c8     02 4A 05 F6 | 	mov	COUNT_, #2
071cc     A8 00 A0 FD | 	call	#pushregs_
071d0     01 00 00 FF 
071d4     00 13 86 F1 | 	sub	arg01, ##768
071d8     09 15 52 F6 | 	abs	arg02, arg01 wc
071dc     0C 14 16 FD | 	qdiv	arg02, #12
071e0     14 00 00 FF 
071e4     D8 E4 05 F1 | 	add	objptr, ##10456
071e8     19 14 62 FD | 	getqy	arg02
071ec     0A 15 82 F6 | 	negc	arg02, arg02
071f0     02 14 66 F0 | 	shl	arg02, #2
071f4     F2 14 02 F1 | 	add	arg02, objptr
071f8     0A 27 02 FB | 	rdlong	local01, arg02
071fc     09 15 52 F6 | 	abs	arg02, arg01 wc
07200     0C 14 16 FD | 	qdiv	arg02, #12
07204     14 00 00 FF 
07208     D8 E4 85 F1 | 	sub	objptr, ##10456
0720c     01 12 06 F6 | 	mov	arg01, #1
07210                 | ' noteexp=1+(note/12) 
07210                 | ' return (2.0^noteexp)*notebase
07210     18 14 62 FD | 	getqx	arg02
07214     0A 13 82 F3 | 	sumc	arg01, arg02
07218     09 13 52 F6 | 	abs	arg01, arg01 wc
0721c     1F 28 C6 C9 |  if_b	decod	local02, #31
07220     00 28 06 36 |  if_ae	mov	local02, #0
07224     08 2D B2 FD | 	call	#__system___float_fromuns
07228     14 FB 61 F5 | 	xor	result1, local02
0722c     FD 14 02 F6 | 	mov	arg02, result1
07230     1E 12 C6 F9 | 	decod	arg01, #30
07234     04 40 B2 FD | 	call	#__system____builtin_powf
07238     FD 12 02 F6 | 	mov	arg01, result1
0723c     13 15 02 F6 | 	mov	arg02, local01
07240     F0 30 B2 FD | 	call	#__system___float_mul
07244     A7 F0 03 F6 | 	mov	ptra, fp
07248     B2 00 A0 FD | 	call	#popregs_
0724c                 | _getnoteval_ret
0724c     2D 00 64 FD | 	ret
07250                 | 
07250                 | ' 
07250                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07250                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
07250                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07250                 | ' 
07250                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07250                 | ' '
07250                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
07250                 | ' '
07250                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
07250                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
07250                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
07250                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
07250                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
07250                 | ' ' 
07250                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07250                 | ' 
07250                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07250                 | ' ' Helper functions to manage program lines
07250                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07250                 | ' 
07250                 | ' '----- delete a line from a program
07250                 | ' 
07250                 | ' function deleteline(aline as ulong) as integer
07250                 | _deleteline
07250     02 4A 05 F6 | 	mov	COUNT_, #2
07254     A8 00 A0 FD | 	call	#pushregs_
07258     2C F0 07 F1 | 	add	ptra, #44
0725c     04 4E 05 F1 | 	add	fp, #4
07260     A7 12 62 FC | 	wrlong	arg01, fp
07264     4A 00 00 FF 
07268     88 E4 05 F1 | 	add	objptr, ##38024
0726c     F2 26 02 FB | 	rdlong	local01, objptr
07270     0C 4E 05 F1 | 	add	fp, #12
07274     A7 26 62 FC | 	wrlong	local01, fp
07278     10 4E 85 F1 | 	sub	fp, #16
0727c                 | ' 
0727c                 | ' searchptr=programstart
0727c                 | ' do
0727c     3E 00 00 FF 
07280     BC E5 85 F1 | 	sub	objptr, ##32188
07284                 | LR__0610
07284     14 4E 05 F1 | 	add	fp, #20
07288     A7 12 02 F6 | 	mov	arg01, fp
0728c     04 4E 85 F1 | 	sub	fp, #4
07290     A7 14 02 FB | 	rdlong	arg02, fp
07294     10 4E 85 F1 | 	sub	fp, #16
07298     18 16 06 F6 | 	mov	arg03, #24
0729c     74 F5 B1 FD | 	call	#_psram_spin2_read1
072a0     10 4E 05 F1 | 	add	fp, #16
072a4     A7 26 02 FB | 	rdlong	local01, fp
072a8     08 4E 85 F1 | 	sub	fp, #8
072ac     A7 26 62 FC | 	wrlong	local01, fp
072b0     20 4E 05 F1 | 	add	fp, #32
072b4     A7 26 02 FB | 	rdlong	local01, fp
072b8     18 4E 85 F1 | 	sub	fp, #24
072bc     A7 26 62 FC | 	wrlong	local01, fp
072c0     04 4E 05 F1 | 	add	fp, #4
072c4     A7 26 02 FB | 	rdlong	local01, fp
072c8     10 4E 85 F1 | 	sub	fp, #16
072cc     A7 16 02 FB | 	rdlong	arg03, fp
072d0     04 4E 85 F1 | 	sub	fp, #4
072d4     0B 27 12 F2 | 	cmp	local01, arg03 wc
072d8     28 4E 05 C1 |  if_b	add	fp, #40
072dc     A7 28 02 CB |  if_b	rdlong	local02, fp
072e0     28 4E 85 C1 |  if_b	sub	fp, #40
072e4     FF FF 3F CF 
072e8     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
072ec     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0610
072f0     0B 00 00 FF 
072f4     CC E4 85 F1 | 	sub	objptr, ##5836
072f8                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
072f8     14 4E 05 F1 | 	add	fp, #20
072fc     A7 26 02 FB | 	rdlong	local01, fp
07300     10 4E 85 F1 | 	sub	fp, #16
07304     A7 28 02 FB | 	rdlong	local02, fp
07308     04 4E 85 F1 | 	sub	fp, #4
0730c     14 27 0A F2 | 	cmp	local01, local02 wz
07310     01 FA 65 56 |  if_ne	neg	result1, #1
07314     34 02 90 5D |  if_ne	jmp	#LR__0615
07318     08 4E 05 F1 | 	add	fp, #8
0731c     A7 12 02 FB | 	rdlong	arg01, fp
07320     08 4E 85 F1 | 	sub	fp, #8
07324     01 14 66 F6 | 	neg	arg02, #1
07328     14 C9 B1 FD | 	call	#_pslpoke
0732c                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
0732c                 | ' 
0732c                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
0732c     28 4E 05 F1 | 	add	fp, #40
07330     A7 26 02 FB | 	rdlong	local01, fp
07334     28 4E 85 F1 | 	sub	fp, #40
07338     FF FF 3F FF 
0733c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07340     24 4E 05 A1 |  if_e	add	fp, #36
07344     A7 28 02 AB |  if_e	rdlong	local02, fp
07348     24 4E 85 A1 |  if_e	sub	fp, #36
0734c     FF FF 7F AF 
07350     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
07354     88 00 90 5D |  if_ne	jmp	#LR__0611
07358     4A 00 00 FF 
0735c     88 E4 05 F1 | 	add	objptr, ##38024
07360     00 04 80 FF 
07364     F2 00 68 FC | 	wrlong	##524288, objptr
07368     07 00 00 FF 
0736c     2C E4 85 F1 | 	sub	objptr, ##3628
07370     00 04 80 FF 
07374     F2 00 68 FC | 	wrlong	##524288, objptr
07378     07 00 00 FF 
0737c     30 E4 05 F1 | 	add	objptr, ##3632
07380     F2 00 68 FC | 	wrlong	#0, objptr
07384     04 E4 05 F1 | 	add	objptr, #4
07388     FF FF FF FF 
0738c     F2 FE 6B FC | 	wrlong	##-1, objptr
07390     4A 00 00 FF 
07394     90 E4 85 F1 | 	sub	objptr, ##38032
07398     00 12 06 F6 | 	mov	arg01, #0
0739c     01 14 66 F6 | 	neg	arg02, #1
073a0     9C C8 B1 FD | 	call	#_pslpoke
073a4     10 12 06 F6 | 	mov	arg01, #16
073a8     01 14 66 F6 | 	neg	arg02, #1
073ac     90 C8 B1 FD | 	call	#_pslpoke
073b0     14 12 06 F6 | 	mov	arg01, #20
073b4     1E 14 CE F9 | 	bmask	arg02, #30
073b8     84 C8 B1 FD | 	call	#_pslpoke
073bc     50 00 00 FF 
073c0     B8 E4 05 F1 | 	add	objptr, ##41144
073c4     00 04 80 FF 
073c8     F2 00 68 FC | 	wrlong	##524288, objptr
073cc     04 E4 05 F1 | 	add	objptr, #4
073d0     00 04 80 FF 
073d4     F2 00 68 FC | 	wrlong	##524288, objptr
073d8     50 00 00 FF 
073dc     BC E4 85 F1 | 	sub	objptr, ##41148
073e0                 | LR__0611
073e0                 | ' 
073e0                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
073e0     28 4E 05 F1 | 	add	fp, #40
073e4     A7 26 02 FB | 	rdlong	local01, fp
073e8     28 4E 85 F1 | 	sub	fp, #40
073ec     FF FF 3F FF 
073f0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
073f4     74 00 90 5D |  if_ne	jmp	#LR__0612
073f8     24 4E 05 F1 | 	add	fp, #36
073fc     A7 28 02 FB | 	rdlong	local02, fp
07400     24 4E 85 F1 | 	sub	fp, #36
07404     FF FF 7F FF 
07408     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0740c     5C 00 90 AD |  if_e	jmp	#LR__0612
07410     24 4E 05 F1 | 	add	fp, #36
07414     A7 12 02 FB | 	rdlong	arg01, fp
07418     24 4E 85 F1 | 	sub	fp, #36
0741c     14 12 06 F1 | 	add	arg01, #20
07420     1E 14 CE F9 | 	bmask	arg02, #30
07424     18 C8 B1 FD | 	call	#_pslpoke
07428     24 4E 05 F1 | 	add	fp, #36
0742c     A7 26 02 FB | 	rdlong	local01, fp
07430     4A 00 00 FF 
07434     90 E4 05 F1 | 	add	objptr, ##38032
07438     F2 26 62 FC | 	wrlong	local01, objptr
0743c     4A 00 00 FF 
07440     90 E4 85 F1 | 	sub	objptr, ##38032
07444     A7 12 02 FB | 	rdlong	arg01, fp
07448     24 4E 85 F1 | 	sub	fp, #36
0744c     20 C9 B1 FD | 	call	#_pslpeek
07450     4A 00 00 FF 
07454     8C E4 05 F1 | 	add	objptr, ##38028
07458     F2 FA 61 FC | 	wrlong	result1, objptr
0745c     4A 00 00 FF 
07460     8C E4 85 F1 | 	sub	objptr, ##38028
07464                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
07464                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
07464                 | '   lastline=pslpeek(header(4))
07464                 | '   return 0
07464     00 FA 05 F6 | 	mov	result1, #0
07468     E0 00 90 FD | 	jmp	#LR__0615
0746c                 | LR__0612
0746c                 | ' 
0746c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
0746c     28 4E 05 F1 | 	add	fp, #40
07470     A7 26 02 FB | 	rdlong	local01, fp
07474     28 4E 85 F1 | 	sub	fp, #40
07478     FF FF 3F FF 
0747c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07480     58 00 90 AD |  if_e	jmp	#LR__0613
07484     24 4E 05 F1 | 	add	fp, #36
07488     A7 28 02 FB | 	rdlong	local02, fp
0748c     24 4E 85 F1 | 	sub	fp, #36
07490     FF FF 7F FF 
07494     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07498     40 00 90 5D |  if_ne	jmp	#LR__0613
0749c     28 4E 05 F1 | 	add	fp, #40
074a0     A7 12 02 FB | 	rdlong	arg01, fp
074a4     28 4E 85 F1 | 	sub	fp, #40
074a8     10 12 06 F1 | 	add	arg01, #16
074ac     01 14 66 F6 | 	neg	arg02, #1
074b0     8C C7 B1 FD | 	call	#_pslpoke
074b4     28 4E 05 F1 | 	add	fp, #40
074b8     A7 26 02 FB | 	rdlong	local01, fp
074bc     28 4E 85 F1 | 	sub	fp, #40
074c0     4A 00 00 FF 
074c4     88 E4 05 F1 | 	add	objptr, ##38024
074c8     F2 26 62 FC | 	wrlong	local01, objptr
074cc     4A 00 00 FF 
074d0     88 E4 85 F1 | 	sub	objptr, ##38024
074d4                 | ' '   print "deleted first line"
074d4                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
074d4                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
074d4                 | '   return 0
074d4     00 FA 05 F6 | 	mov	result1, #0
074d8     70 00 90 FD | 	jmp	#LR__0615
074dc                 | LR__0613
074dc                 | ' 
074dc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
074dc     28 4E 05 F1 | 	add	fp, #40
074e0     A7 26 02 FB | 	rdlong	local01, fp
074e4     28 4E 85 F1 | 	sub	fp, #40
074e8     FF FF 3F FF 
074ec     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
074f0     24 4E 05 51 |  if_ne	add	fp, #36
074f4     A7 28 02 5B |  if_ne	rdlong	local02, fp
074f8     24 4E 85 51 |  if_ne	sub	fp, #36
074fc     FF FF 7F 5F 
07500     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
07504     40 00 90 AD |  if_e	jmp	#LR__0614
07508     28 4E 05 F1 | 	add	fp, #40
0750c     A7 12 02 FB | 	rdlong	arg01, fp
07510     10 12 06 F1 | 	add	arg01, #16
07514     04 4E 85 F1 | 	sub	fp, #4
07518     A7 14 02 FB | 	rdlong	arg02, fp
0751c     24 4E 85 F1 | 	sub	fp, #36
07520     1C C7 B1 FD | 	call	#_pslpoke
07524     24 4E 05 F1 | 	add	fp, #36
07528     A7 12 02 FB | 	rdlong	arg01, fp
0752c     14 12 06 F1 | 	add	arg01, #20
07530     04 4E 05 F1 | 	add	fp, #4
07534     A7 14 02 FB | 	rdlong	arg02, fp
07538     28 4E 85 F1 | 	sub	fp, #40
0753c     00 C7 B1 FD | 	call	#_pslpoke
07540                 | '    pslpoke(header(5)+16,header(4))  
07540                 | '    pslpoke(header(4)+20, header(5))
07540                 | '    return 0
07540     00 FA 05 F6 | 	mov	result1, #0
07544     04 00 90 FD | 	jmp	#LR__0615
07548                 | LR__0614
07548     00 FA 05 F6 | 	mov	result1, #0
0754c                 | LR__0615
0754c     A7 F0 03 F6 | 	mov	ptra, fp
07550     B2 00 A0 FD | 	call	#popregs_
07554                 | _deleteline_ret
07554     2D 00 64 FD | 	ret
07558                 | 
07558                 | ' 
07558                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07558                 | ' 
07558                 | ' sub save_line
07558                 | _save_line
07558     03 4A 05 F6 | 	mov	COUNT_, #3
0755c     A8 00 A0 FD | 	call	#pushregs_
07560     4A 00 00 FF 
07564     7C E4 05 F1 | 	add	objptr, ##38012
07568     F2 16 02 FB | 	rdlong	arg03, objptr
0756c     01 16 06 F1 | 	add	arg03, #1
07570     05 00 00 FF 
07574     18 E4 85 F1 | 	sub	objptr, ##2584
07578     F2 14 02 FB | 	rdlong	arg02, objptr
0757c     0B 15 02 FD | 	qmul	arg02, arg03
07580     0E 00 00 FF 
07584     44 E4 85 F1 | 	sub	objptr, ##7236
07588     F2 12 02 FB | 	rdlong	arg01, objptr
0758c     37 00 00 FF 
07590     20 E4 85 F1 | 	sub	objptr, ##28192
07594     09 27 02 F6 | 	mov	local01, arg01
07598     18 28 62 FD | 	getqx	local02
0759c     97 06 48 FB | 	callpa	#(@LR__0621-@LR__0620)>>2,fcache_load_ptr_
075a0                 | LR__0620
075a0     13 FB C9 FA | 	rdbyte	result1, local01 wz
075a4     01 26 06 51 |  if_ne	add	local01, #1
075a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0620
075ac                 | LR__0621
075ac     09 27 82 F1 | 	sub	local01, arg01
075b0     03 26 CE F7 | 	test	local01, #3 wz
075b4     02 26 46 50 |  if_ne	shr	local01, #2
075b8     01 26 06 51 |  if_ne	add	local01, #1
075bc     02 26 66 50 |  if_ne	shl	local01, #2
075c0     14 2B 02 F6 | 	mov	local03, local02
075c4     13 2B 02 F1 | 	add	local03, local01
075c8     43 00 00 FF 
075cc     5C E4 05 F1 | 	add	objptr, ##34396
075d0     F2 16 02 FB | 	rdlong	arg03, objptr
075d4     14 17 02 F1 | 	add	arg03, local02
075d8     04 00 00 FF 
075dc     28 E4 05 F1 | 	add	objptr, ##2088
075e0     F2 16 62 FC | 	wrlong	arg03, objptr
075e4     04 E4 05 F1 | 	add	objptr, #4
075e8     F2 26 62 FC | 	wrlong	local01, objptr
075ec     0C E4 85 F1 | 	sub	objptr, #12
075f0     F2 12 02 F6 | 	mov	arg01, objptr
075f4     04 00 00 FF 
075f8     20 E4 85 F1 | 	sub	objptr, ##2080
075fc     F2 14 02 FB | 	rdlong	arg02, objptr
07600     14 17 02 F6 | 	mov	arg03, local02
07604     37 00 00 FF 
07608     90 E5 85 F1 | 	sub	objptr, ##28560
0760c     A0 F2 B1 FD | 	call	#_psram_spin2_write
07610     2B 00 00 FF 
07614     54 E5 05 F1 | 	add	objptr, ##22356
07618     F2 12 02 FB | 	rdlong	arg01, objptr
0761c     0C 00 00 FF 
07620     3C E4 05 F1 | 	add	objptr, ##6204
07624     F2 14 02 FB | 	rdlong	arg02, objptr
07628     14 15 02 F1 | 	add	arg02, local02
0762c     13 17 02 F6 | 	mov	arg03, local01
07630     37 00 00 FF 
07634     90 E5 85 F1 | 	sub	objptr, ##28560
07638     74 F2 B1 FD | 	call	#_psram_spin2_write
0763c     37 00 00 FF 
07640     90 E5 05 F1 | 	add	objptr, ##28560
07644     F2 26 02 FB | 	rdlong	local01, objptr
07648     15 27 02 F1 | 	add	local01, local03
0764c     F2 26 62 FC | 	wrlong	local01, objptr
07650     43 00 00 FF 
07654     5C E4 85 F1 | 	sub	objptr, ##34396
07658     A7 F0 03 F6 | 	mov	ptra, fp
0765c     B2 00 A0 FD | 	call	#popregs_
07660                 | _save_line_ret
07660     2D 00 64 FD | 	ret
07664                 | 
07664                 | ' 
07664                 | ' '----- Insert a new line into the middle of the program
07664                 | ' 
07664                 | ' function insertline(aline as ulong) as integer
07664                 | _insertline
07664     02 4A 05 F6 | 	mov	COUNT_, #2
07668     A8 00 A0 FD | 	call	#pushregs_
0766c     28 F0 07 F1 | 	add	ptra, #40
07670     04 4E 05 F1 | 	add	fp, #4
07674     A7 12 62 FC | 	wrlong	arg01, fp
07678     4A 00 00 FF 
0767c     88 E4 05 F1 | 	add	objptr, ##38024
07680     F2 26 02 FB | 	rdlong	local01, objptr
07684     04 4E 05 F1 | 	add	fp, #4
07688     A7 26 62 FC | 	wrlong	local01, fp
0768c     08 4E 85 F1 | 	sub	fp, #8
07690                 | ' 
07690                 | ' do
07690     3E 00 00 FF 
07694     BC E5 85 F1 | 	sub	objptr, ##32188
07698                 | LR__0630
07698     10 4E 05 F1 | 	add	fp, #16
0769c     A7 12 02 F6 | 	mov	arg01, fp
076a0     08 4E 85 F1 | 	sub	fp, #8
076a4     A7 14 02 FB | 	rdlong	arg02, fp
076a8     08 4E 85 F1 | 	sub	fp, #8
076ac     18 16 06 F6 | 	mov	arg03, #24
076b0     60 F1 B1 FD | 	call	#_psram_spin2_read1
076b4     08 4E 05 F1 | 	add	fp, #8
076b8     A7 26 02 FB | 	rdlong	local01, fp
076bc     04 4E 05 F1 | 	add	fp, #4
076c0     A7 26 62 FC | 	wrlong	local01, fp
076c4     18 4E 05 F1 | 	add	fp, #24
076c8     A7 26 02 FB | 	rdlong	local01, fp
076cc     1C 4E 85 F1 | 	sub	fp, #28
076d0     A7 26 62 FC | 	wrlong	local01, fp
076d4     08 4E 05 F1 | 	add	fp, #8
076d8     A7 26 02 FB | 	rdlong	local01, fp
076dc     0C 4E 85 F1 | 	sub	fp, #12
076e0     A7 16 02 FB | 	rdlong	arg03, fp
076e4     04 4E 85 F1 | 	sub	fp, #4
076e8     0B 27 12 F2 | 	cmp	local01, arg03 wc
076ec     24 4E 05 C1 |  if_b	add	fp, #36
076f0     A7 28 02 CB |  if_b	rdlong	local02, fp
076f4     24 4E 85 C1 |  if_b	sub	fp, #36
076f8     FF FF 3F CF 
076fc     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07700     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0630
07704     0B 00 00 FF 
07708     CC E4 85 F1 | 	sub	objptr, ##5836
0770c                 | ' 
0770c                 | ' if header(0)=aline then return -1 				' delete it first
0770c     10 4E 05 F1 | 	add	fp, #16
07710     A7 26 02 FB | 	rdlong	local01, fp
07714     0C 4E 85 F1 | 	sub	fp, #12
07718     A7 28 02 FB | 	rdlong	local02, fp
0771c     04 4E 85 F1 | 	sub	fp, #4
07720     14 27 0A F2 | 	cmp	local01, local02 wz
07724     01 FA 65 A6 |  if_e	neg	result1, #1
07728     48 01 90 AD |  if_e	jmp	#LR__0633
0772c                 | ' if header(0)<aline then return -2 				' end of program reached
0772c     10 4E 05 F1 | 	add	fp, #16
07730     A7 26 02 FB | 	rdlong	local01, fp
07734     0C 4E 85 F1 | 	sub	fp, #12
07738     A7 16 02 FB | 	rdlong	arg03, fp
0773c     04 4E 85 F1 | 	sub	fp, #4
07740     0B 27 12 F2 | 	cmp	local01, arg03 wc
07744     02 FA 65 C6 |  if_b	neg	result1, #2
07748     28 01 90 CD |  if_b	jmp	#LR__0633
0774c                 | ' 
0774c                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
0774c     20 4E 05 F1 | 	add	fp, #32
07750     A7 26 02 FB | 	rdlong	local01, fp
07754     20 4E 85 F1 | 	sub	fp, #32
07758     FF FF 7F FF 
0775c     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07760     78 00 90 5D |  if_ne	jmp	#LR__0631
07764     43 00 00 FF 
07768     5C E4 05 F1 | 	add	objptr, ##34396
0776c     F2 26 02 FB | 	rdlong	local01, objptr
07770     07 00 00 FF 
07774     2C E4 05 F1 | 	add	objptr, ##3628
07778     F2 26 62 FC | 	wrlong	local01, objptr
0777c     0C 4E 05 F1 | 	add	fp, #12
07780     A7 12 02 FB | 	rdlong	arg01, fp
07784     0C 4E 85 F1 | 	sub	fp, #12
07788     10 12 06 F1 | 	add	arg01, #16
0778c     07 00 00 FF 
07790     2C E4 85 F1 | 	sub	objptr, ##3628
07794     F2 14 02 FB | 	rdlong	arg02, objptr
07798     43 00 00 FF 
0779c     5C E4 85 F1 | 	sub	objptr, ##34396
077a0     9C C4 B1 FD | 	call	#_pslpoke
077a4     47 00 00 FF 
077a8     8C E4 05 F1 | 	add	objptr, ##36492
077ac     FF FF FF FF 
077b0     F2 FE 6B FC | 	wrlong	##-1, objptr
077b4     0C 4E 05 F1 | 	add	fp, #12
077b8     A7 26 02 FB | 	rdlong	local01, fp
077bc     0C 4E 85 F1 | 	sub	fp, #12
077c0     04 E4 05 F1 | 	add	objptr, #4
077c4     F2 26 62 FC | 	wrlong	local01, objptr
077c8     47 00 00 FF 
077cc     90 E4 85 F1 | 	sub	objptr, ##36496
077d0     84 FD BF FD | 	call	#_save_line
077d4                 | '   programstart=programptr
077d4                 | '   pslpoke(lineptr2+16,programptr)
077d4                 | '   ucompiledline(4)=$FFFF_FFFF
077d4                 | '   ucompiledline(5)=lineptr2
077d4                 | '   save_line
077d4                 | '   return 0
077d4     00 FA 05 F6 | 	mov	result1, #0
077d8     98 00 90 FD | 	jmp	#LR__0633
077dc                 | LR__0631
077dc                 | ' 
077dc                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
077dc     20 4E 05 F1 | 	add	fp, #32
077e0     A7 26 02 FB | 	rdlong	local01, fp
077e4     20 4E 85 F1 | 	sub	fp, #32
077e8     FF FF 7F FF 
077ec     FF 27 0E F2 | 	cmp	local01, ##-1 wz
077f0     7C 00 90 AD |  if_e	jmp	#LR__0632
077f4     20 4E 05 F1 | 	add	fp, #32
077f8     A7 26 02 FB | 	rdlong	local01, fp
077fc     47 00 00 FF 
07800     8C E4 05 F1 | 	add	objptr, ##36492
07804     F2 26 62 FC | 	wrlong	local01, objptr
07808     14 4E 85 F1 | 	sub	fp, #20
0780c     A7 26 02 FB | 	rdlong	local01, fp
07810     04 E4 05 F1 | 	add	objptr, #4
07814     F2 26 62 FC | 	wrlong	local01, objptr
07818     A7 12 02 FB | 	rdlong	arg01, fp
0781c     0C 4E 85 F1 | 	sub	fp, #12
07820     10 12 06 F1 | 	add	arg01, #16
07824     04 00 00 FF 
07828     34 E4 85 F1 | 	sub	objptr, ##2100
0782c     F2 14 02 FB | 	rdlong	arg02, objptr
07830     43 00 00 FF 
07834     5C E4 85 F1 | 	sub	objptr, ##34396
07838     04 C4 B1 FD | 	call	#_pslpoke
0783c     20 4E 05 F1 | 	add	fp, #32
07840     A7 12 02 FB | 	rdlong	arg01, fp
07844     20 4E 85 F1 | 	sub	fp, #32
07848     14 12 06 F1 | 	add	arg01, #20
0784c     43 00 00 FF 
07850     5C E4 05 F1 | 	add	objptr, ##34396
07854     F2 14 02 FB | 	rdlong	arg02, objptr
07858     43 00 00 FF 
0785c     5C E4 85 F1 | 	sub	objptr, ##34396
07860     DC C3 B1 FD | 	call	#_pslpoke
07864     F0 FC BF FD | 	call	#_save_line
07868                 | '   ucompiledline(4)=header(4)
07868                 | '   ucompiledline(5)=lineptr2
07868                 | '   pslpoke(lineptr2+16,programptr)
07868                 | '   pslpoke(header(4)+20,programptr)
07868                 | '   save_line
07868                 | '   return 0
07868     00 FA 05 F6 | 	mov	result1, #0
0786c     04 00 90 FD | 	jmp	#LR__0633
07870                 | LR__0632
07870     00 FA 05 F6 | 	mov	result1, #0
07874                 | LR__0633
07874     A7 F0 03 F6 | 	mov	ptra, fp
07878     B2 00 A0 FD | 	call	#popregs_
0787c                 | _insertline_ret
0787c     2D 00 64 FD | 	ret
07880                 | 
07880                 | ' 
07880                 | ' '----- Adds a new line at the end of the program
07880                 | ' 
07880                 | ' sub add_line_at_end(aline) 
07880                 | _add_line_at_end
07880     4A 00 00 FF 
07884     8C E4 05 F1 | 	add	objptr, ##38028
07888     F2 12 62 FC | 	wrlong	arg01, objptr
0788c     04 E4 05 F1 | 	add	objptr, #4
07890     F2 14 02 FB | 	rdlong	arg02, objptr
07894     03 00 00 FF 
07898     04 E4 85 F1 | 	sub	objptr, ##1540
0789c     F2 14 62 FC | 	wrlong	arg02, objptr
078a0     03 00 00 FF 
078a4     04 E4 05 F1 | 	add	objptr, ##1540
078a8     F2 12 02 FB | 	rdlong	arg01, objptr
078ac     14 12 06 F1 | 	add	arg01, #20
078b0     07 00 00 FF 
078b4     34 E4 85 F1 | 	sub	objptr, ##3636
078b8     F2 14 02 FB | 	rdlong	arg02, objptr
078bc     43 00 00 FF 
078c0     5C E4 85 F1 | 	sub	objptr, ##34396
078c4     78 C3 B1 FD | 	call	#_pslpoke
078c8     43 00 00 FF 
078cc     5C E4 05 F1 | 	add	objptr, ##34396
078d0     F2 14 02 FB | 	rdlong	arg02, objptr
078d4     07 00 00 FF 
078d8     34 E4 05 F1 | 	add	objptr, ##3636
078dc     F2 14 62 FC | 	wrlong	arg02, objptr
078e0     03 00 00 FF 
078e4     00 E4 85 F1 | 	sub	objptr, ##1536
078e8     FF FF BF FF 
078ec     F2 FE 6B FC | 	wrlong	##2147483647, objptr
078f0                 | ' 
078f0                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
078f0                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
078f0     04 00 00 FF 
078f4     34 E4 85 F1 | 	sub	objptr, ##2100
078f8     F2 14 02 FB | 	rdlong	arg02, objptr
078fc     43 00 00 FF 
07900     5C E4 85 F1 | 	sub	objptr, ##34396
07904     00 04 00 FF 
07908     00 14 0E F2 | 	cmp	arg02, ##524288 wz
0790c     47 00 00 AF 
07910     8C E4 05 A1 |  if_e	add	objptr, ##36492
07914     FF FF FF AF 
07918     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
0791c     47 00 00 AF 
07920     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07924     30 FC BF FD | 	call	#_save_line
07928     43 00 00 FF 
0792c     5C E4 05 F1 | 	add	objptr, ##34396
07930     F2 12 02 FB | 	rdlong	arg01, objptr
07934     43 00 00 FF 
07938     5C E4 85 F1 | 	sub	objptr, ##34396
0793c     01 14 66 F6 | 	neg	arg02, #1
07940     FC C2 B1 FD | 	call	#_pslpoke
07944                 | _add_line_at_end_ret
07944     2D 00 64 FD | 	ret
07948                 | 
07948                 | ' 
07948                 | ' '--------------------------------------------------------------------------------------------------------------------------
07948                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
07948                 | ' '--------------------------------------------------------------------------------------------------------------------------
07948                 | ' 
07948                 | ' '--------------------------------------------------------------------------------------------------------------------------
07948                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
07948                 | ' '--------------------------------------------------------------------------------------------------------------------------
07948                 | ' 
07948                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
07948                 | ' 
07948                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
07948                 | _compile_immediate
07948     0A 4A 05 F6 | 	mov	COUNT_, #10
0794c     A8 00 A0 FD | 	call	#pushregs_
07950                 | _compile_immediate_enter
07950     09 2D 02 F6 | 	mov	local04, arg01
07954     0A 2F 02 F6 | 	mov	local05, arg02
07958     00 30 06 F6 | 	mov	local06, #0
0795c     00 32 06 F6 | 	mov	local07, #0
07960     00 34 06 F6 | 	mov	local08, #0
07964                 | ' 
07964                 | ' ' linetype=cont+1
07964                 | ' ' 1 : this is the first part of the line that will continue
07964                 | ' ' 2 - this is the continuation of the line
07964                 | ' ' 3 - this is the last continued line
07964                 | ' ' 4 - this is the one and only part
07964                 | ' ' 5 - continued after if/else
07964                 | ' 
07964                 | ' err=0
07964                 | ' cmd=0
07964                 | ' vars=0
07964                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
07964     02 2C 0E F2 | 	cmp	local04, #2 wz
07968     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
0796c     24 00 90 5D |  if_ne	jmp	#LR__0640
07970     35 00 00 FF 
07974     10 E4 05 F1 | 	add	objptr, ##27152
07978     F2 32 02 FB | 	rdlong	local07, objptr
0797c     01 36 06 F6 | 	mov	local09, #1
07980     02 00 00 FF 
07984     34 E4 05 F1 | 	add	objptr, ##1076
07988     F2 02 68 FC | 	wrlong	#1, objptr
0798c     37 00 00 FF 
07990     44 E4 85 F1 | 	sub	objptr, ##28228
07994                 | LR__0640
07994                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07994     04 2C 0E F2 | 	cmp	local04, #4 wz
07998     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
0799c     30 00 90 5D |  if_ne	jmp	#LR__0641
079a0     35 00 00 FF 
079a4     18 E4 05 F1 | 	add	objptr, ##27160
079a8     F2 32 02 FB | 	rdlong	local07, objptr
079ac     02 36 06 F6 | 	mov	local09, #2
079b0     02 00 00 FF 
079b4     2C E4 05 F1 | 	add	objptr, ##1068
079b8     F2 04 68 FC | 	wrlong	#2, objptr
079bc     13 00 00 FF 
079c0     38 E4 05 F1 | 	add	objptr, ##9784
079c4     F2 04 68 FC | 	wrlong	#2, objptr
079c8     4A 00 00 FF 
079cc     7C E4 85 F1 | 	sub	objptr, ##38012
079d0                 | LR__0641
079d0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
079d0     05 2C 0E F2 | 	cmp	local04, #5 wz
079d4     40 00 90 5D |  if_ne	jmp	#LR__0642
079d8     37 00 00 FF 
079dc     44 E4 05 F1 | 	add	objptr, ##28228
079e0     F2 FC 01 FB | 	rdlong	result2, objptr
079e4     FE 36 02 F6 | 	mov	local09, result2
079e8     03 36 66 F0 | 	shl	local09, #3
079ec     02 00 00 FF 
079f0     38 E4 85 F1 | 	sub	objptr, ##1080
079f4     F2 36 02 F1 | 	add	local09, objptr
079f8     04 36 06 F1 | 	add	local09, #4
079fc     1B 33 02 FB | 	rdlong	local07, local09
07a00     01 FC 05 F1 | 	add	result2, #1
07a04     02 00 00 FF 
07a08     38 E4 05 F1 | 	add	objptr, ##1080
07a0c     F2 FC 61 FC | 	wrlong	result2, objptr
07a10     37 00 00 FF 
07a14     44 E4 85 F1 | 	sub	objptr, ##28228
07a18                 | LR__0642
07a18                 | ' 
07a18                 | ' 'print  "In compile_immediate cmd=:", cmd
07a18                 | ' 451 select case cmd
07a18     5C 32 0E F2 | 	cmp	local07, #92 wz
07a1c     D8 02 90 AD |  if_e	jmp	#LR__0643
07a20     B9 32 0E F2 | 	cmp	local07, #185 wz
07a24     DC 02 90 AD |  if_e	jmp	#LR__0644
07a28     47 32 0E F2 | 	cmp	local07, #71 wz
07a2c     E4 02 90 AD |  if_e	jmp	#LR__0645
07a30     59 32 0E F2 | 	cmp	local07, #89 wz
07a34     EC 02 90 AD |  if_e	jmp	#LR__0646
07a38     C3 32 0E F2 | 	cmp	local07, #195 wz
07a3c     F4 02 90 AD |  if_e	jmp	#LR__0647
07a40     45 32 0E F2 | 	cmp	local07, #69 wz
07a44     F8 02 90 AD |  if_e	jmp	#LR__0648
07a48     69 32 0E F2 | 	cmp	local07, #105 wz
07a4c     00 03 90 AD |  if_e	jmp	#LR__0649
07a50     40 32 0E F2 | 	cmp	local07, #64 wz
07a54     F0 06 90 AD |  if_e	jmp	#LR__0724
07a58     B4 32 0E F2 | 	cmp	local07, #180 wz
07a5c     FC 02 90 AD |  if_e	jmp	#LR__0650
07a60     49 32 0E F2 | 	cmp	local07, #73 wz
07a64     00 03 90 AD |  if_e	jmp	#LR__0651
07a68     C4 32 0E F2 | 	cmp	local07, #196 wz
07a6c     04 03 90 AD |  if_e	jmp	#LR__0652
07a70     AE 32 0E F2 | 	cmp	local07, #174 wz
07a74     08 03 90 AD |  if_e	jmp	#LR__0653
07a78     B0 32 0E F2 | 	cmp	local07, #176 wz
07a7c     0C 03 90 AD |  if_e	jmp	#LR__0654
07a80     AF 32 0E F2 | 	cmp	local07, #175 wz
07a84     10 03 90 AD |  if_e	jmp	#LR__0655
07a88     B1 32 0E F2 | 	cmp	local07, #177 wz
07a8c     14 03 90 AD |  if_e	jmp	#LR__0656
07a90     CF 32 0E F2 | 	cmp	local07, #207 wz
07a94     18 03 90 AD |  if_e	jmp	#LR__0657
07a98     68 32 0E F2 | 	cmp	local07, #104 wz
07a9c     1C 03 90 AD |  if_e	jmp	#LR__0658
07aa0     B7 32 0E F2 | 	cmp	local07, #183 wz
07aa4     A0 06 90 AD |  if_e	jmp	#LR__0724
07aa8     74 32 0E F2 | 	cmp	local07, #116 wz
07aac     18 03 90 AD |  if_e	jmp	#LR__0659
07ab0     73 32 0E F2 | 	cmp	local07, #115 wz
07ab4     20 03 90 AD |  if_e	jmp	#LR__0660
07ab8     6C 32 0E F2 | 	cmp	local07, #108 wz
07abc     28 03 90 AD |  if_e	jmp	#LR__0661
07ac0     89 32 0E F2 | 	cmp	local07, #137 wz
07ac4     80 06 90 AD |  if_e	jmp	#LR__0724
07ac8     C2 32 0E F2 | 	cmp	local07, #194 wz
07acc     28 03 90 AD |  if_e	jmp	#LR__0662
07ad0     72 32 0E F2 | 	cmp	local07, #114 wz
07ad4     2C 03 90 AD |  if_e	jmp	#LR__0663
07ad8     5D 32 0E F2 | 	cmp	local07, #93 wz
07adc     30 03 90 AD |  if_e	jmp	#LR__0664
07ae0     96 32 0E F2 | 	cmp	local07, #150 wz
07ae4     38 03 90 AD |  if_e	jmp	#LR__0665
07ae8     43 32 0E F2 | 	cmp	local07, #67 wz
07aec     3C 03 90 AD |  if_e	jmp	#LR__0666
07af0     5A 32 0E F2 | 	cmp	local07, #90 wz
07af4     44 03 90 AD |  if_e	jmp	#LR__0667
07af8     AB 32 0E F2 | 	cmp	local07, #171 wz
07afc     48 06 90 AD |  if_e	jmp	#LR__0724
07b00     BD 32 0E F2 | 	cmp	local07, #189 wz
07b04     44 03 90 AD |  if_e	jmp	#LR__0668
07b08     BB 32 0E F2 | 	cmp	local07, #187 wz
07b0c     4C 03 90 AD |  if_e	jmp	#LR__0669
07b10     4E 32 0E F2 | 	cmp	local07, #78 wz
07b14     54 03 90 AD |  if_e	jmp	#LR__0670
07b18     A9 32 0E F2 | 	cmp	local07, #169 wz
07b1c     6C 03 90 AD |  if_e	jmp	#LR__0672
07b20     46 32 0E F2 | 	cmp	local07, #70 wz
07b24     84 03 90 AD |  if_e	jmp	#LR__0674
07b28     71 32 0E F2 | 	cmp	local07, #113 wz
07b2c     8C 03 90 AD |  if_e	jmp	#LR__0675
07b30     60 32 0E F2 | 	cmp	local07, #96 wz
07b34     90 03 90 AD |  if_e	jmp	#LR__0676
07b38     4A 32 0E F2 | 	cmp	local07, #74 wz
07b3c     94 03 90 AD |  if_e	jmp	#LR__0677
07b40     48 32 0E F2 | 	cmp	local07, #72 wz
07b44     98 03 90 AD |  if_e	jmp	#LR__0678
07b48     58 32 0E F2 | 	cmp	local07, #88 wz
07b4c     A0 03 90 AD |  if_e	jmp	#LR__0679
07b50     5F 32 0E F2 | 	cmp	local07, #95 wz
07b54     A8 03 90 AD |  if_e	jmp	#LR__0680
07b58     B5 32 0E F2 | 	cmp	local07, #181 wz
07b5c     AC 03 90 AD |  if_e	jmp	#LR__0681
07b60     8A 32 0E F2 | 	cmp	local07, #138 wz
07b64     B4 03 90 AD |  if_e	jmp	#LR__0682
07b68     4C 32 0E F2 | 	cmp	local07, #76 wz
07b6c     B8 03 90 AD |  if_e	jmp	#LR__0683
07b70     52 32 0E F2 | 	cmp	local07, #82 wz
07b74     C0 03 90 AD |  if_e	jmp	#LR__0684
07b78     97 32 0E F2 | 	cmp	local07, #151 wz
07b7c     C8 03 90 AD |  if_e	jmp	#LR__0685
07b80     C6 32 0E F2 | 	cmp	local07, #198 wz
07b84     CC 03 90 AD |  if_e	jmp	#LR__0686
07b88     61 32 0E F2 | 	cmp	local07, #97 wz
07b8c     D0 03 90 AD |  if_e	jmp	#LR__0687
07b90     63 32 0E F2 | 	cmp	local07, #99 wz
07b94     D4 03 90 AD |  if_e	jmp	#LR__0688
07b98     41 32 0E F2 | 	cmp	local07, #65 wz
07b9c     A8 05 90 AD |  if_e	jmp	#LR__0724
07ba0     4B 32 0E F2 | 	cmp	local07, #75 wz
07ba4     D0 03 90 AD |  if_e	jmp	#LR__0689
07ba8     C1 32 0E F2 | 	cmp	local07, #193 wz
07bac     D4 03 90 AD |  if_e	jmp	#LR__0690
07bb0     B3 32 0E F2 | 	cmp	local07, #179 wz
07bb4     D8 03 90 AD |  if_e	jmp	#LR__0691
07bb8     5E 32 0E F2 | 	cmp	local07, #94 wz
07bbc     DC 03 90 AD |  if_e	jmp	#LR__0692
07bc0     7C 32 0E F2 | 	cmp	local07, #124 wz
07bc4     E0 03 90 AD |  if_e	jmp	#LR__0693
07bc8     7D 32 0E F2 | 	cmp	local07, #125 wz
07bcc     E4 03 90 AD |  if_e	jmp	#LR__0694
07bd0     7E 32 0E F2 | 	cmp	local07, #126 wz
07bd4     E8 03 90 AD |  if_e	jmp	#LR__0695
07bd8     7F 32 0E F2 | 	cmp	local07, #127 wz
07bdc     EC 03 90 AD |  if_e	jmp	#LR__0696
07be0     80 32 0E F2 | 	cmp	local07, #128 wz
07be4     F0 03 90 AD |  if_e	jmp	#LR__0697
07be8     55 32 0E F2 | 	cmp	local07, #85 wz
07bec     F4 03 90 AD |  if_e	jmp	#LR__0698
07bf0     75 32 0E F2 | 	cmp	local07, #117 wz
07bf4     F8 03 90 AD |  if_e	jmp	#LR__0699
07bf8     42 32 0E F2 | 	cmp	local07, #66 wz
07bfc     00 04 90 AD |  if_e	jmp	#LR__0700
07c00     95 32 0E F2 | 	cmp	local07, #149 wz
07c04     08 04 90 AD |  if_e	jmp	#LR__0701
07c08     AC 32 0E F2 | 	cmp	local07, #172 wz
07c0c     38 05 90 AD |  if_e	jmp	#LR__0724
07c10     81 32 0E F2 | 	cmp	local07, #129 wz
07c14     04 04 90 AD |  if_e	jmp	#LR__0702
07c18     44 32 0E F2 | 	cmp	local07, #68 wz
07c1c     08 04 90 AD |  if_e	jmp	#LR__0703
07c20     BC 32 0E F2 | 	cmp	local07, #188 wz
07c24     0C 04 90 AD |  if_e	jmp	#LR__0704
07c28     88 32 0E F2 | 	cmp	local07, #136 wz
07c2c     18 05 90 AD |  if_e	jmp	#LR__0724
07c30     B6 32 0E F2 | 	cmp	local07, #182 wz
07c34     0C 04 90 AD |  if_e	jmp	#LR__0705
07c38     92 32 0E F2 | 	cmp	local07, #146 wz
07c3c     14 04 90 AD |  if_e	jmp	#LR__0706
07c40     BE 32 0E F2 | 	cmp	local07, #190 wz
07c44     BC 05 90 AD |  if_e	jmp	#LR__0725
07c48     C7 32 0E F2 | 	cmp	local07, #199 wz
07c4c     D4 32 0E 52 |  if_ne	cmp	local07, #212 wz
07c50     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07c54     F0 04 90 AD |  if_e	jmp	#LR__0724
07c58     4D 32 0E F2 | 	cmp	local07, #77 wz
07c5c     00 04 90 AD |  if_e	jmp	#LR__0707
07c60     51 32 0E F2 | 	cmp	local07, #81 wz
07c64     08 04 90 AD |  if_e	jmp	#LR__0708
07c68     D2 32 0E F2 | 	cmp	local07, #210 wz
07c6c     10 04 90 AD |  if_e	jmp	#LR__0709
07c70     8E 32 0E F2 | 	cmp	local07, #142 wz
07c74     18 04 90 AD |  if_e	jmp	#LR__0710
07c78     90 32 0E F2 | 	cmp	local07, #144 wz
07c7c     1C 04 90 AD |  if_e	jmp	#LR__0711
07c80     8D 32 0E F2 | 	cmp	local07, #141 wz
07c84     20 04 90 AD |  if_e	jmp	#LR__0712
07c88     8C 32 0E F2 | 	cmp	local07, #140 wz
07c8c     24 04 90 AD |  if_e	jmp	#LR__0713
07c90     91 32 0E F2 | 	cmp	local07, #145 wz
07c94     28 04 90 AD |  if_e	jmp	#LR__0714
07c98     8B 32 0E F2 | 	cmp	local07, #139 wz
07c9c     2C 04 90 AD |  if_e	jmp	#LR__0715
07ca0     8F 32 0E F2 | 	cmp	local07, #143 wz
07ca4     30 04 90 AD |  if_e	jmp	#LR__0716
07ca8     B2 32 0E F2 | 	cmp	local07, #178 wz
07cac     34 04 90 AD |  if_e	jmp	#LR__0717
07cb0     6D 32 0E F2 | 	cmp	local07, #109 wz
07cb4     3C 04 90 AD |  if_e	jmp	#LR__0718
07cb8     70 32 0E F2 | 	cmp	local07, #112 wz
07cbc     88 04 90 AD |  if_e	jmp	#LR__0724
07cc0     56 32 0E F2 | 	cmp	local07, #86 wz
07cc4     38 04 90 AD |  if_e	jmp	#LR__0719
07cc8     57 32 0E F2 | 	cmp	local07, #87 wz
07ccc     78 04 90 AD |  if_e	jmp	#LR__0724
07cd0     79 32 0E F2 | 	cmp	local07, #121 wz
07cd4     34 04 90 AD |  if_e	jmp	#LR__0720
07cd8     77 32 0E F2 | 	cmp	local07, #119 wz
07cdc     38 04 90 AD |  if_e	jmp	#LR__0721
07ce0     78 32 0E F2 | 	cmp	local07, #120 wz
07ce4     3C 04 90 AD |  if_e	jmp	#LR__0722
07ce8     01 00 00 FF 
07cec     04 32 0E F2 | 	cmp	local07, ##516 wz
07cf0     3C 04 90 AD |  if_e	jmp	#LR__0723
07cf4     0C 05 90 FD | 	jmp	#LR__0725
07cf8                 | LR__0643
07cf8     58 0B B0 FD | 	call	#_compile_fun_2p
07cfc     FD 30 02 F6 | 	mov	local06, result1
07d00     44 04 90 FD | 	jmp	#LR__0724
07d04                 | LR__0644
07d04     1C 0E B0 FD | 	call	#_compile_fun_varp
07d08     FD 34 02 F6 | 	mov	local08, result1
07d0c     FE 30 02 F6 | 	mov	local06, result2
07d10     34 04 90 FD | 	jmp	#LR__0724
07d14                 | LR__0645
07d14     0C 0E B0 FD | 	call	#_compile_fun_varp
07d18     FD 34 02 F6 | 	mov	local08, result1
07d1c     FE 30 02 F6 | 	mov	local06, result2
07d20     24 04 90 FD | 	jmp	#LR__0724
07d24                 | LR__0646
07d24     FC 0D B0 FD | 	call	#_compile_fun_varp
07d28     FD 34 02 F6 | 	mov	local08, result1
07d2c     FE 30 02 F6 | 	mov	local06, result2
07d30     14 04 90 FD | 	jmp	#LR__0724
07d34                 | LR__0647
07d34                 | ' return expr()
07d34     58 42 B0 FD | 	call	#_expr
07d38     FD 30 02 F6 | 	mov	local06, result1
07d3c     08 04 90 FD | 	jmp	#LR__0724
07d40                 | LR__0648
07d40     E0 0D B0 FD | 	call	#_compile_fun_varp
07d44     FD 34 02 F6 | 	mov	local08, result1
07d48     FE 30 02 F6 | 	mov	local06, result2
07d4c     F8 03 90 FD | 	jmp	#LR__0724
07d50                 | LR__0649
07d50                 | ' return expr()
07d50     3C 42 B0 FD | 	call	#_expr
07d54     FD 30 02 F6 | 	mov	local06, result1
07d58     EC 03 90 FD | 	jmp	#LR__0724
07d5c                 | LR__0650
07d5c                 | ' return expr()
07d5c     30 42 B0 FD | 	call	#_expr
07d60     FD 30 02 F6 | 	mov	local06, result1
07d64     E0 03 90 FD | 	jmp	#LR__0724
07d68                 | LR__0651
07d68                 | ' return expr()
07d68     24 42 B0 FD | 	call	#_expr
07d6c     FD 30 02 F6 | 	mov	local06, result1
07d70     D4 03 90 FD | 	jmp	#LR__0724
07d74                 | LR__0652
07d74     DC 0A B0 FD | 	call	#_compile_fun_2p
07d78     FD 30 02 F6 | 	mov	local06, result1
07d7c     C8 03 90 FD | 	jmp	#LR__0724
07d80                 | LR__0653
07d80     D0 0A B0 FD | 	call	#_compile_fun_2p
07d84     FD 30 02 F6 | 	mov	local06, result1
07d88     BC 03 90 FD | 	jmp	#LR__0724
07d8c                 | LR__0654
07d8c     C4 0A B0 FD | 	call	#_compile_fun_2p
07d90     FD 30 02 F6 | 	mov	local06, result1
07d94     B0 03 90 FD | 	jmp	#LR__0724
07d98                 | LR__0655
07d98     B8 0A B0 FD | 	call	#_compile_fun_2p
07d9c     FD 30 02 F6 | 	mov	local06, result1
07da0     A4 03 90 FD | 	jmp	#LR__0724
07da4                 | LR__0656
07da4     AC 0A B0 FD | 	call	#_compile_fun_2p
07da8     FD 30 02 F6 | 	mov	local06, result1
07dac     98 03 90 FD | 	jmp	#LR__0724
07db0                 | LR__0657
07db0                 | ' return expr()
07db0     DC 41 B0 FD | 	call	#_expr
07db4     FD 30 02 F6 | 	mov	local06, result1
07db8     8C 03 90 FD | 	jmp	#LR__0724
07dbc                 | LR__0658
07dbc                 | ' return expr()
07dbc     D0 41 B0 FD | 	call	#_expr
07dc0     FD 30 02 F6 | 	mov	local06, result1
07dc4     80 03 90 FD | 	jmp	#LR__0724
07dc8                 | LR__0659
07dc8     58 0D B0 FD | 	call	#_compile_fun_varp
07dcc     FD 34 02 F6 | 	mov	local08, result1
07dd0     FE 30 02 F6 | 	mov	local06, result2
07dd4     70 03 90 FD | 	jmp	#LR__0724
07dd8                 | LR__0660
07dd8     48 0D B0 FD | 	call	#_compile_fun_varp
07ddc     FD 34 02 F6 | 	mov	local08, result1
07de0     FE 30 02 F6 | 	mov	local06, result2
07de4     60 03 90 FD | 	jmp	#LR__0724
07de8                 | LR__0661
07de8     38 0D B0 FD | 	call	#_compile_fun_varp
07dec     FD 34 02 F6 | 	mov	local08, result1
07df0     FE 30 02 F6 | 	mov	local06, result2
07df4     50 03 90 FD | 	jmp	#LR__0724
07df8                 | LR__0662
07df8                 | ' return expr()
07df8     94 41 B0 FD | 	call	#_expr
07dfc     FD 30 02 F6 | 	mov	local06, result1
07e00     44 03 90 FD | 	jmp	#LR__0724
07e04                 | LR__0663
07e04     40 22 B0 FD | 	call	#_compile_dim
07e08     FD 30 02 F6 | 	mov	local06, result1
07e0c     F4 03 90 FD | 	jmp	#LR__0725
07e10                 | LR__0664
07e10     10 0D B0 FD | 	call	#_compile_fun_varp
07e14     FD 34 02 F6 | 	mov	local08, result1
07e18     FE 30 02 F6 | 	mov	local06, result2
07e1c     28 03 90 FD | 	jmp	#LR__0724
07e20                 | LR__0665
07e20     30 0A B0 FD | 	call	#_compile_fun_2p
07e24     FD 30 02 F6 | 	mov	local06, result1
07e28     1C 03 90 FD | 	jmp	#LR__0724
07e2c                 | LR__0666
07e2c     F4 0C B0 FD | 	call	#_compile_fun_varp
07e30     FD 34 02 F6 | 	mov	local08, result1
07e34     FE 30 02 F6 | 	mov	local06, result2
07e38     0C 03 90 FD | 	jmp	#LR__0724
07e3c                 | LR__0667
07e3c     17 13 02 F6 | 	mov	arg01, local05
07e40     CC 20 B0 FD | 	call	#_compile_else
07e44     FD 30 02 F6 | 	mov	local06, result1
07e48     B8 03 90 FD | 	jmp	#LR__0725
07e4c                 | LR__0668
07e4c     D4 0C B0 FD | 	call	#_compile_fun_varp
07e50     FD 34 02 F6 | 	mov	local08, result1
07e54     FE 30 02 F6 | 	mov	local06, result2
07e58     EC 02 90 FD | 	jmp	#LR__0724
07e5c                 | LR__0669
07e5c     C4 0C B0 FD | 	call	#_compile_fun_varp
07e60     FD 34 02 F6 | 	mov	local08, result1
07e64     FE 30 02 F6 | 	mov	local06, result2
07e68     DC 02 90 FD | 	jmp	#LR__0724
07e6c                 | LR__0670
07e6c     01 2E 16 F2 | 	cmp	local05, #1 wc
07e70     08 00 90 CD |  if_b	jmp	#LR__0671
07e74     6C 33 B0 FD | 	call	#_compile_goto
07e78     88 03 90 FD | 	jmp	#LR__0725
07e7c                 | LR__0671
07e7c     19 12 06 F6 | 	mov	arg01, #25
07e80     00 14 06 F6 | 	mov	arg02, #0
07e84     18 BC B1 FD | 	call	#_printerror
07e88     78 03 90 FD | 	jmp	#LR__0725
07e8c                 | LR__0672
07e8c     01 2E 16 F2 | 	cmp	local05, #1 wc
07e90     08 00 90 CD |  if_b	jmp	#LR__0673
07e94     E8 32 B0 FD | 	call	#_compile_gosub
07e98     68 03 90 FD | 	jmp	#LR__0725
07e9c                 | LR__0673
07e9c     19 12 06 F6 | 	mov	arg01, #25
07ea0     00 14 06 F6 | 	mov	arg02, #0
07ea4     F8 BB B1 FD | 	call	#_printerror
07ea8     58 03 90 FD | 	jmp	#LR__0725
07eac                 | LR__0674
07eac     74 0C B0 FD | 	call	#_compile_fun_varp
07eb0     FD 34 02 F6 | 	mov	local08, result1
07eb4     FE 30 02 F6 | 	mov	local06, result2
07eb8     8C 02 90 FD | 	jmp	#LR__0724
07ebc                 | LR__0675
07ebc     0C 0B B0 FD | 	call	#_compile_fun_4p
07ec0     FD 30 02 F6 | 	mov	local06, result1
07ec4     80 02 90 FD | 	jmp	#LR__0724
07ec8                 | LR__0676
07ec8                 | ' return expr()
07ec8     C4 40 B0 FD | 	call	#_expr
07ecc     FD 30 02 F6 | 	mov	local06, result1
07ed0     74 02 90 FD | 	jmp	#LR__0724
07ed4                 | LR__0677
07ed4     44 28 B0 FD | 	call	#_compile_for
07ed8     FD 30 02 F6 | 	mov	local06, result1
07edc     24 03 90 FD | 	jmp	#LR__0725
07ee0                 | LR__0678
07ee0     40 0C B0 FD | 	call	#_compile_fun_varp
07ee4     FD 34 02 F6 | 	mov	local08, result1
07ee8     FE 30 02 F6 | 	mov	local06, result2
07eec     58 02 90 FD | 	jmp	#LR__0724
07ef0                 | LR__0679
07ef0     17 13 02 F6 | 	mov	arg01, local05
07ef4     90 1E B0 FD | 	call	#_compile_if
07ef8     FD 30 02 F6 | 	mov	local06, result1
07efc     04 03 90 FD | 	jmp	#LR__0725
07f00                 | LR__0680
07f00                 | ' return expr()
07f00     8C 40 B0 FD | 	call	#_expr
07f04     FD 30 02 F6 | 	mov	local06, result1
07f08     3C 02 90 FD | 	jmp	#LR__0724
07f0c                 | LR__0681
07f0c     E0 0D B0 FD | 	call	#_compile_input
07f10     FD 34 02 F6 | 	mov	local08, result1
07f14     FE 30 02 F6 | 	mov	local06, result2
07f18     2C 02 90 FD | 	jmp	#LR__0724
07f1c                 | LR__0682
07f1c                 | ' return expr()
07f1c     70 40 B0 FD | 	call	#_expr
07f20     FD 30 02 F6 | 	mov	local06, result1
07f24     20 02 90 FD | 	jmp	#LR__0724
07f28                 | LR__0683
07f28     F8 0B B0 FD | 	call	#_compile_fun_varp
07f2c     FD 34 02 F6 | 	mov	local08, result1
07f30     FE 30 02 F6 | 	mov	local06, result2
07f34     10 02 90 FD | 	jmp	#LR__0724
07f38                 | LR__0684
07f38     E8 0B B0 FD | 	call	#_compile_fun_varp
07f3c     FD 34 02 F6 | 	mov	local08, result1
07f40     FE 30 02 F6 | 	mov	local06, result2
07f44     00 02 90 FD | 	jmp	#LR__0724
07f48                 | LR__0685
07f48     08 09 B0 FD | 	call	#_compile_fun_2p
07f4c     FD 30 02 F6 | 	mov	local06, result1
07f50     F4 01 90 FD | 	jmp	#LR__0724
07f54                 | LR__0686
07f54                 | ' return expr()
07f54     38 40 B0 FD | 	call	#_expr
07f58     FD 30 02 F6 | 	mov	local06, result1
07f5c     E8 01 90 FD | 	jmp	#LR__0724
07f60                 | LR__0687
07f60                 | ' return expr()
07f60     2C 40 B0 FD | 	call	#_expr
07f64     FD 30 02 F6 | 	mov	local06, result1
07f68     DC 01 90 FD | 	jmp	#LR__0724
07f6c                 | LR__0688
07f6c                 | ' return expr()
07f6c     20 40 B0 FD | 	call	#_expr
07f70     FD 30 02 F6 | 	mov	local06, result1
07f74     D0 01 90 FD | 	jmp	#LR__0724
07f78                 | LR__0689
07f78     6C 30 B0 FD | 	call	#_compile_next
07f7c     FD 30 02 F6 | 	mov	local06, result1
07f80     80 02 90 FD | 	jmp	#LR__0725
07f84                 | LR__0690
07f84     4C 36 B0 FD | 	call	#_compile_on
07f88     FD 30 02 F6 | 	mov	local06, result1
07f8c     74 02 90 FD | 	jmp	#LR__0725
07f90                 | LR__0691
07f90     48 09 B0 FD | 	call	#_compile_fun_3p
07f94     FD 30 02 F6 | 	mov	local06, result1
07f98     AC 01 90 FD | 	jmp	#LR__0724
07f9c                 | LR__0692
07f9c                 | ' return expr()
07f9c     F0 3F B0 FD | 	call	#_expr
07fa0     FD 30 02 F6 | 	mov	local06, result1
07fa4     A0 01 90 FD | 	jmp	#LR__0724
07fa8                 | LR__0693
07fa8                 | ' return expr()
07fa8     E4 3F B0 FD | 	call	#_expr
07fac     FD 30 02 F6 | 	mov	local06, result1
07fb0     94 01 90 FD | 	jmp	#LR__0724
07fb4                 | LR__0694
07fb4                 | ' return expr()
07fb4     D8 3F B0 FD | 	call	#_expr
07fb8     FD 30 02 F6 | 	mov	local06, result1
07fbc     88 01 90 FD | 	jmp	#LR__0724
07fc0                 | LR__0695
07fc0                 | ' return expr()
07fc0     CC 3F B0 FD | 	call	#_expr
07fc4     FD 30 02 F6 | 	mov	local06, result1
07fc8     7C 01 90 FD | 	jmp	#LR__0724
07fcc                 | LR__0696
07fcc     FC 09 B0 FD | 	call	#_compile_fun_4p
07fd0     FD 30 02 F6 | 	mov	local06, result1
07fd4     70 01 90 FD | 	jmp	#LR__0724
07fd8                 | LR__0697
07fd8                 | ' return expr()
07fd8     B4 3F B0 FD | 	call	#_expr
07fdc     FD 30 02 F6 | 	mov	local06, result1
07fe0     64 01 90 FD | 	jmp	#LR__0724
07fe4                 | LR__0698
07fe4     6C 08 B0 FD | 	call	#_compile_fun_2p
07fe8     FD 30 02 F6 | 	mov	local06, result1
07fec     58 01 90 FD | 	jmp	#LR__0724
07ff0                 | LR__0699
07ff0     30 0B B0 FD | 	call	#_compile_fun_varp
07ff4     FD 34 02 F6 | 	mov	local08, result1
07ff8     FE 30 02 F6 | 	mov	local06, result2
07ffc     48 01 90 FD | 	jmp	#LR__0724
08000                 | LR__0700
08000     20 0B B0 FD | 	call	#_compile_fun_varp
08004     FD 34 02 F6 | 	mov	local08, result1
08008     FE 30 02 F6 | 	mov	local06, result2
0800c     38 01 90 FD | 	jmp	#LR__0724
08010                 | LR__0701
08010     40 08 B0 FD | 	call	#_compile_fun_2p
08014     FD 30 02 F6 | 	mov	local06, result1
08018     2C 01 90 FD | 	jmp	#LR__0724
0801c                 | LR__0702
0801c     34 08 B0 FD | 	call	#_compile_fun_2p
08020     FD 30 02 F6 | 	mov	local06, result1
08024     20 01 90 FD | 	jmp	#LR__0724
08028                 | LR__0703
08028     84 16 B0 FD | 	call	#_compile_print
0802c     FD 30 02 F6 | 	mov	local06, result1
08030     D0 01 90 FD | 	jmp	#LR__0725
08034                 | LR__0704
08034     EC 0A B0 FD | 	call	#_compile_fun_varp
08038     FD 34 02 F6 | 	mov	local08, result1
0803c     FE 30 02 F6 | 	mov	local06, result2
08040     04 01 90 FD | 	jmp	#LR__0724
08044                 | LR__0705
08044     B8 0B B0 FD | 	call	#_compile_read
08048     FD 34 02 F6 | 	mov	local08, result1
0804c     FE 30 02 F6 | 	mov	local06, result2
08050     F4 00 90 FD | 	jmp	#LR__0724
08054                 | LR__0706
08054                 | ' return expr()
08054     38 3F B0 FD | 	call	#_expr
08058     FD 30 02 F6 | 	mov	local06, result1
0805c     E8 00 90 FD | 	jmp	#LR__0724
08060                 | LR__0707
08060     C0 0A B0 FD | 	call	#_compile_fun_varp
08064     FD 34 02 F6 | 	mov	local08, result1
08068     FE 30 02 F6 | 	mov	local06, result2
0806c     D8 00 90 FD | 	jmp	#LR__0724
08070                 | LR__0708
08070     B0 0A B0 FD | 	call	#_compile_fun_varp
08074     FD 34 02 F6 | 	mov	local08, result1
08078     FE 30 02 F6 | 	mov	local06, result2
0807c     C8 00 90 FD | 	jmp	#LR__0724
08080                 | LR__0709
08080     A0 0A B0 FD | 	call	#_compile_fun_varp
08084     FD 34 02 F6 | 	mov	local08, result1
08088     FE 30 02 F6 | 	mov	local06, result2
0808c     B8 00 90 FD | 	jmp	#LR__0724
08090                 | LR__0710
08090     C0 07 B0 FD | 	call	#_compile_fun_2p
08094     FD 30 02 F6 | 	mov	local06, result1
08098     AC 00 90 FD | 	jmp	#LR__0724
0809c                 | LR__0711
0809c     B4 07 B0 FD | 	call	#_compile_fun_2p
080a0     FD 30 02 F6 | 	mov	local06, result1
080a4     A0 00 90 FD | 	jmp	#LR__0724
080a8                 | LR__0712
080a8     A8 07 B0 FD | 	call	#_compile_fun_2p
080ac     FD 30 02 F6 | 	mov	local06, result1
080b0     94 00 90 FD | 	jmp	#LR__0724
080b4                 | LR__0713
080b4     9C 07 B0 FD | 	call	#_compile_fun_2p
080b8     FD 30 02 F6 | 	mov	local06, result1
080bc     88 00 90 FD | 	jmp	#LR__0724
080c0                 | LR__0714
080c0     90 07 B0 FD | 	call	#_compile_fun_2p
080c4     FD 30 02 F6 | 	mov	local06, result1
080c8     7C 00 90 FD | 	jmp	#LR__0724
080cc                 | LR__0715
080cc     84 07 B0 FD | 	call	#_compile_fun_2p
080d0     FD 30 02 F6 | 	mov	local06, result1
080d4     70 00 90 FD | 	jmp	#LR__0724
080d8                 | LR__0716
080d8     78 07 B0 FD | 	call	#_compile_fun_2p
080dc     FD 30 02 F6 | 	mov	local06, result1
080e0     64 00 90 FD | 	jmp	#LR__0724
080e4                 | LR__0717
080e4     3C 0A B0 FD | 	call	#_compile_fun_varp
080e8     FD 34 02 F6 | 	mov	local08, result1
080ec     FE 30 02 F6 | 	mov	local06, result2
080f0     54 00 90 FD | 	jmp	#LR__0724
080f4                 | LR__0718
080f4     E4 07 B0 FD | 	call	#_compile_fun_3p
080f8     FD 30 02 F6 | 	mov	local06, result1
080fc     48 00 90 FD | 	jmp	#LR__0724
08100                 | LR__0719
08100                 | ' return expr()
08100     8C 3E B0 FD | 	call	#_expr
08104     FD 30 02 F6 | 	mov	local06, result1
08108     3C 00 90 FD | 	jmp	#LR__0724
0810c                 | LR__0720
0810c     44 07 B0 FD | 	call	#_compile_fun_2p
08110     FD 30 02 F6 | 	mov	local06, result1
08114     30 00 90 FD | 	jmp	#LR__0724
08118                 | LR__0721
08118     38 07 B0 FD | 	call	#_compile_fun_2p
0811c     FD 30 02 F6 | 	mov	local06, result1
08120     24 00 90 FD | 	jmp	#LR__0724
08124                 | LR__0722
08124     2C 07 B0 FD | 	call	#_compile_fun_2p
08128     FD 30 02 F6 | 	mov	local06, result1
0812c     18 00 90 FD | 	jmp	#LR__0724
08130                 | LR__0723
08130     1C 13 B0 FD | 	call	#_compile_array_assign
08134     FD 30 02 F6 | 	mov	local06, result1
08138     0E 30 0E F2 | 	cmp	local06, #14 wz
0813c     C4 00 90 5D |  if_ne	jmp	#LR__0725
08140                 | ' return 23
08140     17 30 06 F6 | 	mov	local06, #23
08144     BC 00 90 FD | 	jmp	#LR__0725
08148                 | ' return 23
08148                 | LR__0724
08148     19 2B 02 F6 | 	mov	local03, local07
0814c     1A 27 02 F6 | 	mov	local01, local08
08150     13 37 02 F6 | 	mov	local09, local01
08154     14 39 02 F6 | 	mov	local10, local02
08158     15 33 02 F6 | 	mov	local07, local03
0815c     4A 00 00 FF 
08160     7C E4 05 F1 | 	add	objptr, ##38012
08164     F2 26 02 FB | 	rdlong	local01, objptr
08168     13 35 02 F6 | 	mov	local08, local01
0816c     01 34 66 F0 | 	shl	local08, #1
08170     13 35 02 F1 | 	add	local08, local01
08174     02 34 66 F0 | 	shl	local08, #2
08178     03 00 00 FF 
0817c     00 E4 85 F1 | 	sub	objptr, ##1536
08180     F2 34 02 F1 | 	add	local08, objptr
08184     1A 37 62 FC | 	wrlong	local09, local08
08188     03 00 00 FF 
0818c     00 E4 05 F1 | 	add	objptr, ##1536
08190     F2 26 02 FB | 	rdlong	local01, objptr
08194     13 37 02 F6 | 	mov	local09, local01
08198     01 36 66 F0 | 	shl	local09, #1
0819c     13 37 02 F1 | 	add	local09, local01
081a0     02 36 66 F0 | 	shl	local09, #2
081a4     03 00 00 FF 
081a8     00 E4 85 F1 | 	sub	objptr, ##1536
081ac     F2 36 02 F1 | 	add	local09, objptr
081b0     04 36 06 F1 | 	add	local09, #4
081b4     1B 39 62 FC | 	wrlong	local10, local09
081b8     03 00 00 FF 
081bc     00 E4 05 F1 | 	add	objptr, ##1536
081c0     F2 26 02 FB | 	rdlong	local01, objptr
081c4     13 39 02 F6 | 	mov	local10, local01
081c8     01 38 66 F0 | 	shl	local10, #1
081cc     13 39 02 F1 | 	add	local10, local01
081d0     02 38 66 F0 | 	shl	local10, #2
081d4     03 00 00 FF 
081d8     00 E4 85 F1 | 	sub	objptr, ##1536
081dc     F2 38 02 F1 | 	add	local10, objptr
081e0     08 38 06 F1 | 	add	local10, #8
081e4     1C 33 62 FC | 	wrlong	local07, local10
081e8     03 00 00 FF 
081ec     00 E4 05 F1 | 	add	objptr, ##1536
081f0     F2 36 02 FB | 	rdlong	local09, objptr
081f4     01 36 06 F1 | 	add	local09, #1
081f8     F2 36 62 FC | 	wrlong	local09, objptr
081fc     4A 00 00 FF 
08200     7C E4 85 F1 | 	sub	objptr, ##38012
08204                 | LR__0725
08204                 | ' 
08204                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
08204                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
08204     03 2C 0E F2 | 	cmp	local04, #3 wz
08208     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
0820c     38 00 90 5D |  if_ne	jmp	#LR__0726
08210     4A 00 00 FF 
08214     7C E4 05 F1 | 	add	objptr, ##38012
08218     F2 38 02 FB | 	rdlong	local10, objptr
0821c     1C 27 02 F6 | 	mov	local01, local10
08220     01 26 66 F0 | 	shl	local01, #1
08224     1C 27 02 F1 | 	add	local01, local10
08228     02 26 66 F0 | 	shl	local01, #2
0822c     03 00 00 FF 
08230     00 E4 85 F1 | 	sub	objptr, ##1536
08234     F2 26 02 F1 | 	add	local01, objptr
08238     08 26 06 F1 | 	add	local01, #8
0823c     13 FD 6B FC | 	wrlong	#510, local01
08240     47 00 00 FF 
08244     7C E4 85 F1 | 	sub	objptr, ##36476
08248                 | LR__0726
08248                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
08248                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08248     4A 00 00 FF 
0824c     7C E4 05 F1 | 	add	objptr, ##38012
08250     F2 26 02 FB | 	rdlong	local01, objptr
08254     4A 00 00 FF 
08258     7C E4 85 F1 | 	sub	objptr, ##38012
0825c     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
08260                 | LR__0727
08260     13 39 02 F6 | 	mov	local10, local01
08264     01 38 66 F0 | 	shl	local10, #1
08268     13 39 02 F1 | 	add	local10, local01
0826c     02 38 66 F0 | 	shl	local10, #2
08270     47 00 00 FF 
08274     7C E4 05 F1 | 	add	objptr, ##36476
08278     F2 38 02 F1 | 	add	local10, objptr
0827c     08 38 06 F1 | 	add	local10, #8
08280     1C 39 02 FB | 	rdlong	local10, local10
08284     9B 38 0E F2 | 	cmp	local10, #155 wz
08288     47 00 00 FF 
0828c     7C E4 85 F1 | 	sub	objptr, ##36476
08290     70 00 90 5D |  if_ne	jmp	#LR__0728
08294     13 37 02 F6 | 	mov	local09, local01
08298     01 36 86 F1 | 	sub	local09, #1
0829c     1B 39 02 F6 | 	mov	local10, local09
082a0     01 38 66 F0 | 	shl	local10, #1
082a4     1B 39 02 F1 | 	add	local10, local09
082a8     02 38 66 F0 | 	shl	local10, #2
082ac     47 00 00 FF 
082b0     7C E4 05 F1 | 	add	objptr, ##36476
082b4     F2 38 02 F1 | 	add	local10, objptr
082b8     08 38 06 F1 | 	add	local10, #8
082bc     1C 39 02 FB | 	rdlong	local10, local10
082c0     11 38 0E F2 | 	cmp	local10, #17 wz
082c4     47 00 00 FF 
082c8     7C E4 85 F1 | 	sub	objptr, ##36476
082cc     34 00 90 5D |  if_ne	jmp	#LR__0728
082d0     13 37 02 F6 | 	mov	local09, local01
082d4     01 36 86 F1 | 	sub	local09, #1
082d8     1B 39 02 F6 | 	mov	local10, local09
082dc     01 38 66 F0 | 	shl	local10, #1
082e0     1B 39 02 F1 | 	add	local10, local09
082e4     02 38 66 F0 | 	shl	local10, #2
082e8     47 00 00 FF 
082ec     7C E4 05 F1 | 	add	objptr, ##36476
082f0     F2 38 02 F1 | 	add	local10, objptr
082f4     08 38 06 F1 | 	add	local10, #8
082f8     1C 25 68 FC | 	wrlong	#18, local10
082fc     47 00 00 FF 
08300     7C E4 85 F1 | 	sub	objptr, ##36476
08304                 | LR__0728
08304     01 26 86 F1 | 	sub	local01, #1
08308     01 26 56 F2 | 	cmps	local01, #1 wc
0830c     50 FF 9F 3D |  if_ae	jmp	#LR__0727
08310                 | LR__0729
08310                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
08310                 | ' return err
08310     18 FB 01 F6 | 	mov	result1, local06
08314     A7 F0 03 F6 | 	mov	ptra, fp
08318     B2 00 A0 FD | 	call	#popregs_
0831c                 | _compile_immediate_ret
0831c     2D 00 64 FD | 	ret
08320                 | 
08320                 | ' 
08320                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
08320                 | ' 
08320                 | ' function compile_immediate_assign(linetype as ulong) as ulong
08320                 | _compile_immediate_assign
08320     0C 4A 05 F6 | 	mov	COUNT_, #12
08324     A8 00 A0 FD | 	call	#pushregs_
08328     09 2D 02 F6 | 	mov	local04, arg01
0832c     FF 2A 06 F6 | 	mov	local03, #255
08330     01 2E 66 F6 | 	neg	local05, #1
08334     00 30 06 F6 | 	mov	local06, #0
08338                 | ' 
08338                 | ' t1.result_type=result_error : t1.result.uresult=0
08338                 | ' i=-1: j=-1 : err=0
08338                 | ' 
08338                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
08338     02 2C 0E F2 | 	cmp	local04, #2 wz
0833c     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
08340     35 00 00 AF 
08344     0C E4 05 A1 |  if_e	add	objptr, ##27148
08348     F2 32 02 AB |  if_e	rdlong	local07, objptr
0834c     02 00 00 AF 
08350     38 E4 05 A1 |  if_e	add	objptr, ##1080
08354     F2 04 68 AC |  if_e	wrlong	#2, objptr
08358     37 00 00 AF 
0835c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08360                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08360     04 2C 0E F2 | 	cmp	local04, #4 wz
08364     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
08368     2C 00 90 5D |  if_ne	jmp	#LR__0730
0836c     35 00 00 FF 
08370     14 E4 05 F1 | 	add	objptr, ##27156
08374     F2 32 02 FB | 	rdlong	local07, objptr
08378     02 00 00 FF 
0837c     30 E4 05 F1 | 	add	objptr, ##1072
08380     F2 06 68 FC | 	wrlong	#3, objptr
08384     13 00 00 FF 
08388     38 E4 05 F1 | 	add	objptr, ##9784
0838c     F2 04 68 FC | 	wrlong	#2, objptr
08390     4A 00 00 FF 
08394     7C E4 85 F1 | 	sub	objptr, ##38012
08398                 | LR__0730
08398                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08398     05 2C 0E F2 | 	cmp	local04, #5 wz
0839c     3C 00 90 5D |  if_ne	jmp	#LR__0731
083a0     37 00 00 FF 
083a4     44 E4 05 F1 | 	add	objptr, ##28228
083a8     F2 FA 01 FB | 	rdlong	result1, objptr
083ac     FD 32 02 F6 | 	mov	local07, result1
083b0     03 32 66 F0 | 	shl	local07, #3
083b4     02 00 00 FF 
083b8     38 E4 85 F1 | 	sub	objptr, ##1080
083bc     F2 32 02 F1 | 	add	local07, objptr
083c0     19 33 02 FB | 	rdlong	local07, local07
083c4     02 FA 05 F1 | 	add	result1, #2
083c8     02 00 00 FF 
083cc     38 E4 05 F1 | 	add	objptr, ##1080
083d0     F2 FA 61 FC | 	wrlong	result1, objptr
083d4     37 00 00 FF 
083d8     44 E4 85 F1 | 	sub	objptr, ##28228
083dc                 | LR__0731
083dc     19 13 02 F6 | 	mov	arg01, local07
083e0     01 14 06 F6 | 	mov	arg02, #1
083e4     D8 11 B2 FD | 	call	#__system__Right_S
083e8     FD 34 02 F6 | 	mov	local08, result1
083ec     A0 3B B0 FD | 	call	#_expr
083f0                 | ' 
083f0                 | ' suffix2$=right$(varname2$,1)
083f0                 | ' expr()
083f0                 | ' if varnum>0 then					' try to find a variable
083f0     35 00 00 FF 
083f4     08 E4 05 F1 | 	add	objptr, ##27144
083f8     F2 36 02 FB | 	rdlong	local09, objptr
083fc     35 00 00 FF 
08400     08 E4 85 F1 | 	sub	objptr, ##27144
08404     01 36 56 F2 | 	cmps	local09, #1 wc
08408     58 00 90 CD |  if_b	jmp	#LR__0734
0840c                 | '   for i=0 to varnum-1
0840c     00 38 06 F6 | 	mov	local10, #0
08410     35 00 00 FF 
08414     08 E4 05 F1 | 	add	objptr, ##27144
08418     F2 3A 02 FB | 	rdlong	local11, objptr
0841c     35 00 00 FF 
08420     08 E4 85 F1 | 	sub	objptr, ##27144
08424                 | LR__0732
08424     1D 39 52 F2 | 	cmps	local10, local11 wc
08428     38 00 90 3D |  if_ae	jmp	#LR__0733
0842c                 | '     if variables(i).name=varname2$ then j=i : exit
0842c     1C 37 02 F6 | 	mov	local09, local10
08430     04 36 66 F0 | 	shl	local09, #4
08434     14 00 00 FF 
08438     F8 E5 05 F1 | 	add	objptr, ##10744
0843c     F2 36 02 F1 | 	add	local09, objptr
08440     1B 13 02 FB | 	rdlong	arg01, local09
08444     19 15 02 F6 | 	mov	arg02, local07
08448     14 00 00 FF 
0844c     F8 E5 85 F1 | 	sub	objptr, ##10744
08450     8C F0 B1 FD | 	call	#__system___string_cmp
08454     00 FA 0D F2 | 	cmp	result1, #0 wz
08458     1C 2F 02 A6 |  if_e	mov	local05, local10
0845c     01 38 06 51 |  if_ne	add	local10, #1
08460     C0 FF 9F 5D |  if_ne	jmp	#LR__0732
08464                 | LR__0733
08464                 | LR__0734
08464                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08464     FF FF 7F FF 
08468     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
0846c     60 00 90 5D |  if_ne	jmp	#LR__0735
08470     35 00 00 FF 
08474     08 E4 05 F1 | 	add	objptr, ##27144
08478     F2 36 02 FB | 	rdlong	local09, objptr
0847c     35 00 00 FF 
08480     08 E4 85 F1 | 	sub	objptr, ##27144
08484     02 00 00 FF 
08488     00 36 56 F2 | 	cmps	local09, ##1024 wc
0848c     40 00 90 3D |  if_ae	jmp	#LR__0735
08490     35 00 00 FF 
08494     08 E4 05 F1 | 	add	objptr, ##27144
08498     F2 3A 02 FB | 	rdlong	local11, objptr
0849c     04 3A 66 F0 | 	shl	local11, #4
084a0     20 00 00 FF 
084a4     10 E4 85 F1 | 	sub	objptr, ##16400
084a8     F2 3A 02 F1 | 	add	local11, objptr
084ac     1D 33 62 FC | 	wrlong	local07, local11
084b0     20 00 00 FF 
084b4     10 E4 05 F1 | 	add	objptr, ##16400
084b8     F2 36 02 FB | 	rdlong	local09, objptr
084bc     1B 2F 02 F6 | 	mov	local05, local09
084c0     01 36 06 F1 | 	add	local09, #1
084c4     F2 36 62 FC | 	wrlong	local09, objptr
084c8     35 00 00 FF 
084cc     08 E4 85 F1 | 	sub	objptr, ##27144
084d0                 | LR__0735
084d0                 | ' if varnum>=maxvars then
084d0     35 00 00 FF 
084d4     08 E4 05 F1 | 	add	objptr, ##27144
084d8     F2 36 02 FB | 	rdlong	local09, objptr
084dc     35 00 00 FF 
084e0     08 E4 85 F1 | 	sub	objptr, ##27144
084e4     02 00 00 FF 
084e8     00 36 56 F2 | 	cmps	local09, ##1024 wc
084ec     2D 30 06 36 |  if_ae	mov	local06, #45
084f0     C8 01 90 3D |  if_ae	jmp	#LR__0740
084f4     17 27 02 F6 | 	mov	local01, local05
084f8     17 2A 06 F6 | 	mov	local03, #23
084fc     13 37 02 F6 | 	mov	local09, local01
08500     14 3D 02 F6 | 	mov	local12, local02
08504     15 27 02 F6 | 	mov	local01, local03
08508     4A 00 00 FF 
0850c     7C E4 05 F1 | 	add	objptr, ##38012
08510     F2 3A 02 FB | 	rdlong	local11, objptr
08514     1D 39 02 F6 | 	mov	local10, local11
08518     01 38 66 F0 | 	shl	local10, #1
0851c     1D 39 02 F1 | 	add	local10, local11
08520     02 38 66 F0 | 	shl	local10, #2
08524     03 00 00 FF 
08528     00 E4 85 F1 | 	sub	objptr, ##1536
0852c     F2 38 02 F1 | 	add	local10, objptr
08530     1C 37 62 FC | 	wrlong	local09, local10
08534     03 00 00 FF 
08538     00 E4 05 F1 | 	add	objptr, ##1536
0853c     F2 36 02 FB | 	rdlong	local09, objptr
08540     1B 3B 02 F6 | 	mov	local11, local09
08544     01 3A 66 F0 | 	shl	local11, #1
08548     1B 3B 02 F1 | 	add	local11, local09
0854c     02 3A 66 F0 | 	shl	local11, #2
08550     03 00 00 FF 
08554     00 E4 85 F1 | 	sub	objptr, ##1536
08558     F2 3A 02 F1 | 	add	local11, objptr
0855c     04 3A 06 F1 | 	add	local11, #4
08560     1D 3D 62 FC | 	wrlong	local12, local11
08564     03 00 00 FF 
08568     00 E4 05 F1 | 	add	objptr, ##1536
0856c     F2 36 02 FB | 	rdlong	local09, objptr
08570     1B 3D 02 F6 | 	mov	local12, local09
08574     01 3C 66 F0 | 	shl	local12, #1
08578     1B 3D 02 F1 | 	add	local12, local09
0857c     02 3C 66 F0 | 	shl	local12, #2
08580     03 00 00 FF 
08584     00 E4 85 F1 | 	sub	objptr, ##1536
08588     F2 3C 02 F1 | 	add	local12, objptr
0858c     08 3C 06 F1 | 	add	local12, #8
08590     1E 27 62 FC | 	wrlong	local01, local12
08594     03 00 00 FF 
08598     00 E4 05 F1 | 	add	objptr, ##1536
0859c     F2 36 02 FB | 	rdlong	local09, objptr
085a0     01 36 06 F1 | 	add	local09, #1
085a4     F2 36 62 FC | 	wrlong	local09, objptr
085a8     4A 00 00 FF 
085ac     7C E4 85 F1 | 	sub	objptr, ##38012
085b0                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
085b0                 | '   compiledline(lineptr)=t1:  lineptr+=1 
085b0                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
085b0     03 2C 0E F2 | 	cmp	local04, #3 wz
085b4     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
085b8     38 00 90 5D |  if_ne	jmp	#LR__0736
085bc     4A 00 00 FF 
085c0     7C E4 05 F1 | 	add	objptr, ##38012
085c4     F2 3C 02 FB | 	rdlong	local12, objptr
085c8     1E 27 02 F6 | 	mov	local01, local12
085cc     01 26 66 F0 | 	shl	local01, #1
085d0     1E 27 02 F1 | 	add	local01, local12
085d4     02 26 66 F0 | 	shl	local01, #2
085d8     03 00 00 FF 
085dc     00 E4 85 F1 | 	sub	objptr, ##1536
085e0     F2 26 02 F1 | 	add	local01, objptr
085e4     08 26 06 F1 | 	add	local01, #8
085e8     13 FD 6B FC | 	wrlong	#510, local01
085ec     47 00 00 FF 
085f0     7C E4 85 F1 | 	sub	objptr, ##36476
085f4                 | LR__0736
085f4                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
085f4     4A 00 00 FF 
085f8     7C E4 05 F1 | 	add	objptr, ##38012
085fc     F2 38 02 FB | 	rdlong	local10, objptr
08600     4A 00 00 FF 
08604     7C E4 85 F1 | 	sub	objptr, ##38012
08608     97 58 48 FB | 	callpa	#(@LR__0739-@LR__0737)>>2,fcache_load_ptr_
0860c                 | LR__0737
0860c     1C 3D 02 F6 | 	mov	local12, local10
08610     01 3C 66 F0 | 	shl	local12, #1
08614     1C 3D 02 F1 | 	add	local12, local10
08618     02 3C 66 F0 | 	shl	local12, #2
0861c     47 00 00 FF 
08620     7C E4 05 F1 | 	add	objptr, ##36476
08624     F2 3C 02 F1 | 	add	local12, objptr
08628     08 3C 06 F1 | 	add	local12, #8
0862c     1E 3D 02 FB | 	rdlong	local12, local12
08630     9B 3C 0E F2 | 	cmp	local12, #155 wz
08634     47 00 00 FF 
08638     7C E4 85 F1 | 	sub	objptr, ##36476
0863c     70 00 90 5D |  if_ne	jmp	#LR__0738
08640     1C 3D 02 F6 | 	mov	local12, local10
08644     01 3C 86 F1 | 	sub	local12, #1
08648     1E 27 02 F6 | 	mov	local01, local12
0864c     01 26 66 F0 | 	shl	local01, #1
08650     1E 27 02 F1 | 	add	local01, local12
08654     02 26 66 F0 | 	shl	local01, #2
08658     47 00 00 FF 
0865c     7C E4 05 F1 | 	add	objptr, ##36476
08660     F2 26 02 F1 | 	add	local01, objptr
08664     08 26 06 F1 | 	add	local01, #8
08668     13 27 02 FB | 	rdlong	local01, local01
0866c     11 26 0E F2 | 	cmp	local01, #17 wz
08670     47 00 00 FF 
08674     7C E4 85 F1 | 	sub	objptr, ##36476
08678     34 00 90 5D |  if_ne	jmp	#LR__0738
0867c     1C 3D 02 F6 | 	mov	local12, local10
08680     01 3C 86 F1 | 	sub	local12, #1
08684     1E 27 02 F6 | 	mov	local01, local12
08688     01 26 66 F0 | 	shl	local01, #1
0868c     1E 27 02 F1 | 	add	local01, local12
08690     02 26 66 F0 | 	shl	local01, #2
08694     47 00 00 FF 
08698     7C E4 05 F1 | 	add	objptr, ##36476
0869c     F2 26 02 F1 | 	add	local01, objptr
086a0     08 26 06 F1 | 	add	local01, #8
086a4     13 25 68 FC | 	wrlong	#18, local01
086a8     47 00 00 FF 
086ac     7C E4 85 F1 | 	sub	objptr, ##36476
086b0                 | LR__0738
086b0     01 38 86 F1 | 	sub	local10, #1
086b4     01 38 56 F2 | 	cmps	local10, #1 wc
086b8     50 FF 9F 3D |  if_ae	jmp	#LR__0737
086bc                 | LR__0739
086bc                 | LR__0740
086bc                 | ' return err
086bc     18 FB 01 F6 | 	mov	result1, local06
086c0     A7 F0 03 F6 | 	mov	ptra, fp
086c4     B2 00 A0 FD | 	call	#popregs_
086c8                 | _compile_immediate_assign_ret
086c8     2D 00 64 FD | 	ret
086cc                 | 
086cc                 | ' 
086cc                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
086cc                 | ' 
086cc                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
086cc                 | _compile
086cc     03 4A 05 F6 | 	mov	COUNT_, #3
086d0     A8 00 A0 FD | 	call	#pushregs_
086d4     09 27 02 F6 | 	mov	local01, arg01
086d8     0B 29 02 F6 | 	mov	local02, arg03
086dc     47 00 00 FF 
086e0     7C E4 05 F1 | 	add	objptr, ##36476
086e4     F2 26 62 FC | 	wrlong	local01, objptr
086e8     04 E4 05 F1 | 	add	objptr, #4
086ec     F2 14 62 FC | 	wrlong	arg02, objptr
086f0     47 00 00 FF 
086f4     80 E4 85 F1 | 	sub	objptr, ##36480
086f8     14 13 02 F6 | 	mov	arg01, local02
086fc     01 12 06 F1 | 	add	arg01, #1
08700     13 15 02 F6 | 	mov	arg02, local01
08704     40 F2 BF FD | 	call	#_compile_immediate
08708     FD 2A 0A F6 | 	mov	local03, result1 wz
0870c                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
0870c                 | ' ucompiledline(0)=alinemajor
0870c                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
0870c                 | ' 
0870c                 | ' ' cont: 
0870c                 | ' ' 0 - this is the first part of the line that will continue
0870c                 | ' ' 1 - this is the continuation of the line
0870c                 | ' ' 2 - this is the last continued line
0870c                 | ' ' 3 - this is the one and only part
0870c                 | ' 
0870c                 | ' err=compile_immediate(cont+1,alinemajor) 
0870c                 | ' if err=0 andalso alinemajor>0 then
0870c     74 00 90 5D |  if_ne	jmp	#LR__0755
08710     01 26 16 F2 | 	cmp	local01, #1 wc
08714     6C 00 90 CD |  if_b	jmp	#LR__0755
08718                 | '   if cont=3 orelse cont=2 then 
08718     03 28 0E F2 | 	cmp	local02, #3 wz
0871c     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08720     60 00 90 5D |  if_ne	jmp	#LR__0754
08724                 | '     if alinemajor >lastline then 
08724     4A 00 00 FF 
08728     8C E4 05 F1 | 	add	objptr, ##38028
0872c     F2 14 02 FB | 	rdlong	arg02, objptr
08730     4A 00 00 FF 
08734     8C E4 85 F1 | 	sub	objptr, ##38028
08738     0A 27 1A F2 | 	cmp	local01, arg02 wcz
0873c     0C 00 90 ED |  if_be	jmp	#LR__0750
08740     13 13 02 F6 | 	mov	arg01, local01
08744     38 F1 BF FD | 	call	#_add_line_at_end
08748     38 00 90 FD | 	jmp	#LR__0753
0874c                 | LR__0750
0874c     13 13 02 F6 | 	mov	arg01, local01
08750     FC EA BF FD | 	call	#_deleteline
08754                 | '       deleteline(alinemajor)  
08754                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08754     4A 00 00 FF 
08758     8C E4 05 F1 | 	add	objptr, ##38028
0875c     F2 14 02 FB | 	rdlong	arg02, objptr
08760     4A 00 00 FF 
08764     8C E4 85 F1 | 	sub	objptr, ##38028
08768     0A 27 1A F2 | 	cmp	local01, arg02 wcz
0876c     0C 00 90 ED |  if_be	jmp	#LR__0751
08770     13 13 02 F6 | 	mov	arg01, local01
08774     08 F1 BF FD | 	call	#_add_line_at_end
08778     08 00 90 FD | 	jmp	#LR__0752
0877c                 | LR__0751
0877c     13 13 02 F6 | 	mov	arg01, local01
08780     E0 EE BF FD | 	call	#_insertline
08784                 | LR__0752
08784                 | LR__0753
08784                 | LR__0754
08784                 | LR__0755
08784                 | ' return err
08784     15 FB 01 F6 | 	mov	result1, local03
08788     A7 F0 03 F6 | 	mov	ptra, fp
0878c     B2 00 A0 FD | 	call	#popregs_
08790                 | _compile_ret
08790     2D 00 64 FD | 	ret
08794                 | 
08794                 | ' 
08794                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08794                 | ' 
08794                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08794                 | _compile_assign
08794     03 4A 05 F6 | 	mov	COUNT_, #3
08798     A8 00 A0 FD | 	call	#pushregs_
0879c     09 27 02 F6 | 	mov	local01, arg01
087a0     0B 29 02 F6 | 	mov	local02, arg03
087a4     47 00 00 FF 
087a8     7C E4 05 F1 | 	add	objptr, ##36476
087ac     F2 26 62 FC | 	wrlong	local01, objptr
087b0     04 E4 05 F1 | 	add	objptr, #4
087b4     F2 14 62 FC | 	wrlong	arg02, objptr
087b8     47 00 00 FF 
087bc     80 E4 85 F1 | 	sub	objptr, ##36480
087c0     14 13 02 F6 | 	mov	arg01, local02
087c4     01 12 06 F1 | 	add	arg01, #1
087c8     54 FB BF FD | 	call	#_compile_immediate_assign
087cc     FD 2A 02 F6 | 	mov	local03, result1
087d0                 | ' 
087d0                 | ' ucompiledline(0)=alinemajor
087d0                 | ' ucompiledline(1)=alineminor
087d0                 | ' 
087d0                 | ' err=compile_immediate_assign(cont+1) 
087d0                 | ' if alinemajor>0 then
087d0     01 26 16 F2 | 	cmp	local01, #1 wc
087d4     6C 00 90 CD |  if_b	jmp	#LR__0765
087d8                 | '   if cont=3 orelse cont=2 then 
087d8     03 28 0E F2 | 	cmp	local02, #3 wz
087dc     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
087e0     60 00 90 5D |  if_ne	jmp	#LR__0764
087e4                 | '     if alinemajor >lastline then 
087e4     4A 00 00 FF 
087e8     8C E4 05 F1 | 	add	objptr, ##38028
087ec     F2 14 02 FB | 	rdlong	arg02, objptr
087f0     4A 00 00 FF 
087f4     8C E4 85 F1 | 	sub	objptr, ##38028
087f8     0A 27 1A F2 | 	cmp	local01, arg02 wcz
087fc     0C 00 90 ED |  if_be	jmp	#LR__0760
08800     13 13 02 F6 | 	mov	arg01, local01
08804     78 F0 BF FD | 	call	#_add_line_at_end
08808     38 00 90 FD | 	jmp	#LR__0763
0880c                 | LR__0760
0880c     13 13 02 F6 | 	mov	arg01, local01
08810     3C EA BF FD | 	call	#_deleteline
08814                 | '       deleteline(alinemajor)  
08814                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08814     4A 00 00 FF 
08818     8C E4 05 F1 | 	add	objptr, ##38028
0881c     F2 14 02 FB | 	rdlong	arg02, objptr
08820     4A 00 00 FF 
08824     8C E4 85 F1 | 	sub	objptr, ##38028
08828     0A 27 1A F2 | 	cmp	local01, arg02 wcz
0882c     0C 00 90 ED |  if_be	jmp	#LR__0761
08830     13 13 02 F6 | 	mov	arg01, local01
08834     48 F0 BF FD | 	call	#_add_line_at_end
08838     08 00 90 FD | 	jmp	#LR__0762
0883c                 | LR__0761
0883c     13 13 02 F6 | 	mov	arg01, local01
08840     20 EE BF FD | 	call	#_insertline
08844                 | LR__0762
08844                 | LR__0763
08844                 | LR__0764
08844                 | LR__0765
08844                 | ' return err
08844     15 FB 01 F6 | 	mov	result1, local03
08848     A7 F0 03 F6 | 	mov	ptra, fp
0884c     B2 00 A0 FD | 	call	#popregs_
08850                 | _compile_assign_ret
08850     2D 00 64 FD | 	ret
08854                 | 
08854                 | ' 
08854                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08854                 | ' 
08854                 | ' function compile_fun_2p() as ulong
08854                 | _compile_fun_2p
08854     01 4A 05 F6 | 	mov	COUNT_, #1
08858     A8 00 A0 FD | 	call	#pushregs_
0885c     30 37 B0 FD | 	call	#_expr
08860     FD 26 02 F6 | 	mov	local01, result1
08864                 | ' err=expr() : if err>0 then return err
08864     01 26 16 F2 | 	cmp	local01, #1 wc
08868     13 FB 01 36 |  if_ae	mov	result1, local01
0886c     60 00 90 3D |  if_ae	jmp	#LR__0770
08870                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08870     37 00 00 FF 
08874     44 E4 05 F1 | 	add	objptr, ##28228
08878     F2 26 02 FB | 	rdlong	local01, objptr
0887c     03 26 66 F0 | 	shl	local01, #3
08880     02 00 00 FF 
08884     38 E4 85 F1 | 	sub	objptr, ##1080
08888     F2 26 02 F1 | 	add	local01, objptr
0888c     04 26 06 F1 | 	add	local01, #4
08890     13 27 02 FB | 	rdlong	local01, local01
08894     11 26 0E F2 | 	cmp	local01, #17 wz
08898     35 00 00 FF 
0889c     0C E4 85 F1 | 	sub	objptr, ##27148
088a0     15 FA 05 56 |  if_ne	mov	result1, #21
088a4     28 00 90 5D |  if_ne	jmp	#LR__0770
088a8     37 00 00 FF 
088ac     44 E4 05 F1 | 	add	objptr, ##28228
088b0     F2 26 02 FB | 	rdlong	local01, objptr
088b4     01 26 06 F1 | 	add	local01, #1
088b8     F2 26 62 FC | 	wrlong	local01, objptr
088bc     37 00 00 FF 
088c0     44 E4 85 F1 | 	sub	objptr, ##28228
088c4     C8 36 B0 FD | 	call	#_expr
088c8                 | ' err=expr() : if err>0 then return err
088c8     01 FA 15 F2 | 	cmp	result1, #1 wc
088cc                 | ' return 0
088cc     00 FA 05 C6 |  if_b	mov	result1, #0
088d0                 | LR__0770
088d0     A7 F0 03 F6 | 	mov	ptra, fp
088d4     B2 00 A0 FD | 	call	#popregs_
088d8                 | _compile_fun_2p_ret
088d8     2D 00 64 FD | 	ret
088dc                 | 
088dc                 | ' 
088dc                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
088dc                 | ' 
088dc                 | ' function compile_fun_3p() as ulong
088dc                 | _compile_fun_3p
088dc     01 4A 05 F6 | 	mov	COUNT_, #1
088e0     A8 00 A0 FD | 	call	#pushregs_
088e4     A8 36 B0 FD | 	call	#_expr
088e8     FD 26 02 F6 | 	mov	local01, result1
088ec                 | ' err=expr() : if err>0 then return err
088ec     01 26 16 F2 | 	cmp	local01, #1 wc
088f0     13 FB 01 36 |  if_ae	mov	result1, local01
088f4     C8 00 90 3D |  if_ae	jmp	#LR__0780
088f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088f8     37 00 00 FF 
088fc     44 E4 05 F1 | 	add	objptr, ##28228
08900     F2 26 02 FB | 	rdlong	local01, objptr
08904     03 26 66 F0 | 	shl	local01, #3
08908     02 00 00 FF 
0890c     38 E4 85 F1 | 	sub	objptr, ##1080
08910     F2 26 02 F1 | 	add	local01, objptr
08914     04 26 06 F1 | 	add	local01, #4
08918     13 27 02 FB | 	rdlong	local01, local01
0891c     11 26 0E F2 | 	cmp	local01, #17 wz
08920     35 00 00 FF 
08924     0C E4 85 F1 | 	sub	objptr, ##27148
08928     15 FA 05 56 |  if_ne	mov	result1, #21
0892c     90 00 90 5D |  if_ne	jmp	#LR__0780
08930     37 00 00 FF 
08934     44 E4 05 F1 | 	add	objptr, ##28228
08938     F2 26 02 FB | 	rdlong	local01, objptr
0893c     01 26 06 F1 | 	add	local01, #1
08940     F2 26 62 FC | 	wrlong	local01, objptr
08944     37 00 00 FF 
08948     44 E4 85 F1 | 	sub	objptr, ##28228
0894c     40 36 B0 FD | 	call	#_expr
08950     FD 26 02 F6 | 	mov	local01, result1
08954                 | ' err=expr() : if err>0 then return err
08954     01 26 16 F2 | 	cmp	local01, #1 wc
08958     13 FB 01 36 |  if_ae	mov	result1, local01
0895c     60 00 90 3D |  if_ae	jmp	#LR__0780
08960                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08960     37 00 00 FF 
08964     44 E4 05 F1 | 	add	objptr, ##28228
08968     F2 26 02 FB | 	rdlong	local01, objptr
0896c     03 26 66 F0 | 	shl	local01, #3
08970     02 00 00 FF 
08974     38 E4 85 F1 | 	sub	objptr, ##1080
08978     F2 26 02 F1 | 	add	local01, objptr
0897c     04 26 06 F1 | 	add	local01, #4
08980     13 27 02 FB | 	rdlong	local01, local01
08984     11 26 0E F2 | 	cmp	local01, #17 wz
08988     35 00 00 FF 
0898c     0C E4 85 F1 | 	sub	objptr, ##27148
08990     15 FA 05 56 |  if_ne	mov	result1, #21
08994     28 00 90 5D |  if_ne	jmp	#LR__0780
08998     37 00 00 FF 
0899c     44 E4 05 F1 | 	add	objptr, ##28228
089a0     F2 26 02 FB | 	rdlong	local01, objptr
089a4     01 26 06 F1 | 	add	local01, #1
089a8     F2 26 62 FC | 	wrlong	local01, objptr
089ac     37 00 00 FF 
089b0     44 E4 85 F1 | 	sub	objptr, ##28228
089b4     D8 35 B0 FD | 	call	#_expr
089b8                 | ' err=expr() : if err>0 then return err
089b8     01 FA 15 F2 | 	cmp	result1, #1 wc
089bc                 | ' return 0
089bc     00 FA 05 C6 |  if_b	mov	result1, #0
089c0                 | LR__0780
089c0     A7 F0 03 F6 | 	mov	ptra, fp
089c4     B2 00 A0 FD | 	call	#popregs_
089c8                 | _compile_fun_3p_ret
089c8     2D 00 64 FD | 	ret
089cc                 | 
089cc                 | ' 
089cc                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
089cc                 | ' 
089cc                 | ' function compile_fun_4p() as ulong
089cc                 | _compile_fun_4p
089cc     01 4A 05 F6 | 	mov	COUNT_, #1
089d0     A8 00 A0 FD | 	call	#pushregs_
089d4     B8 35 B0 FD | 	call	#_expr
089d8     FD 26 02 F6 | 	mov	local01, result1
089dc                 | ' err=expr() : if err>0 then return err
089dc     01 26 16 F2 | 	cmp	local01, #1 wc
089e0     13 FB 01 36 |  if_ae	mov	result1, local01
089e4     30 01 90 3D |  if_ae	jmp	#LR__0790
089e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
089e8     37 00 00 FF 
089ec     44 E4 05 F1 | 	add	objptr, ##28228
089f0     F2 26 02 FB | 	rdlong	local01, objptr
089f4     03 26 66 F0 | 	shl	local01, #3
089f8     02 00 00 FF 
089fc     38 E4 85 F1 | 	sub	objptr, ##1080
08a00     F2 26 02 F1 | 	add	local01, objptr
08a04     04 26 06 F1 | 	add	local01, #4
08a08     13 27 02 FB | 	rdlong	local01, local01
08a0c     11 26 0E F2 | 	cmp	local01, #17 wz
08a10     35 00 00 FF 
08a14     0C E4 85 F1 | 	sub	objptr, ##27148
08a18     15 FA 05 56 |  if_ne	mov	result1, #21
08a1c     F8 00 90 5D |  if_ne	jmp	#LR__0790
08a20     37 00 00 FF 
08a24     44 E4 05 F1 | 	add	objptr, ##28228
08a28     F2 26 02 FB | 	rdlong	local01, objptr
08a2c     01 26 06 F1 | 	add	local01, #1
08a30     F2 26 62 FC | 	wrlong	local01, objptr
08a34     37 00 00 FF 
08a38     44 E4 85 F1 | 	sub	objptr, ##28228
08a3c     50 35 B0 FD | 	call	#_expr
08a40     FD 26 02 F6 | 	mov	local01, result1
08a44                 | ' err=expr() : if err>0 then return err
08a44     01 26 16 F2 | 	cmp	local01, #1 wc
08a48     13 FB 01 36 |  if_ae	mov	result1, local01
08a4c     C8 00 90 3D |  if_ae	jmp	#LR__0790
08a50                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08a50     37 00 00 FF 
08a54     44 E4 05 F1 | 	add	objptr, ##28228
08a58     F2 26 02 FB | 	rdlong	local01, objptr
08a5c     03 26 66 F0 | 	shl	local01, #3
08a60     02 00 00 FF 
08a64     38 E4 85 F1 | 	sub	objptr, ##1080
08a68     F2 26 02 F1 | 	add	local01, objptr
08a6c     04 26 06 F1 | 	add	local01, #4
08a70     13 27 02 FB | 	rdlong	local01, local01
08a74     11 26 0E F2 | 	cmp	local01, #17 wz
08a78     35 00 00 FF 
08a7c     0C E4 85 F1 | 	sub	objptr, ##27148
08a80     15 FA 05 56 |  if_ne	mov	result1, #21
08a84     90 00 90 5D |  if_ne	jmp	#LR__0790
08a88     37 00 00 FF 
08a8c     44 E4 05 F1 | 	add	objptr, ##28228
08a90     F2 26 02 FB | 	rdlong	local01, objptr
08a94     01 26 06 F1 | 	add	local01, #1
08a98     F2 26 62 FC | 	wrlong	local01, objptr
08a9c     37 00 00 FF 
08aa0     44 E4 85 F1 | 	sub	objptr, ##28228
08aa4     E8 34 B0 FD | 	call	#_expr
08aa8     FD 26 02 F6 | 	mov	local01, result1
08aac                 | ' err=expr() : if err>0 then return err
08aac     01 26 16 F2 | 	cmp	local01, #1 wc
08ab0     13 FB 01 36 |  if_ae	mov	result1, local01
08ab4     60 00 90 3D |  if_ae	jmp	#LR__0790
08ab8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08ab8     37 00 00 FF 
08abc     44 E4 05 F1 | 	add	objptr, ##28228
08ac0     F2 26 02 FB | 	rdlong	local01, objptr
08ac4     03 26 66 F0 | 	shl	local01, #3
08ac8     02 00 00 FF 
08acc     38 E4 85 F1 | 	sub	objptr, ##1080
08ad0     F2 26 02 F1 | 	add	local01, objptr
08ad4     04 26 06 F1 | 	add	local01, #4
08ad8     13 27 02 FB | 	rdlong	local01, local01
08adc     11 26 0E F2 | 	cmp	local01, #17 wz
08ae0     35 00 00 FF 
08ae4     0C E4 85 F1 | 	sub	objptr, ##27148
08ae8     15 FA 05 56 |  if_ne	mov	result1, #21
08aec     28 00 90 5D |  if_ne	jmp	#LR__0790
08af0     37 00 00 FF 
08af4     44 E4 05 F1 | 	add	objptr, ##28228
08af8     F2 26 02 FB | 	rdlong	local01, objptr
08afc     01 26 06 F1 | 	add	local01, #1
08b00     F2 26 62 FC | 	wrlong	local01, objptr
08b04     37 00 00 FF 
08b08     44 E4 85 F1 | 	sub	objptr, ##28228
08b0c     80 34 B0 FD | 	call	#_expr
08b10                 | ' err=expr() : if err>0 then return err
08b10     01 FA 15 F2 | 	cmp	result1, #1 wc
08b14                 | ' return 0
08b14     00 FA 05 C6 |  if_b	mov	result1, #0
08b18                 | LR__0790
08b18     A7 F0 03 F6 | 	mov	ptra, fp
08b1c     B2 00 A0 FD | 	call	#popregs_
08b20                 | _compile_fun_4p_ret
08b20     2D 00 64 FD | 	ret
08b24                 | 
08b24                 | ' 
08b24                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08b24                 | ' 
08b24                 | ' function compile_fun_varp() as ulong,ulong 
08b24                 | _compile_fun_varp
08b24     03 4A 05 F6 | 	mov	COUNT_, #3
08b28     A8 00 A0 FD | 	call	#pushregs_
08b2c     00 26 06 F6 | 	mov	local01, #0
08b30                 | ' 
08b30                 | ' i=0 : err=0
08b30                 | ' if lparts(ct).token<>token_end then
08b30     37 00 00 FF 
08b34     44 E4 05 F1 | 	add	objptr, ##28228
08b38     F2 28 02 FB | 	rdlong	local02, objptr
08b3c     03 28 66 F0 | 	shl	local02, #3
08b40     02 00 00 FF 
08b44     38 E4 85 F1 | 	sub	objptr, ##1080
08b48     F2 28 02 F1 | 	add	local02, objptr
08b4c     04 28 06 F1 | 	add	local02, #4
08b50     14 29 02 FB | 	rdlong	local02, local02
08b54     FE 29 0E F2 | 	cmp	local02, #510 wz
08b58     35 00 00 FF 
08b5c     0C E4 85 F1 | 	sub	objptr, ##27148
08b60     88 00 90 AD |  if_e	jmp	#LR__0801
08b64                 | '   do
08b64                 | LR__0800
08b64     28 34 B0 FD | 	call	#_expr
08b68     01 26 06 F1 | 	add	local01, #1
08b6c                 | '     expr()
08b6c                 | '     i+=1
08b6c                 | '     if lparts(ct).token=token_comma then ct+=1
08b6c     37 00 00 FF 
08b70     44 E4 05 F1 | 	add	objptr, ##28228
08b74     F2 28 02 FB | 	rdlong	local02, objptr
08b78     03 28 66 F0 | 	shl	local02, #3
08b7c     02 00 00 FF 
08b80     38 E4 85 F1 | 	sub	objptr, ##1080
08b84     F2 28 02 F1 | 	add	local02, objptr
08b88     04 28 06 F1 | 	add	local02, #4
08b8c     14 29 02 FB | 	rdlong	local02, local02
08b90     11 28 0E F2 | 	cmp	local02, #17 wz
08b94     35 00 00 FF 
08b98     0C E4 85 F1 | 	sub	objptr, ##27148
08b9c     37 00 00 AF 
08ba0     44 E4 05 A1 |  if_e	add	objptr, ##28228
08ba4     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08ba8     01 2A 06 A1 |  if_e	add	local03, #1
08bac     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08bb0     37 00 00 AF 
08bb4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08bb8                 | '     if lparts(ct).token=token_end then exit loop
08bb8     37 00 00 FF 
08bbc     44 E4 05 F1 | 	add	objptr, ##28228
08bc0     F2 28 02 FB | 	rdlong	local02, objptr
08bc4     03 28 66 F0 | 	shl	local02, #3
08bc8     02 00 00 FF 
08bcc     38 E4 85 F1 | 	sub	objptr, ##1080
08bd0     F2 28 02 F1 | 	add	local02, objptr
08bd4     04 28 06 F1 | 	add	local02, #4
08bd8     14 29 02 FB | 	rdlong	local02, local02
08bdc     FE 29 0E F2 | 	cmp	local02, #510 wz
08be0     35 00 00 FF 
08be4     0C E4 85 F1 | 	sub	objptr, ##27148
08be8     78 FF 9F 5D |  if_ne	jmp	#LR__0800
08bec                 | LR__0801
08bec                 | ' return i,err
08bec     13 FB 01 F6 | 	mov	result1, local01
08bf0     00 FC 05 F6 | 	mov	result2, #0
08bf4     A7 F0 03 F6 | 	mov	ptra, fp
08bf8     B2 00 A0 FD | 	call	#popregs_
08bfc                 | _compile_fun_varp_ret
08bfc     2D 00 64 FD | 	ret
08c00                 | 
08c00                 | ' 
08c00                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08c00                 | ' 
08c00                 | ' function compile_read() as ulong,ulong 
08c00                 | _compile_read
08c00     04 4A 05 F6 | 	mov	COUNT_, #4
08c04     A8 00 A0 FD | 	call	#pushregs_
08c08     00 26 06 F6 | 	mov	local01, #0
08c0c                 | ' 
08c0c                 | ' i=0 : err=0
08c0c                 | ' if lparts(ct).token<>token_end then
08c0c     37 00 00 FF 
08c10     44 E4 05 F1 | 	add	objptr, ##28228
08c14     F2 28 02 FB | 	rdlong	local02, objptr
08c18     03 28 66 F0 | 	shl	local02, #3
08c1c     02 00 00 FF 
08c20     38 E4 85 F1 | 	sub	objptr, ##1080
08c24     F2 28 02 F1 | 	add	local02, objptr
08c28     04 28 06 F1 | 	add	local02, #4
08c2c     14 29 02 FB | 	rdlong	local02, local02
08c30     FE 29 0E F2 | 	cmp	local02, #510 wz
08c34     35 00 00 FF 
08c38     0C E4 85 F1 | 	sub	objptr, ##27148
08c3c     98 00 90 AD |  if_e	jmp	#LR__0811
08c40                 | '   do
08c40                 | LR__0810
08c40     B8 2F B0 FD | 	call	#_getaddr
08c44     FD 2A 02 F6 | 	mov	local03, result1
08c48     37 00 00 FF 
08c4c     44 E4 05 F1 | 	add	objptr, ##28228
08c50     F2 28 02 FB | 	rdlong	local02, objptr
08c54     01 28 06 F1 | 	add	local02, #1
08c58     F2 28 62 FC | 	wrlong	local02, objptr
08c5c     01 26 06 F1 | 	add	local01, #1
08c60                 | '     err=getaddr() :ct+=1
08c60                 | '     i+=1 
08c60                 | '     if lparts(ct).token=token_comma then ct+=1 
08c60     03 28 66 F0 | 	shl	local02, #3
08c64     02 00 00 FF 
08c68     38 E4 85 F1 | 	sub	objptr, ##1080
08c6c     F2 28 02 F1 | 	add	local02, objptr
08c70     04 28 06 F1 | 	add	local02, #4
08c74     14 29 02 FB | 	rdlong	local02, local02
08c78     11 28 0E F2 | 	cmp	local02, #17 wz
08c7c     35 00 00 FF 
08c80     0C E4 85 F1 | 	sub	objptr, ##27148
08c84     37 00 00 AF 
08c88     44 E4 05 A1 |  if_e	add	objptr, ##28228
08c8c     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08c90     01 2C 06 A1 |  if_e	add	local04, #1
08c94     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08c98     37 00 00 AF 
08c9c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08ca0                 | '     if lparts(ct).token=token_end then exit loop
08ca0     37 00 00 FF 
08ca4     44 E4 05 F1 | 	add	objptr, ##28228
08ca8     F2 28 02 FB | 	rdlong	local02, objptr
08cac     03 28 66 F0 | 	shl	local02, #3
08cb0     02 00 00 FF 
08cb4     38 E4 85 F1 | 	sub	objptr, ##1080
08cb8     F2 28 02 F1 | 	add	local02, objptr
08cbc     04 28 06 F1 | 	add	local02, #4
08cc0     14 29 02 FB | 	rdlong	local02, local02
08cc4     FE 29 0E F2 | 	cmp	local02, #510 wz
08cc8     35 00 00 FF 
08ccc     0C E4 85 F1 | 	sub	objptr, ##27148
08cd0     08 00 90 AD |  if_e	jmp	#LR__0812
08cd4     68 FF 9F FD | 	jmp	#LR__0810
08cd8                 | LR__0811
08cd8     36 2A 06 F6 | 	mov	local03, #54
08cdc                 | LR__0812
08cdc                 | ' return i,err
08cdc     13 FB 01 F6 | 	mov	result1, local01
08ce0     15 FD 01 F6 | 	mov	result2, local03
08ce4     A7 F0 03 F6 | 	mov	ptra, fp
08ce8     B2 00 A0 FD | 	call	#popregs_
08cec                 | _compile_read_ret
08cec     2D 00 64 FD | 	ret
08cf0                 | 
08cf0                 | ' 
08cf0                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08cf0                 | ' 
08cf0                 | ' function compile_input() as ulong,ulong 
08cf0                 | _compile_input
08cf0     0F 4A 05 F6 | 	mov	COUNT_, #15
08cf4     A8 00 A0 FD | 	call	#pushregs_
08cf8                 | ' 
08cf8                 | ' if lparts(ct).token=token_string then
08cf8     37 00 00 FF 
08cfc     44 E4 05 F1 | 	add	objptr, ##28228
08d00     F2 16 02 FB | 	rdlong	arg03, objptr
08d04     03 16 66 F0 | 	shl	arg03, #3
08d08     02 00 00 FF 
08d0c     38 E4 85 F1 | 	sub	objptr, ##1080
08d10     F2 16 02 F1 | 	add	arg03, objptr
08d14     04 16 06 F1 | 	add	arg03, #4
08d18     0B FD 01 FB | 	rdlong	result2, arg03
08d1c     01 00 00 FF 
08d20     03 FC 0D F2 | 	cmp	result2, ##515 wz
08d24     35 00 00 FF 
08d28     0C E4 85 F1 | 	sub	objptr, ##27148
08d2c     38 06 90 5D |  if_ne	jmp	#LR__0827
08d30     37 00 00 FF 
08d34     44 E4 05 F1 | 	add	objptr, ##28228
08d38     F2 14 02 FB | 	rdlong	arg02, objptr
08d3c     03 14 66 F0 | 	shl	arg02, #3
08d40     02 00 00 FF 
08d44     38 E4 85 F1 | 	sub	objptr, ##1080
08d48     F2 14 02 F1 | 	add	arg02, objptr
08d4c     0A 13 02 FB | 	rdlong	arg01, arg02
08d50     35 00 00 FF 
08d54     0C E4 85 F1 | 	sub	objptr, ##27148
08d58     09 2D 02 F6 | 	mov	local04, arg01
08d5c     97 06 48 FB | 	callpa	#(@LR__0821-@LR__0820)>>2,fcache_load_ptr_
08d60                 | LR__0820
08d60     16 FB C9 FA | 	rdbyte	result1, local04 wz
08d64     01 2C 06 51 |  if_ne	add	local04, #1
08d68     F4 FF 9F 5D |  if_ne	jmp	#LR__0820
08d6c                 | LR__0821
08d6c     09 2D 82 F1 | 	sub	local04, arg01
08d70     16 FB 01 F6 | 	mov	result1, local04
08d74     52 00 00 FF 
08d78     2C E5 05 F1 | 	add	objptr, ##42284
08d7c     F2 FA 61 FC | 	wrlong	result1, objptr
08d80     5C E4 85 F1 | 	sub	objptr, #92
08d84     F2 12 02 FB | 	rdlong	arg01, objptr
08d88     FD 12 82 F1 | 	sub	arg01, result1
08d8c     04 12 86 F1 | 	sub	arg01, #4
08d90     03 12 26 F5 | 	andn	arg01, #3
08d94     F2 12 62 FC | 	wrlong	arg01, objptr
08d98     5C E4 05 F1 | 	add	objptr, #92
08d9c     F2 14 02 FB | 	rdlong	arg02, objptr
08da0     52 00 00 FF 
08da4     2C E5 85 F1 | 	sub	objptr, ##42284
08da8     94 AE B1 FD | 	call	#_pslpoke
08dac                 | '   pslpoke memtop,l
08dac                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08dac     01 2E 06 F6 | 	mov	local05, #1
08db0     52 00 00 FF 
08db4     2C E5 05 F1 | 	add	objptr, ##42284
08db8     F2 30 02 FB | 	rdlong	local06, objptr
08dbc     52 00 00 FF 
08dc0     2C E5 85 F1 | 	sub	objptr, ##42284
08dc4     01 30 06 F1 | 	add	local06, #1
08dc8                 | LR__0822
08dc8     18 2F 52 F2 | 	cmps	local05, local06 wc
08dcc     5C 00 90 3D |  if_ae	jmp	#LR__0823
08dd0     52 00 00 FF 
08dd4     D0 E4 05 F1 | 	add	objptr, ##42192
08dd8     F2 32 02 FB | 	rdlong	local07, objptr
08ddc     03 32 06 F1 | 	add	local07, #3
08de0     17 33 02 F1 | 	add	local07, local05
08de4     1B 00 00 FF 
08de8     8C E4 85 F1 | 	sub	objptr, ##13964
08dec     F2 14 02 FB | 	rdlong	arg02, objptr
08df0     03 14 66 F0 | 	shl	arg02, #3
08df4     02 00 00 FF 
08df8     38 E4 85 F1 | 	sub	objptr, ##1080
08dfc     F2 14 02 F1 | 	add	arg02, objptr
08e00     0A 13 02 FB | 	rdlong	arg01, arg02
08e04     17 15 02 F6 | 	mov	arg02, local05
08e08     01 16 06 F6 | 	mov	arg03, #1
08e0c     35 00 00 FF 
08e10     0C E4 85 F1 | 	sub	objptr, ##27148
08e14     38 08 B2 FD | 	call	#__system__Mid_S
08e18     FD 14 C2 FA | 	rdbyte	arg02, result1
08e1c     19 13 02 F6 | 	mov	arg01, local07
08e20     AC AE B1 FD | 	call	#_pspoke
08e24     01 2E 06 F1 | 	add	local05, #1
08e28     9C FF 9F FD | 	jmp	#LR__0822
08e2c                 | LR__0823
08e2c     52 00 00 FF 
08e30     D0 E4 05 F1 | 	add	objptr, ##42192
08e34     F2 26 02 FB | 	rdlong	local01, objptr
08e38     2B 2A 06 F6 | 	mov	local03, #43
08e3c     13 35 02 F6 | 	mov	local08, local01
08e40     14 33 02 F6 | 	mov	local07, local02
08e44     15 37 02 F6 | 	mov	local09, local03
08e48     08 00 00 FF 
08e4c     54 E4 85 F1 | 	sub	objptr, ##4180
08e50     F2 30 02 FB | 	rdlong	local06, objptr
08e54     18 2F 02 F6 | 	mov	local05, local06
08e58     01 2E 66 F0 | 	shl	local05, #1
08e5c     18 2F 02 F1 | 	add	local05, local06
08e60     02 2E 66 F0 | 	shl	local05, #2
08e64     03 00 00 FF 
08e68     00 E4 85 F1 | 	sub	objptr, ##1536
08e6c     F2 2E 02 F1 | 	add	local05, objptr
08e70     17 35 62 FC | 	wrlong	local08, local05
08e74     03 00 00 FF 
08e78     00 E4 05 F1 | 	add	objptr, ##1536
08e7c     F2 34 02 FB | 	rdlong	local08, objptr
08e80     1A 31 02 F6 | 	mov	local06, local08
08e84     01 30 66 F0 | 	shl	local06, #1
08e88     1A 31 02 F1 | 	add	local06, local08
08e8c     02 30 66 F0 | 	shl	local06, #2
08e90     03 00 00 FF 
08e94     00 E4 85 F1 | 	sub	objptr, ##1536
08e98     F2 30 02 F1 | 	add	local06, objptr
08e9c     04 30 06 F1 | 	add	local06, #4
08ea0     18 33 62 FC | 	wrlong	local07, local06
08ea4     03 00 00 FF 
08ea8     00 E4 05 F1 | 	add	objptr, ##1536
08eac     F2 34 02 FB | 	rdlong	local08, objptr
08eb0     1A 33 02 F6 | 	mov	local07, local08
08eb4     01 32 66 F0 | 	shl	local07, #1
08eb8     1A 33 02 F1 | 	add	local07, local08
08ebc     02 32 66 F0 | 	shl	local07, #2
08ec0     03 00 00 FF 
08ec4     00 E4 85 F1 | 	sub	objptr, ##1536
08ec8     F2 32 02 F1 | 	add	local07, objptr
08ecc     08 32 06 F1 | 	add	local07, #8
08ed0     19 37 62 FC | 	wrlong	local09, local07
08ed4     03 00 00 FF 
08ed8     00 E4 05 F1 | 	add	objptr, ##1536
08edc     F2 34 02 FB | 	rdlong	local08, objptr
08ee0     01 34 06 F1 | 	add	local08, #1
08ee4     F2 34 62 FC | 	wrlong	local08, objptr
08ee8     13 00 00 FF 
08eec     38 E4 85 F1 | 	sub	objptr, ##9784
08ef0     F2 34 02 FB | 	rdlong	local08, objptr
08ef4     01 34 06 F1 | 	add	local08, #1
08ef8     F2 34 62 FC | 	wrlong	local08, objptr
08efc                 | '   t1.result.uresult=memtop
08efc                 | '   t1.result_type=result_string2  
08efc                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08efc                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08efc     03 34 66 F0 | 	shl	local08, #3
08f00     02 00 00 FF 
08f04     38 E4 85 F1 | 	sub	objptr, ##1080
08f08     F2 34 02 F1 | 	add	local08, objptr
08f0c     04 34 06 F1 | 	add	local08, #4
08f10     1A 35 02 FB | 	rdlong	local08, local08
08f14     11 34 0E F2 | 	cmp	local08, #17 wz
08f18     35 00 00 FF 
08f1c     0C E4 85 F1 | 	sub	objptr, ##27148
08f20     60 01 90 5D |  if_ne	jmp	#LR__0824
08f24     21 2A 06 F6 | 	mov	local03, #33
08f28     13 35 02 F6 | 	mov	local08, local01
08f2c     14 33 02 F6 | 	mov	local07, local02
08f30     15 39 02 F6 | 	mov	local10, local03
08f34     4A 00 00 FF 
08f38     7C E4 05 F1 | 	add	objptr, ##38012
08f3c     F2 3A 02 FB | 	rdlong	local11, objptr
08f40     1D 3D 02 F6 | 	mov	local12, local11
08f44     01 3C 66 F0 | 	shl	local12, #1
08f48     1D 3D 02 F1 | 	add	local12, local11
08f4c     02 3C 66 F0 | 	shl	local12, #2
08f50     03 00 00 FF 
08f54     00 E4 85 F1 | 	sub	objptr, ##1536
08f58     F2 3C 02 F1 | 	add	local12, objptr
08f5c     1E 35 62 FC | 	wrlong	local08, local12
08f60     03 00 00 FF 
08f64     00 E4 05 F1 | 	add	objptr, ##1536
08f68     F2 3E 02 FB | 	rdlong	local13, objptr
08f6c     1F 35 02 F6 | 	mov	local08, local13
08f70     01 34 66 F0 | 	shl	local08, #1
08f74     1F 35 02 F1 | 	add	local08, local13
08f78     02 34 66 F0 | 	shl	local08, #2
08f7c     03 00 00 FF 
08f80     00 E4 85 F1 | 	sub	objptr, ##1536
08f84     F2 34 02 F1 | 	add	local08, objptr
08f88     04 34 06 F1 | 	add	local08, #4
08f8c     1A 33 62 FC | 	wrlong	local07, local08
08f90     03 00 00 FF 
08f94     00 E4 05 F1 | 	add	objptr, ##1536
08f98     F2 34 02 FB | 	rdlong	local08, objptr
08f9c     1A 41 02 F6 | 	mov	local14, local08
08fa0     01 40 66 F0 | 	shl	local14, #1
08fa4     1A 41 02 F1 | 	add	local14, local08
08fa8     02 40 66 F0 | 	shl	local14, #2
08fac     03 00 00 FF 
08fb0     00 E4 85 F1 | 	sub	objptr, ##1536
08fb4     F2 40 02 F1 | 	add	local14, objptr
08fb8     08 40 06 F1 | 	add	local14, #8
08fbc     20 39 62 FC | 	wrlong	local10, local14
08fc0     03 00 00 FF 
08fc4     00 E4 05 F1 | 	add	objptr, ##1536
08fc8     F2 34 02 FB | 	rdlong	local08, objptr
08fcc     01 34 06 F1 | 	add	local08, #1
08fd0     F2 34 62 FC | 	wrlong	local08, objptr
08fd4     44 2A 06 F6 | 	mov	local03, #68
08fd8     13 35 02 F6 | 	mov	local08, local01
08fdc     14 33 02 F6 | 	mov	local07, local02
08fe0     15 39 02 F6 | 	mov	local10, local03
08fe4     F2 40 02 FB | 	rdlong	local14, objptr
08fe8     20 3F 02 F6 | 	mov	local13, local14
08fec     01 3E 66 F0 | 	shl	local13, #1
08ff0     20 3F 02 F1 | 	add	local13, local14
08ff4     02 3E 66 F0 | 	shl	local13, #2
08ff8     03 00 00 FF 
08ffc     00 E4 85 F1 | 	sub	objptr, ##1536
09000     F2 3E 02 F1 | 	add	local13, objptr
09004     1F 35 62 FC | 	wrlong	local08, local13
09008     03 00 00 FF 
0900c     00 E4 05 F1 | 	add	objptr, ##1536
09010     F2 40 02 FB | 	rdlong	local14, objptr
09014     20 3F 02 F6 | 	mov	local13, local14
09018     01 3E 66 F0 | 	shl	local13, #1
0901c     20 3F 02 F1 | 	add	local13, local14
09020     02 3E 66 F0 | 	shl	local13, #2
09024     03 00 00 FF 
09028     00 E4 85 F1 | 	sub	objptr, ##1536
0902c     F2 3E 02 F1 | 	add	local13, objptr
09030     04 3E 06 F1 | 	add	local13, #4
09034     1F 33 62 FC | 	wrlong	local07, local13
09038     03 00 00 FF 
0903c     00 E4 05 F1 | 	add	objptr, ##1536
09040     F2 3E 02 FB | 	rdlong	local13, objptr
09044     1F 41 02 F6 | 	mov	local14, local13
09048     01 40 66 F0 | 	shl	local14, #1
0904c     1F 41 02 F1 | 	add	local14, local13
09050     02 40 66 F0 | 	shl	local14, #2
09054     03 00 00 FF 
09058     00 E4 85 F1 | 	sub	objptr, ##1536
0905c     F2 40 02 F1 | 	add	local14, objptr
09060     08 40 06 F1 | 	add	local14, #8
09064     20 39 62 FC | 	wrlong	local10, local14
09068     03 00 00 FF 
0906c     00 E4 05 F1 | 	add	objptr, ##1536
09070     F2 34 02 FB | 	rdlong	local08, objptr
09074     01 34 06 F1 | 	add	local08, #1
09078     F2 34 62 FC | 	wrlong	local08, objptr
0907c     4A 00 00 FF 
09080     7C E4 85 F1 | 	sub	objptr, ##38012
09084                 | LR__0824
09084                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09084     37 00 00 FF 
09088     44 E4 05 F1 | 	add	objptr, ##28228
0908c     F2 34 02 FB | 	rdlong	local08, objptr
09090     03 34 66 F0 | 	shl	local08, #3
09094     02 00 00 FF 
09098     38 E4 85 F1 | 	sub	objptr, ##1080
0909c     F2 34 02 F1 | 	add	local08, objptr
090a0     04 34 06 F1 | 	add	local08, #4
090a4     1A 41 02 FB | 	rdlong	local14, local08
090a8     12 40 0E F2 | 	cmp	local14, #18 wz
090ac     35 00 00 FF 
090b0     0C E4 85 F1 | 	sub	objptr, ##27148
090b4     60 01 90 5D |  if_ne	jmp	#LR__0825
090b8     22 2A 06 F6 | 	mov	local03, #34
090bc     13 35 02 F6 | 	mov	local08, local01
090c0     14 33 02 F6 | 	mov	local07, local02
090c4     15 39 02 F6 | 	mov	local10, local03
090c8     4A 00 00 FF 
090cc     7C E4 05 F1 | 	add	objptr, ##38012
090d0     F2 40 02 FB | 	rdlong	local14, objptr
090d4     20 3F 02 F6 | 	mov	local13, local14
090d8     01 3E 66 F0 | 	shl	local13, #1
090dc     20 3F 02 F1 | 	add	local13, local14
090e0     02 3E 66 F0 | 	shl	local13, #2
090e4     03 00 00 FF 
090e8     00 E4 85 F1 | 	sub	objptr, ##1536
090ec     F2 3E 02 F1 | 	add	local13, objptr
090f0     1F 35 62 FC | 	wrlong	local08, local13
090f4     03 00 00 FF 
090f8     00 E4 05 F1 | 	add	objptr, ##1536
090fc     F2 40 02 FB | 	rdlong	local14, objptr
09100     20 35 02 F6 | 	mov	local08, local14
09104     01 34 66 F0 | 	shl	local08, #1
09108     20 35 02 F1 | 	add	local08, local14
0910c     02 34 66 F0 | 	shl	local08, #2
09110     03 00 00 FF 
09114     00 E4 85 F1 | 	sub	objptr, ##1536
09118     F2 34 02 F1 | 	add	local08, objptr
0911c     04 34 06 F1 | 	add	local08, #4
09120     1A 33 62 FC | 	wrlong	local07, local08
09124     03 00 00 FF 
09128     00 E4 05 F1 | 	add	objptr, ##1536
0912c     F2 34 02 FB | 	rdlong	local08, objptr
09130     1A 41 02 F6 | 	mov	local14, local08
09134     01 40 66 F0 | 	shl	local14, #1
09138     1A 41 02 F1 | 	add	local14, local08
0913c     02 40 66 F0 | 	shl	local14, #2
09140     03 00 00 FF 
09144     00 E4 85 F1 | 	sub	objptr, ##1536
09148     F2 40 02 F1 | 	add	local14, objptr
0914c     08 40 06 F1 | 	add	local14, #8
09150     20 39 62 FC | 	wrlong	local10, local14
09154     03 00 00 FF 
09158     00 E4 05 F1 | 	add	objptr, ##1536
0915c     F2 34 02 FB | 	rdlong	local08, objptr
09160     01 34 06 F1 | 	add	local08, #1
09164     F2 34 62 FC | 	wrlong	local08, objptr
09168     44 2A 06 F6 | 	mov	local03, #68
0916c     13 35 02 F6 | 	mov	local08, local01
09170     14 33 02 F6 | 	mov	local07, local02
09174     15 39 02 F6 | 	mov	local10, local03
09178     F2 40 02 FB | 	rdlong	local14, objptr
0917c     20 3F 02 F6 | 	mov	local13, local14
09180     01 3E 66 F0 | 	shl	local13, #1
09184     20 3F 02 F1 | 	add	local13, local14
09188     02 3E 66 F0 | 	shl	local13, #2
0918c     03 00 00 FF 
09190     00 E4 85 F1 | 	sub	objptr, ##1536
09194     F2 3E 02 F1 | 	add	local13, objptr
09198     1F 35 62 FC | 	wrlong	local08, local13
0919c     03 00 00 FF 
091a0     00 E4 05 F1 | 	add	objptr, ##1536
091a4     F2 40 02 FB | 	rdlong	local14, objptr
091a8     20 3F 02 F6 | 	mov	local13, local14
091ac     01 3E 66 F0 | 	shl	local13, #1
091b0     20 3F 02 F1 | 	add	local13, local14
091b4     02 3E 66 F0 | 	shl	local13, #2
091b8     03 00 00 FF 
091bc     00 E4 85 F1 | 	sub	objptr, ##1536
091c0     F2 3E 02 F1 | 	add	local13, objptr
091c4     04 3E 06 F1 | 	add	local13, #4
091c8     1F 33 62 FC | 	wrlong	local07, local13
091cc     03 00 00 FF 
091d0     00 E4 05 F1 | 	add	objptr, ##1536
091d4     F2 3E 02 FB | 	rdlong	local13, objptr
091d8     1F 41 02 F6 | 	mov	local14, local13
091dc     01 40 66 F0 | 	shl	local14, #1
091e0     1F 41 02 F1 | 	add	local14, local13
091e4     02 40 66 F0 | 	shl	local14, #2
091e8     03 00 00 FF 
091ec     00 E4 85 F1 | 	sub	objptr, ##1536
091f0     F2 40 02 F1 | 	add	local14, objptr
091f4     08 40 06 F1 | 	add	local14, #8
091f8     20 39 62 FC | 	wrlong	local10, local14
091fc     03 00 00 FF 
09200     00 E4 05 F1 | 	add	objptr, ##1536
09204     F2 34 02 FB | 	rdlong	local08, objptr
09208     01 34 06 F1 | 	add	local08, #1
0920c     F2 34 62 FC | 	wrlong	local08, objptr
09210     4A 00 00 FF 
09214     7C E4 85 F1 | 	sub	objptr, ##38012
09218                 | LR__0825
09218                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
09218     37 00 00 FF 
0921c     44 E4 05 F1 | 	add	objptr, ##28228
09220     F2 34 02 FB | 	rdlong	local08, objptr
09224     03 34 66 F0 | 	shl	local08, #3
09228     02 00 00 FF 
0922c     38 E4 85 F1 | 	sub	objptr, ##1080
09230     F2 34 02 F1 | 	add	local08, objptr
09234     04 34 06 F1 | 	add	local08, #4
09238     1A 41 02 FB | 	rdlong	local14, local08
0923c     12 40 0E F2 | 	cmp	local14, #18 wz
09240     35 00 00 FF 
09244     0C E4 85 F1 | 	sub	objptr, ##27148
09248     00 01 90 AD |  if_e	jmp	#LR__0826
0924c     37 00 00 FF 
09250     44 E4 05 F1 | 	add	objptr, ##28228
09254     F2 34 02 FB | 	rdlong	local08, objptr
09258     03 34 66 F0 | 	shl	local08, #3
0925c     02 00 00 FF 
09260     38 E4 85 F1 | 	sub	objptr, ##1080
09264     F2 34 02 F1 | 	add	local08, objptr
09268     04 34 06 F1 | 	add	local08, #4
0926c     1A 41 02 FB | 	rdlong	local14, local08
09270     11 40 0E F2 | 	cmp	local14, #17 wz
09274     35 00 00 FF 
09278     0C E4 85 F1 | 	sub	objptr, ##27148
0927c     CC 00 90 AD |  if_e	jmp	#LR__0826
09280     44 2A 06 F6 | 	mov	local03, #68
09284     13 35 02 F6 | 	mov	local08, local01
09288     14 33 02 F6 | 	mov	local07, local02
0928c     15 39 02 F6 | 	mov	local10, local03
09290     4A 00 00 FF 
09294     7C E4 05 F1 | 	add	objptr, ##38012
09298     F2 40 02 FB | 	rdlong	local14, objptr
0929c     20 3F 02 F6 | 	mov	local13, local14
092a0     01 3E 66 F0 | 	shl	local13, #1
092a4     20 3F 02 F1 | 	add	local13, local14
092a8     02 3E 66 F0 | 	shl	local13, #2
092ac     03 00 00 FF 
092b0     00 E4 85 F1 | 	sub	objptr, ##1536
092b4     F2 3E 02 F1 | 	add	local13, objptr
092b8     1F 35 62 FC | 	wrlong	local08, local13
092bc     03 00 00 FF 
092c0     00 E4 05 F1 | 	add	objptr, ##1536
092c4     F2 40 02 FB | 	rdlong	local14, objptr
092c8     20 3F 02 F6 | 	mov	local13, local14
092cc     01 3E 66 F0 | 	shl	local13, #1
092d0     20 3F 02 F1 | 	add	local13, local14
092d4     02 3E 66 F0 | 	shl	local13, #2
092d8     03 00 00 FF 
092dc     00 E4 85 F1 | 	sub	objptr, ##1536
092e0     F2 3E 02 F1 | 	add	local13, objptr
092e4     04 3E 06 F1 | 	add	local13, #4
092e8     1F 33 62 FC | 	wrlong	local07, local13
092ec     03 00 00 FF 
092f0     00 E4 05 F1 | 	add	objptr, ##1536
092f4     F2 3E 02 FB | 	rdlong	local13, objptr
092f8     1F 41 02 F6 | 	mov	local14, local13
092fc     01 40 66 F0 | 	shl	local14, #1
09300     1F 41 02 F1 | 	add	local14, local13
09304     02 40 66 F0 | 	shl	local14, #2
09308     03 00 00 FF 
0930c     00 E4 85 F1 | 	sub	objptr, ##1536
09310     F2 40 02 F1 | 	add	local14, objptr
09314     08 40 06 F1 | 	add	local14, #8
09318     20 39 62 FC | 	wrlong	local10, local14
0931c     03 00 00 FF 
09320     00 E4 05 F1 | 	add	objptr, ##1536
09324     F2 34 02 FB | 	rdlong	local08, objptr
09328     01 34 06 F1 | 	add	local08, #1
0932c     F2 34 62 FC | 	wrlong	local08, objptr
09330     13 00 00 FF 
09334     38 E4 85 F1 | 	sub	objptr, ##9784
09338     F2 34 02 FB | 	rdlong	local08, objptr
0933c     01 34 86 F1 | 	sub	local08, #1
09340     F2 34 62 FC | 	wrlong	local08, objptr
09344     37 00 00 FF 
09348     44 E4 85 F1 | 	sub	objptr, ##28228
0934c                 | LR__0826
0934c     37 00 00 FF 
09350     44 E4 05 F1 | 	add	objptr, ##28228
09354     F2 34 02 FB | 	rdlong	local08, objptr
09358     01 34 06 F1 | 	add	local08, #1
0935c     F2 34 62 FC | 	wrlong	local08, objptr
09360     37 00 00 FF 
09364     44 E4 85 F1 | 	sub	objptr, ##28228
09368                 | LR__0827
09368     00 2E 06 F6 | 	mov	local05, #0
0936c                 | ' i=0 : err=0
0936c                 | ' if lparts(ct).token<>token_end then
0936c     37 00 00 FF 
09370     44 E4 05 F1 | 	add	objptr, ##28228
09374     F2 40 02 FB | 	rdlong	local14, objptr
09378     03 40 66 F0 | 	shl	local14, #3
0937c     02 00 00 FF 
09380     38 E4 85 F1 | 	sub	objptr, ##1080
09384     F2 40 02 F1 | 	add	local14, objptr
09388     04 40 06 F1 | 	add	local14, #4
0938c     20 41 02 FB | 	rdlong	local14, local14
09390     FE 41 0E F2 | 	cmp	local14, #510 wz
09394     35 00 00 FF 
09398     0C E4 85 F1 | 	sub	objptr, ##27148
0939c     98 00 90 AD |  if_e	jmp	#LR__0829
093a0                 | '   do
093a0                 | LR__0828
093a0     58 28 B0 FD | 	call	#_getaddr
093a4     FD 42 02 F6 | 	mov	local15, result1
093a8     37 00 00 FF 
093ac     44 E4 05 F1 | 	add	objptr, ##28228
093b0     F2 40 02 FB | 	rdlong	local14, objptr
093b4     01 40 06 F1 | 	add	local14, #1
093b8     F2 40 62 FC | 	wrlong	local14, objptr
093bc     01 2E 06 F1 | 	add	local05, #1
093c0                 | '     err=getaddr() :ct+=1
093c0                 | '     i+=1 
093c0                 | '     if lparts(ct).token=token_comma then ct+=1 
093c0     03 40 66 F0 | 	shl	local14, #3
093c4     02 00 00 FF 
093c8     38 E4 85 F1 | 	sub	objptr, ##1080
093cc     F2 40 02 F1 | 	add	local14, objptr
093d0     04 40 06 F1 | 	add	local14, #4
093d4     20 41 02 FB | 	rdlong	local14, local14
093d8     11 40 0E F2 | 	cmp	local14, #17 wz
093dc     35 00 00 FF 
093e0     0C E4 85 F1 | 	sub	objptr, ##27148
093e4     37 00 00 AF 
093e8     44 E4 05 A1 |  if_e	add	objptr, ##28228
093ec     F2 34 02 AB |  if_e	rdlong	local08, objptr
093f0     01 34 06 A1 |  if_e	add	local08, #1
093f4     F2 34 62 AC |  if_e	wrlong	local08, objptr
093f8     37 00 00 AF 
093fc     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09400                 | '     if lparts(ct).token=token_end then exit loop
09400     37 00 00 FF 
09404     44 E4 05 F1 | 	add	objptr, ##28228
09408     F2 40 02 FB | 	rdlong	local14, objptr
0940c     03 40 66 F0 | 	shl	local14, #3
09410     02 00 00 FF 
09414     38 E4 85 F1 | 	sub	objptr, ##1080
09418     F2 40 02 F1 | 	add	local14, objptr
0941c     04 40 06 F1 | 	add	local14, #4
09420     20 41 02 FB | 	rdlong	local14, local14
09424     FE 41 0E F2 | 	cmp	local14, #510 wz
09428     35 00 00 FF 
0942c     0C E4 85 F1 | 	sub	objptr, ##27148
09430     08 00 90 AD |  if_e	jmp	#LR__0830
09434     68 FF 9F FD | 	jmp	#LR__0828
09438                 | LR__0829
09438     36 42 06 F6 | 	mov	local15, #54
0943c                 | LR__0830
0943c                 | ' return i,err
0943c     17 FB 01 F6 | 	mov	result1, local05
09440     21 FD 01 F6 | 	mov	result2, local15
09444     A7 F0 03 F6 | 	mov	ptra, fp
09448     B2 00 A0 FD | 	call	#popregs_
0944c                 | _compile_input_ret
0944c     2D 00 64 FD | 	ret
09450                 | 
09450                 | ' 
09450                 | ' '----- compile assign to an array element
09450                 | ' 
09450                 | ' function compile_array_assign() as ulong 
09450                 | _compile_array_assign
09450     0B 4A 05 F6 | 	mov	COUNT_, #11
09454     A8 00 A0 FD | 	call	#pushregs_
09458     00 2C 06 F6 | 	mov	local04, #0
0945c     00 2E 06 F6 | 	mov	local05, #0
09460     37 00 00 FF 
09464     44 E4 05 F1 | 	add	objptr, ##28228
09468     F2 30 02 FB | 	rdlong	local06, objptr
0946c     18 FB 01 F6 | 	mov	result1, local06
09470     01 FA 85 F1 | 	sub	result1, #1
09474     03 FA 65 F0 | 	shl	result1, #3
09478     02 00 00 FF 
0947c     38 E4 85 F1 | 	sub	objptr, ##1080
09480     F2 FA 01 F1 | 	add	result1, objptr
09484     FD 32 02 FB | 	rdlong	local07, result1
09488                 | ' numpar=0 : err=0
09488                 | ' varname$=lparts(ct-1).part$
09488                 | ' if lparts(ct).token=token_lpar then
09488     03 30 66 F0 | 	shl	local06, #3
0948c     F2 30 02 F1 | 	add	local06, objptr
09490     04 30 06 F1 | 	add	local06, #4
09494     18 31 02 FB | 	rdlong	local06, local06
09498     15 30 0E F2 | 	cmp	local06, #21 wz
0949c     35 00 00 FF 
094a0     0C E4 85 F1 | 	sub	objptr, ##27148
094a4     F4 01 90 5D |  if_ne	jmp	#LR__0844
094a8     37 00 00 FF 
094ac     44 E4 05 F1 | 	add	objptr, ##28228
094b0     F2 34 02 FB | 	rdlong	local08, objptr
094b4     01 34 06 F1 | 	add	local08, #1
094b8     F2 34 62 FC | 	wrlong	local08, objptr
094bc     37 00 00 FF 
094c0     44 E4 85 F1 | 	sub	objptr, ##28228
094c4                 | '   ct+=1 											' omit this lpar, this is for expr list
094c4                 | '   do
094c4                 | LR__0840
094c4     C8 2A B0 FD | 	call	#_expr
094c8     37 00 00 FF 
094cc     44 E4 05 F1 | 	add	objptr, ##28228
094d0     F2 30 02 FB | 	rdlong	local06, objptr
094d4     01 30 06 F1 | 	add	local06, #1
094d8     F2 30 62 FC | 	wrlong	local06, objptr
094dc     01 2C 06 F1 | 	add	local04, #1
094e0     01 30 86 F1 | 	sub	local06, #1
094e4     03 30 66 F0 | 	shl	local06, #3
094e8     02 00 00 FF 
094ec     38 E4 85 F1 | 	sub	objptr, ##1080
094f0     F2 30 02 F1 | 	add	local06, objptr
094f4     04 30 06 F1 | 	add	local06, #4
094f8     18 35 02 FB | 	rdlong	local08, local06
094fc     14 34 0E F2 | 	cmp	local08, #20 wz
09500     35 00 00 FF 
09504     0C E4 85 F1 | 	sub	objptr, ##27148
09508     34 00 90 AD |  if_e	jmp	#LR__0841
0950c     37 00 00 FF 
09510     44 E4 05 F1 | 	add	objptr, ##28228
09514     F2 34 02 FB | 	rdlong	local08, objptr
09518     03 34 66 F0 | 	shl	local08, #3
0951c     02 00 00 FF 
09520     38 E4 85 F1 | 	sub	objptr, ##1080
09524     F2 34 02 F1 | 	add	local08, objptr
09528     04 34 06 F1 | 	add	local08, #4
0952c     1A 35 02 FB | 	rdlong	local08, local08
09530     FE 35 0E F2 | 	cmp	local08, #510 wz
09534     35 00 00 FF 
09538     0C E4 85 F1 | 	sub	objptr, ##27148
0953c     84 FF 9F 5D |  if_ne	jmp	#LR__0840
09540                 | LR__0841
09540     37 00 00 FF 
09544     44 E4 05 F1 | 	add	objptr, ##28228
09548     F2 34 02 FB | 	rdlong	local08, objptr
0954c     01 34 06 F1 | 	add	local08, #1
09550     F2 34 62 FC | 	wrlong	local08, objptr
09554     37 00 00 FF 
09558     44 E4 85 F1 | 	sub	objptr, ##28228
0955c     30 2A B0 FD | 	call	#_expr
09560     01 36 66 F6 | 	neg	local09, #1
09564     00 38 06 F6 | 	mov	local10, #0
09568                 | '   ct+=1 : expr()
09568                 | '   j=-1 : i=0 
09568                 | '   do 
09568                 | LR__0842
09568                 | '     if variables(i).name=varname$ then j=i: exit loop
09568     1C 31 02 F6 | 	mov	local06, local10
0956c     04 30 66 F0 | 	shl	local06, #4
09570     14 00 00 FF 
09574     F8 E5 05 F1 | 	add	objptr, ##10744
09578     F2 30 02 F1 | 	add	local06, objptr
0957c     18 13 02 FB | 	rdlong	arg01, local06
09580     19 15 02 F6 | 	mov	arg02, local07
09584     14 00 00 FF 
09588     F8 E5 85 F1 | 	sub	objptr, ##10744
0958c     50 DF B1 FD | 	call	#__system___string_cmp
09590     00 FA 0D F2 | 	cmp	result1, #0 wz
09594     1C 37 02 A6 |  if_e	mov	local09, local10
09598     20 00 90 AD |  if_e	jmp	#LR__0843
0959c     01 38 06 F1 | 	add	local10, #1
095a0     35 00 00 FF 
095a4     08 E4 05 F1 | 	add	objptr, ##27144
095a8     F2 34 02 FB | 	rdlong	local08, objptr
095ac     35 00 00 FF 
095b0     08 E4 85 F1 | 	sub	objptr, ##27144
095b4     1A 39 5A F2 | 	cmps	local10, local08 wcz
095b8     AC FF 9F ED |  if_be	jmp	#LR__0842
095bc                 | LR__0843
095bc     1B 27 02 F6 | 	mov	local01, local09
095c0     16 29 02 F6 | 	mov	local02, local04
095c4     17 2A 06 F6 | 	mov	local03, #23
095c8     13 35 02 F6 | 	mov	local08, local01
095cc     14 3B 02 F6 | 	mov	local11, local02
095d0     15 33 02 F6 | 	mov	local07, local03
095d4     4A 00 00 FF 
095d8     7C E4 05 F1 | 	add	objptr, ##38012
095dc     F2 26 02 FB | 	rdlong	local01, objptr
095e0     13 37 02 F6 | 	mov	local09, local01
095e4     01 36 66 F0 | 	shl	local09, #1
095e8     13 37 02 F1 | 	add	local09, local01
095ec     02 36 66 F0 | 	shl	local09, #2
095f0     03 00 00 FF 
095f4     00 E4 85 F1 | 	sub	objptr, ##1536
095f8     F2 36 02 F1 | 	add	local09, objptr
095fc     1B 35 62 FC | 	wrlong	local08, local09
09600     03 00 00 FF 
09604     00 E4 05 F1 | 	add	objptr, ##1536
09608     F2 26 02 FB | 	rdlong	local01, objptr
0960c     13 37 02 F6 | 	mov	local09, local01
09610     01 36 66 F0 | 	shl	local09, #1
09614     13 37 02 F1 | 	add	local09, local01
09618     02 36 66 F0 | 	shl	local09, #2
0961c     03 00 00 FF 
09620     00 E4 85 F1 | 	sub	objptr, ##1536
09624     F2 36 02 F1 | 	add	local09, objptr
09628     04 36 06 F1 | 	add	local09, #4
0962c     1B 3B 62 FC | 	wrlong	local11, local09
09630     03 00 00 FF 
09634     00 E4 05 F1 | 	add	objptr, ##1536
09638     F2 3A 02 FB | 	rdlong	local11, objptr
0963c     1D 27 02 F6 | 	mov	local01, local11
09640     01 26 66 F0 | 	shl	local01, #1
09644     1D 27 02 F1 | 	add	local01, local11
09648     02 26 66 F0 | 	shl	local01, #2
0964c     03 00 00 FF 
09650     00 E4 85 F1 | 	sub	objptr, ##1536
09654     F2 26 02 F1 | 	add	local01, objptr
09658     08 26 06 F1 | 	add	local01, #8
0965c     13 33 62 FC | 	wrlong	local07, local01
09660     03 00 00 FF 
09664     00 E4 05 F1 | 	add	objptr, ##1536
09668     F2 34 02 FB | 	rdlong	local08, objptr
0966c     01 34 06 F1 | 	add	local08, #1
09670     F2 34 62 FC | 	wrlong	local08, objptr
09674                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09674                 | '   if numpar>3 then err=45
09674     04 2C 16 F2 | 	cmp	local04, #4 wc
09678     2D 2E 06 36 |  if_ae	mov	local05, #45
0967c                 | '   if i>varnum then err=20
0967c     15 00 00 FF 
09680     74 E4 85 F1 | 	sub	objptr, ##10868
09684     F2 34 02 FB | 	rdlong	local08, objptr
09688     35 00 00 FF 
0968c     08 E4 85 F1 | 	sub	objptr, ##27144
09690     1A 39 5A F2 | 	cmps	local10, local08 wcz
09694     14 2E 06 16 |  if_a	mov	local05, #20
09698     04 00 90 FD | 	jmp	#LR__0845
0969c                 | LR__0844
0969c     0E 2E 06 F6 | 	mov	local05, #14
096a0                 | LR__0845
096a0                 | ' return err
096a0     17 FB 01 F6 | 	mov	result1, local05
096a4     A7 F0 03 F6 | 	mov	ptra, fp
096a8     B2 00 A0 FD | 	call	#popregs_
096ac                 | _compile_array_assign_ret
096ac     2D 00 64 FD | 	ret
096b0                 | 
096b0                 | ' 
096b0                 | ' '----- compile print command with its ";" and "," modifiers
096b0                 | ' 
096b0                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
096b0                 | _compile_print
096b0     0B 4A 05 F6 | 	mov	COUNT_, #11
096b4     A8 00 A0 FD | 	call	#pushregs_
096b8     00 26 06 F6 | 	mov	local01, #0
096bc     1D 2A 06 F6 | 	mov	local03, #29
096c0                 | ' t1.result.uresult=0 : t1.result_type=result_uint
096c0                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
096c0     37 00 00 FF 
096c4     44 E4 05 F1 | 	add	objptr, ##28228
096c8     F2 2C 02 FB | 	rdlong	local04, objptr
096cc     03 2C 66 F0 | 	shl	local04, #3
096d0     02 00 00 FF 
096d4     38 E4 85 F1 | 	sub	objptr, ##1080
096d8     F2 2C 02 F1 | 	add	local04, objptr
096dc     04 2C 06 F1 | 	add	local04, #4
096e0     16 2D 02 FB | 	rdlong	local04, local04
096e4     FE 2D 0E F2 | 	cmp	local04, #510 wz
096e8     35 00 00 FF 
096ec     0C E4 85 F1 | 	sub	objptr, ##27148
096f0     68 01 90 5D |  if_ne	jmp	#LR__0850
096f4     20 2A 06 F6 | 	mov	local03, #32
096f8     13 2F 02 F6 | 	mov	local05, local01
096fc     14 31 02 F6 | 	mov	local06, local02
09700     15 33 02 F6 | 	mov	local07, local03
09704     4A 00 00 FF 
09708     7C E4 05 F1 | 	add	objptr, ##38012
0970c     F2 34 02 FB | 	rdlong	local08, objptr
09710     1A 37 02 F6 | 	mov	local09, local08
09714     01 36 66 F0 | 	shl	local09, #1
09718     1A 37 02 F1 | 	add	local09, local08
0971c     02 36 66 F0 | 	shl	local09, #2
09720     03 00 00 FF 
09724     00 E4 85 F1 | 	sub	objptr, ##1536
09728     F2 36 02 F1 | 	add	local09, objptr
0972c     1B 2F 62 FC | 	wrlong	local05, local09
09730     03 00 00 FF 
09734     00 E4 05 F1 | 	add	objptr, ##1536
09738     F2 2E 02 FB | 	rdlong	local05, objptr
0973c     17 39 02 F6 | 	mov	local10, local05
09740     01 38 66 F0 | 	shl	local10, #1
09744     17 39 02 F1 | 	add	local10, local05
09748     02 38 66 F0 | 	shl	local10, #2
0974c     03 00 00 FF 
09750     00 E4 85 F1 | 	sub	objptr, ##1536
09754     F2 38 02 F1 | 	add	local10, objptr
09758     04 38 06 F1 | 	add	local10, #4
0975c     1C 31 62 FC | 	wrlong	local06, local10
09760     03 00 00 FF 
09764     00 E4 05 F1 | 	add	objptr, ##1536
09768     F2 2E 02 FB | 	rdlong	local05, objptr
0976c     17 3B 02 F6 | 	mov	local11, local05
09770     01 3A 66 F0 | 	shl	local11, #1
09774     17 3B 02 F1 | 	add	local11, local05
09778     02 3A 66 F0 | 	shl	local11, #2
0977c     03 00 00 FF 
09780     00 E4 85 F1 | 	sub	objptr, ##1536
09784     F2 3A 02 F1 | 	add	local11, objptr
09788     08 3A 06 F1 | 	add	local11, #8
0978c     1D 33 62 FC | 	wrlong	local07, local11
09790     03 00 00 FF 
09794     00 E4 05 F1 | 	add	objptr, ##1536
09798     F2 2E 02 FB | 	rdlong	local05, objptr
0979c     01 2E 06 F1 | 	add	local05, #1
097a0     F2 2E 62 FC | 	wrlong	local05, objptr
097a4     44 2A 06 F6 | 	mov	local03, #68
097a8     13 2F 02 F6 | 	mov	local05, local01
097ac     14 31 02 F6 | 	mov	local06, local02
097b0     15 33 02 F6 | 	mov	local07, local03
097b4     F2 34 02 FB | 	rdlong	local08, objptr
097b8     1A 37 02 F6 | 	mov	local09, local08
097bc     01 36 66 F0 | 	shl	local09, #1
097c0     1A 37 02 F1 | 	add	local09, local08
097c4     02 36 66 F0 | 	shl	local09, #2
097c8     03 00 00 FF 
097cc     00 E4 85 F1 | 	sub	objptr, ##1536
097d0     F2 36 02 F1 | 	add	local09, objptr
097d4     1B 2F 62 FC | 	wrlong	local05, local09
097d8     03 00 00 FF 
097dc     00 E4 05 F1 | 	add	objptr, ##1536
097e0     F2 3A 02 FB | 	rdlong	local11, objptr
097e4     1D 39 02 F6 | 	mov	local10, local11
097e8     01 38 66 F0 | 	shl	local10, #1
097ec     1D 39 02 F1 | 	add	local10, local11
097f0     02 38 66 F0 | 	shl	local10, #2
097f4     03 00 00 FF 
097f8     00 E4 85 F1 | 	sub	objptr, ##1536
097fc     F2 38 02 F1 | 	add	local10, objptr
09800     04 38 06 F1 | 	add	local10, #4
09804     1C 31 62 FC | 	wrlong	local06, local10
09808     03 00 00 FF 
0980c     00 E4 05 F1 | 	add	objptr, ##1536
09810     F2 38 02 FB | 	rdlong	local10, objptr
09814     1C 3B 02 F6 | 	mov	local11, local10
09818     01 3A 66 F0 | 	shl	local11, #1
0981c     1C 3B 02 F1 | 	add	local11, local10
09820     02 3A 66 F0 | 	shl	local11, #2
09824     03 00 00 FF 
09828     00 E4 85 F1 | 	sub	objptr, ##1536
0982c     F2 3A 02 F1 | 	add	local11, objptr
09830     08 3A 06 F1 | 	add	local11, #8
09834     1D 33 62 FC | 	wrlong	local07, local11
09838     03 00 00 FF 
0983c     00 E4 05 F1 | 	add	objptr, ##1536
09840     F2 2E 02 FB | 	rdlong	local05, objptr
09844     01 2E 06 F1 | 	add	local05, #1
09848     F2 2E 62 FC | 	wrlong	local05, objptr
0984c     4A 00 00 FF 
09850     7C E4 85 F1 | 	sub	objptr, ##38012
09854     00 FA 05 F6 | 	mov	result1, #0
09858     20 05 90 FD | 	jmp	#LR__0857
0985c                 | LR__0850
0985c                 | ' do
0985c                 | LR__0851
0985c     30 27 B0 FD | 	call	#_expr
09860                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
09860                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09860     37 00 00 FF 
09864     44 E4 05 F1 | 	add	objptr, ##28228
09868     F2 2C 02 FB | 	rdlong	local04, objptr
0986c     03 2C 66 F0 | 	shl	local04, #3
09870     02 00 00 FF 
09874     38 E4 85 F1 | 	sub	objptr, ##1080
09878     F2 2C 02 F1 | 	add	local04, objptr
0987c     04 2C 06 F1 | 	add	local04, #4
09880     16 35 02 FB | 	rdlong	local08, local04
09884     11 34 0E F2 | 	cmp	local08, #17 wz
09888     35 00 00 FF 
0988c     0C E4 85 F1 | 	sub	objptr, ##27148
09890     60 01 90 5D |  if_ne	jmp	#LR__0852
09894     21 2A 06 F6 | 	mov	local03, #33
09898     13 2F 02 F6 | 	mov	local05, local01
0989c     14 31 02 F6 | 	mov	local06, local02
098a0     15 33 02 F6 | 	mov	local07, local03
098a4     4A 00 00 FF 
098a8     7C E4 05 F1 | 	add	objptr, ##38012
098ac     F2 34 02 FB | 	rdlong	local08, objptr
098b0     1A 37 02 F6 | 	mov	local09, local08
098b4     01 36 66 F0 | 	shl	local09, #1
098b8     1A 37 02 F1 | 	add	local09, local08
098bc     02 36 66 F0 | 	shl	local09, #2
098c0     03 00 00 FF 
098c4     00 E4 85 F1 | 	sub	objptr, ##1536
098c8     F2 36 02 F1 | 	add	local09, objptr
098cc     1B 2F 62 FC | 	wrlong	local05, local09
098d0     03 00 00 FF 
098d4     00 E4 05 F1 | 	add	objptr, ##1536
098d8     F2 3A 02 FB | 	rdlong	local11, objptr
098dc     1D 39 02 F6 | 	mov	local10, local11
098e0     01 38 66 F0 | 	shl	local10, #1
098e4     1D 39 02 F1 | 	add	local10, local11
098e8     02 38 66 F0 | 	shl	local10, #2
098ec     03 00 00 FF 
098f0     00 E4 85 F1 | 	sub	objptr, ##1536
098f4     F2 38 02 F1 | 	add	local10, objptr
098f8     04 38 06 F1 | 	add	local10, #4
098fc     1C 31 62 FC | 	wrlong	local06, local10
09900     03 00 00 FF 
09904     00 E4 05 F1 | 	add	objptr, ##1536
09908     F2 2E 02 FB | 	rdlong	local05, objptr
0990c     17 3B 02 F6 | 	mov	local11, local05
09910     01 3A 66 F0 | 	shl	local11, #1
09914     17 3B 02 F1 | 	add	local11, local05
09918     02 3A 66 F0 | 	shl	local11, #2
0991c     03 00 00 FF 
09920     00 E4 85 F1 | 	sub	objptr, ##1536
09924     F2 3A 02 F1 | 	add	local11, objptr
09928     08 3A 06 F1 | 	add	local11, #8
0992c     1D 33 62 FC | 	wrlong	local07, local11
09930     03 00 00 FF 
09934     00 E4 05 F1 | 	add	objptr, ##1536
09938     F2 2E 02 FB | 	rdlong	local05, objptr
0993c     01 2E 06 F1 | 	add	local05, #1
09940     F2 2E 62 FC | 	wrlong	local05, objptr
09944     44 2A 06 F6 | 	mov	local03, #68
09948     13 2F 02 F6 | 	mov	local05, local01
0994c     14 31 02 F6 | 	mov	local06, local02
09950     15 33 02 F6 | 	mov	local07, local03
09954     F2 34 02 FB | 	rdlong	local08, objptr
09958     1A 37 02 F6 | 	mov	local09, local08
0995c     01 36 66 F0 | 	shl	local09, #1
09960     1A 37 02 F1 | 	add	local09, local08
09964     02 36 66 F0 | 	shl	local09, #2
09968     03 00 00 FF 
0996c     00 E4 85 F1 | 	sub	objptr, ##1536
09970     F2 36 02 F1 | 	add	local09, objptr
09974     1B 2F 62 FC | 	wrlong	local05, local09
09978     03 00 00 FF 
0997c     00 E4 05 F1 | 	add	objptr, ##1536
09980     F2 3A 02 FB | 	rdlong	local11, objptr
09984     1D 39 02 F6 | 	mov	local10, local11
09988     01 38 66 F0 | 	shl	local10, #1
0998c     1D 39 02 F1 | 	add	local10, local11
09990     02 38 66 F0 | 	shl	local10, #2
09994     03 00 00 FF 
09998     00 E4 85 F1 | 	sub	objptr, ##1536
0999c     F2 38 02 F1 | 	add	local10, objptr
099a0     04 38 06 F1 | 	add	local10, #4
099a4     1C 31 62 FC | 	wrlong	local06, local10
099a8     03 00 00 FF 
099ac     00 E4 05 F1 | 	add	objptr, ##1536
099b0     F2 38 02 FB | 	rdlong	local10, objptr
099b4     1C 3B 02 F6 | 	mov	local11, local10
099b8     01 3A 66 F0 | 	shl	local11, #1
099bc     1C 3B 02 F1 | 	add	local11, local10
099c0     02 3A 66 F0 | 	shl	local11, #2
099c4     03 00 00 FF 
099c8     00 E4 85 F1 | 	sub	objptr, ##1536
099cc     F2 3A 02 F1 | 	add	local11, objptr
099d0     08 3A 06 F1 | 	add	local11, #8
099d4     1D 33 62 FC | 	wrlong	local07, local11
099d8     03 00 00 FF 
099dc     00 E4 05 F1 | 	add	objptr, ##1536
099e0     F2 2E 02 FB | 	rdlong	local05, objptr
099e4     01 2E 06 F1 | 	add	local05, #1
099e8     F2 2E 62 FC | 	wrlong	local05, objptr
099ec     4A 00 00 FF 
099f0     7C E4 85 F1 | 	sub	objptr, ##38012
099f4                 | LR__0852
099f4                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
099f4     37 00 00 FF 
099f8     44 E4 05 F1 | 	add	objptr, ##28228
099fc     F2 2C 02 FB | 	rdlong	local04, objptr
09a00     03 2C 66 F0 | 	shl	local04, #3
09a04     02 00 00 FF 
09a08     38 E4 85 F1 | 	sub	objptr, ##1080
09a0c     F2 2C 02 F1 | 	add	local04, objptr
09a10     04 2C 06 F1 | 	add	local04, #4
09a14     16 35 02 FB | 	rdlong	local08, local04
09a18     12 34 0E F2 | 	cmp	local08, #18 wz
09a1c     35 00 00 FF 
09a20     0C E4 85 F1 | 	sub	objptr, ##27148
09a24     60 01 90 5D |  if_ne	jmp	#LR__0853
09a28     22 2A 06 F6 | 	mov	local03, #34
09a2c     13 2F 02 F6 | 	mov	local05, local01
09a30     14 31 02 F6 | 	mov	local06, local02
09a34     15 33 02 F6 | 	mov	local07, local03
09a38     4A 00 00 FF 
09a3c     7C E4 05 F1 | 	add	objptr, ##38012
09a40     F2 34 02 FB | 	rdlong	local08, objptr
09a44     1A 37 02 F6 | 	mov	local09, local08
09a48     01 36 66 F0 | 	shl	local09, #1
09a4c     1A 37 02 F1 | 	add	local09, local08
09a50     02 36 66 F0 | 	shl	local09, #2
09a54     03 00 00 FF 
09a58     00 E4 85 F1 | 	sub	objptr, ##1536
09a5c     F2 36 02 F1 | 	add	local09, objptr
09a60     1B 2F 62 FC | 	wrlong	local05, local09
09a64     03 00 00 FF 
09a68     00 E4 05 F1 | 	add	objptr, ##1536
09a6c     F2 3A 02 FB | 	rdlong	local11, objptr
09a70     1D 39 02 F6 | 	mov	local10, local11
09a74     01 38 66 F0 | 	shl	local10, #1
09a78     1D 39 02 F1 | 	add	local10, local11
09a7c     02 38 66 F0 | 	shl	local10, #2
09a80     03 00 00 FF 
09a84     00 E4 85 F1 | 	sub	objptr, ##1536
09a88     F2 38 02 F1 | 	add	local10, objptr
09a8c     04 38 06 F1 | 	add	local10, #4
09a90     1C 31 62 FC | 	wrlong	local06, local10
09a94     03 00 00 FF 
09a98     00 E4 05 F1 | 	add	objptr, ##1536
09a9c     F2 2E 02 FB | 	rdlong	local05, objptr
09aa0     17 3B 02 F6 | 	mov	local11, local05
09aa4     01 3A 66 F0 | 	shl	local11, #1
09aa8     17 3B 02 F1 | 	add	local11, local05
09aac     02 3A 66 F0 | 	shl	local11, #2
09ab0     03 00 00 FF 
09ab4     00 E4 85 F1 | 	sub	objptr, ##1536
09ab8     F2 3A 02 F1 | 	add	local11, objptr
09abc     08 3A 06 F1 | 	add	local11, #8
09ac0     1D 33 62 FC | 	wrlong	local07, local11
09ac4     03 00 00 FF 
09ac8     00 E4 05 F1 | 	add	objptr, ##1536
09acc     F2 2E 02 FB | 	rdlong	local05, objptr
09ad0     01 2E 06 F1 | 	add	local05, #1
09ad4     F2 2E 62 FC | 	wrlong	local05, objptr
09ad8     44 2A 06 F6 | 	mov	local03, #68
09adc     13 2F 02 F6 | 	mov	local05, local01
09ae0     14 31 02 F6 | 	mov	local06, local02
09ae4     15 33 02 F6 | 	mov	local07, local03
09ae8     F2 34 02 FB | 	rdlong	local08, objptr
09aec     1A 37 02 F6 | 	mov	local09, local08
09af0     01 36 66 F0 | 	shl	local09, #1
09af4     1A 37 02 F1 | 	add	local09, local08
09af8     02 36 66 F0 | 	shl	local09, #2
09afc     03 00 00 FF 
09b00     00 E4 85 F1 | 	sub	objptr, ##1536
09b04     F2 36 02 F1 | 	add	local09, objptr
09b08     1B 2F 62 FC | 	wrlong	local05, local09
09b0c     03 00 00 FF 
09b10     00 E4 05 F1 | 	add	objptr, ##1536
09b14     F2 3A 02 FB | 	rdlong	local11, objptr
09b18     1D 39 02 F6 | 	mov	local10, local11
09b1c     01 38 66 F0 | 	shl	local10, #1
09b20     1D 39 02 F1 | 	add	local10, local11
09b24     02 38 66 F0 | 	shl	local10, #2
09b28     03 00 00 FF 
09b2c     00 E4 85 F1 | 	sub	objptr, ##1536
09b30     F2 38 02 F1 | 	add	local10, objptr
09b34     04 38 06 F1 | 	add	local10, #4
09b38     1C 31 62 FC | 	wrlong	local06, local10
09b3c     03 00 00 FF 
09b40     00 E4 05 F1 | 	add	objptr, ##1536
09b44     F2 38 02 FB | 	rdlong	local10, objptr
09b48     1C 3B 02 F6 | 	mov	local11, local10
09b4c     01 3A 66 F0 | 	shl	local11, #1
09b50     1C 3B 02 F1 | 	add	local11, local10
09b54     02 3A 66 F0 | 	shl	local11, #2
09b58     03 00 00 FF 
09b5c     00 E4 85 F1 | 	sub	objptr, ##1536
09b60     F2 3A 02 F1 | 	add	local11, objptr
09b64     08 3A 06 F1 | 	add	local11, #8
09b68     1D 33 62 FC | 	wrlong	local07, local11
09b6c     03 00 00 FF 
09b70     00 E4 05 F1 | 	add	objptr, ##1536
09b74     F2 2E 02 FB | 	rdlong	local05, objptr
09b78     01 2E 06 F1 | 	add	local05, #1
09b7c     F2 2E 62 FC | 	wrlong	local05, objptr
09b80     4A 00 00 FF 
09b84     7C E4 85 F1 | 	sub	objptr, ##38012
09b88                 | LR__0853
09b88                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09b88     37 00 00 FF 
09b8c     44 E4 05 F1 | 	add	objptr, ##28228
09b90     F2 2C 02 FB | 	rdlong	local04, objptr
09b94     03 2C 66 F0 | 	shl	local04, #3
09b98     02 00 00 FF 
09b9c     38 E4 85 F1 | 	sub	objptr, ##1080
09ba0     F2 2C 02 F1 | 	add	local04, objptr
09ba4     04 2C 06 F1 | 	add	local04, #4
09ba8     16 35 02 FB | 	rdlong	local08, local04
09bac     FE 35 0E F2 | 	cmp	local08, #510 wz
09bb0     35 00 00 FF 
09bb4     0C E4 85 F1 | 	sub	objptr, ##27148
09bb8     B8 00 90 5D |  if_ne	jmp	#LR__0854
09bbc     44 2A 06 F6 | 	mov	local03, #68
09bc0     13 2F 02 F6 | 	mov	local05, local01
09bc4     14 31 02 F6 | 	mov	local06, local02
09bc8     15 33 02 F6 | 	mov	local07, local03
09bcc     4A 00 00 FF 
09bd0     7C E4 05 F1 | 	add	objptr, ##38012
09bd4     F2 34 02 FB | 	rdlong	local08, objptr
09bd8     1A 37 02 F6 | 	mov	local09, local08
09bdc     01 36 66 F0 | 	shl	local09, #1
09be0     1A 37 02 F1 | 	add	local09, local08
09be4     02 36 66 F0 | 	shl	local09, #2
09be8     03 00 00 FF 
09bec     00 E4 85 F1 | 	sub	objptr, ##1536
09bf0     F2 36 02 F1 | 	add	local09, objptr
09bf4     1B 2F 62 FC | 	wrlong	local05, local09
09bf8     03 00 00 FF 
09bfc     00 E4 05 F1 | 	add	objptr, ##1536
09c00     F2 3A 02 FB | 	rdlong	local11, objptr
09c04     1D 39 02 F6 | 	mov	local10, local11
09c08     01 38 66 F0 | 	shl	local10, #1
09c0c     1D 39 02 F1 | 	add	local10, local11
09c10     02 38 66 F0 | 	shl	local10, #2
09c14     03 00 00 FF 
09c18     00 E4 85 F1 | 	sub	objptr, ##1536
09c1c     F2 38 02 F1 | 	add	local10, objptr
09c20     04 38 06 F1 | 	add	local10, #4
09c24     1C 31 62 FC | 	wrlong	local06, local10
09c28     03 00 00 FF 
09c2c     00 E4 05 F1 | 	add	objptr, ##1536
09c30     F2 38 02 FB | 	rdlong	local10, objptr
09c34     1C 3B 02 F6 | 	mov	local11, local10
09c38     01 3A 66 F0 | 	shl	local11, #1
09c3c     1C 3B 02 F1 | 	add	local11, local10
09c40     02 3A 66 F0 | 	shl	local11, #2
09c44     03 00 00 FF 
09c48     00 E4 85 F1 | 	sub	objptr, ##1536
09c4c     F2 3A 02 F1 | 	add	local11, objptr
09c50     08 3A 06 F1 | 	add	local11, #8
09c54     1D 33 62 FC | 	wrlong	local07, local11
09c58     03 00 00 FF 
09c5c     00 E4 05 F1 | 	add	objptr, ##1536
09c60     F2 2E 02 FB | 	rdlong	local05, objptr
09c64     01 2E 06 F1 | 	add	local05, #1
09c68     F2 2E 62 FC | 	wrlong	local05, objptr
09c6c     4A 00 00 FF 
09c70     7C E4 85 F1 | 	sub	objptr, ##38012
09c74                 | LR__0854
09c74                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09c74     37 00 00 FF 
09c78     44 E4 05 F1 | 	add	objptr, ##28228
09c7c     F2 2C 02 FB | 	rdlong	local04, objptr
09c80     03 2C 66 F0 | 	shl	local04, #3
09c84     02 00 00 FF 
09c88     38 E4 85 F1 | 	sub	objptr, ##1080
09c8c     F2 2C 02 F1 | 	add	local04, objptr
09c90     04 2C 06 F1 | 	add	local04, #4
09c94     16 35 02 FB | 	rdlong	local08, local04
09c98     11 34 0E F2 | 	cmp	local08, #17 wz
09c9c     35 00 00 FF 
09ca0     0C E4 85 F1 | 	sub	objptr, ##27148
09ca4     6C 00 90 AD |  if_e	jmp	#LR__0855
09ca8     37 00 00 FF 
09cac     44 E4 05 F1 | 	add	objptr, ##28228
09cb0     F2 34 02 FB | 	rdlong	local08, objptr
09cb4     03 34 66 F0 | 	shl	local08, #3
09cb8     02 00 00 FF 
09cbc     38 E4 85 F1 | 	sub	objptr, ##1080
09cc0     F2 34 02 F1 | 	add	local08, objptr
09cc4     04 34 06 F1 | 	add	local08, #4
09cc8     1A 35 02 FB | 	rdlong	local08, local08
09ccc     12 34 0E F2 | 	cmp	local08, #18 wz
09cd0     35 00 00 FF 
09cd4     0C E4 85 F1 | 	sub	objptr, ##27148
09cd8     38 00 90 AD |  if_e	jmp	#LR__0855
09cdc     37 00 00 FF 
09ce0     44 E4 05 F1 | 	add	objptr, ##28228
09ce4     F2 3A 02 FB | 	rdlong	local11, objptr
09ce8     03 3A 66 F0 | 	shl	local11, #3
09cec     02 00 00 FF 
09cf0     38 E4 85 F1 | 	sub	objptr, ##1080
09cf4     F2 3A 02 F1 | 	add	local11, objptr
09cf8     04 3A 06 F1 | 	add	local11, #4
09cfc     1D 3B 02 FB | 	rdlong	local11, local11
09d00     FE 3B 0E F2 | 	cmp	local11, #510 wz
09d04     35 00 00 FF 
09d08     0C E4 85 F1 | 	sub	objptr, ##27148
09d0c     16 FA 05 56 |  if_ne	mov	result1, #22
09d10     68 00 90 5D |  if_ne	jmp	#LR__0857
09d14                 | LR__0855
09d14     37 00 00 FF 
09d18     44 E4 05 F1 | 	add	objptr, ##28228
09d1c     F2 2C 02 FB | 	rdlong	local04, objptr
09d20     01 2C 06 F1 | 	add	local04, #1
09d24     F2 2C 62 FC | 	wrlong	local04, objptr
09d28     03 2C 66 F0 | 	shl	local04, #3
09d2c     02 00 00 FF 
09d30     38 E4 85 F1 | 	sub	objptr, ##1080
09d34     F2 2C 02 F1 | 	add	local04, objptr
09d38     04 2C 06 F1 | 	add	local04, #4
09d3c     16 35 02 FB | 	rdlong	local08, local04
09d40     FE 35 0E F2 | 	cmp	local08, #510 wz
09d44     35 00 00 FF 
09d48     0C E4 85 F1 | 	sub	objptr, ##27148
09d4c     28 00 90 AD |  if_e	jmp	#LR__0856
09d50     37 00 00 FF 
09d54     44 E4 05 F1 | 	add	objptr, ##28228
09d58     F2 3A 02 FB | 	rdlong	local11, objptr
09d5c     0E 00 00 FF 
09d60     1C E4 05 F1 | 	add	objptr, ##7196
09d64     F2 38 02 FB | 	rdlong	local10, objptr
09d68     45 00 00 FF 
09d6c     60 E4 85 F1 | 	sub	objptr, ##35424
09d70     1C 3B 52 F2 | 	cmps	local11, local10 wc
09d74     E4 FA 9F CD |  if_b	jmp	#LR__0851
09d78                 | LR__0856
09d78                 | ' return 0
09d78     00 FA 05 F6 | 	mov	result1, #0
09d7c                 | LR__0857
09d7c     A7 F0 03 F6 | 	mov	ptra, fp
09d80     B2 00 A0 FD | 	call	#popregs_
09d84                 | _compile_print_ret
09d84     2D 00 64 FD | 	ret
09d88                 | 
09d88                 | ' 
09d88                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09d88                 | ' 
09d88                 | ' function compile_if(aline as ulong) as ulong  
09d88                 | _compile_if
09d88     09 4A 05 F6 | 	mov	COUNT_, #9
09d8c     A8 00 A0 FD | 	call	#pushregs_
09d90                 | _compile_if_enter
09d90     09 2D 02 F6 | 	mov	local04, arg01
09d94                 | ' return expr()
09d94     F8 21 B0 FD | 	call	#_expr
09d98     37 00 00 FF 
09d9c     44 E4 05 F1 | 	add	objptr, ##28228
09da0     F2 14 02 FB | 	rdlong	arg02, objptr
09da4     0A 2F 02 F6 | 	mov	local05, arg02
09da8     03 2E 66 F0 | 	shl	local05, #3
09dac     02 00 00 FF 
09db0     38 E4 85 F1 | 	sub	objptr, ##1080
09db4     F2 2E 02 F1 | 	add	local05, objptr
09db8     04 2E 06 F1 | 	add	local05, #4
09dbc     17 2F 02 FB | 	rdlong	local05, local05
09dc0     01 14 06 F1 | 	add	arg02, #1
09dc4     02 00 00 FF 
09dc8     38 E4 05 F1 | 	add	objptr, ##1080
09dcc     F2 14 62 FC | 	wrlong	arg02, objptr
09dd0     37 00 00 FF 
09dd4     44 E4 85 F1 | 	sub	objptr, ##28228
09dd8                 | ' 
09dd8                 | ' err=compile_fun_1p()
09dd8                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09dd8     5B 2E 0E F2 | 	cmp	local05, #91 wz
09ddc     34 FA 05 56 |  if_ne	mov	result1, #52
09de0     20 01 90 5D |  if_ne	jmp	#LR__0862
09de4     58 2A 06 F6 | 	mov	local03, #88
09de8     13 31 02 F6 | 	mov	local06, local01
09dec     14 33 02 F6 | 	mov	local07, local02
09df0     15 15 02 F6 | 	mov	arg02, local03
09df4     4A 00 00 FF 
09df8     7C E4 05 F1 | 	add	objptr, ##38012
09dfc     F2 12 02 FB | 	rdlong	arg01, objptr
09e00     09 35 02 F6 | 	mov	local08, arg01
09e04     01 34 66 F0 | 	shl	local08, #1
09e08     09 35 02 F1 | 	add	local08, arg01
09e0c     02 34 66 F0 | 	shl	local08, #2
09e10     03 00 00 FF 
09e14     00 E4 85 F1 | 	sub	objptr, ##1536
09e18     F2 34 02 F1 | 	add	local08, objptr
09e1c     1A 31 62 FC | 	wrlong	local06, local08
09e20     03 00 00 FF 
09e24     00 E4 05 F1 | 	add	objptr, ##1536
09e28     F2 30 02 FB | 	rdlong	local06, objptr
09e2c     18 13 02 F6 | 	mov	arg01, local06
09e30     01 12 66 F0 | 	shl	arg01, #1
09e34     18 13 02 F1 | 	add	arg01, local06
09e38     02 12 66 F0 | 	shl	arg01, #2
09e3c     03 00 00 FF 
09e40     00 E4 85 F1 | 	sub	objptr, ##1536
09e44     F2 12 02 F1 | 	add	arg01, objptr
09e48     04 12 06 F1 | 	add	arg01, #4
09e4c     09 33 62 FC | 	wrlong	local07, arg01
09e50     03 00 00 FF 
09e54     00 E4 05 F1 | 	add	objptr, ##1536
09e58     F2 30 02 FB | 	rdlong	local06, objptr
09e5c     18 13 02 F6 | 	mov	arg01, local06
09e60     01 12 66 F0 | 	shl	arg01, #1
09e64     18 13 02 F1 | 	add	arg01, local06
09e68     02 12 66 F0 | 	shl	arg01, #2
09e6c     03 00 00 FF 
09e70     00 E4 85 F1 | 	sub	objptr, ##1536
09e74     F2 12 02 F1 | 	add	arg01, objptr
09e78     08 12 06 F1 | 	add	arg01, #8
09e7c     09 15 62 FC | 	wrlong	arg02, arg01
09e80     03 00 00 FF 
09e84     00 E4 05 F1 | 	add	objptr, ##1536
09e88     F2 30 02 FB | 	rdlong	local06, objptr
09e8c     01 30 06 F1 | 	add	local06, #1
09e90     F2 30 62 FC | 	wrlong	local06, objptr
09e94                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09e94                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09e94     13 00 00 FF 
09e98     38 E4 85 F1 | 	sub	objptr, ##9784
09e9c     F2 14 02 FB | 	rdlong	arg02, objptr
09ea0     01 14 06 F1 | 	add	arg02, #1
09ea4     03 14 66 F0 | 	shl	arg02, #3
09ea8     02 00 00 FF 
09eac     38 E4 85 F1 | 	sub	objptr, ##1080
09eb0     F2 14 02 F1 | 	add	arg02, objptr
09eb4     0A 13 02 FB | 	rdlong	arg01, arg02
09eb8     35 00 00 FF 
09ebc     0C E4 85 F1 | 	sub	objptr, ##27148
09ec0                 | ' 
09ec0                 | ' select case s
09ec0     B9 01 00 FF 
09ec4     02 14 06 F6 | 	mov	arg02, ##@LR__5609
09ec8     14 D6 B1 FD | 	call	#__system___string_cmp
09ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
09ed0     1B FA 05 A6 |  if_e	mov	result1, #27
09ed4     00 FA 05 56 |  if_ne	mov	result1, #0
09ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
09edc     10 00 90 AD |  if_e	jmp	#LR__0860
09ee0     05 12 06 F6 | 	mov	arg01, #5
09ee4     38 E4 BF FD | 	call	#_compile_immediate_assign
09ee8     FD 36 02 F6 | 	mov	local09, result1
09eec     10 00 90 FD | 	jmp	#LR__0861
09ef0                 | LR__0860
09ef0     05 12 06 F6 | 	mov	arg01, #5
09ef4     16 15 02 F6 | 	mov	arg02, local04
09ef8     4C DA BF FD | 	call	#_compile_immediate
09efc     FD 36 02 F6 | 	mov	local09, result1
09f00                 | LR__0861
09f00                 | ' return err
09f00     1B FB 01 F6 | 	mov	result1, local09
09f04                 | LR__0862
09f04     A7 F0 03 F6 | 	mov	ptra, fp
09f08     B2 00 A0 FD | 	call	#popregs_
09f0c                 | _compile_if_ret
09f0c     2D 00 64 FD | 	ret
09f10                 | 
09f10                 | ' 
09f10                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09f10                 | ' 
09f10                 | ' function compile_else(aline as ulong) as ulong  
09f10                 | _compile_else
09f10     07 4A 05 F6 | 	mov	COUNT_, #7
09f14     A8 00 A0 FD | 	call	#pushregs_
09f18                 | _compile_else_enter
09f18     09 2D 02 F6 | 	mov	local04, arg01
09f1c     5A 2A 06 F6 | 	mov	local03, #90
09f20     13 2F 02 F6 | 	mov	local05, local01
09f24     14 31 02 F6 | 	mov	local06, local02
09f28     15 27 02 F6 | 	mov	local01, local03
09f2c     4A 00 00 FF 
09f30     7C E4 05 F1 | 	add	objptr, ##38012
09f34     F2 14 02 FB | 	rdlong	arg02, objptr
09f38     0A 13 02 F6 | 	mov	arg01, arg02
09f3c     01 12 66 F0 | 	shl	arg01, #1
09f40     0A 13 02 F1 | 	add	arg01, arg02
09f44     02 12 66 F0 | 	shl	arg01, #2
09f48     03 00 00 FF 
09f4c     00 E4 85 F1 | 	sub	objptr, ##1536
09f50     F2 12 02 F1 | 	add	arg01, objptr
09f54     09 2F 62 FC | 	wrlong	local05, arg01
09f58     03 00 00 FF 
09f5c     00 E4 05 F1 | 	add	objptr, ##1536
09f60     F2 2E 02 FB | 	rdlong	local05, objptr
09f64     17 15 02 F6 | 	mov	arg02, local05
09f68     01 14 66 F0 | 	shl	arg02, #1
09f6c     17 15 02 F1 | 	add	arg02, local05
09f70     02 14 66 F0 | 	shl	arg02, #2
09f74     03 00 00 FF 
09f78     00 E4 85 F1 | 	sub	objptr, ##1536
09f7c     F2 14 02 F1 | 	add	arg02, objptr
09f80     04 14 06 F1 | 	add	arg02, #4
09f84     0A 31 62 FC | 	wrlong	local06, arg02
09f88     03 00 00 FF 
09f8c     00 E4 05 F1 | 	add	objptr, ##1536
09f90     F2 30 02 FB | 	rdlong	local06, objptr
09f94     18 2F 02 F6 | 	mov	local05, local06
09f98     01 2E 66 F0 | 	shl	local05, #1
09f9c     18 2F 02 F1 | 	add	local05, local06
09fa0     02 2E 66 F0 | 	shl	local05, #2
09fa4     03 00 00 FF 
09fa8     00 E4 85 F1 | 	sub	objptr, ##1536
09fac     F2 2E 02 F1 | 	add	local05, objptr
09fb0     08 2E 06 F1 | 	add	local05, #8
09fb4     17 27 62 FC | 	wrlong	local01, local05
09fb8     03 00 00 FF 
09fbc     00 E4 05 F1 | 	add	objptr, ##1536
09fc0     F2 2E 02 FB | 	rdlong	local05, objptr
09fc4     01 2E 06 F1 | 	add	local05, #1
09fc8     F2 2E 62 FC | 	wrlong	local05, objptr
09fcc                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09fcc                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09fcc     13 00 00 FF 
09fd0     38 E4 85 F1 | 	sub	objptr, ##9784
09fd4     F2 30 02 FB | 	rdlong	local06, objptr
09fd8     01 30 06 F1 | 	add	local06, #1
09fdc     03 30 66 F0 | 	shl	local06, #3
09fe0     02 00 00 FF 
09fe4     38 E4 85 F1 | 	sub	objptr, ##1080
09fe8     F2 30 02 F1 | 	add	local06, objptr
09fec     18 13 02 FB | 	rdlong	arg01, local06
09ff0     35 00 00 FF 
09ff4     0C E4 85 F1 | 	sub	objptr, ##27148
09ff8                 | ' 
09ff8                 | ' select case s
09ff8     B9 01 00 FF 
09ffc     02 14 06 F6 | 	mov	arg02, ##@LR__5609
0a000     DC D4 B1 FD | 	call	#__system___string_cmp
0a004     00 FA 0D F2 | 	cmp	result1, #0 wz
0a008     1B FA 05 A6 |  if_e	mov	result1, #27
0a00c     00 FA 05 56 |  if_ne	mov	result1, #0
0a010     00 FA 0D F2 | 	cmp	result1, #0 wz
0a014     10 00 90 AD |  if_e	jmp	#LR__0870
0a018     05 12 06 F6 | 	mov	arg01, #5
0a01c     00 E3 BF FD | 	call	#_compile_immediate_assign
0a020     FD 32 02 F6 | 	mov	local07, result1
0a024     10 00 90 FD | 	jmp	#LR__0871
0a028                 | LR__0870
0a028     05 12 06 F6 | 	mov	arg01, #5
0a02c     16 15 02 F6 | 	mov	arg02, local04
0a030     14 D9 BF FD | 	call	#_compile_immediate
0a034     FD 32 02 F6 | 	mov	local07, result1
0a038                 | LR__0871
0a038                 | ' return err
0a038     19 FB 01 F6 | 	mov	result1, local07
0a03c     A7 F0 03 F6 | 	mov	ptra, fp
0a040     B2 00 A0 FD | 	call	#popregs_
0a044                 | _compile_else_ret
0a044     2D 00 64 FD | 	ret
0a048                 | 
0a048                 | ' 
0a048                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
0a048                 | ' 
0a048                 | ' function compile_dim() as ulong  
0a048                 | _compile_dim
0a048     11 4A 05 F6 | 	mov	COUNT_, #17
0a04c     A8 00 A0 FD | 	call	#pushregs_
0a050     01 26 06 F6 | 	mov	local01, #1
0a054     01 28 06 F6 | 	mov	local02, #1
0a058     01 2A 06 F6 | 	mov	local03, #1
0a05c                 | ' 
0a05c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0a05c                 | ' if isname(lparts(ct).part$) then 
0a05c     37 00 00 FF 
0a060     44 E4 05 F1 | 	add	objptr, ##28228
0a064     F2 18 02 FB | 	rdlong	arg04, objptr
0a068     03 18 66 F0 | 	shl	arg04, #3
0a06c     02 00 00 FF 
0a070     38 E4 85 F1 | 	sub	objptr, ##1080
0a074     F2 18 02 F1 | 	add	arg04, objptr
0a078     0C 13 02 FB | 	rdlong	arg01, arg04
0a07c     35 00 00 FF 
0a080     0C E4 85 F1 | 	sub	objptr, ##27148
0a084     18 C7 BF FD | 	call	#_isname
0a088     00 FA 0D F2 | 	cmp	result1, #0 wz
0a08c     78 05 90 AD |  if_e	jmp	#LR__0903
0a090     37 00 00 FF 
0a094     44 E4 05 F1 | 	add	objptr, ##28228
0a098     F2 2C 02 FB | 	rdlong	local04, objptr
0a09c     03 2C 66 F0 | 	shl	local04, #3
0a0a0     02 00 00 FF 
0a0a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0a8     F2 2C 02 F1 | 	add	local04, objptr
0a0ac     16 2F 02 FB | 	rdlong	local05, local04
0a0b0     01 30 66 F6 | 	neg	local06, #1
0a0b4                 | '   varname2$=lparts(ct).part$ 
0a0b4                 | '   j=-1
0a0b4                 | '   if varnum>0 then
0a0b4     04 E4 85 F1 | 	sub	objptr, #4
0a0b8     F2 32 02 FB | 	rdlong	local07, objptr
0a0bc     35 00 00 FF 
0a0c0     08 E4 85 F1 | 	sub	objptr, ##27144
0a0c4     01 32 56 F2 | 	cmps	local07, #1 wc
0a0c8     58 00 90 CD |  if_b	jmp	#LR__0882
0a0cc                 | '     for i=0 to varnum-1
0a0cc     00 34 06 F6 | 	mov	local08, #0
0a0d0     35 00 00 FF 
0a0d4     08 E4 05 F1 | 	add	objptr, ##27144
0a0d8     F2 36 02 FB | 	rdlong	local09, objptr
0a0dc     35 00 00 FF 
0a0e0     08 E4 85 F1 | 	sub	objptr, ##27144
0a0e4                 | LR__0880
0a0e4     1B 35 52 F2 | 	cmps	local08, local09 wc
0a0e8     38 00 90 3D |  if_ae	jmp	#LR__0881
0a0ec                 | '       if variables(i).name=varname2$ then j=i : exit
0a0ec     1A 2D 02 F6 | 	mov	local04, local08
0a0f0     04 2C 66 F0 | 	shl	local04, #4
0a0f4     14 00 00 FF 
0a0f8     F8 E5 05 F1 | 	add	objptr, ##10744
0a0fc     F2 2C 02 F1 | 	add	local04, objptr
0a100     16 13 02 FB | 	rdlong	arg01, local04
0a104     17 15 02 F6 | 	mov	arg02, local05
0a108     14 00 00 FF 
0a10c     F8 E5 85 F1 | 	sub	objptr, ##10744
0a110     CC D3 B1 FD | 	call	#__system___string_cmp
0a114     00 FA 0D F2 | 	cmp	result1, #0 wz
0a118     1A 31 02 A6 |  if_e	mov	local06, local08
0a11c     01 34 06 51 |  if_ne	add	local08, #1
0a120     C0 FF 9F 5D |  if_ne	jmp	#LR__0880
0a124                 | LR__0881
0a124                 | LR__0882
0a124                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a124     FF FF 7F FF 
0a128     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0a12c     35 00 00 AF 
0a130     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a134     F2 30 02 AB |  if_e	rdlong	local06, objptr
0a138     35 00 00 AF 
0a13c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a140     78 00 90 AD |  if_e	jmp	#LR__0883
0a144     00 12 06 F6 | 	mov	arg01, #0
0a148     10 30 B2 FD | 	call	#__system___getiolock_0616
0a14c     FD 12 02 F6 | 	mov	arg01, result1
0a150     64 D3 B1 FD | 	call	#__system___lockmem
0a154     BB 01 00 FF 
0a158     D8 14 06 F6 | 	mov	arg02, ##@LR__5874
0a15c     00 12 06 F6 | 	mov	arg01, #0
0a160     00 16 06 F6 | 	mov	arg03, #0
0a164     48 E0 B1 FD | 	call	#__system___basic_print_string
0a168     52 00 00 FF 
0a16c     E8 E4 05 F1 | 	add	objptr, ##42216
0a170     F2 14 02 FB | 	rdlong	arg02, objptr
0a174     52 00 00 FF 
0a178     E8 E4 85 F1 | 	sub	objptr, ##42216
0a17c     00 12 06 F6 | 	mov	arg01, #0
0a180     00 16 06 F6 | 	mov	arg03, #0
0a184     0A 18 06 F6 | 	mov	arg04, #10
0a188     A8 E0 B1 FD | 	call	#__system___basic_print_unsigned
0a18c     BB 01 00 FF 
0a190     E6 14 06 F6 | 	mov	arg02, ##@LR__5875
0a194     00 12 06 F6 | 	mov	arg01, #0
0a198     00 16 06 F6 | 	mov	arg03, #0
0a19c     10 E0 B1 FD | 	call	#__system___basic_print_string
0a1a0     00 12 06 F6 | 	mov	arg01, #0
0a1a4     0A 14 06 F6 | 	mov	arg02, #10
0a1a8     00 16 06 F6 | 	mov	arg03, #0
0a1ac     A8 DF B1 FD | 	call	#__system___basic_print_char
0a1b0     00 12 06 F6 | 	mov	arg01, #0
0a1b4     A4 2F B2 FD | 	call	#__system___getiolock_0616
0a1b8     FD 00 68 FC | 	wrlong	#0, result1
0a1bc                 | LR__0883
0a1bc                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a1bc     37 00 00 FF 
0a1c0     44 E4 05 F1 | 	add	objptr, ##28228
0a1c4     F2 14 02 FB | 	rdlong	arg02, objptr
0a1c8     01 14 06 F1 | 	add	arg02, #1
0a1cc     03 14 66 F0 | 	shl	arg02, #3
0a1d0     02 00 00 FF 
0a1d4     38 E4 85 F1 | 	sub	objptr, ##1080
0a1d8     F2 14 02 F1 | 	add	arg02, objptr
0a1dc     0A 13 02 FB | 	rdlong	arg01, arg02
0a1e0     BB 01 00 FF 
0a1e4     07 15 06 F6 | 	mov	arg02, ##@LR__5876
0a1e8     35 00 00 FF 
0a1ec     0C E4 85 F1 | 	sub	objptr, ##27148
0a1f0     EC D2 B1 FD | 	call	#__system___string_cmp
0a1f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1f8     44 00 90 AD |  if_e	jmp	#LR__0884
0a1fc     37 00 00 FF 
0a200     44 E4 05 F1 | 	add	objptr, ##28228
0a204     F2 36 02 FB | 	rdlong	local09, objptr
0a208     01 36 06 F1 | 	add	local09, #1
0a20c     03 36 66 F0 | 	shl	local09, #3
0a210     02 00 00 FF 
0a214     38 E4 85 F1 | 	sub	objptr, ##1080
0a218     F2 36 02 F1 | 	add	local09, objptr
0a21c     1B 13 02 FB | 	rdlong	arg01, local09
0a220     BB 01 00 FF 
0a224     09 15 06 F6 | 	mov	arg02, ##@LR__5877
0a228     35 00 00 FF 
0a22c     0C E4 85 F1 | 	sub	objptr, ##27148
0a230     AC D2 B1 FD | 	call	#__system___string_cmp
0a234     00 FA 0D F2 | 	cmp	result1, #0 wz
0a238     2B FA 05 56 |  if_ne	mov	result1, #43
0a23c     D0 04 90 5D |  if_ne	jmp	#LR__0905
0a240                 | LR__0884
0a240                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a240     37 00 00 FF 
0a244     44 E4 05 F1 | 	add	objptr, ##28228
0a248     F2 14 02 FB | 	rdlong	arg02, objptr
0a24c     01 14 06 F1 | 	add	arg02, #1
0a250     03 14 66 F0 | 	shl	arg02, #3
0a254     02 00 00 FF 
0a258     38 E4 85 F1 | 	sub	objptr, ##1080
0a25c     F2 14 02 F1 | 	add	arg02, objptr
0a260     0A 13 02 FB | 	rdlong	arg01, arg02
0a264     BB 01 00 FF 
0a268     0C 15 06 F6 | 	mov	arg02, ##@LR__5878
0a26c     35 00 00 FF 
0a270     0C E4 85 F1 | 	sub	objptr, ##27148
0a274     68 D2 B1 FD | 	call	#__system___string_cmp
0a278     00 FA 0D F2 | 	cmp	result1, #0 wz
0a27c     37 00 00 AF 
0a280     44 E4 05 A1 |  if_e	add	objptr, ##28228
0a284     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a288     37 00 00 AF 
0a28c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0a290     01 38 06 A1 |  if_e	add	local10, #1
0a294     5C 01 90 AD |  if_e	jmp	#LR__0889
0a298     37 00 00 FF 
0a29c     44 E4 05 F1 | 	add	objptr, ##28228
0a2a0     F2 38 02 FB | 	rdlong	local10, objptr
0a2a4     37 00 00 FF 
0a2a8     44 E4 85 F1 | 	sub	objptr, ##28228
0a2ac     02 38 06 F1 | 	add	local10, #2
0a2b0     00 3A 06 F6 | 	mov	local11, #0
0a2b4                 | '   l=ct+2 : m=0 : do
0a2b4                 | LR__0885
0a2b4                 | '   if isdec(lparts(l).part$) then 
0a2b4     1C 2D 02 F6 | 	mov	local04, local10
0a2b8     03 2C 66 F0 | 	shl	local04, #3
0a2bc     35 00 00 FF 
0a2c0     0C E4 05 F1 | 	add	objptr, ##27148
0a2c4     F2 2C 02 F1 | 	add	local04, objptr
0a2c8     16 13 02 FB | 	rdlong	arg01, local04
0a2cc     35 00 00 FF 
0a2d0     0C E4 85 F1 | 	sub	objptr, ##27148
0a2d4     CC CD BF FD | 	call	#_isdec
0a2d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2dc     44 00 90 AD |  if_e	jmp	#LR__0886
0a2e0     1D 3D 02 F6 | 	mov	local12, local11
0a2e4     13 3D 06 F1 | 	add	local12, #local01
0a2e8     1C 37 02 F6 | 	mov	local09, local10
0a2ec     03 36 66 F0 | 	shl	local09, #3
0a2f0     35 00 00 FF 
0a2f4     0C E4 05 F1 | 	add	objptr, ##27148
0a2f8     F2 36 02 F1 | 	add	local09, objptr
0a2fc     1B 13 02 FB | 	rdlong	arg01, local09
0a300     00 14 06 F6 | 	mov	arg02, #0
0a304     35 00 00 FF 
0a308     0C E4 85 F1 | 	sub	objptr, ##27148
0a30c     9C 06 B2 FD | 	call	#__system____builtin_atoi
0a310     FD 3E 02 F6 | 	mov	local13, result1
0a314                 | 	'.live	local13
0a314                 | 	'.live	local12
0a314     00 3C 8E F9 | 	altd	local12, #0
0a318     1F 3D 02 F6 | 	mov	local12, local13
0a31c     01 3A 06 F1 | 	add	local11, #1
0a320     08 00 90 FD | 	jmp	#LR__0887
0a324                 | LR__0886
0a324                 | '     return(17)
0a324     11 FA 05 F6 | 	mov	result1, #17
0a328     E4 03 90 FD | 	jmp	#LR__0905
0a32c                 | LR__0887
0a32c                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a32c     1C 2D 02 F6 | 	mov	local04, local10
0a330     01 2C 06 F1 | 	add	local04, #1
0a334     03 2C 66 F0 | 	shl	local04, #3
0a338     35 00 00 FF 
0a33c     0C E4 05 F1 | 	add	objptr, ##27148
0a340     F2 2C 02 F1 | 	add	local04, objptr
0a344     16 13 02 FB | 	rdlong	arg01, local04
0a348     BB 01 00 FF 
0a34c     0F 15 06 F6 | 	mov	arg02, ##@LR__5879
0a350     35 00 00 FF 
0a354     0C E4 85 F1 | 	sub	objptr, ##27148
0a358     84 D1 B1 FD | 	call	#__system___string_cmp
0a35c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a360     3C 00 90 AD |  if_e	jmp	#LR__0888
0a364     1C 3F 02 F6 | 	mov	local13, local10
0a368     01 3E 06 F1 | 	add	local13, #1
0a36c     03 3E 66 F0 | 	shl	local13, #3
0a370     35 00 00 FF 
0a374     0C E4 05 F1 | 	add	objptr, ##27148
0a378     F2 3E 02 F1 | 	add	local13, objptr
0a37c     1F 13 02 FB | 	rdlong	arg01, local13
0a380     BB 01 00 FF 
0a384     11 15 06 F6 | 	mov	arg02, ##@LR__5880
0a388     35 00 00 FF 
0a38c     0C E4 85 F1 | 	sub	objptr, ##27148
0a390     4C D1 B1 FD | 	call	#__system___string_cmp
0a394     00 FA 0D F2 | 	cmp	result1, #0 wz
0a398     2C FA 05 56 |  if_ne	mov	result1, #44
0a39c     70 03 90 5D |  if_ne	jmp	#LR__0905
0a3a0                 | LR__0888
0a3a0     02 38 06 F1 | 	add	local10, #2
0a3a4     1C 2D 02 F6 | 	mov	local04, local10
0a3a8     01 2C 86 F1 | 	sub	local04, #1
0a3ac     03 2C 66 F0 | 	shl	local04, #3
0a3b0     35 00 00 FF 
0a3b4     0C E4 05 F1 | 	add	objptr, ##27148
0a3b8     F2 2C 02 F1 | 	add	local04, objptr
0a3bc     16 13 02 FB | 	rdlong	arg01, local04
0a3c0     BB 01 00 FF 
0a3c4     13 15 06 F6 | 	mov	arg02, ##@LR__5881
0a3c8     35 00 00 FF 
0a3cc     0C E4 85 F1 | 	sub	objptr, ##27148
0a3d0     0C D1 B1 FD | 	call	#__system___string_cmp
0a3d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3d8     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a3dc     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0885
0a3e0                 | '   if m>3 then return 45
0a3e0     04 3A 56 F2 | 	cmps	local11, #4 wc
0a3e4     2D FA 05 36 |  if_ae	mov	result1, #45
0a3e8     24 03 90 3D |  if_ae	jmp	#LR__0905
0a3ec     00 41 06 F6 | 	mov	local14, #256
0a3f0     0C 42 06 F6 | 	mov	local15, #12
0a3f4                 | LR__0889
0a3f4                 | '   arraytype=array_no_type : esize=12
0a3f4                 | ' 1350 
0a3f4                 | '   if lparts(l).part$="as" then
0a3f4     1C 2D 02 F6 | 	mov	local04, local10
0a3f8     03 2C 66 F0 | 	shl	local04, #3
0a3fc     35 00 00 FF 
0a400     0C E4 05 F1 | 	add	objptr, ##27148
0a404     F2 2C 02 F1 | 	add	local04, objptr
0a408     16 13 02 FB | 	rdlong	arg01, local04
0a40c     BB 01 00 FF 
0a410     15 15 06 F6 | 	mov	arg02, ##@LR__5882
0a414     35 00 00 FF 
0a418     0C E4 85 F1 | 	sub	objptr, ##27148
0a41c     C0 D0 B1 FD | 	call	#__system___string_cmp
0a420     00 FA 0D F2 | 	cmp	result1, #0 wz
0a424     E8 01 90 5D |  if_ne	jmp	#LR__0904
0a428                 | '     select case lparts(l+1).part$
0a428     1C 3D 02 F6 | 	mov	local12, local10
0a42c     01 3C 06 F1 | 	add	local12, #1
0a430     03 3C 66 F0 | 	shl	local12, #3
0a434     35 00 00 FF 
0a438     0C E4 05 F1 | 	add	objptr, ##27148
0a43c     F2 3C 02 F1 | 	add	local12, objptr
0a440     1E 45 02 FB | 	rdlong	local16, local12
0a444     BB 01 00 FF 
0a448     18 15 06 F6 | 	mov	arg02, ##@LR__5883
0a44c     22 13 02 F6 | 	mov	arg01, local16
0a450     35 00 00 FF 
0a454     0C E4 85 F1 | 	sub	objptr, ##27148
0a458     84 D0 B1 FD | 	call	#__system___string_cmp
0a45c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a460     0C 01 90 AD |  if_e	jmp	#LR__0890
0a464     BB 01 00 FF 
0a468     1D 15 06 F6 | 	mov	arg02, ##@LR__5884
0a46c     22 13 02 F6 | 	mov	arg01, local16
0a470     6C D0 B1 FD | 	call	#__system___string_cmp
0a474     00 FA 0D F2 | 	cmp	result1, #0 wz
0a478     00 01 90 AD |  if_e	jmp	#LR__0891
0a47c     BB 01 00 FF 
0a480     23 15 06 F6 | 	mov	arg02, ##@LR__5885
0a484     22 13 02 F6 | 	mov	arg01, local16
0a488     54 D0 B1 FD | 	call	#__system___string_cmp
0a48c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a490     F4 00 90 AD |  if_e	jmp	#LR__0892
0a494     BB 01 00 FF 
0a498     29 15 06 F6 | 	mov	arg02, ##@LR__5886
0a49c     22 13 02 F6 | 	mov	arg01, local16
0a4a0     3C D0 B1 FD | 	call	#__system___string_cmp
0a4a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4a8     E8 00 90 AD |  if_e	jmp	#LR__0893
0a4ac     BB 01 00 FF 
0a4b0     30 15 06 F6 | 	mov	arg02, ##@LR__5887
0a4b4     22 13 02 F6 | 	mov	arg01, local16
0a4b8     24 D0 B1 FD | 	call	#__system___string_cmp
0a4bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4c0     DC 00 90 AD |  if_e	jmp	#LR__0894
0a4c4     BB 01 00 FF 
0a4c8     35 15 06 F6 | 	mov	arg02, ##@LR__5888
0a4cc     22 13 02 F6 | 	mov	arg01, local16
0a4d0     0C D0 B1 FD | 	call	#__system___string_cmp
0a4d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4d8     D0 00 90 AD |  if_e	jmp	#LR__0895
0a4dc     BB 01 00 FF 
0a4e0     3D 15 06 F6 | 	mov	arg02, ##@LR__5889
0a4e4     22 13 02 F6 | 	mov	arg01, local16
0a4e8     F4 CF B1 FD | 	call	#__system___string_cmp
0a4ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4f0     C4 00 90 AD |  if_e	jmp	#LR__0896
0a4f4     BB 01 00 FF 
0a4f8     43 15 06 F6 | 	mov	arg02, ##@LR__5890
0a4fc     22 13 02 F6 | 	mov	arg01, local16
0a500     DC CF B1 FD | 	call	#__system___string_cmp
0a504     00 FA 0D F2 | 	cmp	result1, #0 wz
0a508     B8 00 90 AD |  if_e	jmp	#LR__0897
0a50c     BB 01 00 FF 
0a510     49 15 06 F6 | 	mov	arg02, ##@LR__5891
0a514     22 13 02 F6 | 	mov	arg01, local16
0a518     C4 CF B1 FD | 	call	#__system___string_cmp
0a51c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a520     AC 00 90 AD |  if_e	jmp	#LR__0898
0a524     BB 01 00 FF 
0a528     50 15 06 F6 | 	mov	arg02, ##@LR__5892
0a52c     22 13 02 F6 | 	mov	arg01, local16
0a530     AC CF B1 FD | 	call	#__system___string_cmp
0a534     00 FA 0D F2 | 	cmp	result1, #0 wz
0a538     A0 00 90 AD |  if_e	jmp	#LR__0899
0a53c     BB 01 00 FF 
0a540     57 15 06 F6 | 	mov	arg02, ##@LR__5893
0a544     22 13 02 F6 | 	mov	arg01, local16
0a548     94 CF B1 FD | 	call	#__system___string_cmp
0a54c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a550     94 00 90 AD |  if_e	jmp	#LR__0900
0a554     BB 01 00 FF 
0a558     5E 15 06 F6 | 	mov	arg02, ##@LR__5894
0a55c     22 13 02 F6 | 	mov	arg01, local16
0a560     7C CF B1 FD | 	call	#__system___string_cmp
0a564     00 FA 0D F2 | 	cmp	result1, #0 wz
0a568     88 00 90 AD |  if_e	jmp	#LR__0901
0a56c     90 00 90 FD | 	jmp	#LR__0902
0a570                 | LR__0890
0a570     01 41 06 F6 | 	mov	local14, #257
0a574     01 42 06 F6 | 	mov	local15, #1
0a578     94 00 90 FD | 	jmp	#LR__0904
0a57c                 | LR__0891
0a57c     02 41 06 F6 | 	mov	local14, #258
0a580     01 42 06 F6 | 	mov	local15, #1
0a584     88 00 90 FD | 	jmp	#LR__0904
0a588                 | LR__0892
0a588     03 41 06 F6 | 	mov	local14, #259
0a58c     02 42 06 F6 | 	mov	local15, #2
0a590     7C 00 90 FD | 	jmp	#LR__0904
0a594                 | LR__0893
0a594     04 41 06 F6 | 	mov	local14, #260
0a598     02 42 06 F6 | 	mov	local15, #2
0a59c     70 00 90 FD | 	jmp	#LR__0904
0a5a0                 | LR__0894
0a5a0     05 41 06 F6 | 	mov	local14, #261
0a5a4     04 42 06 F6 | 	mov	local15, #4
0a5a8     64 00 90 FD | 	jmp	#LR__0904
0a5ac                 | LR__0895
0a5ac     05 41 06 F6 | 	mov	local14, #261
0a5b0     04 42 06 F6 | 	mov	local15, #4
0a5b4     58 00 90 FD | 	jmp	#LR__0904
0a5b8                 | LR__0896
0a5b8     06 41 06 F6 | 	mov	local14, #262
0a5bc     04 42 06 F6 | 	mov	local15, #4
0a5c0     4C 00 90 FD | 	jmp	#LR__0904
0a5c4                 | LR__0897
0a5c4     07 41 06 F6 | 	mov	local14, #263
0a5c8     08 42 06 F6 | 	mov	local15, #8
0a5cc     40 00 90 FD | 	jmp	#LR__0904
0a5d0                 | LR__0898
0a5d0     08 41 06 F6 | 	mov	local14, #264
0a5d4     08 42 06 F6 | 	mov	local15, #8
0a5d8     34 00 90 FD | 	jmp	#LR__0904
0a5dc                 | LR__0899
0a5dc     09 41 06 F6 | 	mov	local14, #265
0a5e0     04 42 06 F6 | 	mov	local15, #4
0a5e4     28 00 90 FD | 	jmp	#LR__0904
0a5e8                 | LR__0900
0a5e8     0A 41 06 F6 | 	mov	local14, #266
0a5ec     08 42 06 F6 | 	mov	local15, #8
0a5f0     1C 00 90 FD | 	jmp	#LR__0904
0a5f4                 | LR__0901
0a5f4     0B 41 06 F6 | 	mov	local14, #267
0a5f8     04 42 06 F6 | 	mov	local15, #4
0a5fc     10 00 90 FD | 	jmp	#LR__0904
0a600                 | LR__0902
0a600     2F FA 05 F6 | 	mov	result1, #47
0a604     08 01 90 FD | 	jmp	#LR__0905
0a608                 | LR__0903
0a608                 | '   return 46
0a608     2E FA 05 F6 | 	mov	result1, #46
0a60c     00 01 90 FD | 	jmp	#LR__0905
0a610                 | LR__0904
0a610     13 43 02 FD | 	qmul	local15, local01
0a614     18 32 62 FD | 	getqx	local07
0a618     14 33 02 FD | 	qmul	local07, local02
0a61c     18 44 62 FD | 	getqx	local16
0a620     15 45 02 FD | 	qmul	local16, local03
0a624     52 00 00 FF 
0a628     D0 E4 05 F1 | 	add	objptr, ##42192
0a62c     F2 46 02 FB | 	rdlong	local17, objptr
0a630     20 15 02 F6 | 	mov	arg02, local14
0a634     18 44 62 FD | 	getqx	local16
0a638     22 47 82 F1 | 	sub	local17, local16
0a63c     10 46 86 F1 | 	sub	local17, #16
0a640     0F 46 26 F5 | 	andn	local17, #15
0a644     F2 46 62 FC | 	wrlong	local17, objptr
0a648     52 00 00 FF 
0a64c     D0 E4 85 F1 | 	sub	objptr, ##42192
0a650     23 13 02 F6 | 	mov	arg01, local17
0a654     30 96 B1 FD | 	call	#_psdpoke
0a658     23 13 02 F6 | 	mov	arg01, local17
0a65c     02 12 06 F1 | 	add	arg01, #2
0a660     21 15 02 F6 | 	mov	arg02, local15
0a664     20 96 B1 FD | 	call	#_psdpoke
0a668     23 13 02 F6 | 	mov	arg01, local17
0a66c     04 12 06 F1 | 	add	arg01, #4
0a670     13 15 02 F6 | 	mov	arg02, local01
0a674     C8 95 B1 FD | 	call	#_pslpoke
0a678     23 13 02 F6 | 	mov	arg01, local17
0a67c     08 12 06 F1 | 	add	arg01, #8
0a680     14 15 02 F6 | 	mov	arg02, local02
0a684     B8 95 B1 FD | 	call	#_pslpoke
0a688     23 13 02 F6 | 	mov	arg01, local17
0a68c     0C 12 06 F1 | 	add	arg01, #12
0a690     15 15 02 F6 | 	mov	arg02, local03
0a694     A8 95 B1 FD | 	call	#_pslpoke
0a698     18 3D 02 F6 | 	mov	local12, local06
0a69c     04 3C 66 F0 | 	shl	local12, #4
0a6a0     14 00 00 FF 
0a6a4     F8 E5 05 F1 | 	add	objptr, ##10744
0a6a8     F2 3C 02 F1 | 	add	local12, objptr
0a6ac     1E 2F 62 FC | 	wrlong	local05, local12
0a6b0     18 3D 02 F6 | 	mov	local12, local06
0a6b4     04 3C 66 F0 | 	shl	local12, #4
0a6b8     F2 3C 02 F1 | 	add	local12, objptr
0a6bc     04 3C 06 F1 | 	add	local12, #4
0a6c0     1E 47 62 FC | 	wrlong	local17, local12
0a6c4     18 3D 02 F6 | 	mov	local12, local06
0a6c8     04 3C 66 F0 | 	shl	local12, #4
0a6cc     F2 3C 02 F1 | 	add	local12, objptr
0a6d0     0C 3C 06 F1 | 	add	local12, #12
0a6d4     1E 41 62 FC | 	wrlong	local14, local12
0a6d8                 | ' memtop=arrayptr
0a6d8                 | ' psdpoke arrayptr,arraytype 
0a6d8                 | ' psdpoke arrayptr+2,esize 
0a6d8                 | ' pslpoke arrayptr+4,dims(0)
0a6d8                 | ' pslpoke arrayptr+8,dims(1)
0a6d8                 | ' pslpoke arrayptr+12,dims(2)
0a6d8                 | ' variables(j).name=varname2$
0a6d8                 | ' variables(j).value.uresult=arrayptr
0a6d8                 | ' variables(j).vartype=arraytype
0a6d8                 | ' if j=varnum then varnum+=1
0a6d8     20 00 00 FF 
0a6dc     10 E4 05 F1 | 	add	objptr, ##16400
0a6e0     F2 32 02 FB | 	rdlong	local07, objptr
0a6e4     35 00 00 FF 
0a6e8     08 E4 85 F1 | 	sub	objptr, ##27144
0a6ec     19 31 0A F2 | 	cmp	local06, local07 wz
0a6f0     35 00 00 AF 
0a6f4     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a6f8     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a6fc     01 32 06 A1 |  if_e	add	local07, #1
0a700     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a704     35 00 00 AF 
0a708     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a70c                 | ' return 0
0a70c     00 FA 05 F6 | 	mov	result1, #0
0a710                 | LR__0905
0a710     A7 F0 03 F6 | 	mov	ptra, fp
0a714     B2 00 A0 FD | 	call	#popregs_
0a718                 | _compile_dim_ret
0a718     2D 00 64 FD | 	ret
0a71c                 | 
0a71c                 | ' 
0a71c                 | ' '----- compile 'for' command. 
0a71c                 | ' 
0a71c                 | ' function compile_for() as ulong  
0a71c                 | _compile_for
0a71c     0E 4A 05 F6 | 	mov	COUNT_, #14
0a720     A8 00 A0 FD | 	call	#pushregs_
0a724                 | ' 
0a724                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a724     37 00 00 FF 
0a728     44 E4 05 F1 | 	add	objptr, ##28228
0a72c     F2 14 02 FB | 	rdlong	arg02, objptr
0a730     01 14 06 F1 | 	add	arg02, #1
0a734     03 14 66 F0 | 	shl	arg02, #3
0a738     02 00 00 FF 
0a73c     38 E4 85 F1 | 	sub	objptr, ##1080
0a740     F2 14 02 F1 | 	add	arg02, objptr
0a744     0A 13 02 FB | 	rdlong	arg01, arg02
0a748     35 00 00 FF 
0a74c     0C E4 85 F1 | 	sub	objptr, ##27148
0a750                 | ' 
0a750                 | ' select case s
0a750     B9 01 00 FF 
0a754     02 14 06 F6 | 	mov	arg02, ##@LR__5609
0a758     84 CD B1 FD | 	call	#__system___string_cmp
0a75c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a760     1B FA 05 A6 |  if_e	mov	result1, #27
0a764     00 FA 05 56 |  if_ne	mov	result1, #0
0a768     00 FA 0D F2 | 	cmp	result1, #0 wz
0a76c     0C 00 90 AD |  if_e	jmp	#LR__0910
0a770     05 12 06 F6 | 	mov	arg01, #5
0a774     A8 DB BF FD | 	call	#_compile_immediate_assign
0a778     08 00 90 FD | 	jmp	#LR__0911
0a77c                 | LR__0910
0a77c     20 FA 05 F6 | 	mov	result1, #32
0a780     58 08 90 FD | 	jmp	#LR__0927
0a784                 | LR__0911
0a784     4A 00 00 FF 
0a788     7C E4 05 F1 | 	add	objptr, ##38012
0a78c     F2 14 02 FB | 	rdlong	arg02, objptr
0a790     0A 13 02 F6 | 	mov	arg01, arg02
0a794     01 12 86 F1 | 	sub	arg01, #1
0a798     09 2D 02 F6 | 	mov	local04, arg01
0a79c     01 2C 66 F0 | 	shl	local04, #1
0a7a0     09 2D 02 F1 | 	add	local04, arg01
0a7a4     02 2C 66 F0 | 	shl	local04, #2
0a7a8     03 00 00 FF 
0a7ac     00 E4 85 F1 | 	sub	objptr, ##1536
0a7b0     F2 2C 02 F1 | 	add	local04, objptr
0a7b4     16 27 02 FB | 	rdlong	local01, local04
0a7b8     04 2C 06 F1 | 	add	local04, #4
0a7bc     16 2F 02 FB | 	rdlong	local05, local04
0a7c0     01 14 86 F1 | 	sub	arg02, #1
0a7c4     0A 2D 02 F6 | 	mov	local04, arg02
0a7c8     01 2C 66 F0 | 	shl	local04, #1
0a7cc     0A 2D 02 F1 | 	add	local04, arg02
0a7d0     02 2C 66 F0 | 	shl	local04, #2
0a7d4     F2 30 02 F6 | 	mov	local06, objptr
0a7d8     F2 2C 02 F1 | 	add	local04, objptr
0a7dc     08 2C 06 F1 | 	add	local04, #8
0a7e0     16 2D 02 FB | 	rdlong	local04, local04
0a7e4     17 29 02 F6 | 	mov	local02, local05
0a7e8     16 2B 02 F6 | 	mov	local03, local04
0a7ec                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a7ec     17 2A 0E F2 | 	cmp	local03, #23 wz
0a7f0     47 00 00 FF 
0a7f4     7C E4 85 F1 | 	sub	objptr, ##36476
0a7f8     22 FA 05 56 |  if_ne	mov	result1, #34
0a7fc     DC 07 90 5D |  if_ne	jmp	#LR__0927
0a800     13 33 02 F6 | 	mov	local07, local01
0a804                 | ' varnum=t1.result.uresult
0a804                 | ' if lparts(ct).part$<>"to" then return 33
0a804     37 00 00 FF 
0a808     44 E4 05 F1 | 	add	objptr, ##28228
0a80c     F2 2C 02 FB | 	rdlong	local04, objptr
0a810     03 2C 66 F0 | 	shl	local04, #3
0a814     02 00 00 FF 
0a818     38 E4 85 F1 | 	sub	objptr, ##1080
0a81c     F2 2C 02 F1 | 	add	local04, objptr
0a820     16 13 02 FB | 	rdlong	arg01, local04
0a824     BB 01 00 FF 
0a828     65 15 06 F6 | 	mov	arg02, ##@LR__5895
0a82c     35 00 00 FF 
0a830     0C E4 85 F1 | 	sub	objptr, ##27148
0a834     A8 CC B1 FD | 	call	#__system___string_cmp
0a838     00 FA 0D F2 | 	cmp	result1, #0 wz
0a83c     21 FA 05 56 |  if_ne	mov	result1, #33
0a840     98 07 90 5D |  if_ne	jmp	#LR__0927
0a844     37 00 00 FF 
0a848     44 E4 05 F1 | 	add	objptr, ##28228
0a84c     F2 34 02 FB | 	rdlong	local08, objptr
0a850     01 34 06 F1 | 	add	local08, #1
0a854     F2 34 62 FC | 	wrlong	local08, objptr
0a858     37 00 00 FF 
0a85c     44 E4 85 F1 | 	sub	objptr, ##28228
0a860     2C 17 B0 FD | 	call	#_expr
0a864                 | ' ct+=1
0a864                 | ' expr()  										' there is "to" value pushed on the stack
0a864                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a864     37 00 00 FF 
0a868     44 E4 05 F1 | 	add	objptr, ##28228
0a86c     F2 2C 02 FB | 	rdlong	local04, objptr
0a870     03 2C 66 F0 | 	shl	local04, #3
0a874     02 00 00 FF 
0a878     38 E4 85 F1 | 	sub	objptr, ##1080
0a87c     F2 2C 02 F1 | 	add	local04, objptr
0a880     16 13 02 FB | 	rdlong	arg01, local04
0a884     BB 01 00 FF 
0a888     68 15 06 F6 | 	mov	arg02, ##@LR__5896
0a88c     35 00 00 FF 
0a890     0C E4 85 F1 | 	sub	objptr, ##27148
0a894     48 CC B1 FD | 	call	#__system___string_cmp
0a898     00 FA 0D F2 | 	cmp	result1, #0 wz
0a89c     48 00 90 AD |  if_e	jmp	#LR__0912
0a8a0     37 00 00 FF 
0a8a4     44 E4 05 F1 | 	add	objptr, ##28228
0a8a8     F2 2C 02 FB | 	rdlong	local04, objptr
0a8ac     03 2C 66 F0 | 	shl	local04, #3
0a8b0     02 00 00 FF 
0a8b4     38 E4 85 F1 | 	sub	objptr, ##1080
0a8b8     F2 2C 02 F1 | 	add	local04, objptr
0a8bc     16 13 02 FB | 	rdlong	arg01, local04
0a8c0     02 14 06 F6 | 	mov	arg02, #2
0a8c4     35 00 00 FF 
0a8c8     0C E4 85 F1 | 	sub	objptr, ##27148
0a8cc     68 EC B1 FD | 	call	#__system__Left_S
0a8d0     FD 12 02 F6 | 	mov	arg01, result1
0a8d4     BB 01 00 FF 
0a8d8     6D 15 06 F6 | 	mov	arg02, ##@LR__5897
0a8dc     00 CC B1 FD | 	call	#__system___string_cmp
0a8e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a8e4     9C 05 90 5D |  if_ne	jmp	#LR__0925
0a8e8                 | LR__0912
0a8e8                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a8e8     37 00 00 FF 
0a8ec     44 E4 05 F1 | 	add	objptr, ##28228
0a8f0     F2 2C 02 FB | 	rdlong	local04, objptr
0a8f4     03 2C 66 F0 | 	shl	local04, #3
0a8f8     02 00 00 FF 
0a8fc     38 E4 85 F1 | 	sub	objptr, ##1080
0a900     F2 2C 02 F1 | 	add	local04, objptr
0a904     16 13 02 FB | 	rdlong	arg01, local04
0a908     02 14 06 F6 | 	mov	arg02, #2
0a90c     35 00 00 FF 
0a910     0C E4 85 F1 | 	sub	objptr, ##27148
0a914     20 EC B1 FD | 	call	#__system__Left_S
0a918     FD 12 02 F6 | 	mov	arg01, result1
0a91c     BB 01 00 FF 
0a920     70 15 06 F6 | 	mov	arg02, ##@LR__5898
0a924     B8 CB B1 FD | 	call	#__system___string_cmp
0a928     00 FA 0D F2 | 	cmp	result1, #0 wz
0a92c     30 05 90 5D |  if_ne	jmp	#LR__0924
0a930     37 00 00 FF 
0a934     44 E4 05 F1 | 	add	objptr, ##28228
0a938     F2 2C 02 FB | 	rdlong	local04, objptr
0a93c     03 2C 66 F0 | 	shl	local04, #3
0a940     02 00 00 FF 
0a944     38 E4 85 F1 | 	sub	objptr, ##1080
0a948     F2 2C 02 F1 | 	add	local04, objptr
0a94c     16 13 02 FB | 	rdlong	arg01, local04
0a950     35 00 00 FF 
0a954     0C E4 85 F1 | 	sub	objptr, ##27148
0a958     09 37 02 F6 | 	mov	local09, arg01
0a95c     97 06 48 FB | 	callpa	#(@LR__0914-@LR__0913)>>2,fcache_load_ptr_
0a960                 | LR__0913
0a960     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a964     01 36 06 51 |  if_ne	add	local09, #1
0a968     F4 FF 9F 5D |  if_ne	jmp	#LR__0913
0a96c                 | LR__0914
0a96c     09 37 82 F1 | 	sub	local09, arg01
0a970     03 36 56 F2 | 	cmps	local09, #3 wc
0a974     E8 04 90 CD |  if_b	jmp	#LR__0924
0a978     37 00 00 FF 
0a97c     44 E4 05 F1 | 	add	objptr, ##28228
0a980     F2 2C 02 FB | 	rdlong	local04, objptr
0a984     16 39 02 F6 | 	mov	local10, local04
0a988     03 38 66 F0 | 	shl	local10, #3
0a98c     02 00 00 FF 
0a990     38 E4 85 F1 | 	sub	objptr, ##1080
0a994     F2 38 02 F1 | 	add	local10, objptr
0a998     03 2C 66 F0 | 	shl	local04, #3
0a99c     F2 2C 02 F1 | 	add	local04, objptr
0a9a0     16 2D 02 FB | 	rdlong	local04, local04
0a9a4     02 00 00 FF 
0a9a8     38 E4 05 F1 | 	add	objptr, ##1080
0a9ac     F2 12 02 FB | 	rdlong	arg01, objptr
0a9b0     03 12 66 F0 | 	shl	arg01, #3
0a9b4     02 00 00 FF 
0a9b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a9bc     F2 12 02 F1 | 	add	arg01, objptr
0a9c0     09 13 02 FB | 	rdlong	arg01, arg01
0a9c4     35 00 00 FF 
0a9c8     0C E4 85 F1 | 	sub	objptr, ##27148
0a9cc     09 37 02 F6 | 	mov	local09, arg01
0a9d0     97 06 48 FB | 	callpa	#(@LR__0916-@LR__0915)>>2,fcache_load_ptr_
0a9d4                 | LR__0915
0a9d4     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a9d8     01 36 06 51 |  if_ne	add	local09, #1
0a9dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0915
0a9e0                 | LR__0916
0a9e0     09 37 82 F1 | 	sub	local09, arg01
0a9e4     1B 15 02 F6 | 	mov	arg02, local09
0a9e8     02 14 86 F1 | 	sub	arg02, #2
0a9ec     16 13 02 F6 | 	mov	arg01, local04
0a9f0     CC EB B1 FD | 	call	#__system__Right_S
0a9f4     1C FB 61 FC | 	wrlong	result1, local10
0a9f8     37 00 00 FF 
0a9fc     44 E4 05 F1 | 	add	objptr, ##28228
0aa00     F2 2C 02 FB | 	rdlong	local04, objptr
0aa04     16 39 02 F6 | 	mov	local10, local04
0aa08     03 38 66 F0 | 	shl	local10, #3
0aa0c     02 00 00 FF 
0aa10     38 E4 85 F1 | 	sub	objptr, ##1080
0aa14     F2 38 02 F1 | 	add	local10, objptr
0aa18     03 2C 66 F0 | 	shl	local04, #3
0aa1c     F2 2C 02 F1 | 	add	local04, objptr
0aa20     16 13 02 FB | 	rdlong	arg01, local04
0aa24     35 00 00 FF 
0aa28     0C E4 85 F1 | 	sub	objptr, ##27148
0aa2c     B0 B5 BF FD | 	call	#_isfunction
0aa30     FD FA E1 F8 | 	getbyte	result1, result1, #0
0aa34     04 38 06 F1 | 	add	local10, #4
0aa38     1C FB 61 FC | 	wrlong	result1, local10
0aa3c                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0aa3c     37 00 00 FF 
0aa40     44 E4 05 F1 | 	add	objptr, ##28228
0aa44     F2 38 02 FB | 	rdlong	local10, objptr
0aa48     03 38 66 F0 | 	shl	local10, #3
0aa4c     02 00 00 FF 
0aa50     38 E4 85 F1 | 	sub	objptr, ##1080
0aa54     F2 38 02 F1 | 	add	local10, objptr
0aa58     04 38 06 F1 | 	add	local10, #4
0aa5c     1C 2D 02 FB | 	rdlong	local04, local10
0aa60     01 2C 56 F2 | 	cmps	local04, #1 wc
0aa64     35 00 00 FF 
0aa68     0C E4 85 F1 | 	sub	objptr, ##27148
0aa6c     D4 03 90 3D |  if_ae	jmp	#LR__0923
0aa70     37 00 00 FF 
0aa74     44 E4 05 F1 | 	add	objptr, ##28228
0aa78     F2 2C 02 FB | 	rdlong	local04, objptr
0aa7c     16 39 02 F6 | 	mov	local10, local04
0aa80     03 38 66 F0 | 	shl	local10, #3
0aa84     02 00 00 FF 
0aa88     38 E4 85 F1 | 	sub	objptr, ##1080
0aa8c     F2 38 02 F1 | 	add	local10, objptr
0aa90     03 2C 66 F0 | 	shl	local04, #3
0aa94     F2 2C 02 F1 | 	add	local04, objptr
0aa98     16 13 02 FB | 	rdlong	arg01, local04
0aa9c     35 00 00 FF 
0aaa0     0C E4 85 F1 | 	sub	objptr, ##27148
0aaa4     8C 9E BF FD | 	call	#_isnotename
0aaa8     04 38 06 F1 | 	add	local10, #4
0aaac     1C FB 61 FC | 	wrlong	result1, local10
0aab0                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0aab0                 | '     if lparts(ct).token>0 then 
0aab0     37 00 00 FF 
0aab4     44 E4 05 F1 | 	add	objptr, ##28228
0aab8     F2 38 02 FB | 	rdlong	local10, objptr
0aabc     03 38 66 F0 | 	shl	local10, #3
0aac0     02 00 00 FF 
0aac4     38 E4 85 F1 | 	sub	objptr, ##1080
0aac8     F2 38 02 F1 | 	add	local10, objptr
0aacc     04 38 06 F1 | 	add	local10, #4
0aad0     1C 2D 02 FB | 	rdlong	local04, local10
0aad4     01 2C 56 F2 | 	cmps	local04, #1 wc
0aad8     35 00 00 FF 
0aadc     0C E4 85 F1 | 	sub	objptr, ##27148
0aae0     94 00 90 CD |  if_b	jmp	#LR__0917
0aae4     37 00 00 FF 
0aae8     44 E4 05 F1 | 	add	objptr, ##28228
0aaec     F2 38 02 FB | 	rdlong	local10, objptr
0aaf0     03 38 66 F0 | 	shl	local10, #3
0aaf4     02 00 00 FF 
0aaf8     38 E4 85 F1 | 	sub	objptr, ##1080
0aafc     F2 38 02 F1 | 	add	local10, objptr
0ab00     04 38 06 F1 | 	add	local10, #4
0ab04     1C 13 02 FB | 	rdlong	arg01, local10
0ab08     35 00 00 FF 
0ab0c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab10     B4 C6 BF FD | 	call	#_getnoteval
0ab14     FD 12 02 F6 | 	mov	arg01, result1
0ab18     37 00 00 FF 
0ab1c     44 E4 05 F1 | 	add	objptr, ##28228
0ab20     F2 38 02 FB | 	rdlong	local10, objptr
0ab24     03 38 66 F0 | 	shl	local10, #3
0ab28     02 00 00 FF 
0ab2c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab30     F2 38 02 F1 | 	add	local10, objptr
0ab34     35 00 00 FF 
0ab38     0C E4 85 F1 | 	sub	objptr, ##27148
0ab3c     F0 EB B1 FD | 	call	#__system__str_S
0ab40     1C FB 61 FC | 	wrlong	result1, local10
0ab44     37 00 00 FF 
0ab48     44 E4 05 F1 | 	add	objptr, ##28228
0ab4c     F2 38 02 FB | 	rdlong	local10, objptr
0ab50     03 38 66 F0 | 	shl	local10, #3
0ab54     02 00 00 FF 
0ab58     38 E4 85 F1 | 	sub	objptr, ##1080
0ab5c     F2 38 02 F1 | 	add	local10, objptr
0ab60     04 38 06 F1 | 	add	local10, #4
0ab64     01 00 80 FF 
0ab68     1C 05 68 FC | 	wrlong	##514, local10
0ab6c     35 00 00 FF 
0ab70     0C E4 85 F1 | 	sub	objptr, ##27148
0ab74     CC 02 90 FD | 	jmp	#LR__0923
0ab78                 | LR__0917
0ab78     37 00 00 FF 
0ab7c     44 E4 05 F1 | 	add	objptr, ##28228
0ab80     F2 2C 02 FB | 	rdlong	local04, objptr
0ab84     16 39 02 F6 | 	mov	local10, local04
0ab88     03 38 66 F0 | 	shl	local10, #3
0ab8c     02 00 00 FF 
0ab90     38 E4 85 F1 | 	sub	objptr, ##1080
0ab94     F2 38 02 F1 | 	add	local10, objptr
0ab98     03 2C 66 F0 | 	shl	local04, #3
0ab9c     F2 2C 02 F1 | 	add	local04, objptr
0aba0     16 13 02 FB | 	rdlong	arg01, local04
0aba4     35 00 00 FF 
0aba8     0C E4 85 F1 | 	sub	objptr, ##27148
0abac     04 9D BF FD | 	call	#_isconstant
0abb0     04 38 06 F1 | 	add	local10, #4
0abb4     1C FB 61 FC | 	wrlong	result1, local10
0abb8                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0abb8     37 00 00 FF 
0abbc     44 E4 05 F1 | 	add	objptr, ##28228
0abc0     F2 38 02 FB | 	rdlong	local10, objptr
0abc4     03 38 66 F0 | 	shl	local10, #3
0abc8     02 00 00 FF 
0abcc     38 E4 85 F1 | 	sub	objptr, ##1080
0abd0     F2 38 02 F1 | 	add	local10, objptr
0abd4     04 38 06 F1 | 	add	local10, #4
0abd8     1C 2D 02 FB | 	rdlong	local04, local10
0abdc     01 2C 56 F2 | 	cmps	local04, #1 wc
0abe0     35 00 00 FF 
0abe4     0C E4 85 F1 | 	sub	objptr, ##27148
0abe8     8C 00 90 CD |  if_b	jmp	#LR__0918
0abec     37 00 00 FF 
0abf0     44 E4 05 F1 | 	add	objptr, ##28228
0abf4     F2 34 02 FB | 	rdlong	local08, objptr
0abf8     1A 39 02 F6 | 	mov	local10, local08
0abfc     03 38 66 F0 | 	shl	local10, #3
0ac00     02 00 00 FF 
0ac04     38 E4 85 F1 | 	sub	objptr, ##1080
0ac08     F2 38 02 F1 | 	add	local10, objptr
0ac0c     03 34 66 F0 | 	shl	local08, #3
0ac10     F2 34 02 F1 | 	add	local08, objptr
0ac14     04 34 06 F1 | 	add	local08, #4
0ac18     1A 13 02 FB | 	rdlong	arg01, local08
0ac1c     35 00 00 FF 
0ac20     0C E4 85 F1 | 	sub	objptr, ##27148
0ac24     09 13 52 F6 | 	abs	arg01, arg01 wc
0ac28     1F 3A C6 C9 |  if_b	decod	local11, #31
0ac2c     00 3A 06 36 |  if_ae	mov	local11, #0
0ac30     FC F2 B1 FD | 	call	#__system___float_fromuns
0ac34     1D FB 61 F5 | 	xor	result1, local11
0ac38     FD 12 02 F6 | 	mov	arg01, result1
0ac3c     F0 EA B1 FD | 	call	#__system__str_S
0ac40     1C FB 61 FC | 	wrlong	result1, local10
0ac44     37 00 00 FF 
0ac48     44 E4 05 F1 | 	add	objptr, ##28228
0ac4c     F2 38 02 FB | 	rdlong	local10, objptr
0ac50     03 38 66 F0 | 	shl	local10, #3
0ac54     02 00 00 FF 
0ac58     38 E4 85 F1 | 	sub	objptr, ##1080
0ac5c     F2 38 02 F1 | 	add	local10, objptr
0ac60     04 38 06 F1 | 	add	local10, #4
0ac64     01 00 80 FF 
0ac68     1C 03 68 FC | 	wrlong	##513, local10
0ac6c     35 00 00 FF 
0ac70     0C E4 85 F1 | 	sub	objptr, ##27148
0ac74     CC 01 90 FD | 	jmp	#LR__0923
0ac78                 | LR__0918
0ac78     37 00 00 FF 
0ac7c     44 E4 05 F1 | 	add	objptr, ##28228
0ac80     F2 38 02 FB | 	rdlong	local10, objptr
0ac84     03 38 66 F0 | 	shl	local10, #3
0ac88     02 00 00 FF 
0ac8c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac90     F2 38 02 F1 | 	add	local10, objptr
0ac94     1C 13 02 FB | 	rdlong	arg01, local10
0ac98     35 00 00 FF 
0ac9c     0C E4 85 F1 | 	sub	objptr, ##27148
0aca0     70 BD BF FD | 	call	#_isnum
0aca4     FD 3C 02 F6 | 	mov	local12, result1
0aca8     37 00 00 FF 
0acac     44 E4 05 F1 | 	add	objptr, ##28228
0acb0     F2 38 02 FB | 	rdlong	local10, objptr
0acb4     03 38 66 F0 | 	shl	local10, #3
0acb8     02 00 00 FF 
0acbc     38 E4 85 F1 | 	sub	objptr, ##1080
0acc0     F2 38 02 F1 | 	add	local10, objptr
0acc4     1C 13 02 FB | 	rdlong	arg01, local10
0acc8     35 00 00 FF 
0accc     0C E4 85 F1 | 	sub	objptr, ##27148
0acd0     2C C1 BF FD | 	call	#_isint
0acd4     FD 3E 02 F6 | 	mov	local13, result1
0acd8     37 00 00 FF 
0acdc     44 E4 05 F1 | 	add	objptr, ##28228
0ace0     F2 38 02 FB | 	rdlong	local10, objptr
0ace4     03 38 66 F0 | 	shl	local10, #3
0ace8     02 00 00 FF 
0acec     38 E4 85 F1 | 	sub	objptr, ##1080
0acf0     F2 38 02 F1 | 	add	local10, objptr
0acf4     1C 13 02 FB | 	rdlong	arg01, local10
0acf8     35 00 00 FF 
0acfc     0C E4 85 F1 | 	sub	objptr, ##27148
0ad00     A0 C3 BF FD | 	call	#_isdec
0ad04     FD 40 02 F6 | 	mov	local14, result1
0ad08                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ad08                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ad08     00 3C 0E F2 | 	cmp	local12, #0 wz
0ad0c     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ad10     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ad14     34 00 90 AD |  if_e	jmp	#LR__0919
0ad18     37 00 00 FF 
0ad1c     44 E4 05 F1 | 	add	objptr, ##28228
0ad20     F2 38 02 FB | 	rdlong	local10, objptr
0ad24     03 38 66 F0 | 	shl	local10, #3
0ad28     02 00 00 FF 
0ad2c     38 E4 85 F1 | 	sub	objptr, ##1080
0ad30     F2 38 02 F1 | 	add	local10, objptr
0ad34     04 38 06 F1 | 	add	local10, #4
0ad38     01 00 80 FF 
0ad3c     1C 01 68 FC | 	wrlong	##512, local10
0ad40     35 00 00 FF 
0ad44     0C E4 85 F1 | 	sub	objptr, ##27148
0ad48     F8 00 90 FD | 	jmp	#LR__0923
0ad4c                 | LR__0919
0ad4c                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0ad4c     00 3C 0E F2 | 	cmp	local12, #0 wz
0ad50     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ad54     20 35 22 56 |  if_ne	not	local08, local14
0ad58     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0ad5c     34 00 90 AD |  if_e	jmp	#LR__0920
0ad60     37 00 00 FF 
0ad64     44 E4 05 F1 | 	add	objptr, ##28228
0ad68     F2 38 02 FB | 	rdlong	local10, objptr
0ad6c     03 38 66 F0 | 	shl	local10, #3
0ad70     02 00 00 FF 
0ad74     38 E4 85 F1 | 	sub	objptr, ##1080
0ad78     F2 38 02 F1 | 	add	local10, objptr
0ad7c     04 38 06 F1 | 	add	local10, #4
0ad80     01 00 80 FF 
0ad84     1C 03 68 FC | 	wrlong	##513, local10
0ad88     35 00 00 FF 
0ad8c     0C E4 85 F1 | 	sub	objptr, ##27148
0ad90     B0 00 90 FD | 	jmp	#LR__0923
0ad94                 | LR__0920
0ad94                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ad94     00 3C 0E F2 | 	cmp	local12, #0 wz
0ad98     1F 3F 22 56 |  if_ne	not	local13, local13
0ad9c     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ada0     20 41 22 56 |  if_ne	not	local14, local14
0ada4     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ada8     34 00 90 AD |  if_e	jmp	#LR__0921
0adac     37 00 00 FF 
0adb0     44 E4 05 F1 | 	add	objptr, ##28228
0adb4     F2 38 02 FB | 	rdlong	local10, objptr
0adb8     03 38 66 F0 | 	shl	local10, #3
0adbc     02 00 00 FF 
0adc0     38 E4 85 F1 | 	sub	objptr, ##1080
0adc4     F2 38 02 F1 | 	add	local10, objptr
0adc8     04 38 06 F1 | 	add	local10, #4
0adcc     01 00 80 FF 
0add0     1C 05 68 FC | 	wrlong	##514, local10
0add4     35 00 00 FF 
0add8     0C E4 85 F1 | 	sub	objptr, ##27148
0addc     64 00 90 FD | 	jmp	#LR__0923
0ade0                 | LR__0921
0ade0                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ade0     37 00 00 FF 
0ade4     44 E4 05 F1 | 	add	objptr, ##28228
0ade8     F2 38 02 FB | 	rdlong	local10, objptr
0adec     03 38 66 F0 | 	shl	local10, #3
0adf0     02 00 00 FF 
0adf4     38 E4 85 F1 | 	sub	objptr, ##1080
0adf8     F2 38 02 F1 | 	add	local10, objptr
0adfc     1C 13 02 FB | 	rdlong	arg01, local10
0ae00     35 00 00 FF 
0ae04     0C E4 85 F1 | 	sub	objptr, ##27148
0ae08     94 B9 BF FD | 	call	#_isname
0ae0c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ae10     30 00 90 AD |  if_e	jmp	#LR__0922
0ae14     37 00 00 FF 
0ae18     44 E4 05 F1 | 	add	objptr, ##28228
0ae1c     F2 38 02 FB | 	rdlong	local10, objptr
0ae20     03 38 66 F0 | 	shl	local10, #3
0ae24     02 00 00 FF 
0ae28     38 E4 85 F1 | 	sub	objptr, ##1080
0ae2c     F2 38 02 F1 | 	add	local10, objptr
0ae30     04 38 06 F1 | 	add	local10, #4
0ae34     01 00 80 FF 
0ae38     1C 09 68 FC | 	wrlong	##516, local10
0ae3c     35 00 00 FF 
0ae40     0C E4 85 F1 | 	sub	objptr, ##27148
0ae44                 | LR__0922
0ae44                 | LR__0923
0ae44     37 00 00 FF 
0ae48     44 E4 05 F1 | 	add	objptr, ##28228
0ae4c     F2 34 02 FB | 	rdlong	local08, objptr
0ae50     01 34 86 F1 | 	sub	local08, #1
0ae54     F2 34 62 FC | 	wrlong	local08, objptr
0ae58     37 00 00 FF 
0ae5c     44 E4 85 F1 | 	sub	objptr, ##28228
0ae60                 | LR__0924
0ae60     37 00 00 FF 
0ae64     44 E4 05 F1 | 	add	objptr, ##28228
0ae68     F2 34 02 FB | 	rdlong	local08, objptr
0ae6c     01 34 06 F1 | 	add	local08, #1
0ae70     F2 34 62 FC | 	wrlong	local08, objptr
0ae74     37 00 00 FF 
0ae78     44 E4 85 F1 | 	sub	objptr, ##28228
0ae7c     10 11 B0 FD | 	call	#_expr
0ae80     78 00 90 FD | 	jmp	#LR__0926
0ae84                 | LR__0925
0ae84     4A 00 00 FF 
0ae88     7C E4 05 F1 | 	add	objptr, ##38012
0ae8c     F2 40 02 FB | 	rdlong	local14, objptr
0ae90     20 39 02 F6 | 	mov	local10, local14
0ae94     01 38 66 F0 | 	shl	local10, #1
0ae98     20 39 02 F1 | 	add	local10, local14
0ae9c     02 38 66 F0 | 	shl	local10, #2
0aea0     03 00 00 FF 
0aea4     00 E4 85 F1 | 	sub	objptr, ##1536
0aea8     F2 38 02 F1 | 	add	local10, objptr
0aeac     08 38 06 F1 | 	add	local10, #8
0aeb0     1C 39 68 FC | 	wrlong	#28, local10
0aeb4     03 00 00 FF 
0aeb8     00 E4 05 F1 | 	add	objptr, ##1536
0aebc     F2 40 02 FB | 	rdlong	local14, objptr
0aec0     20 39 02 F6 | 	mov	local10, local14
0aec4     01 38 66 F0 | 	shl	local10, #1
0aec8     20 39 02 F1 | 	add	local10, local14
0aecc     02 38 66 F0 | 	shl	local10, #2
0aed0     03 00 00 FF 
0aed4     00 E4 85 F1 | 	sub	objptr, ##1536
0aed8     F2 38 02 F1 | 	add	local10, objptr
0aedc     1C 03 68 FC | 	wrlong	#1, local10
0aee0     03 00 00 FF 
0aee4     00 E4 05 F1 | 	add	objptr, ##1536
0aee8     F2 34 02 FB | 	rdlong	local08, objptr
0aeec     01 34 06 F1 | 	add	local08, #1
0aef0     F2 34 62 FC | 	wrlong	local08, objptr
0aef4     4A 00 00 FF 
0aef8     7C E4 85 F1 | 	sub	objptr, ##38012
0aefc                 | LR__0926
0aefc     4A 00 00 FF 
0af00     7C E4 05 F1 | 	add	objptr, ##38012
0af04     F2 40 02 FB | 	rdlong	local14, objptr
0af08     20 39 02 F6 | 	mov	local10, local14
0af0c     01 38 66 F0 | 	shl	local10, #1
0af10     20 39 02 F1 | 	add	local10, local14
0af14     02 38 66 F0 | 	shl	local10, #2
0af18     03 00 00 FF 
0af1c     00 E4 85 F1 | 	sub	objptr, ##1536
0af20     F2 38 02 F1 | 	add	local10, objptr
0af24     08 38 06 F1 | 	add	local10, #8
0af28     1C 39 68 FC | 	wrlong	#28, local10
0af2c     03 00 00 FF 
0af30     00 E4 05 F1 | 	add	objptr, ##1536
0af34     F2 40 02 FB | 	rdlong	local14, objptr
0af38     20 39 02 F6 | 	mov	local10, local14
0af3c     01 38 66 F0 | 	shl	local10, #1
0af40     20 39 02 F1 | 	add	local10, local14
0af44     02 38 66 F0 | 	shl	local10, #2
0af48     03 00 00 FF 
0af4c     00 E4 85 F1 | 	sub	objptr, ##1536
0af50     F2 38 02 F1 | 	add	local10, objptr
0af54     1C 33 62 FC | 	wrlong	local07, local10
0af58     03 00 00 FF 
0af5c     00 E4 05 F1 | 	add	objptr, ##1536
0af60     F2 40 02 FB | 	rdlong	local14, objptr
0af64     01 40 06 F1 | 	add	local14, #1
0af68     F2 40 62 FC | 	wrlong	local14, objptr
0af6c     20 39 02 F6 | 	mov	local10, local14
0af70     01 38 66 F0 | 	shl	local10, #1
0af74     20 39 02 F1 | 	add	local10, local14
0af78     02 38 66 F0 | 	shl	local10, #2
0af7c     03 00 00 FF 
0af80     00 E4 85 F1 | 	sub	objptr, ##1536
0af84     F2 38 02 F1 | 	add	local10, objptr
0af88     08 38 06 F1 | 	add	local10, #8
0af8c     1C 95 68 FC | 	wrlong	#74, local10
0af90     03 00 00 FF 
0af94     00 E4 05 F1 | 	add	objptr, ##1536
0af98     F2 40 02 FB | 	rdlong	local14, objptr
0af9c     20 39 02 F6 | 	mov	local10, local14
0afa0     01 38 66 F0 | 	shl	local10, #1
0afa4     20 39 02 F1 | 	add	local10, local14
0afa8     02 38 66 F0 | 	shl	local10, #2
0afac     03 00 00 FF 
0afb0     00 E4 85 F1 | 	sub	objptr, ##1536
0afb4     F2 38 02 F1 | 	add	local10, objptr
0afb8     1C 01 68 FC | 	wrlong	#0, local10
0afbc     03 00 00 FF 
0afc0     00 E4 05 F1 | 	add	objptr, ##1536
0afc4     F2 34 02 FB | 	rdlong	local08, objptr
0afc8     01 34 06 F1 | 	add	local08, #1
0afcc     F2 34 62 FC | 	wrlong	local08, objptr
0afd0     4A 00 00 FF 
0afd4     7C E4 85 F1 | 	sub	objptr, ##38012
0afd8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0afd8                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0afd8                 | ' return 0
0afd8     00 FA 05 F6 | 	mov	result1, #0
0afdc                 | LR__0927
0afdc     A7 F0 03 F6 | 	mov	ptra, fp
0afe0     B2 00 A0 FD | 	call	#popregs_
0afe4                 | _compile_for_ret
0afe4     2D 00 64 FD | 	ret
0afe8                 | 
0afe8                 | ' 
0afe8                 | ' '----- compile 'next' command. 
0afe8                 | ' 
0afe8                 | ' function compile_next() as ulong
0afe8                 | _compile_next
0afe8     04 4A 05 F6 | 	mov	COUNT_, #4
0afec     A8 00 A0 FD | 	call	#pushregs_
0aff0     37 00 00 FF 
0aff4     44 E4 05 F1 | 	add	objptr, ##28228
0aff8     F2 14 02 FB | 	rdlong	arg02, objptr
0affc     03 14 66 F0 | 	shl	arg02, #3
0b000     02 00 00 FF 
0b004     38 E4 85 F1 | 	sub	objptr, ##1080
0b008     F2 14 02 F1 | 	add	arg02, objptr
0b00c     0A 27 02 FB | 	rdlong	local01, arg02
0b010                 | ' 
0b010                 | ' varname$=lparts(ct).part$ 
0b010                 | ' if varnum=0 then return 35
0b010     04 E4 85 F1 | 	sub	objptr, #4
0b014     F2 14 0A FB | 	rdlong	arg02, objptr wz
0b018     35 00 00 FF 
0b01c     08 E4 85 F1 | 	sub	objptr, ##27144
0b020     23 FA 05 A6 |  if_e	mov	result1, #35
0b024     4C 01 90 AD |  if_e	jmp	#LR__0932
0b028     01 28 66 F6 | 	neg	local02, #1
0b02c                 | ' j=-1
0b02c                 | ' for i=0 to varnum-1
0b02c     00 2A 06 F6 | 	mov	local03, #0
0b030     35 00 00 FF 
0b034     08 E4 05 F1 | 	add	objptr, ##27144
0b038     F2 2C 02 FB | 	rdlong	local04, objptr
0b03c     35 00 00 FF 
0b040     08 E4 85 F1 | 	sub	objptr, ##27144
0b044                 | LR__0930
0b044     16 2B 12 F2 | 	cmp	local03, local04 wc
0b048     38 00 90 3D |  if_ae	jmp	#LR__0931
0b04c                 | '   if variables(i).name=varname$ then j=i : exit
0b04c     15 15 02 F6 | 	mov	arg02, local03
0b050     04 14 66 F0 | 	shl	arg02, #4
0b054     14 00 00 FF 
0b058     F8 E5 05 F1 | 	add	objptr, ##10744
0b05c     F2 14 02 F1 | 	add	arg02, objptr
0b060     0A 13 02 FB | 	rdlong	arg01, arg02
0b064     13 15 02 F6 | 	mov	arg02, local01
0b068     14 00 00 FF 
0b06c     F8 E5 85 F1 | 	sub	objptr, ##10744
0b070     6C C4 B1 FD | 	call	#__system___string_cmp
0b074     00 FA 0D F2 | 	cmp	result1, #0 wz
0b078     15 29 02 A6 |  if_e	mov	local02, local03
0b07c     01 2A 06 51 |  if_ne	add	local03, #1
0b080     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0b084                 | LR__0931
0b084                 | ' if j=-1 then return 35
0b084     FF FF 7F FF 
0b088     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0b08c     23 FA 05 A6 |  if_e	mov	result1, #35
0b090     E0 00 90 AD |  if_e	jmp	#LR__0932
0b094     4A 00 00 FF 
0b098     7C E4 05 F1 | 	add	objptr, ##38012
0b09c     F2 2C 02 FB | 	rdlong	local04, objptr
0b0a0     16 2B 02 F6 | 	mov	local03, local04
0b0a4     01 2A 66 F0 | 	shl	local03, #1
0b0a8     16 2B 02 F1 | 	add	local03, local04
0b0ac     02 2A 66 F0 | 	shl	local03, #2
0b0b0     03 00 00 FF 
0b0b4     00 E4 85 F1 | 	sub	objptr, ##1536
0b0b8     F2 2A 02 F1 | 	add	local03, objptr
0b0bc     08 2A 06 F1 | 	add	local03, #8
0b0c0     15 39 68 FC | 	wrlong	#28, local03
0b0c4     03 00 00 FF 
0b0c8     00 E4 05 F1 | 	add	objptr, ##1536
0b0cc     F2 2C 02 FB | 	rdlong	local04, objptr
0b0d0     16 2B 02 F6 | 	mov	local03, local04
0b0d4     01 2A 66 F0 | 	shl	local03, #1
0b0d8     16 2B 02 F1 | 	add	local03, local04
0b0dc     02 2A 66 F0 | 	shl	local03, #2
0b0e0     03 00 00 FF 
0b0e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b0e8     F2 2A 02 F1 | 	add	local03, objptr
0b0ec     15 29 62 FC | 	wrlong	local02, local03
0b0f0     03 00 00 FF 
0b0f4     00 E4 05 F1 | 	add	objptr, ##1536
0b0f8     F2 2C 02 FB | 	rdlong	local04, objptr
0b0fc     01 2C 06 F1 | 	add	local04, #1
0b100     F2 2C 62 FC | 	wrlong	local04, objptr
0b104     16 2B 02 F6 | 	mov	local03, local04
0b108     01 2A 66 F0 | 	shl	local03, #1
0b10c     16 2B 02 F1 | 	add	local03, local04
0b110     02 2A 66 F0 | 	shl	local03, #2
0b114     03 00 00 FF 
0b118     00 E4 85 F1 | 	sub	objptr, ##1536
0b11c     F2 2A 02 F1 | 	add	local03, objptr
0b120     08 2A 06 F1 | 	add	local03, #8
0b124     15 97 68 FC | 	wrlong	#75, local03
0b128     03 00 00 FF 
0b12c     00 E4 05 F1 | 	add	objptr, ##1536
0b130     F2 2C 02 FB | 	rdlong	local04, objptr
0b134     16 2B 02 F6 | 	mov	local03, local04
0b138     01 2A 66 F0 | 	shl	local03, #1
0b13c     16 2B 02 F1 | 	add	local03, local04
0b140     02 2A 66 F0 | 	shl	local03, #2
0b144     03 00 00 FF 
0b148     00 E4 85 F1 | 	sub	objptr, ##1536
0b14c     F2 2A 02 F1 | 	add	local03, objptr
0b150     15 01 68 FC | 	wrlong	#0, local03
0b154     03 00 00 FF 
0b158     00 E4 05 F1 | 	add	objptr, ##1536
0b15c     F2 2C 02 FB | 	rdlong	local04, objptr
0b160     01 2C 06 F1 | 	add	local04, #1
0b164     F2 2C 62 FC | 	wrlong	local04, objptr
0b168     4A 00 00 FF 
0b16c     7C E4 85 F1 | 	sub	objptr, ##38012
0b170                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b170                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b170                 | ' return 0
0b170     00 FA 05 F6 | 	mov	result1, #0
0b174                 | LR__0932
0b174     A7 F0 03 F6 | 	mov	ptra, fp
0b178     B2 00 A0 FD | 	call	#popregs_
0b17c                 | _compile_next_ret
0b17c     2D 00 64 FD | 	ret
0b180                 | 
0b180                 | ' 
0b180                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b180                 | ' 
0b180                 | ' function compile_gosub() as ulong
0b180                 | _compile_gosub
0b180     02 4A 05 F6 | 	mov	COUNT_, #2
0b184     A8 00 A0 FD | 	call	#pushregs_
0b188     4A 00 00 FF 
0b18c     7C E4 05 F1 | 	add	objptr, ##38012
0b190     F2 26 02 FB | 	rdlong	local01, objptr
0b194     13 29 02 F6 | 	mov	local02, local01
0b198     01 28 66 F0 | 	shl	local02, #1
0b19c     13 29 02 F1 | 	add	local02, local01
0b1a0     02 28 66 F0 | 	shl	local02, #2
0b1a4     03 00 00 FF 
0b1a8     00 E4 85 F1 | 	sub	objptr, ##1536
0b1ac     F2 28 02 F1 | 	add	local02, objptr
0b1b0     08 28 06 F1 | 	add	local02, #8
0b1b4     14 53 69 FC | 	wrlong	#169, local02
0b1b8     03 00 00 FF 
0b1bc     00 E4 05 F1 | 	add	objptr, ##1536
0b1c0     F2 28 02 FB | 	rdlong	local02, objptr
0b1c4     01 28 06 F1 | 	add	local02, #1
0b1c8     F2 28 62 FC | 	wrlong	local02, objptr
0b1cc     4A 00 00 FF 
0b1d0     7C E4 85 F1 | 	sub	objptr, ##38012
0b1d4     0C 00 B0 FD | 	call	#_compile_goto
0b1d8                 | ' compiledline(lineptr).result_type=token_gosub
0b1d8                 | ' lineptr+=1
0b1d8                 | ' err=compile_goto()
0b1d8                 | ' return err
0b1d8     A7 F0 03 F6 | 	mov	ptra, fp
0b1dc     B2 00 A0 FD | 	call	#popregs_
0b1e0                 | _compile_gosub_ret
0b1e0     2D 00 64 FD | 	ret
0b1e4                 | 
0b1e4                 | ' 
0b1e4                 | ' '----- compile 'goto' 
0b1e4                 | ' 
0b1e4                 | ' function compile_goto() as ulong
0b1e4                 | _compile_goto
0b1e4     03 4A 05 F6 | 	mov	COUNT_, #3
0b1e8     A8 00 A0 FD | 	call	#pushregs_
0b1ec     34 F0 07 F1 | 	add	ptra, #52
0b1f0                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b1f0     37 00 00 FF 
0b1f4     44 E4 05 F1 | 	add	objptr, ##28228
0b1f8     F2 16 02 FB | 	rdlong	arg03, objptr
0b1fc     03 16 66 F0 | 	shl	arg03, #3
0b200     02 00 00 FF 
0b204     38 E4 85 F1 | 	sub	objptr, ##1080
0b208     F2 16 02 F1 | 	add	arg03, objptr
0b20c     04 16 06 F1 | 	add	arg03, #4
0b210     0B 17 02 FB | 	rdlong	arg03, arg03
0b214     01 00 00 FF 
0b218     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b21c     35 00 00 FF 
0b220     0C E4 85 F1 | 	sub	objptr, ##27148
0b224     CC 02 90 5D |  if_ne	jmp	#LR__0945
0b228     37 00 00 FF 
0b22c     44 E4 05 F1 | 	add	objptr, ##28228
0b230     F2 16 02 FB | 	rdlong	arg03, objptr
0b234     01 16 06 F1 | 	add	arg03, #1
0b238     03 16 66 F0 | 	shl	arg03, #3
0b23c     02 00 00 FF 
0b240     38 E4 85 F1 | 	sub	objptr, ##1080
0b244     F2 16 02 F1 | 	add	arg03, objptr
0b248     04 16 06 F1 | 	add	arg03, #4
0b24c     0B 17 02 FB | 	rdlong	arg03, arg03
0b250     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b254     35 00 00 FF 
0b258     0C E4 85 F1 | 	sub	objptr, ##27148
0b25c     94 02 90 5D |  if_ne	jmp	#LR__0945
0b260     37 00 00 FF 
0b264     44 E4 05 F1 | 	add	objptr, ##28228
0b268     F2 16 02 FB | 	rdlong	arg03, objptr
0b26c     03 16 66 F0 | 	shl	arg03, #3
0b270     02 00 00 FF 
0b274     38 E4 85 F1 | 	sub	objptr, ##1080
0b278     F2 16 02 F1 | 	add	arg03, objptr
0b27c     0B 13 02 FB | 	rdlong	arg01, arg03
0b280     00 14 06 F6 | 	mov	arg02, #0
0b284     35 00 00 FF 
0b288     0C E4 85 F1 | 	sub	objptr, ##27148
0b28c     1C F7 B1 FD | 	call	#__system____builtin_atoi
0b290     04 4E 05 F1 | 	add	fp, #4
0b294     A7 FA 61 FC | 	wrlong	result1, fp
0b298     4A 00 00 FF 
0b29c     7C E4 05 F1 | 	add	objptr, ##38012
0b2a0     F2 26 02 FB | 	rdlong	local01, objptr
0b2a4     13 29 02 F6 | 	mov	local02, local01
0b2a8     01 28 66 F0 | 	shl	local02, #1
0b2ac     13 29 02 F1 | 	add	local02, local01
0b2b0     02 28 66 F0 | 	shl	local02, #2
0b2b4     03 00 00 FF 
0b2b8     00 E4 85 F1 | 	sub	objptr, ##1536
0b2bc     F2 28 02 F1 | 	add	local02, objptr
0b2c0     08 28 06 F1 | 	add	local02, #8
0b2c4     14 9D 68 FC | 	wrlong	#78, local02
0b2c8     03 00 00 FF 
0b2cc     0C E4 05 F1 | 	add	objptr, ##1548
0b2d0     F2 2A 02 FB | 	rdlong	local03, objptr
0b2d4     4A 00 00 FF 
0b2d8     88 E4 85 F1 | 	sub	objptr, ##38024
0b2dc     04 4E 05 F1 | 	add	fp, #4
0b2e0     A7 2A 62 FC | 	wrlong	local03, fp
0b2e4     08 4E 85 F1 | 	sub	fp, #8
0b2e8                 | '   gotoline=val%(lparts(ct).part$) 
0b2e8                 | '   compiledline(lineptr).result_type=token_fast_goto
0b2e8                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b2e8                 | '   do
0b2e8                 | LR__0940
0b2e8     10 4E 05 F1 | 	add	fp, #16
0b2ec     A7 12 02 F6 | 	mov	arg01, fp
0b2f0     08 4E 85 F1 | 	sub	fp, #8
0b2f4     A7 14 02 FB | 	rdlong	arg02, fp
0b2f8     08 4E 85 F1 | 	sub	fp, #8
0b2fc     18 16 06 F6 | 	mov	arg03, #24
0b300     0B 00 00 FF 
0b304     CC E4 05 F1 | 	add	objptr, ##5836
0b308     08 B5 B1 FD | 	call	#_psram_spin2_read1
0b30c     0B 00 00 FF 
0b310     CC E4 85 F1 | 	sub	objptr, ##5836
0b314                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b314                 | '     if gotoheader(0)<>$FFFFFFFF then
0b314     10 4E 05 F1 | 	add	fp, #16
0b318     A7 2A 02 FB | 	rdlong	local03, fp
0b31c     10 4E 85 F1 | 	sub	fp, #16
0b320     FF FF 7F FF 
0b324     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b328     24 00 90 AD |  if_e	jmp	#LR__0941
0b32c     08 4E 05 F1 | 	add	fp, #8
0b330     A7 2A 02 FB | 	rdlong	local03, fp
0b334     04 4E 05 F1 | 	add	fp, #4
0b338     A7 2A 62 FC | 	wrlong	local03, fp
0b33c     18 4E 05 F1 | 	add	fp, #24
0b340     A7 2A 02 FB | 	rdlong	local03, fp
0b344     1C 4E 85 F1 | 	sub	fp, #28
0b348     A7 2A 62 FC | 	wrlong	local03, fp
0b34c     08 4E 85 F1 | 	sub	fp, #8
0b350                 | LR__0941
0b350     24 4E 05 F1 | 	add	fp, #36
0b354     A7 2A 02 FB | 	rdlong	local03, fp
0b358     24 4E 85 F1 | 	sub	fp, #36
0b35c     FF FF 3F FF 
0b360     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b364     10 4E 05 51 |  if_ne	add	fp, #16
0b368     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b36c     10 4E 85 51 |  if_ne	sub	fp, #16
0b370     FF FF 7F 5F 
0b374     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b378     1C 00 90 AD |  if_e	jmp	#LR__0942
0b37c     10 4E 05 F1 | 	add	fp, #16
0b380     A7 2A 02 FB | 	rdlong	local03, fp
0b384     0C 4E 85 F1 | 	sub	fp, #12
0b388     A7 28 02 FB | 	rdlong	local02, fp
0b38c     04 4E 85 F1 | 	sub	fp, #4
0b390     14 2B 0A F2 | 	cmp	local03, local02 wz
0b394     50 FF 9F 5D |  if_ne	jmp	#LR__0940
0b398                 | LR__0942
0b398                 | '   if gotoheader(0)=gotoline then
0b398     10 4E 05 F1 | 	add	fp, #16
0b39c     A7 2A 02 FB | 	rdlong	local03, fp
0b3a0     0C 4E 85 F1 | 	sub	fp, #12
0b3a4     A7 26 02 FB | 	rdlong	local01, fp
0b3a8     04 4E 85 F1 | 	sub	fp, #4
0b3ac     13 2B 0A F2 | 	cmp	local03, local01 wz
0b3b0     7C 00 90 5D |  if_ne	jmp	#LR__0943
0b3b4     4A 00 00 FF 
0b3b8     7C E4 05 F1 | 	add	objptr, ##38012
0b3bc     F2 26 02 FB | 	rdlong	local01, objptr
0b3c0     13 29 02 F6 | 	mov	local02, local01
0b3c4     01 28 66 F0 | 	shl	local02, #1
0b3c8     13 29 02 F1 | 	add	local02, local01
0b3cc     02 28 66 F0 | 	shl	local02, #2
0b3d0     03 00 00 FF 
0b3d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b3d8     F2 28 02 F1 | 	add	local02, objptr
0b3dc     0C 4E 05 F1 | 	add	fp, #12
0b3e0     A7 2A 02 FB | 	rdlong	local03, fp
0b3e4     14 2B 62 FC | 	wrlong	local03, local02
0b3e8     03 00 00 FF 
0b3ec     00 E4 05 F1 | 	add	objptr, ##1536
0b3f0     F2 26 02 FB | 	rdlong	local01, objptr
0b3f4     13 29 02 F6 | 	mov	local02, local01
0b3f8     01 28 66 F0 | 	shl	local02, #1
0b3fc     13 29 02 F1 | 	add	local02, local01
0b400     02 28 66 F0 | 	shl	local02, #2
0b404     03 00 00 FF 
0b408     00 E4 85 F1 | 	sub	objptr, ##1536
0b40c     F2 28 02 F1 | 	add	local02, objptr
0b410     08 4E 85 F1 | 	sub	fp, #8
0b414     A7 2A 02 FB | 	rdlong	local03, fp
0b418     04 4E 85 F1 | 	sub	fp, #4
0b41c     04 28 06 F1 | 	add	local02, #4
0b420     14 2B 62 FC | 	wrlong	local03, local02
0b424     47 00 00 FF 
0b428     7C E4 85 F1 | 	sub	objptr, ##36476
0b42c     A4 00 90 FD | 	jmp	#LR__0944
0b430                 | LR__0943
0b430     4A 00 00 FF 
0b434     7C E4 05 F1 | 	add	objptr, ##38012
0b438     F2 26 02 FB | 	rdlong	local01, objptr
0b43c     13 29 02 F6 | 	mov	local02, local01
0b440     01 28 66 F0 | 	shl	local02, #1
0b444     13 29 02 F1 | 	add	local02, local01
0b448     02 28 66 F0 | 	shl	local02, #2
0b44c     03 00 00 FF 
0b450     00 E4 85 F1 | 	sub	objptr, ##1536
0b454     F2 28 02 F1 | 	add	local02, objptr
0b458     00 00 C0 FF 
0b45c     14 01 68 FC | 	wrlong	##-2147483648, local02
0b460     03 00 00 FF 
0b464     00 E4 05 F1 | 	add	objptr, ##1536
0b468     F2 26 02 FB | 	rdlong	local01, objptr
0b46c     13 29 02 F6 | 	mov	local02, local01
0b470     01 28 66 F0 | 	shl	local02, #1
0b474     13 29 02 F1 | 	add	local02, local01
0b478     02 28 66 F0 | 	shl	local02, #2
0b47c     03 00 00 FF 
0b480     00 E4 85 F1 | 	sub	objptr, ##1536
0b484     F2 28 02 F1 | 	add	local02, objptr
0b488     04 4E 05 F1 | 	add	fp, #4
0b48c     A7 2A 02 FB | 	rdlong	local03, fp
0b490     04 4E 85 F1 | 	sub	fp, #4
0b494     04 28 06 F1 | 	add	local02, #4
0b498     14 2B 62 FC | 	wrlong	local03, local02
0b49c     03 00 00 FF 
0b4a0     00 E4 05 F1 | 	add	objptr, ##1536
0b4a4     F2 26 02 FB | 	rdlong	local01, objptr
0b4a8     13 29 02 F6 | 	mov	local02, local01
0b4ac     01 28 66 F0 | 	shl	local02, #1
0b4b0     13 29 02 F1 | 	add	local02, local01
0b4b4     02 28 66 F0 | 	shl	local02, #2
0b4b8     03 00 00 FF 
0b4bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c0     F2 28 02 F1 | 	add	local02, objptr
0b4c4     08 28 06 F1 | 	add	local02, #8
0b4c8     14 A7 68 FC | 	wrlong	#83, local02
0b4cc     47 00 00 FF 
0b4d0     7C E4 85 F1 | 	sub	objptr, ##36476
0b4d4                 | LR__0944
0b4d4     4A 00 00 FF 
0b4d8     7C E4 05 F1 | 	add	objptr, ##38012
0b4dc     F2 2A 02 FB | 	rdlong	local03, objptr
0b4e0     01 2A 06 F1 | 	add	local03, #1
0b4e4     F2 2A 62 FC | 	wrlong	local03, objptr
0b4e8     4A 00 00 FF 
0b4ec     7C E4 85 F1 | 	sub	objptr, ##38012
0b4f0     D0 00 90 FD | 	jmp	#LR__0946
0b4f4                 | LR__0945
0b4f4     98 0A B0 FD | 	call	#_expr
0b4f8     30 4E 05 F1 | 	add	fp, #48
0b4fc     A7 9E 68 FC | 	wrlong	#79, fp
0b500     08 4E 85 F1 | 	sub	fp, #8
0b504     A7 00 68 FC | 	wrlong	#0, fp
0b508     04 4E 05 F1 | 	add	fp, #4
0b50c     A7 2A 02 FB | 	rdlong	local03, fp
0b510     04 4E 05 F1 | 	add	fp, #4
0b514     A7 26 02 FB | 	rdlong	local01, fp
0b518     30 4E 85 F1 | 	sub	fp, #48
0b51c     4A 00 00 FF 
0b520     7C E4 05 F1 | 	add	objptr, ##38012
0b524     F2 28 02 FB | 	rdlong	local02, objptr
0b528     14 17 02 F6 | 	mov	arg03, local02
0b52c     01 16 66 F0 | 	shl	arg03, #1
0b530     14 17 02 F1 | 	add	arg03, local02
0b534     02 16 66 F0 | 	shl	arg03, #2
0b538     03 00 00 FF 
0b53c     00 E4 85 F1 | 	sub	objptr, ##1536
0b540     F2 16 02 F1 | 	add	arg03, objptr
0b544     0B 01 68 FC | 	wrlong	#0, arg03
0b548     03 00 00 FF 
0b54c     00 E4 05 F1 | 	add	objptr, ##1536
0b550     F2 28 02 FB | 	rdlong	local02, objptr
0b554     14 17 02 F6 | 	mov	arg03, local02
0b558     01 16 66 F0 | 	shl	arg03, #1
0b55c     14 17 02 F1 | 	add	arg03, local02
0b560     02 16 66 F0 | 	shl	arg03, #2
0b564     03 00 00 FF 
0b568     00 E4 85 F1 | 	sub	objptr, ##1536
0b56c     F2 16 02 F1 | 	add	arg03, objptr
0b570     04 16 06 F1 | 	add	arg03, #4
0b574     0B 2B 62 FC | 	wrlong	local03, arg03
0b578     03 00 00 FF 
0b57c     00 E4 05 F1 | 	add	objptr, ##1536
0b580     F2 2A 02 FB | 	rdlong	local03, objptr
0b584     15 29 02 F6 | 	mov	local02, local03
0b588     01 28 66 F0 | 	shl	local02, #1
0b58c     15 29 02 F1 | 	add	local02, local03
0b590     02 28 66 F0 | 	shl	local02, #2
0b594     03 00 00 FF 
0b598     00 E4 85 F1 | 	sub	objptr, ##1536
0b59c     F2 28 02 F1 | 	add	local02, objptr
0b5a0     08 28 06 F1 | 	add	local02, #8
0b5a4     14 27 62 FC | 	wrlong	local01, local02
0b5a8     03 00 00 FF 
0b5ac     00 E4 05 F1 | 	add	objptr, ##1536
0b5b0     F2 2A 02 FB | 	rdlong	local03, objptr
0b5b4     01 2A 06 F1 | 	add	local03, #1
0b5b8     F2 2A 62 FC | 	wrlong	local03, objptr
0b5bc     4A 00 00 FF 
0b5c0     7C E4 85 F1 | 	sub	objptr, ##38012
0b5c4                 | LR__0946
0b5c4                 | ' return 0
0b5c4     00 FA 05 F6 | 	mov	result1, #0
0b5c8     A7 F0 03 F6 | 	mov	ptra, fp
0b5cc     B2 00 A0 FD | 	call	#popregs_
0b5d0                 | _compile_goto_ret
0b5d0     2D 00 64 FD | 	ret
0b5d4                 | 
0b5d4                 | ' 
0b5d4                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b5d4                 | ' 
0b5d4                 | ' function compile_on() as ulong
0b5d4                 | _compile_on
0b5d4     04 4A 05 F6 | 	mov	COUNT_, #4
0b5d8     A8 00 A0 FD | 	call	#pushregs_
0b5dc     B0 09 B0 FD | 	call	#_expr
0b5e0     00 26 06 F6 | 	mov	local01, #0
0b5e4     4A 00 00 FF 
0b5e8     7C E4 05 F1 | 	add	objptr, ##38012
0b5ec     F2 14 02 FB | 	rdlong	arg02, objptr
0b5f0     0A 13 02 F6 | 	mov	arg01, arg02
0b5f4     01 12 66 F0 | 	shl	arg01, #1
0b5f8     0A 13 02 F1 | 	add	arg01, arg02
0b5fc     02 12 66 F0 | 	shl	arg01, #2
0b600     03 00 00 FF 
0b604     00 E4 85 F1 | 	sub	objptr, ##1536
0b608     F2 12 02 F1 | 	add	arg01, objptr
0b60c     08 12 06 F1 | 	add	arg01, #8
0b610     09 83 69 FC | 	wrlong	#193, arg01
0b614     03 00 00 FF 
0b618     00 E4 05 F1 | 	add	objptr, ##1536
0b61c     F2 14 02 FB | 	rdlong	arg02, objptr
0b620     0A 29 02 F6 | 	mov	local02, arg02
0b624     01 14 06 F1 | 	add	arg02, #1
0b628     F2 14 62 FC | 	wrlong	arg02, objptr
0b62c                 | ' expr()
0b62c                 | ' 'print lparts(ct).part$ 'ok
0b62c                 | ' numpar=0
0b62c                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b62c                 | ' if lparts(ct).part$="goto" then
0b62c     13 00 00 FF 
0b630     38 E4 85 F1 | 	sub	objptr, ##9784
0b634     F2 14 02 FB | 	rdlong	arg02, objptr
0b638     03 14 66 F0 | 	shl	arg02, #3
0b63c     02 00 00 FF 
0b640     38 E4 85 F1 | 	sub	objptr, ##1080
0b644     F2 14 02 F1 | 	add	arg02, objptr
0b648     0A 13 02 FB | 	rdlong	arg01, arg02
0b64c     BB 01 00 FF 
0b650     73 15 06 F6 | 	mov	arg02, ##@LR__5899
0b654     35 00 00 FF 
0b658     0C E4 85 F1 | 	sub	objptr, ##27148
0b65c     80 BE B1 FD | 	call	#__system___string_cmp
0b660     00 FA 0D F2 | 	cmp	result1, #0 wz
0b664     14 02 90 5D |  if_ne	jmp	#LR__0955
0b668     37 00 00 FF 
0b66c     44 E4 05 F1 | 	add	objptr, ##28228
0b670     F2 2A 02 FB | 	rdlong	local03, objptr
0b674     37 00 00 FF 
0b678     44 E4 85 F1 | 	sub	objptr, ##28228
0b67c     01 2A 06 F1 | 	add	local03, #1
0b680                 | '   i=ct+1
0b680                 | '   do
0b680                 | LR__0950
0b680                 | '     if lparts(i).token=token_decimal then
0b680     15 FB 01 F6 | 	mov	result1, local03
0b684     03 FA 65 F0 | 	shl	result1, #3
0b688     35 00 00 FF 
0b68c     0C E4 05 F1 | 	add	objptr, ##27148
0b690     F2 FA 01 F1 | 	add	result1, objptr
0b694     04 FA 05 F1 | 	add	result1, #4
0b698     FD FA 01 FB | 	rdlong	result1, result1
0b69c     01 00 00 FF 
0b6a0     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b6a4     35 00 00 FF 
0b6a8     0C E4 85 F1 | 	sub	objptr, ##27148
0b6ac     DC 00 90 5D |  if_ne	jmp	#LR__0951
0b6b0     4A 00 00 FF 
0b6b4     7C E4 05 F1 | 	add	objptr, ##38012
0b6b8     F2 FA 01 FB | 	rdlong	result1, objptr
0b6bc     FD 14 02 F6 | 	mov	arg02, result1
0b6c0     01 14 66 F0 | 	shl	arg02, #1
0b6c4     FD 14 02 F1 | 	add	arg02, result1
0b6c8     02 14 66 F0 | 	shl	arg02, #2
0b6cc     03 00 00 FF 
0b6d0     00 E4 85 F1 | 	sub	objptr, ##1536
0b6d4     F2 14 02 F1 | 	add	arg02, objptr
0b6d8     00 00 C0 FF 
0b6dc     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b6e0     03 00 00 FF 
0b6e4     00 E4 05 F1 | 	add	objptr, ##1536
0b6e8     F2 14 02 FB | 	rdlong	arg02, objptr
0b6ec     0A 2D 02 F6 | 	mov	local04, arg02
0b6f0     01 2C 66 F0 | 	shl	local04, #1
0b6f4     0A 2D 02 F1 | 	add	local04, arg02
0b6f8     02 2C 66 F0 | 	shl	local04, #2
0b6fc     03 00 00 FF 
0b700     00 E4 85 F1 | 	sub	objptr, ##1536
0b704     F2 2C 02 F1 | 	add	local04, objptr
0b708     15 15 02 F6 | 	mov	arg02, local03
0b70c     03 14 66 F0 | 	shl	arg02, #3
0b710     12 00 00 FF 
0b714     70 E4 85 F1 | 	sub	objptr, ##9328
0b718     F2 14 02 F1 | 	add	arg02, objptr
0b71c     0A 13 02 FB | 	rdlong	arg01, arg02
0b720     00 14 06 F6 | 	mov	arg02, #0
0b724     35 00 00 FF 
0b728     0C E4 85 F1 | 	sub	objptr, ##27148
0b72c     7C F2 B1 FD | 	call	#__system____builtin_atoi
0b730     04 2C 06 F1 | 	add	local04, #4
0b734     16 FB 61 FC | 	wrlong	result1, local04
0b738     4A 00 00 FF 
0b73c     7C E4 05 F1 | 	add	objptr, ##38012
0b740     F2 14 02 FB | 	rdlong	arg02, objptr
0b744     0A 2D 02 F6 | 	mov	local04, arg02
0b748     01 2C 66 F0 | 	shl	local04, #1
0b74c     0A 2D 02 F1 | 	add	local04, arg02
0b750     02 2C 66 F0 | 	shl	local04, #2
0b754     03 00 00 FF 
0b758     00 E4 85 F1 | 	sub	objptr, ##1536
0b75c     F2 2C 02 F1 | 	add	local04, objptr
0b760     08 2C 06 F1 | 	add	local04, #8
0b764     16 A7 68 FC | 	wrlong	#83, local04
0b768     03 00 00 FF 
0b76c     00 E4 05 F1 | 	add	objptr, ##1536
0b770     F2 2C 02 FB | 	rdlong	local04, objptr
0b774     01 2C 06 F1 | 	add	local04, #1
0b778     F2 2C 62 FC | 	wrlong	local04, objptr
0b77c     4A 00 00 FF 
0b780     7C E4 85 F1 | 	sub	objptr, ##38012
0b784     01 26 06 F1 | 	add	local01, #1
0b788     08 00 90 FD | 	jmp	#LR__0952
0b78c                 | LR__0951
0b78c                 | '       return 17
0b78c     11 FA 05 F6 | 	mov	result1, #17
0b790     5C 04 90 FD | 	jmp	#LR__0965
0b794                 | LR__0952
0b794     01 2A 06 F1 | 	add	local03, #1
0b798                 | '     i+=1
0b798                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b798     15 2D 02 F6 | 	mov	local04, local03
0b79c     03 2C 66 F0 | 	shl	local04, #3
0b7a0     35 00 00 FF 
0b7a4     0C E4 05 F1 | 	add	objptr, ##27148
0b7a8     F2 2C 02 F1 | 	add	local04, objptr
0b7ac     04 2C 06 F1 | 	add	local04, #4
0b7b0     16 2D 02 FB | 	rdlong	local04, local04
0b7b4     11 2C 0E F2 | 	cmp	local04, #17 wz
0b7b8     35 00 00 FF 
0b7bc     0C E4 85 F1 | 	sub	objptr, ##27148
0b7c0     30 00 90 AD |  if_e	jmp	#LR__0953
0b7c4     15 2D 02 F6 | 	mov	local04, local03
0b7c8     03 2C 66 F0 | 	shl	local04, #3
0b7cc     35 00 00 FF 
0b7d0     0C E4 05 F1 | 	add	objptr, ##27148
0b7d4     F2 2C 02 F1 | 	add	local04, objptr
0b7d8     04 2C 06 F1 | 	add	local04, #4
0b7dc     16 2D 02 FB | 	rdlong	local04, local04
0b7e0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b7e4     35 00 00 FF 
0b7e8     0C E4 85 F1 | 	sub	objptr, ##27148
0b7ec     15 FA 05 56 |  if_ne	mov	result1, #21
0b7f0     FC 03 90 5D |  if_ne	jmp	#LR__0965
0b7f4                 | LR__0953
0b7f4                 | '     if lparts(i).token=token_end then exit loop
0b7f4     15 2D 02 F6 | 	mov	local04, local03
0b7f8     03 2C 66 F0 | 	shl	local04, #3
0b7fc     35 00 00 FF 
0b800     0C E4 05 F1 | 	add	objptr, ##27148
0b804     F2 2C 02 F1 | 	add	local04, objptr
0b808     04 2C 06 F1 | 	add	local04, #4
0b80c     16 2D 02 FB | 	rdlong	local04, local04
0b810     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b814     35 00 00 FF 
0b818     0C E4 85 F1 | 	sub	objptr, ##27148
0b81c     30 00 90 AD |  if_e	jmp	#LR__0954
0b820     01 2A 06 F1 | 	add	local03, #1
0b824     15 2D 02 F6 | 	mov	local04, local03
0b828     03 2C 66 F0 | 	shl	local04, #3
0b82c     35 00 00 FF 
0b830     0C E4 05 F1 | 	add	objptr, ##27148
0b834     F2 2C 02 F1 | 	add	local04, objptr
0b838     04 2C 06 F1 | 	add	local04, #4
0b83c     16 2D 02 FB | 	rdlong	local04, local04
0b840     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b844     35 00 00 FF 
0b848     0C E4 85 F1 | 	sub	objptr, ##27148
0b84c     30 FE 9F 5D |  if_ne	jmp	#LR__0950
0b850                 | LR__0954
0b850     14 2D 02 F6 | 	mov	local04, local02
0b854     01 2C 66 F0 | 	shl	local04, #1
0b858     14 2D 02 F1 | 	add	local04, local02
0b85c     02 2C 66 F0 | 	shl	local04, #2
0b860     47 00 00 FF 
0b864     7C E4 05 F1 | 	add	objptr, ##36476
0b868     F2 2C 02 F1 | 	add	local04, objptr
0b86c     04 2C 06 F1 | 	add	local04, #4
0b870     16 03 68 FC | 	wrlong	#1, local04
0b874     47 00 00 FF 
0b878     7C E4 85 F1 | 	sub	objptr, ##36476
0b87c                 | LR__0955
0b87c                 | ' 
0b87c                 | ' if lparts(ct).part$="gosub" then
0b87c     37 00 00 FF 
0b880     44 E4 05 F1 | 	add	objptr, ##28228
0b884     F2 2A 02 FB | 	rdlong	local03, objptr
0b888     03 2A 66 F0 | 	shl	local03, #3
0b88c     02 00 00 FF 
0b890     38 E4 85 F1 | 	sub	objptr, ##1080
0b894     F2 2A 02 F1 | 	add	local03, objptr
0b898     15 13 02 FB | 	rdlong	arg01, local03
0b89c     BB 01 00 FF 
0b8a0     78 15 06 F6 | 	mov	arg02, ##@LR__5900
0b8a4     35 00 00 FF 
0b8a8     0C E4 85 F1 | 	sub	objptr, ##27148
0b8ac     30 BC B1 FD | 	call	#__system___string_cmp
0b8b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0b8b4     84 02 90 5D |  if_ne	jmp	#LR__0961
0b8b8     37 00 00 FF 
0b8bc     44 E4 05 F1 | 	add	objptr, ##28228
0b8c0     F2 2A 02 FB | 	rdlong	local03, objptr
0b8c4     37 00 00 FF 
0b8c8     44 E4 85 F1 | 	sub	objptr, ##28228
0b8cc     01 2A 06 F1 | 	add	local03, #1
0b8d0                 | '   i=ct+1
0b8d0                 | '   do
0b8d0                 | LR__0956
0b8d0                 | '     if lparts(i).token=token_decimal then
0b8d0     15 2D 02 F6 | 	mov	local04, local03
0b8d4     03 2C 66 F0 | 	shl	local04, #3
0b8d8     35 00 00 FF 
0b8dc     0C E4 05 F1 | 	add	objptr, ##27148
0b8e0     F2 2C 02 F1 | 	add	local04, objptr
0b8e4     04 2C 06 F1 | 	add	local04, #4
0b8e8     16 2D 02 FB | 	rdlong	local04, local04
0b8ec     01 00 00 FF 
0b8f0     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b8f4     35 00 00 FF 
0b8f8     0C E4 85 F1 | 	sub	objptr, ##27148
0b8fc     4C 01 90 5D |  if_ne	jmp	#LR__0957
0b900     4A 00 00 FF 
0b904     7C E4 05 F1 | 	add	objptr, ##38012
0b908     F2 FA 01 FB | 	rdlong	result1, objptr
0b90c     FD 2C 02 F6 | 	mov	local04, result1
0b910     01 2C 66 F0 | 	shl	local04, #1
0b914     FD 2C 02 F1 | 	add	local04, result1
0b918     02 2C 66 F0 | 	shl	local04, #2
0b91c     03 00 00 FF 
0b920     00 E4 85 F1 | 	sub	objptr, ##1536
0b924     F2 2C 02 F1 | 	add	local04, objptr
0b928     08 2C 06 F1 | 	add	local04, #8
0b92c     16 53 69 FC | 	wrlong	#169, local04
0b930     03 00 00 FF 
0b934     00 E4 05 F1 | 	add	objptr, ##1536
0b938     F2 FA 01 FB | 	rdlong	result1, objptr
0b93c     01 FA 05 F1 | 	add	result1, #1
0b940     F2 FA 61 FC | 	wrlong	result1, objptr
0b944     FD 2C 02 F6 | 	mov	local04, result1
0b948     01 2C 66 F0 | 	shl	local04, #1
0b94c     FD 2C 02 F1 | 	add	local04, result1
0b950     02 2C 66 F0 | 	shl	local04, #2
0b954     03 00 00 FF 
0b958     00 E4 85 F1 | 	sub	objptr, ##1536
0b95c     F2 2C 02 F1 | 	add	local04, objptr
0b960     00 00 C0 FF 
0b964     16 01 68 FC | 	wrlong	##-2147483648, local04
0b968     03 00 00 FF 
0b96c     00 E4 05 F1 | 	add	objptr, ##1536
0b970     F2 FA 01 FB | 	rdlong	result1, objptr
0b974     FD 2C 02 F6 | 	mov	local04, result1
0b978     01 2C 66 F0 | 	shl	local04, #1
0b97c     FD 2C 02 F1 | 	add	local04, result1
0b980     02 2C 66 F0 | 	shl	local04, #2
0b984     03 00 00 FF 
0b988     00 E4 85 F1 | 	sub	objptr, ##1536
0b98c     F2 2C 02 F1 | 	add	local04, objptr
0b990     15 13 02 F6 | 	mov	arg01, local03
0b994     03 12 66 F0 | 	shl	arg01, #3
0b998     12 00 00 FF 
0b99c     70 E4 85 F1 | 	sub	objptr, ##9328
0b9a0     F2 12 02 F1 | 	add	arg01, objptr
0b9a4     09 13 02 FB | 	rdlong	arg01, arg01
0b9a8     00 14 06 F6 | 	mov	arg02, #0
0b9ac     35 00 00 FF 
0b9b0     0C E4 85 F1 | 	sub	objptr, ##27148
0b9b4     F4 EF B1 FD | 	call	#__system____builtin_atoi
0b9b8     04 2C 06 F1 | 	add	local04, #4
0b9bc     16 FB 61 FC | 	wrlong	result1, local04
0b9c0     4A 00 00 FF 
0b9c4     7C E4 05 F1 | 	add	objptr, ##38012
0b9c8     F2 12 02 FB | 	rdlong	arg01, objptr
0b9cc     09 2D 02 F6 | 	mov	local04, arg01
0b9d0     01 2C 66 F0 | 	shl	local04, #1
0b9d4     09 2D 02 F1 | 	add	local04, arg01
0b9d8     02 2C 66 F0 | 	shl	local04, #2
0b9dc     03 00 00 FF 
0b9e0     00 E4 85 F1 | 	sub	objptr, ##1536
0b9e4     F2 2C 02 F1 | 	add	local04, objptr
0b9e8     08 2C 06 F1 | 	add	local04, #8
0b9ec     16 A7 68 FC | 	wrlong	#83, local04
0b9f0     03 00 00 FF 
0b9f4     00 E4 05 F1 | 	add	objptr, ##1536
0b9f8     F2 12 02 FB | 	rdlong	arg01, objptr
0b9fc     01 12 06 F1 | 	add	arg01, #1
0ba00     F2 12 62 FC | 	wrlong	arg01, objptr
0ba04     01 26 06 F1 | 	add	local01, #1
0ba08     09 2D 02 F6 | 	mov	local04, arg01
0ba0c     01 2C 66 F0 | 	shl	local04, #1
0ba10     09 2D 02 F1 | 	add	local04, arg01
0ba14     02 2C 66 F0 | 	shl	local04, #2
0ba18     03 00 00 FF 
0ba1c     00 E4 85 F1 | 	sub	objptr, ##1536
0ba20     F2 2C 02 F1 | 	add	local04, objptr
0ba24     08 2C 06 F1 | 	add	local04, #8
0ba28     16 5B 68 FC | 	wrlong	#45, local04
0ba2c     03 00 00 FF 
0ba30     00 E4 05 F1 | 	add	objptr, ##1536
0ba34     F2 2C 02 FB | 	rdlong	local04, objptr
0ba38     01 2C 06 F1 | 	add	local04, #1
0ba3c     F2 2C 62 FC | 	wrlong	local04, objptr
0ba40     4A 00 00 FF 
0ba44     7C E4 85 F1 | 	sub	objptr, ##38012
0ba48     08 00 90 FD | 	jmp	#LR__0958
0ba4c                 | LR__0957
0ba4c                 | '       return 17
0ba4c     11 FA 05 F6 | 	mov	result1, #17
0ba50     9C 01 90 FD | 	jmp	#LR__0965
0ba54                 | LR__0958
0ba54     01 2A 06 F1 | 	add	local03, #1
0ba58                 | '     i+=1
0ba58                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0ba58     15 2D 02 F6 | 	mov	local04, local03
0ba5c     03 2C 66 F0 | 	shl	local04, #3
0ba60     35 00 00 FF 
0ba64     0C E4 05 F1 | 	add	objptr, ##27148
0ba68     F2 2C 02 F1 | 	add	local04, objptr
0ba6c     04 2C 06 F1 | 	add	local04, #4
0ba70     16 2D 02 FB | 	rdlong	local04, local04
0ba74     11 2C 0E F2 | 	cmp	local04, #17 wz
0ba78     35 00 00 FF 
0ba7c     0C E4 85 F1 | 	sub	objptr, ##27148
0ba80     30 00 90 AD |  if_e	jmp	#LR__0959
0ba84     15 2D 02 F6 | 	mov	local04, local03
0ba88     03 2C 66 F0 | 	shl	local04, #3
0ba8c     35 00 00 FF 
0ba90     0C E4 05 F1 | 	add	objptr, ##27148
0ba94     F2 2C 02 F1 | 	add	local04, objptr
0ba98     04 2C 06 F1 | 	add	local04, #4
0ba9c     16 2D 02 FB | 	rdlong	local04, local04
0baa0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0baa4     35 00 00 FF 
0baa8     0C E4 85 F1 | 	sub	objptr, ##27148
0baac     15 FA 05 56 |  if_ne	mov	result1, #21
0bab0     3C 01 90 5D |  if_ne	jmp	#LR__0965
0bab4                 | LR__0959
0bab4                 | '     if lparts(i).token=token_end then exit loop
0bab4     15 2D 02 F6 | 	mov	local04, local03
0bab8     03 2C 66 F0 | 	shl	local04, #3
0babc     35 00 00 FF 
0bac0     0C E4 05 F1 | 	add	objptr, ##27148
0bac4     F2 2C 02 F1 | 	add	local04, objptr
0bac8     04 2C 06 F1 | 	add	local04, #4
0bacc     16 2D 02 FB | 	rdlong	local04, local04
0bad0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bad4     35 00 00 FF 
0bad8     0C E4 85 F1 | 	sub	objptr, ##27148
0badc     30 00 90 AD |  if_e	jmp	#LR__0960
0bae0     01 2A 06 F1 | 	add	local03, #1
0bae4     15 2D 02 F6 | 	mov	local04, local03
0bae8     03 2C 66 F0 | 	shl	local04, #3
0baec     35 00 00 FF 
0baf0     0C E4 05 F1 | 	add	objptr, ##27148
0baf4     F2 2C 02 F1 | 	add	local04, objptr
0baf8     04 2C 06 F1 | 	add	local04, #4
0bafc     16 2D 02 FB | 	rdlong	local04, local04
0bb00     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bb04     35 00 00 FF 
0bb08     0C E4 85 F1 | 	sub	objptr, ##27148
0bb0c     C0 FD 9F 5D |  if_ne	jmp	#LR__0956
0bb10                 | LR__0960
0bb10     14 2D 02 F6 | 	mov	local04, local02
0bb14     01 2C 66 F0 | 	shl	local04, #1
0bb18     14 2D 02 F1 | 	add	local04, local02
0bb1c     02 2C 66 F0 | 	shl	local04, #2
0bb20     47 00 00 FF 
0bb24     7C E4 05 F1 | 	add	objptr, ##36476
0bb28     F2 2C 02 F1 | 	add	local04, objptr
0bb2c     04 2C 06 F1 | 	add	local04, #4
0bb30     16 07 68 FC | 	wrlong	#3, local04
0bb34     47 00 00 FF 
0bb38     7C E4 85 F1 | 	sub	objptr, ##36476
0bb3c                 | LR__0961
0bb3c     14 2B 02 F6 | 	mov	local03, local02
0bb40     01 2A 66 F0 | 	shl	local03, #1
0bb44     14 2B 02 F1 | 	add	local03, local02
0bb48     02 2A 66 F0 | 	shl	local03, #2
0bb4c     47 00 00 FF 
0bb50     7C E4 05 F1 | 	add	objptr, ##36476
0bb54     F2 2A 02 F1 | 	add	local03, objptr
0bb58     15 27 62 FC | 	wrlong	local01, local03
0bb5c                 | ' compiledline(onlineptr).result.uresult=numpar
0bb5c                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0bb5c     03 00 00 FF 
0bb60     00 E4 05 F1 | 	add	objptr, ##1536
0bb64     F2 2A 02 FB | 	rdlong	local03, objptr
0bb68     4A 00 00 FF 
0bb6c     7C E4 85 F1 | 	sub	objptr, ##38012
0bb70     97 3C 48 FB | 	callpa	#(@LR__0964-@LR__0962)>>2,fcache_load_ptr_
0bb74                 | LR__0962
0bb74     15 2D 02 F6 | 	mov	local04, local03
0bb78     01 2C 66 F0 | 	shl	local04, #1
0bb7c     15 2D 02 F1 | 	add	local04, local03
0bb80     02 2C 66 F0 | 	shl	local04, #2
0bb84     47 00 00 FF 
0bb88     7C E4 05 F1 | 	add	objptr, ##36476
0bb8c     F2 2C 02 F1 | 	add	local04, objptr
0bb90     08 2C 06 F1 | 	add	local04, #8
0bb94     16 2D 02 FB | 	rdlong	local04, local04
0bb98     2D 2C 0E F2 | 	cmp	local04, #45 wz
0bb9c     47 00 00 FF 
0bba0     7C E4 85 F1 | 	sub	objptr, ##36476
0bba4     38 00 90 5D |  if_ne	jmp	#LR__0963
0bba8     15 2D 02 F6 | 	mov	local04, local03
0bbac     01 2C 66 F0 | 	shl	local04, #1
0bbb0     15 2D 02 F1 | 	add	local04, local03
0bbb4     02 2C 66 F0 | 	shl	local04, #2
0bbb8     47 00 00 FF 
0bbbc     7C E4 05 F1 | 	add	objptr, ##36476
0bbc0     F2 2C 02 F1 | 	add	local04, objptr
0bbc4     03 00 00 FF 
0bbc8     00 E4 05 F1 | 	add	objptr, ##1536
0bbcc     F2 26 02 FB | 	rdlong	local01, objptr
0bbd0     4A 00 00 FF 
0bbd4     7C E4 85 F1 | 	sub	objptr, ##38012
0bbd8     02 26 86 F1 | 	sub	local01, #2
0bbdc     16 27 62 FC | 	wrlong	local01, local04
0bbe0                 | LR__0963
0bbe0     01 2A 86 F1 | 	sub	local03, #1
0bbe4     14 2B 52 F2 | 	cmps	local03, local02 wc
0bbe8     88 FF 9F 3D |  if_ae	jmp	#LR__0962
0bbec                 | LR__0964
0bbec                 | ' return 0
0bbec     00 FA 05 F6 | 	mov	result1, #0
0bbf0                 | LR__0965
0bbf0     A7 F0 03 F6 | 	mov	ptra, fp
0bbf4     B2 00 A0 FD | 	call	#popregs_
0bbf8                 | _compile_on_ret
0bbf8     2D 00 64 FD | 	ret
0bbfc                 | 
0bbfc                 | ' 
0bbfc                 | ' '----- A helper for compile_input and compile_read
0bbfc                 | '  
0bbfc                 | ' function getaddr() as ulong
0bbfc                 | _getaddr
0bbfc     0B 4A 05 F6 | 	mov	COUNT_, #11
0bc00     A8 00 A0 FD | 	call	#pushregs_
0bc04     37 00 00 FF 
0bc08     44 E4 05 F1 | 	add	objptr, ##28228
0bc0c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc10     03 2C 66 F0 | 	shl	local04, #3
0bc14     02 00 00 FF 
0bc18     38 E4 85 F1 | 	sub	objptr, ##1080
0bc1c     F2 2C 02 F1 | 	add	local04, objptr
0bc20     16 2F 02 FB | 	rdlong	local05, local04
0bc24     01 30 66 F6 | 	neg	local06, #1
0bc28                 | ' 
0bc28                 | ' varname$=lparts(ct).part$
0bc28                 | ' j=-1
0bc28                 | ' 
0bc28                 | ' for i=0 to varnum-1
0bc28     00 32 06 F6 | 	mov	local07, #0
0bc2c     04 E4 85 F1 | 	sub	objptr, #4
0bc30     F2 34 02 FB | 	rdlong	local08, objptr
0bc34     35 00 00 FF 
0bc38     08 E4 85 F1 | 	sub	objptr, ##27144
0bc3c                 | LR__0970
0bc3c     1A 33 52 F2 | 	cmps	local07, local08 wc
0bc40     38 00 90 3D |  if_ae	jmp	#LR__0971
0bc44                 | '   if variables(i).name=varname$ then j=i : exit
0bc44     19 2D 02 F6 | 	mov	local04, local07
0bc48     04 2C 66 F0 | 	shl	local04, #4
0bc4c     14 00 00 FF 
0bc50     F8 E5 05 F1 | 	add	objptr, ##10744
0bc54     F2 2C 02 F1 | 	add	local04, objptr
0bc58     16 13 02 FB | 	rdlong	arg01, local04
0bc5c     17 15 02 F6 | 	mov	arg02, local05
0bc60     14 00 00 FF 
0bc64     F8 E5 85 F1 | 	sub	objptr, ##10744
0bc68     74 B8 B1 FD | 	call	#__system___string_cmp
0bc6c     00 FA 0D F2 | 	cmp	result1, #0 wz
0bc70     19 31 02 A6 |  if_e	mov	local06, local07
0bc74     01 32 06 51 |  if_ne	add	local07, #1
0bc78     C0 FF 9F 5D |  if_ne	jmp	#LR__0970
0bc7c                 | LR__0971
0bc7c                 | ' if  j=-1 andalso varnum<maxvars then   
0bc7c     FF FF 7F FF 
0bc80     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0bc84     A8 00 90 5D |  if_ne	jmp	#LR__0972
0bc88     35 00 00 FF 
0bc8c     08 E4 05 F1 | 	add	objptr, ##27144
0bc90     F2 34 02 FB | 	rdlong	local08, objptr
0bc94     35 00 00 FF 
0bc98     08 E4 85 F1 | 	sub	objptr, ##27144
0bc9c     02 00 00 FF 
0bca0     00 34 56 F2 | 	cmps	local08, ##1024 wc
0bca4     88 00 90 3D |  if_ae	jmp	#LR__0972
0bca8     35 00 00 FF 
0bcac     08 E4 05 F1 | 	add	objptr, ##27144
0bcb0     F2 2C 02 FB | 	rdlong	local04, objptr
0bcb4     04 2C 66 F0 | 	shl	local04, #4
0bcb8     20 00 00 FF 
0bcbc     10 E4 85 F1 | 	sub	objptr, ##16400
0bcc0     F2 2C 02 F1 | 	add	local04, objptr
0bcc4     16 2F 62 FC | 	wrlong	local05, local04
0bcc8     20 00 00 FF 
0bccc     10 E4 05 F1 | 	add	objptr, ##16400
0bcd0     F2 2C 02 FB | 	rdlong	local04, objptr
0bcd4     04 2C 66 F0 | 	shl	local04, #4
0bcd8     20 00 00 FF 
0bcdc     10 E4 85 F1 | 	sub	objptr, ##16400
0bce0     F2 2C 02 F1 | 	add	local04, objptr
0bce4     04 2C 06 F1 | 	add	local04, #4
0bce8     16 01 68 FC | 	wrlong	#0, local04
0bcec     20 00 00 FF 
0bcf0     10 E4 05 F1 | 	add	objptr, ##16400
0bcf4     F2 2C 02 FB | 	rdlong	local04, objptr
0bcf8     04 2C 66 F0 | 	shl	local04, #4
0bcfc     20 00 00 FF 
0bd00     10 E4 85 F1 | 	sub	objptr, ##16400
0bd04     F2 2C 02 F1 | 	add	local04, objptr
0bd08     0C 2C 06 F1 | 	add	local04, #12
0bd0c     16 39 68 FC | 	wrlong	#28, local04
0bd10     20 00 00 FF 
0bd14     10 E4 05 F1 | 	add	objptr, ##16400
0bd18     F2 34 02 FB | 	rdlong	local08, objptr
0bd1c     1A 31 02 F6 | 	mov	local06, local08
0bd20     01 34 06 F1 | 	add	local08, #1
0bd24     F2 34 62 FC | 	wrlong	local08, objptr
0bd28     35 00 00 FF 
0bd2c     08 E4 85 F1 | 	sub	objptr, ##27144
0bd30                 | LR__0972
0bd30     00 34 06 F6 | 	mov	local08, #0
0bd34                 | ' numpar=0
0bd34                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bd34     37 00 00 FF 
0bd38     44 E4 05 F1 | 	add	objptr, ##28228
0bd3c     F2 2C 02 FB | 	rdlong	local04, objptr
0bd40     01 2C 06 F1 | 	add	local04, #1
0bd44     03 2C 66 F0 | 	shl	local04, #3
0bd48     02 00 00 FF 
0bd4c     38 E4 85 F1 | 	sub	objptr, ##1080
0bd50     F2 2C 02 F1 | 	add	local04, objptr
0bd54     04 2C 06 F1 | 	add	local04, #4
0bd58     16 33 02 FB | 	rdlong	local07, local04
0bd5c     15 32 0E F2 | 	cmp	local07, #21 wz
0bd60     35 00 00 FF 
0bd64     0C E4 85 F1 | 	sub	objptr, ##27148
0bd68     54 01 90 5D |  if_ne	jmp	#LR__0977
0bd6c     37 00 00 FF 
0bd70     44 E4 05 F1 | 	add	objptr, ##28228
0bd74     F2 36 02 FB | 	rdlong	local09, objptr
0bd78     01 36 06 F1 | 	add	local09, #1
0bd7c     F2 36 62 FC | 	wrlong	local09, objptr
0bd80     37 00 00 FF 
0bd84     44 E4 85 F1 | 	sub	objptr, ##28228
0bd88                 | '   ct+=1 											' omit this lpar, this is for expr list
0bd88                 | '   do
0bd88                 | LR__0973
0bd88     37 00 00 FF 
0bd8c     44 E4 05 F1 | 	add	objptr, ##28228
0bd90     F2 2C 02 FB | 	rdlong	local04, objptr
0bd94     01 2C 06 F1 | 	add	local04, #1
0bd98     F2 2C 62 FC | 	wrlong	local04, objptr
0bd9c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bd9c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bd9c     03 2C 66 F0 | 	shl	local04, #3
0bda0     02 00 00 FF 
0bda4     38 E4 85 F1 | 	sub	objptr, ##1080
0bda8     F2 2C 02 F1 | 	add	local04, objptr
0bdac     04 2C 06 F1 | 	add	local04, #4
0bdb0     16 37 02 FB | 	rdlong	local09, local04
0bdb4     15 36 0E F2 | 	cmp	local09, #21 wz
0bdb8     35 00 00 FF 
0bdbc     0C E4 85 F1 | 	sub	objptr, ##27148
0bdc0     44 00 90 5D |  if_ne	jmp	#LR__0974
0bdc4     37 00 00 FF 
0bdc8     44 E4 05 F1 | 	add	objptr, ##28228
0bdcc     F2 36 02 FB | 	rdlong	local09, objptr
0bdd0     01 36 06 F1 | 	add	local09, #1
0bdd4     F2 36 62 FC | 	wrlong	local09, objptr
0bdd8     37 00 00 FF 
0bddc     44 E4 85 F1 | 	sub	objptr, ##28228
0bde0     AC 01 B0 FD | 	call	#_expr
0bde4     FD 38 02 F6 | 	mov	local10, result1
0bde8     37 00 00 FF 
0bdec     44 E4 05 F1 | 	add	objptr, ##28228
0bdf0     F2 36 02 FB | 	rdlong	local09, objptr
0bdf4     01 36 06 F1 | 	add	local09, #1
0bdf8     F2 36 62 FC | 	wrlong	local09, objptr
0bdfc     37 00 00 FF 
0be00     44 E4 85 F1 | 	sub	objptr, ##28228
0be04     08 00 90 FD | 	jmp	#LR__0975
0be08                 | LR__0974
0be08     84 01 B0 FD | 	call	#_expr
0be0c     FD 38 02 F6 | 	mov	local10, result1
0be10                 | LR__0975
0be10                 | '     if err>0 then return err
0be10     01 38 56 F2 | 	cmps	local10, #1 wc
0be14     1C FB 01 36 |  if_ae	mov	result1, local10
0be18     68 01 90 3D |  if_ae	jmp	#LR__0978
0be1c     01 34 06 F1 | 	add	local08, #1
0be20     37 00 00 FF 
0be24     44 E4 05 F1 | 	add	objptr, ##28228
0be28     F2 2C 02 FB | 	rdlong	local04, objptr
0be2c     03 2C 66 F0 | 	shl	local04, #3
0be30     02 00 00 FF 
0be34     38 E4 85 F1 | 	sub	objptr, ##1080
0be38     F2 2C 02 F1 | 	add	local04, objptr
0be3c     04 2C 06 F1 | 	add	local04, #4
0be40     16 39 02 FB | 	rdlong	local10, local04
0be44     14 38 0E F2 | 	cmp	local10, #20 wz
0be48     35 00 00 FF 
0be4c     0C E4 85 F1 | 	sub	objptr, ##27148
0be50     34 00 90 AD |  if_e	jmp	#LR__0976
0be54     37 00 00 FF 
0be58     44 E4 05 F1 | 	add	objptr, ##28228
0be5c     F2 38 02 FB | 	rdlong	local10, objptr
0be60     03 38 66 F0 | 	shl	local10, #3
0be64     02 00 00 FF 
0be68     38 E4 85 F1 | 	sub	objptr, ##1080
0be6c     F2 38 02 F1 | 	add	local10, objptr
0be70     04 38 06 F1 | 	add	local10, #4
0be74     1C 39 02 FB | 	rdlong	local10, local10
0be78     FE 39 0E F2 | 	cmp	local10, #510 wz
0be7c     35 00 00 FF 
0be80     0C E4 85 F1 | 	sub	objptr, ##27148
0be84     00 FF 9F 5D |  if_ne	jmp	#LR__0973
0be88                 | LR__0976
0be88                 | '     if lparts(ct).token=token_end then return 14
0be88     37 00 00 FF 
0be8c     44 E4 05 F1 | 	add	objptr, ##28228
0be90     F2 2C 02 FB | 	rdlong	local04, objptr
0be94     03 2C 66 F0 | 	shl	local04, #3
0be98     02 00 00 FF 
0be9c     38 E4 85 F1 | 	sub	objptr, ##1080
0bea0     F2 2C 02 F1 | 	add	local04, objptr
0bea4     04 2C 06 F1 | 	add	local04, #4
0bea8     16 39 02 FB | 	rdlong	local10, local04
0beac     FE 39 0E F2 | 	cmp	local10, #510 wz
0beb0     35 00 00 FF 
0beb4     0C E4 85 F1 | 	sub	objptr, ##27148
0beb8     0E FA 05 A6 |  if_e	mov	result1, #14
0bebc     C4 00 90 AD |  if_e	jmp	#LR__0978
0bec0                 | LR__0977
0bec0     1A 29 02 F6 | 	mov	local02, local08
0bec4     12 2A 06 F6 | 	mov	local03, #18
0bec8     18 27 02 F6 | 	mov	local01, local06
0becc     13 37 02 F6 | 	mov	local09, local01
0bed0     14 3B 02 F6 | 	mov	local11, local02
0bed4     15 27 02 F6 | 	mov	local01, local03
0bed8     4A 00 00 FF 
0bedc     7C E4 05 F1 | 	add	objptr, ##38012
0bee0     F2 38 02 FB | 	rdlong	local10, objptr
0bee4     1C 35 02 F6 | 	mov	local08, local10
0bee8     01 34 66 F0 | 	shl	local08, #1
0beec     1C 35 02 F1 | 	add	local08, local10
0bef0     02 34 66 F0 | 	shl	local08, #2
0bef4     03 00 00 FF 
0bef8     00 E4 85 F1 | 	sub	objptr, ##1536
0befc     F2 34 02 F1 | 	add	local08, objptr
0bf00     1A 37 62 FC | 	wrlong	local09, local08
0bf04     03 00 00 FF 
0bf08     00 E4 05 F1 | 	add	objptr, ##1536
0bf0c     F2 38 02 FB | 	rdlong	local10, objptr
0bf10     1C 37 02 F6 | 	mov	local09, local10
0bf14     01 36 66 F0 | 	shl	local09, #1
0bf18     1C 37 02 F1 | 	add	local09, local10
0bf1c     02 36 66 F0 | 	shl	local09, #2
0bf20     03 00 00 FF 
0bf24     00 E4 85 F1 | 	sub	objptr, ##1536
0bf28     F2 36 02 F1 | 	add	local09, objptr
0bf2c     04 36 06 F1 | 	add	local09, #4
0bf30     1B 3B 62 FC | 	wrlong	local11, local09
0bf34     03 00 00 FF 
0bf38     00 E4 05 F1 | 	add	objptr, ##1536
0bf3c     F2 3A 02 FB | 	rdlong	local11, objptr
0bf40     1D 39 02 F6 | 	mov	local10, local11
0bf44     01 38 66 F0 | 	shl	local10, #1
0bf48     1D 39 02 F1 | 	add	local10, local11
0bf4c     02 38 66 F0 | 	shl	local10, #2
0bf50     03 00 00 FF 
0bf54     00 E4 85 F1 | 	sub	objptr, ##1536
0bf58     F2 38 02 F1 | 	add	local10, objptr
0bf5c     08 38 06 F1 | 	add	local10, #8
0bf60     1C 27 62 FC | 	wrlong	local01, local10
0bf64     03 00 00 FF 
0bf68     00 E4 05 F1 | 	add	objptr, ##1536
0bf6c     F2 36 02 FB | 	rdlong	local09, objptr
0bf70     01 36 06 F1 | 	add	local09, #1
0bf74     F2 36 62 FC | 	wrlong	local09, objptr
0bf78     4A 00 00 FF 
0bf7c     7C E4 85 F1 | 	sub	objptr, ##38012
0bf80                 | ' t2.result.twowords(1)=numpar
0bf80                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bf80                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bf80                 | ' return 0
0bf80     00 FA 05 F6 | 	mov	result1, #0
0bf84                 | LR__0978
0bf84     A7 F0 03 F6 | 	mov	ptra, fp
0bf88     B2 00 A0 FD | 	call	#popregs_
0bf8c                 | _getaddr_ret
0bf8c     2D 00 64 FD | 	ret
0bf90                 | 
0bf90                 | ' 
0bf90                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf90                 | ' '--------------------------------------------- 
0bf90                 | ' 
0bf90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bf90                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0bf90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bf90                 | ' 
0bf90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bf90                 | ' '
0bf90                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0bf90                 | ' '
0bf90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bf90                 | ' 
0bf90                 | ' function expr() as ulong 
0bf90                 | _expr
0bf90     07 4A 05 F6 | 	mov	COUNT_, #7
0bf94     A8 00 A0 FD | 	call	#pushregs_
0bf98                 | _expr_enter
0bf98     37 00 00 FF 
0bf9c     44 E4 05 F1 | 	add	objptr, ##28228
0bfa0     F2 2C 02 FB | 	rdlong	local04, objptr
0bfa4     03 2C 66 F0 | 	shl	local04, #3
0bfa8     02 00 00 FF 
0bfac     38 E4 85 F1 | 	sub	objptr, ##1080
0bfb0     F2 2C 02 F1 | 	add	local04, objptr
0bfb4     04 2C 06 F1 | 	add	local04, #4
0bfb8     16 2F 02 FB | 	rdlong	local05, local04
0bfbc                 | ' 
0bfbc                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0bfbc     FE 2F 0E F2 | 	cmp	local05, #510 wz
0bfc0     35 00 00 FF 
0bfc4     0C E4 85 F1 | 	sub	objptr, ##27148
0bfc8     C4 00 90 5D |  if_ne	jmp	#LR__0980
0bfcc     1D 26 06 F6 | 	mov	local01, #29
0bfd0     FF 2A 06 F6 | 	mov	local03, #255
0bfd4     13 31 02 F6 | 	mov	local06, local01
0bfd8     14 33 02 F6 | 	mov	local07, local02
0bfdc     15 27 02 F6 | 	mov	local01, local03
0bfe0     4A 00 00 FF 
0bfe4     7C E4 05 F1 | 	add	objptr, ##38012
0bfe8     F2 2E 02 FB | 	rdlong	local05, objptr
0bfec     17 2D 02 F6 | 	mov	local04, local05
0bff0     01 2C 66 F0 | 	shl	local04, #1
0bff4     17 2D 02 F1 | 	add	local04, local05
0bff8     02 2C 66 F0 | 	shl	local04, #2
0bffc     03 00 00 FF 
0c000     00 E4 85 F1 | 	sub	objptr, ##1536
0c004     F2 2C 02 F1 | 	add	local04, objptr
0c008     16 31 62 FC | 	wrlong	local06, local04
0c00c     03 00 00 FF 
0c010     00 E4 05 F1 | 	add	objptr, ##1536
0c014     F2 30 02 FB | 	rdlong	local06, objptr
0c018     18 2F 02 F6 | 	mov	local05, local06
0c01c     01 2E 66 F0 | 	shl	local05, #1
0c020     18 2F 02 F1 | 	add	local05, local06
0c024     02 2E 66 F0 | 	shl	local05, #2
0c028     03 00 00 FF 
0c02c     00 E4 85 F1 | 	sub	objptr, ##1536
0c030     F2 2E 02 F1 | 	add	local05, objptr
0c034     04 2E 06 F1 | 	add	local05, #4
0c038     17 33 62 FC | 	wrlong	local07, local05
0c03c     03 00 00 FF 
0c040     00 E4 05 F1 | 	add	objptr, ##1536
0c044     F2 32 02 FB | 	rdlong	local07, objptr
0c048     19 31 02 F6 | 	mov	local06, local07
0c04c     01 30 66 F0 | 	shl	local06, #1
0c050     19 31 02 F1 | 	add	local06, local07
0c054     02 30 66 F0 | 	shl	local06, #2
0c058     03 00 00 FF 
0c05c     00 E4 85 F1 | 	sub	objptr, ##1536
0c060     F2 30 02 F1 | 	add	local06, objptr
0c064     08 30 06 F1 | 	add	local06, #8
0c068     18 27 62 FC | 	wrlong	local01, local06
0c06c     03 00 00 FF 
0c070     00 E4 05 F1 | 	add	objptr, ##1536
0c074     F2 30 02 FB | 	rdlong	local06, objptr
0c078     01 30 06 F1 | 	add	local06, #1
0c07c     F2 30 62 FC | 	wrlong	local06, objptr
0c080     4A 00 00 FF 
0c084     7C E4 85 F1 | 	sub	objptr, ##38012
0c088     1D FA 05 F6 | 	mov	result1, #29
0c08c     64 01 90 FD | 	jmp	#LR__0983
0c090                 | LR__0980
0c090     00 26 06 F6 | 	mov	local01, #0
0c094     68 01 B0 FD | 	call	#_addsub
0c098                 | ' t3.result.uresult=0
0c098                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0c098                 | ' if err>0 then return err
0c098     01 FA 15 F2 | 	cmp	result1, #1 wc
0c09c     54 01 90 3D |  if_ae	jmp	#LR__0983
0c0a0     37 00 00 FF 
0c0a4     44 E4 05 F1 | 	add	objptr, ##28228
0c0a8     F2 2C 02 FB | 	rdlong	local04, objptr
0c0ac     03 2C 66 F0 | 	shl	local04, #3
0c0b0     02 00 00 FF 
0c0b4     38 E4 85 F1 | 	sub	objptr, ##1080
0c0b8     F2 2C 02 F1 | 	add	local04, objptr
0c0bc     04 2C 06 F1 | 	add	local04, #4
0c0c0     16 2F 02 FB | 	rdlong	local05, local04
0c0c4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0c0c4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0c0c4     35 00 00 FF 
0c0c8     0C E4 85 F1 | 	sub	objptr, ##27148
0c0cc                 | LR__0981
0c0cc     1B 2E 0E F2 | 	cmp	local05, #27 wz
0c0d0     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0c0d4     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0c0d8     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0c0dc     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0c0e0     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0c0e4     08 01 90 5D |  if_ne	jmp	#LR__0982
0c0e8     37 00 00 FF 
0c0ec     44 E4 05 F1 | 	add	objptr, ##28228
0c0f0     F2 30 02 FB | 	rdlong	local06, objptr
0c0f4     01 30 06 F1 | 	add	local06, #1
0c0f8     F2 30 62 FC | 	wrlong	local06, objptr
0c0fc     37 00 00 FF 
0c100     44 E4 85 F1 | 	sub	objptr, ##28228
0c104     F8 00 B0 FD | 	call	#_addsub
0c108                 | '   ct+=1
0c108                 | '   err=addsub() : if err>0 then return err
0c108     01 FA 15 F2 | 	cmp	result1, #1 wc
0c10c     E4 00 90 3D |  if_ae	jmp	#LR__0983
0c110     17 2B 02 F6 | 	mov	local03, local05
0c114     13 31 02 F6 | 	mov	local06, local01
0c118     14 33 02 F6 | 	mov	local07, local02
0c11c     15 2F 02 F6 | 	mov	local05, local03
0c120     4A 00 00 FF 
0c124     7C E4 05 F1 | 	add	objptr, ##38012
0c128     F2 2C 02 FB | 	rdlong	local04, objptr
0c12c     16 FB 01 F6 | 	mov	result1, local04
0c130     01 FA 65 F0 | 	shl	result1, #1
0c134     16 FB 01 F1 | 	add	result1, local04
0c138     02 FA 65 F0 | 	shl	result1, #2
0c13c     03 00 00 FF 
0c140     00 E4 85 F1 | 	sub	objptr, ##1536
0c144     F2 FA 01 F1 | 	add	result1, objptr
0c148     FD 30 62 FC | 	wrlong	local06, result1
0c14c     03 00 00 FF 
0c150     00 E4 05 F1 | 	add	objptr, ##1536
0c154     F2 30 02 FB | 	rdlong	local06, objptr
0c158     18 2D 02 F6 | 	mov	local04, local06
0c15c     01 2C 66 F0 | 	shl	local04, #1
0c160     18 2D 02 F1 | 	add	local04, local06
0c164     02 2C 66 F0 | 	shl	local04, #2
0c168     03 00 00 FF 
0c16c     00 E4 85 F1 | 	sub	objptr, ##1536
0c170     F2 2C 02 F1 | 	add	local04, objptr
0c174     04 2C 06 F1 | 	add	local04, #4
0c178     16 33 62 FC | 	wrlong	local07, local04
0c17c     03 00 00 FF 
0c180     00 E4 05 F1 | 	add	objptr, ##1536
0c184     F2 32 02 FB | 	rdlong	local07, objptr
0c188     19 31 02 F6 | 	mov	local06, local07
0c18c     01 30 66 F0 | 	shl	local06, #1
0c190     19 31 02 F1 | 	add	local06, local07
0c194     02 30 66 F0 | 	shl	local06, #2
0c198     03 00 00 FF 
0c19c     00 E4 85 F1 | 	sub	objptr, ##1536
0c1a0     F2 30 02 F1 | 	add	local06, objptr
0c1a4     08 30 06 F1 | 	add	local06, #8
0c1a8     18 2F 62 FC | 	wrlong	local05, local06
0c1ac     03 00 00 FF 
0c1b0     00 E4 05 F1 | 	add	objptr, ##1536
0c1b4     F2 30 02 FB | 	rdlong	local06, objptr
0c1b8     01 30 06 F1 | 	add	local06, #1
0c1bc     F2 30 62 FC | 	wrlong	local06, objptr
0c1c0     13 00 00 FF 
0c1c4     38 E4 85 F1 | 	sub	objptr, ##9784
0c1c8     F2 2C 02 FB | 	rdlong	local04, objptr
0c1cc     03 2C 66 F0 | 	shl	local04, #3
0c1d0     02 00 00 FF 
0c1d4     38 E4 85 F1 | 	sub	objptr, ##1080
0c1d8     F2 2C 02 F1 | 	add	local04, objptr
0c1dc     04 2C 06 F1 | 	add	local04, #4
0c1e0     16 2F 02 FB | 	rdlong	local05, local04
0c1e4     35 00 00 FF 
0c1e8     0C E4 85 F1 | 	sub	objptr, ##27148
0c1ec     DC FE 9F FD | 	jmp	#LR__0981
0c1f0                 | LR__0982
0c1f0                 | ' return 0  
0c1f0     00 FA 05 F6 | 	mov	result1, #0
0c1f4                 | LR__0983
0c1f4     A7 F0 03 F6 | 	mov	ptra, fp
0c1f8     B2 00 A0 FD | 	call	#popregs_
0c1fc                 | _expr_ret
0c1fc     2D 00 64 FD | 	ret
0c200                 | 
0c200                 | ' 
0c200                 | ' ' Second level operators : add, sub, logic
0c200                 | ' 
0c200                 | ' function addsub() as ulong
0c200                 | _addsub
0c200     07 4A 05 F6 | 	mov	COUNT_, #7
0c204     A8 00 A0 FD | 	call	#pushregs_
0c208                 | _addsub_enter
0c208     00 26 06 F6 | 	mov	local01, #0
0c20c     60 01 B0 FD | 	call	#_muldiv
0c210                 | ' 
0c210                 | ' t3.result.uresult=0
0c210                 | ' err=muldiv() : if err>0 then return err           			 
0c210     01 FA 15 F2 | 	cmp	result1, #1 wc
0c214     4C 01 90 3D |  if_ae	jmp	#LR__0992
0c218     37 00 00 FF 
0c21c     44 E4 05 F1 | 	add	objptr, ##28228
0c220     F2 2C 02 FB | 	rdlong	local04, objptr
0c224     03 2C 66 F0 | 	shl	local04, #3
0c228     02 00 00 FF 
0c22c     38 E4 85 F1 | 	sub	objptr, ##1080
0c230     F2 2C 02 F1 | 	add	local04, objptr
0c234     04 2C 06 F1 | 	add	local04, #4
0c238     16 2F 02 FB | 	rdlong	local05, local04
0c23c                 | ' op = lparts(ct).token				 
0c23c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c23c     35 00 00 FF 
0c240     0C E4 85 F1 | 	sub	objptr, ##27148
0c244                 | LR__0990
0c244     01 2E 0E F2 | 	cmp	local05, #1 wz
0c248     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c24c     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c250     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c254     08 01 90 5D |  if_ne	jmp	#LR__0991
0c258     37 00 00 FF 
0c25c     44 E4 05 F1 | 	add	objptr, ##28228
0c260     F2 2C 02 FB | 	rdlong	local04, objptr
0c264     01 2C 06 F1 | 	add	local04, #1
0c268     F2 2C 62 FC | 	wrlong	local04, objptr
0c26c     37 00 00 FF 
0c270     44 E4 85 F1 | 	sub	objptr, ##28228
0c274     F8 00 B0 FD | 	call	#_muldiv
0c278                 | '   ct+=1
0c278                 | '   err=muldiv() : if err>0 then return err   
0c278     01 FA 15 F2 | 	cmp	result1, #1 wc
0c27c     E4 00 90 3D |  if_ae	jmp	#LR__0992
0c280     17 2B 02 F6 | 	mov	local03, local05
0c284     13 31 02 F6 | 	mov	local06, local01
0c288     14 33 02 F6 | 	mov	local07, local02
0c28c     15 2F 02 F6 | 	mov	local05, local03
0c290     4A 00 00 FF 
0c294     7C E4 05 F1 | 	add	objptr, ##38012
0c298     F2 2C 02 FB | 	rdlong	local04, objptr
0c29c     16 FB 01 F6 | 	mov	result1, local04
0c2a0     01 FA 65 F0 | 	shl	result1, #1
0c2a4     16 FB 01 F1 | 	add	result1, local04
0c2a8     02 FA 65 F0 | 	shl	result1, #2
0c2ac     03 00 00 FF 
0c2b0     00 E4 85 F1 | 	sub	objptr, ##1536
0c2b4     F2 FA 01 F1 | 	add	result1, objptr
0c2b8     FD 30 62 FC | 	wrlong	local06, result1
0c2bc     03 00 00 FF 
0c2c0     00 E4 05 F1 | 	add	objptr, ##1536
0c2c4     F2 30 02 FB | 	rdlong	local06, objptr
0c2c8     18 2D 02 F6 | 	mov	local04, local06
0c2cc     01 2C 66 F0 | 	shl	local04, #1
0c2d0     18 2D 02 F1 | 	add	local04, local06
0c2d4     02 2C 66 F0 | 	shl	local04, #2
0c2d8     03 00 00 FF 
0c2dc     00 E4 85 F1 | 	sub	objptr, ##1536
0c2e0     F2 2C 02 F1 | 	add	local04, objptr
0c2e4     04 2C 06 F1 | 	add	local04, #4
0c2e8     16 33 62 FC | 	wrlong	local07, local04
0c2ec     03 00 00 FF 
0c2f0     00 E4 05 F1 | 	add	objptr, ##1536
0c2f4     F2 32 02 FB | 	rdlong	local07, objptr
0c2f8     19 31 02 F6 | 	mov	local06, local07
0c2fc     01 30 66 F0 | 	shl	local06, #1
0c300     19 31 02 F1 | 	add	local06, local07
0c304     02 30 66 F0 | 	shl	local06, #2
0c308     03 00 00 FF 
0c30c     00 E4 85 F1 | 	sub	objptr, ##1536
0c310     F2 30 02 F1 | 	add	local06, objptr
0c314     08 30 06 F1 | 	add	local06, #8
0c318     18 2F 62 FC | 	wrlong	local05, local06
0c31c     03 00 00 FF 
0c320     00 E4 05 F1 | 	add	objptr, ##1536
0c324     F2 30 02 FB | 	rdlong	local06, objptr
0c328     01 30 06 F1 | 	add	local06, #1
0c32c     F2 30 62 FC | 	wrlong	local06, objptr
0c330     13 00 00 FF 
0c334     38 E4 85 F1 | 	sub	objptr, ##9784
0c338     F2 2C 02 FB | 	rdlong	local04, objptr
0c33c     03 2C 66 F0 | 	shl	local04, #3
0c340     02 00 00 FF 
0c344     38 E4 85 F1 | 	sub	objptr, ##1080
0c348     F2 2C 02 F1 | 	add	local04, objptr
0c34c     04 2C 06 F1 | 	add	local04, #4
0c350     16 2F 02 FB | 	rdlong	local05, local04
0c354     35 00 00 FF 
0c358     0C E4 85 F1 | 	sub	objptr, ##27148
0c35c     E4 FE 9F FD | 	jmp	#LR__0990
0c360                 | LR__0991
0c360                 | ' return 0
0c360     00 FA 05 F6 | 	mov	result1, #0
0c364                 | LR__0992
0c364     A7 F0 03 F6 | 	mov	ptra, fp
0c368     B2 00 A0 FD | 	call	#popregs_
0c36c                 | _addsub_ret
0c36c     2D 00 64 FD | 	ret
0c370                 | 
0c370                 | ' 
0c370                 | ' ' Third level operators : mul,div,shift,power
0c370                 | ' 
0c370                 | ' function muldiv() as ulong
0c370                 | _muldiv
0c370     07 4A 05 F6 | 	mov	COUNT_, #7
0c374     A8 00 A0 FD | 	call	#pushregs_
0c378                 | _muldiv_enter
0c378     00 26 06 F6 | 	mov	local01, #0
0c37c     6C 01 B0 FD | 	call	#_getvalue
0c380                 | ' 
0c380                 | ' t3.result.uresult=0
0c380                 | ' err=getvalue() : if err>0 then return err     
0c380     01 FA 15 F2 | 	cmp	result1, #1 wc
0c384     58 01 90 3D |  if_ae	jmp	#LR__1002
0c388     37 00 00 FF 
0c38c     44 E4 05 F1 | 	add	objptr, ##28228
0c390     F2 2C 02 FB | 	rdlong	local04, objptr
0c394     03 2C 66 F0 | 	shl	local04, #3
0c398     02 00 00 FF 
0c39c     38 E4 85 F1 | 	sub	objptr, ##1080
0c3a0     F2 2C 02 F1 | 	add	local04, objptr
0c3a4     04 2C 06 F1 | 	add	local04, #4
0c3a8     16 2F 02 FB | 	rdlong	local05, local04
0c3ac                 | ' op = lparts(ct).token
0c3ac                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c3ac     35 00 00 FF 
0c3b0     0C E4 85 F1 | 	sub	objptr, ##27148
0c3b4                 | LR__1000
0c3b4     05 2E 0E F2 | 	cmp	local05, #5 wz
0c3b8     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c3bc     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c3c0     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c3c4     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c3c8     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c3cc     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c3d0     08 01 90 5D |  if_ne	jmp	#LR__1001
0c3d4     37 00 00 FF 
0c3d8     44 E4 05 F1 | 	add	objptr, ##28228
0c3dc     F2 2C 02 FB | 	rdlong	local04, objptr
0c3e0     01 2C 06 F1 | 	add	local04, #1
0c3e4     F2 2C 62 FC | 	wrlong	local04, objptr
0c3e8     37 00 00 FF 
0c3ec     44 E4 85 F1 | 	sub	objptr, ##28228
0c3f0     F8 00 B0 FD | 	call	#_getvalue
0c3f4                 | '   ct+=1
0c3f4                 | '   err=getvalue() :if err>0 then return err   
0c3f4     01 FA 15 F2 | 	cmp	result1, #1 wc
0c3f8     E4 00 90 3D |  if_ae	jmp	#LR__1002
0c3fc     17 2B 02 F6 | 	mov	local03, local05
0c400     13 31 02 F6 | 	mov	local06, local01
0c404     14 33 02 F6 | 	mov	local07, local02
0c408     15 2F 02 F6 | 	mov	local05, local03
0c40c     4A 00 00 FF 
0c410     7C E4 05 F1 | 	add	objptr, ##38012
0c414     F2 2C 02 FB | 	rdlong	local04, objptr
0c418     16 FB 01 F6 | 	mov	result1, local04
0c41c     01 FA 65 F0 | 	shl	result1, #1
0c420     16 FB 01 F1 | 	add	result1, local04
0c424     02 FA 65 F0 | 	shl	result1, #2
0c428     03 00 00 FF 
0c42c     00 E4 85 F1 | 	sub	objptr, ##1536
0c430     F2 FA 01 F1 | 	add	result1, objptr
0c434     FD 30 62 FC | 	wrlong	local06, result1
0c438     03 00 00 FF 
0c43c     00 E4 05 F1 | 	add	objptr, ##1536
0c440     F2 30 02 FB | 	rdlong	local06, objptr
0c444     18 2D 02 F6 | 	mov	local04, local06
0c448     01 2C 66 F0 | 	shl	local04, #1
0c44c     18 2D 02 F1 | 	add	local04, local06
0c450     02 2C 66 F0 | 	shl	local04, #2
0c454     03 00 00 FF 
0c458     00 E4 85 F1 | 	sub	objptr, ##1536
0c45c     F2 2C 02 F1 | 	add	local04, objptr
0c460     04 2C 06 F1 | 	add	local04, #4
0c464     16 33 62 FC | 	wrlong	local07, local04
0c468     03 00 00 FF 
0c46c     00 E4 05 F1 | 	add	objptr, ##1536
0c470     F2 32 02 FB | 	rdlong	local07, objptr
0c474     19 31 02 F6 | 	mov	local06, local07
0c478     01 30 66 F0 | 	shl	local06, #1
0c47c     19 31 02 F1 | 	add	local06, local07
0c480     02 30 66 F0 | 	shl	local06, #2
0c484     03 00 00 FF 
0c488     00 E4 85 F1 | 	sub	objptr, ##1536
0c48c     F2 30 02 F1 | 	add	local06, objptr
0c490     08 30 06 F1 | 	add	local06, #8
0c494     18 2F 62 FC | 	wrlong	local05, local06
0c498     03 00 00 FF 
0c49c     00 E4 05 F1 | 	add	objptr, ##1536
0c4a0     F2 30 02 FB | 	rdlong	local06, objptr
0c4a4     01 30 06 F1 | 	add	local06, #1
0c4a8     F2 30 62 FC | 	wrlong	local06, objptr
0c4ac     13 00 00 FF 
0c4b0     38 E4 85 F1 | 	sub	objptr, ##9784
0c4b4     F2 2C 02 FB | 	rdlong	local04, objptr
0c4b8     03 2C 66 F0 | 	shl	local04, #3
0c4bc     02 00 00 FF 
0c4c0     38 E4 85 F1 | 	sub	objptr, ##1080
0c4c4     F2 2C 02 F1 | 	add	local04, objptr
0c4c8     04 2C 06 F1 | 	add	local04, #4
0c4cc     16 2F 02 FB | 	rdlong	local05, local04
0c4d0     35 00 00 FF 
0c4d4     0C E4 85 F1 | 	sub	objptr, ##27148
0c4d8     D8 FE 9F FD | 	jmp	#LR__1000
0c4dc                 | LR__1001
0c4dc                 | ' return 0
0c4dc     00 FA 05 F6 | 	mov	result1, #0
0c4e0                 | LR__1002
0c4e0     A7 F0 03 F6 | 	mov	ptra, fp
0c4e4     B2 00 A0 FD | 	call	#popregs_
0c4e8                 | _muldiv_ret
0c4e8     2D 00 64 FD | 	ret
0c4ec                 | 
0c4ec                 | ' 
0c4ec                 | ' ' Get a value for operations
0c4ec                 | ' 
0c4ec                 | ' function getvalue()  as ulong
0c4ec                 | _getvalue
0c4ec     0B 4A 05 F6 | 	mov	COUNT_, #11
0c4f0     A8 00 A0 FD | 	call	#pushregs_
0c4f4                 | _getvalue_enter
0c4f4     01 2C 06 F6 | 	mov	local04, #1
0c4f8     00 26 06 F6 | 	mov	local01, #0
0c4fc     1D 2A 06 F6 | 	mov	local03, #29
0c500     37 00 00 FF 
0c504     44 E4 05 F1 | 	add	objptr, ##28228
0c508     F2 16 02 FB | 	rdlong	arg03, objptr
0c50c     03 16 66 F0 | 	shl	arg03, #3
0c510     02 00 00 FF 
0c514     38 E4 85 F1 | 	sub	objptr, ##1080
0c518     F2 16 02 F1 | 	add	arg03, objptr
0c51c     04 16 06 F1 | 	add	arg03, #4
0c520     0B 2F 02 FB | 	rdlong	local05, arg03
0c524                 | ' 
0c524                 | ' m=1											' for negative numbers
0c524                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c524                 | ' op=lparts(ct).token
0c524                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c524     02 2E 0E F2 | 	cmp	local05, #2 wz
0c528     35 00 00 FF 
0c52c     0C E4 85 F1 | 	sub	objptr, ##27148
0c530     38 00 90 5D |  if_ne	jmp	#LR__1010
0c534     01 2C 66 F6 | 	neg	local04, #1
0c538     37 00 00 FF 
0c53c     44 E4 05 F1 | 	add	objptr, ##28228
0c540     F2 2E 02 FB | 	rdlong	local05, objptr
0c544     01 2E 06 F1 | 	add	local05, #1
0c548     F2 2E 62 FC | 	wrlong	local05, objptr
0c54c     03 2E 66 F0 | 	shl	local05, #3
0c550     02 00 00 FF 
0c554     38 E4 85 F1 | 	sub	objptr, ##1080
0c558     F2 2E 02 F1 | 	add	local05, objptr
0c55c     04 2E 06 F1 | 	add	local05, #4
0c560     17 2F 02 FB | 	rdlong	local05, local05
0c564     35 00 00 FF 
0c568     0C E4 85 F1 | 	sub	objptr, ##27148
0c56c                 | LR__1010
0c56c                 | ' select case op
0c56c     01 00 00 FF 
0c570     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c574     44 00 90 AD |  if_e	jmp	#LR__1011
0c578     01 00 00 FF 
0c57c     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c580     90 01 90 AD |  if_e	jmp	#LR__1014
0c584     01 00 00 FF 
0c588     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c58c     44 04 90 AD |  if_e	jmp	#LR__1021
0c590     01 00 00 FF 
0c594     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c598     A8 05 90 AD |  if_e	jmp	#LR__1024
0c59c     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c5a0     78 07 90 AD |  if_e	jmp	#LR__1029
0c5a4     01 00 00 FF 
0c5a8     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c5ac     70 08 90 AD |  if_e	jmp	#LR__1030
0c5b0     15 2E 0E F2 | 	cmp	local05, #21 wz
0c5b4     98 08 90 AD |  if_e	jmp	#LR__1031
0c5b8     10 09 90 FD | 	jmp	#LR__1032
0c5bc                 | LR__1011
0c5bc                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c5bc     01 2C 0E F2 | 	cmp	local04, #1 wz
0c5c0     3C 00 90 5D |  if_ne	jmp	#LR__1012
0c5c4     37 00 00 FF 
0c5c8     44 E4 05 F1 | 	add	objptr, ##28228
0c5cc     F2 2E 02 FB | 	rdlong	local05, objptr
0c5d0     03 2E 66 F0 | 	shl	local05, #3
0c5d4     02 00 00 FF 
0c5d8     38 E4 85 F1 | 	sub	objptr, ##1080
0c5dc     F2 2E 02 F1 | 	add	local05, objptr
0c5e0     17 13 02 FB | 	rdlong	arg01, local05
0c5e4     00 14 06 F6 | 	mov	arg02, #0
0c5e8     35 00 00 FF 
0c5ec     0C E4 85 F1 | 	sub	objptr, ##27148
0c5f0     B8 E3 B1 FD | 	call	#__system____builtin_atoi
0c5f4     FD 2C 02 FD | 	qmul	local04, result1
0c5f8     18 26 62 FD | 	getqx	local01
0c5fc     1C 2A 06 F6 | 	mov	local03, #28
0c600                 | LR__1012
0c600                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c600     FF FF 7F FF 
0c604     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c608     3C 00 90 5D |  if_ne	jmp	#LR__1013
0c60c     37 00 00 FF 
0c610     44 E4 05 F1 | 	add	objptr, ##28228
0c614     F2 2E 02 FB | 	rdlong	local05, objptr
0c618     03 2E 66 F0 | 	shl	local05, #3
0c61c     02 00 00 FF 
0c620     38 E4 85 F1 | 	sub	objptr, ##1080
0c624     F2 2E 02 F1 | 	add	local05, objptr
0c628     17 13 02 FB | 	rdlong	arg01, local05
0c62c     00 14 06 F6 | 	mov	arg02, #0
0c630     35 00 00 FF 
0c634     0C E4 85 F1 | 	sub	objptr, ##27148
0c638     70 E3 B1 FD | 	call	#__system____builtin_atoi
0c63c     FD 2C 02 FD | 	qmul	local04, result1
0c640     18 26 62 FD | 	getqx	local01
0c644     1C 2A 06 F6 | 	mov	local03, #28
0c648                 | LR__1013
0c648     13 31 02 F6 | 	mov	local06, local01
0c64c     14 33 02 F6 | 	mov	local07, local02
0c650     15 2F 02 F6 | 	mov	local05, local03
0c654     4A 00 00 FF 
0c658     7C E4 05 F1 | 	add	objptr, ##38012
0c65c     F2 26 02 FB | 	rdlong	local01, objptr
0c660     13 2D 02 F6 | 	mov	local04, local01
0c664     01 2C 66 F0 | 	shl	local04, #1
0c668     13 2D 02 F1 | 	add	local04, local01
0c66c     02 2C 66 F0 | 	shl	local04, #2
0c670     03 00 00 FF 
0c674     00 E4 85 F1 | 	sub	objptr, ##1536
0c678     F2 2C 02 F1 | 	add	local04, objptr
0c67c     16 31 62 FC | 	wrlong	local06, local04
0c680     03 00 00 FF 
0c684     00 E4 05 F1 | 	add	objptr, ##1536
0c688     F2 30 02 FB | 	rdlong	local06, objptr
0c68c     18 27 02 F6 | 	mov	local01, local06
0c690     01 26 66 F0 | 	shl	local01, #1
0c694     18 27 02 F1 | 	add	local01, local06
0c698     02 26 66 F0 | 	shl	local01, #2
0c69c     03 00 00 FF 
0c6a0     00 E4 85 F1 | 	sub	objptr, ##1536
0c6a4     F2 26 02 F1 | 	add	local01, objptr
0c6a8     04 26 06 F1 | 	add	local01, #4
0c6ac     13 33 62 FC | 	wrlong	local07, local01
0c6b0     03 00 00 FF 
0c6b4     00 E4 05 F1 | 	add	objptr, ##1536
0c6b8     F2 32 02 FB | 	rdlong	local07, objptr
0c6bc     19 31 02 F6 | 	mov	local06, local07
0c6c0     01 30 66 F0 | 	shl	local06, #1
0c6c4     19 31 02 F1 | 	add	local06, local07
0c6c8     02 30 66 F0 | 	shl	local06, #2
0c6cc     03 00 00 FF 
0c6d0     00 E4 85 F1 | 	sub	objptr, ##1536
0c6d4     F2 30 02 F1 | 	add	local06, objptr
0c6d8     08 30 06 F1 | 	add	local06, #8
0c6dc     18 2F 62 FC | 	wrlong	local05, local06
0c6e0     03 00 00 FF 
0c6e4     00 E4 05 F1 | 	add	objptr, ##1536
0c6e8     F2 30 02 FB | 	rdlong	local06, objptr
0c6ec     01 30 06 F1 | 	add	local06, #1
0c6f0     F2 30 62 FC | 	wrlong	local06, objptr
0c6f4     13 00 00 FF 
0c6f8     38 E4 85 F1 | 	sub	objptr, ##9784
0c6fc     F2 30 02 FB | 	rdlong	local06, objptr
0c700     01 30 06 F1 | 	add	local06, #1
0c704     F2 30 62 FC | 	wrlong	local06, objptr
0c708     37 00 00 FF 
0c70c     44 E4 85 F1 | 	sub	objptr, ##28228
0c710     E4 07 90 FD | 	jmp	#LR__1033
0c714                 | LR__1014
0c714                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c714     37 00 00 FF 
0c718     44 E4 05 F1 | 	add	objptr, ##28228
0c71c     F2 16 02 FB | 	rdlong	arg03, objptr
0c720     03 16 66 F0 | 	shl	arg03, #3
0c724     02 00 00 FF 
0c728     38 E4 85 F1 | 	sub	objptr, ##1080
0c72c     F2 16 02 F1 | 	add	arg03, objptr
0c730     0B 13 02 FB | 	rdlong	arg01, arg03
0c734     01 14 06 F6 | 	mov	arg02, #1
0c738     35 00 00 FF 
0c73c     0C E4 85 F1 | 	sub	objptr, ##27148
0c740     F4 CD B1 FD | 	call	#__system__Left_S
0c744     FD 12 02 F6 | 	mov	arg01, result1
0c748     BB 01 00 FF 
0c74c     7E 15 06 F6 | 	mov	arg02, ##@LR__5901
0c750     8C AD B1 FD | 	call	#__system___string_cmp
0c754     00 FA 0D F2 | 	cmp	result1, #0 wz
0c758     94 00 90 5D |  if_ne	jmp	#LR__1017
0c75c     37 00 00 FF 
0c760     44 E4 05 F1 | 	add	objptr, ##28228
0c764     F2 32 02 FB | 	rdlong	local07, objptr
0c768     19 31 02 F6 | 	mov	local06, local07
0c76c     03 30 66 F0 | 	shl	local06, #3
0c770     02 00 00 FF 
0c774     38 E4 85 F1 | 	sub	objptr, ##1080
0c778     F2 30 02 F1 | 	add	local06, objptr
0c77c     BB 01 00 FF 
0c780     80 2F 06 F6 | 	mov	local05, ##@LR__5902
0c784     03 32 66 F0 | 	shl	local07, #3
0c788     F2 32 02 F1 | 	add	local07, objptr
0c78c     19 33 02 FB | 	rdlong	local07, local07
0c790     02 00 00 FF 
0c794     38 E4 05 F1 | 	add	objptr, ##1080
0c798     F2 26 02 FB | 	rdlong	local01, objptr
0c79c     03 26 66 F0 | 	shl	local01, #3
0c7a0     02 00 00 FF 
0c7a4     38 E4 85 F1 | 	sub	objptr, ##1080
0c7a8     F2 26 02 F1 | 	add	local01, objptr
0c7ac     13 13 02 FB | 	rdlong	arg01, local01
0c7b0     35 00 00 FF 
0c7b4     0C E4 85 F1 | 	sub	objptr, ##27148
0c7b8     09 35 02 F6 | 	mov	local08, arg01
0c7bc     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c7c0                 | LR__1015
0c7c0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c7c4     01 34 06 51 |  if_ne	add	local08, #1
0c7c8     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0c7cc                 | LR__1016
0c7cc     09 35 82 F1 | 	sub	local08, arg01
0c7d0     1A 15 02 F6 | 	mov	arg02, local08
0c7d4     01 14 86 F1 | 	sub	arg02, #1
0c7d8     19 13 02 F6 | 	mov	arg01, local07
0c7dc     E0 CD B1 FD | 	call	#__system__Right_S
0c7e0     FD 14 02 F6 | 	mov	arg02, result1
0c7e4     17 13 02 F6 | 	mov	arg01, local05
0c7e8     28 AD B1 FD | 	call	#__system___string_concat
0c7ec     18 FB 61 FC | 	wrlong	result1, local06
0c7f0                 | LR__1017
0c7f0                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c7f0     37 00 00 FF 
0c7f4     44 E4 05 F1 | 	add	objptr, ##28228
0c7f8     F2 16 02 FB | 	rdlong	arg03, objptr
0c7fc     03 16 66 F0 | 	shl	arg03, #3
0c800     02 00 00 FF 
0c804     38 E4 85 F1 | 	sub	objptr, ##1080
0c808     F2 16 02 F1 | 	add	arg03, objptr
0c80c     0B 13 02 FB | 	rdlong	arg01, arg03
0c810     01 14 06 F6 | 	mov	arg02, #1
0c814     35 00 00 FF 
0c818     0C E4 85 F1 | 	sub	objptr, ##27148
0c81c     18 CD B1 FD | 	call	#__system__Left_S
0c820     FD 12 02 F6 | 	mov	arg01, result1
0c824     BB 01 00 FF 
0c828     83 15 06 F6 | 	mov	arg02, ##@LR__5903
0c82c     B0 AC B1 FD | 	call	#__system___string_cmp
0c830     00 FA 0D F2 | 	cmp	result1, #0 wz
0c834     94 00 90 5D |  if_ne	jmp	#LR__1020
0c838     37 00 00 FF 
0c83c     44 E4 05 F1 | 	add	objptr, ##28228
0c840     F2 32 02 FB | 	rdlong	local07, objptr
0c844     19 31 02 F6 | 	mov	local06, local07
0c848     03 30 66 F0 | 	shl	local06, #3
0c84c     02 00 00 FF 
0c850     38 E4 85 F1 | 	sub	objptr, ##1080
0c854     F2 30 02 F1 | 	add	local06, objptr
0c858     BB 01 00 FF 
0c85c     85 2F 06 F6 | 	mov	local05, ##@LR__5904
0c860     03 32 66 F0 | 	shl	local07, #3
0c864     F2 32 02 F1 | 	add	local07, objptr
0c868     19 33 02 FB | 	rdlong	local07, local07
0c86c     02 00 00 FF 
0c870     38 E4 05 F1 | 	add	objptr, ##1080
0c874     F2 26 02 FB | 	rdlong	local01, objptr
0c878     03 26 66 F0 | 	shl	local01, #3
0c87c     02 00 00 FF 
0c880     38 E4 85 F1 | 	sub	objptr, ##1080
0c884     F2 26 02 F1 | 	add	local01, objptr
0c888     13 13 02 FB | 	rdlong	arg01, local01
0c88c     35 00 00 FF 
0c890     0C E4 85 F1 | 	sub	objptr, ##27148
0c894     09 35 02 F6 | 	mov	local08, arg01
0c898     97 06 48 FB | 	callpa	#(@LR__1019-@LR__1018)>>2,fcache_load_ptr_
0c89c                 | LR__1018
0c89c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c8a0     01 34 06 51 |  if_ne	add	local08, #1
0c8a4     F4 FF 9F 5D |  if_ne	jmp	#LR__1018
0c8a8                 | LR__1019
0c8a8     09 35 82 F1 | 	sub	local08, arg01
0c8ac     1A 15 02 F6 | 	mov	arg02, local08
0c8b0     01 14 86 F1 | 	sub	arg02, #1
0c8b4     19 13 02 F6 | 	mov	arg01, local07
0c8b8     04 CD B1 FD | 	call	#__system__Right_S
0c8bc     FD 14 02 F6 | 	mov	arg02, result1
0c8c0     17 13 02 F6 | 	mov	arg01, local05
0c8c4     4C AC B1 FD | 	call	#__system___string_concat
0c8c8     18 FB 61 FC | 	wrlong	result1, local06
0c8cc                 | LR__1020
0c8cc     37 00 00 FF 
0c8d0     44 E4 05 F1 | 	add	objptr, ##28228
0c8d4     F2 30 02 FB | 	rdlong	local06, objptr
0c8d8     03 30 66 F0 | 	shl	local06, #3
0c8dc     02 00 00 FF 
0c8e0     38 E4 85 F1 | 	sub	objptr, ##1080
0c8e4     F2 30 02 F1 | 	add	local06, objptr
0c8e8     18 13 02 FB | 	rdlong	arg01, local06
0c8ec     00 14 06 F6 | 	mov	arg02, #0
0c8f0     35 00 00 FF 
0c8f4     0C E4 85 F1 | 	sub	objptr, ##27148
0c8f8     B0 E0 B1 FD | 	call	#__system____builtin_atoi
0c8fc     FD 2C 02 FD | 	qmul	local04, result1
0c900     4A 00 00 FF 
0c904     7C E4 05 F1 | 	add	objptr, ##38012
0c908     F2 30 02 FB | 	rdlong	local06, objptr
0c90c     18 37 02 F6 | 	mov	local09, local06
0c910     01 36 66 F0 | 	shl	local09, #1
0c914     18 37 02 F1 | 	add	local09, local06
0c918     02 36 66 F0 | 	shl	local09, #2
0c91c     03 00 00 FF 
0c920     00 E4 85 F1 | 	sub	objptr, ##1536
0c924     F2 36 02 F1 | 	add	local09, objptr
0c928     03 00 00 FF 
0c92c     00 E4 05 F1 | 	add	objptr, ##1536
0c930     18 26 62 FD | 	getqx	local01
0c934     1C 2A 06 F6 | 	mov	local03, #28
0c938     13 31 02 F6 | 	mov	local06, local01
0c93c     14 33 02 F6 | 	mov	local07, local02
0c940     1B 31 62 FC | 	wrlong	local06, local09
0c944     15 37 02 F6 | 	mov	local09, local03
0c948     F2 30 02 FB | 	rdlong	local06, objptr
0c94c     18 2F 02 F6 | 	mov	local05, local06
0c950     01 2E 66 F0 | 	shl	local05, #1
0c954     18 2F 02 F1 | 	add	local05, local06
0c958     02 2E 66 F0 | 	shl	local05, #2
0c95c     03 00 00 FF 
0c960     00 E4 85 F1 | 	sub	objptr, ##1536
0c964     F2 2E 02 F1 | 	add	local05, objptr
0c968     04 2E 06 F1 | 	add	local05, #4
0c96c     17 33 62 FC | 	wrlong	local07, local05
0c970     03 00 00 FF 
0c974     00 E4 05 F1 | 	add	objptr, ##1536
0c978     F2 32 02 FB | 	rdlong	local07, objptr
0c97c     19 31 02 F6 | 	mov	local06, local07
0c980     01 30 66 F0 | 	shl	local06, #1
0c984     19 31 02 F1 | 	add	local06, local07
0c988     02 30 66 F0 | 	shl	local06, #2
0c98c     03 00 00 FF 
0c990     00 E4 85 F1 | 	sub	objptr, ##1536
0c994     F2 30 02 F1 | 	add	local06, objptr
0c998     08 30 06 F1 | 	add	local06, #8
0c99c     18 37 62 FC | 	wrlong	local09, local06
0c9a0     03 00 00 FF 
0c9a4     00 E4 05 F1 | 	add	objptr, ##1536
0c9a8     F2 30 02 FB | 	rdlong	local06, objptr
0c9ac     01 30 06 F1 | 	add	local06, #1
0c9b0     F2 30 62 FC | 	wrlong	local06, objptr
0c9b4     13 00 00 FF 
0c9b8     38 E4 85 F1 | 	sub	objptr, ##9784
0c9bc     F2 30 02 FB | 	rdlong	local06, objptr
0c9c0     01 30 06 F1 | 	add	local06, #1
0c9c4     F2 30 62 FC | 	wrlong	local06, objptr
0c9c8     37 00 00 FF 
0c9cc     44 E4 85 F1 | 	sub	objptr, ##28228
0c9d0     24 05 90 FD | 	jmp	#LR__1033
0c9d4                 | LR__1021
0c9d4                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c9d4     01 2C 0E F2 | 	cmp	local04, #1 wz
0c9d8     48 00 90 5D |  if_ne	jmp	#LR__1022
0c9dc     00 C0 1F FF 
0c9e0     00 30 06 F6 | 	mov	local06, ##1065353216
0c9e4     37 00 00 FF 
0c9e8     44 E4 05 F1 | 	add	objptr, ##28228
0c9ec     F2 36 02 FB | 	rdlong	local09, objptr
0c9f0     03 36 66 F0 | 	shl	local09, #3
0c9f4     02 00 00 FF 
0c9f8     38 E4 85 F1 | 	sub	objptr, ##1080
0c9fc     F2 36 02 F1 | 	add	local09, objptr
0ca00     1B 13 02 FB | 	rdlong	arg01, local09
0ca04     35 00 00 FF 
0ca08     0C E4 85 F1 | 	sub	objptr, ##27148
0ca0c     30 E1 B1 FD | 	call	#__system____builtin_atof
0ca10     FD 14 02 F6 | 	mov	arg02, result1
0ca14     18 13 02 F6 | 	mov	arg01, local06
0ca18     18 D9 B1 FD | 	call	#__system___float_mul
0ca1c     FD 26 02 F6 | 	mov	local01, result1
0ca20     1E 2A 06 F6 | 	mov	local03, #30
0ca24                 | LR__1022
0ca24                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0ca24     FF FF 7F FF 
0ca28     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0ca2c     48 00 90 5D |  if_ne	jmp	#LR__1023
0ca30     00 C0 5F FF 
0ca34     00 30 06 F6 | 	mov	local06, ##-1082130432
0ca38     37 00 00 FF 
0ca3c     44 E4 05 F1 | 	add	objptr, ##28228
0ca40     F2 36 02 FB | 	rdlong	local09, objptr
0ca44     03 36 66 F0 | 	shl	local09, #3
0ca48     02 00 00 FF 
0ca4c     38 E4 85 F1 | 	sub	objptr, ##1080
0ca50     F2 36 02 F1 | 	add	local09, objptr
0ca54     1B 13 02 FB | 	rdlong	arg01, local09
0ca58     35 00 00 FF 
0ca5c     0C E4 85 F1 | 	sub	objptr, ##27148
0ca60     DC E0 B1 FD | 	call	#__system____builtin_atof
0ca64     FD 14 02 F6 | 	mov	arg02, result1
0ca68     18 13 02 F6 | 	mov	arg01, local06
0ca6c     C4 D8 B1 FD | 	call	#__system___float_mul
0ca70     FD 26 02 F6 | 	mov	local01, result1
0ca74     1E 2A 06 F6 | 	mov	local03, #30
0ca78                 | LR__1023
0ca78     13 31 02 F6 | 	mov	local06, local01
0ca7c     14 33 02 F6 | 	mov	local07, local02
0ca80     15 2F 02 F6 | 	mov	local05, local03
0ca84     4A 00 00 FF 
0ca88     7C E4 05 F1 | 	add	objptr, ##38012
0ca8c     F2 26 02 FB | 	rdlong	local01, objptr
0ca90     13 37 02 F6 | 	mov	local09, local01
0ca94     01 36 66 F0 | 	shl	local09, #1
0ca98     13 37 02 F1 | 	add	local09, local01
0ca9c     02 36 66 F0 | 	shl	local09, #2
0caa0     03 00 00 FF 
0caa4     00 E4 85 F1 | 	sub	objptr, ##1536
0caa8     F2 36 02 F1 | 	add	local09, objptr
0caac     1B 31 62 FC | 	wrlong	local06, local09
0cab0     03 00 00 FF 
0cab4     00 E4 05 F1 | 	add	objptr, ##1536
0cab8     F2 36 02 FB | 	rdlong	local09, objptr
0cabc     1B 31 02 F6 | 	mov	local06, local09
0cac0     01 30 66 F0 | 	shl	local06, #1
0cac4     1B 31 02 F1 | 	add	local06, local09
0cac8     02 30 66 F0 | 	shl	local06, #2
0cacc     03 00 00 FF 
0cad0     00 E4 85 F1 | 	sub	objptr, ##1536
0cad4     F2 30 02 F1 | 	add	local06, objptr
0cad8     04 30 06 F1 | 	add	local06, #4
0cadc     18 33 62 FC | 	wrlong	local07, local06
0cae0     03 00 00 FF 
0cae4     00 E4 05 F1 | 	add	objptr, ##1536
0cae8     F2 36 02 FB | 	rdlong	local09, objptr
0caec     1B 33 02 F6 | 	mov	local07, local09
0caf0     01 32 66 F0 | 	shl	local07, #1
0caf4     1B 33 02 F1 | 	add	local07, local09
0caf8     02 32 66 F0 | 	shl	local07, #2
0cafc     03 00 00 FF 
0cb00     00 E4 85 F1 | 	sub	objptr, ##1536
0cb04     F2 32 02 F1 | 	add	local07, objptr
0cb08     08 32 06 F1 | 	add	local07, #8
0cb0c     19 2F 62 FC | 	wrlong	local05, local07
0cb10     03 00 00 FF 
0cb14     00 E4 05 F1 | 	add	objptr, ##1536
0cb18     F2 30 02 FB | 	rdlong	local06, objptr
0cb1c     01 30 06 F1 | 	add	local06, #1
0cb20     F2 30 62 FC | 	wrlong	local06, objptr
0cb24     13 00 00 FF 
0cb28     38 E4 85 F1 | 	sub	objptr, ##9784
0cb2c     F2 30 02 FB | 	rdlong	local06, objptr
0cb30     01 30 06 F1 | 	add	local06, #1
0cb34     F2 30 62 FC | 	wrlong	local06, objptr
0cb38     37 00 00 FF 
0cb3c     44 E4 85 F1 | 	sub	objptr, ##28228
0cb40     B4 03 90 FD | 	jmp	#LR__1033
0cb44                 | LR__1024
0cb44     37 00 00 FF 
0cb48     44 E4 05 F1 | 	add	objptr, ##28228
0cb4c     F2 16 02 FB | 	rdlong	arg03, objptr
0cb50     03 16 66 F0 | 	shl	arg03, #3
0cb54     02 00 00 FF 
0cb58     38 E4 85 F1 | 	sub	objptr, ##1080
0cb5c     F2 16 02 F1 | 	add	arg03, objptr
0cb60     0B 13 02 FB | 	rdlong	arg01, arg03
0cb64     35 00 00 FF 
0cb68     0C E4 85 F1 | 	sub	objptr, ##27148
0cb6c     09 35 02 F6 | 	mov	local08, arg01
0cb70     97 06 48 FB | 	callpa	#(@LR__1026-@LR__1025)>>2,fcache_load_ptr_
0cb74                 | LR__1025
0cb74     1A FB C9 FA | 	rdbyte	result1, local08 wz
0cb78     01 34 06 51 |  if_ne	add	local08, #1
0cb7c     F4 FF 9F 5D |  if_ne	jmp	#LR__1025
0cb80                 | LR__1026
0cb80     09 35 82 F1 | 	sub	local08, arg01
0cb84     1A FB 01 F6 | 	mov	result1, local08
0cb88     52 00 00 FF 
0cb8c     2C E5 05 F1 | 	add	objptr, ##42284
0cb90     F2 FA 61 FC | 	wrlong	result1, objptr
0cb94     5C E4 85 F1 | 	sub	objptr, #92
0cb98     F2 12 02 FB | 	rdlong	arg01, objptr
0cb9c     FD 12 82 F1 | 	sub	arg01, result1
0cba0     04 12 86 F1 | 	sub	arg01, #4
0cba4     03 12 26 F5 | 	andn	arg01, #3
0cba8     F2 12 62 FC | 	wrlong	arg01, objptr
0cbac     5C E4 05 F1 | 	add	objptr, #92
0cbb0     F2 14 02 FB | 	rdlong	arg02, objptr
0cbb4     52 00 00 FF 
0cbb8     2C E5 85 F1 | 	sub	objptr, ##42284
0cbbc     80 70 B1 FD | 	call	#_pslpoke
0cbc0                 | '     pslpoke memtop,l
0cbc0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0cbc0     01 38 06 F6 | 	mov	local10, #1
0cbc4     52 00 00 FF 
0cbc8     2C E5 05 F1 | 	add	objptr, ##42284
0cbcc     F2 3A 02 FB | 	rdlong	local11, objptr
0cbd0     52 00 00 FF 
0cbd4     2C E5 85 F1 | 	sub	objptr, ##42284
0cbd8     01 3A 06 F1 | 	add	local11, #1
0cbdc                 | LR__1027
0cbdc     1D 39 52 F2 | 	cmps	local10, local11 wc
0cbe0     5C 00 90 3D |  if_ae	jmp	#LR__1028
0cbe4     52 00 00 FF 
0cbe8     D0 E4 05 F1 | 	add	objptr, ##42192
0cbec     F2 32 02 FB | 	rdlong	local07, objptr
0cbf0     03 32 06 F1 | 	add	local07, #3
0cbf4     1C 33 02 F1 | 	add	local07, local10
0cbf8     1B 00 00 FF 
0cbfc     8C E4 85 F1 | 	sub	objptr, ##13964
0cc00     F2 36 02 FB | 	rdlong	local09, objptr
0cc04     03 36 66 F0 | 	shl	local09, #3
0cc08     02 00 00 FF 
0cc0c     38 E4 85 F1 | 	sub	objptr, ##1080
0cc10     F2 36 02 F1 | 	add	local09, objptr
0cc14     1B 13 02 FB | 	rdlong	arg01, local09
0cc18     1C 15 02 F6 | 	mov	arg02, local10
0cc1c     01 16 06 F6 | 	mov	arg03, #1
0cc20     35 00 00 FF 
0cc24     0C E4 85 F1 | 	sub	objptr, ##27148
0cc28     24 CA B1 FD | 	call	#__system__Mid_S
0cc2c     FD 14 C2 FA | 	rdbyte	arg02, result1
0cc30     19 13 02 F6 | 	mov	arg01, local07
0cc34     98 70 B1 FD | 	call	#_pspoke
0cc38     01 38 06 F1 | 	add	local10, #1
0cc3c     9C FF 9F FD | 	jmp	#LR__1027
0cc40                 | LR__1028
0cc40     52 00 00 FF 
0cc44     D0 E4 05 F1 | 	add	objptr, ##42192
0cc48     F2 26 02 FB | 	rdlong	local01, objptr
0cc4c     2B 2A 06 F6 | 	mov	local03, #43
0cc50     13 31 02 F6 | 	mov	local06, local01
0cc54     14 33 02 F6 | 	mov	local07, local02
0cc58     15 3B 02 F6 | 	mov	local11, local03
0cc5c     08 00 00 FF 
0cc60     54 E4 85 F1 | 	sub	objptr, ##4180
0cc64     F2 38 02 FB | 	rdlong	local10, objptr
0cc68     1C 37 02 F6 | 	mov	local09, local10
0cc6c     01 36 66 F0 | 	shl	local09, #1
0cc70     1C 37 02 F1 | 	add	local09, local10
0cc74     02 36 66 F0 | 	shl	local09, #2
0cc78     03 00 00 FF 
0cc7c     00 E4 85 F1 | 	sub	objptr, ##1536
0cc80     F2 36 02 F1 | 	add	local09, objptr
0cc84     1B 31 62 FC | 	wrlong	local06, local09
0cc88     03 00 00 FF 
0cc8c     00 E4 05 F1 | 	add	objptr, ##1536
0cc90     F2 38 02 FB | 	rdlong	local10, objptr
0cc94     1C 37 02 F6 | 	mov	local09, local10
0cc98     01 36 66 F0 | 	shl	local09, #1
0cc9c     1C 37 02 F1 | 	add	local09, local10
0cca0     02 36 66 F0 | 	shl	local09, #2
0cca4     03 00 00 FF 
0cca8     00 E4 85 F1 | 	sub	objptr, ##1536
0ccac     F2 36 02 F1 | 	add	local09, objptr
0ccb0     04 36 06 F1 | 	add	local09, #4
0ccb4     1B 33 62 FC | 	wrlong	local07, local09
0ccb8     03 00 00 FF 
0ccbc     00 E4 05 F1 | 	add	objptr, ##1536
0ccc0     F2 38 02 FB | 	rdlong	local10, objptr
0ccc4     1C 37 02 F6 | 	mov	local09, local10
0ccc8     01 36 66 F0 | 	shl	local09, #1
0cccc     1C 37 02 F1 | 	add	local09, local10
0ccd0     02 36 66 F0 | 	shl	local09, #2
0ccd4     03 00 00 FF 
0ccd8     00 E4 85 F1 | 	sub	objptr, ##1536
0ccdc     F2 36 02 F1 | 	add	local09, objptr
0cce0     08 36 06 F1 | 	add	local09, #8
0cce4     1B 3B 62 FC | 	wrlong	local11, local09
0cce8     03 00 00 FF 
0ccec     00 E4 05 F1 | 	add	objptr, ##1536
0ccf0     F2 30 02 FB | 	rdlong	local06, objptr
0ccf4     01 30 06 F1 | 	add	local06, #1
0ccf8     F2 30 62 FC | 	wrlong	local06, objptr
0ccfc     13 00 00 FF 
0cd00     38 E4 85 F1 | 	sub	objptr, ##9784
0cd04     F2 30 02 FB | 	rdlong	local06, objptr
0cd08     01 30 06 F1 | 	add	local06, #1
0cd0c     F2 30 62 FC | 	wrlong	local06, objptr
0cd10     37 00 00 FF 
0cd14     44 E4 85 F1 | 	sub	objptr, ##28228
0cd18     DC 01 90 FD | 	jmp	#LR__1033
0cd1c                 | LR__1029
0cd1c     2C 2A 06 F6 | 	mov	local03, #44
0cd20     37 00 00 FF 
0cd24     44 E4 05 F1 | 	add	objptr, ##28228
0cd28     F2 30 02 FB | 	rdlong	local06, objptr
0cd2c     03 30 66 F0 | 	shl	local06, #3
0cd30     02 00 00 FF 
0cd34     38 E4 85 F1 | 	sub	objptr, ##1080
0cd38     F2 30 02 F1 | 	add	local06, objptr
0cd3c     18 13 02 FB | 	rdlong	arg01, local06
0cd40     00 14 06 F6 | 	mov	arg02, #0
0cd44     35 00 00 FF 
0cd48     0C E4 85 F1 | 	sub	objptr, ##27148
0cd4c     5C DC B1 FD | 	call	#__system____builtin_atoi
0cd50     FD 26 02 F6 | 	mov	local01, result1
0cd54     13 31 02 F6 | 	mov	local06, local01
0cd58     14 33 02 F6 | 	mov	local07, local02
0cd5c     15 3B 02 F6 | 	mov	local11, local03
0cd60     4A 00 00 FF 
0cd64     7C E4 05 F1 | 	add	objptr, ##38012
0cd68     F2 38 02 FB | 	rdlong	local10, objptr
0cd6c     1C 37 02 F6 | 	mov	local09, local10
0cd70     01 36 66 F0 | 	shl	local09, #1
0cd74     1C 37 02 F1 | 	add	local09, local10
0cd78     02 36 66 F0 | 	shl	local09, #2
0cd7c     03 00 00 FF 
0cd80     00 E4 85 F1 | 	sub	objptr, ##1536
0cd84     F2 36 02 F1 | 	add	local09, objptr
0cd88     1B 31 62 FC | 	wrlong	local06, local09
0cd8c     03 00 00 FF 
0cd90     00 E4 05 F1 | 	add	objptr, ##1536
0cd94     F2 38 02 FB | 	rdlong	local10, objptr
0cd98     1C 37 02 F6 | 	mov	local09, local10
0cd9c     01 36 66 F0 | 	shl	local09, #1
0cda0     1C 37 02 F1 | 	add	local09, local10
0cda4     02 36 66 F0 | 	shl	local09, #2
0cda8     03 00 00 FF 
0cdac     00 E4 85 F1 | 	sub	objptr, ##1536
0cdb0     F2 36 02 F1 | 	add	local09, objptr
0cdb4     04 36 06 F1 | 	add	local09, #4
0cdb8     1B 33 62 FC | 	wrlong	local07, local09
0cdbc     03 00 00 FF 
0cdc0     00 E4 05 F1 | 	add	objptr, ##1536
0cdc4     F2 38 02 FB | 	rdlong	local10, objptr
0cdc8     1C 37 02 F6 | 	mov	local09, local10
0cdcc     01 36 66 F0 | 	shl	local09, #1
0cdd0     1C 37 02 F1 | 	add	local09, local10
0cdd4     02 36 66 F0 | 	shl	local09, #2
0cdd8     03 00 00 FF 
0cddc     00 E4 85 F1 | 	sub	objptr, ##1536
0cde0     F2 36 02 F1 | 	add	local09, objptr
0cde4     08 36 06 F1 | 	add	local09, #8
0cde8     1B 3B 62 FC | 	wrlong	local11, local09
0cdec     03 00 00 FF 
0cdf0     00 E4 05 F1 | 	add	objptr, ##1536
0cdf4     F2 30 02 FB | 	rdlong	local06, objptr
0cdf8     01 30 06 F1 | 	add	local06, #1
0cdfc     F2 30 62 FC | 	wrlong	local06, objptr
0ce00     13 00 00 FF 
0ce04     38 E4 85 F1 | 	sub	objptr, ##9784
0ce08     F2 30 02 FB | 	rdlong	local06, objptr
0ce0c     01 30 06 F1 | 	add	local06, #1
0ce10     F2 30 62 FC | 	wrlong	local06, objptr
0ce14     37 00 00 FF 
0ce18     44 E4 85 F1 | 	sub	objptr, ##28228
0ce1c     D8 00 90 FD | 	jmp	#LR__1033
0ce20                 | LR__1030
0ce20     16 13 02 F6 | 	mov	arg01, local04
0ce24     24 04 B0 FD | 	call	#_getvar
0ce28     37 00 00 FF 
0ce2c     44 E4 05 F1 | 	add	objptr, ##28228
0ce30     F2 30 02 FB | 	rdlong	local06, objptr
0ce34     01 30 06 F1 | 	add	local06, #1
0ce38     F2 30 62 FC | 	wrlong	local06, objptr
0ce3c     37 00 00 FF 
0ce40     44 E4 85 F1 | 	sub	objptr, ##28228
0ce44                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0ce44     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce48     B0 00 90 3D |  if_ae	jmp	#LR__1034
0ce4c     A8 00 90 FD | 	jmp	#LR__1033
0ce50                 | LR__1031
0ce50     37 00 00 FF 
0ce54     44 E4 05 F1 | 	add	objptr, ##28228
0ce58     F2 30 02 FB | 	rdlong	local06, objptr
0ce5c     01 30 06 F1 | 	add	local06, #1
0ce60     F2 30 62 FC | 	wrlong	local06, objptr
0ce64     37 00 00 FF 
0ce68     44 E4 85 F1 | 	sub	objptr, ##28228
0ce6c     20 F1 BF FD | 	call	#_expr
0ce70                 | '     ct+=1
0ce70                 | '     err=expr() : if err>0 then return err 
0ce70     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce74     84 00 90 3D |  if_ae	jmp	#LR__1034
0ce78                 | '     if lparts(ct).token=token_rpar then ct+=1
0ce78     37 00 00 FF 
0ce7c     44 E4 05 F1 | 	add	objptr, ##28228
0ce80     F2 3A 02 FB | 	rdlong	local11, objptr
0ce84     03 3A 66 F0 | 	shl	local11, #3
0ce88     02 00 00 FF 
0ce8c     38 E4 85 F1 | 	sub	objptr, ##1080
0ce90     F2 3A 02 F1 | 	add	local11, objptr
0ce94     04 3A 06 F1 | 	add	local11, #4
0ce98     1D 3B 02 FB | 	rdlong	local11, local11
0ce9c     14 3A 0E F2 | 	cmp	local11, #20 wz
0cea0     35 00 00 FF 
0cea4     0C E4 85 F1 | 	sub	objptr, ##27148
0cea8     4C 00 90 5D |  if_ne	jmp	#LR__1033
0ceac     37 00 00 FF 
0ceb0     44 E4 05 F1 | 	add	objptr, ##28228
0ceb4     F2 30 02 FB | 	rdlong	local06, objptr
0ceb8     01 30 06 F1 | 	add	local06, #1
0cebc     F2 30 62 FC | 	wrlong	local06, objptr
0cec0     37 00 00 FF 
0cec4     44 E4 85 F1 | 	sub	objptr, ##28228
0cec8     2C 00 90 FD | 	jmp	#LR__1033
0cecc                 | LR__1032
0cecc     16 13 02 F6 | 	mov	arg01, local04
0ced0     34 00 B0 FD | 	call	#_getfun
0ced4     37 00 00 FF 
0ced8     44 E4 05 F1 | 	add	objptr, ##28228
0cedc     F2 30 02 FB | 	rdlong	local06, objptr
0cee0     01 30 06 F1 | 	add	local06, #1
0cee4     F2 30 62 FC | 	wrlong	local06, objptr
0cee8     37 00 00 FF 
0ceec     44 E4 85 F1 | 	sub	objptr, ##28228
0cef0                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cef0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cef4     04 00 90 3D |  if_ae	jmp	#LR__1034
0cef8                 | LR__1033
0cef8                 | ' return 0  
0cef8     00 FA 05 F6 | 	mov	result1, #0
0cefc                 | LR__1034
0cefc     A7 F0 03 F6 | 	mov	ptra, fp
0cf00     B2 00 A0 FD | 	call	#popregs_
0cf04                 | _getvalue_ret
0cf04     2D 00 64 FD | 	ret
0cf08                 | 
0cf08                 | ' 
0cf08                 | ' ' Get a function result 
0cf08                 | ' 
0cf08                 | ' function getfun(m as integer) as ulong
0cf08                 | _getfun
0cf08     0F 4A 05 F6 | 	mov	COUNT_, #15
0cf0c     A8 00 A0 FD | 	call	#pushregs_
0cf10                 | _getfun_enter
0cf10     09 2D 02 F6 | 	mov	local04, arg01
0cf14     37 00 00 FF 
0cf18     44 E4 05 F1 | 	add	objptr, ##28228
0cf1c     F2 2E 02 FB | 	rdlong	local05, objptr
0cf20     17 31 02 F6 | 	mov	local06, local05
0cf24     00 32 06 F6 | 	mov	local07, #0
0cf28                 | ' oldct=ct
0cf28                 | ' numpar=0
0cf28                 | ' if lparts(ct+1).token=token_lpar then
0cf28     01 2E 06 F1 | 	add	local05, #1
0cf2c     03 2E 66 F0 | 	shl	local05, #3
0cf30     02 00 00 FF 
0cf34     38 E4 85 F1 | 	sub	objptr, ##1080
0cf38     F2 2E 02 F1 | 	add	local05, objptr
0cf3c     04 2E 06 F1 | 	add	local05, #4
0cf40     17 2F 02 FB | 	rdlong	local05, local05
0cf44     15 2E 0E F2 | 	cmp	local05, #21 wz
0cf48     35 00 00 FF 
0cf4c     0C E4 85 F1 | 	sub	objptr, ##27148
0cf50     54 01 90 5D |  if_ne	jmp	#LR__1044
0cf54     37 00 00 FF 
0cf58     44 E4 05 F1 | 	add	objptr, ##28228
0cf5c     F2 34 02 FB | 	rdlong	local08, objptr
0cf60     01 34 06 F1 | 	add	local08, #1
0cf64     F2 34 62 FC | 	wrlong	local08, objptr
0cf68     37 00 00 FF 
0cf6c     44 E4 85 F1 | 	sub	objptr, ##28228
0cf70                 | '   ct+=1 											' omit this lpar, this is for expr list
0cf70                 | '   do
0cf70                 | LR__1040
0cf70     37 00 00 FF 
0cf74     44 E4 05 F1 | 	add	objptr, ##28228
0cf78     F2 2E 02 FB | 	rdlong	local05, objptr
0cf7c     01 2E 06 F1 | 	add	local05, #1
0cf80     F2 2E 62 FC | 	wrlong	local05, objptr
0cf84                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cf84                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cf84     03 2E 66 F0 | 	shl	local05, #3
0cf88     02 00 00 FF 
0cf8c     38 E4 85 F1 | 	sub	objptr, ##1080
0cf90     F2 2E 02 F1 | 	add	local05, objptr
0cf94     04 2E 06 F1 | 	add	local05, #4
0cf98     17 35 02 FB | 	rdlong	local08, local05
0cf9c     15 34 0E F2 | 	cmp	local08, #21 wz
0cfa0     35 00 00 FF 
0cfa4     0C E4 85 F1 | 	sub	objptr, ##27148
0cfa8     44 00 90 5D |  if_ne	jmp	#LR__1041
0cfac     37 00 00 FF 
0cfb0     44 E4 05 F1 | 	add	objptr, ##28228
0cfb4     F2 34 02 FB | 	rdlong	local08, objptr
0cfb8     01 34 06 F1 | 	add	local08, #1
0cfbc     F2 34 62 FC | 	wrlong	local08, objptr
0cfc0     37 00 00 FF 
0cfc4     44 E4 85 F1 | 	sub	objptr, ##28228
0cfc8     C4 EF BF FD | 	call	#_expr
0cfcc     FD 36 02 F6 | 	mov	local09, result1
0cfd0     37 00 00 FF 
0cfd4     44 E4 05 F1 | 	add	objptr, ##28228
0cfd8     F2 34 02 FB | 	rdlong	local08, objptr
0cfdc     01 34 06 F1 | 	add	local08, #1
0cfe0     F2 34 62 FC | 	wrlong	local08, objptr
0cfe4     37 00 00 FF 
0cfe8     44 E4 85 F1 | 	sub	objptr, ##28228
0cfec     08 00 90 FD | 	jmp	#LR__1042
0cff0                 | LR__1041
0cff0     9C EF BF FD | 	call	#_expr
0cff4     FD 36 02 F6 | 	mov	local09, result1
0cff8                 | LR__1042
0cff8                 | '     if err>0 then return err
0cff8     01 36 16 F2 | 	cmp	local09, #1 wc
0cffc     1B FB 01 36 |  if_ae	mov	result1, local09
0d000     3C 02 90 3D |  if_ae	jmp	#LR__1046
0d004     01 32 06 F1 | 	add	local07, #1
0d008     37 00 00 FF 
0d00c     44 E4 05 F1 | 	add	objptr, ##28228
0d010     F2 2E 02 FB | 	rdlong	local05, objptr
0d014     03 2E 66 F0 | 	shl	local05, #3
0d018     02 00 00 FF 
0d01c     38 E4 85 F1 | 	sub	objptr, ##1080
0d020     F2 2E 02 F1 | 	add	local05, objptr
0d024     04 2E 06 F1 | 	add	local05, #4
0d028     17 37 02 FB | 	rdlong	local09, local05
0d02c     14 36 0E F2 | 	cmp	local09, #20 wz
0d030     35 00 00 FF 
0d034     0C E4 85 F1 | 	sub	objptr, ##27148
0d038     34 00 90 AD |  if_e	jmp	#LR__1043
0d03c     37 00 00 FF 
0d040     44 E4 05 F1 | 	add	objptr, ##28228
0d044     F2 36 02 FB | 	rdlong	local09, objptr
0d048     03 36 66 F0 | 	shl	local09, #3
0d04c     02 00 00 FF 
0d050     38 E4 85 F1 | 	sub	objptr, ##1080
0d054     F2 36 02 F1 | 	add	local09, objptr
0d058     04 36 06 F1 | 	add	local09, #4
0d05c     1B 37 02 FB | 	rdlong	local09, local09
0d060     FE 37 0E F2 | 	cmp	local09, #510 wz
0d064     35 00 00 FF 
0d068     0C E4 85 F1 | 	sub	objptr, ##27148
0d06c     00 FF 9F 5D |  if_ne	jmp	#LR__1040
0d070                 | LR__1043
0d070                 | '   if lparts(ct).token=token_end then return 14
0d070     37 00 00 FF 
0d074     44 E4 05 F1 | 	add	objptr, ##28228
0d078     F2 2E 02 FB | 	rdlong	local05, objptr
0d07c     03 2E 66 F0 | 	shl	local05, #3
0d080     02 00 00 FF 
0d084     38 E4 85 F1 | 	sub	objptr, ##1080
0d088     F2 2E 02 F1 | 	add	local05, objptr
0d08c     04 2E 06 F1 | 	add	local05, #4
0d090     17 37 02 FB | 	rdlong	local09, local05
0d094     FE 37 0E F2 | 	cmp	local09, #510 wz
0d098     35 00 00 FF 
0d09c     0C E4 85 F1 | 	sub	objptr, ##27148
0d0a0     0E FA 05 A6 |  if_e	mov	result1, #14
0d0a4     98 01 90 AD |  if_e	jmp	#LR__1046
0d0a8                 | LR__1044
0d0a8     19 27 02 F6 | 	mov	local01, local07
0d0ac     03 30 66 F0 | 	shl	local06, #3
0d0b0     35 00 00 FF 
0d0b4     0C E4 05 F1 | 	add	objptr, ##27148
0d0b8     F2 30 02 F1 | 	add	local06, objptr
0d0bc     04 30 06 F1 | 	add	local06, #4
0d0c0     18 2B 02 FB | 	rdlong	local03, local06
0d0c4     13 35 02 F6 | 	mov	local08, local01
0d0c8     14 39 02 F6 | 	mov	local10, local02
0d0cc     15 3B 02 F6 | 	mov	local11, local03
0d0d0     15 00 00 FF 
0d0d4     70 E4 05 F1 | 	add	objptr, ##10864
0d0d8     F2 3C 02 FB | 	rdlong	local12, objptr
0d0dc     1E 3F 02 F6 | 	mov	local13, local12
0d0e0     01 3E 66 F0 | 	shl	local13, #1
0d0e4     1E 3F 02 F1 | 	add	local13, local12
0d0e8     02 3E 66 F0 | 	shl	local13, #2
0d0ec     03 00 00 FF 
0d0f0     00 E4 85 F1 | 	sub	objptr, ##1536
0d0f4     F2 3E 02 F1 | 	add	local13, objptr
0d0f8     1F 35 62 FC | 	wrlong	local08, local13
0d0fc     03 00 00 FF 
0d100     00 E4 05 F1 | 	add	objptr, ##1536
0d104     F2 34 02 FB | 	rdlong	local08, objptr
0d108     1A 41 02 F6 | 	mov	local14, local08
0d10c     01 40 66 F0 | 	shl	local14, #1
0d110     1A 41 02 F1 | 	add	local14, local08
0d114     02 40 66 F0 | 	shl	local14, #2
0d118     03 00 00 FF 
0d11c     00 E4 85 F1 | 	sub	objptr, ##1536
0d120     F2 40 02 F1 | 	add	local14, objptr
0d124     04 40 06 F1 | 	add	local14, #4
0d128     20 39 62 FC | 	wrlong	local10, local14
0d12c     03 00 00 FF 
0d130     00 E4 05 F1 | 	add	objptr, ##1536
0d134     F2 34 02 FB | 	rdlong	local08, objptr
0d138     1A 43 02 F6 | 	mov	local15, local08
0d13c     01 42 66 F0 | 	shl	local15, #1
0d140     1A 43 02 F1 | 	add	local15, local08
0d144     02 42 66 F0 | 	shl	local15, #2
0d148     03 00 00 FF 
0d14c     00 E4 85 F1 | 	sub	objptr, ##1536
0d150     F2 42 02 F1 | 	add	local15, objptr
0d154     08 42 06 F1 | 	add	local15, #8
0d158     21 3B 62 FC | 	wrlong	local11, local15
0d15c     03 00 00 FF 
0d160     00 E4 05 F1 | 	add	objptr, ##1536
0d164     F2 34 02 FB | 	rdlong	local08, objptr
0d168     01 34 06 F1 | 	add	local08, #1
0d16c     F2 34 62 FC | 	wrlong	local08, objptr
0d170     4A 00 00 FF 
0d174     7C E4 85 F1 | 	sub	objptr, ##38012
0d178                 | ' t2.result.uresult=numpar
0d178                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d178                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d178                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d178     FF FF 7F FF 
0d17c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d180     B8 00 90 5D |  if_ne	jmp	#LR__1045
0d184     15 2A 06 F6 | 	mov	local03, #21
0d188     13 35 02 F6 | 	mov	local08, local01
0d18c     14 39 02 F6 | 	mov	local10, local02
0d190     15 3B 02 F6 | 	mov	local11, local03
0d194     4A 00 00 FF 
0d198     7C E4 05 F1 | 	add	objptr, ##38012
0d19c     F2 3C 02 FB | 	rdlong	local12, objptr
0d1a0     1E 3F 02 F6 | 	mov	local13, local12
0d1a4     01 3E 66 F0 | 	shl	local13, #1
0d1a8     1E 3F 02 F1 | 	add	local13, local12
0d1ac     02 3E 66 F0 | 	shl	local13, #2
0d1b0     03 00 00 FF 
0d1b4     00 E4 85 F1 | 	sub	objptr, ##1536
0d1b8     F2 3E 02 F1 | 	add	local13, objptr
0d1bc     1F 35 62 FC | 	wrlong	local08, local13
0d1c0     03 00 00 FF 
0d1c4     00 E4 05 F1 | 	add	objptr, ##1536
0d1c8     F2 42 02 FB | 	rdlong	local15, objptr
0d1cc     21 41 02 F6 | 	mov	local14, local15
0d1d0     01 40 66 F0 | 	shl	local14, #1
0d1d4     21 41 02 F1 | 	add	local14, local15
0d1d8     02 40 66 F0 | 	shl	local14, #2
0d1dc     03 00 00 FF 
0d1e0     00 E4 85 F1 | 	sub	objptr, ##1536
0d1e4     F2 40 02 F1 | 	add	local14, objptr
0d1e8     04 40 06 F1 | 	add	local14, #4
0d1ec     20 39 62 FC | 	wrlong	local10, local14
0d1f0     03 00 00 FF 
0d1f4     00 E4 05 F1 | 	add	objptr, ##1536
0d1f8     F2 40 02 FB | 	rdlong	local14, objptr
0d1fc     20 43 02 F6 | 	mov	local15, local14
0d200     01 42 66 F0 | 	shl	local15, #1
0d204     20 43 02 F1 | 	add	local15, local14
0d208     02 42 66 F0 | 	shl	local15, #2
0d20c     03 00 00 FF 
0d210     00 E4 85 F1 | 	sub	objptr, ##1536
0d214     F2 42 02 F1 | 	add	local15, objptr
0d218     08 42 06 F1 | 	add	local15, #8
0d21c     21 3B 62 FC | 	wrlong	local11, local15
0d220     03 00 00 FF 
0d224     00 E4 05 F1 | 	add	objptr, ##1536
0d228     F2 34 02 FB | 	rdlong	local08, objptr
0d22c     01 34 06 F1 | 	add	local08, #1
0d230     F2 34 62 FC | 	wrlong	local08, objptr
0d234     4A 00 00 FF 
0d238     7C E4 85 F1 | 	sub	objptr, ##38012
0d23c                 | LR__1045
0d23c                 | ' return 0
0d23c     00 FA 05 F6 | 	mov	result1, #0
0d240                 | LR__1046
0d240     A7 F0 03 F6 | 	mov	ptra, fp
0d244     B2 00 A0 FD | 	call	#popregs_
0d248                 | _getfun_ret
0d248     2D 00 64 FD | 	ret
0d24c                 | 
0d24c                 | '   
0d24c                 | '   
0d24c                 | ' function getvar(m as integer) as ulong
0d24c                 | _getvar
0d24c     11 4A 05 F6 | 	mov	COUNT_, #17
0d250     A8 00 A0 FD | 	call	#pushregs_
0d254                 | _getvar_enter
0d254     09 2D 02 F6 | 	mov	local04, arg01
0d258     37 00 00 FF 
0d25c     44 E4 05 F1 | 	add	objptr, ##28228
0d260     F2 2E 02 FB | 	rdlong	local05, objptr
0d264     03 2E 66 F0 | 	shl	local05, #3
0d268     02 00 00 FF 
0d26c     38 E4 85 F1 | 	sub	objptr, ##1080
0d270     F2 2E 02 F1 | 	add	local05, objptr
0d274     17 31 02 FB | 	rdlong	local06, local05
0d278     01 32 66 F6 | 	neg	local07, #1
0d27c                 | ' 
0d27c                 | ' varname$=lparts(ct).part$
0d27c                 | ' j=-1
0d27c                 | ' 
0d27c                 | ' for i=0 to varnum-1
0d27c     00 34 06 F6 | 	mov	local08, #0
0d280     04 E4 85 F1 | 	sub	objptr, #4
0d284     F2 36 02 FB | 	rdlong	local09, objptr
0d288     35 00 00 FF 
0d28c     08 E4 85 F1 | 	sub	objptr, ##27144
0d290                 | LR__1050
0d290     1B 35 52 F2 | 	cmps	local08, local09 wc
0d294     38 00 90 3D |  if_ae	jmp	#LR__1051
0d298                 | '   if variables(i).name=varname$ then j=i : exit
0d298     1A 2F 02 F6 | 	mov	local05, local08
0d29c     04 2E 66 F0 | 	shl	local05, #4
0d2a0     14 00 00 FF 
0d2a4     F8 E5 05 F1 | 	add	objptr, ##10744
0d2a8     F2 2E 02 F1 | 	add	local05, objptr
0d2ac     17 13 02 FB | 	rdlong	arg01, local05
0d2b0     18 15 02 F6 | 	mov	arg02, local06
0d2b4     14 00 00 FF 
0d2b8     F8 E5 85 F1 | 	sub	objptr, ##10744
0d2bc     20 A2 B1 FD | 	call	#__system___string_cmp
0d2c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0d2c4     1A 33 02 A6 |  if_e	mov	local07, local08
0d2c8     01 34 06 51 |  if_ne	add	local08, #1
0d2cc     C0 FF 9F 5D |  if_ne	jmp	#LR__1050
0d2d0                 | LR__1051
0d2d0                 | ' if  j=-1 andalso varnum<maxvars then   
0d2d0     FF FF 7F FF 
0d2d4     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d2d8     A8 00 90 5D |  if_ne	jmp	#LR__1052
0d2dc     35 00 00 FF 
0d2e0     08 E4 05 F1 | 	add	objptr, ##27144
0d2e4     F2 36 02 FB | 	rdlong	local09, objptr
0d2e8     35 00 00 FF 
0d2ec     08 E4 85 F1 | 	sub	objptr, ##27144
0d2f0     02 00 00 FF 
0d2f4     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d2f8     88 00 90 3D |  if_ae	jmp	#LR__1052
0d2fc     35 00 00 FF 
0d300     08 E4 05 F1 | 	add	objptr, ##27144
0d304     F2 2E 02 FB | 	rdlong	local05, objptr
0d308     04 2E 66 F0 | 	shl	local05, #4
0d30c     20 00 00 FF 
0d310     10 E4 85 F1 | 	sub	objptr, ##16400
0d314     F2 2E 02 F1 | 	add	local05, objptr
0d318     17 31 62 FC | 	wrlong	local06, local05
0d31c     20 00 00 FF 
0d320     10 E4 05 F1 | 	add	objptr, ##16400
0d324     F2 2E 02 FB | 	rdlong	local05, objptr
0d328     04 2E 66 F0 | 	shl	local05, #4
0d32c     20 00 00 FF 
0d330     10 E4 85 F1 | 	sub	objptr, ##16400
0d334     F2 2E 02 F1 | 	add	local05, objptr
0d338     04 2E 06 F1 | 	add	local05, #4
0d33c     17 01 68 FC | 	wrlong	#0, local05
0d340     20 00 00 FF 
0d344     10 E4 05 F1 | 	add	objptr, ##16400
0d348     F2 2E 02 FB | 	rdlong	local05, objptr
0d34c     04 2E 66 F0 | 	shl	local05, #4
0d350     20 00 00 FF 
0d354     10 E4 85 F1 | 	sub	objptr, ##16400
0d358     F2 2E 02 F1 | 	add	local05, objptr
0d35c     0C 2E 06 F1 | 	add	local05, #12
0d360     17 39 68 FC | 	wrlong	#28, local05
0d364     20 00 00 FF 
0d368     10 E4 05 F1 | 	add	objptr, ##16400
0d36c     F2 36 02 FB | 	rdlong	local09, objptr
0d370     1B 33 02 F6 | 	mov	local07, local09
0d374     01 36 06 F1 | 	add	local09, #1
0d378     F2 36 62 FC | 	wrlong	local09, objptr
0d37c     35 00 00 FF 
0d380     08 E4 85 F1 | 	sub	objptr, ##27144
0d384                 | LR__1052
0d384     00 36 06 F6 | 	mov	local09, #0
0d388                 | ' numpar=0
0d388                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d388     37 00 00 FF 
0d38c     44 E4 05 F1 | 	add	objptr, ##28228
0d390     F2 2E 02 FB | 	rdlong	local05, objptr
0d394     01 2E 06 F1 | 	add	local05, #1
0d398     03 2E 66 F0 | 	shl	local05, #3
0d39c     02 00 00 FF 
0d3a0     38 E4 85 F1 | 	sub	objptr, ##1080
0d3a4     F2 2E 02 F1 | 	add	local05, objptr
0d3a8     04 2E 06 F1 | 	add	local05, #4
0d3ac     17 35 02 FB | 	rdlong	local08, local05
0d3b0     15 34 0E F2 | 	cmp	local08, #21 wz
0d3b4     35 00 00 FF 
0d3b8     0C E4 85 F1 | 	sub	objptr, ##27148
0d3bc     54 01 90 5D |  if_ne	jmp	#LR__1057
0d3c0     37 00 00 FF 
0d3c4     44 E4 05 F1 | 	add	objptr, ##28228
0d3c8     F2 38 02 FB | 	rdlong	local10, objptr
0d3cc     01 38 06 F1 | 	add	local10, #1
0d3d0     F2 38 62 FC | 	wrlong	local10, objptr
0d3d4     37 00 00 FF 
0d3d8     44 E4 85 F1 | 	sub	objptr, ##28228
0d3dc                 | '   ct+=1 											' omit this lpar, this is for expr list
0d3dc                 | '   do
0d3dc                 | LR__1053
0d3dc     37 00 00 FF 
0d3e0     44 E4 05 F1 | 	add	objptr, ##28228
0d3e4     F2 2E 02 FB | 	rdlong	local05, objptr
0d3e8     01 2E 06 F1 | 	add	local05, #1
0d3ec     F2 2E 62 FC | 	wrlong	local05, objptr
0d3f0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d3f0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d3f0     03 2E 66 F0 | 	shl	local05, #3
0d3f4     02 00 00 FF 
0d3f8     38 E4 85 F1 | 	sub	objptr, ##1080
0d3fc     F2 2E 02 F1 | 	add	local05, objptr
0d400     04 2E 06 F1 | 	add	local05, #4
0d404     17 39 02 FB | 	rdlong	local10, local05
0d408     15 38 0E F2 | 	cmp	local10, #21 wz
0d40c     35 00 00 FF 
0d410     0C E4 85 F1 | 	sub	objptr, ##27148
0d414     44 00 90 5D |  if_ne	jmp	#LR__1054
0d418     37 00 00 FF 
0d41c     44 E4 05 F1 | 	add	objptr, ##28228
0d420     F2 38 02 FB | 	rdlong	local10, objptr
0d424     01 38 06 F1 | 	add	local10, #1
0d428     F2 38 62 FC | 	wrlong	local10, objptr
0d42c     37 00 00 FF 
0d430     44 E4 85 F1 | 	sub	objptr, ##28228
0d434     58 EB BF FD | 	call	#_expr
0d438     FD 3A 02 F6 | 	mov	local11, result1
0d43c     37 00 00 FF 
0d440     44 E4 05 F1 | 	add	objptr, ##28228
0d444     F2 38 02 FB | 	rdlong	local10, objptr
0d448     01 38 06 F1 | 	add	local10, #1
0d44c     F2 38 62 FC | 	wrlong	local10, objptr
0d450     37 00 00 FF 
0d454     44 E4 85 F1 | 	sub	objptr, ##28228
0d458     08 00 90 FD | 	jmp	#LR__1055
0d45c                 | LR__1054
0d45c     30 EB BF FD | 	call	#_expr
0d460     FD 3A 02 F6 | 	mov	local11, result1
0d464                 | LR__1055
0d464                 | '     if err>0 then return err
0d464     01 3A 56 F2 | 	cmps	local11, #1 wc
0d468     1D FB 01 36 |  if_ae	mov	result1, local11
0d46c     2C 02 90 3D |  if_ae	jmp	#LR__1059
0d470     01 36 06 F1 | 	add	local09, #1
0d474     37 00 00 FF 
0d478     44 E4 05 F1 | 	add	objptr, ##28228
0d47c     F2 2E 02 FB | 	rdlong	local05, objptr
0d480     03 2E 66 F0 | 	shl	local05, #3
0d484     02 00 00 FF 
0d488     38 E4 85 F1 | 	sub	objptr, ##1080
0d48c     F2 2E 02 F1 | 	add	local05, objptr
0d490     04 2E 06 F1 | 	add	local05, #4
0d494     17 3B 02 FB | 	rdlong	local11, local05
0d498     14 3A 0E F2 | 	cmp	local11, #20 wz
0d49c     35 00 00 FF 
0d4a0     0C E4 85 F1 | 	sub	objptr, ##27148
0d4a4     34 00 90 AD |  if_e	jmp	#LR__1056
0d4a8     37 00 00 FF 
0d4ac     44 E4 05 F1 | 	add	objptr, ##28228
0d4b0     F2 3A 02 FB | 	rdlong	local11, objptr
0d4b4     03 3A 66 F0 | 	shl	local11, #3
0d4b8     02 00 00 FF 
0d4bc     38 E4 85 F1 | 	sub	objptr, ##1080
0d4c0     F2 3A 02 F1 | 	add	local11, objptr
0d4c4     04 3A 06 F1 | 	add	local11, #4
0d4c8     1D 3B 02 FB | 	rdlong	local11, local11
0d4cc     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d4d0     35 00 00 FF 
0d4d4     0C E4 85 F1 | 	sub	objptr, ##27148
0d4d8     00 FF 9F 5D |  if_ne	jmp	#LR__1053
0d4dc                 | LR__1056
0d4dc                 | '     if lparts(ct).token=token_end then return 14
0d4dc     37 00 00 FF 
0d4e0     44 E4 05 F1 | 	add	objptr, ##28228
0d4e4     F2 2E 02 FB | 	rdlong	local05, objptr
0d4e8     03 2E 66 F0 | 	shl	local05, #3
0d4ec     02 00 00 FF 
0d4f0     38 E4 85 F1 | 	sub	objptr, ##1080
0d4f4     F2 2E 02 F1 | 	add	local05, objptr
0d4f8     04 2E 06 F1 | 	add	local05, #4
0d4fc     17 3B 02 FB | 	rdlong	local11, local05
0d500     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d504     35 00 00 FF 
0d508     0C E4 85 F1 | 	sub	objptr, ##27148
0d50c     0E FA 05 A6 |  if_e	mov	result1, #14
0d510     88 01 90 AD |  if_e	jmp	#LR__1059
0d514                 | LR__1057
0d514     1B 29 02 F6 | 	mov	local02, local09
0d518     11 2A 06 F6 | 	mov	local03, #17
0d51c     19 27 02 F6 | 	mov	local01, local07
0d520     13 39 02 F6 | 	mov	local10, local01
0d524     14 3D 02 F6 | 	mov	local12, local02
0d528     15 3F 02 F6 | 	mov	local13, local03
0d52c     4A 00 00 FF 
0d530     7C E4 05 F1 | 	add	objptr, ##38012
0d534     F2 40 02 FB | 	rdlong	local14, objptr
0d538     20 43 02 F6 | 	mov	local15, local14
0d53c     01 42 66 F0 | 	shl	local15, #1
0d540     20 43 02 F1 | 	add	local15, local14
0d544     02 42 66 F0 | 	shl	local15, #2
0d548     03 00 00 FF 
0d54c     00 E4 85 F1 | 	sub	objptr, ##1536
0d550     F2 42 02 F1 | 	add	local15, objptr
0d554     21 39 62 FC | 	wrlong	local10, local15
0d558     03 00 00 FF 
0d55c     00 E4 05 F1 | 	add	objptr, ##1536
0d560     F2 38 02 FB | 	rdlong	local10, objptr
0d564     1C 45 02 F6 | 	mov	local16, local10
0d568     01 44 66 F0 | 	shl	local16, #1
0d56c     1C 45 02 F1 | 	add	local16, local10
0d570     02 44 66 F0 | 	shl	local16, #2
0d574     03 00 00 FF 
0d578     00 E4 85 F1 | 	sub	objptr, ##1536
0d57c     F2 44 02 F1 | 	add	local16, objptr
0d580     04 44 06 F1 | 	add	local16, #4
0d584     22 3D 62 FC | 	wrlong	local12, local16
0d588     03 00 00 FF 
0d58c     00 E4 05 F1 | 	add	objptr, ##1536
0d590     F2 38 02 FB | 	rdlong	local10, objptr
0d594     1C 47 02 F6 | 	mov	local17, local10
0d598     01 46 66 F0 | 	shl	local17, #1
0d59c     1C 47 02 F1 | 	add	local17, local10
0d5a0     02 46 66 F0 | 	shl	local17, #2
0d5a4     03 00 00 FF 
0d5a8     00 E4 85 F1 | 	sub	objptr, ##1536
0d5ac     F2 46 02 F1 | 	add	local17, objptr
0d5b0     08 46 06 F1 | 	add	local17, #8
0d5b4     23 3F 62 FC | 	wrlong	local13, local17
0d5b8     03 00 00 FF 
0d5bc     00 E4 05 F1 | 	add	objptr, ##1536
0d5c0     F2 38 02 FB | 	rdlong	local10, objptr
0d5c4     01 38 06 F1 | 	add	local10, #1
0d5c8     F2 38 62 FC | 	wrlong	local10, objptr
0d5cc     4A 00 00 FF 
0d5d0     7C E4 85 F1 | 	sub	objptr, ##38012
0d5d4                 | ' t2.result.twowords(1)=numpar
0d5d4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d5d4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d5d4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d5d4     FF FF 7F FF 
0d5d8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d5dc     B8 00 90 5D |  if_ne	jmp	#LR__1058
0d5e0     15 2A 06 F6 | 	mov	local03, #21
0d5e4     13 39 02 F6 | 	mov	local10, local01
0d5e8     14 3D 02 F6 | 	mov	local12, local02
0d5ec     15 3F 02 F6 | 	mov	local13, local03
0d5f0     4A 00 00 FF 
0d5f4     7C E4 05 F1 | 	add	objptr, ##38012
0d5f8     F2 40 02 FB | 	rdlong	local14, objptr
0d5fc     20 43 02 F6 | 	mov	local15, local14
0d600     01 42 66 F0 | 	shl	local15, #1
0d604     20 43 02 F1 | 	add	local15, local14
0d608     02 42 66 F0 | 	shl	local15, #2
0d60c     03 00 00 FF 
0d610     00 E4 85 F1 | 	sub	objptr, ##1536
0d614     F2 42 02 F1 | 	add	local15, objptr
0d618     21 39 62 FC | 	wrlong	local10, local15
0d61c     03 00 00 FF 
0d620     00 E4 05 F1 | 	add	objptr, ##1536
0d624     F2 46 02 FB | 	rdlong	local17, objptr
0d628     23 45 02 F6 | 	mov	local16, local17
0d62c     01 44 66 F0 | 	shl	local16, #1
0d630     23 45 02 F1 | 	add	local16, local17
0d634     02 44 66 F0 | 	shl	local16, #2
0d638     03 00 00 FF 
0d63c     00 E4 85 F1 | 	sub	objptr, ##1536
0d640     F2 44 02 F1 | 	add	local16, objptr
0d644     04 44 06 F1 | 	add	local16, #4
0d648     22 3D 62 FC | 	wrlong	local12, local16
0d64c     03 00 00 FF 
0d650     00 E4 05 F1 | 	add	objptr, ##1536
0d654     F2 44 02 FB | 	rdlong	local16, objptr
0d658     22 47 02 F6 | 	mov	local17, local16
0d65c     01 46 66 F0 | 	shl	local17, #1
0d660     22 47 02 F1 | 	add	local17, local16
0d664     02 46 66 F0 | 	shl	local17, #2
0d668     03 00 00 FF 
0d66c     00 E4 85 F1 | 	sub	objptr, ##1536
0d670     F2 46 02 F1 | 	add	local17, objptr
0d674     08 46 06 F1 | 	add	local17, #8
0d678     23 3F 62 FC | 	wrlong	local13, local17
0d67c     03 00 00 FF 
0d680     00 E4 05 F1 | 	add	objptr, ##1536
0d684     F2 38 02 FB | 	rdlong	local10, objptr
0d688     01 38 06 F1 | 	add	local10, #1
0d68c     F2 38 62 FC | 	wrlong	local10, objptr
0d690     4A 00 00 FF 
0d694     7C E4 85 F1 | 	sub	objptr, ##38012
0d698                 | LR__1058
0d698                 | ' return 0
0d698     00 FA 05 F6 | 	mov	result1, #0
0d69c                 | LR__1059
0d69c     A7 F0 03 F6 | 	mov	ptra, fp
0d6a0     B2 00 A0 FD | 	call	#popregs_
0d6a4                 | _getvar_ret
0d6a4     2D 00 64 FD | 	ret
0d6a8                 | 
0d6a8                 | ' 
0d6a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d6a8                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d6a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d6a8                 | ' 
0d6a8                 | ' 
0d6a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d6a8                 | ' '                                                                                                                                       -
0d6a8                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d6a8                 | ' '                                                                                                                                       -
0d6a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d6a8                 | ' 
0d6a8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d6a8                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d6a8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d6a8                 | ' 
0d6a8                 | ' function execute_line (astart=0 as integer) as integer
0d6a8                 | _execute_line
0d6a8     04 4A 05 F6 | 	mov	COUNT_, #4
0d6ac     A8 00 A0 FD | 	call	#pushregs_
0d6b0     50 00 00 FF 
0d6b4     BC E4 05 F1 | 	add	objptr, ##41148
0d6b8     F2 00 68 FC | 	wrlong	#0, objptr
0d6bc                 | ' 
0d6bc                 | ' runptr2=0
0d6bc                 | ' for lineptr_e=astart to lineptr-1
0d6bc     06 00 00 FF 
0d6c0     3C E4 85 F1 | 	sub	objptr, ##3132
0d6c4     F2 12 62 FC | 	wrlong	arg01, objptr
0d6c8     04 E4 85 F1 | 	sub	objptr, #4
0d6cc     F2 26 02 FB | 	rdlong	local01, objptr
0d6d0     4A 00 00 FF 
0d6d4     7C E4 85 F1 | 	sub	objptr, ##38012
0d6d8                 | LR__1060
0d6d8     4A 00 00 FF 
0d6dc     80 E4 05 F1 | 	add	objptr, ##38016
0d6e0     F2 FA 01 FB | 	rdlong	result1, objptr
0d6e4     4A 00 00 FF 
0d6e8     80 E4 85 F1 | 	sub	objptr, ##38016
0d6ec     13 FB 51 F2 | 	cmps	result1, local01 wc
0d6f0     98 00 90 3D |  if_ae	jmp	#LR__1061
0d6f4     4A 00 00 FF 
0d6f8     80 E4 05 F1 | 	add	objptr, ##38016
0d6fc     F2 FA 01 FB | 	rdlong	result1, objptr
0d700     FD 28 02 F6 | 	mov	local02, result1
0d704     01 28 66 F0 | 	shl	local02, #1
0d708     FD 28 02 F1 | 	add	local02, result1
0d70c     02 28 66 F0 | 	shl	local02, #2
0d710     03 00 00 FF 
0d714     04 E4 85 F1 | 	sub	objptr, ##1540
0d718     F2 28 02 F1 | 	add	local02, objptr
0d71c     08 28 06 F1 | 	add	local02, #8
0d720     14 29 02 FB | 	rdlong	local02, local02
0d724     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d728     02 28 66 F0 | 	shl	local02, #2
0d72c     04 00 00 FF 
0d730     1C E4 85 F1 | 	sub	objptr, ##2076
0d734     F2 28 02 F1 | 	add	local02, objptr
0d738     14 29 02 FB | 	rdlong	local02, local02
0d73c     14 2B 02 F6 | 	mov	local03, local02
0d740     13 28 46 F7 | 	zerox	local02, #19
0d744     14 2A 46 F0 | 	shr	local03, #20
0d748     02 2A 66 F0 | 	shl	local03, #2
0d74c     ED 2A 02 F1 | 	add	local03, __methods__
0d750     15 2B 02 FB | 	rdlong	local03, local03
0d754     43 00 00 FF 
0d758     60 E4 85 F1 | 	sub	objptr, ##34400
0d75c     F2 2C 02 F6 | 	mov	local04, objptr
0d760     14 E5 01 F6 | 	mov	objptr, local02
0d764     2D 2A 62 FD | 	call	local03
0d768     16 E5 01 F6 | 	mov	objptr, local04
0d76c     4A 00 00 FF 
0d770     80 E4 05 F1 | 	add	objptr, ##38016
0d774     F2 2C 02 FB | 	rdlong	local04, objptr
0d778     01 2C 06 F1 | 	add	local04, #1
0d77c     F2 2C 62 FC | 	wrlong	local04, objptr
0d780     4A 00 00 FF 
0d784     80 E4 85 F1 | 	sub	objptr, ##38016
0d788     4C FF 9F FD | 	jmp	#LR__1060
0d78c                 | LR__1061
0d78c                 | ' return runptr2
0d78c     50 00 00 FF 
0d790     BC E4 05 F1 | 	add	objptr, ##41148
0d794     F2 FA 01 FB | 	rdlong	result1, objptr
0d798     50 00 00 FF 
0d79c     BC E4 85 F1 | 	sub	objptr, ##41148
0d7a0     A7 F0 03 F6 | 	mov	ptra, fp
0d7a4     B2 00 A0 FD | 	call	#popregs_
0d7a8                 | _execute_line_ret
0d7a8     2D 00 64 FD | 	ret
0d7ac                 | 
0d7ac                 | ' 
0d7ac                 | ' 
0d7ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d7ac                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d7ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d7ac                 | ' 
0d7ac                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d7ac                 | ' 
0d7ac                 | ' function pop() as expr_result
0d7ac                 | _pop
0d7ac                 | ' if stackpointer=0 then
0d7ac     43 00 00 FF 
0d7b0     58 E4 05 F1 | 	add	objptr, ##34392
0d7b4     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d7b8     43 00 00 FF 
0d7bc     58 E4 85 F1 | 	sub	objptr, ##34392
0d7c0     FF 04 06 A6 |  if_e	mov	_var03, #255
0d7c4     18 00 06 A6 |  if_e	mov	_var01, #24
0d7c8     68 00 90 AD |  if_e	jmp	#LR__1070
0d7cc     43 00 00 FF 
0d7d0     58 E4 05 F1 | 	add	objptr, ##34392
0d7d4     F2 FA 01 FB | 	rdlong	result1, objptr
0d7d8     01 FA 85 F1 | 	sub	result1, #1
0d7dc     F2 FA 61 FC | 	wrlong	result1, objptr
0d7e0     FD FE 01 F6 | 	mov	result3, result1
0d7e4     01 FE 65 F0 | 	shl	result3, #1
0d7e8     FD FE 01 F1 | 	add	result3, result1
0d7ec     02 FE 65 F0 | 	shl	result3, #2
0d7f0     0C 00 00 FF 
0d7f4     0C E4 85 F1 | 	sub	objptr, ##6156
0d7f8     F2 FE 01 F1 | 	add	result3, objptr
0d7fc     FF 00 02 FB | 	rdlong	_var01, result3
0d800     04 FE 05 F1 | 	add	result3, #4
0d804     FF FE 01 FB | 	rdlong	result3, result3
0d808     FD FC 01 F6 | 	mov	result2, result1
0d80c     01 FC 65 F0 | 	shl	result2, #1
0d810     FD FC 01 F1 | 	add	result2, result1
0d814     02 FC 65 F0 | 	shl	result2, #2
0d818     F2 FC 01 F1 | 	add	result2, objptr
0d81c     08 FC 05 F1 | 	add	result2, #8
0d820     FE FA 01 FB | 	rdlong	result1, result2
0d824     FF 02 02 F6 | 	mov	_var02, result3
0d828     FD 04 02 F6 | 	mov	_var03, result1
0d82c     37 00 00 FF 
0d830     4C E4 85 F1 | 	sub	objptr, ##28236
0d834                 | LR__1070
0d834                 | ' return t1
0d834     01 FD 01 F6 | 	mov	result2, _var02
0d838     02 FF 01 F6 | 	mov	result3, _var03
0d83c     00 FB 01 F6 | 	mov	result1, _var01
0d840                 | _pop_ret
0d840     2D 00 64 FD | 	ret
0d844                 | 
0d844                 | ' 
0d844                 | ' sub push(t1 as expr_result )
0d844                 | _push
0d844                 | ' if stackpointer<maxstack then 
0d844     43 00 00 FF 
0d848     58 E4 05 F1 | 	add	objptr, ##34392
0d84c     F2 00 02 FB | 	rdlong	_var01, objptr
0d850     43 00 00 FF 
0d854     58 E4 85 F1 | 	sub	objptr, ##34392
0d858     01 00 00 FF 
0d85c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d860     BC 00 90 3D |  if_ae	jmp	#LR__1080
0d864     09 01 02 FB | 	rdlong	_var01, arg01
0d868     04 12 06 F1 | 	add	arg01, #4
0d86c     09 03 02 FB | 	rdlong	_var02, arg01
0d870     04 12 06 F1 | 	add	arg01, #4
0d874     09 13 02 FB | 	rdlong	arg01, arg01
0d878     43 00 00 FF 
0d87c     58 E4 05 F1 | 	add	objptr, ##34392
0d880     F2 04 02 FB | 	rdlong	_var03, objptr
0d884     02 07 02 F6 | 	mov	_var04, _var03
0d888     01 06 66 F0 | 	shl	_var04, #1
0d88c     02 07 02 F1 | 	add	_var04, _var03
0d890     02 06 66 F0 | 	shl	_var04, #2
0d894     0C 00 00 FF 
0d898     0C E4 85 F1 | 	sub	objptr, ##6156
0d89c     F2 06 02 F1 | 	add	_var04, objptr
0d8a0     03 01 62 FC | 	wrlong	_var01, _var04
0d8a4     0C 00 00 FF 
0d8a8     0C E4 05 F1 | 	add	objptr, ##6156
0d8ac     F2 06 02 FB | 	rdlong	_var04, objptr
0d8b0     03 05 02 F6 | 	mov	_var03, _var04
0d8b4     01 04 66 F0 | 	shl	_var03, #1
0d8b8     03 05 02 F1 | 	add	_var03, _var04
0d8bc     02 04 66 F0 | 	shl	_var03, #2
0d8c0     0C 00 00 FF 
0d8c4     0C E4 85 F1 | 	sub	objptr, ##6156
0d8c8     F2 04 02 F1 | 	add	_var03, objptr
0d8cc     04 04 06 F1 | 	add	_var03, #4
0d8d0     02 03 62 FC | 	wrlong	_var02, _var03
0d8d4     0C 00 00 FF 
0d8d8     0C E4 05 F1 | 	add	objptr, ##6156
0d8dc     F2 06 02 FB | 	rdlong	_var04, objptr
0d8e0     03 05 02 F6 | 	mov	_var03, _var04
0d8e4     01 04 66 F0 | 	shl	_var03, #1
0d8e8     03 05 02 F1 | 	add	_var03, _var04
0d8ec     02 04 66 F0 | 	shl	_var03, #2
0d8f0     0C 00 00 FF 
0d8f4     0C E4 85 F1 | 	sub	objptr, ##6156
0d8f8     F2 04 02 F1 | 	add	_var03, objptr
0d8fc     08 04 06 F1 | 	add	_var03, #8
0d900     02 13 62 FC | 	wrlong	arg01, _var03
0d904     0C 00 00 FF 
0d908     0C E4 05 F1 | 	add	objptr, ##6156
0d90c     F2 00 02 FB | 	rdlong	_var01, objptr
0d910     01 00 06 F1 | 	add	_var01, #1
0d914     F2 00 62 FC | 	wrlong	_var01, objptr
0d918     43 00 00 FF 
0d91c     58 E4 85 F1 | 	sub	objptr, ##34392
0d920                 | LR__1080
0d920                 | _push_ret
0d920     2D 00 64 FD | 	ret
0d924                 | 
0d924                 | ' 
0d924                 | ' ' -------------------------------- Runtime converting functions
0d924                 | ' 
0d924                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d924                 | ' 
0d924                 | ' function  convertstring(psaddr as ulong) as string
0d924                 | _convertstring
0d924     04 4A 05 F6 | 	mov	COUNT_, #4
0d928     A8 00 A0 FD | 	call	#pushregs_
0d92c     09 27 02 F6 | 	mov	local01, arg01
0d930     3C 64 B1 FD | 	call	#_pslpeek
0d934     FD 28 02 F6 | 	mov	local02, result1
0d938     BB 01 00 FF 
0d93c     88 2B 06 F6 | 	mov	local03, ##@LR__5905
0d940                 | ' l=pslpeek(psaddr) 
0d940                 | ' s="" 
0d940                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d940     01 2C 06 F6 | 	mov	local04, #1
0d944     01 28 06 F1 | 	add	local02, #1
0d948                 | LR__1090
0d948     14 2D 52 F2 | 	cmps	local04, local02 wc
0d94c     30 00 90 3D |  if_ae	jmp	#LR__1091
0d950     13 13 02 F6 | 	mov	arg01, local01
0d954     03 12 06 F1 | 	add	arg01, #3
0d958     16 13 02 F1 | 	add	arg01, local04
0d95c     B8 63 B1 FD | 	call	#_pspeek
0d960     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d964     94 BD B1 FD | 	call	#__system__Chr_S
0d968     FD 14 02 F6 | 	mov	arg02, result1
0d96c     15 13 02 F6 | 	mov	arg01, local03
0d970     A0 9B B1 FD | 	call	#__system___string_concat
0d974     FD 2A 02 F6 | 	mov	local03, result1
0d978     01 2C 06 F1 | 	add	local04, #1
0d97c     C8 FF 9F FD | 	jmp	#LR__1090
0d980                 | LR__1091
0d980                 | ' return s
0d980     15 FB 01 F6 | 	mov	result1, local03
0d984     A7 F0 03 F6 | 	mov	ptra, fp
0d988     B2 00 A0 FD | 	call	#popregs_
0d98c                 | _convertstring_ret
0d98c     2D 00 64 FD | 	ret
0d990                 | 
0d990                 | ' 
0d990                 | ' ' converts a variable to an integer
0d990                 | ' 
0d990                 | ' function converttoint (t1 as expr_result) as integer 
0d990                 | _converttoint
0d990     02 4A 05 F6 | 	mov	COUNT_, #2
0d994     A8 00 A0 FD | 	call	#pushregs_
0d998     09 27 02 F6 | 	mov	local01, arg01
0d99c                 | ' 
0d99c                 | ' select case t1.result_type
0d99c     08 26 06 F1 | 	add	local01, #8
0d9a0     13 29 02 FB | 	rdlong	local02, local01
0d9a4     08 26 86 F1 | 	sub	local01, #8
0d9a8     1C 28 0E F2 | 	cmp	local02, #28 wz
0d9ac     2C 00 90 AD |  if_e	jmp	#LR__1100
0d9b0     1D 28 0E F2 | 	cmp	local02, #29 wz
0d9b4     2C 00 90 AD |  if_e	jmp	#LR__1101
0d9b8     1E 28 0E F2 | 	cmp	local02, #30 wz
0d9bc     2C 00 90 AD |  if_e	jmp	#LR__1102
0d9c0     1F 28 0E F2 | 	cmp	local02, #31 wz
0d9c4     34 00 90 AD |  if_e	jmp	#LR__1103
0d9c8     2B 28 0E F2 | 	cmp	local02, #43 wz
0d9cc     44 00 90 AD |  if_e	jmp	#LR__1104
0d9d0     2C 28 0E F2 | 	cmp	local02, #44 wz
0d9d4     5C 00 90 AD |  if_e	jmp	#LR__1105
0d9d8     60 00 90 FD | 	jmp	#LR__1106
0d9dc                 | LR__1100
0d9dc     13 FB 01 FB | 	rdlong	result1, local01
0d9e0     5C 00 90 FD | 	jmp	#LR__1107
0d9e4                 | LR__1101
0d9e4     13 FB 01 FB | 	rdlong	result1, local01
0d9e8     54 00 90 FD | 	jmp	#LR__1107
0d9ec                 | LR__1102
0d9ec     13 13 02 FB | 	rdlong	arg01, local01
0d9f0     01 14 06 F6 | 	mov	arg02, #1
0d9f4     04 CE B1 FD | 	call	#__system___float_tointeger
0d9f8     44 00 90 FD | 	jmp	#LR__1107
0d9fc                 | LR__1103
0d9fc     13 13 02 FB | 	rdlong	arg01, local01
0da00     3C D1 B1 FD | 	call	#__system____builtin_atof
0da04     FD 12 02 F6 | 	mov	arg01, result1
0da08     01 14 06 F6 | 	mov	arg02, #1
0da0c     EC CD B1 FD | 	call	#__system___float_tointeger
0da10     2C 00 90 FD | 	jmp	#LR__1107
0da14                 | LR__1104
0da14     13 13 02 FB | 	rdlong	arg01, local01
0da18     08 FF BF FD | 	call	#_convertstring
0da1c     FD 12 02 F6 | 	mov	arg01, result1
0da20     1C D1 B1 FD | 	call	#__system____builtin_atof
0da24     FD 12 02 F6 | 	mov	arg01, result1
0da28     01 14 06 F6 | 	mov	arg02, #1
0da2c     CC CD B1 FD | 	call	#__system___float_tointeger
0da30     0C 00 90 FD | 	jmp	#LR__1107
0da34                 | LR__1105
0da34     13 FB 01 FB | 	rdlong	result1, local01
0da38     04 00 90 FD | 	jmp	#LR__1107
0da3c                 | LR__1106
0da3c     00 FA 05 F6 | 	mov	result1, #0
0da40                 | LR__1107
0da40     A7 F0 03 F6 | 	mov	ptra, fp
0da44     B2 00 A0 FD | 	call	#popregs_
0da48                 | _converttoint_ret
0da48     2D 00 64 FD | 	ret
0da4c                 | 
0da4c                 | ' 
0da4c                 | ' ' converts a variable to float
0da4c                 | ' 
0da4c                 | ' function converttofloat (t1 as expr_result) as single
0da4c                 | _converttofloat
0da4c     03 4A 05 F6 | 	mov	COUNT_, #3
0da50     A8 00 A0 FD | 	call	#pushregs_
0da54     09 27 02 F6 | 	mov	local01, arg01
0da58                 | ' 
0da58                 | ' select case t1.result_type
0da58     08 26 06 F1 | 	add	local01, #8
0da5c     13 29 02 FB | 	rdlong	local02, local01
0da60     08 26 86 F1 | 	sub	local01, #8
0da64     1C 28 0E F2 | 	cmp	local02, #28 wz
0da68     24 00 90 AD |  if_e	jmp	#LR__1110
0da6c     1D 28 0E F2 | 	cmp	local02, #29 wz
0da70     38 00 90 AD |  if_e	jmp	#LR__1111
0da74     1E 28 0E F2 | 	cmp	local02, #30 wz
0da78     3C 00 90 AD |  if_e	jmp	#LR__1112
0da7c     1F 28 0E F2 | 	cmp	local02, #31 wz
0da80     3C 00 90 AD |  if_e	jmp	#LR__1113
0da84     2B 28 0E F2 | 	cmp	local02, #43 wz
0da88     40 00 90 AD |  if_e	jmp	#LR__1114
0da8c     50 00 90 FD | 	jmp	#LR__1115
0da90                 | LR__1110
0da90     13 13 02 FB | 	rdlong	arg01, local01
0da94     09 13 52 F6 | 	abs	arg01, arg01 wc
0da98     1F 2A C6 C9 |  if_b	decod	local03, #31
0da9c     00 2A 06 36 |  if_ae	mov	local03, #0
0daa0     8C C4 B1 FD | 	call	#__system___float_fromuns
0daa4     15 FB 61 F5 | 	xor	result1, local03
0daa8     38 00 90 FD | 	jmp	#LR__1116
0daac                 | LR__1111
0daac     13 13 02 FB | 	rdlong	arg01, local01
0dab0     7C C4 B1 FD | 	call	#__system___float_fromuns
0dab4     2C 00 90 FD | 	jmp	#LR__1116
0dab8                 | LR__1112
0dab8     13 FB 01 FB | 	rdlong	result1, local01
0dabc     24 00 90 FD | 	jmp	#LR__1116
0dac0                 | LR__1113
0dac0     13 13 02 FB | 	rdlong	arg01, local01
0dac4     78 D0 B1 FD | 	call	#__system____builtin_atof
0dac8     18 00 90 FD | 	jmp	#LR__1116
0dacc                 | LR__1114
0dacc     13 13 02 FB | 	rdlong	arg01, local01
0dad0     50 FE BF FD | 	call	#_convertstring
0dad4     FD 12 02 F6 | 	mov	arg01, result1
0dad8     64 D0 B1 FD | 	call	#__system____builtin_atof
0dadc     04 00 90 FD | 	jmp	#LR__1116
0dae0                 | LR__1115
0dae0     00 FA 05 F6 | 	mov	result1, #0
0dae4                 | LR__1116
0dae4     A7 F0 03 F6 | 	mov	ptra, fp
0dae8     B2 00 A0 FD | 	call	#popregs_
0daec                 | _converttofloat_ret
0daec     2D 00 64 FD | 	ret
0daf0                 | 
0daf0                 | ' 
0daf0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0daf0                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0daf0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0daf0                 | ' 
0daf0                 | ' 
0daf0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0daf0                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0daf0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0daf0                 | ' 
0daf0                 | ' '-------------------- abs
0daf0                 | ' 
0daf0                 | ' sub do_abs
0daf0                 | _do_abs
0daf0     01 4A 05 F6 | 	mov	COUNT_, #1
0daf4     A8 00 A0 FD | 	call	#pushregs_
0daf8     0C F0 07 F1 | 	add	ptra, #12
0dafc     AC FC BF FD | 	call	#_pop
0db00     FF 26 02 F6 | 	mov	local01, result3
0db04     A7 FA 61 FC | 	wrlong	result1, fp
0db08     04 4E 05 F1 | 	add	fp, #4
0db0c     A7 FC 61 FC | 	wrlong	result2, fp
0db10     04 4E 05 F1 | 	add	fp, #4
0db14     A7 26 62 FC | 	wrlong	local01, fp
0db18                 | ' 
0db18                 | ' t1=pop()
0db18                 | ' if t1.result_type=result_int then 
0db18     08 4E 85 F1 | 	sub	fp, #8
0db1c     1C 26 0E F2 | 	cmp	local01, #28 wz
0db20     A7 12 02 AB |  if_e	rdlong	arg01, fp
0db24     09 27 42 A6 |  if_e	abs	local01, arg01
0db28     A7 26 62 AC |  if_e	wrlong	local01, fp
0db2c     2C 00 90 AD |  if_e	jmp	#LR__1120
0db30     08 4E 05 F1 | 	add	fp, #8
0db34     A7 26 02 FB | 	rdlong	local01, fp
0db38     08 4E 85 F1 | 	sub	fp, #8
0db3c     1E 26 0E F2 | 	cmp	local01, #30 wz
0db40     A7 FA 01 AB |  if_e	rdlong	result1, fp
0db44     1F FA 05 A4 |  if_e	bitl	result1, #31
0db48     A7 FA 61 AC |  if_e	wrlong	result1, fp
0db4c     08 4E 05 51 |  if_ne	add	fp, #8
0db50     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0db54     08 4E 85 51 |  if_ne	sub	fp, #8
0db58     A7 50 68 5C |  if_ne	wrlong	#40, fp
0db5c                 | LR__1120
0db5c     A7 12 02 F6 | 	mov	arg01, fp
0db60     E0 FC BF FD | 	call	#_push
0db64     A7 F0 03 F6 | 	mov	ptra, fp
0db68     B2 00 A0 FD | 	call	#popregs_
0db6c                 | _do_abs_ret
0db6c     2D 00 64 FD | 	ret
0db70                 | 
0db70                 | ' 
0db70                 | ' '-------------------- acos
0db70                 | ' 
0db70                 | ' sub do_acos
0db70                 | _do_acos
0db70     01 4A 05 F6 | 	mov	COUNT_, #1
0db74     A8 00 A0 FD | 	call	#pushregs_
0db78     10 F0 07 F1 | 	add	ptra, #16
0db7c     4A 00 00 FF 
0db80     80 E4 05 F1 | 	add	objptr, ##38016
0db84     F2 26 02 FB | 	rdlong	local01, objptr
0db88     13 17 02 F6 | 	mov	arg03, local01
0db8c     01 16 66 F0 | 	shl	arg03, #1
0db90     13 17 02 F1 | 	add	arg03, local01
0db94     02 16 66 F0 | 	shl	arg03, #2
0db98     03 00 00 FF 
0db9c     04 E4 85 F1 | 	sub	objptr, ##1540
0dba0     F2 16 02 F1 | 	add	arg03, objptr
0dba4     0B 17 02 FB | 	rdlong	arg03, arg03
0dba8     0C 4E 05 F1 | 	add	fp, #12
0dbac     A7 16 62 FC | 	wrlong	arg03, fp
0dbb0                 | ' 
0dbb0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dbb0                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0dbb0     0C 4E 85 F1 | 	sub	fp, #12
0dbb4     02 16 16 F2 | 	cmp	arg03, #2 wc
0dbb8     47 00 00 FF 
0dbbc     7C E4 85 F1 | 	sub	objptr, ##36476
0dbc0     0C 4E 05 C1 |  if_b	add	fp, #12
0dbc4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dbc8     0C 4E 85 C1 |  if_b	sub	fp, #12
0dbcc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0dbd0     00 12 06 F6 | 	mov	arg01, #0
0dbd4     84 F5 B1 FD | 	call	#__system___getiolock_0616
0dbd8     FD 12 02 F6 | 	mov	arg01, result1
0dbdc     D8 98 B1 FD | 	call	#__system___lockmem
0dbe0     BB 01 00 FF 
0dbe4     89 15 06 F6 | 	mov	arg02, ##@LR__5906
0dbe8     00 12 06 F6 | 	mov	arg01, #0
0dbec     00 16 06 F6 | 	mov	arg03, #0
0dbf0     BC A5 B1 FD | 	call	#__system___basic_print_string
0dbf4     00 12 06 F6 | 	mov	arg01, #0
0dbf8     60 F5 B1 FD | 	call	#__system___getiolock_0616
0dbfc     FD 00 68 FC | 	wrlong	#0, result1
0dc00     27 12 06 F6 | 	mov	arg01, #39
0dc04     00 14 06 F6 | 	mov	arg02, #0
0dc08     94 5E B1 FD | 	call	#_printerror
0dc0c     64 00 90 FD | 	jmp	#LR__1131
0dc10                 | LR__1130
0dc10     98 FB BF FD | 	call	#_pop
0dc14     FF 26 02 F6 | 	mov	local01, result3
0dc18     A7 FA 61 FC | 	wrlong	result1, fp
0dc1c     04 4E 05 F1 | 	add	fp, #4
0dc20     A7 FC 61 FC | 	wrlong	result2, fp
0dc24     04 4E 05 F1 | 	add	fp, #4
0dc28     A7 26 62 FC | 	wrlong	local01, fp
0dc2c     08 4E 85 F1 | 	sub	fp, #8
0dc30     A7 12 02 F6 | 	mov	arg01, fp
0dc34     14 FE BF FD | 	call	#_converttofloat
0dc38     FD 12 02 F6 | 	mov	arg01, result1
0dc3c     34 D2 B1 FD | 	call	#__system____builtin_acosf
0dc40     FD 12 02 F6 | 	mov	arg01, result1
0dc44     52 00 00 FF 
0dc48     E4 E4 05 F1 | 	add	objptr, ##42212
0dc4c     F2 14 02 FB | 	rdlong	arg02, objptr
0dc50     52 00 00 FF 
0dc54     E4 E4 85 F1 | 	sub	objptr, ##42212
0dc58     D8 C6 B1 FD | 	call	#__system___float_mul
0dc5c     A7 FA 61 FC | 	wrlong	result1, fp
0dc60     08 4E 05 F1 | 	add	fp, #8
0dc64     A7 3C 68 FC | 	wrlong	#30, fp
0dc68     08 4E 85 F1 | 	sub	fp, #8
0dc6c     A7 12 02 F6 | 	mov	arg01, fp
0dc70     D0 FB BF FD | 	call	#_push
0dc74                 | LR__1131
0dc74     A7 F0 03 F6 | 	mov	ptra, fp
0dc78     B2 00 A0 FD | 	call	#popregs_
0dc7c                 | _do_acos_ret
0dc7c     2D 00 64 FD | 	ret
0dc80                 | 
0dc80                 | ' 
0dc80                 | ' '-------------------- asc
0dc80                 | ' 
0dc80                 | ' sub do_asc
0dc80                 | _do_asc
0dc80     01 4A 05 F6 | 	mov	COUNT_, #1
0dc84     A8 00 A0 FD | 	call	#pushregs_
0dc88     14 F0 07 F1 | 	add	ptra, #20
0dc8c     4A 00 00 FF 
0dc90     80 E4 05 F1 | 	add	objptr, ##38016
0dc94     F2 26 02 FB | 	rdlong	local01, objptr
0dc98     13 17 02 F6 | 	mov	arg03, local01
0dc9c     01 16 66 F0 | 	shl	arg03, #1
0dca0     13 17 02 F1 | 	add	arg03, local01
0dca4     02 16 66 F0 | 	shl	arg03, #2
0dca8     03 00 00 FF 
0dcac     04 E4 85 F1 | 	sub	objptr, ##1540
0dcb0     F2 16 02 F1 | 	add	arg03, objptr
0dcb4     0B 17 02 FB | 	rdlong	arg03, arg03
0dcb8     0C 4E 05 F1 | 	add	fp, #12
0dcbc     A7 16 62 FC | 	wrlong	arg03, fp
0dcc0                 | ' 
0dcc0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcc0                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0dcc0     0C 4E 85 F1 | 	sub	fp, #12
0dcc4     02 16 16 F2 | 	cmp	arg03, #2 wc
0dcc8     47 00 00 FF 
0dccc     7C E4 85 F1 | 	sub	objptr, ##36476
0dcd0     0C 4E 05 C1 |  if_b	add	fp, #12
0dcd4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dcd8     0C 4E 85 C1 |  if_b	sub	fp, #12
0dcdc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dce0     00 12 06 F6 | 	mov	arg01, #0
0dce4     74 F4 B1 FD | 	call	#__system___getiolock_0616
0dce8     FD 12 02 F6 | 	mov	arg01, result1
0dcec     C8 97 B1 FD | 	call	#__system___lockmem
0dcf0     BB 01 00 FF 
0dcf4     90 15 06 F6 | 	mov	arg02, ##@LR__5907
0dcf8     00 12 06 F6 | 	mov	arg01, #0
0dcfc     00 16 06 F6 | 	mov	arg03, #0
0dd00     AC A4 B1 FD | 	call	#__system___basic_print_string
0dd04     00 12 06 F6 | 	mov	arg01, #0
0dd08     50 F4 B1 FD | 	call	#__system___getiolock_0616
0dd0c     FD 00 68 FC | 	wrlong	#0, result1
0dd10     27 12 06 F6 | 	mov	arg01, #39
0dd14     00 14 06 F6 | 	mov	arg02, #0
0dd18     84 5D B1 FD | 	call	#_printerror
0dd1c     B4 00 90 FD | 	jmp	#LR__1143
0dd20                 | LR__1140
0dd20     88 FA BF FD | 	call	#_pop
0dd24     FF 16 02 F6 | 	mov	arg03, result3
0dd28     A7 FA 61 FC | 	wrlong	result1, fp
0dd2c     04 4E 05 F1 | 	add	fp, #4
0dd30     A7 FC 61 FC | 	wrlong	result2, fp
0dd34     04 4E 05 F1 | 	add	fp, #4
0dd38     A7 16 62 FC | 	wrlong	arg03, fp
0dd3c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dd3c     08 4E 85 F1 | 	sub	fp, #8
0dd40     2B 16 0E F2 | 	cmp	arg03, #43 wz
0dd44     18 00 90 5D |  if_ne	jmp	#LR__1141
0dd48     A7 12 02 FB | 	rdlong	arg01, fp
0dd4c     D4 FB BF FD | 	call	#_convertstring
0dd50     A7 FA 61 FC | 	wrlong	result1, fp
0dd54     08 4E 05 F1 | 	add	fp, #8
0dd58     A7 3E 68 FC | 	wrlong	#31, fp
0dd5c     08 4E 85 F1 | 	sub	fp, #8
0dd60                 | LR__1141
0dd60                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dd60     08 4E 05 F1 | 	add	fp, #8
0dd64     A7 16 02 FB | 	rdlong	arg03, fp
0dd68     08 4E 85 F1 | 	sub	fp, #8
0dd6c     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dd70     40 00 90 AD |  if_e	jmp	#LR__1142
0dd74     00 12 06 F6 | 	mov	arg01, #0
0dd78     E0 F3 B1 FD | 	call	#__system___getiolock_0616
0dd7c     FD 12 02 F6 | 	mov	arg01, result1
0dd80     34 97 B1 FD | 	call	#__system___lockmem
0dd84     BB 01 00 FF 
0dd88     96 15 06 F6 | 	mov	arg02, ##@LR__5908
0dd8c     00 12 06 F6 | 	mov	arg01, #0
0dd90     00 16 06 F6 | 	mov	arg03, #0
0dd94     18 A4 B1 FD | 	call	#__system___basic_print_string
0dd98     00 12 06 F6 | 	mov	arg01, #0
0dd9c     BC F3 B1 FD | 	call	#__system___getiolock_0616
0dda0     FD 00 68 FC | 	wrlong	#0, result1
0dda4     0F 12 06 F6 | 	mov	arg01, #15
0dda8     00 14 06 F6 | 	mov	arg02, #0
0ddac     F0 5C B1 FD | 	call	#_printerror
0ddb0     20 00 90 FD | 	jmp	#LR__1143
0ddb4                 | LR__1142
0ddb4     A7 26 02 FB | 	rdlong	local01, fp
0ddb8     13 27 C2 FA | 	rdbyte	local01, local01
0ddbc     A7 26 62 FC | 	wrlong	local01, fp
0ddc0     08 4E 05 F1 | 	add	fp, #8
0ddc4     A7 38 68 FC | 	wrlong	#28, fp
0ddc8     08 4E 85 F1 | 	sub	fp, #8
0ddcc     A7 12 02 F6 | 	mov	arg01, fp
0ddd0     70 FA BF FD | 	call	#_push
0ddd4                 | LR__1143
0ddd4     A7 F0 03 F6 | 	mov	ptra, fp
0ddd8     B2 00 A0 FD | 	call	#popregs_
0dddc                 | _do_asc_ret
0dddc     2D 00 64 FD | 	ret
0dde0                 | 
0dde0                 | ' 
0dde0                 | ' '-------------------- asin
0dde0                 | ' 
0dde0                 | ' sub do_asin
0dde0                 | _do_asin
0dde0     01 4A 05 F6 | 	mov	COUNT_, #1
0dde4     A8 00 A0 FD | 	call	#pushregs_
0dde8     10 F0 07 F1 | 	add	ptra, #16
0ddec     4A 00 00 FF 
0ddf0     80 E4 05 F1 | 	add	objptr, ##38016
0ddf4     F2 26 02 FB | 	rdlong	local01, objptr
0ddf8     13 17 02 F6 | 	mov	arg03, local01
0ddfc     01 16 66 F0 | 	shl	arg03, #1
0de00     13 17 02 F1 | 	add	arg03, local01
0de04     02 16 66 F0 | 	shl	arg03, #2
0de08     03 00 00 FF 
0de0c     04 E4 85 F1 | 	sub	objptr, ##1540
0de10     F2 16 02 F1 | 	add	arg03, objptr
0de14     0B 17 02 FB | 	rdlong	arg03, arg03
0de18     0C 4E 05 F1 | 	add	fp, #12
0de1c     A7 16 62 FC | 	wrlong	arg03, fp
0de20                 | ' 
0de20                 | ' numpar=compiledline(lineptr_e).result.uresult
0de20                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0de20     0C 4E 85 F1 | 	sub	fp, #12
0de24     02 16 16 F2 | 	cmp	arg03, #2 wc
0de28     47 00 00 FF 
0de2c     7C E4 85 F1 | 	sub	objptr, ##36476
0de30     0C 4E 05 C1 |  if_b	add	fp, #12
0de34     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0de38     0C 4E 85 C1 |  if_b	sub	fp, #12
0de3c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0de40     00 12 06 F6 | 	mov	arg01, #0
0de44     14 F3 B1 FD | 	call	#__system___getiolock_0616
0de48     FD 12 02 F6 | 	mov	arg01, result1
0de4c     68 96 B1 FD | 	call	#__system___lockmem
0de50     BB 01 00 FF 
0de54     9C 15 06 F6 | 	mov	arg02, ##@LR__5909
0de58     00 12 06 F6 | 	mov	arg01, #0
0de5c     00 16 06 F6 | 	mov	arg03, #0
0de60     4C A3 B1 FD | 	call	#__system___basic_print_string
0de64     00 12 06 F6 | 	mov	arg01, #0
0de68     F0 F2 B1 FD | 	call	#__system___getiolock_0616
0de6c     FD 00 68 FC | 	wrlong	#0, result1
0de70     27 12 06 F6 | 	mov	arg01, #39
0de74     00 14 06 F6 | 	mov	arg02, #0
0de78     24 5C B1 FD | 	call	#_printerror
0de7c     64 00 90 FD | 	jmp	#LR__1151
0de80                 | LR__1150
0de80     28 F9 BF FD | 	call	#_pop
0de84     FF 26 02 F6 | 	mov	local01, result3
0de88     A7 FA 61 FC | 	wrlong	result1, fp
0de8c     04 4E 05 F1 | 	add	fp, #4
0de90     A7 FC 61 FC | 	wrlong	result2, fp
0de94     04 4E 05 F1 | 	add	fp, #4
0de98     A7 26 62 FC | 	wrlong	local01, fp
0de9c     08 4E 85 F1 | 	sub	fp, #8
0dea0     A7 12 02 F6 | 	mov	arg01, fp
0dea4     A4 FB BF FD | 	call	#_converttofloat
0dea8     FD 12 02 F6 | 	mov	arg01, result1
0deac     78 CF B1 FD | 	call	#__system____builtin_asinf
0deb0     FD 12 02 F6 | 	mov	arg01, result1
0deb4     52 00 00 FF 
0deb8     E4 E4 05 F1 | 	add	objptr, ##42212
0debc     F2 14 02 FB | 	rdlong	arg02, objptr
0dec0     52 00 00 FF 
0dec4     E4 E4 85 F1 | 	sub	objptr, ##42212
0dec8     68 C4 B1 FD | 	call	#__system___float_mul
0decc     A7 FA 61 FC | 	wrlong	result1, fp
0ded0     08 4E 05 F1 | 	add	fp, #8
0ded4     A7 3C 68 FC | 	wrlong	#30, fp
0ded8     08 4E 85 F1 | 	sub	fp, #8
0dedc     A7 12 02 F6 | 	mov	arg01, fp
0dee0     60 F9 BF FD | 	call	#_push
0dee4                 | LR__1151
0dee4     A7 F0 03 F6 | 	mov	ptra, fp
0dee8     B2 00 A0 FD | 	call	#popregs_
0deec                 | _do_asin_ret
0deec     2D 00 64 FD | 	ret
0def0                 | 
0def0                 | ' 
0def0                 | ' '-------------------- atn
0def0                 | ' 
0def0                 | ' sub do_atn
0def0                 | _do_atn
0def0     01 4A 05 F6 | 	mov	COUNT_, #1
0def4     A8 00 A0 FD | 	call	#pushregs_
0def8     10 F0 07 F1 | 	add	ptra, #16
0defc     4A 00 00 FF 
0df00     80 E4 05 F1 | 	add	objptr, ##38016
0df04     F2 26 02 FB | 	rdlong	local01, objptr
0df08     13 17 02 F6 | 	mov	arg03, local01
0df0c     01 16 66 F0 | 	shl	arg03, #1
0df10     13 17 02 F1 | 	add	arg03, local01
0df14     02 16 66 F0 | 	shl	arg03, #2
0df18     03 00 00 FF 
0df1c     04 E4 85 F1 | 	sub	objptr, ##1540
0df20     F2 16 02 F1 | 	add	arg03, objptr
0df24     0B 17 02 FB | 	rdlong	arg03, arg03
0df28     0C 4E 05 F1 | 	add	fp, #12
0df2c     A7 16 62 FC | 	wrlong	arg03, fp
0df30                 | ' 
0df30                 | ' numpar=compiledline(lineptr_e).result.uresult
0df30                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0df30     0C 4E 85 F1 | 	sub	fp, #12
0df34     02 16 16 F2 | 	cmp	arg03, #2 wc
0df38     47 00 00 FF 
0df3c     7C E4 85 F1 | 	sub	objptr, ##36476
0df40     0C 4E 05 C1 |  if_b	add	fp, #12
0df44     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0df48     0C 4E 85 C1 |  if_b	sub	fp, #12
0df4c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0df50     00 12 06 F6 | 	mov	arg01, #0
0df54     04 F2 B1 FD | 	call	#__system___getiolock_0616
0df58     FD 12 02 F6 | 	mov	arg01, result1
0df5c     58 95 B1 FD | 	call	#__system___lockmem
0df60     BB 01 00 FF 
0df64     A3 15 06 F6 | 	mov	arg02, ##@LR__5910
0df68     00 12 06 F6 | 	mov	arg01, #0
0df6c     00 16 06 F6 | 	mov	arg03, #0
0df70     3C A2 B1 FD | 	call	#__system___basic_print_string
0df74     00 12 06 F6 | 	mov	arg01, #0
0df78     E0 F1 B1 FD | 	call	#__system___getiolock_0616
0df7c     FD 00 68 FC | 	wrlong	#0, result1
0df80     27 12 06 F6 | 	mov	arg01, #39
0df84     00 14 06 F6 | 	mov	arg02, #0
0df88     14 5B B1 FD | 	call	#_printerror
0df8c     6C 00 90 FD | 	jmp	#LR__1161
0df90                 | LR__1160
0df90     18 F8 BF FD | 	call	#_pop
0df94     FF 26 02 F6 | 	mov	local01, result3
0df98     A7 FA 61 FC | 	wrlong	result1, fp
0df9c     04 4E 05 F1 | 	add	fp, #4
0dfa0     A7 FC 61 FC | 	wrlong	result2, fp
0dfa4     04 4E 05 F1 | 	add	fp, #4
0dfa8     A7 26 62 FC | 	wrlong	local01, fp
0dfac     08 4E 85 F1 | 	sub	fp, #8
0dfb0     A7 12 02 F6 | 	mov	arg01, fp
0dfb4     94 FA BF FD | 	call	#_converttofloat
0dfb8     FD 12 02 F6 | 	mov	arg01, result1
0dfbc     00 C0 1F FF 
0dfc0     00 14 06 F6 | 	mov	arg02, ##1065353216
0dfc4     F8 CE B1 FD | 	call	#__system____builtin_atan2f
0dfc8     FD 12 02 F6 | 	mov	arg01, result1
0dfcc     52 00 00 FF 
0dfd0     E4 E4 05 F1 | 	add	objptr, ##42212
0dfd4     F2 14 02 FB | 	rdlong	arg02, objptr
0dfd8     52 00 00 FF 
0dfdc     E4 E4 85 F1 | 	sub	objptr, ##42212
0dfe0     50 C3 B1 FD | 	call	#__system___float_mul
0dfe4     A7 FA 61 FC | 	wrlong	result1, fp
0dfe8     08 4E 05 F1 | 	add	fp, #8
0dfec     A7 3C 68 FC | 	wrlong	#30, fp
0dff0     08 4E 85 F1 | 	sub	fp, #8
0dff4     A7 12 02 F6 | 	mov	arg01, fp
0dff8     48 F8 BF FD | 	call	#_push
0dffc                 | LR__1161
0dffc     A7 F0 03 F6 | 	mov	ptra, fp
0e000     B2 00 A0 FD | 	call	#popregs_
0e004                 | _do_atn_ret
0e004     2D 00 64 FD | 	ret
0e008                 | 
0e008                 | ' 
0e008                 | ' '-------------------- beep
0e008                 | ' 
0e008                 | ' sub do_beep
0e008                 | _do_beep
0e008     02 4A 05 F6 | 	mov	COUNT_, #2
0e00c     A8 00 A0 FD | 	call	#pushregs_
0e010     20 F0 07 F1 | 	add	ptra, #32
0e014     94 F7 BF FD | 	call	#_pop
0e018     FD 26 02 F6 | 	mov	local01, result1
0e01c     FE 1C 02 F6 | 	mov	arg06, result2
0e020     FF 28 02 F6 | 	mov	local02, result3
0e024     0C 4E 05 F1 | 	add	fp, #12
0e028     A7 26 62 FC | 	wrlong	local01, fp
0e02c     04 4E 05 F1 | 	add	fp, #4
0e030     A7 1C 62 FC | 	wrlong	arg06, fp
0e034     04 4E 05 F1 | 	add	fp, #4
0e038     A7 28 62 FC | 	wrlong	local02, fp
0e03c     14 4E 85 F1 | 	sub	fp, #20
0e040     68 F7 BF FD | 	call	#_pop
0e044     A7 FA 61 FC | 	wrlong	result1, fp
0e048     04 4E 05 F1 | 	add	fp, #4
0e04c     A7 FC 61 FC | 	wrlong	result2, fp
0e050     04 4E 05 F1 | 	add	fp, #4
0e054     A7 FE 61 FC | 	wrlong	result3, fp
0e058                 | ' 
0e058                 | ' t2=pop()
0e058                 | ' t1=pop()
0e058                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0e058     08 4E 85 F1 | 	sub	fp, #8
0e05c     1C FE 0D F2 | 	cmp	result3, #28 wz
0e060     08 4E 05 51 |  if_ne	add	fp, #8
0e064     A7 28 02 5B |  if_ne	rdlong	local02, fp
0e068     08 4E 85 51 |  if_ne	sub	fp, #8
0e06c     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0e070     A7 26 02 AB |  if_e	rdlong	local01, fp
0e074     18 4E 05 A1 |  if_e	add	fp, #24
0e078     A7 26 62 AC |  if_e	wrlong	local01, fp
0e07c     18 4E 85 A1 |  if_e	sub	fp, #24
0e080     14 00 90 AD |  if_e	jmp	#LR__1170
0e084     A7 12 02 F6 | 	mov	arg01, fp
0e088     04 F9 BF FD | 	call	#_converttoint
0e08c     18 4E 05 F1 | 	add	fp, #24
0e090     A7 FA 61 FC | 	wrlong	result1, fp
0e094     18 4E 85 F1 | 	sub	fp, #24
0e098                 | LR__1170
0e098     1C 4E 05 F1 | 	add	fp, #28
0e09c     A7 FE 48 FC | 	wrbyte	#127, fp
0e0a0     01 4E 05 F1 | 	add	fp, #1
0e0a4     A7 00 49 FC | 	wrbyte	#128, fp
0e0a8     01 4E 85 F1 | 	sub	fp, #1
0e0ac     A7 14 02 F6 | 	mov	arg02, fp
0e0b0     04 4E 85 F1 | 	sub	fp, #4
0e0b4     A7 16 02 FB | 	rdlong	arg03, fp
0e0b8     18 4E 85 F1 | 	sub	fp, #24
0e0bc     01 16 66 F0 | 	shl	arg03, #1
0e0c0     07 12 06 F6 | 	mov	arg01, #7
0e0c4     0E 18 C6 F9 | 	decod	arg04, #14
0e0c8     02 1A 06 F6 | 	mov	arg05, #2
0e0cc     00 1C 06 F6 | 	mov	arg06, #0
0e0d0     0B 00 00 FF 
0e0d4     CC E4 05 F1 | 	add	objptr, ##5836
0e0d8     C8 8F B1 FD | 	call	#_audio096_spin2_play8
0e0dc     0B 00 00 FF 
0e0e0     CC E4 85 F1 | 	sub	objptr, ##5836
0e0e4     0C 4E 05 F1 | 	add	fp, #12
0e0e8     A7 12 02 F6 | 	mov	arg01, fp
0e0ec     0C 4E 85 F1 | 	sub	fp, #12
0e0f0     50 F7 BF FD | 	call	#_push
0e0f4     7C EE B0 FD | 	call	#_do_waitms
0e0f8     07 12 06 F6 | 	mov	arg01, #7
0e0fc     0B 00 00 FF 
0e100     CC E4 05 F1 | 	add	objptr, ##5836
0e104     40 90 B1 FD | 	call	#_audio096_spin2_stop
0e108     0B 00 00 FF 
0e10c     CC E4 85 F1 | 	sub	objptr, ##5836
0e110     A7 F0 03 F6 | 	mov	ptra, fp
0e114     B2 00 A0 FD | 	call	#popregs_
0e118                 | _do_beep_ret
0e118     2D 00 64 FD | 	ret
0e11c                 | 
0e11c                 | ' 
0e11c                 | ' '-------------------- blit
0e11c                 | ' 
0e11c                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0e11c                 | ' sub do_blit
0e11c                 | _do_blit
0e11c     02 4A 05 F6 | 	mov	COUNT_, #2
0e120     A8 00 A0 FD | 	call	#pushregs_
0e124     3C F0 07 F1 | 	add	ptra, #60
0e128     4A 00 00 FF 
0e12c     80 E4 05 F1 | 	add	objptr, ##38016
0e130     F2 26 02 FB | 	rdlong	local01, objptr
0e134     13 25 02 F6 | 	mov	arg10, local01
0e138     01 24 66 F0 | 	shl	arg10, #1
0e13c     13 25 02 F1 | 	add	arg10, local01
0e140     02 24 66 F0 | 	shl	arg10, #2
0e144     03 00 00 FF 
0e148     04 E4 85 F1 | 	sub	objptr, ##1540
0e14c     F2 24 02 F1 | 	add	arg10, objptr
0e150     12 25 02 FB | 	rdlong	arg10, arg10
0e154     38 4E 05 F1 | 	add	fp, #56
0e158     A7 24 62 FC | 	wrlong	arg10, fp
0e15c                 | ' 
0e15c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e15c                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0e15c     38 4E 85 F1 | 	sub	fp, #56
0e160     0A 24 0E F2 | 	cmp	arg10, #10 wz
0e164     47 00 00 FF 
0e168     7C E4 85 F1 | 	sub	objptr, ##36476
0e16c     38 4E 05 51 |  if_ne	add	fp, #56
0e170     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e174     38 4E 85 51 |  if_ne	sub	fp, #56
0e178     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0e17c     50 00 90 AD |  if_e	jmp	#LR__1180
0e180     00 12 06 F6 | 	mov	arg01, #0
0e184     D4 EF B1 FD | 	call	#__system___getiolock_0616
0e188     FD 12 02 F6 | 	mov	arg01, result1
0e18c     28 93 B1 FD | 	call	#__system___lockmem
0e190     BB 01 00 FF 
0e194     A9 15 06 F6 | 	mov	arg02, ##@LR__5911
0e198     00 12 06 F6 | 	mov	arg01, #0
0e19c     00 16 06 F6 | 	mov	arg03, #0
0e1a0     0C A0 B1 FD | 	call	#__system___basic_print_string
0e1a4     00 12 06 F6 | 	mov	arg01, #0
0e1a8     B0 EF B1 FD | 	call	#__system___getiolock_0616
0e1ac     FD 00 68 FC | 	wrlong	#0, result1
0e1b0     50 00 00 FF 
0e1b4     F0 E4 05 F1 | 	add	objptr, ##41200
0e1b8     F2 14 02 FB | 	rdlong	arg02, objptr
0e1bc     50 00 00 FF 
0e1c0     F0 E4 85 F1 | 	sub	objptr, ##41200
0e1c4     27 12 06 F6 | 	mov	arg01, #39
0e1c8     D4 58 B1 FD | 	call	#_printerror
0e1cc     44 01 90 FD | 	jmp	#LR__1185
0e1d0                 | LR__1180
0e1d0                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e1d0     38 4E 05 F1 | 	add	fp, #56
0e1d4     A7 28 02 FB | 	rdlong	local02, fp
0e1d8     01 28 86 F1 | 	sub	local02, #1
0e1dc     04 4E 85 F1 | 	sub	fp, #4
0e1e0     A7 28 62 FC | 	wrlong	local02, fp
0e1e4     34 4E 85 F1 | 	sub	fp, #52
0e1e8                 | LR__1181
0e1e8     38 4E 05 F1 | 	add	fp, #56
0e1ec     A7 26 02 FB | 	rdlong	local01, fp
0e1f0     01 26 86 F1 | 	sub	local01, #1
0e1f4     04 4E 85 F1 | 	sub	fp, #4
0e1f8     A7 24 02 FB | 	rdlong	arg10, fp
0e1fc     34 4E 85 F1 | 	sub	fp, #52
0e200     13 25 1A F2 | 	cmp	arg10, local01 wcz
0e204     54 00 90 1D |  if_a	jmp	#LR__1182
0e208     A0 F5 BF FD | 	call	#_pop
0e20c     A7 FA 61 FC | 	wrlong	result1, fp
0e210     04 4E 05 F1 | 	add	fp, #4
0e214     A7 FC 61 FC | 	wrlong	result2, fp
0e218     04 4E 05 F1 | 	add	fp, #4
0e21c     A7 FE 61 FC | 	wrlong	result3, fp
0e220     2C 4E 05 F1 | 	add	fp, #44
0e224     A7 28 02 FB | 	rdlong	local02, fp
0e228     02 28 66 F0 | 	shl	local02, #2
0e22c     28 4E 85 F1 | 	sub	fp, #40
0e230     A7 28 02 F1 | 	add	local02, fp
0e234     0C 4E 85 F1 | 	sub	fp, #12
0e238     A7 12 02 F6 | 	mov	arg01, fp
0e23c     50 F7 BF FD | 	call	#_converttoint
0e240     14 FB 61 FC | 	wrlong	result1, local02
0e244     34 4E 05 F1 | 	add	fp, #52
0e248     A7 28 02 FB | 	rdlong	local02, fp
0e24c     01 28 86 F1 | 	sub	local02, #1
0e250     A7 28 62 FC | 	wrlong	local02, fp
0e254     34 4E 85 F1 | 	sub	fp, #52
0e258     8C FF 9F FD | 	jmp	#LR__1181
0e25c                 | LR__1182
0e25c                 | ' if numpar=10 then 
0e25c     38 4E 05 F1 | 	add	fp, #56
0e260     A7 28 02 FB | 	rdlong	local02, fp
0e264     38 4E 85 F1 | 	sub	fp, #56
0e268     0A 28 0E F2 | 	cmp	local02, #10 wz
0e26c     5C 00 90 5D |  if_ne	jmp	#LR__1183
0e270     0C 4E 05 F1 | 	add	fp, #12
0e274     A7 12 02 FB | 	rdlong	arg01, fp
0e278     04 4E 05 F1 | 	add	fp, #4
0e27c     A7 14 02 FB | 	rdlong	arg02, fp
0e280     04 4E 05 F1 | 	add	fp, #4
0e284     A7 16 02 FB | 	rdlong	arg03, fp
0e288     04 4E 05 F1 | 	add	fp, #4
0e28c     A7 18 02 FB | 	rdlong	arg04, fp
0e290     04 4E 05 F1 | 	add	fp, #4
0e294     A7 1A 02 FB | 	rdlong	arg05, fp
0e298     04 4E 05 F1 | 	add	fp, #4
0e29c     A7 1C 02 FB | 	rdlong	arg06, fp
0e2a0     04 4E 05 F1 | 	add	fp, #4
0e2a4     A7 1E 02 FB | 	rdlong	arg07, fp
0e2a8     04 4E 05 F1 | 	add	fp, #4
0e2ac     A7 20 02 FB | 	rdlong	arg08, fp
0e2b0     04 4E 05 F1 | 	add	fp, #4
0e2b4     A7 22 02 FB | 	rdlong	arg09, fp
0e2b8     04 4E 05 F1 | 	add	fp, #4
0e2bc     A7 24 02 FB | 	rdlong	arg10, fp
0e2c0     30 4E 85 F1 | 	sub	fp, #48
0e2c4     A4 7F B1 FD | 	call	#_hg010b_spin2_blit
0e2c8     48 00 90 FD | 	jmp	#LR__1184
0e2cc                 | LR__1183
0e2cc     F2 1E 02 FB | 	rdlong	arg07, objptr
0e2d0     0C 4E 05 F1 | 	add	fp, #12
0e2d4     A7 14 02 FB | 	rdlong	arg02, fp
0e2d8     04 4E 05 F1 | 	add	fp, #4
0e2dc     A7 16 02 FB | 	rdlong	arg03, fp
0e2e0     04 4E 05 F1 | 	add	fp, #4
0e2e4     A7 18 02 FB | 	rdlong	arg04, fp
0e2e8     04 4E 05 F1 | 	add	fp, #4
0e2ec     A7 1A 02 FB | 	rdlong	arg05, fp
0e2f0     04 4E 05 F1 | 	add	fp, #4
0e2f4     A7 20 02 FB | 	rdlong	arg08, fp
0e2f8     04 4E 05 F1 | 	add	fp, #4
0e2fc     A7 22 02 FB | 	rdlong	arg09, fp
0e300     20 4E 85 F1 | 	sub	fp, #32
0e304     0F 13 02 F6 | 	mov	arg01, arg07
0e308     0A 1C C6 F9 | 	decod	arg06, #10
0e30c     0A 24 C6 F9 | 	decod	arg10, #10
0e310     58 7F B1 FD | 	call	#_hg010b_spin2_blit
0e314                 | LR__1184
0e314                 | LR__1185
0e314     A7 F0 03 F6 | 	mov	ptra, fp
0e318     B2 00 A0 FD | 	call	#popregs_
0e31c                 | _do_blit_ret
0e31c     2D 00 64 FD | 	ret
0e320                 | 
0e320                 | ' 
0e320                 | ' 
0e320                 | ' '-------------------- bin$
0e320                 | ' 
0e320                 | ' sub do_bin
0e320                 | _do_bin
0e320     01 4A 05 F6 | 	mov	COUNT_, #1
0e324     A8 00 A0 FD | 	call	#pushregs_
0e328     18 F0 07 F1 | 	add	ptra, #24
0e32c     4A 00 00 FF 
0e330     80 E4 05 F1 | 	add	objptr, ##38016
0e334     F2 26 02 FB | 	rdlong	local01, objptr
0e338     13 17 02 F6 | 	mov	arg03, local01
0e33c     01 16 66 F0 | 	shl	arg03, #1
0e340     13 17 02 F1 | 	add	arg03, local01
0e344     02 16 66 F0 | 	shl	arg03, #2
0e348     03 00 00 FF 
0e34c     04 E4 85 F1 | 	sub	objptr, ##1540
0e350     F2 16 02 F1 | 	add	arg03, objptr
0e354     0B 17 02 FB | 	rdlong	arg03, arg03
0e358     0C 4E 05 F1 | 	add	fp, #12
0e35c     A7 16 62 FC | 	wrlong	arg03, fp
0e360                 | ' 
0e360                 | ' numpar=compiledline(lineptr_e).result.uresult
0e360                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e360     0C 4E 85 F1 | 	sub	fp, #12
0e364     03 16 16 F2 | 	cmp	arg03, #3 wc
0e368     47 00 00 FF 
0e36c     7C E4 85 F1 | 	sub	objptr, ##36476
0e370     0C 4E 05 C1 |  if_b	add	fp, #12
0e374     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e378     0C 4E 85 C1 |  if_b	sub	fp, #12
0e37c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1190
0e380     00 12 06 F6 | 	mov	arg01, #0
0e384     D4 ED B1 FD | 	call	#__system___getiolock_0616
0e388     FD 12 02 F6 | 	mov	arg01, result1
0e38c     28 91 B1 FD | 	call	#__system___lockmem
0e390     BB 01 00 FF 
0e394     B0 15 06 F6 | 	mov	arg02, ##@LR__5912
0e398     00 12 06 F6 | 	mov	arg01, #0
0e39c     00 16 06 F6 | 	mov	arg03, #0
0e3a0     0C 9E B1 FD | 	call	#__system___basic_print_string
0e3a4     00 12 06 F6 | 	mov	arg01, #0
0e3a8     B0 ED B1 FD | 	call	#__system___getiolock_0616
0e3ac     FD 00 68 FC | 	wrlong	#0, result1
0e3b0     27 12 06 F6 | 	mov	arg01, #39
0e3b4     00 14 06 F6 | 	mov	arg02, #0
0e3b8     E4 56 B1 FD | 	call	#_printerror
0e3bc     B8 00 90 FD | 	jmp	#LR__1193
0e3c0                 | LR__1190
0e3c0                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e3c0     0C 4E 05 F1 | 	add	fp, #12
0e3c4     A7 26 02 FB | 	rdlong	local01, fp
0e3c8     0C 4E 85 F1 | 	sub	fp, #12
0e3cc     02 26 0E F2 | 	cmp	local01, #2 wz
0e3d0     38 00 90 5D |  if_ne	jmp	#LR__1191
0e3d4     D4 F3 BF FD | 	call	#_pop
0e3d8     FF 26 02 F6 | 	mov	local01, result3
0e3dc     A7 FA 61 FC | 	wrlong	result1, fp
0e3e0     04 4E 05 F1 | 	add	fp, #4
0e3e4     A7 FC 61 FC | 	wrlong	result2, fp
0e3e8     04 4E 05 F1 | 	add	fp, #4
0e3ec     A7 26 62 FC | 	wrlong	local01, fp
0e3f0     08 4E 85 F1 | 	sub	fp, #8
0e3f4     A7 12 02 F6 | 	mov	arg01, fp
0e3f8     94 F5 BF FD | 	call	#_converttoint
0e3fc     14 4E 05 F1 | 	add	fp, #20
0e400     A7 FA 61 FC | 	wrlong	result1, fp
0e404     14 4E 85 F1 | 	sub	fp, #20
0e408     0C 00 90 FD | 	jmp	#LR__1192
0e40c                 | LR__1191
0e40c     14 4E 05 F1 | 	add	fp, #20
0e410     A7 00 68 FC | 	wrlong	#0, fp
0e414     14 4E 85 F1 | 	sub	fp, #20
0e418                 | LR__1192
0e418     90 F3 BF FD | 	call	#_pop
0e41c     FF 26 02 F6 | 	mov	local01, result3
0e420     A7 FA 61 FC | 	wrlong	result1, fp
0e424     04 4E 05 F1 | 	add	fp, #4
0e428     A7 FC 61 FC | 	wrlong	result2, fp
0e42c     04 4E 05 F1 | 	add	fp, #4
0e430     A7 26 62 FC | 	wrlong	local01, fp
0e434     08 4E 85 F1 | 	sub	fp, #8
0e438     A7 12 02 F6 | 	mov	arg01, fp
0e43c     50 F5 BF FD | 	call	#_converttoint
0e440     10 4E 05 F1 | 	add	fp, #16
0e444     A7 FA 61 FC | 	wrlong	result1, fp
0e448     FD 12 02 F6 | 	mov	arg01, result1
0e44c     04 4E 05 F1 | 	add	fp, #4
0e450     A7 14 02 FB | 	rdlong	arg02, fp
0e454     14 4E 85 F1 | 	sub	fp, #20
0e458     02 16 06 F6 | 	mov	arg03, #2
0e45c     2C B3 B1 FD | 	call	#__system__Number_S
0e460     A7 FA 61 FC | 	wrlong	result1, fp
0e464     08 4E 05 F1 | 	add	fp, #8
0e468     A7 3E 68 FC | 	wrlong	#31, fp
0e46c     08 4E 85 F1 | 	sub	fp, #8
0e470     A7 12 02 F6 | 	mov	arg01, fp
0e474     CC F3 BF FD | 	call	#_push
0e478                 | LR__1193
0e478     A7 F0 03 F6 | 	mov	ptra, fp
0e47c     B2 00 A0 FD | 	call	#popregs_
0e480                 | _do_bin_ret
0e480     2D 00 64 FD | 	ret
0e484                 | 
0e484                 | ' 
0e484                 | ' '-------------------- box
0e484                 | ' 
0e484                 | ' sub do_box
0e484                 | _do_box
0e484     03 4A 05 F6 | 	mov	COUNT_, #3
0e488     A8 00 A0 FD | 	call	#pushregs_
0e48c     30 F0 07 F1 | 	add	ptra, #48
0e490     18 F3 BF FD | 	call	#_pop
0e494     FD 1A 02 F6 | 	mov	arg05, result1
0e498     FE 18 02 F6 | 	mov	arg04, result2
0e49c     FF 16 02 F6 | 	mov	arg03, result3
0e4a0     24 4E 05 F1 | 	add	fp, #36
0e4a4     A7 1A 62 FC | 	wrlong	arg05, fp
0e4a8     04 4E 05 F1 | 	add	fp, #4
0e4ac     A7 18 62 FC | 	wrlong	arg04, fp
0e4b0     04 4E 05 F1 | 	add	fp, #4
0e4b4     A7 16 62 FC | 	wrlong	arg03, fp
0e4b8     2C 4E 85 F1 | 	sub	fp, #44
0e4bc     EC F2 BF FD | 	call	#_pop
0e4c0     FD 1A 02 F6 | 	mov	arg05, result1
0e4c4     FE 18 02 F6 | 	mov	arg04, result2
0e4c8     FF 16 02 F6 | 	mov	arg03, result3
0e4cc     18 4E 05 F1 | 	add	fp, #24
0e4d0     A7 1A 62 FC | 	wrlong	arg05, fp
0e4d4     04 4E 05 F1 | 	add	fp, #4
0e4d8     A7 18 62 FC | 	wrlong	arg04, fp
0e4dc     04 4E 05 F1 | 	add	fp, #4
0e4e0     A7 16 62 FC | 	wrlong	arg03, fp
0e4e4     20 4E 85 F1 | 	sub	fp, #32
0e4e8     C0 F2 BF FD | 	call	#_pop
0e4ec     FD 1A 02 F6 | 	mov	arg05, result1
0e4f0     FE 18 02 F6 | 	mov	arg04, result2
0e4f4     FF 26 02 F6 | 	mov	local01, result3
0e4f8     0C 4E 05 F1 | 	add	fp, #12
0e4fc     A7 1A 62 FC | 	wrlong	arg05, fp
0e500     04 4E 05 F1 | 	add	fp, #4
0e504     A7 18 62 FC | 	wrlong	arg04, fp
0e508     04 4E 05 F1 | 	add	fp, #4
0e50c     A7 26 62 FC | 	wrlong	local01, fp
0e510     14 4E 85 F1 | 	sub	fp, #20
0e514     94 F2 BF FD | 	call	#_pop
0e518     A7 FA 61 FC | 	wrlong	result1, fp
0e51c     04 4E 05 F1 | 	add	fp, #4
0e520     A7 FC 61 FC | 	wrlong	result2, fp
0e524     04 4E 05 F1 | 	add	fp, #4
0e528     A7 FE 61 FC | 	wrlong	result3, fp
0e52c                 | ' 
0e52c                 | ' t4=pop()
0e52c                 | ' t3=pop()
0e52c                 | ' t2=pop()
0e52c                 | ' t1=pop()
0e52c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e52c     FF 1A 02 F6 | 	mov	arg05, result3
0e530     08 4E 85 F1 | 	sub	fp, #8
0e534     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e538     08 4E 05 51 |  if_ne	add	fp, #8
0e53c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e540     08 4E 85 51 |  if_ne	sub	fp, #8
0e544     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e548     A8 00 90 5D |  if_ne	jmp	#LR__1200
0e54c     14 4E 05 F1 | 	add	fp, #20
0e550     A7 26 02 FB | 	rdlong	local01, fp
0e554     14 4E 85 F1 | 	sub	fp, #20
0e558     1C 26 0E F2 | 	cmp	local01, #28 wz
0e55c     14 4E 05 51 |  if_ne	add	fp, #20
0e560     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e564     14 4E 85 51 |  if_ne	sub	fp, #20
0e568     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e56c     84 00 90 5D |  if_ne	jmp	#LR__1200
0e570     20 4E 05 F1 | 	add	fp, #32
0e574     A7 26 02 FB | 	rdlong	local01, fp
0e578     20 4E 85 F1 | 	sub	fp, #32
0e57c     1C 26 0E F2 | 	cmp	local01, #28 wz
0e580     20 4E 05 51 |  if_ne	add	fp, #32
0e584     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e588     20 4E 85 51 |  if_ne	sub	fp, #32
0e58c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e590     60 00 90 5D |  if_ne	jmp	#LR__1200
0e594     2C 4E 05 F1 | 	add	fp, #44
0e598     A7 26 02 FB | 	rdlong	local01, fp
0e59c     2C 4E 85 F1 | 	sub	fp, #44
0e5a0     1C 26 0E F2 | 	cmp	local01, #28 wz
0e5a4     2C 4E 05 51 |  if_ne	add	fp, #44
0e5a8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e5ac     2C 4E 85 51 |  if_ne	sub	fp, #44
0e5b0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e5b4     3C 00 90 5D |  if_ne	jmp	#LR__1200
0e5b8     A7 12 02 FB | 	rdlong	arg01, fp
0e5bc     0C 4E 05 F1 | 	add	fp, #12
0e5c0     A7 14 02 FB | 	rdlong	arg02, fp
0e5c4     0C 4E 05 F1 | 	add	fp, #12
0e5c8     A7 16 02 FB | 	rdlong	arg03, fp
0e5cc     0C 4E 05 F1 | 	add	fp, #12
0e5d0     A7 18 02 FB | 	rdlong	arg04, fp
0e5d4     24 4E 85 F1 | 	sub	fp, #36
0e5d8     37 00 00 FF 
0e5dc     28 E4 05 F1 | 	add	objptr, ##28200
0e5e0     F2 1A 02 FB | 	rdlong	arg05, objptr
0e5e4     37 00 00 FF 
0e5e8     28 E4 85 F1 | 	sub	objptr, ##28200
0e5ec     74 6F B1 FD | 	call	#_hg010b_spin2_box
0e5f0                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e5f0     6C 00 90 FD | 	jmp	#LR__1201
0e5f4                 | LR__1200
0e5f4     A7 12 02 F6 | 	mov	arg01, fp
0e5f8     94 F3 BF FD | 	call	#_converttoint
0e5fc     FD 28 02 F6 | 	mov	local02, result1
0e600     0C 4E 05 F1 | 	add	fp, #12
0e604     A7 12 02 F6 | 	mov	arg01, fp
0e608     0C 4E 85 F1 | 	sub	fp, #12
0e60c     80 F3 BF FD | 	call	#_converttoint
0e610     FD 2A 02 F6 | 	mov	local03, result1
0e614     18 4E 05 F1 | 	add	fp, #24
0e618     A7 12 02 F6 | 	mov	arg01, fp
0e61c     18 4E 85 F1 | 	sub	fp, #24
0e620     6C F3 BF FD | 	call	#_converttoint
0e624     FD 26 02 F6 | 	mov	local01, result1
0e628     24 4E 05 F1 | 	add	fp, #36
0e62c     A7 12 02 F6 | 	mov	arg01, fp
0e630     24 4E 85 F1 | 	sub	fp, #36
0e634     58 F3 BF FD | 	call	#_converttoint
0e638     FD 18 02 F6 | 	mov	arg04, result1
0e63c     37 00 00 FF 
0e640     28 E4 05 F1 | 	add	objptr, ##28200
0e644     F2 1A 02 FB | 	rdlong	arg05, objptr
0e648     37 00 00 FF 
0e64c     28 E4 85 F1 | 	sub	objptr, ##28200
0e650     14 13 02 F6 | 	mov	arg01, local02
0e654     15 15 02 F6 | 	mov	arg02, local03
0e658     13 17 02 F6 | 	mov	arg03, local01
0e65c     04 6F B1 FD | 	call	#_hg010b_spin2_box
0e660                 | LR__1201
0e660     A7 F0 03 F6 | 	mov	ptra, fp
0e664     B2 00 A0 FD | 	call	#popregs_
0e668                 | _do_box_ret
0e668     2D 00 64 FD | 	ret
0e66c                 | 
0e66c                 | ' 
0e66c                 | ' '-------------------- brun
0e66c                 | ' 
0e66c                 | ' sub do_brun
0e66c                 | _do_brun
0e66c     08 4A 05 F6 | 	mov	COUNT_, #8
0e670     A8 00 A0 FD | 	call	#pushregs_
0e674     34 F1 BF FD | 	call	#_pop
0e678     FE 1A 02 F6 | 	mov	arg05, result2
0e67c     FF 18 02 F6 | 	mov	arg04, result3
0e680     FD 26 02 F6 | 	mov	local01, result1
0e684     0D 29 02 F6 | 	mov	local02, arg05
0e688     0C 2B 02 F6 | 	mov	local03, arg04
0e68c                 | ' 
0e68c                 | ' t1=pop() 
0e68c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e68c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e690     10 00 90 5D |  if_ne	jmp	#LR__1210
0e694     13 13 02 F6 | 	mov	arg01, local01
0e698     88 F2 BF FD | 	call	#_convertstring
0e69c     FD 26 02 F6 | 	mov	local01, result1
0e6a0     1F 2A 06 F6 | 	mov	local03, #31
0e6a4                 | LR__1210
0e6a4                 | ' if t1.result_type=result_string then
0e6a4     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e6a8     F0 01 90 5D |  if_ne	jmp	#LR__1214
0e6ac     13 2D 02 F6 | 	mov	local04, local01
0e6b0                 | '   filename=t1.result.sresult
0e6b0                 | '   if left$(filename,1)="/" then 
0e6b0     16 13 02 F6 | 	mov	arg01, local04
0e6b4     01 14 06 F6 | 	mov	arg02, #1
0e6b8     7C AE B1 FD | 	call	#__system__Left_S
0e6bc     FD 12 02 F6 | 	mov	arg01, result1
0e6c0     BB 01 00 FF 
0e6c4     B7 15 06 F6 | 	mov	arg02, ##@LR__5913
0e6c8     14 8E B1 FD | 	call	#__system___string_cmp
0e6cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0e6d0     16 2F 02 A6 |  if_e	mov	local05, local04
0e6d4     14 00 90 AD |  if_e	jmp	#LR__1211
0e6d8     BB 01 00 FF 
0e6dc     B9 13 06 F6 | 	mov	arg01, ##@LR__5914
0e6e0     16 15 02 F6 | 	mov	arg02, local04
0e6e4     2C 8E B1 FD | 	call	#__system___string_concat
0e6e8     FD 2E 02 F6 | 	mov	local05, result1
0e6ec                 | LR__1211
0e6ec                 | '   open fullfilename for input as #9
0e6ec     09 12 06 F6 | 	mov	arg01, #9
0e6f0     17 15 02 F6 | 	mov	arg02, local05
0e6f4     00 16 06 F6 | 	mov	arg03, #0
0e6f8     C0 99 B1 FD | 	call	#__system___basic_open_string
0e6fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e700     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e704     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e708     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e70c     FD 30 0A F6 | 	mov	local06, result1 wz
0e710                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e710     8C 00 90 AD |  if_e	jmp	#LR__1212
0e714     00 12 06 F6 | 	mov	arg01, #0
0e718     40 EA B1 FD | 	call	#__system___getiolock_0616
0e71c     FD 12 02 F6 | 	mov	arg01, result1
0e720     94 8D B1 FD | 	call	#__system___lockmem
0e724     BB 01 00 FF 
0e728     C2 15 06 F6 | 	mov	arg02, ##@LR__5915
0e72c     00 12 06 F6 | 	mov	arg01, #0
0e730     00 16 06 F6 | 	mov	arg03, #0
0e734     78 9A B1 FD | 	call	#__system___basic_print_string
0e738     00 12 06 F6 | 	mov	arg01, #0
0e73c     18 15 02 F6 | 	mov	arg02, local06
0e740     00 16 06 F6 | 	mov	arg03, #0
0e744     0A 18 06 F6 | 	mov	arg04, #10
0e748     A8 9A B1 FD | 	call	#__system___basic_print_integer
0e74c     BB 01 00 FF 
0e750     D0 15 06 F6 | 	mov	arg02, ##@LR__5916
0e754     00 12 06 F6 | 	mov	arg01, #0
0e758     00 16 06 F6 | 	mov	arg03, #0
0e75c     50 9A B1 FD | 	call	#__system___basic_print_string
0e760     18 13 02 F6 | 	mov	arg01, local06
0e764     E0 B6 B1 FD | 	call	#__system___strerror
0e768     FD 14 02 F6 | 	mov	arg02, result1
0e76c     00 12 06 F6 | 	mov	arg01, #0
0e770     00 16 06 F6 | 	mov	arg03, #0
0e774     38 9A B1 FD | 	call	#__system___basic_print_string
0e778     00 12 06 F6 | 	mov	arg01, #0
0e77c     0A 14 06 F6 | 	mov	arg02, #10
0e780     00 16 06 F6 | 	mov	arg03, #0
0e784     D0 99 B1 FD | 	call	#__system___basic_print_char
0e788     00 12 06 F6 | 	mov	arg01, #0
0e78c     CC E9 B1 FD | 	call	#__system___getiolock_0616
0e790     FD 00 68 FC | 	wrlong	#0, result1
0e794     09 12 06 F6 | 	mov	arg01, #9
0e798     78 E0 B1 FD | 	call	#__system__close
0e79c     FC 00 90 FD | 	jmp	#LR__1215
0e7a0                 | LR__1212
0e7a0     01 32 06 F6 | 	mov	local07, #1
0e7a4     00 34 06 F6 | 	mov	local08, #0
0e7a8                 | '   do
0e7a8                 | LR__1213
0e7a8                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e7a8     4E 00 00 FF 
0e7ac     B4 E4 05 F1 | 	add	objptr, ##40116
0e7b0     F2 16 02 F6 | 	mov	arg03, objptr
0e7b4     4E 00 00 FF 
0e7b8     B4 E4 85 F1 | 	sub	objptr, ##40116
0e7bc     09 12 06 F6 | 	mov	arg01, #9
0e7c0     19 15 02 F6 | 	mov	arg02, local07
0e7c4     0A 18 C6 F9 | 	decod	arg04, #10
0e7c8     01 1A 06 F6 | 	mov	arg05, #1
0e7cc     5C 9B B1 FD | 	call	#__system___basic_get
0e7d0     FD 30 02 F6 | 	mov	local06, result1
0e7d4     FD 32 02 F1 | 	add	local07, result1
0e7d8     4E 00 00 FF 
0e7dc     B4 E4 05 F1 | 	add	objptr, ##40116
0e7e0     F2 12 02 F6 | 	mov	arg01, objptr
0e7e4     1A 15 02 F6 | 	mov	arg02, local08
0e7e8     0A 16 C6 F9 | 	decod	arg03, #10
0e7ec     42 00 00 FF 
0e7f0     E8 E5 85 F1 | 	sub	objptr, ##34280
0e7f4     B8 80 B1 FD | 	call	#_psram_spin2_write
0e7f8     0B 00 00 FF 
0e7fc     CC E4 85 F1 | 	sub	objptr, ##5836
0e800     18 35 02 F1 | 	add	local08, local06
0e804     02 00 00 FF 
0e808     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e80c     E0 03 00 AF 
0e810     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e814     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1213
0e818     36 00 00 FF 
0e81c     FC E5 05 F1 | 	add	objptr, ##28156
0e820     F2 12 02 FB | 	rdlong	arg01, objptr
0e824     03 12 62 FD | 	cogstop	arg01
0e828     04 E4 05 F1 | 	add	objptr, #4
0e82c     F2 12 02 FB | 	rdlong	arg01, objptr
0e830     03 12 62 FD | 	cogstop	arg01
0e834     04 E4 05 F1 | 	add	objptr, #4
0e838     F2 12 02 FB | 	rdlong	arg01, objptr
0e83c     03 12 62 FD | 	cogstop	arg01
0e840     19 00 00 FF 
0e844     3C E5 05 F1 | 	add	objptr, ##13116
0e848     F2 12 02 FB | 	rdlong	arg01, objptr
0e84c     03 12 62 FD | 	cogstop	arg01
0e850     18 00 00 FF 
0e854     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e858     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e85c     18 00 00 FF 
0e860     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e864     19 00 00 FF 
0e868     34 E5 85 F1 | 	sub	objptr, ##13108
0e86c     1E 34 06 F6 | 	mov	local08, #30
0e870     28 E4 61 FD | 	setq	objptr
0e874     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e878     01 34 66 C6 |  if_b	neg	local08, #1
0e87c     1B 00 00 FF 
0e880     48 E5 05 F1 | 	add	objptr, ##14152
0e884     F2 34 62 FC | 	wrlong	local08, objptr
0e888     52 00 00 FF 
0e88c     54 E5 85 F1 | 	sub	objptr, ##42324
0e890     00 12 06 F6 | 	mov	arg01, #0
0e894     01 12 62 FD | 	cogid	arg01
0e898     03 12 62 FD | 	cogstop	arg01
0e89c                 | LR__1214
0e89c                 | LR__1215
0e89c     A7 F0 03 F6 | 	mov	ptra, fp
0e8a0     B2 00 A0 FD | 	call	#popregs_
0e8a4                 | _do_brun_ret
0e8a4     2D 00 64 FD | 	ret
0e8a8                 | 
0e8a8                 | ' 
0e8a8                 | ' '-------------------- cd
0e8a8                 | ' 
0e8a8                 | ' sub do_cd
0e8a8                 | _do_cd
0e8a8     06 4A 05 F6 | 	mov	COUNT_, #6
0e8ac     A8 00 A0 FD | 	call	#pushregs_
0e8b0     BB 01 00 FF 
0e8b4     D3 13 06 F6 | 	mov	arg01, ##@LR__5917
0e8b8     31 14 06 F6 | 	mov	arg02, #49
0e8bc     5C EA B1 FD | 	call	#__system___basic_dir
0e8c0     E8 EE BF FD | 	call	#_pop
0e8c4     FE 18 02 F6 | 	mov	arg04, result2
0e8c8     FF 16 02 F6 | 	mov	arg03, result3
0e8cc     FD 26 02 F6 | 	mov	local01, result1
0e8d0     0C 29 02 F6 | 	mov	local02, arg04
0e8d4     0B 2B 02 F6 | 	mov	local03, arg03
0e8d8                 | ' t1=pop()
0e8d8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e8d8     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e8dc     10 00 90 5D |  if_ne	jmp	#LR__1220
0e8e0     13 13 02 F6 | 	mov	arg01, local01
0e8e4     3C F0 BF FD | 	call	#_convertstring
0e8e8     FD 26 02 F6 | 	mov	local01, result1
0e8ec     1F 2A 06 F6 | 	mov	local03, #31
0e8f0                 | LR__1220
0e8f0                 | ' if t1.result_type<>result_string then printerror(15): return
0e8f0     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e8f4     10 00 90 AD |  if_e	jmp	#LR__1221
0e8f8     0F 12 06 F6 | 	mov	arg01, #15
0e8fc     00 14 06 F6 | 	mov	arg02, #0
0e900     9C 51 B1 FD | 	call	#_printerror
0e904     54 05 90 FD | 	jmp	#LR__1239
0e908                 | LR__1221
0e908     13 2D 02 F6 | 	mov	local04, local01
0e90c                 | ' newdir$=t1.result.sresult
0e90c                 | ' if newdir$=".." then 
0e90c     BB 01 00 FF 
0e910     D5 15 06 F6 | 	mov	arg02, ##@LR__5918
0e914     16 13 02 F6 | 	mov	arg01, local04
0e918     C4 8B B1 FD | 	call	#__system___string_cmp
0e91c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e920     C8 01 90 5D |  if_ne	jmp	#LR__1228
0e924     4A 00 00 FF 
0e928     94 E4 05 F1 | 	add	objptr, ##38036
0e92c     F2 12 02 FB | 	rdlong	arg01, objptr
0e930     4A 00 00 FF 
0e934     94 E4 85 F1 | 	sub	objptr, ##38036
0e938     09 2F 02 F6 | 	mov	local05, arg01
0e93c     97 06 48 FB | 	callpa	#(@LR__1223-@LR__1222)>>2,fcache_load_ptr_
0e940                 | LR__1222
0e940     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e944     01 2E 06 51 |  if_ne	add	local05, #1
0e948     F4 FF 9F 5D |  if_ne	jmp	#LR__1222
0e94c                 | LR__1223
0e94c     17 13 C2 F2 | 	subr	arg01, local05
0e950     4A 00 00 FF 
0e954     94 E4 05 F1 | 	add	objptr, ##38036
0e958     F2 14 02 FB | 	rdlong	arg02, objptr
0e95c     4A 00 00 FF 
0e960     94 E4 85 F1 | 	sub	objptr, ##38036
0e964     BB 01 00 FF 
0e968     D8 17 06 F6 | 	mov	arg03, ##@LR__5919
0e96c     14 B2 B1 FD | 	call	#__system__InstrRev
0e970     FD 2C 02 F6 | 	mov	local04, result1
0e974                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e974     02 2C 56 F2 | 	cmps	local04, #2 wc
0e978     28 00 90 CD |  if_b	jmp	#LR__1224
0e97c     4A 00 00 FF 
0e980     94 E4 05 F1 | 	add	objptr, ##38036
0e984     F2 12 02 FB | 	rdlong	arg01, objptr
0e988     4A 00 00 FF 
0e98c     94 E4 85 F1 | 	sub	objptr, ##38036
0e990     01 2C 86 F1 | 	sub	local04, #1
0e994     16 15 02 F6 | 	mov	arg02, local04
0e998     9C AB B1 FD | 	call	#__system__Left_S
0e99c     FD 2C 02 F6 | 	mov	local04, result1
0e9a0     08 00 90 FD | 	jmp	#LR__1225
0e9a4                 | LR__1224
0e9a4     BB 01 00 FF 
0e9a8     DA 2D 06 F6 | 	mov	local04, ##@LR__5920
0e9ac                 | LR__1225
0e9ac     16 13 02 F6 | 	mov	arg01, local04
0e9b0     90 91 B1 FD | 	call	#__system___chdir
0e9b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e9b8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e9bc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e9c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e9c4     FD 30 0A F6 | 	mov	local06, result1 wz
0e9c8                 | '   chdir newdir$
0e9c8                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e9c8     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e9cc     A4 00 90 AD |  if_e	jmp	#LR__1226
0e9d0     00 12 06 F6 | 	mov	arg01, #0
0e9d4     84 E7 B1 FD | 	call	#__system___getiolock_0616
0e9d8     FD 12 02 F6 | 	mov	arg01, result1
0e9dc     D8 8A B1 FD | 	call	#__system___lockmem
0e9e0     BB 01 00 FF 
0e9e4     DC 15 06 F6 | 	mov	arg02, ##@LR__5921
0e9e8     00 12 06 F6 | 	mov	arg01, #0
0e9ec     00 16 06 F6 | 	mov	arg03, #0
0e9f0     BC 97 B1 FD | 	call	#__system___basic_print_string
0e9f4     00 12 06 F6 | 	mov	arg01, #0
0e9f8     18 15 02 F6 | 	mov	arg02, local06
0e9fc     00 16 06 F6 | 	mov	arg03, #0
0ea00     0A 18 06 F6 | 	mov	arg04, #10
0ea04     EC 97 B1 FD | 	call	#__system___basic_print_integer
0ea08     BB 01 00 FF 
0ea0c     EA 15 06 F6 | 	mov	arg02, ##@LR__5922
0ea10     00 12 06 F6 | 	mov	arg01, #0
0ea14     00 16 06 F6 | 	mov	arg03, #0
0ea18     94 97 B1 FD | 	call	#__system___basic_print_string
0ea1c     45 00 00 FF 
0ea20     50 E5 05 F1 | 	add	objptr, ##35664
0ea24     F2 14 02 FB | 	rdlong	arg02, objptr
0ea28     45 00 00 FF 
0ea2c     50 E5 85 F1 | 	sub	objptr, ##35664
0ea30     00 12 06 F6 | 	mov	arg01, #0
0ea34     00 16 06 F6 | 	mov	arg03, #0
0ea38     74 97 B1 FD | 	call	#__system___basic_print_string
0ea3c     00 12 06 F6 | 	mov	arg01, #0
0ea40     0A 14 06 F6 | 	mov	arg02, #10
0ea44     00 16 06 F6 | 	mov	arg03, #0
0ea48     0C 97 B1 FD | 	call	#__system___basic_print_char
0ea4c     00 12 06 F6 | 	mov	arg01, #0
0ea50     08 E7 B1 FD | 	call	#__system___getiolock_0616
0ea54     FD 00 68 FC | 	wrlong	#0, result1
0ea58     4A 00 00 FF 
0ea5c     94 E4 05 F1 | 	add	objptr, ##38036
0ea60     F2 12 02 FB | 	rdlong	arg01, objptr
0ea64     4A 00 00 FF 
0ea68     94 E4 85 F1 | 	sub	objptr, ##38036
0ea6c     D4 90 B1 FD | 	call	#__system___chdir
0ea70     14 00 90 FD | 	jmp	#LR__1227
0ea74                 | LR__1226
0ea74     4A 00 00 FF 
0ea78     94 E4 05 F1 | 	add	objptr, ##38036
0ea7c     F2 2C 62 FC | 	wrlong	local04, objptr
0ea80     4A 00 00 FF 
0ea84     94 E4 85 F1 | 	sub	objptr, ##38036
0ea88                 | LR__1227
0ea88                 | '   print "Current directory: ";currentdir$
0ea88     00 12 06 F6 | 	mov	arg01, #0
0ea8c     CC E6 B1 FD | 	call	#__system___getiolock_0616
0ea90     FD 12 02 F6 | 	mov	arg01, result1
0ea94     20 8A B1 FD | 	call	#__system___lockmem
0ea98     BB 01 00 FF 
0ea9c     ED 15 06 F6 | 	mov	arg02, ##@LR__5923
0eaa0     00 12 06 F6 | 	mov	arg01, #0
0eaa4     00 16 06 F6 | 	mov	arg03, #0
0eaa8     04 97 B1 FD | 	call	#__system___basic_print_string
0eaac     4A 00 00 FF 
0eab0     94 E4 05 F1 | 	add	objptr, ##38036
0eab4     F2 14 02 FB | 	rdlong	arg02, objptr
0eab8     4A 00 00 FF 
0eabc     94 E4 85 F1 | 	sub	objptr, ##38036
0eac0     00 12 06 F6 | 	mov	arg01, #0
0eac4     00 16 06 F6 | 	mov	arg03, #0
0eac8     E4 96 B1 FD | 	call	#__system___basic_print_string
0eacc     00 12 06 F6 | 	mov	arg01, #0
0ead0     0A 14 06 F6 | 	mov	arg02, #10
0ead4     00 16 06 F6 | 	mov	arg03, #0
0ead8     7C 96 B1 FD | 	call	#__system___basic_print_char
0eadc     00 12 06 F6 | 	mov	arg01, #0
0eae0     78 E6 B1 FD | 	call	#__system___getiolock_0616
0eae4     FD 00 68 FC | 	wrlong	#0, result1
0eae8                 | '   return
0eae8     70 03 90 FD | 	jmp	#LR__1239
0eaec                 | LR__1228
0eaec                 | ' if left$(newdir$,1)="/" then 
0eaec     16 13 02 F6 | 	mov	arg01, local04
0eaf0     01 14 06 F6 | 	mov	arg02, #1
0eaf4     40 AA B1 FD | 	call	#__system__Left_S
0eaf8     FD 12 02 F6 | 	mov	arg01, result1
0eafc     BC 01 00 FF 
0eb00     01 14 06 F6 | 	mov	arg02, ##@LR__5924
0eb04     D8 89 B1 FD | 	call	#__system___string_cmp
0eb08     00 FA 0D F2 | 	cmp	result1, #0 wz
0eb0c     40 01 90 5D |  if_ne	jmp	#LR__1231
0eb10     16 13 02 F6 | 	mov	arg01, local04
0eb14     2C 90 B1 FD | 	call	#__system___chdir
0eb18     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eb1c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eb20     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eb24     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eb28     FD 30 0A F6 | 	mov	local06, result1 wz
0eb2c                 | '   chdir(newdir$)
0eb2c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eb2c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0eb30     A4 00 90 AD |  if_e	jmp	#LR__1229
0eb34     00 12 06 F6 | 	mov	arg01, #0
0eb38     20 E6 B1 FD | 	call	#__system___getiolock_0616
0eb3c     FD 12 02 F6 | 	mov	arg01, result1
0eb40     74 89 B1 FD | 	call	#__system___lockmem
0eb44     BC 01 00 FF 
0eb48     03 14 06 F6 | 	mov	arg02, ##@LR__5925
0eb4c     00 12 06 F6 | 	mov	arg01, #0
0eb50     00 16 06 F6 | 	mov	arg03, #0
0eb54     58 96 B1 FD | 	call	#__system___basic_print_string
0eb58     00 12 06 F6 | 	mov	arg01, #0
0eb5c     18 15 02 F6 | 	mov	arg02, local06
0eb60     00 16 06 F6 | 	mov	arg03, #0
0eb64     0A 18 06 F6 | 	mov	arg04, #10
0eb68     88 96 B1 FD | 	call	#__system___basic_print_integer
0eb6c     BC 01 00 FF 
0eb70     11 14 06 F6 | 	mov	arg02, ##@LR__5926
0eb74     00 12 06 F6 | 	mov	arg01, #0
0eb78     00 16 06 F6 | 	mov	arg03, #0
0eb7c     30 96 B1 FD | 	call	#__system___basic_print_string
0eb80     45 00 00 FF 
0eb84     50 E5 05 F1 | 	add	objptr, ##35664
0eb88     F2 14 02 FB | 	rdlong	arg02, objptr
0eb8c     45 00 00 FF 
0eb90     50 E5 85 F1 | 	sub	objptr, ##35664
0eb94     00 12 06 F6 | 	mov	arg01, #0
0eb98     00 16 06 F6 | 	mov	arg03, #0
0eb9c     10 96 B1 FD | 	call	#__system___basic_print_string
0eba0     00 12 06 F6 | 	mov	arg01, #0
0eba4     0A 14 06 F6 | 	mov	arg02, #10
0eba8     00 16 06 F6 | 	mov	arg03, #0
0ebac     A8 95 B1 FD | 	call	#__system___basic_print_char
0ebb0     00 12 06 F6 | 	mov	arg01, #0
0ebb4     A4 E5 B1 FD | 	call	#__system___getiolock_0616
0ebb8     FD 00 68 FC | 	wrlong	#0, result1
0ebbc     4A 00 00 FF 
0ebc0     94 E4 05 F1 | 	add	objptr, ##38036
0ebc4     F2 12 02 FB | 	rdlong	arg01, objptr
0ebc8     4A 00 00 FF 
0ebcc     94 E4 85 F1 | 	sub	objptr, ##38036
0ebd0     70 8F B1 FD | 	call	#__system___chdir
0ebd4     14 00 90 FD | 	jmp	#LR__1230
0ebd8                 | LR__1229
0ebd8     4A 00 00 FF 
0ebdc     94 E4 05 F1 | 	add	objptr, ##38036
0ebe0     F2 2C 62 FC | 	wrlong	local04, objptr
0ebe4     4A 00 00 FF 
0ebe8     94 E4 85 F1 | 	sub	objptr, ##38036
0ebec                 | LR__1230
0ebec                 | '   print "Current directory: ";currentdir$
0ebec     00 12 06 F6 | 	mov	arg01, #0
0ebf0     68 E5 B1 FD | 	call	#__system___getiolock_0616
0ebf4     FD 12 02 F6 | 	mov	arg01, result1
0ebf8     BC 88 B1 FD | 	call	#__system___lockmem
0ebfc     BC 01 00 FF 
0ec00     14 14 06 F6 | 	mov	arg02, ##@LR__5927
0ec04     00 12 06 F6 | 	mov	arg01, #0
0ec08     00 16 06 F6 | 	mov	arg03, #0
0ec0c     A0 95 B1 FD | 	call	#__system___basic_print_string
0ec10     4A 00 00 FF 
0ec14     94 E4 05 F1 | 	add	objptr, ##38036
0ec18     F2 14 02 FB | 	rdlong	arg02, objptr
0ec1c     4A 00 00 FF 
0ec20     94 E4 85 F1 | 	sub	objptr, ##38036
0ec24     00 12 06 F6 | 	mov	arg01, #0
0ec28     00 16 06 F6 | 	mov	arg03, #0
0ec2c     80 95 B1 FD | 	call	#__system___basic_print_string
0ec30     00 12 06 F6 | 	mov	arg01, #0
0ec34     0A 14 06 F6 | 	mov	arg02, #10
0ec38     00 16 06 F6 | 	mov	arg03, #0
0ec3c     18 95 B1 FD | 	call	#__system___basic_print_char
0ec40     00 12 06 F6 | 	mov	arg01, #0
0ec44     14 E5 B1 FD | 	call	#__system___getiolock_0616
0ec48     FD 00 68 FC | 	wrlong	#0, result1
0ec4c                 | '   return
0ec4c     0C 02 90 FD | 	jmp	#LR__1239
0ec50                 | LR__1231
0ec50                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ec50     4A 00 00 FF 
0ec54     94 E4 05 F1 | 	add	objptr, ##38036
0ec58     F2 12 02 FB | 	rdlong	arg01, objptr
0ec5c     4A 00 00 FF 
0ec60     94 E4 85 F1 | 	sub	objptr, ##38036
0ec64     BC 01 00 FF 
0ec68     28 14 06 F6 | 	mov	arg02, ##@LR__5928
0ec6c     70 88 B1 FD | 	call	#__system___string_cmp
0ec70     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec74     34 00 90 AD |  if_e	jmp	#LR__1232
0ec78     4A 00 00 FF 
0ec7c     94 E4 05 F1 | 	add	objptr, ##38036
0ec80     F2 12 02 FB | 	rdlong	arg01, objptr
0ec84     4A 00 00 FF 
0ec88     94 E4 85 F1 | 	sub	objptr, ##38036
0ec8c     BC 01 00 FF 
0ec90     2A 14 06 F6 | 	mov	arg02, ##@LR__5929
0ec94     7C 88 B1 FD | 	call	#__system___string_concat
0ec98     FD 12 02 F6 | 	mov	arg01, result1
0ec9c     16 15 02 F6 | 	mov	arg02, local04
0eca0     70 88 B1 FD | 	call	#__system___string_concat
0eca4     FD 2C 02 F6 | 	mov	local04, result1
0eca8     20 00 90 FD | 	jmp	#LR__1233
0ecac                 | LR__1232
0ecac     4A 00 00 FF 
0ecb0     94 E4 05 F1 | 	add	objptr, ##38036
0ecb4     F2 12 02 FB | 	rdlong	arg01, objptr
0ecb8     4A 00 00 FF 
0ecbc     94 E4 85 F1 | 	sub	objptr, ##38036
0ecc0     16 15 02 F6 | 	mov	arg02, local04
0ecc4     4C 88 B1 FD | 	call	#__system___string_concat
0ecc8     FD 2C 02 F6 | 	mov	local04, result1
0eccc                 | LR__1233
0eccc                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0eccc     16 13 02 F6 | 	mov	arg01, local04
0ecd0     01 14 06 F6 | 	mov	arg02, #1
0ecd4     E8 A8 B1 FD | 	call	#__system__Right_S
0ecd8     FD 12 02 F6 | 	mov	arg01, result1
0ecdc     BC 01 00 FF 
0ece0     2C 14 06 F6 | 	mov	arg02, ##@LR__5930
0ece4     F8 87 B1 FD | 	call	#__system___string_cmp
0ece8     00 FA 0D F2 | 	cmp	result1, #0 wz
0ecec     30 00 90 5D |  if_ne	jmp	#LR__1236
0ecf0     16 13 02 F6 | 	mov	arg01, local04
0ecf4     09 2F 02 F6 | 	mov	local05, arg01
0ecf8     97 06 48 FB | 	callpa	#(@LR__1235-@LR__1234)>>2,fcache_load_ptr_
0ecfc                 | LR__1234
0ecfc     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ed00     01 2E 06 51 |  if_ne	add	local05, #1
0ed04     F4 FF 9F 5D |  if_ne	jmp	#LR__1234
0ed08                 | LR__1235
0ed08     09 2F 82 F1 | 	sub	local05, arg01
0ed0c     17 15 02 F6 | 	mov	arg02, local05
0ed10     01 14 86 F1 | 	sub	arg02, #1
0ed14     16 13 02 F6 | 	mov	arg01, local04
0ed18     1C A8 B1 FD | 	call	#__system__Left_S
0ed1c     FD 2C 02 F6 | 	mov	local04, result1
0ed20                 | LR__1236
0ed20     16 13 02 F6 | 	mov	arg01, local04
0ed24     1C 8E B1 FD | 	call	#__system___chdir
0ed28     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ed2c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ed30     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ed34     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ed38     FD 30 0A F6 | 	mov	local06, result1 wz
0ed3c                 | '   chdir(newdir$)
0ed3c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ed3c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ed40     A4 00 90 AD |  if_e	jmp	#LR__1237
0ed44     00 12 06 F6 | 	mov	arg01, #0
0ed48     10 E4 B1 FD | 	call	#__system___getiolock_0616
0ed4c     FD 12 02 F6 | 	mov	arg01, result1
0ed50     64 87 B1 FD | 	call	#__system___lockmem
0ed54     BC 01 00 FF 
0ed58     2E 14 06 F6 | 	mov	arg02, ##@LR__5931
0ed5c     00 12 06 F6 | 	mov	arg01, #0
0ed60     00 16 06 F6 | 	mov	arg03, #0
0ed64     48 94 B1 FD | 	call	#__system___basic_print_string
0ed68     00 12 06 F6 | 	mov	arg01, #0
0ed6c     18 15 02 F6 | 	mov	arg02, local06
0ed70     00 16 06 F6 | 	mov	arg03, #0
0ed74     0A 18 06 F6 | 	mov	arg04, #10
0ed78     78 94 B1 FD | 	call	#__system___basic_print_integer
0ed7c     BC 01 00 FF 
0ed80     3C 14 06 F6 | 	mov	arg02, ##@LR__5932
0ed84     00 12 06 F6 | 	mov	arg01, #0
0ed88     00 16 06 F6 | 	mov	arg03, #0
0ed8c     20 94 B1 FD | 	call	#__system___basic_print_string
0ed90     45 00 00 FF 
0ed94     50 E5 05 F1 | 	add	objptr, ##35664
0ed98     F2 14 02 FB | 	rdlong	arg02, objptr
0ed9c     45 00 00 FF 
0eda0     50 E5 85 F1 | 	sub	objptr, ##35664
0eda4     00 12 06 F6 | 	mov	arg01, #0
0eda8     00 16 06 F6 | 	mov	arg03, #0
0edac     00 94 B1 FD | 	call	#__system___basic_print_string
0edb0     00 12 06 F6 | 	mov	arg01, #0
0edb4     0A 14 06 F6 | 	mov	arg02, #10
0edb8     00 16 06 F6 | 	mov	arg03, #0
0edbc     98 93 B1 FD | 	call	#__system___basic_print_char
0edc0     00 12 06 F6 | 	mov	arg01, #0
0edc4     94 E3 B1 FD | 	call	#__system___getiolock_0616
0edc8     FD 00 68 FC | 	wrlong	#0, result1
0edcc     4A 00 00 FF 
0edd0     94 E4 05 F1 | 	add	objptr, ##38036
0edd4     F2 12 02 FB | 	rdlong	arg01, objptr
0edd8     4A 00 00 FF 
0eddc     94 E4 85 F1 | 	sub	objptr, ##38036
0ede0     60 8D B1 FD | 	call	#__system___chdir
0ede4     14 00 90 FD | 	jmp	#LR__1238
0ede8                 | LR__1237
0ede8     4A 00 00 FF 
0edec     94 E4 05 F1 | 	add	objptr, ##38036
0edf0     F2 2C 62 FC | 	wrlong	local04, objptr
0edf4     4A 00 00 FF 
0edf8     94 E4 85 F1 | 	sub	objptr, ##38036
0edfc                 | LR__1238
0edfc                 | '   print "Current directory: ";currentdir$
0edfc     00 12 06 F6 | 	mov	arg01, #0
0ee00     58 E3 B1 FD | 	call	#__system___getiolock_0616
0ee04     FD 12 02 F6 | 	mov	arg01, result1
0ee08     AC 86 B1 FD | 	call	#__system___lockmem
0ee0c     BC 01 00 FF 
0ee10     3F 14 06 F6 | 	mov	arg02, ##@LR__5933
0ee14     00 12 06 F6 | 	mov	arg01, #0
0ee18     00 16 06 F6 | 	mov	arg03, #0
0ee1c     90 93 B1 FD | 	call	#__system___basic_print_string
0ee20     4A 00 00 FF 
0ee24     94 E4 05 F1 | 	add	objptr, ##38036
0ee28     F2 14 02 FB | 	rdlong	arg02, objptr
0ee2c     4A 00 00 FF 
0ee30     94 E4 85 F1 | 	sub	objptr, ##38036
0ee34     00 12 06 F6 | 	mov	arg01, #0
0ee38     00 16 06 F6 | 	mov	arg03, #0
0ee3c     70 93 B1 FD | 	call	#__system___basic_print_string
0ee40     00 12 06 F6 | 	mov	arg01, #0
0ee44     0A 14 06 F6 | 	mov	arg02, #10
0ee48     00 16 06 F6 | 	mov	arg03, #0
0ee4c     08 93 B1 FD | 	call	#__system___basic_print_char
0ee50     00 12 06 F6 | 	mov	arg01, #0
0ee54     04 E3 B1 FD | 	call	#__system___getiolock_0616
0ee58     FD 00 68 FC | 	wrlong	#0, result1
0ee5c                 | LR__1239
0ee5c     A7 F0 03 F6 | 	mov	ptra, fp
0ee60     B2 00 A0 FD | 	call	#popregs_
0ee64                 | _do_cd_ret
0ee64     2D 00 64 FD | 	ret
0ee68                 | 
0ee68                 | ' 
0ee68                 | ' '-------------------- changefreq
0ee68                 | ' 
0ee68                 | ' sub do_changefreq
0ee68                 | _do_changefreq
0ee68     04 4A 05 F6 | 	mov	COUNT_, #4
0ee6c     A8 00 A0 FD | 	call	#pushregs_
0ee70     28 F0 07 F1 | 	add	ptra, #40
0ee74     34 E9 BF FD | 	call	#_pop
0ee78     FF 14 02 F6 | 	mov	arg02, result3
0ee7c     A7 FA 61 FC | 	wrlong	result1, fp
0ee80     04 4E 05 F1 | 	add	fp, #4
0ee84     A7 FC 61 FC | 	wrlong	result2, fp
0ee88     04 4E 05 F1 | 	add	fp, #4
0ee8c     A7 14 62 FC | 	wrlong	arg02, fp
0ee90     08 4E 85 F1 | 	sub	fp, #8
0ee94     A7 12 02 F6 | 	mov	arg01, fp
0ee98     B0 EB BF FD | 	call	#_converttofloat
0ee9c     24 4E 05 F1 | 	add	fp, #36
0eea0     A7 FA 61 FC | 	wrlong	result1, fp
0eea4     24 4E 85 F1 | 	sub	fp, #36
0eea8     FD 14 02 F6 | 	mov	arg02, result1
0eeac     FC 16 20 FF 
0eeb0     54 12 06 F6 | 	mov	arg01, ##1076754516
0eeb4     4C C4 B1 FD | 	call	#__system____builtin_logbase
0eeb8     FD 26 02 F6 | 	mov	local01, result1
0eebc     1E 14 C6 F9 | 	decod	arg02, #30
0eec0     FC 16 20 FF 
0eec4     54 12 06 F6 | 	mov	arg01, ##1076754516
0eec8     38 C4 B1 FD | 	call	#__system____builtin_logbase
0eecc     FD 14 02 F6 | 	mov	arg02, result1
0eed0     13 13 02 F6 | 	mov	arg01, local01
0eed4     60 B6 B1 FD | 	call	#__system___float_div
0eed8     FD 12 02 F6 | 	mov	arg01, result1
0eedc     00 14 06 F6 | 	mov	arg02, #0
0eee0     18 B9 B1 FD | 	call	#__system___float_tointeger
0eee4     10 4E 05 F1 | 	add	fp, #16
0eee8     A7 FA 61 FC | 	wrlong	result1, fp
0eeec     1E 26 C6 F9 | 	decod	local01, #30
0eef0     FD 12 02 F6 | 	mov	arg01, result1
0eef4     10 4E 85 F1 | 	sub	fp, #16
0eef8     05 12 06 F1 | 	add	arg01, #5
0eefc     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef00     1F 28 C6 C9 |  if_b	decod	local02, #31
0ef04     00 28 06 36 |  if_ae	mov	local02, #0
0ef08     24 B0 B1 FD | 	call	#__system___float_fromuns
0ef0c     14 FB 61 F5 | 	xor	result1, local02
0ef10     FD 14 02 F6 | 	mov	arg02, result1
0ef14     13 13 02 F6 | 	mov	arg01, local01
0ef18     20 C3 B1 FD | 	call	#__system____builtin_powf
0ef1c     FD 12 02 F6 | 	mov	arg01, result1
0ef20     01 14 06 F6 | 	mov	arg02, #1
0ef24     D4 B8 B1 FD | 	call	#__system___float_tointeger
0ef28     14 4E 05 F1 | 	add	fp, #20
0ef2c     A7 FA 61 FC | 	wrlong	result1, fp
0ef30                 | ' skip=round(2^(lfreq+5))
0ef30                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ef30     14 4E 85 F1 | 	sub	fp, #20
0ef34     40 00 00 FF 
0ef38     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ef3c     30 00 90 CD |  if_b	jmp	#LR__1240
0ef40     14 4E 05 F1 | 	add	fp, #20
0ef44     A7 26 02 FB | 	rdlong	local01, fp
0ef48     13 27 52 F6 | 	abs	local01, local01 wc
0ef4c     0F 26 46 F0 | 	shr	local01, #15
0ef50     13 27 82 F6 | 	negc	local01, local01
0ef54     04 4E 05 F1 | 	add	fp, #4
0ef58     A7 26 62 FC | 	wrlong	local01, fp
0ef5c     04 4E 85 F1 | 	sub	fp, #4
0ef60     40 00 80 FF 
0ef64     A7 00 68 FC | 	wrlong	##32768, fp
0ef68     14 4E 85 F1 | 	sub	fp, #20
0ef6c     0C 00 90 FD | 	jmp	#LR__1241
0ef70                 | LR__1240
0ef70     18 4E 05 F1 | 	add	fp, #24
0ef74     A7 02 68 FC | 	wrlong	#1, fp
0ef78     18 4E 85 F1 | 	sub	fp, #24
0ef7c                 | LR__1241
0ef7c     24 4E 05 F1 | 	add	fp, #36
0ef80     A7 14 02 FB | 	rdlong	arg02, fp
0ef84     24 4E 85 F1 | 	sub	fp, #36
0ef88     3E 2C 25 FF 
0ef8c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ef90     A4 B5 B1 FD | 	call	#__system___float_div
0ef94     FD 26 02 F6 | 	mov	local01, result1
0ef98     18 4E 05 F1 | 	add	fp, #24
0ef9c     A7 12 02 FB | 	rdlong	arg01, fp
0efa0     18 4E 85 F1 | 	sub	fp, #24
0efa4     09 13 52 F6 | 	abs	arg01, arg01 wc
0efa8     1F 28 C6 C9 |  if_b	decod	local02, #31
0efac     00 28 06 36 |  if_ae	mov	local02, #0
0efb0     7C AF B1 FD | 	call	#__system___float_fromuns
0efb4     14 FB 61 F5 | 	xor	result1, local02
0efb8     FD 2A 02 F6 | 	mov	local03, result1
0efbc     1E 2C C6 F9 | 	decod	local04, #30
0efc0     0D 12 06 F6 | 	mov	arg01, #13
0efc4     10 4E 05 F1 | 	add	fp, #16
0efc8     A7 14 02 FB | 	rdlong	arg02, fp
0efcc     10 4E 85 F1 | 	sub	fp, #16
0efd0     0A 13 82 F1 | 	sub	arg01, arg02
0efd4     09 13 52 F6 | 	abs	arg01, arg01 wc
0efd8     1F 28 C6 C9 |  if_b	decod	local02, #31
0efdc     00 28 06 36 |  if_ae	mov	local02, #0
0efe0     4C AF B1 FD | 	call	#__system___float_fromuns
0efe4     14 FB 61 F5 | 	xor	result1, local02
0efe8     FD 14 02 F6 | 	mov	arg02, result1
0efec     16 13 02 F6 | 	mov	arg01, local04
0eff0     48 C2 B1 FD | 	call	#__system____builtin_powf
0eff4     FD 14 02 F6 | 	mov	arg02, result1
0eff8     15 13 02 F6 | 	mov	arg01, local03
0effc     34 B3 B1 FD | 	call	#__system___float_mul
0f000     FD 14 02 F6 | 	mov	arg02, result1
0f004     13 13 02 F6 | 	mov	arg01, local01
0f008     2C B5 B1 FD | 	call	#__system___float_div
0f00c     FD 12 02 F6 | 	mov	arg01, result1
0f010     01 14 06 F6 | 	mov	arg02, #1
0f014     E4 B7 B1 FD | 	call	#__system___float_tointeger
0f018     FD 26 02 F6 | 	mov	local01, result1
0f01c     1C 4E 05 F1 | 	add	fp, #28
0f020     A7 26 62 FC | 	wrlong	local01, fp
0f024     1C 4E 85 F1 | 	sub	fp, #28
0f028     80 E7 BF FD | 	call	#_pop
0f02c     FF 2C 02 F6 | 	mov	local04, result3
0f030     A7 FA 61 FC | 	wrlong	result1, fp
0f034     04 4E 05 F1 | 	add	fp, #4
0f038     A7 FC 61 FC | 	wrlong	result2, fp
0f03c     04 4E 05 F1 | 	add	fp, #4
0f040     A7 2C 62 FC | 	wrlong	local04, fp
0f044     08 4E 85 F1 | 	sub	fp, #8
0f048     A7 12 02 F6 | 	mov	arg01, fp
0f04c     40 E9 BF FD | 	call	#_converttoint
0f050     FD 2A 52 F6 | 	abs	local03, result1 wc
0f054     07 2A 06 F5 | 	and	local03, #7
0f058     15 2B 82 F6 | 	negc	local03, local03
0f05c     0C 4E 05 F1 | 	add	fp, #12
0f060     A7 2A 62 FC | 	wrlong	local03, fp
0f064     08 4E 05 F1 | 	add	fp, #8
0f068     A7 26 02 FB | 	rdlong	local01, fp
0f06c     10 26 66 F0 | 	shl	local01, #16
0f070     08 4E 05 F1 | 	add	fp, #8
0f074     A7 2C 02 FB | 	rdlong	local04, fp
0f078     16 27 02 F1 | 	add	local01, local04
0f07c     04 4E 05 F1 | 	add	fp, #4
0f080     A7 26 62 FC | 	wrlong	local01, fp
0f084                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0f084     37 00 00 FF 
0f088     10 E4 05 F1 | 	add	objptr, ##28176
0f08c     F2 12 02 FB | 	rdlong	arg01, objptr
0f090     37 00 00 FF 
0f094     10 E4 85 F1 | 	sub	objptr, ##28176
0f098     14 4E 85 F1 | 	sub	fp, #20
0f09c     A7 2C 02 FB | 	rdlong	local04, fp
0f0a0     0C 4E 85 F1 | 	sub	fp, #12
0f0a4     06 2C 66 F0 | 	shl	local04, #6
0f0a8     16 13 02 F1 | 	add	arg01, local04
0f0ac     08 12 06 F1 | 	add	arg01, #8
0f0b0     09 FB 01 FB | 	rdlong	result1, arg01
0f0b4     1B FA 2D F4 | 	testbn	result1, #27 wz
0f0b8     3C 00 90 5D |  if_ne	jmp	#LR__1242
0f0bc     37 00 00 FF 
0f0c0     10 E4 05 F1 | 	add	objptr, ##28176
0f0c4     F2 12 02 FB | 	rdlong	arg01, objptr
0f0c8     37 00 00 FF 
0f0cc     10 E4 85 F1 | 	sub	objptr, ##28176
0f0d0     0C 4E 05 F1 | 	add	fp, #12
0f0d4     A7 2C 02 FB | 	rdlong	local04, fp
0f0d8     06 2C 66 F0 | 	shl	local04, #6
0f0dc     16 13 02 F1 | 	add	arg01, local04
0f0e0     18 12 06 F1 | 	add	arg01, #24
0f0e4     14 4E 05 F1 | 	add	fp, #20
0f0e8     A7 14 02 FB | 	rdlong	arg02, fp
0f0ec     20 4E 85 F1 | 	sub	fp, #32
0f0f0     09 15 62 FC | 	wrlong	arg02, arg01
0f0f4     80 00 90 FD | 	jmp	#LR__1243
0f0f8                 | LR__1242
0f0f8     37 00 00 FF 
0f0fc     10 E4 05 F1 | 	add	objptr, ##28176
0f100     F2 26 02 FB | 	rdlong	local01, objptr
0f104     37 00 00 FF 
0f108     10 E4 85 F1 | 	sub	objptr, ##28176
0f10c     0C 4E 05 F1 | 	add	fp, #12
0f110     A7 2C 02 FB | 	rdlong	local04, fp
0f114     06 2C 66 F0 | 	shl	local04, #6
0f118     16 27 02 F1 | 	add	local01, local04
0f11c     18 26 06 F1 | 	add	local01, #24
0f120     18 4E 05 F1 | 	add	fp, #24
0f124     A7 14 02 FB | 	rdlong	arg02, fp
0f128     24 4E 85 F1 | 	sub	fp, #36
0f12c     3E 2C 25 FF 
0f130     3C 12 06 F6 | 	mov	arg01, ##1247312956
0f134     00 B4 B1 FD | 	call	#__system___float_div
0f138     FD 12 02 F6 | 	mov	arg01, result1
0f13c     01 14 06 F6 | 	mov	arg02, #1
0f140     B8 B6 B1 FD | 	call	#__system___float_tointeger
0f144     13 FB 51 FC | 	wrword	result1, local01
0f148     37 00 00 FF 
0f14c     10 E4 05 F1 | 	add	objptr, ##28176
0f150     F2 12 02 FB | 	rdlong	arg01, objptr
0f154     37 00 00 FF 
0f158     10 E4 85 F1 | 	sub	objptr, ##28176
0f15c     0C 4E 05 F1 | 	add	fp, #12
0f160     A7 2C 02 FB | 	rdlong	local04, fp
0f164     0C 4E 85 F1 | 	sub	fp, #12
0f168     06 2C 66 F0 | 	shl	local04, #6
0f16c     16 13 02 F1 | 	add	arg01, local04
0f170     1A 12 06 F1 | 	add	arg01, #26
0f174     09 01 5A FC | 	wrword	#256, arg01
0f178                 | LR__1243
0f178     A7 F0 03 F6 | 	mov	ptra, fp
0f17c     B2 00 A0 FD | 	call	#popregs_
0f180                 | _do_changefreq_ret
0f180     2D 00 64 FD | 	ret
0f184                 | 
0f184                 | ' 
0f184                 | ' '-------------------- changepan
0f184                 | ' 
0f184                 | ' sub do_changepan
0f184                 | _do_changepan
0f184     01 4A 05 F6 | 	mov	COUNT_, #1
0f188     A8 00 A0 FD | 	call	#pushregs_
0f18c     14 F0 07 F1 | 	add	ptra, #20
0f190     18 E6 BF FD | 	call	#_pop
0f194     A7 FA 61 FC | 	wrlong	result1, fp
0f198     04 4E 05 F1 | 	add	fp, #4
0f19c     A7 FC 61 FC | 	wrlong	result2, fp
0f1a0     04 4E 05 F1 | 	add	fp, #4
0f1a4     A7 FE 61 FC | 	wrlong	result3, fp
0f1a8     08 4E 85 F1 | 	sub	fp, #8
0f1ac     00 00 23 FF 
0f1b0     00 26 06 F6 | 	mov	local01, ##1174405120
0f1b4     A7 12 02 F6 | 	mov	arg01, fp
0f1b8     90 E8 BF FD | 	call	#_converttofloat
0f1bc     FD 14 02 F6 | 	mov	arg02, result1
0f1c0     13 13 02 F6 | 	mov	arg01, local01
0f1c4     6C B1 B1 FD | 	call	#__system___float_mul
0f1c8     FD 12 02 F6 | 	mov	arg01, result1
0f1cc     01 14 06 F6 | 	mov	arg02, #1
0f1d0     28 B6 B1 FD | 	call	#__system___float_tointeger
0f1d4     0D 26 C6 F9 | 	decod	local01, #13
0f1d8     FD 26 02 F1 | 	add	local01, result1
0f1dc     10 4E 05 F1 | 	add	fp, #16
0f1e0     A7 26 62 FC | 	wrlong	local01, fp
0f1e4                 | ' 
0f1e4                 | ' t1=pop()
0f1e4                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f1e4                 | ' if pan<0 then pan=0
0f1e4     10 4E 85 F1 | 	sub	fp, #16
0f1e8     00 26 56 F2 | 	cmps	local01, #0 wc
0f1ec     10 4E 05 C1 |  if_b	add	fp, #16
0f1f0     A7 00 68 CC |  if_b	wrlong	#0, fp
0f1f4     10 4E 85 C1 |  if_b	sub	fp, #16
0f1f8                 | ' if pan>16384 then pan=16384
0f1f8     10 4E 05 F1 | 	add	fp, #16
0f1fc     A7 26 02 FB | 	rdlong	local01, fp
0f200     10 4E 85 F1 | 	sub	fp, #16
0f204     20 00 00 FF 
0f208     01 26 56 F2 | 	cmps	local01, ##16385 wc
0f20c     10 4E 05 31 |  if_ae	add	fp, #16
0f210     20 00 80 3F 
0f214     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0f218     10 4E 85 31 |  if_ae	sub	fp, #16
0f21c     8C E5 BF FD | 	call	#_pop
0f220     FF 26 02 F6 | 	mov	local01, result3
0f224     A7 FA 61 FC | 	wrlong	result1, fp
0f228     04 4E 05 F1 | 	add	fp, #4
0f22c     A7 FC 61 FC | 	wrlong	result2, fp
0f230     04 4E 05 F1 | 	add	fp, #4
0f234     A7 26 62 FC | 	wrlong	local01, fp
0f238     08 4E 85 F1 | 	sub	fp, #8
0f23c     A7 12 02 F6 | 	mov	arg01, fp
0f240     4C E7 BF FD | 	call	#_converttoint
0f244     FD 26 52 F6 | 	abs	local01, result1 wc
0f248     07 26 06 F5 | 	and	local01, #7
0f24c     13 27 82 F6 | 	negc	local01, local01
0f250     0C 4E 05 F1 | 	add	fp, #12
0f254     A7 26 62 FC | 	wrlong	local01, fp
0f258     37 00 00 FF 
0f25c     10 E4 05 F1 | 	add	objptr, ##28176
0f260     F2 12 02 FB | 	rdlong	arg01, objptr
0f264     37 00 00 FF 
0f268     10 E4 85 F1 | 	sub	objptr, ##28176
0f26c     06 26 66 F0 | 	shl	local01, #6
0f270     13 13 02 F1 | 	add	arg01, local01
0f274     16 12 06 F1 | 	add	arg01, #22
0f278     04 4E 05 F1 | 	add	fp, #4
0f27c     A7 14 02 FB | 	rdlong	arg02, fp
0f280     10 4E 85 F1 | 	sub	fp, #16
0f284     09 15 52 FC | 	wrword	arg02, arg01
0f288     A7 F0 03 F6 | 	mov	ptra, fp
0f28c     B2 00 A0 FD | 	call	#popregs_
0f290                 | _do_changepan_ret
0f290     2D 00 64 FD | 	ret
0f294                 | 
0f294                 | ' 
0f294                 | ' '-------------------- changevol
0f294                 | ' 
0f294                 | ' sub do_changevol
0f294                 | _do_changevol
0f294     00 4A 05 F6 | 	mov	COUNT_, #0
0f298     A8 00 A0 FD | 	call	#pushregs_
0f29c     14 F0 07 F1 | 	add	ptra, #20
0f2a0     08 E5 BF FD | 	call	#_pop
0f2a4     FF 14 02 F6 | 	mov	arg02, result3
0f2a8     A7 FA 61 FC | 	wrlong	result1, fp
0f2ac     04 4E 05 F1 | 	add	fp, #4
0f2b0     A7 FC 61 FC | 	wrlong	result2, fp
0f2b4     04 4E 05 F1 | 	add	fp, #4
0f2b8     A7 14 62 FC | 	wrlong	arg02, fp
0f2bc     08 4E 85 F1 | 	sub	fp, #8
0f2c0     A7 12 02 F6 | 	mov	arg01, fp
0f2c4     84 E7 BF FD | 	call	#_converttofloat
0f2c8     FD 12 02 F6 | 	mov	arg01, result1
0f2cc     00 3D 22 FF 
0f2d0     00 14 06 F6 | 	mov	arg02, ##1148846080
0f2d4     5C B0 B1 FD | 	call	#__system___float_mul
0f2d8     FD 12 02 F6 | 	mov	arg01, result1
0f2dc     01 14 06 F6 | 	mov	arg02, #1
0f2e0     18 B5 B1 FD | 	call	#__system___float_tointeger
0f2e4     FD 14 52 F6 | 	abs	arg02, result1 wc
0f2e8     0D 14 46 F7 | 	zerox	arg02, #13
0f2ec     0A 15 82 F6 | 	negc	arg02, arg02
0f2f0     10 4E 05 F1 | 	add	fp, #16
0f2f4     A7 14 62 FC | 	wrlong	arg02, fp
0f2f8     10 4E 85 F1 | 	sub	fp, #16
0f2fc     AC E4 BF FD | 	call	#_pop
0f300     FF 14 02 F6 | 	mov	arg02, result3
0f304     A7 FA 61 FC | 	wrlong	result1, fp
0f308     04 4E 05 F1 | 	add	fp, #4
0f30c     A7 FC 61 FC | 	wrlong	result2, fp
0f310     04 4E 05 F1 | 	add	fp, #4
0f314     A7 14 62 FC | 	wrlong	arg02, fp
0f318     08 4E 85 F1 | 	sub	fp, #8
0f31c     A7 12 02 F6 | 	mov	arg01, fp
0f320     6C E6 BF FD | 	call	#_converttoint
0f324     FD 14 52 F6 | 	abs	arg02, result1 wc
0f328     07 14 06 F5 | 	and	arg02, #7
0f32c     0A 15 82 F6 | 	negc	arg02, arg02
0f330     0C 4E 05 F1 | 	add	fp, #12
0f334     A7 14 62 FC | 	wrlong	arg02, fp
0f338     37 00 00 FF 
0f33c     10 E4 05 F1 | 	add	objptr, ##28176
0f340     F2 12 02 FB | 	rdlong	arg01, objptr
0f344     37 00 00 FF 
0f348     10 E4 85 F1 | 	sub	objptr, ##28176
0f34c     06 14 66 F0 | 	shl	arg02, #6
0f350     0A 13 02 F1 | 	add	arg01, arg02
0f354     14 12 06 F1 | 	add	arg01, #20
0f358     04 4E 05 F1 | 	add	fp, #4
0f35c     A7 14 02 FB | 	rdlong	arg02, fp
0f360     10 4E 85 F1 | 	sub	fp, #16
0f364     09 15 52 FC | 	wrword	arg02, arg01
0f368     A7 F0 03 F6 | 	mov	ptra, fp
0f36c     B2 00 A0 FD | 	call	#popregs_
0f370                 | _do_changevol_ret
0f370     2D 00 64 FD | 	ret
0f374                 | 
0f374                 | ' 
0f374                 | ' '-------------------- changewav
0f374                 | ' 
0f374                 | ' sub do_changewav
0f374                 | _do_changewav
0f374     00 4A 05 F6 | 	mov	COUNT_, #0
0f378     A8 00 A0 FD | 	call	#pushregs_
0f37c     14 F0 07 F1 | 	add	ptra, #20
0f380     28 E4 BF FD | 	call	#_pop
0f384     FF 14 02 F6 | 	mov	arg02, result3
0f388     A7 FA 61 FC | 	wrlong	result1, fp
0f38c     04 4E 05 F1 | 	add	fp, #4
0f390     A7 FC 61 FC | 	wrlong	result2, fp
0f394     04 4E 05 F1 | 	add	fp, #4
0f398     A7 14 62 FC | 	wrlong	arg02, fp
0f39c     08 4E 85 F1 | 	sub	fp, #8
0f3a0     A7 12 02 F6 | 	mov	arg01, fp
0f3a4     E8 E5 BF FD | 	call	#_converttoint
0f3a8     10 4E 05 F1 | 	add	fp, #16
0f3ac     A7 FA 61 FC | 	wrlong	result1, fp
0f3b0                 | ' 
0f3b0                 | ' t1=pop()
0f3b0                 | ' wave=converttoint(t1)
0f3b0                 | ' if wave<0 then wave=0
0f3b0     FD 14 02 F6 | 	mov	arg02, result1
0f3b4     10 4E 85 F1 | 	sub	fp, #16
0f3b8     00 14 56 F2 | 	cmps	arg02, #0 wc
0f3bc     10 4E 05 C1 |  if_b	add	fp, #16
0f3c0     A7 00 68 CC |  if_b	wrlong	#0, fp
0f3c4     10 4E 85 C1 |  if_b	sub	fp, #16
0f3c8     E0 E3 BF FD | 	call	#_pop
0f3cc     FF 14 02 F6 | 	mov	arg02, result3
0f3d0     A7 FA 61 FC | 	wrlong	result1, fp
0f3d4     04 4E 05 F1 | 	add	fp, #4
0f3d8     A7 FC 61 FC | 	wrlong	result2, fp
0f3dc     04 4E 05 F1 | 	add	fp, #4
0f3e0     A7 14 62 FC | 	wrlong	arg02, fp
0f3e4     08 4E 85 F1 | 	sub	fp, #8
0f3e8     A7 12 02 F6 | 	mov	arg01, fp
0f3ec     A0 E5 BF FD | 	call	#_converttoint
0f3f0     FD 14 52 F6 | 	abs	arg02, result1 wc
0f3f4     07 14 06 F5 | 	and	arg02, #7
0f3f8     0A 15 82 F6 | 	negc	arg02, arg02
0f3fc     0C 4E 05 F1 | 	add	fp, #12
0f400     A7 14 62 FC | 	wrlong	arg02, fp
0f404                 | ' if wave <32 then 
0f404     04 4E 05 F1 | 	add	fp, #4
0f408     A7 14 02 FB | 	rdlong	arg02, fp
0f40c     10 4E 85 F1 | 	sub	fp, #16
0f410     20 14 56 F2 | 	cmps	arg02, #32 wc
0f414     48 00 90 3D |  if_ae	jmp	#LR__1250
0f418     37 00 00 FF 
0f41c     10 E4 05 F1 | 	add	objptr, ##28176
0f420     F2 12 02 FB | 	rdlong	arg01, objptr
0f424     37 00 00 FF 
0f428     10 E4 85 F1 | 	sub	objptr, ##28176
0f42c     0C 4E 05 F1 | 	add	fp, #12
0f430     A7 14 02 FB | 	rdlong	arg02, fp
0f434     06 14 66 F0 | 	shl	arg02, #6
0f438     0A 13 02 F1 | 	add	arg01, arg02
0f43c     08 12 06 F1 | 	add	arg01, #8
0f440     04 4E 05 F1 | 	add	fp, #4
0f444     A7 14 02 FB | 	rdlong	arg02, fp
0f448     10 4E 85 F1 | 	sub	fp, #16
0f44c     0B 14 66 F0 | 	shl	arg02, #11
0f450     00 00 40 FF 
0f454     00 14 06 F1 | 	add	arg02, ##-2147483648
0f458     09 15 62 FC | 	wrlong	arg02, arg01
0f45c     34 00 90 FD | 	jmp	#LR__1251
0f460                 | LR__1250
0f460     37 00 00 FF 
0f464     10 E4 05 F1 | 	add	objptr, ##28176
0f468     F2 12 02 FB | 	rdlong	arg01, objptr
0f46c     37 00 00 FF 
0f470     10 E4 85 F1 | 	sub	objptr, ##28176
0f474     0C 4E 05 F1 | 	add	fp, #12
0f478     A7 14 02 FB | 	rdlong	arg02, fp
0f47c     0C 4E 85 F1 | 	sub	fp, #12
0f480     06 14 66 F0 | 	shl	arg02, #6
0f484     0A 13 02 F1 | 	add	arg01, arg02
0f488     08 12 06 F1 | 	add	arg01, #8
0f48c     00 00 C4 FF 
0f490     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f494                 | LR__1251
0f494     A7 F0 03 F6 | 	mov	ptra, fp
0f498     B2 00 A0 FD | 	call	#popregs_
0f49c                 | _do_changewav_ret
0f49c     2D 00 64 FD | 	ret
0f4a0                 | 
0f4a0                 | ' 
0f4a0                 | ' '-------------------- chr$
0f4a0                 | ' 
0f4a0                 | ' sub do_chr
0f4a0                 | _do_chr
0f4a0     01 4A 05 F6 | 	mov	COUNT_, #1
0f4a4     A8 00 A0 FD | 	call	#pushregs_
0f4a8     14 F0 07 F1 | 	add	ptra, #20
0f4ac     4A 00 00 FF 
0f4b0     80 E4 05 F1 | 	add	objptr, ##38016
0f4b4     F2 26 02 FB | 	rdlong	local01, objptr
0f4b8     13 17 02 F6 | 	mov	arg03, local01
0f4bc     01 16 66 F0 | 	shl	arg03, #1
0f4c0     13 17 02 F1 | 	add	arg03, local01
0f4c4     02 16 66 F0 | 	shl	arg03, #2
0f4c8     03 00 00 FF 
0f4cc     04 E4 85 F1 | 	sub	objptr, ##1540
0f4d0     F2 16 02 F1 | 	add	arg03, objptr
0f4d4     0B 17 02 FB | 	rdlong	arg03, arg03
0f4d8     0C 4E 05 F1 | 	add	fp, #12
0f4dc     A7 16 62 FC | 	wrlong	arg03, fp
0f4e0                 | ' 
0f4e0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4e0                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f4e0     0C 4E 85 F1 | 	sub	fp, #12
0f4e4     02 16 16 F2 | 	cmp	arg03, #2 wc
0f4e8     47 00 00 FF 
0f4ec     7C E4 85 F1 | 	sub	objptr, ##36476
0f4f0     0C 4E 05 C1 |  if_b	add	fp, #12
0f4f4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f4f8     0C 4E 85 C1 |  if_b	sub	fp, #12
0f4fc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1260
0f500     00 12 06 F6 | 	mov	arg01, #0
0f504     54 DC B1 FD | 	call	#__system___getiolock_0616
0f508     FD 12 02 F6 | 	mov	arg01, result1
0f50c     A8 7F B1 FD | 	call	#__system___lockmem
0f510     BC 01 00 FF 
0f514     53 14 06 F6 | 	mov	arg02, ##@LR__5934
0f518     00 12 06 F6 | 	mov	arg01, #0
0f51c     00 16 06 F6 | 	mov	arg03, #0
0f520     8C 8C B1 FD | 	call	#__system___basic_print_string
0f524     00 12 06 F6 | 	mov	arg01, #0
0f528     30 DC B1 FD | 	call	#__system___getiolock_0616
0f52c     FD 00 68 FC | 	wrlong	#0, result1
0f530     27 12 06 F6 | 	mov	arg01, #39
0f534     00 14 06 F6 | 	mov	arg02, #0
0f538     64 45 B1 FD | 	call	#_printerror
0f53c     54 00 90 FD | 	jmp	#LR__1261
0f540                 | LR__1260
0f540     68 E2 BF FD | 	call	#_pop
0f544     FF 26 02 F6 | 	mov	local01, result3
0f548     A7 FA 61 FC | 	wrlong	result1, fp
0f54c     04 4E 05 F1 | 	add	fp, #4
0f550     A7 FC 61 FC | 	wrlong	result2, fp
0f554     04 4E 05 F1 | 	add	fp, #4
0f558     A7 26 62 FC | 	wrlong	local01, fp
0f55c     08 4E 85 F1 | 	sub	fp, #8
0f560     A7 12 02 F6 | 	mov	arg01, fp
0f564     28 E4 BF FD | 	call	#_converttoint
0f568     10 4E 05 F1 | 	add	fp, #16
0f56c     A7 FA 61 FC | 	wrlong	result1, fp
0f570     FD 12 02 F6 | 	mov	arg01, result1
0f574     10 4E 85 F1 | 	sub	fp, #16
0f578     80 A1 B1 FD | 	call	#__system__Chr_S
0f57c     A7 FA 61 FC | 	wrlong	result1, fp
0f580     08 4E 05 F1 | 	add	fp, #8
0f584     A7 3E 68 FC | 	wrlong	#31, fp
0f588     08 4E 85 F1 | 	sub	fp, #8
0f58c     A7 12 02 F6 | 	mov	arg01, fp
0f590     B0 E2 BF FD | 	call	#_push
0f594                 | LR__1261
0f594     A7 F0 03 F6 | 	mov	ptra, fp
0f598     B2 00 A0 FD | 	call	#popregs_
0f59c                 | _do_chr_ret
0f59c     2D 00 64 FD | 	ret
0f5a0                 | 
0f5a0                 | ' 
0f5a0                 | ' '-------------------- circle
0f5a0                 | ' 
0f5a0                 | ' sub do_circle
0f5a0                 | _do_circle
0f5a0     02 4A 05 F6 | 	mov	COUNT_, #2
0f5a4     A8 00 A0 FD | 	call	#pushregs_
0f5a8     24 F0 07 F1 | 	add	ptra, #36
0f5ac     FC E1 BF FD | 	call	#_pop
0f5b0     FD 18 02 F6 | 	mov	arg04, result1
0f5b4     FE 16 02 F6 | 	mov	arg03, result2
0f5b8     FF 14 02 F6 | 	mov	arg02, result3
0f5bc     18 4E 05 F1 | 	add	fp, #24
0f5c0     A7 18 62 FC | 	wrlong	arg04, fp
0f5c4     04 4E 05 F1 | 	add	fp, #4
0f5c8     A7 16 62 FC | 	wrlong	arg03, fp
0f5cc     04 4E 05 F1 | 	add	fp, #4
0f5d0     A7 14 62 FC | 	wrlong	arg02, fp
0f5d4     20 4E 85 F1 | 	sub	fp, #32
0f5d8     D0 E1 BF FD | 	call	#_pop
0f5dc     FD 18 02 F6 | 	mov	arg04, result1
0f5e0     FE 16 02 F6 | 	mov	arg03, result2
0f5e4     FF 26 02 F6 | 	mov	local01, result3
0f5e8     0C 4E 05 F1 | 	add	fp, #12
0f5ec     A7 18 62 FC | 	wrlong	arg04, fp
0f5f0     04 4E 05 F1 | 	add	fp, #4
0f5f4     A7 16 62 FC | 	wrlong	arg03, fp
0f5f8     04 4E 05 F1 | 	add	fp, #4
0f5fc     A7 26 62 FC | 	wrlong	local01, fp
0f600     14 4E 85 F1 | 	sub	fp, #20
0f604     A4 E1 BF FD | 	call	#_pop
0f608     A7 FA 61 FC | 	wrlong	result1, fp
0f60c     04 4E 05 F1 | 	add	fp, #4
0f610     A7 FC 61 FC | 	wrlong	result2, fp
0f614     04 4E 05 F1 | 	add	fp, #4
0f618     A7 FE 61 FC | 	wrlong	result3, fp
0f61c                 | ' 
0f61c                 | ' t3=pop()
0f61c                 | ' t2=pop()
0f61c                 | ' t1=pop()
0f61c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f61c     FF 18 02 F6 | 	mov	arg04, result3
0f620     08 4E 85 F1 | 	sub	fp, #8
0f624     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f628     08 4E 05 51 |  if_ne	add	fp, #8
0f62c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f630     08 4E 85 51 |  if_ne	sub	fp, #8
0f634     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f638     7C 00 90 5D |  if_ne	jmp	#LR__1270
0f63c     14 4E 05 F1 | 	add	fp, #20
0f640     A7 26 02 FB | 	rdlong	local01, fp
0f644     14 4E 85 F1 | 	sub	fp, #20
0f648     1C 26 0E F2 | 	cmp	local01, #28 wz
0f64c     14 4E 05 51 |  if_ne	add	fp, #20
0f650     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f654     14 4E 85 51 |  if_ne	sub	fp, #20
0f658     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f65c     58 00 90 5D |  if_ne	jmp	#LR__1270
0f660     20 4E 05 F1 | 	add	fp, #32
0f664     A7 26 02 FB | 	rdlong	local01, fp
0f668     20 4E 85 F1 | 	sub	fp, #32
0f66c     1C 26 0E F2 | 	cmp	local01, #28 wz
0f670     20 4E 05 51 |  if_ne	add	fp, #32
0f674     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f678     20 4E 85 51 |  if_ne	sub	fp, #32
0f67c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f680     34 00 90 5D |  if_ne	jmp	#LR__1270
0f684     A7 12 02 FB | 	rdlong	arg01, fp
0f688     0C 4E 05 F1 | 	add	fp, #12
0f68c     A7 14 02 FB | 	rdlong	arg02, fp
0f690     0C 4E 05 F1 | 	add	fp, #12
0f694     A7 16 02 FB | 	rdlong	arg03, fp
0f698     18 4E 85 F1 | 	sub	fp, #24
0f69c     37 00 00 FF 
0f6a0     28 E4 05 F1 | 	add	objptr, ##28200
0f6a4     F2 18 02 FB | 	rdlong	arg04, objptr
0f6a8     37 00 00 FF 
0f6ac     28 E4 85 F1 | 	sub	objptr, ##28200
0f6b0     E4 5C B1 FD | 	call	#_hg010b_spin2_circle
0f6b4                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f6b4     54 00 90 FD | 	jmp	#LR__1271
0f6b8                 | LR__1270
0f6b8     A7 12 02 F6 | 	mov	arg01, fp
0f6bc     D0 E2 BF FD | 	call	#_converttoint
0f6c0     FD 26 02 F6 | 	mov	local01, result1
0f6c4     0C 4E 05 F1 | 	add	fp, #12
0f6c8     A7 12 02 F6 | 	mov	arg01, fp
0f6cc     0C 4E 85 F1 | 	sub	fp, #12
0f6d0     BC E2 BF FD | 	call	#_converttoint
0f6d4     FD 28 02 F6 | 	mov	local02, result1
0f6d8     18 4E 05 F1 | 	add	fp, #24
0f6dc     A7 12 02 F6 | 	mov	arg01, fp
0f6e0     18 4E 85 F1 | 	sub	fp, #24
0f6e4     A8 E2 BF FD | 	call	#_converttoint
0f6e8     FD 16 02 F6 | 	mov	arg03, result1
0f6ec     37 00 00 FF 
0f6f0     28 E4 05 F1 | 	add	objptr, ##28200
0f6f4     F2 18 02 FB | 	rdlong	arg04, objptr
0f6f8     37 00 00 FF 
0f6fc     28 E4 85 F1 | 	sub	objptr, ##28200
0f700     13 13 02 F6 | 	mov	arg01, local01
0f704     14 15 02 F6 | 	mov	arg02, local02
0f708     8C 5C B1 FD | 	call	#_hg010b_spin2_circle
0f70c                 | LR__1271
0f70c     A7 F0 03 F6 | 	mov	ptra, fp
0f710     B2 00 A0 FD | 	call	#popregs_
0f714                 | _do_circle_ret
0f714     2D 00 64 FD | 	ret
0f718                 | 
0f718                 | ' 
0f718                 | ' '-------------------- click
0f718                 | ' 
0f718                 | ' sub do_click
0f718                 | _do_click
0f718     90 E0 BF FD | 	call	#_pop
0f71c     00 FA 4D F2 | 	cmps	result1, #0 wz
0f720                 | ' 
0f720                 | ' t1=pop()
0f720                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f720     50 00 00 AF 
0f724     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f728     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f72c     50 00 00 FF 
0f730     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f734     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f738     50 00 00 5F 
0f73c     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f740                 | _do_click_ret
0f740     2D 00 64 FD | 	ret
0f744                 | 
0f744                 | ' 
0f744                 | ' '-------------------- close
0f744                 | ' 
0f744                 | ' sub do_close
0f744                 | _do_close
0f744     03 4A 05 F6 | 	mov	COUNT_, #3
0f748     A8 00 A0 FD | 	call	#pushregs_
0f74c     5C E0 BF FD | 	call	#_pop
0f750     FD 26 02 F6 | 	mov	local01, result1
0f754     FF 16 02 F6 | 	mov	arg03, result3
0f758     FE 28 02 F6 | 	mov	local02, result2
0f75c     0B 2B 02 F6 | 	mov	local03, arg03
0f760                 | ' 
0f760                 | ' numpar=compiledline(lineptr_e).result.uresult
0f760                 | ' t1=pop()
0f760                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f760     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f764     44 00 90 AD |  if_e	jmp	#LR__1280
0f768     00 12 06 F6 | 	mov	arg01, #0
0f76c     EC D9 B1 FD | 	call	#__system___getiolock_0616
0f770     FD 12 02 F6 | 	mov	arg01, result1
0f774     40 7D B1 FD | 	call	#__system___lockmem
0f778     BC 01 00 FF 
0f77c     5A 14 06 F6 | 	mov	arg02, ##@LR__5935
0f780     00 12 06 F6 | 	mov	arg01, #0
0f784     00 16 06 F6 | 	mov	arg03, #0
0f788     24 8A B1 FD | 	call	#__system___basic_print_string
0f78c     00 12 06 F6 | 	mov	arg01, #0
0f790     0A 14 06 F6 | 	mov	arg02, #10
0f794     00 16 06 F6 | 	mov	arg03, #0
0f798     BC 89 B1 FD | 	call	#__system___basic_print_char
0f79c     00 12 06 F6 | 	mov	arg01, #0
0f7a0     B8 D9 B1 FD | 	call	#__system___getiolock_0616
0f7a4     FD 00 68 FC | 	wrlong	#0, result1
0f7a8     08 00 90 FD | 	jmp	#LR__1281
0f7ac                 | LR__1280
0f7ac                 | ' channel  = t1.result.iresult
0f7ac                 | ' close #channel
0f7ac     13 13 02 F6 | 	mov	arg01, local01
0f7b0     60 D0 B1 FD | 	call	#__system__close
0f7b4                 | LR__1281
0f7b4     A7 F0 03 F6 | 	mov	ptra, fp
0f7b8     B2 00 A0 FD | 	call	#popregs_
0f7bc                 | _do_close_ret
0f7bc     2D 00 64 FD | 	ret
0f7c0                 | 
0f7c0                 | ' 
0f7c0                 | ' '-------------------- cls
0f7c0                 | ' 
0f7c0                 | ' sub do_cls
0f7c0                 | _do_cls
0f7c0     37 00 00 FF 
0f7c4     3C E4 05 F1 | 	add	objptr, ##28220
0f7c8     F2 12 02 FB | 	rdlong	arg01, objptr
0f7cc     04 E4 85 F1 | 	sub	objptr, #4
0f7d0     F2 14 02 FB | 	rdlong	arg02, objptr
0f7d4     37 00 00 FF 
0f7d8     38 E4 85 F1 | 	sub	objptr, ##28216
0f7dc     7C 60 B1 FD | 	call	#_hg010b_spin2_cls
0f7e0     37 00 00 FF 
0f7e4     3C E4 05 F1 | 	add	objptr, ##28220
0f7e8     F2 14 02 FB | 	rdlong	arg02, objptr
0f7ec     14 E4 85 F1 | 	sub	objptr, #20
0f7f0     F2 14 62 FC | 	wrlong	arg02, objptr
0f7f4     37 00 00 FF 
0f7f8     28 E4 85 F1 | 	sub	objptr, ##28200
0f7fc                 | _do_cls_ret
0f7fc     2D 00 64 FD | 	ret
0f800                 | 
0f800                 | ' 
0f800                 | ' sub do_coginit
0f800                 | _do_coginit
0f800     00 4A 05 F6 | 	mov	COUNT_, #0
0f804     A8 00 A0 FD | 	call	#pushregs_
0f808     08 00 00 FF 
0f80c     1C F0 07 F1 | 	add	ptra, ##4124
0f810     4A 00 00 FF 
0f814     80 E4 05 F1 | 	add	objptr, ##38016
0f818     F2 FA 01 FB | 	rdlong	result1, objptr
0f81c     FD FC 01 F6 | 	mov	result2, result1
0f820     01 FC 65 F0 | 	shl	result2, #1
0f824     FD FC 01 F1 | 	add	result2, result1
0f828     02 FC 65 F0 | 	shl	result2, #2
0f82c     03 00 00 FF 
0f830     04 E4 85 F1 | 	sub	objptr, ##1540
0f834     F2 FC 01 F1 | 	add	result2, objptr
0f838     FE FC 01 FB | 	rdlong	result2, result2
0f83c     A7 FC 61 FC | 	wrlong	result2, fp
0f840                 | ' numpar=compiledline(lineptr_e).result.uresult
0f840                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f840     02 FC 55 F2 | 	cmps	result2, #2 wc
0f844     47 00 00 FF 
0f848     7C E4 85 F1 | 	sub	objptr, ##36476
0f84c     0C 00 90 CD |  if_b	jmp	#LR__1290
0f850     A7 FA 01 FB | 	rdlong	result1, fp
0f854     04 FA 55 F2 | 	cmps	result1, #4 wc
0f858     40 00 90 CD |  if_b	jmp	#LR__1291
0f85c                 | LR__1290
0f85c     00 12 06 F6 | 	mov	arg01, #0
0f860     F8 D8 B1 FD | 	call	#__system___getiolock_0616
0f864     FD 12 02 F6 | 	mov	arg01, result1
0f868     4C 7C B1 FD | 	call	#__system___lockmem
0f86c     BC 01 00 FF 
0f870     6C 14 06 F6 | 	mov	arg02, ##@LR__5936
0f874     00 12 06 F6 | 	mov	arg01, #0
0f878     00 16 06 F6 | 	mov	arg03, #0
0f87c     30 89 B1 FD | 	call	#__system___basic_print_string
0f880     00 12 06 F6 | 	mov	arg01, #0
0f884     D4 D8 B1 FD | 	call	#__system___getiolock_0616
0f888     FD 00 68 FC | 	wrlong	#0, result1
0f88c     27 12 06 F6 | 	mov	arg01, #39
0f890     00 14 06 F6 | 	mov	arg02, #0
0f894     08 42 B1 FD | 	call	#_printerror
0f898     94 01 90 FD | 	jmp	#LR__1295
0f89c                 | LR__1291
0f89c     0C DF BF FD | 	call	#_pop
0f8a0     FF 16 02 F6 | 	mov	arg03, result3
0f8a4     08 00 00 FF 
0f8a8     10 4E 05 F1 | 	add	fp, ##4112
0f8ac     A7 FA 61 FC | 	wrlong	result1, fp
0f8b0     04 4E 05 F1 | 	add	fp, #4
0f8b4     A7 FC 61 FC | 	wrlong	result2, fp
0f8b8     04 4E 05 F1 | 	add	fp, #4
0f8bc     A7 16 62 FC | 	wrlong	arg03, fp
0f8c0     08 4E 85 F1 | 	sub	fp, #8
0f8c4     A7 12 02 F6 | 	mov	arg01, fp
0f8c8     08 00 00 FF 
0f8cc     10 4E 85 F1 | 	sub	fp, ##4112
0f8d0     BC E0 BF FD | 	call	#_converttoint
0f8d4     FD 16 02 F6 | 	mov	arg03, result1
0f8d8     04 4E 05 F1 | 	add	fp, #4
0f8dc     A7 16 62 FC | 	wrlong	arg03, fp
0f8e0     04 4E 85 F1 | 	sub	fp, #4
0f8e4     C4 DE BF FD | 	call	#_pop
0f8e8     FF 16 02 F6 | 	mov	arg03, result3
0f8ec     08 00 00 FF 
0f8f0     10 4E 05 F1 | 	add	fp, ##4112
0f8f4     A7 FA 61 FC | 	wrlong	result1, fp
0f8f8     04 4E 05 F1 | 	add	fp, #4
0f8fc     A7 FC 61 FC | 	wrlong	result2, fp
0f900     04 4E 05 F1 | 	add	fp, #4
0f904     A7 16 62 FC | 	wrlong	arg03, fp
0f908     08 4E 85 F1 | 	sub	fp, #8
0f90c     A7 12 02 F6 | 	mov	arg01, fp
0f910     08 00 00 FF 
0f914     10 4E 85 F1 | 	sub	fp, ##4112
0f918     74 E0 BF FD | 	call	#_converttoint
0f91c     08 4E 05 F1 | 	add	fp, #8
0f920     A7 FA 61 FC | 	wrlong	result1, fp
0f924     08 4E 85 F1 | 	sub	fp, #8
0f928                 | ' t1=pop()
0f928                 | ' ptra_val=converttoint(t1)
0f928                 | ' t1=pop()
0f928                 | ' addrval=converttoint(t1)
0f928                 | ' if numpar=3 then 
0f928     A7 FA 01 FB | 	rdlong	result1, fp
0f92c     03 FA 0D F2 | 	cmp	result1, #3 wz
0f930     48 00 90 5D |  if_ne	jmp	#LR__1292
0f934     74 DE BF FD | 	call	#_pop
0f938     FF 16 02 F6 | 	mov	arg03, result3
0f93c     08 00 00 FF 
0f940     10 4E 05 F1 | 	add	fp, ##4112
0f944     A7 FA 61 FC | 	wrlong	result1, fp
0f948     04 4E 05 F1 | 	add	fp, #4
0f94c     A7 FC 61 FC | 	wrlong	result2, fp
0f950     04 4E 05 F1 | 	add	fp, #4
0f954     A7 16 62 FC | 	wrlong	arg03, fp
0f958     08 4E 85 F1 | 	sub	fp, #8
0f95c     A7 12 02 F6 | 	mov	arg01, fp
0f960     08 00 00 FF 
0f964     10 4E 85 F1 | 	sub	fp, ##4112
0f968     24 E0 BF FD | 	call	#_converttoint
0f96c     0C 4E 05 F1 | 	add	fp, #12
0f970     A7 FA 61 FC | 	wrlong	result1, fp
0f974     0C 4E 85 F1 | 	sub	fp, #12
0f978     0C 00 90 FD | 	jmp	#LR__1293
0f97c                 | LR__1292
0f97c     0C 4E 05 F1 | 	add	fp, #12
0f980     A7 20 68 FC | 	wrlong	#16, fp
0f984     0C 4E 85 F1 | 	sub	fp, #12
0f988                 | LR__1293
0f988                 | '     
0f988                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f988     08 4E 05 F1 | 	add	fp, #8
0f98c     A7 16 02 FB | 	rdlong	arg03, fp
0f990     08 4E 85 F1 | 	sub	fp, #8
0f994     00 04 00 FF 
0f998     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0f99c     40 00 90 CD |  if_b	jmp	#LR__1294
0f9a0     10 4E 05 F1 | 	add	fp, #16
0f9a4     A7 12 02 F6 | 	mov	arg01, fp
0f9a8     08 4E 85 F1 | 	sub	fp, #8
0f9ac     A7 14 02 FB | 	rdlong	arg02, fp
0f9b0     08 4E 85 F1 | 	sub	fp, #8
0f9b4     0C 16 C6 F9 | 	decod	arg03, #12
0f9b8     0B 00 00 FF 
0f9bc     CC E4 05 F1 | 	add	objptr, ##5836
0f9c0     50 6E B1 FD | 	call	#_psram_spin2_read1
0f9c4     0B 00 00 FF 
0f9c8     CC E4 85 F1 | 	sub	objptr, ##5836
0f9cc     10 4E 05 F1 | 	add	fp, #16
0f9d0     A7 FA 01 F6 | 	mov	result1, fp
0f9d4     08 4E 85 F1 | 	sub	fp, #8
0f9d8     A7 FA 61 FC | 	wrlong	result1, fp
0f9dc     08 4E 85 F1 | 	sub	fp, #8
0f9e0                 | LR__1294
0f9e0     0C 4E 05 F1 | 	add	fp, #12
0f9e4     A7 FA 01 FB | 	rdlong	result1, fp
0f9e8     04 4E 85 F1 | 	sub	fp, #4
0f9ec     A7 14 02 FB | 	rdlong	arg02, fp
0f9f0     04 4E 85 F1 | 	sub	fp, #4
0f9f4     A7 16 02 FB | 	rdlong	arg03, fp
0f9f8                 | ' 
0f9f8                 | '  asm
0f9f8     28 16 62 FD | 	setq	arg03
0f9fc     0A FB F1 FC | 	coginit	result1, arg02 wc
0fa00                 | '  
0fa00                 | ' return cog 
0fa00     08 4E 05 F1 | 	add	fp, #8
0fa04     A7 FA 61 FC | 	wrlong	result1, fp
0fa08     08 00 00 FF 
0fa0c     04 4E 05 F1 | 	add	fp, ##4100
0fa10     A7 FA 61 FC | 	wrlong	result1, fp
0fa14     08 4E 05 F1 | 	add	fp, #8
0fa18     A7 38 68 FC | 	wrlong	#28, fp
0fa1c     08 4E 85 F1 | 	sub	fp, #8
0fa20     A7 12 02 F6 | 	mov	arg01, fp
0fa24     08 00 00 FF 
0fa28     10 4E 85 F1 | 	sub	fp, ##4112
0fa2c     14 DE BF FD | 	call	#_push
0fa30                 | LR__1295
0fa30     A7 F0 03 F6 | 	mov	ptra, fp
0fa34     B2 00 A0 FD | 	call	#popregs_
0fa38                 | _do_coginit_ret
0fa38     2D 00 64 FD | 	ret
0fa3c                 | 
0fa3c                 | ' 
0fa3c                 | ' '-------------------- cogstop
0fa3c                 | ' 
0fa3c                 | ' sub do_cogstop
0fa3c                 | _do_cogstop
0fa3c     00 4A 05 F6 | 	mov	COUNT_, #0
0fa40     A8 00 A0 FD | 	call	#pushregs_
0fa44     0C F0 07 F1 | 	add	ptra, #12
0fa48     60 DD BF FD | 	call	#_pop
0fa4c     A7 FA 61 FC | 	wrlong	result1, fp
0fa50     04 4E 05 F1 | 	add	fp, #4
0fa54     A7 FC 61 FC | 	wrlong	result2, fp
0fa58     04 4E 05 F1 | 	add	fp, #4
0fa5c     A7 FE 61 FC | 	wrlong	result3, fp
0fa60     08 4E 85 F1 | 	sub	fp, #8
0fa64     A7 12 02 F6 | 	mov	arg01, fp
0fa68     24 DF BF FD | 	call	#_converttoint
0fa6c     03 FA 61 FD | 	cogstop	result1
0fa70     A7 F0 03 F6 | 	mov	ptra, fp
0fa74     B2 00 A0 FD | 	call	#popregs_
0fa78                 | _do_cogstop_ret
0fa78     2D 00 64 FD | 	ret
0fa7c                 | 
0fa7c                 | ' 
0fa7c                 | ' '-------------------- color
0fa7c                 | ' 
0fa7c                 | ' sub do_color
0fa7c                 | _do_color
0fa7c     03 4A 05 F6 | 	mov	COUNT_, #3
0fa80     A8 00 A0 FD | 	call	#pushregs_
0fa84     24 DD BF FD | 	call	#_pop
0fa88     FD 26 02 F6 | 	mov	local01, result1
0fa8c     FE 28 02 F6 | 	mov	local02, result2
0fa90     FF 2A 02 F6 | 	mov	local03, result3
0fa94     37 00 00 FF 
0fa98     28 E4 05 F1 | 	add	objptr, ##28200
0fa9c     F2 26 62 FC | 	wrlong	local01, objptr
0faa0     37 00 00 FF 
0faa4     28 E4 85 F1 | 	sub	objptr, ##28200
0faa8     A7 F0 03 F6 | 	mov	ptra, fp
0faac     B2 00 A0 FD | 	call	#popregs_
0fab0                 | _do_color_ret
0fab0     2D 00 64 FD | 	ret
0fab4                 | 
0fab4                 | ' 
0fab4                 | ' '-------------------- copy
0fab4                 | ' 
0fab4                 | ' sub do_copy
0fab4                 | _do_copy
0fab4     08 4A 05 F6 | 	mov	COUNT_, #8
0fab8     A8 00 A0 FD | 	call	#pushregs_
0fabc     EC DC BF FD | 	call	#_pop
0fac0     FD 26 02 F6 | 	mov	local01, result1
0fac4     FE 1A 02 F6 | 	mov	arg05, result2
0fac8     FF 18 02 F6 | 	mov	arg04, result3
0facc     0D 29 02 F6 | 	mov	local02, arg05
0fad0     0C 2B 02 F6 | 	mov	local03, arg04
0fad4     D4 DC BF FD | 	call	#_pop
0fad8     FE 1A 02 F6 | 	mov	arg05, result2
0fadc     FF 18 02 F6 | 	mov	arg04, result3
0fae0     FD 2C 02 F6 | 	mov	local04, result1
0fae4     0D 2F 02 F6 | 	mov	local05, arg05
0fae8     0C 31 02 F6 | 	mov	local06, arg04
0faec                 | ' 
0faec                 | ' t1=pop()
0faec                 | ' t2=pop()
0faec                 | ' if t2.result_type=result_string2 then 
0faec     2B 30 0E F2 | 	cmp	local06, #43 wz
0faf0     10 00 90 5D |  if_ne	jmp	#LR__1300
0faf4     16 13 02 F6 | 	mov	arg01, local04
0faf8     28 DE BF FD | 	call	#_convertstring
0fafc     FD 32 02 F6 | 	mov	local07, result1
0fb00     2C 00 90 FD | 	jmp	#LR__1302
0fb04                 | LR__1300
0fb04     1F 30 0E F2 | 	cmp	local06, #31 wz
0fb08     16 33 02 A6 |  if_e	mov	local07, local04
0fb0c     20 00 90 AD |  if_e	jmp	#LR__1301
0fb10     50 00 00 FF 
0fb14     F0 E4 05 F1 | 	add	objptr, ##41200
0fb18     F2 14 02 FB | 	rdlong	arg02, objptr
0fb1c     50 00 00 FF 
0fb20     F0 E4 85 F1 | 	sub	objptr, ##41200
0fb24     0F 12 06 F6 | 	mov	arg01, #15
0fb28     74 3F B1 FD | 	call	#_printerror
0fb2c                 | '   printerror(15,runheader(0)) : return
0fb2c     58 03 90 FD | 	jmp	#LR__1309
0fb30                 | LR__1301
0fb30                 | LR__1302
0fb30                 | ' if t1.result_type=result_string2 then 
0fb30     2B 2A 0E F2 | 	cmp	local03, #43 wz
0fb34     10 00 90 5D |  if_ne	jmp	#LR__1303
0fb38     13 13 02 F6 | 	mov	arg01, local01
0fb3c     E4 DD BF FD | 	call	#_convertstring
0fb40     FD 34 02 F6 | 	mov	local08, result1
0fb44     2C 00 90 FD | 	jmp	#LR__1305
0fb48                 | LR__1303
0fb48     1F 2A 0E F2 | 	cmp	local03, #31 wz
0fb4c     13 35 02 A6 |  if_e	mov	local08, local01
0fb50     20 00 90 AD |  if_e	jmp	#LR__1304
0fb54     50 00 00 FF 
0fb58     F0 E4 05 F1 | 	add	objptr, ##41200
0fb5c     F2 14 02 FB | 	rdlong	arg02, objptr
0fb60     50 00 00 FF 
0fb64     F0 E4 85 F1 | 	sub	objptr, ##41200
0fb68     0F 12 06 F6 | 	mov	arg01, #15
0fb6c     30 3F B1 FD | 	call	#_printerror
0fb70                 | '   printerror(15,runheader(0)) : return
0fb70     14 03 90 FD | 	jmp	#LR__1309
0fb74                 | LR__1304
0fb74                 | LR__1305
0fb74                 | ' 
0fb74                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0fb74     09 12 06 F6 | 	mov	arg01, #9
0fb78     19 15 02 F6 | 	mov	arg02, local07
0fb7c     00 16 06 F6 | 	mov	arg03, #0
0fb80     38 85 B1 FD | 	call	#__system___basic_open_string
0fb84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fb88     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fb8c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fb90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fb94     52 00 00 FF 
0fb98     10 E5 05 F1 | 	add	objptr, ##42256
0fb9c     F2 FA 61 FC | 	wrlong	result1, objptr
0fba0     52 00 00 FF 
0fba4     10 E5 85 F1 | 	sub	objptr, ##42256
0fba8     0C 01 90 AD |  if_e	jmp	#LR__1306
0fbac     00 12 06 F6 | 	mov	arg01, #0
0fbb0     A8 D5 B1 FD | 	call	#__system___getiolock_0616
0fbb4     FD 12 02 F6 | 	mov	arg01, result1
0fbb8     FC 78 B1 FD | 	call	#__system___lockmem
0fbbc     BC 01 00 FF 
0fbc0     76 14 06 F6 | 	mov	arg02, ##@LR__5937
0fbc4     00 12 06 F6 | 	mov	arg01, #0
0fbc8     00 16 06 F6 | 	mov	arg03, #0
0fbcc     E0 85 B1 FD | 	call	#__system___basic_print_string
0fbd0     52 00 00 FF 
0fbd4     10 E5 05 F1 | 	add	objptr, ##42256
0fbd8     F2 14 02 FB | 	rdlong	arg02, objptr
0fbdc     52 00 00 FF 
0fbe0     10 E5 85 F1 | 	sub	objptr, ##42256
0fbe4     00 12 06 F6 | 	mov	arg01, #0
0fbe8     00 16 06 F6 | 	mov	arg03, #0
0fbec     0A 18 06 F6 | 	mov	arg04, #10
0fbf0     00 86 B1 FD | 	call	#__system___basic_print_integer
0fbf4     BC 01 00 FF 
0fbf8     86 14 06 F6 | 	mov	arg02, ##@LR__5938
0fbfc     00 12 06 F6 | 	mov	arg01, #0
0fc00     00 16 06 F6 | 	mov	arg03, #0
0fc04     A8 85 B1 FD | 	call	#__system___basic_print_string
0fc08     50 00 00 FF 
0fc0c     F0 E4 05 F1 | 	add	objptr, ##41200
0fc10     F2 14 02 FB | 	rdlong	arg02, objptr
0fc14     50 00 00 FF 
0fc18     F0 E4 85 F1 | 	sub	objptr, ##41200
0fc1c     00 12 06 F6 | 	mov	arg01, #0
0fc20     00 16 06 F6 | 	mov	arg03, #0
0fc24     0A 18 06 F6 | 	mov	arg04, #10
0fc28     08 86 B1 FD | 	call	#__system___basic_print_unsigned
0fc2c     BC 01 00 FF 
0fc30     90 14 06 F6 | 	mov	arg02, ##@LR__5939
0fc34     00 12 06 F6 | 	mov	arg01, #0
0fc38     00 16 06 F6 | 	mov	arg03, #0
0fc3c     70 85 B1 FD | 	call	#__system___basic_print_string
0fc40     00 34 06 F6 | 	mov	local08, #0
0fc44     52 00 00 FF 
0fc48     10 E5 05 F1 | 	add	objptr, ##42256
0fc4c     F2 12 02 FB | 	rdlong	arg01, objptr
0fc50     52 00 00 FF 
0fc54     10 E5 85 F1 | 	sub	objptr, ##42256
0fc58     EC A1 B1 FD | 	call	#__system___strerror
0fc5c     FD 14 02 F6 | 	mov	arg02, result1
0fc60     1A 13 02 F6 | 	mov	arg01, local08
0fc64     00 16 06 F6 | 	mov	arg03, #0
0fc68     44 85 B1 FD | 	call	#__system___basic_print_string
0fc6c     BC 01 00 FF 
0fc70     93 14 06 F6 | 	mov	arg02, ##@LR__5940
0fc74     00 12 06 F6 | 	mov	arg01, #0
0fc78     00 16 06 F6 | 	mov	arg03, #0
0fc7c     30 85 B1 FD | 	call	#__system___basic_print_string
0fc80     00 12 06 F6 | 	mov	arg01, #0
0fc84     19 15 02 F6 | 	mov	arg02, local07
0fc88     00 16 06 F6 | 	mov	arg03, #0
0fc8c     20 85 B1 FD | 	call	#__system___basic_print_string
0fc90     00 12 06 F6 | 	mov	arg01, #0
0fc94     0A 14 06 F6 | 	mov	arg02, #10
0fc98     00 16 06 F6 | 	mov	arg03, #0
0fc9c     B8 84 B1 FD | 	call	#__system___basic_print_char
0fca0     00 12 06 F6 | 	mov	arg01, #0
0fca4     B4 D4 B1 FD | 	call	#__system___getiolock_0616
0fca8     FD 00 68 FC | 	wrlong	#0, result1
0fcac     09 12 06 F6 | 	mov	arg01, #9
0fcb0     60 CB B1 FD | 	call	#__system__close
0fcb4     D0 01 90 FD | 	jmp	#LR__1309
0fcb8                 | LR__1306
0fcb8                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fcb8     08 12 06 F6 | 	mov	arg01, #8
0fcbc     1A 15 02 F6 | 	mov	arg02, local08
0fcc0     0D 16 06 F6 | 	mov	arg03, #13
0fcc4     F4 83 B1 FD | 	call	#__system___basic_open_string
0fcc8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fccc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fcd0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fcd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fcd8     52 00 00 FF 
0fcdc     10 E5 05 F1 | 	add	objptr, ##42256
0fce0     F2 FA 61 FC | 	wrlong	result1, objptr
0fce4     52 00 00 FF 
0fce8     10 E5 85 F1 | 	sub	objptr, ##42256
0fcec     0C 01 90 AD |  if_e	jmp	#LR__1307
0fcf0     00 12 06 F6 | 	mov	arg01, #0
0fcf4     64 D4 B1 FD | 	call	#__system___getiolock_0616
0fcf8     FD 12 02 F6 | 	mov	arg01, result1
0fcfc     B8 77 B1 FD | 	call	#__system___lockmem
0fd00     BC 01 00 FF 
0fd04     A1 14 06 F6 | 	mov	arg02, ##@LR__5941
0fd08     00 12 06 F6 | 	mov	arg01, #0
0fd0c     00 16 06 F6 | 	mov	arg03, #0
0fd10     9C 84 B1 FD | 	call	#__system___basic_print_string
0fd14     52 00 00 FF 
0fd18     10 E5 05 F1 | 	add	objptr, ##42256
0fd1c     F2 14 02 FB | 	rdlong	arg02, objptr
0fd20     52 00 00 FF 
0fd24     10 E5 85 F1 | 	sub	objptr, ##42256
0fd28     00 12 06 F6 | 	mov	arg01, #0
0fd2c     00 16 06 F6 | 	mov	arg03, #0
0fd30     0A 18 06 F6 | 	mov	arg04, #10
0fd34     BC 84 B1 FD | 	call	#__system___basic_print_integer
0fd38     BC 01 00 FF 
0fd3c     B1 14 06 F6 | 	mov	arg02, ##@LR__5942
0fd40     00 12 06 F6 | 	mov	arg01, #0
0fd44     00 16 06 F6 | 	mov	arg03, #0
0fd48     64 84 B1 FD | 	call	#__system___basic_print_string
0fd4c     50 00 00 FF 
0fd50     F0 E4 05 F1 | 	add	objptr, ##41200
0fd54     F2 14 02 FB | 	rdlong	arg02, objptr
0fd58     50 00 00 FF 
0fd5c     F0 E4 85 F1 | 	sub	objptr, ##41200
0fd60     00 12 06 F6 | 	mov	arg01, #0
0fd64     00 16 06 F6 | 	mov	arg03, #0
0fd68     0A 18 06 F6 | 	mov	arg04, #10
0fd6c     C4 84 B1 FD | 	call	#__system___basic_print_unsigned
0fd70     BC 01 00 FF 
0fd74     BB 14 06 F6 | 	mov	arg02, ##@LR__5943
0fd78     00 12 06 F6 | 	mov	arg01, #0
0fd7c     00 16 06 F6 | 	mov	arg03, #0
0fd80     2C 84 B1 FD | 	call	#__system___basic_print_string
0fd84     00 32 06 F6 | 	mov	local07, #0
0fd88     52 00 00 FF 
0fd8c     10 E5 05 F1 | 	add	objptr, ##42256
0fd90     F2 12 02 FB | 	rdlong	arg01, objptr
0fd94     52 00 00 FF 
0fd98     10 E5 85 F1 | 	sub	objptr, ##42256
0fd9c     A8 A0 B1 FD | 	call	#__system___strerror
0fda0     FD 14 02 F6 | 	mov	arg02, result1
0fda4     19 13 02 F6 | 	mov	arg01, local07
0fda8     00 16 06 F6 | 	mov	arg03, #0
0fdac     00 84 B1 FD | 	call	#__system___basic_print_string
0fdb0     BC 01 00 FF 
0fdb4     BE 14 06 F6 | 	mov	arg02, ##@LR__5944
0fdb8     00 12 06 F6 | 	mov	arg01, #0
0fdbc     00 16 06 F6 | 	mov	arg03, #0
0fdc0     EC 83 B1 FD | 	call	#__system___basic_print_string
0fdc4     00 12 06 F6 | 	mov	arg01, #0
0fdc8     1A 15 02 F6 | 	mov	arg02, local08
0fdcc     00 16 06 F6 | 	mov	arg03, #0
0fdd0     DC 83 B1 FD | 	call	#__system___basic_print_string
0fdd4     00 12 06 F6 | 	mov	arg01, #0
0fdd8     0A 14 06 F6 | 	mov	arg02, #10
0fddc     00 16 06 F6 | 	mov	arg03, #0
0fde0     74 83 B1 FD | 	call	#__system___basic_print_char
0fde4     00 12 06 F6 | 	mov	arg01, #0
0fde8     70 D3 B1 FD | 	call	#__system___getiolock_0616
0fdec     FD 00 68 FC | 	wrlong	#0, result1
0fdf0     08 12 06 F6 | 	mov	arg01, #8
0fdf4     1C CA B1 FD | 	call	#__system__close
0fdf8     8C 00 90 FD | 	jmp	#LR__1309
0fdfc                 | LR__1307
0fdfc                 | ' 
0fdfc                 | ' do
0fdfc                 | LR__1308
0fdfc                 | '   get #9,,block(0),1024,r
0fdfc     4E 00 00 FF 
0fe00     B4 E4 05 F1 | 	add	objptr, ##40116
0fe04     F2 16 02 F6 | 	mov	arg03, objptr
0fe08     4E 00 00 FF 
0fe0c     B4 E4 85 F1 | 	sub	objptr, ##40116
0fe10     09 12 06 F6 | 	mov	arg01, #9
0fe14     00 14 06 F6 | 	mov	arg02, #0
0fe18     0A 18 C6 F9 | 	decod	arg04, #10
0fe1c     01 1A 06 F6 | 	mov	arg05, #1
0fe20     08 85 B1 FD | 	call	#__system___basic_get
0fe24     52 00 00 FF 
0fe28     4C E5 05 F1 | 	add	objptr, ##42316
0fe2c     F2 FA 61 FC | 	wrlong	result1, objptr
0fe30                 | '   put #8,,block(0),r
0fe30     04 00 00 FF 
0fe34     98 E4 85 F1 | 	sub	objptr, ##2200
0fe38     F2 16 02 F6 | 	mov	arg03, objptr
0fe3c     FD 18 02 F6 | 	mov	arg04, result1
0fe40     4E 00 00 FF 
0fe44     B4 E4 85 F1 | 	sub	objptr, ##40116
0fe48     08 12 06 F6 | 	mov	arg01, #8
0fe4c     00 14 06 F6 | 	mov	arg02, #0
0fe50     01 1A 06 F6 | 	mov	arg05, #1
0fe54     68 84 B1 FD | 	call	#__system___basic_put
0fe58     52 00 00 FF 
0fe5c     4C E5 05 F1 | 	add	objptr, ##42316
0fe60     F2 34 02 FB | 	rdlong	local08, objptr
0fe64     52 00 00 FF 
0fe68     4C E5 85 F1 | 	sub	objptr, ##42316
0fe6c     02 00 00 FF 
0fe70     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fe74     84 FF 9F AD |  if_e	jmp	#LR__1308
0fe78                 | ' close #8
0fe78     08 12 06 F6 | 	mov	arg01, #8
0fe7c     94 C9 B1 FD | 	call	#__system__close
0fe80                 | ' close #9
0fe80     09 12 06 F6 | 	mov	arg01, #9
0fe84     8C C9 B1 FD | 	call	#__system__close
0fe88                 | LR__1309
0fe88     A7 F0 03 F6 | 	mov	ptra, fp
0fe8c     B2 00 A0 FD | 	call	#popregs_
0fe90                 | _do_copy_ret
0fe90     2D 00 64 FD | 	ret
0fe94                 | 
0fe94                 | ' 
0fe94                 | ' '-------------------- cos
0fe94                 | ' 
0fe94                 | ' sub do_cos
0fe94                 | _do_cos
0fe94     01 4A 05 F6 | 	mov	COUNT_, #1
0fe98     A8 00 A0 FD | 	call	#pushregs_
0fe9c     10 F0 07 F1 | 	add	ptra, #16
0fea0     4A 00 00 FF 
0fea4     80 E4 05 F1 | 	add	objptr, ##38016
0fea8     F2 26 02 FB | 	rdlong	local01, objptr
0feac     13 17 02 F6 | 	mov	arg03, local01
0feb0     01 16 66 F0 | 	shl	arg03, #1
0feb4     13 17 02 F1 | 	add	arg03, local01
0feb8     02 16 66 F0 | 	shl	arg03, #2
0febc     03 00 00 FF 
0fec0     04 E4 85 F1 | 	sub	objptr, ##1540
0fec4     F2 16 02 F1 | 	add	arg03, objptr
0fec8     0B 17 02 FB | 	rdlong	arg03, arg03
0fecc     0C 4E 05 F1 | 	add	fp, #12
0fed0     A7 16 62 FC | 	wrlong	arg03, fp
0fed4                 | ' 
0fed4                 | ' numpar=compiledline(lineptr_e).result.uresult
0fed4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fed4     0C 4E 85 F1 | 	sub	fp, #12
0fed8     02 16 16 F2 | 	cmp	arg03, #2 wc
0fedc     47 00 00 FF 
0fee0     7C E4 85 F1 | 	sub	objptr, ##36476
0fee4     0C 4E 05 C1 |  if_b	add	fp, #12
0fee8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0feec     0C 4E 85 C1 |  if_b	sub	fp, #12
0fef0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1310
0fef4     00 12 06 F6 | 	mov	arg01, #0
0fef8     60 D2 B1 FD | 	call	#__system___getiolock_0616
0fefc     FD 12 02 F6 | 	mov	arg01, result1
0ff00     B4 75 B1 FD | 	call	#__system___lockmem
0ff04     BC 01 00 FF 
0ff08     CC 14 06 F6 | 	mov	arg02, ##@LR__5945
0ff0c     00 12 06 F6 | 	mov	arg01, #0
0ff10     00 16 06 F6 | 	mov	arg03, #0
0ff14     98 82 B1 FD | 	call	#__system___basic_print_string
0ff18     00 12 06 F6 | 	mov	arg01, #0
0ff1c     3C D2 B1 FD | 	call	#__system___getiolock_0616
0ff20     FD 00 68 FC | 	wrlong	#0, result1
0ff24     27 12 06 F6 | 	mov	arg01, #39
0ff28     00 14 06 F6 | 	mov	arg02, #0
0ff2c     70 3B B1 FD | 	call	#_printerror
0ff30     78 00 90 FD | 	jmp	#LR__1311
0ff34                 | LR__1310
0ff34     74 D8 BF FD | 	call	#_pop
0ff38     A7 FA 61 FC | 	wrlong	result1, fp
0ff3c     04 4E 05 F1 | 	add	fp, #4
0ff40     A7 FC 61 FC | 	wrlong	result2, fp
0ff44     04 4E 05 F1 | 	add	fp, #4
0ff48     A7 FE 61 FC | 	wrlong	result3, fp
0ff4c     08 4E 85 F1 | 	sub	fp, #8
0ff50     52 00 00 FF 
0ff54     E0 E4 05 F1 | 	add	objptr, ##42208
0ff58     F2 26 02 FB | 	rdlong	local01, objptr
0ff5c     52 00 00 FF 
0ff60     E0 E4 85 F1 | 	sub	objptr, ##42208
0ff64     A7 12 02 F6 | 	mov	arg01, fp
0ff68     E0 DA BF FD | 	call	#_converttofloat
0ff6c     FD 14 02 F6 | 	mov	arg02, result1
0ff70     13 13 02 F6 | 	mov	arg01, local01
0ff74     BC A3 B1 FD | 	call	#__system___float_mul
0ff78     FD 14 02 F6 | 	mov	arg02, result1
0ff7c     87 E4 1F FF 
0ff80     DB 13 06 F6 | 	mov	arg01, ##1070141403
0ff84     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff88     D8 9F B1 FD | 	call	#__system___float_add
0ff8c     FD 12 02 F6 | 	mov	arg01, result1
0ff90     00 AD B1 FD | 	call	#__system____builtin_sinf
0ff94     A7 FA 61 FC | 	wrlong	result1, fp
0ff98     08 4E 05 F1 | 	add	fp, #8
0ff9c     A7 3C 68 FC | 	wrlong	#30, fp
0ffa0     08 4E 85 F1 | 	sub	fp, #8
0ffa4     A7 12 02 F6 | 	mov	arg01, fp
0ffa8     98 D8 BF FD | 	call	#_push
0ffac                 | LR__1311
0ffac     A7 F0 03 F6 | 	mov	ptra, fp
0ffb0     B2 00 A0 FD | 	call	#popregs_
0ffb4                 | _do_cos_ret
0ffb4     2D 00 64 FD | 	ret
0ffb8                 | 
0ffb8                 | ' 
0ffb8                 | ' '-------------------- cursor
0ffb8                 | ' 
0ffb8                 | ' sub do_cursor
0ffb8                 | _do_cursor
0ffb8     F0 D7 BF FD | 	call	#_pop
0ffbc     00 FA 4D F2 | 	cmps	result1, #0 wz
0ffc0                 | ' t1=pop()
0ffc0                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0ffc0     14 00 90 5D |  if_ne	jmp	#LR__1320
0ffc4     11 12 06 F6 | 	mov	arg01, #17
0ffc8     00 14 06 F6 | 	mov	arg02, #0
0ffcc     00 16 06 F6 | 	mov	arg03, #0
0ffd0     38 4B B1 FD | 	call	#_hg010b_spin2_setspritesize
0ffd4     10 00 90 FD | 	jmp	#LR__1321
0ffd8                 | LR__1320
0ffd8     11 12 06 F6 | 	mov	arg01, #17
0ffdc     08 14 06 F6 | 	mov	arg02, #8
0ffe0     10 16 06 F6 | 	mov	arg03, #16
0ffe4     24 4B B1 FD | 	call	#_hg010b_spin2_setspritesize
0ffe8                 | LR__1321
0ffe8                 | _do_cursor_ret
0ffe8     2D 00 64 FD | 	ret
0ffec                 | 
0ffec                 | ' 
0ffec                 | ' '-------------------- defenv
0ffec                 | ' 
0ffec                 | ' sub do_defenv
0ffec                 | _do_defenv
0ffec     08 4A 05 F6 | 	mov	COUNT_, #8
0fff0     A8 00 A0 FD | 	call	#pushregs_
0fff4     58 F0 07 F1 | 	add	ptra, #88
0fff8     4A 00 00 FF 
0fffc     80 E4 05 F1 | 	add	objptr, ##38016
10000     F2 26 02 FB | 	rdlong	local01, objptr
10004     13 1B 02 F6 | 	mov	arg05, local01
10008     01 1A 66 F0 | 	shl	arg05, #1
1000c     13 1B 02 F1 | 	add	arg05, local01
10010     02 1A 66 F0 | 	shl	arg05, #2
10014     03 00 00 FF 
10018     04 E4 85 F1 | 	sub	objptr, ##1540
1001c     F2 1A 02 F1 | 	add	arg05, objptr
10020     0D 1B 02 FB | 	rdlong	arg05, arg05
10024     10 4E 05 F1 | 	add	fp, #16
10028     A7 1A 62 FC | 	wrlong	arg05, fp
1002c                 | ' 
1002c                 | ' numpar=compiledline(lineptr_e).result.uresult
1002c                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
1002c     10 4E 85 F1 | 	sub	fp, #16
10030     02 1A 0E F2 | 	cmp	arg05, #2 wz
10034     47 00 00 FF 
10038     7C E4 85 F1 | 	sub	objptr, ##36476
1003c     10 4E 05 51 |  if_ne	add	fp, #16
10040     A7 26 02 5B |  if_ne	rdlong	local01, fp
10044     10 4E 85 51 |  if_ne	sub	fp, #16
10048     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
1004c     90 0A 90 5D |  if_ne	jmp	#LR__1351
10050                 | ' 
10050                 | ' if numpar=2 then						' env from .h2 or from a pointer
10050     10 4E 05 F1 | 	add	fp, #16
10054     A7 26 02 FB | 	rdlong	local01, fp
10058     10 4E 85 F1 | 	sub	fp, #16
1005c     02 26 0E F2 | 	cmp	local01, #2 wz
10060     28 04 90 5D |  if_ne	jmp	#LR__1343
10064     44 D7 BF FD | 	call	#_pop
10068     FF 1A 02 F6 | 	mov	arg05, result3
1006c     40 4E 05 F1 | 	add	fp, #64
10070     A7 FA 61 FC | 	wrlong	result1, fp
10074     04 4E 05 F1 | 	add	fp, #4
10078     A7 FC 61 FC | 	wrlong	result2, fp
1007c     04 4E 05 F1 | 	add	fp, #4
10080     A7 1A 62 FC | 	wrlong	arg05, fp
10084                 | '   t1=pop()
10084                 | '   if t1.result_type=result_string2 then 
10084     48 4E 85 F1 | 	sub	fp, #72
10088     2B 1A 0E F2 | 	cmp	arg05, #43 wz
1008c     20 00 90 5D |  if_ne	jmp	#LR__1330
10090     40 4E 05 F1 | 	add	fp, #64
10094     A7 12 02 FB | 	rdlong	arg01, fp
10098     40 4E 85 F1 | 	sub	fp, #64
1009c     84 D8 BF FD | 	call	#_convertstring
100a0     4C 4E 05 F1 | 	add	fp, #76
100a4     A7 FA 61 FC | 	wrlong	result1, fp
100a8     4C 4E 85 F1 | 	sub	fp, #76
100ac     58 00 90 FD | 	jmp	#LR__1333
100b0                 | LR__1330
100b0     48 4E 05 F1 | 	add	fp, #72
100b4     A7 26 02 FB | 	rdlong	local01, fp
100b8     48 4E 85 F1 | 	sub	fp, #72
100bc     1F 26 0E F2 | 	cmp	local01, #31 wz
100c0     18 00 90 5D |  if_ne	jmp	#LR__1331
100c4     40 4E 05 F1 | 	add	fp, #64
100c8     A7 26 02 FB | 	rdlong	local01, fp
100cc     0C 4E 05 F1 | 	add	fp, #12
100d0     A7 26 62 FC | 	wrlong	local01, fp
100d4     4C 4E 85 F1 | 	sub	fp, #76
100d8     2C 00 90 FD | 	jmp	#LR__1332
100dc                 | LR__1331
100dc     BC 01 00 FF 
100e0     D2 26 06 F6 | 	mov	local01, ##@LR__5946
100e4     4C 4E 05 F1 | 	add	fp, #76
100e8     A7 26 62 FC | 	wrlong	local01, fp
100ec     0C 4E 85 F1 | 	sub	fp, #12
100f0     A7 12 02 F6 | 	mov	arg01, fp
100f4     40 4E 85 F1 | 	sub	fp, #64
100f8     94 D8 BF FD | 	call	#_converttoint
100fc     1C 4E 05 F1 | 	add	fp, #28
10100     A7 FA 61 FC | 	wrlong	result1, fp
10104     1C 4E 85 F1 | 	sub	fp, #28
10108                 | LR__1332
10108                 | LR__1333
10108                 | '   if s1<>"" then 
10108     4C 4E 05 F1 | 	add	fp, #76
1010c     A7 12 02 FB | 	rdlong	arg01, fp
10110     4C 4E 85 F1 | 	sub	fp, #76
10114     BC 01 00 FF 
10118     D3 14 06 F6 | 	mov	arg02, ##@LR__5947
1011c     C0 73 B1 FD | 	call	#__system___string_cmp
10120     00 FA 0D F2 | 	cmp	result1, #0 wz
10124     28 02 90 AD |  if_e	jmp	#LR__1337
10128     80 D6 BF FD | 	call	#_pop
1012c     FF 26 02 F6 | 	mov	local01, result3
10130     40 4E 05 F1 | 	add	fp, #64
10134     A7 FA 61 FC | 	wrlong	result1, fp
10138     04 4E 05 F1 | 	add	fp, #4
1013c     A7 FC 61 FC | 	wrlong	result2, fp
10140     04 4E 05 F1 | 	add	fp, #4
10144     A7 26 62 FC | 	wrlong	local01, fp
10148     08 4E 85 F1 | 	sub	fp, #8
1014c     A7 12 02 F6 | 	mov	arg01, fp
10150     40 4E 85 F1 | 	sub	fp, #64
10154     38 D8 BF FD | 	call	#_converttoint
10158     18 4E 05 F1 | 	add	fp, #24
1015c     A7 FA 61 FC | 	wrlong	result1, fp
10160     18 4E 85 F1 | 	sub	fp, #24
10164                 | '     t1=pop()
10164                 | '     channel=converttoint(t1) 
10164                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
10164     09 12 06 F6 | 	mov	arg01, #9
10168     A8 C6 B1 FD | 	call	#__system__close
1016c     09 26 06 F6 | 	mov	local01, #9
10170     BC 01 00 FF 
10174     D4 12 06 F6 | 	mov	arg01, ##@LR__5948
10178     4C 4E 05 F1 | 	add	fp, #76
1017c     A7 14 02 FB | 	rdlong	arg02, fp
10180     4C 4E 85 F1 | 	sub	fp, #76
10184     8C 73 B1 FD | 	call	#__system___string_concat
10188     FD 14 02 F6 | 	mov	arg02, result1
1018c     13 13 02 F6 | 	mov	arg01, local01
10190     00 16 06 F6 | 	mov	arg03, #0
10194     24 7F B1 FD | 	call	#__system___basic_open_string
10198     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1019c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
101a0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
101a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
101a8     0C 4E 05 F1 | 	add	fp, #12
101ac     A7 FA 61 FC | 	wrlong	result1, fp
101b0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
101b0     0C 4E 85 F1 | 	sub	fp, #12
101b4     A0 00 90 AD |  if_e	jmp	#LR__1334
101b8     00 12 06 F6 | 	mov	arg01, #0
101bc     9C CF B1 FD | 	call	#__system___getiolock_0616
101c0     FD 12 02 F6 | 	mov	arg01, result1
101c4     F0 72 B1 FD | 	call	#__system___lockmem
101c8     BC 01 00 FF 
101cc     E1 14 06 F6 | 	mov	arg02, ##@LR__5949
101d0     00 12 06 F6 | 	mov	arg01, #0
101d4     00 16 06 F6 | 	mov	arg03, #0
101d8     D4 7F B1 FD | 	call	#__system___basic_print_string
101dc     0C 4E 05 F1 | 	add	fp, #12
101e0     A7 14 02 FB | 	rdlong	arg02, fp
101e4     0C 4E 85 F1 | 	sub	fp, #12
101e8     00 12 06 F6 | 	mov	arg01, #0
101ec     00 16 06 F6 | 	mov	arg03, #0
101f0     0A 18 06 F6 | 	mov	arg04, #10
101f4     FC 7F B1 FD | 	call	#__system___basic_print_integer
101f8     BC 01 00 FF 
101fc     EF 14 06 F6 | 	mov	arg02, ##@LR__5950
10200     00 12 06 F6 | 	mov	arg01, #0
10204     00 16 06 F6 | 	mov	arg03, #0
10208     A4 7F B1 FD | 	call	#__system___basic_print_string
1020c     00 26 06 F6 | 	mov	local01, #0
10210     0C 4E 05 F1 | 	add	fp, #12
10214     A7 12 02 FB | 	rdlong	arg01, fp
10218     0C 4E 85 F1 | 	sub	fp, #12
1021c     28 9C B1 FD | 	call	#__system___strerror
10220     FD 14 02 F6 | 	mov	arg02, result1
10224     13 13 02 F6 | 	mov	arg01, local01
10228     00 16 06 F6 | 	mov	arg03, #0
1022c     80 7F B1 FD | 	call	#__system___basic_print_string
10230     00 12 06 F6 | 	mov	arg01, #0
10234     0A 14 06 F6 | 	mov	arg02, #10
10238     00 16 06 F6 | 	mov	arg03, #0
1023c     18 7F B1 FD | 	call	#__system___basic_print_char
10240     00 12 06 F6 | 	mov	arg01, #0
10244     14 CF B1 FD | 	call	#__system___getiolock_0616
10248     FD 00 68 FC | 	wrlong	#0, result1
1024c     09 12 06 F6 | 	mov	arg01, #9
10250     C0 C5 B1 FD | 	call	#__system__close
10254     88 08 90 FD | 	jmp	#LR__1351
10258                 | LR__1334
10258                 | '     get #9,17,envbuf8(channel,0),256
10258     18 4E 05 F1 | 	add	fp, #24
1025c     A7 1A 02 FB | 	rdlong	arg05, fp
10260     18 4E 85 F1 | 	sub	fp, #24
10264     0D 17 02 F6 | 	mov	arg03, arg05
10268     09 16 66 F0 | 	shl	arg03, #9
1026c     0D 17 02 F1 | 	add	arg03, arg05
10270     0C 00 00 FF 
10274     D8 E4 05 F1 | 	add	objptr, ##6360
10278     F2 16 02 F1 | 	add	arg03, objptr
1027c     09 12 06 F6 | 	mov	arg01, #9
10280     11 14 06 F6 | 	mov	arg02, #17
10284     00 19 06 F6 | 	mov	arg04, #256
10288     01 1A 06 F6 | 	mov	arg05, #1
1028c     0C 00 00 FF 
10290     D8 E4 85 F1 | 	sub	objptr, ##6360
10294     94 80 B1 FD | 	call	#__system___basic_get
10298                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
10298     14 4E 05 F1 | 	add	fp, #20
1029c     A7 FE 69 FC | 	wrlong	#255, fp
102a0     14 4E 85 F1 | 	sub	fp, #20
102a4     0C 00 00 FF 
102a8     D8 E4 05 F1 | 	add	objptr, ##6360
102ac     97 30 48 FB | 	callpa	#(@LR__1336-@LR__1335)>>2,fcache_load_ptr_
102b0                 | LR__1335
102b0     18 4E 05 F1 | 	add	fp, #24
102b4     A7 16 02 FB | 	rdlong	arg03, fp
102b8     0B 27 02 F6 | 	mov	local01, arg03
102bc     09 26 66 F0 | 	shl	local01, #9
102c0     F2 26 02 F1 | 	add	local01, objptr
102c4     04 4E 85 F1 | 	sub	fp, #4
102c8     A7 1A 02 FB | 	rdlong	arg05, fp
102cc     0D 19 02 F6 | 	mov	arg04, arg05
102d0     01 18 66 F0 | 	shl	arg04, #1
102d4     13 19 02 F1 | 	add	arg04, local01
102d8     0B 27 02 F6 | 	mov	local01, arg03
102dc     09 26 66 F0 | 	shl	local01, #9
102e0     0B 27 02 F1 | 	add	local01, arg03
102e4     F2 26 02 F1 | 	add	local01, objptr
102e8     13 1B 02 F1 | 	add	arg05, local01
102ec     0D 27 C2 FA | 	rdbyte	local01, arg05
102f0     00 27 06 FA | 	mul	local01, #256
102f4     0C 27 52 FC | 	wrword	local01, arg04
102f8     A7 26 02 FB | 	rdlong	local01, fp
102fc     01 26 86 F1 | 	sub	local01, #1
10300     A7 26 62 FC | 	wrlong	local01, fp
10304     14 4E 85 F1 | 	sub	fp, #20
10308     00 26 56 F2 | 	cmps	local01, #0 wc
1030c     A0 FF 9F 3D |  if_ae	jmp	#LR__1335
10310                 | LR__1336
10310     0C 00 00 FF 
10314     D8 E4 85 F1 | 	sub	objptr, ##6360
10318                 | '     close #9
10318     09 12 06 F6 | 	mov	arg01, #9
1031c     F4 C4 B1 FD | 	call	#__system__close
10320     18 4E 05 F1 | 	add	fp, #24
10324     A7 26 02 FB | 	rdlong	local01, fp
10328     18 4E 85 F1 | 	sub	fp, #24
1032c     09 26 66 F0 | 	shl	local01, #9
10330     0C 00 00 FF 
10334     D8 E4 05 F1 | 	add	objptr, ##6360
10338     F2 26 02 F1 | 	add	local01, objptr
1033c     FE 27 06 F1 | 	add	local01, #510
10340     13 01 58 FC | 	wrword	#0, local01
10344                 | '     envbuf(channel,255)=0                                                              
10344                 | '     return
10344     0C 00 00 FF 
10348     D8 E4 85 F1 | 	sub	objptr, ##6360
1034c     90 07 90 FD | 	jmp	#LR__1351
10350                 | LR__1337
10350                 | '     if wptr < $80000 then 
10350     1C 4E 05 F1 | 	add	fp, #28
10354     A7 28 02 FB | 	rdlong	local02, fp
10358     1C 4E 85 F1 | 	sub	fp, #28
1035c     00 04 00 FF 
10360     00 28 56 F2 | 	cmps	local02, ##524288 wc
10364     7C 00 90 3D |  if_ae	jmp	#LR__1340
10368                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
10368     14 4E 05 F1 | 	add	fp, #20
1036c     A7 00 68 FC | 	wrlong	#0, fp
10370     14 4E 85 F1 | 	sub	fp, #20
10374     0C 00 00 FF 
10378     D8 E4 05 F1 | 	add	objptr, ##6360
1037c     97 2C 48 FB | 	callpa	#(@LR__1339-@LR__1338)>>2,fcache_load_ptr_
10380                 | LR__1338
10380     18 4E 05 F1 | 	add	fp, #24
10384     A7 28 02 FB | 	rdlong	local02, fp
10388     09 28 66 F0 | 	shl	local02, #9
1038c     F2 28 02 F1 | 	add	local02, objptr
10390     04 4E 85 F1 | 	sub	fp, #4
10394     A7 26 02 FB | 	rdlong	local01, fp
10398     13 1B 02 F6 | 	mov	arg05, local01
1039c     01 1A 66 F0 | 	shl	arg05, #1
103a0     14 1B 02 F1 | 	add	arg05, local02
103a4     08 4E 05 F1 | 	add	fp, #8
103a8     A7 12 02 FB | 	rdlong	arg01, fp
103ac     01 26 66 F0 | 	shl	local01, #1
103b0     13 13 02 F1 | 	add	arg01, local01
103b4     09 FB E1 FA | 	rdword	result1, arg01
103b8     0D FB 51 FC | 	wrword	result1, arg05
103bc     08 4E 85 F1 | 	sub	fp, #8
103c0     A7 28 02 FB | 	rdlong	local02, fp
103c4     01 28 06 F1 | 	add	local02, #1
103c8     A7 28 62 FC | 	wrlong	local02, fp
103cc     14 4E 85 F1 | 	sub	fp, #20
103d0     00 29 56 F2 | 	cmps	local02, #256 wc
103d4     A8 FF 9F CD |  if_b	jmp	#LR__1338
103d8                 | LR__1339
103d8     0C 00 00 FF 
103dc     D8 E4 85 F1 | 	sub	objptr, ##6360
103e0     78 00 90 FD | 	jmp	#LR__1342
103e4                 | LR__1340
103e4                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
103e4     14 4E 05 F1 | 	add	fp, #20
103e8     A7 00 68 FC | 	wrlong	#0, fp
103ec     14 4E 85 F1 | 	sub	fp, #20
103f0                 | LR__1341
103f0     18 4E 05 F1 | 	add	fp, #24
103f4     A7 28 02 FB | 	rdlong	local02, fp
103f8     09 28 66 F0 | 	shl	local02, #9
103fc     0C 00 00 FF 
10400     D8 E4 05 F1 | 	add	objptr, ##6360
10404     F2 28 02 F1 | 	add	local02, objptr
10408     04 4E 85 F1 | 	sub	fp, #4
1040c     A7 26 02 FB | 	rdlong	local01, fp
10410     13 2B 02 F6 | 	mov	local03, local01
10414     01 2A 66 F0 | 	shl	local03, #1
10418     14 2B 02 F1 | 	add	local03, local02
1041c     08 4E 05 F1 | 	add	fp, #8
10420     A7 12 02 FB | 	rdlong	arg01, fp
10424     1C 4E 85 F1 | 	sub	fp, #28
10428     01 26 66 F0 | 	shl	local01, #1
1042c     13 13 02 F1 | 	add	arg01, local01
10430     0C 00 00 FF 
10434     D8 E4 85 F1 | 	sub	objptr, ##6360
10438     8C 39 B1 FD | 	call	#_psdpeek
1043c     15 FB 51 FC | 	wrword	result1, local03
10440     14 4E 05 F1 | 	add	fp, #20
10444     A7 2A 02 FB | 	rdlong	local03, fp
10448     01 2A 06 F1 | 	add	local03, #1
1044c     A7 2A 62 FC | 	wrlong	local03, fp
10450     14 4E 85 F1 | 	sub	fp, #20
10454     00 2B 56 F2 | 	cmps	local03, #256 wc
10458     94 FF 9F CD |  if_b	jmp	#LR__1341
1045c                 | LR__1342
1045c     18 4E 05 F1 | 	add	fp, #24
10460     A7 2A 02 FB | 	rdlong	local03, fp
10464     18 4E 85 F1 | 	sub	fp, #24
10468     09 2A 66 F0 | 	shl	local03, #9
1046c     0C 00 00 FF 
10470     D8 E4 05 F1 | 	add	objptr, ##6360
10474     F2 2A 02 F1 | 	add	local03, objptr
10478     FE 2B 06 F1 | 	add	local03, #510
1047c     15 01 58 FC | 	wrword	#0, local03
10480                 | '     envbuf(channel,255)=0
10480                 | '     return   
10480     0C 00 00 FF 
10484     D8 E4 85 F1 | 	sub	objptr, ##6360
10488     54 06 90 FD | 	jmp	#LR__1351
1048c                 | LR__1343
1048c                 | ' 
1048c                 | ' if numpar=5 then   						 'simple adsr
1048c     10 4E 05 F1 | 	add	fp, #16
10490     A7 28 02 FB | 	rdlong	local02, fp
10494     10 4E 85 F1 | 	sub	fp, #16
10498     05 28 0E F2 | 	cmp	local02, #5 wz
1049c     14 06 90 5D |  if_ne	jmp	#LR__1350
104a0     08 D3 BF FD | 	call	#_pop
104a4     FF 26 02 F6 | 	mov	local01, result3
104a8     40 4E 05 F1 | 	add	fp, #64
104ac     A7 FA 61 FC | 	wrlong	result1, fp
104b0     04 4E 05 F1 | 	add	fp, #4
104b4     A7 FC 61 FC | 	wrlong	result2, fp
104b8     04 4E 05 F1 | 	add	fp, #4
104bc     A7 26 62 FC | 	wrlong	local01, fp
104c0     08 4E 85 F1 | 	sub	fp, #8
104c4     A7 12 02 F6 | 	mov	arg01, fp
104c8     40 4E 85 F1 | 	sub	fp, #64
104cc     7C D5 BF FD | 	call	#_converttofloat
104d0     FD 28 02 F6 | 	mov	local02, result1
104d4     2C 4E 05 F1 | 	add	fp, #44
104d8     A7 28 62 FC | 	wrlong	local02, fp
104dc     2C 4E 85 F1 | 	sub	fp, #44
104e0     C8 D2 BF FD | 	call	#_pop
104e4     FF 26 02 F6 | 	mov	local01, result3
104e8     40 4E 05 F1 | 	add	fp, #64
104ec     A7 FA 61 FC | 	wrlong	result1, fp
104f0     04 4E 05 F1 | 	add	fp, #4
104f4     A7 FC 61 FC | 	wrlong	result2, fp
104f8     04 4E 05 F1 | 	add	fp, #4
104fc     A7 26 62 FC | 	wrlong	local01, fp
10500     08 4E 85 F1 | 	sub	fp, #8
10504     A7 12 02 F6 | 	mov	arg01, fp
10508     40 4E 85 F1 | 	sub	fp, #64
1050c     3C D5 BF FD | 	call	#_converttofloat
10510     FD 28 02 F6 | 	mov	local02, result1
10514     28 4E 05 F1 | 	add	fp, #40
10518     A7 28 62 FC | 	wrlong	local02, fp
1051c     28 4E 85 F1 | 	sub	fp, #40
10520     88 D2 BF FD | 	call	#_pop
10524     FF 26 02 F6 | 	mov	local01, result3
10528     40 4E 05 F1 | 	add	fp, #64
1052c     A7 FA 61 FC | 	wrlong	result1, fp
10530     04 4E 05 F1 | 	add	fp, #4
10534     A7 FC 61 FC | 	wrlong	result2, fp
10538     04 4E 05 F1 | 	add	fp, #4
1053c     A7 26 62 FC | 	wrlong	local01, fp
10540     08 4E 85 F1 | 	sub	fp, #8
10544     A7 12 02 F6 | 	mov	arg01, fp
10548     40 4E 85 F1 | 	sub	fp, #64
1054c     FC D4 BF FD | 	call	#_converttofloat
10550     FD 28 02 F6 | 	mov	local02, result1
10554     24 4E 05 F1 | 	add	fp, #36
10558     A7 28 62 FC | 	wrlong	local02, fp
1055c     24 4E 85 F1 | 	sub	fp, #36
10560     48 D2 BF FD | 	call	#_pop
10564     FF 26 02 F6 | 	mov	local01, result3
10568     40 4E 05 F1 | 	add	fp, #64
1056c     A7 FA 61 FC | 	wrlong	result1, fp
10570     04 4E 05 F1 | 	add	fp, #4
10574     A7 FC 61 FC | 	wrlong	result2, fp
10578     04 4E 05 F1 | 	add	fp, #4
1057c     A7 26 62 FC | 	wrlong	local01, fp
10580     08 4E 85 F1 | 	sub	fp, #8
10584     A7 12 02 F6 | 	mov	arg01, fp
10588     40 4E 85 F1 | 	sub	fp, #64
1058c     BC D4 BF FD | 	call	#_converttofloat
10590     FD 28 02 F6 | 	mov	local02, result1
10594     20 4E 05 F1 | 	add	fp, #32
10598     A7 28 62 FC | 	wrlong	local02, fp
1059c     20 4E 85 F1 | 	sub	fp, #32
105a0     08 D2 BF FD | 	call	#_pop
105a4     FF 26 02 F6 | 	mov	local01, result3
105a8     40 4E 05 F1 | 	add	fp, #64
105ac     A7 FA 61 FC | 	wrlong	result1, fp
105b0     04 4E 05 F1 | 	add	fp, #4
105b4     A7 FC 61 FC | 	wrlong	result2, fp
105b8     04 4E 05 F1 | 	add	fp, #4
105bc     A7 26 62 FC | 	wrlong	local01, fp
105c0     08 4E 85 F1 | 	sub	fp, #8
105c4     A7 12 02 F6 | 	mov	arg01, fp
105c8     40 4E 85 F1 | 	sub	fp, #64
105cc     C0 D3 BF FD | 	call	#_converttoint
105d0     18 4E 05 F1 | 	add	fp, #24
105d4     A7 FA 61 FC | 	wrlong	result1, fp
105d8                 | '   t1=pop() : rr=converttofloat(t1)
105d8                 | '   t1=pop() : ss=converttofloat(t1) 
105d8                 | '   t1=pop() : dd=converttofloat(t1)
105d8                 | '   t1=pop() : aa=converttofloat(t1)
105d8                 | '   t1=pop() : channel=converttoint(t1)
105d8                 | '   if ss<0.0 then ss=0.0 
105d8     10 4E 05 F1 | 	add	fp, #16
105dc     A7 12 02 FB | 	rdlong	arg01, fp
105e0     28 4E 85 F1 | 	sub	fp, #40
105e4     00 14 06 F6 | 	mov	arg02, #0
105e8     01 16 06 F6 | 	mov	arg03, #1
105ec     78 A1 B1 FD | 	call	#__system___float_cmp
105f0     00 FA 55 F2 | 	cmps	result1, #0 wc
105f4     28 4E 05 C1 |  if_b	add	fp, #40
105f8     A7 00 68 CC |  if_b	wrlong	#0, fp
105fc     28 4E 85 C1 |  if_b	sub	fp, #40
10600                 | '   if ss>1.0 then ss=1.0
10600     28 4E 05 F1 | 	add	fp, #40
10604     A7 12 02 FB | 	rdlong	arg01, fp
10608     28 4E 85 F1 | 	sub	fp, #40
1060c     00 C0 1F FF 
10610     00 14 06 F6 | 	mov	arg02, ##1065353216
10614     01 16 66 F6 | 	neg	arg03, #1
10618     4C A1 B1 FD | 	call	#__system___float_cmp
1061c     01 FA 55 F2 | 	cmps	result1, #1 wc
10620     28 4E 05 31 |  if_ae	add	fp, #40
10624     00 C0 9F 3F 
10628     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
1062c     28 4E 85 31 |  if_ae	sub	fp, #40
10630     20 4E 05 F1 | 	add	fp, #32
10634     A7 12 02 FB | 	rdlong	arg01, fp
10638     04 4E 05 F1 | 	add	fp, #4
1063c     A7 14 02 FB | 	rdlong	arg02, fp
10640     24 4E 85 F1 | 	sub	fp, #36
10644     1C 99 B1 FD | 	call	#__system___float_add
10648     FD 12 02 F6 | 	mov	arg01, result1
1064c     2C 4E 05 F1 | 	add	fp, #44
10650     A7 14 02 FB | 	rdlong	arg02, fp
10654     2C 4E 85 F1 | 	sub	fp, #44
10658     08 99 B1 FD | 	call	#__system___float_add
1065c     30 4E 05 F1 | 	add	fp, #48
10660     A7 FA 61 FC | 	wrlong	result1, fp
10664     FD 14 02 F6 | 	mov	arg02, result1
10668     30 4E 85 F1 | 	sub	fp, #48
1066c     00 C0 21 FF 
10670     00 12 06 F6 | 	mov	arg01, ##1132462080
10674     C0 9E B1 FD | 	call	#__system___float_div
10678     34 4E 05 F1 | 	add	fp, #52
1067c     A7 FA 61 FC | 	wrlong	result1, fp
10680     14 4E 85 F1 | 	sub	fp, #20
10684     A7 12 02 FB | 	rdlong	arg01, fp
10688     FD 14 02 F6 | 	mov	arg02, result1
1068c     20 4E 85 F1 | 	sub	fp, #32
10690     A0 9C B1 FD | 	call	#__system___float_mul
10694     FD 12 02 F6 | 	mov	arg01, result1
10698     01 14 06 F6 | 	mov	arg02, #1
1069c     5C A1 B1 FD | 	call	#__system___float_tointeger
106a0     A7 FA 61 FC | 	wrlong	result1, fp
106a4     24 4E 05 F1 | 	add	fp, #36
106a8     A7 12 02 FB | 	rdlong	arg01, fp
106ac     10 4E 05 F1 | 	add	fp, #16
106b0     A7 14 02 FB | 	rdlong	arg02, fp
106b4     34 4E 85 F1 | 	sub	fp, #52
106b8     78 9C B1 FD | 	call	#__system___float_mul
106bc     FD 12 02 F6 | 	mov	arg01, result1
106c0     01 14 06 F6 | 	mov	arg02, #1
106c4     34 A1 B1 FD | 	call	#__system___float_tointeger
106c8     04 4E 05 F1 | 	add	fp, #4
106cc     A7 FA 61 FC | 	wrlong	result1, fp
106d0     28 4E 05 F1 | 	add	fp, #40
106d4     A7 12 02 FB | 	rdlong	arg01, fp
106d8     08 4E 05 F1 | 	add	fp, #8
106dc     A7 14 02 FB | 	rdlong	arg02, fp
106e0     34 4E 85 F1 | 	sub	fp, #52
106e4     4C 9C B1 FD | 	call	#__system___float_mul
106e8     FD 12 02 F6 | 	mov	arg01, result1
106ec     01 14 06 F6 | 	mov	arg02, #1
106f0     08 A1 B1 FD | 	call	#__system___float_tointeger
106f4     0C 4E 05 F1 | 	add	fp, #12
106f8     A7 FA 61 FC | 	wrlong	result1, fp
106fc     0C 4E 85 F1 | 	sub	fp, #12
10700     F8 BF 23 FF 
10704     00 28 06 F6 | 	mov	local02, ##1199566848
10708     A7 12 02 FB | 	rdlong	arg01, fp
1070c     09 13 52 F6 | 	abs	arg01, arg01 wc
10710     1F 2C C6 C9 |  if_b	decod	local04, #31
10714     00 2C 06 36 |  if_ae	mov	local04, #0
10718     14 98 B1 FD | 	call	#__system___float_fromuns
1071c     16 FB 61 F5 | 	xor	result1, local04
10720     FD 14 02 F6 | 	mov	arg02, result1
10724     14 13 02 F6 | 	mov	arg01, local02
10728     0C 9E B1 FD | 	call	#__system___float_div
1072c     38 4E 05 F1 | 	add	fp, #56
10730     A7 FA 61 FC | 	wrlong	result1, fp
10734     F8 BF 23 FF 
10738     00 28 06 F6 | 	mov	local02, ##1199566848
1073c     10 4E 85 F1 | 	sub	fp, #16
10740     A7 14 02 FB | 	rdlong	arg02, fp
10744     28 4E 85 F1 | 	sub	fp, #40
10748     F8 BF 23 FF 
1074c     00 12 06 F6 | 	mov	arg01, ##1199566848
10750     E0 9B B1 FD | 	call	#__system___float_mul
10754     FD 14 02 F6 | 	mov	arg02, result1
10758     14 13 02 F6 | 	mov	arg01, local02
1075c     1F 14 E6 F4 | 	bitnot	arg02, #31
10760     00 98 B1 FD | 	call	#__system___float_add
10764     FD 28 02 F6 | 	mov	local02, result1
10768     04 4E 05 F1 | 	add	fp, #4
1076c     A7 12 02 FB | 	rdlong	arg01, fp
10770     04 4E 85 F1 | 	sub	fp, #4
10774     09 13 52 F6 | 	abs	arg01, arg01 wc
10778     1F 2C C6 C9 |  if_b	decod	local04, #31
1077c     00 2C 06 36 |  if_ae	mov	local04, #0
10780     AC 97 B1 FD | 	call	#__system___float_fromuns
10784     16 FB 61 F5 | 	xor	result1, local04
10788     FD 14 02 F6 | 	mov	arg02, result1
1078c     14 13 02 F6 | 	mov	arg01, local02
10790     A4 9D B1 FD | 	call	#__system___float_div
10794     24 4E 05 F1 | 	add	fp, #36
10798     A7 FA 61 FC | 	wrlong	result1, fp
1079c     04 4E 05 F1 | 	add	fp, #4
107a0     A7 14 02 FB | 	rdlong	arg02, fp
107a4     28 4E 85 F1 | 	sub	fp, #40
107a8     F8 BF 23 FF 
107ac     00 12 06 F6 | 	mov	arg01, ##1199566848
107b0     80 9B B1 FD | 	call	#__system___float_mul
107b4     FD 28 02 F6 | 	mov	local02, result1
107b8     0C 4E 05 F1 | 	add	fp, #12
107bc     A7 12 02 FB | 	rdlong	arg01, fp
107c0     0C 4E 85 F1 | 	sub	fp, #12
107c4     09 13 52 F6 | 	abs	arg01, arg01 wc
107c8     1F 2C C6 C9 |  if_b	decod	local04, #31
107cc     00 2C 06 36 |  if_ae	mov	local04, #0
107d0     5C 97 B1 FD | 	call	#__system___float_fromuns
107d4     16 FB 61 F5 | 	xor	result1, local04
107d8     FD 14 02 F6 | 	mov	arg02, result1
107dc     14 13 02 F6 | 	mov	arg01, local02
107e0     54 9D B1 FD | 	call	#__system___float_div
107e4     3C 4E 05 F1 | 	add	fp, #60
107e8     A7 FA 61 FC | 	wrlong	result1, fp
107ec     24 4E 85 F1 | 	sub	fp, #36
107f0     A7 2E 02 FB | 	rdlong	local05, fp
107f4     18 4E 85 F1 | 	sub	fp, #24
107f8     01 2E 66 F0 | 	shl	local05, #1
107fc     52 00 00 FF 
10800     EC E4 05 F1 | 	add	objptr, ##42220
10804     F2 2E 02 F1 | 	add	local05, objptr
10808     A7 30 02 FB | 	rdlong	local06, fp
1080c     04 4E 05 F1 | 	add	fp, #4
10810     A7 2A 02 FB | 	rdlong	local03, fp
10814     15 31 02 F1 | 	add	local06, local03
10818     17 31 52 FC | 	wrword	local06, local05
1081c     1C 4E 05 F1 | 	add	fp, #28
10820     A7 00 68 FC | 	wrlong	#0, fp
10824                 | '   fulltime=aa+dd+rr
10824                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10824                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10824                 | '   suspoints(channel)=a+d
10824                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10824     0C 4E 85 F1 | 	sub	fp, #12
10828     A7 00 68 FC | 	wrlong	#0, fp
1082c     14 4E 85 F1 | 	sub	fp, #20
10830     A7 32 02 FB | 	rdlong	local07, fp
10834     52 00 00 FF 
10838     EC E4 85 F1 | 	sub	objptr, ##42220
1083c                 | LR__1344
1083c     14 4E 05 F1 | 	add	fp, #20
10840     A7 28 02 FB | 	rdlong	local02, fp
10844     14 4E 85 F1 | 	sub	fp, #20
10848     19 29 52 F2 | 	cmps	local02, local07 wc
1084c     80 00 90 3D |  if_ae	jmp	#LR__1345
10850     18 4E 05 F1 | 	add	fp, #24
10854     A7 30 02 FB | 	rdlong	local06, fp
10858     09 30 66 F0 | 	shl	local06, #9
1085c     0C 00 00 FF 
10860     D8 E4 05 F1 | 	add	objptr, ##6360
10864     F2 30 02 F1 | 	add	local06, objptr
10868     04 4E 85 F1 | 	sub	fp, #4
1086c     A7 2E 02 FB | 	rdlong	local05, fp
10870     01 2E 66 F0 | 	shl	local05, #1
10874     18 2F 02 F1 | 	add	local05, local06
10878     0C 4E 05 F1 | 	add	fp, #12
1087c     A7 12 02 FB | 	rdlong	arg01, fp
10880     20 4E 85 F1 | 	sub	fp, #32
10884     0C 00 00 FF 
10888     D8 E4 85 F1 | 	sub	objptr, ##6360
1088c     01 14 06 F6 | 	mov	arg02, #1
10890     68 9F B1 FD | 	call	#__system___float_tointeger
10894     17 FB 51 FC | 	wrword	result1, local05
10898     20 4E 05 F1 | 	add	fp, #32
1089c     A7 12 02 FB | 	rdlong	arg01, fp
108a0     18 4E 05 F1 | 	add	fp, #24
108a4     A7 14 02 FB | 	rdlong	arg02, fp
108a8     38 4E 85 F1 | 	sub	fp, #56
108ac     B4 96 B1 FD | 	call	#__system___float_add
108b0     20 4E 05 F1 | 	add	fp, #32
108b4     A7 FA 61 FC | 	wrlong	result1, fp
108b8     0C 4E 85 F1 | 	sub	fp, #12
108bc     A7 30 02 FB | 	rdlong	local06, fp
108c0     01 30 06 F1 | 	add	local06, #1
108c4     A7 30 62 FC | 	wrlong	local06, fp
108c8     14 4E 85 F1 | 	sub	fp, #20
108cc     6C FF 9F FD | 	jmp	#LR__1344
108d0                 | LR__1345
108d0                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
108d0     A7 28 02 FB | 	rdlong	local02, fp
108d4     14 4E 05 F1 | 	add	fp, #20
108d8     A7 28 62 FC | 	wrlong	local02, fp
108dc     14 4E 85 F1 | 	sub	fp, #20
108e0     A7 34 02 FB | 	rdlong	local08, fp
108e4     04 4E 05 F1 | 	add	fp, #4
108e8     A7 28 02 FB | 	rdlong	local02, fp
108ec     04 4E 85 F1 | 	sub	fp, #4
108f0     14 35 02 F1 | 	add	local08, local02
108f4                 | LR__1346
108f4     14 4E 05 F1 | 	add	fp, #20
108f8     A7 28 02 FB | 	rdlong	local02, fp
108fc     14 4E 85 F1 | 	sub	fp, #20
10900     1A 29 52 F2 | 	cmps	local02, local08 wc
10904     A8 00 90 3D |  if_ae	jmp	#LR__1347
10908     18 4E 05 F1 | 	add	fp, #24
1090c     A7 32 02 FB | 	rdlong	local07, fp
10910     09 32 66 F0 | 	shl	local07, #9
10914     0C 00 00 FF 
10918     D8 E4 05 F1 | 	add	objptr, ##6360
1091c     F2 32 02 F1 | 	add	local07, objptr
10920     04 4E 85 F1 | 	sub	fp, #4
10924     A7 30 02 FB | 	rdlong	local06, fp
10928     01 30 66 F0 | 	shl	local06, #1
1092c     19 31 02 F1 | 	add	local06, local07
10930     0C 4E 05 F1 | 	add	fp, #12
10934     A7 12 02 FB | 	rdlong	arg01, fp
10938     20 4E 85 F1 | 	sub	fp, #32
1093c     0C 00 00 FF 
10940     D8 E4 85 F1 | 	sub	objptr, ##6360
10944     01 14 06 F6 | 	mov	arg02, #1
10948     B0 9E B1 FD | 	call	#__system___float_tointeger
1094c     18 FB 51 FC | 	wrword	result1, local06
10950     20 4E 05 F1 | 	add	fp, #32
10954     A7 12 02 FB | 	rdlong	arg01, fp
10958     04 4E 05 F1 | 	add	fp, #4
1095c     A7 14 02 FB | 	rdlong	arg02, fp
10960     24 4E 85 F1 | 	sub	fp, #36
10964     1F 14 E6 F4 | 	bitnot	arg02, #31
10968     F8 95 B1 FD | 	call	#__system___float_add
1096c     20 4E 05 F1 | 	add	fp, #32
10970     A7 FA 61 FC | 	wrlong	result1, fp
10974     20 4E 85 F1 | 	sub	fp, #32
10978     FD 12 02 F6 | 	mov	arg01, result1
1097c     00 14 06 F6 | 	mov	arg02, #0
10980     01 16 06 F6 | 	mov	arg03, #1
10984     E0 9D B1 FD | 	call	#__system___float_cmp
10988     00 FA 55 F2 | 	cmps	result1, #0 wc
1098c     20 4E 05 C1 |  if_b	add	fp, #32
10990     A7 00 68 CC |  if_b	wrlong	#0, fp
10994     20 4E 85 C1 |  if_b	sub	fp, #32
10998     14 4E 05 F1 | 	add	fp, #20
1099c     A7 32 02 FB | 	rdlong	local07, fp
109a0     01 32 06 F1 | 	add	local07, #1
109a4     A7 32 62 FC | 	wrlong	local07, fp
109a8     14 4E 85 F1 | 	sub	fp, #20
109ac     44 FF 9F FD | 	jmp	#LR__1346
109b0                 | LR__1347
109b0                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
109b0     A7 28 02 FB | 	rdlong	local02, fp
109b4     04 4E 05 F1 | 	add	fp, #4
109b8     A7 34 02 FB | 	rdlong	local08, fp
109bc     1A 29 02 F1 | 	add	local02, local08
109c0     10 4E 05 F1 | 	add	fp, #16
109c4     A7 28 62 FC | 	wrlong	local02, fp
109c8     14 4E 85 F1 | 	sub	fp, #20
109cc                 | LR__1348
109cc     14 4E 05 F1 | 	add	fp, #20
109d0     A7 2E 02 FB | 	rdlong	local05, fp
109d4     14 4E 85 F1 | 	sub	fp, #20
109d8     00 2F 56 F2 | 	cmps	local05, #256 wc
109dc     A8 00 90 3D |  if_ae	jmp	#LR__1349
109e0     18 4E 05 F1 | 	add	fp, #24
109e4     A7 34 02 FB | 	rdlong	local08, fp
109e8     09 34 66 F0 | 	shl	local08, #9
109ec     0C 00 00 FF 
109f0     D8 E4 05 F1 | 	add	objptr, ##6360
109f4     F2 34 02 F1 | 	add	local08, objptr
109f8     04 4E 85 F1 | 	sub	fp, #4
109fc     A7 32 02 FB | 	rdlong	local07, fp
10a00     01 32 66 F0 | 	shl	local07, #1
10a04     1A 33 02 F1 | 	add	local07, local08
10a08     0C 4E 05 F1 | 	add	fp, #12
10a0c     A7 12 02 FB | 	rdlong	arg01, fp
10a10     20 4E 85 F1 | 	sub	fp, #32
10a14     0C 00 00 FF 
10a18     D8 E4 85 F1 | 	sub	objptr, ##6360
10a1c     01 14 06 F6 | 	mov	arg02, #1
10a20     D8 9D B1 FD | 	call	#__system___float_tointeger
10a24     19 FB 51 FC | 	wrword	result1, local07
10a28     20 4E 05 F1 | 	add	fp, #32
10a2c     A7 12 02 FB | 	rdlong	arg01, fp
10a30     1C 4E 05 F1 | 	add	fp, #28
10a34     A7 14 02 FB | 	rdlong	arg02, fp
10a38     3C 4E 85 F1 | 	sub	fp, #60
10a3c     1F 14 E6 F4 | 	bitnot	arg02, #31
10a40     20 95 B1 FD | 	call	#__system___float_add
10a44     20 4E 05 F1 | 	add	fp, #32
10a48     A7 FA 61 FC | 	wrlong	result1, fp
10a4c     20 4E 85 F1 | 	sub	fp, #32
10a50     FD 12 02 F6 | 	mov	arg01, result1
10a54     00 14 06 F6 | 	mov	arg02, #0
10a58     01 16 06 F6 | 	mov	arg03, #1
10a5c     08 9D B1 FD | 	call	#__system___float_cmp
10a60     00 FA 55 F2 | 	cmps	result1, #0 wc
10a64     20 4E 05 C1 |  if_b	add	fp, #32
10a68     A7 00 68 CC |  if_b	wrlong	#0, fp
10a6c     20 4E 85 C1 |  if_b	sub	fp, #32
10a70     14 4E 05 F1 | 	add	fp, #20
10a74     A7 34 02 FB | 	rdlong	local08, fp
10a78     01 34 06 F1 | 	add	local08, #1
10a7c     A7 34 62 FC | 	wrlong	local08, fp
10a80     14 4E 85 F1 | 	sub	fp, #20
10a84     44 FF 9F FD | 	jmp	#LR__1348
10a88                 | LR__1349
10a88     18 4E 05 F1 | 	add	fp, #24
10a8c     A7 2E 02 FB | 	rdlong	local05, fp
10a90     18 4E 85 F1 | 	sub	fp, #24
10a94     09 2E 66 F0 | 	shl	local05, #9
10a98     0C 00 00 FF 
10a9c     D8 E4 05 F1 | 	add	objptr, ##6360
10aa0     F2 2E 02 F1 | 	add	local05, objptr
10aa4     FE 2F 06 F1 | 	add	local05, #510
10aa8     17 01 58 FC | 	wrword	#0, local05
10aac     0C 00 00 FF 
10ab0     D8 E4 85 F1 | 	sub	objptr, ##6360
10ab4                 | LR__1350
10ab4     18 4E 05 F1 | 	add	fp, #24
10ab8     A7 2E 02 FB | 	rdlong	local05, fp
10abc     18 4E 85 F1 | 	sub	fp, #24
10ac0     09 2E 66 F0 | 	shl	local05, #9
10ac4     0C 00 00 FF 
10ac8     D8 E4 05 F1 | 	add	objptr, ##6360
10acc     F2 2E 02 F1 | 	add	local05, objptr
10ad0     FE 2F 06 F1 | 	add	local05, #510
10ad4     17 01 58 FC | 	wrword	#0, local05
10ad8     0C 00 00 FF 
10adc     D8 E4 85 F1 | 	sub	objptr, ##6360
10ae0                 | LR__1351
10ae0     A7 F0 03 F6 | 	mov	ptra, fp
10ae4     B2 00 A0 FD | 	call	#popregs_
10ae8                 | _do_defenv_ret
10ae8     2D 00 64 FD | 	ret
10aec                 | 
10aec                 | ' 
10aec                 | ' '-------------------- defsnd
10aec                 | ' 
10aec                 | ' sub do_defsnd
10aec                 | _do_defsnd
10aec     04 4A 05 F6 | 	mov	COUNT_, #4
10af0     A8 00 A0 FD | 	call	#pushregs_
10af4     88 F0 07 F1 | 	add	ptra, #136
10af8     4A 00 00 FF 
10afc     80 E4 05 F1 | 	add	objptr, ##38016
10b00     F2 1A 02 FB | 	rdlong	arg05, objptr
10b04     0D 19 02 F6 | 	mov	arg04, arg05
10b08     01 18 66 F0 | 	shl	arg04, #1
10b0c     0D 19 02 F1 | 	add	arg04, arg05
10b10     02 18 66 F0 | 	shl	arg04, #2
10b14     03 00 00 FF 
10b18     04 E4 85 F1 | 	sub	objptr, ##1540
10b1c     F2 18 02 F1 | 	add	arg04, objptr
10b20     0C 1B 02 FB | 	rdlong	arg05, arg04
10b24     A7 1A 62 FC | 	wrlong	arg05, fp
10b28                 | ' 
10b28                 | ' numpar=compiledline(lineptr_e).result.uresult
10b28                 | ' 
10b28                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10b28                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10b28                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10b28                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10b28                 | ' 
10b28                 | ' if numpar<2 then return
10b28     02 1A 56 F2 | 	cmps	arg05, #2 wc
10b2c     47 00 00 FF 
10b30     7C E4 85 F1 | 	sub	objptr, ##36476
10b34     98 08 90 CD |  if_b	jmp	#LR__1383
10b38                 | '  
10b38                 | ' if numpar=2 then
10b38     A7 1A 02 FB | 	rdlong	arg05, fp
10b3c     02 1A 0E F2 | 	cmp	arg05, #2 wz
10b40     A4 03 90 5D |  if_ne	jmp	#LR__1370
10b44     64 CC BF FD | 	call	#_pop
10b48     FF 1A 02 F6 | 	mov	arg05, result3
10b4c     2C 4E 05 F1 | 	add	fp, #44
10b50     A7 FA 61 FC | 	wrlong	result1, fp
10b54     04 4E 05 F1 | 	add	fp, #4
10b58     A7 FC 61 FC | 	wrlong	result2, fp
10b5c     04 4E 05 F1 | 	add	fp, #4
10b60     A7 1A 62 FC | 	wrlong	arg05, fp
10b64                 | '   t1=pop()
10b64                 | '   if t1.result_type=result_string2 then 
10b64     34 4E 85 F1 | 	sub	fp, #52
10b68     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10b6c     20 00 90 5D |  if_ne	jmp	#LR__1360
10b70     2C 4E 05 F1 | 	add	fp, #44
10b74     A7 12 02 FB | 	rdlong	arg01, fp
10b78     2C 4E 85 F1 | 	sub	fp, #44
10b7c     A4 CD BF FD | 	call	#_convertstring
10b80     38 4E 05 F1 | 	add	fp, #56
10b84     A7 FA 61 FC | 	wrlong	result1, fp
10b88     38 4E 85 F1 | 	sub	fp, #56
10b8c     58 00 90 FD | 	jmp	#LR__1363
10b90                 | LR__1360
10b90     34 4E 05 F1 | 	add	fp, #52
10b94     A7 1A 02 FB | 	rdlong	arg05, fp
10b98     34 4E 85 F1 | 	sub	fp, #52
10b9c     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10ba0     18 00 90 5D |  if_ne	jmp	#LR__1361
10ba4     2C 4E 05 F1 | 	add	fp, #44
10ba8     A7 1A 02 FB | 	rdlong	arg05, fp
10bac     0C 4E 05 F1 | 	add	fp, #12
10bb0     A7 1A 62 FC | 	wrlong	arg05, fp
10bb4     38 4E 85 F1 | 	sub	fp, #56
10bb8     2C 00 90 FD | 	jmp	#LR__1362
10bbc                 | LR__1361
10bbc     BC 01 00 FF 
10bc0     F2 1A 06 F6 | 	mov	arg05, ##@LR__5951
10bc4     38 4E 05 F1 | 	add	fp, #56
10bc8     A7 1A 62 FC | 	wrlong	arg05, fp
10bcc     0C 4E 85 F1 | 	sub	fp, #12
10bd0     A7 12 02 F6 | 	mov	arg01, fp
10bd4     2C 4E 85 F1 | 	sub	fp, #44
10bd8     B4 CD BF FD | 	call	#_converttoint
10bdc     14 4E 05 F1 | 	add	fp, #20
10be0     A7 FA 61 FC | 	wrlong	result1, fp
10be4     14 4E 85 F1 | 	sub	fp, #20
10be8                 | LR__1362
10be8                 | LR__1363
10be8                 | '   if s<>"" then 
10be8     38 4E 05 F1 | 	add	fp, #56
10bec     A7 12 02 FB | 	rdlong	arg01, fp
10bf0     38 4E 85 F1 | 	sub	fp, #56
10bf4     BC 01 00 FF 
10bf8     F3 14 06 F6 | 	mov	arg02, ##@LR__5952
10bfc     E0 68 B1 FD | 	call	#__system___string_cmp
10c00     00 FA 0D F2 | 	cmp	result1, #0 wz
10c04     E4 01 90 AD |  if_e	jmp	#LR__1366
10c08     A0 CB BF FD | 	call	#_pop
10c0c     FF 1A 02 F6 | 	mov	arg05, result3
10c10     2C 4E 05 F1 | 	add	fp, #44
10c14     A7 FA 61 FC | 	wrlong	result1, fp
10c18     04 4E 05 F1 | 	add	fp, #4
10c1c     A7 FC 61 FC | 	wrlong	result2, fp
10c20     04 4E 05 F1 | 	add	fp, #4
10c24     A7 1A 62 FC | 	wrlong	arg05, fp
10c28     08 4E 85 F1 | 	sub	fp, #8
10c2c     A7 12 02 F6 | 	mov	arg01, fp
10c30     2C 4E 85 F1 | 	sub	fp, #44
10c34     58 CD BF FD | 	call	#_converttoint
10c38     10 4E 05 F1 | 	add	fp, #16
10c3c     A7 FA 61 FC | 	wrlong	result1, fp
10c40                 | '     t1=pop()
10c40                 | '     channel=converttoint(t1) : if channel>31 then return
10c40     FD 1A 02 F6 | 	mov	arg05, result1
10c44     10 4E 85 F1 | 	sub	fp, #16
10c48     20 1A 56 F2 | 	cmps	arg05, #32 wc
10c4c     80 07 90 3D |  if_ae	jmp	#LR__1383
10c50                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10c50     09 12 06 F6 | 	mov	arg01, #9
10c54     BC BB B1 FD | 	call	#__system__close
10c58     09 26 06 F6 | 	mov	local01, #9
10c5c     BC 01 00 FF 
10c60     F4 12 06 F6 | 	mov	arg01, ##@LR__5953
10c64     38 4E 05 F1 | 	add	fp, #56
10c68     A7 14 02 FB | 	rdlong	arg02, fp
10c6c     38 4E 85 F1 | 	sub	fp, #56
10c70     A0 68 B1 FD | 	call	#__system___string_concat
10c74     FD 14 02 F6 | 	mov	arg02, result1
10c78     13 13 02 F6 | 	mov	arg01, local01
10c7c     00 16 06 F6 | 	mov	arg03, #0
10c80     38 74 B1 FD | 	call	#__system___basic_open_string
10c84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10c88     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10c8c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10c90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10c94     52 00 00 FF 
10c98     4C E5 05 F1 | 	add	objptr, ##42316
10c9c     F2 FA 61 FC | 	wrlong	result1, objptr
10ca0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10ca0     52 00 00 FF 
10ca4     4C E5 85 F1 | 	sub	objptr, ##42316
10ca8     B0 00 90 AD |  if_e	jmp	#LR__1364
10cac     00 12 06 F6 | 	mov	arg01, #0
10cb0     A8 C4 B1 FD | 	call	#__system___getiolock_0616
10cb4     FD 12 02 F6 | 	mov	arg01, result1
10cb8     FC 67 B1 FD | 	call	#__system___lockmem
10cbc     BC 01 00 FF 
10cc0     01 15 06 F6 | 	mov	arg02, ##@LR__5954
10cc4     00 12 06 F6 | 	mov	arg01, #0
10cc8     00 16 06 F6 | 	mov	arg03, #0
10ccc     E0 74 B1 FD | 	call	#__system___basic_print_string
10cd0     52 00 00 FF 
10cd4     4C E5 05 F1 | 	add	objptr, ##42316
10cd8     F2 14 02 FB | 	rdlong	arg02, objptr
10cdc     52 00 00 FF 
10ce0     4C E5 85 F1 | 	sub	objptr, ##42316
10ce4     00 12 06 F6 | 	mov	arg01, #0
10ce8     00 16 06 F6 | 	mov	arg03, #0
10cec     0A 18 06 F6 | 	mov	arg04, #10
10cf0     00 75 B1 FD | 	call	#__system___basic_print_integer
10cf4     BC 01 00 FF 
10cf8     0F 15 06 F6 | 	mov	arg02, ##@LR__5955
10cfc     00 12 06 F6 | 	mov	arg01, #0
10d00     00 16 06 F6 | 	mov	arg03, #0
10d04     A8 74 B1 FD | 	call	#__system___basic_print_string
10d08     00 26 06 F6 | 	mov	local01, #0
10d0c     52 00 00 FF 
10d10     4C E5 05 F1 | 	add	objptr, ##42316
10d14     F2 12 02 FB | 	rdlong	arg01, objptr
10d18     52 00 00 FF 
10d1c     4C E5 85 F1 | 	sub	objptr, ##42316
10d20     24 91 B1 FD | 	call	#__system___strerror
10d24     FD 14 02 F6 | 	mov	arg02, result1
10d28     13 13 02 F6 | 	mov	arg01, local01
10d2c     00 16 06 F6 | 	mov	arg03, #0
10d30     7C 74 B1 FD | 	call	#__system___basic_print_string
10d34     00 12 06 F6 | 	mov	arg01, #0
10d38     0A 14 06 F6 | 	mov	arg02, #10
10d3c     00 16 06 F6 | 	mov	arg03, #0
10d40     14 74 B1 FD | 	call	#__system___basic_print_char
10d44     00 12 06 F6 | 	mov	arg01, #0
10d48     10 C4 B1 FD | 	call	#__system___getiolock_0616
10d4c     FD 00 68 FC | 	wrlong	#0, result1
10d50     09 12 06 F6 | 	mov	arg01, #9
10d54     BC BA B1 FD | 	call	#__system__close
10d58     74 06 90 FD | 	jmp	#LR__1383
10d5c                 | LR__1364
10d5c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10d5c     04 4E 05 F1 | 	add	fp, #4
10d60     A7 00 68 FC | 	wrlong	#0, fp
10d64                 | LR__1365
10d64     A7 26 02 FB | 	rdlong	local01, fp
10d68     01 26 66 F0 | 	shl	local01, #1
10d6c     11 14 06 F6 | 	mov	arg02, #17
10d70     13 15 02 F1 | 	add	arg02, local01
10d74     78 4E 05 F1 | 	add	fp, #120
10d78     A7 16 02 F6 | 	mov	arg03, fp
10d7c     7C 4E 85 F1 | 	sub	fp, #124
10d80     09 12 06 F6 | 	mov	arg01, #9
10d84     01 18 06 F6 | 	mov	arg04, #1
10d88     02 1A 06 F6 | 	mov	arg05, #2
10d8c     9C 75 B1 FD | 	call	#__system___basic_get
10d90     10 4E 05 F1 | 	add	fp, #16
10d94     A7 12 02 FB | 	rdlong	arg01, fp
10d98     0B 12 66 F0 | 	shl	arg01, #11
10d9c     0C 4E 85 F1 | 	sub	fp, #12
10da0     A7 26 02 FB | 	rdlong	local01, fp
10da4     01 26 66 F0 | 	shl	local01, #1
10da8     13 13 02 F1 | 	add	arg01, local01
10dac     78 4E 05 F1 | 	add	fp, #120
10db0     A7 14 E2 FA | 	rdword	arg02, fp
10db4     7C 4E 85 F1 | 	sub	fp, #124
10db8     0F 14 66 F7 | 	signx	arg02, #15
10dbc     C8 2E B1 FD | 	call	#_psdpoke
10dc0     04 4E 05 F1 | 	add	fp, #4
10dc4     A7 26 02 FB | 	rdlong	local01, fp
10dc8     01 26 06 F1 | 	add	local01, #1
10dcc     A7 26 62 FC | 	wrlong	local01, fp
10dd0     02 00 00 FF 
10dd4     01 26 56 F2 | 	cmps	local01, ##1025 wc
10dd8     88 FF 9F CD |  if_b	jmp	#LR__1365
10ddc     04 4E 85 F1 | 	sub	fp, #4
10de0                 | '     close #9
10de0     09 12 06 F6 | 	mov	arg01, #9
10de4     2C BA B1 FD | 	call	#__system__close
10de8                 | '     return
10de8     E4 05 90 FD | 	jmp	#LR__1383
10dec                 | LR__1366
10dec                 | '     if wptr < ($80000 - 2048) then 
10dec     14 4E 05 F1 | 	add	fp, #20
10df0     A7 26 02 FB | 	rdlong	local01, fp
10df4     14 4E 85 F1 | 	sub	fp, #20
10df8     FC 03 00 FF 
10dfc     00 26 56 F2 | 	cmps	local01, ##522240 wc
10e00     70 00 90 3D |  if_ae	jmp	#LR__1368
10e04                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10e04     04 4E 05 F1 | 	add	fp, #4
10e08     A7 00 68 FC | 	wrlong	#0, fp
10e0c     04 4E 85 F1 | 	sub	fp, #4
10e10                 | LR__1367
10e10     10 4E 05 F1 | 	add	fp, #16
10e14     A7 26 02 FB | 	rdlong	local01, fp
10e18     0B 26 66 F0 | 	shl	local01, #11
10e1c     0C 4E 85 F1 | 	sub	fp, #12
10e20     A7 1A 02 FB | 	rdlong	arg05, fp
10e24     0D 19 02 F6 | 	mov	arg04, arg05
10e28     01 18 66 F0 | 	shl	arg04, #1
10e2c     0C 27 02 F1 | 	add	local01, arg04
10e30     10 4E 05 F1 | 	add	fp, #16
10e34     A7 12 02 FB | 	rdlong	arg01, fp
10e38     14 4E 85 F1 | 	sub	fp, #20
10e3c     01 1A 66 F0 | 	shl	arg05, #1
10e40     0D 13 02 F1 | 	add	arg01, arg05
10e44     09 15 E2 FA | 	rdword	arg02, arg01
10e48     13 13 02 F6 | 	mov	arg01, local01
10e4c     38 2E B1 FD | 	call	#_psdpoke
10e50     04 4E 05 F1 | 	add	fp, #4
10e54     A7 26 02 FB | 	rdlong	local01, fp
10e58     01 26 06 F1 | 	add	local01, #1
10e5c     A7 26 62 FC | 	wrlong	local01, fp
10e60     04 4E 85 F1 | 	sub	fp, #4
10e64     02 00 00 FF 
10e68     00 26 56 F2 | 	cmps	local01, ##1024 wc
10e6c     A0 FF 9F CD |  if_b	jmp	#LR__1367
10e70     5C 05 90 FD | 	jmp	#LR__1383
10e74                 | LR__1368
10e74                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10e74     04 4E 05 F1 | 	add	fp, #4
10e78     A7 00 68 FC | 	wrlong	#0, fp
10e7c     04 4E 85 F1 | 	sub	fp, #4
10e80                 | LR__1369
10e80     10 4E 05 F1 | 	add	fp, #16
10e84     A7 26 02 FB | 	rdlong	local01, fp
10e88     0B 26 66 F0 | 	shl	local01, #11
10e8c     0C 4E 85 F1 | 	sub	fp, #12
10e90     A7 1A 02 FB | 	rdlong	arg05, fp
10e94     0D 19 02 F6 | 	mov	arg04, arg05
10e98     01 18 66 F0 | 	shl	arg04, #1
10e9c     0C 27 02 F1 | 	add	local01, arg04
10ea0     10 4E 05 F1 | 	add	fp, #16
10ea4     A7 12 02 FB | 	rdlong	arg01, fp
10ea8     14 4E 85 F1 | 	sub	fp, #20
10eac     01 1A 66 F0 | 	shl	arg05, #1
10eb0     0D 13 02 F1 | 	add	arg01, arg05
10eb4     10 2F B1 FD | 	call	#_psdpeek
10eb8     FD 14 02 F6 | 	mov	arg02, result1
10ebc     13 13 02 F6 | 	mov	arg01, local01
10ec0     C4 2D B1 FD | 	call	#_psdpoke
10ec4     04 4E 05 F1 | 	add	fp, #4
10ec8     A7 26 02 FB | 	rdlong	local01, fp
10ecc     01 26 06 F1 | 	add	local01, #1
10ed0     A7 26 62 FC | 	wrlong	local01, fp
10ed4     04 4E 85 F1 | 	sub	fp, #4
10ed8     02 00 00 FF 
10edc     00 26 56 F2 | 	cmps	local01, ##1024 wc
10ee0     9C FF 9F CD |  if_b	jmp	#LR__1369
10ee4                 | '     return 
10ee4     E8 04 90 FD | 	jmp	#LR__1383
10ee8                 | '   return
10ee8                 | LR__1370
10ee8                 | ' for i=0 to 15 : harm(i)=0: next i  
10ee8     04 4E 05 F1 | 	add	fp, #4
10eec     A7 00 68 FC | 	wrlong	#0, fp
10ef0     97 16 48 FB | 	callpa	#(@LR__1372-@LR__1371)>>2,fcache_load_ptr_
10ef4                 | LR__1371
10ef4     A7 26 02 FB | 	rdlong	local01, fp
10ef8     02 26 66 F0 | 	shl	local01, #2
10efc     38 4E 05 F1 | 	add	fp, #56
10f00     A7 26 02 F1 | 	add	local01, fp
10f04     13 01 68 FC | 	wrlong	#0, local01
10f08     38 4E 85 F1 | 	sub	fp, #56
10f0c     A7 26 02 FB | 	rdlong	local01, fp
10f10     01 26 06 F1 | 	add	local01, #1
10f14     A7 26 62 FC | 	wrlong	local01, fp
10f18     10 26 56 F2 | 	cmps	local01, #16 wc
10f1c     D4 FF 9F CD |  if_b	jmp	#LR__1371
10f20                 | LR__1372
10f20     04 4E 85 F1 | 	sub	fp, #4
10f24                 | ' for i=numpar to 2 step -1 
10f24     A7 26 02 FB | 	rdlong	local01, fp
10f28     04 4E 05 F1 | 	add	fp, #4
10f2c     A7 26 62 FC | 	wrlong	local01, fp
10f30     04 4E 85 F1 | 	sub	fp, #4
10f34                 | LR__1373
10f34     74 C8 BF FD | 	call	#_pop
10f38     2C 4E 05 F1 | 	add	fp, #44
10f3c     A7 FA 61 FC | 	wrlong	result1, fp
10f40     04 4E 05 F1 | 	add	fp, #4
10f44     A7 FC 61 FC | 	wrlong	result2, fp
10f48     04 4E 05 F1 | 	add	fp, #4
10f4c     A7 FE 61 FC | 	wrlong	result3, fp
10f50     30 4E 85 F1 | 	sub	fp, #48
10f54     A7 26 02 FB | 	rdlong	local01, fp
10f58     02 26 86 F1 | 	sub	local01, #2
10f5c     02 26 66 F0 | 	shl	local01, #2
10f60     38 4E 05 F1 | 	add	fp, #56
10f64     A7 26 02 F1 | 	add	local01, fp
10f68     10 4E 85 F1 | 	sub	fp, #16
10f6c     A7 12 02 F6 | 	mov	arg01, fp
10f70     2C 4E 85 F1 | 	sub	fp, #44
10f74     D4 CA BF FD | 	call	#_converttofloat
10f78     13 FB 61 FC | 	wrlong	result1, local01
10f7c     04 4E 05 F1 | 	add	fp, #4
10f80     A7 26 02 FB | 	rdlong	local01, fp
10f84     01 26 86 F1 | 	sub	local01, #1
10f88     A7 26 62 FC | 	wrlong	local01, fp
10f8c     04 4E 85 F1 | 	sub	fp, #4
10f90     02 26 56 F2 | 	cmps	local01, #2 wc
10f94     9C FF 9F 3D |  if_ae	jmp	#LR__1373
10f98     10 C8 BF FD | 	call	#_pop
10f9c     FF 26 02 F6 | 	mov	local01, result3
10fa0     2C 4E 05 F1 | 	add	fp, #44
10fa4     A7 FA 61 FC | 	wrlong	result1, fp
10fa8     04 4E 05 F1 | 	add	fp, #4
10fac     A7 FC 61 FC | 	wrlong	result2, fp
10fb0     04 4E 05 F1 | 	add	fp, #4
10fb4     A7 26 62 FC | 	wrlong	local01, fp
10fb8     08 4E 85 F1 | 	sub	fp, #8
10fbc     A7 12 02 F6 | 	mov	arg01, fp
10fc0     2C 4E 85 F1 | 	sub	fp, #44
10fc4     C8 C9 BF FD | 	call	#_converttoint
10fc8     10 4E 05 F1 | 	add	fp, #16
10fcc     A7 FA 61 FC | 	wrlong	result1, fp
10fd0                 | ' t1=pop()
10fd0                 | ' channel=converttoint(t1) : : if channel>31 then return
10fd0     FD 26 02 F6 | 	mov	local01, result1
10fd4     10 4E 85 F1 | 	sub	fp, #16
10fd8     20 26 56 F2 | 	cmps	local01, #32 wc
10fdc     F0 03 90 3D |  if_ae	jmp	#LR__1383
10fe0     20 4E 05 F1 | 	add	fp, #32
10fe4     A7 00 68 FC | 	wrlong	#0, fp
10fe8                 | ' max=0
10fe8                 | ' if harm(0)<0 then
10fe8     1C 4E 05 F1 | 	add	fp, #28
10fec     A7 12 02 FB | 	rdlong	arg01, fp
10ff0     3C 4E 85 F1 | 	sub	fp, #60
10ff4     00 14 06 F6 | 	mov	arg02, #0
10ff8     01 16 06 F6 | 	mov	arg03, #1
10ffc     68 97 B1 FD | 	call	#__system___float_cmp
11000     00 FA 55 F2 | 	cmps	result1, #0 wc
11004     04 01 90 3D |  if_ae	jmp	#LR__1376
11008     3C 4E 05 F1 | 	add	fp, #60
1100c     A7 FA 01 FB | 	rdlong	result1, fp
11010     1F FA 05 F4 | 	bitl	result1, #31
11014     24 4E 85 F1 | 	sub	fp, #36
11018     A7 FA 61 FC | 	wrlong	result1, fp
1101c     28 4E 05 F1 | 	add	fp, #40
11020     A7 FA 01 FB | 	rdlong	result1, fp
11024     1F FA 05 F4 | 	bitl	result1, #31
11028     24 4E 85 F1 | 	sub	fp, #36
1102c     A7 FA 61 FC | 	wrlong	result1, fp
11030     20 4E 05 F1 | 	add	fp, #32
11034     00 C0 9F FF 
11038     A7 00 68 FC | 	wrlong	##1065353216, fp
1103c     24 4E 85 F1 | 	sub	fp, #36
11040     A7 26 02 FB | 	rdlong	local01, fp
11044     28 4E 05 F1 | 	add	fp, #40
11048     A7 26 62 FC | 	wrlong	local01, fp
1104c     24 4E 85 F1 | 	sub	fp, #36
11050     A7 26 02 FB | 	rdlong	local01, fp
11054     28 4E 05 F1 | 	add	fp, #40
11058     A7 26 62 FC | 	wrlong	local01, fp
1105c                 | '   harm(0)=1
1105c                 | '   harm(1)=even
1105c                 | '   harm(2)=odd
1105c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
1105c     40 4E 85 F1 | 	sub	fp, #64
11060     A7 06 68 FC | 	wrlong	#3, fp
11064                 | LR__1374
11064     A7 1A 02 FB | 	rdlong	arg05, fp
11068     0D 29 02 F6 | 	mov	local02, arg05
1106c     02 28 66 F0 | 	shl	local02, #2
11070     38 4E 05 F1 | 	add	fp, #56
11074     A7 28 02 F1 | 	add	local02, fp
11078     02 1A 86 F1 | 	sub	arg05, #2
1107c     02 1A 66 F0 | 	shl	arg05, #2
11080     A7 1A 02 F1 | 	add	arg05, fp
11084     0D 13 02 FB | 	rdlong	arg01, arg05
11088     24 4E 85 F1 | 	sub	fp, #36
1108c     A7 14 02 FB | 	rdlong	arg02, fp
11090     18 4E 85 F1 | 	sub	fp, #24
11094     9C 92 B1 FD | 	call	#__system___float_mul
11098     14 FB 61 FC | 	wrlong	result1, local02
1109c     04 4E 05 F1 | 	add	fp, #4
110a0     A7 2A 02 FB | 	rdlong	local03, fp
110a4     02 2A 06 F1 | 	add	local03, #2
110a8     A7 2A 62 FC | 	wrlong	local03, fp
110ac     10 2A 56 F2 | 	cmps	local03, #16 wc
110b0     B0 FF 9F CD |  if_b	jmp	#LR__1374
110b4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
110b4     A7 08 68 FC | 	wrlong	#4, fp
110b8                 | LR__1375
110b8     A7 2A 02 FB | 	rdlong	local03, fp
110bc     15 29 02 F6 | 	mov	local02, local03
110c0     02 28 66 F0 | 	shl	local02, #2
110c4     38 4E 05 F1 | 	add	fp, #56
110c8     A7 28 02 F1 | 	add	local02, fp
110cc     02 2A 86 F1 | 	sub	local03, #2
110d0     02 2A 66 F0 | 	shl	local03, #2
110d4     A7 2A 02 F1 | 	add	local03, fp
110d8     15 13 02 FB | 	rdlong	arg01, local03
110dc     20 4E 85 F1 | 	sub	fp, #32
110e0     A7 14 02 FB | 	rdlong	arg02, fp
110e4     1C 4E 85 F1 | 	sub	fp, #28
110e8     48 92 B1 FD | 	call	#__system___float_mul
110ec     14 FB 61 FC | 	wrlong	result1, local02
110f0     04 4E 05 F1 | 	add	fp, #4
110f4     A7 2A 02 FB | 	rdlong	local03, fp
110f8     02 2A 06 F1 | 	add	local03, #2
110fc     A7 2A 62 FC | 	wrlong	local03, fp
11100     0F 2A 56 F2 | 	cmps	local03, #15 wc
11104     B0 FF 9F CD |  if_b	jmp	#LR__1375
11108     04 4E 85 F1 | 	sub	fp, #4
1110c                 | LR__1376
1110c                 | ' if harm(0)>=0 then ' synthesize with harmonics
1110c     3C 4E 05 F1 | 	add	fp, #60
11110     A7 12 02 FB | 	rdlong	arg01, fp
11114     3C 4E 85 F1 | 	sub	fp, #60
11118     00 14 06 F6 | 	mov	arg02, #0
1111c     01 16 66 F6 | 	neg	arg03, #1
11120     44 96 B1 FD | 	call	#__system___float_cmp
11124     00 FA 55 F2 | 	cmps	result1, #0 wc
11128     A4 02 90 CD |  if_b	jmp	#LR__1382
1112c                 | '   for i=0 to 1023
1112c     04 4E 05 F1 | 	add	fp, #4
11130     A7 00 68 FC | 	wrlong	#0, fp
11134     04 4E 85 F1 | 	sub	fp, #4
11138                 | LR__1377
11138     24 4E 05 F1 | 	add	fp, #36
1113c     A7 00 68 FC | 	wrlong	#0, fp
11140                 | '     spl=0
11140                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
11140     1C 4E 85 F1 | 	sub	fp, #28
11144     A7 00 68 FC | 	wrlong	#0, fp
11148                 | LR__1378
11148     A7 28 02 FB | 	rdlong	local02, fp
1114c     02 28 66 F0 | 	shl	local02, #2
11150     34 4E 05 F1 | 	add	fp, #52
11154     A7 28 02 F1 | 	add	local02, fp
11158     14 2B 02 FB | 	rdlong	local03, local02
1115c     87 E4 1D FF 
11160     DB 29 06 F6 | 	mov	local02, ##1003032539
11164     38 4E 85 F1 | 	sub	fp, #56
11168     A7 12 02 FB | 	rdlong	arg01, fp
1116c     04 4E 85 F1 | 	sub	fp, #4
11170     09 13 52 F6 | 	abs	arg01, arg01 wc
11174     1F 2C C6 C9 |  if_b	decod	local04, #31
11178     00 2C 06 36 |  if_ae	mov	local04, #0
1117c     B0 8D B1 FD | 	call	#__system___float_fromuns
11180     16 FB 61 F5 | 	xor	result1, local04
11184     FD 14 02 F6 | 	mov	arg02, result1
11188     14 13 02 F6 | 	mov	arg01, local02
1118c     A4 91 B1 FD | 	call	#__system___float_mul
11190     FD 28 02 F6 | 	mov	local02, result1
11194     08 4E 05 F1 | 	add	fp, #8
11198     A7 12 02 FB | 	rdlong	arg01, fp
1119c     08 4E 85 F1 | 	sub	fp, #8
111a0     01 12 06 F1 | 	add	arg01, #1
111a4     09 13 52 F6 | 	abs	arg01, arg01 wc
111a8     1F 2C C6 C9 |  if_b	decod	local04, #31
111ac     00 2C 06 36 |  if_ae	mov	local04, #0
111b0     7C 8D B1 FD | 	call	#__system___float_fromuns
111b4     16 FB 61 F5 | 	xor	result1, local04
111b8     FD 14 02 F6 | 	mov	arg02, result1
111bc     14 13 02 F6 | 	mov	arg01, local02
111c0     70 91 B1 FD | 	call	#__system___float_mul
111c4     FD 12 02 F6 | 	mov	arg01, result1
111c8     C8 9A B1 FD | 	call	#__system____builtin_sinf
111cc     FD 14 02 F6 | 	mov	arg02, result1
111d0     15 13 02 F6 | 	mov	arg01, local03
111d4     5C 91 B1 FD | 	call	#__system___float_mul
111d8     FD 14 02 F6 | 	mov	arg02, result1
111dc     24 4E 05 F1 | 	add	fp, #36
111e0     A7 12 02 FB | 	rdlong	arg01, fp
111e4     24 4E 85 F1 | 	sub	fp, #36
111e8     78 8D B1 FD | 	call	#__system___float_add
111ec     24 4E 05 F1 | 	add	fp, #36
111f0     A7 FA 61 FC | 	wrlong	result1, fp
111f4     1C 4E 85 F1 | 	sub	fp, #28
111f8     A7 16 02 FB | 	rdlong	arg03, fp
111fc     01 16 06 F1 | 	add	arg03, #1
11200     A7 16 62 FC | 	wrlong	arg03, fp
11204     10 16 56 F2 | 	cmps	arg03, #16 wc
11208     3C FF 9F CD |  if_b	jmp	#LR__1378
1120c                 | '     if abs(spl)>max then max=abs(spl)  
1120c     1C 4E 05 F1 | 	add	fp, #28
11210     A7 12 02 FB | 	rdlong	arg01, fp
11214     1F 12 06 F4 | 	bitl	arg01, #31
11218     04 4E 85 F1 | 	sub	fp, #4
1121c     A7 14 02 FB | 	rdlong	arg02, fp
11220     20 4E 85 F1 | 	sub	fp, #32
11224     01 16 66 F6 | 	neg	arg03, #1
11228     3C 95 B1 FD | 	call	#__system___float_cmp
1122c     01 FA 55 F2 | 	cmps	result1, #1 wc
11230     18 00 90 CD |  if_b	jmp	#LR__1379
11234     24 4E 05 F1 | 	add	fp, #36
11238     A7 FA 01 FB | 	rdlong	result1, fp
1123c     1F FA 05 F4 | 	bitl	result1, #31
11240     04 4E 85 F1 | 	sub	fp, #4
11244     A7 FA 61 FC | 	wrlong	result1, fp
11248     20 4E 85 F1 | 	sub	fp, #32
1124c                 | LR__1379
1124c     04 4E 05 F1 | 	add	fp, #4
11250     A7 2A 02 FB | 	rdlong	local03, fp
11254     01 2A 06 F1 | 	add	local03, #1
11258     A7 2A 62 FC | 	wrlong	local03, fp
1125c     04 4E 85 F1 | 	sub	fp, #4
11260     02 00 00 FF 
11264     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11268     CC FE 9F CD |  if_b	jmp	#LR__1377
1126c                 | '   for i=0 to 1023
1126c     04 4E 05 F1 | 	add	fp, #4
11270     A7 00 68 FC | 	wrlong	#0, fp
11274     04 4E 85 F1 | 	sub	fp, #4
11278                 | LR__1380
11278     24 4E 05 F1 | 	add	fp, #36
1127c     A7 00 68 FC | 	wrlong	#0, fp
11280                 | '     spl=0
11280                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
11280     1C 4E 85 F1 | 	sub	fp, #28
11284     A7 00 68 FC | 	wrlong	#0, fp
11288                 | LR__1381
11288     A7 2A 02 FB | 	rdlong	local03, fp
1128c     02 2A 66 F0 | 	shl	local03, #2
11290     34 4E 05 F1 | 	add	fp, #52
11294     A7 2A 02 F1 | 	add	local03, fp
11298     15 2B 02 FB | 	rdlong	local03, local03
1129c     1C 4E 85 F1 | 	sub	fp, #28
112a0     A7 14 02 FB | 	rdlong	arg02, fp
112a4     20 4E 85 F1 | 	sub	fp, #32
112a8     58 7F 23 FF 
112ac     00 12 06 F6 | 	mov	arg01, ##1191096320
112b0     84 92 B1 FD | 	call	#__system___float_div
112b4     FD 14 02 F6 | 	mov	arg02, result1
112b8     15 13 02 F6 | 	mov	arg01, local03
112bc     74 90 B1 FD | 	call	#__system___float_mul
112c0     FD 2A 02 F6 | 	mov	local03, result1
112c4     87 E4 1D FF 
112c8     DB 29 06 F6 | 	mov	local02, ##1003032539
112cc     04 4E 05 F1 | 	add	fp, #4
112d0     A7 12 02 FB | 	rdlong	arg01, fp
112d4     04 4E 85 F1 | 	sub	fp, #4
112d8     09 13 52 F6 | 	abs	arg01, arg01 wc
112dc     1F 2C C6 C9 |  if_b	decod	local04, #31
112e0     00 2C 06 36 |  if_ae	mov	local04, #0
112e4     48 8C B1 FD | 	call	#__system___float_fromuns
112e8     16 FB 61 F5 | 	xor	result1, local04
112ec     FD 14 02 F6 | 	mov	arg02, result1
112f0     14 13 02 F6 | 	mov	arg01, local02
112f4     3C 90 B1 FD | 	call	#__system___float_mul
112f8     FD 28 02 F6 | 	mov	local02, result1
112fc     08 4E 05 F1 | 	add	fp, #8
11300     A7 12 02 FB | 	rdlong	arg01, fp
11304     08 4E 85 F1 | 	sub	fp, #8
11308     01 12 06 F1 | 	add	arg01, #1
1130c     09 13 52 F6 | 	abs	arg01, arg01 wc
11310     1F 2C C6 C9 |  if_b	decod	local04, #31
11314     00 2C 06 36 |  if_ae	mov	local04, #0
11318     14 8C B1 FD | 	call	#__system___float_fromuns
1131c     16 FB 61 F5 | 	xor	result1, local04
11320     FD 14 02 F6 | 	mov	arg02, result1
11324     14 13 02 F6 | 	mov	arg01, local02
11328     08 90 B1 FD | 	call	#__system___float_mul
1132c     FD 12 02 F6 | 	mov	arg01, result1
11330     60 99 B1 FD | 	call	#__system____builtin_sinf
11334     FD 14 02 F6 | 	mov	arg02, result1
11338     15 13 02 F6 | 	mov	arg01, local03
1133c     F4 8F B1 FD | 	call	#__system___float_mul
11340     FD 14 02 F6 | 	mov	arg02, result1
11344     24 4E 05 F1 | 	add	fp, #36
11348     A7 12 02 FB | 	rdlong	arg01, fp
1134c     24 4E 85 F1 | 	sub	fp, #36
11350     10 8C B1 FD | 	call	#__system___float_add
11354     24 4E 05 F1 | 	add	fp, #36
11358     A7 FA 61 FC | 	wrlong	result1, fp
1135c     1C 4E 85 F1 | 	sub	fp, #28
11360     A7 2A 02 FB | 	rdlong	local03, fp
11364     01 2A 06 F1 | 	add	local03, #1
11368     A7 2A 62 FC | 	wrlong	local03, fp
1136c     10 2A 56 F2 | 	cmps	local03, #16 wc
11370     14 FF 9F CD |  if_b	jmp	#LR__1381
11374     08 4E 05 F1 | 	add	fp, #8
11378     A7 2A 02 FB | 	rdlong	local03, fp
1137c     0B 2A 66 F0 | 	shl	local03, #11
11380     0C 4E 85 F1 | 	sub	fp, #12
11384     A7 28 02 FB | 	rdlong	local02, fp
11388     01 28 66 F0 | 	shl	local02, #1
1138c     14 2B 02 F1 | 	add	local03, local02
11390     20 4E 05 F1 | 	add	fp, #32
11394     A7 12 02 FB | 	rdlong	arg01, fp
11398     24 4E 85 F1 | 	sub	fp, #36
1139c     01 14 06 F6 | 	mov	arg02, #1
113a0     58 94 B1 FD | 	call	#__system___float_tointeger
113a4     FD 14 02 F6 | 	mov	arg02, result1
113a8     15 13 02 F6 | 	mov	arg01, local03
113ac     D8 28 B1 FD | 	call	#_psdpoke
113b0     04 4E 05 F1 | 	add	fp, #4
113b4     A7 2A 02 FB | 	rdlong	local03, fp
113b8     01 2A 06 F1 | 	add	local03, #1
113bc     A7 2A 62 FC | 	wrlong	local03, fp
113c0     04 4E 85 F1 | 	sub	fp, #4
113c4     02 00 00 FF 
113c8     00 2A 56 F2 | 	cmps	local03, ##1024 wc
113cc     A8 FE 9F CD |  if_b	jmp	#LR__1380
113d0                 | LR__1382
113d0                 | LR__1383
113d0     A7 F0 03 F6 | 	mov	ptra, fp
113d4     B2 00 A0 FD | 	call	#popregs_
113d8                 | _do_defsnd_ret
113d8     2D 00 64 FD | 	ret
113dc                 | 
113dc                 | ' 
113dc                 | ' '-------------------- defsprite
113dc                 | ' 
113dc                 | ' sub do_defsprite
113dc                 | _do_defsprite
113dc     07 4A 05 F6 | 	mov	COUNT_, #7
113e0     A8 00 A0 FD | 	call	#pushregs_
113e4     60 F0 07 F1 | 	add	ptra, #96
113e8     C0 C3 BF FD | 	call	#_pop
113ec     FD 16 02 F6 | 	mov	arg03, result1
113f0     FE 14 02 F6 | 	mov	arg02, result2
113f4     FF 12 02 F6 | 	mov	arg01, result3
113f8     30 4E 05 F1 | 	add	fp, #48
113fc     A7 16 62 FC | 	wrlong	arg03, fp
11400     04 4E 05 F1 | 	add	fp, #4
11404     A7 14 62 FC | 	wrlong	arg02, fp
11408     04 4E 05 F1 | 	add	fp, #4
1140c     A7 12 62 FC | 	wrlong	arg01, fp
11410     38 4E 85 F1 | 	sub	fp, #56
11414     94 C3 BF FD | 	call	#_pop
11418     FD 16 02 F6 | 	mov	arg03, result1
1141c     FE 14 02 F6 | 	mov	arg02, result2
11420     FF 12 02 F6 | 	mov	arg01, result3
11424     24 4E 05 F1 | 	add	fp, #36
11428     A7 16 62 FC | 	wrlong	arg03, fp
1142c     04 4E 05 F1 | 	add	fp, #4
11430     A7 14 62 FC | 	wrlong	arg02, fp
11434     04 4E 05 F1 | 	add	fp, #4
11438     A7 12 62 FC | 	wrlong	arg01, fp
1143c     2C 4E 85 F1 | 	sub	fp, #44
11440     68 C3 BF FD | 	call	#_pop
11444     FD 16 02 F6 | 	mov	arg03, result1
11448     FE 14 02 F6 | 	mov	arg02, result2
1144c     FF 12 02 F6 | 	mov	arg01, result3
11450     18 4E 05 F1 | 	add	fp, #24
11454     A7 16 62 FC | 	wrlong	arg03, fp
11458     04 4E 05 F1 | 	add	fp, #4
1145c     A7 14 62 FC | 	wrlong	arg02, fp
11460     04 4E 05 F1 | 	add	fp, #4
11464     A7 12 62 FC | 	wrlong	arg01, fp
11468     20 4E 85 F1 | 	sub	fp, #32
1146c     3C C3 BF FD | 	call	#_pop
11470     FD 16 02 F6 | 	mov	arg03, result1
11474     FE 14 02 F6 | 	mov	arg02, result2
11478     FF 12 02 F6 | 	mov	arg01, result3
1147c     0C 4E 05 F1 | 	add	fp, #12
11480     A7 16 62 FC | 	wrlong	arg03, fp
11484     04 4E 05 F1 | 	add	fp, #4
11488     A7 14 62 FC | 	wrlong	arg02, fp
1148c     04 4E 05 F1 | 	add	fp, #4
11490     A7 12 62 FC | 	wrlong	arg01, fp
11494     14 4E 85 F1 | 	sub	fp, #20
11498     10 C3 BF FD | 	call	#_pop
1149c     FF 16 02 F6 | 	mov	arg03, result3
114a0     A7 FA 61 FC | 	wrlong	result1, fp
114a4     04 4E 05 F1 | 	add	fp, #4
114a8     A7 FC 61 FC | 	wrlong	result2, fp
114ac     04 4E 05 F1 | 	add	fp, #4
114b0     A7 16 62 FC | 	wrlong	arg03, fp
114b4     08 4E 85 F1 | 	sub	fp, #8
114b8     A7 12 02 F6 | 	mov	arg01, fp
114bc     D0 C4 BF FD | 	call	#_converttoint
114c0     3C 4E 05 F1 | 	add	fp, #60
114c4     A7 FA 61 FC | 	wrlong	result1, fp
114c8     30 4E 85 F1 | 	sub	fp, #48
114cc     A7 12 02 F6 | 	mov	arg01, fp
114d0     0C 4E 85 F1 | 	sub	fp, #12
114d4     B8 C4 BF FD | 	call	#_converttoint
114d8     40 4E 05 F1 | 	add	fp, #64
114dc     A7 FA 61 FC | 	wrlong	result1, fp
114e0     28 4E 85 F1 | 	sub	fp, #40
114e4     A7 12 02 F6 | 	mov	arg01, fp
114e8     18 4E 85 F1 | 	sub	fp, #24
114ec     A0 C4 BF FD | 	call	#_converttoint
114f0     44 4E 05 F1 | 	add	fp, #68
114f4     A7 FA 61 FC | 	wrlong	result1, fp
114f8     20 4E 85 F1 | 	sub	fp, #32
114fc     A7 12 02 F6 | 	mov	arg01, fp
11500     24 4E 85 F1 | 	sub	fp, #36
11504     88 C4 BF FD | 	call	#_converttoint
11508     48 4E 05 F1 | 	add	fp, #72
1150c     A7 FA 61 FC | 	wrlong	result1, fp
11510     18 4E 85 F1 | 	sub	fp, #24
11514     A7 12 02 F6 | 	mov	arg01, fp
11518     30 4E 85 F1 | 	sub	fp, #48
1151c     70 C4 BF FD | 	call	#_converttoint
11520     4C 4E 05 F1 | 	add	fp, #76
11524     A7 FA 61 FC | 	wrlong	result1, fp
11528                 | ' 
11528                 | ' t5=pop()
11528                 | ' t4=pop()
11528                 | ' t3=pop()
11528                 | ' t2=pop()
11528                 | ' t1=pop()
11528                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
11528                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
11528     10 4E 85 F1 | 	sub	fp, #16
1152c     A7 16 02 FB | 	rdlong	arg03, fp
11530     3C 4E 85 F1 | 	sub	fp, #60
11534     02 16 66 F0 | 	shl	arg03, #2
11538     52 00 00 FF 
1153c     8C E4 05 F1 | 	add	objptr, ##42124
11540     F2 16 02 F1 | 	add	arg03, objptr
11544     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11548     52 00 00 FF 
1154c     8C E4 85 F1 | 	sub	objptr, ##42124
11550     2C 00 90 AD |  if_e	jmp	#LR__1390
11554     3C 4E 05 F1 | 	add	fp, #60
11558     A7 16 02 FB | 	rdlong	arg03, fp
1155c     3C 4E 85 F1 | 	sub	fp, #60
11560     02 16 66 F0 | 	shl	arg03, #2
11564     52 00 00 FF 
11568     8C E4 05 F1 | 	add	objptr, ##42124
1156c     F2 16 02 F1 | 	add	arg03, objptr
11570     0B 13 02 FB | 	rdlong	arg01, arg03
11574     52 00 00 FF 
11578     8C E4 85 F1 | 	sub	objptr, ##42124
1157c     18 A2 B1 FD | 	call	#__system___gc_free
11580                 | LR__1390
11580     3C 4E 05 F1 | 	add	fp, #60
11584     A7 26 02 FB | 	rdlong	local01, fp
11588     0C 4E 05 F1 | 	add	fp, #12
1158c     A7 16 02 FB | 	rdlong	arg03, fp
11590     04 4E 05 F1 | 	add	fp, #4
11594     A7 14 02 FB | 	rdlong	arg02, fp
11598     0A 17 02 FD | 	qmul	arg03, arg02
1159c     02 26 66 F0 | 	shl	local01, #2
115a0     52 00 00 FF 
115a4     8C E4 05 F1 | 	add	objptr, ##42124
115a8     F2 26 02 F1 | 	add	local01, objptr
115ac     4C 4E 85 F1 | 	sub	fp, #76
115b0     52 00 00 FF 
115b4     8C E4 85 F1 | 	sub	objptr, ##42124
115b8     18 12 62 FD | 	getqx	arg01
115bc     9C A0 B1 FD | 	call	#__system___gc_alloc_managed
115c0     13 FB 61 FC | 	wrlong	result1, local01
115c4                 | ' for y=a3 to a3+a5-1
115c4     44 4E 05 F1 | 	add	fp, #68
115c8     A7 28 02 FB | 	rdlong	local02, fp
115cc     0C 4E 05 F1 | 	add	fp, #12
115d0     A7 28 62 FC | 	wrlong	local02, fp
115d4     0C 4E 85 F1 | 	sub	fp, #12
115d8     A7 2A 02 FB | 	rdlong	local03, fp
115dc     08 4E 05 F1 | 	add	fp, #8
115e0     A7 2C 02 FB | 	rdlong	local04, fp
115e4     4C 4E 85 F1 | 	sub	fp, #76
115e8     16 2B 02 F1 | 	add	local03, local04
115ec                 | LR__1391
115ec     50 4E 05 F1 | 	add	fp, #80
115f0     A7 28 02 FB | 	rdlong	local02, fp
115f4     50 4E 85 F1 | 	sub	fp, #80
115f8     15 29 52 F2 | 	cmps	local02, local03 wc
115fc     F4 00 90 3D |  if_ae	jmp	#LR__1394
11600                 | '   for x=a2 to a4+a2-1
11600     40 4E 05 F1 | 	add	fp, #64
11604     A7 26 02 FB | 	rdlong	local01, fp
11608     14 4E 05 F1 | 	add	fp, #20
1160c     A7 26 62 FC | 	wrlong	local01, fp
11610     0C 4E 85 F1 | 	sub	fp, #12
11614     A7 2E 02 FB | 	rdlong	local05, fp
11618     08 4E 85 F1 | 	sub	fp, #8
1161c     A7 30 02 FB | 	rdlong	local06, fp
11620     40 4E 85 F1 | 	sub	fp, #64
11624     18 2F 02 F1 | 	add	local05, local06
11628                 | LR__1392
11628     54 4E 05 F1 | 	add	fp, #84
1162c     A7 26 02 FB | 	rdlong	local01, fp
11630     54 4E 85 F1 | 	sub	fp, #84
11634     17 27 52 F2 | 	cmps	local01, local05 wc
11638     A0 00 90 3D |  if_ae	jmp	#LR__1393
1163c     3C 4E 05 F1 | 	add	fp, #60
11640     A7 30 02 FB | 	rdlong	local06, fp
11644     18 4E 05 F1 | 	add	fp, #24
11648     A7 2C 02 FB | 	rdlong	local04, fp
1164c     14 4E 85 F1 | 	sub	fp, #20
11650     A7 28 02 FB | 	rdlong	local02, fp
11654     10 4E 05 F1 | 	add	fp, #16
11658     A7 26 02 FB | 	rdlong	local01, fp
1165c     13 17 02 F6 | 	mov	arg03, local01
11660     0C 4E 85 F1 | 	sub	fp, #12
11664     A7 14 02 FB | 	rdlong	arg02, fp
11668     0A 17 82 F1 | 	sub	arg03, arg02
1166c     04 4E 05 F1 | 	add	fp, #4
11670     A7 14 02 FB | 	rdlong	arg02, fp
11674     0A 17 02 FD | 	qmul	arg03, arg02
11678     02 30 66 F0 | 	shl	local06, #2
1167c     52 00 00 FF 
11680     8C E4 05 F1 | 	add	objptr, ##42124
11684     F2 30 02 F1 | 	add	local06, objptr
11688     18 31 02 FB | 	rdlong	local06, local06
1168c     16 33 02 F6 | 	mov	local07, local04
11690     14 33 82 F1 | 	sub	local07, local02
11694     52 00 00 FF 
11698     8C E4 85 F1 | 	sub	objptr, ##42124
1169c     F2 12 02 FB | 	rdlong	arg01, objptr
116a0     16 13 02 F1 | 	add	arg01, local04
116a4     48 4E 85 F1 | 	sub	fp, #72
116a8     0A 26 66 F0 | 	shl	local01, #10
116ac     13 13 02 F1 | 	add	arg01, local01
116b0     18 2C 62 FD | 	getqx	local04
116b4     16 33 02 F1 | 	add	local07, local04
116b8     18 33 02 F1 | 	add	local07, local06
116bc     58 26 B1 FD | 	call	#_pspeek
116c0     19 FB 41 FC | 	wrbyte	result1, local07
116c4     54 4E 05 F1 | 	add	fp, #84
116c8     A7 32 02 FB | 	rdlong	local07, fp
116cc     01 32 06 F1 | 	add	local07, #1
116d0     A7 32 62 FC | 	wrlong	local07, fp
116d4     54 4E 85 F1 | 	sub	fp, #84
116d8     4C FF 9F FD | 	jmp	#LR__1392
116dc                 | LR__1393
116dc     50 4E 05 F1 | 	add	fp, #80
116e0     A7 32 02 FB | 	rdlong	local07, fp
116e4     01 32 06 F1 | 	add	local07, #1
116e8     A7 32 62 FC | 	wrlong	local07, fp
116ec     50 4E 85 F1 | 	sub	fp, #80
116f0     F8 FE 9F FD | 	jmp	#LR__1391
116f4                 | LR__1394
116f4     3C 4E 05 F1 | 	add	fp, #60
116f8     A7 32 02 FB | 	rdlong	local07, fp
116fc     19 13 02 F6 | 	mov	arg01, local07
11700     3C 4E 85 F1 | 	sub	fp, #60
11704     02 32 66 F0 | 	shl	local07, #2
11708     52 00 00 FF 
1170c     8C E4 05 F1 | 	add	objptr, ##42124
11710     F2 32 02 F1 | 	add	local07, objptr
11714     19 15 02 FB | 	rdlong	arg02, local07
11718     52 00 00 FF 
1171c     8C E4 85 F1 | 	sub	objptr, ##42124
11720     58 33 B1 FD | 	call	#_hg010b_spin2_setspriteptr
11724     3C 4E 05 F1 | 	add	fp, #60
11728     A7 12 02 FB | 	rdlong	arg01, fp
1172c     0C 4E 05 F1 | 	add	fp, #12
11730     A7 14 02 FB | 	rdlong	arg02, fp
11734     04 4E 05 F1 | 	add	fp, #4
11738     A7 16 02 FB | 	rdlong	arg03, fp
1173c     4C 4E 85 F1 | 	sub	fp, #76
11740     C8 33 B1 FD | 	call	#_hg010b_spin2_setspritesize
11744     A7 F0 03 F6 | 	mov	ptra, fp
11748     B2 00 A0 FD | 	call	#popregs_
1174c                 | _do_defsprite_ret
1174c     2D 00 64 FD | 	ret
11750                 | 
11750                 | ' 
11750                 | ' '-------------------- deg
11750                 | ' 
11750                 | ' sub do_deg
11750                 | _do_deg
11750     52 00 00 FF 
11754     E0 E4 05 F1 | 	add	objptr, ##42208
11758     7D 47 9E FF 
1175c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
11760     04 E4 05 F1 | 	add	objptr, #4
11764     97 32 A1 FF 
11768     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1176c     52 00 00 FF 
11770     E4 E4 85 F1 | 	sub	objptr, ##42212
11774                 | _do_deg_ret
11774     2D 00 64 FD | 	ret
11778                 | 
11778                 | ' 
11778                 | ' '-------------------- delete
11778                 | ' 
11778                 | ' sub do_delete
11778                 | _do_delete
11778     05 4A 05 F6 | 	mov	COUNT_, #5
1177c     A8 00 A0 FD | 	call	#pushregs_
11780     28 C0 BF FD | 	call	#_pop
11784     FE 18 02 F6 | 	mov	arg04, result2
11788     FF 16 02 F6 | 	mov	arg03, result3
1178c     FD 26 02 F6 | 	mov	local01, result1
11790     0C 29 02 F6 | 	mov	local02, arg04
11794     0B 2B 02 F6 | 	mov	local03, arg03
11798                 | ' 
11798                 | ' t1=pop()
11798                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11798     2B 2A 0E F2 | 	cmp	local03, #43 wz
1179c     10 00 90 5D |  if_ne	jmp	#LR__1400
117a0     13 13 02 F6 | 	mov	arg01, local01
117a4     7C C1 BF FD | 	call	#_convertstring
117a8     FD 26 02 F6 | 	mov	local01, result1
117ac     1F 2A 06 F6 | 	mov	local03, #31
117b0                 | LR__1400
117b0                 | ' if t1.result_type<>result_string then printerror(15): return
117b0     1F 2A 0E F2 | 	cmp	local03, #31 wz
117b4     10 00 90 AD |  if_e	jmp	#LR__1401
117b8     0F 12 06 F6 | 	mov	arg01, #15
117bc     00 14 06 F6 | 	mov	arg02, #0
117c0     DC 22 B1 FD | 	call	#_printerror
117c4     E4 00 90 FD | 	jmp	#LR__1405
117c8                 | LR__1401
117c8                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
117c8     4A 00 00 FF 
117cc     94 E4 05 F1 | 	add	objptr, ##38036
117d0     F2 12 02 FB | 	rdlong	arg01, objptr
117d4     4A 00 00 FF 
117d8     94 E4 85 F1 | 	sub	objptr, ##38036
117dc     BC 01 00 FF 
117e0     12 15 06 F6 | 	mov	arg02, ##@LR__5956
117e4     F8 5C B1 FD | 	call	#__system___string_cmp
117e8     00 FA 0D F2 | 	cmp	result1, #0 wz
117ec     34 00 90 AD |  if_e	jmp	#LR__1402
117f0     4A 00 00 FF 
117f4     94 E4 05 F1 | 	add	objptr, ##38036
117f8     F2 12 02 FB | 	rdlong	arg01, objptr
117fc     4A 00 00 FF 
11800     94 E4 85 F1 | 	sub	objptr, ##38036
11804     BC 01 00 FF 
11808     14 15 06 F6 | 	mov	arg02, ##@LR__5957
1180c     04 5D B1 FD | 	call	#__system___string_concat
11810     FD 12 02 F6 | 	mov	arg01, result1
11814     13 15 02 F6 | 	mov	arg02, local01
11818     F8 5C B1 FD | 	call	#__system___string_concat
1181c     FD 2C 02 F6 | 	mov	local04, result1
11820     14 00 90 FD | 	jmp	#LR__1403
11824                 | LR__1402
11824     BC 01 00 FF 
11828     16 13 06 F6 | 	mov	arg01, ##@LR__5958
1182c     13 15 02 F6 | 	mov	arg02, local01
11830     E0 5C B1 FD | 	call	#__system___string_concat
11834     FD 2C 02 F6 | 	mov	local04, result1
11838                 | LR__1403
11838     16 13 02 F6 | 	mov	arg01, local04
1183c     48 84 B1 FD | 	call	#__system___remove
11840     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11844     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11848     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
1184c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11850     FD 2E 0A F6 | 	mov	local05, result1 wz
11854                 | ' kill filename$
11854                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
11854     54 00 90 AD |  if_e	jmp	#LR__1404
11858     00 12 06 F6 | 	mov	arg01, #0
1185c     FC B8 B1 FD | 	call	#__system___getiolock_0616
11860     FD 12 02 F6 | 	mov	arg01, result1
11864     50 5C B1 FD | 	call	#__system___lockmem
11868     BC 01 00 FF 
1186c     18 15 06 F6 | 	mov	arg02, ##@LR__5959
11870     00 12 06 F6 | 	mov	arg01, #0
11874     00 16 06 F6 | 	mov	arg03, #0
11878     34 69 B1 FD | 	call	#__system___basic_print_string
1187c     00 12 06 F6 | 	mov	arg01, #0
11880     17 15 02 F6 | 	mov	arg02, local05
11884     00 16 06 F6 | 	mov	arg03, #0
11888     0A 18 06 F6 | 	mov	arg04, #10
1188c     64 69 B1 FD | 	call	#__system___basic_print_integer
11890     00 12 06 F6 | 	mov	arg01, #0
11894     0A 14 06 F6 | 	mov	arg02, #10
11898     00 16 06 F6 | 	mov	arg03, #0
1189c     B8 68 B1 FD | 	call	#__system___basic_print_char
118a0     00 12 06 F6 | 	mov	arg01, #0
118a4     B4 B8 B1 FD | 	call	#__system___getiolock_0616
118a8     FD 00 68 FC | 	wrlong	#0, result1
118ac                 | LR__1404
118ac                 | LR__1405
118ac     A7 F0 03 F6 | 	mov	ptra, fp
118b0     B2 00 A0 FD | 	call	#popregs_
118b4                 | _do_delete_ret
118b4     2D 00 64 FD | 	ret
118b8                 | 
118b8                 | ' 
118b8                 | ' '-------------------- dir
118b8                 | ' 
118b8                 | ' sub do_dir
118b8                 | _do_dir
118b8     13 4A 05 F6 | 	mov	COUNT_, #19
118bc     A8 00 A0 FD | 	call	#pushregs_
118c0     01 00 00 FF 
118c4     38 F0 07 F1 | 	add	ptra, ##568
118c8                 | ' 
118c8                 | ' print "Current directory: "; currentdir$ 
118c8     00 12 06 F6 | 	mov	arg01, #0
118cc     8C B8 B1 FD | 	call	#__system___getiolock_0616
118d0     FD 12 02 F6 | 	mov	arg01, result1
118d4     E0 5B B1 FD | 	call	#__system___lockmem
118d8     BC 01 00 FF 
118dc     50 15 06 F6 | 	mov	arg02, ##@LR__5960
118e0     00 12 06 F6 | 	mov	arg01, #0
118e4     00 16 06 F6 | 	mov	arg03, #0
118e8     C4 68 B1 FD | 	call	#__system___basic_print_string
118ec     4A 00 00 FF 
118f0     94 E4 05 F1 | 	add	objptr, ##38036
118f4     F2 14 02 FB | 	rdlong	arg02, objptr
118f8     4A 00 00 FF 
118fc     94 E4 85 F1 | 	sub	objptr, ##38036
11900     00 12 06 F6 | 	mov	arg01, #0
11904     00 16 06 F6 | 	mov	arg03, #0
11908     A4 68 B1 FD | 	call	#__system___basic_print_string
1190c     00 12 06 F6 | 	mov	arg01, #0
11910     0A 14 06 F6 | 	mov	arg02, #10
11914     00 16 06 F6 | 	mov	arg03, #0
11918     3C 68 B1 FD | 	call	#__system___basic_print_char
1191c     01 26 06 F6 | 	mov	local01, #1
11920     00 12 06 F6 | 	mov	arg01, #0
11924     34 B8 B1 FD | 	call	#__system___getiolock_0616
11928     FD 00 68 FC | 	wrlong	#0, result1
1192c     00 28 06 F6 | 	mov	local02, #0
11930     00 2A 06 F6 | 	mov	local03, #0
11934                 | ' px=0
11934                 | ' for i=0 to 127: filelist(i)="" : next i
11934     00 2C 06 F6 | 	mov	local04, #0
11938     1C 4E 05 F1 | 	add	fp, #28
1193c     97 12 48 FB | 	callpa	#(@LR__1411-@LR__1410)>>2,fcache_load_ptr_
11940                 | LR__1410
11940     16 2F 02 F6 | 	mov	local05, local04
11944     02 2E 66 F0 | 	shl	local05, #2
11948     A7 2E 02 F1 | 	add	local05, fp
1194c     BC 01 00 FF 
11950     64 31 06 F6 | 	mov	local06, ##@LR__5961
11954     17 31 62 FC | 	wrlong	local06, local05
11958     01 2C 06 F1 | 	add	local04, #1
1195c     80 2C 56 F2 | 	cmps	local04, #128 wc
11960     DC FF 9F CD |  if_b	jmp	#LR__1410
11964                 | LR__1411
11964     1C 4E 85 F1 | 	sub	fp, #28
11968     BC 01 00 FF 
1196c     65 13 06 F6 | 	mov	arg01, ##@LR__5962
11970     10 14 06 F6 | 	mov	arg02, #16
11974     A4 B9 B1 FD | 	call	#__system___basic_dir
11978     FD 32 02 F6 | 	mov	local07, result1
1197c     00 34 06 F6 | 	mov	local08, #0
11980                 | ' filename=dir$("*", fbDirectory)
11980                 | ' n=0
11980                 | ' while filename <> "" andalso filename <> nil andalso n<128
11980                 | LR__1412
11980     BC 01 00 FF 
11984     67 37 06 F6 | 	mov	local09, ##@LR__5963
11988     19 13 02 F6 | 	mov	arg01, local07
1198c     1B 15 02 F6 | 	mov	arg02, local09
11990     4C 5B B1 FD | 	call	#__system___string_cmp
11994     00 FA 0D F2 | 	cmp	result1, #0 wz
11998     68 00 90 AD |  if_e	jmp	#LR__1413
1199c     00 36 06 F6 | 	mov	local09, #0
119a0     19 13 02 F6 | 	mov	arg01, local07
119a4     00 14 06 F6 | 	mov	arg02, #0
119a8     34 5B B1 FD | 	call	#__system___string_cmp
119ac     00 FA 0D F2 | 	cmp	result1, #0 wz
119b0     50 00 90 AD |  if_e	jmp	#LR__1413
119b4     80 34 56 F2 | 	cmps	local08, #128 wc
119b8     48 00 90 3D |  if_ae	jmp	#LR__1413
119bc     BC 01 00 FF 
119c0     68 13 06 F6 | 	mov	arg01, ##@LR__5964
119c4     19 15 02 F6 | 	mov	arg02, local07
119c8     48 5B B1 FD | 	call	#__system___string_concat
119cc     FD 32 02 F6 | 	mov	local07, result1
119d0     1A 2F 02 F6 | 	mov	local05, local08
119d4     02 2E 66 F0 | 	shl	local05, #2
119d8     1C 4E 05 F1 | 	add	fp, #28
119dc     A7 2E 02 F1 | 	add	local05, fp
119e0     17 33 62 FC | 	wrlong	local07, local05
119e4     01 34 06 F1 | 	add	local08, #1
119e8     00 2E 06 F6 | 	mov	local05, #0
119ec     00 12 06 F6 | 	mov	arg01, #0
119f0     00 14 06 F6 | 	mov	arg02, #0
119f4     1C 4E 85 F1 | 	sub	fp, #28
119f8     20 B9 B1 FD | 	call	#__system___basic_dir
119fc     FD 32 02 F6 | 	mov	local07, result1
11a00     7C FF 9F FD | 	jmp	#LR__1412
11a04                 | LR__1413
11a04                 | ' for i=0 to n-1			' now sort this
11a04     00 2C 06 F6 | 	mov	local04, #0
11a08     1A 39 02 F6 | 	mov	local10, local08
11a0c                 | LR__1414
11a0c     1C 2D 52 F2 | 	cmps	local04, local10 wc
11a10     DC 00 90 3D |  if_ae	jmp	#LR__1418
11a14     00 3A 06 F6 | 	mov	local11, #0
11a18                 | '   swapped=false
11a18                 | '   for j=0 to n-i-2
11a18     00 3C 06 F6 | 	mov	local12, #0
11a1c     1A 3F 02 F6 | 	mov	local13, local08
11a20     16 3F 82 F1 | 	sub	local13, local04
11a24     01 3E 86 F1 | 	sub	local13, #1
11a28                 | LR__1415
11a28     1F 3D 52 F2 | 	cmps	local12, local13 wc
11a2c     B0 00 90 3D |  if_ae	jmp	#LR__1417
11a30                 | '     if filelist(j) > filelist(j+1) then
11a30     1E 37 02 F6 | 	mov	local09, local12
11a34     02 36 66 F0 | 	shl	local09, #2
11a38     1C 4E 05 F1 | 	add	fp, #28
11a3c     A7 36 02 F1 | 	add	local09, fp
11a40     1B 13 02 FB | 	rdlong	arg01, local09
11a44     1E 37 02 F6 | 	mov	local09, local12
11a48     01 36 06 F1 | 	add	local09, #1
11a4c     1B 31 02 F6 | 	mov	local06, local09
11a50     02 30 66 F0 | 	shl	local06, #2
11a54     A7 26 02 F6 | 	mov	local01, fp
11a58     A7 30 02 F1 | 	add	local06, fp
11a5c     18 2F 02 FB | 	rdlong	local05, local06
11a60     17 15 02 F6 | 	mov	arg02, local05
11a64     1C 4E 85 F1 | 	sub	fp, #28
11a68     74 5A B1 FD | 	call	#__system___string_cmp
11a6c     01 FA 55 F2 | 	cmps	result1, #1 wc
11a70     64 00 90 CD |  if_b	jmp	#LR__1416
11a74     1E 37 02 F6 | 	mov	local09, local12
11a78     01 36 06 F1 | 	add	local09, #1
11a7c     02 36 66 F0 | 	shl	local09, #2
11a80     1C 4E 05 F1 | 	add	fp, #28
11a84     A7 36 02 F1 | 	add	local09, fp
11a88     1B 3B 02 FB | 	rdlong	local11, local09
11a8c     1E 31 02 F6 | 	mov	local06, local12
11a90     02 30 66 F0 | 	shl	local06, #2
11a94     A7 30 02 F1 | 	add	local06, fp
11a98     18 2F 02 FB | 	rdlong	local05, local06
11a9c     1E 37 02 F6 | 	mov	local09, local12
11aa0     1B 31 02 F6 | 	mov	local06, local09
11aa4     02 30 66 F0 | 	shl	local06, #2
11aa8     A7 26 02 F6 | 	mov	local01, fp
11aac     A7 30 02 F1 | 	add	local06, fp
11ab0     18 3B 62 FC | 	wrlong	local11, local06
11ab4     1E 29 02 F6 | 	mov	local02, local12
11ab8     01 28 06 F1 | 	add	local02, #1
11abc     14 41 02 F6 | 	mov	local14, local02
11ac0     02 40 66 F0 | 	shl	local14, #2
11ac4     A7 42 02 F6 | 	mov	local15, fp
11ac8     A7 40 02 F1 | 	add	local14, fp
11acc     20 2F 62 FC | 	wrlong	local05, local14
11ad0     01 3A 66 F6 | 	neg	local11, #1
11ad4     1C 4E 85 F1 | 	sub	fp, #28
11ad8                 | LR__1416
11ad8     01 3C 06 F1 | 	add	local12, #1
11adc     48 FF 9F FD | 	jmp	#LR__1415
11ae0                 | LR__1417
11ae0                 | ' if not swapped then exit for
11ae0     1D 45 22 F6 | 	not	local16, local11
11ae4     00 44 0E F2 | 	cmp	local16, #0 wz
11ae8     01 2C 06 A1 |  if_e	add	local04, #1
11aec     1C FF 9F AD |  if_e	jmp	#LR__1414
11af0                 | LR__1418
11af0                 | ' for i=0 to n-1
11af0     00 2C 06 F6 | 	mov	local04, #0
11af4     1A 47 02 F6 | 	mov	local17, local08
11af8                 | LR__1419
11af8     23 2D 52 F2 | 	cmps	local04, local17 wc
11afc     94 00 90 3D |  if_ae	jmp	#LR__1421
11b00                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11b00     00 12 06 F6 | 	mov	arg01, #0
11b04     54 B6 B1 FD | 	call	#__system___getiolock_0616
11b08     FD 12 02 F6 | 	mov	arg01, result1
11b0c     A8 59 B1 FD | 	call	#__system___lockmem
11b10     16 29 02 F6 | 	mov	local02, local04
11b14     02 28 66 F0 | 	shl	local02, #2
11b18     1C 4E 05 F1 | 	add	fp, #28
11b1c     A7 40 02 F6 | 	mov	local14, fp
11b20     A7 28 02 F1 | 	add	local02, fp
11b24     14 15 02 FB | 	rdlong	arg02, local02
11b28     00 26 06 F6 | 	mov	local01, #0
11b2c     00 12 06 F6 | 	mov	arg01, #0
11b30     00 16 06 F6 | 	mov	arg03, #0
11b34     1C 4E 85 F1 | 	sub	fp, #28
11b38     74 66 B1 FD | 	call	#__system___basic_print_string
11b3c     00 12 06 F6 | 	mov	arg01, #0
11b40     18 B6 B1 FD | 	call	#__system___getiolock_0616
11b44     FD 00 68 FC | 	wrlong	#0, result1
11b48     40 2A 06 F1 | 	add	local03, #64
11b4c     15 13 02 F6 | 	mov	arg01, local03
11b50     04 3C B1 FD | 	call	#_hg010b_spin2_setcursorx
11b54     00 2B 56 F2 | 	cmps	local03, #256 wc
11b58     30 00 90 CD |  if_b	jmp	#LR__1420
11b5c     00 2A 06 F6 | 	mov	local03, #0
11b60     00 12 06 F6 | 	mov	arg01, #0
11b64     F4 B5 B1 FD | 	call	#__system___getiolock_0616
11b68     FD 12 02 F6 | 	mov	arg01, result1
11b6c     48 59 B1 FD | 	call	#__system___lockmem
11b70     00 12 06 F6 | 	mov	arg01, #0
11b74     0A 14 06 F6 | 	mov	arg02, #10
11b78     00 16 06 F6 | 	mov	arg03, #0
11b7c     D8 65 B1 FD | 	call	#__system___basic_print_char
11b80     00 12 06 F6 | 	mov	arg01, #0
11b84     D4 B5 B1 FD | 	call	#__system___getiolock_0616
11b88     FD 00 68 FC | 	wrlong	#0, result1
11b8c                 | LR__1420
11b8c     01 2C 06 F1 | 	add	local04, #1
11b90     64 FF 9F FD | 	jmp	#LR__1419
11b94                 | LR__1421
11b94                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11b94     80 34 56 F2 | 	cmps	local08, #128 wc
11b98     44 00 90 CD |  if_b	jmp	#LR__1422
11b9c     00 12 06 F6 | 	mov	arg01, #0
11ba0     B8 B5 B1 FD | 	call	#__system___getiolock_0616
11ba4     FD 12 02 F6 | 	mov	arg01, result1
11ba8     0C 59 B1 FD | 	call	#__system___lockmem
11bac     BC 01 00 FF 
11bb0     6F 15 06 F6 | 	mov	arg02, ##@LR__5965
11bb4     00 12 06 F6 | 	mov	arg01, #0
11bb8     00 16 06 F6 | 	mov	arg03, #0
11bbc     F0 65 B1 FD | 	call	#__system___basic_print_string
11bc0     00 12 06 F6 | 	mov	arg01, #0
11bc4     0A 14 06 F6 | 	mov	arg02, #10
11bc8     00 16 06 F6 | 	mov	arg03, #0
11bcc     88 65 B1 FD | 	call	#__system___basic_print_char
11bd0     00 12 06 F6 | 	mov	arg01, #0
11bd4     84 B5 B1 FD | 	call	#__system___getiolock_0616
11bd8     FD 00 68 FC | 	wrlong	#0, result1
11bdc     00 26 06 F6 | 	mov	local01, #0
11be0                 | LR__1422
11be0                 | ' print
11be0     00 12 06 F6 | 	mov	arg01, #0
11be4     74 B5 B1 FD | 	call	#__system___getiolock_0616
11be8     FD 12 02 F6 | 	mov	arg01, result1
11bec     C8 58 B1 FD | 	call	#__system___lockmem
11bf0     00 12 06 F6 | 	mov	arg01, #0
11bf4     0A 14 06 F6 | 	mov	arg02, #10
11bf8     00 16 06 F6 | 	mov	arg03, #0
11bfc     58 65 B1 FD | 	call	#__system___basic_print_char
11c00     00 12 06 F6 | 	mov	arg01, #0
11c04     54 B5 B1 FD | 	call	#__system___getiolock_0616
11c08     FD 00 68 FC | 	wrlong	#0, result1
11c0c     00 30 06 F6 | 	mov	local06, #0
11c10     00 34 06 F6 | 	mov	local08, #0
11c14     00 2A 06 F6 | 	mov	local03, #0
11c18                 | ' return cursor_y
11c18     3E E4 05 F1 | 	add	objptr, #62
11c1c     F2 48 C2 FA | 	rdbyte	local18, objptr
11c20     3E E4 85 F1 | 	sub	objptr, #62
11c24     BC 01 00 FF 
11c28     A1 13 06 F6 | 	mov	arg01, ##@LR__5966
11c2c     21 14 06 F6 | 	mov	arg02, #33
11c30     E8 B6 B1 FD | 	call	#__system___basic_dir
11c34     FD 32 02 F6 | 	mov	local07, result1
11c38                 | ' n=0
11c38                 | ' px=0: py=v.getcursory()
11c38                 | ' filename = dir$("*", fbNormal )   
11c38                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11c38                 | LR__1423
11c38     BC 01 00 FF 
11c3c     A3 37 06 F6 | 	mov	local09, ##@LR__5967
11c40     19 13 02 F6 | 	mov	arg01, local07
11c44     1B 15 02 F6 | 	mov	arg02, local09
11c48     94 58 B1 FD | 	call	#__system___string_cmp
11c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
11c50     54 00 90 AD |  if_e	jmp	#LR__1424
11c54     00 36 06 F6 | 	mov	local09, #0
11c58     19 13 02 F6 | 	mov	arg01, local07
11c5c     00 14 06 F6 | 	mov	arg02, #0
11c60     7C 58 B1 FD | 	call	#__system___string_cmp
11c64     00 FA 0D F2 | 	cmp	result1, #0 wz
11c68     3C 00 90 AD |  if_e	jmp	#LR__1424
11c6c     80 34 56 F2 | 	cmps	local08, #128 wc
11c70     34 00 90 3D |  if_ae	jmp	#LR__1424
11c74     1A 2F 02 F6 | 	mov	local05, local08
11c78     02 2E 66 F0 | 	shl	local05, #2
11c7c     1C 4E 05 F1 | 	add	fp, #28
11c80     A7 2E 02 F1 | 	add	local05, fp
11c84     17 33 62 FC | 	wrlong	local07, local05
11c88     01 34 06 F1 | 	add	local08, #1
11c8c     00 2E 06 F6 | 	mov	local05, #0
11c90     00 12 06 F6 | 	mov	arg01, #0
11c94     00 14 06 F6 | 	mov	arg02, #0
11c98     1C 4E 85 F1 | 	sub	fp, #28
11c9c     7C B6 B1 FD | 	call	#__system___basic_dir
11ca0     FD 32 02 F6 | 	mov	local07, result1
11ca4     90 FF 9F FD | 	jmp	#LR__1423
11ca8                 | LR__1424
11ca8                 | ' for i =0 to n-1
11ca8     00 2C 06 F6 | 	mov	local04, #0
11cac                 | LR__1425
11cac     1A 2D 52 F2 | 	cmps	local04, local08 wc
11cb0     D8 00 90 3D |  if_ae	jmp	#LR__1429
11cb4     00 3A 06 F6 | 	mov	local11, #0
11cb8                 | '   swapped=false
11cb8                 | '   for j=0 to n-i-2
11cb8     00 3C 06 F6 | 	mov	local12, #0
11cbc     1A 4B 02 F6 | 	mov	local19, local08
11cc0     16 4B 82 F1 | 	sub	local19, local04
11cc4     01 4A 86 F1 | 	sub	local19, #1
11cc8                 | LR__1426
11cc8     25 3D 52 F2 | 	cmps	local12, local19 wc
11ccc     AC 00 90 3D |  if_ae	jmp	#LR__1428
11cd0                 | '     if filelist(j) > filelist(j+1) then
11cd0     1E 37 02 F6 | 	mov	local09, local12
11cd4     02 36 66 F0 | 	shl	local09, #2
11cd8     1C 4E 05 F1 | 	add	fp, #28
11cdc     A7 36 02 F1 | 	add	local09, fp
11ce0     1B 13 02 FB | 	rdlong	arg01, local09
11ce4     1E 37 02 F6 | 	mov	local09, local12
11ce8     01 36 06 F1 | 	add	local09, #1
11cec     1B 31 02 F6 | 	mov	local06, local09
11cf0     02 30 66 F0 | 	shl	local06, #2
11cf4     A7 26 02 F6 | 	mov	local01, fp
11cf8     A7 30 02 F1 | 	add	local06, fp
11cfc     18 2F 02 FB | 	rdlong	local05, local06
11d00     17 15 02 F6 | 	mov	arg02, local05
11d04     1C 4E 85 F1 | 	sub	fp, #28
11d08     D4 57 B1 FD | 	call	#__system___string_cmp
11d0c     01 FA 55 F2 | 	cmps	result1, #1 wc
11d10     60 00 90 CD |  if_b	jmp	#LR__1427
11d14     1E 37 02 F6 | 	mov	local09, local12
11d18     01 36 06 F1 | 	add	local09, #1
11d1c     02 36 66 F0 | 	shl	local09, #2
11d20     1C 4E 05 F1 | 	add	fp, #28
11d24     A7 36 02 F1 | 	add	local09, fp
11d28     1B 45 02 FB | 	rdlong	local16, local09
11d2c     1E 31 02 F6 | 	mov	local06, local12
11d30     02 30 66 F0 | 	shl	local06, #2
11d34     A7 30 02 F1 | 	add	local06, fp
11d38     18 2F 02 FB | 	rdlong	local05, local06
11d3c     1E 37 02 F6 | 	mov	local09, local12
11d40     1B 31 02 F6 | 	mov	local06, local09
11d44     02 30 66 F0 | 	shl	local06, #2
11d48     A7 26 02 F6 | 	mov	local01, fp
11d4c     A7 30 02 F1 | 	add	local06, fp
11d50     18 45 62 FC | 	wrlong	local16, local06
11d54     1E 41 02 F6 | 	mov	local14, local12
11d58     01 40 06 F1 | 	add	local14, #1
11d5c     02 40 66 F0 | 	shl	local14, #2
11d60     A7 42 02 F6 | 	mov	local15, fp
11d64     A7 40 02 F1 | 	add	local14, fp
11d68     20 2F 62 FC | 	wrlong	local05, local14
11d6c     01 3A 66 F6 | 	neg	local11, #1
11d70     1C 4E 85 F1 | 	sub	fp, #28
11d74                 | LR__1427
11d74     01 3C 06 F1 | 	add	local12, #1
11d78     4C FF 9F FD | 	jmp	#LR__1426
11d7c                 | LR__1428
11d7c                 | ' if not swapped then exit for
11d7c     1D 45 22 F6 | 	not	local16, local11
11d80     00 44 0E F2 | 	cmp	local16, #0 wz
11d84     01 2C 06 A1 |  if_e	add	local04, #1
11d88     20 FF 9F AD |  if_e	jmp	#LR__1425
11d8c                 | LR__1429
11d8c                 | ' for i=0 to n-1
11d8c     00 2C 06 F6 | 	mov	local04, #0
11d90                 | LR__1430
11d90     1A 2D 52 F2 | 	cmps	local04, local08 wc
11d94     8C 00 90 3D |  if_ae	jmp	#LR__1432
11d98                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11d98     00 12 06 F6 | 	mov	arg01, #0
11d9c     BC B3 B1 FD | 	call	#__system___getiolock_0616
11da0     FD 12 02 F6 | 	mov	arg01, result1
11da4     10 57 B1 FD | 	call	#__system___lockmem
11da8     16 29 02 F6 | 	mov	local02, local04
11dac     02 28 66 F0 | 	shl	local02, #2
11db0     1C 4E 05 F1 | 	add	fp, #28
11db4     A7 28 02 F1 | 	add	local02, fp
11db8     14 15 02 FB | 	rdlong	arg02, local02
11dbc     00 12 06 F6 | 	mov	arg01, #0
11dc0     00 16 06 F6 | 	mov	arg03, #0
11dc4     1C 4E 85 F1 | 	sub	fp, #28
11dc8     E4 63 B1 FD | 	call	#__system___basic_print_string
11dcc     00 12 06 F6 | 	mov	arg01, #0
11dd0     88 B3 B1 FD | 	call	#__system___getiolock_0616
11dd4     FD 00 68 FC | 	wrlong	#0, result1
11dd8     40 2A 06 F1 | 	add	local03, #64
11ddc     15 13 02 F6 | 	mov	arg01, local03
11de0     74 39 B1 FD | 	call	#_hg010b_spin2_setcursorx
11de4     00 2B 56 F2 | 	cmps	local03, #256 wc
11de8     30 00 90 CD |  if_b	jmp	#LR__1431
11dec     00 2A 06 F6 | 	mov	local03, #0
11df0     00 12 06 F6 | 	mov	arg01, #0
11df4     64 B3 B1 FD | 	call	#__system___getiolock_0616
11df8     FD 12 02 F6 | 	mov	arg01, result1
11dfc     B8 56 B1 FD | 	call	#__system___lockmem
11e00     00 12 06 F6 | 	mov	arg01, #0
11e04     0A 14 06 F6 | 	mov	arg02, #10
11e08     00 16 06 F6 | 	mov	arg03, #0
11e0c     48 63 B1 FD | 	call	#__system___basic_print_char
11e10     00 12 06 F6 | 	mov	arg01, #0
11e14     44 B3 B1 FD | 	call	#__system___getiolock_0616
11e18     FD 00 68 FC | 	wrlong	#0, result1
11e1c                 | LR__1431
11e1c     01 2C 06 F1 | 	add	local04, #1
11e20     6C FF 9F FD | 	jmp	#LR__1430
11e24                 | LR__1432
11e24                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11e24     80 34 56 F2 | 	cmps	local08, #128 wc
11e28     40 00 90 CD |  if_b	jmp	#LR__1433
11e2c     00 12 06 F6 | 	mov	arg01, #0
11e30     28 B3 B1 FD | 	call	#__system___getiolock_0616
11e34     FD 12 02 F6 | 	mov	arg01, result1
11e38     7C 56 B1 FD | 	call	#__system___lockmem
11e3c     BC 01 00 FF 
11e40     A4 15 06 F6 | 	mov	arg02, ##@LR__5968
11e44     00 12 06 F6 | 	mov	arg01, #0
11e48     00 16 06 F6 | 	mov	arg03, #0
11e4c     60 63 B1 FD | 	call	#__system___basic_print_string
11e50     00 12 06 F6 | 	mov	arg01, #0
11e54     0A 14 06 F6 | 	mov	arg02, #10
11e58     00 16 06 F6 | 	mov	arg03, #0
11e5c     F8 62 B1 FD | 	call	#__system___basic_print_char
11e60     00 12 06 F6 | 	mov	arg01, #0
11e64     F4 B2 B1 FD | 	call	#__system___getiolock_0616
11e68     FD 00 68 FC | 	wrlong	#0, result1
11e6c                 | LR__1433
11e6c                 | ' print
11e6c     00 12 06 F6 | 	mov	arg01, #0
11e70     E8 B2 B1 FD | 	call	#__system___getiolock_0616
11e74     FD 12 02 F6 | 	mov	arg01, result1
11e78     3C 56 B1 FD | 	call	#__system___lockmem
11e7c     00 12 06 F6 | 	mov	arg01, #0
11e80     0A 14 06 F6 | 	mov	arg02, #10
11e84     00 16 06 F6 | 	mov	arg03, #0
11e88     CC 62 B1 FD | 	call	#__system___basic_print_char
11e8c     00 12 06 F6 | 	mov	arg01, #0
11e90     C8 B2 B1 FD | 	call	#__system___getiolock_0616
11e94     FD 00 68 FC | 	wrlong	#0, result1
11e98     A7 F0 03 F6 | 	mov	ptra, fp
11e9c     B2 00 A0 FD | 	call	#popregs_
11ea0                 | _do_dir_ret
11ea0     2D 00 64 FD | 	ret
11ea4                 | 
11ea4                 | ' 
11ea4                 | ' '-------------------- dpeek
11ea4                 | ' 
11ea4                 | ' sub do_dpeek
11ea4                 | _do_dpeek
11ea4     00 4A 05 F6 | 	mov	COUNT_, #0
11ea8     A8 00 A0 FD | 	call	#pushregs_
11eac     14 F0 07 F1 | 	add	ptra, #20
11eb0     F8 B8 BF FD | 	call	#_pop
11eb4     A7 FA 61 FC | 	wrlong	result1, fp
11eb8     04 4E 05 F1 | 	add	fp, #4
11ebc     A7 FC 61 FC | 	wrlong	result2, fp
11ec0     04 4E 05 F1 | 	add	fp, #4
11ec4     A7 FE 61 FC | 	wrlong	result3, fp
11ec8     08 4E 85 F1 | 	sub	fp, #8
11ecc     A7 12 02 F6 | 	mov	arg01, fp
11ed0     BC BA BF FD | 	call	#_converttoint
11ed4     0C 4E 05 F1 | 	add	fp, #12
11ed8     A7 FA 61 FC | 	wrlong	result1, fp
11edc                 | ' 
11edc                 | ' t1=pop()
11edc                 | ' a=converttoint(t1)
11edc                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11edc     0C 4E 85 F1 | 	sub	fp, #12
11ee0     00 04 00 FF 
11ee4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11ee8     1C 00 90 3D |  if_ae	jmp	#LR__1440
11eec     0C 4E 05 F1 | 	add	fp, #12
11ef0     A7 12 02 FB | 	rdlong	arg01, fp
11ef4     09 FB E1 FA | 	rdword	result1, arg01
11ef8     04 4E 05 F1 | 	add	fp, #4
11efc     A7 FA 61 FC | 	wrlong	result1, fp
11f00     10 4E 85 F1 | 	sub	fp, #16
11f04     1C 00 90 FD | 	jmp	#LR__1441
11f08                 | LR__1440
11f08     0C 4E 05 F1 | 	add	fp, #12
11f0c     A7 12 02 FB | 	rdlong	arg01, fp
11f10     0C 4E 85 F1 | 	sub	fp, #12
11f14     B0 1E B1 FD | 	call	#_psdpeek
11f18     10 4E 05 F1 | 	add	fp, #16
11f1c     A7 FA 61 FC | 	wrlong	result1, fp
11f20     10 4E 85 F1 | 	sub	fp, #16
11f24                 | LR__1441
11f24     08 4E 05 F1 | 	add	fp, #8
11f28     A7 3A 68 FC | 	wrlong	#29, fp
11f2c     08 4E 05 F1 | 	add	fp, #8
11f30     A7 12 02 FB | 	rdlong	arg01, fp
11f34     10 4E 85 F1 | 	sub	fp, #16
11f38     A7 12 62 FC | 	wrlong	arg01, fp
11f3c     A7 12 02 F6 | 	mov	arg01, fp
11f40     00 B9 BF FD | 	call	#_push
11f44     A7 F0 03 F6 | 	mov	ptra, fp
11f48     B2 00 A0 FD | 	call	#popregs_
11f4c                 | _do_dpeek_ret
11f4c     2D 00 64 FD | 	ret
11f50                 | 
11f50                 | ' 
11f50                 | ' '-------------------- dpoke
11f50                 | ' 
11f50                 | ' sub do_dpoke
11f50                 | _do_dpoke
11f50     01 4A 05 F6 | 	mov	COUNT_, #1
11f54     A8 00 A0 FD | 	call	#pushregs_
11f58     20 F0 07 F1 | 	add	ptra, #32
11f5c     4C B8 BF FD | 	call	#_pop
11f60     FD 14 02 F6 | 	mov	arg02, result1
11f64     FE 12 02 F6 | 	mov	arg01, result2
11f68     FF 26 02 F6 | 	mov	local01, result3
11f6c     A7 14 62 FC | 	wrlong	arg02, fp
11f70     04 4E 05 F1 | 	add	fp, #4
11f74     A7 12 62 FC | 	wrlong	arg01, fp
11f78     04 4E 05 F1 | 	add	fp, #4
11f7c     A7 26 62 FC | 	wrlong	local01, fp
11f80     08 4E 85 F1 | 	sub	fp, #8
11f84     24 B8 BF FD | 	call	#_pop
11f88     FF 26 02 F6 | 	mov	local01, result3
11f8c     0C 4E 05 F1 | 	add	fp, #12
11f90     A7 FA 61 FC | 	wrlong	result1, fp
11f94     04 4E 05 F1 | 	add	fp, #4
11f98     A7 FC 61 FC | 	wrlong	result2, fp
11f9c     04 4E 05 F1 | 	add	fp, #4
11fa0     A7 26 62 FC | 	wrlong	local01, fp
11fa4     08 4E 85 F1 | 	sub	fp, #8
11fa8     A7 12 02 F6 | 	mov	arg01, fp
11fac     0C 4E 85 F1 | 	sub	fp, #12
11fb0     DC B9 BF FD | 	call	#_converttoint
11fb4     18 4E 05 F1 | 	add	fp, #24
11fb8     A7 FA 61 FC | 	wrlong	result1, fp
11fbc     18 4E 85 F1 | 	sub	fp, #24
11fc0     A7 12 02 F6 | 	mov	arg01, fp
11fc4     C8 B9 BF FD | 	call	#_converttoint
11fc8     1C 4E 05 F1 | 	add	fp, #28
11fcc     A7 FA 61 FC | 	wrlong	result1, fp
11fd0                 | ' 
11fd0                 | ' t1=pop() 'value
11fd0                 | ' t2=pop() 
11fd0                 | ' a=converttoint(t2) : v=converttoint(t1)
11fd0                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11fd0     04 4E 85 F1 | 	sub	fp, #4
11fd4     A7 26 02 FB | 	rdlong	local01, fp
11fd8     18 4E 85 F1 | 	sub	fp, #24
11fdc     00 04 00 FF 
11fe0     00 26 16 F2 | 	cmp	local01, ##524288 wc
11fe4     1C 00 90 3D |  if_ae	jmp	#LR__1450
11fe8     18 4E 05 F1 | 	add	fp, #24
11fec     A7 12 02 FB | 	rdlong	arg01, fp
11ff0     04 4E 05 F1 | 	add	fp, #4
11ff4     A7 14 02 FB | 	rdlong	arg02, fp
11ff8     1C 4E 85 F1 | 	sub	fp, #28
11ffc     09 15 52 FC | 	wrword	arg02, arg01
12000     18 00 90 FD | 	jmp	#LR__1451
12004                 | LR__1450
12004     18 4E 05 F1 | 	add	fp, #24
12008     A7 12 02 FB | 	rdlong	arg01, fp
1200c     04 4E 05 F1 | 	add	fp, #4
12010     A7 14 02 FB | 	rdlong	arg02, fp
12014     1C 4E 85 F1 | 	sub	fp, #28
12018     6C 1C B1 FD | 	call	#_psdpoke
1201c                 | LR__1451
1201c     A7 F0 03 F6 | 	mov	ptra, fp
12020     B2 00 A0 FD | 	call	#popregs_
12024                 | _do_dpoke_ret
12024     2D 00 64 FD | 	ret
12028                 | 
12028                 | ' '-------------------- draw
12028                 | ' 
12028                 | ' sub do_draw
12028                 | _do_draw
12028     00 4A 05 F6 | 	mov	COUNT_, #0
1202c     A8 00 A0 FD | 	call	#pushregs_
12030     20 F0 07 F1 | 	add	ptra, #32
12034     74 B7 BF FD | 	call	#_pop
12038     FD 1A 02 F6 | 	mov	arg05, result1
1203c     FE 18 02 F6 | 	mov	arg04, result2
12040     FF 16 02 F6 | 	mov	arg03, result3
12044     0C 4E 05 F1 | 	add	fp, #12
12048     A7 1A 62 FC | 	wrlong	arg05, fp
1204c     04 4E 05 F1 | 	add	fp, #4
12050     A7 18 62 FC | 	wrlong	arg04, fp
12054     04 4E 05 F1 | 	add	fp, #4
12058     A7 16 62 FC | 	wrlong	arg03, fp
1205c     14 4E 85 F1 | 	sub	fp, #20
12060     48 B7 BF FD | 	call	#_pop
12064     FF 1A 02 F6 | 	mov	arg05, result3
12068     A7 FA 61 FC | 	wrlong	result1, fp
1206c     04 4E 05 F1 | 	add	fp, #4
12070     A7 FC 61 FC | 	wrlong	result2, fp
12074     04 4E 05 F1 | 	add	fp, #4
12078     A7 1A 62 FC | 	wrlong	arg05, fp
1207c     08 4E 85 F1 | 	sub	fp, #8
12080     A7 12 02 F6 | 	mov	arg01, fp
12084     08 B9 BF FD | 	call	#_converttoint
12088     18 4E 05 F1 | 	add	fp, #24
1208c     A7 FA 61 FC | 	wrlong	result1, fp
12090     0C 4E 85 F1 | 	sub	fp, #12
12094     A7 12 02 F6 | 	mov	arg01, fp
12098     0C 4E 85 F1 | 	sub	fp, #12
1209c     F0 B8 BF FD | 	call	#_converttoint
120a0     1C 4E 05 F1 | 	add	fp, #28
120a4     A7 FA 61 FC | 	wrlong	result1, fp
120a8     37 00 00 FF 
120ac     2C E4 05 F1 | 	add	objptr, ##28204
120b0     F2 12 02 FB | 	rdlong	arg01, objptr
120b4     04 E4 05 F1 | 	add	objptr, #4
120b8     F2 14 02 FB | 	rdlong	arg02, objptr
120bc     04 4E 85 F1 | 	sub	fp, #4
120c0     A7 16 02 FB | 	rdlong	arg03, fp
120c4     FD 18 02 F6 | 	mov	arg04, result1
120c8     18 4E 85 F1 | 	sub	fp, #24
120cc     08 E4 85 F1 | 	sub	objptr, #8
120d0     F2 1A 02 FB | 	rdlong	arg05, objptr
120d4     37 00 00 FF 
120d8     28 E4 85 F1 | 	sub	objptr, ##28200
120dc     28 2D B1 FD | 	call	#_hg010b_spin2_draw
120e0     18 4E 05 F1 | 	add	fp, #24
120e4     A7 1A 02 FB | 	rdlong	arg05, fp
120e8     37 00 00 FF 
120ec     2C E4 05 F1 | 	add	objptr, ##28204
120f0     F2 1A 62 FC | 	wrlong	arg05, objptr
120f4     04 4E 05 F1 | 	add	fp, #4
120f8     A7 1A 02 FB | 	rdlong	arg05, fp
120fc     1C 4E 85 F1 | 	sub	fp, #28
12100     04 E4 05 F1 | 	add	objptr, #4
12104     F2 1A 62 FC | 	wrlong	arg05, objptr
12108     37 00 00 FF 
1210c     30 E4 85 F1 | 	sub	objptr, ##28208
12110     A7 F0 03 F6 | 	mov	ptra, fp
12114     B2 00 A0 FD | 	call	#popregs_
12118                 | _do_draw_ret
12118     2D 00 64 FD | 	ret
1211c                 | 
1211c                 | ' 
1211c                 | ' '-------------------- else
1211c                 | ' 
1211c                 | ' sub do_else
1211c                 | _do_else
1211c     4A 00 00 FF 
12120     7C E4 05 F1 | 	add	objptr, ##38012
12124     F2 00 02 FB | 	rdlong	_var01, objptr
12128     01 00 86 F1 | 	sub	_var01, #1
1212c     04 E4 05 F1 | 	add	objptr, #4
12130     F2 00 62 FC | 	wrlong	_var01, objptr
12134     4A 00 00 FF 
12138     80 E4 85 F1 | 	sub	objptr, ##38016
1213c                 | _do_else_ret
1213c     2D 00 64 FD | 	ret
12140                 | 
12140                 | ' 
12140                 | ' '-------------------- end
12140                 | ' 
12140                 | ' sub do_end
12140                 | _do_end
12140     4A 00 00 FF 
12144     7C E4 05 F1 | 	add	objptr, ##38012
12148     F2 00 02 FB | 	rdlong	_var01, objptr
1214c     01 00 86 F1 | 	sub	_var01, #1
12150     04 E4 05 F1 | 	add	objptr, #4
12154     F2 00 62 FC | 	wrlong	_var01, objptr
12158     06 00 00 FF 
1215c     38 E4 05 F1 | 	add	objptr, ##3128
12160     FF FF BF FF 
12164     F2 FE 6B FC | 	wrlong	##2147483647, objptr
12168     50 00 00 FF 
1216c     B8 E4 85 F1 | 	sub	objptr, ##41144
12170                 | _do_end_ret
12170     2D 00 64 FD | 	ret
12174                 | 
12174                 | ' 
12174                 | ' '-------------------- enter
12174                 | ' 
12174                 | ' sub do_enter
12174                 | _do_enter
12174     02 00 00 FF 
12178     D2 12 06 F6 | 	mov	arg01, ##1234
1217c     AC 2F B0 FD | 	call	#_do_load
12180                 | _do_enter_ret
12180     2D 00 64 FD | 	ret
12184                 | 
12184                 | ' 
12184                 | ' '------------------- error processing
12184                 | ' 
12184                 | ' sub do_error
12184                 | _do_error
12184     01 4A 05 F6 | 	mov	COUNT_, #1
12188     A8 00 A0 FD | 	call	#pushregs_
1218c     4A 00 00 FF 
12190     80 E4 05 F1 | 	add	objptr, ##38016
12194     F2 18 02 FB | 	rdlong	arg04, objptr
12198     0C 17 02 F6 | 	mov	arg03, arg04
1219c     01 16 66 F0 | 	shl	arg03, #1
121a0     0C 17 02 F1 | 	add	arg03, arg04
121a4     02 16 66 F0 | 	shl	arg03, #2
121a8     03 00 00 FF 
121ac     04 E4 85 F1 | 	sub	objptr, ##1540
121b0     F2 16 02 F1 | 	add	arg03, objptr
121b4     0B 27 02 FB | 	rdlong	local01, arg03
121b8                 | ' r=compiledline(lineptr_e).result.uresult
121b8                 | ' print "Error ";r;": ";errors$(r)
121b8     00 12 06 F6 | 	mov	arg01, #0
121bc     47 00 00 FF 
121c0     7C E4 85 F1 | 	sub	objptr, ##36476
121c4     94 AF B1 FD | 	call	#__system___getiolock_0616
121c8     FD 12 02 F6 | 	mov	arg01, result1
121cc     E8 52 B1 FD | 	call	#__system___lockmem
121d0     BC 01 00 FF 
121d4     D6 15 06 F6 | 	mov	arg02, ##@LR__5969
121d8     00 12 06 F6 | 	mov	arg01, #0
121dc     00 16 06 F6 | 	mov	arg03, #0
121e0     CC 5F B1 FD | 	call	#__system___basic_print_string
121e4     00 12 06 F6 | 	mov	arg01, #0
121e8     13 15 02 F6 | 	mov	arg02, local01
121ec     00 16 06 F6 | 	mov	arg03, #0
121f0     0A 18 06 F6 | 	mov	arg04, #10
121f4     3C 60 B1 FD | 	call	#__system___basic_print_unsigned
121f8     BC 01 00 FF 
121fc     DD 15 06 F6 | 	mov	arg02, ##@LR__5970
12200     00 12 06 F6 | 	mov	arg01, #0
12204     00 16 06 F6 | 	mov	arg03, #0
12208     A4 5F B1 FD | 	call	#__system___basic_print_string
1220c     02 26 66 F0 | 	shl	local01, #2
12210     45 00 00 FF 
12214     7C E4 05 F1 | 	add	objptr, ##35452
12218     F2 26 02 F1 | 	add	local01, objptr
1221c     13 15 02 FB | 	rdlong	arg02, local01
12220     00 12 06 F6 | 	mov	arg01, #0
12224     00 16 06 F6 | 	mov	arg03, #0
12228     45 00 00 FF 
1222c     7C E4 85 F1 | 	sub	objptr, ##35452
12230     7C 5F B1 FD | 	call	#__system___basic_print_string
12234     00 12 06 F6 | 	mov	arg01, #0
12238     0A 14 06 F6 | 	mov	arg02, #10
1223c     00 16 06 F6 | 	mov	arg03, #0
12240     14 5F B1 FD | 	call	#__system___basic_print_char
12244     00 12 06 F6 | 	mov	arg01, #0
12248     10 AF B1 FD | 	call	#__system___getiolock_0616
1224c     FD 00 68 FC | 	wrlong	#0, result1
12250     A7 F0 03 F6 | 	mov	ptra, fp
12254     B2 00 A0 FD | 	call	#popregs_
12258                 | _do_error_ret
12258     2D 00 64 FD | 	ret
1225c                 | 
1225c                 | ' 
1225c                 | ' '-------------------- fcircle
1225c                 | ' 
1225c                 | ' sub do_fcircle
1225c                 | _do_fcircle
1225c     02 4A 05 F6 | 	mov	COUNT_, #2
12260     A8 00 A0 FD | 	call	#pushregs_
12264     24 F0 07 F1 | 	add	ptra, #36
12268     40 B5 BF FD | 	call	#_pop
1226c     FD 14 02 F6 | 	mov	arg02, result1
12270     FE 18 02 F6 | 	mov	arg04, result2
12274     FF 16 02 F6 | 	mov	arg03, result3
12278     18 4E 05 F1 | 	add	fp, #24
1227c     A7 14 62 FC | 	wrlong	arg02, fp
12280     04 4E 05 F1 | 	add	fp, #4
12284     A7 18 62 FC | 	wrlong	arg04, fp
12288     04 4E 05 F1 | 	add	fp, #4
1228c     A7 16 62 FC | 	wrlong	arg03, fp
12290     20 4E 85 F1 | 	sub	fp, #32
12294     14 B5 BF FD | 	call	#_pop
12298     FD 14 02 F6 | 	mov	arg02, result1
1229c     FE 18 02 F6 | 	mov	arg04, result2
122a0     FF 16 02 F6 | 	mov	arg03, result3
122a4     0C 4E 05 F1 | 	add	fp, #12
122a8     A7 14 62 FC | 	wrlong	arg02, fp
122ac     04 4E 05 F1 | 	add	fp, #4
122b0     A7 18 62 FC | 	wrlong	arg04, fp
122b4     04 4E 05 F1 | 	add	fp, #4
122b8     A7 16 62 FC | 	wrlong	arg03, fp
122bc     14 4E 85 F1 | 	sub	fp, #20
122c0     E8 B4 BF FD | 	call	#_pop
122c4     FF 14 02 F6 | 	mov	arg02, result3
122c8     A7 FA 61 FC | 	wrlong	result1, fp
122cc     04 4E 05 F1 | 	add	fp, #4
122d0     A7 FC 61 FC | 	wrlong	result2, fp
122d4     04 4E 05 F1 | 	add	fp, #4
122d8     A7 14 62 FC | 	wrlong	arg02, fp
122dc     08 4E 85 F1 | 	sub	fp, #8
122e0     A7 12 02 F6 | 	mov	arg01, fp
122e4     A8 B6 BF FD | 	call	#_converttoint
122e8     FD 26 02 F6 | 	mov	local01, result1
122ec     0C 4E 05 F1 | 	add	fp, #12
122f0     A7 12 02 F6 | 	mov	arg01, fp
122f4     0C 4E 85 F1 | 	sub	fp, #12
122f8     94 B6 BF FD | 	call	#_converttoint
122fc     FD 28 02 F6 | 	mov	local02, result1
12300     18 4E 05 F1 | 	add	fp, #24
12304     A7 12 02 F6 | 	mov	arg01, fp
12308     18 4E 85 F1 | 	sub	fp, #24
1230c     80 B6 BF FD | 	call	#_converttoint
12310     FD 16 02 F6 | 	mov	arg03, result1
12314     37 00 00 FF 
12318     28 E4 05 F1 | 	add	objptr, ##28200
1231c     F2 18 02 FB | 	rdlong	arg04, objptr
12320     37 00 00 FF 
12324     28 E4 85 F1 | 	sub	objptr, ##28200
12328     13 13 02 F6 | 	mov	arg01, local01
1232c     14 15 02 F6 | 	mov	arg02, local02
12330     58 2F B1 FD | 	call	#_hg010b_spin2_fcircle
12334     A7 F0 03 F6 | 	mov	ptra, fp
12338     B2 00 A0 FD | 	call	#popregs_
1233c                 | _do_fcircle_ret
1233c     2D 00 64 FD | 	ret
12340                 | 
12340                 | ' 
12340                 | ' '-------------------- fill
12340                 | ' 
12340                 | ' sub do_fill
12340                 | _do_fill
12340     03 4A 05 F6 | 	mov	COUNT_, #3
12344     A8 00 A0 FD | 	call	#pushregs_
12348     30 F0 07 F1 | 	add	ptra, #48
1234c     5C B4 BF FD | 	call	#_pop
12350     FD 16 02 F6 | 	mov	arg03, result1
12354     FE 14 02 F6 | 	mov	arg02, result2
12358     FF 18 02 F6 | 	mov	arg04, result3
1235c     24 4E 05 F1 | 	add	fp, #36
12360     A7 16 62 FC | 	wrlong	arg03, fp
12364     04 4E 05 F1 | 	add	fp, #4
12368     A7 14 62 FC | 	wrlong	arg02, fp
1236c     04 4E 05 F1 | 	add	fp, #4
12370     A7 18 62 FC | 	wrlong	arg04, fp
12374     2C 4E 85 F1 | 	sub	fp, #44
12378     30 B4 BF FD | 	call	#_pop
1237c     FD 16 02 F6 | 	mov	arg03, result1
12380     FE 14 02 F6 | 	mov	arg02, result2
12384     FF 18 02 F6 | 	mov	arg04, result3
12388     18 4E 05 F1 | 	add	fp, #24
1238c     A7 16 62 FC | 	wrlong	arg03, fp
12390     04 4E 05 F1 | 	add	fp, #4
12394     A7 14 62 FC | 	wrlong	arg02, fp
12398     04 4E 05 F1 | 	add	fp, #4
1239c     A7 18 62 FC | 	wrlong	arg04, fp
123a0     20 4E 85 F1 | 	sub	fp, #32
123a4     04 B4 BF FD | 	call	#_pop
123a8     FD 16 02 F6 | 	mov	arg03, result1
123ac     FE 14 02 F6 | 	mov	arg02, result2
123b0     FF 18 02 F6 | 	mov	arg04, result3
123b4     0C 4E 05 F1 | 	add	fp, #12
123b8     A7 16 62 FC | 	wrlong	arg03, fp
123bc     04 4E 05 F1 | 	add	fp, #4
123c0     A7 14 62 FC | 	wrlong	arg02, fp
123c4     04 4E 05 F1 | 	add	fp, #4
123c8     A7 18 62 FC | 	wrlong	arg04, fp
123cc     14 4E 85 F1 | 	sub	fp, #20
123d0     D8 B3 BF FD | 	call	#_pop
123d4     FF 16 02 F6 | 	mov	arg03, result3
123d8     A7 FA 61 FC | 	wrlong	result1, fp
123dc     04 4E 05 F1 | 	add	fp, #4
123e0     A7 FC 61 FC | 	wrlong	result2, fp
123e4     04 4E 05 F1 | 	add	fp, #4
123e8     A7 16 62 FC | 	wrlong	arg03, fp
123ec     08 4E 85 F1 | 	sub	fp, #8
123f0     A7 12 02 F6 | 	mov	arg01, fp
123f4     98 B5 BF FD | 	call	#_converttoint
123f8     FD 26 02 F6 | 	mov	local01, result1
123fc     0C 4E 05 F1 | 	add	fp, #12
12400     A7 12 02 F6 | 	mov	arg01, fp
12404     0C 4E 85 F1 | 	sub	fp, #12
12408     84 B5 BF FD | 	call	#_converttoint
1240c     FD 28 02 F6 | 	mov	local02, result1
12410     18 4E 05 F1 | 	add	fp, #24
12414     A7 12 02 F6 | 	mov	arg01, fp
12418     18 4E 85 F1 | 	sub	fp, #24
1241c     70 B5 BF FD | 	call	#_converttoint
12420     FD 2A 02 F6 | 	mov	local03, result1
12424     24 4E 05 F1 | 	add	fp, #36
12428     A7 12 02 F6 | 	mov	arg01, fp
1242c     24 4E 85 F1 | 	sub	fp, #36
12430     5C B5 BF FD | 	call	#_converttoint
12434     FD 18 02 F6 | 	mov	arg04, result1
12438     13 13 02 F6 | 	mov	arg01, local01
1243c     14 15 02 F6 | 	mov	arg02, local02
12440     15 17 02 F6 | 	mov	arg03, local03
12444     B0 2B B1 FD | 	call	#_hg010b_spin2_fill
12448     A7 F0 03 F6 | 	mov	ptra, fp
1244c     B2 00 A0 FD | 	call	#popregs_
12450                 | _do_fill_ret
12450     2D 00 64 FD | 	ret
12454                 | 
12454                 | ' 
12454                 | ' '-------------------- font
12454                 | ' 
12454                 | ' sub do_font
12454                 | _do_font
12454     03 4A 05 F6 | 	mov	COUNT_, #3
12458     A8 00 A0 FD | 	call	#pushregs_
1245c     4C B3 BF FD | 	call	#_pop
12460     FD 26 02 F6 | 	mov	local01, result1
12464     FE 28 02 F6 | 	mov	local02, result2
12468     FF 2A 02 F6 | 	mov	local03, result3
1246c                 | ' 
1246c                 | ' t1=pop() 
1246c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1246c     1E 2A 0E F2 | 	cmp	local03, #30 wz
12470     10 00 90 5D |  if_ne	jmp	#LR__1460
12474     13 13 02 F6 | 	mov	arg01, local01
12478     00 14 06 F6 | 	mov	arg02, #0
1247c     7C 83 B1 FD | 	call	#__system___float_tointeger
12480     FD 26 02 F6 | 	mov	local01, result1
12484                 | LR__1460
12484                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12484     1F 2A 0E F2 | 	cmp	local03, #31 wz
12488     18 00 90 5D |  if_ne	jmp	#LR__1461
1248c     13 13 02 F6 | 	mov	arg01, local01
12490     AC 86 B1 FD | 	call	#__system____builtin_atof
12494     FD 12 02 F6 | 	mov	arg01, result1
12498     00 14 06 F6 | 	mov	arg02, #0
1249c     5C 83 B1 FD | 	call	#__system___float_tointeger
124a0     FD 26 02 F6 | 	mov	local01, result1
124a4                 | LR__1461
124a4     37 00 00 FF 
124a8     40 E4 05 F1 | 	add	objptr, ##28224
124ac     F2 26 62 FC | 	wrlong	local01, objptr
124b0     37 00 00 FF 
124b4     40 E4 85 F1 | 	sub	objptr, ##28224
124b8     02 26 66 F0 | 	shl	local01, #2
124bc     13 13 02 F6 | 	mov	arg01, local01
124c0     18 32 B1 FD | 	call	#_hg010b_spin2_setfontfamily
124c4     A7 F0 03 F6 | 	mov	ptra, fp
124c8     B2 00 A0 FD | 	call	#popregs_
124cc                 | _do_font_ret
124cc     2D 00 64 FD | 	ret
124d0                 | 
124d0                 | ' 
124d0                 | ' '-------------------- for
124d0                 | ' 
124d0                 | ' sub do_for()
124d0                 | _do_for
124d0     01 4A 05 F6 | 	mov	COUNT_, #1
124d4     A8 00 A0 FD | 	call	#pushregs_
124d8     10 F0 07 F1 | 	add	ptra, #16
124dc     50 00 00 FF 
124e0     30 E5 05 F1 | 	add	objptr, ##41264
124e4     F2 12 02 FB | 	rdlong	arg01, objptr
124e8     01 12 06 F1 | 	add	arg01, #1
124ec     F2 12 62 FC | 	wrlong	arg01, objptr
124f0     50 00 00 FF 
124f4     30 E5 85 F1 | 	sub	objptr, ##41264
124f8     B0 B2 BF FD | 	call	#_pop
124fc     A7 FA 61 FC | 	wrlong	result1, fp
12500     04 4E 05 F1 | 	add	fp, #4
12504     A7 FC 61 FC | 	wrlong	result2, fp
12508     04 4E 05 F1 | 	add	fp, #4
1250c     A7 FE 61 FC | 	wrlong	result3, fp
12510     08 4E 85 F1 | 	sub	fp, #8
12514     50 00 00 FF 
12518     30 E5 05 F1 | 	add	objptr, ##41264
1251c     F2 12 02 FB | 	rdlong	arg01, objptr
12520     09 27 02 F6 | 	mov	local01, arg01
12524     02 26 66 F0 | 	shl	local01, #2
12528     09 27 02 F1 | 	add	local01, arg01
1252c     02 26 66 F0 | 	shl	local01, #2
12530     06 00 00 FF 
12534     98 E4 85 F1 | 	sub	objptr, ##3224
12538     F2 26 02 F1 | 	add	local01, objptr
1253c     A7 12 02 FB | 	rdlong	arg01, fp
12540     08 26 06 F1 | 	add	local01, #8
12544     13 13 62 FC | 	wrlong	arg01, local01
12548     4A 00 00 FF 
1254c     98 E4 85 F1 | 	sub	objptr, ##38040
12550     58 B2 BF FD | 	call	#_pop
12554     A7 FA 61 FC | 	wrlong	result1, fp
12558     04 4E 05 F1 | 	add	fp, #4
1255c     A7 FC 61 FC | 	wrlong	result2, fp
12560     04 4E 05 F1 | 	add	fp, #4
12564     A7 FE 61 FC | 	wrlong	result3, fp
12568     08 4E 85 F1 | 	sub	fp, #8
1256c     50 00 00 FF 
12570     30 E5 05 F1 | 	add	objptr, ##41264
12574     F2 12 02 FB | 	rdlong	arg01, objptr
12578     09 27 02 F6 | 	mov	local01, arg01
1257c     02 26 66 F0 | 	shl	local01, #2
12580     09 27 02 F1 | 	add	local01, arg01
12584     02 26 66 F0 | 	shl	local01, #2
12588     06 00 00 FF 
1258c     98 E4 85 F1 | 	sub	objptr, ##3224
12590     F2 26 02 F1 | 	add	local01, objptr
12594     A7 12 02 F6 | 	mov	arg01, fp
12598     4A 00 00 FF 
1259c     98 E4 85 F1 | 	sub	objptr, ##38040
125a0     EC B3 BF FD | 	call	#_converttoint
125a4     FD 12 02 F6 | 	mov	arg01, result1
125a8     0C 26 06 F1 | 	add	local01, #12
125ac     13 13 62 FC | 	wrlong	arg01, local01
125b0     F8 B1 BF FD | 	call	#_pop
125b4     A7 FA 61 FC | 	wrlong	result1, fp
125b8     04 4E 05 F1 | 	add	fp, #4
125bc     A7 FC 61 FC | 	wrlong	result2, fp
125c0     04 4E 05 F1 | 	add	fp, #4
125c4     A7 FE 61 FC | 	wrlong	result3, fp
125c8     08 4E 85 F1 | 	sub	fp, #8
125cc     50 00 00 FF 
125d0     30 E5 05 F1 | 	add	objptr, ##41264
125d4     F2 12 02 FB | 	rdlong	arg01, objptr
125d8     09 27 02 F6 | 	mov	local01, arg01
125dc     02 26 66 F0 | 	shl	local01, #2
125e0     09 27 02 F1 | 	add	local01, arg01
125e4     02 26 66 F0 | 	shl	local01, #2
125e8     06 00 00 FF 
125ec     98 E4 85 F1 | 	sub	objptr, ##3224
125f0     F2 26 02 F1 | 	add	local01, objptr
125f4     A7 12 02 F6 | 	mov	arg01, fp
125f8     4A 00 00 FF 
125fc     98 E4 85 F1 | 	sub	objptr, ##38040
12600     8C B3 BF FD | 	call	#_converttoint
12604     10 26 06 F1 | 	add	local01, #16
12608     13 FB 61 FC | 	wrlong	result1, local01
1260c                 | ' fortop+=1
1260c                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
1260c                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
1260c                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
1260c                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
1260c     4A 00 00 FF 
12610     80 E4 05 F1 | 	add	objptr, ##38016
12614     F2 12 02 FB | 	rdlong	arg01, objptr
12618     09 27 02 F6 | 	mov	local01, arg01
1261c     01 26 66 F0 | 	shl	local01, #1
12620     09 27 02 F1 | 	add	local01, arg01
12624     02 26 66 F0 | 	shl	local01, #2
12628     03 00 00 FF 
1262c     04 E4 85 F1 | 	sub	objptr, ##1540
12630     F2 26 02 F1 | 	add	local01, objptr
12634     08 26 06 F1 | 	add	local01, #8
12638     13 27 02 FB | 	rdlong	local01, local01
1263c     FE 27 0E F2 | 	cmp	local01, #510 wz
12640     47 00 00 FF 
12644     7C E4 85 F1 | 	sub	objptr, ##36476
12648     70 00 90 5D |  if_ne	jmp	#LR__1470
1264c     50 00 00 FF 
12650     30 E5 05 F1 | 	add	objptr, ##41264
12654     F2 12 02 FB | 	rdlong	arg01, objptr
12658     09 27 02 F6 | 	mov	local01, arg01
1265c     02 26 66 F0 | 	shl	local01, #2
12660     09 27 02 F1 | 	add	local01, arg01
12664     02 26 66 F0 | 	shl	local01, #2
12668     06 00 00 FF 
1266c     98 E4 85 F1 | 	sub	objptr, ##3224
12670     F2 26 02 F1 | 	add	local01, objptr
12674     06 00 00 FF 
12678     20 E4 05 F1 | 	add	objptr, ##3104
1267c     F2 12 02 FB | 	rdlong	arg01, objptr
12680     13 13 62 FC | 	wrlong	arg01, local01
12684     78 E4 05 F1 | 	add	objptr, #120
12688     F2 12 02 FB | 	rdlong	arg01, objptr
1268c     09 27 02 F6 | 	mov	local01, arg01
12690     02 26 66 F0 | 	shl	local01, #2
12694     09 27 02 F1 | 	add	local01, arg01
12698     02 26 66 F0 | 	shl	local01, #2
1269c     06 00 00 FF 
126a0     98 E4 85 F1 | 	sub	objptr, ##3224
126a4     F2 26 02 F1 | 	add	local01, objptr
126a8     04 26 06 F1 | 	add	local01, #4
126ac     13 01 68 FC | 	wrlong	#0, local01
126b0     4A 00 00 FF 
126b4     98 E4 85 F1 | 	sub	objptr, ##38040
126b8     78 00 90 FD | 	jmp	#LR__1471
126bc                 | LR__1470
126bc     50 00 00 FF 
126c0     30 E5 05 F1 | 	add	objptr, ##41264
126c4     F2 12 02 FB | 	rdlong	arg01, objptr
126c8     09 27 02 F6 | 	mov	local01, arg01
126cc     02 26 66 F0 | 	shl	local01, #2
126d0     09 27 02 F1 | 	add	local01, arg01
126d4     02 26 66 F0 | 	shl	local01, #2
126d8     06 00 00 FF 
126dc     98 E4 85 F1 | 	sub	objptr, ##3224
126e0     F2 26 02 F1 | 	add	local01, objptr
126e4     06 00 00 FF 
126e8     28 E4 05 F1 | 	add	objptr, ##3112
126ec     F2 12 02 FB | 	rdlong	arg01, objptr
126f0     13 13 62 FC | 	wrlong	arg01, local01
126f4     70 E4 05 F1 | 	add	objptr, #112
126f8     F2 12 02 FB | 	rdlong	arg01, objptr
126fc     09 27 02 F6 | 	mov	local01, arg01
12700     02 26 66 F0 | 	shl	local01, #2
12704     09 27 02 F1 | 	add	local01, arg01
12708     02 26 66 F0 | 	shl	local01, #2
1270c     06 00 00 FF 
12710     98 E4 85 F1 | 	sub	objptr, ##3224
12714     F2 26 02 F1 | 	add	local01, objptr
12718     18 E4 85 F1 | 	sub	objptr, #24
1271c     F2 12 02 FB | 	rdlong	arg01, objptr
12720     4A 00 00 FF 
12724     80 E4 85 F1 | 	sub	objptr, ##38016
12728     01 12 06 F1 | 	add	arg01, #1
1272c     04 26 06 F1 | 	add	local01, #4
12730     13 13 62 FC | 	wrlong	arg01, local01
12734                 | LR__1471
12734     A7 F0 03 F6 | 	mov	ptra, fp
12738     B2 00 A0 FD | 	call	#popregs_
1273c                 | _do_for_ret
1273c     2D 00 64 FD | 	ret
12740                 | 
12740                 | ' 
12740                 | ' '-------------------- frame
12740                 | ' 
12740                 | ' sub do_frame
12740                 | _do_frame
12740     03 4A 05 F6 | 	mov	COUNT_, #3
12744     A8 00 A0 FD | 	call	#pushregs_
12748     30 F0 07 F1 | 	add	ptra, #48
1274c     5C B0 BF FD | 	call	#_pop
12750     FD 16 02 F6 | 	mov	arg03, result1
12754     FE 14 02 F6 | 	mov	arg02, result2
12758     FF 1A 02 F6 | 	mov	arg05, result3
1275c     24 4E 05 F1 | 	add	fp, #36
12760     A7 16 62 FC | 	wrlong	arg03, fp
12764     04 4E 05 F1 | 	add	fp, #4
12768     A7 14 62 FC | 	wrlong	arg02, fp
1276c     04 4E 05 F1 | 	add	fp, #4
12770     A7 1A 62 FC | 	wrlong	arg05, fp
12774     2C 4E 85 F1 | 	sub	fp, #44
12778     30 B0 BF FD | 	call	#_pop
1277c     FD 16 02 F6 | 	mov	arg03, result1
12780     FE 14 02 F6 | 	mov	arg02, result2
12784     FF 1A 02 F6 | 	mov	arg05, result3
12788     18 4E 05 F1 | 	add	fp, #24
1278c     A7 16 62 FC | 	wrlong	arg03, fp
12790     04 4E 05 F1 | 	add	fp, #4
12794     A7 14 62 FC | 	wrlong	arg02, fp
12798     04 4E 05 F1 | 	add	fp, #4
1279c     A7 1A 62 FC | 	wrlong	arg05, fp
127a0     20 4E 85 F1 | 	sub	fp, #32
127a4     04 B0 BF FD | 	call	#_pop
127a8     FD 16 02 F6 | 	mov	arg03, result1
127ac     FE 14 02 F6 | 	mov	arg02, result2
127b0     FF 1A 02 F6 | 	mov	arg05, result3
127b4     0C 4E 05 F1 | 	add	fp, #12
127b8     A7 16 62 FC | 	wrlong	arg03, fp
127bc     04 4E 05 F1 | 	add	fp, #4
127c0     A7 14 62 FC | 	wrlong	arg02, fp
127c4     04 4E 05 F1 | 	add	fp, #4
127c8     A7 1A 62 FC | 	wrlong	arg05, fp
127cc     14 4E 85 F1 | 	sub	fp, #20
127d0     D8 AF BF FD | 	call	#_pop
127d4     FF 16 02 F6 | 	mov	arg03, result3
127d8     A7 FA 61 FC | 	wrlong	result1, fp
127dc     04 4E 05 F1 | 	add	fp, #4
127e0     A7 FC 61 FC | 	wrlong	result2, fp
127e4     04 4E 05 F1 | 	add	fp, #4
127e8     A7 16 62 FC | 	wrlong	arg03, fp
127ec     08 4E 85 F1 | 	sub	fp, #8
127f0     A7 12 02 F6 | 	mov	arg01, fp
127f4     98 B1 BF FD | 	call	#_converttoint
127f8     FD 26 02 F6 | 	mov	local01, result1
127fc     0C 4E 05 F1 | 	add	fp, #12
12800     A7 12 02 F6 | 	mov	arg01, fp
12804     0C 4E 85 F1 | 	sub	fp, #12
12808     84 B1 BF FD | 	call	#_converttoint
1280c     FD 28 02 F6 | 	mov	local02, result1
12810     18 4E 05 F1 | 	add	fp, #24
12814     A7 12 02 F6 | 	mov	arg01, fp
12818     18 4E 85 F1 | 	sub	fp, #24
1281c     70 B1 BF FD | 	call	#_converttoint
12820     FD 2A 02 F6 | 	mov	local03, result1
12824     24 4E 05 F1 | 	add	fp, #36
12828     A7 12 02 F6 | 	mov	arg01, fp
1282c     24 4E 85 F1 | 	sub	fp, #36
12830     5C B1 BF FD | 	call	#_converttoint
12834     FD 18 02 F6 | 	mov	arg04, result1
12838     37 00 00 FF 
1283c     28 E4 05 F1 | 	add	objptr, ##28200
12840     F2 1A 02 FB | 	rdlong	arg05, objptr
12844     37 00 00 FF 
12848     28 E4 85 F1 | 	sub	objptr, ##28200
1284c     13 13 02 F6 | 	mov	arg01, local01
12850     14 15 02 F6 | 	mov	arg02, local02
12854     15 17 02 F6 | 	mov	arg03, local03
12858     88 2C B1 FD | 	call	#_hg010b_spin2_frame
1285c     A7 F0 03 F6 | 	mov	ptra, fp
12860     B2 00 A0 FD | 	call	#popregs_
12864                 | _do_frame_ret
12864     2D 00 64 FD | 	ret
12868                 | 
12868                 | ' 
12868                 | ' '-------------------- framebuf
12868                 | ' 
12868                 | ' sub do_framebuf
12868                 | _do_framebuf
12868     00 4A 05 F6 | 	mov	COUNT_, #0
1286c     A8 00 A0 FD | 	call	#pushregs_
12870     0C F0 07 F1 | 	add	ptra, #12
12874     08 4E 05 F1 | 	add	fp, #8
12878     A7 3A 68 FC | 	wrlong	#29, fp
1287c     F2 12 02 FB | 	rdlong	arg01, objptr
12880     08 4E 85 F1 | 	sub	fp, #8
12884     A7 12 62 FC | 	wrlong	arg01, fp
12888     A7 12 02 F6 | 	mov	arg01, fp
1288c     B4 AF BF FD | 	call	#_push
12890     A7 F0 03 F6 | 	mov	ptra, fp
12894     B2 00 A0 FD | 	call	#popregs_
12898                 | _do_framebuf_ret
12898     2D 00 64 FD | 	ret
1289c                 | 
1289c                 | ' '-------------------- fre
1289c                 | ' 
1289c                 | ' sub do_fre
1289c                 | _do_fre
1289c     01 4A 05 F6 | 	mov	COUNT_, #1
128a0     A8 00 A0 FD | 	call	#pushregs_
128a4     0C F0 07 F1 | 	add	ptra, #12
128a8     52 00 00 FF 
128ac     D0 E4 05 F1 | 	add	objptr, ##42192
128b0     F2 12 02 FB | 	rdlong	arg01, objptr
128b4     0F 00 00 FF 
128b8     74 E4 85 F1 | 	sub	objptr, ##7796
128bc     F2 26 02 FB | 	rdlong	local01, objptr
128c0     13 13 82 F1 | 	sub	arg01, local01
128c4     0F 00 00 FF 
128c8     F0 E4 05 F1 | 	add	objptr, ##7920
128cc     F2 12 62 FC | 	wrlong	arg01, objptr
128d0     08 4E 05 F1 | 	add	fp, #8
128d4     A7 3A 68 FC | 	wrlong	#29, fp
128d8     08 4E 85 F1 | 	sub	fp, #8
128dc     F2 26 02 FB | 	rdlong	local01, objptr
128e0     52 00 00 FF 
128e4     4C E5 85 F1 | 	sub	objptr, ##42316
128e8     A7 26 62 FC | 	wrlong	local01, fp
128ec     A7 12 02 F6 | 	mov	arg01, fp
128f0     50 AF BF FD | 	call	#_push
128f4     A7 F0 03 F6 | 	mov	ptra, fp
128f8     B2 00 A0 FD | 	call	#popregs_
128fc                 | _do_fre_ret
128fc     2D 00 64 FD | 	ret
12900                 | 
12900                 | ' 
12900                 | ' '-------------------- get
12900                 | ' 
12900                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12900                 | _do_get
12900     09 4A 05 F6 | 	mov	COUNT_, #9
12904     A8 00 A0 FD | 	call	#pushregs_
12908     40 F0 07 F1 | 	add	ptra, #64
1290c     4A 00 00 FF 
12910     80 E4 05 F1 | 	add	objptr, ##38016
12914     F2 1A 02 FB | 	rdlong	arg05, objptr
12918     0D 19 02 F6 | 	mov	arg04, arg05
1291c     01 18 66 F0 | 	shl	arg04, #1
12920     0D 19 02 F1 | 	add	arg04, arg05
12924     02 18 66 F0 | 	shl	arg04, #2
12928     03 00 00 FF 
1292c     04 E4 85 F1 | 	sub	objptr, ##1540
12930     F2 18 02 F1 | 	add	arg04, objptr
12934     0C 1B 02 FB | 	rdlong	arg05, arg04
12938     A7 1A 62 FC | 	wrlong	arg05, fp
1293c                 | ' 
1293c                 | ' numpar=compiledline(lineptr_e).result.uresult
1293c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1293c     04 1A 0E F2 | 	cmp	arg05, #4 wz
12940     47 00 00 FF 
12944     7C E4 85 F1 | 	sub	objptr, ##36476
12948     48 00 90 5D |  if_ne	jmp	#LR__1480
1294c     5C AE BF FD | 	call	#_pop
12950     FF 1A 02 F6 | 	mov	arg05, result3
12954     1C 4E 05 F1 | 	add	fp, #28
12958     A7 FA 61 FC | 	wrlong	result1, fp
1295c     04 4E 05 F1 | 	add	fp, #4
12960     A7 FC 61 FC | 	wrlong	result2, fp
12964     04 4E 05 F1 | 	add	fp, #4
12968     A7 1A 62 FC | 	wrlong	arg05, fp
1296c     08 4E 85 F1 | 	sub	fp, #8
12970     A7 12 02 F6 | 	mov	arg01, fp
12974     1C 4E 85 F1 | 	sub	fp, #28
12978     14 B0 BF FD | 	call	#_converttoint
1297c     52 00 00 FF 
12980     48 E5 05 F1 | 	add	objptr, ##42312
12984     F2 FA 61 FC | 	wrlong	result1, objptr
12988     52 00 00 FF 
1298c     48 E5 85 F1 | 	sub	objptr, ##42312
12990     18 00 90 FD | 	jmp	#LR__1481
12994                 | LR__1480
12994     52 00 00 FF 
12998     48 E5 05 F1 | 	add	objptr, ##42312
1299c     FF FF FF FF 
129a0     F2 FE 6B FC | 	wrlong	##-1, objptr
129a4     52 00 00 FF 
129a8     48 E5 85 F1 | 	sub	objptr, ##42312
129ac                 | LR__1481
129ac                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
129ac     A7 16 02 FB | 	rdlong	arg03, fp
129b0     03 16 56 F2 | 	cmps	arg03, #3 wc
129b4     40 00 90 CD |  if_b	jmp	#LR__1482
129b8     F0 AD BF FD | 	call	#_pop
129bc     FF 16 02 F6 | 	mov	arg03, result3
129c0     1C 4E 05 F1 | 	add	fp, #28
129c4     A7 FA 61 FC | 	wrlong	result1, fp
129c8     04 4E 05 F1 | 	add	fp, #4
129cc     A7 FC 61 FC | 	wrlong	result2, fp
129d0     04 4E 05 F1 | 	add	fp, #4
129d4     A7 16 62 FC | 	wrlong	arg03, fp
129d8     08 4E 85 F1 | 	sub	fp, #8
129dc     A7 12 02 F6 | 	mov	arg01, fp
129e0     1C 4E 85 F1 | 	sub	fp, #28
129e4     A8 AF BF FD | 	call	#_converttoint
129e8     08 4E 05 F1 | 	add	fp, #8
129ec     A7 FA 61 FC | 	wrlong	result1, fp
129f0     08 4E 85 F1 | 	sub	fp, #8
129f4     0C 00 90 FD | 	jmp	#LR__1483
129f8                 | LR__1482
129f8     08 4E 05 F1 | 	add	fp, #8
129fc     A7 02 68 FC | 	wrlong	#1, fp
12a00     08 4E 85 F1 | 	sub	fp, #8
12a04                 | LR__1483
12a04                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12a04     A7 16 02 FB | 	rdlong	arg03, fp
12a08     02 16 56 F2 | 	cmps	arg03, #2 wc
12a0c     3C 00 90 CD |  if_b	jmp	#LR__1484
12a10     98 AD BF FD | 	call	#_pop
12a14     FF 16 02 F6 | 	mov	arg03, result3
12a18     1C 4E 05 F1 | 	add	fp, #28
12a1c     A7 FA 61 FC | 	wrlong	result1, fp
12a20     04 4E 05 F1 | 	add	fp, #4
12a24     A7 FC 61 FC | 	wrlong	result2, fp
12a28     04 4E 05 F1 | 	add	fp, #4
12a2c     A7 16 62 FC | 	wrlong	arg03, fp
12a30     08 4E 85 F1 | 	sub	fp, #8
12a34     A7 12 02 F6 | 	mov	arg01, fp
12a38     1C 4E 85 F1 | 	sub	fp, #28
12a3c     50 AF BF FD | 	call	#_converttoint
12a40     0C 4E 05 F1 | 	add	fp, #12
12a44     A7 FA 61 FC | 	wrlong	result1, fp
12a48     0C 4E 85 F1 | 	sub	fp, #12
12a4c                 | LR__1484
12a4c     5C AD BF FD | 	call	#_pop
12a50     FF 16 02 F6 | 	mov	arg03, result3
12a54     1C 4E 05 F1 | 	add	fp, #28
12a58     A7 FA 61 FC | 	wrlong	result1, fp
12a5c     04 4E 05 F1 | 	add	fp, #4
12a60     A7 FC 61 FC | 	wrlong	result2, fp
12a64     04 4E 05 F1 | 	add	fp, #4
12a68     A7 16 62 FC | 	wrlong	arg03, fp
12a6c     08 4E 85 F1 | 	sub	fp, #8
12a70     A7 12 02 F6 | 	mov	arg01, fp
12a74     1C 4E 85 F1 | 	sub	fp, #28
12a78     14 AF BF FD | 	call	#_converttoint
12a7c     04 4E 05 F1 | 	add	fp, #4
12a80     A7 FA 61 FC | 	wrlong	result1, fp
12a84     10 4E 05 F1 | 	add	fp, #16
12a88     A7 16 02 FB | 	rdlong	arg03, fp
12a8c     14 4E 85 F1 | 	sub	fp, #20
12a90     02 16 66 F0 | 	shl	arg03, #2
12a94     50 00 00 FF 
12a98     C4 E4 05 F1 | 	add	objptr, ##41156
12a9c     F2 26 02 F6 | 	mov	local01, objptr
12aa0     F2 16 02 F1 | 	add	arg03, objptr
12aa4     0B 01 68 FC | 	wrlong	#0, arg03
12aa8                 | ' t1=pop() : channel=converttoint(t1)
12aa8                 | ' getres(j)=0
12aa8                 | ' if pos>=0 then
12aa8     02 00 00 FF 
12aac     84 E4 05 F1 | 	add	objptr, ##1156
12ab0     F2 28 02 FB | 	rdlong	local02, objptr
12ab4     52 00 00 FF 
12ab8     48 E5 85 F1 | 	sub	objptr, ##42312
12abc     00 28 56 F2 | 	cmps	local02, #0 wc
12ac0     F0 01 90 CD |  if_b	jmp	#LR__1491
12ac4                 | '   for i=0 to  amount/1024
12ac4     10 4E 05 F1 | 	add	fp, #16
12ac8     A7 00 68 FC | 	wrlong	#0, fp
12acc     08 4E 85 F1 | 	sub	fp, #8
12ad0     A7 2A 02 FB | 	rdlong	local03, fp
12ad4     08 4E 85 F1 | 	sub	fp, #8
12ad8     15 2D 52 F6 | 	abs	local04, local03 wc
12adc     0A 2C 46 F0 | 	shr	local04, #10
12ae0     16 2D 82 F6 | 	negc	local04, local04
12ae4     01 2C 06 F1 | 	add	local04, #1
12ae8                 | LR__1485
12ae8     10 4E 05 F1 | 	add	fp, #16
12aec     A7 2A 02 FB | 	rdlong	local03, fp
12af0     10 4E 85 F1 | 	sub	fp, #16
12af4     16 2B 52 F2 | 	cmps	local03, local04 wc
12af8     9C 03 90 3D |  if_ae	jmp	#LR__1499
12afc                 | '     get #channel,pos+1,block(0),amount,r
12afc     04 4E 05 F1 | 	add	fp, #4
12b00     A7 12 02 FB | 	rdlong	arg01, fp
12b04     52 00 00 FF 
12b08     48 E5 05 F1 | 	add	objptr, ##42312
12b0c     F2 14 02 FB | 	rdlong	arg02, objptr
12b10     01 14 06 F1 | 	add	arg02, #1
12b14     04 00 00 FF 
12b18     94 E4 85 F1 | 	sub	objptr, ##2196
12b1c     F2 16 02 F6 | 	mov	arg03, objptr
12b20     4E 00 00 FF 
12b24     B4 E4 85 F1 | 	sub	objptr, ##40116
12b28     04 4E 05 F1 | 	add	fp, #4
12b2c     A7 18 02 FB | 	rdlong	arg04, fp
12b30     08 4E 85 F1 | 	sub	fp, #8
12b34     01 1A 06 F6 | 	mov	arg05, #1
12b38     F0 57 B1 FD | 	call	#__system___basic_get
12b3c     18 4E 05 F1 | 	add	fp, #24
12b40     A7 FA 61 FC | 	wrlong	result1, fp
12b44                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12b44     0C 4E 85 F1 | 	sub	fp, #12
12b48     A7 28 02 FB | 	rdlong	local02, fp
12b4c     0C 4E 85 F1 | 	sub	fp, #12
12b50     00 04 00 FF 
12b54     00 28 56 F2 | 	cmps	local02, ##524288 wc
12b58     7C 00 90 3D |  if_ae	jmp	#LR__1487
12b5c     14 4E 05 F1 | 	add	fp, #20
12b60     A7 00 68 FC | 	wrlong	#0, fp
12b64     04 4E 05 F1 | 	add	fp, #4
12b68     A7 2E 02 FB | 	rdlong	local05, fp
12b6c     18 4E 85 F1 | 	sub	fp, #24
12b70                 | LR__1486
12b70     14 4E 05 F1 | 	add	fp, #20
12b74     A7 28 02 FB | 	rdlong	local02, fp
12b78     14 4E 85 F1 | 	sub	fp, #20
12b7c     17 29 52 F2 | 	cmps	local02, local05 wc
12b80     D8 00 90 3D |  if_ae	jmp	#LR__1490
12b84     0C 4E 05 F1 | 	add	fp, #12
12b88     A7 12 02 FB | 	rdlong	arg01, fp
12b8c     04 4E 05 F1 | 	add	fp, #4
12b90     A7 2A 02 FB | 	rdlong	local03, fp
12b94     0A 2A 66 F0 | 	shl	local03, #10
12b98     15 13 02 F1 | 	add	arg01, local03
12b9c     04 4E 05 F1 | 	add	fp, #4
12ba0     A7 2A 02 FB | 	rdlong	local03, fp
12ba4     15 13 02 F1 | 	add	arg01, local03
12ba8     4E 00 00 FF 
12bac     B4 E4 05 F1 | 	add	objptr, ##40116
12bb0     F2 2A 02 F1 | 	add	local03, objptr
12bb4     15 15 C2 FA | 	rdbyte	arg02, local03
12bb8     09 15 42 FC | 	wrbyte	arg02, arg01
12bbc     4E 00 00 FF 
12bc0     B4 E4 85 F1 | 	sub	objptr, ##40116
12bc4     A7 2A 02 FB | 	rdlong	local03, fp
12bc8     01 2A 06 F1 | 	add	local03, #1
12bcc     A7 2A 62 FC | 	wrlong	local03, fp
12bd0     14 4E 85 F1 | 	sub	fp, #20
12bd4     98 FF 9F FD | 	jmp	#LR__1486
12bd8                 | LR__1487
12bd8     14 4E 05 F1 | 	add	fp, #20
12bdc     A7 00 68 FC | 	wrlong	#0, fp
12be0     04 4E 05 F1 | 	add	fp, #4
12be4     A7 30 02 FB | 	rdlong	local06, fp
12be8     18 4E 85 F1 | 	sub	fp, #24
12bec                 | LR__1488
12bec     14 4E 05 F1 | 	add	fp, #20
12bf0     A7 28 02 FB | 	rdlong	local02, fp
12bf4     14 4E 85 F1 | 	sub	fp, #20
12bf8     18 29 52 F2 | 	cmps	local02, local06 wc
12bfc     5C 00 90 3D |  if_ae	jmp	#LR__1489
12c00     0C 4E 05 F1 | 	add	fp, #12
12c04     A7 12 02 FB | 	rdlong	arg01, fp
12c08     04 4E 05 F1 | 	add	fp, #4
12c0c     A7 2E 02 FB | 	rdlong	local05, fp
12c10     0A 2E 66 F0 | 	shl	local05, #10
12c14     17 13 02 F1 | 	add	arg01, local05
12c18     04 4E 05 F1 | 	add	fp, #4
12c1c     A7 2E 02 FB | 	rdlong	local05, fp
12c20     17 13 02 F1 | 	add	arg01, local05
12c24     14 4E 85 F1 | 	sub	fp, #20
12c28     4E 00 00 FF 
12c2c     B4 E4 05 F1 | 	add	objptr, ##40116
12c30     F2 2E 02 F1 | 	add	local05, objptr
12c34     17 15 C2 FA | 	rdbyte	arg02, local05
12c38     4E 00 00 FF 
12c3c     B4 E4 85 F1 | 	sub	objptr, ##40116
12c40     8C 10 B1 FD | 	call	#_pspoke
12c44     14 4E 05 F1 | 	add	fp, #20
12c48     A7 2E 02 FB | 	rdlong	local05, fp
12c4c     01 2E 06 F1 | 	add	local05, #1
12c50     A7 2E 62 FC | 	wrlong	local05, fp
12c54     14 4E 85 F1 | 	sub	fp, #20
12c58     90 FF 9F FD | 	jmp	#LR__1488
12c5c                 | LR__1489
12c5c                 | LR__1490
12c5c     14 4E 05 F1 | 	add	fp, #20
12c60     A7 30 02 FB | 	rdlong	local06, fp
12c64     18 2B 02 F6 | 	mov	local03, local06
12c68     02 2A 66 F0 | 	shl	local03, #2
12c6c     50 00 00 FF 
12c70     C4 E4 05 F1 | 	add	objptr, ##41156
12c74     F2 2A 02 F1 | 	add	local03, objptr
12c78     02 30 66 F0 | 	shl	local06, #2
12c7c     F2 30 02 F1 | 	add	local06, objptr
12c80     18 31 02 FB | 	rdlong	local06, local06
12c84     04 4E 05 F1 | 	add	fp, #4
12c88     A7 2E 02 FB | 	rdlong	local05, fp
12c8c     17 31 02 F1 | 	add	local06, local05
12c90     15 31 62 FC | 	wrlong	local06, local03
12c94     08 4E 85 F1 | 	sub	fp, #8
12c98     A7 30 02 FB | 	rdlong	local06, fp
12c9c     01 30 06 F1 | 	add	local06, #1
12ca0     A7 30 62 FC | 	wrlong	local06, fp
12ca4     10 4E 85 F1 | 	sub	fp, #16
12ca8     50 00 00 FF 
12cac     C4 E4 85 F1 | 	sub	objptr, ##41156
12cb0     34 FE 9F FD | 	jmp	#LR__1485
12cb4                 | LR__1491
12cb4                 | '   for i=0 to  amount/1024
12cb4     10 4E 05 F1 | 	add	fp, #16
12cb8     A7 00 68 FC | 	wrlong	#0, fp
12cbc     08 4E 85 F1 | 	sub	fp, #8
12cc0     A7 2A 02 FB | 	rdlong	local03, fp
12cc4     08 4E 85 F1 | 	sub	fp, #8
12cc8     15 33 52 F6 | 	abs	local07, local03 wc
12ccc     0A 32 46 F0 | 	shr	local07, #10
12cd0     19 33 82 F6 | 	negc	local07, local07
12cd4     01 32 06 F1 | 	add	local07, #1
12cd8                 | LR__1492
12cd8     10 4E 05 F1 | 	add	fp, #16
12cdc     A7 2A 02 FB | 	rdlong	local03, fp
12ce0     10 4E 85 F1 | 	sub	fp, #16
12ce4     19 2B 52 F2 | 	cmps	local03, local07 wc
12ce8     AC 01 90 3D |  if_ae	jmp	#LR__1498
12cec                 | '     get #channel,,block(0),amount,r
12cec     04 4E 05 F1 | 	add	fp, #4
12cf0     A7 12 02 FB | 	rdlong	arg01, fp
12cf4     4E 00 00 FF 
12cf8     B4 E4 05 F1 | 	add	objptr, ##40116
12cfc     F2 16 02 F6 | 	mov	arg03, objptr
12d00     4E 00 00 FF 
12d04     B4 E4 85 F1 | 	sub	objptr, ##40116
12d08     04 4E 05 F1 | 	add	fp, #4
12d0c     A7 18 02 FB | 	rdlong	arg04, fp
12d10     08 4E 85 F1 | 	sub	fp, #8
12d14     00 14 06 F6 | 	mov	arg02, #0
12d18     01 1A 06 F6 | 	mov	arg05, #1
12d1c     0C 56 B1 FD | 	call	#__system___basic_get
12d20     18 4E 05 F1 | 	add	fp, #24
12d24     A7 FA 61 FC | 	wrlong	result1, fp
12d28                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12d28     0C 4E 85 F1 | 	sub	fp, #12
12d2c     A7 28 02 FB | 	rdlong	local02, fp
12d30     0C 4E 85 F1 | 	sub	fp, #12
12d34     00 04 00 FF 
12d38     00 28 56 F2 | 	cmps	local02, ##524288 wc
12d3c     7C 00 90 3D |  if_ae	jmp	#LR__1494
12d40     14 4E 05 F1 | 	add	fp, #20
12d44     A7 00 68 FC | 	wrlong	#0, fp
12d48     04 4E 05 F1 | 	add	fp, #4
12d4c     A7 34 02 FB | 	rdlong	local08, fp
12d50     18 4E 85 F1 | 	sub	fp, #24
12d54                 | LR__1493
12d54     14 4E 05 F1 | 	add	fp, #20
12d58     A7 28 02 FB | 	rdlong	local02, fp
12d5c     14 4E 85 F1 | 	sub	fp, #20
12d60     1A 29 52 F2 | 	cmps	local02, local08 wc
12d64     D8 00 90 3D |  if_ae	jmp	#LR__1497
12d68     0C 4E 05 F1 | 	add	fp, #12
12d6c     A7 12 02 FB | 	rdlong	arg01, fp
12d70     04 4E 05 F1 | 	add	fp, #4
12d74     A7 30 02 FB | 	rdlong	local06, fp
12d78     0A 30 66 F0 | 	shl	local06, #10
12d7c     18 13 02 F1 | 	add	arg01, local06
12d80     04 4E 05 F1 | 	add	fp, #4
12d84     A7 30 02 FB | 	rdlong	local06, fp
12d88     18 13 02 F1 | 	add	arg01, local06
12d8c     4E 00 00 FF 
12d90     B4 E4 05 F1 | 	add	objptr, ##40116
12d94     F2 30 02 F1 | 	add	local06, objptr
12d98     18 15 C2 FA | 	rdbyte	arg02, local06
12d9c     09 15 42 FC | 	wrbyte	arg02, arg01
12da0     4E 00 00 FF 
12da4     B4 E4 85 F1 | 	sub	objptr, ##40116
12da8     A7 30 02 FB | 	rdlong	local06, fp
12dac     01 30 06 F1 | 	add	local06, #1
12db0     A7 30 62 FC | 	wrlong	local06, fp
12db4     14 4E 85 F1 | 	sub	fp, #20
12db8     98 FF 9F FD | 	jmp	#LR__1493
12dbc                 | LR__1494
12dbc     14 4E 05 F1 | 	add	fp, #20
12dc0     A7 00 68 FC | 	wrlong	#0, fp
12dc4     04 4E 05 F1 | 	add	fp, #4
12dc8     A7 36 02 FB | 	rdlong	local09, fp
12dcc     18 4E 85 F1 | 	sub	fp, #24
12dd0                 | LR__1495
12dd0     14 4E 05 F1 | 	add	fp, #20
12dd4     A7 28 02 FB | 	rdlong	local02, fp
12dd8     14 4E 85 F1 | 	sub	fp, #20
12ddc     1B 29 52 F2 | 	cmps	local02, local09 wc
12de0     5C 00 90 3D |  if_ae	jmp	#LR__1496
12de4     0C 4E 05 F1 | 	add	fp, #12
12de8     A7 12 02 FB | 	rdlong	arg01, fp
12dec     04 4E 05 F1 | 	add	fp, #4
12df0     A7 34 02 FB | 	rdlong	local08, fp
12df4     0A 34 66 F0 | 	shl	local08, #10
12df8     1A 13 02 F1 | 	add	arg01, local08
12dfc     04 4E 05 F1 | 	add	fp, #4
12e00     A7 34 02 FB | 	rdlong	local08, fp
12e04     1A 13 02 F1 | 	add	arg01, local08
12e08     14 4E 85 F1 | 	sub	fp, #20
12e0c     4E 00 00 FF 
12e10     B4 E4 05 F1 | 	add	objptr, ##40116
12e14     F2 34 02 F1 | 	add	local08, objptr
12e18     1A 15 C2 FA | 	rdbyte	arg02, local08
12e1c     4E 00 00 FF 
12e20     B4 E4 85 F1 | 	sub	objptr, ##40116
12e24     A8 0E B1 FD | 	call	#_pspoke
12e28     14 4E 05 F1 | 	add	fp, #20
12e2c     A7 34 02 FB | 	rdlong	local08, fp
12e30     01 34 06 F1 | 	add	local08, #1
12e34     A7 34 62 FC | 	wrlong	local08, fp
12e38     14 4E 85 F1 | 	sub	fp, #20
12e3c     90 FF 9F FD | 	jmp	#LR__1495
12e40                 | LR__1496
12e40                 | LR__1497
12e40     14 4E 05 F1 | 	add	fp, #20
12e44     A7 36 02 FB | 	rdlong	local09, fp
12e48     1B 31 02 F6 | 	mov	local06, local09
12e4c     02 30 66 F0 | 	shl	local06, #2
12e50     50 00 00 FF 
12e54     C4 E4 05 F1 | 	add	objptr, ##41156
12e58     F2 30 02 F1 | 	add	local06, objptr
12e5c     02 36 66 F0 | 	shl	local09, #2
12e60     F2 36 02 F1 | 	add	local09, objptr
12e64     1B 37 02 FB | 	rdlong	local09, local09
12e68     04 4E 05 F1 | 	add	fp, #4
12e6c     A7 34 02 FB | 	rdlong	local08, fp
12e70     1A 37 02 F1 | 	add	local09, local08
12e74     18 37 62 FC | 	wrlong	local09, local06
12e78     08 4E 85 F1 | 	sub	fp, #8
12e7c     A7 36 02 FB | 	rdlong	local09, fp
12e80     01 36 06 F1 | 	add	local09, #1
12e84     A7 36 62 FC | 	wrlong	local09, fp
12e88     10 4E 85 F1 | 	sub	fp, #16
12e8c     50 00 00 FF 
12e90     C4 E4 85 F1 | 	sub	objptr, ##41156
12e94     40 FE 9F FD | 	jmp	#LR__1492
12e98                 | LR__1498
12e98                 | LR__1499
12e98     A7 F0 03 F6 | 	mov	ptra, fp
12e9c     B2 00 A0 FD | 	call	#popregs_
12ea0                 | _do_get_ret
12ea0     2D 00 64 FD | 	ret
12ea4                 | 
12ea4                 | ' 
12ea4                 | ' '-------------------- getcolor
12ea4                 | ' 
12ea4                 | ' sub do_getcolor
12ea4                 | _do_getcolor
12ea4     01 4A 05 F6 | 	mov	COUNT_, #1
12ea8     A8 00 A0 FD | 	call	#pushregs_
12eac     10 F0 07 F1 | 	add	ptra, #16
12eb0     4A 00 00 FF 
12eb4     80 E4 05 F1 | 	add	objptr, ##38016
12eb8     F2 26 02 FB | 	rdlong	local01, objptr
12ebc     13 17 02 F6 | 	mov	arg03, local01
12ec0     01 16 66 F0 | 	shl	arg03, #1
12ec4     13 17 02 F1 | 	add	arg03, local01
12ec8     02 16 66 F0 | 	shl	arg03, #2
12ecc     03 00 00 FF 
12ed0     04 E4 85 F1 | 	sub	objptr, ##1540
12ed4     F2 16 02 F1 | 	add	arg03, objptr
12ed8     0B 17 02 FB | 	rdlong	arg03, arg03
12edc     0C 4E 05 F1 | 	add	fp, #12
12ee0     A7 16 62 FC | 	wrlong	arg03, fp
12ee4                 | ' 
12ee4                 | ' numpar=compiledline(lineptr_e).result.uresult
12ee4                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12ee4     0C 4E 85 F1 | 	sub	fp, #12
12ee8     02 16 16 F2 | 	cmp	arg03, #2 wc
12eec     47 00 00 FF 
12ef0     7C E4 85 F1 | 	sub	objptr, ##36476
12ef4     0C 4E 05 C1 |  if_b	add	fp, #12
12ef8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12efc     0C 4E 85 C1 |  if_b	sub	fp, #12
12f00     40 00 90 4D |  if_c_and_nz	jmp	#LR__1500
12f04     00 12 06 F6 | 	mov	arg01, #0
12f08     50 A2 B1 FD | 	call	#__system___getiolock_0616
12f0c     FD 12 02 F6 | 	mov	arg01, result1
12f10     A4 45 B1 FD | 	call	#__system___lockmem
12f14     BC 01 00 FF 
12f18     E0 15 06 F6 | 	mov	arg02, ##@LR__5971
12f1c     00 12 06 F6 | 	mov	arg01, #0
12f20     00 16 06 F6 | 	mov	arg03, #0
12f24     88 52 B1 FD | 	call	#__system___basic_print_string
12f28     00 12 06 F6 | 	mov	arg01, #0
12f2c     2C A2 B1 FD | 	call	#__system___getiolock_0616
12f30     FD 00 68 FC | 	wrlong	#0, result1
12f34     27 12 06 F6 | 	mov	arg01, #39
12f38     00 14 06 F6 | 	mov	arg02, #0
12f3c     60 0B B1 FD | 	call	#_printerror
12f40     60 00 90 FD | 	jmp	#LR__1501
12f44                 | LR__1500
12f44     64 A8 BF FD | 	call	#_pop
12f48     A7 FA 61 FC | 	wrlong	result1, fp
12f4c     04 4E 05 F1 | 	add	fp, #4
12f50     A7 FC 61 FC | 	wrlong	result2, fp
12f54     04 4E 05 F1 | 	add	fp, #4
12f58     A7 FE 61 FC | 	wrlong	result3, fp
12f5c     08 4E 85 F1 | 	sub	fp, #8
12f60     A7 12 02 F6 | 	mov	arg01, fp
12f64     28 AA BF FD | 	call	#_converttoint
12f68     FD 12 02 F6 | 	mov	arg01, result1
12f6c                 | ' 
12f6c                 | ' return long[palette_ptr+4*color]
12f6c     1C E4 05 F1 | 	add	objptr, #28
12f70     F2 FA 01 FB | 	rdlong	result1, objptr
12f74     1C E4 85 F1 | 	sub	objptr, #28
12f78     02 12 66 F0 | 	shl	arg01, #2
12f7c     09 FB 01 F1 | 	add	result1, arg01
12f80     FD FA 01 FB | 	rdlong	result1, result1
12f84     08 FA C5 F0 | 	sar	result1, #8
12f88     F8 FA 05 F4 | 	bitl	result1, #248
12f8c     A7 FA 61 FC | 	wrlong	result1, fp
12f90     08 4E 05 F1 | 	add	fp, #8
12f94     A7 3A 68 FC | 	wrlong	#29, fp
12f98     08 4E 85 F1 | 	sub	fp, #8
12f9c     A7 12 02 F6 | 	mov	arg01, fp
12fa0     A0 A8 BF FD | 	call	#_push
12fa4                 | LR__1501
12fa4     A7 F0 03 F6 | 	mov	ptra, fp
12fa8     B2 00 A0 FD | 	call	#popregs_
12fac                 | _do_getcolor_ret
12fac     2D 00 64 FD | 	ret
12fb0                 | 
12fb0                 | ' 
12fb0                 | ' '-------------------- getenvsustain
12fb0                 | ' 
12fb0                 | ' sub do_getenvsustain
12fb0                 | _do_getenvsustain
12fb0     01 4A 05 F6 | 	mov	COUNT_, #1
12fb4     A8 00 A0 FD | 	call	#pushregs_
12fb8     10 F0 07 F1 | 	add	ptra, #16
12fbc     4A 00 00 FF 
12fc0     80 E4 05 F1 | 	add	objptr, ##38016
12fc4     F2 26 02 FB | 	rdlong	local01, objptr
12fc8     13 17 02 F6 | 	mov	arg03, local01
12fcc     01 16 66 F0 | 	shl	arg03, #1
12fd0     13 17 02 F1 | 	add	arg03, local01
12fd4     02 16 66 F0 | 	shl	arg03, #2
12fd8     03 00 00 FF 
12fdc     04 E4 85 F1 | 	sub	objptr, ##1540
12fe0     F2 16 02 F1 | 	add	arg03, objptr
12fe4     0B 17 02 FB | 	rdlong	arg03, arg03
12fe8     0C 4E 05 F1 | 	add	fp, #12
12fec     A7 16 62 FC | 	wrlong	arg03, fp
12ff0                 | ' 
12ff0                 | ' numpar=compiledline(lineptr_e).result.uresult
12ff0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12ff0     0C 4E 85 F1 | 	sub	fp, #12
12ff4     02 16 16 F2 | 	cmp	arg03, #2 wc
12ff8     47 00 00 FF 
12ffc     7C E4 85 F1 | 	sub	objptr, ##36476
13000     0C 4E 05 C1 |  if_b	add	fp, #12
13004     A7 26 0A CB |  if_b	rdlong	local01, fp wz
13008     0C 4E 85 C1 |  if_b	sub	fp, #12
1300c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1510
13010     00 12 06 F6 | 	mov	arg01, #0
13014     44 A1 B1 FD | 	call	#__system___getiolock_0616
13018     FD 12 02 F6 | 	mov	arg01, result1
1301c     98 44 B1 FD | 	call	#__system___lockmem
13020     BC 01 00 FF 
13024     EA 15 06 F6 | 	mov	arg02, ##@LR__5972
13028     00 12 06 F6 | 	mov	arg01, #0
1302c     00 16 06 F6 | 	mov	arg03, #0
13030     7C 51 B1 FD | 	call	#__system___basic_print_string
13034     00 12 06 F6 | 	mov	arg01, #0
13038     20 A1 B1 FD | 	call	#__system___getiolock_0616
1303c     FD 00 68 FC | 	wrlong	#0, result1
13040     27 12 06 F6 | 	mov	arg01, #39
13044     00 14 06 F6 | 	mov	arg02, #0
13048     54 0A B1 FD | 	call	#_printerror
1304c     64 00 90 FD | 	jmp	#LR__1511
13050                 | LR__1510
13050     58 A7 BF FD | 	call	#_pop
13054     FD 26 02 F6 | 	mov	local01, result1
13058     FE 16 02 F6 | 	mov	arg03, result2
1305c     A7 26 62 FC | 	wrlong	local01, fp
13060     04 4E 05 F1 | 	add	fp, #4
13064     A7 16 62 FC | 	wrlong	arg03, fp
13068     04 4E 05 F1 | 	add	fp, #4
1306c     A7 FE 61 FC | 	wrlong	result3, fp
13070     08 4E 85 F1 | 	sub	fp, #8
13074     A7 12 02 F6 | 	mov	arg01, fp
13078     14 A9 BF FD | 	call	#_converttoint
1307c     FD 26 02 F6 | 	mov	local01, result1
13080     01 26 66 F0 | 	shl	local01, #1
13084     52 00 00 FF 
13088     EC E4 05 F1 | 	add	objptr, ##42220
1308c     F2 26 02 F1 | 	add	local01, objptr
13090     13 27 E2 FA | 	rdword	local01, local01
13094     A7 26 62 FC | 	wrlong	local01, fp
13098     08 4E 05 F1 | 	add	fp, #8
1309c     A7 38 68 FC | 	wrlong	#28, fp
130a0     08 4E 85 F1 | 	sub	fp, #8
130a4     A7 12 02 F6 | 	mov	arg01, fp
130a8     52 00 00 FF 
130ac     EC E4 85 F1 | 	sub	objptr, ##42220
130b0     90 A7 BF FD | 	call	#_push
130b4                 | LR__1511
130b4     A7 F0 03 F6 | 	mov	ptra, fp
130b8     B2 00 A0 FD | 	call	#popregs_
130bc                 | _do_getenvsustain_ret
130bc     2D 00 64 FD | 	ret
130c0                 | 
130c0                 | ' 
130c0                 | ' '-------------------- getnotevalue
130c0                 | ' 
130c0                 | ' sub do_getnotevalue
130c0                 | _do_getnotevalue
130c0     01 4A 05 F6 | 	mov	COUNT_, #1
130c4     A8 00 A0 FD | 	call	#pushregs_
130c8     1C F0 07 F1 | 	add	ptra, #28
130cc     DC A6 BF FD | 	call	#_pop
130d0     FF 14 02 F6 | 	mov	arg02, result3
130d4     10 4E 05 F1 | 	add	fp, #16
130d8     A7 FA 61 FC | 	wrlong	result1, fp
130dc     04 4E 05 F1 | 	add	fp, #4
130e0     A7 FC 61 FC | 	wrlong	result2, fp
130e4     04 4E 05 F1 | 	add	fp, #4
130e8     A7 14 62 FC | 	wrlong	arg02, fp
130ec     08 4E 85 F1 | 	sub	fp, #8
130f0     A7 12 02 F6 | 	mov	arg01, fp
130f4     10 4E 85 F1 | 	sub	fp, #16
130f8     94 A8 BF FD | 	call	#_converttoint
130fc     FD 14 52 F6 | 	abs	arg02, result1 wc
13100     0C 14 16 FD | 	qdiv	arg02, #12
13104     0C 4E 05 F1 | 	add	fp, #12
13108     A7 FA 61 FC | 	wrlong	result1, fp
1310c     14 00 00 FF 
13110     D8 E4 05 F1 | 	add	objptr, ##10456
13114     08 4E 85 F1 | 	sub	fp, #8
13118     19 14 62 FD | 	getqy	arg02
1311c     0A 15 82 F6 | 	negc	arg02, arg02
13120     02 14 66 F0 | 	shl	arg02, #2
13124     F2 14 02 F1 | 	add	arg02, objptr
13128     0A 15 02 FB | 	rdlong	arg02, arg02
1312c     A7 14 62 FC | 	wrlong	arg02, fp
13130     08 4E 05 F1 | 	add	fp, #8
13134     A7 14 02 FB | 	rdlong	arg02, fp
13138     0A 15 52 F6 | 	abs	arg02, arg02 wc
1313c     0C 14 16 FD | 	qdiv	arg02, #12
13140     0C 4E 85 F1 | 	sub	fp, #12
13144     14 00 00 FF 
13148     D8 E4 85 F1 | 	sub	objptr, ##10456
1314c     18 14 62 FD | 	getqx	arg02
13150     0A 13 82 F6 | 	negc	arg01, arg02
13154     09 13 52 F6 | 	abs	arg01, arg01 wc
13158     1F 26 C6 C9 |  if_b	decod	local01, #31
1315c     00 26 06 36 |  if_ae	mov	local01, #0
13160     CC 6D B1 FD | 	call	#__system___float_fromuns
13164     13 FB 61 F5 | 	xor	result1, local01
13168     08 4E 05 F1 | 	add	fp, #8
1316c     A7 FA 61 FC | 	wrlong	result1, fp
13170     FD 14 02 F6 | 	mov	arg02, result1
13174     08 4E 85 F1 | 	sub	fp, #8
13178     1E 12 C6 F9 | 	decod	arg01, #30
1317c     BC 80 B1 FD | 	call	#__system____builtin_powf
13180     FD 12 02 F6 | 	mov	arg01, result1
13184     04 4E 05 F1 | 	add	fp, #4
13188     A7 14 02 FB | 	rdlong	arg02, fp
1318c     04 4E 85 F1 | 	sub	fp, #4
13190     A0 71 B1 FD | 	call	#__system___float_mul
13194     A7 FA 61 FC | 	wrlong	result1, fp
13198     10 4E 05 F1 | 	add	fp, #16
1319c     A7 FA 61 FC | 	wrlong	result1, fp
131a0     08 4E 05 F1 | 	add	fp, #8
131a4     A7 3C 68 FC | 	wrlong	#30, fp
131a8     08 4E 85 F1 | 	sub	fp, #8
131ac     A7 12 02 F6 | 	mov	arg01, fp
131b0     10 4E 85 F1 | 	sub	fp, #16
131b4     8C A6 BF FD | 	call	#_push
131b8     A7 F0 03 F6 | 	mov	ptra, fp
131bc     B2 00 A0 FD | 	call	#popregs_
131c0                 | _do_getnotevalue_ret
131c0     2D 00 64 FD | 	ret
131c4                 | 
131c4                 | ' 
131c4                 | ' '-------------------- getpixel
131c4                 | ' 
131c4                 | ' sub do_getpixel
131c4                 | _do_getpixel
131c4     00 4A 05 F6 | 	mov	COUNT_, #0
131c8     A8 00 A0 FD | 	call	#pushregs_
131cc     24 F0 07 F1 | 	add	ptra, #36
131d0     4A 00 00 FF 
131d4     80 E4 05 F1 | 	add	objptr, ##38016
131d8     F2 16 02 FB | 	rdlong	arg03, objptr
131dc     0B 15 02 F6 | 	mov	arg02, arg03
131e0     01 14 66 F0 | 	shl	arg02, #1
131e4     0B 15 02 F1 | 	add	arg02, arg03
131e8     02 14 66 F0 | 	shl	arg02, #2
131ec     03 00 00 FF 
131f0     04 E4 85 F1 | 	sub	objptr, ##1540
131f4     F2 14 02 F1 | 	add	arg02, objptr
131f8     0A 17 02 FB | 	rdlong	arg03, arg02
131fc     18 4E 05 F1 | 	add	fp, #24
13200     A7 16 62 FC | 	wrlong	arg03, fp
13204                 | ' 
13204                 | ' numpar=compiledline(lineptr_e).result.uresult
13204                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
13204     18 4E 85 F1 | 	sub	fp, #24
13208     02 16 0E F2 | 	cmp	arg03, #2 wz
1320c     47 00 00 FF 
13210     7C E4 85 F1 | 	sub	objptr, ##36476
13214     40 00 90 AD |  if_e	jmp	#LR__1520
13218     00 12 06 F6 | 	mov	arg01, #0
1321c     3C 9F B1 FD | 	call	#__system___getiolock_0616
13220     FD 12 02 F6 | 	mov	arg01, result1
13224     90 42 B1 FD | 	call	#__system___lockmem
13228     BC 01 00 FF 
1322c     FA 15 06 F6 | 	mov	arg02, ##@LR__5973
13230     00 12 06 F6 | 	mov	arg01, #0
13234     00 16 06 F6 | 	mov	arg03, #0
13238     74 4F B1 FD | 	call	#__system___basic_print_string
1323c     00 12 06 F6 | 	mov	arg01, #0
13240     18 9F B1 FD | 	call	#__system___getiolock_0616
13244     FD 00 68 FC | 	wrlong	#0, result1
13248     27 12 06 F6 | 	mov	arg01, #39
1324c     00 14 06 F6 | 	mov	arg02, #0
13250     4C 08 B1 FD | 	call	#_printerror
13254     B4 00 90 FD | 	jmp	#LR__1521
13258                 | LR__1520
13258     50 A5 BF FD | 	call	#_pop
1325c     FD 16 02 F6 | 	mov	arg03, result1
13260     FE 14 02 F6 | 	mov	arg02, result2
13264     FF 12 02 F6 | 	mov	arg01, result3
13268     0C 4E 05 F1 | 	add	fp, #12
1326c     A7 16 62 FC | 	wrlong	arg03, fp
13270     04 4E 05 F1 | 	add	fp, #4
13274     A7 14 62 FC | 	wrlong	arg02, fp
13278     04 4E 05 F1 | 	add	fp, #4
1327c     A7 12 62 FC | 	wrlong	arg01, fp
13280     14 4E 85 F1 | 	sub	fp, #20
13284     24 A5 BF FD | 	call	#_pop
13288     FF 16 02 F6 | 	mov	arg03, result3
1328c     A7 FA 61 FC | 	wrlong	result1, fp
13290     04 4E 05 F1 | 	add	fp, #4
13294     A7 FC 61 FC | 	wrlong	result2, fp
13298     04 4E 05 F1 | 	add	fp, #4
1329c     A7 16 62 FC | 	wrlong	arg03, fp
132a0     08 4E 85 F1 | 	sub	fp, #8
132a4     A7 12 02 F6 | 	mov	arg01, fp
132a8     E4 A6 BF FD | 	call	#_converttoint
132ac     1C 4E 05 F1 | 	add	fp, #28
132b0     A7 FA 61 FC | 	wrlong	result1, fp
132b4     10 4E 85 F1 | 	sub	fp, #16
132b8     A7 12 02 F6 | 	mov	arg01, fp
132bc     0C 4E 85 F1 | 	sub	fp, #12
132c0     CC A6 BF FD | 	call	#_converttoint
132c4     FD 16 02 F6 | 	mov	arg03, result1
132c8     20 4E 05 F1 | 	add	fp, #32
132cc     A7 16 62 FC | 	wrlong	arg03, fp
132d0     F2 12 02 FB | 	rdlong	arg01, objptr
132d4     04 4E 85 F1 | 	sub	fp, #4
132d8     A7 FE 01 FB | 	rdlong	result3, fp
132dc     FF 12 02 F1 | 	add	arg01, result3
132e0     1C 4E 85 F1 | 	sub	fp, #28
132e4     0A 16 66 F0 | 	shl	arg03, #10
132e8     0B 13 02 F1 | 	add	arg01, arg03
132ec     28 0A B1 FD | 	call	#_pspeek
132f0     FD FA E1 F8 | 	getbyte	result1, result1, #0
132f4     A7 FA 61 FC | 	wrlong	result1, fp
132f8     08 4E 05 F1 | 	add	fp, #8
132fc     A7 3A 68 FC | 	wrlong	#29, fp
13300     08 4E 85 F1 | 	sub	fp, #8
13304     A7 12 02 F6 | 	mov	arg01, fp
13308     38 A5 BF FD | 	call	#_push
1330c                 | LR__1521
1330c     A7 F0 03 F6 | 	mov	ptra, fp
13310     B2 00 A0 FD | 	call	#popregs_
13314                 | _do_getpixel_ret
13314     2D 00 64 FD | 	ret
13318                 | 
13318                 | ' 
13318                 | ' '-------------------- gettime
13318                 | ' 
13318                 | ' sub do_gettime
13318                 | _do_gettime
13318     02 4A 05 F6 | 	mov	COUNT_, #2
1331c     A8 00 A0 FD | 	call	#pushregs_
13320     14 F0 07 F1 | 	add	ptra, #20
13324                 | ' 
13324                 | ' const asm 
13324     1A 26 72 FD | 	getct	local01 wc
13328     1A 28 62 FD | 	getct	local02
1332c                 | ' return hi1, lo1
1332c     14 FD 01 F6 | 	mov	result2, local02
13330     A7 26 62 FC | 	wrlong	local01, fp
13334     04 4E 05 F1 | 	add	fp, #4
13338     A7 FC 61 FC | 	wrlong	result2, fp
1333c     0C 4E 05 F1 | 	add	fp, #12
13340     A7 3A 68 FC | 	wrlong	#29, fp
13344     0C 4E 85 F1 | 	sub	fp, #12
13348     A7 12 02 FB | 	rdlong	arg01, fp
1334c     04 4E 05 F1 | 	add	fp, #4
13350     A7 12 62 FC | 	wrlong	arg01, fp
13354     08 4E 85 F1 | 	sub	fp, #8
13358     A7 12 02 FB | 	rdlong	arg01, fp
1335c     0C 4E 05 F1 | 	add	fp, #12
13360     A7 12 62 FC | 	wrlong	arg01, fp
13364     04 4E 85 F1 | 	sub	fp, #4
13368     A7 12 02 F6 | 	mov	arg01, fp
1336c     08 4E 85 F1 | 	sub	fp, #8
13370     D0 A4 BF FD | 	call	#_push
13374     A7 F0 03 F6 | 	mov	ptra, fp
13378     B2 00 A0 FD | 	call	#popregs_
1337c                 | _do_gettime_ret
1337c     2D 00 64 FD | 	ret
13380                 | 
13380                 | ' 
13380                 | ' '-------------------- gosub
13380                 | ' 
13380                 | ' sub do_gosub()
13380                 | _do_gosub
13380     50 00 00 FF 
13384     34 E5 05 F1 | 	add	objptr, ##41268
13388     F2 00 02 FB | 	rdlong	_var01, objptr
1338c     01 00 06 F1 | 	add	_var01, #1
13390     F2 00 62 FC | 	wrlong	_var01, objptr
13394                 | ' gosubtop+=1
13394                 | ' if compiledline(lineptr_e+1).result_type=token_end then
13394     06 00 00 FF 
13398     B4 E4 85 F1 | 	sub	objptr, ##3252
1339c     F2 00 02 FB | 	rdlong	_var01, objptr
133a0     01 00 06 F1 | 	add	_var01, #1
133a4     00 03 02 F6 | 	mov	_var02, _var01
133a8     01 02 66 F0 | 	shl	_var02, #1
133ac     00 03 02 F1 | 	add	_var02, _var01
133b0     02 02 66 F0 | 	shl	_var02, #2
133b4     03 00 00 FF 
133b8     04 E4 85 F1 | 	sub	objptr, ##1540
133bc     F2 02 02 F1 | 	add	_var02, objptr
133c0     08 02 06 F1 | 	add	_var02, #8
133c4     01 03 02 FB | 	rdlong	_var02, _var02
133c8     FE 03 0E F2 | 	cmp	_var02, #510 wz
133cc     47 00 00 FF 
133d0     7C E4 85 F1 | 	sub	objptr, ##36476
133d4     58 00 90 5D |  if_ne	jmp	#LR__1530
133d8     50 00 00 FF 
133dc     34 E5 05 F1 | 	add	objptr, ##41268
133e0     F2 02 02 FB | 	rdlong	_var02, objptr
133e4     03 02 66 F0 | 	shl	_var02, #3
133e8     03 00 00 FF 
133ec     88 E5 85 F1 | 	sub	objptr, ##1928
133f0     F2 02 02 F1 | 	add	_var02, objptr
133f4     03 00 00 FF 
133f8     0C E5 05 F1 | 	add	objptr, ##1804
133fc     F2 00 02 FB | 	rdlong	_var01, objptr
13400     01 01 62 FC | 	wrlong	_var01, _var02
13404     7C E4 05 F1 | 	add	objptr, #124
13408     F2 02 02 FB | 	rdlong	_var02, objptr
1340c     03 02 66 F0 | 	shl	_var02, #3
13410     03 00 00 FF 
13414     88 E5 85 F1 | 	sub	objptr, ##1928
13418     F2 02 02 F1 | 	add	_var02, objptr
1341c     04 02 06 F1 | 	add	_var02, #4
13420     01 01 68 FC | 	wrlong	#0, _var02
13424     4C 00 00 FF 
13428     AC E5 85 F1 | 	sub	objptr, ##39340
1342c     64 00 90 FD | 	jmp	#LR__1531
13430                 | LR__1530
13430     50 00 00 FF 
13434     34 E5 05 F1 | 	add	objptr, ##41268
13438     F2 02 02 FB | 	rdlong	_var02, objptr
1343c     03 02 66 F0 | 	shl	_var02, #3
13440     03 00 00 FF 
13444     88 E5 85 F1 | 	sub	objptr, ##1928
13448     F2 02 02 F1 | 	add	_var02, objptr
1344c     03 00 00 FF 
13450     14 E5 05 F1 | 	add	objptr, ##1812
13454     F2 00 02 FB | 	rdlong	_var01, objptr
13458     01 01 62 FC | 	wrlong	_var01, _var02
1345c     74 E4 05 F1 | 	add	objptr, #116
13460     F2 02 02 FB | 	rdlong	_var02, objptr
13464     03 02 66 F0 | 	shl	_var02, #3
13468     03 00 00 FF 
1346c     88 E5 85 F1 | 	sub	objptr, ##1928
13470     F2 02 02 F1 | 	add	_var02, objptr
13474     02 00 00 FF 
13478     2C E5 85 F1 | 	sub	objptr, ##1324
1347c     F2 00 02 FB | 	rdlong	_var01, objptr
13480     4A 00 00 FF 
13484     80 E4 85 F1 | 	sub	objptr, ##38016
13488     02 00 06 F1 | 	add	_var01, #2
1348c     04 02 06 F1 | 	add	_var02, #4
13490     01 01 62 FC | 	wrlong	_var01, _var02
13494                 | LR__1531
13494                 | _do_gosub_ret
13494     2D 00 64 FD | 	ret
13498                 | 
13498                 | ' 
13498                 | ' '--------------------- goto
13498                 | ' 
13498                 | ' '------- fast goto
13498                 | ' 
13498                 | ' sub do_fast_goto
13498                 | _do_fast_goto
13498     02 4A 05 F6 | 	mov	COUNT_, #2
1349c     A8 00 A0 FD | 	call	#pushregs_
134a0                 | _do_fast_goto_enter
134a0     4A 00 00 FF 
134a4     80 E4 05 F1 | 	add	objptr, ##38016
134a8     F2 12 02 FB | 	rdlong	arg01, objptr
134ac     09 27 02 F6 | 	mov	local01, arg01
134b0     01 26 66 F0 | 	shl	local01, #1
134b4     09 27 02 F1 | 	add	local01, arg01
134b8     02 26 66 F0 | 	shl	local01, #2
134bc     03 00 00 FF 
134c0     04 E4 85 F1 | 	sub	objptr, ##1540
134c4     F2 26 02 F1 | 	add	local01, objptr
134c8     13 29 02 FB | 	rdlong	local02, local01
134cc     14 13 02 F6 | 	mov	arg01, local02
134d0     47 00 00 FF 
134d4     7C E4 85 F1 | 	sub	objptr, ##36476
134d8     94 08 B1 FD | 	call	#_pslpeek
134dc     FD 12 02 F6 | 	mov	arg01, result1
134e0                 | ' 
134e0                 | ' testptr=compiledline(lineptr_e).result.uresult
134e0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
134e0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
134e0     4A 00 00 FF 
134e4     80 E4 05 F1 | 	add	objptr, ##38016
134e8     F2 FA 01 FB | 	rdlong	result1, objptr
134ec     FD 26 02 F6 | 	mov	local01, result1
134f0     01 26 66 F0 | 	shl	local01, #1
134f4     FD 26 02 F1 | 	add	local01, result1
134f8     02 26 66 F0 | 	shl	local01, #2
134fc     03 00 00 FF 
13500     04 E4 85 F1 | 	sub	objptr, ##1540
13504     F2 26 02 F1 | 	add	local01, objptr
13508     04 26 06 F1 | 	add	local01, #4
1350c     13 27 02 FB | 	rdlong	local01, local01
13510     13 13 0A F2 | 	cmp	arg01, local01 wz
13514     47 00 00 FF 
13518     7C E4 85 F1 | 	sub	objptr, ##36476
1351c     58 00 90 5D |  if_ne	jmp	#LR__1540
13520     50 00 00 FF 
13524     B8 E4 05 F1 | 	add	objptr, ##41144
13528     F2 28 62 FC | 	wrlong	local02, objptr
1352c     06 00 00 FF 
13530     3C E4 85 F1 | 	sub	objptr, ##3132
13534     F2 28 02 FB | 	rdlong	local02, objptr
13538     01 28 86 F1 | 	sub	local02, #1
1353c     04 E4 05 F1 | 	add	objptr, #4
13540     F2 28 62 FC | 	wrlong	local02, objptr
13544                 | '   runptr=testptr
13544                 | '   lineptr_e=lineptr-1
13544                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
13544     06 00 00 FF 
13548     84 E4 05 F1 | 	add	objptr, ##3204
1354c     F2 28 02 FB | 	rdlong	local02, objptr
13550     50 00 00 FF 
13554     04 E5 85 F1 | 	sub	objptr, ##41220
13558     FF FF 3F FF 
1355c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13560     50 00 00 AF 
13564     04 E5 05 A1 |  if_e	add	objptr, ##41220
13568     F2 00 68 AC |  if_e	wrlong	#0, objptr
1356c     50 00 00 AF 
13570     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13574     04 00 90 FD | 	jmp	#LR__1541
13578                 | LR__1540
13578     0C 00 B0 FD | 	call	#_do_find_goto
1357c                 | LR__1541
1357c     A7 F0 03 F6 | 	mov	ptra, fp
13580     B2 00 A0 FD | 	call	#popregs_
13584                 | _do_fast_goto_ret
13584     2D 00 64 FD | 	ret
13588                 | 
13588                 | ' 
13588                 | ' '------- find goto  
13588                 | ' 
13588                 | ' sub do_find_goto
13588                 | _do_find_goto
13588     03 4A 05 F6 | 	mov	COUNT_, #3
1358c     A8 00 A0 FD | 	call	#pushregs_
13590     24 F0 07 F1 | 	add	ptra, #36
13594                 | _do_find_goto_enter
13594     4A 00 00 FF 
13598     80 E4 05 F1 | 	add	objptr, ##38016
1359c     F2 26 02 FB | 	rdlong	local01, objptr
135a0     13 29 02 F6 | 	mov	local02, local01
135a4     01 28 66 F0 | 	shl	local02, #1
135a8     13 29 02 F1 | 	add	local02, local01
135ac     02 28 66 F0 | 	shl	local02, #2
135b0     03 00 00 FF 
135b4     04 E4 85 F1 | 	sub	objptr, ##1540
135b8     F2 28 02 F1 | 	add	local02, objptr
135bc     04 28 06 F1 | 	add	local02, #4
135c0     14 29 02 FB | 	rdlong	local02, local02
135c4     A7 28 62 FC | 	wrlong	local02, fp
135c8     03 00 00 FF 
135cc     0C E4 05 F1 | 	add	objptr, ##1548
135d0     F2 2A 02 FB | 	rdlong	local03, objptr
135d4     4A 00 00 FF 
135d8     88 E4 85 F1 | 	sub	objptr, ##38024
135dc     04 4E 05 F1 | 	add	fp, #4
135e0     A7 2A 62 FC | 	wrlong	local03, fp
135e4     04 4E 85 F1 | 	sub	fp, #4
135e8                 | ' 
135e8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
135e8                 | ' gotoptr=programstart
135e8                 | ' do
135e8                 | LR__1550
135e8     0C 4E 05 F1 | 	add	fp, #12
135ec     A7 12 02 F6 | 	mov	arg01, fp
135f0     08 4E 85 F1 | 	sub	fp, #8
135f4     A7 14 02 FB | 	rdlong	arg02, fp
135f8     04 4E 85 F1 | 	sub	fp, #4
135fc     18 16 06 F6 | 	mov	arg03, #24
13600     0B 00 00 FF 
13604     CC E4 05 F1 | 	add	objptr, ##5836
13608     08 32 B1 FD | 	call	#_psram_spin2_read1
1360c     0B 00 00 FF 
13610     CC E4 85 F1 | 	sub	objptr, ##5836
13614                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13614                 | '   if gotoheader(0)<>$FFFFFFFF then
13614     0C 4E 05 F1 | 	add	fp, #12
13618     A7 2A 02 FB | 	rdlong	local03, fp
1361c     0C 4E 85 F1 | 	sub	fp, #12
13620     FF FF 7F FF 
13624     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
13628     24 00 90 AD |  if_e	jmp	#LR__1551
1362c     04 4E 05 F1 | 	add	fp, #4
13630     A7 2A 02 FB | 	rdlong	local03, fp
13634     04 4E 05 F1 | 	add	fp, #4
13638     A7 2A 62 FC | 	wrlong	local03, fp
1363c     18 4E 05 F1 | 	add	fp, #24
13640     A7 2A 02 FB | 	rdlong	local03, fp
13644     1C 4E 85 F1 | 	sub	fp, #28
13648     A7 2A 62 FC | 	wrlong	local03, fp
1364c     04 4E 85 F1 | 	sub	fp, #4
13650                 | LR__1551
13650     20 4E 05 F1 | 	add	fp, #32
13654     A7 2A 02 FB | 	rdlong	local03, fp
13658     20 4E 85 F1 | 	sub	fp, #32
1365c     FF FF 3F FF 
13660     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
13664     0C 4E 05 51 |  if_ne	add	fp, #12
13668     A7 26 02 5B |  if_ne	rdlong	local01, fp
1366c     0C 4E 85 51 |  if_ne	sub	fp, #12
13670     FF FF 7F 5F 
13674     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13678     18 00 90 AD |  if_e	jmp	#LR__1552
1367c     0C 4E 05 F1 | 	add	fp, #12
13680     A7 2A 02 FB | 	rdlong	local03, fp
13684     0C 4E 85 F1 | 	sub	fp, #12
13688     A7 28 02 FB | 	rdlong	local02, fp
1368c     14 2B 0A F2 | 	cmp	local03, local02 wz
13690     54 FF 9F 5D |  if_ne	jmp	#LR__1550
13694                 | LR__1552
13694                 | ' 
13694                 | ' if gotoheader(0)=gotoline then
13694     0C 4E 05 F1 | 	add	fp, #12
13698     A7 2A 02 FB | 	rdlong	local03, fp
1369c     0C 4E 85 F1 | 	sub	fp, #12
136a0     A7 26 02 FB | 	rdlong	local01, fp
136a4     13 2B 0A F2 | 	cmp	local03, local01 wz
136a8     D8 00 90 5D |  if_ne	jmp	#LR__1553
136ac     4A 00 00 FF 
136b0     80 E4 05 F1 | 	add	objptr, ##38016
136b4     F2 26 02 FB | 	rdlong	local01, objptr
136b8     13 29 02 F6 | 	mov	local02, local01
136bc     01 28 66 F0 | 	shl	local02, #1
136c0     13 29 02 F1 | 	add	local02, local01
136c4     02 28 66 F0 | 	shl	local02, #2
136c8     03 00 00 FF 
136cc     04 E4 85 F1 | 	sub	objptr, ##1540
136d0     F2 28 02 F1 | 	add	local02, objptr
136d4     08 4E 05 F1 | 	add	fp, #8
136d8     A7 2A 02 FB | 	rdlong	local03, fp
136dc     14 2B 62 FC | 	wrlong	local03, local02
136e0     03 00 00 FF 
136e4     04 E4 05 F1 | 	add	objptr, ##1540
136e8     F2 26 02 FB | 	rdlong	local01, objptr
136ec     13 29 02 F6 | 	mov	local02, local01
136f0     01 28 66 F0 | 	shl	local02, #1
136f4     13 29 02 F1 | 	add	local02, local01
136f8     02 28 66 F0 | 	shl	local02, #2
136fc     03 00 00 FF 
13700     04 E4 85 F1 | 	sub	objptr, ##1540
13704     F2 28 02 F1 | 	add	local02, objptr
13708     08 28 06 F1 | 	add	local02, #8
1370c     14 9D 68 FC | 	wrlong	#78, local02
13710     03 00 00 FF 
13714     04 E4 05 F1 | 	add	objptr, ##1540
13718     F2 28 02 FB | 	rdlong	local02, objptr
1371c     14 13 02 F6 | 	mov	arg01, local02
13720     01 12 66 F0 | 	shl	arg01, #1
13724     14 13 02 F1 | 	add	arg01, local02
13728     02 12 66 F0 | 	shl	arg01, #2
1372c     03 00 00 FF 
13730     04 E4 85 F1 | 	sub	objptr, ##1540
13734     F2 12 02 F1 | 	add	arg01, objptr
13738     09 00 00 FF 
1373c     44 E4 05 F1 | 	add	objptr, ##4676
13740     F2 14 02 FB | 	rdlong	arg02, objptr
13744     02 2A 06 F6 | 	mov	local03, #2
13748     14 2B 02 F1 | 	add	local03, local02
1374c     0B 00 00 FF 
13750     5C E4 85 F1 | 	sub	objptr, ##5724
13754     F2 16 02 FB | 	rdlong	arg03, objptr
13758     0B 2B 02 FD | 	qmul	local03, arg03
1375c     08 4E 85 F1 | 	sub	fp, #8
13760     39 00 00 FF 
13764     98 E5 85 F1 | 	sub	objptr, ##29592
13768     18 2A 62 FD | 	getqx	local03
1376c     15 15 02 F1 | 	add	arg02, local03
13770     3C 31 B1 FD | 	call	#_psram_spin2_write
13774     0B 00 00 FF 
13778     CC E4 85 F1 | 	sub	objptr, ##5836
1377c     18 FD BF FD | 	call	#_do_fast_goto
13780     0C 00 90 FD | 	jmp	#LR__1554
13784                 | LR__1553
13784     26 12 06 F6 | 	mov	arg01, #38
13788     00 14 06 F6 | 	mov	arg02, #0
1378c     10 03 B1 FD | 	call	#_printerror
13790                 | LR__1554
13790     A7 F0 03 F6 | 	mov	ptra, fp
13794     B2 00 A0 FD | 	call	#popregs_
13798                 | _do_find_goto_ret
13798     2D 00 64 FD | 	ret
1379c                 | 
1379c                 | ' 
1379c                 | ' '------- slow goto  
1379c                 | ' 
1379c                 | ' sub do_slow_goto
1379c                 | _do_slow_goto
1379c     02 4A 05 F6 | 	mov	COUNT_, #2
137a0     A8 00 A0 FD | 	call	#pushregs_
137a4     30 F0 07 F1 | 	add	ptra, #48
137a8     00 A0 BF FD | 	call	#_pop
137ac     FF 26 02 F6 | 	mov	local01, result3
137b0     24 4E 05 F1 | 	add	fp, #36
137b4     A7 FA 61 FC | 	wrlong	result1, fp
137b8     04 4E 05 F1 | 	add	fp, #4
137bc     A7 FC 61 FC | 	wrlong	result2, fp
137c0     04 4E 05 F1 | 	add	fp, #4
137c4     A7 26 62 FC | 	wrlong	local01, fp
137c8     08 4E 85 F1 | 	sub	fp, #8
137cc     A7 12 02 F6 | 	mov	arg01, fp
137d0     24 4E 85 F1 | 	sub	fp, #36
137d4     B8 A1 BF FD | 	call	#_converttoint
137d8     A7 FA 61 FC | 	wrlong	result1, fp
137dc     4A 00 00 FF 
137e0     88 E4 05 F1 | 	add	objptr, ##38024
137e4     F2 28 02 FB | 	rdlong	local02, objptr
137e8     4A 00 00 FF 
137ec     88 E4 85 F1 | 	sub	objptr, ##38024
137f0     04 4E 05 F1 | 	add	fp, #4
137f4     A7 28 62 FC | 	wrlong	local02, fp
137f8     04 4E 85 F1 | 	sub	fp, #4
137fc                 | ' 
137fc                 | ' t1=pop() : gotoline=converttoint(t1)
137fc                 | ' gotoptr=programstart
137fc                 | ' do
137fc                 | LR__1560
137fc     0C 4E 05 F1 | 	add	fp, #12
13800     A7 12 02 F6 | 	mov	arg01, fp
13804     08 4E 85 F1 | 	sub	fp, #8
13808     A7 14 02 FB | 	rdlong	arg02, fp
1380c     04 4E 85 F1 | 	sub	fp, #4
13810     18 16 06 F6 | 	mov	arg03, #24
13814     0B 00 00 FF 
13818     CC E4 05 F1 | 	add	objptr, ##5836
1381c     F4 2F B1 FD | 	call	#_psram_spin2_read1
13820     0B 00 00 FF 
13824     CC E4 85 F1 | 	sub	objptr, ##5836
13828                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13828                 | '   if gotoheader(0)<>$FFFFFFFF then
13828     0C 4E 05 F1 | 	add	fp, #12
1382c     A7 28 02 FB | 	rdlong	local02, fp
13830     0C 4E 85 F1 | 	sub	fp, #12
13834     FF FF 7F FF 
13838     FF 29 0E F2 | 	cmp	local02, ##-1 wz
1383c     24 00 90 AD |  if_e	jmp	#LR__1561
13840     04 4E 05 F1 | 	add	fp, #4
13844     A7 28 02 FB | 	rdlong	local02, fp
13848     04 4E 05 F1 | 	add	fp, #4
1384c     A7 28 62 FC | 	wrlong	local02, fp
13850     18 4E 05 F1 | 	add	fp, #24
13854     A7 28 02 FB | 	rdlong	local02, fp
13858     1C 4E 85 F1 | 	sub	fp, #28
1385c     A7 28 62 FC | 	wrlong	local02, fp
13860     04 4E 85 F1 | 	sub	fp, #4
13864                 | LR__1561
13864     20 4E 05 F1 | 	add	fp, #32
13868     A7 28 02 FB | 	rdlong	local02, fp
1386c     20 4E 85 F1 | 	sub	fp, #32
13870     FF FF 3F FF 
13874     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13878     0C 4E 05 51 |  if_ne	add	fp, #12
1387c     A7 26 02 5B |  if_ne	rdlong	local01, fp
13880     0C 4E 85 51 |  if_ne	sub	fp, #12
13884     FF FF 7F 5F 
13888     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
1388c     18 00 90 AD |  if_e	jmp	#LR__1562
13890     0C 4E 05 F1 | 	add	fp, #12
13894     A7 28 02 FB | 	rdlong	local02, fp
13898     0C 4E 85 F1 | 	sub	fp, #12
1389c     A7 16 02 FB | 	rdlong	arg03, fp
138a0     0B 29 0A F2 | 	cmp	local02, arg03 wz
138a4     54 FF 9F 5D |  if_ne	jmp	#LR__1560
138a8                 | LR__1562
138a8                 | ' if gotoheader(0)=gotoline then  
138a8     0C 4E 05 F1 | 	add	fp, #12
138ac     A7 28 02 FB | 	rdlong	local02, fp
138b0     0C 4E 85 F1 | 	sub	fp, #12
138b4     A7 26 02 FB | 	rdlong	local01, fp
138b8     13 29 0A F2 | 	cmp	local02, local01 wz
138bc     60 00 90 5D |  if_ne	jmp	#LR__1563
138c0     08 4E 05 F1 | 	add	fp, #8
138c4     A7 28 02 FB | 	rdlong	local02, fp
138c8     08 4E 85 F1 | 	sub	fp, #8
138cc     50 00 00 FF 
138d0     B8 E4 05 F1 | 	add	objptr, ##41144
138d4     F2 28 62 FC | 	wrlong	local02, objptr
138d8     06 00 00 FF 
138dc     3C E4 85 F1 | 	sub	objptr, ##3132
138e0     F2 28 02 FB | 	rdlong	local02, objptr
138e4     01 28 86 F1 | 	sub	local02, #1
138e8     04 E4 05 F1 | 	add	objptr, #4
138ec     F2 28 62 FC | 	wrlong	local02, objptr
138f0                 | '    runptr=oldgotoptr
138f0                 | '    lineptr_e=lineptr-1
138f0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
138f0     06 00 00 FF 
138f4     84 E4 05 F1 | 	add	objptr, ##3204
138f8     F2 28 02 FB | 	rdlong	local02, objptr
138fc     50 00 00 FF 
13900     04 E5 85 F1 | 	sub	objptr, ##41220
13904     FF FF 3F FF 
13908     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
1390c     50 00 00 AF 
13910     04 E5 05 A1 |  if_e	add	objptr, ##41220
13914     F2 00 68 AC |  if_e	wrlong	#0, objptr
13918     50 00 00 AF 
1391c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13920                 | LR__1563
13920     A7 F0 03 F6 | 	mov	ptra, fp
13924     B2 00 A0 FD | 	call	#popregs_
13928                 | _do_slow_goto_ret
13928     2D 00 64 FD | 	ret
1392c                 | 
1392c                 | ' 
1392c                 | ' ' ----------------  hex$
1392c                 | ' 
1392c                 | ' sub do_hex
1392c                 | _do_hex
1392c     01 4A 05 F6 | 	mov	COUNT_, #1
13930     A8 00 A0 FD | 	call	#pushregs_
13934     18 F0 07 F1 | 	add	ptra, #24
13938     4A 00 00 FF 
1393c     80 E4 05 F1 | 	add	objptr, ##38016
13940     F2 26 02 FB | 	rdlong	local01, objptr
13944     13 17 02 F6 | 	mov	arg03, local01
13948     01 16 66 F0 | 	shl	arg03, #1
1394c     13 17 02 F1 | 	add	arg03, local01
13950     02 16 66 F0 | 	shl	arg03, #2
13954     03 00 00 FF 
13958     04 E4 85 F1 | 	sub	objptr, ##1540
1395c     F2 16 02 F1 | 	add	arg03, objptr
13960     0B 17 02 FB | 	rdlong	arg03, arg03
13964     0C 4E 05 F1 | 	add	fp, #12
13968     A7 16 62 FC | 	wrlong	arg03, fp
1396c                 | ' 
1396c                 | ' numpar=compiledline(lineptr_e).result.uresult
1396c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
1396c     0C 4E 85 F1 | 	sub	fp, #12
13970     03 16 16 F2 | 	cmp	arg03, #3 wc
13974     47 00 00 FF 
13978     7C E4 85 F1 | 	sub	objptr, ##36476
1397c     0C 4E 05 C1 |  if_b	add	fp, #12
13980     A7 26 0A CB |  if_b	rdlong	local01, fp wz
13984     0C 4E 85 C1 |  if_b	sub	fp, #12
13988     40 00 90 4D |  if_c_and_nz	jmp	#LR__1570
1398c     00 12 06 F6 | 	mov	arg01, #0
13990     C8 97 B1 FD | 	call	#__system___getiolock_0616
13994     FD 12 02 F6 | 	mov	arg01, result1
13998     1C 3B B1 FD | 	call	#__system___lockmem
1399c     BD 01 00 FF 
139a0     05 14 06 F6 | 	mov	arg02, ##@LR__5974
139a4     00 12 06 F6 | 	mov	arg01, #0
139a8     00 16 06 F6 | 	mov	arg03, #0
139ac     00 48 B1 FD | 	call	#__system___basic_print_string
139b0     00 12 06 F6 | 	mov	arg01, #0
139b4     A4 97 B1 FD | 	call	#__system___getiolock_0616
139b8     FD 00 68 FC | 	wrlong	#0, result1
139bc     27 12 06 F6 | 	mov	arg01, #39
139c0     00 14 06 F6 | 	mov	arg02, #0
139c4     D8 00 B1 FD | 	call	#_printerror
139c8     B8 00 90 FD | 	jmp	#LR__1573
139cc                 | LR__1570
139cc                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
139cc     0C 4E 05 F1 | 	add	fp, #12
139d0     A7 26 02 FB | 	rdlong	local01, fp
139d4     0C 4E 85 F1 | 	sub	fp, #12
139d8     02 26 0E F2 | 	cmp	local01, #2 wz
139dc     38 00 90 5D |  if_ne	jmp	#LR__1571
139e0     C8 9D BF FD | 	call	#_pop
139e4     FF 26 02 F6 | 	mov	local01, result3
139e8     A7 FA 61 FC | 	wrlong	result1, fp
139ec     04 4E 05 F1 | 	add	fp, #4
139f0     A7 FC 61 FC | 	wrlong	result2, fp
139f4     04 4E 05 F1 | 	add	fp, #4
139f8     A7 26 62 FC | 	wrlong	local01, fp
139fc     08 4E 85 F1 | 	sub	fp, #8
13a00     A7 12 02 F6 | 	mov	arg01, fp
13a04     88 9F BF FD | 	call	#_converttoint
13a08     14 4E 05 F1 | 	add	fp, #20
13a0c     A7 FA 61 FC | 	wrlong	result1, fp
13a10     14 4E 85 F1 | 	sub	fp, #20
13a14     0C 00 90 FD | 	jmp	#LR__1572
13a18                 | LR__1571
13a18     14 4E 05 F1 | 	add	fp, #20
13a1c     A7 10 68 FC | 	wrlong	#8, fp
13a20     14 4E 85 F1 | 	sub	fp, #20
13a24                 | LR__1572
13a24     84 9D BF FD | 	call	#_pop
13a28     FF 26 02 F6 | 	mov	local01, result3
13a2c     A7 FA 61 FC | 	wrlong	result1, fp
13a30     04 4E 05 F1 | 	add	fp, #4
13a34     A7 FC 61 FC | 	wrlong	result2, fp
13a38     04 4E 05 F1 | 	add	fp, #4
13a3c     A7 26 62 FC | 	wrlong	local01, fp
13a40     08 4E 85 F1 | 	sub	fp, #8
13a44     A7 12 02 F6 | 	mov	arg01, fp
13a48     44 9F BF FD | 	call	#_converttoint
13a4c     10 4E 05 F1 | 	add	fp, #16
13a50     A7 FA 61 FC | 	wrlong	result1, fp
13a54     FD 12 02 F6 | 	mov	arg01, result1
13a58     04 4E 05 F1 | 	add	fp, #4
13a5c     A7 14 02 FB | 	rdlong	arg02, fp
13a60     14 4E 85 F1 | 	sub	fp, #20
13a64     10 16 06 F6 | 	mov	arg03, #16
13a68     20 5D B1 FD | 	call	#__system__Number_S
13a6c     A7 FA 61 FC | 	wrlong	result1, fp
13a70     08 4E 05 F1 | 	add	fp, #8
13a74     A7 3E 68 FC | 	wrlong	#31, fp
13a78     08 4E 85 F1 | 	sub	fp, #8
13a7c     A7 12 02 F6 | 	mov	arg01, fp
13a80     C0 9D BF FD | 	call	#_push
13a84                 | LR__1573
13a84     A7 F0 03 F6 | 	mov	ptra, fp
13a88     B2 00 A0 FD | 	call	#popregs_
13a8c                 | _do_hex_ret
13a8c     2D 00 64 FD | 	ret
13a90                 | 
13a90                 | ' 
13a90                 | ' ' ----------------  if
13a90                 | ' 
13a90                 | ' sub do_if
13a90                 | _do_if
13a90     05 4A 05 F6 | 	mov	COUNT_, #5
13a94     A8 00 A0 FD | 	call	#pushregs_
13a98     10 9D BF FD | 	call	#_pop
13a9c     FD 26 0A F6 | 	mov	local01, result1 wz
13aa0     FE 28 02 F6 | 	mov	local02, result2
13aa4     FF 2A 02 F6 | 	mov	local03, result3
13aa8                 | ' t1=pop()
13aa8                 | ' ' if uresult=0, jump over else
13aa8                 | ' if t1.result.uresult = 0 then 
13aa8     BC 00 90 5D |  if_ne	jmp	#LR__1582
13aac                 | '   for i=lineptr_e to lineptr-1
13aac     4A 00 00 FF 
13ab0     80 E4 05 F1 | 	add	objptr, ##38016
13ab4     F2 2C 02 FB | 	rdlong	local04, objptr
13ab8     04 E4 85 F1 | 	sub	objptr, #4
13abc     F2 2E 02 FB | 	rdlong	local05, objptr
13ac0     4A 00 00 FF 
13ac4     7C E4 85 F1 | 	sub	objptr, ##38012
13ac8                 | LR__1580
13ac8     17 2D 52 F2 | 	cmps	local04, local05 wc
13acc     78 00 90 3D |  if_ae	jmp	#LR__1581
13ad0     16 FF 01 F6 | 	mov	result3, local04
13ad4     01 FE 65 F0 | 	shl	result3, #1
13ad8     16 FF 01 F1 | 	add	result3, local04
13adc     02 FE 65 F0 | 	shl	result3, #2
13ae0     47 00 00 FF 
13ae4     7C E4 05 F1 | 	add	objptr, ##36476
13ae8     F2 FE 01 F1 | 	add	result3, objptr
13aec     FF 26 02 FB | 	rdlong	local01, result3
13af0     04 FE 05 F1 | 	add	result3, #4
13af4     FF FC 01 FB | 	rdlong	result2, result3
13af8     16 FF 01 F6 | 	mov	result3, local04
13afc     01 FE 65 F0 | 	shl	result3, #1
13b00     16 FF 01 F1 | 	add	result3, local04
13b04     02 FE 65 F0 | 	shl	result3, #2
13b08     F2 FE 01 F1 | 	add	result3, objptr
13b0c     08 FE 05 F1 | 	add	result3, #8
13b10     FF FE 01 FB | 	rdlong	result3, result3
13b14     FE 28 02 F6 | 	mov	local02, result2
13b18     FF 2A 02 F6 | 	mov	local03, result3
13b1c                 | '     t1=compiledline(i)
13b1c                 | '     if t1.result_type=token_else then lineptr_e=i : return
13b1c     5A 2A 0E F2 | 	cmp	local03, #90 wz
13b20     47 00 00 FF 
13b24     7C E4 85 F1 | 	sub	objptr, ##36476
13b28     4A 00 00 AF 
13b2c     80 E4 05 A1 |  if_e	add	objptr, ##38016
13b30     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13b34     4A 00 00 AF 
13b38     80 E4 85 A1 |  if_e	sub	objptr, ##38016
13b3c     28 00 90 AD |  if_e	jmp	#LR__1583
13b40     01 2C 06 F1 | 	add	local04, #1
13b44     80 FF 9F FD | 	jmp	#LR__1580
13b48                 | LR__1581
13b48     4A 00 00 FF 
13b4c     7C E4 05 F1 | 	add	objptr, ##38012
13b50     F2 2E 02 FB | 	rdlong	local05, objptr
13b54     01 2E 86 F1 | 	sub	local05, #1
13b58     04 E4 05 F1 | 	add	objptr, #4
13b5c     F2 2E 62 FC | 	wrlong	local05, objptr
13b60     4A 00 00 FF 
13b64     80 E4 85 F1 | 	sub	objptr, ##38016
13b68                 | LR__1582
13b68                 | LR__1583
13b68     A7 F0 03 F6 | 	mov	ptra, fp
13b6c     B2 00 A0 FD | 	call	#popregs_
13b70                 | _do_if_ret
13b70     2D 00 64 FD | 	ret
13b74                 | 
13b74                 | ' 
13b74                 | ' ' ----------------  inkey$
13b74                 | ' 
13b74                 | ' sub do_inkey
13b74                 | _do_inkey
13b74     02 4A 05 F6 | 	mov	COUNT_, #2
13b78     A8 00 A0 FD | 	call	#pushregs_
13b7c     0C F0 07 F1 | 	add	ptra, #12
13b80     BC 30 B1 FD | 	call	#_usbnew_spin2_get_key
13b84     45 00 00 FF 
13b88     74 E4 05 F1 | 	add	objptr, ##35444
13b8c     F2 FA 61 FC | 	wrlong	result1, objptr
13b90                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13b90     45 00 00 FF 
13b94     74 E4 85 F1 | 	sub	objptr, ##35444
13b98     00 FA 0D F2 | 	cmp	result1, #0 wz
13b9c     94 00 90 AD |  if_e	jmp	#LR__1591
13ba0     45 00 00 FF 
13ba4     74 E4 05 F1 | 	add	objptr, ##35444
13ba8     F2 1C 02 FB | 	rdlong	arg06, objptr
13bac     45 00 00 FF 
13bb0     74 E4 85 F1 | 	sub	objptr, ##35444
13bb4     00 00 40 FF 
13bb8     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13bbc     45 00 00 CF 
13bc0     74 E4 05 C1 |  if_b	add	objptr, ##35444
13bc4     F2 26 02 CB |  if_b	rdlong	local01, objptr
13bc8     45 00 00 CF 
13bcc     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13bd0     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13bd4     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13bd8     58 00 90 3D |  if_ae	jmp	#LR__1591
13bdc                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
13bdc     50 00 00 FF 
13be0     3C E5 05 F1 | 	add	objptr, ##41276
13be4     F2 1C 02 FB | 	rdlong	arg06, objptr
13be8     50 00 00 FF 
13bec     3C E5 85 F1 | 	sub	objptr, ##41276
13bf0     01 1C 0E F2 | 	cmp	arg06, #1 wz
13bf4     3C 00 90 5D |  if_ne	jmp	#LR__1590
13bf8     52 00 00 FF 
13bfc     DC E4 05 F1 | 	add	objptr, ##42204
13c00     F2 14 02 FB | 	rdlong	arg02, objptr
13c04     04 E4 85 F1 | 	sub	objptr, #4
13c08     F2 1A 02 FB | 	rdlong	arg05, objptr
13c0c     07 12 06 F6 | 	mov	arg01, #7
13c10     56 00 00 FF 
13c14     44 16 06 F6 | 	mov	arg03, ##44100
13c18     0C 18 C6 F9 | 	decod	arg04, #12
13c1c     01 1C 66 F6 | 	neg	arg06, #1
13c20     47 00 00 FF 
13c24     0C E4 85 F1 | 	sub	objptr, ##36364
13c28     AC 33 B1 FD | 	call	#_audio096_spin2_play
13c2c     0B 00 00 FF 
13c30     CC E4 85 F1 | 	sub	objptr, ##5836
13c34                 | LR__1590
13c34                 | LR__1591
13c34                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13c34     45 00 00 FF 
13c38     74 E4 05 F1 | 	add	objptr, ##35444
13c3c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
13c40     45 00 00 FF 
13c44     74 E4 85 F1 | 	sub	objptr, ##35444
13c48     D4 01 90 AD |  if_e	jmp	#LR__1600
13c4c     45 00 00 FF 
13c50     74 E4 05 F1 | 	add	objptr, ##35444
13c54     F2 1C 02 FB | 	rdlong	arg06, objptr
13c58     45 00 00 FF 
13c5c     74 E4 85 F1 | 	sub	objptr, ##35444
13c60     00 00 40 FF 
13c64     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13c68     45 00 00 CF 
13c6c     74 E4 05 C1 |  if_b	add	objptr, ##35444
13c70     F2 26 02 CB |  if_b	rdlong	local01, objptr
13c74     45 00 00 CF 
13c78     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13c7c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13c80     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13c84     98 01 90 3D |  if_ae	jmp	#LR__1600
13c88                 | '   if leds and 2 = 2 then 
13c88     52 00 00 FF 
13c8c     1C E5 05 F1 | 	add	objptr, ##42268
13c90     F2 26 0A FB | 	rdlong	local01, objptr wz
13c94     52 00 00 FF 
13c98     1C E5 85 F1 | 	sub	objptr, ##42268
13c9c     58 01 90 AD |  if_e	jmp	#LR__1599
13ca0                 | '     if key>96 andalso key<123 then
13ca0     45 00 00 FF 
13ca4     74 E4 05 F1 | 	add	objptr, ##35444
13ca8     F2 26 02 FB | 	rdlong	local01, objptr
13cac     45 00 00 FF 
13cb0     74 E4 85 F1 | 	sub	objptr, ##35444
13cb4     61 26 16 F2 | 	cmp	local01, #97 wc
13cb8     3C 00 90 CD |  if_b	jmp	#LR__1592
13cbc     45 00 00 FF 
13cc0     74 E4 05 F1 | 	add	objptr, ##35444
13cc4     F2 26 02 FB | 	rdlong	local01, objptr
13cc8     45 00 00 FF 
13ccc     74 E4 85 F1 | 	sub	objptr, ##35444
13cd0     7B 26 16 F2 | 	cmp	local01, #123 wc
13cd4     20 00 90 3D |  if_ae	jmp	#LR__1592
13cd8     45 00 00 FF 
13cdc     74 E4 05 F1 | 	add	objptr, ##35444
13ce0     F2 26 02 FB | 	rdlong	local01, objptr
13ce4     20 26 86 F1 | 	sub	local01, #32
13ce8     F2 26 62 FC | 	wrlong	local01, objptr
13cec     45 00 00 FF 
13cf0     74 E4 85 F1 | 	sub	objptr, ##35444
13cf4     00 01 90 FD | 	jmp	#LR__1598
13cf8                 | LR__1592
13cf8     45 00 00 FF 
13cfc     74 E4 05 F1 | 	add	objptr, ##35444
13d00     F2 26 02 FB | 	rdlong	local01, objptr
13d04     45 00 00 FF 
13d08     74 E4 85 F1 | 	sub	objptr, ##35444
13d0c     41 26 16 F2 | 	cmp	local01, #65 wc
13d10     3C 00 90 CD |  if_b	jmp	#LR__1593
13d14     45 00 00 FF 
13d18     74 E4 05 F1 | 	add	objptr, ##35444
13d1c     F2 26 02 FB | 	rdlong	local01, objptr
13d20     45 00 00 FF 
13d24     74 E4 85 F1 | 	sub	objptr, ##35444
13d28     5B 26 16 F2 | 	cmp	local01, #91 wc
13d2c     20 00 90 3D |  if_ae	jmp	#LR__1593
13d30     45 00 00 FF 
13d34     74 E4 05 F1 | 	add	objptr, ##35444
13d38     F2 26 02 FB | 	rdlong	local01, objptr
13d3c     20 26 06 F1 | 	add	local01, #32
13d40     F2 26 62 FC | 	wrlong	local01, objptr
13d44     45 00 00 FF 
13d48     74 E4 85 F1 | 	sub	objptr, ##35444
13d4c     A8 00 90 FD | 	jmp	#LR__1597
13d50                 | LR__1593
13d50     45 00 00 FF 
13d54     74 E4 05 F1 | 	add	objptr, ##35444
13d58     F2 26 02 FB | 	rdlong	local01, objptr
13d5c     45 00 00 FF 
13d60     74 E4 85 F1 | 	sub	objptr, ##35444
13d64     17 26 16 F2 | 	cmp	local01, #23 wc
13d68     3C 00 90 CD |  if_b	jmp	#LR__1594
13d6c     45 00 00 FF 
13d70     74 E4 05 F1 | 	add	objptr, ##35444
13d74     F2 26 02 FB | 	rdlong	local01, objptr
13d78     45 00 00 FF 
13d7c     74 E4 85 F1 | 	sub	objptr, ##35444
13d80     20 26 16 F2 | 	cmp	local01, #32 wc
13d84     20 00 90 3D |  if_ae	jmp	#LR__1594
13d88     45 00 00 FF 
13d8c     74 E4 05 F1 | 	add	objptr, ##35444
13d90     F2 26 02 FB | 	rdlong	local01, objptr
13d94     09 26 86 F1 | 	sub	local01, #9
13d98     F2 26 62 FC | 	wrlong	local01, objptr
13d9c     45 00 00 FF 
13da0     74 E4 85 F1 | 	sub	objptr, ##35444
13da4     50 00 90 FD | 	jmp	#LR__1596
13da8                 | LR__1594
13da8     45 00 00 FF 
13dac     74 E4 05 F1 | 	add	objptr, ##35444
13db0     F2 28 02 FB | 	rdlong	local02, objptr
13db4     45 00 00 FF 
13db8     74 E4 85 F1 | 	sub	objptr, ##35444
13dbc     0E 28 16 F2 | 	cmp	local02, #14 wc
13dc0     34 00 90 CD |  if_b	jmp	#LR__1595
13dc4     45 00 00 FF 
13dc8     74 E4 05 F1 | 	add	objptr, ##35444
13dcc     F2 26 02 FB | 	rdlong	local01, objptr
13dd0     45 00 00 FF 
13dd4     74 E4 85 F1 | 	sub	objptr, ##35444
13dd8     17 26 16 F2 | 	cmp	local01, #23 wc
13ddc     52 00 00 CF 
13de0     20 E5 05 C1 |  if_b	add	objptr, ##42272
13de4     F2 28 02 CB |  if_b	rdlong	local02, objptr
13de8     27 28 06 C1 |  if_b	add	local02, #39
13dec     F2 28 62 CC |  if_b	wrlong	local02, objptr
13df0     52 00 00 CF 
13df4     20 E5 85 C1 |  if_b	sub	objptr, ##42272
13df8                 | LR__1595
13df8                 | LR__1596
13df8                 | LR__1597
13df8                 | LR__1598
13df8                 | LR__1599
13df8     45 00 00 FF 
13dfc     74 E4 05 F1 | 	add	objptr, ##35444
13e00     F2 12 02 FB | 	rdlong	arg01, objptr
13e04     45 00 00 FF 
13e08     74 E4 85 F1 | 	sub	objptr, ##35444
13e0c     10 00 B1 FD | 	call	#_scantochar
13e10     FD 12 02 F6 | 	mov	arg01, result1
13e14     E4 58 B1 FD | 	call	#__system__Chr_S
13e18     A7 FA 61 FC | 	wrlong	result1, fp
13e1c     0C 00 90 FD | 	jmp	#LR__1601
13e20                 | LR__1600
13e20     BD 01 00 FF 
13e24     0C 28 06 F6 | 	mov	local02, ##@LR__5975
13e28     A7 28 62 FC | 	wrlong	local02, fp
13e2c                 | LR__1601
13e2c     08 4E 05 F1 | 	add	fp, #8
13e30     A7 3E 68 FC | 	wrlong	#31, fp
13e34     08 4E 85 F1 | 	sub	fp, #8
13e38     A7 12 02 F6 | 	mov	arg01, fp
13e3c     04 9A BF FD | 	call	#_push
13e40     A7 F0 03 F6 | 	mov	ptra, fp
13e44     B2 00 A0 FD | 	call	#popregs_
13e48                 | _do_inkey_ret
13e48     2D 00 64 FD | 	ret
13e4c                 | 
13e4c                 | ' 
13e4c                 | ' ' ----------------  ink
13e4c                 | ' 
13e4c                 | ' sub do_ink
13e4c                 | _do_ink
13e4c     00 4A 05 F6 | 	mov	COUNT_, #0
13e50     A8 00 A0 FD | 	call	#pushregs_
13e54     0C F0 07 F1 | 	add	ptra, #12
13e58     50 99 BF FD | 	call	#_pop
13e5c     FF 14 02 F6 | 	mov	arg02, result3
13e60     A7 FA 61 FC | 	wrlong	result1, fp
13e64     04 4E 05 F1 | 	add	fp, #4
13e68     A7 FC 61 FC | 	wrlong	result2, fp
13e6c     04 4E 05 F1 | 	add	fp, #4
13e70     A7 14 62 FC | 	wrlong	arg02, fp
13e74     08 4E 85 F1 | 	sub	fp, #8
13e78     A7 12 02 F6 | 	mov	arg01, fp
13e7c     10 9B BF FD | 	call	#_converttoint
13e80     37 00 00 FF 
13e84     3C E4 05 F1 | 	add	objptr, ##28220
13e88     F2 FA 61 FC | 	wrlong	result1, objptr
13e8c     04 E4 85 F1 | 	sub	objptr, #4
13e90     F2 14 02 FB | 	rdlong	arg02, objptr
13e94                 | ' 
13e94                 | ' write_color:=ff
13e94     36 00 00 FF 
13e98     F7 E5 85 F1 | 	sub	objptr, ##28151
13e9c     F2 FA 61 FC | 	wrlong	result1, objptr
13ea0                 | ' write_background:=bb
13ea0     04 E4 05 F1 | 	add	objptr, #4
13ea4     F2 14 62 FC | 	wrlong	arg02, objptr
13ea8     36 00 00 FF 
13eac     F7 E5 05 F1 | 	add	objptr, ##28151
13eb0     F2 12 02 FB | 	rdlong	arg01, objptr
13eb4     37 00 00 FF 
13eb8     3C E4 85 F1 | 	sub	objptr, ##28220
13ebc     E4 07 B1 FD | 	call	#_hg010b_spin2_setcursorcolor
13ec0     A7 F0 03 F6 | 	mov	ptra, fp
13ec4     B2 00 A0 FD | 	call	#popregs_
13ec8                 | _do_ink_ret
13ec8     2D 00 64 FD | 	ret
13ecc                 | 
13ecc                 | ' 
13ecc                 | ' ' ----------------  int
13ecc                 | ' 
13ecc                 | ' sub do_int
13ecc                 | _do_int
13ecc     02 4A 05 F6 | 	mov	COUNT_, #2
13ed0     A8 00 A0 FD | 	call	#pushregs_
13ed4     10 F0 07 F1 | 	add	ptra, #16
13ed8     D0 98 BF FD | 	call	#_pop
13edc     FE 26 02 F6 | 	mov	local01, result2
13ee0     FF 28 02 F6 | 	mov	local02, result3
13ee4     A7 FA 61 FC | 	wrlong	result1, fp
13ee8     04 4E 05 F1 | 	add	fp, #4
13eec     A7 26 62 FC | 	wrlong	local01, fp
13ef0     04 4E 05 F1 | 	add	fp, #4
13ef4     A7 28 62 FC | 	wrlong	local02, fp
13ef8                 | ' 
13ef8                 | ' t1=pop()
13ef8                 | ' select case t1.result_type
13ef8     08 4E 85 F1 | 	sub	fp, #8
13efc     1E 28 0E F2 | 	cmp	local02, #30 wz
13f00     14 00 90 AD |  if_e	jmp	#LR__1610
13f04     1F 28 0E F2 | 	cmp	local02, #31 wz
13f08     20 00 90 AD |  if_e	jmp	#LR__1611
13f0c     2B 28 0E F2 | 	cmp	local02, #43 wz
13f10     34 00 90 AD |  if_e	jmp	#LR__1612
13f14     50 00 90 FD | 	jmp	#LR__1613
13f18                 | LR__1610
13f18     A7 12 02 FB | 	rdlong	arg01, fp
13f1c     00 14 06 F6 | 	mov	arg02, #0
13f20     D8 68 B1 FD | 	call	#__system___float_tointeger
13f24     A7 FA 61 FC | 	wrlong	result1, fp
13f28     3C 00 90 FD | 	jmp	#LR__1613
13f2c                 | LR__1611
13f2c     A7 12 02 FB | 	rdlong	arg01, fp
13f30     0C 6C B1 FD | 	call	#__system____builtin_atof
13f34     FD 12 02 F6 | 	mov	arg01, result1
13f38     00 14 06 F6 | 	mov	arg02, #0
13f3c     BC 68 B1 FD | 	call	#__system___float_tointeger
13f40     A7 FA 61 FC | 	wrlong	result1, fp
13f44     20 00 90 FD | 	jmp	#LR__1613
13f48                 | LR__1612
13f48     A7 12 02 FB | 	rdlong	arg01, fp
13f4c     D4 99 BF FD | 	call	#_convertstring
13f50     FD 12 02 F6 | 	mov	arg01, result1
13f54     E8 6B B1 FD | 	call	#__system____builtin_atof
13f58     FD 12 02 F6 | 	mov	arg01, result1
13f5c     00 14 06 F6 | 	mov	arg02, #0
13f60     98 68 B1 FD | 	call	#__system___float_tointeger
13f64     A7 FA 61 FC | 	wrlong	result1, fp
13f68                 | LR__1613
13f68     08 4E 05 F1 | 	add	fp, #8
13f6c     A7 38 68 FC | 	wrlong	#28, fp
13f70     08 4E 85 F1 | 	sub	fp, #8
13f74     A7 12 02 F6 | 	mov	arg01, fp
13f78     C8 98 BF FD | 	call	#_push
13f7c     A7 F0 03 F6 | 	mov	ptra, fp
13f80     B2 00 A0 FD | 	call	#popregs_
13f84                 | _do_int_ret
13f84     2D 00 64 FD | 	ret
13f88                 | 
13f88                 | ' 
13f88                 | ' ' ----------------  input
13f88                 | ' 
13f88                 | ' sub do_input
13f88                 | _do_input
13f88     11 4A 05 F6 | 	mov	COUNT_, #17
13f8c     A8 00 A0 FD | 	call	#pushregs_
13f90     50 F1 07 F1 | 	add	ptra, #336
13f94     4A 00 00 FF 
13f98     80 E4 05 F1 | 	add	objptr, ##38016
13f9c     F2 FE 01 FB | 	rdlong	result3, objptr
13fa0     FF FC 01 F6 | 	mov	result2, result3
13fa4     01 FC 65 F0 | 	shl	result2, #1
13fa8     FF FC 01 F1 | 	add	result2, result3
13fac     02 FC 65 F0 | 	shl	result2, #2
13fb0     03 00 00 FF 
13fb4     04 E4 85 F1 | 	sub	objptr, ##1540
13fb8     F2 FC 01 F1 | 	add	result2, objptr
13fbc     FE FC 01 FB | 	rdlong	result2, result2
13fc0     08 4E 05 F1 | 	add	fp, #8
13fc4     A7 FC 61 FC | 	wrlong	result2, fp
13fc8                 | ' 
13fc8                 | ' numpar=compiledline(lineptr_e).result.uresult
13fc8                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13fc8     08 4E 85 F1 | 	sub	fp, #8
13fcc     01 FC 15 F2 | 	cmp	result2, #1 wc
13fd0     47 00 00 FF 
13fd4     7C E4 85 F1 | 	sub	objptr, ##36476
13fd8     14 00 90 CD |  if_b	jmp	#LR__1620
13fdc     08 4E 05 F1 | 	add	fp, #8
13fe0     A7 FC 01 FB | 	rdlong	result2, fp
13fe4     08 4E 85 F1 | 	sub	fp, #8
13fe8     41 FC 15 F2 | 	cmp	result2, #65 wc
13fec     50 00 90 CD |  if_b	jmp	#LR__1621
13ff0                 | LR__1620
13ff0     00 12 06 F6 | 	mov	arg01, #0
13ff4     64 91 B1 FD | 	call	#__system___getiolock_0616
13ff8     FD 12 02 F6 | 	mov	arg01, result1
13ffc     B8 34 B1 FD | 	call	#__system___lockmem
14000     BD 01 00 FF 
14004     0D 14 06 F6 | 	mov	arg02, ##@LR__5976
14008     00 12 06 F6 | 	mov	arg01, #0
1400c     00 16 06 F6 | 	mov	arg03, #0
14010     9C 41 B1 FD | 	call	#__system___basic_print_string
14014     00 12 06 F6 | 	mov	arg01, #0
14018     40 91 B1 FD | 	call	#__system___getiolock_0616
1401c     FD 00 68 FC | 	wrlong	#0, result1
14020     50 00 00 FF 
14024     F0 E4 05 F1 | 	add	objptr, ##41200
14028     F2 14 02 FB | 	rdlong	arg02, objptr
1402c     50 00 00 FF 
14030     F0 E4 85 F1 | 	sub	objptr, ##41200
14034     27 12 06 F6 | 	mov	arg01, #39
14038     64 FA B0 FD | 	call	#_printerror
1403c     44 0B 90 FD | 	jmp	#LR__1670
14040                 | LR__1621
14040     08 4E 05 F1 | 	add	fp, #8
14044     A7 FC 01 FB | 	rdlong	result2, fp
14048     01 FC 85 F1 | 	sub	result2, #1
1404c     28 4F 05 F1 | 	add	fp, #296
14050     A7 FC 61 FC | 	wrlong	result2, fp
14054     3C E4 05 F1 | 	add	objptr, #60
14058     F2 FC E1 FA | 	rdword	result2, objptr
1405c     FE FC 51 F6 | 	abs	result2, result2 wc
14060     01 FC 45 F0 | 	shr	result2, #1
14064     FE FC 81 F6 | 	negc	result2, result2
14068     0C 4E 05 F1 | 	add	fp, #12
1406c     A7 FC 61 FC | 	wrlong	result2, fp
14070     02 E4 05 F1 | 	add	objptr, #2
14074     F2 26 C2 FA | 	rdbyte	local01, objptr
14078     3E E4 85 F1 | 	sub	objptr, #62
1407c     04 4E 05 F1 | 	add	fp, #4
14080     A7 26 62 FC | 	wrlong	local01, fp
14084     40 4F 85 F1 | 	sub	fp, #320
14088                 | ' i=numpar-1
14088                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
14088                 | ' do
14088                 | LR__1622
14088     78 C7 BE FD | 	call	#_edit
1408c     A7 FA 61 FC | 	wrlong	result1, fp
14090                 | ' 
14090                 | '   line$=edit()
14090                 | ' 
14090                 | '   if v.cursor_y=cpy+1 then
14090     3E E4 05 F1 | 	add	objptr, #62
14094     F2 26 C2 FA | 	rdbyte	local01, objptr
14098     3E E4 85 F1 | 	sub	objptr, #62
1409c     40 4F 05 F1 | 	add	fp, #320
140a0     A7 16 02 FB | 	rdlong	arg03, fp
140a4     40 4F 85 F1 | 	sub	fp, #320
140a8     01 16 06 F1 | 	add	arg03, #1
140ac     0B 27 0A F2 | 	cmp	local01, arg03 wz
140b0     6C 00 90 5D |  if_ne	jmp	#LR__1625
140b4     A7 26 02 FB | 	rdlong	local01, fp
140b8     13 13 02 F6 | 	mov	arg01, local01
140bc     09 29 02 F6 | 	mov	local02, arg01
140c0     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
140c4                 | LR__1623
140c4     14 FB C9 FA | 	rdbyte	result1, local02 wz
140c8     01 28 06 51 |  if_ne	add	local02, #1
140cc     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
140d0                 | LR__1624
140d0     09 29 82 F1 | 	sub	local02, arg01
140d4     14 15 02 F6 | 	mov	arg02, local02
140d8     3C 4F 05 F1 | 	add	fp, #316
140dc     A7 16 02 FB | 	rdlong	arg03, fp
140e0     3C 4F 85 F1 | 	sub	fp, #316
140e4     0B 15 82 F1 | 	sub	arg02, arg03
140e8     37 00 00 FF 
140ec     34 E4 05 F1 | 	add	objptr, ##28212
140f0     F2 16 02 FB | 	rdlong	arg03, objptr
140f4     37 00 00 FF 
140f8     34 E4 85 F1 | 	sub	objptr, ##28212
140fc     0B 15 02 F1 | 	add	arg02, arg03
14100     13 13 02 F6 | 	mov	arg01, local01
14104     B8 54 B1 FD | 	call	#__system__Right_S
14108     FD 12 02 F6 | 	mov	arg01, result1
1410c     B8 58 B1 FD | 	call	#__system__RTrim_S
14110     FD 12 02 F6 | 	mov	arg01, result1
14114     F0 57 B1 FD | 	call	#__system__LTrim_S
14118     A7 FA 61 FC | 	wrlong	result1, fp
1411c     14 00 90 FD | 	jmp	#LR__1626
14120                 | LR__1625
14120     A7 12 02 FB | 	rdlong	arg01, fp
14124     A0 58 B1 FD | 	call	#__system__RTrim_S
14128     FD 12 02 F6 | 	mov	arg01, result1
1412c     D8 57 B1 FD | 	call	#__system__LTrim_S
14130     A7 FA 61 FC | 	wrlong	result1, fp
14134                 | LR__1626
14134                 | '   do
14134                 | LR__1627
14134     A7 14 02 FB | 	rdlong	arg02, fp
14138     BD 01 00 FF 
1413c     18 16 06 F6 | 	mov	arg03, ##@LR__5977
14140     01 12 06 F6 | 	mov	arg01, #1
14144     38 59 B1 FD | 	call	#__system__Instr
14148     0C 4E 05 F1 | 	add	fp, #12
1414c     A7 FA 61 FC | 	wrlong	result1, fp
14150                 | '    comma=instr(1,line$,",")  
14150                 | '    if comma>0  then 
14150     0C 4E 85 F1 | 	sub	fp, #12
14154     01 FA 15 F2 | 	cmp	result1, #1 wc
14158     68 00 90 CD |  if_b	jmp	#LR__1630
1415c     A7 12 02 FB | 	rdlong	arg01, fp
14160     0C 4E 05 F1 | 	add	fp, #12
14164     A7 14 02 FB | 	rdlong	arg02, fp
14168     0C 4E 85 F1 | 	sub	fp, #12
1416c     01 14 86 F1 | 	sub	arg02, #1
14170     C4 53 B1 FD | 	call	#__system__Left_S
14174     04 4E 05 F1 | 	add	fp, #4
14178     A7 FA 61 FC | 	wrlong	result1, fp
1417c     04 4E 85 F1 | 	sub	fp, #4
14180     A7 26 02 FB | 	rdlong	local01, fp
14184     13 13 02 F6 | 	mov	arg01, local01
14188     09 29 02 F6 | 	mov	local02, arg01
1418c     97 06 48 FB | 	callpa	#(@LR__1629-@LR__1628)>>2,fcache_load_ptr_
14190                 | LR__1628
14190     14 FB C9 FA | 	rdbyte	result1, local02 wz
14194     01 28 06 51 |  if_ne	add	local02, #1
14198     F4 FF 9F 5D |  if_ne	jmp	#LR__1628
1419c                 | LR__1629
1419c     09 29 82 F1 | 	sub	local02, arg01
141a0     14 15 02 F6 | 	mov	arg02, local02
141a4     0C 4E 05 F1 | 	add	fp, #12
141a8     A7 16 02 FB | 	rdlong	arg03, fp
141ac     0C 4E 85 F1 | 	sub	fp, #12
141b0     0B 15 82 F1 | 	sub	arg02, arg03
141b4     13 13 02 F6 | 	mov	arg01, local01
141b8     04 54 B1 FD | 	call	#__system__Right_S
141bc     A7 FA 61 FC | 	wrlong	result1, fp
141c0     28 00 90 FD | 	jmp	#LR__1631
141c4                 | LR__1630
141c4     A7 12 02 FB | 	rdlong	arg01, fp
141c8     FC 57 B1 FD | 	call	#__system__RTrim_S
141cc     FD 12 02 F6 | 	mov	arg01, result1
141d0     34 57 B1 FD | 	call	#__system__LTrim_S
141d4     04 4E 05 F1 | 	add	fp, #4
141d8     A7 FA 61 FC | 	wrlong	result1, fp
141dc     04 4E 85 F1 | 	sub	fp, #4
141e0     BD 01 00 FF 
141e4     1A 26 06 F6 | 	mov	local01, ##@LR__5978
141e8     A7 26 62 FC | 	wrlong	local01, fp
141ec                 | LR__1631
141ec     30 4F 05 F1 | 	add	fp, #304
141f0     A7 26 02 FB | 	rdlong	local01, fp
141f4     02 26 66 F0 | 	shl	local01, #2
141f8     04 4F 85 F1 | 	sub	fp, #260
141fc     A7 26 02 F1 | 	add	local01, fp
14200     28 4E 85 F1 | 	sub	fp, #40
14204     A7 FA 01 FB | 	rdlong	result1, fp
14208     13 FB 61 FC | 	wrlong	result1, local01
1420c     2C 4F 05 F1 | 	add	fp, #300
14210     A7 26 02 FB | 	rdlong	local01, fp
14214     01 26 86 F1 | 	sub	local01, #1
14218     A7 26 62 FC | 	wrlong	local01, fp
1421c     30 4F 85 F1 | 	sub	fp, #304
14220     00 26 56 F2 | 	cmps	local01, #0 wc
14224     18 00 90 CD |  if_b	jmp	#LR__1632
14228     A7 12 02 FB | 	rdlong	arg01, fp
1422c     BD 01 00 FF 
14230     1B 14 06 F6 | 	mov	arg02, ##@LR__5979
14234     A8 32 B1 FD | 	call	#__system___string_cmp
14238     00 FA 0D F2 | 	cmp	result1, #0 wz
1423c     F4 FE 9F 5D |  if_ne	jmp	#LR__1627
14240                 | LR__1632
14240     30 4F 05 F1 | 	add	fp, #304
14244     A7 26 02 FB | 	rdlong	local01, fp
14248     30 4F 85 F1 | 	sub	fp, #304
1424c     00 26 56 F2 | 	cmps	local01, #0 wc
14250     34 FE 9F 3D |  if_ae	jmp	#LR__1622
14254                 | ' 
14254                 | ' for i=0 to numpar-1
14254     30 4F 05 F1 | 	add	fp, #304
14258     A7 00 68 FC | 	wrlong	#0, fp
1425c     28 4F 85 F1 | 	sub	fp, #296
14260     A7 2A 02 FB | 	rdlong	local03, fp
14264     08 4E 85 F1 | 	sub	fp, #8
14268                 | LR__1633
14268     30 4F 05 F1 | 	add	fp, #304
1426c     A7 2C 02 FB | 	rdlong	local04, fp
14270     30 4F 85 F1 | 	sub	fp, #304
14274     16 27 02 F6 | 	mov	local01, local04
14278     15 27 52 F2 | 	cmps	local01, local03 wc
1427c     04 09 90 3D |  if_ae	jmp	#LR__1669
14280                 | ' 
14280                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
14280     30 4F 05 F1 | 	add	fp, #304
14284     A7 16 02 FB | 	rdlong	arg03, fp
14288     02 16 66 F0 | 	shl	arg03, #2
1428c     04 4F 85 F1 | 	sub	fp, #260
14290     A7 16 02 F1 | 	add	arg03, fp
14294     0B 13 02 FB | 	rdlong	arg01, arg03
14298     2C 4E 85 F1 | 	sub	fp, #44
1429c     74 27 BF FD | 	call	#_isnum
142a0     FD 2E 02 F6 | 	mov	local05, result1
142a4     30 4F 05 F1 | 	add	fp, #304
142a8     A7 16 02 FB | 	rdlong	arg03, fp
142ac     02 16 66 F0 | 	shl	arg03, #2
142b0     04 4F 85 F1 | 	sub	fp, #260
142b4     A7 30 02 F6 | 	mov	local06, fp
142b8     A7 16 02 F1 | 	add	arg03, fp
142bc     0B 13 02 FB | 	rdlong	arg01, arg03
142c0     2C 4E 85 F1 | 	sub	fp, #44
142c4     38 2B BF FD | 	call	#_isint
142c8     FD 2E 2A F5 | 	andn	local05, result1 wz
142cc     52 00 00 5F 
142d0     4C E5 05 51 |  if_ne	add	objptr, ##42316
142d4     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
142d8     52 00 00 5F 
142dc     4C E5 85 51 |  if_ne	sub	objptr, ##42316
142e0                 | '   if isint(args(i)) then r=result_int 
142e0     30 4F 05 F1 | 	add	fp, #304
142e4     A7 2E 02 FB | 	rdlong	local05, fp
142e8     02 2E 66 F0 | 	shl	local05, #2
142ec     04 4F 85 F1 | 	sub	fp, #260
142f0     A7 2E 02 F1 | 	add	local05, fp
142f4     17 13 02 FB | 	rdlong	arg01, local05
142f8     2C 4E 85 F1 | 	sub	fp, #44
142fc     00 2B BF FD | 	call	#_isint
14300     00 FA 0D F2 | 	cmp	result1, #0 wz
14304     52 00 00 5F 
14308     4C E5 05 51 |  if_ne	add	objptr, ##42316
1430c     F2 38 68 5C |  if_ne	wrlong	#28, objptr
14310     52 00 00 5F 
14314     4C E5 85 51 |  if_ne	sub	objptr, ##42316
14318                 | '   if isdec(args(i)) then r=result_uint 
14318     30 4F 05 F1 | 	add	fp, #304
1431c     A7 2E 02 FB | 	rdlong	local05, fp
14320     02 2E 66 F0 | 	shl	local05, #2
14324     04 4F 85 F1 | 	sub	fp, #260
14328     A7 2E 02 F1 | 	add	local05, fp
1432c     17 13 02 FB | 	rdlong	arg01, local05
14330     2C 4E 85 F1 | 	sub	fp, #44
14334     6C 2D BF FD | 	call	#_isdec
14338     00 FA 0D F2 | 	cmp	result1, #0 wz
1433c     52 00 00 5F 
14340     4C E5 05 51 |  if_ne	add	objptr, ##42316
14344     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
14348     52 00 00 5F 
1434c     4C E5 85 51 |  if_ne	sub	objptr, ##42316
14350                 | '   if not isnum(args(i)) then 
14350     30 4F 05 F1 | 	add	fp, #304
14354     A7 32 02 FB | 	rdlong	local07, fp
14358     19 35 02 F6 | 	mov	local08, local07
1435c     02 34 66 F0 | 	shl	local08, #2
14360     04 4F 85 F1 | 	sub	fp, #260
14364     A7 36 02 F6 | 	mov	local09, fp
14368     A7 34 02 F1 | 	add	local08, fp
1436c     1A 13 02 FB | 	rdlong	arg01, local08
14370     2C 4E 85 F1 | 	sub	fp, #44
14374     9C 26 BF FD | 	call	#_isnum
14378     FD 2E 22 F6 | 	not	local05, result1
1437c     00 2E 0E F2 | 	cmp	local05, #0 wz
14380     44 01 90 AD |  if_e	jmp	#LR__1638
14384     52 00 00 FF 
14388     4C E5 05 F1 | 	add	objptr, ##42316
1438c     F2 56 68 FC | 	wrlong	#43, objptr
14390     52 00 00 FF 
14394     4C E5 85 F1 | 	sub	objptr, ##42316
14398     04 4E 05 F1 | 	add	fp, #4
1439c     A7 12 02 FB | 	rdlong	arg01, fp
143a0     04 4E 85 F1 | 	sub	fp, #4
143a4     09 29 02 F6 | 	mov	local02, arg01
143a8     97 06 48 FB | 	callpa	#(@LR__1635-@LR__1634)>>2,fcache_load_ptr_
143ac                 | LR__1634
143ac     14 FB C9 FA | 	rdbyte	result1, local02 wz
143b0     01 28 06 51 |  if_ne	add	local02, #1
143b4     F4 FF 9F 5D |  if_ne	jmp	#LR__1634
143b8                 | LR__1635
143b8     09 29 82 F1 | 	sub	local02, arg01
143bc     14 33 02 F6 | 	mov	local07, local02
143c0     38 4F 05 F1 | 	add	fp, #312
143c4     A7 32 62 FC | 	wrlong	local07, fp
143c8     52 00 00 FF 
143cc     D0 E4 05 F1 | 	add	objptr, ##42192
143d0     F2 12 02 FB | 	rdlong	arg01, objptr
143d4     19 13 82 F1 | 	sub	arg01, local07
143d8     04 12 86 F1 | 	sub	arg01, #4
143dc     03 12 26 F5 | 	andn	arg01, #3
143e0     F2 12 62 FC | 	wrlong	arg01, objptr
143e4     52 00 00 FF 
143e8     D0 E4 85 F1 | 	sub	objptr, ##42192
143ec     A7 14 02 FB | 	rdlong	arg02, fp
143f0     38 4F 85 F1 | 	sub	fp, #312
143f4     48 F8 B0 FD | 	call	#_pslpoke
143f8                 | '     pslpoke memtop,l
143f8                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
143f8     34 4F 05 F1 | 	add	fp, #308
143fc     A7 02 68 FC | 	wrlong	#1, fp
14400     04 4E 05 F1 | 	add	fp, #4
14404     A7 38 02 FB | 	rdlong	local10, fp
14408     38 4F 85 F1 | 	sub	fp, #312
1440c     01 38 06 F1 | 	add	local10, #1
14410                 | LR__1636
14410     34 4F 05 F1 | 	add	fp, #308
14414     A7 2E 02 FB | 	rdlong	local05, fp
14418     34 4F 85 F1 | 	sub	fp, #308
1441c     1C 2F 52 F2 | 	cmps	local05, local10 wc
14420     84 00 90 3D |  if_ae	jmp	#LR__1637
14424     52 00 00 FF 
14428     D0 E4 05 F1 | 	add	objptr, ##42192
1442c     F2 32 02 FB | 	rdlong	local07, objptr
14430     52 00 00 FF 
14434     D0 E4 85 F1 | 	sub	objptr, ##42192
14438     03 32 06 F1 | 	add	local07, #3
1443c     34 4F 05 F1 | 	add	fp, #308
14440     A7 3A 02 FB | 	rdlong	local11, fp
14444     1D 33 02 F1 | 	add	local07, local11
14448     04 4E 85 F1 | 	sub	fp, #4
1444c     A7 3C 02 FB | 	rdlong	local12, fp
14450     02 3C 66 F0 | 	shl	local12, #2
14454     04 4F 85 F1 | 	sub	fp, #260
14458     A7 3E 02 F6 | 	mov	local13, fp
1445c     A7 3C 02 F1 | 	add	local12, fp
14460     1E 13 02 FB | 	rdlong	arg01, local12
14464     2C 4E 85 F1 | 	sub	fp, #44
14468     01 40 06 F6 | 	mov	local14, #1
1446c     1D 15 02 F6 | 	mov	arg02, local11
14470     01 16 06 F6 | 	mov	arg03, #1
14474     D8 51 B1 FD | 	call	#__system__Mid_S
14478     FD 14 C2 FA | 	rdbyte	arg02, result1
1447c     19 13 02 F6 | 	mov	arg01, local07
14480     4C F8 B0 FD | 	call	#_pspoke
14484     34 4F 05 F1 | 	add	fp, #308
14488     A7 34 02 FB | 	rdlong	local08, fp
1448c     1A 33 02 F6 | 	mov	local07, local08
14490     1A 31 02 F6 | 	mov	local06, local08
14494     18 37 02 F6 | 	mov	local09, local06
14498     01 36 06 F1 | 	add	local09, #1
1449c     A7 36 62 FC | 	wrlong	local09, fp
144a0     34 4F 85 F1 | 	sub	fp, #308
144a4     68 FF 9F FD | 	jmp	#LR__1636
144a8                 | LR__1637
144a8     52 00 00 FF 
144ac     D0 E4 05 F1 | 	add	objptr, ##42192
144b0     F2 2E 02 FB | 	rdlong	local05, objptr
144b4     52 00 00 FF 
144b8     D0 E4 85 F1 | 	sub	objptr, ##42192
144bc     10 4E 05 F1 | 	add	fp, #16
144c0     A7 2E 62 FC | 	wrlong	local05, fp
144c4     10 4E 85 F1 | 	sub	fp, #16
144c8                 | LR__1638
144c8     E0 92 BF FD | 	call	#_pop
144cc     FE 2E 02 F6 | 	mov	local05, result2
144d0     FF 42 02 F6 | 	mov	local15, result3
144d4     1C 4E 05 F1 | 	add	fp, #28
144d8     A7 FA 61 FC | 	wrlong	result1, fp
144dc     04 4E 05 F1 | 	add	fp, #4
144e0     A7 2E 62 FC | 	wrlong	local05, fp
144e4     04 4E 05 F1 | 	add	fp, #4
144e8     A7 42 62 FC | 	wrlong	local15, fp
144ec     04 4E 85 F1 | 	sub	fp, #4
144f0     A7 44 02 FB | 	rdlong	local16, fp
144f4     0C 4E 85 F1 | 	sub	fp, #12
144f8     A7 44 62 FC | 	wrlong	local16, fp
144fc                 | '   t1=pop() : vartype=t1.result.twowords(1)
144fc                 | '   select case vartype
144fc     14 4E 85 F1 | 	sub	fp, #20
14500     22 47 0A F6 | 	mov	local17, local16 wz
14504     64 00 90 AD |  if_e	jmp	#LR__1639
14508     00 47 0E F2 | 	cmp	local17, #256 wz
1450c     6C 00 90 AD |  if_e	jmp	#LR__1640
14510     01 47 0E F2 | 	cmp	local17, #257 wz
14514     74 00 90 AD |  if_e	jmp	#LR__1641
14518     02 47 0E F2 | 	cmp	local17, #258 wz
1451c     7C 00 90 AD |  if_e	jmp	#LR__1642
14520     03 47 0E F2 | 	cmp	local17, #259 wz
14524     84 00 90 AD |  if_e	jmp	#LR__1643
14528     04 47 0E F2 | 	cmp	local17, #260 wz
1452c     8C 00 90 AD |  if_e	jmp	#LR__1644
14530     05 47 0E F2 | 	cmp	local17, #261 wz
14534     94 00 90 AD |  if_e	jmp	#LR__1645
14538     06 47 0E F2 | 	cmp	local17, #262 wz
1453c     9C 00 90 AD |  if_e	jmp	#LR__1646
14540     07 47 0E F2 | 	cmp	local17, #263 wz
14544     A4 00 90 AD |  if_e	jmp	#LR__1647
14548     08 47 0E F2 | 	cmp	local17, #264 wz
1454c     AC 00 90 AD |  if_e	jmp	#LR__1648
14550     09 47 0E F2 | 	cmp	local17, #265 wz
14554     B4 00 90 AD |  if_e	jmp	#LR__1649
14558     0A 47 0E F2 | 	cmp	local17, #266 wz
1455c     BC 00 90 AD |  if_e	jmp	#LR__1650
14560     0B 47 0E F2 | 	cmp	local17, #267 wz
14564     C4 00 90 AD |  if_e	jmp	#LR__1651
14568     D0 00 90 FD | 	jmp	#LR__1652
1456c                 | LR__1639
1456c     18 4E 05 F1 | 	add	fp, #24
14570     A7 18 68 FC | 	wrlong	#12, fp
14574     18 4E 85 F1 | 	sub	fp, #24
14578     CC 00 90 FD | 	jmp	#LR__1653
1457c                 | LR__1640
1457c     18 4E 05 F1 | 	add	fp, #24
14580     A7 18 68 FC | 	wrlong	#12, fp
14584     18 4E 85 F1 | 	sub	fp, #24
14588     BC 00 90 FD | 	jmp	#LR__1653
1458c                 | LR__1641
1458c     18 4E 05 F1 | 	add	fp, #24
14590     A7 02 68 FC | 	wrlong	#1, fp
14594     18 4E 85 F1 | 	sub	fp, #24
14598     AC 00 90 FD | 	jmp	#LR__1653
1459c                 | LR__1642
1459c     18 4E 05 F1 | 	add	fp, #24
145a0     A7 02 68 FC | 	wrlong	#1, fp
145a4     18 4E 85 F1 | 	sub	fp, #24
145a8     9C 00 90 FD | 	jmp	#LR__1653
145ac                 | LR__1643
145ac     18 4E 05 F1 | 	add	fp, #24
145b0     A7 04 68 FC | 	wrlong	#2, fp
145b4     18 4E 85 F1 | 	sub	fp, #24
145b8     8C 00 90 FD | 	jmp	#LR__1653
145bc                 | LR__1644
145bc     18 4E 05 F1 | 	add	fp, #24
145c0     A7 04 68 FC | 	wrlong	#2, fp
145c4     18 4E 85 F1 | 	sub	fp, #24
145c8     7C 00 90 FD | 	jmp	#LR__1653
145cc                 | LR__1645
145cc     18 4E 05 F1 | 	add	fp, #24
145d0     A7 08 68 FC | 	wrlong	#4, fp
145d4     18 4E 85 F1 | 	sub	fp, #24
145d8     6C 00 90 FD | 	jmp	#LR__1653
145dc                 | LR__1646
145dc     18 4E 05 F1 | 	add	fp, #24
145e0     A7 08 68 FC | 	wrlong	#4, fp
145e4     18 4E 85 F1 | 	sub	fp, #24
145e8     5C 00 90 FD | 	jmp	#LR__1653
145ec                 | LR__1647
145ec     18 4E 05 F1 | 	add	fp, #24
145f0     A7 10 68 FC | 	wrlong	#8, fp
145f4     18 4E 85 F1 | 	sub	fp, #24
145f8     4C 00 90 FD | 	jmp	#LR__1653
145fc                 | LR__1648
145fc     18 4E 05 F1 | 	add	fp, #24
14600     A7 10 68 FC | 	wrlong	#8, fp
14604     18 4E 85 F1 | 	sub	fp, #24
14608     3C 00 90 FD | 	jmp	#LR__1653
1460c                 | LR__1649
1460c     18 4E 05 F1 | 	add	fp, #24
14610     A7 0C 68 FC | 	wrlong	#6, fp
14614     18 4E 85 F1 | 	sub	fp, #24
14618     2C 00 90 FD | 	jmp	#LR__1653
1461c                 | LR__1650
1461c     18 4E 05 F1 | 	add	fp, #24
14620     A7 10 68 FC | 	wrlong	#8, fp
14624     18 4E 85 F1 | 	sub	fp, #24
14628     1C 00 90 FD | 	jmp	#LR__1653
1462c                 | LR__1651
1462c     18 4E 05 F1 | 	add	fp, #24
14630     A7 0A 68 FC | 	wrlong	#5, fp
14634     18 4E 85 F1 | 	sub	fp, #24
14638     0C 00 90 FD | 	jmp	#LR__1653
1463c                 | LR__1652
1463c     18 4E 05 F1 | 	add	fp, #24
14640     A7 18 68 FC | 	wrlong	#12, fp
14644     18 4E 85 F1 | 	sub	fp, #24
14648                 | LR__1653
14648                 | '   if esize=12 andalso t1.result.uresult<$80000 then
14648     18 4E 05 F1 | 	add	fp, #24
1464c     A7 44 02 FB | 	rdlong	local16, fp
14650     18 4E 85 F1 | 	sub	fp, #24
14654     0C 44 0E F2 | 	cmp	local16, #12 wz
14658     74 01 90 5D |  if_ne	jmp	#LR__1658
1465c     1C 4E 05 F1 | 	add	fp, #28
14660     A7 32 02 FB | 	rdlong	local07, fp
14664     1C 4E 85 F1 | 	sub	fp, #28
14668     00 04 00 FF 
1466c     00 32 16 F2 | 	cmp	local07, ##524288 wc
14670     5C 01 90 3D |  if_ae	jmp	#LR__1658
14674                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
14674     52 00 00 FF 
14678     4C E5 05 F1 | 	add	objptr, ##42316
1467c     F2 44 02 FB | 	rdlong	local16, objptr
14680     52 00 00 FF 
14684     4C E5 85 F1 | 	sub	objptr, ##42316
14688     1C 44 0E F2 | 	cmp	local16, #28 wz
1468c     38 00 90 5D |  if_ne	jmp	#LR__1654
14690     1C 4E 05 F1 | 	add	fp, #28
14694     A7 44 02 FB | 	rdlong	local16, fp
14698     14 4F 05 F1 | 	add	fp, #276
1469c     A7 32 02 FB | 	rdlong	local07, fp
146a0     19 35 02 F6 | 	mov	local08, local07
146a4     02 34 66 F0 | 	shl	local08, #2
146a8     04 4F 85 F1 | 	sub	fp, #260
146ac     A7 36 02 F6 | 	mov	local09, fp
146b0     A7 34 02 F1 | 	add	local08, fp
146b4     1A 13 02 FB | 	rdlong	arg01, local08
146b8     00 14 06 F6 | 	mov	arg02, #0
146bc     2C 4E 85 F1 | 	sub	fp, #44
146c0     E8 62 B1 FD | 	call	#__system____builtin_atoi
146c4     22 FB 61 FC | 	wrlong	result1, local16
146c8                 | LR__1654
146c8                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
146c8     52 00 00 FF 
146cc     4C E5 05 F1 | 	add	objptr, ##42316
146d0     F2 44 02 FB | 	rdlong	local16, objptr
146d4     52 00 00 FF 
146d8     4C E5 85 F1 | 	sub	objptr, ##42316
146dc     1D 44 0E F2 | 	cmp	local16, #29 wz
146e0     38 00 90 5D |  if_ne	jmp	#LR__1655
146e4     1C 4E 05 F1 | 	add	fp, #28
146e8     A7 44 02 FB | 	rdlong	local16, fp
146ec     14 4F 05 F1 | 	add	fp, #276
146f0     A7 32 02 FB | 	rdlong	local07, fp
146f4     19 35 02 F6 | 	mov	local08, local07
146f8     02 34 66 F0 | 	shl	local08, #2
146fc     04 4F 85 F1 | 	sub	fp, #260
14700     A7 36 02 F6 | 	mov	local09, fp
14704     A7 34 02 F1 | 	add	local08, fp
14708     1A 13 02 FB | 	rdlong	arg01, local08
1470c     00 14 06 F6 | 	mov	arg02, #0
14710     2C 4E 85 F1 | 	sub	fp, #44
14714     94 62 B1 FD | 	call	#__system____builtin_atoi
14718     22 FB 61 FC | 	wrlong	result1, local16
1471c                 | LR__1655
1471c                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1471c     52 00 00 FF 
14720     4C E5 05 F1 | 	add	objptr, ##42316
14724     F2 44 02 FB | 	rdlong	local16, objptr
14728     52 00 00 FF 
1472c     4C E5 85 F1 | 	sub	objptr, ##42316
14730     1E 44 0E F2 | 	cmp	local16, #30 wz
14734     3C 00 90 5D |  if_ne	jmp	#LR__1656
14738     30 4F 05 F1 | 	add	fp, #304
1473c     A7 32 02 FB | 	rdlong	local07, fp
14740     02 32 66 F0 | 	shl	local07, #2
14744     04 4F 85 F1 | 	sub	fp, #260
14748     A7 34 02 F6 | 	mov	local08, fp
1474c     A7 32 02 F1 | 	add	local07, fp
14750     19 13 02 FB | 	rdlong	arg01, local07
14754     2C 4E 85 F1 | 	sub	fp, #44
14758     E4 63 B1 FD | 	call	#__system____builtin_atof
1475c     28 4E 05 F1 | 	add	fp, #40
14760     A7 FA 61 FC | 	wrlong	result1, fp
14764     0C 4E 85 F1 | 	sub	fp, #12
14768     A7 44 02 FB | 	rdlong	local16, fp
1476c     1C 4E 85 F1 | 	sub	fp, #28
14770     22 FB 61 FC | 	wrlong	result1, local16
14774                 | LR__1656
14774                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
14774     52 00 00 FF 
14778     4C E5 05 F1 | 	add	objptr, ##42316
1477c     F2 44 02 FB | 	rdlong	local16, objptr
14780     52 00 00 FF 
14784     4C E5 85 F1 | 	sub	objptr, ##42316
14788     2B 44 0E F2 | 	cmp	local16, #43 wz
1478c     18 00 90 5D |  if_ne	jmp	#LR__1657
14790     1C 4E 05 F1 | 	add	fp, #28
14794     A7 12 02 FB | 	rdlong	arg01, fp
14798     0C 4E 85 F1 | 	sub	fp, #12
1479c     A7 14 02 FB | 	rdlong	arg02, fp
147a0     10 4E 85 F1 | 	sub	fp, #16
147a4     09 15 62 FC | 	wrlong	arg02, arg01
147a8                 | LR__1657
147a8     1C 4E 05 F1 | 	add	fp, #28
147ac     A7 12 02 FB | 	rdlong	arg01, fp
147b0     1C 4E 85 F1 | 	sub	fp, #28
147b4     08 12 06 F1 | 	add	arg01, #8
147b8     52 00 00 FF 
147bc     4C E5 05 F1 | 	add	objptr, ##42316
147c0     F2 14 02 FB | 	rdlong	arg02, objptr
147c4     52 00 00 FF 
147c8     4C E5 85 F1 | 	sub	objptr, ##42316
147cc     09 15 62 FC | 	wrlong	arg02, arg01
147d0                 | LR__1658
147d0                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
147d0     18 4E 05 F1 | 	add	fp, #24
147d4     A7 44 02 FB | 	rdlong	local16, fp
147d8     18 4E 85 F1 | 	sub	fp, #24
147dc     0C 44 0E F2 | 	cmp	local16, #12 wz
147e0     94 01 90 5D |  if_ne	jmp	#LR__1663
147e4     1C 4E 05 F1 | 	add	fp, #28
147e8     A7 32 02 FB | 	rdlong	local07, fp
147ec     1C 4E 85 F1 | 	sub	fp, #28
147f0     00 04 00 FF 
147f4     00 32 16 F2 | 	cmp	local07, ##524288 wc
147f8     7C 01 90 CD |  if_b	jmp	#LR__1663
147fc                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
147fc     52 00 00 FF 
14800     4C E5 05 F1 | 	add	objptr, ##42316
14804     F2 44 02 FB | 	rdlong	local16, objptr
14808     52 00 00 FF 
1480c     4C E5 85 F1 | 	sub	objptr, ##42316
14810     1C 44 0E F2 | 	cmp	local16, #28 wz
14814     40 00 90 5D |  if_ne	jmp	#LR__1659
14818     1C 4E 05 F1 | 	add	fp, #28
1481c     A7 44 02 FB | 	rdlong	local16, fp
14820     14 4F 05 F1 | 	add	fp, #276
14824     A7 32 02 FB | 	rdlong	local07, fp
14828     19 35 02 F6 | 	mov	local08, local07
1482c     02 34 66 F0 | 	shl	local08, #2
14830     04 4F 85 F1 | 	sub	fp, #260
14834     A7 36 02 F6 | 	mov	local09, fp
14838     A7 34 02 F1 | 	add	local08, fp
1483c     1A 13 02 FB | 	rdlong	arg01, local08
14840     00 14 06 F6 | 	mov	arg02, #0
14844     2C 4E 85 F1 | 	sub	fp, #44
14848     60 61 B1 FD | 	call	#__system____builtin_atoi
1484c     FD 14 02 F6 | 	mov	arg02, result1
14850     22 13 02 F6 | 	mov	arg01, local16
14854     E8 F3 B0 FD | 	call	#_pslpoke
14858                 | LR__1659
14858                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
14858     52 00 00 FF 
1485c     4C E5 05 F1 | 	add	objptr, ##42316
14860     F2 44 02 FB | 	rdlong	local16, objptr
14864     52 00 00 FF 
14868     4C E5 85 F1 | 	sub	objptr, ##42316
1486c     1D 44 0E F2 | 	cmp	local16, #29 wz
14870     40 00 90 5D |  if_ne	jmp	#LR__1660
14874     1C 4E 05 F1 | 	add	fp, #28
14878     A7 44 02 FB | 	rdlong	local16, fp
1487c     14 4F 05 F1 | 	add	fp, #276
14880     A7 32 02 FB | 	rdlong	local07, fp
14884     19 35 02 F6 | 	mov	local08, local07
14888     02 34 66 F0 | 	shl	local08, #2
1488c     04 4F 85 F1 | 	sub	fp, #260
14890     A7 36 02 F6 | 	mov	local09, fp
14894     A7 34 02 F1 | 	add	local08, fp
14898     1A 13 02 FB | 	rdlong	arg01, local08
1489c     00 14 06 F6 | 	mov	arg02, #0
148a0     2C 4E 85 F1 | 	sub	fp, #44
148a4     04 61 B1 FD | 	call	#__system____builtin_atoi
148a8     FD 14 02 F6 | 	mov	arg02, result1
148ac     22 13 02 F6 | 	mov	arg01, local16
148b0     8C F3 B0 FD | 	call	#_pslpoke
148b4                 | LR__1660
148b4                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
148b4     52 00 00 FF 
148b8     4C E5 05 F1 | 	add	objptr, ##42316
148bc     F2 44 02 FB | 	rdlong	local16, objptr
148c0     52 00 00 FF 
148c4     4C E5 85 F1 | 	sub	objptr, ##42316
148c8     1E 44 0E F2 | 	cmp	local16, #30 wz
148cc     4C 00 90 5D |  if_ne	jmp	#LR__1661
148d0     30 4F 05 F1 | 	add	fp, #304
148d4     A7 32 02 FB | 	rdlong	local07, fp
148d8     02 32 66 F0 | 	shl	local07, #2
148dc     04 4F 85 F1 | 	sub	fp, #260
148e0     A7 34 02 F6 | 	mov	local08, fp
148e4     A7 32 02 F1 | 	add	local07, fp
148e8     19 13 02 FB | 	rdlong	arg01, local07
148ec     2C 4E 85 F1 | 	sub	fp, #44
148f0     4C 62 B1 FD | 	call	#__system____builtin_atof
148f4     28 4E 05 F1 | 	add	fp, #40
148f8     A7 FA 61 FC | 	wrlong	result1, fp
148fc     0C 4E 85 F1 | 	sub	fp, #12
14900     A7 44 02 FB | 	rdlong	local16, fp
14904     0C 4E 05 F1 | 	add	fp, #12
14908     A7 12 02 F6 | 	mov	arg01, fp
1490c     28 4E 85 F1 | 	sub	fp, #40
14910     09 15 02 FB | 	rdlong	arg02, arg01
14914     22 13 02 F6 | 	mov	arg01, local16
14918     24 F3 B0 FD | 	call	#_pslpoke
1491c                 | LR__1661
1491c                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1491c     52 00 00 FF 
14920     4C E5 05 F1 | 	add	objptr, ##42316
14924     F2 44 02 FB | 	rdlong	local16, objptr
14928     52 00 00 FF 
1492c     4C E5 85 F1 | 	sub	objptr, ##42316
14930     2B 44 0E F2 | 	cmp	local16, #43 wz
14934     18 00 90 5D |  if_ne	jmp	#LR__1662
14938     1C 4E 05 F1 | 	add	fp, #28
1493c     A7 12 02 FB | 	rdlong	arg01, fp
14940     0C 4E 85 F1 | 	sub	fp, #12
14944     A7 14 02 FB | 	rdlong	arg02, fp
14948     10 4E 85 F1 | 	sub	fp, #16
1494c     F0 F2 B0 FD | 	call	#_pslpoke
14950                 | LR__1662
14950     1C 4E 05 F1 | 	add	fp, #28
14954     A7 12 02 FB | 	rdlong	arg01, fp
14958     1C 4E 85 F1 | 	sub	fp, #28
1495c     08 12 06 F1 | 	add	arg01, #8
14960     52 00 00 FF 
14964     4C E5 05 F1 | 	add	objptr, ##42316
14968     F2 14 02 FB | 	rdlong	arg02, objptr
1496c     52 00 00 FF 
14970     4C E5 85 F1 | 	sub	objptr, ##42316
14974     C8 F2 B0 FD | 	call	#_pslpoke
14978                 | LR__1663
14978                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
14978     18 4E 05 F1 | 	add	fp, #24
1497c     A7 44 02 FB | 	rdlong	local16, fp
14980     18 4E 85 F1 | 	sub	fp, #24
14984     05 44 0E F2 | 	cmp	local16, #5 wz
14988     52 00 00 AF 
1498c     4C E5 05 A1 |  if_e	add	objptr, ##42316
14990     F2 42 02 AB |  if_e	rdlong	local15, objptr
14994     52 00 00 AF 
14998     4C E5 85 A1 |  if_e	sub	objptr, ##42316
1499c     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
149a0     18 00 90 5D |  if_ne	jmp	#LR__1664
149a4     1C 4E 05 F1 | 	add	fp, #28
149a8     A7 12 02 FB | 	rdlong	arg01, fp
149ac     0C 4E 85 F1 | 	sub	fp, #12
149b0     A7 14 02 FB | 	rdlong	arg02, fp
149b4     10 4E 85 F1 | 	sub	fp, #16
149b8     84 F2 B0 FD | 	call	#_pslpoke
149bc                 | LR__1664
149bc                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
149bc     18 4E 05 F1 | 	add	fp, #24
149c0     A7 44 02 FB | 	rdlong	local16, fp
149c4     18 4E 85 F1 | 	sub	fp, #24
149c8     04 44 0E F2 | 	cmp	local16, #4 wz
149cc     54 00 90 5D |  if_ne	jmp	#LR__1665
149d0     52 00 00 FF 
149d4     4C E5 05 F1 | 	add	objptr, ##42316
149d8     F2 42 02 FB | 	rdlong	local15, objptr
149dc     52 00 00 FF 
149e0     4C E5 85 F1 | 	sub	objptr, ##42316
149e4     2B 42 0E F2 | 	cmp	local15, #43 wz
149e8     38 00 90 AD |  if_e	jmp	#LR__1665
149ec     1C 4E 05 F1 | 	add	fp, #28
149f0     A7 44 02 FB | 	rdlong	local16, fp
149f4     14 4F 05 F1 | 	add	fp, #276
149f8     A7 34 02 FB | 	rdlong	local08, fp
149fc     02 34 66 F0 | 	shl	local08, #2
14a00     04 4F 85 F1 | 	sub	fp, #260
14a04     A7 34 02 F1 | 	add	local08, fp
14a08     1A 13 02 FB | 	rdlong	arg01, local08
14a0c     00 14 06 F6 | 	mov	arg02, #0
14a10     2C 4E 85 F1 | 	sub	fp, #44
14a14     94 5F B1 FD | 	call	#__system____builtin_atoi
14a18     FD 14 02 F6 | 	mov	arg02, result1
14a1c     22 13 02 F6 | 	mov	arg01, local16
14a20     1C F2 B0 FD | 	call	#_pslpoke
14a24                 | LR__1665
14a24                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
14a24     18 4E 05 F1 | 	add	fp, #24
14a28     A7 44 02 FB | 	rdlong	local16, fp
14a2c     18 4E 85 F1 | 	sub	fp, #24
14a30     02 44 0E F2 | 	cmp	local16, #2 wz
14a34     54 00 90 5D |  if_ne	jmp	#LR__1666
14a38     52 00 00 FF 
14a3c     4C E5 05 F1 | 	add	objptr, ##42316
14a40     F2 42 02 FB | 	rdlong	local15, objptr
14a44     52 00 00 FF 
14a48     4C E5 85 F1 | 	sub	objptr, ##42316
14a4c     2B 42 0E F2 | 	cmp	local15, #43 wz
14a50     38 00 90 AD |  if_e	jmp	#LR__1666
14a54     1C 4E 05 F1 | 	add	fp, #28
14a58     A7 44 02 FB | 	rdlong	local16, fp
14a5c     14 4F 05 F1 | 	add	fp, #276
14a60     A7 34 02 FB | 	rdlong	local08, fp
14a64     02 34 66 F0 | 	shl	local08, #2
14a68     04 4F 85 F1 | 	sub	fp, #260
14a6c     A7 34 02 F1 | 	add	local08, fp
14a70     1A 13 02 FB | 	rdlong	arg01, local08
14a74     00 14 06 F6 | 	mov	arg02, #0
14a78     2C 4E 85 F1 | 	sub	fp, #44
14a7c     2C 5F B1 FD | 	call	#__system____builtin_atoi
14a80     FD 14 02 F6 | 	mov	arg02, result1
14a84     22 13 02 F6 | 	mov	arg01, local16
14a88     FC F1 B0 FD | 	call	#_psdpoke
14a8c                 | LR__1666
14a8c                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
14a8c     18 4E 05 F1 | 	add	fp, #24
14a90     A7 44 02 FB | 	rdlong	local16, fp
14a94     18 4E 85 F1 | 	sub	fp, #24
14a98     01 44 0E F2 | 	cmp	local16, #1 wz
14a9c     54 00 90 5D |  if_ne	jmp	#LR__1667
14aa0     52 00 00 FF 
14aa4     4C E5 05 F1 | 	add	objptr, ##42316
14aa8     F2 42 02 FB | 	rdlong	local15, objptr
14aac     52 00 00 FF 
14ab0     4C E5 85 F1 | 	sub	objptr, ##42316
14ab4     2B 42 0E F2 | 	cmp	local15, #43 wz
14ab8     38 00 90 AD |  if_e	jmp	#LR__1667
14abc     1C 4E 05 F1 | 	add	fp, #28
14ac0     A7 44 02 FB | 	rdlong	local16, fp
14ac4     14 4F 05 F1 | 	add	fp, #276
14ac8     A7 34 02 FB | 	rdlong	local08, fp
14acc     02 34 66 F0 | 	shl	local08, #2
14ad0     04 4F 85 F1 | 	sub	fp, #260
14ad4     A7 34 02 F1 | 	add	local08, fp
14ad8     1A 13 02 FB | 	rdlong	arg01, local08
14adc     00 14 06 F6 | 	mov	arg02, #0
14ae0     2C 4E 85 F1 | 	sub	fp, #44
14ae4     C4 5E B1 FD | 	call	#__system____builtin_atoi
14ae8     FD 14 02 F6 | 	mov	arg02, result1
14aec     22 13 02 F6 | 	mov	arg01, local16
14af0     DC F1 B0 FD | 	call	#_pspoke
14af4                 | LR__1667
14af4                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14af4     18 4E 05 F1 | 	add	fp, #24
14af8     A7 44 02 FB | 	rdlong	local16, fp
14afc     18 4E 85 F1 | 	sub	fp, #24
14b00     06 44 0E F2 | 	cmp	local16, #6 wz
14b04     64 00 90 5D |  if_ne	jmp	#LR__1668
14b08     52 00 00 FF 
14b0c     4C E5 05 F1 | 	add	objptr, ##42316
14b10     F2 42 02 FB | 	rdlong	local15, objptr
14b14     52 00 00 FF 
14b18     4C E5 85 F1 | 	sub	objptr, ##42316
14b1c     2B 42 0E F2 | 	cmp	local15, #43 wz
14b20     48 00 90 AD |  if_e	jmp	#LR__1668
14b24     30 4F 05 F1 | 	add	fp, #304
14b28     A7 32 02 FB | 	rdlong	local07, fp
14b2c     02 32 66 F0 | 	shl	local07, #2
14b30     04 4F 85 F1 | 	sub	fp, #260
14b34     A7 32 02 F1 | 	add	local07, fp
14b38     19 13 02 FB | 	rdlong	arg01, local07
14b3c     2C 4E 85 F1 | 	sub	fp, #44
14b40     FC 5F B1 FD | 	call	#__system____builtin_atof
14b44     28 4E 05 F1 | 	add	fp, #40
14b48     A7 FA 61 FC | 	wrlong	result1, fp
14b4c     0C 4E 85 F1 | 	sub	fp, #12
14b50     A7 44 02 FB | 	rdlong	local16, fp
14b54     0C 4E 05 F1 | 	add	fp, #12
14b58     A7 12 02 F6 | 	mov	arg01, fp
14b5c     28 4E 85 F1 | 	sub	fp, #40
14b60     09 15 02 FB | 	rdlong	arg02, arg01
14b64     22 13 02 F6 | 	mov	arg01, local16
14b68     D4 F0 B0 FD | 	call	#_pslpoke
14b6c                 | LR__1668
14b6c     30 4F 05 F1 | 	add	fp, #304
14b70     A7 42 02 FB | 	rdlong	local15, fp
14b74     01 42 06 F1 | 	add	local15, #1
14b78     A7 42 62 FC | 	wrlong	local15, fp
14b7c     30 4F 85 F1 | 	sub	fp, #304
14b80     E4 F6 9F FD | 	jmp	#LR__1633
14b84                 | LR__1669
14b84                 | LR__1670
14b84     A7 F0 03 F6 | 	mov	ptra, fp
14b88     B2 00 A0 FD | 	call	#popregs_
14b8c                 | _do_input_ret
14b8c     2D 00 64 FD | 	ret
14b90                 | 
14b90                 | ' 
14b90                 | ' ' ----------------  left$
14b90                 | ' 
14b90                 | ' sub do_left
14b90                 | _do_left
14b90     00 4A 05 F6 | 	mov	COUNT_, #0
14b94     A8 00 A0 FD | 	call	#pushregs_
14b98     14 F0 07 F1 | 	add	ptra, #20
14b9c     4A 00 00 FF 
14ba0     80 E4 05 F1 | 	add	objptr, ##38016
14ba4     F2 16 02 FB | 	rdlong	arg03, objptr
14ba8     0B 15 02 F6 | 	mov	arg02, arg03
14bac     01 14 66 F0 | 	shl	arg02, #1
14bb0     0B 15 02 F1 | 	add	arg02, arg03
14bb4     02 14 66 F0 | 	shl	arg02, #2
14bb8     03 00 00 FF 
14bbc     04 E4 85 F1 | 	sub	objptr, ##1540
14bc0     F2 14 02 F1 | 	add	arg02, objptr
14bc4     0A 17 02 FB | 	rdlong	arg03, arg02
14bc8     0C 4E 05 F1 | 	add	fp, #12
14bcc     A7 16 62 FC | 	wrlong	arg03, fp
14bd0                 | ' 
14bd0                 | ' numpar=compiledline(lineptr_e).result.uresult
14bd0                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
14bd0     0C 4E 85 F1 | 	sub	fp, #12
14bd4     02 16 0E F2 | 	cmp	arg03, #2 wz
14bd8     47 00 00 FF 
14bdc     7C E4 85 F1 | 	sub	objptr, ##36476
14be0     40 00 90 AD |  if_e	jmp	#LR__1680
14be4     00 12 06 F6 | 	mov	arg01, #0
14be8     70 85 B1 FD | 	call	#__system___getiolock_0616
14bec     FD 12 02 F6 | 	mov	arg01, result1
14bf0     C4 28 B1 FD | 	call	#__system___lockmem
14bf4     BD 01 00 FF 
14bf8     1C 14 06 F6 | 	mov	arg02, ##@LR__5980
14bfc     00 12 06 F6 | 	mov	arg01, #0
14c00     00 16 06 F6 | 	mov	arg03, #0
14c04     A8 35 B1 FD | 	call	#__system___basic_print_string
14c08     00 12 06 F6 | 	mov	arg01, #0
14c0c     4C 85 B1 FD | 	call	#__system___getiolock_0616
14c10     FD 00 68 FC | 	wrlong	#0, result1
14c14     27 12 06 F6 | 	mov	arg01, #39
14c18     00 14 06 F6 | 	mov	arg02, #0
14c1c     80 EE B0 FD | 	call	#_printerror
14c20     EC 00 90 FD | 	jmp	#LR__1683
14c24                 | LR__1680
14c24     84 8B BF FD | 	call	#_pop
14c28     FF 16 02 F6 | 	mov	arg03, result3
14c2c     A7 FA 61 FC | 	wrlong	result1, fp
14c30     04 4E 05 F1 | 	add	fp, #4
14c34     A7 FC 61 FC | 	wrlong	result2, fp
14c38     04 4E 05 F1 | 	add	fp, #4
14c3c     A7 16 62 FC | 	wrlong	arg03, fp
14c40     08 4E 85 F1 | 	sub	fp, #8
14c44     A7 12 02 F6 | 	mov	arg01, fp
14c48     44 8D BF FD | 	call	#_converttoint
14c4c     FD 16 02 F6 | 	mov	arg03, result1
14c50     10 4E 05 F1 | 	add	fp, #16
14c54     A7 16 62 FC | 	wrlong	arg03, fp
14c58     10 4E 85 F1 | 	sub	fp, #16
14c5c     4C 8B BF FD | 	call	#_pop
14c60     FF 16 02 F6 | 	mov	arg03, result3
14c64     A7 FA 61 FC | 	wrlong	result1, fp
14c68     04 4E 05 F1 | 	add	fp, #4
14c6c     A7 FC 61 FC | 	wrlong	result2, fp
14c70     04 4E 05 F1 | 	add	fp, #4
14c74     A7 16 62 FC | 	wrlong	arg03, fp
14c78                 | ' t1=pop() : arg=converttoint(t1)
14c78                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14c78     08 4E 85 F1 | 	sub	fp, #8
14c7c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14c80     18 00 90 5D |  if_ne	jmp	#LR__1681
14c84     A7 12 02 FB | 	rdlong	arg01, fp
14c88     98 8C BF FD | 	call	#_convertstring
14c8c     A7 FA 61 FC | 	wrlong	result1, fp
14c90     08 4E 05 F1 | 	add	fp, #8
14c94     A7 3E 68 FC | 	wrlong	#31, fp
14c98     08 4E 85 F1 | 	sub	fp, #8
14c9c                 | LR__1681
14c9c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14c9c     08 4E 05 F1 | 	add	fp, #8
14ca0     A7 16 02 FB | 	rdlong	arg03, fp
14ca4     08 4E 85 F1 | 	sub	fp, #8
14ca8     1F 16 0E F2 | 	cmp	arg03, #31 wz
14cac     40 00 90 AD |  if_e	jmp	#LR__1682
14cb0     00 12 06 F6 | 	mov	arg01, #0
14cb4     A4 84 B1 FD | 	call	#__system___getiolock_0616
14cb8     FD 12 02 F6 | 	mov	arg01, result1
14cbc     F8 27 B1 FD | 	call	#__system___lockmem
14cc0     BD 01 00 FF 
14cc4     24 14 06 F6 | 	mov	arg02, ##@LR__5981
14cc8     00 12 06 F6 | 	mov	arg01, #0
14ccc     00 16 06 F6 | 	mov	arg03, #0
14cd0     DC 34 B1 FD | 	call	#__system___basic_print_string
14cd4     00 12 06 F6 | 	mov	arg01, #0
14cd8     80 84 B1 FD | 	call	#__system___getiolock_0616
14cdc     FD 00 68 FC | 	wrlong	#0, result1
14ce0     0F 12 06 F6 | 	mov	arg01, #15
14ce4     00 14 06 F6 | 	mov	arg02, #0
14ce8     B4 ED B0 FD | 	call	#_printerror
14cec     20 00 90 FD | 	jmp	#LR__1683
14cf0                 | LR__1682
14cf0     A7 12 02 FB | 	rdlong	arg01, fp
14cf4     10 4E 05 F1 | 	add	fp, #16
14cf8     A7 14 02 FB | 	rdlong	arg02, fp
14cfc     10 4E 85 F1 | 	sub	fp, #16
14d00     34 48 B1 FD | 	call	#__system__Left_S
14d04     A7 FA 61 FC | 	wrlong	result1, fp
14d08     A7 12 02 F6 | 	mov	arg01, fp
14d0c     34 8B BF FD | 	call	#_push
14d10                 | LR__1683
14d10     A7 F0 03 F6 | 	mov	ptra, fp
14d14     B2 00 A0 FD | 	call	#popregs_
14d18                 | _do_left_ret
14d18     2D 00 64 FD | 	ret
14d1c                 | 
14d1c                 | ' 
14d1c                 | ' ' ----------------  len
14d1c                 | ' 
14d1c                 | ' sub do_len
14d1c                 | _do_len
14d1c     02 4A 05 F6 | 	mov	COUNT_, #2
14d20     A8 00 A0 FD | 	call	#pushregs_
14d24     14 F0 07 F1 | 	add	ptra, #20
14d28     4A 00 00 FF 
14d2c     80 E4 05 F1 | 	add	objptr, ##38016
14d30     F2 26 02 FB | 	rdlong	local01, objptr
14d34     13 17 02 F6 | 	mov	arg03, local01
14d38     01 16 66 F0 | 	shl	arg03, #1
14d3c     13 17 02 F1 | 	add	arg03, local01
14d40     02 16 66 F0 | 	shl	arg03, #2
14d44     03 00 00 FF 
14d48     04 E4 85 F1 | 	sub	objptr, ##1540
14d4c     F2 16 02 F1 | 	add	arg03, objptr
14d50     0B 17 02 FB | 	rdlong	arg03, arg03
14d54     0C 4E 05 F1 | 	add	fp, #12
14d58     A7 16 62 FC | 	wrlong	arg03, fp
14d5c                 | ' 
14d5c                 | ' numpar=compiledline(lineptr_e).result.uresult
14d5c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14d5c     0C 4E 85 F1 | 	sub	fp, #12
14d60     02 16 16 F2 | 	cmp	arg03, #2 wc
14d64     47 00 00 FF 
14d68     7C E4 85 F1 | 	sub	objptr, ##36476
14d6c     0C 4E 05 C1 |  if_b	add	fp, #12
14d70     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14d74     0C 4E 85 C1 |  if_b	sub	fp, #12
14d78     40 00 90 4D |  if_c_and_nz	jmp	#LR__1690
14d7c     00 12 06 F6 | 	mov	arg01, #0
14d80     D8 83 B1 FD | 	call	#__system___getiolock_0616
14d84     FD 12 02 F6 | 	mov	arg01, result1
14d88     2C 27 B1 FD | 	call	#__system___lockmem
14d8c     BD 01 00 FF 
14d90     2C 14 06 F6 | 	mov	arg02, ##@LR__5982
14d94     00 12 06 F6 | 	mov	arg01, #0
14d98     00 16 06 F6 | 	mov	arg03, #0
14d9c     10 34 B1 FD | 	call	#__system___basic_print_string
14da0     00 12 06 F6 | 	mov	arg01, #0
14da4     B4 83 B1 FD | 	call	#__system___getiolock_0616
14da8     FD 00 68 FC | 	wrlong	#0, result1
14dac     27 12 06 F6 | 	mov	arg01, #39
14db0     00 14 06 F6 | 	mov	arg02, #0
14db4     E8 EC B0 FD | 	call	#_printerror
14db8     C8 00 90 FD | 	jmp	#LR__1695
14dbc                 | LR__1690
14dbc     EC 89 BF FD | 	call	#_pop
14dc0     FF 16 02 F6 | 	mov	arg03, result3
14dc4     A7 FA 61 FC | 	wrlong	result1, fp
14dc8     04 4E 05 F1 | 	add	fp, #4
14dcc     A7 FC 61 FC | 	wrlong	result2, fp
14dd0     04 4E 05 F1 | 	add	fp, #4
14dd4     A7 16 62 FC | 	wrlong	arg03, fp
14dd8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14dd8     08 4E 85 F1 | 	sub	fp, #8
14ddc     2B 16 0E F2 | 	cmp	arg03, #43 wz
14de0     18 00 90 5D |  if_ne	jmp	#LR__1691
14de4     A7 12 02 FB | 	rdlong	arg01, fp
14de8     38 8B BF FD | 	call	#_convertstring
14dec     A7 FA 61 FC | 	wrlong	result1, fp
14df0     08 4E 05 F1 | 	add	fp, #8
14df4     A7 3E 68 FC | 	wrlong	#31, fp
14df8     08 4E 85 F1 | 	sub	fp, #8
14dfc                 | LR__1691
14dfc                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14dfc     08 4E 05 F1 | 	add	fp, #8
14e00     A7 16 02 FB | 	rdlong	arg03, fp
14e04     08 4E 85 F1 | 	sub	fp, #8
14e08     1F 16 0E F2 | 	cmp	arg03, #31 wz
14e0c     40 00 90 AD |  if_e	jmp	#LR__1692
14e10     00 12 06 F6 | 	mov	arg01, #0
14e14     44 83 B1 FD | 	call	#__system___getiolock_0616
14e18     FD 12 02 F6 | 	mov	arg01, result1
14e1c     98 26 B1 FD | 	call	#__system___lockmem
14e20     BD 01 00 FF 
14e24     32 14 06 F6 | 	mov	arg02, ##@LR__5983
14e28     00 12 06 F6 | 	mov	arg01, #0
14e2c     00 16 06 F6 | 	mov	arg03, #0
14e30     7C 33 B1 FD | 	call	#__system___basic_print_string
14e34     00 12 06 F6 | 	mov	arg01, #0
14e38     20 83 B1 FD | 	call	#__system___getiolock_0616
14e3c     FD 00 68 FC | 	wrlong	#0, result1
14e40     0F 12 06 F6 | 	mov	arg01, #15
14e44     00 14 06 F6 | 	mov	arg02, #0
14e48     54 EC B0 FD | 	call	#_printerror
14e4c     34 00 90 FD | 	jmp	#LR__1695
14e50                 | LR__1692
14e50     A7 12 02 FB | 	rdlong	arg01, fp
14e54     09 29 02 F6 | 	mov	local02, arg01
14e58     97 06 48 FB | 	callpa	#(@LR__1694-@LR__1693)>>2,fcache_load_ptr_
14e5c                 | LR__1693
14e5c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14e60     01 28 06 51 |  if_ne	add	local02, #1
14e64     F4 FF 9F 5D |  if_ne	jmp	#LR__1693
14e68                 | LR__1694
14e68     09 29 82 F1 | 	sub	local02, arg01
14e6c     A7 28 62 FC | 	wrlong	local02, fp
14e70     08 4E 05 F1 | 	add	fp, #8
14e74     A7 38 68 FC | 	wrlong	#28, fp
14e78     08 4E 85 F1 | 	sub	fp, #8
14e7c     A7 12 02 F6 | 	mov	arg01, fp
14e80     C0 89 BF FD | 	call	#_push
14e84                 | LR__1695
14e84     A7 F0 03 F6 | 	mov	ptra, fp
14e88     B2 00 A0 FD | 	call	#popregs_
14e8c                 | _do_len_ret
14e8c     2D 00 64 FD | 	ret
14e90                 | 
14e90                 | ' 
14e90                 | ' ' ----------------  list
14e90                 | ' 
14e90                 | ' sub do_list
14e90                 | _do_list
14e90     02 4A 05 F6 | 	mov	COUNT_, #2
14e94     A8 00 A0 FD | 	call	#pushregs_
14e98     B8 F0 07 F1 | 	add	ptra, #184
14e9c     04 4E 05 F1 | 	add	fp, #4
14ea0     A7 00 68 FC | 	wrlong	#0, fp
14ea4     04 4E 05 F1 | 	add	fp, #4
14ea8     FF FF BF FF 
14eac     A7 FE 6B FC | 	wrlong	##2147483647, fp
14eb0     08 4E 85 F1 | 	sub	fp, #8
14eb4     4A 00 00 FF 
14eb8     80 E4 05 F1 | 	add	objptr, ##38016
14ebc     F2 26 02 FB | 	rdlong	local01, objptr
14ec0     13 17 02 F6 | 	mov	arg03, local01
14ec4     01 16 66 F0 | 	shl	arg03, #1
14ec8     13 17 02 F1 | 	add	arg03, local01
14ecc     02 16 66 F0 | 	shl	arg03, #2
14ed0     03 00 00 FF 
14ed4     04 E4 85 F1 | 	sub	objptr, ##1540
14ed8     F2 16 02 F1 | 	add	arg03, objptr
14edc     0B 17 02 FB | 	rdlong	arg03, arg03
14ee0     A7 16 62 FC | 	wrlong	arg03, fp
14ee4                 | ' 
14ee4                 | ' startline=0 : endline=$7FFFFFFF
14ee4                 | ' numpar=compiledline(lineptr_e).result.uresult
14ee4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14ee4     01 16 0E F2 | 	cmp	arg03, #1 wz
14ee8     47 00 00 FF 
14eec     7C E4 85 F1 | 	sub	objptr, ##36476
14ef0     3C 00 90 5D |  if_ne	jmp	#LR__1700
14ef4     B4 88 BF FD | 	call	#_pop
14ef8     FF 26 02 F6 | 	mov	local01, result3
14efc     0C 4E 05 F1 | 	add	fp, #12
14f00     A7 FA 61 FC | 	wrlong	result1, fp
14f04     04 4E 05 F1 | 	add	fp, #4
14f08     A7 FC 61 FC | 	wrlong	result2, fp
14f0c     04 4E 05 F1 | 	add	fp, #4
14f10     A7 26 62 FC | 	wrlong	local01, fp
14f14     08 4E 85 F1 | 	sub	fp, #8
14f18     A7 12 02 F6 | 	mov	arg01, fp
14f1c     0C 4E 85 F1 | 	sub	fp, #12
14f20     6C 8A BF FD | 	call	#_converttoint
14f24     04 4E 05 F1 | 	add	fp, #4
14f28     A7 FA 61 FC | 	wrlong	result1, fp
14f2c     04 4E 85 F1 | 	sub	fp, #4
14f30                 | LR__1700
14f30                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14f30     A7 16 02 FB | 	rdlong	arg03, fp
14f34     02 16 0E F2 | 	cmp	arg03, #2 wz
14f38     7C 00 90 5D |  if_ne	jmp	#LR__1701
14f3c     6C 88 BF FD | 	call	#_pop
14f40     FF 26 02 F6 | 	mov	local01, result3
14f44     0C 4E 05 F1 | 	add	fp, #12
14f48     A7 FA 61 FC | 	wrlong	result1, fp
14f4c     04 4E 05 F1 | 	add	fp, #4
14f50     A7 FC 61 FC | 	wrlong	result2, fp
14f54     04 4E 05 F1 | 	add	fp, #4
14f58     A7 26 62 FC | 	wrlong	local01, fp
14f5c     08 4E 85 F1 | 	sub	fp, #8
14f60     A7 12 02 F6 | 	mov	arg01, fp
14f64     0C 4E 85 F1 | 	sub	fp, #12
14f68     24 8A BF FD | 	call	#_converttoint
14f6c     FD 26 02 F6 | 	mov	local01, result1
14f70     08 4E 05 F1 | 	add	fp, #8
14f74     A7 26 62 FC | 	wrlong	local01, fp
14f78     08 4E 85 F1 | 	sub	fp, #8
14f7c     2C 88 BF FD | 	call	#_pop
14f80     FF 26 02 F6 | 	mov	local01, result3
14f84     0C 4E 05 F1 | 	add	fp, #12
14f88     A7 FA 61 FC | 	wrlong	result1, fp
14f8c     04 4E 05 F1 | 	add	fp, #4
14f90     A7 FC 61 FC | 	wrlong	result2, fp
14f94     04 4E 05 F1 | 	add	fp, #4
14f98     A7 26 62 FC | 	wrlong	local01, fp
14f9c     08 4E 85 F1 | 	sub	fp, #8
14fa0     A7 12 02 F6 | 	mov	arg01, fp
14fa4     0C 4E 85 F1 | 	sub	fp, #12
14fa8     E4 89 BF FD | 	call	#_converttoint
14fac     04 4E 05 F1 | 	add	fp, #4
14fb0     A7 FA 61 FC | 	wrlong	result1, fp
14fb4     04 4E 85 F1 | 	sub	fp, #4
14fb8                 | LR__1701
14fb8                 | ' 
14fb8                 | ' 
14fb8                 | ' print
14fb8     00 12 06 F6 | 	mov	arg01, #0
14fbc     9C 81 B1 FD | 	call	#__system___getiolock_0616
14fc0     FD 12 02 F6 | 	mov	arg01, result1
14fc4     F0 24 B1 FD | 	call	#__system___lockmem
14fc8     00 12 06 F6 | 	mov	arg01, #0
14fcc     0A 14 06 F6 | 	mov	arg02, #10
14fd0     00 16 06 F6 | 	mov	arg03, #0
14fd4     80 31 B1 FD | 	call	#__system___basic_print_char
14fd8     00 12 06 F6 | 	mov	arg01, #0
14fdc     7C 81 B1 FD | 	call	#__system___getiolock_0616
14fe0     FD 00 68 FC | 	wrlong	#0, result1
14fe4     4A 00 00 FF 
14fe8     88 E4 05 F1 | 	add	objptr, ##38024
14fec     F2 28 02 FB | 	rdlong	local02, objptr
14ff0     08 00 00 FF 
14ff4     D0 E4 05 F1 | 	add	objptr, ##4304
14ff8     F2 28 62 FC | 	wrlong	local02, objptr
14ffc     52 00 00 FF 
15000     58 E5 85 F1 | 	sub	objptr, ##42328
15004                 | ' do 
15004                 | LR__1702
15004     20 4E 05 F1 | 	add	fp, #32
15008     A7 12 02 F6 | 	mov	arg01, fp
1500c     20 4E 85 F1 | 	sub	fp, #32
15010     52 00 00 FF 
15014     58 E5 05 F1 | 	add	objptr, ##42328
15018     F2 14 02 FB | 	rdlong	arg02, objptr
1501c     18 16 06 F6 | 	mov	arg03, #24
15020     47 00 00 FF 
15024     8C E4 85 F1 | 	sub	objptr, ##36492
15028     E8 17 B1 FD | 	call	#_psram_spin2_read1
1502c     0B 00 00 FF 
15030     CC E4 85 F1 | 	sub	objptr, ##5836
15034                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
15034                 | '   
15034                 | '   if header(0)<> $FFFFFFFF then
15034     20 4E 05 F1 | 	add	fp, #32
15038     A7 28 02 FB | 	rdlong	local02, fp
1503c     20 4E 85 F1 | 	sub	fp, #32
15040     FF FF 7F FF 
15044     FF 29 0E F2 | 	cmp	local02, ##-1 wz
15048     A8 00 90 AD |  if_e	jmp	#LR__1704
1504c     38 4E 05 F1 | 	add	fp, #56
15050     3F 16 06 F6 | 	mov	arg03, #63
15054     28 16 62 FD | 	setq	arg03
15058     A7 00 68 FC | 	wrlong	#0, fp
1505c     A7 12 02 F6 | 	mov	arg01, fp
15060     10 4E 85 F1 | 	sub	fp, #16
15064     A7 14 02 FB | 	rdlong	arg02, fp
15068     04 4E 05 F1 | 	add	fp, #4
1506c     A7 16 02 FB | 	rdlong	arg03, fp
15070     2C 4E 85 F1 | 	sub	fp, #44
15074     0B 00 00 FF 
15078     CC E4 05 F1 | 	add	objptr, ##5836
1507c     94 17 B1 FD | 	call	#_psram_spin2_read1
15080     0B 00 00 FF 
15084     CC E4 85 F1 | 	sub	objptr, ##5836
15088                 | '     longfill(linebuf,0,64)
15088                 | '     psram.read1(varptr(linebuf),header(2),header(3))
15088                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
15088     20 4E 05 F1 | 	add	fp, #32
1508c     A7 28 02 FB | 	rdlong	local02, fp
15090     1C 4E 85 F1 | 	sub	fp, #28
15094     A7 26 02 FB | 	rdlong	local01, fp
15098     04 4E 85 F1 | 	sub	fp, #4
1509c     13 29 52 F2 | 	cmps	local02, local01 wc
150a0     30 00 90 CD |  if_b	jmp	#LR__1703
150a4     20 4E 05 F1 | 	add	fp, #32
150a8     A7 28 02 FB | 	rdlong	local02, fp
150ac     18 4E 85 F1 | 	sub	fp, #24
150b0     A7 16 02 FB | 	rdlong	arg03, fp
150b4     08 4E 85 F1 | 	sub	fp, #8
150b8     0B 29 5A F2 | 	cmps	local02, arg03 wcz
150bc     14 00 90 1D |  if_a	jmp	#LR__1703
150c0     38 4E 05 F1 | 	add	fp, #56
150c4     A7 12 02 F6 | 	mov	arg01, fp
150c8     38 4E 85 F1 | 	sub	fp, #56
150cc                 | ' 
150cc                 | ' write(text)
150cc     4C 0B B1 FD | 	call	#_hg010b_spin2_write
150d0                 | ' crlf
150d0     E8 0F B1 FD | 	call	#_hg010b_spin2_crlf
150d4                 | LR__1703
150d4     34 4E 05 F1 | 	add	fp, #52
150d8     A7 28 02 FB | 	rdlong	local02, fp
150dc     34 4E 85 F1 | 	sub	fp, #52
150e0     52 00 00 FF 
150e4     58 E5 05 F1 | 	add	objptr, ##42328
150e8     F2 28 62 FC | 	wrlong	local02, objptr
150ec     52 00 00 FF 
150f0     58 E5 85 F1 | 	sub	objptr, ##42328
150f4                 | LR__1704
150f4     34 4E 05 F1 | 	add	fp, #52
150f8     A7 28 02 FB | 	rdlong	local02, fp
150fc     34 4E 85 F1 | 	sub	fp, #52
15100     FF FF 3F FF 
15104     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
15108     20 4E 05 51 |  if_ne	add	fp, #32
1510c     A7 26 02 5B |  if_ne	rdlong	local01, fp
15110     20 4E 85 51 |  if_ne	sub	fp, #32
15114     FF FF 7F 5F 
15118     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
1511c     E4 FE 9F 5D |  if_ne	jmp	#LR__1702
15120     A7 F0 03 F6 | 	mov	ptra, fp
15124     B2 00 A0 FD | 	call	#popregs_
15128                 | _do_list_ret
15128     2D 00 64 FD | 	ret
1512c                 | 
1512c                 | ' 
1512c                 | ' '-------------------- load
1512c                 | ' 
1512c                 | ' sub do_load(amode=0 as integer)  
1512c                 | _do_load
1512c     01 4A 05 F6 | 	mov	COUNT_, #1
15130     A8 00 A0 FD | 	call	#pushregs_
15134     AC F0 07 F1 | 	add	ptra, #172
15138     A7 12 62 FC | 	wrlong	arg01, fp
1513c     52 00 00 FF 
15140     0C E5 05 F1 | 	add	objptr, ##42252
15144     F2 02 68 FC | 	wrlong	#1, objptr
15148     08 00 00 FF 
1514c     8C E4 85 F1 | 	sub	objptr, ##4236
15150     F2 14 02 FB | 	rdlong	arg02, objptr
15154     0A 13 02 F6 | 	mov	arg01, arg02
15158     01 12 66 F0 | 	shl	arg01, #1
1515c     0A 13 02 F1 | 	add	arg01, arg02
15160     02 12 66 F0 | 	shl	arg01, #2
15164     03 00 00 FF 
15168     04 E4 85 F1 | 	sub	objptr, ##1540
1516c     F2 12 02 F1 | 	add	arg01, objptr
15170     09 15 02 FB | 	rdlong	arg02, arg01
15174     1C 4E 05 F1 | 	add	fp, #28
15178     A7 14 62 FC | 	wrlong	arg02, fp
1517c     8C 4E 05 F1 | 	add	fp, #140
15180     A7 12 02 F6 | 	mov	arg01, fp
15184     47 00 00 FF 
15188     7C E4 85 F1 | 	sub	objptr, ##36476
1518c     80 4E 85 F1 | 	sub	fp, #128
15190     09 4F 61 FC | 	wrlong	fp, arg01
15194                 | ' 
15194                 | ' inload=1
15194                 | ' numpar=compiledline(lineptr_e).result.uresult
15194                 | ' lpoke varptr(line2$),varptr(line2)
15194                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
15194     0C 4E 85 F1 | 	sub	fp, #12
15198     A7 26 02 FB | 	rdlong	local01, fp
1519c     1C 4E 85 F1 | 	sub	fp, #28
151a0     01 26 56 F2 | 	cmps	local01, #1 wc
151a4     24 00 90 CD |  if_b	jmp	#LR__1710
151a8     00 86 BF FD | 	call	#_pop
151ac     04 4E 05 F1 | 	add	fp, #4
151b0     A7 FA 61 FC | 	wrlong	result1, fp
151b4     04 4E 05 F1 | 	add	fp, #4
151b8     A7 FC 61 FC | 	wrlong	result2, fp
151bc     04 4E 05 F1 | 	add	fp, #4
151c0     A7 FE 61 FC | 	wrlong	result3, fp
151c4     0C 4E 85 F1 | 	sub	fp, #12
151c8     28 00 90 FD | 	jmp	#LR__1711
151cc                 | LR__1710
151cc     52 00 00 FF 
151d0     FC E4 05 F1 | 	add	objptr, ##42236
151d4     F2 26 02 FB | 	rdlong	local01, objptr
151d8     52 00 00 FF 
151dc     FC E4 85 F1 | 	sub	objptr, ##42236
151e0     04 4E 05 F1 | 	add	fp, #4
151e4     A7 26 62 FC | 	wrlong	local01, fp
151e8     08 4E 05 F1 | 	add	fp, #8
151ec     A7 3E 68 FC | 	wrlong	#31, fp
151f0     0C 4E 85 F1 | 	sub	fp, #12
151f4                 | LR__1711
151f4                 | ' 'print "popped "; t1.result.uresult, t1.result_type
151f4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
151f4     0C 4E 05 F1 | 	add	fp, #12
151f8     A7 26 02 FB | 	rdlong	local01, fp
151fc     0C 4E 85 F1 | 	sub	fp, #12
15200     2B 26 0E F2 | 	cmp	local01, #43 wz
15204     24 00 90 5D |  if_ne	jmp	#LR__1712
15208     04 4E 05 F1 | 	add	fp, #4
1520c     A7 12 02 FB | 	rdlong	arg01, fp
15210     04 4E 85 F1 | 	sub	fp, #4
15214     0C 87 BF FD | 	call	#_convertstring
15218     04 4E 05 F1 | 	add	fp, #4
1521c     A7 FA 61 FC | 	wrlong	result1, fp
15220     08 4E 05 F1 | 	add	fp, #8
15224     A7 3E 68 FC | 	wrlong	#31, fp
15228     0C 4E 85 F1 | 	sub	fp, #12
1522c                 | LR__1712
1522c                 | ' if t1.result_type=result_string then
1522c     0C 4E 05 F1 | 	add	fp, #12
15230     A7 26 02 FB | 	rdlong	local01, fp
15234     0C 4E 85 F1 | 	sub	fp, #12
15238     1F 26 0E F2 | 	cmp	local01, #31 wz
1523c     E8 02 90 5D |  if_ne	jmp	#LR__1718
15240                 | '   if amode<>1234 then do_new
15240     A7 26 02 FB | 	rdlong	local01, fp
15244     02 00 00 FF 
15248     D2 26 0E F2 | 	cmp	local01, ##1234 wz
1524c     34 0F B0 5D |  if_ne	call	#_do_new
15250                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
15250     04 4E 05 F1 | 	add	fp, #4
15254     A7 12 02 FB | 	rdlong	arg01, fp
15258     04 4E 85 F1 | 	sub	fp, #4
1525c     BD 01 00 FF 
15260     38 14 06 F6 | 	mov	arg02, ##@LR__5984
15264     78 22 B1 FD | 	call	#__system___string_cmp
15268     00 FA 0D F2 | 	cmp	result1, #0 wz
1526c     24 00 90 5D |  if_ne	jmp	#LR__1713
15270     52 00 00 FF 
15274     FC E4 05 F1 | 	add	objptr, ##42236
15278     F2 26 02 FB | 	rdlong	local01, objptr
1527c     52 00 00 FF 
15280     FC E4 85 F1 | 	sub	objptr, ##42236
15284     04 4E 05 F1 | 	add	fp, #4
15288     A7 26 62 FC | 	wrlong	local01, fp
1528c     04 4E 85 F1 | 	sub	fp, #4
15290     20 00 90 FD | 	jmp	#LR__1714
15294                 | LR__1713
15294     04 4E 05 F1 | 	add	fp, #4
15298     A7 26 02 FB | 	rdlong	local01, fp
1529c     04 4E 85 F1 | 	sub	fp, #4
152a0     52 00 00 FF 
152a4     FC E4 05 F1 | 	add	objptr, ##42236
152a8     F2 26 62 FC | 	wrlong	local01, objptr
152ac     52 00 00 FF 
152b0     FC E4 85 F1 | 	sub	objptr, ##42236
152b4                 | LR__1714
152b4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
152b4     09 12 06 F6 | 	mov	arg01, #9
152b8     58 75 B1 FD | 	call	#__system__close
152bc     09 26 06 F6 | 	mov	local01, #9
152c0     4A 00 00 FF 
152c4     94 E4 05 F1 | 	add	objptr, ##38036
152c8     F2 12 02 FB | 	rdlong	arg01, objptr
152cc     4A 00 00 FF 
152d0     94 E4 85 F1 | 	sub	objptr, ##38036
152d4     BD 01 00 FF 
152d8     39 14 06 F6 | 	mov	arg02, ##@LR__5985
152dc     34 22 B1 FD | 	call	#__system___string_concat
152e0     FD 12 02 F6 | 	mov	arg01, result1
152e4     04 4E 05 F1 | 	add	fp, #4
152e8     A7 14 02 FB | 	rdlong	arg02, fp
152ec     04 4E 85 F1 | 	sub	fp, #4
152f0     20 22 B1 FD | 	call	#__system___string_concat
152f4     FD 14 02 F6 | 	mov	arg02, result1
152f8     13 13 02 F6 | 	mov	arg01, local01
152fc     00 16 06 F6 | 	mov	arg03, #0
15300     B8 2D B1 FD | 	call	#__system___basic_open_string
15304     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15308     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1530c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15310     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15314     14 4E 05 F1 | 	add	fp, #20
15318     A7 FA 61 FC | 	wrlong	result1, fp
1531c                 | '   r=geterr() 
1531c                 | '   if r then 
1531c     14 4E 85 F1 | 	sub	fp, #20
15320     54 01 90 AD |  if_e	jmp	#LR__1716
15324                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
15324     09 12 06 F6 | 	mov	arg01, #9
15328     E8 74 B1 FD | 	call	#__system__close
1532c     09 26 06 F6 | 	mov	local01, #9
15330     4A 00 00 FF 
15334     94 E4 05 F1 | 	add	objptr, ##38036
15338     F2 12 02 FB | 	rdlong	arg01, objptr
1533c     4A 00 00 FF 
15340     94 E4 85 F1 | 	sub	objptr, ##38036
15344     BD 01 00 FF 
15348     3B 14 06 F6 | 	mov	arg02, ##@LR__5986
1534c     C4 21 B1 FD | 	call	#__system___string_concat
15350     FD 12 02 F6 | 	mov	arg01, result1
15354     04 4E 05 F1 | 	add	fp, #4
15358     A7 14 02 FB | 	rdlong	arg02, fp
1535c     04 4E 85 F1 | 	sub	fp, #4
15360     B0 21 B1 FD | 	call	#__system___string_concat
15364     FD 12 02 F6 | 	mov	arg01, result1
15368     BD 01 00 FF 
1536c     3D 14 06 F6 | 	mov	arg02, ##@LR__5987
15370     A0 21 B1 FD | 	call	#__system___string_concat
15374     FD 14 02 F6 | 	mov	arg02, result1
15378     13 13 02 F6 | 	mov	arg01, local01
1537c     00 16 06 F6 | 	mov	arg03, #0
15380     38 2D B1 FD | 	call	#__system___basic_open_string
15384     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15388     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1538c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15390     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15394     14 4E 05 F1 | 	add	fp, #20
15398     A7 FA 61 FC | 	wrlong	result1, fp
1539c                 | '     r=geterr() 
1539c                 | '     if r then 
1539c     14 4E 85 F1 | 	sub	fp, #20
153a0     A0 00 90 AD |  if_e	jmp	#LR__1715
153a4                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
153a4     00 12 06 F6 | 	mov	arg01, #0
153a8     B0 7D B1 FD | 	call	#__system___getiolock_0616
153ac     FD 12 02 F6 | 	mov	arg01, result1
153b0     04 21 B1 FD | 	call	#__system___lockmem
153b4     BD 01 00 FF 
153b8     42 14 06 F6 | 	mov	arg02, ##@LR__5988
153bc     00 12 06 F6 | 	mov	arg01, #0
153c0     00 16 06 F6 | 	mov	arg03, #0
153c4     E8 2D B1 FD | 	call	#__system___basic_print_string
153c8     14 4E 05 F1 | 	add	fp, #20
153cc     A7 14 02 FB | 	rdlong	arg02, fp
153d0     14 4E 85 F1 | 	sub	fp, #20
153d4     00 12 06 F6 | 	mov	arg01, #0
153d8     00 16 06 F6 | 	mov	arg03, #0
153dc     0A 18 06 F6 | 	mov	arg04, #10
153e0     10 2E B1 FD | 	call	#__system___basic_print_integer
153e4     BD 01 00 FF 
153e8     50 14 06 F6 | 	mov	arg02, ##@LR__5989
153ec     00 12 06 F6 | 	mov	arg01, #0
153f0     00 16 06 F6 | 	mov	arg03, #0
153f4     B8 2D B1 FD | 	call	#__system___basic_print_string
153f8     00 26 06 F6 | 	mov	local01, #0
153fc     14 4E 05 F1 | 	add	fp, #20
15400     A7 12 02 FB | 	rdlong	arg01, fp
15404     14 4E 85 F1 | 	sub	fp, #20
15408     3C 4A B1 FD | 	call	#__system___strerror
1540c     FD 14 02 F6 | 	mov	arg02, result1
15410     13 13 02 F6 | 	mov	arg01, local01
15414     00 16 06 F6 | 	mov	arg03, #0
15418     94 2D B1 FD | 	call	#__system___basic_print_string
1541c     00 12 06 F6 | 	mov	arg01, #0
15420     0A 14 06 F6 | 	mov	arg02, #10
15424     00 16 06 F6 | 	mov	arg03, #0
15428     2C 2D B1 FD | 	call	#__system___basic_print_char
1542c     00 12 06 F6 | 	mov	arg01, #0
15430     28 7D B1 FD | 	call	#__system___getiolock_0616
15434     FD 00 68 FC | 	wrlong	#0, result1
15438     09 12 06 F6 | 	mov	arg01, #9
1543c     D4 73 B1 FD | 	call	#__system__close
15440     94 01 90 FD | 	jmp	#LR__1720
15444                 | LR__1715
15444     52 00 00 FF 
15448     FC E4 05 F1 | 	add	objptr, ##42236
1544c     F2 12 02 FB | 	rdlong	arg01, objptr
15450     52 00 00 FF 
15454     FC E4 85 F1 | 	sub	objptr, ##42236
15458     BD 01 00 FF 
1545c     53 14 06 F6 | 	mov	arg02, ##@LR__5990
15460     B0 20 B1 FD | 	call	#__system___string_concat
15464     52 00 00 FF 
15468     FC E4 05 F1 | 	add	objptr, ##42236
1546c     F2 FA 61 FC | 	wrlong	result1, objptr
15470     52 00 00 FF 
15474     FC E4 85 F1 | 	sub	objptr, ##42236
15478                 | LR__1716
15478                 | '   close #9: open currentdir$+"/"+loadname for input as #9
15478     09 12 06 F6 | 	mov	arg01, #9
1547c     94 73 B1 FD | 	call	#__system__close
15480     09 26 06 F6 | 	mov	local01, #9
15484     4A 00 00 FF 
15488     94 E4 05 F1 | 	add	objptr, ##38036
1548c     F2 12 02 FB | 	rdlong	arg01, objptr
15490     4A 00 00 FF 
15494     94 E4 85 F1 | 	sub	objptr, ##38036
15498     BD 01 00 FF 
1549c     58 14 06 F6 | 	mov	arg02, ##@LR__5991
154a0     70 20 B1 FD | 	call	#__system___string_concat
154a4     FD 12 02 F6 | 	mov	arg01, result1
154a8     52 00 00 FF 
154ac     FC E4 05 F1 | 	add	objptr, ##42236
154b0     F2 14 02 FB | 	rdlong	arg02, objptr
154b4     52 00 00 FF 
154b8     FC E4 85 F1 | 	sub	objptr, ##42236
154bc     54 20 B1 FD | 	call	#__system___string_concat
154c0     FD 14 02 F6 | 	mov	arg02, result1
154c4     13 13 02 F6 | 	mov	arg01, local01
154c8     00 16 06 F6 | 	mov	arg03, #0
154cc     EC 2B B1 FD | 	call	#__system___basic_open_string
154d0                 | '   do
154d0                 | LR__1717
154d0     09 12 06 F6 | 	mov	arg01, #9
154d4     EC 21 B1 FD | 	call	#__system___basic_read_line
154d8     FD 26 02 F6 | 	mov	local01, result1
154dc     37 00 00 FF 
154e0     1C E4 05 F1 | 	add	objptr, ##28188
154e4     F2 26 62 FC | 	wrlong	local01, objptr
154e8     37 00 00 FF 
154ec     1C E4 85 F1 | 	sub	objptr, ##28188
154f0     98 C3 BE FD | 	call	#_interpret
154f4     37 00 00 FF 
154f8     1C E4 05 F1 | 	add	objptr, ##28188
154fc     F2 12 02 FB | 	rdlong	arg01, objptr
15500     37 00 00 FF 
15504     1C E4 85 F1 | 	sub	objptr, ##28188
15508     BD 01 00 FF 
1550c     5A 14 06 F6 | 	mov	arg02, ##@LR__5992
15510     CC 1F B1 FD | 	call	#__system___string_cmp
15514     00 FA 0D F2 | 	cmp	result1, #0 wz
15518     B4 FF 9F 5D |  if_ne	jmp	#LR__1717
1551c                 | '   close #9   
1551c     09 12 06 F6 | 	mov	arg01, #9
15520     F0 72 B1 FD | 	call	#__system__close
15524     0C 00 90 FD | 	jmp	#LR__1719
15528                 | LR__1718
15528     1E 12 06 F6 | 	mov	arg01, #30
1552c     00 14 06 F6 | 	mov	arg02, #0
15530     6C E5 B0 FD | 	call	#_printerror
15534                 | LR__1719
15534                 | ' print "Loaded ";currentdir$+"/"+loadname
15534     00 12 06 F6 | 	mov	arg01, #0
15538     20 7C B1 FD | 	call	#__system___getiolock_0616
1553c     FD 12 02 F6 | 	mov	arg01, result1
15540     74 1F B1 FD | 	call	#__system___lockmem
15544     BD 01 00 FF 
15548     5B 14 06 F6 | 	mov	arg02, ##@LR__5993
1554c     00 12 06 F6 | 	mov	arg01, #0
15550     00 16 06 F6 | 	mov	arg03, #0
15554     58 2C B1 FD | 	call	#__system___basic_print_string
15558     00 26 06 F6 | 	mov	local01, #0
1555c     4A 00 00 FF 
15560     94 E4 05 F1 | 	add	objptr, ##38036
15564     F2 12 02 FB | 	rdlong	arg01, objptr
15568     4A 00 00 FF 
1556c     94 E4 85 F1 | 	sub	objptr, ##38036
15570     BD 01 00 FF 
15574     63 14 06 F6 | 	mov	arg02, ##@LR__5994
15578     98 1F B1 FD | 	call	#__system___string_concat
1557c     FD 12 02 F6 | 	mov	arg01, result1
15580     52 00 00 FF 
15584     FC E4 05 F1 | 	add	objptr, ##42236
15588     F2 14 02 FB | 	rdlong	arg02, objptr
1558c     52 00 00 FF 
15590     FC E4 85 F1 | 	sub	objptr, ##42236
15594     7C 1F B1 FD | 	call	#__system___string_concat
15598     FD 14 02 F6 | 	mov	arg02, result1
1559c     13 13 02 F6 | 	mov	arg01, local01
155a0     00 16 06 F6 | 	mov	arg03, #0
155a4     08 2C B1 FD | 	call	#__system___basic_print_string
155a8     00 12 06 F6 | 	mov	arg01, #0
155ac     0A 14 06 F6 | 	mov	arg02, #10
155b0     00 16 06 F6 | 	mov	arg03, #0
155b4     A0 2B B1 FD | 	call	#__system___basic_print_char
155b8     00 12 06 F6 | 	mov	arg01, #0
155bc     9C 7B B1 FD | 	call	#__system___getiolock_0616
155c0     FD 00 68 FC | 	wrlong	#0, result1
155c4     52 00 00 FF 
155c8     0C E5 05 F1 | 	add	objptr, ##42252
155cc     F2 00 68 FC | 	wrlong	#0, objptr
155d0     52 00 00 FF 
155d4     0C E5 85 F1 | 	sub	objptr, ##42252
155d8                 | LR__1720
155d8     A7 F0 03 F6 | 	mov	ptra, fp
155dc     B2 00 A0 FD | 	call	#popregs_
155e0                 | _do_load_ret
155e0     2D 00 64 FD | 	ret
155e4                 | 
155e4                 | ' 
155e4                 | ' '-------------------- log
155e4                 | ' 
155e4                 | ' sub do_log
155e4                 | _do_log
155e4     01 4A 05 F6 | 	mov	COUNT_, #1
155e8     A8 00 A0 FD | 	call	#pushregs_
155ec     14 F0 07 F1 | 	add	ptra, #20
155f0     4A 00 00 FF 
155f4     80 E4 05 F1 | 	add	objptr, ##38016
155f8     F2 26 02 FB | 	rdlong	local01, objptr
155fc     13 17 02 F6 | 	mov	arg03, local01
15600     01 16 66 F0 | 	shl	arg03, #1
15604     13 17 02 F1 | 	add	arg03, local01
15608     02 16 66 F0 | 	shl	arg03, #2
1560c     03 00 00 FF 
15610     04 E4 85 F1 | 	sub	objptr, ##1540
15614     F2 16 02 F1 | 	add	arg03, objptr
15618     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1561c     0C 4E 05 F1 | 	add	fp, #12
15620     A7 16 62 FC | 	wrlong	arg03, fp
15624                 | ' 
15624                 | ' numpar=compiledline(lineptr_e).result.uresult
15624                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15624     0C 4E 85 F1 | 	sub	fp, #12
15628     47 00 00 FF 
1562c     7C E4 85 F1 | 	sub	objptr, ##36476
15630     0C 4E 05 51 |  if_ne	add	fp, #12
15634     A7 26 02 5B |  if_ne	rdlong	local01, fp
15638     0C 4E 85 51 |  if_ne	sub	fp, #12
1563c     03 26 16 52 |  if_ne	cmp	local01, #3 wc
15640     40 00 90 4D |  if_c_and_nz	jmp	#LR__1730
15644     00 12 06 F6 | 	mov	arg01, #0
15648     10 7B B1 FD | 	call	#__system___getiolock_0616
1564c     FD 12 02 F6 | 	mov	arg01, result1
15650     64 1E B1 FD | 	call	#__system___lockmem
15654     BD 01 00 FF 
15658     65 14 06 F6 | 	mov	arg02, ##@LR__5995
1565c     00 12 06 F6 | 	mov	arg01, #0
15660     00 16 06 F6 | 	mov	arg03, #0
15664     48 2B B1 FD | 	call	#__system___basic_print_string
15668     00 12 06 F6 | 	mov	arg01, #0
1566c     EC 7A B1 FD | 	call	#__system___getiolock_0616
15670     FD 00 68 FC | 	wrlong	#0, result1
15674     27 12 06 F6 | 	mov	arg01, #39
15678     00 14 06 F6 | 	mov	arg02, #0
1567c     20 E4 B0 FD | 	call	#_printerror
15680     D0 00 90 FD | 	jmp	#LR__1733
15684                 | LR__1730
15684                 | ' if numpar=2 then 
15684     0C 4E 05 F1 | 	add	fp, #12
15688     A7 26 02 FB | 	rdlong	local01, fp
1568c     0C 4E 85 F1 | 	sub	fp, #12
15690     02 26 0E F2 | 	cmp	local01, #2 wz
15694     48 00 90 5D |  if_ne	jmp	#LR__1731
15698     10 81 BF FD | 	call	#_pop
1569c     FF 26 02 F6 | 	mov	local01, result3
156a0     A7 FA 61 FC | 	wrlong	result1, fp
156a4     04 4E 05 F1 | 	add	fp, #4
156a8     A7 FC 61 FC | 	wrlong	result2, fp
156ac     04 4E 05 F1 | 	add	fp, #4
156b0     A7 26 62 FC | 	wrlong	local01, fp
156b4     08 4E 85 F1 | 	sub	fp, #8
156b8     A7 12 02 F6 | 	mov	arg01, fp
156bc     8C 83 BF FD | 	call	#_converttofloat
156c0     FD 14 02 F6 | 	mov	arg02, result1
156c4     FC 16 20 FF 
156c8     54 12 06 F6 | 	mov	arg01, ##1076754516
156cc     34 5C B1 FD | 	call	#__system____builtin_logbase
156d0     10 4E 05 F1 | 	add	fp, #16
156d4     A7 FA 61 FC | 	wrlong	result1, fp
156d8     10 4E 85 F1 | 	sub	fp, #16
156dc     10 00 90 FD | 	jmp	#LR__1732
156e0                 | LR__1731
156e0     10 4E 05 F1 | 	add	fp, #16
156e4     00 C0 9F FF 
156e8     A7 00 68 FC | 	wrlong	##1065353216, fp
156ec     10 4E 85 F1 | 	sub	fp, #16
156f0                 | LR__1732
156f0     B8 80 BF FD | 	call	#_pop
156f4     FF 26 02 F6 | 	mov	local01, result3
156f8     A7 FA 61 FC | 	wrlong	result1, fp
156fc     04 4E 05 F1 | 	add	fp, #4
15700     A7 FC 61 FC | 	wrlong	result2, fp
15704     04 4E 05 F1 | 	add	fp, #4
15708     A7 26 62 FC | 	wrlong	local01, fp
1570c     08 4E 85 F1 | 	sub	fp, #8
15710     A7 12 02 F6 | 	mov	arg01, fp
15714     34 83 BF FD | 	call	#_converttofloat
15718     FD 14 02 F6 | 	mov	arg02, result1
1571c     FC 16 20 FF 
15720     54 12 06 F6 | 	mov	arg01, ##1076754516
15724     DC 5B B1 FD | 	call	#__system____builtin_logbase
15728     FD 12 02 F6 | 	mov	arg01, result1
1572c     10 4E 05 F1 | 	add	fp, #16
15730     A7 14 02 FB | 	rdlong	arg02, fp
15734     10 4E 85 F1 | 	sub	fp, #16
15738     FC 4D B1 FD | 	call	#__system___float_div
1573c     A7 FA 61 FC | 	wrlong	result1, fp
15740     08 4E 05 F1 | 	add	fp, #8
15744     A7 3C 68 FC | 	wrlong	#30, fp
15748     08 4E 85 F1 | 	sub	fp, #8
1574c     A7 12 02 F6 | 	mov	arg01, fp
15750     F0 80 BF FD | 	call	#_push
15754                 | LR__1733
15754     A7 F0 03 F6 | 	mov	ptra, fp
15758     B2 00 A0 FD | 	call	#popregs_
1575c                 | _do_log_ret
1575c     2D 00 64 FD | 	ret
15760                 | 
15760                 | ' 
15760                 | ' '-------------------- lpeek
15760                 | ' 
15760                 | ' sub do_lpeek
15760                 | _do_lpeek
15760     00 4A 05 F6 | 	mov	COUNT_, #0
15764     A8 00 A0 FD | 	call	#pushregs_
15768     14 F0 07 F1 | 	add	ptra, #20
1576c     3C 80 BF FD | 	call	#_pop
15770     A7 FA 61 FC | 	wrlong	result1, fp
15774     04 4E 05 F1 | 	add	fp, #4
15778     A7 FC 61 FC | 	wrlong	result2, fp
1577c     04 4E 05 F1 | 	add	fp, #4
15780     A7 FE 61 FC | 	wrlong	result3, fp
15784     08 4E 85 F1 | 	sub	fp, #8
15788     A7 12 02 F6 | 	mov	arg01, fp
1578c     00 82 BF FD | 	call	#_converttoint
15790     0C 4E 05 F1 | 	add	fp, #12
15794     A7 FA 61 FC | 	wrlong	result1, fp
15798                 | ' 
15798                 | ' t1=pop()
15798                 | ' a=converttoint(t1)
15798                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
15798     0C 4E 85 F1 | 	sub	fp, #12
1579c     00 04 00 FF 
157a0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
157a4     1C 00 90 3D |  if_ae	jmp	#LR__1740
157a8     0C 4E 05 F1 | 	add	fp, #12
157ac     A7 12 02 FB | 	rdlong	arg01, fp
157b0     09 FB 01 FB | 	rdlong	result1, arg01
157b4     04 4E 05 F1 | 	add	fp, #4
157b8     A7 FA 61 FC | 	wrlong	result1, fp
157bc     10 4E 85 F1 | 	sub	fp, #16
157c0     1C 00 90 FD | 	jmp	#LR__1741
157c4                 | LR__1740
157c4     0C 4E 05 F1 | 	add	fp, #12
157c8     A7 12 02 FB | 	rdlong	arg01, fp
157cc     0C 4E 85 F1 | 	sub	fp, #12
157d0     9C E5 B0 FD | 	call	#_pslpeek
157d4     10 4E 05 F1 | 	add	fp, #16
157d8     A7 FA 61 FC | 	wrlong	result1, fp
157dc     10 4E 85 F1 | 	sub	fp, #16
157e0                 | LR__1741
157e0     08 4E 05 F1 | 	add	fp, #8
157e4     A7 3A 68 FC | 	wrlong	#29, fp
157e8     08 4E 05 F1 | 	add	fp, #8
157ec     A7 12 02 FB | 	rdlong	arg01, fp
157f0     10 4E 85 F1 | 	sub	fp, #16
157f4     A7 12 62 FC | 	wrlong	arg01, fp
157f8     A7 12 02 F6 | 	mov	arg01, fp
157fc     44 80 BF FD | 	call	#_push
15800     A7 F0 03 F6 | 	mov	ptra, fp
15804     B2 00 A0 FD | 	call	#popregs_
15808                 | _do_lpeek_ret
15808     2D 00 64 FD | 	ret
1580c                 | 
1580c                 | ' 
1580c                 | ' '-------------------- lpoke
1580c                 | ' 
1580c                 | ' sub do_lpoke
1580c                 | _do_lpoke
1580c     01 4A 05 F6 | 	mov	COUNT_, #1
15810     A8 00 A0 FD | 	call	#pushregs_
15814     20 F0 07 F1 | 	add	ptra, #32
15818     90 7F BF FD | 	call	#_pop
1581c     FD 14 02 F6 | 	mov	arg02, result1
15820     FE 12 02 F6 | 	mov	arg01, result2
15824     FF 26 02 F6 | 	mov	local01, result3
15828     A7 14 62 FC | 	wrlong	arg02, fp
1582c     04 4E 05 F1 | 	add	fp, #4
15830     A7 12 62 FC | 	wrlong	arg01, fp
15834     04 4E 05 F1 | 	add	fp, #4
15838     A7 26 62 FC | 	wrlong	local01, fp
1583c     08 4E 85 F1 | 	sub	fp, #8
15840     68 7F BF FD | 	call	#_pop
15844     FF 26 02 F6 | 	mov	local01, result3
15848     0C 4E 05 F1 | 	add	fp, #12
1584c     A7 FA 61 FC | 	wrlong	result1, fp
15850     04 4E 05 F1 | 	add	fp, #4
15854     A7 FC 61 FC | 	wrlong	result2, fp
15858     04 4E 05 F1 | 	add	fp, #4
1585c     A7 26 62 FC | 	wrlong	local01, fp
15860     08 4E 85 F1 | 	sub	fp, #8
15864     A7 12 02 F6 | 	mov	arg01, fp
15868     0C 4E 85 F1 | 	sub	fp, #12
1586c     20 81 BF FD | 	call	#_converttoint
15870     18 4E 05 F1 | 	add	fp, #24
15874     A7 FA 61 FC | 	wrlong	result1, fp
15878     18 4E 85 F1 | 	sub	fp, #24
1587c     A7 12 02 F6 | 	mov	arg01, fp
15880     0C 81 BF FD | 	call	#_converttoint
15884     1C 4E 05 F1 | 	add	fp, #28
15888     A7 FA 61 FC | 	wrlong	result1, fp
1588c                 | ' 
1588c                 | ' t1=pop() 'value
1588c                 | ' t2=pop() 
1588c                 | ' a=converttoint(t2) : v=converttoint(t1)
1588c                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1588c     04 4E 85 F1 | 	sub	fp, #4
15890     A7 26 02 FB | 	rdlong	local01, fp
15894     18 4E 85 F1 | 	sub	fp, #24
15898     00 04 00 FF 
1589c     00 26 16 F2 | 	cmp	local01, ##524288 wc
158a0     1C 00 90 3D |  if_ae	jmp	#LR__1750
158a4     18 4E 05 F1 | 	add	fp, #24
158a8     A7 12 02 FB | 	rdlong	arg01, fp
158ac     04 4E 05 F1 | 	add	fp, #4
158b0     A7 14 02 FB | 	rdlong	arg02, fp
158b4     1C 4E 85 F1 | 	sub	fp, #28
158b8     09 15 62 FC | 	wrlong	arg02, arg01
158bc     18 00 90 FD | 	jmp	#LR__1751
158c0                 | LR__1750
158c0     18 4E 05 F1 | 	add	fp, #24
158c4     A7 12 02 FB | 	rdlong	arg01, fp
158c8     04 4E 05 F1 | 	add	fp, #4
158cc     A7 14 02 FB | 	rdlong	arg02, fp
158d0     1C 4E 85 F1 | 	sub	fp, #28
158d4     68 E3 B0 FD | 	call	#_pslpoke
158d8                 | LR__1751
158d8     A7 F0 03 F6 | 	mov	ptra, fp
158dc     B2 00 A0 FD | 	call	#popregs_
158e0                 | _do_lpoke_ret
158e0     2D 00 64 FD | 	ret
158e4                 | 
158e4                 | ' 
158e4                 | ' '-------------------- memlo
158e4                 | ' 
158e4                 | ' sub do_memlo
158e4                 | _do_memlo
158e4     00 4A 05 F6 | 	mov	COUNT_, #0
158e8     A8 00 A0 FD | 	call	#pushregs_
158ec     0C F0 07 F1 | 	add	ptra, #12
158f0     43 00 00 FF 
158f4     5C E4 05 F1 | 	add	objptr, ##34396
158f8     F2 12 02 FB | 	rdlong	arg01, objptr
158fc     43 00 00 FF 
15900     5C E4 85 F1 | 	sub	objptr, ##34396
15904     A7 12 62 FC | 	wrlong	arg01, fp
15908     08 4E 05 F1 | 	add	fp, #8
1590c     A7 3A 68 FC | 	wrlong	#29, fp
15910     08 4E 85 F1 | 	sub	fp, #8
15914     A7 12 02 F6 | 	mov	arg01, fp
15918     28 7F BF FD | 	call	#_push
1591c     A7 F0 03 F6 | 	mov	ptra, fp
15920     B2 00 A0 FD | 	call	#popregs_
15924                 | _do_memlo_ret
15924     2D 00 64 FD | 	ret
15928                 | 
15928                 | ' 
15928                 | ' '-------------------- memtop
15928                 | ' 
15928                 | ' sub do_memtop
15928                 | _do_memtop
15928     00 4A 05 F6 | 	mov	COUNT_, #0
1592c     A8 00 A0 FD | 	call	#pushregs_
15930     0C F0 07 F1 | 	add	ptra, #12
15934     52 00 00 FF 
15938     D0 E4 05 F1 | 	add	objptr, ##42192
1593c     F2 12 02 FB | 	rdlong	arg01, objptr
15940     52 00 00 FF 
15944     D0 E4 85 F1 | 	sub	objptr, ##42192
15948     A7 12 62 FC | 	wrlong	arg01, fp
1594c     08 4E 05 F1 | 	add	fp, #8
15950     A7 3A 68 FC | 	wrlong	#29, fp
15954     08 4E 85 F1 | 	sub	fp, #8
15958     A7 12 02 F6 | 	mov	arg01, fp
1595c     E4 7E BF FD | 	call	#_push
15960     A7 F0 03 F6 | 	mov	ptra, fp
15964     B2 00 A0 FD | 	call	#popregs_
15968                 | _do_memtop_ret
15968     2D 00 64 FD | 	ret
1596c                 | 
1596c                 | ' 
1596c                 | ' '-------------------- mid$
1596c                 | ' 
1596c                 | ' sub do_mid
1596c                 | _do_mid
1596c     00 4A 05 F6 | 	mov	COUNT_, #0
15970     A8 00 A0 FD | 	call	#pushregs_
15974     18 F0 07 F1 | 	add	ptra, #24
15978     4A 00 00 FF 
1597c     80 E4 05 F1 | 	add	objptr, ##38016
15980     F2 16 02 FB | 	rdlong	arg03, objptr
15984     0B 15 02 F6 | 	mov	arg02, arg03
15988     01 14 66 F0 | 	shl	arg02, #1
1598c     0B 15 02 F1 | 	add	arg02, arg03
15990     02 14 66 F0 | 	shl	arg02, #2
15994     03 00 00 FF 
15998     04 E4 85 F1 | 	sub	objptr, ##1540
1599c     F2 14 02 F1 | 	add	arg02, objptr
159a0     0A 17 02 FB | 	rdlong	arg03, arg02
159a4     0C 4E 05 F1 | 	add	fp, #12
159a8     A7 16 62 FC | 	wrlong	arg03, fp
159ac                 | ' 
159ac                 | ' numpar=compiledline(lineptr_e).result.uresult
159ac                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
159ac     0C 4E 85 F1 | 	sub	fp, #12
159b0     03 16 0E F2 | 	cmp	arg03, #3 wz
159b4     47 00 00 FF 
159b8     7C E4 85 F1 | 	sub	objptr, ##36476
159bc     40 00 90 AD |  if_e	jmp	#LR__1760
159c0     00 12 06 F6 | 	mov	arg01, #0
159c4     94 77 B1 FD | 	call	#__system___getiolock_0616
159c8     FD 12 02 F6 | 	mov	arg01, result1
159cc     E8 1A B1 FD | 	call	#__system___lockmem
159d0     BD 01 00 FF 
159d4     6B 14 06 F6 | 	mov	arg02, ##@LR__5996
159d8     00 12 06 F6 | 	mov	arg01, #0
159dc     00 16 06 F6 | 	mov	arg03, #0
159e0     CC 27 B1 FD | 	call	#__system___basic_print_string
159e4     00 12 06 F6 | 	mov	arg01, #0
159e8     70 77 B1 FD | 	call	#__system___getiolock_0616
159ec     FD 00 68 FC | 	wrlong	#0, result1
159f0     27 12 06 F6 | 	mov	arg01, #39
159f4     00 14 06 F6 | 	mov	arg02, #0
159f8     A4 E0 B0 FD | 	call	#_printerror
159fc     2C 01 90 FD | 	jmp	#LR__1763
15a00                 | LR__1760
15a00     A8 7D BF FD | 	call	#_pop
15a04     FF 16 02 F6 | 	mov	arg03, result3
15a08     A7 FA 61 FC | 	wrlong	result1, fp
15a0c     04 4E 05 F1 | 	add	fp, #4
15a10     A7 FC 61 FC | 	wrlong	result2, fp
15a14     04 4E 05 F1 | 	add	fp, #4
15a18     A7 16 62 FC | 	wrlong	arg03, fp
15a1c     08 4E 85 F1 | 	sub	fp, #8
15a20     A7 12 02 F6 | 	mov	arg01, fp
15a24     68 7F BF FD | 	call	#_converttoint
15a28     FD 16 02 F6 | 	mov	arg03, result1
15a2c     14 4E 05 F1 | 	add	fp, #20
15a30     A7 16 62 FC | 	wrlong	arg03, fp
15a34     14 4E 85 F1 | 	sub	fp, #20
15a38     70 7D BF FD | 	call	#_pop
15a3c     FF 16 02 F6 | 	mov	arg03, result3
15a40     A7 FA 61 FC | 	wrlong	result1, fp
15a44     04 4E 05 F1 | 	add	fp, #4
15a48     A7 FC 61 FC | 	wrlong	result2, fp
15a4c     04 4E 05 F1 | 	add	fp, #4
15a50     A7 16 62 FC | 	wrlong	arg03, fp
15a54     08 4E 85 F1 | 	sub	fp, #8
15a58     A7 12 02 F6 | 	mov	arg01, fp
15a5c     30 7F BF FD | 	call	#_converttoint
15a60     FD 16 02 F6 | 	mov	arg03, result1
15a64     10 4E 05 F1 | 	add	fp, #16
15a68     A7 16 62 FC | 	wrlong	arg03, fp
15a6c     10 4E 85 F1 | 	sub	fp, #16
15a70     38 7D BF FD | 	call	#_pop
15a74     FF 16 02 F6 | 	mov	arg03, result3
15a78     A7 FA 61 FC | 	wrlong	result1, fp
15a7c     04 4E 05 F1 | 	add	fp, #4
15a80     A7 FC 61 FC | 	wrlong	result2, fp
15a84     04 4E 05 F1 | 	add	fp, #4
15a88     A7 16 62 FC | 	wrlong	arg03, fp
15a8c                 | ' t1=pop() : arg2=converttoint(t1)
15a8c                 | ' t1=pop() : arg1=converttoint(t1)
15a8c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15a8c     08 4E 85 F1 | 	sub	fp, #8
15a90     2B 16 0E F2 | 	cmp	arg03, #43 wz
15a94     18 00 90 5D |  if_ne	jmp	#LR__1761
15a98     A7 12 02 FB | 	rdlong	arg01, fp
15a9c     84 7E BF FD | 	call	#_convertstring
15aa0     A7 FA 61 FC | 	wrlong	result1, fp
15aa4     08 4E 05 F1 | 	add	fp, #8
15aa8     A7 3E 68 FC | 	wrlong	#31, fp
15aac     08 4E 85 F1 | 	sub	fp, #8
15ab0                 | LR__1761
15ab0                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
15ab0     08 4E 05 F1 | 	add	fp, #8
15ab4     A7 16 02 FB | 	rdlong	arg03, fp
15ab8     08 4E 85 F1 | 	sub	fp, #8
15abc     1F 16 0E F2 | 	cmp	arg03, #31 wz
15ac0     40 00 90 AD |  if_e	jmp	#LR__1762
15ac4     00 12 06 F6 | 	mov	arg01, #0
15ac8     90 76 B1 FD | 	call	#__system___getiolock_0616
15acc     FD 12 02 F6 | 	mov	arg01, result1
15ad0     E4 19 B1 FD | 	call	#__system___lockmem
15ad4     BD 01 00 FF 
15ad8     72 14 06 F6 | 	mov	arg02, ##@LR__5997
15adc     00 12 06 F6 | 	mov	arg01, #0
15ae0     00 16 06 F6 | 	mov	arg03, #0
15ae4     C8 26 B1 FD | 	call	#__system___basic_print_string
15ae8     00 12 06 F6 | 	mov	arg01, #0
15aec     6C 76 B1 FD | 	call	#__system___getiolock_0616
15af0     FD 00 68 FC | 	wrlong	#0, result1
15af4     0F 12 06 F6 | 	mov	arg01, #15
15af8     00 14 06 F6 | 	mov	arg02, #0
15afc     A0 DF B0 FD | 	call	#_printerror
15b00     28 00 90 FD | 	jmp	#LR__1763
15b04                 | LR__1762
15b04     A7 12 02 FB | 	rdlong	arg01, fp
15b08     10 4E 05 F1 | 	add	fp, #16
15b0c     A7 14 02 FB | 	rdlong	arg02, fp
15b10     04 4E 05 F1 | 	add	fp, #4
15b14     A7 16 02 FB | 	rdlong	arg03, fp
15b18     14 4E 85 F1 | 	sub	fp, #20
15b1c     30 3B B1 FD | 	call	#__system__Mid_S
15b20     A7 FA 61 FC | 	wrlong	result1, fp
15b24     A7 12 02 F6 | 	mov	arg01, fp
15b28     18 7D BF FD | 	call	#_push
15b2c                 | LR__1763
15b2c     A7 F0 03 F6 | 	mov	ptra, fp
15b30     B2 00 A0 FD | 	call	#popregs_
15b34                 | _do_mid_ret
15b34     2D 00 64 FD | 	ret
15b38                 | 
15b38                 | ' 
15b38                 | ' '-------------------- mkdir
15b38                 | ' 
15b38                 | ' sub do_mkdir
15b38                 | _do_mkdir
15b38     04 4A 05 F6 | 	mov	COUNT_, #4
15b3c     A8 00 A0 FD | 	call	#pushregs_
15b40     68 7C BF FD | 	call	#_pop
15b44     FE 18 02 F6 | 	mov	arg04, result2
15b48     FF 16 02 F6 | 	mov	arg03, result3
15b4c     FD 26 02 F6 | 	mov	local01, result1
15b50     0C 29 02 F6 | 	mov	local02, arg04
15b54     0B 2B 02 F6 | 	mov	local03, arg03
15b58                 | ' 
15b58                 | ' t1=pop()
15b58                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15b58     2B 2A 0E F2 | 	cmp	local03, #43 wz
15b5c     10 00 90 5D |  if_ne	jmp	#LR__1770
15b60     13 13 02 F6 | 	mov	arg01, local01
15b64     BC 7D BF FD | 	call	#_convertstring
15b68     FD 26 02 F6 | 	mov	local01, result1
15b6c     1F 2A 06 F6 | 	mov	local03, #31
15b70                 | LR__1770
15b70                 | ' if t1.result_type<>result_string then printerror(15): return
15b70     1F 2A 0E F2 | 	cmp	local03, #31 wz
15b74     10 00 90 AD |  if_e	jmp	#LR__1771
15b78     0F 12 06 F6 | 	mov	arg01, #15
15b7c     00 14 06 F6 | 	mov	arg02, #0
15b80     1C DF B0 FD | 	call	#_printerror
15b84     64 00 90 FD | 	jmp	#LR__1773
15b88                 | LR__1771
15b88     13 13 02 F6 | 	mov	arg01, local01
15b8c     FC 41 B1 FD | 	call	#__system___mkdir
15b90     FD 2C 0A F6 | 	mov	local04, result1 wz
15b94                 | ' filename$=t1.result.sresult
15b94                 | ' err=mkdir(filename$)
15b94                 | ' 'err=geterr() : 
15b94                 | ' if err<>0 then print "Cannot create a directory: system error "; err
15b94     54 00 90 AD |  if_e	jmp	#LR__1772
15b98     00 12 06 F6 | 	mov	arg01, #0
15b9c     BC 75 B1 FD | 	call	#__system___getiolock_0616
15ba0     FD 12 02 F6 | 	mov	arg01, result1
15ba4     10 19 B1 FD | 	call	#__system___lockmem
15ba8     BD 01 00 FF 
15bac     79 14 06 F6 | 	mov	arg02, ##@LR__5998
15bb0     00 12 06 F6 | 	mov	arg01, #0
15bb4     00 16 06 F6 | 	mov	arg03, #0
15bb8     F4 25 B1 FD | 	call	#__system___basic_print_string
15bbc     00 12 06 F6 | 	mov	arg01, #0
15bc0     16 15 02 F6 | 	mov	arg02, local04
15bc4     00 16 06 F6 | 	mov	arg03, #0
15bc8     0A 18 06 F6 | 	mov	arg04, #10
15bcc     24 26 B1 FD | 	call	#__system___basic_print_integer
15bd0     00 12 06 F6 | 	mov	arg01, #0
15bd4     0A 14 06 F6 | 	mov	arg02, #10
15bd8     00 16 06 F6 | 	mov	arg03, #0
15bdc     78 25 B1 FD | 	call	#__system___basic_print_char
15be0     00 12 06 F6 | 	mov	arg01, #0
15be4     74 75 B1 FD | 	call	#__system___getiolock_0616
15be8     FD 00 68 FC | 	wrlong	#0, result1
15bec                 | LR__1772
15bec                 | LR__1773
15bec     A7 F0 03 F6 | 	mov	ptra, fp
15bf0     B2 00 A0 FD | 	call	#popregs_
15bf4                 | _do_mkdir_ret
15bf4     2D 00 64 FD | 	ret
15bf8                 | 
15bf8                 | ' 
15bf8                 | ' '-------------------- mode
15bf8                 | ' 
15bf8                 | ' sub do_mode
15bf8                 | _do_mode
15bf8     05 4A 05 F6 | 	mov	COUNT_, #5
15bfc     A8 00 A0 FD | 	call	#pushregs_
15c00     A8 7B BF FD | 	call	#_pop
15c04     FD 26 02 F6 | 	mov	local01, result1
15c08     FE 28 02 F6 | 	mov	local02, result2
15c0c     FF 2A 02 F6 | 	mov	local03, result3
15c10                 | ' t1=pop() 
15c10                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15c10     1E 2A 0E F2 | 	cmp	local03, #30 wz
15c14     10 00 90 5D |  if_ne	jmp	#LR__1780
15c18     13 13 02 F6 | 	mov	arg01, local01
15c1c     00 14 06 F6 | 	mov	arg02, #0
15c20     D8 4B B1 FD | 	call	#__system___float_tointeger
15c24     FD 26 02 F6 | 	mov	local01, result1
15c28                 | LR__1780
15c28                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15c28     1F 2A 0E F2 | 	cmp	local03, #31 wz
15c2c     18 00 90 5D |  if_ne	jmp	#LR__1781
15c30     13 13 02 F6 | 	mov	arg01, local01
15c34     08 4F B1 FD | 	call	#__system____builtin_atof
15c38     FD 12 02 F6 | 	mov	arg01, result1
15c3c     00 14 06 F6 | 	mov	arg02, #0
15c40     B8 4B B1 FD | 	call	#__system___float_tointeger
15c44     FD 26 02 F6 | 	mov	local01, result1
15c48                 | LR__1781
15c48                 | ' select case t1.result.iresult
15c48     13 2D 02 F6 | 	mov	local04, local01
15c4c     06 2C 26 F3 | 	fle	local04, #6
15c50     30 2C 62 FD | 	jmprel	local04
15c54                 | LR__1782
15c54     18 00 90 FD | 	jmp	#LR__1783
15c58     AC 00 90 FD | 	jmp	#LR__1784
15c5c     14 01 90 FD | 	jmp	#LR__1785
15c60     7C 01 90 FD | 	jmp	#LR__1786
15c64     E4 01 90 FD | 	jmp	#LR__1787
15c68     78 02 90 FD | 	jmp	#LR__1788
15c6c     08 03 90 FD | 	jmp	#LR__1789
15c70                 | LR__1783
15c70     37 00 00 FF 
15c74     40 E4 05 F1 | 	add	objptr, ##28224
15c78     F2 02 68 FC | 	wrlong	#1, objptr
15c7c     04 E4 85 F1 | 	sub	objptr, #4
15c80     F2 34 69 FC | 	wrlong	#154, objptr
15c84     19 00 00 FF 
15c88     00 E5 05 F1 | 	add	objptr, ##13056
15c8c     F2 02 68 FC | 	wrlong	#1, objptr
15c90     19 00 00 FF 
15c94     04 E5 85 F1 | 	sub	objptr, ##13060
15c98     F2 26 69 FC | 	wrlong	#147, objptr
15c9c     37 00 00 FF 
15ca0     38 E4 85 F1 | 	sub	objptr, ##28216
15ca4     04 12 06 F6 | 	mov	arg01, #4
15ca8     30 FA B0 FD | 	call	#_hg010b_spin2_setfontfamily
15cac     37 00 00 FF 
15cb0     3C E4 05 F1 | 	add	objptr, ##28220
15cb4     F2 12 02 FB | 	rdlong	arg01, objptr
15cb8     04 E4 85 F1 | 	sub	objptr, #4
15cbc     F2 14 02 FB | 	rdlong	arg02, objptr
15cc0                 | ' 
15cc0                 | ' write_color:=ff
15cc0     36 00 00 FF 
15cc4     F7 E5 85 F1 | 	sub	objptr, ##28151
15cc8     F2 12 62 FC | 	wrlong	arg01, objptr
15ccc                 | ' write_background:=bb
15ccc     04 E4 05 F1 | 	add	objptr, #4
15cd0     F2 14 62 FC | 	wrlong	arg02, objptr
15cd4     01 00 00 FF 
15cd8     00 EA 05 F1 | 	add	ptr__dat__, ##512
15cdc     52 00 00 FF 
15ce0     97 E4 05 F1 | 	add	objptr, ##42135
15ce4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15ce8     04 E4 85 F1 | 	sub	objptr, #4
15cec     03 00 80 FF 
15cf0     F2 30 69 FC | 	wrlong	##1688, objptr
15cf4     52 00 00 FF 
15cf8     D8 E4 85 F1 | 	sub	objptr, ##42200
15cfc     01 00 00 FF 
15d00     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15d04     70 02 90 FD | 	jmp	#LR__1789
15d08                 | LR__1784
15d08     37 00 00 FF 
15d0c     40 E4 05 F1 | 	add	objptr, ##28224
15d10     F2 00 68 FC | 	wrlong	#0, objptr
15d14     04 E4 85 F1 | 	sub	objptr, #4
15d18     F2 2E 68 FC | 	wrlong	#23, objptr
15d1c     19 00 00 FF 
15d20     00 E5 05 F1 | 	add	objptr, ##13056
15d24     F2 00 68 FC | 	wrlong	#0, objptr
15d28     19 00 00 FF 
15d2c     04 E5 85 F1 | 	sub	objptr, ##13060
15d30     F2 00 68 FC | 	wrlong	#0, objptr
15d34     37 00 00 FF 
15d38     38 E4 85 F1 | 	sub	objptr, ##28216
15d3c     00 12 06 F6 | 	mov	arg01, #0
15d40     98 F9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15d44     37 00 00 FF 
15d48     3C E4 05 F1 | 	add	objptr, ##28220
15d4c     F2 12 02 FB | 	rdlong	arg01, objptr
15d50     04 E4 85 F1 | 	sub	objptr, #4
15d54     F2 14 02 FB | 	rdlong	arg02, objptr
15d58                 | ' 
15d58                 | ' write_color:=ff
15d58     36 00 00 FF 
15d5c     F7 E5 85 F1 | 	sub	objptr, ##28151
15d60     F2 12 62 FC | 	wrlong	arg01, objptr
15d64                 | ' write_background:=bb
15d64     04 E4 05 F1 | 	add	objptr, #4
15d68     F2 14 62 FC | 	wrlong	arg02, objptr
15d6c     45 E4 85 F1 | 	sub	objptr, #69
15d70     04 02 90 FD | 	jmp	#LR__1789
15d74                 | LR__1785
15d74     37 00 00 FF 
15d78     40 E4 05 F1 | 	add	objptr, ##28224
15d7c     F2 00 68 FC | 	wrlong	#0, objptr
15d80     04 E4 85 F1 | 	sub	objptr, #4
15d84     F2 6A 69 FC | 	wrlong	#181, objptr
15d88     19 00 00 FF 
15d8c     00 E5 05 F1 | 	add	objptr, ##13056
15d90     F2 00 68 FC | 	wrlong	#0, objptr
15d94     19 00 00 FF 
15d98     04 E5 85 F1 | 	sub	objptr, ##13060
15d9c     F2 00 68 FC | 	wrlong	#0, objptr
15da0     37 00 00 FF 
15da4     38 E4 85 F1 | 	sub	objptr, ##28216
15da8     00 12 06 F6 | 	mov	arg01, #0
15dac     2C F9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15db0     37 00 00 FF 
15db4     3C E4 05 F1 | 	add	objptr, ##28220
15db8     F2 12 02 FB | 	rdlong	arg01, objptr
15dbc     04 E4 85 F1 | 	sub	objptr, #4
15dc0     F2 14 02 FB | 	rdlong	arg02, objptr
15dc4                 | ' 
15dc4                 | ' write_color:=ff
15dc4     36 00 00 FF 
15dc8     F7 E5 85 F1 | 	sub	objptr, ##28151
15dcc     F2 12 62 FC | 	wrlong	arg01, objptr
15dd0                 | ' write_background:=bb
15dd0     04 E4 05 F1 | 	add	objptr, #4
15dd4     F2 14 62 FC | 	wrlong	arg02, objptr
15dd8     45 E4 85 F1 | 	sub	objptr, #69
15ddc     98 01 90 FD | 	jmp	#LR__1789
15de0                 | LR__1786
15de0     37 00 00 FF 
15de4     40 E4 05 F1 | 	add	objptr, ##28224
15de8     F2 00 68 FC | 	wrlong	#0, objptr
15dec     04 E4 85 F1 | 	sub	objptr, #4
15df0     F2 1E 68 FC | 	wrlong	#15, objptr
15df4     19 00 00 FF 
15df8     00 E5 05 F1 | 	add	objptr, ##13056
15dfc     F2 00 68 FC | 	wrlong	#0, objptr
15e00     19 00 00 FF 
15e04     04 E5 85 F1 | 	sub	objptr, ##13060
15e08     F2 00 68 FC | 	wrlong	#0, objptr
15e0c     37 00 00 FF 
15e10     38 E4 85 F1 | 	sub	objptr, ##28216
15e14     00 12 06 F6 | 	mov	arg01, #0
15e18     C0 F8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15e1c     37 00 00 FF 
15e20     3C E4 05 F1 | 	add	objptr, ##28220
15e24     F2 12 02 FB | 	rdlong	arg01, objptr
15e28     04 E4 85 F1 | 	sub	objptr, #4
15e2c     F2 14 02 FB | 	rdlong	arg02, objptr
15e30                 | ' 
15e30                 | ' write_color:=ff
15e30     36 00 00 FF 
15e34     F7 E5 85 F1 | 	sub	objptr, ##28151
15e38     F2 12 62 FC | 	wrlong	arg01, objptr
15e3c                 | ' write_background:=bb
15e3c     04 E4 05 F1 | 	add	objptr, #4
15e40     F2 14 62 FC | 	wrlong	arg02, objptr
15e44     45 E4 85 F1 | 	sub	objptr, #69
15e48     2C 01 90 FD | 	jmp	#LR__1789
15e4c                 | LR__1787
15e4c     37 00 00 FF 
15e50     40 E4 05 F1 | 	add	objptr, ##28224
15e54     F2 02 68 FC | 	wrlong	#1, objptr
15e58     04 E4 85 F1 | 	sub	objptr, #4
15e5c     F2 02 68 FC | 	wrlong	#1, objptr
15e60     19 00 00 FF 
15e64     00 E5 05 F1 | 	add	objptr, ##13056
15e68     F2 02 68 FC | 	wrlong	#1, objptr
15e6c     19 00 00 FF 
15e70     04 E5 85 F1 | 	sub	objptr, ##13060
15e74     F2 1C 68 FC | 	wrlong	#14, objptr
15e78     37 00 00 FF 
15e7c     38 E4 85 F1 | 	sub	objptr, ##28216
15e80     04 12 06 F6 | 	mov	arg01, #4
15e84     54 F8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15e88     37 00 00 FF 
15e8c     3C E4 05 F1 | 	add	objptr, ##28220
15e90     F2 12 02 FB | 	rdlong	arg01, objptr
15e94     04 E4 85 F1 | 	sub	objptr, #4
15e98     F2 14 02 FB | 	rdlong	arg02, objptr
15e9c                 | ' 
15e9c                 | ' write_color:=ff
15e9c     36 00 00 FF 
15ea0     F7 E5 85 F1 | 	sub	objptr, ##28151
15ea4     F2 12 62 FC | 	wrlong	arg01, objptr
15ea8                 | ' write_background:=bb
15ea8     04 E4 05 F1 | 	add	objptr, #4
15eac     F2 14 62 FC | 	wrlong	arg02, objptr
15eb0     07 00 00 FF 
15eb4     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15eb8     52 00 00 FF 
15ebc     97 E4 05 F1 | 	add	objptr, ##42135
15ec0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15ec4     04 E4 85 F1 | 	sub	objptr, #4
15ec8     03 00 80 FF 
15ecc     F2 30 69 FC | 	wrlong	##1688, objptr
15ed0     52 00 00 FF 
15ed4     D8 E4 85 F1 | 	sub	objptr, ##42200
15ed8     07 00 00 FF 
15edc     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15ee0     94 00 90 FD | 	jmp	#LR__1789
15ee4                 | LR__1788
15ee4     37 00 00 FF 
15ee8     40 E4 05 F1 | 	add	objptr, ##28224
15eec     F2 04 68 FC | 	wrlong	#2, objptr
15ef0     04 E4 85 F1 | 	sub	objptr, #4
15ef4     F2 02 68 FC | 	wrlong	#1, objptr
15ef8     19 00 00 FF 
15efc     00 E5 05 F1 | 	add	objptr, ##13056
15f00     F2 02 68 FC | 	wrlong	#1, objptr
15f04     19 00 00 FF 
15f08     04 E5 85 F1 | 	sub	objptr, ##13060
15f0c     F2 0E 68 FC | 	wrlong	#7, objptr
15f10     37 00 00 FF 
15f14     38 E4 85 F1 | 	sub	objptr, ##28216
15f18     08 12 06 F6 | 	mov	arg01, #8
15f1c     BC F7 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15f20     37 00 00 FF 
15f24     3C E4 05 F1 | 	add	objptr, ##28220
15f28     F2 12 02 FB | 	rdlong	arg01, objptr
15f2c     04 E4 85 F1 | 	sub	objptr, #4
15f30     F2 14 02 FB | 	rdlong	arg02, objptr
15f34                 | ' 
15f34                 | ' write_color:=ff
15f34     36 00 00 FF 
15f38     F7 E5 85 F1 | 	sub	objptr, ##28151
15f3c     F2 12 62 FC | 	wrlong	arg01, objptr
15f40                 | ' write_background:=bb
15f40     04 E4 05 F1 | 	add	objptr, #4
15f44     F2 14 62 FC | 	wrlong	arg02, objptr
15f48     07 00 00 FF 
15f4c     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15f50     52 00 00 FF 
15f54     97 E4 05 F1 | 	add	objptr, ##42135
15f58     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15f5c     04 E4 85 F1 | 	sub	objptr, #4
15f60     03 00 80 FF 
15f64     F2 30 69 FC | 	wrlong	##1688, objptr
15f68     52 00 00 FF 
15f6c     D8 E4 85 F1 | 	sub	objptr, ##42200
15f70     07 00 00 FF 
15f74     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15f78                 | LR__1789
15f78     52 00 00 FF 
15f7c     D4 E4 05 F1 | 	add	objptr, ##42196
15f80     F2 26 62 FC | 	wrlong	local01, objptr
15f84     04 E4 85 F1 | 	sub	objptr, #4
15f88     F2 12 02 FB | 	rdlong	arg01, objptr
15f8c     0F 00 00 FF 
15f90     74 E4 85 F1 | 	sub	objptr, ##7796
15f94     F2 2E 02 FB | 	rdlong	local05, objptr
15f98     43 00 00 FF 
15f9c     5C E4 85 F1 | 	sub	objptr, ##34396
15fa0     17 13 82 F1 | 	sub	arg01, local05
15fa4     00 14 06 F6 | 	mov	arg02, #0
15fa8     0A 16 06 F6 | 	mov	arg03, #10
15fac     DC 37 B1 FD | 	call	#__system__Number_S
15fb0     FD 12 02 F6 | 	mov	arg01, result1
15fb4     BD 01 00 FF 
15fb8     A2 14 06 F6 | 	mov	arg02, ##@LR__5999
15fbc     54 15 B1 FD | 	call	#__system___string_concat
15fc0     50 00 00 FF 
15fc4     38 E5 05 F1 | 	add	objptr, ##41272
15fc8     F2 FA 61 FC | 	wrlong	result1, objptr
15fcc     19 00 00 FF 
15fd0     FC E4 85 F1 | 	sub	objptr, ##13052
15fd4     F2 12 02 FB | 	rdlong	arg01, objptr
15fd8     04 E4 85 F1 | 	sub	objptr, #4
15fdc     F2 14 02 FB | 	rdlong	arg02, objptr
15fe0     37 00 00 FF 
15fe4     38 E4 85 F1 | 	sub	objptr, ##28216
15fe8     70 F8 B0 FD | 	call	#_hg010b_spin2_cls
15fec     BD 01 00 FF 
15ff0     B4 12 06 F6 | 	mov	arg01, ##@LR__6000
15ff4                 | ' 
15ff4                 | ' write(text)
15ff4     24 FC B0 FD | 	call	#_hg010b_spin2_write
15ff8                 | ' crlf
15ff8     C0 00 B1 FD | 	call	#_hg010b_spin2_crlf
15ffc     18 00 00 FF 
16000     40 EB 05 F1 | 	add	ptr__dat__, ##12608
16004     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
16008     18 00 00 FF 
1600c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
16010                 | ' 
16010                 | ' write(text)
16010     08 FC B0 FD | 	call	#_hg010b_spin2_write
16014                 | ' crlf
16014     A4 00 B1 FD | 	call	#_hg010b_spin2_crlf
16018     50 00 00 FF 
1601c     38 E5 05 F1 | 	add	objptr, ##41272
16020     F2 12 02 FB | 	rdlong	arg01, objptr
16024     50 00 00 FF 
16028     38 E5 85 F1 | 	sub	objptr, ##41272
1602c                 | ' 
1602c                 | ' write(text)
1602c     EC FB B0 FD | 	call	#_hg010b_spin2_write
16030                 | ' crlf
16030     88 00 B1 FD | 	call	#_hg010b_spin2_crlf
16034     A7 F0 03 F6 | 	mov	ptra, fp
16038     B2 00 A0 FD | 	call	#popregs_
1603c                 | _do_mode_ret
1603c     2D 00 64 FD | 	ret
16040                 | 
16040                 | ' 
16040                 | ' '-------------------- mouse
16040                 | ' 
16040                 | ' sub do_mouse
16040                 | _do_mouse
16040     68 77 BF FD | 	call	#_pop
16044     00 FA 4D F2 | 	cmps	result1, #0 wz
16048                 | ' 
16048                 | ' t1=pop()
16048                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
16048     14 00 90 5D |  if_ne	jmp	#LR__1790
1604c     10 12 06 F6 | 	mov	arg01, #16
16050     00 14 06 F6 | 	mov	arg02, #0
16054     00 16 06 F6 | 	mov	arg03, #0
16058     B0 EA B0 FD | 	call	#_hg010b_spin2_setspritesize
1605c     10 00 90 FD | 	jmp	#LR__1791
16060                 | LR__1790
16060     10 12 06 F6 | 	mov	arg01, #16
16064     20 14 06 F6 | 	mov	arg02, #32
16068     20 16 06 F6 | 	mov	arg03, #32
1606c     9C EA B0 FD | 	call	#_hg010b_spin2_setspritesize
16070                 | LR__1791
16070                 | _do_mouse_ret
16070     2D 00 64 FD | 	ret
16074                 | 
16074                 | ' 
16074                 | ' '-------------------- mousek
16074                 | ' 
16074                 | ' sub do_mousek
16074                 | _do_mousek
16074     00 4A 05 F6 | 	mov	COUNT_, #0
16078     A8 00 A0 FD | 	call	#pushregs_
1607c     0C F0 07 F1 | 	add	ptra, #12
16080     08 4E 05 F1 | 	add	fp, #8
16084     A7 3A 68 FC | 	wrlong	#29, fp
16088     08 4E 85 F1 | 	sub	fp, #8
1608c     51 00 00 FF 
16090     50 E5 05 F1 | 	add	objptr, ##41808
16094     F2 12 02 FB | 	rdlong	arg01, objptr
16098     51 00 00 FF 
1609c     50 E5 85 F1 | 	sub	objptr, ##41808
160a0     A7 12 62 FC | 	wrlong	arg01, fp
160a4     A7 12 02 F6 | 	mov	arg01, fp
160a8     98 77 BF FD | 	call	#_push
160ac     A7 F0 03 F6 | 	mov	ptra, fp
160b0     B2 00 A0 FD | 	call	#popregs_
160b4                 | _do_mousek_ret
160b4     2D 00 64 FD | 	ret
160b8                 | 
160b8                 | ' 
160b8                 | ' '-------------------- mousew
160b8                 | ' 
160b8                 | ' sub do_mousew
160b8                 | _do_mousew
160b8     00 4A 05 F6 | 	mov	COUNT_, #0
160bc     A8 00 A0 FD | 	call	#pushregs_
160c0     0C F0 07 F1 | 	add	ptra, #12
160c4     08 4E 05 F1 | 	add	fp, #8
160c8     A7 38 68 FC | 	wrlong	#28, fp
160cc     08 4E 85 F1 | 	sub	fp, #8
160d0     51 00 00 FF 
160d4     54 E5 05 F1 | 	add	objptr, ##41812
160d8     F2 12 02 FB | 	rdlong	arg01, objptr
160dc     51 00 00 FF 
160e0     54 E5 85 F1 | 	sub	objptr, ##41812
160e4     A7 12 62 FC | 	wrlong	arg01, fp
160e8     A7 12 02 F6 | 	mov	arg01, fp
160ec     54 77 BF FD | 	call	#_push
160f0     A7 F0 03 F6 | 	mov	ptra, fp
160f4     B2 00 A0 FD | 	call	#popregs_
160f8                 | _do_mousew_ret
160f8     2D 00 64 FD | 	ret
160fc                 | 
160fc                 | ' 
160fc                 | ' '-------------------- mousex
160fc                 | ' 
160fc                 | ' sub do_mousex
160fc                 | _do_mousex
160fc     00 4A 05 F6 | 	mov	COUNT_, #0
16100     A8 00 A0 FD | 	call	#pushregs_
16104     0C F0 07 F1 | 	add	ptra, #12
16108     08 4E 05 F1 | 	add	fp, #8
1610c     A7 3A 68 FC | 	wrlong	#29, fp
16110     08 4E 85 F1 | 	sub	fp, #8
16114     51 00 00 FF 
16118     48 E5 05 F1 | 	add	objptr, ##41800
1611c     F2 12 02 FB | 	rdlong	arg01, objptr
16120     51 00 00 FF 
16124     48 E5 85 F1 | 	sub	objptr, ##41800
16128     A7 12 62 FC | 	wrlong	arg01, fp
1612c     A7 12 02 F6 | 	mov	arg01, fp
16130     10 77 BF FD | 	call	#_push
16134     A7 F0 03 F6 | 	mov	ptra, fp
16138     B2 00 A0 FD | 	call	#popregs_
1613c                 | _do_mousex_ret
1613c     2D 00 64 FD | 	ret
16140                 | 
16140                 | ' 
16140                 | ' '-------------------- mousey
16140                 | ' 
16140                 | ' sub do_mousey
16140                 | _do_mousey
16140     00 4A 05 F6 | 	mov	COUNT_, #0
16144     A8 00 A0 FD | 	call	#pushregs_
16148     0C F0 07 F1 | 	add	ptra, #12
1614c     08 4E 05 F1 | 	add	fp, #8
16150     A7 3A 68 FC | 	wrlong	#29, fp
16154     08 4E 85 F1 | 	sub	fp, #8
16158     51 00 00 FF 
1615c     4C E5 05 F1 | 	add	objptr, ##41804
16160     F2 12 02 FB | 	rdlong	arg01, objptr
16164     51 00 00 FF 
16168     4C E5 85 F1 | 	sub	objptr, ##41804
1616c     A7 12 62 FC | 	wrlong	arg01, fp
16170     A7 12 02 F6 | 	mov	arg01, fp
16174     CC 76 BF FD | 	call	#_push
16178     A7 F0 03 F6 | 	mov	ptra, fp
1617c     B2 00 A0 FD | 	call	#popregs_
16180                 | _do_mousey_ret
16180     2D 00 64 FD | 	ret
16184                 | 
16184                 | ' 
16184                 | ' '------------------ new
16184                 | ' 
16184                 | ' sub do_new
16184                 | _do_new
16184     03 4A 05 F6 | 	mov	COUNT_, #3
16188     A8 00 A0 FD | 	call	#pushregs_
1618c                 | ' 
1618c                 | ' if inrun=1 then inrun=2
1618c     50 00 00 FF 
16190     EC E4 05 F1 | 	add	objptr, ##41196
16194     F2 16 02 FB | 	rdlong	arg03, objptr
16198     50 00 00 FF 
1619c     EC E4 85 F1 | 	sub	objptr, ##41196
161a0     01 16 0E F2 | 	cmp	arg03, #1 wz
161a4     50 00 00 AF 
161a8     EC E4 05 A1 |  if_e	add	objptr, ##41196
161ac     F2 04 68 AC |  if_e	wrlong	#2, objptr
161b0     50 00 00 AF 
161b4     EC E4 85 A1 |  if_e	sub	objptr, ##41196
161b8     13 12 C6 F9 | 	decod	arg01, #19
161bc     01 14 66 F6 | 	neg	arg02, #1
161c0     7C DA B0 FD | 	call	#_pslpoke
161c4     35 00 00 FF 
161c8     08 E4 05 F1 | 	add	objptr, ##27144
161cc     F2 00 68 FC | 	wrlong	#0, objptr
161d0                 | ' pslpoke(memlo,$FFFFFFFF)
161d0                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
161d0     00 26 06 F6 | 	mov	local01, #0
161d4     20 00 00 FF 
161d8     10 E4 85 F1 | 	sub	objptr, ##16400
161dc     97 1E 48 FB | 	callpa	#(@LR__1801-@LR__1800)>>2,fcache_load_ptr_
161e0                 | LR__1800
161e0     13 17 02 F6 | 	mov	arg03, local01
161e4     04 16 66 F0 | 	shl	arg03, #4
161e8     F2 16 02 F1 | 	add	arg03, objptr
161ec     BD 01 00 FF 
161f0     B5 14 06 F6 | 	mov	arg02, ##@LR__6001
161f4     0B 15 62 FC | 	wrlong	arg02, arg03
161f8     13 29 02 F6 | 	mov	local02, local01
161fc     04 28 66 F0 | 	shl	local02, #4
16200     F2 28 02 F1 | 	add	local02, objptr
16204     0C 28 06 F1 | 	add	local02, #12
16208     14 01 68 FC | 	wrlong	#0, local02
1620c     01 26 06 F1 | 	add	local01, #1
16210     02 00 00 FF 
16214     01 26 56 F2 | 	cmps	local01, ##1025 wc
16218     C4 FF 9F CD |  if_b	jmp	#LR__1800
1621c                 | LR__1801
1621c     35 00 00 FF 
16220     90 E4 05 F1 | 	add	objptr, ##27280
16224     00 04 80 FF 
16228     F2 00 68 FC | 	wrlong	##524288, objptr
1622c     06 00 00 FF 
16230     30 E4 05 F1 | 	add	objptr, ##3120
16234     00 04 80 FF 
16238     F2 00 68 FC | 	wrlong	##524288, objptr
1623c     04 E4 05 F1 | 	add	objptr, #4
16240     00 04 80 FF 
16244     F2 00 68 FC | 	wrlong	##524288, objptr
16248     0D 00 00 FF 
1624c     64 E4 85 F1 | 	sub	objptr, ##6756
16250     F2 00 68 FC | 	wrlong	#0, objptr
16254     07 00 00 FF 
16258     24 E4 05 F1 | 	add	objptr, ##3620
1625c     F2 00 68 FC | 	wrlong	#0, objptr
16260     07 00 00 FF 
16264     20 E4 85 F1 | 	sub	objptr, ##3616
16268     00 04 80 FF 
1626c     F2 00 68 FC | 	wrlong	##524288, objptr
16270     0D 00 00 FF 
16274     D0 E4 05 F1 | 	add	objptr, ##6864
16278     F2 00 68 FC | 	wrlong	#0, objptr
1627c     BD 01 00 FF 
16280     B6 2A 06 F6 | 	mov	local03, ##@LR__6002
16284     01 00 00 FF 
16288     E8 E5 05 F1 | 	add	objptr, ##1000
1628c     F2 2A 62 FC | 	wrlong	local03, objptr
16290     08 00 00 FF 
16294     88 E4 85 F1 | 	sub	objptr, ##4232
16298     F2 00 68 FC | 	wrlong	#0, objptr
1629c     04 E4 05 F1 | 	add	objptr, #4
162a0     FF FF FF FF 
162a4     F2 FE 6B FC | 	wrlong	##-1, objptr
162a8     06 00 00 FF 
162ac     A0 E4 05 F1 | 	add	objptr, ##3232
162b0     F2 00 68 FC | 	wrlong	#0, objptr
162b4     04 E4 05 F1 | 	add	objptr, #4
162b8     F2 00 68 FC | 	wrlong	#0, objptr
162bc                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
162bc                 | ' stackpointer=0
162bc                 | ' lineptr=0 
162bc                 | ' programptr=memlo ': stringptr=0
162bc                 | ' dataptr=0 : readline=""
162bc                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
162bc                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
162bc     00 26 06 F6 | 	mov	local01, #0
162c0     06 00 00 FF 
162c4     9C E4 85 F1 | 	sub	objptr, ##3228
162c8     97 16 48 FB | 	callpa	#(@LR__1803-@LR__1802)>>2,fcache_load_ptr_
162cc                 | LR__1802
162cc     13 29 02 F6 | 	mov	local02, local01
162d0     02 28 66 F0 | 	shl	local02, #2
162d4     13 29 02 F1 | 	add	local02, local01
162d8     02 28 66 F0 | 	shl	local02, #2
162dc     F2 28 02 F1 | 	add	local02, objptr
162e0     08 28 06 F1 | 	add	local02, #8
162e4     FF FF FF FF 
162e8     14 FF 6B FC | 	wrlong	##-1, local02
162ec     01 26 06 F1 | 	add	local01, #1
162f0     41 26 56 F2 | 	cmps	local01, #65 wc
162f4     D4 FF 9F CD |  if_b	jmp	#LR__1802
162f8                 | LR__1803
162f8     4A 00 00 FF 
162fc     98 E4 85 F1 | 	sub	objptr, ##38040
16300                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
16300     00 26 06 F6 | 	mov	local01, #0
16304                 | LR__1804
16304     13 29 02 F6 | 	mov	local02, local01
16308     02 28 66 F0 | 	shl	local02, #2
1630c     52 00 00 FF 
16310     8C E4 05 F1 | 	add	objptr, ##42124
16314     F2 28 02 F1 | 	add	local02, objptr
16318     14 2B 0A FB | 	rdlong	local03, local02 wz
1631c     52 00 00 FF 
16320     8C E4 85 F1 | 	sub	objptr, ##42124
16324     34 00 90 AD |  if_e	jmp	#LR__1805
16328     13 13 02 F6 | 	mov	arg01, local01
1632c     00 14 06 F6 | 	mov	arg02, #0
16330     00 16 06 F6 | 	mov	arg03, #0
16334     D4 E7 B0 FD | 	call	#_hg010b_spin2_setspritesize
16338     13 29 02 F6 | 	mov	local02, local01
1633c     02 28 66 F0 | 	shl	local02, #2
16340     52 00 00 FF 
16344     8C E4 05 F1 | 	add	objptr, ##42124
16348     F2 28 02 F1 | 	add	local02, objptr
1634c     14 13 02 FB | 	rdlong	arg01, local02
16350     52 00 00 FF 
16354     8C E4 85 F1 | 	sub	objptr, ##42124
16358     3C 54 B1 FD | 	call	#__system___gc_free
1635c                 | LR__1805
1635c     01 26 06 F1 | 	add	local01, #1
16360     10 26 56 F2 | 	cmps	local01, #16 wc
16364     9C FF 9F CD |  if_b	jmp	#LR__1804
16368     52 00 00 FF 
1636c     E0 E4 05 F1 | 	add	objptr, ##42208
16370     00 C0 9F FF 
16374     F2 00 68 FC | 	wrlong	##1065353216, objptr
16378     04 E4 05 F1 | 	add	objptr, #4
1637c     00 C0 9F FF 
16380     F2 00 68 FC | 	wrlong	##1065353216, objptr
16384     52 00 00 FF 
16388     E0 E4 85 F1 | 	sub	objptr, ##42208
1638c     F2 2A 02 FB | 	rdlong	local03, objptr
16390     52 00 00 FF 
16394     CC E4 05 F1 | 	add	objptr, ##42188
16398     F2 2A 62 FC | 	wrlong	local03, objptr
1639c     52 00 00 FF 
163a0     D0 E4 85 F1 | 	sub	objptr, ##42192
163a4     11 12 06 F6 | 	mov	arg01, #17
163a8     08 14 06 F6 | 	mov	arg02, #8
163ac     10 16 06 F6 | 	mov	arg03, #16
163b0     58 E7 B0 FD | 	call	#_hg010b_spin2_setspritesize
163b4     10 12 06 F6 | 	mov	arg01, #16
163b8     20 14 06 F6 | 	mov	arg02, #32
163bc     20 16 06 F6 | 	mov	arg03, #32
163c0     48 E7 B0 FD | 	call	#_hg010b_spin2_setspritesize
163c4     BD 01 00 FF 
163c8     B7 2A 06 F6 | 	mov	local03, ##@LR__6003
163cc     52 00 00 FF 
163d0     FC E4 05 F1 | 	add	objptr, ##42236
163d4     F2 2A 62 FC | 	wrlong	local03, objptr
163d8     52 00 00 FF 
163dc     FC E4 85 F1 | 	sub	objptr, ##42236
163e0     B4 CA B0 FD | 	call	#_init_audio
163e4     A7 F0 03 F6 | 	mov	ptra, fp
163e8     B2 00 A0 FD | 	call	#popregs_
163ec                 | _do_new_ret
163ec     2D 00 64 FD | 	ret
163f0                 | 
163f0                 | ' 
163f0                 | ' '-------------------- next
163f0                 | ' 
163f0                 | ' sub do_next()
163f0                 | _do_next
163f0     04 4A 05 F6 | 	mov	COUNT_, #4
163f4     A8 00 A0 FD | 	call	#pushregs_
163f8     B0 73 BF FD | 	call	#_pop
163fc     FD 26 02 F6 | 	mov	local01, result1
16400     FE 28 02 F6 | 	mov	local02, result2
16404     FF 2A 02 F6 | 	mov	local03, result3
16408                 | ' t1=pop() :varnum=t1.result.uresult
16408                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
16408     50 00 00 FF 
1640c     30 E5 05 F1 | 	add	objptr, ##41264
16410     F2 14 02 FB | 	rdlong	arg02, objptr
16414     0A 13 02 F6 | 	mov	arg01, arg02
16418     02 12 66 F0 | 	shl	arg01, #2
1641c     0A 13 02 F1 | 	add	arg01, arg02
16420     02 12 66 F0 | 	shl	arg01, #2
16424     06 00 00 FF 
16428     98 E4 85 F1 | 	sub	objptr, ##3224
1642c     F2 12 02 F1 | 	add	arg01, objptr
16430     08 12 06 F1 | 	add	arg01, #8
16434     09 15 02 FB | 	rdlong	arg02, arg01
16438     13 15 0A F2 | 	cmp	arg02, local01 wz
1643c     4A 00 00 FF 
16440     98 E4 85 F1 | 	sub	objptr, ##38040
16444     10 00 90 AD |  if_e	jmp	#LR__1810
16448     25 12 06 F6 | 	mov	arg01, #37
1644c     00 14 06 F6 | 	mov	arg02, #0
16450     4C D6 B0 FD | 	call	#_printerror
16454     54 03 90 FD | 	jmp	#LR__1817
16458                 | LR__1810
16458                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
16458     13 15 02 F6 | 	mov	arg02, local01
1645c     04 14 66 F0 | 	shl	arg02, #4
16460     14 00 00 FF 
16464     F8 E5 05 F1 | 	add	objptr, ##10744
16468     F2 14 02 F1 | 	add	arg02, objptr
1646c     0C 14 06 F1 | 	add	arg02, #12
16470     0A 15 02 FB | 	rdlong	arg02, arg02
16474     1E 14 0E F2 | 	cmp	arg02, #30 wz
16478     14 00 00 FF 
1647c     F8 E5 85 F1 | 	sub	objptr, ##10744
16480     54 00 90 5D |  if_ne	jmp	#LR__1811
16484     13 15 02 F6 | 	mov	arg02, local01
16488     04 14 66 F0 | 	shl	arg02, #4
1648c     14 00 00 FF 
16490     F8 E5 05 F1 | 	add	objptr, ##10744
16494     F2 14 02 F1 | 	add	arg02, objptr
16498     0C 14 06 F1 | 	add	arg02, #12
1649c     0A 39 68 FC | 	wrlong	#28, arg02
164a0     13 2D 02 F6 | 	mov	local04, local01
164a4     04 2C 66 F0 | 	shl	local04, #4
164a8     F2 2C 02 F1 | 	add	local04, objptr
164ac     13 15 02 F6 | 	mov	arg02, local01
164b0     04 14 66 F0 | 	shl	arg02, #4
164b4     F2 14 02 F1 | 	add	arg02, objptr
164b8     04 14 06 F1 | 	add	arg02, #4
164bc     0A 13 02 FB | 	rdlong	arg01, arg02
164c0     14 00 00 FF 
164c4     F8 E5 85 F1 | 	sub	objptr, ##10744
164c8     01 14 06 F6 | 	mov	arg02, #1
164cc     2C 43 B1 FD | 	call	#__system___float_tointeger
164d0     04 2C 06 F1 | 	add	local04, #4
164d4     16 FB 61 FC | 	wrlong	result1, local04
164d8                 | LR__1811
164d8     50 00 00 FF 
164dc     30 E5 05 F1 | 	add	objptr, ##41264
164e0     F2 2C 02 FB | 	rdlong	local04, objptr
164e4     16 15 02 F6 | 	mov	arg02, local04
164e8     02 14 66 F0 | 	shl	arg02, #2
164ec     16 15 02 F1 | 	add	arg02, local04
164f0     02 14 66 F0 | 	shl	arg02, #2
164f4     06 00 00 FF 
164f8     98 E4 85 F1 | 	sub	objptr, ##3224
164fc     F2 14 02 F1 | 	add	arg02, objptr
16500     0C 14 06 F1 | 	add	arg02, #12
16504     0A FF 01 FB | 	rdlong	result3, arg02
16508     13 2D 02 F6 | 	mov	local04, local01
1650c     04 2C 66 F0 | 	shl	local04, #4
16510     35 00 00 FF 
16514     A0 E4 85 F1 | 	sub	objptr, ##27296
16518     F2 2C 02 F1 | 	add	local04, objptr
1651c     13 15 02 F6 | 	mov	arg02, local01
16520     04 14 66 F0 | 	shl	arg02, #4
16524     F2 14 02 F1 | 	add	arg02, objptr
16528     04 14 06 F1 | 	add	arg02, #4
1652c     0A 13 02 FB | 	rdlong	arg01, arg02
16530     FF 12 02 F1 | 	add	arg01, result3
16534     04 2C 06 F1 | 	add	local04, #4
16538     16 13 62 FC | 	wrlong	arg01, local04
1653c                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
1653c                 | ' if fortable(fortop).stepval>=0 then
1653c     3B 00 00 FF 
16540     38 E5 05 F1 | 	add	objptr, ##30520
16544     F2 2C 02 FB | 	rdlong	local04, objptr
16548     16 13 02 F6 | 	mov	arg01, local04
1654c     02 12 66 F0 | 	shl	arg01, #2
16550     16 13 02 F1 | 	add	arg01, local04
16554     02 12 66 F0 | 	shl	arg01, #2
16558     06 00 00 FF 
1655c     98 E4 85 F1 | 	sub	objptr, ##3224
16560     F2 12 02 F1 | 	add	arg01, objptr
16564     0C 12 06 F1 | 	add	arg01, #12
16568     09 13 02 FB | 	rdlong	arg01, arg01
1656c     00 12 56 F2 | 	cmps	arg01, #0 wc
16570     4A 00 00 FF 
16574     98 E4 85 F1 | 	sub	objptr, ##38040
16578     78 00 90 CD |  if_b	jmp	#LR__1812
1657c                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
1657c     04 26 66 F0 | 	shl	local01, #4
16580     14 00 00 FF 
16584     F8 E5 05 F1 | 	add	objptr, ##10744
16588     F2 26 02 F1 | 	add	local01, objptr
1658c     3B 00 00 FF 
16590     38 E5 05 F1 | 	add	objptr, ##30520
16594     F2 12 02 FB | 	rdlong	arg01, objptr
16598     09 2D 02 F6 | 	mov	local04, arg01
1659c     02 2C 66 F0 | 	shl	local04, #2
165a0     09 2D 02 F1 | 	add	local04, arg01
165a4     02 2C 66 F0 | 	shl	local04, #2
165a8     06 00 00 FF 
165ac     98 E4 85 F1 | 	sub	objptr, ##3224
165b0     F2 2C 02 F1 | 	add	local04, objptr
165b4     04 26 06 F1 | 	add	local01, #4
165b8     13 27 02 FB | 	rdlong	local01, local01
165bc     10 2C 06 F1 | 	add	local04, #16
165c0     16 2D 02 FB | 	rdlong	local04, local04
165c4     16 27 5A F2 | 	cmps	local01, local04 wcz
165c8     4A 00 00 FF 
165cc     98 E4 85 F1 | 	sub	objptr, ##38040
165d0     9C 00 90 ED |  if_be	jmp	#LR__1814
165d4     50 00 00 FF 
165d8     30 E5 05 F1 | 	add	objptr, ##41264
165dc     F2 2C 02 FB | 	rdlong	local04, objptr
165e0     01 2C 86 F1 | 	sub	local04, #1
165e4     F2 2C 62 FC | 	wrlong	local04, objptr
165e8     50 00 00 FF 
165ec     30 E5 85 F1 | 	sub	objptr, ##41264
165f0     B8 01 90 FD | 	jmp	#LR__1817
165f4                 | LR__1812
165f4                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
165f4     13 2D 02 F6 | 	mov	local04, local01
165f8     04 2C 66 F0 | 	shl	local04, #4
165fc     14 00 00 FF 
16600     F8 E5 05 F1 | 	add	objptr, ##10744
16604     F2 2C 02 F1 | 	add	local04, objptr
16608     3B 00 00 FF 
1660c     38 E5 05 F1 | 	add	objptr, ##30520
16610     F2 26 02 FB | 	rdlong	local01, objptr
16614     13 13 02 F6 | 	mov	arg01, local01
16618     02 12 66 F0 | 	shl	arg01, #2
1661c     13 13 02 F1 | 	add	arg01, local01
16620     02 12 66 F0 | 	shl	arg01, #2
16624     06 00 00 FF 
16628     98 E4 85 F1 | 	sub	objptr, ##3224
1662c     F2 12 02 F1 | 	add	arg01, objptr
16630     04 2C 06 F1 | 	add	local04, #4
16634     16 2D 02 FB | 	rdlong	local04, local04
16638     10 12 06 F1 | 	add	arg01, #16
1663c     09 13 02 FB | 	rdlong	arg01, arg01
16640     09 2D 52 F2 | 	cmps	local04, arg01 wc
16644     4A 00 00 FF 
16648     98 E4 85 F1 | 	sub	objptr, ##38040
1664c     20 00 90 3D |  if_ae	jmp	#LR__1813
16650     50 00 00 FF 
16654     30 E5 05 F1 | 	add	objptr, ##41264
16658     F2 2C 02 FB | 	rdlong	local04, objptr
1665c     01 2C 86 F1 | 	sub	local04, #1
16660     F2 2C 62 FC | 	wrlong	local04, objptr
16664     50 00 00 FF 
16668     30 E5 85 F1 | 	sub	objptr, ##41264
1666c     3C 01 90 FD | 	jmp	#LR__1817
16670                 | LR__1813
16670                 | LR__1814
16670                 | ' ' if not returned, goto pointer 
16670                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
16670     50 00 00 FF 
16674     EC E4 05 F1 | 	add	objptr, ##41196
16678     F2 2C 02 FB | 	rdlong	local04, objptr
1667c     50 00 00 FF 
16680     EC E4 85 F1 | 	sub	objptr, ##41196
16684     01 2C 16 F2 | 	cmp	local04, #1 wc
16688     DC 00 90 CD |  if_b	jmp	#LR__1815
1668c     50 00 00 FF 
16690     30 E5 05 F1 | 	add	objptr, ##41264
16694     F2 2C 02 FB | 	rdlong	local04, objptr
16698     16 27 02 F6 | 	mov	local01, local04
1669c     02 26 66 F0 | 	shl	local01, #2
166a0     16 27 02 F1 | 	add	local01, local04
166a4     02 26 66 F0 | 	shl	local01, #2
166a8     06 00 00 FF 
166ac     98 E4 85 F1 | 	sub	objptr, ##3224
166b0     F2 26 02 F1 | 	add	local01, objptr
166b4     06 00 00 FF 
166b8     20 E4 05 F1 | 	add	objptr, ##3104
166bc     F2 2C 02 FB | 	rdlong	local04, objptr
166c0     50 00 00 FF 
166c4     B8 E4 85 F1 | 	sub	objptr, ##41144
166c8     13 27 02 FB | 	rdlong	local01, local01
166cc     13 2D 0A F2 | 	cmp	local04, local01 wz
166d0     94 00 90 AD |  if_e	jmp	#LR__1815
166d4     50 00 00 FF 
166d8     30 E5 05 F1 | 	add	objptr, ##41264
166dc     F2 2C 02 FB | 	rdlong	local04, objptr
166e0     16 27 02 F6 | 	mov	local01, local04
166e4     02 26 66 F0 | 	shl	local01, #2
166e8     16 27 02 F1 | 	add	local01, local04
166ec     02 26 66 F0 | 	shl	local01, #2
166f0     06 00 00 FF 
166f4     98 E4 85 F1 | 	sub	objptr, ##3224
166f8     F2 26 02 F1 | 	add	local01, objptr
166fc     13 27 02 FB | 	rdlong	local01, local01
16700     06 00 00 FF 
16704     20 E4 05 F1 | 	add	objptr, ##3104
16708     F2 26 62 FC | 	wrlong	local01, objptr
1670c     78 E4 05 F1 | 	add	objptr, #120
16710     F2 2C 02 FB | 	rdlong	local04, objptr
16714     16 27 02 F6 | 	mov	local01, local04
16718     02 26 66 F0 | 	shl	local01, #2
1671c     16 27 02 F1 | 	add	local01, local04
16720     02 26 66 F0 | 	shl	local01, #2
16724     06 00 00 FF 
16728     98 E4 85 F1 | 	sub	objptr, ##3224
1672c     F2 26 02 F1 | 	add	local01, objptr
16730     04 26 06 F1 | 	add	local01, #4
16734     13 27 02 FB | 	rdlong	local01, local01
16738     06 00 00 FF 
1673c     24 E4 05 F1 | 	add	objptr, ##3108
16740     F2 26 62 FC | 	wrlong	local01, objptr
16744     06 00 00 FF 
16748     40 E4 85 F1 | 	sub	objptr, ##3136
1674c     F2 2C 02 FB | 	rdlong	local04, objptr
16750     01 2C 86 F1 | 	sub	local04, #1
16754     04 E4 05 F1 | 	add	objptr, #4
16758     F2 2C 62 FC | 	wrlong	local04, objptr
1675c     4A 00 00 FF 
16760     80 E4 85 F1 | 	sub	objptr, ##38016
16764     44 00 90 FD | 	jmp	#LR__1816
16768                 | LR__1815
16768     50 00 00 FF 
1676c     30 E5 05 F1 | 	add	objptr, ##41264
16770     F2 2C 02 FB | 	rdlong	local04, objptr
16774     16 27 02 F6 | 	mov	local01, local04
16778     02 26 66 F0 | 	shl	local01, #2
1677c     16 27 02 F1 | 	add	local01, local04
16780     02 26 66 F0 | 	shl	local01, #2
16784     06 00 00 FF 
16788     98 E4 85 F1 | 	sub	objptr, ##3224
1678c     F2 26 02 F1 | 	add	local01, objptr
16790     04 26 06 F1 | 	add	local01, #4
16794     13 27 02 FB | 	rdlong	local01, local01
16798     01 26 86 F1 | 	sub	local01, #1
1679c     18 E4 85 F1 | 	sub	objptr, #24
167a0     F2 26 62 FC | 	wrlong	local01, objptr
167a4     4A 00 00 FF 
167a8     80 E4 85 F1 | 	sub	objptr, ##38016
167ac                 | LR__1816
167ac                 | LR__1817
167ac     A7 F0 03 F6 | 	mov	ptra, fp
167b0     B2 00 A0 FD | 	call	#popregs_
167b4                 | _do_next_ret
167b4     2D 00 64 FD | 	ret
167b8                 | 
167b8                 | ' 
167b8                 | ' '-------------------- no command (print "Unknown command")
167b8                 | ' 
167b8                 | ' sub do_no_command
167b8                 | _do_no_command
167b8     50 00 00 FF 
167bc     F0 E4 05 F1 | 	add	objptr, ##41200
167c0     F2 14 02 FB | 	rdlong	arg02, objptr
167c4     50 00 00 FF 
167c8     F0 E4 85 F1 | 	sub	objptr, ##41200
167cc     17 12 06 F6 | 	mov	arg01, #23
167d0     CC D2 B0 FD | 	call	#_printerror
167d4                 | _do_no_command_ret
167d4     2D 00 64 FD | 	ret
167d8                 | 
167d8                 | ' 
167d8                 | ' '-------------------- nothing
167d8                 | ' 
167d8                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
167d8                 | _do_nothing
167d8                 | _do_nothing_ret
167d8     2D 00 64 FD | 	ret
167dc                 | 
167dc                 | ' 
167dc                 | ' '-------------------- on
167dc                 | ' 
167dc                 | ' sub do_on
167dc                 | _do_on
167dc     01 4A 05 F6 | 	mov	COUNT_, #1
167e0     A8 00 A0 FD | 	call	#pushregs_
167e4     18 F0 07 F1 | 	add	ptra, #24
167e8     4A 00 00 FF 
167ec     80 E4 05 F1 | 	add	objptr, ##38016
167f0     F2 12 02 FB | 	rdlong	arg01, objptr
167f4     09 FD 01 F6 | 	mov	result2, arg01
167f8     01 FC 65 F0 | 	shl	result2, #1
167fc     09 FD 01 F1 | 	add	result2, arg01
16800     02 FC 65 F0 | 	shl	result2, #2
16804     03 00 00 FF 
16808     04 E4 85 F1 | 	sub	objptr, ##1540
1680c     F2 FC 01 F1 | 	add	result2, objptr
16810     FE 12 02 FB | 	rdlong	arg01, result2
16814     14 4E 05 F1 | 	add	fp, #20
16818     A7 12 62 FC | 	wrlong	arg01, fp
1681c     03 00 00 FF 
16820     04 E4 05 F1 | 	add	objptr, ##1540
16824     F2 12 02 FB | 	rdlong	arg01, objptr
16828     09 27 02 F6 | 	mov	local01, arg01
1682c     01 26 66 F0 | 	shl	local01, #1
16830     09 27 02 F1 | 	add	local01, arg01
16834     02 26 66 F0 | 	shl	local01, #2
16838     03 00 00 FF 
1683c     04 E4 85 F1 | 	sub	objptr, ##1540
16840     F2 26 02 F1 | 	add	local01, objptr
16844     04 26 06 F1 | 	add	local01, #4
16848     13 27 02 FB | 	rdlong	local01, local01
1684c     08 4E 85 F1 | 	sub	fp, #8
16850     A7 26 62 FC | 	wrlong	local01, fp
16854     0C 4E 85 F1 | 	sub	fp, #12
16858     47 00 00 FF 
1685c     7C E4 85 F1 | 	sub	objptr, ##36476
16860     48 6F BF FD | 	call	#_pop
16864     FF 26 02 F6 | 	mov	local01, result3
16868     A7 FA 61 FC | 	wrlong	result1, fp
1686c     04 4E 05 F1 | 	add	fp, #4
16870     A7 FC 61 FC | 	wrlong	result2, fp
16874     04 4E 05 F1 | 	add	fp, #4
16878     A7 26 62 FC | 	wrlong	local01, fp
1687c     08 4E 85 F1 | 	sub	fp, #8
16880     A7 12 02 F6 | 	mov	arg01, fp
16884     08 71 BF FD | 	call	#_converttoint
16888     10 4E 05 F1 | 	add	fp, #16
1688c     A7 FA 61 FC | 	wrlong	result1, fp
16890                 | ' 
16890                 | ' numpar=compiledline(lineptr_e).result.uresult
16890                 | ' skip=compiledline(lineptr_e).result.twowords(1)
16890                 | ' t1=pop()
16890                 | ' t=converttoint(t1)
16890                 | ' if t<1 orelse t>numpar then return
16890     10 4E 85 F1 | 	sub	fp, #16
16894     01 FA 55 F2 | 	cmps	result1, #1 wc
16898     58 00 90 CD |  if_b	jmp	#LR__1820
1689c     10 4E 05 F1 | 	add	fp, #16
168a0     A7 26 02 FB | 	rdlong	local01, fp
168a4     04 4E 05 F1 | 	add	fp, #4
168a8     A7 12 02 FB | 	rdlong	arg01, fp
168ac     14 4E 85 F1 | 	sub	fp, #20
168b0     09 27 5A F2 | 	cmps	local01, arg01 wcz
168b4     3C 00 90 1D |  if_a	jmp	#LR__1820
168b8     10 4E 05 F1 | 	add	fp, #16
168bc     A7 26 02 FB | 	rdlong	local01, fp
168c0     01 26 86 F1 | 	sub	local01, #1
168c4     04 4E 85 F1 | 	sub	fp, #4
168c8     A7 12 02 FB | 	rdlong	arg01, fp
168cc     13 13 02 FD | 	qmul	arg01, local01
168d0     4A 00 00 FF 
168d4     80 E4 05 F1 | 	add	objptr, ##38016
168d8     F2 26 02 FB | 	rdlong	local01, objptr
168dc     0C 4E 85 F1 | 	sub	fp, #12
168e0     18 12 62 FD | 	getqx	arg01
168e4     09 27 02 F1 | 	add	local01, arg01
168e8     F2 26 62 FC | 	wrlong	local01, objptr
168ec     4A 00 00 FF 
168f0     80 E4 85 F1 | 	sub	objptr, ##38016
168f4                 | LR__1820
168f4     A7 F0 03 F6 | 	mov	ptra, fp
168f8     B2 00 A0 FD | 	call	#popregs_
168fc                 | _do_on_ret
168fc     2D 00 64 FD | 	ret
16900                 | 
16900                 | ' 
16900                 | ' '-------------------- open
16900                 | ' 
16900                 | ' sub do_open
16900                 | _do_open
16900     02 4A 05 F6 | 	mov	COUNT_, #2
16904     A8 00 A0 FD | 	call	#pushregs_
16908     20 F0 07 F1 | 	add	ptra, #32
1690c     4A 00 00 FF 
16910     80 E4 05 F1 | 	add	objptr, ##38016
16914     F2 16 02 FB | 	rdlong	arg03, objptr
16918     0B 15 02 F6 | 	mov	arg02, arg03
1691c     01 14 66 F0 | 	shl	arg02, #1
16920     0B 15 02 F1 | 	add	arg02, arg03
16924     02 14 66 F0 | 	shl	arg02, #2
16928     03 00 00 FF 
1692c     04 E4 85 F1 | 	sub	objptr, ##1540
16930     F2 14 02 F1 | 	add	arg02, objptr
16934     0A 17 02 FB | 	rdlong	arg03, arg02
16938     10 4E 05 F1 | 	add	fp, #16
1693c     A7 16 62 FC | 	wrlong	arg03, fp
16940     10 4E 85 F1 | 	sub	fp, #16
16944     47 00 00 FF 
16948     7C E4 85 F1 | 	sub	objptr, ##36476
1694c     5C 6E BF FD | 	call	#_pop
16950     FF 16 02 F6 | 	mov	arg03, result3
16954     A7 FA 61 FC | 	wrlong	result1, fp
16958     04 4E 05 F1 | 	add	fp, #4
1695c     A7 FC 61 FC | 	wrlong	result2, fp
16960     04 4E 05 F1 | 	add	fp, #4
16964     A7 16 62 FC | 	wrlong	arg03, fp
16968                 | ' 
16968                 | ' numpar=compiledline(lineptr_e).result.uresult
16968                 | ' 
16968                 | ' t1=pop()
16968                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16968     08 4E 85 F1 | 	sub	fp, #8
1696c     2B 16 0E F2 | 	cmp	arg03, #43 wz
16970     18 00 90 5D |  if_ne	jmp	#LR__1830
16974     A7 12 02 FB | 	rdlong	arg01, fp
16978     A8 6F BF FD | 	call	#_convertstring
1697c     A7 FA 61 FC | 	wrlong	result1, fp
16980     08 4E 05 F1 | 	add	fp, #8
16984     A7 3E 68 FC | 	wrlong	#31, fp
16988     08 4E 85 F1 | 	sub	fp, #8
1698c                 | LR__1830
1698c                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
1698c     08 4E 05 F1 | 	add	fp, #8
16990     A7 16 02 FB | 	rdlong	arg03, fp
16994     08 4E 85 F1 | 	sub	fp, #8
16998     1F 16 0E F2 | 	cmp	arg03, #31 wz
1699c     44 00 90 AD |  if_e	jmp	#LR__1831
169a0     00 12 06 F6 | 	mov	arg01, #0
169a4     B4 67 B1 FD | 	call	#__system___getiolock_0616
169a8     FD 12 02 F6 | 	mov	arg01, result1
169ac     08 0B B1 FD | 	call	#__system___lockmem
169b0     BD 01 00 FF 
169b4     C2 14 06 F6 | 	mov	arg02, ##@LR__6004
169b8     00 12 06 F6 | 	mov	arg01, #0
169bc     00 16 06 F6 | 	mov	arg03, #0
169c0     EC 17 B1 FD | 	call	#__system___basic_print_string
169c4     00 12 06 F6 | 	mov	arg01, #0
169c8     0A 14 06 F6 | 	mov	arg02, #10
169cc     00 16 06 F6 | 	mov	arg03, #0
169d0     84 17 B1 FD | 	call	#__system___basic_print_char
169d4     00 12 06 F6 | 	mov	arg01, #0
169d8     80 67 B1 FD | 	call	#__system___getiolock_0616
169dc     FD 00 68 FC | 	wrlong	#0, result1
169e0     28 02 90 FD | 	jmp	#LR__1842
169e4                 | LR__1831
169e4     A7 16 02 FB | 	rdlong	arg03, fp
169e8     0C 4E 05 F1 | 	add	fp, #12
169ec     A7 16 62 FC | 	wrlong	arg03, fp
169f0     0C 4E 85 F1 | 	sub	fp, #12
169f4     B4 6D BF FD | 	call	#_pop
169f8     FF 16 02 F6 | 	mov	arg03, result3
169fc     A7 FA 61 FC | 	wrlong	result1, fp
16a00     04 4E 05 F1 | 	add	fp, #4
16a04     A7 FC 61 FC | 	wrlong	result2, fp
16a08     04 4E 05 F1 | 	add	fp, #4
16a0c     A7 16 62 FC | 	wrlong	arg03, fp
16a10                 | ' filename=t1.result.sresult
16a10                 | ' t1=pop()
16a10                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16a10     08 4E 85 F1 | 	sub	fp, #8
16a14     2B 16 0E F2 | 	cmp	arg03, #43 wz
16a18     18 00 90 5D |  if_ne	jmp	#LR__1832
16a1c     A7 12 02 FB | 	rdlong	arg01, fp
16a20     00 6F BF FD | 	call	#_convertstring
16a24     A7 FA 61 FC | 	wrlong	result1, fp
16a28     08 4E 05 F1 | 	add	fp, #8
16a2c     A7 3E 68 FC | 	wrlong	#31, fp
16a30     08 4E 85 F1 | 	sub	fp, #8
16a34                 | LR__1832
16a34     14 4E 05 F1 | 	add	fp, #20
16a38     A7 00 68 FC | 	wrlong	#0, fp
16a3c                 | ' mode=0
16a3c                 | ' if t1.result_type=result_string then
16a3c     0C 4E 85 F1 | 	sub	fp, #12
16a40     A7 14 02 FB | 	rdlong	arg02, fp
16a44     08 4E 85 F1 | 	sub	fp, #8
16a48     1F 14 0E F2 | 	cmp	arg02, #31 wz
16a4c     64 00 90 5D |  if_ne	jmp	#LR__1833
16a50                 | '   if t1.result.sresult="read" then mode=1
16a50     A7 12 02 FB | 	rdlong	arg01, fp
16a54     BD 01 00 FF 
16a58     D4 14 06 F6 | 	mov	arg02, ##@LR__6005
16a5c     80 0A B1 FD | 	call	#__system___string_cmp
16a60     00 FA 0D F2 | 	cmp	result1, #0 wz
16a64     14 4E 05 A1 |  if_e	add	fp, #20
16a68     A7 02 68 AC |  if_e	wrlong	#1, fp
16a6c     14 4E 85 A1 |  if_e	sub	fp, #20
16a70                 | '   if t1.result.sresult="write" then mode=2
16a70     A7 12 02 FB | 	rdlong	arg01, fp
16a74     BD 01 00 FF 
16a78     D9 14 06 F6 | 	mov	arg02, ##@LR__6006
16a7c     60 0A B1 FD | 	call	#__system___string_cmp
16a80     00 FA 0D F2 | 	cmp	result1, #0 wz
16a84     14 4E 05 A1 |  if_e	add	fp, #20
16a88     A7 04 68 AC |  if_e	wrlong	#2, fp
16a8c     14 4E 85 A1 |  if_e	sub	fp, #20
16a90                 | '   if t1.result.sresult="append" then mode=4
16a90     A7 12 02 FB | 	rdlong	arg01, fp
16a94     BD 01 00 FF 
16a98     DF 14 06 F6 | 	mov	arg02, ##@LR__6007
16a9c     40 0A B1 FD | 	call	#__system___string_cmp
16aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
16aa4     14 4E 05 A1 |  if_e	add	fp, #20
16aa8     A7 08 68 AC |  if_e	wrlong	#4, fp
16aac     14 4E 85 A1 |  if_e	sub	fp, #20
16ab0     14 00 90 FD | 	jmp	#LR__1834
16ab4                 | LR__1833
16ab4     A7 12 02 F6 | 	mov	arg01, fp
16ab8     D4 6E BF FD | 	call	#_converttoint
16abc     14 4E 05 F1 | 	add	fp, #20
16ac0     A7 FA 61 FC | 	wrlong	result1, fp
16ac4     14 4E 85 F1 | 	sub	fp, #20
16ac8                 | LR__1834
16ac8     E0 6C BF FD | 	call	#_pop
16acc     FF 16 02 F6 | 	mov	arg03, result3
16ad0     A7 FA 61 FC | 	wrlong	result1, fp
16ad4     04 4E 05 F1 | 	add	fp, #4
16ad8     A7 FC 61 FC | 	wrlong	result2, fp
16adc     04 4E 05 F1 | 	add	fp, #4
16ae0     A7 16 62 FC | 	wrlong	arg03, fp
16ae4                 | ' t1=pop()
16ae4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
16ae4     08 4E 85 F1 | 	sub	fp, #8
16ae8     2C 16 0E F2 | 	cmp	arg03, #44 wz
16aec     44 00 90 AD |  if_e	jmp	#LR__1835
16af0     00 12 06 F6 | 	mov	arg01, #0
16af4     64 66 B1 FD | 	call	#__system___getiolock_0616
16af8     FD 12 02 F6 | 	mov	arg01, result1
16afc     B8 09 B1 FD | 	call	#__system___lockmem
16b00     BD 01 00 FF 
16b04     E6 14 06 F6 | 	mov	arg02, ##@LR__6008
16b08     00 12 06 F6 | 	mov	arg01, #0
16b0c     00 16 06 F6 | 	mov	arg03, #0
16b10     9C 16 B1 FD | 	call	#__system___basic_print_string
16b14     00 12 06 F6 | 	mov	arg01, #0
16b18     0A 14 06 F6 | 	mov	arg02, #10
16b1c     00 16 06 F6 | 	mov	arg03, #0
16b20     34 16 B1 FD | 	call	#__system___basic_print_char
16b24     00 12 06 F6 | 	mov	arg01, #0
16b28     30 66 B1 FD | 	call	#__system___getiolock_0616
16b2c     FD 00 68 FC | 	wrlong	#0, result1
16b30     D8 00 90 FD | 	jmp	#LR__1842
16b34                 | LR__1835
16b34     A7 26 02 FB | 	rdlong	local01, fp
16b38     18 4E 05 F1 | 	add	fp, #24
16b3c     A7 26 62 FC | 	wrlong	local01, fp
16b40                 | ' channel  = t1.result.iresult
16b40                 | ' select case  mode
16b40     04 4E 85 F1 | 	sub	fp, #4
16b44     A7 28 02 FB | 	rdlong	local02, fp
16b48     14 4E 85 F1 | 	sub	fp, #20
16b4c     01 28 86 F1 | 	sub	local02, #1
16b50     04 28 26 F3 | 	fle	local02, #4
16b54     30 28 62 FD | 	jmprel	local02
16b58                 | LR__1836
16b58     10 00 90 FD | 	jmp	#LR__1837
16b5c     2C 00 90 FD | 	jmp	#LR__1838
16b60     68 00 90 FD | 	jmp	#LR__1840
16b64     44 00 90 FD | 	jmp	#LR__1839
16b68     60 00 90 FD | 	jmp	#LR__1840
16b6c                 | LR__1837
16b6c     18 4E 05 F1 | 	add	fp, #24
16b70     A7 12 02 FB | 	rdlong	arg01, fp
16b74     0C 4E 85 F1 | 	sub	fp, #12
16b78     A7 14 02 FB | 	rdlong	arg02, fp
16b7c     0C 4E 85 F1 | 	sub	fp, #12
16b80     00 16 06 F6 | 	mov	arg03, #0
16b84     34 15 B1 FD | 	call	#__system___basic_open_string
16b88     80 00 90 FD | 	jmp	#LR__1841
16b8c                 | LR__1838
16b8c     18 4E 05 F1 | 	add	fp, #24
16b90     A7 12 02 FB | 	rdlong	arg01, fp
16b94     0C 4E 85 F1 | 	sub	fp, #12
16b98     A7 14 02 FB | 	rdlong	arg02, fp
16b9c     0C 4E 85 F1 | 	sub	fp, #12
16ba0     0D 16 06 F6 | 	mov	arg03, #13
16ba4     14 15 B1 FD | 	call	#__system___basic_open_string
16ba8     60 00 90 FD | 	jmp	#LR__1841
16bac                 | LR__1839
16bac     18 4E 05 F1 | 	add	fp, #24
16bb0     A7 12 02 FB | 	rdlong	arg01, fp
16bb4     0C 4E 85 F1 | 	sub	fp, #12
16bb8     A7 14 02 FB | 	rdlong	arg02, fp
16bbc     0C 4E 85 F1 | 	sub	fp, #12
16bc0     25 16 06 F6 | 	mov	arg03, #37
16bc4     F4 14 B1 FD | 	call	#__system___basic_open_string
16bc8     40 00 90 FD | 	jmp	#LR__1841
16bcc                 | LR__1840
16bcc     00 12 06 F6 | 	mov	arg01, #0
16bd0     88 65 B1 FD | 	call	#__system___getiolock_0616
16bd4     FD 12 02 F6 | 	mov	arg01, result1
16bd8     DC 08 B1 FD | 	call	#__system___lockmem
16bdc     BD 01 00 FF 
16be0     F8 14 06 F6 | 	mov	arg02, ##@LR__6009
16be4     00 12 06 F6 | 	mov	arg01, #0
16be8     00 16 06 F6 | 	mov	arg03, #0
16bec     C0 15 B1 FD | 	call	#__system___basic_print_string
16bf0     00 12 06 F6 | 	mov	arg01, #0
16bf4     0A 14 06 F6 | 	mov	arg02, #10
16bf8     00 16 06 F6 | 	mov	arg03, #0
16bfc     58 15 B1 FD | 	call	#__system___basic_print_char
16c00     00 12 06 F6 | 	mov	arg01, #0
16c04     54 65 B1 FD | 	call	#__system___getiolock_0616
16c08     FD 00 68 FC | 	wrlong	#0, result1
16c0c                 | LR__1841
16c0c                 | LR__1842
16c0c     A7 F0 03 F6 | 	mov	ptra, fp
16c10     B2 00 A0 FD | 	call	#popregs_
16c14                 | _do_open_ret
16c14     2D 00 64 FD | 	ret
16c18                 | 
16c18                 | ' 
16c18                 | ' ' ------------------ padrx
16c18                 | ' 
16c18                 | ' sub do_padrx
16c18                 | _do_padrx
16c18     02 4A 05 F6 | 	mov	COUNT_, #2
16c1c     A8 00 A0 FD | 	call	#pushregs_
16c20     14 F0 07 F1 | 	add	ptra, #20
16c24     4A 00 00 FF 
16c28     80 E4 05 F1 | 	add	objptr, ##38016
16c2c     F2 26 02 FB | 	rdlong	local01, objptr
16c30     13 17 02 F6 | 	mov	arg03, local01
16c34     01 16 66 F0 | 	shl	arg03, #1
16c38     13 17 02 F1 | 	add	arg03, local01
16c3c     02 16 66 F0 | 	shl	arg03, #2
16c40     03 00 00 FF 
16c44     04 E4 85 F1 | 	sub	objptr, ##1540
16c48     F2 16 02 F1 | 	add	arg03, objptr
16c4c     0B 17 02 FB | 	rdlong	arg03, arg03
16c50     0C 4E 05 F1 | 	add	fp, #12
16c54     A7 16 62 FC | 	wrlong	arg03, fp
16c58                 | ' 
16c58                 | ' numpar=compiledline(lineptr_e).result.uresult
16c58                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
16c58     0C 4E 85 F1 | 	sub	fp, #12
16c5c     02 16 16 F2 | 	cmp	arg03, #2 wc
16c60     47 00 00 FF 
16c64     7C E4 85 F1 | 	sub	objptr, ##36476
16c68     40 00 90 CD |  if_b	jmp	#LR__1850
16c6c     00 12 06 F6 | 	mov	arg01, #0
16c70     E8 64 B1 FD | 	call	#__system___getiolock_0616
16c74     FD 12 02 F6 | 	mov	arg01, result1
16c78     3C 08 B1 FD | 	call	#__system___lockmem
16c7c     BD 01 00 FF 
16c80     0B 15 06 F6 | 	mov	arg02, ##@LR__6010
16c84     00 12 06 F6 | 	mov	arg01, #0
16c88     00 16 06 F6 | 	mov	arg03, #0
16c8c     20 15 B1 FD | 	call	#__system___basic_print_string
16c90     00 12 06 F6 | 	mov	arg01, #0
16c94     C4 64 B1 FD | 	call	#__system___getiolock_0616
16c98     FD 00 68 FC | 	wrlong	#0, result1
16c9c     27 12 06 F6 | 	mov	arg01, #39
16ca0     00 14 06 F6 | 	mov	arg02, #0
16ca4     F8 CD B0 FD | 	call	#_printerror
16ca8     E0 01 90 FD | 	jmp	#LR__1854
16cac                 | LR__1850
16cac                 | ' if numpar=0 then 
16cac     0C 4E 05 F1 | 	add	fp, #12
16cb0     A7 FE 09 FB | 	rdlong	result3, fp wz
16cb4     0C 4E 85 F1 | 	sub	fp, #12
16cb8     A8 00 90 5D |  if_ne	jmp	#LR__1851
16cbc     00 C0 1B FF 
16cc0     00 26 06 F6 | 	mov	local01, ##931135488
16cc4     51 00 00 FF 
16cc8     C8 E5 05 F1 | 	add	objptr, ##41928
16ccc     F2 12 02 FB | 	rdlong	arg01, objptr
16cd0     51 00 00 FF 
16cd4     C8 E5 85 F1 | 	sub	objptr, ##41928
16cd8     09 13 52 F6 | 	abs	arg01, arg01 wc
16cdc     1F 28 C6 C9 |  if_b	decod	local02, #31
16ce0     00 28 06 36 |  if_ae	mov	local02, #0
16ce4     48 32 B1 FD | 	call	#__system___float_fromuns
16ce8     14 FB 61 F5 | 	xor	result1, local02
16cec     FD 12 02 F6 | 	mov	arg01, result1
16cf0     FF 7F 23 FF 
16cf4     00 14 06 F6 | 	mov	arg02, ##1191181824
16cf8     3C 38 B1 FD | 	call	#__system___float_div
16cfc     FD 14 02 F6 | 	mov	arg02, result1
16d00     13 13 02 F6 | 	mov	arg01, local01
16d04     5C 32 B1 FD | 	call	#__system___float_add
16d08     10 4E 05 F1 | 	add	fp, #16
16d0c     A7 FA 61 FC | 	wrlong	result1, fp
16d10                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16d10     10 4E 85 F1 | 	sub	fp, #16
16d14     1F FA 05 F4 | 	bitl	result1, #31
16d18     FD 12 02 F6 | 	mov	arg01, result1
16d1c     89 41 1D FF 
16d20     6F 14 06 F6 | 	mov	arg02, ##981668463
16d24     01 16 06 F6 | 	mov	arg03, #1
16d28     3C 3A B1 FD | 	call	#__system___float_cmp
16d2c     00 FA 55 F2 | 	cmps	result1, #0 wc
16d30     10 4E 05 C1 |  if_b	add	fp, #16
16d34     A7 00 68 CC |  if_b	wrlong	#0, fp
16d38     10 4E 85 C1 |  if_b	sub	fp, #16
16d3c     10 4E 05 F1 | 	add	fp, #16
16d40     A7 26 02 FB | 	rdlong	local01, fp
16d44     10 4E 85 F1 | 	sub	fp, #16
16d48     A7 26 62 FC | 	wrlong	local01, fp
16d4c     08 4E 05 F1 | 	add	fp, #8
16d50     A7 3C 68 FC | 	wrlong	#30, fp
16d54     08 4E 85 F1 | 	sub	fp, #8
16d58     A7 12 02 F6 | 	mov	arg01, fp
16d5c     E4 6A BF FD | 	call	#_push
16d60                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16d60     28 01 90 FD | 	jmp	#LR__1854
16d64                 | LR__1851
16d64     44 6A BF FD | 	call	#_pop
16d68     A7 FA 61 FC | 	wrlong	result1, fp
16d6c     04 4E 05 F1 | 	add	fp, #4
16d70     A7 FC 61 FC | 	wrlong	result2, fp
16d74     04 4E 05 F1 | 	add	fp, #4
16d78     A7 FE 61 FC | 	wrlong	result3, fp
16d7c                 | ' t1=pop()
16d7c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16d7c     08 4E 85 F1 | 	sub	fp, #8
16d80     1C FE 0D F2 | 	cmp	result3, #28 wz
16d84     08 4E 05 51 |  if_ne	add	fp, #8
16d88     A7 26 02 5B |  if_ne	rdlong	local01, fp
16d8c     08 4E 85 51 |  if_ne	sub	fp, #8
16d90     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16d94     E8 00 90 5D |  if_ne	jmp	#LR__1853
16d98     A7 26 02 FB | 	rdlong	local01, fp
16d9c     52 00 00 FF 
16da0     44 E5 05 F1 | 	add	objptr, ##42308
16da4     F2 26 62 FC | 	wrlong	local01, objptr
16da8                 | '   q=t1.result.uresult
16da8                 | '   if q<7 then 
16da8     52 00 00 FF 
16dac     44 E5 85 F1 | 	sub	objptr, ##42308
16db0     07 26 56 F2 | 	cmps	local01, #7 wc
16db4     B8 00 90 3D |  if_ae	jmp	#LR__1852
16db8     00 C0 1B FF 
16dbc     00 26 06 F6 | 	mov	local01, ##931135488
16dc0     52 00 00 FF 
16dc4     44 E5 05 F1 | 	add	objptr, ##42308
16dc8     F2 16 02 FB | 	rdlong	arg03, objptr
16dcc     02 16 66 F0 | 	shl	arg03, #2
16dd0     7C E5 85 F1 | 	sub	objptr, #380
16dd4     F2 16 02 F1 | 	add	arg03, objptr
16dd8     0B 13 02 FB | 	rdlong	arg01, arg03
16ddc     51 00 00 FF 
16de0     C8 E5 85 F1 | 	sub	objptr, ##41928
16de4     09 13 52 F6 | 	abs	arg01, arg01 wc
16de8     1F 28 C6 C9 |  if_b	decod	local02, #31
16dec     00 28 06 36 |  if_ae	mov	local02, #0
16df0     3C 31 B1 FD | 	call	#__system___float_fromuns
16df4     14 FB 61 F5 | 	xor	result1, local02
16df8     FD 12 02 F6 | 	mov	arg01, result1
16dfc     FF 7F 23 FF 
16e00     00 14 06 F6 | 	mov	arg02, ##1191181824
16e04     30 37 B1 FD | 	call	#__system___float_div
16e08     FD 14 02 F6 | 	mov	arg02, result1
16e0c     13 13 02 F6 | 	mov	arg01, local01
16e10     50 31 B1 FD | 	call	#__system___float_add
16e14     10 4E 05 F1 | 	add	fp, #16
16e18     A7 FA 61 FC | 	wrlong	result1, fp
16e1c                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e1c     10 4E 85 F1 | 	sub	fp, #16
16e20     1F FA 05 F4 | 	bitl	result1, #31
16e24     FD 12 02 F6 | 	mov	arg01, result1
16e28     89 41 1D FF 
16e2c     6F 14 06 F6 | 	mov	arg02, ##981668463
16e30     01 16 06 F6 | 	mov	arg03, #1
16e34     30 39 B1 FD | 	call	#__system___float_cmp
16e38     00 FA 55 F2 | 	cmps	result1, #0 wc
16e3c     10 4E 05 C1 |  if_b	add	fp, #16
16e40     A7 00 68 CC |  if_b	wrlong	#0, fp
16e44     10 4E 85 C1 |  if_b	sub	fp, #16
16e48     10 4E 05 F1 | 	add	fp, #16
16e4c     A7 26 02 FB | 	rdlong	local01, fp
16e50     10 4E 85 F1 | 	sub	fp, #16
16e54     A7 26 62 FC | 	wrlong	local01, fp
16e58     08 4E 05 F1 | 	add	fp, #8
16e5c     A7 3C 68 FC | 	wrlong	#30, fp
16e60     08 4E 85 F1 | 	sub	fp, #8
16e64     A7 12 02 F6 | 	mov	arg01, fp
16e68     D8 69 BF FD | 	call	#_push
16e6c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16e6c     1C 00 90 FD | 	jmp	#LR__1854
16e70                 | LR__1852
16e70     29 12 06 F6 | 	mov	arg01, #41
16e74     00 14 06 F6 | 	mov	arg02, #0
16e78     24 CC B0 FD | 	call	#_printerror
16e7c                 | '      printerror(41) : return
16e7c     0C 00 90 FD | 	jmp	#LR__1854
16e80                 | LR__1853
16e80     29 12 06 F6 | 	mov	arg01, #41
16e84     00 14 06 F6 | 	mov	arg02, #0
16e88     14 CC B0 FD | 	call	#_printerror
16e8c                 | LR__1854
16e8c     A7 F0 03 F6 | 	mov	ptra, fp
16e90     B2 00 A0 FD | 	call	#popregs_
16e94                 | _do_padrx_ret
16e94     2D 00 64 FD | 	ret
16e98                 | 
16e98                 | ' 
16e98                 | ' ' ------------------ padry
16e98                 | ' 
16e98                 | ' sub do_padry
16e98                 | _do_padry
16e98     02 4A 05 F6 | 	mov	COUNT_, #2
16e9c     A8 00 A0 FD | 	call	#pushregs_
16ea0     14 F0 07 F1 | 	add	ptra, #20
16ea4     4A 00 00 FF 
16ea8     80 E4 05 F1 | 	add	objptr, ##38016
16eac     F2 26 02 FB | 	rdlong	local01, objptr
16eb0     13 17 02 F6 | 	mov	arg03, local01
16eb4     01 16 66 F0 | 	shl	arg03, #1
16eb8     13 17 02 F1 | 	add	arg03, local01
16ebc     02 16 66 F0 | 	shl	arg03, #2
16ec0     03 00 00 FF 
16ec4     04 E4 85 F1 | 	sub	objptr, ##1540
16ec8     F2 16 02 F1 | 	add	arg03, objptr
16ecc     0B 17 02 FB | 	rdlong	arg03, arg03
16ed0     0C 4E 05 F1 | 	add	fp, #12
16ed4     A7 16 62 FC | 	wrlong	arg03, fp
16ed8                 | ' 
16ed8                 | ' numpar=compiledline(lineptr_e).result.uresult
16ed8                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16ed8     0C 4E 85 F1 | 	sub	fp, #12
16edc     02 16 16 F2 | 	cmp	arg03, #2 wc
16ee0     47 00 00 FF 
16ee4     7C E4 85 F1 | 	sub	objptr, ##36476
16ee8     40 00 90 CD |  if_b	jmp	#LR__1860
16eec     00 12 06 F6 | 	mov	arg01, #0
16ef0     68 62 B1 FD | 	call	#__system___getiolock_0616
16ef4     FD 12 02 F6 | 	mov	arg01, result1
16ef8     BC 05 B1 FD | 	call	#__system___lockmem
16efc     BD 01 00 FF 
16f00     13 15 06 F6 | 	mov	arg02, ##@LR__6011
16f04     00 12 06 F6 | 	mov	arg01, #0
16f08     00 16 06 F6 | 	mov	arg03, #0
16f0c     A0 12 B1 FD | 	call	#__system___basic_print_string
16f10     00 12 06 F6 | 	mov	arg01, #0
16f14     44 62 B1 FD | 	call	#__system___getiolock_0616
16f18     FD 00 68 FC | 	wrlong	#0, result1
16f1c     27 12 06 F6 | 	mov	arg01, #39
16f20     00 14 06 F6 | 	mov	arg02, #0
16f24     78 CB B0 FD | 	call	#_printerror
16f28     E0 01 90 FD | 	jmp	#LR__1864
16f2c                 | LR__1860
16f2c                 | ' if numpar=0 then 
16f2c     0C 4E 05 F1 | 	add	fp, #12
16f30     A7 FE 09 FB | 	rdlong	result3, fp wz
16f34     0C 4E 85 F1 | 	sub	fp, #12
16f38     A8 00 90 5D |  if_ne	jmp	#LR__1861
16f3c     00 C0 1B FF 
16f40     00 26 06 F6 | 	mov	local01, ##931135488
16f44     51 00 00 FF 
16f48     E4 E5 05 F1 | 	add	objptr, ##41956
16f4c     F2 12 02 FB | 	rdlong	arg01, objptr
16f50     51 00 00 FF 
16f54     E4 E5 85 F1 | 	sub	objptr, ##41956
16f58     09 13 52 F6 | 	abs	arg01, arg01 wc
16f5c     1F 28 C6 C9 |  if_b	decod	local02, #31
16f60     00 28 06 36 |  if_ae	mov	local02, #0
16f64     C8 2F B1 FD | 	call	#__system___float_fromuns
16f68     14 FB 61 F5 | 	xor	result1, local02
16f6c     FD 12 02 F6 | 	mov	arg01, result1
16f70     FF 7F 23 FF 
16f74     00 14 06 F6 | 	mov	arg02, ##1191181824
16f78     BC 35 B1 FD | 	call	#__system___float_div
16f7c     FD 14 02 F6 | 	mov	arg02, result1
16f80     13 13 02 F6 | 	mov	arg01, local01
16f84     DC 2F B1 FD | 	call	#__system___float_add
16f88     10 4E 05 F1 | 	add	fp, #16
16f8c     A7 FA 61 FC | 	wrlong	result1, fp
16f90                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f90     10 4E 85 F1 | 	sub	fp, #16
16f94     1F FA 05 F4 | 	bitl	result1, #31
16f98     FD 12 02 F6 | 	mov	arg01, result1
16f9c     89 41 1D FF 
16fa0     6F 14 06 F6 | 	mov	arg02, ##981668463
16fa4     01 16 06 F6 | 	mov	arg03, #1
16fa8     BC 37 B1 FD | 	call	#__system___float_cmp
16fac     00 FA 55 F2 | 	cmps	result1, #0 wc
16fb0     10 4E 05 C1 |  if_b	add	fp, #16
16fb4     A7 00 68 CC |  if_b	wrlong	#0, fp
16fb8     10 4E 85 C1 |  if_b	sub	fp, #16
16fbc     10 4E 05 F1 | 	add	fp, #16
16fc0     A7 26 02 FB | 	rdlong	local01, fp
16fc4     10 4E 85 F1 | 	sub	fp, #16
16fc8     A7 26 62 FC | 	wrlong	local01, fp
16fcc     08 4E 05 F1 | 	add	fp, #8
16fd0     A7 3C 68 FC | 	wrlong	#30, fp
16fd4     08 4E 85 F1 | 	sub	fp, #8
16fd8     A7 12 02 F6 | 	mov	arg01, fp
16fdc     64 68 BF FD | 	call	#_push
16fe0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16fe0     28 01 90 FD | 	jmp	#LR__1864
16fe4                 | LR__1861
16fe4     C4 67 BF FD | 	call	#_pop
16fe8     A7 FA 61 FC | 	wrlong	result1, fp
16fec     04 4E 05 F1 | 	add	fp, #4
16ff0     A7 FC 61 FC | 	wrlong	result2, fp
16ff4     04 4E 05 F1 | 	add	fp, #4
16ff8     A7 FE 61 FC | 	wrlong	result3, fp
16ffc                 | ' t1=pop()
16ffc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16ffc     08 4E 85 F1 | 	sub	fp, #8
17000     1C FE 0D F2 | 	cmp	result3, #28 wz
17004     08 4E 05 51 |  if_ne	add	fp, #8
17008     A7 26 02 5B |  if_ne	rdlong	local01, fp
1700c     08 4E 85 51 |  if_ne	sub	fp, #8
17010     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17014     E8 00 90 5D |  if_ne	jmp	#LR__1863
17018     A7 26 02 FB | 	rdlong	local01, fp
1701c     52 00 00 FF 
17020     44 E5 05 F1 | 	add	objptr, ##42308
17024     F2 26 62 FC | 	wrlong	local01, objptr
17028                 | '   q=t1.result.uresult
17028                 | '   if q<7 then 
17028     52 00 00 FF 
1702c     44 E5 85 F1 | 	sub	objptr, ##42308
17030     07 26 56 F2 | 	cmps	local01, #7 wc
17034     B8 00 90 3D |  if_ae	jmp	#LR__1862
17038     00 C0 1B FF 
1703c     00 26 06 F6 | 	mov	local01, ##931135488
17040     52 00 00 FF 
17044     44 E5 05 F1 | 	add	objptr, ##42308
17048     F2 16 02 FB | 	rdlong	arg03, objptr
1704c     02 16 66 F0 | 	shl	arg03, #2
17050     60 E5 85 F1 | 	sub	objptr, #352
17054     F2 16 02 F1 | 	add	arg03, objptr
17058     0B 13 02 FB | 	rdlong	arg01, arg03
1705c     51 00 00 FF 
17060     E4 E5 85 F1 | 	sub	objptr, ##41956
17064     09 13 52 F6 | 	abs	arg01, arg01 wc
17068     1F 28 C6 C9 |  if_b	decod	local02, #31
1706c     00 28 06 36 |  if_ae	mov	local02, #0
17070     BC 2E B1 FD | 	call	#__system___float_fromuns
17074     14 FB 61 F5 | 	xor	result1, local02
17078     FD 12 02 F6 | 	mov	arg01, result1
1707c     FF 7F 23 FF 
17080     00 14 06 F6 | 	mov	arg02, ##1191181824
17084     B0 34 B1 FD | 	call	#__system___float_div
17088     FD 14 02 F6 | 	mov	arg02, result1
1708c     13 13 02 F6 | 	mov	arg01, local01
17090     D0 2E B1 FD | 	call	#__system___float_add
17094     10 4E 05 F1 | 	add	fp, #16
17098     A7 FA 61 FC | 	wrlong	result1, fp
1709c                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1709c     10 4E 85 F1 | 	sub	fp, #16
170a0     1F FA 05 F4 | 	bitl	result1, #31
170a4     FD 12 02 F6 | 	mov	arg01, result1
170a8     89 41 1D FF 
170ac     6F 14 06 F6 | 	mov	arg02, ##981668463
170b0     01 16 06 F6 | 	mov	arg03, #1
170b4     B0 36 B1 FD | 	call	#__system___float_cmp
170b8     00 FA 55 F2 | 	cmps	result1, #0 wc
170bc     10 4E 05 C1 |  if_b	add	fp, #16
170c0     A7 00 68 CC |  if_b	wrlong	#0, fp
170c4     10 4E 85 C1 |  if_b	sub	fp, #16
170c8     10 4E 05 F1 | 	add	fp, #16
170cc     A7 26 02 FB | 	rdlong	local01, fp
170d0     10 4E 85 F1 | 	sub	fp, #16
170d4     A7 26 62 FC | 	wrlong	local01, fp
170d8     08 4E 05 F1 | 	add	fp, #8
170dc     A7 3C 68 FC | 	wrlong	#30, fp
170e0     08 4E 85 F1 | 	sub	fp, #8
170e4     A7 12 02 F6 | 	mov	arg01, fp
170e8     58 67 BF FD | 	call	#_push
170ec                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
170ec     1C 00 90 FD | 	jmp	#LR__1864
170f0                 | LR__1862
170f0     29 12 06 F6 | 	mov	arg01, #41
170f4     00 14 06 F6 | 	mov	arg02, #0
170f8     A4 C9 B0 FD | 	call	#_printerror
170fc                 | '      printerror(41) : return
170fc     0C 00 90 FD | 	jmp	#LR__1864
17100                 | LR__1863
17100     29 12 06 F6 | 	mov	arg01, #41
17104     00 14 06 F6 | 	mov	arg02, #0
17108     94 C9 B0 FD | 	call	#_printerror
1710c                 | LR__1864
1710c     A7 F0 03 F6 | 	mov	ptra, fp
17110     B2 00 A0 FD | 	call	#popregs_
17114                 | _do_padry_ret
17114     2D 00 64 FD | 	ret
17118                 | 
17118                 | ' 
17118                 | ' ' ------------------ padrz
17118                 | ' 
17118                 | ' sub do_padrz
17118                 | _do_padrz
17118     02 4A 05 F6 | 	mov	COUNT_, #2
1711c     A8 00 A0 FD | 	call	#pushregs_
17120     14 F0 07 F1 | 	add	ptra, #20
17124     4A 00 00 FF 
17128     80 E4 05 F1 | 	add	objptr, ##38016
1712c     F2 26 02 FB | 	rdlong	local01, objptr
17130     13 17 02 F6 | 	mov	arg03, local01
17134     01 16 66 F0 | 	shl	arg03, #1
17138     13 17 02 F1 | 	add	arg03, local01
1713c     02 16 66 F0 | 	shl	arg03, #2
17140     03 00 00 FF 
17144     04 E4 85 F1 | 	sub	objptr, ##1540
17148     F2 16 02 F1 | 	add	arg03, objptr
1714c     0B 17 02 FB | 	rdlong	arg03, arg03
17150     0C 4E 05 F1 | 	add	fp, #12
17154     A7 16 62 FC | 	wrlong	arg03, fp
17158                 | ' 
17158                 | ' numpar=compiledline(lineptr_e).result.uresult
17158                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
17158     0C 4E 85 F1 | 	sub	fp, #12
1715c     02 16 16 F2 | 	cmp	arg03, #2 wc
17160     47 00 00 FF 
17164     7C E4 85 F1 | 	sub	objptr, ##36476
17168     40 00 90 CD |  if_b	jmp	#LR__1870
1716c     00 12 06 F6 | 	mov	arg01, #0
17170     E8 5F B1 FD | 	call	#__system___getiolock_0616
17174     FD 12 02 F6 | 	mov	arg01, result1
17178     3C 03 B1 FD | 	call	#__system___lockmem
1717c     BD 01 00 FF 
17180     1B 15 06 F6 | 	mov	arg02, ##@LR__6012
17184     00 12 06 F6 | 	mov	arg01, #0
17188     00 16 06 F6 | 	mov	arg03, #0
1718c     20 10 B1 FD | 	call	#__system___basic_print_string
17190     00 12 06 F6 | 	mov	arg01, #0
17194     C4 5F B1 FD | 	call	#__system___getiolock_0616
17198     FD 00 68 FC | 	wrlong	#0, result1
1719c     27 12 06 F6 | 	mov	arg01, #39
171a0     00 14 06 F6 | 	mov	arg02, #0
171a4     F8 C8 B0 FD | 	call	#_printerror
171a8     E0 01 90 FD | 	jmp	#LR__1874
171ac                 | LR__1870
171ac                 | ' if numpar=0 then 
171ac     0C 4E 05 F1 | 	add	fp, #12
171b0     A7 FE 09 FB | 	rdlong	result3, fp wz
171b4     0C 4E 85 F1 | 	sub	fp, #12
171b8     A8 00 90 5D |  if_ne	jmp	#LR__1871
171bc     00 C0 1B FF 
171c0     00 26 06 F6 | 	mov	local01, ##931135488
171c4     52 00 00 FF 
171c8     00 E4 05 F1 | 	add	objptr, ##41984
171cc     F2 12 02 FB | 	rdlong	arg01, objptr
171d0     52 00 00 FF 
171d4     00 E4 85 F1 | 	sub	objptr, ##41984
171d8     09 13 52 F6 | 	abs	arg01, arg01 wc
171dc     1F 28 C6 C9 |  if_b	decod	local02, #31
171e0     00 28 06 36 |  if_ae	mov	local02, #0
171e4     48 2D B1 FD | 	call	#__system___float_fromuns
171e8     14 FB 61 F5 | 	xor	result1, local02
171ec     FD 12 02 F6 | 	mov	arg01, result1
171f0     FF 7F 23 FF 
171f4     00 14 06 F6 | 	mov	arg02, ##1191181824
171f8     3C 33 B1 FD | 	call	#__system___float_div
171fc     FD 14 02 F6 | 	mov	arg02, result1
17200     13 13 02 F6 | 	mov	arg01, local01
17204     5C 2D B1 FD | 	call	#__system___float_add
17208     10 4E 05 F1 | 	add	fp, #16
1720c     A7 FA 61 FC | 	wrlong	result1, fp
17210                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17210     10 4E 85 F1 | 	sub	fp, #16
17214     1F FA 05 F4 | 	bitl	result1, #31
17218     FD 12 02 F6 | 	mov	arg01, result1
1721c     89 41 1D FF 
17220     6F 14 06 F6 | 	mov	arg02, ##981668463
17224     01 16 06 F6 | 	mov	arg03, #1
17228     3C 35 B1 FD | 	call	#__system___float_cmp
1722c     00 FA 55 F2 | 	cmps	result1, #0 wc
17230     10 4E 05 C1 |  if_b	add	fp, #16
17234     A7 00 68 CC |  if_b	wrlong	#0, fp
17238     10 4E 85 C1 |  if_b	sub	fp, #16
1723c     10 4E 05 F1 | 	add	fp, #16
17240     A7 26 02 FB | 	rdlong	local01, fp
17244     10 4E 85 F1 | 	sub	fp, #16
17248     A7 26 62 FC | 	wrlong	local01, fp
1724c     08 4E 05 F1 | 	add	fp, #8
17250     A7 3C 68 FC | 	wrlong	#30, fp
17254     08 4E 85 F1 | 	sub	fp, #8
17258     A7 12 02 F6 | 	mov	arg01, fp
1725c     E4 65 BF FD | 	call	#_push
17260                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17260     28 01 90 FD | 	jmp	#LR__1874
17264                 | LR__1871
17264     44 65 BF FD | 	call	#_pop
17268     A7 FA 61 FC | 	wrlong	result1, fp
1726c     04 4E 05 F1 | 	add	fp, #4
17270     A7 FC 61 FC | 	wrlong	result2, fp
17274     04 4E 05 F1 | 	add	fp, #4
17278     A7 FE 61 FC | 	wrlong	result3, fp
1727c                 | ' t1=pop()
1727c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1727c     08 4E 85 F1 | 	sub	fp, #8
17280     1C FE 0D F2 | 	cmp	result3, #28 wz
17284     08 4E 05 51 |  if_ne	add	fp, #8
17288     A7 26 02 5B |  if_ne	rdlong	local01, fp
1728c     08 4E 85 51 |  if_ne	sub	fp, #8
17290     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17294     E8 00 90 5D |  if_ne	jmp	#LR__1873
17298     A7 26 02 FB | 	rdlong	local01, fp
1729c     52 00 00 FF 
172a0     44 E5 05 F1 | 	add	objptr, ##42308
172a4     F2 26 62 FC | 	wrlong	local01, objptr
172a8                 | '   q=t1.result.uresult
172a8                 | '   if q<7 then 
172a8     52 00 00 FF 
172ac     44 E5 85 F1 | 	sub	objptr, ##42308
172b0     07 26 56 F2 | 	cmps	local01, #7 wc
172b4     B8 00 90 3D |  if_ae	jmp	#LR__1872
172b8     00 C0 1B FF 
172bc     00 26 06 F6 | 	mov	local01, ##931135488
172c0     52 00 00 FF 
172c4     44 E5 05 F1 | 	add	objptr, ##42308
172c8     F2 16 02 FB | 	rdlong	arg03, objptr
172cc     02 16 66 F0 | 	shl	arg03, #2
172d0     44 E5 85 F1 | 	sub	objptr, #324
172d4     F2 16 02 F1 | 	add	arg03, objptr
172d8     0B 13 02 FB | 	rdlong	arg01, arg03
172dc     52 00 00 FF 
172e0     00 E4 85 F1 | 	sub	objptr, ##41984
172e4     09 13 52 F6 | 	abs	arg01, arg01 wc
172e8     1F 28 C6 C9 |  if_b	decod	local02, #31
172ec     00 28 06 36 |  if_ae	mov	local02, #0
172f0     3C 2C B1 FD | 	call	#__system___float_fromuns
172f4     14 FB 61 F5 | 	xor	result1, local02
172f8     FD 12 02 F6 | 	mov	arg01, result1
172fc     FF 7F 23 FF 
17300     00 14 06 F6 | 	mov	arg02, ##1191181824
17304     30 32 B1 FD | 	call	#__system___float_div
17308     FD 14 02 F6 | 	mov	arg02, result1
1730c     13 13 02 F6 | 	mov	arg01, local01
17310     50 2C B1 FD | 	call	#__system___float_add
17314     10 4E 05 F1 | 	add	fp, #16
17318     A7 FA 61 FC | 	wrlong	result1, fp
1731c                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1731c     10 4E 85 F1 | 	sub	fp, #16
17320     1F FA 05 F4 | 	bitl	result1, #31
17324     FD 12 02 F6 | 	mov	arg01, result1
17328     89 41 1D FF 
1732c     6F 14 06 F6 | 	mov	arg02, ##981668463
17330     01 16 06 F6 | 	mov	arg03, #1
17334     30 34 B1 FD | 	call	#__system___float_cmp
17338     00 FA 55 F2 | 	cmps	result1, #0 wc
1733c     10 4E 05 C1 |  if_b	add	fp, #16
17340     A7 00 68 CC |  if_b	wrlong	#0, fp
17344     10 4E 85 C1 |  if_b	sub	fp, #16
17348     10 4E 05 F1 | 	add	fp, #16
1734c     A7 26 02 FB | 	rdlong	local01, fp
17350     10 4E 85 F1 | 	sub	fp, #16
17354     A7 26 62 FC | 	wrlong	local01, fp
17358     08 4E 05 F1 | 	add	fp, #8
1735c     A7 3C 68 FC | 	wrlong	#30, fp
17360     08 4E 85 F1 | 	sub	fp, #8
17364     A7 12 02 F6 | 	mov	arg01, fp
17368     D8 64 BF FD | 	call	#_push
1736c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1736c     1C 00 90 FD | 	jmp	#LR__1874
17370                 | LR__1872
17370     29 12 06 F6 | 	mov	arg01, #41
17374     00 14 06 F6 | 	mov	arg02, #0
17378     24 C7 B0 FD | 	call	#_printerror
1737c                 | '      printerror(41) : return
1737c     0C 00 90 FD | 	jmp	#LR__1874
17380                 | LR__1873
17380     29 12 06 F6 | 	mov	arg01, #41
17384     00 14 06 F6 | 	mov	arg02, #0
17388     14 C7 B0 FD | 	call	#_printerror
1738c                 | LR__1874
1738c     A7 F0 03 F6 | 	mov	ptra, fp
17390     B2 00 A0 FD | 	call	#popregs_
17394                 | _do_padrz_ret
17394     2D 00 64 FD | 	ret
17398                 | 
17398                 | ' 
17398                 | ' ' ------------------ pads
17398                 | ' 
17398                 | ' sub do_pads
17398                 | _do_pads
17398     02 4A 05 F6 | 	mov	COUNT_, #2
1739c     A8 00 A0 FD | 	call	#pushregs_
173a0     14 F0 07 F1 | 	add	ptra, #20
173a4     4A 00 00 FF 
173a8     80 E4 05 F1 | 	add	objptr, ##38016
173ac     F2 26 02 FB | 	rdlong	local01, objptr
173b0     13 17 02 F6 | 	mov	arg03, local01
173b4     01 16 66 F0 | 	shl	arg03, #1
173b8     13 17 02 F1 | 	add	arg03, local01
173bc     02 16 66 F0 | 	shl	arg03, #2
173c0     03 00 00 FF 
173c4     04 E4 85 F1 | 	sub	objptr, ##1540
173c8     F2 16 02 F1 | 	add	arg03, objptr
173cc     0B 17 02 FB | 	rdlong	arg03, arg03
173d0     0C 4E 05 F1 | 	add	fp, #12
173d4     A7 16 62 FC | 	wrlong	arg03, fp
173d8                 | ' 
173d8                 | ' numpar=compiledline(lineptr_e).result.uresult
173d8                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
173d8     0C 4E 85 F1 | 	sub	fp, #12
173dc     02 16 16 F2 | 	cmp	arg03, #2 wc
173e0     47 00 00 FF 
173e4     7C E4 85 F1 | 	sub	objptr, ##36476
173e8     40 00 90 CD |  if_b	jmp	#LR__1880
173ec     00 12 06 F6 | 	mov	arg01, #0
173f0     68 5D B1 FD | 	call	#__system___getiolock_0616
173f4     FD 12 02 F6 | 	mov	arg01, result1
173f8     BC 00 B1 FD | 	call	#__system___lockmem
173fc     BD 01 00 FF 
17400     23 15 06 F6 | 	mov	arg02, ##@LR__6013
17404     00 12 06 F6 | 	mov	arg01, #0
17408     00 16 06 F6 | 	mov	arg03, #0
1740c     A0 0D B1 FD | 	call	#__system___basic_print_string
17410     00 12 06 F6 | 	mov	arg01, #0
17414     44 5D B1 FD | 	call	#__system___getiolock_0616
17418     FD 00 68 FC | 	wrlong	#0, result1
1741c     27 12 06 F6 | 	mov	arg01, #39
17420     00 14 06 F6 | 	mov	arg02, #0
17424     78 C6 B0 FD | 	call	#_printerror
17428     E0 01 90 FD | 	jmp	#LR__1884
1742c                 | LR__1880
1742c                 | ' if numpar=0 then 
1742c     0C 4E 05 F1 | 	add	fp, #12
17430     A7 FE 09 FB | 	rdlong	result3, fp wz
17434     0C 4E 85 F1 | 	sub	fp, #12
17438     A8 00 90 5D |  if_ne	jmp	#LR__1881
1743c     00 C0 1B FF 
17440     00 26 06 F6 | 	mov	local01, ##931135488
17444     52 00 00 FF 
17448     1C E4 05 F1 | 	add	objptr, ##42012
1744c     F2 12 02 FB | 	rdlong	arg01, objptr
17450     52 00 00 FF 
17454     1C E4 85 F1 | 	sub	objptr, ##42012
17458     09 13 52 F6 | 	abs	arg01, arg01 wc
1745c     1F 28 C6 C9 |  if_b	decod	local02, #31
17460     00 28 06 36 |  if_ae	mov	local02, #0
17464     C8 2A B1 FD | 	call	#__system___float_fromuns
17468     14 FB 61 F5 | 	xor	result1, local02
1746c     FD 12 02 F6 | 	mov	arg01, result1
17470     FF 7F 23 FF 
17474     00 14 06 F6 | 	mov	arg02, ##1191181824
17478     BC 30 B1 FD | 	call	#__system___float_div
1747c     FD 14 02 F6 | 	mov	arg02, result1
17480     13 13 02 F6 | 	mov	arg01, local01
17484     DC 2A B1 FD | 	call	#__system___float_add
17488     10 4E 05 F1 | 	add	fp, #16
1748c     A7 FA 61 FC | 	wrlong	result1, fp
17490                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17490     10 4E 85 F1 | 	sub	fp, #16
17494     1F FA 05 F4 | 	bitl	result1, #31
17498     FD 12 02 F6 | 	mov	arg01, result1
1749c     89 41 1D FF 
174a0     6F 14 06 F6 | 	mov	arg02, ##981668463
174a4     01 16 06 F6 | 	mov	arg03, #1
174a8     BC 32 B1 FD | 	call	#__system___float_cmp
174ac     00 FA 55 F2 | 	cmps	result1, #0 wc
174b0     10 4E 05 C1 |  if_b	add	fp, #16
174b4     A7 00 68 CC |  if_b	wrlong	#0, fp
174b8     10 4E 85 C1 |  if_b	sub	fp, #16
174bc     10 4E 05 F1 | 	add	fp, #16
174c0     A7 26 02 FB | 	rdlong	local01, fp
174c4     10 4E 85 F1 | 	sub	fp, #16
174c8     A7 26 62 FC | 	wrlong	local01, fp
174cc     08 4E 05 F1 | 	add	fp, #8
174d0     A7 3C 68 FC | 	wrlong	#30, fp
174d4     08 4E 85 F1 | 	sub	fp, #8
174d8     A7 12 02 F6 | 	mov	arg01, fp
174dc     64 63 BF FD | 	call	#_push
174e0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
174e0     28 01 90 FD | 	jmp	#LR__1884
174e4                 | LR__1881
174e4     C4 62 BF FD | 	call	#_pop
174e8     A7 FA 61 FC | 	wrlong	result1, fp
174ec     04 4E 05 F1 | 	add	fp, #4
174f0     A7 FC 61 FC | 	wrlong	result2, fp
174f4     04 4E 05 F1 | 	add	fp, #4
174f8     A7 FE 61 FC | 	wrlong	result3, fp
174fc                 | ' t1=pop()
174fc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
174fc     08 4E 85 F1 | 	sub	fp, #8
17500     1C FE 0D F2 | 	cmp	result3, #28 wz
17504     08 4E 05 51 |  if_ne	add	fp, #8
17508     A7 26 02 5B |  if_ne	rdlong	local01, fp
1750c     08 4E 85 51 |  if_ne	sub	fp, #8
17510     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17514     E8 00 90 5D |  if_ne	jmp	#LR__1883
17518     A7 26 02 FB | 	rdlong	local01, fp
1751c     52 00 00 FF 
17520     44 E5 05 F1 | 	add	objptr, ##42308
17524     F2 26 62 FC | 	wrlong	local01, objptr
17528                 | '   q=t1.result.uresult
17528                 | '   if q<7 then 
17528     52 00 00 FF 
1752c     44 E5 85 F1 | 	sub	objptr, ##42308
17530     07 26 56 F2 | 	cmps	local01, #7 wc
17534     B8 00 90 3D |  if_ae	jmp	#LR__1882
17538     00 C0 1B FF 
1753c     00 26 06 F6 | 	mov	local01, ##931135488
17540     52 00 00 FF 
17544     44 E5 05 F1 | 	add	objptr, ##42308
17548     F2 16 02 FB | 	rdlong	arg03, objptr
1754c     02 16 66 F0 | 	shl	arg03, #2
17550     28 E5 85 F1 | 	sub	objptr, #296
17554     F2 16 02 F1 | 	add	arg03, objptr
17558     0B 13 02 FB | 	rdlong	arg01, arg03
1755c     52 00 00 FF 
17560     1C E4 85 F1 | 	sub	objptr, ##42012
17564     09 13 52 F6 | 	abs	arg01, arg01 wc
17568     1F 28 C6 C9 |  if_b	decod	local02, #31
1756c     00 28 06 36 |  if_ae	mov	local02, #0
17570     BC 29 B1 FD | 	call	#__system___float_fromuns
17574     14 FB 61 F5 | 	xor	result1, local02
17578     FD 12 02 F6 | 	mov	arg01, result1
1757c     FF 7F 23 FF 
17580     00 14 06 F6 | 	mov	arg02, ##1191181824
17584     B0 2F B1 FD | 	call	#__system___float_div
17588     FD 14 02 F6 | 	mov	arg02, result1
1758c     13 13 02 F6 | 	mov	arg01, local01
17590     D0 29 B1 FD | 	call	#__system___float_add
17594     10 4E 05 F1 | 	add	fp, #16
17598     A7 FA 61 FC | 	wrlong	result1, fp
1759c                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1759c     10 4E 85 F1 | 	sub	fp, #16
175a0     1F FA 05 F4 | 	bitl	result1, #31
175a4     FD 12 02 F6 | 	mov	arg01, result1
175a8     89 41 1D FF 
175ac     6F 14 06 F6 | 	mov	arg02, ##981668463
175b0     01 16 06 F6 | 	mov	arg03, #1
175b4     B0 31 B1 FD | 	call	#__system___float_cmp
175b8     00 FA 55 F2 | 	cmps	result1, #0 wc
175bc     10 4E 05 C1 |  if_b	add	fp, #16
175c0     A7 00 68 CC |  if_b	wrlong	#0, fp
175c4     10 4E 85 C1 |  if_b	sub	fp, #16
175c8     10 4E 05 F1 | 	add	fp, #16
175cc     A7 26 02 FB | 	rdlong	local01, fp
175d0     10 4E 85 F1 | 	sub	fp, #16
175d4     A7 26 62 FC | 	wrlong	local01, fp
175d8     08 4E 05 F1 | 	add	fp, #8
175dc     A7 3C 68 FC | 	wrlong	#30, fp
175e0     08 4E 85 F1 | 	sub	fp, #8
175e4     A7 12 02 F6 | 	mov	arg01, fp
175e8     58 62 BF FD | 	call	#_push
175ec                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
175ec     1C 00 90 FD | 	jmp	#LR__1884
175f0                 | LR__1882
175f0     29 12 06 F6 | 	mov	arg01, #41
175f4     00 14 06 F6 | 	mov	arg02, #0
175f8     A4 C4 B0 FD | 	call	#_printerror
175fc                 | '      printerror(41) : return
175fc     0C 00 90 FD | 	jmp	#LR__1884
17600                 | LR__1883
17600     29 12 06 F6 | 	mov	arg01, #41
17604     00 14 06 F6 | 	mov	arg02, #0
17608     94 C4 B0 FD | 	call	#_printerror
1760c                 | LR__1884
1760c     A7 F0 03 F6 | 	mov	ptra, fp
17610     B2 00 A0 FD | 	call	#popregs_
17614                 | _do_pads_ret
17614     2D 00 64 FD | 	ret
17618                 | 
17618                 | ' 
17618                 | ' ' ------------------ padw
17618                 | ' 
17618                 | ' sub do_padw
17618                 | _do_padw
17618     02 4A 05 F6 | 	mov	COUNT_, #2
1761c     A8 00 A0 FD | 	call	#pushregs_
17620     14 F0 07 F1 | 	add	ptra, #20
17624     4A 00 00 FF 
17628     80 E4 05 F1 | 	add	objptr, ##38016
1762c     F2 26 02 FB | 	rdlong	local01, objptr
17630     13 17 02 F6 | 	mov	arg03, local01
17634     01 16 66 F0 | 	shl	arg03, #1
17638     13 17 02 F1 | 	add	arg03, local01
1763c     02 16 66 F0 | 	shl	arg03, #2
17640     03 00 00 FF 
17644     04 E4 85 F1 | 	sub	objptr, ##1540
17648     F2 16 02 F1 | 	add	arg03, objptr
1764c     0B 17 02 FB | 	rdlong	arg03, arg03
17650     0C 4E 05 F1 | 	add	fp, #12
17654     A7 16 62 FC | 	wrlong	arg03, fp
17658                 | ' 
17658                 | ' numpar=compiledline(lineptr_e).result.uresult
17658                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
17658     0C 4E 85 F1 | 	sub	fp, #12
1765c     02 16 16 F2 | 	cmp	arg03, #2 wc
17660     47 00 00 FF 
17664     7C E4 85 F1 | 	sub	objptr, ##36476
17668     40 00 90 CD |  if_b	jmp	#LR__1890
1766c     00 12 06 F6 | 	mov	arg01, #0
17670     E8 5A B1 FD | 	call	#__system___getiolock_0616
17674     FD 12 02 F6 | 	mov	arg01, result1
17678     3C FE B0 FD | 	call	#__system___lockmem
1767c     BD 01 00 FF 
17680     2A 15 06 F6 | 	mov	arg02, ##@LR__6014
17684     00 12 06 F6 | 	mov	arg01, #0
17688     00 16 06 F6 | 	mov	arg03, #0
1768c     20 0B B1 FD | 	call	#__system___basic_print_string
17690     00 12 06 F6 | 	mov	arg01, #0
17694     C4 5A B1 FD | 	call	#__system___getiolock_0616
17698     FD 00 68 FC | 	wrlong	#0, result1
1769c     27 12 06 F6 | 	mov	arg01, #39
176a0     00 14 06 F6 | 	mov	arg02, #0
176a4     F8 C3 B0 FD | 	call	#_printerror
176a8     E0 01 90 FD | 	jmp	#LR__1894
176ac                 | LR__1890
176ac                 | ' if numpar=0 then 
176ac     0C 4E 05 F1 | 	add	fp, #12
176b0     A7 FE 09 FB | 	rdlong	result3, fp wz
176b4     0C 4E 85 F1 | 	sub	fp, #12
176b8     A8 00 90 5D |  if_ne	jmp	#LR__1891
176bc     00 C0 1B FF 
176c0     00 26 06 F6 | 	mov	local01, ##931135488
176c4     52 00 00 FF 
176c8     38 E4 05 F1 | 	add	objptr, ##42040
176cc     F2 12 02 FB | 	rdlong	arg01, objptr
176d0     52 00 00 FF 
176d4     38 E4 85 F1 | 	sub	objptr, ##42040
176d8     09 13 52 F6 | 	abs	arg01, arg01 wc
176dc     1F 28 C6 C9 |  if_b	decod	local02, #31
176e0     00 28 06 36 |  if_ae	mov	local02, #0
176e4     48 28 B1 FD | 	call	#__system___float_fromuns
176e8     14 FB 61 F5 | 	xor	result1, local02
176ec     FD 12 02 F6 | 	mov	arg01, result1
176f0     FF 7F 23 FF 
176f4     00 14 06 F6 | 	mov	arg02, ##1191181824
176f8     3C 2E B1 FD | 	call	#__system___float_div
176fc     FD 14 02 F6 | 	mov	arg02, result1
17700     13 13 02 F6 | 	mov	arg01, local01
17704     5C 28 B1 FD | 	call	#__system___float_add
17708     10 4E 05 F1 | 	add	fp, #16
1770c     A7 FA 61 FC | 	wrlong	result1, fp
17710                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17710     10 4E 85 F1 | 	sub	fp, #16
17714     1F FA 05 F4 | 	bitl	result1, #31
17718     FD 12 02 F6 | 	mov	arg01, result1
1771c     89 41 1D FF 
17720     6F 14 06 F6 | 	mov	arg02, ##981668463
17724     01 16 06 F6 | 	mov	arg03, #1
17728     3C 30 B1 FD | 	call	#__system___float_cmp
1772c     00 FA 55 F2 | 	cmps	result1, #0 wc
17730     10 4E 05 C1 |  if_b	add	fp, #16
17734     A7 00 68 CC |  if_b	wrlong	#0, fp
17738     10 4E 85 C1 |  if_b	sub	fp, #16
1773c     10 4E 05 F1 | 	add	fp, #16
17740     A7 26 02 FB | 	rdlong	local01, fp
17744     10 4E 85 F1 | 	sub	fp, #16
17748     A7 26 62 FC | 	wrlong	local01, fp
1774c     08 4E 05 F1 | 	add	fp, #8
17750     A7 3C 68 FC | 	wrlong	#30, fp
17754     08 4E 85 F1 | 	sub	fp, #8
17758     A7 12 02 F6 | 	mov	arg01, fp
1775c     E4 60 BF FD | 	call	#_push
17760                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17760     28 01 90 FD | 	jmp	#LR__1894
17764                 | LR__1891
17764     44 60 BF FD | 	call	#_pop
17768     A7 FA 61 FC | 	wrlong	result1, fp
1776c     04 4E 05 F1 | 	add	fp, #4
17770     A7 FC 61 FC | 	wrlong	result2, fp
17774     04 4E 05 F1 | 	add	fp, #4
17778     A7 FE 61 FC | 	wrlong	result3, fp
1777c                 | ' t1=pop()
1777c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1777c     08 4E 85 F1 | 	sub	fp, #8
17780     1C FE 0D F2 | 	cmp	result3, #28 wz
17784     08 4E 05 51 |  if_ne	add	fp, #8
17788     A7 26 02 5B |  if_ne	rdlong	local01, fp
1778c     08 4E 85 51 |  if_ne	sub	fp, #8
17790     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17794     E8 00 90 5D |  if_ne	jmp	#LR__1893
17798     A7 26 02 FB | 	rdlong	local01, fp
1779c     52 00 00 FF 
177a0     44 E5 05 F1 | 	add	objptr, ##42308
177a4     F2 26 62 FC | 	wrlong	local01, objptr
177a8                 | '   q=t1.result.uresult
177a8                 | '   if q<7 then 
177a8     52 00 00 FF 
177ac     44 E5 85 F1 | 	sub	objptr, ##42308
177b0     07 26 56 F2 | 	cmps	local01, #7 wc
177b4     B8 00 90 3D |  if_ae	jmp	#LR__1892
177b8     00 C0 1B FF 
177bc     00 26 06 F6 | 	mov	local01, ##931135488
177c0     52 00 00 FF 
177c4     44 E5 05 F1 | 	add	objptr, ##42308
177c8     F2 16 02 FB | 	rdlong	arg03, objptr
177cc     02 16 66 F0 | 	shl	arg03, #2
177d0     0C E5 85 F1 | 	sub	objptr, #268
177d4     F2 16 02 F1 | 	add	arg03, objptr
177d8     0B 13 02 FB | 	rdlong	arg01, arg03
177dc     52 00 00 FF 
177e0     38 E4 85 F1 | 	sub	objptr, ##42040
177e4     09 13 52 F6 | 	abs	arg01, arg01 wc
177e8     1F 28 C6 C9 |  if_b	decod	local02, #31
177ec     00 28 06 36 |  if_ae	mov	local02, #0
177f0     3C 27 B1 FD | 	call	#__system___float_fromuns
177f4     14 FB 61 F5 | 	xor	result1, local02
177f8     FD 12 02 F6 | 	mov	arg01, result1
177fc     FF 7F 23 FF 
17800     00 14 06 F6 | 	mov	arg02, ##1191181824
17804     30 2D B1 FD | 	call	#__system___float_div
17808     FD 14 02 F6 | 	mov	arg02, result1
1780c     13 13 02 F6 | 	mov	arg01, local01
17810     50 27 B1 FD | 	call	#__system___float_add
17814     10 4E 05 F1 | 	add	fp, #16
17818     A7 FA 61 FC | 	wrlong	result1, fp
1781c                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1781c     10 4E 85 F1 | 	sub	fp, #16
17820     1F FA 05 F4 | 	bitl	result1, #31
17824     FD 12 02 F6 | 	mov	arg01, result1
17828     89 41 1D FF 
1782c     6F 14 06 F6 | 	mov	arg02, ##981668463
17830     01 16 06 F6 | 	mov	arg03, #1
17834     30 2F B1 FD | 	call	#__system___float_cmp
17838     00 FA 55 F2 | 	cmps	result1, #0 wc
1783c     10 4E 05 C1 |  if_b	add	fp, #16
17840     A7 00 68 CC |  if_b	wrlong	#0, fp
17844     10 4E 85 C1 |  if_b	sub	fp, #16
17848     10 4E 05 F1 | 	add	fp, #16
1784c     A7 26 02 FB | 	rdlong	local01, fp
17850     10 4E 85 F1 | 	sub	fp, #16
17854     A7 26 62 FC | 	wrlong	local01, fp
17858     08 4E 05 F1 | 	add	fp, #8
1785c     A7 3C 68 FC | 	wrlong	#30, fp
17860     08 4E 85 F1 | 	sub	fp, #8
17864     A7 12 02 F6 | 	mov	arg01, fp
17868     D8 5F BF FD | 	call	#_push
1786c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1786c     1C 00 90 FD | 	jmp	#LR__1894
17870                 | LR__1892
17870     29 12 06 F6 | 	mov	arg01, #41
17874     00 14 06 F6 | 	mov	arg02, #0
17878     24 C2 B0 FD | 	call	#_printerror
1787c                 | '      printerror(41) : return
1787c     0C 00 90 FD | 	jmp	#LR__1894
17880                 | LR__1893
17880     29 12 06 F6 | 	mov	arg01, #41
17884     00 14 06 F6 | 	mov	arg02, #0
17888     14 C2 B0 FD | 	call	#_printerror
1788c                 | LR__1894
1788c     A7 F0 03 F6 | 	mov	ptra, fp
17890     B2 00 A0 FD | 	call	#popregs_
17894                 | _do_padw_ret
17894     2D 00 64 FD | 	ret
17898                 | 
17898                 | ' 
17898                 | ' ' ------------------ padx
17898                 | ' 
17898                 | ' sub do_padx
17898                 | _do_padx
17898     02 4A 05 F6 | 	mov	COUNT_, #2
1789c     A8 00 A0 FD | 	call	#pushregs_
178a0     14 F0 07 F1 | 	add	ptra, #20
178a4     4A 00 00 FF 
178a8     80 E4 05 F1 | 	add	objptr, ##38016
178ac     F2 26 02 FB | 	rdlong	local01, objptr
178b0     13 17 02 F6 | 	mov	arg03, local01
178b4     01 16 66 F0 | 	shl	arg03, #1
178b8     13 17 02 F1 | 	add	arg03, local01
178bc     02 16 66 F0 | 	shl	arg03, #2
178c0     03 00 00 FF 
178c4     04 E4 85 F1 | 	sub	objptr, ##1540
178c8     F2 16 02 F1 | 	add	arg03, objptr
178cc     0B 17 02 FB | 	rdlong	arg03, arg03
178d0     0C 4E 05 F1 | 	add	fp, #12
178d4     A7 16 62 FC | 	wrlong	arg03, fp
178d8                 | ' 
178d8                 | ' numpar=compiledline(lineptr_e).result.uresult
178d8                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
178d8     0C 4E 85 F1 | 	sub	fp, #12
178dc     02 16 16 F2 | 	cmp	arg03, #2 wc
178e0     47 00 00 FF 
178e4     7C E4 85 F1 | 	sub	objptr, ##36476
178e8     40 00 90 CD |  if_b	jmp	#LR__1900
178ec     00 12 06 F6 | 	mov	arg01, #0
178f0     68 58 B1 FD | 	call	#__system___getiolock_0616
178f4     FD 12 02 F6 | 	mov	arg01, result1
178f8     BC FB B0 FD | 	call	#__system___lockmem
178fc     BD 01 00 FF 
17900     31 15 06 F6 | 	mov	arg02, ##@LR__6015
17904     00 12 06 F6 | 	mov	arg01, #0
17908     00 16 06 F6 | 	mov	arg03, #0
1790c     A0 08 B1 FD | 	call	#__system___basic_print_string
17910     00 12 06 F6 | 	mov	arg01, #0
17914     44 58 B1 FD | 	call	#__system___getiolock_0616
17918     FD 00 68 FC | 	wrlong	#0, result1
1791c     27 12 06 F6 | 	mov	arg01, #39
17920     00 14 06 F6 | 	mov	arg02, #0
17924     78 C1 B0 FD | 	call	#_printerror
17928     E0 01 90 FD | 	jmp	#LR__1904
1792c                 | LR__1900
1792c                 | ' if numpar=0 then 
1792c     0C 4E 05 F1 | 	add	fp, #12
17930     A7 FE 09 FB | 	rdlong	result3, fp wz
17934     0C 4E 85 F1 | 	sub	fp, #12
17938     A8 00 90 5D |  if_ne	jmp	#LR__1901
1793c     00 C0 1B FF 
17940     00 26 06 F6 | 	mov	local01, ##931135488
17944     51 00 00 FF 
17948     58 E5 05 F1 | 	add	objptr, ##41816
1794c     F2 12 02 FB | 	rdlong	arg01, objptr
17950     51 00 00 FF 
17954     58 E5 85 F1 | 	sub	objptr, ##41816
17958     09 13 52 F6 | 	abs	arg01, arg01 wc
1795c     1F 28 C6 C9 |  if_b	decod	local02, #31
17960     00 28 06 36 |  if_ae	mov	local02, #0
17964     C8 25 B1 FD | 	call	#__system___float_fromuns
17968     14 FB 61 F5 | 	xor	result1, local02
1796c     FD 12 02 F6 | 	mov	arg01, result1
17970     FF 7F 23 FF 
17974     00 14 06 F6 | 	mov	arg02, ##1191181824
17978     BC 2B B1 FD | 	call	#__system___float_div
1797c     FD 14 02 F6 | 	mov	arg02, result1
17980     13 13 02 F6 | 	mov	arg01, local01
17984     DC 25 B1 FD | 	call	#__system___float_add
17988     10 4E 05 F1 | 	add	fp, #16
1798c     A7 FA 61 FC | 	wrlong	result1, fp
17990                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17990     10 4E 85 F1 | 	sub	fp, #16
17994     1F FA 05 F4 | 	bitl	result1, #31
17998     FD 12 02 F6 | 	mov	arg01, result1
1799c     89 41 1D FF 
179a0     6F 14 06 F6 | 	mov	arg02, ##981668463
179a4     01 16 06 F6 | 	mov	arg03, #1
179a8     BC 2D B1 FD | 	call	#__system___float_cmp
179ac     00 FA 55 F2 | 	cmps	result1, #0 wc
179b0     10 4E 05 C1 |  if_b	add	fp, #16
179b4     A7 00 68 CC |  if_b	wrlong	#0, fp
179b8     10 4E 85 C1 |  if_b	sub	fp, #16
179bc     10 4E 05 F1 | 	add	fp, #16
179c0     A7 26 02 FB | 	rdlong	local01, fp
179c4     10 4E 85 F1 | 	sub	fp, #16
179c8     A7 26 62 FC | 	wrlong	local01, fp
179cc     08 4E 05 F1 | 	add	fp, #8
179d0     A7 3C 68 FC | 	wrlong	#30, fp
179d4     08 4E 85 F1 | 	sub	fp, #8
179d8     A7 12 02 F6 | 	mov	arg01, fp
179dc     64 5E BF FD | 	call	#_push
179e0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
179e0     28 01 90 FD | 	jmp	#LR__1904
179e4                 | LR__1901
179e4     C4 5D BF FD | 	call	#_pop
179e8     A7 FA 61 FC | 	wrlong	result1, fp
179ec     04 4E 05 F1 | 	add	fp, #4
179f0     A7 FC 61 FC | 	wrlong	result2, fp
179f4     04 4E 05 F1 | 	add	fp, #4
179f8     A7 FE 61 FC | 	wrlong	result3, fp
179fc                 | ' t1=pop()
179fc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
179fc     08 4E 85 F1 | 	sub	fp, #8
17a00     1C FE 0D F2 | 	cmp	result3, #28 wz
17a04     08 4E 05 51 |  if_ne	add	fp, #8
17a08     A7 26 02 5B |  if_ne	rdlong	local01, fp
17a0c     08 4E 85 51 |  if_ne	sub	fp, #8
17a10     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17a14     E8 00 90 5D |  if_ne	jmp	#LR__1903
17a18     A7 26 02 FB | 	rdlong	local01, fp
17a1c     52 00 00 FF 
17a20     44 E5 05 F1 | 	add	objptr, ##42308
17a24     F2 26 62 FC | 	wrlong	local01, objptr
17a28                 | '   q=t1.result.uresult
17a28                 | '   if q<7 then 
17a28     52 00 00 FF 
17a2c     44 E5 85 F1 | 	sub	objptr, ##42308
17a30     07 26 56 F2 | 	cmps	local01, #7 wc
17a34     B8 00 90 3D |  if_ae	jmp	#LR__1902
17a38     00 C0 1B FF 
17a3c     00 26 06 F6 | 	mov	local01, ##931135488
17a40     52 00 00 FF 
17a44     44 E5 05 F1 | 	add	objptr, ##42308
17a48     F2 16 02 FB | 	rdlong	arg03, objptr
17a4c     02 16 66 F0 | 	shl	arg03, #2
17a50     EC E5 85 F1 | 	sub	objptr, #492
17a54     F2 16 02 F1 | 	add	arg03, objptr
17a58     0B 13 02 FB | 	rdlong	arg01, arg03
17a5c     51 00 00 FF 
17a60     58 E5 85 F1 | 	sub	objptr, ##41816
17a64     09 13 52 F6 | 	abs	arg01, arg01 wc
17a68     1F 28 C6 C9 |  if_b	decod	local02, #31
17a6c     00 28 06 36 |  if_ae	mov	local02, #0
17a70     BC 24 B1 FD | 	call	#__system___float_fromuns
17a74     14 FB 61 F5 | 	xor	result1, local02
17a78     FD 12 02 F6 | 	mov	arg01, result1
17a7c     FF 7F 23 FF 
17a80     00 14 06 F6 | 	mov	arg02, ##1191181824
17a84     B0 2A B1 FD | 	call	#__system___float_div
17a88     FD 14 02 F6 | 	mov	arg02, result1
17a8c     13 13 02 F6 | 	mov	arg01, local01
17a90     D0 24 B1 FD | 	call	#__system___float_add
17a94     10 4E 05 F1 | 	add	fp, #16
17a98     A7 FA 61 FC | 	wrlong	result1, fp
17a9c                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17a9c     10 4E 85 F1 | 	sub	fp, #16
17aa0     1F FA 05 F4 | 	bitl	result1, #31
17aa4     FD 12 02 F6 | 	mov	arg01, result1
17aa8     89 41 1D FF 
17aac     6F 14 06 F6 | 	mov	arg02, ##981668463
17ab0     01 16 06 F6 | 	mov	arg03, #1
17ab4     B0 2C B1 FD | 	call	#__system___float_cmp
17ab8     00 FA 55 F2 | 	cmps	result1, #0 wc
17abc     10 4E 05 C1 |  if_b	add	fp, #16
17ac0     A7 00 68 CC |  if_b	wrlong	#0, fp
17ac4     10 4E 85 C1 |  if_b	sub	fp, #16
17ac8     10 4E 05 F1 | 	add	fp, #16
17acc     A7 26 02 FB | 	rdlong	local01, fp
17ad0     10 4E 85 F1 | 	sub	fp, #16
17ad4     A7 26 62 FC | 	wrlong	local01, fp
17ad8     08 4E 05 F1 | 	add	fp, #8
17adc     A7 3C 68 FC | 	wrlong	#30, fp
17ae0     08 4E 85 F1 | 	sub	fp, #8
17ae4     A7 12 02 F6 | 	mov	arg01, fp
17ae8     58 5D BF FD | 	call	#_push
17aec                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17aec     1C 00 90 FD | 	jmp	#LR__1904
17af0                 | LR__1902
17af0     29 12 06 F6 | 	mov	arg01, #41
17af4     00 14 06 F6 | 	mov	arg02, #0
17af8     A4 BF B0 FD | 	call	#_printerror
17afc                 | '      printerror(41) : return
17afc     0C 00 90 FD | 	jmp	#LR__1904
17b00                 | LR__1903
17b00     29 12 06 F6 | 	mov	arg01, #41
17b04     00 14 06 F6 | 	mov	arg02, #0
17b08     94 BF B0 FD | 	call	#_printerror
17b0c                 | LR__1904
17b0c     A7 F0 03 F6 | 	mov	ptra, fp
17b10     B2 00 A0 FD | 	call	#popregs_
17b14                 | _do_padx_ret
17b14     2D 00 64 FD | 	ret
17b18                 | 
17b18                 | ' 
17b18                 | ' ' ------------------ pady
17b18                 | ' 
17b18                 | ' sub do_pady
17b18                 | _do_pady
17b18     02 4A 05 F6 | 	mov	COUNT_, #2
17b1c     A8 00 A0 FD | 	call	#pushregs_
17b20     14 F0 07 F1 | 	add	ptra, #20
17b24     4A 00 00 FF 
17b28     80 E4 05 F1 | 	add	objptr, ##38016
17b2c     F2 26 02 FB | 	rdlong	local01, objptr
17b30     13 17 02 F6 | 	mov	arg03, local01
17b34     01 16 66 F0 | 	shl	arg03, #1
17b38     13 17 02 F1 | 	add	arg03, local01
17b3c     02 16 66 F0 | 	shl	arg03, #2
17b40     03 00 00 FF 
17b44     04 E4 85 F1 | 	sub	objptr, ##1540
17b48     F2 16 02 F1 | 	add	arg03, objptr
17b4c     0B 17 02 FB | 	rdlong	arg03, arg03
17b50     0C 4E 05 F1 | 	add	fp, #12
17b54     A7 16 62 FC | 	wrlong	arg03, fp
17b58                 | ' 
17b58                 | ' numpar=compiledline(lineptr_e).result.uresult
17b58                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
17b58     0C 4E 85 F1 | 	sub	fp, #12
17b5c     02 16 16 F2 | 	cmp	arg03, #2 wc
17b60     47 00 00 FF 
17b64     7C E4 85 F1 | 	sub	objptr, ##36476
17b68     40 00 90 CD |  if_b	jmp	#LR__1910
17b6c     00 12 06 F6 | 	mov	arg01, #0
17b70     E8 55 B1 FD | 	call	#__system___getiolock_0616
17b74     FD 12 02 F6 | 	mov	arg01, result1
17b78     3C F9 B0 FD | 	call	#__system___lockmem
17b7c     BD 01 00 FF 
17b80     38 15 06 F6 | 	mov	arg02, ##@LR__6016
17b84     00 12 06 F6 | 	mov	arg01, #0
17b88     00 16 06 F6 | 	mov	arg03, #0
17b8c     20 06 B1 FD | 	call	#__system___basic_print_string
17b90     00 12 06 F6 | 	mov	arg01, #0
17b94     C4 55 B1 FD | 	call	#__system___getiolock_0616
17b98     FD 00 68 FC | 	wrlong	#0, result1
17b9c     27 12 06 F6 | 	mov	arg01, #39
17ba0     00 14 06 F6 | 	mov	arg02, #0
17ba4     F8 BE B0 FD | 	call	#_printerror
17ba8     E0 01 90 FD | 	jmp	#LR__1914
17bac                 | LR__1910
17bac                 | ' if numpar=0 then 
17bac     0C 4E 05 F1 | 	add	fp, #12
17bb0     A7 FE 09 FB | 	rdlong	result3, fp wz
17bb4     0C 4E 85 F1 | 	sub	fp, #12
17bb8     A8 00 90 5D |  if_ne	jmp	#LR__1911
17bbc     00 C0 1B FF 
17bc0     00 26 06 F6 | 	mov	local01, ##931135488
17bc4     51 00 00 FF 
17bc8     74 E5 05 F1 | 	add	objptr, ##41844
17bcc     F2 12 02 FB | 	rdlong	arg01, objptr
17bd0     51 00 00 FF 
17bd4     74 E5 85 F1 | 	sub	objptr, ##41844
17bd8     09 13 52 F6 | 	abs	arg01, arg01 wc
17bdc     1F 28 C6 C9 |  if_b	decod	local02, #31
17be0     00 28 06 36 |  if_ae	mov	local02, #0
17be4     48 23 B1 FD | 	call	#__system___float_fromuns
17be8     14 FB 61 F5 | 	xor	result1, local02
17bec     FD 12 02 F6 | 	mov	arg01, result1
17bf0     FF 7F 23 FF 
17bf4     00 14 06 F6 | 	mov	arg02, ##1191181824
17bf8     3C 29 B1 FD | 	call	#__system___float_div
17bfc     FD 14 02 F6 | 	mov	arg02, result1
17c00     13 13 02 F6 | 	mov	arg01, local01
17c04     5C 23 B1 FD | 	call	#__system___float_add
17c08     10 4E 05 F1 | 	add	fp, #16
17c0c     A7 FA 61 FC | 	wrlong	result1, fp
17c10                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17c10     10 4E 85 F1 | 	sub	fp, #16
17c14     1F FA 05 F4 | 	bitl	result1, #31
17c18     FD 12 02 F6 | 	mov	arg01, result1
17c1c     89 41 1D FF 
17c20     6F 14 06 F6 | 	mov	arg02, ##981668463
17c24     01 16 06 F6 | 	mov	arg03, #1
17c28     3C 2B B1 FD | 	call	#__system___float_cmp
17c2c     00 FA 55 F2 | 	cmps	result1, #0 wc
17c30     10 4E 05 C1 |  if_b	add	fp, #16
17c34     A7 00 68 CC |  if_b	wrlong	#0, fp
17c38     10 4E 85 C1 |  if_b	sub	fp, #16
17c3c     10 4E 05 F1 | 	add	fp, #16
17c40     A7 26 02 FB | 	rdlong	local01, fp
17c44     10 4E 85 F1 | 	sub	fp, #16
17c48     A7 26 62 FC | 	wrlong	local01, fp
17c4c     08 4E 05 F1 | 	add	fp, #8
17c50     A7 3C 68 FC | 	wrlong	#30, fp
17c54     08 4E 85 F1 | 	sub	fp, #8
17c58     A7 12 02 F6 | 	mov	arg01, fp
17c5c     E4 5B BF FD | 	call	#_push
17c60                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17c60     28 01 90 FD | 	jmp	#LR__1914
17c64                 | LR__1911
17c64     44 5B BF FD | 	call	#_pop
17c68     A7 FA 61 FC | 	wrlong	result1, fp
17c6c     04 4E 05 F1 | 	add	fp, #4
17c70     A7 FC 61 FC | 	wrlong	result2, fp
17c74     04 4E 05 F1 | 	add	fp, #4
17c78     A7 FE 61 FC | 	wrlong	result3, fp
17c7c                 | ' t1=pop()
17c7c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17c7c     08 4E 85 F1 | 	sub	fp, #8
17c80     1C FE 0D F2 | 	cmp	result3, #28 wz
17c84     08 4E 05 51 |  if_ne	add	fp, #8
17c88     A7 26 02 5B |  if_ne	rdlong	local01, fp
17c8c     08 4E 85 51 |  if_ne	sub	fp, #8
17c90     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17c94     E8 00 90 5D |  if_ne	jmp	#LR__1913
17c98     A7 26 02 FB | 	rdlong	local01, fp
17c9c     52 00 00 FF 
17ca0     44 E5 05 F1 | 	add	objptr, ##42308
17ca4     F2 26 62 FC | 	wrlong	local01, objptr
17ca8                 | '   q=t1.result.uresult
17ca8                 | '   if q<7 then 
17ca8     52 00 00 FF 
17cac     44 E5 85 F1 | 	sub	objptr, ##42308
17cb0     07 26 56 F2 | 	cmps	local01, #7 wc
17cb4     B8 00 90 3D |  if_ae	jmp	#LR__1912
17cb8     00 C0 1B FF 
17cbc     00 26 06 F6 | 	mov	local01, ##931135488
17cc0     52 00 00 FF 
17cc4     44 E5 05 F1 | 	add	objptr, ##42308
17cc8     F2 16 02 FB | 	rdlong	arg03, objptr
17ccc     02 16 66 F0 | 	shl	arg03, #2
17cd0     D0 E5 85 F1 | 	sub	objptr, #464
17cd4     F2 16 02 F1 | 	add	arg03, objptr
17cd8     0B 13 02 FB | 	rdlong	arg01, arg03
17cdc     51 00 00 FF 
17ce0     74 E5 85 F1 | 	sub	objptr, ##41844
17ce4     09 13 52 F6 | 	abs	arg01, arg01 wc
17ce8     1F 28 C6 C9 |  if_b	decod	local02, #31
17cec     00 28 06 36 |  if_ae	mov	local02, #0
17cf0     3C 22 B1 FD | 	call	#__system___float_fromuns
17cf4     14 FB 61 F5 | 	xor	result1, local02
17cf8     FD 12 02 F6 | 	mov	arg01, result1
17cfc     FF 7F 23 FF 
17d00     00 14 06 F6 | 	mov	arg02, ##1191181824
17d04     30 28 B1 FD | 	call	#__system___float_div
17d08     FD 14 02 F6 | 	mov	arg02, result1
17d0c     13 13 02 F6 | 	mov	arg01, local01
17d10     50 22 B1 FD | 	call	#__system___float_add
17d14     10 4E 05 F1 | 	add	fp, #16
17d18     A7 FA 61 FC | 	wrlong	result1, fp
17d1c                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17d1c     10 4E 85 F1 | 	sub	fp, #16
17d20     1F FA 05 F4 | 	bitl	result1, #31
17d24     FD 12 02 F6 | 	mov	arg01, result1
17d28     89 41 1D FF 
17d2c     6F 14 06 F6 | 	mov	arg02, ##981668463
17d30     01 16 06 F6 | 	mov	arg03, #1
17d34     30 2A B1 FD | 	call	#__system___float_cmp
17d38     00 FA 55 F2 | 	cmps	result1, #0 wc
17d3c     10 4E 05 C1 |  if_b	add	fp, #16
17d40     A7 00 68 CC |  if_b	wrlong	#0, fp
17d44     10 4E 85 C1 |  if_b	sub	fp, #16
17d48     10 4E 05 F1 | 	add	fp, #16
17d4c     A7 26 02 FB | 	rdlong	local01, fp
17d50     10 4E 85 F1 | 	sub	fp, #16
17d54     A7 26 62 FC | 	wrlong	local01, fp
17d58     08 4E 05 F1 | 	add	fp, #8
17d5c     A7 3C 68 FC | 	wrlong	#30, fp
17d60     08 4E 85 F1 | 	sub	fp, #8
17d64     A7 12 02 F6 | 	mov	arg01, fp
17d68     D8 5A BF FD | 	call	#_push
17d6c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17d6c     1C 00 90 FD | 	jmp	#LR__1914
17d70                 | LR__1912
17d70     29 12 06 F6 | 	mov	arg01, #41
17d74     00 14 06 F6 | 	mov	arg02, #0
17d78     24 BD B0 FD | 	call	#_printerror
17d7c                 | '      printerror(41) : return
17d7c     0C 00 90 FD | 	jmp	#LR__1914
17d80                 | LR__1913
17d80     29 12 06 F6 | 	mov	arg01, #41
17d84     00 14 06 F6 | 	mov	arg02, #0
17d88     14 BD B0 FD | 	call	#_printerror
17d8c                 | LR__1914
17d8c     A7 F0 03 F6 | 	mov	ptra, fp
17d90     B2 00 A0 FD | 	call	#popregs_
17d94                 | _do_pady_ret
17d94     2D 00 64 FD | 	ret
17d98                 | 
17d98                 | ' 
17d98                 | ' ' ------------------ padz
17d98                 | ' 
17d98                 | ' sub do_padz
17d98                 | _do_padz
17d98     02 4A 05 F6 | 	mov	COUNT_, #2
17d9c     A8 00 A0 FD | 	call	#pushregs_
17da0     14 F0 07 F1 | 	add	ptra, #20
17da4     4A 00 00 FF 
17da8     80 E4 05 F1 | 	add	objptr, ##38016
17dac     F2 26 02 FB | 	rdlong	local01, objptr
17db0     13 17 02 F6 | 	mov	arg03, local01
17db4     01 16 66 F0 | 	shl	arg03, #1
17db8     13 17 02 F1 | 	add	arg03, local01
17dbc     02 16 66 F0 | 	shl	arg03, #2
17dc0     03 00 00 FF 
17dc4     04 E4 85 F1 | 	sub	objptr, ##1540
17dc8     F2 16 02 F1 | 	add	arg03, objptr
17dcc     0B 17 02 FB | 	rdlong	arg03, arg03
17dd0     0C 4E 05 F1 | 	add	fp, #12
17dd4     A7 16 62 FC | 	wrlong	arg03, fp
17dd8                 | ' 
17dd8                 | ' numpar=compiledline(lineptr_e).result.uresult
17dd8                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
17dd8     0C 4E 85 F1 | 	sub	fp, #12
17ddc     02 16 16 F2 | 	cmp	arg03, #2 wc
17de0     47 00 00 FF 
17de4     7C E4 85 F1 | 	sub	objptr, ##36476
17de8     40 00 90 CD |  if_b	jmp	#LR__1920
17dec     00 12 06 F6 | 	mov	arg01, #0
17df0     68 53 B1 FD | 	call	#__system___getiolock_0616
17df4     FD 12 02 F6 | 	mov	arg01, result1
17df8     BC F6 B0 FD | 	call	#__system___lockmem
17dfc     BD 01 00 FF 
17e00     3F 15 06 F6 | 	mov	arg02, ##@LR__6017
17e04     00 12 06 F6 | 	mov	arg01, #0
17e08     00 16 06 F6 | 	mov	arg03, #0
17e0c     A0 03 B1 FD | 	call	#__system___basic_print_string
17e10     00 12 06 F6 | 	mov	arg01, #0
17e14     44 53 B1 FD | 	call	#__system___getiolock_0616
17e18     FD 00 68 FC | 	wrlong	#0, result1
17e1c     27 12 06 F6 | 	mov	arg01, #39
17e20     00 14 06 F6 | 	mov	arg02, #0
17e24     78 BC B0 FD | 	call	#_printerror
17e28     E0 01 90 FD | 	jmp	#LR__1924
17e2c                 | LR__1920
17e2c                 | ' if numpar=0 then 
17e2c     0C 4E 05 F1 | 	add	fp, #12
17e30     A7 FE 09 FB | 	rdlong	result3, fp wz
17e34     0C 4E 85 F1 | 	sub	fp, #12
17e38     A8 00 90 5D |  if_ne	jmp	#LR__1921
17e3c     00 C0 1B FF 
17e40     00 26 06 F6 | 	mov	local01, ##931135488
17e44     51 00 00 FF 
17e48     90 E5 05 F1 | 	add	objptr, ##41872
17e4c     F2 12 02 FB | 	rdlong	arg01, objptr
17e50     51 00 00 FF 
17e54     90 E5 85 F1 | 	sub	objptr, ##41872
17e58     09 13 52 F6 | 	abs	arg01, arg01 wc
17e5c     1F 28 C6 C9 |  if_b	decod	local02, #31
17e60     00 28 06 36 |  if_ae	mov	local02, #0
17e64     C8 20 B1 FD | 	call	#__system___float_fromuns
17e68     14 FB 61 F5 | 	xor	result1, local02
17e6c     FD 12 02 F6 | 	mov	arg01, result1
17e70     FF 7F 23 FF 
17e74     00 14 06 F6 | 	mov	arg02, ##1191181824
17e78     BC 26 B1 FD | 	call	#__system___float_div
17e7c     FD 14 02 F6 | 	mov	arg02, result1
17e80     13 13 02 F6 | 	mov	arg01, local01
17e84     DC 20 B1 FD | 	call	#__system___float_add
17e88     10 4E 05 F1 | 	add	fp, #16
17e8c     A7 FA 61 FC | 	wrlong	result1, fp
17e90                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17e90     10 4E 85 F1 | 	sub	fp, #16
17e94     1F FA 05 F4 | 	bitl	result1, #31
17e98     FD 12 02 F6 | 	mov	arg01, result1
17e9c     89 41 1D FF 
17ea0     6F 14 06 F6 | 	mov	arg02, ##981668463
17ea4     01 16 06 F6 | 	mov	arg03, #1
17ea8     BC 28 B1 FD | 	call	#__system___float_cmp
17eac     00 FA 55 F2 | 	cmps	result1, #0 wc
17eb0     10 4E 05 C1 |  if_b	add	fp, #16
17eb4     A7 00 68 CC |  if_b	wrlong	#0, fp
17eb8     10 4E 85 C1 |  if_b	sub	fp, #16
17ebc     10 4E 05 F1 | 	add	fp, #16
17ec0     A7 26 02 FB | 	rdlong	local01, fp
17ec4     10 4E 85 F1 | 	sub	fp, #16
17ec8     A7 26 62 FC | 	wrlong	local01, fp
17ecc     08 4E 05 F1 | 	add	fp, #8
17ed0     A7 3C 68 FC | 	wrlong	#30, fp
17ed4     08 4E 85 F1 | 	sub	fp, #8
17ed8     A7 12 02 F6 | 	mov	arg01, fp
17edc     64 59 BF FD | 	call	#_push
17ee0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17ee0     28 01 90 FD | 	jmp	#LR__1924
17ee4                 | LR__1921
17ee4     C4 58 BF FD | 	call	#_pop
17ee8     A7 FA 61 FC | 	wrlong	result1, fp
17eec     04 4E 05 F1 | 	add	fp, #4
17ef0     A7 FC 61 FC | 	wrlong	result2, fp
17ef4     04 4E 05 F1 | 	add	fp, #4
17ef8     A7 FE 61 FC | 	wrlong	result3, fp
17efc                 | ' t1=pop()
17efc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17efc     08 4E 85 F1 | 	sub	fp, #8
17f00     1C FE 0D F2 | 	cmp	result3, #28 wz
17f04     08 4E 05 51 |  if_ne	add	fp, #8
17f08     A7 26 02 5B |  if_ne	rdlong	local01, fp
17f0c     08 4E 85 51 |  if_ne	sub	fp, #8
17f10     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17f14     E8 00 90 5D |  if_ne	jmp	#LR__1923
17f18     A7 26 02 FB | 	rdlong	local01, fp
17f1c     52 00 00 FF 
17f20     44 E5 05 F1 | 	add	objptr, ##42308
17f24     F2 26 62 FC | 	wrlong	local01, objptr
17f28                 | '   q=t1.result.uresult
17f28                 | '   if q<7 then 
17f28     52 00 00 FF 
17f2c     44 E5 85 F1 | 	sub	objptr, ##42308
17f30     07 26 56 F2 | 	cmps	local01, #7 wc
17f34     B8 00 90 3D |  if_ae	jmp	#LR__1922
17f38     00 C0 1B FF 
17f3c     00 26 06 F6 | 	mov	local01, ##931135488
17f40     52 00 00 FF 
17f44     44 E5 05 F1 | 	add	objptr, ##42308
17f48     F2 16 02 FB | 	rdlong	arg03, objptr
17f4c     02 16 66 F0 | 	shl	arg03, #2
17f50     B4 E5 85 F1 | 	sub	objptr, #436
17f54     F2 16 02 F1 | 	add	arg03, objptr
17f58     0B 13 02 FB | 	rdlong	arg01, arg03
17f5c     51 00 00 FF 
17f60     90 E5 85 F1 | 	sub	objptr, ##41872
17f64     09 13 52 F6 | 	abs	arg01, arg01 wc
17f68     1F 28 C6 C9 |  if_b	decod	local02, #31
17f6c     00 28 06 36 |  if_ae	mov	local02, #0
17f70     BC 1F B1 FD | 	call	#__system___float_fromuns
17f74     14 FB 61 F5 | 	xor	result1, local02
17f78     FD 12 02 F6 | 	mov	arg01, result1
17f7c     FF 7F 23 FF 
17f80     00 14 06 F6 | 	mov	arg02, ##1191181824
17f84     B0 25 B1 FD | 	call	#__system___float_div
17f88     FD 14 02 F6 | 	mov	arg02, result1
17f8c     13 13 02 F6 | 	mov	arg01, local01
17f90     D0 1F B1 FD | 	call	#__system___float_add
17f94     10 4E 05 F1 | 	add	fp, #16
17f98     A7 FA 61 FC | 	wrlong	result1, fp
17f9c                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17f9c     10 4E 85 F1 | 	sub	fp, #16
17fa0     1F FA 05 F4 | 	bitl	result1, #31
17fa4     FD 12 02 F6 | 	mov	arg01, result1
17fa8     89 41 1D FF 
17fac     6F 14 06 F6 | 	mov	arg02, ##981668463
17fb0     01 16 06 F6 | 	mov	arg03, #1
17fb4     B0 27 B1 FD | 	call	#__system___float_cmp
17fb8     00 FA 55 F2 | 	cmps	result1, #0 wc
17fbc     10 4E 05 C1 |  if_b	add	fp, #16
17fc0     A7 00 68 CC |  if_b	wrlong	#0, fp
17fc4     10 4E 85 C1 |  if_b	sub	fp, #16
17fc8     10 4E 05 F1 | 	add	fp, #16
17fcc     A7 26 02 FB | 	rdlong	local01, fp
17fd0     10 4E 85 F1 | 	sub	fp, #16
17fd4     A7 26 62 FC | 	wrlong	local01, fp
17fd8     08 4E 05 F1 | 	add	fp, #8
17fdc     A7 3C 68 FC | 	wrlong	#30, fp
17fe0     08 4E 85 F1 | 	sub	fp, #8
17fe4     A7 12 02 F6 | 	mov	arg01, fp
17fe8     58 58 BF FD | 	call	#_push
17fec                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17fec     1C 00 90 FD | 	jmp	#LR__1924
17ff0                 | LR__1922
17ff0     29 12 06 F6 | 	mov	arg01, #41
17ff4     00 14 06 F6 | 	mov	arg02, #0
17ff8     A4 BA B0 FD | 	call	#_printerror
17ffc                 | '      printerror(41) : return
17ffc     0C 00 90 FD | 	jmp	#LR__1924
18000                 | LR__1923
18000     29 12 06 F6 | 	mov	arg01, #41
18004     00 14 06 F6 | 	mov	arg02, #0
18008     94 BA B0 FD | 	call	#_printerror
1800c                 | LR__1924
1800c     A7 F0 03 F6 | 	mov	ptra, fp
18010     B2 00 A0 FD | 	call	#popregs_
18014                 | _do_padz_ret
18014     2D 00 64 FD | 	ret
18018                 | 
18018                 | ' 
18018                 | ' '-------------------- paper
18018                 | ' 
18018                 | ' sub do_paper
18018                 | _do_paper
18018     03 4A 05 F6 | 	mov	COUNT_, #3
1801c     A8 00 A0 FD | 	call	#pushregs_
18020     88 57 BF FD | 	call	#_pop
18024     FD 26 02 F6 | 	mov	local01, result1
18028     FE 28 02 F6 | 	mov	local02, result2
1802c     FF 2A 02 F6 | 	mov	local03, result3
18030                 | ' t1=pop() 
18030                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
18030     1E 2A 0E F2 | 	cmp	local03, #30 wz
18034     10 00 90 5D |  if_ne	jmp	#LR__1930
18038     13 13 02 F6 | 	mov	arg01, local01
1803c     00 14 06 F6 | 	mov	arg02, #0
18040     B8 27 B1 FD | 	call	#__system___float_tointeger
18044     FD 26 02 F6 | 	mov	local01, result1
18048                 | LR__1930
18048                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
18048     1F 2A 0E F2 | 	cmp	local03, #31 wz
1804c     18 00 90 5D |  if_ne	jmp	#LR__1931
18050     13 13 02 F6 | 	mov	arg01, local01
18054     E8 2A B1 FD | 	call	#__system____builtin_atof
18058     FD 12 02 F6 | 	mov	arg01, result1
1805c     00 14 06 F6 | 	mov	arg02, #0
18060     98 27 B1 FD | 	call	#__system___float_tointeger
18064     FD 26 02 F6 | 	mov	local01, result1
18068                 | LR__1931
18068     37 00 00 FF 
1806c     38 E4 05 F1 | 	add	objptr, ##28216
18070     F2 26 62 FC | 	wrlong	local01, objptr
18074     04 E4 05 F1 | 	add	objptr, #4
18078     F2 12 02 FB | 	rdlong	arg01, objptr
1807c                 | ' 
1807c                 | ' write_color:=ff
1807c     36 00 00 FF 
18080     FB E5 85 F1 | 	sub	objptr, ##28155
18084     F2 12 62 FC | 	wrlong	arg01, objptr
18088                 | ' write_background:=bb
18088     04 E4 05 F1 | 	add	objptr, #4
1808c     F2 26 62 FC | 	wrlong	local01, objptr
18090     45 E4 85 F1 | 	sub	objptr, #69
18094     A7 F0 03 F6 | 	mov	ptra, fp
18098     B2 00 A0 FD | 	call	#popregs_
1809c                 | _do_paper_ret
1809c     2D 00 64 FD | 	ret
180a0                 | 
180a0                 | ' 
180a0                 | ' '-------------------- peek
180a0                 | ' 
180a0                 | ' sub do_peek
180a0                 | _do_peek
180a0     00 4A 05 F6 | 	mov	COUNT_, #0
180a4     A8 00 A0 FD | 	call	#pushregs_
180a8     14 F0 07 F1 | 	add	ptra, #20
180ac     FC 56 BF FD | 	call	#_pop
180b0     A7 FA 61 FC | 	wrlong	result1, fp
180b4     04 4E 05 F1 | 	add	fp, #4
180b8     A7 FC 61 FC | 	wrlong	result2, fp
180bc     04 4E 05 F1 | 	add	fp, #4
180c0     A7 FE 61 FC | 	wrlong	result3, fp
180c4     08 4E 85 F1 | 	sub	fp, #8
180c8     A7 12 02 F6 | 	mov	arg01, fp
180cc     C0 58 BF FD | 	call	#_converttoint
180d0     0C 4E 05 F1 | 	add	fp, #12
180d4     A7 FA 61 FC | 	wrlong	result1, fp
180d8                 | ' 
180d8                 | ' t1=pop()
180d8                 | ' a=converttoint(t1)
180d8                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
180d8     0C 4E 85 F1 | 	sub	fp, #12
180dc     00 04 00 FF 
180e0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
180e4     1C 00 90 3D |  if_ae	jmp	#LR__1940
180e8     0C 4E 05 F1 | 	add	fp, #12
180ec     A7 12 02 FB | 	rdlong	arg01, fp
180f0     09 FB C1 FA | 	rdbyte	result1, arg01
180f4     04 4E 05 F1 | 	add	fp, #4
180f8     A7 FA 61 FC | 	wrlong	result1, fp
180fc     10 4E 85 F1 | 	sub	fp, #16
18100     20 00 90 FD | 	jmp	#LR__1941
18104                 | LR__1940
18104     0C 4E 05 F1 | 	add	fp, #12
18108     A7 12 02 FB | 	rdlong	arg01, fp
1810c     0C 4E 85 F1 | 	sub	fp, #12
18110     04 BC B0 FD | 	call	#_pspeek
18114     FD FA E1 F8 | 	getbyte	result1, result1, #0
18118     10 4E 05 F1 | 	add	fp, #16
1811c     A7 FA 61 FC | 	wrlong	result1, fp
18120     10 4E 85 F1 | 	sub	fp, #16
18124                 | LR__1941
18124     08 4E 05 F1 | 	add	fp, #8
18128     A7 3A 68 FC | 	wrlong	#29, fp
1812c     08 4E 05 F1 | 	add	fp, #8
18130     A7 12 02 FB | 	rdlong	arg01, fp
18134     10 4E 85 F1 | 	sub	fp, #16
18138     A7 12 62 FC | 	wrlong	arg01, fp
1813c     A7 12 02 F6 | 	mov	arg01, fp
18140     00 57 BF FD | 	call	#_push
18144     A7 F0 03 F6 | 	mov	ptra, fp
18148     B2 00 A0 FD | 	call	#popregs_
1814c                 | _do_peek_ret
1814c     2D 00 64 FD | 	ret
18150                 | 
18150                 | ' 
18150                 | ' '-------------------- pinfloat
18150                 | ' 
18150                 | ' sub do_pinfloat
18150                 | _do_pinfloat
18150     00 4A 05 F6 | 	mov	COUNT_, #0
18154     A8 00 A0 FD | 	call	#pushregs_
18158     0C F0 07 F1 | 	add	ptra, #12
1815c     4C 56 BF FD | 	call	#_pop
18160     A7 FA 61 FC | 	wrlong	result1, fp
18164     04 4E 05 F1 | 	add	fp, #4
18168     A7 FC 61 FC | 	wrlong	result2, fp
1816c     04 4E 05 F1 | 	add	fp, #4
18170     A7 FE 61 FC | 	wrlong	result3, fp
18174     08 4E 85 F1 | 	sub	fp, #8
18178     A7 12 02 F6 | 	mov	arg01, fp
1817c     10 58 BF FD | 	call	#_converttoint
18180     50 FA 61 FD | 	fltl	result1
18184     A7 F0 03 F6 | 	mov	ptra, fp
18188     B2 00 A0 FD | 	call	#popregs_
1818c                 | _do_pinfloat_ret
1818c     2D 00 64 FD | 	ret
18190                 | 
18190                 | ' 
18190                 | ' '-------------------- pinhi
18190                 | ' 
18190                 | ' sub do_pinhi
18190                 | _do_pinhi
18190     00 4A 05 F6 | 	mov	COUNT_, #0
18194     A8 00 A0 FD | 	call	#pushregs_
18198     0C F0 07 F1 | 	add	ptra, #12
1819c     0C 56 BF FD | 	call	#_pop
181a0     A7 FA 61 FC | 	wrlong	result1, fp
181a4     04 4E 05 F1 | 	add	fp, #4
181a8     A7 FC 61 FC | 	wrlong	result2, fp
181ac     04 4E 05 F1 | 	add	fp, #4
181b0     A7 FE 61 FC | 	wrlong	result3, fp
181b4     08 4E 85 F1 | 	sub	fp, #8
181b8     A7 12 02 F6 | 	mov	arg01, fp
181bc     D0 57 BF FD | 	call	#_converttoint
181c0     59 FA 61 FD | 	drvh	result1
181c4     A7 F0 03 F6 | 	mov	ptra, fp
181c8     B2 00 A0 FD | 	call	#popregs_
181cc                 | _do_pinhi_ret
181cc     2D 00 64 FD | 	ret
181d0                 | 
181d0                 | ' 
181d0                 | ' '-------------------- pinlo
181d0                 | ' 
181d0                 | ' sub do_pinlo
181d0                 | _do_pinlo
181d0     00 4A 05 F6 | 	mov	COUNT_, #0
181d4     A8 00 A0 FD | 	call	#pushregs_
181d8     0C F0 07 F1 | 	add	ptra, #12
181dc     CC 55 BF FD | 	call	#_pop
181e0     A7 FA 61 FC | 	wrlong	result1, fp
181e4     04 4E 05 F1 | 	add	fp, #4
181e8     A7 FC 61 FC | 	wrlong	result2, fp
181ec     04 4E 05 F1 | 	add	fp, #4
181f0     A7 FE 61 FC | 	wrlong	result3, fp
181f4     08 4E 85 F1 | 	sub	fp, #8
181f8     A7 12 02 F6 | 	mov	arg01, fp
181fc     90 57 BF FD | 	call	#_converttoint
18200     58 FA 61 FD | 	drvl	result1
18204     A7 F0 03 F6 | 	mov	ptra, fp
18208     B2 00 A0 FD | 	call	#popregs_
1820c                 | _do_pinlo_ret
1820c     2D 00 64 FD | 	ret
18210                 | 
18210                 | ' 
18210                 | ' '-------------------- pinread
18210                 | ' 
18210                 | ' sub do_pinread
18210                 | _do_pinread
18210     00 4A 05 F6 | 	mov	COUNT_, #0
18214     A8 00 A0 FD | 	call	#pushregs_
18218     0C F0 07 F1 | 	add	ptra, #12
1821c     8C 55 BF FD | 	call	#_pop
18220     A7 FA 61 FC | 	wrlong	result1, fp
18224     04 4E 05 F1 | 	add	fp, #4
18228     A7 FC 61 FC | 	wrlong	result2, fp
1822c     04 4E 05 F1 | 	add	fp, #4
18230     A7 FE 61 FC | 	wrlong	result3, fp
18234     08 4E 85 F1 | 	sub	fp, #8
18238     A7 12 02 F6 | 	mov	arg01, fp
1823c     50 57 BF FD | 	call	#_converttoint
18240     FD 12 02 F6 | 	mov	arg01, result1
18244     20 12 CE F7 | 	test	arg01, #32 wz
18248     FF FB 01 56 |  if_ne	mov	result1, inb
1824c     FE FB 01 A6 |  if_e	mov	result1, ina
18250     09 FB 41 F0 | 	shr	result1, arg01
18254     06 12 46 F0 | 	shr	arg01, #6
18258     09 FB 41 F7 | 	zerox	result1, arg01
1825c     52 00 00 FF 
18260     4C E5 05 F1 | 	add	objptr, ##42316
18264     F2 FA 61 FC | 	wrlong	result1, objptr
18268     52 00 00 FF 
1826c     4C E5 85 F1 | 	sub	objptr, ##42316
18270     08 4E 05 F1 | 	add	fp, #8
18274     A7 3A 68 FC | 	wrlong	#29, fp
18278     08 4E 85 F1 | 	sub	fp, #8
1827c     A7 08 68 FC | 	wrlong	#4, fp
18280     A7 12 02 F6 | 	mov	arg01, fp
18284     BC 55 BF FD | 	call	#_push
18288     A7 F0 03 F6 | 	mov	ptra, fp
1828c     B2 00 A0 FD | 	call	#popregs_
18290                 | _do_pinread_ret
18290     2D 00 64 FD | 	ret
18294                 | 
18294                 | ' 
18294                 | ' '-------------------- pinstart
18294                 | ' 
18294                 | ' sub do_pinstart
18294                 | _do_pinstart
18294     03 4A 05 F6 | 	mov	COUNT_, #3
18298     A8 00 A0 FD | 	call	#pushregs_
1829c     30 F0 07 F1 | 	add	ptra, #48
182a0     08 55 BF FD | 	call	#_pop
182a4     FD 16 02 F6 | 	mov	arg03, result1
182a8     FE 14 02 F6 | 	mov	arg02, result2
182ac     FF 18 02 F6 | 	mov	arg04, result3
182b0     A7 16 62 FC | 	wrlong	arg03, fp
182b4     04 4E 05 F1 | 	add	fp, #4
182b8     A7 14 62 FC | 	wrlong	arg02, fp
182bc     04 4E 05 F1 | 	add	fp, #4
182c0     A7 18 62 FC | 	wrlong	arg04, fp
182c4     08 4E 85 F1 | 	sub	fp, #8
182c8     E0 54 BF FD | 	call	#_pop
182cc     FD 16 02 F6 | 	mov	arg03, result1
182d0     FE 14 02 F6 | 	mov	arg02, result2
182d4     FF 18 02 F6 | 	mov	arg04, result3
182d8     0C 4E 05 F1 | 	add	fp, #12
182dc     A7 16 62 FC | 	wrlong	arg03, fp
182e0     04 4E 05 F1 | 	add	fp, #4
182e4     A7 14 62 FC | 	wrlong	arg02, fp
182e8     04 4E 05 F1 | 	add	fp, #4
182ec     A7 18 62 FC | 	wrlong	arg04, fp
182f0     14 4E 85 F1 | 	sub	fp, #20
182f4     B4 54 BF FD | 	call	#_pop
182f8     FD 16 02 F6 | 	mov	arg03, result1
182fc     FE 14 02 F6 | 	mov	arg02, result2
18300     FF 18 02 F6 | 	mov	arg04, result3
18304     18 4E 05 F1 | 	add	fp, #24
18308     A7 16 62 FC | 	wrlong	arg03, fp
1830c     04 4E 05 F1 | 	add	fp, #4
18310     A7 14 62 FC | 	wrlong	arg02, fp
18314     04 4E 05 F1 | 	add	fp, #4
18318     A7 18 62 FC | 	wrlong	arg04, fp
1831c     20 4E 85 F1 | 	sub	fp, #32
18320     88 54 BF FD | 	call	#_pop
18324     FF 16 02 F6 | 	mov	arg03, result3
18328     24 4E 05 F1 | 	add	fp, #36
1832c     A7 FA 61 FC | 	wrlong	result1, fp
18330     04 4E 05 F1 | 	add	fp, #4
18334     A7 FC 61 FC | 	wrlong	result2, fp
18338     04 4E 05 F1 | 	add	fp, #4
1833c     A7 16 62 FC | 	wrlong	arg03, fp
18340     08 4E 85 F1 | 	sub	fp, #8
18344     A7 12 02 F6 | 	mov	arg01, fp
18348     24 4E 85 F1 | 	sub	fp, #36
1834c     40 56 BF FD | 	call	#_converttoint
18350     FD 26 02 F6 | 	mov	local01, result1
18354     18 4E 05 F1 | 	add	fp, #24
18358     A7 12 02 F6 | 	mov	arg01, fp
1835c     18 4E 85 F1 | 	sub	fp, #24
18360     2C 56 BF FD | 	call	#_converttoint
18364     FD 28 02 F6 | 	mov	local02, result1
18368     0C 4E 05 F1 | 	add	fp, #12
1836c     A7 12 02 F6 | 	mov	arg01, fp
18370     0C 4E 85 F1 | 	sub	fp, #12
18374     18 56 BF FD | 	call	#_converttoint
18378     FD 2A 02 F6 | 	mov	local03, result1
1837c     A7 12 02 F6 | 	mov	arg01, fp
18380     0C 56 BF FD | 	call	#_converttoint
18384     40 26 62 FD | 	dirl	local01
18388     13 29 02 FC | 	wrpin	local02, local01
1838c     13 2B 12 FC | 	wxpin	local03, local01
18390     13 FB 21 FC | 	wypin	result1, local01
18394     41 26 62 FD | 	dirh	local01
18398     A7 F0 03 F6 | 	mov	ptra, fp
1839c     B2 00 A0 FD | 	call	#popregs_
183a0                 | _do_pinstart_ret
183a0     2D 00 64 FD | 	ret
183a4                 | 
183a4                 | ' 
183a4                 | ' '-------------------- pintoggle
183a4                 | ' 
183a4                 | ' sub do_pintoggle
183a4                 | _do_pintoggle
183a4     00 4A 05 F6 | 	mov	COUNT_, #0
183a8     A8 00 A0 FD | 	call	#pushregs_
183ac     0C F0 07 F1 | 	add	ptra, #12
183b0     F8 53 BF FD | 	call	#_pop
183b4     A7 FA 61 FC | 	wrlong	result1, fp
183b8     04 4E 05 F1 | 	add	fp, #4
183bc     A7 FC 61 FC | 	wrlong	result2, fp
183c0     04 4E 05 F1 | 	add	fp, #4
183c4     A7 FE 61 FC | 	wrlong	result3, fp
183c8     08 4E 85 F1 | 	sub	fp, #8
183cc     A7 12 02 F6 | 	mov	arg01, fp
183d0     BC 55 BF FD | 	call	#_converttoint
183d4     5F FA 61 FD | 	drvnot	result1
183d8     A7 F0 03 F6 | 	mov	ptra, fp
183dc     B2 00 A0 FD | 	call	#popregs_
183e0                 | _do_pintoggle_ret
183e0     2D 00 64 FD | 	ret
183e4                 | 
183e4                 | ' 
183e4                 | ' '-------------------- pinwrite
183e4                 | ' 
183e4                 | ' sub do_pinwrite
183e4                 | _do_pinwrite
183e4     01 4A 05 F6 | 	mov	COUNT_, #1
183e8     A8 00 A0 FD | 	call	#pushregs_
183ec     18 F0 07 F1 | 	add	ptra, #24
183f0     B8 53 BF FD | 	call	#_pop
183f4     FD 14 02 F6 | 	mov	arg02, result1
183f8     FE 12 02 F6 | 	mov	arg01, result2
183fc     FF 26 02 F6 | 	mov	local01, result3
18400     A7 14 62 FC | 	wrlong	arg02, fp
18404     04 4E 05 F1 | 	add	fp, #4
18408     A7 12 62 FC | 	wrlong	arg01, fp
1840c     04 4E 05 F1 | 	add	fp, #4
18410     A7 26 62 FC | 	wrlong	local01, fp
18414     08 4E 85 F1 | 	sub	fp, #8
18418     90 53 BF FD | 	call	#_pop
1841c     FF 26 02 F6 | 	mov	local01, result3
18420     0C 4E 05 F1 | 	add	fp, #12
18424     A7 FA 61 FC | 	wrlong	result1, fp
18428     04 4E 05 F1 | 	add	fp, #4
1842c     A7 FC 61 FC | 	wrlong	result2, fp
18430     04 4E 05 F1 | 	add	fp, #4
18434     A7 26 62 FC | 	wrlong	local01, fp
18438     08 4E 85 F1 | 	sub	fp, #8
1843c     A7 12 02 F6 | 	mov	arg01, fp
18440     0C 4E 85 F1 | 	sub	fp, #12
18444     48 55 BF FD | 	call	#_converttoint
18448     FD 26 02 F6 | 	mov	local01, result1
1844c     A7 12 02 F6 | 	mov	arg01, fp
18450     3C 55 BF FD | 	call	#_converttoint
18454     FD 14 02 F6 | 	mov	arg02, result1
18458     13 13 02 F6 | 	mov	arg01, local01
1845c     0C F2 B0 FD | 	call	#__system___pinwrite
18460     A7 F0 03 F6 | 	mov	ptra, fp
18464     B2 00 A0 FD | 	call	#popregs_
18468                 | _do_pinwrite_ret
18468     2D 00 64 FD | 	ret
1846c                 | 
1846c                 | ' 
1846c                 | ' '-------------------- play
1846c                 | ' 
1846c                 | ' sub do_play
1846c                 | _do_play
1846c     08 4A 05 F6 | 	mov	COUNT_, #8
18470     A8 00 A0 FD | 	call	#pushregs_
18474     7C F0 07 F1 | 	add	ptra, #124
18478     68 4E 05 F1 | 	add	fp, #104
1847c     77 CC A1 FF 
18480     A7 7C 6B FC | 	wrlong	##1134096318, fp
18484                 | ' speed_coeff=305.873
18484                 | ' 
18484                 | ' for i=0 to 8 : params(i)=-2.0 : next i
18484     64 4E 85 F1 | 	sub	fp, #100
18488     A7 00 68 FC | 	wrlong	#0, fp
1848c     97 18 48 FB | 	callpa	#(@LR__1951-@LR__1950)>>2,fcache_load_ptr_
18490                 | LR__1950
18490     A7 16 02 FB | 	rdlong	arg03, fp
18494     02 16 66 F0 | 	shl	arg03, #2
18498     34 4E 05 F1 | 	add	fp, #52
1849c     A7 16 02 F1 | 	add	arg03, fp
184a0     00 00 E0 FF 
184a4     0B 01 68 FC | 	wrlong	##-1073741824, arg03
184a8     34 4E 85 F1 | 	sub	fp, #52
184ac     A7 26 02 FB | 	rdlong	local01, fp
184b0     01 26 06 F1 | 	add	local01, #1
184b4     A7 26 62 FC | 	wrlong	local01, fp
184b8     09 26 56 F2 | 	cmps	local01, #9 wc
184bc     D0 FF 9F CD |  if_b	jmp	#LR__1950
184c0                 | LR__1951
184c0     04 4E 85 F1 | 	sub	fp, #4
184c4     4A 00 00 FF 
184c8     80 E4 05 F1 | 	add	objptr, ##38016
184cc     F2 28 02 FB | 	rdlong	local02, objptr
184d0     14 2B 02 F6 | 	mov	local03, local02
184d4     01 2A 66 F0 | 	shl	local03, #1
184d8     14 2B 02 F1 | 	add	local03, local02
184dc     02 2A 66 F0 | 	shl	local03, #2
184e0     03 00 00 FF 
184e4     04 E4 85 F1 | 	sub	objptr, ##1540
184e8     F2 2A 02 F1 | 	add	local03, objptr
184ec     15 2D 02 FB | 	rdlong	local04, local03
184f0     A7 2C 62 FC | 	wrlong	local04, fp
184f4                 | ' numpar=compiledline(lineptr_e).result.uresult
184f4                 | ' for i=numpar to 1 step -1 
184f4     04 4E 05 F1 | 	add	fp, #4
184f8     A7 2C 62 FC | 	wrlong	local04, fp
184fc     04 4E 85 F1 | 	sub	fp, #4
18500     47 00 00 FF 
18504     7C E4 85 F1 | 	sub	objptr, ##36476
18508                 | LR__1952
18508     A0 52 BF FD | 	call	#_pop
1850c     5C 4E 05 F1 | 	add	fp, #92
18510     A7 FA 61 FC | 	wrlong	result1, fp
18514     04 4E 05 F1 | 	add	fp, #4
18518     A7 FC 61 FC | 	wrlong	result2, fp
1851c     04 4E 05 F1 | 	add	fp, #4
18520     A7 FE 61 FC | 	wrlong	result3, fp
18524     60 4E 85 F1 | 	sub	fp, #96
18528     A7 2A 02 FB | 	rdlong	local03, fp
1852c     01 2A 86 F1 | 	sub	local03, #1
18530     02 2A 66 F0 | 	shl	local03, #2
18534     34 4E 05 F1 | 	add	fp, #52
18538     A7 2A 02 F1 | 	add	local03, fp
1853c     24 4E 05 F1 | 	add	fp, #36
18540     A7 2E 02 F6 | 	mov	local05, fp
18544     17 13 02 F6 | 	mov	arg01, local05
18548     5C 4E 85 F1 | 	sub	fp, #92
1854c     FC 54 BF FD | 	call	#_converttofloat
18550     15 FB 61 FC | 	wrlong	result1, local03
18554     04 4E 05 F1 | 	add	fp, #4
18558     A7 26 02 FB | 	rdlong	local01, fp
1855c     01 26 86 F1 | 	sub	local01, #1
18560     A7 26 62 FC | 	wrlong	local01, fp
18564     04 4E 85 F1 | 	sub	fp, #4
18568     01 26 56 F2 | 	cmps	local01, #1 wc
1856c     98 FF 9F 3D |  if_ae	jmp	#LR__1952
18570                 | ' 
18570                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
18570     38 4E 05 F1 | 	add	fp, #56
18574     A7 12 02 FB | 	rdlong	arg01, fp
18578     38 4E 85 F1 | 	sub	fp, #56
1857c     00 14 06 F6 | 	mov	arg02, #0
18580     01 16 06 F6 | 	mov	arg03, #1
18584     E0 21 B1 FD | 	call	#__system___float_cmp
18588     00 FA 55 F2 | 	cmps	result1, #0 wc
1858c     0C 4E 05 C1 |  if_b	add	fp, #12
18590     A7 00 68 CC |  if_b	wrlong	#0, fp
18594     0C 4E 85 C1 |  if_b	sub	fp, #12
18598     2C 00 90 CD |  if_b	jmp	#LR__1953
1859c     38 4E 05 F1 | 	add	fp, #56
185a0     A7 12 02 FB | 	rdlong	arg01, fp
185a4     38 4E 85 F1 | 	sub	fp, #56
185a8     01 14 06 F6 | 	mov	arg02, #1
185ac     4C 22 B1 FD | 	call	#__system___float_tointeger
185b0     FD 26 52 F6 | 	abs	local01, result1 wc
185b4     07 26 06 F5 | 	and	local01, #7
185b8     13 27 82 F6 | 	negc	local01, local01
185bc     0C 4E 05 F1 | 	add	fp, #12
185c0     A7 26 62 FC | 	wrlong	local01, fp
185c4     0C 4E 85 F1 | 	sub	fp, #12
185c8                 | LR__1953
185c8                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
185c8     3C 4E 05 F1 | 	add	fp, #60
185cc     A7 12 02 FB | 	rdlong	arg01, fp
185d0     3C 4E 85 F1 | 	sub	fp, #60
185d4     00 14 06 F6 | 	mov	arg02, #0
185d8     01 16 06 F6 | 	mov	arg03, #1
185dc     88 21 B1 FD | 	call	#__system___float_cmp
185e0     00 FA 55 F2 | 	cmps	result1, #0 wc
185e4     40 00 90 3D |  if_ae	jmp	#LR__1954
185e8     0C 4E 05 F1 | 	add	fp, #12
185ec     A7 28 02 FB | 	rdlong	local02, fp
185f0     14 2B 02 F6 | 	mov	local03, local02
185f4     01 2A 66 F0 | 	shl	local03, #1
185f8     14 2B 02 F1 | 	add	local03, local02
185fc     03 2A 66 F0 | 	shl	local03, #3
18600     14 00 00 FF 
18604     38 E5 05 F1 | 	add	objptr, ##10552
18608     F2 2A 02 F1 | 	add	local03, objptr
1860c     15 31 02 FB | 	rdlong	local06, local03
18610     60 4E 05 F1 | 	add	fp, #96
18614     A7 30 62 FC | 	wrlong	local06, fp
18618     6C 4E 85 F1 | 	sub	fp, #108
1861c     14 00 00 FF 
18620     38 E5 85 F1 | 	sub	objptr, ##10552
18624     44 00 90 FD | 	jmp	#LR__1955
18628                 | LR__1954
18628     3C 4E 05 F1 | 	add	fp, #60
1862c     A7 2C 02 FB | 	rdlong	local04, fp
18630     30 4E 05 F1 | 	add	fp, #48
18634     A7 2C 62 FC | 	wrlong	local04, fp
18638     60 4E 85 F1 | 	sub	fp, #96
1863c     A7 28 02 FB | 	rdlong	local02, fp
18640     14 2B 02 F6 | 	mov	local03, local02
18644     01 2A 66 F0 | 	shl	local03, #1
18648     14 2B 02 F1 | 	add	local03, local02
1864c     03 2A 66 F0 | 	shl	local03, #3
18650     14 00 00 FF 
18654     38 E5 05 F1 | 	add	objptr, ##10552
18658     F2 2A 02 F1 | 	add	local03, objptr
1865c     0C 4E 85 F1 | 	sub	fp, #12
18660     15 2D 62 FC | 	wrlong	local04, local03
18664     14 00 00 FF 
18668     38 E5 85 F1 | 	sub	objptr, ##10552
1866c                 | LR__1955
1866c                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
1866c     40 4E 05 F1 | 	add	fp, #64
18670     A7 12 02 FB | 	rdlong	arg01, fp
18674     40 4E 85 F1 | 	sub	fp, #64
18678     00 14 06 F6 | 	mov	arg02, #0
1867c     01 16 06 F6 | 	mov	arg03, #1
18680     E4 20 B1 FD | 	call	#__system___float_cmp
18684     00 FA 55 F2 | 	cmps	result1, #0 wc
18688     24 00 90 CD |  if_b	jmp	#LR__1956
1868c     40 4E 05 F1 | 	add	fp, #64
18690     A7 12 02 FB | 	rdlong	arg01, fp
18694     40 4E 85 F1 | 	sub	fp, #64
18698     20 0E 23 FF 
1869c     00 14 06 F6 | 	mov	arg02, ##1176256512
186a0     01 16 66 F6 | 	neg	arg03, #1
186a4     C0 20 B1 FD | 	call	#__system___float_cmp
186a8     01 FA 55 F2 | 	cmps	result1, #1 wc
186ac     48 00 90 CD |  if_b	jmp	#LR__1957
186b0                 | LR__1956
186b0     0C 4E 05 F1 | 	add	fp, #12
186b4     A7 2A 02 FB | 	rdlong	local03, fp
186b8     15 33 02 F6 | 	mov	local07, local03
186bc     01 32 66 F0 | 	shl	local07, #1
186c0     15 33 02 F1 | 	add	local07, local03
186c4     03 32 66 F0 | 	shl	local07, #3
186c8     14 00 00 FF 
186cc     38 E5 05 F1 | 	add	objptr, ##10552
186d0     F2 32 02 F1 | 	add	local07, objptr
186d4     06 32 06 F1 | 	add	local07, #6
186d8     19 2F E2 FA | 	rdword	local05, local07
186dc     17 2D 32 F9 | 	getword	local04, local05, #0
186e0     1C 4E 05 F1 | 	add	fp, #28
186e4     A7 2C 62 FC | 	wrlong	local04, fp
186e8     28 4E 85 F1 | 	sub	fp, #40
186ec     14 00 00 FF 
186f0     38 E5 85 F1 | 	sub	objptr, ##10552
186f4     54 00 90 FD | 	jmp	#LR__1958
186f8                 | LR__1957
186f8     40 4E 05 F1 | 	add	fp, #64
186fc     A7 12 02 FB | 	rdlong	arg01, fp
18700     40 4E 85 F1 | 	sub	fp, #64
18704     01 14 06 F6 | 	mov	arg02, #1
18708     F0 20 B1 FD | 	call	#__system___float_tointeger
1870c     28 4E 05 F1 | 	add	fp, #40
18710     A7 FA 61 FC | 	wrlong	result1, fp
18714     1C 4E 85 F1 | 	sub	fp, #28
18718     A7 28 02 FB | 	rdlong	local02, fp
1871c     14 2B 02 F6 | 	mov	local03, local02
18720     01 2A 66 F0 | 	shl	local03, #1
18724     14 2B 02 F1 | 	add	local03, local02
18728     03 2A 66 F0 | 	shl	local03, #3
1872c     14 00 00 FF 
18730     38 E5 05 F1 | 	add	objptr, ##10552
18734     F2 2A 02 F1 | 	add	local03, objptr
18738     0C 4E 85 F1 | 	sub	fp, #12
1873c     06 2A 06 F1 | 	add	local03, #6
18740     15 FB 51 FC | 	wrword	result1, local03
18744     14 00 00 FF 
18748     38 E5 85 F1 | 	sub	objptr, ##10552
1874c                 | LR__1958
1874c                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
1874c     44 4E 05 F1 | 	add	fp, #68
18750     A7 12 02 FB | 	rdlong	arg01, fp
18754     44 4E 85 F1 | 	sub	fp, #68
18758     00 14 06 F6 | 	mov	arg02, #0
1875c     01 16 06 F6 | 	mov	arg03, #1
18760     04 20 B1 FD | 	call	#__system___float_cmp
18764     00 FA 55 F2 | 	cmps	result1, #0 wc
18768     24 00 90 CD |  if_b	jmp	#LR__1959
1876c     44 4E 05 F1 | 	add	fp, #68
18770     A7 12 02 FB | 	rdlong	arg01, fp
18774     44 4E 85 F1 | 	sub	fp, #68
18778     89 C1 20 FF 
1877c     6F 14 06 F6 | 	mov	arg02, ##1099108975
18780     01 16 66 F6 | 	neg	arg03, #1
18784     E0 1F B1 FD | 	call	#__system___float_cmp
18788     01 FA 55 F2 | 	cmps	result1, #1 wc
1878c     44 00 90 CD |  if_b	jmp	#LR__1960
18790                 | LR__1959
18790     0C 4E 05 F1 | 	add	fp, #12
18794     A7 28 02 FB | 	rdlong	local02, fp
18798     14 2B 02 F6 | 	mov	local03, local02
1879c     01 2A 66 F0 | 	shl	local03, #1
187a0     14 2B 02 F1 | 	add	local03, local02
187a4     03 2A 66 F0 | 	shl	local03, #3
187a8     14 00 00 FF 
187ac     38 E5 05 F1 | 	add	objptr, ##10552
187b0     F2 2A 02 F1 | 	add	local03, objptr
187b4     0C 2A 06 F1 | 	add	local03, #12
187b8     15 31 02 FB | 	rdlong	local06, local03
187bc     68 4E 05 F1 | 	add	fp, #104
187c0     A7 30 62 FC | 	wrlong	local06, fp
187c4     74 4E 85 F1 | 	sub	fp, #116
187c8     14 00 00 FF 
187cc     38 E5 85 F1 | 	sub	objptr, ##10552
187d0     48 00 90 FD | 	jmp	#LR__1961
187d4                 | LR__1960
187d4     44 4E 05 F1 | 	add	fp, #68
187d8     A7 2C 02 FB | 	rdlong	local04, fp
187dc     30 4E 05 F1 | 	add	fp, #48
187e0     A7 2C 62 FC | 	wrlong	local04, fp
187e4     68 4E 85 F1 | 	sub	fp, #104
187e8     A7 28 02 FB | 	rdlong	local02, fp
187ec     14 2B 02 F6 | 	mov	local03, local02
187f0     01 2A 66 F0 | 	shl	local03, #1
187f4     14 2B 02 F1 | 	add	local03, local02
187f8     03 2A 66 F0 | 	shl	local03, #3
187fc     14 00 00 FF 
18800     38 E5 05 F1 | 	add	objptr, ##10552
18804     F2 2A 02 F1 | 	add	local03, objptr
18808     0C 4E 85 F1 | 	sub	fp, #12
1880c     0C 2A 06 F1 | 	add	local03, #12
18810     15 2D 62 FC | 	wrlong	local04, local03
18814     14 00 00 FF 
18818     38 E5 85 F1 | 	sub	objptr, ##10552
1881c                 | LR__1961
1881c                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
1881c     48 4E 05 F1 | 	add	fp, #72
18820     A7 12 02 FB | 	rdlong	arg01, fp
18824     48 4E 85 F1 | 	sub	fp, #72
18828     00 14 06 F6 | 	mov	arg02, #0
1882c     01 16 06 F6 | 	mov	arg03, #1
18830     34 1F B1 FD | 	call	#__system___float_cmp
18834     00 FA 55 F2 | 	cmps	result1, #0 wc
18838     24 00 90 CD |  if_b	jmp	#LR__1962
1883c     48 4E 05 F1 | 	add	fp, #72
18840     A7 12 02 FB | 	rdlong	arg01, fp
18844     48 4E 85 F1 | 	sub	fp, #72
18848     00 00 21 FF 
1884c     00 14 06 F6 | 	mov	arg02, ##1107296256
18850     01 16 66 F6 | 	neg	arg03, #1
18854     10 1F B1 FD | 	call	#__system___float_cmp
18858     01 FA 55 F2 | 	cmps	result1, #1 wc
1885c     48 00 90 CD |  if_b	jmp	#LR__1963
18860                 | LR__1962
18860     0C 4E 05 F1 | 	add	fp, #12
18864     A7 2A 02 FB | 	rdlong	local03, fp
18868     15 33 02 F6 | 	mov	local07, local03
1886c     01 32 66 F0 | 	shl	local07, #1
18870     15 33 02 F1 | 	add	local07, local03
18874     03 32 66 F0 | 	shl	local07, #3
18878     14 00 00 FF 
1887c     38 E5 05 F1 | 	add	objptr, ##10552
18880     F2 32 02 F1 | 	add	local07, objptr
18884     04 32 06 F1 | 	add	local07, #4
18888     19 2F C2 FA | 	rdbyte	local05, local07
1888c     17 2D E2 F8 | 	getbyte	local04, local05, #0
18890     14 4E 05 F1 | 	add	fp, #20
18894     A7 2C 62 FC | 	wrlong	local04, fp
18898     20 4E 85 F1 | 	sub	fp, #32
1889c     14 00 00 FF 
188a0     38 E5 85 F1 | 	sub	objptr, ##10552
188a4     54 00 90 FD | 	jmp	#LR__1964
188a8                 | LR__1963
188a8     48 4E 05 F1 | 	add	fp, #72
188ac     A7 12 02 FB | 	rdlong	arg01, fp
188b0     48 4E 85 F1 | 	sub	fp, #72
188b4     01 14 06 F6 | 	mov	arg02, #1
188b8     40 1F B1 FD | 	call	#__system___float_tointeger
188bc     20 4E 05 F1 | 	add	fp, #32
188c0     A7 FA 61 FC | 	wrlong	result1, fp
188c4     14 4E 85 F1 | 	sub	fp, #20
188c8     A7 28 02 FB | 	rdlong	local02, fp
188cc     14 2B 02 F6 | 	mov	local03, local02
188d0     01 2A 66 F0 | 	shl	local03, #1
188d4     14 2B 02 F1 | 	add	local03, local02
188d8     03 2A 66 F0 | 	shl	local03, #3
188dc     14 00 00 FF 
188e0     38 E5 05 F1 | 	add	objptr, ##10552
188e4     F2 2A 02 F1 | 	add	local03, objptr
188e8     0C 4E 85 F1 | 	sub	fp, #12
188ec     04 2A 06 F1 | 	add	local03, #4
188f0     15 FB 41 FC | 	wrbyte	result1, local03
188f4     14 00 00 FF 
188f8     38 E5 85 F1 | 	sub	objptr, ##10552
188fc                 | LR__1964
188fc                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
188fc     4C 4E 05 F1 | 	add	fp, #76
18900     A7 12 02 FB | 	rdlong	arg01, fp
18904     4C 4E 85 F1 | 	sub	fp, #76
18908     00 14 06 F6 | 	mov	arg02, #0
1890c     01 16 06 F6 | 	mov	arg03, #1
18910     54 1E B1 FD | 	call	#__system___float_cmp
18914     00 FA 55 F2 | 	cmps	result1, #0 wc
18918     24 00 90 CD |  if_b	jmp	#LR__1965
1891c     4C 4E 05 F1 | 	add	fp, #76
18920     A7 12 02 FB | 	rdlong	arg01, fp
18924     4C 4E 85 F1 | 	sub	fp, #76
18928     00 80 20 FF 
1892c     00 14 06 F6 | 	mov	arg02, ##1090519040
18930     01 16 66 F6 | 	neg	arg03, #1
18934     30 1E B1 FD | 	call	#__system___float_cmp
18938     01 FA 55 F2 | 	cmps	result1, #1 wc
1893c     48 00 90 CD |  if_b	jmp	#LR__1966
18940                 | LR__1965
18940     0C 4E 05 F1 | 	add	fp, #12
18944     A7 2A 02 FB | 	rdlong	local03, fp
18948     15 33 02 F6 | 	mov	local07, local03
1894c     01 32 66 F0 | 	shl	local07, #1
18950     15 33 02 F1 | 	add	local07, local03
18954     03 32 66 F0 | 	shl	local07, #3
18958     14 00 00 FF 
1895c     38 E5 05 F1 | 	add	objptr, ##10552
18960     F2 32 02 F1 | 	add	local07, objptr
18964     05 32 06 F1 | 	add	local07, #5
18968     19 2F C2 FA | 	rdbyte	local05, local07
1896c     17 2D E2 F8 | 	getbyte	local04, local05, #0
18970     18 4E 05 F1 | 	add	fp, #24
18974     A7 2C 62 FC | 	wrlong	local04, fp
18978     24 4E 85 F1 | 	sub	fp, #36
1897c     14 00 00 FF 
18980     38 E5 85 F1 | 	sub	objptr, ##10552
18984     54 00 90 FD | 	jmp	#LR__1967
18988                 | LR__1966
18988     4C 4E 05 F1 | 	add	fp, #76
1898c     A7 12 02 FB | 	rdlong	arg01, fp
18990     4C 4E 85 F1 | 	sub	fp, #76
18994     01 14 06 F6 | 	mov	arg02, #1
18998     60 1E B1 FD | 	call	#__system___float_tointeger
1899c     24 4E 05 F1 | 	add	fp, #36
189a0     A7 FA 61 FC | 	wrlong	result1, fp
189a4     18 4E 85 F1 | 	sub	fp, #24
189a8     A7 28 02 FB | 	rdlong	local02, fp
189ac     14 2B 02 F6 | 	mov	local03, local02
189b0     01 2A 66 F0 | 	shl	local03, #1
189b4     14 2B 02 F1 | 	add	local03, local02
189b8     03 2A 66 F0 | 	shl	local03, #3
189bc     14 00 00 FF 
189c0     38 E5 05 F1 | 	add	objptr, ##10552
189c4     F2 2A 02 F1 | 	add	local03, objptr
189c8     0C 4E 85 F1 | 	sub	fp, #12
189cc     05 2A 06 F1 | 	add	local03, #5
189d0     15 FB 41 FC | 	wrbyte	result1, local03
189d4     14 00 00 FF 
189d8     38 E5 85 F1 | 	sub	objptr, ##10552
189dc                 | LR__1967
189dc                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
189dc     50 4E 05 F1 | 	add	fp, #80
189e0     A7 12 02 FB | 	rdlong	arg01, fp
189e4     50 4E 85 F1 | 	sub	fp, #80
189e8     00 14 06 F6 | 	mov	arg02, #0
189ec     01 16 06 F6 | 	mov	arg03, #1
189f0     74 1D B1 FD | 	call	#__system___float_cmp
189f4     00 FA 55 F2 | 	cmps	result1, #0 wc
189f8     24 00 90 CD |  if_b	jmp	#LR__1968
189fc     50 4E 05 F1 | 	add	fp, #80
18a00     A7 12 02 FB | 	rdlong	arg01, fp
18a04     50 4E 85 F1 | 	sub	fp, #80
18a08     00 3D 22 FF 
18a0c     00 14 06 F6 | 	mov	arg02, ##1148846080
18a10     01 16 66 F6 | 	neg	arg03, #1
18a14     50 1D B1 FD | 	call	#__system___float_cmp
18a18     01 FA 55 F2 | 	cmps	result1, #1 wc
18a1c     44 00 90 CD |  if_b	jmp	#LR__1969
18a20                 | LR__1968
18a20     0C 4E 05 F1 | 	add	fp, #12
18a24     A7 28 02 FB | 	rdlong	local02, fp
18a28     14 2B 02 F6 | 	mov	local03, local02
18a2c     01 2A 66 F0 | 	shl	local03, #1
18a30     14 2B 02 F1 | 	add	local03, local02
18a34     03 2A 66 F0 | 	shl	local03, #3
18a38     14 00 00 FF 
18a3c     38 E5 05 F1 | 	add	objptr, ##10552
18a40     F2 2A 02 F1 | 	add	local03, objptr
18a44     08 2A 06 F1 | 	add	local03, #8
18a48     15 31 02 FB | 	rdlong	local06, local03
18a4c     6C 4E 05 F1 | 	add	fp, #108
18a50     A7 30 62 FC | 	wrlong	local06, fp
18a54     78 4E 85 F1 | 	sub	fp, #120
18a58     14 00 00 FF 
18a5c     38 E5 85 F1 | 	sub	objptr, ##10552
18a60     48 00 90 FD | 	jmp	#LR__1970
18a64                 | LR__1969
18a64     50 4E 05 F1 | 	add	fp, #80
18a68     A7 30 02 FB | 	rdlong	local06, fp
18a6c     28 4E 05 F1 | 	add	fp, #40
18a70     A7 30 62 FC | 	wrlong	local06, fp
18a74     6C 4E 85 F1 | 	sub	fp, #108
18a78     A7 28 02 FB | 	rdlong	local02, fp
18a7c     14 2B 02 F6 | 	mov	local03, local02
18a80     01 2A 66 F0 | 	shl	local03, #1
18a84     14 2B 02 F1 | 	add	local03, local02
18a88     03 2A 66 F0 | 	shl	local03, #3
18a8c     14 00 00 FF 
18a90     38 E5 05 F1 | 	add	objptr, ##10552
18a94     F2 2A 02 F1 | 	add	local03, objptr
18a98     0C 4E 85 F1 | 	sub	fp, #12
18a9c     08 2A 06 F1 | 	add	local03, #8
18aa0     15 31 62 FC | 	wrlong	local06, local03
18aa4     14 00 00 FF 
18aa8     38 E5 85 F1 | 	sub	objptr, ##10552
18aac                 | LR__1970
18aac                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
18aac     54 4E 05 F1 | 	add	fp, #84
18ab0     A7 12 02 FB | 	rdlong	arg01, fp
18ab4     54 4E 85 F1 | 	sub	fp, #84
18ab8     00 C0 5F FF 
18abc     00 14 06 F6 | 	mov	arg02, ##-1082130432
18ac0     01 16 06 F6 | 	mov	arg03, #1
18ac4     A0 1C B1 FD | 	call	#__system___float_cmp
18ac8     00 FA 55 F2 | 	cmps	result1, #0 wc
18acc     24 00 90 CD |  if_b	jmp	#LR__1971
18ad0     54 4E 05 F1 | 	add	fp, #84
18ad4     A7 12 02 FB | 	rdlong	arg01, fp
18ad8     54 4E 85 F1 | 	sub	fp, #84
18adc     00 C0 1F FF 
18ae0     00 14 06 F6 | 	mov	arg02, ##1065353216
18ae4     01 16 66 F6 | 	neg	arg03, #1
18ae8     7C 1C B1 FD | 	call	#__system___float_cmp
18aec     01 FA 55 F2 | 	cmps	result1, #1 wc
18af0     44 00 90 CD |  if_b	jmp	#LR__1972
18af4                 | LR__1971
18af4     0C 4E 05 F1 | 	add	fp, #12
18af8     A7 28 02 FB | 	rdlong	local02, fp
18afc     14 2B 02 F6 | 	mov	local03, local02
18b00     01 2A 66 F0 | 	shl	local03, #1
18b04     14 2B 02 F1 | 	add	local03, local02
18b08     03 2A 66 F0 | 	shl	local03, #3
18b0c     14 00 00 FF 
18b10     38 E5 05 F1 | 	add	objptr, ##10552
18b14     F2 2A 02 F1 | 	add	local03, objptr
18b18     10 2A 06 F1 | 	add	local03, #16
18b1c     15 31 02 FB | 	rdlong	local06, local03
18b20     64 4E 05 F1 | 	add	fp, #100
18b24     A7 30 62 FC | 	wrlong	local06, fp
18b28     70 4E 85 F1 | 	sub	fp, #112
18b2c     14 00 00 FF 
18b30     38 E5 85 F1 | 	sub	objptr, ##10552
18b34     48 00 90 FD | 	jmp	#LR__1973
18b38                 | LR__1972
18b38     54 4E 05 F1 | 	add	fp, #84
18b3c     A7 30 02 FB | 	rdlong	local06, fp
18b40     1C 4E 05 F1 | 	add	fp, #28
18b44     A7 30 62 FC | 	wrlong	local06, fp
18b48     64 4E 85 F1 | 	sub	fp, #100
18b4c     A7 28 02 FB | 	rdlong	local02, fp
18b50     14 2B 02 F6 | 	mov	local03, local02
18b54     01 2A 66 F0 | 	shl	local03, #1
18b58     14 2B 02 F1 | 	add	local03, local02
18b5c     03 2A 66 F0 | 	shl	local03, #3
18b60     14 00 00 FF 
18b64     38 E5 05 F1 | 	add	objptr, ##10552
18b68     F2 2A 02 F1 | 	add	local03, objptr
18b6c     0C 4E 85 F1 | 	sub	fp, #12
18b70     10 2A 06 F1 | 	add	local03, #16
18b74     15 31 62 FC | 	wrlong	local06, local03
18b78     14 00 00 FF 
18b7c     38 E5 85 F1 | 	sub	objptr, ##10552
18b80                 | LR__1973
18b80                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
18b80     58 4E 05 F1 | 	add	fp, #88
18b84     A7 12 02 FB | 	rdlong	arg01, fp
18b88     58 4E 85 F1 | 	sub	fp, #88
18b8c     00 14 06 F6 | 	mov	arg02, #0
18b90     01 16 06 F6 | 	mov	arg03, #1
18b94     D0 1B B1 FD | 	call	#__system___float_cmp
18b98     00 FA 55 F2 | 	cmps	result1, #0 wc
18b9c     24 00 90 CD |  if_b	jmp	#LR__1974
18ba0     58 4E 05 F1 | 	add	fp, #88
18ba4     A7 12 02 FB | 	rdlong	arg01, fp
18ba8     58 4E 85 F1 | 	sub	fp, #88
18bac     80 BF 21 FF 
18bb0     00 14 06 F6 | 	mov	arg02, ##1132396544
18bb4     01 16 66 F6 | 	neg	arg03, #1
18bb8     AC 1B B1 FD | 	call	#__system___float_cmp
18bbc     01 FA 55 F2 | 	cmps	result1, #1 wc
18bc0     44 00 90 CD |  if_b	jmp	#LR__1975
18bc4                 | LR__1974
18bc4     0C 4E 05 F1 | 	add	fp, #12
18bc8     A7 2A 02 FB | 	rdlong	local03, fp
18bcc     15 33 02 F6 | 	mov	local07, local03
18bd0     01 32 66 F0 | 	shl	local07, #1
18bd4     15 33 02 F1 | 	add	local07, local03
18bd8     03 32 66 F0 | 	shl	local07, #3
18bdc     14 00 00 FF 
18be0     38 E5 05 F1 | 	add	objptr, ##10552
18be4     F2 32 02 F1 | 	add	local07, objptr
18be8     14 32 06 F1 | 	add	local07, #20
18bec     19 2D E2 FA | 	rdword	local04, local07
18bf0     20 4E 05 F1 | 	add	fp, #32
18bf4     A7 2C 62 FC | 	wrlong	local04, fp
18bf8     2C 4E 85 F1 | 	sub	fp, #44
18bfc     14 00 00 FF 
18c00     38 E5 85 F1 | 	sub	objptr, ##10552
18c04     54 00 90 FD | 	jmp	#LR__1976
18c08                 | LR__1975
18c08     58 4E 05 F1 | 	add	fp, #88
18c0c     A7 12 02 FB | 	rdlong	arg01, fp
18c10     58 4E 85 F1 | 	sub	fp, #88
18c14     01 14 06 F6 | 	mov	arg02, #1
18c18     E0 1B B1 FD | 	call	#__system___float_tointeger
18c1c     2C 4E 05 F1 | 	add	fp, #44
18c20     A7 FA 61 FC | 	wrlong	result1, fp
18c24     20 4E 85 F1 | 	sub	fp, #32
18c28     A7 28 02 FB | 	rdlong	local02, fp
18c2c     14 2B 02 F6 | 	mov	local03, local02
18c30     01 2A 66 F0 | 	shl	local03, #1
18c34     14 2B 02 F1 | 	add	local03, local02
18c38     03 2A 66 F0 | 	shl	local03, #3
18c3c     14 00 00 FF 
18c40     38 E5 05 F1 | 	add	objptr, ##10552
18c44     F2 2A 02 F1 | 	add	local03, objptr
18c48     0C 4E 85 F1 | 	sub	fp, #12
18c4c     14 2A 06 F1 | 	add	local03, #20
18c50     15 FB 51 FC | 	wrword	result1, local03
18c54     14 00 00 FF 
18c58     38 E5 85 F1 | 	sub	objptr, ##10552
18c5c                 | LR__1976
18c5c     6C 4E 05 F1 | 	add	fp, #108
18c60     A7 14 02 FB | 	rdlong	arg02, fp
18c64     6C 4E 85 F1 | 	sub	fp, #108
18c68     FC 16 20 FF 
18c6c     54 12 06 F6 | 	mov	arg01, ##1076754516
18c70     90 26 B1 FD | 	call	#__system____builtin_logbase
18c74     FD 2C 02 F6 | 	mov	local04, result1
18c78     1E 14 C6 F9 | 	decod	arg02, #30
18c7c     FC 16 20 FF 
18c80     54 12 06 F6 | 	mov	arg01, ##1076754516
18c84     7C 26 B1 FD | 	call	#__system____builtin_logbase
18c88     FD 14 02 F6 | 	mov	arg02, result1
18c8c     16 13 02 F6 | 	mov	arg01, local04
18c90     A4 18 B1 FD | 	call	#__system___float_div
18c94     FD 12 02 F6 | 	mov	arg01, result1
18c98     00 14 06 F6 | 	mov	arg02, #0
18c9c     5C 1B B1 FD | 	call	#__system___float_tointeger
18ca0     30 4E 05 F1 | 	add	fp, #48
18ca4     A7 FA 61 FC | 	wrlong	result1, fp
18ca8     1E 2C C6 F9 | 	decod	local04, #30
18cac     FD 12 02 F6 | 	mov	arg01, result1
18cb0     30 4E 85 F1 | 	sub	fp, #48
18cb4     06 12 06 F1 | 	add	arg01, #6
18cb8     09 13 52 F6 | 	abs	arg01, arg01 wc
18cbc     1F 34 C6 C9 |  if_b	decod	local08, #31
18cc0     00 34 06 36 |  if_ae	mov	local08, #0
18cc4     68 12 B1 FD | 	call	#__system___float_fromuns
18cc8     1A FB 61 F5 | 	xor	result1, local08
18ccc     FD 14 02 F6 | 	mov	arg02, result1
18cd0     16 13 02 F6 | 	mov	arg01, local04
18cd4     64 25 B1 FD | 	call	#__system____builtin_powf
18cd8     FD 12 02 F6 | 	mov	arg01, result1
18cdc     01 14 06 F6 | 	mov	arg02, #1
18ce0     18 1B B1 FD | 	call	#__system___float_tointeger
18ce4     10 4E 05 F1 | 	add	fp, #16
18ce8     A7 FA 61 FC | 	wrlong	result1, fp
18cec                 | ' skip=round(2^(lfreq+6))
18cec                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
18cec     10 4E 85 F1 | 	sub	fp, #16
18cf0     40 00 00 FF 
18cf4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
18cf8     30 00 90 CD |  if_b	jmp	#LR__1977
18cfc     10 4E 05 F1 | 	add	fp, #16
18d00     A7 26 02 FB | 	rdlong	local01, fp
18d04     13 2D 52 F6 | 	abs	local04, local01 wc
18d08     0F 2C 46 F0 | 	shr	local04, #15
18d0c     16 2D 82 F6 | 	negc	local04, local04
18d10     0C 4E 85 F1 | 	sub	fp, #12
18d14     A7 2C 62 FC | 	wrlong	local04, fp
18d18     0C 4E 05 F1 | 	add	fp, #12
18d1c     40 00 80 FF 
18d20     A7 00 68 FC | 	wrlong	##32768, fp
18d24     10 4E 85 F1 | 	sub	fp, #16
18d28     0C 00 90 FD | 	jmp	#LR__1978
18d2c                 | LR__1977
18d2c     04 4E 05 F1 | 	add	fp, #4
18d30     A7 02 68 FC | 	wrlong	#1, fp
18d34     04 4E 85 F1 | 	sub	fp, #4
18d38                 | LR__1978
18d38     6C 4E 05 F1 | 	add	fp, #108
18d3c     A7 14 02 FB | 	rdlong	arg02, fp
18d40     6C 4E 85 F1 | 	sub	fp, #108
18d44     3E 2C 25 FF 
18d48     3C 12 06 F6 | 	mov	arg01, ##1247312956
18d4c     E8 17 B1 FD | 	call	#__system___float_div
18d50     FD 2C 02 F6 | 	mov	local04, result1
18d54     04 4E 05 F1 | 	add	fp, #4
18d58     A7 12 02 FB | 	rdlong	arg01, fp
18d5c     04 4E 85 F1 | 	sub	fp, #4
18d60     09 13 52 F6 | 	abs	arg01, arg01 wc
18d64     1F 34 C6 C9 |  if_b	decod	local08, #31
18d68     00 34 06 36 |  if_ae	mov	local08, #0
18d6c     C0 11 B1 FD | 	call	#__system___float_fromuns
18d70     1A FB 61 F5 | 	xor	result1, local08
18d74     FD 26 02 F6 | 	mov	local01, result1
18d78     1E 28 C6 F9 | 	decod	local02, #30
18d7c     0C 12 06 F6 | 	mov	arg01, #12
18d80     30 4E 05 F1 | 	add	fp, #48
18d84     A7 30 02 FB | 	rdlong	local06, fp
18d88     30 4E 85 F1 | 	sub	fp, #48
18d8c     18 13 82 F1 | 	sub	arg01, local06
18d90     09 13 52 F6 | 	abs	arg01, arg01 wc
18d94     1F 34 C6 C9 |  if_b	decod	local08, #31
18d98     00 34 06 36 |  if_ae	mov	local08, #0
18d9c     90 11 B1 FD | 	call	#__system___float_fromuns
18da0     1A FB 61 F5 | 	xor	result1, local08
18da4     FD 14 02 F6 | 	mov	arg02, result1
18da8     14 13 02 F6 | 	mov	arg01, local02
18dac     8C 24 B1 FD | 	call	#__system____builtin_powf
18db0     FD 14 02 F6 | 	mov	arg02, result1
18db4     13 13 02 F6 | 	mov	arg01, local01
18db8     78 15 B1 FD | 	call	#__system___float_mul
18dbc     FD 14 02 F6 | 	mov	arg02, result1
18dc0     16 13 02 F6 | 	mov	arg01, local04
18dc4     70 17 B1 FD | 	call	#__system___float_div
18dc8     FD 12 02 F6 | 	mov	arg01, result1
18dcc     01 14 06 F6 | 	mov	arg02, #1
18dd0     28 1A B1 FD | 	call	#__system___float_tointeger
18dd4     34 4E 05 F1 | 	add	fp, #52
18dd8     A7 FA 61 FC | 	wrlong	result1, fp
18ddc     3E 2C 25 FF 
18de0     3C 2C 06 F6 | 	mov	local04, ##1247312956
18de4     34 4E 85 F1 | 	sub	fp, #52
18de8     FD 12 52 F6 | 	abs	arg01, result1 wc
18dec     1F 34 C6 C9 |  if_b	decod	local08, #31
18df0     00 34 06 36 |  if_ae	mov	local08, #0
18df4     38 11 B1 FD | 	call	#__system___float_fromuns
18df8     1A FB 61 F5 | 	xor	result1, local08
18dfc     FD 14 02 F6 | 	mov	arg02, result1
18e00     16 13 02 F6 | 	mov	arg01, local04
18e04     30 17 B1 FD | 	call	#__system___float_div
18e08     FD 2C 02 F6 | 	mov	local04, result1
18e0c     10 4E 05 F1 | 	add	fp, #16
18e10     A7 12 02 FB | 	rdlong	arg01, fp
18e14     10 4E 85 F1 | 	sub	fp, #16
18e18     09 13 52 F6 | 	abs	arg01, arg01 wc
18e1c     1F 34 C6 C9 |  if_b	decod	local08, #31
18e20     00 34 06 36 |  if_ae	mov	local08, #0
18e24     08 11 B1 FD | 	call	#__system___float_fromuns
18e28     1A FB 61 F5 | 	xor	result1, local08
18e2c     FD 12 02 F6 | 	mov	arg01, result1
18e30     00 40 24 FF 
18e34     00 14 06 F6 | 	mov	arg02, ##1216348160
18e38     FC 16 B1 FD | 	call	#__system___float_div
18e3c     FD 14 02 F6 | 	mov	arg02, result1
18e40     16 13 02 F6 | 	mov	arg01, local04
18e44     EC 14 B1 FD | 	call	#__system___float_mul
18e48     52 00 00 FF 
18e4c     18 E5 05 F1 | 	add	objptr, ##42264
18e50     F2 FA 61 FC | 	wrlong	result1, objptr
18e54     52 00 00 FF 
18e58     18 E5 85 F1 | 	sub	objptr, ##42264
18e5c     68 4E 05 F1 | 	add	fp, #104
18e60     A7 12 02 FB | 	rdlong	arg01, fp
18e64     10 4E 05 F1 | 	add	fp, #16
18e68     A7 14 02 FB | 	rdlong	arg02, fp
18e6c     78 4E 85 F1 | 	sub	fp, #120
18e70     C4 16 B1 FD | 	call	#__system___float_div
18e74     FD 12 02 F6 | 	mov	arg01, result1
18e78     01 14 06 F6 | 	mov	arg02, #1
18e7c     7C 19 B1 FD | 	call	#__system___float_tointeger
18e80     FD 2C 02 F6 | 	mov	local04, result1
18e84     14 4E 05 F1 | 	add	fp, #20
18e88     A7 2C 62 FC | 	wrlong	local04, fp
18e8c     5C 4E 05 F1 | 	add	fp, #92
18e90     A7 14 02 FB | 	rdlong	arg02, fp
18e94     70 4E 85 F1 | 	sub	fp, #112
18e98     00 00 23 FF 
18e9c     00 12 06 F6 | 	mov	arg01, ##1174405120
18ea0     90 14 B1 FD | 	call	#__system___float_mul
18ea4     FD 12 02 F6 | 	mov	arg01, result1
18ea8     01 14 06 F6 | 	mov	arg02, #1
18eac     4C 19 B1 FD | 	call	#__system___float_tointeger
18eb0     0D 2C C6 F9 | 	decod	local04, #13
18eb4     FD 2C 02 F1 | 	add	local04, result1
18eb8     18 4E 05 F1 | 	add	fp, #24
18ebc     A7 2C 62 FC | 	wrlong	local04, fp
18ec0     5C 4E 05 F1 | 	add	fp, #92
18ec4     A7 14 02 FB | 	rdlong	arg02, fp
18ec8     74 4E 85 F1 | 	sub	fp, #116
18ecc     00 3D 22 FF 
18ed0     00 12 06 F6 | 	mov	arg01, ##1148846080
18ed4     5C 14 B1 FD | 	call	#__system___float_mul
18ed8     FD 12 02 F6 | 	mov	arg01, result1
18edc     01 14 06 F6 | 	mov	arg02, #1
18ee0     18 19 B1 FD | 	call	#__system___float_tointeger
18ee4     1C 4E 05 F1 | 	add	fp, #28
18ee8     A7 FA 61 FC | 	wrlong	result1, fp
18eec     37 00 00 FF 
18ef0     10 E4 05 F1 | 	add	objptr, ##28176
18ef4     F2 2C 02 FB | 	rdlong	local04, objptr
18ef8     37 00 00 FF 
18efc     10 E4 85 F1 | 	sub	objptr, ##28176
18f00     10 4E 85 F1 | 	sub	fp, #16
18f04     A7 28 02 FB | 	rdlong	local02, fp
18f08     06 28 66 F0 | 	shl	local02, #6
18f0c     14 2D 02 F1 | 	add	local04, local02
18f10     04 4E 85 F1 | 	sub	fp, #4
18f14     A7 2C 62 FC | 	wrlong	local04, fp
18f18                 | ' period=round((3546895/freq)/(i*(2^(12-lfreq))))
18f18                 | ' realfreq=(3546895.0/period)*(skip/(256.0*1024.0)) 
18f18                 | ' speed=round(speed_coeff/slen)
18f18                 | ' ipan=8192+round(8192*pan)
18f18                 | ' ivol=round(1000.0*vol)
18f18                 | ' base2=base+64*channel
18f18                 | ' if wave <32 then 
18f18     18 4E 05 F1 | 	add	fp, #24
18f1c     A7 2C 02 FB | 	rdlong	local04, fp
18f20     20 4E 85 F1 | 	sub	fp, #32
18f24     20 2C 56 F2 | 	cmps	local04, #32 wc
18f28     2C 00 90 3D |  if_ae	jmp	#LR__1979
18f2c     08 4E 05 F1 | 	add	fp, #8
18f30     A7 12 02 FB | 	rdlong	arg01, fp
18f34     08 12 06 F1 | 	add	arg01, #8
18f38     18 4E 05 F1 | 	add	fp, #24
18f3c     A7 14 02 FB | 	rdlong	arg02, fp
18f40     20 4E 85 F1 | 	sub	fp, #32
18f44     0B 14 66 F0 | 	shl	arg02, #11
18f48     00 00 60 FF 
18f4c     00 14 06 F1 | 	add	arg02, ##-1073741824
18f50     09 15 62 FC | 	wrlong	arg02, arg01
18f54     18 00 90 FD | 	jmp	#LR__1980
18f58                 | LR__1979
18f58     08 4E 05 F1 | 	add	fp, #8
18f5c     A7 12 02 FB | 	rdlong	arg01, fp
18f60     08 4E 85 F1 | 	sub	fp, #8
18f64     08 12 06 F1 | 	add	arg01, #8
18f68     00 00 E4 FF 
18f6c     09 01 68 FC | 	wrlong	##-939524096, arg01
18f70                 | LR__1980
18f70     08 4E 05 F1 | 	add	fp, #8
18f74     A7 12 02 FB | 	rdlong	arg01, fp
18f78     10 12 06 F1 | 	add	arg01, #16
18f7c     04 00 80 FF 
18f80     09 01 68 FC | 	wrlong	##2048, arg01
18f84     A7 12 02 FB | 	rdlong	arg01, fp
18f88     0C 12 06 F1 | 	add	arg01, #12
18f8c     09 01 68 FC | 	wrlong	#0, arg01
18f90     A7 12 02 FB | 	rdlong	arg01, fp
18f94     14 12 06 F1 | 	add	arg01, #20
18f98     14 4E 05 F1 | 	add	fp, #20
18f9c     A7 14 02 FB | 	rdlong	arg02, fp
18fa0     09 15 52 FC | 	wrword	arg02, arg01
18fa4     14 4E 85 F1 | 	sub	fp, #20
18fa8     A7 12 02 FB | 	rdlong	arg01, fp
18fac     16 12 06 F1 | 	add	arg01, #22
18fb0     10 4E 05 F1 | 	add	fp, #16
18fb4     A7 14 02 FB | 	rdlong	arg02, fp
18fb8     09 15 52 FC | 	wrword	arg02, arg01
18fbc                 | ' lpoke base2+16,2048
18fbc                 | ' lpoke base2+12,0
18fbc                 | ' dpoke base2+20,ivol 
18fbc                 | ' dpoke base2+22,ipan 
18fbc                 | ' if wave<32 then
18fbc     08 4E 05 F1 | 	add	fp, #8
18fc0     A7 2C 02 FB | 	rdlong	local04, fp
18fc4     20 4E 85 F1 | 	sub	fp, #32
18fc8     20 2C 56 F2 | 	cmps	local04, #32 wc
18fcc     38 00 90 3D |  if_ae	jmp	#LR__1981
18fd0     08 4E 05 F1 | 	add	fp, #8
18fd4     A7 12 02 FB | 	rdlong	arg01, fp
18fd8     18 12 06 F1 | 	add	arg01, #24
18fdc     2C 4E 05 F1 | 	add	fp, #44
18fe0     A7 14 02 FB | 	rdlong	arg02, fp
18fe4     09 15 52 FC | 	wrword	arg02, arg01
18fe8     2C 4E 85 F1 | 	sub	fp, #44
18fec     A7 12 02 FB | 	rdlong	arg01, fp
18ff0     1A 12 06 F1 | 	add	arg01, #26
18ff4     08 4E 05 F1 | 	add	fp, #8
18ff8     A7 14 02 FB | 	rdlong	arg02, fp
18ffc     10 4E 85 F1 | 	sub	fp, #16
19000     09 15 52 FC | 	wrword	arg02, arg01
19004     48 00 90 FD | 	jmp	#LR__1982
19008                 | LR__1981
19008     08 4E 05 F1 | 	add	fp, #8
1900c     A7 2C 02 FB | 	rdlong	local04, fp
19010     18 2C 06 F1 | 	add	local04, #24
19014     64 4E 05 F1 | 	add	fp, #100
19018     A7 14 02 FB | 	rdlong	arg02, fp
1901c     6C 4E 85 F1 | 	sub	fp, #108
19020     3E 2C 25 FF 
19024     3C 12 06 F6 | 	mov	arg01, ##1247312956
19028     0C 15 B1 FD | 	call	#__system___float_div
1902c     FD 12 02 F6 | 	mov	arg01, result1
19030     01 14 06 F6 | 	mov	arg02, #1
19034     C4 17 B1 FD | 	call	#__system___float_tointeger
19038     16 FB 51 FC | 	wrword	result1, local04
1903c     08 4E 05 F1 | 	add	fp, #8
19040     A7 12 02 FB | 	rdlong	arg01, fp
19044     08 4E 85 F1 | 	sub	fp, #8
19048     1A 12 06 F1 | 	add	arg01, #26
1904c     09 01 5A FC | 	wrword	#256, arg01
19050                 | LR__1982
19050     08 4E 05 F1 | 	add	fp, #8
19054     A7 12 02 FB | 	rdlong	arg01, fp
19058     1C 12 06 F1 | 	add	arg01, #28
1905c     09 01 68 FC | 	wrlong	#0, arg01
19060     A7 12 02 FB | 	rdlong	arg01, fp
19064     20 12 06 F1 | 	add	arg01, #32
19068     09 01 68 FC | 	wrlong	#0, arg01
1906c                 | ' lpoke base2+28,$0000_0000
1906c                 | ' lpoke base2+32,0 
1906c                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
1906c     1C 4E 05 F1 | 	add	fp, #28
19070     A7 2C 02 FB | 	rdlong	local04, fp
19074     24 4E 85 F1 | 	sub	fp, #36
19078     08 2C 0E F2 | 	cmp	local04, #8 wz
1907c     18 00 90 5D |  if_ne	jmp	#LR__1983
19080     08 4E 05 F1 | 	add	fp, #8
19084     A7 12 02 FB | 	rdlong	arg01, fp
19088     08 4E 85 F1 | 	sub	fp, #8
1908c     24 12 06 F1 | 	add	arg01, #36
19090     09 01 68 FC | 	wrlong	#0, arg01
19094     34 00 90 FD | 	jmp	#LR__1984
19098                 | LR__1983
19098     08 4E 05 F1 | 	add	fp, #8
1909c     A7 12 02 FB | 	rdlong	arg01, fp
190a0     24 12 06 F1 | 	add	arg01, #36
190a4     1C 4E 05 F1 | 	add	fp, #28
190a8     A7 14 02 FB | 	rdlong	arg02, fp
190ac     24 4E 85 F1 | 	sub	fp, #36
190b0     09 14 66 F0 | 	shl	arg02, #9
190b4     0C 00 00 FF 
190b8     D8 E4 05 F1 | 	add	objptr, ##6360
190bc     F2 14 02 F1 | 	add	arg02, objptr
190c0     0C 00 00 FF 
190c4     D8 E4 85 F1 | 	sub	objptr, ##6360
190c8     09 15 62 FC | 	wrlong	arg02, arg01
190cc                 | LR__1984
190cc     08 4E 05 F1 | 	add	fp, #8
190d0     A7 12 02 FB | 	rdlong	arg01, fp
190d4     28 12 06 F1 | 	add	arg01, #40
190d8     0C 4E 05 F1 | 	add	fp, #12
190dc     A7 14 02 FB | 	rdlong	arg02, fp
190e0     09 15 62 FC | 	wrlong	arg02, arg01
190e4     0C 4E 85 F1 | 	sub	fp, #12
190e8     A7 12 02 FB | 	rdlong	arg01, fp
190ec     2C 12 06 F1 | 	add	arg01, #44
190f0     24 4E 05 F1 | 	add	fp, #36
190f4     A7 14 02 FB | 	rdlong	arg02, fp
190f8     09 15 62 FC | 	wrlong	arg02, arg01
190fc                 | ' lpoke base2+40,speed 
190fc                 | ' lpoke base2+44,sus 
190fc                 | ' if delay>0 then waitms(delay) 
190fc     04 4E 85 F1 | 	sub	fp, #4
19100     A7 2C 02 FB | 	rdlong	local04, fp
19104     28 4E 85 F1 | 	sub	fp, #40
19108     01 2C 56 F2 | 	cmps	local04, #1 wc
1910c     28 4E 05 31 |  if_ae	add	fp, #40
19110     A7 12 02 3B |  if_ae	rdlong	arg01, fp
19114     28 4E 85 31 |  if_ae	sub	fp, #40
19118     90 E6 B0 3D |  if_ae	call	#__system___waitms
1911c     A7 F0 03 F6 | 	mov	ptra, fp
19120     B2 00 A0 FD | 	call	#popregs_
19124                 | _do_play_ret
19124     2D 00 64 FD | 	ret
19128                 | 
19128                 | ' 
19128                 | ' '-------------------- plot
19128                 | ' 
19128                 | ' sub do_plot
19128                 | _do_plot
19128     00 4A 05 F6 | 	mov	COUNT_, #0
1912c     A8 00 A0 FD | 	call	#pushregs_
19130     20 F0 07 F1 | 	add	ptra, #32
19134     74 46 BF FD | 	call	#_pop
19138     FD 16 02 F6 | 	mov	arg03, result1
1913c     FE 14 02 F6 | 	mov	arg02, result2
19140     FF 12 02 F6 | 	mov	arg01, result3
19144     0C 4E 05 F1 | 	add	fp, #12
19148     A7 16 62 FC | 	wrlong	arg03, fp
1914c     04 4E 05 F1 | 	add	fp, #4
19150     A7 14 62 FC | 	wrlong	arg02, fp
19154     04 4E 05 F1 | 	add	fp, #4
19158     A7 12 62 FC | 	wrlong	arg01, fp
1915c     14 4E 85 F1 | 	sub	fp, #20
19160     48 46 BF FD | 	call	#_pop
19164     FF 16 02 F6 | 	mov	arg03, result3
19168     A7 FA 61 FC | 	wrlong	result1, fp
1916c     04 4E 05 F1 | 	add	fp, #4
19170     A7 FC 61 FC | 	wrlong	result2, fp
19174     04 4E 05 F1 | 	add	fp, #4
19178     A7 16 62 FC | 	wrlong	arg03, fp
1917c     08 4E 85 F1 | 	sub	fp, #8
19180     A7 12 02 F6 | 	mov	arg01, fp
19184     08 48 BF FD | 	call	#_converttoint
19188     18 4E 05 F1 | 	add	fp, #24
1918c     A7 FA 61 FC | 	wrlong	result1, fp
19190     0C 4E 85 F1 | 	sub	fp, #12
19194     A7 12 02 F6 | 	mov	arg01, fp
19198     0C 4E 85 F1 | 	sub	fp, #12
1919c     F0 47 BF FD | 	call	#_converttoint
191a0     1C 4E 05 F1 | 	add	fp, #28
191a4     A7 FA 61 FC | 	wrlong	result1, fp
191a8     04 4E 85 F1 | 	sub	fp, #4
191ac     A7 16 02 FB | 	rdlong	arg03, fp
191b0     37 00 00 FF 
191b4     2C E4 05 F1 | 	add	objptr, ##28204
191b8     F2 16 62 FC | 	wrlong	arg03, objptr
191bc     04 4E 05 F1 | 	add	fp, #4
191c0     A7 14 02 FB | 	rdlong	arg02, fp
191c4     1C 4E 85 F1 | 	sub	fp, #28
191c8     04 E4 05 F1 | 	add	objptr, #4
191cc     F2 14 62 FC | 	wrlong	arg02, objptr
191d0     04 E4 85 F1 | 	sub	objptr, #4
191d4     F2 12 02 FB | 	rdlong	arg01, objptr
191d8     04 E4 85 F1 | 	sub	objptr, #4
191dc     F2 16 02 FB | 	rdlong	arg03, objptr
191e0     37 00 00 FF 
191e4     28 E4 85 F1 | 	sub	objptr, ##28200
191e8     6C B9 B0 FD | 	call	#_hg010b_spin2_putpixel
191ec     A7 F0 03 F6 | 	mov	ptra, fp
191f0     B2 00 A0 FD | 	call	#popregs_
191f4                 | _do_plot_ret
191f4     2D 00 64 FD | 	ret
191f8                 | 
191f8                 | ' 
191f8                 | ' '-------------------- poke
191f8                 | ' 
191f8                 | ' sub do_poke
191f8                 | _do_poke
191f8     01 4A 05 F6 | 	mov	COUNT_, #1
191fc     A8 00 A0 FD | 	call	#pushregs_
19200     20 F0 07 F1 | 	add	ptra, #32
19204     A4 45 BF FD | 	call	#_pop
19208     FD 14 02 F6 | 	mov	arg02, result1
1920c     FE 12 02 F6 | 	mov	arg01, result2
19210     FF 26 02 F6 | 	mov	local01, result3
19214     A7 14 62 FC | 	wrlong	arg02, fp
19218     04 4E 05 F1 | 	add	fp, #4
1921c     A7 12 62 FC | 	wrlong	arg01, fp
19220     04 4E 05 F1 | 	add	fp, #4
19224     A7 26 62 FC | 	wrlong	local01, fp
19228     08 4E 85 F1 | 	sub	fp, #8
1922c     7C 45 BF FD | 	call	#_pop
19230     FF 26 02 F6 | 	mov	local01, result3
19234     0C 4E 05 F1 | 	add	fp, #12
19238     A7 FA 61 FC | 	wrlong	result1, fp
1923c     04 4E 05 F1 | 	add	fp, #4
19240     A7 FC 61 FC | 	wrlong	result2, fp
19244     04 4E 05 F1 | 	add	fp, #4
19248     A7 26 62 FC | 	wrlong	local01, fp
1924c     08 4E 85 F1 | 	sub	fp, #8
19250     A7 12 02 F6 | 	mov	arg01, fp
19254     0C 4E 85 F1 | 	sub	fp, #12
19258     34 47 BF FD | 	call	#_converttoint
1925c     18 4E 05 F1 | 	add	fp, #24
19260     A7 FA 61 FC | 	wrlong	result1, fp
19264     18 4E 85 F1 | 	sub	fp, #24
19268     A7 12 02 F6 | 	mov	arg01, fp
1926c     20 47 BF FD | 	call	#_converttoint
19270     1C 4E 05 F1 | 	add	fp, #28
19274     A7 FA 61 FC | 	wrlong	result1, fp
19278                 | ' t1=pop() 'value
19278                 | ' t2=pop() 
19278                 | ' a=converttoint(t2) : v=converttoint(t1)
19278                 | ' if a<$80000 then poke a,v else pspoke a,v
19278     04 4E 85 F1 | 	sub	fp, #4
1927c     A7 26 02 FB | 	rdlong	local01, fp
19280     18 4E 85 F1 | 	sub	fp, #24
19284     00 04 00 FF 
19288     00 26 16 F2 | 	cmp	local01, ##524288 wc
1928c     1C 00 90 3D |  if_ae	jmp	#LR__1990
19290     18 4E 05 F1 | 	add	fp, #24
19294     A7 12 02 FB | 	rdlong	arg01, fp
19298     04 4E 05 F1 | 	add	fp, #4
1929c     A7 14 02 FB | 	rdlong	arg02, fp
192a0     1C 4E 85 F1 | 	sub	fp, #28
192a4     09 15 42 FC | 	wrbyte	arg02, arg01
192a8     18 00 90 FD | 	jmp	#LR__1991
192ac                 | LR__1990
192ac     18 4E 05 F1 | 	add	fp, #24
192b0     A7 12 02 FB | 	rdlong	arg01, fp
192b4     04 4E 05 F1 | 	add	fp, #4
192b8     A7 14 02 FB | 	rdlong	arg02, fp
192bc     1C 4E 85 F1 | 	sub	fp, #28
192c0     0C AA B0 FD | 	call	#_pspoke
192c4                 | LR__1991
192c4     A7 F0 03 F6 | 	mov	ptra, fp
192c8     B2 00 A0 FD | 	call	#popregs_
192cc                 | _do_poke_ret
192cc     2D 00 64 FD | 	ret
192d0                 | 
192d0                 | ' 
192d0                 | ' '-------------------- pop
192d0                 | ' 
192d0                 | ' sub do_pop()
192d0                 | _do_pop
192d0                 | ' if gosubtop>0 then  gosubtop -=1 
192d0     50 00 00 FF 
192d4     34 E5 05 F1 | 	add	objptr, ##41268
192d8     F2 00 02 FB | 	rdlong	_var01, objptr
192dc     50 00 00 FF 
192e0     34 E5 85 F1 | 	sub	objptr, ##41268
192e4     01 00 56 F2 | 	cmps	_var01, #1 wc
192e8     50 00 00 3F 
192ec     34 E5 05 31 |  if_ae	add	objptr, ##41268
192f0     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
192f4     01 00 86 31 |  if_ae	sub	_var01, #1
192f8     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
192fc     50 00 00 3F 
19300     34 E5 85 31 |  if_ae	sub	objptr, ##41268
19304                 | _do_pop_ret
19304     2D 00 64 FD | 	ret
19308                 | 
19308                 | ' 
19308                 | ' '-------------------- position
19308                 | ' 
19308                 | ' sub do_position
19308                 | _do_position
19308     01 4A 05 F6 | 	mov	COUNT_, #1
1930c     A8 00 A0 FD | 	call	#pushregs_
19310     18 F0 07 F1 | 	add	ptra, #24
19314     94 44 BF FD | 	call	#_pop
19318     FD 14 02 F6 | 	mov	arg02, result1
1931c     FE 12 02 F6 | 	mov	arg01, result2
19320     FF 26 02 F6 | 	mov	local01, result3
19324     A7 14 62 FC | 	wrlong	arg02, fp
19328     04 4E 05 F1 | 	add	fp, #4
1932c     A7 12 62 FC | 	wrlong	arg01, fp
19330     04 4E 05 F1 | 	add	fp, #4
19334     A7 26 62 FC | 	wrlong	local01, fp
19338     08 4E 85 F1 | 	sub	fp, #8
1933c     6C 44 BF FD | 	call	#_pop
19340     FF 26 02 F6 | 	mov	local01, result3
19344     0C 4E 05 F1 | 	add	fp, #12
19348     A7 FA 61 FC | 	wrlong	result1, fp
1934c     04 4E 05 F1 | 	add	fp, #4
19350     A7 FC 61 FC | 	wrlong	result2, fp
19354     04 4E 05 F1 | 	add	fp, #4
19358     A7 26 62 FC | 	wrlong	local01, fp
1935c     08 4E 85 F1 | 	sub	fp, #8
19360     A7 12 02 F6 | 	mov	arg01, fp
19364     0C 4E 85 F1 | 	sub	fp, #12
19368     24 46 BF FD | 	call	#_converttoint
1936c     FD 26 02 F6 | 	mov	local01, result1
19370     A7 12 02 F6 | 	mov	arg01, fp
19374     18 46 BF FD | 	call	#_converttoint
19378     FD 14 02 F6 | 	mov	arg02, result1
1937c     13 13 02 F6 | 	mov	arg01, local01
19380     98 C3 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19384     A7 F0 03 F6 | 	mov	ptra, fp
19388     B2 00 A0 FD | 	call	#popregs_
1938c                 | _do_position_ret
1938c     2D 00 64 FD | 	ret
19390                 | 
19390                 | ' 
19390                 | ' '-------------------- print
19390                 | ' 
19390                 | ' sub do_print  
19390                 | _do_print
19390     0B 4A 05 F6 | 	mov	COUNT_, #11
19394     A8 00 A0 FD | 	call	#pushregs_
19398     00 2C 06 F6 | 	mov	local04, #0
1939c     0C 44 BF FD | 	call	#_pop
193a0     FD 2E 02 F6 | 	mov	local05, result1
193a4     FE 30 02 F6 | 	mov	local06, result2
193a8     FF 32 02 F6 | 	mov	local07, result3
193ac     17 27 02 F6 | 	mov	local01, local05
193b0     18 29 02 F6 | 	mov	local02, local06
193b4     19 2B 02 F6 | 	mov	local03, local07
193b8                 | '  
193b8                 | ' r=0
193b8                 | ' t1=pop() 
193b8                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
193b8     21 2A 0E F2 | 	cmp	local03, #33 wz
193bc     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
193c0     20 00 90 5D |  if_ne	jmp	#LR__2000
193c4     15 2D 02 F6 | 	mov	local04, local03
193c8     E0 43 BF FD | 	call	#_pop
193cc     FD 2E 02 F6 | 	mov	local05, result1
193d0     FE 30 02 F6 | 	mov	local06, result2
193d4     FF 32 02 F6 | 	mov	local07, result3
193d8     17 27 02 F6 | 	mov	local01, local05
193dc     18 29 02 F6 | 	mov	local02, local06
193e0     19 2B 02 F6 | 	mov	local03, local07
193e4                 | LR__2000
193e4                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
193e4     20 2A 0E F2 | 	cmp	local03, #32 wz
193e8     15 2D 02 A6 |  if_e	mov	local04, local03
193ec                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
193ec     FF 2A 0E F2 | 	cmp	local03, #255 wz
193f0     10 00 90 5D |  if_ne	jmp	#LR__2001
193f4     13 13 02 F6 | 	mov	arg01, local01
193f8     00 14 06 F6 | 	mov	arg02, #0
193fc     A0 A6 B0 FD | 	call	#_printerror
19400     D4 04 90 FD | 	jmp	#LR__2020
19404                 | LR__2001
19404                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
19404     2B 2A 0E F2 | 	cmp	local03, #43 wz
19408     14 00 90 5D |  if_ne	jmp	#LR__2002
1940c     13 13 02 F6 | 	mov	arg01, local01
19410     10 45 BF FD | 	call	#_convertstring
19414     FD 2E 02 F6 | 	mov	local05, result1
19418     17 27 02 F6 | 	mov	local01, local05
1941c     1F 2A 06 F6 | 	mov	local03, #31
19420                 | LR__2002
19420                 | ' 
19420                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
19420     2C 2A 0E F2 | 	cmp	local03, #44 wz
19424     80 00 90 5D |  if_ne	jmp	#LR__2003
19428     00 12 06 F6 | 	mov	arg01, #0
1942c     2C 3D B1 FD | 	call	#__system___getiolock_0616
19430     FD 12 02 F6 | 	mov	arg01, result1
19434     80 E0 B0 FD | 	call	#__system___lockmem
19438     BD 01 00 FF 
1943c     46 15 06 F6 | 	mov	arg02, ##@LR__6018
19440     00 12 06 F6 | 	mov	arg01, #0
19444     00 16 06 F6 | 	mov	arg03, #0
19448     64 ED B0 FD | 	call	#__system___basic_print_string
1944c     0A 34 06 F6 | 	mov	local08, #10
19450     00 12 06 F6 | 	mov	arg01, #0
19454     13 15 02 F6 | 	mov	arg02, local01
19458     00 16 06 F6 | 	mov	arg03, #0
1945c     0A 18 06 F6 | 	mov	arg04, #10
19460     90 ED B0 FD | 	call	#__system___basic_print_integer
19464     FD 36 02 F6 | 	mov	local09, result1
19468     00 12 06 F6 | 	mov	arg01, #0
1946c     0A 14 06 F6 | 	mov	arg02, #10
19470     00 16 06 F6 | 	mov	arg03, #0
19474     E0 EC B0 FD | 	call	#__system___basic_print_char
19478     01 38 06 F6 | 	mov	local10, #1
1947c     00 12 06 F6 | 	mov	arg01, #0
19480     D8 3C B1 FD | 	call	#__system___getiolock_0616
19484     FD 00 68 FC | 	wrlong	#0, result1
19488     00 3A 06 F6 | 	mov	local11, #0
1948c     1C 43 BF FD | 	call	#_pop
19490     FD 2E 02 F6 | 	mov	local05, result1
19494     FE 30 02 F6 | 	mov	local06, result2
19498     FF 32 02 F6 | 	mov	local07, result3
1949c     17 27 02 F6 | 	mov	local01, local05
194a0     18 29 02 F6 | 	mov	local02, local06
194a4     19 2B 02 F6 | 	mov	local03, local07
194a8                 | LR__2003
194a8                 | ' 
194a8                 | ' if r=print_mod_comma  then
194a8     21 2C 0E F2 | 	cmp	local04, #33 wz
194ac     AC 01 90 5D |  if_ne	jmp	#LR__2008
194b0                 | '   if t1.result_type=result_int then print t1.result.iresult,
194b0     1C 2A 0E F2 | 	cmp	local03, #28 wz
194b4     64 00 90 5D |  if_ne	jmp	#LR__2004
194b8     00 12 06 F6 | 	mov	arg01, #0
194bc     9C 3C B1 FD | 	call	#__system___getiolock_0616
194c0     FD 12 02 F6 | 	mov	arg01, result1
194c4     F0 DF B0 FD | 	call	#__system___lockmem
194c8     00 30 06 F6 | 	mov	local06, #0
194cc     00 12 06 F6 | 	mov	arg01, #0
194d0     13 15 02 F6 | 	mov	arg02, local01
194d4     00 16 06 F6 | 	mov	arg03, #0
194d8     0A 18 06 F6 | 	mov	arg04, #10
194dc     14 ED B0 FD | 	call	#__system___basic_print_integer
194e0     FD 32 02 F6 | 	mov	local07, result1
194e4     18 2F 02 F6 | 	mov	local05, local06
194e8     19 2F 02 F1 | 	add	local05, local07
194ec     00 3A 06 F6 | 	mov	local11, #0
194f0     00 12 06 F6 | 	mov	arg01, #0
194f4     09 14 06 F6 | 	mov	arg02, #9
194f8     00 16 06 F6 | 	mov	arg03, #0
194fc     58 EC B0 FD | 	call	#__system___basic_print_char
19500     FD 36 02 F6 | 	mov	local09, result1
19504     FD 2E 02 F1 | 	add	local05, result1
19508     00 12 06 F6 | 	mov	arg01, #0
1950c     4C 3C B1 FD | 	call	#__system___getiolock_0616
19510     FD 00 68 FC | 	wrlong	#0, result1
19514     00 FA 05 F6 | 	mov	result1, #0
19518     00 38 06 F6 | 	mov	local10, #0
1951c                 | LR__2004
1951c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1951c     1D 2A 0E F2 | 	cmp	local03, #29 wz
19520     64 00 90 5D |  if_ne	jmp	#LR__2005
19524     00 12 06 F6 | 	mov	arg01, #0
19528     30 3C B1 FD | 	call	#__system___getiolock_0616
1952c     FD 12 02 F6 | 	mov	arg01, result1
19530     84 DF B0 FD | 	call	#__system___lockmem
19534     00 30 06 F6 | 	mov	local06, #0
19538     00 12 06 F6 | 	mov	arg01, #0
1953c     13 15 02 F6 | 	mov	arg02, local01
19540     00 16 06 F6 | 	mov	arg03, #0
19544     0A 18 06 F6 | 	mov	arg04, #10
19548     E8 EC B0 FD | 	call	#__system___basic_print_unsigned
1954c     FD 32 02 F6 | 	mov	local07, result1
19550     18 2F 02 F6 | 	mov	local05, local06
19554     19 2F 02 F1 | 	add	local05, local07
19558     00 3A 06 F6 | 	mov	local11, #0
1955c     00 12 06 F6 | 	mov	arg01, #0
19560     09 14 06 F6 | 	mov	arg02, #9
19564     00 16 06 F6 | 	mov	arg03, #0
19568     EC EB B0 FD | 	call	#__system___basic_print_char
1956c     FD 36 02 F6 | 	mov	local09, result1
19570     FD 2E 02 F1 | 	add	local05, result1
19574     00 12 06 F6 | 	mov	arg01, #0
19578     E0 3B B1 FD | 	call	#__system___getiolock_0616
1957c     FD 00 68 FC | 	wrlong	#0, result1
19580     00 FA 05 F6 | 	mov	result1, #0
19584     00 38 06 F6 | 	mov	local10, #0
19588                 | LR__2005
19588                 | '   if t1.result_type=result_float then print t1.result.fresult,
19588     1E 2A 0E F2 | 	cmp	local03, #30 wz
1958c     64 00 90 5D |  if_ne	jmp	#LR__2006
19590     00 12 06 F6 | 	mov	arg01, #0
19594     C4 3B B1 FD | 	call	#__system___getiolock_0616
19598     FD 12 02 F6 | 	mov	arg01, result1
1959c     18 DF B0 FD | 	call	#__system___lockmem
195a0     00 30 06 F6 | 	mov	local06, #0
195a4     00 12 06 F6 | 	mov	arg01, #0
195a8     13 15 02 F6 | 	mov	arg02, local01
195ac     00 16 06 F6 | 	mov	arg03, #0
195b0     23 18 06 F6 | 	mov	arg04, #35
195b4     94 13 B1 FD | 	call	#__system___basic_print_float
195b8     FD 32 02 F6 | 	mov	local07, result1
195bc     18 2F 02 F6 | 	mov	local05, local06
195c0     19 2F 02 F1 | 	add	local05, local07
195c4     00 3A 06 F6 | 	mov	local11, #0
195c8     00 12 06 F6 | 	mov	arg01, #0
195cc     09 14 06 F6 | 	mov	arg02, #9
195d0     00 16 06 F6 | 	mov	arg03, #0
195d4     80 EB B0 FD | 	call	#__system___basic_print_char
195d8     FD 36 02 F6 | 	mov	local09, result1
195dc     FD 2E 02 F1 | 	add	local05, result1
195e0     00 12 06 F6 | 	mov	arg01, #0
195e4     74 3B B1 FD | 	call	#__system___getiolock_0616
195e8     FD 00 68 FC | 	wrlong	#0, result1
195ec     00 FA 05 F6 | 	mov	result1, #0
195f0     00 38 06 F6 | 	mov	local10, #0
195f4                 | LR__2006
195f4                 | '   if t1.result_type=result_string then print t1.result.sresult,
195f4     1F 2A 0E F2 | 	cmp	local03, #31 wz
195f8     60 00 90 5D |  if_ne	jmp	#LR__2007
195fc     00 12 06 F6 | 	mov	arg01, #0
19600     58 3B B1 FD | 	call	#__system___getiolock_0616
19604     FD 12 02 F6 | 	mov	arg01, result1
19608     AC DE B0 FD | 	call	#__system___lockmem
1960c     00 30 06 F6 | 	mov	local06, #0
19610     00 12 06 F6 | 	mov	arg01, #0
19614     13 15 02 F6 | 	mov	arg02, local01
19618     00 16 06 F6 | 	mov	arg03, #0
1961c     90 EB B0 FD | 	call	#__system___basic_print_string
19620     FD 32 02 F6 | 	mov	local07, result1
19624     18 2F 02 F6 | 	mov	local05, local06
19628     19 2F 02 F1 | 	add	local05, local07
1962c     00 3A 06 F6 | 	mov	local11, #0
19630     00 12 06 F6 | 	mov	arg01, #0
19634     09 14 06 F6 | 	mov	arg02, #9
19638     00 16 06 F6 | 	mov	arg03, #0
1963c     18 EB B0 FD | 	call	#__system___basic_print_char
19640     FD 36 02 F6 | 	mov	local09, result1
19644     FD 2E 02 F1 | 	add	local05, result1
19648     00 12 06 F6 | 	mov	arg01, #0
1964c     0C 3B B1 FD | 	call	#__system___getiolock_0616
19650     FD 00 68 FC | 	wrlong	#0, result1
19654     00 FA 05 F6 | 	mov	result1, #0
19658     00 38 06 F6 | 	mov	local10, #0
1965c                 | LR__2007
1965c                 | LR__2008
1965c                 | ' if r=print_mod_semicolon then 
1965c     22 2C 0E F2 | 	cmp	local04, #34 wz
19660     1C 01 90 5D |  if_ne	jmp	#LR__2013
19664                 | '   if t1.result_type=result_int then print t1.result.iresult;
19664     1C 2A 0E F2 | 	cmp	local03, #28 wz
19668     50 00 90 5D |  if_ne	jmp	#LR__2009
1966c     00 12 06 F6 | 	mov	arg01, #0
19670     E8 3A B1 FD | 	call	#__system___getiolock_0616
19674     FD 12 02 F6 | 	mov	arg01, result1
19678     3C DE B0 FD | 	call	#__system___lockmem
1967c     00 30 06 F6 | 	mov	local06, #0
19680     00 38 06 F6 | 	mov	local10, #0
19684     0A 3A 06 F6 | 	mov	local11, #10
19688     00 12 06 F6 | 	mov	arg01, #0
1968c     13 15 02 F6 | 	mov	arg02, local01
19690     00 16 06 F6 | 	mov	arg03, #0
19694     0A 18 06 F6 | 	mov	arg04, #10
19698     58 EB B0 FD | 	call	#__system___basic_print_integer
1969c     FD 32 02 F6 | 	mov	local07, result1
196a0     18 2F 02 F6 | 	mov	local05, local06
196a4     19 2F 02 F1 | 	add	local05, local07
196a8     00 12 06 F6 | 	mov	arg01, #0
196ac     AC 3A B1 FD | 	call	#__system___getiolock_0616
196b0     FD 00 68 FC | 	wrlong	#0, result1
196b4     00 FA 05 F6 | 	mov	result1, #0
196b8     00 36 06 F6 | 	mov	local09, #0
196bc                 | LR__2009
196bc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
196bc     1D 2A 0E F2 | 	cmp	local03, #29 wz
196c0     50 00 90 5D |  if_ne	jmp	#LR__2010
196c4     00 12 06 F6 | 	mov	arg01, #0
196c8     90 3A B1 FD | 	call	#__system___getiolock_0616
196cc     FD 12 02 F6 | 	mov	arg01, result1
196d0     E4 DD B0 FD | 	call	#__system___lockmem
196d4     00 30 06 F6 | 	mov	local06, #0
196d8     00 38 06 F6 | 	mov	local10, #0
196dc     0A 3A 06 F6 | 	mov	local11, #10
196e0     00 12 06 F6 | 	mov	arg01, #0
196e4     13 15 02 F6 | 	mov	arg02, local01
196e8     00 16 06 F6 | 	mov	arg03, #0
196ec     0A 18 06 F6 | 	mov	arg04, #10
196f0     40 EB B0 FD | 	call	#__system___basic_print_unsigned
196f4     FD 32 02 F6 | 	mov	local07, result1
196f8     18 2F 02 F6 | 	mov	local05, local06
196fc     19 2F 02 F1 | 	add	local05, local07
19700     00 12 06 F6 | 	mov	arg01, #0
19704     54 3A B1 FD | 	call	#__system___getiolock_0616
19708     FD 00 68 FC | 	wrlong	#0, result1
1970c     00 FA 05 F6 | 	mov	result1, #0
19710     00 36 06 F6 | 	mov	local09, #0
19714                 | LR__2010
19714                 | '   if t1.result_type=result_float then print t1.result.fresult;
19714     1E 2A 0E F2 | 	cmp	local03, #30 wz
19718     30 00 90 5D |  if_ne	jmp	#LR__2011
1971c     00 12 06 F6 | 	mov	arg01, #0
19720     38 3A B1 FD | 	call	#__system___getiolock_0616
19724     FD 12 02 F6 | 	mov	arg01, result1
19728     8C DD B0 FD | 	call	#__system___lockmem
1972c     00 12 06 F6 | 	mov	arg01, #0
19730     13 15 02 F6 | 	mov	arg02, local01
19734     00 16 06 F6 | 	mov	arg03, #0
19738     23 18 06 F6 | 	mov	arg04, #35
1973c     0C 12 B1 FD | 	call	#__system___basic_print_float
19740     00 12 06 F6 | 	mov	arg01, #0
19744     14 3A B1 FD | 	call	#__system___getiolock_0616
19748     FD 00 68 FC | 	wrlong	#0, result1
1974c                 | LR__2011
1974c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1974c     1F 2A 0E F2 | 	cmp	local03, #31 wz
19750     2C 00 90 5D |  if_ne	jmp	#LR__2012
19754     00 12 06 F6 | 	mov	arg01, #0
19758     00 3A B1 FD | 	call	#__system___getiolock_0616
1975c     FD 12 02 F6 | 	mov	arg01, result1
19760     54 DD B0 FD | 	call	#__system___lockmem
19764     00 12 06 F6 | 	mov	arg01, #0
19768     13 15 02 F6 | 	mov	arg02, local01
1976c     00 16 06 F6 | 	mov	arg03, #0
19770     3C EA B0 FD | 	call	#__system___basic_print_string
19774     00 12 06 F6 | 	mov	arg01, #0
19778     E0 39 B1 FD | 	call	#__system___getiolock_0616
1977c     FD 00 68 FC | 	wrlong	#0, result1
19780                 | LR__2012
19780                 | LR__2013
19780                 | ' if r=0 then 
19780     00 2C 0E F2 | 	cmp	local04, #0 wz
19784     1C 01 90 5D |  if_ne	jmp	#LR__2018
19788                 | '   if t1.result_type=result_int then print t1.result.iresult
19788     1C 2A 0E F2 | 	cmp	local03, #28 wz
1978c     40 00 90 5D |  if_ne	jmp	#LR__2014
19790     00 12 06 F6 | 	mov	arg01, #0
19794     C4 39 B1 FD | 	call	#__system___getiolock_0616
19798     FD 12 02 F6 | 	mov	arg01, result1
1979c     18 DD B0 FD | 	call	#__system___lockmem
197a0     00 12 06 F6 | 	mov	arg01, #0
197a4     13 15 02 F6 | 	mov	arg02, local01
197a8     00 16 06 F6 | 	mov	arg03, #0
197ac     0A 18 06 F6 | 	mov	arg04, #10
197b0     40 EA B0 FD | 	call	#__system___basic_print_integer
197b4     00 12 06 F6 | 	mov	arg01, #0
197b8     0A 14 06 F6 | 	mov	arg02, #10
197bc     00 16 06 F6 | 	mov	arg03, #0
197c0     94 E9 B0 FD | 	call	#__system___basic_print_char
197c4     00 12 06 F6 | 	mov	arg01, #0
197c8     90 39 B1 FD | 	call	#__system___getiolock_0616
197cc     FD 00 68 FC | 	wrlong	#0, result1
197d0                 | LR__2014
197d0                 | '   if t1.result_type=result_uint then print t1.result.uresult
197d0     1D 2A 0E F2 | 	cmp	local03, #29 wz
197d4     40 00 90 5D |  if_ne	jmp	#LR__2015
197d8     00 12 06 F6 | 	mov	arg01, #0
197dc     7C 39 B1 FD | 	call	#__system___getiolock_0616
197e0     FD 12 02 F6 | 	mov	arg01, result1
197e4     D0 DC B0 FD | 	call	#__system___lockmem
197e8     00 12 06 F6 | 	mov	arg01, #0
197ec     13 15 02 F6 | 	mov	arg02, local01
197f0     00 16 06 F6 | 	mov	arg03, #0
197f4     0A 18 06 F6 | 	mov	arg04, #10
197f8     38 EA B0 FD | 	call	#__system___basic_print_unsigned
197fc     00 12 06 F6 | 	mov	arg01, #0
19800     0A 14 06 F6 | 	mov	arg02, #10
19804     00 16 06 F6 | 	mov	arg03, #0
19808     4C E9 B0 FD | 	call	#__system___basic_print_char
1980c     00 12 06 F6 | 	mov	arg01, #0
19810     48 39 B1 FD | 	call	#__system___getiolock_0616
19814     FD 00 68 FC | 	wrlong	#0, result1
19818                 | LR__2015
19818                 | '   if t1.result_type=result_float then print t1.result.fresult
19818     1E 2A 0E F2 | 	cmp	local03, #30 wz
1981c     40 00 90 5D |  if_ne	jmp	#LR__2016
19820     00 12 06 F6 | 	mov	arg01, #0
19824     34 39 B1 FD | 	call	#__system___getiolock_0616
19828     FD 12 02 F6 | 	mov	arg01, result1
1982c     88 DC B0 FD | 	call	#__system___lockmem
19830     00 12 06 F6 | 	mov	arg01, #0
19834     13 15 02 F6 | 	mov	arg02, local01
19838     00 16 06 F6 | 	mov	arg03, #0
1983c     23 18 06 F6 | 	mov	arg04, #35
19840     08 11 B1 FD | 	call	#__system___basic_print_float
19844     00 12 06 F6 | 	mov	arg01, #0
19848     0A 14 06 F6 | 	mov	arg02, #10
1984c     00 16 06 F6 | 	mov	arg03, #0
19850     04 E9 B0 FD | 	call	#__system___basic_print_char
19854     00 12 06 F6 | 	mov	arg01, #0
19858     00 39 B1 FD | 	call	#__system___getiolock_0616
1985c     FD 00 68 FC | 	wrlong	#0, result1
19860                 | LR__2016
19860                 | '   if t1.result_type=result_string then print t1.result.sresult
19860     1F 2A 0E F2 | 	cmp	local03, #31 wz
19864     3C 00 90 5D |  if_ne	jmp	#LR__2017
19868     00 12 06 F6 | 	mov	arg01, #0
1986c     EC 38 B1 FD | 	call	#__system___getiolock_0616
19870     FD 12 02 F6 | 	mov	arg01, result1
19874     40 DC B0 FD | 	call	#__system___lockmem
19878     00 12 06 F6 | 	mov	arg01, #0
1987c     13 15 02 F6 | 	mov	arg02, local01
19880     00 16 06 F6 | 	mov	arg03, #0
19884     28 E9 B0 FD | 	call	#__system___basic_print_string
19888     00 12 06 F6 | 	mov	arg01, #0
1988c     0A 14 06 F6 | 	mov	arg02, #10
19890     00 16 06 F6 | 	mov	arg03, #0
19894     C0 E8 B0 FD | 	call	#__system___basic_print_char
19898     00 12 06 F6 | 	mov	arg01, #0
1989c     BC 38 B1 FD | 	call	#__system___getiolock_0616
198a0     FD 00 68 FC | 	wrlong	#0, result1
198a4                 | LR__2017
198a4                 | LR__2018
198a4                 | ' if r=print_mod_empty then print
198a4     20 2C 0E F2 | 	cmp	local04, #32 wz
198a8     2C 00 90 5D |  if_ne	jmp	#LR__2019
198ac     00 12 06 F6 | 	mov	arg01, #0
198b0     A8 38 B1 FD | 	call	#__system___getiolock_0616
198b4     FD 12 02 F6 | 	mov	arg01, result1
198b8     FC DB B0 FD | 	call	#__system___lockmem
198bc     00 12 06 F6 | 	mov	arg01, #0
198c0     0A 14 06 F6 | 	mov	arg02, #10
198c4     00 16 06 F6 | 	mov	arg03, #0
198c8     8C E8 B0 FD | 	call	#__system___basic_print_char
198cc     00 12 06 F6 | 	mov	arg01, #0
198d0     88 38 B1 FD | 	call	#__system___getiolock_0616
198d4     FD 00 68 FC | 	wrlong	#0, result1
198d8                 | LR__2019
198d8                 | LR__2020
198d8     A7 F0 03 F6 | 	mov	ptra, fp
198dc     B2 00 A0 FD | 	call	#popregs_
198e0                 | _do_print_ret
198e0     2D 00 64 FD | 	ret
198e4                 | 
198e4                 | ' 
198e4                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
198e4                 | ' 
198e4                 | ' sub do_push
198e4                 | _do_push
198e4                 | ' if stackpointer<maxstack then 
198e4     43 00 00 FF 
198e8     58 E4 05 F1 | 	add	objptr, ##34392
198ec     F2 00 02 FB | 	rdlong	_var01, objptr
198f0     43 00 00 FF 
198f4     58 E4 85 F1 | 	sub	objptr, ##34392
198f8     01 00 00 FF 
198fc     00 00 56 F2 | 	cmps	_var01, ##512 wc
19900     F8 00 90 3D |  if_ae	jmp	#LR__2030
19904     4A 00 00 FF 
19908     80 E4 05 F1 | 	add	objptr, ##38016
1990c     F2 02 02 FB | 	rdlong	_var02, objptr
19910     01 05 02 F6 | 	mov	_var03, _var02
19914     01 04 66 F0 | 	shl	_var03, #1
19918     01 05 02 F1 | 	add	_var03, _var02
1991c     02 04 66 F0 | 	shl	_var03, #2
19920     03 00 00 FF 
19924     04 E4 85 F1 | 	sub	objptr, ##1540
19928     F2 04 02 F1 | 	add	_var03, objptr
1992c     02 01 02 FB | 	rdlong	_var01, _var03
19930     04 04 06 F1 | 	add	_var03, #4
19934     02 07 02 FB | 	rdlong	_var04, _var03
19938     01 05 02 F6 | 	mov	_var03, _var02
1993c     01 04 66 F0 | 	shl	_var03, #1
19940     01 05 02 F1 | 	add	_var03, _var02
19944     02 04 66 F0 | 	shl	_var03, #2
19948     F2 04 02 F1 | 	add	_var03, objptr
1994c     08 04 06 F1 | 	add	_var03, #8
19950     02 03 02 FB | 	rdlong	_var02, _var03
19954     04 00 00 FF 
19958     24 E4 85 F1 | 	sub	objptr, ##2084
1995c     F2 04 02 FB | 	rdlong	_var03, objptr
19960     02 09 02 F6 | 	mov	_var05, _var03
19964     01 08 66 F0 | 	shl	_var05, #1
19968     02 09 02 F1 | 	add	_var05, _var03
1996c     02 08 66 F0 | 	shl	_var05, #2
19970     0C 00 00 FF 
19974     0C E4 85 F1 | 	sub	objptr, ##6156
19978     F2 08 02 F1 | 	add	_var05, objptr
1997c     04 01 62 FC | 	wrlong	_var01, _var05
19980     0C 00 00 FF 
19984     0C E4 05 F1 | 	add	objptr, ##6156
19988     F2 08 02 FB | 	rdlong	_var05, objptr
1998c     04 05 02 F6 | 	mov	_var03, _var05
19990     01 04 66 F0 | 	shl	_var03, #1
19994     04 05 02 F1 | 	add	_var03, _var05
19998     02 04 66 F0 | 	shl	_var03, #2
1999c     0C 00 00 FF 
199a0     0C E4 85 F1 | 	sub	objptr, ##6156
199a4     F2 04 02 F1 | 	add	_var03, objptr
199a8     04 04 06 F1 | 	add	_var03, #4
199ac     02 07 62 FC | 	wrlong	_var04, _var03
199b0     0C 00 00 FF 
199b4     0C E4 05 F1 | 	add	objptr, ##6156
199b8     F2 08 02 FB | 	rdlong	_var05, objptr
199bc     04 07 02 F6 | 	mov	_var04, _var05
199c0     01 06 66 F0 | 	shl	_var04, #1
199c4     04 07 02 F1 | 	add	_var04, _var05
199c8     02 06 66 F0 | 	shl	_var04, #2
199cc     0C 00 00 FF 
199d0     0C E4 85 F1 | 	sub	objptr, ##6156
199d4     F2 06 02 F1 | 	add	_var04, objptr
199d8     08 06 06 F1 | 	add	_var04, #8
199dc     03 03 62 FC | 	wrlong	_var02, _var04
199e0     0C 00 00 FF 
199e4     0C E4 05 F1 | 	add	objptr, ##6156
199e8     F2 00 02 FB | 	rdlong	_var01, objptr
199ec     01 00 06 F1 | 	add	_var01, #1
199f0     F2 00 62 FC | 	wrlong	_var01, objptr
199f4     43 00 00 FF 
199f8     58 E4 85 F1 | 	sub	objptr, ##34392
199fc                 | LR__2030
199fc                 | _do_push_ret
199fc     2D 00 64 FD | 	ret
19a00                 | 
19a00                 | ' 
19a00                 | ' '-------------------- put
19a00                 | ' 
19a00                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
19a00                 | _do_put
19a00     03 4A 05 F6 | 	mov	COUNT_, #3
19a04     A8 00 A0 FD | 	call	#pushregs_
19a08     28 F0 07 F1 | 	add	ptra, #40
19a0c     4A 00 00 FF 
19a10     80 E4 05 F1 | 	add	objptr, ##38016
19a14     F2 1A 02 FB | 	rdlong	arg05, objptr
19a18     0D 19 02 F6 | 	mov	arg04, arg05
19a1c     01 18 66 F0 | 	shl	arg04, #1
19a20     0D 19 02 F1 | 	add	arg04, arg05
19a24     02 18 66 F0 | 	shl	arg04, #2
19a28     03 00 00 FF 
19a2c     04 E4 85 F1 | 	sub	objptr, ##1540
19a30     F2 18 02 F1 | 	add	arg04, objptr
19a34     0C 1B 02 FB | 	rdlong	arg05, arg04
19a38     A7 1A 62 FC | 	wrlong	arg05, fp
19a3c                 | ' 
19a3c                 | ' numpar=compiledline(lineptr_e).result.uresult
19a3c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
19a3c     04 1A 0E F2 | 	cmp	arg05, #4 wz
19a40     47 00 00 FF 
19a44     7C E4 85 F1 | 	sub	objptr, ##36476
19a48     48 00 90 5D |  if_ne	jmp	#LR__2040
19a4c     5C 3D BF FD | 	call	#_pop
19a50     FF 1A 02 F6 | 	mov	arg05, result3
19a54     1C 4E 05 F1 | 	add	fp, #28
19a58     A7 FA 61 FC | 	wrlong	result1, fp
19a5c     04 4E 05 F1 | 	add	fp, #4
19a60     A7 FC 61 FC | 	wrlong	result2, fp
19a64     04 4E 05 F1 | 	add	fp, #4
19a68     A7 1A 62 FC | 	wrlong	arg05, fp
19a6c     08 4E 85 F1 | 	sub	fp, #8
19a70     A7 12 02 F6 | 	mov	arg01, fp
19a74     1C 4E 85 F1 | 	sub	fp, #28
19a78     14 3F BF FD | 	call	#_converttoint
19a7c     52 00 00 FF 
19a80     48 E5 05 F1 | 	add	objptr, ##42312
19a84     F2 FA 61 FC | 	wrlong	result1, objptr
19a88     52 00 00 FF 
19a8c     48 E5 85 F1 | 	sub	objptr, ##42312
19a90     18 00 90 FD | 	jmp	#LR__2041
19a94                 | LR__2040
19a94     52 00 00 FF 
19a98     48 E5 05 F1 | 	add	objptr, ##42312
19a9c     FF FF FF FF 
19aa0     F2 FE 6B FC | 	wrlong	##-1, objptr
19aa4     52 00 00 FF 
19aa8     48 E5 85 F1 | 	sub	objptr, ##42312
19aac                 | LR__2041
19aac                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
19aac     A7 1A 02 FB | 	rdlong	arg05, fp
19ab0     03 1A 56 F2 | 	cmps	arg05, #3 wc
19ab4     40 00 90 CD |  if_b	jmp	#LR__2042
19ab8     F0 3C BF FD | 	call	#_pop
19abc     FF 1A 02 F6 | 	mov	arg05, result3
19ac0     1C 4E 05 F1 | 	add	fp, #28
19ac4     A7 FA 61 FC | 	wrlong	result1, fp
19ac8     04 4E 05 F1 | 	add	fp, #4
19acc     A7 FC 61 FC | 	wrlong	result2, fp
19ad0     04 4E 05 F1 | 	add	fp, #4
19ad4     A7 1A 62 FC | 	wrlong	arg05, fp
19ad8     08 4E 85 F1 | 	sub	fp, #8
19adc     A7 12 02 F6 | 	mov	arg01, fp
19ae0     1C 4E 85 F1 | 	sub	fp, #28
19ae4     A8 3E BF FD | 	call	#_converttoint
19ae8     08 4E 05 F1 | 	add	fp, #8
19aec     A7 FA 61 FC | 	wrlong	result1, fp
19af0     08 4E 85 F1 | 	sub	fp, #8
19af4     0C 00 90 FD | 	jmp	#LR__2043
19af8                 | LR__2042
19af8     08 4E 05 F1 | 	add	fp, #8
19afc     A7 02 68 FC | 	wrlong	#1, fp
19b00     08 4E 85 F1 | 	sub	fp, #8
19b04                 | LR__2043
19b04                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
19b04     A7 18 02 FB | 	rdlong	arg04, fp
19b08     02 18 56 F2 | 	cmps	arg04, #2 wc
19b0c     3C 00 90 CD |  if_b	jmp	#LR__2044
19b10     98 3C BF FD | 	call	#_pop
19b14     FF 18 02 F6 | 	mov	arg04, result3
19b18     1C 4E 05 F1 | 	add	fp, #28
19b1c     A7 FA 61 FC | 	wrlong	result1, fp
19b20     04 4E 05 F1 | 	add	fp, #4
19b24     A7 FC 61 FC | 	wrlong	result2, fp
19b28     04 4E 05 F1 | 	add	fp, #4
19b2c     A7 18 62 FC | 	wrlong	arg04, fp
19b30     08 4E 85 F1 | 	sub	fp, #8
19b34     A7 12 02 F6 | 	mov	arg01, fp
19b38     1C 4E 85 F1 | 	sub	fp, #28
19b3c     50 3E BF FD | 	call	#_converttoint
19b40     0C 4E 05 F1 | 	add	fp, #12
19b44     A7 FA 61 FC | 	wrlong	result1, fp
19b48     0C 4E 85 F1 | 	sub	fp, #12
19b4c                 | LR__2044
19b4c     5C 3C BF FD | 	call	#_pop
19b50     FF 18 02 F6 | 	mov	arg04, result3
19b54     1C 4E 05 F1 | 	add	fp, #28
19b58     A7 FA 61 FC | 	wrlong	result1, fp
19b5c     04 4E 05 F1 | 	add	fp, #4
19b60     A7 FC 61 FC | 	wrlong	result2, fp
19b64     04 4E 05 F1 | 	add	fp, #4
19b68     A7 18 62 FC | 	wrlong	arg04, fp
19b6c     08 4E 85 F1 | 	sub	fp, #8
19b70     A7 12 02 F6 | 	mov	arg01, fp
19b74     1C 4E 85 F1 | 	sub	fp, #28
19b78     14 3E BF FD | 	call	#_converttoint
19b7c     04 4E 05 F1 | 	add	fp, #4
19b80     A7 FA 61 FC | 	wrlong	result1, fp
19b84     10 4E 05 F1 | 	add	fp, #16
19b88     A7 26 02 FB | 	rdlong	local01, fp
19b8c     14 4E 85 F1 | 	sub	fp, #20
19b90     02 26 66 F0 | 	shl	local01, #2
19b94     50 00 00 FF 
19b98     C4 E4 05 F1 | 	add	objptr, ##41156
19b9c     F2 26 02 F1 | 	add	local01, objptr
19ba0     13 01 68 FC | 	wrlong	#0, local01
19ba4                 | ' t1=pop() : channel=converttoint(t1)
19ba4                 | ' getres(j)=0
19ba4                 | ' if pos>=0 then
19ba4     02 00 00 FF 
19ba8     84 E4 05 F1 | 	add	objptr, ##1156
19bac     F2 28 02 FB | 	rdlong	local02, objptr
19bb0     52 00 00 FF 
19bb4     48 E5 85 F1 | 	sub	objptr, ##42312
19bb8     00 28 56 F2 | 	cmps	local02, #0 wc
19bbc     C0 01 90 CD |  if_b	jmp	#LR__2050
19bc0     10 4E 05 F1 | 	add	fp, #16
19bc4     A7 00 68 FC | 	wrlong	#0, fp
19bc8     10 4E 85 F1 | 	sub	fp, #16
19bcc                 | '    i=0: do
19bcc                 | LR__2045
19bcc     14 4E 05 F1 | 	add	fp, #20
19bd0     A7 00 68 FC | 	wrlong	#0, fp
19bd4     14 4E 85 F1 | 	sub	fp, #20
19bd8                 | '    j=0: do    
19bd8                 | LR__2046
19bd8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19bd8     0C 4E 05 F1 | 	add	fp, #12
19bdc     A7 28 02 FB | 	rdlong	local02, fp
19be0     0C 4E 85 F1 | 	sub	fp, #12
19be4     00 04 00 FF 
19be8     00 28 56 F2 | 	cmps	local02, ##524288 wc
19bec     4C 00 90 3D |  if_ae	jmp	#LR__2047
19bf0     14 4E 05 F1 | 	add	fp, #20
19bf4     A7 28 02 FB | 	rdlong	local02, fp
19bf8     14 27 02 F6 | 	mov	local01, local02
19bfc     4E 00 00 FF 
19c00     B4 E4 05 F1 | 	add	objptr, ##40116
19c04     F2 26 02 F1 | 	add	local01, objptr
19c08     08 4E 85 F1 | 	sub	fp, #8
19c0c     A7 12 02 FB | 	rdlong	arg01, fp
19c10     04 4E 05 F1 | 	add	fp, #4
19c14     A7 18 02 FB | 	rdlong	arg04, fp
19c18     0A 18 66 F0 | 	shl	arg04, #10
19c1c     0C 13 02 F1 | 	add	arg01, arg04
19c20     10 4E 85 F1 | 	sub	fp, #16
19c24     14 13 02 F1 | 	add	arg01, local02
19c28     09 FB C1 FA | 	rdbyte	result1, arg01
19c2c     4E 00 00 FF 
19c30     B4 E4 85 F1 | 	sub	objptr, ##40116
19c34     13 FB 41 FC | 	wrbyte	result1, local01
19c38     48 00 90 FD | 	jmp	#LR__2048
19c3c                 | LR__2047
19c3c     14 4E 05 F1 | 	add	fp, #20
19c40     A7 28 02 FB | 	rdlong	local02, fp
19c44     14 27 02 F6 | 	mov	local01, local02
19c48     4E 00 00 FF 
19c4c     B4 E4 05 F1 | 	add	objptr, ##40116
19c50     F2 26 02 F1 | 	add	local01, objptr
19c54     08 4E 85 F1 | 	sub	fp, #8
19c58     A7 12 02 FB | 	rdlong	arg01, fp
19c5c     04 4E 05 F1 | 	add	fp, #4
19c60     A7 18 02 FB | 	rdlong	arg04, fp
19c64     0A 18 66 F0 | 	shl	arg04, #10
19c68     0C 13 02 F1 | 	add	arg01, arg04
19c6c     10 4E 85 F1 | 	sub	fp, #16
19c70     14 13 02 F1 | 	add	arg01, local02
19c74     4E 00 00 FF 
19c78     B4 E4 85 F1 | 	sub	objptr, ##40116
19c7c     98 A0 B0 FD | 	call	#_pspeek
19c80     13 FB 41 FC | 	wrbyte	result1, local01
19c84                 | LR__2048
19c84     14 4E 05 F1 | 	add	fp, #20
19c88     A7 28 02 FB | 	rdlong	local02, fp
19c8c     01 28 06 F1 | 	add	local02, #1
19c90     A7 28 62 FC | 	wrlong	local02, fp
19c94     14 4E 85 F1 | 	sub	fp, #20
19c98     02 00 00 FF 
19c9c     00 28 56 F2 | 	cmps	local02, ##1024 wc
19ca0     2C 00 90 3D |  if_ae	jmp	#LR__2049
19ca4     10 4E 05 F1 | 	add	fp, #16
19ca8     A7 26 02 FB | 	rdlong	local01, fp
19cac     0A 26 66 F0 | 	shl	local01, #10
19cb0     04 4E 05 F1 | 	add	fp, #4
19cb4     A7 28 02 FB | 	rdlong	local02, fp
19cb8     14 27 02 F1 | 	add	local01, local02
19cbc     0C 4E 85 F1 | 	sub	fp, #12
19cc0     A7 28 02 FB | 	rdlong	local02, fp
19cc4     08 4E 85 F1 | 	sub	fp, #8
19cc8     14 27 5A F2 | 	cmps	local01, local02 wcz
19ccc     08 FF 9F ED |  if_be	jmp	#LR__2046
19cd0                 | LR__2049
19cd0                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
19cd0     04 4E 05 F1 | 	add	fp, #4
19cd4     A7 12 02 FB | 	rdlong	arg01, fp
19cd8     52 00 00 FF 
19cdc     48 E5 05 F1 | 	add	objptr, ##42312
19ce0     F2 14 02 FB | 	rdlong	arg02, objptr
19ce4     01 14 06 F1 | 	add	arg02, #1
19ce8     04 00 00 FF 
19cec     94 E4 85 F1 | 	sub	objptr, ##2196
19cf0     F2 16 02 F6 | 	mov	arg03, objptr
19cf4     4E 00 00 FF 
19cf8     B4 E4 85 F1 | 	sub	objptr, ##40116
19cfc     04 4E 05 F1 | 	add	fp, #4
19d00     A7 18 02 FB | 	rdlong	arg04, fp
19d04     08 4E 85 F1 | 	sub	fp, #8
19d08     01 1A 06 F6 | 	mov	arg05, #1
19d0c     B0 E5 B0 FD | 	call	#__system___basic_put
19d10     18 4E 05 F1 | 	add	fp, #24
19d14     A7 FA 61 FC | 	wrlong	result1, fp
19d18     14 4E 85 F1 | 	sub	fp, #20
19d1c     A7 26 02 FB | 	rdlong	local01, fp
19d20     02 26 66 F0 | 	shl	local01, #2
19d24     50 00 00 FF 
19d28     C4 E4 05 F1 | 	add	objptr, ##41156
19d2c     F2 26 02 F1 | 	add	local01, objptr
19d30     13 FB 61 FC | 	wrlong	result1, local01
19d34                 | '    if 1024*i+j>amount then exit loop
19d34     0C 4E 05 F1 | 	add	fp, #12
19d38     A7 28 02 FB | 	rdlong	local02, fp
19d3c     0A 28 66 F0 | 	shl	local02, #10
19d40     04 4E 05 F1 | 	add	fp, #4
19d44     A7 26 02 FB | 	rdlong	local01, fp
19d48     13 29 02 F1 | 	add	local02, local01
19d4c     0C 4E 85 F1 | 	sub	fp, #12
19d50     A7 26 02 FB | 	rdlong	local01, fp
19d54     08 4E 85 F1 | 	sub	fp, #8
19d58     13 29 5A F2 | 	cmps	local02, local01 wcz
19d5c     50 00 00 FF 
19d60     C4 E4 85 F1 | 	sub	objptr, ##41156
19d64     CC 01 90 1D |  if_a	jmp	#LR__2057
19d68     10 4E 05 F1 | 	add	fp, #16
19d6c     A7 28 02 FB | 	rdlong	local02, fp
19d70     01 28 06 F1 | 	add	local02, #1
19d74     A7 28 62 FC | 	wrlong	local02, fp
19d78     10 4E 85 F1 | 	sub	fp, #16
19d7c     4C FE 9F FD | 	jmp	#LR__2045
19d80                 | LR__2050
19d80     10 4E 05 F1 | 	add	fp, #16
19d84     A7 00 68 FC | 	wrlong	#0, fp
19d88     10 4E 85 F1 | 	sub	fp, #16
19d8c                 | '    i=0: do
19d8c                 | LR__2051
19d8c     14 4E 05 F1 | 	add	fp, #20
19d90     A7 00 68 FC | 	wrlong	#0, fp
19d94     14 4E 85 F1 | 	sub	fp, #20
19d98                 | '    j=0: do  
19d98                 | LR__2052
19d98                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19d98     0C 4E 05 F1 | 	add	fp, #12
19d9c     A7 28 02 FB | 	rdlong	local02, fp
19da0     0C 4E 85 F1 | 	sub	fp, #12
19da4     00 04 00 FF 
19da8     00 28 56 F2 | 	cmps	local02, ##524288 wc
19dac     4C 00 90 3D |  if_ae	jmp	#LR__2053
19db0     14 4E 05 F1 | 	add	fp, #20
19db4     A7 28 02 FB | 	rdlong	local02, fp
19db8     14 27 02 F6 | 	mov	local01, local02
19dbc     4E 00 00 FF 
19dc0     B4 E4 05 F1 | 	add	objptr, ##40116
19dc4     F2 26 02 F1 | 	add	local01, objptr
19dc8     08 4E 85 F1 | 	sub	fp, #8
19dcc     A7 12 02 FB | 	rdlong	arg01, fp
19dd0     04 4E 05 F1 | 	add	fp, #4
19dd4     A7 18 02 FB | 	rdlong	arg04, fp
19dd8     0A 18 66 F0 | 	shl	arg04, #10
19ddc     0C 13 02 F1 | 	add	arg01, arg04
19de0     10 4E 85 F1 | 	sub	fp, #16
19de4     14 13 02 F1 | 	add	arg01, local02
19de8     09 FB C1 FA | 	rdbyte	result1, arg01
19dec     4E 00 00 FF 
19df0     B4 E4 85 F1 | 	sub	objptr, ##40116
19df4     13 FB 41 FC | 	wrbyte	result1, local01
19df8     48 00 90 FD | 	jmp	#LR__2054
19dfc                 | LR__2053
19dfc     14 4E 05 F1 | 	add	fp, #20
19e00     A7 28 02 FB | 	rdlong	local02, fp
19e04     14 27 02 F6 | 	mov	local01, local02
19e08     4E 00 00 FF 
19e0c     B4 E4 05 F1 | 	add	objptr, ##40116
19e10     F2 26 02 F1 | 	add	local01, objptr
19e14     08 4E 85 F1 | 	sub	fp, #8
19e18     A7 12 02 FB | 	rdlong	arg01, fp
19e1c     04 4E 05 F1 | 	add	fp, #4
19e20     A7 18 02 FB | 	rdlong	arg04, fp
19e24     0A 18 66 F0 | 	shl	arg04, #10
19e28     0C 13 02 F1 | 	add	arg01, arg04
19e2c     10 4E 85 F1 | 	sub	fp, #16
19e30     14 13 02 F1 | 	add	arg01, local02
19e34     4E 00 00 FF 
19e38     B4 E4 85 F1 | 	sub	objptr, ##40116
19e3c     D8 9E B0 FD | 	call	#_pspeek
19e40     13 FB 41 FC | 	wrbyte	result1, local01
19e44                 | LR__2054
19e44     14 4E 05 F1 | 	add	fp, #20
19e48     A7 28 02 FB | 	rdlong	local02, fp
19e4c     01 28 06 F1 | 	add	local02, #1
19e50     A7 28 62 FC | 	wrlong	local02, fp
19e54     14 4E 85 F1 | 	sub	fp, #20
19e58     02 00 00 FF 
19e5c     00 28 56 F2 | 	cmps	local02, ##1024 wc
19e60     2C 00 90 3D |  if_ae	jmp	#LR__2055
19e64     10 4E 05 F1 | 	add	fp, #16
19e68     A7 26 02 FB | 	rdlong	local01, fp
19e6c     0A 26 66 F0 | 	shl	local01, #10
19e70     04 4E 05 F1 | 	add	fp, #4
19e74     A7 28 02 FB | 	rdlong	local02, fp
19e78     14 27 02 F1 | 	add	local01, local02
19e7c     0C 4E 85 F1 | 	sub	fp, #12
19e80     A7 28 02 FB | 	rdlong	local02, fp
19e84     08 4E 85 F1 | 	sub	fp, #8
19e88     14 27 5A F2 | 	cmps	local01, local02 wcz
19e8c     08 FF 9F ED |  if_be	jmp	#LR__2052
19e90                 | LR__2055
19e90                 | '    put #channel,,block(0),amount, r : getres(channel)=r
19e90     04 4E 05 F1 | 	add	fp, #4
19e94     A7 12 02 FB | 	rdlong	arg01, fp
19e98     4E 00 00 FF 
19e9c     B4 E4 05 F1 | 	add	objptr, ##40116
19ea0     F2 16 02 F6 | 	mov	arg03, objptr
19ea4     4E 00 00 FF 
19ea8     B4 E4 85 F1 | 	sub	objptr, ##40116
19eac     04 4E 05 F1 | 	add	fp, #4
19eb0     A7 18 02 FB | 	rdlong	arg04, fp
19eb4     08 4E 85 F1 | 	sub	fp, #8
19eb8     00 14 06 F6 | 	mov	arg02, #0
19ebc     01 1A 06 F6 | 	mov	arg05, #1
19ec0     FC E3 B0 FD | 	call	#__system___basic_put
19ec4     18 4E 05 F1 | 	add	fp, #24
19ec8     A7 FA 61 FC | 	wrlong	result1, fp
19ecc     14 4E 85 F1 | 	sub	fp, #20
19ed0     A7 26 02 FB | 	rdlong	local01, fp
19ed4     02 26 66 F0 | 	shl	local01, #2
19ed8     50 00 00 FF 
19edc     C4 E4 05 F1 | 	add	objptr, ##41156
19ee0     F2 26 02 F1 | 	add	local01, objptr
19ee4     13 FB 61 FC | 	wrlong	result1, local01
19ee8                 | '    if 1024*i+j>amount then exit loop
19ee8     0C 4E 05 F1 | 	add	fp, #12
19eec     A7 28 02 FB | 	rdlong	local02, fp
19ef0     0A 28 66 F0 | 	shl	local02, #10
19ef4     04 4E 05 F1 | 	add	fp, #4
19ef8     A7 26 02 FB | 	rdlong	local01, fp
19efc     13 29 02 F1 | 	add	local02, local01
19f00     0C 4E 85 F1 | 	sub	fp, #12
19f04     A7 2A 02 FB | 	rdlong	local03, fp
19f08     08 4E 85 F1 | 	sub	fp, #8
19f0c     15 29 5A F2 | 	cmps	local02, local03 wcz
19f10     50 00 00 FF 
19f14     C4 E4 85 F1 | 	sub	objptr, ##41156
19f18     18 00 90 1D |  if_a	jmp	#LR__2056
19f1c     10 4E 05 F1 | 	add	fp, #16
19f20     A7 28 02 FB | 	rdlong	local02, fp
19f24     01 28 06 F1 | 	add	local02, #1
19f28     A7 28 62 FC | 	wrlong	local02, fp
19f2c     10 4E 85 F1 | 	sub	fp, #16
19f30     58 FE 9F FD | 	jmp	#LR__2051
19f34                 | LR__2056
19f34                 | LR__2057
19f34     A7 F0 03 F6 | 	mov	ptra, fp
19f38     B2 00 A0 FD | 	call	#popregs_
19f3c                 | _do_put_ret
19f3c     2D 00 64 FD | 	ret
19f40                 | 
19f40                 | ' 
19f40                 | ' '-------------------- rad
19f40                 | ' 
19f40                 | ' sub do_rad
19f40                 | _do_rad
19f40     52 00 00 FF 
19f44     E0 E4 05 F1 | 	add	objptr, ##42208
19f48     00 C0 9F FF 
19f4c     F2 00 68 FC | 	wrlong	##1065353216, objptr
19f50     04 E4 05 F1 | 	add	objptr, #4
19f54     00 C0 9F FF 
19f58     F2 00 68 FC | 	wrlong	##1065353216, objptr
19f5c     52 00 00 FF 
19f60     E4 E4 85 F1 | 	sub	objptr, ##42212
19f64                 | _do_rad_ret
19f64     2D 00 64 FD | 	ret
19f68                 | 
19f68                 | ' 
19f68                 | ' '-------------------- rdpin
19f68                 | ' 
19f68                 | ' sub do_rdpin
19f68                 | _do_rdpin
19f68     00 4A 05 F6 | 	mov	COUNT_, #0
19f6c     A8 00 A0 FD | 	call	#pushregs_
19f70     0C F0 07 F1 | 	add	ptra, #12
19f74     34 38 BF FD | 	call	#_pop
19f78     A7 FA 61 FC | 	wrlong	result1, fp
19f7c     04 4E 05 F1 | 	add	fp, #4
19f80     A7 FC 61 FC | 	wrlong	result2, fp
19f84     04 4E 05 F1 | 	add	fp, #4
19f88     A7 FE 61 FC | 	wrlong	result3, fp
19f8c     08 4E 85 F1 | 	sub	fp, #8
19f90     A7 12 02 F6 | 	mov	arg01, fp
19f94     F8 39 BF FD | 	call	#_converttoint
19f98     FD FA 89 FA | 	rdpin	result1, result1
19f9c     52 00 00 FF 
19fa0     4C E5 05 F1 | 	add	objptr, ##42316
19fa4     F2 FA 61 FC | 	wrlong	result1, objptr
19fa8     52 00 00 FF 
19fac     4C E5 85 F1 | 	sub	objptr, ##42316
19fb0     08 4E 05 F1 | 	add	fp, #8
19fb4     A7 3A 68 FC | 	wrlong	#29, fp
19fb8     08 4E 85 F1 | 	sub	fp, #8
19fbc     A7 08 68 FC | 	wrlong	#4, fp
19fc0     A7 12 02 F6 | 	mov	arg01, fp
19fc4     7C 38 BF FD | 	call	#_push
19fc8     A7 F0 03 F6 | 	mov	ptra, fp
19fcc     B2 00 A0 FD | 	call	#popregs_
19fd0                 | _do_rdpin_ret
19fd0     2D 00 64 FD | 	ret
19fd4                 | 
19fd4                 | ' 
19fd4                 | ' ' ----------------  read
19fd4                 | ' 
19fd4                 | ' function read_next_line() as string
19fd4                 | _read_next_line
19fd4     07 4A 05 F6 | 	mov	COUNT_, #7
19fd8     A8 00 A0 FD | 	call	#pushregs_
19fdc                 | ' if dataptr=$7FFFFFFF then return("")
19fdc     50 00 00 FF 
19fe0     2C E5 05 F1 | 	add	objptr, ##41260
19fe4     F2 26 02 FB | 	rdlong	local01, objptr
19fe8     50 00 00 FF 
19fec     2C E5 85 F1 | 	sub	objptr, ##41260
19ff0     FF FF 3F FF 
19ff4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19ff8     BD 01 00 AF 
19ffc     6D FB 05 A6 |  if_e	mov	result1, ##@LR__6019
1a000     BC 01 90 AD |  if_e	jmp	#LR__2067
1a004                 | ' do
1a004                 | LR__2060
1a004     50 00 00 FF 
1a008     08 E5 05 F1 | 	add	objptr, ##41224
1a00c     F2 12 02 F6 | 	mov	arg01, objptr
1a010     24 E4 05 F1 | 	add	objptr, #36
1a014     F2 14 02 FB | 	rdlong	arg02, objptr
1a018     24 16 06 F6 | 	mov	arg03, #36
1a01c     45 00 00 FF 
1a020     60 E4 85 F1 | 	sub	objptr, ##35424
1a024     EC C7 B0 FD | 	call	#_psram_spin2_read1
1a028                 | '  ' print dataptr
1a028                 | '   psram.read1(varptr(dataheader),dataptr,36) 
1a028                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
1a028     45 00 00 FF 
1a02c     3C E4 05 F1 | 	add	objptr, ##35388
1a030     F2 26 02 FB | 	rdlong	local01, objptr
1a034     50 00 00 FF 
1a038     08 E5 85 F1 | 	sub	objptr, ##41224
1a03c     FF FF 7F FF 
1a040     FF 27 0E F2 | 	cmp	local01, ##-1 wz
1a044     50 00 00 5F 
1a048     1C E5 05 51 |  if_ne	add	objptr, ##41244
1a04c     F2 26 02 5B |  if_ne	rdlong	local01, objptr
1a050     10 E4 05 51 |  if_ne	add	objptr, #16
1a054     F2 26 62 5C |  if_ne	wrlong	local01, objptr
1a058     50 00 00 5F 
1a05c     2C E5 85 51 |  if_ne	sub	objptr, ##41260
1a060     50 00 00 FF 
1a064     1C E5 05 F1 | 	add	objptr, ##41244
1a068     F2 26 02 FB | 	rdlong	local01, objptr
1a06c     50 00 00 FF 
1a070     1C E5 85 F1 | 	sub	objptr, ##41244
1a074     FF FF 3F FF 
1a078     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1a07c     50 00 00 5F 
1a080     08 E5 05 51 |  if_ne	add	objptr, ##41224
1a084     F2 28 02 5B |  if_ne	rdlong	local02, objptr
1a088     50 00 00 5F 
1a08c     08 E5 85 51 |  if_ne	sub	objptr, ##41224
1a090     FF FF 7F 5F 
1a094     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
1a098     50 00 00 5F 
1a09c     28 E5 05 51 |  if_ne	add	objptr, ##41256
1a0a0     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
1a0a4     50 00 00 5F 
1a0a8     28 E5 85 51 |  if_ne	sub	objptr, ##41256
1a0ac     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
1a0b0     50 FF 9F 5D |  if_ne	jmp	#LR__2060
1a0b4                 | ' if dataheader(8)=token_data then 
1a0b4     50 00 00 FF 
1a0b8     28 E5 05 F1 | 	add	objptr, ##41256
1a0bc     F2 26 02 FB | 	rdlong	local01, objptr
1a0c0     50 00 00 FF 
1a0c4     28 E5 85 F1 | 	sub	objptr, ##41256
1a0c8     B7 26 0E F2 | 	cmp	local01, #183 wz
1a0cc     E0 00 90 5D |  if_ne	jmp	#LR__2065
1a0d0     50 00 00 FF 
1a0d4     10 E5 05 F1 | 	add	objptr, ##41232
1a0d8     F2 26 02 FB | 	rdlong	local01, objptr
1a0dc     02 00 00 FF 
1a0e0     1C E4 05 F1 | 	add	objptr, ##1052
1a0e4     F2 26 62 FC | 	wrlong	local01, objptr
1a0e8     02 00 00 FF 
1a0ec     18 E4 85 F1 | 	sub	objptr, ##1048
1a0f0     F2 2C 02 FB | 	rdlong	local04, objptr
1a0f4     02 00 00 FF 
1a0f8     10 E4 05 F1 | 	add	objptr, ##1040
1a0fc     F2 2C 62 FC | 	wrlong	local04, objptr
1a100                 | '  'print "data found at line "; dataheader(0)
1a100                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
1a100     00 2E 06 F6 | 	mov	local05, #0
1a104     52 00 00 FF 
1a108     24 E5 85 F1 | 	sub	objptr, ##42276
1a10c                 | LR__2061
1a10c     16 2F 52 F2 | 	cmps	local05, local04 wc
1a110     3C 00 90 3D |  if_ae	jmp	#LR__2062
1a114     52 00 00 FF 
1a118     2C E5 05 F1 | 	add	objptr, ##42284
1a11c     F2 12 02 FB | 	rdlong	arg01, objptr
1a120     52 00 00 FF 
1a124     2C E5 85 F1 | 	sub	objptr, ##42284
1a128     17 13 02 F1 | 	add	arg01, local05
1a12c     E8 9B B0 FD | 	call	#_pspeek
1a130     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
1a134     C4 F5 B0 FD | 	call	#__system__Chr_S
1a138     FD 14 02 F6 | 	mov	arg02, result1
1a13c     18 13 02 F6 | 	mov	arg01, local06
1a140     D0 D3 B0 FD | 	call	#__system___string_concat
1a144     FD 30 02 F6 | 	mov	local06, result1
1a148     01 2E 06 F1 | 	add	local05, #1
1a14c     BC FF 9F FD | 	jmp	#LR__2061
1a150                 | LR__2062
1a150     BD 01 00 FF 
1a154     6E 17 06 F6 | 	mov	arg03, ##@LR__6020
1a158     01 12 06 F6 | 	mov	arg01, #1
1a15c     18 15 02 F6 | 	mov	arg02, local06
1a160     1C F9 B0 FD | 	call	#__system__Instr
1a164     FD 2E 02 F6 | 	mov	local05, result1
1a168     18 13 02 F6 | 	mov	arg01, local06
1a16c     09 33 02 F6 | 	mov	local07, arg01
1a170     97 06 48 FB | 	callpa	#(@LR__2064-@LR__2063)>>2,fcache_load_ptr_
1a174                 | LR__2063
1a174     19 FB C9 FA | 	rdbyte	result1, local07 wz
1a178     01 32 06 51 |  if_ne	add	local07, #1
1a17c     F4 FF 9F 5D |  if_ne	jmp	#LR__2063
1a180                 | LR__2064
1a180     09 33 82 F1 | 	sub	local07, arg01
1a184     19 15 02 F6 | 	mov	arg02, local07
1a188     17 15 82 F1 | 	sub	arg02, local05
1a18c     04 14 86 F1 | 	sub	arg02, #4
1a190     18 13 02 F6 | 	mov	arg01, local06
1a194     28 F4 B0 FD | 	call	#__system__Right_S
1a198     FD 12 02 F6 | 	mov	arg01, result1
1a19c     28 F8 B0 FD | 	call	#__system__RTrim_S
1a1a0     FD 12 02 F6 | 	mov	arg01, result1
1a1a4     60 F7 B0 FD | 	call	#__system__LTrim_S
1a1a8     FD 30 02 F6 | 	mov	local06, result1
1a1ac     0C 00 90 FD | 	jmp	#LR__2066
1a1b0                 | LR__2065
1a1b0                 | '   return ("") 'todo proper err
1a1b0     BD 01 00 FF 
1a1b4     73 FB 05 F6 | 	mov	result1, ##@LR__6021
1a1b8     04 00 90 FD | 	jmp	#LR__2067
1a1bc                 | LR__2066
1a1bc                 | ' return readline
1a1bc     18 FB 01 F6 | 	mov	result1, local06
1a1c0                 | LR__2067
1a1c0     A7 F0 03 F6 | 	mov	ptra, fp
1a1c4     B2 00 A0 FD | 	call	#popregs_
1a1c8                 | _read_next_line_ret
1a1c8     2D 00 64 FD | 	ret
1a1cc                 | 
1a1cc                 | ' 
1a1cc                 | ' sub do_read
1a1cc                 | _do_read
1a1cc     11 4A 05 F6 | 	mov	COUNT_, #17
1a1d0     A8 00 A0 FD | 	call	#pushregs_
1a1d4     58 F1 07 F1 | 	add	ptra, #344
1a1d8     4A 00 00 FF 
1a1dc     80 E4 05 F1 | 	add	objptr, ##38016
1a1e0     F2 FE 01 FB | 	rdlong	result3, objptr
1a1e4     FF FC 01 F6 | 	mov	result2, result3
1a1e8     01 FC 65 F0 | 	shl	result2, #1
1a1ec     FF FC 01 F1 | 	add	result2, result3
1a1f0     02 FC 65 F0 | 	shl	result2, #2
1a1f4     03 00 00 FF 
1a1f8     04 E4 85 F1 | 	sub	objptr, ##1540
1a1fc     F2 FC 01 F1 | 	add	result2, objptr
1a200     FE FC 01 FB | 	rdlong	result2, result2
1a204     08 4E 05 F1 | 	add	fp, #8
1a208     A7 FC 61 FC | 	wrlong	result2, fp
1a20c                 | ' 
1a20c                 | ' 
1a20c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a20c                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
1a20c     08 4E 85 F1 | 	sub	fp, #8
1a210     01 FC 15 F2 | 	cmp	result2, #1 wc
1a214     47 00 00 FF 
1a218     7C E4 85 F1 | 	sub	objptr, ##36476
1a21c     14 00 90 CD |  if_b	jmp	#LR__2070
1a220     08 4E 05 F1 | 	add	fp, #8
1a224     A7 FC 01 FB | 	rdlong	result2, fp
1a228     08 4E 85 F1 | 	sub	fp, #8
1a22c     41 FC 15 F2 | 	cmp	result2, #65 wc
1a230     50 00 90 CD |  if_b	jmp	#LR__2071
1a234                 | LR__2070
1a234     00 12 06 F6 | 	mov	arg01, #0
1a238     20 2F B1 FD | 	call	#__system___getiolock_0616
1a23c     FD 12 02 F6 | 	mov	arg01, result1
1a240     74 D2 B0 FD | 	call	#__system___lockmem
1a244     BD 01 00 FF 
1a248     74 15 06 F6 | 	mov	arg02, ##@LR__6022
1a24c     00 12 06 F6 | 	mov	arg01, #0
1a250     00 16 06 F6 | 	mov	arg03, #0
1a254     58 DF B0 FD | 	call	#__system___basic_print_string
1a258     00 12 06 F6 | 	mov	arg01, #0
1a25c     FC 2E B1 FD | 	call	#__system___getiolock_0616
1a260     FD 00 68 FC | 	wrlong	#0, result1
1a264     50 00 00 FF 
1a268     F0 E4 05 F1 | 	add	objptr, ##41200
1a26c     F2 14 02 FB | 	rdlong	arg02, objptr
1a270     50 00 00 FF 
1a274     F0 E4 85 F1 | 	sub	objptr, ##41200
1a278     27 12 06 F6 | 	mov	arg01, #39
1a27c     20 98 B0 FD | 	call	#_printerror
1a280     D0 0C 90 FD | 	jmp	#LR__2121
1a284                 | LR__2071
1a284     08 4E 05 F1 | 	add	fp, #8
1a288     A7 16 02 FB | 	rdlong	arg03, fp
1a28c     01 16 86 F1 | 	sub	arg03, #1
1a290     28 4F 05 F1 | 	add	fp, #296
1a294     A7 16 62 FC | 	wrlong	arg03, fp
1a298     30 4F 85 F1 | 	sub	fp, #304
1a29c                 | ' i=numpar-1
1a29c                 | ' if readline="" then readline=read_next_line() ': print readline
1a29c     52 00 00 FF 
1a2a0     14 E5 05 F1 | 	add	objptr, ##42260
1a2a4     F2 12 02 FB | 	rdlong	arg01, objptr
1a2a8     52 00 00 FF 
1a2ac     14 E5 85 F1 | 	sub	objptr, ##42260
1a2b0     BD 01 00 FF 
1a2b4     7E 15 06 F6 | 	mov	arg02, ##@LR__6023
1a2b8     24 D2 B0 FD | 	call	#__system___string_cmp
1a2bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1a2c0     18 00 90 5D |  if_ne	jmp	#LR__2072
1a2c4     0C FD BF FD | 	call	#_read_next_line
1a2c8     52 00 00 FF 
1a2cc     14 E5 05 F1 | 	add	objptr, ##42260
1a2d0     F2 FA 61 FC | 	wrlong	result1, objptr
1a2d4     52 00 00 FF 
1a2d8     14 E5 85 F1 | 	sub	objptr, ##42260
1a2dc                 | LR__2072
1a2dc                 | ' if readline="" then printerror(55,runheader(0)) :return
1a2dc     52 00 00 FF 
1a2e0     14 E5 05 F1 | 	add	objptr, ##42260
1a2e4     F2 12 02 FB | 	rdlong	arg01, objptr
1a2e8     52 00 00 FF 
1a2ec     14 E5 85 F1 | 	sub	objptr, ##42260
1a2f0     BD 01 00 FF 
1a2f4     7F 15 06 F6 | 	mov	arg02, ##@LR__6024
1a2f8     E4 D1 B0 FD | 	call	#__system___string_cmp
1a2fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1a300     20 00 90 5D |  if_ne	jmp	#LR__2073
1a304     50 00 00 FF 
1a308     F0 E4 05 F1 | 	add	objptr, ##41200
1a30c     F2 14 02 FB | 	rdlong	arg02, objptr
1a310     50 00 00 FF 
1a314     F0 E4 85 F1 | 	sub	objptr, ##41200
1a318     37 12 06 F6 | 	mov	arg01, #55
1a31c     80 97 B0 FD | 	call	#_printerror
1a320     30 0C 90 FD | 	jmp	#LR__2121
1a324                 | LR__2073
1a324     34 4F 05 F1 | 	add	fp, #308
1a328     A7 00 68 FC | 	wrlong	#0, fp
1a32c     2C 4F 85 F1 | 	sub	fp, #300
1a330     A7 26 02 FB | 	rdlong	local01, fp
1a334     01 26 86 F1 | 	sub	local01, #1
1a338     28 4F 05 F1 | 	add	fp, #296
1a33c     A7 26 62 FC | 	wrlong	local01, fp
1a340     30 4F 85 F1 | 	sub	fp, #304
1a344                 | ' j=0
1a344                 | ' i=numpar-1
1a344                 | ' do
1a344                 | LR__2074
1a344                 | '   do
1a344                 | LR__2075
1a344     52 00 00 FF 
1a348     14 E5 05 F1 | 	add	objptr, ##42260
1a34c     F2 14 02 FB | 	rdlong	arg02, objptr
1a350     52 00 00 FF 
1a354     14 E5 85 F1 | 	sub	objptr, ##42260
1a358     BD 01 00 FF 
1a35c     80 17 06 F6 | 	mov	arg03, ##@LR__6025
1a360     01 12 06 F6 | 	mov	arg01, #1
1a364     18 F7 B0 FD | 	call	#__system__Instr
1a368     0C 4E 05 F1 | 	add	fp, #12
1a36c     A7 FA 61 FC | 	wrlong	result1, fp
1a370                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
1a370     0C 4E 85 F1 | 	sub	fp, #12
1a374     01 FA 15 F2 | 	cmp	result1, #1 wc
1a378     3C 00 90 CD |  if_b	jmp	#LR__2076
1a37c     52 00 00 FF 
1a380     14 E5 05 F1 | 	add	objptr, ##42260
1a384     F2 12 02 FB | 	rdlong	arg01, objptr
1a388     52 00 00 FF 
1a38c     14 E5 85 F1 | 	sub	objptr, ##42260
1a390     0C 4E 05 F1 | 	add	fp, #12
1a394     A7 14 02 FB | 	rdlong	arg02, fp
1a398     0C 4E 85 F1 | 	sub	fp, #12
1a39c     01 14 86 F1 | 	sub	arg02, #1
1a3a0     94 F1 B0 FD | 	call	#__system__Left_S
1a3a4     52 00 00 FF 
1a3a8     14 E5 05 F1 | 	add	objptr, ##42260
1a3ac     F2 FA 61 FC | 	wrlong	result1, objptr
1a3b0     52 00 00 FF 
1a3b4     14 E5 85 F1 | 	sub	objptr, ##42260
1a3b8                 | LR__2076
1a3b8     52 00 00 FF 
1a3bc     14 E5 05 F1 | 	add	objptr, ##42260
1a3c0     F2 14 02 FB | 	rdlong	arg02, objptr
1a3c4     52 00 00 FF 
1a3c8     14 E5 85 F1 | 	sub	objptr, ##42260
1a3cc     BD 01 00 FF 
1a3d0     82 17 06 F6 | 	mov	arg03, ##@LR__6026
1a3d4     01 12 06 F6 | 	mov	arg01, #1
1a3d8     A4 F6 B0 FD | 	call	#__system__Instr
1a3dc     0C 4E 05 F1 | 	add	fp, #12
1a3e0     A7 FA 61 FC | 	wrlong	result1, fp
1a3e4                 | '     comma=instr(1,readline,",")  
1a3e4                 | '       if comma>0  then 
1a3e4     0C 4E 85 F1 | 	sub	fp, #12
1a3e8     01 FA 15 F2 | 	cmp	result1, #1 wc
1a3ec     98 00 90 CD |  if_b	jmp	#LR__2079
1a3f0     52 00 00 FF 
1a3f4     14 E5 05 F1 | 	add	objptr, ##42260
1a3f8     F2 12 02 FB | 	rdlong	arg01, objptr
1a3fc     52 00 00 FF 
1a400     14 E5 85 F1 | 	sub	objptr, ##42260
1a404     0C 4E 05 F1 | 	add	fp, #12
1a408     A7 14 02 FB | 	rdlong	arg02, fp
1a40c     0C 4E 85 F1 | 	sub	fp, #12
1a410     01 14 86 F1 | 	sub	arg02, #1
1a414     20 F1 B0 FD | 	call	#__system__Left_S
1a418     04 4E 05 F1 | 	add	fp, #4
1a41c     A7 FA 61 FC | 	wrlong	result1, fp
1a420     04 4E 85 F1 | 	sub	fp, #4
1a424     52 00 00 FF 
1a428     14 E5 05 F1 | 	add	objptr, ##42260
1a42c     F2 12 02 FB | 	rdlong	arg01, objptr
1a430     09 27 02 F6 | 	mov	local01, arg01
1a434     52 00 00 FF 
1a438     14 E5 85 F1 | 	sub	objptr, ##42260
1a43c     09 29 02 F6 | 	mov	local02, arg01
1a440     97 06 48 FB | 	callpa	#(@LR__2078-@LR__2077)>>2,fcache_load_ptr_
1a444                 | LR__2077
1a444     14 FB C9 FA | 	rdbyte	result1, local02 wz
1a448     01 28 06 51 |  if_ne	add	local02, #1
1a44c     F4 FF 9F 5D |  if_ne	jmp	#LR__2077
1a450                 | LR__2078
1a450     09 29 82 F1 | 	sub	local02, arg01
1a454     14 15 02 F6 | 	mov	arg02, local02
1a458     0C 4E 05 F1 | 	add	fp, #12
1a45c     A7 16 02 FB | 	rdlong	arg03, fp
1a460     0C 4E 85 F1 | 	sub	fp, #12
1a464     0B 15 82 F1 | 	sub	arg02, arg03
1a468     13 13 02 F6 | 	mov	arg01, local01
1a46c     50 F1 B0 FD | 	call	#__system__Right_S
1a470     52 00 00 FF 
1a474     14 E5 05 F1 | 	add	objptr, ##42260
1a478     F2 FA 61 FC | 	wrlong	result1, objptr
1a47c     52 00 00 FF 
1a480     14 E5 85 F1 | 	sub	objptr, ##42260
1a484     48 00 90 FD | 	jmp	#LR__2080
1a488                 | LR__2079
1a488     52 00 00 FF 
1a48c     14 E5 05 F1 | 	add	objptr, ##42260
1a490     F2 12 02 FB | 	rdlong	arg01, objptr
1a494     52 00 00 FF 
1a498     14 E5 85 F1 | 	sub	objptr, ##42260
1a49c     28 F5 B0 FD | 	call	#__system__RTrim_S
1a4a0     FD 12 02 F6 | 	mov	arg01, result1
1a4a4     60 F4 B0 FD | 	call	#__system__LTrim_S
1a4a8     04 4E 05 F1 | 	add	fp, #4
1a4ac     A7 FA 61 FC | 	wrlong	result1, fp
1a4b0     04 4E 85 F1 | 	sub	fp, #4
1a4b4     BD 01 00 FF 
1a4b8     84 27 06 F6 | 	mov	local01, ##@LR__6027
1a4bc     52 00 00 FF 
1a4c0     14 E5 05 F1 | 	add	objptr, ##42260
1a4c4     F2 26 62 FC | 	wrlong	local01, objptr
1a4c8     52 00 00 FF 
1a4cc     14 E5 85 F1 | 	sub	objptr, ##42260
1a4d0                 | LR__2080
1a4d0                 | '      
1a4d0                 | '      if part$<>"" then j=j+1
1a4d0     04 4E 05 F1 | 	add	fp, #4
1a4d4     A7 12 02 FB | 	rdlong	arg01, fp
1a4d8     04 4E 85 F1 | 	sub	fp, #4
1a4dc     BD 01 00 FF 
1a4e0     85 15 06 F6 | 	mov	arg02, ##@LR__6028
1a4e4     F8 CF B0 FD | 	call	#__system___string_cmp
1a4e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a4ec     34 4F 05 51 |  if_ne	add	fp, #308
1a4f0     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a4f4     01 26 06 51 |  if_ne	add	local01, #1
1a4f8     A7 26 62 5C |  if_ne	wrlong	local01, fp
1a4fc     34 4F 85 51 |  if_ne	sub	fp, #308
1a500     30 4F 05 F1 | 	add	fp, #304
1a504     A7 26 02 FB | 	rdlong	local01, fp
1a508     02 26 66 F0 | 	shl	local01, #2
1a50c     04 4F 85 F1 | 	sub	fp, #260
1a510     A7 26 02 F1 | 	add	local01, fp
1a514     28 4E 85 F1 | 	sub	fp, #40
1a518     A7 FA 01 FB | 	rdlong	result1, fp
1a51c     13 FB 61 FC | 	wrlong	result1, local01
1a520     2C 4F 05 F1 | 	add	fp, #300
1a524     A7 26 02 FB | 	rdlong	local01, fp
1a528     01 26 86 F1 | 	sub	local01, #1
1a52c     A7 26 62 FC | 	wrlong	local01, fp
1a530     30 4F 85 F1 | 	sub	fp, #304
1a534                 | '      args(i)=part$  
1a534                 | '      i=i-1
1a534                 | '     if readline="" then readline=read_next_line() 
1a534     52 00 00 FF 
1a538     14 E5 05 F1 | 	add	objptr, ##42260
1a53c     F2 12 02 FB | 	rdlong	arg01, objptr
1a540     52 00 00 FF 
1a544     14 E5 85 F1 | 	sub	objptr, ##42260
1a548     BD 01 00 FF 
1a54c     86 15 06 F6 | 	mov	arg02, ##@LR__6029
1a550     8C CF B0 FD | 	call	#__system___string_cmp
1a554     00 FA 0D F2 | 	cmp	result1, #0 wz
1a558     18 00 90 5D |  if_ne	jmp	#LR__2081
1a55c     74 FA BF FD | 	call	#_read_next_line
1a560     52 00 00 FF 
1a564     14 E5 05 F1 | 	add	objptr, ##42260
1a568     F2 FA 61 FC | 	wrlong	result1, objptr
1a56c     52 00 00 FF 
1a570     14 E5 85 F1 | 	sub	objptr, ##42260
1a574                 | LR__2081
1a574     30 4F 05 F1 | 	add	fp, #304
1a578     A7 26 02 FB | 	rdlong	local01, fp
1a57c     30 4F 85 F1 | 	sub	fp, #304
1a580     00 26 56 F2 | 	cmps	local01, #0 wc
1a584     28 00 90 CD |  if_b	jmp	#LR__2082
1a588     52 00 00 FF 
1a58c     14 E5 05 F1 | 	add	objptr, ##42260
1a590     F2 12 02 FB | 	rdlong	arg01, objptr
1a594     52 00 00 FF 
1a598     14 E5 85 F1 | 	sub	objptr, ##42260
1a59c     BD 01 00 FF 
1a5a0     87 15 06 F6 | 	mov	arg02, ##@LR__6030
1a5a4     38 CF B0 FD | 	call	#__system___string_cmp
1a5a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5ac     94 FD 9F 5D |  if_ne	jmp	#LR__2075
1a5b0                 | LR__2082
1a5b0     30 4F 05 F1 | 	add	fp, #304
1a5b4     A7 26 02 FB | 	rdlong	local01, fp
1a5b8     30 4F 85 F1 | 	sub	fp, #304
1a5bc     00 26 56 F2 | 	cmps	local01, #0 wc
1a5c0     80 FD 9F 3D |  if_ae	jmp	#LR__2074
1a5c4                 | ' if j<numpar then printerror(55,runheader(0))
1a5c4     34 4F 05 F1 | 	add	fp, #308
1a5c8     A7 26 02 FB | 	rdlong	local01, fp
1a5cc     2C 4F 85 F1 | 	sub	fp, #300
1a5d0     A7 16 02 FB | 	rdlong	arg03, fp
1a5d4     08 4E 85 F1 | 	sub	fp, #8
1a5d8     0B 27 52 F2 | 	cmps	local01, arg03 wc
1a5dc     50 00 00 CF 
1a5e0     F0 E4 05 C1 |  if_b	add	objptr, ##41200
1a5e4     F2 14 02 CB |  if_b	rdlong	arg02, objptr
1a5e8     50 00 00 CF 
1a5ec     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
1a5f0     37 12 06 C6 |  if_b	mov	arg01, #55
1a5f4     A8 94 B0 CD |  if_b	call	#_printerror
1a5f8                 | ' 
1a5f8                 | ' for i=0 to numpar-1
1a5f8     30 4F 05 F1 | 	add	fp, #304
1a5fc     A7 00 68 FC | 	wrlong	#0, fp
1a600     28 4F 85 F1 | 	sub	fp, #296
1a604     A7 2A 02 FB | 	rdlong	local03, fp
1a608     08 4E 85 F1 | 	sub	fp, #8
1a60c                 | LR__2083
1a60c     30 4F 05 F1 | 	add	fp, #304
1a610     A7 2C 02 FB | 	rdlong	local04, fp
1a614     30 4F 85 F1 | 	sub	fp, #304
1a618     16 27 02 F6 | 	mov	local01, local04
1a61c     15 27 52 F2 | 	cmps	local01, local03 wc
1a620     30 09 90 3D |  if_ae	jmp	#LR__2120
1a624                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1a624     30 4F 05 F1 | 	add	fp, #304
1a628     A7 16 02 FB | 	rdlong	arg03, fp
1a62c     02 16 66 F0 | 	shl	arg03, #2
1a630     04 4F 85 F1 | 	sub	fp, #260
1a634     A7 16 02 F1 | 	add	arg03, fp
1a638     0B 13 02 FB | 	rdlong	arg01, arg03
1a63c     2C 4E 85 F1 | 	sub	fp, #44
1a640     D0 C3 BE FD | 	call	#_isnum
1a644     FD 2E 02 F6 | 	mov	local05, result1
1a648     30 4F 05 F1 | 	add	fp, #304
1a64c     A7 16 02 FB | 	rdlong	arg03, fp
1a650     02 16 66 F0 | 	shl	arg03, #2
1a654     04 4F 85 F1 | 	sub	fp, #260
1a658     A7 30 02 F6 | 	mov	local06, fp
1a65c     A7 16 02 F1 | 	add	arg03, fp
1a660     0B 13 02 FB | 	rdlong	arg01, arg03
1a664     2C 4E 85 F1 | 	sub	fp, #44
1a668     94 C7 BE FD | 	call	#_isint
1a66c     FD 2E 2A F5 | 	andn	local05, result1 wz
1a670     52 00 00 5F 
1a674     4C E5 05 51 |  if_ne	add	objptr, ##42316
1a678     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1a67c     52 00 00 5F 
1a680     4C E5 85 51 |  if_ne	sub	objptr, ##42316
1a684                 | '   if isint(args(i)) then r=result_int 
1a684     30 4F 05 F1 | 	add	fp, #304
1a688     A7 2E 02 FB | 	rdlong	local05, fp
1a68c     02 2E 66 F0 | 	shl	local05, #2
1a690     04 4F 85 F1 | 	sub	fp, #260
1a694     A7 2E 02 F1 | 	add	local05, fp
1a698     17 13 02 FB | 	rdlong	arg01, local05
1a69c     2C 4E 85 F1 | 	sub	fp, #44
1a6a0     5C C7 BE FD | 	call	#_isint
1a6a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a6a8     52 00 00 5F 
1a6ac     4C E5 05 51 |  if_ne	add	objptr, ##42316
1a6b0     F2 38 68 5C |  if_ne	wrlong	#28, objptr
1a6b4     52 00 00 5F 
1a6b8     4C E5 85 51 |  if_ne	sub	objptr, ##42316
1a6bc                 | '   if isdec(args(i)) then r=result_uint 
1a6bc     30 4F 05 F1 | 	add	fp, #304
1a6c0     A7 2E 02 FB | 	rdlong	local05, fp
1a6c4     02 2E 66 F0 | 	shl	local05, #2
1a6c8     04 4F 85 F1 | 	sub	fp, #260
1a6cc     A7 2E 02 F1 | 	add	local05, fp
1a6d0     17 13 02 FB | 	rdlong	arg01, local05
1a6d4     2C 4E 85 F1 | 	sub	fp, #44
1a6d8     C8 C9 BE FD | 	call	#_isdec
1a6dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1a6e0     52 00 00 5F 
1a6e4     4C E5 05 51 |  if_ne	add	objptr, ##42316
1a6e8     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1a6ec     52 00 00 5F 
1a6f0     4C E5 85 51 |  if_ne	sub	objptr, ##42316
1a6f4                 | '   if not isnum(args(i)) then 
1a6f4     30 4F 05 F1 | 	add	fp, #304
1a6f8     A7 2E 02 FB | 	rdlong	local05, fp
1a6fc     02 2E 66 F0 | 	shl	local05, #2
1a700     04 4F 85 F1 | 	sub	fp, #260
1a704     A7 2E 02 F1 | 	add	local05, fp
1a708     17 13 02 FB | 	rdlong	arg01, local05
1a70c     2C 4E 85 F1 | 	sub	fp, #44
1a710     00 C3 BE FD | 	call	#_isnum
1a714     FD 2E 22 F6 | 	not	local05, result1
1a718     00 2E 0E F2 | 	cmp	local05, #0 wz
1a71c     4C 01 90 AD |  if_e	jmp	#LR__2088
1a720     52 00 00 FF 
1a724     4C E5 05 F1 | 	add	objptr, ##42316
1a728     F2 56 68 FC | 	wrlong	#43, objptr
1a72c     52 00 00 FF 
1a730     4C E5 85 F1 | 	sub	objptr, ##42316
1a734     30 4F 05 F1 | 	add	fp, #304
1a738     A7 16 02 FB | 	rdlong	arg03, fp
1a73c     02 16 66 F0 | 	shl	arg03, #2
1a740     04 4F 85 F1 | 	sub	fp, #260
1a744     A7 16 02 F1 | 	add	arg03, fp
1a748     0B 13 02 FB | 	rdlong	arg01, arg03
1a74c     2C 4E 85 F1 | 	sub	fp, #44
1a750     09 29 02 F6 | 	mov	local02, arg01
1a754     97 06 48 FB | 	callpa	#(@LR__2085-@LR__2084)>>2,fcache_load_ptr_
1a758                 | LR__2084
1a758     14 FB C9 FA | 	rdbyte	result1, local02 wz
1a75c     01 28 06 51 |  if_ne	add	local02, #1
1a760     F4 FF 9F 5D |  if_ne	jmp	#LR__2084
1a764                 | LR__2085
1a764     09 29 82 F1 | 	sub	local02, arg01
1a768     14 FB 01 F6 | 	mov	result1, local02
1a76c     38 4F 05 F1 | 	add	fp, #312
1a770     A7 FA 61 FC | 	wrlong	result1, fp
1a774     52 00 00 FF 
1a778     D0 E4 05 F1 | 	add	objptr, ##42192
1a77c     F2 12 02 FB | 	rdlong	arg01, objptr
1a780     FD 12 82 F1 | 	sub	arg01, result1
1a784     04 12 86 F1 | 	sub	arg01, #4
1a788     03 12 26 F5 | 	andn	arg01, #3
1a78c     F2 12 62 FC | 	wrlong	arg01, objptr
1a790     52 00 00 FF 
1a794     D0 E4 85 F1 | 	sub	objptr, ##42192
1a798     A7 14 02 FB | 	rdlong	arg02, fp
1a79c     38 4F 85 F1 | 	sub	fp, #312
1a7a0     9C 94 B0 FD | 	call	#_pslpoke
1a7a4                 | '     pslpoke memtop,l
1a7a4                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1a7a4     34 4F 05 F1 | 	add	fp, #308
1a7a8     A7 02 68 FC | 	wrlong	#1, fp
1a7ac     04 4E 05 F1 | 	add	fp, #4
1a7b0     A7 32 02 FB | 	rdlong	local07, fp
1a7b4     38 4F 85 F1 | 	sub	fp, #312
1a7b8     01 32 06 F1 | 	add	local07, #1
1a7bc                 | LR__2086
1a7bc     34 4F 05 F1 | 	add	fp, #308
1a7c0     A7 2E 02 FB | 	rdlong	local05, fp
1a7c4     34 4F 85 F1 | 	sub	fp, #308
1a7c8     19 2F 52 F2 | 	cmps	local05, local07 wc
1a7cc     7C 00 90 3D |  if_ae	jmp	#LR__2087
1a7d0     52 00 00 FF 
1a7d4     D0 E4 05 F1 | 	add	objptr, ##42192
1a7d8     F2 30 02 FB | 	rdlong	local06, objptr
1a7dc     52 00 00 FF 
1a7e0     D0 E4 85 F1 | 	sub	objptr, ##42192
1a7e4     03 30 06 F1 | 	add	local06, #3
1a7e8     34 4F 05 F1 | 	add	fp, #308
1a7ec     A7 34 02 FB | 	rdlong	local08, fp
1a7f0     1A 31 02 F1 | 	add	local06, local08
1a7f4     04 4E 85 F1 | 	sub	fp, #4
1a7f8     A7 36 02 FB | 	rdlong	local09, fp
1a7fc     02 36 66 F0 | 	shl	local09, #2
1a800     04 4F 85 F1 | 	sub	fp, #260
1a804     A7 38 02 F6 | 	mov	local10, fp
1a808     A7 36 02 F1 | 	add	local09, fp
1a80c     1B 13 02 FB | 	rdlong	arg01, local09
1a810     2C 4E 85 F1 | 	sub	fp, #44
1a814     01 3A 06 F6 | 	mov	local11, #1
1a818     1A 15 02 F6 | 	mov	arg02, local08
1a81c     01 16 06 F6 | 	mov	arg03, #1
1a820     2C EE B0 FD | 	call	#__system__Mid_S
1a824     FD 14 C2 FA | 	rdbyte	arg02, result1
1a828     18 13 02 F6 | 	mov	arg01, local06
1a82c     A0 94 B0 FD | 	call	#_pspoke
1a830     34 4F 05 F1 | 	add	fp, #308
1a834     A7 30 02 FB | 	rdlong	local06, fp
1a838     18 2F 02 F6 | 	mov	local05, local06
1a83c     01 2E 06 F1 | 	add	local05, #1
1a840     A7 2E 62 FC | 	wrlong	local05, fp
1a844     34 4F 85 F1 | 	sub	fp, #308
1a848     70 FF 9F FD | 	jmp	#LR__2086
1a84c                 | LR__2087
1a84c     52 00 00 FF 
1a850     D0 E4 05 F1 | 	add	objptr, ##42192
1a854     F2 2E 02 FB | 	rdlong	local05, objptr
1a858     52 00 00 FF 
1a85c     D0 E4 85 F1 | 	sub	objptr, ##42192
1a860     10 4E 05 F1 | 	add	fp, #16
1a864     A7 2E 62 FC | 	wrlong	local05, fp
1a868     10 4E 85 F1 | 	sub	fp, #16
1a86c                 | LR__2088
1a86c     3C 2F BF FD | 	call	#_pop
1a870     1C 4E 05 F1 | 	add	fp, #28
1a874     A7 FA 61 FC | 	wrlong	result1, fp
1a878     04 4E 05 F1 | 	add	fp, #4
1a87c     A7 FC 61 FC | 	wrlong	result2, fp
1a880     04 4E 05 F1 | 	add	fp, #4
1a884     A7 FE 61 FC | 	wrlong	result3, fp
1a888                 | '   t1=pop() 
1a888                 | '   if i>=numpar-j then
1a888     1C 4E 85 F1 | 	sub	fp, #28
1a88c     A7 2E 02 FB | 	rdlong	local05, fp
1a890     17 3D 02 F6 | 	mov	local12, local05
1a894     2C 4F 05 F1 | 	add	fp, #300
1a898     A7 3E 02 FB | 	rdlong	local13, fp
1a89c     1F 41 02 F6 | 	mov	local14, local13
1a8a0     20 3D 82 F1 | 	sub	local12, local14
1a8a4     04 4E 85 F1 | 	sub	fp, #4
1a8a8     A7 42 02 FB | 	rdlong	local15, fp
1a8ac     30 4F 85 F1 | 	sub	fp, #304
1a8b0     21 45 02 F6 | 	mov	local16, local15
1a8b4     1E 45 52 F2 | 	cmps	local16, local12 wc
1a8b8     80 06 90 CD |  if_b	jmp	#LR__2119
1a8bc     20 4E 05 F1 | 	add	fp, #32
1a8c0     A7 3C 02 FB | 	rdlong	local12, fp
1a8c4     0C 4E 85 F1 | 	sub	fp, #12
1a8c8     A7 3C 62 FC | 	wrlong	local12, fp
1a8cc                 | '     vartype=t1.result.twowords(1)
1a8cc                 | '     select case vartype
1a8cc     14 4E 85 F1 | 	sub	fp, #20
1a8d0     1E 47 0A F6 | 	mov	local17, local12 wz
1a8d4     64 00 90 AD |  if_e	jmp	#LR__2089
1a8d8     00 47 0E F2 | 	cmp	local17, #256 wz
1a8dc     6C 00 90 AD |  if_e	jmp	#LR__2090
1a8e0     01 47 0E F2 | 	cmp	local17, #257 wz
1a8e4     74 00 90 AD |  if_e	jmp	#LR__2091
1a8e8     02 47 0E F2 | 	cmp	local17, #258 wz
1a8ec     7C 00 90 AD |  if_e	jmp	#LR__2092
1a8f0     03 47 0E F2 | 	cmp	local17, #259 wz
1a8f4     84 00 90 AD |  if_e	jmp	#LR__2093
1a8f8     04 47 0E F2 | 	cmp	local17, #260 wz
1a8fc     8C 00 90 AD |  if_e	jmp	#LR__2094
1a900     05 47 0E F2 | 	cmp	local17, #261 wz
1a904     94 00 90 AD |  if_e	jmp	#LR__2095
1a908     06 47 0E F2 | 	cmp	local17, #262 wz
1a90c     9C 00 90 AD |  if_e	jmp	#LR__2096
1a910     07 47 0E F2 | 	cmp	local17, #263 wz
1a914     A4 00 90 AD |  if_e	jmp	#LR__2097
1a918     08 47 0E F2 | 	cmp	local17, #264 wz
1a91c     AC 00 90 AD |  if_e	jmp	#LR__2098
1a920     09 47 0E F2 | 	cmp	local17, #265 wz
1a924     B4 00 90 AD |  if_e	jmp	#LR__2099
1a928     0A 47 0E F2 | 	cmp	local17, #266 wz
1a92c     BC 00 90 AD |  if_e	jmp	#LR__2100
1a930     0B 47 0E F2 | 	cmp	local17, #267 wz
1a934     C4 00 90 AD |  if_e	jmp	#LR__2101
1a938     D0 00 90 FD | 	jmp	#LR__2102
1a93c                 | LR__2089
1a93c     18 4E 05 F1 | 	add	fp, #24
1a940     A7 18 68 FC | 	wrlong	#12, fp
1a944     18 4E 85 F1 | 	sub	fp, #24
1a948     CC 00 90 FD | 	jmp	#LR__2103
1a94c                 | LR__2090
1a94c     18 4E 05 F1 | 	add	fp, #24
1a950     A7 18 68 FC | 	wrlong	#12, fp
1a954     18 4E 85 F1 | 	sub	fp, #24
1a958     BC 00 90 FD | 	jmp	#LR__2103
1a95c                 | LR__2091
1a95c     18 4E 05 F1 | 	add	fp, #24
1a960     A7 02 68 FC | 	wrlong	#1, fp
1a964     18 4E 85 F1 | 	sub	fp, #24
1a968     AC 00 90 FD | 	jmp	#LR__2103
1a96c                 | LR__2092
1a96c     18 4E 05 F1 | 	add	fp, #24
1a970     A7 02 68 FC | 	wrlong	#1, fp
1a974     18 4E 85 F1 | 	sub	fp, #24
1a978     9C 00 90 FD | 	jmp	#LR__2103
1a97c                 | LR__2093
1a97c     18 4E 05 F1 | 	add	fp, #24
1a980     A7 04 68 FC | 	wrlong	#2, fp
1a984     18 4E 85 F1 | 	sub	fp, #24
1a988     8C 00 90 FD | 	jmp	#LR__2103
1a98c                 | LR__2094
1a98c     18 4E 05 F1 | 	add	fp, #24
1a990     A7 04 68 FC | 	wrlong	#2, fp
1a994     18 4E 85 F1 | 	sub	fp, #24
1a998     7C 00 90 FD | 	jmp	#LR__2103
1a99c                 | LR__2095
1a99c     18 4E 05 F1 | 	add	fp, #24
1a9a0     A7 08 68 FC | 	wrlong	#4, fp
1a9a4     18 4E 85 F1 | 	sub	fp, #24
1a9a8     6C 00 90 FD | 	jmp	#LR__2103
1a9ac                 | LR__2096
1a9ac     18 4E 05 F1 | 	add	fp, #24
1a9b0     A7 08 68 FC | 	wrlong	#4, fp
1a9b4     18 4E 85 F1 | 	sub	fp, #24
1a9b8     5C 00 90 FD | 	jmp	#LR__2103
1a9bc                 | LR__2097
1a9bc     18 4E 05 F1 | 	add	fp, #24
1a9c0     A7 10 68 FC | 	wrlong	#8, fp
1a9c4     18 4E 85 F1 | 	sub	fp, #24
1a9c8     4C 00 90 FD | 	jmp	#LR__2103
1a9cc                 | LR__2098
1a9cc     18 4E 05 F1 | 	add	fp, #24
1a9d0     A7 10 68 FC | 	wrlong	#8, fp
1a9d4     18 4E 85 F1 | 	sub	fp, #24
1a9d8     3C 00 90 FD | 	jmp	#LR__2103
1a9dc                 | LR__2099
1a9dc     18 4E 05 F1 | 	add	fp, #24
1a9e0     A7 0C 68 FC | 	wrlong	#6, fp
1a9e4     18 4E 85 F1 | 	sub	fp, #24
1a9e8     2C 00 90 FD | 	jmp	#LR__2103
1a9ec                 | LR__2100
1a9ec     18 4E 05 F1 | 	add	fp, #24
1a9f0     A7 10 68 FC | 	wrlong	#8, fp
1a9f4     18 4E 85 F1 | 	sub	fp, #24
1a9f8     1C 00 90 FD | 	jmp	#LR__2103
1a9fc                 | LR__2101
1a9fc     18 4E 05 F1 | 	add	fp, #24
1aa00     A7 0A 68 FC | 	wrlong	#5, fp
1aa04     18 4E 85 F1 | 	sub	fp, #24
1aa08     0C 00 90 FD | 	jmp	#LR__2103
1aa0c                 | LR__2102
1aa0c     18 4E 05 F1 | 	add	fp, #24
1aa10     A7 18 68 FC | 	wrlong	#12, fp
1aa14     18 4E 85 F1 | 	sub	fp, #24
1aa18                 | LR__2103
1aa18                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1aa18     18 4E 05 F1 | 	add	fp, #24
1aa1c     A7 3C 02 FB | 	rdlong	local12, fp
1aa20     18 4E 85 F1 | 	sub	fp, #24
1aa24     0C 3C 0E F2 | 	cmp	local12, #12 wz
1aa28     74 01 90 5D |  if_ne	jmp	#LR__2108
1aa2c     1C 4E 05 F1 | 	add	fp, #28
1aa30     A7 3E 02 FB | 	rdlong	local13, fp
1aa34     1C 4E 85 F1 | 	sub	fp, #28
1aa38     00 04 00 FF 
1aa3c     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1aa40     5C 01 90 3D |  if_ae	jmp	#LR__2108
1aa44                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1aa44     52 00 00 FF 
1aa48     4C E5 05 F1 | 	add	objptr, ##42316
1aa4c     F2 3C 02 FB | 	rdlong	local12, objptr
1aa50     52 00 00 FF 
1aa54     4C E5 85 F1 | 	sub	objptr, ##42316
1aa58     1C 3C 0E F2 | 	cmp	local12, #28 wz
1aa5c     38 00 90 5D |  if_ne	jmp	#LR__2104
1aa60     1C 4E 05 F1 | 	add	fp, #28
1aa64     A7 3C 02 FB | 	rdlong	local12, fp
1aa68     14 4F 05 F1 | 	add	fp, #276
1aa6c     A7 3E 02 FB | 	rdlong	local13, fp
1aa70     1F 45 02 F6 | 	mov	local16, local13
1aa74     02 44 66 F0 | 	shl	local16, #2
1aa78     04 4F 85 F1 | 	sub	fp, #260
1aa7c     A7 42 02 F6 | 	mov	local15, fp
1aa80     A7 44 02 F1 | 	add	local16, fp
1aa84     22 13 02 FB | 	rdlong	arg01, local16
1aa88     00 14 06 F6 | 	mov	arg02, #0
1aa8c     2C 4E 85 F1 | 	sub	fp, #44
1aa90     18 FF B0 FD | 	call	#__system____builtin_atoi
1aa94     1E FB 61 FC | 	wrlong	result1, local12
1aa98                 | LR__2104
1aa98                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1aa98     52 00 00 FF 
1aa9c     4C E5 05 F1 | 	add	objptr, ##42316
1aaa0     F2 3C 02 FB | 	rdlong	local12, objptr
1aaa4     52 00 00 FF 
1aaa8     4C E5 85 F1 | 	sub	objptr, ##42316
1aaac     1D 3C 0E F2 | 	cmp	local12, #29 wz
1aab0     38 00 90 5D |  if_ne	jmp	#LR__2105
1aab4     1C 4E 05 F1 | 	add	fp, #28
1aab8     A7 3C 02 FB | 	rdlong	local12, fp
1aabc     14 4F 05 F1 | 	add	fp, #276
1aac0     A7 3E 02 FB | 	rdlong	local13, fp
1aac4     1F 45 02 F6 | 	mov	local16, local13
1aac8     02 44 66 F0 | 	shl	local16, #2
1aacc     04 4F 85 F1 | 	sub	fp, #260
1aad0     A7 42 02 F6 | 	mov	local15, fp
1aad4     A7 44 02 F1 | 	add	local16, fp
1aad8     22 13 02 FB | 	rdlong	arg01, local16
1aadc     00 14 06 F6 | 	mov	arg02, #0
1aae0     2C 4E 85 F1 | 	sub	fp, #44
1aae4     C4 FE B0 FD | 	call	#__system____builtin_atoi
1aae8     1E FB 61 FC | 	wrlong	result1, local12
1aaec                 | LR__2105
1aaec                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1aaec     52 00 00 FF 
1aaf0     4C E5 05 F1 | 	add	objptr, ##42316
1aaf4     F2 3C 02 FB | 	rdlong	local12, objptr
1aaf8     52 00 00 FF 
1aafc     4C E5 85 F1 | 	sub	objptr, ##42316
1ab00     1E 3C 0E F2 | 	cmp	local12, #30 wz
1ab04     3C 00 90 5D |  if_ne	jmp	#LR__2106
1ab08     30 4F 05 F1 | 	add	fp, #304
1ab0c     A7 3E 02 FB | 	rdlong	local13, fp
1ab10     02 3E 66 F0 | 	shl	local13, #2
1ab14     04 4F 85 F1 | 	sub	fp, #260
1ab18     A7 44 02 F6 | 	mov	local16, fp
1ab1c     A7 3E 02 F1 | 	add	local13, fp
1ab20     1F 13 02 FB | 	rdlong	arg01, local13
1ab24     2C 4E 85 F1 | 	sub	fp, #44
1ab28     14 00 B1 FD | 	call	#__system____builtin_atof
1ab2c     28 4E 05 F1 | 	add	fp, #40
1ab30     A7 FA 61 FC | 	wrlong	result1, fp
1ab34     0C 4E 85 F1 | 	sub	fp, #12
1ab38     A7 3C 02 FB | 	rdlong	local12, fp
1ab3c     1C 4E 85 F1 | 	sub	fp, #28
1ab40     1E FB 61 FC | 	wrlong	result1, local12
1ab44                 | LR__2106
1ab44                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1ab44     52 00 00 FF 
1ab48     4C E5 05 F1 | 	add	objptr, ##42316
1ab4c     F2 3C 02 FB | 	rdlong	local12, objptr
1ab50     52 00 00 FF 
1ab54     4C E5 85 F1 | 	sub	objptr, ##42316
1ab58     2B 3C 0E F2 | 	cmp	local12, #43 wz
1ab5c     18 00 90 5D |  if_ne	jmp	#LR__2107
1ab60     1C 4E 05 F1 | 	add	fp, #28
1ab64     A7 12 02 FB | 	rdlong	arg01, fp
1ab68     0C 4E 85 F1 | 	sub	fp, #12
1ab6c     A7 14 02 FB | 	rdlong	arg02, fp
1ab70     10 4E 85 F1 | 	sub	fp, #16
1ab74     09 15 62 FC | 	wrlong	arg02, arg01
1ab78                 | LR__2107
1ab78     1C 4E 05 F1 | 	add	fp, #28
1ab7c     A7 12 02 FB | 	rdlong	arg01, fp
1ab80     1C 4E 85 F1 | 	sub	fp, #28
1ab84     08 12 06 F1 | 	add	arg01, #8
1ab88     52 00 00 FF 
1ab8c     4C E5 05 F1 | 	add	objptr, ##42316
1ab90     F2 14 02 FB | 	rdlong	arg02, objptr
1ab94     52 00 00 FF 
1ab98     4C E5 85 F1 | 	sub	objptr, ##42316
1ab9c     09 15 62 FC | 	wrlong	arg02, arg01
1aba0                 | LR__2108
1aba0                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1aba0     18 4E 05 F1 | 	add	fp, #24
1aba4     A7 3C 02 FB | 	rdlong	local12, fp
1aba8     18 4E 85 F1 | 	sub	fp, #24
1abac     0C 3C 0E F2 | 	cmp	local12, #12 wz
1abb0     94 01 90 5D |  if_ne	jmp	#LR__2113
1abb4     1C 4E 05 F1 | 	add	fp, #28
1abb8     A7 3E 02 FB | 	rdlong	local13, fp
1abbc     1C 4E 85 F1 | 	sub	fp, #28
1abc0     00 04 00 FF 
1abc4     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1abc8     7C 01 90 CD |  if_b	jmp	#LR__2113
1abcc                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1abcc     52 00 00 FF 
1abd0     4C E5 05 F1 | 	add	objptr, ##42316
1abd4     F2 3C 02 FB | 	rdlong	local12, objptr
1abd8     52 00 00 FF 
1abdc     4C E5 85 F1 | 	sub	objptr, ##42316
1abe0     1C 3C 0E F2 | 	cmp	local12, #28 wz
1abe4     40 00 90 5D |  if_ne	jmp	#LR__2109
1abe8     1C 4E 05 F1 | 	add	fp, #28
1abec     A7 3C 02 FB | 	rdlong	local12, fp
1abf0     14 4F 05 F1 | 	add	fp, #276
1abf4     A7 3E 02 FB | 	rdlong	local13, fp
1abf8     1F 45 02 F6 | 	mov	local16, local13
1abfc     02 44 66 F0 | 	shl	local16, #2
1ac00     04 4F 85 F1 | 	sub	fp, #260
1ac04     A7 42 02 F6 | 	mov	local15, fp
1ac08     A7 44 02 F1 | 	add	local16, fp
1ac0c     22 13 02 FB | 	rdlong	arg01, local16
1ac10     00 14 06 F6 | 	mov	arg02, #0
1ac14     2C 4E 85 F1 | 	sub	fp, #44
1ac18     90 FD B0 FD | 	call	#__system____builtin_atoi
1ac1c     FD 14 02 F6 | 	mov	arg02, result1
1ac20     1E 13 02 F6 | 	mov	arg01, local12
1ac24     18 90 B0 FD | 	call	#_pslpoke
1ac28                 | LR__2109
1ac28                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1ac28     52 00 00 FF 
1ac2c     4C E5 05 F1 | 	add	objptr, ##42316
1ac30     F2 3C 02 FB | 	rdlong	local12, objptr
1ac34     52 00 00 FF 
1ac38     4C E5 85 F1 | 	sub	objptr, ##42316
1ac3c     1D 3C 0E F2 | 	cmp	local12, #29 wz
1ac40     40 00 90 5D |  if_ne	jmp	#LR__2110
1ac44     1C 4E 05 F1 | 	add	fp, #28
1ac48     A7 3C 02 FB | 	rdlong	local12, fp
1ac4c     14 4F 05 F1 | 	add	fp, #276
1ac50     A7 3E 02 FB | 	rdlong	local13, fp
1ac54     1F 45 02 F6 | 	mov	local16, local13
1ac58     02 44 66 F0 | 	shl	local16, #2
1ac5c     04 4F 85 F1 | 	sub	fp, #260
1ac60     A7 42 02 F6 | 	mov	local15, fp
1ac64     A7 44 02 F1 | 	add	local16, fp
1ac68     22 13 02 FB | 	rdlong	arg01, local16
1ac6c     00 14 06 F6 | 	mov	arg02, #0
1ac70     2C 4E 85 F1 | 	sub	fp, #44
1ac74     34 FD B0 FD | 	call	#__system____builtin_atoi
1ac78     FD 14 02 F6 | 	mov	arg02, result1
1ac7c     1E 13 02 F6 | 	mov	arg01, local12
1ac80     BC 8F B0 FD | 	call	#_pslpoke
1ac84                 | LR__2110
1ac84                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1ac84     52 00 00 FF 
1ac88     4C E5 05 F1 | 	add	objptr, ##42316
1ac8c     F2 3C 02 FB | 	rdlong	local12, objptr
1ac90     52 00 00 FF 
1ac94     4C E5 85 F1 | 	sub	objptr, ##42316
1ac98     1E 3C 0E F2 | 	cmp	local12, #30 wz
1ac9c     4C 00 90 5D |  if_ne	jmp	#LR__2111
1aca0     30 4F 05 F1 | 	add	fp, #304
1aca4     A7 3E 02 FB | 	rdlong	local13, fp
1aca8     02 3E 66 F0 | 	shl	local13, #2
1acac     04 4F 85 F1 | 	sub	fp, #260
1acb0     A7 44 02 F6 | 	mov	local16, fp
1acb4     A7 3E 02 F1 | 	add	local13, fp
1acb8     1F 13 02 FB | 	rdlong	arg01, local13
1acbc     2C 4E 85 F1 | 	sub	fp, #44
1acc0     7C FE B0 FD | 	call	#__system____builtin_atof
1acc4     28 4E 05 F1 | 	add	fp, #40
1acc8     A7 FA 61 FC | 	wrlong	result1, fp
1accc     0C 4E 85 F1 | 	sub	fp, #12
1acd0     A7 3C 02 FB | 	rdlong	local12, fp
1acd4     0C 4E 05 F1 | 	add	fp, #12
1acd8     A7 12 02 F6 | 	mov	arg01, fp
1acdc     28 4E 85 F1 | 	sub	fp, #40
1ace0     09 15 02 FB | 	rdlong	arg02, arg01
1ace4     1E 13 02 F6 | 	mov	arg01, local12
1ace8     54 8F B0 FD | 	call	#_pslpoke
1acec                 | LR__2111
1acec                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1acec     52 00 00 FF 
1acf0     4C E5 05 F1 | 	add	objptr, ##42316
1acf4     F2 3C 02 FB | 	rdlong	local12, objptr
1acf8     52 00 00 FF 
1acfc     4C E5 85 F1 | 	sub	objptr, ##42316
1ad00     2B 3C 0E F2 | 	cmp	local12, #43 wz
1ad04     18 00 90 5D |  if_ne	jmp	#LR__2112
1ad08     1C 4E 05 F1 | 	add	fp, #28
1ad0c     A7 12 02 FB | 	rdlong	arg01, fp
1ad10     0C 4E 85 F1 | 	sub	fp, #12
1ad14     A7 14 02 FB | 	rdlong	arg02, fp
1ad18     10 4E 85 F1 | 	sub	fp, #16
1ad1c     20 8F B0 FD | 	call	#_pslpoke
1ad20                 | LR__2112
1ad20     1C 4E 05 F1 | 	add	fp, #28
1ad24     A7 12 02 FB | 	rdlong	arg01, fp
1ad28     1C 4E 85 F1 | 	sub	fp, #28
1ad2c     08 12 06 F1 | 	add	arg01, #8
1ad30     52 00 00 FF 
1ad34     4C E5 05 F1 | 	add	objptr, ##42316
1ad38     F2 14 02 FB | 	rdlong	arg02, objptr
1ad3c     52 00 00 FF 
1ad40     4C E5 85 F1 | 	sub	objptr, ##42316
1ad44     F8 8E B0 FD | 	call	#_pslpoke
1ad48                 | LR__2113
1ad48                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1ad48     18 4E 05 F1 | 	add	fp, #24
1ad4c     A7 3C 02 FB | 	rdlong	local12, fp
1ad50     18 4E 85 F1 | 	sub	fp, #24
1ad54     05 3C 0E F2 | 	cmp	local12, #5 wz
1ad58     52 00 00 AF 
1ad5c     4C E5 05 A1 |  if_e	add	objptr, ##42316
1ad60     F2 40 02 AB |  if_e	rdlong	local14, objptr
1ad64     52 00 00 AF 
1ad68     4C E5 85 A1 |  if_e	sub	objptr, ##42316
1ad6c     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1ad70     18 00 90 5D |  if_ne	jmp	#LR__2114
1ad74     1C 4E 05 F1 | 	add	fp, #28
1ad78     A7 12 02 FB | 	rdlong	arg01, fp
1ad7c     0C 4E 85 F1 | 	sub	fp, #12
1ad80     A7 14 02 FB | 	rdlong	arg02, fp
1ad84     10 4E 85 F1 | 	sub	fp, #16
1ad88     B4 8E B0 FD | 	call	#_pslpoke
1ad8c                 | LR__2114
1ad8c                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1ad8c     18 4E 05 F1 | 	add	fp, #24
1ad90     A7 3C 02 FB | 	rdlong	local12, fp
1ad94     18 4E 85 F1 | 	sub	fp, #24
1ad98     04 3C 0E F2 | 	cmp	local12, #4 wz
1ad9c     54 00 90 5D |  if_ne	jmp	#LR__2115
1ada0     52 00 00 FF 
1ada4     4C E5 05 F1 | 	add	objptr, ##42316
1ada8     F2 40 02 FB | 	rdlong	local14, objptr
1adac     52 00 00 FF 
1adb0     4C E5 85 F1 | 	sub	objptr, ##42316
1adb4     2B 40 0E F2 | 	cmp	local14, #43 wz
1adb8     38 00 90 AD |  if_e	jmp	#LR__2115
1adbc     1C 4E 05 F1 | 	add	fp, #28
1adc0     A7 3C 02 FB | 	rdlong	local12, fp
1adc4     14 4F 05 F1 | 	add	fp, #276
1adc8     A7 44 02 FB | 	rdlong	local16, fp
1adcc     02 44 66 F0 | 	shl	local16, #2
1add0     04 4F 85 F1 | 	sub	fp, #260
1add4     A7 44 02 F1 | 	add	local16, fp
1add8     22 13 02 FB | 	rdlong	arg01, local16
1addc     00 14 06 F6 | 	mov	arg02, #0
1ade0     2C 4E 85 F1 | 	sub	fp, #44
1ade4     C4 FB B0 FD | 	call	#__system____builtin_atoi
1ade8     FD 14 02 F6 | 	mov	arg02, result1
1adec     1E 13 02 F6 | 	mov	arg01, local12
1adf0     4C 8E B0 FD | 	call	#_pslpoke
1adf4                 | LR__2115
1adf4                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1adf4     18 4E 05 F1 | 	add	fp, #24
1adf8     A7 3C 02 FB | 	rdlong	local12, fp
1adfc     18 4E 85 F1 | 	sub	fp, #24
1ae00     02 3C 0E F2 | 	cmp	local12, #2 wz
1ae04     54 00 90 5D |  if_ne	jmp	#LR__2116
1ae08     52 00 00 FF 
1ae0c     4C E5 05 F1 | 	add	objptr, ##42316
1ae10     F2 40 02 FB | 	rdlong	local14, objptr
1ae14     52 00 00 FF 
1ae18     4C E5 85 F1 | 	sub	objptr, ##42316
1ae1c     2B 40 0E F2 | 	cmp	local14, #43 wz
1ae20     38 00 90 AD |  if_e	jmp	#LR__2116
1ae24     1C 4E 05 F1 | 	add	fp, #28
1ae28     A7 3C 02 FB | 	rdlong	local12, fp
1ae2c     14 4F 05 F1 | 	add	fp, #276
1ae30     A7 44 02 FB | 	rdlong	local16, fp
1ae34     02 44 66 F0 | 	shl	local16, #2
1ae38     04 4F 85 F1 | 	sub	fp, #260
1ae3c     A7 44 02 F1 | 	add	local16, fp
1ae40     22 13 02 FB | 	rdlong	arg01, local16
1ae44     00 14 06 F6 | 	mov	arg02, #0
1ae48     2C 4E 85 F1 | 	sub	fp, #44
1ae4c     5C FB B0 FD | 	call	#__system____builtin_atoi
1ae50     FD 14 02 F6 | 	mov	arg02, result1
1ae54     1E 13 02 F6 | 	mov	arg01, local12
1ae58     2C 8E B0 FD | 	call	#_psdpoke
1ae5c                 | LR__2116
1ae5c                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1ae5c     18 4E 05 F1 | 	add	fp, #24
1ae60     A7 3C 02 FB | 	rdlong	local12, fp
1ae64     18 4E 85 F1 | 	sub	fp, #24
1ae68     01 3C 0E F2 | 	cmp	local12, #1 wz
1ae6c     54 00 90 5D |  if_ne	jmp	#LR__2117
1ae70     52 00 00 FF 
1ae74     4C E5 05 F1 | 	add	objptr, ##42316
1ae78     F2 40 02 FB | 	rdlong	local14, objptr
1ae7c     52 00 00 FF 
1ae80     4C E5 85 F1 | 	sub	objptr, ##42316
1ae84     2B 40 0E F2 | 	cmp	local14, #43 wz
1ae88     38 00 90 AD |  if_e	jmp	#LR__2117
1ae8c     1C 4E 05 F1 | 	add	fp, #28
1ae90     A7 3C 02 FB | 	rdlong	local12, fp
1ae94     14 4F 05 F1 | 	add	fp, #276
1ae98     A7 44 02 FB | 	rdlong	local16, fp
1ae9c     02 44 66 F0 | 	shl	local16, #2
1aea0     04 4F 85 F1 | 	sub	fp, #260
1aea4     A7 44 02 F1 | 	add	local16, fp
1aea8     22 13 02 FB | 	rdlong	arg01, local16
1aeac     00 14 06 F6 | 	mov	arg02, #0
1aeb0     2C 4E 85 F1 | 	sub	fp, #44
1aeb4     F4 FA B0 FD | 	call	#__system____builtin_atoi
1aeb8     FD 14 02 F6 | 	mov	arg02, result1
1aebc     1E 13 02 F6 | 	mov	arg01, local12
1aec0     0C 8E B0 FD | 	call	#_pspoke
1aec4                 | LR__2117
1aec4                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1aec4     18 4E 05 F1 | 	add	fp, #24
1aec8     A7 3C 02 FB | 	rdlong	local12, fp
1aecc     18 4E 85 F1 | 	sub	fp, #24
1aed0     06 3C 0E F2 | 	cmp	local12, #6 wz
1aed4     64 00 90 5D |  if_ne	jmp	#LR__2118
1aed8     52 00 00 FF 
1aedc     4C E5 05 F1 | 	add	objptr, ##42316
1aee0     F2 40 02 FB | 	rdlong	local14, objptr
1aee4     52 00 00 FF 
1aee8     4C E5 85 F1 | 	sub	objptr, ##42316
1aeec     2B 40 0E F2 | 	cmp	local14, #43 wz
1aef0     48 00 90 AD |  if_e	jmp	#LR__2118
1aef4     30 4F 05 F1 | 	add	fp, #304
1aef8     A7 3E 02 FB | 	rdlong	local13, fp
1aefc     02 3E 66 F0 | 	shl	local13, #2
1af00     04 4F 85 F1 | 	sub	fp, #260
1af04     A7 3E 02 F1 | 	add	local13, fp
1af08     1F 13 02 FB | 	rdlong	arg01, local13
1af0c     2C 4E 85 F1 | 	sub	fp, #44
1af10     2C FC B0 FD | 	call	#__system____builtin_atof
1af14     28 4E 05 F1 | 	add	fp, #40
1af18     A7 FA 61 FC | 	wrlong	result1, fp
1af1c     0C 4E 85 F1 | 	sub	fp, #12
1af20     A7 3C 02 FB | 	rdlong	local12, fp
1af24     0C 4E 05 F1 | 	add	fp, #12
1af28     A7 12 02 F6 | 	mov	arg01, fp
1af2c     28 4E 85 F1 | 	sub	fp, #40
1af30     09 15 02 FB | 	rdlong	arg02, arg01
1af34     1E 13 02 F6 | 	mov	arg01, local12
1af38     04 8D B0 FD | 	call	#_pslpoke
1af3c                 | LR__2118
1af3c                 | LR__2119
1af3c     30 4F 05 F1 | 	add	fp, #304
1af40     A7 40 02 FB | 	rdlong	local14, fp
1af44     01 40 06 F1 | 	add	local14, #1
1af48     A7 40 62 FC | 	wrlong	local14, fp
1af4c     30 4F 85 F1 | 	sub	fp, #304
1af50     B8 F6 9F FD | 	jmp	#LR__2083
1af54                 | LR__2120
1af54                 | LR__2121
1af54     A7 F0 03 F6 | 	mov	ptra, fp
1af58     B2 00 A0 FD | 	call	#popregs_
1af5c                 | _do_read_ret
1af5c     2D 00 64 FD | 	ret
1af60                 | 
1af60                 | ' 
1af60                 | ' '------------------- release
1af60                 | ' 
1af60                 | ' sub do_release
1af60                 | _do_release
1af60     00 4A 05 F6 | 	mov	COUNT_, #0
1af64     A8 00 A0 FD | 	call	#pushregs_
1af68     10 F0 07 F1 | 	add	ptra, #16
1af6c     3C 28 BF FD | 	call	#_pop
1af70     FF 14 02 F6 | 	mov	arg02, result3
1af74     A7 FA 61 FC | 	wrlong	result1, fp
1af78     04 4E 05 F1 | 	add	fp, #4
1af7c     A7 FC 61 FC | 	wrlong	result2, fp
1af80     04 4E 05 F1 | 	add	fp, #4
1af84     A7 14 62 FC | 	wrlong	arg02, fp
1af88     08 4E 85 F1 | 	sub	fp, #8
1af8c     A7 12 02 F6 | 	mov	arg01, fp
1af90     FC 29 BF FD | 	call	#_converttoint
1af94     0C 4E 05 F1 | 	add	fp, #12
1af98     A7 FA 61 FC | 	wrlong	result1, fp
1af9c                 | ' 
1af9c                 | ' t1=pop()
1af9c                 | ' channel=converttoint(t1)
1af9c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1af9c     0C 4E 85 F1 | 	sub	fp, #12
1afa0     00 FA 55 F2 | 	cmps	result1, #0 wc
1afa4     44 00 90 CD |  if_b	jmp	#LR__2130
1afa8     0C 4E 05 F1 | 	add	fp, #12
1afac     A7 14 02 FB | 	rdlong	arg02, fp
1afb0     0C 4E 85 F1 | 	sub	fp, #12
1afb4     08 14 56 F2 | 	cmps	arg02, #8 wc
1afb8     30 00 90 3D |  if_ae	jmp	#LR__2130
1afbc     37 00 00 FF 
1afc0     10 E4 05 F1 | 	add	objptr, ##28176
1afc4     F2 12 02 FB | 	rdlong	arg01, objptr
1afc8     37 00 00 FF 
1afcc     10 E4 85 F1 | 	sub	objptr, ##28176
1afd0     0C 4E 05 F1 | 	add	fp, #12
1afd4     A7 14 02 FB | 	rdlong	arg02, fp
1afd8     0C 4E 85 F1 | 	sub	fp, #12
1afdc     06 14 66 F0 | 	shl	arg02, #6
1afe0     0A 13 02 F1 | 	add	arg01, arg02
1afe4     2C 12 06 F1 | 	add	arg01, #44
1afe8     09 FF 69 FC | 	wrlong	#255, arg01
1afec                 | LR__2130
1afec     A7 F0 03 F6 | 	mov	ptra, fp
1aff0     B2 00 A0 FD | 	call	#popregs_
1aff4                 | _do_release_ret
1aff4     2D 00 64 FD | 	ret
1aff8                 | 
1aff8                 | ' 
1aff8                 | ' '------------------- restore
1aff8                 | ' 
1aff8                 | ' sub do_restore()
1aff8                 | _do_restore
1aff8     4A 00 00 FF 
1affc     88 E4 05 F1 | 	add	objptr, ##38024
1b000     F2 00 02 FB | 	rdlong	_var01, objptr
1b004     06 00 00 FF 
1b008     A4 E4 05 F1 | 	add	objptr, ##3236
1b00c     F2 00 62 FC | 	wrlong	_var01, objptr
1b010     BD 01 00 FF 
1b014     88 01 06 F6 | 	mov	_var01, ##@LR__6031
1b018     01 00 00 FF 
1b01c     E8 E5 05 F1 | 	add	objptr, ##1000
1b020     F2 00 62 FC | 	wrlong	_var01, objptr
1b024     52 00 00 FF 
1b028     14 E5 85 F1 | 	sub	objptr, ##42260
1b02c                 | _do_restore_ret
1b02c     2D 00 64 FD | 	ret
1b030                 | 
1b030                 | ' 
1b030                 | ' '------------------- restorepalette
1b030                 | ' 
1b030                 | ' sub do_restorepalette()
1b030                 | _do_restorepalette
1b030     D0 94 B0 FD | 	call	#_hg010b_spin2_restorepalette
1b034                 | _do_restorepalette_ret
1b034     2D 00 64 FD | 	ret
1b038                 | 
1b038                 | ' '------------------- return
1b038                 | ' 
1b038                 | ' sub do_return()
1b038                 | _do_return
1b038                 | ' if gosubtop>0 then
1b038     50 00 00 FF 
1b03c     34 E5 05 F1 | 	add	objptr, ##41268
1b040     F2 00 02 FB | 	rdlong	_var01, objptr
1b044     50 00 00 FF 
1b048     34 E5 85 F1 | 	sub	objptr, ##41268
1b04c     01 00 56 F2 | 	cmps	_var01, #1 wc
1b050     8C 00 90 CD |  if_b	jmp	#LR__2140
1b054     50 00 00 FF 
1b058     34 E5 05 F1 | 	add	objptr, ##41268
1b05c     F2 00 02 FB | 	rdlong	_var01, objptr
1b060     03 00 66 F0 | 	shl	_var01, #3
1b064     03 00 00 FF 
1b068     88 E5 85 F1 | 	sub	objptr, ##1928
1b06c     F2 00 02 F1 | 	add	_var01, objptr
1b070     00 01 02 FB | 	rdlong	_var01, _var01
1b074     03 00 00 FF 
1b078     0C E5 05 F1 | 	add	objptr, ##1804
1b07c     F2 00 62 FC | 	wrlong	_var01, objptr
1b080     7C E4 05 F1 | 	add	objptr, #124
1b084     F2 00 02 FB | 	rdlong	_var01, objptr
1b088     03 00 66 F0 | 	shl	_var01, #3
1b08c     03 00 00 FF 
1b090     88 E5 85 F1 | 	sub	objptr, ##1928
1b094     F2 00 02 F1 | 	add	_var01, objptr
1b098     04 00 06 F1 | 	add	_var01, #4
1b09c     00 01 02 FB | 	rdlong	_var01, _var01
1b0a0     03 00 00 FF 
1b0a4     10 E5 05 F1 | 	add	objptr, ##1808
1b0a8     F2 00 62 FC | 	wrlong	_var01, objptr
1b0ac     06 00 00 FF 
1b0b0     40 E4 85 F1 | 	sub	objptr, ##3136
1b0b4     F2 00 02 FB | 	rdlong	_var01, objptr
1b0b8     01 00 86 F1 | 	sub	_var01, #1
1b0bc     04 E4 05 F1 | 	add	objptr, #4
1b0c0     F2 00 62 FC | 	wrlong	_var01, objptr
1b0c4     06 00 00 FF 
1b0c8     B4 E4 05 F1 | 	add	objptr, ##3252
1b0cc     F2 00 02 FB | 	rdlong	_var01, objptr
1b0d0     01 00 86 F1 | 	sub	_var01, #1
1b0d4     F2 00 62 FC | 	wrlong	_var01, objptr
1b0d8     50 00 00 FF 
1b0dc     34 E5 85 F1 | 	sub	objptr, ##41268
1b0e0                 | LR__2140
1b0e0                 | _do_return_ret
1b0e0     2D 00 64 FD | 	ret
1b0e4                 | 
1b0e4                 | ' 
1b0e4                 | ' '------------------- right$
1b0e4                 | ' 
1b0e4                 | ' sub do_right
1b0e4                 | _do_right
1b0e4     00 4A 05 F6 | 	mov	COUNT_, #0
1b0e8     A8 00 A0 FD | 	call	#pushregs_
1b0ec     14 F0 07 F1 | 	add	ptra, #20
1b0f0     4A 00 00 FF 
1b0f4     80 E4 05 F1 | 	add	objptr, ##38016
1b0f8     F2 16 02 FB | 	rdlong	arg03, objptr
1b0fc     0B 15 02 F6 | 	mov	arg02, arg03
1b100     01 14 66 F0 | 	shl	arg02, #1
1b104     0B 15 02 F1 | 	add	arg02, arg03
1b108     02 14 66 F0 | 	shl	arg02, #2
1b10c     03 00 00 FF 
1b110     04 E4 85 F1 | 	sub	objptr, ##1540
1b114     F2 14 02 F1 | 	add	arg02, objptr
1b118     0A 17 02 FB | 	rdlong	arg03, arg02
1b11c     0C 4E 05 F1 | 	add	fp, #12
1b120     A7 16 62 FC | 	wrlong	arg03, fp
1b124                 | ' 
1b124                 | ' numpar=compiledline(lineptr_e).result.uresult
1b124                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1b124     0C 4E 85 F1 | 	sub	fp, #12
1b128     02 16 0E F2 | 	cmp	arg03, #2 wz
1b12c     47 00 00 FF 
1b130     7C E4 85 F1 | 	sub	objptr, ##36476
1b134     40 00 90 AD |  if_e	jmp	#LR__2150
1b138     00 12 06 F6 | 	mov	arg01, #0
1b13c     1C 20 B1 FD | 	call	#__system___getiolock_0616
1b140     FD 12 02 F6 | 	mov	arg01, result1
1b144     70 C3 B0 FD | 	call	#__system___lockmem
1b148     BD 01 00 FF 
1b14c     89 15 06 F6 | 	mov	arg02, ##@LR__6032
1b150     00 12 06 F6 | 	mov	arg01, #0
1b154     00 16 06 F6 | 	mov	arg03, #0
1b158     54 D0 B0 FD | 	call	#__system___basic_print_string
1b15c     00 12 06 F6 | 	mov	arg01, #0
1b160     F8 1F B1 FD | 	call	#__system___getiolock_0616
1b164     FD 00 68 FC | 	wrlong	#0, result1
1b168     27 12 06 F6 | 	mov	arg01, #39
1b16c     00 14 06 F6 | 	mov	arg02, #0
1b170     2C 89 B0 FD | 	call	#_printerror
1b174     EC 00 90 FD | 	jmp	#LR__2153
1b178                 | LR__2150
1b178     30 26 BF FD | 	call	#_pop
1b17c     FF 16 02 F6 | 	mov	arg03, result3
1b180     A7 FA 61 FC | 	wrlong	result1, fp
1b184     04 4E 05 F1 | 	add	fp, #4
1b188     A7 FC 61 FC | 	wrlong	result2, fp
1b18c     04 4E 05 F1 | 	add	fp, #4
1b190     A7 16 62 FC | 	wrlong	arg03, fp
1b194     08 4E 85 F1 | 	sub	fp, #8
1b198     A7 12 02 F6 | 	mov	arg01, fp
1b19c     F0 27 BF FD | 	call	#_converttoint
1b1a0     FD 16 02 F6 | 	mov	arg03, result1
1b1a4     10 4E 05 F1 | 	add	fp, #16
1b1a8     A7 16 62 FC | 	wrlong	arg03, fp
1b1ac     10 4E 85 F1 | 	sub	fp, #16
1b1b0     F8 25 BF FD | 	call	#_pop
1b1b4     FF 16 02 F6 | 	mov	arg03, result3
1b1b8     A7 FA 61 FC | 	wrlong	result1, fp
1b1bc     04 4E 05 F1 | 	add	fp, #4
1b1c0     A7 FC 61 FC | 	wrlong	result2, fp
1b1c4     04 4E 05 F1 | 	add	fp, #4
1b1c8     A7 16 62 FC | 	wrlong	arg03, fp
1b1cc                 | ' t1=pop() : arg=converttoint(t1)
1b1cc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b1cc     08 4E 85 F1 | 	sub	fp, #8
1b1d0     2B 16 0E F2 | 	cmp	arg03, #43 wz
1b1d4     18 00 90 5D |  if_ne	jmp	#LR__2151
1b1d8     A7 12 02 FB | 	rdlong	arg01, fp
1b1dc     44 27 BF FD | 	call	#_convertstring
1b1e0     A7 FA 61 FC | 	wrlong	result1, fp
1b1e4     08 4E 05 F1 | 	add	fp, #8
1b1e8     A7 3E 68 FC | 	wrlong	#31, fp
1b1ec     08 4E 85 F1 | 	sub	fp, #8
1b1f0                 | LR__2151
1b1f0                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1b1f0     08 4E 05 F1 | 	add	fp, #8
1b1f4     A7 16 02 FB | 	rdlong	arg03, fp
1b1f8     08 4E 85 F1 | 	sub	fp, #8
1b1fc     1F 16 0E F2 | 	cmp	arg03, #31 wz
1b200     40 00 90 AD |  if_e	jmp	#LR__2152
1b204     00 12 06 F6 | 	mov	arg01, #0
1b208     50 1F B1 FD | 	call	#__system___getiolock_0616
1b20c     FD 12 02 F6 | 	mov	arg01, result1
1b210     A4 C2 B0 FD | 	call	#__system___lockmem
1b214     BD 01 00 FF 
1b218     92 15 06 F6 | 	mov	arg02, ##@LR__6033
1b21c     00 12 06 F6 | 	mov	arg01, #0
1b220     00 16 06 F6 | 	mov	arg03, #0
1b224     88 CF B0 FD | 	call	#__system___basic_print_string
1b228     00 12 06 F6 | 	mov	arg01, #0
1b22c     2C 1F B1 FD | 	call	#__system___getiolock_0616
1b230     FD 00 68 FC | 	wrlong	#0, result1
1b234     0F 12 06 F6 | 	mov	arg01, #15
1b238     00 14 06 F6 | 	mov	arg02, #0
1b23c     60 88 B0 FD | 	call	#_printerror
1b240     20 00 90 FD | 	jmp	#LR__2153
1b244                 | LR__2152
1b244     A7 12 02 FB | 	rdlong	arg01, fp
1b248     10 4E 05 F1 | 	add	fp, #16
1b24c     A7 14 02 FB | 	rdlong	arg02, fp
1b250     10 4E 85 F1 | 	sub	fp, #16
1b254     68 E3 B0 FD | 	call	#__system__Right_S
1b258     A7 FA 61 FC | 	wrlong	result1, fp
1b25c     A7 12 02 F6 | 	mov	arg01, fp
1b260     E0 25 BF FD | 	call	#_push
1b264                 | LR__2153
1b264     A7 F0 03 F6 | 	mov	ptra, fp
1b268     B2 00 A0 FD | 	call	#popregs_
1b26c                 | _do_right_ret
1b26c     2D 00 64 FD | 	ret
1b270                 | 
1b270                 | ' 
1b270                 | ' '------------------- rnd
1b270                 | ' 
1b270                 | ' sub do_rnd
1b270                 | _do_rnd
1b270     01 4A 05 F6 | 	mov	COUNT_, #1
1b274     A8 00 A0 FD | 	call	#pushregs_
1b278     10 F0 07 F1 | 	add	ptra, #16
1b27c     4A 00 00 FF 
1b280     80 E4 05 F1 | 	add	objptr, ##38016
1b284     F2 26 02 FB | 	rdlong	local01, objptr
1b288     13 17 02 F6 | 	mov	arg03, local01
1b28c     01 16 66 F0 | 	shl	arg03, #1
1b290     13 17 02 F1 | 	add	arg03, local01
1b294     02 16 66 F0 | 	shl	arg03, #2
1b298     03 00 00 FF 
1b29c     04 E4 85 F1 | 	sub	objptr, ##1540
1b2a0     F2 16 02 F1 | 	add	arg03, objptr
1b2a4     0B 17 02 FB | 	rdlong	arg03, arg03
1b2a8     0C 4E 05 F1 | 	add	fp, #12
1b2ac     A7 16 62 FC | 	wrlong	arg03, fp
1b2b0                 | ' 
1b2b0                 | ' numpar=compiledline(lineptr_e).result.uresult
1b2b0                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1b2b0     0C 4E 85 F1 | 	sub	fp, #12
1b2b4     02 16 16 F2 | 	cmp	arg03, #2 wc
1b2b8     47 00 00 FF 
1b2bc     7C E4 85 F1 | 	sub	objptr, ##36476
1b2c0     40 00 90 CD |  if_b	jmp	#LR__2160
1b2c4     00 12 06 F6 | 	mov	arg01, #0
1b2c8     90 1E B1 FD | 	call	#__system___getiolock_0616
1b2cc     FD 12 02 F6 | 	mov	arg01, result1
1b2d0     E4 C1 B0 FD | 	call	#__system___lockmem
1b2d4     BD 01 00 FF 
1b2d8     9B 15 06 F6 | 	mov	arg02, ##@LR__6034
1b2dc     00 12 06 F6 | 	mov	arg01, #0
1b2e0     00 16 06 F6 | 	mov	arg03, #0
1b2e4     C8 CE B0 FD | 	call	#__system___basic_print_string
1b2e8     00 12 06 F6 | 	mov	arg01, #0
1b2ec     6C 1E B1 FD | 	call	#__system___getiolock_0616
1b2f0     FD 00 68 FC | 	wrlong	#0, result1
1b2f4     27 12 06 F6 | 	mov	arg01, #39
1b2f8     00 14 06 F6 | 	mov	arg02, #0
1b2fc     A0 87 B0 FD | 	call	#_printerror
1b300     30 01 90 FD | 	jmp	#LR__2167
1b304                 | LR__2160
1b304                 | ' if numpar=0 then
1b304     0C 4E 05 F1 | 	add	fp, #12
1b308     A7 FE 09 FB | 	rdlong	result3, fp wz
1b30c     0C 4E 85 F1 | 	sub	fp, #12
1b310     20 00 90 5D |  if_ne	jmp	#LR__2161
1b314     08 4E 05 F1 | 	add	fp, #8
1b318     A7 3A 68 FC | 	wrlong	#29, fp
1b31c     08 4E 85 F1 | 	sub	fp, #8
1b320     1B FA 61 FD | 	getrnd	result1
1b324     A7 FA 61 FC | 	wrlong	result1, fp
1b328     A7 12 02 F6 | 	mov	arg01, fp
1b32c     14 25 BF FD | 	call	#_push
1b330     00 01 90 FD | 	jmp	#LR__2166
1b334                 | LR__2161
1b334     74 24 BF FD | 	call	#_pop
1b338     A7 FA 61 FC | 	wrlong	result1, fp
1b33c     04 4E 05 F1 | 	add	fp, #4
1b340     A7 FC 61 FC | 	wrlong	result2, fp
1b344     04 4E 05 F1 | 	add	fp, #4
1b348     A7 FE 61 FC | 	wrlong	result3, fp
1b34c                 | '   t1=pop()
1b34c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1b34c     08 4E 85 F1 | 	sub	fp, #8
1b350     1C FE 0D F2 | 	cmp	result3, #28 wz
1b354     08 4E 05 51 |  if_ne	add	fp, #8
1b358     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b35c     08 4E 85 51 |  if_ne	sub	fp, #8
1b360     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1b364     2C 00 90 5D |  if_ne	jmp	#LR__2162
1b368     1B FA 61 FD | 	getrnd	result1
1b36c     A7 26 02 FB | 	rdlong	local01, fp
1b370     13 FB 11 FD | 	qdiv	result1, local01
1b374     A7 12 02 F6 | 	mov	arg01, fp
1b378     19 26 62 FD | 	getqy	local01
1b37c     A7 26 62 FC | 	wrlong	local01, fp
1b380     08 4E 05 F1 | 	add	fp, #8
1b384     A7 3A 68 FC | 	wrlong	#29, fp
1b388     08 4E 85 F1 | 	sub	fp, #8
1b38c     B4 24 BF FD | 	call	#_push
1b390     A0 00 90 FD | 	jmp	#LR__2165
1b394                 | LR__2162
1b394     08 4E 05 F1 | 	add	fp, #8
1b398     A7 26 02 FB | 	rdlong	local01, fp
1b39c     08 4E 85 F1 | 	sub	fp, #8
1b3a0     1E 26 0E F2 | 	cmp	local01, #30 wz
1b3a4     48 00 90 5D |  if_ne	jmp	#LR__2163
1b3a8     A7 12 02 FB | 	rdlong	arg01, fp
1b3ac     00 C0 24 FF 
1b3b0     00 14 06 F6 | 	mov	arg02, ##1233125376
1b3b4     80 F1 B0 FD | 	call	#__system___float_div
1b3b8     FD 26 02 F6 | 	mov	local01, result1
1b3bc     1B 12 62 FD | 	getrnd	arg01
1b3c0     74 13 06 F4 | 	bitl	arg01, #372
1b3c4     68 EB B0 FD | 	call	#__system___float_fromuns
1b3c8     FD 14 02 F6 | 	mov	arg02, result1
1b3cc     13 13 02 F6 | 	mov	arg01, local01
1b3d0     60 EF B0 FD | 	call	#__system___float_mul
1b3d4     A7 FA 61 FC | 	wrlong	result1, fp
1b3d8     08 4E 05 F1 | 	add	fp, #8
1b3dc     A7 3C 68 FC | 	wrlong	#30, fp
1b3e0     08 4E 85 F1 | 	sub	fp, #8
1b3e4     A7 12 02 F6 | 	mov	arg01, fp
1b3e8     58 24 BF FD | 	call	#_push
1b3ec     44 00 90 FD | 	jmp	#LR__2164
1b3f0                 | LR__2163
1b3f0                 | '     print "rnd: "; : printerror(40) 
1b3f0     00 12 06 F6 | 	mov	arg01, #0
1b3f4     64 1D B1 FD | 	call	#__system___getiolock_0616
1b3f8     FD 12 02 F6 | 	mov	arg01, result1
1b3fc     B8 C0 B0 FD | 	call	#__system___lockmem
1b400     BD 01 00 FF 
1b404     A1 15 06 F6 | 	mov	arg02, ##@LR__6035
1b408     00 12 06 F6 | 	mov	arg01, #0
1b40c     00 16 06 F6 | 	mov	arg03, #0
1b410     9C CD B0 FD | 	call	#__system___basic_print_string
1b414     00 12 06 F6 | 	mov	arg01, #0
1b418     40 1D B1 FD | 	call	#__system___getiolock_0616
1b41c     FD 00 68 FC | 	wrlong	#0, result1
1b420     28 12 06 F6 | 	mov	arg01, #40
1b424     00 14 06 F6 | 	mov	arg02, #0
1b428     74 86 B0 FD | 	call	#_printerror
1b42c     A7 12 02 F6 | 	mov	arg01, fp
1b430     10 24 BF FD | 	call	#_push
1b434                 | LR__2164
1b434                 | LR__2165
1b434                 | LR__2166
1b434                 | LR__2167
1b434     A7 F0 03 F6 | 	mov	ptra, fp
1b438     B2 00 A0 FD | 	call	#popregs_
1b43c                 | _do_rnd_ret
1b43c     2D 00 64 FD | 	ret
1b440                 | 
1b440                 | ' 
1b440                 | ' '-------------------- round
1b440                 | ' 
1b440                 | ' sub do_round
1b440                 | _do_round
1b440     00 4A 05 F6 | 	mov	COUNT_, #0
1b444     A8 00 A0 FD | 	call	#pushregs_
1b448     0C F0 07 F1 | 	add	ptra, #12
1b44c     5C 23 BF FD | 	call	#_pop
1b450     A7 FA 61 FC | 	wrlong	result1, fp
1b454     04 4E 05 F1 | 	add	fp, #4
1b458     A7 FC 61 FC | 	wrlong	result2, fp
1b45c     04 4E 05 F1 | 	add	fp, #4
1b460     A7 FE 61 FC | 	wrlong	result3, fp
1b464     08 4E 85 F1 | 	sub	fp, #8
1b468     A7 12 02 F6 | 	mov	arg01, fp
1b46c     20 25 BF FD | 	call	#_converttoint
1b470     A7 FA 61 FC | 	wrlong	result1, fp
1b474     08 4E 05 F1 | 	add	fp, #8
1b478     A7 38 68 FC | 	wrlong	#28, fp
1b47c     08 4E 85 F1 | 	sub	fp, #8
1b480     A7 12 02 F6 | 	mov	arg01, fp
1b484     BC 23 BF FD | 	call	#_push
1b488     A7 F0 03 F6 | 	mov	ptra, fp
1b48c     B2 00 A0 FD | 	call	#popregs_
1b490                 | _do_round_ret
1b490     2D 00 64 FD | 	ret
1b494                 | 
1b494                 | ' 
1b494                 | ' '-------------------- rqpin
1b494                 | ' 
1b494                 | ' sub do_rqpin
1b494                 | _do_rqpin
1b494     00 4A 05 F6 | 	mov	COUNT_, #0
1b498     A8 00 A0 FD | 	call	#pushregs_
1b49c     0C F0 07 F1 | 	add	ptra, #12
1b4a0     08 23 BF FD | 	call	#_pop
1b4a4     A7 FA 61 FC | 	wrlong	result1, fp
1b4a8     04 4E 05 F1 | 	add	fp, #4
1b4ac     A7 FC 61 FC | 	wrlong	result2, fp
1b4b0     04 4E 05 F1 | 	add	fp, #4
1b4b4     A7 FE 61 FC | 	wrlong	result3, fp
1b4b8     08 4E 85 F1 | 	sub	fp, #8
1b4bc     A7 12 02 F6 | 	mov	arg01, fp
1b4c0     CC 24 BF FD | 	call	#_converttoint
1b4c4     FD 12 02 F6 | 	mov	arg01, result1
1b4c8     00 FA 05 F6 | 	mov	result1, #0
1b4cc     09 FB 81 FA | 	rqpin	result1, arg01
1b4d0     52 00 00 FF 
1b4d4     4C E5 05 F1 | 	add	objptr, ##42316
1b4d8     F2 FA 61 FC | 	wrlong	result1, objptr
1b4dc     52 00 00 FF 
1b4e0     4C E5 85 F1 | 	sub	objptr, ##42316
1b4e4     08 4E 05 F1 | 	add	fp, #8
1b4e8     A7 3A 68 FC | 	wrlong	#29, fp
1b4ec     08 4E 85 F1 | 	sub	fp, #8
1b4f0     A7 08 68 FC | 	wrlong	#4, fp
1b4f4     A7 12 02 F6 | 	mov	arg01, fp
1b4f8     48 23 BF FD | 	call	#_push
1b4fc     A7 F0 03 F6 | 	mov	ptra, fp
1b500     B2 00 A0 FD | 	call	#popregs_
1b504                 | _do_rqpin_ret
1b504     2D 00 64 FD | 	ret
1b508                 | 
1b508                 | ' 
1b508                 | ' ' ------------------ run
1b508                 | ' 
1b508                 | ' sub do_run
1b508                 | _do_run
1b508     04 4A 05 F6 | 	mov	COUNT_, #4
1b50c     A8 00 A0 FD | 	call	#pushregs_
1b510     4A 00 00 FF 
1b514     80 E4 05 F1 | 	add	objptr, ##38016
1b518     F2 26 02 FB | 	rdlong	local01, objptr
1b51c     06 00 00 FF 
1b520     38 E4 05 F1 | 	add	objptr, ##3128
1b524     F2 28 02 FB | 	rdlong	local02, objptr
1b528     04 E4 05 F1 | 	add	objptr, #4
1b52c     F2 2A 02 FB | 	rdlong	local03, objptr
1b530     13 19 02 F6 | 	mov	arg04, local01
1b534     0C 17 02 F6 | 	mov	arg03, arg04
1b538     01 16 66 F0 | 	shl	arg03, #1
1b53c     0C 17 02 F1 | 	add	arg03, arg04
1b540     02 16 66 F0 | 	shl	arg03, #2
1b544     09 00 00 FF 
1b548     40 E4 85 F1 | 	sub	objptr, ##4672
1b54c     F2 16 02 F1 | 	add	arg03, objptr
1b550     0B 15 02 FB | 	rdlong	arg02, arg03
1b554                 | ' 
1b554                 | ' r_lineptr_e=lineptr_e
1b554                 | ' r_runptr=runptr
1b554                 | ' r_runptr2=runptr2
1b554                 | ' 
1b554                 | ' numpar=compiledline(lineptr_e).result.uresult
1b554                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1b554     01 14 0E F2 | 	cmp	arg02, #1 wz
1b558     47 00 00 FF 
1b55c     7C E4 85 F1 | 	sub	objptr, ##36476
1b560     00 12 06 A6 |  if_e	mov	arg01, #0
1b564     C4 9B BF AD |  if_e	call	#_do_load
1b568     4A 00 00 FF 
1b56c     88 E4 05 F1 | 	add	objptr, ##38024
1b570     F2 18 02 FB | 	rdlong	arg04, objptr
1b574     06 00 00 FF 
1b578     30 E4 05 F1 | 	add	objptr, ##3120
1b57c     F2 18 62 FC | 	wrlong	arg04, objptr
1b580     04 E4 05 F1 | 	add	objptr, #4
1b584     F2 00 68 FC | 	wrlong	#0, objptr
1b588     04 E4 05 F1 | 	add	objptr, #4
1b58c     FF FF FF FF 
1b590     F2 FE 6B FC | 	wrlong	##-1, objptr
1b594     06 00 00 FF 
1b598     38 E4 85 F1 | 	sub	objptr, ##3128
1b59c     F2 18 02 FB | 	rdlong	arg04, objptr
1b5a0     06 00 00 FF 
1b5a4     A4 E4 05 F1 | 	add	objptr, ##3236
1b5a8     F2 18 62 FC | 	wrlong	arg04, objptr
1b5ac     BD 01 00 FF 
1b5b0     A7 19 06 F6 | 	mov	arg04, ##@LR__6036
1b5b4     01 00 00 FF 
1b5b8     E8 E5 05 F1 | 	add	objptr, ##1000
1b5bc     F2 18 62 FC | 	wrlong	arg04, objptr
1b5c0                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1b5c0                 | ' dataptr=programstart : readline="" ' reset the data pointer
1b5c0                 | ' if inrun>0 then 
1b5c0     02 00 00 FF 
1b5c4     28 E4 85 F1 | 	sub	objptr, ##1064
1b5c8     F2 18 02 FB | 	rdlong	arg04, objptr
1b5cc     50 00 00 FF 
1b5d0     EC E4 85 F1 | 	sub	objptr, ##41196
1b5d4     01 18 16 F2 | 	cmp	arg04, #1 wc
1b5d8     30 00 90 CD |  if_b	jmp	#LR__2170
1b5dc     50 00 00 FF 
1b5e0     F0 E4 05 F1 | 	add	objptr, ##41200
1b5e4     F2 12 02 F6 | 	mov	arg01, objptr
1b5e8     38 E4 85 F1 | 	sub	objptr, #56
1b5ec     F2 14 02 FB | 	rdlong	arg02, objptr
1b5f0     18 16 06 F6 | 	mov	arg03, #24
1b5f4     44 00 00 FF 
1b5f8     EC E5 85 F1 | 	sub	objptr, ##35308
1b5fc     14 B2 B0 FD | 	call	#_psram_spin2_read1
1b600     0B 00 00 FF 
1b604     CC E4 85 F1 | 	sub	objptr, ##5836
1b608                 | '   psram.read1(varptr(runheader),runptr,24)  
1b608                 | '   return
1b608     0C 03 90 FD | 	jmp	#LR__2177
1b60c                 | LR__2170
1b60c     50 00 00 FF 
1b610     EC E4 05 F1 | 	add	objptr, ##41196
1b614     F2 02 68 FC | 	wrlong	#1, objptr
1b618     04 E4 05 F1 | 	add	objptr, #4
1b61c     F2 12 02 F6 | 	mov	arg01, objptr
1b620     38 E4 85 F1 | 	sub	objptr, #56
1b624     F2 14 02 FB | 	rdlong	arg02, objptr
1b628     18 16 06 F6 | 	mov	arg03, #24
1b62c     44 00 00 FF 
1b630     EC E5 85 F1 | 	sub	objptr, ##35308
1b634     DC B1 B0 FD | 	call	#_psram_spin2_read1
1b638                 | ' inrun=1
1b638                 | ' psram.read1(varptr(runheader),runptr,24) 
1b638                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1b638     45 00 00 FF 
1b63c     24 E4 05 F1 | 	add	objptr, ##35364
1b640     F2 2C 02 FB | 	rdlong	local04, objptr
1b644     50 00 00 FF 
1b648     F0 E4 85 F1 | 	sub	objptr, ##41200
1b64c     FF FF 7F FF 
1b650     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1b654     50 00 00 AF 
1b658     EC E4 05 A1 |  if_e	add	objptr, ##41196
1b65c     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b660     50 00 00 AF 
1b664     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1b668     AC 02 90 AD |  if_e	jmp	#LR__2177
1b66c                 | ' do 
1b66c                 | LR__2171
1b66c                 | '   if runptr<>oldrunptr then
1b66c     50 00 00 FF 
1b670     B8 E4 05 F1 | 	add	objptr, ##41144
1b674     F2 2C 02 FB | 	rdlong	local04, objptr
1b678     08 E4 05 F1 | 	add	objptr, #8
1b67c     F2 18 02 FB | 	rdlong	arg04, objptr
1b680     50 00 00 FF 
1b684     C0 E4 85 F1 | 	sub	objptr, ##41152
1b688     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1b68c     CC 00 90 AD |  if_e	jmp	#LR__2172
1b690     50 00 00 FF 
1b694     F0 E4 05 F1 | 	add	objptr, ##41200
1b698     F2 12 02 F6 | 	mov	arg01, objptr
1b69c     38 E4 85 F1 | 	sub	objptr, #56
1b6a0     F2 14 02 FB | 	rdlong	arg02, objptr
1b6a4     18 16 06 F6 | 	mov	arg03, #24
1b6a8     44 00 00 FF 
1b6ac     EC E5 85 F1 | 	sub	objptr, ##35308
1b6b0     60 B1 B0 FD | 	call	#_psram_spin2_read1
1b6b4     3B 00 00 FF 
1b6b8     B0 E5 05 F1 | 	add	objptr, ##30640
1b6bc     F2 12 02 F6 | 	mov	arg01, objptr
1b6c0     09 00 00 FF 
1b6c4     3C E4 05 F1 | 	add	objptr, ##4668
1b6c8     F2 14 02 FB | 	rdlong	arg02, objptr
1b6cc     0B 00 00 FF 
1b6d0     54 E4 85 F1 | 	sub	objptr, ##5716
1b6d4     F2 2C 02 FB | 	rdlong	local04, objptr
1b6d8     01 2C 66 F0 | 	shl	local04, #1
1b6dc     16 15 02 F1 | 	add	arg02, local04
1b6e0     0B 00 00 FF 
1b6e4     94 E4 05 F1 | 	add	objptr, ##5780
1b6e8     F2 16 02 FB | 	rdlong	arg03, objptr
1b6ec     40 E4 85 F1 | 	sub	objptr, #64
1b6f0     F2 2C 02 FB | 	rdlong	local04, objptr
1b6f4     16 17 82 F1 | 	sub	arg03, local04
1b6f8     44 00 00 FF 
1b6fc     EC E5 85 F1 | 	sub	objptr, ##35308
1b700     10 B1 B0 FD | 	call	#_psram_spin2_read1
1b704     45 00 00 FF 
1b708     2C E4 05 F1 | 	add	objptr, ##35372
1b70c     F2 2C 02 FB | 	rdlong	local04, objptr
1b710     40 E4 85 F1 | 	sub	objptr, #64
1b714     F2 14 02 FB | 	rdlong	arg02, objptr
1b718     0A 2D 82 F1 | 	sub	local04, arg02
1b71c     0B 00 00 FF 
1b720     54 E4 85 F1 | 	sub	objptr, ##5716
1b724     F2 14 02 FB | 	rdlong	arg02, objptr
1b728     0A 2D 12 FD | 	qdiv	local04, arg02
1b72c     05 00 00 FF 
1b730     18 E4 05 F1 | 	add	objptr, ##2584
1b734     18 2C 62 FD | 	getqx	local04
1b738     03 2C 86 F1 | 	sub	local04, #3
1b73c     F2 2C 62 FC | 	wrlong	local04, objptr
1b740     06 00 00 FF 
1b744     3C E4 05 F1 | 	add	objptr, ##3132
1b748     F2 2C 02 FB | 	rdlong	local04, objptr
1b74c     08 E4 05 F1 | 	add	objptr, #8
1b750     F2 2C 62 FC | 	wrlong	local04, objptr
1b754     50 00 00 FF 
1b758     C0 E4 85 F1 | 	sub	objptr, ##41152
1b75c                 | LR__2172
1b75c     50 00 00 FF 
1b760     04 E5 05 F1 | 	add	objptr, ##41220
1b764     F2 2C 02 FB | 	rdlong	local04, objptr
1b768     4C E4 85 F1 | 	sub	objptr, #76
1b76c     F2 2C 62 FC | 	wrlong	local04, objptr
1b770     04 E4 05 F1 | 	add	objptr, #4
1b774     F2 12 02 FB | 	rdlong	arg01, objptr
1b778     50 00 00 FF 
1b77c     BC E4 85 F1 | 	sub	objptr, ##41148
1b780     24 1F BF FD | 	call	#_execute_line
1b784     50 00 00 FF 
1b788     BC E4 05 F1 | 	add	objptr, ##41148
1b78c     F2 FA 61 FC | 	wrlong	result1, objptr
1b790     04 E4 85 F1 | 	sub	objptr, #4
1b794     F2 2C 02 FB | 	rdlong	local04, objptr
1b798     50 00 00 FF 
1b79c     B8 E4 85 F1 | 	sub	objptr, ##41144
1b7a0     FF FF 3F FF 
1b7a4     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b7a8     4C 00 90 AD |  if_e	jmp	#LR__2175
1b7ac     E0 12 06 F6 | 	mov	arg01, #224
1b7b0     F0 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b7b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b7b8     10 00 90 5D |  if_ne	jmp	#LR__2173
1b7bc     E4 12 06 F6 | 	mov	arg01, #228
1b7c0     E0 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b7c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b7c8     10 00 90 AD |  if_e	jmp	#LR__2174
1b7cc                 | LR__2173
1b7cc     06 12 06 F6 | 	mov	arg01, #6
1b7d0     D0 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b7d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b7d8     1C 00 90 5D |  if_ne	jmp	#LR__2175
1b7dc                 | LR__2174
1b7dc     50 00 00 FF 
1b7e0     EC E4 05 F1 | 	add	objptr, ##41196
1b7e4     F2 2C 02 FB | 	rdlong	local04, objptr
1b7e8     50 00 00 FF 
1b7ec     EC E4 85 F1 | 	sub	objptr, ##41196
1b7f0     02 2C 0E F2 | 	cmp	local04, #2 wz
1b7f4     74 FE 9F 5D |  if_ne	jmp	#LR__2171
1b7f8                 | LR__2175
1b7f8                 | '   ''do whatever kbm.peek_latest_key()=$106 
1b7f8                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1b7f8     50 00 00 FF 
1b7fc     B8 E4 05 F1 | 	add	objptr, ##41144
1b800     F2 2C 02 FB | 	rdlong	local04, objptr
1b804     50 00 00 FF 
1b808     B8 E4 85 F1 | 	sub	objptr, ##41144
1b80c     FF FF 3F FF 
1b810     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b814     AC 00 90 AD |  if_e	jmp	#LR__2176
1b818     50 00 00 FF 
1b81c     EC E4 05 F1 | 	add	objptr, ##41196
1b820     F2 2C 02 FB | 	rdlong	local04, objptr
1b824     50 00 00 FF 
1b828     EC E4 85 F1 | 	sub	objptr, ##41196
1b82c     01 2C 0E F2 | 	cmp	local04, #1 wz
1b830     90 00 90 5D |  if_ne	jmp	#LR__2176
1b834                 | '   print: print "Stopped at line ";runheader(0) 
1b834     00 12 06 F6 | 	mov	arg01, #0
1b838     20 19 B1 FD | 	call	#__system___getiolock_0616
1b83c     FD 12 02 F6 | 	mov	arg01, result1
1b840     74 BC B0 FD | 	call	#__system___lockmem
1b844     00 12 06 F6 | 	mov	arg01, #0
1b848     0A 14 06 F6 | 	mov	arg02, #10
1b84c     00 16 06 F6 | 	mov	arg03, #0
1b850     04 C9 B0 FD | 	call	#__system___basic_print_char
1b854     00 12 06 F6 | 	mov	arg01, #0
1b858     00 19 B1 FD | 	call	#__system___getiolock_0616
1b85c     FD 00 68 FC | 	wrlong	#0, result1
1b860     00 12 06 F6 | 	mov	arg01, #0
1b864     F4 18 B1 FD | 	call	#__system___getiolock_0616
1b868     FD 12 02 F6 | 	mov	arg01, result1
1b86c     48 BC B0 FD | 	call	#__system___lockmem
1b870     BD 01 00 FF 
1b874     A8 15 06 F6 | 	mov	arg02, ##@LR__6037
1b878     00 12 06 F6 | 	mov	arg01, #0
1b87c     00 16 06 F6 | 	mov	arg03, #0
1b880     2C C9 B0 FD | 	call	#__system___basic_print_string
1b884     50 00 00 FF 
1b888     F0 E4 05 F1 | 	add	objptr, ##41200
1b88c     F2 14 02 FB | 	rdlong	arg02, objptr
1b890     50 00 00 FF 
1b894     F0 E4 85 F1 | 	sub	objptr, ##41200
1b898     00 12 06 F6 | 	mov	arg01, #0
1b89c     00 16 06 F6 | 	mov	arg03, #0
1b8a0     0A 18 06 F6 | 	mov	arg04, #10
1b8a4     8C C9 B0 FD | 	call	#__system___basic_print_unsigned
1b8a8     00 12 06 F6 | 	mov	arg01, #0
1b8ac     0A 14 06 F6 | 	mov	arg02, #10
1b8b0     00 16 06 F6 | 	mov	arg03, #0
1b8b4     A0 C8 B0 FD | 	call	#__system___basic_print_char
1b8b8     00 12 06 F6 | 	mov	arg01, #0
1b8bc     9C 18 B1 FD | 	call	#__system___getiolock_0616
1b8c0     FD 00 68 FC | 	wrlong	#0, result1
1b8c4                 | LR__2176
1b8c4     50 00 00 FF 
1b8c8     EC E4 05 F1 | 	add	objptr, ##41196
1b8cc     F2 00 68 FC | 	wrlong	#0, objptr
1b8d0     06 00 00 FF 
1b8d4     6C E4 85 F1 | 	sub	objptr, ##3180
1b8d8     F2 26 62 FC | 	wrlong	local01, objptr
1b8dc     06 00 00 FF 
1b8e0     38 E4 05 F1 | 	add	objptr, ##3128
1b8e4     F2 28 62 FC | 	wrlong	local02, objptr
1b8e8     04 E4 05 F1 | 	add	objptr, #4
1b8ec     F2 2A 62 FC | 	wrlong	local03, objptr
1b8f0     50 00 00 FF 
1b8f4     BC E4 85 F1 | 	sub	objptr, ##41148
1b8f8     11 12 06 F6 | 	mov	arg01, #17
1b8fc     08 14 06 F6 | 	mov	arg02, #8
1b900     10 16 06 F6 | 	mov	arg03, #16
1b904     04 92 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b908     10 12 06 F6 | 	mov	arg01, #16
1b90c     20 14 06 F6 | 	mov	arg02, #32
1b910     20 16 06 F6 | 	mov	arg03, #32
1b914     F4 91 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b918                 | LR__2177
1b918     A7 F0 03 F6 | 	mov	ptra, fp
1b91c     B2 00 A0 FD | 	call	#popregs_
1b920                 | _do_run_ret
1b920     2D 00 64 FD | 	ret
1b924                 | 
1b924                 | ' 
1b924                 | ' ' ------------------ save
1b924                 | ' 
1b924                 | ' sub do_save                        
1b924                 | _do_save
1b924     04 4A 05 F6 | 	mov	COUNT_, #4
1b928     A8 00 A0 FD | 	call	#pushregs_
1b92c     B8 F0 07 F1 | 	add	ptra, #184
1b930     4A 00 00 FF 
1b934     80 E4 05 F1 | 	add	objptr, ##38016
1b938     F2 26 02 FB | 	rdlong	local01, objptr
1b93c     13 29 02 F6 | 	mov	local02, local01
1b940     01 28 66 F0 | 	shl	local02, #1
1b944     13 29 02 F1 | 	add	local02, local01
1b948     02 28 66 F0 | 	shl	local02, #2
1b94c     03 00 00 FF 
1b950     04 E4 85 F1 | 	sub	objptr, ##1540
1b954     F2 28 02 F1 | 	add	local02, objptr
1b958     14 2B 02 FB | 	rdlong	local03, local02
1b95c     10 4E 05 F1 | 	add	fp, #16
1b960     A7 2A 62 FC | 	wrlong	local03, fp
1b964                 | ' 
1b964                 | ' numpar=compiledline(lineptr_e).result.uresult
1b964                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1b964     10 4E 85 F1 | 	sub	fp, #16
1b968     01 2A 56 F2 | 	cmps	local03, #1 wc
1b96c     47 00 00 FF 
1b970     7C E4 85 F1 | 	sub	objptr, ##36476
1b974     20 00 90 CD |  if_b	jmp	#LR__2180
1b978     30 1E BF FD | 	call	#_pop
1b97c     A7 FA 61 FC | 	wrlong	result1, fp
1b980     04 4E 05 F1 | 	add	fp, #4
1b984     A7 FC 61 FC | 	wrlong	result2, fp
1b988     04 4E 05 F1 | 	add	fp, #4
1b98c     A7 FE 61 FC | 	wrlong	result3, fp
1b990     08 4E 85 F1 | 	sub	fp, #8
1b994     24 00 90 FD | 	jmp	#LR__2181
1b998                 | LR__2180
1b998     52 00 00 FF 
1b99c     FC E4 05 F1 | 	add	objptr, ##42236
1b9a0     F2 2A 02 FB | 	rdlong	local03, objptr
1b9a4     52 00 00 FF 
1b9a8     FC E4 85 F1 | 	sub	objptr, ##42236
1b9ac     A7 2A 62 FC | 	wrlong	local03, fp
1b9b0     08 4E 05 F1 | 	add	fp, #8
1b9b4     A7 3E 68 FC | 	wrlong	#31, fp
1b9b8     08 4E 85 F1 | 	sub	fp, #8
1b9bc                 | LR__2181
1b9bc                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1b9bc     4A 00 00 FF 
1b9c0     88 E4 05 F1 | 	add	objptr, ##38024
1b9c4     F2 12 02 FB | 	rdlong	arg01, objptr
1b9c8     4A 00 00 FF 
1b9cc     88 E4 85 F1 | 	sub	objptr, ##38024
1b9d0     9C 83 B0 FD | 	call	#_pslpeek
1b9d4     FF FF 7F FF 
1b9d8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b9dc     10 00 90 5D |  if_ne	jmp	#LR__2182
1b9e0     1B 12 06 F6 | 	mov	arg01, #27
1b9e4     00 14 06 F6 | 	mov	arg02, #0
1b9e8     B4 80 B0 FD | 	call	#_printerror
1b9ec     CC 02 90 FD | 	jmp	#LR__2188
1b9f0                 | LR__2182
1b9f0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b9f0     08 4E 05 F1 | 	add	fp, #8
1b9f4     A7 2A 02 FB | 	rdlong	local03, fp
1b9f8     08 4E 85 F1 | 	sub	fp, #8
1b9fc     2B 2A 0E F2 | 	cmp	local03, #43 wz
1ba00     18 00 90 5D |  if_ne	jmp	#LR__2183
1ba04     A7 12 02 FB | 	rdlong	arg01, fp
1ba08     18 1F BF FD | 	call	#_convertstring
1ba0c     A7 FA 61 FC | 	wrlong	result1, fp
1ba10     08 4E 05 F1 | 	add	fp, #8
1ba14     A7 3E 68 FC | 	wrlong	#31, fp
1ba18     08 4E 85 F1 | 	sub	fp, #8
1ba1c                 | LR__2183
1ba1c                 | ' if t1.result_type=result_string then
1ba1c     08 4E 05 F1 | 	add	fp, #8
1ba20     A7 2A 02 FB | 	rdlong	local03, fp
1ba24     08 4E 85 F1 | 	sub	fp, #8
1ba28     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ba2c     8C 02 90 5D |  if_ne	jmp	#LR__2187
1ba30                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1ba30     A7 12 02 FB | 	rdlong	arg01, fp
1ba34     BD 01 00 FF 
1ba38     B9 15 06 F6 | 	mov	arg02, ##@LR__6038
1ba3c     A0 BA B0 FD | 	call	#__system___string_cmp
1ba40     00 FA 0D F2 | 	cmp	result1, #0 wz
1ba44     52 00 00 AF 
1ba48     FC E4 05 A1 |  if_e	add	objptr, ##42236
1ba4c     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1ba50     A7 2A 62 AC |  if_e	wrlong	local03, fp
1ba54     52 00 00 AF 
1ba58     FC E4 85 A1 |  if_e	sub	objptr, ##42236
1ba5c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1ba60     52 00 00 5F 
1ba64     FC E4 05 51 |  if_ne	add	objptr, ##42236
1ba68     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1ba6c     52 00 00 5F 
1ba70     FC E4 85 51 |  if_ne	sub	objptr, ##42236
1ba74                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1ba74     09 12 06 F6 | 	mov	arg01, #9
1ba78     98 0D B1 FD | 	call	#__system__close
1ba7c     09 2A 06 F6 | 	mov	local03, #9
1ba80     4A 00 00 FF 
1ba84     94 E4 05 F1 | 	add	objptr, ##38036
1ba88     F2 12 02 FB | 	rdlong	arg01, objptr
1ba8c     4A 00 00 FF 
1ba90     94 E4 85 F1 | 	sub	objptr, ##38036
1ba94     BD 01 00 FF 
1ba98     BA 15 06 F6 | 	mov	arg02, ##@LR__6039
1ba9c     74 BA B0 FD | 	call	#__system___string_concat
1baa0     FD 12 02 F6 | 	mov	arg01, result1
1baa4     A7 14 02 FB | 	rdlong	arg02, fp
1baa8     68 BA B0 FD | 	call	#__system___string_concat
1baac     FD 14 02 F6 | 	mov	arg02, result1
1bab0     15 13 02 F6 | 	mov	arg01, local03
1bab4     0D 16 06 F6 | 	mov	arg03, #13
1bab8     00 C6 B0 FD | 	call	#__system___basic_open_string
1babc     4A 00 00 FF 
1bac0     88 E4 05 F1 | 	add	objptr, ##38024
1bac4     F2 2A 02 FB | 	rdlong	local03, objptr
1bac8     4A 00 00 FF 
1bacc     88 E4 85 F1 | 	sub	objptr, ##38024
1bad0     B0 4E 05 F1 | 	add	fp, #176
1bad4     A7 2A 62 FC | 	wrlong	local03, fp
1bad8     B0 4E 85 F1 | 	sub	fp, #176
1badc                 | '   saveptr=programstart
1badc                 | '   do
1badc                 | LR__2184
1badc     14 4E 05 F1 | 	add	fp, #20
1bae0     A7 12 02 F6 | 	mov	arg01, fp
1bae4     9C 4E 05 F1 | 	add	fp, #156
1bae8     A7 14 02 FB | 	rdlong	arg02, fp
1baec     B0 4E 85 F1 | 	sub	fp, #176
1baf0     18 16 06 F6 | 	mov	arg03, #24
1baf4     0B 00 00 FF 
1baf8     CC E4 05 F1 | 	add	objptr, ##5836
1bafc     14 AD B0 FD | 	call	#_psram_spin2_read1
1bb00     2C 4E 05 F1 | 	add	fp, #44
1bb04     A7 12 02 F6 | 	mov	arg01, fp
1bb08     10 4E 85 F1 | 	sub	fp, #16
1bb0c     A7 14 02 FB | 	rdlong	arg02, fp
1bb10     04 4E 05 F1 | 	add	fp, #4
1bb14     A7 16 02 FB | 	rdlong	arg03, fp
1bb18     20 4E 85 F1 | 	sub	fp, #32
1bb1c     F4 AC B0 FD | 	call	#_psram_spin2_read1
1bb20     0B 00 00 FF 
1bb24     CC E4 85 F1 | 	sub	objptr, ##5836
1bb28     BD 01 00 FF 
1bb2c     BC 2B 06 F6 | 	mov	local03, ##@LR__6040
1bb30     AC 4E 05 F1 | 	add	fp, #172
1bb34     A7 2A 62 FC | 	wrlong	local03, fp
1bb38                 | '     psram.read1(varptr(header(0)),saveptr,24)
1bb38                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1bb38                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1bb38     A0 4E 85 F1 | 	sub	fp, #160
1bb3c     A7 02 68 FC | 	wrlong	#1, fp
1bb40     14 4E 05 F1 | 	add	fp, #20
1bb44     A7 2C 02 FB | 	rdlong	local04, fp
1bb48     20 4E 85 F1 | 	sub	fp, #32
1bb4c     01 2C 06 F1 | 	add	local04, #1
1bb50                 | LR__2185
1bb50     0C 4E 05 F1 | 	add	fp, #12
1bb54     A7 2A 02 FB | 	rdlong	local03, fp
1bb58     0C 4E 85 F1 | 	sub	fp, #12
1bb5c     16 2B 52 F2 | 	cmps	local03, local04 wc
1bb60     54 00 90 3D |  if_ae	jmp	#LR__2186
1bb64     AC 4E 05 F1 | 	add	fp, #172
1bb68     A7 26 02 FB | 	rdlong	local01, fp
1bb6c     A0 4E 85 F1 | 	sub	fp, #160
1bb70     A7 2A 02 FB | 	rdlong	local03, fp
1bb74     01 2A 86 F1 | 	sub	local03, #1
1bb78     20 4E 05 F1 | 	add	fp, #32
1bb7c     A7 2A 02 F1 | 	add	local03, fp
1bb80     15 13 C2 FA | 	rdbyte	arg01, local03
1bb84     2C 4E 85 F1 | 	sub	fp, #44
1bb88     70 DB B0 FD | 	call	#__system__Chr_S
1bb8c     FD 14 02 F6 | 	mov	arg02, result1
1bb90     13 13 02 F6 | 	mov	arg01, local01
1bb94     7C B9 B0 FD | 	call	#__system___string_concat
1bb98     AC 4E 05 F1 | 	add	fp, #172
1bb9c     A7 FA 61 FC | 	wrlong	result1, fp
1bba0     A0 4E 85 F1 | 	sub	fp, #160
1bba4     A7 2A 02 FB | 	rdlong	local03, fp
1bba8     01 2A 06 F1 | 	add	local03, #1
1bbac     A7 2A 62 FC | 	wrlong	local03, fp
1bbb0     0C 4E 85 F1 | 	sub	fp, #12
1bbb4     98 FF 9F FD | 	jmp	#LR__2185
1bbb8                 | LR__2186
1bbb8                 | '     print #9, saveline$
1bbb8     09 12 06 F6 | 	mov	arg01, #9
1bbbc     9C 15 B1 FD | 	call	#__system___getiolock_0616
1bbc0     FD 12 02 F6 | 	mov	arg01, result1
1bbc4     F0 B8 B0 FD | 	call	#__system___lockmem
1bbc8     AC 4E 05 F1 | 	add	fp, #172
1bbcc     A7 14 02 FB | 	rdlong	arg02, fp
1bbd0     AC 4E 85 F1 | 	sub	fp, #172
1bbd4     09 12 06 F6 | 	mov	arg01, #9
1bbd8     00 16 06 F6 | 	mov	arg03, #0
1bbdc     D0 C5 B0 FD | 	call	#__system___basic_print_string
1bbe0     09 12 06 F6 | 	mov	arg01, #9
1bbe4     0A 14 06 F6 | 	mov	arg02, #10
1bbe8     00 16 06 F6 | 	mov	arg03, #0
1bbec     68 C5 B0 FD | 	call	#__system___basic_print_char
1bbf0     09 12 06 F6 | 	mov	arg01, #9
1bbf4     64 15 B1 FD | 	call	#__system___getiolock_0616
1bbf8     FD 00 68 FC | 	wrlong	#0, result1
1bbfc     28 4E 05 F1 | 	add	fp, #40
1bc00     A7 2A 02 FB | 	rdlong	local03, fp
1bc04     88 4E 05 F1 | 	add	fp, #136
1bc08     A7 2A 62 FC | 	wrlong	local03, fp
1bc0c     88 4E 85 F1 | 	sub	fp, #136
1bc10     A7 2A 02 FB | 	rdlong	local03, fp
1bc14     28 4E 85 F1 | 	sub	fp, #40
1bc18     FF FF 3F FF 
1bc1c     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1bc20     B8 FE 9F 5D |  if_ne	jmp	#LR__2184
1bc24                 | '   close #9  
1bc24     09 12 06 F6 | 	mov	arg01, #9
1bc28     E8 0B B1 FD | 	call	#__system__close
1bc2c                 | '   print "Saved as ";currentdir$+"/"+loadname
1bc2c     00 12 06 F6 | 	mov	arg01, #0
1bc30     28 15 B1 FD | 	call	#__system___getiolock_0616
1bc34     FD 12 02 F6 | 	mov	arg01, result1
1bc38     7C B8 B0 FD | 	call	#__system___lockmem
1bc3c     BD 01 00 FF 
1bc40     BD 15 06 F6 | 	mov	arg02, ##@LR__6041
1bc44     00 12 06 F6 | 	mov	arg01, #0
1bc48     00 16 06 F6 | 	mov	arg03, #0
1bc4c     60 C5 B0 FD | 	call	#__system___basic_print_string
1bc50     00 28 06 F6 | 	mov	local02, #0
1bc54     4A 00 00 FF 
1bc58     94 E4 05 F1 | 	add	objptr, ##38036
1bc5c     F2 12 02 FB | 	rdlong	arg01, objptr
1bc60     4A 00 00 FF 
1bc64     94 E4 85 F1 | 	sub	objptr, ##38036
1bc68     BD 01 00 FF 
1bc6c     C7 15 06 F6 | 	mov	arg02, ##@LR__6042
1bc70     A0 B8 B0 FD | 	call	#__system___string_concat
1bc74     FD 12 02 F6 | 	mov	arg01, result1
1bc78     52 00 00 FF 
1bc7c     FC E4 05 F1 | 	add	objptr, ##42236
1bc80     F2 14 02 FB | 	rdlong	arg02, objptr
1bc84     52 00 00 FF 
1bc88     FC E4 85 F1 | 	sub	objptr, ##42236
1bc8c     84 B8 B0 FD | 	call	#__system___string_concat
1bc90     FD 14 02 F6 | 	mov	arg02, result1
1bc94     14 13 02 F6 | 	mov	arg01, local02
1bc98     00 16 06 F6 | 	mov	arg03, #0
1bc9c     10 C5 B0 FD | 	call	#__system___basic_print_string
1bca0     00 12 06 F6 | 	mov	arg01, #0
1bca4     0A 14 06 F6 | 	mov	arg02, #10
1bca8     00 16 06 F6 | 	mov	arg03, #0
1bcac     A8 C4 B0 FD | 	call	#__system___basic_print_char
1bcb0     00 12 06 F6 | 	mov	arg01, #0
1bcb4     A4 14 B1 FD | 	call	#__system___getiolock_0616
1bcb8     FD 00 68 FC | 	wrlong	#0, result1
1bcbc                 | LR__2187
1bcbc                 | LR__2188
1bcbc     A7 F0 03 F6 | 	mov	ptra, fp
1bcc0     B2 00 A0 FD | 	call	#popregs_
1bcc4                 | _do_save_ret
1bcc4     2D 00 64 FD | 	ret
1bcc8                 | 
1bcc8                 | ' 
1bcc8                 | ' ' ------------------ setcolor
1bcc8                 | ' 
1bcc8                 | ' sub do_setcolor
1bcc8                 | _do_setcolor
1bcc8     00 4A 05 F6 | 	mov	COUNT_, #0
1bccc     A8 00 A0 FD | 	call	#pushregs_
1bcd0     20 F0 07 F1 | 	add	ptra, #32
1bcd4     4A 00 00 FF 
1bcd8     80 E4 05 F1 | 	add	objptr, ##38016
1bcdc     F2 18 02 FB | 	rdlong	arg04, objptr
1bce0     0C 17 02 F6 | 	mov	arg03, arg04
1bce4     01 16 66 F0 | 	shl	arg03, #1
1bce8     0C 17 02 F1 | 	add	arg03, arg04
1bcec     02 16 66 F0 | 	shl	arg03, #2
1bcf0     03 00 00 FF 
1bcf4     04 E4 85 F1 | 	sub	objptr, ##1540
1bcf8     F2 16 02 F1 | 	add	arg03, objptr
1bcfc     0B 19 02 FB | 	rdlong	arg04, arg03
1bd00     1C 4E 05 F1 | 	add	fp, #28
1bd04     A7 18 62 FC | 	wrlong	arg04, fp
1bd08                 | ' 
1bd08                 | ' numpar=compiledline(lineptr_e).result.uresult
1bd08                 | ' 
1bd08                 | ' if numpar=4 then
1bd08     1C 4E 85 F1 | 	sub	fp, #28
1bd0c     04 18 0E F2 | 	cmp	arg04, #4 wz
1bd10     47 00 00 FF 
1bd14     7C E4 85 F1 | 	sub	objptr, ##36476
1bd18     E0 00 90 5D |  if_ne	jmp	#LR__2190
1bd1c     8C 1A BF FD | 	call	#_pop
1bd20     FF 18 02 F6 | 	mov	arg04, result3
1bd24     A7 FA 61 FC | 	wrlong	result1, fp
1bd28     04 4E 05 F1 | 	add	fp, #4
1bd2c     A7 FC 61 FC | 	wrlong	result2, fp
1bd30     04 4E 05 F1 | 	add	fp, #4
1bd34     A7 18 62 FC | 	wrlong	arg04, fp
1bd38     08 4E 85 F1 | 	sub	fp, #8
1bd3c     A7 12 02 F6 | 	mov	arg01, fp
1bd40     4C 1C BF FD | 	call	#_converttoint
1bd44     FD 18 02 F6 | 	mov	arg04, result1
1bd48     14 4E 05 F1 | 	add	fp, #20
1bd4c     A7 18 62 FC | 	wrlong	arg04, fp
1bd50     14 4E 85 F1 | 	sub	fp, #20
1bd54     54 1A BF FD | 	call	#_pop
1bd58     FF 18 02 F6 | 	mov	arg04, result3
1bd5c     A7 FA 61 FC | 	wrlong	result1, fp
1bd60     04 4E 05 F1 | 	add	fp, #4
1bd64     A7 FC 61 FC | 	wrlong	result2, fp
1bd68     04 4E 05 F1 | 	add	fp, #4
1bd6c     A7 18 62 FC | 	wrlong	arg04, fp
1bd70     08 4E 85 F1 | 	sub	fp, #8
1bd74     A7 12 02 F6 | 	mov	arg01, fp
1bd78     14 1C BF FD | 	call	#_converttoint
1bd7c     FD 18 02 F6 | 	mov	arg04, result1
1bd80     10 4E 05 F1 | 	add	fp, #16
1bd84     A7 18 62 FC | 	wrlong	arg04, fp
1bd88     10 4E 85 F1 | 	sub	fp, #16
1bd8c     1C 1A BF FD | 	call	#_pop
1bd90     FF 18 02 F6 | 	mov	arg04, result3
1bd94     A7 FA 61 FC | 	wrlong	result1, fp
1bd98     04 4E 05 F1 | 	add	fp, #4
1bd9c     A7 FC 61 FC | 	wrlong	result2, fp
1bda0     04 4E 05 F1 | 	add	fp, #4
1bda4     A7 18 62 FC | 	wrlong	arg04, fp
1bda8     08 4E 85 F1 | 	sub	fp, #8
1bdac     A7 12 02 F6 | 	mov	arg01, fp
1bdb0     DC 1B BF FD | 	call	#_converttoint
1bdb4     FD 18 02 F6 | 	mov	arg04, result1
1bdb8     0C 4E 05 F1 | 	add	fp, #12
1bdbc     A7 18 62 FC | 	wrlong	arg04, fp
1bdc0     0C 4E 85 F1 | 	sub	fp, #12
1bdc4     E4 19 BF FD | 	call	#_pop
1bdc8     FF 18 02 F6 | 	mov	arg04, result3
1bdcc     A7 FA 61 FC | 	wrlong	result1, fp
1bdd0     04 4E 05 F1 | 	add	fp, #4
1bdd4     A7 FC 61 FC | 	wrlong	result2, fp
1bdd8     04 4E 05 F1 | 	add	fp, #4
1bddc     A7 18 62 FC | 	wrlong	arg04, fp
1bde0     08 4E 85 F1 | 	sub	fp, #8
1bde4     A7 12 02 F6 | 	mov	arg01, fp
1bde8     A4 1B BF FD | 	call	#_converttoint
1bdec     18 4E 05 F1 | 	add	fp, #24
1bdf0     A7 FA 61 FC | 	wrlong	result1, fp
1bdf4     18 4E 85 F1 | 	sub	fp, #24
1bdf8     04 01 90 FD | 	jmp	#LR__2193
1bdfc                 | LR__2190
1bdfc     1C 4E 05 F1 | 	add	fp, #28
1be00     A7 18 02 FB | 	rdlong	arg04, fp
1be04     1C 4E 85 F1 | 	sub	fp, #28
1be08     02 18 0E F2 | 	cmp	arg04, #2 wz
1be0c     A0 00 90 5D |  if_ne	jmp	#LR__2191
1be10     98 19 BF FD | 	call	#_pop
1be14     FF 18 02 F6 | 	mov	arg04, result3
1be18     A7 FA 61 FC | 	wrlong	result1, fp
1be1c     04 4E 05 F1 | 	add	fp, #4
1be20     A7 FC 61 FC | 	wrlong	result2, fp
1be24     04 4E 05 F1 | 	add	fp, #4
1be28     A7 18 62 FC | 	wrlong	arg04, fp
1be2c     08 4E 85 F1 | 	sub	fp, #8
1be30     A7 12 02 F6 | 	mov	arg01, fp
1be34     58 1B BF FD | 	call	#_converttoint
1be38     18 4E 05 F1 | 	add	fp, #24
1be3c     A7 FA 61 FC | 	wrlong	result1, fp
1be40     FD FA E1 F8 | 	getbyte	result1, result1, #0
1be44     04 4E 85 F1 | 	sub	fp, #4
1be48     A7 FA 61 FC | 	wrlong	result1, fp
1be4c     04 4E 05 F1 | 	add	fp, #4
1be50     A7 18 02 FB | 	rdlong	arg04, fp
1be54     0C 19 EA F8 | 	getbyte	arg04, arg04, #1
1be58     08 4E 85 F1 | 	sub	fp, #8
1be5c     A7 18 62 FC | 	wrlong	arg04, fp
1be60     08 4E 05 F1 | 	add	fp, #8
1be64     A7 18 02 FB | 	rdlong	arg04, fp
1be68     0C 19 F2 F8 | 	getbyte	arg04, arg04, #2
1be6c     0C 4E 85 F1 | 	sub	fp, #12
1be70     A7 18 62 FC | 	wrlong	arg04, fp
1be74     0C 4E 85 F1 | 	sub	fp, #12
1be78     30 19 BF FD | 	call	#_pop
1be7c     FF 18 02 F6 | 	mov	arg04, result3
1be80     A7 FA 61 FC | 	wrlong	result1, fp
1be84     04 4E 05 F1 | 	add	fp, #4
1be88     A7 FC 61 FC | 	wrlong	result2, fp
1be8c     04 4E 05 F1 | 	add	fp, #4
1be90     A7 18 62 FC | 	wrlong	arg04, fp
1be94     08 4E 85 F1 | 	sub	fp, #8
1be98     A7 12 02 F6 | 	mov	arg01, fp
1be9c     F0 1A BF FD | 	call	#_converttoint
1bea0     18 4E 05 F1 | 	add	fp, #24
1bea4     A7 FA 61 FC | 	wrlong	result1, fp
1bea8     18 4E 85 F1 | 	sub	fp, #24
1beac     50 00 90 FD | 	jmp	#LR__2192
1beb0                 | LR__2191
1beb0                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1beb0     00 12 06 F6 | 	mov	arg01, #0
1beb4     A4 12 B1 FD | 	call	#__system___getiolock_0616
1beb8     FD 12 02 F6 | 	mov	arg01, result1
1bebc     F8 B5 B0 FD | 	call	#__system___lockmem
1bec0     BD 01 00 FF 
1bec4     C9 15 06 F6 | 	mov	arg02, ##@LR__6043
1bec8     00 12 06 F6 | 	mov	arg01, #0
1becc     00 16 06 F6 | 	mov	arg03, #0
1bed0     DC C2 B0 FD | 	call	#__system___basic_print_string
1bed4     00 12 06 F6 | 	mov	arg01, #0
1bed8     80 12 B1 FD | 	call	#__system___getiolock_0616
1bedc     FD 00 68 FC | 	wrlong	#0, result1
1bee0     50 00 00 FF 
1bee4     F0 E4 05 F1 | 	add	objptr, ##41200
1bee8     F2 14 02 FB | 	rdlong	arg02, objptr
1beec     50 00 00 FF 
1bef0     F0 E4 85 F1 | 	sub	objptr, ##41200
1bef4     27 12 06 F6 | 	mov	arg01, #39
1bef8     A4 7B B0 FD | 	call	#_printerror
1befc     28 00 90 FD | 	jmp	#LR__2194
1bf00                 | LR__2192
1bf00                 | LR__2193
1bf00     18 4E 05 F1 | 	add	fp, #24
1bf04     A7 12 02 FB | 	rdlong	arg01, fp
1bf08     0C 4E 85 F1 | 	sub	fp, #12
1bf0c     A7 14 02 FB | 	rdlong	arg02, fp
1bf10     04 4E 05 F1 | 	add	fp, #4
1bf14     A7 16 02 FB | 	rdlong	arg03, fp
1bf18     04 4E 05 F1 | 	add	fp, #4
1bf1c     A7 18 02 FB | 	rdlong	arg04, fp
1bf20     14 4E 85 F1 | 	sub	fp, #20
1bf24     04 99 B0 FD | 	call	#_hg010b_spin2_setcolor
1bf28                 | LR__2194
1bf28     A7 F0 03 F6 | 	mov	ptra, fp
1bf2c     B2 00 A0 FD | 	call	#popregs_
1bf30                 | _do_setcolor_ret
1bf30     2D 00 64 FD | 	ret
1bf34                 | 
1bf34                 | ' 
1bf34                 | ' ' ------------------ setdelay
1bf34                 | ' 
1bf34                 | ' sub do_setdelay
1bf34                 | _do_setdelay
1bf34     02 4A 05 F6 | 	mov	COUNT_, #2
1bf38     A8 00 A0 FD | 	call	#pushregs_
1bf3c     18 F0 07 F1 | 	add	ptra, #24
1bf40     68 18 BF FD | 	call	#_pop
1bf44     FD 12 02 F6 | 	mov	arg01, result1
1bf48     FE 26 02 F6 | 	mov	local01, result2
1bf4c     FF 28 02 F6 | 	mov	local02, result3
1bf50     A7 12 62 FC | 	wrlong	arg01, fp
1bf54     04 4E 05 F1 | 	add	fp, #4
1bf58     A7 26 62 FC | 	wrlong	local01, fp
1bf5c     04 4E 05 F1 | 	add	fp, #4
1bf60     A7 28 62 FC | 	wrlong	local02, fp
1bf64     08 4E 85 F1 | 	sub	fp, #8
1bf68     40 18 BF FD | 	call	#_pop
1bf6c     FD 28 02 F6 | 	mov	local02, result1
1bf70     0C 4E 05 F1 | 	add	fp, #12
1bf74     A7 28 62 FC | 	wrlong	local02, fp
1bf78     04 4E 05 F1 | 	add	fp, #4
1bf7c     A7 FC 61 FC | 	wrlong	result2, fp
1bf80     04 4E 05 F1 | 	add	fp, #4
1bf84     A7 FE 61 FC | 	wrlong	result3, fp
1bf88     08 4E 85 F1 | 	sub	fp, #8
1bf8c     A7 12 02 F6 | 	mov	arg01, fp
1bf90     0C 4E 85 F1 | 	sub	fp, #12
1bf94     F8 19 BF FD | 	call	#_converttoint
1bf98     FD 28 02 F6 | 	mov	local02, result1
1bf9c     14 27 02 F6 | 	mov	local01, local02
1bfa0     01 26 66 F0 | 	shl	local01, #1
1bfa4     14 27 02 F1 | 	add	local01, local02
1bfa8     03 26 66 F0 | 	shl	local01, #3
1bfac     14 00 00 FF 
1bfb0     38 E5 05 F1 | 	add	objptr, ##10552
1bfb4     F2 26 02 F1 | 	add	local01, objptr
1bfb8     A7 12 02 F6 | 	mov	arg01, fp
1bfbc     14 00 00 FF 
1bfc0     38 E5 85 F1 | 	sub	objptr, ##10552
1bfc4     C8 19 BF FD | 	call	#_converttoint
1bfc8     06 26 06 F1 | 	add	local01, #6
1bfcc     13 FB 51 FC | 	wrword	result1, local01
1bfd0     A7 F0 03 F6 | 	mov	ptra, fp
1bfd4     B2 00 A0 FD | 	call	#popregs_
1bfd8                 | _do_setdelay_ret
1bfd8     2D 00 64 FD | 	ret
1bfdc                 | 
1bfdc                 | ' 
1bfdc                 | ' ' ------------------ setenv
1bfdc                 | ' 
1bfdc                 | ' sub do_setenv
1bfdc                 | _do_setenv
1bfdc     02 4A 05 F6 | 	mov	COUNT_, #2
1bfe0     A8 00 A0 FD | 	call	#pushregs_
1bfe4     18 F0 07 F1 | 	add	ptra, #24
1bfe8     C0 17 BF FD | 	call	#_pop
1bfec     FD 12 02 F6 | 	mov	arg01, result1
1bff0     FE 26 02 F6 | 	mov	local01, result2
1bff4     FF 28 02 F6 | 	mov	local02, result3
1bff8     A7 12 62 FC | 	wrlong	arg01, fp
1bffc     04 4E 05 F1 | 	add	fp, #4
1c000     A7 26 62 FC | 	wrlong	local01, fp
1c004     04 4E 05 F1 | 	add	fp, #4
1c008     A7 28 62 FC | 	wrlong	local02, fp
1c00c     08 4E 85 F1 | 	sub	fp, #8
1c010     98 17 BF FD | 	call	#_pop
1c014     FD 28 02 F6 | 	mov	local02, result1
1c018     0C 4E 05 F1 | 	add	fp, #12
1c01c     A7 28 62 FC | 	wrlong	local02, fp
1c020     04 4E 05 F1 | 	add	fp, #4
1c024     A7 FC 61 FC | 	wrlong	result2, fp
1c028     04 4E 05 F1 | 	add	fp, #4
1c02c     A7 FE 61 FC | 	wrlong	result3, fp
1c030     08 4E 85 F1 | 	sub	fp, #8
1c034     A7 12 02 F6 | 	mov	arg01, fp
1c038     0C 4E 85 F1 | 	sub	fp, #12
1c03c     50 19 BF FD | 	call	#_converttoint
1c040     FD 28 02 F6 | 	mov	local02, result1
1c044     14 27 02 F6 | 	mov	local01, local02
1c048     01 26 66 F0 | 	shl	local01, #1
1c04c     14 27 02 F1 | 	add	local01, local02
1c050     03 26 66 F0 | 	shl	local01, #3
1c054     14 00 00 FF 
1c058     38 E5 05 F1 | 	add	objptr, ##10552
1c05c     F2 26 02 F1 | 	add	local01, objptr
1c060     A7 12 02 F6 | 	mov	arg01, fp
1c064     14 00 00 FF 
1c068     38 E5 85 F1 | 	sub	objptr, ##10552
1c06c     20 19 BF FD | 	call	#_converttoint
1c070     05 26 06 F1 | 	add	local01, #5
1c074     13 FB 41 FC | 	wrbyte	result1, local01
1c078     A7 F0 03 F6 | 	mov	ptra, fp
1c07c     B2 00 A0 FD | 	call	#popregs_
1c080                 | _do_setenv_ret
1c080     2D 00 64 FD | 	ret
1c084                 | 
1c084                 | ' 
1c084                 | ' ' ------------------ setlen
1c084                 | ' 
1c084                 | ' sub do_setlen
1c084                 | _do_setlen
1c084     02 4A 05 F6 | 	mov	COUNT_, #2
1c088     A8 00 A0 FD | 	call	#pushregs_
1c08c     18 F0 07 F1 | 	add	ptra, #24
1c090     18 17 BF FD | 	call	#_pop
1c094     FD 12 02 F6 | 	mov	arg01, result1
1c098     FE 26 02 F6 | 	mov	local01, result2
1c09c     FF 28 02 F6 | 	mov	local02, result3
1c0a0     A7 12 62 FC | 	wrlong	arg01, fp
1c0a4     04 4E 05 F1 | 	add	fp, #4
1c0a8     A7 26 62 FC | 	wrlong	local01, fp
1c0ac     04 4E 05 F1 | 	add	fp, #4
1c0b0     A7 28 62 FC | 	wrlong	local02, fp
1c0b4     08 4E 85 F1 | 	sub	fp, #8
1c0b8     F0 16 BF FD | 	call	#_pop
1c0bc     FD 28 02 F6 | 	mov	local02, result1
1c0c0     0C 4E 05 F1 | 	add	fp, #12
1c0c4     A7 28 62 FC | 	wrlong	local02, fp
1c0c8     04 4E 05 F1 | 	add	fp, #4
1c0cc     A7 FC 61 FC | 	wrlong	result2, fp
1c0d0     04 4E 05 F1 | 	add	fp, #4
1c0d4     A7 FE 61 FC | 	wrlong	result3, fp
1c0d8     08 4E 85 F1 | 	sub	fp, #8
1c0dc     A7 12 02 F6 | 	mov	arg01, fp
1c0e0     0C 4E 85 F1 | 	sub	fp, #12
1c0e4     A8 18 BF FD | 	call	#_converttoint
1c0e8     FD 28 02 F6 | 	mov	local02, result1
1c0ec     14 27 02 F6 | 	mov	local01, local02
1c0f0     01 26 66 F0 | 	shl	local01, #1
1c0f4     14 27 02 F1 | 	add	local01, local02
1c0f8     03 26 66 F0 | 	shl	local01, #3
1c0fc     14 00 00 FF 
1c100     38 E5 05 F1 | 	add	objptr, ##10552
1c104     F2 26 02 F1 | 	add	local01, objptr
1c108     A7 12 02 F6 | 	mov	arg01, fp
1c10c     14 00 00 FF 
1c110     38 E5 85 F1 | 	sub	objptr, ##10552
1c114     34 19 BF FD | 	call	#_converttofloat
1c118     08 26 06 F1 | 	add	local01, #8
1c11c     13 FB 61 FC | 	wrlong	result1, local01
1c120     A7 F0 03 F6 | 	mov	ptra, fp
1c124     B2 00 A0 FD | 	call	#popregs_
1c128                 | _do_setlen_ret
1c128     2D 00 64 FD | 	ret
1c12c                 | 
1c12c                 | ' 
1c12c                 | ' ' ------------------ setpan
1c12c                 | ' 
1c12c                 | ' sub do_setpan
1c12c                 | _do_setpan
1c12c     02 4A 05 F6 | 	mov	COUNT_, #2
1c130     A8 00 A0 FD | 	call	#pushregs_
1c134     18 F0 07 F1 | 	add	ptra, #24
1c138     70 16 BF FD | 	call	#_pop
1c13c     FD 12 02 F6 | 	mov	arg01, result1
1c140     FE 26 02 F6 | 	mov	local01, result2
1c144     FF 28 02 F6 | 	mov	local02, result3
1c148     A7 12 62 FC | 	wrlong	arg01, fp
1c14c     04 4E 05 F1 | 	add	fp, #4
1c150     A7 26 62 FC | 	wrlong	local01, fp
1c154     04 4E 05 F1 | 	add	fp, #4
1c158     A7 28 62 FC | 	wrlong	local02, fp
1c15c     08 4E 85 F1 | 	sub	fp, #8
1c160     48 16 BF FD | 	call	#_pop
1c164     FD 28 02 F6 | 	mov	local02, result1
1c168     0C 4E 05 F1 | 	add	fp, #12
1c16c     A7 28 62 FC | 	wrlong	local02, fp
1c170     04 4E 05 F1 | 	add	fp, #4
1c174     A7 FC 61 FC | 	wrlong	result2, fp
1c178     04 4E 05 F1 | 	add	fp, #4
1c17c     A7 FE 61 FC | 	wrlong	result3, fp
1c180     08 4E 85 F1 | 	sub	fp, #8
1c184     A7 12 02 F6 | 	mov	arg01, fp
1c188     0C 4E 85 F1 | 	sub	fp, #12
1c18c     00 18 BF FD | 	call	#_converttoint
1c190     FD 28 02 F6 | 	mov	local02, result1
1c194     14 27 02 F6 | 	mov	local01, local02
1c198     01 26 66 F0 | 	shl	local01, #1
1c19c     14 27 02 F1 | 	add	local01, local02
1c1a0     03 26 66 F0 | 	shl	local01, #3
1c1a4     14 00 00 FF 
1c1a8     38 E5 05 F1 | 	add	objptr, ##10552
1c1ac     F2 26 02 F1 | 	add	local01, objptr
1c1b0     A7 12 02 F6 | 	mov	arg01, fp
1c1b4     14 00 00 FF 
1c1b8     38 E5 85 F1 | 	sub	objptr, ##10552
1c1bc     8C 18 BF FD | 	call	#_converttofloat
1c1c0     10 26 06 F1 | 	add	local01, #16
1c1c4     13 FB 61 FC | 	wrlong	result1, local01
1c1c8     A7 F0 03 F6 | 	mov	ptra, fp
1c1cc     B2 00 A0 FD | 	call	#popregs_
1c1d0                 | _do_setpan_ret
1c1d0     2D 00 64 FD | 	ret
1c1d4                 | 
1c1d4                 | ' 
1c1d4                 | ' ' ------------------ setsustain
1c1d4                 | ' 
1c1d4                 | ' sub do_setsustain
1c1d4                 | _do_setsustain
1c1d4     02 4A 05 F6 | 	mov	COUNT_, #2
1c1d8     A8 00 A0 FD | 	call	#pushregs_
1c1dc     18 F0 07 F1 | 	add	ptra, #24
1c1e0     C8 15 BF FD | 	call	#_pop
1c1e4     FD 12 02 F6 | 	mov	arg01, result1
1c1e8     FE 26 02 F6 | 	mov	local01, result2
1c1ec     FF 28 02 F6 | 	mov	local02, result3
1c1f0     A7 12 62 FC | 	wrlong	arg01, fp
1c1f4     04 4E 05 F1 | 	add	fp, #4
1c1f8     A7 26 62 FC | 	wrlong	local01, fp
1c1fc     04 4E 05 F1 | 	add	fp, #4
1c200     A7 28 62 FC | 	wrlong	local02, fp
1c204     08 4E 85 F1 | 	sub	fp, #8
1c208     A0 15 BF FD | 	call	#_pop
1c20c     FD 28 02 F6 | 	mov	local02, result1
1c210     0C 4E 05 F1 | 	add	fp, #12
1c214     A7 28 62 FC | 	wrlong	local02, fp
1c218     04 4E 05 F1 | 	add	fp, #4
1c21c     A7 FC 61 FC | 	wrlong	result2, fp
1c220     04 4E 05 F1 | 	add	fp, #4
1c224     A7 FE 61 FC | 	wrlong	result3, fp
1c228     08 4E 85 F1 | 	sub	fp, #8
1c22c     A7 12 02 F6 | 	mov	arg01, fp
1c230     0C 4E 85 F1 | 	sub	fp, #12
1c234     58 17 BF FD | 	call	#_converttoint
1c238     FD 28 02 F6 | 	mov	local02, result1
1c23c     14 27 02 F6 | 	mov	local01, local02
1c240     01 26 66 F0 | 	shl	local01, #1
1c244     14 27 02 F1 | 	add	local01, local02
1c248     03 26 66 F0 | 	shl	local01, #3
1c24c     14 00 00 FF 
1c250     38 E5 05 F1 | 	add	objptr, ##10552
1c254     F2 26 02 F1 | 	add	local01, objptr
1c258     A7 12 02 F6 | 	mov	arg01, fp
1c25c     14 00 00 FF 
1c260     38 E5 85 F1 | 	sub	objptr, ##10552
1c264     28 17 BF FD | 	call	#_converttoint
1c268     14 26 06 F1 | 	add	local01, #20
1c26c     13 FB 51 FC | 	wrword	result1, local01
1c270     A7 F0 03 F6 | 	mov	ptra, fp
1c274     B2 00 A0 FD | 	call	#popregs_
1c278                 | _do_setsustain_ret
1c278     2D 00 64 FD | 	ret
1c27c                 | 
1c27c                 | ' 
1c27c                 | ' ' ------------------ setvol
1c27c                 | ' 
1c27c                 | ' sub do_setvol
1c27c                 | _do_setvol
1c27c     02 4A 05 F6 | 	mov	COUNT_, #2
1c280     A8 00 A0 FD | 	call	#pushregs_
1c284     18 F0 07 F1 | 	add	ptra, #24
1c288     20 15 BF FD | 	call	#_pop
1c28c     FD 12 02 F6 | 	mov	arg01, result1
1c290     FE 26 02 F6 | 	mov	local01, result2
1c294     FF 28 02 F6 | 	mov	local02, result3
1c298     A7 12 62 FC | 	wrlong	arg01, fp
1c29c     04 4E 05 F1 | 	add	fp, #4
1c2a0     A7 26 62 FC | 	wrlong	local01, fp
1c2a4     04 4E 05 F1 | 	add	fp, #4
1c2a8     A7 28 62 FC | 	wrlong	local02, fp
1c2ac     08 4E 85 F1 | 	sub	fp, #8
1c2b0     F8 14 BF FD | 	call	#_pop
1c2b4     FD 28 02 F6 | 	mov	local02, result1
1c2b8     0C 4E 05 F1 | 	add	fp, #12
1c2bc     A7 28 62 FC | 	wrlong	local02, fp
1c2c0     04 4E 05 F1 | 	add	fp, #4
1c2c4     A7 FC 61 FC | 	wrlong	result2, fp
1c2c8     04 4E 05 F1 | 	add	fp, #4
1c2cc     A7 FE 61 FC | 	wrlong	result3, fp
1c2d0     08 4E 85 F1 | 	sub	fp, #8
1c2d4     A7 12 02 F6 | 	mov	arg01, fp
1c2d8     0C 4E 85 F1 | 	sub	fp, #12
1c2dc     B0 16 BF FD | 	call	#_converttoint
1c2e0     FD 28 02 F6 | 	mov	local02, result1
1c2e4     14 27 02 F6 | 	mov	local01, local02
1c2e8     01 26 66 F0 | 	shl	local01, #1
1c2ec     14 27 02 F1 | 	add	local01, local02
1c2f0     03 26 66 F0 | 	shl	local01, #3
1c2f4     14 00 00 FF 
1c2f8     38 E5 05 F1 | 	add	objptr, ##10552
1c2fc     F2 26 02 F1 | 	add	local01, objptr
1c300     A7 12 02 F6 | 	mov	arg01, fp
1c304     14 00 00 FF 
1c308     38 E5 85 F1 | 	sub	objptr, ##10552
1c30c     3C 17 BF FD | 	call	#_converttofloat
1c310     0C 26 06 F1 | 	add	local01, #12
1c314     13 FB 61 FC | 	wrlong	result1, local01
1c318     A7 F0 03 F6 | 	mov	ptra, fp
1c31c     B2 00 A0 FD | 	call	#popregs_
1c320                 | _do_setvol_ret
1c320     2D 00 64 FD | 	ret
1c324                 | 
1c324                 | ' 
1c324                 | ' ' ------------------ setwave
1c324                 | ' 
1c324                 | ' sub do_setwave
1c324                 | _do_setwave
1c324     02 4A 05 F6 | 	mov	COUNT_, #2
1c328     A8 00 A0 FD | 	call	#pushregs_
1c32c     18 F0 07 F1 | 	add	ptra, #24
1c330     78 14 BF FD | 	call	#_pop
1c334     FD 12 02 F6 | 	mov	arg01, result1
1c338     FE 26 02 F6 | 	mov	local01, result2
1c33c     FF 28 02 F6 | 	mov	local02, result3
1c340     A7 12 62 FC | 	wrlong	arg01, fp
1c344     04 4E 05 F1 | 	add	fp, #4
1c348     A7 26 62 FC | 	wrlong	local01, fp
1c34c     04 4E 05 F1 | 	add	fp, #4
1c350     A7 28 62 FC | 	wrlong	local02, fp
1c354     08 4E 85 F1 | 	sub	fp, #8
1c358     50 14 BF FD | 	call	#_pop
1c35c     FD 28 02 F6 | 	mov	local02, result1
1c360     0C 4E 05 F1 | 	add	fp, #12
1c364     A7 28 62 FC | 	wrlong	local02, fp
1c368     04 4E 05 F1 | 	add	fp, #4
1c36c     A7 FC 61 FC | 	wrlong	result2, fp
1c370     04 4E 05 F1 | 	add	fp, #4
1c374     A7 FE 61 FC | 	wrlong	result3, fp
1c378     08 4E 85 F1 | 	sub	fp, #8
1c37c     A7 12 02 F6 | 	mov	arg01, fp
1c380     0C 4E 85 F1 | 	sub	fp, #12
1c384     08 16 BF FD | 	call	#_converttoint
1c388     FD 28 02 F6 | 	mov	local02, result1
1c38c     14 27 02 F6 | 	mov	local01, local02
1c390     01 26 66 F0 | 	shl	local01, #1
1c394     14 27 02 F1 | 	add	local01, local02
1c398     03 26 66 F0 | 	shl	local01, #3
1c39c     14 00 00 FF 
1c3a0     38 E5 05 F1 | 	add	objptr, ##10552
1c3a4     F2 26 02 F1 | 	add	local01, objptr
1c3a8     A7 12 02 F6 | 	mov	arg01, fp
1c3ac     14 00 00 FF 
1c3b0     38 E5 85 F1 | 	sub	objptr, ##10552
1c3b4     D8 15 BF FD | 	call	#_converttoint
1c3b8     04 26 06 F1 | 	add	local01, #4
1c3bc     13 FB 41 FC | 	wrbyte	result1, local01
1c3c0     A7 F0 03 F6 | 	mov	ptra, fp
1c3c4     B2 00 A0 FD | 	call	#popregs_
1c3c8                 | _do_setwave_ret
1c3c8     2D 00 64 FD | 	ret
1c3cc                 | 
1c3cc                 | ' 
1c3cc                 | ' ' ------------------ shutup
1c3cc                 | ' 
1c3cc                 | ' sub do_shutup
1c3cc                 | _do_shutup
1c3cc     03 4A 05 F6 | 	mov	COUNT_, #3
1c3d0     A8 00 A0 FD | 	call	#pushregs_
1c3d4     18 F0 07 F1 | 	add	ptra, #24
1c3d8     4A 00 00 FF 
1c3dc     80 E4 05 F1 | 	add	objptr, ##38016
1c3e0     F2 26 02 FB | 	rdlong	local01, objptr
1c3e4     13 29 02 F6 | 	mov	local02, local01
1c3e8     01 28 66 F0 | 	shl	local02, #1
1c3ec     13 29 02 F1 | 	add	local02, local01
1c3f0     02 28 66 F0 | 	shl	local02, #2
1c3f4     03 00 00 FF 
1c3f8     04 E4 85 F1 | 	sub	objptr, ##1540
1c3fc     F2 28 02 F1 | 	add	local02, objptr
1c400     14 2B 0A FB | 	rdlong	local03, local02 wz
1c404     14 4E 05 F1 | 	add	fp, #20
1c408     A7 2A 62 FC | 	wrlong	local03, fp
1c40c                 | ' 
1c40c                 | ' numpar=compiledline(lineptr_e).result.uresult
1c40c                 | ' if numpar=0 then
1c40c     14 4E 85 F1 | 	sub	fp, #20
1c410     47 00 00 FF 
1c414     7C E4 85 F1 | 	sub	objptr, ##36476
1c418     50 00 90 5D |  if_ne	jmp	#LR__2202
1c41c                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1c41c     10 4E 05 F1 | 	add	fp, #16
1c420     A7 00 68 FC | 	wrlong	#0, fp
1c424     37 00 00 FF 
1c428     10 E4 05 F1 | 	add	objptr, ##28176
1c42c     97 16 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1c430                 | LR__2200
1c430     F2 12 02 FB | 	rdlong	arg01, objptr
1c434     A7 2A 02 FB | 	rdlong	local03, fp
1c438     06 2A 66 F0 | 	shl	local03, #6
1c43c     15 13 02 F1 | 	add	arg01, local03
1c440     14 12 06 F1 | 	add	arg01, #20
1c444     09 01 58 FC | 	wrword	#0, arg01
1c448     A7 2A 02 FB | 	rdlong	local03, fp
1c44c     01 2A 06 F1 | 	add	local03, #1
1c450     A7 2A 62 FC | 	wrlong	local03, fp
1c454     08 2A 56 F2 | 	cmps	local03, #8 wc
1c458     D4 FF 9F CD |  if_b	jmp	#LR__2200
1c45c                 | LR__2201
1c45c     37 00 00 FF 
1c460     10 E4 85 F1 | 	sub	objptr, ##28176
1c464     10 4E 85 F1 | 	sub	fp, #16
1c468     64 00 90 FD | 	jmp	#LR__2203
1c46c                 | LR__2202
1c46c     3C 13 BF FD | 	call	#_pop
1c470     FF 26 02 F6 | 	mov	local01, result3
1c474     A7 FA 61 FC | 	wrlong	result1, fp
1c478     04 4E 05 F1 | 	add	fp, #4
1c47c     A7 FC 61 FC | 	wrlong	result2, fp
1c480     04 4E 05 F1 | 	add	fp, #4
1c484     A7 26 62 FC | 	wrlong	local01, fp
1c488     08 4E 85 F1 | 	sub	fp, #8
1c48c     A7 12 02 F6 | 	mov	arg01, fp
1c490     FC 14 BF FD | 	call	#_converttoint
1c494     FD 2A 52 F6 | 	abs	local03, result1 wc
1c498     07 2A 06 F5 | 	and	local03, #7
1c49c     15 29 82 F6 | 	negc	local02, local03
1c4a0     0C 4E 05 F1 | 	add	fp, #12
1c4a4     A7 28 62 FC | 	wrlong	local02, fp
1c4a8     37 00 00 FF 
1c4ac     10 E4 05 F1 | 	add	objptr, ##28176
1c4b0     F2 12 02 FB | 	rdlong	arg01, objptr
1c4b4     37 00 00 FF 
1c4b8     10 E4 85 F1 | 	sub	objptr, ##28176
1c4bc     0C 4E 85 F1 | 	sub	fp, #12
1c4c0     06 28 66 F0 | 	shl	local02, #6
1c4c4     14 13 02 F1 | 	add	arg01, local02
1c4c8     14 12 06 F1 | 	add	arg01, #20
1c4cc     09 01 58 FC | 	wrword	#0, arg01
1c4d0                 | LR__2203
1c4d0     A7 F0 03 F6 | 	mov	ptra, fp
1c4d4     B2 00 A0 FD | 	call	#popregs_
1c4d8                 | _do_shutup_ret
1c4d8     2D 00 64 FD | 	ret
1c4dc                 | 
1c4dc                 | ' 
1c4dc                 | ' ' ------------------ sin
1c4dc                 | ' 
1c4dc                 | ' sub do_sin
1c4dc                 | _do_sin
1c4dc     01 4A 05 F6 | 	mov	COUNT_, #1
1c4e0     A8 00 A0 FD | 	call	#pushregs_
1c4e4     10 F0 07 F1 | 	add	ptra, #16
1c4e8     4A 00 00 FF 
1c4ec     80 E4 05 F1 | 	add	objptr, ##38016
1c4f0     F2 26 02 FB | 	rdlong	local01, objptr
1c4f4     13 17 02 F6 | 	mov	arg03, local01
1c4f8     01 16 66 F0 | 	shl	arg03, #1
1c4fc     13 17 02 F1 | 	add	arg03, local01
1c500     02 16 66 F0 | 	shl	arg03, #2
1c504     03 00 00 FF 
1c508     04 E4 85 F1 | 	sub	objptr, ##1540
1c50c     F2 16 02 F1 | 	add	arg03, objptr
1c510     0B 17 02 FB | 	rdlong	arg03, arg03
1c514     0C 4E 05 F1 | 	add	fp, #12
1c518     A7 16 62 FC | 	wrlong	arg03, fp
1c51c                 | ' 
1c51c                 | ' numpar=compiledline(lineptr_e).result.uresult
1c51c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1c51c     0C 4E 85 F1 | 	sub	fp, #12
1c520     02 16 16 F2 | 	cmp	arg03, #2 wc
1c524     47 00 00 FF 
1c528     7C E4 85 F1 | 	sub	objptr, ##36476
1c52c     0C 4E 05 C1 |  if_b	add	fp, #12
1c530     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c534     0C 4E 85 C1 |  if_b	sub	fp, #12
1c538     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1c53c     00 12 06 F6 | 	mov	arg01, #0
1c540     18 0C B1 FD | 	call	#__system___getiolock_0616
1c544     FD 12 02 F6 | 	mov	arg01, result1
1c548     6C AF B0 FD | 	call	#__system___lockmem
1c54c     BD 01 00 FF 
1c550     D4 15 06 F6 | 	mov	arg02, ##@LR__6044
1c554     00 12 06 F6 | 	mov	arg01, #0
1c558     00 16 06 F6 | 	mov	arg03, #0
1c55c     50 BC B0 FD | 	call	#__system___basic_print_string
1c560     00 12 06 F6 | 	mov	arg01, #0
1c564     F4 0B B1 FD | 	call	#__system___getiolock_0616
1c568     FD 00 68 FC | 	wrlong	#0, result1
1c56c     27 12 06 F6 | 	mov	arg01, #39
1c570     00 14 06 F6 | 	mov	arg02, #0
1c574     28 75 B0 FD | 	call	#_printerror
1c578     64 00 90 FD | 	jmp	#LR__2211
1c57c                 | LR__2210
1c57c     2C 12 BF FD | 	call	#_pop
1c580     A7 FA 61 FC | 	wrlong	result1, fp
1c584     04 4E 05 F1 | 	add	fp, #4
1c588     A7 FC 61 FC | 	wrlong	result2, fp
1c58c     04 4E 05 F1 | 	add	fp, #4
1c590     A7 FE 61 FC | 	wrlong	result3, fp
1c594     08 4E 85 F1 | 	sub	fp, #8
1c598     52 00 00 FF 
1c59c     E0 E4 05 F1 | 	add	objptr, ##42208
1c5a0     F2 26 02 FB | 	rdlong	local01, objptr
1c5a4     52 00 00 FF 
1c5a8     E0 E4 85 F1 | 	sub	objptr, ##42208
1c5ac     A7 12 02 F6 | 	mov	arg01, fp
1c5b0     98 14 BF FD | 	call	#_converttofloat
1c5b4     FD 14 02 F6 | 	mov	arg02, result1
1c5b8     13 13 02 F6 | 	mov	arg01, local01
1c5bc     74 DD B0 FD | 	call	#__system___float_mul
1c5c0     FD 12 02 F6 | 	mov	arg01, result1
1c5c4     CC E6 B0 FD | 	call	#__system____builtin_sinf
1c5c8     A7 FA 61 FC | 	wrlong	result1, fp
1c5cc     08 4E 05 F1 | 	add	fp, #8
1c5d0     A7 3C 68 FC | 	wrlong	#30, fp
1c5d4     08 4E 85 F1 | 	sub	fp, #8
1c5d8     A7 12 02 F6 | 	mov	arg01, fp
1c5dc     64 12 BF FD | 	call	#_push
1c5e0                 | LR__2211
1c5e0     A7 F0 03 F6 | 	mov	ptra, fp
1c5e4     B2 00 A0 FD | 	call	#popregs_
1c5e8                 | _do_sin_ret
1c5e8     2D 00 64 FD | 	ret
1c5ec                 | 
1c5ec                 | ' 
1c5ec                 | ' ' ------------------ skip
1c5ec                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1c5ec                 | ' 
1c5ec                 | ' sub do_skip
1c5ec                 | _do_skip
1c5ec     4A 00 00 FF 
1c5f0     80 E4 05 F1 | 	add	objptr, ##38016
1c5f4     F2 00 02 FB | 	rdlong	_var01, objptr
1c5f8     00 03 02 F6 | 	mov	_var02, _var01
1c5fc     01 02 66 F0 | 	shl	_var02, #1
1c600     00 03 02 F1 | 	add	_var02, _var01
1c604     02 02 66 F0 | 	shl	_var02, #2
1c608     03 00 00 FF 
1c60c     04 E4 85 F1 | 	sub	objptr, ##1540
1c610     F2 02 02 F1 | 	add	_var02, objptr
1c614     01 03 02 FB | 	rdlong	_var02, _var02
1c618     01 02 86 F1 | 	sub	_var02, #1
1c61c     03 00 00 FF 
1c620     04 E4 05 F1 | 	add	objptr, ##1540
1c624     F2 02 62 FC | 	wrlong	_var02, objptr
1c628     4A 00 00 FF 
1c62c     80 E4 85 F1 | 	sub	objptr, ##38016
1c630                 | _do_skip_ret
1c630     2D 00 64 FD | 	ret
1c634                 | 
1c634                 | ' 
1c634                 | ' ' ------------------ sprite
1c634                 | ' 
1c634                 | ' sub do_sprite
1c634                 | _do_sprite
1c634     00 4A 05 F6 | 	mov	COUNT_, #0
1c638     A8 00 A0 FD | 	call	#pushregs_
1c63c     30 F0 07 F1 | 	add	ptra, #48
1c640     68 11 BF FD | 	call	#_pop
1c644     FD 16 02 F6 | 	mov	arg03, result1
1c648     FE 14 02 F6 | 	mov	arg02, result2
1c64c     FF 12 02 F6 | 	mov	arg01, result3
1c650     18 4E 05 F1 | 	add	fp, #24
1c654     A7 16 62 FC | 	wrlong	arg03, fp
1c658     04 4E 05 F1 | 	add	fp, #4
1c65c     A7 14 62 FC | 	wrlong	arg02, fp
1c660     04 4E 05 F1 | 	add	fp, #4
1c664     A7 12 62 FC | 	wrlong	arg01, fp
1c668     20 4E 85 F1 | 	sub	fp, #32
1c66c     3C 11 BF FD | 	call	#_pop
1c670     FD 16 02 F6 | 	mov	arg03, result1
1c674     FE 14 02 F6 | 	mov	arg02, result2
1c678     FF 12 02 F6 | 	mov	arg01, result3
1c67c     0C 4E 05 F1 | 	add	fp, #12
1c680     A7 16 62 FC | 	wrlong	arg03, fp
1c684     04 4E 05 F1 | 	add	fp, #4
1c688     A7 14 62 FC | 	wrlong	arg02, fp
1c68c     04 4E 05 F1 | 	add	fp, #4
1c690     A7 12 62 FC | 	wrlong	arg01, fp
1c694     14 4E 85 F1 | 	sub	fp, #20
1c698     10 11 BF FD | 	call	#_pop
1c69c     FF 16 02 F6 | 	mov	arg03, result3
1c6a0     A7 FA 61 FC | 	wrlong	result1, fp
1c6a4     04 4E 05 F1 | 	add	fp, #4
1c6a8     A7 FC 61 FC | 	wrlong	result2, fp
1c6ac     04 4E 05 F1 | 	add	fp, #4
1c6b0     A7 16 62 FC | 	wrlong	arg03, fp
1c6b4     08 4E 85 F1 | 	sub	fp, #8
1c6b8     A7 12 02 F6 | 	mov	arg01, fp
1c6bc     D0 12 BF FD | 	call	#_converttoint
1c6c0     24 4E 05 F1 | 	add	fp, #36
1c6c4     A7 FA 61 FC | 	wrlong	result1, fp
1c6c8     18 4E 85 F1 | 	sub	fp, #24
1c6cc     A7 12 02 F6 | 	mov	arg01, fp
1c6d0     0C 4E 85 F1 | 	sub	fp, #12
1c6d4     B8 12 BF FD | 	call	#_converttoint
1c6d8     28 4E 05 F1 | 	add	fp, #40
1c6dc     A7 FA 61 FC | 	wrlong	result1, fp
1c6e0     10 4E 85 F1 | 	sub	fp, #16
1c6e4     A7 12 02 F6 | 	mov	arg01, fp
1c6e8     18 4E 85 F1 | 	sub	fp, #24
1c6ec     A0 12 BF FD | 	call	#_converttoint
1c6f0     2C 4E 05 F1 | 	add	fp, #44
1c6f4     A7 FA 61 FC | 	wrlong	result1, fp
1c6f8     08 4E 85 F1 | 	sub	fp, #8
1c6fc     A7 12 02 FB | 	rdlong	arg01, fp
1c700     04 4E 05 F1 | 	add	fp, #4
1c704     A7 14 02 FB | 	rdlong	arg02, fp
1c708     FD 16 02 F6 | 	mov	arg03, result1
1c70c     28 4E 85 F1 | 	sub	fp, #40
1c710     90 83 B0 FD | 	call	#_hg010b_spin2_setspritepos
1c714     A7 F0 03 F6 | 	mov	ptra, fp
1c718     B2 00 A0 FD | 	call	#popregs_
1c71c                 | _do_sprite_ret
1c71c     2D 00 64 FD | 	ret
1c720                 | 
1c720                 | ' 
1c720                 | ' ' ------------------ sqr
1c720                 | ' 
1c720                 | ' sub do_sqr
1c720                 | _do_sqr
1c720     01 4A 05 F6 | 	mov	COUNT_, #1
1c724     A8 00 A0 FD | 	call	#pushregs_
1c728     10 F0 07 F1 | 	add	ptra, #16
1c72c     4A 00 00 FF 
1c730     80 E4 05 F1 | 	add	objptr, ##38016
1c734     F2 26 02 FB | 	rdlong	local01, objptr
1c738     13 17 02 F6 | 	mov	arg03, local01
1c73c     01 16 66 F0 | 	shl	arg03, #1
1c740     13 17 02 F1 | 	add	arg03, local01
1c744     02 16 66 F0 | 	shl	arg03, #2
1c748     03 00 00 FF 
1c74c     04 E4 85 F1 | 	sub	objptr, ##1540
1c750     F2 16 02 F1 | 	add	arg03, objptr
1c754     0B 17 02 FB | 	rdlong	arg03, arg03
1c758     0C 4E 05 F1 | 	add	fp, #12
1c75c     A7 16 62 FC | 	wrlong	arg03, fp
1c760                 | ' 
1c760                 | ' numpar=compiledline(lineptr_e).result.uresult
1c760                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1c760     0C 4E 85 F1 | 	sub	fp, #12
1c764     02 16 16 F2 | 	cmp	arg03, #2 wc
1c768     47 00 00 FF 
1c76c     7C E4 85 F1 | 	sub	objptr, ##36476
1c770     0C 4E 05 C1 |  if_b	add	fp, #12
1c774     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c778     0C 4E 85 C1 |  if_b	sub	fp, #12
1c77c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1c780     00 12 06 F6 | 	mov	arg01, #0
1c784     D4 09 B1 FD | 	call	#__system___getiolock_0616
1c788     FD 12 02 F6 | 	mov	arg01, result1
1c78c     28 AD B0 FD | 	call	#__system___lockmem
1c790     BD 01 00 FF 
1c794     DA 15 06 F6 | 	mov	arg02, ##@LR__6045
1c798     00 12 06 F6 | 	mov	arg01, #0
1c79c     00 16 06 F6 | 	mov	arg03, #0
1c7a0     0C BA B0 FD | 	call	#__system___basic_print_string
1c7a4     00 12 06 F6 | 	mov	arg01, #0
1c7a8     B0 09 B1 FD | 	call	#__system___getiolock_0616
1c7ac     FD 00 68 FC | 	wrlong	#0, result1
1c7b0     27 12 06 F6 | 	mov	arg01, #39
1c7b4     00 14 06 F6 | 	mov	arg02, #0
1c7b8     E4 72 B0 FD | 	call	#_printerror
1c7bc     48 00 90 FD | 	jmp	#LR__2221
1c7c0                 | LR__2220
1c7c0     E8 0F BF FD | 	call	#_pop
1c7c4     FF 26 02 F6 | 	mov	local01, result3
1c7c8     A7 FA 61 FC | 	wrlong	result1, fp
1c7cc     04 4E 05 F1 | 	add	fp, #4
1c7d0     A7 FC 61 FC | 	wrlong	result2, fp
1c7d4     04 4E 05 F1 | 	add	fp, #4
1c7d8     A7 26 62 FC | 	wrlong	local01, fp
1c7dc     08 4E 85 F1 | 	sub	fp, #8
1c7e0     A7 12 02 F6 | 	mov	arg01, fp
1c7e4     64 12 BF FD | 	call	#_converttofloat
1c7e8     FD 12 02 F6 | 	mov	arg01, result1
1c7ec     6C DA B0 FD | 	call	#__system___float_sqrt
1c7f0     A7 FA 61 FC | 	wrlong	result1, fp
1c7f4     08 4E 05 F1 | 	add	fp, #8
1c7f8     A7 3C 68 FC | 	wrlong	#30, fp
1c7fc     08 4E 85 F1 | 	sub	fp, #8
1c800     A7 12 02 F6 | 	mov	arg01, fp
1c804     3C 10 BF FD | 	call	#_push
1c808                 | LR__2221
1c808     A7 F0 03 F6 | 	mov	ptra, fp
1c80c     B2 00 A0 FD | 	call	#popregs_
1c810                 | _do_sqr_ret
1c810     2D 00 64 FD | 	ret
1c814                 | 
1c814                 | ' 
1c814                 | ' ' ------------------ stick
1c814                 | ' 
1c814                 | ' sub do_stick
1c814                 | _do_stick
1c814     01 4A 05 F6 | 	mov	COUNT_, #1
1c818     A8 00 A0 FD | 	call	#pushregs_
1c81c     10 F0 07 F1 | 	add	ptra, #16
1c820     4A 00 00 FF 
1c824     80 E4 05 F1 | 	add	objptr, ##38016
1c828     F2 26 02 FB | 	rdlong	local01, objptr
1c82c     13 17 02 F6 | 	mov	arg03, local01
1c830     01 16 66 F0 | 	shl	arg03, #1
1c834     13 17 02 F1 | 	add	arg03, local01
1c838     02 16 66 F0 | 	shl	arg03, #2
1c83c     03 00 00 FF 
1c840     04 E4 85 F1 | 	sub	objptr, ##1540
1c844     F2 16 02 F1 | 	add	arg03, objptr
1c848     0B 17 02 FB | 	rdlong	arg03, arg03
1c84c     0C 4E 05 F1 | 	add	fp, #12
1c850     A7 16 62 FC | 	wrlong	arg03, fp
1c854                 | ' 
1c854                 | ' numpar=compiledline(lineptr_e).result.uresult
1c854                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1c854     0C 4E 85 F1 | 	sub	fp, #12
1c858     02 16 16 F2 | 	cmp	arg03, #2 wc
1c85c     47 00 00 FF 
1c860     7C E4 85 F1 | 	sub	objptr, ##36476
1c864     40 00 90 CD |  if_b	jmp	#LR__2230
1c868     00 12 06 F6 | 	mov	arg01, #0
1c86c     EC 08 B1 FD | 	call	#__system___getiolock_0616
1c870     FD 12 02 F6 | 	mov	arg01, result1
1c874     40 AC B0 FD | 	call	#__system___lockmem
1c878     BD 01 00 FF 
1c87c     E0 15 06 F6 | 	mov	arg02, ##@LR__6046
1c880     00 12 06 F6 | 	mov	arg01, #0
1c884     00 16 06 F6 | 	mov	arg03, #0
1c888     24 B9 B0 FD | 	call	#__system___basic_print_string
1c88c     00 12 06 F6 | 	mov	arg01, #0
1c890     C8 08 B1 FD | 	call	#__system___getiolock_0616
1c894     FD 00 68 FC | 	wrlong	#0, result1
1c898     27 12 06 F6 | 	mov	arg01, #39
1c89c     00 14 06 F6 | 	mov	arg02, #0
1c8a0     FC 71 B0 FD | 	call	#_printerror
1c8a4     F0 00 90 FD | 	jmp	#LR__2234
1c8a8                 | LR__2230
1c8a8                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1c8a8     0C 4E 05 F1 | 	add	fp, #12
1c8ac     A7 FE 09 FB | 	rdlong	result3, fp wz
1c8b0     0C 4E 85 F1 | 	sub	fp, #12
1c8b4     30 00 90 5D |  if_ne	jmp	#LR__2231
1c8b8     52 00 00 FF 
1c8bc     54 E4 05 F1 | 	add	objptr, ##42068
1c8c0     F2 26 02 FB | 	rdlong	local01, objptr
1c8c4     52 00 00 FF 
1c8c8     54 E4 85 F1 | 	sub	objptr, ##42068
1c8cc     A7 26 62 FC | 	wrlong	local01, fp
1c8d0     08 4E 05 F1 | 	add	fp, #8
1c8d4     A7 3A 68 FC | 	wrlong	#29, fp
1c8d8     08 4E 85 F1 | 	sub	fp, #8
1c8dc     A7 12 02 F6 | 	mov	arg01, fp
1c8e0     60 0F BF FD | 	call	#_push
1c8e4     B0 00 90 FD | 	jmp	#LR__2234
1c8e8                 | LR__2231
1c8e8     C0 0E BF FD | 	call	#_pop
1c8ec     A7 FA 61 FC | 	wrlong	result1, fp
1c8f0     04 4E 05 F1 | 	add	fp, #4
1c8f4     A7 FC 61 FC | 	wrlong	result2, fp
1c8f8     04 4E 05 F1 | 	add	fp, #4
1c8fc     A7 FE 61 FC | 	wrlong	result3, fp
1c900                 | ' t1=pop()
1c900                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1c900     08 4E 85 F1 | 	sub	fp, #8
1c904     1C FE 0D F2 | 	cmp	result3, #28 wz
1c908     08 4E 05 51 |  if_ne	add	fp, #8
1c90c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c910     08 4E 85 51 |  if_ne	sub	fp, #8
1c914     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1c918     70 00 90 5D |  if_ne	jmp	#LR__2233
1c91c     A7 26 02 FB | 	rdlong	local01, fp
1c920     52 00 00 FF 
1c924     44 E5 05 F1 | 	add	objptr, ##42308
1c928     F2 26 62 FC | 	wrlong	local01, objptr
1c92c                 | '   q=t1.result.uresult
1c92c                 | '   if q<7 then 
1c92c     52 00 00 FF 
1c930     44 E5 85 F1 | 	sub	objptr, ##42308
1c934     07 26 56 F2 | 	cmps	local01, #7 wc
1c938     40 00 90 3D |  if_ae	jmp	#LR__2232
1c93c     52 00 00 FF 
1c940     44 E5 05 F1 | 	add	objptr, ##42308
1c944     F2 26 02 FB | 	rdlong	local01, objptr
1c948     02 26 66 F0 | 	shl	local01, #2
1c94c     F0 E4 85 F1 | 	sub	objptr, #240
1c950     F2 26 02 F1 | 	add	local01, objptr
1c954     13 27 02 FB | 	rdlong	local01, local01
1c958     A7 26 62 FC | 	wrlong	local01, fp
1c95c     08 4E 05 F1 | 	add	fp, #8
1c960     A7 3A 68 FC | 	wrlong	#29, fp
1c964     08 4E 85 F1 | 	sub	fp, #8
1c968     A7 12 02 F6 | 	mov	arg01, fp
1c96c     52 00 00 FF 
1c970     54 E4 85 F1 | 	sub	objptr, ##42068
1c974     CC 0E BF FD | 	call	#_push
1c978                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1c978     1C 00 90 FD | 	jmp	#LR__2234
1c97c                 | LR__2232
1c97c     29 12 06 F6 | 	mov	arg01, #41
1c980     00 14 06 F6 | 	mov	arg02, #0
1c984     18 71 B0 FD | 	call	#_printerror
1c988                 | '      printerror(41) : return
1c988     0C 00 90 FD | 	jmp	#LR__2234
1c98c                 | LR__2233
1c98c     29 12 06 F6 | 	mov	arg01, #41
1c990     00 14 06 F6 | 	mov	arg02, #0
1c994     08 71 B0 FD | 	call	#_printerror
1c998                 | LR__2234
1c998     A7 F0 03 F6 | 	mov	ptra, fp
1c99c     B2 00 A0 FD | 	call	#popregs_
1c9a0                 | _do_stick_ret
1c9a0     2D 00 64 FD | 	ret
1c9a4                 | 
1c9a4                 | ' 
1c9a4                 | ' ' ------------------ strig
1c9a4                 | ' 
1c9a4                 | ' sub do_strig
1c9a4                 | _do_strig
1c9a4     01 4A 05 F6 | 	mov	COUNT_, #1
1c9a8     A8 00 A0 FD | 	call	#pushregs_
1c9ac     10 F0 07 F1 | 	add	ptra, #16
1c9b0     4A 00 00 FF 
1c9b4     80 E4 05 F1 | 	add	objptr, ##38016
1c9b8     F2 26 02 FB | 	rdlong	local01, objptr
1c9bc     13 17 02 F6 | 	mov	arg03, local01
1c9c0     01 16 66 F0 | 	shl	arg03, #1
1c9c4     13 17 02 F1 | 	add	arg03, local01
1c9c8     02 16 66 F0 | 	shl	arg03, #2
1c9cc     03 00 00 FF 
1c9d0     04 E4 85 F1 | 	sub	objptr, ##1540
1c9d4     F2 16 02 F1 | 	add	arg03, objptr
1c9d8     0B 17 02 FB | 	rdlong	arg03, arg03
1c9dc     0C 4E 05 F1 | 	add	fp, #12
1c9e0     A7 16 62 FC | 	wrlong	arg03, fp
1c9e4                 | ' 
1c9e4                 | ' numpar=compiledline(lineptr_e).result.uresult
1c9e4                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1c9e4     0C 4E 85 F1 | 	sub	fp, #12
1c9e8     02 16 16 F2 | 	cmp	arg03, #2 wc
1c9ec     47 00 00 FF 
1c9f0     7C E4 85 F1 | 	sub	objptr, ##36476
1c9f4     40 00 90 CD |  if_b	jmp	#LR__2240
1c9f8     00 12 06 F6 | 	mov	arg01, #0
1c9fc     5C 07 B1 FD | 	call	#__system___getiolock_0616
1ca00     FD 12 02 F6 | 	mov	arg01, result1
1ca04     B0 AA B0 FD | 	call	#__system___lockmem
1ca08     BD 01 00 FF 
1ca0c     E8 15 06 F6 | 	mov	arg02, ##@LR__6047
1ca10     00 12 06 F6 | 	mov	arg01, #0
1ca14     00 16 06 F6 | 	mov	arg03, #0
1ca18     94 B7 B0 FD | 	call	#__system___basic_print_string
1ca1c     00 12 06 F6 | 	mov	arg01, #0
1ca20     38 07 B1 FD | 	call	#__system___getiolock_0616
1ca24     FD 00 68 FC | 	wrlong	#0, result1
1ca28     27 12 06 F6 | 	mov	arg01, #39
1ca2c     00 14 06 F6 | 	mov	arg02, #0
1ca30     6C 70 B0 FD | 	call	#_printerror
1ca34     F0 00 90 FD | 	jmp	#LR__2244
1ca38                 | LR__2240
1ca38                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1ca38     0C 4E 05 F1 | 	add	fp, #12
1ca3c     A7 FE 09 FB | 	rdlong	result3, fp wz
1ca40     0C 4E 85 F1 | 	sub	fp, #12
1ca44     30 00 90 5D |  if_ne	jmp	#LR__2241
1ca48     52 00 00 FF 
1ca4c     70 E4 05 F1 | 	add	objptr, ##42096
1ca50     F2 26 02 FB | 	rdlong	local01, objptr
1ca54     52 00 00 FF 
1ca58     70 E4 85 F1 | 	sub	objptr, ##42096
1ca5c     A7 26 62 FC | 	wrlong	local01, fp
1ca60     08 4E 05 F1 | 	add	fp, #8
1ca64     A7 3A 68 FC | 	wrlong	#29, fp
1ca68     08 4E 85 F1 | 	sub	fp, #8
1ca6c     A7 12 02 F6 | 	mov	arg01, fp
1ca70     D0 0D BF FD | 	call	#_push
1ca74     B0 00 90 FD | 	jmp	#LR__2244
1ca78                 | LR__2241
1ca78     30 0D BF FD | 	call	#_pop
1ca7c     A7 FA 61 FC | 	wrlong	result1, fp
1ca80     04 4E 05 F1 | 	add	fp, #4
1ca84     A7 FC 61 FC | 	wrlong	result2, fp
1ca88     04 4E 05 F1 | 	add	fp, #4
1ca8c     A7 FE 61 FC | 	wrlong	result3, fp
1ca90                 | ' t1=pop()
1ca90                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1ca90     08 4E 85 F1 | 	sub	fp, #8
1ca94     1C FE 0D F2 | 	cmp	result3, #28 wz
1ca98     08 4E 05 51 |  if_ne	add	fp, #8
1ca9c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1caa0     08 4E 85 51 |  if_ne	sub	fp, #8
1caa4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1caa8     70 00 90 5D |  if_ne	jmp	#LR__2243
1caac     A7 26 02 FB | 	rdlong	local01, fp
1cab0     52 00 00 FF 
1cab4     44 E5 05 F1 | 	add	objptr, ##42308
1cab8     F2 26 62 FC | 	wrlong	local01, objptr
1cabc                 | '   q=t1.result.uresult
1cabc                 | '   if q<7 then 
1cabc     52 00 00 FF 
1cac0     44 E5 85 F1 | 	sub	objptr, ##42308
1cac4     07 26 56 F2 | 	cmps	local01, #7 wc
1cac8     40 00 90 3D |  if_ae	jmp	#LR__2242
1cacc     52 00 00 FF 
1cad0     44 E5 05 F1 | 	add	objptr, ##42308
1cad4     F2 26 02 FB | 	rdlong	local01, objptr
1cad8     02 26 66 F0 | 	shl	local01, #2
1cadc     D4 E4 85 F1 | 	sub	objptr, #212
1cae0     F2 26 02 F1 | 	add	local01, objptr
1cae4     13 27 02 FB | 	rdlong	local01, local01
1cae8     A7 26 62 FC | 	wrlong	local01, fp
1caec     08 4E 05 F1 | 	add	fp, #8
1caf0     A7 3A 68 FC | 	wrlong	#29, fp
1caf4     08 4E 85 F1 | 	sub	fp, #8
1caf8     A7 12 02 F6 | 	mov	arg01, fp
1cafc     52 00 00 FF 
1cb00     70 E4 85 F1 | 	sub	objptr, ##42096
1cb04     3C 0D BF FD | 	call	#_push
1cb08                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1cb08     1C 00 90 FD | 	jmp	#LR__2244
1cb0c                 | LR__2242
1cb0c     29 12 06 F6 | 	mov	arg01, #41
1cb10     00 14 06 F6 | 	mov	arg02, #0
1cb14     88 6F B0 FD | 	call	#_printerror
1cb18                 | '      printerror(41) : return
1cb18     0C 00 90 FD | 	jmp	#LR__2244
1cb1c                 | LR__2243
1cb1c     29 12 06 F6 | 	mov	arg01, #41
1cb20     00 14 06 F6 | 	mov	arg02, #0
1cb24     78 6F B0 FD | 	call	#_printerror
1cb28                 | LR__2244
1cb28     A7 F0 03 F6 | 	mov	ptra, fp
1cb2c     B2 00 A0 FD | 	call	#popregs_
1cb30                 | _do_strig_ret
1cb30     2D 00 64 FD | 	ret
1cb34                 | 
1cb34                 | ' 
1cb34                 | ' ' ------------------ tan
1cb34                 | ' 
1cb34                 | ' sub do_tan
1cb34                 | _do_tan
1cb34     01 4A 05 F6 | 	mov	COUNT_, #1
1cb38     A8 00 A0 FD | 	call	#pushregs_
1cb3c     10 F0 07 F1 | 	add	ptra, #16
1cb40     4A 00 00 FF 
1cb44     80 E4 05 F1 | 	add	objptr, ##38016
1cb48     F2 26 02 FB | 	rdlong	local01, objptr
1cb4c     13 17 02 F6 | 	mov	arg03, local01
1cb50     01 16 66 F0 | 	shl	arg03, #1
1cb54     13 17 02 F1 | 	add	arg03, local01
1cb58     02 16 66 F0 | 	shl	arg03, #2
1cb5c     03 00 00 FF 
1cb60     04 E4 85 F1 | 	sub	objptr, ##1540
1cb64     F2 16 02 F1 | 	add	arg03, objptr
1cb68     0B 17 02 FB | 	rdlong	arg03, arg03
1cb6c     0C 4E 05 F1 | 	add	fp, #12
1cb70     A7 16 62 FC | 	wrlong	arg03, fp
1cb74                 | ' 
1cb74                 | ' numpar=compiledline(lineptr_e).result.uresult
1cb74                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1cb74     0C 4E 85 F1 | 	sub	fp, #12
1cb78     02 16 16 F2 | 	cmp	arg03, #2 wc
1cb7c     47 00 00 FF 
1cb80     7C E4 85 F1 | 	sub	objptr, ##36476
1cb84     0C 4E 05 C1 |  if_b	add	fp, #12
1cb88     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1cb8c     0C 4E 85 C1 |  if_b	sub	fp, #12
1cb90     40 00 90 4D |  if_c_and_nz	jmp	#LR__2250
1cb94     00 12 06 F6 | 	mov	arg01, #0
1cb98     C0 05 B1 FD | 	call	#__system___getiolock_0616
1cb9c     FD 12 02 F6 | 	mov	arg01, result1
1cba0     14 A9 B0 FD | 	call	#__system___lockmem
1cba4     BD 01 00 FF 
1cba8     F0 15 06 F6 | 	mov	arg02, ##@LR__6048
1cbac     00 12 06 F6 | 	mov	arg01, #0
1cbb0     00 16 06 F6 | 	mov	arg03, #0
1cbb4     F8 B5 B0 FD | 	call	#__system___basic_print_string
1cbb8     00 12 06 F6 | 	mov	arg01, #0
1cbbc     9C 05 B1 FD | 	call	#__system___getiolock_0616
1cbc0     FD 00 68 FC | 	wrlong	#0, result1
1cbc4     27 12 06 F6 | 	mov	arg01, #39
1cbc8     00 14 06 F6 | 	mov	arg02, #0
1cbcc     D0 6E B0 FD | 	call	#_printerror
1cbd0     64 00 90 FD | 	jmp	#LR__2251
1cbd4                 | LR__2250
1cbd4     D4 0B BF FD | 	call	#_pop
1cbd8     A7 FA 61 FC | 	wrlong	result1, fp
1cbdc     04 4E 05 F1 | 	add	fp, #4
1cbe0     A7 FC 61 FC | 	wrlong	result2, fp
1cbe4     04 4E 05 F1 | 	add	fp, #4
1cbe8     A7 FE 61 FC | 	wrlong	result3, fp
1cbec     08 4E 85 F1 | 	sub	fp, #8
1cbf0     52 00 00 FF 
1cbf4     E0 E4 05 F1 | 	add	objptr, ##42208
1cbf8     F2 26 02 FB | 	rdlong	local01, objptr
1cbfc     52 00 00 FF 
1cc00     E0 E4 85 F1 | 	sub	objptr, ##42208
1cc04     A7 12 02 F6 | 	mov	arg01, fp
1cc08     40 0E BF FD | 	call	#_converttofloat
1cc0c     FD 14 02 F6 | 	mov	arg02, result1
1cc10     13 13 02 F6 | 	mov	arg01, local01
1cc14     1C D7 B0 FD | 	call	#__system___float_mul
1cc18     FD 12 02 F6 | 	mov	arg01, result1
1cc1c     C0 E1 B0 FD | 	call	#__system____builtin_tanf
1cc20     A7 FA 61 FC | 	wrlong	result1, fp
1cc24     08 4E 05 F1 | 	add	fp, #8
1cc28     A7 3C 68 FC | 	wrlong	#30, fp
1cc2c     08 4E 85 F1 | 	sub	fp, #8
1cc30     A7 12 02 F6 | 	mov	arg01, fp
1cc34     0C 0C BF FD | 	call	#_push
1cc38                 | LR__2251
1cc38     A7 F0 03 F6 | 	mov	ptra, fp
1cc3c     B2 00 A0 FD | 	call	#popregs_
1cc40                 | _do_tan_ret
1cc40     2D 00 64 FD | 	ret
1cc44                 | 
1cc44                 | ' 
1cc44                 | ' ' ------------------ val
1cc44                 | ' 
1cc44                 | ' sub do_val
1cc44                 | _do_val
1cc44     03 4A 05 F6 | 	mov	COUNT_, #3
1cc48     A8 00 A0 FD | 	call	#pushregs_
1cc4c     20 F0 07 F1 | 	add	ptra, #32
1cc50     4A 00 00 FF 
1cc54     80 E4 05 F1 | 	add	objptr, ##38016
1cc58     F2 16 02 FB | 	rdlong	arg03, objptr
1cc5c     0B 27 02 F6 | 	mov	local01, arg03
1cc60     01 26 66 F0 | 	shl	local01, #1
1cc64     0B 27 02 F1 | 	add	local01, arg03
1cc68     02 26 66 F0 | 	shl	local01, #2
1cc6c     03 00 00 FF 
1cc70     04 E4 85 F1 | 	sub	objptr, ##1540
1cc74     F2 26 02 F1 | 	add	local01, objptr
1cc78     13 17 02 FB | 	rdlong	arg03, local01
1cc7c     0C 4E 05 F1 | 	add	fp, #12
1cc80     A7 16 62 FC | 	wrlong	arg03, fp
1cc84                 | ' 
1cc84                 | ' numpar=compiledline(lineptr_e).result.uresult
1cc84                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1cc84     0C 4E 85 F1 | 	sub	fp, #12
1cc88     02 16 16 F2 | 	cmp	arg03, #2 wc
1cc8c     47 00 00 FF 
1cc90     7C E4 85 F1 | 	sub	objptr, ##36476
1cc94     0C 4E 05 C1 |  if_b	add	fp, #12
1cc98     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1cc9c     0C 4E 85 C1 |  if_b	sub	fp, #12
1cca0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2260
1cca4     00 12 06 F6 | 	mov	arg01, #0
1cca8     B0 04 B1 FD | 	call	#__system___getiolock_0616
1ccac     FD 12 02 F6 | 	mov	arg01, result1
1ccb0     04 A8 B0 FD | 	call	#__system___lockmem
1ccb4     BD 01 00 FF 
1ccb8     F6 15 06 F6 | 	mov	arg02, ##@LR__6049
1ccbc     00 12 06 F6 | 	mov	arg01, #0
1ccc0     00 16 06 F6 | 	mov	arg03, #0
1ccc4     E8 B4 B0 FD | 	call	#__system___basic_print_string
1ccc8     00 12 06 F6 | 	mov	arg01, #0
1cccc     8C 04 B1 FD | 	call	#__system___getiolock_0616
1ccd0     FD 00 68 FC | 	wrlong	#0, result1
1ccd4     27 12 06 F6 | 	mov	arg01, #39
1ccd8     00 14 06 F6 | 	mov	arg02, #0
1ccdc     C0 6D B0 FD | 	call	#_printerror
1cce0     60 02 90 FD | 	jmp	#LR__2273
1cce4                 | LR__2260
1cce4     C4 0A BF FD | 	call	#_pop
1cce8     FF 16 02 F6 | 	mov	arg03, result3
1ccec     A7 FA 61 FC | 	wrlong	result1, fp
1ccf0     04 4E 05 F1 | 	add	fp, #4
1ccf4     A7 FC 61 FC | 	wrlong	result2, fp
1ccf8     04 4E 05 F1 | 	add	fp, #4
1ccfc     A7 16 62 FC | 	wrlong	arg03, fp
1cd00                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1cd00     08 4E 85 F1 | 	sub	fp, #8
1cd04     2B 16 0E F2 | 	cmp	arg03, #43 wz
1cd08     18 00 90 5D |  if_ne	jmp	#LR__2261
1cd0c     A7 12 02 FB | 	rdlong	arg01, fp
1cd10     10 0C BF FD | 	call	#_convertstring
1cd14     A7 FA 61 FC | 	wrlong	result1, fp
1cd18     08 4E 05 F1 | 	add	fp, #8
1cd1c     A7 3E 68 FC | 	wrlong	#31, fp
1cd20     08 4E 85 F1 | 	sub	fp, #8
1cd24                 | LR__2261
1cd24                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1cd24     08 4E 05 F1 | 	add	fp, #8
1cd28     A7 16 02 FB | 	rdlong	arg03, fp
1cd2c     08 4E 85 F1 | 	sub	fp, #8
1cd30     1F 16 0E F2 | 	cmp	arg03, #31 wz
1cd34     40 00 90 AD |  if_e	jmp	#LR__2262
1cd38     00 12 06 F6 | 	mov	arg01, #0
1cd3c     1C 04 B1 FD | 	call	#__system___getiolock_0616
1cd40     FD 12 02 F6 | 	mov	arg01, result1
1cd44     70 A7 B0 FD | 	call	#__system___lockmem
1cd48     BD 01 00 FF 
1cd4c     FC 15 06 F6 | 	mov	arg02, ##@LR__6050
1cd50     00 12 06 F6 | 	mov	arg01, #0
1cd54     00 16 06 F6 | 	mov	arg03, #0
1cd58     54 B4 B0 FD | 	call	#__system___basic_print_string
1cd5c     00 12 06 F6 | 	mov	arg01, #0
1cd60     F8 03 B1 FD | 	call	#__system___getiolock_0616
1cd64     FD 00 68 FC | 	wrlong	#0, result1
1cd68     0F 12 06 F6 | 	mov	arg01, #15
1cd6c     00 14 06 F6 | 	mov	arg02, #0
1cd70     2C 6D B0 FD | 	call	#_printerror
1cd74     CC 01 90 FD | 	jmp	#LR__2273
1cd78                 | LR__2262
1cd78                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1cd78     A7 12 02 FB | 	rdlong	arg01, fp
1cd7c     01 14 06 F6 | 	mov	arg02, #1
1cd80     B4 C7 B0 FD | 	call	#__system__Left_S
1cd84     FD 12 02 F6 | 	mov	arg01, result1
1cd88     BE 01 00 FF 
1cd8c     02 14 06 F6 | 	mov	arg02, ##@LR__6051
1cd90     4C A7 B0 FD | 	call	#__system___string_cmp
1cd94     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd98     48 00 90 5D |  if_ne	jmp	#LR__2265
1cd9c     BE 01 00 FF 
1cda0     04 26 06 F6 | 	mov	local01, ##@LR__6052
1cda4     A7 16 02 FB | 	rdlong	arg03, fp
1cda8     0B 13 02 F6 | 	mov	arg01, arg03
1cdac     09 29 02 F6 | 	mov	local02, arg01
1cdb0     97 06 48 FB | 	callpa	#(@LR__2264-@LR__2263)>>2,fcache_load_ptr_
1cdb4                 | LR__2263
1cdb4     14 FB C9 FA | 	rdbyte	result1, local02 wz
1cdb8     01 28 06 51 |  if_ne	add	local02, #1
1cdbc     F4 FF 9F 5D |  if_ne	jmp	#LR__2263
1cdc0                 | LR__2264
1cdc0     09 29 82 F1 | 	sub	local02, arg01
1cdc4     14 15 02 F6 | 	mov	arg02, local02
1cdc8     01 14 86 F1 | 	sub	arg02, #1
1cdcc     0B 13 02 F6 | 	mov	arg01, arg03
1cdd0     EC C7 B0 FD | 	call	#__system__Right_S
1cdd4     FD 14 02 F6 | 	mov	arg02, result1
1cdd8     13 13 02 F6 | 	mov	arg01, local01
1cddc     34 A7 B0 FD | 	call	#__system___string_concat
1cde0     A7 FA 61 FC | 	wrlong	result1, fp
1cde4                 | LR__2265
1cde4                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1cde4     A7 12 02 FB | 	rdlong	arg01, fp
1cde8     01 14 06 F6 | 	mov	arg02, #1
1cdec     48 C7 B0 FD | 	call	#__system__Left_S
1cdf0     FD 12 02 F6 | 	mov	arg01, result1
1cdf4     BE 01 00 FF 
1cdf8     07 14 06 F6 | 	mov	arg02, ##@LR__6053
1cdfc     E0 A6 B0 FD | 	call	#__system___string_cmp
1ce00     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce04     48 00 90 5D |  if_ne	jmp	#LR__2268
1ce08     BE 01 00 FF 
1ce0c     09 26 06 F6 | 	mov	local01, ##@LR__6054
1ce10     A7 16 02 FB | 	rdlong	arg03, fp
1ce14     0B 13 02 F6 | 	mov	arg01, arg03
1ce18     09 29 02 F6 | 	mov	local02, arg01
1ce1c     97 06 48 FB | 	callpa	#(@LR__2267-@LR__2266)>>2,fcache_load_ptr_
1ce20                 | LR__2266
1ce20     14 FB C9 FA | 	rdbyte	result1, local02 wz
1ce24     01 28 06 51 |  if_ne	add	local02, #1
1ce28     F4 FF 9F 5D |  if_ne	jmp	#LR__2266
1ce2c                 | LR__2267
1ce2c     09 29 82 F1 | 	sub	local02, arg01
1ce30     14 15 02 F6 | 	mov	arg02, local02
1ce34     01 14 86 F1 | 	sub	arg02, #1
1ce38     0B 13 02 F6 | 	mov	arg01, arg03
1ce3c     80 C7 B0 FD | 	call	#__system__Right_S
1ce40     FD 14 02 F6 | 	mov	arg02, result1
1ce44     13 13 02 F6 | 	mov	arg01, local01
1ce48     C8 A6 B0 FD | 	call	#__system___string_concat
1ce4c     A7 FA 61 FC | 	wrlong	result1, fp
1ce50                 | LR__2268
1ce50     A7 12 02 FB | 	rdlong	arg01, fp
1ce54     E8 DC B0 FD | 	call	#__system____builtin_atof
1ce58     1C 4E 05 F1 | 	add	fp, #28
1ce5c     A7 FA 61 FC | 	wrlong	result1, fp
1ce60     1C 4E 85 F1 | 	sub	fp, #28
1ce64     A7 12 02 FB | 	rdlong	arg01, fp
1ce68     00 14 06 F6 | 	mov	arg02, #0
1ce6c     3C DB B0 FD | 	call	#__system____builtin_atoi
1ce70     18 4E 05 F1 | 	add	fp, #24
1ce74     A7 FA 61 FC | 	wrlong	result1, fp
1ce78                 | ' fval=val(t1.result.sresult)
1ce78                 | ' ival=val%(t1.result.sresult)
1ce78                 | ' if fval=ival then
1ce78     04 4E 05 F1 | 	add	fp, #4
1ce7c     A7 26 02 FB | 	rdlong	local01, fp
1ce80     1C 4E 85 F1 | 	sub	fp, #28
1ce84     FD 12 52 F6 | 	abs	arg01, result1 wc
1ce88     1F 2A C6 C9 |  if_b	decod	local03, #31
1ce8c     00 2A 06 36 |  if_ae	mov	local03, #0
1ce90     9C D0 B0 FD | 	call	#__system___float_fromuns
1ce94     15 FB 61 F5 | 	xor	result1, local03
1ce98     FD 14 02 F6 | 	mov	arg02, result1
1ce9c     13 13 02 F6 | 	mov	arg01, local01
1cea0     01 16 06 F6 | 	mov	arg03, #1
1cea4     C0 D8 B0 FD | 	call	#__system___float_cmp
1cea8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ceac     20 00 90 5D |  if_ne	jmp	#LR__2269
1ceb0     18 4E 05 F1 | 	add	fp, #24
1ceb4     A7 26 02 FB | 	rdlong	local01, fp
1ceb8     18 4E 85 F1 | 	sub	fp, #24
1cebc     A7 26 62 FC | 	wrlong	local01, fp
1cec0     08 4E 05 F1 | 	add	fp, #8
1cec4     A7 38 68 FC | 	wrlong	#28, fp
1cec8     08 4E 85 F1 | 	sub	fp, #8
1cecc     6C 00 90 FD | 	jmp	#LR__2272
1ced0                 | LR__2269
1ced0                 | '   if fval=0 andalso ival<>0 then
1ced0     1C 4E 05 F1 | 	add	fp, #28
1ced4     A7 12 02 FB | 	rdlong	arg01, fp
1ced8     1C 4E 85 F1 | 	sub	fp, #28
1cedc     00 14 06 F6 | 	mov	arg02, #0
1cee0     01 16 06 F6 | 	mov	arg03, #1
1cee4     80 D8 B0 FD | 	call	#__system___float_cmp
1cee8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ceec     30 00 90 5D |  if_ne	jmp	#LR__2270
1cef0     18 4E 05 F1 | 	add	fp, #24
1cef4     A7 26 0A FB | 	rdlong	local01, fp wz
1cef8     18 4E 85 F1 | 	sub	fp, #24
1cefc     20 00 90 AD |  if_e	jmp	#LR__2270
1cf00     18 4E 05 F1 | 	add	fp, #24
1cf04     A7 26 02 FB | 	rdlong	local01, fp
1cf08     18 4E 85 F1 | 	sub	fp, #24
1cf0c     A7 26 62 FC | 	wrlong	local01, fp
1cf10     08 4E 05 F1 | 	add	fp, #8
1cf14     A7 38 68 FC | 	wrlong	#28, fp
1cf18     08 4E 85 F1 | 	sub	fp, #8
1cf1c     1C 00 90 FD | 	jmp	#LR__2271
1cf20                 | LR__2270
1cf20     1C 4E 05 F1 | 	add	fp, #28
1cf24     A7 26 02 FB | 	rdlong	local01, fp
1cf28     1C 4E 85 F1 | 	sub	fp, #28
1cf2c     A7 26 62 FC | 	wrlong	local01, fp
1cf30     08 4E 05 F1 | 	add	fp, #8
1cf34     A7 3C 68 FC | 	wrlong	#30, fp
1cf38     08 4E 85 F1 | 	sub	fp, #8
1cf3c                 | LR__2271
1cf3c                 | LR__2272
1cf3c     A7 12 02 F6 | 	mov	arg01, fp
1cf40     00 09 BF FD | 	call	#_push
1cf44                 | LR__2273
1cf44     A7 F0 03 F6 | 	mov	ptra, fp
1cf48     B2 00 A0 FD | 	call	#popregs_
1cf4c                 | _do_val_ret
1cf4c     2D 00 64 FD | 	ret
1cf50                 | 
1cf50                 | ' 
1cf50                 | ' ' ------------------ waitclock
1cf50                 | ' 
1cf50                 | ' sub do_waitclock
1cf50                 | _do_waitclock
1cf50     52 00 00 FF 
1cf54     CC E4 05 F1 | 	add	objptr, ##42188
1cf58     F2 00 02 FB | 	rdlong	_var01, objptr
1cf5c                 | ' c=hkcnt
1cf5c                 | ' do: loop until hkcnt<>c
1cf5c                 | LR__2280
1cf5c     F2 02 02 FB | 	rdlong	_var02, objptr
1cf60     00 03 0A F2 | 	cmp	_var02, _var01 wz
1cf64     F4 FF 9F AD |  if_e	jmp	#LR__2280
1cf68     52 00 00 FF 
1cf6c     CC E4 85 F1 | 	sub	objptr, ##42188
1cf70                 | _do_waitclock_ret
1cf70     2D 00 64 FD | 	ret
1cf74                 | 
1cf74                 | ' 
1cf74                 | ' ' ------------------ waitms
1cf74                 | ' 
1cf74                 | ' sub do_waitms
1cf74                 | _do_waitms
1cf74     01 4A 05 F6 | 	mov	COUNT_, #1
1cf78     A8 00 A0 FD | 	call	#pushregs_
1cf7c     18 F0 07 F1 | 	add	ptra, #24
1cf80     28 08 BF FD | 	call	#_pop
1cf84     A7 FA 61 FC | 	wrlong	result1, fp
1cf88     04 4E 05 F1 | 	add	fp, #4
1cf8c     A7 FC 61 FC | 	wrlong	result2, fp
1cf90     04 4E 05 F1 | 	add	fp, #4
1cf94     A7 FE 61 FC | 	wrlong	result3, fp
1cf98     08 4E 85 F1 | 	sub	fp, #8
1cf9c     A7 12 02 F6 | 	mov	arg01, fp
1cfa0     EC 09 BF FD | 	call	#_converttoint
1cfa4     0C 4E 05 F1 | 	add	fp, #12
1cfa8     A7 FA 61 FC | 	wrlong	result1, fp
1cfac                 | ' 
1cfac                 | ' t1=pop()  
1cfac                 | ' t=converttoint(t1)
1cfac                 | ' if t<0 then return
1cfac     0C 4E 85 F1 | 	sub	fp, #12
1cfb0     00 FA 55 F2 | 	cmps	result1, #0 wc
1cfb4     E4 00 90 CD |  if_b	jmp	#LR__2296
1cfb8                 | ' if t < 1000 then 
1cfb8     0C 4E 05 F1 | 	add	fp, #12
1cfbc     A7 12 02 FB | 	rdlong	arg01, fp
1cfc0     0C 4E 85 F1 | 	sub	fp, #12
1cfc4     01 00 00 FF 
1cfc8     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1cfcc     14 00 90 3D |  if_ae	jmp	#LR__2290
1cfd0     0C 4E 05 F1 | 	add	fp, #12
1cfd4     A7 12 02 FB | 	rdlong	arg01, fp
1cfd8     0C 4E 85 F1 | 	sub	fp, #12
1cfdc     CC A7 B0 FD | 	call	#__system___waitms
1cfe0     B8 00 90 FD | 	jmp	#LR__2295
1cfe4                 | LR__2290
1cfe4     10 4E 05 F1 | 	add	fp, #16
1cfe8     A7 02 68 FC | 	wrlong	#1, fp
1cfec     04 4E 85 F1 | 	sub	fp, #4
1cff0     A7 12 02 FB | 	rdlong	arg01, fp
1cff4     09 13 52 F6 | 	abs	arg01, arg01 wc
1cff8     01 00 00 FF 
1cffc     E8 13 16 FD | 	qdiv	arg01, ##1000
1d000                 | '   for i=1 to t/1000
1d000     0C 4E 85 F1 | 	sub	fp, #12
1d004     18 26 62 FD | 	getqx	local01
1d008     13 27 82 F6 | 	negc	local01, local01
1d00c     01 26 06 F1 | 	add	local01, #1
1d010                 | LR__2291
1d010     10 4E 05 F1 | 	add	fp, #16
1d014     A7 12 02 FB | 	rdlong	arg01, fp
1d018     10 4E 85 F1 | 	sub	fp, #16
1d01c     13 13 52 F2 | 	cmps	arg01, local01 wc
1d020     54 00 90 3D |  if_ae	jmp	#LR__2294
1d024     01 00 00 FF 
1d028     E8 13 06 F6 | 	mov	arg01, ##1000
1d02c     7C A7 B0 FD | 	call	#__system___waitms
1d030                 | '     waitms(1000)
1d030                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1d030     E0 12 06 F6 | 	mov	arg01, #224
1d034     6C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1d038     00 FA 0D F2 | 	cmp	result1, #0 wz
1d03c     10 00 90 5D |  if_ne	jmp	#LR__2292
1d040     E4 12 06 F6 | 	mov	arg01, #228
1d044     5C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1d048     00 FA 0D F2 | 	cmp	result1, #0 wz
1d04c     10 00 90 AD |  if_e	jmp	#LR__2293
1d050                 | LR__2292
1d050     06 12 06 F6 | 	mov	arg01, #6
1d054     4C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1d058     00 FA 0D F2 | 	cmp	result1, #0 wz
1d05c     3C 00 90 5D |  if_ne	jmp	#LR__2296
1d060                 | LR__2293
1d060     10 4E 05 F1 | 	add	fp, #16
1d064     A7 12 02 FB | 	rdlong	arg01, fp
1d068     01 12 06 F1 | 	add	arg01, #1
1d06c     A7 12 62 FC | 	wrlong	arg01, fp
1d070     10 4E 85 F1 | 	sub	fp, #16
1d074     98 FF 9F FD | 	jmp	#LR__2291
1d078                 | LR__2294
1d078     0C 4E 05 F1 | 	add	fp, #12
1d07c     A7 26 02 FB | 	rdlong	local01, fp
1d080     13 27 52 F6 | 	abs	local01, local01 wc
1d084     01 00 00 FF 
1d088     E8 27 16 FD | 	qdiv	local01, ##1000
1d08c     0C 4E 85 F1 | 	sub	fp, #12
1d090     19 26 62 FD | 	getqy	local01
1d094     13 13 82 F6 | 	negc	arg01, local01
1d098     10 A7 B0 FD | 	call	#__system___waitms
1d09c                 | LR__2295
1d09c                 | LR__2296
1d09c     A7 F0 03 F6 | 	mov	ptra, fp
1d0a0     B2 00 A0 FD | 	call	#popregs_
1d0a4                 | _do_waitms_ret
1d0a4     2D 00 64 FD | 	ret
1d0a8                 | 
1d0a8                 | ' 
1d0a8                 | ' ' ------------------ waitvbl
1d0a8                 | ' 
1d0a8                 | ' sub do_waitvbl
1d0a8                 | _do_waitvbl
1d0a8     01 12 06 F6 | 	mov	arg01, #1
1d0ac     0C 87 B0 FD | 	call	#_hg010b_spin2_waitvbl
1d0b0                 | _do_waitvbl_ret
1d0b0     2D 00 64 FD | 	ret
1d0b4                 | 
1d0b4                 | ' 
1d0b4                 | ' ' ------------------ wrpin
1d0b4                 | ' 
1d0b4                 | ' sub do_wrpin
1d0b4                 | _do_wrpin
1d0b4     01 4A 05 F6 | 	mov	COUNT_, #1
1d0b8     A8 00 A0 FD | 	call	#pushregs_
1d0bc     18 F0 07 F1 | 	add	ptra, #24
1d0c0     E8 06 BF FD | 	call	#_pop
1d0c4     FD 14 02 F6 | 	mov	arg02, result1
1d0c8     FE 12 02 F6 | 	mov	arg01, result2
1d0cc     FF 26 02 F6 | 	mov	local01, result3
1d0d0     A7 14 62 FC | 	wrlong	arg02, fp
1d0d4     04 4E 05 F1 | 	add	fp, #4
1d0d8     A7 12 62 FC | 	wrlong	arg01, fp
1d0dc     04 4E 05 F1 | 	add	fp, #4
1d0e0     A7 26 62 FC | 	wrlong	local01, fp
1d0e4     08 4E 85 F1 | 	sub	fp, #8
1d0e8     C0 06 BF FD | 	call	#_pop
1d0ec     FF 26 02 F6 | 	mov	local01, result3
1d0f0     0C 4E 05 F1 | 	add	fp, #12
1d0f4     A7 FA 61 FC | 	wrlong	result1, fp
1d0f8     04 4E 05 F1 | 	add	fp, #4
1d0fc     A7 FC 61 FC | 	wrlong	result2, fp
1d100     04 4E 05 F1 | 	add	fp, #4
1d104     A7 26 62 FC | 	wrlong	local01, fp
1d108     08 4E 85 F1 | 	sub	fp, #8
1d10c     A7 12 02 F6 | 	mov	arg01, fp
1d110     0C 4E 85 F1 | 	sub	fp, #12
1d114     78 08 BF FD | 	call	#_converttoint
1d118     FD 26 02 F6 | 	mov	local01, result1
1d11c     A7 12 02 F6 | 	mov	arg01, fp
1d120     6C 08 BF FD | 	call	#_converttoint
1d124     13 FB 01 FC | 	wrpin	result1, local01
1d128     A7 F0 03 F6 | 	mov	ptra, fp
1d12c     B2 00 A0 FD | 	call	#popregs_
1d130                 | _do_wrpin_ret
1d130     2D 00 64 FD | 	ret
1d134                 | 
1d134                 | ' 
1d134                 | ' ' ------------------ wxpin
1d134                 | ' 
1d134                 | ' sub do_wxpin
1d134                 | _do_wxpin
1d134     01 4A 05 F6 | 	mov	COUNT_, #1
1d138     A8 00 A0 FD | 	call	#pushregs_
1d13c     18 F0 07 F1 | 	add	ptra, #24
1d140     68 06 BF FD | 	call	#_pop
1d144     FD 14 02 F6 | 	mov	arg02, result1
1d148     FE 12 02 F6 | 	mov	arg01, result2
1d14c     FF 26 02 F6 | 	mov	local01, result3
1d150     A7 14 62 FC | 	wrlong	arg02, fp
1d154     04 4E 05 F1 | 	add	fp, #4
1d158     A7 12 62 FC | 	wrlong	arg01, fp
1d15c     04 4E 05 F1 | 	add	fp, #4
1d160     A7 26 62 FC | 	wrlong	local01, fp
1d164     08 4E 85 F1 | 	sub	fp, #8
1d168     40 06 BF FD | 	call	#_pop
1d16c     FF 26 02 F6 | 	mov	local01, result3
1d170     0C 4E 05 F1 | 	add	fp, #12
1d174     A7 FA 61 FC | 	wrlong	result1, fp
1d178     04 4E 05 F1 | 	add	fp, #4
1d17c     A7 FC 61 FC | 	wrlong	result2, fp
1d180     04 4E 05 F1 | 	add	fp, #4
1d184     A7 26 62 FC | 	wrlong	local01, fp
1d188     08 4E 85 F1 | 	sub	fp, #8
1d18c     A7 12 02 F6 | 	mov	arg01, fp
1d190     0C 4E 85 F1 | 	sub	fp, #12
1d194     F8 07 BF FD | 	call	#_converttoint
1d198     FD 26 02 F6 | 	mov	local01, result1
1d19c     A7 12 02 F6 | 	mov	arg01, fp
1d1a0     EC 07 BF FD | 	call	#_converttoint
1d1a4     13 FB 11 FC | 	wxpin	result1, local01
1d1a8     A7 F0 03 F6 | 	mov	ptra, fp
1d1ac     B2 00 A0 FD | 	call	#popregs_
1d1b0                 | _do_wxpin_ret
1d1b0     2D 00 64 FD | 	ret
1d1b4                 | 
1d1b4                 | ' 
1d1b4                 | ' ' ------------------ wypin
1d1b4                 | ' 
1d1b4                 | ' sub do_wypin
1d1b4                 | _do_wypin
1d1b4     01 4A 05 F6 | 	mov	COUNT_, #1
1d1b8     A8 00 A0 FD | 	call	#pushregs_
1d1bc     18 F0 07 F1 | 	add	ptra, #24
1d1c0     E8 05 BF FD | 	call	#_pop
1d1c4     FD 14 02 F6 | 	mov	arg02, result1
1d1c8     FE 12 02 F6 | 	mov	arg01, result2
1d1cc     FF 26 02 F6 | 	mov	local01, result3
1d1d0     A7 14 62 FC | 	wrlong	arg02, fp
1d1d4     04 4E 05 F1 | 	add	fp, #4
1d1d8     A7 12 62 FC | 	wrlong	arg01, fp
1d1dc     04 4E 05 F1 | 	add	fp, #4
1d1e0     A7 26 62 FC | 	wrlong	local01, fp
1d1e4     08 4E 85 F1 | 	sub	fp, #8
1d1e8     C0 05 BF FD | 	call	#_pop
1d1ec     FF 26 02 F6 | 	mov	local01, result3
1d1f0     0C 4E 05 F1 | 	add	fp, #12
1d1f4     A7 FA 61 FC | 	wrlong	result1, fp
1d1f8     04 4E 05 F1 | 	add	fp, #4
1d1fc     A7 FC 61 FC | 	wrlong	result2, fp
1d200     04 4E 05 F1 | 	add	fp, #4
1d204     A7 26 62 FC | 	wrlong	local01, fp
1d208     08 4E 85 F1 | 	sub	fp, #8
1d20c     A7 12 02 F6 | 	mov	arg01, fp
1d210     0C 4E 85 F1 | 	sub	fp, #12
1d214     78 07 BF FD | 	call	#_converttoint
1d218     FD 26 02 F6 | 	mov	local01, result1
1d21c     A7 12 02 F6 | 	mov	arg01, fp
1d220     6C 07 BF FD | 	call	#_converttoint
1d224     13 FB 21 FC | 	wypin	result1, local01
1d228     A7 F0 03 F6 | 	mov	ptra, fp
1d22c     B2 00 A0 FD | 	call	#popregs_
1d230                 | _do_wypin_ret
1d230     2D 00 64 FD | 	ret
1d234                 | 
1d234                 | ' 
1d234                 | ' 
1d234                 | ' 
1d234                 | ' 
1d234                 | ' 
1d234                 | ' 
1d234                 | ' 
1d234                 | ' 
1d234                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d234                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1d234                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d234                 | ' 
1d234                 | ' 
1d234                 | ' '------------------ Assign
1d234                 | ' 
1d234                 | ' sub do_assign
1d234                 | _do_assign
1d234     05 4A 05 F6 | 	mov	COUNT_, #5
1d238     A8 00 A0 FD | 	call	#pushregs_
1d23c     44 F0 07 F1 | 	add	ptra, #68
1d240     4A 00 00 FF 
1d244     80 E4 05 F1 | 	add	objptr, ##38016
1d248     F2 16 02 FB | 	rdlong	arg03, objptr
1d24c     0B 15 02 F6 | 	mov	arg02, arg03
1d250     01 14 66 F0 | 	shl	arg02, #1
1d254     0B 15 02 F1 | 	add	arg02, arg03
1d258     02 14 66 F0 | 	shl	arg02, #2
1d25c     03 00 00 FF 
1d260     04 E4 85 F1 | 	sub	objptr, ##1540
1d264     F2 14 02 F1 | 	add	arg02, objptr
1d268     0A 15 02 FB | 	rdlong	arg02, arg02
1d26c     18 4E 05 F1 | 	add	fp, #24
1d270     A7 14 62 FC | 	wrlong	arg02, fp
1d274                 | ' 
1d274                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1d274                 | ' if variables(varnum).vartype<array_no_type then 
1d274     18 4E 85 F1 | 	sub	fp, #24
1d278     04 14 66 F0 | 	shl	arg02, #4
1d27c     32 00 00 FF 
1d280     84 E4 85 F1 | 	sub	objptr, ##25732
1d284     F2 14 02 F1 | 	add	arg02, objptr
1d288     0C 14 06 F1 | 	add	arg02, #12
1d28c     0A 17 02 FB | 	rdlong	arg03, arg02
1d290     00 17 16 F2 | 	cmp	arg03, #256 wc
1d294     14 00 00 FF 
1d298     F8 E5 85 F1 | 	sub	objptr, ##10744
1d29c     18 01 90 3D |  if_ae	jmp	#LR__2300
1d2a0     08 05 BF FD | 	call	#_pop
1d2a4     A7 FA 61 FC | 	wrlong	result1, fp
1d2a8     04 4E 05 F1 | 	add	fp, #4
1d2ac     A7 FC 61 FC | 	wrlong	result2, fp
1d2b0     04 4E 05 F1 | 	add	fp, #4
1d2b4     A7 FE 61 FC | 	wrlong	result3, fp
1d2b8     08 4E 85 F1 | 	sub	fp, #8
1d2bc     A7 16 02 FB | 	rdlong	arg03, fp
1d2c0     04 4E 05 F1 | 	add	fp, #4
1d2c4     A7 14 02 FB | 	rdlong	arg02, fp
1d2c8     14 4E 05 F1 | 	add	fp, #20
1d2cc     A7 12 02 FB | 	rdlong	arg01, fp
1d2d0     04 12 66 F0 | 	shl	arg01, #4
1d2d4     14 00 00 FF 
1d2d8     F8 E5 05 F1 | 	add	objptr, ##10744
1d2dc     F2 12 02 F1 | 	add	arg01, objptr
1d2e0     04 12 06 F1 | 	add	arg01, #4
1d2e4     09 17 62 FC | 	wrlong	arg03, arg01
1d2e8     A7 16 02 FB | 	rdlong	arg03, fp
1d2ec     04 16 66 F0 | 	shl	arg03, #4
1d2f0     F2 16 02 F1 | 	add	arg03, objptr
1d2f4     08 16 06 F1 | 	add	arg03, #8
1d2f8     0B 15 62 FC | 	wrlong	arg02, arg03
1d2fc     A7 16 02 FB | 	rdlong	arg03, fp
1d300     04 16 66 F0 | 	shl	arg03, #4
1d304     F2 16 02 F1 | 	add	arg03, objptr
1d308     10 4E 85 F1 | 	sub	fp, #16
1d30c     A7 14 02 FB | 	rdlong	arg02, fp
1d310     0C 16 06 F1 | 	add	arg03, #12
1d314     0B 15 62 FC | 	wrlong	arg02, arg03
1d318                 | '   t1=pop() 
1d318                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1d318                 | '   if variables(varnum).vartype<>result_string2 then return
1d318     10 4E 05 F1 | 	add	fp, #16
1d31c     A7 16 02 FB | 	rdlong	arg03, fp
1d320     18 4E 85 F1 | 	sub	fp, #24
1d324     04 16 66 F0 | 	shl	arg03, #4
1d328     F2 16 02 F1 | 	add	arg03, objptr
1d32c     0C 16 06 F1 | 	add	arg03, #12
1d330     0B 17 02 FB | 	rdlong	arg03, arg03
1d334     2B 16 0E F2 | 	cmp	arg03, #43 wz
1d338     14 00 00 FF 
1d33c     F8 E5 85 F1 | 	sub	objptr, ##10744
1d340     EC 04 90 5D |  if_ne	jmp	#LR__2323
1d344     18 4E 05 F1 | 	add	fp, #24
1d348     A7 16 02 FB | 	rdlong	arg03, fp
1d34c     0B 27 02 F6 | 	mov	local01, arg03
1d350     04 26 66 F0 | 	shl	local01, #4
1d354     14 00 00 FF 
1d358     F8 E5 05 F1 | 	add	objptr, ##10744
1d35c     F2 26 02 F1 | 	add	local01, objptr
1d360     18 4E 85 F1 | 	sub	fp, #24
1d364     04 16 66 F0 | 	shl	arg03, #4
1d368     F2 16 02 F1 | 	add	arg03, objptr
1d36c     04 16 06 F1 | 	add	arg03, #4
1d370     0B 13 02 FB | 	rdlong	arg01, arg03
1d374     14 00 00 FF 
1d378     F8 E5 85 F1 | 	sub	objptr, ##10744
1d37c     A4 05 BF FD | 	call	#_convertstring
1d380     04 26 06 F1 | 	add	local01, #4
1d384     13 FB 61 FC | 	wrlong	result1, local01
1d388     18 4E 05 F1 | 	add	fp, #24
1d38c     A7 26 02 FB | 	rdlong	local01, fp
1d390     18 4E 85 F1 | 	sub	fp, #24
1d394     04 26 66 F0 | 	shl	local01, #4
1d398     14 00 00 FF 
1d39c     F8 E5 05 F1 | 	add	objptr, ##10744
1d3a0     F2 26 02 F1 | 	add	local01, objptr
1d3a4     0C 26 06 F1 | 	add	local01, #12
1d3a8     13 3F 68 FC | 	wrlong	#31, local01
1d3ac                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1d3ac                 | '   variables(varnum).vartype=result_string
1d3ac                 | '   return
1d3ac     14 00 00 FF 
1d3b0     F8 E5 85 F1 | 	sub	objptr, ##10744
1d3b4     78 04 90 FD | 	jmp	#LR__2323
1d3b8                 | LR__2300
1d3b8                 | ' for i=0 to 2 : arrid(i)=0 : next i
1d3b8     1C 4E 05 F1 | 	add	fp, #28
1d3bc     A7 00 68 FC | 	wrlong	#0, fp
1d3c0     97 16 48 FB | 	callpa	#(@LR__2302-@LR__2301)>>2,fcache_load_ptr_
1d3c4                 | LR__2301
1d3c4     A7 26 02 FB | 	rdlong	local01, fp
1d3c8     02 26 66 F0 | 	shl	local01, #2
1d3cc     18 4E 05 F1 | 	add	fp, #24
1d3d0     A7 26 02 F1 | 	add	local01, fp
1d3d4     13 01 68 FC | 	wrlong	#0, local01
1d3d8     18 4E 85 F1 | 	sub	fp, #24
1d3dc     A7 26 02 FB | 	rdlong	local01, fp
1d3e0     01 26 06 F1 | 	add	local01, #1
1d3e4     A7 26 62 FC | 	wrlong	local01, fp
1d3e8     03 26 16 F2 | 	cmp	local01, #3 wc
1d3ec     D4 FF 9F CD |  if_b	jmp	#LR__2301
1d3f0                 | LR__2302
1d3f0     4A 00 00 FF 
1d3f4     80 E4 05 F1 | 	add	objptr, ##38016
1d3f8     F2 16 02 FB | 	rdlong	arg03, objptr
1d3fc     0B 27 02 F6 | 	mov	local01, arg03
1d400     01 26 66 F0 | 	shl	local01, #1
1d404     0B 27 02 F1 | 	add	local01, arg03
1d408     02 26 66 F0 | 	shl	local01, #2
1d40c     03 00 00 FF 
1d410     04 E4 85 F1 | 	sub	objptr, ##1540
1d414     F2 26 02 F1 | 	add	local01, objptr
1d418     04 26 06 F1 | 	add	local01, #4
1d41c     13 29 02 FB | 	rdlong	local02, local01
1d420     04 4E 05 F1 | 	add	fp, #4
1d424     A7 28 62 FC | 	wrlong	local02, fp
1d428     20 4E 85 F1 | 	sub	fp, #32
1d42c     47 00 00 FF 
1d430     7C E4 85 F1 | 	sub	objptr, ##36476
1d434     74 03 BF FD | 	call	#_pop
1d438     A7 FA 61 FC | 	wrlong	result1, fp
1d43c     04 4E 05 F1 | 	add	fp, #4
1d440     A7 FC 61 FC | 	wrlong	result2, fp
1d444     04 4E 05 F1 | 	add	fp, #4
1d448     A7 FE 61 FC | 	wrlong	result3, fp
1d44c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1d44c                 | ' t1=pop() ' var value
1d44c                 | ' if numpar>0 then
1d44c     18 4E 05 F1 | 	add	fp, #24
1d450     A7 2A 02 FB | 	rdlong	local03, fp
1d454     20 4E 85 F1 | 	sub	fp, #32
1d458     01 2A 16 F2 | 	cmp	local03, #1 wc
1d45c     78 00 90 CD |  if_b	jmp	#LR__2305
1d460                 | '   for i=numpar to 1 step -1
1d460     20 4E 05 F1 | 	add	fp, #32
1d464     A7 2C 0A FB | 	rdlong	local04, fp wz
1d468     04 4E 85 F1 | 	sub	fp, #4
1d46c     A7 2C 62 FC | 	wrlong	local04, fp
1d470     1C 4E 85 F1 | 	sub	fp, #28
1d474     60 00 90 AD |  if_e	jmp	#LR__2304
1d478                 | LR__2303
1d478     30 03 BF FD | 	call	#_pop
1d47c     0C 4E 05 F1 | 	add	fp, #12
1d480     A7 FA 61 FC | 	wrlong	result1, fp
1d484     04 4E 05 F1 | 	add	fp, #4
1d488     A7 FC 61 FC | 	wrlong	result2, fp
1d48c     04 4E 05 F1 | 	add	fp, #4
1d490     A7 FE 61 FC | 	wrlong	result3, fp
1d494     08 4E 05 F1 | 	add	fp, #8
1d498     A7 2A 02 FB | 	rdlong	local03, fp
1d49c     01 2A 86 F1 | 	sub	local03, #1
1d4a0     02 2A 66 F0 | 	shl	local03, #2
1d4a4     18 4E 05 F1 | 	add	fp, #24
1d4a8     A7 2A 02 F1 | 	add	local03, fp
1d4ac     28 4E 85 F1 | 	sub	fp, #40
1d4b0     A7 12 02 F6 | 	mov	arg01, fp
1d4b4     0C 4E 85 F1 | 	sub	fp, #12
1d4b8     D4 04 BF FD | 	call	#_converttoint
1d4bc     15 FB 61 FC | 	wrlong	result1, local03
1d4c0     1C 4E 05 F1 | 	add	fp, #28
1d4c4     A7 2C 02 FB | 	rdlong	local04, fp
1d4c8     01 2C 8E F1 | 	sub	local04, #1 wz
1d4cc     A7 2C 62 FC | 	wrlong	local04, fp
1d4d0     1C 4E 85 F1 | 	sub	fp, #28
1d4d4     A0 FF 9F 5D |  if_ne	jmp	#LR__2303
1d4d8                 | LR__2304
1d4d8                 | LR__2305
1d4d8     18 4E 05 F1 | 	add	fp, #24
1d4dc     A7 26 02 FB | 	rdlong	local01, fp
1d4e0     04 26 66 F0 | 	shl	local01, #4
1d4e4     14 00 00 FF 
1d4e8     F8 E5 05 F1 | 	add	objptr, ##10744
1d4ec     F2 26 02 F1 | 	add	local01, objptr
1d4f0     04 26 06 F1 | 	add	local01, #4
1d4f4     13 13 02 FB | 	rdlong	arg01, local01
1d4f8     0C 4E 05 F1 | 	add	fp, #12
1d4fc     A7 12 62 FC | 	wrlong	arg01, fp
1d500     24 4E 85 F1 | 	sub	fp, #36
1d504     14 00 00 FF 
1d508     F8 E5 85 F1 | 	sub	objptr, ##10744
1d50c     60 68 B0 FD | 	call	#_pslpeek
1d510     FD 2C 32 F9 | 	getword	local04, result1, #0
1d514     28 4E 05 F1 | 	add	fp, #40
1d518     A7 2C 62 FC | 	wrlong	local04, fp
1d51c     04 4E 85 F1 | 	sub	fp, #4
1d520     A7 12 02 FB | 	rdlong	arg01, fp
1d524     24 4E 85 F1 | 	sub	fp, #36
1d528     02 12 06 F1 | 	add	arg01, #2
1d52c     E8 67 B0 FD | 	call	#_pspeek
1d530     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d534     2C 4E 05 F1 | 	add	fp, #44
1d538     A7 FA 61 FC | 	wrlong	result1, fp
1d53c                 | ' esize=pspeek(arrptr+2)
1d53c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1d53c     08 4E 85 F1 | 	sub	fp, #8
1d540     A7 12 02 FB | 	rdlong	arg01, fp
1d544     24 4E 85 F1 | 	sub	fp, #36
1d548     04 12 06 F1 | 	add	arg01, #4
1d54c     20 68 B0 FD | 	call	#_pslpeek
1d550     FD 2C 02 F6 | 	mov	local04, result1
1d554     34 4E 05 F1 | 	add	fp, #52
1d558     A7 26 02 FB | 	rdlong	local01, fp
1d55c     34 4E 85 F1 | 	sub	fp, #52
1d560     16 27 12 F2 | 	cmp	local01, local04 wc
1d564     54 00 90 3D |  if_ae	jmp	#LR__2306
1d568     24 4E 05 F1 | 	add	fp, #36
1d56c     A7 12 02 FB | 	rdlong	arg01, fp
1d570     24 4E 85 F1 | 	sub	fp, #36
1d574     08 12 06 F1 | 	add	arg01, #8
1d578     F4 67 B0 FD | 	call	#_pslpeek
1d57c     FD 26 02 F6 | 	mov	local01, result1
1d580     38 4E 05 F1 | 	add	fp, #56
1d584     A7 2C 02 FB | 	rdlong	local04, fp
1d588     38 4E 85 F1 | 	sub	fp, #56
1d58c     13 2D 12 F2 | 	cmp	local04, local01 wc
1d590     28 00 90 3D |  if_ae	jmp	#LR__2306
1d594     24 4E 05 F1 | 	add	fp, #36
1d598     A7 12 02 FB | 	rdlong	arg01, fp
1d59c     24 4E 85 F1 | 	sub	fp, #36
1d5a0     0C 12 06 F1 | 	add	arg01, #12
1d5a4     C8 67 B0 FD | 	call	#_pslpeek
1d5a8     3C 4E 05 F1 | 	add	fp, #60
1d5ac     A7 2C 02 FB | 	rdlong	local04, fp
1d5b0     3C 4E 85 F1 | 	sub	fp, #60
1d5b4     FD 2C 12 F2 | 	cmp	local04, result1 wc
1d5b8     10 00 90 CD |  if_b	jmp	#LR__2307
1d5bc                 | LR__2306
1d5bc     31 12 06 F6 | 	mov	arg01, #49
1d5c0     00 14 06 F6 | 	mov	arg02, #0
1d5c4     D8 64 B0 FD | 	call	#_printerror
1d5c8     64 02 90 FD | 	jmp	#LR__2323
1d5cc                 | LR__2307
1d5cc     24 4E 05 F1 | 	add	fp, #36
1d5d0     A7 12 02 FB | 	rdlong	arg01, fp
1d5d4     09 2D 02 F6 | 	mov	local04, arg01
1d5d8     10 2C 06 F1 | 	add	local04, #16
1d5dc     24 4E 85 F1 | 	sub	fp, #36
1d5e0     04 12 06 F1 | 	add	arg01, #4
1d5e4     88 67 B0 FD | 	call	#_pslpeek
1d5e8     FD 26 02 F6 | 	mov	local01, result1
1d5ec     38 4E 05 F1 | 	add	fp, #56
1d5f0     A7 28 02 FB | 	rdlong	local02, fp
1d5f4     14 27 02 FD | 	qmul	local01, local02
1d5f8     04 4E 85 F1 | 	sub	fp, #4
1d5fc     A7 2A 02 FB | 	rdlong	local03, fp
1d600     10 4E 85 F1 | 	sub	fp, #16
1d604     A7 12 02 FB | 	rdlong	arg01, fp
1d608     24 4E 85 F1 | 	sub	fp, #36
1d60c     08 12 06 F1 | 	add	arg01, #8
1d610     18 28 62 FD | 	getqx	local02
1d614     14 2B 02 F1 | 	add	local03, local02
1d618     54 67 B0 FD | 	call	#_pslpeek
1d61c     FD 28 02 F6 | 	mov	local02, result1
1d620     24 4E 05 F1 | 	add	fp, #36
1d624     A7 12 02 FB | 	rdlong	arg01, fp
1d628     24 4E 85 F1 | 	sub	fp, #36
1d62c     04 12 06 F1 | 	add	arg01, #4
1d630     3C 67 B0 FD | 	call	#_pslpeek
1d634     FD 28 02 FD | 	qmul	local02, result1
1d638     3C 4E 05 F1 | 	add	fp, #60
1d63c     A7 28 02 FB | 	rdlong	local02, fp
1d640     18 26 62 FD | 	getqx	local01
1d644     14 27 02 FD | 	qmul	local01, local02
1d648     10 4E 85 F1 | 	sub	fp, #16
1d64c     A7 28 02 FB | 	rdlong	local02, fp
1d650     18 26 62 FD | 	getqx	local01
1d654     13 2B 02 F1 | 	add	local03, local01
1d658     15 29 02 FD | 	qmul	local02, local03
1d65c     04 4E 05 F1 | 	add	fp, #4
1d660                 | ' 
1d660                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1d660                 | ' select case arrtype
1d660     18 2A 62 FD | 	getqx	local03
1d664     15 2D 02 F1 | 	add	local04, local03
1d668     A7 2C 62 FC | 	wrlong	local04, fp
1d66c     08 4E 85 F1 | 	sub	fp, #8
1d670     A7 2E 02 FB | 	rdlong	local05, fp
1d674     28 4E 85 F1 | 	sub	fp, #40
1d678     00 2F 86 F1 | 	sub	local05, #256
1d67c     0C 2E 26 F3 | 	fle	local05, #12
1d680     30 2E 62 FD | 	jmprel	local05
1d684                 | LR__2308
1d684     30 00 90 FD | 	jmp	#LR__2309
1d688     58 00 90 FD | 	jmp	#LR__2310
1d68c     6C 00 90 FD | 	jmp	#LR__2311
1d690     80 00 90 FD | 	jmp	#LR__2312
1d694     B0 00 90 FD | 	jmp	#LR__2313
1d698     E0 00 90 FD | 	jmp	#LR__2314
1d69c     F4 00 90 FD | 	jmp	#LR__2315
1d6a0     08 01 90 FD | 	jmp	#LR__2316
1d6a4     1C 01 90 FD | 	jmp	#LR__2317
1d6a8     30 01 90 FD | 	jmp	#LR__2318
1d6ac     44 01 90 FD | 	jmp	#LR__2319
1d6b0     58 01 90 FD | 	jmp	#LR__2320
1d6b4     6C 01 90 FD | 	jmp	#LR__2321
1d6b8                 | LR__2309
1d6b8     A7 12 02 F6 | 	mov	arg01, fp
1d6bc     30 4E 05 F1 | 	add	fp, #48
1d6c0     A7 14 02 FB | 	rdlong	arg02, fp
1d6c4     30 4E 85 F1 | 	sub	fp, #48
1d6c8     0C 16 06 F6 | 	mov	arg03, #12
1d6cc     0B 00 00 FF 
1d6d0     CC E4 05 F1 | 	add	objptr, ##5836
1d6d4     D8 91 B0 FD | 	call	#_psram_spin2_write
1d6d8     0B 00 00 FF 
1d6dc     CC E4 85 F1 | 	sub	objptr, ##5836
1d6e0     4C 01 90 FD | 	jmp	#LR__2322
1d6e4                 | LR__2310
1d6e4     30 4E 05 F1 | 	add	fp, #48
1d6e8     A7 12 02 FB | 	rdlong	arg01, fp
1d6ec     30 4E 85 F1 | 	sub	fp, #48
1d6f0     A7 14 02 FB | 	rdlong	arg02, fp
1d6f4     D8 65 B0 FD | 	call	#_pspoke
1d6f8     34 01 90 FD | 	jmp	#LR__2322
1d6fc                 | LR__2311
1d6fc     30 4E 05 F1 | 	add	fp, #48
1d700     A7 12 02 FB | 	rdlong	arg01, fp
1d704     30 4E 85 F1 | 	sub	fp, #48
1d708     A7 14 02 FB | 	rdlong	arg02, fp
1d70c     C0 65 B0 FD | 	call	#_pspoke
1d710     1C 01 90 FD | 	jmp	#LR__2322
1d714                 | LR__2312
1d714     30 4E 05 F1 | 	add	fp, #48
1d718     A7 12 02 FB | 	rdlong	arg01, fp
1d71c     30 4E 85 F1 | 	sub	fp, #48
1d720     A7 14 02 FB | 	rdlong	arg02, fp
1d724     A8 65 B0 FD | 	call	#_pspoke
1d728     30 4E 05 F1 | 	add	fp, #48
1d72c     A7 12 02 FB | 	rdlong	arg01, fp
1d730     30 4E 85 F1 | 	sub	fp, #48
1d734     01 12 06 F1 | 	add	arg01, #1
1d738     A7 14 02 FB | 	rdlong	arg02, fp
1d73c     08 14 46 F0 | 	shr	arg02, #8
1d740     8C 65 B0 FD | 	call	#_pspoke
1d744     E8 00 90 FD | 	jmp	#LR__2322
1d748                 | LR__2313
1d748     30 4E 05 F1 | 	add	fp, #48
1d74c     A7 12 02 FB | 	rdlong	arg01, fp
1d750     30 4E 85 F1 | 	sub	fp, #48
1d754     A7 14 02 FB | 	rdlong	arg02, fp
1d758     74 65 B0 FD | 	call	#_pspoke
1d75c     30 4E 05 F1 | 	add	fp, #48
1d760     A7 12 02 FB | 	rdlong	arg01, fp
1d764     30 4E 85 F1 | 	sub	fp, #48
1d768     01 12 06 F1 | 	add	arg01, #1
1d76c     A7 14 02 FB | 	rdlong	arg02, fp
1d770     08 14 46 F0 | 	shr	arg02, #8
1d774     58 65 B0 FD | 	call	#_pspoke
1d778     B4 00 90 FD | 	jmp	#LR__2322
1d77c                 | LR__2314
1d77c     30 4E 05 F1 | 	add	fp, #48
1d780     A7 12 02 FB | 	rdlong	arg01, fp
1d784     30 4E 85 F1 | 	sub	fp, #48
1d788     A7 14 02 FB | 	rdlong	arg02, fp
1d78c     B0 64 B0 FD | 	call	#_pslpoke
1d790     9C 00 90 FD | 	jmp	#LR__2322
1d794                 | LR__2315
1d794     30 4E 05 F1 | 	add	fp, #48
1d798     A7 12 02 FB | 	rdlong	arg01, fp
1d79c     30 4E 85 F1 | 	sub	fp, #48
1d7a0     A7 14 02 FB | 	rdlong	arg02, fp
1d7a4     98 64 B0 FD | 	call	#_pslpoke
1d7a8     84 00 90 FD | 	jmp	#LR__2322
1d7ac                 | LR__2316
1d7ac     30 4E 05 F1 | 	add	fp, #48
1d7b0     A7 12 02 FB | 	rdlong	arg01, fp
1d7b4     30 4E 85 F1 | 	sub	fp, #48
1d7b8     A7 14 02 FB | 	rdlong	arg02, fp
1d7bc     80 64 B0 FD | 	call	#_pslpoke
1d7c0     6C 00 90 FD | 	jmp	#LR__2322
1d7c4                 | LR__2317
1d7c4     30 4E 05 F1 | 	add	fp, #48
1d7c8     A7 12 02 FB | 	rdlong	arg01, fp
1d7cc     30 4E 85 F1 | 	sub	fp, #48
1d7d0     A7 14 02 FB | 	rdlong	arg02, fp
1d7d4     68 64 B0 FD | 	call	#_pslpoke
1d7d8     54 00 90 FD | 	jmp	#LR__2322
1d7dc                 | LR__2318
1d7dc     30 4E 05 F1 | 	add	fp, #48
1d7e0     A7 12 02 FB | 	rdlong	arg01, fp
1d7e4     30 4E 85 F1 | 	sub	fp, #48
1d7e8     A7 14 02 FB | 	rdlong	arg02, fp
1d7ec     50 64 B0 FD | 	call	#_pslpoke
1d7f0     3C 00 90 FD | 	jmp	#LR__2322
1d7f4                 | LR__2319
1d7f4     30 4E 05 F1 | 	add	fp, #48
1d7f8     A7 12 02 FB | 	rdlong	arg01, fp
1d7fc     30 4E 85 F1 | 	sub	fp, #48
1d800     A7 14 02 FB | 	rdlong	arg02, fp
1d804     38 64 B0 FD | 	call	#_pslpoke
1d808     24 00 90 FD | 	jmp	#LR__2322
1d80c                 | LR__2320
1d80c     30 4E 05 F1 | 	add	fp, #48
1d810     A7 12 02 FB | 	rdlong	arg01, fp
1d814     30 4E 85 F1 | 	sub	fp, #48
1d818     A7 14 02 FB | 	rdlong	arg02, fp
1d81c     20 64 B0 FD | 	call	#_pslpoke
1d820     0C 00 90 FD | 	jmp	#LR__2322
1d824                 | LR__2321
1d824     32 12 06 F6 | 	mov	arg01, #50
1d828     00 14 06 F6 | 	mov	arg02, #0
1d82c     70 62 B0 FD | 	call	#_printerror
1d830                 | LR__2322
1d830                 | LR__2323
1d830     A7 F0 03 F6 | 	mov	ptra, fp
1d834     B2 00 A0 FD | 	call	#popregs_
1d838                 | _do_assign_ret
1d838     2D 00 64 FD | 	ret
1d83c                 | 
1d83c                 | ' 
1d83c                 | ' 
1d83c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1d83c                 | ' 
1d83c                 | ' sub do_getvar
1d83c                 | _do_getvar
1d83c     04 4A 05 F6 | 	mov	COUNT_, #4
1d840     A8 00 A0 FD | 	call	#pushregs_
1d844     3C F0 07 F1 | 	add	ptra, #60
1d848                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d848     4A 00 00 FF 
1d84c     80 E4 05 F1 | 	add	objptr, ##38016
1d850     F2 26 02 FB | 	rdlong	local01, objptr
1d854     13 17 02 F6 | 	mov	arg03, local01
1d858     01 16 66 F0 | 	shl	arg03, #1
1d85c     13 17 02 F1 | 	add	arg03, local01
1d860     02 16 66 F0 | 	shl	arg03, #2
1d864     03 00 00 FF 
1d868     04 E4 85 F1 | 	sub	objptr, ##1540
1d86c     F2 16 02 F1 | 	add	arg03, objptr
1d870     04 16 06 F1 | 	add	arg03, #4
1d874     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1d878     47 00 00 FF 
1d87c     7C E4 85 F1 | 	sub	objptr, ##36476
1d880     C4 00 90 5D |  if_ne	jmp	#LR__2331
1d884     4A 00 00 FF 
1d888     80 E4 05 F1 | 	add	objptr, ##38016
1d88c     F2 26 02 FB | 	rdlong	local01, objptr
1d890     13 13 02 F6 | 	mov	arg01, local01
1d894     01 12 66 F0 | 	shl	arg01, #1
1d898     13 13 02 F1 | 	add	arg01, local01
1d89c     02 12 66 F0 | 	shl	arg01, #2
1d8a0     03 00 00 FF 
1d8a4     04 E4 85 F1 | 	sub	objptr, ##1540
1d8a8     F2 12 02 F1 | 	add	arg01, objptr
1d8ac     09 27 02 FB | 	rdlong	local01, arg01
1d8b0     04 26 66 F0 | 	shl	local01, #4
1d8b4     32 00 00 FF 
1d8b8     84 E4 85 F1 | 	sub	objptr, ##25732
1d8bc     F2 26 02 F1 | 	add	local01, objptr
1d8c0     04 26 06 F1 | 	add	local01, #4
1d8c4     13 13 02 FB | 	rdlong	arg01, local01
1d8c8     04 26 06 F1 | 	add	local01, #4
1d8cc     13 27 02 FB | 	rdlong	local01, local01
1d8d0     A7 12 62 FC | 	wrlong	arg01, fp
1d8d4     04 4E 05 F1 | 	add	fp, #4
1d8d8     A7 26 62 FC | 	wrlong	local01, fp
1d8dc     35 00 00 FF 
1d8e0     88 E4 05 F1 | 	add	objptr, ##27272
1d8e4     F2 26 02 FB | 	rdlong	local01, objptr
1d8e8     13 13 02 F6 | 	mov	arg01, local01
1d8ec     01 12 66 F0 | 	shl	arg01, #1
1d8f0     13 13 02 F1 | 	add	arg01, local01
1d8f4     02 12 66 F0 | 	shl	arg01, #2
1d8f8     03 00 00 FF 
1d8fc     04 E4 85 F1 | 	sub	objptr, ##1540
1d900     F2 12 02 F1 | 	add	arg01, objptr
1d904     09 27 02 FB | 	rdlong	local01, arg01
1d908     04 26 66 F0 | 	shl	local01, #4
1d90c     32 00 00 FF 
1d910     84 E4 85 F1 | 	sub	objptr, ##25732
1d914     F2 26 02 F1 | 	add	local01, objptr
1d918     0C 26 06 F1 | 	add	local01, #12
1d91c     13 27 02 FB | 	rdlong	local01, local01
1d920     04 4E 05 F1 | 	add	fp, #4
1d924     A7 26 62 FC | 	wrlong	local01, fp
1d928                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1d928                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d928                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1d928     08 4E 85 F1 | 	sub	fp, #8
1d92c     00 27 16 F2 | 	cmp	local01, #256 wc
1d930     14 00 00 FF 
1d934     F8 E5 85 F1 | 	sub	objptr, ##10744
1d938     0C 00 90 3D |  if_ae	jmp	#LR__2330
1d93c     A7 12 02 F6 | 	mov	arg01, fp
1d940     00 FF BE FD | 	call	#_push
1d944     A0 04 90 FD | 	jmp	#LR__2352
1d948                 | LR__2330
1d948                 | LR__2331
1d948     4A 00 00 FF 
1d94c     80 E4 05 F1 | 	add	objptr, ##38016
1d950     F2 16 02 FB | 	rdlong	arg03, objptr
1d954     0B 15 02 F6 | 	mov	arg02, arg03
1d958     01 14 66 F0 | 	shl	arg02, #1
1d95c     0B 15 02 F1 | 	add	arg02, arg03
1d960     02 14 66 F0 | 	shl	arg02, #2
1d964     03 00 00 FF 
1d968     04 E4 85 F1 | 	sub	objptr, ##1540
1d96c     F2 14 02 F1 | 	add	arg02, objptr
1d970     0A 17 02 FB | 	rdlong	arg03, arg02
1d974     04 16 66 F0 | 	shl	arg03, #4
1d978     32 00 00 FF 
1d97c     84 E4 85 F1 | 	sub	objptr, ##25732
1d980     F2 16 02 F1 | 	add	arg03, objptr
1d984     04 16 06 F1 | 	add	arg03, #4
1d988     0B 13 02 FB | 	rdlong	arg01, arg03
1d98c     0C 4E 05 F1 | 	add	fp, #12
1d990     A7 12 62 FC | 	wrlong	arg01, fp
1d994     0C 4E 85 F1 | 	sub	fp, #12
1d998     14 00 00 FF 
1d99c     F8 E5 85 F1 | 	sub	objptr, ##10744
1d9a0     CC 63 B0 FD | 	call	#_pslpeek
1d9a4     FD FA 31 F9 | 	getword	result1, result1, #0
1d9a8     10 4E 05 F1 | 	add	fp, #16
1d9ac     A7 FA 61 FC | 	wrlong	result1, fp
1d9b0     4A 00 00 FF 
1d9b4     80 E4 05 F1 | 	add	objptr, ##38016
1d9b8     F2 16 02 FB | 	rdlong	arg03, objptr
1d9bc     0B 15 02 F6 | 	mov	arg02, arg03
1d9c0     01 14 66 F0 | 	shl	arg02, #1
1d9c4     0B 15 02 F1 | 	add	arg02, arg03
1d9c8     02 14 66 F0 | 	shl	arg02, #2
1d9cc     03 00 00 FF 
1d9d0     04 E4 85 F1 | 	sub	objptr, ##1540
1d9d4     F2 14 02 F1 | 	add	arg02, objptr
1d9d8     04 14 06 F1 | 	add	arg02, #4
1d9dc     0A 17 02 FB | 	rdlong	arg03, arg02
1d9e0     04 4E 05 F1 | 	add	fp, #4
1d9e4     A7 16 62 FC | 	wrlong	arg03, fp
1d9e8     08 4E 85 F1 | 	sub	fp, #8
1d9ec     A7 12 02 FB | 	rdlong	arg01, fp
1d9f0     0C 4E 85 F1 | 	sub	fp, #12
1d9f4     02 12 06 F1 | 	add	arg01, #2
1d9f8     47 00 00 FF 
1d9fc     7C E4 85 F1 | 	sub	objptr, ##36476
1da00     14 63 B0 FD | 	call	#_pspeek
1da04     FD FA E1 F8 | 	getbyte	result1, result1, #0
1da08     18 4E 05 F1 | 	add	fp, #24
1da0c     A7 FA 61 FC | 	wrlong	result1, fp
1da10     0C 4E 85 F1 | 	sub	fp, #12
1da14     A7 12 02 FB | 	rdlong	arg01, fp
1da18     0C 4E 85 F1 | 	sub	fp, #12
1da1c     04 12 06 F1 | 	add	arg01, #4
1da20     4C 63 B0 FD | 	call	#_pslpeek
1da24     1C 4E 05 F1 | 	add	fp, #28
1da28     A7 FA 61 FC | 	wrlong	result1, fp
1da2c     10 4E 85 F1 | 	sub	fp, #16
1da30     A7 12 02 FB | 	rdlong	arg01, fp
1da34     0C 4E 85 F1 | 	sub	fp, #12
1da38     08 12 06 F1 | 	add	arg01, #8
1da3c     30 63 B0 FD | 	call	#_pslpeek
1da40     20 4E 05 F1 | 	add	fp, #32
1da44     A7 FA 61 FC | 	wrlong	result1, fp
1da48     14 4E 85 F1 | 	sub	fp, #20
1da4c     A7 12 02 FB | 	rdlong	arg01, fp
1da50     0C 4E 85 F1 | 	sub	fp, #12
1da54     0C 12 06 F1 | 	add	arg01, #12
1da58     14 63 B0 FD | 	call	#_pslpeek
1da5c     24 4E 05 F1 | 	add	fp, #36
1da60     A7 FA 61 FC | 	wrlong	result1, fp
1da64                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1da64                 | ' esize=pspeek(arrptr+2)
1da64                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1da64                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1da64                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1da64                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1da64     10 4E 85 F1 | 	sub	fp, #16
1da68     A7 16 02 FB | 	rdlong	arg03, fp
1da6c     14 4E 85 F1 | 	sub	fp, #20
1da70     03 16 16 F2 | 	cmp	arg03, #3 wc
1da74     38 00 90 CD |  if_b	jmp	#LR__2332
1da78     30 FD BE FD | 	call	#_pop
1da7c     FF 16 02 F6 | 	mov	arg03, result3
1da80     A7 FA 61 FC | 	wrlong	result1, fp
1da84     04 4E 05 F1 | 	add	fp, #4
1da88     A7 FC 61 FC | 	wrlong	result2, fp
1da8c     04 4E 05 F1 | 	add	fp, #4
1da90     A7 16 62 FC | 	wrlong	arg03, fp
1da94     08 4E 85 F1 | 	sub	fp, #8
1da98     A7 12 02 F6 | 	mov	arg01, fp
1da9c     F0 FE BE FD | 	call	#_converttoint
1daa0     30 4E 05 F1 | 	add	fp, #48
1daa4     A7 FA 61 FC | 	wrlong	result1, fp
1daa8     30 4E 85 F1 | 	sub	fp, #48
1daac     0C 00 90 FD | 	jmp	#LR__2333
1dab0                 | LR__2332
1dab0     30 4E 05 F1 | 	add	fp, #48
1dab4     A7 00 68 FC | 	wrlong	#0, fp
1dab8     30 4E 85 F1 | 	sub	fp, #48
1dabc                 | LR__2333
1dabc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1dabc     14 4E 05 F1 | 	add	fp, #20
1dac0     A7 16 02 FB | 	rdlong	arg03, fp
1dac4     14 4E 85 F1 | 	sub	fp, #20
1dac8     02 16 16 F2 | 	cmp	arg03, #2 wc
1dacc     38 00 90 CD |  if_b	jmp	#LR__2334
1dad0     D8 FC BE FD | 	call	#_pop
1dad4     FF 16 02 F6 | 	mov	arg03, result3
1dad8     A7 FA 61 FC | 	wrlong	result1, fp
1dadc     04 4E 05 F1 | 	add	fp, #4
1dae0     A7 FC 61 FC | 	wrlong	result2, fp
1dae4     04 4E 05 F1 | 	add	fp, #4
1dae8     A7 16 62 FC | 	wrlong	arg03, fp
1daec     08 4E 85 F1 | 	sub	fp, #8
1daf0     A7 12 02 F6 | 	mov	arg01, fp
1daf4     98 FE BE FD | 	call	#_converttoint
1daf8     2C 4E 05 F1 | 	add	fp, #44
1dafc     A7 FA 61 FC | 	wrlong	result1, fp
1db00     2C 4E 85 F1 | 	sub	fp, #44
1db04     0C 00 90 FD | 	jmp	#LR__2335
1db08                 | LR__2334
1db08     2C 4E 05 F1 | 	add	fp, #44
1db0c     A7 00 68 FC | 	wrlong	#0, fp
1db10     2C 4E 85 F1 | 	sub	fp, #44
1db14                 | LR__2335
1db14                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1db14     14 4E 05 F1 | 	add	fp, #20
1db18     A7 16 02 FB | 	rdlong	arg03, fp
1db1c     14 4E 85 F1 | 	sub	fp, #20
1db20     01 16 16 F2 | 	cmp	arg03, #1 wc
1db24     38 00 90 CD |  if_b	jmp	#LR__2336
1db28     80 FC BE FD | 	call	#_pop
1db2c     FF 16 02 F6 | 	mov	arg03, result3
1db30     A7 FA 61 FC | 	wrlong	result1, fp
1db34     04 4E 05 F1 | 	add	fp, #4
1db38     A7 FC 61 FC | 	wrlong	result2, fp
1db3c     04 4E 05 F1 | 	add	fp, #4
1db40     A7 16 62 FC | 	wrlong	arg03, fp
1db44     08 4E 85 F1 | 	sub	fp, #8
1db48     A7 12 02 F6 | 	mov	arg01, fp
1db4c     40 FE BE FD | 	call	#_converttoint
1db50     28 4E 05 F1 | 	add	fp, #40
1db54     A7 FA 61 FC | 	wrlong	result1, fp
1db58     28 4E 85 F1 | 	sub	fp, #40
1db5c     0C 00 90 FD | 	jmp	#LR__2337
1db60                 | LR__2336
1db60     28 4E 05 F1 | 	add	fp, #40
1db64     A7 00 68 FC | 	wrlong	#0, fp
1db68     28 4E 85 F1 | 	sub	fp, #40
1db6c                 | LR__2337
1db6c     0C 4E 05 F1 | 	add	fp, #12
1db70     A7 28 02 FB | 	rdlong	local02, fp
1db74     1C 4E 05 F1 | 	add	fp, #28
1db78     A7 2A 02 FB | 	rdlong	local03, fp
1db7c     04 4E 05 F1 | 	add	fp, #4
1db80     A7 FC 01 FB | 	rdlong	result2, fp
1db84     10 4E 85 F1 | 	sub	fp, #16
1db88     A7 FE 01 FB | 	rdlong	result3, fp
1db8c     FF FC 01 FD | 	qmul	result2, result3
1db90     10 28 06 F1 | 	add	local02, #16
1db94     14 4E 05 F1 | 	add	fp, #20
1db98     A7 FC 01 FB | 	rdlong	result2, fp
1db9c     18 FA 61 FD | 	getqx	result1
1dba0     FF FC 01 FD | 	qmul	result2, result3
1dba4     FD 2A 02 F1 | 	add	local03, result1
1dba8     10 4E 85 F1 | 	sub	fp, #16
1dbac     A7 FE 01 FB | 	rdlong	result3, fp
1dbb0     18 FC 61 FD | 	getqx	result2
1dbb4     FF FC 01 FD | 	qmul	result2, result3
1dbb8     08 4E 85 F1 | 	sub	fp, #8
1dbbc     A7 FE 01 FB | 	rdlong	result3, fp
1dbc0     18 FC 61 FD | 	getqx	result2
1dbc4     FE 2A 02 F1 | 	add	local03, result2
1dbc8     FF 2A 02 FD | 	qmul	local03, result3
1dbcc     1C 4E 05 F1 | 	add	fp, #28
1dbd0                 | ' 
1dbd0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1dbd0                 | ' 
1dbd0                 | ' select case vartype
1dbd0     18 FC 61 FD | 	getqx	result2
1dbd4     FE 28 02 F1 | 	add	local02, result2
1dbd8     A7 28 62 FC | 	wrlong	local02, fp
1dbdc     24 4E 85 F1 | 	sub	fp, #36
1dbe0     A7 2C 02 FB | 	rdlong	local04, fp
1dbe4     10 4E 85 F1 | 	sub	fp, #16
1dbe8     00 2D 86 F1 | 	sub	local04, #256
1dbec     0C 2C 26 F3 | 	fle	local04, #12
1dbf0     30 2C 62 FD | 	jmprel	local04
1dbf4                 | LR__2338
1dbf4     30 00 90 FD | 	jmp	#LR__2339
1dbf8     58 00 90 FD | 	jmp	#LR__2340
1dbfc     8C 00 90 FD | 	jmp	#LR__2341
1dc00     AC 00 90 FD | 	jmp	#LR__2342
1dc04     E8 00 90 FD | 	jmp	#LR__2343
1dc08     08 01 90 FD | 	jmp	#LR__2344
1dc0c     24 01 90 FD | 	jmp	#LR__2345
1dc10     40 01 90 FD | 	jmp	#LR__2346
1dc14     50 01 90 FD | 	jmp	#LR__2347
1dc18     60 01 90 FD | 	jmp	#LR__2348
1dc1c     7C 01 90 FD | 	jmp	#LR__2349
1dc20     8C 01 90 FD | 	jmp	#LR__2350
1dc24     B8 01 90 FD | 	jmp	#LR__2351
1dc28                 | LR__2339
1dc28     A7 12 02 F6 | 	mov	arg01, fp
1dc2c     34 4E 05 F1 | 	add	fp, #52
1dc30     A7 14 02 FB | 	rdlong	arg02, fp
1dc34     34 4E 85 F1 | 	sub	fp, #52
1dc38     0C 16 06 F6 | 	mov	arg03, #12
1dc3c     0B 00 00 FF 
1dc40     CC E4 05 F1 | 	add	objptr, ##5836
1dc44     CC 8B B0 FD | 	call	#_psram_spin2_read1
1dc48     0B 00 00 FF 
1dc4c     CC E4 85 F1 | 	sub	objptr, ##5836
1dc50     8C 01 90 FD | 	jmp	#LR__2351
1dc54                 | LR__2340
1dc54     08 4E 05 F1 | 	add	fp, #8
1dc58     A7 38 68 FC | 	wrlong	#28, fp
1dc5c     2C 4E 05 F1 | 	add	fp, #44
1dc60     A7 12 02 FB | 	rdlong	arg01, fp
1dc64     34 4E 85 F1 | 	sub	fp, #52
1dc68     AC 60 B0 FD | 	call	#_pspeek
1dc6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1dc70     A7 FA 61 FC | 	wrlong	result1, fp
1dc74     80 FA 15 F2 | 	cmp	result1, #128 wc
1dc78     00 27 66 36 |  if_ae	neg	local01, #256
1dc7c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1dc80     15 27 42 35 |  if_ae	or	local01, local03
1dc84     A7 26 62 3C |  if_ae	wrlong	local01, fp
1dc88     54 01 90 FD | 	jmp	#LR__2351
1dc8c                 | LR__2341
1dc8c     08 4E 05 F1 | 	add	fp, #8
1dc90     A7 3A 68 FC | 	wrlong	#29, fp
1dc94     2C 4E 05 F1 | 	add	fp, #44
1dc98     A7 12 02 FB | 	rdlong	arg01, fp
1dc9c     34 4E 85 F1 | 	sub	fp, #52
1dca0     74 60 B0 FD | 	call	#_pspeek
1dca4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1dca8     A7 FA 61 FC | 	wrlong	result1, fp
1dcac     30 01 90 FD | 	jmp	#LR__2351
1dcb0                 | LR__2342
1dcb0     08 4E 05 F1 | 	add	fp, #8
1dcb4     A7 38 68 FC | 	wrlong	#28, fp
1dcb8     2C 4E 05 F1 | 	add	fp, #44
1dcbc     A7 12 02 FB | 	rdlong	arg01, fp
1dcc0     34 4E 85 F1 | 	sub	fp, #52
1dcc4     A8 60 B0 FD | 	call	#_pslpeek
1dcc8     FD FA 31 F9 | 	getword	result1, result1, #0
1dccc     A7 FA 61 FC | 	wrlong	result1, fp
1dcd0     40 00 00 FF 
1dcd4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1dcd8     FF 7F 00 3F 
1dcdc     00 27 06 36 |  if_ae	mov	local01, ##16776960
1dce0     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1dce4     15 27 42 35 |  if_ae	or	local01, local03
1dce8     A7 26 62 3C |  if_ae	wrlong	local01, fp
1dcec     F0 00 90 FD | 	jmp	#LR__2351
1dcf0                 | LR__2343
1dcf0     08 4E 05 F1 | 	add	fp, #8
1dcf4     A7 3A 68 FC | 	wrlong	#29, fp
1dcf8     2C 4E 05 F1 | 	add	fp, #44
1dcfc     A7 12 02 FB | 	rdlong	arg01, fp
1dd00     34 4E 85 F1 | 	sub	fp, #52
1dd04     68 60 B0 FD | 	call	#_pslpeek
1dd08     FD FA 31 F9 | 	getword	result1, result1, #0
1dd0c     A7 FA 61 FC | 	wrlong	result1, fp
1dd10     CC 00 90 FD | 	jmp	#LR__2351
1dd14                 | LR__2344
1dd14     08 4E 05 F1 | 	add	fp, #8
1dd18     A7 38 68 FC | 	wrlong	#28, fp
1dd1c     2C 4E 05 F1 | 	add	fp, #44
1dd20     A7 12 02 FB | 	rdlong	arg01, fp
1dd24     34 4E 85 F1 | 	sub	fp, #52
1dd28     44 60 B0 FD | 	call	#_pslpeek
1dd2c     A7 FA 61 FC | 	wrlong	result1, fp
1dd30     AC 00 90 FD | 	jmp	#LR__2351
1dd34                 | LR__2345
1dd34     08 4E 05 F1 | 	add	fp, #8
1dd38     A7 3A 68 FC | 	wrlong	#29, fp
1dd3c     2C 4E 05 F1 | 	add	fp, #44
1dd40     A7 12 02 FB | 	rdlong	arg01, fp
1dd44     34 4E 85 F1 | 	sub	fp, #52
1dd48     24 60 B0 FD | 	call	#_pslpeek
1dd4c     A7 FA 61 FC | 	wrlong	result1, fp
1dd50     8C 00 90 FD | 	jmp	#LR__2351
1dd54                 | LR__2346
1dd54     08 4E 05 F1 | 	add	fp, #8
1dd58     A7 FE 69 FC | 	wrlong	#255, fp
1dd5c     08 4E 85 F1 | 	sub	fp, #8
1dd60     A7 60 68 FC | 	wrlong	#48, fp
1dd64     78 00 90 FD | 	jmp	#LR__2351
1dd68                 | LR__2347
1dd68     08 4E 05 F1 | 	add	fp, #8
1dd6c     A7 FE 69 FC | 	wrlong	#255, fp
1dd70     08 4E 85 F1 | 	sub	fp, #8
1dd74     A7 60 68 FC | 	wrlong	#48, fp
1dd78     64 00 90 FD | 	jmp	#LR__2351
1dd7c                 | LR__2348
1dd7c     08 4E 05 F1 | 	add	fp, #8
1dd80     A7 3C 68 FC | 	wrlong	#30, fp
1dd84     2C 4E 05 F1 | 	add	fp, #44
1dd88     A7 12 02 FB | 	rdlong	arg01, fp
1dd8c     34 4E 85 F1 | 	sub	fp, #52
1dd90     DC 5F B0 FD | 	call	#_pslpeek
1dd94     A7 FA 61 FC | 	wrlong	result1, fp
1dd98     44 00 90 FD | 	jmp	#LR__2351
1dd9c                 | LR__2349
1dd9c     08 4E 05 F1 | 	add	fp, #8
1dda0     A7 FE 69 FC | 	wrlong	#255, fp
1dda4     08 4E 85 F1 | 	sub	fp, #8
1dda8     A7 60 68 FC | 	wrlong	#48, fp
1ddac     30 00 90 FD | 	jmp	#LR__2351
1ddb0                 | LR__2350
1ddb0     08 4E 05 F1 | 	add	fp, #8
1ddb4     A7 3E 68 FC | 	wrlong	#31, fp
1ddb8     2C 4E 05 F1 | 	add	fp, #44
1ddbc     A7 12 02 FB | 	rdlong	arg01, fp
1ddc0     34 4E 85 F1 | 	sub	fp, #52
1ddc4     A8 5F B0 FD | 	call	#_pslpeek
1ddc8     A7 FA 61 FC | 	wrlong	result1, fp
1ddcc     00 04 00 FF 
1ddd0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1ddd4     08 4E 05 31 |  if_ae	add	fp, #8
1ddd8     A7 56 68 3C |  if_ae	wrlong	#43, fp
1dddc     08 4E 85 31 |  if_ae	sub	fp, #8
1dde0                 | LR__2351
1dde0     A7 12 02 F6 | 	mov	arg01, fp
1dde4     5C FA BE FD | 	call	#_push
1dde8                 | LR__2352
1dde8     A7 F0 03 F6 | 	mov	ptra, fp
1ddec     B2 00 A0 FD | 	call	#popregs_
1ddf0                 | _do_getvar_ret
1ddf0     2D 00 64 FD | 	ret
1ddf4                 | 
1ddf4                 | ' 
1ddf4                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1ddf4                 | ' 
1ddf4                 | ' sub do_getaddr
1ddf4                 | _do_getaddr
1ddf4     01 4A 05 F6 | 	mov	COUNT_, #1
1ddf8     A8 00 A0 FD | 	call	#pushregs_
1ddfc     38 F0 07 F1 | 	add	ptra, #56
1de00                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1de00                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1de00     4A 00 00 FF 
1de04     80 E4 05 F1 | 	add	objptr, ##38016
1de08     F2 12 02 FB | 	rdlong	arg01, objptr
1de0c     09 FD 01 F6 | 	mov	result2, arg01
1de10     01 FC 65 F0 | 	shl	result2, #1
1de14     09 FD 01 F1 | 	add	result2, arg01
1de18     02 FC 65 F0 | 	shl	result2, #2
1de1c     03 00 00 FF 
1de20     04 E4 85 F1 | 	sub	objptr, ##1540
1de24     F2 FC 01 F1 | 	add	result2, objptr
1de28     04 FC 05 F1 | 	add	result2, #4
1de2c     FE FC 09 FB | 	rdlong	result2, result2 wz
1de30     47 00 00 FF 
1de34     7C E4 85 F1 | 	sub	objptr, ##36476
1de38     10 01 90 5D |  if_ne	jmp	#LR__2360
1de3c     4A 00 00 FF 
1de40     80 E4 05 F1 | 	add	objptr, ##38016
1de44     F2 12 02 FB | 	rdlong	arg01, objptr
1de48     09 FD 01 F6 | 	mov	result2, arg01
1de4c     01 FC 65 F0 | 	shl	result2, #1
1de50     09 FD 01 F1 | 	add	result2, arg01
1de54     02 FC 65 F0 | 	shl	result2, #2
1de58     03 00 00 FF 
1de5c     04 E4 85 F1 | 	sub	objptr, ##1540
1de60     F2 FC 01 F1 | 	add	result2, objptr
1de64     FE 12 02 FB | 	rdlong	arg01, result2
1de68     04 12 66 F0 | 	shl	arg01, #4
1de6c     32 00 00 FF 
1de70     84 E4 85 F1 | 	sub	objptr, ##25732
1de74     F2 12 02 F1 | 	add	arg01, objptr
1de78     0C 12 06 F1 | 	add	arg01, #12
1de7c     09 13 02 FB | 	rdlong	arg01, arg01
1de80     08 4E 05 F1 | 	add	fp, #8
1de84     A7 12 62 FC | 	wrlong	arg01, fp
1de88                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1de88                 | '    if t1.result_type>=array_no_type then goto 2200
1de88     08 4E 85 F1 | 	sub	fp, #8
1de8c     00 13 16 F2 | 	cmp	arg01, #256 wc
1de90     14 00 00 FF 
1de94     F8 E5 85 F1 | 	sub	objptr, ##10744
1de98     B0 00 90 3D |  if_ae	jmp	#LR__2361
1de9c     4A 00 00 FF 
1dea0     80 E4 05 F1 | 	add	objptr, ##38016
1dea4     F2 12 02 FB | 	rdlong	arg01, objptr
1dea8     09 FF 01 F6 | 	mov	result3, arg01
1deac     01 FE 65 F0 | 	shl	result3, #1
1deb0     09 FF 01 F1 | 	add	result3, arg01
1deb4     02 FE 65 F0 | 	shl	result3, #2
1deb8     03 00 00 FF 
1debc     04 E4 85 F1 | 	sub	objptr, ##1540
1dec0     F2 FE 01 F1 | 	add	result3, objptr
1dec4     FF FA 01 FB | 	rdlong	result1, result3
1dec8     04 FA 65 F0 | 	shl	result1, #4
1decc     32 00 00 FF 
1ded0     84 E4 85 F1 | 	sub	objptr, ##25732
1ded4     F2 FA 01 F1 | 	add	result1, objptr
1ded8     04 FA 05 F1 | 	add	result1, #4
1dedc     A7 FA 61 FC | 	wrlong	result1, fp
1dee0     35 00 00 FF 
1dee4     88 E4 05 F1 | 	add	objptr, ##27272
1dee8     F2 FE 01 FB | 	rdlong	result3, objptr
1deec     FF 12 02 F6 | 	mov	arg01, result3
1def0     01 12 66 F0 | 	shl	arg01, #1
1def4     FF 12 02 F1 | 	add	arg01, result3
1def8     02 12 66 F0 | 	shl	arg01, #2
1defc     03 00 00 FF 
1df00     04 E4 85 F1 | 	sub	objptr, ##1540
1df04     F2 12 02 F1 | 	add	arg01, objptr
1df08     09 13 02 FB | 	rdlong	arg01, arg01
1df0c     04 12 66 F0 | 	shl	arg01, #4
1df10     32 00 00 FF 
1df14     84 E4 85 F1 | 	sub	objptr, ##25732
1df18     F2 12 02 F1 | 	add	arg01, objptr
1df1c     0C 12 06 F1 | 	add	arg01, #12
1df20     09 13 02 FB | 	rdlong	arg01, arg01
1df24     04 4E 05 F1 | 	add	fp, #4
1df28     A7 12 62 FC | 	wrlong	arg01, fp
1df2c     04 4E 05 F1 | 	add	fp, #4
1df30     A7 3A 68 FC | 	wrlong	#29, fp
1df34     08 4E 85 F1 | 	sub	fp, #8
1df38     A7 12 02 F6 | 	mov	arg01, fp
1df3c     14 00 00 FF 
1df40     F8 E5 85 F1 | 	sub	objptr, ##10744
1df44     FC F8 BE FD | 	call	#_push
1df48                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1df48                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1df48                 | '   t1.result_type=result_uint
1df48                 | '   push t1 : return
1df48     2C 03 90 FD | 	jmp	#LR__2370
1df4c                 | LR__2360
1df4c                 | LR__2361
1df4c     4A 00 00 FF 
1df50     80 E4 05 F1 | 	add	objptr, ##38016
1df54     F2 FE 01 FB | 	rdlong	result3, objptr
1df58     FF FC 01 F6 | 	mov	result2, result3
1df5c     01 FC 65 F0 | 	shl	result2, #1
1df60     FF FC 01 F1 | 	add	result2, result3
1df64     02 FC 65 F0 | 	shl	result2, #2
1df68     03 00 00 FF 
1df6c     04 E4 85 F1 | 	sub	objptr, ##1540
1df70     F2 FC 01 F1 | 	add	result2, objptr
1df74     FE FE 01 FB | 	rdlong	result3, result2
1df78     04 FE 65 F0 | 	shl	result3, #4
1df7c     32 00 00 FF 
1df80     84 E4 85 F1 | 	sub	objptr, ##25732
1df84     F2 FE 01 F1 | 	add	result3, objptr
1df88     04 FE 05 F1 | 	add	result3, #4
1df8c     FF FE 01 FB | 	rdlong	result3, result3
1df90     0C 4E 05 F1 | 	add	fp, #12
1df94     A7 FE 61 FC | 	wrlong	result3, fp
1df98     35 00 00 FF 
1df9c     88 E4 05 F1 | 	add	objptr, ##27272
1dfa0     F2 FE 01 FB | 	rdlong	result3, objptr
1dfa4     FF 12 02 F6 | 	mov	arg01, result3
1dfa8     01 12 66 F0 | 	shl	arg01, #1
1dfac     FF 12 02 F1 | 	add	arg01, result3
1dfb0     02 12 66 F0 | 	shl	arg01, #2
1dfb4     03 00 00 FF 
1dfb8     04 E4 85 F1 | 	sub	objptr, ##1540
1dfbc     F2 12 02 F1 | 	add	arg01, objptr
1dfc0     09 13 02 FB | 	rdlong	arg01, arg01
1dfc4     04 12 66 F0 | 	shl	arg01, #4
1dfc8     32 00 00 FF 
1dfcc     84 E4 85 F1 | 	sub	objptr, ##25732
1dfd0     F2 12 02 F1 | 	add	arg01, objptr
1dfd4     0C 12 06 F1 | 	add	arg01, #12
1dfd8     09 13 02 FB | 	rdlong	arg01, arg01
1dfdc     08 4E 85 F1 | 	sub	fp, #8
1dfe0     A7 12 62 FC | 	wrlong	arg01, fp
1dfe4     08 4E 05 F1 | 	add	fp, #8
1dfe8     A7 12 02 FB | 	rdlong	arg01, fp
1dfec     0C 4E 85 F1 | 	sub	fp, #12
1dff0     14 00 00 FF 
1dff4     F8 E5 85 F1 | 	sub	objptr, ##10744
1dff8     74 5D B0 FD | 	call	#_pslpeek
1dffc     FD FA 31 F9 | 	getword	result1, result1, #0
1e000     10 4E 05 F1 | 	add	fp, #16
1e004     A7 FA 61 FC | 	wrlong	result1, fp
1e008     4A 00 00 FF 
1e00c     80 E4 05 F1 | 	add	objptr, ##38016
1e010     F2 FE 01 FB | 	rdlong	result3, objptr
1e014     FF 12 02 F6 | 	mov	arg01, result3
1e018     01 12 66 F0 | 	shl	arg01, #1
1e01c     FF 12 02 F1 | 	add	arg01, result3
1e020     02 12 66 F0 | 	shl	arg01, #2
1e024     03 00 00 FF 
1e028     04 E4 85 F1 | 	sub	objptr, ##1540
1e02c     F2 12 02 F1 | 	add	arg01, objptr
1e030     04 12 06 F1 | 	add	arg01, #4
1e034     09 13 02 FB | 	rdlong	arg01, arg01
1e038     04 4E 05 F1 | 	add	fp, #4
1e03c     A7 12 62 FC | 	wrlong	arg01, fp
1e040     08 4E 85 F1 | 	sub	fp, #8
1e044     A7 12 02 FB | 	rdlong	arg01, fp
1e048     0C 4E 85 F1 | 	sub	fp, #12
1e04c     02 12 06 F1 | 	add	arg01, #2
1e050     47 00 00 FF 
1e054     7C E4 85 F1 | 	sub	objptr, ##36476
1e058     BC 5C B0 FD | 	call	#_pspeek
1e05c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e060     18 4E 05 F1 | 	add	fp, #24
1e064     A7 FA 61 FC | 	wrlong	result1, fp
1e068     0C 4E 85 F1 | 	sub	fp, #12
1e06c     A7 12 02 FB | 	rdlong	arg01, fp
1e070     0C 4E 85 F1 | 	sub	fp, #12
1e074     04 12 06 F1 | 	add	arg01, #4
1e078     F4 5C B0 FD | 	call	#_pslpeek
1e07c     1C 4E 05 F1 | 	add	fp, #28
1e080     A7 FA 61 FC | 	wrlong	result1, fp
1e084     10 4E 85 F1 | 	sub	fp, #16
1e088     A7 12 02 FB | 	rdlong	arg01, fp
1e08c     0C 4E 85 F1 | 	sub	fp, #12
1e090     08 12 06 F1 | 	add	arg01, #8
1e094     D8 5C B0 FD | 	call	#_pslpeek
1e098     20 4E 05 F1 | 	add	fp, #32
1e09c     A7 FA 61 FC | 	wrlong	result1, fp
1e0a0     14 4E 85 F1 | 	sub	fp, #20
1e0a4     A7 12 02 FB | 	rdlong	arg01, fp
1e0a8     0C 4E 85 F1 | 	sub	fp, #12
1e0ac     0C 12 06 F1 | 	add	arg01, #12
1e0b0     BC 5C B0 FD | 	call	#_pslpeek
1e0b4     24 4E 05 F1 | 	add	fp, #36
1e0b8     A7 FA 61 FC | 	wrlong	result1, fp
1e0bc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1e0bc                 | ' esize=pspeek(arrptr+2)
1e0bc                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1e0bc                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1e0bc                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1e0bc                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1e0bc     10 4E 85 F1 | 	sub	fp, #16
1e0c0     A7 12 02 FB | 	rdlong	arg01, fp
1e0c4     14 4E 85 F1 | 	sub	fp, #20
1e0c8     03 12 16 F2 | 	cmp	arg01, #3 wc
1e0cc     34 00 90 CD |  if_b	jmp	#LR__2362
1e0d0     D8 F6 BE FD | 	call	#_pop
1e0d4     A7 FA 61 FC | 	wrlong	result1, fp
1e0d8     04 4E 05 F1 | 	add	fp, #4
1e0dc     A7 FC 61 FC | 	wrlong	result2, fp
1e0e0     04 4E 05 F1 | 	add	fp, #4
1e0e4     A7 FE 61 FC | 	wrlong	result3, fp
1e0e8     08 4E 85 F1 | 	sub	fp, #8
1e0ec     A7 12 02 F6 | 	mov	arg01, fp
1e0f0     9C F8 BE FD | 	call	#_converttoint
1e0f4     30 4E 05 F1 | 	add	fp, #48
1e0f8     A7 FA 61 FC | 	wrlong	result1, fp
1e0fc     30 4E 85 F1 | 	sub	fp, #48
1e100     0C 00 90 FD | 	jmp	#LR__2363
1e104                 | LR__2362
1e104     30 4E 05 F1 | 	add	fp, #48
1e108     A7 00 68 FC | 	wrlong	#0, fp
1e10c     30 4E 85 F1 | 	sub	fp, #48
1e110                 | LR__2363
1e110                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1e110     14 4E 05 F1 | 	add	fp, #20
1e114     A7 12 02 FB | 	rdlong	arg01, fp
1e118     14 4E 85 F1 | 	sub	fp, #20
1e11c     02 12 16 F2 | 	cmp	arg01, #2 wc
1e120     34 00 90 CD |  if_b	jmp	#LR__2364
1e124     84 F6 BE FD | 	call	#_pop
1e128     A7 FA 61 FC | 	wrlong	result1, fp
1e12c     04 4E 05 F1 | 	add	fp, #4
1e130     A7 FC 61 FC | 	wrlong	result2, fp
1e134     04 4E 05 F1 | 	add	fp, #4
1e138     A7 FE 61 FC | 	wrlong	result3, fp
1e13c     08 4E 85 F1 | 	sub	fp, #8
1e140     A7 12 02 F6 | 	mov	arg01, fp
1e144     48 F8 BE FD | 	call	#_converttoint
1e148     2C 4E 05 F1 | 	add	fp, #44
1e14c     A7 FA 61 FC | 	wrlong	result1, fp
1e150     2C 4E 85 F1 | 	sub	fp, #44
1e154     0C 00 90 FD | 	jmp	#LR__2365
1e158                 | LR__2364
1e158     2C 4E 05 F1 | 	add	fp, #44
1e15c     A7 00 68 FC | 	wrlong	#0, fp
1e160     2C 4E 85 F1 | 	sub	fp, #44
1e164                 | LR__2365
1e164                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1e164     14 4E 05 F1 | 	add	fp, #20
1e168     A7 12 02 FB | 	rdlong	arg01, fp
1e16c     14 4E 85 F1 | 	sub	fp, #20
1e170     01 12 16 F2 | 	cmp	arg01, #1 wc
1e174     34 00 90 CD |  if_b	jmp	#LR__2366
1e178     30 F6 BE FD | 	call	#_pop
1e17c     A7 FA 61 FC | 	wrlong	result1, fp
1e180     04 4E 05 F1 | 	add	fp, #4
1e184     A7 FC 61 FC | 	wrlong	result2, fp
1e188     04 4E 05 F1 | 	add	fp, #4
1e18c     A7 FE 61 FC | 	wrlong	result3, fp
1e190     08 4E 85 F1 | 	sub	fp, #8
1e194     A7 12 02 F6 | 	mov	arg01, fp
1e198     F4 F7 BE FD | 	call	#_converttoint
1e19c     28 4E 05 F1 | 	add	fp, #40
1e1a0     A7 FA 61 FC | 	wrlong	result1, fp
1e1a4     28 4E 85 F1 | 	sub	fp, #40
1e1a8     0C 00 90 FD | 	jmp	#LR__2367
1e1ac                 | LR__2366
1e1ac     28 4E 05 F1 | 	add	fp, #40
1e1b0     A7 00 68 FC | 	wrlong	#0, fp
1e1b4     28 4E 85 F1 | 	sub	fp, #40
1e1b8                 | LR__2367
1e1b8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1e1b8                 | ' if numpar>0 then
1e1b8     14 4E 05 F1 | 	add	fp, #20
1e1bc     A7 FE 01 FB | 	rdlong	result3, fp
1e1c0     14 4E 85 F1 | 	sub	fp, #20
1e1c4     01 FE 15 F2 | 	cmp	result3, #1 wc
1e1c8     8C 00 90 CD |  if_b	jmp	#LR__2368
1e1cc     0C 4E 05 F1 | 	add	fp, #12
1e1d0     A7 FC 01 FB | 	rdlong	result2, fp
1e1d4     1C 4E 05 F1 | 	add	fp, #28
1e1d8     A7 FE 01 FB | 	rdlong	result3, fp
1e1dc     04 4E 05 F1 | 	add	fp, #4
1e1e0     A7 12 02 FB | 	rdlong	arg01, fp
1e1e4     10 4E 85 F1 | 	sub	fp, #16
1e1e8     A7 FA 01 FB | 	rdlong	result1, fp
1e1ec     FD 12 02 FD | 	qmul	arg01, result1
1e1f0     10 FC 05 F1 | 	add	result2, #16
1e1f4     14 4E 05 F1 | 	add	fp, #20
1e1f8     A7 26 02 FB | 	rdlong	local01, fp
1e1fc     18 12 62 FD | 	getqx	arg01
1e200     FD 26 02 FD | 	qmul	local01, result1
1e204     09 FF 01 F1 | 	add	result3, arg01
1e208     10 4E 85 F1 | 	sub	fp, #16
1e20c     A7 26 02 FB | 	rdlong	local01, fp
1e210     18 FA 61 FD | 	getqx	result1
1e214     13 FB 01 FD | 	qmul	result1, local01
1e218     08 4E 85 F1 | 	sub	fp, #8
1e21c     A7 26 02 FB | 	rdlong	local01, fp
1e220     18 FA 61 FD | 	getqx	result1
1e224     FD FE 01 F1 | 	add	result3, result1
1e228     13 FF 01 FD | 	qmul	result3, local01
1e22c     1C 4E 05 F1 | 	add	fp, #28
1e230     18 26 62 FD | 	getqx	local01
1e234     13 FD 01 F1 | 	add	result2, local01
1e238     A7 FC 61 FC | 	wrlong	result2, fp
1e23c     2C 4E 85 F1 | 	sub	fp, #44
1e240     A7 3A 68 FC | 	wrlong	#29, fp
1e244     2C 4E 05 F1 | 	add	fp, #44
1e248     A7 26 02 FB | 	rdlong	local01, fp
1e24c     34 4E 85 F1 | 	sub	fp, #52
1e250     A7 26 62 FC | 	wrlong	local01, fp
1e254     18 00 90 FD | 	jmp	#LR__2369
1e258                 | LR__2368
1e258     08 4E 05 F1 | 	add	fp, #8
1e25c     A7 3A 68 FC | 	wrlong	#29, fp
1e260     04 4E 05 F1 | 	add	fp, #4
1e264     A7 26 02 FB | 	rdlong	local01, fp
1e268     0C 4E 85 F1 | 	sub	fp, #12
1e26c     A7 26 62 FC | 	wrlong	local01, fp
1e270                 | LR__2369
1e270     A7 12 02 F6 | 	mov	arg01, fp
1e274     CC F5 BE FD | 	call	#_push
1e278                 | LR__2370
1e278     A7 F0 03 F6 | 	mov	ptra, fp
1e27c     B2 00 A0 FD | 	call	#popregs_
1e280                 | _do_getaddr_ret
1e280     2D 00 64 FD | 	ret
1e284                 | 
1e284                 | ' 
1e284                 | ' 
1e284                 | ' 
1e284                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1e284                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1e284                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1e284                 | ' 
1e284                 | ' '--------------------------------- AND 
1e284                 | ' 
1e284                 | ' sub do_and 
1e284                 | _do_and
1e284     03 4A 05 F6 | 	mov	COUNT_, #3
1e288     A8 00 A0 FD | 	call	#pushregs_
1e28c     18 F0 07 F1 | 	add	ptra, #24
1e290     18 F5 BE FD | 	call	#_pop
1e294     FD 12 02 F6 | 	mov	arg01, result1
1e298     FE 26 02 F6 | 	mov	local01, result2
1e29c     FF 28 02 F6 | 	mov	local02, result3
1e2a0     0C 4E 05 F1 | 	add	fp, #12
1e2a4     A7 12 62 FC | 	wrlong	arg01, fp
1e2a8     04 4E 05 F1 | 	add	fp, #4
1e2ac     A7 26 62 FC | 	wrlong	local01, fp
1e2b0     04 4E 05 F1 | 	add	fp, #4
1e2b4     A7 28 62 FC | 	wrlong	local02, fp
1e2b8     14 4E 85 F1 | 	sub	fp, #20
1e2bc     EC F4 BE FD | 	call	#_pop
1e2c0     FF 2A 02 F6 | 	mov	local03, result3
1e2c4     A7 FA 61 FC | 	wrlong	result1, fp
1e2c8     04 4E 05 F1 | 	add	fp, #4
1e2cc     A7 FC 61 FC | 	wrlong	result2, fp
1e2d0     04 4E 05 F1 | 	add	fp, #4
1e2d4     A7 2A 62 FC | 	wrlong	local03, fp
1e2d8                 | ' 
1e2d8                 | ' t2=pop()
1e2d8                 | ' t1=pop()
1e2d8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e2d8     08 4E 85 F1 | 	sub	fp, #8
1e2dc     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e2e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e2e4     A7 2A 62 AC |  if_e	wrlong	local03, fp
1e2e8     08 4E 05 A1 |  if_e	add	fp, #8
1e2ec     A7 3A 68 AC |  if_e	wrlong	#29, fp
1e2f0     08 4E 85 A1 |  if_e	sub	fp, #8
1e2f4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e2f4     14 4E 05 F1 | 	add	fp, #20
1e2f8     A7 2A 02 FB | 	rdlong	local03, fp
1e2fc     14 4E 85 F1 | 	sub	fp, #20
1e300     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e304     18 00 90 5D |  if_ne	jmp	#LR__2380
1e308     0C 4E 05 F1 | 	add	fp, #12
1e30c     A7 2A 02 FB | 	rdlong	local03, fp
1e310     A7 2A 62 FC | 	wrlong	local03, fp
1e314     08 4E 05 F1 | 	add	fp, #8
1e318     A7 3A 68 FC | 	wrlong	#29, fp
1e31c     14 4E 85 F1 | 	sub	fp, #20
1e320                 | LR__2380
1e320                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1e320     08 4E 05 F1 | 	add	fp, #8
1e324     A7 2A 02 FB | 	rdlong	local03, fp
1e328     08 4E 85 F1 | 	sub	fp, #8
1e32c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e330     14 4E 05 51 |  if_ne	add	fp, #20
1e334     A7 28 02 5B |  if_ne	rdlong	local02, fp
1e338     14 4E 85 51 |  if_ne	sub	fp, #20
1e33c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1e340     08 4E 05 51 |  if_ne	add	fp, #8
1e344     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1e348     08 4E 85 51 |  if_ne	sub	fp, #8
1e34c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1e350     14 4E 05 51 |  if_ne	add	fp, #20
1e354     14 4E 85 51 |  if_ne	sub	fp, #20
1e358     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1e35c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1e360     08 4E 05 A1 |  if_e	add	fp, #8
1e364     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e368     08 4E 85 A1 |  if_e	sub	fp, #8
1e36c     18 00 90 AD |  if_e	jmp	#LR__2381
1e370     A7 2A 02 FB | 	rdlong	local03, fp
1e374     0C 4E 05 F1 | 	add	fp, #12
1e378     A7 26 02 FB | 	rdlong	local01, fp
1e37c     0C 4E 85 F1 | 	sub	fp, #12
1e380     13 2B 02 F5 | 	and	local03, local01
1e384     A7 2A 62 FC | 	wrlong	local03, fp
1e388                 | LR__2381
1e388     A7 12 02 F6 | 	mov	arg01, fp
1e38c     B4 F4 BE FD | 	call	#_push
1e390     A7 F0 03 F6 | 	mov	ptra, fp
1e394     B2 00 A0 FD | 	call	#popregs_
1e398                 | _do_and_ret
1e398     2D 00 64 FD | 	ret
1e39c                 | 
1e39c                 | ' 
1e39c                 | ' '--------------------------------- DIV (integer divide)
1e39c                 | ' 
1e39c                 | ' sub do_div 
1e39c                 | _do_div
1e39c     01 4A 05 F6 | 	mov	COUNT_, #1
1e3a0     A8 00 A0 FD | 	call	#pushregs_
1e3a4     18 F0 07 F1 | 	add	ptra, #24
1e3a8     00 F4 BE FD | 	call	#_pop
1e3ac     FD 92 02 F6 | 	mov	muldivb_, result1
1e3b0     FE 90 02 F6 | 	mov	muldiva_, result2
1e3b4     FF 26 02 F6 | 	mov	local01, result3
1e3b8     0C 4E 05 F1 | 	add	fp, #12
1e3bc     A7 92 62 FC | 	wrlong	muldivb_, fp
1e3c0     04 4E 05 F1 | 	add	fp, #4
1e3c4     A7 90 62 FC | 	wrlong	muldiva_, fp
1e3c8     04 4E 05 F1 | 	add	fp, #4
1e3cc     A7 26 62 FC | 	wrlong	local01, fp
1e3d0     14 4E 85 F1 | 	sub	fp, #20
1e3d4     D4 F3 BE FD | 	call	#_pop
1e3d8     A7 FA 61 FC | 	wrlong	result1, fp
1e3dc     04 4E 05 F1 | 	add	fp, #4
1e3e0     A7 FC 61 FC | 	wrlong	result2, fp
1e3e4     04 4E 05 F1 | 	add	fp, #4
1e3e8     A7 FE 61 FC | 	wrlong	result3, fp
1e3ec                 | ' 
1e3ec                 | ' t2=pop()
1e3ec                 | ' t1=pop()
1e3ec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1e3ec     08 4E 85 F1 | 	sub	fp, #8
1e3f0     1F FE 0D F2 | 	cmp	result3, #31 wz
1e3f4     14 4E 05 51 |  if_ne	add	fp, #20
1e3f8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1e3fc     14 4E 85 51 |  if_ne	sub	fp, #20
1e400     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1e404     A7 14 68 AC |  if_e	wrlong	#10, fp
1e408     08 4E 05 A1 |  if_e	add	fp, #8
1e40c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e410     08 4E 85 A1 |  if_e	sub	fp, #8
1e414     90 01 90 AD |  if_e	jmp	#LR__2396
1e418                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1e418     08 4E 05 F1 | 	add	fp, #8
1e41c     A7 92 02 FB | 	rdlong	muldivb_, fp
1e420     08 4E 85 F1 | 	sub	fp, #8
1e424     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1e428     1C 00 90 5D |  if_ne	jmp	#LR__2390
1e42c     08 4E 05 F1 | 	add	fp, #8
1e430     A7 38 68 FC | 	wrlong	#28, fp
1e434     08 4E 85 F1 | 	sub	fp, #8
1e438     A7 12 02 FB | 	rdlong	arg01, fp
1e43c     00 14 06 F6 | 	mov	arg02, #0
1e440     B8 C3 B0 FD | 	call	#__system___float_tointeger
1e444     A7 FA 61 FC | 	wrlong	result1, fp
1e448                 | LR__2390
1e448                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1e448     14 4E 05 F1 | 	add	fp, #20
1e44c     A7 92 02 FB | 	rdlong	muldivb_, fp
1e450     14 4E 85 F1 | 	sub	fp, #20
1e454     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1e458     28 00 90 5D |  if_ne	jmp	#LR__2391
1e45c     14 4E 05 F1 | 	add	fp, #20
1e460     A7 38 68 FC | 	wrlong	#28, fp
1e464     08 4E 85 F1 | 	sub	fp, #8
1e468     A7 12 02 FB | 	rdlong	arg01, fp
1e46c     0C 4E 85 F1 | 	sub	fp, #12
1e470     00 14 06 F6 | 	mov	arg02, #0
1e474     84 C3 B0 FD | 	call	#__system___float_tointeger
1e478     0C 4E 05 F1 | 	add	fp, #12
1e47c     A7 FA 61 FC | 	wrlong	result1, fp
1e480     0C 4E 85 F1 | 	sub	fp, #12
1e484                 | LR__2391
1e484                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1e484     08 4E 05 F1 | 	add	fp, #8
1e488     A7 92 02 FB | 	rdlong	muldivb_, fp
1e48c     08 4E 85 F1 | 	sub	fp, #8
1e490     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1e494     14 4E 05 A1 |  if_e	add	fp, #20
1e498     A7 26 02 AB |  if_e	rdlong	local01, fp
1e49c     14 4E 85 A1 |  if_e	sub	fp, #20
1e4a0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1e4a4     20 00 90 5D |  if_ne	jmp	#LR__2392
1e4a8     0C 4E 05 F1 | 	add	fp, #12
1e4ac     A7 26 02 FB | 	rdlong	local01, fp
1e4b0     0C 4E 85 F1 | 	sub	fp, #12
1e4b4     A7 92 02 FB | 	rdlong	muldivb_, fp
1e4b8     13 93 12 FD | 	qdiv	muldivb_, local01
1e4bc     18 26 62 FD | 	getqx	local01
1e4c0     A7 26 62 FC | 	wrlong	local01, fp
1e4c4     E0 00 90 FD | 	jmp	#LR__2396
1e4c8                 | LR__2392
1e4c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1e4c8     08 4E 05 F1 | 	add	fp, #8
1e4cc     A7 92 02 FB | 	rdlong	muldivb_, fp
1e4d0     08 4E 85 F1 | 	sub	fp, #8
1e4d4     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1e4d8     14 4E 05 A1 |  if_e	add	fp, #20
1e4dc     A7 26 02 AB |  if_e	rdlong	local01, fp
1e4e0     14 4E 85 A1 |  if_e	sub	fp, #20
1e4e4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e4e8     2C 00 90 5D |  if_ne	jmp	#LR__2393
1e4ec     0C 4E 05 F1 | 	add	fp, #12
1e4f0     A7 26 02 FB | 	rdlong	local01, fp
1e4f4     0C 4E 85 F1 | 	sub	fp, #12
1e4f8     A7 92 02 FB | 	rdlong	muldivb_, fp
1e4fc     13 93 12 FD | 	qdiv	muldivb_, local01
1e500     18 26 62 FD | 	getqx	local01
1e504     A7 26 62 FC | 	wrlong	local01, fp
1e508     08 4E 05 F1 | 	add	fp, #8
1e50c     A7 38 68 FC | 	wrlong	#28, fp
1e510     08 4E 85 F1 | 	sub	fp, #8
1e514     90 00 90 FD | 	jmp	#LR__2396
1e518                 | LR__2393
1e518                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1e518     08 4E 05 F1 | 	add	fp, #8
1e51c     A7 92 02 FB | 	rdlong	muldivb_, fp
1e520     08 4E 85 F1 | 	sub	fp, #8
1e524     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1e528     14 4E 05 A1 |  if_e	add	fp, #20
1e52c     A7 26 02 AB |  if_e	rdlong	local01, fp
1e530     14 4E 85 A1 |  if_e	sub	fp, #20
1e534     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1e538     1C 00 90 5D |  if_ne	jmp	#LR__2394
1e53c     A7 90 02 FB | 	rdlong	muldiva_, fp
1e540     0C 4E 05 F1 | 	add	fp, #12
1e544     A7 92 02 FB | 	rdlong	muldivb_, fp
1e548     0C 4E 85 F1 | 	sub	fp, #12
1e54c     BA 00 A0 FD | 	call	#divide_
1e550     A7 92 62 FC | 	wrlong	muldivb_, fp
1e554     50 00 90 FD | 	jmp	#LR__2396
1e558                 | LR__2394
1e558                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1e558     08 4E 05 F1 | 	add	fp, #8
1e55c     A7 92 02 FB | 	rdlong	muldivb_, fp
1e560     08 4E 85 F1 | 	sub	fp, #8
1e564     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1e568     14 4E 05 A1 |  if_e	add	fp, #20
1e56c     A7 26 02 AB |  if_e	rdlong	local01, fp
1e570     14 4E 85 A1 |  if_e	sub	fp, #20
1e574     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e578     1C 00 90 5D |  if_ne	jmp	#LR__2395
1e57c     A7 90 02 FB | 	rdlong	muldiva_, fp
1e580     0C 4E 05 F1 | 	add	fp, #12
1e584     A7 92 02 FB | 	rdlong	muldivb_, fp
1e588     0C 4E 85 F1 | 	sub	fp, #12
1e58c     BA 00 A0 FD | 	call	#divide_
1e590     A7 92 62 FC | 	wrlong	muldivb_, fp
1e594     10 00 90 FD | 	jmp	#LR__2396
1e598                 | LR__2395
1e598     A7 16 68 FC | 	wrlong	#11, fp
1e59c     08 4E 05 F1 | 	add	fp, #8
1e5a0     A7 FE 69 FC | 	wrlong	#255, fp
1e5a4     08 4E 85 F1 | 	sub	fp, #8
1e5a8                 | LR__2396
1e5a8     A7 12 02 F6 | 	mov	arg01, fp
1e5ac     94 F2 BE FD | 	call	#_push
1e5b0     A7 F0 03 F6 | 	mov	ptra, fp
1e5b4     B2 00 A0 FD | 	call	#popregs_
1e5b8                 | _do_div_ret
1e5b8     2D 00 64 FD | 	ret
1e5bc                 | 
1e5bc                 | ' 
1e5bc                 | ' '--------------------------------- equal (=)
1e5bc                 | ' 
1e5bc                 | ' sub do_eq
1e5bc                 | _do_eq
1e5bc     05 4A 05 F6 | 	mov	COUNT_, #5
1e5c0     A8 00 A0 FD | 	call	#pushregs_
1e5c4     18 F0 07 F1 | 	add	ptra, #24
1e5c8     E0 F1 BE FD | 	call	#_pop
1e5cc     FD 26 02 F6 | 	mov	local01, result1
1e5d0     FE 28 02 F6 | 	mov	local02, result2
1e5d4     FF 2A 02 F6 | 	mov	local03, result3
1e5d8     0C 4E 05 F1 | 	add	fp, #12
1e5dc     A7 26 62 FC | 	wrlong	local01, fp
1e5e0     04 4E 05 F1 | 	add	fp, #4
1e5e4     A7 28 62 FC | 	wrlong	local02, fp
1e5e8     04 4E 05 F1 | 	add	fp, #4
1e5ec     A7 2A 62 FC | 	wrlong	local03, fp
1e5f0     14 4E 85 F1 | 	sub	fp, #20
1e5f4     B4 F1 BE FD | 	call	#_pop
1e5f8     FF 2A 02 F6 | 	mov	local03, result3
1e5fc     A7 FA 61 FC | 	wrlong	result1, fp
1e600     04 4E 05 F1 | 	add	fp, #4
1e604     A7 FC 61 FC | 	wrlong	result2, fp
1e608     04 4E 05 F1 | 	add	fp, #4
1e60c     A7 2A 62 FC | 	wrlong	local03, fp
1e610                 | ' 
1e610                 | ' t2=pop()
1e610                 | ' t1=pop()
1e610                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1e610     08 4E 85 F1 | 	sub	fp, #8
1e614     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e618     14 4E 05 A1 |  if_e	add	fp, #20
1e61c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e620     14 4E 85 A1 |  if_e	sub	fp, #20
1e624     16 2B 02 A6 |  if_e	mov	local03, local04
1e628     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e62c     28 00 90 5D |  if_ne	jmp	#LR__2400
1e630     00 26 06 F6 | 	mov	local01, #0
1e634     A7 12 02 FB | 	rdlong	arg01, fp
1e638     0C 4E 05 F1 | 	add	fp, #12
1e63c     A7 14 02 FB | 	rdlong	arg02, fp
1e640     0C 4E 85 F1 | 	sub	fp, #12
1e644     98 8E B0 FD | 	call	#__system___string_cmp
1e648     00 FA 0D F2 | 	cmp	result1, #0 wz
1e64c     00 26 26 A6 |  if_e	not	local01, #0
1e650     A7 26 62 FC | 	wrlong	local01, fp
1e654     20 04 90 FD | 	jmp	#LR__2413
1e658                 | LR__2400
1e658                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1e658     08 4E 05 F1 | 	add	fp, #8
1e65c     A7 26 02 FB | 	rdlong	local01, fp
1e660     08 4E 85 F1 | 	sub	fp, #8
1e664     1E 26 0E F2 | 	cmp	local01, #30 wz
1e668     14 4E 05 A1 |  if_e	add	fp, #20
1e66c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e670     14 4E 85 A1 |  if_e	sub	fp, #20
1e674     16 2B 02 A6 |  if_e	mov	local03, local04
1e678     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e67c     2C 00 90 5D |  if_ne	jmp	#LR__2401
1e680     00 26 06 F6 | 	mov	local01, #0
1e684     A7 12 02 FB | 	rdlong	arg01, fp
1e688     0C 4E 05 F1 | 	add	fp, #12
1e68c     A7 14 02 FB | 	rdlong	arg02, fp
1e690     0C 4E 85 F1 | 	sub	fp, #12
1e694     01 16 06 F6 | 	mov	arg03, #1
1e698     CC C0 B0 FD | 	call	#__system___float_cmp
1e69c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e6a0     00 26 26 A6 |  if_e	not	local01, #0
1e6a4     A7 26 62 FC | 	wrlong	local01, fp
1e6a8     CC 03 90 FD | 	jmp	#LR__2413
1e6ac                 | LR__2401
1e6ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1e6ac     08 4E 05 F1 | 	add	fp, #8
1e6b0     A7 26 02 FB | 	rdlong	local01, fp
1e6b4     08 4E 85 F1 | 	sub	fp, #8
1e6b8     1E 26 0E F2 | 	cmp	local01, #30 wz
1e6bc     14 4E 05 A1 |  if_e	add	fp, #20
1e6c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e6c4     14 4E 85 A1 |  if_e	sub	fp, #20
1e6c8     16 2B 02 A6 |  if_e	mov	local03, local04
1e6cc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e6d0     48 00 90 5D |  if_ne	jmp	#LR__2402
1e6d4     00 26 06 F6 | 	mov	local01, #0
1e6d8     A7 28 02 FB | 	rdlong	local02, fp
1e6dc     0C 4E 05 F1 | 	add	fp, #12
1e6e0     A7 12 02 FB | 	rdlong	arg01, fp
1e6e4     0C 4E 85 F1 | 	sub	fp, #12
1e6e8     09 13 52 F6 | 	abs	arg01, arg01 wc
1e6ec     1F 2E C6 C9 |  if_b	decod	local05, #31
1e6f0     00 2E 06 36 |  if_ae	mov	local05, #0
1e6f4     38 B8 B0 FD | 	call	#__system___float_fromuns
1e6f8     17 FB 61 F5 | 	xor	result1, local05
1e6fc     FD 14 02 F6 | 	mov	arg02, result1
1e700     14 13 02 F6 | 	mov	arg01, local02
1e704     01 16 06 F6 | 	mov	arg03, #1
1e708     5C C0 B0 FD | 	call	#__system___float_cmp
1e70c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e710     00 26 26 A6 |  if_e	not	local01, #0
1e714     A7 26 62 FC | 	wrlong	local01, fp
1e718     5C 03 90 FD | 	jmp	#LR__2413
1e71c                 | LR__2402
1e71c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1e71c     08 4E 05 F1 | 	add	fp, #8
1e720     A7 26 02 FB | 	rdlong	local01, fp
1e724     08 4E 85 F1 | 	sub	fp, #8
1e728     1E 26 0E F2 | 	cmp	local01, #30 wz
1e72c     14 4E 05 A1 |  if_e	add	fp, #20
1e730     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e734     14 4E 85 A1 |  if_e	sub	fp, #20
1e738     16 2B 02 A6 |  if_e	mov	local03, local04
1e73c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e740     38 00 90 5D |  if_ne	jmp	#LR__2403
1e744     00 26 06 F6 | 	mov	local01, #0
1e748     A7 28 02 FB | 	rdlong	local02, fp
1e74c     0C 4E 05 F1 | 	add	fp, #12
1e750     A7 12 02 FB | 	rdlong	arg01, fp
1e754     0C 4E 85 F1 | 	sub	fp, #12
1e758     D4 B7 B0 FD | 	call	#__system___float_fromuns
1e75c     FD 14 02 F6 | 	mov	arg02, result1
1e760     14 13 02 F6 | 	mov	arg01, local02
1e764     01 16 06 F6 | 	mov	arg03, #1
1e768     FC BF B0 FD | 	call	#__system___float_cmp
1e76c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e770     00 26 26 A6 |  if_e	not	local01, #0
1e774     A7 26 62 FC | 	wrlong	local01, fp
1e778     FC 02 90 FD | 	jmp	#LR__2413
1e77c                 | LR__2403
1e77c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1e77c     08 4E 05 F1 | 	add	fp, #8
1e780     A7 26 02 FB | 	rdlong	local01, fp
1e784     08 4E 85 F1 | 	sub	fp, #8
1e788     1C 26 0E F2 | 	cmp	local01, #28 wz
1e78c     14 4E 05 A1 |  if_e	add	fp, #20
1e790     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e794     14 4E 85 A1 |  if_e	sub	fp, #20
1e798     16 2B 02 A6 |  if_e	mov	local03, local04
1e79c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e7a0     44 00 90 5D |  if_ne	jmp	#LR__2404
1e7a4     00 26 06 F6 | 	mov	local01, #0
1e7a8     A7 12 02 FB | 	rdlong	arg01, fp
1e7ac     09 13 52 F6 | 	abs	arg01, arg01 wc
1e7b0     1F 2E C6 C9 |  if_b	decod	local05, #31
1e7b4     00 2E 06 36 |  if_ae	mov	local05, #0
1e7b8     74 B7 B0 FD | 	call	#__system___float_fromuns
1e7bc     17 FB 61 F5 | 	xor	result1, local05
1e7c0     FD 12 02 F6 | 	mov	arg01, result1
1e7c4     0C 4E 05 F1 | 	add	fp, #12
1e7c8     A7 14 02 FB | 	rdlong	arg02, fp
1e7cc     0C 4E 85 F1 | 	sub	fp, #12
1e7d0     01 16 06 F6 | 	mov	arg03, #1
1e7d4     90 BF B0 FD | 	call	#__system___float_cmp
1e7d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e7dc     00 26 26 A6 |  if_e	not	local01, #0
1e7e0     A7 26 62 FC | 	wrlong	local01, fp
1e7e4     90 02 90 FD | 	jmp	#LR__2413
1e7e8                 | LR__2404
1e7e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1e7e8     08 4E 05 F1 | 	add	fp, #8
1e7ec     A7 26 02 FB | 	rdlong	local01, fp
1e7f0     08 4E 85 F1 | 	sub	fp, #8
1e7f4     1C 26 0E F2 | 	cmp	local01, #28 wz
1e7f8     14 4E 05 A1 |  if_e	add	fp, #20
1e7fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e800     14 4E 85 A1 |  if_e	sub	fp, #20
1e804     16 2B 02 A6 |  if_e	mov	local03, local04
1e808     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e80c     24 00 90 5D |  if_ne	jmp	#LR__2405
1e810     00 26 06 F6 | 	mov	local01, #0
1e814     A7 28 02 FB | 	rdlong	local02, fp
1e818     0C 4E 05 F1 | 	add	fp, #12
1e81c     A7 2A 02 FB | 	rdlong	local03, fp
1e820     0C 4E 85 F1 | 	sub	fp, #12
1e824     15 29 0A F2 | 	cmp	local02, local03 wz
1e828     01 26 66 A6 |  if_e	neg	local01, #1
1e82c     A7 26 62 FC | 	wrlong	local01, fp
1e830     44 02 90 FD | 	jmp	#LR__2413
1e834                 | LR__2405
1e834                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1e834     08 4E 05 F1 | 	add	fp, #8
1e838     A7 26 02 FB | 	rdlong	local01, fp
1e83c     08 4E 85 F1 | 	sub	fp, #8
1e840     1C 26 0E F2 | 	cmp	local01, #28 wz
1e844     14 4E 05 A1 |  if_e	add	fp, #20
1e848     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e84c     14 4E 85 A1 |  if_e	sub	fp, #20
1e850     16 2B 02 A6 |  if_e	mov	local03, local04
1e854     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e858     24 00 90 5D |  if_ne	jmp	#LR__2406
1e85c     00 26 06 F6 | 	mov	local01, #0
1e860     A7 28 02 FB | 	rdlong	local02, fp
1e864     0C 4E 05 F1 | 	add	fp, #12
1e868     A7 2A 02 FB | 	rdlong	local03, fp
1e86c     0C 4E 85 F1 | 	sub	fp, #12
1e870     15 29 0A F2 | 	cmp	local02, local03 wz
1e874     01 26 66 A6 |  if_e	neg	local01, #1
1e878     A7 26 62 FC | 	wrlong	local01, fp
1e87c     F8 01 90 FD | 	jmp	#LR__2413
1e880                 | LR__2406
1e880                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1e880     08 4E 05 F1 | 	add	fp, #8
1e884     A7 26 02 FB | 	rdlong	local01, fp
1e888     08 4E 85 F1 | 	sub	fp, #8
1e88c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e890     14 4E 05 A1 |  if_e	add	fp, #20
1e894     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e898     14 4E 85 A1 |  if_e	sub	fp, #20
1e89c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e8a0     34 00 90 5D |  if_ne	jmp	#LR__2407
1e8a4     00 26 06 F6 | 	mov	local01, #0
1e8a8     A7 12 02 FB | 	rdlong	arg01, fp
1e8ac     80 B6 B0 FD | 	call	#__system___float_fromuns
1e8b0     FD 12 02 F6 | 	mov	arg01, result1
1e8b4     0C 4E 05 F1 | 	add	fp, #12
1e8b8     A7 14 02 FB | 	rdlong	arg02, fp
1e8bc     0C 4E 85 F1 | 	sub	fp, #12
1e8c0     01 16 06 F6 | 	mov	arg03, #1
1e8c4     A0 BE B0 FD | 	call	#__system___float_cmp
1e8c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e8cc     00 26 26 A6 |  if_e	not	local01, #0
1e8d0     A7 26 62 FC | 	wrlong	local01, fp
1e8d4     A0 01 90 FD | 	jmp	#LR__2413
1e8d8                 | LR__2407
1e8d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1e8d8     08 4E 05 F1 | 	add	fp, #8
1e8dc     A7 26 02 FB | 	rdlong	local01, fp
1e8e0     08 4E 85 F1 | 	sub	fp, #8
1e8e4     1D 26 0E F2 | 	cmp	local01, #29 wz
1e8e8     14 4E 05 A1 |  if_e	add	fp, #20
1e8ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e8f0     14 4E 85 A1 |  if_e	sub	fp, #20
1e8f4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e8f8     24 00 90 5D |  if_ne	jmp	#LR__2408
1e8fc     00 26 06 F6 | 	mov	local01, #0
1e900     A7 28 02 FB | 	rdlong	local02, fp
1e904     0C 4E 05 F1 | 	add	fp, #12
1e908     A7 2A 02 FB | 	rdlong	local03, fp
1e90c     0C 4E 85 F1 | 	sub	fp, #12
1e910     15 29 0A F2 | 	cmp	local02, local03 wz
1e914     01 26 66 A6 |  if_e	neg	local01, #1
1e918     A7 26 62 FC | 	wrlong	local01, fp
1e91c     58 01 90 FD | 	jmp	#LR__2413
1e920                 | LR__2408
1e920                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1e920     08 4E 05 F1 | 	add	fp, #8
1e924     A7 26 02 FB | 	rdlong	local01, fp
1e928     08 4E 85 F1 | 	sub	fp, #8
1e92c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e930     14 4E 05 A1 |  if_e	add	fp, #20
1e934     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e938     14 4E 85 A1 |  if_e	sub	fp, #20
1e93c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e940     24 00 90 5D |  if_ne	jmp	#LR__2409
1e944     00 26 06 F6 | 	mov	local01, #0
1e948     A7 28 02 FB | 	rdlong	local02, fp
1e94c     0C 4E 05 F1 | 	add	fp, #12
1e950     A7 2A 02 FB | 	rdlong	local03, fp
1e954     0C 4E 85 F1 | 	sub	fp, #12
1e958     15 29 0A F2 | 	cmp	local02, local03 wz
1e95c     01 26 66 A6 |  if_e	neg	local01, #1
1e960     A7 26 62 FC | 	wrlong	local01, fp
1e964     10 01 90 FD | 	jmp	#LR__2413
1e968                 | LR__2409
1e968                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1e968     08 4E 05 F1 | 	add	fp, #8
1e96c     A7 26 02 FB | 	rdlong	local01, fp
1e970     08 4E 85 F1 | 	sub	fp, #8
1e974     2B 26 0E F2 | 	cmp	local01, #43 wz
1e978     14 4E 05 A1 |  if_e	add	fp, #20
1e97c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e980     14 4E 85 A1 |  if_e	sub	fp, #20
1e984     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e988     30 00 90 5D |  if_ne	jmp	#LR__2410
1e98c     00 26 06 F6 | 	mov	local01, #0
1e990     A7 12 02 FB | 	rdlong	arg01, fp
1e994     8C EF BE FD | 	call	#_convertstring
1e998     FD 12 02 F6 | 	mov	arg01, result1
1e99c     0C 4E 05 F1 | 	add	fp, #12
1e9a0     A7 14 02 FB | 	rdlong	arg02, fp
1e9a4     0C 4E 85 F1 | 	sub	fp, #12
1e9a8     34 8B B0 FD | 	call	#__system___string_cmp
1e9ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1e9b0     00 26 26 A6 |  if_e	not	local01, #0
1e9b4     A7 26 62 FC | 	wrlong	local01, fp
1e9b8     BC 00 90 FD | 	jmp	#LR__2413
1e9bc                 | LR__2410
1e9bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1e9bc     08 4E 05 F1 | 	add	fp, #8
1e9c0     A7 26 02 FB | 	rdlong	local01, fp
1e9c4     08 4E 85 F1 | 	sub	fp, #8
1e9c8     1F 26 0E F2 | 	cmp	local01, #31 wz
1e9cc     14 4E 05 A1 |  if_e	add	fp, #20
1e9d0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9d4     14 4E 85 A1 |  if_e	sub	fp, #20
1e9d8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e9dc     34 00 90 5D |  if_ne	jmp	#LR__2411
1e9e0     00 26 06 F6 | 	mov	local01, #0
1e9e4     A7 28 02 FB | 	rdlong	local02, fp
1e9e8     0C 4E 05 F1 | 	add	fp, #12
1e9ec     A7 12 02 FB | 	rdlong	arg01, fp
1e9f0     0C 4E 85 F1 | 	sub	fp, #12
1e9f4     2C EF BE FD | 	call	#_convertstring
1e9f8     FD 14 02 F6 | 	mov	arg02, result1
1e9fc     14 13 02 F6 | 	mov	arg01, local02
1ea00     DC 8A B0 FD | 	call	#__system___string_cmp
1ea04     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea08     00 26 26 A6 |  if_e	not	local01, #0
1ea0c     A7 26 62 FC | 	wrlong	local01, fp
1ea10     64 00 90 FD | 	jmp	#LR__2413
1ea14                 | LR__2411
1ea14                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1ea14     08 4E 05 F1 | 	add	fp, #8
1ea18     A7 26 02 FB | 	rdlong	local01, fp
1ea1c     08 4E 85 F1 | 	sub	fp, #8
1ea20     2B 26 0E F2 | 	cmp	local01, #43 wz
1ea24     14 4E 05 A1 |  if_e	add	fp, #20
1ea28     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea2c     14 4E 85 A1 |  if_e	sub	fp, #20
1ea30     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ea34     3C 00 90 5D |  if_ne	jmp	#LR__2412
1ea38     00 26 06 F6 | 	mov	local01, #0
1ea3c     A7 12 02 FB | 	rdlong	arg01, fp
1ea40     E0 EE BE FD | 	call	#_convertstring
1ea44     FD 28 02 F6 | 	mov	local02, result1
1ea48     0C 4E 05 F1 | 	add	fp, #12
1ea4c     A7 12 02 FB | 	rdlong	arg01, fp
1ea50     0C 4E 85 F1 | 	sub	fp, #12
1ea54     CC EE BE FD | 	call	#_convertstring
1ea58     FD 14 02 F6 | 	mov	arg02, result1
1ea5c     14 13 02 F6 | 	mov	arg01, local02
1ea60     7C 8A B0 FD | 	call	#__system___string_cmp
1ea64     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea68     00 26 26 A6 |  if_e	not	local01, #0
1ea6c     A7 26 62 FC | 	wrlong	local01, fp
1ea70     04 00 90 FD | 	jmp	#LR__2413
1ea74                 | LR__2412
1ea74     A7 00 68 FC | 	wrlong	#0, fp
1ea78                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ea78                 | LR__2413
1ea78     08 4E 05 F1 | 	add	fp, #8
1ea7c     A7 38 68 FC | 	wrlong	#28, fp
1ea80     08 4E 85 F1 | 	sub	fp, #8
1ea84     A7 12 02 F6 | 	mov	arg01, fp
1ea88     B8 ED BE FD | 	call	#_push
1ea8c     A7 F0 03 F6 | 	mov	ptra, fp
1ea90     B2 00 A0 FD | 	call	#popregs_
1ea94                 | _do_eq_ret
1ea94     2D 00 64 FD | 	ret
1ea98                 | 
1ea98                 | ' 
1ea98                 | ' '--------------------------------- fdiv (/) - float divide
1ea98                 | ' 
1ea98                 | ' sub do_fdiv 
1ea98                 | _do_fdiv
1ea98     02 4A 05 F6 | 	mov	COUNT_, #2
1ea9c     A8 00 A0 FD | 	call	#pushregs_
1eaa0     18 F0 07 F1 | 	add	ptra, #24
1eaa4     04 ED BE FD | 	call	#_pop
1eaa8     FD 14 02 F6 | 	mov	arg02, result1
1eaac     FE 12 02 F6 | 	mov	arg01, result2
1eab0     FF 26 02 F6 | 	mov	local01, result3
1eab4     0C 4E 05 F1 | 	add	fp, #12
1eab8     A7 14 62 FC | 	wrlong	arg02, fp
1eabc     04 4E 05 F1 | 	add	fp, #4
1eac0     A7 12 62 FC | 	wrlong	arg01, fp
1eac4     04 4E 05 F1 | 	add	fp, #4
1eac8     A7 26 62 FC | 	wrlong	local01, fp
1eacc     14 4E 85 F1 | 	sub	fp, #20
1ead0     D8 EC BE FD | 	call	#_pop
1ead4     A7 FA 61 FC | 	wrlong	result1, fp
1ead8     04 4E 05 F1 | 	add	fp, #4
1eadc     A7 FC 61 FC | 	wrlong	result2, fp
1eae0     04 4E 05 F1 | 	add	fp, #4
1eae4     A7 FE 61 FC | 	wrlong	result3, fp
1eae8                 | ' 
1eae8                 | ' t2=pop()
1eae8                 | ' t1=pop()
1eae8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1eae8     08 4E 85 F1 | 	sub	fp, #8
1eaec     1F FE 0D F2 | 	cmp	result3, #31 wz
1eaf0     14 4E 05 51 |  if_ne	add	fp, #20
1eaf4     A7 26 02 5B |  if_ne	rdlong	local01, fp
1eaf8     14 4E 85 51 |  if_ne	sub	fp, #20
1eafc     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1eb00     A7 14 68 AC |  if_e	wrlong	#10, fp
1eb04     08 4E 05 A1 |  if_e	add	fp, #8
1eb08     A7 FE 69 AC |  if_e	wrlong	#255, fp
1eb0c     08 4E 85 A1 |  if_e	sub	fp, #8
1eb10     38 01 90 AD |  if_e	jmp	#LR__2425
1eb14                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1eb14     08 4E 05 F1 | 	add	fp, #8
1eb18     A7 14 02 FB | 	rdlong	arg02, fp
1eb1c     08 4E 85 F1 | 	sub	fp, #8
1eb20     1C 14 0E F2 | 	cmp	arg02, #28 wz
1eb24     28 00 90 5D |  if_ne	jmp	#LR__2420
1eb28     08 4E 05 F1 | 	add	fp, #8
1eb2c     A7 3C 68 FC | 	wrlong	#30, fp
1eb30     08 4E 85 F1 | 	sub	fp, #8
1eb34     A7 12 02 FB | 	rdlong	arg01, fp
1eb38     09 13 52 F6 | 	abs	arg01, arg01 wc
1eb3c     1F 28 C6 C9 |  if_b	decod	local02, #31
1eb40     00 28 06 36 |  if_ae	mov	local02, #0
1eb44     E8 B3 B0 FD | 	call	#__system___float_fromuns
1eb48     14 FB 61 F5 | 	xor	result1, local02
1eb4c     A7 FA 61 FC | 	wrlong	result1, fp
1eb50                 | LR__2420
1eb50                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1eb50     08 4E 05 F1 | 	add	fp, #8
1eb54     A7 14 02 FB | 	rdlong	arg02, fp
1eb58     08 4E 85 F1 | 	sub	fp, #8
1eb5c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1eb60     18 00 90 5D |  if_ne	jmp	#LR__2421
1eb64     08 4E 05 F1 | 	add	fp, #8
1eb68     A7 3C 68 FC | 	wrlong	#30, fp
1eb6c     08 4E 85 F1 | 	sub	fp, #8
1eb70     A7 12 02 FB | 	rdlong	arg01, fp
1eb74     B8 B3 B0 FD | 	call	#__system___float_fromuns
1eb78     A7 FA 61 FC | 	wrlong	result1, fp
1eb7c                 | LR__2421
1eb7c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1eb7c     14 4E 05 F1 | 	add	fp, #20
1eb80     A7 14 02 FB | 	rdlong	arg02, fp
1eb84     14 4E 85 F1 | 	sub	fp, #20
1eb88     1C 14 0E F2 | 	cmp	arg02, #28 wz
1eb8c     34 00 90 5D |  if_ne	jmp	#LR__2422
1eb90     14 4E 05 F1 | 	add	fp, #20
1eb94     A7 3C 68 FC | 	wrlong	#30, fp
1eb98     08 4E 85 F1 | 	sub	fp, #8
1eb9c     A7 12 02 FB | 	rdlong	arg01, fp
1eba0     0C 4E 85 F1 | 	sub	fp, #12
1eba4     09 13 52 F6 | 	abs	arg01, arg01 wc
1eba8     1F 28 C6 C9 |  if_b	decod	local02, #31
1ebac     00 28 06 36 |  if_ae	mov	local02, #0
1ebb0     7C B3 B0 FD | 	call	#__system___float_fromuns
1ebb4     14 FB 61 F5 | 	xor	result1, local02
1ebb8     0C 4E 05 F1 | 	add	fp, #12
1ebbc     A7 FA 61 FC | 	wrlong	result1, fp
1ebc0     0C 4E 85 F1 | 	sub	fp, #12
1ebc4                 | LR__2422
1ebc4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1ebc4     14 4E 05 F1 | 	add	fp, #20
1ebc8     A7 14 02 FB | 	rdlong	arg02, fp
1ebcc     14 4E 85 F1 | 	sub	fp, #20
1ebd0     1D 14 0E F2 | 	cmp	arg02, #29 wz
1ebd4     24 00 90 5D |  if_ne	jmp	#LR__2423
1ebd8     14 4E 05 F1 | 	add	fp, #20
1ebdc     A7 3C 68 FC | 	wrlong	#30, fp
1ebe0     08 4E 85 F1 | 	sub	fp, #8
1ebe4     A7 12 02 FB | 	rdlong	arg01, fp
1ebe8     0C 4E 85 F1 | 	sub	fp, #12
1ebec     40 B3 B0 FD | 	call	#__system___float_fromuns
1ebf0     0C 4E 05 F1 | 	add	fp, #12
1ebf4     A7 FA 61 FC | 	wrlong	result1, fp
1ebf8     0C 4E 85 F1 | 	sub	fp, #12
1ebfc                 | LR__2423
1ebfc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1ebfc     08 4E 05 F1 | 	add	fp, #8
1ec00     A7 14 02 FB | 	rdlong	arg02, fp
1ec04     08 4E 85 F1 | 	sub	fp, #8
1ec08     1E 14 0E F2 | 	cmp	arg02, #30 wz
1ec0c     14 4E 05 A1 |  if_e	add	fp, #20
1ec10     A7 26 02 AB |  if_e	rdlong	local01, fp
1ec14     14 4E 85 A1 |  if_e	sub	fp, #20
1ec18     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1ec1c     1C 00 90 5D |  if_ne	jmp	#LR__2424
1ec20     A7 12 02 FB | 	rdlong	arg01, fp
1ec24     0C 4E 05 F1 | 	add	fp, #12
1ec28     A7 14 02 FB | 	rdlong	arg02, fp
1ec2c     0C 4E 85 F1 | 	sub	fp, #12
1ec30     04 B9 B0 FD | 	call	#__system___float_div
1ec34     A7 FA 61 FC | 	wrlong	result1, fp
1ec38     10 00 90 FD | 	jmp	#LR__2425
1ec3c                 | LR__2424
1ec3c     A7 16 68 FC | 	wrlong	#11, fp
1ec40     08 4E 05 F1 | 	add	fp, #8
1ec44     A7 FE 69 FC | 	wrlong	#255, fp
1ec48     08 4E 85 F1 | 	sub	fp, #8
1ec4c                 | LR__2425
1ec4c     A7 12 02 F6 | 	mov	arg01, fp
1ec50     F0 EB BE FD | 	call	#_push
1ec54     A7 F0 03 F6 | 	mov	ptra, fp
1ec58     B2 00 A0 FD | 	call	#popregs_
1ec5c                 | _do_fdiv_ret
1ec5c     2D 00 64 FD | 	ret
1ec60                 | 
1ec60                 | ' 
1ec60                 | ' '--------------------------------- greater or equal (>=)
1ec60                 | ' 
1ec60                 | ' sub do_ge
1ec60                 | _do_ge
1ec60     05 4A 05 F6 | 	mov	COUNT_, #5
1ec64     A8 00 A0 FD | 	call	#pushregs_
1ec68     18 F0 07 F1 | 	add	ptra, #24
1ec6c     3C EB BE FD | 	call	#_pop
1ec70     FD 26 02 F6 | 	mov	local01, result1
1ec74     FE 28 02 F6 | 	mov	local02, result2
1ec78     FF 2A 02 F6 | 	mov	local03, result3
1ec7c     0C 4E 05 F1 | 	add	fp, #12
1ec80     A7 26 62 FC | 	wrlong	local01, fp
1ec84     04 4E 05 F1 | 	add	fp, #4
1ec88     A7 28 62 FC | 	wrlong	local02, fp
1ec8c     04 4E 05 F1 | 	add	fp, #4
1ec90     A7 2A 62 FC | 	wrlong	local03, fp
1ec94     14 4E 85 F1 | 	sub	fp, #20
1ec98     10 EB BE FD | 	call	#_pop
1ec9c     FF 2A 02 F6 | 	mov	local03, result3
1eca0     A7 FA 61 FC | 	wrlong	result1, fp
1eca4     04 4E 05 F1 | 	add	fp, #4
1eca8     A7 FC 61 FC | 	wrlong	result2, fp
1ecac     04 4E 05 F1 | 	add	fp, #4
1ecb0     A7 2A 62 FC | 	wrlong	local03, fp
1ecb4                 | ' 
1ecb4                 | ' t2=pop()
1ecb4                 | ' t1=pop()
1ecb4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1ecb4     08 4E 85 F1 | 	sub	fp, #8
1ecb8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ecbc     14 4E 05 A1 |  if_e	add	fp, #20
1ecc0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ecc4     14 4E 85 A1 |  if_e	sub	fp, #20
1ecc8     16 2B 02 A6 |  if_e	mov	local03, local04
1eccc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ecd0     28 00 90 5D |  if_ne	jmp	#LR__2430
1ecd4     00 26 06 F6 | 	mov	local01, #0
1ecd8     A7 12 02 FB | 	rdlong	arg01, fp
1ecdc     0C 4E 05 F1 | 	add	fp, #12
1ece0     A7 14 02 FB | 	rdlong	arg02, fp
1ece4     0C 4E 85 F1 | 	sub	fp, #12
1ece8     F4 87 B0 FD | 	call	#__system___string_cmp
1ecec     00 FA 55 F2 | 	cmps	result1, #0 wc
1ecf0     00 26 26 36 |  if_ae	not	local01, #0
1ecf4     A7 26 62 FC | 	wrlong	local01, fp
1ecf8     24 04 90 FD | 	jmp	#LR__2443
1ecfc                 | LR__2430
1ecfc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1ecfc     08 4E 05 F1 | 	add	fp, #8
1ed00     A7 26 02 FB | 	rdlong	local01, fp
1ed04     08 4E 85 F1 | 	sub	fp, #8
1ed08     1E 26 0E F2 | 	cmp	local01, #30 wz
1ed0c     14 4E 05 A1 |  if_e	add	fp, #20
1ed10     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed14     14 4E 85 A1 |  if_e	sub	fp, #20
1ed18     16 2B 02 A6 |  if_e	mov	local03, local04
1ed1c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ed20     2C 00 90 5D |  if_ne	jmp	#LR__2431
1ed24     00 26 06 F6 | 	mov	local01, #0
1ed28     A7 12 02 FB | 	rdlong	arg01, fp
1ed2c     0C 4E 05 F1 | 	add	fp, #12
1ed30     A7 14 02 FB | 	rdlong	arg02, fp
1ed34     0C 4E 85 F1 | 	sub	fp, #12
1ed38     01 16 66 F6 | 	neg	arg03, #1
1ed3c     28 BA B0 FD | 	call	#__system___float_cmp
1ed40     00 FA 55 F2 | 	cmps	result1, #0 wc
1ed44     00 26 26 36 |  if_ae	not	local01, #0
1ed48     A7 26 62 FC | 	wrlong	local01, fp
1ed4c     D0 03 90 FD | 	jmp	#LR__2443
1ed50                 | LR__2431
1ed50                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1ed50     08 4E 05 F1 | 	add	fp, #8
1ed54     A7 26 02 FB | 	rdlong	local01, fp
1ed58     08 4E 85 F1 | 	sub	fp, #8
1ed5c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ed60     14 4E 05 A1 |  if_e	add	fp, #20
1ed64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed68     14 4E 85 A1 |  if_e	sub	fp, #20
1ed6c     16 2B 02 A6 |  if_e	mov	local03, local04
1ed70     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ed74     48 00 90 5D |  if_ne	jmp	#LR__2432
1ed78     00 26 06 F6 | 	mov	local01, #0
1ed7c     A7 28 02 FB | 	rdlong	local02, fp
1ed80     0C 4E 05 F1 | 	add	fp, #12
1ed84     A7 12 02 FB | 	rdlong	arg01, fp
1ed88     0C 4E 85 F1 | 	sub	fp, #12
1ed8c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ed90     1F 2E C6 C9 |  if_b	decod	local05, #31
1ed94     00 2E 06 36 |  if_ae	mov	local05, #0
1ed98     94 B1 B0 FD | 	call	#__system___float_fromuns
1ed9c     17 FB 61 F5 | 	xor	result1, local05
1eda0     FD 14 02 F6 | 	mov	arg02, result1
1eda4     14 13 02 F6 | 	mov	arg01, local02
1eda8     01 16 66 F6 | 	neg	arg03, #1
1edac     B8 B9 B0 FD | 	call	#__system___float_cmp
1edb0     00 FA 55 F2 | 	cmps	result1, #0 wc
1edb4     00 26 26 36 |  if_ae	not	local01, #0
1edb8     A7 26 62 FC | 	wrlong	local01, fp
1edbc     60 03 90 FD | 	jmp	#LR__2443
1edc0                 | LR__2432
1edc0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1edc0     08 4E 05 F1 | 	add	fp, #8
1edc4     A7 26 02 FB | 	rdlong	local01, fp
1edc8     08 4E 85 F1 | 	sub	fp, #8
1edcc     1E 26 0E F2 | 	cmp	local01, #30 wz
1edd0     14 4E 05 A1 |  if_e	add	fp, #20
1edd4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edd8     14 4E 85 A1 |  if_e	sub	fp, #20
1eddc     16 2B 02 A6 |  if_e	mov	local03, local04
1ede0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ede4     38 00 90 5D |  if_ne	jmp	#LR__2433
1ede8     00 26 06 F6 | 	mov	local01, #0
1edec     A7 28 02 FB | 	rdlong	local02, fp
1edf0     0C 4E 05 F1 | 	add	fp, #12
1edf4     A7 12 02 FB | 	rdlong	arg01, fp
1edf8     0C 4E 85 F1 | 	sub	fp, #12
1edfc     30 B1 B0 FD | 	call	#__system___float_fromuns
1ee00     FD 14 02 F6 | 	mov	arg02, result1
1ee04     14 13 02 F6 | 	mov	arg01, local02
1ee08     01 16 66 F6 | 	neg	arg03, #1
1ee0c     58 B9 B0 FD | 	call	#__system___float_cmp
1ee10     00 FA 55 F2 | 	cmps	result1, #0 wc
1ee14     00 26 26 36 |  if_ae	not	local01, #0
1ee18     A7 26 62 FC | 	wrlong	local01, fp
1ee1c     00 03 90 FD | 	jmp	#LR__2443
1ee20                 | LR__2433
1ee20                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1ee20     08 4E 05 F1 | 	add	fp, #8
1ee24     A7 26 02 FB | 	rdlong	local01, fp
1ee28     08 4E 85 F1 | 	sub	fp, #8
1ee2c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee30     14 4E 05 A1 |  if_e	add	fp, #20
1ee34     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee38     14 4E 85 A1 |  if_e	sub	fp, #20
1ee3c     16 2B 02 A6 |  if_e	mov	local03, local04
1ee40     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ee44     44 00 90 5D |  if_ne	jmp	#LR__2434
1ee48     00 26 06 F6 | 	mov	local01, #0
1ee4c     A7 12 02 FB | 	rdlong	arg01, fp
1ee50     09 13 52 F6 | 	abs	arg01, arg01 wc
1ee54     1F 2E C6 C9 |  if_b	decod	local05, #31
1ee58     00 2E 06 36 |  if_ae	mov	local05, #0
1ee5c     D0 B0 B0 FD | 	call	#__system___float_fromuns
1ee60     17 FB 61 F5 | 	xor	result1, local05
1ee64     FD 12 02 F6 | 	mov	arg01, result1
1ee68     0C 4E 05 F1 | 	add	fp, #12
1ee6c     A7 14 02 FB | 	rdlong	arg02, fp
1ee70     0C 4E 85 F1 | 	sub	fp, #12
1ee74     01 16 66 F6 | 	neg	arg03, #1
1ee78     EC B8 B0 FD | 	call	#__system___float_cmp
1ee7c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ee80     00 26 26 36 |  if_ae	not	local01, #0
1ee84     A7 26 62 FC | 	wrlong	local01, fp
1ee88     94 02 90 FD | 	jmp	#LR__2443
1ee8c                 | LR__2434
1ee8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1ee8c     08 4E 05 F1 | 	add	fp, #8
1ee90     A7 26 02 FB | 	rdlong	local01, fp
1ee94     08 4E 85 F1 | 	sub	fp, #8
1ee98     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee9c     14 4E 05 A1 |  if_e	add	fp, #20
1eea0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eea4     14 4E 85 A1 |  if_e	sub	fp, #20
1eea8     16 2B 02 A6 |  if_e	mov	local03, local04
1eeac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eeb0     24 00 90 5D |  if_ne	jmp	#LR__2435
1eeb4     00 26 06 F6 | 	mov	local01, #0
1eeb8     A7 28 02 FB | 	rdlong	local02, fp
1eebc     0C 4E 05 F1 | 	add	fp, #12
1eec0     A7 2A 02 FB | 	rdlong	local03, fp
1eec4     0C 4E 85 F1 | 	sub	fp, #12
1eec8     15 29 52 F2 | 	cmps	local02, local03 wc
1eecc     01 26 66 36 |  if_ae	neg	local01, #1
1eed0     A7 26 62 FC | 	wrlong	local01, fp
1eed4     48 02 90 FD | 	jmp	#LR__2443
1eed8                 | LR__2435
1eed8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1eed8     08 4E 05 F1 | 	add	fp, #8
1eedc     A7 26 02 FB | 	rdlong	local01, fp
1eee0     08 4E 85 F1 | 	sub	fp, #8
1eee4     1C 26 0E F2 | 	cmp	local01, #28 wz
1eee8     14 4E 05 A1 |  if_e	add	fp, #20
1eeec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eef0     14 4E 85 A1 |  if_e	sub	fp, #20
1eef4     16 2B 02 A6 |  if_e	mov	local03, local04
1eef8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eefc     24 00 90 5D |  if_ne	jmp	#LR__2436
1ef00     00 26 06 F6 | 	mov	local01, #0
1ef04     A7 28 02 FB | 	rdlong	local02, fp
1ef08     0C 4E 05 F1 | 	add	fp, #12
1ef0c     A7 2A 02 FB | 	rdlong	local03, fp
1ef10     0C 4E 85 F1 | 	sub	fp, #12
1ef14     15 29 52 F2 | 	cmps	local02, local03 wc
1ef18     01 26 66 36 |  if_ae	neg	local01, #1
1ef1c     A7 26 62 FC | 	wrlong	local01, fp
1ef20     FC 01 90 FD | 	jmp	#LR__2443
1ef24                 | LR__2436
1ef24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1ef24     08 4E 05 F1 | 	add	fp, #8
1ef28     A7 26 02 FB | 	rdlong	local01, fp
1ef2c     08 4E 85 F1 | 	sub	fp, #8
1ef30     1D 26 0E F2 | 	cmp	local01, #29 wz
1ef34     14 4E 05 A1 |  if_e	add	fp, #20
1ef38     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ef3c     14 4E 85 A1 |  if_e	sub	fp, #20
1ef40     16 2B 02 A6 |  if_e	mov	local03, local04
1ef44     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ef48     34 00 90 5D |  if_ne	jmp	#LR__2437
1ef4c     00 26 06 F6 | 	mov	local01, #0
1ef50     A7 12 02 FB | 	rdlong	arg01, fp
1ef54     D8 AF B0 FD | 	call	#__system___float_fromuns
1ef58     FD 12 02 F6 | 	mov	arg01, result1
1ef5c     0C 4E 05 F1 | 	add	fp, #12
1ef60     A7 14 02 FB | 	rdlong	arg02, fp
1ef64     0C 4E 85 F1 | 	sub	fp, #12
1ef68     01 16 66 F6 | 	neg	arg03, #1
1ef6c     F8 B7 B0 FD | 	call	#__system___float_cmp
1ef70     00 FA 55 F2 | 	cmps	result1, #0 wc
1ef74     00 26 26 36 |  if_ae	not	local01, #0
1ef78     A7 26 62 FC | 	wrlong	local01, fp
1ef7c     A0 01 90 FD | 	jmp	#LR__2443
1ef80                 | LR__2437
1ef80                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1ef80     08 4E 05 F1 | 	add	fp, #8
1ef84     A7 26 02 FB | 	rdlong	local01, fp
1ef88     08 4E 85 F1 | 	sub	fp, #8
1ef8c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ef90     14 4E 05 A1 |  if_e	add	fp, #20
1ef94     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ef98     14 4E 85 A1 |  if_e	sub	fp, #20
1ef9c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1efa0     24 00 90 5D |  if_ne	jmp	#LR__2438
1efa4     00 26 06 F6 | 	mov	local01, #0
1efa8     A7 28 02 FB | 	rdlong	local02, fp
1efac     0C 4E 05 F1 | 	add	fp, #12
1efb0     A7 2A 02 FB | 	rdlong	local03, fp
1efb4     0C 4E 85 F1 | 	sub	fp, #12
1efb8     15 29 52 F2 | 	cmps	local02, local03 wc
1efbc     01 26 66 36 |  if_ae	neg	local01, #1
1efc0     A7 26 62 FC | 	wrlong	local01, fp
1efc4     58 01 90 FD | 	jmp	#LR__2443
1efc8                 | LR__2438
1efc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1efc8     08 4E 05 F1 | 	add	fp, #8
1efcc     A7 26 02 FB | 	rdlong	local01, fp
1efd0     08 4E 85 F1 | 	sub	fp, #8
1efd4     1D 26 0E F2 | 	cmp	local01, #29 wz
1efd8     14 4E 05 A1 |  if_e	add	fp, #20
1efdc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efe0     14 4E 85 A1 |  if_e	sub	fp, #20
1efe4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1efe8     24 00 90 5D |  if_ne	jmp	#LR__2439
1efec     00 26 06 F6 | 	mov	local01, #0
1eff0     A7 28 02 FB | 	rdlong	local02, fp
1eff4     0C 4E 05 F1 | 	add	fp, #12
1eff8     A7 2A 02 FB | 	rdlong	local03, fp
1effc     0C 4E 85 F1 | 	sub	fp, #12
1f000     15 29 12 F2 | 	cmp	local02, local03 wc
1f004     01 26 66 36 |  if_ae	neg	local01, #1
1f008     A7 26 62 FC | 	wrlong	local01, fp
1f00c     10 01 90 FD | 	jmp	#LR__2443
1f010                 | LR__2439
1f010                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1f010     08 4E 05 F1 | 	add	fp, #8
1f014     A7 26 02 FB | 	rdlong	local01, fp
1f018     08 4E 85 F1 | 	sub	fp, #8
1f01c     2B 26 0E F2 | 	cmp	local01, #43 wz
1f020     14 4E 05 A1 |  if_e	add	fp, #20
1f024     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f028     14 4E 85 A1 |  if_e	sub	fp, #20
1f02c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f030     30 00 90 5D |  if_ne	jmp	#LR__2440
1f034     00 26 06 F6 | 	mov	local01, #0
1f038     A7 12 02 FB | 	rdlong	arg01, fp
1f03c     E4 E8 BE FD | 	call	#_convertstring
1f040     FD 12 02 F6 | 	mov	arg01, result1
1f044     0C 4E 05 F1 | 	add	fp, #12
1f048     A7 14 02 FB | 	rdlong	arg02, fp
1f04c     0C 4E 85 F1 | 	sub	fp, #12
1f050     8C 84 B0 FD | 	call	#__system___string_cmp
1f054     00 FA 55 F2 | 	cmps	result1, #0 wc
1f058     00 26 26 36 |  if_ae	not	local01, #0
1f05c     A7 26 62 FC | 	wrlong	local01, fp
1f060     BC 00 90 FD | 	jmp	#LR__2443
1f064                 | LR__2440
1f064                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1f064     08 4E 05 F1 | 	add	fp, #8
1f068     A7 26 02 FB | 	rdlong	local01, fp
1f06c     08 4E 85 F1 | 	sub	fp, #8
1f070     1F 26 0E F2 | 	cmp	local01, #31 wz
1f074     14 4E 05 A1 |  if_e	add	fp, #20
1f078     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f07c     14 4E 85 A1 |  if_e	sub	fp, #20
1f080     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f084     34 00 90 5D |  if_ne	jmp	#LR__2441
1f088     00 26 06 F6 | 	mov	local01, #0
1f08c     A7 28 02 FB | 	rdlong	local02, fp
1f090     0C 4E 05 F1 | 	add	fp, #12
1f094     A7 12 02 FB | 	rdlong	arg01, fp
1f098     0C 4E 85 F1 | 	sub	fp, #12
1f09c     84 E8 BE FD | 	call	#_convertstring
1f0a0     FD 14 02 F6 | 	mov	arg02, result1
1f0a4     14 13 02 F6 | 	mov	arg01, local02
1f0a8     34 84 B0 FD | 	call	#__system___string_cmp
1f0ac     00 FA 55 F2 | 	cmps	result1, #0 wc
1f0b0     00 26 26 36 |  if_ae	not	local01, #0
1f0b4     A7 26 62 FC | 	wrlong	local01, fp
1f0b8     64 00 90 FD | 	jmp	#LR__2443
1f0bc                 | LR__2441
1f0bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1f0bc     08 4E 05 F1 | 	add	fp, #8
1f0c0     A7 26 02 FB | 	rdlong	local01, fp
1f0c4     08 4E 85 F1 | 	sub	fp, #8
1f0c8     2B 26 0E F2 | 	cmp	local01, #43 wz
1f0cc     14 4E 05 A1 |  if_e	add	fp, #20
1f0d0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f0d4     14 4E 85 A1 |  if_e	sub	fp, #20
1f0d8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f0dc     3C 00 90 5D |  if_ne	jmp	#LR__2442
1f0e0     00 26 06 F6 | 	mov	local01, #0
1f0e4     A7 12 02 FB | 	rdlong	arg01, fp
1f0e8     38 E8 BE FD | 	call	#_convertstring
1f0ec     FD 28 02 F6 | 	mov	local02, result1
1f0f0     0C 4E 05 F1 | 	add	fp, #12
1f0f4     A7 12 02 FB | 	rdlong	arg01, fp
1f0f8     0C 4E 85 F1 | 	sub	fp, #12
1f0fc     24 E8 BE FD | 	call	#_convertstring
1f100     FD 14 02 F6 | 	mov	arg02, result1
1f104     14 13 02 F6 | 	mov	arg01, local02
1f108     D4 83 B0 FD | 	call	#__system___string_cmp
1f10c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f110     00 26 26 36 |  if_ae	not	local01, #0
1f114     A7 26 62 FC | 	wrlong	local01, fp
1f118     04 00 90 FD | 	jmp	#LR__2443
1f11c                 | LR__2442
1f11c     A7 00 68 FC | 	wrlong	#0, fp
1f120                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f120                 | LR__2443
1f120     08 4E 05 F1 | 	add	fp, #8
1f124     A7 38 68 FC | 	wrlong	#28, fp
1f128     08 4E 85 F1 | 	sub	fp, #8
1f12c                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f12c     A7 26 0A FB | 	rdlong	local01, fp wz
1f130     A7 02 68 5C |  if_ne	wrlong	#1, fp
1f134     A7 12 02 F6 | 	mov	arg01, fp
1f138     08 E7 BE FD | 	call	#_push
1f13c     A7 F0 03 F6 | 	mov	ptra, fp
1f140     B2 00 A0 FD | 	call	#popregs_
1f144                 | _do_ge_ret
1f144     2D 00 64 FD | 	ret
1f148                 | 
1f148                 | ' 
1f148                 | ' '--------------------------------- greater than (>)
1f148                 | ' 
1f148                 | ' sub do_gt
1f148                 | _do_gt
1f148     05 4A 05 F6 | 	mov	COUNT_, #5
1f14c     A8 00 A0 FD | 	call	#pushregs_
1f150     18 F0 07 F1 | 	add	ptra, #24
1f154     54 E6 BE FD | 	call	#_pop
1f158     FD 26 02 F6 | 	mov	local01, result1
1f15c     FE 28 02 F6 | 	mov	local02, result2
1f160     FF 2A 02 F6 | 	mov	local03, result3
1f164     0C 4E 05 F1 | 	add	fp, #12
1f168     A7 26 62 FC | 	wrlong	local01, fp
1f16c     04 4E 05 F1 | 	add	fp, #4
1f170     A7 28 62 FC | 	wrlong	local02, fp
1f174     04 4E 05 F1 | 	add	fp, #4
1f178     A7 2A 62 FC | 	wrlong	local03, fp
1f17c     14 4E 85 F1 | 	sub	fp, #20
1f180     28 E6 BE FD | 	call	#_pop
1f184     FF 2A 02 F6 | 	mov	local03, result3
1f188     A7 FA 61 FC | 	wrlong	result1, fp
1f18c     04 4E 05 F1 | 	add	fp, #4
1f190     A7 FC 61 FC | 	wrlong	result2, fp
1f194     04 4E 05 F1 | 	add	fp, #4
1f198     A7 2A 62 FC | 	wrlong	local03, fp
1f19c                 | ' 
1f19c                 | ' t2=pop()
1f19c                 | ' t1=pop()
1f19c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1f19c     08 4E 85 F1 | 	sub	fp, #8
1f1a0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f1a4     14 4E 05 A1 |  if_e	add	fp, #20
1f1a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1ac     14 4E 85 A1 |  if_e	sub	fp, #20
1f1b0     16 2B 02 A6 |  if_e	mov	local03, local04
1f1b4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f1b8     28 00 90 5D |  if_ne	jmp	#LR__2450
1f1bc     00 26 06 F6 | 	mov	local01, #0
1f1c0     A7 12 02 FB | 	rdlong	arg01, fp
1f1c4     0C 4E 05 F1 | 	add	fp, #12
1f1c8     A7 14 02 FB | 	rdlong	arg02, fp
1f1cc     0C 4E 85 F1 | 	sub	fp, #12
1f1d0     0C 83 B0 FD | 	call	#__system___string_cmp
1f1d4     01 FA 55 F2 | 	cmps	result1, #1 wc
1f1d8     00 26 26 36 |  if_ae	not	local01, #0
1f1dc     A7 26 62 FC | 	wrlong	local01, fp
1f1e0     20 04 90 FD | 	jmp	#LR__2463
1f1e4                 | LR__2450
1f1e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1f1e4     08 4E 05 F1 | 	add	fp, #8
1f1e8     A7 26 02 FB | 	rdlong	local01, fp
1f1ec     08 4E 85 F1 | 	sub	fp, #8
1f1f0     1E 26 0E F2 | 	cmp	local01, #30 wz
1f1f4     14 4E 05 A1 |  if_e	add	fp, #20
1f1f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1fc     14 4E 85 A1 |  if_e	sub	fp, #20
1f200     16 2B 02 A6 |  if_e	mov	local03, local04
1f204     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f208     2C 00 90 5D |  if_ne	jmp	#LR__2451
1f20c     00 26 06 F6 | 	mov	local01, #0
1f210     A7 12 02 FB | 	rdlong	arg01, fp
1f214     0C 4E 05 F1 | 	add	fp, #12
1f218     A7 14 02 FB | 	rdlong	arg02, fp
1f21c     0C 4E 85 F1 | 	sub	fp, #12
1f220     01 16 66 F6 | 	neg	arg03, #1
1f224     40 B5 B0 FD | 	call	#__system___float_cmp
1f228     01 FA 55 F2 | 	cmps	result1, #1 wc
1f22c     00 26 26 36 |  if_ae	not	local01, #0
1f230     A7 26 62 FC | 	wrlong	local01, fp
1f234     CC 03 90 FD | 	jmp	#LR__2463
1f238                 | LR__2451
1f238                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1f238     08 4E 05 F1 | 	add	fp, #8
1f23c     A7 26 02 FB | 	rdlong	local01, fp
1f240     08 4E 85 F1 | 	sub	fp, #8
1f244     1E 26 0E F2 | 	cmp	local01, #30 wz
1f248     14 4E 05 A1 |  if_e	add	fp, #20
1f24c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f250     14 4E 85 A1 |  if_e	sub	fp, #20
1f254     16 2B 02 A6 |  if_e	mov	local03, local04
1f258     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f25c     48 00 90 5D |  if_ne	jmp	#LR__2452
1f260     00 26 06 F6 | 	mov	local01, #0
1f264     A7 28 02 FB | 	rdlong	local02, fp
1f268     0C 4E 05 F1 | 	add	fp, #12
1f26c     A7 12 02 FB | 	rdlong	arg01, fp
1f270     0C 4E 85 F1 | 	sub	fp, #12
1f274     09 13 52 F6 | 	abs	arg01, arg01 wc
1f278     1F 2E C6 C9 |  if_b	decod	local05, #31
1f27c     00 2E 06 36 |  if_ae	mov	local05, #0
1f280     AC AC B0 FD | 	call	#__system___float_fromuns
1f284     17 FB 61 F5 | 	xor	result1, local05
1f288     FD 14 02 F6 | 	mov	arg02, result1
1f28c     14 13 02 F6 | 	mov	arg01, local02
1f290     01 16 66 F6 | 	neg	arg03, #1
1f294     D0 B4 B0 FD | 	call	#__system___float_cmp
1f298     01 FA 55 F2 | 	cmps	result1, #1 wc
1f29c     00 26 26 36 |  if_ae	not	local01, #0
1f2a0     A7 26 62 FC | 	wrlong	local01, fp
1f2a4     5C 03 90 FD | 	jmp	#LR__2463
1f2a8                 | LR__2452
1f2a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1f2a8     08 4E 05 F1 | 	add	fp, #8
1f2ac     A7 26 02 FB | 	rdlong	local01, fp
1f2b0     08 4E 85 F1 | 	sub	fp, #8
1f2b4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f2b8     14 4E 05 A1 |  if_e	add	fp, #20
1f2bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2c0     14 4E 85 A1 |  if_e	sub	fp, #20
1f2c4     16 2B 02 A6 |  if_e	mov	local03, local04
1f2c8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f2cc     38 00 90 5D |  if_ne	jmp	#LR__2453
1f2d0     00 26 06 F6 | 	mov	local01, #0
1f2d4     A7 28 02 FB | 	rdlong	local02, fp
1f2d8     0C 4E 05 F1 | 	add	fp, #12
1f2dc     A7 12 02 FB | 	rdlong	arg01, fp
1f2e0     0C 4E 85 F1 | 	sub	fp, #12
1f2e4     48 AC B0 FD | 	call	#__system___float_fromuns
1f2e8     FD 14 02 F6 | 	mov	arg02, result1
1f2ec     14 13 02 F6 | 	mov	arg01, local02
1f2f0     01 16 66 F6 | 	neg	arg03, #1
1f2f4     70 B4 B0 FD | 	call	#__system___float_cmp
1f2f8     01 FA 55 F2 | 	cmps	result1, #1 wc
1f2fc     00 26 26 36 |  if_ae	not	local01, #0
1f300     A7 26 62 FC | 	wrlong	local01, fp
1f304     FC 02 90 FD | 	jmp	#LR__2463
1f308                 | LR__2453
1f308                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1f308     08 4E 05 F1 | 	add	fp, #8
1f30c     A7 26 02 FB | 	rdlong	local01, fp
1f310     08 4E 85 F1 | 	sub	fp, #8
1f314     1C 26 0E F2 | 	cmp	local01, #28 wz
1f318     14 4E 05 A1 |  if_e	add	fp, #20
1f31c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f320     14 4E 85 A1 |  if_e	sub	fp, #20
1f324     16 2B 02 A6 |  if_e	mov	local03, local04
1f328     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f32c     44 00 90 5D |  if_ne	jmp	#LR__2454
1f330     00 26 06 F6 | 	mov	local01, #0
1f334     A7 12 02 FB | 	rdlong	arg01, fp
1f338     09 13 52 F6 | 	abs	arg01, arg01 wc
1f33c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f340     00 2E 06 36 |  if_ae	mov	local05, #0
1f344     E8 AB B0 FD | 	call	#__system___float_fromuns
1f348     17 FB 61 F5 | 	xor	result1, local05
1f34c     FD 12 02 F6 | 	mov	arg01, result1
1f350     0C 4E 05 F1 | 	add	fp, #12
1f354     A7 14 02 FB | 	rdlong	arg02, fp
1f358     0C 4E 85 F1 | 	sub	fp, #12
1f35c     01 16 66 F6 | 	neg	arg03, #1
1f360     04 B4 B0 FD | 	call	#__system___float_cmp
1f364     01 FA 55 F2 | 	cmps	result1, #1 wc
1f368     00 26 26 36 |  if_ae	not	local01, #0
1f36c     A7 26 62 FC | 	wrlong	local01, fp
1f370     90 02 90 FD | 	jmp	#LR__2463
1f374                 | LR__2454
1f374                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1f374     08 4E 05 F1 | 	add	fp, #8
1f378     A7 26 02 FB | 	rdlong	local01, fp
1f37c     08 4E 85 F1 | 	sub	fp, #8
1f380     1C 26 0E F2 | 	cmp	local01, #28 wz
1f384     14 4E 05 A1 |  if_e	add	fp, #20
1f388     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f38c     14 4E 85 A1 |  if_e	sub	fp, #20
1f390     16 2B 02 A6 |  if_e	mov	local03, local04
1f394     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f398     24 00 90 5D |  if_ne	jmp	#LR__2455
1f39c     00 26 06 F6 | 	mov	local01, #0
1f3a0     A7 28 02 FB | 	rdlong	local02, fp
1f3a4     0C 4E 05 F1 | 	add	fp, #12
1f3a8     A7 2A 02 FB | 	rdlong	local03, fp
1f3ac     0C 4E 85 F1 | 	sub	fp, #12
1f3b0     15 29 5A F2 | 	cmps	local02, local03 wcz
1f3b4     01 26 66 16 |  if_a	neg	local01, #1
1f3b8     A7 26 62 FC | 	wrlong	local01, fp
1f3bc     44 02 90 FD | 	jmp	#LR__2463
1f3c0                 | LR__2455
1f3c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1f3c0     08 4E 05 F1 | 	add	fp, #8
1f3c4     A7 26 02 FB | 	rdlong	local01, fp
1f3c8     08 4E 85 F1 | 	sub	fp, #8
1f3cc     1C 26 0E F2 | 	cmp	local01, #28 wz
1f3d0     14 4E 05 A1 |  if_e	add	fp, #20
1f3d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3d8     14 4E 85 A1 |  if_e	sub	fp, #20
1f3dc     16 2B 02 A6 |  if_e	mov	local03, local04
1f3e0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f3e4     24 00 90 5D |  if_ne	jmp	#LR__2456
1f3e8     00 26 06 F6 | 	mov	local01, #0
1f3ec     A7 28 02 FB | 	rdlong	local02, fp
1f3f0     0C 4E 05 F1 | 	add	fp, #12
1f3f4     A7 2A 02 FB | 	rdlong	local03, fp
1f3f8     0C 4E 85 F1 | 	sub	fp, #12
1f3fc     15 29 5A F2 | 	cmps	local02, local03 wcz
1f400     01 26 66 16 |  if_a	neg	local01, #1
1f404     A7 26 62 FC | 	wrlong	local01, fp
1f408     F8 01 90 FD | 	jmp	#LR__2463
1f40c                 | LR__2456
1f40c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1f40c     08 4E 05 F1 | 	add	fp, #8
1f410     A7 26 02 FB | 	rdlong	local01, fp
1f414     08 4E 85 F1 | 	sub	fp, #8
1f418     1D 26 0E F2 | 	cmp	local01, #29 wz
1f41c     14 4E 05 A1 |  if_e	add	fp, #20
1f420     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f424     14 4E 85 A1 |  if_e	sub	fp, #20
1f428     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f42c     34 00 90 5D |  if_ne	jmp	#LR__2457
1f430     00 26 06 F6 | 	mov	local01, #0
1f434     A7 12 02 FB | 	rdlong	arg01, fp
1f438     F4 AA B0 FD | 	call	#__system___float_fromuns
1f43c     FD 12 02 F6 | 	mov	arg01, result1
1f440     0C 4E 05 F1 | 	add	fp, #12
1f444     A7 14 02 FB | 	rdlong	arg02, fp
1f448     0C 4E 85 F1 | 	sub	fp, #12
1f44c     01 16 66 F6 | 	neg	arg03, #1
1f450     14 B3 B0 FD | 	call	#__system___float_cmp
1f454     01 FA 55 F2 | 	cmps	result1, #1 wc
1f458     00 26 26 36 |  if_ae	not	local01, #0
1f45c     A7 26 62 FC | 	wrlong	local01, fp
1f460     A0 01 90 FD | 	jmp	#LR__2463
1f464                 | LR__2457
1f464                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1f464     08 4E 05 F1 | 	add	fp, #8
1f468     A7 26 02 FB | 	rdlong	local01, fp
1f46c     08 4E 85 F1 | 	sub	fp, #8
1f470     1D 26 0E F2 | 	cmp	local01, #29 wz
1f474     14 4E 05 A1 |  if_e	add	fp, #20
1f478     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f47c     14 4E 85 A1 |  if_e	sub	fp, #20
1f480     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f484     24 00 90 5D |  if_ne	jmp	#LR__2458
1f488     00 26 06 F6 | 	mov	local01, #0
1f48c     A7 28 02 FB | 	rdlong	local02, fp
1f490     0C 4E 05 F1 | 	add	fp, #12
1f494     A7 2A 02 FB | 	rdlong	local03, fp
1f498     0C 4E 85 F1 | 	sub	fp, #12
1f49c     15 29 5A F2 | 	cmps	local02, local03 wcz
1f4a0     01 26 66 16 |  if_a	neg	local01, #1
1f4a4     A7 26 62 FC | 	wrlong	local01, fp
1f4a8     58 01 90 FD | 	jmp	#LR__2463
1f4ac                 | LR__2458
1f4ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1f4ac     08 4E 05 F1 | 	add	fp, #8
1f4b0     A7 26 02 FB | 	rdlong	local01, fp
1f4b4     08 4E 85 F1 | 	sub	fp, #8
1f4b8     1D 26 0E F2 | 	cmp	local01, #29 wz
1f4bc     14 4E 05 A1 |  if_e	add	fp, #20
1f4c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4c4     14 4E 85 A1 |  if_e	sub	fp, #20
1f4c8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f4cc     24 00 90 5D |  if_ne	jmp	#LR__2459
1f4d0     00 26 06 F6 | 	mov	local01, #0
1f4d4     A7 28 02 FB | 	rdlong	local02, fp
1f4d8     0C 4E 05 F1 | 	add	fp, #12
1f4dc     A7 2A 02 FB | 	rdlong	local03, fp
1f4e0     0C 4E 85 F1 | 	sub	fp, #12
1f4e4     15 29 1A F2 | 	cmp	local02, local03 wcz
1f4e8     01 26 66 16 |  if_a	neg	local01, #1
1f4ec     A7 26 62 FC | 	wrlong	local01, fp
1f4f0     10 01 90 FD | 	jmp	#LR__2463
1f4f4                 | LR__2459
1f4f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1f4f4     08 4E 05 F1 | 	add	fp, #8
1f4f8     A7 26 02 FB | 	rdlong	local01, fp
1f4fc     08 4E 85 F1 | 	sub	fp, #8
1f500     2B 26 0E F2 | 	cmp	local01, #43 wz
1f504     14 4E 05 A1 |  if_e	add	fp, #20
1f508     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f50c     14 4E 85 A1 |  if_e	sub	fp, #20
1f510     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f514     30 00 90 5D |  if_ne	jmp	#LR__2460
1f518     00 26 06 F6 | 	mov	local01, #0
1f51c     A7 12 02 FB | 	rdlong	arg01, fp
1f520     00 E4 BE FD | 	call	#_convertstring
1f524     FD 12 02 F6 | 	mov	arg01, result1
1f528     0C 4E 05 F1 | 	add	fp, #12
1f52c     A7 14 02 FB | 	rdlong	arg02, fp
1f530     0C 4E 85 F1 | 	sub	fp, #12
1f534     A8 7F B0 FD | 	call	#__system___string_cmp
1f538     01 FA 55 F2 | 	cmps	result1, #1 wc
1f53c     00 26 26 36 |  if_ae	not	local01, #0
1f540     A7 26 62 FC | 	wrlong	local01, fp
1f544     BC 00 90 FD | 	jmp	#LR__2463
1f548                 | LR__2460
1f548                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1f548     08 4E 05 F1 | 	add	fp, #8
1f54c     A7 26 02 FB | 	rdlong	local01, fp
1f550     08 4E 85 F1 | 	sub	fp, #8
1f554     1F 26 0E F2 | 	cmp	local01, #31 wz
1f558     14 4E 05 A1 |  if_e	add	fp, #20
1f55c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f560     14 4E 85 A1 |  if_e	sub	fp, #20
1f564     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f568     34 00 90 5D |  if_ne	jmp	#LR__2461
1f56c     00 26 06 F6 | 	mov	local01, #0
1f570     A7 28 02 FB | 	rdlong	local02, fp
1f574     0C 4E 05 F1 | 	add	fp, #12
1f578     A7 12 02 FB | 	rdlong	arg01, fp
1f57c     0C 4E 85 F1 | 	sub	fp, #12
1f580     A0 E3 BE FD | 	call	#_convertstring
1f584     FD 14 02 F6 | 	mov	arg02, result1
1f588     14 13 02 F6 | 	mov	arg01, local02
1f58c     50 7F B0 FD | 	call	#__system___string_cmp
1f590     01 FA 55 F2 | 	cmps	result1, #1 wc
1f594     00 26 26 36 |  if_ae	not	local01, #0
1f598     A7 26 62 FC | 	wrlong	local01, fp
1f59c     64 00 90 FD | 	jmp	#LR__2463
1f5a0                 | LR__2461
1f5a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1f5a0     08 4E 05 F1 | 	add	fp, #8
1f5a4     A7 26 02 FB | 	rdlong	local01, fp
1f5a8     08 4E 85 F1 | 	sub	fp, #8
1f5ac     2B 26 0E F2 | 	cmp	local01, #43 wz
1f5b0     14 4E 05 A1 |  if_e	add	fp, #20
1f5b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f5b8     14 4E 85 A1 |  if_e	sub	fp, #20
1f5bc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f5c0     3C 00 90 5D |  if_ne	jmp	#LR__2462
1f5c4     00 26 06 F6 | 	mov	local01, #0
1f5c8     A7 12 02 FB | 	rdlong	arg01, fp
1f5cc     54 E3 BE FD | 	call	#_convertstring
1f5d0     FD 28 02 F6 | 	mov	local02, result1
1f5d4     0C 4E 05 F1 | 	add	fp, #12
1f5d8     A7 12 02 FB | 	rdlong	arg01, fp
1f5dc     0C 4E 85 F1 | 	sub	fp, #12
1f5e0     40 E3 BE FD | 	call	#_convertstring
1f5e4     FD 14 02 F6 | 	mov	arg02, result1
1f5e8     14 13 02 F6 | 	mov	arg01, local02
1f5ec     F0 7E B0 FD | 	call	#__system___string_cmp
1f5f0     01 FA 55 F2 | 	cmps	result1, #1 wc
1f5f4     00 26 26 36 |  if_ae	not	local01, #0
1f5f8     A7 26 62 FC | 	wrlong	local01, fp
1f5fc     04 00 90 FD | 	jmp	#LR__2463
1f600                 | LR__2462
1f600     A7 00 68 FC | 	wrlong	#0, fp
1f604                 | LR__2463
1f604     08 4E 05 F1 | 	add	fp, #8
1f608     A7 38 68 FC | 	wrlong	#28, fp
1f60c     08 4E 85 F1 | 	sub	fp, #8
1f610                 | ' t1.result.uresult=0
1f610                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f610     A7 26 0A FB | 	rdlong	local01, fp wz
1f614     A7 02 68 5C |  if_ne	wrlong	#1, fp
1f618     A7 12 02 F6 | 	mov	arg01, fp
1f61c     24 E2 BE FD | 	call	#_push
1f620     A7 F0 03 F6 | 	mov	ptra, fp
1f624     B2 00 A0 FD | 	call	#popregs_
1f628                 | _do_gt_ret
1f628     2D 00 64 FD | 	ret
1f62c                 | 
1f62c                 | ' 
1f62c                 | ' '--------------------------------- less or equal (<=)
1f62c                 | ' 
1f62c                 | ' sub do_le
1f62c                 | _do_le
1f62c     05 4A 05 F6 | 	mov	COUNT_, #5
1f630     A8 00 A0 FD | 	call	#pushregs_
1f634     18 F0 07 F1 | 	add	ptra, #24
1f638     70 E1 BE FD | 	call	#_pop
1f63c     FD 26 02 F6 | 	mov	local01, result1
1f640     FE 28 02 F6 | 	mov	local02, result2
1f644     FF 2A 02 F6 | 	mov	local03, result3
1f648     0C 4E 05 F1 | 	add	fp, #12
1f64c     A7 26 62 FC | 	wrlong	local01, fp
1f650     04 4E 05 F1 | 	add	fp, #4
1f654     A7 28 62 FC | 	wrlong	local02, fp
1f658     04 4E 05 F1 | 	add	fp, #4
1f65c     A7 2A 62 FC | 	wrlong	local03, fp
1f660     14 4E 85 F1 | 	sub	fp, #20
1f664     44 E1 BE FD | 	call	#_pop
1f668     FF 2A 02 F6 | 	mov	local03, result3
1f66c     A7 FA 61 FC | 	wrlong	result1, fp
1f670     04 4E 05 F1 | 	add	fp, #4
1f674     A7 FC 61 FC | 	wrlong	result2, fp
1f678     04 4E 05 F1 | 	add	fp, #4
1f67c     A7 2A 62 FC | 	wrlong	local03, fp
1f680                 | ' 
1f680                 | ' t2=pop()
1f680                 | ' t1=pop()
1f680                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1f680     08 4E 85 F1 | 	sub	fp, #8
1f684     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f688     14 4E 05 A1 |  if_e	add	fp, #20
1f68c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f690     14 4E 85 A1 |  if_e	sub	fp, #20
1f694     16 2B 02 A6 |  if_e	mov	local03, local04
1f698     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f69c     28 00 90 5D |  if_ne	jmp	#LR__2470
1f6a0     00 26 06 F6 | 	mov	local01, #0
1f6a4     A7 12 02 FB | 	rdlong	arg01, fp
1f6a8     0C 4E 05 F1 | 	add	fp, #12
1f6ac     A7 14 02 FB | 	rdlong	arg02, fp
1f6b0     0C 4E 85 F1 | 	sub	fp, #12
1f6b4     28 7E B0 FD | 	call	#__system___string_cmp
1f6b8     01 FA 55 F2 | 	cmps	result1, #1 wc
1f6bc     00 26 26 C6 |  if_b	not	local01, #0
1f6c0     A7 26 62 FC | 	wrlong	local01, fp
1f6c4     20 04 90 FD | 	jmp	#LR__2483
1f6c8                 | LR__2470
1f6c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1f6c8     08 4E 05 F1 | 	add	fp, #8
1f6cc     A7 26 02 FB | 	rdlong	local01, fp
1f6d0     08 4E 85 F1 | 	sub	fp, #8
1f6d4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f6d8     14 4E 05 A1 |  if_e	add	fp, #20
1f6dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6e0     14 4E 85 A1 |  if_e	sub	fp, #20
1f6e4     16 2B 02 A6 |  if_e	mov	local03, local04
1f6e8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f6ec     2C 00 90 5D |  if_ne	jmp	#LR__2471
1f6f0     00 26 06 F6 | 	mov	local01, #0
1f6f4     A7 12 02 FB | 	rdlong	arg01, fp
1f6f8     0C 4E 05 F1 | 	add	fp, #12
1f6fc     A7 14 02 FB | 	rdlong	arg02, fp
1f700     0C 4E 85 F1 | 	sub	fp, #12
1f704     01 16 06 F6 | 	mov	arg03, #1
1f708     5C B0 B0 FD | 	call	#__system___float_cmp
1f70c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f710     00 26 26 C6 |  if_b	not	local01, #0
1f714     A7 26 62 FC | 	wrlong	local01, fp
1f718     CC 03 90 FD | 	jmp	#LR__2483
1f71c                 | LR__2471
1f71c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1f71c     08 4E 05 F1 | 	add	fp, #8
1f720     A7 26 02 FB | 	rdlong	local01, fp
1f724     08 4E 85 F1 | 	sub	fp, #8
1f728     1E 26 0E F2 | 	cmp	local01, #30 wz
1f72c     14 4E 05 A1 |  if_e	add	fp, #20
1f730     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f734     14 4E 85 A1 |  if_e	sub	fp, #20
1f738     16 2B 02 A6 |  if_e	mov	local03, local04
1f73c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f740     48 00 90 5D |  if_ne	jmp	#LR__2472
1f744     00 26 06 F6 | 	mov	local01, #0
1f748     A7 28 02 FB | 	rdlong	local02, fp
1f74c     0C 4E 05 F1 | 	add	fp, #12
1f750     A7 12 02 FB | 	rdlong	arg01, fp
1f754     0C 4E 85 F1 | 	sub	fp, #12
1f758     09 13 52 F6 | 	abs	arg01, arg01 wc
1f75c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f760     00 2E 06 36 |  if_ae	mov	local05, #0
1f764     C8 A7 B0 FD | 	call	#__system___float_fromuns
1f768     17 FB 61 F5 | 	xor	result1, local05
1f76c     FD 14 02 F6 | 	mov	arg02, result1
1f770     14 13 02 F6 | 	mov	arg01, local02
1f774     01 16 06 F6 | 	mov	arg03, #1
1f778     EC AF B0 FD | 	call	#__system___float_cmp
1f77c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f780     00 26 26 C6 |  if_b	not	local01, #0
1f784     A7 26 62 FC | 	wrlong	local01, fp
1f788     5C 03 90 FD | 	jmp	#LR__2483
1f78c                 | LR__2472
1f78c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1f78c     08 4E 05 F1 | 	add	fp, #8
1f790     A7 26 02 FB | 	rdlong	local01, fp
1f794     08 4E 85 F1 | 	sub	fp, #8
1f798     1E 26 0E F2 | 	cmp	local01, #30 wz
1f79c     14 4E 05 A1 |  if_e	add	fp, #20
1f7a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7a4     14 4E 85 A1 |  if_e	sub	fp, #20
1f7a8     16 2B 02 A6 |  if_e	mov	local03, local04
1f7ac     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f7b0     38 00 90 5D |  if_ne	jmp	#LR__2473
1f7b4     00 26 06 F6 | 	mov	local01, #0
1f7b8     A7 28 02 FB | 	rdlong	local02, fp
1f7bc     0C 4E 05 F1 | 	add	fp, #12
1f7c0     A7 12 02 FB | 	rdlong	arg01, fp
1f7c4     0C 4E 85 F1 | 	sub	fp, #12
1f7c8     64 A7 B0 FD | 	call	#__system___float_fromuns
1f7cc     FD 14 02 F6 | 	mov	arg02, result1
1f7d0     14 13 02 F6 | 	mov	arg01, local02
1f7d4     01 16 06 F6 | 	mov	arg03, #1
1f7d8     8C AF B0 FD | 	call	#__system___float_cmp
1f7dc     01 FA 55 F2 | 	cmps	result1, #1 wc
1f7e0     00 26 26 C6 |  if_b	not	local01, #0
1f7e4     A7 26 62 FC | 	wrlong	local01, fp
1f7e8     FC 02 90 FD | 	jmp	#LR__2483
1f7ec                 | LR__2473
1f7ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1f7ec     08 4E 05 F1 | 	add	fp, #8
1f7f0     A7 26 02 FB | 	rdlong	local01, fp
1f7f4     08 4E 85 F1 | 	sub	fp, #8
1f7f8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f7fc     14 4E 05 A1 |  if_e	add	fp, #20
1f800     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f804     14 4E 85 A1 |  if_e	sub	fp, #20
1f808     16 2B 02 A6 |  if_e	mov	local03, local04
1f80c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f810     44 00 90 5D |  if_ne	jmp	#LR__2474
1f814     00 26 06 F6 | 	mov	local01, #0
1f818     A7 12 02 FB | 	rdlong	arg01, fp
1f81c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f820     1F 2E C6 C9 |  if_b	decod	local05, #31
1f824     00 2E 06 36 |  if_ae	mov	local05, #0
1f828     04 A7 B0 FD | 	call	#__system___float_fromuns
1f82c     17 FB 61 F5 | 	xor	result1, local05
1f830     FD 12 02 F6 | 	mov	arg01, result1
1f834     0C 4E 05 F1 | 	add	fp, #12
1f838     A7 14 02 FB | 	rdlong	arg02, fp
1f83c     0C 4E 85 F1 | 	sub	fp, #12
1f840     01 16 06 F6 | 	mov	arg03, #1
1f844     20 AF B0 FD | 	call	#__system___float_cmp
1f848     01 FA 55 F2 | 	cmps	result1, #1 wc
1f84c     00 26 26 C6 |  if_b	not	local01, #0
1f850     A7 26 62 FC | 	wrlong	local01, fp
1f854     90 02 90 FD | 	jmp	#LR__2483
1f858                 | LR__2474
1f858                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1f858     08 4E 05 F1 | 	add	fp, #8
1f85c     A7 26 02 FB | 	rdlong	local01, fp
1f860     08 4E 85 F1 | 	sub	fp, #8
1f864     1C 26 0E F2 | 	cmp	local01, #28 wz
1f868     14 4E 05 A1 |  if_e	add	fp, #20
1f86c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f870     14 4E 85 A1 |  if_e	sub	fp, #20
1f874     16 2B 02 A6 |  if_e	mov	local03, local04
1f878     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f87c     24 00 90 5D |  if_ne	jmp	#LR__2475
1f880     00 26 06 F6 | 	mov	local01, #0
1f884     A7 28 02 FB | 	rdlong	local02, fp
1f888     0C 4E 05 F1 | 	add	fp, #12
1f88c     A7 2A 02 FB | 	rdlong	local03, fp
1f890     0C 4E 85 F1 | 	sub	fp, #12
1f894     15 29 5A F2 | 	cmps	local02, local03 wcz
1f898     01 26 66 E6 |  if_be	neg	local01, #1
1f89c     A7 26 62 FC | 	wrlong	local01, fp
1f8a0     44 02 90 FD | 	jmp	#LR__2483
1f8a4                 | LR__2475
1f8a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1f8a4     08 4E 05 F1 | 	add	fp, #8
1f8a8     A7 26 02 FB | 	rdlong	local01, fp
1f8ac     08 4E 85 F1 | 	sub	fp, #8
1f8b0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f8b4     14 4E 05 A1 |  if_e	add	fp, #20
1f8b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f8bc     14 4E 85 A1 |  if_e	sub	fp, #20
1f8c0     16 2B 02 A6 |  if_e	mov	local03, local04
1f8c4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f8c8     24 00 90 5D |  if_ne	jmp	#LR__2476
1f8cc     00 26 06 F6 | 	mov	local01, #0
1f8d0     A7 28 02 FB | 	rdlong	local02, fp
1f8d4     0C 4E 05 F1 | 	add	fp, #12
1f8d8     A7 2A 02 FB | 	rdlong	local03, fp
1f8dc     0C 4E 85 F1 | 	sub	fp, #12
1f8e0     15 29 5A F2 | 	cmps	local02, local03 wcz
1f8e4     01 26 66 E6 |  if_be	neg	local01, #1
1f8e8     A7 26 62 FC | 	wrlong	local01, fp
1f8ec     F8 01 90 FD | 	jmp	#LR__2483
1f8f0                 | LR__2476
1f8f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1f8f0     08 4E 05 F1 | 	add	fp, #8
1f8f4     A7 26 02 FB | 	rdlong	local01, fp
1f8f8     08 4E 85 F1 | 	sub	fp, #8
1f8fc     1D 26 0E F2 | 	cmp	local01, #29 wz
1f900     14 4E 05 A1 |  if_e	add	fp, #20
1f904     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f908     14 4E 85 A1 |  if_e	sub	fp, #20
1f90c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f910     34 00 90 5D |  if_ne	jmp	#LR__2477
1f914     00 26 06 F6 | 	mov	local01, #0
1f918     A7 12 02 FB | 	rdlong	arg01, fp
1f91c     10 A6 B0 FD | 	call	#__system___float_fromuns
1f920     FD 12 02 F6 | 	mov	arg01, result1
1f924     0C 4E 05 F1 | 	add	fp, #12
1f928     A7 14 02 FB | 	rdlong	arg02, fp
1f92c     0C 4E 85 F1 | 	sub	fp, #12
1f930     01 16 06 F6 | 	mov	arg03, #1
1f934     30 AE B0 FD | 	call	#__system___float_cmp
1f938     01 FA 55 F2 | 	cmps	result1, #1 wc
1f93c     00 26 26 C6 |  if_b	not	local01, #0
1f940     A7 26 62 FC | 	wrlong	local01, fp
1f944     A0 01 90 FD | 	jmp	#LR__2483
1f948                 | LR__2477
1f948                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1f948     08 4E 05 F1 | 	add	fp, #8
1f94c     A7 26 02 FB | 	rdlong	local01, fp
1f950     08 4E 85 F1 | 	sub	fp, #8
1f954     1D 26 0E F2 | 	cmp	local01, #29 wz
1f958     14 4E 05 A1 |  if_e	add	fp, #20
1f95c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f960     14 4E 85 A1 |  if_e	sub	fp, #20
1f964     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f968     24 00 90 5D |  if_ne	jmp	#LR__2478
1f96c     00 26 06 F6 | 	mov	local01, #0
1f970     A7 28 02 FB | 	rdlong	local02, fp
1f974     0C 4E 05 F1 | 	add	fp, #12
1f978     A7 2A 02 FB | 	rdlong	local03, fp
1f97c     0C 4E 85 F1 | 	sub	fp, #12
1f980     15 29 5A F2 | 	cmps	local02, local03 wcz
1f984     01 26 66 E6 |  if_be	neg	local01, #1
1f988     A7 26 62 FC | 	wrlong	local01, fp
1f98c     58 01 90 FD | 	jmp	#LR__2483
1f990                 | LR__2478
1f990                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1f990     08 4E 05 F1 | 	add	fp, #8
1f994     A7 26 02 FB | 	rdlong	local01, fp
1f998     08 4E 85 F1 | 	sub	fp, #8
1f99c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f9a0     14 4E 05 A1 |  if_e	add	fp, #20
1f9a4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9a8     14 4E 85 A1 |  if_e	sub	fp, #20
1f9ac     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f9b0     24 00 90 5D |  if_ne	jmp	#LR__2479
1f9b4     00 26 06 F6 | 	mov	local01, #0
1f9b8     A7 28 02 FB | 	rdlong	local02, fp
1f9bc     0C 4E 05 F1 | 	add	fp, #12
1f9c0     A7 2A 02 FB | 	rdlong	local03, fp
1f9c4     0C 4E 85 F1 | 	sub	fp, #12
1f9c8     15 29 1A F2 | 	cmp	local02, local03 wcz
1f9cc     01 26 66 E6 |  if_be	neg	local01, #1
1f9d0     A7 26 62 FC | 	wrlong	local01, fp
1f9d4     10 01 90 FD | 	jmp	#LR__2483
1f9d8                 | LR__2479
1f9d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1f9d8     08 4E 05 F1 | 	add	fp, #8
1f9dc     A7 26 02 FB | 	rdlong	local01, fp
1f9e0     08 4E 85 F1 | 	sub	fp, #8
1f9e4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f9e8     14 4E 05 A1 |  if_e	add	fp, #20
1f9ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f9f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f9f8     30 00 90 5D |  if_ne	jmp	#LR__2480
1f9fc     00 26 06 F6 | 	mov	local01, #0
1fa00     A7 12 02 FB | 	rdlong	arg01, fp
1fa04     1C DF BE FD | 	call	#_convertstring
1fa08     FD 12 02 F6 | 	mov	arg01, result1
1fa0c     0C 4E 05 F1 | 	add	fp, #12
1fa10     A7 14 02 FB | 	rdlong	arg02, fp
1fa14     0C 4E 85 F1 | 	sub	fp, #12
1fa18     C4 7A B0 FD | 	call	#__system___string_cmp
1fa1c     01 FA 55 F2 | 	cmps	result1, #1 wc
1fa20     00 26 26 C6 |  if_b	not	local01, #0
1fa24     A7 26 62 FC | 	wrlong	local01, fp
1fa28     BC 00 90 FD | 	jmp	#LR__2483
1fa2c                 | LR__2480
1fa2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1fa2c     08 4E 05 F1 | 	add	fp, #8
1fa30     A7 26 02 FB | 	rdlong	local01, fp
1fa34     08 4E 85 F1 | 	sub	fp, #8
1fa38     1F 26 0E F2 | 	cmp	local01, #31 wz
1fa3c     14 4E 05 A1 |  if_e	add	fp, #20
1fa40     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa44     14 4E 85 A1 |  if_e	sub	fp, #20
1fa48     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fa4c     34 00 90 5D |  if_ne	jmp	#LR__2481
1fa50     00 26 06 F6 | 	mov	local01, #0
1fa54     A7 28 02 FB | 	rdlong	local02, fp
1fa58     0C 4E 05 F1 | 	add	fp, #12
1fa5c     A7 12 02 FB | 	rdlong	arg01, fp
1fa60     0C 4E 85 F1 | 	sub	fp, #12
1fa64     BC DE BE FD | 	call	#_convertstring
1fa68     FD 14 02 F6 | 	mov	arg02, result1
1fa6c     14 13 02 F6 | 	mov	arg01, local02
1fa70     6C 7A B0 FD | 	call	#__system___string_cmp
1fa74     01 FA 55 F2 | 	cmps	result1, #1 wc
1fa78     00 26 26 C6 |  if_b	not	local01, #0
1fa7c     A7 26 62 FC | 	wrlong	local01, fp
1fa80     64 00 90 FD | 	jmp	#LR__2483
1fa84                 | LR__2481
1fa84                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1fa84     08 4E 05 F1 | 	add	fp, #8
1fa88     A7 26 02 FB | 	rdlong	local01, fp
1fa8c     08 4E 85 F1 | 	sub	fp, #8
1fa90     2B 26 0E F2 | 	cmp	local01, #43 wz
1fa94     14 4E 05 A1 |  if_e	add	fp, #20
1fa98     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa9c     14 4E 85 A1 |  if_e	sub	fp, #20
1faa0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1faa4     3C 00 90 5D |  if_ne	jmp	#LR__2482
1faa8     00 26 06 F6 | 	mov	local01, #0
1faac     A7 12 02 FB | 	rdlong	arg01, fp
1fab0     70 DE BE FD | 	call	#_convertstring
1fab4     FD 28 02 F6 | 	mov	local02, result1
1fab8     0C 4E 05 F1 | 	add	fp, #12
1fabc     A7 12 02 FB | 	rdlong	arg01, fp
1fac0     0C 4E 85 F1 | 	sub	fp, #12
1fac4     5C DE BE FD | 	call	#_convertstring
1fac8     FD 14 02 F6 | 	mov	arg02, result1
1facc     14 13 02 F6 | 	mov	arg01, local02
1fad0     0C 7A B0 FD | 	call	#__system___string_cmp
1fad4     01 FA 55 F2 | 	cmps	result1, #1 wc
1fad8     00 26 26 C6 |  if_b	not	local01, #0
1fadc     A7 26 62 FC | 	wrlong	local01, fp
1fae0     04 00 90 FD | 	jmp	#LR__2483
1fae4                 | LR__2482
1fae4     A7 00 68 FC | 	wrlong	#0, fp
1fae8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1fae8                 | LR__2483
1fae8     08 4E 05 F1 | 	add	fp, #8
1faec     A7 38 68 FC | 	wrlong	#28, fp
1faf0     08 4E 85 F1 | 	sub	fp, #8
1faf4     A7 12 02 F6 | 	mov	arg01, fp
1faf8     48 DD BE FD | 	call	#_push
1fafc     A7 F0 03 F6 | 	mov	ptra, fp
1fb00     B2 00 A0 FD | 	call	#popregs_
1fb04                 | _do_le_ret
1fb04     2D 00 64 FD | 	ret
1fb08                 | 
1fb08                 | ' 
1fb08                 | ' '--------------------------------- less than (<)
1fb08                 | ' 
1fb08                 | ' sub do_lt
1fb08                 | _do_lt
1fb08     05 4A 05 F6 | 	mov	COUNT_, #5
1fb0c     A8 00 A0 FD | 	call	#pushregs_
1fb10     18 F0 07 F1 | 	add	ptra, #24
1fb14     94 DC BE FD | 	call	#_pop
1fb18     FD 26 02 F6 | 	mov	local01, result1
1fb1c     FE 28 02 F6 | 	mov	local02, result2
1fb20     FF 2A 02 F6 | 	mov	local03, result3
1fb24     0C 4E 05 F1 | 	add	fp, #12
1fb28     A7 26 62 FC | 	wrlong	local01, fp
1fb2c     04 4E 05 F1 | 	add	fp, #4
1fb30     A7 28 62 FC | 	wrlong	local02, fp
1fb34     04 4E 05 F1 | 	add	fp, #4
1fb38     A7 2A 62 FC | 	wrlong	local03, fp
1fb3c     14 4E 85 F1 | 	sub	fp, #20
1fb40     68 DC BE FD | 	call	#_pop
1fb44     FF 2A 02 F6 | 	mov	local03, result3
1fb48     A7 FA 61 FC | 	wrlong	result1, fp
1fb4c     04 4E 05 F1 | 	add	fp, #4
1fb50     A7 FC 61 FC | 	wrlong	result2, fp
1fb54     04 4E 05 F1 | 	add	fp, #4
1fb58     A7 2A 62 FC | 	wrlong	local03, fp
1fb5c                 | ' 
1fb5c                 | ' t2=pop()
1fb5c                 | ' t1=pop()
1fb5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1fb5c     08 4E 85 F1 | 	sub	fp, #8
1fb60     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fb64     14 4E 05 A1 |  if_e	add	fp, #20
1fb68     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb6c     14 4E 85 A1 |  if_e	sub	fp, #20
1fb70     16 2B 02 A6 |  if_e	mov	local03, local04
1fb74     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fb78     28 00 90 5D |  if_ne	jmp	#LR__2490
1fb7c     00 26 06 F6 | 	mov	local01, #0
1fb80     A7 12 02 FB | 	rdlong	arg01, fp
1fb84     0C 4E 05 F1 | 	add	fp, #12
1fb88     A7 14 02 FB | 	rdlong	arg02, fp
1fb8c     0C 4E 85 F1 | 	sub	fp, #12
1fb90     4C 79 B0 FD | 	call	#__system___string_cmp
1fb94     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb98     00 26 26 C6 |  if_b	not	local01, #0
1fb9c     A7 26 62 FC | 	wrlong	local01, fp
1fba0     10 04 90 FD | 	jmp	#LR__2503
1fba4                 | LR__2490
1fba4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1fba4     08 4E 05 F1 | 	add	fp, #8
1fba8     A7 26 02 FB | 	rdlong	local01, fp
1fbac     08 4E 85 F1 | 	sub	fp, #8
1fbb0     1E 26 0E F2 | 	cmp	local01, #30 wz
1fbb4     14 4E 05 A1 |  if_e	add	fp, #20
1fbb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fbbc     14 4E 85 A1 |  if_e	sub	fp, #20
1fbc0     16 2B 02 A6 |  if_e	mov	local03, local04
1fbc4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fbc8     2C 00 90 5D |  if_ne	jmp	#LR__2491
1fbcc     00 26 06 F6 | 	mov	local01, #0
1fbd0     A7 12 02 FB | 	rdlong	arg01, fp
1fbd4     0C 4E 05 F1 | 	add	fp, #12
1fbd8     A7 14 02 FB | 	rdlong	arg02, fp
1fbdc     0C 4E 85 F1 | 	sub	fp, #12
1fbe0     01 16 06 F6 | 	mov	arg03, #1
1fbe4     80 AB B0 FD | 	call	#__system___float_cmp
1fbe8     00 FA 55 F2 | 	cmps	result1, #0 wc
1fbec     00 26 26 C6 |  if_b	not	local01, #0
1fbf0     A7 26 62 FC | 	wrlong	local01, fp
1fbf4     BC 03 90 FD | 	jmp	#LR__2503
1fbf8                 | LR__2491
1fbf8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1fbf8     08 4E 05 F1 | 	add	fp, #8
1fbfc     A7 26 02 FB | 	rdlong	local01, fp
1fc00     08 4E 85 F1 | 	sub	fp, #8
1fc04     1E 26 0E F2 | 	cmp	local01, #30 wz
1fc08     14 4E 05 A1 |  if_e	add	fp, #20
1fc0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc10     14 4E 85 A1 |  if_e	sub	fp, #20
1fc14     16 2B 02 A6 |  if_e	mov	local03, local04
1fc18     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fc1c     48 00 90 5D |  if_ne	jmp	#LR__2492
1fc20     00 26 06 F6 | 	mov	local01, #0
1fc24     A7 28 02 FB | 	rdlong	local02, fp
1fc28     0C 4E 05 F1 | 	add	fp, #12
1fc2c     A7 12 02 FB | 	rdlong	arg01, fp
1fc30     0C 4E 85 F1 | 	sub	fp, #12
1fc34     09 13 52 F6 | 	abs	arg01, arg01 wc
1fc38     1F 2E C6 C9 |  if_b	decod	local05, #31
1fc3c     00 2E 06 36 |  if_ae	mov	local05, #0
1fc40     EC A2 B0 FD | 	call	#__system___float_fromuns
1fc44     17 FB 61 F5 | 	xor	result1, local05
1fc48     FD 14 02 F6 | 	mov	arg02, result1
1fc4c     14 13 02 F6 | 	mov	arg01, local02
1fc50     01 16 06 F6 | 	mov	arg03, #1
1fc54     10 AB B0 FD | 	call	#__system___float_cmp
1fc58     00 FA 55 F2 | 	cmps	result1, #0 wc
1fc5c     00 26 26 C6 |  if_b	not	local01, #0
1fc60     A7 26 62 FC | 	wrlong	local01, fp
1fc64     4C 03 90 FD | 	jmp	#LR__2503
1fc68                 | LR__2492
1fc68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1fc68     08 4E 05 F1 | 	add	fp, #8
1fc6c     A7 26 02 FB | 	rdlong	local01, fp
1fc70     08 4E 85 F1 | 	sub	fp, #8
1fc74     1E 26 0E F2 | 	cmp	local01, #30 wz
1fc78     14 4E 05 A1 |  if_e	add	fp, #20
1fc7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc80     14 4E 85 A1 |  if_e	sub	fp, #20
1fc84     16 2B 02 A6 |  if_e	mov	local03, local04
1fc88     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fc8c     38 00 90 5D |  if_ne	jmp	#LR__2493
1fc90     00 26 06 F6 | 	mov	local01, #0
1fc94     A7 28 02 FB | 	rdlong	local02, fp
1fc98     0C 4E 05 F1 | 	add	fp, #12
1fc9c     A7 12 02 FB | 	rdlong	arg01, fp
1fca0     0C 4E 85 F1 | 	sub	fp, #12
1fca4     88 A2 B0 FD | 	call	#__system___float_fromuns
1fca8     FD 14 02 F6 | 	mov	arg02, result1
1fcac     14 13 02 F6 | 	mov	arg01, local02
1fcb0     01 16 06 F6 | 	mov	arg03, #1
1fcb4     B0 AA B0 FD | 	call	#__system___float_cmp
1fcb8     00 FA 55 F2 | 	cmps	result1, #0 wc
1fcbc     00 26 26 C6 |  if_b	not	local01, #0
1fcc0     A7 26 62 FC | 	wrlong	local01, fp
1fcc4     EC 02 90 FD | 	jmp	#LR__2503
1fcc8                 | LR__2493
1fcc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1fcc8     08 4E 05 F1 | 	add	fp, #8
1fccc     A7 26 02 FB | 	rdlong	local01, fp
1fcd0     08 4E 85 F1 | 	sub	fp, #8
1fcd4     1C 26 0E F2 | 	cmp	local01, #28 wz
1fcd8     14 4E 05 A1 |  if_e	add	fp, #20
1fcdc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fce0     14 4E 85 A1 |  if_e	sub	fp, #20
1fce4     16 2B 02 A6 |  if_e	mov	local03, local04
1fce8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fcec     44 00 90 5D |  if_ne	jmp	#LR__2494
1fcf0     00 26 06 F6 | 	mov	local01, #0
1fcf4     A7 12 02 FB | 	rdlong	arg01, fp
1fcf8     09 13 52 F6 | 	abs	arg01, arg01 wc
1fcfc     1F 2E C6 C9 |  if_b	decod	local05, #31
1fd00     00 2E 06 36 |  if_ae	mov	local05, #0
1fd04     28 A2 B0 FD | 	call	#__system___float_fromuns
1fd08     17 FB 61 F5 | 	xor	result1, local05
1fd0c     FD 12 02 F6 | 	mov	arg01, result1
1fd10     0C 4E 05 F1 | 	add	fp, #12
1fd14     A7 14 02 FB | 	rdlong	arg02, fp
1fd18     0C 4E 85 F1 | 	sub	fp, #12
1fd1c     01 16 06 F6 | 	mov	arg03, #1
1fd20     44 AA B0 FD | 	call	#__system___float_cmp
1fd24     00 FA 55 F2 | 	cmps	result1, #0 wc
1fd28     00 26 26 C6 |  if_b	not	local01, #0
1fd2c     A7 26 62 FC | 	wrlong	local01, fp
1fd30     80 02 90 FD | 	jmp	#LR__2503
1fd34                 | LR__2494
1fd34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1fd34     08 4E 05 F1 | 	add	fp, #8
1fd38     A7 26 02 FB | 	rdlong	local01, fp
1fd3c     08 4E 85 F1 | 	sub	fp, #8
1fd40     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd44     14 4E 05 A1 |  if_e	add	fp, #20
1fd48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd4c     14 4E 85 A1 |  if_e	sub	fp, #20
1fd50     16 2B 02 A6 |  if_e	mov	local03, local04
1fd54     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fd58     20 00 90 5D |  if_ne	jmp	#LR__2495
1fd5c     A7 28 02 FB | 	rdlong	local02, fp
1fd60     0C 4E 05 F1 | 	add	fp, #12
1fd64     A7 2A 02 FB | 	rdlong	local03, fp
1fd68     0C 4E 85 F1 | 	sub	fp, #12
1fd6c     15 29 52 F2 | 	cmps	local02, local03 wc
1fd70     13 27 A2 F1 | 	subx	local01, local01
1fd74     A7 26 62 FC | 	wrlong	local01, fp
1fd78     38 02 90 FD | 	jmp	#LR__2503
1fd7c                 | LR__2495
1fd7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1fd7c     08 4E 05 F1 | 	add	fp, #8
1fd80     A7 26 02 FB | 	rdlong	local01, fp
1fd84     08 4E 85 F1 | 	sub	fp, #8
1fd88     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd8c     14 4E 05 A1 |  if_e	add	fp, #20
1fd90     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd94     14 4E 85 A1 |  if_e	sub	fp, #20
1fd98     16 2B 02 A6 |  if_e	mov	local03, local04
1fd9c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fda0     20 00 90 5D |  if_ne	jmp	#LR__2496
1fda4     A7 28 02 FB | 	rdlong	local02, fp
1fda8     0C 4E 05 F1 | 	add	fp, #12
1fdac     A7 2A 02 FB | 	rdlong	local03, fp
1fdb0     0C 4E 85 F1 | 	sub	fp, #12
1fdb4     15 29 52 F2 | 	cmps	local02, local03 wc
1fdb8     13 27 A2 F1 | 	subx	local01, local01
1fdbc     A7 26 62 FC | 	wrlong	local01, fp
1fdc0     F0 01 90 FD | 	jmp	#LR__2503
1fdc4                 | LR__2496
1fdc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1fdc4     08 4E 05 F1 | 	add	fp, #8
1fdc8     A7 26 02 FB | 	rdlong	local01, fp
1fdcc     08 4E 85 F1 | 	sub	fp, #8
1fdd0     1D 26 0E F2 | 	cmp	local01, #29 wz
1fdd4     14 4E 05 A1 |  if_e	add	fp, #20
1fdd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fddc     14 4E 85 A1 |  if_e	sub	fp, #20
1fde0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1fde4     34 00 90 5D |  if_ne	jmp	#LR__2497
1fde8     00 26 06 F6 | 	mov	local01, #0
1fdec     A7 12 02 FB | 	rdlong	arg01, fp
1fdf0     3C A1 B0 FD | 	call	#__system___float_fromuns
1fdf4     FD 12 02 F6 | 	mov	arg01, result1
1fdf8     0C 4E 05 F1 | 	add	fp, #12
1fdfc     A7 14 02 FB | 	rdlong	arg02, fp
1fe00     0C 4E 85 F1 | 	sub	fp, #12
1fe04     01 16 06 F6 | 	mov	arg03, #1
1fe08     5C A9 B0 FD | 	call	#__system___float_cmp
1fe0c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fe10     00 26 26 C6 |  if_b	not	local01, #0
1fe14     A7 26 62 FC | 	wrlong	local01, fp
1fe18     98 01 90 FD | 	jmp	#LR__2503
1fe1c                 | LR__2497
1fe1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1fe1c     08 4E 05 F1 | 	add	fp, #8
1fe20     A7 26 02 FB | 	rdlong	local01, fp
1fe24     08 4E 85 F1 | 	sub	fp, #8
1fe28     1D 26 0E F2 | 	cmp	local01, #29 wz
1fe2c     14 4E 05 A1 |  if_e	add	fp, #20
1fe30     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe34     14 4E 85 A1 |  if_e	sub	fp, #20
1fe38     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fe3c     20 00 90 5D |  if_ne	jmp	#LR__2498
1fe40     A7 28 02 FB | 	rdlong	local02, fp
1fe44     0C 4E 05 F1 | 	add	fp, #12
1fe48     A7 2A 02 FB | 	rdlong	local03, fp
1fe4c     0C 4E 85 F1 | 	sub	fp, #12
1fe50     15 29 52 F2 | 	cmps	local02, local03 wc
1fe54     13 27 A2 F1 | 	subx	local01, local01
1fe58     A7 26 62 FC | 	wrlong	local01, fp
1fe5c     54 01 90 FD | 	jmp	#LR__2503
1fe60                 | LR__2498
1fe60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1fe60     08 4E 05 F1 | 	add	fp, #8
1fe64     A7 26 02 FB | 	rdlong	local01, fp
1fe68     08 4E 85 F1 | 	sub	fp, #8
1fe6c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fe70     14 4E 05 A1 |  if_e	add	fp, #20
1fe74     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe78     14 4E 85 A1 |  if_e	sub	fp, #20
1fe7c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fe80     20 00 90 5D |  if_ne	jmp	#LR__2499
1fe84     A7 28 02 FB | 	rdlong	local02, fp
1fe88     0C 4E 05 F1 | 	add	fp, #12
1fe8c     A7 2A 02 FB | 	rdlong	local03, fp
1fe90     0C 4E 85 F1 | 	sub	fp, #12
1fe94     15 29 12 F2 | 	cmp	local02, local03 wc
1fe98     13 27 A2 F1 | 	subx	local01, local01
1fe9c     A7 26 62 FC | 	wrlong	local01, fp
1fea0     10 01 90 FD | 	jmp	#LR__2503
1fea4                 | LR__2499
1fea4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1fea4     08 4E 05 F1 | 	add	fp, #8
1fea8     A7 26 02 FB | 	rdlong	local01, fp
1feac     08 4E 85 F1 | 	sub	fp, #8
1feb0     2B 26 0E F2 | 	cmp	local01, #43 wz
1feb4     14 4E 05 A1 |  if_e	add	fp, #20
1feb8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1febc     14 4E 85 A1 |  if_e	sub	fp, #20
1fec0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fec4     30 00 90 5D |  if_ne	jmp	#LR__2500
1fec8     00 26 06 F6 | 	mov	local01, #0
1fecc     A7 12 02 FB | 	rdlong	arg01, fp
1fed0     50 DA BE FD | 	call	#_convertstring
1fed4     FD 12 02 F6 | 	mov	arg01, result1
1fed8     0C 4E 05 F1 | 	add	fp, #12
1fedc     A7 14 02 FB | 	rdlong	arg02, fp
1fee0     0C 4E 85 F1 | 	sub	fp, #12
1fee4     F8 75 B0 FD | 	call	#__system___string_cmp
1fee8     00 FA 55 F2 | 	cmps	result1, #0 wc
1feec     00 26 26 C6 |  if_b	not	local01, #0
1fef0     A7 26 62 FC | 	wrlong	local01, fp
1fef4     BC 00 90 FD | 	jmp	#LR__2503
1fef8                 | LR__2500
1fef8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1fef8     08 4E 05 F1 | 	add	fp, #8
1fefc     A7 26 02 FB | 	rdlong	local01, fp
1ff00     08 4E 85 F1 | 	sub	fp, #8
1ff04     1F 26 0E F2 | 	cmp	local01, #31 wz
1ff08     14 4E 05 A1 |  if_e	add	fp, #20
1ff0c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ff10     14 4E 85 A1 |  if_e	sub	fp, #20
1ff14     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ff18     34 00 90 5D |  if_ne	jmp	#LR__2501
1ff1c     00 26 06 F6 | 	mov	local01, #0
1ff20     A7 28 02 FB | 	rdlong	local02, fp
1ff24     0C 4E 05 F1 | 	add	fp, #12
1ff28     A7 12 02 FB | 	rdlong	arg01, fp
1ff2c     0C 4E 85 F1 | 	sub	fp, #12
1ff30     F0 D9 BE FD | 	call	#_convertstring
1ff34     FD 14 02 F6 | 	mov	arg02, result1
1ff38     14 13 02 F6 | 	mov	arg01, local02
1ff3c     A0 75 B0 FD | 	call	#__system___string_cmp
1ff40     00 FA 55 F2 | 	cmps	result1, #0 wc
1ff44     00 26 26 C6 |  if_b	not	local01, #0
1ff48     A7 26 62 FC | 	wrlong	local01, fp
1ff4c     64 00 90 FD | 	jmp	#LR__2503
1ff50                 | LR__2501
1ff50                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1ff50     08 4E 05 F1 | 	add	fp, #8
1ff54     A7 26 02 FB | 	rdlong	local01, fp
1ff58     08 4E 85 F1 | 	sub	fp, #8
1ff5c     2B 26 0E F2 | 	cmp	local01, #43 wz
1ff60     14 4E 05 A1 |  if_e	add	fp, #20
1ff64     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ff68     14 4E 85 A1 |  if_e	sub	fp, #20
1ff6c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ff70     3C 00 90 5D |  if_ne	jmp	#LR__2502
1ff74     00 26 06 F6 | 	mov	local01, #0
1ff78     A7 12 02 FB | 	rdlong	arg01, fp
1ff7c     A4 D9 BE FD | 	call	#_convertstring
1ff80     FD 28 02 F6 | 	mov	local02, result1
1ff84     0C 4E 05 F1 | 	add	fp, #12
1ff88     A7 12 02 FB | 	rdlong	arg01, fp
1ff8c     0C 4E 85 F1 | 	sub	fp, #12
1ff90     90 D9 BE FD | 	call	#_convertstring
1ff94     FD 14 02 F6 | 	mov	arg02, result1
1ff98     14 13 02 F6 | 	mov	arg01, local02
1ff9c     40 75 B0 FD | 	call	#__system___string_cmp
1ffa0     00 FA 55 F2 | 	cmps	result1, #0 wc
1ffa4     00 26 26 C6 |  if_b	not	local01, #0
1ffa8     A7 26 62 FC | 	wrlong	local01, fp
1ffac     04 00 90 FD | 	jmp	#LR__2503
1ffb0                 | LR__2502
1ffb0     A7 00 68 FC | 	wrlong	#0, fp
1ffb4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ffb4                 | LR__2503
1ffb4     08 4E 05 F1 | 	add	fp, #8
1ffb8     A7 38 68 FC | 	wrlong	#28, fp
1ffbc     08 4E 85 F1 | 	sub	fp, #8
1ffc0     A7 12 02 F6 | 	mov	arg01, fp
1ffc4     7C D8 BE FD | 	call	#_push
1ffc8     A7 F0 03 F6 | 	mov	ptra, fp
1ffcc     B2 00 A0 FD | 	call	#popregs_
1ffd0                 | _do_lt_ret
1ffd0     2D 00 64 FD | 	ret
1ffd4                 | 
1ffd4                 | ' 
1ffd4                 | ' '--------------------------------- minus (-)
1ffd4                 | ' 
1ffd4                 | ' sub do_minus
1ffd4                 | _do_minus
1ffd4     05 4A 05 F6 | 	mov	COUNT_, #5
1ffd8     A8 00 A0 FD | 	call	#pushregs_
1ffdc     18 F0 07 F1 | 	add	ptra, #24
1ffe0     C8 D7 BE FD | 	call	#_pop
1ffe4     FD 26 02 F6 | 	mov	local01, result1
1ffe8     FE 28 02 F6 | 	mov	local02, result2
1ffec     FF 2A 02 F6 | 	mov	local03, result3
1fff0     0C 4E 05 F1 | 	add	fp, #12
1fff4     A7 26 62 FC | 	wrlong	local01, fp
1fff8     04 4E 05 F1 | 	add	fp, #4
1fffc     A7 28 62 FC | 	wrlong	local02, fp
20000     04 4E 05 F1 | 	add	fp, #4
20004     A7 2A 62 FC | 	wrlong	local03, fp
20008     14 4E 85 F1 | 	sub	fp, #20
2000c     9C D7 BE FD | 	call	#_pop
20010     FF 2A 02 F6 | 	mov	local03, result3
20014     A7 FA 61 FC | 	wrlong	result1, fp
20018     04 4E 05 F1 | 	add	fp, #4
2001c     A7 FC 61 FC | 	wrlong	result2, fp
20020     04 4E 05 F1 | 	add	fp, #4
20024     A7 2A 62 FC | 	wrlong	local03, fp
20028                 | ' 
20028                 | ' t2=pop()
20028                 | ' t1=pop()
20028                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
20028     08 4E 85 F1 | 	sub	fp, #8
2002c     1D 2A 0E F2 | 	cmp	local03, #29 wz
20030     14 4E 05 A1 |  if_e	add	fp, #20
20034     A7 2C 02 AB |  if_e	rdlong	local04, fp
20038     14 4E 85 A1 |  if_e	sub	fp, #20
2003c     16 2B 02 A6 |  if_e	mov	local03, local04
20040     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20044     5C 00 90 5D |  if_ne	jmp	#LR__2511
20048                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
20048     0C 4E 05 F1 | 	add	fp, #12
2004c     A7 26 02 FB | 	rdlong	local01, fp
20050     0C 4E 85 F1 | 	sub	fp, #12
20054     A7 2A 02 FB | 	rdlong	local03, fp
20058     15 27 12 F2 | 	cmp	local01, local03 wc
2005c     1C 00 90 3D |  if_ae	jmp	#LR__2510
20060     A7 26 02 FB | 	rdlong	local01, fp
20064     0C 4E 05 F1 | 	add	fp, #12
20068     A7 28 02 FB | 	rdlong	local02, fp
2006c     0C 4E 85 F1 | 	sub	fp, #12
20070     14 27 82 F1 | 	sub	local01, local02
20074     A7 26 62 FC | 	wrlong	local01, fp
20078     F4 02 90 FD | 	jmp	#LR__2520
2007c                 | LR__2510
2007c     A7 26 02 FB | 	rdlong	local01, fp
20080     0C 4E 05 F1 | 	add	fp, #12
20084     A7 28 02 FB | 	rdlong	local02, fp
20088     0C 4E 85 F1 | 	sub	fp, #12
2008c     14 27 82 F1 | 	sub	local01, local02
20090     A7 26 62 FC | 	wrlong	local01, fp
20094     08 4E 05 F1 | 	add	fp, #8
20098     A7 38 68 FC | 	wrlong	#28, fp
2009c     08 4E 85 F1 | 	sub	fp, #8
200a0     CC 02 90 FD | 	jmp	#LR__2520
200a4                 | LR__2511
200a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
200a4     08 4E 05 F1 | 	add	fp, #8
200a8     A7 26 02 FB | 	rdlong	local01, fp
200ac     08 4E 85 F1 | 	sub	fp, #8
200b0     1D 26 0E F2 | 	cmp	local01, #29 wz
200b4     14 4E 05 A1 |  if_e	add	fp, #20
200b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
200bc     14 4E 85 A1 |  if_e	sub	fp, #20
200c0     16 2B 02 A6 |  if_e	mov	local03, local04
200c4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
200c8     28 00 90 5D |  if_ne	jmp	#LR__2512
200cc     A7 26 02 FB | 	rdlong	local01, fp
200d0     0C 4E 05 F1 | 	add	fp, #12
200d4     A7 28 02 FB | 	rdlong	local02, fp
200d8     0C 4E 85 F1 | 	sub	fp, #12
200dc     14 27 82 F1 | 	sub	local01, local02
200e0     A7 26 62 FC | 	wrlong	local01, fp
200e4     08 4E 05 F1 | 	add	fp, #8
200e8     A7 38 68 FC | 	wrlong	#28, fp
200ec     08 4E 85 F1 | 	sub	fp, #8
200f0     7C 02 90 FD | 	jmp	#LR__2520
200f4                 | LR__2512
200f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
200f4     08 4E 05 F1 | 	add	fp, #8
200f8     A7 26 02 FB | 	rdlong	local01, fp
200fc     08 4E 85 F1 | 	sub	fp, #8
20100     1D 26 0E F2 | 	cmp	local01, #29 wz
20104     14 4E 05 A1 |  if_e	add	fp, #20
20108     A7 2C 02 AB |  if_e	rdlong	local04, fp
2010c     14 4E 85 A1 |  if_e	sub	fp, #20
20110     16 2B 02 A6 |  if_e	mov	local03, local04
20114     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20118     34 00 90 5D |  if_ne	jmp	#LR__2513
2011c     A7 12 02 FB | 	rdlong	arg01, fp
20120     0C 9E B0 FD | 	call	#__system___float_fromuns
20124     FD 12 02 F6 | 	mov	arg01, result1
20128     0C 4E 05 F1 | 	add	fp, #12
2012c     A7 14 02 FB | 	rdlong	arg02, fp
20130     0C 4E 85 F1 | 	sub	fp, #12
20134     1F 14 E6 F4 | 	bitnot	arg02, #31
20138     28 9E B0 FD | 	call	#__system___float_add
2013c     A7 FA 61 FC | 	wrlong	result1, fp
20140     08 4E 05 F1 | 	add	fp, #8
20144     A7 3C 68 FC | 	wrlong	#30, fp
20148     08 4E 85 F1 | 	sub	fp, #8
2014c     20 02 90 FD | 	jmp	#LR__2520
20150                 | LR__2513
20150                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
20150     08 4E 05 F1 | 	add	fp, #8
20154     A7 26 02 FB | 	rdlong	local01, fp
20158     08 4E 85 F1 | 	sub	fp, #8
2015c     1C 26 0E F2 | 	cmp	local01, #28 wz
20160     14 4E 05 A1 |  if_e	add	fp, #20
20164     A7 2C 02 AB |  if_e	rdlong	local04, fp
20168     14 4E 85 A1 |  if_e	sub	fp, #20
2016c     16 2B 02 A6 |  if_e	mov	local03, local04
20170     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20174     1C 00 90 5D |  if_ne	jmp	#LR__2514
20178     A7 26 02 FB | 	rdlong	local01, fp
2017c     0C 4E 05 F1 | 	add	fp, #12
20180     A7 28 02 FB | 	rdlong	local02, fp
20184     0C 4E 85 F1 | 	sub	fp, #12
20188     14 27 82 F1 | 	sub	local01, local02
2018c     A7 26 62 FC | 	wrlong	local01, fp
20190     DC 01 90 FD | 	jmp	#LR__2520
20194                 | LR__2514
20194                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
20194     08 4E 05 F1 | 	add	fp, #8
20198     A7 26 02 FB | 	rdlong	local01, fp
2019c     08 4E 85 F1 | 	sub	fp, #8
201a0     1C 26 0E F2 | 	cmp	local01, #28 wz
201a4     14 4E 05 A1 |  if_e	add	fp, #20
201a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
201ac     14 4E 85 A1 |  if_e	sub	fp, #20
201b0     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
201b4     1C 00 90 5D |  if_ne	jmp	#LR__2515
201b8     A7 26 02 FB | 	rdlong	local01, fp
201bc     0C 4E 05 F1 | 	add	fp, #12
201c0     A7 28 02 FB | 	rdlong	local02, fp
201c4     0C 4E 85 F1 | 	sub	fp, #12
201c8     14 27 82 F1 | 	sub	local01, local02
201cc     A7 26 62 FC | 	wrlong	local01, fp
201d0     9C 01 90 FD | 	jmp	#LR__2520
201d4                 | LR__2515
201d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
201d4     08 4E 05 F1 | 	add	fp, #8
201d8     A7 26 02 FB | 	rdlong	local01, fp
201dc     08 4E 85 F1 | 	sub	fp, #8
201e0     1C 26 0E F2 | 	cmp	local01, #28 wz
201e4     14 4E 05 A1 |  if_e	add	fp, #20
201e8     A7 2A 02 AB |  if_e	rdlong	local03, fp
201ec     14 4E 85 A1 |  if_e	sub	fp, #20
201f0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
201f4     44 00 90 5D |  if_ne	jmp	#LR__2516
201f8     A7 12 02 FB | 	rdlong	arg01, fp
201fc     09 13 52 F6 | 	abs	arg01, arg01 wc
20200     1F 2E C6 C9 |  if_b	decod	local05, #31
20204     00 2E 06 36 |  if_ae	mov	local05, #0
20208     24 9D B0 FD | 	call	#__system___float_fromuns
2020c     17 FB 61 F5 | 	xor	result1, local05
20210     FD 12 02 F6 | 	mov	arg01, result1
20214     0C 4E 05 F1 | 	add	fp, #12
20218     A7 14 02 FB | 	rdlong	arg02, fp
2021c     0C 4E 85 F1 | 	sub	fp, #12
20220     1F 14 E6 F4 | 	bitnot	arg02, #31
20224     3C 9D B0 FD | 	call	#__system___float_add
20228     A7 FA 61 FC | 	wrlong	result1, fp
2022c     08 4E 05 F1 | 	add	fp, #8
20230     A7 3C 68 FC | 	wrlong	#30, fp
20234     08 4E 85 F1 | 	sub	fp, #8
20238     34 01 90 FD | 	jmp	#LR__2520
2023c                 | LR__2516
2023c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
2023c     08 4E 05 F1 | 	add	fp, #8
20240     A7 26 02 FB | 	rdlong	local01, fp
20244     08 4E 85 F1 | 	sub	fp, #8
20248     1E 26 0E F2 | 	cmp	local01, #30 wz
2024c     14 4E 05 A1 |  if_e	add	fp, #20
20250     A7 2A 02 AB |  if_e	rdlong	local03, fp
20254     14 4E 85 A1 |  if_e	sub	fp, #20
20258     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2025c     2C 00 90 5D |  if_ne	jmp	#LR__2517
20260     A7 26 02 FB | 	rdlong	local01, fp
20264     0C 4E 05 F1 | 	add	fp, #12
20268     A7 12 02 FB | 	rdlong	arg01, fp
2026c     0C 4E 85 F1 | 	sub	fp, #12
20270     BC 9C B0 FD | 	call	#__system___float_fromuns
20274     FD 14 02 F6 | 	mov	arg02, result1
20278     13 13 02 F6 | 	mov	arg01, local01
2027c     1F 14 E6 F4 | 	bitnot	arg02, #31
20280     E0 9C B0 FD | 	call	#__system___float_add
20284     A7 FA 61 FC | 	wrlong	result1, fp
20288     E4 00 90 FD | 	jmp	#LR__2520
2028c                 | LR__2517
2028c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
2028c     08 4E 05 F1 | 	add	fp, #8
20290     A7 26 02 FB | 	rdlong	local01, fp
20294     08 4E 85 F1 | 	sub	fp, #8
20298     1E 26 0E F2 | 	cmp	local01, #30 wz
2029c     14 4E 05 A1 |  if_e	add	fp, #20
202a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
202a4     14 4E 85 A1 |  if_e	sub	fp, #20
202a8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
202ac     3C 00 90 5D |  if_ne	jmp	#LR__2518
202b0     A7 26 02 FB | 	rdlong	local01, fp
202b4     0C 4E 05 F1 | 	add	fp, #12
202b8     A7 12 02 FB | 	rdlong	arg01, fp
202bc     0C 4E 85 F1 | 	sub	fp, #12
202c0     09 13 52 F6 | 	abs	arg01, arg01 wc
202c4     1F 2E C6 C9 |  if_b	decod	local05, #31
202c8     00 2E 06 36 |  if_ae	mov	local05, #0
202cc     60 9C B0 FD | 	call	#__system___float_fromuns
202d0     17 FB 61 F5 | 	xor	result1, local05
202d4     FD 14 02 F6 | 	mov	arg02, result1
202d8     13 13 02 F6 | 	mov	arg01, local01
202dc     1F 14 E6 F4 | 	bitnot	arg02, #31
202e0     80 9C B0 FD | 	call	#__system___float_add
202e4     A7 FA 61 FC | 	wrlong	result1, fp
202e8     84 00 90 FD | 	jmp	#LR__2520
202ec                 | LR__2518
202ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
202ec     08 4E 05 F1 | 	add	fp, #8
202f0     A7 26 02 FB | 	rdlong	local01, fp
202f4     08 4E 85 F1 | 	sub	fp, #8
202f8     1E 26 0E F2 | 	cmp	local01, #30 wz
202fc     14 4E 05 A1 |  if_e	add	fp, #20
20300     A7 2A 02 AB |  if_e	rdlong	local03, fp
20304     14 4E 85 A1 |  if_e	sub	fp, #20
20308     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2030c     20 00 90 5D |  if_ne	jmp	#LR__2519
20310     A7 12 02 FB | 	rdlong	arg01, fp
20314     0C 4E 05 F1 | 	add	fp, #12
20318     A7 14 02 FB | 	rdlong	arg02, fp
2031c     0C 4E 85 F1 | 	sub	fp, #12
20320     1F 14 E6 F4 | 	bitnot	arg02, #31
20324     3C 9C B0 FD | 	call	#__system___float_add
20328     A7 FA 61 FC | 	wrlong	result1, fp
2032c     40 00 90 FD | 	jmp	#LR__2520
20330                 | LR__2519
20330                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
20330     08 4E 05 F1 | 	add	fp, #8
20334     A7 26 02 FB | 	rdlong	local01, fp
20338     08 4E 85 F1 | 	sub	fp, #8
2033c     1F 26 0E F2 | 	cmp	local01, #31 wz
20340     14 4E 05 51 |  if_ne	add	fp, #20
20344     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20348     14 4E 85 51 |  if_ne	sub	fp, #20
2034c     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
20350     A7 06 68 AC |  if_e	wrlong	#3, fp
20354     08 4E 05 A1 |  if_e	add	fp, #8
20358     A7 FE 69 AC |  if_e	wrlong	#255, fp
2035c     08 4E 85 A1 |  if_e	sub	fp, #8
20360     A7 0A 68 5C |  if_ne	wrlong	#5, fp
20364     08 4E 05 51 |  if_ne	add	fp, #8
20368     A7 FE 69 5C |  if_ne	wrlong	#255, fp
2036c     08 4E 85 51 |  if_ne	sub	fp, #8
20370                 | LR__2520
20370     A7 12 02 F6 | 	mov	arg01, fp
20374     CC D4 BE FD | 	call	#_push
20378     A7 F0 03 F6 | 	mov	ptra, fp
2037c     B2 00 A0 FD | 	call	#popregs_
20380                 | _do_minus_ret
20380     2D 00 64 FD | 	ret
20384                 | 
20384                 | ' 
20384                 | ' '--------------------------------- negative (-), one argument negative
20384                 | ' 
20384                 | ' sub do_negative
20384                 | _do_negative
20384     02 4A 05 F6 | 	mov	COUNT_, #2
20388     A8 00 A0 FD | 	call	#pushregs_
2038c     0C F0 07 F1 | 	add	ptra, #12
20390     18 D4 BE FD | 	call	#_pop
20394     FF 26 02 F6 | 	mov	local01, result3
20398     A7 FA 61 FC | 	wrlong	result1, fp
2039c     04 4E 05 F1 | 	add	fp, #4
203a0     A7 FC 61 FC | 	wrlong	result2, fp
203a4     04 4E 05 F1 | 	add	fp, #4
203a8     A7 26 62 FC | 	wrlong	local01, fp
203ac                 | ' 
203ac                 | ' t1=pop()
203ac                 | ' if t1.result_type=result_int then 
203ac     08 4E 85 F1 | 	sub	fp, #8
203b0     1C 26 0E F2 | 	cmp	local01, #28 wz
203b4     A7 28 02 AB |  if_e	rdlong	local02, fp
203b8     14 27 62 A6 |  if_e	neg	local01, local02
203bc     A7 26 62 AC |  if_e	wrlong	local01, fp
203c0     5C 00 90 AD |  if_e	jmp	#LR__2532
203c4     08 4E 05 F1 | 	add	fp, #8
203c8     A7 26 02 FB | 	rdlong	local01, fp
203cc     08 4E 85 F1 | 	sub	fp, #8
203d0     1D 26 0E F2 | 	cmp	local01, #29 wz
203d4     1C 00 90 5D |  if_ne	jmp	#LR__2530
203d8     A7 28 02 FB | 	rdlong	local02, fp
203dc     14 27 62 F6 | 	neg	local01, local02
203e0     A7 26 62 FC | 	wrlong	local01, fp
203e4     08 4E 05 F1 | 	add	fp, #8
203e8     A7 38 68 FC | 	wrlong	#28, fp
203ec     08 4E 85 F1 | 	sub	fp, #8
203f0     2C 00 90 FD | 	jmp	#LR__2531
203f4                 | LR__2530
203f4     08 4E 05 F1 | 	add	fp, #8
203f8     A7 26 02 FB | 	rdlong	local01, fp
203fc     08 4E 85 F1 | 	sub	fp, #8
20400     1E 26 0E F2 | 	cmp	local01, #30 wz
20404     A7 FA 01 AB |  if_e	rdlong	result1, fp
20408     1F FA E5 A4 |  if_e	bitnot	result1, #31
2040c     A7 FA 61 AC |  if_e	wrlong	result1, fp
20410     08 4E 05 51 |  if_ne	add	fp, #8
20414     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20418     08 4E 85 51 |  if_ne	sub	fp, #8
2041c     A7 50 68 5C |  if_ne	wrlong	#40, fp
20420                 | LR__2531
20420                 | LR__2532
20420     A7 12 02 F6 | 	mov	arg01, fp
20424     1C D4 BE FD | 	call	#_push
20428     A7 F0 03 F6 | 	mov	ptra, fp
2042c     B2 00 A0 FD | 	call	#popregs_
20430                 | _do_negative_ret
20430     2D 00 64 FD | 	ret
20434                 | 
20434                 | ' 
20434                 | ' '--------------------------------- MOD (modulo)
20434                 | ' 
20434                 | ' sub do_mod 
20434                 | _do_mod
20434     01 4A 05 F6 | 	mov	COUNT_, #1
20438     A8 00 A0 FD | 	call	#pushregs_
2043c     18 F0 07 F1 | 	add	ptra, #24
20440     68 D3 BE FD | 	call	#_pop
20444     FD 92 02 F6 | 	mov	muldivb_, result1
20448     FE 90 02 F6 | 	mov	muldiva_, result2
2044c     FF 26 02 F6 | 	mov	local01, result3
20450     0C 4E 05 F1 | 	add	fp, #12
20454     A7 92 62 FC | 	wrlong	muldivb_, fp
20458     04 4E 05 F1 | 	add	fp, #4
2045c     A7 90 62 FC | 	wrlong	muldiva_, fp
20460     04 4E 05 F1 | 	add	fp, #4
20464     A7 26 62 FC | 	wrlong	local01, fp
20468     14 4E 85 F1 | 	sub	fp, #20
2046c     3C D3 BE FD | 	call	#_pop
20470     A7 FA 61 FC | 	wrlong	result1, fp
20474     04 4E 05 F1 | 	add	fp, #4
20478     A7 FC 61 FC | 	wrlong	result2, fp
2047c     04 4E 05 F1 | 	add	fp, #4
20480     A7 FE 61 FC | 	wrlong	result3, fp
20484                 | ' 
20484                 | ' t2=pop()
20484                 | ' t1=pop()
20484                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
20484     08 4E 85 F1 | 	sub	fp, #8
20488     1F FE 0D F2 | 	cmp	result3, #31 wz
2048c     14 4E 05 51 |  if_ne	add	fp, #20
20490     A7 12 02 5B |  if_ne	rdlong	arg01, fp
20494     14 4E 85 51 |  if_ne	sub	fp, #20
20498     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
2049c     A7 14 68 AC |  if_e	wrlong	#10, fp
204a0     08 4E 05 A1 |  if_e	add	fp, #8
204a4     A7 FE 69 AC |  if_e	wrlong	#255, fp
204a8     08 4E 85 A1 |  if_e	sub	fp, #8
204ac     90 01 90 AD |  if_e	jmp	#LR__2546
204b0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
204b0     08 4E 05 F1 | 	add	fp, #8
204b4     A7 92 02 FB | 	rdlong	muldivb_, fp
204b8     08 4E 85 F1 | 	sub	fp, #8
204bc     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
204c0     1C 00 90 5D |  if_ne	jmp	#LR__2540
204c4     08 4E 05 F1 | 	add	fp, #8
204c8     A7 38 68 FC | 	wrlong	#28, fp
204cc     08 4E 85 F1 | 	sub	fp, #8
204d0     A7 12 02 FB | 	rdlong	arg01, fp
204d4     00 14 06 F6 | 	mov	arg02, #0
204d8     20 A3 B0 FD | 	call	#__system___float_tointeger
204dc     A7 FA 61 FC | 	wrlong	result1, fp
204e0                 | LR__2540
204e0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
204e0     14 4E 05 F1 | 	add	fp, #20
204e4     A7 92 02 FB | 	rdlong	muldivb_, fp
204e8     14 4E 85 F1 | 	sub	fp, #20
204ec     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
204f0     28 00 90 5D |  if_ne	jmp	#LR__2541
204f4     14 4E 05 F1 | 	add	fp, #20
204f8     A7 38 68 FC | 	wrlong	#28, fp
204fc     08 4E 85 F1 | 	sub	fp, #8
20500     A7 12 02 FB | 	rdlong	arg01, fp
20504     0C 4E 85 F1 | 	sub	fp, #12
20508     00 14 06 F6 | 	mov	arg02, #0
2050c     EC A2 B0 FD | 	call	#__system___float_tointeger
20510     0C 4E 05 F1 | 	add	fp, #12
20514     A7 FA 61 FC | 	wrlong	result1, fp
20518     0C 4E 85 F1 | 	sub	fp, #12
2051c                 | LR__2541
2051c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
2051c     08 4E 05 F1 | 	add	fp, #8
20520     A7 92 02 FB | 	rdlong	muldivb_, fp
20524     08 4E 85 F1 | 	sub	fp, #8
20528     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
2052c     14 4E 05 A1 |  if_e	add	fp, #20
20530     A7 26 02 AB |  if_e	rdlong	local01, fp
20534     14 4E 85 A1 |  if_e	sub	fp, #20
20538     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
2053c     20 00 90 5D |  if_ne	jmp	#LR__2542
20540     0C 4E 05 F1 | 	add	fp, #12
20544     A7 26 02 FB | 	rdlong	local01, fp
20548     0C 4E 85 F1 | 	sub	fp, #12
2054c     A7 92 02 FB | 	rdlong	muldivb_, fp
20550     13 93 12 FD | 	qdiv	muldivb_, local01
20554     19 26 62 FD | 	getqy	local01
20558     A7 26 62 FC | 	wrlong	local01, fp
2055c     E0 00 90 FD | 	jmp	#LR__2546
20560                 | LR__2542
20560                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
20560     08 4E 05 F1 | 	add	fp, #8
20564     A7 92 02 FB | 	rdlong	muldivb_, fp
20568     08 4E 85 F1 | 	sub	fp, #8
2056c     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
20570     14 4E 05 A1 |  if_e	add	fp, #20
20574     A7 26 02 AB |  if_e	rdlong	local01, fp
20578     14 4E 85 A1 |  if_e	sub	fp, #20
2057c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
20580     2C 00 90 5D |  if_ne	jmp	#LR__2543
20584     0C 4E 05 F1 | 	add	fp, #12
20588     A7 26 02 FB | 	rdlong	local01, fp
2058c     0C 4E 85 F1 | 	sub	fp, #12
20590     A7 92 02 FB | 	rdlong	muldivb_, fp
20594     13 93 12 FD | 	qdiv	muldivb_, local01
20598     19 26 62 FD | 	getqy	local01
2059c     A7 26 62 FC | 	wrlong	local01, fp
205a0     08 4E 05 F1 | 	add	fp, #8
205a4     A7 38 68 FC | 	wrlong	#28, fp
205a8     08 4E 85 F1 | 	sub	fp, #8
205ac     90 00 90 FD | 	jmp	#LR__2546
205b0                 | LR__2543
205b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
205b0     08 4E 05 F1 | 	add	fp, #8
205b4     A7 92 02 FB | 	rdlong	muldivb_, fp
205b8     08 4E 85 F1 | 	sub	fp, #8
205bc     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
205c0     14 4E 05 A1 |  if_e	add	fp, #20
205c4     A7 26 02 AB |  if_e	rdlong	local01, fp
205c8     14 4E 85 A1 |  if_e	sub	fp, #20
205cc     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
205d0     1C 00 90 5D |  if_ne	jmp	#LR__2544
205d4     A7 90 02 FB | 	rdlong	muldiva_, fp
205d8     0C 4E 05 F1 | 	add	fp, #12
205dc     A7 92 02 FB | 	rdlong	muldivb_, fp
205e0     0C 4E 85 F1 | 	sub	fp, #12
205e4     BA 00 A0 FD | 	call	#divide_
205e8     A7 90 62 FC | 	wrlong	muldiva_, fp
205ec     50 00 90 FD | 	jmp	#LR__2546
205f0                 | LR__2544
205f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
205f0     08 4E 05 F1 | 	add	fp, #8
205f4     A7 92 02 FB | 	rdlong	muldivb_, fp
205f8     08 4E 85 F1 | 	sub	fp, #8
205fc     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
20600     14 4E 05 A1 |  if_e	add	fp, #20
20604     A7 26 02 AB |  if_e	rdlong	local01, fp
20608     14 4E 85 A1 |  if_e	sub	fp, #20
2060c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
20610     1C 00 90 5D |  if_ne	jmp	#LR__2545
20614     A7 90 02 FB | 	rdlong	muldiva_, fp
20618     0C 4E 05 F1 | 	add	fp, #12
2061c     A7 92 02 FB | 	rdlong	muldivb_, fp
20620     0C 4E 85 F1 | 	sub	fp, #12
20624     BA 00 A0 FD | 	call	#divide_
20628     A7 90 62 FC | 	wrlong	muldiva_, fp
2062c     10 00 90 FD | 	jmp	#LR__2546
20630                 | LR__2545
20630     A7 16 68 FC | 	wrlong	#11, fp
20634     08 4E 05 F1 | 	add	fp, #8
20638     A7 FE 69 FC | 	wrlong	#255, fp
2063c     08 4E 85 F1 | 	sub	fp, #8
20640                 | LR__2546
20640     A7 12 02 F6 | 	mov	arg01, fp
20644     FC D1 BE FD | 	call	#_push
20648     A7 F0 03 F6 | 	mov	ptra, fp
2064c     B2 00 A0 FD | 	call	#popregs_
20650                 | _do_mod_ret
20650     2D 00 64 FD | 	ret
20654                 | 
20654                 | ' 
20654                 | ' '--------------------------------- mul (*)
20654                 | ' 
20654                 | ' sub do_mul
20654                 | _do_mul
20654     05 4A 05 F6 | 	mov	COUNT_, #5
20658     A8 00 A0 FD | 	call	#pushregs_
2065c     18 F0 07 F1 | 	add	ptra, #24
20660     48 D1 BE FD | 	call	#_pop
20664     FD 26 02 F6 | 	mov	local01, result1
20668     FE 28 02 F6 | 	mov	local02, result2
2066c     FF 2A 02 F6 | 	mov	local03, result3
20670     0C 4E 05 F1 | 	add	fp, #12
20674     A7 26 62 FC | 	wrlong	local01, fp
20678     04 4E 05 F1 | 	add	fp, #4
2067c     A7 28 62 FC | 	wrlong	local02, fp
20680     04 4E 05 F1 | 	add	fp, #4
20684     A7 2A 62 FC | 	wrlong	local03, fp
20688     14 4E 85 F1 | 	sub	fp, #20
2068c     1C D1 BE FD | 	call	#_pop
20690     FF 2A 02 F6 | 	mov	local03, result3
20694     A7 FA 61 FC | 	wrlong	result1, fp
20698     04 4E 05 F1 | 	add	fp, #4
2069c     A7 FC 61 FC | 	wrlong	result2, fp
206a0     04 4E 05 F1 | 	add	fp, #4
206a4     A7 2A 62 FC | 	wrlong	local03, fp
206a8                 | ' 
206a8                 | ' t2=pop()
206a8                 | ' t1=pop()
206a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
206a8     08 4E 85 F1 | 	sub	fp, #8
206ac     1D 2A 0E F2 | 	cmp	local03, #29 wz
206b0     14 4E 05 A1 |  if_e	add	fp, #20
206b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
206b8     14 4E 85 A1 |  if_e	sub	fp, #20
206bc     16 2B 02 A6 |  if_e	mov	local03, local04
206c0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
206c4     20 00 90 5D |  if_ne	jmp	#LR__2550
206c8     A7 28 02 FB | 	rdlong	local02, fp
206cc     0C 4E 05 F1 | 	add	fp, #12
206d0     A7 2A 02 FB | 	rdlong	local03, fp
206d4     15 29 02 FD | 	qmul	local02, local03
206d8     0C 4E 85 F1 | 	sub	fp, #12
206dc     18 26 62 FD | 	getqx	local01
206e0     A7 26 62 FC | 	wrlong	local01, fp
206e4     C4 02 90 FD | 	jmp	#LR__2559
206e8                 | LR__2550
206e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
206e8     08 4E 05 F1 | 	add	fp, #8
206ec     A7 26 02 FB | 	rdlong	local01, fp
206f0     08 4E 85 F1 | 	sub	fp, #8
206f4     1D 26 0E F2 | 	cmp	local01, #29 wz
206f8     14 4E 05 A1 |  if_e	add	fp, #20
206fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
20700     14 4E 85 A1 |  if_e	sub	fp, #20
20704     16 2B 02 A6 |  if_e	mov	local03, local04
20708     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2070c     2C 00 90 5D |  if_ne	jmp	#LR__2551
20710     A7 28 02 FB | 	rdlong	local02, fp
20714     0C 4E 05 F1 | 	add	fp, #12
20718     A7 2A 02 FB | 	rdlong	local03, fp
2071c     15 29 02 FD | 	qmul	local02, local03
20720     0C 4E 85 F1 | 	sub	fp, #12
20724     18 26 62 FD | 	getqx	local01
20728     A7 26 62 FC | 	wrlong	local01, fp
2072c     08 4E 05 F1 | 	add	fp, #8
20730     A7 38 68 FC | 	wrlong	#28, fp
20734     08 4E 85 F1 | 	sub	fp, #8
20738     70 02 90 FD | 	jmp	#LR__2559
2073c                 | LR__2551
2073c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
2073c     08 4E 05 F1 | 	add	fp, #8
20740     A7 26 02 FB | 	rdlong	local01, fp
20744     08 4E 85 F1 | 	sub	fp, #8
20748     1D 26 0E F2 | 	cmp	local01, #29 wz
2074c     14 4E 05 A1 |  if_e	add	fp, #20
20750     A7 2C 02 AB |  if_e	rdlong	local04, fp
20754     14 4E 85 A1 |  if_e	sub	fp, #20
20758     16 2B 02 A6 |  if_e	mov	local03, local04
2075c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20760     30 00 90 5D |  if_ne	jmp	#LR__2552
20764     A7 12 02 FB | 	rdlong	arg01, fp
20768     C4 97 B0 FD | 	call	#__system___float_fromuns
2076c     FD 12 02 F6 | 	mov	arg01, result1
20770     0C 4E 05 F1 | 	add	fp, #12
20774     A7 14 02 FB | 	rdlong	arg02, fp
20778     0C 4E 85 F1 | 	sub	fp, #12
2077c     B4 9B B0 FD | 	call	#__system___float_mul
20780     A7 FA 61 FC | 	wrlong	result1, fp
20784     08 4E 05 F1 | 	add	fp, #8
20788     A7 3C 68 FC | 	wrlong	#30, fp
2078c     08 4E 85 F1 | 	sub	fp, #8
20790     18 02 90 FD | 	jmp	#LR__2559
20794                 | LR__2552
20794                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
20794     08 4E 05 F1 | 	add	fp, #8
20798     A7 26 02 FB | 	rdlong	local01, fp
2079c     08 4E 85 F1 | 	sub	fp, #8
207a0     1C 26 0E F2 | 	cmp	local01, #28 wz
207a4     14 4E 05 A1 |  if_e	add	fp, #20
207a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
207ac     14 4E 85 A1 |  if_e	sub	fp, #20
207b0     16 2B 02 A6 |  if_e	mov	local03, local04
207b4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
207b8     20 00 90 5D |  if_ne	jmp	#LR__2553
207bc     A7 28 02 FB | 	rdlong	local02, fp
207c0     0C 4E 05 F1 | 	add	fp, #12
207c4     A7 2A 02 FB | 	rdlong	local03, fp
207c8     15 29 02 FD | 	qmul	local02, local03
207cc     0C 4E 85 F1 | 	sub	fp, #12
207d0     18 26 62 FD | 	getqx	local01
207d4     A7 26 62 FC | 	wrlong	local01, fp
207d8     D0 01 90 FD | 	jmp	#LR__2559
207dc                 | LR__2553
207dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
207dc     08 4E 05 F1 | 	add	fp, #8
207e0     A7 26 02 FB | 	rdlong	local01, fp
207e4     08 4E 85 F1 | 	sub	fp, #8
207e8     1C 26 0E F2 | 	cmp	local01, #28 wz
207ec     14 4E 05 A1 |  if_e	add	fp, #20
207f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
207f4     14 4E 85 A1 |  if_e	sub	fp, #20
207f8     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
207fc     20 00 90 5D |  if_ne	jmp	#LR__2554
20800     A7 28 02 FB | 	rdlong	local02, fp
20804     0C 4E 05 F1 | 	add	fp, #12
20808     A7 2A 02 FB | 	rdlong	local03, fp
2080c     15 29 02 FD | 	qmul	local02, local03
20810     0C 4E 85 F1 | 	sub	fp, #12
20814     18 26 62 FD | 	getqx	local01
20818     A7 26 62 FC | 	wrlong	local01, fp
2081c     8C 01 90 FD | 	jmp	#LR__2559
20820                 | LR__2554
20820                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
20820     08 4E 05 F1 | 	add	fp, #8
20824     A7 26 02 FB | 	rdlong	local01, fp
20828     08 4E 85 F1 | 	sub	fp, #8
2082c     1C 26 0E F2 | 	cmp	local01, #28 wz
20830     14 4E 05 A1 |  if_e	add	fp, #20
20834     A7 2A 02 AB |  if_e	rdlong	local03, fp
20838     14 4E 85 A1 |  if_e	sub	fp, #20
2083c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20840     40 00 90 5D |  if_ne	jmp	#LR__2555
20844     A7 12 02 FB | 	rdlong	arg01, fp
20848     09 13 52 F6 | 	abs	arg01, arg01 wc
2084c     1F 2E C6 C9 |  if_b	decod	local05, #31
20850     00 2E 06 36 |  if_ae	mov	local05, #0
20854     D8 96 B0 FD | 	call	#__system___float_fromuns
20858     17 FB 61 F5 | 	xor	result1, local05
2085c     FD 12 02 F6 | 	mov	arg01, result1
20860     0C 4E 05 F1 | 	add	fp, #12
20864     A7 14 02 FB | 	rdlong	arg02, fp
20868     0C 4E 85 F1 | 	sub	fp, #12
2086c     C4 9A B0 FD | 	call	#__system___float_mul
20870     A7 FA 61 FC | 	wrlong	result1, fp
20874     08 4E 05 F1 | 	add	fp, #8
20878     A7 3C 68 FC | 	wrlong	#30, fp
2087c     08 4E 85 F1 | 	sub	fp, #8
20880     28 01 90 FD | 	jmp	#LR__2559
20884                 | LR__2555
20884                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
20884     08 4E 05 F1 | 	add	fp, #8
20888     A7 26 02 FB | 	rdlong	local01, fp
2088c     08 4E 85 F1 | 	sub	fp, #8
20890     1E 26 0E F2 | 	cmp	local01, #30 wz
20894     14 4E 05 A1 |  if_e	add	fp, #20
20898     A7 2A 02 AB |  if_e	rdlong	local03, fp
2089c     14 4E 85 A1 |  if_e	sub	fp, #20
208a0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
208a4     28 00 90 5D |  if_ne	jmp	#LR__2556
208a8     A7 26 02 FB | 	rdlong	local01, fp
208ac     0C 4E 05 F1 | 	add	fp, #12
208b0     A7 12 02 FB | 	rdlong	arg01, fp
208b4     0C 4E 85 F1 | 	sub	fp, #12
208b8     74 96 B0 FD | 	call	#__system___float_fromuns
208bc     FD 14 02 F6 | 	mov	arg02, result1
208c0     13 13 02 F6 | 	mov	arg01, local01
208c4     6C 9A B0 FD | 	call	#__system___float_mul
208c8     A7 FA 61 FC | 	wrlong	result1, fp
208cc     DC 00 90 FD | 	jmp	#LR__2559
208d0                 | LR__2556
208d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
208d0     08 4E 05 F1 | 	add	fp, #8
208d4     A7 26 02 FB | 	rdlong	local01, fp
208d8     08 4E 85 F1 | 	sub	fp, #8
208dc     1E 26 0E F2 | 	cmp	local01, #30 wz
208e0     14 4E 05 A1 |  if_e	add	fp, #20
208e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
208e8     14 4E 85 A1 |  if_e	sub	fp, #20
208ec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
208f0     38 00 90 5D |  if_ne	jmp	#LR__2557
208f4     A7 26 02 FB | 	rdlong	local01, fp
208f8     0C 4E 05 F1 | 	add	fp, #12
208fc     A7 12 02 FB | 	rdlong	arg01, fp
20900     0C 4E 85 F1 | 	sub	fp, #12
20904     09 13 52 F6 | 	abs	arg01, arg01 wc
20908     1F 2E C6 C9 |  if_b	decod	local05, #31
2090c     00 2E 06 36 |  if_ae	mov	local05, #0
20910     1C 96 B0 FD | 	call	#__system___float_fromuns
20914     17 FB 61 F5 | 	xor	result1, local05
20918     FD 14 02 F6 | 	mov	arg02, result1
2091c     13 13 02 F6 | 	mov	arg01, local01
20920     10 9A B0 FD | 	call	#__system___float_mul
20924     A7 FA 61 FC | 	wrlong	result1, fp
20928     80 00 90 FD | 	jmp	#LR__2559
2092c                 | LR__2557
2092c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
2092c     08 4E 05 F1 | 	add	fp, #8
20930     A7 26 02 FB | 	rdlong	local01, fp
20934     08 4E 85 F1 | 	sub	fp, #8
20938     1E 26 0E F2 | 	cmp	local01, #30 wz
2093c     14 4E 05 A1 |  if_e	add	fp, #20
20940     A7 2A 02 AB |  if_e	rdlong	local03, fp
20944     14 4E 85 A1 |  if_e	sub	fp, #20
20948     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2094c     1C 00 90 5D |  if_ne	jmp	#LR__2558
20950     A7 12 02 FB | 	rdlong	arg01, fp
20954     0C 4E 05 F1 | 	add	fp, #12
20958     A7 14 02 FB | 	rdlong	arg02, fp
2095c     0C 4E 85 F1 | 	sub	fp, #12
20960     D0 99 B0 FD | 	call	#__system___float_mul
20964     A7 FA 61 FC | 	wrlong	result1, fp
20968     40 00 90 FD | 	jmp	#LR__2559
2096c                 | LR__2558
2096c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
2096c     08 4E 05 F1 | 	add	fp, #8
20970     A7 26 02 FB | 	rdlong	local01, fp
20974     08 4E 85 F1 | 	sub	fp, #8
20978     1F 26 0E F2 | 	cmp	local01, #31 wz
2097c     14 4E 05 51 |  if_ne	add	fp, #20
20980     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20984     14 4E 85 51 |  if_ne	sub	fp, #20
20988     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
2098c     A7 10 68 AC |  if_e	wrlong	#8, fp
20990     08 4E 05 A1 |  if_e	add	fp, #8
20994     A7 FE 69 AC |  if_e	wrlong	#255, fp
20998     08 4E 85 A1 |  if_e	sub	fp, #8
2099c     A7 12 68 5C |  if_ne	wrlong	#9, fp
209a0     08 4E 05 51 |  if_ne	add	fp, #8
209a4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
209a8     08 4E 85 51 |  if_ne	sub	fp, #8
209ac                 | LR__2559
209ac     A7 12 02 F6 | 	mov	arg01, fp
209b0     90 CE BE FD | 	call	#_push
209b4     A7 F0 03 F6 | 	mov	ptra, fp
209b8     B2 00 A0 FD | 	call	#popregs_
209bc                 | _do_mul_ret
209bc     2D 00 64 FD | 	ret
209c0                 | 
209c0                 | ' 
209c0                 | ' '--------------------------------- not equal (<>)
209c0                 | ' 
209c0                 | ' sub do_ne
209c0                 | _do_ne
209c0     05 4A 05 F6 | 	mov	COUNT_, #5
209c4     A8 00 A0 FD | 	call	#pushregs_
209c8     18 F0 07 F1 | 	add	ptra, #24
209cc     DC CD BE FD | 	call	#_pop
209d0     FD 26 02 F6 | 	mov	local01, result1
209d4     FE 28 02 F6 | 	mov	local02, result2
209d8     FF 2A 02 F6 | 	mov	local03, result3
209dc     0C 4E 05 F1 | 	add	fp, #12
209e0     A7 26 62 FC | 	wrlong	local01, fp
209e4     04 4E 05 F1 | 	add	fp, #4
209e8     A7 28 62 FC | 	wrlong	local02, fp
209ec     04 4E 05 F1 | 	add	fp, #4
209f0     A7 2A 62 FC | 	wrlong	local03, fp
209f4     14 4E 85 F1 | 	sub	fp, #20
209f8     B0 CD BE FD | 	call	#_pop
209fc     FF 2A 02 F6 | 	mov	local03, result3
20a00     A7 FA 61 FC | 	wrlong	result1, fp
20a04     04 4E 05 F1 | 	add	fp, #4
20a08     A7 FC 61 FC | 	wrlong	result2, fp
20a0c     04 4E 05 F1 | 	add	fp, #4
20a10     A7 2A 62 FC | 	wrlong	local03, fp
20a14                 | ' 
20a14                 | ' t2=pop()
20a14                 | ' t1=pop()
20a14                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
20a14     08 4E 85 F1 | 	sub	fp, #8
20a18     1F 2A 0E F2 | 	cmp	local03, #31 wz
20a1c     14 4E 05 A1 |  if_e	add	fp, #20
20a20     A7 2C 02 AB |  if_e	rdlong	local04, fp
20a24     14 4E 85 A1 |  if_e	sub	fp, #20
20a28     16 2B 02 A6 |  if_e	mov	local03, local04
20a2c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20a30     28 00 90 5D |  if_ne	jmp	#LR__2560
20a34     00 26 06 F6 | 	mov	local01, #0
20a38     A7 12 02 FB | 	rdlong	arg01, fp
20a3c     0C 4E 05 F1 | 	add	fp, #12
20a40     A7 14 02 FB | 	rdlong	arg02, fp
20a44     0C 4E 85 F1 | 	sub	fp, #12
20a48     94 6A B0 FD | 	call	#__system___string_cmp
20a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
20a50     00 26 26 56 |  if_ne	not	local01, #0
20a54     A7 26 62 FC | 	wrlong	local01, fp
20a58     20 04 90 FD | 	jmp	#LR__2573
20a5c                 | LR__2560
20a5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
20a5c     08 4E 05 F1 | 	add	fp, #8
20a60     A7 26 02 FB | 	rdlong	local01, fp
20a64     08 4E 85 F1 | 	sub	fp, #8
20a68     1E 26 0E F2 | 	cmp	local01, #30 wz
20a6c     14 4E 05 A1 |  if_e	add	fp, #20
20a70     A7 2C 02 AB |  if_e	rdlong	local04, fp
20a74     14 4E 85 A1 |  if_e	sub	fp, #20
20a78     16 2B 02 A6 |  if_e	mov	local03, local04
20a7c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20a80     2C 00 90 5D |  if_ne	jmp	#LR__2561
20a84     00 26 06 F6 | 	mov	local01, #0
20a88     A7 12 02 FB | 	rdlong	arg01, fp
20a8c     0C 4E 05 F1 | 	add	fp, #12
20a90     A7 14 02 FB | 	rdlong	arg02, fp
20a94     0C 4E 85 F1 | 	sub	fp, #12
20a98     01 16 06 F6 | 	mov	arg03, #1
20a9c     C8 9C B0 FD | 	call	#__system___float_cmp
20aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
20aa4     00 26 26 56 |  if_ne	not	local01, #0
20aa8     A7 26 62 FC | 	wrlong	local01, fp
20aac     CC 03 90 FD | 	jmp	#LR__2573
20ab0                 | LR__2561
20ab0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
20ab0     08 4E 05 F1 | 	add	fp, #8
20ab4     A7 26 02 FB | 	rdlong	local01, fp
20ab8     08 4E 85 F1 | 	sub	fp, #8
20abc     1E 26 0E F2 | 	cmp	local01, #30 wz
20ac0     14 4E 05 A1 |  if_e	add	fp, #20
20ac4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20ac8     14 4E 85 A1 |  if_e	sub	fp, #20
20acc     16 2B 02 A6 |  if_e	mov	local03, local04
20ad0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20ad4     48 00 90 5D |  if_ne	jmp	#LR__2562
20ad8     00 26 06 F6 | 	mov	local01, #0
20adc     A7 28 02 FB | 	rdlong	local02, fp
20ae0     0C 4E 05 F1 | 	add	fp, #12
20ae4     A7 12 02 FB | 	rdlong	arg01, fp
20ae8     0C 4E 85 F1 | 	sub	fp, #12
20aec     09 13 52 F6 | 	abs	arg01, arg01 wc
20af0     1F 2E C6 C9 |  if_b	decod	local05, #31
20af4     00 2E 06 36 |  if_ae	mov	local05, #0
20af8     34 94 B0 FD | 	call	#__system___float_fromuns
20afc     17 FB 61 F5 | 	xor	result1, local05
20b00     FD 14 02 F6 | 	mov	arg02, result1
20b04     14 13 02 F6 | 	mov	arg01, local02
20b08     01 16 06 F6 | 	mov	arg03, #1
20b0c     58 9C B0 FD | 	call	#__system___float_cmp
20b10     00 FA 0D F2 | 	cmp	result1, #0 wz
20b14     00 26 26 56 |  if_ne	not	local01, #0
20b18     A7 26 62 FC | 	wrlong	local01, fp
20b1c     5C 03 90 FD | 	jmp	#LR__2573
20b20                 | LR__2562
20b20                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
20b20     08 4E 05 F1 | 	add	fp, #8
20b24     A7 26 02 FB | 	rdlong	local01, fp
20b28     08 4E 85 F1 | 	sub	fp, #8
20b2c     1E 26 0E F2 | 	cmp	local01, #30 wz
20b30     14 4E 05 A1 |  if_e	add	fp, #20
20b34     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b38     14 4E 85 A1 |  if_e	sub	fp, #20
20b3c     16 2B 02 A6 |  if_e	mov	local03, local04
20b40     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20b44     38 00 90 5D |  if_ne	jmp	#LR__2563
20b48     00 26 06 F6 | 	mov	local01, #0
20b4c     A7 28 02 FB | 	rdlong	local02, fp
20b50     0C 4E 05 F1 | 	add	fp, #12
20b54     A7 12 02 FB | 	rdlong	arg01, fp
20b58     0C 4E 85 F1 | 	sub	fp, #12
20b5c     D0 93 B0 FD | 	call	#__system___float_fromuns
20b60     FD 14 02 F6 | 	mov	arg02, result1
20b64     14 13 02 F6 | 	mov	arg01, local02
20b68     01 16 06 F6 | 	mov	arg03, #1
20b6c     F8 9B B0 FD | 	call	#__system___float_cmp
20b70     00 FA 0D F2 | 	cmp	result1, #0 wz
20b74     00 26 26 56 |  if_ne	not	local01, #0
20b78     A7 26 62 FC | 	wrlong	local01, fp
20b7c     FC 02 90 FD | 	jmp	#LR__2573
20b80                 | LR__2563
20b80                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
20b80     08 4E 05 F1 | 	add	fp, #8
20b84     A7 26 02 FB | 	rdlong	local01, fp
20b88     08 4E 85 F1 | 	sub	fp, #8
20b8c     1C 26 0E F2 | 	cmp	local01, #28 wz
20b90     14 4E 05 A1 |  if_e	add	fp, #20
20b94     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b98     14 4E 85 A1 |  if_e	sub	fp, #20
20b9c     16 2B 02 A6 |  if_e	mov	local03, local04
20ba0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20ba4     44 00 90 5D |  if_ne	jmp	#LR__2564
20ba8     00 26 06 F6 | 	mov	local01, #0
20bac     A7 12 02 FB | 	rdlong	arg01, fp
20bb0     09 13 52 F6 | 	abs	arg01, arg01 wc
20bb4     1F 2E C6 C9 |  if_b	decod	local05, #31
20bb8     00 2E 06 36 |  if_ae	mov	local05, #0
20bbc     70 93 B0 FD | 	call	#__system___float_fromuns
20bc0     17 FB 61 F5 | 	xor	result1, local05
20bc4     FD 12 02 F6 | 	mov	arg01, result1
20bc8     0C 4E 05 F1 | 	add	fp, #12
20bcc     A7 14 02 FB | 	rdlong	arg02, fp
20bd0     0C 4E 85 F1 | 	sub	fp, #12
20bd4     01 16 06 F6 | 	mov	arg03, #1
20bd8     8C 9B B0 FD | 	call	#__system___float_cmp
20bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
20be0     00 26 26 56 |  if_ne	not	local01, #0
20be4     A7 26 62 FC | 	wrlong	local01, fp
20be8     90 02 90 FD | 	jmp	#LR__2573
20bec                 | LR__2564
20bec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
20bec     08 4E 05 F1 | 	add	fp, #8
20bf0     A7 26 02 FB | 	rdlong	local01, fp
20bf4     08 4E 85 F1 | 	sub	fp, #8
20bf8     1C 26 0E F2 | 	cmp	local01, #28 wz
20bfc     14 4E 05 A1 |  if_e	add	fp, #20
20c00     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c04     14 4E 85 A1 |  if_e	sub	fp, #20
20c08     16 2B 02 A6 |  if_e	mov	local03, local04
20c0c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20c10     24 00 90 5D |  if_ne	jmp	#LR__2565
20c14     00 26 06 F6 | 	mov	local01, #0
20c18     A7 28 02 FB | 	rdlong	local02, fp
20c1c     0C 4E 05 F1 | 	add	fp, #12
20c20     A7 2A 02 FB | 	rdlong	local03, fp
20c24     0C 4E 85 F1 | 	sub	fp, #12
20c28     15 29 0A F2 | 	cmp	local02, local03 wz
20c2c     01 26 66 56 |  if_ne	neg	local01, #1
20c30     A7 26 62 FC | 	wrlong	local01, fp
20c34     44 02 90 FD | 	jmp	#LR__2573
20c38                 | LR__2565
20c38                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
20c38     08 4E 05 F1 | 	add	fp, #8
20c3c     A7 26 02 FB | 	rdlong	local01, fp
20c40     08 4E 85 F1 | 	sub	fp, #8
20c44     1C 26 0E F2 | 	cmp	local01, #28 wz
20c48     14 4E 05 A1 |  if_e	add	fp, #20
20c4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c50     14 4E 85 A1 |  if_e	sub	fp, #20
20c54     16 2B 02 A6 |  if_e	mov	local03, local04
20c58     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20c5c     24 00 90 5D |  if_ne	jmp	#LR__2566
20c60     00 26 06 F6 | 	mov	local01, #0
20c64     A7 28 02 FB | 	rdlong	local02, fp
20c68     0C 4E 05 F1 | 	add	fp, #12
20c6c     A7 2A 02 FB | 	rdlong	local03, fp
20c70     0C 4E 85 F1 | 	sub	fp, #12
20c74     15 29 0A F2 | 	cmp	local02, local03 wz
20c78     01 26 66 56 |  if_ne	neg	local01, #1
20c7c     A7 26 62 FC | 	wrlong	local01, fp
20c80     F8 01 90 FD | 	jmp	#LR__2573
20c84                 | LR__2566
20c84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
20c84     08 4E 05 F1 | 	add	fp, #8
20c88     A7 26 02 FB | 	rdlong	local01, fp
20c8c     08 4E 85 F1 | 	sub	fp, #8
20c90     1D 26 0E F2 | 	cmp	local01, #29 wz
20c94     14 4E 05 A1 |  if_e	add	fp, #20
20c98     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c9c     14 4E 85 A1 |  if_e	sub	fp, #20
20ca0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20ca4     34 00 90 5D |  if_ne	jmp	#LR__2567
20ca8     00 26 06 F6 | 	mov	local01, #0
20cac     A7 12 02 FB | 	rdlong	arg01, fp
20cb0     7C 92 B0 FD | 	call	#__system___float_fromuns
20cb4     FD 12 02 F6 | 	mov	arg01, result1
20cb8     0C 4E 05 F1 | 	add	fp, #12
20cbc     A7 14 02 FB | 	rdlong	arg02, fp
20cc0     0C 4E 85 F1 | 	sub	fp, #12
20cc4     01 16 06 F6 | 	mov	arg03, #1
20cc8     9C 9A B0 FD | 	call	#__system___float_cmp
20ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
20cd0     00 26 26 56 |  if_ne	not	local01, #0
20cd4     A7 26 62 FC | 	wrlong	local01, fp
20cd8     A0 01 90 FD | 	jmp	#LR__2573
20cdc                 | LR__2567
20cdc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
20cdc     08 4E 05 F1 | 	add	fp, #8
20ce0     A7 26 02 FB | 	rdlong	local01, fp
20ce4     08 4E 85 F1 | 	sub	fp, #8
20ce8     1D 26 0E F2 | 	cmp	local01, #29 wz
20cec     14 4E 05 A1 |  if_e	add	fp, #20
20cf0     A7 2A 02 AB |  if_e	rdlong	local03, fp
20cf4     14 4E 85 A1 |  if_e	sub	fp, #20
20cf8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20cfc     24 00 90 5D |  if_ne	jmp	#LR__2568
20d00     00 26 06 F6 | 	mov	local01, #0
20d04     A7 28 02 FB | 	rdlong	local02, fp
20d08     0C 4E 05 F1 | 	add	fp, #12
20d0c     A7 2A 02 FB | 	rdlong	local03, fp
20d10     0C 4E 85 F1 | 	sub	fp, #12
20d14     15 29 0A F2 | 	cmp	local02, local03 wz
20d18     01 26 66 56 |  if_ne	neg	local01, #1
20d1c     A7 26 62 FC | 	wrlong	local01, fp
20d20     58 01 90 FD | 	jmp	#LR__2573
20d24                 | LR__2568
20d24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
20d24     08 4E 05 F1 | 	add	fp, #8
20d28     A7 26 02 FB | 	rdlong	local01, fp
20d2c     08 4E 85 F1 | 	sub	fp, #8
20d30     1D 26 0E F2 | 	cmp	local01, #29 wz
20d34     14 4E 05 A1 |  if_e	add	fp, #20
20d38     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d3c     14 4E 85 A1 |  if_e	sub	fp, #20
20d40     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20d44     24 00 90 5D |  if_ne	jmp	#LR__2569
20d48     00 26 06 F6 | 	mov	local01, #0
20d4c     A7 28 02 FB | 	rdlong	local02, fp
20d50     0C 4E 05 F1 | 	add	fp, #12
20d54     A7 2A 02 FB | 	rdlong	local03, fp
20d58     0C 4E 85 F1 | 	sub	fp, #12
20d5c     15 29 0A F2 | 	cmp	local02, local03 wz
20d60     01 26 66 56 |  if_ne	neg	local01, #1
20d64     A7 26 62 FC | 	wrlong	local01, fp
20d68     10 01 90 FD | 	jmp	#LR__2573
20d6c                 | LR__2569
20d6c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
20d6c     08 4E 05 F1 | 	add	fp, #8
20d70     A7 26 02 FB | 	rdlong	local01, fp
20d74     08 4E 85 F1 | 	sub	fp, #8
20d78     2B 26 0E F2 | 	cmp	local01, #43 wz
20d7c     14 4E 05 A1 |  if_e	add	fp, #20
20d80     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d84     14 4E 85 A1 |  if_e	sub	fp, #20
20d88     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20d8c     30 00 90 5D |  if_ne	jmp	#LR__2570
20d90     00 26 06 F6 | 	mov	local01, #0
20d94     A7 12 02 FB | 	rdlong	arg01, fp
20d98     88 CB BE FD | 	call	#_convertstring
20d9c     FD 12 02 F6 | 	mov	arg01, result1
20da0     0C 4E 05 F1 | 	add	fp, #12
20da4     A7 14 02 FB | 	rdlong	arg02, fp
20da8     0C 4E 85 F1 | 	sub	fp, #12
20dac     30 67 B0 FD | 	call	#__system___string_cmp
20db0     00 FA 0D F2 | 	cmp	result1, #0 wz
20db4     00 26 26 56 |  if_ne	not	local01, #0
20db8     A7 26 62 FC | 	wrlong	local01, fp
20dbc     BC 00 90 FD | 	jmp	#LR__2573
20dc0                 | LR__2570
20dc0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
20dc0     08 4E 05 F1 | 	add	fp, #8
20dc4     A7 26 02 FB | 	rdlong	local01, fp
20dc8     08 4E 85 F1 | 	sub	fp, #8
20dcc     1F 26 0E F2 | 	cmp	local01, #31 wz
20dd0     14 4E 05 A1 |  if_e	add	fp, #20
20dd4     A7 2A 02 AB |  if_e	rdlong	local03, fp
20dd8     14 4E 85 A1 |  if_e	sub	fp, #20
20ddc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20de0     34 00 90 5D |  if_ne	jmp	#LR__2571
20de4     00 26 06 F6 | 	mov	local01, #0
20de8     A7 28 02 FB | 	rdlong	local02, fp
20dec     0C 4E 05 F1 | 	add	fp, #12
20df0     A7 12 02 FB | 	rdlong	arg01, fp
20df4     0C 4E 85 F1 | 	sub	fp, #12
20df8     28 CB BE FD | 	call	#_convertstring
20dfc     FD 14 02 F6 | 	mov	arg02, result1
20e00     14 13 02 F6 | 	mov	arg01, local02
20e04     D8 66 B0 FD | 	call	#__system___string_cmp
20e08     00 FA 0D F2 | 	cmp	result1, #0 wz
20e0c     00 26 26 56 |  if_ne	not	local01, #0
20e10     A7 26 62 FC | 	wrlong	local01, fp
20e14     64 00 90 FD | 	jmp	#LR__2573
20e18                 | LR__2571
20e18                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
20e18     08 4E 05 F1 | 	add	fp, #8
20e1c     A7 26 02 FB | 	rdlong	local01, fp
20e20     08 4E 85 F1 | 	sub	fp, #8
20e24     2B 26 0E F2 | 	cmp	local01, #43 wz
20e28     14 4E 05 A1 |  if_e	add	fp, #20
20e2c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e30     14 4E 85 A1 |  if_e	sub	fp, #20
20e34     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20e38     3C 00 90 5D |  if_ne	jmp	#LR__2572
20e3c     00 26 06 F6 | 	mov	local01, #0
20e40     A7 12 02 FB | 	rdlong	arg01, fp
20e44     DC CA BE FD | 	call	#_convertstring
20e48     FD 28 02 F6 | 	mov	local02, result1
20e4c     0C 4E 05 F1 | 	add	fp, #12
20e50     A7 12 02 FB | 	rdlong	arg01, fp
20e54     0C 4E 85 F1 | 	sub	fp, #12
20e58     C8 CA BE FD | 	call	#_convertstring
20e5c     FD 14 02 F6 | 	mov	arg02, result1
20e60     14 13 02 F6 | 	mov	arg01, local02
20e64     78 66 B0 FD | 	call	#__system___string_cmp
20e68     00 FA 0D F2 | 	cmp	result1, #0 wz
20e6c     00 26 26 56 |  if_ne	not	local01, #0
20e70     A7 26 62 FC | 	wrlong	local01, fp
20e74     04 00 90 FD | 	jmp	#LR__2573
20e78                 | LR__2572
20e78     A7 00 68 FC | 	wrlong	#0, fp
20e7c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20e7c                 | LR__2573
20e7c     08 4E 05 F1 | 	add	fp, #8
20e80     A7 38 68 FC | 	wrlong	#28, fp
20e84     08 4E 85 F1 | 	sub	fp, #8
20e88     A7 12 02 F6 | 	mov	arg01, fp
20e8c     B4 C9 BE FD | 	call	#_push
20e90     A7 F0 03 F6 | 	mov	ptra, fp
20e94     B2 00 A0 FD | 	call	#popregs_
20e98                 | _do_ne_ret
20e98     2D 00 64 FD | 	ret
20e9c                 | 
20e9c                 | ' 
20e9c                 | ' '--------------------------------- OR
20e9c                 | ' 
20e9c                 | ' sub do_or 
20e9c                 | _do_or
20e9c     03 4A 05 F6 | 	mov	COUNT_, #3
20ea0     A8 00 A0 FD | 	call	#pushregs_
20ea4     18 F0 07 F1 | 	add	ptra, #24
20ea8     00 C9 BE FD | 	call	#_pop
20eac     FD 12 02 F6 | 	mov	arg01, result1
20eb0     FE 26 02 F6 | 	mov	local01, result2
20eb4     FF 28 02 F6 | 	mov	local02, result3
20eb8     0C 4E 05 F1 | 	add	fp, #12
20ebc     A7 12 62 FC | 	wrlong	arg01, fp
20ec0     04 4E 05 F1 | 	add	fp, #4
20ec4     A7 26 62 FC | 	wrlong	local01, fp
20ec8     04 4E 05 F1 | 	add	fp, #4
20ecc     A7 28 62 FC | 	wrlong	local02, fp
20ed0     14 4E 85 F1 | 	sub	fp, #20
20ed4     D4 C8 BE FD | 	call	#_pop
20ed8     FF 2A 02 F6 | 	mov	local03, result3
20edc     A7 FA 61 FC | 	wrlong	result1, fp
20ee0     04 4E 05 F1 | 	add	fp, #4
20ee4     A7 FC 61 FC | 	wrlong	result2, fp
20ee8     04 4E 05 F1 | 	add	fp, #4
20eec     A7 2A 62 FC | 	wrlong	local03, fp
20ef0                 | ' 
20ef0                 | ' t2=pop()
20ef0                 | ' t1=pop()
20ef0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20ef0     08 4E 85 F1 | 	sub	fp, #8
20ef4     1C 2A 0E F2 | 	cmp	local03, #28 wz
20ef8     A7 2A 02 AB |  if_e	rdlong	local03, fp
20efc     A7 2A 62 AC |  if_e	wrlong	local03, fp
20f00     08 4E 05 A1 |  if_e	add	fp, #8
20f04     A7 3A 68 AC |  if_e	wrlong	#29, fp
20f08     08 4E 85 A1 |  if_e	sub	fp, #8
20f0c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20f0c     14 4E 05 F1 | 	add	fp, #20
20f10     A7 2A 02 FB | 	rdlong	local03, fp
20f14     14 4E 85 F1 | 	sub	fp, #20
20f18     1C 2A 0E F2 | 	cmp	local03, #28 wz
20f1c     18 00 90 5D |  if_ne	jmp	#LR__2580
20f20     0C 4E 05 F1 | 	add	fp, #12
20f24     A7 2A 02 FB | 	rdlong	local03, fp
20f28     A7 2A 62 FC | 	wrlong	local03, fp
20f2c     08 4E 05 F1 | 	add	fp, #8
20f30     A7 3A 68 FC | 	wrlong	#29, fp
20f34     14 4E 85 F1 | 	sub	fp, #20
20f38                 | LR__2580
20f38                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
20f38     08 4E 05 F1 | 	add	fp, #8
20f3c     A7 2A 02 FB | 	rdlong	local03, fp
20f40     08 4E 85 F1 | 	sub	fp, #8
20f44     1F 2A 0E F2 | 	cmp	local03, #31 wz
20f48     14 4E 05 51 |  if_ne	add	fp, #20
20f4c     A7 28 02 5B |  if_ne	rdlong	local02, fp
20f50     14 4E 85 51 |  if_ne	sub	fp, #20
20f54     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20f58     08 4E 05 51 |  if_ne	add	fp, #8
20f5c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20f60     08 4E 85 51 |  if_ne	sub	fp, #8
20f64     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20f68     14 4E 05 51 |  if_ne	add	fp, #20
20f6c     14 4E 85 51 |  if_ne	sub	fp, #20
20f70     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20f74     A7 0C 68 AC |  if_e	wrlong	#6, fp
20f78     08 4E 05 A1 |  if_e	add	fp, #8
20f7c     A7 FE 69 AC |  if_e	wrlong	#255, fp
20f80     08 4E 85 A1 |  if_e	sub	fp, #8
20f84     18 00 90 AD |  if_e	jmp	#LR__2581
20f88     A7 2A 02 FB | 	rdlong	local03, fp
20f8c     0C 4E 05 F1 | 	add	fp, #12
20f90     A7 26 02 FB | 	rdlong	local01, fp
20f94     0C 4E 85 F1 | 	sub	fp, #12
20f98     13 2B 42 F5 | 	or	local03, local01
20f9c     A7 2A 62 FC | 	wrlong	local03, fp
20fa0                 | LR__2581
20fa0     A7 12 02 F6 | 	mov	arg01, fp
20fa4     9C C8 BE FD | 	call	#_push
20fa8     A7 F0 03 F6 | 	mov	ptra, fp
20fac     B2 00 A0 FD | 	call	#popregs_
20fb0                 | _do_or_ret
20fb0     2D 00 64 FD | 	ret
20fb4                 | 
20fb4                 | ' 
20fb4                 | ' '--------------------------------- plus (+)
20fb4                 | ' 
20fb4                 | ' sub do_plus 
20fb4                 | _do_plus
20fb4     05 4A 05 F6 | 	mov	COUNT_, #5
20fb8     A8 00 A0 FD | 	call	#pushregs_
20fbc     18 F0 07 F1 | 	add	ptra, #24
20fc0     E8 C7 BE FD | 	call	#_pop
20fc4     FD 26 02 F6 | 	mov	local01, result1
20fc8     FE 28 02 F6 | 	mov	local02, result2
20fcc     FF 2A 02 F6 | 	mov	local03, result3
20fd0     0C 4E 05 F1 | 	add	fp, #12
20fd4     A7 26 62 FC | 	wrlong	local01, fp
20fd8     04 4E 05 F1 | 	add	fp, #4
20fdc     A7 28 62 FC | 	wrlong	local02, fp
20fe0     04 4E 05 F1 | 	add	fp, #4
20fe4     A7 2A 62 FC | 	wrlong	local03, fp
20fe8     14 4E 85 F1 | 	sub	fp, #20
20fec     BC C7 BE FD | 	call	#_pop
20ff0     FF 2A 02 F6 | 	mov	local03, result3
20ff4     A7 FA 61 FC | 	wrlong	result1, fp
20ff8     04 4E 05 F1 | 	add	fp, #4
20ffc     A7 FC 61 FC | 	wrlong	result2, fp
21000     04 4E 05 F1 | 	add	fp, #4
21004     A7 2A 62 FC | 	wrlong	local03, fp
21008                 | ' 
21008                 | ' t2=pop()
21008                 | ' t1=pop()
21008                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
21008     08 4E 85 F1 | 	sub	fp, #8
2100c     1D 2A 0E F2 | 	cmp	local03, #29 wz
21010     14 4E 05 A1 |  if_e	add	fp, #20
21014     A7 2C 02 AB |  if_e	rdlong	local04, fp
21018     14 4E 85 A1 |  if_e	sub	fp, #20
2101c     16 2B 02 A6 |  if_e	mov	local03, local04
21020     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21024     1C 00 90 5D |  if_ne	jmp	#LR__2590
21028     A7 26 02 FB | 	rdlong	local01, fp
2102c     0C 4E 05 F1 | 	add	fp, #12
21030     A7 28 02 FB | 	rdlong	local02, fp
21034     0C 4E 85 F1 | 	sub	fp, #12
21038     14 27 02 F1 | 	add	local01, local02
2103c     A7 26 62 FC | 	wrlong	local01, fp
21040     48 04 90 FD | 	jmp	#LR__2605
21044                 | LR__2590
21044                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
21044     08 4E 05 F1 | 	add	fp, #8
21048     A7 26 02 FB | 	rdlong	local01, fp
2104c     08 4E 85 F1 | 	sub	fp, #8
21050     1D 26 0E F2 | 	cmp	local01, #29 wz
21054     14 4E 05 A1 |  if_e	add	fp, #20
21058     A7 2C 02 AB |  if_e	rdlong	local04, fp
2105c     14 4E 85 A1 |  if_e	sub	fp, #20
21060     16 2B 02 A6 |  if_e	mov	local03, local04
21064     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21068     28 00 90 5D |  if_ne	jmp	#LR__2591
2106c     A7 26 02 FB | 	rdlong	local01, fp
21070     0C 4E 05 F1 | 	add	fp, #12
21074     A7 28 02 FB | 	rdlong	local02, fp
21078     0C 4E 85 F1 | 	sub	fp, #12
2107c     14 27 02 F1 | 	add	local01, local02
21080     A7 26 62 FC | 	wrlong	local01, fp
21084     08 4E 05 F1 | 	add	fp, #8
21088     A7 38 68 FC | 	wrlong	#28, fp
2108c     08 4E 85 F1 | 	sub	fp, #8
21090     F8 03 90 FD | 	jmp	#LR__2605
21094                 | LR__2591
21094                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
21094     08 4E 05 F1 | 	add	fp, #8
21098     A7 26 02 FB | 	rdlong	local01, fp
2109c     08 4E 85 F1 | 	sub	fp, #8
210a0     1D 26 0E F2 | 	cmp	local01, #29 wz
210a4     14 4E 05 A1 |  if_e	add	fp, #20
210a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
210ac     14 4E 85 A1 |  if_e	sub	fp, #20
210b0     16 2B 02 A6 |  if_e	mov	local03, local04
210b4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
210b8     30 00 90 5D |  if_ne	jmp	#LR__2592
210bc     A7 12 02 FB | 	rdlong	arg01, fp
210c0     6C 8E B0 FD | 	call	#__system___float_fromuns
210c4     FD 12 02 F6 | 	mov	arg01, result1
210c8     0C 4E 05 F1 | 	add	fp, #12
210cc     A7 14 02 FB | 	rdlong	arg02, fp
210d0     0C 4E 85 F1 | 	sub	fp, #12
210d4     8C 8E B0 FD | 	call	#__system___float_add
210d8     A7 FA 61 FC | 	wrlong	result1, fp
210dc     08 4E 05 F1 | 	add	fp, #8
210e0     A7 3C 68 FC | 	wrlong	#30, fp
210e4     08 4E 85 F1 | 	sub	fp, #8
210e8     A0 03 90 FD | 	jmp	#LR__2605
210ec                 | LR__2592
210ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
210ec     08 4E 05 F1 | 	add	fp, #8
210f0     A7 26 02 FB | 	rdlong	local01, fp
210f4     08 4E 85 F1 | 	sub	fp, #8
210f8     1C 26 0E F2 | 	cmp	local01, #28 wz
210fc     14 4E 05 A1 |  if_e	add	fp, #20
21100     A7 2C 02 AB |  if_e	rdlong	local04, fp
21104     14 4E 85 A1 |  if_e	sub	fp, #20
21108     16 2B 02 A6 |  if_e	mov	local03, local04
2110c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21110     1C 00 90 5D |  if_ne	jmp	#LR__2593
21114     A7 26 02 FB | 	rdlong	local01, fp
21118     0C 4E 05 F1 | 	add	fp, #12
2111c     A7 28 02 FB | 	rdlong	local02, fp
21120     0C 4E 85 F1 | 	sub	fp, #12
21124     14 27 02 F1 | 	add	local01, local02
21128     A7 26 62 FC | 	wrlong	local01, fp
2112c     5C 03 90 FD | 	jmp	#LR__2605
21130                 | LR__2593
21130                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
21130     08 4E 05 F1 | 	add	fp, #8
21134     A7 26 02 FB | 	rdlong	local01, fp
21138     08 4E 85 F1 | 	sub	fp, #8
2113c     1C 26 0E F2 | 	cmp	local01, #28 wz
21140     14 4E 05 A1 |  if_e	add	fp, #20
21144     A7 2C 02 AB |  if_e	rdlong	local04, fp
21148     14 4E 85 A1 |  if_e	sub	fp, #20
2114c     16 2B 02 A6 |  if_e	mov	local03, local04
21150     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21154     1C 00 90 5D |  if_ne	jmp	#LR__2594
21158     A7 26 02 FB | 	rdlong	local01, fp
2115c     0C 4E 05 F1 | 	add	fp, #12
21160     A7 28 02 FB | 	rdlong	local02, fp
21164     0C 4E 85 F1 | 	sub	fp, #12
21168     14 27 02 F1 | 	add	local01, local02
2116c     A7 26 62 FC | 	wrlong	local01, fp
21170     18 03 90 FD | 	jmp	#LR__2605
21174                 | LR__2594
21174                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
21174     08 4E 05 F1 | 	add	fp, #8
21178     A7 26 02 FB | 	rdlong	local01, fp
2117c     08 4E 85 F1 | 	sub	fp, #8
21180     1C 26 0E F2 | 	cmp	local01, #28 wz
21184     14 4E 05 A1 |  if_e	add	fp, #20
21188     A7 2C 02 AB |  if_e	rdlong	local04, fp
2118c     14 4E 85 A1 |  if_e	sub	fp, #20
21190     16 2B 02 A6 |  if_e	mov	local03, local04
21194     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21198     40 00 90 5D |  if_ne	jmp	#LR__2595
2119c     A7 12 02 FB | 	rdlong	arg01, fp
211a0     09 13 52 F6 | 	abs	arg01, arg01 wc
211a4     1F 2E C6 C9 |  if_b	decod	local05, #31
211a8     00 2E 06 36 |  if_ae	mov	local05, #0
211ac     80 8D B0 FD | 	call	#__system___float_fromuns
211b0     17 FB 61 F5 | 	xor	result1, local05
211b4     FD 12 02 F6 | 	mov	arg01, result1
211b8     0C 4E 05 F1 | 	add	fp, #12
211bc     A7 14 02 FB | 	rdlong	arg02, fp
211c0     0C 4E 85 F1 | 	sub	fp, #12
211c4     9C 8D B0 FD | 	call	#__system___float_add
211c8     A7 FA 61 FC | 	wrlong	result1, fp
211cc     08 4E 05 F1 | 	add	fp, #8
211d0     A7 3C 68 FC | 	wrlong	#30, fp
211d4     08 4E 85 F1 | 	sub	fp, #8
211d8     B0 02 90 FD | 	jmp	#LR__2605
211dc                 | LR__2595
211dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
211dc     08 4E 05 F1 | 	add	fp, #8
211e0     A7 26 02 FB | 	rdlong	local01, fp
211e4     08 4E 85 F1 | 	sub	fp, #8
211e8     1E 26 0E F2 | 	cmp	local01, #30 wz
211ec     14 4E 05 A1 |  if_e	add	fp, #20
211f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
211f4     14 4E 85 A1 |  if_e	sub	fp, #20
211f8     16 2B 02 A6 |  if_e	mov	local03, local04
211fc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21200     28 00 90 5D |  if_ne	jmp	#LR__2596
21204     A7 26 02 FB | 	rdlong	local01, fp
21208     0C 4E 05 F1 | 	add	fp, #12
2120c     A7 12 02 FB | 	rdlong	arg01, fp
21210     0C 4E 85 F1 | 	sub	fp, #12
21214     18 8D B0 FD | 	call	#__system___float_fromuns
21218     FD 14 02 F6 | 	mov	arg02, result1
2121c     13 13 02 F6 | 	mov	arg01, local01
21220     40 8D B0 FD | 	call	#__system___float_add
21224     A7 FA 61 FC | 	wrlong	result1, fp
21228     60 02 90 FD | 	jmp	#LR__2605
2122c                 | LR__2596
2122c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
2122c     08 4E 05 F1 | 	add	fp, #8
21230     A7 26 02 FB | 	rdlong	local01, fp
21234     08 4E 85 F1 | 	sub	fp, #8
21238     1E 26 0E F2 | 	cmp	local01, #30 wz
2123c     14 4E 05 A1 |  if_e	add	fp, #20
21240     A7 2C 02 AB |  if_e	rdlong	local04, fp
21244     14 4E 85 A1 |  if_e	sub	fp, #20
21248     16 2B 02 A6 |  if_e	mov	local03, local04
2124c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21250     38 00 90 5D |  if_ne	jmp	#LR__2597
21254     A7 26 02 FB | 	rdlong	local01, fp
21258     0C 4E 05 F1 | 	add	fp, #12
2125c     A7 12 02 FB | 	rdlong	arg01, fp
21260     0C 4E 85 F1 | 	sub	fp, #12
21264     09 13 52 F6 | 	abs	arg01, arg01 wc
21268     1F 2E C6 C9 |  if_b	decod	local05, #31
2126c     00 2E 06 36 |  if_ae	mov	local05, #0
21270     BC 8C B0 FD | 	call	#__system___float_fromuns
21274     17 FB 61 F5 | 	xor	result1, local05
21278     FD 14 02 F6 | 	mov	arg02, result1
2127c     13 13 02 F6 | 	mov	arg01, local01
21280     E0 8C B0 FD | 	call	#__system___float_add
21284     A7 FA 61 FC | 	wrlong	result1, fp
21288     00 02 90 FD | 	jmp	#LR__2605
2128c                 | LR__2597
2128c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
2128c     08 4E 05 F1 | 	add	fp, #8
21290     A7 26 02 FB | 	rdlong	local01, fp
21294     08 4E 85 F1 | 	sub	fp, #8
21298     1E 26 0E F2 | 	cmp	local01, #30 wz
2129c     14 4E 05 A1 |  if_e	add	fp, #20
212a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
212a4     14 4E 85 A1 |  if_e	sub	fp, #20
212a8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
212ac     1C 00 90 5D |  if_ne	jmp	#LR__2598
212b0     A7 12 02 FB | 	rdlong	arg01, fp
212b4     0C 4E 05 F1 | 	add	fp, #12
212b8     A7 14 02 FB | 	rdlong	arg02, fp
212bc     0C 4E 85 F1 | 	sub	fp, #12
212c0     A0 8C B0 FD | 	call	#__system___float_add
212c4     A7 FA 61 FC | 	wrlong	result1, fp
212c8     C0 01 90 FD | 	jmp	#LR__2605
212cc                 | LR__2598
212cc                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
212cc     08 4E 05 F1 | 	add	fp, #8
212d0     A7 26 02 FB | 	rdlong	local01, fp
212d4     08 4E 85 F1 | 	sub	fp, #8
212d8     1F 26 0E F2 | 	cmp	local01, #31 wz
212dc     24 00 90 5D |  if_ne	jmp	#LR__2599
212e0     14 4E 05 F1 | 	add	fp, #20
212e4     A7 2A 02 FB | 	rdlong	local03, fp
212e8     14 4E 85 F1 | 	sub	fp, #20
212ec     1F 2A 0E F2 | 	cmp	local03, #31 wz
212f0     A7 04 68 5C |  if_ne	wrlong	#2, fp
212f4     08 4E 05 51 |  if_ne	add	fp, #8
212f8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
212fc     08 4E 85 51 |  if_ne	sub	fp, #8
21300     88 01 90 5D |  if_ne	jmp	#LR__2605
21304                 | LR__2599
21304                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
21304     14 4E 05 F1 | 	add	fp, #20
21308     A7 26 02 FB | 	rdlong	local01, fp
2130c     14 4E 85 F1 | 	sub	fp, #20
21310     1F 26 0E F2 | 	cmp	local01, #31 wz
21314     24 00 90 5D |  if_ne	jmp	#LR__2600
21318     08 4E 05 F1 | 	add	fp, #8
2131c     A7 2A 02 FB | 	rdlong	local03, fp
21320     08 4E 85 F1 | 	sub	fp, #8
21324     1F 2A 0E F2 | 	cmp	local03, #31 wz
21328     A7 04 68 5C |  if_ne	wrlong	#2, fp
2132c     08 4E 05 51 |  if_ne	add	fp, #8
21330     A7 FE 69 5C |  if_ne	wrlong	#255, fp
21334     08 4E 85 51 |  if_ne	sub	fp, #8
21338     50 01 90 5D |  if_ne	jmp	#LR__2605
2133c                 | LR__2600
2133c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
2133c     08 4E 05 F1 | 	add	fp, #8
21340     A7 26 02 FB | 	rdlong	local01, fp
21344     08 4E 85 F1 | 	sub	fp, #8
21348     1F 26 0E F2 | 	cmp	local01, #31 wz
2134c     14 4E 05 A1 |  if_e	add	fp, #20
21350     A7 2A 02 AB |  if_e	rdlong	local03, fp
21354     14 4E 85 A1 |  if_e	sub	fp, #20
21358     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2135c     1C 00 90 5D |  if_ne	jmp	#LR__2601
21360     A7 12 02 FB | 	rdlong	arg01, fp
21364     0C 4E 05 F1 | 	add	fp, #12
21368     A7 14 02 FB | 	rdlong	arg02, fp
2136c     0C 4E 85 F1 | 	sub	fp, #12
21370     A0 61 B0 FD | 	call	#__system___string_concat
21374     A7 FA 61 FC | 	wrlong	result1, fp
21378     10 01 90 FD | 	jmp	#LR__2605
2137c                 | LR__2601
2137c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
2137c     08 4E 05 F1 | 	add	fp, #8
21380     A7 26 02 FB | 	rdlong	local01, fp
21384     08 4E 85 F1 | 	sub	fp, #8
21388     2B 26 0E F2 | 	cmp	local01, #43 wz
2138c     14 4E 05 A1 |  if_e	add	fp, #20
21390     A7 2A 02 AB |  if_e	rdlong	local03, fp
21394     14 4E 85 A1 |  if_e	sub	fp, #20
21398     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2139c     30 00 90 5D |  if_ne	jmp	#LR__2602
213a0     A7 12 02 FB | 	rdlong	arg01, fp
213a4     7C C5 BE FD | 	call	#_convertstring
213a8     FD 12 02 F6 | 	mov	arg01, result1
213ac     0C 4E 05 F1 | 	add	fp, #12
213b0     A7 14 02 FB | 	rdlong	arg02, fp
213b4     0C 4E 85 F1 | 	sub	fp, #12
213b8     58 61 B0 FD | 	call	#__system___string_concat
213bc     A7 FA 61 FC | 	wrlong	result1, fp
213c0     08 4E 05 F1 | 	add	fp, #8
213c4     A7 3E 68 FC | 	wrlong	#31, fp
213c8     08 4E 85 F1 | 	sub	fp, #8
213cc     BC 00 90 FD | 	jmp	#LR__2605
213d0                 | LR__2602
213d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
213d0     08 4E 05 F1 | 	add	fp, #8
213d4     A7 26 02 FB | 	rdlong	local01, fp
213d8     08 4E 85 F1 | 	sub	fp, #8
213dc     1F 26 0E F2 | 	cmp	local01, #31 wz
213e0     14 4E 05 A1 |  if_e	add	fp, #20
213e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
213e8     14 4E 85 A1 |  if_e	sub	fp, #20
213ec     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
213f0     28 00 90 5D |  if_ne	jmp	#LR__2603
213f4     A7 26 02 FB | 	rdlong	local01, fp
213f8     0C 4E 05 F1 | 	add	fp, #12
213fc     A7 12 02 FB | 	rdlong	arg01, fp
21400     0C 4E 85 F1 | 	sub	fp, #12
21404     1C C5 BE FD | 	call	#_convertstring
21408     FD 14 02 F6 | 	mov	arg02, result1
2140c     13 13 02 F6 | 	mov	arg01, local01
21410     00 61 B0 FD | 	call	#__system___string_concat
21414     A7 FA 61 FC | 	wrlong	result1, fp
21418     70 00 90 FD | 	jmp	#LR__2605
2141c                 | LR__2603
2141c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
2141c     08 4E 05 F1 | 	add	fp, #8
21420     A7 26 02 FB | 	rdlong	local01, fp
21424     08 4E 85 F1 | 	sub	fp, #8
21428     2B 26 0E F2 | 	cmp	local01, #43 wz
2142c     14 4E 05 A1 |  if_e	add	fp, #20
21430     A7 2A 02 AB |  if_e	rdlong	local03, fp
21434     14 4E 85 A1 |  if_e	sub	fp, #20
21438     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
2143c     3C 00 90 5D |  if_ne	jmp	#LR__2604
21440     A7 12 02 FB | 	rdlong	arg01, fp
21444     DC C4 BE FD | 	call	#_convertstring
21448     FD 26 02 F6 | 	mov	local01, result1
2144c     0C 4E 05 F1 | 	add	fp, #12
21450     A7 12 02 FB | 	rdlong	arg01, fp
21454     0C 4E 85 F1 | 	sub	fp, #12
21458     C8 C4 BE FD | 	call	#_convertstring
2145c     FD 14 02 F6 | 	mov	arg02, result1
21460     13 13 02 F6 | 	mov	arg01, local01
21464     AC 60 B0 FD | 	call	#__system___string_concat
21468     A7 FA 61 FC | 	wrlong	result1, fp
2146c     08 4E 05 F1 | 	add	fp, #8
21470     A7 3E 68 FC | 	wrlong	#31, fp
21474     08 4E 85 F1 | 	sub	fp, #8
21478     10 00 90 FD | 	jmp	#LR__2605
2147c                 | LR__2604
2147c     A7 08 68 FC | 	wrlong	#4, fp
21480     08 4E 05 F1 | 	add	fp, #8
21484     A7 FE 69 FC | 	wrlong	#255, fp
21488     08 4E 85 F1 | 	sub	fp, #8
2148c                 | LR__2605
2148c     A7 12 02 F6 | 	mov	arg01, fp
21490     B0 C3 BE FD | 	call	#_push
21494     A7 F0 03 F6 | 	mov	ptra, fp
21498     B2 00 A0 FD | 	call	#popregs_
2149c                 | _do_plus_ret
2149c     2D 00 64 FD | 	ret
214a0                 | 
214a0                 | ' 
214a0                 | ' '--------------------------------- power (^)
214a0                 | ' 
214a0                 | ' sub do_power 
214a0                 | _do_power
214a0     02 4A 05 F6 | 	mov	COUNT_, #2
214a4     A8 00 A0 FD | 	call	#pushregs_
214a8     18 F0 07 F1 | 	add	ptra, #24
214ac     FC C2 BE FD | 	call	#_pop
214b0     FD 14 02 F6 | 	mov	arg02, result1
214b4     FE 12 02 F6 | 	mov	arg01, result2
214b8     FF 26 02 F6 | 	mov	local01, result3
214bc     0C 4E 05 F1 | 	add	fp, #12
214c0     A7 14 62 FC | 	wrlong	arg02, fp
214c4     04 4E 05 F1 | 	add	fp, #4
214c8     A7 12 62 FC | 	wrlong	arg01, fp
214cc     04 4E 05 F1 | 	add	fp, #4
214d0     A7 26 62 FC | 	wrlong	local01, fp
214d4     14 4E 85 F1 | 	sub	fp, #20
214d8     D0 C2 BE FD | 	call	#_pop
214dc     A7 FA 61 FC | 	wrlong	result1, fp
214e0     04 4E 05 F1 | 	add	fp, #4
214e4     A7 FC 61 FC | 	wrlong	result2, fp
214e8     04 4E 05 F1 | 	add	fp, #4
214ec     A7 FE 61 FC | 	wrlong	result3, fp
214f0                 | ' 
214f0                 | ' t2=pop()
214f0                 | ' t1=pop()
214f0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
214f0     08 4E 85 F1 | 	sub	fp, #8
214f4     1F FE 0D F2 | 	cmp	result3, #31 wz
214f8     14 4E 05 51 |  if_ne	add	fp, #20
214fc     A7 26 02 5B |  if_ne	rdlong	local01, fp
21500     14 4E 85 51 |  if_ne	sub	fp, #20
21504     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
21508     A7 18 68 AC |  if_e	wrlong	#12, fp
2150c     08 4E 05 A1 |  if_e	add	fp, #8
21510     A7 FE 69 AC |  if_e	wrlong	#255, fp
21514     08 4E 85 A1 |  if_e	sub	fp, #8
21518     38 01 90 AD |  if_e	jmp	#LR__2615
2151c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
2151c     08 4E 05 F1 | 	add	fp, #8
21520     A7 14 02 FB | 	rdlong	arg02, fp
21524     08 4E 85 F1 | 	sub	fp, #8
21528     1C 14 0E F2 | 	cmp	arg02, #28 wz
2152c     28 00 90 5D |  if_ne	jmp	#LR__2610
21530     08 4E 05 F1 | 	add	fp, #8
21534     A7 3C 68 FC | 	wrlong	#30, fp
21538     08 4E 85 F1 | 	sub	fp, #8
2153c     A7 12 02 FB | 	rdlong	arg01, fp
21540     09 13 52 F6 | 	abs	arg01, arg01 wc
21544     1F 28 C6 C9 |  if_b	decod	local02, #31
21548     00 28 06 36 |  if_ae	mov	local02, #0
2154c     E0 89 B0 FD | 	call	#__system___float_fromuns
21550     14 FB 61 F5 | 	xor	result1, local02
21554     A7 FA 61 FC | 	wrlong	result1, fp
21558                 | LR__2610
21558                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
21558     08 4E 05 F1 | 	add	fp, #8
2155c     A7 14 02 FB | 	rdlong	arg02, fp
21560     08 4E 85 F1 | 	sub	fp, #8
21564     1D 14 0E F2 | 	cmp	arg02, #29 wz
21568     18 00 90 5D |  if_ne	jmp	#LR__2611
2156c     08 4E 05 F1 | 	add	fp, #8
21570     A7 3C 68 FC | 	wrlong	#30, fp
21574     08 4E 85 F1 | 	sub	fp, #8
21578     A7 12 02 FB | 	rdlong	arg01, fp
2157c     B0 89 B0 FD | 	call	#__system___float_fromuns
21580     A7 FA 61 FC | 	wrlong	result1, fp
21584                 | LR__2611
21584                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
21584     14 4E 05 F1 | 	add	fp, #20
21588     A7 14 02 FB | 	rdlong	arg02, fp
2158c     14 4E 85 F1 | 	sub	fp, #20
21590     1C 14 0E F2 | 	cmp	arg02, #28 wz
21594     34 00 90 5D |  if_ne	jmp	#LR__2612
21598     14 4E 05 F1 | 	add	fp, #20
2159c     A7 3C 68 FC | 	wrlong	#30, fp
215a0     08 4E 85 F1 | 	sub	fp, #8
215a4     A7 12 02 FB | 	rdlong	arg01, fp
215a8     0C 4E 85 F1 | 	sub	fp, #12
215ac     09 13 52 F6 | 	abs	arg01, arg01 wc
215b0     1F 28 C6 C9 |  if_b	decod	local02, #31
215b4     00 28 06 36 |  if_ae	mov	local02, #0
215b8     74 89 B0 FD | 	call	#__system___float_fromuns
215bc     14 FB 61 F5 | 	xor	result1, local02
215c0     0C 4E 05 F1 | 	add	fp, #12
215c4     A7 FA 61 FC | 	wrlong	result1, fp
215c8     0C 4E 85 F1 | 	sub	fp, #12
215cc                 | LR__2612
215cc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
215cc     14 4E 05 F1 | 	add	fp, #20
215d0     A7 14 02 FB | 	rdlong	arg02, fp
215d4     14 4E 85 F1 | 	sub	fp, #20
215d8     1D 14 0E F2 | 	cmp	arg02, #29 wz
215dc     24 00 90 5D |  if_ne	jmp	#LR__2613
215e0     14 4E 05 F1 | 	add	fp, #20
215e4     A7 3C 68 FC | 	wrlong	#30, fp
215e8     08 4E 85 F1 | 	sub	fp, #8
215ec     A7 12 02 FB | 	rdlong	arg01, fp
215f0     0C 4E 85 F1 | 	sub	fp, #12
215f4     38 89 B0 FD | 	call	#__system___float_fromuns
215f8     0C 4E 05 F1 | 	add	fp, #12
215fc     A7 FA 61 FC | 	wrlong	result1, fp
21600     0C 4E 85 F1 | 	sub	fp, #12
21604                 | LR__2613
21604                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
21604     08 4E 05 F1 | 	add	fp, #8
21608     A7 14 02 FB | 	rdlong	arg02, fp
2160c     08 4E 85 F1 | 	sub	fp, #8
21610     1E 14 0E F2 | 	cmp	arg02, #30 wz
21614     14 4E 05 A1 |  if_e	add	fp, #20
21618     A7 26 02 AB |  if_e	rdlong	local01, fp
2161c     14 4E 85 A1 |  if_e	sub	fp, #20
21620     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
21624     1C 00 90 5D |  if_ne	jmp	#LR__2614
21628     A7 12 02 FB | 	rdlong	arg01, fp
2162c     0C 4E 05 F1 | 	add	fp, #12
21630     A7 14 02 FB | 	rdlong	arg02, fp
21634     0C 4E 85 F1 | 	sub	fp, #12
21638     00 9C B0 FD | 	call	#__system____builtin_powf
2163c     A7 FA 61 FC | 	wrlong	result1, fp
21640     10 00 90 FD | 	jmp	#LR__2615
21644                 | LR__2614
21644     A7 1A 68 FC | 	wrlong	#13, fp
21648     08 4E 05 F1 | 	add	fp, #8
2164c     A7 FE 69 FC | 	wrlong	#255, fp
21650     08 4E 85 F1 | 	sub	fp, #8
21654                 | LR__2615
21654     A7 12 02 F6 | 	mov	arg01, fp
21658     E8 C1 BE FD | 	call	#_push
2165c     A7 F0 03 F6 | 	mov	ptra, fp
21660     B2 00 A0 FD | 	call	#popregs_
21664                 | _do_power_ret
21664     2D 00 64 FD | 	ret
21668                 | 
21668                 | ' 
21668                 | ' '--------------------------------- SHL
21668                 | ' 
21668                 | ' sub do_shl 
21668                 | _do_shl
21668     03 4A 05 F6 | 	mov	COUNT_, #3
2166c     A8 00 A0 FD | 	call	#pushregs_
21670     18 F0 07 F1 | 	add	ptra, #24
21674     34 C1 BE FD | 	call	#_pop
21678     FD 12 02 F6 | 	mov	arg01, result1
2167c     FE 26 02 F6 | 	mov	local01, result2
21680     FF 28 02 F6 | 	mov	local02, result3
21684     0C 4E 05 F1 | 	add	fp, #12
21688     A7 12 62 FC | 	wrlong	arg01, fp
2168c     04 4E 05 F1 | 	add	fp, #4
21690     A7 26 62 FC | 	wrlong	local01, fp
21694     04 4E 05 F1 | 	add	fp, #4
21698     A7 28 62 FC | 	wrlong	local02, fp
2169c     14 4E 85 F1 | 	sub	fp, #20
216a0     08 C1 BE FD | 	call	#_pop
216a4     FF 2A 02 F6 | 	mov	local03, result3
216a8     A7 FA 61 FC | 	wrlong	result1, fp
216ac     04 4E 05 F1 | 	add	fp, #4
216b0     A7 FC 61 FC | 	wrlong	result2, fp
216b4     04 4E 05 F1 | 	add	fp, #4
216b8     A7 2A 62 FC | 	wrlong	local03, fp
216bc                 | ' 
216bc                 | ' t2=pop()
216bc                 | ' t1=pop()
216bc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
216bc     08 4E 85 F1 | 	sub	fp, #8
216c0     1C 2A 0E F2 | 	cmp	local03, #28 wz
216c4     A7 2A 02 AB |  if_e	rdlong	local03, fp
216c8     A7 2A 62 AC |  if_e	wrlong	local03, fp
216cc     08 4E 05 A1 |  if_e	add	fp, #8
216d0     A7 3A 68 AC |  if_e	wrlong	#29, fp
216d4     08 4E 85 A1 |  if_e	sub	fp, #8
216d8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
216d8     14 4E 05 F1 | 	add	fp, #20
216dc     A7 2A 02 FB | 	rdlong	local03, fp
216e0     14 4E 85 F1 | 	sub	fp, #20
216e4     1C 2A 0E F2 | 	cmp	local03, #28 wz
216e8     18 00 90 5D |  if_ne	jmp	#LR__2620
216ec     0C 4E 05 F1 | 	add	fp, #12
216f0     A7 2A 02 FB | 	rdlong	local03, fp
216f4     A7 2A 62 FC | 	wrlong	local03, fp
216f8     08 4E 05 F1 | 	add	fp, #8
216fc     A7 3A 68 FC | 	wrlong	#29, fp
21700     14 4E 85 F1 | 	sub	fp, #20
21704                 | LR__2620
21704                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
21704     08 4E 05 F1 | 	add	fp, #8
21708     A7 2A 02 FB | 	rdlong	local03, fp
2170c     08 4E 85 F1 | 	sub	fp, #8
21710     1F 2A 0E F2 | 	cmp	local03, #31 wz
21714     14 4E 05 51 |  if_ne	add	fp, #20
21718     A7 28 02 5B |  if_ne	rdlong	local02, fp
2171c     14 4E 85 51 |  if_ne	sub	fp, #20
21720     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21724     08 4E 05 51 |  if_ne	add	fp, #8
21728     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2172c     08 4E 85 51 |  if_ne	sub	fp, #8
21730     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21734     14 4E 05 51 |  if_ne	add	fp, #20
21738     14 4E 85 51 |  if_ne	sub	fp, #20
2173c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21740     A7 0C 68 AC |  if_e	wrlong	#6, fp
21744     08 4E 05 A1 |  if_e	add	fp, #8
21748     A7 FE 69 AC |  if_e	wrlong	#255, fp
2174c     08 4E 85 A1 |  if_e	sub	fp, #8
21750     18 00 90 AD |  if_e	jmp	#LR__2621
21754     A7 2A 02 FB | 	rdlong	local03, fp
21758     0C 4E 05 F1 | 	add	fp, #12
2175c     A7 26 02 FB | 	rdlong	local01, fp
21760     0C 4E 85 F1 | 	sub	fp, #12
21764     13 2B 62 F0 | 	shl	local03, local01
21768     A7 2A 62 FC | 	wrlong	local03, fp
2176c                 | LR__2621
2176c     A7 12 02 F6 | 	mov	arg01, fp
21770     D0 C0 BE FD | 	call	#_push
21774     A7 F0 03 F6 | 	mov	ptra, fp
21778     B2 00 A0 FD | 	call	#popregs_
2177c                 | _do_shl_ret
2177c     2D 00 64 FD | 	ret
21780                 | 
21780                 | ' 
21780                 | ' '--------------------------------- SHR
21780                 | ' 
21780                 | ' sub do_shr 
21780                 | _do_shr
21780     03 4A 05 F6 | 	mov	COUNT_, #3
21784     A8 00 A0 FD | 	call	#pushregs_
21788     18 F0 07 F1 | 	add	ptra, #24
2178c     1C C0 BE FD | 	call	#_pop
21790     FD 12 02 F6 | 	mov	arg01, result1
21794     FE 26 02 F6 | 	mov	local01, result2
21798     FF 28 02 F6 | 	mov	local02, result3
2179c     0C 4E 05 F1 | 	add	fp, #12
217a0     A7 12 62 FC | 	wrlong	arg01, fp
217a4     04 4E 05 F1 | 	add	fp, #4
217a8     A7 26 62 FC | 	wrlong	local01, fp
217ac     04 4E 05 F1 | 	add	fp, #4
217b0     A7 28 62 FC | 	wrlong	local02, fp
217b4     14 4E 85 F1 | 	sub	fp, #20
217b8     F0 BF BE FD | 	call	#_pop
217bc     FF 2A 02 F6 | 	mov	local03, result3
217c0     A7 FA 61 FC | 	wrlong	result1, fp
217c4     04 4E 05 F1 | 	add	fp, #4
217c8     A7 FC 61 FC | 	wrlong	result2, fp
217cc     04 4E 05 F1 | 	add	fp, #4
217d0     A7 2A 62 FC | 	wrlong	local03, fp
217d4                 | ' 
217d4                 | ' t2=pop()
217d4                 | ' t1=pop()
217d4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
217d4     08 4E 85 F1 | 	sub	fp, #8
217d8     1C 2A 0E F2 | 	cmp	local03, #28 wz
217dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
217e0     A7 2A 62 AC |  if_e	wrlong	local03, fp
217e4     08 4E 05 A1 |  if_e	add	fp, #8
217e8     A7 3A 68 AC |  if_e	wrlong	#29, fp
217ec     08 4E 85 A1 |  if_e	sub	fp, #8
217f0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
217f0     14 4E 05 F1 | 	add	fp, #20
217f4     A7 2A 02 FB | 	rdlong	local03, fp
217f8     14 4E 85 F1 | 	sub	fp, #20
217fc     1C 2A 0E F2 | 	cmp	local03, #28 wz
21800     18 00 90 5D |  if_ne	jmp	#LR__2630
21804     0C 4E 05 F1 | 	add	fp, #12
21808     A7 2A 02 FB | 	rdlong	local03, fp
2180c     A7 2A 62 FC | 	wrlong	local03, fp
21810     08 4E 05 F1 | 	add	fp, #8
21814     A7 3A 68 FC | 	wrlong	#29, fp
21818     14 4E 85 F1 | 	sub	fp, #20
2181c                 | LR__2630
2181c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
2181c     08 4E 05 F1 | 	add	fp, #8
21820     A7 2A 02 FB | 	rdlong	local03, fp
21824     08 4E 85 F1 | 	sub	fp, #8
21828     1F 2A 0E F2 | 	cmp	local03, #31 wz
2182c     14 4E 05 51 |  if_ne	add	fp, #20
21830     A7 28 02 5B |  if_ne	rdlong	local02, fp
21834     14 4E 85 51 |  if_ne	sub	fp, #20
21838     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
2183c     08 4E 05 51 |  if_ne	add	fp, #8
21840     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21844     08 4E 85 51 |  if_ne	sub	fp, #8
21848     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
2184c     14 4E 05 51 |  if_ne	add	fp, #20
21850     14 4E 85 51 |  if_ne	sub	fp, #20
21854     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21858     A7 0C 68 AC |  if_e	wrlong	#6, fp
2185c     08 4E 05 A1 |  if_e	add	fp, #8
21860     A7 FE 69 AC |  if_e	wrlong	#255, fp
21864     08 4E 85 A1 |  if_e	sub	fp, #8
21868     18 00 90 AD |  if_e	jmp	#LR__2631
2186c     A7 2A 02 FB | 	rdlong	local03, fp
21870     0C 4E 05 F1 | 	add	fp, #12
21874     A7 26 02 FB | 	rdlong	local01, fp
21878     0C 4E 85 F1 | 	sub	fp, #12
2187c     13 2B 42 F0 | 	shr	local03, local01
21880     A7 2A 62 FC | 	wrlong	local03, fp
21884                 | LR__2631
21884     A7 12 02 F6 | 	mov	arg01, fp
21888     B8 BF BE FD | 	call	#_push
2188c     A7 F0 03 F6 | 	mov	ptra, fp
21890     B2 00 A0 FD | 	call	#popregs_
21894                 | _do_shr_ret
21894     2D 00 64 FD | 	ret
21898                 | 
21898                 | ' 
21898                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
21898                 | ' 
21898                 | ' ''----------------------------------------------------------------------------------------------------
21898                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
21898                 | ' ''----------------------------------------------------------------------------------------------------
21898                 | ' 
21898                 | ' ''--------------------------- Command function pointers
21898                 | ' 
21898                 | ' sub init_commands
21898                 | _init_commands
21898                 | ' 
21898                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
21898     00 00 06 F6 | 	mov	_var01, #0
2189c     97 16 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
218a0                 | LR__2640
218a0     00 FB 01 F6 | 	mov	result1, _var01
218a4     02 FA 65 F0 | 	shl	result1, #2
218a8     43 00 00 FF 
218ac     60 E4 05 F1 | 	add	objptr, ##34400
218b0     F2 FA 01 F1 | 	add	result1, objptr
218b4     43 00 00 FF 
218b8     60 E4 85 F1 | 	sub	objptr, ##34400
218bc     FD E4 61 FC | 	wrlong	objptr, result1
218c0     01 00 06 F1 | 	add	_var01, #1
218c4     00 01 56 F2 | 	cmps	_var01, #256 wc
218c8     D4 FF 9F CD |  if_b	jmp	#LR__2640
218cc                 | LR__2641
218cc     F2 FA 01 F6 | 	mov	result1, objptr
218d0     14 FA 25 F4 | 	bith	result1, #20
218d4     43 00 00 FF 
218d8     64 E4 05 F1 | 	add	objptr, ##34404
218dc     F2 FA 61 FC | 	wrlong	result1, objptr
218e0     43 00 00 FF 
218e4     64 E4 85 F1 | 	sub	objptr, ##34404
218e8     F2 FA 01 F6 | 	mov	result1, objptr
218ec     15 FA 25 F4 | 	bith	result1, #21
218f0     43 00 00 FF 
218f4     68 E4 05 F1 | 	add	objptr, ##34408
218f8     F2 FA 61 FC | 	wrlong	result1, objptr
218fc     43 00 00 FF 
21900     68 E4 85 F1 | 	sub	objptr, ##34408
21904     F2 FA 01 F6 | 	mov	result1, objptr
21908     34 FA 25 F4 | 	bith	result1, #52
2190c     43 00 00 FF 
21910     6C E4 05 F1 | 	add	objptr, ##34412
21914     F2 FA 61 FC | 	wrlong	result1, objptr
21918     43 00 00 FF 
2191c     6C E4 85 F1 | 	sub	objptr, ##34412
21920     F2 FA 01 F6 | 	mov	result1, objptr
21924     16 FA 25 F4 | 	bith	result1, #22
21928     43 00 00 FF 
2192c     74 E4 05 F1 | 	add	objptr, ##34420
21930     F2 FA 61 FC | 	wrlong	result1, objptr
21934     43 00 00 FF 
21938     74 E4 85 F1 | 	sub	objptr, ##34420
2193c     F2 FA 01 F6 | 	mov	result1, objptr
21940     00 28 00 FF 
21944     00 FA 45 F5 | 	or	result1, ##5242880
21948     43 00 00 FF 
2194c     78 E4 05 F1 | 	add	objptr, ##34424
21950     F2 FA 61 FC | 	wrlong	result1, objptr
21954     43 00 00 FF 
21958     78 E4 85 F1 | 	sub	objptr, ##34424
2195c     F2 FA 01 F6 | 	mov	result1, objptr
21960     35 FA 25 F4 | 	bith	result1, #53
21964     43 00 00 FF 
21968     7C E4 05 F1 | 	add	objptr, ##34428
2196c     F2 FA 61 FC | 	wrlong	result1, objptr
21970     43 00 00 FF 
21974     7C E4 85 F1 | 	sub	objptr, ##34428
21978     F2 FA 01 F6 | 	mov	result1, objptr
2197c     54 FA 25 F4 | 	bith	result1, #84
21980     43 00 00 FF 
21984     80 E4 05 F1 | 	add	objptr, ##34432
21988     F2 FA 61 FC | 	wrlong	result1, objptr
2198c     43 00 00 FF 
21990     80 E4 85 F1 | 	sub	objptr, ##34432
21994     F2 FA 01 F6 | 	mov	result1, objptr
21998     17 FA 25 F4 | 	bith	result1, #23
2199c     43 00 00 FF 
219a0     84 E4 05 F1 | 	add	objptr, ##34436
219a4     F2 FA 61 FC | 	wrlong	result1, objptr
219a8     43 00 00 FF 
219ac     84 E4 85 F1 | 	sub	objptr, ##34436
219b0     F2 FA 01 F6 | 	mov	result1, objptr
219b4     00 48 00 FF 
219b8     00 FA 45 F5 | 	or	result1, ##9437184
219bc     43 00 00 FF 
219c0     88 E4 05 F1 | 	add	objptr, ##34440
219c4     F2 FA 61 FC | 	wrlong	result1, objptr
219c8     43 00 00 FF 
219cc     88 E4 85 F1 | 	sub	objptr, ##34440
219d0     F2 FA 01 F6 | 	mov	result1, objptr
219d4     00 50 00 FF 
219d8     00 FA 45 F5 | 	or	result1, ##10485760
219dc     43 00 00 FF 
219e0     8C E4 05 F1 | 	add	objptr, ##34444
219e4     F2 FA 61 FC | 	wrlong	result1, objptr
219e8     43 00 00 FF 
219ec     8C E4 85 F1 | 	sub	objptr, ##34444
219f0     F2 FA 01 F6 | 	mov	result1, objptr
219f4     00 58 00 FF 
219f8     00 FA 45 F5 | 	or	result1, ##11534336
219fc     43 00 00 FF 
21a00     90 E4 05 F1 | 	add	objptr, ##34448
21a04     F2 FA 61 FC | 	wrlong	result1, objptr
21a08     43 00 00 FF 
21a0c     90 E4 85 F1 | 	sub	objptr, ##34448
21a10     F2 FA 01 F6 | 	mov	result1, objptr
21a14     36 FA 25 F4 | 	bith	result1, #54
21a18     43 00 00 FF 
21a1c     A4 E4 05 F1 | 	add	objptr, ##34468
21a20     F2 FA 61 FC | 	wrlong	result1, objptr
21a24     43 00 00 FF 
21a28     A4 E4 85 F1 | 	sub	objptr, ##34468
21a2c     F2 FA 01 F6 | 	mov	result1, objptr
21a30     00 68 00 FF 
21a34     00 FA 45 F5 | 	or	result1, ##13631488
21a38     43 00 00 FF 
21a3c     D4 E4 05 F1 | 	add	objptr, ##34516
21a40     F2 FA 61 FC | 	wrlong	result1, objptr
21a44     43 00 00 FF 
21a48     D4 E4 85 F1 | 	sub	objptr, ##34516
21a4c     F2 FA 01 F6 | 	mov	result1, objptr
21a50     00 68 00 FF 
21a54     00 FA 45 F5 | 	or	result1, ##13631488
21a58     43 00 00 FF 
21a5c     D0 E4 05 F1 | 	add	objptr, ##34512
21a60     F2 FA 61 FC | 	wrlong	result1, objptr
21a64     43 00 00 FF 
21a68     D0 E4 85 F1 | 	sub	objptr, ##34512
21a6c     F2 FA 01 F6 | 	mov	result1, objptr
21a70     00 68 00 FF 
21a74     00 FA 45 F5 | 	or	result1, ##13631488
21a78     43 00 00 FF 
21a7c     D8 E4 05 F1 | 	add	objptr, ##34520
21a80     F2 FA 61 FC | 	wrlong	result1, objptr
21a84     43 00 00 FF 
21a88     D8 E4 85 F1 | 	sub	objptr, ##34520
21a8c     F2 FA 01 F6 | 	mov	result1, objptr
21a90     00 68 00 FF 
21a94     00 FA 45 F5 | 	or	result1, ##13631488
21a98     43 00 00 FF 
21a9c     DC E4 05 F1 | 	add	objptr, ##34524
21aa0     F2 FA 61 FC | 	wrlong	result1, objptr
21aa4     43 00 00 FF 
21aa8     DC E4 85 F1 | 	sub	objptr, ##34524
21aac     F2 FA 01 F6 | 	mov	result1, objptr
21ab0     00 68 00 FF 
21ab4     00 FA 45 F5 | 	or	result1, ##13631488
21ab8     43 00 00 FF 
21abc     0C E5 05 F1 | 	add	objptr, ##34572
21ac0     F2 FA 61 FC | 	wrlong	result1, objptr
21ac4     43 00 00 FF 
21ac8     0C E5 85 F1 | 	sub	objptr, ##34572
21acc     F2 FA 01 F6 | 	mov	result1, objptr
21ad0     55 FA 25 F4 | 	bith	result1, #85
21ad4     43 00 00 FF 
21ad8     BC E4 05 F1 | 	add	objptr, ##34492
21adc     F2 FA 61 FC | 	wrlong	result1, objptr
21ae0     43 00 00 FF 
21ae4     BC E4 85 F1 | 	sub	objptr, ##34492
21ae8     F2 FA 01 F6 | 	mov	result1, objptr
21aec     00 68 00 FF 
21af0     00 FA 45 F5 | 	or	result1, ##13631488
21af4     43 00 00 FF 
21af8     10 E5 05 F1 | 	add	objptr, ##34576
21afc     F2 FA 61 FC | 	wrlong	result1, objptr
21b00     43 00 00 FF 
21b04     10 E5 85 F1 | 	sub	objptr, ##34576
21b08     F2 FA 01 F6 | 	mov	result1, objptr
21b0c     00 68 00 FF 
21b10     00 FA 45 F5 | 	or	result1, ##13631488
21b14     43 00 00 FF 
21b18     E0 E4 05 F1 | 	add	objptr, ##34528
21b1c     F2 FA 61 FC | 	wrlong	result1, objptr
21b20     43 00 00 FF 
21b24     E0 E4 85 F1 | 	sub	objptr, ##34528
21b28     F2 FA 01 F6 | 	mov	result1, objptr
21b2c     00 68 00 FF 
21b30     00 FA 45 F5 | 	or	result1, ##13631488
21b34     43 00 00 FF 
21b38     E4 E4 05 F1 | 	add	objptr, ##34532
21b3c     F2 FA 61 FC | 	wrlong	result1, objptr
21b40     43 00 00 FF 
21b44     E4 E4 85 F1 | 	sub	objptr, ##34532
21b48     F2 FA 01 F6 | 	mov	result1, objptr
21b4c     00 68 00 FF 
21b50     00 FA 45 F5 | 	or	result1, ##13631488
21b54     43 00 00 FF 
21b58     E8 E4 05 F1 | 	add	objptr, ##34536
21b5c     F2 FA 61 FC | 	wrlong	result1, objptr
21b60     43 00 00 FF 
21b64     E8 E4 85 F1 | 	sub	objptr, ##34536
21b68     F2 FA 01 F6 | 	mov	result1, objptr
21b6c     74 FA 25 F4 | 	bith	result1, #116
21b70     43 00 00 FF 
21b74     60 E5 05 F1 | 	add	objptr, ##34656
21b78     F2 FA 61 FC | 	wrlong	result1, objptr
21b7c     43 00 00 FF 
21b80     60 E5 85 F1 | 	sub	objptr, ##34656
21b84     F2 FA 01 F6 | 	mov	result1, objptr
21b88     18 FA 25 F4 | 	bith	result1, #24
21b8c     43 00 00 FF 
21b90     64 E5 05 F1 | 	add	objptr, ##34660
21b94     F2 FA 61 FC | 	wrlong	result1, objptr
21b98     43 00 00 FF 
21b9c     64 E5 85 F1 | 	sub	objptr, ##34660
21ba0     F2 FA 01 F6 | 	mov	result1, objptr
21ba4     00 88 00 FF 
21ba8     00 FA 45 F5 | 	or	result1, ##17825792
21bac     43 00 00 FF 
21bb0     68 E5 05 F1 | 	add	objptr, ##34664
21bb4     F2 FA 61 FC | 	wrlong	result1, objptr
21bb8     43 00 00 FF 
21bbc     68 E5 85 F1 | 	sub	objptr, ##34664
21bc0     F2 FA 01 F6 | 	mov	result1, objptr
21bc4     00 90 00 FF 
21bc8     00 FA 45 F5 | 	or	result1, ##18874368
21bcc     43 00 00 FF 
21bd0     6C E5 05 F1 | 	add	objptr, ##34668
21bd4     F2 FA 61 FC | 	wrlong	result1, objptr
21bd8     43 00 00 FF 
21bdc     6C E5 85 F1 | 	sub	objptr, ##34668
21be0     F2 FA 01 F6 | 	mov	result1, objptr
21be4     00 98 00 FF 
21be8     00 FA 45 F5 | 	or	result1, ##19922944
21bec     43 00 00 FF 
21bf0     70 E5 05 F1 | 	add	objptr, ##34672
21bf4     F2 FA 61 FC | 	wrlong	result1, objptr
21bf8     43 00 00 FF 
21bfc     70 E5 85 F1 | 	sub	objptr, ##34672
21c00     F2 FA 01 F6 | 	mov	result1, objptr
21c04     00 A0 00 FF 
21c08     00 FA 45 F5 | 	or	result1, ##20971520
21c0c     43 00 00 FF 
21c10     74 E5 05 F1 | 	add	objptr, ##34676
21c14     F2 FA 61 FC | 	wrlong	result1, objptr
21c18     43 00 00 FF 
21c1c     74 E5 85 F1 | 	sub	objptr, ##34676
21c20     F2 FA 01 F6 | 	mov	result1, objptr
21c24     00 A8 00 FF 
21c28     00 FA 45 F5 | 	or	result1, ##22020096
21c2c     43 00 00 FF 
21c30     78 E5 05 F1 | 	add	objptr, ##34680
21c34     F2 FA 61 FC | 	wrlong	result1, objptr
21c38     43 00 00 FF 
21c3c     78 E5 85 F1 | 	sub	objptr, ##34680
21c40     F2 FA 01 F6 | 	mov	result1, objptr
21c44     00 B0 00 FF 
21c48     00 FA 45 F5 | 	or	result1, ##23068672
21c4c     43 00 00 FF 
21c50     7C E5 05 F1 | 	add	objptr, ##34684
21c54     F2 FA 61 FC | 	wrlong	result1, objptr
21c58     43 00 00 FF 
21c5c     7C E5 85 F1 | 	sub	objptr, ##34684
21c60     F2 FA 01 F6 | 	mov	result1, objptr
21c64     00 B8 00 FF 
21c68     00 FA 45 F5 | 	or	result1, ##24117248
21c6c     43 00 00 FF 
21c70     80 E5 05 F1 | 	add	objptr, ##34688
21c74     F2 FA 61 FC | 	wrlong	result1, objptr
21c78     43 00 00 FF 
21c7c     80 E5 85 F1 | 	sub	objptr, ##34688
21c80     F2 FA 01 F6 | 	mov	result1, objptr
21c84     37 FA 25 F4 | 	bith	result1, #55
21c88     43 00 00 FF 
21c8c     84 E5 05 F1 | 	add	objptr, ##34692
21c90     F2 FA 61 FC | 	wrlong	result1, objptr
21c94     43 00 00 FF 
21c98     84 E5 85 F1 | 	sub	objptr, ##34692
21c9c     F2 FA 01 F6 | 	mov	result1, objptr
21ca0     00 C8 00 FF 
21ca4     00 FA 45 F5 | 	or	result1, ##26214400
21ca8     43 00 00 FF 
21cac     88 E5 05 F1 | 	add	objptr, ##34696
21cb0     F2 FA 61 FC | 	wrlong	result1, objptr
21cb4     43 00 00 FF 
21cb8     88 E5 85 F1 | 	sub	objptr, ##34696
21cbc     F2 FA 01 F6 | 	mov	result1, objptr
21cc0     00 D0 00 FF 
21cc4     00 FA 45 F5 | 	or	result1, ##27262976
21cc8     43 00 00 FF 
21ccc     8C E5 05 F1 | 	add	objptr, ##34700
21cd0     F2 FA 61 FC | 	wrlong	result1, objptr
21cd4     43 00 00 FF 
21cd8     8C E5 85 F1 | 	sub	objptr, ##34700
21cdc     F2 FA 01 F6 | 	mov	result1, objptr
21ce0     00 D8 00 FF 
21ce4     00 FA 45 F5 | 	or	result1, ##28311552
21ce8     43 00 00 FF 
21cec     90 E5 05 F1 | 	add	objptr, ##34704
21cf0     F2 FA 61 FC | 	wrlong	result1, objptr
21cf4     43 00 00 FF 
21cf8     90 E5 85 F1 | 	sub	objptr, ##34704
21cfc     F2 FA 01 F6 | 	mov	result1, objptr
21d00     56 FA 25 F4 | 	bith	result1, #86
21d04     43 00 00 FF 
21d08     94 E5 05 F1 | 	add	objptr, ##34708
21d0c     F2 FA 61 FC | 	wrlong	result1, objptr
21d10     43 00 00 FF 
21d14     94 E5 85 F1 | 	sub	objptr, ##34708
21d18     F2 FA 01 F6 | 	mov	result1, objptr
21d1c     00 E8 00 FF 
21d20     00 FA 45 F5 | 	or	result1, ##30408704
21d24     45 00 00 FF 
21d28     5C E4 05 F1 | 	add	objptr, ##35420
21d2c     F2 FA 61 FC | 	wrlong	result1, objptr
21d30     45 00 00 FF 
21d34     5C E4 85 F1 | 	sub	objptr, ##35420
21d38     F2 FA 01 F6 | 	mov	result1, objptr
21d3c     75 FA 25 F4 | 	bith	result1, #117
21d40     43 00 00 FF 
21d44     98 E5 05 F1 | 	add	objptr, ##34712
21d48     F2 FA 61 FC | 	wrlong	result1, objptr
21d4c     43 00 00 FF 
21d50     98 E5 85 F1 | 	sub	objptr, ##34712
21d54     F2 FA 01 F6 | 	mov	result1, objptr
21d58     94 FA 25 F4 | 	bith	result1, #148
21d5c     43 00 00 FF 
21d60     AC E5 05 F1 | 	add	objptr, ##34732
21d64     F2 FA 61 FC | 	wrlong	result1, objptr
21d68     43 00 00 FF 
21d6c     AC E5 85 F1 | 	sub	objptr, ##34732
21d70     F2 FA 01 F6 | 	mov	result1, objptr
21d74     19 FA 25 F4 | 	bith	result1, #25
21d78     43 00 00 FF 
21d7c     9C E5 05 F1 | 	add	objptr, ##34716
21d80     F2 FA 61 FC | 	wrlong	result1, objptr
21d84     43 00 00 FF 
21d88     9C E5 85 F1 | 	sub	objptr, ##34716
21d8c     F2 FA 01 F6 | 	mov	result1, objptr
21d90     00 08 01 FF 
21d94     00 FA 45 F5 | 	or	result1, ##34603008
21d98     43 00 00 FF 
21d9c     B8 E4 05 F1 | 	add	objptr, ##34488
21da0     F2 FA 61 FC | 	wrlong	result1, objptr
21da4     43 00 00 FF 
21da8     B8 E4 85 F1 | 	sub	objptr, ##34488
21dac     F2 FA 01 F6 | 	mov	result1, objptr
21db0     00 10 01 FF 
21db4     00 FA 45 F5 | 	or	result1, ##35651584
21db8     43 00 00 FF 
21dbc     A4 E5 05 F1 | 	add	objptr, ##34724
21dc0     F2 FA 61 FC | 	wrlong	result1, objptr
21dc4     43 00 00 FF 
21dc8     A4 E5 85 F1 | 	sub	objptr, ##34724
21dcc     F2 FA 01 F6 | 	mov	result1, objptr
21dd0     00 18 01 FF 
21dd4     00 FA 45 F5 | 	or	result1, ##36700160
21dd8     43 00 00 FF 
21ddc     A8 E5 05 F1 | 	add	objptr, ##34728
21de0     F2 FA 61 FC | 	wrlong	result1, objptr
21de4     43 00 00 FF 
21de8     A8 E5 85 F1 | 	sub	objptr, ##34728
21dec     F2 FA 01 F6 | 	mov	result1, objptr
21df0     00 20 01 FF 
21df4     00 FA 45 F5 | 	or	result1, ##37748736
21df8     43 00 00 FF 
21dfc     B4 E5 05 F1 | 	add	objptr, ##34740
21e00     F2 FA 61 FC | 	wrlong	result1, objptr
21e04     43 00 00 FF 
21e08     B4 E5 85 F1 | 	sub	objptr, ##34740
21e0c     F2 FA 01 F6 | 	mov	result1, objptr
21e10     00 28 01 FF 
21e14     00 FA 45 F5 | 	or	result1, ##38797312
21e18     43 00 00 FF 
21e1c     B8 E5 05 F1 | 	add	objptr, ##34744
21e20     F2 FA 61 FC | 	wrlong	result1, objptr
21e24     43 00 00 FF 
21e28     B8 E5 85 F1 | 	sub	objptr, ##34744
21e2c     F2 FA 01 F6 | 	mov	result1, objptr
21e30     00 30 01 FF 
21e34     00 FA 45 F5 | 	or	result1, ##39845888
21e38     43 00 00 FF 
21e3c     BC E5 05 F1 | 	add	objptr, ##34748
21e40     F2 FA 61 FC | 	wrlong	result1, objptr
21e44     43 00 00 FF 
21e48     BC E5 85 F1 | 	sub	objptr, ##34748
21e4c     F2 FA 01 F6 | 	mov	result1, objptr
21e50     00 38 01 FF 
21e54     00 FA 45 F5 | 	or	result1, ##40894464
21e58     43 00 00 FF 
21e5c     C0 E5 05 F1 | 	add	objptr, ##34752
21e60     F2 FA 61 FC | 	wrlong	result1, objptr
21e64     43 00 00 FF 
21e68     C0 E5 85 F1 | 	sub	objptr, ##34752
21e6c     F2 FA 01 F6 | 	mov	result1, objptr
21e70     00 40 01 FF 
21e74     00 FA 45 F5 | 	or	result1, ##41943040
21e78     43 00 00 FF 
21e7c     C8 E5 05 F1 | 	add	objptr, ##34760
21e80     F2 FA 61 FC | 	wrlong	result1, objptr
21e84     43 00 00 FF 
21e88     C8 E5 85 F1 | 	sub	objptr, ##34760
21e8c     F2 FA 01 F6 | 	mov	result1, objptr
21e90     00 08 01 FF 
21e94     00 FA 45 F5 | 	or	result1, ##34603008
21e98     43 00 00 FF 
21e9c     CC E5 05 F1 | 	add	objptr, ##34764
21ea0     F2 FA 61 FC | 	wrlong	result1, objptr
21ea4     43 00 00 FF 
21ea8     CC E5 85 F1 | 	sub	objptr, ##34764
21eac     F2 FA 01 F6 | 	mov	result1, objptr
21eb0     00 48 01 FF 
21eb4     00 FA 45 F5 | 	or	result1, ##42991616
21eb8     43 00 00 FF 
21ebc     CC E4 05 F1 | 	add	objptr, ##34508
21ec0     F2 FA 61 FC | 	wrlong	result1, objptr
21ec4     43 00 00 FF 
21ec8     CC E4 85 F1 | 	sub	objptr, ##34508
21ecc     F2 FA 01 F6 | 	mov	result1, objptr
21ed0     00 50 01 FF 
21ed4     00 FA 45 F5 | 	or	result1, ##44040192
21ed8     43 00 00 FF 
21edc     FC E4 05 F1 | 	add	objptr, ##34556
21ee0     F2 FA 61 FC | 	wrlong	result1, objptr
21ee4     43 00 00 FF 
21ee8     FC E4 85 F1 | 	sub	objptr, ##34556
21eec     F2 FA 01 F6 | 	mov	result1, objptr
21ef0     00 58 01 FF 
21ef4     00 FA 45 F5 | 	or	result1, ##45088768
21ef8     43 00 00 FF 
21efc     F8 E4 05 F1 | 	add	objptr, ##34552
21f00     F2 FA 61 FC | 	wrlong	result1, objptr
21f04     43 00 00 FF 
21f08     F8 E4 85 F1 | 	sub	objptr, ##34552
21f0c     F2 FA 01 F6 | 	mov	result1, objptr
21f10     00 60 01 FF 
21f14     00 FA 45 F5 | 	or	result1, ##46137344
21f18     43 00 00 FF 
21f1c     9C E4 05 F1 | 	add	objptr, ##34460
21f20     F2 FA 61 FC | 	wrlong	result1, objptr
21f24     43 00 00 FF 
21f28     9C E4 85 F1 | 	sub	objptr, ##34460
21f2c     F2 FA 01 F6 | 	mov	result1, objptr
21f30     00 68 01 FF 
21f34     00 FA 45 F5 | 	or	result1, ##47185920
21f38     43 00 00 FF 
21f3c     A0 E4 05 F1 | 	add	objptr, ##34464
21f40     F2 FA 61 FC | 	wrlong	result1, objptr
21f44     43 00 00 FF 
21f48     A0 E4 85 F1 | 	sub	objptr, ##34464
21f4c     F2 FA 01 F6 | 	mov	result1, objptr
21f50     00 70 01 FF 
21f54     00 FA 45 F5 | 	or	result1, ##48234496
21f58     43 00 00 FF 
21f5c     08 E5 05 F1 | 	add	objptr, ##34568
21f60     F2 FA 61 FC | 	wrlong	result1, objptr
21f64     43 00 00 FF 
21f68     08 E5 85 F1 | 	sub	objptr, ##34568
21f6c     F2 FA 01 F6 | 	mov	result1, objptr
21f70     00 78 01 FF 
21f74     00 FA 45 F5 | 	or	result1, ##49283072
21f78     43 00 00 FF 
21f7c     B0 E5 05 F1 | 	add	objptr, ##34736
21f80     F2 FA 61 FC | 	wrlong	result1, objptr
21f84     43 00 00 FF 
21f88     B0 E5 85 F1 | 	sub	objptr, ##34736
21f8c     F2 FA 01 F6 | 	mov	result1, objptr
21f90     38 FA 25 F4 | 	bith	result1, #56
21f94     43 00 00 FF 
21f98     C4 E5 05 F1 | 	add	objptr, ##34756
21f9c     F2 FA 61 FC | 	wrlong	result1, objptr
21fa0     43 00 00 FF 
21fa4     C4 E5 85 F1 | 	sub	objptr, ##34756
21fa8     F2 FA 01 F6 | 	mov	result1, objptr
21fac     00 88 01 FF 
21fb0     00 FA 45 F5 | 	or	result1, ##51380224
21fb4     43 00 00 FF 
21fb8     D0 E5 05 F1 | 	add	objptr, ##34768
21fbc     F2 FA 61 FC | 	wrlong	result1, objptr
21fc0     43 00 00 FF 
21fc4     D0 E5 85 F1 | 	sub	objptr, ##34768
21fc8     F2 FA 01 F6 | 	mov	result1, objptr
21fcc     00 90 01 FF 
21fd0     00 FA 45 F5 | 	or	result1, ##52428800
21fd4     43 00 00 FF 
21fd8     D4 E5 05 F1 | 	add	objptr, ##34772
21fdc     F2 FA 61 FC | 	wrlong	result1, objptr
21fe0     43 00 00 FF 
21fe4     D4 E5 85 F1 | 	sub	objptr, ##34772
21fe8     F2 FA 01 F6 | 	mov	result1, objptr
21fec     00 98 01 FF 
21ff0     00 FA 45 F5 | 	or	result1, ##53477376
21ff4     43 00 00 FF 
21ff8     D8 E5 05 F1 | 	add	objptr, ##34776
21ffc     F2 FA 61 FC | 	wrlong	result1, objptr
22000     43 00 00 FF 
22004     D8 E5 85 F1 | 	sub	objptr, ##34776
22008     F2 FA 01 F6 | 	mov	result1, objptr
2200c     00 A0 01 FF 
22010     00 FA 45 F5 | 	or	result1, ##54525952
22014     43 00 00 FF 
22018     DC E5 05 F1 | 	add	objptr, ##34780
2201c     F2 FA 61 FC | 	wrlong	result1, objptr
22020     43 00 00 FF 
22024     DC E5 85 F1 | 	sub	objptr, ##34780
22028     F2 FA 01 F6 | 	mov	result1, objptr
2202c     00 A8 01 FF 
22030     00 FA 45 F5 | 	or	result1, ##55574528
22034     43 00 00 FF 
22038     E0 E5 05 F1 | 	add	objptr, ##34784
2203c     F2 FA 61 FC | 	wrlong	result1, objptr
22040     43 00 00 FF 
22044     E0 E5 85 F1 | 	sub	objptr, ##34784
22048     F2 FA 01 F6 | 	mov	result1, objptr
2204c     00 B0 01 FF 
22050     00 FA 45 F5 | 	or	result1, ##56623104
22054     43 00 00 FF 
22058     E4 E5 05 F1 | 	add	objptr, ##34788
2205c     F2 FA 61 FC | 	wrlong	result1, objptr
22060     43 00 00 FF 
22064     E4 E5 85 F1 | 	sub	objptr, ##34788
22068     F2 FA 01 F6 | 	mov	result1, objptr
2206c     94 FA 25 F4 | 	bith	result1, #148
22070     43 00 00 FF 
22074     AC E5 05 F1 | 	add	objptr, ##34732
22078     F2 FA 61 FC | 	wrlong	result1, objptr
2207c     43 00 00 FF 
22080     AC E5 85 F1 | 	sub	objptr, ##34732
22084     F2 FA 01 F6 | 	mov	result1, objptr
22088     00 B8 01 FF 
2208c     00 FA 45 F5 | 	or	result1, ##57671680
22090     43 00 00 FF 
22094     EC E5 05 F1 | 	add	objptr, ##34796
22098     F2 FA 61 FC | 	wrlong	result1, objptr
2209c     43 00 00 FF 
220a0     EC E5 85 F1 | 	sub	objptr, ##34796
220a4     F2 FA 01 F6 | 	mov	result1, objptr
220a8     57 FA 25 F4 | 	bith	result1, #87
220ac     43 00 00 FF 
220b0     E8 E5 05 F1 | 	add	objptr, ##34792
220b4     F2 FA 61 FC | 	wrlong	result1, objptr
220b8     43 00 00 FF 
220bc     E8 E5 85 F1 | 	sub	objptr, ##34792
220c0     F2 FA 01 F6 | 	mov	result1, objptr
220c4     00 C8 01 FF 
220c8     00 FA 45 F5 | 	or	result1, ##59768832
220cc     44 00 00 FF 
220d0     00 E4 05 F1 | 	add	objptr, ##34816
220d4     F2 FA 61 FC | 	wrlong	result1, objptr
220d8     44 00 00 FF 
220dc     00 E4 85 F1 | 	sub	objptr, ##34816
220e0     F2 FA 01 F6 | 	mov	result1, objptr
220e4     00 D0 01 FF 
220e8     00 FA 45 F5 | 	or	result1, ##60817408
220ec     44 00 00 FF 
220f0     04 E4 05 F1 | 	add	objptr, ##34820
220f4     F2 FA 61 FC | 	wrlong	result1, objptr
220f8     44 00 00 FF 
220fc     04 E4 85 F1 | 	sub	objptr, ##34820
22100     F2 FA 01 F6 | 	mov	result1, objptr
22104     00 D8 01 FF 
22108     00 FA 45 F5 | 	or	result1, ##61865984
2210c     43 00 00 FF 
22110     F0 E5 05 F1 | 	add	objptr, ##34800
22114     F2 FA 61 FC | 	wrlong	result1, objptr
22118     43 00 00 FF 
2211c     F0 E5 85 F1 | 	sub	objptr, ##34800
22120     F2 FA 01 F6 | 	mov	result1, objptr
22124     76 FA 25 F4 | 	bith	result1, #118
22128     43 00 00 FF 
2212c     F4 E5 05 F1 | 	add	objptr, ##34804
22130     F2 FA 61 FC | 	wrlong	result1, objptr
22134     43 00 00 FF 
22138     F4 E5 85 F1 | 	sub	objptr, ##34804
2213c     F2 FA 01 F6 | 	mov	result1, objptr
22140     00 E8 01 FF 
22144     00 FA 45 F5 | 	or	result1, ##63963136
22148     43 00 00 FF 
2214c     F8 E5 05 F1 | 	add	objptr, ##34808
22150     F2 FA 61 FC | 	wrlong	result1, objptr
22154     43 00 00 FF 
22158     F8 E5 85 F1 | 	sub	objptr, ##34808
2215c     F2 FA 01 F6 | 	mov	result1, objptr
22160     95 FA 25 F4 | 	bith	result1, #149
22164     43 00 00 FF 
22168     FC E5 05 F1 | 	add	objptr, ##34812
2216c     F2 FA 61 FC | 	wrlong	result1, objptr
22170     43 00 00 FF 
22174     FC E5 85 F1 | 	sub	objptr, ##34812
22178     F2 FA 01 F6 | 	mov	result1, objptr
2217c     B4 FA 25 F4 | 	bith	result1, #180
22180     44 00 00 FF 
22184     0C E4 05 F1 | 	add	objptr, ##34828
22188     F2 FA 61 FC | 	wrlong	result1, objptr
2218c     44 00 00 FF 
22190     0C E4 85 F1 | 	sub	objptr, ##34828
22194     F2 FA 01 F6 | 	mov	result1, objptr
22198     1A FA 25 F4 | 	bith	result1, #26
2219c     44 00 00 FF 
221a0     08 E4 05 F1 | 	add	objptr, ##34824
221a4     F2 FA 61 FC | 	wrlong	result1, objptr
221a8     44 00 00 FF 
221ac     08 E4 85 F1 | 	sub	objptr, ##34824
221b0     F2 FA 01 F6 | 	mov	result1, objptr
221b4     00 08 02 FF 
221b8     00 FA 45 F5 | 	or	result1, ##68157440
221bc     44 00 00 FF 
221c0     18 E4 05 F1 | 	add	objptr, ##34840
221c4     F2 FA 61 FC | 	wrlong	result1, objptr
221c8     44 00 00 FF 
221cc     18 E4 85 F1 | 	sub	objptr, ##34840
221d0     F2 FA 01 F6 | 	mov	result1, objptr
221d4     00 10 02 FF 
221d8     00 FA 45 F5 | 	or	result1, ##69206016
221dc     44 00 00 FF 
221e0     14 E4 05 F1 | 	add	objptr, ##34836
221e4     F2 FA 61 FC | 	wrlong	result1, objptr
221e8     44 00 00 FF 
221ec     14 E4 85 F1 | 	sub	objptr, ##34836
221f0     F2 FA 01 F6 | 	mov	result1, objptr
221f4     00 18 02 FF 
221f8     00 FA 45 F5 | 	or	result1, ##70254592
221fc     44 00 00 FF 
22200     10 E4 05 F1 | 	add	objptr, ##34832
22204     F2 FA 61 FC | 	wrlong	result1, objptr
22208     44 00 00 FF 
2220c     10 E4 85 F1 | 	sub	objptr, ##34832
22210     F2 FA 01 F6 | 	mov	result1, objptr
22214     00 20 02 FF 
22218     00 FA 45 F5 | 	or	result1, ##71303168
2221c     44 00 00 FF 
22220     1C E4 05 F1 | 	add	objptr, ##34844
22224     F2 FA 61 FC | 	wrlong	result1, objptr
22228     44 00 00 FF 
2222c     1C E4 85 F1 | 	sub	objptr, ##34844
22230     F2 FA 01 F6 | 	mov	result1, objptr
22234     00 28 02 FF 
22238     00 FA 45 F5 | 	or	result1, ##72351744
2223c     44 00 00 FF 
22240     20 E4 05 F1 | 	add	objptr, ##34848
22244     F2 FA 61 FC | 	wrlong	result1, objptr
22248     44 00 00 FF 
2224c     20 E4 85 F1 | 	sub	objptr, ##34848
22250     F2 FA 01 F6 | 	mov	result1, objptr
22254     00 30 02 FF 
22258     00 FA 45 F5 | 	or	result1, ##73400320
2225c     43 00 00 FF 
22260     B4 E4 05 F1 | 	add	objptr, ##34484
22264     F2 FA 61 FC | 	wrlong	result1, objptr
22268     43 00 00 FF 
2226c     B4 E4 85 F1 | 	sub	objptr, ##34484
22270     F2 FA 01 F6 | 	mov	result1, objptr
22274     00 38 02 FF 
22278     00 FA 45 F5 | 	or	result1, ##74448896
2227c     44 00 00 FF 
22280     38 E4 05 F1 | 	add	objptr, ##34872
22284     F2 FA 61 FC | 	wrlong	result1, objptr
22288     44 00 00 FF 
2228c     38 E4 85 F1 | 	sub	objptr, ##34872
22290     F2 FA 01 F6 | 	mov	result1, objptr
22294     00 40 02 FF 
22298     00 FA 45 F5 | 	or	result1, ##75497472
2229c     44 00 00 FF 
222a0     48 E4 05 F1 | 	add	objptr, ##34888
222a4     F2 FA 61 FC | 	wrlong	result1, objptr
222a8     44 00 00 FF 
222ac     48 E4 85 F1 | 	sub	objptr, ##34888
222b0     F2 FA 01 F6 | 	mov	result1, objptr
222b4     00 48 02 FF 
222b8     00 FA 45 F5 | 	or	result1, ##76546048
222bc     44 00 00 FF 
222c0     4C E4 05 F1 | 	add	objptr, ##34892
222c4     F2 FA 61 FC | 	wrlong	result1, objptr
222c8     44 00 00 FF 
222cc     4C E4 85 F1 | 	sub	objptr, ##34892
222d0     F2 FA 01 F6 | 	mov	result1, objptr
222d4     00 50 02 FF 
222d8     00 FA 45 F5 | 	or	result1, ##77594624
222dc     44 00 00 FF 
222e0     44 E4 05 F1 | 	add	objptr, ##34884
222e4     F2 FA 61 FC | 	wrlong	result1, objptr
222e8     44 00 00 FF 
222ec     44 E4 85 F1 | 	sub	objptr, ##34884
222f0     F2 FA 01 F6 | 	mov	result1, objptr
222f4     00 58 02 FF 
222f8     00 FA 45 F5 | 	or	result1, ##78643200
222fc     44 00 00 FF 
22300     3C E4 05 F1 | 	add	objptr, ##34876
22304     F2 FA 61 FC | 	wrlong	result1, objptr
22308     44 00 00 FF 
2230c     3C E4 85 F1 | 	sub	objptr, ##34876
22310     F2 FA 01 F6 | 	mov	result1, objptr
22314     00 60 02 FF 
22318     00 FA 45 F5 | 	or	result1, ##79691776
2231c     44 00 00 FF 
22320     40 E4 05 F1 | 	add	objptr, ##34880
22324     F2 FA 61 FC | 	wrlong	result1, objptr
22328     44 00 00 FF 
2232c     40 E4 85 F1 | 	sub	objptr, ##34880
22330     F2 FA 01 F6 | 	mov	result1, objptr
22334     00 68 02 FF 
22338     00 FA 45 F5 | 	or	result1, ##80740352
2233c     44 00 00 FF 
22340     50 E4 05 F1 | 	add	objptr, ##34896
22344     F2 FA 61 FC | 	wrlong	result1, objptr
22348     44 00 00 FF 
2234c     50 E4 85 F1 | 	sub	objptr, ##34896
22350     F2 FA 01 F6 | 	mov	result1, objptr
22354     00 70 02 FF 
22358     00 FA 45 F5 | 	or	result1, ##81788928
2235c     44 00 00 FF 
22360     54 E4 05 F1 | 	add	objptr, ##34900
22364     F2 FA 61 FC | 	wrlong	result1, objptr
22368     44 00 00 FF 
2236c     54 E4 85 F1 | 	sub	objptr, ##34900
22370     F2 FA 01 F6 | 	mov	result1, objptr
22374     00 78 02 FF 
22378     00 FA 45 F5 | 	or	result1, ##82837504
2237c     44 00 00 FF 
22380     58 E4 05 F1 | 	add	objptr, ##34904
22384     F2 FA 61 FC | 	wrlong	result1, objptr
22388     44 00 00 FF 
2238c     58 E4 85 F1 | 	sub	objptr, ##34904
22390     F2 FA 01 F6 | 	mov	result1, objptr
22394     00 80 02 FF 
22398     00 FA 45 F5 | 	or	result1, ##83886080
2239c     44 00 00 FF 
223a0     5C E4 05 F1 | 	add	objptr, ##34908
223a4     F2 FA 61 FC | 	wrlong	result1, objptr
223a8     44 00 00 FF 
223ac     5C E4 85 F1 | 	sub	objptr, ##34908
223b0     F2 FA 01 F6 | 	mov	result1, objptr
223b4     00 88 02 FF 
223b8     00 FA 45 F5 | 	or	result1, ##84934656
223bc     44 00 00 FF 
223c0     60 E4 05 F1 | 	add	objptr, ##34912
223c4     F2 FA 61 FC | 	wrlong	result1, objptr
223c8     44 00 00 FF 
223cc     60 E4 85 F1 | 	sub	objptr, ##34912
223d0     F2 FA 01 F6 | 	mov	result1, objptr
223d4     00 90 02 FF 
223d8     00 FA 45 F5 | 	or	result1, ##85983232
223dc     44 00 00 FF 
223e0     64 E4 05 F1 | 	add	objptr, ##34916
223e4     F2 FA 61 FC | 	wrlong	result1, objptr
223e8     44 00 00 FF 
223ec     64 E4 85 F1 | 	sub	objptr, ##34916
223f0     F2 FA 01 F6 | 	mov	result1, objptr
223f4     00 98 02 FF 
223f8     00 FA 45 F5 | 	or	result1, ##87031808
223fc     44 00 00 FF 
22400     68 E4 05 F1 | 	add	objptr, ##34920
22404     F2 FA 61 FC | 	wrlong	result1, objptr
22408     44 00 00 FF 
2240c     68 E4 85 F1 | 	sub	objptr, ##34920
22410     F2 FA 01 F6 | 	mov	result1, objptr
22414     00 A0 02 FF 
22418     00 FA 45 F5 | 	or	result1, ##88080384
2241c     44 00 00 FF 
22420     6C E4 05 F1 | 	add	objptr, ##34924
22424     F2 FA 61 FC | 	wrlong	result1, objptr
22428     44 00 00 FF 
2242c     6C E4 85 F1 | 	sub	objptr, ##34924
22430     F2 FA 01 F6 | 	mov	result1, objptr
22434     00 A8 02 FF 
22438     00 FA 45 F5 | 	or	result1, ##89128960
2243c     44 00 00 FF 
22440     78 E4 05 F1 | 	add	objptr, ##34936
22444     F2 FA 61 FC | 	wrlong	result1, objptr
22448     44 00 00 FF 
2244c     78 E4 85 F1 | 	sub	objptr, ##34936
22450     F2 FA 01 F6 | 	mov	result1, objptr
22454     00 B0 02 FF 
22458     00 FA 45 F5 | 	or	result1, ##90177536
2245c     44 00 00 FF 
22460     70 E4 05 F1 | 	add	objptr, ##34928
22464     F2 FA 61 FC | 	wrlong	result1, objptr
22468     44 00 00 FF 
2246c     70 E4 85 F1 | 	sub	objptr, ##34928
22470     F2 FA 01 F6 | 	mov	result1, objptr
22474     00 B8 02 FF 
22478     00 FA 45 F5 | 	or	result1, ##91226112
2247c     44 00 00 FF 
22480     74 E4 05 F1 | 	add	objptr, ##34932
22484     F2 FA 61 FC | 	wrlong	result1, objptr
22488     44 00 00 FF 
2248c     74 E4 85 F1 | 	sub	objptr, ##34932
22490     F2 FA 01 F6 | 	mov	result1, objptr
22494     00 C0 02 FF 
22498     00 FA 45 F5 | 	or	result1, ##92274688
2249c     44 00 00 FF 
224a0     7C E4 05 F1 | 	add	objptr, ##34940
224a4     F2 FA 61 FC | 	wrlong	result1, objptr
224a8     44 00 00 FF 
224ac     7C E4 85 F1 | 	sub	objptr, ##34940
224b0     F2 FA 01 F6 | 	mov	result1, objptr
224b4     00 C8 02 FF 
224b8     00 FA 45 F5 | 	or	result1, ##93323264
224bc     44 00 00 FF 
224c0     24 E4 05 F1 | 	add	objptr, ##34852
224c4     F2 FA 61 FC | 	wrlong	result1, objptr
224c8     44 00 00 FF 
224cc     24 E4 85 F1 | 	sub	objptr, ##34852
224d0     F2 FA 01 F6 | 	mov	result1, objptr
224d4     00 D0 02 FF 
224d8     00 FA 45 F5 | 	or	result1, ##94371840
224dc     44 00 00 FF 
224e0     2C E4 05 F1 | 	add	objptr, ##34860
224e4     F2 FA 61 FC | 	wrlong	result1, objptr
224e8     44 00 00 FF 
224ec     2C E4 85 F1 | 	sub	objptr, ##34860
224f0     F2 FA 01 F6 | 	mov	result1, objptr
224f4     00 D8 02 FF 
224f8     00 FA 45 F5 | 	or	result1, ##95420416
224fc     44 00 00 FF 
22500     30 E4 05 F1 | 	add	objptr, ##34864
22504     F2 FA 61 FC | 	wrlong	result1, objptr
22508     44 00 00 FF 
2250c     30 E4 85 F1 | 	sub	objptr, ##34864
22510     F2 FA 01 F6 | 	mov	result1, objptr
22514     00 E0 02 FF 
22518     00 FA 45 F5 | 	or	result1, ##96468992
2251c     44 00 00 FF 
22520     80 E4 05 F1 | 	add	objptr, ##34944
22524     F2 FA 61 FC | 	wrlong	result1, objptr
22528     44 00 00 FF 
2252c     80 E4 85 F1 | 	sub	objptr, ##34944
22530     F2 FA 01 F6 | 	mov	result1, objptr
22534     00 E8 02 FF 
22538     00 FA 45 F5 | 	or	result1, ##97517568
2253c     44 00 00 FF 
22540     84 E4 05 F1 | 	add	objptr, ##34948
22544     F2 FA 61 FC | 	wrlong	result1, objptr
22548     44 00 00 FF 
2254c     84 E4 85 F1 | 	sub	objptr, ##34948
22550     F2 FA 01 F6 | 	mov	result1, objptr
22554     00 F0 02 FF 
22558     00 FA 45 F5 | 	or	result1, ##98566144
2255c     44 00 00 FF 
22560     88 E4 05 F1 | 	add	objptr, ##34952
22564     F2 FA 61 FC | 	wrlong	result1, objptr
22568     44 00 00 FF 
2256c     88 E4 85 F1 | 	sub	objptr, ##34952
22570     F2 FA 01 F6 | 	mov	result1, objptr
22574     00 F8 02 FF 
22578     00 FA 45 F5 | 	or	result1, ##99614720
2257c     44 00 00 FF 
22580     34 E4 05 F1 | 	add	objptr, ##34868
22584     F2 FA 61 FC | 	wrlong	result1, objptr
22588     44 00 00 FF 
2258c     34 E4 85 F1 | 	sub	objptr, ##34868
22590     F2 FA 01 F6 | 	mov	result1, objptr
22594     39 FA 25 F4 | 	bith	result1, #57
22598     44 00 00 FF 
2259c     98 E4 05 F1 | 	add	objptr, ##34968
225a0     F2 FA 61 FC | 	wrlong	result1, objptr
225a4     44 00 00 FF 
225a8     98 E4 85 F1 | 	sub	objptr, ##34968
225ac     F2 FA 01 F6 | 	mov	result1, objptr
225b0     00 08 03 FF 
225b4     00 FA 45 F5 | 	or	result1, ##101711872
225b8     44 00 00 FF 
225bc     A0 E4 05 F1 | 	add	objptr, ##34976
225c0     F2 FA 61 FC | 	wrlong	result1, objptr
225c4     44 00 00 FF 
225c8     A0 E4 85 F1 | 	sub	objptr, ##34976
225cc     F2 FA 01 F6 | 	mov	result1, objptr
225d0     00 10 03 FF 
225d4     00 FA 45 F5 | 	or	result1, ##102760448
225d8     44 00 00 FF 
225dc     94 E4 05 F1 | 	add	objptr, ##34964
225e0     F2 FA 61 FC | 	wrlong	result1, objptr
225e4     44 00 00 FF 
225e8     94 E4 85 F1 | 	sub	objptr, ##34964
225ec     F2 FA 01 F6 | 	mov	result1, objptr
225f0     00 18 03 FF 
225f4     00 FA 45 F5 | 	or	result1, ##103809024
225f8     44 00 00 FF 
225fc     90 E4 05 F1 | 	add	objptr, ##34960
22600     F2 FA 61 FC | 	wrlong	result1, objptr
22604     44 00 00 FF 
22608     90 E4 85 F1 | 	sub	objptr, ##34960
2260c     F2 FA 01 F6 | 	mov	result1, objptr
22610     00 20 03 FF 
22614     00 FA 45 F5 | 	or	result1, ##104857600
22618     44 00 00 FF 
2261c     8C E4 05 F1 | 	add	objptr, ##34956
22620     F2 FA 61 FC | 	wrlong	result1, objptr
22624     44 00 00 FF 
22628     8C E4 85 F1 | 	sub	objptr, ##34956
2262c     F2 FA 01 F6 | 	mov	result1, objptr
22630     00 28 03 FF 
22634     00 FA 45 F5 | 	or	result1, ##105906176
22638     44 00 00 FF 
2263c     9C E4 05 F1 | 	add	objptr, ##34972
22640     F2 FA 61 FC | 	wrlong	result1, objptr
22644     44 00 00 FF 
22648     9C E4 85 F1 | 	sub	objptr, ##34972
2264c     F2 FA 01 F6 | 	mov	result1, objptr
22650     00 30 03 FF 
22654     00 FA 45 F5 | 	or	result1, ##106954752
22658     44 00 00 FF 
2265c     A4 E4 05 F1 | 	add	objptr, ##34980
22660     F2 FA 61 FC | 	wrlong	result1, objptr
22664     44 00 00 FF 
22668     A4 E4 85 F1 | 	sub	objptr, ##34980
2266c     F2 FA 01 F6 | 	mov	result1, objptr
22670     00 38 03 FF 
22674     00 FA 45 F5 | 	or	result1, ##108003328
22678     44 00 00 FF 
2267c     A8 E4 05 F1 | 	add	objptr, ##34984
22680     F2 FA 61 FC | 	wrlong	result1, objptr
22684     44 00 00 FF 
22688     A8 E4 85 F1 | 	sub	objptr, ##34984
2268c     F2 FA 01 F6 | 	mov	result1, objptr
22690     00 40 03 FF 
22694     00 FA 45 F5 | 	or	result1, ##109051904
22698     44 00 00 FF 
2269c     AC E4 05 F1 | 	add	objptr, ##34988
226a0     F2 FA 61 FC | 	wrlong	result1, objptr
226a4     44 00 00 FF 
226a8     AC E4 85 F1 | 	sub	objptr, ##34988
226ac     F2 FA 01 F6 | 	mov	result1, objptr
226b0     00 48 03 FF 
226b4     00 FA 45 F5 | 	or	result1, ##110100480
226b8     44 00 00 FF 
226bc     B4 E4 05 F1 | 	add	objptr, ##34996
226c0     F2 FA 61 FC | 	wrlong	result1, objptr
226c4     44 00 00 FF 
226c8     B4 E4 85 F1 | 	sub	objptr, ##34996
226cc     F2 FA 01 F6 | 	mov	result1, objptr
226d0     00 50 03 FF 
226d4     00 FA 45 F5 | 	or	result1, ##111149056
226d8     44 00 00 FF 
226dc     B8 E4 05 F1 | 	add	objptr, ##35000
226e0     F2 FA 61 FC | 	wrlong	result1, objptr
226e4     44 00 00 FF 
226e8     B8 E4 85 F1 | 	sub	objptr, ##35000
226ec     F2 FA 01 F6 | 	mov	result1, objptr
226f0     00 58 03 FF 
226f4     00 FA 45 F5 | 	or	result1, ##112197632
226f8     44 00 00 FF 
226fc     BC E4 05 F1 | 	add	objptr, ##35004
22700     F2 FA 61 FC | 	wrlong	result1, objptr
22704     44 00 00 FF 
22708     BC E4 85 F1 | 	sub	objptr, ##35004
2270c     F2 FA 01 F6 | 	mov	result1, objptr
22710     00 60 03 FF 
22714     00 FA 45 F5 | 	or	result1, ##113246208
22718     44 00 00 FF 
2271c     C0 E4 05 F1 | 	add	objptr, ##35008
22720     F2 FA 61 FC | 	wrlong	result1, objptr
22724     44 00 00 FF 
22728     C0 E4 85 F1 | 	sub	objptr, ##35008
2272c     F2 FA 01 F6 | 	mov	result1, objptr
22730     00 68 03 FF 
22734     00 FA 45 F5 | 	or	result1, ##114294784
22738     44 00 00 FF 
2273c     C4 E4 05 F1 | 	add	objptr, ##35012
22740     F2 FA 61 FC | 	wrlong	result1, objptr
22744     44 00 00 FF 
22748     C4 E4 85 F1 | 	sub	objptr, ##35012
2274c     F2 FA 01 F6 | 	mov	result1, objptr
22750     00 70 03 FF 
22754     00 FA 45 F5 | 	or	result1, ##115343360
22758     44 00 00 FF 
2275c     C8 E4 05 F1 | 	add	objptr, ##35016
22760     F2 FA 61 FC | 	wrlong	result1, objptr
22764     44 00 00 FF 
22768     C8 E4 85 F1 | 	sub	objptr, ##35016
2276c     F2 FA 01 F6 | 	mov	result1, objptr
22770     00 08 01 FF 
22774     00 FA 45 F5 | 	or	result1, ##34603008
22778     44 00 00 FF 
2277c     CC E4 05 F1 | 	add	objptr, ##35020
22780     F2 FA 61 FC | 	wrlong	result1, objptr
22784     44 00 00 FF 
22788     CC E4 85 F1 | 	sub	objptr, ##35020
2278c     F2 FA 01 F6 | 	mov	result1, objptr
22790     00 78 03 FF 
22794     00 FA 45 F5 | 	or	result1, ##116391936
22798     44 00 00 FF 
2279c     D0 E4 05 F1 | 	add	objptr, ##35024
227a0     F2 FA 61 FC | 	wrlong	result1, objptr
227a4     44 00 00 FF 
227a8     D0 E4 85 F1 | 	sub	objptr, ##35024
227ac     F2 FA 01 F6 | 	mov	result1, objptr
227b0     58 FA 25 F4 | 	bith	result1, #88
227b4     44 00 00 FF 
227b8     B0 E4 05 F1 | 	add	objptr, ##34992
227bc     F2 FA 61 FC | 	wrlong	result1, objptr
227c0     44 00 00 FF 
227c4     B0 E4 85 F1 | 	sub	objptr, ##34992
227c8     F2 FA 01 F6 | 	mov	result1, objptr
227cc     00 88 03 FF 
227d0     00 FA 45 F5 | 	or	result1, ##118489088
227d4     43 00 00 FF 
227d8     A8 E4 05 F1 | 	add	objptr, ##34472
227dc     F2 FA 61 FC | 	wrlong	result1, objptr
227e0     43 00 00 FF 
227e4     A8 E4 85 F1 | 	sub	objptr, ##34472
227e8     F2 FA 01 F6 | 	mov	result1, objptr
227ec     00 90 03 FF 
227f0     00 FA 45 F5 | 	or	result1, ##119537664
227f4     44 00 00 FF 
227f8     D4 E4 05 F1 | 	add	objptr, ##35028
227fc     F2 FA 61 FC | 	wrlong	result1, objptr
22800     44 00 00 FF 
22804     D4 E4 85 F1 | 	sub	objptr, ##35028
22808     F2 FA 01 F6 | 	mov	result1, objptr
2280c     00 98 03 FF 
22810     00 FA 45 F5 | 	or	result1, ##120586240
22814     44 00 00 FF 
22818     D8 E4 05 F1 | 	add	objptr, ##35032
2281c     F2 FA 61 FC | 	wrlong	result1, objptr
22820     44 00 00 FF 
22824     D8 E4 85 F1 | 	sub	objptr, ##35032
22828     F2 FA 01 F6 | 	mov	result1, objptr
2282c     00 A0 03 FF 
22830     00 FA 45 F5 | 	or	result1, ##121634816
22834     44 00 00 FF 
22838     EC E4 05 F1 | 	add	objptr, ##35052
2283c     F2 FA 61 FC | 	wrlong	result1, objptr
22840     44 00 00 FF 
22844     EC E4 85 F1 | 	sub	objptr, ##35052
22848     F2 FA 01 F6 | 	mov	result1, objptr
2284c     00 A8 03 FF 
22850     00 FA 45 F5 | 	or	result1, ##122683392
22854     44 00 00 FF 
22858     E8 E4 05 F1 | 	add	objptr, ##35048
2285c     F2 FA 61 FC | 	wrlong	result1, objptr
22860     44 00 00 FF 
22864     E8 E4 85 F1 | 	sub	objptr, ##35048
22868     F2 FA 01 F6 | 	mov	result1, objptr
2286c     00 B0 03 FF 
22870     00 FA 45 F5 | 	or	result1, ##123731968
22874     44 00 00 FF 
22878     E0 E4 05 F1 | 	add	objptr, ##35040
2287c     F2 FA 61 FC | 	wrlong	result1, objptr
22880     44 00 00 FF 
22884     E0 E4 85 F1 | 	sub	objptr, ##35040
22888     F2 FA 01 F6 | 	mov	result1, objptr
2288c     00 B8 03 FF 
22890     00 FA 45 F5 | 	or	result1, ##124780544
22894     44 00 00 FF 
22898     DC E4 05 F1 | 	add	objptr, ##35036
2289c     F2 FA 61 FC | 	wrlong	result1, objptr
228a0     44 00 00 FF 
228a4     DC E4 85 F1 | 	sub	objptr, ##35036
228a8     F2 FA 01 F6 | 	mov	result1, objptr
228ac     77 FA 25 F4 | 	bith	result1, #119
228b0     44 00 00 FF 
228b4     FC E4 05 F1 | 	add	objptr, ##35068
228b8     F2 FA 61 FC | 	wrlong	result1, objptr
228bc     44 00 00 FF 
228c0     FC E4 85 F1 | 	sub	objptr, ##35068
228c4     F2 FA 01 F6 | 	mov	result1, objptr
228c8     00 C8 03 FF 
228cc     00 FA 45 F5 | 	or	result1, ##126877696
228d0     44 00 00 FF 
228d4     F0 E4 05 F1 | 	add	objptr, ##35056
228d8     F2 FA 61 FC | 	wrlong	result1, objptr
228dc     44 00 00 FF 
228e0     F0 E4 85 F1 | 	sub	objptr, ##35056
228e4     F2 FA 01 F6 | 	mov	result1, objptr
228e8     00 D0 03 FF 
228ec     00 FA 45 F5 | 	or	result1, ##127926272
228f0     44 00 00 FF 
228f4     F4 E4 05 F1 | 	add	objptr, ##35060
228f8     F2 FA 61 FC | 	wrlong	result1, objptr
228fc     44 00 00 FF 
22900     F4 E4 85 F1 | 	sub	objptr, ##35060
22904     F2 FA 01 F6 | 	mov	result1, objptr
22908     00 D8 03 FF 
2290c     00 FA 45 F5 | 	or	result1, ##128974848
22910     44 00 00 FF 
22914     F8 E4 05 F1 | 	add	objptr, ##35064
22918     F2 FA 61 FC | 	wrlong	result1, objptr
2291c     44 00 00 FF 
22920     F8 E4 85 F1 | 	sub	objptr, ##35064
22924     F2 FA 01 F6 | 	mov	result1, objptr
22928     96 FA 25 F4 | 	bith	result1, #150
2292c     44 00 00 FF 
22930     00 E5 05 F1 | 	add	objptr, ##35072
22934     F2 FA 61 FC | 	wrlong	result1, objptr
22938     44 00 00 FF 
2293c     00 E5 85 F1 | 	sub	objptr, ##35072
22940     F2 FA 01 F6 | 	mov	result1, objptr
22944     00 E8 03 FF 
22948     00 FA 45 F5 | 	or	result1, ##131072000
2294c     44 00 00 FF 
22950     04 E5 05 F1 | 	add	objptr, ##35076
22954     F2 FA 61 FC | 	wrlong	result1, objptr
22958     44 00 00 FF 
2295c     04 E5 85 F1 | 	sub	objptr, ##35076
22960     F2 FA 01 F6 | 	mov	result1, objptr
22964     B5 FA 25 F4 | 	bith	result1, #181
22968     44 00 00 FF 
2296c     08 E5 05 F1 | 	add	objptr, ##35080
22970     F2 FA 61 FC | 	wrlong	result1, objptr
22974     44 00 00 FF 
22978     08 E5 85 F1 | 	sub	objptr, ##35080
2297c     F2 FA 01 F6 | 	mov	result1, objptr
22980     D4 FA 25 F4 | 	bith	result1, #212
22984     44 00 00 FF 
22988     0C E5 05 F1 | 	add	objptr, ##35084
2298c     F2 FA 61 FC | 	wrlong	result1, objptr
22990     44 00 00 FF 
22994     0C E5 85 F1 | 	sub	objptr, ##35084
22998     F2 FA 01 F6 | 	mov	result1, objptr
2299c     1B FA 25 F4 | 	bith	result1, #27
229a0     44 00 00 FF 
229a4     10 E5 05 F1 | 	add	objptr, ##35088
229a8     F2 FA 61 FC | 	wrlong	result1, objptr
229ac     44 00 00 FF 
229b0     10 E5 85 F1 | 	sub	objptr, ##35088
229b4     F2 FA 01 F6 | 	mov	result1, objptr
229b8     00 08 04 FF 
229bc     00 FA 45 F5 | 	or	result1, ##135266304
229c0     44 00 00 FF 
229c4     14 E5 05 F1 | 	add	objptr, ##35092
229c8     F2 FA 61 FC | 	wrlong	result1, objptr
229cc     44 00 00 FF 
229d0     14 E5 85 F1 | 	sub	objptr, ##35092
229d4     F2 FA 01 F6 | 	mov	result1, objptr
229d8     00 10 04 FF 
229dc     00 FA 45 F5 | 	or	result1, ##136314880
229e0     44 00 00 FF 
229e4     1C E5 05 F1 | 	add	objptr, ##35100
229e8     F2 FA 61 FC | 	wrlong	result1, objptr
229ec     44 00 00 FF 
229f0     1C E5 85 F1 | 	sub	objptr, ##35100
229f4     F2 FA 01 F6 | 	mov	result1, objptr
229f8     00 18 04 FF 
229fc     00 FA 45 F5 | 	or	result1, ##137363456
22a00     44 00 00 FF 
22a04     20 E5 05 F1 | 	add	objptr, ##35104
22a08     F2 FA 61 FC | 	wrlong	result1, objptr
22a0c     44 00 00 FF 
22a10     20 E5 85 F1 | 	sub	objptr, ##35104
22a14     F2 FA 01 F6 | 	mov	result1, objptr
22a18     00 20 04 FF 
22a1c     00 FA 45 F5 | 	or	result1, ##138412032
22a20     44 00 00 FF 
22a24     24 E5 05 F1 | 	add	objptr, ##35108
22a28     F2 FA 61 FC | 	wrlong	result1, objptr
22a2c     44 00 00 FF 
22a30     24 E5 85 F1 | 	sub	objptr, ##35108
22a34     F2 FA 01 F6 | 	mov	result1, objptr
22a38     00 28 04 FF 
22a3c     00 FA 45 F5 | 	or	result1, ##139460608
22a40     44 00 00 FF 
22a44     18 E5 05 F1 | 	add	objptr, ##35096
22a48     F2 FA 61 FC | 	wrlong	result1, objptr
22a4c     44 00 00 FF 
22a50     18 E5 85 F1 | 	sub	objptr, ##35096
22a54     F2 FA 01 F6 | 	mov	result1, objptr
22a58     00 30 04 FF 
22a5c     00 FA 45 F5 | 	or	result1, ##140509184
22a60     44 00 00 FF 
22a64     28 E5 05 F1 | 	add	objptr, ##35112
22a68     F2 FA 61 FC | 	wrlong	result1, objptr
22a6c     44 00 00 FF 
22a70     28 E5 85 F1 | 	sub	objptr, ##35112
22a74     F2 FA 01 F6 | 	mov	result1, objptr
22a78     00 38 04 FF 
22a7c     00 FA 45 F5 | 	or	result1, ##141557760
22a80     44 00 00 FF 
22a84     5C E5 05 F1 | 	add	objptr, ##35164
22a88     F2 FA 61 FC | 	wrlong	result1, objptr
22a8c     44 00 00 FF 
22a90     5C E5 85 F1 | 	sub	objptr, ##35164
22a94     F2 FA 01 F6 | 	mov	result1, objptr
22a98     00 40 04 FF 
22a9c     00 FA 45 F5 | 	or	result1, ##142606336
22aa0     44 00 00 FF 
22aa4     54 E5 05 F1 | 	add	objptr, ##35156
22aa8     F2 FA 61 FC | 	wrlong	result1, objptr
22aac     44 00 00 FF 
22ab0     54 E5 85 F1 | 	sub	objptr, ##35156
22ab4     F2 FA 01 F6 | 	mov	result1, objptr
22ab8     00 48 04 FF 
22abc     00 FA 45 F5 | 	or	result1, ##143654912
22ac0     44 00 00 FF 
22ac4     2C E5 05 F1 | 	add	objptr, ##35116
22ac8     F2 FA 61 FC | 	wrlong	result1, objptr
22acc     44 00 00 FF 
22ad0     2C E5 85 F1 | 	sub	objptr, ##35116
22ad4     F2 FA 01 F6 | 	mov	result1, objptr
22ad8     00 50 04 FF 
22adc     00 FA 45 F5 | 	or	result1, ##144703488
22ae0     44 00 00 FF 
22ae4     30 E5 05 F1 | 	add	objptr, ##35120
22ae8     F2 FA 61 FC | 	wrlong	result1, objptr
22aec     44 00 00 FF 
22af0     30 E5 85 F1 | 	sub	objptr, ##35120
22af4     F2 FA 01 F6 | 	mov	result1, objptr
22af8     00 58 04 FF 
22afc     00 FA 45 F5 | 	or	result1, ##145752064
22b00     44 00 00 FF 
22b04     4C E5 05 F1 | 	add	objptr, ##35148
22b08     F2 FA 61 FC | 	wrlong	result1, objptr
22b0c     44 00 00 FF 
22b10     4C E5 85 F1 | 	sub	objptr, ##35148
22b14     F2 FA 01 F6 | 	mov	result1, objptr
22b18     00 60 04 FF 
22b1c     00 FA 45 F5 | 	or	result1, ##146800640
22b20     44 00 00 FF 
22b24     50 E5 05 F1 | 	add	objptr, ##35152
22b28     F2 FA 61 FC | 	wrlong	result1, objptr
22b2c     44 00 00 FF 
22b30     50 E5 85 F1 | 	sub	objptr, ##35152
22b34     F2 FA 01 F6 | 	mov	result1, objptr
22b38     00 68 04 FF 
22b3c     00 FA 45 F5 | 	or	result1, ##147849216
22b40     44 00 00 FF 
22b44     6C E5 05 F1 | 	add	objptr, ##35180
22b48     F2 FA 61 FC | 	wrlong	result1, objptr
22b4c     44 00 00 FF 
22b50     6C E5 85 F1 | 	sub	objptr, ##35180
22b54     F2 FA 01 F6 | 	mov	result1, objptr
22b58     00 70 04 FF 
22b5c     00 FA 45 F5 | 	or	result1, ##148897792
22b60     44 00 00 FF 
22b64     68 E5 05 F1 | 	add	objptr, ##35176
22b68     F2 FA 61 FC | 	wrlong	result1, objptr
22b6c     44 00 00 FF 
22b70     68 E5 85 F1 | 	sub	objptr, ##35176
22b74     F2 FA 01 F6 | 	mov	result1, objptr
22b78     00 78 04 FF 
22b7c     00 FA 45 F5 | 	or	result1, ##149946368
22b80     44 00 00 FF 
22b84     78 E5 05 F1 | 	add	objptr, ##35192
22b88     F2 FA 61 FC | 	wrlong	result1, objptr
22b8c     44 00 00 FF 
22b90     78 E5 85 F1 | 	sub	objptr, ##35192
22b94     F2 FA 01 F6 | 	mov	result1, objptr
22b98     00 80 04 FF 
22b9c     00 FA 45 F5 | 	or	result1, ##150994944
22ba0     44 00 00 FF 
22ba4     44 E5 05 F1 | 	add	objptr, ##35140
22ba8     F2 FA 61 FC | 	wrlong	result1, objptr
22bac     44 00 00 FF 
22bb0     44 E5 85 F1 | 	sub	objptr, ##35140
22bb4     F2 FA 01 F6 | 	mov	result1, objptr
22bb8     00 88 04 FF 
22bbc     00 FA 45 F5 | 	or	result1, ##152043520
22bc0     44 00 00 FF 
22bc4     74 E5 05 F1 | 	add	objptr, ##35188
22bc8     F2 FA 61 FC | 	wrlong	result1, objptr
22bcc     44 00 00 FF 
22bd0     74 E5 85 F1 | 	sub	objptr, ##35188
22bd4     F2 FA 01 F6 | 	mov	result1, objptr
22bd8     00 90 04 FF 
22bdc     00 FA 45 F5 | 	or	result1, ##153092096
22be0     44 00 00 FF 
22be4     64 E5 05 F1 | 	add	objptr, ##35172
22be8     F2 FA 61 FC | 	wrlong	result1, objptr
22bec     44 00 00 FF 
22bf0     64 E5 85 F1 | 	sub	objptr, ##35172
22bf4     F2 FA 01 F6 | 	mov	result1, objptr
22bf8     00 98 04 FF 
22bfc     00 FA 45 F5 | 	or	result1, ##154140672
22c00     43 00 00 FF 
22c04     14 E5 05 F1 | 	add	objptr, ##34580
22c08     F2 FA 61 FC | 	wrlong	result1, objptr
22c0c     43 00 00 FF 
22c10     14 E5 85 F1 | 	sub	objptr, ##34580
22c14     F2 FA 01 F6 | 	mov	result1, objptr
22c18     00 A0 04 FF 
22c1c     00 FA 45 F5 | 	or	result1, ##155189248
22c20     44 00 00 FF 
22c24     34 E5 05 F1 | 	add	objptr, ##35124
22c28     F2 FA 61 FC | 	wrlong	result1, objptr
22c2c     44 00 00 FF 
22c30     34 E5 85 F1 | 	sub	objptr, ##35124
22c34     F2 FA 01 F6 | 	mov	result1, objptr
22c38     00 08 01 FF 
22c3c     00 FA 45 F5 | 	or	result1, ##34603008
22c40     44 00 00 FF 
22c44     3C E5 05 F1 | 	add	objptr, ##35132
22c48     F2 FA 61 FC | 	wrlong	result1, objptr
22c4c     44 00 00 FF 
22c50     3C E5 85 F1 | 	sub	objptr, ##35132
22c54     F2 FA 01 F6 | 	mov	result1, objptr
22c58     00 A8 04 FF 
22c5c     00 FA 45 F5 | 	or	result1, ##156237824
22c60     44 00 00 FF 
22c64     38 E5 05 F1 | 	add	objptr, ##35128
22c68     F2 FA 61 FC | 	wrlong	result1, objptr
22c6c     44 00 00 FF 
22c70     38 E5 85 F1 | 	sub	objptr, ##35128
22c74     F2 FA 01 F6 | 	mov	result1, objptr
22c78     00 B0 04 FF 
22c7c     00 FA 45 F5 | 	or	result1, ##157286400
22c80     44 00 00 FF 
22c84     7C E5 05 F1 | 	add	objptr, ##35196
22c88     F2 FA 61 FC | 	wrlong	result1, objptr
22c8c     44 00 00 FF 
22c90     7C E5 85 F1 | 	sub	objptr, ##35196
22c94     F2 FA 01 F6 | 	mov	result1, objptr
22c98     00 B8 04 FF 
22c9c     00 FA 45 F5 | 	or	result1, ##158334976
22ca0     44 00 00 FF 
22ca4     80 E5 05 F1 | 	add	objptr, ##35200
22ca8     F2 FA 61 FC | 	wrlong	result1, objptr
22cac     44 00 00 FF 
22cb0     80 E5 85 F1 | 	sub	objptr, ##35200
22cb4     F2 FA 01 F6 | 	mov	result1, objptr
22cb8     00 C0 04 FF 
22cbc     00 FA 45 F5 | 	or	result1, ##159383552
22cc0     44 00 00 FF 
22cc4     84 E5 05 F1 | 	add	objptr, ##35204
22cc8     F2 FA 61 FC | 	wrlong	result1, objptr
22ccc     44 00 00 FF 
22cd0     84 E5 85 F1 | 	sub	objptr, ##35204
22cd4     F2 FA 01 F6 | 	mov	result1, objptr
22cd8     00 C8 04 FF 
22cdc     00 FA 45 F5 | 	or	result1, ##160432128
22ce0     44 00 00 FF 
22ce4     88 E5 05 F1 | 	add	objptr, ##35208
22ce8     F2 FA 61 FC | 	wrlong	result1, objptr
22cec     44 00 00 FF 
22cf0     88 E5 85 F1 | 	sub	objptr, ##35208
22cf4     F2 FA 01 F6 | 	mov	result1, objptr
22cf8     00 D0 04 FF 
22cfc     00 FA 45 F5 | 	or	result1, ##161480704
22d00     44 00 00 FF 
22d04     90 E5 05 F1 | 	add	objptr, ##35216
22d08     F2 FA 61 FC | 	wrlong	result1, objptr
22d0c     44 00 00 FF 
22d10     90 E5 85 F1 | 	sub	objptr, ##35216
22d14     F2 FA 01 F6 | 	mov	result1, objptr
22d18     00 D8 04 FF 
22d1c     00 FA 45 F5 | 	or	result1, ##162529280
22d20     44 00 00 FF 
22d24     94 E5 05 F1 | 	add	objptr, ##35220
22d28     F2 FA 61 FC | 	wrlong	result1, objptr
22d2c     44 00 00 FF 
22d30     94 E5 85 F1 | 	sub	objptr, ##35220
22d34     F2 FA 01 F6 | 	mov	result1, objptr
22d38     00 E0 04 FF 
22d3c     00 FA 45 F5 | 	or	result1, ##163577856
22d40     44 00 00 FF 
22d44     98 E5 05 F1 | 	add	objptr, ##35224
22d48     F2 FA 61 FC | 	wrlong	result1, objptr
22d4c     44 00 00 FF 
22d50     98 E5 85 F1 | 	sub	objptr, ##35224
22d54     F2 FA 01 F6 | 	mov	result1, objptr
22d58     00 E8 04 FF 
22d5c     00 FA 45 F5 | 	or	result1, ##164626432
22d60     44 00 00 FF 
22d64     B8 E5 05 F1 | 	add	objptr, ##35256
22d68     F2 FA 61 FC | 	wrlong	result1, objptr
22d6c     44 00 00 FF 
22d70     B8 E5 85 F1 | 	sub	objptr, ##35256
22d74     F2 FA 01 F6 | 	mov	result1, objptr
22d78     00 F0 04 FF 
22d7c     00 FA 45 F5 | 	or	result1, ##165675008
22d80     44 00 00 FF 
22d84     B4 E5 05 F1 | 	add	objptr, ##35252
22d88     F2 FA 61 FC | 	wrlong	result1, objptr
22d8c     44 00 00 FF 
22d90     B4 E5 85 F1 | 	sub	objptr, ##35252
22d94     F2 FA 01 F6 | 	mov	result1, objptr
22d98     00 F8 04 FF 
22d9c     00 FA 45 F5 | 	or	result1, ##166723584
22da0     44 00 00 FF 
22da4     70 E5 05 F1 | 	add	objptr, ##35184
22da8     F2 FA 61 FC | 	wrlong	result1, objptr
22dac     44 00 00 FF 
22db0     70 E5 85 F1 | 	sub	objptr, ##35184
22db4     F2 FA 01 F6 | 	mov	result1, objptr
22db8     00 00 05 FF 
22dbc     00 FA 45 F5 | 	or	result1, ##167772160
22dc0     44 00 00 FF 
22dc4     60 E5 05 F1 | 	add	objptr, ##35168
22dc8     F2 FA 61 FC | 	wrlong	result1, objptr
22dcc     44 00 00 FF 
22dd0     60 E5 85 F1 | 	sub	objptr, ##35168
22dd4     F2 FA 01 F6 | 	mov	result1, objptr
22dd8     00 08 05 FF 
22ddc     00 FA 45 F5 | 	or	result1, ##168820736
22de0     44 00 00 FF 
22de4     9C E5 05 F1 | 	add	objptr, ##35228
22de8     F2 FA 61 FC | 	wrlong	result1, objptr
22dec     44 00 00 FF 
22df0     9C E5 85 F1 | 	sub	objptr, ##35228
22df4     F2 FA 01 F6 | 	mov	result1, objptr
22df8     00 10 05 FF 
22dfc     00 FA 45 F5 | 	or	result1, ##169869312
22e00     44 00 00 FF 
22e04     A0 E5 05 F1 | 	add	objptr, ##35232
22e08     F2 FA 61 FC | 	wrlong	result1, objptr
22e0c     44 00 00 FF 
22e10     A0 E5 85 F1 | 	sub	objptr, ##35232
22e14     F2 FA 01 F6 | 	mov	result1, objptr
22e18     00 18 05 FF 
22e1c     00 FA 45 F5 | 	or	result1, ##170917888
22e20     44 00 00 FF 
22e24     A4 E5 05 F1 | 	add	objptr, ##35236
22e28     F2 FA 61 FC | 	wrlong	result1, objptr
22e2c     44 00 00 FF 
22e30     A4 E5 85 F1 | 	sub	objptr, ##35236
22e34     F2 FA 01 F6 | 	mov	result1, objptr
22e38     00 20 05 FF 
22e3c     00 FA 45 F5 | 	or	result1, ##171966464
22e40     44 00 00 FF 
22e44     A8 E5 05 F1 | 	add	objptr, ##35240
22e48     F2 FA 61 FC | 	wrlong	result1, objptr
22e4c     44 00 00 FF 
22e50     A8 E5 85 F1 | 	sub	objptr, ##35240
22e54     F2 FA 01 F6 | 	mov	result1, objptr
22e58     00 28 05 FF 
22e5c     00 FA 45 F5 | 	or	result1, ##173015040
22e60     44 00 00 FF 
22e64     AC E5 05 F1 | 	add	objptr, ##35244
22e68     F2 FA 61 FC | 	wrlong	result1, objptr
22e6c     44 00 00 FF 
22e70     AC E5 85 F1 | 	sub	objptr, ##35244
22e74     F2 FA 01 F6 | 	mov	result1, objptr
22e78     00 30 05 FF 
22e7c     00 FA 45 F5 | 	or	result1, ##174063616
22e80     44 00 00 FF 
22e84     B0 E5 05 F1 | 	add	objptr, ##35248
22e88     F2 FA 61 FC | 	wrlong	result1, objptr
22e8c     44 00 00 FF 
22e90     B0 E5 85 F1 | 	sub	objptr, ##35248
22e94                 | _init_commands_ret
22e94     2D 00 64 FD | 	ret
22e98                 | 
22e98                 | ' 
22e98                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
22e98                 | ' 
22e98                 | ' sub init_audio
22e98                 | _init_audio
22e98     06 4A 05 F6 | 	mov	COUNT_, #6
22e9c     A8 00 A0 FD | 	call	#pushregs_
22ea0     00 C0 1F FF 
22ea4     00 26 06 F6 | 	mov	local01, ##1065353216
22ea8                 | ' 
22ea8                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
22ea8     00 28 06 F6 | 	mov	local02, #0
22eac                 | LR__2650
22eac     14 2B 02 F6 | 	mov	local03, local02
22eb0     01 2A 66 F0 | 	shl	local03, #1
22eb4     58 7F 23 FF 
22eb8     00 2C 06 F6 | 	mov	local04, ##1191096320
22ebc     14 13 52 F6 | 	abs	arg01, local02 wc
22ec0     1F 2E C6 C9 |  if_b	decod	local05, #31
22ec4     00 2E 06 36 |  if_ae	mov	local05, #0
22ec8     64 70 B0 FD | 	call	#__system___float_fromuns
22ecc     17 FB 61 F5 | 	xor	result1, local05
22ed0     FD 12 02 F6 | 	mov	arg01, result1
22ed4     87 24 20 FF 
22ed8     DB 15 06 F6 | 	mov	arg02, ##1078530011
22edc     54 74 B0 FD | 	call	#__system___float_mul
22ee0     FD 12 02 F6 | 	mov	arg01, result1
22ee4     00 00 22 FF 
22ee8     00 14 06 F6 | 	mov	arg02, ##1140850688
22eec     48 76 B0 FD | 	call	#__system___float_div
22ef0     FD 12 02 F6 | 	mov	arg01, result1
22ef4     9C 7D B0 FD | 	call	#__system____builtin_sinf
22ef8     FD 14 02 F6 | 	mov	arg02, result1
22efc     16 13 02 F6 | 	mov	arg01, local04
22f00     30 74 B0 FD | 	call	#__system___float_mul
22f04     FD 12 02 F6 | 	mov	arg01, result1
22f08     01 14 06 F6 | 	mov	arg02, #1
22f0c     EC 78 B0 FD | 	call	#__system___float_tointeger
22f10     FD 14 02 F6 | 	mov	arg02, result1
22f14     15 13 02 F6 | 	mov	arg01, local03
22f18     6C 0D B0 FD | 	call	#_psdpoke
22f1c     01 28 06 F1 | 	add	local02, #1
22f20     02 00 00 FF 
22f24     00 28 56 F2 | 	cmps	local02, ##1024 wc
22f28     80 FF 9F CD |  if_b	jmp	#LR__2650
22f2c                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
22f2c     00 28 06 F6 | 	mov	local02, #0
22f30                 | LR__2651
22f30     14 15 02 F6 | 	mov	arg02, local02
22f34     01 14 66 F0 | 	shl	arg02, #1
22f38     0B 12 C6 F9 | 	decod	arg01, #11
22f3c     0A 13 02 F1 | 	add	arg01, arg02
22f40     14 2D 02 F6 | 	mov	local04, local02
22f44     07 2C 66 F0 | 	shl	local04, #7
22f48     14 2D 82 F1 | 	sub	local04, local02
22f4c     C0 FF 7F FF 
22f50     00 15 06 F6 | 	mov	arg02, ##-32512
22f54     16 15 02 F1 | 	add	arg02, local04
22f58     2C 0D B0 FD | 	call	#_psdpoke
22f5c     09 2C C6 F9 | 	decod	local04, #9
22f60     14 2D 02 F1 | 	add	local04, local02
22f64     01 2C 66 F0 | 	shl	local04, #1
22f68     0B 12 C6 F9 | 	decod	arg01, #11
22f6c     16 13 02 F1 | 	add	arg01, local04
22f70     14 2F 02 F6 | 	mov	local05, local02
22f74     07 2E 66 F0 | 	shl	local05, #7
22f78     14 2F 82 F1 | 	sub	local05, local02
22f7c     3F 00 00 FF 
22f80     00 15 06 F6 | 	mov	arg02, ##32512
22f84     17 15 82 F1 | 	sub	arg02, local05
22f88     FC 0C B0 FD | 	call	#_psdpoke
22f8c     01 28 06 F1 | 	add	local02, #1
22f90     01 00 00 FF 
22f94     00 28 56 F2 | 	cmps	local02, ##512 wc
22f98     94 FF 9F CD |  if_b	jmp	#LR__2651
22f9c                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
22f9c     00 28 06 F6 | 	mov	local02, #0
22fa0                 | LR__2652
22fa0     14 2F 02 F6 | 	mov	local05, local02
22fa4     01 2E 66 F0 | 	shl	local05, #1
22fa8     0C 12 C6 F9 | 	decod	arg01, #12
22fac     17 13 02 F1 | 	add	arg01, local05
22fb0     14 2F 02 F6 | 	mov	local05, local02
22fb4     06 2E 66 F0 | 	shl	local05, #6
22fb8     14 2F 82 F1 | 	sub	local05, local02
22fbc     C1 FF 7F FF 
22fc0     00 14 06 F6 | 	mov	arg02, ##-32256
22fc4     17 15 02 F1 | 	add	arg02, local05
22fc8     BC 0C B0 FD | 	call	#_psdpoke
22fcc     01 28 06 F1 | 	add	local02, #1
22fd0     02 00 00 FF 
22fd4     00 28 56 F2 | 	cmps	local02, ##1024 wc
22fd8     C4 FF 9F CD |  if_b	jmp	#LR__2652
22fdc                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
22fdc     00 28 06 F6 | 	mov	local02, #0
22fe0                 | LR__2653
22fe0     14 2F 02 F6 | 	mov	local05, local02
22fe4     01 2E 66 F0 | 	shl	local05, #1
22fe8     0C 00 00 FF 
22fec     00 12 06 F6 | 	mov	arg01, ##6144
22ff0     17 13 02 F1 | 	add	arg01, local05
22ff4     C0 FF 7F FF 
22ff8     A8 14 06 F6 | 	mov	arg02, ##-32600
22ffc     88 0C B0 FD | 	call	#_psdpoke
23000     01 28 06 F1 | 	add	local02, #1
23004     80 28 56 F2 | 	cmps	local02, #128 wc
23008     D4 FF 9F CD |  if_b	jmp	#LR__2653
2300c     80 28 06 F6 | 	mov	local02, #128
23010                 | LR__2654
23010     14 2F 02 F6 | 	mov	local05, local02
23014     01 2E 66 F0 | 	shl	local05, #1
23018     0C 00 00 FF 
2301c     00 12 06 F6 | 	mov	arg01, ##6144
23020     17 13 02 F1 | 	add	arg01, local05
23024     3F 00 00 FF 
23028     58 15 06 F6 | 	mov	arg02, ##32600
2302c     58 0C B0 FD | 	call	#_psdpoke
23030     01 28 06 F1 | 	add	local02, #1
23034     02 00 00 FF 
23038     00 28 16 F2 | 	cmp	local02, ##1024 wc
2303c     D0 FF 9F CD |  if_b	jmp	#LR__2654
23040                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
23040     00 28 06 F6 | 	mov	local02, #0
23044                 | LR__2655
23044     14 2F 02 F6 | 	mov	local05, local02
23048     01 2E 66 F0 | 	shl	local05, #1
2304c     0D 12 C6 F9 | 	decod	arg01, #13
23050     17 13 02 F1 | 	add	arg01, local05
23054     C0 FF 7F FF 
23058     A8 14 06 F6 | 	mov	arg02, ##-32600
2305c     28 0C B0 FD | 	call	#_psdpoke
23060     01 28 06 F1 | 	add	local02, #1
23064     01 00 00 FF 
23068     00 28 56 F2 | 	cmps	local02, ##512 wc
2306c     D4 FF 9F CD |  if_b	jmp	#LR__2655
23070     09 28 C6 F9 | 	decod	local02, #9
23074                 | LR__2656
23074     14 2F 02 F6 | 	mov	local05, local02
23078     01 2E 66 F0 | 	shl	local05, #1
2307c     0D 12 C6 F9 | 	decod	arg01, #13
23080     17 13 02 F1 | 	add	arg01, local05
23084     3F 00 00 FF 
23088     58 15 06 F6 | 	mov	arg02, ##32600
2308c     F8 0B B0 FD | 	call	#_psdpoke
23090     01 28 06 F1 | 	add	local02, #1
23094     02 00 00 FF 
23098     00 28 16 F2 | 	cmp	local02, ##1024 wc
2309c     D4 FF 9F CD |  if_b	jmp	#LR__2656
230a0                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
230a0     00 28 06 F6 | 	mov	local02, #0
230a4                 | LR__2657
230a4     14 2F 02 F6 | 	mov	local05, local02
230a8     01 2E 66 F0 | 	shl	local05, #1
230ac     14 00 00 FF 
230b0     00 12 06 F6 | 	mov	arg01, ##10240
230b4     17 13 02 F1 | 	add	arg01, local05
230b8     C0 FF 7F FF 
230bc     A8 14 06 F6 | 	mov	arg02, ##-32600
230c0     C4 0B B0 FD | 	call	#_psdpoke
230c4     01 28 06 F1 | 	add	local02, #1
230c8     00 29 56 F2 | 	cmps	local02, #256 wc
230cc     D4 FF 9F CD |  if_b	jmp	#LR__2657
230d0     00 29 06 F6 | 	mov	local02, #256
230d4                 | LR__2658
230d4     14 2F 02 F6 | 	mov	local05, local02
230d8     01 2E 66 F0 | 	shl	local05, #1
230dc     14 00 00 FF 
230e0     00 12 06 F6 | 	mov	arg01, ##10240
230e4     17 13 02 F1 | 	add	arg01, local05
230e8     3F 00 00 FF 
230ec     58 15 06 F6 | 	mov	arg02, ##32600
230f0     94 0B B0 FD | 	call	#_psdpoke
230f4     01 28 06 F1 | 	add	local02, #1
230f8     02 00 00 FF 
230fc     00 28 16 F2 | 	cmp	local02, ##1024 wc
23100     D0 FF 9F CD |  if_b	jmp	#LR__2658
23104                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
23104     18 00 00 FF 
23108     00 28 06 F6 | 	mov	local02, ##12288
2310c                 | LR__2659
2310c     14 13 02 F6 | 	mov	arg01, local02
23110     00 14 06 F6 | 	mov	arg02, #0
23114     28 0B B0 FD | 	call	#_pslpoke
23118     04 28 06 F1 | 	add	local02, #4
2311c     77 00 00 FF 
23120     FD 29 56 F2 | 	cmps	local02, ##61437 wc
23124     E4 FF 9F CD |  if_b	jmp	#LR__2659
23128                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
23128     00 28 06 F6 | 	mov	local02, #0
2312c                 | LR__2660
2312c     14 2F 02 F6 | 	mov	local05, local02
23130     01 2E 66 F0 | 	shl	local05, #1
23134     78 00 00 FF 
23138     00 2A 06 F6 | 	mov	local03, ##61440
2313c     17 2B 02 F1 | 	add	local03, local05
23140     12 00 00 FF 
23144     BA EA 05 F1 | 	add	ptr__dat__, ##9402
23148     F5 12 02 F6 | 	mov	arg01, ptr__dat__
2314c     12 00 00 FF 
23150     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
23154     10 12 06 F1 | 	add	arg01, #16
23158     14 15 02 F6 | 	mov	arg02, local02
2315c     01 14 66 F0 | 	shl	arg02, #1
23160     0A 13 02 F1 | 	add	arg01, arg02
23164     09 15 E2 FA | 	rdword	arg02, arg01
23168     15 13 02 F6 | 	mov	arg01, local03
2316c     18 0B B0 FD | 	call	#_psdpoke
23170     01 28 06 F1 | 	add	local02, #1
23174     02 00 00 FF 
23178     00 28 56 F2 | 	cmps	local02, ##1024 wc
2317c     AC FF 9F CD |  if_b	jmp	#LR__2660
23180                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
23180     00 28 06 F6 | 	mov	local02, #0
23184                 | LR__2661
23184     14 2F 02 F6 | 	mov	local05, local02
23188     01 2E 66 F0 | 	shl	local05, #1
2318c     7C 00 00 FF 
23190     00 2A 06 F6 | 	mov	local03, ##63488
23194     17 2B 02 F1 | 	add	local03, local05
23198     0E 00 00 FF 
2319c     AA EA 05 F1 | 	add	ptr__dat__, ##7338
231a0     F5 12 02 F6 | 	mov	arg01, ptr__dat__
231a4     0E 00 00 FF 
231a8     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
231ac     10 12 06 F1 | 	add	arg01, #16
231b0     14 15 02 F6 | 	mov	arg02, local02
231b4     01 14 66 F0 | 	shl	arg02, #1
231b8     0A 13 02 F1 | 	add	arg01, arg02
231bc     09 15 E2 FA | 	rdword	arg02, arg01
231c0     15 13 02 F6 | 	mov	arg01, local03
231c4     C0 0A B0 FD | 	call	#_psdpoke
231c8     01 28 06 F1 | 	add	local02, #1
231cc     02 00 00 FF 
231d0     00 28 56 F2 | 	cmps	local02, ##1024 wc
231d4     AC FF 9F CD |  if_b	jmp	#LR__2661
231d8                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
231d8     00 28 06 F6 | 	mov	local02, #0
231dc     0C 00 00 FF 
231e0     D8 E4 05 F1 | 	add	objptr, ##6360
231e4     97 18 48 FB | 	callpa	#(@LR__2663-@LR__2662)>>2,fcache_load_ptr_
231e8                 | LR__2662
231e8     14 2F 02 F6 | 	mov	local05, local02
231ec     01 2E 66 F0 | 	shl	local05, #1
231f0     F2 2E 02 F1 | 	add	local05, objptr
231f4     14 2B 02 F6 | 	mov	local03, local02
231f8     08 2A 66 F0 | 	shl	local03, #8
231fc     7F 00 00 FF 
23200     00 31 06 F6 | 	mov	local06, ##65280
23204     15 31 82 F1 | 	sub	local06, local03
23208     17 31 52 FC | 	wrword	local06, local05
2320c     01 28 06 F1 | 	add	local02, #1
23210     00 29 56 F2 | 	cmps	local02, #256 wc
23214     D0 FF 9F CD |  if_b	jmp	#LR__2662
23218                 | LR__2663
23218     0C 00 00 FF 
2321c     D8 E4 85 F1 | 	sub	objptr, ##6360
23220                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
23220     00 28 06 F6 | 	mov	local02, #0
23224                 | LR__2664
23224     14 2F 02 F6 | 	mov	local05, local02
23228     01 2E 66 F0 | 	shl	local05, #1
2322c     0D 00 00 FF 
23230     D8 E4 05 F1 | 	add	objptr, ##6872
23234     F2 2E 02 F1 | 	add	local05, objptr
23238     80 BF 23 FF 
2323c     00 12 06 F6 | 	mov	arg01, ##1199505408
23240     13 15 02 F6 | 	mov	arg02, local01
23244     0D 00 00 FF 
23248     D8 E4 85 F1 | 	sub	objptr, ##6872
2324c     E4 70 B0 FD | 	call	#__system___float_mul
23250     FD 12 02 F6 | 	mov	arg01, result1
23254     01 14 06 F6 | 	mov	arg02, #1
23258     A0 75 B0 FD | 	call	#__system___float_tointeger
2325c     17 FB 51 FC | 	wrword	result1, local05
23260     13 13 02 F6 | 	mov	arg01, local01
23264     CC BC 1F FF 
23268     9A 15 06 F6 | 	mov	arg02, ##1064933786
2326c     C4 70 B0 FD | 	call	#__system___float_mul
23270     FD 26 02 F6 | 	mov	local01, result1
23274     01 28 06 F1 | 	add	local02, #1
23278     00 29 56 F2 | 	cmps	local02, #256 wc
2327c     A4 FF 9F CD |  if_b	jmp	#LR__2664
23280     0E 00 00 FF 
23284     D6 E4 05 F1 | 	add	objptr, ##7382
23288     F2 00 58 FC | 	wrword	#0, objptr
2328c                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
2328c     00 28 06 F6 | 	mov	local02, #0
23290     02 E4 05 F1 | 	add	objptr, #2
23294     97 10 48 FB | 	callpa	#(@LR__2666-@LR__2665)>>2,fcache_load_ptr_
23298                 | LR__2665
23298     14 2F 02 F6 | 	mov	local05, local02
2329c     01 2E 66 F0 | 	shl	local05, #1
232a0     F2 2E 02 F1 | 	add	local05, objptr
232a4     7F 00 80 FF 
232a8     17 01 5A FC | 	wrword	##65280, local05
232ac     01 28 06 F1 | 	add	local02, #1
232b0     FF 28 56 F2 | 	cmps	local02, #255 wc
232b4     E0 FF 9F CD |  if_b	jmp	#LR__2665
232b8                 | LR__2666
232b8     FE E5 05 F1 | 	add	objptr, #510
232bc     F2 00 58 FC | 	wrword	#0, objptr
232c0                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
232c0     00 28 06 F6 | 	mov	local02, #0
232c4     02 E4 05 F1 | 	add	objptr, #2
232c8     97 52 48 FB | 	callpa	#(@LR__2671-@LR__2667)>>2,fcache_load_ptr_
232cc                 | LR__2667
232cc     14 2F 02 F6 | 	mov	local05, local02
232d0     01 2E 66 F0 | 	shl	local05, #1
232d4     F2 2E 02 F1 | 	add	local05, objptr
232d8     14 31 02 F6 | 	mov	local06, local02
232dc     0C 30 66 F0 | 	shl	local06, #12
232e0     17 31 52 FC | 	wrword	local06, local05
232e4     01 28 06 F1 | 	add	local02, #1
232e8     10 28 56 F2 | 	cmps	local02, #16 wc
232ec     DC FF 9F CD |  if_b	jmp	#LR__2667
232f0                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
232f0     10 28 06 F6 | 	mov	local02, #16
232f4                 | LR__2668
232f4     14 2F 02 F6 | 	mov	local05, local02
232f8     01 2E 66 F0 | 	shl	local05, #1
232fc     F2 2E 02 F1 | 	add	local05, objptr
23300     7F 00 80 FF 
23304     17 01 5A FC | 	wrword	##65280, local05
23308     01 28 06 F1 | 	add	local02, #1
2330c     F0 28 16 F2 | 	cmp	local02, #240 wc
23310     E0 FF 9F CD |  if_b	jmp	#LR__2668
23314                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
23314     F0 28 06 F6 | 	mov	local02, #240
23318                 | LR__2669
23318     14 2F 02 F6 | 	mov	local05, local02
2331c     01 2E 66 F0 | 	shl	local05, #1
23320     F2 2E 02 F1 | 	add	local05, objptr
23324     FF 2A 06 F6 | 	mov	local03, #255
23328     14 2B 82 F1 | 	sub	local03, local02
2332c     0C 2A 66 F0 | 	shl	local03, #12
23330     17 2B 52 FC | 	wrword	local03, local05
23334     01 28 06 F1 | 	add	local02, #1
23338     00 29 16 F2 | 	cmp	local02, #256 wc
2333c     D8 FF 9F CD |  if_b	jmp	#LR__2669
23340                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
23340     00 28 06 F6 | 	mov	local02, #0
23344     01 00 00 FF 
23348     00 E4 05 F1 | 	add	objptr, ##512
2334c                 | LR__2670
2334c     14 2F 02 F6 | 	mov	local05, local02
23350     01 2E 66 F0 | 	shl	local05, #1
23354     F2 2E 02 F1 | 	add	local05, objptr
23358     14 31 02 F6 | 	mov	local06, local02
2335c     08 30 66 F0 | 	shl	local06, #8
23360     17 31 52 FC | 	wrword	local06, local05
23364     01 28 06 F1 | 	add	local02, #1
23368     00 29 56 F2 | 	cmps	local02, #256 wc
2336c     DC FF 9F CD |  if_b	jmp	#LR__2670
23370                 | LR__2671
23370     FE E5 05 F1 | 	add	objptr, #510
23374     F2 00 58 FC | 	wrword	#0, objptr
23378                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
23378     00 28 06 F6 | 	mov	local02, #0
2337c     02 E4 05 F1 | 	add	objptr, #2
23380     97 6A 48 FB | 	callpa	#(@LR__2676-@LR__2672)>>2,fcache_load_ptr_
23384                 | LR__2672
23384     14 2F 02 F6 | 	mov	local05, local02
23388     01 2E 66 F0 | 	shl	local05, #1
2338c     F2 2E 02 F1 | 	add	local05, objptr
23390     14 31 02 F6 | 	mov	local06, local02
23394     04 30 66 F0 | 	shl	local06, #4
23398     14 31 02 F1 | 	add	local06, local02
2339c     04 30 66 F0 | 	shl	local06, #4
233a0     17 31 52 FC | 	wrword	local06, local05
233a4     01 28 06 F1 | 	add	local02, #1
233a8     F0 28 56 F2 | 	cmps	local02, #240 wc
233ac     D4 FF 9F CD |  if_b	jmp	#LR__2672
233b0     F0 28 06 F6 | 	mov	local02, #240
233b4                 | LR__2673
233b4     14 2F 02 F6 | 	mov	local05, local02
233b8     01 2E 66 F0 | 	shl	local05, #1
233bc     F2 2E 02 F1 | 	add	local05, objptr
233c0     FF 2A 06 F6 | 	mov	local03, #255
233c4     14 2B 82 F1 | 	sub	local03, local02
233c8     0C 2A 66 F0 | 	shl	local03, #12
233cc     17 2B 52 FC | 	wrword	local03, local05
233d0     01 28 06 F1 | 	add	local02, #1
233d4     00 29 16 F2 | 	cmp	local02, #256 wc
233d8     D8 FF 9F CD |  if_b	jmp	#LR__2673
233dc                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
233dc     00 28 06 F6 | 	mov	local02, #0
233e0     01 00 00 FF 
233e4     00 E4 05 F1 | 	add	objptr, ##512
233e8                 | LR__2674
233e8     14 2F 02 F6 | 	mov	local05, local02
233ec     01 2E 66 F0 | 	shl	local05, #1
233f0     F2 2E 02 F1 | 	add	local05, objptr
233f4     14 31 02 F6 | 	mov	local06, local02
233f8     09 30 66 F0 | 	shl	local06, #9
233fc     17 31 52 FC | 	wrword	local06, local05
23400     FF 2E 06 F6 | 	mov	local05, #255
23404     14 2F 82 F1 | 	sub	local05, local02
23408     01 2E 66 F0 | 	shl	local05, #1
2340c     F2 2E 02 F1 | 	add	local05, objptr
23410     14 31 02 F6 | 	mov	local06, local02
23414     09 30 66 F0 | 	shl	local06, #9
23418     17 31 52 FC | 	wrword	local06, local05
2341c     01 28 06 F1 | 	add	local02, #1
23420     80 28 56 F2 | 	cmps	local02, #128 wc
23424     C0 FF 9F CD |  if_b	jmp	#LR__2674
23428                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
23428     00 28 06 F6 | 	mov	local02, #0
2342c     01 00 00 FF 
23430     00 E4 05 F1 | 	add	objptr, ##512
23434                 | LR__2675
23434     14 2F 02 F6 | 	mov	local05, local02
23438     01 2E 66 F0 | 	shl	local05, #1
2343c     F2 2E 02 F1 | 	add	local05, objptr
23440     14 31 02 F6 | 	mov	local06, local02
23444     0D 30 66 F0 | 	shl	local06, #13
23448     17 31 52 FC | 	wrword	local06, local05
2344c     01 28 06 F1 | 	add	local02, #1
23450     08 28 56 F2 | 	cmps	local02, #8 wc
23454     DC FF 9F CD |  if_b	jmp	#LR__2675
23458                 | LR__2676
23458                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
23458     08 28 06 F6 | 	mov	local02, #8
2345c     97 42 48 FB | 	callpa	#(@LR__2680-@LR__2677)>>2,fcache_load_ptr_
23460                 | LR__2677
23460     14 2F 02 F6 | 	mov	local05, local02
23464     01 2E 66 F0 | 	shl	local05, #1
23468     F2 2E 02 F1 | 	add	local05, objptr
2346c     14 27 02 F6 | 	mov	local01, local02
23470     08 26 86 F1 | 	sub	local01, #8
23474     0B 26 66 F0 | 	shl	local01, #11
23478     7F 00 00 FF 
2347c     00 31 06 F6 | 	mov	local06, ##65280
23480     13 31 82 F1 | 	sub	local06, local01
23484     17 31 52 FC | 	wrword	local06, local05
23488     01 28 06 F1 | 	add	local02, #1
2348c     18 28 16 F2 | 	cmp	local02, #24 wc
23490     CC FF 9F CD |  if_b	jmp	#LR__2677
23494                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
23494     18 28 06 F6 | 	mov	local02, #24
23498                 | LR__2678
23498     14 2F 02 F6 | 	mov	local05, local02
2349c     01 2E 66 F0 | 	shl	local05, #1
234a0     F2 2E 02 F1 | 	add	local05, objptr
234a4     40 00 80 FF 
234a8     17 01 58 FC | 	wrword	##32768, local05
234ac     01 28 06 F1 | 	add	local02, #1
234b0     81 28 16 F2 | 	cmp	local02, #129 wc
234b4     E0 FF 9F CD |  if_b	jmp	#LR__2678
234b8                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
234b8     81 28 06 F6 | 	mov	local02, #129
234bc                 | LR__2679
234bc     14 2F 02 F6 | 	mov	local05, local02
234c0     01 2E 66 F0 | 	shl	local05, #1
234c4     F2 2E 02 F1 | 	add	local05, objptr
234c8     FF 2A 06 F6 | 	mov	local03, #255
234cc     14 2B 82 F1 | 	sub	local03, local02
234d0     08 2A 66 F0 | 	shl	local03, #8
234d4     17 2B 52 FC | 	wrword	local03, local05
234d8     01 28 06 F1 | 	add	local02, #1
234dc     00 29 16 F2 | 	cmp	local02, #256 wc
234e0     D8 FF 9F CD |  if_b	jmp	#LR__2679
234e4                 | LR__2680
234e4     3F 00 00 FF 
234e8     22 E4 05 F1 | 	add	objptr, ##32290
234ec     F2 00 59 FC | 	wrword	#128, objptr
234f0     52 00 00 FF 
234f4     FA E4 85 F1 | 	sub	objptr, ##42234
234f8                 | ' for i=0 to 7
234f8     00 28 06 F6 | 	mov	local02, #0
234fc     97 8E 48 FB | 	callpa	#(@LR__2682-@LR__2681)>>2,fcache_load_ptr_
23500                 | LR__2681
23500     14 2F 02 F6 | 	mov	local05, local02
23504     01 2E 66 F0 | 	shl	local05, #1
23508     14 2F 02 F1 | 	add	local05, local02
2350c     03 2E 66 F0 | 	shl	local05, #3
23510     14 00 00 FF 
23514     38 E5 05 F1 | 	add	objptr, ##10552
23518     F2 2E 02 F1 | 	add	local05, objptr
2351c     00 EE A1 FF 
23520     17 01 68 FC | 	wrlong	##1138491392, local05
23524     14 2F 02 F6 | 	mov	local05, local02
23528     01 2E 66 F0 | 	shl	local05, #1
2352c     14 2F 02 F1 | 	add	local05, local02
23530     03 2E 66 F0 | 	shl	local05, #3
23534     F2 2E 02 F1 | 	add	local05, objptr
23538     04 2E 06 F1 | 	add	local05, #4
2353c     17 29 42 FC | 	wrbyte	local02, local05
23540     14 2F 02 F6 | 	mov	local05, local02
23544     01 2E 66 F0 | 	shl	local05, #1
23548     14 2F 02 F1 | 	add	local05, local02
2354c     03 2E 66 F0 | 	shl	local05, #3
23550     F2 2E 02 F1 | 	add	local05, objptr
23554     05 2E 06 F1 | 	add	local05, #5
23558     17 29 42 FC | 	wrbyte	local02, local05
2355c     14 2F 02 F6 | 	mov	local05, local02
23560     01 2E 66 F0 | 	shl	local05, #1
23564     14 2F 02 F1 | 	add	local05, local02
23568     03 2E 66 F0 | 	shl	local05, #3
2356c     F2 2E 02 F1 | 	add	local05, objptr
23570     06 2E 06 F1 | 	add	local05, #6
23574     17 01 58 FC | 	wrword	#0, local05
23578     14 2F 02 F6 | 	mov	local05, local02
2357c     01 2E 66 F0 | 	shl	local05, #1
23580     14 2F 02 F1 | 	add	local05, local02
23584     03 2E 66 F0 | 	shl	local05, #3
23588     F2 2E 02 F1 | 	add	local05, objptr
2358c     08 2E 06 F1 | 	add	local05, #8
23590     00 C0 9F FF 
23594     17 01 68 FC | 	wrlong	##1065353216, local05
23598     14 2F 02 F6 | 	mov	local05, local02
2359c     01 2E 66 F0 | 	shl	local05, #1
235a0     14 2F 02 F1 | 	add	local05, local02
235a4     03 2E 66 F0 | 	shl	local05, #3
235a8     F2 2E 02 F1 | 	add	local05, objptr
235ac     0C 2E 06 F1 | 	add	local05, #12
235b0     00 40 A0 FF 
235b4     17 01 68 FC | 	wrlong	##1082130432, local05
235b8     14 2F 02 F6 | 	mov	local05, local02
235bc     01 2E 66 F0 | 	shl	local05, #1
235c0     14 2F 02 F1 | 	add	local05, local02
235c4     03 2E 66 F0 | 	shl	local05, #3
235c8     F2 2E 02 F1 | 	add	local05, objptr
235cc     10 2E 06 F1 | 	add	local05, #16
235d0     17 01 68 FC | 	wrlong	#0, local05
235d4     14 2F 02 F6 | 	mov	local05, local02
235d8     01 2E 66 F0 | 	shl	local05, #1
235dc     14 2F 02 F1 | 	add	local05, local02
235e0     03 2E 66 F0 | 	shl	local05, #3
235e4     F2 2E 02 F1 | 	add	local05, objptr
235e8     14 2E 06 F1 | 	add	local05, #20
235ec     17 FF 59 FC | 	wrword	#255, local05
235f0     14 2F 02 F6 | 	mov	local05, local02
235f4     01 2E 66 F0 | 	shl	local05, #1
235f8     3D 00 00 FF 
235fc     B4 E5 05 F1 | 	add	objptr, ##31668
23600     F2 2E 02 F1 | 	add	local05, objptr
23604     17 FF 59 FC | 	wrword	#255, local05
23608     01 28 06 F1 | 	add	local02, #1
2360c     08 28 56 F2 | 	cmps	local02, #8 wc
23610     52 00 00 FF 
23614     EC E4 85 F1 | 	sub	objptr, ##42220
23618     E4 FE 9F CD |  if_b	jmp	#LR__2681
2361c                 | LR__2682
2361c     00 6E 20 FF 
23620     00 30 06 F6 | 	mov	local06, ##1088159744
23624                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
23624     03 2E 06 F6 | 	mov	local05, #3
23628                 | LR__2683
23628     18 13 02 F6 | 	mov	arg01, local06
2362c     CE C3 1F FF 
23630     7D 14 06 F6 | 	mov	arg02, ##1065852029
23634     FC 6C B0 FD | 	call	#__system___float_mul
23638     FD 30 02 F6 | 	mov	local06, result1
2363c     FA 2F 6E FB | 	djnz	local05, #LR__2683
23640     00 28 06 F6 | 	mov	local02, #0
23644                 | LR__2684
23644     14 2D 02 F6 | 	mov	local04, local02
23648     02 2C 66 F0 | 	shl	local04, #2
2364c     14 00 00 FF 
23650     D8 E4 05 F1 | 	add	objptr, ##10456
23654     F2 2C 02 F1 | 	add	local04, objptr
23658     16 31 62 FC | 	wrlong	local06, local04
2365c     18 13 02 F6 | 	mov	arg01, local06
23660     CE C3 1F FF 
23664     7D 14 06 F6 | 	mov	arg02, ##1065852029
23668     14 00 00 FF 
2366c     D8 E4 85 F1 | 	sub	objptr, ##10456
23670     C0 6C B0 FD | 	call	#__system___float_mul
23674     FD 30 02 F6 | 	mov	local06, result1
23678     01 28 06 F1 | 	add	local02, #1
2367c     0C 28 56 F2 | 	cmps	local02, #12 wc
23680     C0 FF 9F CD |  if_b	jmp	#LR__2684
23684     14 00 00 FF 
23688     08 E5 05 F1 | 	add	objptr, ##10504
2368c     F2 50 6B FC | 	wrlong	#424, objptr
23690     04 E4 05 F1 | 	add	objptr, #4
23694     F2 20 6B FC | 	wrlong	#400, objptr
23698     04 E4 05 F1 | 	add	objptr, #4
2369c     F2 F2 6A FC | 	wrlong	#377, objptr
236a0     04 E4 05 F1 | 	add	objptr, #4
236a4     F2 C8 6A FC | 	wrlong	#356, objptr
236a8     04 E4 05 F1 | 	add	objptr, #4
236ac     F2 A0 6A FC | 	wrlong	#336, objptr
236b0     04 E4 05 F1 | 	add	objptr, #4
236b4     F2 7A 6A FC | 	wrlong	#317, objptr
236b8     04 E4 05 F1 | 	add	objptr, #4
236bc     F2 58 6A FC | 	wrlong	#300, objptr
236c0     04 E4 05 F1 | 	add	objptr, #4
236c4     F2 36 6A FC | 	wrlong	#283, objptr
236c8     04 E4 05 F1 | 	add	objptr, #4
236cc     F2 16 6A FC | 	wrlong	#267, objptr
236d0     04 E4 05 F1 | 	add	objptr, #4
236d4     F2 F8 69 FC | 	wrlong	#252, objptr
236d8     04 E4 05 F1 | 	add	objptr, #4
236dc     F2 DC 69 FC | 	wrlong	#238, objptr
236e0     04 E4 05 F1 | 	add	objptr, #4
236e4     F2 C0 69 FC | 	wrlong	#224, objptr
236e8     3D 00 00 FF 
236ec     C6 E5 05 F1 | 	add	objptr, ##31686
236f0     F2 00 59 FC | 	wrword	#128, objptr
236f4     02 E4 85 F1 | 	sub	objptr, #2
236f8     F2 00 59 FC | 	wrword	#128, objptr
236fc     52 00 00 FF 
23700     F8 E4 85 F1 | 	sub	objptr, ##42232
23704     A7 F0 03 F6 | 	mov	ptra, fp
23708     B2 00 A0 FD | 	call	#popregs_
2370c                 | _init_audio_ret
2370c     2D 00 64 FD | 	ret
23710                 | 
23710                 | ' 
23710                 | ' '------------------- Error messages
23710                 | ' 
23710                 | ' sub init_error_strings
23710                 | _init_error_strings
23710     BE 01 00 FF 
23714     0C 00 06 F6 | 	mov	_var01, ##@LR__6055
23718     45 00 00 FF 
2371c     7C E4 05 F1 | 	add	objptr, ##35452
23720     F2 00 62 FC | 	wrlong	_var01, objptr
23724     BE 01 00 FF 
23728     0D 00 06 F6 | 	mov	_var01, ##@LR__6056
2372c     04 E4 05 F1 | 	add	objptr, #4
23730     F2 00 62 FC | 	wrlong	_var01, objptr
23734     BE 01 00 FF 
23738     31 00 06 F6 | 	mov	_var01, ##@LR__6057
2373c     04 E4 05 F1 | 	add	objptr, #4
23740     F2 00 62 FC | 	wrlong	_var01, objptr
23744     BE 01 00 FF 
23748     51 00 06 F6 | 	mov	_var01, ##@LR__6058
2374c     04 E4 05 F1 | 	add	objptr, #4
23750     F2 00 62 FC | 	wrlong	_var01, objptr
23754     BE 01 00 FF 
23758     6A 00 06 F6 | 	mov	_var01, ##@LR__6059
2375c     04 E4 05 F1 | 	add	objptr, #4
23760     F2 00 62 FC | 	wrlong	_var01, objptr
23764     BE 01 00 FF 
23768     85 00 06 F6 | 	mov	_var01, ##@LR__6060
2376c     04 E4 05 F1 | 	add	objptr, #4
23770     F2 00 62 FC | 	wrlong	_var01, objptr
23774     BE 01 00 FF 
23778     A6 00 06 F6 | 	mov	_var01, ##@LR__6061
2377c     04 E4 05 F1 | 	add	objptr, #4
23780     F2 00 62 FC | 	wrlong	_var01, objptr
23784     BE 01 00 FF 
23788     D3 00 06 F6 | 	mov	_var01, ##@LR__6062
2378c     04 E4 05 F1 | 	add	objptr, #4
23790     F2 00 62 FC | 	wrlong	_var01, objptr
23794     BE 01 00 FF 
23798     FD 00 06 F6 | 	mov	_var01, ##@LR__6063
2379c     04 E4 05 F1 | 	add	objptr, #4
237a0     F2 00 62 FC | 	wrlong	_var01, objptr
237a4     BE 01 00 FF 
237a8     15 01 06 F6 | 	mov	_var01, ##@LR__6064
237ac     04 E4 05 F1 | 	add	objptr, #4
237b0     F2 00 62 FC | 	wrlong	_var01, objptr
237b4     BE 01 00 FF 
237b8     35 01 06 F6 | 	mov	_var01, ##@LR__6065
237bc     04 E4 05 F1 | 	add	objptr, #4
237c0     F2 00 62 FC | 	wrlong	_var01, objptr
237c4     BE 01 00 FF 
237c8     4B 01 06 F6 | 	mov	_var01, ##@LR__6066
237cc     04 E4 05 F1 | 	add	objptr, #4
237d0     F2 00 62 FC | 	wrlong	_var01, objptr
237d4     BE 01 00 FF 
237d8     68 01 06 F6 | 	mov	_var01, ##@LR__6067
237dc     04 E4 05 F1 | 	add	objptr, #4
237e0     F2 00 62 FC | 	wrlong	_var01, objptr
237e4     BE 01 00 FF 
237e8     8B 01 06 F6 | 	mov	_var01, ##@LR__6068
237ec     04 E4 05 F1 | 	add	objptr, #4
237f0     F2 00 62 FC | 	wrlong	_var01, objptr
237f4     BE 01 00 FF 
237f8     B1 01 06 F6 | 	mov	_var01, ##@LR__6069
237fc     04 E4 05 F1 | 	add	objptr, #4
23800     F2 00 62 FC | 	wrlong	_var01, objptr
23804     BE 01 00 FF 
23808     CC 01 06 F6 | 	mov	_var01, ##@LR__6070
2380c     04 E4 05 F1 | 	add	objptr, #4
23810     F2 00 62 FC | 	wrlong	_var01, objptr
23814     BE 01 00 FF 
23818     DC 01 06 F6 | 	mov	_var01, ##@LR__6071
2381c     04 E4 05 F1 | 	add	objptr, #4
23820     F2 00 62 FC | 	wrlong	_var01, objptr
23824     BE 01 00 FF 
23828     EB 01 06 F6 | 	mov	_var01, ##@LR__6072
2382c     04 E4 05 F1 | 	add	objptr, #4
23830     F2 00 62 FC | 	wrlong	_var01, objptr
23834     BF 01 00 FF 
23838     05 00 06 F6 | 	mov	_var01, ##@LR__6073
2383c     04 E4 05 F1 | 	add	objptr, #4
23840     F2 00 62 FC | 	wrlong	_var01, objptr
23844     BF 01 00 FF 
23848     16 00 06 F6 | 	mov	_var01, ##@LR__6074
2384c     04 E4 05 F1 | 	add	objptr, #4
23850     F2 00 62 FC | 	wrlong	_var01, objptr
23854     BF 01 00 FF 
23858     2D 00 06 F6 | 	mov	_var01, ##@LR__6075
2385c     04 E4 05 F1 | 	add	objptr, #4
23860     F2 00 62 FC | 	wrlong	_var01, objptr
23864     BF 01 00 FF 
23868     40 00 06 F6 | 	mov	_var01, ##@LR__6076
2386c     04 E4 05 F1 | 	add	objptr, #4
23870     F2 00 62 FC | 	wrlong	_var01, objptr
23874     BF 01 00 FF 
23878     4F 00 06 F6 | 	mov	_var01, ##@LR__6077
2387c     04 E4 05 F1 | 	add	objptr, #4
23880     F2 00 62 FC | 	wrlong	_var01, objptr
23884     BF 01 00 FF 
23888     6B 00 06 F6 | 	mov	_var01, ##@LR__6078
2388c     04 E4 05 F1 | 	add	objptr, #4
23890     F2 00 62 FC | 	wrlong	_var01, objptr
23894     BF 01 00 FF 
23898     7B 00 06 F6 | 	mov	_var01, ##@LR__6079
2389c     04 E4 05 F1 | 	add	objptr, #4
238a0     F2 00 62 FC | 	wrlong	_var01, objptr
238a4     BF 01 00 FF 
238a8     8B 00 06 F6 | 	mov	_var01, ##@LR__6080
238ac     04 E4 05 F1 | 	add	objptr, #4
238b0     F2 00 62 FC | 	wrlong	_var01, objptr
238b4     BF 01 00 FF 
238b8     BE 00 06 F6 | 	mov	_var01, ##@LR__6081
238bc     04 E4 05 F1 | 	add	objptr, #4
238c0     F2 00 62 FC | 	wrlong	_var01, objptr
238c4     BF 01 00 FF 
238c8     D9 00 06 F6 | 	mov	_var01, ##@LR__6082
238cc     04 E4 05 F1 | 	add	objptr, #4
238d0     F2 00 62 FC | 	wrlong	_var01, objptr
238d4     BF 01 00 FF 
238d8     EE 00 06 F6 | 	mov	_var01, ##@LR__6083
238dc     04 E4 05 F1 | 	add	objptr, #4
238e0     F2 00 62 FC | 	wrlong	_var01, objptr
238e4     BF 01 00 FF 
238e8     FA 00 06 F6 | 	mov	_var01, ##@LR__6084
238ec     04 E4 05 F1 | 	add	objptr, #4
238f0     F2 00 62 FC | 	wrlong	_var01, objptr
238f4     BF 01 00 FF 
238f8     0B 01 06 F6 | 	mov	_var01, ##@LR__6085
238fc     04 E4 05 F1 | 	add	objptr, #4
23900     F2 00 62 FC | 	wrlong	_var01, objptr
23904     BF 01 00 FF 
23908     1B 01 06 F6 | 	mov	_var01, ##@LR__6086
2390c     04 E4 05 F1 | 	add	objptr, #4
23910     F2 00 62 FC | 	wrlong	_var01, objptr
23914     BF 01 00 FF 
23918     36 01 06 F6 | 	mov	_var01, ##@LR__6087
2391c     04 E4 05 F1 | 	add	objptr, #4
23920     F2 00 62 FC | 	wrlong	_var01, objptr
23924     BF 01 00 FF 
23928     46 01 06 F6 | 	mov	_var01, ##@LR__6088
2392c     04 E4 05 F1 | 	add	objptr, #4
23930     F2 00 62 FC | 	wrlong	_var01, objptr
23934     BF 01 00 FF 
23938     54 01 06 F6 | 	mov	_var01, ##@LR__6089
2393c     04 E4 05 F1 | 	add	objptr, #4
23940     F2 00 62 FC | 	wrlong	_var01, objptr
23944     BF 01 00 FF 
23948     6E 01 06 F6 | 	mov	_var01, ##@LR__6090
2394c     04 E4 05 F1 | 	add	objptr, #4
23950     F2 00 62 FC | 	wrlong	_var01, objptr
23954     BF 01 00 FF 
23958     A1 01 06 F6 | 	mov	_var01, ##@LR__6091
2395c     04 E4 05 F1 | 	add	objptr, #4
23960     F2 00 62 FC | 	wrlong	_var01, objptr
23964     BF 01 00 FF 
23968     B9 01 06 F6 | 	mov	_var01, ##@LR__6092
2396c     04 E4 05 F1 | 	add	objptr, #4
23970     F2 00 62 FC | 	wrlong	_var01, objptr
23974     BF 01 00 FF 
23978     D4 01 06 F6 | 	mov	_var01, ##@LR__6093
2397c     04 E4 05 F1 | 	add	objptr, #4
23980     F2 00 62 FC | 	wrlong	_var01, objptr
23984     BF 01 00 FF 
23988     F1 01 06 F6 | 	mov	_var01, ##@LR__6094
2398c     04 E4 05 F1 | 	add	objptr, #4
23990     F2 00 62 FC | 	wrlong	_var01, objptr
23994     C0 01 00 FF 
23998     0A 00 06 F6 | 	mov	_var01, ##@LR__6095
2399c     04 E4 05 F1 | 	add	objptr, #4
239a0     F2 00 62 FC | 	wrlong	_var01, objptr
239a4     C0 01 00 FF 
239a8     29 00 06 F6 | 	mov	_var01, ##@LR__6096
239ac     04 E4 05 F1 | 	add	objptr, #4
239b0     F2 00 62 FC | 	wrlong	_var01, objptr
239b4     C0 01 00 FF 
239b8     37 00 06 F6 | 	mov	_var01, ##@LR__6097
239bc     04 E4 05 F1 | 	add	objptr, #4
239c0     F2 00 62 FC | 	wrlong	_var01, objptr
239c4     C0 01 00 FF 
239c8     64 00 06 F6 | 	mov	_var01, ##@LR__6098
239cc     04 E4 05 F1 | 	add	objptr, #4
239d0     F2 00 62 FC | 	wrlong	_var01, objptr
239d4     C0 01 00 FF 
239d8     71 00 06 F6 | 	mov	_var01, ##@LR__6099
239dc     04 E4 05 F1 | 	add	objptr, #4
239e0     F2 00 62 FC | 	wrlong	_var01, objptr
239e4     C0 01 00 FF 
239e8     85 00 06 F6 | 	mov	_var01, ##@LR__6100
239ec     04 E4 05 F1 | 	add	objptr, #4
239f0     F2 00 62 FC | 	wrlong	_var01, objptr
239f4     C0 01 00 FF 
239f8     A9 00 06 F6 | 	mov	_var01, ##@LR__6101
239fc     04 E4 05 F1 | 	add	objptr, #4
23a00     F2 00 62 FC | 	wrlong	_var01, objptr
23a04     C0 01 00 FF 
23a08     C0 00 06 F6 | 	mov	_var01, ##@LR__6102
23a0c     04 E4 05 F1 | 	add	objptr, #4
23a10     F2 00 62 FC | 	wrlong	_var01, objptr
23a14     C0 01 00 FF 
23a18     D3 00 06 F6 | 	mov	_var01, ##@LR__6103
23a1c     04 E4 05 F1 | 	add	objptr, #4
23a20     F2 00 62 FC | 	wrlong	_var01, objptr
23a24     C0 01 00 FF 
23a28     EA 00 06 F6 | 	mov	_var01, ##@LR__6104
23a2c     04 E4 05 F1 | 	add	objptr, #4
23a30     F2 00 62 FC | 	wrlong	_var01, objptr
23a34     C0 01 00 FF 
23a38     03 01 06 F6 | 	mov	_var01, ##@LR__6105
23a3c     04 E4 05 F1 | 	add	objptr, #4
23a40     F2 00 62 FC | 	wrlong	_var01, objptr
23a44     C0 01 00 FF 
23a48     25 01 06 F6 | 	mov	_var01, ##@LR__6106
23a4c     04 E4 05 F1 | 	add	objptr, #4
23a50     F2 00 62 FC | 	wrlong	_var01, objptr
23a54     C0 01 00 FF 
23a58     38 01 06 F6 | 	mov	_var01, ##@LR__6107
23a5c     04 E4 05 F1 | 	add	objptr, #4
23a60     F2 00 62 FC | 	wrlong	_var01, objptr
23a64     C0 01 00 FF 
23a68     48 01 06 F6 | 	mov	_var01, ##@LR__6108
23a6c     04 E4 05 F1 | 	add	objptr, #4
23a70     F2 00 62 FC | 	wrlong	_var01, objptr
23a74     C0 01 00 FF 
23a78     60 01 06 F6 | 	mov	_var01, ##@LR__6109
23a7c     04 E4 05 F1 | 	add	objptr, #4
23a80     F2 00 62 FC | 	wrlong	_var01, objptr
23a84     C0 01 00 FF 
23a88     77 01 06 F6 | 	mov	_var01, ##@LR__6110
23a8c     04 E4 05 F1 | 	add	objptr, #4
23a90     F2 00 62 FC | 	wrlong	_var01, objptr
23a94     45 00 00 FF 
23a98     58 E5 85 F1 | 	sub	objptr, ##35672
23a9c                 | _init_error_strings_ret
23a9c     2D 00 64 FD | 	ret
23aa0                 | 
23aa0                 | '         
23aa0                 | ' sub printerror(err as integer, linenum=0 as integer)
23aa0                 | _printerror
23aa0     02 4A 05 F6 | 	mov	COUNT_, #2
23aa4     A8 00 A0 FD | 	call	#pushregs_
23aa8     09 27 02 F6 | 	mov	local01, arg01
23aac     0A 29 02 F6 | 	mov	local02, arg02
23ab0     C0 01 00 FF 
23ab4     84 13 06 F6 | 	mov	arg01, ##@LR__6111
23ab8     60 21 B0 FD | 	call	#_hg010b_spin2_write
23abc     13 13 02 F6 | 	mov	arg01, local01
23ac0     9C 26 B0 FD | 	call	#_hg010b_spin2_inttostr
23ac4     FD 12 02 F6 | 	mov	arg01, result1
23ac8     50 21 B0 FD | 	call	#_hg010b_spin2_write
23acc     C0 01 00 FF 
23ad0     8B 13 06 F6 | 	mov	arg01, ##@LR__6112
23ad4     44 21 B0 FD | 	call	#_hg010b_spin2_write
23ad8     02 26 66 F0 | 	shl	local01, #2
23adc     45 00 00 FF 
23ae0     7C E4 05 F1 | 	add	objptr, ##35452
23ae4     F2 26 02 F1 | 	add	local01, objptr
23ae8     13 13 02 FB | 	rdlong	arg01, local01
23aec     45 00 00 FF 
23af0     7C E4 85 F1 | 	sub	objptr, ##35452
23af4     24 21 B0 FD | 	call	#_hg010b_spin2_write
23af8                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
23af8                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
23af8     01 28 56 F2 | 	cmps	local02, #1 wc
23afc     24 00 90 CD |  if_b	jmp	#LR__2690
23b00     C0 01 00 FF 
23b04     8F 13 06 F6 | 	mov	arg01, ##@LR__6113
23b08     10 21 B0 FD | 	call	#_hg010b_spin2_write
23b0c     14 13 02 F6 | 	mov	arg01, local02
23b10     4C 26 B0 FD | 	call	#_hg010b_spin2_inttostr
23b14     FD 12 02 F6 | 	mov	arg01, result1
23b18                 | ' 
23b18                 | ' write(text)
23b18     00 21 B0 FD | 	call	#_hg010b_spin2_write
23b1c                 | ' crlf
23b1c     9C 25 B0 FD | 	call	#_hg010b_spin2_crlf
23b20     10 00 90 FD | 	jmp	#LR__2691
23b24                 | LR__2690
23b24     C0 01 00 FF 
23b28     99 13 06 F6 | 	mov	arg01, ##@LR__6114
23b2c                 | ' 
23b2c                 | ' write(text)
23b2c     EC 20 B0 FD | 	call	#_hg010b_spin2_write
23b30                 | ' crlf
23b30     88 25 B0 FD | 	call	#_hg010b_spin2_crlf
23b34                 | LR__2691
23b34     A7 F0 03 F6 | 	mov	ptra, fp
23b38     B2 00 A0 FD | 	call	#popregs_
23b3c                 | _printerror_ret
23b3c     2D 00 64 FD | 	ret
23b40                 | 
23b40                 | ' 
23b40                 | ' '' ------------------------------- Hardware start/stop/initialization 
23b40                 | ' 
23b40                 | ' sub startpsram
23b40                 | _startpsram
23b40     00 12 06 F6 | 	mov	arg01, #0
23b44     0A 14 C6 F9 | 	decod	arg02, #10
23b48     0B 16 06 F6 | 	mov	arg03, #11
23b4c     07 18 06 F6 | 	mov	arg04, #7
23b50     0B 00 00 FF 
23b54     CC E4 05 F1 | 	add	objptr, ##5836
23b58     8C 2A B0 FD | 	call	#_psram_spin2_startx
23b5c     2B 00 00 FF 
23b60     3C E5 05 F1 | 	add	objptr, ##22332
23b64     F2 FA 61 FC | 	wrlong	result1, objptr
23b68                 | '     return $7FF00 + cog*12
23b68     0C E4 05 F1 | 	add	objptr, #12
23b6c     FF 03 80 FF 
23b70     F2 00 6A FC | 	wrlong	##524032, objptr
23b74     37 00 00 FF 
23b78     14 E4 85 F1 | 	sub	objptr, ##28180
23b7c                 | _startpsram_ret
23b7c     2D 00 64 FD | 	ret
23b80                 | 
23b80                 | ' 
23b80                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
23b80                 | _startvideo
23b80     01 4A 05 F6 | 	mov	COUNT_, #1
23b84     A8 00 A0 FD | 	call	#pushregs_
23b88     37 00 00 FF 
23b8c     14 E4 05 F1 | 	add	objptr, ##28180
23b90     F2 18 02 FB | 	rdlong	arg04, objptr
23b94     37 00 00 FF 
23b98     14 E4 85 F1 | 	sub	objptr, ##28180
23b9c     0A 13 02 F6 | 	mov	arg01, arg02
23ba0     0C 15 02 F6 | 	mov	arg02, arg04
23ba4     1C 08 B0 FD | 	call	#_hg010b_spin2_start
23ba8     37 00 00 FF 
23bac     00 E4 05 F1 | 	add	objptr, ##28160
23bb0     F2 FA 61 FC | 	wrlong	result1, objptr
23bb4                 | ' 
23bb4                 | ' videocog=v.start(pin,mbox)
23bb4                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
23bb4     00 26 06 F6 | 	mov	local01, #0
23bb8     2B 00 00 FF 
23bbc     34 E5 85 F1 | 	sub	objptr, ##22324
23bc0                 | LR__2700
23bc0     13 13 02 F6 | 	mov	arg01, local01
23bc4     00 28 00 FF 
23bc8     00 14 06 F6 | 	mov	arg02, ##5242880
23bcc     70 2E B0 FD | 	call	#_psram_spin2_setQos
23bd0     01 26 06 F1 | 	add	local01, #1
23bd4     08 26 56 F2 | 	cmps	local01, #8 wc
23bd8     E4 FF 9F CD |  if_b	jmp	#LR__2700
23bdc     2B 00 00 FF 
23be0     34 E5 05 F1 | 	add	objptr, ##22324
23be4     F2 12 02 FB | 	rdlong	arg01, objptr
23be8     7A 00 02 FF 
23bec     00 14 06 F6 | 	mov	arg02, ##67171328
23bf0     2B 00 00 FF 
23bf4     34 E5 85 F1 | 	sub	objptr, ##22324
23bf8     44 2E B0 FD | 	call	#_psram_spin2_setQos
23bfc     0B 00 00 FF 
23c00     CC E4 85 F1 | 	sub	objptr, ##5836
23c04                 | ' psram.setQoS(videocog, $0400f400) 
23c04                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
23c04     F2 14 02 F6 | 	mov	arg02, objptr
23c08     00 38 05 FF 
23c0c     00 14 46 F5 | 	or	arg02, ##175112192
23c10     00 16 06 F6 | 	mov	arg03, #0
23c14     00 18 06 F6 | 	mov	arg04, #0
23c18     00 12 06 F6 | 	mov	arg01, #0
23c1c     40 43 B0 FD | 	call	#__system___basic_open
23c20                 | ' return videocog
23c20     37 00 00 FF 
23c24     00 E4 05 F1 | 	add	objptr, ##28160
23c28     F2 FA 01 FB | 	rdlong	result1, objptr
23c2c     37 00 00 FF 
23c30     00 E4 85 F1 | 	sub	objptr, ##28160
23c34     A7 F0 03 F6 | 	mov	ptra, fp
23c38     B2 00 A0 FD | 	call	#popregs_
23c3c                 | _startvideo_ret
23c3c     2D 00 64 FD | 	ret
23c40                 | 
23c40                 | ' 
23c40                 | ' 
23c40                 | ' 
23c40                 | ' '' ------------------------------- Convenient psram peek/poke
23c40                 | ' 
23c40                 | ' sub pslpoke(addr as ulong,value as ulong)
23c40                 | _pslpoke
23c40     00 4A 05 F6 | 	mov	COUNT_, #0
23c44     A8 00 A0 FD | 	call	#pushregs_
23c48     08 F0 07 F1 | 	add	ptra, #8
23c4c     A7 12 62 FC | 	wrlong	arg01, fp
23c50     04 4E 05 F1 | 	add	fp, #4
23c54     A7 14 62 FC | 	wrlong	arg02, fp
23c58     A7 12 02 F6 | 	mov	arg01, fp
23c5c     04 4E 85 F1 | 	sub	fp, #4
23c60     A7 14 02 FB | 	rdlong	arg02, fp
23c64     04 16 06 F6 | 	mov	arg03, #4
23c68     0B 00 00 FF 
23c6c     CC E4 05 F1 | 	add	objptr, ##5836
23c70     3C 2C B0 FD | 	call	#_psram_spin2_write
23c74     0B 00 00 FF 
23c78     CC E4 85 F1 | 	sub	objptr, ##5836
23c7c     A7 F0 03 F6 | 	mov	ptra, fp
23c80     B2 00 A0 FD | 	call	#popregs_
23c84                 | _pslpoke_ret
23c84     2D 00 64 FD | 	ret
23c88                 | 
23c88                 | ' 
23c88                 | ' sub psdpoke(addr as ulong,value as ulong)
23c88                 | _psdpoke
23c88     00 4A 05 F6 | 	mov	COUNT_, #0
23c8c     A8 00 A0 FD | 	call	#pushregs_
23c90     08 F0 07 F1 | 	add	ptra, #8
23c94     A7 12 62 FC | 	wrlong	arg01, fp
23c98     04 4E 05 F1 | 	add	fp, #4
23c9c     A7 14 62 FC | 	wrlong	arg02, fp
23ca0     A7 12 02 F6 | 	mov	arg01, fp
23ca4     04 4E 85 F1 | 	sub	fp, #4
23ca8     A7 14 02 FB | 	rdlong	arg02, fp
23cac     02 16 06 F6 | 	mov	arg03, #2
23cb0     0B 00 00 FF 
23cb4     CC E4 05 F1 | 	add	objptr, ##5836
23cb8     F4 2B B0 FD | 	call	#_psram_spin2_write
23cbc     0B 00 00 FF 
23cc0     CC E4 85 F1 | 	sub	objptr, ##5836
23cc4     A7 F0 03 F6 | 	mov	ptra, fp
23cc8     B2 00 A0 FD | 	call	#popregs_
23ccc                 | _psdpoke_ret
23ccc     2D 00 64 FD | 	ret
23cd0                 | 
23cd0                 | ' 
23cd0                 | ' sub pspoke(addr as ulong,value as ulong)
23cd0                 | _pspoke
23cd0     00 4A 05 F6 | 	mov	COUNT_, #0
23cd4     A8 00 A0 FD | 	call	#pushregs_
23cd8     08 F0 07 F1 | 	add	ptra, #8
23cdc     A7 12 62 FC | 	wrlong	arg01, fp
23ce0     04 4E 05 F1 | 	add	fp, #4
23ce4     A7 14 62 FC | 	wrlong	arg02, fp
23ce8     A7 12 02 F6 | 	mov	arg01, fp
23cec     04 4E 85 F1 | 	sub	fp, #4
23cf0     A7 14 02 FB | 	rdlong	arg02, fp
23cf4     01 16 06 F6 | 	mov	arg03, #1
23cf8     0B 00 00 FF 
23cfc     CC E4 05 F1 | 	add	objptr, ##5836
23d00     AC 2B B0 FD | 	call	#_psram_spin2_write
23d04     0B 00 00 FF 
23d08     CC E4 85 F1 | 	sub	objptr, ##5836
23d0c     A7 F0 03 F6 | 	mov	ptra, fp
23d10     B2 00 A0 FD | 	call	#popregs_
23d14                 | _pspoke_ret
23d14     2D 00 64 FD | 	ret
23d18                 | 
23d18                 | ' 
23d18                 | ' function pspeek(adr as ulong) as ubyte
23d18                 | _pspeek
23d18     00 4A 05 F6 | 	mov	COUNT_, #0
23d1c     A8 00 A0 FD | 	call	#pushregs_
23d20     0C F0 07 F1 | 	add	ptra, #12
23d24     04 4E 05 F1 | 	add	fp, #4
23d28     A7 12 62 FC | 	wrlong	arg01, fp
23d2c     04 4E 05 F1 | 	add	fp, #4
23d30     A7 12 02 F6 | 	mov	arg01, fp
23d34     04 4E 85 F1 | 	sub	fp, #4
23d38     A7 14 02 FB | 	rdlong	arg02, fp
23d3c     04 4E 85 F1 | 	sub	fp, #4
23d40     01 16 06 F6 | 	mov	arg03, #1
23d44     0B 00 00 FF 
23d48     CC E4 05 F1 | 	add	objptr, ##5836
23d4c     C4 2A B0 FD | 	call	#_psram_spin2_read1
23d50     0B 00 00 FF 
23d54     CC E4 85 F1 | 	sub	objptr, ##5836
23d58                 | ' psram.read1(varptr(res),adr,1)
23d58                 | ' return res
23d58     08 4E 05 F1 | 	add	fp, #8
23d5c     A7 FA C1 FA | 	rdbyte	result1, fp
23d60     08 4E 85 F1 | 	sub	fp, #8
23d64     A7 F0 03 F6 | 	mov	ptra, fp
23d68     B2 00 A0 FD | 	call	#popregs_
23d6c                 | _pspeek_ret
23d6c     2D 00 64 FD | 	ret
23d70                 | 
23d70                 | ' 
23d70                 | ' function pslpeek(adr as ulong) as ulong
23d70                 | _pslpeek
23d70     00 4A 05 F6 | 	mov	COUNT_, #0
23d74     A8 00 A0 FD | 	call	#pushregs_
23d78     0C F0 07 F1 | 	add	ptra, #12
23d7c     04 4E 05 F1 | 	add	fp, #4
23d80     A7 12 62 FC | 	wrlong	arg01, fp
23d84     04 4E 05 F1 | 	add	fp, #4
23d88     A7 12 02 F6 | 	mov	arg01, fp
23d8c     04 4E 85 F1 | 	sub	fp, #4
23d90     A7 14 02 FB | 	rdlong	arg02, fp
23d94     04 4E 85 F1 | 	sub	fp, #4
23d98     04 16 06 F6 | 	mov	arg03, #4
23d9c     0B 00 00 FF 
23da0     CC E4 05 F1 | 	add	objptr, ##5836
23da4     6C 2A B0 FD | 	call	#_psram_spin2_read1
23da8     0B 00 00 FF 
23dac     CC E4 85 F1 | 	sub	objptr, ##5836
23db0                 | ' psram.read1(varptr(res),adr,4)
23db0                 | ' return res
23db0     08 4E 05 F1 | 	add	fp, #8
23db4     A7 FA 01 FB | 	rdlong	result1, fp
23db8     08 4E 85 F1 | 	sub	fp, #8
23dbc     A7 F0 03 F6 | 	mov	ptra, fp
23dc0     B2 00 A0 FD | 	call	#popregs_
23dc4                 | _pslpeek_ret
23dc4     2D 00 64 FD | 	ret
23dc8                 | 
23dc8                 | ' 
23dc8                 | ' function psdpeek(adr as ulong) as ulong
23dc8                 | _psdpeek
23dc8     00 4A 05 F6 | 	mov	COUNT_, #0
23dcc     A8 00 A0 FD | 	call	#pushregs_
23dd0     0C F0 07 F1 | 	add	ptra, #12
23dd4     04 4E 05 F1 | 	add	fp, #4
23dd8     A7 12 62 FC | 	wrlong	arg01, fp
23ddc     04 4E 05 F1 | 	add	fp, #4
23de0     A7 12 02 F6 | 	mov	arg01, fp
23de4     04 4E 85 F1 | 	sub	fp, #4
23de8     A7 14 02 FB | 	rdlong	arg02, fp
23dec     04 4E 85 F1 | 	sub	fp, #4
23df0     02 16 06 F6 | 	mov	arg03, #2
23df4     0B 00 00 FF 
23df8     CC E4 05 F1 | 	add	objptr, ##5836
23dfc     14 2A B0 FD | 	call	#_psram_spin2_read1
23e00     0B 00 00 FF 
23e04     CC E4 85 F1 | 	sub	objptr, ##5836
23e08                 | ' psram.read1(varptr(res),adr,2)
23e08                 | ' return res
23e08     08 4E 05 F1 | 	add	fp, #8
23e0c     A7 FA E1 FA | 	rdword	result1, fp
23e10     08 4E 85 F1 | 	sub	fp, #8
23e14     A7 F0 03 F6 | 	mov	ptra, fp
23e18     B2 00 A0 FD | 	call	#popregs_
23e1c                 | _psdpeek_ret
23e1c     2D 00 64 FD | 	ret
23e20                 | 
23e20                 | ' 
23e20                 | ' '' ------------------------------- USB keyboard scan to char translator
23e20                 | ' 
23e20                 | ' function scantochar(key)
23e20                 | _scantochar
23e20                 | ' 
23e20                 | ' select case (key shr 8) and 255
23e20     09 01 02 F6 | 	mov	_var01, arg01
23e24     08 00 C6 F0 | 	sar	_var01, #8
23e28     FF 00 0E F5 | 	and	_var01, #255 wz
23e2c     24 00 90 AD |  if_e	jmp	#LR__2710
23e30     02 00 0E F2 | 	cmp	_var01, #2 wz
23e34     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
23e38     30 00 90 AD |  if_e	jmp	#LR__2711
23e3c     40 00 0E F2 | 	cmp	_var01, #64 wz
23e40     44 00 90 AD |  if_e	jmp	#LR__2712
23e44     42 00 0E F2 | 	cmp	_var01, #66 wz
23e48     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
23e4c     70 00 90 5D |  if_ne	jmp	#LR__2714
23e50     50 00 90 FD | 	jmp	#LR__2713
23e54                 | LR__2710
23e54     09 FB 01 F6 | 	mov	result1, arg01
23e58     7F FA 05 F5 | 	and	result1, #127
23e5c     02 FA 65 F0 | 	shl	result1, #2
23e60     F5 FA 01 F1 | 	add	result1, ptr__dat__
23e64     FD FA C1 FA | 	rdbyte	result1, result1
23e68     54 00 90 FD | 	jmp	#_scantochar_ret
23e6c                 | LR__2711
23e6c     09 FB 01 F6 | 	mov	result1, arg01
23e70     7F FA 05 F5 | 	and	result1, #127
23e74     02 FA 65 F0 | 	shl	result1, #2
23e78     01 FA 05 F1 | 	add	result1, #1
23e7c     F5 FA 01 F1 | 	add	result1, ptr__dat__
23e80     FD FA C1 FA | 	rdbyte	result1, result1
23e84     38 00 90 FD | 	jmp	#_scantochar_ret
23e88                 | LR__2712
23e88     09 FB 01 F6 | 	mov	result1, arg01
23e8c     7F FA 05 F5 | 	and	result1, #127
23e90     02 FA 65 F0 | 	shl	result1, #2
23e94     02 FA 05 F1 | 	add	result1, #2
23e98     F5 FA 01 F1 | 	add	result1, ptr__dat__
23e9c     FD FA C1 FA | 	rdbyte	result1, result1
23ea0     1C 00 90 FD | 	jmp	#_scantochar_ret
23ea4                 | LR__2713
23ea4     09 FB 01 F6 | 	mov	result1, arg01
23ea8     7F FA 05 F5 | 	and	result1, #127
23eac     02 FA 65 F0 | 	shl	result1, #2
23eb0     03 FA 05 F1 | 	add	result1, #3
23eb4     F5 FA 01 F1 | 	add	result1, ptr__dat__
23eb8     FD FA C1 FA | 	rdbyte	result1, result1
23ebc     00 00 90 FD | 	jmp	#_scantochar_ret
23ec0                 | LR__2714
23ec0                 | _scantochar_ret
23ec0     2D 00 64 FD | 	ret
23ec4                 | 
23ec4                 | _program
23ec4     01 4A 05 F6 | 	mov	COUNT_, #1
23ec8     A8 00 A0 FD | 	call	#pushregs_
23ecc     70 FC BF FD | 	call	#_startpsram
23ed0     40 12 06 F6 | 	mov	arg01, #64
23ed4     00 14 06 F6 | 	mov	arg02, #0
23ed8     00 16 06 F6 | 	mov	arg03, #0
23edc     A0 FC BF FD | 	call	#_startvideo
23ee0     37 00 00 FF 
23ee4     14 E4 05 F1 | 	add	objptr, ##28180
23ee8     F2 12 02 FB | 	rdlong	arg01, objptr
23eec     00 14 06 F6 | 	mov	arg02, #0
23ef0     F0 03 00 FF 
23ef4     00 16 06 F6 | 	mov	arg03, ##516096
23ef8     2B 00 00 FF 
23efc     48 E5 85 F1 | 	sub	objptr, ##22344
23f00     E0 2E B0 FD | 	call	#_audio096_spin2_start
23f04     FE 16 02 F6 | 	mov	arg03, result2
23f08     2B 00 00 FF 
23f0c     30 E5 05 F1 | 	add	objptr, ##22320
23f10     F2 FA 61 FC | 	wrlong	result1, objptr
23f14     14 E4 05 F1 | 	add	objptr, #20
23f18     F2 16 62 FC | 	wrlong	arg03, objptr
23f1c     37 00 00 FF 
23f20     10 E4 85 F1 | 	sub	objptr, ##28176
23f24     32 12 06 F6 | 	mov	arg01, #50
23f28     80 38 B0 FD | 	call	#__system___waitms
23f2c     37 00 00 FF 
23f30     10 E4 05 F1 | 	add	objptr, ##28176
23f34     F2 12 02 FB | 	rdlong	arg01, objptr
23f38     37 00 00 FF 
23f3c     10 E4 85 F1 | 	sub	objptr, ##28176
23f40     14 12 06 F1 | 	add	arg01, #20
23f44     20 00 80 FF 
23f48     09 01 58 FC | 	wrword	##16384, arg01
23f4c     F8 2B B0 FD | 	call	#_usbnew_spin2_start
23f50     37 00 00 FF 
23f54     04 E4 05 F1 | 	add	objptr, ##28164
23f58     F2 FA 61 FC | 	wrlong	result1, objptr
23f5c                 | '   mouse_limits[0] := xlim
23f5c     0F 00 00 FF 
23f60     C8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
23f64     01 00 80 FF 
23f68     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
23f6c                 | '   mouse_limits[1] := ylim
23f6c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23f70     01 00 80 FF 
23f74     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
23f78     36 00 00 FF 
23f7c     F3 E4 85 F1 | 	sub	objptr, ##27891
23f80     F2 12 02 F6 | 	mov	arg01, objptr
23f84     11 E5 85 F1 | 	sub	objptr, #273
23f88     C4 12 06 F1 | 	add	arg01, #196
23f8c                 | '   mouse_outptr := ptr
23f8c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23f90     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
23f94     0F 00 00 FF 
23f98     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
23f9c     16 00 00 FF 
23fa0     CA EA 05 F1 | 	add	ptr__dat__, ##11466
23fa4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
23fa8     16 00 00 FF 
23fac     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
23fb0     10 12 06 F6 | 	mov	arg01, #16
23fb4     C4 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
23fb8     10 12 06 F6 | 	mov	arg01, #16
23fbc     20 14 06 F6 | 	mov	arg02, #32
23fc0     20 16 06 F6 | 	mov	arg03, #32
23fc4     44 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
23fc8     09 12 C6 F9 | 	decod	arg01, #9
23fcc     2C 15 06 F6 | 	mov	arg02, #300
23fd0     CC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
23fd4     F2 16 02 F6 | 	mov	arg03, objptr
23fd8     50 00 00 FF 
23fdc     44 E5 05 F1 | 	add	objptr, ##41284
23fe0     F2 14 02 F6 | 	mov	arg02, objptr
23fe4     0A 17 62 FC | 	wrlong	arg03, arg02
23fe8     04 14 06 F1 | 	add	arg02, #4
23fec     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
23ff0     EF 14 02 F6 | 	mov	arg02, entryptr__
23ff4     1E FA 05 F6 | 	mov	result1, #30
23ff8     28 E4 61 FD | 	setq	objptr
23ffc     0A FB F1 FC | 	coginit	result1, arg02 wc
24000     01 FA 65 C6 |  if_b	neg	result1, #1
24004     04 E4 85 F1 | 	sub	objptr, #4
24008     F2 FA 61 FC | 	wrlong	result1, objptr
2400c     01 00 00 FF 
24010     8C E5 05 F1 | 	add	objptr, ##908
24014     F2 00 68 FC | 	wrlong	#0, objptr
24018     1B 00 00 FF 
2401c     98 E4 85 F1 | 	sub	objptr, ##13976
24020     F2 04 68 FC | 	wrlong	#2, objptr
24024     04 E4 05 F1 | 	add	objptr, #4
24028     F2 26 69 FC | 	wrlong	#147, objptr
2402c     04 E4 05 F1 | 	add	objptr, #4
24030     F2 34 69 FC | 	wrlong	#154, objptr
24034     04 E4 05 F1 | 	add	objptr, #4
24038     F2 08 68 FC | 	wrlong	#4, objptr
2403c     04 E4 85 F1 | 	sub	objptr, #4
24040     F2 16 02 FB | 	rdlong	arg03, objptr
24044     14 E4 85 F1 | 	sub	objptr, #20
24048     F2 16 62 FC | 	wrlong	arg03, objptr
2404c     04 E4 05 F1 | 	add	objptr, #4
24050     F2 00 68 FC | 	wrlong	#0, objptr
24054     04 E4 05 F1 | 	add	objptr, #4
24058     F2 00 68 FC | 	wrlong	#0, objptr
2405c     19 00 00 FF 
24060     0C E5 05 F1 | 	add	objptr, ##13068
24064     F2 02 68 FC | 	wrlong	#1, objptr
24068     01 00 00 FF 
2406c     98 E5 05 F1 | 	add	objptr, ##920
24070     F2 00 68 FC | 	wrlong	#0, objptr
24074     01 00 00 FF 
24078     00 EA 05 F1 | 	add	ptr__dat__, ##512
2407c     08 E4 05 F1 | 	add	objptr, #8
24080     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
24084     04 E4 85 F1 | 	sub	objptr, #4
24088     03 00 80 FF 
2408c     F2 3C 69 FC | 	wrlong	##1694, objptr
24090     0D 00 00 FF 
24094     74 E4 85 F1 | 	sub	objptr, ##6772
24098     F2 18 68 FC | 	wrlong	#12, objptr
2409c     45 00 00 FF 
240a0     64 E4 85 F1 | 	sub	objptr, ##35428
240a4     01 00 00 FF 
240a8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
240ac     E8 D7 BF FD | 	call	#_init_commands
240b0     5C F6 BF FD | 	call	#_init_error_strings
240b4     E0 ED BF FD | 	call	#_init_audio
240b8     C8 20 BF FD | 	call	#_do_new
240bc     37 00 00 FF 
240c0     3C E4 05 F1 | 	add	objptr, ##28220
240c4     F2 12 02 FB | 	rdlong	arg01, objptr
240c8     04 E4 85 F1 | 	sub	objptr, #4
240cc     F2 14 02 FB | 	rdlong	arg02, objptr
240d0     37 00 00 FF 
240d4     38 E4 85 F1 | 	sub	objptr, ##28216
240d8     80 17 B0 FD | 	call	#_hg010b_spin2_cls
240dc     37 00 00 FF 
240e0     40 E4 05 F1 | 	add	objptr, ##28224
240e4     F2 12 02 FB | 	rdlong	arg01, objptr
240e8     37 00 00 FF 
240ec     40 E4 85 F1 | 	sub	objptr, ##28224
240f0     E8 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
240f4                 | ' 
240f4                 | ' leading_spaces:=amount
240f4     01 00 00 FF 
240f8     B6 E4 05 F1 | 	add	objptr, ##694
240fc     F2 04 68 FC | 	wrlong	#2, objptr
24100     01 00 00 FF 
24104     B6 E4 85 F1 | 	sub	objptr, ##694
24108     C0 01 00 FF 
2410c     9A 27 06 F6 | 	mov	local01, ##@LR__6115
24110     3D 12 06 F6 | 	mov	arg01, #61
24114     3C 14 06 F6 | 	mov	arg02, #60
24118     3B 16 06 F6 | 	mov	arg03, #59
2411c     3A 18 06 F6 | 	mov	arg04, #58
24120     1C 81 B0 FD | 	call	#__system___vfs_open_sdcardx
24124     FD 14 02 F6 | 	mov	arg02, result1
24128     13 13 02 F6 | 	mov	arg01, local01
2412c     54 37 B0 FD | 	call	#__system___mount
24130     C0 01 00 FF 
24134     9E 13 06 F6 | 	mov	arg01, ##@LR__6116
24138     08 3A B0 FD | 	call	#__system___chdir
2413c     C0 01 00 FF 
24140     A6 27 06 F6 | 	mov	local01, ##@LR__6117
24144     4A 00 00 FF 
24148     94 E4 05 F1 | 	add	objptr, ##38036
2414c     F2 26 62 FC | 	wrlong	local01, objptr
24150     13 00 00 FF 
24154     60 E4 85 F1 | 	sub	objptr, ##9824
24158     F2 12 02 FB | 	rdlong	arg01, objptr
2415c     37 00 00 FF 
24160     34 E4 85 F1 | 	sub	objptr, ##28212
24164     01 12 66 F0 | 	shl	arg01, #1
24168     01 14 06 F6 | 	mov	arg02, #1
2416c     AC 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
24170                 | ' init_commands
24170                 | ' init_error_strings
24170                 | ' init_audio
24170                 | ' do_new
24170                 | ' cls(ink, paper)
24170                 | ' v.setfontfamily(font) 				' use ST Mono font
24170                 | ' v.setleadingspaces(2)
24170                 | ' mount "/sd", _vfs_open_sdcard()
24170                 | ' chdir "/sd/bas"
24170                 | ' currentdir$="/sd/bas"
24170                 | ' position 2*editor_spaces,1 : print ver$
24170     00 12 06 F6 | 	mov	arg01, #0
24174     E4 8F B0 FD | 	call	#__system___getiolock_0616
24178     FD 12 02 F6 | 	mov	arg01, result1
2417c     38 33 B0 FD | 	call	#__system___lockmem
24180     18 00 00 FF 
24184     40 EB 05 F1 | 	add	ptr__dat__, ##12608
24188     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
2418c     18 00 00 FF 
24190     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
24194     00 12 06 F6 | 	mov	arg01, #0
24198     00 16 06 F6 | 	mov	arg03, #0
2419c     10 40 B0 FD | 	call	#__system___basic_print_string
241a0     00 12 06 F6 | 	mov	arg01, #0
241a4     0A 14 06 F6 | 	mov	arg02, #10
241a8     00 16 06 F6 | 	mov	arg03, #0
241ac     A8 3F B0 FD | 	call	#__system___basic_print_char
241b0     00 12 06 F6 | 	mov	arg01, #0
241b4     A4 8F B0 FD | 	call	#__system___getiolock_0616
241b8     FD 00 68 FC | 	wrlong	#0, result1
241bc     52 00 00 FF 
241c0     D0 E4 05 F1 | 	add	objptr, ##42192
241c4     F2 12 02 FB | 	rdlong	arg01, objptr
241c8     0F 00 00 FF 
241cc     74 E4 85 F1 | 	sub	objptr, ##7796
241d0     F2 26 02 FB | 	rdlong	local01, objptr
241d4     43 00 00 FF 
241d8     5C E4 85 F1 | 	sub	objptr, ##34396
241dc     13 13 82 F1 | 	sub	arg01, local01
241e0     00 14 06 F6 | 	mov	arg02, #0
241e4     0A 16 06 F6 | 	mov	arg03, #10
241e8     A0 55 B0 FD | 	call	#__system__Number_S
241ec     FD 12 02 F6 | 	mov	arg01, result1
241f0     C0 01 00 FF 
241f4     AE 15 06 F6 | 	mov	arg02, ##@LR__6118
241f8     18 33 B0 FD | 	call	#__system___string_concat
241fc     FD 26 02 F6 | 	mov	local01, result1
24200     50 00 00 FF 
24204     38 E5 05 F1 | 	add	objptr, ##41272
24208     F2 26 62 FC | 	wrlong	local01, objptr
2420c     50 00 00 FF 
24210     38 E5 85 F1 | 	sub	objptr, ##41272
24214                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
24214     00 12 06 F6 | 	mov	arg01, #0
24218     40 8F B0 FD | 	call	#__system___getiolock_0616
2421c     FD 12 02 F6 | 	mov	arg01, result1
24220     94 32 B0 FD | 	call	#__system___lockmem
24224     50 00 00 FF 
24228     38 E5 05 F1 | 	add	objptr, ##41272
2422c     F2 14 02 FB | 	rdlong	arg02, objptr
24230     50 00 00 FF 
24234     38 E5 85 F1 | 	sub	objptr, ##41272
24238     00 12 06 F6 | 	mov	arg01, #0
2423c     00 16 06 F6 | 	mov	arg03, #0
24240     6C 3F B0 FD | 	call	#__system___basic_print_string
24244     00 12 06 F6 | 	mov	arg01, #0
24248     0A 14 06 F6 | 	mov	arg02, #10
2424c     00 16 06 F6 | 	mov	arg03, #0
24250     04 3F B0 FD | 	call	#__system___basic_print_char
24254     00 12 06 F6 | 	mov	arg01, #0
24258     00 8F B0 FD | 	call	#__system___getiolock_0616
2425c     FD 00 68 FC | 	wrlong	#0, result1
24260     37 00 00 FF 
24264     34 E4 05 F1 | 	add	objptr, ##28212
24268     F2 12 02 FB | 	rdlong	arg01, objptr
2426c     37 00 00 FF 
24270     34 E4 85 F1 | 	sub	objptr, ##28212
24274     01 12 66 F0 | 	shl	arg01, #1
24278     04 14 06 F6 | 	mov	arg02, #4
2427c     9C 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
24280                 | ' position 2*editor_spaces,4 : print "Ready"
24280     00 12 06 F6 | 	mov	arg01, #0
24284     D4 8E B0 FD | 	call	#__system___getiolock_0616
24288     FD 12 02 F6 | 	mov	arg01, result1
2428c     28 32 B0 FD | 	call	#__system___lockmem
24290     C0 01 00 FF 
24294     C0 15 06 F6 | 	mov	arg02, ##@LR__6119
24298     00 12 06 F6 | 	mov	arg01, #0
2429c     00 16 06 F6 | 	mov	arg03, #0
242a0     0C 3F B0 FD | 	call	#__system___basic_print_string
242a4     00 12 06 F6 | 	mov	arg01, #0
242a8     0A 14 06 F6 | 	mov	arg02, #10
242ac     00 16 06 F6 | 	mov	arg03, #0
242b0     A4 3E B0 FD | 	call	#__system___basic_print_char
242b4     00 12 06 F6 | 	mov	arg01, #0
242b8     A0 8E B0 FD | 	call	#__system___getiolock_0616
242bc     FD 00 68 FC | 	wrlong	#0, result1
242c0     00 14 06 F6 | 	mov	arg02, #0
242c4     01 14 D6 F7 | 	test	arg02, #1 wc
242c8     5A 4C 64 FD | 	drvc	#38
242cc     01 14 D6 F7 | 	test	arg02, #1 wc
242d0     5A 4E 64 FD | 	drvc	#39
242d4     C0 01 00 FF 
242d8     C6 27 06 F6 | 	mov	local01, ##@LR__6120
242dc     52 00 00 FF 
242e0     FC E4 05 F1 | 	add	objptr, ##42236
242e4     F2 26 62 FC | 	wrlong	local01, objptr
242e8     04 E4 05 F1 | 	add	objptr, #4
242ec     FF FF FF FF 
242f0     F2 FE 6B FC | 	wrlong	##-1, objptr
242f4     0C E4 05 F1 | 	add	objptr, #12
242f8     F2 00 68 FC | 	wrlong	#0, objptr
242fc     52 00 00 FF 
24300     0C E5 85 F1 | 	sub	objptr, ##42252
24304                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
24304                 | ' loadname="noname.bas"
24304                 | ' do_insert=-1
24304                 | ' inload=0
24304                 | ' 
24304                 | ' open "/sd/bas/autorun.bas" for input as #9
24304     C0 01 00 FF 
24308     D1 15 06 F6 | 	mov	arg02, ##@LR__6121
2430c     09 12 06 F6 | 	mov	arg01, #9
24310     00 16 06 F6 | 	mov	arg03, #0
24314     A4 3D B0 FD | 	call	#__system___basic_open_string
24318     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2431c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
24320     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
24324     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24328     52 00 00 FF 
2432c     10 E5 05 F1 | 	add	objptr, ##42256
24330     F2 FA 61 FC | 	wrlong	result1, objptr
24334     52 00 00 FF 
24338     10 E5 85 F1 | 	sub	objptr, ##42256
2433c                 | ' err=geterr()
2433c                 | ' close #9
2433c     09 12 06 F6 | 	mov	arg01, #9
24340     D0 84 B0 FD | 	call	#__system__close
24344                 | ' if err=0 then line$="run autorun.bas" : interpret
24344     52 00 00 FF 
24348     10 E5 05 F1 | 	add	objptr, ##42256
2434c     F2 26 0A FB | 	rdlong	local01, objptr wz
24350     52 00 00 FF 
24354     10 E5 85 F1 | 	sub	objptr, ##42256
24358     C0 01 00 AF 
2435c     E5 27 06 A6 |  if_e	mov	local01, ##@LR__6122
24360     37 00 00 AF 
24364     1C E4 05 A1 |  if_e	add	objptr, ##28188
24368     F2 26 62 AC |  if_e	wrlong	local01, objptr
2436c     37 00 00 AF 
24370     1C E4 85 A1 |  if_e	sub	objptr, ##28188
24374     14 D5 BD AD |  if_e	call	#_interpret
24378                 | ' 
24378                 | ' 
24378                 | ' '-------------------------------------------------------------------------------------------------------- 
24378                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
24378                 | ' '--------------------------------------------------------------------------------------------------------
24378                 | ' 
24378                 | ' do
24378                 | LR__2720
24378     88 C4 BD FD | 	call	#_edit
2437c     FD 26 02 F6 | 	mov	local01, result1
24380     37 00 00 FF 
24384     1C E4 05 F1 | 	add	objptr, ##28188
24388     F2 26 62 FC | 	wrlong	local01, objptr
2438c     37 00 00 FF 
24390     1C E4 85 F1 | 	sub	objptr, ##28188
24394     F4 D4 BD FD | 	call	#_interpret
24398     C0 01 00 FF 
2439c     F5 27 06 F6 | 	mov	local01, ##@LR__6123
243a0     37 00 00 FF 
243a4     1C E4 05 F1 | 	add	objptr, ##28188
243a8     F2 26 62 FC | 	wrlong	local01, objptr
243ac     37 00 00 FF 
243b0     1C E4 85 F1 | 	sub	objptr, ##28188
243b4     C0 FF 9F FD | 	jmp	#LR__2720
243b8     A7 F0 03 F6 | 	mov	ptra, fp
243bc     B2 00 A0 FD | 	call	#popregs_
243c0                 | _program_ret
243c0     2D 00 64 FD | 	ret
243c4                 | 
243c4                 | ' '' this is not a main program.
243c4                 | ' 
243c4                 | ' '****************************************************************************************************************
243c4                 | ' '                                                                                                             	*
243c4                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
243c4                 | ' '                                                                                                            	*
243c4                 | ' ' base - HDMI base pin												*
243c4                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
243c4                 | ' '														*
243c4                 | ' '														*
243c4                 | ' '****************************************************************************************************************
243c4                 | ' 
243c4                 | ' pub start(base,mb):result |i
243c4                 | _hg010b_spin2_start
243c4                 | ' 
243c4                 | ' '--------------------------- initialize pointers and variables
243c4                 | ' 
243c4                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
243c4     34 E4 05 F1 | 	add	objptr, #52
243c8     F2 FA 01 F6 | 	mov	result1, objptr
243cc     28 E4 85 F1 | 	sub	objptr, #40
243d0     F2 FA 61 FC | 	wrlong	result1, objptr
243d4                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
243d4                 | ' hdmibase:=base							' HDMI base pin, 8*n
243d4     18 E4 05 F1 | 	add	objptr, #24
243d8     F2 12 62 FC | 	wrlong	arg01, objptr
243dc                 | ' mailbox_ptr:=mb		
243dc     04 E4 05 F1 | 	add	objptr, #4
243e0     F2 14 62 FC | 	wrlong	arg02, objptr
243e4                 | ' mailbox0:=mb				' PSRAM mailbox pointer
243e4     C1 E5 05 F1 | 	add	objptr, #449
243e8     F2 14 62 FC | 	wrlong	arg02, objptr
243ec                 | ' sprite_ptr:=@spr1ptr
243ec     D8 E4 85 F1 | 	sub	objptr, #216
243f0     F2 FA 01 F6 | 	mov	result1, objptr
243f4     E5 E4 85 F1 | 	sub	objptr, #229
243f8     F2 FA 61 FC | 	wrlong	result1, objptr
243fc                 | ' 
243fc                 | ' 		'
243fc                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
243fc     E5 E4 05 F1 | 	add	objptr, #229
24400     F2 FA 01 FB | 	rdlong	result1, objptr
24404     D0 FA 05 F1 | 	add	result1, #208
24408     FD 10 58 FC | 	wrword	#8, result1
2440c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
2440c     F2 16 02 FB | 	rdlong	arg03, objptr
24410     D2 16 06 F1 | 	add	arg03, #210
24414     0B 21 58 FC | 	wrword	#16, arg03
24418                 | ' leading_spaces:=0				'
24418     A5 E5 05 F1 | 	add	objptr, #421
2441c     F2 00 68 FC | 	wrlong	#0, objptr
24420                 | ' 
24420                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
24420     99 E4 85 F1 | 	sub	objptr, #153
24424     00 00 A0 FF 
24428     F2 0E 68 FC | 	wrlong	##1073741831, objptr
2442c                 | ' emptydl[1]:=0
2442c     04 E4 05 F1 | 	add	objptr, #4
24430     F2 00 68 FC | 	wrlong	#0, objptr
24434                 | ' 
24434                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
24434                 | ' 
24434                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
24434     28 E5 85 F1 | 	sub	objptr, #296
24438     F2 02 68 FC | 	wrlong	#1, objptr
2443c                 | ' if s_debug<>0
2443c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
2443c     20 00 80 FF 
24440     F2 00 68 FC | 	wrlong	##16384, objptr
24444     F9 E4 85 F1 | 	sub	objptr, #249
24448                 | ' setmode()							' set the mode, see below
24448     18 03 B0 FD | 	call	#_hg010b_spin2_setmode
2444c                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
2444c     49 E4 05 F1 | 	add	objptr, #73
24450     F2 FA 01 F6 | 	mov	result1, objptr
24454     35 E4 85 F1 | 	sub	objptr, #53
24458     F2 FA 61 FC | 	wrlong	result1, objptr
2445c                 | ' cursor_ptr:=@cursor_x						
2445c     28 E4 05 F1 | 	add	objptr, #40
24460     F2 16 02 F6 | 	mov	arg03, objptr
24464     2C E4 85 F1 | 	sub	objptr, #44
24468     F2 16 62 FC | 	wrlong	arg03, objptr
2446c                 | ' fontnum:=0  							' start with a PC type font 
2446c     55 E4 05 F1 | 	add	objptr, #85
24470     F2 00 68 FC | 	wrlong	#0, objptr
24474                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
24474     1C E4 05 F1 | 	add	objptr, #28
24478     F2 12 02 F6 | 	mov	arg01, objptr
2447c     81 E4 85 F1 | 	sub	objptr, #129
24480     1C 00 00 FF 
24484     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14464
24488     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
2448c     1C 00 00 FF 
24490     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14464
24494     10 16 06 F6 | 	mov	arg03, #16
24498     CC 2E B0 FD | 	call	#__system____builtin_memmove
2449c                 | ' leading_spaces:=0
2449c     01 00 00 FF 
244a0     B6 E4 05 F1 | 	add	objptr, ##694
244a4     F2 00 68 FC | 	wrlong	#0, objptr
244a8     01 00 00 FF 
244ac     B6 E4 85 F1 | 	sub	objptr, ##694
244b0                 | ' '---------------------------- initialize a cursor (MSDOS type)
244b0                 | ' 
244b0                 | ' initcursor(154)
244b0     9A 12 06 F6 | 	mov	arg01, #154
244b4     78 00 B0 FD | 	call	#_hg010b_spin2_initcursor
244b8                 | ' 
244b8                 | ' '---------------------------- start the cog
244b8                 | ' 
244b8                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
244b8     1C 00 00 FF 
244bc     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14480
244c0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
244c4     1C 00 00 FF 
244c8     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14480
244cc     14 E4 05 F1 | 	add	objptr, #20
244d0     10 FA 05 F6 | 	mov	result1, #16
244d4     28 E4 61 FD | 	setq	objptr
244d8     0A FB F1 FC | 	coginit	result1, arg02 wc
244dc     01 FA 65 C6 |  if_b	neg	result1, #1
244e0     1C E4 05 F1 | 	add	objptr, #28
244e4     F2 FA 61 FC | 	wrlong	result1, objptr
244e8     30 E4 85 F1 | 	sub	objptr, #48
244ec                 | ' waitms(40)							' wait for stabilize
244ec     28 12 06 F6 | 	mov	arg01, #40
244f0     B8 32 B0 FD | 	call	#__system___waitms
244f4                 | ' return cog							' return the driver's cog #
244f4     30 E4 05 F1 | 	add	objptr, #48
244f8     F2 FA 01 FB | 	rdlong	result1, objptr
244fc     30 E4 85 F1 | 	sub	objptr, #48
24500                 | _hg010b_spin2_start_ret
24500     2D 00 64 FD | 	ret
24504                 | 
24504                 | ' 
24504                 | ' 
24504                 | ' '**************************************************************************************************************** 
24504                 | ' '                                                                                                             	*
24504                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
24504                 | ' '  Mode number - see start() above or bits below								*
24504                 | ' '                                                                                                             	*
24504                 | ' '****************************************************************************************************************
24504                 | ' 
24504                 | ' 
24504                 | ' pub restorepalette()
24504                 | _hg010b_spin2_restorepalette
24504                 | ' 
24504                 | ' longmove(@ataripalette,@ataripalette2,256)
24504     18 00 00 FF 
24508     40 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
2450c     F7 12 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
24510     02 00 00 FF 
24514     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
24518     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
2451c     1A 00 00 FF 
24520     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
24524     00 17 06 F6 | 	mov	arg03, #256
24528     D0 2E B0 FD | 	call	#__system__longmove
2452c                 | _hg010b_spin2_restorepalette_ret
2452c     2D 00 64 FD | 	ret
24530                 | 
24530                 | ' 
24530                 | ' '---------------------------- initialize a cursor (MSDOS type)
24530                 | ' pub initcursor(color) |i
24530                 | _hg010b_spin2_initcursor
24530     03 4A 05 F6 | 	mov	COUNT_, #3
24534     A8 00 A0 FD | 	call	#pushregs_
24538     09 27 02 F6 | 	mov	local01, arg01
2453c                 | ' 
2453c                 | ' cursor_x:=0							' place the cursor at 0:0
2453c     3C E4 05 F1 | 	add	objptr, #60
24540     F2 00 58 FC | 	wrword	#0, objptr
24544                 | ' cursor_y:=0
24544     02 E4 05 F1 | 	add	objptr, #2
24548     F2 00 48 FC | 	wrbyte	#0, objptr
2454c                 | ' repeat i from 0 to 111
2454c     00 28 06 F6 | 	mov	local02, #0
24550     F8 E5 05 F1 | 	add	objptr, #504
24554     97 1A 48 FB | 	callpa	#(@LR__2732-@LR__2730)>>2,fcache_load_ptr_
24558                 | LR__2730
24558                 | '   cursor[i]:=0
24558     14 2B 02 F6 | 	mov	local03, local02
2455c     F2 2A 02 F1 | 	add	local03, objptr
24560     15 01 48 FC | 	wrbyte	#0, local03
24564     01 28 06 F1 | 	add	local02, #1
24568     70 28 56 F2 | 	cmps	local02, #112 wc
2456c     E8 FF 9F CD |  if_b	jmp	#LR__2730
24570                 | ' repeat i from 112 to 127
24570     70 28 06 F6 | 	mov	local02, #112
24574                 | LR__2731
24574                 | '   cursor[i]:=color  
24574     14 2B 02 F6 | 	mov	local03, local02
24578     F2 2A 02 F1 | 	add	local03, objptr
2457c     15 27 42 FC | 	wrbyte	local01, local03
24580     01 28 06 F1 | 	add	local02, #1
24584     80 28 16 F2 | 	cmp	local02, #128 wc
24588     E8 FF 9F CD |  if_b	jmp	#LR__2731
2458c                 | LR__2732
2458c                 | ' 'repeat i from 0 to 127
2458c                 | ' '  if ((i/8)//2)
2458c                 | ' '    cursor[i]:=15
2458c                 | ' '  else
2458c                 | ' '    cursor[i]:=0
2458c                 | ' '  if i>=120    
2458c                 | ' '    cursor[i]:=40
2458c                 | ' setspriteptr(17,@cursor)
2458c     F2 14 02 F6 | 	mov	arg02, objptr
24590     01 00 00 FF 
24594     36 E4 85 F1 | 	sub	objptr, ##566
24598     11 12 06 F6 | 	mov	arg01, #17
2459c     DC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
245a0                 | ' setspritesize(17,8,16)
245a0     11 12 06 F6 | 	mov	arg01, #17
245a4     08 14 06 F6 | 	mov	arg02, #8
245a8     10 16 06 F6 | 	mov	arg03, #16
245ac     5C 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
245b0                 | ' setspritepos(17,0,0)
245b0     11 12 06 F6 | 	mov	arg01, #17
245b4     00 14 06 F6 | 	mov	arg02, #0
245b8     00 16 06 F6 | 	mov	arg03, #0
245bc     E4 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
245c0                 | ' cursorshape:=14
245c0     0B 00 00 FF 
245c4     C6 E4 05 F1 | 	add	objptr, ##5830
245c8     F2 1C 68 FC | 	wrlong	#14, objptr
245cc                 | ' cursorcolor:=color
245cc     04 E4 85 F1 | 	sub	objptr, #4
245d0     F2 26 62 FC | 	wrlong	local01, objptr
245d4     0B 00 00 FF 
245d8     C2 E4 85 F1 | 	sub	objptr, ##5826
245dc     A7 F0 03 F6 | 	mov	ptra, fp
245e0     B2 00 A0 FD | 	call	#popregs_
245e4                 | _hg010b_spin2_initcursor_ret
245e4     2D 00 64 FD | 	ret
245e8                 | 
245e8                 | ' 
245e8                 | ' pub setcursorshape(shape) | i
245e8                 | _hg010b_spin2_setcursorshape
245e8                 | ' 
245e8                 | ' cursorshape:=shape
245e8     0B 00 00 FF 
245ec     C6 E4 05 F1 | 	add	objptr, ##5830
245f0     F2 12 62 FC | 	wrlong	arg01, objptr
245f4                 | ' repeat i from 0 to (8*cursorshape)-1
245f4     00 00 06 F6 | 	mov	_var01, #0
245f8     09 03 02 F6 | 	mov	_var02, arg01
245fc     03 02 66 F0 | 	shl	_var02, #3
24600     01 02 86 F1 | 	sub	_var02, #1
24604     00 02 56 F2 | 	cmps	_var02, #0 wc
24608     01 04 86 F6 | 	negc	_var03, #1
2460c     02 07 02 F6 | 	mov	_var04, _var03
24610     02 03 02 F1 | 	add	_var02, _var03
24614     0A 00 00 FF 
24618     90 E4 85 F1 | 	sub	objptr, ##5264
2461c     97 0C 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
24620                 | LR__2740
24620                 | '   cursor[i]:=0
24620     00 05 02 F6 | 	mov	_var03, _var01
24624     F2 04 02 F1 | 	add	_var03, objptr
24628     02 01 48 FC | 	wrbyte	#0, _var03
2462c     03 01 02 F1 | 	add	_var01, _var04
24630     01 01 0A F2 | 	cmp	_var01, _var02 wz
24634     E8 FF 9F 5D |  if_ne	jmp	#LR__2740
24638                 | LR__2741
24638                 | ' repeat i from 8*cursorshape to 127
24638     0A 00 00 FF 
2463c     90 E4 05 F1 | 	add	objptr, ##5264
24640     F2 06 02 FB | 	rdlong	_var04, objptr
24644     03 01 02 F6 | 	mov	_var01, _var04
24648     03 00 66 F0 | 	shl	_var01, #3
2464c     0B 00 00 FF 
24650     C6 E4 85 F1 | 	sub	objptr, ##5830
24654     03 06 66 F0 | 	shl	_var04, #3
24658     80 06 56 F2 | 	cmps	_var04, #128 wc
2465c     01 04 A6 F6 | 	negnc	_var03, #1
24660     7F 02 06 F6 | 	mov	_var02, #127
24664     02 03 02 F1 | 	add	_var02, _var03
24668     97 1A 48 FB | 	callpa	#(@LR__2743-@LR__2742)>>2,fcache_load_ptr_
2466c                 | LR__2742
2466c                 | '   cursor[i]:=cursorcolor
2466c     00 07 02 F6 | 	mov	_var04, _var01
24670     01 00 00 FF 
24674     36 E4 05 F1 | 	add	objptr, ##566
24678     F2 06 02 F1 | 	add	_var04, objptr
2467c     0A 00 00 FF 
24680     8C E4 05 F1 | 	add	objptr, ##5260
24684     F2 12 02 FB | 	rdlong	arg01, objptr
24688     0B 00 00 FF 
2468c     C2 E4 85 F1 | 	sub	objptr, ##5826
24690     03 13 42 FC | 	wrbyte	arg01, _var04
24694     02 01 02 F1 | 	add	_var01, _var03
24698     01 01 0A F2 | 	cmp	_var01, _var02 wz
2469c     CC FF 9F 5D |  if_ne	jmp	#LR__2742
246a0                 | LR__2743
246a0                 | _hg010b_spin2_setcursorshape_ret
246a0     2D 00 64 FD | 	ret
246a4                 | 
246a4                 | ' 
246a4                 | ' pub setcursorcolor(color) | i
246a4                 | _hg010b_spin2_setcursorcolor
246a4                 | ' 
246a4                 | ' cursorcolor:=color
246a4     0B 00 00 FF 
246a8     C2 E4 05 F1 | 	add	objptr, ##5826
246ac     F2 12 62 FC | 	wrlong	arg01, objptr
246b0                 | ' repeat i from 0 to (8*cursorshape)-1
246b0     00 12 06 F6 | 	mov	arg01, #0
246b4     04 E4 05 F1 | 	add	objptr, #4
246b8     F2 00 02 FB | 	rdlong	_var01, objptr
246bc     03 00 66 F0 | 	shl	_var01, #3
246c0     01 00 86 F1 | 	sub	_var01, #1
246c4     00 00 56 F2 | 	cmps	_var01, #0 wc
246c8     01 02 86 F6 | 	negc	_var02, #1
246cc     01 05 02 F6 | 	mov	_var03, _var02
246d0     01 01 02 F1 | 	add	_var01, _var02
246d4     0A 00 00 FF 
246d8     90 E4 85 F1 | 	sub	objptr, ##5264
246dc     97 0C 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
246e0                 | LR__2750
246e0                 | '   cursor[i]:=0
246e0     09 03 02 F6 | 	mov	_var02, arg01
246e4     F2 02 02 F1 | 	add	_var02, objptr
246e8     01 01 48 FC | 	wrbyte	#0, _var02
246ec     02 13 02 F1 | 	add	arg01, _var03
246f0     00 13 0A F2 | 	cmp	arg01, _var01 wz
246f4     E8 FF 9F 5D |  if_ne	jmp	#LR__2750
246f8                 | LR__2751
246f8                 | ' repeat i from 8*cursorshape to 127
246f8     0A 00 00 FF 
246fc     90 E4 05 F1 | 	add	objptr, ##5264
24700     F2 04 02 FB | 	rdlong	_var03, objptr
24704     02 13 02 F6 | 	mov	arg01, _var03
24708     03 12 66 F0 | 	shl	arg01, #3
2470c     0B 00 00 FF 
24710     C6 E4 85 F1 | 	sub	objptr, ##5830
24714     03 04 66 F0 | 	shl	_var03, #3
24718     80 04 56 F2 | 	cmps	_var03, #128 wc
2471c     01 02 A6 F6 | 	negnc	_var02, #1
24720     7F 00 06 F6 | 	mov	_var01, #127
24724     01 01 02 F1 | 	add	_var01, _var02
24728     97 1A 48 FB | 	callpa	#(@LR__2753-@LR__2752)>>2,fcache_load_ptr_
2472c                 | LR__2752
2472c                 | '   cursor[i]:=cursorcolor
2472c     09 05 02 F6 | 	mov	_var03, arg01
24730     01 00 00 FF 
24734     36 E4 05 F1 | 	add	objptr, ##566
24738     F2 04 02 F1 | 	add	_var03, objptr
2473c     0A 00 00 FF 
24740     8C E4 05 F1 | 	add	objptr, ##5260
24744     F2 06 02 FB | 	rdlong	_var04, objptr
24748     0B 00 00 FF 
2474c     C2 E4 85 F1 | 	sub	objptr, ##5826
24750     02 07 42 FC | 	wrbyte	_var04, _var03
24754     01 13 02 F1 | 	add	arg01, _var02
24758     00 13 0A F2 | 	cmp	arg01, _var01 wz
2475c     CC FF 9F 5D |  if_ne	jmp	#LR__2752
24760                 | LR__2753
24760                 | _hg010b_spin2_setcursorcolor_ret
24760     2D 00 64 FD | 	ret
24764                 | 
24764                 | '   
24764                 | '   
24764                 | '   
24764                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
24764                 | _hg010b_spin2_setmode
24764     02 4A 05 F6 | 	mov	COUNT_, #2
24768     A8 00 A0 FD | 	call	#pushregs_
2476c                 | ' 
2476c                 | ' 
2476c                 | ' dl_ptr:=@emptydl[0]
2476c     01 00 00 FF 
24770     1D E4 05 F1 | 	add	objptr, ##541
24774     F2 1A 02 F6 | 	mov	arg05, objptr
24778     FD E5 85 F1 | 	sub	objptr, #509
2477c     F2 1A 62 FC | 	wrlong	arg05, objptr
24780                 | ' 
24780                 | ' if cog>0 
24780     10 E4 05 F1 | 	add	objptr, #16
24784     F2 1A 02 FB | 	rdlong	arg05, objptr
24788     30 E4 85 F1 | 	sub	objptr, #48
2478c     01 1A 56 F2 | 	cmps	arg05, #1 wc
24790                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
24790     01 12 06 36 |  if_ae	mov	arg01, #1
24794     24 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
24798                 | ' xres:=1024
24798     01 00 00 FF 
2479c     26 E4 05 F1 | 	add	objptr, ##550
247a0     02 00 80 FF 
247a4     F2 00 68 FC | 	wrlong	##1024, objptr
247a8                 | ' yres:=600
247a8     04 E4 05 F1 | 	add	objptr, #4
247ac     01 00 80 FF 
247b0     F2 B0 68 FC | 	wrlong	##600, objptr
247b4                 | ' ppl:=(timings[3])
247b4     1C 00 00 FF 
247b8     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
247bc     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
247c0     51 E5 85 F1 | 	sub	objptr, #337
247c4     F2 1A 62 FC | 	wrlong	arg05, objptr
247c8                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
247c8     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
247cc     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
247d0     01 26 66 F0 | 	shl	local01, #1
247d4     80 E4 85 F1 | 	sub	objptr, #128
247d8     F2 26 62 FC | 	wrlong	local01, objptr
247dc                 | ' cpl1:=cpl '' todo remove
247dc     04 E4 05 F1 | 	add	objptr, #4
247e0     F2 26 62 FC | 	wrlong	local01, objptr
247e4                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
247e4     04 00 00 FF 
247e8     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
247ec     41 E4 85 F1 | 	sub	objptr, #65
247f0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
247f4                 | ' repeat i from 0 to 3
247f4     00 28 06 F6 | 	mov	local02, #0
247f8     04 00 00 FF 
247fc     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
24800     08 E4 05 F1 | 	add	objptr, #8
24804     97 20 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
24808                 | LR__2760
24808                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
24808     14 27 02 F6 | 	mov	local01, local02
2480c     02 26 66 F0 | 	shl	local01, #2
24810     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
24814     F2 1A 02 FB | 	rdlong	arg05, objptr
24818     11 1A 66 F0 | 	shl	arg05, #17
2481c     13 27 02 FB | 	rdlong	local01, local01
24820     0D 27 02 F1 | 	add	local01, arg05
24824     80 40 38 FF 
24828     00 26 06 F1 | 	add	local01, ##1887502336
2482c     14 1B 02 F6 | 	mov	arg05, local02
24830     02 1A 66 F0 | 	shl	arg05, #2
24834     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
24838     0D 27 62 FC | 	wrlong	local01, arg05
2483c     01 28 06 F1 | 	add	local02, #1
24840     04 28 56 F2 | 	cmps	local02, #4 wc
24844     C0 FF 9F CD |  if_b	jmp	#LR__2760
24848                 | LR__2761
24848     24 E4 85 F1 | 	sub	objptr, #36
2484c                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
2484c     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
24850     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
24854     1C 00 00 FF 
24858     64 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14436
2485c     14 26 66 FC | 	wrlong	local01, #20
24860                 | ' 'hubset(timings[10])
24860                 | ' waitms(1)                                                   	' wait for stabilization
24860     01 12 06 F6 | 	mov	arg01, #1
24864     44 2F B0 FD | 	call	#__system___waitms
24868     1C 00 00 FF 
2486c     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
24870     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
24874     61 E4 05 F1 | 	add	objptr, #97
24878     F2 28 62 FC | 	wrlong	local02, objptr
2487c     14 27 52 F6 | 	abs	local01, local02 wc
24880     04 26 46 F0 | 	shr	local01, #4
24884     13 27 82 F6 | 	negc	local01, local01
24888     9C E4 05 F1 | 	add	objptr, #156
2488c     F2 26 62 FC | 	wrlong	local01, objptr
24890     A4 E4 85 F1 | 	sub	objptr, #164
24894     F2 28 02 FB | 	rdlong	local02, objptr
24898     08 E4 05 F1 | 	add	objptr, #8
2489c     F2 26 02 FB | 	rdlong	local01, objptr
248a0     13 29 02 FD | 	qmul	local02, local01
248a4                 | ' lines:=timings[11]
248a4                 | ' t_lines:=lines/16
248a4                 | ' buflen:=cpl*lines						' framebuffer length in longs
248a4     29 E4 85 F1 | 	sub	objptr, #41
248a8     19 26 C6 F9 | 	decod	local01, #25
248ac     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
248b0     18 28 62 FD | 	getqx	local02
248b4     F2 28 62 FC | 	wrlong	local02, objptr
248b8     38 E4 85 F1 | 	sub	objptr, #56
248bc     02 28 66 F0 | 	shl	local02, #2
248c0     14 27 82 F1 | 	sub	local01, local02
248c4     F2 26 62 FC | 	wrlong	local01, objptr
248c8     FD E4 05 F1 | 	add	objptr, #253
248cc     F2 28 02 FB | 	rdlong	local02, objptr
248d0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
248d4     0D 29 02 FD | 	qmul	local02, arg05
248d8                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
248d8                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
248d8     F9 E4 85 F1 | 	sub	objptr, #249
248dc                 | ' mode_ptr:=@timings						' set pointers to timings
248dc     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
248e0                 | ' graphmode:=1024+512+192+48							' det global variable
248e0                 | ' makedl(graphmode)							' make a DL for the mode
248e0     03 00 00 FF 
248e4     F0 12 06 F6 | 	mov	arg01, ##1776
248e8     18 28 62 FD | 	getqx	local02
248ec     14 27 82 F1 | 	sub	local01, local02
248f0     F2 26 62 FC | 	wrlong	local01, objptr
248f4     14 E4 05 F1 | 	add	objptr, #20
248f8     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
248fc     79 E4 05 F1 | 	add	objptr, #121
24900     03 00 80 FF 
24904     F2 E0 69 FC | 	wrlong	##1776, objptr
24908     91 E4 85 F1 | 	sub	objptr, #145
2490c     1C 00 00 FF 
24910     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
24914     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
24918                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
24918     F2 26 02 FB | 	rdlong	local01, objptr
2491c     DD E4 05 F1 | 	add	objptr, #221
24920     F2 26 62 FC | 	wrlong	local01, objptr
24924                 | ' s_font_ptr:=font_ptr
24924     D5 E4 85 F1 | 	sub	objptr, #213
24928     F2 26 02 FB | 	rdlong	local01, objptr
2492c     D9 E4 05 F1 | 	add	objptr, #217
24930     F2 26 62 FC | 	wrlong	local01, objptr
24934                 | ' s_lines:=lines
24934     80 E4 85 F1 | 	sub	objptr, #128
24938     F2 26 02 FB | 	rdlong	local01, objptr
2493c     84 E4 05 F1 | 	add	objptr, #132
24940     F2 26 62 FC | 	wrlong	local01, objptr
24944                 | ' s_buflen:=buflen
24944     AD E4 85 F1 | 	sub	objptr, #173
24948     F2 26 02 FB | 	rdlong	local01, objptr
2494c     B5 E4 05 F1 | 	add	objptr, #181
24950     F2 26 62 FC | 	wrlong	local01, objptr
24954                 | ' s_cpl:=cpl
24954     94 E4 85 F1 | 	sub	objptr, #148
24958     F2 26 02 FB | 	rdlong	local01, objptr
2495c     90 E4 05 F1 | 	add	objptr, #144
24960     F2 26 62 FC | 	wrlong	local01, objptr
24964                 | ' s_cpl1:=cpl
24964     90 E4 85 F1 | 	sub	objptr, #144
24968     F2 26 02 FB | 	rdlong	local01, objptr
2496c     98 E4 05 F1 | 	add	objptr, #152
24970     F2 26 62 FC | 	wrlong	local01, objptr
24974                 | ' st_lines:=t_lines
24974     0C E4 05 F1 | 	add	objptr, #12
24978     F2 26 02 FB | 	rdlong	local01, objptr
2497c     04 E4 05 F1 | 	add	objptr, #4
24980     F2 26 62 FC | 	wrlong	local01, objptr
24984                 | ' ppl:=ppl/xzoom  
24984     28 E4 85 F1 | 	sub	objptr, #40
24988     F2 90 02 FB | 	rdlong	muldiva_, objptr
2498c     2C E4 05 F1 | 	add	objptr, #44
24990     F2 92 02 FB | 	rdlong	muldivb_, objptr
24994     05 E5 85 F1 | 	sub	objptr, #261
24998     BA 00 A0 FD | 	call	#divide_
2499c     D9 E4 05 F1 | 	add	objptr, #217
249a0     F2 92 62 FC | 	wrlong	muldivb_, objptr
249a4                 | ' s_ppl:=ppl
249a4     1C E4 05 F1 | 	add	objptr, #28
249a8     F2 92 62 FC | 	wrlong	muldivb_, objptr
249ac     F5 E4 85 F1 | 	sub	objptr, #245
249b0                 | ' waitms(20)							' wait 
249b0     14 12 06 F6 | 	mov	arg01, #20
249b4     F4 2D B0 FD | 	call	#__system___waitms
249b8                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
249b8     04 E4 05 F1 | 	add	objptr, #4
249bc     F2 12 02 FB | 	rdlong	arg01, objptr
249c0     04 E4 85 F1 | 	sub	objptr, #4
249c4     F2 16 02 FB | 	rdlong	arg03, objptr
249c8     09 17 82 F1 | 	sub	arg03, arg01
249cc     20 14 06 F6 | 	mov	arg02, #32
249d0     00 18 06 F6 | 	mov	arg04, #0
249d4     01 1A 06 F6 | 	mov	arg05, #1
249d8     0B 00 00 FF 
249dc     CC E4 05 F1 | 	add	objptr, ##5836
249e0     68 1F B0 FD | 	call	#_psram_spin2_fill
249e4     0B 00 00 FF 
249e8     CC E4 85 F1 | 	sub	objptr, ##5836
249ec     A7 F0 03 F6 | 	mov	ptra, fp
249f0     B2 00 A0 FD | 	call	#popregs_
249f4                 | _hg010b_spin2_setmode_ret
249f4     2D 00 64 FD | 	ret
249f8                 | 
249f8                 | ' 
249f8                 | ' '****************************************************************************************************************
249f8                 | ' '                                                                                                             	*
249f8                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
249f8                 | ' '                                                                                                             	*
249f8                 | ' '****************************************************************************************************************
249f8                 | ' 
249f8                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
249f8                 | _hg010b_spin2_makedl
249f8                 | ' 
249f8                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
249f8                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
249f8                 | ' repeat i from 0 to 11                                                           ' clear DL
249f8     00 00 06 F6 | 	mov	_var01, #0
249fc     ED E5 05 F1 | 	add	objptr, #493
24a00     97 0E 48 FB | 	callpa	#(@LR__2771-@LR__2770)>>2,fcache_load_ptr_
24a04                 | LR__2770
24a04                 | '   displaylist[i]:=0 
24a04     00 03 02 F6 | 	mov	_var02, _var01
24a08     02 02 66 F0 | 	shl	_var02, #2
24a0c     F2 02 02 F1 | 	add	_var02, objptr
24a10     01 01 68 FC | 	wrlong	#0, _var02
24a14     01 00 06 F1 | 	add	_var01, #1
24a18     0C 00 56 F2 | 	cmps	_var01, #12 wc
24a1c     E4 FF 9F CD |  if_b	jmp	#LR__2770
24a20                 | LR__2771
24a20                 | '                         ' 
24a20                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
24a20     8C E5 85 F1 | 	sub	objptr, #396
24a24     F2 02 02 FB | 	rdlong	_var02, objptr
24a28     14 02 66 F0 | 	shl	_var02, #20
24a2c     01 02 06 F1 | 	add	_var02, #1
24a30     04 E4 85 F1 | 	sub	objptr, #4
24a34     F2 00 02 FB | 	rdlong	_var01, objptr
24a38     02 00 66 F0 | 	shl	_var01, #2
24a3c     04 00 66 F0 | 	shl	_var01, #4
24a40     00 03 02 F1 | 	add	_var02, _var01
24a44     90 E5 05 F1 | 	add	objptr, #400
24a48     F2 02 62 FC | 	wrlong	_var02, objptr
24a4c     ED E5 85 F1 | 	sub	objptr, #493
24a50                 | ' displaylist[1]:=buf_ptr<<4+%10  
24a50     F2 02 02 FB | 	rdlong	_var02, objptr
24a54     04 02 66 F0 | 	shl	_var02, #4
24a58     02 02 06 F1 | 	add	_var02, #2
24a5c     F1 E5 05 F1 | 	add	objptr, #497
24a60     F2 02 62 FC | 	wrlong	_var02, objptr
24a64                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
24a64     04 E4 85 F1 | 	sub	objptr, #4
24a68     F2 02 02 F6 | 	mov	_var02, objptr
24a6c     CD E5 85 F1 | 	sub	objptr, #461
24a70     F2 02 62 FC | 	wrlong	_var02, objptr
24a74     20 E4 85 F1 | 	sub	objptr, #32
24a78                 | _hg010b_spin2_makedl_ret
24a78     2D 00 64 FD | 	ret
24a7c                 | 
24a7c                 | ' 
24a7c                 | ' 
24a7c                 | ' '****************************************************************************************************************
24a7c                 | ' '                                                                        					*
24a7c                 | ' '  Graphic primitives                                                    					*
24a7c                 | ' '                                                                        					*
24a7c                 | ' '****************************************************************************************************************
24a7c                 | ' 
24a7c                 | ' pub setspriteptr(num,ptr)
24a7c                 | _hg010b_spin2_setspriteptr
24a7c                 | ' long[@spr1ptr+12*num]:=ptr
24a7c     11 E5 05 F1 | 	add	objptr, #273
24a80     F2 00 02 F6 | 	mov	_var01, objptr
24a84     09 03 02 F6 | 	mov	_var02, arg01
24a88     01 02 66 F0 | 	shl	_var02, #1
24a8c     09 03 02 F1 | 	add	_var02, arg01
24a90     02 02 66 F0 | 	shl	_var02, #2
24a94     01 01 02 F1 | 	add	_var01, _var02
24a98     00 15 62 FC | 	wrlong	arg02, _var01
24a9c     11 E5 85 F1 | 	sub	objptr, #273
24aa0                 | _hg010b_spin2_setspriteptr_ret
24aa0     2D 00 64 FD | 	ret
24aa4                 | 
24aa4                 | ' 
24aa4                 | ' pub setspritepos(num,x,y)
24aa4                 | _hg010b_spin2_setspritepos
24aa4                 | ' if y>601
24aa4     01 00 00 FF 
24aa8     5A 16 56 F2 | 	cmps	arg03, ##602 wc
24aac                 | '   y:=601
24aac     01 00 00 3F 
24ab0     59 16 06 36 |  if_ae	mov	arg03, ##601
24ab4                 | ' if x>1024
24ab4     02 00 00 FF 
24ab8     01 14 56 F2 | 	cmps	arg02, ##1025 wc
24abc                 | '   x:=1024
24abc     0A 14 C6 39 |  if_ae	decod	arg02, #10
24ac0                 | ' word[@spr1ptr+12*num+4]:=x
24ac0     11 E5 05 F1 | 	add	objptr, #273
24ac4     F2 00 02 F6 | 	mov	_var01, objptr
24ac8     09 03 02 F6 | 	mov	_var02, arg01
24acc     01 02 66 F0 | 	shl	_var02, #1
24ad0     09 03 02 F1 | 	add	_var02, arg01
24ad4     02 02 66 F0 | 	shl	_var02, #2
24ad8     01 01 02 F1 | 	add	_var01, _var02
24adc     04 00 06 F1 | 	add	_var01, #4
24ae0     00 15 52 FC | 	wrword	arg02, _var01
24ae4                 | ' word[@spr1ptr+12*num+6]:=y
24ae4     F2 00 02 F6 | 	mov	_var01, objptr
24ae8     09 03 02 F6 | 	mov	_var02, arg01
24aec     01 02 66 F0 | 	shl	_var02, #1
24af0     09 03 02 F1 | 	add	_var02, arg01
24af4     02 02 66 F0 | 	shl	_var02, #2
24af8     01 01 02 F1 | 	add	_var01, _var02
24afc     06 00 06 F1 | 	add	_var01, #6
24b00     00 17 52 FC | 	wrword	arg03, _var01
24b04     11 E5 85 F1 | 	sub	objptr, #273
24b08                 | _hg010b_spin2_setspritepos_ret
24b08     2D 00 64 FD | 	ret
24b0c                 | 
24b0c                 | ' 
24b0c                 | ' pub setspritesize(num,w,h)
24b0c                 | _hg010b_spin2_setspritesize
24b0c                 | ' word[@spr1ptr+12*num+8]:=w
24b0c     11 E5 05 F1 | 	add	objptr, #273
24b10     F2 00 02 F6 | 	mov	_var01, objptr
24b14     09 03 02 F6 | 	mov	_var02, arg01
24b18     01 02 66 F0 | 	shl	_var02, #1
24b1c     09 03 02 F1 | 	add	_var02, arg01
24b20     02 02 66 F0 | 	shl	_var02, #2
24b24     01 01 02 F1 | 	add	_var01, _var02
24b28     08 00 06 F1 | 	add	_var01, #8
24b2c     00 15 52 FC | 	wrword	arg02, _var01
24b30                 | ' word[@spr1ptr+12*num+10]:=h
24b30     F2 00 02 F6 | 	mov	_var01, objptr
24b34     09 03 02 F6 | 	mov	_var02, arg01
24b38     01 02 66 F0 | 	shl	_var02, #1
24b3c     09 03 02 F1 | 	add	_var02, arg01
24b40     02 02 66 F0 | 	shl	_var02, #2
24b44     01 01 02 F1 | 	add	_var01, _var02
24b48     0A 00 06 F1 | 	add	_var01, #10
24b4c     00 17 52 FC | 	wrword	arg03, _var01
24b50     11 E5 85 F1 | 	sub	objptr, #273
24b54                 | _hg010b_spin2_setspritesize_ret
24b54     2D 00 64 FD | 	ret
24b58                 | 
24b58                 | ' 
24b58                 | ' 
24b58                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
24b58                 | ' 
24b58                 | ' 
24b58                 | ' pub putpixel(x,y,c)
24b58                 | _hg010b_spin2_putpixel
24b58     04 4A 05 F6 | 	mov	COUNT_, #4
24b5c     A8 00 A0 FD | 	call	#pushregs_
24b60     09 27 02 F6 | 	mov	local01, arg01
24b64                 | ' 
24b64                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
24b64     00 28 06 F6 | 	mov	local02, #0
24b68     00 26 56 F2 | 	cmps	local01, #0 wc
24b6c     01 28 66 36 |  if_ae	neg	local02, #1
24b70     E9 E4 05 F1 | 	add	objptr, #233
24b74     F2 1A 02 FB | 	rdlong	arg05, objptr
24b78     02 1A 66 F0 | 	shl	arg05, #2
24b7c     0D 27 52 F2 | 	cmps	local01, arg05 wc
24b80     15 2B A2 F1 | 	subx	local03, local03
24b84     15 29 02 F5 | 	and	local02, local03
24b88     00 2A 06 F6 | 	mov	local03, #0
24b8c     00 14 56 F2 | 	cmps	arg02, #0 wc
24b90     01 2A 66 36 |  if_ae	neg	local03, #1
24b94     15 29 02 F5 | 	and	local02, local03
24b98     04 E4 85 F1 | 	sub	objptr, #4
24b9c     F2 2A 02 FB | 	rdlong	local03, objptr
24ba0     E5 E4 85 F1 | 	sub	objptr, #229
24ba4     15 15 52 F2 | 	cmps	arg02, local03 wc
24ba8     16 2D A2 F1 | 	subx	local04, local04
24bac     16 29 CA F7 | 	test	local02, local04 wz
24bb0     48 00 90 AD |  if_e	jmp	#LR__2780
24bb4     DD E4 05 F1 | 	add	objptr, #221
24bb8     F2 12 02 FB | 	rdlong	arg01, objptr
24bbc     14 E4 05 F1 | 	add	objptr, #20
24bc0     F2 2C 02 FB | 	rdlong	local04, objptr
24bc4     02 2C 66 F0 | 	shl	local04, #2
24bc8     0A 2D 02 FD | 	qmul	local04, arg02
24bcc                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24bcc     0B 15 02 F6 | 	mov	arg02, arg03
24bd0     01 16 06 F6 | 	mov	arg03, #1
24bd4     00 18 06 F6 | 	mov	arg04, #0
24bd8     01 1A 06 F6 | 	mov	arg05, #1
24bdc     0A 00 00 FF 
24be0     DB E5 05 F1 | 	add	objptr, ##5595
24be4     18 2C 62 FD | 	getqx	local04
24be8     13 2D 02 F1 | 	add	local04, local01
24bec     16 13 02 F1 | 	add	arg01, local04
24bf0     58 1D B0 FD | 	call	#_psram_spin2_fill
24bf4     0B 00 00 FF 
24bf8     CC E4 85 F1 | 	sub	objptr, ##5836
24bfc                 | LR__2780
24bfc     A7 F0 03 F6 | 	mov	ptra, fp
24c00     B2 00 A0 FD | 	call	#popregs_
24c04                 | _hg010b_spin2_putpixel_ret
24c04     2D 00 64 FD | 	ret
24c08                 | 
24c08                 | ' 
24c08                 | ' pub putpixel2(x,y,c)
24c08                 | _hg010b_spin2_putpixel2
24c08     02 4A 05 F6 | 	mov	COUNT_, #2
24c0c     A8 00 A0 FD | 	call	#pushregs_
24c10     DD E4 05 F1 | 	add	objptr, #221
24c14     F2 26 02 FB | 	rdlong	local01, objptr
24c18     14 E4 05 F1 | 	add	objptr, #20
24c1c     F2 1A 02 FB | 	rdlong	arg05, objptr
24c20     02 1A 66 F0 | 	shl	arg05, #2
24c24     0A 1B 02 FD | 	qmul	arg05, arg02
24c28                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24c28     0B 15 02 F6 | 	mov	arg02, arg03
24c2c     01 16 06 F6 | 	mov	arg03, #1
24c30     00 18 06 F6 | 	mov	arg04, #0
24c34     01 1A 06 F6 | 	mov	arg05, #1
24c38     0A 00 00 FF 
24c3c     DB E5 05 F1 | 	add	objptr, ##5595
24c40     18 28 62 FD | 	getqx	local02
24c44     09 29 02 F1 | 	add	local02, arg01
24c48     14 27 02 F1 | 	add	local01, local02
24c4c     13 13 02 F6 | 	mov	arg01, local01
24c50     F8 1C B0 FD | 	call	#_psram_spin2_fill
24c54     0B 00 00 FF 
24c58     CC E4 85 F1 | 	sub	objptr, ##5836
24c5c     A7 F0 03 F6 | 	mov	ptra, fp
24c60     B2 00 A0 FD | 	call	#popregs_
24c64                 | _hg010b_spin2_putpixel2_ret
24c64     2D 00 64 FD | 	ret
24c68                 | 
24c68                 | ' 
24c68                 | ' pub getpixel2(x,y): c 
24c68                 | _hg010b_spin2_getpixel2
24c68     02 4A 05 F6 | 	mov	COUNT_, #2
24c6c     A8 00 A0 FD | 	call	#pushregs_
24c70     0C F0 07 F1 | 	add	ptra, #12
24c74     04 4E 05 F1 | 	add	fp, #4
24c78     A7 12 62 FC | 	wrlong	arg01, fp
24c7c     04 4E 05 F1 | 	add	fp, #4
24c80     A7 14 62 FC | 	wrlong	arg02, fp
24c84     08 4E 85 F1 | 	sub	fp, #8
24c88     A7 00 68 FC | 	wrlong	#0, fp
24c8c     A7 12 02 F6 | 	mov	arg01, fp
24c90     DD E4 05 F1 | 	add	objptr, #221
24c94     F2 14 02 FB | 	rdlong	arg02, objptr
24c98     14 E4 05 F1 | 	add	objptr, #20
24c9c     F2 16 02 FB | 	rdlong	arg03, objptr
24ca0     02 16 66 F0 | 	shl	arg03, #2
24ca4     08 4E 05 F1 | 	add	fp, #8
24ca8     A7 FA 01 FB | 	rdlong	result1, fp
24cac     FD 16 02 FD | 	qmul	arg03, result1
24cb0                 | ' 
24cb0                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
24cb0     04 4E 85 F1 | 	sub	fp, #4
24cb4     A7 26 02 FB | 	rdlong	local01, fp
24cb8     04 4E 85 F1 | 	sub	fp, #4
24cbc     01 16 06 F6 | 	mov	arg03, #1
24cc0     0A 00 00 FF 
24cc4     DB E5 05 F1 | 	add	objptr, ##5595
24cc8     18 28 62 FD | 	getqx	local02
24ccc     13 29 02 F1 | 	add	local02, local01
24cd0     14 15 02 F1 | 	add	arg02, local02
24cd4     3C 1B B0 FD | 	call	#_psram_spin2_read1
24cd8     0B 00 00 FF 
24cdc     CC E4 85 F1 | 	sub	objptr, ##5836
24ce0                 | ' return c
24ce0     A7 FA 01 FB | 	rdlong	result1, fp
24ce4     A7 F0 03 F6 | 	mov	ptra, fp
24ce8     B2 00 A0 FD | 	call	#popregs_
24cec                 | _hg010b_spin2_getpixel2_ret
24cec     2D 00 64 FD | 	ret
24cf0                 | 
24cf0                 | '   
24cf0                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
24cf0                 | ' 
24cf0                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
24cf0                 | _hg010b_spin2_fastline
24cf0     02 4A 05 F6 | 	mov	COUNT_, #2
24cf4     A8 00 A0 FD | 	call	#pushregs_
24cf8     09 27 02 F6 | 	mov	local01, arg01
24cfc     0A 29 02 F6 | 	mov	local02, arg02
24d00                 | ' 
24d00                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
24d00     00 16 56 F2 | 	cmps	arg03, #0 wc
24d04     F4 00 90 CD |  if_b	jmp	#LR__2790
24d08     01 00 00 FF 
24d0c     2A E4 05 F1 | 	add	objptr, ##554
24d10     F2 1A 02 FB | 	rdlong	arg05, objptr
24d14     01 00 00 FF 
24d18     2A E4 85 F1 | 	sub	objptr, ##554
24d1c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
24d20     D8 00 90 3D |  if_ae	jmp	#LR__2790
24d24     00 26 56 F2 | 	cmps	local01, #0 wc
24d28     00 28 56 C2 |  if_b	cmps	local02, #0 wc
24d2c     CC 00 90 CD |  if_b	jmp	#LR__2790
24d30     01 00 00 FF 
24d34     26 E4 05 F1 | 	add	objptr, ##550
24d38     F2 1A 02 FB | 	rdlong	arg05, objptr
24d3c     01 00 00 FF 
24d40     26 E4 85 F1 | 	sub	objptr, ##550
24d44     0D 27 5A F2 | 	cmps	local01, arg05 wcz
24d48     01 00 00 1F 
24d4c     26 E4 05 11 |  if_a	add	objptr, ##550
24d50     F2 12 02 1B |  if_a	rdlong	arg01, objptr
24d54     01 00 00 1F 
24d58     26 E4 85 11 |  if_a	sub	objptr, ##550
24d5c     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
24d60                 | '   return
24d60     98 00 90 1D |  if_a	jmp	#LR__2790
24d64     14 27 5A F2 | 	cmps	local01, local02 wcz
24d68     13 1B 02 16 |  if_a	mov	arg05, local01
24d6c     14 27 02 16 |  if_a	mov	local01, local02
24d70     0D 29 02 16 |  if_a	mov	local02, arg05
24d74     00 26 56 F2 | 	cmps	local01, #0 wc
24d78     00 26 06 C6 |  if_b	mov	local01, #0
24d7c     01 00 00 FF 
24d80     26 E4 05 F1 | 	add	objptr, ##550
24d84     F2 1A 02 FB | 	rdlong	arg05, objptr
24d88     01 00 00 FF 
24d8c     26 E4 85 F1 | 	sub	objptr, ##550
24d90     0D 29 52 F2 | 	cmps	local02, arg05 wc
24d94     01 00 00 3F 
24d98     26 E4 05 31 |  if_ae	add	objptr, ##550
24d9c     F2 28 02 3B |  if_ae	rdlong	local02, objptr
24da0     01 00 00 3F 
24da4     26 E4 85 31 |  if_ae	sub	objptr, ##550
24da8     DD E4 05 F1 | 	add	objptr, #221
24dac     F2 12 02 FB | 	rdlong	arg01, objptr
24db0     14 E4 05 F1 | 	add	objptr, #20
24db4     F2 1A 02 FB | 	rdlong	arg05, objptr
24db8     02 1A 66 F0 | 	shl	arg05, #2
24dbc     0B 1B 02 FD | 	qmul	arg05, arg03
24dc0                 | ' if x1>x2
24dc0                 | '   x1,x2:=x2,x1
24dc0                 | ' if x1<0 
24dc0                 | '   x1:=0
24dc0                 | ' if x2>=xres
24dc0                 | '   x2:=xres-1  
24dc0     01 28 86 31 |  if_ae	sub	local02, #1
24dc4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
24dc4     01 16 06 F6 | 	mov	arg03, #1
24dc8     14 17 02 F1 | 	add	arg03, local02
24dcc     13 17 82 F1 | 	sub	arg03, local01
24dd0     0C 15 02 F6 | 	mov	arg02, arg04
24dd4     00 18 06 F6 | 	mov	arg04, #0
24dd8     01 1A 06 F6 | 	mov	arg05, #1
24ddc     0A 00 00 FF 
24de0     DB E5 05 F1 | 	add	objptr, ##5595
24de4     18 28 62 FD | 	getqx	local02
24de8     13 29 02 F1 | 	add	local02, local01
24dec     14 13 02 F1 | 	add	arg01, local02
24df0     58 1B B0 FD | 	call	#_psram_spin2_fill
24df4     0B 00 00 FF 
24df8     CC E4 85 F1 | 	sub	objptr, ##5836
24dfc                 | LR__2790
24dfc     A7 F0 03 F6 | 	mov	ptra, fp
24e00     B2 00 A0 FD | 	call	#popregs_
24e04                 | _hg010b_spin2_fastline_ret
24e04     2D 00 64 FD | 	ret
24e08                 | 
24e08                 | ' 
24e08                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
24e08                 | _hg010b_spin2_draw
24e08     0E 4A 05 F6 | 	mov	COUNT_, #14
24e0c     A8 00 A0 FD | 	call	#pushregs_
24e10     09 27 02 F6 | 	mov	local01, arg01
24e14     0A 29 02 F6 | 	mov	local02, arg02
24e18     0B 2B 02 F6 | 	mov	local03, arg03
24e1c     0C 2D 02 F6 | 	mov	local04, arg04
24e20     0D 2F 02 F6 | 	mov	local05, arg05
24e24                 | ' 
24e24                 | ' if (y1==y2)
24e24     16 29 0A F2 | 	cmp	local02, local04 wz
24e28     18 00 90 5D |  if_ne	jmp	#LR__2800
24e2c                 | '   fastline(x1,x2,y1,c)
24e2c     13 13 02 F6 | 	mov	arg01, local01
24e30     15 15 02 F6 | 	mov	arg02, local03
24e34     14 17 02 F6 | 	mov	arg03, local02
24e38     17 19 02 F6 | 	mov	arg04, local05
24e3c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
24e40     F8 00 90 FD | 	jmp	#LR__2806
24e44                 | LR__2800
24e44                 | ' else  
24e44                 | '   x:=x1
24e44     13 31 02 F6 | 	mov	local06, local01
24e48                 | '   y:=y1
24e48     14 33 02 F6 | 	mov	local07, local02
24e4c                 | ' 
24e4c                 | '   if (x1<x2) 
24e4c     15 27 52 F2 | 	cmps	local01, local03 wc
24e50                 | '     xi:=1
24e50     01 34 06 C6 |  if_b	mov	local08, #1
24e54                 | '     dx:=x2-x1
24e54     15 37 02 C6 |  if_b	mov	local09, local03
24e58     13 37 82 C1 |  if_b	sub	local09, local01
24e5c                 | '   else
24e5c                 | '     xi:=-1
24e5c     01 34 66 36 |  if_ae	neg	local08, #1
24e60                 | '     dx:=x1-x2
24e60     15 27 82 31 |  if_ae	sub	local01, local03
24e64     13 37 02 36 |  if_ae	mov	local09, local01
24e68                 | '   
24e68                 | '   if (y1<y2) 
24e68     16 29 52 F2 | 	cmps	local02, local04 wc
24e6c                 | '     yi:=1
24e6c     01 38 06 C6 |  if_b	mov	local10, #1
24e70                 | '     dy:=y2-y1
24e70     16 3B 02 C6 |  if_b	mov	local11, local04
24e74     14 3B 82 C1 |  if_b	sub	local11, local02
24e78                 | '   else
24e78                 | '     yi:=-1
24e78     01 38 66 36 |  if_ae	neg	local10, #1
24e7c                 | '     dy:=y1-y2
24e7c     16 29 82 31 |  if_ae	sub	local02, local04
24e80     14 3B 02 36 |  if_ae	mov	local11, local02
24e84                 | ' 
24e84                 | '   putpixel(x,y,c)
24e84     17 17 02 F6 | 	mov	arg03, local05
24e88     18 13 02 F6 | 	mov	arg01, local06
24e8c     19 15 02 F6 | 	mov	arg02, local07
24e90     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
24e94                 | ' 
24e94                 | '   if (dx>dy)
24e94     1D 37 5A F2 | 	cmps	local09, local11 wcz
24e98     50 00 90 ED |  if_be	jmp	#LR__2802
24e9c                 | '     ai:=(dy-dx)*2
24e9c     1D 3D 02 F6 | 	mov	local12, local11
24ea0     1B 3D 82 F1 | 	sub	local12, local09
24ea4     01 3C 66 F0 | 	shl	local12, #1
24ea8                 | '     bi:=dy*2
24ea8     01 3A 66 F0 | 	shl	local11, #1
24eac     1D 3F 02 F6 | 	mov	local13, local11
24eb0                 | '     d:= bi-dx
24eb0     1F 41 02 F6 | 	mov	local14, local13
24eb4     1B 41 82 F1 | 	sub	local14, local09
24eb8                 | '     repeat while (x<>x2) 
24eb8                 | LR__2801
24eb8     15 31 0A F2 | 	cmp	local06, local03 wz
24ebc     7C 00 90 AD |  if_e	jmp	#LR__2805
24ec0                 | '       if (d>=0) 
24ec0     00 40 56 F2 | 	cmps	local14, #0 wc
24ec4                 | '         x+=xi
24ec4     1A 31 02 31 |  if_ae	add	local06, local08
24ec8                 | '         y+=yi
24ec8     1C 33 02 31 |  if_ae	add	local07, local10
24ecc                 | '         d+=ai
24ecc     1E 41 02 31 |  if_ae	add	local14, local12
24ed0                 | '       else
24ed0                 | '         d+=bi
24ed0     1F 41 02 C1 |  if_b	add	local14, local13
24ed4                 | '         x+=xi
24ed4     1A 31 02 C1 |  if_b	add	local06, local08
24ed8                 | '       putpixel(x,y,c)
24ed8     18 13 02 F6 | 	mov	arg01, local06
24edc     19 15 02 F6 | 	mov	arg02, local07
24ee0     17 17 02 F6 | 	mov	arg03, local05
24ee4     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
24ee8     CC FF 9F FD | 	jmp	#LR__2801
24eec                 | LR__2802
24eec                 | '   else
24eec                 | '     ai:=(dx-dy)*2
24eec     1B 3D 02 F6 | 	mov	local12, local09
24ef0     1D 3D 82 F1 | 	sub	local12, local11
24ef4     01 3C 66 F0 | 	shl	local12, #1
24ef8                 | '     bi:=dx*2
24ef8     01 36 66 F0 | 	shl	local09, #1
24efc     1B 3F 02 F6 | 	mov	local13, local09
24f00                 | '     d:=bi-dy
24f00     1F 41 02 F6 | 	mov	local14, local13
24f04     1D 41 82 F1 | 	sub	local14, local11
24f08                 | '     repeat while (y<>y2)
24f08                 | LR__2803
24f08     16 33 0A F2 | 	cmp	local07, local04 wz
24f0c     2C 00 90 AD |  if_e	jmp	#LR__2804
24f10                 | '       if (d>=0)
24f10     00 40 56 F2 | 	cmps	local14, #0 wc
24f14                 | '         x+=xi
24f14     1A 31 02 31 |  if_ae	add	local06, local08
24f18                 | '         y+=yi
24f18     1C 33 02 31 |  if_ae	add	local07, local10
24f1c                 | '         d+=ai
24f1c     1E 41 02 31 |  if_ae	add	local14, local12
24f20                 | '       else
24f20                 | '         d+=bi
24f20     1F 41 02 C1 |  if_b	add	local14, local13
24f24                 | '         y+=yi
24f24     1C 33 02 C1 |  if_b	add	local07, local10
24f28                 | '       putpixel(x, y,c)
24f28     18 13 02 F6 | 	mov	arg01, local06
24f2c     19 15 02 F6 | 	mov	arg02, local07
24f30     17 17 02 F6 | 	mov	arg03, local05
24f34     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
24f38     CC FF 9F FD | 	jmp	#LR__2803
24f3c                 | LR__2804
24f3c                 | LR__2805
24f3c                 | LR__2806
24f3c     A7 F0 03 F6 | 	mov	ptra, fp
24f40     B2 00 A0 FD | 	call	#popregs_
24f44                 | _hg010b_spin2_draw_ret
24f44     2D 00 64 FD | 	ret
24f48                 | 
24f48                 | '  
24f48                 | ' pub fillpush(val) 
24f48                 | _hg010b_spin2_fillpush
24f48                 | ' fillstack[fillptr]:=val
24f48     0B 00 00 FF 
24f4c     BA E4 05 F1 | 	add	objptr, ##5818
24f50     F2 00 02 FB | 	rdlong	_var01, objptr
24f54     02 00 66 F0 | 	shl	_var01, #2
24f58     0A 00 00 FF 
24f5c     00 E4 85 F1 | 	sub	objptr, ##5120
24f60     F2 00 02 F1 | 	add	_var01, objptr
24f64     00 13 62 FC | 	wrlong	arg01, _var01
24f68                 | ' fillptr+=1   
24f68     0A 00 00 FF 
24f6c     00 E4 05 F1 | 	add	objptr, ##5120
24f70     F2 00 02 FB | 	rdlong	_var01, objptr
24f74     01 00 06 F1 | 	add	_var01, #1
24f78     F2 00 62 FC | 	wrlong	_var01, objptr
24f7c     0B 00 00 FF 
24f80     BA E4 85 F1 | 	sub	objptr, ##5818
24f84                 | _hg010b_spin2_fillpush_ret
24f84     2D 00 64 FD | 	ret
24f88                 | 
24f88                 | ' 
24f88                 | '     
24f88                 | ' pub fillpop() : val
24f88                 | _hg010b_spin2_fillpop
24f88                 | ' 
24f88                 | ' fillptr-=1
24f88     0B 00 00 FF 
24f8c     BA E4 05 F1 | 	add	objptr, ##5818
24f90     F2 FA 01 FB | 	rdlong	result1, objptr
24f94     01 FA 85 F1 | 	sub	result1, #1
24f98     F2 FA 61 FC | 	wrlong	result1, objptr
24f9c                 | ' if fillptr<0
24f9c     0B 00 00 FF 
24fa0     BA E4 85 F1 | 	sub	objptr, ##5818
24fa4     00 FA 55 F2 | 	cmps	result1, #0 wc
24fa8                 | '   fillptr:=0
24fa8     0B 00 00 CF 
24fac     BA E4 05 C1 |  if_b	add	objptr, ##5818
24fb0     F2 00 68 CC |  if_b	wrlong	#0, objptr
24fb4     0B 00 00 CF 
24fb8     BA E4 85 C1 |  if_b	sub	objptr, ##5818
24fbc                 | '   val:=-12345
24fbc     E7 FF 7F CF 
24fc0     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
24fc4     28 00 90 CD |  if_b	jmp	#LR__2810
24fc8                 | ' else 
24fc8                 | '   val:=fillstack[fillptr]
24fc8     0B 00 00 FF 
24fcc     BA E4 05 F1 | 	add	objptr, ##5818
24fd0     F2 00 02 FB | 	rdlong	_var01, objptr
24fd4     02 00 66 F0 | 	shl	_var01, #2
24fd8     0A 00 00 FF 
24fdc     00 E4 85 F1 | 	sub	objptr, ##5120
24fe0     F2 00 02 F1 | 	add	_var01, objptr
24fe4     00 01 02 FB | 	rdlong	_var01, _var01
24fe8     01 00 00 FF 
24fec     BA E4 85 F1 | 	sub	objptr, ##698
24ff0                 | LR__2810
24ff0                 | ' return val
24ff0     00 FB 01 F6 | 	mov	result1, _var01
24ff4                 | _hg010b_spin2_fillpop_ret
24ff4     2D 00 64 FD | 	ret
24ff8                 | 
24ff8                 | ' 
24ff8                 | '       
24ff8                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
24ff8                 | _hg010b_spin2_fill
24ff8     0B 4A 05 F6 | 	mov	COUNT_, #11
24ffc     A8 00 A0 FD | 	call	#pushregs_
25000                 | ' 
25000                 | ' newcolor:=newcolor & 255
25000     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
25004                 | ' oldcolor:=oldcolor & 255
25004     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
25008                 | ' 
25008                 | ' if (oldcolor == newcolor) 
25008     13 29 0A F2 | 	cmp	local02, local01 wz
2500c                 | '   return
2500c     70 02 90 AD |  if_e	jmp	#LR__2829
25010                 | ' 
25010                 | ' fillptr:=0
25010     0B 00 00 FF 
25014     BA E4 05 F1 | 	add	objptr, ##5818
25018     F2 00 68 FC | 	wrlong	#0, objptr
2501c                 | ' fillmax:=0
2501c     04 E4 05 F1 | 	add	objptr, #4
25020     F2 00 68 FC | 	wrlong	#0, objptr
25024     0B 00 00 FF 
25028     BE E4 85 F1 | 	sub	objptr, ##5822
2502c                 | ' fillpush(x)
2502c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
25030                 | ' fillpush(y)
25030     0A 13 02 F6 | 	mov	arg01, arg02
25034     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
25038                 | ' y:=fillpop()
25038     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
2503c     FD 2A 02 F6 | 	mov	local03, result1
25040                 | ' x:=fillpop()
25040     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
25044     FD 2C 02 F6 | 	mov	local04, result1
25048                 | ' 'pinhigh(38)
25048                 | ' repeat while (x>-1)       
25048                 | LR__2820
25048     00 2C 56 F2 | 	cmps	local04, #0 wc
2504c     30 02 90 CD |  if_b	jmp	#LR__2828
25050                 | '  ' pintoggle(39)
25050                 | '   x1 := x
25050     16 2F 02 F6 | 	mov	local05, local04
25054                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
25054                 | LR__2821
25054     00 30 06 F6 | 	mov	local06, #0
25058     00 32 06 F6 | 	mov	local07, #0
2505c     00 2E 56 F2 | 	cmps	local05, #0 wc
25060     01 32 66 36 |  if_ae	neg	local07, #1
25064     00 32 0E F2 | 	cmp	local07, #0 wz
25068     00 30 26 56 |  if_ne	not	local06, #0
2506c     00 34 06 F6 | 	mov	local08, #0
25070     00 36 06 F6 | 	mov	local09, #0
25074     15 15 02 F6 | 	mov	arg02, local03
25078     17 13 02 F6 | 	mov	arg01, local05
2507c     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
25080     14 FB 09 F2 | 	cmp	result1, local02 wz
25084     00 36 26 A6 |  if_e	not	local09, #0
25088     00 36 0E F2 | 	cmp	local09, #0 wz
2508c     00 34 26 56 |  if_ne	not	local08, #0
25090     1A 31 CA F7 | 	test	local06, local08 wz
25094                 | '     x1--
25094     01 2E 86 51 |  if_ne	sub	local05, #1
25098     B8 FF 9F 5D |  if_ne	jmp	#LR__2821
2509c                 | '   x1++
2509c     01 2E 06 F1 | 	add	local05, #1
250a0                 | '   spanabove := 0
250a0     00 38 06 F6 | 	mov	local10, #0
250a4                 | '   spanbelow := 0
250a4     00 3A 06 F6 | 	mov	local11, #0
250a8                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
250a8                 | LR__2822
250a8     00 30 06 F6 | 	mov	local06, #0
250ac     02 00 00 FF 
250b0     00 2E 56 F2 | 	cmps	local05, ##1024 wc
250b4     00 30 26 C6 |  if_b	not	local06, #0
250b8     00 34 06 F6 | 	mov	local08, #0
250bc     00 36 06 F6 | 	mov	local09, #0
250c0     15 15 02 F6 | 	mov	arg02, local03
250c4     17 13 02 F6 | 	mov	arg01, local05
250c8     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
250cc     14 FB 09 F2 | 	cmp	result1, local02 wz
250d0     00 36 26 A6 |  if_e	not	local09, #0
250d4     00 36 0E F2 | 	cmp	local09, #0 wz
250d8     00 34 26 56 |  if_ne	not	local08, #0
250dc     1A 31 CA F7 | 	test	local06, local08 wz
250e0     88 01 90 AD |  if_e	jmp	#LR__2827
250e4                 | '     putpixel2 (x1,y, newcolor & 255)
250e4     13 17 E2 F8 | 	getbyte	arg03, local01, #0
250e8     17 13 02 F6 | 	mov	arg01, local05
250ec     15 15 02 F6 | 	mov	arg02, local03
250f0     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
250f4                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
250f4     00 30 06 F6 | 	mov	local06, #0
250f8     00 32 06 F6 | 	mov	local07, #0
250fc     00 38 0E F2 | 	cmp	local10, #0 wz
25100     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
25104     01 32 66 26 |  if_nc_and_z	neg	local07, #1
25108     00 32 0E F2 | 	cmp	local07, #0 wz
2510c     00 30 26 56 |  if_ne	not	local06, #0
25110     00 34 06 F6 | 	mov	local08, #0
25114     00 36 06 F6 | 	mov	local09, #0
25118     15 15 02 F6 | 	mov	arg02, local03
2511c     01 14 86 F1 | 	sub	arg02, #1
25120     17 13 02 F6 | 	mov	arg01, local05
25124     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
25128     14 FB 09 F2 | 	cmp	result1, local02 wz
2512c     00 36 26 A6 |  if_e	not	local09, #0
25130     00 36 0E F2 | 	cmp	local09, #0 wz
25134     00 34 26 56 |  if_ne	not	local08, #0
25138     1A 31 CA F7 | 	test	local06, local08 wz
2513c     1C 00 90 AD |  if_e	jmp	#LR__2823
25140                 | '       fillpush(x1)
25140     17 13 02 F6 | 	mov	arg01, local05
25144     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
25148                 | '       fillpush(y-1)
25148     15 13 02 F6 | 	mov	arg01, local03
2514c     01 12 86 F1 | 	sub	arg01, #1
25150     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
25154                 | '       spanabove := 1 
25154     01 38 06 F6 | 	mov	local10, #1
25158     4C 00 90 FD | 	jmp	#LR__2824
2515c                 | LR__2823
2515c                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
2515c     00 30 06 F6 | 	mov	local06, #0
25160     00 32 06 F6 | 	mov	local07, #0
25164     00 38 0E F2 | 	cmp	local10, #0 wz
25168     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
2516c     01 32 66 16 |  if_a	neg	local07, #1
25170     00 32 0E F2 | 	cmp	local07, #0 wz
25174     00 30 26 56 |  if_ne	not	local06, #0
25178     00 34 06 F6 | 	mov	local08, #0
2517c     00 36 06 F6 | 	mov	local09, #0
25180     15 15 02 F6 | 	mov	arg02, local03
25184     01 14 86 F1 | 	sub	arg02, #1
25188     17 13 02 F6 | 	mov	arg01, local05
2518c     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
25190     14 FB 09 F2 | 	cmp	result1, local02 wz
25194     00 36 26 56 |  if_ne	not	local09, #0
25198     00 36 0E F2 | 	cmp	local09, #0 wz
2519c     00 34 26 56 |  if_ne	not	local08, #0
251a0     1A 31 CA F7 | 	test	local06, local08 wz
251a4                 | '       spanabove := 0 
251a4     00 38 06 56 |  if_ne	mov	local10, #0
251a8                 | LR__2824
251a8                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
251a8     00 30 06 F6 | 	mov	local06, #0
251ac     00 32 06 F6 | 	mov	local07, #0
251b0     00 3A 0E F2 | 	cmp	local11, #0 wz
251b4     01 00 00 AF 
251b8     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
251bc     01 32 66 86 |  if_c_and_z	neg	local07, #1
251c0     00 32 0E F2 | 	cmp	local07, #0 wz
251c4     00 30 26 56 |  if_ne	not	local06, #0
251c8     00 34 06 F6 | 	mov	local08, #0
251cc     00 36 06 F6 | 	mov	local09, #0
251d0     15 15 02 F6 | 	mov	arg02, local03
251d4     01 14 06 F1 | 	add	arg02, #1
251d8     17 13 02 F6 | 	mov	arg01, local05
251dc     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
251e0     14 FB 09 F2 | 	cmp	result1, local02 wz
251e4     00 36 26 A6 |  if_e	not	local09, #0
251e8     00 36 0E F2 | 	cmp	local09, #0 wz
251ec     00 34 26 56 |  if_ne	not	local08, #0
251f0     1A 31 CA F7 | 	test	local06, local08 wz
251f4     1C 00 90 AD |  if_e	jmp	#LR__2825
251f8                 | '       fillpush(x1)
251f8     17 13 02 F6 | 	mov	arg01, local05
251fc     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
25200                 | '       fillpush(y + 1)
25200     15 13 02 F6 | 	mov	arg01, local03
25204     01 12 06 F1 | 	add	arg01, #1
25208     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
2520c                 | '       spanBelow := 1
2520c     01 3A 06 F6 | 	mov	local11, #1
25210     50 00 90 FD | 	jmp	#LR__2826
25214                 | LR__2825
25214                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
25214     00 30 06 F6 | 	mov	local06, #0
25218     00 32 06 F6 | 	mov	local07, #0
2521c     00 3A 0E F2 | 	cmp	local11, #0 wz
25220     01 00 00 5F 
25224     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
25228     01 32 66 46 |  if_c_and_nz	neg	local07, #1
2522c     00 32 0E F2 | 	cmp	local07, #0 wz
25230     00 30 26 56 |  if_ne	not	local06, #0
25234     00 34 06 F6 | 	mov	local08, #0
25238     00 36 06 F6 | 	mov	local09, #0
2523c     15 15 02 F6 | 	mov	arg02, local03
25240     01 14 06 F1 | 	add	arg02, #1
25244     17 13 02 F6 | 	mov	arg01, local05
25248     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
2524c     14 FB 09 F2 | 	cmp	result1, local02 wz
25250     00 36 26 56 |  if_ne	not	local09, #0
25254     00 36 0E F2 | 	cmp	local09, #0 wz
25258     00 34 26 56 |  if_ne	not	local08, #0
2525c     1A 31 CA F7 | 	test	local06, local08 wz
25260                 | '       spanbelow := 0
25260     00 3A 06 56 |  if_ne	mov	local11, #0
25264                 | LR__2826
25264                 | '     x1++
25264     01 2E 06 F1 | 	add	local05, #1
25268     3C FE 9F FD | 	jmp	#LR__2822
2526c                 | LR__2827
2526c                 | '   y:=fillpop()
2526c     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
25270     FD 2A 02 F6 | 	mov	local03, result1
25274                 | '   x:=fillpop()
25274     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
25278     FD 2C 02 F6 | 	mov	local04, result1
2527c     C8 FD 9F FD | 	jmp	#LR__2820
25280                 | LR__2828
25280                 | LR__2829
25280     A7 F0 03 F6 | 	mov	ptra, fp
25284     B2 00 A0 FD | 	call	#popregs_
25288                 | _hg010b_spin2_fill_ret
25288     2D 00 64 FD | 	ret
2528c                 | 
2528c                 | ' 'pinlow(38)    
2528c                 | ' 
2528c                 | ' '-- A filled circle -----------------------------------------------------
2528c                 | ' 
2528c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
2528c                 | _hg010b_spin2_fcircle
2528c     08 4A 05 F6 | 	mov	COUNT_, #8
25290     A8 00 A0 FD | 	call	#pushregs_
25294     0B 27 02 F6 | 	mov	local01, arg03
25298     FF FF 7F FF 
2529c     FE 27 06 FD | 	qmul	local01, ##-2
252a0     09 29 02 F6 | 	mov	local02, arg01
252a4     0A 2B 02 F6 | 	mov	local03, arg02
252a8     0C 2D 02 F6 | 	mov	local04, arg04
252ac                 | ' 
252ac                 | ' d:=5-4*r
252ac     13 19 02 F6 | 	mov	arg04, local01
252b0     02 18 66 F0 | 	shl	arg04, #2
252b4     05 2E 06 F6 | 	mov	local05, #5
252b8     0C 2F 82 F1 | 	sub	local05, arg04
252bc                 | ' x:=0
252bc     00 30 06 F6 | 	mov	local06, #0
252c0                 | ' y:=r
252c0                 | ' da:=(-2*r+5)*4
252c0                 | ' db:=3*4
252c0     0C 32 06 F6 | 	mov	local07, #12
252c4                 | ' repeat while (x<=y) 
252c4     18 34 62 FD | 	getqx	local08
252c8     05 34 06 F1 | 	add	local08, #5
252cc     02 34 66 F0 | 	shl	local08, #2
252d0                 | LR__2830
252d0     13 31 5A F2 | 	cmps	local06, local01 wcz
252d4     B4 00 90 1D |  if_a	jmp	#LR__2832
252d8                 | '   fastline(x0-x,x0+x,y0-y,c)
252d8     14 13 02 F6 | 	mov	arg01, local02
252dc     18 13 82 F1 | 	sub	arg01, local06
252e0     14 15 02 F6 | 	mov	arg02, local02
252e4     18 15 02 F1 | 	add	arg02, local06
252e8     15 17 02 F6 | 	mov	arg03, local03
252ec     13 17 82 F1 | 	sub	arg03, local01
252f0     16 19 02 F6 | 	mov	arg04, local04
252f4     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
252f8                 | '   fastline(x0-x,x0+x,y0+y,c)
252f8     14 13 02 F6 | 	mov	arg01, local02
252fc     18 13 82 F1 | 	sub	arg01, local06
25300     14 15 02 F6 | 	mov	arg02, local02
25304     18 15 02 F1 | 	add	arg02, local06
25308     15 17 02 F6 | 	mov	arg03, local03
2530c     13 17 02 F1 | 	add	arg03, local01
25310     16 19 02 F6 | 	mov	arg04, local04
25314     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25318                 | '   fastline(x0-y,x0+y,y0-x,c)
25318     14 13 02 F6 | 	mov	arg01, local02
2531c     13 13 82 F1 | 	sub	arg01, local01
25320     14 15 02 F6 | 	mov	arg02, local02
25324     13 15 02 F1 | 	add	arg02, local01
25328     15 17 02 F6 | 	mov	arg03, local03
2532c     18 17 82 F1 | 	sub	arg03, local06
25330     16 19 02 F6 | 	mov	arg04, local04
25334     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25338                 | '   fastline(x0-y,x0+y,y0+x,c)
25338     14 13 02 F6 | 	mov	arg01, local02
2533c     13 13 82 F1 | 	sub	arg01, local01
25340     14 15 02 F6 | 	mov	arg02, local02
25344     13 15 02 F1 | 	add	arg02, local01
25348     15 17 02 F6 | 	mov	arg03, local03
2534c     18 17 02 F1 | 	add	arg03, local06
25350     16 19 02 F6 | 	mov	arg04, local04
25354     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
25358                 | '   if d>0 
25358     01 2E 56 F2 | 	cmps	local05, #1 wc
2535c     18 00 90 CD |  if_b	jmp	#LR__2831
25360                 | '     d+=da
25360     1A 2F 02 F1 | 	add	local05, local08
25364                 | '     y-=1
25364     01 26 86 F1 | 	sub	local01, #1
25368                 | '     x+=1
25368     01 30 06 F1 | 	add	local06, #1
2536c                 | '     da+=4*4
2536c     10 34 06 F1 | 	add	local08, #16
25370                 | '     db+=2*4
25370     08 32 06 F1 | 	add	local07, #8
25374     58 FF 9F FD | 	jmp	#LR__2830
25378                 | LR__2831
25378                 | '   else
25378                 | '     d+=db
25378     19 2F 02 F1 | 	add	local05, local07
2537c                 | '     x+=1
2537c     01 30 06 F1 | 	add	local06, #1
25380                 | '     da+=2*4
25380     08 34 06 F1 | 	add	local08, #8
25384                 | '     db+=2*4
25384     08 32 06 F1 | 	add	local07, #8
25388     44 FF 9F FD | 	jmp	#LR__2830
2538c                 | LR__2832
2538c     A7 F0 03 F6 | 	mov	ptra, fp
25390     B2 00 A0 FD | 	call	#popregs_
25394                 | _hg010b_spin2_fcircle_ret
25394     2D 00 64 FD | 	ret
25398                 | 
25398                 | '  
25398                 | ' '-- A circle ------------------------------------------------------------ 
25398                 | '  
25398                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
25398                 | _hg010b_spin2_circle
25398     08 4A 05 F6 | 	mov	COUNT_, #8
2539c     A8 00 A0 FD | 	call	#pushregs_
253a0     0B 27 02 F6 | 	mov	local01, arg03
253a4     FF FF 7F FF 
253a8     FE 27 06 FD | 	qmul	local01, ##-2
253ac     09 29 02 F6 | 	mov	local02, arg01
253b0     0A 2B 02 F6 | 	mov	local03, arg02
253b4     0C 2D 02 F6 | 	mov	local04, arg04
253b8                 | ' 
253b8                 | '  
253b8                 | ' d:=5-4*r
253b8     13 19 02 F6 | 	mov	arg04, local01
253bc     02 18 66 F0 | 	shl	arg04, #2
253c0     05 2E 06 F6 | 	mov	local05, #5
253c4     0C 2F 82 F1 | 	sub	local05, arg04
253c8                 | ' x:=0
253c8     00 30 06 F6 | 	mov	local06, #0
253cc                 | ' y:=r
253cc                 | ' da:=(-2*r+5)*4
253cc                 | ' db:=3*4
253cc     0C 32 06 F6 | 	mov	local07, #12
253d0                 | ' repeat while (x<=y) 
253d0     18 34 62 FD | 	getqx	local08
253d4     05 34 06 F1 | 	add	local08, #5
253d8     02 34 66 F0 | 	shl	local08, #2
253dc                 | LR__2840
253dc     13 31 5A F2 | 	cmps	local06, local01 wcz
253e0     F4 00 90 1D |  if_a	jmp	#LR__2842
253e4                 | '   putpixel(x0-x,y0-y,c)
253e4     14 13 02 F6 | 	mov	arg01, local02
253e8     18 13 82 F1 | 	sub	arg01, local06
253ec     15 15 02 F6 | 	mov	arg02, local03
253f0     13 15 82 F1 | 	sub	arg02, local01
253f4     16 17 02 F6 | 	mov	arg03, local04
253f8     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
253fc                 | '   putpixel(x0-x,y0+y,c)
253fc     14 13 02 F6 | 	mov	arg01, local02
25400     18 13 82 F1 | 	sub	arg01, local06
25404     15 15 02 F6 | 	mov	arg02, local03
25408     13 15 02 F1 | 	add	arg02, local01
2540c     16 17 02 F6 | 	mov	arg03, local04
25410     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
25414                 | '   putpixel(x0+x,y0-y,c)
25414     14 13 02 F6 | 	mov	arg01, local02
25418     18 13 02 F1 | 	add	arg01, local06
2541c     15 15 02 F6 | 	mov	arg02, local03
25420     13 15 82 F1 | 	sub	arg02, local01
25424     16 17 02 F6 | 	mov	arg03, local04
25428     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
2542c                 | '   putpixel(x0+x,y0+y,c)
2542c     14 13 02 F6 | 	mov	arg01, local02
25430     18 13 02 F1 | 	add	arg01, local06
25434     15 15 02 F6 | 	mov	arg02, local03
25438     13 15 02 F1 | 	add	arg02, local01
2543c     16 17 02 F6 | 	mov	arg03, local04
25440     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
25444                 | '   putpixel(x0-y,y0-x,c)
25444     14 13 02 F6 | 	mov	arg01, local02
25448     13 13 82 F1 | 	sub	arg01, local01
2544c     15 15 02 F6 | 	mov	arg02, local03
25450     18 15 82 F1 | 	sub	arg02, local06
25454     16 17 02 F6 | 	mov	arg03, local04
25458     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
2545c                 | '   putpixel(x0-y,y0+x,c)
2545c     14 13 02 F6 | 	mov	arg01, local02
25460     13 13 82 F1 | 	sub	arg01, local01
25464     15 15 02 F6 | 	mov	arg02, local03
25468     18 15 02 F1 | 	add	arg02, local06
2546c     16 17 02 F6 | 	mov	arg03, local04
25470     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
25474                 | '   putpixel(x0+y,y0-x,c)
25474     14 13 02 F6 | 	mov	arg01, local02
25478     13 13 02 F1 | 	add	arg01, local01
2547c     15 15 02 F6 | 	mov	arg02, local03
25480     18 15 82 F1 | 	sub	arg02, local06
25484     16 17 02 F6 | 	mov	arg03, local04
25488     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
2548c                 | '   putpixel(x0+y,y0+x,c)
2548c     14 13 02 F6 | 	mov	arg01, local02
25490     13 13 02 F1 | 	add	arg01, local01
25494     15 15 02 F6 | 	mov	arg02, local03
25498     18 15 02 F1 | 	add	arg02, local06
2549c     16 17 02 F6 | 	mov	arg03, local04
254a0     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
254a4                 | '   if d>0 
254a4     01 2E 56 F2 | 	cmps	local05, #1 wc
254a8     18 00 90 CD |  if_b	jmp	#LR__2841
254ac                 | '     d+=da
254ac     1A 2F 02 F1 | 	add	local05, local08
254b0                 | '     y-=1
254b0     01 26 86 F1 | 	sub	local01, #1
254b4                 | '     x+=1
254b4     01 30 06 F1 | 	add	local06, #1
254b8                 | '     da+=4*4
254b8     10 34 06 F1 | 	add	local08, #16
254bc                 | '     db+=2*4
254bc     08 32 06 F1 | 	add	local07, #8
254c0     18 FF 9F FD | 	jmp	#LR__2840
254c4                 | LR__2841
254c4                 | '   else
254c4                 | '     d+=db
254c4     19 2F 02 F1 | 	add	local05, local07
254c8                 | '     x+=1
254c8     01 30 06 F1 | 	add	local06, #1
254cc                 | '     da+=2*4
254cc     08 34 06 F1 | 	add	local08, #8
254d0                 | '     db+=2*4
254d0     08 32 06 F1 | 	add	local07, #8
254d4     04 FF 9F FD | 	jmp	#LR__2840
254d8                 | LR__2842
254d8     A7 F0 03 F6 | 	mov	ptra, fp
254dc     B2 00 A0 FD | 	call	#popregs_
254e0                 | _hg010b_spin2_circle_ret
254e0     2D 00 64 FD | 	ret
254e4                 | 
254e4                 | '     
254e4                 | ' '-- A frame (an empty rectangle) ---------------------------------------
254e4                 | ' 
254e4                 | ' pub frame(x1,y1,x2,y2,c)
254e4                 | _hg010b_spin2_frame
254e4     05 4A 05 F6 | 	mov	COUNT_, #5
254e8     A8 00 A0 FD | 	call	#pushregs_
254ec     09 27 02 F6 | 	mov	local01, arg01
254f0     0A 29 02 F6 | 	mov	local02, arg02
254f4     0B 2B 02 F6 | 	mov	local03, arg03
254f8     0C 2D 02 F6 | 	mov	local04, arg04
254fc     0D 2F 02 F6 | 	mov	local05, arg05
25500                 | ' 
25500                 | ' fastline(x1,x2,y1,c)
25500     13 13 02 F6 | 	mov	arg01, local01
25504     15 15 02 F6 | 	mov	arg02, local03
25508     14 17 02 F6 | 	mov	arg03, local02
2550c     17 19 02 F6 | 	mov	arg04, local05
25510     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
25514                 | ' fastline(x1,x2,y2,c)
25514     13 13 02 F6 | 	mov	arg01, local01
25518     15 15 02 F6 | 	mov	arg02, local03
2551c     16 17 02 F6 | 	mov	arg03, local04
25520     17 19 02 F6 | 	mov	arg04, local05
25524     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
25528                 | ' line(x1,y1,x1,y2,c)
25528     13 13 02 F6 | 	mov	arg01, local01
2552c     14 15 02 F6 | 	mov	arg02, local02
25530     13 17 02 F6 | 	mov	arg03, local01
25534     16 19 02 F6 | 	mov	arg04, local04
25538     17 1B 02 F6 | 	mov	arg05, local05
2553c                 | ' draw(x1,y1,x2,y2,c)
2553c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
25540                 | ' line(x2,y1,x2,y2,c)
25540     15 13 02 F6 | 	mov	arg01, local03
25544     14 15 02 F6 | 	mov	arg02, local02
25548     15 17 02 F6 | 	mov	arg03, local03
2554c     16 19 02 F6 | 	mov	arg04, local04
25550     17 1B 02 F6 | 	mov	arg05, local05
25554                 | ' draw(x1,y1,x2,y2,c)
25554     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
25558     A7 F0 03 F6 | 	mov	ptra, fp
2555c     B2 00 A0 FD | 	call	#popregs_
25560                 | _hg010b_spin2_frame_ret
25560     2D 00 64 FD | 	ret
25564                 | 
25564                 | ' 
25564                 | ' '-- A box (a filled rectangle) ----------------------------------------
25564                 | ' 
25564                 | ' pub box(x1,y1,x2,y2,c) |yy
25564                 | _hg010b_spin2_box
25564     06 4A 05 F6 | 	mov	COUNT_, #6
25568     A8 00 A0 FD | 	call	#pushregs_
2556c     09 27 02 F6 | 	mov	local01, arg01
25570     0A 29 02 F6 | 	mov	local02, arg02
25574     0B 2B 02 F6 | 	mov	local03, arg03
25578     0C 2D 02 F6 | 	mov	local04, arg04
2557c     0D 2F 02 F6 | 	mov	local05, arg05
25580                 | ' 
25580                 | ' repeat yy from y1 to y2
25580     14 2D 52 F2 | 	cmps	local04, local02 wc
25584     01 30 86 F6 | 	negc	local06, #1
25588     18 2D 02 F1 | 	add	local04, local06
2558c                 | LR__2850
2558c                 | '   fastline(x1,x2,yy,c)
2558c     13 13 02 F6 | 	mov	arg01, local01
25590     15 15 02 F6 | 	mov	arg02, local03
25594     17 19 02 F6 | 	mov	arg04, local05
25598     14 17 02 F6 | 	mov	arg03, local02
2559c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
255a0     18 29 02 F1 | 	add	local02, local06
255a4     16 29 0A F2 | 	cmp	local02, local04 wz
255a8     E0 FF 9F 5D |  if_ne	jmp	#LR__2850
255ac     A7 F0 03 F6 | 	mov	ptra, fp
255b0     B2 00 A0 FD | 	call	#popregs_
255b4                 | _hg010b_spin2_box_ret
255b4     2D 00 64 FD | 	ret
255b8                 | 
255b8                 | '       
255b8                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
255b8                 | _hg010b_spin2_putcharxycgf
255b8                 | ' 
255b8                 | '  
255b8                 | ' repeat yy from 0 to 15
255b8     00 00 06 F6 | 	mov	_var01, #0
255bc     97 8C 48 FB | 	callpa	#(@LR__2862-@LR__2860)>>2,fcache_load_ptr_
255c0                 | LR__2860
255c0                 | ' 
255c0                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
255c0     95 E4 05 F1 | 	add	objptr, #149
255c4     F2 02 02 FB | 	rdlong	_var02, objptr
255c8     0A 02 66 F0 | 	shl	_var02, #10
255cc     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
255d0     01 05 02 F1 | 	add	_var03, _var02
255d4     0B 03 02 F6 | 	mov	_var02, arg03
255d8     04 02 66 F0 | 	shl	_var02, #4
255dc     01 05 02 F1 | 	add	_var03, _var02
255e0     00 05 02 F1 | 	add	_var03, _var01
255e4     02 05 C2 FA | 	rdbyte	_var03, _var03
255e8                 | '   asm
255e8     00 04 0E F4 | 	testb	_var03, #0 wz
255ec     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
255f0     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
255f4     01 04 0E F4 | 	testb	_var03, #1 wz
255f8     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
255fc     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
25600     02 04 0E F4 | 	testb	_var03, #2 wz
25604     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
25608     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
2560c     03 04 0E F4 | 	testb	_var03, #3 wz
25610     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
25614     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
25618     04 04 0E F4 | 	testb	_var03, #4 wz
2561c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
25620     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
25624     05 04 0E F4 | 	testb	_var03, #5 wz
25628     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
2562c     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
25630     06 04 0E F4 | 	testb	_var03, #6 wz
25634     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
25638     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
2563c     07 04 0E F4 | 	testb	_var03, #7 wz
25640     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
25644     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
25648                 | '   
25648                 | '   ccc[0]:=c1
25648     99 E5 05 F1 | 	add	objptr, #409
2564c     F2 06 62 FC | 	wrlong	_var04, objptr
25650                 | '   ccc[1]:=c2 
25650     04 E4 05 F1 | 	add	objptr, #4
25654     F2 08 62 FC | 	wrlong	_var05, objptr
25658                 | '   long[mailbox0][2]:=8
25658     49 E4 85 F1 | 	sub	objptr, #73
2565c     F2 04 02 FB | 	rdlong	_var03, objptr
25660     08 04 06 F1 | 	add	_var03, #8
25664     02 11 68 FC | 	wrlong	#8, _var03
25668                 | '   long[mailbox0][1]:=@ccc
25668     45 E4 05 F1 | 	add	objptr, #69
2566c     F2 04 02 F6 | 	mov	_var03, objptr
25670     45 E4 85 F1 | 	sub	objptr, #69
25674     F2 02 02 FB | 	rdlong	_var02, objptr
25678     04 02 06 F1 | 	add	_var02, #4
2567c     01 05 62 FC | 	wrlong	_var03, _var02
25680                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
25680     0C E5 85 F1 | 	sub	objptr, #268
25684     F2 04 02 FB | 	rdlong	_var03, objptr
25688     0A 03 02 F6 | 	mov	_var02, arg02
2568c     00 03 02 F1 | 	add	_var02, _var01
25690     0A 02 66 F0 | 	shl	_var02, #10
25694     09 0B 02 F6 | 	mov	_var06, arg01
25698     02 0A 66 F0 | 	shl	_var06, #2
2569c     05 03 02 F1 | 	add	_var02, _var06
256a0     01 05 02 F1 | 	add	_var03, _var02
256a4     00 00 78 FF 
256a8     00 04 06 F1 | 	add	_var03, ##-268435456
256ac     0C E5 05 F1 | 	add	objptr, #268
256b0     F2 0A 02 FB | 	rdlong	_var06, objptr
256b4     05 05 62 FC | 	wrlong	_var03, _var06
256b8                 | '   repeat
256b8                 | LR__2861
256b8     F2 04 02 FB | 	rdlong	_var03, objptr
256bc     02 03 02 FB | 	rdlong	_var02, _var03
256c0     00 02 56 F2 | 	cmps	_var02, #0 wc
256c4     F0 FF 9F CD |  if_b	jmp	#LR__2861
256c8     E9 E5 85 F1 | 	sub	objptr, #489
256cc     01 00 06 F1 | 	add	_var01, #1
256d0     10 00 56 F2 | 	cmps	_var01, #16 wc
256d4     E8 FE 9F CD |  if_b	jmp	#LR__2860
256d8                 | LR__2862
256d8                 | _hg010b_spin2_putcharxycgf_ret
256d8     2D 00 64 FD | 	ret
256dc                 | 
256dc                 | ' 
256dc                 | ' 
256dc                 | ' '**********************************************************************r***
256dc                 | ' '                                                                        *
256dc                 | ' ' Font related functions                                                 *
256dc                 | ' '                                                                        *
256dc                 | ' '*************************************************************************
256dc                 | ' 
256dc                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
256dc                 | ' 
256dc                 | ' pub setfontfamily(afontnum)
256dc                 | _hg010b_spin2_setfontfamily
256dc                 | ' 
256dc                 | ' font_family:=afontnum
256dc     95 E4 05 F1 | 	add	objptr, #149
256e0     F2 12 62 FC | 	wrlong	arg01, objptr
256e4     95 E4 85 F1 | 	sub	objptr, #149
256e8                 | ' 'if afontnum==8
256e8                 | ' '  font_ptr:=@amiga_font
256e8                 | ' 
256e8                 | ' if afontnum==4
256e8     04 12 0E F2 | 	cmp	arg01, #4 wz
256ec                 | '   font_ptr:=@st_font
256ec     08 00 00 AF 
256f0     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
256f4     08 E4 05 A1 |  if_e	add	objptr, #8
256f8     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
256fc     08 E4 85 A1 |  if_e	sub	objptr, #8
25700     08 00 00 AF 
25704     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
25708                 | ' if afontnum==0
25708     00 12 0E F2 | 	cmp	arg01, #0 wz
2570c                 | '   font_ptr:=@vga_font
2570c     08 E4 05 A1 |  if_e	add	objptr, #8
25710     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
25714     08 E4 85 A1 |  if_e	sub	objptr, #8
25718                 | _hg010b_spin2_setfontfamily_ret
25718     2D 00 64 FD | 	ret
2571c                 | 
2571c                 | ' 
2571c                 | ' '*************************************************************************
2571c                 | ' '                                                                        *
2571c                 | ' '  Cursor functions                                                      *
2571c                 | ' '                                                                        *
2571c                 | ' '*************************************************************************
2571c                 | ' 
2571c                 | ' 
2571c                 | ' pub setcursorpos(x,y)
2571c                 | _hg010b_spin2_setcursorpos
2571c                 | ' 
2571c                 | ' ''---------- Set the (x,y) position of cursor
2571c                 | ' 
2571c                 | ' cursor_x:=x
2571c     3C E4 05 F1 | 	add	objptr, #60
25720     F2 12 52 FC | 	wrword	arg01, objptr
25724                 | ' cursor_y:=y
25724     02 E4 05 F1 | 	add	objptr, #2
25728     F2 14 42 FC | 	wrbyte	arg02, objptr
2572c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2572c     02 E4 85 F1 | 	sub	objptr, #2
25730     F2 14 E2 FA | 	rdword	arg02, objptr
25734     02 14 66 F0 | 	shl	arg02, #2
25738     02 E4 05 F1 | 	add	objptr, #2
2573c     F2 16 C2 FA | 	rdbyte	arg03, objptr
25740     3E E4 85 F1 | 	sub	objptr, #62
25744     04 16 66 F0 | 	shl	arg03, #4
25748     04 16 06 F1 | 	add	arg03, #4
2574c     11 12 06 F6 | 	mov	arg01, #17
25750     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
25754                 | _hg010b_spin2_setcursorpos_ret
25754     2D 00 64 FD | 	ret
25758                 | 
25758                 | ' 
25758                 | ' pub setcursorx(x)
25758                 | _hg010b_spin2_setcursorx
25758                 | ' cursor_x:=x
25758     3C E4 05 F1 | 	add	objptr, #60
2575c     F2 12 52 FC | 	wrword	arg01, objptr
25760                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25760     F2 14 E2 FA | 	rdword	arg02, objptr
25764     02 14 66 F0 | 	shl	arg02, #2
25768     02 E4 05 F1 | 	add	objptr, #2
2576c     F2 16 C2 FA | 	rdbyte	arg03, objptr
25770     3E E4 85 F1 | 	sub	objptr, #62
25774     04 16 66 F0 | 	shl	arg03, #4
25778     04 16 06 F1 | 	add	arg03, #4
2577c     11 12 06 F6 | 	mov	arg01, #17
25780     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
25784                 | _hg010b_spin2_setcursorx_ret
25784     2D 00 64 FD | 	ret
25788                 | 
25788                 | ' 
25788                 | ' pub setcursory(y) 
25788                 | _hg010b_spin2_setcursory
25788                 | ' cursor_y:=y
25788     3E E4 05 F1 | 	add	objptr, #62
2578c     F2 12 42 FC | 	wrbyte	arg01, objptr
25790                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
25790     02 E4 85 F1 | 	sub	objptr, #2
25794     F2 14 E2 FA | 	rdword	arg02, objptr
25798     02 14 66 F0 | 	shl	arg02, #2
2579c     02 E4 05 F1 | 	add	objptr, #2
257a0     F2 16 C2 FA | 	rdbyte	arg03, objptr
257a4     3E E4 85 F1 | 	sub	objptr, #62
257a8     04 16 66 F0 | 	shl	arg03, #4
257ac     04 16 06 F1 | 	add	arg03, #4
257b0     11 12 06 F6 | 	mov	arg01, #17
257b4     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
257b8                 | _hg010b_spin2_setcursory_ret
257b8     2D 00 64 FD | 	ret
257bc                 | 
257bc                 | ' 
257bc                 | ' '*************************************************************************
257bc                 | ' '                                                                        *
257bc                 | ' '  VBlank functions                                                      *
257bc                 | ' '                                                                        *
257bc                 | ' '*************************************************************************
257bc                 | ' 
257bc                 | ' pub waitvbl(amount) | i
257bc                 | _hg010b_spin2_waitvbl
257bc     03 4A 05 F6 | 	mov	COUNT_, #3
257c0     A8 00 A0 FD | 	call	#pushregs_
257c4     09 27 02 F6 | 	mov	local01, arg01
257c8                 | ' 
257c8                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
257c8                 | ' 
257c8                 | ' repeat i from 1 to amount
257c8     01 28 06 F6 | 	mov	local02, #1
257cc     01 26 56 F2 | 	cmps	local01, #1 wc
257d0     01 2A 86 F6 | 	negc	local03, #1
257d4     15 27 02 F1 | 	add	local01, local03
257d8                 | LR__2870
257d8                 | '   repeat until vblank==0
257d8                 | LR__2871
257d8     49 E4 05 F1 | 	add	objptr, #73
257dc     F2 12 0A FB | 	rdlong	arg01, objptr wz
257e0     49 E4 85 F1 | 	sub	objptr, #73
257e4     0C 00 90 AD |  if_e	jmp	#LR__2872
257e8                 | '     waitus(100)
257e8     64 12 06 F6 | 	mov	arg01, #100
257ec     28 20 B0 FD | 	call	#__system___waitus
257f0     E4 FF 9F FD | 	jmp	#LR__2871
257f4                 | LR__2872
257f4                 | '   repeat until vblank==1
257f4                 | LR__2873
257f4     49 E4 05 F1 | 	add	objptr, #73
257f8     F2 12 02 FB | 	rdlong	arg01, objptr
257fc     49 E4 85 F1 | 	sub	objptr, #73
25800     01 12 0E F2 | 	cmp	arg01, #1 wz
25804     0C 00 90 AD |  if_e	jmp	#LR__2874
25808                 | '     waitus(100)
25808     64 12 06 F6 | 	mov	arg01, #100
2580c     08 20 B0 FD | 	call	#__system___waitus
25810     E0 FF 9F FD | 	jmp	#LR__2873
25814                 | LR__2874
25814     15 29 02 F1 | 	add	local02, local03
25818     13 29 0A F2 | 	cmp	local02, local01 wz
2581c     B8 FF 9F 5D |  if_ne	jmp	#LR__2870
25820     A7 F0 03 F6 | 	mov	ptra, fp
25824     B2 00 A0 FD | 	call	#popregs_
25828                 | _hg010b_spin2_waitvbl_ret
25828     2D 00 64 FD | 	ret
2582c                 | 
2582c                 | ' 
2582c                 | ' ''---------- Set color #c in palette to r,g,b
2582c                 | ' 
2582c                 | ' pub setcolor(c,r,g,b)  |cc
2582c                 | _hg010b_spin2_setcolor
2582c                 | ' 
2582c                 | ' cc:=r<<24+g<<16+b<<8
2582c     18 14 66 F0 | 	shl	arg02, #24
25830     10 16 66 F0 | 	shl	arg03, #16
25834     0B 15 02 F1 | 	add	arg02, arg03
25838     08 18 66 F0 | 	shl	arg04, #8
2583c     0C 15 02 F1 | 	add	arg02, arg04
25840                 | ' long[palette_ptr+4*c]:=cc
25840     1C E4 05 F1 | 	add	objptr, #28
25844     F2 18 02 FB | 	rdlong	arg04, objptr
25848     1C E4 85 F1 | 	sub	objptr, #28
2584c     02 12 66 F0 | 	shl	arg01, #2
25850     09 19 02 F1 | 	add	arg04, arg01
25854     0C 15 62 FC | 	wrlong	arg02, arg04
25858                 | _hg010b_spin2_setcolor_ret
25858     2D 00 64 FD | 	ret
2585c                 | 
2585c                 | ' 
2585c                 | ' 
2585c                 | ' pub cls(fc,bc)   :c,i
2585c                 | _hg010b_spin2_cls
2585c     02 4A 05 F6 | 	mov	COUNT_, #2
25860     A8 00 A0 FD | 	call	#pushregs_
25864     09 27 02 F6 | 	mov	local01, arg01
25868     0A 29 02 F6 | 	mov	local02, arg02
2586c                 | ' 
2586c                 | ' c:=bc
2586c                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
2586c     DD E4 05 F1 | 	add	objptr, #221
25870     F2 12 02 FB | 	rdlong	arg01, objptr
25874     A5 E4 85 F1 | 	sub	objptr, #165
25878     F2 16 02 FB | 	rdlong	arg03, objptr
2587c     02 16 66 F0 | 	shl	arg03, #2
25880     14 15 02 F6 | 	mov	arg02, local02
25884     00 18 06 F6 | 	mov	arg04, #0
25888     01 1A 06 F6 | 	mov	arg05, #1
2588c     0B 00 00 FF 
25890     94 E4 05 F1 | 	add	objptr, ##5780
25894     B4 10 B0 FD | 	call	#_psram_spin2_fill
25898                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
25898     0B 00 00 FF 
2589c     C8 E4 85 F1 | 	sub	objptr, ##5832
258a0     F2 12 02 FB | 	rdlong	arg01, objptr
258a4     04 E4 85 F1 | 	sub	objptr, #4
258a8     F2 16 02 FB | 	rdlong	arg03, objptr
258ac     09 17 82 F1 | 	sub	arg03, arg01
258b0     20 14 06 F6 | 	mov	arg02, #32
258b4     00 18 06 F6 | 	mov	arg04, #0
258b8     01 1A 06 F6 | 	mov	arg05, #1
258bc     0B 00 00 FF 
258c0     CC E4 05 F1 | 	add	objptr, ##5836
258c4     84 10 B0 FD | 	call	#_psram_spin2_fill
258c8                 | ' setwritecolors(fc,bc)
258c8                 | ' 
258c8                 | ' write_color:=ff
258c8     0B 00 00 FF 
258cc     8B E4 85 F1 | 	sub	objptr, ##5771
258d0     F2 26 62 FC | 	wrlong	local01, objptr
258d4                 | ' write_background:=bb
258d4     04 E4 05 F1 | 	add	objptr, #4
258d8     F2 28 62 FC | 	wrlong	local02, objptr
258dc                 | ' cursor_x:=0
258dc     09 E4 85 F1 | 	sub	objptr, #9
258e0     F2 00 58 FC | 	wrword	#0, objptr
258e4                 | ' cursor_y:=0
258e4     02 E4 05 F1 | 	add	objptr, #2
258e8     F2 00 48 FC | 	wrbyte	#0, objptr
258ec                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
258ec     02 E4 85 F1 | 	sub	objptr, #2
258f0     F2 14 E2 FA | 	rdword	arg02, objptr
258f4     02 14 66 F0 | 	shl	arg02, #2
258f8     02 E4 05 F1 | 	add	objptr, #2
258fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
25900     3E E4 85 F1 | 	sub	objptr, #62
25904     04 16 66 F0 | 	shl	arg03, #4
25908     04 16 06 F1 | 	add	arg03, #4
2590c     11 12 06 F6 | 	mov	arg01, #17
25910     90 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
25914                 | ' setcursorcolor(fc)
25914     13 13 02 F6 | 	mov	arg01, local01
25918     88 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
2591c     14 FB 01 F6 | 	mov	result1, local02
25920     00 FC 05 F6 | 	mov	result2, #0
25924     A7 F0 03 F6 | 	mov	ptra, fp
25928     B2 00 A0 FD | 	call	#popregs_
2592c                 | _hg010b_spin2_cls_ret
2592c     2D 00 64 FD | 	ret
25930                 | 
25930                 | ' 
25930                 | ' ''---------- Output a char at the cursor position, move the cursor 
25930                 | ' 
25930                 | ' pub putchar(achar) | c,x,y,l,newcpl
25930                 | _hg010b_spin2_putchar
25930     02 4A 05 F6 | 	mov	COUNT_, #2
25934     A8 00 A0 FD | 	call	#pushregs_
25938     09 27 02 F6 | 	mov	local01, arg01
2593c                 | ' 
2593c                 | ' if achar==10
2593c     0A 26 0E F2 | 	cmp	local01, #10 wz
25940                 | '   crlf()
25940     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
25944                 | ' if achar==9
25944     09 26 0E F2 | 	cmp	local01, #9 wz
25948     18 00 90 5D |  if_ne	jmp	#LR__2880
2594c                 | '   cursor_x:=(cursor_x& %11110000)+16
2594c     3C E4 05 F1 | 	add	objptr, #60
25950     F2 16 E2 FA | 	rdword	arg03, objptr
25954     F0 16 06 F5 | 	and	arg03, #240
25958     10 16 06 F1 | 	add	arg03, #16
2595c     F2 16 52 FC | 	wrword	arg03, objptr
25960     3C E4 85 F1 | 	sub	objptr, #60
25964                 | LR__2880
25964                 | '   
25964                 | ' if (achar<>9) && (achar<>10) 
25964     09 26 0E F2 | 	cmp	local01, #9 wz
25968     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
2596c     A8 00 90 AD |  if_e	jmp	#LR__2881
25970                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
25970     3C E4 05 F1 | 	add	objptr, #60
25974     F2 12 E2 FA | 	rdword	arg01, objptr
25978     02 E4 05 F1 | 	add	objptr, #2
2597c     F2 14 C2 FA | 	rdbyte	arg02, objptr
25980     04 14 66 F0 | 	shl	arg02, #4
25984     04 14 06 F1 | 	add	arg02, #4
25988     03 E4 05 F1 | 	add	objptr, #3
2598c     F2 18 02 FB | 	rdlong	arg04, objptr
25990     04 E4 05 F1 | 	add	objptr, #4
25994     F2 1A 02 FB | 	rdlong	arg05, objptr
25998     45 E4 85 F1 | 	sub	objptr, #69
2599c     13 17 02 F6 | 	mov	arg03, local01
259a0     14 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
259a4     04 E4 05 F1 | 	add	objptr, #4
259a8     F2 12 02 FB | 	rdlong	arg01, objptr
259ac     1C 00 00 FF 
259b0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
259b4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
259b8     3A E4 05 F1 | 	add	objptr, #58
259bc     F2 1A C2 FA | 	rdbyte	arg05, objptr
259c0     0D 17 02 FD | 	qmul	arg03, arg05
259c4                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
259c4     1C 00 00 FF 
259c8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
259cc     02 E4 85 F1 | 	sub	objptr, #2
259d0     F2 28 E2 FA | 	rdword	local02, objptr
259d4     01 28 46 F0 | 	shr	local02, #1
259d8     13 15 02 F6 | 	mov	arg02, local01
259dc     01 16 06 F6 | 	mov	arg03, #1
259e0     00 18 06 F6 | 	mov	arg04, #0
259e4     01 1A 06 F6 | 	mov	arg05, #1
259e8     0B 00 00 FF 
259ec     90 E4 05 F1 | 	add	objptr, ##5776
259f0     18 26 62 FD | 	getqx	local01
259f4     14 27 02 F1 | 	add	local01, local02
259f8     13 13 02 F1 | 	add	arg01, local01
259fc     4C 0F B0 FD | 	call	#_psram_spin2_fill
25a00                 | '   cursor_x+=2
25a00     0B 00 00 FF 
25a04     90 E4 85 F1 | 	sub	objptr, ##5776
25a08     F2 28 E2 FA | 	rdword	local02, objptr
25a0c     02 28 06 F1 | 	add	local02, #2
25a10     F2 28 52 FC | 	wrword	local02, objptr
25a14     3C E4 85 F1 | 	sub	objptr, #60
25a18                 | LR__2881
25a18                 | ' 
25a18                 | ' if cursor_x>=256
25a18     3C E4 05 F1 | 	add	objptr, #60
25a1c     F2 28 E2 FA | 	rdword	local02, objptr
25a20     3C E4 85 F1 | 	sub	objptr, #60
25a24     00 29 56 F2 | 	cmps	local02, #256 wc
25a28     64 00 90 CD |  if_b	jmp	#LR__2883
25a2c                 | '   cursor_x:=0
25a2c     3C E4 05 F1 | 	add	objptr, #60
25a30     F2 00 58 FC | 	wrword	#0, objptr
25a34                 | '   cursor_y+=1
25a34     02 E4 05 F1 | 	add	objptr, #2
25a38     F2 28 C2 FA | 	rdbyte	local02, objptr
25a3c     01 28 06 F1 | 	add	local02, #1
25a40     F2 28 42 FC | 	wrbyte	local02, objptr
25a44                 | '   if cursor_y>st_lines-1
25a44     C3 E4 05 F1 | 	add	objptr, #195
25a48     F2 28 02 FB | 	rdlong	local02, objptr
25a4c     01 28 86 F1 | 	sub	local02, #1
25a50     C3 E4 85 F1 | 	sub	objptr, #195
25a54     F2 16 C2 FA | 	rdbyte	arg03, objptr
25a58     3E E4 85 F1 | 	sub	objptr, #62
25a5c     14 17 5A F2 | 	cmps	arg03, local02 wcz
25a60     2C 00 90 ED |  if_be	jmp	#LR__2882
25a64                 | '     scrollup2()
25a64     00 12 06 F6 | 	mov	arg01, #0
25a68     01 00 00 FF 
25a6c     58 14 06 F6 | 	mov	arg02, ##600
25a70     10 16 06 F6 | 	mov	arg03, #16
25a74     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
25a78                 | '     cursor_y:=st_lines-1
25a78     01 E5 05 F1 | 	add	objptr, #257
25a7c     F2 28 02 FB | 	rdlong	local02, objptr
25a80     01 28 86 F1 | 	sub	local02, #1
25a84     C3 E4 85 F1 | 	sub	objptr, #195
25a88     F2 28 42 FC | 	wrbyte	local02, objptr
25a8c     3E E4 85 F1 | 	sub	objptr, #62
25a90                 | LR__2882
25a90                 | LR__2883
25a90                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25a90     3C E4 05 F1 | 	add	objptr, #60
25a94     F2 14 E2 FA | 	rdword	arg02, objptr
25a98     02 14 66 F0 | 	shl	arg02, #2
25a9c     02 E4 05 F1 | 	add	objptr, #2
25aa0     F2 16 C2 FA | 	rdbyte	arg03, objptr
25aa4     3E E4 85 F1 | 	sub	objptr, #62
25aa8     04 16 66 F0 | 	shl	arg03, #4
25aac     04 16 06 F1 | 	add	arg03, #4
25ab0     11 12 06 F6 | 	mov	arg01, #17
25ab4     EC EF BF FD | 	call	#_hg010b_spin2_setspritepos
25ab8     A7 F0 03 F6 | 	mov	ptra, fp
25abc     B2 00 A0 FD | 	call	#popregs_
25ac0                 | _hg010b_spin2_putchar_ret
25ac0     2D 00 64 FD | 	ret
25ac4                 | 
25ac4                 | '     
25ac4                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
25ac4                 | ' 
25ac4                 | ' pub putchar2(achar) | c,x,y,l,newcpl
25ac4                 | _hg010b_spin2_putchar2
25ac4     02 4A 05 F6 | 	mov	COUNT_, #2
25ac8     A8 00 A0 FD | 	call	#pushregs_
25acc     09 27 02 F6 | 	mov	local01, arg01
25ad0                 | ' 
25ad0                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
25ad0     3C E4 05 F1 | 	add	objptr, #60
25ad4     F2 12 E2 FA | 	rdword	arg01, objptr
25ad8     02 E4 05 F1 | 	add	objptr, #2
25adc     F2 14 C2 FA | 	rdbyte	arg02, objptr
25ae0     04 14 66 F0 | 	shl	arg02, #4
25ae4     04 14 06 F1 | 	add	arg02, #4
25ae8     03 E4 05 F1 | 	add	objptr, #3
25aec     F2 18 02 FB | 	rdlong	arg04, objptr
25af0     04 E4 05 F1 | 	add	objptr, #4
25af4     F2 1A 02 FB | 	rdlong	arg05, objptr
25af8     45 E4 85 F1 | 	sub	objptr, #69
25afc     13 17 02 F6 | 	mov	arg03, local01
25b00     B4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
25b04     04 E4 05 F1 | 	add	objptr, #4
25b08     F2 12 02 FB | 	rdlong	arg01, objptr
25b0c     1C 00 00 FF 
25b10     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25b14     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25b18     3A E4 05 F1 | 	add	objptr, #58
25b1c     F2 1A C2 FA | 	rdbyte	arg05, objptr
25b20     0D 17 02 FD | 	qmul	arg03, arg05
25b24                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
25b24     1C 00 00 FF 
25b28     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25b2c     02 E4 85 F1 | 	sub	objptr, #2
25b30     F2 28 E2 FA | 	rdword	local02, objptr
25b34     01 28 46 F0 | 	shr	local02, #1
25b38     13 15 02 F6 | 	mov	arg02, local01
25b3c     01 16 06 F6 | 	mov	arg03, #1
25b40     00 18 06 F6 | 	mov	arg04, #0
25b44     01 1A 06 F6 | 	mov	arg05, #1
25b48     0B 00 00 FF 
25b4c     90 E4 05 F1 | 	add	objptr, ##5776
25b50     18 26 62 FD | 	getqx	local01
25b54     14 27 02 F1 | 	add	local01, local02
25b58     13 13 02 F1 | 	add	arg01, local01
25b5c     EC 0D B0 FD | 	call	#_psram_spin2_fill
25b60                 | ' 
25b60                 | ' cursor_x+=2
25b60     0B 00 00 FF 
25b64     90 E4 85 F1 | 	sub	objptr, ##5776
25b68     F2 28 E2 FA | 	rdword	local02, objptr
25b6c     02 28 06 F1 | 	add	local02, #2
25b70     F2 28 52 FC | 	wrword	local02, objptr
25b74                 | ' if cursor_x>=256
25b74     F2 28 E2 FA | 	rdword	local02, objptr
25b78     3C E4 85 F1 | 	sub	objptr, #60
25b7c     00 29 56 F2 | 	cmps	local02, #256 wc
25b80     64 00 90 CD |  if_b	jmp	#LR__2891
25b84                 | '   cursor_x:=0
25b84     3C E4 05 F1 | 	add	objptr, #60
25b88     F2 00 58 FC | 	wrword	#0, objptr
25b8c                 | '   cursor_y+=1
25b8c     02 E4 05 F1 | 	add	objptr, #2
25b90     F2 28 C2 FA | 	rdbyte	local02, objptr
25b94     01 28 06 F1 | 	add	local02, #1
25b98     F2 28 42 FC | 	wrbyte	local02, objptr
25b9c                 | '   if cursor_y>st_lines-1
25b9c     C3 E4 05 F1 | 	add	objptr, #195
25ba0     F2 28 02 FB | 	rdlong	local02, objptr
25ba4     01 28 86 F1 | 	sub	local02, #1
25ba8     C3 E4 85 F1 | 	sub	objptr, #195
25bac     F2 16 C2 FA | 	rdbyte	arg03, objptr
25bb0     3E E4 85 F1 | 	sub	objptr, #62
25bb4     14 17 5A F2 | 	cmps	arg03, local02 wcz
25bb8     2C 00 90 ED |  if_be	jmp	#LR__2890
25bbc                 | '     scrollup2()
25bbc     00 12 06 F6 | 	mov	arg01, #0
25bc0     01 00 00 FF 
25bc4     58 14 06 F6 | 	mov	arg02, ##600
25bc8     10 16 06 F6 | 	mov	arg03, #16
25bcc     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
25bd0                 | '     cursor_y:=st_lines-1
25bd0     01 E5 05 F1 | 	add	objptr, #257
25bd4     F2 28 02 FB | 	rdlong	local02, objptr
25bd8     01 28 86 F1 | 	sub	local02, #1
25bdc     C3 E4 85 F1 | 	sub	objptr, #195
25be0     F2 28 42 FC | 	wrbyte	local02, objptr
25be4     3E E4 85 F1 | 	sub	objptr, #62
25be8                 | LR__2890
25be8                 | LR__2891
25be8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
25be8     3C E4 05 F1 | 	add	objptr, #60
25bec     F2 14 E2 FA | 	rdword	arg02, objptr
25bf0     02 14 66 F0 | 	shl	arg02, #2
25bf4     02 E4 05 F1 | 	add	objptr, #2
25bf8     F2 16 C2 FA | 	rdbyte	arg03, objptr
25bfc     3E E4 85 F1 | 	sub	objptr, #62
25c00     04 16 66 F0 | 	shl	arg03, #4
25c04     04 16 06 F1 | 	add	arg03, #4
25c08     11 12 06 F6 | 	mov	arg01, #17
25c0c     94 EE BF FD | 	call	#_hg010b_spin2_setspritepos
25c10     A7 F0 03 F6 | 	mov	ptra, fp
25c14     B2 00 A0 FD | 	call	#popregs_
25c18                 | _hg010b_spin2_putchar2_ret
25c18     2D 00 64 FD | 	ret
25c1c                 | 
25c1c                 | ' ''--------- Output a string at the cursor position, move the cursor  
25c1c                 | ' 
25c1c                 | ' pub write(text) | iii,c,ncx,ncy
25c1c                 | _hg010b_spin2_write
25c1c     04 4A 05 F6 | 	mov	COUNT_, #4
25c20     A8 00 A0 FD | 	call	#pushregs_
25c24     09 27 02 F6 | 	mov	local01, arg01
25c28                 | ' 
25c28                 | ' repeat iii from 0 to strsize(text)-1
25c28     00 28 06 F6 | 	mov	local02, #0
25c2c     13 13 02 F6 | 	mov	arg01, local01
25c30     09 2B 02 F6 | 	mov	local03, arg01
25c34     97 06 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
25c38                 | LR__2900
25c38     15 FB C9 FA | 	rdbyte	result1, local03 wz
25c3c     01 2A 06 51 |  if_ne	add	local03, #1
25c40     F4 FF 9F 5D |  if_ne	jmp	#LR__2900
25c44                 | LR__2901
25c44     09 2B 82 F1 | 	sub	local03, arg01
25c48     01 2A 86 F1 | 	sub	local03, #1
25c4c     00 2A 56 F2 | 	cmps	local03, #0 wc
25c50     01 2C 86 F6 | 	negc	local04, #1
25c54     16 2B 02 F1 | 	add	local03, local04
25c58                 | LR__2902
25c58                 | '   putchar2(byte[text+iii])
25c58     13 13 02 F6 | 	mov	arg01, local01
25c5c     14 13 02 F1 | 	add	arg01, local02
25c60     09 13 C2 FA | 	rdbyte	arg01, arg01
25c64     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
25c68     16 29 02 F1 | 	add	local02, local04
25c6c     15 29 0A F2 | 	cmp	local02, local03 wz
25c70     E4 FF 9F 5D |  if_ne	jmp	#LR__2902
25c74     A7 F0 03 F6 | 	mov	ptra, fp
25c78     B2 00 A0 FD | 	call	#popregs_
25c7c                 | _hg010b_spin2_write_ret
25c7c     2D 00 64 FD | 	ret
25c80                 | 
25c80                 | '    
25c80                 | ' ' a version for text scrolling in Basic shifted 4 lines down
25c80                 | ' 
25c80                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
25c80                 | _hg010b_spin2_scrollup2
25c80     03 4A 05 F6 | 	mov	COUNT_, #3
25c84     A8 00 A0 FD | 	call	#pushregs_
25c88                 | ' 	
25c88                 | ' repeat i from 4 to 579 
25c88     04 26 06 F6 | 	mov	local01, #4
25c8c                 | LR__2910
25c8c     DD E4 05 F1 | 	add	objptr, #221
25c90     F2 14 02 FB | 	rdlong	arg02, objptr
25c94     13 1B 02 F6 | 	mov	arg05, local01
25c98     10 1A 06 F1 | 	add	arg05, #16
25c9c     02 1A 66 F0 | 	shl	arg05, #2
25ca0     14 E4 05 F1 | 	add	objptr, #20
25ca4     F2 16 02 FB | 	rdlong	arg03, objptr
25ca8     0B 1B 02 FD | 	qmul	arg05, arg03
25cac                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
25cac     02 16 66 F0 | 	shl	arg03, #2
25cb0     F4 03 00 FF 
25cb4     00 12 06 F6 | 	mov	arg01, ##518144
25cb8     0A 00 00 FF 
25cbc     DB E5 05 F1 | 	add	objptr, ##5595
25cc0     18 1A 62 FD | 	getqx	arg05
25cc4     0D 15 02 F1 | 	add	arg02, arg05
25cc8     48 0B B0 FD | 	call	#_psram_spin2_read1
25ccc     0A 00 00 FF 
25cd0     EF E5 85 F1 | 	sub	objptr, ##5615
25cd4     F2 14 02 FB | 	rdlong	arg02, objptr
25cd8     13 1B 02 F6 | 	mov	arg05, local01
25cdc     02 1A 66 F0 | 	shl	arg05, #2
25ce0     14 E4 05 F1 | 	add	objptr, #20
25ce4     F2 16 02 FB | 	rdlong	arg03, objptr
25ce8     0B 1B 02 FD | 	qmul	arg05, arg03
25cec                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25cec     02 16 66 F0 | 	shl	arg03, #2
25cf0     F4 03 00 FF 
25cf4     00 12 06 F6 | 	mov	arg01, ##518144
25cf8     0A 00 00 FF 
25cfc     DB E5 05 F1 | 	add	objptr, ##5595
25d00     18 1A 62 FD | 	getqx	arg05
25d04     0D 15 02 F1 | 	add	arg02, arg05
25d08     A4 0B B0 FD | 	call	#_psram_spin2_write
25d0c     0B 00 00 FF 
25d10     CC E4 85 F1 | 	sub	objptr, ##5836
25d14     01 26 06 F1 | 	add	local01, #1
25d18     01 00 00 FF 
25d1c     44 26 16 F2 | 	cmp	local01, ##580 wc
25d20     68 FF 9F CD |  if_b	jmp	#LR__2910
25d24                 | ' 
25d24                 | ' repeat i from 580 to 599
25d24     01 00 00 FF 
25d28     44 26 06 F6 | 	mov	local01, ##580
25d2c                 | LR__2911
25d2c                 | '    fastline(0,1023,i,write_background)   
25d2c     45 E4 05 F1 | 	add	objptr, #69
25d30     F2 18 02 FB | 	rdlong	arg04, objptr
25d34     45 E4 85 F1 | 	sub	objptr, #69
25d38     00 12 06 F6 | 	mov	arg01, #0
25d3c     09 14 CE F9 | 	bmask	arg02, #9
25d40     13 17 02 F6 | 	mov	arg03, local01
25d44     A8 EF BF FD | 	call	#_hg010b_spin2_fastline
25d48     01 26 06 F1 | 	add	local01, #1
25d4c     01 00 00 FF 
25d50     58 26 16 F2 | 	cmp	local01, ##600 wc
25d54     D4 FF 9F CD |  if_b	jmp	#LR__2911
25d58                 | ' repeat i from 0 to 3
25d58     00 26 06 F6 | 	mov	local01, #0
25d5c                 | LR__2912
25d5c                 | '    fastline(0,1023,i,write_background)      
25d5c     45 E4 05 F1 | 	add	objptr, #69
25d60     F2 18 02 FB | 	rdlong	arg04, objptr
25d64     45 E4 85 F1 | 	sub	objptr, #69
25d68     00 12 06 F6 | 	mov	arg01, #0
25d6c     09 14 CE F9 | 	bmask	arg02, #9
25d70     13 17 02 F6 | 	mov	arg03, local01
25d74     78 EF BF FD | 	call	#_hg010b_spin2_fastline
25d78     01 26 06 F1 | 	add	local01, #1
25d7c     04 26 56 F2 | 	cmps	local01, #4 wc
25d80     D8 FF 9F CD |  if_b	jmp	#LR__2912
25d84                 | ' 
25d84                 | ' repeat i from 0 to 35
25d84     00 26 06 F6 | 	mov	local01, #0
25d88                 | LR__2913
25d88     13 1B 02 F6 | 	mov	arg05, local01
25d8c     01 1A 06 F1 | 	add	arg05, #1
25d90     1C 00 00 FF 
25d94     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25d98     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25d9c     0B 1B 02 FD | 	qmul	arg05, arg03
25da0                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
25da0     04 E4 05 F1 | 	add	objptr, #4
25da4     F2 14 02 FB | 	rdlong	arg02, objptr
25da8     1C 00 00 FF 
25dac     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25db0     F4 03 00 FF 
25db4     00 12 06 F6 | 	mov	arg01, ##518144
25db8     0B 00 00 FF 
25dbc     C8 E4 05 F1 | 	add	objptr, ##5832
25dc0     18 1A 62 FD | 	getqx	arg05
25dc4     0D 15 02 F1 | 	add	arg02, arg05
25dc8     48 0A B0 FD | 	call	#_psram_spin2_read1
25dcc     1C 00 00 FF 
25dd0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25dd4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25dd8     0B 27 02 FD | 	qmul	local01, arg03
25ddc                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
25ddc     0B 00 00 FF 
25de0     C8 E4 85 F1 | 	sub	objptr, ##5832
25de4     F2 14 02 FB | 	rdlong	arg02, objptr
25de8     1C 00 00 FF 
25dec     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25df0     F4 03 00 FF 
25df4     00 12 06 F6 | 	mov	arg01, ##518144
25df8     0B 00 00 FF 
25dfc     C8 E4 05 F1 | 	add	objptr, ##5832
25e00     18 1A 62 FD | 	getqx	arg05
25e04     0D 15 02 F1 | 	add	arg02, arg05
25e08     A4 0A B0 FD | 	call	#_psram_spin2_write
25e0c     0B 00 00 FF 
25e10     CC E4 85 F1 | 	sub	objptr, ##5836
25e14     01 26 06 F1 | 	add	local01, #1
25e18     24 26 56 F2 | 	cmps	local01, #36 wc
25e1c     68 FF 9F CD |  if_b	jmp	#LR__2913
25e20                 | ' repeat i from 0 to timings[7]-1
25e20     00 26 06 F6 | 	mov	local01, #0
25e24     1C 00 00 FF 
25e28     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25e2c     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
25e30     1C 00 00 FF 
25e34     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25e38     01 28 86 F1 | 	sub	local02, #1
25e3c     00 28 56 F2 | 	cmps	local02, #0 wc
25e40     01 2A 86 F6 | 	negc	local03, #1
25e44     15 29 02 F1 | 	add	local02, local03
25e48                 | LR__2914
25e48                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
25e48     04 E4 05 F1 | 	add	objptr, #4
25e4c     F2 12 02 FB | 	rdlong	arg01, objptr
25e50     1C 00 00 FF 
25e54     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25e58     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
25e5c     1C 00 00 FF 
25e60     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25e64     0D 19 02 F6 | 	mov	arg04, arg05
25e68     03 18 66 F0 | 	shl	arg04, #3
25e6c     0D 19 02 F1 | 	add	arg04, arg05
25e70     02 18 66 F0 | 	shl	arg04, #2
25e74     13 19 02 F1 | 	add	arg04, local01
25e78     0C 13 02 F1 | 	add	arg01, arg04
25e7c     20 14 06 F6 | 	mov	arg02, #32
25e80     01 16 06 F6 | 	mov	arg03, #1
25e84     00 18 06 F6 | 	mov	arg04, #0
25e88     01 1A 06 F6 | 	mov	arg05, #1
25e8c     0B 00 00 FF 
25e90     C8 E4 05 F1 | 	add	objptr, ##5832
25e94     B4 0A B0 FD | 	call	#_psram_spin2_fill
25e98     0B 00 00 FF 
25e9c     CC E4 85 F1 | 	sub	objptr, ##5836
25ea0     15 27 02 F1 | 	add	local01, local03
25ea4     14 27 0A F2 | 	cmp	local01, local02 wz
25ea8     9C FF 9F 5D |  if_ne	jmp	#LR__2914
25eac     A7 F0 03 F6 | 	mov	ptra, fp
25eb0     B2 00 A0 FD | 	call	#popregs_
25eb4                 | _hg010b_spin2_scrollup2_ret
25eb4     2D 00 64 FD | 	ret
25eb8                 | 
25eb8                 | '  
25eb8                 | ' ''----------- Scroll the screen one line down 
25eb8                 | ' 
25eb8                 | ' pub scrolldown(start=0) | i
25eb8                 | _hg010b_spin2_scrolldown
25eb8     05 4A 05 F6 | 	mov	COUNT_, #5
25ebc     A8 00 A0 FD | 	call	#pushregs_
25ec0     09 27 02 F6 | 	mov	local01, arg01
25ec4                 | ' 
25ec4                 | ' repeat i from 579 to (start*16)+4
25ec4     01 00 00 FF 
25ec8     43 28 06 F6 | 	mov	local02, ##579
25ecc     13 2B 02 F6 | 	mov	local03, local01
25ed0     04 2A 66 F0 | 	shl	local03, #4
25ed4     04 2A 06 F1 | 	add	local03, #4
25ed8     01 00 00 FF 
25edc     43 2A 56 F2 | 	cmps	local03, ##579 wc
25ee0     01 2C 86 F6 | 	negc	local04, #1
25ee4     16 2F 02 F6 | 	mov	local05, local04
25ee8     16 2B 02 F1 | 	add	local03, local04
25eec                 | LR__2920
25eec     DD E4 05 F1 | 	add	objptr, #221
25ef0     F2 14 02 FB | 	rdlong	arg02, objptr
25ef4     14 2D 02 F6 | 	mov	local04, local02
25ef8     02 2C 66 F0 | 	shl	local04, #2
25efc     14 E4 05 F1 | 	add	objptr, #20
25f00     F2 16 02 FB | 	rdlong	arg03, objptr
25f04     0B 2D 02 FD | 	qmul	local04, arg03
25f08                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25f08     02 16 66 F0 | 	shl	arg03, #2
25f0c     F4 03 00 FF 
25f10     00 12 06 F6 | 	mov	arg01, ##518144
25f14     0A 00 00 FF 
25f18     DB E5 05 F1 | 	add	objptr, ##5595
25f1c     18 2C 62 FD | 	getqx	local04
25f20     16 15 02 F1 | 	add	arg02, local04
25f24     EC 08 B0 FD | 	call	#_psram_spin2_read1
25f28     0A 00 00 FF 
25f2c     EF E5 85 F1 | 	sub	objptr, ##5615
25f30     F2 14 02 FB | 	rdlong	arg02, objptr
25f34     14 2D 02 F6 | 	mov	local04, local02
25f38     10 2C 06 F1 | 	add	local04, #16
25f3c     02 2C 66 F0 | 	shl	local04, #2
25f40     14 E4 05 F1 | 	add	objptr, #20
25f44     F2 16 02 FB | 	rdlong	arg03, objptr
25f48     0B 2D 02 FD | 	qmul	local04, arg03
25f4c                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
25f4c     02 16 66 F0 | 	shl	arg03, #2
25f50     F4 03 00 FF 
25f54     00 12 06 F6 | 	mov	arg01, ##518144
25f58     0A 00 00 FF 
25f5c     DB E5 05 F1 | 	add	objptr, ##5595
25f60     18 2C 62 FD | 	getqx	local04
25f64     16 15 02 F1 | 	add	arg02, local04
25f68     44 09 B0 FD | 	call	#_psram_spin2_write
25f6c     0B 00 00 FF 
25f70     CC E4 85 F1 | 	sub	objptr, ##5836
25f74     17 29 02 F1 | 	add	local02, local05
25f78     15 29 0A F2 | 	cmp	local02, local03 wz
25f7c     6C FF 9F 5D |  if_ne	jmp	#LR__2920
25f80                 | ' 
25f80                 | ' repeat i from (start*16)+4 to (start*16)+19
25f80     13 29 02 F6 | 	mov	local02, local01
25f84     04 28 66 F0 | 	shl	local02, #4
25f88     04 28 06 F1 | 	add	local02, #4
25f8c     13 2F 02 F6 | 	mov	local05, local01
25f90     04 2E 66 F0 | 	shl	local05, #4
25f94     13 2E 06 F1 | 	add	local05, #19
25f98     13 2D 02 F6 | 	mov	local04, local01
25f9c     04 2C 66 F0 | 	shl	local04, #4
25fa0     04 2C 06 F1 | 	add	local04, #4
25fa4     16 2F 52 F2 | 	cmps	local05, local04 wc
25fa8     01 2C 86 F6 | 	negc	local04, #1
25fac     16 2B 02 F6 | 	mov	local03, local04
25fb0     16 2F 02 F1 | 	add	local05, local04
25fb4                 | LR__2921
25fb4                 | '    fastline(0,1023,i,write_background)    
25fb4     45 E4 05 F1 | 	add	objptr, #69
25fb8     F2 18 02 FB | 	rdlong	arg04, objptr
25fbc     45 E4 85 F1 | 	sub	objptr, #69
25fc0     00 12 06 F6 | 	mov	arg01, #0
25fc4     09 14 CE F9 | 	bmask	arg02, #9
25fc8     14 17 02 F6 | 	mov	arg03, local02
25fcc     20 ED BF FD | 	call	#_hg010b_spin2_fastline
25fd0     15 29 02 F1 | 	add	local02, local03
25fd4     17 29 0A F2 | 	cmp	local02, local05 wz
25fd8     D8 FF 9F 5D |  if_ne	jmp	#LR__2921
25fdc                 | '    
25fdc                 | ' repeat i from 35 to start
25fdc     23 28 06 F6 | 	mov	local02, #35
25fe0     23 26 56 F2 | 	cmps	local01, #35 wc
25fe4     01 2C 86 F6 | 	negc	local04, #1
25fe8     13 2F 02 F6 | 	mov	local05, local01
25fec     16 2F 02 F1 | 	add	local05, local04
25ff0                 | LR__2922
25ff0                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
25ff0     04 E4 05 F1 | 	add	objptr, #4
25ff4     F2 14 02 FB | 	rdlong	arg02, objptr
25ff8     14 2B 02 F6 | 	mov	local03, local02
25ffc     07 2A 66 F0 | 	shl	local03, #7
26000     15 15 02 F1 | 	add	arg02, local03
26004     F4 03 00 FF 
26008     00 12 06 F6 | 	mov	arg01, ##518144
2600c     80 16 06 F6 | 	mov	arg03, #128
26010     0B 00 00 FF 
26014     C8 E4 05 F1 | 	add	objptr, ##5832
26018     F8 07 B0 FD | 	call	#_psram_spin2_read1
2601c                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
2601c     0B 00 00 FF 
26020     C8 E4 85 F1 | 	sub	objptr, ##5832
26024     F2 14 02 FB | 	rdlong	arg02, objptr
26028     14 2B 02 F6 | 	mov	local03, local02
2602c     01 2A 06 F1 | 	add	local03, #1
26030     07 2A 66 F0 | 	shl	local03, #7
26034     15 15 02 F1 | 	add	arg02, local03
26038     F4 03 00 FF 
2603c     00 12 06 F6 | 	mov	arg01, ##518144
26040     80 16 06 F6 | 	mov	arg03, #128
26044     0B 00 00 FF 
26048     C8 E4 05 F1 | 	add	objptr, ##5832
2604c     60 08 B0 FD | 	call	#_psram_spin2_write
26050     0B 00 00 FF 
26054     CC E4 85 F1 | 	sub	objptr, ##5836
26058     16 29 02 F1 | 	add	local02, local04
2605c     17 29 0A F2 | 	cmp	local02, local05 wz
26060     8C FF 9F 5D |  if_ne	jmp	#LR__2922
26064                 | ' repeat i from 0 to 127
26064     00 28 06 F6 | 	mov	local02, #0
26068                 | LR__2923
26068                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
26068     04 E4 05 F1 | 	add	objptr, #4
2606c     F2 12 02 FB | 	rdlong	arg01, objptr
26070     13 2F 02 F6 | 	mov	local05, local01
26074     07 2E 66 F0 | 	shl	local05, #7
26078     17 13 02 F1 | 	add	arg01, local05
2607c     14 13 02 F1 | 	add	arg01, local02
26080     20 14 06 F6 | 	mov	arg02, #32
26084     01 16 06 F6 | 	mov	arg03, #1
26088     00 18 06 F6 | 	mov	arg04, #0
2608c     01 1A 06 F6 | 	mov	arg05, #1
26090     0B 00 00 FF 
26094     C8 E4 05 F1 | 	add	objptr, ##5832
26098     B0 08 B0 FD | 	call	#_psram_spin2_fill
2609c     0B 00 00 FF 
260a0     CC E4 85 F1 | 	sub	objptr, ##5836
260a4     01 28 06 F1 | 	add	local02, #1
260a8     80 28 56 F2 | 	cmps	local02, #128 wc
260ac     B8 FF 9F CD |  if_b	jmp	#LR__2923
260b0     A7 F0 03 F6 | 	mov	ptra, fp
260b4     B2 00 A0 FD | 	call	#popregs_
260b8                 | _hg010b_spin2_scrolldown_ret
260b8     2D 00 64 FD | 	ret
260bc                 | 
260bc                 | ' 
260bc                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
260bc                 | ' 
260bc                 | ' pub crlf()
260bc                 | _hg010b_spin2_crlf
260bc                 | ' 
260bc                 | ' cursor_x:=leading_spaces*2
260bc     01 00 00 FF 
260c0     B6 E4 05 F1 | 	add	objptr, ##694
260c4     F2 16 02 FB | 	rdlong	arg03, objptr
260c8     01 16 66 F0 | 	shl	arg03, #1
260cc     01 00 00 FF 
260d0     7A E4 85 F1 | 	sub	objptr, ##634
260d4     F2 16 52 FC | 	wrword	arg03, objptr
260d8                 | ' cursor_y+=1
260d8     02 E4 05 F1 | 	add	objptr, #2
260dc     F2 16 C2 FA | 	rdbyte	arg03, objptr
260e0     01 16 06 F1 | 	add	arg03, #1
260e4     F2 16 42 FC | 	wrbyte	arg03, objptr
260e8                 | ' if cursor_y>st_lines-1
260e8     C3 E4 05 F1 | 	add	objptr, #195
260ec     F2 16 02 FB | 	rdlong	arg03, objptr
260f0     01 16 86 F1 | 	sub	arg03, #1
260f4     C3 E4 85 F1 | 	sub	objptr, #195
260f8     F2 14 C2 FA | 	rdbyte	arg02, objptr
260fc     3E E4 85 F1 | 	sub	objptr, #62
26100     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
26104     2C 00 90 ED |  if_be	jmp	#LR__2930
26108                 | '   scrollup2()
26108     00 12 06 F6 | 	mov	arg01, #0
2610c     01 00 00 FF 
26110     58 14 06 F6 | 	mov	arg02, ##600
26114     10 16 06 F6 | 	mov	arg03, #16
26118     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
2611c                 | '   cursor_y:=st_lines-1
2611c     01 E5 05 F1 | 	add	objptr, #257
26120     F2 16 02 FB | 	rdlong	arg03, objptr
26124     01 16 86 F1 | 	sub	arg03, #1
26128     C3 E4 85 F1 | 	sub	objptr, #195
2612c     F2 16 42 FC | 	wrbyte	arg03, objptr
26130     3E E4 85 F1 | 	sub	objptr, #62
26134                 | LR__2930
26134                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
26134     3C E4 05 F1 | 	add	objptr, #60
26138     F2 14 E2 FA | 	rdword	arg02, objptr
2613c     02 14 66 F0 | 	shl	arg02, #2
26140     02 E4 05 F1 | 	add	objptr, #2
26144     F2 16 C2 FA | 	rdbyte	arg03, objptr
26148     3E E4 85 F1 | 	sub	objptr, #62
2614c     04 16 66 F0 | 	shl	arg03, #4
26150     04 16 06 F1 | 	add	arg03, #4
26154     11 12 06 F6 | 	mov	arg01, #17
26158     48 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
2615c                 | _hg010b_spin2_crlf_ret
2615c     2D 00 64 FD | 	ret
26160                 | 
26160                 | ' 
26160                 | ' 
26160                 | ' '*************************************************************************
26160                 | ' '                                                                        *
26160                 | ' '  Conversions                                                           *
26160                 | ' '                                                                        *
26160                 | ' '*************************************************************************
26160                 | ' 
26160                 | ' ''---------- Convert a integer to dec string, return a pointer
26160                 | ' 
26160                 | ' pub inttostr(i):result |q,pos,k,j
26160                 | _hg010b_spin2_inttostr
26160     03 4A 05 F6 | 	mov	COUNT_, #3
26164     A8 00 A0 FD | 	call	#pushregs_
26168     09 27 0A F6 | 	mov	local01, arg01 wz
2616c                 | ' 
2616c                 | ' j:=i
2616c                 | ' pos:=10
2616c     0A 28 06 F6 | 	mov	local02, #10
26170                 | ' k:=0
26170     00 2A 06 F6 | 	mov	local03, #0
26174                 | ' 
26174                 | ' if (j==0)
26174     18 00 90 5D |  if_ne	jmp	#LR__2940
26178                 | '   n_string[0]:=48
26178     4D E4 05 F1 | 	add	objptr, #77
2617c     F2 60 48 FC | 	wrbyte	#48, objptr
26180                 | '   n_string[1]:=0
26180     01 E4 05 F1 | 	add	objptr, #1
26184     F2 00 48 FC | 	wrbyte	#0, objptr
26188     4E E4 85 F1 | 	sub	objptr, #78
2618c     C4 00 90 FD | 	jmp	#LR__2947
26190                 | LR__2940
26190                 | ' 
26190                 | ' else
26190                 | '   if (j<0)
26190     13 27 52 F6 | 	abs	local01, local01 wc
26194                 | '     j:=0-j
26194                 | '     k:=45
26194     2D 2A 06 C6 |  if_b	mov	local03, #45
26198                 | ' 
26198                 | '   n_string[11]:=0
26198     58 E4 05 F1 | 	add	objptr, #88
2619c     F2 00 48 FC | 	wrbyte	#0, objptr
261a0     58 E4 85 F1 | 	sub	objptr, #88
261a4     97 24 48 FB | 	callpa	#(@LR__2942-@LR__2941)>>2,fcache_load_ptr_
261a8                 | '   repeat while (pos>-1)
261a8                 | LR__2941
261a8     00 28 56 F2 | 	cmps	local02, #0 wc
261ac     40 00 90 CD |  if_b	jmp	#LR__2943
261b0     13 FB 51 F6 | 	abs	result1, local01 wc
261b4     0A FA 15 FD | 	qdiv	result1, #10
261b8                 | '     q:=j//10
261b8     19 FA 61 FD | 	getqy	result1
261bc     FD FA 81 F6 | 	negc	result1, result1
261c0     13 27 52 F6 | 	abs	local01, local01 wc
261c4     0A 26 16 FD | 	qdiv	local01, #10
261c8                 | '     q:=48+q
261c8     30 FA 05 F1 | 	add	result1, #48
261cc                 | '     n_string[pos]:=q
261cc     14 27 02 F6 | 	mov	local01, local02
261d0     4D E4 05 F1 | 	add	objptr, #77
261d4     F2 26 02 F1 | 	add	local01, objptr
261d8     13 FB 41 FC | 	wrbyte	result1, local01
261dc                 | '     j:=j/10
261dc     4D E4 85 F1 | 	sub	objptr, #77
261e0                 | '     pos-=1
261e0     01 28 86 F1 | 	sub	local02, #1
261e4     18 26 62 FD | 	getqx	local01
261e8     13 27 82 F6 | 	negc	local01, local01
261ec     B8 FF 9F FD | 	jmp	#LR__2941
261f0                 | LR__2942
261f0                 | LR__2943
261f0                 | '   repeat while n_string[0]==48
261f0                 | LR__2944
261f0     4D E4 05 F1 | 	add	objptr, #77
261f4     F2 16 C2 FA | 	rdbyte	arg03, objptr
261f8     4D E4 85 F1 | 	sub	objptr, #77
261fc     30 16 0E F2 | 	cmp	arg03, #48 wz
26200     20 00 90 5D |  if_ne	jmp	#LR__2945
26204                 | '     bytemove(@n_string,@n_string+1,12)
26204     4D E4 05 F1 | 	add	objptr, #77
26208     F2 12 02 F6 | 	mov	arg01, objptr
2620c     F2 14 02 F6 | 	mov	arg02, objptr
26210     4D E4 85 F1 | 	sub	objptr, #77
26214     01 14 06 F1 | 	add	arg02, #1
26218     0C 16 06 F6 | 	mov	arg03, #12
2621c     48 11 B0 FD | 	call	#__system____builtin_memmove
26220     CC FF 9F FD | 	jmp	#LR__2944
26224                 | LR__2945
26224                 | ' 
26224                 | '   if k==45
26224     2D 2A 0E F2 | 	cmp	local03, #45 wz
26228     28 00 90 5D |  if_ne	jmp	#LR__2946
2622c                 | '      bytemove(@n_string+1,@n_string,12)
2622c     4D E4 05 F1 | 	add	objptr, #77
26230     F2 12 02 F6 | 	mov	arg01, objptr
26234     01 12 06 F1 | 	add	arg01, #1
26238     F2 14 02 F6 | 	mov	arg02, objptr
2623c     4D E4 85 F1 | 	sub	objptr, #77
26240     0C 16 06 F6 | 	mov	arg03, #12
26244     20 11 B0 FD | 	call	#__system____builtin_memmove
26248                 | '      n_string[0]:=k
26248     4D E4 05 F1 | 	add	objptr, #77
2624c     F2 2A 42 FC | 	wrbyte	local03, objptr
26250     4D E4 85 F1 | 	sub	objptr, #77
26254                 | LR__2946
26254                 | LR__2947
26254                 | ' 
26254                 | ' q:=@n_string
26254     4D E4 05 F1 | 	add	objptr, #77
26258     F2 FA 01 F6 | 	mov	result1, objptr
2625c     4D E4 85 F1 | 	sub	objptr, #77
26260                 | ' return q
26260     A7 F0 03 F6 | 	mov	ptra, fp
26264     B2 00 A0 FD | 	call	#popregs_
26268                 | _hg010b_spin2_inttostr_ret
26268     2D 00 64 FD | 	ret
2626c                 | 
2626c                 | ' 
2626c                 | ' '**********************************************************************************
2626c                 | ' '
2626c                 | ' '        Blitting
2626c                 | ' '
2626c                 | ' '**********************************************************************************
2626c                 | ' 
2626c                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
2626c                 | _hg010b_spin2_blit
2626c     18 4A 05 F6 | 	mov	COUNT_, #24
26270     A8 00 A0 FD | 	call	#pushregs_
26274     09 27 02 F6 | 	mov	local01, arg01
26278     0A 29 02 F6 | 	mov	local02, arg02
2627c     0B 2B 02 F6 | 	mov	local03, arg03
26280     0C 2D 02 F6 | 	mov	local04, arg04
26284     0D 2F 02 F6 | 	mov	local05, arg05
26288     0E 31 02 F6 | 	mov	local06, arg06
2628c     0F 33 02 F6 | 	mov	local07, arg07
26290     10 35 02 F6 | 	mov	local08, arg08
26294     11 37 02 F6 | 	mov	local09, arg09
26298     12 39 02 F6 | 	mov	local10, arg10
2629c                 | ' 
2629c                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
2629c     00 04 00 FF 
262a0     00 26 56 F2 | 	cmps	local01, ##524288 wc
262a4     00 04 00 3F 
262a8     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
262ac     98 01 90 CD |  if_b	jmp	#LR__2954
262b0     16 29 5A F2 | 	cmps	local02, local04 wcz
262b4     14 3B 02 16 |  if_a	mov	local11, local02
262b8     16 29 02 16 |  if_a	mov	local02, local04
262bc     1D 2D 02 16 |  if_a	mov	local04, local11
262c0     17 2B 5A F2 | 	cmps	local03, local05 wcz
262c4     15 3B 02 16 |  if_a	mov	local11, local03
262c8     17 2B 02 16 |  if_a	mov	local03, local05
262cc     18 2B 02 FD | 	qmul	local03, local06
262d0                 | '   if x1a>x2a
262d0                 | '     x1a,x2a:=x2a,x1a
262d0                 | '   if y1a>y2a
262d0                 | '     y1a,y2a:=y2a,y1a  
262d0     1D 2F 02 16 |  if_a	mov	local05, local11
262d4                 | '   if x2a-x1a>1023 
262d4     16 3B 02 F6 | 	mov	local11, local04
262d8     14 3B 82 F1 | 	sub	local11, local02
262dc     02 00 00 FF 
262e0     00 3A 56 F2 | 	cmps	local11, ##1024 wc
262e4                 | '     x2a:=x1a+1023 ' limit the line to 1024
262e4     14 2D 02 36 |  if_ae	mov	local04, local02
262e8     01 00 00 3F 
262ec     FF 2D 06 31 |  if_ae	add	local04, ##1023
262f0                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
262f0     19 3D 02 F6 | 	mov	local12, local07
262f4     14 3D 02 F1 | 	add	local12, local02
262f8     18 3A 62 FD | 	getqx	local11
262fc     1C 37 02 FD | 	qmul	local09, local10
26300     1D 3D 02 F1 | 	add	local12, local11
26304     13 3F 02 F6 | 	mov	local13, local01
26308     1A 3F 02 F1 | 	add	local13, local08
2630c     18 3A 62 FD | 	getqx	local11
26310     1D 3F 02 F1 | 	add	local13, local11
26314     1F 3D 5A F2 | 	cmps	local12, local13 wcz
26318     98 00 90 ED |  if_be	jmp	#LR__2951
2631c                 | '     repeat y from y1a to y2a
2631c     15 41 02 F6 | 	mov	local14, local03
26320     15 2F 52 F2 | 	cmps	local05, local03 wc
26324     01 42 86 F6 | 	negc	local15, #1
26328     17 45 02 F6 | 	mov	local16, local05
2632c     21 45 02 F1 | 	add	local16, local15
26330     0B 00 00 FF 
26334     CC E4 05 F1 | 	add	objptr, ##5836
26338                 | LR__2950
26338     18 41 02 FD | 	qmul	local14, local06
2633c                 | '   '    writeln(string("I am here"))
2633c                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
2633c     13 15 02 F6 | 	mov	arg02, local01
26340     16 17 02 F6 | 	mov	arg03, local04
26344     14 17 82 F1 | 	sub	arg03, local02
26348     01 16 06 F1 | 	add	arg03, #1
2634c     F4 03 00 FF 
26350     00 12 06 F6 | 	mov	arg01, ##518144
26354     18 3E 62 FD | 	getqx	local13
26358     1F 15 02 F1 | 	add	arg02, local13
2635c     14 15 02 F1 | 	add	arg02, local02
26360     B0 04 B0 FD | 	call	#_psram_spin2_read1
26364     1B 3F 02 F6 | 	mov	local13, local09
26368     15 3F 82 F1 | 	sub	local13, local03
2636c     20 3F 02 F1 | 	add	local13, local14
26370     1C 3F 02 FD | 	qmul	local13, local10
26374                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
26374     19 15 02 F6 | 	mov	arg02, local07
26378     16 17 02 F6 | 	mov	arg03, local04
2637c     14 17 82 F1 | 	sub	arg03, local02
26380     01 16 06 F1 | 	add	arg03, #1
26384     F4 03 00 FF 
26388     00 12 06 F6 | 	mov	arg01, ##518144
2638c     18 3E 62 FD | 	getqx	local13
26390     1F 15 02 F1 | 	add	arg02, local13
26394     1A 15 02 F1 | 	add	arg02, local08
26398     14 05 B0 FD | 	call	#_psram_spin2_write
2639c     21 41 02 F1 | 	add	local14, local15
263a0     22 41 0A F2 | 	cmp	local14, local16 wz
263a4     90 FF 9F 5D |  if_ne	jmp	#LR__2950
263a8     0B 00 00 FF 
263ac     CC E4 85 F1 | 	sub	objptr, ##5836
263b0     94 00 90 FD | 	jmp	#LR__2953
263b4                 | LR__2951
263b4                 | '   else
263b4                 | '     repeat y from y2a to y1a
263b4     17 41 02 F6 | 	mov	local14, local05
263b8     17 2B 52 F2 | 	cmps	local03, local05 wc
263bc     01 46 86 F6 | 	negc	local17, #1
263c0     15 49 02 F6 | 	mov	local18, local03
263c4     23 49 02 F1 | 	add	local18, local17
263c8     0B 00 00 FF 
263cc     CC E4 05 F1 | 	add	objptr, ##5836
263d0                 | LR__2952
263d0     18 41 02 FD | 	qmul	local14, local06
263d4                 | '  '     writeln(string("I am there"))
263d4                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
263d4     13 15 02 F6 | 	mov	arg02, local01
263d8     16 17 02 F6 | 	mov	arg03, local04
263dc     14 17 82 F1 | 	sub	arg03, local02
263e0     01 16 06 F1 | 	add	arg03, #1
263e4     F4 03 00 FF 
263e8     00 12 06 F6 | 	mov	arg01, ##518144
263ec     18 44 62 FD | 	getqx	local16
263f0     22 15 02 F1 | 	add	arg02, local16
263f4     14 15 02 F1 | 	add	arg02, local02
263f8     18 04 B0 FD | 	call	#_psram_spin2_read1
263fc     1B 45 02 F6 | 	mov	local16, local09
26400     15 45 82 F1 | 	sub	local16, local03
26404     20 45 02 F1 | 	add	local16, local14
26408     1C 45 02 FD | 	qmul	local16, local10
2640c                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
2640c     19 15 02 F6 | 	mov	arg02, local07
26410     16 17 02 F6 | 	mov	arg03, local04
26414     14 17 82 F1 | 	sub	arg03, local02
26418     01 16 06 F1 | 	add	arg03, #1
2641c     F4 03 00 FF 
26420     00 12 06 F6 | 	mov	arg01, ##518144
26424     18 44 62 FD | 	getqx	local16
26428     22 15 02 F1 | 	add	arg02, local16
2642c     1A 15 02 F1 | 	add	arg02, local08
26430     7C 04 B0 FD | 	call	#_psram_spin2_write
26434     23 41 02 F1 | 	add	local14, local17
26438     24 41 0A F2 | 	cmp	local14, local18 wz
2643c     90 FF 9F 5D |  if_ne	jmp	#LR__2952
26440     0B 00 00 FF 
26444     CC E4 85 F1 | 	sub	objptr, ##5836
26448                 | LR__2953
26448                 | LR__2954
26448                 | '     
26448                 | ' if ((f>=$80000) && (t<$80000)) 
26448     00 04 00 FF 
2644c     00 26 56 F2 | 	cmps	local01, ##524288 wc
26450     80 00 90 CD |  if_b	jmp	#LR__2956
26454     00 04 00 FF 
26458     00 32 56 F2 | 	cmps	local07, ##524288 wc
2645c     74 00 90 3D |  if_ae	jmp	#LR__2956
26460                 | '   repeat y from y1a to y2a
26460     15 41 02 F6 | 	mov	local14, local03
26464     15 2F 52 F2 | 	cmps	local05, local03 wc
26468     01 4A 86 F6 | 	negc	local19, #1
2646c     17 4D 02 F6 | 	mov	local20, local05
26470     25 4D 02 F1 | 	add	local20, local19
26474     0B 00 00 FF 
26478     CC E4 05 F1 | 	add	objptr, ##5836
2647c                 | LR__2955
2647c     1B 49 02 F6 | 	mov	local18, local09
26480     15 49 82 F1 | 	sub	local18, local03
26484     20 49 02 F1 | 	add	local18, local14
26488     1C 49 02 FD | 	qmul	local18, local10
2648c                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
2648c     19 13 02 F6 | 	mov	arg01, local07
26490     18 48 62 FD | 	getqx	local18
26494     18 41 02 FD | 	qmul	local14, local06
26498     24 13 02 F1 | 	add	arg01, local18
2649c     1A 13 02 F1 | 	add	arg01, local08
264a0     13 15 02 F6 | 	mov	arg02, local01
264a4     16 17 02 F6 | 	mov	arg03, local04
264a8     14 17 82 F1 | 	sub	arg03, local02
264ac     01 16 06 F1 | 	add	arg03, #1
264b0     18 48 62 FD | 	getqx	local18
264b4     24 15 02 F1 | 	add	arg02, local18
264b8     14 15 02 F1 | 	add	arg02, local02
264bc     54 03 B0 FD | 	call	#_psram_spin2_read1
264c0     25 41 02 F1 | 	add	local14, local19
264c4     26 41 0A F2 | 	cmp	local14, local20 wz
264c8     B0 FF 9F 5D |  if_ne	jmp	#LR__2955
264cc     0B 00 00 FF 
264d0     CC E4 85 F1 | 	sub	objptr, ##5836
264d4                 | LR__2956
264d4                 | '     
264d4                 | ' if ((f<$80000) && (t>=$80000)) 
264d4     00 04 00 FF 
264d8     00 26 56 F2 | 	cmps	local01, ##524288 wc
264dc     84 00 90 3D |  if_ae	jmp	#LR__2958
264e0     00 04 00 FF 
264e4     00 32 56 F2 | 	cmps	local07, ##524288 wc
264e8     78 00 90 CD |  if_b	jmp	#LR__2958
264ec                 | '   t:=t & $FFFFFFF
264ec     7C 32 06 F4 | 	bitl	local07, #124
264f0                 | '   repeat y from y1a to y2a
264f0     15 41 02 F6 | 	mov	local14, local03
264f4     15 2F 52 F2 | 	cmps	local05, local03 wc
264f8     01 4E 86 F6 | 	negc	local21, #1
264fc     17 51 02 F6 | 	mov	local22, local05
26500     27 51 02 F1 | 	add	local22, local21
26504     0B 00 00 FF 
26508     CC E4 05 F1 | 	add	objptr, ##5836
2650c                 | LR__2957
2650c     18 41 02 FD | 	qmul	local14, local06
26510                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
26510     13 13 02 F6 | 	mov	arg01, local01
26514     1B 4D 02 F6 | 	mov	local20, local09
26518     15 4D 82 F1 | 	sub	local20, local03
2651c     20 4D 02 F1 | 	add	local20, local14
26520     18 4A 62 FD | 	getqx	local19
26524     1C 4D 02 FD | 	qmul	local20, local10
26528     25 13 02 F1 | 	add	arg01, local19
2652c     14 13 02 F1 | 	add	arg01, local02
26530     19 15 02 F6 | 	mov	arg02, local07
26534     16 17 02 F6 | 	mov	arg03, local04
26538     14 17 82 F1 | 	sub	arg03, local02
2653c     01 16 06 F1 | 	add	arg03, #1
26540     18 4C 62 FD | 	getqx	local20
26544     26 15 02 F1 | 	add	arg02, local20
26548     1A 15 02 F1 | 	add	arg02, local08
2654c     60 03 B0 FD | 	call	#_psram_spin2_write
26550     27 41 02 F1 | 	add	local14, local21
26554     28 41 0A F2 | 	cmp	local14, local22 wz
26558     B0 FF 9F 5D |  if_ne	jmp	#LR__2957
2655c     0B 00 00 FF 
26560     CC E4 85 F1 | 	sub	objptr, ##5836
26564                 | LR__2958
26564                 | '     
26564                 | ' if ((f<$80000) && (t<$80000)) 
26564     00 04 00 FF 
26568     00 26 56 F2 | 	cmps	local01, ##524288 wc
2656c     00 04 00 CF 
26570     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
26574     64 00 90 3D |  if_ae	jmp	#LR__2960
26578                 | '   repeat y from y1a to y2a
26578     15 41 02 F6 | 	mov	local14, local03
2657c     15 2F 52 F2 | 	cmps	local05, local03 wc
26580     01 52 86 F6 | 	negc	local23, #1
26584     17 55 02 F6 | 	mov	local24, local05
26588     29 55 02 F1 | 	add	local24, local23
2658c                 | LR__2959
2658c     18 41 02 FD | 	qmul	local14, local06
26590                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
26590     13 13 02 F6 | 	mov	arg01, local01
26594     1B 51 02 F6 | 	mov	local22, local09
26598     15 51 82 F1 | 	sub	local22, local03
2659c     20 51 02 F1 | 	add	local22, local14
265a0     18 4E 62 FD | 	getqx	local21
265a4     1C 51 02 FD | 	qmul	local22, local10
265a8     27 13 02 F1 | 	add	arg01, local21
265ac     14 13 02 F1 | 	add	arg01, local02
265b0     19 15 02 F6 | 	mov	arg02, local07
265b4     16 17 02 F6 | 	mov	arg03, local04
265b8     14 17 82 F1 | 	sub	arg03, local02
265bc     01 16 06 F1 | 	add	arg03, #1
265c0     18 50 62 FD | 	getqx	local22
265c4     28 15 02 F1 | 	add	arg02, local22
265c8     1A 15 02 F1 | 	add	arg02, local08
265cc     98 0D B0 FD | 	call	#__system____builtin_memmove
265d0     29 41 02 F1 | 	add	local14, local23
265d4     2A 41 0A F2 | 	cmp	local14, local24 wz
265d8     B0 FF 9F 5D |  if_ne	jmp	#LR__2959
265dc                 | LR__2960
265dc     A7 F0 03 F6 | 	mov	ptra, fp
265e0     B2 00 A0 FD | 	call	#popregs_
265e4                 | _hg010b_spin2_blit_ret
265e4     2D 00 64 FD | 	ret
265e8                 | 
265e8                 | ' 
265e8                 | ' '..............................................................................
265e8                 | ' 
265e8                 | ' {{
265e8                 | ' }}
265e8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
265e8                 | _psram_spin2_startx
265e8     04 4A 05 F6 | 	mov	COUNT_, #4
265ec     A8 00 A0 FD | 	call	#pushregs_
265f0     09 27 02 F6 | 	mov	local01, arg01
265f4     0B 29 02 F6 | 	mov	local02, arg03
265f8     0C 2B 02 F6 | 	mov	local03, arg04
265fc                 | '     stop() ' restart driver if required
265fc     54 01 B0 FD | 	call	#_psram_spin2_stop
26600     00 26 0E F2 | 	cmp	local01, #0 wz
26604     14 26 06 AB |  if_e	rdlong	local01, #20
26608     13 15 52 F6 | 	abs	arg02, local01 wc
2660c     A1 07 00 FF 
26610     40 14 16 FD | 	qdiv	arg02, ##1000000
26614                 | ' 
26614                 | '     ' use current frequency if none specified
26614                 | ' 
26614                 | '     if freq == 0 
26614                 | '         freq := clkfreq 
26614                 | ' 
26614                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
26614                 | ' 
26614                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
26614                 | '     if burst < 0
26614                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
26614     18 14 62 FD | 	getqx	arg02
26618     0A 19 82 F6 | 	negc	arg04, arg02
2661c     03 18 66 F0 | 	shl	arg04, #3
26620     84 18 86 F1 | 	sub	arg04, #132
26624     04 18 46 F0 | 	shr	arg04, #4
26628     04 18 66 F0 | 	shl	arg04, #4
2662c     00 18 56 F2 | 	cmps	arg04, #0 wc
26630     0E FA 65 C6 |  if_b	neg	result1, #14
26634     10 01 90 CD |  if_b	jmp	#LR__2973
26638                 | ' 
26638                 | '     ' compute the input delay
26638                 | ' 
26638                 | '     if delay <= 0
26638     01 28 56 F2 | 	cmps	local02, #1 wc
2663c     10 00 90 3D |  if_ae	jmp	#LR__2970
26640                 | '         delay := lookupDelay(freq)
26640     13 13 02 F6 | 	mov	arg01, local01
26644     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
26648     FD 28 02 F6 | 	mov	local02, result1
2664c     04 00 90 FD | 	jmp	#LR__2971
26650                 | LR__2970
26650                 | '     else
26650                 | '         delay <#= $f ' limit to 15
26650     0F 28 66 F3 | 	fles	local02, #15
26654                 | LR__2971
26654                 | ' 
26654                 | '     ' create our lock
26654                 | ' 
26654                 | '     driverlock := LOCKNEW()  
26654     00 FA 05 F6 | 	mov	result1, #0
26658     04 FA 61 FD | 	locknew	result1
2665c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
26660     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
26664                 | '     if driverlock == -1
26664     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26668     FF FF 7F FF 
2666c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
26670                 | '         return ERR_NO_LOCK
26670     1A FA 65 A6 |  if_e	neg	result1, #26
26674     D0 00 90 AD |  if_e	jmp	#LR__2973
26678                 | ' 
26678                 | '     ' patch in the proper data and HUB addresses to the startup structure
26678                 | ' 
26678                 | '     long[@startupData][0]:=clkfreq
26678     14 26 06 FB | 	rdlong	local01, #20
2667c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
26680     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
26684                 | ' '    long[@startupData][1]:=$1000_0000
26684                 | '     long[@startupData][5]:=@deviceData
26684     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
26688     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
2668c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
26690     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
26694     14 14 06 F1 | 	add	arg02, #20
26698     0A 27 62 FC | 	wrlong	local01, arg02
2669c                 | '     long[@startupData][6]:=@qosData
2669c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
266a0     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
266a4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
266a8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
266ac     18 14 06 F1 | 	add	arg02, #24
266b0     0A 27 62 FC | 	wrlong	local01, arg02
266b4                 | '     long[@startupData][7]:=$7FF00
266b4     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
266b8     1C 26 06 F1 | 	add	local01, #28
266bc     FF 03 80 FF 
266c0     13 01 6A FC | 	wrlong	##524032, local01
266c4                 | ' 
266c4                 | '     ' setup some default bank and QoS parameter values
266c4                 | ' 
266c4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
266c4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
266c8     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
266cc     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
266d0     10 18 66 F0 | 	shl	arg04, #16
266d4     0C 28 66 F0 | 	shl	local02, #12
266d8     14 19 42 F5 | 	or	arg04, local02
266dc     18 18 46 F5 | 	or	arg04, #24
266e0     0C 15 02 F6 | 	mov	arg02, arg04
266e4     02 16 06 F6 | 	mov	arg03, #2
266e8     A0 00 A0 FD | 	call	#\builtin_longfill_
266ec                 | '     longfill(@qosData, $FFFF0000, 8)
266ec     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
266f0     07 16 06 F6 | 	mov	arg03, #7
266f4     28 16 62 FD | 	setq	arg03
266f8     80 FF FF FF 
266fc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
26700                 | ' 
26700                 | '     ' get the address of the PSRAM memory driver so we can start it
26700                 | ' 
26700                 | '     driverAddr:= driver.getDriverAddr()
26700                 | '     return @driver_start
26700     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
26704     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
26708     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
2670c                 | ' 
2670c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
2670c                 | ' 
2670c                 | '     if desiredcog < 0
2670c     00 2A 56 F2 | 	cmps	local03, #0 wc
26710                 | '         desiredcog := NEWCOG
26710     10 2A 06 C6 |  if_b	mov	local03, #16
26714                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
26714     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
26718     15 2D 02 F6 | 	mov	local04, local03
2671c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
26720     0A 2D F2 FC | 	coginit	local04, arg02 wc
26724     01 2C 66 C6 |  if_b	neg	local04, #1
26728     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
2672c     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
26730                 | '     repeat until long[@startupData] == 0 
26730     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
26734                 | LR__2972
26734     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
26738     F8 FF 9F 5D |  if_ne	jmp	#LR__2972
2673c                 | ' 
2673c                 | '     return drivercog
2673c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
26740     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
26744     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26748                 | LR__2973
26748     A7 F0 03 F6 | 	mov	ptra, fp
2674c     B2 00 A0 FD | 	call	#popregs_
26750                 | _psram_spin2_startx_ret
26750     2D 00 64 FD | 	ret
26754                 | 
26754                 | ' 
26754                 | ' '..............................................................................
26754                 | ' 
26754                 | ' {{
26754                 | ' }}
26754                 | ' PUB stop() : i
26754                 | _psram_spin2_stop
26754     00 00 06 F6 | 	mov	_var01, #0
26758                 | '     if drivercog <> -1
26758     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2675c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26760     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26764     FF FF 7F FF 
26768     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
2676c     70 00 90 AD |  if_e	jmp	#LR__2983
26770                 | '         cogstop(drivercog) ' a rather brutal stop
26770     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26774     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26778     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2677c     03 12 62 FD | 	cogstop	arg01
26780     97 26 48 FB | 	callpa	#(@LR__2982-@LR__2980)>>2,fcache_load_ptr_
26784                 | '         repeat i from 0 to 7
26784                 | LR__2980
26784                 | '             if long[$7FF00][i*3] < 0
26784     00 FB 01 F6 | 	mov	result1, _var01
26788     01 FA 65 F0 | 	shl	result1, #1
2678c     00 FB 01 F1 | 	add	result1, _var01
26790     02 FA 65 F0 | 	shl	result1, #2
26794     FF 03 00 FF 
26798     00 FB 05 F1 | 	add	result1, ##524032
2679c     FD FA 01 FB | 	rdlong	result1, result1
267a0     00 FA 55 F2 | 	cmps	result1, #0 wc
267a4     1C 00 90 3D |  if_ae	jmp	#LR__2981
267a8                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
267a8     00 FB 01 F6 | 	mov	result1, _var01
267ac     01 FA 65 F0 | 	shl	result1, #1
267b0     00 FB 01 F1 | 	add	result1, _var01
267b4     02 FA 65 F0 | 	shl	result1, #2
267b8     FF 03 00 FF 
267bc     00 FB 05 F1 | 	add	result1, ##524032
267c0     FD 20 68 FC | 	wrlong	#16, result1
267c4                 | LR__2981
267c4     01 00 06 F1 | 	add	_var01, #1
267c8     08 00 56 F2 | 	cmps	_var01, #8 wc
267cc     B4 FF 9F CD |  if_b	jmp	#LR__2980
267d0                 | LR__2982
267d0                 | '         drivercog := -1
267d0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
267d4     FF FF FF FF 
267d8     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
267dc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
267e0                 | LR__2983
267e0                 | '     if driverlock <> -1
267e0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
267e4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
267e8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
267ec     FF FF 7F FF 
267f0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
267f4                 | '         LOCKRET(driverlock)
267f4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
267f8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
267fc     05 12 62 5D |  if_ne	lockret	arg01
26800                 | '         driverlock := -1
26800     FF FF FF 5F 
26804     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
26808     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
2680c     00 FB 01 F6 | 	mov	result1, _var01
26810                 | _psram_spin2_stop_ret
26810     2D 00 64 FD | 	ret
26814                 | 
26814                 | ' 
26814                 | ' '..............................................................................
26814                 | ' 
26814                 | ' {{
26814                 | ' }}
26814                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
26814                 | _psram_spin2_read1
26814                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
26814                 | '     if drivercog == -1 ' driver must be running
26814     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26818     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2681c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26820     FF FF 7F FF 
26824     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
26828                 | '         return ERR_INACTIVE
26828     0F FA 65 A6 |  if_e	neg	result1, #15
2682c     7C 00 90 AD |  if_e	jmp	#LR__2991
26830                 | '     if count == 0 ' don't even bother reading
26830     00 16 0E F2 | 	cmp	arg03, #0 wz
26834                 | '         return 0
26834     00 FA 05 A6 |  if_e	mov	result1, #0
26838     70 00 90 AD |  if_e	jmp	#LR__2991
2683c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
2683c     00 FA 05 F6 | 	mov	result1, #0
26840     01 FA 61 FD | 	cogid	result1
26844     FD 00 02 F6 | 	mov	_var01, result1
26848     01 00 66 F0 | 	shl	_var01, #1
2684c     FD 00 02 F1 | 	add	_var01, result1
26850     02 00 66 F0 | 	shl	_var01, #2
26854     FF 03 00 FF 
26858     00 03 06 F6 | 	mov	_var02, ##524032
2685c     00 03 02 F1 | 	add	_var02, _var01
26860                 | '     if long[mailbox] < 0
26860     01 01 02 FB | 	rdlong	_var01, _var02
26864     00 00 56 F2 | 	cmps	_var01, #0 wc
26868                 | '         return ERR_MAILBOX_BUSY
26868     1C FA 65 C6 |  if_b	neg	result1, #28
2686c     3C 00 90 CD |  if_b	jmp	#LR__2991
26870                 | '     long[mailbox][2] := count
26870     08 02 06 F1 | 	add	_var02, #8
26874     01 17 62 FC | 	wrlong	arg03, _var02
26878                 | '     long[mailbox][1] := dstHubAddr
26878     04 02 86 F1 | 	sub	_var02, #4
2687c     01 13 62 FC | 	wrlong	arg01, _var02
26880     04 02 86 F1 | 	sub	_var02, #4
26884                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
26884     0A 05 02 F6 | 	mov	_var03, arg02
26888     D9 04 06 F4 | 	bitl	_var03, #217
2688c     00 00 58 FF 
26890     00 00 06 F6 | 	mov	_var01, ##-1342177280
26894     02 01 02 F1 | 	add	_var01, _var03
26898     01 01 62 FC | 	wrlong	_var01, _var02
2689c                 | '     repeat
2689c                 | LR__2990
2689c                 | '         result := long[mailbox]    
2689c     01 05 02 FB | 	rdlong	_var03, _var02
268a0     00 04 56 F2 | 	cmps	_var03, #0 wc
268a4     F4 FF 9F CD |  if_b	jmp	#LR__2990
268a8                 | '     while result < 0   
268a8                 | '     return -result                       'return success or error
268a8     02 FB 61 F6 | 	neg	result1, _var03
268ac                 | LR__2991
268ac                 | _psram_spin2_read1_ret
268ac     2D 00 64 FD | 	ret
268b0                 | 
268b0                 | ' 
268b0                 | ' '..............................................................................
268b0                 | ' 
268b0                 | ' {{
268b0                 | ' }}
268b0                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
268b0                 | _psram_spin2_write
268b0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
268b0                 | '     if drivercog == -1 ' driver must be running
268b0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
268b4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
268b8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
268bc     FF FF 7F FF 
268c0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
268c4                 | '         return ERR_INACTIVE
268c4     0F FA 65 A6 |  if_e	neg	result1, #15
268c8     7C 00 90 AD |  if_e	jmp	#LR__3001
268cc                 | '     if count == 0 ' don't even bother writing
268cc     00 16 0E F2 | 	cmp	arg03, #0 wz
268d0                 | '         return 0
268d0     00 FA 05 A6 |  if_e	mov	result1, #0
268d4     70 00 90 AD |  if_e	jmp	#LR__3001
268d8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
268d8     00 FA 05 F6 | 	mov	result1, #0
268dc     01 FA 61 FD | 	cogid	result1
268e0     FD 00 02 F6 | 	mov	_var01, result1
268e4     01 00 66 F0 | 	shl	_var01, #1
268e8     FD 00 02 F1 | 	add	_var01, result1
268ec     02 00 66 F0 | 	shl	_var01, #2
268f0     FF 03 00 FF 
268f4     00 03 06 F6 | 	mov	_var02, ##524032
268f8     00 03 02 F1 | 	add	_var02, _var01
268fc                 | '     if long[mailbox] < 0
268fc     01 01 02 FB | 	rdlong	_var01, _var02
26900     00 00 56 F2 | 	cmps	_var01, #0 wc
26904                 | '         return ERR_MAILBOX_BUSY
26904     1C FA 65 C6 |  if_b	neg	result1, #28
26908     3C 00 90 CD |  if_b	jmp	#LR__3001
2690c                 | '     long[mailbox][2] := count
2690c     08 02 06 F1 | 	add	_var02, #8
26910     01 17 62 FC | 	wrlong	arg03, _var02
26914                 | '     long[mailbox][1] := srcHubAddr
26914     04 02 86 F1 | 	sub	_var02, #4
26918     01 13 62 FC | 	wrlong	arg01, _var02
2691c     04 02 86 F1 | 	sub	_var02, #4
26920                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
26920     0A 05 02 F6 | 	mov	_var03, arg02
26924     D9 04 06 F4 | 	bitl	_var03, #217
26928     00 00 78 FF 
2692c     00 00 06 F6 | 	mov	_var01, ##-268435456
26930     02 01 02 F1 | 	add	_var01, _var03
26934     01 01 62 FC | 	wrlong	_var01, _var02
26938                 | '     repeat
26938                 | LR__3000
26938                 | '         result := long[mailbox]    
26938     01 05 02 FB | 	rdlong	_var03, _var02
2693c     00 04 56 F2 | 	cmps	_var03, #0 wc
26940     F4 FF 9F CD |  if_b	jmp	#LR__3000
26944                 | '     while result < 0   
26944                 | '     return -result                       'return success or error
26944     02 FB 61 F6 | 	neg	result1, _var03
26948                 | LR__3001
26948                 | _psram_spin2_write_ret
26948     2D 00 64 FD | 	ret
2694c                 | 
2694c                 | ' 
2694c                 | ' ' generalized fill
2694c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
2694c                 | _psram_spin2_fill
2694c     09 01 02 F6 | 	mov	_var01, arg01
26950     0A 03 02 F6 | 	mov	_var02, arg02
26954     0B 05 02 F6 | 	mov	_var03, arg03
26958     0D 07 02 F6 | 	mov	_var04, arg05
2695c                 | '     case datasize 
2695c     01 06 86 F1 | 	sub	_var04, #1
26960     04 06 26 F3 | 	fle	_var04, #4
26964     30 06 62 FD | 	jmprel	_var04
26968                 | LR__3010
26968     10 00 90 FD | 	jmp	#LR__3011
2696c     18 00 90 FD | 	jmp	#LR__3012
26970     2C 00 90 FD | 	jmp	#LR__3014
26974     1C 00 90 FD | 	jmp	#LR__3013
26978     24 00 90 FD | 	jmp	#LR__3014
2697c                 | LR__3011
2697c                 | '         1: req := driver.R_WRITEBYTE
2697c     00 00 60 FF 
26980     00 08 06 F6 | 	mov	_var05, ##-1073741824
26984     20 00 90 FD | 	jmp	#LR__3015
26988                 | LR__3012
26988                 | '         2: req := driver.R_WRITEWORD
26988     00 00 68 FF 
2698c     00 08 06 F6 | 	mov	_var05, ##-805306368
26990     14 00 90 FD | 	jmp	#LR__3015
26994                 | LR__3013
26994                 | '         4: req := driver.R_WRITELONG
26994     00 00 70 FF 
26998     00 08 06 F6 | 	mov	_var05, ##-536870912
2699c     08 00 90 FD | 	jmp	#LR__3015
269a0                 | LR__3014
269a0                 | '         other : return ERR_INVALID
269a0     06 FA 65 F6 | 	neg	result1, #6
269a4     94 00 90 FD | 	jmp	#LR__3017
269a8                 | LR__3015
269a8                 | '     if count == 0   ' nothing to do
269a8     00 04 0E F2 | 	cmp	_var03, #0 wz
269ac                 | '         return 0
269ac     00 FA 05 A6 |  if_e	mov	result1, #0
269b0     88 00 90 AD |  if_e	jmp	#LR__3017
269b4                 | '     if drivercog == -1
269b4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
269b8     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
269bc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
269c0     FF FF 7F FF 
269c4     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
269c8                 | '         return ERR_INACTIVE
269c8     0F FA 65 A6 |  if_e	neg	result1, #15
269cc     6C 00 90 AD |  if_e	jmp	#LR__3017
269d0                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
269d0     00 FA 05 F6 | 	mov	result1, #0
269d4     01 FA 61 FD | 	cogid	result1
269d8     FD 06 02 F6 | 	mov	_var04, result1
269dc     01 06 66 F0 | 	shl	_var04, #1
269e0     FD 06 02 F1 | 	add	_var04, result1
269e4     02 06 66 F0 | 	shl	_var04, #2
269e8     FF 03 00 FF 
269ec     00 0B 06 F6 | 	mov	_var06, ##524032
269f0     03 0B 02 F1 | 	add	_var06, _var04
269f4                 | '     if long[mailbox] < 0
269f4     05 07 02 FB | 	rdlong	_var04, _var06
269f8     00 06 56 F2 | 	cmps	_var04, #0 wc
269fc                 | '         return ERR_MAILBOX_BUSY
269fc     1C FA 65 C6 |  if_b	neg	result1, #28
26a00     38 00 90 CD |  if_b	jmp	#LR__3017
26a04                 | '     long[mailbox][2] := count
26a04     08 0A 06 F1 | 	add	_var06, #8
26a08     05 05 62 FC | 	wrlong	_var03, _var06
26a0c                 | '     long[mailbox][1] := pattern
26a0c     04 0A 86 F1 | 	sub	_var06, #4
26a10     05 03 62 FC | 	wrlong	_var02, _var06
26a14     04 0A 86 F1 | 	sub	_var06, #4
26a18                 | '     long[mailbox] := req + (addr & $1ffffff)
26a18     04 0D 02 F6 | 	mov	_var07, _var05
26a1c     00 0F 02 F6 | 	mov	_var08, _var01
26a20     D9 0E 06 F4 | 	bitl	_var08, #217
26a24     07 0D 02 F1 | 	add	_var07, _var08
26a28     05 0D 62 FC | 	wrlong	_var07, _var06
26a2c                 | '     repeat
26a2c                 | LR__3016
26a2c                 | '         r := long[mailbox]
26a2c     05 0F 02 FB | 	rdlong	_var08, _var06
26a30     00 0E 56 F2 | 	cmps	_var08, #0 wc
26a34     F4 FF 9F CD |  if_b	jmp	#LR__3016
26a38                 | '     while r < 0
26a38                 | '     return -r                  ' return 0 for success or negated error code
26a38     07 FB 61 F6 | 	neg	result1, _var08
26a3c                 | LR__3017
26a3c                 | _psram_spin2_fill_ret
26a3c     2D 00 64 FD | 	ret
26a40                 | 
26a40                 | ' 
26a40                 | ' '..............................................................................
26a40                 | ' 
26a40                 | ' {{
26a40                 | ' }}
26a40                 | ' PUB setQos(cog, qos) : result | mailbox
26a40                 | _psram_spin2_setQos
26a40     09 01 02 F6 | 	mov	_var01, arg01
26a44                 | '     if drivercog == -1 ' driver must be running
26a44     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26a48     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
26a4c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26a50     FF FF 7F FF 
26a54     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
26a58                 | '         return ERR_INACTIVE
26a58     0F FA 65 A6 |  if_e	neg	result1, #15
26a5c     9C 00 90 AD |  if_e	jmp	#LR__3024
26a60                 | '     if cog < 0 or cog > 7 ' enforce cog id range
26a60     00 00 56 F2 | 	cmps	_var01, #0 wc
26a64     08 00 90 CD |  if_b	jmp	#LR__3020
26a68     08 00 56 F2 | 	cmps	_var01, #8 wc
26a6c     08 00 90 CD |  if_b	jmp	#LR__3021
26a70                 | LR__3020
26a70                 | '         return ERR_INVALID
26a70     06 FA 65 F6 | 	neg	result1, #6
26a74     84 00 90 FD | 	jmp	#LR__3024
26a78                 | LR__3021
26a78                 | '     long[@qosData][cog] := qos & !$1ff
26a78     FF 15 26 F5 | 	andn	arg02, #511
26a7c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
26a80     02 00 66 F0 | 	shl	_var01, #2
26a84     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
26a88     00 15 62 FC | 	wrlong	arg02, _var01
26a8c                 | '     mailbox := $7FF00 + drivercog*12
26a8c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
26a90     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
26a94     02 07 02 F6 | 	mov	_var04, _var03
26a98     01 06 66 F0 | 	shl	_var04, #1
26a9c     02 07 02 F1 | 	add	_var04, _var03
26aa0     02 06 66 F0 | 	shl	_var04, #2
26aa4     FF 03 00 FF 
26aa8     00 09 06 F6 | 	mov	_var05, ##524032
26aac     03 09 02 F1 | 	add	_var05, _var04
26ab0                 | '     repeat until LOCKTRY(driverlock)
26ab0     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
26ab4                 | LR__3022
26ab4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26ab8     06 12 72 FD | 	locktry	arg01 wc
26abc     F4 FF 9F 3D |  if_ae	jmp	#LR__3022
26ac0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26ac4                 | '     long[mailbox] := driver.R_CONFIG + cogid()
26ac4     00 06 06 F6 | 	mov	_var04, #0
26ac8     01 06 62 FD | 	cogid	_var04
26acc     00 00 78 FF 
26ad0     00 02 06 F6 | 	mov	_var02, ##-268435456
26ad4     03 03 02 F1 | 	add	_var02, _var04
26ad8     04 03 62 FC | 	wrlong	_var02, _var05
26adc                 | '     repeat while long[mailbox] < 0
26adc                 | LR__3023
26adc     04 03 02 FB | 	rdlong	_var02, _var05
26ae0     00 02 56 F2 | 	cmps	_var02, #0 wc
26ae4     F4 FF 9F CD |  if_b	jmp	#LR__3023
26ae8                 | '     LOCKREL(driverlock)
26ae8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
26aec     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26af0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26af4     07 12 72 FD | 	lockrel	arg01 wc
26af8     00 FA 05 F6 | 	mov	result1, #0
26afc                 | LR__3024
26afc                 | _psram_spin2_setQos_ret
26afc     2D 00 64 FD | 	ret
26b00                 | 
26b00                 | ' 
26b00                 | ' '..............................................................................
26b00                 | ' 
26b00                 | ' {{
26b00                 | ' }}
26b00                 | ' PRI lookupDelay(freq) : delay | profile
26b00                 | _psram_spin2_lookupDelay
26b00                 | '     profile := @delayTable
26b00     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
26b04     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
26b08                 | '     delay := long[profile][0]
26b08     00 03 02 FB | 	rdlong	_var02, _var01
26b0c                 | '     repeat while long[profile][1] 
26b0c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
26b10     97 16 48 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
26b14                 | LR__3030
26b14     04 00 06 F1 | 	add	_var01, #4
26b18     00 FB 09 FB | 	rdlong	result1, _var01 wz
26b1c     04 00 86 F1 | 	sub	_var01, #4
26b20     1C 00 90 AD |  if_e	jmp	#LR__3032
26b24                 | '         if freq +< long[profile][1] 
26b24     04 00 06 F1 | 	add	_var01, #4
26b28     00 FB 01 FB | 	rdlong	result1, _var01
26b2c     04 00 86 F1 | 	sub	_var01, #4
26b30     FD 12 12 F2 | 	cmp	arg01, result1 wc
26b34                 | '             quit
26b34                 | '         profile += 4
26b34     04 00 06 31 |  if_ae	add	_var01, #4
26b38                 | '         delay++
26b38     01 02 06 31 |  if_ae	add	_var02, #1
26b3c     D4 FF 9F 3D |  if_ae	jmp	#LR__3030
26b40                 | LR__3031
26b40                 | LR__3032
26b40     01 FB 01 F6 | 	mov	result1, _var02
26b44                 | _psram_spin2_lookupDelay_ret
26b44     2D 00 64 FD | 	ret
26b48                 | 
26b48                 | ' 
26b48                 | ' PUB start() : r
26b48                 | _usbnew_spin2_start
26b48     00 00 06 F6 | 	mov	_var01, #0
26b4c                 | '   ifnot driver_cog
26b4c     15 00 00 FF 
26b50     87 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
26b54     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
26b58     15 00 00 FF 
26b5c     87 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
26b60     38 00 90 5D |  if_ne	jmp	#LR__3040
26b64                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
26b64     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
26b68     10 00 06 F6 | 	mov	_var01, #16
26b6c     00 16 06 F6 | 	mov	arg03, #0
26b70     28 16 62 FD | 	setq	arg03
26b74     0A 01 F2 FC | 	coginit	_var01, arg02 wc
26b78     01 00 66 C6 |  if_b	neg	_var01, #1
26b7c                 | '     if r >= 0
26b7c     00 00 56 F2 | 	cmps	_var01, #0 wc
26b80                 | '       driver_cog := r+1
26b80     00 03 02 36 |  if_ae	mov	_var02, _var01
26b84     01 02 06 31 |  if_ae	add	_var02, #1
26b88     15 00 00 3F 
26b8c     87 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
26b90     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
26b94     15 00 00 3F 
26b98     87 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
26b9c                 | LR__3040
26b9c     00 FB 01 F6 | 	mov	result1, _var01
26ba0                 | _usbnew_spin2_start_ret
26ba0     2D 00 64 FD | 	ret
26ba4                 | 
26ba4                 | '     '' (Always enabled)
26ba4                 | ' 
26ba4                 | ' '' Get current pressed state of a keyboard key
26ba4                 | ' PUB keystate(key) : r | buf[2],tmp
26ba4                 | _usbnew_spin2_keystate
26ba4     00 04 06 F6 | 	mov	_var03, #0
26ba8                 | '   if key >= $E0 && key < $E8
26ba8     E0 12 56 F2 | 	cmps	arg01, #224 wc
26bac     34 00 90 CD |  if_b	jmp	#LR__3050
26bb0     E8 12 56 F2 | 	cmps	arg01, #232 wc
26bb4     2C 00 90 3D |  if_ae	jmp	#LR__3050
26bb8                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
26bb8     00 FA 05 F6 | 	mov	result1, #0
26bbc     13 00 00 FF 
26bc0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
26bc4     09 07 02 F6 | 	mov	_var04, arg01
26bc8     E0 06 86 F1 | 	sub	_var04, #224
26bcc     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
26bd0     03 09 4A F0 | 	shr	_var05, _var04 wz
26bd4     13 00 00 FF 
26bd8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
26bdc     01 FA 65 56 |  if_ne	neg	result1, #1
26be0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
26be4                 | LR__3050
26be4                 | '   else
26be4                 | '     '' Do this in inline ASM to ensure atomicity
26be4                 | '     tmp := @hkbd_report
26be4     13 00 00 FF 
26be8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
26bec     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
26bf0                 | '     org
26bf0     13 00 00 FF 
26bf4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
26bf8     97 1E 48 FB | 	callpa	#(@LR__3052-@LR__3051)>>2,fcache_load_ptr_
26bfc                 | LR__3051
26bfc 000             | 	org	0
26bfc 000 28 02 64 FD | 	setq	#1
26c00 001 04 01 02 FB | 	rdlong	_var01, _var05
26c04 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
26c08 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
26c0c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
26c10 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26c14 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
26c18 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26c1c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
26c20 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26c24 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
26c28 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26c2c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
26c30 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26c34 00e 01 04 66 A6 |  if_e	neg	_var03, #1
26c38 00f             | LR__3052
26c38                 | 	orgh
26c38     02 FB 01 F6 | 	mov	result1, _var03
26c3c                 | _usbnew_spin2_keystate_ret
26c3c     2D 00 64 FD | 	ret
26c40                 | 
26c40                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
26c40                 | ' 
26c40                 | ' '' Return key event from buffer if there is one
26c40                 | ' PUB get_key() : r | tail
26c40                 | _usbnew_spin2_get_key
26c40                 | '   tail := keyq_tail
26c40     0F 00 00 FF 
26c44     D5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
26c48     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
26c4c                 | '   if keyq_head == tail
26c4c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
26c50     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
26c54     0F 00 00 FF 
26c58     D4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
26c5c     00 03 0A F2 | 	cmp	_var02, _var01 wz
26c60                 | '     return 0 ' No event
26c60     00 FA 05 A6 |  if_e	mov	result1, #0
26c64     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
26c68                 | '   r := keyq_data[tail]
26c68     00 03 02 F6 | 	mov	_var02, _var01
26c6c     02 02 66 F0 | 	shl	_var02, #2
26c70     0F 00 00 FF 
26c74     D6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7894
26c78     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
26c7c     01 FB 01 FB | 	rdlong	result1, _var02
26c80                 | '   if ++tail == KEYQUEUE_SIZE
26c80     01 00 06 F1 | 	add	_var01, #1
26c84     80 00 0E F2 | 	cmp	_var01, #128 wz
26c88                 | '     tail := 0
26c88     00 00 06 A6 |  if_e	mov	_var01, #0
26c8c                 | '   keyq_tail := tail
26c8c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
26c90     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
26c94     0F 00 00 FF 
26c98     D5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
26c9c                 | _usbnew_spin2_get_key_ret
26c9c     2D 00 64 FD | 	ret
26ca0                 | 
26ca0                 | ' 
26ca0                 | ' '' Emulate mouse movement
26ca0                 | ' PUB mouse_move(x,y)
26ca0                 | _usbnew_spin2_mouse_move
26ca0     02 4A 05 F6 | 	mov	COUNT_, #2
26ca4     A8 00 A0 FD | 	call	#pushregs_
26ca8     09 27 02 F6 | 	mov	local01, arg01
26cac     0A 29 02 F6 | 	mov	local02, arg02
26cb0                 | '   mouse_lock := 1
26cb0     14 00 00 FF 
26cb4     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
26cb8     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
26cbc     14 00 00 FF 
26cc0     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
26cc4                 | '   waitus(2) ' hope driver is now done
26cc4     02 12 06 F6 | 	mov	arg01, #2
26cc8     4C 0B B0 FD | 	call	#__system___waitus
26ccc                 | '   mouse_xacc := x
26ccc     14 00 00 FF 
26cd0     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
26cd4     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
26cd8                 | '   mouse_yacc := y
26cd8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
26cdc     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
26ce0                 | '   if mouse_outptr
26ce0     05 00 00 FF 
26ce4     15 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
26ce8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
26cec     0F 00 00 FF 
26cf0     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
26cf4     24 00 90 AD |  if_e	jmp	#LR__3060
26cf8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
26cf8     10 28 66 F0 | 	shl	local02, #16
26cfc     13 27 32 F9 | 	getword	local01, local01, #0
26d00     13 29 42 F5 | 	or	local02, local01
26d04     0F 00 00 FF 
26d08     D0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
26d0c     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
26d10     0F 00 00 FF 
26d14     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
26d18     13 29 62 FC | 	wrlong	local02, local01
26d1c                 | LR__3060
26d1c                 | '   mouse_lock := 0
26d1c     14 00 00 FF 
26d20     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
26d24     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
26d28     14 00 00 FF 
26d2c     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
26d30     A7 F0 03 F6 | 	mov	ptra, fp
26d34     B2 00 A0 FD | 	call	#popregs_
26d38                 | _usbnew_spin2_mouse_move_ret
26d38     2D 00 64 FD | 	ret
26d3c                 | 
26d3c                 | ' 
26d3c                 | ' '' Get all button states for a device
26d3c                 | ' PUB hidpad_buttons(dev) : r 
26d3c                 | _usbnew_spin2_hidpad_buttons
26d3c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
26d3c     13 00 00 FF 
26d40     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
26d44     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26d48     05 12 66 F0 | 	shl	arg01, #5
26d4c     09 FB 01 F1 | 	add	result1, arg01
26d50     18 FA 05 F1 | 	add	result1, #24
26d54     FD FA 01 FB | 	rdlong	result1, result1
26d58     13 00 00 FF 
26d5c     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
26d60                 | _usbnew_spin2_hidpad_buttons_ret
26d60     2D 00 64 FD | 	ret
26d64                 | 
26d64                 | ' 
26d64                 | ' '' Get state of an axis (normalized between -32768 and 32767)
26d64                 | ' PUB hidpad_axis(dev,axnum) : r
26d64                 | _usbnew_spin2_hidpad_axis
26d64                 | '   if axnum +>= 8
26d64     08 14 16 F2 | 	cmp	arg02, #8 wc
26d68                 | '     return 0
26d68     00 FA 05 36 |  if_ae	mov	result1, #0
26d6c     34 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
26d70                 | '   else 
26d70                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
26d70     13 00 00 FF 
26d74     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
26d78     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26d7c     05 12 66 F0 | 	shl	arg01, #5
26d80     09 FB 01 F1 | 	add	result1, arg01
26d84     04 12 06 F6 | 	mov	arg01, #4
26d88     0A 13 02 F1 | 	add	arg01, arg02
26d8c     01 12 66 F0 | 	shl	arg01, #1
26d90     FD 12 02 F1 | 	add	arg01, result1
26d94     09 FB E1 FA | 	rdword	result1, arg01
26d98     0F FA 65 F7 | 	signx	result1, #15
26d9c     13 00 00 FF 
26da0     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
26da4                 | _usbnew_spin2_hidpad_axis_ret
26da4     2D 00 64 FD | 	ret
26da8                 | 
26da8                 | ' 
26da8                 | ' '' Get state of a hat
26da8                 | ' PUB hidpad_hat(dev,hatnum) : r
26da8                 | _usbnew_spin2_hidpad_hat
26da8                 | '   if hatnum +>= 4
26da8     04 14 16 F2 | 	cmp	arg02, #4 wc
26dac                 | '     return 0
26dac     00 FA 05 36 |  if_ae	mov	result1, #0
26db0     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
26db4                 | '   else 
26db4                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
26db4     13 00 00 FF 
26db8     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
26dbc     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26dc0     05 12 66 F0 | 	shl	arg01, #5
26dc4     09 FB 01 F1 | 	add	result1, arg01
26dc8     1C 12 06 F6 | 	mov	arg01, #28
26dcc     0A 13 02 F1 | 	add	arg01, arg02
26dd0     FD 12 02 F1 | 	add	arg01, result1
26dd4     09 FB C1 FA | 	rdbyte	result1, arg01
26dd8     13 00 00 FF 
26ddc     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
26de0                 | _usbnew_spin2_hidpad_hat_ret
26de0     2D 00 64 FD | 	ret
26de4                 | 
26de4                 | ' 
26de4                 | ' 
26de4                 | ' '--------------------------------------------------------------
26de4                 | ' '---------- Init the variables, start the cog. ----------------
26de4                 | ' '--------------------------------------------------------------
26de4                 | ' 
26de4                 | ' pub start(mbox,scope,cache) :cog,base | iii
26de4                 | _audio096_spin2_start
26de4     04 4A 05 F6 | 	mov	COUNT_, #4
26de8     A8 00 A0 FD | 	call	#pushregs_
26dec     09 27 02 F6 | 	mov	local01, arg01
26df0                 | ' 
26df0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
26df0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
26df0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
26df0                 | ' 
26df0                 | ' mailboxaddr:=mbox 
26df0     F2 26 62 FC | 	wrlong	local01, objptr
26df4                 | ' scope_ptr:=scope
26df4     04 E4 05 F1 | 	add	objptr, #4
26df8     F2 14 62 FC | 	wrlong	arg02, objptr
26dfc                 | ' cache_ptr:=cache
26dfc     04 E4 05 F1 | 	add	objptr, #4
26e00     F2 16 62 FC | 	wrlong	arg03, objptr
26e04                 | ' base:=@channel1[0]
26e04     04 E4 05 F1 | 	add	objptr, #4
26e08     F2 28 02 F6 | 	mov	local02, objptr
26e0c                 | ' long[$40]:=mbox
26e0c     40 26 66 FC | 	wrlong	local01, #64
26e10                 | ' repeat iii from 0 to 7
26e10     00 2A 06 F6 | 	mov	local03, #0
26e14     02 00 00 FF 
26e18     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
26e1c     0C E4 85 F1 | 	sub	objptr, #12
26e20     97 BC 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
26e24                 | LR__3070
26e24                 | '   long[base+64*iii]:=0
26e24     14 27 02 F6 | 	mov	local01, local02
26e28     15 FD 01 F6 | 	mov	result2, local03
26e2c     06 FC 65 F0 | 	shl	result2, #6
26e30     FE 26 02 F1 | 	add	local01, result2
26e34     13 01 68 FC | 	wrlong	#0, local01
26e38                 | '   long[base+64*iii+4]:=0
26e38     14 27 02 F6 | 	mov	local01, local02
26e3c     15 FD 01 F6 | 	mov	result2, local03
26e40     06 FC 65 F0 | 	shl	result2, #6
26e44     FE 26 02 F1 | 	add	local01, result2
26e48     04 26 06 F1 | 	add	local01, #4
26e4c     13 01 68 FC | 	wrlong	#0, local01
26e50                 | '   long[base+64*iii+12]:=0
26e50     14 2D 02 F6 | 	mov	local04, local02
26e54     15 27 02 F6 | 	mov	local01, local03
26e58     06 26 66 F0 | 	shl	local01, #6
26e5c     13 2D 02 F1 | 	add	local04, local01
26e60     0C 2C 06 F1 | 	add	local04, #12
26e64     16 01 68 FC | 	wrlong	#0, local04
26e68                 | '   long[base+64*iii+16]:=2 
26e68     14 2D 02 F6 | 	mov	local04, local02
26e6c     15 27 02 F6 | 	mov	local01, local03
26e70     06 26 66 F0 | 	shl	local01, #6
26e74     13 2D 02 F1 | 	add	local04, local01
26e78     10 2C 06 F1 | 	add	local04, #16
26e7c     16 05 68 FC | 	wrlong	#2, local04
26e80                 | '   word[base+64*iii+20]:=0
26e80     14 2D 02 F6 | 	mov	local04, local02
26e84     15 27 02 F6 | 	mov	local01, local03
26e88     06 26 66 F0 | 	shl	local01, #6
26e8c     13 2D 02 F1 | 	add	local04, local01
26e90     14 2C 06 F1 | 	add	local04, #20
26e94     16 01 58 FC | 	wrword	#0, local04
26e98                 | '   word[base+64*iii+22]:=8192
26e98     14 2D 02 F6 | 	mov	local04, local02
26e9c     15 27 02 F6 | 	mov	local01, local03
26ea0     06 26 66 F0 | 	shl	local01, #6
26ea4     13 2D 02 F1 | 	add	local04, local01
26ea8     16 2C 06 F1 | 	add	local04, #22
26eac     10 00 80 FF 
26eb0     16 01 58 FC | 	wrword	##8192, local04
26eb4                 | '   word[base+64*iii+24]:=4000+2*iii
26eb4     15 2D 02 F6 | 	mov	local04, local03
26eb8     01 2C 66 F0 | 	shl	local04, #1
26ebc     07 00 00 FF 
26ec0     A0 27 06 F6 | 	mov	local01, ##4000
26ec4     16 27 02 F1 | 	add	local01, local04
26ec8     14 2D 02 F6 | 	mov	local04, local02
26ecc     15 FD 01 F6 | 	mov	result2, local03
26ed0     06 FC 65 F0 | 	shl	result2, #6
26ed4     FE 2C 02 F1 | 	add	local04, result2
26ed8     18 2C 06 F1 | 	add	local04, #24
26edc     16 27 52 FC | 	wrword	local01, local04
26ee0                 | '   word[base+64*iii+26]:=2
26ee0     14 2D 02 F6 | 	mov	local04, local02
26ee4     15 27 02 F6 | 	mov	local01, local03
26ee8     06 26 66 F0 | 	shl	local01, #6
26eec     13 2D 02 F1 | 	add	local04, local01
26ef0     1A 2C 06 F1 | 	add	local04, #26
26ef4     16 05 58 FC | 	wrword	#2, local04
26ef8                 | '   long [base+64*iii+8]:=@null | $C0000000
26ef8     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
26efc     3E 26 26 F4 | 	bith	local01, #62
26f00     14 2D 02 F6 | 	mov	local04, local02
26f04     15 17 02 F6 | 	mov	arg03, local03
26f08     06 16 66 F0 | 	shl	arg03, #6
26f0c     0B 2D 02 F1 | 	add	local04, arg03
26f10     08 2C 06 F1 | 	add	local04, #8
26f14     16 27 62 FC | 	wrlong	local01, local04
26f18                 | '   long[base+64*iii+32]:=0
26f18     14 2D 02 F6 | 	mov	local04, local02
26f1c     15 27 02 F6 | 	mov	local01, local03
26f20     06 26 66 F0 | 	shl	local01, #6
26f24     13 2D 02 F1 | 	add	local04, local01
26f28     20 2C 06 F1 | 	add	local04, #32
26f2c     16 01 68 FC | 	wrlong	#0, local04
26f30                 | '   long[base+64*iii+36]:=0
26f30     14 2D 02 F6 | 	mov	local04, local02
26f34     15 27 02 F6 | 	mov	local01, local03
26f38     06 26 66 F0 | 	shl	local01, #6
26f3c     13 2D 02 F1 | 	add	local04, local01
26f40     24 2C 06 F1 | 	add	local04, #36
26f44     16 01 68 FC | 	wrlong	#0, local04
26f48                 | '   long[base+64*iii+40]:=0
26f48     14 2D 02 F6 | 	mov	local04, local02
26f4c     15 27 02 F6 | 	mov	local01, local03
26f50     06 26 66 F0 | 	shl	local01, #6
26f54     13 2D 02 F1 | 	add	local04, local01
26f58     28 2C 06 F1 | 	add	local04, #40
26f5c     16 01 68 FC | 	wrlong	#0, local04
26f60                 | '   long[base+64*iii+44]:=0
26f60     14 2D 02 F6 | 	mov	local04, local02
26f64     15 27 02 F6 | 	mov	local01, local03
26f68     06 26 66 F0 | 	shl	local01, #6
26f6c     13 2D 02 F1 | 	add	local04, local01
26f70     2C 2C 06 F1 | 	add	local04, #44
26f74     16 01 68 FC | 	wrlong	#0, local04
26f78                 | '   long[base+64*iii+28]:=0
26f78     14 2D 02 F6 | 	mov	local04, local02
26f7c     15 27 02 F6 | 	mov	local01, local03
26f80     06 26 66 F0 | 	shl	local01, #6
26f84     13 2D 02 F1 | 	add	local04, local01
26f88     1C 2C 06 F1 | 	add	local04, #28
26f8c     16 01 68 FC | 	wrlong	#0, local04
26f90     01 2A 06 F1 | 	add	local03, #1
26f94     08 2A 56 F2 | 	cmps	local03, #8 wc
26f98     88 FE 9F CD |  if_b	jmp	#LR__3070
26f9c                 | LR__3071
26f9c     02 00 00 FF 
26fa0     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
26fa4                 | '   
26fa4                 | ' cog:=coginit(16,@audio,@mailboxaddr)
26fa4     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
26fa8     F2 16 02 F6 | 	mov	arg03, objptr
26fac     10 2C 06 F6 | 	mov	local04, #16
26fb0     28 16 62 FD | 	setq	arg03
26fb4     0A 2D F2 FC | 	coginit	local04, arg02 wc
26fb8     01 2C 66 C6 |  if_b	neg	local04, #1
26fbc                 | ' waitms(100)
26fbc     64 12 06 F6 | 	mov	arg01, #100
26fc0     E8 07 B0 FD | 	call	#__system___waitms
26fc4                 | ' return cog,base
26fc4     14 FD 01 F6 | 	mov	result2, local02
26fc8     16 FB 01 F6 | 	mov	result1, local04
26fcc     A7 F0 03 F6 | 	mov	ptra, fp
26fd0     B2 00 A0 FD | 	call	#popregs_
26fd4                 | _audio096_spin2_start_ret
26fd4     2D 00 64 FD | 	ret
26fd8                 | 
26fd8                 | ' 
26fd8                 | ' ' a simple play procedure to not poke everything. 
26fd8                 | ' 
26fd8                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
26fd8                 | _audio096_spin2_play
26fd8     0C E4 05 F1 | 	add	objptr, #12
26fdc     F2 00 02 F6 | 	mov	_var01, objptr
26fe0     06 12 66 F0 | 	shl	arg01, #6
26fe4     09 01 02 F1 | 	add	_var01, arg01
26fe8     00 13 02 F6 | 	mov	arg01, _var01
26fec     0C 12 06 F1 | 	add	arg01, #12
26ff0     09 1B 62 FC | 	wrlong	arg05, arg01
26ff4     00 1C 56 F2 | 	cmps	arg06, #0 wc
26ff8     00 13 02 36 |  if_ae	mov	arg01, _var01
26ffc     10 12 06 31 |  if_ae	add	arg01, #16
27000     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
27004     02 1A 06 C1 |  if_b	add	arg05, #2
27008     00 13 02 C6 |  if_b	mov	arg01, _var01
2700c     10 12 06 C1 |  if_b	add	arg01, #16
27010     09 1B 62 CC |  if_b	wrlong	arg05, arg01
27014     0B 13 52 F6 | 	abs	arg01, arg03 wc
27018     0F 1B 80 FF 
2701c     09 1F 1A FD | 	qdiv	##3546895, arg01
27020                 | ' 
27020                 | ' base2:=@channel1[0]+64*channel
27020                 | ' 
27020                 | ' 
27020                 | ' long[base2+12]:= len
27020                 | ' if loop >=0 
27020                 | '   long[base2+16]:= loop
27020     0C E4 85 F1 | 	sub	objptr, #12
27024                 | ' else
27024                 | '   long[base2+16]:= len+2
27024                 | ' word[base2+20]:=vol
27024     00 13 02 F6 | 	mov	arg01, _var01
27028     14 12 06 F1 | 	add	arg01, #20
2702c     09 19 52 FC | 	wrword	arg04, arg01
27030                 | ' word[base2+24]:= 3546895/splfreq 
27030     00 19 02 F6 | 	mov	arg04, _var01
27034     18 18 06 F1 | 	add	arg04, #24
27038                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
27038                 | ' long[base2+28]:=$40000000    
27038                 | ' long[base2+32]:=0    
27038                 | ' long[base2+36]:=0    
27038                 | ' long[base2+40]:=0    
27038                 | ' long[base2+44]:=0    
27038                 | ' long[base2+8]:=sample+$C0000000     
27038     00 00 60 FF 
2703c     00 14 06 F1 | 	add	arg02, ##-1073741824
27040     18 12 62 FD | 	getqx	arg01
27044     09 13 82 F6 | 	negc	arg01, arg01
27048     0C 13 52 FC | 	wrword	arg01, arg04
2704c     00 13 02 F6 | 	mov	arg01, _var01
27050     1A 12 06 F1 | 	add	arg01, #26
27054     09 01 5A FC | 	wrword	#256, arg01
27058     00 13 02 F6 | 	mov	arg01, _var01
2705c     1C 12 06 F1 | 	add	arg01, #28
27060     00 00 A0 FF 
27064     09 01 68 FC | 	wrlong	##1073741824, arg01
27068     00 13 02 F6 | 	mov	arg01, _var01
2706c     20 12 06 F1 | 	add	arg01, #32
27070     09 01 68 FC | 	wrlong	#0, arg01
27074     00 13 02 F6 | 	mov	arg01, _var01
27078     24 12 06 F1 | 	add	arg01, #36
2707c     09 01 68 FC | 	wrlong	#0, arg01
27080     00 13 02 F6 | 	mov	arg01, _var01
27084     28 12 06 F1 | 	add	arg01, #40
27088     09 01 68 FC | 	wrlong	#0, arg01
2708c     00 13 02 F6 | 	mov	arg01, _var01
27090     2C 12 06 F1 | 	add	arg01, #44
27094     09 01 68 FC | 	wrlong	#0, arg01
27098     08 00 06 F1 | 	add	_var01, #8
2709c     00 15 62 FC | 	wrlong	arg02, _var01
270a0                 | _audio096_spin2_play_ret
270a0     2D 00 64 FD | 	ret
270a4                 | 
270a4                 | ' 
270a4                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
270a4                 | _audio096_spin2_play8
270a4                 | ' 
270a4                 | ' base2:=@channel1[0]+64*channel
270a4     0C E4 05 F1 | 	add	objptr, #12
270a8     F2 00 02 F6 | 	mov	_var01, objptr
270ac     06 12 66 F0 | 	shl	arg01, #6
270b0     09 01 02 F1 | 	add	_var01, arg01
270b4                 | ' long[base2]:=0
270b4     00 01 68 FC | 	wrlong	#0, _var01
270b8                 | ' long[base2+8]:=sample+$40000000 
270b8     00 00 20 FF 
270bc     00 14 06 F1 | 	add	arg02, ##1073741824
270c0     00 13 02 F6 | 	mov	arg01, _var01
270c4     08 12 06 F1 | 	add	arg01, #8
270c8     09 15 62 FC | 	wrlong	arg02, arg01
270cc                 | ' if loop>=0
270cc     00 1C 56 F2 | 	cmps	arg06, #0 wc
270d0     0C E4 85 F1 | 	sub	objptr, #12
270d4     1C 00 90 CD |  if_b	jmp	#LR__3080
270d8                 | '   long[base2+12]:=loop
270d8     00 15 02 F6 | 	mov	arg02, _var01
270dc     0C 14 06 F1 | 	add	arg02, #12
270e0     0A 1D 62 FC | 	wrlong	arg06, arg02
270e4                 | '   long[base2+16]:= len
270e4     00 1D 02 F6 | 	mov	arg06, _var01
270e8     10 1C 06 F1 | 	add	arg06, #16
270ec     0E 1B 62 FC | 	wrlong	arg05, arg06
270f0     1C 00 90 FD | 	jmp	#LR__3081
270f4                 | LR__3080
270f4                 | ' else
270f4                 | '   long[base2+12]:= len
270f4     00 1D 02 F6 | 	mov	arg06, _var01
270f8     0C 1C 06 F1 | 	add	arg06, #12
270fc     0E 1B 62 FC | 	wrlong	arg05, arg06
27100                 | '   long[base2+16]:= len+1
27100     01 1A 06 F1 | 	add	arg05, #1
27104     00 13 02 F6 | 	mov	arg01, _var01
27108     10 12 06 F1 | 	add	arg01, #16
2710c     09 1B 62 FC | 	wrlong	arg05, arg01
27110                 | LR__3081
27110     0B 17 52 F6 | 	abs	arg03, arg03 wc
27114     0F 1B 80 FF 
27118     0B 1F 1A FD | 	qdiv	##3546895, arg03
2711c                 | ' word[base2+20]:=vol
2711c     00 17 02 F6 | 	mov	arg03, _var01
27120     14 16 06 F1 | 	add	arg03, #20
27124     0B 19 52 FC | 	wrword	arg04, arg03
27128                 | ' word[base2+24]:= 3546895 /splfreq 
27128     00 13 02 F6 | 	mov	arg01, _var01
2712c     18 12 06 F1 | 	add	arg01, #24
27130                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
27130     1A 00 06 F1 | 	add	_var01, #26
27134     18 18 62 FD | 	getqx	arg04
27138     0C 19 82 F6 | 	negc	arg04, arg04
2713c     09 19 52 FC | 	wrword	arg04, arg01
27140     00 01 5A FC | 	wrword	#256, _var01
27144                 | _audio096_spin2_play8_ret
27144     2D 00 64 FD | 	ret
27148                 | 
27148                 | ' 'long[base2+28]:=$40000000
27148                 | ' 
27148                 | '     
27148                 | ' pub stop(channel) 'silence it
27148                 | _audio096_spin2_stop
27148                 | ' 
27148                 | ' word[@channel1[0]+64*channel+20]:=0
27148     0C E4 05 F1 | 	add	objptr, #12
2714c     F2 00 02 F6 | 	mov	_var01, objptr
27150     09 03 02 F6 | 	mov	_var02, arg01
27154     06 02 66 F0 | 	shl	_var02, #6
27158     01 01 02 F1 | 	add	_var01, _var02
2715c     14 00 06 F1 | 	add	_var01, #20
27160     00 01 58 FC | 	wrword	#0, _var01
27164                 | ' word[@channel1[0]+64*channel+20]:=0
27164     F2 00 02 F6 | 	mov	_var01, objptr
27168     06 12 66 F0 | 	shl	arg01, #6
2716c     09 01 02 F1 | 	add	_var01, arg01
27170     14 00 06 F1 | 	add	_var01, #20
27174     00 01 58 FC | 	wrword	#0, _var01
27178     0C E4 85 F1 | 	sub	objptr, #12
2717c                 | _audio096_spin2_stop_ret
2717c     2D 00 64 FD | 	ret
27180                 | hubexit
27180     81 00 80 FD | 	jmp	#cogexit
27184                 | 
27184                 | __system___setbaud
27184     14 90 06 FB | 	rdlong	muldiva_, #20
27188     09 93 02 F6 | 	mov	muldivb_, arg01
2718c     BA 00 A0 FD | 	call	#divide_
27190     97 06 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
27194                 | LR__3090
27194     3E FA 9D FA | 	rdpin	result1, #62 wc
27198     FE FC A1 F1 | 	subx	result2, result2
2719c     F4 FF 9F CD |  if_b	jmp	#LR__3090
271a0                 | LR__3091
271a0     40 7C 64 FD | 	dirl	#62
271a4     40 7E 64 FD | 	dirl	#63
271a8     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
271ac     10 92 66 F0 | 	shl	muldivb_, #16
271b0     07 14 06 F6 | 	mov	arg02, #7
271b4     49 15 02 F1 | 	add	arg02, muldivb_
271b8     3E F8 0C FC | 	wrpin	#124, #62
271bc     3E 14 16 FC | 	wxpin	arg02, #62
271c0     3F 7C 0C FC | 	wrpin	#62, #63
271c4     14 14 06 F1 | 	add	arg02, #20
271c8     3F 14 16 FC | 	wxpin	arg02, #63
271cc     41 7C 64 FD | 	dirh	#62
271d0     41 7E 64 FD | 	dirh	#63
271d4                 | __system___setbaud_ret
271d4     2D 00 64 FD | 	ret
271d8                 | 
271d8                 | __system___txraw
271d8     01 4A 05 F6 | 	mov	COUNT_, #1
271dc     A8 00 A0 FD | 	call	#pushregs_
271e0     09 27 02 F6 | 	mov	local01, arg01
271e4     97 06 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
271e8                 | LR__3100
271e8     3E FA 9D FA | 	rdpin	result1, #62 wc
271ec     FE FC A1 F1 | 	subx	result2, result2
271f0     F4 FF 9F CD |  if_b	jmp	#LR__3100
271f4                 | LR__3101
271f4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
271f8     C2 01 00 AF 
271fc     00 12 06 A6 |  if_e	mov	arg01, ##230400
27200     80 FF BF AD |  if_e	call	#__system___setbaud
27204     58 7C 64 FD | 	drvl	#62
27208     3E 26 26 FC | 	wypin	local01, #62
2720c     01 FA 05 F6 | 	mov	result1, #1
27210     A7 F0 03 F6 | 	mov	ptra, fp
27214     B2 00 A0 FD | 	call	#popregs_
27218                 | __system___txraw_ret
27218     2D 00 64 FD | 	ret
2721c                 | 
2721c                 | __system___rxraw
2721c     0D 4A 05 F6 | 	mov	COUNT_, #13
27220     A8 00 A0 FD | 	call	#pushregs_
27224     09 27 02 F6 | 	mov	local01, arg01
27228     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2722c     C2 01 00 AF 
27230     00 12 06 A6 |  if_e	mov	arg01, ##230400
27234     4C FF BF AD |  if_e	call	#__system___setbaud
27238     00 26 0E F2 | 	cmp	local01, #0 wz
2723c     20 00 90 AD |  if_e	jmp	#LR__3110
27240     14 2A 06 FB | 	rdlong	local03, #20
27244     0A 2A 46 F0 | 	shr	local03, #10
27248     15 27 02 FD | 	qmul	local01, local03
2724c     1A FA 61 FD | 	getct	result1
27250     18 2C 62 FD | 	getqx	local04
27254     16 FB 01 F1 | 	add	result1, local04
27258     FD 2E 02 F6 | 	mov	local05, result1
2725c     04 00 90 FD | 	jmp	#LR__3111
27260                 | LR__3110
27260     00 2E 06 F6 | 	mov	local05, #0
27264                 | LR__3111
27264     01 30 66 F6 | 	neg	local06, #1
27268     3F 32 06 F6 | 	mov	local07, #63
2726c     00 34 06 F6 | 	mov	local08, #0
27270     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27274     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
27278     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
2727c                 | LR__3112
2727c     08 36 16 F4 | 	testb	local09, #8 wc
27280     09 36 76 F4 | 	testbn	local09, #9 andc
27284     0A 36 46 F0 | 	shr	local09, #10
27288     01 34 06 C6 |  if_b	mov	local08, #1
2728c     40 7E 6C 3D |  if_ae	testp	#63 wz
27290     01 34 06 26 |  if_nc_and_z	mov	local08, #1
27294     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
27298     04 36 46 20 |  if_nc_and_z	shr	local09, #4
2729c                 | LR__3113
2729c     00 28 06 F6 | 	mov	local02, #0
272a0     00 34 0E F2 | 	cmp	local08, #0 wz
272a4     01 28 66 56 |  if_ne	neg	local02, #1
272a8     00 38 06 F6 | 	mov	local10, #0
272ac     00 2A 06 F6 | 	mov	local03, #0
272b0     00 26 0E F2 | 	cmp	local01, #0 wz
272b4     01 2A 66 56 |  if_ne	neg	local03, #1
272b8     00 2C 06 F6 | 	mov	local04, #0
272bc     00 3A 06 F6 | 	mov	local11, #0
272c0     17 3D 02 F6 | 	mov	local12, local05
272c4     1A FA 61 FD | 	getct	result1
272c8     FD 3E 02 F6 | 	mov	local13, result1
272cc     1F 3D 82 F1 | 	sub	local12, local13
272d0     00 3C 56 F2 | 	cmps	local12, #0 wc
272d4     00 3A 26 C6 |  if_b	not	local11, #0
272d8     00 3A 0E F2 | 	cmp	local11, #0 wz
272dc     00 2C 26 56 |  if_ne	not	local04, #0
272e0     16 2B CA F7 | 	test	local03, local04 wz
272e4     00 38 26 56 |  if_ne	not	local10, #0
272e8     1C 29 4A F5 | 	or	local02, local10 wz
272ec     8C FF 9F AD |  if_e	jmp	#LR__3112
272f0     00 34 0E F2 | 	cmp	local08, #0 wz
272f4     1B 31 02 56 |  if_ne	mov	local06, local09
272f8     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
272fc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27300     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
27304     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
27308     18 FB 01 F6 | 	mov	result1, local06
2730c     A7 F0 03 F6 | 	mov	ptra, fp
27310     B2 00 A0 FD | 	call	#popregs_
27314                 | __system___rxraw_ret
27314     2D 00 64 FD | 	ret
27318                 | 
27318                 | __system___getus
27318     1A FC 71 FD | 	getct	result2 wc
2731c     1A 00 62 FD | 	getct	_var01
27320     10 E6 05 F1 | 	add	ptr___system__dat__, #16
27324     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
27328     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2732c     20 00 90 5D |  if_ne	jmp	#LR__3120
27330     14 02 06 FB | 	rdlong	_var02, #20
27334     A1 07 00 FF 
27338     40 02 16 FD | 	qdiv	_var02, ##1000000
2733c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
27340     18 FA 61 FD | 	getqx	result1
27344     FD 02 02 F6 | 	mov	_var02, result1
27348     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2734c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
27350                 | LR__3120
27350     01 FD 11 FD | 	qdiv	result2, _var02
27354     19 FC 61 FD | 	getqy	result2
27358     28 FC 61 FD | 	setq	result2
2735c     01 01 12 FD | 	qdiv	_var01, _var02
27360     18 FA 61 FD | 	getqx	result1
27364                 | __system___getus_ret
27364     2D 00 64 FD | 	ret
27368                 | 
27368                 | __system____builtin_memmove
27368     09 01 02 F6 | 	mov	_var01, arg01
2736c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
27370     10 00 90 CD |  if_b	jmp	#LR__3130
27374     0A 03 02 F6 | 	mov	_var02, arg02
27378     0B 03 02 F1 | 	add	_var02, arg03
2737c     01 13 52 F2 | 	cmps	arg01, _var02 wc
27380     48 00 90 CD |  if_b	jmp	#LR__3136
27384                 | LR__3130
27384     0B 05 02 F6 | 	mov	_var03, arg03
27388     02 04 4E F0 | 	shr	_var03, #2 wz
2738c     18 00 90 AD |  if_e	jmp	#LR__3135
27390     97 0A 48 FB | 	callpa	#(@LR__3133-@LR__3131)>>2,fcache_load_ptr_
27394                 | LR__3131
27394     02 09 D8 FC | 	rep	@LR__3134, _var03
27398                 | LR__3132
27398     0A 05 02 FB | 	rdlong	_var03, arg02
2739c     09 05 62 FC | 	wrlong	_var03, arg01
273a0     04 12 06 F1 | 	add	arg01, #4
273a4     04 14 06 F1 | 	add	arg02, #4
273a8                 | LR__3133
273a8                 | LR__3134
273a8                 | LR__3135
273a8     02 16 CE F7 | 	test	arg03, #2 wz
273ac     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
273b0     09 03 52 5C |  if_ne	wrword	_var02, arg01
273b4     02 12 06 51 |  if_ne	add	arg01, #2
273b8     02 14 06 51 |  if_ne	add	arg02, #2
273bc     01 16 CE F7 | 	test	arg03, #1 wz
273c0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
273c4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
273c8     28 00 90 FD | 	jmp	#LR__3142
273cc                 | LR__3136
273cc     0B 13 02 F1 | 	add	arg01, arg03
273d0     0B 15 02 F1 | 	add	arg02, arg03
273d4     0B 07 0A F6 | 	mov	_var04, arg03 wz
273d8     18 00 90 AD |  if_e	jmp	#LR__3141
273dc     97 0A 48 FB | 	callpa	#(@LR__3139-@LR__3137)>>2,fcache_load_ptr_
273e0                 | LR__3137
273e0     03 09 D8 FC | 	rep	@LR__3140, _var04
273e4                 | LR__3138
273e4     01 12 86 F1 | 	sub	arg01, #1
273e8     01 14 86 F1 | 	sub	arg02, #1
273ec     0A 03 C2 FA | 	rdbyte	_var02, arg02
273f0     09 03 42 FC | 	wrbyte	_var02, arg01
273f4                 | LR__3139
273f4                 | LR__3140
273f4                 | LR__3141
273f4                 | LR__3142
273f4     00 FB 01 F6 | 	mov	result1, _var01
273f8                 | __system____builtin_memmove_ret
273f8     2D 00 64 FD | 	ret
273fc                 | 
273fc                 | __system__longmove
273fc     09 01 02 F6 | 	mov	_var01, arg01
27400     0A 13 52 F2 | 	cmps	arg01, arg02 wc
27404     24 00 90 3D |  if_ae	jmp	#LR__3154
27408     0B 03 0A F6 | 	mov	_var02, arg03 wz
2740c     54 00 90 AD |  if_e	jmp	#LR__3160
27410     97 0A 48 FB | 	callpa	#(@LR__3152-@LR__3150)>>2,fcache_load_ptr_
27414                 | LR__3150
27414     01 09 D8 FC | 	rep	@LR__3153, _var02
27418                 | LR__3151
27418     0A 03 02 FB | 	rdlong	_var02, arg02
2741c     09 03 62 FC | 	wrlong	_var02, arg01
27420     04 12 06 F1 | 	add	arg01, #4
27424     04 14 06 F1 | 	add	arg02, #4
27428                 | LR__3152
27428                 | LR__3153
27428     38 00 90 FD | 	jmp	#LR__3160
2742c                 | LR__3154
2742c     0B 03 02 F6 | 	mov	_var02, arg03
27430     02 02 66 F0 | 	shl	_var02, #2
27434     01 13 02 F1 | 	add	arg01, _var02
27438     0B 05 02 F6 | 	mov	_var03, arg03
2743c     02 04 66 F0 | 	shl	_var03, #2
27440     02 15 02 F1 | 	add	arg02, _var03
27444     0B 07 0A F6 | 	mov	_var04, arg03 wz
27448     18 00 90 AD |  if_e	jmp	#LR__3159
2744c     97 0A 48 FB | 	callpa	#(@LR__3157-@LR__3155)>>2,fcache_load_ptr_
27450                 | LR__3155
27450     03 09 D8 FC | 	rep	@LR__3158, _var04
27454                 | LR__3156
27454     04 12 86 F1 | 	sub	arg01, #4
27458     04 14 86 F1 | 	sub	arg02, #4
2745c     0A 07 02 FB | 	rdlong	_var04, arg02
27460     09 07 62 FC | 	wrlong	_var04, arg01
27464                 | LR__3157
27464                 | LR__3158
27464                 | LR__3159
27464                 | LR__3160
27464     00 FB 01 F6 | 	mov	result1, _var01
27468                 | __system__longmove_ret
27468     2D 00 64 FD | 	ret
2746c                 | 
2746c                 | __system____builtin_strcpy
2746c     09 01 02 F6 | 	mov	_var01, arg01
27470     97 0A 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
27474                 | LR__3170
27474     0A FB C9 FA | 	rdbyte	result1, arg02 wz
27478     09 FB 41 FC | 	wrbyte	result1, arg01
2747c     01 14 06 F1 | 	add	arg02, #1
27480     01 12 06 F1 | 	add	arg01, #1
27484     EC FF 9F 5D |  if_ne	jmp	#LR__3170
27488                 | LR__3171
27488     00 FB 01 F6 | 	mov	result1, _var01
2748c                 | __system____builtin_strcpy_ret
2748c     2D 00 64 FD | 	ret
27490                 | 
27490                 | __system____topofstack
27490     00 4A 05 F6 | 	mov	COUNT_, #0
27494     A8 00 A0 FD | 	call	#pushregs_
27498     08 F0 07 F1 | 	add	ptra, #8
2749c     04 4E 05 F1 | 	add	fp, #4
274a0     A7 12 62 FC | 	wrlong	arg01, fp
274a4     A7 FA 01 F6 | 	mov	result1, fp
274a8     04 4E 85 F1 | 	sub	fp, #4
274ac     A7 F0 03 F6 | 	mov	ptra, fp
274b0     B2 00 A0 FD | 	call	#popregs_
274b4                 | __system____topofstack_ret
274b4     2D 00 64 FD | 	ret
274b8                 | 
274b8                 | __system___lockmem
274b8     00 FA 05 F6 | 	mov	result1, #0
274bc     01 FA 61 FD | 	cogid	result1
274c0     00 FB 05 F1 | 	add	result1, #256
274c4                 | LR__3180
274c4     09 01 0A FB | 	rdlong	_var01, arg01 wz
274c8     09 FB 61 AC |  if_e	wrlong	result1, arg01
274cc     09 01 02 AB |  if_e	rdlong	_var01, arg01
274d0     09 01 02 AB |  if_e	rdlong	_var01, arg01
274d4     FD 00 0A F2 | 	cmp	_var01, result1 wz
274d8     E8 FF 9F 5D |  if_ne	jmp	#LR__3180
274dc                 | __system___lockmem_ret
274dc     2D 00 64 FD | 	ret
274e0                 | 
274e0                 | __system___string_cmp
274e0     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
274e4                 | LR__3190
274e4     09 01 C2 FA | 	rdbyte	_var01, arg01
274e8     0A 03 C2 FA | 	rdbyte	_var02, arg02
274ec     00 05 02 F6 | 	mov	_var03, _var01
274f0     01 05 8A F1 | 	sub	_var03, _var02 wz
274f4     01 12 06 F1 | 	add	arg01, #1
274f8     01 14 06 F1 | 	add	arg02, #1
274fc     0C 00 90 5D |  if_ne	jmp	#LR__3192
27500     00 00 0E F2 | 	cmp	_var01, #0 wz
27504     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
27508     D8 FF 9F 5D |  if_ne	jmp	#LR__3190
2750c                 | LR__3191
2750c                 | LR__3192
2750c     02 FB 01 F6 | 	mov	result1, _var03
27510                 | __system___string_cmp_ret
27510     2D 00 64 FD | 	ret
27514                 | 
27514                 | __system___string_concat
27514     05 4A 05 F6 | 	mov	COUNT_, #5
27518     A8 00 A0 FD | 	call	#pushregs_
2751c     09 27 02 F6 | 	mov	local01, arg01
27520     0A 29 02 F6 | 	mov	local02, arg02
27524     13 13 02 F6 | 	mov	arg01, local01
27528     09 2B 02 F6 | 	mov	local03, arg01
2752c     97 06 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
27530                 | LR__3200
27530     15 FB C9 FA | 	rdbyte	result1, local03 wz
27534     01 2A 06 51 |  if_ne	add	local03, #1
27538     F4 FF 9F 5D |  if_ne	jmp	#LR__3200
2753c                 | LR__3201
2753c     09 2B 82 F1 | 	sub	local03, arg01
27540     15 2D 02 F6 | 	mov	local04, local03
27544     14 13 02 F6 | 	mov	arg01, local02
27548     09 2B 02 F6 | 	mov	local03, arg01
2754c     97 06 48 FB | 	callpa	#(@LR__3203-@LR__3202)>>2,fcache_load_ptr_
27550                 | LR__3202
27550     15 FB C9 FA | 	rdbyte	result1, local03 wz
27554     01 2A 06 51 |  if_ne	add	local03, #1
27558     F4 FF 9F 5D |  if_ne	jmp	#LR__3202
2755c                 | LR__3203
2755c     09 2B 82 F1 | 	sub	local03, arg01
27560     16 13 02 F6 | 	mov	arg01, local04
27564     15 13 02 F1 | 	add	arg01, local03
27568     01 12 06 F1 | 	add	arg01, #1
2756c     EC 40 B0 FD | 	call	#__system___gc_alloc_managed
27570     FD 2E 0A F6 | 	mov	local05, result1 wz
27574     28 00 90 AD |  if_e	jmp	#LR__3204
27578     17 13 02 F6 | 	mov	arg01, local05
2757c     13 15 02 F6 | 	mov	arg02, local01
27580     16 17 02 F6 | 	mov	arg03, local04
27584     E0 FD BF FD | 	call	#__system____builtin_memmove
27588     17 13 02 F6 | 	mov	arg01, local05
2758c     16 13 02 F1 | 	add	arg01, local04
27590     01 2A 06 F1 | 	add	local03, #1
27594     14 15 02 F6 | 	mov	arg02, local02
27598     15 17 02 F6 | 	mov	arg03, local03
2759c     C8 FD BF FD | 	call	#__system____builtin_memmove
275a0                 | LR__3204
275a0     17 FB 01 F6 | 	mov	result1, local05
275a4     A7 F0 03 F6 | 	mov	ptra, fp
275a8     B2 00 A0 FD | 	call	#popregs_
275ac                 | __system___string_concat_ret
275ac     2D 00 64 FD | 	ret
275b0                 | 
275b0                 | __system___tx
275b0     02 4A 05 F6 | 	mov	COUNT_, #2
275b4     A8 00 A0 FD | 	call	#pushregs_
275b8     09 27 02 F6 | 	mov	local01, arg01
275bc     0A 26 0E F2 | 	cmp	local01, #10 wz
275c0     18 00 90 5D |  if_ne	jmp	#LR__3210
275c4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
275c8     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
275cc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
275d0     02 28 CE F7 | 	test	local02, #2 wz
275d4     0D 12 06 56 |  if_ne	mov	arg01, #13
275d8     FC FB BF 5D |  if_ne	call	#__system___txraw
275dc                 | LR__3210
275dc     13 13 02 F6 | 	mov	arg01, local01
275e0     F4 FB BF FD | 	call	#__system___txraw
275e4     A7 F0 03 F6 | 	mov	ptra, fp
275e8     B2 00 A0 FD | 	call	#popregs_
275ec                 | __system___tx_ret
275ec     2D 00 64 FD | 	ret
275f0                 | 
275f0                 | __system___rx
275f0     01 4A 05 F6 | 	mov	COUNT_, #1
275f4     A8 00 A0 FD | 	call	#pushregs_
275f8                 | LR__3220
275f8     00 12 06 F6 | 	mov	arg01, #0
275fc     1C FC BF FD | 	call	#__system___rxraw
27600     FD 26 02 F6 | 	mov	local01, result1
27604     FF FF 7F FF 
27608     FF 27 0E F2 | 	cmp	local01, ##-1 wz
2760c     E8 FF 9F AD |  if_e	jmp	#LR__3220
27610     0D 26 0E F2 | 	cmp	local01, #13 wz
27614     14 00 90 5D |  if_ne	jmp	#LR__3221
27618     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2761c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27620     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27624     02 FA CD F7 | 	test	result1, #2 wz
27628     0A 26 06 56 |  if_ne	mov	local01, #10
2762c                 | LR__3221
2762c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27630     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
27634     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27638     01 12 CE F7 | 	test	arg01, #1 wz
2763c     1C 00 90 AD |  if_e	jmp	#LR__3224
27640     7F 26 0E F2 | 	cmp	local01, #127 wz
27644     0C 00 90 5D |  if_ne	jmp	#LR__3222
27648     08 12 06 F6 | 	mov	arg01, #8
2764c     60 FF BF FD | 	call	#__system___tx
27650     08 00 90 FD | 	jmp	#LR__3223
27654                 | LR__3222
27654     13 13 02 F6 | 	mov	arg01, local01
27658     54 FF BF FD | 	call	#__system___tx
2765c                 | LR__3223
2765c                 | LR__3224
2765c     13 FB 01 F6 | 	mov	result1, local01
27660     A7 F0 03 F6 | 	mov	ptra, fp
27664     B2 00 A0 FD | 	call	#popregs_
27668                 | __system___rx_ret
27668     2D 00 64 FD | 	ret
2766c                 | 
2766c                 | __system___pinwrite
2766c     09 01 02 F6 | 	mov	_var01, arg01
27670     1F 00 06 F5 | 	and	_var01, #31
27674     20 12 CE F7 | 	test	arg01, #32 wz
27678     06 12 46 F0 | 	shr	arg01, #6
2767c     09 13 CA F9 | 	bmask	arg01, arg01
27680     00 13 62 F0 | 	shl	arg01, _var01
27684     00 15 62 F0 | 	shl	arg02, _var01
27688     1C 00 90 AD |  if_e	jmp	#LR__3230
2768c     09 F7 43 F5 | 	or	dirb, arg01
27690     FD 01 02 F6 | 	mov	_var01, outb
27694     09 01 22 F5 | 	andn	_var01, arg01
27698     09 15 02 F5 | 	and	arg02, arg01
2769c     0A 01 42 F5 | 	or	_var01, arg02
276a0     00 FB 03 F6 | 	mov	outb, _var01
276a4     18 00 90 FD | 	jmp	#LR__3231
276a8                 | LR__3230
276a8     09 F5 43 F5 | 	or	dira, arg01
276ac     FC 01 02 F6 | 	mov	_var01, outa
276b0     09 01 22 F5 | 	andn	_var01, arg01
276b4     09 15 02 F5 | 	and	arg02, arg01
276b8     0A 01 42 F5 | 	or	_var01, arg02
276bc     00 F9 03 F6 | 	mov	outa, _var01
276c0                 | LR__3231
276c0                 | __system___pinwrite_ret
276c0     2D 00 64 FD | 	ret
276c4                 | 
276c4                 | __system___basic_read_line
276c4     06 4A 05 F6 | 	mov	COUNT_, #6
276c8     A8 00 A0 FD | 	call	#pushregs_
276cc     09 27 02 F6 | 	mov	local01, arg01
276d0     00 28 06 F6 | 	mov	local02, #0
276d4     18 2A 06 F6 | 	mov	local03, #24
276d8     00 2C 06 F6 | 	mov	local04, #0
276dc     18 12 06 F6 | 	mov	arg01, #24
276e0     78 3F B0 FD | 	call	#__system___gc_alloc_managed
276e4     FD 2E 0A F6 | 	mov	local05, result1 wz
276e8     17 FB 01 A6 |  if_e	mov	result1, local05
276ec     B0 00 90 AD |  if_e	jmp	#LR__3243
276f0                 | LR__3240
276f0     13 13 02 F6 | 	mov	arg01, local01
276f4     7C 0B B0 FD | 	call	#__system___basic_get_char
276f8     FD 30 02 F6 | 	mov	local06, result1
276fc     01 30 56 F2 | 	cmps	local06, #1 wc
27700     8C 00 90 CD |  if_b	jmp	#LR__3242
27704     0A 30 0E F2 | 	cmp	local06, #10 wz
27708     10 00 90 5D |  if_ne	jmp	#LR__3241
2770c     00 2C 0E F2 | 	cmp	local04, #0 wz
27710     01 28 56 52 |  if_ne	cmps	local02, #1 wc
27714     01 28 86 11 |  if_a	sub	local02, #1
27718     74 00 90 FD | 	jmp	#LR__3242
2771c                 | LR__3241
2771c     0D 30 0E F2 | 	cmp	local06, #13 wz
27720     01 2C 06 A6 |  if_e	mov	local04, #1
27724     00 2C 06 56 |  if_ne	mov	local04, #0
27728     08 30 0E F2 | 	cmp	local06, #8 wz
2772c     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
27730     01 28 56 A2 |  if_e	cmps	local02, #1 wc
27734     01 28 86 21 |  if_nc_and_z	sub	local02, #1
27738     B4 FF 9F AD |  if_e	jmp	#LR__3240
2773c     17 17 02 F6 | 	mov	arg03, local05
27740     14 17 02 F1 | 	add	arg03, local02
27744     0B 31 42 FC | 	wrbyte	local06, arg03
27748     01 28 06 F1 | 	add	local02, #1
2774c     15 29 0A F2 | 	cmp	local02, local03 wz
27750     9C FF 9F 5D |  if_ne	jmp	#LR__3240
27754     15 13 02 F6 | 	mov	arg01, local03
27758     20 12 06 F1 | 	add	arg01, #32
2775c     FC 3E B0 FD | 	call	#__system___gc_alloc_managed
27760     FD 30 0A F6 | 	mov	local06, result1 wz
27764     18 FB 01 A6 |  if_e	mov	result1, local06
27768     34 00 90 AD |  if_e	jmp	#LR__3243
2776c     18 13 02 F6 | 	mov	arg01, local06
27770     17 15 02 F6 | 	mov	arg02, local05
27774     15 17 02 F6 | 	mov	arg03, local03
27778     EC FB BF FD | 	call	#__system____builtin_memmove
2777c     20 2A 06 F1 | 	add	local03, #32
27780     17 13 02 F6 | 	mov	arg01, local05
27784     10 40 B0 FD | 	call	#__system___gc_free
27788     18 2F 02 F6 | 	mov	local05, local06
2778c     60 FF 9F FD | 	jmp	#LR__3240
27790                 | LR__3242
27790     17 31 02 F6 | 	mov	local06, local05
27794     14 31 02 F1 | 	add	local06, local02
27798     18 01 48 FC | 	wrbyte	#0, local06
2779c     17 FB 01 F6 | 	mov	result1, local05
277a0                 | LR__3243
277a0     A7 F0 03 F6 | 	mov	ptra, fp
277a4     B2 00 A0 FD | 	call	#popregs_
277a8                 | __system___basic_read_line_ret
277a8     2D 00 64 FD | 	ret
277ac                 | 
277ac                 | __system___waitms
277ac     09 01 02 F6 | 	mov	_var01, arg01
277b0     1A 02 62 FD | 	getct	_var02
277b4     14 04 06 FB | 	rdlong	_var03, #20
277b8     97 14 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
277bc                 | LR__3250
277bc     01 00 00 FF 
277c0     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
277c4     1C 00 90 CD |  if_b	jmp	#LR__3252
277c8     02 03 02 F1 | 	add	_var02, _var03
277cc     01 13 02 F6 | 	mov	arg01, _var02
277d0     00 12 66 FA | 	addct1	arg01, #0
277d4     24 22 60 FD | 	waitct1
277d8     01 00 00 FF 
277dc     E8 01 86 F1 | 	sub	_var01, ##1000
277e0     D8 FF 9F FD | 	jmp	#LR__3250
277e4                 | LR__3251
277e4                 | LR__3252
277e4     01 00 56 F2 | 	cmps	_var01, #1 wc
277e8     28 00 90 CD |  if_b	jmp	#LR__3253
277ec     02 01 02 FD | 	qmul	_var01, _var03
277f0     01 00 00 FF 
277f4     E8 17 06 F6 | 	mov	arg03, ##1000
277f8     19 FA 61 FD | 	getqy	result1
277fc     18 12 62 FD | 	getqx	arg01
27800     28 FA 61 FD | 	setq	result1
27804     0B 13 12 FD | 	qdiv	arg01, arg03
27808     18 12 62 FD | 	getqx	arg01
2780c     01 13 62 FA | 	addct1	arg01, _var02
27810     24 22 60 FD | 	waitct1
27814                 | LR__3253
27814                 | __system___waitms_ret
27814     2D 00 64 FD | 	ret
27818                 | 
27818                 | __system___waitus
27818     09 01 02 F6 | 	mov	_var01, arg01
2781c     1A 02 62 FD | 	getct	_var02
27820     14 04 06 FB | 	rdlong	_var03, #20
27824     97 14 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
27828                 | LR__3260
27828     A1 07 00 FF 
2782c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
27830     1C 00 90 CD |  if_b	jmp	#LR__3262
27834     02 03 02 F1 | 	add	_var02, _var03
27838     01 13 02 F6 | 	mov	arg01, _var02
2783c     00 12 66 FA | 	addct1	arg01, #0
27840     24 22 60 FD | 	waitct1
27844     A1 07 00 FF 
27848     40 00 86 F1 | 	sub	_var01, ##1000000
2784c     D8 FF 9F FD | 	jmp	#LR__3260
27850                 | LR__3261
27850                 | LR__3262
27850     01 00 56 F2 | 	cmps	_var01, #1 wc
27854     28 00 90 CD |  if_b	jmp	#LR__3263
27858     02 01 02 FD | 	qmul	_var01, _var03
2785c     A1 07 00 FF 
27860     40 16 06 F6 | 	mov	arg03, ##1000000
27864     19 FA 61 FD | 	getqy	result1
27868     18 12 62 FD | 	getqx	arg01
2786c     28 FA 61 FD | 	setq	result1
27870     0B 13 12 FD | 	qdiv	arg01, arg03
27874     18 FA 61 FD | 	getqx	result1
27878     FD 02 62 FA | 	addct1	_var02, result1
2787c     24 22 60 FD | 	waitct1
27880                 | LR__3263
27880                 | __system___waitus_ret
27880     2D 00 64 FD | 	ret
27884                 | 
27884                 | __system___mount
27884     0B 4A 05 F6 | 	mov	COUNT_, #11
27888     A8 00 A0 FD | 	call	#pushregs_
2788c     09 27 02 F6 | 	mov	local01, arg01
27890     0A 29 0A F6 | 	mov	local02, arg02 wz
27894     01 2A 66 F6 | 	neg	local03, #1
27898     01 FA 65 A6 |  if_e	neg	result1, #1
2789c     98 02 90 AD |  if_e	jmp	#LR__3285
278a0     13 FB C1 FA | 	rdbyte	result1, local01
278a4     2F FA 0D F2 | 	cmp	result1, #47 wz
278a8     28 00 90 5D |  if_ne	jmp	#LR__3272
278ac     13 13 02 F6 | 	mov	arg01, local01
278b0     09 2D 02 F6 | 	mov	local04, arg01
278b4     97 06 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
278b8                 | LR__3270
278b8     16 FB C9 FA | 	rdbyte	result1, local04 wz
278bc     01 2C 06 51 |  if_ne	add	local04, #1
278c0     F4 FF 9F 5D |  if_ne	jmp	#LR__3270
278c4                 | LR__3271
278c4     09 2D 82 F1 | 	sub	local04, arg01
278c8     16 FB 01 F6 | 	mov	result1, local04
278cc     10 FA 55 F2 | 	cmps	result1, #16 wc
278d0     14 00 90 CD |  if_b	jmp	#LR__3273
278d4                 | LR__3272
278d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
278d8     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
278dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
278e0     01 FA 65 F6 | 	neg	result1, #1
278e4     50 02 90 FD | 	jmp	#LR__3285
278e8                 | LR__3273
278e8     00 2E 06 F6 | 	mov	local05, #0
278ec                 | LR__3274
278ec     04 2E 56 F2 | 	cmps	local05, #4 wc
278f0     B0 00 90 3D |  if_ae	jmp	#LR__3279
278f4     17 13 02 F6 | 	mov	arg01, local05
278f8     02 12 66 F0 | 	shl	arg01, #2
278fc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27900     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
27904     09 FB 09 FB | 	rdlong	result1, arg01 wz
27908     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2790c     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
27910     17 2B 02 86 |  if_c_and_z	mov	local03, local05
27914     84 00 90 8D |  if_c_and_z	jmp	#LR__3278
27918     17 13 02 F6 | 	mov	arg01, local05
2791c     02 12 66 F0 | 	shl	arg01, #2
27920     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27924     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
27928     09 13 02 FB | 	rdlong	arg01, arg01
2792c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27930     09 2D 02 F6 | 	mov	local04, arg01
27934     97 06 48 FB | 	callpa	#(@LR__3276-@LR__3275)>>2,fcache_load_ptr_
27938                 | LR__3275
27938     16 FB C9 FA | 	rdbyte	result1, local04 wz
2793c     01 2C 06 51 |  if_ne	add	local04, #1
27940     F4 FF 9F 5D |  if_ne	jmp	#LR__3275
27944                 | LR__3276
27944     09 2D 82 F1 | 	sub	local04, arg01
27948     16 31 02 F6 | 	mov	local06, local04
2794c     18 13 02 F6 | 	mov	arg01, local06
27950     13 13 02 F1 | 	add	arg01, local01
27954     09 FB C1 FA | 	rdbyte	result1, arg01
27958     2F FA 0D F2 | 	cmp	result1, #47 wz
2795c     18 33 02 56 |  if_ne	mov	local07, local06
27960     13 33 02 51 |  if_ne	add	local07, local01
27964     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
27968     30 00 90 5D |  if_ne	jmp	#LR__3277
2796c     17 17 02 F6 | 	mov	arg03, local05
27970     02 16 66 F0 | 	shl	arg03, #2
27974     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27978     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
2797c     0B 15 02 FB | 	rdlong	arg02, arg03
27980     13 13 02 F6 | 	mov	arg01, local01
27984     18 17 02 F6 | 	mov	arg03, local06
27988     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2798c     4C 51 B0 FD | 	call	#__system__strncmp
27990     00 FA 0D F2 | 	cmp	result1, #0 wz
27994     17 2B 02 A6 |  if_e	mov	local03, local05
27998     08 00 90 AD |  if_e	jmp	#LR__3279
2799c                 | LR__3277
2799c                 | LR__3278
2799c     01 2E 06 F1 | 	add	local05, #1
279a0     48 FF 9F FD | 	jmp	#LR__3274
279a4                 | LR__3279
279a4     FF FF 7F FF 
279a8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
279ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
279b0     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
279b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
279b8     01 FA 65 A6 |  if_e	neg	result1, #1
279bc     78 01 90 AD |  if_e	jmp	#LR__3285
279c0     15 2F 02 F6 | 	mov	local05, local03
279c4     17 33 02 F6 | 	mov	local07, local05
279c8     02 32 66 F0 | 	shl	local07, #2
279cc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
279d0     F3 32 02 F1 | 	add	local07, ptr___system__dat__
279d4     19 31 0A FB | 	rdlong	local06, local07 wz
279d8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
279dc     58 00 90 AD |  if_e	jmp	#LR__3280
279e0     4C 30 06 F1 | 	add	local06, #76
279e4     18 33 0A FB | 	rdlong	local07, local06 wz
279e8     4C 30 86 F1 | 	sub	local06, #76
279ec     48 00 90 AD |  if_e	jmp	#LR__3280
279f0     4C 30 06 F1 | 	add	local06, #76
279f4     18 33 02 FB | 	rdlong	local07, local06
279f8     19 2B 02 F6 | 	mov	local03, local07
279fc     13 32 46 F7 | 	zerox	local07, #19
27a00     14 2A 46 F0 | 	shr	local03, #20
27a04     02 2A 66 F0 | 	shl	local03, #2
27a08     ED 2A 02 F1 | 	add	local03, __methods__
27a0c     15 2B 02 FB | 	rdlong	local03, local03
27a10     17 31 02 F6 | 	mov	local06, local05
27a14     02 30 66 F0 | 	shl	local06, #2
27a18     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27a1c     F3 30 02 F1 | 	add	local06, ptr___system__dat__
27a20     18 13 02 FB | 	rdlong	arg01, local06
27a24     F2 30 02 F6 | 	mov	local06, objptr
27a28     19 E5 01 F6 | 	mov	objptr, local07
27a2c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27a30     2D 2A 62 FD | 	call	local03
27a34     18 E5 01 F6 | 	mov	objptr, local06
27a38                 | LR__3280
27a38     17 35 02 F6 | 	mov	local08, local05
27a3c     02 34 66 F0 | 	shl	local08, #2
27a40     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27a44     F3 34 02 F1 | 	add	local08, ptr___system__dat__
27a48     1A 29 62 FC | 	wrlong	local02, local08
27a4c     00 28 0E F2 | 	cmp	local02, #0 wz
27a50     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27a54     18 00 90 5D |  if_ne	jmp	#LR__3281
27a58     02 2E 66 F0 | 	shl	local05, #2
27a5c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27a60     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
27a64     17 01 68 FC | 	wrlong	#0, local05
27a68     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27a6c     C4 00 90 FD | 	jmp	#LR__3284
27a70                 | LR__3281
27a70     17 37 02 F6 | 	mov	local09, local05
27a74     04 36 66 F0 | 	shl	local09, #4
27a78     24 E6 05 F1 | 	add	ptr___system__dat__, #36
27a7c     F3 36 02 F1 | 	add	local09, ptr___system__dat__
27a80     1B 13 02 F6 | 	mov	arg01, local09
27a84     13 15 02 F6 | 	mov	arg02, local01
27a88     10 16 06 F6 | 	mov	arg03, #16
27a8c     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
27a90     9C 4F B0 FD | 	call	#__system__strncpy
27a94     48 28 06 F1 | 	add	local02, #72
27a98     14 35 0A FB | 	rdlong	local08, local02 wz
27a9c     48 28 86 F1 | 	sub	local02, #72
27aa0     7C 00 90 AD |  if_e	jmp	#LR__3283
27aa4     48 28 06 F1 | 	add	local02, #72
27aa8     14 35 02 FB | 	rdlong	local08, local02
27aac     1A 39 02 F6 | 	mov	local10, local08
27ab0     13 34 46 F7 | 	zerox	local08, #19
27ab4     14 38 46 F0 | 	shr	local10, #20
27ab8     02 38 66 F0 | 	shl	local10, #2
27abc     ED 38 02 F1 | 	add	local10, __methods__
27ac0     1C 39 02 FB | 	rdlong	local10, local10
27ac4     1B 13 02 F6 | 	mov	arg01, local09
27ac8     F2 3A 02 F6 | 	mov	local11, objptr
27acc     1A E5 01 F6 | 	mov	objptr, local08
27ad0     2D 38 62 FD | 	call	local10
27ad4     1D E5 01 F6 | 	mov	objptr, local11
27ad8     FD 12 0A F6 | 	mov	arg01, result1 wz
27adc     40 00 90 AD |  if_e	jmp	#LR__3282
27ae0     17 35 02 F6 | 	mov	local08, local05
27ae4     02 34 66 F0 | 	shl	local08, #2
27ae8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27aec     F3 34 02 F1 | 	add	local08, ptr___system__dat__
27af0     1A 01 68 FC | 	wrlong	#0, local08
27af4     02 2E 66 F0 | 	shl	local05, #2
27af8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
27afc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
27b00     17 01 68 FC | 	wrlong	#0, local05
27b04     09 13 6A F6 | 	neg	arg01, arg01 wz
27b08     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
27b0c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27b10     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27b14     01 FA 65 56 |  if_ne	neg	result1, #1
27b18     00 FA 05 A6 |  if_e	mov	result1, #0
27b1c     18 00 90 FD | 	jmp	#LR__3285
27b20                 | LR__3282
27b20                 | LR__3283
27b20     02 2E 66 F0 | 	shl	local05, #2
27b24     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27b28     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
27b2c     17 37 62 FC | 	wrlong	local09, local05
27b30     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27b34                 | LR__3284
27b34     00 FA 05 F6 | 	mov	result1, #0
27b38                 | LR__3285
27b38     A7 F0 03 F6 | 	mov	ptra, fp
27b3c     B2 00 A0 FD | 	call	#popregs_
27b40                 | __system___mount_ret
27b40     2D 00 64 FD | 	ret
27b44                 | 
27b44                 | __system___chdir
27b44     00 4A 05 F6 | 	mov	COUNT_, #0
27b48     A8 00 A0 FD | 	call	#pushregs_
27b4c     40 F0 07 F1 | 	add	ptra, #64
27b50     04 4E 05 F1 | 	add	fp, #4
27b54     A7 12 62 FC | 	wrlong	arg01, fp
27b58     04 4E 05 F1 | 	add	fp, #4
27b5c     A7 14 02 F6 | 	mov	arg02, fp
27b60     08 4E 85 F1 | 	sub	fp, #8
27b64     6C 4B B0 FD | 	call	#__system__stat
27b68     3C 4E 05 F1 | 	add	fp, #60
27b6c     A7 FA 61 FC | 	wrlong	result1, fp
27b70     3C 4E 85 F1 | 	sub	fp, #60
27b74     00 FA 0D F2 | 	cmp	result1, #0 wz
27b78     3C 4E 05 51 |  if_ne	add	fp, #60
27b7c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
27b80     3C 4E 85 51 |  if_ne	sub	fp, #60
27b84     BC 00 90 5D |  if_ne	jmp	#LR__3292
27b88     10 4E 05 F1 | 	add	fp, #16
27b8c     A7 12 02 FB | 	rdlong	arg01, fp
27b90     10 4E 85 F1 | 	sub	fp, #16
27b94     78 00 00 FF 
27b98     00 12 06 F5 | 	and	arg01, ##61440
27b9c     08 00 00 FF 
27ba0     00 12 0E F2 | 	cmp	arg01, ##4096 wz
27ba4     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
27ba8     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
27bac     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
27bb0     01 FA 65 56 |  if_ne	neg	result1, #1
27bb4     8C 00 90 5D |  if_ne	jmp	#LR__3292
27bb8     04 4E 05 F1 | 	add	fp, #4
27bbc     A7 16 02 FB | 	rdlong	arg03, fp
27bc0     04 4E 85 F1 | 	sub	fp, #4
27bc4     0B 17 C2 FA | 	rdbyte	arg03, arg03
27bc8     2F 16 0E F2 | 	cmp	arg03, #47 wz
27bcc     24 00 90 5D |  if_ne	jmp	#LR__3290
27bd0     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27bd4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27bd8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27bdc     04 4E 05 F1 | 	add	fp, #4
27be0     A7 14 02 FB | 	rdlong	arg02, fp
27be4     04 4E 85 F1 | 	sub	fp, #4
27be8     00 17 06 F6 | 	mov	arg03, #256
27bec     40 4E B0 FD | 	call	#__system__strncpy
27bf0     4C 00 90 FD | 	jmp	#LR__3291
27bf4                 | LR__3290
27bf4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
27bf8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27bfc     38 4E 05 F1 | 	add	fp, #56
27c00     A7 12 62 FC | 	wrlong	arg01, fp
27c04     38 4E 85 F1 | 	sub	fp, #56
27c08     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
27c0c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
27c10     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27c14     00 17 06 F6 | 	mov	arg03, #256
27c18     14 4E B0 FD | 	call	#__system__strncpy
27c1c     38 4E 05 F1 | 	add	fp, #56
27c20     A7 12 02 FB | 	rdlong	arg01, fp
27c24     34 4E 85 F1 | 	sub	fp, #52
27c28     A7 14 02 FB | 	rdlong	arg02, fp
27c2c     04 4E 85 F1 | 	sub	fp, #4
27c30     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27c34     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
27c38     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27c3c     10 00 B0 FD | 	call	#__system____getvfsforfile
27c40                 | LR__3291
27c40     00 FA 05 F6 | 	mov	result1, #0
27c44                 | LR__3292
27c44     A7 F0 03 F6 | 	mov	ptra, fp
27c48     B2 00 A0 FD | 	call	#popregs_
27c4c                 | __system___chdir_ret
27c4c     2D 00 64 FD | 	ret
27c50                 | 
27c50                 | __system____getvfsforfile
27c50     0E 4A 05 F6 | 	mov	COUNT_, #14
27c54     A8 00 A0 FD | 	call	#pushregs_
27c58     09 27 02 F6 | 	mov	local01, arg01
27c5c     0A 29 02 F6 | 	mov	local02, arg02
27c60     0B 2B 02 F6 | 	mov	local03, arg03
27c64     97 10 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
27c68                 | LR__3300
27c68     14 FB C1 FA | 	rdbyte	result1, local02
27c6c     2F FA 0D F2 | 	cmp	result1, #47 wz
27c70     01 28 06 A1 |  if_e	add	local02, #1
27c74     14 2D C2 AA |  if_e	rdbyte	local04, local02
27c78     01 28 86 A1 |  if_e	sub	local02, #1
27c7c     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
27c80     01 28 06 A1 |  if_e	add	local02, #1
27c84     E0 FF 9F AD |  if_e	jmp	#LR__3300
27c88                 | LR__3301
27c88     14 2D C2 FA | 	rdbyte	local04, local02
27c8c     2F 2C 0E F2 | 	cmp	local04, #47 wz
27c90     14 00 90 5D |  if_ne	jmp	#LR__3302
27c94     13 13 02 F6 | 	mov	arg01, local01
27c98     14 15 02 F6 | 	mov	arg02, local02
27c9c     00 17 06 F6 | 	mov	arg03, #256
27ca0     8C 4D B0 FD | 	call	#__system__strncpy
27ca4     7C 00 90 FD | 	jmp	#LR__3304
27ca8                 | LR__3302
27ca8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27cac     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
27cb0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27cb4     13 13 02 F6 | 	mov	arg01, local01
27cb8     00 17 06 F6 | 	mov	arg03, #256
27cbc     70 4D B0 FD | 	call	#__system__strncpy
27cc0     14 2D CA FA | 	rdbyte	local04, local02 wz
27cc4     5C 00 90 AD |  if_e	jmp	#LR__3303
27cc8     14 2D C2 FA | 	rdbyte	local04, local02
27ccc     2E 2C 0E F2 | 	cmp	local04, #46 wz
27cd0     01 28 06 A1 |  if_e	add	local02, #1
27cd4     14 2F C2 AA |  if_e	rdbyte	local05, local02
27cd8     01 28 86 A1 |  if_e	sub	local02, #1
27cdc     17 31 02 A6 |  if_e	mov	local06, local05
27ce0     07 30 4E A7 |  if_e	zerox	local06, #7 wz
27ce4     3C 00 90 AD |  if_e	jmp	#LR__3303
27ce8     13 2F C2 FA | 	rdbyte	local05, local01
27cec     2F 2E 0E F2 | 	cmp	local05, #47 wz
27cf0     01 26 06 A1 |  if_e	add	local01, #1
27cf4     13 2D C2 AA |  if_e	rdbyte	local04, local01
27cf8     01 26 86 A1 |  if_e	sub	local01, #1
27cfc     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
27d00     B7 01 00 5F 
27d04     C4 15 06 56 |  if_ne	mov	arg02, ##@LR__5430
27d08     13 13 02 56 |  if_ne	mov	arg01, local01
27d0c     00 17 06 56 |  if_ne	mov	arg03, #256
27d10     68 4D B0 5D |  if_ne	call	#__system__strncat
27d14     13 13 02 F6 | 	mov	arg01, local01
27d18     14 15 02 F6 | 	mov	arg02, local02
27d1c     00 17 06 F6 | 	mov	arg03, #256
27d20     58 4D B0 FD | 	call	#__system__strncat
27d24                 | LR__3303
27d24                 | LR__3304
27d24     13 13 02 F6 | 	mov	arg01, local01
27d28     10 4F B0 FD | 	call	#__system___normalizeName
27d2c     13 2D CA FA | 	rdbyte	local04, local01 wz
27d30     1C 00 90 AD |  if_e	jmp	#LR__3305
27d34     13 2D C2 FA | 	rdbyte	local04, local01
27d38     2F 2C 0E F2 | 	cmp	local04, #47 wz
27d3c     01 26 06 A1 |  if_e	add	local01, #1
27d40     13 31 C2 AA |  if_e	rdbyte	local06, local01
27d44     01 26 86 A1 |  if_e	sub	local01, #1
27d48     00 30 4E A2 |  if_e	cmps	local06, #0 wz
27d4c     18 00 90 5D |  if_ne	jmp	#LR__3306
27d50                 | LR__3305
27d50     01 00 00 FF 
27d54     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
27d58     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
27d5c     01 00 00 FF 
27d60     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
27d64     EC 01 90 FD | 	jmp	#LR__3320
27d68                 | LR__3306
27d68     00 32 06 F6 | 	mov	local07, #0
27d6c                 | LR__3307
27d6c     04 32 56 F2 | 	cmps	local07, #4 wc
27d70     CC 01 90 3D |  if_ae	jmp	#LR__3319
27d74     19 31 02 F6 | 	mov	local06, local07
27d78     02 30 66 F0 | 	shl	local06, #2
27d7c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27d80     F3 30 02 F1 | 	add	local06, ptr___system__dat__
27d84     18 31 0A FB | 	rdlong	local06, local06 wz
27d88     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27d8c     A8 01 90 AD |  if_e	jmp	#LR__3318
27d90     19 2D 02 F6 | 	mov	local04, local07
27d94     02 2C 66 F0 | 	shl	local04, #2
27d98     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27d9c     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
27da0     16 13 02 FB | 	rdlong	arg01, local04
27da4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27da8     09 35 02 F6 | 	mov	local08, arg01
27dac     97 06 48 FB | 	callpa	#(@LR__3309-@LR__3308)>>2,fcache_load_ptr_
27db0                 | LR__3308
27db0     1A FB C9 FA | 	rdbyte	result1, local08 wz
27db4     01 34 06 51 |  if_ne	add	local08, #1
27db8     F4 FF 9F 5D |  if_ne	jmp	#LR__3308
27dbc                 | LR__3309
27dbc     09 35 82 F1 | 	sub	local08, arg01
27dc0     1A 37 02 F6 | 	mov	local09, local08
27dc4     1B 2D 02 F6 | 	mov	local04, local09
27dc8     13 2D 02 F1 | 	add	local04, local01
27dcc     16 31 C2 FA | 	rdbyte	local06, local04
27dd0     2F 30 0E F2 | 	cmp	local06, #47 wz
27dd4     1B 39 02 56 |  if_ne	mov	local10, local09
27dd8     13 39 02 51 |  if_ne	add	local10, local01
27ddc     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
27de0     54 01 90 5D |  if_ne	jmp	#LR__3317
27de4     19 17 02 F6 | 	mov	arg03, local07
27de8     02 16 66 F0 | 	shl	arg03, #2
27dec     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27df0     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
27df4     0B 15 02 FB | 	rdlong	arg02, arg03
27df8     1B 17 02 F6 | 	mov	arg03, local09
27dfc     13 13 02 F6 | 	mov	arg01, local01
27e00     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27e04     D4 4C B0 FD | 	call	#__system__strncmp
27e08     00 FA 4D F2 | 	cmps	result1, #0 wz
27e0c     28 01 90 5D |  if_ne	jmp	#LR__3317
27e10     19 3B 02 F6 | 	mov	local11, local07
27e14     02 3A 66 F0 | 	shl	local11, #2
27e18     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27e1c     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
27e20     1D 3D 02 FB | 	rdlong	local12, local11
27e24     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27e28     97 22 48 FB | 	callpa	#(@LR__3311-@LR__3310)>>2,fcache_load_ptr_
27e2c                 | LR__3310
27e2c     1B 31 02 F6 | 	mov	local06, local09
27e30     01 30 06 F1 | 	add	local06, #1
27e34     13 31 02 F1 | 	add	local06, local01
27e38     18 3B C2 FA | 	rdbyte	local11, local06
27e3c     2E 3A 0E F2 | 	cmp	local11, #46 wz
27e40     2C 00 90 5D |  if_ne	jmp	#LR__3312
27e44     1B 3B 02 F6 | 	mov	local11, local09
27e48     02 3A 06 F1 | 	add	local11, #2
27e4c     13 3B 02 F1 | 	add	local11, local01
27e50     1D 39 C2 FA | 	rdbyte	local10, local11
27e54     2F 38 0E F2 | 	cmp	local10, #47 wz
27e58     1B 3F 02 56 |  if_ne	mov	local13, local09
27e5c     02 3E 06 51 |  if_ne	add	local13, #2
27e60     13 3F 02 51 |  if_ne	add	local13, local01
27e64     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
27e68     01 36 06 A1 |  if_e	add	local09, #1
27e6c     BC FF 9F AD |  if_e	jmp	#LR__3310
27e70                 | LR__3311
27e70                 | LR__3312
27e70     00 2A 0E F2 | 	cmp	local03, #0 wz
27e74     15 13 02 56 |  if_ne	mov	arg01, local03
27e78     13 15 02 56 |  if_ne	mov	arg02, local01
27e7c     00 17 06 56 |  if_ne	mov	arg03, #256
27e80     AC 4B B0 5D |  if_ne	call	#__system__strncpy
27e84     13 15 02 F6 | 	mov	arg02, local01
27e88     1B 15 02 F1 | 	add	arg02, local09
27e8c     01 14 06 F1 | 	add	arg02, #1
27e90     13 13 02 F6 | 	mov	arg01, local01
27e94     D4 F5 BF FD | 	call	#__system____builtin_strcpy
27e98     13 13 02 F6 | 	mov	arg01, local01
27e9c     09 35 02 F6 | 	mov	local08, arg01
27ea0     97 06 48 FB | 	callpa	#(@LR__3314-@LR__3313)>>2,fcache_load_ptr_
27ea4                 | LR__3313
27ea4     1A FB C9 FA | 	rdbyte	result1, local08 wz
27ea8     01 34 06 51 |  if_ne	add	local08, #1
27eac     F4 FF 9F 5D |  if_ne	jmp	#LR__3313
27eb0                 | LR__3314
27eb0     09 35 82 F1 | 	sub	local08, arg01
27eb4     1A 37 02 F6 | 	mov	local09, local08
27eb8                 | LR__3315
27eb8     01 36 56 F2 | 	cmps	local09, #1 wc
27ebc     70 00 90 CD |  if_b	jmp	#LR__3316
27ec0     1B 2D 02 F6 | 	mov	local04, local09
27ec4     13 2D 02 F1 | 	add	local04, local01
27ec8     16 3B C2 FA | 	rdbyte	local11, local04
27ecc     2F 3A 0E F2 | 	cmp	local11, #47 wz
27ed0     1B 3B 02 A6 |  if_e	mov	local11, local09
27ed4     13 3B 02 A1 |  if_e	add	local11, local01
27ed8     1D 01 48 AC |  if_e	wrbyte	#0, local11
27edc     01 36 86 A1 |  if_e	sub	local09, #1
27ee0     D4 FF 9F AD |  if_e	jmp	#LR__3315
27ee4     1B 2D 02 F6 | 	mov	local04, local09
27ee8     13 2D 02 F1 | 	add	local04, local01
27eec     16 3B C2 FA | 	rdbyte	local11, local04
27ef0     2E 3A 0E F2 | 	cmp	local11, #46 wz
27ef4     38 00 90 5D |  if_ne	jmp	#LR__3316
27ef8     02 36 56 F2 | 	cmps	local09, #2 wc
27efc     30 00 90 CD |  if_b	jmp	#LR__3316
27f00     1B 41 02 F6 | 	mov	local14, local09
27f04     01 40 86 F1 | 	sub	local14, #1
27f08     13 41 02 F1 | 	add	local14, local01
27f0c     20 2F C2 FA | 	rdbyte	local05, local14
27f10     2F 2E 0E F2 | 	cmp	local05, #47 wz
27f14     18 00 90 5D |  if_ne	jmp	#LR__3316
27f18     1B 2D 02 F6 | 	mov	local04, local09
27f1c     01 2C 86 F1 | 	sub	local04, #1
27f20     13 2D 02 F1 | 	add	local04, local01
27f24     16 01 48 FC | 	wrbyte	#0, local04
27f28     02 36 86 F1 | 	sub	local09, #2
27f2c     88 FF 9F FD | 	jmp	#LR__3315
27f30                 | LR__3316
27f30     1E FB 01 F6 | 	mov	result1, local12
27f34     1C 00 90 FD | 	jmp	#LR__3320
27f38                 | LR__3317
27f38                 | LR__3318
27f38     01 32 06 F1 | 	add	local07, #1
27f3c     2C FE 9F FD | 	jmp	#LR__3307
27f40                 | LR__3319
27f40     02 00 00 FF 
27f44     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
27f48     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27f4c     02 00 00 FF 
27f50     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
27f54                 | LR__3320
27f54     A7 F0 03 F6 | 	mov	ptra, fp
27f58     B2 00 A0 FD | 	call	#popregs_
27f5c                 | __system____getvfsforfile_ret
27f5c     2D 00 64 FD | 	ret
27f60                 | 
27f60                 | __system___basic_open
27f60     05 4A 05 F6 | 	mov	COUNT_, #5
27f64     A8 00 A0 FD | 	call	#pushregs_
27f68     0A 27 02 F6 | 	mov	local01, arg02
27f6c     0B 29 02 F6 | 	mov	local02, arg03
27f70     0C 2B 02 F6 | 	mov	local03, arg04
27f74     00 2C 06 F6 | 	mov	local04, #0
27f78     8C 4A B0 FD | 	call	#__system____getftab
27f7c     FD 2E 0A F6 | 	mov	local05, result1 wz
27f80     18 00 90 5D |  if_ne	jmp	#LR__3330
27f84     EE 12 02 F6 | 	mov	arg01, abortchain
27f88     0C 14 06 F6 | 	mov	arg02, #12
27f8c     01 16 06 F6 | 	mov	arg03, #1
27f90     DA 00 A0 FD | 	call	#__longjmp
27f94     01 FA 65 F6 | 	neg	result1, #1
27f98     14 01 90 FD | 	jmp	#LR__3339
27f9c                 | LR__3330
27f9c     08 2E 06 F1 | 	add	local05, #8
27fa0     17 FB 09 FB | 	rdlong	result1, local05 wz
27fa4     08 2E 86 F1 | 	sub	local05, #8
27fa8     17 13 02 56 |  if_ne	mov	arg01, local05
27fac     AC 41 B0 5D |  if_ne	call	#__system___closeraw
27fb0     00 26 0E F2 | 	cmp	local01, #0 wz
27fb4     00 28 0E A2 |  if_e	cmp	local02, #0 wz
27fb8     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
27fbc     3C 00 90 AD |  if_e	jmp	#LR__3332
27fc0     0C 12 06 F6 | 	mov	arg01, #12
27fc4     94 36 B0 FD | 	call	#__system___gc_alloc_managed
27fc8     FD 2C 0A F6 | 	mov	local04, result1 wz
27fcc     18 00 90 5D |  if_ne	jmp	#LR__3331
27fd0     EE 12 02 F6 | 	mov	arg01, abortchain
27fd4     07 14 06 F6 | 	mov	arg02, #7
27fd8     01 16 06 F6 | 	mov	arg03, #1
27fdc     DA 00 A0 FD | 	call	#__longjmp
27fe0     01 FA 65 F6 | 	neg	result1, #1
27fe4     C8 00 90 FD | 	jmp	#LR__3339
27fe8                 | LR__3331
27fe8     16 01 68 FC | 	wrlong	#0, local04
27fec     04 2C 06 F1 | 	add	local04, #4
27ff0     16 01 68 FC | 	wrlong	#0, local04
27ff4     04 2C 86 F1 | 	sub	local04, #4
27ff8     17 2D 62 FC | 	wrlong	local04, local05
27ffc                 | LR__3332
27ffc     00 26 0E F2 | 	cmp	local01, #0 wz
28000     20 00 90 AD |  if_e	jmp	#LR__3333
28004     16 27 62 FC | 	wrlong	local01, local04
28008     16 FB 01 F6 | 	mov	result1, local04
2800c     00 40 05 FF 
28010     00 FA 45 F5 | 	or	result1, ##176160768
28014     1C 2E 06 F1 | 	add	local05, #28
28018     17 FB 61 FC | 	wrlong	result1, local05
2801c     1C 2E 86 F1 | 	sub	local05, #28
28020     0C 00 90 FD | 	jmp	#LR__3334
28024                 | LR__3333
28024     1C 2E 06 F1 | 	add	local05, #28
28028     17 01 68 FC | 	wrlong	#0, local05
2802c     1C 2E 86 F1 | 	sub	local05, #28
28030                 | LR__3334
28030     00 28 0E F2 | 	cmp	local02, #0 wz
28034     28 00 90 AD |  if_e	jmp	#LR__3335
28038     04 2C 06 F1 | 	add	local04, #4
2803c     16 29 62 FC | 	wrlong	local02, local04
28040     04 2C 86 F1 | 	sub	local04, #4
28044     16 FB 01 F6 | 	mov	result1, local04
28048     00 48 05 FF 
2804c     00 FA 45 F5 | 	or	result1, ##177209344
28050     20 2E 06 F1 | 	add	local05, #32
28054     17 FB 61 FC | 	wrlong	result1, local05
28058     20 2E 86 F1 | 	sub	local05, #32
2805c     0C 00 90 FD | 	jmp	#LR__3336
28060                 | LR__3335
28060     20 2E 06 F1 | 	add	local05, #32
28064     17 01 68 FC | 	wrlong	#0, local05
28068     20 2E 86 F1 | 	sub	local05, #32
2806c                 | LR__3336
2806c     00 2A 0E F2 | 	cmp	local03, #0 wz
28070     24 00 90 AD |  if_e	jmp	#LR__3337
28074     08 2C 06 F1 | 	add	local04, #8
28078     16 2B 62 FC | 	wrlong	local03, local04
2807c     08 2C 86 F1 | 	sub	local04, #8
28080     00 50 05 FF 
28084     00 2C 46 F5 | 	or	local04, ##178257920
28088     24 2E 06 F1 | 	add	local05, #36
2808c     17 2D 62 FC | 	wrlong	local04, local05
28090     24 2E 86 F1 | 	sub	local05, #36
28094     0C 00 90 FD | 	jmp	#LR__3338
28098                 | LR__3337
28098     24 2E 06 F1 | 	add	local05, #36
2809c     17 01 68 FC | 	wrlong	#0, local05
280a0     24 2E 86 F1 | 	sub	local05, #36
280a4                 | LR__3338
280a4     08 2E 06 F1 | 	add	local05, #8
280a8     17 0F 68 FC | 	wrlong	#7, local05
280ac     00 FA 05 F6 | 	mov	result1, #0
280b0                 | LR__3339
280b0     A7 F0 03 F6 | 	mov	ptra, fp
280b4     B2 00 A0 FD | 	call	#popregs_
280b8                 | __system___basic_open_ret
280b8     2D 00 64 FD | 	ret
280bc                 | 
280bc                 | __system___basic_open_string
280bc     04 4A 05 F6 | 	mov	COUNT_, #4
280c0     A8 00 A0 FD | 	call	#pushregs_
280c4     0A 27 02 F6 | 	mov	local01, arg02
280c8     0B 29 02 F6 | 	mov	local02, arg03
280cc     38 49 B0 FD | 	call	#__system____getftab
280d0     FD 2A 0A F6 | 	mov	local03, result1 wz
280d4     18 00 90 5D |  if_ne	jmp	#LR__3340
280d8     EE 12 02 F6 | 	mov	arg01, abortchain
280dc     0C 14 06 F6 | 	mov	arg02, #12
280e0     01 16 06 F6 | 	mov	arg03, #1
280e4     DA 00 A0 FD | 	call	#__longjmp
280e8     01 FA 65 F6 | 	neg	result1, #1
280ec     5C 00 90 FD | 	jmp	#LR__3342
280f0                 | LR__3340
280f0     08 2A 06 F1 | 	add	local03, #8
280f4     15 19 0A FB | 	rdlong	arg04, local03 wz
280f8     08 2A 86 F1 | 	sub	local03, #8
280fc     15 13 02 56 |  if_ne	mov	arg01, local03
28100     58 40 B0 5D |  if_ne	call	#__system___closeraw
28104     13 15 02 F6 | 	mov	arg02, local01
28108     14 17 02 F6 | 	mov	arg03, local02
2810c     15 13 02 F6 | 	mov	arg01, local03
28110     B6 19 06 F6 | 	mov	arg04, #438
28114     40 3D B0 FD | 	call	#__system___openraw
28118     FD 2C 02 F6 | 	mov	local04, result1
2811c     00 2C 56 F2 | 	cmps	local04, #0 wc
28120     24 00 90 3D |  if_ae	jmp	#LR__3341
28124     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28128     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2812c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28130     EE 12 02 F6 | 	mov	arg01, abortchain
28134     FD 14 02 FB | 	rdlong	arg02, result1
28138     01 16 06 F6 | 	mov	arg03, #1
2813c     DA 00 A0 FD | 	call	#__longjmp
28140     01 FA 65 F6 | 	neg	result1, #1
28144     04 00 90 FD | 	jmp	#LR__3342
28148                 | LR__3341
28148     16 FB 01 F6 | 	mov	result1, local04
2814c                 | LR__3342
2814c     A7 F0 03 F6 | 	mov	ptra, fp
28150     B2 00 A0 FD | 	call	#popregs_
28154                 | __system___basic_open_string_ret
28154     2D 00 64 FD | 	ret
28158                 | 
28158                 | __system___basic_print_char
28158     03 4A 05 F6 | 	mov	COUNT_, #3
2815c     A8 00 A0 FD | 	call	#pushregs_
28160     0A 27 02 F6 | 	mov	local01, arg02
28164     44 50 B0 FD | 	call	#__system___gettxfunc
28168     FD 28 0A F6 | 	mov	local02, result1 wz
2816c     00 FA 05 A6 |  if_e	mov	result1, #0
28170     30 00 90 AD |  if_e	jmp	#LR__3350
28174     14 2B 02 F6 | 	mov	local03, local02
28178     13 28 46 F7 | 	zerox	local02, #19
2817c     14 2A 46 F0 | 	shr	local03, #20
28180     02 2A 66 F0 | 	shl	local03, #2
28184     ED 2A 02 F1 | 	add	local03, __methods__
28188     15 2B 02 FB | 	rdlong	local03, local03
2818c     13 13 02 F6 | 	mov	arg01, local01
28190     F2 26 02 F6 | 	mov	local01, objptr
28194     14 E5 01 F6 | 	mov	objptr, local02
28198     2D 2A 62 FD | 	call	local03
2819c     13 E5 01 F6 | 	mov	objptr, local01
281a0     01 FA 05 F6 | 	mov	result1, #1
281a4                 | LR__3350
281a4     A7 F0 03 F6 | 	mov	ptra, fp
281a8     B2 00 A0 FD | 	call	#popregs_
281ac                 | __system___basic_print_char_ret
281ac     2D 00 64 FD | 	ret
281b0                 | 
281b0                 | __system___basic_print_string
281b0     03 4A 05 F6 | 	mov	COUNT_, #3
281b4     A8 00 A0 FD | 	call	#pushregs_
281b8     0A 27 02 F6 | 	mov	local01, arg02
281bc     0B 29 02 F6 | 	mov	local02, arg03
281c0     E8 4F B0 FD | 	call	#__system___gettxfunc
281c4     FD 2A 0A F6 | 	mov	local03, result1 wz
281c8     00 FA 05 A6 |  if_e	mov	result1, #0
281cc     18 00 90 AD |  if_e	jmp	#LR__3360
281d0     00 26 0E F2 | 	cmp	local01, #0 wz
281d4     00 FA 05 A6 |  if_e	mov	result1, #0
281d8     15 13 02 56 |  if_ne	mov	arg01, local03
281dc     14 15 02 56 |  if_ne	mov	arg02, local02
281e0     13 17 02 56 |  if_ne	mov	arg03, local01
281e4     08 02 B0 5D |  if_ne	call	#__system___fmtstr
281e8                 | LR__3360
281e8     A7 F0 03 F6 | 	mov	ptra, fp
281ec     B2 00 A0 FD | 	call	#popregs_
281f0                 | __system___basic_print_string_ret
281f0     2D 00 64 FD | 	ret
281f4                 | 
281f4                 | __system___basic_print_integer
281f4     04 4A 05 F6 | 	mov	COUNT_, #4
281f8     A8 00 A0 FD | 	call	#pushregs_
281fc     0A 27 02 F6 | 	mov	local01, arg02
28200     0B 29 02 F6 | 	mov	local02, arg03
28204     0C 2B 02 F6 | 	mov	local03, arg04
28208     A0 4F B0 FD | 	call	#__system___gettxfunc
2820c     FD 2C 0A F6 | 	mov	local04, result1 wz
28210     00 FA 05 A6 |  if_e	mov	result1, #0
28214     16 13 02 56 |  if_ne	mov	arg01, local04
28218     14 15 02 56 |  if_ne	mov	arg02, local02
2821c     13 17 02 56 |  if_ne	mov	arg03, local01
28220     15 19 02 56 |  if_ne	mov	arg04, local03
28224     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
28228     A7 F0 03 F6 | 	mov	ptra, fp
2822c     B2 00 A0 FD | 	call	#popregs_
28230                 | __system___basic_print_integer_ret
28230     2D 00 64 FD | 	ret
28234                 | 
28234                 | __system___basic_print_unsigned
28234     03 4A 05 F6 | 	mov	COUNT_, #3
28238     A8 00 A0 FD | 	call	#pushregs_
2823c     0A 27 02 F6 | 	mov	local01, arg02
28240     0B 29 02 F6 | 	mov	local02, arg03
28244     0C 2B 02 F6 | 	mov	local03, arg04
28248     60 4F B0 FD | 	call	#__system___gettxfunc
2824c     FD 12 0A F6 | 	mov	arg01, result1 wz
28250     00 FA 05 A6 |  if_e	mov	result1, #0
28254     3A 28 26 54 |  if_ne	bith	local02, #58
28258     14 15 02 56 |  if_ne	mov	arg02, local02
2825c     13 17 02 56 |  if_ne	mov	arg03, local01
28260     15 19 02 56 |  if_ne	mov	arg04, local03
28264     74 02 B0 5D |  if_ne	call	#__system___fmtnum
28268     A7 F0 03 F6 | 	mov	ptra, fp
2826c     B2 00 A0 FD | 	call	#popregs_
28270                 | __system___basic_print_unsigned_ret
28270     2D 00 64 FD | 	ret
28274                 | 
28274                 | __system___basic_get_char
28274     03 4A 05 F6 | 	mov	COUNT_, #3
28278     A8 00 A0 FD | 	call	#pushregs_
2827c     70 4F B0 FD | 	call	#__system___getrxfunc
28280     FD 26 0A F6 | 	mov	local01, result1 wz
28284     01 FA 65 A6 |  if_e	neg	result1, #1
28288     28 00 90 AD |  if_e	jmp	#LR__3370
2828c     13 29 02 F6 | 	mov	local02, local01
28290     13 26 46 F7 | 	zerox	local01, #19
28294     14 28 46 F0 | 	shr	local02, #20
28298     02 28 66 F0 | 	shl	local02, #2
2829c     ED 28 02 F1 | 	add	local02, __methods__
282a0     14 29 02 FB | 	rdlong	local02, local02
282a4     F2 2A 02 F6 | 	mov	local03, objptr
282a8     13 E5 01 F6 | 	mov	objptr, local01
282ac     2D 28 62 FD | 	call	local02
282b0     15 E5 01 F6 | 	mov	objptr, local03
282b4                 | LR__3370
282b4     A7 F0 03 F6 | 	mov	ptra, fp
282b8     B2 00 A0 FD | 	call	#popregs_
282bc                 | __system___basic_get_char_ret
282bc     2D 00 64 FD | 	ret
282c0                 | 
282c0                 | __system___basic_put
282c0     04 4A 05 F6 | 	mov	COUNT_, #4
282c4     A8 00 A0 FD | 	call	#pushregs_
282c8     0D 27 02 F6 | 	mov	local01, arg05
282cc     13 19 02 FD | 	qmul	arg04, local01
282d0     09 29 02 F6 | 	mov	local02, arg01
282d4     0B 2B 02 F6 | 	mov	local03, arg03
282d8     00 14 0E F2 | 	cmp	arg02, #0 wz
282dc     01 14 86 51 |  if_ne	sub	arg02, #1
282e0     14 13 02 56 |  if_ne	mov	arg01, local02
282e4     00 16 06 56 |  if_ne	mov	arg03, #0
282e8     18 2C 62 FD | 	getqx	local04
282ec     60 45 B0 5D |  if_ne	call	#__system__lseek
282f0     15 15 02 F6 | 	mov	arg02, local03
282f4     16 17 02 F6 | 	mov	arg03, local04
282f8     14 13 02 F6 | 	mov	arg01, local02
282fc     9C 44 B0 FD | 	call	#__system__write
28300     FD 2C 02 F6 | 	mov	local04, result1
28304     01 2C 56 F2 | 	cmps	local04, #1 wc
28308     10 00 90 CD |  if_b	jmp	#LR__3380
2830c     16 91 02 F6 | 	mov	muldiva_, local04
28310     13 93 02 F6 | 	mov	muldivb_, local01
28314     BA 00 A0 FD | 	call	#divide_
28318     49 2D 02 F6 | 	mov	local04, muldivb_
2831c                 | LR__3380
2831c     16 FB 01 F6 | 	mov	result1, local04
28320     A7 F0 03 F6 | 	mov	ptra, fp
28324     B2 00 A0 FD | 	call	#popregs_
28328                 | __system___basic_put_ret
28328     2D 00 64 FD | 	ret
2832c                 | 
2832c                 | __system___basic_get
2832c     04 4A 05 F6 | 	mov	COUNT_, #4
28330     A8 00 A0 FD | 	call	#pushregs_
28334     0D 27 02 F6 | 	mov	local01, arg05
28338     13 19 02 FD | 	qmul	arg04, local01
2833c     09 29 02 F6 | 	mov	local02, arg01
28340     0B 2B 02 F6 | 	mov	local03, arg03
28344     00 14 0E F2 | 	cmp	arg02, #0 wz
28348     01 14 86 51 |  if_ne	sub	arg02, #1
2834c     14 13 02 56 |  if_ne	mov	arg01, local02
28350     00 16 06 56 |  if_ne	mov	arg03, #0
28354     18 2C 62 FD | 	getqx	local04
28358     F4 44 B0 5D |  if_ne	call	#__system__lseek
2835c     15 15 02 F6 | 	mov	arg02, local03
28360     16 17 02 F6 | 	mov	arg03, local04
28364     14 13 02 F6 | 	mov	arg01, local02
28368     6C 44 B0 FD | 	call	#__system__read
2836c     FD 2C 02 F6 | 	mov	local04, result1
28370     01 2C 56 F2 | 	cmps	local04, #1 wc
28374     10 00 90 CD |  if_b	jmp	#LR__3390
28378     16 91 02 F6 | 	mov	muldiva_, local04
2837c     13 93 02 F6 | 	mov	muldivb_, local01
28380     BA 00 A0 FD | 	call	#divide_
28384     49 2D 02 F6 | 	mov	local04, muldivb_
28388                 | LR__3390
28388     16 FB 01 F6 | 	mov	result1, local04
2838c     A7 F0 03 F6 | 	mov	ptra, fp
28390     B2 00 A0 FD | 	call	#popregs_
28394                 | __system___basic_get_ret
28394     2D 00 64 FD | 	ret
28398                 | 
28398                 | __system___fmtchar
28398     00 4A 05 F6 | 	mov	COUNT_, #0
2839c     A8 00 A0 FD | 	call	#pushregs_
283a0     10 F0 07 F1 | 	add	ptra, #16
283a4     04 4E 05 F1 | 	add	fp, #4
283a8     A7 12 62 FC | 	wrlong	arg01, fp
283ac     04 4E 05 F1 | 	add	fp, #4
283b0     A7 14 62 FC | 	wrlong	arg02, fp
283b4     04 4E 05 F1 | 	add	fp, #4
283b8     A7 16 62 FC | 	wrlong	arg03, fp
283bc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
283c0     A7 16 62 FC | 	wrlong	arg03, fp
283c4     08 4E 85 F1 | 	sub	fp, #8
283c8     A7 12 02 FB | 	rdlong	arg01, fp
283cc     04 4E 05 F1 | 	add	fp, #4
283d0     A7 14 02 FB | 	rdlong	arg02, fp
283d4     04 4E 05 F1 | 	add	fp, #4
283d8     A7 16 02 F6 | 	mov	arg03, fp
283dc     0C 4E 85 F1 | 	sub	fp, #12
283e0     0C 00 B0 FD | 	call	#__system___fmtstr
283e4     A7 F0 03 F6 | 	mov	ptra, fp
283e8     B2 00 A0 FD | 	call	#popregs_
283ec                 | __system___fmtchar_ret
283ec     2D 00 64 FD | 	ret
283f0                 | 
283f0                 | __system___fmtstr
283f0     09 4A 05 F6 | 	mov	COUNT_, #9
283f4     A8 00 A0 FD | 	call	#pushregs_
283f8     09 27 02 F6 | 	mov	local01, arg01
283fc     0A 29 02 F6 | 	mov	local02, arg02
28400     0B 2B 02 F6 | 	mov	local03, arg03
28404     14 19 E2 F8 | 	getbyte	arg04, local02, #0
28408     15 13 02 F6 | 	mov	arg01, local03
2840c     09 2D 02 F6 | 	mov	local04, arg01
28410     97 06 48 FB | 	callpa	#(@LR__3401-@LR__3400)>>2,fcache_load_ptr_
28414                 | LR__3400
28414     16 FB C9 FA | 	rdbyte	result1, local04 wz
28418     01 2C 06 51 |  if_ne	add	local04, #1
2841c     F4 FF 9F 5D |  if_ne	jmp	#LR__3400
28420                 | LR__3401
28420     09 2D 82 F1 | 	sub	local04, arg01
28424     00 18 0E F2 | 	cmp	arg04, #0 wz
28428     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
2842c     14 15 02 F6 | 	mov	arg02, local02
28430     16 17 02 F6 | 	mov	arg03, local04
28434     13 13 02 F6 | 	mov	arg01, local01
28438     02 18 06 F6 | 	mov	arg04, #2
2843c     BC 49 B0 FD | 	call	#__system___fmtpad
28440     FD 2E 02 F6 | 	mov	local05, result1
28444     00 2E 56 F2 | 	cmps	local05, #0 wc
28448     17 FB 01 C6 |  if_b	mov	result1, local05
2844c     80 00 90 CD |  if_b	jmp	#LR__3404
28450     01 2C 56 F2 | 	cmps	local04, #1 wc
28454     50 00 90 CD |  if_b	jmp	#LR__3403
28458     16 31 02 F6 | 	mov	local06, local04
2845c                 | LR__3402
2845c     13 33 02 F6 | 	mov	local07, local01
28460     13 35 02 F6 | 	mov	local08, local01
28464     13 32 46 F7 | 	zerox	local07, #19
28468     14 34 46 F0 | 	shr	local08, #20
2846c     02 34 66 F0 | 	shl	local08, #2
28470     ED 34 02 F1 | 	add	local08, __methods__
28474     1A 35 02 FB | 	rdlong	local08, local08
28478     15 13 C2 FA | 	rdbyte	arg01, local03
2847c     F2 36 02 F6 | 	mov	local09, objptr
28480     19 E5 01 F6 | 	mov	objptr, local07
28484     01 2A 06 F1 | 	add	local03, #1
28488     2D 34 62 FD | 	call	local08
2848c     1B E5 01 F6 | 	mov	objptr, local09
28490     FD 36 02 F6 | 	mov	local09, result1
28494     00 36 56 F2 | 	cmps	local09, #0 wc
28498     1B FB 01 C6 |  if_b	mov	result1, local09
2849c     30 00 90 CD |  if_b	jmp	#LR__3404
284a0     1B 2F 02 F1 | 	add	local05, local09
284a4     ED 31 6E FB | 	djnz	local06, #LR__3402
284a8                 | LR__3403
284a8     14 15 02 F6 | 	mov	arg02, local02
284ac     16 17 02 F6 | 	mov	arg03, local04
284b0     13 13 02 F6 | 	mov	arg01, local01
284b4     01 18 06 F6 | 	mov	arg04, #1
284b8     40 49 B0 FD | 	call	#__system___fmtpad
284bc     FD 36 02 F6 | 	mov	local09, result1
284c0     00 36 56 F2 | 	cmps	local09, #0 wc
284c4     1B FB 01 C6 |  if_b	mov	result1, local09
284c8     1B 2F 02 31 |  if_ae	add	local05, local09
284cc     17 FB 01 36 |  if_ae	mov	result1, local05
284d0                 | LR__3404
284d0     A7 F0 03 F6 | 	mov	ptra, fp
284d4     B2 00 A0 FD | 	call	#popregs_
284d8                 | __system___fmtstr_ret
284d8     2D 00 64 FD | 	ret
284dc                 | 
284dc                 | __system___fmtnum
284dc     0B 4A 05 F6 | 	mov	COUNT_, #11
284e0     A8 00 A0 FD | 	call	#pushregs_
284e4     09 27 02 F6 | 	mov	local01, arg01
284e8     0A 29 02 F6 | 	mov	local02, arg02
284ec     0B 2B 02 F6 | 	mov	local03, arg03
284f0     0C 2D 02 F6 | 	mov	local04, arg04
284f4     F8 2F 02 F6 | 	mov	local05, ptra
284f8     17 31 02 F6 | 	mov	local06, local05
284fc     00 32 06 F6 | 	mov	local07, #0
28500     14 35 02 F6 | 	mov	local08, local02
28504     10 34 46 F0 | 	shr	local08, #16
28508     3F 34 06 F5 | 	and	local08, #63
2850c     14 37 E2 F8 | 	getbyte	local09, local02, #0
28510     14 39 02 F6 | 	mov	local10, local02
28514     1A 38 46 F0 | 	shr	local10, #26
28518     03 38 06 F5 | 	and	local10, #3
2851c     1C 3B 02 F6 | 	mov	local11, local10
28520     01 34 56 F2 | 	cmps	local08, #1 wc
28524     44 F0 07 F1 | 	add	ptra, #68
28528     01 34 86 31 |  if_ae	sub	local08, #1
2852c     41 36 56 F2 | 	cmps	local09, #65 wc
28530     00 36 0E C2 |  if_b	cmp	local09, #0 wz
28534     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
28538     03 3A 0E F2 | 	cmp	local11, #3 wz
2853c     00 3A 06 A6 |  if_e	mov	local11, #0
28540     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
28544     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
28548     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
2854c     00 3A 0E F2 | 	cmp	local11, #0 wz
28550     4C 00 90 AD |  if_e	jmp	#LR__3413
28554     01 32 06 F6 | 	mov	local07, #1
28558     1B 35 0A F2 | 	cmp	local08, local09 wz
2855c     18 00 90 5D |  if_ne	jmp	#LR__3411
28560     05 34 6E FB | 	djnz	local08, #LR__3410
28564     13 13 02 F6 | 	mov	arg01, local01
28568     14 15 02 F6 | 	mov	arg02, local02
2856c     23 16 06 F6 | 	mov	arg03, #35
28570     24 FE BF FD | 	call	#__system___fmtchar
28574     88 00 90 FD | 	jmp	#LR__3417
28578                 | LR__3410
28578                 | LR__3411
28578     02 3A 0E F2 | 	cmp	local11, #2 wz
2857c     18 39 02 A6 |  if_e	mov	local10, local06
28580     01 30 06 A1 |  if_e	add	local06, #1
28584     1C 41 48 AC |  if_e	wrbyte	#32, local10
28588     14 00 90 AD |  if_e	jmp	#LR__3412
2858c     04 3A 0E F2 | 	cmp	local11, #4 wz
28590     18 5B 48 AC |  if_e	wrbyte	#45, local06
28594     01 30 06 A1 |  if_e	add	local06, #1
28598     18 57 48 5C |  if_ne	wrbyte	#43, local06
2859c     01 30 06 51 |  if_ne	add	local06, #1
285a0                 | LR__3412
285a0                 | LR__3413
285a0     18 13 02 F6 | 	mov	arg01, local06
285a4     15 15 02 F6 | 	mov	arg02, local03
285a8     16 17 02 F6 | 	mov	arg03, local04
285ac     1A 19 02 F6 | 	mov	arg04, local08
285b0     00 1A 06 F6 | 	mov	arg05, #0
285b4     1D 28 2E F4 | 	testbn	local02, #29 wz
285b8     01 1A 06 56 |  if_ne	mov	arg05, #1
285bc     04 49 B0 FD | 	call	#__system___uitoa
285c0     FD 32 02 F1 | 	add	local07, result1
285c4     1B 33 5A F2 | 	cmps	local07, local09 wcz
285c8     24 00 90 ED |  if_be	jmp	#LR__3416
285cc     97 0E 48 FB | 	callpa	#(@LR__3415-@LR__3414)>>2,fcache_load_ptr_
285d0                 | LR__3414
285d0     1B 39 02 F6 | 	mov	local10, local09
285d4     01 38 56 F2 | 	cmps	local10, #1 wc
285d8     01 36 86 F1 | 	sub	local09, #1
285dc     18 39 02 36 |  if_ae	mov	local10, local06
285e0     01 30 06 31 |  if_ae	add	local06, #1
285e4     1C 47 48 3C |  if_ae	wrbyte	#35, local10
285e8     E4 FF 9F 3D |  if_ae	jmp	#LR__3414
285ec                 | LR__3415
285ec     18 01 48 FC | 	wrbyte	#0, local06
285f0                 | LR__3416
285f0     13 13 02 F6 | 	mov	arg01, local01
285f4     14 15 02 F6 | 	mov	arg02, local02
285f8     17 17 02 F6 | 	mov	arg03, local05
285fc     F0 FD BF FD | 	call	#__system___fmtstr
28600                 | LR__3417
28600     A7 F0 03 F6 | 	mov	ptra, fp
28604     B2 00 A0 FD | 	call	#popregs_
28608                 | __system___fmtnum_ret
28608     2D 00 64 FD | 	ret
2860c                 | 
2860c                 | __system___fmtfloat
2860c     10 4A 05 F6 | 	mov	COUNT_, #16
28610     A8 00 A0 FD | 	call	#pushregs_
28614     24 F1 07 F1 | 	add	ptra, #292
28618     04 4E 05 F1 | 	add	fp, #4
2861c     A7 12 62 FC | 	wrlong	arg01, fp
28620     04 4E 05 F1 | 	add	fp, #4
28624     A7 14 62 FC | 	wrlong	arg02, fp
28628     04 4E 05 F1 | 	add	fp, #4
2862c     A7 16 62 FC | 	wrlong	arg03, fp
28630     04 4E 05 F1 | 	add	fp, #4
28634     A7 18 62 FC | 	wrlong	arg04, fp
28638     0C 4E 05 F1 | 	add	fp, #12
2863c     A7 14 68 FC | 	wrlong	#10, fp
28640     08 4E 05 F1 | 	add	fp, #8
28644     A7 00 68 FC | 	wrlong	#0, fp
28648     08 4E 05 F1 | 	add	fp, #8
2864c     A7 00 68 FC | 	wrlong	#0, fp
28650     08 4E 05 F1 | 	add	fp, #8
28654     A7 00 68 FC | 	wrlong	#0, fp
28658     04 4E 05 F1 | 	add	fp, #4
2865c     A7 04 68 FC | 	wrlong	#2, fp
28660     04 4E 05 F1 | 	add	fp, #4
28664     A7 00 68 FC | 	wrlong	#0, fp
28668     04 4E 05 F1 | 	add	fp, #4
2866c     A7 00 68 FC | 	wrlong	#0, fp
28670     04 4E 05 F1 | 	add	fp, #4
28674     A7 00 68 FC | 	wrlong	#0, fp
28678     04 4E 05 F1 | 	add	fp, #4
2867c     A7 00 68 FC | 	wrlong	#0, fp
28680     18 4E 05 F1 | 	add	fp, #24
28684     A7 00 68 FC | 	wrlong	#0, fp
28688     68 4E 05 F1 | 	add	fp, #104
2868c     A7 26 02 F6 | 	mov	local01, fp
28690     08 4E 85 F1 | 	sub	fp, #8
28694     A7 26 62 FC | 	wrlong	local01, fp
28698     04 4E 05 F1 | 	add	fp, #4
2869c     A7 26 62 FC | 	wrlong	local01, fp
286a0     BC 4E 85 F1 | 	sub	fp, #188
286a4     A7 26 02 FB | 	rdlong	local01, fp
286a8     10 26 46 F0 | 	shr	local01, #16
286ac     3F 26 06 F5 | 	and	local01, #63
286b0     B0 4E 05 F1 | 	add	fp, #176
286b4     A7 26 62 FC | 	wrlong	local01, fp
286b8     B0 4E 85 F1 | 	sub	fp, #176
286bc     A7 26 02 FB | 	rdlong	local01, fp
286c0     1C 26 46 F0 | 	shr	local01, #28
286c4     01 26 06 F5 | 	and	local01, #1
286c8     08 4F 05 F1 | 	add	fp, #264
286cc     A7 26 62 FC | 	wrlong	local01, fp
286d0     58 4E 85 F1 | 	sub	fp, #88
286d4     A7 26 0A FB | 	rdlong	local01, fp wz
286d8     B8 4E 85 F1 | 	sub	fp, #184
286dc     3C 00 90 5D |  if_ne	jmp	#LR__3421
286e0     10 4E 05 F1 | 	add	fp, #16
286e4     A7 26 02 FB | 	rdlong	local01, fp
286e8     10 4E 85 F1 | 	sub	fp, #16
286ec     61 26 0E F2 | 	cmp	local01, #97 wz
286f0     18 00 90 5D |  if_ne	jmp	#LR__3420
286f4     B8 4E 05 F1 | 	add	fp, #184
286f8     A7 1A 68 FC | 	wrlong	#13, fp
286fc     84 4E 85 F1 | 	sub	fp, #132
28700     A7 02 68 FC | 	wrlong	#1, fp
28704     34 4E 85 F1 | 	sub	fp, #52
28708     24 00 90 FD | 	jmp	#LR__3422
2870c                 | LR__3420
2870c     B8 4E 05 F1 | 	add	fp, #184
28710     A7 0C 68 FC | 	wrlong	#6, fp
28714     B8 4E 85 F1 | 	sub	fp, #184
28718     14 00 90 FD | 	jmp	#LR__3422
2871c                 | LR__3421
2871c     B8 4E 05 F1 | 	add	fp, #184
28720     A7 26 02 FB | 	rdlong	local01, fp
28724     01 26 86 F1 | 	sub	local01, #1
28728     A7 26 62 FC | 	wrlong	local01, fp
2872c     B8 4E 85 F1 | 	sub	fp, #184
28730                 | LR__3422
28730     08 4E 05 F1 | 	add	fp, #8
28734     A7 26 02 FB | 	rdlong	local01, fp
28738     16 26 46 F0 | 	shr	local01, #22
2873c     03 26 06 F5 | 	and	local01, #3
28740     04 4F 05 F1 | 	add	fp, #260
28744     A7 26 62 FC | 	wrlong	local01, fp
28748     04 4F 85 F1 | 	sub	fp, #260
2874c     A7 26 02 FB | 	rdlong	local01, fp
28750     1D 26 46 F0 | 	shr	local01, #29
28754     01 26 06 F5 | 	and	local01, #1
28758     B4 4E 05 F1 | 	add	fp, #180
2875c     A7 26 62 FC | 	wrlong	local01, fp
28760     B4 4E 85 F1 | 	sub	fp, #180
28764     A7 26 02 FB | 	rdlong	local01, fp
28768     13 27 EA F8 | 	getbyte	local01, local01, #1
2876c     60 4E 05 F1 | 	add	fp, #96
28770     A7 26 62 FC | 	wrlong	local01, fp
28774     60 4E 85 F1 | 	sub	fp, #96
28778     A7 26 02 FB | 	rdlong	local01, fp
2877c     13 27 E2 F8 | 	getbyte	local01, local01, #0
28780     64 4E 05 F1 | 	add	fp, #100
28784     A7 26 62 FC | 	wrlong	local01, fp
28788     00 26 06 F6 | 	mov	local01, #0
2878c     5C 4E 85 F1 | 	sub	fp, #92
28790     A7 1A 02 FB | 	rdlong	arg05, fp
28794     65 1A 0E F2 | 	cmp	arg05, #101 wz
28798     01 26 06 A6 |  if_e	mov	local01, #1
2879c     14 4E 05 F1 | 	add	fp, #20
287a0     A7 26 62 FC | 	wrlong	local01, fp
287a4     98 4E 05 F1 | 	add	fp, #152
287a8     A7 28 0A FB | 	rdlong	local02, fp wz
287ac     45 26 06 56 |  if_ne	mov	local01, #69
287b0     65 26 06 A6 |  if_e	mov	local01, #101
287b4     8C 4E 85 F1 | 	sub	fp, #140
287b8     A7 26 62 FC | 	wrlong	local01, fp
287bc     20 4E 85 F1 | 	sub	fp, #32
287c0     A7 26 02 FB | 	rdlong	local01, fp
287c4     10 4E 85 F1 | 	sub	fp, #16
287c8     61 26 0E F2 | 	cmp	local01, #97 wz
287cc     4C 00 90 5D |  if_ne	jmp	#LR__3423
287d0     24 4E 05 F1 | 	add	fp, #36
287d4     A7 02 68 FC | 	wrlong	#1, fp
287d8     98 4E 05 F1 | 	add	fp, #152
287dc     A7 28 0A FB | 	rdlong	local02, fp wz
287e0     50 26 06 56 |  if_ne	mov	local01, #80
287e4     70 26 06 A6 |  if_e	mov	local01, #112
287e8     8C 4E 85 F1 | 	sub	fp, #140
287ec     A7 26 62 FC | 	wrlong	local01, fp
287f0     14 4E 85 F1 | 	sub	fp, #20
287f4     A7 04 68 FC | 	wrlong	#2, fp
287f8     1C 4E 05 F1 | 	add	fp, #28
287fc     A7 02 68 FC | 	wrlong	#1, fp
28800     84 4E 05 F1 | 	add	fp, #132
28804     A7 28 0A FB | 	rdlong	local02, fp wz
28808     58 26 06 56 |  if_ne	mov	local01, #88
2880c     78 26 06 A6 |  if_e	mov	local01, #120
28810     7C 4E 85 F1 | 	sub	fp, #124
28814     A7 26 62 FC | 	wrlong	local01, fp
28818     40 4E 85 F1 | 	sub	fp, #64
2881c                 | LR__3423
2881c     10 4E 05 F1 | 	add	fp, #16
28820     A7 26 02 FB | 	rdlong	local01, fp
28824     10 4E 85 F1 | 	sub	fp, #16
28828     23 26 0E F2 | 	cmp	local01, #35 wz
2882c     3C 00 90 5D |  if_ne	jmp	#LR__3426
28830     48 4E 05 F1 | 	add	fp, #72
28834     A7 02 68 FC | 	wrlong	#1, fp
28838     C8 4E 05 F1 | 	add	fp, #200
2883c     A7 26 0A FB | 	rdlong	local01, fp wz
28840     10 4F 85 F1 | 	sub	fp, #272
28844     18 00 90 AD |  if_e	jmp	#LR__3424
28848     10 4E 05 F1 | 	add	fp, #16
2884c     A7 CC 68 FC | 	wrlong	#102, fp
28850     00 4F 05 F1 | 	add	fp, #256
28854     A7 00 68 FC | 	wrlong	#0, fp
28858     10 4F 85 F1 | 	sub	fp, #272
2885c     0C 00 90 FD | 	jmp	#LR__3425
28860                 | LR__3424
28860     10 4F 05 F1 | 	add	fp, #272
28864     A7 02 68 FC | 	wrlong	#1, fp
28868     10 4F 85 F1 | 	sub	fp, #272
2886c                 | LR__3425
2886c                 | LR__3426
2886c     08 4E 05 F1 | 	add	fp, #8
28870     A7 26 02 FB | 	rdlong	local01, fp
28874     1A 26 46 F0 | 	shr	local01, #26
28878     03 26 06 F5 | 	and	local01, #3
2887c     5C 4E 05 F1 | 	add	fp, #92
28880     A7 26 62 FC | 	wrlong	local01, fp
28884     58 4E 85 F1 | 	sub	fp, #88
28888     A7 FA 01 FB | 	rdlong	result1, fp
2888c     0C 4E 85 F1 | 	sub	fp, #12
28890     1F FA 4D F0 | 	shr	result1, #31 wz
28894     20 00 90 AD |  if_e	jmp	#LR__3427
28898     2C 4E 05 F1 | 	add	fp, #44
2889c     A7 5A 68 FC | 	wrlong	#45, fp
288a0     20 4E 85 F1 | 	sub	fp, #32
288a4     A7 FA 01 FB | 	rdlong	result1, fp
288a8     1F FA E5 F4 | 	bitnot	result1, #31
288ac     A7 FA 61 FC | 	wrlong	result1, fp
288b0     0C 4E 85 F1 | 	sub	fp, #12
288b4     3C 00 90 FD | 	jmp	#LR__3429
288b8                 | LR__3427
288b8     64 4E 05 F1 | 	add	fp, #100
288bc     A7 26 02 FB | 	rdlong	local01, fp
288c0     64 4E 85 F1 | 	sub	fp, #100
288c4     01 26 0E F2 | 	cmp	local01, #1 wz
288c8     2C 4E 05 A1 |  if_e	add	fp, #44
288cc     A7 56 68 AC |  if_e	wrlong	#43, fp
288d0     2C 4E 85 A1 |  if_e	sub	fp, #44
288d4     1C 00 90 AD |  if_e	jmp	#LR__3428
288d8     64 4E 05 F1 | 	add	fp, #100
288dc     A7 26 02 FB | 	rdlong	local01, fp
288e0     64 4E 85 F1 | 	sub	fp, #100
288e4     02 26 0E F2 | 	cmp	local01, #2 wz
288e8     2C 4E 05 A1 |  if_e	add	fp, #44
288ec     A7 40 68 AC |  if_e	wrlong	#32, fp
288f0     2C 4E 85 A1 |  if_e	sub	fp, #44
288f4                 | LR__3428
288f4                 | LR__3429
288f4     08 4E 05 F1 | 	add	fp, #8
288f8     A7 26 02 FB | 	rdlong	local01, fp
288fc     18 26 46 F0 | 	shr	local01, #24
28900     03 26 06 F5 | 	and	local01, #3
28904     3C 4E 05 F1 | 	add	fp, #60
28908     A7 26 62 FC | 	wrlong	local01, fp
2890c     00 26 06 F6 | 	mov	local01, #0
28910     18 4E 85 F1 | 	sub	fp, #24
28914     A7 2A 0A FB | 	rdlong	local03, fp wz
28918     2C 4E 85 F1 | 	sub	fp, #44
2891c     18 00 90 5D |  if_ne	jmp	#LR__3430
28920     1C 4E 05 F1 | 	add	fp, #28
28924     A7 2C 02 FB | 	rdlong	local04, fp
28928     1C 4E 85 F1 | 	sub	fp, #28
2892c     16 2F 02 F6 | 	mov	local05, local04
28930     0A 2E 0E F2 | 	cmp	local05, #10 wz
28934     04 00 90 AD |  if_e	jmp	#LR__3431
28938                 | LR__3430
28938     01 26 66 F5 | 	xor	local01, #1
2893c                 | LR__3431
2893c     3C 4E 05 F1 | 	add	fp, #60
28940     A7 26 62 FC | 	wrlong	local01, fp
28944     3C 4E 85 F1 | 	sub	fp, #60
28948     00 26 0E F2 | 	cmp	local01, #0 wz
2894c     0C 01 90 AD |  if_e	jmp	#LR__3433
28950     44 4E 05 F1 | 	add	fp, #68
28954     A7 2E 02 FB | 	rdlong	local05, fp
28958     44 4E 85 F1 | 	sub	fp, #68
2895c     17 2B 02 F6 | 	mov	local03, local05
28960     02 2A 0E F2 | 	cmp	local03, #2 wz
28964     F4 00 90 5D |  if_ne	jmp	#LR__3433
28968     0C 4F 05 F1 | 	add	fp, #268
2896c     A7 30 02 FB | 	rdlong	local06, fp
28970     0C 4F 85 F1 | 	sub	fp, #268
28974     18 2D 02 F6 | 	mov	local04, local06
28978     02 2C 0E F2 | 	cmp	local04, #2 wz
2897c     DC 00 90 AD |  if_e	jmp	#LR__3433
28980     C0 4E 05 F1 | 	add	fp, #192
28984     A7 12 02 FB | 	rdlong	arg01, fp
28988     94 4E 85 F1 | 	sub	fp, #148
2898c     A7 14 02 FB | 	rdlong	arg02, fp
28990     14 4E 05 F1 | 	add	fp, #20
28994     A7 16 02 FB | 	rdlong	arg03, fp
28998     40 4E 85 F1 | 	sub	fp, #64
2899c     8C 47 B0 FD | 	call	#__system__emitsign_0578
289a0     14 4F 05 F1 | 	add	fp, #276
289a4     A7 FA 61 FC | 	wrlong	result1, fp
289a8     14 4F 85 F1 | 	sub	fp, #276
289ac     00 FA 55 F2 | 	cmps	result1, #0 wc
289b0     14 4F 05 C1 |  if_b	add	fp, #276
289b4     A7 FA 01 CB |  if_b	rdlong	result1, fp
289b8     14 4F 85 C1 |  if_b	sub	fp, #276
289bc     6C 0B 90 CD |  if_b	jmp	#LR__3483
289c0     C0 4E 05 F1 | 	add	fp, #192
289c4     A7 26 02 FB | 	rdlong	local01, fp
289c8     54 4E 05 F1 | 	add	fp, #84
289cc     A7 2E 02 FB | 	rdlong	local05, fp
289d0     17 2B 02 F6 | 	mov	local03, local05
289d4     17 27 02 F1 | 	add	local01, local05
289d8     54 4E 85 F1 | 	sub	fp, #84
289dc     A7 26 62 FC | 	wrlong	local01, fp
289e0     58 4E 85 F1 | 	sub	fp, #88
289e4     A7 26 0A FB | 	rdlong	local01, fp wz
289e8     68 4E 85 F1 | 	sub	fp, #104
289ec     60 00 90 AD |  if_e	jmp	#LR__3432
289f0     68 4E 05 F1 | 	add	fp, #104
289f4     A7 26 02 FB | 	rdlong	local01, fp
289f8     AC 4E 05 F1 | 	add	fp, #172
289fc     A7 2A 02 FB | 	rdlong	local03, fp
28a00     15 27 82 F1 | 	sub	local01, local03
28a04     AC 4E 85 F1 | 	sub	fp, #172
28a08     A7 26 62 FC | 	wrlong	local01, fp
28a0c     68 4E 85 F1 | 	sub	fp, #104
28a10     00 26 56 F2 | 	cmps	local01, #0 wc
28a14     68 4E 05 C1 |  if_b	add	fp, #104
28a18     A7 00 68 CC |  if_b	wrlong	#0, fp
28a1c     68 4E 85 C1 |  if_b	sub	fp, #104
28a20     08 4E 05 F1 | 	add	fp, #8
28a24     A7 26 02 FB | 	rdlong	local01, fp
28a28     E8 26 06 F4 | 	bitl	local01, #232
28a2c     A7 26 62 FC | 	wrlong	local01, fp
28a30     60 4E 05 F1 | 	add	fp, #96
28a34     A7 2E 02 FB | 	rdlong	local05, fp
28a38     17 2B 02 F6 | 	mov	local03, local05
28a3c     08 2A 66 F0 | 	shl	local03, #8
28a40     15 27 42 F5 | 	or	local01, local03
28a44     60 4E 85 F1 | 	sub	fp, #96
28a48     A7 26 62 FC | 	wrlong	local01, fp
28a4c     08 4E 85 F1 | 	sub	fp, #8
28a50                 | LR__3432
28a50     3C 4E 05 F1 | 	add	fp, #60
28a54     A7 00 68 FC | 	wrlong	#0, fp
28a58     3C 4E 85 F1 | 	sub	fp, #60
28a5c                 | LR__3433
28a5c     0C 4E 05 F1 | 	add	fp, #12
28a60     A7 12 02 FB | 	rdlong	arg01, fp
28a64     0C 4E 85 F1 | 	sub	fp, #12
28a68     EC 21 B0 FD | 	call	#__system____builtin_ilogb
28a6c     FF FF 3F FF 
28a70     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
28a74     50 00 90 5D |  if_ne	jmp	#LR__3435
28a78     2C 4E 05 F1 | 	add	fp, #44
28a7c     A7 26 0A FB | 	rdlong	local01, fp wz
28a80     2C 4E 85 F1 | 	sub	fp, #44
28a84     24 00 90 AD |  if_e	jmp	#LR__3434
28a88     C0 4E 05 F1 | 	add	fp, #192
28a8c     A7 28 02 FB | 	rdlong	local02, fp
28a90     14 2B 02 F6 | 	mov	local03, local02
28a94     01 2A 06 F1 | 	add	local03, #1
28a98     A7 2A 62 FC | 	wrlong	local03, fp
28a9c     94 4E 85 F1 | 	sub	fp, #148
28aa0     A7 2C 02 FB | 	rdlong	local04, fp
28aa4     2C 4E 85 F1 | 	sub	fp, #44
28aa8     14 2D 42 FC | 	wrbyte	local04, local02
28aac                 | LR__3434
28aac     C0 4E 05 F1 | 	add	fp, #192
28ab0     A7 12 02 FB | 	rdlong	arg01, fp
28ab4     C0 4E 85 F1 | 	sub	fp, #192
28ab8     B7 01 00 FF 
28abc     C6 15 06 F6 | 	mov	arg02, ##@LR__5431
28ac0     A8 E9 BF FD | 	call	#__system____builtin_strcpy
28ac4     A4 08 90 FD | 	jmp	#LR__3471
28ac8                 | LR__3435
28ac8     0C 4E 05 F1 | 	add	fp, #12
28acc     A7 28 02 FB | 	rdlong	local02, fp
28ad0     0C 4E 85 F1 | 	sub	fp, #12
28ad4     14 13 02 F6 | 	mov	arg01, local02
28ad8     7C 21 B0 FD | 	call	#__system____builtin_ilogb
28adc     00 00 40 FF 
28ae0     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
28ae4     50 00 90 5D |  if_ne	jmp	#LR__3437
28ae8     2C 4E 05 F1 | 	add	fp, #44
28aec     A7 26 0A FB | 	rdlong	local01, fp wz
28af0     2C 4E 85 F1 | 	sub	fp, #44
28af4     24 00 90 AD |  if_e	jmp	#LR__3436
28af8     C0 4E 05 F1 | 	add	fp, #192
28afc     A7 28 02 FB | 	rdlong	local02, fp
28b00     14 2B 02 F6 | 	mov	local03, local02
28b04     01 2A 06 F1 | 	add	local03, #1
28b08     A7 2A 62 FC | 	wrlong	local03, fp
28b0c     94 4E 85 F1 | 	sub	fp, #148
28b10     A7 2C 02 FB | 	rdlong	local04, fp
28b14     2C 4E 85 F1 | 	sub	fp, #44
28b18     14 2D 42 FC | 	wrbyte	local04, local02
28b1c                 | LR__3436
28b1c     C0 4E 05 F1 | 	add	fp, #192
28b20     A7 12 02 FB | 	rdlong	arg01, fp
28b24     C0 4E 85 F1 | 	sub	fp, #192
28b28     B7 01 00 FF 
28b2c     CA 15 06 F6 | 	mov	arg02, ##@LR__5432
28b30     38 E9 BF FD | 	call	#__system____builtin_strcpy
28b34     34 08 90 FD | 	jmp	#LR__3471
28b38                 | LR__3437
28b38     10 4E 05 F1 | 	add	fp, #16
28b3c     A7 26 02 FB | 	rdlong	local01, fp
28b40     10 4E 85 F1 | 	sub	fp, #16
28b44     67 26 0E F2 | 	cmp	local01, #103 wz
28b48     10 4E 05 51 |  if_ne	add	fp, #16
28b4c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28b50     10 4E 85 51 |  if_ne	sub	fp, #16
28b54     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
28b58     94 01 90 5D |  if_ne	jmp	#LR__3442
28b5c     0C 4E 05 F1 | 	add	fp, #12
28b60     A7 12 02 FB | 	rdlong	arg01, fp
28b64     08 4E 05 F1 | 	add	fp, #8
28b68     A7 14 02 F6 | 	mov	arg02, fp
28b6c     0C 4E 05 F1 | 	add	fp, #12
28b70     A7 16 02 F6 | 	mov	arg03, fp
28b74     98 4E 05 F1 | 	add	fp, #152
28b78     A7 18 02 FB | 	rdlong	arg04, fp
28b7c     9C 4E 85 F1 | 	sub	fp, #156
28b80     A7 1A 02 FB | 	rdlong	arg05, fp
28b84     1C 4E 85 F1 | 	sub	fp, #28
28b88     AC 43 B0 FD | 	call	#__system__disassemble_0576
28b8c     10 4E 05 F1 | 	add	fp, #16
28b90     A7 26 02 FB | 	rdlong	local01, fp
28b94     10 4E 85 F1 | 	sub	fp, #16
28b98     23 26 0E F2 | 	cmp	local01, #35 wz
28b9c     A0 00 90 5D |  if_ne	jmp	#LR__3439
28ba0     20 4E 05 F1 | 	add	fp, #32
28ba4     A7 26 02 FB | 	rdlong	local01, fp
28ba8     98 4E 05 F1 | 	add	fp, #152
28bac     A7 2A 02 FB | 	rdlong	local03, fp
28bb0     B8 4E 85 F1 | 	sub	fp, #184
28bb4     15 27 5A F2 | 	cmps	local01, local03 wcz
28bb8     24 4E 05 11 |  if_a	add	fp, #36
28bbc     A7 02 68 1C |  if_a	wrlong	#1, fp
28bc0     24 4E 85 11 |  if_a	sub	fp, #36
28bc4     A4 01 90 1D |  if_a	jmp	#LR__3445
28bc8     20 4E 05 F1 | 	add	fp, #32
28bcc     A7 26 02 FB | 	rdlong	local01, fp
28bd0     20 4E 85 F1 | 	sub	fp, #32
28bd4     00 26 56 F2 | 	cmps	local01, #0 wc
28bd8     2C 00 90 3D |  if_ae	jmp	#LR__3438
28bdc     B8 4E 05 F1 | 	add	fp, #184
28be0     A7 26 02 FB | 	rdlong	local01, fp
28be4     13 27 62 F6 | 	neg	local01, local01
28be8     98 4E 85 F1 | 	sub	fp, #152
28bec     A7 2A 02 FB | 	rdlong	local03, fp
28bf0     20 4E 85 F1 | 	sub	fp, #32
28bf4     13 2B 5A F2 | 	cmps	local03, local01 wcz
28bf8     24 4E 05 E1 |  if_be	add	fp, #36
28bfc     A7 02 68 EC |  if_be	wrlong	#1, fp
28c00     24 4E 85 E1 |  if_be	sub	fp, #36
28c04     64 01 90 FD | 	jmp	#LR__3445
28c08                 | LR__3438
28c08     20 4E 05 F1 | 	add	fp, #32
28c0c     A7 26 02 FB | 	rdlong	local01, fp
28c10     20 4E 85 F1 | 	sub	fp, #32
28c14     01 26 56 F2 | 	cmps	local01, #1 wc
28c18     50 01 90 CD |  if_b	jmp	#LR__3445
28c1c     B8 4E 05 F1 | 	add	fp, #184
28c20     A7 26 02 FB | 	rdlong	local01, fp
28c24     98 4E 85 F1 | 	sub	fp, #152
28c28     A7 2A 02 FB | 	rdlong	local03, fp
28c2c     15 27 82 F1 | 	sub	local01, local03
28c30     98 4E 05 F1 | 	add	fp, #152
28c34     A7 26 62 FC | 	wrlong	local01, fp
28c38     B8 4E 85 F1 | 	sub	fp, #184
28c3c     2C 01 90 FD | 	jmp	#LR__3445
28c40                 | LR__3439
28c40     00 26 06 F6 | 	mov	local01, #0
28c44     08 4E 05 F1 | 	add	fp, #8
28c48     A7 28 02 FB | 	rdlong	local02, fp
28c4c     1C 28 46 F0 | 	shr	local02, #28
28c50     01 28 0E F5 | 	and	local02, #1 wz
28c54     01 26 06 A6 |  if_e	mov	local01, #1
28c58     2C 4E 05 F1 | 	add	fp, #44
28c5c     A7 26 62 FC | 	wrlong	local01, fp
28c60     14 4E 85 F1 | 	sub	fp, #20
28c64     A7 26 02 FB | 	rdlong	local01, fp
28c68     98 4E 05 F1 | 	add	fp, #152
28c6c     A7 2A 02 FB | 	rdlong	local03, fp
28c70     B8 4E 85 F1 | 	sub	fp, #184
28c74     15 27 52 F2 | 	cmps	local01, local03 wc
28c78     18 00 90 3D |  if_ae	jmp	#LR__3440
28c7c     20 4E 05 F1 | 	add	fp, #32
28c80     A7 2C 02 FB | 	rdlong	local04, fp
28c84     20 4E 85 F1 | 	sub	fp, #32
28c88     FF FF 7F FF 
28c8c     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
28c90     10 00 90 3D |  if_ae	jmp	#LR__3441
28c94                 | LR__3440
28c94     24 4E 05 F1 | 	add	fp, #36
28c98     A7 02 68 FC | 	wrlong	#1, fp
28c9c     24 4E 85 F1 | 	sub	fp, #36
28ca0     C8 00 90 FD | 	jmp	#LR__3445
28ca4                 | LR__3441
28ca4     B8 4E 05 F1 | 	add	fp, #184
28ca8     A7 2C 02 FB | 	rdlong	local04, fp
28cac     98 4E 85 F1 | 	sub	fp, #152
28cb0     A7 2A 02 FB | 	rdlong	local03, fp
28cb4     15 2D 82 F1 | 	sub	local04, local03
28cb8     98 4E 05 F1 | 	add	fp, #152
28cbc     A7 2C 62 FC | 	wrlong	local04, fp
28cc0     AC 4E 85 F1 | 	sub	fp, #172
28cc4     A7 12 02 FB | 	rdlong	arg01, fp
28cc8     08 4E 05 F1 | 	add	fp, #8
28ccc     A7 14 02 F6 | 	mov	arg02, fp
28cd0     0C 4E 05 F1 | 	add	fp, #12
28cd4     A7 16 02 F6 | 	mov	arg03, fp
28cd8     16 19 62 F6 | 	neg	arg04, local04
28cdc     04 4E 85 F1 | 	sub	fp, #4
28ce0     A7 1A 02 FB | 	rdlong	arg05, fp
28ce4     1C 4E 85 F1 | 	sub	fp, #28
28ce8     4C 42 B0 FD | 	call	#__system__disassemble_0576
28cec     7C 00 90 FD | 	jmp	#LR__3445
28cf0                 | LR__3442
28cf0     24 4E 05 F1 | 	add	fp, #36
28cf4     A7 26 0A FB | 	rdlong	local01, fp wz
28cf8     24 4E 85 F1 | 	sub	fp, #36
28cfc     34 00 90 AD |  if_e	jmp	#LR__3443
28d00     0C 4E 05 F1 | 	add	fp, #12
28d04     A7 12 02 FB | 	rdlong	arg01, fp
28d08     08 4E 05 F1 | 	add	fp, #8
28d0c     A7 14 02 F6 | 	mov	arg02, fp
28d10     0C 4E 05 F1 | 	add	fp, #12
28d14     A7 16 02 F6 | 	mov	arg03, fp
28d18     98 4E 05 F1 | 	add	fp, #152
28d1c     A7 18 02 FB | 	rdlong	arg04, fp
28d20     9C 4E 85 F1 | 	sub	fp, #156
28d24     A7 1A 02 FB | 	rdlong	arg05, fp
28d28     1C 4E 85 F1 | 	sub	fp, #28
28d2c     08 42 B0 FD | 	call	#__system__disassemble_0576
28d30     38 00 90 FD | 	jmp	#LR__3444
28d34                 | LR__3443
28d34     0C 4E 05 F1 | 	add	fp, #12
28d38     A7 12 02 FB | 	rdlong	arg01, fp
28d3c     08 4E 05 F1 | 	add	fp, #8
28d40     A7 14 02 F6 | 	mov	arg02, fp
28d44     0C 4E 05 F1 | 	add	fp, #12
28d48     A7 16 02 F6 | 	mov	arg03, fp
28d4c     98 4E 05 F1 | 	add	fp, #152
28d50     A7 2C 02 FB | 	rdlong	local04, fp
28d54     01 2C 06 F1 | 	add	local04, #1
28d58     16 19 62 F6 | 	neg	arg04, local04
28d5c     9C 4E 85 F1 | 	sub	fp, #156
28d60     A7 1A 02 FB | 	rdlong	arg05, fp
28d64     1C 4E 85 F1 | 	sub	fp, #28
28d68     CC 41 B0 FD | 	call	#__system__disassemble_0576
28d6c                 | LR__3444
28d6c                 | LR__3445
28d6c     1C 4E 05 F1 | 	add	fp, #28
28d70     A7 26 02 FB | 	rdlong	local01, fp
28d74     1C 4E 85 F1 | 	sub	fp, #28
28d78     02 26 0E F2 | 	cmp	local01, #2 wz
28d7c     4C 00 90 5D |  if_ne	jmp	#LR__3448
28d80     1C 4E 05 F1 | 	add	fp, #28
28d84     A7 20 68 FC | 	wrlong	#16, fp
28d88     1C 4E 85 F1 | 	sub	fp, #28
28d8c                 | LR__3446
28d8c     14 4E 05 F1 | 	add	fp, #20
28d90     A7 26 0A FB | 	rdlong	local01, fp wz
28d94     14 4E 85 F1 | 	sub	fp, #20
28d98     30 00 90 AD |  if_e	jmp	#LR__3447
28d9c     14 4E 05 F1 | 	add	fp, #20
28da0     A7 2A 02 FB | 	rdlong	local03, fp
28da4     14 4E 85 F1 | 	sub	fp, #20
28da8     00 80 00 FF 
28dac     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
28db0     18 00 90 3D |  if_ae	jmp	#LR__3447
28db4     14 4E 05 F1 | 	add	fp, #20
28db8     A7 26 02 FB | 	rdlong	local01, fp
28dbc     01 26 66 F0 | 	shl	local01, #1
28dc0     A7 26 62 FC | 	wrlong	local01, fp
28dc4     14 4E 85 F1 | 	sub	fp, #20
28dc8     C0 FF 9F FD | 	jmp	#LR__3446
28dcc                 | LR__3447
28dcc                 | LR__3448
28dcc     70 4E 05 F1 | 	add	fp, #112
28dd0     A7 12 02 F6 | 	mov	arg01, fp
28dd4     5C 4E 85 F1 | 	sub	fp, #92
28dd8     A7 14 02 FB | 	rdlong	arg02, fp
28ddc     08 4E 05 F1 | 	add	fp, #8
28de0     A7 16 02 FB | 	rdlong	arg03, fp
28de4     A0 4E 05 F1 | 	add	fp, #160
28de8     A7 1A 02 FB | 	rdlong	arg05, fp
28dec     BC 4E 85 F1 | 	sub	fp, #188
28df0     01 18 06 F6 | 	mov	arg04, #1
28df4     CC 40 B0 FD | 	call	#__system___uitoa
28df8     58 4E 05 F1 | 	add	fp, #88
28dfc     A7 FA 61 FC | 	wrlong	result1, fp
28e00     38 4E 85 F1 | 	sub	fp, #56
28e04     A7 26 02 FB | 	rdlong	local01, fp
28e08     20 4E 85 F1 | 	sub	fp, #32
28e0c     00 26 56 F2 | 	cmps	local01, #0 wc
28e10     50 00 90 3D |  if_ae	jmp	#LR__3449
28e14     60 4E 05 F1 | 	add	fp, #96
28e18     A7 5A 68 FC | 	wrlong	#45, fp
28e1c     50 4E 05 F1 | 	add	fp, #80
28e20     A7 12 02 F6 | 	mov	arg01, fp
28e24     90 4E 85 F1 | 	sub	fp, #144
28e28     A7 2A 02 FB | 	rdlong	local03, fp
28e2c     15 15 62 F6 | 	neg	arg02, local03
28e30     18 4E 05 F1 | 	add	fp, #24
28e34     A7 18 02 FB | 	rdlong	arg04, fp
28e38     84 4E 05 F1 | 	add	fp, #132
28e3c     A7 30 02 FB | 	rdlong	local06, fp
28e40     BC 4E 85 F1 | 	sub	fp, #188
28e44     18 2D 02 F6 | 	mov	local04, local06
28e48     0A 16 06 F6 | 	mov	arg03, #10
28e4c     16 1B 02 F6 | 	mov	arg05, local04
28e50     70 40 B0 FD | 	call	#__system___uitoa
28e54     5C 4E 05 F1 | 	add	fp, #92
28e58     A7 FA 61 FC | 	wrlong	result1, fp
28e5c     5C 4E 85 F1 | 	sub	fp, #92
28e60     48 00 90 FD | 	jmp	#LR__3450
28e64                 | LR__3449
28e64     60 4E 05 F1 | 	add	fp, #96
28e68     A7 56 68 FC | 	wrlong	#43, fp
28e6c     50 4E 05 F1 | 	add	fp, #80
28e70     A7 12 02 F6 | 	mov	arg01, fp
28e74     90 4E 85 F1 | 	sub	fp, #144
28e78     A7 14 02 FB | 	rdlong	arg02, fp
28e7c     18 4E 05 F1 | 	add	fp, #24
28e80     A7 18 02 FB | 	rdlong	arg04, fp
28e84     84 4E 05 F1 | 	add	fp, #132
28e88     A7 30 02 FB | 	rdlong	local06, fp
28e8c     BC 4E 85 F1 | 	sub	fp, #188
28e90     18 2D 02 F6 | 	mov	local04, local06
28e94     0A 16 06 F6 | 	mov	arg03, #10
28e98     16 1B 02 F6 | 	mov	arg05, local04
28e9c     24 40 B0 FD | 	call	#__system___uitoa
28ea0     5C 4E 05 F1 | 	add	fp, #92
28ea4     A7 FA 61 FC | 	wrlong	result1, fp
28ea8     5C 4E 85 F1 | 	sub	fp, #92
28eac                 | LR__3450
28eac     24 4E 05 F1 | 	add	fp, #36
28eb0     A7 26 0A FB | 	rdlong	local01, fp wz
28eb4     24 4E 85 F1 | 	sub	fp, #36
28eb8     2C 00 90 AD |  if_e	jmp	#LR__3451
28ebc     50 4E 05 F1 | 	add	fp, #80
28ec0     A7 00 68 FC | 	wrlong	#0, fp
28ec4     04 4E 85 F1 | 	sub	fp, #4
28ec8     A7 00 68 FC | 	wrlong	#0, fp
28ecc     6C 4E 05 F1 | 	add	fp, #108
28ed0     A7 26 02 FB | 	rdlong	local01, fp
28ed4     01 26 06 F1 | 	add	local01, #1
28ed8     64 4E 85 F1 | 	sub	fp, #100
28edc     A7 26 62 FC | 	wrlong	local01, fp
28ee0     54 4E 85 F1 | 	sub	fp, #84
28ee4     88 00 90 FD | 	jmp	#LR__3454
28ee8                 | LR__3451
28ee8     20 4E 05 F1 | 	add	fp, #32
28eec     A7 26 02 FB | 	rdlong	local01, fp
28ef0     20 4E 85 F1 | 	sub	fp, #32
28ef4     00 26 56 F2 | 	cmps	local01, #0 wc
28ef8     40 00 90 3D |  if_ae	jmp	#LR__3452
28efc     20 4E 05 F1 | 	add	fp, #32
28f00     A7 28 02 FB | 	rdlong	local02, fp
28f04     30 4E 05 F1 | 	add	fp, #48
28f08     A7 28 62 FC | 	wrlong	local02, fp
28f0c     04 4E 85 F1 | 	sub	fp, #4
28f10     A7 28 62 FC | 	wrlong	local02, fp
28f14     2C 4E 85 F1 | 	sub	fp, #44
28f18     A7 26 02 FB | 	rdlong	local01, fp
28f1c     98 4E 05 F1 | 	add	fp, #152
28f20     A7 2A 02 FB | 	rdlong	local03, fp
28f24     15 27 02 F1 | 	add	local01, local03
28f28     01 26 06 F1 | 	add	local01, #1
28f2c     64 4E 85 F1 | 	sub	fp, #100
28f30     A7 26 62 FC | 	wrlong	local01, fp
28f34     54 4E 85 F1 | 	sub	fp, #84
28f38     34 00 90 FD | 	jmp	#LR__3453
28f3c                 | LR__3452
28f3c     4C 4E 05 F1 | 	add	fp, #76
28f40     A7 00 68 FC | 	wrlong	#0, fp
28f44     2C 4E 85 F1 | 	sub	fp, #44
28f48     A7 26 02 FB | 	rdlong	local01, fp
28f4c     30 4E 05 F1 | 	add	fp, #48
28f50     A7 26 62 FC | 	wrlong	local01, fp
28f54     68 4E 05 F1 | 	add	fp, #104
28f58     A7 2A 02 FB | 	rdlong	local03, fp
28f5c     15 27 02 F1 | 	add	local01, local03
28f60     01 26 06 F1 | 	add	local01, #1
28f64     64 4E 85 F1 | 	sub	fp, #100
28f68     A7 26 62 FC | 	wrlong	local01, fp
28f6c     54 4E 85 F1 | 	sub	fp, #84
28f70                 | LR__3453
28f70                 | LR__3454
28f70     54 4E 05 F1 | 	add	fp, #84
28f74     A7 26 02 FB | 	rdlong	local01, fp
28f78     08 4E 85 F1 | 	sub	fp, #8
28f7c     A7 2A 02 FB | 	rdlong	local03, fp
28f80     15 27 82 F1 | 	sub	local01, local03
28f84     01 26 06 F1 | 	add	local01, #1
28f88     24 4E 85 F1 | 	sub	fp, #36
28f8c     A7 26 62 FC | 	wrlong	local01, fp
28f90     04 4E 05 F1 | 	add	fp, #4
28f94     A7 26 0A FB | 	rdlong	local01, fp wz
28f98     2C 4E 85 F1 | 	sub	fp, #44
28f9c     28 4E 05 51 |  if_ne	add	fp, #40
28fa0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28fa4     01 2A 06 51 |  if_ne	add	local03, #1
28fa8     A7 2A 62 5C |  if_ne	wrlong	local03, fp
28fac     28 4E 85 51 |  if_ne	sub	fp, #40
28fb0     1C 4E 05 F1 | 	add	fp, #28
28fb4     A7 26 02 FB | 	rdlong	local01, fp
28fb8     1C 4E 85 F1 | 	sub	fp, #28
28fbc     10 26 0E F2 | 	cmp	local01, #16 wz
28fc0     28 4E 05 A1 |  if_e	add	fp, #40
28fc4     A7 26 02 AB |  if_e	rdlong	local01, fp
28fc8     02 26 06 A1 |  if_e	add	local01, #2
28fcc     A7 26 62 AC |  if_e	wrlong	local01, fp
28fd0     28 4E 85 A1 |  if_e	sub	fp, #40
28fd4     24 4E 05 F1 | 	add	fp, #36
28fd8     A7 26 0A FB | 	rdlong	local01, fp wz
28fdc     24 4E 85 F1 | 	sub	fp, #36
28fe0     28 00 90 AD |  if_e	jmp	#LR__3455
28fe4     28 4E 05 F1 | 	add	fp, #40
28fe8     A7 26 02 FB | 	rdlong	local01, fp
28fec     02 2A 06 F6 | 	mov	local03, #2
28ff0     34 4E 05 F1 | 	add	fp, #52
28ff4     A7 2E 02 FB | 	rdlong	local05, fp
28ff8     17 2B 02 F1 | 	add	local03, local05
28ffc     15 27 02 F1 | 	add	local01, local03
29000     34 4E 85 F1 | 	sub	fp, #52
29004     A7 26 62 FC | 	wrlong	local01, fp
29008     28 4E 85 F1 | 	sub	fp, #40
2900c                 | LR__3455
2900c     28 4E 05 F1 | 	add	fp, #40
29010     A7 26 02 FB | 	rdlong	local01, fp
29014     28 4E 85 F1 | 	sub	fp, #40
29018     41 26 56 F2 | 	cmps	local01, #65 wc
2901c     01 FA 65 36 |  if_ae	neg	result1, #1
29020     08 05 90 3D |  if_ae	jmp	#LR__3483
29024     3C 4E 05 F1 | 	add	fp, #60
29028     A7 26 0A FB | 	rdlong	local01, fp wz
2902c     3C 4E 85 F1 | 	sub	fp, #60
29030     60 00 90 AD |  if_e	jmp	#LR__3456
29034     C0 4E 05 F1 | 	add	fp, #192
29038     A7 12 02 FB | 	rdlong	arg01, fp
2903c     94 4E 85 F1 | 	sub	fp, #148
29040     A7 14 02 FB | 	rdlong	arg02, fp
29044     14 4E 05 F1 | 	add	fp, #20
29048     A7 16 02 FB | 	rdlong	arg03, fp
2904c     40 4E 85 F1 | 	sub	fp, #64
29050     D8 40 B0 FD | 	call	#__system__emitsign_0578
29054     18 4F 05 F1 | 	add	fp, #280
29058     A7 FA 61 FC | 	wrlong	result1, fp
2905c     18 4F 85 F1 | 	sub	fp, #280
29060     00 FA 55 F2 | 	cmps	result1, #0 wc
29064     18 4F 05 C1 |  if_b	add	fp, #280
29068     A7 FA 01 CB |  if_b	rdlong	result1, fp
2906c     18 4F 85 C1 |  if_b	sub	fp, #280
29070     B8 04 90 CD |  if_b	jmp	#LR__3483
29074     C0 4E 05 F1 | 	add	fp, #192
29078     A7 26 02 FB | 	rdlong	local01, fp
2907c     58 4E 05 F1 | 	add	fp, #88
29080     A7 2A 02 FB | 	rdlong	local03, fp
29084     15 27 02 F1 | 	add	local01, local03
29088     58 4E 85 F1 | 	sub	fp, #88
2908c     A7 26 62 FC | 	wrlong	local01, fp
29090     C0 4E 85 F1 | 	sub	fp, #192
29094                 | LR__3456
29094     4C 4E 05 F1 | 	add	fp, #76
29098     A7 26 02 FB | 	rdlong	local01, fp
2909c     34 4E 85 F1 | 	sub	fp, #52
290a0     A7 26 62 FC | 	wrlong	local01, fp
290a4     18 4E 85 F1 | 	sub	fp, #24
290a8     97 9E 48 FB | 	callpa	#(@LR__3462-@LR__3457)>>2,fcache_load_ptr_
290ac                 | LR__3457
290ac     18 4E 05 F1 | 	add	fp, #24
290b0     A7 28 02 FB | 	rdlong	local02, fp
290b4     3C 4E 05 F1 | 	add	fp, #60
290b8     A7 2E 02 FB | 	rdlong	local05, fp
290bc     54 4E 85 F1 | 	sub	fp, #84
290c0     17 29 52 F2 | 	cmps	local02, local05 wc
290c4     20 01 90 3D |  if_ae	jmp	#LR__3463
290c8     18 4E 05 F1 | 	add	fp, #24
290cc     A7 30 02 FB | 	rdlong	local06, fp
290d0     18 4E 85 F1 | 	sub	fp, #24
290d4     00 30 56 F2 | 	cmps	local06, #0 wc
290d8     58 00 90 CD |  if_b	jmp	#LR__3458
290dc     18 4E 05 F1 | 	add	fp, #24
290e0     A7 30 02 FB | 	rdlong	local06, fp
290e4     40 4E 05 F1 | 	add	fp, #64
290e8     A7 32 02 FB | 	rdlong	local07, fp
290ec     58 4E 85 F1 | 	sub	fp, #88
290f0     19 31 52 F2 | 	cmps	local06, local07 wc
290f4     3C 00 90 3D |  if_ae	jmp	#LR__3458
290f8     C0 4E 05 F1 | 	add	fp, #192
290fc     A7 34 02 FB | 	rdlong	local08, fp
29100     1A 33 02 F6 | 	mov	local07, local08
29104     01 32 06 F1 | 	add	local07, #1
29108     A7 32 62 FC | 	wrlong	local07, fp
2910c     A8 4E 85 F1 | 	sub	fp, #168
29110     A7 32 02 FB | 	rdlong	local07, fp
29114     19 37 02 F6 | 	mov	local09, local07
29118     58 4E 05 F1 | 	add	fp, #88
2911c     A7 38 02 F6 | 	mov	local10, fp
29120     A7 36 02 F1 | 	add	local09, fp
29124     1B 3B C2 FA | 	rdbyte	local11, local09
29128     1A 3B 42 FC | 	wrbyte	local11, local08
2912c     70 4E 85 F1 | 	sub	fp, #112
29130     20 00 90 FD | 	jmp	#LR__3459
29134                 | LR__3458
29134     C0 4E 05 F1 | 	add	fp, #192
29138     A7 34 02 FB | 	rdlong	local08, fp
2913c     1A 37 02 F6 | 	mov	local09, local08
29140     01 36 06 F1 | 	add	local09, #1
29144     A7 36 62 FC | 	wrlong	local09, fp
29148     C0 4E 85 F1 | 	sub	fp, #192
2914c     30 36 06 F6 | 	mov	local09, #48
29150     1A 61 48 FC | 	wrbyte	#48, local08
29154                 | LR__3459
29154     18 4E 05 F1 | 	add	fp, #24
29158     A7 30 02 FB | 	rdlong	local06, fp
2915c     38 4E 05 F1 | 	add	fp, #56
29160     A7 3C 02 FB | 	rdlong	local12, fp
29164     50 4E 85 F1 | 	sub	fp, #80
29168     1E 31 0A F2 | 	cmp	local06, local12 wz
2916c     5C 00 90 5D |  if_ne	jmp	#LR__3461
29170     10 4F 05 F1 | 	add	fp, #272
29174     A7 32 02 FB | 	rdlong	local07, fp
29178     10 4F 85 F1 | 	sub	fp, #272
2917c     19 37 0A F6 | 	mov	local09, local07 wz
29180     28 00 90 5D |  if_ne	jmp	#LR__3460
29184     54 4E 05 F1 | 	add	fp, #84
29188     A7 3A 02 FB | 	rdlong	local11, fp
2918c     1D 39 02 F6 | 	mov	local10, local11
29190     01 38 86 F1 | 	sub	local10, #1
29194     3C 4E 85 F1 | 	sub	fp, #60
29198     A7 3E 02 FB | 	rdlong	local13, fp
2919c     18 4E 85 F1 | 	sub	fp, #24
291a0     1F 41 02 F6 | 	mov	local14, local13
291a4     1C 41 52 F2 | 	cmps	local14, local10 wc
291a8     20 00 90 3D |  if_ae	jmp	#LR__3461
291ac                 | LR__3460
291ac     C0 4E 05 F1 | 	add	fp, #192
291b0     A7 34 02 FB | 	rdlong	local08, fp
291b4     1A 3D 02 F6 | 	mov	local12, local08
291b8     01 3C 06 F1 | 	add	local12, #1
291bc     A7 3C 62 FC | 	wrlong	local12, fp
291c0     C0 4E 85 F1 | 	sub	fp, #192
291c4     2E 36 06 F6 | 	mov	local09, #46
291c8     1A 5D 48 FC | 	wrbyte	#46, local08
291cc                 | LR__3461
291cc     18 4E 05 F1 | 	add	fp, #24
291d0     A7 42 02 FB | 	rdlong	local15, fp
291d4     21 3D 02 F6 | 	mov	local12, local15
291d8     01 3C 06 F1 | 	add	local12, #1
291dc     A7 3C 62 FC | 	wrlong	local12, fp
291e0     18 4E 85 F1 | 	sub	fp, #24
291e4     C4 FE 9F FD | 	jmp	#LR__3457
291e8                 | LR__3462
291e8                 | LR__3463
291e8     34 4E 05 F1 | 	add	fp, #52
291ec     A7 26 0A FB | 	rdlong	local01, fp wz
291f0     34 4E 85 F1 | 	sub	fp, #52
291f4     A0 00 90 AD |  if_e	jmp	#LR__3467
291f8     C0 4E 05 F1 | 	add	fp, #192
291fc     A7 26 02 FB | 	rdlong	local01, fp
29200     01 26 86 F1 | 	sub	local01, #1
29204     A7 26 62 FC | 	wrlong	local01, fp
29208     C0 4E 85 F1 | 	sub	fp, #192
2920c     97 26 48 FB | 	callpa	#(@LR__3465-@LR__3464)>>2,fcache_load_ptr_
29210                 | LR__3464
29210     C0 4E 05 F1 | 	add	fp, #192
29214     A7 26 02 FB | 	rdlong	local01, fp
29218     04 4E 05 F1 | 	add	fp, #4
2921c     A7 2A 02 FB | 	rdlong	local03, fp
29220     C4 4E 85 F1 | 	sub	fp, #196
29224     15 27 5A F2 | 	cmps	local01, local03 wcz
29228     30 00 90 ED |  if_be	jmp	#LR__3466
2922c     C0 4E 05 F1 | 	add	fp, #192
29230     A7 30 02 FB | 	rdlong	local06, fp
29234     C0 4E 85 F1 | 	sub	fp, #192
29238     18 2D C2 FA | 	rdbyte	local04, local06
2923c     30 2C 0E F2 | 	cmp	local04, #48 wz
29240     18 00 90 5D |  if_ne	jmp	#LR__3466
29244     C0 4E 05 F1 | 	add	fp, #192
29248     A7 26 02 FB | 	rdlong	local01, fp
2924c     01 26 86 F1 | 	sub	local01, #1
29250     A7 26 62 FC | 	wrlong	local01, fp
29254     C0 4E 85 F1 | 	sub	fp, #192
29258     B4 FF 9F FD | 	jmp	#LR__3464
2925c                 | LR__3465
2925c                 | LR__3466
2925c     C0 4E 05 F1 | 	add	fp, #192
29260     A7 28 02 FB | 	rdlong	local02, fp
29264     C0 4E 85 F1 | 	sub	fp, #192
29268     14 27 C2 FA | 	rdbyte	local01, local02
2926c     2E 26 0E F2 | 	cmp	local01, #46 wz
29270     C0 4E 05 A1 |  if_e	add	fp, #192
29274     A7 26 02 AB |  if_e	rdlong	local01, fp
29278     01 26 86 A1 |  if_e	sub	local01, #1
2927c     A7 26 62 AC |  if_e	wrlong	local01, fp
29280     C0 4E 85 A1 |  if_e	sub	fp, #192
29284     C0 4E 05 F1 | 	add	fp, #192
29288     A7 2A 02 FB | 	rdlong	local03, fp
2928c     01 2A 06 F1 | 	add	local03, #1
29290     A7 2A 62 FC | 	wrlong	local03, fp
29294     C0 4E 85 F1 | 	sub	fp, #192
29298                 | LR__3467
29298     24 4E 05 F1 | 	add	fp, #36
2929c     A7 26 0A FB | 	rdlong	local01, fp wz
292a0     24 4E 85 F1 | 	sub	fp, #36
292a4     B4 00 90 AD |  if_e	jmp	#LR__3470
292a8     C0 4E 05 F1 | 	add	fp, #192
292ac     A7 28 02 FB | 	rdlong	local02, fp
292b0     14 2B 02 F6 | 	mov	local03, local02
292b4     01 2A 06 F1 | 	add	local03, #1
292b8     A7 2A 62 FC | 	wrlong	local03, fp
292bc     90 4E 85 F1 | 	sub	fp, #144
292c0     A7 2C 02 FB | 	rdlong	local04, fp
292c4     14 2D 42 FC | 	wrbyte	local04, local02
292c8     90 4E 05 F1 | 	add	fp, #144
292cc     A7 28 02 FB | 	rdlong	local02, fp
292d0     14 2B 02 F6 | 	mov	local03, local02
292d4     01 2A 06 F1 | 	add	local03, #1
292d8     A7 2A 62 FC | 	wrlong	local03, fp
292dc     60 4E 85 F1 | 	sub	fp, #96
292e0     A7 2C 02 FB | 	rdlong	local04, fp
292e4     14 2D 42 FC | 	wrbyte	local04, local02
292e8     48 4E 85 F1 | 	sub	fp, #72
292ec     A7 00 68 FC | 	wrlong	#0, fp
292f0     18 4E 85 F1 | 	sub	fp, #24
292f4                 | LR__3468
292f4     18 4E 05 F1 | 	add	fp, #24
292f8     A7 28 02 FB | 	rdlong	local02, fp
292fc     44 4E 05 F1 | 	add	fp, #68
29300     A7 2E 02 FB | 	rdlong	local05, fp
29304     5C 4E 85 F1 | 	sub	fp, #92
29308     17 29 52 F2 | 	cmps	local02, local05 wc
2930c     4C 00 90 3D |  if_ae	jmp	#LR__3469
29310     C0 4E 05 F1 | 	add	fp, #192
29314     A7 34 02 FB | 	rdlong	local08, fp
29318     1A 3D 02 F6 | 	mov	local12, local08
2931c     01 3C 06 F1 | 	add	local12, #1
29320     A7 3C 62 FC | 	wrlong	local12, fp
29324     A8 4E 85 F1 | 	sub	fp, #168
29328     A7 32 02 FB | 	rdlong	local07, fp
2932c     19 37 02 F6 | 	mov	local09, local07
29330     98 4E 05 F1 | 	add	fp, #152
29334     A7 38 02 F6 | 	mov	local10, fp
29338     A7 36 02 F1 | 	add	local09, fp
2933c     1B 3B C2 FA | 	rdbyte	local11, local09
29340     1A 3B 42 FC | 	wrbyte	local11, local08
29344     98 4E 85 F1 | 	sub	fp, #152
29348     A7 3C 02 FB | 	rdlong	local12, fp
2934c     01 3C 06 F1 | 	add	local12, #1
29350     A7 3C 62 FC | 	wrlong	local12, fp
29354     18 4E 85 F1 | 	sub	fp, #24
29358     98 FF 9F FD | 	jmp	#LR__3468
2935c                 | LR__3469
2935c                 | LR__3470
2935c     C0 4E 05 F1 | 	add	fp, #192
29360     A7 26 02 FB | 	rdlong	local01, fp
29364     C0 4E 85 F1 | 	sub	fp, #192
29368     13 01 48 FC | 	wrbyte	#0, local01
2936c                 | LR__3471
2936c     6C 4E 05 F1 | 	add	fp, #108
29370     A7 26 0A FB | 	rdlong	local01, fp wz
29374     6C 4E 85 F1 | 	sub	fp, #108
29378     90 01 90 AD |  if_e	jmp	#LR__3482
2937c     48 4E 05 F1 | 	add	fp, #72
29380     A7 2A 0A FB | 	rdlong	local03, fp wz
29384     48 4E 85 F1 | 	sub	fp, #72
29388     80 01 90 AD |  if_e	jmp	#LR__3482
2938c     C4 4E 05 F1 | 	add	fp, #196
29390     A7 12 02 FB | 	rdlong	arg01, fp
29394     C4 4E 85 F1 | 	sub	fp, #196
29398     09 45 02 F6 | 	mov	local16, arg01
2939c     97 06 48 FB | 	callpa	#(@LR__3473-@LR__3472)>>2,fcache_load_ptr_
293a0                 | LR__3472
293a0     22 FB C9 FA | 	rdbyte	result1, local16 wz
293a4     01 44 06 51 |  if_ne	add	local16, #1
293a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3472
293ac                 | LR__3473
293ac     09 45 82 F1 | 	sub	local16, arg01
293b0     22 2D 02 F6 | 	mov	local04, local16
293b4     6C 4E 05 F1 | 	add	fp, #108
293b8     A7 30 02 FB | 	rdlong	local06, fp
293bc     6C 4E 85 F1 | 	sub	fp, #108
293c0     18 2D 5A F2 | 	cmps	local04, local06 wcz
293c4     44 01 90 ED |  if_be	jmp	#LR__3482
293c8     C4 4E 05 F1 | 	add	fp, #196
293cc     A7 26 02 FB | 	rdlong	local01, fp
293d0     5C 4E 05 F1 | 	add	fp, #92
293d4     A7 26 62 FC | 	wrlong	local01, fp
293d8     FC 4E 85 F1 | 	sub	fp, #252
293dc     A7 26 0A FB | 	rdlong	local01, fp wz
293e0     24 4E 85 F1 | 	sub	fp, #36
293e4     20 00 90 AD |  if_e	jmp	#LR__3474
293e8     B8 4E 05 F1 | 	add	fp, #184
293ec     A7 00 68 FC | 	wrlong	#0, fp
293f0     4C 4E 85 F1 | 	sub	fp, #76
293f4     A7 26 02 FB | 	rdlong	local01, fp
293f8     B0 4E 05 F1 | 	add	fp, #176
293fc     A7 26 62 FC | 	wrlong	local01, fp
29400     1C 4F 85 F1 | 	sub	fp, #284
29404     24 00 90 FD | 	jmp	#LR__3475
29408                 | LR__3474
29408     6C 4E 05 F1 | 	add	fp, #108
2940c     A7 26 02 FB | 	rdlong	local01, fp
29410     01 26 86 F1 | 	sub	local01, #1
29414     4C 4E 05 F1 | 	add	fp, #76
29418     A7 2A 02 FB | 	rdlong	local03, fp
2941c     15 27 82 F1 | 	sub	local01, local03
29420     64 4E 05 F1 | 	add	fp, #100
29424     A7 26 62 FC | 	wrlong	local01, fp
29428     1C 4F 85 F1 | 	sub	fp, #284
2942c                 | LR__3475
2942c     97 20 48 FB | 	callpa	#(@LR__3477-@LR__3476)>>2,fcache_load_ptr_
29430                 | LR__3476
29430     1C 4F 05 F1 | 	add	fp, #284
29434     A7 26 0A FB | 	rdlong	local01, fp wz
29438     1C 4F 85 F1 | 	sub	fp, #284
2943c     30 00 90 AD |  if_e	jmp	#LR__3478
29440     20 4F 05 F1 | 	add	fp, #288
29444     A7 28 02 FB | 	rdlong	local02, fp
29448     14 2B 02 F6 | 	mov	local03, local02
2944c     01 2A 06 F1 | 	add	local03, #1
29450     A7 2A 62 FC | 	wrlong	local03, fp
29454     14 55 48 FC | 	wrbyte	#42, local02
29458     04 4E 85 F1 | 	sub	fp, #4
2945c     A7 26 02 FB | 	rdlong	local01, fp
29460     01 26 86 F1 | 	sub	local01, #1
29464     A7 26 62 FC | 	wrlong	local01, fp
29468     1C 4F 85 F1 | 	sub	fp, #284
2946c     C0 FF 9F FD | 	jmp	#LR__3476
29470                 | LR__3477
29470                 | LR__3478
29470     B8 4E 05 F1 | 	add	fp, #184
29474     A7 26 0A FB | 	rdlong	local01, fp wz
29478     B8 4E 85 F1 | 	sub	fp, #184
2947c     70 00 90 AD |  if_e	jmp	#LR__3481
29480     20 4F 05 F1 | 	add	fp, #288
29484     A7 28 02 FB | 	rdlong	local02, fp
29488     14 2B 02 F6 | 	mov	local03, local02
2948c     01 2A 06 F1 | 	add	local03, #1
29490     A7 2A 62 FC | 	wrlong	local03, fp
29494     14 5D 48 FC | 	wrbyte	#46, local02
29498     04 4E 85 F1 | 	sub	fp, #4
2949c     A7 00 68 FC | 	wrlong	#0, fp
294a0     1C 4F 85 F1 | 	sub	fp, #284
294a4                 | LR__3479
294a4     1C 4F 05 F1 | 	add	fp, #284
294a8     A7 28 02 FB | 	rdlong	local02, fp
294ac     64 4E 85 F1 | 	sub	fp, #100
294b0     A7 2E 02 FB | 	rdlong	local05, fp
294b4     B8 4E 85 F1 | 	sub	fp, #184
294b8     17 29 52 F2 | 	cmps	local02, local05 wc
294bc     30 00 90 3D |  if_ae	jmp	#LR__3480
294c0     20 4F 05 F1 | 	add	fp, #288
294c4     A7 34 02 FB | 	rdlong	local08, fp
294c8     1A 3D 02 F6 | 	mov	local12, local08
294cc     01 3C 06 F1 | 	add	local12, #1
294d0     A7 3C 62 FC | 	wrlong	local12, fp
294d4     1A 55 48 FC | 	wrbyte	#42, local08
294d8     04 4E 85 F1 | 	sub	fp, #4
294dc     A7 3C 02 FB | 	rdlong	local12, fp
294e0     01 3C 06 F1 | 	add	local12, #1
294e4     A7 3C 62 FC | 	wrlong	local12, fp
294e8     1C 4F 85 F1 | 	sub	fp, #284
294ec     B4 FF 9F FD | 	jmp	#LR__3479
294f0                 | LR__3480
294f0                 | LR__3481
294f0     20 4F 05 F1 | 	add	fp, #288
294f4     A7 28 02 FB | 	rdlong	local02, fp
294f8     14 2B 02 F6 | 	mov	local03, local02
294fc     01 2A 06 F1 | 	add	local03, #1
29500     A7 2A 62 FC | 	wrlong	local03, fp
29504     20 4F 85 F1 | 	sub	fp, #288
29508     14 01 48 FC | 	wrbyte	#0, local02
2950c                 | LR__3482
2950c     04 4E 05 F1 | 	add	fp, #4
29510     A7 12 02 FB | 	rdlong	arg01, fp
29514     04 4E 05 F1 | 	add	fp, #4
29518     A7 14 02 FB | 	rdlong	arg02, fp
2951c     BC 4E 05 F1 | 	add	fp, #188
29520     A7 16 02 FB | 	rdlong	arg03, fp
29524     C4 4E 85 F1 | 	sub	fp, #196
29528     C4 EE BF FD | 	call	#__system___fmtstr
2952c                 | LR__3483
2952c     A7 F0 03 F6 | 	mov	ptra, fp
29530     B2 00 A0 FD | 	call	#popregs_
29534                 | __system___fmtfloat_ret
29534     2D 00 64 FD | 	ret
29538                 | 
29538                 | __system__Left_S
29538     04 4A 05 F6 | 	mov	COUNT_, #4
2953c     A8 00 A0 FD | 	call	#pushregs_
29540     09 27 02 F6 | 	mov	local01, arg01
29544     0A 29 02 F6 | 	mov	local02, arg02
29548     01 28 56 F2 | 	cmps	local02, #1 wc
2954c     B7 01 00 CF 
29550     CE FB 05 C6 |  if_b	mov	result1, ##@LR__5433
29554     5C 00 90 CD |  if_b	jmp	#LR__3493
29558     13 13 02 F6 | 	mov	arg01, local01
2955c     09 2B 02 F6 | 	mov	local03, arg01
29560     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
29564                 | LR__3490
29564     15 FB C9 FA | 	rdbyte	result1, local03 wz
29568     01 2A 06 51 |  if_ne	add	local03, #1
2956c     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
29570                 | LR__3491
29570     09 2B 82 F1 | 	sub	local03, arg01
29574     15 FB 01 F6 | 	mov	result1, local03
29578     14 FB 59 F2 | 	cmps	result1, local02 wcz
2957c     13 FB 01 E6 |  if_be	mov	result1, local01
29580     30 00 90 ED |  if_be	jmp	#LR__3493
29584     14 13 02 F6 | 	mov	arg01, local02
29588     02 12 06 F1 | 	add	arg01, #2
2958c     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
29590     FD 2C 0A F6 | 	mov	local04, result1 wz
29594     18 00 90 AD |  if_e	jmp	#LR__3492
29598     16 13 02 F6 | 	mov	arg01, local04
2959c     13 15 02 F6 | 	mov	arg02, local01
295a0     14 17 02 F6 | 	mov	arg03, local02
295a4     C0 DD BF FD | 	call	#__system____builtin_memmove
295a8     16 29 02 F1 | 	add	local02, local04
295ac     14 01 48 FC | 	wrbyte	#0, local02
295b0                 | LR__3492
295b0     16 FB 01 F6 | 	mov	result1, local04
295b4                 | LR__3493
295b4     A7 F0 03 F6 | 	mov	ptra, fp
295b8     B2 00 A0 FD | 	call	#popregs_
295bc                 | __system__Left_S_ret
295bc     2D 00 64 FD | 	ret
295c0                 | 
295c0                 | __system__Right_S
295c0     05 4A 05 F6 | 	mov	COUNT_, #5
295c4     A8 00 A0 FD | 	call	#pushregs_
295c8     09 27 02 F6 | 	mov	local01, arg01
295cc     0A 29 02 F6 | 	mov	local02, arg02
295d0     01 28 56 F2 | 	cmps	local02, #1 wc
295d4     B7 01 00 CF 
295d8     CF FB 05 C6 |  if_b	mov	result1, ##@LR__5434
295dc     64 00 90 CD |  if_b	jmp	#LR__3503
295e0     13 13 02 F6 | 	mov	arg01, local01
295e4     09 2B 02 F6 | 	mov	local03, arg01
295e8     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
295ec                 | LR__3500
295ec     15 FB C9 FA | 	rdbyte	result1, local03 wz
295f0     01 2A 06 51 |  if_ne	add	local03, #1
295f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
295f8                 | LR__3501
295f8     09 2B 82 F1 | 	sub	local03, arg01
295fc     15 FB 01 F6 | 	mov	result1, local03
29600     FD 2C 02 F6 | 	mov	local04, result1
29604     14 2D 5A F2 | 	cmps	local04, local02 wcz
29608     13 FB 01 E6 |  if_be	mov	result1, local01
2960c     34 00 90 ED |  if_be	jmp	#LR__3503
29610     14 13 02 F6 | 	mov	arg01, local02
29614     02 12 06 F1 | 	add	arg01, #2
29618     40 20 B0 FD | 	call	#__system___gc_alloc_managed
2961c     FD 2E 0A F6 | 	mov	local05, result1 wz
29620     1C 00 90 AD |  if_e	jmp	#LR__3502
29624     14 2D 82 F1 | 	sub	local04, local02
29628     13 2D 02 F1 | 	add	local04, local01
2962c     01 28 06 F1 | 	add	local02, #1
29630     17 13 02 F6 | 	mov	arg01, local05
29634     16 15 02 F6 | 	mov	arg02, local04
29638     14 17 02 F6 | 	mov	arg03, local02
2963c     28 DD BF FD | 	call	#__system____builtin_memmove
29640                 | LR__3502
29640     17 FB 01 F6 | 	mov	result1, local05
29644                 | LR__3503
29644     A7 F0 03 F6 | 	mov	ptra, fp
29648     B2 00 A0 FD | 	call	#popregs_
2964c                 | __system__Right_S_ret
2964c     2D 00 64 FD | 	ret
29650                 | 
29650                 | __system__Mid_S
29650     05 4A 05 F6 | 	mov	COUNT_, #5
29654     A8 00 A0 FD | 	call	#pushregs_
29658     09 27 02 F6 | 	mov	local01, arg01
2965c     0A 29 02 F6 | 	mov	local02, arg02
29660     01 16 56 F2 | 	cmps	arg03, #1 wc
29664     B7 01 00 CF 
29668     D0 FB 05 C6 |  if_b	mov	result1, ##@LR__5435
2966c     80 00 90 CD |  if_b	jmp	#LR__3513
29670     01 28 86 F1 | 	sub	local02, #1
29674     00 28 56 F3 | 	fges	local02, #0 wc
29678     13 13 02 F6 | 	mov	arg01, local01
2967c     09 2B 02 F6 | 	mov	local03, arg01
29680     97 06 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
29684                 | LR__3510
29684     15 FB C9 FA | 	rdbyte	result1, local03 wz
29688     01 2A 06 51 |  if_ne	add	local03, #1
2968c     F4 FF 9F 5D |  if_ne	jmp	#LR__3510
29690                 | LR__3511
29690     09 2B 82 F1 | 	sub	local03, arg01
29694     15 FB 01 F6 | 	mov	result1, local03
29698     FD 14 02 F6 | 	mov	arg02, result1
2969c     14 15 52 F2 | 	cmps	arg02, local02 wc
296a0     B7 01 00 CF 
296a4     D1 FB 05 C6 |  if_b	mov	result1, ##@LR__5436
296a8     44 00 90 CD |  if_b	jmp	#LR__3513
296ac     0A 2D 02 F6 | 	mov	local04, arg02
296b0     14 2D 82 F1 | 	sub	local04, local02
296b4     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
296b8     0B 2D 02 16 |  if_a	mov	local04, arg03
296bc     16 13 02 F6 | 	mov	arg01, local04
296c0     02 12 06 F1 | 	add	arg01, #2
296c4     94 1F B0 FD | 	call	#__system___gc_alloc_managed
296c8     FD 2E 0A F6 | 	mov	local05, result1 wz
296cc     1C 00 90 AD |  if_e	jmp	#LR__3512
296d0     13 29 02 F1 | 	add	local02, local01
296d4     17 13 02 F6 | 	mov	arg01, local05
296d8     14 15 02 F6 | 	mov	arg02, local02
296dc     16 17 02 F6 | 	mov	arg03, local04
296e0     84 DC BF FD | 	call	#__system____builtin_memmove
296e4     17 2D 02 F1 | 	add	local04, local05
296e8     16 01 48 FC | 	wrbyte	#0, local04
296ec                 | LR__3512
296ec     17 FB 01 F6 | 	mov	result1, local05
296f0                 | LR__3513
296f0     A7 F0 03 F6 | 	mov	ptra, fp
296f4     B2 00 A0 FD | 	call	#popregs_
296f8                 | __system__Mid_S_ret
296f8     2D 00 64 FD | 	ret
296fc                 | 
296fc                 | __system__Chr_S
296fc     01 4A 05 F6 | 	mov	COUNT_, #1
29700     A8 00 A0 FD | 	call	#pushregs_
29704     09 27 02 F6 | 	mov	local01, arg01
29708     03 12 06 F6 | 	mov	arg01, #3
2970c     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
29710     00 FA 4D F2 | 	cmps	result1, #0 wz
29714     FD 26 42 5C |  if_ne	wrbyte	local01, result1
29718     01 FA 05 51 |  if_ne	add	result1, #1
2971c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
29720     01 FA 85 51 |  if_ne	sub	result1, #1
29724     A7 F0 03 F6 | 	mov	ptra, fp
29728     B2 00 A0 FD | 	call	#popregs_
2972c                 | __system__Chr_S_ret
2972c     2D 00 64 FD | 	ret
29730                 | 
29730                 | __system__str_S
29730     02 4A 05 F6 | 	mov	COUNT_, #2
29734     A8 00 A0 FD | 	call	#pushregs_
29738     09 27 02 F6 | 	mov	local01, arg01
2973c     10 12 06 F6 | 	mov	arg01, #16
29740     18 1F B0 FD | 	call	#__system___gc_alloc_managed
29744     FD 28 0A F6 | 	mov	local02, result1 wz
29748     30 00 90 AD |  if_e	jmp	#LR__3520
2974c     F8 13 02 F6 | 	mov	arg01, ptra
29750     08 F0 07 F1 | 	add	ptra, #8
29754     09 29 62 FC | 	wrlong	local02, arg01
29758     04 12 06 F1 | 	add	arg01, #4
2975c     09 01 68 FC | 	wrlong	#0, arg01
29760     04 12 86 F1 | 	sub	arg01, #4
29764     00 68 05 FF 
29768     00 12 46 F5 | 	or	arg01, ##181403648
2976c     00 14 06 F6 | 	mov	arg02, #0
29770     13 17 02 F6 | 	mov	arg03, local01
29774     67 18 06 F6 | 	mov	arg04, #103
29778     90 EE BF FD | 	call	#__system___fmtfloat
2977c                 | LR__3520
2977c     14 FB 01 F6 | 	mov	result1, local02
29780     A7 F0 03 F6 | 	mov	ptra, fp
29784     B2 00 A0 FD | 	call	#popregs_
29788                 | __system__str_S_ret
29788     2D 00 64 FD | 	ret
2978c                 | 
2978c                 | __system__Number_S
2978c     08 4A 05 F6 | 	mov	COUNT_, #8
29790     A8 00 A0 FD | 	call	#pushregs_
29794     09 27 02 F6 | 	mov	local01, arg01
29798     0A 29 0A F6 | 	mov	local02, arg02 wz
2979c     0B 2B 02 F6 | 	mov	local03, arg03
297a0     3C 00 90 5D |  if_ne	jmp	#LR__3532
297a4     01 28 06 F6 | 	mov	local02, #1
297a8     15 2D 02 F6 | 	mov	local04, local03
297ac     01 2E 06 F6 | 	mov	local05, #1
297b0     97 16 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
297b4                 | LR__3530
297b4     00 30 06 F6 | 	mov	local06, #0
297b8     13 2D 1A F2 | 	cmp	local04, local01 wcz
297bc     01 30 66 E6 |  if_be	neg	local06, #1
297c0     16 2F 12 F2 | 	cmp	local05, local04 wc
297c4     19 33 A2 F1 | 	subx	local07, local07
297c8     19 31 CA F7 | 	test	local06, local07 wz
297cc     15 2D 02 5D |  if_ne	qmul	local04, local03
297d0     16 2F 02 56 |  if_ne	mov	local05, local04
297d4     01 28 06 51 |  if_ne	add	local02, #1
297d8     18 2C 62 5D |  if_ne	getqx	local04
297dc     D4 FF 9F 5D |  if_ne	jmp	#LR__3530
297e0                 | LR__3531
297e0                 | LR__3532
297e0     20 28 36 F3 | 	fle	local02, #32 wc
297e4     14 13 02 F6 | 	mov	arg01, local02
297e8     02 12 06 F1 | 	add	arg01, #2
297ec     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
297f0     FD 30 02 F6 | 	mov	local06, result1
297f4     14 33 02 F6 | 	mov	local07, local02
297f8     18 33 02 F1 | 	add	local07, local06
297fc     19 01 48 FC | 	wrbyte	#0, local07
29800     97 1A 48 FB | 	callpa	#(@LR__3534-@LR__3533)>>2,fcache_load_ptr_
29804                 | LR__3533
29804     01 28 16 F2 | 	cmp	local02, #1 wc
29808     2C 00 90 CD |  if_b	jmp	#LR__3535
2980c     15 27 12 FD | 	qdiv	local01, local03
29810     01 28 86 F1 | 	sub	local02, #1
29814     14 33 02 F6 | 	mov	local07, local02
29818     18 33 02 F1 | 	add	local07, local06
2981c     19 34 62 FD | 	getqy	local08
29820     0A 34 16 F2 | 	cmp	local08, #10 wc
29824     30 34 06 C1 |  if_b	add	local08, #48
29828     37 34 06 31 |  if_ae	add	local08, #55
2982c     19 35 42 FC | 	wrbyte	local08, local07
29830     18 26 62 FD | 	getqx	local01
29834     CC FF 9F FD | 	jmp	#LR__3533
29838                 | LR__3534
29838                 | LR__3535
29838     18 FB 01 F6 | 	mov	result1, local06
2983c     A7 F0 03 F6 | 	mov	ptra, fp
29840     B2 00 A0 FD | 	call	#popregs_
29844                 | __system__Number_S_ret
29844     2D 00 64 FD | 	ret
29848                 | 
29848                 | __system__LCase_S
29848     07 4A 05 F6 | 	mov	COUNT_, #7
2984c     A8 00 A0 FD | 	call	#pushregs_
29850     09 27 02 F6 | 	mov	local01, arg01
29854     09 29 02 F6 | 	mov	local02, arg01
29858     97 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
2985c                 | LR__3540
2985c     14 FB C9 FA | 	rdbyte	result1, local02 wz
29860     01 28 06 51 |  if_ne	add	local02, #1
29864     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
29868                 | LR__3541
29868     09 29 82 F1 | 	sub	local02, arg01
2986c     14 FB 01 F6 | 	mov	result1, local02
29870     FD 28 0A F6 | 	mov	local02, result1 wz
29874     B7 01 00 AF 
29878     D2 FB 05 A6 |  if_e	mov	result1, ##@LR__5437
2987c     7C 00 90 AD |  if_e	jmp	#LR__3547
29880     14 13 02 F6 | 	mov	arg01, local02
29884     02 12 06 F1 | 	add	arg01, #2
29888     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
2988c     FD 2A 0A F6 | 	mov	local03, result1 wz
29890     64 00 90 AD |  if_e	jmp	#LR__3546
29894     01 2C 66 F6 | 	neg	local04, #1
29898     97 26 48 FB | 	callpa	#(@LR__3545-@LR__3542)>>2,fcache_load_ptr_
2989c                 | LR__3542
2989c     01 2C 06 F1 | 	add	local04, #1
298a0     16 2F 02 F6 | 	mov	local05, local04
298a4     13 2F 02 F1 | 	add	local05, local01
298a8     17 31 C2 FA | 	rdbyte	local06, local05
298ac     41 30 56 F2 | 	cmps	local06, #65 wc
298b0     18 00 90 CD |  if_b	jmp	#LR__3543
298b4     5B 30 56 F2 | 	cmps	local06, #91 wc
298b8     16 33 02 C6 |  if_b	mov	local07, local04
298bc     15 33 02 C1 |  if_b	add	local07, local03
298c0     20 30 06 C1 |  if_b	add	local06, #32
298c4     19 31 42 CC |  if_b	wrbyte	local06, local07
298c8     0C 00 90 CD |  if_b	jmp	#LR__3544
298cc                 | LR__3543
298cc     16 33 02 F6 | 	mov	local07, local04
298d0     15 33 02 F1 | 	add	local07, local03
298d4     19 31 42 FC | 	wrbyte	local06, local07
298d8                 | LR__3544
298d8     14 31 02 F6 | 	mov	local06, local02
298dc     01 30 86 F1 | 	sub	local06, #1
298e0     18 2D 0A F2 | 	cmp	local04, local06 wz
298e4     B4 FF 9F 5D |  if_ne	jmp	#LR__3542
298e8                 | LR__3545
298e8     15 29 02 F1 | 	add	local02, local03
298ec     14 01 48 FC | 	wrbyte	#0, local02
298f0     15 FB 01 F6 | 	mov	result1, local03
298f4     04 00 90 FD | 	jmp	#LR__3547
298f8                 | LR__3546
298f8     15 FB 01 F6 | 	mov	result1, local03
298fc                 | LR__3547
298fc     A7 F0 03 F6 | 	mov	ptra, fp
29900     B2 00 A0 FD | 	call	#popregs_
29904                 | __system__LCase_S_ret
29904     2D 00 64 FD | 	ret
29908                 | 
29908                 | __system__LTrim_S
29908     05 4A 05 F6 | 	mov	COUNT_, #5
2990c     A8 00 A0 FD | 	call	#pushregs_
29910     09 27 02 F6 | 	mov	local01, arg01
29914     09 29 02 F6 | 	mov	local02, arg01
29918     97 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
2991c                 | LR__3550
2991c     14 FB C9 FA | 	rdbyte	result1, local02 wz
29920     01 28 06 51 |  if_ne	add	local02, #1
29924     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
29928                 | LR__3551
29928     09 29 82 F1 | 	sub	local02, arg01
2992c     14 FB 01 F6 | 	mov	result1, local02
29930     FD 28 0A F6 | 	mov	local02, result1 wz
29934     B7 01 00 AF 
29938     D3 FB 05 A6 |  if_e	mov	result1, ##@LR__5438
2993c     7C 00 90 AD |  if_e	jmp	#LR__3556
29940     00 2A 06 F6 | 	mov	local03, #0
29944     14 2D 02 F6 | 	mov	local04, local02
29948                 | LR__3552
29948     16 2B 52 F2 | 	cmps	local03, local04 wc
2994c     68 00 90 3D |  if_ae	jmp	#LR__3555
29950     15 17 02 F6 | 	mov	arg03, local03
29954     13 17 02 F1 | 	add	arg03, local01
29958     0B 17 C2 FA | 	rdbyte	arg03, arg03
2995c     20 16 0E F2 | 	cmp	arg03, #32 wz
29960     4C 00 90 AD |  if_e	jmp	#LR__3554
29964     14 13 02 F6 | 	mov	arg01, local02
29968     15 13 82 F1 | 	sub	arg01, local03
2996c     02 12 06 F1 | 	add	arg01, #2
29970     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
29974     FD 2E 0A F6 | 	mov	local05, result1 wz
29978     2C 00 90 AD |  if_e	jmp	#LR__3553
2997c     15 15 02 F6 | 	mov	arg02, local03
29980     13 15 02 F1 | 	add	arg02, local01
29984     14 17 02 F6 | 	mov	arg03, local02
29988     15 17 82 F1 | 	sub	arg03, local03
2998c     17 13 02 F6 | 	mov	arg01, local05
29990     D4 D9 BF FD | 	call	#__system____builtin_memmove
29994     15 29 82 F1 | 	sub	local02, local03
29998     17 29 02 F1 | 	add	local02, local05
2999c     14 01 48 FC | 	wrbyte	#0, local02
299a0     17 FB 01 F6 | 	mov	result1, local05
299a4     14 00 90 FD | 	jmp	#LR__3556
299a8                 | LR__3553
299a8     17 FB 01 F6 | 	mov	result1, local05
299ac     0C 00 90 FD | 	jmp	#LR__3556
299b0                 | LR__3554
299b0     01 2A 06 F1 | 	add	local03, #1
299b4     90 FF 9F FD | 	jmp	#LR__3552
299b8                 | LR__3555
299b8     13 FB 01 F6 | 	mov	result1, local01
299bc                 | LR__3556
299bc     A7 F0 03 F6 | 	mov	ptra, fp
299c0     B2 00 A0 FD | 	call	#popregs_
299c4                 | __system__LTrim_S_ret
299c4     2D 00 64 FD | 	ret
299c8                 | 
299c8                 | __system__RTrim_S
299c8     04 4A 05 F6 | 	mov	COUNT_, #4
299cc     A8 00 A0 FD | 	call	#pushregs_
299d0     09 27 02 F6 | 	mov	local01, arg01
299d4     09 29 02 F6 | 	mov	local02, arg01
299d8     97 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
299dc                 | LR__3560
299dc     14 FB C9 FA | 	rdbyte	result1, local02 wz
299e0     01 28 06 51 |  if_ne	add	local02, #1
299e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
299e8                 | LR__3561
299e8     09 29 82 F1 | 	sub	local02, arg01
299ec     14 FB 01 F6 | 	mov	result1, local02
299f0     FD 28 0A F6 | 	mov	local02, result1 wz
299f4     B7 01 00 AF 
299f8     D4 FB 05 A6 |  if_e	mov	result1, ##@LR__5439
299fc     74 00 90 AD |  if_e	jmp	#LR__3565
29a00     14 2B 02 F6 | 	mov	local03, local02
29a04     01 2A 86 F1 | 	sub	local03, #1
29a08                 | LR__3562
29a08     15 15 02 F6 | 	mov	arg02, local03
29a0c     13 15 02 F1 | 	add	arg02, local01
29a10     0A 29 C2 FA | 	rdbyte	local02, arg02
29a14     20 28 0E F2 | 	cmp	local02, #32 wz
29a18     44 00 90 AD |  if_e	jmp	#LR__3564
29a1c     15 13 02 F6 | 	mov	arg01, local03
29a20     02 12 06 F1 | 	add	arg01, #2
29a24     34 1C B0 FD | 	call	#__system___gc_alloc_managed
29a28     FD 2C 0A F6 | 	mov	local04, result1 wz
29a2c     28 00 90 AD |  if_e	jmp	#LR__3563
29a30     15 17 02 F6 | 	mov	arg03, local03
29a34     01 16 06 F1 | 	add	arg03, #1
29a38     16 13 02 F6 | 	mov	arg01, local04
29a3c     13 15 02 F6 | 	mov	arg02, local01
29a40     24 D9 BF FD | 	call	#__system____builtin_memmove
29a44     01 2A 06 F1 | 	add	local03, #1
29a48     16 2B 02 F1 | 	add	local03, local04
29a4c     15 01 48 FC | 	wrbyte	#0, local03
29a50     16 FB 01 F6 | 	mov	result1, local04
29a54     1C 00 90 FD | 	jmp	#LR__3565
29a58                 | LR__3563
29a58     16 FB 01 F6 | 	mov	result1, local04
29a5c     14 00 90 FD | 	jmp	#LR__3565
29a60                 | LR__3564
29a60     01 2A 86 F1 | 	sub	local03, #1
29a64     00 2A 56 F2 | 	cmps	local03, #0 wc
29a68     9C FF 9F 3D |  if_ae	jmp	#LR__3562
29a6c     B7 01 00 FF 
29a70     D5 FB 05 F6 | 	mov	result1, ##@LR__5440
29a74                 | LR__3565
29a74     A7 F0 03 F6 | 	mov	ptra, fp
29a78     B2 00 A0 FD | 	call	#popregs_
29a7c                 | __system__RTrim_S_ret
29a7c     2D 00 64 FD | 	ret
29a80                 | 
29a80                 | __system__Instr
29a80     07 4A 05 F6 | 	mov	COUNT_, #7
29a84     A8 00 A0 FD | 	call	#pushregs_
29a88     09 27 02 F6 | 	mov	local01, arg01
29a8c     0A 29 02 F6 | 	mov	local02, arg02
29a90     0B 2B 02 F6 | 	mov	local03, arg03
29a94     15 13 02 F6 | 	mov	arg01, local03
29a98     09 2D 02 F6 | 	mov	local04, arg01
29a9c     97 06 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
29aa0                 | LR__3570
29aa0     16 FB C9 FA | 	rdbyte	result1, local04 wz
29aa4     01 2C 06 51 |  if_ne	add	local04, #1
29aa8     F4 FF 9F 5D |  if_ne	jmp	#LR__3570
29aac                 | LR__3571
29aac     09 2D 82 F1 | 	sub	local04, arg01
29ab0     16 2F 02 F6 | 	mov	local05, local04
29ab4     14 13 02 F6 | 	mov	arg01, local02
29ab8     09 2D 02 F6 | 	mov	local04, arg01
29abc     97 06 48 FB | 	callpa	#(@LR__3573-@LR__3572)>>2,fcache_load_ptr_
29ac0                 | LR__3572
29ac0     16 FB C9 FA | 	rdbyte	result1, local04 wz
29ac4     01 2C 06 51 |  if_ne	add	local04, #1
29ac8     F4 FF 9F 5D |  if_ne	jmp	#LR__3572
29acc                 | LR__3573
29acc     09 2D 82 F1 | 	sub	local04, arg01
29ad0     16 FB 01 F6 | 	mov	result1, local04
29ad4     FD 18 0A F6 | 	mov	arg04, result1 wz
29ad8     00 FA 05 A6 |  if_e	mov	result1, #0
29adc     98 00 90 AD |  if_e	jmp	#LR__3577
29ae0     00 2E 0E F2 | 	cmp	local05, #0 wz
29ae4     00 FA 05 A6 |  if_e	mov	result1, #0
29ae8     8C 00 90 AD |  if_e	jmp	#LR__3577
29aec     0C 27 5A F2 | 	cmps	local01, arg04 wcz
29af0     00 FA 05 16 |  if_a	mov	result1, #0
29af4     80 00 90 1D |  if_a	jmp	#LR__3577
29af8     01 26 56 F2 | 	cmps	local01, #1 wc
29afc     01 26 06 C6 |  if_b	mov	local01, #1
29b00     15 31 C2 FA | 	rdbyte	local06, local03
29b04     01 2E 0E F2 | 	cmp	local05, #1 wz
29b08     18 00 90 5D |  if_ne	jmp	#LR__3574
29b0c     14 13 02 F6 | 	mov	arg01, local02
29b10     18 15 02 F6 | 	mov	arg02, local06
29b14     13 17 02 F6 | 	mov	arg03, local01
29b18     00 18 06 F6 | 	mov	arg04, #0
29b1c     14 37 B0 FD | 	call	#__system____ScanForChar
29b20     54 00 90 FD | 	jmp	#LR__3577
29b24                 | LR__3574
29b24     13 33 02 F6 | 	mov	local07, local01
29b28                 | LR__3575
29b28     14 13 02 F6 | 	mov	arg01, local02
29b2c     18 15 02 F6 | 	mov	arg02, local06
29b30     19 17 02 F6 | 	mov	arg03, local07
29b34     00 18 06 F6 | 	mov	arg04, #0
29b38     F8 36 B0 FD | 	call	#__system____ScanForChar
29b3c     FD 32 0A F6 | 	mov	local07, result1 wz
29b40     30 00 90 AD |  if_e	jmp	#LR__3576
29b44     17 17 02 F6 | 	mov	arg03, local05
29b48     14 13 02 F6 | 	mov	arg01, local02
29b4c     19 15 02 F6 | 	mov	arg02, local07
29b50     FC FA BF FD | 	call	#__system__Mid_S
29b54     FD 12 02 F6 | 	mov	arg01, result1
29b58     15 15 02 F6 | 	mov	arg02, local03
29b5c     80 D9 BF FD | 	call	#__system___string_cmp
29b60     00 FA 0D F2 | 	cmp	result1, #0 wz
29b64     19 FB 01 A6 |  if_e	mov	result1, local07
29b68     0C 00 90 AD |  if_e	jmp	#LR__3577
29b6c     17 33 02 F1 | 	add	local07, local05
29b70     B4 FF 9F FD | 	jmp	#LR__3575
29b74                 | LR__3576
29b74     00 FA 05 F6 | 	mov	result1, #0
29b78                 | LR__3577
29b78     A7 F0 03 F6 | 	mov	ptra, fp
29b7c     B2 00 A0 FD | 	call	#popregs_
29b80                 | __system__Instr_ret
29b80     2D 00 64 FD | 	ret
29b84                 | 
29b84                 | __system__InstrRev
29b84     07 4A 05 F6 | 	mov	COUNT_, #7
29b88     A8 00 A0 FD | 	call	#pushregs_
29b8c     09 27 02 F6 | 	mov	local01, arg01
29b90     0A 29 02 F6 | 	mov	local02, arg02
29b94     0B 2B 02 F6 | 	mov	local03, arg03
29b98     15 13 02 F6 | 	mov	arg01, local03
29b9c     09 2D 02 F6 | 	mov	local04, arg01
29ba0     97 06 48 FB | 	callpa	#(@LR__3581-@LR__3580)>>2,fcache_load_ptr_
29ba4                 | LR__3580
29ba4     16 FB C9 FA | 	rdbyte	result1, local04 wz
29ba8     01 2C 06 51 |  if_ne	add	local04, #1
29bac     F4 FF 9F 5D |  if_ne	jmp	#LR__3580
29bb0                 | LR__3581
29bb0     09 2D 82 F1 | 	sub	local04, arg01
29bb4     16 2F 02 F6 | 	mov	local05, local04
29bb8     14 13 02 F6 | 	mov	arg01, local02
29bbc     09 2D 02 F6 | 	mov	local04, arg01
29bc0     97 06 48 FB | 	callpa	#(@LR__3583-@LR__3582)>>2,fcache_load_ptr_
29bc4                 | LR__3582
29bc4     16 FB C9 FA | 	rdbyte	result1, local04 wz
29bc8     01 2C 06 51 |  if_ne	add	local04, #1
29bcc     F4 FF 9F 5D |  if_ne	jmp	#LR__3582
29bd0                 | LR__3583
29bd0     09 2D 82 F1 | 	sub	local04, arg01
29bd4     16 FB 01 F6 | 	mov	result1, local04
29bd8     FD 18 0A F6 | 	mov	arg04, result1 wz
29bdc     00 FA 05 A6 |  if_e	mov	result1, #0
29be0     98 00 90 AD |  if_e	jmp	#LR__3587
29be4     00 2E 0E F2 | 	cmp	local05, #0 wz
29be8     00 FA 05 A6 |  if_e	mov	result1, #0
29bec     8C 00 90 AD |  if_e	jmp	#LR__3587
29bf0     0C 27 5A F2 | 	cmps	local01, arg04 wcz
29bf4     0C 27 02 16 |  if_a	mov	local01, arg04
29bf8     01 26 56 F2 | 	cmps	local01, #1 wc
29bfc     01 26 06 C6 |  if_b	mov	local01, #1
29c00     15 31 C2 FA | 	rdbyte	local06, local03
29c04     01 2E 0E F2 | 	cmp	local05, #1 wz
29c08     18 00 90 5D |  if_ne	jmp	#LR__3584
29c0c     14 13 02 F6 | 	mov	arg01, local02
29c10     18 15 02 F6 | 	mov	arg02, local06
29c14     13 17 02 F6 | 	mov	arg03, local01
29c18     01 18 06 F6 | 	mov	arg04, #1
29c1c     14 36 B0 FD | 	call	#__system____ScanForChar
29c20     58 00 90 FD | 	jmp	#LR__3587
29c24                 | LR__3584
29c24     17 33 02 F6 | 	mov	local07, local05
29c28     01 32 86 F1 | 	sub	local07, #1
29c2c                 | LR__3585
29c2c     14 13 02 F6 | 	mov	arg01, local02
29c30     18 15 02 F6 | 	mov	arg02, local06
29c34     19 17 02 F6 | 	mov	arg03, local07
29c38     01 18 06 F6 | 	mov	arg04, #1
29c3c     F4 35 B0 FD | 	call	#__system____ScanForChar
29c40     FD 32 0A F6 | 	mov	local07, result1 wz
29c44     30 00 90 AD |  if_e	jmp	#LR__3586
29c48     17 17 02 F6 | 	mov	arg03, local05
29c4c     14 13 02 F6 | 	mov	arg01, local02
29c50     19 15 02 F6 | 	mov	arg02, local07
29c54     F8 F9 BF FD | 	call	#__system__Mid_S
29c58     FD 12 02 F6 | 	mov	arg01, result1
29c5c     15 15 02 F6 | 	mov	arg02, local03
29c60     7C D8 BF FD | 	call	#__system___string_cmp
29c64     00 FA 0D F2 | 	cmp	result1, #0 wz
29c68     19 FB 01 A6 |  if_e	mov	result1, local07
29c6c     0C 00 90 AD |  if_e	jmp	#LR__3587
29c70     17 33 82 F1 | 	sub	local07, local05
29c74     B4 FF 9F FD | 	jmp	#LR__3585
29c78                 | LR__3586
29c78     00 FA 05 F6 | 	mov	result1, #0
29c7c                 | LR__3587
29c7c     A7 F0 03 F6 | 	mov	ptra, fp
29c80     B2 00 A0 FD | 	call	#popregs_
29c84                 | __system__InstrRev_ret
29c84     2D 00 64 FD | 	ret
29c88                 | 
29c88                 | __system___remove
29c88     06 4A 05 F6 | 	mov	COUNT_, #6
29c8c     A8 00 A0 FD | 	call	#pushregs_
29c90     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29c94     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
29c98     09 15 02 F6 | 	mov	arg02, arg01
29c9c     13 13 02 F6 | 	mov	arg01, local01
29ca0     00 16 06 F6 | 	mov	arg03, #0
29ca4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29ca8     A4 DF BF FD | 	call	#__system____getvfsforfile
29cac     FD 28 0A F6 | 	mov	local02, result1 wz
29cb0     10 00 90 AD |  if_e	jmp	#LR__3590
29cb4     20 28 06 F1 | 	add	local02, #32
29cb8     14 13 0A FB | 	rdlong	arg01, local02 wz
29cbc     20 28 86 F1 | 	sub	local02, #32
29cc0     14 00 90 5D |  if_ne	jmp	#LR__3591
29cc4                 | LR__3590
29cc4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29cc8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29ccc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29cd0     01 FA 65 F6 | 	neg	result1, #1
29cd4     A8 00 90 FD | 	jmp	#LR__3594
29cd8                 | LR__3591
29cd8     40 28 06 F1 | 	add	local02, #64
29cdc     14 2B 02 FB | 	rdlong	local03, local02
29ce0     15 2D 02 F6 | 	mov	local04, local03
29ce4     40 28 86 F1 | 	sub	local02, #64
29ce8     13 2C 46 F7 | 	zerox	local04, #19
29cec     14 2A 46 F0 | 	shr	local03, #20
29cf0     02 2A 66 F0 | 	shl	local03, #2
29cf4     ED 2A 02 F1 | 	add	local03, __methods__
29cf8     15 2B 02 FB | 	rdlong	local03, local03
29cfc     13 13 02 F6 | 	mov	arg01, local01
29d00     F2 2E 02 F6 | 	mov	local05, objptr
29d04     16 E5 01 F6 | 	mov	objptr, local04
29d08     2D 2A 62 FD | 	call	local03
29d0c     17 E5 01 F6 | 	mov	objptr, local05
29d10     FD 30 02 F6 | 	mov	local06, result1
29d14     FF FF 7F FF 
29d18     F2 31 0E F2 | 	cmp	local06, ##-14 wz
29d1c     38 00 90 5D |  if_ne	jmp	#LR__3592
29d20     3C 28 06 F1 | 	add	local02, #60
29d24     14 31 02 FB | 	rdlong	local06, local02
29d28     18 2B 02 F6 | 	mov	local03, local06
29d2c     13 30 46 F7 | 	zerox	local06, #19
29d30     14 2A 46 F0 | 	shr	local03, #20
29d34     02 2A 66 F0 | 	shl	local03, #2
29d38     ED 2A 02 F1 | 	add	local03, __methods__
29d3c     15 2B 02 FB | 	rdlong	local03, local03
29d40     13 13 02 F6 | 	mov	arg01, local01
29d44     F2 2E 02 F6 | 	mov	local05, objptr
29d48     18 E5 01 F6 | 	mov	objptr, local06
29d4c     2D 2A 62 FD | 	call	local03
29d50     17 E5 01 F6 | 	mov	objptr, local05
29d54     FD 30 02 F6 | 	mov	local06, result1
29d58                 | LR__3592
29d58     00 30 0E F2 | 	cmp	local06, #0 wz
29d5c     1C 00 90 AD |  if_e	jmp	#LR__3593
29d60     18 13 6A F6 | 	neg	arg01, local06 wz
29d64     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29d68     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29d6c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29d70     01 FA 65 56 |  if_ne	neg	result1, #1
29d74     00 FA 05 A6 |  if_e	mov	result1, #0
29d78     04 00 90 FD | 	jmp	#LR__3594
29d7c                 | LR__3593
29d7c     00 FA 05 F6 | 	mov	result1, #0
29d80                 | LR__3594
29d80     A7 F0 03 F6 | 	mov	ptra, fp
29d84     B2 00 A0 FD | 	call	#popregs_
29d88                 | __system___remove_ret
29d88     2D 00 64 FD | 	ret
29d8c                 | 
29d8c                 | __system___mkdir
29d8c     05 4A 05 F6 | 	mov	COUNT_, #5
29d90     A8 00 A0 FD | 	call	#pushregs_
29d94     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29d98     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
29d9c     09 15 02 F6 | 	mov	arg02, arg01
29da0     13 13 02 F6 | 	mov	arg01, local01
29da4     00 16 06 F6 | 	mov	arg03, #0
29da8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29dac     A0 DE BF FD | 	call	#__system____getvfsforfile
29db0     FD 28 0A F6 | 	mov	local02, result1 wz
29db4     10 00 90 AD |  if_e	jmp	#LR__3600
29db8     20 28 06 F1 | 	add	local02, #32
29dbc     14 15 0A FB | 	rdlong	arg02, local02 wz
29dc0     20 28 86 F1 | 	sub	local02, #32
29dc4     14 00 90 5D |  if_ne	jmp	#LR__3601
29dc8                 | LR__3600
29dc8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29dcc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29dd0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29dd4     01 FA 65 F6 | 	neg	result1, #1
29dd8     60 00 90 FD | 	jmp	#LR__3603
29ddc                 | LR__3601
29ddc     38 28 06 F1 | 	add	local02, #56
29de0     14 2B 02 FB | 	rdlong	local03, local02
29de4     15 2D 02 F6 | 	mov	local04, local03
29de8     13 2A 46 F7 | 	zerox	local03, #19
29dec     14 2C 46 F0 | 	shr	local04, #20
29df0     02 2C 66 F0 | 	shl	local04, #2
29df4     ED 2C 02 F1 | 	add	local04, __methods__
29df8     16 2D 02 FB | 	rdlong	local04, local04
29dfc     13 13 02 F6 | 	mov	arg01, local01
29e00     FF 15 06 F6 | 	mov	arg02, #511
29e04     F2 2E 02 F6 | 	mov	local05, objptr
29e08     15 E5 01 F6 | 	mov	objptr, local03
29e0c     2D 2C 62 FD | 	call	local04
29e10     17 E5 01 F6 | 	mov	objptr, local05
29e14     FD 12 0A F6 | 	mov	arg01, result1 wz
29e18     1C 00 90 AD |  if_e	jmp	#LR__3602
29e1c     09 13 6A F6 | 	neg	arg01, arg01 wz
29e20     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29e24     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29e28     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29e2c     01 FA 65 56 |  if_ne	neg	result1, #1
29e30     00 FA 05 A6 |  if_e	mov	result1, #0
29e34     04 00 90 FD | 	jmp	#LR__3603
29e38                 | LR__3602
29e38     00 FA 05 F6 | 	mov	result1, #0
29e3c                 | LR__3603
29e3c     A7 F0 03 F6 | 	mov	ptra, fp
29e40     B2 00 A0 FD | 	call	#popregs_
29e44                 | __system___mkdir_ret
29e44     2D 00 64 FD | 	ret
29e48                 | 
29e48                 | __system___strerror
29e48     00 12 56 F2 | 	cmps	arg01, #0 wc
29e4c     08 00 90 CD |  if_b	jmp	#LR__3610
29e50     1A 12 56 F2 | 	cmps	arg01, #26 wc
29e54     04 00 90 CD |  if_b	jmp	#LR__3611
29e58                 | LR__3610
29e58     19 12 06 F6 | 	mov	arg01, #25
29e5c                 | LR__3611
29e5c     02 12 66 F0 | 	shl	arg01, #2
29e60     01 00 00 FF 
29e64     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
29e68     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
29e6c     09 FB 01 FB | 	rdlong	result1, arg01
29e70     01 00 00 FF 
29e74     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
29e78                 | __system___strerror_ret
29e78     2D 00 64 FD | 	ret
29e7c                 | 
29e7c                 | __system___int64_shl
29e7c     20 16 CE F7 | 	test	arg03, #32 wz
29e80     09 15 02 56 |  if_ne	mov	arg02, arg01
29e84     00 12 06 56 |  if_ne	mov	arg01, #0
29e88     1F 16 CE F7 | 	test	arg03, #31 wz
29e8c     18 00 90 AD |  if_e	jmp	#LR__3620
29e90     0B 15 62 F0 | 	shl	arg02, arg03
29e94     09 FB 01 F6 | 	mov	result1, arg01
29e98     0B FD 61 F6 | 	neg	result2, arg03
29e9c     FE FA 41 F0 | 	shr	result1, result2
29ea0     FD 14 42 F5 | 	or	arg02, result1
29ea4     0B 13 62 F0 | 	shl	arg01, arg03
29ea8                 | LR__3620
29ea8     0A FD 01 F6 | 	mov	result2, arg02
29eac     09 FB 01 F6 | 	mov	result1, arg01
29eb0                 | __system___int64_shl_ret
29eb0     2D 00 64 FD | 	ret
29eb4                 | 
29eb4                 | __system___usepins
29eb4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29eb8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29ebc     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
29ec0     00 13 CA F7 | 	test	arg01, _var01 wz
29ec4     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
29ec8     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
29ecc     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
29ed0     01 15 CA A7 |  if_e	test	arg02, _var02 wz
29ed4     00 FA 05 56 |  if_ne	mov	result1, #0
29ed8     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
29edc     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29ee0     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29ee4     09 03 42 F5 | 	or	_var02, arg01
29ee8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29eec     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29ef0     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29ef4     0A 03 42 F5 | 	or	_var02, arg02
29ef8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29efc     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
29f00     01 FA 65 F6 | 	neg	result1, #1
29f04                 | __system___usepins_ret
29f04     2D 00 64 FD | 	ret
29f08                 | 
29f08                 | __system___freepins
29f08     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29f0c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29f10     09 01 22 F5 | 	andn	_var01, arg01
29f14     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29f18     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29f1c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29f20     0A 01 22 F5 | 	andn	_var01, arg02
29f24     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29f28     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
29f2c                 | __system___freepins_ret
29f2c     2D 00 64 FD | 	ret
29f30                 | 
29f30                 | __system___float_fromuns
29f30     09 17 0A F6 | 	mov	arg03, arg01 wz
29f34     0B FB 01 A6 |  if_e	mov	result1, arg03
29f38     24 00 90 AD |  if_e	jmp	#LR__3630
29f3c     0B 15 92 F7 | 	encod	arg02, arg03 wc
29f40     01 14 06 C1 |  if_b	add	arg02, #1
29f44     01 14 86 F1 | 	sub	arg02, #1
29f48     1F 12 06 F6 | 	mov	arg01, #31
29f4c     0A 13 82 F1 | 	sub	arg01, arg02
29f50     09 17 62 F0 | 	shl	arg03, arg01
29f54     02 16 46 F0 | 	shr	arg03, #2
29f58     00 12 06 F6 | 	mov	arg01, #0
29f5c     4C 09 B0 FD | 	call	#__system___float_Pack
29f60                 | LR__3630
29f60                 | __system___float_fromuns_ret
29f60     2D 00 64 FD | 	ret
29f64                 | 
29f64                 | __system___float_add
29f64     0F 4A 05 F6 | 	mov	COUNT_, #15
29f68     A8 00 A0 FD | 	call	#pushregs_
29f6c     09 27 02 F6 | 	mov	local01, arg01
29f70     0A 29 02 F6 | 	mov	local02, arg02
29f74     00 2A 06 F6 | 	mov	local03, #0
29f78     13 2D 02 F6 | 	mov	local04, local01
29f7c     16 2F 02 F6 | 	mov	local05, local04
29f80     16 2E 46 F7 | 	zerox	local05, #22
29f84     16 31 02 F6 | 	mov	local06, local04
29f88     01 30 66 F0 | 	shl	local06, #1
29f8c     18 30 46 F0 | 	shr	local06, #24
29f90     1F 2C 46 F0 | 	shr	local04, #31
29f94     14 13 02 F6 | 	mov	arg01, local02
29f98     09 FB 01 F6 | 	mov	result1, arg01
29f9c     FD 32 02 F6 | 	mov	local07, result1
29fa0     19 35 02 F6 | 	mov	local08, local07
29fa4     16 34 46 F7 | 	zerox	local08, #22
29fa8     19 37 02 F6 | 	mov	local09, local07
29fac     01 36 66 F0 | 	shl	local09, #1
29fb0     18 36 46 F0 | 	shr	local09, #24
29fb4     1B 39 02 F6 | 	mov	local10, local09
29fb8     1F 32 46 F0 | 	shr	local07, #31
29fbc     00 3A 06 F6 | 	mov	local11, #0
29fc0     00 3C 06 F6 | 	mov	local12, #0
29fc4     1C 31 12 F2 | 	cmp	local06, local10 wc
29fc8     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
29fcc     2C 00 90 1D |  if_a	jmp	#LR__3640
29fd0     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
29fd4     24 00 90 3D |  if_ae	jmp	#LR__3640
29fd8     17 3F 02 F6 | 	mov	local13, local05
29fdc     1A 2F 02 F6 | 	mov	local05, local08
29fe0     1F 35 02 F6 | 	mov	local08, local13
29fe4     18 3F 02 F6 | 	mov	local13, local06
29fe8     1C 31 02 F6 | 	mov	local06, local10
29fec     1F 39 02 F6 | 	mov	local10, local13
29ff0     16 3F 02 F6 | 	mov	local13, local04
29ff4     19 2D 02 F6 | 	mov	local04, local07
29ff8     1F 33 02 F6 | 	mov	local07, local13
29ffc                 | LR__3640
29ffc     FF 30 0E F2 | 	cmp	local06, #255 wz
2a000     70 01 90 AD |  if_e	jmp	#LR__3655
2a004     00 30 0E F2 | 	cmp	local06, #0 wz
2a008     AC 01 90 AD |  if_e	jmp	#LR__3657
2a00c     17 2E 26 F4 | 	bith	local05, #23
2a010                 | LR__3641
2a010     00 38 0E F2 | 	cmp	local10, #0 wz
2a014     F0 01 90 AD |  if_e	jmp	#LR__3661
2a018     17 34 26 F4 | 	bith	local08, #23
2a01c                 | LR__3642
2a01c     7F 30 86 F1 | 	sub	local06, #127
2a020     7F 38 86 F1 | 	sub	local10, #127
2a024     18 41 02 F6 | 	mov	local14, local06
2a028     1C 41 82 F1 | 	sub	local14, local10
2a02c     97 14 48 FB | 	callpa	#(@LR__3644-@LR__3643)>>2,fcache_load_ptr_
2a030                 | LR__3643
2a030     20 40 56 F2 | 	cmps	local14, #32 wc
2a034     20 00 90 CD |  if_b	jmp	#LR__3645
2a038     1A 37 02 F6 | 	mov	local09, local08
2a03c     00 3A 0E F2 | 	cmp	local11, #0 wz
2a040     6F 3A 62 FD | 	wrnz	local11
2a044     1D 37 42 F5 | 	or	local09, local11
2a048     1B 3B 02 F6 | 	mov	local11, local09
2a04c     00 34 06 F6 | 	mov	local08, #0
2a050     20 40 86 F1 | 	sub	local14, #32
2a054     D8 FF 9F FD | 	jmp	#LR__3643
2a058                 | LR__3644
2a058                 | LR__3645
2a058     00 40 0E F2 | 	cmp	local14, #0 wz
2a05c     38 00 90 AD |  if_e	jmp	#LR__3646
2a060     1A 3F 02 F6 | 	mov	local13, local08
2a064     20 38 06 F6 | 	mov	local10, #32
2a068     20 39 82 F1 | 	sub	local10, local14
2a06c     1C 3F 62 F0 | 	shl	local13, local10
2a070     1D 39 02 F6 | 	mov	local10, local11
2a074     20 36 06 F6 | 	mov	local09, #32
2a078     20 37 82 F1 | 	sub	local09, local14
2a07c     1B 39 6A F0 | 	shl	local10, local09 wz
2a080     20 3B 42 F0 | 	shr	local11, local14
2a084     20 35 42 F0 | 	shr	local08, local14
2a088     1F 3B 42 F5 | 	or	local11, local13
2a08c     00 42 06 F6 | 	mov	local15, #0
2a090     01 42 06 56 |  if_ne	mov	local15, #1
2a094     21 3B 42 F5 | 	or	local11, local15
2a098                 | LR__3646
2a098     16 43 02 F6 | 	mov	local15, local04
2a09c     19 43 62 F5 | 	xor	local15, local07
2a0a0     01 42 CE F7 | 	test	local15, #1 wz
2a0a4     18 00 90 AD |  if_e	jmp	#LR__3647
2a0a8     1A 35 22 F6 | 	not	local08, local08
2a0ac     1D 3B 22 F6 | 	not	local11, local11
2a0b0     01 3A 0E F1 | 	add	local11, #1 wz
2a0b4     00 42 06 F6 | 	mov	local15, #0
2a0b8     01 42 06 A6 |  if_e	mov	local15, #1
2a0bc     21 35 02 F1 | 	add	local08, local15
2a0c0                 | LR__3647
2a0c0     1D 3D 12 F1 | 	add	local12, local11 wc
2a0c4     1A 2F 22 F1 | 	addx	local05, local08
2a0c8     00 2E 56 F2 | 	cmps	local05, #0 wc
2a0cc     1C 00 90 3D |  if_ae	jmp	#LR__3648
2a0d0     01 2C 66 F5 | 	xor	local04, #1
2a0d4     17 2F 22 F6 | 	not	local05, local05
2a0d8     1E 3D 22 F6 | 	not	local12, local12
2a0dc     01 3C 0E F1 | 	add	local12, #1 wz
2a0e0     00 42 06 F6 | 	mov	local15, #0
2a0e4     01 42 06 A6 |  if_e	mov	local15, #1
2a0e8     21 2F 02 F1 | 	add	local05, local15
2a0ec                 | LR__3648
2a0ec     00 80 00 FF 
2a0f0     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
2a0f4     28 00 90 CD |  if_b	jmp	#LR__3649
2a0f8     01 30 06 F1 | 	add	local06, #1
2a0fc     1E 41 02 F6 | 	mov	local14, local12
2a100     01 40 06 F5 | 	and	local14, #1
2a104     01 3C 46 F0 | 	shr	local12, #1
2a108     17 43 02 F6 | 	mov	local15, local05
2a10c     1F 42 66 F0 | 	shl	local15, #31
2a110     21 3D 42 F5 | 	or	local12, local15
2a114     20 3D 42 F5 | 	or	local12, local14
2a118     01 2E 46 F0 | 	shr	local05, #1
2a11c     3C 00 90 FD | 	jmp	#LR__3654
2a120                 | LR__3649
2a120     00 40 00 FF 
2a124     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2a128     30 00 90 3D |  if_ae	jmp	#LR__3653
2a12c     00 2E 0E F2 | 	cmp	local05, #0 wz
2a130     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
2a134     08 2C 46 A5 |  if_e	or	local04, #8
2a138     01 2C 26 A5 |  if_e	andn	local04, #1
2a13c     1C 00 90 AD |  if_e	jmp	#LR__3652
2a140                 | LR__3650
2a140     00 40 00 FF 
2a144     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2a148     10 00 90 3D |  if_ae	jmp	#LR__3651
2a14c     1E 3D 12 F1 | 	add	local12, local12 wc
2a150     17 2F 22 F1 | 	addx	local05, local05
2a154     01 30 86 F1 | 	sub	local06, #1
2a158     E4 FF 9F FD | 	jmp	#LR__3650
2a15c                 | LR__3651
2a15c                 | LR__3652
2a15c                 | LR__3653
2a15c                 | LR__3654
2a15c     17 13 02 F6 | 	mov	arg01, local05
2a160     1E 15 02 F6 | 	mov	arg02, local12
2a164     18 17 02 F6 | 	mov	arg03, local06
2a168     16 19 02 F6 | 	mov	arg04, local04
2a16c     08 35 B0 FD | 	call	#__system__pack_0691
2a170     DC 00 90 FD | 	jmp	#LR__3665
2a174                 | LR__3655
2a174     FF 38 0E F2 | 	cmp	local10, #255 wz
2a178     10 00 90 5D |  if_ne	jmp	#LR__3656
2a17c     16 33 0A F2 | 	cmp	local07, local04 wz
2a180     00 F8 3F 5F 
2a184     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2a188     C4 00 90 5D |  if_ne	jmp	#LR__3665
2a18c                 | LR__3656
2a18c     00 2E 0E F2 | 	cmp	local05, #0 wz
2a190     00 F8 3F 5F 
2a194     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2a198     B4 00 90 5D |  if_ne	jmp	#LR__3665
2a19c     1E 15 02 F6 | 	mov	arg02, local12
2a1a0     18 17 02 F6 | 	mov	arg03, local06
2a1a4     16 19 02 F6 | 	mov	arg04, local04
2a1a8     02 18 46 F5 | 	or	arg04, #2
2a1ac     17 13 02 F6 | 	mov	arg01, local05
2a1b0     C4 34 B0 FD | 	call	#__system__pack_0691
2a1b4     98 00 90 FD | 	jmp	#LR__3665
2a1b8                 | LR__3657
2a1b8     00 2E 0E F2 | 	cmp	local05, #0 wz
2a1bc     28 00 90 AD |  if_e	jmp	#LR__3660
2a1c0     01 2E 66 F0 | 	shl	local05, #1
2a1c4     97 0E 48 FB | 	callpa	#(@LR__3659-@LR__3658)>>2,fcache_load_ptr_
2a1c8                 | LR__3658
2a1c8     00 40 00 FF 
2a1cc     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2a1d0     18 43 02 C6 |  if_b	mov	local15, local06
2a1d4     01 42 86 C1 |  if_b	sub	local15, #1
2a1d8     21 31 02 C6 |  if_b	mov	local06, local15
2a1dc     01 2E 66 C0 |  if_b	shl	local05, #1
2a1e0     E4 FF 9F CD |  if_b	jmp	#LR__3658
2a1e4                 | LR__3659
2a1e4     28 FE 9F FD | 	jmp	#LR__3641
2a1e8                 | LR__3660
2a1e8     19 2D 02 F5 | 	and	local04, local07
2a1ec     16 19 02 F6 | 	mov	arg04, local04
2a1f0     08 18 46 F5 | 	or	arg04, #8
2a1f4     00 12 06 F6 | 	mov	arg01, #0
2a1f8     00 14 06 F6 | 	mov	arg02, #0
2a1fc     00 16 06 F6 | 	mov	arg03, #0
2a200     74 34 B0 FD | 	call	#__system__pack_0691
2a204     48 00 90 FD | 	jmp	#LR__3665
2a208                 | LR__3661
2a208     00 34 0E F2 | 	cmp	local08, #0 wz
2a20c     28 00 90 AD |  if_e	jmp	#LR__3664
2a210     01 34 66 F0 | 	shl	local08, #1
2a214     97 0E 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
2a218                 | LR__3662
2a218     00 40 00 FF 
2a21c     00 34 16 F2 | 	cmp	local08, ##8388608 wc
2a220     1C 43 02 C6 |  if_b	mov	local15, local10
2a224     01 42 86 C1 |  if_b	sub	local15, #1
2a228     21 39 02 C6 |  if_b	mov	local10, local15
2a22c     01 34 66 C0 |  if_b	shl	local08, #1
2a230     E4 FF 9F CD |  if_b	jmp	#LR__3662
2a234                 | LR__3663
2a234     E4 FD 9F FD | 	jmp	#LR__3642
2a238                 | LR__3664
2a238     7F 30 86 F1 | 	sub	local06, #127
2a23c     17 13 02 F6 | 	mov	arg01, local05
2a240     1E 15 02 F6 | 	mov	arg02, local12
2a244     18 17 02 F6 | 	mov	arg03, local06
2a248     16 19 02 F6 | 	mov	arg04, local04
2a24c     28 34 B0 FD | 	call	#__system__pack_0691
2a250                 | LR__3665
2a250     A7 F0 03 F6 | 	mov	ptra, fp
2a254     B2 00 A0 FD | 	call	#popregs_
2a258                 | __system___float_add_ret
2a258     2D 00 64 FD | 	ret
2a25c                 | 
2a25c                 | __system___float_sqrt
2a25c     04 4A 05 F6 | 	mov	COUNT_, #4
2a260     A8 00 A0 FD | 	call	#pushregs_
2a264     09 27 02 F6 | 	mov	local01, arg01
2a268     09 FB 01 F6 | 	mov	result1, arg01
2a26c     FD 28 02 F6 | 	mov	local02, result1
2a270     14 2B 02 F6 | 	mov	local03, local02
2a274     16 2A 46 F7 | 	zerox	local03, #22
2a278     14 2D 02 F6 | 	mov	local04, local02
2a27c     01 2C 66 F0 | 	shl	local04, #1
2a280     18 2C 4E F0 | 	shr	local04, #24 wz
2a284     1F 28 46 F0 | 	shr	local02, #31
2a288     70 00 90 AD |  if_e	jmp	#LR__3671
2a28c     17 2A 26 F4 | 	bith	local03, #23
2a290                 | LR__3670
2a290     00 28 0E F2 | 	cmp	local02, #0 wz
2a294     00 F8 3F 5F 
2a298     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2a29c     88 00 90 5D |  if_ne	jmp	#LR__3674
2a2a0     FF 2C 0E F2 | 	cmp	local04, #255 wz
2a2a4     13 FB 01 A6 |  if_e	mov	result1, local01
2a2a8     7C 00 90 AD |  if_e	jmp	#LR__3674
2a2ac     7F 2C 86 F1 | 	sub	local04, #127
2a2b0     01 2C CE F7 | 	test	local04, #1 wz
2a2b4     01 2A 66 50 |  if_ne	shl	local03, #1
2a2b8     05 2A 66 F0 | 	shl	local03, #5
2a2bc     15 01 38 FD | 	qsqrt	#0, local03
2a2c0     01 2C 86 51 |  if_ne	sub	local04, #1
2a2c4     16 2D 52 F6 | 	abs	local04, local04 wc
2a2c8     01 2C 46 F0 | 	shr	local04, #1
2a2cc     16 17 82 F6 | 	negc	arg03, local04
2a2d0     14 19 02 F6 | 	mov	arg04, local02
2a2d4     18 12 62 FD | 	getqx	arg01
2a2d8     09 15 02 F6 | 	mov	arg02, arg01
2a2dc     19 14 66 F0 | 	shl	arg02, #25
2a2e0     07 12 46 F0 | 	shr	arg01, #7
2a2e4     00 80 00 FF 
2a2e8     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
2a2ec     01 16 06 31 |  if_ae	add	arg03, #1
2a2f0     01 12 46 30 |  if_ae	shr	arg01, #1
2a2f4     80 33 B0 FD | 	call	#__system__pack_0691
2a2f8     2C 00 90 FD | 	jmp	#LR__3674
2a2fc                 | LR__3671
2a2fc     00 2A 0E F2 | 	cmp	local03, #0 wz
2a300     13 FB 01 A6 |  if_e	mov	result1, local01
2a304     20 00 90 AD |  if_e	jmp	#LR__3674
2a308     01 2A 66 F0 | 	shl	local03, #1
2a30c     97 0A 48 FB | 	callpa	#(@LR__3673-@LR__3672)>>2,fcache_load_ptr_
2a310                 | LR__3672
2a310     00 40 00 FF 
2a314     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
2a318     01 2C 86 C1 |  if_b	sub	local04, #1
2a31c     01 2A 66 C0 |  if_b	shl	local03, #1
2a320     EC FF 9F CD |  if_b	jmp	#LR__3672
2a324                 | LR__3673
2a324     68 FF 9F FD | 	jmp	#LR__3670
2a328                 | LR__3674
2a328     A7 F0 03 F6 | 	mov	ptra, fp
2a32c     B2 00 A0 FD | 	call	#popregs_
2a330                 | __system___float_sqrt_ret
2a330     2D 00 64 FD | 	ret
2a334                 | 
2a334                 | __system___float_mul
2a334     0B 4A 05 F6 | 	mov	COUNT_, #11
2a338     A8 00 A0 FD | 	call	#pushregs_
2a33c     09 27 02 F6 | 	mov	local01, arg01
2a340     0A 29 02 F6 | 	mov	local02, arg02
2a344     13 2B 02 F6 | 	mov	local03, local01
2a348     15 2D 02 F6 | 	mov	local04, local03
2a34c     16 2C 46 F7 | 	zerox	local04, #22
2a350     15 2F 02 F6 | 	mov	local05, local03
2a354     01 2E 66 F0 | 	shl	local05, #1
2a358     18 2E 46 F0 | 	shr	local05, #24
2a35c     1F 2A 46 F0 | 	shr	local03, #31
2a360     14 FB 01 F6 | 	mov	result1, local02
2a364     FD 30 02 F6 | 	mov	local06, result1
2a368     18 33 02 F6 | 	mov	local07, local06
2a36c     16 32 46 F7 | 	zerox	local07, #22
2a370     18 35 02 F6 | 	mov	local08, local06
2a374     01 34 66 F0 | 	shl	local08, #1
2a378     18 34 46 F0 | 	shr	local08, #24
2a37c     1F 30 46 F0 | 	shr	local06, #31
2a380     18 2B 62 F5 | 	xor	local03, local06
2a384     FF 2E 0E F2 | 	cmp	local05, #255 wz
2a388     90 00 90 AD |  if_e	jmp	#LR__3683
2a38c     FF 34 0E F2 | 	cmp	local08, #255 wz
2a390     D8 00 90 AD |  if_e	jmp	#LR__3685
2a394     00 2E 0E F2 | 	cmp	local05, #0 wz
2a398     0C 01 90 AD |  if_e	jmp	#LR__3686
2a39c     17 2C 26 F4 | 	bith	local04, #23
2a3a0                 | LR__3680
2a3a0     00 34 0E F2 | 	cmp	local08, #0 wz
2a3a4     44 01 90 AD |  if_e	jmp	#LR__3690
2a3a8     17 32 26 F4 | 	bith	local07, #23
2a3ac                 | LR__3681
2a3ac     16 29 02 F6 | 	mov	local02, local04
2a3b0     04 28 66 F0 | 	shl	local02, #4
2a3b4     19 31 02 F6 | 	mov	local06, local07
2a3b8     05 30 66 F0 | 	shl	local06, #5
2a3bc     18 29 02 FD | 	qmul	local02, local06
2a3c0     1A 2F 02 F1 | 	add	local05, local08
2a3c4     FE 2E 86 F1 | 	sub	local05, #254
2a3c8     17 37 02 F6 | 	mov	local09, local05
2a3cc     04 2C 66 F0 | 	shl	local04, #4
2a3d0     05 32 66 F0 | 	shl	local07, #5
2a3d4     18 38 62 FD | 	getqx	local10
2a3d8     19 2D 02 FD | 	qmul	local04, local07
2a3dc     19 3A 62 FD | 	getqy	local11
2a3e0     00 80 00 FF 
2a3e4     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
2a3e8     18 00 90 CD |  if_b	jmp	#LR__3682
2a3ec     01 36 06 F1 | 	add	local09, #1
2a3f0     01 38 46 F0 | 	shr	local10, #1
2a3f4     1D 35 02 F6 | 	mov	local08, local11
2a3f8     1F 34 66 F0 | 	shl	local08, #31
2a3fc     1A 39 42 F5 | 	or	local10, local08
2a400     01 3A 46 F0 | 	shr	local11, #1
2a404                 | LR__3682
2a404     1D 13 02 F6 | 	mov	arg01, local11
2a408     1C 15 02 F6 | 	mov	arg02, local10
2a40c     1B 17 02 F6 | 	mov	arg03, local09
2a410     15 19 02 F6 | 	mov	arg04, local03
2a414     60 32 B0 FD | 	call	#__system__pack_0691
2a418     10 01 90 FD | 	jmp	#LR__3694
2a41c                 | LR__3683
2a41c     00 2C 0E F2 | 	cmp	local04, #0 wz
2a420     13 FB 01 56 |  if_ne	mov	result1, local01
2a424     04 01 90 5D |  if_ne	jmp	#LR__3694
2a428     FF 34 56 F2 | 	cmps	local08, #255 wc
2a42c     00 34 0E C2 |  if_b	cmp	local08, #0 wz
2a430     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
2a434     18 00 90 4D |  if_c_and_nz	jmp	#LR__3684
2a438     00 F8 3F CF 
2a43c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2a440     E8 00 90 CD |  if_b	jmp	#LR__3694
2a444     00 32 0E F2 | 	cmp	local07, #0 wz
2a448     14 FB 01 56 |  if_ne	mov	result1, local02
2a44c     DC 00 90 5D |  if_ne	jmp	#LR__3694
2a450                 | LR__3684
2a450     02 2A 46 F5 | 	or	local03, #2
2a454     00 12 06 F6 | 	mov	arg01, #0
2a458     00 14 06 F6 | 	mov	arg02, #0
2a45c     17 17 02 F6 | 	mov	arg03, local05
2a460     15 19 02 F6 | 	mov	arg04, local03
2a464     10 32 B0 FD | 	call	#__system__pack_0691
2a468     C0 00 90 FD | 	jmp	#LR__3694
2a46c                 | LR__3685
2a46c     00 2E 0E F2 | 	cmp	local05, #0 wz
2a470     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
2a474     00 F8 3F AF 
2a478     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a47c     AC 00 90 AD |  if_e	jmp	#LR__3694
2a480     00 32 0E F2 | 	cmp	local07, #0 wz
2a484     14 FB 01 56 |  if_ne	mov	result1, local02
2a488     A0 00 90 5D |  if_ne	jmp	#LR__3694
2a48c     1A 17 02 F6 | 	mov	arg03, local08
2a490     15 19 02 F6 | 	mov	arg04, local03
2a494     02 18 46 F5 | 	or	arg04, #2
2a498     00 12 06 F6 | 	mov	arg01, #0
2a49c     00 14 06 F6 | 	mov	arg02, #0
2a4a0     D4 31 B0 FD | 	call	#__system__pack_0691
2a4a4     84 00 90 FD | 	jmp	#LR__3694
2a4a8                 | LR__3686
2a4a8     00 2C 0E F2 | 	cmp	local04, #0 wz
2a4ac     20 00 90 AD |  if_e	jmp	#LR__3689
2a4b0     01 2C 66 F0 | 	shl	local04, #1
2a4b4     97 0A 48 FB | 	callpa	#(@LR__3688-@LR__3687)>>2,fcache_load_ptr_
2a4b8                 | LR__3687
2a4b8     00 40 00 FF 
2a4bc     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
2a4c0     01 2E 86 C1 |  if_b	sub	local05, #1
2a4c4     01 2C 66 C0 |  if_b	shl	local04, #1
2a4c8     EC FF 9F CD |  if_b	jmp	#LR__3687
2a4cc                 | LR__3688
2a4cc     D0 FE 9F FD | 	jmp	#LR__3680
2a4d0                 | LR__3689
2a4d0     08 2A 46 F5 | 	or	local03, #8
2a4d4     00 12 06 F6 | 	mov	arg01, #0
2a4d8     00 14 06 F6 | 	mov	arg02, #0
2a4dc     00 16 06 F6 | 	mov	arg03, #0
2a4e0     15 19 02 F6 | 	mov	arg04, local03
2a4e4     90 31 B0 FD | 	call	#__system__pack_0691
2a4e8     40 00 90 FD | 	jmp	#LR__3694
2a4ec                 | LR__3690
2a4ec     00 32 0E F2 | 	cmp	local07, #0 wz
2a4f0     20 00 90 AD |  if_e	jmp	#LR__3693
2a4f4     01 32 66 F0 | 	shl	local07, #1
2a4f8     97 0A 48 FB | 	callpa	#(@LR__3692-@LR__3691)>>2,fcache_load_ptr_
2a4fc                 | LR__3691
2a4fc     00 40 00 FF 
2a500     00 32 16 F2 | 	cmp	local07, ##8388608 wc
2a504     01 34 86 C1 |  if_b	sub	local08, #1
2a508     01 32 66 C0 |  if_b	shl	local07, #1
2a50c     EC FF 9F CD |  if_b	jmp	#LR__3691
2a510                 | LR__3692
2a510     98 FE 9F FD | 	jmp	#LR__3681
2a514                 | LR__3693
2a514     08 2A 46 F5 | 	or	local03, #8
2a518     00 12 06 F6 | 	mov	arg01, #0
2a51c     00 14 06 F6 | 	mov	arg02, #0
2a520     00 16 06 F6 | 	mov	arg03, #0
2a524     15 19 02 F6 | 	mov	arg04, local03
2a528     4C 31 B0 FD | 	call	#__system__pack_0691
2a52c                 | LR__3694
2a52c     A7 F0 03 F6 | 	mov	ptra, fp
2a530     B2 00 A0 FD | 	call	#popregs_
2a534                 | __system___float_mul_ret
2a534     2D 00 64 FD | 	ret
2a538                 | 
2a538                 | __system___float_div
2a538     0E 4A 05 F6 | 	mov	COUNT_, #14
2a53c     A8 00 A0 FD | 	call	#pushregs_
2a540     09 2B 02 F6 | 	mov	local03, arg01
2a544     0A 2D 02 F6 | 	mov	local04, arg02
2a548     15 2F 02 F6 | 	mov	local05, local03
2a54c     17 31 02 F6 | 	mov	local06, local05
2a550     16 30 46 F7 | 	zerox	local06, #22
2a554     17 33 02 F6 | 	mov	local07, local05
2a558     01 32 66 F0 | 	shl	local07, #1
2a55c     18 32 46 F0 | 	shr	local07, #24
2a560     1F 2E 46 F0 | 	shr	local05, #31
2a564     16 FB 01 F6 | 	mov	result1, local04
2a568     FD 34 02 F6 | 	mov	local08, result1
2a56c     1A 37 02 F6 | 	mov	local09, local08
2a570     16 36 46 F7 | 	zerox	local09, #22
2a574     1A 39 02 F6 | 	mov	local10, local08
2a578     01 38 66 F0 | 	shl	local10, #1
2a57c     18 38 46 F0 | 	shr	local10, #24
2a580     1F 34 46 F0 | 	shr	local08, #31
2a584     1A 2F 62 F5 | 	xor	local05, local08
2a588     FF 32 0E F2 | 	cmp	local07, #255 wz
2a58c     D4 00 90 AD |  if_e	jmp	#LR__3705
2a590     FF 38 0E F2 | 	cmp	local10, #255 wz
2a594     04 01 90 AD |  if_e	jmp	#LR__3706
2a598     00 32 0E F2 | 	cmp	local07, #0 wz
2a59c     24 01 90 AD |  if_e	jmp	#LR__3707
2a5a0     17 30 26 F4 | 	bith	local06, #23
2a5a4                 | LR__3700
2a5a4     00 38 0E F2 | 	cmp	local10, #0 wz
2a5a8     70 01 90 AD |  if_e	jmp	#LR__3711
2a5ac     17 36 26 F4 | 	bith	local09, #23
2a5b0                 | LR__3701
2a5b0     1C 33 82 F1 | 	sub	local07, local10
2a5b4     19 3B 02 F6 | 	mov	local11, local07
2a5b8     18 13 02 F6 | 	mov	arg01, local06
2a5bc     02 12 46 F0 | 	shr	arg01, #2
2a5c0     1E 30 66 F0 | 	shl	local06, #30
2a5c4     18 15 02 F6 | 	mov	arg02, local06
2a5c8     1B 17 02 F6 | 	mov	arg03, local09
2a5cc     28 12 62 FD | 	setq	arg01
2a5d0     0B 15 12 FD | 	qdiv	arg02, arg03
2a5d4     00 3C 06 F6 | 	mov	local12, #0
2a5d8     18 26 62 FD | 	getqx	local01
2a5dc     19 FC 61 FD | 	getqy	result2
2a5e0     FE 28 02 F6 | 	mov	local02, result2
2a5e4     13 3F 02 F6 | 	mov	local13, local01
2a5e8     00 28 4E F2 | 	cmps	local02, #0 wz
2a5ec     1F 41 02 F6 | 	mov	local14, local13
2a5f0     19 40 66 F0 | 	shl	local14, #25
2a5f4     01 3C 06 56 |  if_ne	mov	local12, #1
2a5f8     1E 41 42 F5 | 	or	local14, local12
2a5fc     07 3E 46 F0 | 	shr	local13, #7
2a600     00 80 00 FF 
2a604     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
2a608     1C 00 90 CD |  if_b	jmp	#LR__3702
2a60c     01 3A 06 F1 | 	add	local11, #1
2a610     01 40 46 F0 | 	shr	local14, #1
2a614     1F 3D 02 F6 | 	mov	local12, local13
2a618     1F 3C 66 F0 | 	shl	local12, #31
2a61c     1E 41 42 F5 | 	or	local14, local12
2a620     01 3E 46 F0 | 	shr	local13, #1
2a624     24 00 90 FD | 	jmp	#LR__3704
2a628                 | LR__3702
2a628     00 40 00 FF 
2a62c     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
2a630     18 00 90 3D |  if_ae	jmp	#LR__3703
2a634     01 3A 86 F1 | 	sub	local11, #1
2a638     01 3E 66 F0 | 	shl	local13, #1
2a63c     20 3D 02 F6 | 	mov	local12, local14
2a640     1F 3C 46 F0 | 	shr	local12, #31
2a644     1E 3F 42 F5 | 	or	local13, local12
2a648     01 40 66 F0 | 	shl	local14, #1
2a64c                 | LR__3703
2a64c                 | LR__3704
2a64c     1F 13 02 F6 | 	mov	arg01, local13
2a650     20 15 02 F6 | 	mov	arg02, local14
2a654     1D 17 02 F6 | 	mov	arg03, local11
2a658     17 19 02 F6 | 	mov	arg04, local05
2a65c     18 30 B0 FD | 	call	#__system__pack_0691
2a660     F8 00 90 FD | 	jmp	#LR__3715
2a664                 | LR__3705
2a664     00 30 0E F2 | 	cmp	local06, #0 wz
2a668     15 FB 01 56 |  if_ne	mov	result1, local03
2a66c     EC 00 90 5D |  if_ne	jmp	#LR__3715
2a670     FF 38 0E F2 | 	cmp	local10, #255 wz
2a674     00 F8 3F AF 
2a678     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a67c     DC 00 90 AD |  if_e	jmp	#LR__3715
2a680     02 2E 46 F5 | 	or	local05, #2
2a684     00 12 06 F6 | 	mov	arg01, #0
2a688     00 14 06 F6 | 	mov	arg02, #0
2a68c     19 17 02 F6 | 	mov	arg03, local07
2a690     17 19 02 F6 | 	mov	arg04, local05
2a694     E0 2F B0 FD | 	call	#__system__pack_0691
2a698     C0 00 90 FD | 	jmp	#LR__3715
2a69c                 | LR__3706
2a69c     00 36 0E F2 | 	cmp	local09, #0 wz
2a6a0     16 FB 01 56 |  if_ne	mov	result1, local04
2a6a4     B4 00 90 5D |  if_ne	jmp	#LR__3715
2a6a8     17 19 02 F6 | 	mov	arg04, local05
2a6ac     08 18 46 F5 | 	or	arg04, #8
2a6b0     00 12 06 F6 | 	mov	arg01, #0
2a6b4     00 14 06 F6 | 	mov	arg02, #0
2a6b8     00 16 06 F6 | 	mov	arg03, #0
2a6bc     B8 2F B0 FD | 	call	#__system__pack_0691
2a6c0     98 00 90 FD | 	jmp	#LR__3715
2a6c4                 | LR__3707
2a6c4     00 30 0E F2 | 	cmp	local06, #0 wz
2a6c8     20 00 90 AD |  if_e	jmp	#LR__3710
2a6cc     01 30 66 F0 | 	shl	local06, #1
2a6d0     97 0A 48 FB | 	callpa	#(@LR__3709-@LR__3708)>>2,fcache_load_ptr_
2a6d4                 | LR__3708
2a6d4     00 40 00 FF 
2a6d8     00 30 16 F2 | 	cmp	local06, ##8388608 wc
2a6dc     01 32 86 C1 |  if_b	sub	local07, #1
2a6e0     01 30 66 C0 |  if_b	shl	local06, #1
2a6e4     EC FF 9F CD |  if_b	jmp	#LR__3708
2a6e8                 | LR__3709
2a6e8     B8 FE 9F FD | 	jmp	#LR__3700
2a6ec                 | LR__3710
2a6ec     00 38 0E F2 | 	cmp	local10, #0 wz
2a6f0     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2a6f4     00 F8 3F AF 
2a6f8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a6fc     5C 00 90 AD |  if_e	jmp	#LR__3715
2a700     17 19 02 F6 | 	mov	arg04, local05
2a704     08 18 46 F5 | 	or	arg04, #8
2a708     00 12 06 F6 | 	mov	arg01, #0
2a70c     00 14 06 F6 | 	mov	arg02, #0
2a710     00 16 06 F6 | 	mov	arg03, #0
2a714     60 2F B0 FD | 	call	#__system__pack_0691
2a718     40 00 90 FD | 	jmp	#LR__3715
2a71c                 | LR__3711
2a71c     00 36 0E F2 | 	cmp	local09, #0 wz
2a720     20 00 90 AD |  if_e	jmp	#LR__3714
2a724     01 36 66 F0 | 	shl	local09, #1
2a728     97 0A 48 FB | 	callpa	#(@LR__3713-@LR__3712)>>2,fcache_load_ptr_
2a72c                 | LR__3712
2a72c     00 40 00 FF 
2a730     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2a734     01 38 86 C1 |  if_b	sub	local10, #1
2a738     01 36 66 C0 |  if_b	shl	local09, #1
2a73c     EC FF 9F CD |  if_b	jmp	#LR__3712
2a740                 | LR__3713
2a740     6C FE 9F FD | 	jmp	#LR__3701
2a744                 | LR__3714
2a744     02 2E 46 F5 | 	or	local05, #2
2a748     00 12 06 F6 | 	mov	arg01, #0
2a74c     00 14 06 F6 | 	mov	arg02, #0
2a750     00 16 06 F6 | 	mov	arg03, #0
2a754     17 19 02 F6 | 	mov	arg04, local05
2a758     1C 2F B0 FD | 	call	#__system__pack_0691
2a75c                 | LR__3715
2a75c     A7 F0 03 F6 | 	mov	ptra, fp
2a760     B2 00 A0 FD | 	call	#popregs_
2a764                 | __system___float_div_ret
2a764     2D 00 64 FD | 	ret
2a768                 | 
2a768                 | __system___float_cmp
2a768     00 C0 3F FF 
2a76c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2a770     00 C0 3F CF 
2a774     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2a778     0B FB 01 36 |  if_ae	mov	result1, arg03
2a77c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2a780     00 C0 7F FF 
2a784     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2a788     00 C0 7F CF 
2a78c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2a790     0B FB 01 36 |  if_ae	mov	result1, arg03
2a794     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2a798     00 12 56 F2 | 	cmps	arg01, #0 wc
2a79c     2C 00 90 3D |  if_ae	jmp	#LR__3720
2a7a0     00 14 56 F2 | 	cmps	arg02, #0 wc
2a7a4     0A FB 01 C6 |  if_b	mov	result1, arg02
2a7a8     09 FB 81 C1 |  if_b	sub	result1, arg01
2a7ac     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2a7b0     00 14 0E F2 | 	cmp	arg02, #0 wz
2a7b4     00 00 40 AF 
2a7b8     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2a7bc     00 FA 05 A6 |  if_e	mov	result1, #0
2a7c0     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2a7c4     01 FA 65 F6 | 	neg	result1, #1
2a7c8     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2a7cc                 | LR__3720
2a7cc     00 14 56 F2 | 	cmps	arg02, #0 wc
2a7d0     1C 00 90 3D |  if_ae	jmp	#LR__3721
2a7d4     00 12 0E F2 | 	cmp	arg01, #0 wz
2a7d8     00 00 40 AF 
2a7dc     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2a7e0     00 FA 05 A6 |  if_e	mov	result1, #0
2a7e4     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2a7e8     01 FA 05 F6 | 	mov	result1, #1
2a7ec     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2a7f0                 | LR__3721
2a7f0     0A 13 82 F1 | 	sub	arg01, arg02
2a7f4     09 FB 01 F6 | 	mov	result1, arg01
2a7f8                 | __system___float_cmp_ret
2a7f8     2D 00 64 FD | 	ret
2a7fc                 | 
2a7fc                 | __system___float_tointeger
2a7fc     02 4A 05 F6 | 	mov	COUNT_, #2
2a800     A8 00 A0 FD | 	call	#pushregs_
2a804     50 00 B0 FD | 	call	#__system___float_Unpack
2a808     FF FF 7F FF 
2a80c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2a810     34 00 90 CD |  if_b	jmp	#LR__3730
2a814     1F FC 55 F2 | 	cmps	result2, #31 wc
2a818     2C 00 90 3D |  if_ae	jmp	#LR__3730
2a81c     02 FE 65 F0 | 	shl	result3, #2
2a820     1E 26 06 F6 | 	mov	local01, #30
2a824     FE 26 82 F1 | 	sub	local01, result2
2a828     13 FF 41 F0 | 	shr	result3, local01
2a82c     FF 28 02 F6 | 	mov	local02, result3
2a830     0A 29 02 F1 | 	add	local02, arg02
2a834     01 28 46 F0 | 	shr	local02, #1
2a838     00 FA 0D F2 | 	cmp	result1, #0 wz
2a83c     14 29 62 56 |  if_ne	neg	local02, local02
2a840     14 FB 01 F6 | 	mov	result1, local02
2a844     04 00 90 FD | 	jmp	#LR__3731
2a848                 | LR__3730
2a848     00 FA 05 F6 | 	mov	result1, #0
2a84c                 | LR__3731
2a84c     A7 F0 03 F6 | 	mov	ptra, fp
2a850     B2 00 A0 FD | 	call	#popregs_
2a854                 | __system___float_tointeger_ret
2a854     2D 00 64 FD | 	ret
2a858                 | 
2a858                 | __system___float_Unpack
2a858     09 01 02 F6 | 	mov	_var01, arg01
2a85c     1F 00 46 F0 | 	shr	_var01, #31
2a860     09 03 02 F6 | 	mov	_var02, arg01
2a864     01 02 66 F0 | 	shl	_var02, #1
2a868     18 02 4E F0 | 	shr	_var02, #24 wz
2a86c     17 13 06 F4 | 	bitl	arg01, #279
2a870     06 12 66 50 |  if_ne	shl	arg01, #6
2a874     1D 12 26 54 |  if_ne	bith	arg01, #29
2a878     1C 00 90 5D |  if_ne	jmp	#LR__3740
2a87c     09 05 92 F7 | 	encod	_var03, arg01 wc
2a880     01 04 06 C1 |  if_b	add	_var03, #1
2a884     17 04 86 F1 | 	sub	_var03, #23
2a888     02 03 02 F6 | 	mov	_var02, _var03
2a88c     07 FC 05 F6 | 	mov	result2, #7
2a890     02 FD 81 F1 | 	sub	result2, _var03
2a894     FE 12 62 F0 | 	shl	arg01, result2
2a898                 | LR__3740
2a898     7F 02 86 F1 | 	sub	_var02, #127
2a89c     09 FF 01 F6 | 	mov	result3, arg01
2a8a0     00 FB 01 F6 | 	mov	result1, _var01
2a8a4     01 FD 01 F6 | 	mov	result2, _var02
2a8a8                 | __system___float_Unpack_ret
2a8a8     2D 00 64 FD | 	ret
2a8ac                 | 
2a8ac                 | __system___float_Pack
2a8ac     00 00 06 F6 | 	mov	_var01, #0
2a8b0     00 16 0E F2 | 	cmp	arg03, #0 wz
2a8b4     8C 00 90 AD |  if_e	jmp	#LR__3751
2a8b8     0B 03 92 F7 | 	encod	_var02, arg03 wc
2a8bc     01 02 06 C1 |  if_b	add	_var02, #1
2a8c0     21 00 06 F6 | 	mov	_var01, #33
2a8c4     01 01 82 F1 | 	sub	_var01, _var02
2a8c8     00 17 62 F0 | 	shl	arg03, _var01
2a8cc     03 02 06 F6 | 	mov	_var02, #3
2a8d0     00 03 82 F1 | 	sub	_var02, _var01
2a8d4     01 15 02 F1 | 	add	arg02, _var02
2a8d8     0A 05 02 F6 | 	mov	_var03, arg02
2a8dc     00 17 06 F1 | 	add	arg03, #256
2a8e0     0B 03 02 F6 | 	mov	_var02, arg03
2a8e4     FF 02 2E F5 | 	andn	_var02, #255 wz
2a8e8     01 04 06 A1 |  if_e	add	_var03, #1
2a8ec     7F 04 06 F1 | 	add	_var03, #127
2a8f0     FF FF 7F FF 
2a8f4     E9 05 46 F3 | 	fges	_var03, ##-23
2a8f8     FF 04 66 F3 | 	fles	_var03, #255
2a8fc     01 04 56 F2 | 	cmps	_var03, #1 wc
2a900     1C 00 90 3D |  if_ae	jmp	#LR__3750
2a904     01 16 46 F0 | 	shr	arg03, #1
2a908     1F 02 C6 F9 | 	decod	_var02, #31
2a90c     0B 03 02 F1 | 	add	_var02, arg03
2a910     02 05 62 F6 | 	neg	_var03, _var03
2a914     02 03 42 F0 | 	shr	_var02, _var03
2a918     01 17 02 F6 | 	mov	arg03, _var02
2a91c     00 04 06 F6 | 	mov	_var03, #0
2a920                 | LR__3750
2a920     09 FB 01 F6 | 	mov	result1, arg01
2a924     1F FA 65 F0 | 	shl	result1, #31
2a928     02 03 02 F6 | 	mov	_var02, _var03
2a92c     17 02 66 F0 | 	shl	_var02, #23
2a930     01 FB 41 F5 | 	or	result1, _var02
2a934     0B 07 02 F6 | 	mov	_var04, arg03
2a938     09 06 46 F0 | 	shr	_var04, #9
2a93c     03 FB 41 F5 | 	or	result1, _var04
2a940     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2a944                 | LR__3751
2a944     00 FB 01 F6 | 	mov	result1, _var01
2a948                 | __system___float_Pack_ret
2a948     2D 00 64 FD | 	ret
2a94c                 | 
2a94c                 | __system___basic_print_float
2a94c     05 4A 05 F6 | 	mov	COUNT_, #5
2a950     A8 00 A0 FD | 	call	#pushregs_
2a954     09 27 02 F6 | 	mov	local01, arg01
2a958     0A 29 02 F6 | 	mov	local02, arg02
2a95c     0B 2B 0A F6 | 	mov	local03, arg03 wz
2a960     0C 2D 02 F6 | 	mov	local04, arg04
2a964     14 00 90 5D |  if_ne	jmp	#LR__3760
2a968     23 2C 0E F2 | 	cmp	local04, #35 wz
2a96c     80 02 10 AF 
2a970     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2a974     1D 2E C6 59 |  if_ne	decod	local05, #29
2a978     17 2B 02 F6 | 	mov	local03, local05
2a97c                 | LR__3760
2a97c     13 13 02 F6 | 	mov	arg01, local01
2a980     28 28 B0 FD | 	call	#__system___gettxfunc
2a984     FD 2E 0A F6 | 	mov	local05, result1 wz
2a988     00 FA 05 A6 |  if_e	mov	result1, #0
2a98c     17 13 02 56 |  if_ne	mov	arg01, local05
2a990     15 15 02 56 |  if_ne	mov	arg02, local03
2a994     14 17 02 56 |  if_ne	mov	arg03, local02
2a998     16 19 02 56 |  if_ne	mov	arg04, local04
2a99c     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
2a9a0     A7 F0 03 F6 | 	mov	ptra, fp
2a9a4     B2 00 A0 FD | 	call	#popregs_
2a9a8                 | __system___basic_print_float_ret
2a9a8     2D 00 64 FD | 	ret
2a9ac                 | 
2a9ac                 | __system____builtin_atoi
2a9ac     07 4A 05 F6 | 	mov	COUNT_, #7
2a9b0     A8 00 A0 FD | 	call	#pushregs_
2a9b4                 | __system____builtin_atoi_enter
2a9b4     09 27 02 F6 | 	mov	local01, arg01
2a9b8     0A 29 02 F6 | 	mov	local02, arg02
2a9bc     00 2A 06 F6 | 	mov	local03, #0
2a9c0     00 2C 06 F6 | 	mov	local04, #0
2a9c4     00 2E 06 F6 | 	mov	local05, #0
2a9c8     97 1C 48 FB | 	callpa	#(@LR__3772-@LR__3770)>>2,fcache_load_ptr_
2a9cc                 | LR__3770
2a9cc     13 31 C2 FA | 	rdbyte	local06, local01
2a9d0     20 30 0E F2 | 	cmp	local06, #32 wz
2a9d4     01 26 06 A1 |  if_e	add	local01, #1
2a9d8     F0 FF 9F AD |  if_e	jmp	#LR__3770
2a9dc     13 33 C2 FA | 	rdbyte	local07, local01
2a9e0                 | LR__3771
2a9e0     2D 32 0E F2 | 	cmp	local07, #45 wz
2a9e4     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
2a9e8     18 00 90 5D |  if_ne	jmp	#LR__3773
2a9ec     01 26 06 F1 | 	add	local01, #1
2a9f0     2D 32 0E F2 | 	cmp	local07, #45 wz
2a9f4     01 30 06 A6 |  if_e	mov	local06, #1
2a9f8     18 2F C2 A2 |  if_e	subr	local05, local06
2a9fc     13 33 C2 FA | 	rdbyte	local07, local01
2aa00     DC FF 9F FD | 	jmp	#LR__3771
2aa04                 | LR__3772
2aa04                 | LR__3773
2aa04     00 28 0E F2 | 	cmp	local02, #0 wz
2aa08     1C 00 90 5D |  if_ne	jmp	#LR__3775
2aa0c     24 32 0E F2 | 	cmp	local07, #36 wz
2aa10     10 28 06 A6 |  if_e	mov	local02, #16
2aa14     01 26 06 A1 |  if_e	add	local01, #1
2aa18     0C 00 90 AD |  if_e	jmp	#LR__3774
2aa1c     25 32 0E F2 | 	cmp	local07, #37 wz
2aa20     02 28 06 A6 |  if_e	mov	local02, #2
2aa24     01 26 06 A1 |  if_e	add	local01, #1
2aa28                 | LR__3774
2aa28                 | LR__3775
2aa28     97 48 48 FB | 	callpa	#(@LR__3783-@LR__3776)>>2,fcache_load_ptr_
2aa2c                 | LR__3776
2aa2c                 | LR__3777
2aa2c     13 33 C2 FA | 	rdbyte	local07, local01
2aa30     5F 32 0E F2 | 	cmp	local07, #95 wz
2aa34     01 26 06 F1 | 	add	local01, #1
2aa38     F0 FF 9F AD |  if_e	jmp	#LR__3777
2aa3c     30 32 0E F2 | 	cmp	local07, #48 wz
2aa40     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2aa44     00 2C 06 A6 |  if_e	mov	local04, #0
2aa48     60 00 90 AD |  if_e	jmp	#LR__3782
2aa4c     31 32 56 F2 | 	cmps	local07, #49 wc
2aa50     18 00 90 CD |  if_b	jmp	#LR__3778
2aa54     3A 32 56 F2 | 	cmps	local07, #58 wc
2aa58     19 2D 02 C6 |  if_b	mov	local04, local07
2aa5c     30 2C 86 C1 |  if_b	sub	local04, #48
2aa60     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2aa64     0A 28 06 86 |  if_c_and_z	mov	local02, #10
2aa68     40 00 90 CD |  if_b	jmp	#LR__3781
2aa6c                 | LR__3778
2aa6c     0B 28 56 F2 | 	cmps	local02, #11 wc
2aa70     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2aa74     14 00 90 CD |  if_b	jmp	#LR__3779
2aa78     67 32 56 F2 | 	cmps	local07, #103 wc
2aa7c     61 32 86 C1 |  if_b	sub	local07, #97
2aa80     0A 2C 06 C6 |  if_b	mov	local04, #10
2aa84     19 2D 02 C1 |  if_b	add	local04, local07
2aa88     20 00 90 CD |  if_b	jmp	#LR__3780
2aa8c                 | LR__3779
2aa8c     0B 28 56 F2 | 	cmps	local02, #11 wc
2aa90     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2aa94     24 00 90 CD |  if_b	jmp	#LR__3784
2aa98     47 32 56 F2 | 	cmps	local07, #71 wc
2aa9c     41 32 86 C1 |  if_b	sub	local07, #65
2aaa0     0A 2C 06 C6 |  if_b	mov	local04, #10
2aaa4     19 2D 02 C1 |  if_b	add	local04, local07
2aaa8     10 00 90 3D |  if_ae	jmp	#LR__3784
2aaac                 | LR__3780
2aaac                 | LR__3781
2aaac                 | LR__3782
2aaac     15 29 02 FD | 	qmul	local02, local03
2aab0     18 2A 62 FD | 	getqx	local03
2aab4     16 2B 02 F1 | 	add	local03, local04
2aab8     70 FF 9F FD | 	jmp	#LR__3776
2aabc                 | LR__3783
2aabc                 | LR__3784
2aabc     00 28 0E F2 | 	cmp	local02, #0 wz
2aac0     64 00 90 5D |  if_ne	jmp	#LR__3790
2aac4     78 32 0E F2 | 	cmp	local07, #120 wz
2aac8     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
2aacc     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2aad0     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2aad4     14 00 90 5D |  if_ne	jmp	#LR__3785
2aad8     13 13 02 F6 | 	mov	arg01, local01
2aadc     10 14 06 F6 | 	mov	arg02, #16
2aae0     C8 FE BF FD | 	call	#__system____builtin_atoi
2aae4     FD 2A 02 F6 | 	mov	local03, result1
2aae8     3C 00 90 FD | 	jmp	#LR__3789
2aaec                 | LR__3785
2aaec     62 32 0E F2 | 	cmp	local07, #98 wz
2aaf0     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2aaf4     14 00 90 5D |  if_ne	jmp	#LR__3786
2aaf8     13 13 02 F6 | 	mov	arg01, local01
2aafc     02 14 06 F6 | 	mov	arg02, #2
2ab00     A8 FE BF FD | 	call	#__system____builtin_atoi
2ab04     FD 2A 02 F6 | 	mov	local03, result1
2ab08     1C 00 90 FD | 	jmp	#LR__3788
2ab0c                 | LR__3786
2ab0c     6F 32 0E F2 | 	cmp	local07, #111 wz
2ab10     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2ab14     10 00 90 5D |  if_ne	jmp	#LR__3787
2ab18     13 13 02 F6 | 	mov	arg01, local01
2ab1c     08 14 06 F6 | 	mov	arg02, #8
2ab20     88 FE BF FD | 	call	#__system____builtin_atoi
2ab24     FD 2A 02 F6 | 	mov	local03, result1
2ab28                 | LR__3787
2ab28                 | LR__3788
2ab28                 | LR__3789
2ab28                 | LR__3790
2ab28     00 2E 0E F2 | 	cmp	local05, #0 wz
2ab2c     15 2B 62 56 |  if_ne	neg	local03, local03
2ab30     15 FB 01 F6 | 	mov	result1, local03
2ab34     A7 F0 03 F6 | 	mov	ptra, fp
2ab38     B2 00 A0 FD | 	call	#popregs_
2ab3c                 | __system____builtin_atoi_ret
2ab3c     2D 00 64 FD | 	ret
2ab40                 | 
2ab40                 | __system____builtin_atof
2ab40     07 4A 05 F6 | 	mov	COUNT_, #7
2ab44     A8 00 A0 FD | 	call	#pushregs_
2ab48     09 27 02 F6 | 	mov	local01, arg01
2ab4c     00 28 06 F6 | 	mov	local02, #0
2ab50     00 2A 06 F6 | 	mov	local03, #0
2ab54     00 2C 06 F6 | 	mov	local04, #0
2ab58     00 2E 06 F6 | 	mov	local05, #0
2ab5c     97 08 48 FB | 	callpa	#(@LR__3801-@LR__3800)>>2,fcache_load_ptr_
2ab60                 | LR__3800
2ab60     13 17 C2 FA | 	rdbyte	arg03, local01
2ab64     20 16 0E F2 | 	cmp	arg03, #32 wz
2ab68     01 26 06 A1 |  if_e	add	local01, #1
2ab6c     F0 FF 9F AD |  if_e	jmp	#LR__3800
2ab70                 | LR__3801
2ab70     13 31 C2 FA | 	rdbyte	local06, local01
2ab74                 | LR__3802
2ab74     2B 30 0E F2 | 	cmp	local06, #43 wz
2ab78     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
2ab7c     14 00 90 5D |  if_ne	jmp	#LR__3803
2ab80     2D 30 0E F2 | 	cmp	local06, #45 wz
2ab84     1F 2C E6 A4 |  if_e	bitnot	local04, #31
2ab88     01 26 06 F1 | 	add	local01, #1
2ab8c     13 31 C2 FA | 	rdbyte	local06, local01
2ab90     E0 FF 9F FD | 	jmp	#LR__3802
2ab94                 | LR__3803
2ab94                 | LR__3804
2ab94     97 08 48 FB | 	callpa	#(@LR__3806-@LR__3805)>>2,fcache_load_ptr_
2ab98                 | LR__3805
2ab98     13 31 C2 FA | 	rdbyte	local06, local01
2ab9c     5F 30 0E F2 | 	cmp	local06, #95 wz
2aba0     01 26 06 F1 | 	add	local01, #1
2aba4     F0 FF 9F AD |  if_e	jmp	#LR__3805
2aba8                 | LR__3806
2aba8     00 30 0E F2 | 	cmp	local06, #0 wz
2abac     5C 00 90 AD |  if_e	jmp	#LR__3808
2abb0     30 30 56 F2 | 	cmps	local06, #48 wc
2abb4     44 00 90 CD |  if_b	jmp	#LR__3807
2abb8     3A 30 56 F2 | 	cmps	local06, #58 wc
2abbc     3C 00 90 3D |  if_ae	jmp	#LR__3807
2abc0     14 13 02 F6 | 	mov	arg01, local02
2abc4     00 90 20 FF 
2abc8     00 14 06 F6 | 	mov	arg02, ##1092616192
2abcc     64 F7 BF FD | 	call	#__system___float_mul
2abd0     FD 28 02 F6 | 	mov	local02, result1
2abd4     30 30 86 F1 | 	sub	local06, #48
2abd8     18 13 02 F6 | 	mov	arg01, local06
2abdc     50 F3 BF FD | 	call	#__system___float_fromuns
2abe0     FD 14 02 F6 | 	mov	arg02, result1
2abe4     14 13 02 F6 | 	mov	arg01, local02
2abe8     78 F3 BF FD | 	call	#__system___float_add
2abec     FD 28 02 F6 | 	mov	local02, result1
2abf0     00 2E 0E F2 | 	cmp	local05, #0 wz
2abf4     01 2A 86 51 |  if_ne	sub	local03, #1
2abf8     98 FF 9F FD | 	jmp	#LR__3804
2abfc                 | LR__3807
2abfc     2E 30 0E F2 | 	cmp	local06, #46 wz
2ac00     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2ac04     01 2E 06 A6 |  if_e	mov	local05, #1
2ac08     88 FF 9F AD |  if_e	jmp	#LR__3804
2ac0c                 | LR__3808
2ac0c     45 30 0E F2 | 	cmp	local06, #69 wz
2ac10     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2ac14     18 00 90 5D |  if_ne	jmp	#LR__3809
2ac18     13 13 02 F6 | 	mov	arg01, local01
2ac1c     00 14 06 F6 | 	mov	arg02, #0
2ac20     88 FD BF FD | 	call	#__system____builtin_atoi
2ac24     15 FB 01 F1 | 	add	result1, local03
2ac28     FD 32 02 F6 | 	mov	local07, result1
2ac2c     04 00 90 FD | 	jmp	#LR__3810
2ac30                 | LR__3809
2ac30     15 33 02 F6 | 	mov	local07, local03
2ac34                 | LR__3810
2ac34     19 17 02 F6 | 	mov	arg03, local07
2ac38     14 13 02 F6 | 	mov	arg01, local02
2ac3c     00 90 20 FF 
2ac40     00 14 06 F6 | 	mov	arg02, ##1092616192
2ac44     F4 06 B0 FD | 	call	#__system___float_pow_n
2ac48     16 FB 61 F5 | 	xor	result1, local04
2ac4c     A7 F0 03 F6 | 	mov	ptra, fp
2ac50     B2 00 A0 FD | 	call	#popregs_
2ac54                 | __system____builtin_atof_ret
2ac54     2D 00 64 FD | 	ret
2ac58                 | 
2ac58                 | __system____builtin_ilogb
2ac58     FC FB BF FD | 	call	#__system___float_Unpack
2ac5c     00 FE 0D F2 | 	cmp	result3, #0 wz
2ac60     00 00 40 AF 
2ac64     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2ac68     24 00 90 AD |  if_e	jmp	#LR__3821
2ac6c     80 FC 0D F2 | 	cmp	result2, #128 wz
2ac70     18 00 90 5D |  if_ne	jmp	#LR__3820
2ac74     00 00 10 FF 
2ac78     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2ac7c     1E FA CD A9 |  if_e	bmask	result1, #30
2ac80     0C 00 90 AD |  if_e	jmp	#LR__3821
2ac84     1F FA C5 F9 | 	decod	result1, #31
2ac88     04 00 90 FD | 	jmp	#LR__3821
2ac8c                 | LR__3820
2ac8c     FE FA 01 F6 | 	mov	result1, result2
2ac90                 | LR__3821
2ac90                 | __system____builtin_ilogb_ret
2ac90     2D 00 64 FD | 	ret
2ac94                 | 
2ac94                 | __system____builtin_sinf
2ac94     03 4A 05 F6 | 	mov	COUNT_, #3
2ac98     A8 00 A0 FD | 	call	#pushregs_
2ac9c     09 27 02 F6 | 	mov	local01, arg01
2aca0     87 64 20 FF 
2aca4     DB 15 06 F6 | 	mov	arg02, ##1086918619
2aca8     8C F8 BF FD | 	call	#__system___float_div
2acac     FD 12 02 F6 | 	mov	arg01, result1
2acb0     00 14 06 F6 | 	mov	arg02, #0
2acb4     44 FB BF FD | 	call	#__system___float_tointeger
2acb8     FD 16 0A F6 | 	mov	arg03, result1 wz
2acbc     44 00 90 AD |  if_e	jmp	#LR__3830
2acc0     0B 13 52 F6 | 	abs	arg01, arg03 wc
2acc4     1F 28 C6 C9 |  if_b	decod	local02, #31
2acc8     00 28 06 36 |  if_ae	mov	local02, #0
2accc     60 F2 BF FD | 	call	#__system___float_fromuns
2acd0     14 FB 61 F5 | 	xor	result1, local02
2acd4     FD 12 02 F6 | 	mov	arg01, result1
2acd8     1E 14 C6 F9 | 	decod	arg02, #30
2acdc     54 F6 BF FD | 	call	#__system___float_mul
2ace0     FD 12 02 F6 | 	mov	arg01, result1
2ace4     87 24 20 FF 
2ace8     DB 15 06 F6 | 	mov	arg02, ##1078530011
2acec     44 F6 BF FD | 	call	#__system___float_mul
2acf0     FD 14 02 F6 | 	mov	arg02, result1
2acf4     13 13 02 F6 | 	mov	arg01, local01
2acf8     1F 14 E6 F4 | 	bitnot	arg02, #31
2acfc     64 F2 BF FD | 	call	#__system___float_add
2ad00     FD 26 02 F6 | 	mov	local01, result1
2ad04                 | LR__3830
2ad04     13 13 02 F6 | 	mov	arg01, local01
2ad08     66 E6 1E FF 
2ad0c     CD 14 06 F6 | 	mov	arg02, ##1036831949
2ad10     01 16 06 F6 | 	mov	arg03, #1
2ad14     50 FA BF FD | 	call	#__system___float_cmp
2ad18     00 FA 55 F2 | 	cmps	result1, #0 wc
2ad1c     5C 00 90 3D |  if_ae	jmp	#LR__3831
2ad20     13 13 02 F6 | 	mov	arg01, local01
2ad24     66 E6 5E FF 
2ad28     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2ad2c     01 16 66 F6 | 	neg	arg03, #1
2ad30     34 FA BF FD | 	call	#__system___float_cmp
2ad34     01 FA 55 F2 | 	cmps	result1, #1 wc
2ad38     40 00 90 CD |  if_b	jmp	#LR__3831
2ad3c     13 13 02 F6 | 	mov	arg01, local01
2ad40     13 15 02 F6 | 	mov	arg02, local01
2ad44     EC F5 BF FD | 	call	#__system___float_mul
2ad48     FD 12 02 F6 | 	mov	arg01, result1
2ad4c     13 15 02 F6 | 	mov	arg02, local01
2ad50     E0 F5 BF FD | 	call	#__system___float_mul
2ad54     FD 12 02 F6 | 	mov	arg01, result1
2ad58     00 60 20 FF 
2ad5c     00 14 06 F6 | 	mov	arg02, ##1086324736
2ad60     D4 F7 BF FD | 	call	#__system___float_div
2ad64     FD 14 02 F6 | 	mov	arg02, result1
2ad68     13 13 02 F6 | 	mov	arg01, local01
2ad6c     1F 14 E6 F4 | 	bitnot	arg02, #31
2ad70     F0 F1 BF FD | 	call	#__system___float_add
2ad74     FD 2A 02 F6 | 	mov	local03, result1
2ad78     54 00 90 FD | 	jmp	#LR__3832
2ad7c                 | LR__3831
2ad7c     13 13 02 F6 | 	mov	arg01, local01
2ad80     7C 91 26 FF 
2ad84     83 15 06 F6 | 	mov	arg02, ##1294137731
2ad88     A8 F5 BF FD | 	call	#__system___float_mul
2ad8c     FD 12 02 F6 | 	mov	arg01, result1
2ad90     00 14 06 F6 | 	mov	arg02, #0
2ad94     64 FA BF FD | 	call	#__system___float_tointeger
2ad98     02 FA 65 F0 | 	shl	result1, #2
2ad9c     00 00 A0 FF 
2ada0     FD 00 48 FD | 	qrotate	##1073741824, result1
2ada4     19 12 62 FD | 	getqy	arg01
2ada8     09 13 52 F6 | 	abs	arg01, arg01 wc
2adac     1F 28 C6 C9 |  if_b	decod	local02, #31
2adb0     00 28 06 36 |  if_ae	mov	local02, #0
2adb4     78 F1 BF FD | 	call	#__system___float_fromuns
2adb8     14 FB 61 F5 | 	xor	result1, local02
2adbc     FD 12 02 F6 | 	mov	arg01, result1
2adc0     00 40 27 FF 
2adc4     00 14 06 F6 | 	mov	arg02, ##1317011456
2adc8     6C F7 BF FD | 	call	#__system___float_div
2adcc     FD 2A 02 F6 | 	mov	local03, result1
2add0                 | LR__3832
2add0     15 FB 01 F6 | 	mov	result1, local03
2add4     A7 F0 03 F6 | 	mov	ptra, fp
2add8     B2 00 A0 FD | 	call	#popregs_
2addc                 | __system____builtin_sinf_ret
2addc     2D 00 64 FD | 	ret
2ade0                 | 
2ade0                 | __system____builtin_tanf
2ade0     02 4A 05 F6 | 	mov	COUNT_, #2
2ade4     A8 00 A0 FD | 	call	#pushregs_
2ade8     09 27 02 F6 | 	mov	local01, arg01
2adec     A4 FE BF FD | 	call	#__system____builtin_sinf
2adf0     FD 28 02 F6 | 	mov	local02, result1
2adf4     13 15 02 F6 | 	mov	arg02, local01
2adf8     87 E4 1F FF 
2adfc     DB 13 06 F6 | 	mov	arg01, ##1070141403
2ae00     1F 14 E6 F4 | 	bitnot	arg02, #31
2ae04     5C F1 BF FD | 	call	#__system___float_add
2ae08     FD 12 02 F6 | 	mov	arg01, result1
2ae0c     84 FE BF FD | 	call	#__system____builtin_sinf
2ae10     FD 14 02 F6 | 	mov	arg02, result1
2ae14     14 13 02 F6 | 	mov	arg01, local02
2ae18     1C F7 BF FD | 	call	#__system___float_div
2ae1c     A7 F0 03 F6 | 	mov	ptra, fp
2ae20     B2 00 A0 FD | 	call	#popregs_
2ae24                 | __system____builtin_tanf_ret
2ae24     2D 00 64 FD | 	ret
2ae28                 | 
2ae28                 | __system____builtin_asinf
2ae28     01 4A 05 F6 | 	mov	COUNT_, #1
2ae2c     A8 00 A0 FD | 	call	#pushregs_
2ae30     09 27 02 F6 | 	mov	local01, arg01
2ae34     13 15 02 F6 | 	mov	arg02, local01
2ae38     13 13 02 F6 | 	mov	arg01, local01
2ae3c     F4 F4 BF FD | 	call	#__system___float_mul
2ae40     FD 14 02 F6 | 	mov	arg02, result1
2ae44     00 C0 1F FF 
2ae48     00 12 06 F6 | 	mov	arg01, ##1065353216
2ae4c     1F 14 E6 F4 | 	bitnot	arg02, #31
2ae50     10 F1 BF FD | 	call	#__system___float_add
2ae54     FD 12 02 F6 | 	mov	arg01, result1
2ae58     00 F4 BF FD | 	call	#__system___float_sqrt
2ae5c     FD 14 02 F6 | 	mov	arg02, result1
2ae60     13 13 02 F6 | 	mov	arg01, local01
2ae64     58 00 B0 FD | 	call	#__system____builtin_atan2f
2ae68     A7 F0 03 F6 | 	mov	ptra, fp
2ae6c     B2 00 A0 FD | 	call	#popregs_
2ae70                 | __system____builtin_asinf_ret
2ae70     2D 00 64 FD | 	ret
2ae74                 | 
2ae74                 | __system____builtin_acosf
2ae74     01 4A 05 F6 | 	mov	COUNT_, #1
2ae78     A8 00 A0 FD | 	call	#pushregs_
2ae7c     09 27 02 F6 | 	mov	local01, arg01
2ae80     13 15 02 F6 | 	mov	arg02, local01
2ae84     13 13 02 F6 | 	mov	arg01, local01
2ae88     A8 F4 BF FD | 	call	#__system___float_mul
2ae8c     FD 14 02 F6 | 	mov	arg02, result1
2ae90     00 C0 1F FF 
2ae94     00 12 06 F6 | 	mov	arg01, ##1065353216
2ae98     1F 14 E6 F4 | 	bitnot	arg02, #31
2ae9c     C4 F0 BF FD | 	call	#__system___float_add
2aea0     FD 12 02 F6 | 	mov	arg01, result1
2aea4     B4 F3 BF FD | 	call	#__system___float_sqrt
2aea8     FD 12 02 F6 | 	mov	arg01, result1
2aeac     13 15 02 F6 | 	mov	arg02, local01
2aeb0     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2aeb4     A7 F0 03 F6 | 	mov	ptra, fp
2aeb8     B2 00 A0 FD | 	call	#popregs_
2aebc                 | __system____builtin_acosf_ret
2aebc     2D 00 64 FD | 	ret
2aec0                 | 
2aec0                 | __system____builtin_atan2f
2aec0     04 4A 05 F6 | 	mov	COUNT_, #4
2aec4     A8 00 A0 FD | 	call	#pushregs_
2aec8     09 27 02 F6 | 	mov	local01, arg01
2aecc     0A 29 02 F6 | 	mov	local02, arg02
2aed0     13 13 02 F6 | 	mov	arg01, local01
2aed4     00 14 06 F6 | 	mov	arg02, #0
2aed8     01 16 06 F6 | 	mov	arg03, #1
2aedc     88 F8 BF FD | 	call	#__system___float_cmp
2aee0     00 FA 0D F2 | 	cmp	result1, #0 wz
2aee4     28 00 90 5D |  if_ne	jmp	#LR__3840
2aee8     14 13 02 F6 | 	mov	arg01, local02
2aeec     00 14 06 F6 | 	mov	arg02, #0
2aef0     01 16 06 F6 | 	mov	arg03, #1
2aef4     70 F8 BF FD | 	call	#__system___float_cmp
2aef8     00 FA 55 F2 | 	cmps	result1, #0 wc
2aefc     87 24 60 CF 
2af00     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2af04     DC 00 90 CD |  if_b	jmp	#LR__3841
2af08     00 FA 05 F6 | 	mov	result1, #0
2af0c     D4 00 90 FD | 	jmp	#LR__3841
2af10                 | LR__3840
2af10     14 13 02 F6 | 	mov	arg01, local02
2af14     14 15 02 F6 | 	mov	arg02, local02
2af18     18 F4 BF FD | 	call	#__system___float_mul
2af1c     FD 2A 02 F6 | 	mov	local03, result1
2af20     13 13 02 F6 | 	mov	arg01, local01
2af24     13 15 02 F6 | 	mov	arg02, local01
2af28     08 F4 BF FD | 	call	#__system___float_mul
2af2c     FD 14 02 F6 | 	mov	arg02, result1
2af30     15 13 02 F6 | 	mov	arg01, local03
2af34     2C F0 BF FD | 	call	#__system___float_add
2af38     FD 12 02 F6 | 	mov	arg01, result1
2af3c     1C F3 BF FD | 	call	#__system___float_sqrt
2af40     FD 2A 02 F6 | 	mov	local03, result1
2af44     14 13 02 F6 | 	mov	arg01, local02
2af48     15 15 02 F6 | 	mov	arg02, local03
2af4c     E8 F5 BF FD | 	call	#__system___float_div
2af50     FD 28 02 F6 | 	mov	local02, result1
2af54     13 13 02 F6 | 	mov	arg01, local01
2af58     15 15 02 F6 | 	mov	arg02, local03
2af5c     D8 F5 BF FD | 	call	#__system___float_div
2af60     FD 26 02 F6 | 	mov	local01, result1
2af64     00 40 27 FF 
2af68     00 12 06 F6 | 	mov	arg01, ##1317011456
2af6c     14 15 02 F6 | 	mov	arg02, local02
2af70     C0 F3 BF FD | 	call	#__system___float_mul
2af74     FD 12 02 F6 | 	mov	arg01, result1
2af78     00 14 06 F6 | 	mov	arg02, #0
2af7c     7C F8 BF FD | 	call	#__system___float_tointeger
2af80     FD 2A 02 F6 | 	mov	local03, result1
2af84     00 40 27 FF 
2af88     00 12 06 F6 | 	mov	arg01, ##1317011456
2af8c     13 15 02 F6 | 	mov	arg02, local01
2af90     A0 F3 BF FD | 	call	#__system___float_mul
2af94     FD 12 02 F6 | 	mov	arg01, result1
2af98     00 14 06 F6 | 	mov	arg02, #0
2af9c     5C F8 BF FD | 	call	#__system___float_tointeger
2afa0     FD 2A 52 FD | 	qvector	local03, result1
2afa4     87 24 20 FF 
2afa8     DB 2B 06 F6 | 	mov	local03, ##1078530011
2afac     19 12 62 FD | 	getqy	arg01
2afb0     01 12 C6 F0 | 	sar	arg01, #1
2afb4     09 13 52 F6 | 	abs	arg01, arg01 wc
2afb8     1F 2C C6 C9 |  if_b	decod	local04, #31
2afbc     00 2C 06 36 |  if_ae	mov	local04, #0
2afc0     6C EF BF FD | 	call	#__system___float_fromuns
2afc4     16 FB 61 F5 | 	xor	result1, local04
2afc8     FD 12 02 F6 | 	mov	arg01, result1
2afcc     00 40 27 FF 
2afd0     00 14 06 F6 | 	mov	arg02, ##1317011456
2afd4     60 F5 BF FD | 	call	#__system___float_div
2afd8     FD 14 02 F6 | 	mov	arg02, result1
2afdc     15 13 02 F6 | 	mov	arg01, local03
2afe0     50 F3 BF FD | 	call	#__system___float_mul
2afe4                 | LR__3841
2afe4     A7 F0 03 F6 | 	mov	ptra, fp
2afe8     B2 00 A0 FD | 	call	#popregs_
2afec                 | __system____builtin_atan2f_ret
2afec     2D 00 64 FD | 	ret
2aff0                 | 
2aff0                 | __system____builtin_exp2f
2aff0     04 4A 05 F6 | 	mov	COUNT_, #4
2aff4     A8 00 A0 FD | 	call	#pushregs_
2aff8     09 27 02 F6 | 	mov	local01, arg01
2affc     00 7F 21 FF 
2b000     00 14 06 F6 | 	mov	arg02, ##1123942400
2b004     01 16 66 F6 | 	neg	arg03, #1
2b008     5C F7 BF FD | 	call	#__system___float_cmp
2b00c     00 FA 55 F2 | 	cmps	result1, #0 wc
2b010     00 C0 3F 3F 
2b014     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2b018     DC 00 90 3D |  if_ae	jmp	#LR__3851
2b01c     13 13 02 F6 | 	mov	arg01, local01
2b020     00 7F 61 FF 
2b024     00 14 06 F6 | 	mov	arg02, ##-1023541248
2b028     01 16 06 F6 | 	mov	arg03, #1
2b02c     38 F7 BF FD | 	call	#__system___float_cmp
2b030     00 FA 55 F2 | 	cmps	result1, #0 wc
2b034     00 FA 05 C6 |  if_b	mov	result1, #0
2b038     BC 00 90 CD |  if_b	jmp	#LR__3851
2b03c     13 13 02 F6 | 	mov	arg01, local01
2b040     00 14 06 F6 | 	mov	arg02, #0
2b044     B4 F7 BF FD | 	call	#__system___float_tointeger
2b048     FD 28 02 F6 | 	mov	local02, result1
2b04c     14 13 52 F6 | 	abs	arg01, local02 wc
2b050     1F 2A C6 C9 |  if_b	decod	local03, #31
2b054     00 2A 06 36 |  if_ae	mov	local03, #0
2b058     D4 EE BF FD | 	call	#__system___float_fromuns
2b05c     15 FB 61 F5 | 	xor	result1, local03
2b060     FD 14 02 F6 | 	mov	arg02, result1
2b064     13 13 02 F6 | 	mov	arg01, local01
2b068     1F 14 E6 F4 | 	bitnot	arg02, #31
2b06c     F4 EE BF FD | 	call	#__system___float_add
2b070     FD 2C 02 F6 | 	mov	local04, result1
2b074     16 13 02 F6 | 	mov	arg01, local04
2b078     00 14 06 F6 | 	mov	arg02, #0
2b07c     01 16 06 F6 | 	mov	arg03, #1
2b080     E4 F6 BF FD | 	call	#__system___float_cmp
2b084     00 FA 55 F2 | 	cmps	result1, #0 wc
2b088     18 00 90 3D |  if_ae	jmp	#LR__3850
2b08c     16 13 02 F6 | 	mov	arg01, local04
2b090     00 C0 1F FF 
2b094     00 14 06 F6 | 	mov	arg02, ##1065353216
2b098     C8 EE BF FD | 	call	#__system___float_add
2b09c     FD 2C 02 F6 | 	mov	local04, result1
2b0a0     01 28 86 F1 | 	sub	local02, #1
2b0a4                 | LR__3850
2b0a4     7F 28 06 F1 | 	add	local02, #127
2b0a8     17 28 66 F0 | 	shl	local02, #23
2b0ac     16 13 02 F6 | 	mov	arg01, local04
2b0b0     00 80 26 FF 
2b0b4     00 14 06 F6 | 	mov	arg02, ##1291845632
2b0b8     78 F2 BF FD | 	call	#__system___float_mul
2b0bc     FD 12 02 F6 | 	mov	arg01, result1
2b0c0     00 14 06 F6 | 	mov	arg02, #0
2b0c4     34 F7 BF FD | 	call	#__system___float_tointeger
2b0c8     FD 2C 0A F6 | 	mov	local04, result1 wz
2b0cc     14 FB 01 A6 |  if_e	mov	result1, local02
2b0d0     24 00 90 AD |  if_e	jmp	#LR__3851
2b0d4     3E 2C 26 F4 | 	bith	local04, #62
2b0d8     0F 2C 62 FD | 	qexp	local04
2b0dc     14 13 02 F6 | 	mov	arg01, local02
2b0e0     18 14 62 FD | 	getqx	arg02
2b0e4     01 14 06 F1 | 	add	arg02, #1
2b0e8     01 14 46 F0 | 	shr	arg02, #1
2b0ec     00 80 1F FF 
2b0f0     00 14 06 F1 | 	add	arg02, ##1056964608
2b0f4     3C F2 BF FD | 	call	#__system___float_mul
2b0f8                 | LR__3851
2b0f8     A7 F0 03 F6 | 	mov	ptra, fp
2b0fc     B2 00 A0 FD | 	call	#popregs_
2b100                 | __system____builtin_exp2f_ret
2b100     2D 00 64 FD | 	ret
2b104                 | 
2b104                 | __system____builtin_log2f
2b104     06 4A 05 F6 | 	mov	COUNT_, #6
2b108     A8 00 A0 FD | 	call	#pushregs_
2b10c     09 27 02 F6 | 	mov	local01, arg01
2b110     09 29 0A F6 | 	mov	local02, arg01 wz
2b114     00 00 40 5F 
2b118     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2b11c     00 40 00 AF 
2b120     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2b124     08 01 90 AD |  if_e	jmp	#LR__3864
2b128     00 28 56 F2 | 	cmps	local02, #0 wc
2b12c     00 E0 3F CF 
2b130     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2b134     F8 00 90 CD |  if_b	jmp	#LR__3864
2b138     13 13 02 F6 | 	mov	arg01, local01
2b13c     00 90 20 FF 
2b140     00 14 06 F6 | 	mov	arg02, ##1092616192
2b144     01 16 06 F6 | 	mov	arg03, #1
2b148     1C F6 BF FD | 	call	#__system___float_cmp
2b14c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b150     4D 2A 20 AF 
2b154     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2b158     D4 00 90 AD |  if_e	jmp	#LR__3864
2b15c     13 13 02 F6 | 	mov	arg01, local01
2b160     FC 16 20 FF 
2b164     54 14 06 F6 | 	mov	arg02, ##1076754516
2b168     01 16 06 F6 | 	mov	arg03, #1
2b16c     F8 F5 BF FD | 	call	#__system___float_cmp
2b170     00 FA 0D F2 | 	cmp	result1, #0 wz
2b174     55 DC 1F AF 
2b178     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2b17c     B0 00 90 AD |  if_e	jmp	#LR__3864
2b180     14 2B 02 F6 | 	mov	local03, local02
2b184     17 2A 46 F0 | 	shr	local03, #23
2b188     15 2B E2 F8 | 	getbyte	local03, local03, #0
2b18c     17 29 06 F4 | 	bitl	local02, #279
2b190     14 2D 02 F6 | 	mov	local04, local02
2b194     FF 2A 0E F2 | 	cmp	local03, #255 wz
2b198     1C 00 90 5D |  if_ne	jmp	#LR__3860
2b19c     00 2C 0E F2 | 	cmp	local04, #0 wz
2b1a0     00 C0 3F 5F 
2b1a4     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2b1a8     00 E0 3F AF 
2b1ac     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2b1b0     17 FB 01 F6 | 	mov	result1, local05
2b1b4     78 00 90 FD | 	jmp	#LR__3864
2b1b8                 | LR__3860
2b1b8     00 2A 0E F2 | 	cmp	local03, #0 wz
2b1bc     17 2C 26 54 |  if_ne	bith	local04, #23
2b1c0     7F 2A 86 51 |  if_ne	sub	local03, #127
2b1c4     28 00 90 5D |  if_ne	jmp	#LR__3863
2b1c8     00 2C 0E F2 | 	cmp	local04, #0 wz
2b1cc     00 40 00 AF 
2b1d0     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2b1d4     58 00 90 AD |  if_e	jmp	#LR__3864
2b1d8     7E 2A 66 F6 | 	neg	local03, #126
2b1dc     97 08 48 FB | 	callpa	#(@LR__3862-@LR__3861)>>2,fcache_load_ptr_
2b1e0                 | LR__3861
2b1e0     17 2C 2E F4 | 	testbn	local04, #23 wz
2b1e4     01 2C 66 A0 |  if_e	shl	local04, #1
2b1e8     01 2A 06 A1 |  if_e	add	local03, #1
2b1ec     F0 FF 9F AD |  if_e	jmp	#LR__3861
2b1f0                 | LR__3862
2b1f0                 | LR__3863
2b1f0     0E 2C 62 FD | 	qlog	local04
2b1f4     01 2A 86 F1 | 	sub	local03, #1
2b1f8     15 13 52 F6 | 	abs	arg01, local03 wc
2b1fc     1F 30 C6 C9 |  if_b	decod	local06, #31
2b200     00 30 06 36 |  if_ae	mov	local06, #0
2b204     18 2E 62 FD | 	getqx	local05
2b208     9B 2E 06 F4 | 	bitl	local05, #155
2b20c     08 2E 06 F1 | 	add	local05, #8
2b210     04 2E 46 F0 | 	shr	local05, #4
2b214     00 C0 1F FF 
2b218     00 2E 06 F1 | 	add	local05, ##1065353216
2b21c     10 ED BF FD | 	call	#__system___float_fromuns
2b220     18 FB 61 F5 | 	xor	result1, local06
2b224     FD 14 02 F6 | 	mov	arg02, result1
2b228     17 13 02 F6 | 	mov	arg01, local05
2b22c     34 ED BF FD | 	call	#__system___float_add
2b230                 | LR__3864
2b230     A7 F0 03 F6 | 	mov	ptra, fp
2b234     B2 00 A0 FD | 	call	#popregs_
2b238                 | __system____builtin_log2f_ret
2b238     2D 00 64 FD | 	ret
2b23c                 | 
2b23c                 | __system____builtin_powf
2b23c     04 4A 05 F6 | 	mov	COUNT_, #4
2b240     A8 00 A0 FD | 	call	#pushregs_
2b244     09 27 02 F6 | 	mov	local01, arg01
2b248     0A 29 02 F6 | 	mov	local02, arg02
2b24c     14 13 02 F6 | 	mov	arg01, local02
2b250     00 14 06 F6 | 	mov	arg02, #0
2b254     A4 F5 BF FD | 	call	#__system___float_tointeger
2b258     FD 2A 02 F6 | 	mov	local03, result1
2b25c     15 13 52 F6 | 	abs	arg01, local03 wc
2b260     1F 2C C6 C9 |  if_b	decod	local04, #31
2b264     00 2C 06 36 |  if_ae	mov	local04, #0
2b268     C4 EC BF FD | 	call	#__system___float_fromuns
2b26c     16 FB 61 F5 | 	xor	result1, local04
2b270     FD 12 02 F6 | 	mov	arg01, result1
2b274     14 15 02 F6 | 	mov	arg02, local02
2b278     01 16 06 F6 | 	mov	arg03, #1
2b27c     E8 F4 BF FD | 	call	#__system___float_cmp
2b280     00 FA 0D F2 | 	cmp	result1, #0 wz
2b284     18 00 90 5D |  if_ne	jmp	#LR__3870
2b288     00 C0 1F FF 
2b28c     00 12 06 F6 | 	mov	arg01, ##1065353216
2b290     13 15 02 F6 | 	mov	arg02, local01
2b294     15 17 02 F6 | 	mov	arg03, local03
2b298     A0 00 B0 FD | 	call	#__system___float_pow_n
2b29c     58 00 90 FD | 	jmp	#LR__3871
2b2a0                 | LR__3870
2b2a0     13 13 02 F6 | 	mov	arg01, local01
2b2a4     00 14 06 F6 | 	mov	arg02, #0
2b2a8     01 16 06 F6 | 	mov	arg03, #1
2b2ac     B8 F4 BF FD | 	call	#__system___float_cmp
2b2b0     00 FA 55 F2 | 	cmps	result1, #0 wc
2b2b4     00 E0 3F CF 
2b2b8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2b2bc     38 00 90 CD |  if_b	jmp	#LR__3871
2b2c0     13 13 02 F6 | 	mov	arg01, local01
2b2c4     00 14 06 F6 | 	mov	arg02, #0
2b2c8     01 16 06 F6 | 	mov	arg03, #1
2b2cc     98 F4 BF FD | 	call	#__system___float_cmp
2b2d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b2d4     00 FA 05 A6 |  if_e	mov	result1, #0
2b2d8     1C 00 90 AD |  if_e	jmp	#LR__3871
2b2dc     13 13 02 F6 | 	mov	arg01, local01
2b2e0     20 FE BF FD | 	call	#__system____builtin_log2f
2b2e4     FD 12 02 F6 | 	mov	arg01, result1
2b2e8     14 15 02 F6 | 	mov	arg02, local02
2b2ec     44 F0 BF FD | 	call	#__system___float_mul
2b2f0     FD 12 02 F6 | 	mov	arg01, result1
2b2f4     F8 FC BF FD | 	call	#__system____builtin_exp2f
2b2f8                 | LR__3871
2b2f8     A7 F0 03 F6 | 	mov	ptra, fp
2b2fc     B2 00 A0 FD | 	call	#popregs_
2b300                 | __system____builtin_powf_ret
2b300     2D 00 64 FD | 	ret
2b304                 | 
2b304                 | __system____builtin_logbase
2b304     02 4A 05 F6 | 	mov	COUNT_, #2
2b308     A8 00 A0 FD | 	call	#pushregs_
2b30c     09 27 02 F6 | 	mov	local01, arg01
2b310     0A 13 02 F6 | 	mov	arg01, arg02
2b314     EC FD BF FD | 	call	#__system____builtin_log2f
2b318     FD 28 02 F6 | 	mov	local02, result1
2b31c     13 13 02 F6 | 	mov	arg01, local01
2b320     E0 FD BF FD | 	call	#__system____builtin_log2f
2b324     FD 14 02 F6 | 	mov	arg02, result1
2b328     14 13 02 F6 | 	mov	arg01, local02
2b32c     08 F2 BF FD | 	call	#__system___float_div
2b330     A7 F0 03 F6 | 	mov	ptra, fp
2b334     B2 00 A0 FD | 	call	#popregs_
2b338                 | __system____builtin_logbase_ret
2b338     2D 00 64 FD | 	ret
2b33c                 | 
2b33c                 | __system___float_pow_n
2b33c     05 4A 05 F6 | 	mov	COUNT_, #5
2b340     A8 00 A0 FD | 	call	#pushregs_
2b344     09 27 02 F6 | 	mov	local01, arg01
2b348     0A 29 02 F6 | 	mov	local02, arg02
2b34c     0B 2B 02 F6 | 	mov	local03, arg03
2b350     00 2A 56 F2 | 	cmps	local03, #0 wc
2b354     18 00 90 3D |  if_ae	jmp	#LR__3880
2b358     01 2C 06 F6 | 	mov	local04, #1
2b35c     15 2B 62 F6 | 	neg	local03, local03
2b360     00 2A 56 F2 | 	cmps	local03, #0 wc
2b364     00 FA 05 C6 |  if_b	mov	result1, #0
2b368     94 00 90 CD |  if_b	jmp	#LR__3888
2b36c     04 00 90 FD | 	jmp	#LR__3881
2b370                 | LR__3880
2b370     00 2C 06 F6 | 	mov	local04, #0
2b374                 | LR__3881
2b374     00 C0 1F FF 
2b378     00 2E 06 F6 | 	mov	local05, ##1065353216
2b37c                 | LR__3882
2b37c     01 2A 56 F2 | 	cmps	local03, #1 wc
2b380     30 00 90 CD |  if_b	jmp	#LR__3884
2b384     01 2A CE F7 | 	test	local03, #1 wz
2b388     10 00 90 AD |  if_e	jmp	#LR__3883
2b38c     17 13 02 F6 | 	mov	arg01, local05
2b390     14 15 02 F6 | 	mov	arg02, local02
2b394     9C EF BF FD | 	call	#__system___float_mul
2b398     FD 2E 02 F6 | 	mov	local05, result1
2b39c                 | LR__3883
2b39c     01 2A C6 F0 | 	sar	local03, #1
2b3a0     14 13 02 F6 | 	mov	arg01, local02
2b3a4     14 15 02 F6 | 	mov	arg02, local02
2b3a8     88 EF BF FD | 	call	#__system___float_mul
2b3ac     FD 28 02 F6 | 	mov	local02, result1
2b3b0     C8 FF 9F FD | 	jmp	#LR__3882
2b3b4                 | LR__3884
2b3b4     00 2C 0E F2 | 	cmp	local04, #0 wz
2b3b8     14 00 90 AD |  if_e	jmp	#LR__3885
2b3bc     13 13 02 F6 | 	mov	arg01, local01
2b3c0     17 15 02 F6 | 	mov	arg02, local05
2b3c4     70 F1 BF FD | 	call	#__system___float_div
2b3c8     FD 2E 02 F6 | 	mov	local05, result1
2b3cc     2C 00 90 FD | 	jmp	#LR__3887
2b3d0                 | LR__3885
2b3d0     13 13 02 F6 | 	mov	arg01, local01
2b3d4     00 C0 1F FF 
2b3d8     00 14 06 F6 | 	mov	arg02, ##1065353216
2b3dc     01 16 06 F6 | 	mov	arg03, #1
2b3e0     84 F3 BF FD | 	call	#__system___float_cmp
2b3e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b3e8     10 00 90 AD |  if_e	jmp	#LR__3886
2b3ec     13 13 02 F6 | 	mov	arg01, local01
2b3f0     17 15 02 F6 | 	mov	arg02, local05
2b3f4     3C EF BF FD | 	call	#__system___float_mul
2b3f8     FD 2E 02 F6 | 	mov	local05, result1
2b3fc                 | LR__3886
2b3fc                 | LR__3887
2b3fc     17 FB 01 F6 | 	mov	result1, local05
2b400                 | LR__3888
2b400     A7 F0 03 F6 | 	mov	ptra, fp
2b404     B2 00 A0 FD | 	call	#popregs_
2b408                 | __system___float_pow_n_ret
2b408     2D 00 64 FD | 	ret
2b40c                 | 
2b40c                 | __system___gc_ptrs
2b40c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2b410     00 03 02 F6 | 	mov	_var02, _var01
2b414     BB 00 00 FF 
2b418     F8 02 06 F1 | 	add	_var02, ##95992
2b41c     00 FD 09 FB | 	rdlong	result2, _var01 wz
2b420     74 00 90 5D |  if_ne	jmp	#LR__3890
2b424     01 FD 01 F6 | 	mov	result2, _var02
2b428     00 FD 81 F1 | 	sub	result2, _var01
2b42c     00 03 58 FC | 	wrword	#1, _var01
2b430     00 FB 01 F6 | 	mov	result1, _var01
2b434     02 FA 05 F1 | 	add	result1, #2
2b438     36 00 80 FF 
2b43c     FD 20 59 FC | 	wrword	##27792, result1
2b440     00 FB 01 F6 | 	mov	result1, _var01
2b444     04 FA 05 F1 | 	add	result1, #4
2b448     FD 00 58 FC | 	wrword	#0, result1
2b44c     00 FB 01 F6 | 	mov	result1, _var01
2b450     06 FA 05 F1 | 	add	result1, #6
2b454     FD 02 58 FC | 	wrword	#1, result1
2b458     10 00 06 F1 | 	add	_var01, #16
2b45c     FE FC 51 F6 | 	abs	result2, result2 wc
2b460     04 FC 45 F0 | 	shr	result2, #4
2b464     FE FC 81 F6 | 	negc	result2, result2
2b468     00 FD 51 FC | 	wrword	result2, _var01
2b46c     00 FD 01 F6 | 	mov	result2, _var01
2b470     02 FC 05 F1 | 	add	result2, #2
2b474     36 00 80 FF 
2b478     FE 1E 59 FC | 	wrword	##27791, result2
2b47c     00 FD 01 F6 | 	mov	result2, _var01
2b480     04 FC 05 F1 | 	add	result2, #4
2b484     FE 00 58 FC | 	wrword	#0, result2
2b488     00 FD 01 F6 | 	mov	result2, _var01
2b48c     06 FC 05 F1 | 	add	result2, #6
2b490     FE 00 58 FC | 	wrword	#0, result2
2b494     10 00 86 F1 | 	sub	_var01, #16
2b498                 | LR__3890
2b498     00 FB 01 F6 | 	mov	result1, _var01
2b49c     01 FD 01 F6 | 	mov	result2, _var02
2b4a0                 | __system___gc_ptrs_ret
2b4a0     2D 00 64 FD | 	ret
2b4a4                 | 
2b4a4                 | __system___gc_tryalloc
2b4a4     0B 4A 05 F6 | 	mov	COUNT_, #11
2b4a8     A8 00 A0 FD | 	call	#pushregs_
2b4ac     09 27 02 F6 | 	mov	local01, arg01
2b4b0     0A 29 02 F6 | 	mov	local02, arg02
2b4b4     54 FF BF FD | 	call	#__system___gc_ptrs
2b4b8     FD 2A 02 F6 | 	mov	local03, result1
2b4bc     FE 2C 02 F6 | 	mov	local04, result2
2b4c0     15 2F 02 F6 | 	mov	local05, local03
2b4c4     00 30 06 F6 | 	mov	local06, #0
2b4c8     97 1E 48 FB | 	callpa	#(@LR__3901-@LR__3900)>>2,fcache_load_ptr_
2b4cc                 | LR__3900
2b4cc     17 33 02 F6 | 	mov	local07, local05
2b4d0     06 2E 06 F1 | 	add	local05, #6
2b4d4     17 15 EA FA | 	rdword	arg02, local05 wz
2b4d8     15 13 02 F6 | 	mov	arg01, local03
2b4dc     00 FA 05 A6 |  if_e	mov	result1, #0
2b4e0     04 14 66 50 |  if_ne	shl	arg02, #4
2b4e4     0A 13 02 51 |  if_ne	add	arg01, arg02
2b4e8     09 FB 01 56 |  if_ne	mov	result1, arg01
2b4ec     FD 2E 0A F6 | 	mov	local05, result1 wz
2b4f0     17 31 E2 5A |  if_ne	rdword	local06, local05
2b4f4     00 2E 0E F2 | 	cmp	local05, #0 wz
2b4f8     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2b4fc     08 00 90 1D |  if_a	jmp	#LR__3902
2b500     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2b504     C4 FF 9F 1D |  if_a	jmp	#LR__3900
2b508                 | LR__3901
2b508                 | LR__3902
2b508     00 2E 0E F2 | 	cmp	local05, #0 wz
2b50c     17 FB 01 A6 |  if_e	mov	result1, local05
2b510     3C 01 90 AD |  if_e	jmp	#LR__3905
2b514     17 FD 01 F6 | 	mov	result2, local05
2b518     06 FC 05 F1 | 	add	result2, #6
2b51c     FE 34 E2 FA | 	rdword	local08, result2
2b520     18 27 52 F2 | 	cmps	local01, local06 wc
2b524     C0 00 90 3D |  if_ae	jmp	#LR__3904
2b528     17 27 52 FC | 	wrword	local01, local05
2b52c     17 13 02 F6 | 	mov	arg01, local05
2b530     13 35 02 F6 | 	mov	local08, local01
2b534     04 34 66 F0 | 	shl	local08, #4
2b538     1A 13 02 F1 | 	add	arg01, local08
2b53c     13 31 82 F1 | 	sub	local06, local01
2b540     09 31 52 FC | 	wrword	local06, arg01
2b544     09 35 02 F6 | 	mov	local08, arg01
2b548     02 34 06 F1 | 	add	local08, #2
2b54c     36 00 80 FF 
2b550     1A 1F 59 FC | 	wrword	##27791, local08
2b554     17 15 0A F6 | 	mov	arg02, local05 wz
2b558     00 FA 05 A6 |  if_e	mov	result1, #0
2b55c     15 15 82 51 |  if_ne	sub	arg02, local03
2b560     04 14 46 50 |  if_ne	shr	arg02, #4
2b564     0A FB 01 56 |  if_ne	mov	result1, arg02
2b568     09 35 02 F6 | 	mov	local08, arg01
2b56c     04 34 06 F1 | 	add	local08, #4
2b570     1A FB 51 FC | 	wrword	result1, local08
2b574     17 35 02 F6 | 	mov	local08, local05
2b578     06 34 06 F1 | 	add	local08, #6
2b57c     09 15 02 F6 | 	mov	arg02, arg01
2b580     1A 35 E2 FA | 	rdword	local08, local08
2b584     06 14 06 F1 | 	add	arg02, #6
2b588     0A 35 52 FC | 	wrword	local08, arg02
2b58c     09 37 02 F6 | 	mov	local09, arg01
2b590     1B 15 0A F6 | 	mov	arg02, local09 wz
2b594     00 FA 05 A6 |  if_e	mov	result1, #0
2b598     15 15 82 51 |  if_ne	sub	arg02, local03
2b59c     04 14 46 50 |  if_ne	shr	arg02, #4
2b5a0     0A FB 01 56 |  if_ne	mov	result1, arg02
2b5a4     FD 34 02 F6 | 	mov	local08, result1
2b5a8     09 39 EA FA | 	rdword	local10, arg01 wz
2b5ac     00 FA 05 A6 |  if_e	mov	result1, #0
2b5b0     04 38 66 50 |  if_ne	shl	local10, #4
2b5b4     1C 13 02 51 |  if_ne	add	arg01, local10
2b5b8     09 FB 01 56 |  if_ne	mov	result1, arg01
2b5bc     FD 3A 0A F6 | 	mov	local11, result1 wz
2b5c0     24 00 90 AD |  if_e	jmp	#LR__3903
2b5c4     16 3B 52 F2 | 	cmps	local11, local04 wc
2b5c8     1C 00 90 3D |  if_ae	jmp	#LR__3903
2b5cc     1B 15 0A F6 | 	mov	arg02, local09 wz
2b5d0     00 FA 05 A6 |  if_e	mov	result1, #0
2b5d4     15 15 82 51 |  if_ne	sub	arg02, local03
2b5d8     04 14 46 50 |  if_ne	shr	arg02, #4
2b5dc     0A FB 01 56 |  if_ne	mov	result1, arg02
2b5e0     04 3A 06 F1 | 	add	local11, #4
2b5e4     1D FB 51 FC | 	wrword	result1, local11
2b5e8                 | LR__3903
2b5e8                 | LR__3904
2b5e8     06 32 06 F1 | 	add	local07, #6
2b5ec     19 35 52 FC | 	wrword	local08, local07
2b5f0     36 00 00 FF 
2b5f4     80 36 06 F6 | 	mov	local09, ##27776
2b5f8     14 37 42 F5 | 	or	local09, local02
2b5fc     00 FA 05 F6 | 	mov	result1, #0
2b600     01 FA 61 FD | 	cogid	result1
2b604     FD 36 42 F5 | 	or	local09, result1
2b608     17 3B 02 F6 | 	mov	local11, local05
2b60c     02 3A 06 F1 | 	add	local11, #2
2b610     1D 37 52 FC | 	wrword	local09, local11
2b614     15 37 02 F6 | 	mov	local09, local03
2b618     08 36 06 F1 | 	add	local09, #8
2b61c     17 3B 02 F6 | 	mov	local11, local05
2b620     1B 37 E2 FA | 	rdword	local09, local09
2b624     06 3A 06 F1 | 	add	local11, #6
2b628     1D 37 52 FC | 	wrword	local09, local11
2b62c     17 15 0A F6 | 	mov	arg02, local05 wz
2b630     00 FA 05 A6 |  if_e	mov	result1, #0
2b634     15 15 82 51 |  if_ne	sub	arg02, local03
2b638     04 14 46 50 |  if_ne	shr	arg02, #4
2b63c     0A FB 01 56 |  if_ne	mov	result1, arg02
2b640     08 2A 06 F1 | 	add	local03, #8
2b644     15 FB 51 FC | 	wrword	result1, local03
2b648     08 2E 06 F1 | 	add	local05, #8
2b64c     17 FB 01 F6 | 	mov	result1, local05
2b650                 | LR__3905
2b650     A7 F0 03 F6 | 	mov	ptra, fp
2b654     B2 00 A0 FD | 	call	#popregs_
2b658                 | __system___gc_tryalloc_ret
2b658     2D 00 64 FD | 	ret
2b65c                 | 
2b65c                 | __system___gc_alloc_managed
2b65c     01 4A 05 F6 | 	mov	COUNT_, #1
2b660     A8 00 A0 FD | 	call	#pushregs_
2b664     09 27 02 F6 | 	mov	local01, arg01
2b668     00 14 06 F6 | 	mov	arg02, #0
2b66c     1C 00 B0 FD | 	call	#__system___gc_doalloc
2b670     FD 14 0A F6 | 	mov	arg02, result1 wz
2b674     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2b678     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2b67c     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2b680     A7 F0 03 F6 | 	mov	ptra, fp
2b684     B2 00 A0 FD | 	call	#popregs_
2b688                 | __system___gc_alloc_managed_ret
2b688     2D 00 64 FD | 	ret
2b68c                 | 
2b68c                 | __system___gc_doalloc
2b68c     06 4A 05 F6 | 	mov	COUNT_, #6
2b690     A8 00 A0 FD | 	call	#pushregs_
2b694     09 27 0A F6 | 	mov	local01, arg01 wz
2b698     0A 29 02 F6 | 	mov	local02, arg02
2b69c     00 FA 05 A6 |  if_e	mov	result1, #0
2b6a0     8C 00 90 AD |  if_e	jmp	#LR__3917
2b6a4     17 26 06 F1 | 	add	local01, #23
2b6a8     0F 26 26 F5 | 	andn	local01, #15
2b6ac     04 26 46 F0 | 	shr	local01, #4
2b6b0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b6b4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b6b8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b6bc     F8 BD BF FD | 	call	#__system___lockmem
2b6c0     13 13 02 F6 | 	mov	arg01, local01
2b6c4     14 15 02 F6 | 	mov	arg02, local02
2b6c8     D8 FD BF FD | 	call	#__system___gc_tryalloc
2b6cc     FD 2A 0A F6 | 	mov	local03, result1 wz
2b6d0     14 00 90 5D |  if_ne	jmp	#LR__3910
2b6d4     70 03 B0 FD | 	call	#__system___gc_docollect
2b6d8     13 13 02 F6 | 	mov	arg01, local01
2b6dc     14 15 02 F6 | 	mov	arg02, local02
2b6e0     C0 FD BF FD | 	call	#__system___gc_tryalloc
2b6e4     FD 2A 02 F6 | 	mov	local03, result1
2b6e8                 | LR__3910
2b6e8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b6ec     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b6f0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b6f4     09 01 68 FC | 	wrlong	#0, arg01
2b6f8     00 2A 0E F2 | 	cmp	local03, #0 wz
2b6fc     2C 00 90 AD |  if_e	jmp	#LR__3916
2b700     04 26 66 F0 | 	shl	local01, #4
2b704     08 26 86 F1 | 	sub	local01, #8
2b708     13 2D 52 F6 | 	abs	local04, local01 wc
2b70c     02 2C 46 F0 | 	shr	local04, #2
2b710     16 2F 8A F6 | 	negc	local05, local04 wz
2b714     15 31 02 F6 | 	mov	local06, local03
2b718     10 00 90 AD |  if_e	jmp	#LR__3915
2b71c     97 06 48 FB | 	callpa	#(@LR__3913-@LR__3911)>>2,fcache_load_ptr_
2b720                 | LR__3911
2b720     17 05 D8 FC | 	rep	@LR__3914, local05
2b724                 | LR__3912
2b724     18 01 68 FC | 	wrlong	#0, local06
2b728     04 30 06 F1 | 	add	local06, #4
2b72c                 | LR__3913
2b72c                 | LR__3914
2b72c                 | LR__3915
2b72c                 | LR__3916
2b72c     15 FB 01 F6 | 	mov	result1, local03
2b730                 | LR__3917
2b730     A7 F0 03 F6 | 	mov	ptra, fp
2b734     B2 00 A0 FD | 	call	#popregs_
2b738                 | __system___gc_doalloc_ret
2b738     2D 00 64 FD | 	ret
2b73c                 | 
2b73c                 | __system___gc_isvalidptr
2b73c     F8 16 06 F4 | 	bitl	arg03, #248
2b740     08 16 86 F1 | 	sub	arg03, #8
2b744     09 17 52 F2 | 	cmps	arg03, arg01 wc
2b748     08 00 90 CD |  if_b	jmp	#LR__3920
2b74c     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2b750     08 00 90 CD |  if_b	jmp	#LR__3921
2b754                 | LR__3920
2b754     00 FA 05 F6 | 	mov	result1, #0
2b758     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2b75c                 | LR__3921
2b75c     0B 01 02 F6 | 	mov	_var01, arg03
2b760     09 01 62 F5 | 	xor	_var01, arg01
2b764     0F 00 CE F7 | 	test	_var01, #15 wz
2b768     00 FA 05 56 |  if_ne	mov	result1, #0
2b76c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2b770     0B 01 02 F6 | 	mov	_var01, arg03
2b774     02 00 06 F1 | 	add	_var01, #2
2b778     00 01 E2 FA | 	rdword	_var01, _var01
2b77c     7F 00 00 FF 
2b780     C0 01 06 F5 | 	and	_var01, ##65472
2b784     36 00 00 FF 
2b788     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2b78c     00 FA 05 56 |  if_ne	mov	result1, #0
2b790     0B FB 01 A6 |  if_e	mov	result1, arg03
2b794                 | __system___gc_isvalidptr_ret
2b794     2D 00 64 FD | 	ret
2b798                 | 
2b798                 | __system___gc_free
2b798     09 17 02 F6 | 	mov	arg03, arg01
2b79c     6C FC BF FD | 	call	#__system___gc_ptrs
2b7a0     FD 12 02 F6 | 	mov	arg01, result1
2b7a4     FE 14 02 F6 | 	mov	arg02, result2
2b7a8     90 FF BF FD | 	call	#__system___gc_isvalidptr
2b7ac     FD 14 0A F6 | 	mov	arg02, result1 wz
2b7b0     28 00 90 AD |  if_e	jmp	#LR__3930
2b7b4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b7b8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b7bc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b7c0     F4 BC BF FD | 	call	#__system___lockmem
2b7c4     0A 13 02 F6 | 	mov	arg01, arg02
2b7c8     14 00 B0 FD | 	call	#__system___gc_dofree
2b7cc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b7d0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b7d4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b7d8     09 01 68 FC | 	wrlong	#0, arg01
2b7dc                 | LR__3930
2b7dc                 | __system___gc_free_ret
2b7dc     2D 00 64 FD | 	ret
2b7e0                 | 
2b7e0                 | __system___gc_dofree
2b7e0     06 4A 05 F6 | 	mov	COUNT_, #6
2b7e4     A8 00 A0 FD | 	call	#pushregs_
2b7e8     09 27 02 F6 | 	mov	local01, arg01
2b7ec     1C FC BF FD | 	call	#__system___gc_ptrs
2b7f0     FD 28 02 F6 | 	mov	local02, result1
2b7f4     FE 2A 02 F6 | 	mov	local03, result2
2b7f8     13 15 02 F6 | 	mov	arg02, local01
2b7fc     02 14 06 F1 | 	add	arg02, #2
2b800     36 00 80 FF 
2b804     0A 1F 59 FC | 	wrword	##27791, arg02
2b808     13 2D 02 F6 | 	mov	local04, local01
2b80c     13 13 02 F6 | 	mov	arg01, local01
2b810     09 2F EA FA | 	rdword	local05, arg01 wz
2b814     00 FA 05 A6 |  if_e	mov	result1, #0
2b818     04 2E 66 50 |  if_ne	shl	local05, #4
2b81c     17 13 02 51 |  if_ne	add	arg01, local05
2b820     09 FB 01 56 |  if_ne	mov	result1, arg01
2b824     FD 30 02 F6 | 	mov	local06, result1
2b828     97 24 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
2b82c                 | LR__3940
2b82c     04 2C 06 F1 | 	add	local04, #4
2b830     16 15 EA FA | 	rdword	arg02, local04 wz
2b834     14 13 02 F6 | 	mov	arg01, local02
2b838     00 FA 05 A6 |  if_e	mov	result1, #0
2b83c     04 14 66 50 |  if_ne	shl	arg02, #4
2b840     0A 13 02 51 |  if_ne	add	arg01, arg02
2b844     09 FB 01 56 |  if_ne	mov	result1, arg01
2b848     FD 2C 0A F6 | 	mov	local04, result1 wz
2b84c     24 00 90 AD |  if_e	jmp	#LR__3942
2b850     16 13 02 F6 | 	mov	arg01, local04
2b854     00 FA 05 F6 | 	mov	result1, #0
2b858     02 12 06 F1 | 	add	arg01, #2
2b85c     09 13 E2 FA | 	rdword	arg01, arg01
2b860     36 00 00 FF 
2b864     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b868     01 FA 65 A6 |  if_e	neg	result1, #1
2b86c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b870     B8 FF 9F AD |  if_e	jmp	#LR__3940
2b874                 | LR__3941
2b874                 | LR__3942
2b874     00 2C 0E F2 | 	cmp	local04, #0 wz
2b878     14 2D 02 A6 |  if_e	mov	local04, local02
2b87c     16 15 02 F6 | 	mov	arg02, local04
2b880     06 14 06 F1 | 	add	arg02, #6
2b884     13 13 02 F6 | 	mov	arg01, local01
2b888     0A 15 E2 FA | 	rdword	arg02, arg02
2b88c     06 12 06 F1 | 	add	arg01, #6
2b890     09 15 52 FC | 	wrword	arg02, arg01
2b894     13 15 0A F6 | 	mov	arg02, local01 wz
2b898     00 FA 05 A6 |  if_e	mov	result1, #0
2b89c     14 15 82 51 |  if_ne	sub	arg02, local02
2b8a0     04 14 46 50 |  if_ne	shr	arg02, #4
2b8a4     0A FB 01 56 |  if_ne	mov	result1, arg02
2b8a8     16 15 02 F6 | 	mov	arg02, local04
2b8ac     06 14 06 F1 | 	add	arg02, #6
2b8b0     0A FB 51 FC | 	wrword	result1, arg02
2b8b4     14 2D 0A F2 | 	cmp	local04, local02 wz
2b8b8     A4 00 90 AD |  if_e	jmp	#LR__3945
2b8bc     16 13 02 F6 | 	mov	arg01, local04
2b8c0     09 2F EA FA | 	rdword	local05, arg01 wz
2b8c4     00 FA 05 A6 |  if_e	mov	result1, #0
2b8c8     04 2E 66 50 |  if_ne	shl	local05, #4
2b8cc     17 13 02 51 |  if_ne	add	arg01, local05
2b8d0     09 FB 01 56 |  if_ne	mov	result1, arg01
2b8d4     13 FB 09 F2 | 	cmp	result1, local01 wz
2b8d8     84 00 90 5D |  if_ne	jmp	#LR__3944
2b8dc     16 31 E2 FA | 	rdword	local06, local04
2b8e0     13 15 E2 FA | 	rdword	arg02, local01
2b8e4     0A 31 02 F1 | 	add	local06, arg02
2b8e8     16 31 52 FC | 	wrword	local06, local04
2b8ec     13 31 02 F6 | 	mov	local06, local01
2b8f0     02 30 06 F1 | 	add	local06, #2
2b8f4     18 01 58 FC | 	wrword	#0, local06
2b8f8     13 13 02 F6 | 	mov	arg01, local01
2b8fc     09 2F EA FA | 	rdword	local05, arg01 wz
2b900     00 FA 05 A6 |  if_e	mov	result1, #0
2b904     04 2E 66 50 |  if_ne	shl	local05, #4
2b908     17 13 02 51 |  if_ne	add	arg01, local05
2b90c     09 FB 01 56 |  if_ne	mov	result1, arg01
2b910     FD 30 02 F6 | 	mov	local06, result1
2b914     15 31 52 F2 | 	cmps	local06, local03 wc
2b918     20 00 90 3D |  if_ae	jmp	#LR__3943
2b91c     16 15 0A F6 | 	mov	arg02, local04 wz
2b920     00 FA 05 A6 |  if_e	mov	result1, #0
2b924     14 15 82 51 |  if_ne	sub	arg02, local02
2b928     04 14 46 50 |  if_ne	shr	arg02, #4
2b92c     0A FB 01 56 |  if_ne	mov	result1, arg02
2b930     18 15 02 F6 | 	mov	arg02, local06
2b934     04 14 06 F1 | 	add	arg02, #4
2b938     0A FB 51 FC | 	wrword	result1, arg02
2b93c                 | LR__3943
2b93c     13 15 02 F6 | 	mov	arg02, local01
2b940     06 14 06 F1 | 	add	arg02, #6
2b944     16 FD 01 F6 | 	mov	result2, local04
2b948     0A 15 E2 FA | 	rdword	arg02, arg02
2b94c     06 FC 05 F1 | 	add	result2, #6
2b950     FE 14 52 FC | 	wrword	arg02, result2
2b954     06 26 06 F1 | 	add	local01, #6
2b958     13 01 58 FC | 	wrword	#0, local01
2b95c     16 27 02 F6 | 	mov	local01, local04
2b960                 | LR__3944
2b960                 | LR__3945
2b960     13 13 02 F6 | 	mov	arg01, local01
2b964     09 2F EA FA | 	rdword	local05, arg01 wz
2b968     00 FA 05 A6 |  if_e	mov	result1, #0
2b96c     04 2E 66 50 |  if_ne	shl	local05, #4
2b970     17 13 02 51 |  if_ne	add	arg01, local05
2b974     09 FB 01 56 |  if_ne	mov	result1, arg01
2b978     FD 14 0A F6 | 	mov	arg02, result1 wz
2b97c     B8 00 90 AD |  if_e	jmp	#LR__3947
2b980     15 15 52 F2 | 	cmps	arg02, local03 wc
2b984     B0 00 90 3D |  if_ae	jmp	#LR__3947
2b988     0A 13 02 F6 | 	mov	arg01, arg02
2b98c     00 FA 05 F6 | 	mov	result1, #0
2b990     02 12 06 F1 | 	add	arg01, #2
2b994     09 13 E2 FA | 	rdword	arg01, arg01
2b998     36 00 00 FF 
2b99c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b9a0     01 FA 65 A6 |  if_e	neg	result1, #1
2b9a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9a8     8C 00 90 AD |  if_e	jmp	#LR__3947
2b9ac     13 2D 02 F6 | 	mov	local04, local01
2b9b0     16 31 E2 FA | 	rdword	local06, local04
2b9b4     0A 13 02 F6 | 	mov	arg01, arg02
2b9b8     09 27 E2 FA | 	rdword	local01, arg01
2b9bc     13 31 02 F1 | 	add	local06, local01
2b9c0     16 31 52 FC | 	wrword	local06, local04
2b9c4     09 31 02 F6 | 	mov	local06, arg01
2b9c8     06 30 06 F1 | 	add	local06, #6
2b9cc     16 27 02 F6 | 	mov	local01, local04
2b9d0     18 31 E2 FA | 	rdword	local06, local06
2b9d4     06 26 06 F1 | 	add	local01, #6
2b9d8     13 31 52 FC | 	wrword	local06, local01
2b9dc     09 31 02 F6 | 	mov	local06, arg01
2b9e0     02 30 06 F1 | 	add	local06, #2
2b9e4     18 55 59 FC | 	wrword	#170, local06
2b9e8     09 31 02 F6 | 	mov	local06, arg01
2b9ec     06 30 06 F1 | 	add	local06, #6
2b9f0     18 01 58 FC | 	wrword	#0, local06
2b9f4     09 2F EA FA | 	rdword	local05, arg01 wz
2b9f8     00 FA 05 A6 |  if_e	mov	result1, #0
2b9fc     04 2E 66 50 |  if_ne	shl	local05, #4
2ba00     17 13 02 51 |  if_ne	add	arg01, local05
2ba04     09 FB 01 56 |  if_ne	mov	result1, arg01
2ba08     FD 30 0A F6 | 	mov	local06, result1 wz
2ba0c     28 00 90 AD |  if_e	jmp	#LR__3946
2ba10     15 31 52 F2 | 	cmps	local06, local03 wc
2ba14     20 00 90 3D |  if_ae	jmp	#LR__3946
2ba18     16 15 0A F6 | 	mov	arg02, local04 wz
2ba1c     00 FA 05 A6 |  if_e	mov	result1, #0
2ba20     14 15 82 51 |  if_ne	sub	arg02, local02
2ba24     04 14 46 50 |  if_ne	shr	arg02, #4
2ba28     0A FB 01 56 |  if_ne	mov	result1, arg02
2ba2c     18 2D 02 F6 | 	mov	local04, local06
2ba30     04 2C 06 F1 | 	add	local04, #4
2ba34     16 FB 51 FC | 	wrword	result1, local04
2ba38                 | LR__3946
2ba38                 | LR__3947
2ba38     18 FB 01 F6 | 	mov	result1, local06
2ba3c     A7 F0 03 F6 | 	mov	ptra, fp
2ba40     B2 00 A0 FD | 	call	#popregs_
2ba44                 | __system___gc_dofree_ret
2ba44     2D 00 64 FD | 	ret
2ba48                 | 
2ba48                 | __system___gc_docollect
2ba48     05 4A 05 F6 | 	mov	COUNT_, #5
2ba4c     A8 00 A0 FD | 	call	#pushregs_
2ba50     B8 F9 BF FD | 	call	#__system___gc_ptrs
2ba54     FE 26 02 F6 | 	mov	local01, result2
2ba58     FD 28 02 F6 | 	mov	local02, result1
2ba5c     14 13 02 F6 | 	mov	arg01, local02
2ba60     09 2B EA FA | 	rdword	local03, arg01 wz
2ba64     00 FA 05 A6 |  if_e	mov	result1, #0
2ba68     04 2A 66 50 |  if_ne	shl	local03, #4
2ba6c     15 13 02 51 |  if_ne	add	arg01, local03
2ba70     09 FB 01 56 |  if_ne	mov	result1, arg01
2ba74     FD 2C 0A F6 | 	mov	local04, result1 wz
2ba78     00 FA 05 F6 | 	mov	result1, #0
2ba7c     01 FA 61 FD | 	cogid	result1
2ba80     FD 2E 02 F6 | 	mov	local05, result1
2ba84     48 00 90 AD |  if_e	jmp	#LR__3952
2ba88     97 22 48 FB | 	callpa	#(@LR__3951-@LR__3950)>>2,fcache_load_ptr_
2ba8c                 | LR__3950
2ba8c     13 2D 52 F2 | 	cmps	local04, local01 wc
2ba90     3C 00 90 3D |  if_ae	jmp	#LR__3952
2ba94     16 15 02 F6 | 	mov	arg02, local04
2ba98     02 14 06 F1 | 	add	arg02, #2
2ba9c     0A 15 E2 FA | 	rdword	arg02, arg02
2baa0     20 14 26 F5 | 	andn	arg02, #32
2baa4     16 13 02 F6 | 	mov	arg01, local04
2baa8     02 12 06 F1 | 	add	arg01, #2
2baac     09 15 52 FC | 	wrword	arg02, arg01
2bab0     16 13 02 F6 | 	mov	arg01, local04
2bab4     09 2B EA FA | 	rdword	local03, arg01 wz
2bab8     00 FA 05 A6 |  if_e	mov	result1, #0
2babc     04 2A 66 50 |  if_ne	shl	local03, #4
2bac0     15 13 02 51 |  if_ne	add	arg01, local03
2bac4     09 FB 01 56 |  if_ne	mov	result1, arg01
2bac8     FD 2C 0A F6 | 	mov	local04, result1 wz
2bacc     BC FF 9F 5D |  if_ne	jmp	#LR__3950
2bad0                 | LR__3951
2bad0                 | LR__3952
2bad0     00 2A 06 F6 | 	mov	local03, #0
2bad4     00 12 06 F6 | 	mov	arg01, #0
2bad8     B4 B9 BF FD | 	call	#__system____topofstack
2badc     FD 14 02 F6 | 	mov	arg02, result1
2bae0     15 13 02 F6 | 	mov	arg01, local03
2bae4     90 00 B0 FD | 	call	#__system___gc_markhub
2bae8     1C 01 B0 FD | 	call	#__system___gc_markcog
2baec     14 13 02 F6 | 	mov	arg01, local02
2baf0     09 2B EA FA | 	rdword	local03, arg01 wz
2baf4     00 FA 05 A6 |  if_e	mov	result1, #0
2baf8     04 2A 66 50 |  if_ne	shl	local03, #4
2bafc     15 13 02 51 |  if_ne	add	arg01, local03
2bb00     09 FB 01 56 |  if_ne	mov	result1, arg01
2bb04     FD 28 0A F6 | 	mov	local02, result1 wz
2bb08     60 00 90 AD |  if_e	jmp	#LR__3956
2bb0c                 | LR__3953
2bb0c     14 2D 02 F6 | 	mov	local04, local02
2bb10     16 13 02 F6 | 	mov	arg01, local04
2bb14     09 2B EA FA | 	rdword	local03, arg01 wz
2bb18     00 FA 05 A6 |  if_e	mov	result1, #0
2bb1c     04 2A 66 50 |  if_ne	shl	local03, #4
2bb20     15 13 02 51 |  if_ne	add	arg01, local03
2bb24     09 FB 01 56 |  if_ne	mov	result1, arg01
2bb28     FD 28 02 F6 | 	mov	local02, result1
2bb2c     16 15 02 F6 | 	mov	arg02, local04
2bb30     02 14 06 F1 | 	add	arg02, #2
2bb34     0A 15 E2 FA | 	rdword	arg02, arg02
2bb38     20 14 CE F7 | 	test	arg02, #32 wz
2bb3c     10 14 CE A7 |  if_e	test	arg02, #16 wz
2bb40     1C 00 90 5D |  if_ne	jmp	#LR__3955
2bb44     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2bb48     17 15 0A F2 | 	cmp	arg02, local05 wz
2bb4c     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2bb50     0C 00 90 5D |  if_ne	jmp	#LR__3954
2bb54     16 13 02 F6 | 	mov	arg01, local04
2bb58     84 FC BF FD | 	call	#__system___gc_dofree
2bb5c     FD 28 02 F6 | 	mov	local02, result1
2bb60                 | LR__3954
2bb60                 | LR__3955
2bb60     00 28 0E F2 | 	cmp	local02, #0 wz
2bb64     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2bb68     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3953
2bb6c                 | LR__3956
2bb6c     A7 F0 03 F6 | 	mov	ptra, fp
2bb70     B2 00 A0 FD | 	call	#popregs_
2bb74                 | __system___gc_docollect_ret
2bb74     2D 00 64 FD | 	ret
2bb78                 | 
2bb78                 | __system___gc_markhub
2bb78     04 4A 05 F6 | 	mov	COUNT_, #4
2bb7c     A8 00 A0 FD | 	call	#pushregs_
2bb80     09 27 02 F6 | 	mov	local01, arg01
2bb84     0A 29 02 F6 | 	mov	local02, arg02
2bb88     80 F8 BF FD | 	call	#__system___gc_ptrs
2bb8c     FD 2A 02 F6 | 	mov	local03, result1
2bb90     FE 2C 02 F6 | 	mov	local04, result2
2bb94                 | LR__3960
2bb94     14 27 52 F2 | 	cmps	local01, local02 wc
2bb98     60 00 90 3D |  if_ae	jmp	#LR__3961
2bb9c     13 17 02 FB | 	rdlong	arg03, local01
2bba0     04 26 06 F1 | 	add	local01, #4
2bba4     16 15 02 F6 | 	mov	arg02, local04
2bba8     15 13 02 F6 | 	mov	arg01, local03
2bbac     8C FB BF FD | 	call	#__system___gc_isvalidptr
2bbb0     FD 16 0A F6 | 	mov	arg03, result1 wz
2bbb4     DC FF 9F AD |  if_e	jmp	#LR__3960
2bbb8     0B 13 02 F6 | 	mov	arg01, arg03
2bbbc     00 FA 05 F6 | 	mov	result1, #0
2bbc0     02 12 06 F1 | 	add	arg01, #2
2bbc4     09 13 E2 FA | 	rdword	arg01, arg01
2bbc8     36 00 00 FF 
2bbcc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2bbd0     01 FA 65 A6 |  if_e	neg	result1, #1
2bbd4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bbd8     B8 FF 9F 5D |  if_ne	jmp	#LR__3960
2bbdc     0B FD 01 F6 | 	mov	result2, arg03
2bbe0     02 FC 05 F1 | 	add	result2, #2
2bbe4     FE FC E1 FA | 	rdword	result2, result2
2bbe8     0F FC 25 F5 | 	andn	result2, #15
2bbec     2E FC 45 F5 | 	or	result2, #46
2bbf0     02 16 06 F1 | 	add	arg03, #2
2bbf4     0B FD 51 FC | 	wrword	result2, arg03
2bbf8     98 FF 9F FD | 	jmp	#LR__3960
2bbfc                 | LR__3961
2bbfc     A7 F0 03 F6 | 	mov	ptra, fp
2bc00     B2 00 A0 FD | 	call	#popregs_
2bc04                 | __system___gc_markhub_ret
2bc04     2D 00 64 FD | 	ret
2bc08                 | 
2bc08                 | __system___gc_markcog
2bc08     04 4A 05 F6 | 	mov	COUNT_, #4
2bc0c     A8 00 A0 FD | 	call	#pushregs_
2bc10     F8 F7 BF FD | 	call	#__system___gc_ptrs
2bc14     FD 26 02 F6 | 	mov	local01, result1
2bc18     FE 28 02 F6 | 	mov	local02, result2
2bc1c     EF 2B 06 F6 | 	mov	local03, #495
2bc20                 | LR__3970
2bc20                 | 	'.live	local03
2bc20     00 2A 96 F9 | 	alts	local03, #0
2bc24     15 2D 02 F6 | 	mov	local04, local03
2bc28     13 13 02 F6 | 	mov	arg01, local01
2bc2c     14 15 02 F6 | 	mov	arg02, local02
2bc30     16 17 02 F6 | 	mov	arg03, local04
2bc34     04 FB BF FD | 	call	#__system___gc_isvalidptr
2bc38     00 FA 0D F2 | 	cmp	result1, #0 wz
2bc3c     18 00 90 AD |  if_e	jmp	#LR__3971
2bc40     FD 2C 02 F6 | 	mov	local04, result1
2bc44     02 2C 06 F1 | 	add	local04, #2
2bc48     16 2D E2 FA | 	rdword	local04, local04
2bc4c     20 2C 46 F5 | 	or	local04, #32
2bc50     02 FA 05 F1 | 	add	result1, #2
2bc54     FD 2C 52 FC | 	wrword	local04, result1
2bc58                 | LR__3971
2bc58     01 2A 86 F1 | 	sub	local03, #1
2bc5c     00 2A 56 F2 | 	cmps	local03, #0 wc
2bc60     BC FF 9F 3D |  if_ae	jmp	#LR__3970
2bc64     A7 F0 03 F6 | 	mov	ptra, fp
2bc68     B2 00 A0 FD | 	call	#popregs_
2bc6c                 | __system___gc_markcog_ret
2bc6c     2D 00 64 FD | 	ret
2bc70                 | 
2bc70                 | __system__opendir
2bc70     06 4A 05 F6 | 	mov	COUNT_, #6
2bc74     A8 00 A0 FD | 	call	#pushregs_
2bc78     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2bc7c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2bc80     09 15 02 F6 | 	mov	arg02, arg01
2bc84     13 13 02 F6 | 	mov	arg01, local01
2bc88     00 16 06 F6 | 	mov	arg03, #0
2bc8c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2bc90     BC BF BF FD | 	call	#__system____getvfsforfile
2bc94     FD 28 0A F6 | 	mov	local02, result1 wz
2bc98     10 00 90 AD |  if_e	jmp	#LR__3980
2bc9c     28 28 06 F1 | 	add	local02, #40
2bca0     14 17 0A FB | 	rdlong	arg03, local02 wz
2bca4     28 28 86 F1 | 	sub	local02, #40
2bca8     14 00 90 5D |  if_ne	jmp	#LR__3981
2bcac                 | LR__3980
2bcac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bcb0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2bcb4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bcb8     00 FA 05 F6 | 	mov	result1, #0
2bcbc     90 00 90 FD | 	jmp	#LR__3983
2bcc0                 | LR__3981
2bcc0     5C 12 06 F6 | 	mov	arg01, #92
2bcc4     10 14 06 F6 | 	mov	arg02, #16
2bcc8     C0 F9 BF FD | 	call	#__system___gc_doalloc
2bccc     FD 2A 0A F6 | 	mov	local03, result1 wz
2bcd0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bcd4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2bcd8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bcdc     00 FA 05 A6 |  if_e	mov	result1, #0
2bce0     6C 00 90 AD |  if_e	jmp	#LR__3983
2bce4     28 28 06 F1 | 	add	local02, #40
2bce8     14 2D 02 FB | 	rdlong	local04, local02
2bcec     16 2F 02 F6 | 	mov	local05, local04
2bcf0     28 28 86 F1 | 	sub	local02, #40
2bcf4     13 2E 46 F7 | 	zerox	local05, #19
2bcf8     14 2C 46 F0 | 	shr	local04, #20
2bcfc     02 2C 66 F0 | 	shl	local04, #2
2bd00     ED 2C 02 F1 | 	add	local04, __methods__
2bd04     16 2D 02 FB | 	rdlong	local04, local04
2bd08     15 13 02 F6 | 	mov	arg01, local03
2bd0c     13 15 02 F6 | 	mov	arg02, local01
2bd10     F2 30 02 F6 | 	mov	local06, objptr
2bd14     17 E5 01 F6 | 	mov	objptr, local05
2bd18     2D 2C 62 FD | 	call	local04
2bd1c     18 E5 01 F6 | 	mov	objptr, local06
2bd20     FD 16 0A F6 | 	mov	arg03, result1 wz
2bd24     20 00 90 AD |  if_e	jmp	#LR__3982
2bd28     00 16 4E F2 | 	cmps	arg03, #0 wz
2bd2c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bd30     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2bd34     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bd38     15 13 02 F6 | 	mov	arg01, local03
2bd3c     58 FA BF FD | 	call	#__system___gc_free
2bd40     00 FA 05 F6 | 	mov	result1, #0
2bd44     08 00 90 FD | 	jmp	#LR__3983
2bd48                 | LR__3982
2bd48     15 29 62 FC | 	wrlong	local02, local03
2bd4c     15 FB 01 F6 | 	mov	result1, local03
2bd50                 | LR__3983
2bd50     A7 F0 03 F6 | 	mov	ptra, fp
2bd54     B2 00 A0 FD | 	call	#popregs_
2bd58                 | __system__opendir_ret
2bd58     2D 00 64 FD | 	ret
2bd5c                 | 
2bd5c                 | __system__closedir
2bd5c     04 4A 05 F6 | 	mov	COUNT_, #4
2bd60     A8 00 A0 FD | 	call	#pushregs_
2bd64     09 27 02 F6 | 	mov	local01, arg01
2bd68     13 13 02 FB | 	rdlong	arg01, local01
2bd6c     2C 12 06 F1 | 	add	arg01, #44
2bd70     09 29 02 FB | 	rdlong	local02, arg01
2bd74     14 2B 02 F6 | 	mov	local03, local02
2bd78     13 2A 46 F7 | 	zerox	local03, #19
2bd7c     14 28 46 F0 | 	shr	local02, #20
2bd80     02 28 66 F0 | 	shl	local02, #2
2bd84     ED 28 02 F1 | 	add	local02, __methods__
2bd88     14 29 02 FB | 	rdlong	local02, local02
2bd8c     13 13 02 F6 | 	mov	arg01, local01
2bd90     F2 2C 02 F6 | 	mov	local04, objptr
2bd94     15 E5 01 F6 | 	mov	objptr, local03
2bd98     2D 28 62 FD | 	call	local02
2bd9c     16 E5 01 F6 | 	mov	objptr, local04
2bda0     FD 2C 02 F6 | 	mov	local04, result1
2bda4     13 13 02 F6 | 	mov	arg01, local01
2bda8     EC F9 BF FD | 	call	#__system___gc_free
2bdac     00 2C 4E F2 | 	cmps	local04, #0 wz
2bdb0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bdb4     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2bdb8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bdbc     01 FA 65 56 |  if_ne	neg	result1, #1
2bdc0     00 FA 05 A6 |  if_e	mov	result1, #0
2bdc4     A7 F0 03 F6 | 	mov	ptra, fp
2bdc8     B2 00 A0 FD | 	call	#popregs_
2bdcc                 | __system__closedir_ret
2bdcc     2D 00 64 FD | 	ret
2bdd0                 | 
2bdd0                 | __system__readdir
2bdd0     04 4A 05 F6 | 	mov	COUNT_, #4
2bdd4     A8 00 A0 FD | 	call	#pushregs_
2bdd8     09 15 0A FB | 	rdlong	arg02, arg01 wz
2bddc     08 12 06 F1 | 	add	arg01, #8
2bde0     09 27 02 F6 | 	mov	local01, arg01
2bde4     08 12 86 F1 | 	sub	arg01, #8
2bde8     00 FA 05 A6 |  if_e	mov	result1, #0
2bdec     5C 00 90 AD |  if_e	jmp	#LR__3991
2bdf0     30 14 06 F1 | 	add	arg02, #48
2bdf4     0A 29 02 FB | 	rdlong	local02, arg02
2bdf8     14 2B 02 F6 | 	mov	local03, local02
2bdfc     13 2A 46 F7 | 	zerox	local03, #19
2be00     14 28 46 F0 | 	shr	local02, #20
2be04     02 28 66 F0 | 	shl	local02, #2
2be08     ED 28 02 F1 | 	add	local02, __methods__
2be0c     14 29 02 FB | 	rdlong	local02, local02
2be10     13 15 02 F6 | 	mov	arg02, local01
2be14     F2 2C 02 F6 | 	mov	local04, objptr
2be18     15 E5 01 F6 | 	mov	objptr, local03
2be1c     2D 28 62 FD | 	call	local02
2be20     16 E5 01 F6 | 	mov	objptr, local04
2be24     00 FA 4D F2 | 	cmps	result1, #0 wz
2be28     1C 00 90 AD |  if_e	jmp	#LR__3990
2be2c     01 FA 55 F2 | 	cmps	result1, #1 wc
2be30     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2be34     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2be38     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2be3c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2be40     00 FA 05 F6 | 	mov	result1, #0
2be44     04 00 90 FD | 	jmp	#LR__3991
2be48                 | LR__3990
2be48     13 FB 01 F6 | 	mov	result1, local01
2be4c                 | LR__3991
2be4c     A7 F0 03 F6 | 	mov	ptra, fp
2be50     B2 00 A0 FD | 	call	#popregs_
2be54                 | __system__readdir_ret
2be54     2D 00 64 FD | 	ret
2be58                 | 
2be58                 | __system___openraw
2be58     15 4A 05 F6 | 	mov	COUNT_, #21
2be5c     A8 00 A0 FD | 	call	#pushregs_
2be60     09 27 02 F6 | 	mov	local01, arg01
2be64     0A 29 02 F6 | 	mov	local02, arg02
2be68     0B 2B 02 F6 | 	mov	local03, arg03
2be6c     0C 2D 02 F6 | 	mov	local04, arg04
2be70     04 2E 06 F6 | 	mov	local05, #4
2be74     13 31 02 F6 | 	mov	local06, local01
2be78     00 32 06 F6 | 	mov	local07, #0
2be7c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2be80     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2be84     1A 13 02 F6 | 	mov	arg01, local08
2be88     14 15 02 F6 | 	mov	arg02, local02
2be8c     00 16 06 F6 | 	mov	arg03, #0
2be90     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2be94     B8 BD BF FD | 	call	#__system____getvfsforfile
2be98     FD 36 0A F6 | 	mov	local09, result1 wz
2be9c     10 00 90 AD |  if_e	jmp	#LR__4000
2bea0     20 36 06 F1 | 	add	local09, #32
2bea4     1B FB 09 FB | 	rdlong	result1, local09 wz
2bea8     20 36 86 F1 | 	sub	local09, #32
2beac     14 00 90 5D |  if_ne	jmp	#LR__4001
2beb0                 | LR__4000
2beb0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2beb4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2beb8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bebc     01 FA 65 F6 | 	neg	result1, #1
2bec0     8C 02 90 FD | 	jmp	#LR__4014
2bec4                 | LR__4001
2bec4     18 13 02 F6 | 	mov	arg01, local06
2bec8     00 14 06 F6 | 	mov	arg02, #0
2becc     34 16 06 F6 | 	mov	arg03, #52
2bed0     09 39 02 F6 | 	mov	local10, arg01
2bed4     98 00 A0 FD | 	call	#\builtin_bytefill_
2bed8     20 36 06 F1 | 	add	local09, #32
2bedc     1B 3B 02 FB | 	rdlong	local11, local09
2bee0     1D 3D 02 F6 | 	mov	local12, local11
2bee4     1D 3F 02 F6 | 	mov	local13, local11
2bee8     20 36 86 F1 | 	sub	local09, #32
2beec     1F 41 02 F6 | 	mov	local14, local13
2bef0     13 3C 46 F7 | 	zerox	local12, #19
2bef4     14 40 46 F0 | 	shr	local14, #20
2bef8     02 40 66 F0 | 	shl	local14, #2
2befc     ED 40 02 F1 | 	add	local14, __methods__
2bf00     20 41 02 FB | 	rdlong	local14, local14
2bf04     18 43 02 F6 | 	mov	local15, local06
2bf08     1A 45 02 F6 | 	mov	local16, local08
2bf0c     15 47 02 F6 | 	mov	local17, local03
2bf10     21 13 02 F6 | 	mov	arg01, local15
2bf14     22 15 02 F6 | 	mov	arg02, local16
2bf18     23 17 02 F6 | 	mov	arg03, local17
2bf1c     F2 48 02 F6 | 	mov	local18, objptr
2bf20     1E E5 01 F6 | 	mov	objptr, local12
2bf24     2D 40 62 FD | 	call	local14
2bf28     24 E5 01 F6 | 	mov	objptr, local18
2bf2c     FD 4A 0A F6 | 	mov	local19, result1 wz
2bf30     04 2A CE 57 |  if_ne	test	local03, #4 wz
2bf34     58 00 90 AD |  if_e	jmp	#LR__4002
2bf38     24 36 06 F1 | 	add	local09, #36
2bf3c     1B 3B 02 FB | 	rdlong	local11, local09
2bf40     1D 3D 02 F6 | 	mov	local12, local11
2bf44     1D 3F 02 F6 | 	mov	local13, local11
2bf48     24 36 86 F1 | 	sub	local09, #36
2bf4c     1F 41 02 F6 | 	mov	local14, local13
2bf50     13 3C 46 F7 | 	zerox	local12, #19
2bf54     14 40 46 F0 | 	shr	local14, #20
2bf58     02 40 66 F0 | 	shl	local14, #2
2bf5c     ED 40 02 F1 | 	add	local14, __methods__
2bf60     20 41 02 FB | 	rdlong	local14, local14
2bf64     18 43 02 F6 | 	mov	local15, local06
2bf68     1A 45 02 F6 | 	mov	local16, local08
2bf6c     16 47 02 F6 | 	mov	local17, local04
2bf70     21 13 02 F6 | 	mov	arg01, local15
2bf74     22 15 02 F6 | 	mov	arg02, local16
2bf78     23 17 02 F6 | 	mov	arg03, local17
2bf7c     F2 48 02 F6 | 	mov	local18, objptr
2bf80     1E E5 01 F6 | 	mov	objptr, local12
2bf84     2D 40 62 FD | 	call	local14
2bf88     24 E5 01 F6 | 	mov	objptr, local18
2bf8c     FD 4A 02 F6 | 	mov	local19, result1
2bf90                 | LR__4002
2bf90     00 4A 0E F2 | 	cmp	local19, #0 wz
2bf94     8C 01 90 5D |  if_ne	jmp	#LR__4012
2bf98     15 4D 02 F6 | 	mov	local20, local03
2bf9c     03 4C 0E F5 | 	and	local20, #3 wz
2bfa0     02 2E 46 55 |  if_ne	or	local05, #2
2bfa4     01 4C 0E F2 | 	cmp	local20, #1 wz
2bfa8     01 2E 46 55 |  if_ne	or	local05, #1
2bfac     20 2A CE F7 | 	test	local03, #32 wz
2bfb0     C0 2E 46 55 |  if_ne	or	local05, #192
2bfb4     08 30 06 F1 | 	add	local06, #8
2bfb8     18 2F 62 FC | 	wrlong	local05, local06
2bfbc     0C 30 06 F1 | 	add	local06, #12
2bfc0     18 4F 0A FB | 	rdlong	local21, local06 wz
2bfc4     14 30 86 F1 | 	sub	local06, #20
2bfc8     18 00 90 5D |  if_ne	jmp	#LR__4003
2bfcc     04 36 06 F1 | 	add	local09, #4
2bfd0     1B 4F 02 FB | 	rdlong	local21, local09
2bfd4     04 36 86 F1 | 	sub	local09, #4
2bfd8     14 30 06 F1 | 	add	local06, #20
2bfdc     18 4F 62 FC | 	wrlong	local21, local06
2bfe0     14 30 86 F1 | 	sub	local06, #20
2bfe4                 | LR__4003
2bfe4     18 30 06 F1 | 	add	local06, #24
2bfe8     18 4F 0A FB | 	rdlong	local21, local06 wz
2bfec     18 30 86 F1 | 	sub	local06, #24
2bff0     18 00 90 5D |  if_ne	jmp	#LR__4004
2bff4     08 36 06 F1 | 	add	local09, #8
2bff8     1B 4F 02 FB | 	rdlong	local21, local09
2bffc     08 36 86 F1 | 	sub	local09, #8
2c000     18 30 06 F1 | 	add	local06, #24
2c004     18 4F 62 FC | 	wrlong	local21, local06
2c008     18 30 86 F1 | 	sub	local06, #24
2c00c                 | LR__4004
2c00c     24 30 06 F1 | 	add	local06, #36
2c010     18 4F 0A FB | 	rdlong	local21, local06 wz
2c014     24 30 86 F1 | 	sub	local06, #36
2c018     1B 4F 02 AB |  if_e	rdlong	local21, local09
2c01c     24 30 06 A1 |  if_e	add	local06, #36
2c020     18 4F 62 AC |  if_e	wrlong	local21, local06
2c024     24 30 86 A1 |  if_e	sub	local06, #36
2c028     28 30 06 F1 | 	add	local06, #40
2c02c     18 4F 0A FB | 	rdlong	local21, local06 wz
2c030     28 30 86 F1 | 	sub	local06, #40
2c034     18 00 90 5D |  if_ne	jmp	#LR__4005
2c038     10 36 06 F1 | 	add	local09, #16
2c03c     1B 4F 02 FB | 	rdlong	local21, local09
2c040     10 36 86 F1 | 	sub	local09, #16
2c044     28 30 06 F1 | 	add	local06, #40
2c048     18 4F 62 FC | 	wrlong	local21, local06
2c04c     28 30 86 F1 | 	sub	local06, #40
2c050                 | LR__4005
2c050     30 30 06 F1 | 	add	local06, #48
2c054     18 4F 0A FB | 	rdlong	local21, local06 wz
2c058     30 30 86 F1 | 	sub	local06, #48
2c05c     18 00 90 5D |  if_ne	jmp	#LR__4006
2c060     0C 36 06 F1 | 	add	local09, #12
2c064     1B 4F 02 FB | 	rdlong	local21, local09
2c068     0C 36 86 F1 | 	sub	local09, #12
2c06c     30 30 06 F1 | 	add	local06, #48
2c070     18 4F 62 FC | 	wrlong	local21, local06
2c074     30 30 86 F1 | 	sub	local06, #48
2c078                 | LR__4006
2c078     1C 30 06 F1 | 	add	local06, #28
2c07c     18 4F 0A FB | 	rdlong	local21, local06 wz
2c080     1C 30 86 F1 | 	sub	local06, #28
2c084     1C 00 90 5D |  if_ne	jmp	#LR__4007
2c088     01 32 06 F6 | 	mov	local07, #1
2c08c     F2 12 02 F6 | 	mov	arg01, objptr
2c090     00 90 05 FF 
2c094     00 12 46 F5 | 	or	arg01, ##186646528
2c098     1C 30 06 F1 | 	add	local06, #28
2c09c     18 13 62 FC | 	wrlong	arg01, local06
2c0a0     1C 30 86 F1 | 	sub	local06, #28
2c0a4                 | LR__4007
2c0a4     20 30 06 F1 | 	add	local06, #32
2c0a8     18 4F 0A FB | 	rdlong	local21, local06 wz
2c0ac     20 30 86 F1 | 	sub	local06, #32
2c0b0     1C 00 90 5D |  if_ne	jmp	#LR__4008
2c0b4     01 32 06 F6 | 	mov	local07, #1
2c0b8     F2 12 02 F6 | 	mov	arg01, objptr
2c0bc     00 98 05 FF 
2c0c0     00 12 46 F5 | 	or	arg01, ##187695104
2c0c4     20 30 06 F1 | 	add	local06, #32
2c0c8     18 13 62 FC | 	wrlong	arg01, local06
2c0cc     20 30 86 F1 | 	sub	local06, #32
2c0d0                 | LR__4008
2c0d0     2C 30 06 F1 | 	add	local06, #44
2c0d4     18 4F 0A FB | 	rdlong	local21, local06 wz
2c0d8     2C 30 86 F1 | 	sub	local06, #44
2c0dc     44 00 90 5D |  if_ne	jmp	#LR__4011
2c0e0     14 36 06 F1 | 	add	local09, #20
2c0e4     1B 4F 0A FB | 	rdlong	local21, local09 wz
2c0e8     14 36 86 F1 | 	sub	local09, #20
2c0ec     18 00 90 AD |  if_e	jmp	#LR__4009
2c0f0     14 36 06 F1 | 	add	local09, #20
2c0f4     1B 4F 02 FB | 	rdlong	local21, local09
2c0f8     2C 30 06 F1 | 	add	local06, #44
2c0fc     18 4F 62 FC | 	wrlong	local21, local06
2c100     2C 30 86 F1 | 	sub	local06, #44
2c104     1C 00 90 FD | 	jmp	#LR__4010
2c108                 | LR__4009
2c108     01 32 06 F6 | 	mov	local07, #1
2c10c     F2 12 02 F6 | 	mov	arg01, objptr
2c110     00 A0 05 FF 
2c114     00 12 46 F5 | 	or	arg01, ##188743680
2c118     2C 30 06 F1 | 	add	local06, #44
2c11c     18 13 62 FC | 	wrlong	arg01, local06
2c120     2C 30 86 F1 | 	sub	local06, #44
2c124                 | LR__4010
2c124                 | LR__4011
2c124                 | LR__4012
2c124     00 32 0E F2 | 	cmp	local07, #0 wz
2c128     18 13 02 56 |  if_ne	mov	arg01, local06
2c12c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2c130     00 4A 0E F2 | 	cmp	local19, #0 wz
2c134     00 12 06 A6 |  if_e	mov	arg01, #0
2c138     10 00 90 5D |  if_ne	jmp	#LR__4013
2c13c     00 12 4E F2 | 	cmps	arg01, #0 wz
2c140     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c144     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c148     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c14c                 | LR__4013
2c14c     25 FB 01 F6 | 	mov	result1, local19
2c150                 | LR__4014
2c150     A7 F0 03 F6 | 	mov	ptra, fp
2c154     B2 00 A0 FD | 	call	#popregs_
2c158                 | __system___openraw_ret
2c158     2D 00 64 FD | 	ret
2c15c                 | 
2c15c                 | __system___closeraw
2c15c     05 4A 05 F6 | 	mov	COUNT_, #5
2c160     A8 00 A0 FD | 	call	#pushregs_
2c164     09 27 02 F6 | 	mov	local01, arg01
2c168     00 28 06 F6 | 	mov	local02, #0
2c16c     08 26 06 F1 | 	add	local01, #8
2c170     13 FB 09 FB | 	rdlong	result1, local01 wz
2c174     08 26 86 F1 | 	sub	local01, #8
2c178     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c17c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2c180     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c184     01 FA 65 A6 |  if_e	neg	result1, #1
2c188     A8 00 90 AD |  if_e	jmp	#LR__4022
2c18c     2C 26 06 F1 | 	add	local01, #44
2c190     13 FB 09 FB | 	rdlong	result1, local01 wz
2c194     2C 26 86 F1 | 	sub	local01, #44
2c198     38 00 90 AD |  if_e	jmp	#LR__4020
2c19c     2C 26 06 F1 | 	add	local01, #44
2c1a0     13 2B 02 FB | 	rdlong	local03, local01
2c1a4     15 2D 02 F6 | 	mov	local04, local03
2c1a8     2C 26 86 F1 | 	sub	local01, #44
2c1ac     13 2C 46 F7 | 	zerox	local04, #19
2c1b0     14 2A 46 F0 | 	shr	local03, #20
2c1b4     02 2A 66 F0 | 	shl	local03, #2
2c1b8     ED 2A 02 F1 | 	add	local03, __methods__
2c1bc     15 2B 02 FB | 	rdlong	local03, local03
2c1c0     13 13 02 F6 | 	mov	arg01, local01
2c1c4     F2 2E 02 F6 | 	mov	local05, objptr
2c1c8     16 E5 01 F6 | 	mov	objptr, local04
2c1cc     2D 2A 62 FD | 	call	local03
2c1d0     17 E5 01 F6 | 	mov	objptr, local05
2c1d4                 | LR__4020
2c1d4     24 26 06 F1 | 	add	local01, #36
2c1d8     13 2F 0A FB | 	rdlong	local05, local01 wz
2c1dc     24 26 86 F1 | 	sub	local01, #36
2c1e0     3C 00 90 AD |  if_e	jmp	#LR__4021
2c1e4     24 26 06 F1 | 	add	local01, #36
2c1e8     13 2B 02 FB | 	rdlong	local03, local01
2c1ec     15 2D 02 F6 | 	mov	local04, local03
2c1f0     24 26 86 F1 | 	sub	local01, #36
2c1f4     13 2C 46 F7 | 	zerox	local04, #19
2c1f8     14 2A 46 F0 | 	shr	local03, #20
2c1fc     02 2A 66 F0 | 	shl	local03, #2
2c200     ED 2A 02 F1 | 	add	local03, __methods__
2c204     15 2B 02 FB | 	rdlong	local03, local03
2c208     13 13 02 F6 | 	mov	arg01, local01
2c20c     F2 2E 02 F6 | 	mov	local05, objptr
2c210     16 E5 01 F6 | 	mov	objptr, local04
2c214     2D 2A 62 FD | 	call	local03
2c218     17 E5 01 F6 | 	mov	objptr, local05
2c21c     FD 28 02 F6 | 	mov	local02, result1
2c220                 | LR__4021
2c220     13 13 02 F6 | 	mov	arg01, local01
2c224     00 14 06 F6 | 	mov	arg02, #0
2c228     34 16 06 F6 | 	mov	arg03, #52
2c22c     98 00 A0 FD | 	call	#\builtin_bytefill_
2c230     14 FB 01 F6 | 	mov	result1, local02
2c234                 | LR__4022
2c234     A7 F0 03 F6 | 	mov	ptra, fp
2c238     B2 00 A0 FD | 	call	#popregs_
2c23c                 | __system___closeraw_ret
2c23c     2D 00 64 FD | 	ret
2c240                 | 
2c240                 | __system___vfs_open_sdcardx
2c240     0B 4A 05 F6 | 	mov	COUNT_, #11
2c244     A8 00 A0 FD | 	call	#pushregs_
2c248     09 2B 02 F6 | 	mov	local03, arg01
2c24c     0A 2D 02 F6 | 	mov	local04, arg02
2c250     0B 2F 02 F6 | 	mov	local05, arg03
2c254     0C 31 02 F6 | 	mov	local06, arg04
2c258     01 00 00 FF 
2c25c     24 12 06 F6 | 	mov	arg01, ##548
2c260     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2c264     FD 32 02 F6 | 	mov	local07, result1
2c268     01 00 00 FF 
2c26c     34 12 06 F6 | 	mov	arg01, ##564
2c270     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2c274     FD 34 02 F6 | 	mov	local08, result1
2c278     15 19 02 F6 | 	mov	arg04, local03
2c27c     1F 18 C6 F0 | 	sar	arg04, #31
2c280     15 17 02 F6 | 	mov	arg03, local03
2c284     01 12 06 F6 | 	mov	arg01, #1
2c288     00 14 06 F6 | 	mov	arg02, #0
2c28c     EC DB BF FD | 	call	#__system___int64_shl
2c290     FD 26 02 F6 | 	mov	local01, result1
2c294     FE 36 02 F6 | 	mov	local09, result2
2c298     16 19 02 F6 | 	mov	arg04, local04
2c29c     1F 18 C6 F0 | 	sar	arg04, #31
2c2a0     16 17 02 F6 | 	mov	arg03, local04
2c2a4     01 12 06 F6 | 	mov	arg01, #1
2c2a8     00 14 06 F6 | 	mov	arg02, #0
2c2ac     CC DB BF FD | 	call	#__system___int64_shl
2c2b0     FD 26 42 F5 | 	or	local01, result1
2c2b4     FE 36 42 F5 | 	or	local09, result2
2c2b8     17 19 02 F6 | 	mov	arg04, local05
2c2bc     1F 18 C6 F0 | 	sar	arg04, #31
2c2c0     17 17 02 F6 | 	mov	arg03, local05
2c2c4     01 12 06 F6 | 	mov	arg01, #1
2c2c8     00 14 06 F6 | 	mov	arg02, #0
2c2cc     AC DB BF FD | 	call	#__system___int64_shl
2c2d0     FD 26 42 F5 | 	or	local01, result1
2c2d4     FE 36 42 F5 | 	or	local09, result2
2c2d8     18 19 02 F6 | 	mov	arg04, local06
2c2dc     1F 18 C6 F0 | 	sar	arg04, #31
2c2e0     18 17 02 F6 | 	mov	arg03, local06
2c2e4     01 12 06 F6 | 	mov	arg01, #1
2c2e8     00 14 06 F6 | 	mov	arg02, #0
2c2ec     8C DB BF FD | 	call	#__system___int64_shl
2c2f0     1B 15 02 F6 | 	mov	arg02, local09
2c2f4     FD 26 42 F5 | 	or	local01, result1
2c2f8     0A FD 41 F5 | 	or	result2, arg02
2c2fc     FE 28 02 F6 | 	mov	local02, result2
2c300     13 13 02 F6 | 	mov	arg01, local01
2c304     14 15 02 F6 | 	mov	arg02, local02
2c308     A8 DB BF FD | 	call	#__system___usepins
2c30c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c310     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c314     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2c318     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c31c     00 FA 05 A6 |  if_e	mov	result1, #0
2c320     B4 00 90 AD |  if_e	jmp	#LR__4032
2c324     13 39 02 F6 | 	mov	local10, local01
2c328     14 37 02 F6 | 	mov	local09, local02
2c32c     01 00 00 FF 
2c330     08 32 06 F1 | 	add	local07, ##520
2c334     19 39 62 FC | 	wrlong	local10, local07
2c338     04 32 06 F1 | 	add	local07, #4
2c33c     19 37 62 FC | 	wrlong	local09, local07
2c340     01 00 00 FF 
2c344     0C 32 86 F1 | 	sub	local07, ##524
2c348     18 1B 02 F6 | 	mov	arg05, local06
2c34c     00 12 06 F6 | 	mov	arg01, #0
2c350     15 15 02 F6 | 	mov	arg02, local03
2c354     16 17 02 F6 | 	mov	arg03, local04
2c358     17 19 02 F6 | 	mov	arg04, local05
2c35c     F2 38 02 F6 | 	mov	local10, objptr
2c360     19 E5 01 F6 | 	mov	objptr, local07
2c364     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2c368     1C E5 01 F6 | 	mov	objptr, local10
2c36c     FD 3A 0A F6 | 	mov	local11, result1 wz
2c370     24 00 90 5D |  if_ne	jmp	#LR__4030
2c374     B8 01 00 FF 
2c378     2E 14 06 F6 | 	mov	arg02, ##@LR__5447
2c37c     1A 13 02 F6 | 	mov	arg01, local08
2c380     00 16 06 F6 | 	mov	arg03, #0
2c384     F2 3A 02 F6 | 	mov	local11, objptr
2c388     19 E5 01 F6 | 	mov	objptr, local07
2c38c     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2c390     1D E5 01 F6 | 	mov	objptr, local11
2c394     FD 3A 02 F6 | 	mov	local11, result1
2c398                 | LR__4030
2c398     00 3A 0E F2 | 	cmp	local11, #0 wz
2c39c     24 00 90 AD |  if_e	jmp	#LR__4031
2c3a0     13 13 02 F6 | 	mov	arg01, local01
2c3a4     14 15 02 F6 | 	mov	arg02, local02
2c3a8     5C DB BF FD | 	call	#__system___freepins
2c3ac     1D 13 6A F6 | 	neg	arg01, local11 wz
2c3b0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c3b4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c3b8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c3bc     00 FA 05 F6 | 	mov	result1, #0
2c3c0     14 00 90 FD | 	jmp	#LR__4032
2c3c4                 | LR__4031
2c3c4     19 13 02 F6 | 	mov	arg01, local07
2c3c8     F2 3A 02 F6 | 	mov	local11, objptr
2c3cc     19 E5 01 F6 | 	mov	objptr, local07
2c3d0     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2c3d4     1D E5 01 F6 | 	mov	objptr, local11
2c3d8                 | LR__4032
2c3d8     A7 F0 03 F6 | 	mov	ptra, fp
2c3dc     B2 00 A0 FD | 	call	#popregs_
2c3e0                 | __system___vfs_open_sdcardx_ret
2c3e0     2D 00 64 FD | 	ret
2c3e4                 | 
2c3e4                 | __system____default_getc
2c3e4     03 4A 05 F6 | 	mov	COUNT_, #3
2c3e8     A8 00 A0 FD | 	call	#pushregs_
2c3ec     09 27 02 F6 | 	mov	local01, arg01
2c3f0     13 29 02 FB | 	rdlong	local02, local01
2c3f4     08 28 06 F1 | 	add	local02, #8
2c3f8     14 2B 02 FB | 	rdlong	local03, local02
2c3fc     02 2A CE F7 | 	test	local03, #2 wz
2c400     13 13 02 56 |  if_ne	mov	arg01, local01
2c404     00 01 B0 5D |  if_ne	call	#__system____default_flush
2c408     14 2B 02 FB | 	rdlong	local03, local02
2c40c     01 2A 46 F5 | 	or	local03, #1
2c410     14 2B 62 FC | 	wrlong	local03, local02
2c414     08 28 86 F1 | 	sub	local02, #8
2c418     14 2B 0A FB | 	rdlong	local03, local02 wz
2c41c     0C 00 90 5D |  if_ne	jmp	#LR__4040
2c420     13 13 02 F6 | 	mov	arg01, local01
2c424     68 18 B0 FD | 	call	#__system____default_filbuf
2c428     FD 2A 02 F6 | 	mov	local03, result1
2c42c                 | LR__4040
2c42c     01 2A 56 F2 | 	cmps	local03, #1 wc
2c430     01 FA 65 C6 |  if_b	neg	result1, #1
2c434     1C 00 90 CD |  if_b	jmp	#LR__4041
2c438     01 2A 86 F1 | 	sub	local03, #1
2c43c     14 2B 62 FC | 	wrlong	local03, local02
2c440     04 28 06 F1 | 	add	local02, #4
2c444     14 2B 02 FB | 	rdlong	local03, local02
2c448     15 FB C1 FA | 	rdbyte	result1, local03
2c44c     01 2A 06 F1 | 	add	local03, #1
2c450     14 2B 62 FC | 	wrlong	local03, local02
2c454                 | LR__4041
2c454     A7 F0 03 F6 | 	mov	ptra, fp
2c458     B2 00 A0 FD | 	call	#popregs_
2c45c                 | __system____default_getc_ret
2c45c     2D 00 64 FD | 	ret
2c460                 | 
2c460                 | __system____default_putc
2c460     06 4A 05 F6 | 	mov	COUNT_, #6
2c464     A8 00 A0 FD | 	call	#pushregs_
2c468     09 27 02 F6 | 	mov	local01, arg01
2c46c     0A 29 02 F6 | 	mov	local02, arg02
2c470     14 2B 02 FB | 	rdlong	local03, local02
2c474     08 2A 06 F1 | 	add	local03, #8
2c478     15 FB 01 FB | 	rdlong	result1, local03
2c47c     01 FA CD F7 | 	test	result1, #1 wz
2c480     14 13 02 56 |  if_ne	mov	arg01, local02
2c484     80 00 B0 5D |  if_ne	call	#__system____default_flush
2c488     15 2D 02 FB | 	rdlong	local04, local03
2c48c     02 2C 46 F5 | 	or	local04, #2
2c490     15 2D 62 FC | 	wrlong	local04, local03
2c494     08 2A 86 F1 | 	sub	local03, #8
2c498     15 2F 02 FB | 	rdlong	local05, local03
2c49c     10 2A 06 F1 | 	add	local03, #16
2c4a0     15 15 02 FB | 	rdlong	arg02, local03
2c4a4     10 2A 86 F1 | 	sub	local03, #16
2c4a8     17 FB 01 F6 | 	mov	result1, local05
2c4ac     0A FB 01 F1 | 	add	result1, arg02
2c4b0     FD 26 42 FC | 	wrbyte	local01, result1
2c4b4     13 27 E2 F8 | 	getbyte	local01, local01, #0
2c4b8     01 2E 06 F1 | 	add	local05, #1
2c4bc     15 2F 62 FC | 	wrlong	local05, local03
2c4c0     06 28 06 F1 | 	add	local02, #6
2c4c4     14 31 EA FA | 	rdword	local06, local02 wz
2c4c8     06 28 86 F1 | 	sub	local02, #6
2c4cc     0C 2A 06 51 |  if_ne	add	local03, #12
2c4d0     15 2D 02 5B |  if_ne	rdlong	local04, local03
2c4d4     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2c4d8     0C 00 90 AD |  if_e	jmp	#LR__4050
2c4dc     0A 26 0E F2 | 	cmp	local01, #10 wz
2c4e0     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2c4e4     10 00 90 5D |  if_ne	jmp	#LR__4051
2c4e8                 | LR__4050
2c4e8     14 13 02 F6 | 	mov	arg01, local02
2c4ec     18 00 B0 FD | 	call	#__system____default_flush
2c4f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4f4     01 26 66 56 |  if_ne	neg	local01, #1
2c4f8                 | LR__4051
2c4f8     13 FB 01 F6 | 	mov	result1, local01
2c4fc     A7 F0 03 F6 | 	mov	ptra, fp
2c500     B2 00 A0 FD | 	call	#popregs_
2c504                 | __system____default_putc_ret
2c504     2D 00 64 FD | 	ret
2c508                 | 
2c508                 | __system____default_flush
2c508     06 4A 05 F6 | 	mov	COUNT_, #6
2c50c     A8 00 A0 FD | 	call	#pushregs_
2c510     09 27 02 F6 | 	mov	local01, arg01
2c514     13 29 02 FB | 	rdlong	local02, local01
2c518     14 2B 02 FB | 	rdlong	local03, local02
2c51c     08 28 06 F1 | 	add	local02, #8
2c520     14 FB 01 FB | 	rdlong	result1, local02
2c524     08 28 86 F1 | 	sub	local02, #8
2c528     02 FA CD F7 | 	test	result1, #2 wz
2c52c     D0 00 90 AD |  if_e	jmp	#LR__4062
2c530     01 2A 56 F2 | 	cmps	local03, #1 wc
2c534     20 01 90 CD |  if_b	jmp	#LR__4064
2c538     08 26 06 F1 | 	add	local01, #8
2c53c     13 FB 01 FB | 	rdlong	result1, local01
2c540     08 26 86 F1 | 	sub	local01, #8
2c544     40 FA CD F7 | 	test	result1, #64 wz
2c548     68 00 90 AD |  if_e	jmp	#LR__4061
2c54c     08 26 06 F1 | 	add	local01, #8
2c550     13 17 02 FB | 	rdlong	arg03, local01
2c554     08 26 86 F1 | 	sub	local01, #8
2c558     80 16 CE F7 | 	test	arg03, #128 wz
2c55c     54 00 90 AD |  if_e	jmp	#LR__4060
2c560     30 26 06 F1 | 	add	local01, #48
2c564     13 2D 02 FB | 	rdlong	local04, local01
2c568     16 2F 02 F6 | 	mov	local05, local04
2c56c     30 26 86 F1 | 	sub	local01, #48
2c570     13 2E 46 F7 | 	zerox	local05, #19
2c574     14 2C 46 F0 | 	shr	local04, #20
2c578     02 2C 66 F0 | 	shl	local04, #2
2c57c     ED 2C 02 F1 | 	add	local04, __methods__
2c580     16 2D 02 FB | 	rdlong	local04, local04
2c584     13 13 02 F6 | 	mov	arg01, local01
2c588     00 14 06 F6 | 	mov	arg02, #0
2c58c     02 16 06 F6 | 	mov	arg03, #2
2c590     F2 30 02 F6 | 	mov	local06, objptr
2c594     17 E5 01 F6 | 	mov	objptr, local05
2c598     2D 2C 62 FD | 	call	local04
2c59c     18 E5 01 F6 | 	mov	objptr, local06
2c5a0     08 26 06 F1 | 	add	local01, #8
2c5a4     13 31 02 FB | 	rdlong	local06, local01
2c5a8     80 30 26 F5 | 	andn	local06, #128
2c5ac     13 31 62 FC | 	wrlong	local06, local01
2c5b0     08 26 86 F1 | 	sub	local01, #8
2c5b4                 | LR__4060
2c5b4                 | LR__4061
2c5b4     18 26 06 F1 | 	add	local01, #24
2c5b8     13 2D 02 FB | 	rdlong	local04, local01
2c5bc     16 2F 02 F6 | 	mov	local05, local04
2c5c0     18 26 86 F1 | 	sub	local01, #24
2c5c4     13 2E 46 F7 | 	zerox	local05, #19
2c5c8     14 2C 46 F0 | 	shr	local04, #20
2c5cc     02 2C 66 F0 | 	shl	local04, #2
2c5d0     ED 2C 02 F1 | 	add	local04, __methods__
2c5d4     16 2D 02 FB | 	rdlong	local04, local04
2c5d8     10 28 06 F1 | 	add	local02, #16
2c5dc     14 15 02 FB | 	rdlong	arg02, local02
2c5e0     10 28 86 F1 | 	sub	local02, #16
2c5e4     13 13 02 F6 | 	mov	arg01, local01
2c5e8     15 17 02 F6 | 	mov	arg03, local03
2c5ec     F2 30 02 F6 | 	mov	local06, objptr
2c5f0     17 E5 01 F6 | 	mov	objptr, local05
2c5f4     2D 2C 62 FD | 	call	local04
2c5f8     18 E5 01 F6 | 	mov	objptr, local06
2c5fc     58 00 90 FD | 	jmp	#LR__4064
2c600                 | LR__4062
2c600     08 28 06 F1 | 	add	local02, #8
2c604     14 31 02 FB | 	rdlong	local06, local02
2c608     08 28 86 F1 | 	sub	local02, #8
2c60c     01 30 CE F7 | 	test	local06, #1 wz
2c610     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2c614     40 00 90 AD |  if_e	jmp	#LR__4063
2c618     30 26 06 F1 | 	add	local01, #48
2c61c     13 2D 02 FB | 	rdlong	local04, local01
2c620     16 2F 02 F6 | 	mov	local05, local04
2c624     30 26 86 F1 | 	sub	local01, #48
2c628     13 2E 46 F7 | 	zerox	local05, #19
2c62c     14 2C 46 F0 | 	shr	local04, #20
2c630     02 2C 66 F0 | 	shl	local04, #2
2c634     ED 2C 02 F1 | 	add	local04, __methods__
2c638     16 2D 02 FB | 	rdlong	local04, local04
2c63c     13 13 02 F6 | 	mov	arg01, local01
2c640     15 15 62 F6 | 	neg	arg02, local03
2c644     01 16 06 F6 | 	mov	arg03, #1
2c648     F2 30 02 F6 | 	mov	local06, objptr
2c64c     17 E5 01 F6 | 	mov	objptr, local05
2c650     2D 2C 62 FD | 	call	local04
2c654     18 E5 01 F6 | 	mov	objptr, local06
2c658                 | LR__4063
2c658                 | LR__4064
2c658     14 01 68 FC | 	wrlong	#0, local02
2c65c     04 28 06 F1 | 	add	local02, #4
2c660     14 01 68 FC | 	wrlong	#0, local02
2c664     04 28 06 F1 | 	add	local02, #4
2c668     14 01 68 FC | 	wrlong	#0, local02
2c66c     00 FA 05 F6 | 	mov	result1, #0
2c670     A7 F0 03 F6 | 	mov	ptra, fp
2c674     B2 00 A0 FD | 	call	#popregs_
2c678                 | __system____default_flush_ret
2c678     2D 00 64 FD | 	ret
2c67c                 | 
2c67c                 | __system____default_buffer_init
2c67c     02 4A 05 F6 | 	mov	COUNT_, #2
2c680     A8 00 A0 FD | 	call	#pushregs_
2c684     09 27 02 F6 | 	mov	local01, arg01
2c688     13 29 02 FB | 	rdlong	local02, local01
2c68c     13 13 02 F6 | 	mov	arg01, local01
2c690     34 03 B0 FD | 	call	#__system___isatty
2c694     00 FA 0D F2 | 	cmp	result1, #0 wz
2c698     06 26 06 51 |  if_ne	add	local01, #6
2c69c     13 0B 58 5C |  if_ne	wrword	#5, local01
2c6a0     06 26 06 A1 |  if_e	add	local01, #6
2c6a4     13 0D 58 AC |  if_e	wrword	#6, local01
2c6a8     14 28 06 F1 | 	add	local02, #20
2c6ac     14 27 02 F6 | 	mov	local01, local02
2c6b0     04 28 86 F1 | 	sub	local02, #4
2c6b4     14 27 62 FC | 	wrlong	local01, local02
2c6b8     04 28 86 F1 | 	sub	local02, #4
2c6bc     02 00 80 FF 
2c6c0     14 01 68 FC | 	wrlong	##1024, local02
2c6c4     00 FA 05 F6 | 	mov	result1, #0
2c6c8     A7 F0 03 F6 | 	mov	ptra, fp
2c6cc     B2 00 A0 FD | 	call	#popregs_
2c6d0                 | __system____default_buffer_init_ret
2c6d0     2D 00 64 FD | 	ret
2c6d4                 | 
2c6d4                 | __system__stat
2c6d4     04 4A 05 F6 | 	mov	COUNT_, #4
2c6d8     A8 00 A0 FD | 	call	#pushregs_
2c6dc     0A 27 02 F6 | 	mov	local01, arg02
2c6e0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2c6e4     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2c6e8     09 15 02 F6 | 	mov	arg02, arg01
2c6ec     14 13 02 F6 | 	mov	arg01, local02
2c6f0     00 16 06 F6 | 	mov	arg03, #0
2c6f4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2c6f8     54 B5 BF FD | 	call	#__system____getvfsforfile
2c6fc     FD 2A 0A F6 | 	mov	local03, result1 wz
2c700     10 00 90 AD |  if_e	jmp	#LR__4070
2c704     34 2A 06 F1 | 	add	local03, #52
2c708     15 17 0A FB | 	rdlong	arg03, local03 wz
2c70c     34 2A 86 F1 | 	sub	local03, #52
2c710     14 00 90 5D |  if_ne	jmp	#LR__4071
2c714                 | LR__4070
2c714     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c718     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2c71c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c720     01 FA 65 F6 | 	neg	result1, #1
2c724     68 00 90 FD | 	jmp	#LR__4072
2c728                 | LR__4071
2c728     13 13 02 F6 | 	mov	arg01, local01
2c72c     00 14 06 F6 | 	mov	arg02, #0
2c730     30 16 06 F6 | 	mov	arg03, #48
2c734     09 2D 02 F6 | 	mov	local04, arg01
2c738     98 00 A0 FD | 	call	#\builtin_bytefill_
2c73c     16 FB 01 F6 | 	mov	result1, local04
2c740     14 13 CA FA | 	rdbyte	arg01, local02 wz
2c744     08 26 06 A1 |  if_e	add	local01, #8
2c748     08 00 80 AF 
2c74c     13 FF 6B AC |  if_e	wrlong	##4607, local01
2c750     00 FA 05 A6 |  if_e	mov	result1, #0
2c754     38 00 90 AD |  if_e	jmp	#LR__4072
2c758     34 2A 06 F1 | 	add	local03, #52
2c75c     15 2B 02 FB | 	rdlong	local03, local03
2c760     15 2D 02 F6 | 	mov	local04, local03
2c764     13 2A 46 F7 | 	zerox	local03, #19
2c768     14 2C 46 F0 | 	shr	local04, #20
2c76c     02 2C 66 F0 | 	shl	local04, #2
2c770     ED 2C 02 F1 | 	add	local04, __methods__
2c774     16 2D 02 FB | 	rdlong	local04, local04
2c778     14 13 02 F6 | 	mov	arg01, local02
2c77c     13 15 02 F6 | 	mov	arg02, local01
2c780     F2 28 02 F6 | 	mov	local02, objptr
2c784     15 E5 01 F6 | 	mov	objptr, local03
2c788     2D 2C 62 FD | 	call	local04
2c78c     14 E5 01 F6 | 	mov	objptr, local02
2c790                 | LR__4072
2c790     A7 F0 03 F6 | 	mov	ptra, fp
2c794     B2 00 A0 FD | 	call	#popregs_
2c798                 | __system__stat_ret
2c798     2D 00 64 FD | 	ret
2c79c                 | 
2c79c                 | __system__write
2c79c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c7a0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c7a4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c7a8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c7ac     01 FA 65 36 |  if_ae	neg	result1, #1
2c7b0     20 00 90 3D |  if_ae	jmp	#LR__4080
2c7b4     34 12 06 FD | 	qmul	arg01, #52
2c7b8     02 00 00 FF 
2c7bc     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c7c0     18 12 62 FD | 	getqx	arg01
2c7c4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c7c8     02 00 00 FF 
2c7cc     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c7d0     0C 10 B0 FD | 	call	#__system___vfswrite
2c7d4                 | LR__4080
2c7d4                 | __system__write_ret
2c7d4     2D 00 64 FD | 	ret
2c7d8                 | 
2c7d8                 | __system__read
2c7d8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c7dc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c7e0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c7e4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c7e8     01 FA 65 36 |  if_ae	neg	result1, #1
2c7ec     20 00 90 3D |  if_ae	jmp	#LR__4090
2c7f0     34 12 06 FD | 	qmul	arg01, #52
2c7f4     02 00 00 FF 
2c7f8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c7fc     18 12 62 FD | 	getqx	arg01
2c800     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c804     02 00 00 FF 
2c808     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c80c     98 11 B0 FD | 	call	#__system___vfsread
2c810                 | LR__4090
2c810                 | __system__read_ret
2c810     2D 00 64 FD | 	ret
2c814                 | 
2c814                 | __system__close
2c814     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c818     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c81c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c820     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c824     01 FA 65 36 |  if_ae	neg	result1, #1
2c828     20 00 90 3D |  if_ae	jmp	#LR__4100
2c82c     34 12 06 FD | 	qmul	arg01, #52
2c830     02 00 00 FF 
2c834     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c838     18 12 62 FD | 	getqx	arg01
2c83c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c840     02 00 00 FF 
2c844     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c848     10 F9 BF FD | 	call	#__system___closeraw
2c84c                 | LR__4100
2c84c                 | __system__close_ret
2c84c     2D 00 64 FD | 	ret
2c850                 | 
2c850                 | __system__lseek
2c850     06 4A 05 F6 | 	mov	COUNT_, #6
2c854     A8 00 A0 FD | 	call	#pushregs_
2c858     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c85c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c860     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c864     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c868     01 FA 65 36 |  if_ae	neg	result1, #1
2c86c     C4 00 90 3D |  if_ae	jmp	#LR__4111
2c870     34 12 06 FD | 	qmul	arg01, #52
2c874     02 00 00 FF 
2c878     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c87c     18 26 62 FD | 	getqx	local01
2c880     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2c884     30 26 06 F1 | 	add	local01, #48
2c888     13 13 0A FB | 	rdlong	arg01, local01 wz
2c88c     30 26 86 F1 | 	sub	local01, #48
2c890     02 00 00 FF 
2c894     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c898     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c89c     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2c8a0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c8a4     01 FA 65 A6 |  if_e	neg	result1, #1
2c8a8     88 00 90 AD |  if_e	jmp	#LR__4111
2c8ac     08 26 06 F1 | 	add	local01, #8
2c8b0     13 29 02 FB | 	rdlong	local02, local01
2c8b4     08 26 86 F1 | 	sub	local01, #8
2c8b8     40 28 CE F7 | 	test	local02, #64 wz
2c8bc     08 26 06 51 |  if_ne	add	local01, #8
2c8c0     13 29 02 5B |  if_ne	rdlong	local02, local01
2c8c4     80 28 46 55 |  if_ne	or	local02, #128
2c8c8     13 29 62 5C |  if_ne	wrlong	local02, local01
2c8cc     08 26 86 51 |  if_ne	sub	local01, #8
2c8d0     30 26 06 F1 | 	add	local01, #48
2c8d4     13 2B 02 FB | 	rdlong	local03, local01
2c8d8     15 2D 02 F6 | 	mov	local04, local03
2c8dc     30 26 86 F1 | 	sub	local01, #48
2c8e0     13 2C 46 F7 | 	zerox	local04, #19
2c8e4     14 2A 46 F0 | 	shr	local03, #20
2c8e8     02 2A 66 F0 | 	shl	local03, #2
2c8ec     ED 2A 02 F1 | 	add	local03, __methods__
2c8f0     15 2B 02 FB | 	rdlong	local03, local03
2c8f4     13 13 02 F6 | 	mov	arg01, local01
2c8f8     F2 2E 02 F6 | 	mov	local05, objptr
2c8fc     16 E5 01 F6 | 	mov	objptr, local04
2c900     2D 2A 62 FD | 	call	local03
2c904     17 E5 01 F6 | 	mov	objptr, local05
2c908     FD 30 02 F6 | 	mov	local06, result1
2c90c     00 30 56 F2 | 	cmps	local06, #0 wc
2c910     1C 00 90 3D |  if_ae	jmp	#LR__4110
2c914     18 13 6A F6 | 	neg	arg01, local06 wz
2c918     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c91c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c920     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c924     01 FA 65 56 |  if_ne	neg	result1, #1
2c928     00 FA 05 A6 |  if_e	mov	result1, #0
2c92c     04 00 90 FD | 	jmp	#LR__4111
2c930                 | LR__4110
2c930     18 FB 01 F6 | 	mov	result1, local06
2c934                 | LR__4111
2c934     A7 F0 03 F6 | 	mov	ptra, fp
2c938     B2 00 A0 FD | 	call	#popregs_
2c93c                 | __system__lseek_ret
2c93c     2D 00 64 FD | 	ret
2c940                 | 
2c940                 | __system___ioctl
2c940     03 4A 05 F6 | 	mov	COUNT_, #3
2c944     A8 00 A0 FD | 	call	#pushregs_
2c948     00 12 4E F2 | 	cmps	arg01, #0 wz
2c94c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c950     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2c954     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c958     01 FA 65 A6 |  if_e	neg	result1, #1
2c95c     5C 00 90 AD |  if_e	jmp	#LR__4121
2c960     28 12 06 F1 | 	add	arg01, #40
2c964     09 27 02 FB | 	rdlong	local01, arg01
2c968     13 29 02 F6 | 	mov	local02, local01
2c96c     28 12 86 F1 | 	sub	arg01, #40
2c970     13 28 46 F7 | 	zerox	local02, #19
2c974     14 26 46 F0 | 	shr	local01, #20
2c978     02 26 66 F0 | 	shl	local01, #2
2c97c     ED 26 02 F1 | 	add	local01, __methods__
2c980     13 27 02 FB | 	rdlong	local01, local01
2c984     F2 2A 02 F6 | 	mov	local03, objptr
2c988     14 E5 01 F6 | 	mov	objptr, local02
2c98c     2D 26 62 FD | 	call	local01
2c990     15 E5 01 F6 | 	mov	objptr, local03
2c994     FD 12 0A F6 | 	mov	arg01, result1 wz
2c998     1C 00 90 AD |  if_e	jmp	#LR__4120
2c99c     00 12 4E F2 | 	cmps	arg01, #0 wz
2c9a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c9a4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c9a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c9ac     01 FA 65 56 |  if_ne	neg	result1, #1
2c9b0     00 FA 05 A6 |  if_e	mov	result1, #0
2c9b4     04 00 90 FD | 	jmp	#LR__4121
2c9b8                 | LR__4120
2c9b8     00 FA 05 F6 | 	mov	result1, #0
2c9bc                 | LR__4121
2c9bc     A7 F0 03 F6 | 	mov	ptra, fp
2c9c0     B2 00 A0 FD | 	call	#popregs_
2c9c4                 | __system___ioctl_ret
2c9c4     2D 00 64 FD | 	ret
2c9c8                 | 
2c9c8                 | __system___isatty
2c9c8     00 4A 05 F6 | 	mov	COUNT_, #0
2c9cc     A8 00 A0 FD | 	call	#pushregs_
2c9d0     0C F0 07 F1 | 	add	ptra, #12
2c9d4     04 4E 05 F1 | 	add	fp, #4
2c9d8     A7 12 62 FC | 	wrlong	arg01, fp
2c9dc     04 4E 05 F1 | 	add	fp, #4
2c9e0     A7 16 02 F6 | 	mov	arg03, fp
2c9e4     08 4E 85 F1 | 	sub	fp, #8
2c9e8     00 15 06 F6 | 	mov	arg02, #256
2c9ec     50 FF BF FD | 	call	#__system___ioctl
2c9f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c9f4     01 FA 05 A6 |  if_e	mov	result1, #1
2c9f8     00 FA 05 56 |  if_ne	mov	result1, #0
2c9fc     A7 F0 03 F6 | 	mov	ptra, fp
2ca00     B2 00 A0 FD | 	call	#popregs_
2ca04                 | __system___isatty_ret
2ca04     2D 00 64 FD | 	ret
2ca08                 | 
2ca08                 | __system____getftab
2ca08     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ca0c     34 12 06 CD |  if_b	qmul	arg01, #52
2ca10     00 FA 05 36 |  if_ae	mov	result1, #0
2ca14     02 00 00 CF 
2ca18     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2ca1c     18 FA 61 CD |  if_b	getqx	result1
2ca20     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2ca24     02 00 00 CF 
2ca28     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2ca2c                 | __system____getftab_ret
2ca2c     2D 00 64 FD | 	ret
2ca30                 | 
2ca30                 | __system__strncpy
2ca30     09 01 02 F6 | 	mov	_var01, arg01
2ca34                 | LR__4130
2ca34     01 16 86 F1 | 	sub	arg03, #1
2ca38     00 16 56 F2 | 	cmps	arg03, #0 wc
2ca3c     18 00 90 CD |  if_b	jmp	#LR__4131
2ca40     0A FB C1 FA | 	rdbyte	result1, arg02
2ca44     00 FB 41 FC | 	wrbyte	result1, _var01
2ca48     01 14 06 F1 | 	add	arg02, #1
2ca4c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2ca50     01 00 06 F1 | 	add	_var01, #1
2ca54     DC FF 9F 5D |  if_ne	jmp	#LR__4130
2ca58                 | LR__4131
2ca58     97 0C 48 FB | 	callpa	#(@LR__4133-@LR__4132)>>2,fcache_load_ptr_
2ca5c                 | LR__4132
2ca5c     01 16 86 F1 | 	sub	arg03, #1
2ca60     00 16 56 F2 | 	cmps	arg03, #0 wc
2ca64     00 03 02 36 |  if_ae	mov	_var02, _var01
2ca68     01 00 06 31 |  if_ae	add	_var01, #1
2ca6c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2ca70     E8 FF 9F 3D |  if_ae	jmp	#LR__4132
2ca74                 | LR__4133
2ca74     09 FB 01 F6 | 	mov	result1, arg01
2ca78                 | __system__strncpy_ret
2ca78     2D 00 64 FD | 	ret
2ca7c                 | 
2ca7c                 | __system__strncat
2ca7c     00 14 4E F2 | 	cmps	arg02, #0 wz
2ca80     50 00 90 AD |  if_e	jmp	#LR__4144
2ca84     01 16 16 F2 | 	cmp	arg03, #1 wc
2ca88     48 00 90 CD |  if_b	jmp	#LR__4144
2ca8c     09 01 02 F6 | 	mov	_var01, arg01
2ca90     97 1E 48 FB | 	callpa	#(@LR__4142-@LR__4140)>>2,fcache_load_ptr_
2ca94                 | LR__4140
2ca94     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2ca98     01 00 06 51 |  if_ne	add	_var01, #1
2ca9c     F4 FF 9F 5D |  if_ne	jmp	#LR__4140
2caa0     0B 03 02 F6 | 	mov	_var02, arg03
2caa4                 | LR__4141
2caa4     0A 05 C2 FA | 	rdbyte	_var03, arg02
2caa8     02 07 02 F6 | 	mov	_var04, _var03
2caac     07 06 4E F7 | 	zerox	_var04, #7 wz
2cab0     01 14 06 F1 | 	add	arg02, #1
2cab4     18 00 90 AD |  if_e	jmp	#LR__4143
2cab8     01 02 86 F1 | 	sub	_var02, #1
2cabc     00 02 56 F2 | 	cmps	_var02, #0 wc
2cac0     00 07 02 36 |  if_ae	mov	_var04, _var01
2cac4     01 00 06 31 |  if_ae	add	_var01, #1
2cac8     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2cacc     D4 FF 9F 3D |  if_ae	jmp	#LR__4141
2cad0                 | LR__4142
2cad0                 | LR__4143
2cad0     00 01 48 FC | 	wrbyte	#0, _var01
2cad4                 | LR__4144
2cad4     09 FB 01 F6 | 	mov	result1, arg01
2cad8                 | __system__strncat_ret
2cad8     2D 00 64 FD | 	ret
2cadc                 | 
2cadc                 | __system__strncmp
2cadc     09 01 0A F6 | 	mov	_var01, arg01 wz
2cae0     14 00 90 5D |  if_ne	jmp	#LR__4150
2cae4     00 14 0E F2 | 	cmp	arg02, #0 wz
2cae8     01 02 66 56 |  if_ne	neg	_var02, #1
2caec     00 02 06 A6 |  if_e	mov	_var02, #0
2caf0     01 FB 01 F6 | 	mov	result1, _var02
2caf4     74 00 90 FD | 	jmp	#__system__strncmp_ret
2caf8                 | LR__4150
2caf8     00 14 0E F2 | 	cmp	arg02, #0 wz
2cafc     01 FA 05 A6 |  if_e	mov	result1, #1
2cb00     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2cb04     0B 05 02 F6 | 	mov	_var03, arg03
2cb08     97 16 48 FB | 	callpa	#(@LR__4152-@LR__4151)>>2,fcache_load_ptr_
2cb0c                 | LR__4151
2cb0c     00 07 C2 FA | 	rdbyte	_var04, _var01
2cb10     0A 09 02 F6 | 	mov	_var05, arg02
2cb14     04 0B C2 FA | 	rdbyte	_var06, _var05
2cb18     01 04 86 F1 | 	sub	_var03, #1
2cb1c     00 04 56 F2 | 	cmps	_var03, #0 wc
2cb20     01 00 06 F1 | 	add	_var01, #1
2cb24     01 14 06 F1 | 	add	arg02, #1
2cb28     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2cb2c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4153
2cb30     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2cb34     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4151
2cb38                 | LR__4152
2cb38                 | LR__4153
2cb38     00 04 56 F2 | 	cmps	_var03, #0 wc
2cb3c     00 FA 05 C6 |  if_b	mov	result1, #0
2cb40     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2cb44     05 07 0A F2 | 	cmp	_var04, _var06 wz
2cb48     00 FA 05 A6 |  if_e	mov	result1, #0
2cb4c     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2cb50     00 06 0E F2 | 	cmp	_var04, #0 wz
2cb54     01 FA 65 A6 |  if_e	neg	result1, #1
2cb58     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2cb5c     00 0A 0E F2 | 	cmp	_var06, #0 wz
2cb60     01 FA 05 A6 |  if_e	mov	result1, #1
2cb64     03 FB 01 56 |  if_ne	mov	result1, _var04
2cb68     05 FB 81 51 |  if_ne	sub	result1, _var06
2cb6c                 | __system__strncmp_ret
2cb6c     2D 00 64 FD | 	ret
2cb70                 | 
2cb70                 | __system____root_opendir
2cb70     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2cb74     04 12 06 F1 | 	add	arg01, #4
2cb78     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2cb7c     00 FA 05 F6 | 	mov	result1, #0
2cb80     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2cb84                 | __system____root_opendir_ret
2cb84     2D 00 64 FD | 	ret
2cb88                 | 
2cb88                 | __system____root_readdir
2cb88     03 4A 05 F6 | 	mov	COUNT_, #3
2cb8c     A8 00 A0 FD | 	call	#pushregs_
2cb90     09 27 02 F6 | 	mov	local01, arg01
2cb94     0A 29 02 F6 | 	mov	local02, arg02
2cb98     04 26 06 F1 | 	add	local01, #4
2cb9c     13 2B 02 FB | 	rdlong	local03, local01
2cba0     04 26 86 F1 | 	sub	local01, #4
2cba4                 | LR__4160
2cba4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2cba8     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2cbac     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2cbb0     01 FA 65 A6 |  if_e	neg	result1, #1
2cbb4     48 00 90 AD |  if_e	jmp	#LR__4161
2cbb8     15 17 0A FB | 	rdlong	arg03, local03 wz
2cbbc     04 2A 06 A1 |  if_e	add	local03, #4
2cbc0     E0 FF 9F AD |  if_e	jmp	#LR__4160
2cbc4     15 15 02 FB | 	rdlong	arg02, local03
2cbc8     01 14 06 F1 | 	add	arg02, #1
2cbcc     14 13 02 F6 | 	mov	arg01, local02
2cbd0     40 16 06 F6 | 	mov	arg03, #64
2cbd4     58 FE BF FD | 	call	#__system__strncpy
2cbd8     50 28 06 F1 | 	add	local02, #80
2cbdc     14 03 48 FC | 	wrbyte	#1, local02
2cbe0     08 28 86 F1 | 	sub	local02, #8
2cbe4     14 01 68 FC | 	wrlong	#0, local02
2cbe8     04 28 06 F1 | 	add	local02, #4
2cbec     14 01 68 FC | 	wrlong	#0, local02
2cbf0     04 2A 06 F1 | 	add	local03, #4
2cbf4     04 26 06 F1 | 	add	local01, #4
2cbf8     13 2B 62 FC | 	wrlong	local03, local01
2cbfc     00 FA 05 F6 | 	mov	result1, #0
2cc00                 | LR__4161
2cc00     A7 F0 03 F6 | 	mov	ptra, fp
2cc04     B2 00 A0 FD | 	call	#popregs_
2cc08                 | __system____root_readdir_ret
2cc08     2D 00 64 FD | 	ret
2cc0c                 | 
2cc0c                 | __system____root_closedir
2cc0c     00 FA 05 F6 | 	mov	result1, #0
2cc10                 | __system____root_closedir_ret
2cc10     2D 00 64 FD | 	ret
2cc14                 | 
2cc14                 | __system____root_stat
2cc14     0A 01 02 F6 | 	mov	_var01, arg02
2cc18     00 13 02 F6 | 	mov	arg01, _var01
2cc1c     00 14 06 F6 | 	mov	arg02, #0
2cc20     30 16 06 F6 | 	mov	arg03, #48
2cc24     98 00 A0 FD | 	call	#\builtin_bytefill_
2cc28     08 00 06 F1 | 	add	_var01, #8
2cc2c     08 00 80 FF 
2cc30     00 FF 6B FC | 	wrlong	##4607, _var01
2cc34     00 FA 05 F6 | 	mov	result1, #0
2cc38                 | __system____root_stat_ret
2cc38     2D 00 64 FD | 	ret
2cc3c                 | 
2cc3c                 | __system___normalizeName
2cc3c     00 00 06 F6 | 	mov	_var01, #0
2cc40     09 03 02 F6 | 	mov	_var02, arg01
2cc44     01 05 02 F6 | 	mov	_var03, _var02
2cc48                 | LR__4170
2cc48     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2cc4c     5C 01 90 AD |  if_e	jmp	#LR__4189
2cc50     00 00 0E F2 | 	cmp	_var01, #0 wz
2cc54     02 07 02 56 |  if_ne	mov	_var04, _var03
2cc58     01 04 06 51 |  if_ne	add	_var03, #1
2cc5c     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2cc60     00 00 06 56 |  if_ne	mov	_var01, #0
2cc64     01 07 C2 FA | 	rdbyte	_var04, _var02
2cc68     2E 06 0E F2 | 	cmp	_var04, #46 wz
2cc6c     D8 00 90 5D |  if_ne	jmp	#LR__4182
2cc70     01 02 06 F1 | 	add	_var02, #1
2cc74     01 07 C2 FA | 	rdbyte	_var04, _var02
2cc78     01 02 86 F1 | 	sub	_var02, #1
2cc7c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2cc80     18 00 90 AD |  if_e	jmp	#LR__4171
2cc84     01 02 06 F1 | 	add	_var02, #1
2cc88     01 09 C2 FA | 	rdbyte	_var05, _var02
2cc8c     01 02 86 F1 | 	sub	_var02, #1
2cc90     04 0B 02 F6 | 	mov	_var06, _var05
2cc94     07 0A 4E F7 | 	zerox	_var06, #7 wz
2cc98     10 00 90 5D |  if_ne	jmp	#LR__4172
2cc9c                 | LR__4171
2cc9c     01 0D 02 F6 | 	mov	_var07, _var02
2cca0     01 0C 06 F1 | 	add	_var07, #1
2cca4     06 03 02 F6 | 	mov	_var02, _var07
2cca8     E0 00 90 FD | 	jmp	#LR__4186
2ccac                 | LR__4172
2ccac     01 02 06 F1 | 	add	_var02, #1
2ccb0     01 0D C2 FA | 	rdbyte	_var07, _var02
2ccb4     01 02 86 F1 | 	sub	_var02, #1
2ccb8     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2ccbc     2E 06 0E F2 | 	cmp	_var04, #46 wz
2ccc0     84 00 90 5D |  if_ne	jmp	#LR__4181
2ccc4     02 02 06 F1 | 	add	_var02, #2
2ccc8     01 0D C2 FA | 	rdbyte	_var07, _var02
2cccc     02 02 86 F1 | 	sub	_var02, #2
2ccd0     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2ccd4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2ccd8     18 00 90 AD |  if_e	jmp	#LR__4173
2ccdc     02 02 06 F1 | 	add	_var02, #2
2cce0     01 09 C2 FA | 	rdbyte	_var05, _var02
2cce4     02 02 86 F1 | 	sub	_var02, #2
2cce8     04 0B 02 F6 | 	mov	_var06, _var05
2ccec     07 0A 4E F7 | 	zerox	_var06, #7 wz
2ccf0     54 00 90 5D |  if_ne	jmp	#LR__4180
2ccf4                 | LR__4173
2ccf4     02 02 06 F1 | 	add	_var02, #2
2ccf8     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2ccfc     40 00 90 ED |  if_be	jmp	#LR__4179
2cd00     02 0F 02 F6 | 	mov	_var08, _var03
2cd04     01 0E 86 F1 | 	sub	_var08, #1
2cd08                 | LR__4174
2cd08     07 07 C2 FA | 	rdbyte	_var04, _var08
2cd0c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2cd10     0C 00 90 5D |  if_ne	jmp	#LR__4175
2cd14     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2cd18     01 0E 86 11 |  if_a	sub	_var08, #1
2cd1c     E8 FF 9F 1D |  if_a	jmp	#LR__4174
2cd20                 | LR__4175
2cd20     97 0C 48 FB | 	callpa	#(@LR__4177-@LR__4176)>>2,fcache_load_ptr_
2cd24                 | LR__4176
2cd24     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2cd28     10 00 90 ED |  if_be	jmp	#LR__4178
2cd2c     07 07 C2 FA | 	rdbyte	_var04, _var08
2cd30     2F 06 0E F2 | 	cmp	_var04, #47 wz
2cd34     01 0E 86 51 |  if_ne	sub	_var08, #1
2cd38     E8 FF 9F 5D |  if_ne	jmp	#LR__4176
2cd3c                 | LR__4177
2cd3c                 | LR__4178
2cd3c     07 05 02 F6 | 	mov	_var03, _var08
2cd40                 | LR__4179
2cd40     01 00 06 F6 | 	mov	_var01, #1
2cd44     44 00 90 FD | 	jmp	#LR__4186
2cd48                 | LR__4180
2cd48                 | LR__4181
2cd48                 | LR__4182
2cd48     97 18 48 FB | 	callpa	#(@LR__4184-@LR__4183)>>2,fcache_load_ptr_
2cd4c                 | LR__4183
2cd4c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2cd50     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2cd54     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2cd58     20 00 90 AD |  if_e	jmp	#LR__4185
2cd5c     01 0B 02 F6 | 	mov	_var06, _var02
2cd60     01 09 02 F6 | 	mov	_var05, _var02
2cd64     01 08 06 F1 | 	add	_var05, #1
2cd68     05 11 C2 FA | 	rdbyte	_var09, _var06
2cd6c     04 03 02 F6 | 	mov	_var02, _var05
2cd70     02 11 42 FC | 	wrbyte	_var09, _var03
2cd74     01 04 06 F1 | 	add	_var03, #1
2cd78     D0 FF 9F FD | 	jmp	#LR__4183
2cd7c                 | LR__4184
2cd7c                 | LR__4185
2cd7c     01 07 C2 FA | 	rdbyte	_var04, _var02
2cd80     2F 06 0E F2 | 	cmp	_var04, #47 wz
2cd84     C0 FE 9F 5D |  if_ne	jmp	#LR__4170
2cd88     01 00 06 F6 | 	mov	_var01, #1
2cd8c                 | LR__4186
2cd8c     97 0C 48 FB | 	callpa	#(@LR__4188-@LR__4187)>>2,fcache_load_ptr_
2cd90                 | LR__4187
2cd90     01 07 C2 FA | 	rdbyte	_var04, _var02
2cd94     2F 06 0E F2 | 	cmp	_var04, #47 wz
2cd98     01 0D 02 A6 |  if_e	mov	_var07, _var02
2cd9c     01 0C 06 A1 |  if_e	add	_var07, #1
2cda0     06 03 02 A6 |  if_e	mov	_var02, _var07
2cda4     E8 FF 9F AD |  if_e	jmp	#LR__4187
2cda8                 | LR__4188
2cda8     9C FE 9F FD | 	jmp	#LR__4170
2cdac                 | LR__4189
2cdac     02 01 48 FC | 	wrbyte	#0, _var03
2cdb0                 | __system___normalizeName_ret
2cdb0     2D 00 64 FD | 	ret
2cdb4                 | 
2cdb4                 | __system___strrev
2cdb4     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2cdb8     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2cdbc     09 03 02 F6 | 	mov	_var02, arg01
2cdc0     97 1A 48 FB | 	callpa	#(@LR__4192-@LR__4190)>>2,fcache_load_ptr_
2cdc4                 | LR__4190
2cdc4     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2cdc8     01 02 06 51 |  if_ne	add	_var02, #1
2cdcc     F4 FF 9F 5D |  if_ne	jmp	#LR__4190
2cdd0     01 02 86 F1 | 	sub	_var02, #1
2cdd4                 | LR__4191
2cdd4     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2cdd8     1C 00 90 ED |  if_be	jmp	#LR__4193
2cddc     09 01 C2 FA | 	rdbyte	_var01, arg01
2cde0     01 05 C2 FA | 	rdbyte	_var03, _var02
2cde4     09 05 42 FC | 	wrbyte	_var03, arg01
2cde8     01 01 42 FC | 	wrbyte	_var01, _var02
2cdec     01 12 06 F1 | 	add	arg01, #1
2cdf0     01 02 86 F1 | 	sub	_var02, #1
2cdf4     DC FF 9F FD | 	jmp	#LR__4191
2cdf8                 | LR__4192
2cdf8                 | LR__4193
2cdf8                 | __system___strrev_ret
2cdf8     2D 00 64 FD | 	ret
2cdfc                 | 
2cdfc                 | __system___fmtpad
2cdfc     06 4A 05 F6 | 	mov	COUNT_, #6
2ce00     A8 00 A0 FD | 	call	#pushregs_
2ce04     09 27 02 F6 | 	mov	local01, arg01
2ce08     0A 29 02 F6 | 	mov	local02, arg02
2ce0c     0B 2B 02 F6 | 	mov	local03, arg03
2ce10     14 13 EA F8 | 	getbyte	arg01, local02, #1
2ce14     16 28 46 F0 | 	shr	local02, #22
2ce18     03 28 0E F5 | 	and	local02, #3 wz
2ce1c     00 2C 06 F6 | 	mov	local04, #0
2ce20     01 28 06 A6 |  if_e	mov	local02, #1
2ce24     0C 29 CA F7 | 	test	local02, arg04 wz
2ce28     00 FA 05 A6 |  if_e	mov	result1, #0
2ce2c     88 00 90 AD |  if_e	jmp	#LR__4203
2ce30     09 2B C2 F2 | 	subr	local03, arg01
2ce34     01 2A 56 F2 | 	cmps	local03, #1 wc
2ce38     00 FA 05 C6 |  if_b	mov	result1, #0
2ce3c     78 00 90 CD |  if_b	jmp	#LR__4203
2ce40     03 28 0E F2 | 	cmp	local02, #3 wz
2ce44     18 00 90 5D |  if_ne	jmp	#LR__4200
2ce48     01 18 0E F2 | 	cmp	arg04, #1 wz
2ce4c     6E 28 62 FD | 	wrz	local02
2ce50     14 2B 02 F1 | 	add	local03, local02
2ce54     15 2B 52 F6 | 	abs	local03, local03 wc
2ce58     01 2A 46 F0 | 	shr	local03, #1
2ce5c     15 2B 82 F6 | 	negc	local03, local03
2ce60                 | LR__4200
2ce60     01 2A 56 F2 | 	cmps	local03, #1 wc
2ce64     4C 00 90 CD |  if_b	jmp	#LR__4202
2ce68     15 2F 02 F6 | 	mov	local05, local03
2ce6c                 | LR__4201
2ce6c     13 29 02 F6 | 	mov	local02, local01
2ce70     13 31 02 F6 | 	mov	local06, local01
2ce74     13 28 46 F7 | 	zerox	local02, #19
2ce78     14 30 46 F0 | 	shr	local06, #20
2ce7c     02 30 66 F0 | 	shl	local06, #2
2ce80     ED 30 02 F1 | 	add	local06, __methods__
2ce84     18 31 02 FB | 	rdlong	local06, local06
2ce88     20 12 06 F6 | 	mov	arg01, #32
2ce8c     F2 2A 02 F6 | 	mov	local03, objptr
2ce90     14 E5 01 F6 | 	mov	objptr, local02
2ce94     2D 30 62 FD | 	call	local06
2ce98     15 E5 01 F6 | 	mov	objptr, local03
2ce9c     FD 30 02 F6 | 	mov	local06, result1
2cea0     00 30 56 F2 | 	cmps	local06, #0 wc
2cea4     18 FB 01 C6 |  if_b	mov	result1, local06
2cea8     0C 00 90 CD |  if_b	jmp	#LR__4203
2ceac     18 2D 02 F1 | 	add	local04, local06
2ceb0     EE 2F 6E FB | 	djnz	local05, #LR__4201
2ceb4                 | LR__4202
2ceb4     16 FB 01 F6 | 	mov	result1, local04
2ceb8                 | LR__4203
2ceb8     A7 F0 03 F6 | 	mov	ptra, fp
2cebc     B2 00 A0 FD | 	call	#popregs_
2cec0                 | __system___fmtpad_ret
2cec0     2D 00 64 FD | 	ret
2cec4                 | 
2cec4                 | __system___uitoa
2cec4     04 4A 05 F6 | 	mov	COUNT_, #4
2cec8     A8 00 A0 FD | 	call	#pushregs_
2cecc     09 27 02 F6 | 	mov	local01, arg01
2ced0     00 1A 4E F2 | 	cmps	arg05, #0 wz
2ced4     13 1B 02 F6 | 	mov	arg05, local01
2ced8     00 28 06 F6 | 	mov	local02, #0
2cedc     37 2A 06 56 |  if_ne	mov	local03, #55
2cee0     57 2A 06 A6 |  if_e	mov	local03, #87
2cee4                 | LR__4210
2cee4     0B 15 12 FD | 	qdiv	arg02, arg03
2cee8     19 2C 62 FD | 	getqy	local04
2ceec     0B 15 12 FD | 	qdiv	arg02, arg03
2cef0     0A 2C 16 F2 | 	cmp	local04, #10 wc
2cef4     30 2C 06 C1 |  if_b	add	local04, #48
2cef8     15 2D 02 31 |  if_ae	add	local04, local03
2cefc     0D 2D 42 FC | 	wrbyte	local04, arg05
2cf00     01 1A 06 F1 | 	add	arg05, #1
2cf04     01 28 06 F1 | 	add	local02, #1
2cf08     18 14 62 FD | 	getqx	arg02
2cf0c     00 14 0E F2 | 	cmp	arg02, #0 wz
2cf10     D0 FF 9F 5D |  if_ne	jmp	#LR__4210
2cf14     0C 29 12 F2 | 	cmp	local02, arg04 wc
2cf18     C8 FF 9F CD |  if_b	jmp	#LR__4210
2cf1c     0D 01 48 FC | 	wrbyte	#0, arg05
2cf20     13 13 02 F6 | 	mov	arg01, local01
2cf24     8C FE BF FD | 	call	#__system___strrev
2cf28     14 FB 01 F6 | 	mov	result1, local02
2cf2c     A7 F0 03 F6 | 	mov	ptra, fp
2cf30     B2 00 A0 FD | 	call	#popregs_
2cf34                 | __system___uitoa_ret
2cf34     2D 00 64 FD | 	ret
2cf38                 | 
2cf38                 | __system__disassemble_0576
2cf38     10 4A 05 F6 | 	mov	COUNT_, #16
2cf3c     A8 00 A0 FD | 	call	#pushregs_
2cf40     09 27 02 F6 | 	mov	local01, arg01
2cf44     0A 29 02 F6 | 	mov	local02, arg02
2cf48     0B 2B 02 F6 | 	mov	local03, arg03
2cf4c     0C 2D 02 F6 | 	mov	local04, arg04
2cf50     0D 2F 02 F6 | 	mov	local05, arg05
2cf54     17 13 52 F6 | 	abs	arg01, local05 wc
2cf58     1F 30 C6 C9 |  if_b	decod	local06, #31
2cf5c     00 30 06 36 |  if_ae	mov	local06, #0
2cf60     CC CF BF FD | 	call	#__system___float_fromuns
2cf64     18 FB 61 F5 | 	xor	result1, local06
2cf68     FD 32 02 F6 | 	mov	local07, result1
2cf6c     00 34 06 F6 | 	mov	local08, #0
2cf70     13 13 02 F6 | 	mov	arg01, local01
2cf74     00 14 06 F6 | 	mov	arg02, #0
2cf78     01 16 06 F6 | 	mov	arg03, #1
2cf7c     E8 D7 BF FD | 	call	#__system___float_cmp
2cf80     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf84     00 36 06 A6 |  if_e	mov	local09, #0
2cf88     14 01 68 AC |  if_e	wrlong	#0, local02
2cf8c     15 37 62 AC |  if_e	wrlong	local09, local03
2cf90     8C 01 90 AD |  if_e	jmp	#LR__4232
2cf94     13 13 02 F6 | 	mov	arg01, local01
2cf98     BC DC BF FD | 	call	#__system____builtin_ilogb
2cf9c     FD 38 02 F6 | 	mov	local10, result1
2cfa0     0A 2E 0E F2 | 	cmp	local05, #10 wz
2cfa4     24 00 90 5D |  if_ne	jmp	#LR__4220
2cfa8     1C 37 02 F6 | 	mov	local09, local10
2cfac     01 36 66 F0 | 	shl	local09, #1
2cfb0     1C 37 02 F1 | 	add	local09, local10
2cfb4     1B 39 52 F6 | 	abs	local10, local09 wc
2cfb8     0A 38 16 FD | 	qdiv	local10, #10
2cfbc     09 3A 06 F6 | 	mov	local11, #9
2cfc0     18 38 62 FD | 	getqx	local10
2cfc4     1C 39 82 F6 | 	negc	local10, local10
2cfc8     04 00 90 FD | 	jmp	#LR__4221
2cfcc                 | LR__4220
2cfcc     18 3A 06 F6 | 	mov	local11, #24
2cfd0                 | LR__4221
2cfd0                 | LR__4222
2cfd0     08 34 56 F2 | 	cmps	local08, #8 wc
2cfd4     01 34 06 F1 | 	add	local08, #1
2cfd8     60 00 90 3D |  if_ae	jmp	#LR__4223
2cfdc     00 C0 1F FF 
2cfe0     00 12 06 F6 | 	mov	arg01, ##1065353216
2cfe4     19 15 02 F6 | 	mov	arg02, local07
2cfe8     1C 17 02 F6 | 	mov	arg03, local10
2cfec     4C E3 BF FD | 	call	#__system___float_pow_n
2cff0     FD 14 02 F6 | 	mov	arg02, result1
2cff4     13 13 02 F6 | 	mov	arg01, local01
2cff8     3C D5 BF FD | 	call	#__system___float_div
2cffc     FD 3C 02 F6 | 	mov	local12, result1
2d000     1E 13 02 F6 | 	mov	arg01, local12
2d004     00 C0 1F FF 
2d008     00 14 06 F6 | 	mov	arg02, ##1065353216
2d00c     01 16 06 F6 | 	mov	arg03, #1
2d010     54 D7 BF FD | 	call	#__system___float_cmp
2d014     00 FA 55 F2 | 	cmps	result1, #0 wc
2d018     01 38 86 C1 |  if_b	sub	local10, #1
2d01c     B0 FF 9F CD |  if_b	jmp	#LR__4222
2d020     19 15 02 F6 | 	mov	arg02, local07
2d024     1E 13 02 F6 | 	mov	arg01, local12
2d028     01 16 66 F6 | 	neg	arg03, #1
2d02c     38 D7 BF FD | 	call	#__system___float_cmp
2d030     00 FA 55 F2 | 	cmps	result1, #0 wc
2d034     01 38 06 31 |  if_ae	add	local10, #1
2d038     94 FF 9F 3D |  if_ae	jmp	#LR__4222
2d03c                 | LR__4223
2d03c     1E 13 02 F6 | 	mov	arg01, local12
2d040     14 DC BF FD | 	call	#__system____builtin_ilogb
2d044     FD 3E 02 F6 | 	mov	local13, result1
2d048     1E 41 02 F6 | 	mov	local14, local12
2d04c     17 41 06 F4 | 	bitl	local14, #279
2d050     17 40 26 F4 | 	bith	local14, #23
2d054     1F 41 62 F0 | 	shl	local14, local13
2d058     02 2E 0E F2 | 	cmp	local05, #2 wz
2d05c     02 2C 66 A0 |  if_e	shl	local04, #2
2d060     00 42 06 F6 | 	mov	local15, #0
2d064     00 2C 56 F2 | 	cmps	local04, #0 wc
2d068     10 00 90 3D |  if_ae	jmp	#LR__4224
2d06c     1C 2D C2 F2 | 	subr	local04, local10
2d070     00 2C 56 F2 | 	cmps	local04, #0 wc
2d074     A0 00 90 CD |  if_b	jmp	#LR__4231
2d078     04 00 90 FD | 	jmp	#LR__4225
2d07c                 | LR__4224
2d07c     01 2C 06 F1 | 	add	local04, #1
2d080                 | LR__4225
2d080     1D 2D 7A F3 | 	fles	local04, local11 wcz
2d084     01 44 06 F6 | 	mov	local16, #1
2d088     97 22 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
2d08c                 | LR__4226
2d08c     00 40 00 FF 
2d090     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2d094     38 00 90 3D |  if_ae	jmp	#LR__4228
2d098     01 2C 56 F2 | 	cmps	local04, #1 wc
2d09c     01 2C 86 F1 | 	sub	local04, #1
2d0a0     2C 00 90 CD |  if_b	jmp	#LR__4228
2d0a4     17 43 02 FD | 	qmul	local15, local05
2d0a8     20 3F 02 F6 | 	mov	local13, local14
2d0ac     17 3E 46 F0 | 	shr	local13, #23
2d0b0     17 41 06 F4 | 	bitl	local14, #279
2d0b4     18 42 62 FD | 	getqx	local15
2d0b8     17 45 02 FD | 	qmul	local16, local05
2d0bc     18 44 62 FD | 	getqx	local16
2d0c0     17 41 02 FD | 	qmul	local14, local05
2d0c4     1F 43 02 F1 | 	add	local15, local13
2d0c8     18 40 62 FD | 	getqx	local14
2d0cc     BC FF 9F FD | 	jmp	#LR__4226
2d0d0                 | LR__4227
2d0d0                 | LR__4228
2d0d0     17 37 02 F6 | 	mov	local09, local05
2d0d4     17 36 66 F0 | 	shl	local09, #23
2d0d8     1B 3F 52 F6 | 	abs	local13, local09 wc
2d0dc     01 3E 46 F0 | 	shr	local13, #1
2d0e0     1F 3F 82 F6 | 	negc	local13, local13
2d0e4     1F 41 1A F2 | 	cmp	local14, local13 wcz
2d0e8     20 00 90 1D |  if_a	jmp	#LR__4229
2d0ec     17 2E 66 F0 | 	shl	local05, #23
2d0f0     17 3F 52 F6 | 	abs	local13, local05 wc
2d0f4     01 3E 46 F0 | 	shr	local13, #1
2d0f8     1F 3F 82 F6 | 	negc	local13, local13
2d0fc     1F 41 0A F2 | 	cmp	local14, local13 wz
2d100     14 00 90 5D |  if_ne	jmp	#LR__4230
2d104     01 42 CE F7 | 	test	local15, #1 wz
2d108     0C 00 90 AD |  if_e	jmp	#LR__4230
2d10c                 | LR__4229
2d10c     01 42 06 F1 | 	add	local15, #1
2d110     22 43 0A F2 | 	cmp	local15, local16 wz
2d114     01 38 06 A1 |  if_e	add	local10, #1
2d118                 | LR__4230
2d118                 | LR__4231
2d118     14 43 62 FC | 	wrlong	local15, local02
2d11c     15 39 62 FC | 	wrlong	local10, local03
2d120                 | LR__4232
2d120     A7 F0 03 F6 | 	mov	ptra, fp
2d124     B2 00 A0 FD | 	call	#popregs_
2d128                 | __system__disassemble_0576_ret
2d128     2D 00 64 FD | 	ret
2d12c                 | 
2d12c                 | __system__emitsign_0578
2d12c     00 FA 05 F6 | 	mov	result1, #0
2d130     00 14 0E F2 | 	cmp	arg02, #0 wz
2d134     09 01 02 56 |  if_ne	mov	_var01, arg01
2d138     01 12 06 51 |  if_ne	add	arg01, #1
2d13c     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2d140     01 FA 05 56 |  if_ne	mov	result1, #1
2d144     00 16 0E F2 | 	cmp	arg03, #0 wz
2d148     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2d14c     01 12 06 51 |  if_ne	add	arg01, #1
2d150     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2d154     02 FA 05 51 |  if_ne	add	result1, #2
2d158                 | __system__emitsign_0578_ret
2d158     2D 00 64 FD | 	ret
2d15c                 | 
2d15c                 | __system___getiolock_0616
2d15c     01 4A 05 F6 | 	mov	COUNT_, #1
2d160     A8 00 A0 FD | 	call	#pushregs_
2d164     A0 F8 BF FD | 	call	#__system____getftab
2d168     FD 26 0A F6 | 	mov	local01, result1 wz
2d16c     10 00 90 AD |  if_e	jmp	#LR__4240
2d170     08 26 06 F1 | 	add	local01, #8
2d174     13 FB 09 FB | 	rdlong	result1, local01 wz
2d178     08 26 86 F1 | 	sub	local01, #8
2d17c     18 00 90 5D |  if_ne	jmp	#LR__4241
2d180                 | LR__4240
2d180     01 00 00 FF 
2d184     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2d188     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2d18c     01 00 00 FF 
2d190     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2d194     08 00 90 FD | 	jmp	#LR__4242
2d198                 | LR__4241
2d198     0C 26 06 F1 | 	add	local01, #12
2d19c     13 FB 01 F6 | 	mov	result1, local01
2d1a0                 | LR__4242
2d1a0     A7 F0 03 F6 | 	mov	ptra, fp
2d1a4     B2 00 A0 FD | 	call	#popregs_
2d1a8                 | __system___getiolock_0616_ret
2d1a8     2D 00 64 FD | 	ret
2d1ac                 | 
2d1ac                 | __system___gettxfunc
2d1ac     01 4A 05 F6 | 	mov	COUNT_, #1
2d1b0     A8 00 A0 FD | 	call	#pushregs_
2d1b4     50 F8 BF FD | 	call	#__system____getftab
2d1b8     FD 26 0A F6 | 	mov	local01, result1 wz
2d1bc     10 00 90 AD |  if_e	jmp	#LR__4250
2d1c0     08 26 06 F1 | 	add	local01, #8
2d1c4     13 15 0A FB | 	rdlong	arg02, local01 wz
2d1c8     08 26 86 F1 | 	sub	local01, #8
2d1cc     08 00 90 5D |  if_ne	jmp	#LR__4251
2d1d0                 | LR__4250
2d1d0     00 FA 05 F6 | 	mov	result1, #0
2d1d4     0C 00 90 FD | 	jmp	#LR__4252
2d1d8                 | LR__4251
2d1d8     00 58 05 FF 
2d1dc     00 26 46 F5 | 	or	local01, ##179306496
2d1e0     13 FB 01 F6 | 	mov	result1, local01
2d1e4                 | LR__4252
2d1e4     A7 F0 03 F6 | 	mov	ptra, fp
2d1e8     B2 00 A0 FD | 	call	#popregs_
2d1ec                 | __system___gettxfunc_ret
2d1ec     2D 00 64 FD | 	ret
2d1f0                 | 
2d1f0                 | __system___getrxfunc
2d1f0     01 4A 05 F6 | 	mov	COUNT_, #1
2d1f4     A8 00 A0 FD | 	call	#pushregs_
2d1f8     0C F8 BF FD | 	call	#__system____getftab
2d1fc     FD 26 0A F6 | 	mov	local01, result1 wz
2d200     10 00 90 AD |  if_e	jmp	#LR__4260
2d204     08 26 06 F1 | 	add	local01, #8
2d208     13 15 0A FB | 	rdlong	arg02, local01 wz
2d20c     08 26 86 F1 | 	sub	local01, #8
2d210     08 00 90 5D |  if_ne	jmp	#LR__4261
2d214                 | LR__4260
2d214     00 FA 05 F6 | 	mov	result1, #0
2d218     0C 00 90 FD | 	jmp	#LR__4262
2d21c                 | LR__4261
2d21c     00 60 05 FF 
2d220     00 26 46 F5 | 	or	local01, ##180355072
2d224     13 FB 01 F6 | 	mov	result1, local01
2d228                 | LR__4262
2d228     A7 F0 03 F6 | 	mov	ptra, fp
2d22c     B2 00 A0 FD | 	call	#popregs_
2d230                 | __system___getrxfunc_ret
2d230     2D 00 64 FD | 	ret
2d234                 | 
2d234                 | __system____ScanForChar
2d234     09 01 02 F6 | 	mov	_var01, arg01
2d238     09 03 02 F6 | 	mov	_var02, arg01
2d23c     97 06 48 FB | 	callpa	#(@LR__4271-@LR__4270)>>2,fcache_load_ptr_
2d240                 | LR__4270
2d240     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2d244     01 02 06 51 |  if_ne	add	_var02, #1
2d248     F4 FF 9F 5D |  if_ne	jmp	#LR__4270
2d24c                 | LR__4271
2d24c     09 03 82 F1 | 	sub	_var02, arg01
2d250     01 FB 01 F6 | 	mov	result1, _var02
2d254     FD 12 0A F6 | 	mov	arg01, result1 wz
2d258     00 FA 05 A6 |  if_e	mov	result1, #0
2d25c     B8 00 90 AD |  if_e	jmp	#LR__4278
2d260     0A 05 02 F6 | 	mov	_var03, arg02
2d264     07 04 4E F7 | 	zerox	_var03, #7 wz
2d268     00 FA 05 A6 |  if_e	mov	result1, #0
2d26c     A8 00 90 AD |  if_e	jmp	#LR__4278
2d270     01 16 16 F2 | 	cmp	arg03, #1 wc
2d274     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2d278     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2d27c     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2d280     94 00 90 4D |  if_c_and_nz	jmp	#LR__4278
2d284     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2d288     10 00 90 ED |  if_be	jmp	#LR__4272
2d28c     00 18 0E F2 | 	cmp	arg04, #0 wz
2d290     00 FA 05 A6 |  if_e	mov	result1, #0
2d294     80 00 90 AD |  if_e	jmp	#LR__4278
2d298     09 17 02 F6 | 	mov	arg03, arg01
2d29c                 | LR__4272
2d29c     01 16 86 F1 | 	sub	arg03, #1
2d2a0     00 18 0E F2 | 	cmp	arg04, #0 wz
2d2a4     38 00 90 5D |  if_ne	jmp	#LR__4274
2d2a8     0B 07 02 F6 | 	mov	_var04, arg03
2d2ac     09 09 02 F6 | 	mov	_var05, arg01
2d2b0                 | LR__4273
2d2b0     04 07 12 F2 | 	cmp	_var04, _var05 wc
2d2b4     5C 00 90 3D |  if_ae	jmp	#LR__4277
2d2b8     03 05 02 F6 | 	mov	_var03, _var04
2d2bc     00 05 02 F1 | 	add	_var03, _var01
2d2c0     02 05 C2 FA | 	rdbyte	_var03, _var03
2d2c4     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2d2c8     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2d2cc     01 06 06 A1 |  if_e	add	_var04, #1
2d2d0     03 FB 01 A6 |  if_e	mov	result1, _var04
2d2d4     40 00 90 AD |  if_e	jmp	#LR__4278
2d2d8     01 06 06 F1 | 	add	_var04, #1
2d2dc     D0 FF 9F FD | 	jmp	#LR__4273
2d2e0                 | LR__4274
2d2e0     0B 07 02 F6 | 	mov	_var04, arg03
2d2e4                 | LR__4275
2d2e4     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2d2e8     28 00 90 1D |  if_a	jmp	#LR__4276
2d2ec     03 09 02 F6 | 	mov	_var05, _var04
2d2f0     00 09 02 F1 | 	add	_var05, _var01
2d2f4     04 05 C2 FA | 	rdbyte	_var03, _var05
2d2f8     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2d2fc     04 05 0A F2 | 	cmp	_var03, _var05 wz
2d300     01 06 06 A1 |  if_e	add	_var04, #1
2d304     03 FB 01 A6 |  if_e	mov	result1, _var04
2d308     0C 00 90 AD |  if_e	jmp	#LR__4278
2d30c     01 06 86 F1 | 	sub	_var04, #1
2d310     D0 FF 9F FD | 	jmp	#LR__4275
2d314                 | LR__4276
2d314                 | LR__4277
2d314     00 FA 05 F6 | 	mov	result1, #0
2d318                 | LR__4278
2d318                 | __system____ScanForChar_ret
2d318     2D 00 64 FD | 	ret
2d31c                 | 
2d31c                 | __system___basic_dir
2d31c     05 4A 05 F6 | 	mov	COUNT_, #5
2d320     A8 00 A0 FD | 	call	#pushregs_
2d324     4C F0 07 F1 | 	add	ptra, #76
2d328     04 4E 05 F1 | 	add	fp, #4
2d32c     A7 12 62 FC | 	wrlong	arg01, fp
2d330     04 4E 05 F1 | 	add	fp, #4
2d334     A7 14 62 FC | 	wrlong	arg02, fp
2d338     04 4E 85 F1 | 	sub	fp, #4
2d33c     A7 14 0A FB | 	rdlong	arg02, fp wz
2d340     04 4E 85 F1 | 	sub	fp, #4
2d344     04 4E 05 51 |  if_ne	add	fp, #4
2d348     A7 26 02 5B |  if_ne	rdlong	local01, fp
2d34c     04 4E 85 51 |  if_ne	sub	fp, #4
2d350     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2d354     70 00 90 AD |  if_e	jmp	#LR__4280
2d358     03 00 00 FF 
2d35c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2d360     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2d364     03 00 00 FF 
2d368     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2d36c     03 00 00 5F 
2d370     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2d374     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2d378     03 00 00 5F 
2d37c     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2d380     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2d384     B8 01 00 FF 
2d388     30 12 06 F6 | 	mov	arg01, ##@LR__5448
2d38c     E0 E8 BF FD | 	call	#__system__opendir
2d390     03 00 00 FF 
2d394     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2d398     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2d39c     08 4E 05 F1 | 	add	fp, #8
2d3a0     A7 28 02 FB | 	rdlong	local02, fp
2d3a4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2d3a8     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2d3ac     04 4E 85 F1 | 	sub	fp, #4
2d3b0     A7 28 02 FB | 	rdlong	local02, fp
2d3b4     04 4E 85 F1 | 	sub	fp, #4
2d3b8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2d3bc     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2d3c0     03 00 00 FF 
2d3c4     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2d3c8                 | LR__4280
2d3c8     03 00 00 FF 
2d3cc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2d3d0     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2d3d4     03 00 00 FF 
2d3d8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2d3dc     B8 01 00 AF 
2d3e0     32 FA 05 A6 |  if_e	mov	result1, ##@LR__5449
2d3e4     84 02 90 AD |  if_e	jmp	#LR__4293
2d3e8                 | LR__4281
2d3e8     03 00 00 FF 
2d3ec     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2d3f0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2d3f4     03 00 00 FF 
2d3f8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2d3fc     D0 E9 BF FD | 	call	#__system__readdir
2d400     0C 4E 05 F1 | 	add	fp, #12
2d404     A7 FA 61 FC | 	wrlong	result1, fp
2d408     0C 4E 85 F1 | 	sub	fp, #12
2d40c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d410     38 00 90 5D |  if_ne	jmp	#LR__4282
2d414     03 00 00 FF 
2d418     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2d41c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2d420     03 00 00 FF 
2d424     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2d428     30 E9 BF FD | 	call	#__system__closedir
2d42c     03 00 00 FF 
2d430     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2d434     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2d438     03 00 00 FF 
2d43c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2d440     B8 01 00 FF 
2d444     34 FA 05 F6 | 	mov	result1, ##@LR__5450
2d448     20 02 90 FD | 	jmp	#LR__4293
2d44c                 | LR__4282
2d44c     0C 4E 05 F1 | 	add	fp, #12
2d450     A7 12 02 FB | 	rdlong	arg01, fp
2d454     0C 4E 85 F1 | 	sub	fp, #12
2d458     03 00 00 FF 
2d45c     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2d460     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2d464     03 00 00 FF 
2d468     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2d46c     10 09 B0 FD | 	call	#__system___pat_match
2d470     00 FA 0D F2 | 	cmp	result1, #0 wz
2d474     70 FF 9F AD |  if_e	jmp	#LR__4281
2d478     03 00 00 FF 
2d47c     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2d480     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2d484     03 00 00 FF 
2d488     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2d48c     78 01 90 AD |  if_e	jmp	#LR__4289
2d490     0C 4E 05 F1 | 	add	fp, #12
2d494     A7 12 02 FB | 	rdlong	arg01, fp
2d498     04 4E 05 F1 | 	add	fp, #4
2d49c     A7 14 02 F6 | 	mov	arg02, fp
2d4a0     10 4E 85 F1 | 	sub	fp, #16
2d4a4     2C F2 BF FD | 	call	#__system__stat
2d4a8     40 4E 05 F1 | 	add	fp, #64
2d4ac     A7 FA 61 FC | 	wrlong	result1, fp
2d4b0     40 4E 85 F1 | 	sub	fp, #64
2d4b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d4b8     B8 01 00 5F 
2d4bc     36 FA 05 56 |  if_ne	mov	result1, ##@LR__5451
2d4c0     A8 01 90 5D |  if_ne	jmp	#LR__4293
2d4c4     18 4E 05 F1 | 	add	fp, #24
2d4c8     A7 28 02 FB | 	rdlong	local02, fp
2d4cc     78 00 00 FF 
2d4d0     00 28 06 F5 | 	and	local02, ##61440
2d4d4     2C 4E 05 F1 | 	add	fp, #44
2d4d8     A7 28 62 FC | 	wrlong	local02, fp
2d4dc     38 4E 85 F1 | 	sub	fp, #56
2d4e0     A7 28 02 FB | 	rdlong	local02, fp
2d4e4     0C 4E 85 F1 | 	sub	fp, #12
2d4e8     14 29 C2 FA | 	rdbyte	local02, local02
2d4ec     2E 28 0E F2 | 	cmp	local02, #46 wz
2d4f0     08 4E 05 A1 |  if_e	add	fp, #8
2d4f4     A7 04 68 AC |  if_e	wrlong	#2, fp
2d4f8     08 4E C5 F3 | 	sumz	fp, #8
2d4fc     A7 00 68 5C |  if_ne	wrlong	#0, fp
2d500     08 4E 85 51 |  if_ne	sub	fp, #8
2d504     44 4E 05 F1 | 	add	fp, #68
2d508     A7 28 02 FB | 	rdlong	local02, fp
2d50c     44 4E 85 F1 | 	sub	fp, #68
2d510     08 00 00 FF 
2d514     00 28 0E F2 | 	cmp	local02, ##4096 wz
2d518     18 00 90 5D |  if_ne	jmp	#LR__4283
2d51c     08 4E 05 F1 | 	add	fp, #8
2d520     A7 28 02 FB | 	rdlong	local02, fp
2d524     10 28 46 F5 | 	or	local02, #16
2d528     A7 28 62 FC | 	wrlong	local02, fp
2d52c     08 4E 85 F1 | 	sub	fp, #8
2d530     AC 00 90 FD | 	jmp	#LR__4288
2d534                 | LR__4283
2d534     44 4E 05 F1 | 	add	fp, #68
2d538     A7 28 02 FB | 	rdlong	local02, fp
2d53c     44 4E 85 F1 | 	sub	fp, #68
2d540     10 00 00 FF 
2d544     00 28 0E F2 | 	cmp	local02, ##8192 wz
2d548     44 4E 05 51 |  if_ne	add	fp, #68
2d54c     A7 26 02 5B |  if_ne	rdlong	local01, fp
2d550     44 4E 85 51 |  if_ne	sub	fp, #68
2d554     18 00 00 5F 
2d558     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2d55c     44 4E 05 51 |  if_ne	add	fp, #68
2d560     13 2B 02 56 |  if_ne	mov	local03, local01
2d564     44 4E 85 51 |  if_ne	sub	fp, #68
2d568     20 00 00 5F 
2d56c     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2d570     18 00 90 5D |  if_ne	jmp	#LR__4284
2d574     08 4E 05 F1 | 	add	fp, #8
2d578     A7 28 02 FB | 	rdlong	local02, fp
2d57c     04 28 46 F5 | 	or	local02, #4
2d580     A7 28 62 FC | 	wrlong	local02, fp
2d584     08 4E 85 F1 | 	sub	fp, #8
2d588     54 00 90 FD | 	jmp	#LR__4287
2d58c                 | LR__4284
2d58c     18 4E 05 F1 | 	add	fp, #24
2d590     A7 28 02 FB | 	rdlong	local02, fp
2d594     18 4E 85 F1 | 	sub	fp, #24
2d598     92 28 CE F7 | 	test	local02, #146 wz
2d59c     18 00 90 5D |  if_ne	jmp	#LR__4285
2d5a0     08 4E 05 F1 | 	add	fp, #8
2d5a4     A7 28 02 FB | 	rdlong	local02, fp
2d5a8     01 28 46 F5 | 	or	local02, #1
2d5ac     A7 28 62 FC | 	wrlong	local02, fp
2d5b0     08 4E 85 F1 | 	sub	fp, #8
2d5b4     28 00 90 FD | 	jmp	#LR__4286
2d5b8                 | LR__4285
2d5b8     44 4E 05 F1 | 	add	fp, #68
2d5bc     A7 2C 02 FB | 	rdlong	local04, fp
2d5c0     44 4E 85 F1 | 	sub	fp, #68
2d5c4     08 00 00 FF 
2d5c8     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2d5cc     08 4E 05 51 |  if_ne	add	fp, #8
2d5d0     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2d5d4     20 2C 46 55 |  if_ne	or	local04, #32
2d5d8     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2d5dc     08 4E 85 51 |  if_ne	sub	fp, #8
2d5e0                 | LR__4286
2d5e0                 | LR__4287
2d5e0                 | LR__4288
2d5e0     08 4E 05 F1 | 	add	fp, #8
2d5e4     A7 2C 02 FB | 	rdlong	local04, fp
2d5e8     08 4E 85 F1 | 	sub	fp, #8
2d5ec     03 00 00 FF 
2d5f0     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2d5f4     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2d5f8     03 00 00 FF 
2d5fc     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2d600     13 2D CA F7 | 	test	local04, local01 wz
2d604     E0 FD 9F AD |  if_e	jmp	#LR__4281
2d608                 | LR__4289
2d608     0C 4E 05 F1 | 	add	fp, #12
2d60c     A7 12 02 FB | 	rdlong	arg01, fp
2d610     0C 4E 85 F1 | 	sub	fp, #12
2d614     09 2F 02 F6 | 	mov	local05, arg01
2d618     97 06 48 FB | 	callpa	#(@LR__4291-@LR__4290)>>2,fcache_load_ptr_
2d61c                 | LR__4290
2d61c     17 FB C9 FA | 	rdbyte	result1, local05 wz
2d620     01 2E 06 51 |  if_ne	add	local05, #1
2d624     F4 FF 9F 5D |  if_ne	jmp	#LR__4290
2d628                 | LR__4291
2d628     17 13 C2 F2 | 	subr	arg01, local05
2d62c     01 12 06 F1 | 	add	arg01, #1
2d630     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2d634     48 4E 05 F1 | 	add	fp, #72
2d638     A7 FA 61 FC | 	wrlong	result1, fp
2d63c     48 4E 85 F1 | 	sub	fp, #72
2d640     00 FA 0D F2 | 	cmp	result1, #0 wz
2d644     18 00 90 AD |  if_e	jmp	#LR__4292
2d648     48 4E 05 F1 | 	add	fp, #72
2d64c     A7 12 02 FB | 	rdlong	arg01, fp
2d650     3C 4E 85 F1 | 	sub	fp, #60
2d654     A7 14 02 FB | 	rdlong	arg02, fp
2d658     0C 4E 85 F1 | 	sub	fp, #12
2d65c     0C 9E BF FD | 	call	#__system____builtin_strcpy
2d660                 | LR__4292
2d660     48 4E 05 F1 | 	add	fp, #72
2d664     A7 FA 01 FB | 	rdlong	result1, fp
2d668     48 4E 85 F1 | 	sub	fp, #72
2d66c                 | LR__4293
2d66c     A7 F0 03 F6 | 	mov	ptra, fp
2d670     B2 00 A0 FD | 	call	#popregs_
2d674                 | __system___basic_dir_ret
2d674     2D 00 64 FD | 	ret
2d678                 | 
2d678                 | __system__pack_0691
2d678     09 01 02 F6 | 	mov	_var01, arg01
2d67c     7F 16 06 F1 | 	add	arg03, #127
2d680     04 18 CE F7 | 	test	arg04, #4 wz
2d684     10 00 90 AD |  if_e	jmp	#LR__4300
2d688     00 00 0E F2 | 	cmp	_var01, #0 wz
2d68c     16 00 C6 A9 |  if_e	decod	_var01, #22
2d690     F7 00 26 F4 | 	bith	_var01, #247
2d694     B4 00 90 FD | 	jmp	#LR__4309
2d698                 | LR__4300
2d698     02 18 CE F7 | 	test	arg04, #2 wz
2d69c     00 C0 3F 5F 
2d6a0     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2d6a4     00 14 06 56 |  if_ne	mov	arg02, #0
2d6a8     A0 00 90 5D |  if_ne	jmp	#LR__4308
2d6ac     08 18 CE F7 | 	test	arg04, #8 wz
2d6b0     00 00 06 56 |  if_ne	mov	_var01, #0
2d6b4     94 00 90 5D |  if_ne	jmp	#LR__4307
2d6b8     FF 16 56 F2 | 	cmps	arg03, #255 wc
2d6bc     00 C0 3F 3F 
2d6c0     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2d6c4     00 14 06 36 |  if_ae	mov	arg02, #0
2d6c8     80 00 90 3D |  if_ae	jmp	#LR__4306
2d6cc     01 16 56 F2 | 	cmps	arg03, #1 wc
2d6d0     6C 00 90 3D |  if_ae	jmp	#LR__4304
2d6d4     01 14 46 F0 | 	shr	arg02, #1
2d6d8     00 03 02 F6 | 	mov	_var02, _var01
2d6dc     01 02 06 F5 | 	and	_var02, #1
2d6e0     1F 02 66 F0 | 	shl	_var02, #31
2d6e4     01 15 42 F5 | 	or	arg02, _var02
2d6e8     01 00 46 F0 | 	shr	_var01, #1
2d6ec     97 1E 48 FB | 	callpa	#(@LR__4302-@LR__4301)>>2,fcache_load_ptr_
2d6f0                 | LR__4301
2d6f0     00 16 56 F2 | 	cmps	arg03, #0 wc
2d6f4     34 00 90 3D |  if_ae	jmp	#LR__4303
2d6f8     00 00 0E F2 | 	cmp	_var01, #0 wz
2d6fc     2C 00 90 AD |  if_e	jmp	#LR__4303
2d700     0A 13 02 F6 | 	mov	arg01, arg02
2d704     01 12 06 F5 | 	and	arg01, #1
2d708     01 16 06 F1 | 	add	arg03, #1
2d70c     01 14 46 F0 | 	shr	arg02, #1
2d710     00 03 02 F6 | 	mov	_var02, _var01
2d714     01 02 06 F5 | 	and	_var02, #1
2d718     1F 02 66 F0 | 	shl	_var02, #31
2d71c     01 15 42 F5 | 	or	arg02, _var02
2d720     09 15 42 F5 | 	or	arg02, arg01
2d724     01 00 46 F0 | 	shr	_var01, #1
2d728     C4 FF 9F FD | 	jmp	#LR__4301
2d72c                 | LR__4302
2d72c                 | LR__4303
2d72c     00 16 56 F2 | 	cmps	arg03, #0 wc
2d730     18 00 90 3D |  if_ae	jmp	#LR__4305
2d734     00 14 0E F2 | 	cmp	arg02, #0 wz
2d738     6F 14 62 FD | 	wrnz	arg02
2d73c     0C 00 90 FD | 	jmp	#LR__4305
2d740                 | LR__4304
2d740     17 01 06 F4 | 	bitl	_var01, #279
2d744     17 16 66 F0 | 	shl	arg03, #23
2d748     0B 01 42 F5 | 	or	_var01, arg03
2d74c                 | LR__4305
2d74c                 | LR__4306
2d74c                 | LR__4307
2d74c                 | LR__4308
2d74c                 | LR__4309
2d74c     01 00 CE F7 | 	test	_var01, #1 wz
2d750     01 14 46 55 |  if_ne	or	arg02, #1
2d754     0A 17 02 F6 | 	mov	arg03, arg02
2d758     00 02 06 F6 | 	mov	_var02, #0
2d75c     FF FF 3F FF 
2d760     FF 15 06 F1 | 	add	arg02, ##2147483647
2d764     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2d768     01 02 06 C6 |  if_b	mov	_var02, #1
2d76c     01 01 02 F1 | 	add	_var01, _var02
2d770     01 18 CE F7 | 	test	arg04, #1 wz
2d774     1F 00 26 54 |  if_ne	bith	_var01, #31
2d778     00 FB 01 F6 | 	mov	result1, _var01
2d77c                 | __system__pack_0691_ret
2d77c     2D 00 64 FD | 	ret
2d780                 | 
2d780                 | __system___rxtxioctl_0781
2d780     00 15 0E F2 | 	cmp	arg02, #256 wz
2d784     0C 00 90 AD |  if_e	jmp	#LR__4310
2d788     01 15 0E F2 | 	cmp	arg02, #257 wz
2d78c     1C 00 90 AD |  if_e	jmp	#LR__4311
2d790     30 00 90 FD | 	jmp	#LR__4312
2d794                 | LR__4310
2d794     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2d798     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2d79c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2d7a0     0B FB 61 FC | 	wrlong	result1, arg03
2d7a4     00 FA 05 F6 | 	mov	result1, #0
2d7a8     28 00 90 FD | 	jmp	#LR__4313
2d7ac                 | LR__4311
2d7ac     0B 13 02 FB | 	rdlong	arg01, arg03
2d7b0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2d7b4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d7b8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2d7bc     00 FA 05 F6 | 	mov	result1, #0
2d7c0     10 00 90 FD | 	jmp	#LR__4313
2d7c4                 | LR__4312
2d7c4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d7c8     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2d7cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d7d0     01 FA 65 F6 | 	neg	result1, #1
2d7d4                 | LR__4313
2d7d4                 | __system___rxtxioctl_0781_ret
2d7d4     2D 00 64 FD | 	ret
2d7d8                 | 
2d7d8                 | __system____dummy_flush_0782
2d7d8     00 FA 05 F6 | 	mov	result1, #0
2d7dc                 | __system____dummy_flush_0782_ret
2d7dc     2D 00 64 FD | 	ret
2d7e0                 | 
2d7e0                 | __system___vfswrite
2d7e0     09 4A 05 F6 | 	mov	COUNT_, #9
2d7e4     A8 00 A0 FD | 	call	#pushregs_
2d7e8     09 27 02 F6 | 	mov	local01, arg01
2d7ec     0A 29 02 F6 | 	mov	local02, arg02
2d7f0     0B 2B 02 F6 | 	mov	local03, arg03
2d7f4     14 2D 02 F6 | 	mov	local04, local02
2d7f8     08 26 06 F1 | 	add	local01, #8
2d7fc     13 13 02 FB | 	rdlong	arg01, local01
2d800     08 26 86 F1 | 	sub	local01, #8
2d804     02 12 CE F7 | 	test	arg01, #2 wz
2d808     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d80c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d810     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d814     01 FA 65 A6 |  if_e	neg	result1, #1
2d818     80 01 90 AD |  if_e	jmp	#LR__4326
2d81c     08 26 06 F1 | 	add	local01, #8
2d820     13 FB 01 FB | 	rdlong	result1, local01
2d824     08 26 86 F1 | 	sub	local01, #8
2d828     40 FA CD F7 | 	test	result1, #64 wz
2d82c     68 00 90 AD |  if_e	jmp	#LR__4321
2d830     08 26 06 F1 | 	add	local01, #8
2d834     13 15 02 FB | 	rdlong	arg02, local01
2d838     08 26 86 F1 | 	sub	local01, #8
2d83c     80 14 CE F7 | 	test	arg02, #128 wz
2d840     54 00 90 AD |  if_e	jmp	#LR__4320
2d844     30 26 06 F1 | 	add	local01, #48
2d848     13 2F 02 FB | 	rdlong	local05, local01
2d84c     17 31 02 F6 | 	mov	local06, local05
2d850     30 26 86 F1 | 	sub	local01, #48
2d854     13 30 46 F7 | 	zerox	local06, #19
2d858     14 2E 46 F0 | 	shr	local05, #20
2d85c     02 2E 66 F0 | 	shl	local05, #2
2d860     ED 2E 02 F1 | 	add	local05, __methods__
2d864     17 2F 02 FB | 	rdlong	local05, local05
2d868     13 13 02 F6 | 	mov	arg01, local01
2d86c     00 14 06 F6 | 	mov	arg02, #0
2d870     02 16 06 F6 | 	mov	arg03, #2
2d874     F2 32 02 F6 | 	mov	local07, objptr
2d878     18 E5 01 F6 | 	mov	objptr, local06
2d87c     2D 2E 62 FD | 	call	local05
2d880     19 E5 01 F6 | 	mov	objptr, local07
2d884     08 26 06 F1 | 	add	local01, #8
2d888     13 33 02 FB | 	rdlong	local07, local01
2d88c     80 32 26 F5 | 	andn	local07, #128
2d890     13 33 62 FC | 	wrlong	local07, local01
2d894     08 26 86 F1 | 	sub	local01, #8
2d898                 | LR__4320
2d898                 | LR__4321
2d898     18 26 06 F1 | 	add	local01, #24
2d89c     13 33 0A FB | 	rdlong	local07, local01 wz
2d8a0     18 26 86 F1 | 	sub	local01, #24
2d8a4     80 00 90 AD |  if_e	jmp	#LR__4323
2d8a8     18 26 06 F1 | 	add	local01, #24
2d8ac     13 2F 02 FB | 	rdlong	local05, local01
2d8b0     17 31 02 F6 | 	mov	local06, local05
2d8b4     18 26 86 F1 | 	sub	local01, #24
2d8b8     13 30 46 F7 | 	zerox	local06, #19
2d8bc     14 2E 46 F0 | 	shr	local05, #20
2d8c0     02 2E 66 F0 | 	shl	local05, #2
2d8c4     ED 2E 02 F1 | 	add	local05, __methods__
2d8c8     17 2F 02 FB | 	rdlong	local05, local05
2d8cc     14 15 02 F6 | 	mov	arg02, local02
2d8d0     15 17 02 F6 | 	mov	arg03, local03
2d8d4     13 13 02 F6 | 	mov	arg01, local01
2d8d8     F2 32 02 F6 | 	mov	local07, objptr
2d8dc     18 E5 01 F6 | 	mov	objptr, local06
2d8e0     2D 2E 62 FD | 	call	local05
2d8e4     19 E5 01 F6 | 	mov	objptr, local07
2d8e8     FD 34 02 F6 | 	mov	local08, result1
2d8ec     00 34 56 F2 | 	cmps	local08, #0 wc
2d8f0     2C 00 90 3D |  if_ae	jmp	#LR__4322
2d8f4     08 26 06 F1 | 	add	local01, #8
2d8f8     13 33 02 FB | 	rdlong	local07, local01
2d8fc     20 32 46 F5 | 	or	local07, #32
2d900     13 33 62 FC | 	wrlong	local07, local01
2d904     00 34 4E F2 | 	cmps	local08, #0 wz
2d908     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d90c     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2d910     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d914     01 FA 65 56 |  if_ne	neg	result1, #1
2d918     00 FA 05 A6 |  if_e	mov	result1, #0
2d91c     7C 00 90 FD | 	jmp	#LR__4326
2d920                 | LR__4322
2d920     1A FB 01 F6 | 	mov	result1, local08
2d924     74 00 90 FD | 	jmp	#LR__4326
2d928                 | LR__4323
2d928     1C 26 06 F1 | 	add	local01, #28
2d92c     13 37 0A FB | 	rdlong	local09, local01 wz
2d930     1C 26 86 F1 | 	sub	local01, #28
2d934     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d938     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d93c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d940     01 FA 65 A6 |  if_e	neg	result1, #1
2d944     54 00 90 AD |  if_e	jmp	#LR__4326
2d948     00 34 06 F6 | 	mov	local08, #0
2d94c                 | LR__4324
2d94c     01 2A 16 F2 | 	cmp	local03, #1 wc
2d950     44 00 90 CD |  if_b	jmp	#LR__4325
2d954     1B 31 02 F6 | 	mov	local06, local09
2d958     1B 2F 02 F6 | 	mov	local05, local09
2d95c     13 30 46 F7 | 	zerox	local06, #19
2d960     14 2E 46 F0 | 	shr	local05, #20
2d964     02 2E 66 F0 | 	shl	local05, #2
2d968     ED 2E 02 F1 | 	add	local05, __methods__
2d96c     17 2F 02 FB | 	rdlong	local05, local05
2d970     16 13 C2 FA | 	rdbyte	arg01, local04
2d974     13 15 02 F6 | 	mov	arg02, local01
2d978     F2 32 02 F6 | 	mov	local07, objptr
2d97c     18 E5 01 F6 | 	mov	objptr, local06
2d980     01 2C 06 F1 | 	add	local04, #1
2d984     2D 2E 62 FD | 	call	local05
2d988     19 E5 01 F6 | 	mov	objptr, local07
2d98c     FD 34 02 F1 | 	add	local08, result1
2d990     01 2A 86 F1 | 	sub	local03, #1
2d994     B4 FF 9F FD | 	jmp	#LR__4324
2d998                 | LR__4325
2d998     1A FB 01 F6 | 	mov	result1, local08
2d99c                 | LR__4326
2d99c     A7 F0 03 F6 | 	mov	ptra, fp
2d9a0     B2 00 A0 FD | 	call	#popregs_
2d9a4                 | __system___vfswrite_ret
2d9a4     2D 00 64 FD | 	ret
2d9a8                 | 
2d9a8                 | __system___vfsread
2d9a8     03 4A 05 F6 | 	mov	COUNT_, #3
2d9ac     A8 00 A0 FD | 	call	#pushregs_
2d9b0     28 F0 07 F1 | 	add	ptra, #40
2d9b4     04 4E 05 F1 | 	add	fp, #4
2d9b8     A7 12 62 FC | 	wrlong	arg01, fp
2d9bc     04 4E 05 F1 | 	add	fp, #4
2d9c0     A7 14 62 FC | 	wrlong	arg02, fp
2d9c4     04 4E 05 F1 | 	add	fp, #4
2d9c8     A7 16 62 FC | 	wrlong	arg03, fp
2d9cc     04 4E 85 F1 | 	sub	fp, #4
2d9d0     A7 FA 01 FB | 	rdlong	result1, fp
2d9d4     14 4E 05 F1 | 	add	fp, #20
2d9d8     A7 FA 61 FC | 	wrlong	result1, fp
2d9dc     04 4E 05 F1 | 	add	fp, #4
2d9e0     A7 00 68 FC | 	wrlong	#0, fp
2d9e4     1C 4E 85 F1 | 	sub	fp, #28
2d9e8     A7 12 02 FB | 	rdlong	arg01, fp
2d9ec     04 4E 85 F1 | 	sub	fp, #4
2d9f0     08 12 06 F1 | 	add	arg01, #8
2d9f4     09 FB 01 FB | 	rdlong	result1, arg01
2d9f8     01 FA CD F7 | 	test	result1, #1 wz
2d9fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2da00     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2da04     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2da08     01 FA 65 A6 |  if_e	neg	result1, #1
2da0c     74 02 90 AD |  if_e	jmp	#LR__4336
2da10     04 4E 05 F1 | 	add	fp, #4
2da14     A7 12 02 FB | 	rdlong	arg01, fp
2da18     04 4E 85 F1 | 	sub	fp, #4
2da1c     14 12 06 F1 | 	add	arg01, #20
2da20     09 FB 09 FB | 	rdlong	result1, arg01 wz
2da24     B8 00 90 AD |  if_e	jmp	#LR__4331
2da28     04 4E 05 F1 | 	add	fp, #4
2da2c     A7 12 02 FB | 	rdlong	arg01, fp
2da30     09 17 02 F6 | 	mov	arg03, arg01
2da34     14 16 06 F1 | 	add	arg03, #20
2da38     0B 27 02 FB | 	rdlong	local01, arg03
2da3c     13 29 02 F6 | 	mov	local02, local01
2da40     13 26 46 F7 | 	zerox	local01, #19
2da44     14 28 46 F0 | 	shr	local02, #20
2da48     02 28 66 F0 | 	shl	local02, #2
2da4c     ED 28 02 F1 | 	add	local02, __methods__
2da50     14 29 02 FB | 	rdlong	local02, local02
2da54     04 4E 05 F1 | 	add	fp, #4
2da58     A7 14 02 FB | 	rdlong	arg02, fp
2da5c     04 4E 05 F1 | 	add	fp, #4
2da60     A7 16 02 FB | 	rdlong	arg03, fp
2da64     0C 4E 85 F1 | 	sub	fp, #12
2da68     F2 2A 02 F6 | 	mov	local03, objptr
2da6c     13 E5 01 F6 | 	mov	objptr, local01
2da70     2D 28 62 FD | 	call	local02
2da74     15 E5 01 F6 | 	mov	objptr, local03
2da78     10 4E 05 F1 | 	add	fp, #16
2da7c     A7 FA 61 FC | 	wrlong	result1, fp
2da80     10 4E 85 F1 | 	sub	fp, #16
2da84     00 FA 55 F2 | 	cmps	result1, #0 wc
2da88     44 00 90 3D |  if_ae	jmp	#LR__4330
2da8c     04 4E 05 F1 | 	add	fp, #4
2da90     A7 2A 02 FB | 	rdlong	local03, fp
2da94     15 27 02 F6 | 	mov	local01, local03
2da98     08 2A 06 F1 | 	add	local03, #8
2da9c     15 29 02 FB | 	rdlong	local02, local03
2daa0     20 28 46 F5 | 	or	local02, #32
2daa4     08 26 06 F1 | 	add	local01, #8
2daa8     13 29 62 FC | 	wrlong	local02, local01
2daac     0C 4E 05 F1 | 	add	fp, #12
2dab0     A7 12 0A FB | 	rdlong	arg01, fp wz
2dab4     10 4E 85 F1 | 	sub	fp, #16
2dab8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2dabc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2dac0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2dac4     01 FA 65 56 |  if_ne	neg	result1, #1
2dac8     00 FA 05 A6 |  if_e	mov	result1, #0
2dacc     B4 01 90 FD | 	jmp	#LR__4336
2dad0                 | LR__4330
2dad0     10 4E 05 F1 | 	add	fp, #16
2dad4     A7 FA 01 FB | 	rdlong	result1, fp
2dad8     10 4E 85 F1 | 	sub	fp, #16
2dadc     A4 01 90 FD | 	jmp	#LR__4336
2dae0                 | LR__4331
2dae0     04 4E 05 F1 | 	add	fp, #4
2dae4     A7 12 02 FB | 	rdlong	arg01, fp
2dae8     20 12 06 F1 | 	add	arg01, #32
2daec     09 13 0A FB | 	rdlong	arg01, arg01 wz
2daf0     14 4E 05 F1 | 	add	fp, #20
2daf4     A7 12 62 FC | 	wrlong	arg01, fp
2daf8     18 4E 85 F1 | 	sub	fp, #24
2dafc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2db00     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2db04     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2db08     01 FA 65 A6 |  if_e	neg	result1, #1
2db0c     74 01 90 AD |  if_e	jmp	#LR__4336
2db10     04 4E 05 F1 | 	add	fp, #4
2db14     A7 2A 02 FB | 	rdlong	local03, fp
2db18     04 4E 85 F1 | 	sub	fp, #4
2db1c     28 2A 06 F1 | 	add	local03, #40
2db20     15 29 0A FB | 	rdlong	local02, local03 wz
2db24     7C 00 90 AD |  if_e	jmp	#LR__4333
2db28     04 4E 05 F1 | 	add	fp, #4
2db2c     A7 12 02 FB | 	rdlong	arg01, fp
2db30     09 2B 02 F6 | 	mov	local03, arg01
2db34     28 2A 06 F1 | 	add	local03, #40
2db38     15 27 02 FB | 	rdlong	local01, local03
2db3c     13 29 02 F6 | 	mov	local02, local01
2db40     13 26 46 F7 | 	zerox	local01, #19
2db44     14 28 46 F0 | 	shr	local02, #20
2db48     02 28 66 F0 | 	shl	local02, #2
2db4c     ED 28 02 F1 | 	add	local02, __methods__
2db50     14 29 02 FB | 	rdlong	local02, local02
2db54     20 4E 05 F1 | 	add	fp, #32
2db58     A7 16 02 F6 | 	mov	arg03, fp
2db5c     24 4E 85 F1 | 	sub	fp, #36
2db60     00 15 06 F6 | 	mov	arg02, #256
2db64     F2 2A 02 F6 | 	mov	local03, objptr
2db68     13 E5 01 F6 | 	mov	objptr, local01
2db6c     2D 28 62 FD | 	call	local02
2db70     15 E5 01 F6 | 	mov	objptr, local03
2db74     10 4E 05 F1 | 	add	fp, #16
2db78     A7 FA 61 FC | 	wrlong	result1, fp
2db7c     00 FA 4D F2 | 	cmps	result1, #0 wz
2db80     10 4E 85 F1 | 	sub	fp, #16
2db84     1C 00 90 5D |  if_ne	jmp	#LR__4332
2db88     24 4E 05 F1 | 	add	fp, #36
2db8c     A7 28 02 FB | 	rdlong	local02, fp
2db90     24 4E 85 F1 | 	sub	fp, #36
2db94     02 28 CE F7 | 	test	local02, #2 wz
2db98     20 4E 05 51 |  if_ne	add	fp, #32
2db9c     A7 02 68 5C |  if_ne	wrlong	#1, fp
2dba0     20 4E 85 51 |  if_ne	sub	fp, #32
2dba4                 | LR__4332
2dba4                 | LR__4333
2dba4     10 4E 05 F1 | 	add	fp, #16
2dba8     A7 00 68 FC | 	wrlong	#0, fp
2dbac     10 4E 85 F1 | 	sub	fp, #16
2dbb0                 | LR__4334
2dbb0     0C 4E 05 F1 | 	add	fp, #12
2dbb4     A7 2A 02 FB | 	rdlong	local03, fp
2dbb8     0C 4E 85 F1 | 	sub	fp, #12
2dbbc     01 2A 16 F2 | 	cmp	local03, #1 wc
2dbc0     B4 00 90 CD |  if_b	jmp	#LR__4335
2dbc4     18 4E 05 F1 | 	add	fp, #24
2dbc8     A7 28 02 FB | 	rdlong	local02, fp
2dbcc     14 2B 02 F6 | 	mov	local03, local02
2dbd0     13 2A 46 F7 | 	zerox	local03, #19
2dbd4     14 28 46 F0 | 	shr	local02, #20
2dbd8     02 28 66 F0 | 	shl	local02, #2
2dbdc     ED 28 02 F1 | 	add	local02, __methods__
2dbe0     14 29 02 FB | 	rdlong	local02, local02
2dbe4     14 4E 85 F1 | 	sub	fp, #20
2dbe8     A7 12 02 FB | 	rdlong	arg01, fp
2dbec     04 4E 85 F1 | 	sub	fp, #4
2dbf0     F2 26 02 F6 | 	mov	local01, objptr
2dbf4     15 E5 01 F6 | 	mov	objptr, local03
2dbf8     2D 28 62 FD | 	call	local02
2dbfc     13 E5 01 F6 | 	mov	objptr, local01
2dc00     14 4E 05 F1 | 	add	fp, #20
2dc04     A7 FA 61 FC | 	wrlong	result1, fp
2dc08     14 4E 85 F1 | 	sub	fp, #20
2dc0c     00 FA 55 F2 | 	cmps	result1, #0 wc
2dc10     64 00 90 CD |  if_b	jmp	#LR__4335
2dc14     1C 4E 05 F1 | 	add	fp, #28
2dc18     A7 2A 02 FB | 	rdlong	local03, fp
2dc1c     15 29 02 F6 | 	mov	local02, local03
2dc20     01 28 06 F1 | 	add	local02, #1
2dc24     A7 28 62 FC | 	wrlong	local02, fp
2dc28     08 4E 85 F1 | 	sub	fp, #8
2dc2c     A7 28 02 FB | 	rdlong	local02, fp
2dc30     15 29 42 FC | 	wrbyte	local02, local03
2dc34     04 4E 85 F1 | 	sub	fp, #4
2dc38     A7 2A 02 FB | 	rdlong	local03, fp
2dc3c     01 2A 06 F1 | 	add	local03, #1
2dc40     A7 2A 62 FC | 	wrlong	local03, fp
2dc44     04 4E 85 F1 | 	sub	fp, #4
2dc48     A7 2A 02 FB | 	rdlong	local03, fp
2dc4c     01 2A 86 F1 | 	sub	local03, #1
2dc50     A7 2A 62 FC | 	wrlong	local03, fp
2dc54     14 4E 05 F1 | 	add	fp, #20
2dc58     A7 2A 0A FB | 	rdlong	local03, fp wz
2dc5c     20 4E 85 F1 | 	sub	fp, #32
2dc60     4C FF 9F AD |  if_e	jmp	#LR__4334
2dc64     14 4E 05 F1 | 	add	fp, #20
2dc68     A7 28 02 FB | 	rdlong	local02, fp
2dc6c     14 4E 85 F1 | 	sub	fp, #20
2dc70     0A 28 0E F2 | 	cmp	local02, #10 wz
2dc74     38 FF 9F 5D |  if_ne	jmp	#LR__4334
2dc78                 | LR__4335
2dc78     10 4E 05 F1 | 	add	fp, #16
2dc7c     A7 FA 01 FB | 	rdlong	result1, fp
2dc80     10 4E 85 F1 | 	sub	fp, #16
2dc84                 | LR__4336
2dc84     A7 F0 03 F6 | 	mov	ptra, fp
2dc88     B2 00 A0 FD | 	call	#popregs_
2dc8c                 | __system___vfsread_ret
2dc8c     2D 00 64 FD | 	ret
2dc90                 | 
2dc90                 | __system____default_filbuf
2dc90     04 4A 05 F6 | 	mov	COUNT_, #4
2dc94     A8 00 A0 FD | 	call	#pushregs_
2dc98     09 27 02 F6 | 	mov	local01, arg01
2dc9c     13 29 02 FB | 	rdlong	local02, local01
2dca0     0C 28 06 F1 | 	add	local02, #12
2dca4     14 FB 09 FB | 	rdlong	result1, local02 wz
2dca8     0C 28 86 F1 | 	sub	local02, #12
2dcac     20 00 90 5D |  if_ne	jmp	#LR__4340
2dcb0     14 28 06 F1 | 	add	local02, #20
2dcb4     14 FB 01 F6 | 	mov	result1, local02
2dcb8     04 28 86 F1 | 	sub	local02, #4
2dcbc     14 FB 61 FC | 	wrlong	result1, local02
2dcc0     04 28 86 F1 | 	sub	local02, #4
2dcc4     02 00 80 FF 
2dcc8     14 01 68 FC | 	wrlong	##1024, local02
2dccc     0C 28 86 F1 | 	sub	local02, #12
2dcd0                 | LR__4340
2dcd0     14 26 06 F1 | 	add	local01, #20
2dcd4     13 2B 02 FB | 	rdlong	local03, local01
2dcd8     15 2D 02 F6 | 	mov	local04, local03
2dcdc     14 26 86 F1 | 	sub	local01, #20
2dce0     13 2C 46 F7 | 	zerox	local04, #19
2dce4     14 2A 46 F0 | 	shr	local03, #20
2dce8     02 2A 66 F0 | 	shl	local03, #2
2dcec     ED 2A 02 F1 | 	add	local03, __methods__
2dcf0     15 2B 02 FB | 	rdlong	local03, local03
2dcf4     10 28 06 F1 | 	add	local02, #16
2dcf8     14 15 02 FB | 	rdlong	arg02, local02
2dcfc     04 28 86 F1 | 	sub	local02, #4
2dd00     14 17 02 FB | 	rdlong	arg03, local02
2dd04     0C 28 86 F1 | 	sub	local02, #12
2dd08     13 13 02 F6 | 	mov	arg01, local01
2dd0c     F2 26 02 F6 | 	mov	local01, objptr
2dd10     16 E5 01 F6 | 	mov	objptr, local04
2dd14     2D 2A 62 FD | 	call	local03
2dd18     13 E5 01 F6 | 	mov	objptr, local01
2dd1c     FD 2C 02 F6 | 	mov	local04, result1
2dd20     00 2C 56 F2 | 	cmps	local04, #0 wc
2dd24     01 FA 65 C6 |  if_b	neg	result1, #1
2dd28     28 00 90 CD |  if_b	jmp	#LR__4341
2dd2c     14 2D 62 FC | 	wrlong	local04, local02
2dd30     10 28 06 F1 | 	add	local02, #16
2dd34     14 2B 02 FB | 	rdlong	local03, local02
2dd38     0C 28 86 F1 | 	sub	local02, #12
2dd3c     14 2B 62 FC | 	wrlong	local03, local02
2dd40     04 28 06 F1 | 	add	local02, #4
2dd44     14 2B 02 FB | 	rdlong	local03, local02
2dd48     01 2A 46 F5 | 	or	local03, #1
2dd4c     14 2B 62 FC | 	wrlong	local03, local02
2dd50     16 FB 01 F6 | 	mov	result1, local04
2dd54                 | LR__4341
2dd54     A7 F0 03 F6 | 	mov	ptra, fp
2dd58     B2 00 A0 FD | 	call	#popregs_
2dd5c                 | __system____default_filbuf_ret
2dd5c     2D 00 64 FD | 	ret
2dd60                 | 
2dd60                 | __system__getlower_1171
2dd60     41 12 56 F2 | 	cmps	arg01, #65 wc
2dd64     10 00 90 CD |  if_b	jmp	#LR__4350
2dd68     5B 12 56 F2 | 	cmps	arg01, #91 wc
2dd6c     09 FB 01 C6 |  if_b	mov	result1, arg01
2dd70     20 FA 05 C1 |  if_b	add	result1, #32
2dd74     04 00 90 CD |  if_b	jmp	#__system__getlower_1171_ret
2dd78                 | LR__4350
2dd78     09 FB 01 F6 | 	mov	result1, arg01
2dd7c                 | __system__getlower_1171_ret
2dd7c     2D 00 64 FD | 	ret
2dd80                 | 
2dd80                 | __system___pat_match
2dd80     08 4A 05 F6 | 	mov	COUNT_, #8
2dd84     A8 00 A0 FD | 	call	#pushregs_
2dd88     09 27 02 F6 | 	mov	local01, arg01
2dd8c                 | LR__4360
2dd8c     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2dd90     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2dd94     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2dd98     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2dd9c     2C 00 90 AD |  if_e	jmp	#LR__4361
2dda0     0A 13 C2 FA | 	rdbyte	arg01, arg02
2dda4     B8 FF BF FD | 	call	#__system__getlower_1171
2dda8     FD 2A 02 F6 | 	mov	local03, result1
2ddac     13 13 C2 FA | 	rdbyte	arg01, local01
2ddb0     AC FF BF FD | 	call	#__system__getlower_1171
2ddb4     15 FB 09 F2 | 	cmp	result1, local03 wz
2ddb8     00 FA 05 56 |  if_ne	mov	result1, #0
2ddbc     FC 00 90 5D |  if_ne	jmp	#LR__4369
2ddc0     01 26 06 F1 | 	add	local01, #1
2ddc4     01 14 06 F1 | 	add	arg02, #1
2ddc8     C0 FF 9F FD | 	jmp	#LR__4360
2ddcc                 | LR__4361
2ddcc     0A 2B C2 FA | 	rdbyte	local03, arg02
2ddd0     2A 2A 0E F2 | 	cmp	local03, #42 wz
2ddd4     D4 00 90 5D |  if_ne	jmp	#LR__4368
2ddd8     01 14 06 F1 | 	add	arg02, #1
2dddc     0A 29 C2 FA | 	rdbyte	local02, arg02
2dde0     01 14 86 F1 | 	sub	arg02, #1
2dde4     2E 28 0E F2 | 	cmp	local02, #46 wz
2dde8     28 00 90 5D |  if_ne	jmp	#LR__4362
2ddec     02 14 06 F1 | 	add	arg02, #2
2ddf0     0A 29 C2 FA | 	rdbyte	local02, arg02
2ddf4     02 14 86 F1 | 	sub	arg02, #2
2ddf8     2A 28 0E F2 | 	cmp	local02, #42 wz
2ddfc     03 14 06 A1 |  if_e	add	arg02, #3
2de00     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2de04     03 14 86 A1 |  if_e	sub	arg02, #3
2de08     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2de0c     01 FA 05 A6 |  if_e	mov	result1, #1
2de10     A8 00 90 AD |  if_e	jmp	#LR__4369
2de14                 | LR__4362
2de14     01 14 06 F1 | 	add	arg02, #1
2de18     00 30 06 F6 | 	mov	local06, #0
2de1c     97 1E 48 FB | 	callpa	#(@LR__4365-@LR__4363)>>2,fcache_load_ptr_
2de20                 | LR__4363
2de20     18 33 02 F6 | 	mov	local07, local06
2de24     0A 33 02 F1 | 	add	local07, arg02
2de28     19 33 CA FA | 	rdbyte	local07, local07 wz
2de2c     18 2F 02 56 |  if_ne	mov	local05, local06
2de30     01 2E 06 51 |  if_ne	add	local05, #1
2de34     17 31 02 56 |  if_ne	mov	local06, local05
2de38     E4 FF 9F 5D |  if_ne	jmp	#LR__4363
2de3c     00 34 06 F6 | 	mov	local08, #0
2de40                 | LR__4364
2de40     1A 33 02 F6 | 	mov	local07, local08
2de44     13 33 02 F1 | 	add	local07, local01
2de48     19 33 CA FA | 	rdbyte	local07, local07 wz
2de4c     1A 2F 02 56 |  if_ne	mov	local05, local08
2de50     01 2E 06 51 |  if_ne	add	local05, #1
2de54     17 35 02 56 |  if_ne	mov	local08, local05
2de58     E4 FF 9F 5D |  if_ne	jmp	#LR__4364
2de5c                 | LR__4365
2de5c     18 35 52 F2 | 	cmps	local08, local06 wc
2de60     00 FA 05 C6 |  if_b	mov	result1, #0
2de64     54 00 90 CD |  if_b	jmp	#LR__4369
2de68     1A 29 02 F6 | 	mov	local02, local08
2de6c     18 29 82 F1 | 	sub	local02, local06
2de70     14 27 02 F1 | 	add	local01, local02
2de74                 | LR__4366
2de74     01 30 56 F2 | 	cmps	local06, #1 wc
2de78     30 00 90 CD |  if_b	jmp	#LR__4367
2de7c     13 13 C2 FA | 	rdbyte	arg01, local01
2de80     DC FE BF FD | 	call	#__system__getlower_1171
2de84     FD 34 02 F6 | 	mov	local08, result1
2de88     0A 13 C2 FA | 	rdbyte	arg01, arg02
2de8c     D0 FE BF FD | 	call	#__system__getlower_1171
2de90     FD 34 0A F2 | 	cmp	local08, result1 wz
2de94     00 FA 05 56 |  if_ne	mov	result1, #0
2de98     20 00 90 5D |  if_ne	jmp	#LR__4369
2de9c     01 26 06 F1 | 	add	local01, #1
2dea0     01 14 06 F1 | 	add	arg02, #1
2dea4     01 30 86 F1 | 	sub	local06, #1
2dea8     C8 FF 9F FD | 	jmp	#LR__4366
2deac                 | LR__4367
2deac                 | LR__4368
2deac     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2deb0     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2deb4     01 FA 05 A6 |  if_e	mov	result1, #1
2deb8     00 FA 05 56 |  if_ne	mov	result1, #0
2debc                 | LR__4369
2debc     A7 F0 03 F6 | 	mov	ptra, fp
2dec0     B2 00 A0 FD | 	call	#popregs_
2dec4                 | __system___pat_match_ret
2dec4     2D 00 64 FD | 	ret
2dec8                 | 
2dec8                 | _fatfs_cc_ff_uni2oem
2dec8     00 00 06 F6 | 	mov	_var01, #0
2decc     80 12 16 F2 | 	cmp	arg01, #128 wc
2ded0     09 01 02 C6 |  if_b	mov	_var01, arg01
2ded4     58 00 90 CD |  if_b	jmp	#LR__4374
2ded8     80 00 00 FF 
2dedc     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2dee0     4C 00 90 3D |  if_ae	jmp	#LR__4373
2dee4     0A FB 31 F9 | 	getword	result1, arg02, #0
2dee8     01 00 00 FF 
2deec     52 FB 0D F2 | 	cmp	result1, ##850 wz
2def0     3C 00 90 5D |  if_ne	jmp	#LR__4373
2def4                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2def4     00 00 06 F6 | 	mov	_var01, #0
2def8     97 14 48 FB | 	callpa	#(@LR__4371-@LR__4370)>>2,fcache_load_ptr_
2defc                 | LR__4370
2defc     00 FB 31 F9 | 	getword	result1, _var01, #0
2df00     80 FA 15 F2 | 	cmp	result1, #128 wc
2df04     1C 00 90 3D |  if_ae	jmp	#LR__4372
2df08     00 FB 31 F9 | 	getword	result1, _var01, #0
2df0c     01 FA 65 F0 | 	shl	result1, #1
2df10     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2df14     FD FA E1 FA | 	rdword	result1, result1
2df18     FD 12 0A F2 | 	cmp	arg01, result1 wz
2df1c     01 00 06 51 |  if_ne	add	_var01, #1
2df20     D8 FF 9F 5D |  if_ne	jmp	#LR__4370
2df24                 | LR__4371
2df24                 | LR__4372
2df24     00 01 32 F9 | 	getword	_var01, _var01, #0
2df28     80 00 06 F1 | 	add	_var01, #128
2df2c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2df30                 | LR__4373
2df30                 | LR__4374
2df30                 | ' 			c = (c + 0x80) & 0xFF;
2df30                 | ' 		}
2df30                 | ' 	}
2df30                 | ' 
2df30                 | ' 	return c;
2df30     00 FB 01 F6 | 	mov	result1, _var01
2df34                 | _fatfs_cc_ff_uni2oem_ret
2df34     2D 00 64 FD | 	ret
2df38                 | 
2df38                 | _fatfs_cc_ff_oem2uni
2df38     00 00 06 F6 | 	mov	_var01, #0
2df3c     09 FB 31 F9 | 	getword	result1, arg01, #0
2df40     80 FA 15 F2 | 	cmp	result1, #128 wc
2df44     09 01 02 C6 |  if_b	mov	_var01, arg01
2df48     2C 00 90 CD |  if_b	jmp	#LR__4381
2df4c     0A 15 32 F9 | 	getword	arg02, arg02, #0
2df50     01 00 00 FF 
2df54     52 15 0E F2 | 	cmp	arg02, ##850 wz
2df58     1C 00 90 5D |  if_ne	jmp	#LR__4380
2df5c     09 FB 31 F9 | 	getword	result1, arg01, #0
2df60     00 FB 15 F2 | 	cmp	result1, #256 wc
2df64     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2df68     80 12 86 C1 |  if_b	sub	arg01, #128
2df6c     01 12 66 C0 |  if_b	shl	arg01, #1
2df70     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2df74     09 01 E2 CA |  if_b	rdword	_var01, arg01
2df78                 | LR__4380
2df78                 | LR__4381
2df78                 | ' 		}
2df78                 | ' 	}
2df78                 | ' 
2df78                 | ' 	return c;
2df78     00 FB 01 F6 | 	mov	result1, _var01
2df7c                 | _fatfs_cc_ff_oem2uni_ret
2df7c     2D 00 64 FD | 	ret
2df80                 | 
2df80                 | _fatfs_cc_ff_wtoupper
2df80     09 01 02 F6 | 	mov	_var01, arg01
2df84     80 00 00 FF 
2df88     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2df8c     60 01 90 3D |  if_ae	jmp	#LR__4403
2df90     00 03 02 F6 | 	mov	_var02, _var01
2df94     01 01 32 F9 | 	getword	_var01, _var02, #0
2df98     08 00 00 FF 
2df9c     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2dfa0     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2dfa4     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2dfa8     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2dfac     01 00 00 3F 
2dfb0     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2dfb4     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2dfb8     01 00 00 3F 
2dfbc     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2dfc0     02 07 02 F6 | 	mov	_var04, _var03
2dfc4                 | ' 		uc = (WORD)uni;
2dfc4                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2dfc4                 | ' 		for (;;) {
2dfc4                 | LR__4390
2dfc4     03 09 E2 FA | 	rdword	_var05, _var04
2dfc8     04 05 02 F6 | 	mov	_var03, _var05
2dfcc     0F 04 4E F7 | 	zerox	_var03, #15 wz
2dfd0     02 06 06 F1 | 	add	_var04, #2
2dfd4     14 01 90 AD |  if_e	jmp	#LR__4402
2dfd8     01 05 32 F9 | 	getword	_var03, _var02, #0
2dfdc     04 01 32 F9 | 	getword	_var01, _var05, #0
2dfe0     00 05 12 F2 | 	cmp	_var03, _var01 wc
2dfe4     04 01 90 CD |  if_b	jmp	#LR__4402
2dfe8     03 0B E2 FA | 	rdword	_var06, _var04
2dfec     05 0D 32 F9 | 	getword	_var07, _var06, #0
2dff0     08 0C 46 F0 | 	shr	_var07, #8
2dff4     05 0B 32 F9 | 	getword	_var06, _var06, #0
2dff8     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2dffc     01 05 32 F9 | 	getword	_var03, _var02, #0
2e000     04 0F 32 F9 | 	getword	_var08, _var05, #0
2e004     05 01 32 F9 | 	getword	_var01, _var06, #0
2e008     00 0F 02 F1 | 	add	_var08, _var01
2e00c     07 05 52 F2 | 	cmps	_var03, _var08 wc
2e010     02 06 06 F1 | 	add	_var04, #2
2e014     C4 00 90 3D |  if_ae	jmp	#LR__4401
2e018                 | ' 				switch (cmd) {
2e018     06 11 32 F9 | 	getword	_var09, _var07, #0
2e01c     09 10 26 F3 | 	fle	_var09, #9
2e020     30 10 62 FD | 	jmprel	_var09
2e024                 | LR__4391
2e024     24 00 90 FD | 	jmp	#LR__4392
2e028     3C 00 90 FD | 	jmp	#LR__4393
2e02c     54 00 90 FD | 	jmp	#LR__4394
2e030     5C 00 90 FD | 	jmp	#LR__4395
2e034     64 00 90 FD | 	jmp	#LR__4396
2e038     6C 00 90 FD | 	jmp	#LR__4397
2e03c     74 00 90 FD | 	jmp	#LR__4398
2e040     7C 00 90 FD | 	jmp	#LR__4399
2e044     84 00 90 FD | 	jmp	#LR__4400
2e048     A0 00 90 FD | 	jmp	#LR__4402
2e04c                 | LR__4392
2e04c     01 03 32 F9 | 	getword	_var02, _var02, #0
2e050     04 09 32 F9 | 	getword	_var05, _var05, #0
2e054     04 03 82 F1 | 	sub	_var02, _var05
2e058     01 02 66 F0 | 	shl	_var02, #1
2e05c     03 03 02 F1 | 	add	_var02, _var04
2e060     01 03 E2 FA | 	rdword	_var02, _var02
2e064     84 00 90 FD | 	jmp	#LR__4402
2e068                 | LR__4393
2e068     01 05 32 F9 | 	getword	_var03, _var02, #0
2e06c     01 03 32 F9 | 	getword	_var02, _var02, #0
2e070     04 09 32 F9 | 	getword	_var05, _var05, #0
2e074     04 03 82 F1 | 	sub	_var02, _var05
2e078     01 02 06 F5 | 	and	_var02, #1
2e07c     02 03 C2 F2 | 	subr	_var02, _var03
2e080     68 00 90 FD | 	jmp	#LR__4402
2e084                 | LR__4394
2e084     01 03 32 F9 | 	getword	_var02, _var02, #0
2e088     10 02 86 F1 | 	sub	_var02, #16
2e08c     5C 00 90 FD | 	jmp	#LR__4402
2e090                 | LR__4395
2e090     01 03 32 F9 | 	getword	_var02, _var02, #0
2e094     20 02 86 F1 | 	sub	_var02, #32
2e098     50 00 90 FD | 	jmp	#LR__4402
2e09c                 | LR__4396
2e09c     01 03 32 F9 | 	getword	_var02, _var02, #0
2e0a0     30 02 86 F1 | 	sub	_var02, #48
2e0a4     44 00 90 FD | 	jmp	#LR__4402
2e0a8                 | LR__4397
2e0a8     01 03 32 F9 | 	getword	_var02, _var02, #0
2e0ac     1A 02 86 F1 | 	sub	_var02, #26
2e0b0     38 00 90 FD | 	jmp	#LR__4402
2e0b4                 | LR__4398
2e0b4     01 03 32 F9 | 	getword	_var02, _var02, #0
2e0b8     08 02 06 F1 | 	add	_var02, #8
2e0bc     2C 00 90 FD | 	jmp	#LR__4402
2e0c0                 | LR__4399
2e0c0     01 03 32 F9 | 	getword	_var02, _var02, #0
2e0c4     50 02 86 F1 | 	sub	_var02, #80
2e0c8     20 00 90 FD | 	jmp	#LR__4402
2e0cc                 | LR__4400
2e0cc     01 03 32 F9 | 	getword	_var02, _var02, #0
2e0d0     0E 00 00 FF 
2e0d4     60 02 86 F1 | 	sub	_var02, ##7264
2e0d8                 | ' 				}
2e0d8                 | ' 				break;
2e0d8     10 00 90 FD | 	jmp	#LR__4402
2e0dc                 | LR__4401
2e0dc     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2e0e0     02 0A 06 AA |  if_e	mul	_var06, #2
2e0e4     05 07 02 A1 |  if_e	add	_var04, _var06
2e0e8     D8 FE 9F FD | 	jmp	#LR__4390
2e0ec                 | LR__4402
2e0ec     01 01 32 F9 | 	getword	_var01, _var02, #0
2e0f0                 | LR__4403
2e0f0                 | ' 		}
2e0f0                 | ' 		uni = uc;
2e0f0                 | ' 	}
2e0f0                 | ' 
2e0f0                 | ' 	return uni;
2e0f0     00 FB 01 F6 | 	mov	result1, _var01
2e0f4                 | _fatfs_cc_ff_wtoupper_ret
2e0f4     2D 00 64 FD | 	ret
2e0f8                 | 
2e0f8                 | _fatfs_cc_strncpy
2e0f8     09 01 02 F6 | 	mov	_var01, arg01
2e0fc     97 12 48 FB | 	callpa	#(@LR__4411-@LR__4410)>>2,fcache_load_ptr_
2e100                 | ' 
2e100                 | ' 	dscan = dst;
2e100                 | ' 	sscan = src;
2e100                 | ' 	count = n;
2e100                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2e100                 | LR__4410
2e100     01 16 86 F1 | 	sub	arg03, #1
2e104     00 16 56 F2 | 	cmps	arg03, #0 wc
2e108     18 00 90 CD |  if_b	jmp	#LR__4412
2e10c     0A FB C1 FA | 	rdbyte	result1, arg02
2e110     00 FB 41 FC | 	wrbyte	result1, _var01
2e114     01 14 06 F1 | 	add	arg02, #1
2e118     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2e11c                 | ' 		continue;
2e11c     01 00 06 F1 | 	add	_var01, #1
2e120     DC FF 9F 5D |  if_ne	jmp	#LR__4410
2e124                 | LR__4411
2e124                 | LR__4412
2e124     97 0C 48 FB | 	callpa	#(@LR__4414-@LR__4413)>>2,fcache_load_ptr_
2e128                 | ' 	while (--count >= 0)
2e128                 | LR__4413
2e128     01 16 86 F1 | 	sub	arg03, #1
2e12c     00 16 56 F2 | 	cmps	arg03, #0 wc
2e130     00 03 02 36 |  if_ae	mov	_var02, _var01
2e134     01 00 06 31 |  if_ae	add	_var01, #1
2e138     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2e13c     E8 FF 9F 3D |  if_ae	jmp	#LR__4413
2e140                 | LR__4414
2e140                 | ' 		*dscan++ = '\0';
2e140                 | ' 	return(dst);
2e140     09 FB 01 F6 | 	mov	result1, arg01
2e144                 | _fatfs_cc_strncpy_ret
2e144     2D 00 64 FD | 	ret
2e148                 | 
2e148                 | _fatfs_cc_memcmp
2e148                 | ' 	for (n = size; n > 0; n--)
2e148     00 16 0E F2 | 	cmp	arg03, #0 wz
2e14c     28 00 90 AD |  if_e	jmp	#LR__4421
2e150                 | LR__4420
2e150     09 01 C2 FA | 	rdbyte	_var01, arg01
2e154     0A 03 C2 FA | 	rdbyte	_var02, arg02
2e158     01 01 0A F2 | 	cmp	_var01, _var02 wz
2e15c     01 12 06 A1 |  if_e	add	arg01, #1
2e160     01 14 06 A1 |  if_e	add	arg02, #1
2e164                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2e164     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2e168     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2e16c     01 FB 81 51 |  if_ne	sub	result1, _var02
2e170     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2e174     F6 17 6E FB | 	djnz	arg03, #LR__4420
2e178                 | LR__4421
2e178                 | ' 
2e178                 | ' 	return(0);
2e178     00 FA 05 F6 | 	mov	result1, #0
2e17c                 | _fatfs_cc_memcmp_ret
2e17c     2D 00 64 FD | 	ret
2e180                 | 
2e180                 | _fatfs_cc_strncmp
2e180     09 01 0A F6 | 	mov	_var01, arg01 wz
2e184     14 00 90 5D |  if_ne	jmp	#LR__4430
2e188                 | ' 		return scan2 ? -1 : 0;
2e188     00 14 0E F2 | 	cmp	arg02, #0 wz
2e18c     01 02 66 56 |  if_ne	neg	_var02, #1
2e190     00 02 06 A6 |  if_e	mov	_var02, #0
2e194     01 FB 01 F6 | 	mov	result1, _var02
2e198     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2e19c                 | LR__4430
2e19c     00 14 0E F2 | 	cmp	arg02, #0 wz
2e1a0     01 FA 05 A6 |  if_e	mov	result1, #1
2e1a4     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2e1a8     0B 05 02 F6 | 	mov	_var03, arg03
2e1ac     97 16 48 FB | 	callpa	#(@LR__4432-@LR__4431)>>2,fcache_load_ptr_
2e1b0                 | ' 	count = n;
2e1b0                 | ' 	do {
2e1b0                 | LR__4431
2e1b0     00 07 C2 FA | 	rdbyte	_var04, _var01
2e1b4     0A 09 02 F6 | 	mov	_var05, arg02
2e1b8     04 0B C2 FA | 	rdbyte	_var06, _var05
2e1bc     01 04 86 F1 | 	sub	_var03, #1
2e1c0     00 04 56 F2 | 	cmps	_var03, #0 wc
2e1c4     01 00 06 F1 | 	add	_var01, #1
2e1c8     01 14 06 F1 | 	add	arg02, #1
2e1cc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2e1d0     08 00 90 2D |  if_nc_and_z	jmp	#LR__4433
2e1d4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2e1d8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4431
2e1dc                 | LR__4432
2e1dc                 | LR__4433
2e1dc     00 04 56 F2 | 	cmps	_var03, #0 wc
2e1e0                 | ' 		return(0);
2e1e0     00 FA 05 C6 |  if_b	mov	result1, #0
2e1e4     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2e1e8     05 07 0A F2 | 	cmp	_var04, _var06 wz
2e1ec                 | ' 		return(0);
2e1ec     00 FA 05 A6 |  if_e	mov	result1, #0
2e1f0     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2e1f4     00 06 0E F2 | 	cmp	_var04, #0 wz
2e1f8                 | ' 		return(-1);
2e1f8     01 FA 65 A6 |  if_e	neg	result1, #1
2e1fc     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2e200     00 0A 0E F2 | 	cmp	_var06, #0 wz
2e204                 | ' 		return(1);
2e204     01 FA 05 A6 |  if_e	mov	result1, #1
2e208                 | ' 		return(c1 - c2);
2e208     03 FB 01 56 |  if_ne	mov	result1, _var04
2e20c     05 FB 81 51 |  if_ne	sub	result1, _var06
2e210                 | _fatfs_cc_strncmp_ret
2e210     2D 00 64 FD | 	ret
2e214                 | 
2e214                 | _fatfs_cc_strchr
2e214                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/libc/string/strchr.c"
2e214                 | ' 	while ((c = *s++) != (char) charwanted)
2e214                 | LR__4440
2e214     09 01 02 F6 | 	mov	_var01, arg01
2e218     00 03 C2 FA | 	rdbyte	_var02, _var01
2e21c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2e220     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2e224     03 05 0A F2 | 	cmp	_var03, _var04 wz
2e228     01 12 06 F1 | 	add	arg01, #1
2e22c     14 00 90 AD |  if_e	jmp	#LR__4441
2e230     01 05 02 F6 | 	mov	_var03, _var02
2e234     07 04 4E F7 | 	zerox	_var03, #7 wz
2e238     00 FA 05 A6 |  if_e	mov	result1, #0
2e23c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2e240     D0 FF 9F FD | 	jmp	#LR__4440
2e244                 | LR__4441
2e244                 | ' 	return((char *)--s);
2e244     01 12 86 F1 | 	sub	arg01, #1
2e248     09 FB 01 F6 | 	mov	result1, arg01
2e24c                 | _fatfs_cc_strchr_ret
2e24c     2D 00 64 FD | 	ret
2e250                 | 
2e250                 | _fatfs_cc_disk_initialize
2e250     04 4A 05 F6 | 	mov	COUNT_, #4
2e254     A8 00 A0 FD | 	call	#pushregs_
2e258     40 F0 07 F1 | 	add	ptra, #64
2e25c     04 4E 05 F1 | 	add	fp, #4
2e260     A7 12 42 FC | 	wrbyte	arg01, fp
2e264     01 00 00 FF 
2e268     14 E4 05 F1 | 	add	objptr, ##532
2e26c     F2 18 02 FB | 	rdlong	arg04, objptr
2e270     2C 4E 05 F1 | 	add	fp, #44
2e274     A7 18 62 FC | 	wrlong	arg04, fp
2e278     04 E4 85 F1 | 	sub	objptr, #4
2e27c     F2 18 02 FB | 	rdlong	arg04, objptr
2e280     04 4E 05 F1 | 	add	fp, #4
2e284     A7 18 62 FC | 	wrlong	arg04, fp
2e288     08 E4 05 F1 | 	add	objptr, #8
2e28c     F2 18 02 FB | 	rdlong	arg04, objptr
2e290     04 4E 05 F1 | 	add	fp, #4
2e294     A7 18 62 FC | 	wrlong	arg04, fp
2e298     04 E4 05 F1 | 	add	objptr, #4
2e29c     F2 18 02 FB | 	rdlong	arg04, objptr
2e2a0     04 4E 05 F1 | 	add	fp, #4
2e2a4     A7 18 62 FC | 	wrlong	arg04, fp
2e2a8     04 E4 05 F1 | 	add	objptr, #4
2e2ac     F2 02 48 FC | 	wrbyte	#1, objptr
2e2b0     01 00 00 FF 
2e2b4     20 E4 85 F1 | 	sub	objptr, ##544
2e2b8     38 4E 85 F1 | 	sub	fp, #56
2e2bc     A7 18 CA FA | 	rdbyte	arg04, fp wz
2e2c0     04 4E 85 F1 | 	sub	fp, #4
2e2c4                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e2c4                 | '             return RES_NOTRDY;
2e2c4     03 FA 05 56 |  if_ne	mov	result1, #3
2e2c8     D8 05 90 5D |  if_ne	jmp	#LR__4468
2e2cc     13 00 00 FF 
2e2d0     10 13 06 F6 | 	mov	arg01, ##10000
2e2d4     40 95 BF FD | 	call	#__system___waitus
2e2d8     30 4E 05 F1 | 	add	fp, #48
2e2dc     A7 12 02 FB | 	rdlong	arg01, fp
2e2e0     09 01 08 FC | 	wrpin	#0, arg01
2e2e4     04 4E 05 F1 | 	add	fp, #4
2e2e8     A7 12 02 FB | 	rdlong	arg01, fp
2e2ec     09 01 08 FC | 	wrpin	#0, arg01
2e2f0     04 4E 05 F1 | 	add	fp, #4
2e2f4     A7 12 02 FB | 	rdlong	arg01, fp
2e2f8     09 01 08 FC | 	wrpin	#0, arg01
2e2fc     04 4E 05 F1 | 	add	fp, #4
2e300     A7 12 02 FB | 	rdlong	arg01, fp
2e304     09 00 80 FF 
2e308     09 01 08 FC | 	wrpin	##4608, arg01
2e30c     0C 4E 85 F1 | 	sub	fp, #12
2e310     A7 12 02 FB | 	rdlong	arg01, fp
2e314     59 12 62 FD | 	drvh	arg01
2e318     04 4E 05 F1 | 	add	fp, #4
2e31c     A7 12 02 FB | 	rdlong	arg01, fp
2e320     59 12 62 FD | 	drvh	arg01
2e324     04 4E 05 F1 | 	add	fp, #4
2e328     A7 12 02 FB | 	rdlong	arg01, fp
2e32c     59 12 62 FD | 	drvh	arg01
2e330     04 4E 05 F1 | 	add	fp, #4
2e334     A7 12 02 FB | 	rdlong	arg01, fp
2e338     59 12 62 FD | 	drvh	arg01
2e33c     20 4E 85 F1 | 	sub	fp, #32
2e340     00 04 80 FF 
2e344     A7 20 68 FC | 	wrlong	##524304, fp
2e348     04 4E 05 F1 | 	add	fp, #4
2e34c     20 03 80 FF 
2e350     A7 90 68 FC | 	wrlong	##409672, fp
2e354     14 4E 05 F1 | 	add	fp, #20
2e358     A7 26 02 FB | 	rdlong	local01, fp
2e35c     18 4E 85 F1 | 	sub	fp, #24
2e360     A7 16 02 FB | 	rdlong	arg03, fp
2e364     40 26 62 FD | 	dirl	local01
2e368     A0 03 80 FF 
2e36c     13 91 08 FC | 	wrpin	##475208, local01
2e370     13 17 12 FC | 	wxpin	arg03, local01
2e374     13 01 28 FC | 	wypin	#0, local01
2e378     41 26 62 FD | 	dirh	local01
2e37c     1C 4E 05 F1 | 	add	fp, #28
2e380     A7 28 02 FB | 	rdlong	local02, fp
2e384     14 27 82 F1 | 	sub	local01, local02
2e388     07 26 06 F5 | 	and	local01, #7
2e38c     18 26 66 F0 | 	shl	local01, #24
2e390     78 14 06 F6 | 	mov	arg02, #120
2e394     13 15 42 F5 | 	or	arg02, local01
2e398     14 4E 85 F1 | 	sub	fp, #20
2e39c     A7 14 62 FC | 	wrlong	arg02, fp
2e3a0     14 4E 05 F1 | 	add	fp, #20
2e3a4     A7 12 02 FB | 	rdlong	arg01, fp
2e3a8     10 14 26 F4 | 	bith	arg02, #16
2e3ac     40 12 62 FD | 	dirl	arg01
2e3b0     09 15 02 FC | 	wrpin	arg02, arg01
2e3b4     09 3F 18 FC | 	wxpin	#31, arg01
2e3b8     FF FF FF FF 
2e3bc     09 FF 2B FC | 	wypin	##-1, arg01
2e3c0     41 12 62 FD | 	dirh	arg01
2e3c4     04 4E 85 F1 | 	sub	fp, #4
2e3c8     A7 14 02 FB | 	rdlong	arg02, fp
2e3cc     08 4E 05 F1 | 	add	fp, #8
2e3d0     A7 2A 02 FB | 	rdlong	local03, fp
2e3d4     15 15 82 F1 | 	sub	arg02, local03
2e3d8     07 14 06 F5 | 	and	arg02, #7
2e3dc     18 14 66 F0 | 	shl	arg02, #24
2e3e0     14 4E 85 F1 | 	sub	fp, #20
2e3e4     A7 14 62 FC | 	wrlong	arg02, fp
2e3e8     29 00 00 FF 
2e3ec     7A 14 46 F5 | 	or	arg02, ##21114
2e3f0     A7 14 62 FC | 	wrlong	arg02, fp
2e3f4     14 4E 05 F1 | 	add	fp, #20
2e3f8     A7 12 02 FB | 	rdlong	arg01, fp
2e3fc     40 12 62 FD | 	dirl	arg01
2e400     09 15 02 FC | 	wrpin	arg02, arg01
2e404     09 4F 18 FC | 	wxpin	#39, arg01
2e408     09 01 28 FC | 	wypin	#0, arg01
2e40c     41 12 62 FD | 	dirh	arg01
2e410     28 4E 85 F1 | 	sub	fp, #40
2e414     A7 12 02 F6 | 	mov	arg01, fp
2e418     14 4E 85 F1 | 	sub	fp, #20
2e41c     0A 14 06 F6 | 	mov	arg02, #10
2e420     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1205
2e424     00 12 06 F6 | 	mov	arg01, #0
2e428     00 14 06 F6 | 	mov	arg02, #0
2e42c     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2e430     24 80 B0 FD | 	call	#_fatfs_cc_deselect_1215
2e434     64 12 06 F6 | 	mov	arg01, #100
2e438     DC 93 BF FD | 	call	#__system___waitus
2e43c     14 4E 05 F1 | 	add	fp, #20
2e440     A7 12 02 F6 | 	mov	arg01, fp
2e444     14 4E 85 F1 | 	sub	fp, #20
2e448     0A 14 06 F6 | 	mov	arg02, #10
2e44c     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1205
2e450     0C 4E 05 F1 | 	add	fp, #12
2e454     A7 00 48 FC | 	wrbyte	#0, fp
2e458     0C 4E 85 F1 | 	sub	fp, #12
2e45c     00 12 06 F6 | 	mov	arg01, #0
2e460     00 14 06 F6 | 	mov	arg02, #0
2e464     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2e468     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2e46c     01 18 0E F2 | 	cmp	arg04, #1 wz
2e470     B8 03 90 5D |  if_ne	jmp	#LR__4467
2e474     08 12 06 F6 | 	mov	arg01, #8
2e478     AA 15 06 F6 | 	mov	arg02, #426
2e47c     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2e480     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e484     01 FA 0D F2 | 	cmp	result1, #1 wz
2e488     98 01 90 5D |  if_ne	jmp	#LR__4453
2e48c     14 4E 05 F1 | 	add	fp, #20
2e490     A7 12 02 F6 | 	mov	arg01, fp
2e494     14 4E 85 F1 | 	sub	fp, #20
2e498     04 14 06 F6 | 	mov	arg02, #4
2e49c     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1205
2e4a0     16 4E 05 F1 | 	add	fp, #22
2e4a4     A7 2C C2 FA | 	rdbyte	local04, fp
2e4a8     16 4E 85 F1 | 	sub	fp, #22
2e4ac     01 2C 0E F2 | 	cmp	local04, #1 wz
2e4b0     17 4E 05 A1 |  if_e	add	fp, #23
2e4b4     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2e4b8     17 4E 85 A1 |  if_e	sub	fp, #23
2e4bc     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2e4c0     68 03 90 5D |  if_ne	jmp	#LR__4466
2e4c4                 | ' 				for (tmr = 1000; tmr; tmr--) {
2e4c4     18 4E 05 F1 | 	add	fp, #24
2e4c8     01 00 80 FF 
2e4cc     A7 D0 6B FC | 	wrlong	##1000, fp
2e4d0     18 4E 85 F1 | 	sub	fp, #24
2e4d4                 | LR__4450
2e4d4     18 4E 05 F1 | 	add	fp, #24
2e4d8     A7 26 0A FB | 	rdlong	local01, fp wz
2e4dc     18 4E 85 F1 | 	sub	fp, #24
2e4e0     3C 00 90 AD |  if_e	jmp	#LR__4451
2e4e4     A9 12 06 F6 | 	mov	arg01, #169
2e4e8     1E 14 C6 F9 | 	decod	arg02, #30
2e4ec     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2e4f0     FD 2C 02 F6 | 	mov	local04, result1
2e4f4     07 2C 4E F7 | 	zerox	local04, #7 wz
2e4f8     24 00 90 AD |  if_e	jmp	#LR__4451
2e4fc     01 00 00 FF 
2e500     E8 13 06 F6 | 	mov	arg01, ##1000
2e504     10 93 BF FD | 	call	#__system___waitus
2e508     18 4E 05 F1 | 	add	fp, #24
2e50c     A7 2C 02 FB | 	rdlong	local04, fp
2e510     01 2C 86 F1 | 	sub	local04, #1
2e514     A7 2C 62 FC | 	wrlong	local04, fp
2e518     18 4E 85 F1 | 	sub	fp, #24
2e51c     B4 FF 9F FD | 	jmp	#LR__4450
2e520                 | LR__4451
2e520     18 4E 05 F1 | 	add	fp, #24
2e524     A7 2C 0A FB | 	rdlong	local04, fp wz
2e528     18 4E 85 F1 | 	sub	fp, #24
2e52c     4C 00 90 AD |  if_e	jmp	#LR__4452
2e530     3A 12 06 F6 | 	mov	arg01, #58
2e534     00 14 06 F6 | 	mov	arg02, #0
2e538     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2e53c     FD 2A 02 F6 | 	mov	local03, result1
2e540     07 2A 4E F7 | 	zerox	local03, #7 wz
2e544     34 00 90 5D |  if_ne	jmp	#LR__4452
2e548     14 4E 05 F1 | 	add	fp, #20
2e54c     A7 12 02 F6 | 	mov	arg01, fp
2e550     14 4E 85 F1 | 	sub	fp, #20
2e554     04 14 06 F6 | 	mov	arg02, #4
2e558     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1205
2e55c     14 4E 05 F1 | 	add	fp, #20
2e560     A7 26 C2 FA | 	rdbyte	local01, fp
2e564     40 26 CE F7 | 	test	local01, #64 wz
2e568     0C 2C 06 56 |  if_ne	mov	local04, #12
2e56c     04 2C 06 A6 |  if_e	mov	local04, #4
2e570     08 4E 85 F1 | 	sub	fp, #8
2e574     A7 2C 42 FC | 	wrbyte	local04, fp
2e578     0C 4E 85 F1 | 	sub	fp, #12
2e57c                 | LR__4452
2e57c     14 2C 06 FB | 	rdlong	local04, #20
2e580     18 4E 05 F1 | 	add	fp, #24
2e584     A7 2C 62 FC | 	wrlong	local04, fp
2e588     0C 4E 05 F1 | 	add	fp, #12
2e58c     A7 2C 02 FB | 	rdlong	local04, fp
2e590     1B 2C 26 F4 | 	bith	local04, #27
2e594     A7 2C 62 FC | 	wrlong	local04, fp
2e598     0C 4E 85 F1 | 	sub	fp, #12
2e59c     A7 2C 02 FB | 	rdlong	local04, fp
2e5a0     18 4E 85 F1 | 	sub	fp, #24
2e5a4     68 78 04 FF 
2e5a8     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2e5ac     1C 4E 05 C1 |  if_b	add	fp, #28
2e5b0     00 01 80 CF 
2e5b4     A7 08 68 CC |  if_b	wrlong	##131076, fp
2e5b8     1C 4E 85 C1 |  if_b	sub	fp, #28
2e5bc     6C 02 90 CD |  if_b	jmp	#LR__4466
2e5c0     18 4E 05 F1 | 	add	fp, #24
2e5c4     A7 2C 02 FB | 	rdlong	local04, fp
2e5c8     18 4E 85 F1 | 	sub	fp, #24
2e5cc     E1 F5 05 FF 
2e5d0     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e5d4     1C 4E 05 C1 |  if_b	add	fp, #28
2e5d8     00 01 80 CF 
2e5dc     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2e5e0     1C 4E 85 C1 |  if_b	sub	fp, #28
2e5e4     44 02 90 CD |  if_b	jmp	#LR__4466
2e5e8     18 4E 05 F1 | 	add	fp, #24
2e5ec     A7 2C 02 FB | 	rdlong	local04, fp
2e5f0     18 4E 85 F1 | 	sub	fp, #24
2e5f4     3B 58 08 FF 
2e5f8     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2e5fc     1C 4E 05 C1 |  if_b	add	fp, #28
2e600     00 01 80 CF 
2e604     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2e608     1C 4E 85 C1 |  if_b	sub	fp, #28
2e60c     1C 02 90 CD |  if_b	jmp	#LR__4466
2e610     1C 4E 05 F1 | 	add	fp, #28
2e614     80 01 80 FF 
2e618     A7 10 68 FC | 	wrlong	##196616, fp
2e61c     1C 4E 85 F1 | 	sub	fp, #28
2e620     08 02 90 FD | 	jmp	#LR__4466
2e624                 | LR__4453
2e624     A9 12 06 F6 | 	mov	arg01, #169
2e628     00 14 06 F6 | 	mov	arg02, #0
2e62c     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2e630     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2e634     02 2C 16 F2 | 	cmp	local04, #2 wc
2e638     18 00 90 3D |  if_ae	jmp	#LR__4454
2e63c     0C 4E 05 F1 | 	add	fp, #12
2e640     A7 04 48 FC | 	wrbyte	#2, fp
2e644     04 4E 05 F1 | 	add	fp, #4
2e648     A7 52 49 FC | 	wrbyte	#169, fp
2e64c     10 4E 85 F1 | 	sub	fp, #16
2e650     14 00 90 FD | 	jmp	#LR__4455
2e654                 | LR__4454
2e654     0C 4E 05 F1 | 	add	fp, #12
2e658     A7 02 48 FC | 	wrbyte	#1, fp
2e65c     04 4E 05 F1 | 	add	fp, #4
2e660     A7 02 48 FC | 	wrbyte	#1, fp
2e664     10 4E 85 F1 | 	sub	fp, #16
2e668                 | LR__4455
2e668                 | ' 				ty =  0x01 ; cmd =  (1) ;
2e668                 | ' 			}
2e668                 | ' 			for (tmr = 1000; tmr; tmr--) {
2e668     18 4E 05 F1 | 	add	fp, #24
2e66c     01 00 80 FF 
2e670     A7 D0 6B FC | 	wrlong	##1000, fp
2e674     18 4E 85 F1 | 	sub	fp, #24
2e678                 | LR__4456
2e678     18 4E 05 F1 | 	add	fp, #24
2e67c     A7 2A 0A FB | 	rdlong	local03, fp wz
2e680     18 4E 85 F1 | 	sub	fp, #24
2e684     44 00 90 AD |  if_e	jmp	#LR__4457
2e688     10 4E 05 F1 | 	add	fp, #16
2e68c     A7 12 C2 FA | 	rdbyte	arg01, fp
2e690     10 4E 85 F1 | 	sub	fp, #16
2e694     00 14 06 F6 | 	mov	arg02, #0
2e698     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2e69c     FD 2C 02 F6 | 	mov	local04, result1
2e6a0     07 2C 4E F7 | 	zerox	local04, #7 wz
2e6a4     24 00 90 AD |  if_e	jmp	#LR__4457
2e6a8     01 00 00 FF 
2e6ac     E8 13 06 F6 | 	mov	arg01, ##1000
2e6b0     64 91 BF FD | 	call	#__system___waitus
2e6b4     18 4E 05 F1 | 	add	fp, #24
2e6b8     A7 2C 02 FB | 	rdlong	local04, fp
2e6bc     01 2C 86 F1 | 	sub	local04, #1
2e6c0     A7 2C 62 FC | 	wrlong	local04, fp
2e6c4     18 4E 85 F1 | 	sub	fp, #24
2e6c8     AC FF 9F FD | 	jmp	#LR__4456
2e6cc                 | LR__4457
2e6cc     18 4E 05 F1 | 	add	fp, #24
2e6d0     A7 2C 0A FB | 	rdlong	local04, fp wz
2e6d4     18 4E 85 F1 | 	sub	fp, #24
2e6d8     14 00 90 AD |  if_e	jmp	#LR__4458
2e6dc     10 12 06 F6 | 	mov	arg01, #16
2e6e0     09 14 C6 F9 | 	decod	arg02, #9
2e6e4     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2e6e8     07 FA 4D F7 | 	zerox	result1, #7 wz
2e6ec     0C 00 90 AD |  if_e	jmp	#LR__4459
2e6f0                 | LR__4458
2e6f0     0C 4E 05 F1 | 	add	fp, #12
2e6f4     A7 00 48 FC | 	wrbyte	#0, fp
2e6f8     0C 4E 85 F1 | 	sub	fp, #12
2e6fc                 | LR__4459
2e6fc     14 2C 06 FB | 	rdlong	local04, #20
2e700     18 4E 05 F1 | 	add	fp, #24
2e704     A7 2C 62 FC | 	wrlong	local04, fp
2e708     18 4E 85 F1 | 	sub	fp, #24
2e70c     F0 FA 02 FF 
2e710     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2e714     18 00 90 3D |  if_ae	jmp	#LR__4460
2e718     24 4E 05 F1 | 	add	fp, #36
2e71c     A7 2C 02 FB | 	rdlong	local04, fp
2e720     1B 2C 26 F4 | 	bith	local04, #27
2e724     A7 2C 62 FC | 	wrlong	local04, fp
2e728     24 4E 85 F1 | 	sub	fp, #36
2e72c     2C 00 90 FD | 	jmp	#LR__4461
2e730                 | LR__4460
2e730     18 4E 05 F1 | 	add	fp, #24
2e734     A7 2C 02 FB | 	rdlong	local04, fp
2e738     18 4E 85 F1 | 	sub	fp, #24
2e73c     E1 F5 05 FF 
2e740     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e744     24 4E 05 C1 |  if_b	add	fp, #36
2e748     A7 2C 02 CB |  if_b	rdlong	local04, fp
2e74c     80 00 04 CF 
2e750     00 2C 46 C5 |  if_b	or	local04, ##134283264
2e754     A7 2C 62 CC |  if_b	wrlong	local04, fp
2e758     24 4E 85 C1 |  if_b	sub	fp, #36
2e75c                 | LR__4461
2e75c     18 4E 05 F1 | 	add	fp, #24
2e760     A7 2C 02 FB | 	rdlong	local04, fp
2e764     18 4E 85 F1 | 	sub	fp, #24
2e768     F0 FA 02 FF 
2e76c     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2e770     1C 4E 05 C1 |  if_b	add	fp, #28
2e774     00 01 80 CF 
2e778     A7 08 68 CC |  if_b	wrlong	##131076, fp
2e77c     1C 4E 85 C1 |  if_b	sub	fp, #28
2e780     A8 00 90 CD |  if_b	jmp	#LR__4465
2e784     18 4E 05 F1 | 	add	fp, #24
2e788     A7 2C 02 FB | 	rdlong	local04, fp
2e78c     18 4E 85 F1 | 	sub	fp, #24
2e790     68 78 04 FF 
2e794     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2e798     1C 4E 05 C1 |  if_b	add	fp, #28
2e79c     80 01 80 CF 
2e7a0     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2e7a4     1C 4E 85 C1 |  if_b	sub	fp, #28
2e7a8     80 00 90 CD |  if_b	jmp	#LR__4464
2e7ac     18 4E 05 F1 | 	add	fp, #24
2e7b0     A7 2C 02 FB | 	rdlong	local04, fp
2e7b4     18 4E 85 F1 | 	sub	fp, #24
2e7b8     E1 F5 05 FF 
2e7bc     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e7c0     1C 4E 05 C1 |  if_b	add	fp, #28
2e7c4     00 02 80 CF 
2e7c8     A7 10 68 CC |  if_b	wrlong	##262152, fp
2e7cc     1C 4E 85 C1 |  if_b	sub	fp, #28
2e7d0     58 00 90 CD |  if_b	jmp	#LR__4463
2e7d4     18 4E 05 F1 | 	add	fp, #24
2e7d8     A7 2C 02 FB | 	rdlong	local04, fp
2e7dc     18 4E 85 F1 | 	sub	fp, #24
2e7e0     59 73 07 FF 
2e7e4     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2e7e8     1C 4E 05 C1 |  if_b	add	fp, #28
2e7ec     80 02 80 CF 
2e7f0     A7 14 68 CC |  if_b	wrlong	##327690, fp
2e7f4     1C 4E 85 C1 |  if_b	sub	fp, #28
2e7f8     30 00 90 CD |  if_b	jmp	#LR__4462
2e7fc     18 4E 05 F1 | 	add	fp, #24
2e800     A7 2C 02 FB | 	rdlong	local04, fp
2e804     18 4E 85 F1 | 	sub	fp, #24
2e808     D1 F0 08 FF 
2e80c     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2e810     1C 4E 05 C1 |  if_b	add	fp, #28
2e814     00 03 80 CF 
2e818     A7 18 68 CC |  if_b	wrlong	##393228, fp
2e81c     1C 4E 85 F3 | 	sumc	fp, #28
2e820     80 03 80 3F 
2e824     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2e828     1C 4E 85 31 |  if_ae	sub	fp, #28
2e82c                 | LR__4462
2e82c                 | LR__4463
2e82c                 | LR__4464
2e82c                 | LR__4465
2e82c                 | LR__4466
2e82c                 | LR__4467
2e82c     0C 4E 05 F1 | 	add	fp, #12
2e830     A7 2C C2 FA | 	rdbyte	local04, fp
2e834     01 00 00 FF 
2e838     21 E4 05 F1 | 	add	objptr, ##545
2e83c     F2 2C 42 FC | 	wrbyte	local04, objptr
2e840     A7 26 CA FA | 	rdbyte	local01, fp wz
2e844     00 2C 06 56 |  if_ne	mov	local04, #0
2e848     01 2C 06 A6 |  if_e	mov	local04, #1
2e84c     20 4E 05 F1 | 	add	fp, #32
2e850     A7 2C 42 FC | 	wrbyte	local04, fp
2e854     A7 2C C2 FA | 	rdbyte	local04, fp
2e858     2C 4E 85 F1 | 	sub	fp, #44
2e85c     01 E4 85 F1 | 	sub	objptr, #1
2e860     F2 2C 42 FC | 	wrbyte	local04, objptr
2e864     01 00 00 FF 
2e868     20 E4 85 F1 | 	sub	objptr, ##544
2e86c     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_1215
2e870     34 4E 05 F1 | 	add	fp, #52
2e874     A7 12 02 FB | 	rdlong	arg01, fp
2e878     18 4E 85 F1 | 	sub	fp, #24
2e87c     A7 14 02 FB | 	rdlong	arg02, fp
2e880     09 15 12 FC | 	wxpin	arg02, arg01
2e884     1C 4E 05 F1 | 	add	fp, #28
2e888     A7 12 02 FB | 	rdlong	arg01, fp
2e88c     14 4E 85 F1 | 	sub	fp, #20
2e890     A7 14 02 FB | 	rdlong	arg02, fp
2e894     09 15 02 FC | 	wrpin	arg02, arg01
2e898                 | ' 
2e898                 | ' 		}
2e898                 | ' 	}
2e898                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e898                 | ' 	CardType = ty;
2e898                 | ' 	s = ty ? 0 :  0x01 ;
2e898                 | ' 	Stat = s;
2e898                 | ' 
2e898                 | ' 	deselect();
2e898                 | ' 
2e898                 | ' 
2e898                 | ' 	_wxpin( PIN_CLK, ck_div );
2e898                 | ' 	_wrpin( PIN_DI, spm_tx );
2e898                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e898                 | ' 	return s;
2e898     08 4E 05 F1 | 	add	fp, #8
2e89c     A7 FA C1 FA | 	rdbyte	result1, fp
2e8a0     2C 4E 85 F1 | 	sub	fp, #44
2e8a4                 | LR__4468
2e8a4     A7 F0 03 F6 | 	mov	ptra, fp
2e8a8     B2 00 A0 FD | 	call	#popregs_
2e8ac                 | _fatfs_cc_disk_initialize_ret
2e8ac     2D 00 64 FD | 	ret
2e8b0                 | 
2e8b0                 | _fatfs_cc_disk_read
2e8b0     05 4A 05 F6 | 	mov	COUNT_, #5
2e8b4     A8 00 A0 FD | 	call	#pushregs_
2e8b8     0A 27 02 F6 | 	mov	local01, arg02
2e8bc     0B 29 02 F6 | 	mov	local02, arg03
2e8c0     0C 2B 02 F6 | 	mov	local03, arg04
2e8c4     00 12 0E F2 | 	cmp	arg01, #0 wz
2e8c8     01 FA 05 56 |  if_ne	mov	result1, #1
2e8cc                 | ' 
2e8cc                 | ' 	return Stat;
2e8cc     01 00 00 AF 
2e8d0     20 E4 05 A1 |  if_e	add	objptr, ##544
2e8d4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e8d8     01 00 00 AF 
2e8dc     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e8e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e8e4     01 FA CD F7 | 	test	result1, #1 wz
2e8e8     03 FA 05 56 |  if_ne	mov	result1, #3
2e8ec     84 00 90 5D |  if_ne	jmp	#LR__4472
2e8f0     01 00 00 FF 
2e8f4     21 E4 05 F1 | 	add	objptr, ##545
2e8f8     F2 2C C2 FA | 	rdbyte	local04, objptr
2e8fc     01 00 00 FF 
2e900     21 E4 85 F1 | 	sub	objptr, ##545
2e904     08 2C CE F7 | 	test	local04, #8 wz
2e908     09 28 66 A0 |  if_e	shl	local02, #9
2e90c     02 2A 16 F2 | 	cmp	local03, #2 wc
2e910     12 2C 06 36 |  if_ae	mov	local04, #18
2e914     11 2C 06 C6 |  if_b	mov	local04, #17
2e918     14 15 02 F6 | 	mov	arg02, local02
2e91c     16 13 02 F6 | 	mov	arg01, local04
2e920     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2e924     FD 2E 02 F6 | 	mov	local05, result1
2e928     07 2E 4E F7 | 	zerox	local05, #7 wz
2e92c     30 00 90 5D |  if_ne	jmp	#LR__4471
2e930                 | ' 		do {
2e930                 | LR__4470
2e930     13 13 02 F6 | 	mov	arg01, local01
2e934     09 14 C6 F9 | 	decod	arg02, #9
2e938     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1223
2e93c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e940     01 00 00 5F 
2e944     00 26 06 51 |  if_ne	add	local01, ##512
2e948     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4470
2e94c     16 2D E2 F8 | 	getbyte	local04, local04, #0
2e950     12 2C 0E F2 | 	cmp	local04, #18 wz
2e954     0C 12 06 A6 |  if_e	mov	arg01, #12
2e958     00 14 06 A6 |  if_e	mov	arg02, #0
2e95c     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1229
2e960                 | LR__4471
2e960     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_1215
2e964                 | ' 	}
2e964                 | ' 	deselect();
2e964                 | ' 
2e964                 | ' 	return count ? RES_ERROR : RES_OK;
2e964     00 2A 0E F2 | 	cmp	local03, #0 wz
2e968     01 2E 06 56 |  if_ne	mov	local05, #1
2e96c     00 2E 06 A6 |  if_e	mov	local05, #0
2e970     17 FB 01 F6 | 	mov	result1, local05
2e974                 | LR__4472
2e974     A7 F0 03 F6 | 	mov	ptra, fp
2e978     B2 00 A0 FD | 	call	#popregs_
2e97c                 | _fatfs_cc_disk_read_ret
2e97c     2D 00 64 FD | 	ret
2e980                 | 
2e980                 | _fatfs_cc_disk_write
2e980     04 4A 05 F6 | 	mov	COUNT_, #4
2e984     A8 00 A0 FD | 	call	#pushregs_
2e988     0A 27 02 F6 | 	mov	local01, arg02
2e98c     0C 29 02 F6 | 	mov	local02, arg04
2e990     0B 2B 02 F6 | 	mov	local03, arg03
2e994     00 12 0E F2 | 	cmp	arg01, #0 wz
2e998     01 FA 05 56 |  if_ne	mov	result1, #1
2e99c                 | ' 
2e99c                 | ' 	return Stat;
2e99c     01 00 00 AF 
2e9a0     20 E4 05 A1 |  if_e	add	objptr, ##544
2e9a4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e9a8     01 00 00 AF 
2e9ac     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e9b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e9b4     01 FA CD F7 | 	test	result1, #1 wz
2e9b8     03 FA 05 56 |  if_ne	mov	result1, #3
2e9bc     D4 00 90 5D |  if_ne	jmp	#LR__4484
2e9c0     01 00 00 FF 
2e9c4     21 E4 05 F1 | 	add	objptr, ##545
2e9c8     F2 16 C2 FA | 	rdbyte	arg03, objptr
2e9cc     01 00 00 FF 
2e9d0     21 E4 85 F1 | 	sub	objptr, ##545
2e9d4     08 16 CE F7 | 	test	arg03, #8 wz
2e9d8     09 2A 66 A0 |  if_e	shl	local03, #9
2e9dc     01 28 0E F2 | 	cmp	local02, #1 wz
2e9e0     30 00 90 5D |  if_ne	jmp	#LR__4480
2e9e4     18 12 06 F6 | 	mov	arg01, #24
2e9e8     15 15 02 F6 | 	mov	arg02, local03
2e9ec     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2e9f0     FD 2C 02 F6 | 	mov	local04, result1
2e9f4     07 2C 4E F7 | 	zerox	local04, #7 wz
2e9f8     84 00 90 5D |  if_ne	jmp	#LR__4483
2e9fc     13 13 02 F6 | 	mov	arg01, local01
2ea00     FE 14 06 F6 | 	mov	arg02, #254
2ea04     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1225
2ea08     00 FA 0D F2 | 	cmp	result1, #0 wz
2ea0c     00 28 06 56 |  if_ne	mov	local02, #0
2ea10     6C 00 90 FD | 	jmp	#LR__4483
2ea14                 | LR__4480
2ea14     01 00 00 FF 
2ea18     21 E4 05 F1 | 	add	objptr, ##545
2ea1c     F2 2C C2 FA | 	rdbyte	local04, objptr
2ea20     01 00 00 FF 
2ea24     21 E4 85 F1 | 	sub	objptr, ##545
2ea28     06 2C CE F7 | 	test	local04, #6 wz
2ea2c     97 12 06 56 |  if_ne	mov	arg01, #151
2ea30     14 15 02 56 |  if_ne	mov	arg02, local02
2ea34     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1229
2ea38     15 15 02 F6 | 	mov	arg02, local03
2ea3c     19 12 06 F6 | 	mov	arg01, #25
2ea40     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2ea44     FD 2C 02 F6 | 	mov	local04, result1
2ea48     07 2C 4E F7 | 	zerox	local04, #7 wz
2ea4c     30 00 90 5D |  if_ne	jmp	#LR__4482
2ea50                 | ' 			do {
2ea50                 | LR__4481
2ea50     13 13 02 F6 | 	mov	arg01, local01
2ea54     FC 14 06 F6 | 	mov	arg02, #252
2ea58     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1225
2ea5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ea60     01 00 00 5F 
2ea64     00 26 06 51 |  if_ne	add	local01, ##512
2ea68     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4481
2ea6c     00 12 06 F6 | 	mov	arg01, #0
2ea70     FD 14 06 F6 | 	mov	arg02, #253
2ea74     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1225
2ea78     00 FA 0D F2 | 	cmp	result1, #0 wz
2ea7c     01 28 06 A6 |  if_e	mov	local02, #1
2ea80                 | LR__4482
2ea80                 | LR__4483
2ea80     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_1215
2ea84                 | ' 				count = 1;
2ea84                 | ' 		}
2ea84                 | ' 	}
2ea84                 | ' 	deselect();
2ea84                 | ' 
2ea84                 | ' 	return count ? RES_ERROR : RES_OK;
2ea84     00 28 0E F2 | 	cmp	local02, #0 wz
2ea88     01 2C 06 56 |  if_ne	mov	local04, #1
2ea8c     00 2C 06 A6 |  if_e	mov	local04, #0
2ea90     16 FB 01 F6 | 	mov	result1, local04
2ea94                 | LR__4484
2ea94     A7 F0 03 F6 | 	mov	ptra, fp
2ea98     B2 00 A0 FD | 	call	#popregs_
2ea9c                 | _fatfs_cc_disk_write_ret
2ea9c     2D 00 64 FD | 	ret
2eaa0                 | 
2eaa0                 | _fatfs_cc_disk_ioctl
2eaa0     01 4A 05 F6 | 	mov	COUNT_, #1
2eaa4     A8 00 A0 FD | 	call	#pushregs_
2eaa8     30 F0 07 F1 | 	add	ptra, #48
2eaac     04 4E 05 F1 | 	add	fp, #4
2eab0     A7 12 42 FC | 	wrbyte	arg01, fp
2eab4     04 4E 05 F1 | 	add	fp, #4
2eab8     A7 14 42 FC | 	wrbyte	arg02, fp
2eabc     04 4E 05 F1 | 	add	fp, #4
2eac0     A7 16 62 FC | 	wrlong	arg03, fp
2eac4     08 4E 85 F1 | 	sub	fp, #8
2eac8     A7 12 CA FA | 	rdbyte	arg01, fp wz
2eacc     04 4E 85 F1 | 	sub	fp, #4
2ead0     01 FA 05 56 |  if_ne	mov	result1, #1
2ead4                 | ' 
2ead4                 | ' 	return Stat;
2ead4     01 00 00 AF 
2ead8     20 E4 05 A1 |  if_e	add	objptr, ##544
2eadc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2eae0     01 00 00 AF 
2eae4     20 E4 85 A1 |  if_e	sub	objptr, ##544
2eae8     FD FA E1 F8 | 	getbyte	result1, result1, #0
2eaec     01 FA CD F7 | 	test	result1, #1 wz
2eaf0     03 FA 05 56 |  if_ne	mov	result1, #3
2eaf4     E4 01 90 5D |  if_ne	jmp	#LR__4498
2eaf8     10 4E 05 F1 | 	add	fp, #16
2eafc     A7 02 68 FC | 	wrlong	#1, fp
2eb00                 | ' 
2eb00                 | ' 	res = RES_ERROR;
2eb00                 | ' 	switch (ctrl) {
2eb00     08 4E 85 F1 | 	sub	fp, #8
2eb04     A7 26 C2 FA | 	rdbyte	local01, fp
2eb08     08 4E 85 F1 | 	sub	fp, #8
2eb0c     04 26 26 F3 | 	fle	local01, #4
2eb10     30 26 62 FD | 	jmprel	local01
2eb14                 | LR__4490
2eb14     10 00 90 FD | 	jmp	#LR__4491
2eb18     24 00 90 FD | 	jmp	#LR__4492
2eb1c     A0 01 90 FD | 	jmp	#LR__4496
2eb20     80 01 90 FD | 	jmp	#LR__4495
2eb24     98 01 90 FD | 	jmp	#LR__4496
2eb28                 | LR__4491
2eb28     B0 79 B0 FD | 	call	#_fatfs_cc_select_1219
2eb2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb30     10 4E 05 51 |  if_ne	add	fp, #16
2eb34     A7 00 68 5C |  if_ne	wrlong	#0, fp
2eb38     10 4E 85 51 |  if_ne	sub	fp, #16
2eb3c                 | ' 			break;
2eb3c     8C 01 90 FD | 	jmp	#LR__4497
2eb40                 | LR__4492
2eb40     09 12 06 F6 | 	mov	arg01, #9
2eb44     00 14 06 F6 | 	mov	arg02, #0
2eb48     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1229
2eb4c     FD 26 02 F6 | 	mov	local01, result1
2eb50     07 26 4E F7 | 	zerox	local01, #7 wz
2eb54     74 01 90 5D |  if_ne	jmp	#LR__4497
2eb58     18 4E 05 F1 | 	add	fp, #24
2eb5c     A7 12 02 F6 | 	mov	arg01, fp
2eb60     18 4E 85 F1 | 	sub	fp, #24
2eb64     10 14 06 F6 | 	mov	arg02, #16
2eb68     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1223
2eb6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb70     58 01 90 AD |  if_e	jmp	#LR__4497
2eb74     18 4E 05 F1 | 	add	fp, #24
2eb78     A7 26 C2 FA | 	rdbyte	local01, fp
2eb7c     18 4E 85 F1 | 	sub	fp, #24
2eb80     06 26 46 F0 | 	shr	local01, #6
2eb84     01 26 0E F2 | 	cmp	local01, #1 wz
2eb88     5C 00 90 5D |  if_ne	jmp	#LR__4493
2eb8c     21 4E 05 F1 | 	add	fp, #33
2eb90     A7 26 C2 FA | 	rdbyte	local01, fp
2eb94     01 4E 85 F1 | 	sub	fp, #1
2eb98     A7 FA C1 FA | 	rdbyte	result1, fp
2eb9c     FD FA 31 F9 | 	getword	result1, result1, #0
2eba0     08 FA 65 F0 | 	shl	result1, #8
2eba4     FD 26 02 F1 | 	add	local01, result1
2eba8     01 4E 85 F1 | 	sub	fp, #1
2ebac     A7 FA C1 FA | 	rdbyte	result1, fp
2ebb0     3F FA 05 F5 | 	and	result1, #63
2ebb4     10 FA 65 F0 | 	shl	result1, #16
2ebb8     FD 26 02 F1 | 	add	local01, result1
2ebbc     01 26 06 F1 | 	add	local01, #1
2ebc0     09 4E 05 F1 | 	add	fp, #9
2ebc4     A7 26 62 FC | 	wrlong	local01, fp
2ebc8     1C 4E 85 F1 | 	sub	fp, #28
2ebcc     A7 26 02 FB | 	rdlong	local01, fp
2ebd0     1C 4E 05 F1 | 	add	fp, #28
2ebd4     A7 FA 01 FB | 	rdlong	result1, fp
2ebd8     28 4E 85 F1 | 	sub	fp, #40
2ebdc     0A FA 65 F0 | 	shl	result1, #10
2ebe0     13 FB 61 FC | 	wrlong	result1, local01
2ebe4     AC 00 90 FD | 	jmp	#LR__4494
2ebe8                 | LR__4493
2ebe8     1D 4E 05 F1 | 	add	fp, #29
2ebec     A7 26 C2 FA | 	rdbyte	local01, fp
2ebf0     13 27 42 F8 | 	getnib	local01, local01, #0
2ebf4     05 4E 05 F1 | 	add	fp, #5
2ebf8     A7 FA C1 FA | 	rdbyte	result1, fp
2ebfc     80 FA 05 F5 | 	and	result1, #128
2ec00     07 FA C5 F0 | 	sar	result1, #7
2ec04     FD 26 02 F1 | 	add	local01, result1
2ec08     01 4E 85 F1 | 	sub	fp, #1
2ec0c     A7 FA C1 FA | 	rdbyte	result1, fp
2ec10     03 FA 05 F5 | 	and	result1, #3
2ec14     01 FA 65 F0 | 	shl	result1, #1
2ec18     FD 26 02 F1 | 	add	local01, result1
2ec1c     02 26 06 F1 | 	add	local01, #2
2ec20     0D 4E 85 F1 | 	sub	fp, #13
2ec24     A7 26 42 FC | 	wrbyte	local01, fp
2ec28     0C 4E 05 F1 | 	add	fp, #12
2ec2c     A7 26 C2 FA | 	rdbyte	local01, fp
2ec30     06 26 46 F0 | 	shr	local01, #6
2ec34     01 4E 85 F1 | 	sub	fp, #1
2ec38     A7 FA C1 FA | 	rdbyte	result1, fp
2ec3c     FD FA 31 F9 | 	getword	result1, result1, #0
2ec40     02 FA 65 F0 | 	shl	result1, #2
2ec44     FD 26 02 F1 | 	add	local01, result1
2ec48     01 4E 85 F1 | 	sub	fp, #1
2ec4c     A7 FA C1 FA | 	rdbyte	result1, fp
2ec50     03 FA 05 F5 | 	and	result1, #3
2ec54     FD FA 31 F9 | 	getword	result1, result1, #0
2ec58     0A FA 65 F0 | 	shl	result1, #10
2ec5c     FD 26 02 F1 | 	add	local01, result1
2ec60     01 26 06 F1 | 	add	local01, #1
2ec64     0A 4E 05 F1 | 	add	fp, #10
2ec68     A7 26 62 FC | 	wrlong	local01, fp
2ec6c     1C 4E 85 F1 | 	sub	fp, #28
2ec70     A7 26 02 FB | 	rdlong	local01, fp
2ec74     1C 4E 05 F1 | 	add	fp, #28
2ec78     A7 FA 01 FB | 	rdlong	result1, fp
2ec7c     14 4E 85 F1 | 	sub	fp, #20
2ec80     A7 16 C2 FA | 	rdbyte	arg03, fp
2ec84     14 4E 85 F1 | 	sub	fp, #20
2ec88     09 16 86 F1 | 	sub	arg03, #9
2ec8c     0B FB 61 F0 | 	shl	result1, arg03
2ec90     13 FB 61 FC | 	wrlong	result1, local01
2ec94                 | LR__4494
2ec94     10 4E 05 F1 | 	add	fp, #16
2ec98     A7 00 68 FC | 	wrlong	#0, fp
2ec9c     10 4E 85 F1 | 	sub	fp, #16
2eca0                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2eca0                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2eca0                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2eca0                 | ' 				}
2eca0                 | ' 				res = RES_OK;
2eca0                 | ' 			}
2eca0                 | ' 			break;
2eca0     28 00 90 FD | 	jmp	#LR__4497
2eca4                 | LR__4495
2eca4     0C 4E 05 F1 | 	add	fp, #12
2eca8     A7 26 02 FB | 	rdlong	local01, fp
2ecac     13 01 69 FC | 	wrlong	#128, local01
2ecb0     04 4E 05 F1 | 	add	fp, #4
2ecb4     A7 00 68 FC | 	wrlong	#0, fp
2ecb8     10 4E 85 F1 | 	sub	fp, #16
2ecbc                 | ' 			*(DWORD*)buff = 128;
2ecbc                 | ' 			res = RES_OK;
2ecbc                 | ' 			break;
2ecbc     0C 00 90 FD | 	jmp	#LR__4497
2ecc0                 | LR__4496
2ecc0     10 4E 05 F1 | 	add	fp, #16
2ecc4     A7 08 68 FC | 	wrlong	#4, fp
2ecc8     10 4E 85 F1 | 	sub	fp, #16
2eccc                 | LR__4497
2eccc     88 77 B0 FD | 	call	#_fatfs_cc_deselect_1215
2ecd0                 | ' 			res = RES_PARERR;
2ecd0                 | ' 	}
2ecd0                 | ' 
2ecd0                 | ' 	deselect();
2ecd0                 | ' 
2ecd0                 | ' 	return res;
2ecd0     10 4E 05 F1 | 	add	fp, #16
2ecd4     A7 FA 01 FB | 	rdlong	result1, fp
2ecd8     10 4E 85 F1 | 	sub	fp, #16
2ecdc                 | LR__4498
2ecdc     A7 F0 03 F6 | 	mov	ptra, fp
2ece0     B2 00 A0 FD | 	call	#popregs_
2ece4                 | _fatfs_cc_disk_ioctl_ret
2ece4     2D 00 64 FD | 	ret
2ece8                 | 
2ece8                 | _fatfs_cc_disk_setpins
2ece8     00 12 0E F2 | 	cmp	arg01, #0 wz
2ecec     01 FA 65 56 |  if_ne	neg	result1, #1
2ecf0     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2ecf4     01 00 00 FF 
2ecf8     10 E4 05 F1 | 	add	objptr, ##528
2ecfc     F2 14 62 FC | 	wrlong	arg02, objptr
2ed00     04 E4 05 F1 | 	add	objptr, #4
2ed04     F2 16 62 FC | 	wrlong	arg03, objptr
2ed08     04 E4 05 F1 | 	add	objptr, #4
2ed0c     F2 18 62 FC | 	wrlong	arg04, objptr
2ed10     04 E4 05 F1 | 	add	objptr, #4
2ed14     F2 1A 62 FC | 	wrlong	arg05, objptr
2ed18     01 00 00 FF 
2ed1c     1C E4 85 F1 | 	sub	objptr, ##540
2ed20     00 FA 05 F6 | 	mov	result1, #0
2ed24                 | _fatfs_cc_disk_setpins_ret
2ed24     2D 00 64 FD | 	ret
2ed28                 | 
2ed28                 | _fatfs_cc_tchar2uni
2ed28     09 01 02 FB | 	rdlong	_var01, arg01
2ed2c     00 03 02 F6 | 	mov	_var02, _var01
2ed30     01 00 06 F1 | 	add	_var01, #1
2ed34     00 05 02 F6 | 	mov	_var03, _var01
2ed38     01 07 C2 FA | 	rdbyte	_var04, _var02
2ed3c     80 06 CE F7 | 	test	_var04, #128 wz
2ed40     E8 00 90 AD |  if_e	jmp	#LR__4507
2ed44     03 09 02 F6 | 	mov	_var05, _var04
2ed48     E0 08 06 F5 | 	and	_var05, #224
2ed4c     C0 08 0E F2 | 	cmp	_var05, #192 wz
2ed50     1F 06 06 A5 |  if_e	and	_var04, #31
2ed54     01 0A 06 A6 |  if_e	mov	_var06, #1
2ed58     34 00 90 AD |  if_e	jmp	#LR__4501
2ed5c     03 09 02 F6 | 	mov	_var05, _var04
2ed60     F0 08 06 F5 | 	and	_var05, #240
2ed64     E0 08 0E F2 | 	cmp	_var05, #224 wz
2ed68     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2ed6c     02 0A 06 A6 |  if_e	mov	_var06, #2
2ed70     1C 00 90 AD |  if_e	jmp	#LR__4500
2ed74     03 09 02 F6 | 	mov	_var05, _var04
2ed78     F8 08 06 F5 | 	and	_var05, #248
2ed7c     F0 08 0E F2 | 	cmp	_var05, #240 wz
2ed80     07 06 06 A5 |  if_e	and	_var04, #7
2ed84     03 0A 06 A6 |  if_e	mov	_var06, #3
2ed88                 | ' 			return 0xFFFFFFFF;
2ed88     01 FA 65 56 |  if_ne	neg	result1, #1
2ed8c     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2ed90                 | LR__4500
2ed90                 | LR__4501
2ed90                 | ' 		}
2ed90                 | ' 		do {
2ed90                 | LR__4502
2ed90     02 0D C2 FA | 	rdbyte	_var07, _var03
2ed94     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2ed98     C0 08 06 F5 | 	and	_var05, #192
2ed9c     80 08 0E F2 | 	cmp	_var05, #128 wz
2eda0     01 04 06 F1 | 	add	_var03, #1
2eda4     01 FA 65 56 |  if_ne	neg	result1, #1
2eda8     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2edac     06 06 66 F0 | 	shl	_var04, #6
2edb0     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2edb4     3F 02 06 F5 | 	and	_var02, #63
2edb8     01 07 42 F5 | 	or	_var04, _var02
2edbc     F4 0B 6E FB | 	djnz	_var06, #LR__4502
2edc0     80 06 16 F2 | 	cmp	_var04, #128 wc
2edc4     24 00 90 CD |  if_b	jmp	#LR__4504
2edc8     6C 00 00 FF 
2edcc     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2edd0     0C 00 90 CD |  if_b	jmp	#LR__4503
2edd4     70 00 00 FF 
2edd8     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2eddc     0C 00 90 CD |  if_b	jmp	#LR__4504
2ede0                 | LR__4503
2ede0     80 08 00 FF 
2ede4     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2ede8     08 00 90 CD |  if_b	jmp	#LR__4505
2edec                 | LR__4504
2edec     01 FA 65 F6 | 	neg	result1, #1
2edf0     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2edf4                 | LR__4505
2edf4     80 00 00 FF 
2edf8     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2edfc     2C 00 90 CD |  if_b	jmp	#LR__4506
2ee00     03 03 02 F6 | 	mov	_var02, _var04
2ee04     80 00 00 FF 
2ee08     00 02 86 F1 | 	sub	_var02, ##65536
2ee0c     06 02 66 F0 | 	shl	_var02, #6
2ee10     80 FF 01 FF 
2ee14     00 02 06 F5 | 	and	_var02, ##67043328
2ee18     6E 00 6C FF 
2ee1c     00 08 06 F6 | 	mov	_var05, ##-671032320
2ee20     01 09 42 F5 | 	or	_var05, _var02
2ee24     09 06 46 F7 | 	zerox	_var04, #9
2ee28     04 07 42 F5 | 	or	_var04, _var05
2ee2c                 | LR__4506
2ee2c                 | LR__4507
2ee2c     09 05 62 FC | 	wrlong	_var03, arg01
2ee30                 | ' 	}
2ee30                 | ' #line 811 "ff.c"
2ee30                 | ' 	*str = p;
2ee30                 | ' 	return uc;
2ee30     03 FB 01 F6 | 	mov	result1, _var04
2ee34                 | _fatfs_cc_tchar2uni_ret
2ee34     2D 00 64 FD | 	ret
2ee38                 | 
2ee38                 | _fatfs_cc_put_utf
2ee38     80 12 16 F2 | 	cmp	arg01, #128 wc
2ee3c     18 00 90 3D |  if_ae	jmp	#LR__4510
2ee40     01 16 16 F2 | 	cmp	arg03, #1 wc
2ee44     00 FA 05 C6 |  if_b	mov	result1, #0
2ee48     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2ee4c     0A 13 42 FC | 	wrbyte	arg01, arg02
2ee50                 | ' 		*buf = (TCHAR)chr;
2ee50                 | ' 		return 1;
2ee50     01 FA 05 F6 | 	mov	result1, #1
2ee54     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2ee58                 | LR__4510
2ee58     04 00 00 FF 
2ee5c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2ee60     40 00 90 3D |  if_ae	jmp	#LR__4511
2ee64     02 16 16 F2 | 	cmp	arg03, #2 wc
2ee68     00 FA 05 C6 |  if_b	mov	result1, #0
2ee6c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2ee70     09 FB 01 F6 | 	mov	result1, arg01
2ee74     06 FA 45 F0 | 	shr	result1, #6
2ee78     1F FA 05 F5 | 	and	result1, #31
2ee7c     C0 16 06 F6 | 	mov	arg03, #192
2ee80     FD 16 42 F5 | 	or	arg03, result1
2ee84     0A 17 42 FC | 	wrbyte	arg03, arg02
2ee88     01 14 06 F1 | 	add	arg02, #1
2ee8c     3F 12 06 F5 | 	and	arg01, #63
2ee90     80 FA 05 F6 | 	mov	result1, #128
2ee94     09 FB 41 F5 | 	or	result1, arg01
2ee98     0A FB 41 FC | 	wrbyte	result1, arg02
2ee9c                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2ee9c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2ee9c                 | ' 		return 2;
2ee9c     02 FA 05 F6 | 	mov	result1, #2
2eea0     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2eea4                 | LR__4511
2eea4     80 00 00 FF 
2eea8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2eeac     70 00 90 3D |  if_ae	jmp	#LR__4514
2eeb0     03 16 16 F2 | 	cmp	arg03, #3 wc
2eeb4     18 00 90 CD |  if_b	jmp	#LR__4512
2eeb8     6C 00 00 FF 
2eebc     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2eec0     14 00 90 CD |  if_b	jmp	#LR__4513
2eec4     70 00 00 FF 
2eec8     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2eecc     08 00 90 3D |  if_ae	jmp	#LR__4513
2eed0                 | LR__4512
2eed0     00 FA 05 F6 | 	mov	result1, #0
2eed4     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2eed8                 | LR__4513
2eed8     09 FB 59 F8 | 	getnib	result1, arg01, #3
2eedc     E0 16 06 F6 | 	mov	arg03, #224
2eee0     FD 16 42 F5 | 	or	arg03, result1
2eee4     0A 17 42 FC | 	wrbyte	arg03, arg02
2eee8     01 14 06 F1 | 	add	arg02, #1
2eeec     09 FB 01 F6 | 	mov	result1, arg01
2eef0     06 FA 45 F0 | 	shr	result1, #6
2eef4     3F FA 05 F5 | 	and	result1, #63
2eef8     80 16 06 F6 | 	mov	arg03, #128
2eefc     FD 16 42 F5 | 	or	arg03, result1
2ef00     0A 17 42 FC | 	wrbyte	arg03, arg02
2ef04     01 14 06 F1 | 	add	arg02, #1
2ef08     3F 12 06 F5 | 	and	arg01, #63
2ef0c     80 FA 05 F6 | 	mov	result1, #128
2ef10     09 FB 41 F5 | 	or	result1, arg01
2ef14     0A FB 41 FC | 	wrbyte	result1, arg02
2ef18                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2ef18                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2ef18                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2ef18                 | ' 		return 3;
2ef18     03 FA 05 F6 | 	mov	result1, #3
2ef1c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2ef20                 | LR__4514
2ef20     04 16 16 F2 | 	cmp	arg03, #4 wc
2ef24     00 FA 05 C6 |  if_b	mov	result1, #0
2ef28     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2ef2c     09 01 02 F6 | 	mov	_var01, arg01
2ef30     E0 01 06 F4 | 	bitl	_var01, #480
2ef34     00 00 6C FF 
2ef38     00 00 86 F1 | 	sub	_var01, ##-671088640
2ef3c     06 00 46 F0 | 	shr	_var01, #6
2ef40     09 13 32 F9 | 	getword	arg01, arg01, #0
2ef44     6E 00 00 FF 
2ef48     00 12 86 F1 | 	sub	arg01, ##56320
2ef4c     00 08 00 FF 
2ef50     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2ef54     02 00 00 CF 
2ef58     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2ef5c     00 FA 05 36 |  if_ae	mov	result1, #0
2ef60     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2ef64     09 01 42 F5 | 	or	_var01, arg01
2ef68     80 00 00 FF 
2ef6c     00 00 06 F1 | 	add	_var01, ##65536
2ef70     00 FB 01 F6 | 	mov	result1, _var01
2ef74     12 FA 45 F0 | 	shr	result1, #18
2ef78     07 FA 05 F5 | 	and	result1, #7
2ef7c     F0 16 06 F6 | 	mov	arg03, #240
2ef80     FD 16 42 F5 | 	or	arg03, result1
2ef84     0A 17 42 FC | 	wrbyte	arg03, arg02
2ef88     01 14 06 F1 | 	add	arg02, #1
2ef8c     00 FB 01 F6 | 	mov	result1, _var01
2ef90     0C FA 45 F0 | 	shr	result1, #12
2ef94     3F FA 05 F5 | 	and	result1, #63
2ef98     80 16 06 F6 | 	mov	arg03, #128
2ef9c     FD 16 42 F5 | 	or	arg03, result1
2efa0     0A 17 42 FC | 	wrbyte	arg03, arg02
2efa4     01 14 06 F1 | 	add	arg02, #1
2efa8     00 FB 01 F6 | 	mov	result1, _var01
2efac     06 FA 45 F0 | 	shr	result1, #6
2efb0     3F FA 05 F5 | 	and	result1, #63
2efb4     80 16 06 F6 | 	mov	arg03, #128
2efb8     FD 16 42 F5 | 	or	arg03, result1
2efbc     0A 17 42 FC | 	wrbyte	arg03, arg02
2efc0     01 14 06 F1 | 	add	arg02, #1
2efc4     3F 00 06 F5 | 	and	_var01, #63
2efc8     80 FA 05 F6 | 	mov	result1, #128
2efcc     00 FB 41 F5 | 	or	result1, _var01
2efd0     0A FB 41 FC | 	wrbyte	result1, arg02
2efd4                 | ' 	chr = (hc | chr) + 0x10000;
2efd4                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2efd4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2efd4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2efd4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2efd4                 | ' 	return 4;
2efd4     04 FA 05 F6 | 	mov	result1, #4
2efd8                 | _fatfs_cc_put_utf_ret
2efd8     2D 00 64 FD | 	ret
2efdc                 | 
2efdc                 | _fatfs_cc_sync_window
2efdc     02 4A 05 F6 | 	mov	COUNT_, #2
2efe0     A8 00 A0 FD | 	call	#pushregs_
2efe4     09 27 02 F6 | 	mov	local01, arg01
2efe8     00 28 06 F6 | 	mov	local02, #0
2efec     03 26 06 F1 | 	add	local01, #3
2eff0     13 FB C9 FA | 	rdbyte	result1, local01 wz
2eff4     03 26 86 F1 | 	sub	local01, #3
2eff8     A4 00 90 AD |  if_e	jmp	#LR__4522
2effc     01 26 06 F1 | 	add	local01, #1
2f000     13 13 C2 FA | 	rdbyte	arg01, local01
2f004     33 26 06 F1 | 	add	local01, #51
2f008     13 15 02 F6 | 	mov	arg02, local01
2f00c     04 26 86 F1 | 	sub	local01, #4
2f010     13 17 02 FB | 	rdlong	arg03, local01
2f014     30 26 86 F1 | 	sub	local01, #48
2f018     01 18 06 F6 | 	mov	arg04, #1
2f01c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2f020     00 FA 0D F2 | 	cmp	result1, #0 wz
2f024     74 00 90 5D |  if_ne	jmp	#LR__4520
2f028     03 26 06 F1 | 	add	local01, #3
2f02c     13 01 48 FC | 	wrbyte	#0, local01
2f030     2D 26 06 F1 | 	add	local01, #45
2f034     13 FB 01 FB | 	rdlong	result1, local01
2f038     0C 26 86 F1 | 	sub	local01, #12
2f03c     13 19 02 FB | 	rdlong	arg04, local01
2f040     0C FB 81 F1 | 	sub	result1, arg04
2f044     08 26 86 F1 | 	sub	local01, #8
2f048     13 19 02 FB | 	rdlong	arg04, local01
2f04c     1C 26 86 F1 | 	sub	local01, #28
2f050     0C FB 11 F2 | 	cmp	result1, arg04 wc
2f054     48 00 90 3D |  if_ae	jmp	#LR__4521
2f058     02 26 06 F1 | 	add	local01, #2
2f05c     13 19 C2 FA | 	rdbyte	arg04, local01
2f060     02 26 86 F1 | 	sub	local01, #2
2f064     02 18 0E F2 | 	cmp	arg04, #2 wz
2f068     34 00 90 5D |  if_ne	jmp	#LR__4521
2f06c     01 26 06 F1 | 	add	local01, #1
2f070     13 13 C2 FA | 	rdbyte	arg01, local01
2f074     33 26 06 F1 | 	add	local01, #51
2f078     13 15 02 F6 | 	mov	arg02, local01
2f07c     04 26 86 F1 | 	sub	local01, #4
2f080     13 17 02 FB | 	rdlong	arg03, local01
2f084     14 26 86 F1 | 	sub	local01, #20
2f088     13 27 02 FB | 	rdlong	local01, local01
2f08c     13 17 02 F1 | 	add	arg03, local01
2f090     01 18 06 F6 | 	mov	arg04, #1
2f094     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2f098     04 00 90 FD | 	jmp	#LR__4521
2f09c                 | LR__4520
2f09c     01 28 06 F6 | 	mov	local02, #1
2f0a0                 | LR__4521
2f0a0                 | LR__4522
2f0a0                 | ' 			res = FR_DISK_ERR;
2f0a0                 | ' 		}
2f0a0                 | ' 	}
2f0a0                 | ' 	return res;
2f0a0     14 FB 01 F6 | 	mov	result1, local02
2f0a4     A7 F0 03 F6 | 	mov	ptra, fp
2f0a8     B2 00 A0 FD | 	call	#popregs_
2f0ac                 | _fatfs_cc_sync_window_ret
2f0ac     2D 00 64 FD | 	ret
2f0b0                 | 
2f0b0                 | _fatfs_cc_move_window
2f0b0     03 4A 05 F6 | 	mov	COUNT_, #3
2f0b4     A8 00 A0 FD | 	call	#pushregs_
2f0b8     09 27 02 F6 | 	mov	local01, arg01
2f0bc     0A 29 02 F6 | 	mov	local02, arg02
2f0c0     00 2A 06 F6 | 	mov	local03, #0
2f0c4     30 26 06 F1 | 	add	local01, #48
2f0c8     13 19 02 FB | 	rdlong	arg04, local01
2f0cc     30 26 86 F1 | 	sub	local01, #48
2f0d0     0C 29 0A F2 | 	cmp	local02, arg04 wz
2f0d4     40 00 90 AD |  if_e	jmp	#LR__4531
2f0d8     13 13 02 F6 | 	mov	arg01, local01
2f0dc     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2f0e0     FD 2A 0A F6 | 	mov	local03, result1 wz
2f0e4     30 00 90 5D |  if_ne	jmp	#LR__4530
2f0e8     01 26 06 F1 | 	add	local01, #1
2f0ec     13 13 C2 FA | 	rdbyte	arg01, local01
2f0f0     33 26 06 F1 | 	add	local01, #51
2f0f4     13 15 02 F6 | 	mov	arg02, local01
2f0f8     14 17 02 F6 | 	mov	arg03, local02
2f0fc     01 18 06 F6 | 	mov	arg04, #1
2f100     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2f104     00 FA 0D F2 | 	cmp	result1, #0 wz
2f108     01 28 66 56 |  if_ne	neg	local02, #1
2f10c     01 2A 06 56 |  if_ne	mov	local03, #1
2f110     04 26 86 F1 | 	sub	local01, #4
2f114     13 29 62 FC | 	wrlong	local02, local01
2f118                 | LR__4530
2f118                 | LR__4531
2f118                 | ' 				sect = (LBA_t)0 - 1;
2f118                 | ' 				res = FR_DISK_ERR;
2f118                 | ' 			}
2f118                 | ' 			fs->winsect = sect;
2f118                 | ' 		}
2f118                 | ' 	}
2f118                 | ' 	return res;
2f118     15 FB 01 F6 | 	mov	result1, local03
2f11c     A7 F0 03 F6 | 	mov	ptra, fp
2f120     B2 00 A0 FD | 	call	#popregs_
2f124                 | _fatfs_cc_move_window_ret
2f124     2D 00 64 FD | 	ret
2f128                 | 
2f128                 | _fatfs_cc_sync_fs
2f128     02 4A 05 F6 | 	mov	COUNT_, #2
2f12c     A8 00 A0 FD | 	call	#pushregs_
2f130     09 27 02 F6 | 	mov	local01, arg01
2f134     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2f138     FD 28 0A F6 | 	mov	local02, result1 wz
2f13c     D8 00 90 5D |  if_ne	jmp	#LR__4541
2f140     13 19 C2 FA | 	rdbyte	arg04, local01
2f144     03 18 0E F2 | 	cmp	arg04, #3 wz
2f148     04 26 06 A1 |  if_e	add	local01, #4
2f14c     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2f150     04 26 86 A1 |  if_e	sub	local01, #4
2f154     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2f158     A0 00 90 5D |  if_ne	jmp	#LR__4540
2f15c     34 26 06 F1 | 	add	local01, #52
2f160     13 13 02 F6 | 	mov	arg01, local01
2f164     00 14 06 F6 | 	mov	arg02, #0
2f168     09 16 C6 F9 | 	decod	arg03, #9
2f16c     98 00 A0 FD | 	call	#\builtin_bytefill_
2f170     13 13 02 F6 | 	mov	arg01, local01
2f174     FE 13 06 F1 | 	add	arg01, #510
2f178     55 00 80 FF 
2f17c     09 AB 58 FC | 	wrword	##43605, arg01
2f180     A9 B0 A0 FF 
2f184     13 A5 68 FC | 	wrlong	##1096897106, local01
2f188     13 13 02 F6 | 	mov	arg01, local01
2f18c     E4 13 06 F1 | 	add	arg01, #484
2f190     B9 A0 B0 FF 
2f194     09 E5 68 FC | 	wrlong	##1631679090, arg01
2f198     13 13 02 F6 | 	mov	arg01, local01
2f19c     E8 13 06 F1 | 	add	arg01, #488
2f1a0     20 26 86 F1 | 	sub	local01, #32
2f1a4     13 15 02 FB | 	rdlong	arg02, local01
2f1a8     09 15 62 FC | 	wrlong	arg02, arg01
2f1ac     20 26 06 F1 | 	add	local01, #32
2f1b0     13 13 02 F6 | 	mov	arg01, local01
2f1b4     EC 13 06 F1 | 	add	arg01, #492
2f1b8     24 26 86 F1 | 	sub	local01, #36
2f1bc     13 15 02 FB | 	rdlong	arg02, local01
2f1c0     09 15 62 FC | 	wrlong	arg02, arg01
2f1c4     10 26 06 F1 | 	add	local01, #16
2f1c8     13 17 02 FB | 	rdlong	arg03, local01
2f1cc     01 16 06 F1 | 	add	arg03, #1
2f1d0     10 26 06 F1 | 	add	local01, #16
2f1d4     13 17 62 FC | 	wrlong	arg03, local01
2f1d8     2F 26 86 F1 | 	sub	local01, #47
2f1dc     13 13 C2 FA | 	rdbyte	arg01, local01
2f1e0     33 26 06 F1 | 	add	local01, #51
2f1e4     13 15 02 F6 | 	mov	arg02, local01
2f1e8     01 18 06 F6 | 	mov	arg04, #1
2f1ec     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2f1f0     30 26 86 F1 | 	sub	local01, #48
2f1f4     13 01 48 FC | 	wrbyte	#0, local01
2f1f8     04 26 86 F1 | 	sub	local01, #4
2f1fc                 | LR__4540
2f1fc     01 26 06 F1 | 	add	local01, #1
2f200     13 13 C2 FA | 	rdbyte	arg01, local01
2f204     00 14 06 F6 | 	mov	arg02, #0
2f208     00 16 06 F6 | 	mov	arg03, #0
2f20c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2f210     00 FA 0D F2 | 	cmp	result1, #0 wz
2f214     01 28 06 56 |  if_ne	mov	local02, #1
2f218                 | LR__4541
2f218                 | ' 	}
2f218                 | ' 
2f218                 | ' 	return res;
2f218     14 FB 01 F6 | 	mov	result1, local02
2f21c     A7 F0 03 F6 | 	mov	ptra, fp
2f220     B2 00 A0 FD | 	call	#popregs_
2f224                 | _fatfs_cc_sync_fs_ret
2f224     2D 00 64 FD | 	ret
2f228                 | 
2f228                 | _fatfs_cc_clst2sect
2f228     02 14 86 F1 | 	sub	arg02, #2
2f22c     18 12 06 F1 | 	add	arg01, #24
2f230     09 01 02 FB | 	rdlong	_var01, arg01
2f234     18 12 86 F1 | 	sub	arg01, #24
2f238     02 00 86 F1 | 	sub	_var01, #2
2f23c     00 15 12 F2 | 	cmp	arg02, _var01 wc
2f240     00 FA 05 36 |  if_ae	mov	result1, #0
2f244     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2f248     0A 12 06 F1 | 	add	arg01, #10
2f24c     09 01 E2 FA | 	rdword	_var01, arg01
2f250     0A 01 02 FD | 	qmul	_var01, arg02
2f254                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2f254     22 12 06 F1 | 	add	arg01, #34
2f258     09 FB 01 FB | 	rdlong	result1, arg01
2f25c     18 00 62 FD | 	getqx	_var01
2f260     00 FB 01 F1 | 	add	result1, _var01
2f264                 | _fatfs_cc_clst2sect_ret
2f264     2D 00 64 FD | 	ret
2f268                 | 
2f268                 | _fatfs_cc_get_fat
2f268     07 4A 05 F6 | 	mov	COUNT_, #7
2f26c     A8 00 A0 FD | 	call	#pushregs_
2f270     0A 27 02 F6 | 	mov	local01, arg02
2f274     09 29 02 FB | 	rdlong	local02, arg01
2f278     02 26 16 F2 | 	cmp	local01, #2 wc
2f27c     14 00 90 CD |  if_b	jmp	#LR__4550
2f280     18 28 06 F1 | 	add	local02, #24
2f284     14 2B 02 FB | 	rdlong	local03, local02
2f288     18 28 86 F1 | 	sub	local02, #24
2f28c     15 27 12 F2 | 	cmp	local01, local03 wc
2f290     08 00 90 CD |  if_b	jmp	#LR__4551
2f294                 | LR__4550
2f294     01 2C 06 F6 | 	mov	local04, #1
2f298     60 01 90 FD | 	jmp	#LR__4558
2f29c                 | LR__4551
2f29c     01 2C 66 F6 | 	neg	local04, #1
2f2a0                 | ' 		val = 0xFFFFFFFF;
2f2a0                 | ' 
2f2a0                 | ' 		switch (fs->fs_type) {
2f2a0     14 2F C2 FA | 	rdbyte	local05, local02
2f2a4     01 2E 86 F1 | 	sub	local05, #1
2f2a8     03 2E 26 F3 | 	fle	local05, #3
2f2ac     30 2E 62 FD | 	jmprel	local05
2f2b0                 | LR__4552
2f2b0     0C 00 90 FD | 	jmp	#LR__4553
2f2b4     B8 00 90 FD | 	jmp	#LR__4554
2f2b8     F8 00 90 FD | 	jmp	#LR__4555
2f2bc     38 01 90 FD | 	jmp	#LR__4556
2f2c0                 | LR__4553
2f2c0     13 2F 02 F6 | 	mov	local05, local01
2f2c4     13 13 02 F6 | 	mov	arg01, local01
2f2c8     01 12 46 F0 | 	shr	arg01, #1
2f2cc     09 2F 02 F1 | 	add	local05, arg01
2f2d0     14 13 02 F6 | 	mov	arg01, local02
2f2d4     17 31 02 F6 | 	mov	local06, local05
2f2d8     09 30 46 F0 | 	shr	local06, #9
2f2dc     24 28 06 F1 | 	add	local02, #36
2f2e0     14 15 02 FB | 	rdlong	arg02, local02
2f2e4     24 28 86 F1 | 	sub	local02, #36
2f2e8     18 15 02 F1 | 	add	arg02, local06
2f2ec     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2f2f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f2f4     04 01 90 5D |  if_ne	jmp	#LR__4557
2f2f8     17 31 02 F6 | 	mov	local06, local05
2f2fc     FF 31 06 F5 | 	and	local06, #511
2f300     34 28 06 F1 | 	add	local02, #52
2f304     14 31 02 F1 | 	add	local06, local02
2f308     18 33 C2 FA | 	rdbyte	local07, local06
2f30c     34 28 86 F1 | 	sub	local02, #52
2f310     14 13 02 F6 | 	mov	arg01, local02
2f314     01 2E 06 F1 | 	add	local05, #1
2f318     17 31 02 F6 | 	mov	local06, local05
2f31c     09 30 46 F0 | 	shr	local06, #9
2f320     24 28 06 F1 | 	add	local02, #36
2f324     14 15 02 FB | 	rdlong	arg02, local02
2f328     24 28 86 F1 | 	sub	local02, #36
2f32c     18 15 02 F1 | 	add	arg02, local06
2f330     7C FD BF FD | 	call	#_fatfs_cc_move_window
2f334     00 FA 0D F2 | 	cmp	result1, #0 wz
2f338     C0 00 90 5D |  if_ne	jmp	#LR__4557
2f33c     FF 2F 06 F5 | 	and	local05, #511
2f340     34 28 06 F1 | 	add	local02, #52
2f344     14 2F 02 F1 | 	add	local05, local02
2f348     17 31 C2 FA | 	rdbyte	local06, local05
2f34c     08 30 66 F0 | 	shl	local06, #8
2f350     18 33 42 F5 | 	or	local07, local06
2f354     01 26 CE F7 | 	test	local01, #1 wz
2f358     04 32 46 50 |  if_ne	shr	local07, #4
2f35c     19 2B 02 56 |  if_ne	mov	local03, local07
2f360     0B 32 46 A7 |  if_e	zerox	local07, #11
2f364     19 2B 02 A6 |  if_e	mov	local03, local07
2f368     15 2D 02 F6 | 	mov	local04, local03
2f36c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2f36c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2f36c                 | ' 			break;
2f36c     8C 00 90 FD | 	jmp	#LR__4557
2f370                 | LR__4554
2f370     14 13 02 F6 | 	mov	arg01, local02
2f374     13 31 02 F6 | 	mov	local06, local01
2f378     08 30 46 F0 | 	shr	local06, #8
2f37c     24 28 06 F1 | 	add	local02, #36
2f380     14 15 02 FB | 	rdlong	arg02, local02
2f384     24 28 86 F1 | 	sub	local02, #36
2f388     18 15 02 F1 | 	add	arg02, local06
2f38c     20 FD BF FD | 	call	#_fatfs_cc_move_window
2f390     00 FA 0D F2 | 	cmp	result1, #0 wz
2f394     64 00 90 5D |  if_ne	jmp	#LR__4557
2f398     34 28 06 F1 | 	add	local02, #52
2f39c     01 26 66 F0 | 	shl	local01, #1
2f3a0     FF 27 06 F5 | 	and	local01, #511
2f3a4     13 29 02 F1 | 	add	local02, local01
2f3a8                 | ' {
2f3a8                 | ' 
2f3a8                 | ' 	return *((WORD*)ptr);
2f3a8     14 FB E1 FA | 	rdword	result1, local02
2f3ac     FD 2C 32 F9 | 	getword	local04, result1, #0
2f3b0                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2f3b0                 | ' 			break;
2f3b0     48 00 90 FD | 	jmp	#LR__4557
2f3b4                 | LR__4555
2f3b4     14 13 02 F6 | 	mov	arg01, local02
2f3b8     13 31 02 F6 | 	mov	local06, local01
2f3bc     07 30 46 F0 | 	shr	local06, #7
2f3c0     24 28 06 F1 | 	add	local02, #36
2f3c4     14 15 02 FB | 	rdlong	arg02, local02
2f3c8     24 28 86 F1 | 	sub	local02, #36
2f3cc     18 15 02 F1 | 	add	arg02, local06
2f3d0     DC FC BF FD | 	call	#_fatfs_cc_move_window
2f3d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f3d8     20 00 90 5D |  if_ne	jmp	#LR__4557
2f3dc     34 28 06 F1 | 	add	local02, #52
2f3e0     02 26 66 F0 | 	shl	local01, #2
2f3e4     FF 27 06 F5 | 	and	local01, #511
2f3e8     13 29 02 F1 | 	add	local02, local01
2f3ec                 | ' {
2f3ec                 | ' 
2f3ec                 | ' 	return *((DWORD*)ptr);
2f3ec     14 2D 02 FB | 	rdlong	local04, local02
2f3f0     7C 2C 06 F4 | 	bitl	local04, #124
2f3f4                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2f3f4                 | ' 			break;
2f3f4     04 00 90 FD | 	jmp	#LR__4557
2f3f8                 | LR__4556
2f3f8     01 2C 06 F6 | 	mov	local04, #1
2f3fc                 | LR__4557
2f3fc                 | LR__4558
2f3fc                 | ' 			val = 1;
2f3fc                 | ' 		}
2f3fc                 | ' 	}
2f3fc                 | ' 
2f3fc                 | ' 	return val;
2f3fc     16 FB 01 F6 | 	mov	result1, local04
2f400     A7 F0 03 F6 | 	mov	ptra, fp
2f404     B2 00 A0 FD | 	call	#popregs_
2f408                 | _fatfs_cc_get_fat_ret
2f408     2D 00 64 FD | 	ret
2f40c                 | 
2f40c                 | _fatfs_cc_put_fat
2f40c     08 4A 05 F6 | 	mov	COUNT_, #8
2f410     A8 00 A0 FD | 	call	#pushregs_
2f414     09 27 02 F6 | 	mov	local01, arg01
2f418     0A 29 02 F6 | 	mov	local02, arg02
2f41c     0B 2B 02 F6 | 	mov	local03, arg03
2f420     02 2C 06 F6 | 	mov	local04, #2
2f424     02 28 16 F2 | 	cmp	local02, #2 wc
2f428     E0 01 90 CD |  if_b	jmp	#LR__4567
2f42c     18 26 06 F1 | 	add	local01, #24
2f430     13 2F 02 FB | 	rdlong	local05, local01
2f434     18 26 86 F1 | 	sub	local01, #24
2f438     17 29 12 F2 | 	cmp	local02, local05 wc
2f43c     CC 01 90 3D |  if_ae	jmp	#LR__4567
2f440                 | ' 		switch (fs->fs_type) {
2f440     13 31 C2 FA | 	rdbyte	local06, local01
2f444     01 30 86 F1 | 	sub	local06, #1
2f448     03 30 26 F3 | 	fle	local06, #3
2f44c     30 30 62 FD | 	jmprel	local06
2f450                 | LR__4560
2f450     0C 00 90 FD | 	jmp	#LR__4561
2f454     F8 00 90 FD | 	jmp	#LR__4564
2f458     40 01 90 FD | 	jmp	#LR__4565
2f45c     AC 01 90 FD | 	jmp	#LR__4566
2f460                 | LR__4561
2f460     14 33 02 F6 | 	mov	local07, local02
2f464     14 2F 02 F6 | 	mov	local05, local02
2f468     01 2E 46 F0 | 	shr	local05, #1
2f46c     17 33 02 F1 | 	add	local07, local05
2f470     13 13 02 F6 | 	mov	arg01, local01
2f474     19 31 02 F6 | 	mov	local06, local07
2f478     09 30 46 F0 | 	shr	local06, #9
2f47c     24 26 06 F1 | 	add	local01, #36
2f480     13 15 02 FB | 	rdlong	arg02, local01
2f484     24 26 86 F1 | 	sub	local01, #36
2f488     18 15 02 F1 | 	add	arg02, local06
2f48c     20 FC BF FD | 	call	#_fatfs_cc_move_window
2f490     FD 2C 0A F6 | 	mov	local04, result1 wz
2f494     74 01 90 5D |  if_ne	jmp	#LR__4566
2f498     34 26 06 F1 | 	add	local01, #52
2f49c     13 35 02 F6 | 	mov	local08, local01
2f4a0     19 2F 02 F6 | 	mov	local05, local07
2f4a4     FF 2F 06 F5 | 	and	local05, #511
2f4a8     17 35 02 F1 | 	add	local08, local05
2f4ac     01 28 CE F7 | 	test	local02, #1 wz
2f4b0     34 26 86 F1 | 	sub	local01, #52
2f4b4     01 32 06 F1 | 	add	local07, #1
2f4b8     18 00 90 AD |  if_e	jmp	#LR__4562
2f4bc     1A 2F C2 FA | 	rdbyte	local05, local08
2f4c0     17 2F 42 F8 | 	getnib	local05, local05, #0
2f4c4     15 31 E2 F8 | 	getbyte	local06, local03, #0
2f4c8     04 30 66 F0 | 	shl	local06, #4
2f4cc     18 2F 42 F5 | 	or	local05, local06
2f4d0     04 00 90 FD | 	jmp	#LR__4563
2f4d4                 | LR__4562
2f4d4     15 2F 02 F6 | 	mov	local05, local03
2f4d8                 | LR__4563
2f4d8     1A 2F 42 FC | 	wrbyte	local05, local08
2f4dc     03 26 06 F1 | 	add	local01, #3
2f4e0     13 03 48 FC | 	wrbyte	#1, local01
2f4e4     03 26 86 F1 | 	sub	local01, #3
2f4e8     13 13 02 F6 | 	mov	arg01, local01
2f4ec     19 35 02 F6 | 	mov	local08, local07
2f4f0     09 34 46 F0 | 	shr	local08, #9
2f4f4     24 26 06 F1 | 	add	local01, #36
2f4f8     13 15 02 FB | 	rdlong	arg02, local01
2f4fc     24 26 86 F1 | 	sub	local01, #36
2f500     1A 15 02 F1 | 	add	arg02, local08
2f504     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2f508     FD 2C 0A F6 | 	mov	local04, result1 wz
2f50c     FC 00 90 5D |  if_ne	jmp	#LR__4566
2f510     34 26 06 F1 | 	add	local01, #52
2f514     13 35 02 F6 | 	mov	local08, local01
2f518     FF 33 06 F5 | 	and	local07, #511
2f51c     19 35 02 F1 | 	add	local08, local07
2f520     01 28 CE F7 | 	test	local02, #1 wz
2f524     04 2A 46 50 |  if_ne	shr	local03, #4
2f528     15 2F 02 56 |  if_ne	mov	local05, local03
2f52c     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2f530     F0 2E 06 A5 |  if_e	and	local05, #240
2f534     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2f538     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2f53c     15 2F 42 A5 |  if_e	or	local05, local03
2f540     1A 2F 42 FC | 	wrbyte	local05, local08
2f544     31 26 86 F1 | 	sub	local01, #49
2f548     13 03 48 FC | 	wrbyte	#1, local01
2f54c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2f54c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2f54c                 | ' 			fs->wflag = 1;
2f54c                 | ' 			break;
2f54c     BC 00 90 FD | 	jmp	#LR__4566
2f550                 | LR__4564
2f550     13 13 02 F6 | 	mov	arg01, local01
2f554     14 35 02 F6 | 	mov	local08, local02
2f558     08 34 46 F0 | 	shr	local08, #8
2f55c     24 26 06 F1 | 	add	local01, #36
2f560     13 15 02 FB | 	rdlong	arg02, local01
2f564     24 26 86 F1 | 	sub	local01, #36
2f568     1A 15 02 F1 | 	add	arg02, local08
2f56c     40 FB BF FD | 	call	#_fatfs_cc_move_window
2f570     FD 2C 0A F6 | 	mov	local04, result1 wz
2f574     94 00 90 5D |  if_ne	jmp	#LR__4566
2f578     34 26 06 F1 | 	add	local01, #52
2f57c     13 13 02 F6 | 	mov	arg01, local01
2f580     01 28 66 F0 | 	shl	local02, #1
2f584     FF 29 06 F5 | 	and	local02, #511
2f588     14 13 02 F1 | 	add	arg01, local02
2f58c     09 2B 52 FC | 	wrword	local03, arg01
2f590     31 26 86 F1 | 	sub	local01, #49
2f594     13 03 48 FC | 	wrbyte	#1, local01
2f598                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2f598                 | ' 			fs->wflag = 1;
2f598                 | ' 			break;
2f598     70 00 90 FD | 	jmp	#LR__4566
2f59c                 | LR__4565
2f59c     13 13 02 F6 | 	mov	arg01, local01
2f5a0     14 35 02 F6 | 	mov	local08, local02
2f5a4     07 34 46 F0 | 	shr	local08, #7
2f5a8     24 26 06 F1 | 	add	local01, #36
2f5ac     13 15 02 FB | 	rdlong	arg02, local01
2f5b0     24 26 86 F1 | 	sub	local01, #36
2f5b4     1A 15 02 F1 | 	add	arg02, local08
2f5b8     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2f5bc     FD 2C 0A F6 | 	mov	local04, result1 wz
2f5c0     48 00 90 5D |  if_ne	jmp	#LR__4566
2f5c4     7C 2A 06 F4 | 	bitl	local03, #124
2f5c8     34 26 06 F1 | 	add	local01, #52
2f5cc     14 35 02 F6 | 	mov	local08, local02
2f5d0     02 34 66 F0 | 	shl	local08, #2
2f5d4     FF 35 06 F5 | 	and	local08, #511
2f5d8     13 13 02 F6 | 	mov	arg01, local01
2f5dc     1A 13 02 F1 | 	add	arg01, local08
2f5e0                 | ' {
2f5e0                 | ' 
2f5e0                 | ' 	return *((DWORD*)ptr);
2f5e0     09 35 02 FB | 	rdlong	local08, arg01
2f5e4     00 00 78 FF 
2f5e8     00 34 06 F5 | 	and	local08, ##-268435456
2f5ec     1A 2B 42 F5 | 	or	local03, local08
2f5f0     13 13 02 F6 | 	mov	arg01, local01
2f5f4     02 28 66 F0 | 	shl	local02, #2
2f5f8     FF 29 06 F5 | 	and	local02, #511
2f5fc     14 13 02 F1 | 	add	arg01, local02
2f600     09 2B 62 FC | 	wrlong	local03, arg01
2f604     31 26 86 F1 | 	sub	local01, #49
2f608     13 03 48 FC | 	wrbyte	#1, local01
2f60c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2f60c                 | ' 			}
2f60c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2f60c                 | ' 			fs->wflag = 1;
2f60c                 | ' 			break;
2f60c                 | LR__4566
2f60c                 | LR__4567
2f60c                 | ' 		}
2f60c                 | ' 	}
2f60c                 | ' 	return res;
2f60c     16 FB 01 F6 | 	mov	result1, local04
2f610     A7 F0 03 F6 | 	mov	ptra, fp
2f614     B2 00 A0 FD | 	call	#popregs_
2f618                 | _fatfs_cc_put_fat_ret
2f618     2D 00 64 FD | 	ret
2f61c                 | 
2f61c                 | _fatfs_cc_remove_chain
2f61c     05 4A 05 F6 | 	mov	COUNT_, #5
2f620     A8 00 A0 FD | 	call	#pushregs_
2f624     09 27 02 F6 | 	mov	local01, arg01
2f628     0A 29 02 F6 | 	mov	local02, arg02
2f62c     0B 2B 02 F6 | 	mov	local03, arg03
2f630     13 2D 02 FB | 	rdlong	local04, local01
2f634     02 28 16 F2 | 	cmp	local02, #2 wc
2f638     14 00 90 CD |  if_b	jmp	#LR__4570
2f63c     18 2C 06 F1 | 	add	local04, #24
2f640     16 FB 01 FB | 	rdlong	result1, local04
2f644     18 2C 86 F1 | 	sub	local04, #24
2f648     FD 28 12 F2 | 	cmp	local02, result1 wc
2f64c     08 00 90 CD |  if_b	jmp	#LR__4571
2f650                 | LR__4570
2f650     02 FA 05 F6 | 	mov	result1, #2
2f654     CC 00 90 FD | 	jmp	#LR__4576
2f658                 | LR__4571
2f658     00 2A 0E F2 | 	cmp	local03, #0 wz
2f65c     18 00 90 AD |  if_e	jmp	#LR__4572
2f660     15 15 02 F6 | 	mov	arg02, local03
2f664     16 13 02 F6 | 	mov	arg01, local04
2f668     01 16 66 F6 | 	neg	arg03, #1
2f66c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2f670     00 FA 0D F2 | 	cmp	result1, #0 wz
2f674     AC 00 90 5D |  if_ne	jmp	#LR__4576
2f678                 | LR__4572
2f678                 | ' 	}
2f678                 | ' 
2f678                 | ' 
2f678                 | ' 	do {
2f678                 | LR__4573
2f678     14 15 02 F6 | 	mov	arg02, local02
2f67c     13 13 02 F6 | 	mov	arg01, local01
2f680     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2f684     FD 2E 0A F6 | 	mov	local05, result1 wz
2f688     94 00 90 AD |  if_e	jmp	#LR__4575
2f68c     01 2E 0E F2 | 	cmp	local05, #1 wz
2f690     02 FA 05 A6 |  if_e	mov	result1, #2
2f694     8C 00 90 AD |  if_e	jmp	#LR__4576
2f698     FF FF 7F FF 
2f69c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f6a0     01 FA 05 A6 |  if_e	mov	result1, #1
2f6a4     7C 00 90 AD |  if_e	jmp	#LR__4576
2f6a8     14 15 02 F6 | 	mov	arg02, local02
2f6ac     16 13 02 F6 | 	mov	arg01, local04
2f6b0     00 16 06 F6 | 	mov	arg03, #0
2f6b4     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2f6b8     FD 2A 0A F6 | 	mov	local03, result1 wz
2f6bc     15 FB 01 56 |  if_ne	mov	result1, local03
2f6c0     60 00 90 5D |  if_ne	jmp	#LR__4576
2f6c4     18 2C 06 F1 | 	add	local04, #24
2f6c8     16 2B 02 FB | 	rdlong	local03, local04
2f6cc     02 2A 86 F1 | 	sub	local03, #2
2f6d0     04 2C 86 F1 | 	sub	local04, #4
2f6d4     16 29 02 FB | 	rdlong	local02, local04
2f6d8     14 2C 86 F1 | 	sub	local04, #20
2f6dc     15 29 12 F2 | 	cmp	local02, local03 wc
2f6e0     24 00 90 3D |  if_ae	jmp	#LR__4574
2f6e4     14 2C 06 F1 | 	add	local04, #20
2f6e8     16 2B 02 FB | 	rdlong	local03, local04
2f6ec     01 2A 06 F1 | 	add	local03, #1
2f6f0     16 2B 62 FC | 	wrlong	local03, local04
2f6f4     10 2C 86 F1 | 	sub	local04, #16
2f6f8     16 2B C2 FA | 	rdbyte	local03, local04
2f6fc     01 2A 46 F5 | 	or	local03, #1
2f700     16 2B 42 FC | 	wrbyte	local03, local04
2f704     04 2C 86 F1 | 	sub	local04, #4
2f708                 | LR__4574
2f708     17 29 02 F6 | 	mov	local02, local05
2f70c     18 2C 06 F1 | 	add	local04, #24
2f710     16 2F 02 FB | 	rdlong	local05, local04
2f714     18 2C 86 F1 | 	sub	local04, #24
2f718     17 29 12 F2 | 	cmp	local02, local05 wc
2f71c     58 FF 9F CD |  if_b	jmp	#LR__4573
2f720                 | LR__4575
2f720                 | ' #line 1500 "ff.c"
2f720                 | ' 	return FR_OK;
2f720     00 FA 05 F6 | 	mov	result1, #0
2f724                 | LR__4576
2f724     A7 F0 03 F6 | 	mov	ptra, fp
2f728     B2 00 A0 FD | 	call	#popregs_
2f72c                 | _fatfs_cc_remove_chain_ret
2f72c     2D 00 64 FD | 	ret
2f730                 | 
2f730                 | _fatfs_cc_create_chain
2f730     09 4A 05 F6 | 	mov	COUNT_, #9
2f734     A8 00 A0 FD | 	call	#pushregs_
2f738     09 27 02 F6 | 	mov	local01, arg01
2f73c     0A 29 0A F6 | 	mov	local02, arg02 wz
2f740     13 2B 02 FB | 	rdlong	local03, local01
2f744     28 00 90 5D |  if_ne	jmp	#LR__4580
2f748     10 2A 06 F1 | 	add	local03, #16
2f74c     15 2D 0A FB | 	rdlong	local04, local03 wz
2f750     10 2A 86 F1 | 	sub	local03, #16
2f754     18 2A 06 51 |  if_ne	add	local03, #24
2f758     15 2F 02 5B |  if_ne	rdlong	local05, local03
2f75c     18 2A 86 51 |  if_ne	sub	local03, #24
2f760     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2f764     50 00 90 4D |  if_c_and_nz	jmp	#LR__4581
2f768     01 2C 06 F6 | 	mov	local04, #1
2f76c     48 00 90 FD | 	jmp	#LR__4581
2f770                 | LR__4580
2f770     14 15 02 F6 | 	mov	arg02, local02
2f774     13 13 02 F6 | 	mov	arg01, local01
2f778     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2f77c     FD 2C 02 F6 | 	mov	local04, result1
2f780     02 2C 16 F2 | 	cmp	local04, #2 wc
2f784     01 FA 05 C6 |  if_b	mov	result1, #1
2f788     BC 01 90 CD |  if_b	jmp	#LR__4591
2f78c     FF FF 7F FF 
2f790     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f794     16 FB 01 A6 |  if_e	mov	result1, local04
2f798     AC 01 90 AD |  if_e	jmp	#LR__4591
2f79c     18 2A 06 F1 | 	add	local03, #24
2f7a0     15 2F 02 FB | 	rdlong	local05, local03
2f7a4     18 2A 86 F1 | 	sub	local03, #24
2f7a8     17 2D 12 F2 | 	cmp	local04, local05 wc
2f7ac     16 FB 01 C6 |  if_b	mov	result1, local04
2f7b0     94 01 90 CD |  if_b	jmp	#LR__4591
2f7b4     14 2D 02 F6 | 	mov	local04, local02
2f7b8                 | LR__4581
2f7b8     14 2A 06 F1 | 	add	local03, #20
2f7bc     15 2F 0A FB | 	rdlong	local05, local03 wz
2f7c0     14 2A 86 F1 | 	sub	local03, #20
2f7c4     00 FA 05 A6 |  if_e	mov	result1, #0
2f7c8     7C 01 90 AD |  if_e	jmp	#LR__4591
2f7cc     00 30 06 F6 | 	mov	local06, #0
2f7d0     14 2D 0A F2 | 	cmp	local04, local02 wz
2f7d4     74 00 90 5D |  if_ne	jmp	#LR__4584
2f7d8     16 31 02 F6 | 	mov	local06, local04
2f7dc     01 30 06 F1 | 	add	local06, #1
2f7e0     18 2A 06 F1 | 	add	local03, #24
2f7e4     15 2F 02 FB | 	rdlong	local05, local03
2f7e8     18 2A 86 F1 | 	sub	local03, #24
2f7ec     17 31 12 F2 | 	cmp	local06, local05 wc
2f7f0     02 30 06 36 |  if_ae	mov	local06, #2
2f7f4     18 15 02 F6 | 	mov	arg02, local06
2f7f8     13 13 02 F6 | 	mov	arg01, local01
2f7fc     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2f800     FD 2E 02 F6 | 	mov	local05, result1
2f804     01 2E 0E F2 | 	cmp	local05, #1 wz
2f808     FF FF 7F 5F 
2f80c     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2f810     17 FB 01 A6 |  if_e	mov	result1, local05
2f814     30 01 90 AD |  if_e	jmp	#LR__4591
2f818     00 2E 0E F2 | 	cmp	local05, #0 wz
2f81c     2C 00 90 AD |  if_e	jmp	#LR__4583
2f820     10 2A 06 F1 | 	add	local03, #16
2f824     15 33 02 FB | 	rdlong	local07, local03
2f828     10 2A 86 F1 | 	sub	local03, #16
2f82c     02 32 16 F2 | 	cmp	local07, #2 wc
2f830     14 00 90 CD |  if_b	jmp	#LR__4582
2f834     18 2A 06 F1 | 	add	local03, #24
2f838     15 2F 02 FB | 	rdlong	local05, local03
2f83c     18 2A 86 F1 | 	sub	local03, #24
2f840     17 33 12 F2 | 	cmp	local07, local05 wc
2f844     19 2D 02 C6 |  if_b	mov	local04, local07
2f848                 | LR__4582
2f848     00 30 06 F6 | 	mov	local06, #0
2f84c                 | LR__4583
2f84c                 | LR__4584
2f84c     00 30 0E F2 | 	cmp	local06, #0 wz
2f850     60 00 90 5D |  if_ne	jmp	#LR__4587
2f854     16 31 02 F6 | 	mov	local06, local04
2f858                 | ' 			ncl = scl;
2f858                 | ' 			for (;;) {
2f858                 | LR__4585
2f858     01 30 06 F1 | 	add	local06, #1
2f85c     18 2A 06 F1 | 	add	local03, #24
2f860     15 2F 02 FB | 	rdlong	local05, local03
2f864     18 2A 86 F1 | 	sub	local03, #24
2f868     17 31 12 F2 | 	cmp	local06, local05 wc
2f86c     02 30 06 36 |  if_ae	mov	local06, #2
2f870     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2f874     00 FA 05 16 |  if_a	mov	result1, #0
2f878     CC 00 90 1D |  if_a	jmp	#LR__4591
2f87c     18 15 02 F6 | 	mov	arg02, local06
2f880     13 13 02 F6 | 	mov	arg01, local01
2f884     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2f888     FD 32 0A F6 | 	mov	local07, result1 wz
2f88c     24 00 90 AD |  if_e	jmp	#LR__4586
2f890     01 32 0E F2 | 	cmp	local07, #1 wz
2f894     FF FF 7F 5F 
2f898     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2f89c     19 FB 01 A6 |  if_e	mov	result1, local07
2f8a0     A4 00 90 AD |  if_e	jmp	#LR__4591
2f8a4     16 31 0A F2 | 	cmp	local06, local04 wz
2f8a8     00 FA 05 A6 |  if_e	mov	result1, #0
2f8ac     98 00 90 AD |  if_e	jmp	#LR__4591
2f8b0     A4 FF 9F FD | 	jmp	#LR__4585
2f8b4                 | LR__4586
2f8b4                 | LR__4587
2f8b4     15 13 02 F6 | 	mov	arg01, local03
2f8b8     18 15 02 F6 | 	mov	arg02, local06
2f8bc     01 16 66 F6 | 	neg	arg03, #1
2f8c0     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2f8c4     FD 34 0A F6 | 	mov	local08, result1 wz
2f8c8     1C 00 90 5D |  if_ne	jmp	#LR__4588
2f8cc     00 28 0E F2 | 	cmp	local02, #0 wz
2f8d0     14 00 90 AD |  if_e	jmp	#LR__4588
2f8d4     15 13 02 F6 | 	mov	arg01, local03
2f8d8     14 15 02 F6 | 	mov	arg02, local02
2f8dc     18 17 02 F6 | 	mov	arg03, local06
2f8e0     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2f8e4     FD 34 02 F6 | 	mov	local08, result1
2f8e8                 | LR__4588
2f8e8     00 34 0E F2 | 	cmp	local08, #0 wz
2f8ec     4C 00 90 5D |  if_ne	jmp	#LR__4589
2f8f0     10 2A 06 F1 | 	add	local03, #16
2f8f4     15 31 62 FC | 	wrlong	local06, local03
2f8f8     08 2A 06 F1 | 	add	local03, #8
2f8fc     15 2F 02 FB | 	rdlong	local05, local03
2f900     02 2E 86 F1 | 	sub	local05, #2
2f904     04 2A 86 F1 | 	sub	local03, #4
2f908     15 37 02 FB | 	rdlong	local09, local03
2f90c     14 2A 86 F1 | 	sub	local03, #20
2f910     17 37 1A F2 | 	cmp	local09, local05 wcz
2f914     14 2A 06 E1 |  if_be	add	local03, #20
2f918     15 37 02 EB |  if_be	rdlong	local09, local03
2f91c     01 36 86 E1 |  if_be	sub	local09, #1
2f920     15 37 62 EC |  if_be	wrlong	local09, local03
2f924     14 2A 86 E1 |  if_be	sub	local03, #20
2f928     04 2A 06 F1 | 	add	local03, #4
2f92c     15 2F C2 FA | 	rdbyte	local05, local03
2f930     01 2E 46 F5 | 	or	local05, #1
2f934     15 2F 42 FC | 	wrbyte	local05, local03
2f938     08 00 90 FD | 	jmp	#LR__4590
2f93c                 | LR__4589
2f93c     01 34 0E F2 | 	cmp	local08, #1 wz
2f940     01 30 C6 F6 | 	negz	local06, #1
2f944                 | LR__4590
2f944                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2f944                 | ' 	}
2f944                 | ' 
2f944                 | ' 	return ncl;
2f944     18 FB 01 F6 | 	mov	result1, local06
2f948                 | LR__4591
2f948     A7 F0 03 F6 | 	mov	ptra, fp
2f94c     B2 00 A0 FD | 	call	#popregs_
2f950                 | _fatfs_cc_create_chain_ret
2f950     2D 00 64 FD | 	ret
2f954                 | 
2f954                 | _fatfs_cc_dir_clear
2f954     06 4A 05 F6 | 	mov	COUNT_, #6
2f958     A8 00 A0 FD | 	call	#pushregs_
2f95c     09 27 02 F6 | 	mov	local01, arg01
2f960     0A 29 02 F6 | 	mov	local02, arg02
2f964     13 13 02 F6 | 	mov	arg01, local01
2f968     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2f96c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f970     01 FA 05 56 |  if_ne	mov	result1, #1
2f974     90 00 90 5D |  if_ne	jmp	#LR__4602
2f978     13 13 02 F6 | 	mov	arg01, local01
2f97c     14 15 02 F6 | 	mov	arg02, local02
2f980     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2f984     FD 2A 02 F6 | 	mov	local03, result1
2f988     30 26 06 F1 | 	add	local01, #48
2f98c     13 2B 62 FC | 	wrlong	local03, local01
2f990     04 26 06 F1 | 	add	local01, #4
2f994     13 13 02 F6 | 	mov	arg01, local01
2f998     00 14 06 F6 | 	mov	arg02, #0
2f99c     09 16 C6 F9 | 	decod	arg03, #9
2f9a0     98 00 A0 FD | 	call	#\builtin_bytefill_
2f9a4     13 2D 02 F6 | 	mov	local04, local01
2f9a8                 | ' #line 1667 "ff.c"
2f9a8                 | ' 	{
2f9a8                 | ' 		ibuf = fs->win; szb = 1;
2f9a8                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2f9a8     00 2E 06 F6 | 	mov	local05, #0
2f9ac     34 26 86 F1 | 	sub	local01, #52
2f9b0                 | LR__4600
2f9b0     0A 26 06 F1 | 	add	local01, #10
2f9b4     13 31 E2 FA | 	rdword	local06, local01
2f9b8     0A 26 86 F1 | 	sub	local01, #10
2f9bc     18 2F 12 F2 | 	cmp	local05, local06 wc
2f9c0     2C 00 90 3D |  if_ae	jmp	#LR__4601
2f9c4     01 26 06 F1 | 	add	local01, #1
2f9c8     13 13 C2 FA | 	rdbyte	arg01, local01
2f9cc     01 26 86 F1 | 	sub	local01, #1
2f9d0     16 15 02 F6 | 	mov	arg02, local04
2f9d4     15 17 02 F6 | 	mov	arg03, local03
2f9d8     17 17 02 F1 | 	add	arg03, local05
2f9dc     01 18 06 F6 | 	mov	arg04, #1
2f9e0     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2f9e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f9e8     01 2E 06 A1 |  if_e	add	local05, #1
2f9ec     C0 FF 9F AD |  if_e	jmp	#LR__4600
2f9f0                 | LR__4601
2f9f0                 | ' 	}
2f9f0                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2f9f0     0A 26 06 F1 | 	add	local01, #10
2f9f4     13 2D E2 FA | 	rdword	local04, local01
2f9f8     16 2F 0A F2 | 	cmp	local05, local04 wz
2f9fc     00 30 06 A6 |  if_e	mov	local06, #0
2fa00     01 30 06 56 |  if_ne	mov	local06, #1
2fa04     18 FB 01 F6 | 	mov	result1, local06
2fa08                 | LR__4602
2fa08     A7 F0 03 F6 | 	mov	ptra, fp
2fa0c     B2 00 A0 FD | 	call	#popregs_
2fa10                 | _fatfs_cc_dir_clear_ret
2fa10     2D 00 64 FD | 	ret
2fa14                 | 
2fa14                 | _fatfs_cc_dir_sdi
2fa14     06 4A 05 F6 | 	mov	COUNT_, #6
2fa18     A8 00 A0 FD | 	call	#pushregs_
2fa1c     09 27 02 F6 | 	mov	local01, arg01
2fa20     0A 29 02 F6 | 	mov	local02, arg02
2fa24     13 2B 02 FB | 	rdlong	local03, local01
2fa28     00 10 00 FF 
2fa2c     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2fa30     1F 28 CE C7 |  if_b	test	local02, #31 wz
2fa34                 | ' 		return FR_INT_ERR;
2fa34     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2fa38     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4616
2fa3c     10 26 06 F1 | 	add	local01, #16
2fa40     13 29 62 FC | 	wrlong	local02, local01
2fa44     08 26 86 F1 | 	sub	local01, #8
2fa48     13 2D 0A FB | 	rdlong	local04, local01 wz
2fa4c     08 26 86 F1 | 	sub	local01, #8
2fa50     15 2F C2 AA |  if_e	rdbyte	local05, local03
2fa54     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2fa58     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2fa5c     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2fa60     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2fa64     00 2C 0E F2 | 	cmp	local04, #0 wz
2fa68     3C 00 90 5D |  if_ne	jmp	#LR__4610
2fa6c     14 2F 02 F6 | 	mov	local05, local02
2fa70     05 2E 46 F0 | 	shr	local05, #5
2fa74     08 2A 06 F1 | 	add	local03, #8
2fa78     15 15 E2 FA | 	rdword	arg02, local03
2fa7c     08 2A 86 F1 | 	sub	local03, #8
2fa80     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2fa84     02 FA 05 36 |  if_ae	mov	result1, #2
2fa88     E4 00 90 3D |  if_ae	jmp	#LR__4616
2fa8c     28 2A 06 F1 | 	add	local03, #40
2fa90     15 2F 02 FB | 	rdlong	local05, local03
2fa94     28 2A 86 F1 | 	sub	local03, #40
2fa98     18 26 06 F1 | 	add	local01, #24
2fa9c     13 2F 62 FC | 	wrlong	local05, local01
2faa0     18 26 86 F1 | 	sub	local01, #24
2faa4     7C 00 90 FD | 	jmp	#LR__4615
2faa8                 | LR__4610
2faa8     0A 2A 06 F1 | 	add	local03, #10
2faac     15 31 E2 FA | 	rdword	local06, local03
2fab0     0A 2A 86 F1 | 	sub	local03, #10
2fab4     09 30 66 F0 | 	shl	local06, #9
2fab8                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2fab8                 | ' 		while (ofs >= csz) {
2fab8                 | LR__4611
2fab8     18 29 12 F2 | 	cmp	local02, local06 wc
2fabc     4C 00 90 CD |  if_b	jmp	#LR__4614
2fac0     13 13 02 F6 | 	mov	arg01, local01
2fac4     16 15 02 F6 | 	mov	arg02, local04
2fac8     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2facc     FD 2C 02 F6 | 	mov	local04, result1
2fad0     FF FF 7F FF 
2fad4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2fad8     01 FA 05 A6 |  if_e	mov	result1, #1
2fadc     90 00 90 AD |  if_e	jmp	#LR__4616
2fae0     02 2C 16 F2 | 	cmp	local04, #2 wc
2fae4     14 00 90 CD |  if_b	jmp	#LR__4612
2fae8     18 2A 06 F1 | 	add	local03, #24
2faec     15 2F 02 FB | 	rdlong	local05, local03
2faf0     18 2A 86 F1 | 	sub	local03, #24
2faf4     17 2D 12 F2 | 	cmp	local04, local05 wc
2faf8     08 00 90 CD |  if_b	jmp	#LR__4613
2fafc                 | LR__4612
2fafc     02 FA 05 F6 | 	mov	result1, #2
2fb00     6C 00 90 FD | 	jmp	#LR__4616
2fb04                 | LR__4613
2fb04     18 29 82 F1 | 	sub	local02, local06
2fb08     AC FF 9F FD | 	jmp	#LR__4611
2fb0c                 | LR__4614
2fb0c     15 13 02 F6 | 	mov	arg01, local03
2fb10     16 15 02 F6 | 	mov	arg02, local04
2fb14     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2fb18     18 26 06 F1 | 	add	local01, #24
2fb1c     13 FB 61 FC | 	wrlong	result1, local01
2fb20     18 26 86 F1 | 	sub	local01, #24
2fb24                 | LR__4615
2fb24     14 26 06 F1 | 	add	local01, #20
2fb28     13 2D 62 FC | 	wrlong	local04, local01
2fb2c     04 26 06 F1 | 	add	local01, #4
2fb30     13 2F 0A FB | 	rdlong	local05, local01 wz
2fb34     18 26 86 F1 | 	sub	local01, #24
2fb38     02 FA 05 A6 |  if_e	mov	result1, #2
2fb3c     30 00 90 AD |  if_e	jmp	#LR__4616
2fb40     14 31 02 F6 | 	mov	local06, local02
2fb44     09 30 46 F0 | 	shr	local06, #9
2fb48     18 26 06 F1 | 	add	local01, #24
2fb4c     13 2F 02 FB | 	rdlong	local05, local01
2fb50     18 2F 02 F1 | 	add	local05, local06
2fb54     13 2F 62 FC | 	wrlong	local05, local01
2fb58     34 2A 06 F1 | 	add	local03, #52
2fb5c     FF 29 06 F5 | 	and	local02, #511
2fb60     14 2B 02 F1 | 	add	local03, local02
2fb64     04 26 06 F1 | 	add	local01, #4
2fb68     13 2B 62 FC | 	wrlong	local03, local01
2fb6c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2fb6c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2fb6c                 | ' 
2fb6c                 | ' 	return FR_OK;
2fb6c     00 FA 05 F6 | 	mov	result1, #0
2fb70                 | LR__4616
2fb70     A7 F0 03 F6 | 	mov	ptra, fp
2fb74     B2 00 A0 FD | 	call	#popregs_
2fb78                 | _fatfs_cc_dir_sdi_ret
2fb78     2D 00 64 FD | 	ret
2fb7c                 | 
2fb7c                 | _fatfs_cc_dir_next
2fb7c     05 4A 05 F6 | 	mov	COUNT_, #5
2fb80     A8 00 A0 FD | 	call	#pushregs_
2fb84     09 27 02 F6 | 	mov	local01, arg01
2fb88     0A 29 02 F6 | 	mov	local02, arg02
2fb8c     13 2B 02 FB | 	rdlong	local03, local01
2fb90     10 26 06 F1 | 	add	local01, #16
2fb94     13 2D 02 FB | 	rdlong	local04, local01
2fb98     10 26 86 F1 | 	sub	local01, #16
2fb9c     20 2C 06 F1 | 	add	local04, #32
2fba0     00 10 00 FF 
2fba4     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2fba8     18 26 06 31 |  if_ae	add	local01, #24
2fbac     13 01 68 3C |  if_ae	wrlong	#0, local01
2fbb0     18 26 86 31 |  if_ae	sub	local01, #24
2fbb4     18 26 06 F1 | 	add	local01, #24
2fbb8     13 15 0A FB | 	rdlong	arg02, local01 wz
2fbbc     18 26 86 F1 | 	sub	local01, #24
2fbc0     04 FA 05 A6 |  if_e	mov	result1, #4
2fbc4     64 01 90 AD |  if_e	jmp	#LR__4625
2fbc8     FF 2D CE F7 | 	test	local04, #511 wz
2fbcc     3C 01 90 5D |  if_ne	jmp	#LR__4624
2fbd0     18 26 06 F1 | 	add	local01, #24
2fbd4     13 15 02 FB | 	rdlong	arg02, local01
2fbd8     01 14 06 F1 | 	add	arg02, #1
2fbdc     13 15 62 FC | 	wrlong	arg02, local01
2fbe0     04 26 86 F1 | 	sub	local01, #4
2fbe4     13 15 0A FB | 	rdlong	arg02, local01 wz
2fbe8     14 26 86 F1 | 	sub	local01, #20
2fbec     2C 00 90 5D |  if_ne	jmp	#LR__4620
2fbf0     16 15 02 F6 | 	mov	arg02, local04
2fbf4     05 14 46 F0 | 	shr	arg02, #5
2fbf8     08 2A 06 F1 | 	add	local03, #8
2fbfc     15 29 E2 FA | 	rdword	local02, local03
2fc00     08 2A 86 F1 | 	sub	local03, #8
2fc04     14 15 12 F2 | 	cmp	arg02, local02 wc
2fc08     18 26 06 31 |  if_ae	add	local01, #24
2fc0c     13 01 68 3C |  if_ae	wrlong	#0, local01
2fc10                 | ' 				dp->sect = 0; return FR_NO_FILE;
2fc10     04 FA 05 36 |  if_ae	mov	result1, #4
2fc14     14 01 90 3D |  if_ae	jmp	#LR__4625
2fc18     F0 00 90 FD | 	jmp	#LR__4623
2fc1c                 | LR__4620
2fc1c     16 13 02 F6 | 	mov	arg01, local04
2fc20     09 12 46 F0 | 	shr	arg01, #9
2fc24     0A 2A 06 F1 | 	add	local03, #10
2fc28     15 15 E2 FA | 	rdword	arg02, local03
2fc2c     0A 2A 86 F1 | 	sub	local03, #10
2fc30     01 14 86 F1 | 	sub	arg02, #1
2fc34     0A 13 CA F7 | 	test	arg01, arg02 wz
2fc38     D0 00 90 5D |  if_ne	jmp	#LR__4622
2fc3c     13 13 02 F6 | 	mov	arg01, local01
2fc40     14 26 06 F1 | 	add	local01, #20
2fc44     13 15 02 FB | 	rdlong	arg02, local01
2fc48     14 26 86 F1 | 	sub	local01, #20
2fc4c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2fc50     FD 2E 02 F6 | 	mov	local05, result1
2fc54     02 2E 16 F2 | 	cmp	local05, #2 wc
2fc58     02 FA 05 C6 |  if_b	mov	result1, #2
2fc5c     CC 00 90 CD |  if_b	jmp	#LR__4625
2fc60     FF FF 7F FF 
2fc64     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2fc68     01 FA 05 A6 |  if_e	mov	result1, #1
2fc6c     BC 00 90 AD |  if_e	jmp	#LR__4625
2fc70     18 2A 06 F1 | 	add	local03, #24
2fc74     15 15 02 FB | 	rdlong	arg02, local03
2fc78     18 2A 86 F1 | 	sub	local03, #24
2fc7c     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2fc80     68 00 90 CD |  if_b	jmp	#LR__4621
2fc84     00 28 0E F2 | 	cmp	local02, #0 wz
2fc88     18 26 06 A1 |  if_e	add	local01, #24
2fc8c     13 01 68 AC |  if_e	wrlong	#0, local01
2fc90                 | ' 						dp->sect = 0; return FR_NO_FILE;
2fc90     04 FA 05 A6 |  if_e	mov	result1, #4
2fc94     94 00 90 AD |  if_e	jmp	#LR__4625
2fc98     13 13 02 F6 | 	mov	arg01, local01
2fc9c     14 26 06 F1 | 	add	local01, #20
2fca0     13 15 02 FB | 	rdlong	arg02, local01
2fca4     14 26 86 F1 | 	sub	local01, #20
2fca8     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2fcac     FD 2E 0A F6 | 	mov	local05, result1 wz
2fcb0     07 FA 05 A6 |  if_e	mov	result1, #7
2fcb4     74 00 90 AD |  if_e	jmp	#LR__4625
2fcb8     01 2E 0E F2 | 	cmp	local05, #1 wz
2fcbc     02 FA 05 A6 |  if_e	mov	result1, #2
2fcc0     68 00 90 AD |  if_e	jmp	#LR__4625
2fcc4     FF FF 7F FF 
2fcc8     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2fccc     01 FA 05 A6 |  if_e	mov	result1, #1
2fcd0     58 00 90 AD |  if_e	jmp	#LR__4625
2fcd4     17 15 02 F6 | 	mov	arg02, local05
2fcd8     15 13 02 F6 | 	mov	arg01, local03
2fcdc     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2fce0     00 FA 0D F2 | 	cmp	result1, #0 wz
2fce4     01 FA 05 56 |  if_ne	mov	result1, #1
2fce8     40 00 90 5D |  if_ne	jmp	#LR__4625
2fcec                 | LR__4621
2fcec     14 26 06 F1 | 	add	local01, #20
2fcf0     13 2F 62 FC | 	wrlong	local05, local01
2fcf4     15 13 02 F6 | 	mov	arg01, local03
2fcf8     17 15 02 F6 | 	mov	arg02, local05
2fcfc     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2fd00     04 26 06 F1 | 	add	local01, #4
2fd04     13 FB 61 FC | 	wrlong	result1, local01
2fd08     18 26 86 F1 | 	sub	local01, #24
2fd0c                 | LR__4622
2fd0c                 | LR__4623
2fd0c                 | LR__4624
2fd0c     10 26 06 F1 | 	add	local01, #16
2fd10     13 2D 62 FC | 	wrlong	local04, local01
2fd14     34 2A 06 F1 | 	add	local03, #52
2fd18     FF 2D 06 F5 | 	and	local04, #511
2fd1c     16 2B 02 F1 | 	add	local03, local04
2fd20     0C 26 06 F1 | 	add	local01, #12
2fd24     13 2B 62 FC | 	wrlong	local03, local01
2fd28                 | ' #line 1771 "ff.c"
2fd28                 | ' 				}
2fd28                 | ' 				dp->clust = clst;
2fd28                 | ' 				dp->sect = clst2sect(fs, clst);
2fd28                 | ' 			}
2fd28                 | ' 		}
2fd28                 | ' 	}
2fd28                 | ' 	dp->dptr = ofs;
2fd28                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2fd28                 | ' 
2fd28                 | ' 	return FR_OK;
2fd28     00 FA 05 F6 | 	mov	result1, #0
2fd2c                 | LR__4625
2fd2c     A7 F0 03 F6 | 	mov	ptra, fp
2fd30     B2 00 A0 FD | 	call	#popregs_
2fd34                 | _fatfs_cc_dir_next_ret
2fd34     2D 00 64 FD | 	ret
2fd38                 | 
2fd38                 | _fatfs_cc_dir_alloc
2fd38     08 4A 05 F6 | 	mov	COUNT_, #8
2fd3c     A8 00 A0 FD | 	call	#pushregs_
2fd40     09 27 02 F6 | 	mov	local01, arg01
2fd44     0A 29 02 F6 | 	mov	local02, arg02
2fd48     13 2B 02 FB | 	rdlong	local03, local01
2fd4c     13 13 02 F6 | 	mov	arg01, local01
2fd50     00 14 06 F6 | 	mov	arg02, #0
2fd54     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2fd58     FD 2C 0A F6 | 	mov	local04, result1 wz
2fd5c     70 00 90 5D |  if_ne	jmp	#LR__4634
2fd60     00 2E 06 F6 | 	mov	local05, #0
2fd64                 | ' 		n = 0;
2fd64                 | ' 		do {
2fd64                 | LR__4630
2fd64     18 26 06 F1 | 	add	local01, #24
2fd68     13 15 02 FB | 	rdlong	arg02, local01
2fd6c     18 26 86 F1 | 	sub	local01, #24
2fd70     15 13 02 F6 | 	mov	arg01, local03
2fd74     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2fd78     FD 2C 0A F6 | 	mov	local04, result1 wz
2fd7c     50 00 90 5D |  if_ne	jmp	#LR__4633
2fd80     1C 26 06 F1 | 	add	local01, #28
2fd84     13 31 02 FB | 	rdlong	local06, local01
2fd88     1C 26 86 F1 | 	sub	local01, #28
2fd8c     18 31 C2 FA | 	rdbyte	local06, local06
2fd90     E5 30 0E F2 | 	cmp	local06, #229 wz
2fd94     1C 26 06 51 |  if_ne	add	local01, #28
2fd98     13 33 02 5B |  if_ne	rdlong	local07, local01
2fd9c     1C 26 86 51 |  if_ne	sub	local01, #28
2fda0     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2fda4     10 00 90 5D |  if_ne	jmp	#LR__4631
2fda8     01 2E 06 F1 | 	add	local05, #1
2fdac     14 2F 0A F2 | 	cmp	local05, local02 wz
2fdb0     1C 00 90 AD |  if_e	jmp	#LR__4633
2fdb4     04 00 90 FD | 	jmp	#LR__4632
2fdb8                 | LR__4631
2fdb8     00 2E 06 F6 | 	mov	local05, #0
2fdbc                 | LR__4632
2fdbc     13 13 02 F6 | 	mov	arg01, local01
2fdc0     01 14 06 F6 | 	mov	arg02, #1
2fdc4     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2fdc8     FD 2C 0A F6 | 	mov	local04, result1 wz
2fdcc     94 FF 9F AD |  if_e	jmp	#LR__4630
2fdd0                 | LR__4633
2fdd0                 | LR__4634
2fdd0     04 2C 0E F2 | 	cmp	local04, #4 wz
2fdd4     07 2C 06 A6 |  if_e	mov	local04, #7
2fdd8                 | ' 	return res;
2fdd8     16 FB 01 F6 | 	mov	result1, local04
2fddc     A7 F0 03 F6 | 	mov	ptra, fp
2fde0     B2 00 A0 FD | 	call	#popregs_
2fde4                 | _fatfs_cc_dir_alloc_ret
2fde4     2D 00 64 FD | 	ret
2fde8                 | 
2fde8                 | _fatfs_cc_ld_clust
2fde8     09 01 02 F6 | 	mov	_var01, arg01
2fdec     0A 13 02 F6 | 	mov	arg01, arg02
2fdf0     1A 12 06 F1 | 	add	arg01, #26
2fdf4                 | ' {
2fdf4                 | ' 
2fdf4                 | ' 	return *((WORD*)ptr);
2fdf4     09 FB E1 FA | 	rdword	result1, arg01
2fdf8     FD 12 32 F9 | 	getword	arg01, result1, #0
2fdfc     00 01 C2 FA | 	rdbyte	_var01, _var01
2fe00     03 00 0E F2 | 	cmp	_var01, #3 wz
2fe04     14 14 06 A1 |  if_e	add	arg02, #20
2fe08                 | ' {
2fe08                 | ' 
2fe08                 | ' 	return *((WORD*)ptr);
2fe08     0A FB E1 AA |  if_e	rdword	result1, arg02
2fe0c     10 FA 65 A0 |  if_e	shl	result1, #16
2fe10     FD 12 42 A5 |  if_e	or	arg01, result1
2fe14                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2fe14                 | ' 	}
2fe14                 | ' 
2fe14                 | ' 	return cl;
2fe14     09 FB 01 F6 | 	mov	result1, arg01
2fe18                 | _fatfs_cc_ld_clust_ret
2fe18     2D 00 64 FD | 	ret
2fe1c                 | 
2fe1c                 | _fatfs_cc_st_clust
2fe1c     09 01 02 F6 | 	mov	_var01, arg01
2fe20     0A 13 02 F6 | 	mov	arg01, arg02
2fe24     1A 12 06 F1 | 	add	arg01, #26
2fe28     09 17 52 FC | 	wrword	arg03, arg01
2fe2c     00 01 C2 FA | 	rdbyte	_var01, _var01
2fe30     03 00 0E F2 | 	cmp	_var01, #3 wz
2fe34     14 14 06 A1 |  if_e	add	arg02, #20
2fe38     10 16 46 A0 |  if_e	shr	arg03, #16
2fe3c     0A 17 52 AC |  if_e	wrword	arg03, arg02
2fe40                 | _fatfs_cc_st_clust_ret
2fe40     2D 00 64 FD | 	ret
2fe44                 | 
2fe44                 | _fatfs_cc_cmp_lfn
2fe44     07 4A 05 F6 | 	mov	COUNT_, #7
2fe48     A8 00 A0 FD | 	call	#pushregs_
2fe4c     09 27 02 F6 | 	mov	local01, arg01
2fe50     0A 13 02 F6 | 	mov	arg01, arg02
2fe54     1A 12 06 F1 | 	add	arg01, #26
2fe58                 | ' {
2fe58                 | ' 
2fe58                 | ' 	return *((WORD*)ptr);
2fe58     09 FB E9 FA | 	rdword	result1, arg01 wz
2fe5c     00 FA 05 56 |  if_ne	mov	result1, #0
2fe60     E0 00 90 5D |  if_ne	jmp	#LR__4646
2fe64     0A 29 C2 FA | 	rdbyte	local02, arg02
2fe68     3F 28 06 F5 | 	and	local02, #63
2fe6c     01 28 86 F1 | 	sub	local02, #1
2fe70     0D 28 06 FD | 	qmul	local02, #13
2fe74                 | ' 
2fe74                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2fe74                 | ' 
2fe74                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2fe74     01 2A 06 F6 | 	mov	local03, #1
2fe78     00 2C 06 F6 | 	mov	local04, #0
2fe7c     18 2E 62 FD | 	getqx	local05
2fe80                 | LR__4640
2fe80     0D 2C 16 F2 | 	cmp	local04, #13 wc
2fe84     9C 00 90 3D |  if_ae	jmp	#LR__4645
2fe88     0A 13 02 F6 | 	mov	arg01, arg02
2fe8c     16 29 02 F6 | 	mov	local02, local04
2fe90     01 00 00 FF 
2fe94     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2fe98     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2fe9c     14 29 C2 FA | 	rdbyte	local02, local02
2fea0     01 28 06 FA | 	mul	local02, #1
2fea4     14 13 02 F1 | 	add	arg01, local02
2fea8     01 00 00 FF 
2feac     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2feb0                 | ' {
2feb0                 | ' 
2feb0                 | ' 	return *((WORD*)ptr);
2feb0     09 FB E1 FA | 	rdword	result1, arg01
2feb4     FD 30 02 F6 | 	mov	local06, result1
2feb8     15 29 02 F6 | 	mov	local02, local03
2febc     0F 28 4E F7 | 	zerox	local02, #15 wz
2fec0     44 00 90 AD |  if_e	jmp	#LR__4643
2fec4     00 2F 16 F2 | 	cmp	local05, #256 wc
2fec8     2C 00 90 3D |  if_ae	jmp	#LR__4641
2fecc     18 13 32 F9 | 	getword	arg01, local06, #0
2fed0     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2fed4     FD 28 02 F6 | 	mov	local02, result1
2fed8     17 2B 02 F6 | 	mov	local03, local05
2fedc     01 2A 66 F0 | 	shl	local03, #1
2fee0     13 2B 02 F1 | 	add	local03, local01
2fee4     15 13 E2 FA | 	rdword	arg01, local03
2fee8     01 2E 06 F1 | 	add	local05, #1
2feec     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2fef0     FD 28 0A F2 | 	cmp	local02, result1 wz
2fef4     08 00 90 AD |  if_e	jmp	#LR__4642
2fef8                 | LR__4641
2fef8                 | ' 				return 0;
2fef8     00 FA 05 F6 | 	mov	result1, #0
2fefc     44 00 90 FD | 	jmp	#LR__4646
2ff00                 | LR__4642
2ff00     18 2B 02 F6 | 	mov	local03, local06
2ff04     14 00 90 FD | 	jmp	#LR__4644
2ff08                 | LR__4643
2ff08     18 31 32 F9 | 	getword	local06, local06, #0
2ff0c     7F 00 00 FF 
2ff10     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2ff14     00 FA 05 56 |  if_ne	mov	result1, #0
2ff18     28 00 90 5D |  if_ne	jmp	#LR__4646
2ff1c                 | LR__4644
2ff1c     01 2C 06 F1 | 	add	local04, #1
2ff20     5C FF 9F FD | 	jmp	#LR__4640
2ff24                 | LR__4645
2ff24     0A 29 C2 FA | 	rdbyte	local02, arg02
2ff28     40 28 CE F7 | 	test	local02, #64 wz
2ff2c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2ff30     01 2E 66 50 |  if_ne	shl	local05, #1
2ff34     13 2F 02 51 |  if_ne	add	local05, local01
2ff38     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2ff3c     00 FA 05 56 |  if_ne	mov	result1, #0
2ff40                 | ' 
2ff40                 | ' 	return 1;
2ff40     01 FA 05 A6 |  if_e	mov	result1, #1
2ff44                 | LR__4646
2ff44     A7 F0 03 F6 | 	mov	ptra, fp
2ff48     B2 00 A0 FD | 	call	#popregs_
2ff4c                 | _fatfs_cc_cmp_lfn_ret
2ff4c     2D 00 64 FD | 	ret
2ff50                 | 
2ff50                 | _fatfs_cc_pick_lfn
2ff50     09 01 02 F6 | 	mov	_var01, arg01
2ff54     0A 13 02 F6 | 	mov	arg01, arg02
2ff58     1A 12 06 F1 | 	add	arg01, #26
2ff5c                 | ' {
2ff5c                 | ' 
2ff5c                 | ' 	return *((WORD*)ptr);
2ff5c     09 FB E9 FA | 	rdword	result1, arg01 wz
2ff60     00 FA 05 56 |  if_ne	mov	result1, #0
2ff64     D4 00 90 5D |  if_ne	jmp	#LR__4655
2ff68     0A 03 C2 FA | 	rdbyte	_var02, arg02
2ff6c     40 02 26 F5 | 	andn	_var02, #64
2ff70     01 02 86 F1 | 	sub	_var02, #1
2ff74     0D 02 06 FD | 	qmul	_var02, #13
2ff78                 | ' 
2ff78                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2ff78                 | ' 
2ff78                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2ff78     01 04 06 F6 | 	mov	_var03, #1
2ff7c     00 06 06 F6 | 	mov	_var04, #0
2ff80     18 08 62 FD | 	getqx	_var05
2ff84                 | LR__4650
2ff84     0D 06 16 F2 | 	cmp	_var04, #13 wc
2ff88     80 00 90 3D |  if_ae	jmp	#LR__4653
2ff8c     0A 13 02 F6 | 	mov	arg01, arg02
2ff90     03 03 02 F6 | 	mov	_var02, _var04
2ff94     01 00 00 FF 
2ff98     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2ff9c     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2ffa0     01 03 C2 FA | 	rdbyte	_var02, _var02
2ffa4     01 02 06 FA | 	mul	_var02, #1
2ffa8     01 13 02 F1 | 	add	arg01, _var02
2ffac     01 00 00 FF 
2ffb0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2ffb4                 | ' {
2ffb4                 | ' 
2ffb4                 | ' 	return *((WORD*)ptr);
2ffb4     09 FB E1 FA | 	rdword	result1, arg01
2ffb8     FD 0A 02 F6 | 	mov	_var06, result1
2ffbc     02 03 02 F6 | 	mov	_var02, _var03
2ffc0     0F 02 4E F7 | 	zerox	_var02, #15 wz
2ffc4     28 00 90 AD |  if_e	jmp	#LR__4651
2ffc8     00 09 16 F2 | 	cmp	_var05, #256 wc
2ffcc     00 FA 05 36 |  if_ae	mov	result1, #0
2ffd0     68 00 90 3D |  if_ae	jmp	#LR__4655
2ffd4     04 03 02 F6 | 	mov	_var02, _var05
2ffd8     01 02 66 F0 | 	shl	_var02, #1
2ffdc     00 03 02 F1 | 	add	_var02, _var01
2ffe0     05 05 02 F6 | 	mov	_var03, _var06
2ffe4     01 05 52 FC | 	wrword	_var03, _var02
2ffe8     01 08 06 F1 | 	add	_var05, #1
2ffec     14 00 90 FD | 	jmp	#LR__4652
2fff0                 | LR__4651
2fff0     05 0B 32 F9 | 	getword	_var06, _var06, #0
2fff4     7F 00 00 FF 
2fff8     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2fffc     00 FA 05 56 |  if_ne	mov	result1, #0
30000     38 00 90 5D |  if_ne	jmp	#LR__4655
30004                 | LR__4652
30004     01 06 06 F1 | 	add	_var04, #1
30008     78 FF 9F FD | 	jmp	#LR__4650
3000c                 | LR__4653
3000c     0A 03 C2 FA | 	rdbyte	_var02, arg02
30010     40 02 CE F7 | 	test	_var02, #64 wz
30014     02 0D 02 56 |  if_ne	mov	_var07, _var03
30018     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
3001c     18 00 90 AD |  if_e	jmp	#LR__4654
30020     00 09 16 F2 | 	cmp	_var05, #256 wc
30024     00 FA 05 36 |  if_ae	mov	result1, #0
30028     10 00 90 3D |  if_ae	jmp	#LR__4655
3002c     01 08 66 F0 | 	shl	_var05, #1
30030     00 09 02 F1 | 	add	_var05, _var01
30034     04 01 58 FC | 	wrword	#0, _var05
30038                 | LR__4654
30038                 | ' 		lfnbuf[i] = 0;
30038                 | ' 	}
30038                 | ' 
30038                 | ' 	return 1;
30038     01 FA 05 F6 | 	mov	result1, #1
3003c                 | LR__4655
3003c                 | _fatfs_cc_pick_lfn_ret
3003c     2D 00 64 FD | 	ret
30040                 | 
30040                 | _fatfs_cc_put_lfn
30040     0D 14 06 F1 | 	add	arg02, #13
30044     0A 19 42 FC | 	wrbyte	arg04, arg02
30048     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
3004c     01 18 86 F1 | 	sub	arg04, #1
30050     0D 18 06 FD | 	qmul	arg04, #13
30054     09 01 02 F6 | 	mov	_var01, arg01
30058     02 14 86 F1 | 	sub	arg02, #2
3005c     0A 1F 48 FC | 	wrbyte	#15, arg02
30060     01 14 06 F1 | 	add	arg02, #1
30064     0A 01 48 FC | 	wrbyte	#0, arg02
30068     0C 14 86 F1 | 	sub	arg02, #12
3006c     0A 13 02 F6 | 	mov	arg01, arg02
30070     1A 12 06 F1 | 	add	arg01, #26
30074     09 01 58 FC | 	wrword	#0, arg01
30078     00 02 06 F6 | 	mov	_var02, #0
3007c     00 04 06 F6 | 	mov	_var03, #0
30080                 | ' 	BYTE* dir,
30080                 | ' 	BYTE ord,
30080                 | ' 	BYTE sum
30080                 | ' )
30080                 | ' {
30080                 | ' 	UINT i, s;
30080                 | ' 	WCHAR wc;
30080                 | ' 
30080                 | ' 
30080                 | ' 	dir[ 13 ] = sum;
30080                 | ' 	dir[ 11 ] =  0x0F ;
30080                 | ' 	dir[ 12 ] = 0;
30080                 | ' 	st_word(dir +  26 , 0);
30080                 | ' 
30080                 | ' 	i = (ord - 1) * 13;
30080                 | ' 	s = wc = 0;
30080                 | ' 	do {
30080     01 00 00 FF 
30084     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
30088     18 06 62 FD | 	getqx	_var04
3008c     97 2A 48 FB | 	callpa	#(@LR__4661-@LR__4660)>>2,fcache_load_ptr_
30090                 | LR__4660
30090     01 19 32 F9 | 	getword	arg04, _var02, #0
30094     7F 00 00 FF 
30098     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
3009c     03 13 02 56 |  if_ne	mov	arg01, _var04
300a0     01 06 06 51 |  if_ne	add	_var04, #1
300a4     01 12 66 50 |  if_ne	shl	arg01, #1
300a8     00 13 02 51 |  if_ne	add	arg01, _var01
300ac     09 03 E2 5A |  if_ne	rdword	_var02, arg01
300b0     0A 13 02 F6 | 	mov	arg01, arg02
300b4     02 19 02 F6 | 	mov	arg04, _var03
300b8     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
300bc     0C 19 C2 FA | 	rdbyte	arg04, arg04
300c0     01 18 06 FA | 	mul	arg04, #1
300c4     0C 13 02 F1 | 	add	arg01, arg04
300c8     09 03 52 FC | 	wrword	_var02, arg01
300cc     01 19 02 F6 | 	mov	arg04, _var02
300d0     0F 18 4E F7 | 	zerox	arg04, #15 wz
300d4     0F 02 CE A9 |  if_e	bmask	_var02, #15
300d8     01 04 06 F1 | 	add	_var03, #1
300dc     0D 04 16 F2 | 	cmp	_var03, #13 wc
300e0     AC FF 9F CD |  if_b	jmp	#LR__4660
300e4                 | LR__4661
300e4     01 00 00 FF 
300e8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
300ec     01 03 32 F9 | 	getword	_var02, _var02, #0
300f0     7F 00 00 FF 
300f4     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
300f8     01 06 66 50 |  if_ne	shl	_var04, #1
300fc     00 07 02 51 |  if_ne	add	_var04, _var01
30100     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
30104     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
30108     40 16 46 A5 |  if_e	or	arg03, #64
3010c     0A 17 42 FC | 	wrbyte	arg03, arg02
30110                 | _fatfs_cc_put_lfn_ret
30110     2D 00 64 FD | 	ret
30114                 | 
30114                 | _fatfs_cc_gen_numname
30114     08 4A 05 F6 | 	mov	COUNT_, #8
30118     A8 00 A0 FD | 	call	#pushregs_
3011c     2C F0 07 F1 | 	add	ptra, #44
30120     09 27 02 F6 | 	mov	local01, arg01
30124     0A 29 02 F6 | 	mov	local02, arg02
30128     0B 2B 02 F6 | 	mov	local03, arg03
3012c     0C 2D 02 F6 | 	mov	local04, arg04
30130     13 13 02 F6 | 	mov	arg01, local01
30134     14 15 02 F6 | 	mov	arg02, local02
30138     0B 16 06 F6 | 	mov	arg03, #11
3013c     28 72 BF FD | 	call	#__system____builtin_memmove
30140     06 2C 16 F2 | 	cmp	local04, #6 wc
30144     48 00 90 CD |  if_b	jmp	#LR__4675
30148     16 2F 02 F6 | 	mov	local05, local04
3014c     97 1E 48 FB | 	callpa	#(@LR__4673-@LR__4670)>>2,fcache_load_ptr_
30150                 | ' 		sreg = seq;
30150                 | ' 		while (*lfn) {
30150                 | LR__4670
30150     15 31 EA FA | 	rdword	local06, local03 wz
30154     34 00 90 AD |  if_e	jmp	#LR__4674
30158     15 33 E2 FA | 	rdword	local07, local03
3015c                 | ' 			wc = *lfn++;
3015c                 | ' 			for (i = 0; i < 16; i++) {
3015c     02 2A 06 F1 | 	add	local03, #2
30160     10 12 DC FC | 	rep	@LR__4672, #16
30164                 | LR__4671
30164     01 2E 66 F0 | 	shl	local05, #1
30168     19 31 32 F9 | 	getword	local06, local07, #0
3016c     01 30 06 F5 | 	and	local06, #1
30170     18 2F 02 F1 | 	add	local05, local06
30174     19 33 32 F9 | 	getword	local07, local07, #0
30178     01 32 46 F0 | 	shr	local07, #1
3017c     10 2E 2E F4 | 	testbn	local05, #16 wz
30180     88 00 00 5F 
30184     21 2E 66 55 |  if_ne	xor	local05, ##69665
30188                 | LR__4672
30188     C4 FF 9F FD | 	jmp	#LR__4670
3018c                 | LR__4673
3018c                 | LR__4674
3018c     17 2D 02 F6 | 	mov	local04, local05
30190                 | LR__4675
30190     07 32 06 F6 | 	mov	local07, #7
30194                 | ' 			}
30194                 | ' 		}
30194                 | ' 		seq = (UINT)sreg;
30194                 | ' 	}
30194                 | ' 
30194                 | ' 
30194                 | ' 	i = 7;
30194                 | ' 	do {
30194     10 4E 05 F1 | 	add	fp, #16
30198     97 1A 48 FB | 	callpa	#(@LR__4677-@LR__4676)>>2,fcache_load_ptr_
3019c                 | LR__4676
3019c     16 2F 42 F8 | 	getnib	local05, local04, #0
301a0     30 2E 06 F1 | 	add	local05, #48
301a4     04 2C 46 F0 | 	shr	local04, #4
301a8     17 31 E2 F8 | 	getbyte	local06, local05, #0
301ac     3A 30 16 F2 | 	cmp	local06, #58 wc
301b0     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
301b4     07 2E 06 31 |  if_ae	add	local05, #7
301b8     19 31 02 F6 | 	mov	local06, local07
301bc     01 32 8E F1 | 	sub	local07, #1 wz
301c0     A7 30 02 F1 | 	add	local06, fp
301c4     18 2F 42 FC | 	wrbyte	local05, local06
301c8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
301cc     CC FF 9F 5D |  if_ne	jmp	#LR__4676
301d0                 | LR__4677
301d0     19 31 02 F6 | 	mov	local06, local07
301d4     A7 30 02 F1 | 	add	local06, fp
301d8     18 FD 48 FC | 	wrbyte	#126, local06
301dc                 | ' 	ns[i] = '~';
301dc                 | ' 
301dc                 | ' 
301dc                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
301dc     00 2E 06 F6 | 	mov	local05, #0
301e0     10 4E 85 F1 | 	sub	fp, #16
301e4     97 2A 48 FB | 	callpa	#(@LR__4680-@LR__4678)>>2,fcache_load_ptr_
301e8                 | LR__4678
301e8     19 2F 12 F2 | 	cmp	local05, local07 wc
301ec     4C 00 90 3D |  if_ae	jmp	#LR__4681
301f0     17 31 02 F6 | 	mov	local06, local05
301f4     13 31 02 F1 | 	add	local06, local01
301f8     18 31 C2 FA | 	rdbyte	local06, local06
301fc     20 30 0E F2 | 	cmp	local06, #32 wz
30200     38 00 90 AD |  if_e	jmp	#LR__4681
30204     17 13 02 F6 | 	mov	arg01, local05
30208     13 13 02 F1 | 	add	arg01, local01
3020c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
30210     00 FA 05 56 |  if_ne	mov	result1, #0
30214                 | ' 
30214                 | ' 	return 0;
30214     00 FA 05 A6 |  if_e	mov	result1, #0
30218     00 FA 0D F2 | 	cmp	result1, #0 wz
3021c     14 00 90 AD |  if_e	jmp	#LR__4679
30220     19 31 02 F6 | 	mov	local06, local07
30224     01 30 86 F1 | 	sub	local06, #1
30228     18 2F 0A F2 | 	cmp	local05, local06 wz
3022c     0C 00 90 AD |  if_e	jmp	#LR__4681
30230     01 2E 06 F1 | 	add	local05, #1
30234                 | LR__4679
30234     01 2E 06 F1 | 	add	local05, #1
30238     AC FF 9F FD | 	jmp	#LR__4678
3023c                 | LR__4680
3023c                 | LR__4681
3023c     97 20 48 FB | 	callpa	#(@LR__4685-@LR__4682)>>2,fcache_load_ptr_
30240                 | ' 			j++;
30240                 | ' 		}
30240                 | ' 	}
30240                 | ' 	do {
30240                 | LR__4682
30240     17 31 02 F6 | 	mov	local06, local05
30244     13 31 02 F1 | 	add	local06, local01
30248     08 32 16 F2 | 	cmp	local07, #8 wc
3024c     01 2E 06 F1 | 	add	local05, #1
30250     1C 00 90 3D |  if_ae	jmp	#LR__4683
30254     19 2D 02 F6 | 	mov	local04, local07
30258     10 4E 05 F1 | 	add	fp, #16
3025c     A7 2C 02 F1 | 	add	local04, fp
30260     16 35 C2 FA | 	rdbyte	local08, local04
30264     01 32 06 F1 | 	add	local07, #1
30268     10 4E 85 F1 | 	sub	fp, #16
3026c     04 00 90 FD | 	jmp	#LR__4684
30270                 | LR__4683
30270     20 34 06 F6 | 	mov	local08, #32
30274                 | LR__4684
30274     18 35 42 FC | 	wrbyte	local08, local06
30278     08 2E 16 F2 | 	cmp	local05, #8 wc
3027c     C0 FF 9F CD |  if_b	jmp	#LR__4682
30280                 | LR__4685
30280     A7 F0 03 F6 | 	mov	ptra, fp
30284     B2 00 A0 FD | 	call	#popregs_
30288                 | _fatfs_cc_gen_numname_ret
30288     2D 00 64 FD | 	ret
3028c                 | 
3028c                 | _fatfs_cc_sum_sfn
3028c     00 00 06 F6 | 	mov	_var01, #0
30290                 | ' )
30290                 | ' {
30290                 | ' 	BYTE sum = 0;
30290                 | ' 	UINT n = 11;
30290                 | ' 
30290                 | ' 	do {
30290     97 12 48 FB | 	callpa	#(@LR__4692-@LR__4690)>>2,fcache_load_ptr_
30294                 | LR__4690
30294     0B 10 DC FC | 	rep	@LR__4693, #11
30298                 | LR__4691
30298     00 FB E1 F8 | 	getbyte	result1, _var01, #0
3029c     01 FA 45 F0 | 	shr	result1, #1
302a0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
302a4     07 00 66 F0 | 	shl	_var01, #7
302a8     00 FB 01 F1 | 	add	result1, _var01
302ac     09 01 C2 FA | 	rdbyte	_var01, arg01
302b0     FD 00 02 F1 | 	add	_var01, result1
302b4     01 12 06 F1 | 	add	arg01, #1
302b8                 | LR__4692
302b8                 | LR__4693
302b8                 | ' 	return sum;
302b8     00 FB 01 F6 | 	mov	result1, _var01
302bc                 | _fatfs_cc_sum_sfn_ret
302bc     2D 00 64 FD | 	ret
302c0                 | 
302c0                 | _fatfs_cc_dir_read
302c0     0C 4A 05 F6 | 	mov	COUNT_, #12
302c4     A8 00 A0 FD | 	call	#pushregs_
302c8     09 27 02 F6 | 	mov	local01, arg01
302cc     0A 29 02 F6 | 	mov	local02, arg02
302d0     04 2A 06 F6 | 	mov	local03, #4
302d4     13 2D 02 FB | 	rdlong	local04, local01
302d8     FF 2E 06 F6 | 	mov	local05, #255
302dc     FF 30 06 F6 | 	mov	local06, #255
302e0                 | ' )
302e0                 | ' {
302e0                 | ' 	FRESULT res = FR_NO_FILE;
302e0                 | ' 	FATFS *fs = dp->obj.fs;
302e0                 | ' 	BYTE attr, b;
302e0                 | ' 
302e0                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
302e0                 | ' 
302e0                 | ' 
302e0                 | ' 	while (dp->sect) {
302e0                 | LR__4700
302e0     18 26 06 F1 | 	add	local01, #24
302e4     13 FB 09 FB | 	rdlong	result1, local01 wz
302e8     18 26 86 F1 | 	sub	local01, #24
302ec     AC 01 90 AD |  if_e	jmp	#LR__4710
302f0     18 26 06 F1 | 	add	local01, #24
302f4     13 15 02 FB | 	rdlong	arg02, local01
302f8     18 26 86 F1 | 	sub	local01, #24
302fc     16 13 02 F6 | 	mov	arg01, local04
30300     AC ED BF FD | 	call	#_fatfs_cc_move_window
30304     FD 2A 0A F6 | 	mov	local03, result1 wz
30308     90 01 90 5D |  if_ne	jmp	#LR__4710
3030c     1C 26 06 F1 | 	add	local01, #28
30310     13 FB 01 FB | 	rdlong	result1, local01
30314     1C 26 86 F1 | 	sub	local01, #28
30318     FD 32 C2 FA | 	rdbyte	local07, result1
3031c     19 FB 01 F6 | 	mov	result1, local07
30320     07 FA 4D F7 | 	zerox	result1, #7 wz
30324     04 2A 06 A6 |  if_e	mov	local03, #4
30328                 | ' 			res = FR_NO_FILE; break;
30328     70 01 90 AD |  if_e	jmp	#LR__4710
3032c     1C 26 06 F1 | 	add	local01, #28
30330     13 35 02 FB | 	rdlong	local08, local01
30334     0B 34 06 F1 | 	add	local08, #11
30338     1A 37 C2 FA | 	rdbyte	local09, local08
3033c     3F 36 06 F5 | 	and	local09, #63
30340     16 26 86 F1 | 	sub	local01, #22
30344     13 37 42 FC | 	wrbyte	local09, local01
30348     06 26 86 F1 | 	sub	local01, #6
3034c     19 FB E1 F8 | 	getbyte	result1, local07, #0
30350     E5 FA 0D F2 | 	cmp	result1, #229 wz
30354     19 35 02 56 |  if_ne	mov	local08, local07
30358     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
3035c     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
30360     1C 00 90 AD |  if_e	jmp	#LR__4701
30364     00 38 06 F6 | 	mov	local10, #0
30368     1B 35 E2 F8 | 	getbyte	local08, local09, #0
3036c     20 34 26 F5 | 	andn	local08, #32
30370     08 34 0E F2 | 	cmp	local08, #8 wz
30374     01 38 06 A6 |  if_e	mov	local10, #1
30378     14 39 0A F2 | 	cmp	local10, local02 wz
3037c     08 00 90 AD |  if_e	jmp	#LR__4702
30380                 | LR__4701
30380     FF 2E 06 F6 | 	mov	local05, #255
30384     00 01 90 FD | 	jmp	#LR__4709
30388                 | LR__4702
30388     1B 37 E2 F8 | 	getbyte	local09, local09, #0
3038c     0F 36 0E F2 | 	cmp	local09, #15 wz
30390     B4 00 90 5D |  if_ne	jmp	#LR__4706
30394     19 3B E2 F8 | 	getbyte	local11, local07, #0
30398     40 3A CE F7 | 	test	local11, #64 wz
3039c     30 00 90 AD |  if_e	jmp	#LR__4703
303a0     1C 26 06 F1 | 	add	local01, #28
303a4     13 3B 02 FB | 	rdlong	local11, local01
303a8     0D 3A 06 F1 | 	add	local11, #13
303ac     1D 31 C2 FA | 	rdbyte	local06, local11
303b0     19 33 E2 F8 | 	getbyte	local07, local07, #0
303b4     BF 32 06 F5 | 	and	local07, #191
303b8     19 2F 02 F6 | 	mov	local05, local07
303bc     0C 26 86 F1 | 	sub	local01, #12
303c0     13 3B 02 FB | 	rdlong	local11, local01
303c4     1C 26 06 F1 | 	add	local01, #28
303c8     13 3B 62 FC | 	wrlong	local11, local01
303cc     2C 26 86 F1 | 	sub	local01, #44
303d0                 | LR__4703
303d0     19 35 E2 F8 | 	getbyte	local08, local07, #0
303d4     17 39 E2 F8 | 	getbyte	local10, local05, #0
303d8     1C 35 0A F2 | 	cmp	local08, local10 wz
303dc     5C 00 90 5D |  if_ne	jmp	#LR__4704
303e0     18 39 E2 F8 | 	getbyte	local10, local06, #0
303e4     1C 26 06 F1 | 	add	local01, #28
303e8     13 37 02 FB | 	rdlong	local09, local01
303ec     1C 26 86 F1 | 	sub	local01, #28
303f0     0D 36 06 F1 | 	add	local09, #13
303f4     1B 35 C2 FA | 	rdbyte	local08, local09
303f8     1A 37 E2 F8 | 	getbyte	local09, local08, #0
303fc     1B 39 0A F2 | 	cmp	local10, local09 wz
30400     38 00 90 5D |  if_ne	jmp	#LR__4704
30404     0C 2C 06 F1 | 	add	local04, #12
30408     16 13 02 FB | 	rdlong	arg01, local04
3040c     0C 2C 86 F1 | 	sub	local04, #12
30410     1C 26 06 F1 | 	add	local01, #28
30414     13 3D 02 FB | 	rdlong	local12, local01
30418     1C 26 86 F1 | 	sub	local01, #28
3041c     1E 15 02 F6 | 	mov	arg02, local12
30420     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
30424     00 FA 4D F2 | 	cmps	result1, #0 wz
30428     17 3D 02 56 |  if_ne	mov	local12, local05
3042c     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
30430     01 3C 86 51 |  if_ne	sub	local12, #1
30434     1E 3B 02 56 |  if_ne	mov	local11, local12
30438     04 00 90 5D |  if_ne	jmp	#LR__4705
3043c                 | LR__4704
3043c     FF 3A 06 F6 | 	mov	local11, #255
30440                 | LR__4705
30440     1D 2F 02 F6 | 	mov	local05, local11
30444     40 00 90 FD | 	jmp	#LR__4708
30448                 | LR__4706
30448     17 3B 02 F6 | 	mov	local11, local05
3044c     07 3A 4E F7 | 	zerox	local11, #7 wz
30450     20 00 90 5D |  if_ne	jmp	#LR__4707
30454     18 31 E2 F8 | 	getbyte	local06, local06, #0
30458     1C 26 06 F1 | 	add	local01, #28
3045c     13 13 02 FB | 	rdlong	arg01, local01
30460     1C 26 86 F1 | 	sub	local01, #28
30464     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
30468     FD FA E1 F8 | 	getbyte	result1, result1, #0
3046c     FD 30 0A F2 | 	cmp	local06, result1 wz
30470     28 00 90 AD |  if_e	jmp	#LR__4710
30474                 | LR__4707
30474     2C 26 06 F1 | 	add	local01, #44
30478     FF FF FF FF 
3047c     13 FF 6B FC | 	wrlong	##-1, local01
30480     2C 26 86 F1 | 	sub	local01, #44
30484                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
30484                 | ' 					}
30484                 | ' 					break;
30484     14 00 90 FD | 	jmp	#LR__4710
30488                 | LR__4708
30488                 | LR__4709
30488     13 13 02 F6 | 	mov	arg01, local01
3048c     00 14 06 F6 | 	mov	arg02, #0
30490     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
30494     FD 2A 0A F6 | 	mov	local03, result1 wz
30498     44 FE 9F AD |  if_e	jmp	#LR__4700
3049c                 | LR__4710
3049c     00 2A 0E F2 | 	cmp	local03, #0 wz
304a0     18 26 06 51 |  if_ne	add	local01, #24
304a4     13 01 68 5C |  if_ne	wrlong	#0, local01
304a8                 | ' 	return res;
304a8     15 FB 01 F6 | 	mov	result1, local03
304ac     A7 F0 03 F6 | 	mov	ptra, fp
304b0     B2 00 A0 FD | 	call	#popregs_
304b4                 | _fatfs_cc_dir_read_ret
304b4     2D 00 64 FD | 	ret
304b8                 | 
304b8                 | _fatfs_cc_dir_find
304b8     0B 4A 05 F6 | 	mov	COUNT_, #11
304bc     A8 00 A0 FD | 	call	#pushregs_
304c0     09 27 02 F6 | 	mov	local01, arg01
304c4     13 29 02 FB | 	rdlong	local02, local01
304c8     13 13 02 F6 | 	mov	arg01, local01
304cc     00 14 06 F6 | 	mov	arg02, #0
304d0     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
304d4     00 FA 0D F2 | 	cmp	result1, #0 wz
304d8     18 02 90 5D |  if_ne	jmp	#LR__4732
304dc     FF 2A 06 F6 | 	mov	local03, #255
304e0     FF 2C 06 F6 | 	mov	local04, #255
304e4     2C 26 06 F1 | 	add	local01, #44
304e8     FF FF FF FF 
304ec     13 FF 6B FC | 	wrlong	##-1, local01
304f0     2C 26 86 F1 | 	sub	local01, #44
304f4                 | ' #line 2404 "ff.c"
304f4                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
304f4                 | ' 
304f4                 | ' 	do {
304f4                 | LR__4720
304f4     18 26 06 F1 | 	add	local01, #24
304f8     13 15 02 FB | 	rdlong	arg02, local01
304fc     18 26 86 F1 | 	sub	local01, #24
30500     14 13 02 F6 | 	mov	arg01, local02
30504     A8 EB BF FD | 	call	#_fatfs_cc_move_window
30508     FD 2E 0A F6 | 	mov	local05, result1 wz
3050c     E0 01 90 5D |  if_ne	jmp	#LR__4731
30510     1C 26 06 F1 | 	add	local01, #28
30514     13 17 02 FB | 	rdlong	arg03, local01
30518     1C 26 86 F1 | 	sub	local01, #28
3051c     0B 31 C2 FA | 	rdbyte	local06, arg03
30520     18 17 02 F6 | 	mov	arg03, local06
30524     07 16 4E F7 | 	zerox	arg03, #7 wz
30528     04 2E 06 A6 |  if_e	mov	local05, #4
3052c     C0 01 90 AD |  if_e	jmp	#LR__4731
30530     1C 26 06 F1 | 	add	local01, #28
30534     13 33 02 FB | 	rdlong	local07, local01
30538     19 17 02 F6 | 	mov	arg03, local07
3053c     0B 16 06 F1 | 	add	arg03, #11
30540     0B 35 C2 FA | 	rdbyte	local08, arg03
30544     3F 34 06 F5 | 	and	local08, #63
30548     16 26 86 F1 | 	sub	local01, #22
3054c     13 35 42 FC | 	wrbyte	local08, local01
30550     06 26 86 F1 | 	sub	local01, #6
30554     18 17 E2 F8 | 	getbyte	arg03, local06, #0
30558     E5 16 0E F2 | 	cmp	arg03, #229 wz
3055c     18 00 90 AD |  if_e	jmp	#LR__4721
30560     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
30564     08 16 CE F7 | 	test	arg03, #8 wz
30568     1A 33 02 56 |  if_ne	mov	local07, local08
3056c     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
30570     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
30574     18 00 90 AD |  if_e	jmp	#LR__4722
30578                 | LR__4721
30578     FF 2C 06 F6 | 	mov	local04, #255
3057c     2C 26 06 F1 | 	add	local01, #44
30580     FF FF FF FF 
30584     13 FF 6B FC | 	wrlong	##-1, local01
30588     2C 26 86 F1 | 	sub	local01, #44
3058c     4C 01 90 FD | 	jmp	#LR__4730
30590                 | LR__4722
30590     1A 35 E2 F8 | 	getbyte	local08, local08, #0
30594     0F 34 0E F2 | 	cmp	local08, #15 wz
30598     C8 00 90 5D |  if_ne	jmp	#LR__4726
3059c     2B 26 06 F1 | 	add	local01, #43
305a0     13 35 C2 FA | 	rdbyte	local08, local01
305a4     2B 26 86 F1 | 	sub	local01, #43
305a8     40 34 CE F7 | 	test	local08, #64 wz
305ac     2C 01 90 5D |  if_ne	jmp	#LR__4729
305b0     18 37 E2 F8 | 	getbyte	local09, local06, #0
305b4     40 36 CE F7 | 	test	local09, #64 wz
305b8     30 00 90 AD |  if_e	jmp	#LR__4723
305bc     1C 26 06 F1 | 	add	local01, #28
305c0     13 37 02 FB | 	rdlong	local09, local01
305c4     0D 36 06 F1 | 	add	local09, #13
305c8     1B 2B C2 FA | 	rdbyte	local03, local09
305cc     18 31 E2 F8 | 	getbyte	local06, local06, #0
305d0     BF 30 06 F5 | 	and	local06, #191
305d4     18 2D 02 F6 | 	mov	local04, local06
305d8     0C 26 86 F1 | 	sub	local01, #12
305dc     13 37 02 FB | 	rdlong	local09, local01
305e0     1C 26 06 F1 | 	add	local01, #28
305e4     13 37 62 FC | 	wrlong	local09, local01
305e8     2C 26 86 F1 | 	sub	local01, #44
305ec                 | LR__4723
305ec     18 39 E2 F8 | 	getbyte	local10, local06, #0
305f0     16 33 E2 F8 | 	getbyte	local07, local04, #0
305f4     19 39 0A F2 | 	cmp	local10, local07 wz
305f8     5C 00 90 5D |  if_ne	jmp	#LR__4724
305fc     15 35 E2 F8 | 	getbyte	local08, local03, #0
30600     1C 26 06 F1 | 	add	local01, #28
30604     13 33 02 FB | 	rdlong	local07, local01
30608     1C 26 86 F1 | 	sub	local01, #28
3060c     0D 32 06 F1 | 	add	local07, #13
30610     19 31 C2 FA | 	rdbyte	local06, local07
30614     18 33 E2 F8 | 	getbyte	local07, local06, #0
30618     19 35 0A F2 | 	cmp	local08, local07 wz
3061c     38 00 90 5D |  if_ne	jmp	#LR__4724
30620     0C 28 06 F1 | 	add	local02, #12
30624     14 13 02 FB | 	rdlong	arg01, local02
30628     0C 28 86 F1 | 	sub	local02, #12
3062c     1C 26 06 F1 | 	add	local01, #28
30630     13 3B 02 FB | 	rdlong	local11, local01
30634     1C 26 86 F1 | 	sub	local01, #28
30638     1D 15 02 F6 | 	mov	arg02, local11
3063c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
30640     00 FA 4D F2 | 	cmps	result1, #0 wz
30644     16 3B 02 56 |  if_ne	mov	local11, local04
30648     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
3064c     01 3A 86 51 |  if_ne	sub	local11, #1
30650     1D 37 02 56 |  if_ne	mov	local09, local11
30654     04 00 90 5D |  if_ne	jmp	#LR__4725
30658                 | LR__4724
30658     FF 36 06 F6 | 	mov	local09, #255
3065c                 | LR__4725
3065c     1B 2D 02 F6 | 	mov	local04, local09
30660     78 00 90 FD | 	jmp	#LR__4729
30664                 | LR__4726
30664     16 37 02 F6 | 	mov	local09, local04
30668     07 36 4E F7 | 	zerox	local09, #7 wz
3066c     20 00 90 5D |  if_ne	jmp	#LR__4727
30670     15 39 E2 F8 | 	getbyte	local10, local03, #0
30674     1C 26 06 F1 | 	add	local01, #28
30678     13 13 02 FB | 	rdlong	arg01, local01
3067c     1C 26 86 F1 | 	sub	local01, #28
30680     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
30684     FD FA E1 F8 | 	getbyte	result1, result1, #0
30688     FD 38 0A F2 | 	cmp	local10, result1 wz
3068c     60 00 90 AD |  if_e	jmp	#LR__4731
30690                 | LR__4727
30690     2B 26 06 F1 | 	add	local01, #43
30694     13 37 C2 FA | 	rdbyte	local09, local01
30698     2B 26 86 F1 | 	sub	local01, #43
3069c     01 36 CE F7 | 	test	local09, #1 wz
306a0     24 00 90 5D |  if_ne	jmp	#LR__4728
306a4     1C 26 06 F1 | 	add	local01, #28
306a8     13 13 02 FB | 	rdlong	arg01, local01
306ac     04 26 06 F1 | 	add	local01, #4
306b0     13 15 02 F6 | 	mov	arg02, local01
306b4     20 26 86 F1 | 	sub	local01, #32
306b8     0B 16 06 F6 | 	mov	arg03, #11
306bc     88 DA BF FD | 	call	#_fatfs_cc_memcmp
306c0     00 FA 0D F2 | 	cmp	result1, #0 wz
306c4     28 00 90 AD |  if_e	jmp	#LR__4731
306c8                 | LR__4728
306c8     FF 2C 06 F6 | 	mov	local04, #255
306cc     2C 26 06 F1 | 	add	local01, #44
306d0     FF FF FF FF 
306d4     13 FF 6B FC | 	wrlong	##-1, local01
306d8     2C 26 86 F1 | 	sub	local01, #44
306dc                 | LR__4729
306dc                 | LR__4730
306dc     13 13 02 F6 | 	mov	arg01, local01
306e0     00 14 06 F6 | 	mov	arg02, #0
306e4     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
306e8     FD 2E 0A F6 | 	mov	local05, result1 wz
306ec     04 FE 9F AD |  if_e	jmp	#LR__4720
306f0                 | LR__4731
306f0                 | ' 
306f0                 | ' 	return res;
306f0     17 FB 01 F6 | 	mov	result1, local05
306f4                 | LR__4732
306f4     A7 F0 03 F6 | 	mov	ptra, fp
306f8     B2 00 A0 FD | 	call	#popregs_
306fc                 | _fatfs_cc_dir_find_ret
306fc     2D 00 64 FD | 	ret
30700                 | 
30700                 | _fatfs_cc_dir_register
30700     0A 4A 05 F6 | 	mov	COUNT_, #10
30704     A8 00 A0 FD | 	call	#pushregs_
30708     2C F0 07 F1 | 	add	ptra, #44
3070c     04 4E 05 F1 | 	add	fp, #4
30710     A7 12 62 FC | 	wrlong	arg01, fp
30714     09 27 02 FB | 	rdlong	local01, arg01
30718     08 4E 05 F1 | 	add	fp, #8
3071c     A7 26 62 FC | 	wrlong	local01, fp
30720     08 4E 85 F1 | 	sub	fp, #8
30724     A7 28 02 FB | 	rdlong	local02, fp
30728     04 4E 85 F1 | 	sub	fp, #4
3072c     2B 28 06 F1 | 	add	local02, #43
30730     14 29 C2 FA | 	rdbyte	local02, local02
30734     A0 28 CE F7 | 	test	local02, #160 wz
30738     06 FA 05 56 |  if_ne	mov	result1, #6
3073c     F8 03 90 5D |  if_ne	jmp	#LR__4755
30740                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
30740     14 4E 05 F1 | 	add	fp, #20
30744     A7 00 68 FC | 	wrlong	#0, fp
30748     14 4E 85 F1 | 	sub	fp, #20
3074c     97 28 48 FB | 	callpa	#(@LR__4741-@LR__4740)>>2,fcache_load_ptr_
30750                 | LR__4740
30750     0C 4E 05 F1 | 	add	fp, #12
30754     A7 28 02 FB | 	rdlong	local02, fp
30758     0C 28 06 F1 | 	add	local02, #12
3075c     14 2B 02 FB | 	rdlong	local03, local02
30760     08 4E 05 F1 | 	add	fp, #8
30764     A7 2C 02 FB | 	rdlong	local04, fp
30768     14 4E 85 F1 | 	sub	fp, #20
3076c     01 2C 66 F0 | 	shl	local04, #1
30770     15 2D 02 F1 | 	add	local04, local03
30774     16 29 EA FA | 	rdword	local02, local04 wz
30778     24 00 90 AD |  if_e	jmp	#LR__4742
3077c     14 4E 05 F1 | 	add	fp, #20
30780     A7 2E 02 FB | 	rdlong	local05, fp
30784     17 31 02 F6 | 	mov	local06, local05
30788     17 33 02 F6 | 	mov	local07, local05
3078c     19 35 02 F6 | 	mov	local08, local07
30790     01 34 06 F1 | 	add	local08, #1
30794     A7 34 62 FC | 	wrlong	local08, fp
30798     14 4E 85 F1 | 	sub	fp, #20
3079c     B0 FF 9F FD | 	jmp	#LR__4740
307a0                 | LR__4741
307a0                 | LR__4742
307a0     1C 4E 05 F1 | 	add	fp, #28
307a4     A7 12 02 F6 | 	mov	arg01, fp
307a8     18 4E 85 F1 | 	sub	fp, #24
307ac     A7 14 02 FB | 	rdlong	arg02, fp
307b0     04 4E 85 F1 | 	sub	fp, #4
307b4     20 14 06 F1 | 	add	arg02, #32
307b8     0C 16 06 F6 | 	mov	arg03, #12
307bc     A8 6B BF FD | 	call	#__system____builtin_memmove
307c0     27 4E 05 F1 | 	add	fp, #39
307c4     A7 36 C2 FA | 	rdbyte	local09, fp
307c8     27 4E 85 F1 | 	sub	fp, #39
307cc     01 36 CE F7 | 	test	local09, #1 wz
307d0     F4 00 90 AD |  if_e	jmp	#LR__4745
307d4     04 4E 05 F1 | 	add	fp, #4
307d8     A7 38 02 FB | 	rdlong	local10, fp
307dc     2B 38 06 F1 | 	add	local10, #43
307e0     1C 81 48 FC | 	wrbyte	#64, local10
307e4                 | ' 		dp->fn[ 11 ] =  0x40 ;
307e4                 | ' 		for (n = 1; n < 100; n++) {
307e4     0C 4E 05 F1 | 	add	fp, #12
307e8     A7 02 68 FC | 	wrlong	#1, fp
307ec     10 4E 85 F1 | 	sub	fp, #16
307f0                 | LR__4743
307f0     10 4E 05 F1 | 	add	fp, #16
307f4     A7 28 02 FB | 	rdlong	local02, fp
307f8     10 4E 85 F1 | 	sub	fp, #16
307fc     64 28 16 F2 | 	cmp	local02, #100 wc
30800     70 00 90 3D |  if_ae	jmp	#LR__4744
30804     04 4E 05 F1 | 	add	fp, #4
30808     A7 12 02 FB | 	rdlong	arg01, fp
3080c     20 12 06 F1 | 	add	arg01, #32
30810     18 4E 05 F1 | 	add	fp, #24
30814     A7 14 02 F6 | 	mov	arg02, fp
30818     10 4E 85 F1 | 	sub	fp, #16
3081c     A7 38 02 FB | 	rdlong	local10, fp
30820     0C 38 06 F1 | 	add	local10, #12
30824     1C 17 02 FB | 	rdlong	arg03, local10
30828     04 4E 05 F1 | 	add	fp, #4
3082c     A7 18 02 FB | 	rdlong	arg04, fp
30830     10 4E 85 F1 | 	sub	fp, #16
30834     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
30838     04 4E 05 F1 | 	add	fp, #4
3083c     A7 12 02 FB | 	rdlong	arg01, fp
30840     04 4E 85 F1 | 	sub	fp, #4
30844     70 FC BF FD | 	call	#_fatfs_cc_dir_find
30848     08 4E 05 F1 | 	add	fp, #8
3084c     A7 FA 61 FC | 	wrlong	result1, fp
30850     00 FA 4D F2 | 	cmps	result1, #0 wz
30854     08 4E 85 F1 | 	sub	fp, #8
30858     18 00 90 5D |  if_ne	jmp	#LR__4744
3085c     10 4E 05 F1 | 	add	fp, #16
30860     A7 38 02 FB | 	rdlong	local10, fp
30864     01 38 06 F1 | 	add	local10, #1
30868     A7 38 62 FC | 	wrlong	local10, fp
3086c     10 4E 85 F1 | 	sub	fp, #16
30870     7C FF 9F FD | 	jmp	#LR__4743
30874                 | LR__4744
30874     10 4E 05 F1 | 	add	fp, #16
30878     A7 38 02 FB | 	rdlong	local10, fp
3087c     10 4E 85 F1 | 	sub	fp, #16
30880     64 38 0E F2 | 	cmp	local10, #100 wz
30884     07 FA 05 A6 |  if_e	mov	result1, #7
30888     AC 02 90 AD |  if_e	jmp	#LR__4755
3088c     08 4E 05 F1 | 	add	fp, #8
30890     A7 38 02 FB | 	rdlong	local10, fp
30894     08 4E 85 F1 | 	sub	fp, #8
30898     04 38 0E F2 | 	cmp	local10, #4 wz
3089c     08 4E 05 51 |  if_ne	add	fp, #8
308a0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
308a4     08 4E 85 51 |  if_ne	sub	fp, #8
308a8     8C 02 90 5D |  if_ne	jmp	#LR__4755
308ac     04 4E 05 F1 | 	add	fp, #4
308b0     A7 38 02 FB | 	rdlong	local10, fp
308b4     23 4E 05 F1 | 	add	fp, #35
308b8     A7 26 C2 FA | 	rdbyte	local01, fp
308bc     27 4E 85 F1 | 	sub	fp, #39
308c0     2B 38 06 F1 | 	add	local10, #43
308c4     1C 27 42 FC | 	wrbyte	local01, local10
308c8                 | LR__4745
308c8     27 4E 05 F1 | 	add	fp, #39
308cc     A7 28 C2 FA | 	rdbyte	local02, fp
308d0     27 4E 85 F1 | 	sub	fp, #39
308d4     02 28 CE F7 | 	test	local02, #2 wz
308d8     20 00 90 AD |  if_e	jmp	#LR__4746
308dc     14 4E 05 F1 | 	add	fp, #20
308e0     A7 38 02 FB | 	rdlong	local10, fp
308e4     0C 38 06 F1 | 	add	local10, #12
308e8     0D 38 16 FD | 	qdiv	local10, #13
308ec     14 4E 85 F1 | 	sub	fp, #20
308f0     18 38 62 FD | 	getqx	local10
308f4     01 38 06 F1 | 	add	local10, #1
308f8     04 00 90 FD | 	jmp	#LR__4747
308fc                 | LR__4746
308fc     01 38 06 F6 | 	mov	local10, #1
30900                 | LR__4747
30900     18 4E 05 F1 | 	add	fp, #24
30904     A7 38 62 FC | 	wrlong	local10, fp
30908     14 4E 85 F1 | 	sub	fp, #20
3090c     A7 12 02 FB | 	rdlong	arg01, fp
30910     1C 15 02 F6 | 	mov	arg02, local10
30914     04 4E 85 F1 | 	sub	fp, #4
30918     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
3091c     08 4E 05 F1 | 	add	fp, #8
30920     A7 FA 61 FC | 	wrlong	result1, fp
30924     08 4E 85 F1 | 	sub	fp, #8
30928     00 FA 0D F2 | 	cmp	result1, #0 wz
3092c     38 01 90 5D |  if_ne	jmp	#LR__4752
30930     18 4E 05 F1 | 	add	fp, #24
30934     A7 38 02 FB | 	rdlong	local10, fp
30938     01 38 8E F1 | 	sub	local10, #1 wz
3093c     A7 38 62 FC | 	wrlong	local10, fp
30940     18 4E 85 F1 | 	sub	fp, #24
30944     20 01 90 AD |  if_e	jmp	#LR__4752
30948     04 4E 05 F1 | 	add	fp, #4
3094c     A7 38 02 FB | 	rdlong	local10, fp
30950     1C 13 02 F6 | 	mov	arg01, local10
30954     14 4E 05 F1 | 	add	fp, #20
30958     A7 18 02 FB | 	rdlong	arg04, fp
3095c     18 4E 85 F1 | 	sub	fp, #24
30960     05 18 66 F0 | 	shl	arg04, #5
30964     10 38 06 F1 | 	add	local10, #16
30968     1C 15 02 FB | 	rdlong	arg02, local10
3096c     0C 15 82 F1 | 	sub	arg02, arg04
30970     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
30974     08 4E 05 F1 | 	add	fp, #8
30978     A7 FA 61 FC | 	wrlong	result1, fp
3097c     08 4E 85 F1 | 	sub	fp, #8
30980     00 FA 0D F2 | 	cmp	result1, #0 wz
30984     E0 00 90 5D |  if_ne	jmp	#LR__4751
30988     04 4E 05 F1 | 	add	fp, #4
3098c     A7 12 02 FB | 	rdlong	arg01, fp
30990     04 4E 85 F1 | 	sub	fp, #4
30994     20 12 06 F1 | 	add	arg01, #32
30998     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
3099c     FD 38 02 F6 | 	mov	local10, result1
309a0     28 4E 05 F1 | 	add	fp, #40
309a4     A7 38 42 FC | 	wrbyte	local10, fp
309a8     28 4E 85 F1 | 	sub	fp, #40
309ac                 | ' 			sum = sum_sfn(dp->fn);
309ac                 | ' 			do {
309ac                 | LR__4748
309ac     0C 4E 05 F1 | 	add	fp, #12
309b0     A7 12 02 FB | 	rdlong	arg01, fp
309b4     08 4E 85 F1 | 	sub	fp, #8
309b8     A7 26 02 FB | 	rdlong	local01, fp
309bc     04 4E 85 F1 | 	sub	fp, #4
309c0     18 26 06 F1 | 	add	local01, #24
309c4     13 15 02 FB | 	rdlong	arg02, local01
309c8     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
309cc     08 4E 05 F1 | 	add	fp, #8
309d0     A7 FA 61 FC | 	wrlong	result1, fp
309d4     00 FA 4D F2 | 	cmps	result1, #0 wz
309d8     08 4E 85 F1 | 	sub	fp, #8
309dc     88 00 90 5D |  if_ne	jmp	#LR__4750
309e0     0C 4E 05 F1 | 	add	fp, #12
309e4     A7 28 02 FB | 	rdlong	local02, fp
309e8     0C 28 06 F1 | 	add	local02, #12
309ec     14 13 02 FB | 	rdlong	arg01, local02
309f0     08 4E 85 F1 | 	sub	fp, #8
309f4     A7 26 02 FB | 	rdlong	local01, fp
309f8     1C 26 06 F1 | 	add	local01, #28
309fc     13 15 02 FB | 	rdlong	arg02, local01
30a00     14 4E 05 F1 | 	add	fp, #20
30a04     A7 16 02 FB | 	rdlong	arg03, fp
30a08     10 4E 05 F1 | 	add	fp, #16
30a0c     A7 18 C2 FA | 	rdbyte	arg04, fp
30a10     28 4E 85 F1 | 	sub	fp, #40
30a14     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
30a18     0C 4E 05 F1 | 	add	fp, #12
30a1c     A7 38 02 FB | 	rdlong	local10, fp
30a20     03 38 06 F1 | 	add	local10, #3
30a24     1C 03 48 FC | 	wrbyte	#1, local10
30a28     08 4E 85 F1 | 	sub	fp, #8
30a2c     A7 12 02 FB | 	rdlong	arg01, fp
30a30     04 4E 85 F1 | 	sub	fp, #4
30a34     00 14 06 F6 | 	mov	arg02, #0
30a38     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
30a3c     08 4E 05 F1 | 	add	fp, #8
30a40     A7 FA 61 FC | 	wrlong	result1, fp
30a44     00 FA 4D F2 | 	cmps	result1, #0 wz
30a48     08 4E 85 F1 | 	sub	fp, #8
30a4c     18 00 90 5D |  if_ne	jmp	#LR__4749
30a50     18 4E 05 F1 | 	add	fp, #24
30a54     A7 38 02 FB | 	rdlong	local10, fp
30a58     01 38 8E F1 | 	sub	local10, #1 wz
30a5c     A7 38 62 FC | 	wrlong	local10, fp
30a60     18 4E 85 F1 | 	sub	fp, #24
30a64     44 FF 9F 5D |  if_ne	jmp	#LR__4748
30a68                 | LR__4749
30a68                 | LR__4750
30a68                 | LR__4751
30a68                 | LR__4752
30a68     08 4E 05 F1 | 	add	fp, #8
30a6c     A7 38 0A FB | 	rdlong	local10, fp wz
30a70     08 4E 85 F1 | 	sub	fp, #8
30a74     B4 00 90 5D |  if_ne	jmp	#LR__4754
30a78     0C 4E 05 F1 | 	add	fp, #12
30a7c     A7 12 02 FB | 	rdlong	arg01, fp
30a80     08 4E 85 F1 | 	sub	fp, #8
30a84     A7 26 02 FB | 	rdlong	local01, fp
30a88     04 4E 85 F1 | 	sub	fp, #4
30a8c     18 26 06 F1 | 	add	local01, #24
30a90     13 15 02 FB | 	rdlong	arg02, local01
30a94     18 E6 BF FD | 	call	#_fatfs_cc_move_window
30a98     08 4E 05 F1 | 	add	fp, #8
30a9c     A7 FA 61 FC | 	wrlong	result1, fp
30aa0     08 4E 85 F1 | 	sub	fp, #8
30aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
30aa8     80 00 90 5D |  if_ne	jmp	#LR__4753
30aac     04 4E 05 F1 | 	add	fp, #4
30ab0     A7 28 02 FB | 	rdlong	local02, fp
30ab4     04 4E 85 F1 | 	sub	fp, #4
30ab8     1C 28 06 F1 | 	add	local02, #28
30abc     14 13 02 FB | 	rdlong	arg01, local02
30ac0     00 14 06 F6 | 	mov	arg02, #0
30ac4     20 16 06 F6 | 	mov	arg03, #32
30ac8     98 00 A0 FD | 	call	#\builtin_bytefill_
30acc     04 4E 05 F1 | 	add	fp, #4
30ad0     A7 14 02 FB | 	rdlong	arg02, fp
30ad4     0A 27 02 F6 | 	mov	local01, arg02
30ad8     1C 26 06 F1 | 	add	local01, #28
30adc     13 13 02 FB | 	rdlong	arg01, local01
30ae0     04 4E 85 F1 | 	sub	fp, #4
30ae4     20 14 06 F1 | 	add	arg02, #32
30ae8     0B 16 06 F6 | 	mov	arg03, #11
30aec     78 68 BF FD | 	call	#__system____builtin_memmove
30af0     04 4E 05 F1 | 	add	fp, #4
30af4     A7 36 02 FB | 	rdlong	local09, fp
30af8     1B 39 02 F6 | 	mov	local10, local09
30afc     1C 38 06 F1 | 	add	local10, #28
30b00     1C 27 02 FB | 	rdlong	local01, local10
30b04     2B 36 06 F1 | 	add	local09, #43
30b08     1B 39 C2 FA | 	rdbyte	local10, local09
30b0c     18 38 06 F5 | 	and	local10, #24
30b10     0C 26 06 F1 | 	add	local01, #12
30b14     13 39 42 FC | 	wrbyte	local10, local01
30b18     08 4E 05 F1 | 	add	fp, #8
30b1c     A7 38 02 FB | 	rdlong	local10, fp
30b20     0C 4E 85 F1 | 	sub	fp, #12
30b24     03 38 06 F1 | 	add	local10, #3
30b28     1C 03 48 FC | 	wrbyte	#1, local10
30b2c                 | LR__4753
30b2c                 | LR__4754
30b2c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
30b2c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
30b2c                 | ' 
30b2c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
30b2c                 | ' 
30b2c                 | ' 			fs->wflag = 1;
30b2c                 | ' 		}
30b2c                 | ' 	}
30b2c                 | ' 
30b2c                 | ' 	return res;
30b2c     08 4E 05 F1 | 	add	fp, #8
30b30     A7 FA 01 FB | 	rdlong	result1, fp
30b34     08 4E 85 F1 | 	sub	fp, #8
30b38                 | LR__4755
30b38     A7 F0 03 F6 | 	mov	ptra, fp
30b3c     B2 00 A0 FD | 	call	#popregs_
30b40                 | _fatfs_cc_dir_register_ret
30b40     2D 00 64 FD | 	ret
30b44                 | 
30b44                 | _fatfs_cc_dir_remove
30b44     05 4A 05 F6 | 	mov	COUNT_, #5
30b48     A8 00 A0 FD | 	call	#pushregs_
30b4c     09 27 02 F6 | 	mov	local01, arg01
30b50     13 29 02 FB | 	rdlong	local02, local01
30b54     10 26 06 F1 | 	add	local01, #16
30b58     13 2B 02 FB | 	rdlong	local03, local01
30b5c     1C 26 06 F1 | 	add	local01, #28
30b60     13 15 02 FB | 	rdlong	arg02, local01
30b64     2C 26 86 F1 | 	sub	local01, #44
30b68     FF FF 7F FF 
30b6c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
30b70     00 2C 06 A6 |  if_e	mov	local04, #0
30b74     18 00 90 AD |  if_e	jmp	#LR__4760
30b78     13 13 02 F6 | 	mov	arg01, local01
30b7c     2C 26 06 F1 | 	add	local01, #44
30b80     13 15 02 FB | 	rdlong	arg02, local01
30b84     2C 26 86 F1 | 	sub	local01, #44
30b88     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
30b8c     FD 2C 02 F6 | 	mov	local04, result1
30b90                 | LR__4760
30b90     16 2F 0A F6 | 	mov	local05, local04 wz
30b94     64 00 90 5D |  if_ne	jmp	#LR__4763
30b98                 | ' 		do {
30b98                 | LR__4761
30b98     18 26 06 F1 | 	add	local01, #24
30b9c     13 15 02 FB | 	rdlong	arg02, local01
30ba0     18 26 86 F1 | 	sub	local01, #24
30ba4     14 13 02 F6 | 	mov	arg01, local02
30ba8     04 E5 BF FD | 	call	#_fatfs_cc_move_window
30bac     FD 2E 0A F6 | 	mov	local05, result1 wz
30bb0     40 00 90 5D |  if_ne	jmp	#LR__4762
30bb4     1C 26 06 F1 | 	add	local01, #28
30bb8     13 2D 02 FB | 	rdlong	local04, local01
30bbc     16 CB 49 FC | 	wrbyte	#229, local04
30bc0     03 28 06 F1 | 	add	local02, #3
30bc4     14 03 48 FC | 	wrbyte	#1, local02
30bc8     03 28 86 F1 | 	sub	local02, #3
30bcc     0C 26 86 F1 | 	sub	local01, #12
30bd0     13 2D 02 FB | 	rdlong	local04, local01
30bd4     10 26 86 F1 | 	sub	local01, #16
30bd8     15 2D 12 F2 | 	cmp	local04, local03 wc
30bdc     14 00 90 3D |  if_ae	jmp	#LR__4762
30be0     13 13 02 F6 | 	mov	arg01, local01
30be4     00 14 06 F6 | 	mov	arg02, #0
30be8     90 EF BF FD | 	call	#_fatfs_cc_dir_next
30bec     FD 2E 0A F6 | 	mov	local05, result1 wz
30bf0     A4 FF 9F AD |  if_e	jmp	#LR__4761
30bf4                 | LR__4762
30bf4     04 2E 0E F2 | 	cmp	local05, #4 wz
30bf8     02 2E 06 A6 |  if_e	mov	local05, #2
30bfc                 | LR__4763
30bfc                 | ' 	}
30bfc                 | ' #line 2590 "ff.c"
30bfc                 | ' 	return res;
30bfc     17 FB 01 F6 | 	mov	result1, local05
30c00     A7 F0 03 F6 | 	mov	ptra, fp
30c04     B2 00 A0 FD | 	call	#popregs_
30c08                 | _fatfs_cc_dir_remove_ret
30c08     2D 00 64 FD | 	ret
30c0c                 | 
30c0c                 | _fatfs_cc_get_fileinfo
30c0c     0F 4A 05 F6 | 	mov	COUNT_, #15
30c10     A8 00 A0 FD | 	call	#pushregs_
30c14     09 27 02 F6 | 	mov	local01, arg01
30c18     0A 29 02 F6 | 	mov	local02, arg02
30c1c     13 2B 02 FB | 	rdlong	local03, local01
30c20     1C 28 06 F1 | 	add	local02, #28
30c24     14 01 48 FC | 	wrbyte	#0, local02
30c28     1C 28 86 F1 | 	sub	local02, #28
30c2c     18 26 06 F1 | 	add	local01, #24
30c30     13 2D 0A FB | 	rdlong	local04, local01 wz
30c34     18 26 86 F1 | 	sub	local01, #24
30c38     90 03 90 AD |  if_e	jmp	#LR__4784
30c3c     2C 26 06 F1 | 	add	local01, #44
30c40     13 2D 02 FB | 	rdlong	local04, local01
30c44     2C 26 86 F1 | 	sub	local01, #44
30c48     FF FF 7F FF 
30c4c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
30c50     D8 00 90 AD |  if_e	jmp	#LR__4773
30c54     00 2E 06 F6 | 	mov	local05, #0
30c58     00 30 06 F6 | 	mov	local06, #0
30c5c     00 32 06 F6 | 	mov	local07, #0
30c60                 | ' 			si = di = 0;
30c60                 | ' 			hs = 0;
30c60                 | ' 			while (fs->lfnbuf[si] != 0) {
30c60                 | LR__4770
30c60     0C 2A 06 F1 | 	add	local03, #12
30c64     15 2D 02 FB | 	rdlong	local04, local03
30c68     0C 2A 86 F1 | 	sub	local03, #12
30c6c     18 35 02 F6 | 	mov	local08, local06
30c70     01 34 66 F0 | 	shl	local08, #1
30c74     16 35 02 F1 | 	add	local08, local04
30c78     1A 2D EA FA | 	rdword	local04, local08 wz
30c7c     90 00 90 AD |  if_e	jmp	#LR__4772
30c80     0C 2A 06 F1 | 	add	local03, #12
30c84     15 37 02 FB | 	rdlong	local09, local03
30c88     0C 2A 86 F1 | 	sub	local03, #12
30c8c     18 39 02 F6 | 	mov	local10, local06
30c90     01 38 66 F0 | 	shl	local10, #1
30c94     1B 39 02 F1 | 	add	local10, local09
30c98     1C 3B E2 FA | 	rdword	local11, local10
30c9c     19 2D 02 F6 | 	mov	local04, local07
30ca0     0F 2C 4E F7 | 	zerox	local04, #15 wz
30ca4     01 30 06 F1 | 	add	local06, #1
30ca8     24 00 90 5D |  if_ne	jmp	#LR__4771
30cac     1D 3D 32 F9 | 	getword	local12, local11, #0
30cb0     6C 00 00 FF 
30cb4     00 3C 16 F2 | 	cmp	local12, ##55296 wc
30cb8     14 00 90 CD |  if_b	jmp	#LR__4771
30cbc     1D 3F 32 F9 | 	getword	local13, local11, #0
30cc0     70 00 00 FF 
30cc4     00 3E 16 F2 | 	cmp	local13, ##57344 wc
30cc8     1D 33 02 C6 |  if_b	mov	local07, local11
30ccc                 | ' 					hs = wc; continue;
30ccc     90 FF 9F CD |  if_b	jmp	#LR__4770
30cd0                 | LR__4771
30cd0     19 13 32 F9 | 	getword	arg01, local07, #0
30cd4     10 12 66 F0 | 	shl	arg01, #16
30cd8     1D 3B 32 F9 | 	getword	local11, local11, #0
30cdc     1D 13 42 F5 | 	or	arg01, local11
30ce0     17 15 02 F6 | 	mov	arg02, local05
30ce4     1C 28 06 F1 | 	add	local02, #28
30ce8     14 15 02 F1 | 	add	arg02, local02
30cec     FF 16 06 F6 | 	mov	arg03, #255
30cf0     17 17 82 F1 | 	sub	arg03, local05
30cf4     1C 28 86 F1 | 	sub	local02, #28
30cf8     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
30cfc     FD 40 0A F6 | 	mov	local14, result1 wz
30d00     00 2E 06 A6 |  if_e	mov	local05, #0
30d04     20 2F 02 51 |  if_ne	add	local05, local14
30d08     00 32 06 56 |  if_ne	mov	local07, #0
30d0c     50 FF 9F 5D |  if_ne	jmp	#LR__4770
30d10                 | LR__4772
30d10     19 2D 02 F6 | 	mov	local04, local07
30d14     0F 2C 4E F7 | 	zerox	local04, #15 wz
30d18     00 2E 06 56 |  if_ne	mov	local05, #0
30d1c     1C 28 06 F1 | 	add	local02, #28
30d20     14 2F 02 F1 | 	add	local05, local02
30d24     17 01 48 FC | 	wrbyte	#0, local05
30d28     1C 28 86 F1 | 	sub	local02, #28
30d2c                 | LR__4773
30d2c     00 2E 06 F6 | 	mov	local05, #0
30d30     00 30 06 F6 | 	mov	local06, #0
30d34                 | ' 			fno->fname[di] = 0;
30d34                 | ' 		}
30d34                 | ' 	}
30d34                 | ' 
30d34                 | ' 	si = di = 0;
30d34                 | ' 	while (si < 11) {
30d34                 | LR__4774
30d34     0B 30 16 F2 | 	cmp	local06, #11 wc
30d38     20 01 90 3D |  if_ae	jmp	#LR__4777
30d3c     1C 26 06 F1 | 	add	local01, #28
30d40     13 37 02 FB | 	rdlong	local09, local01
30d44     1C 26 86 F1 | 	sub	local01, #28
30d48     18 39 02 F6 | 	mov	local10, local06
30d4c     1B 39 02 F1 | 	add	local10, local09
30d50     1C 3B C2 FA | 	rdbyte	local11, local10
30d54     1D 2D 32 F9 | 	getword	local04, local11, #0
30d58     20 2C 0E F2 | 	cmp	local04, #32 wz
30d5c     01 30 06 F1 | 	add	local06, #1
30d60     D0 FF 9F AD |  if_e	jmp	#LR__4774
30d64     1D 2D 32 F9 | 	getword	local04, local11, #0
30d68     05 2C 0E F2 | 	cmp	local04, #5 wz
30d6c     E5 3A 06 A6 |  if_e	mov	local11, #229
30d70     09 30 0E F2 | 	cmp	local06, #9 wz
30d74     20 00 90 5D |  if_ne	jmp	#LR__4775
30d78     0C 2E 16 F2 | 	cmp	local05, #12 wc
30d7c     18 00 90 3D |  if_ae	jmp	#LR__4775
30d80     17 3F 02 F6 | 	mov	local13, local05
30d84     0C 28 06 F1 | 	add	local02, #12
30d88     14 3F 02 F1 | 	add	local13, local02
30d8c     1F 5D 48 FC | 	wrbyte	#46, local13
30d90     01 2E 06 F1 | 	add	local05, #1
30d94     0C 28 86 F1 | 	sub	local02, #12
30d98                 | LR__4775
30d98     1D 13 32 F9 | 	getword	arg01, local11, #0
30d9c     07 12 4E F7 | 	zerox	arg01, #7 wz
30da0     00 FA 05 56 |  if_ne	mov	result1, #0
30da4                 | ' 
30da4                 | ' 	return 0;
30da4     00 FA 05 A6 |  if_e	mov	result1, #0
30da8     00 FA 0D F2 | 	cmp	result1, #0 wz
30dac     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
30db0     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
30db4     50 00 90 AD |  if_e	jmp	#LR__4776
30db8     1C 26 06 F1 | 	add	local01, #28
30dbc     13 39 02 FB | 	rdlong	local10, local01
30dc0     1C 26 86 F1 | 	sub	local01, #28
30dc4     18 35 02 F6 | 	mov	local08, local06
30dc8     1C 35 02 F1 | 	add	local08, local10
30dcc     1A 13 CA FA | 	rdbyte	arg01, local08 wz
30dd0     00 FA 05 56 |  if_ne	mov	result1, #0
30dd4                 | ' 
30dd4                 | ' 	return 0;
30dd4     00 FA 05 A6 |  if_e	mov	result1, #0
30dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
30ddc     28 00 90 AD |  if_e	jmp	#LR__4776
30de0     1D 3B 32 F9 | 	getword	local11, local11, #0
30de4     08 3A 66 F0 | 	shl	local11, #8
30de8     1C 26 06 F1 | 	add	local01, #28
30dec     13 41 02 FB | 	rdlong	local14, local01
30df0     1C 26 86 F1 | 	sub	local01, #28
30df4     18 37 02 F6 | 	mov	local09, local06
30df8     20 37 02 F1 | 	add	local09, local14
30dfc     1B 3D C2 FA | 	rdbyte	local12, local09
30e00     1E 3B 42 F5 | 	or	local11, local12
30e04     01 30 06 F1 | 	add	local06, #1
30e08                 | LR__4776
30e08     1D 13 02 F6 | 	mov	arg01, local11
30e0c     01 00 00 FF 
30e10     52 15 06 F6 | 	mov	arg02, ##850
30e14     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
30e18     FD 3A 02 F6 | 	mov	local11, result1
30e1c     1D 2D 02 F6 | 	mov	local04, local11
30e20     0F 2C 4E F7 | 	zerox	local04, #15 wz
30e24     00 2E 06 A6 |  if_e	mov	local05, #0
30e28     30 00 90 AD |  if_e	jmp	#LR__4777
30e2c     1D 13 32 F9 | 	getword	arg01, local11, #0
30e30     17 15 02 F6 | 	mov	arg02, local05
30e34     0C 28 06 F1 | 	add	local02, #12
30e38     14 15 02 F1 | 	add	arg02, local02
30e3c     0C 16 06 F6 | 	mov	arg03, #12
30e40     17 17 82 F1 | 	sub	arg03, local05
30e44     0C 28 86 F1 | 	sub	local02, #12
30e48     EC DF BF FD | 	call	#_fatfs_cc_put_utf
30e4c     FD 40 0A F6 | 	mov	local14, result1 wz
30e50     00 2E 06 A6 |  if_e	mov	local05, #0
30e54     20 2F 02 51 |  if_ne	add	local05, local14
30e58     D8 FE 9F 5D |  if_ne	jmp	#LR__4774
30e5c                 | LR__4777
30e5c     17 2D 02 F6 | 	mov	local04, local05
30e60     0C 28 06 F1 | 	add	local02, #12
30e64     14 2D 02 F1 | 	add	local04, local02
30e68     16 01 48 FC | 	wrbyte	#0, local04
30e6c     10 28 06 F1 | 	add	local02, #16
30e70     14 2D CA FA | 	rdbyte	local04, local02 wz
30e74     1C 28 86 F1 | 	sub	local02, #28
30e78     F8 00 90 5D |  if_ne	jmp	#LR__4783
30e7c     00 2E 0E F2 | 	cmp	local05, #0 wz
30e80     1C 00 90 5D |  if_ne	jmp	#LR__4778
30e84     17 3F 02 F6 | 	mov	local13, local05
30e88     1C 28 06 F1 | 	add	local02, #28
30e8c     14 3F 02 F1 | 	add	local13, local02
30e90     1F 7F 48 FC | 	wrbyte	#63, local13
30e94     01 2E 06 F1 | 	add	local05, #1
30e98     1C 28 86 F1 | 	sub	local02, #28
30e9c     A4 00 90 FD | 	jmp	#LR__4782
30ea0                 | LR__4778
30ea0                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
30ea0     00 2E 06 F6 | 	mov	local05, #0
30ea4     00 30 06 F6 | 	mov	local06, #0
30ea8     08 42 06 F6 | 	mov	local15, #8
30eac                 | LR__4779
30eac     18 2D 02 F6 | 	mov	local04, local06
30eb0     0C 28 06 F1 | 	add	local02, #12
30eb4     14 2D 02 F1 | 	add	local04, local02
30eb8     16 3F CA FA | 	rdbyte	local13, local04 wz
30ebc     0C 28 86 F1 | 	sub	local02, #12
30ec0     80 00 90 AD |  if_e	jmp	#LR__4781
30ec4     18 35 02 F6 | 	mov	local08, local06
30ec8     0C 28 06 F1 | 	add	local02, #12
30ecc     14 35 02 F1 | 	add	local08, local02
30ed0     1A 3B C2 FA | 	rdbyte	local11, local08
30ed4     1D 41 32 F9 | 	getword	local14, local11, #0
30ed8     2E 40 0E F2 | 	cmp	local14, #46 wz
30edc     0C 28 86 F1 | 	sub	local02, #12
30ee0     10 42 06 A6 |  if_e	mov	local15, #16
30ee4     1D 41 32 F9 | 	getword	local14, local11, #0
30ee8     41 40 16 F2 | 	cmp	local14, #65 wc
30eec     30 00 90 CD |  if_b	jmp	#LR__4780
30ef0     1D 35 32 F9 | 	getword	local08, local11, #0
30ef4     5B 34 16 F2 | 	cmp	local08, #91 wc
30ef8     24 00 90 3D |  if_ae	jmp	#LR__4780
30efc     1C 26 06 F1 | 	add	local01, #28
30f00     13 37 02 FB | 	rdlong	local09, local01
30f04     1C 26 86 F1 | 	sub	local01, #28
30f08     0C 36 06 F1 | 	add	local09, #12
30f0c     1B 39 C2 FA | 	rdbyte	local10, local09
30f10     21 41 E2 F8 | 	getbyte	local14, local15, #0
30f14     20 39 CA F7 | 	test	local10, local14 wz
30f18     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
30f1c     20 3A 06 51 |  if_ne	add	local11, #32
30f20                 | LR__4780
30f20     17 41 02 F6 | 	mov	local14, local05
30f24     1C 28 06 F1 | 	add	local02, #28
30f28     14 41 02 F1 | 	add	local14, local02
30f2c     1D 3B 32 F9 | 	getword	local11, local11, #0
30f30     20 3B 42 FC | 	wrbyte	local11, local14
30f34     01 30 06 F1 | 	add	local06, #1
30f38     01 2E 06 F1 | 	add	local05, #1
30f3c     1C 28 86 F1 | 	sub	local02, #28
30f40     68 FF 9F FD | 	jmp	#LR__4779
30f44                 | LR__4781
30f44                 | LR__4782
30f44     1C 28 06 F1 | 	add	local02, #28
30f48     14 2F 02 F1 | 	add	local05, local02
30f4c     17 01 48 FC | 	wrbyte	#0, local05
30f50     1C 26 06 F1 | 	add	local01, #28
30f54     13 2D 02 FB | 	rdlong	local04, local01
30f58     1C 26 86 F1 | 	sub	local01, #28
30f5c     0C 2C 06 F1 | 	add	local04, #12
30f60     16 3F CA FA | 	rdbyte	local13, local04 wz
30f64     1C 28 86 F1 | 	sub	local02, #28
30f68     0C 28 06 A1 |  if_e	add	local02, #12
30f6c     14 01 48 AC |  if_e	wrbyte	#0, local02
30f70     0C 28 86 A1 |  if_e	sub	local02, #12
30f74                 | LR__4783
30f74     1C 26 06 F1 | 	add	local01, #28
30f78     13 3D 02 FB | 	rdlong	local12, local01
30f7c     0B 3C 06 F1 | 	add	local12, #11
30f80     1E 2D C2 FA | 	rdbyte	local04, local12
30f84     3F 2C 06 F5 | 	and	local04, #63
30f88     08 28 06 F1 | 	add	local02, #8
30f8c     14 2D 42 FC | 	wrbyte	local04, local02
30f90     08 28 86 F1 | 	sub	local02, #8
30f94     13 13 02 FB | 	rdlong	arg01, local01
30f98     1C 12 06 F1 | 	add	arg01, #28
30f9c                 | ' {
30f9c                 | ' 
30f9c                 | ' 	return *((DWORD*)ptr);
30f9c     09 FB 01 FB | 	rdlong	result1, arg01
30fa0     14 FB 61 FC | 	wrlong	result1, local02
30fa4     13 13 02 FB | 	rdlong	arg01, local01
30fa8     16 12 06 F1 | 	add	arg01, #22
30fac                 | ' {
30fac                 | ' 
30fac                 | ' 	return *((WORD*)ptr);
30fac     09 FB E1 FA | 	rdword	result1, arg01
30fb0     06 28 06 F1 | 	add	local02, #6
30fb4     14 FB 51 FC | 	wrword	result1, local02
30fb8     13 13 02 FB | 	rdlong	arg01, local01
30fbc     18 12 06 F1 | 	add	arg01, #24
30fc0                 | ' {
30fc0                 | ' 
30fc0                 | ' 	return *((WORD*)ptr);
30fc0     09 FB E1 FA | 	rdword	result1, arg01
30fc4     02 28 86 F1 | 	sub	local02, #2
30fc8     14 FB 51 FC | 	wrword	result1, local02
30fcc                 | LR__4784
30fcc     A7 F0 03 F6 | 	mov	ptra, fp
30fd0     B2 00 A0 FD | 	call	#popregs_
30fd4                 | _fatfs_cc_get_fileinfo_ret
30fd4     2D 00 64 FD | 	ret
30fd8                 | 
30fd8                 | _fatfs_cc_create_name
30fd8     0D 4A 05 F6 | 	mov	COUNT_, #13
30fdc     A8 00 A0 FD | 	call	#pushregs_
30fe0     34 F0 07 F1 | 	add	ptra, #52
30fe4     04 4E 05 F1 | 	add	fp, #4
30fe8     A7 12 62 FC | 	wrlong	arg01, fp
30fec     04 4E 05 F1 | 	add	fp, #4
30ff0     A7 14 62 FC | 	wrlong	arg02, fp
30ff4     0A FB 01 FB | 	rdlong	result1, arg02
30ff8     28 4E 05 F1 | 	add	fp, #40
30ffc     A7 FA 61 FC | 	wrlong	result1, fp
31000     2C 4E 85 F1 | 	sub	fp, #44
31004     A7 FA 01 FB | 	rdlong	result1, fp
31008     FD 26 02 FB | 	rdlong	local01, result1
3100c     0C 26 06 F1 | 	add	local01, #12
31010     13 29 02 FB | 	rdlong	local02, local01
31014     14 4E 05 F1 | 	add	fp, #20
31018     A7 28 62 FC | 	wrlong	local02, fp
3101c     14 4E 05 F1 | 	add	fp, #20
31020     A7 00 68 FC | 	wrlong	#0, fp
31024     2C 4E 85 F1 | 	sub	fp, #44
31028                 | ' 
31028                 | ' 
31028                 | ' 
31028                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
31028                 | ' 	for (;;) {
31028                 | LR__4790
31028     30 4E 05 F1 | 	add	fp, #48
3102c     A7 12 02 F6 | 	mov	arg01, fp
31030     30 4E 85 F1 | 	sub	fp, #48
31034     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
31038     1C 4E 05 F1 | 	add	fp, #28
3103c     A7 FA 61 FC | 	wrlong	result1, fp
31040     1C 4E 85 F1 | 	sub	fp, #28
31044     FF FF 7F FF 
31048     FF FB 0D F2 | 	cmp	result1, ##-1 wz
3104c     06 FA 05 A6 |  if_e	mov	result1, #6
31050     74 08 90 AD |  if_e	jmp	#LR__4830
31054     1C 4E 05 F1 | 	add	fp, #28
31058     A7 26 02 FB | 	rdlong	local01, fp
3105c     1C 4E 85 F1 | 	sub	fp, #28
31060     80 00 00 FF 
31064     00 26 16 F2 | 	cmp	local01, ##65536 wc
31068     3C 00 90 CD |  if_b	jmp	#LR__4791
3106c     18 4E 05 F1 | 	add	fp, #24
31070     A7 2A 02 FB | 	rdlong	local03, fp
31074     14 4E 05 F1 | 	add	fp, #20
31078     A7 26 02 FB | 	rdlong	local01, fp
3107c     13 2D 02 F6 | 	mov	local04, local01
31080     01 2C 06 F1 | 	add	local04, #1
31084     A7 2C 62 FC | 	wrlong	local04, fp
31088     01 26 66 F0 | 	shl	local01, #1
3108c     15 27 02 F1 | 	add	local01, local03
31090     10 4E 85 F1 | 	sub	fp, #16
31094     A7 2E 02 FB | 	rdlong	local05, fp
31098     1C 4E 85 F1 | 	sub	fp, #28
3109c     17 31 02 F6 | 	mov	local06, local05
310a0     10 30 46 F0 | 	shr	local06, #16
310a4     13 31 52 FC | 	wrword	local06, local01
310a8                 | LR__4791
310a8     1C 4E 05 F1 | 	add	fp, #28
310ac     A7 26 02 FB | 	rdlong	local01, fp
310b0     08 4E 85 F1 | 	sub	fp, #8
310b4     A7 26 52 FC | 	wrword	local01, fp
310b8     A7 26 E2 FA | 	rdword	local01, fp
310bc     14 4E 85 F1 | 	sub	fp, #20
310c0     20 26 16 F2 | 	cmp	local01, #32 wc
310c4     B0 00 90 CD |  if_b	jmp	#LR__4793
310c8     14 4E 05 F1 | 	add	fp, #20
310cc     A7 26 E2 FA | 	rdword	local01, fp
310d0     14 4E 85 F1 | 	sub	fp, #20
310d4     2F 26 0E F2 | 	cmp	local01, #47 wz
310d8     14 4E 05 51 |  if_ne	add	fp, #20
310dc     A7 2C E2 5A |  if_ne	rdword	local04, fp
310e0     14 4E 85 51 |  if_ne	sub	fp, #20
310e4     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
310e8     8C 00 90 AD |  if_e	jmp	#LR__4793
310ec     14 4E 05 F1 | 	add	fp, #20
310f0     A7 12 E2 FA | 	rdword	arg01, fp
310f4     14 4E 85 F1 | 	sub	fp, #20
310f8     80 12 16 F2 | 	cmp	arg01, #128 wc
310fc     24 00 90 3D |  if_ae	jmp	#LR__4792
31100     B8 01 00 FF 
31104     38 12 06 F6 | 	mov	arg01, ##@LR__5452
31108     14 4E 05 F1 | 	add	fp, #20
3110c     A7 14 E2 FA | 	rdword	arg02, fp
31110     14 4E 85 F1 | 	sub	fp, #20
31114     FC D0 BF FD | 	call	#_fatfs_cc_strchr
31118     00 FA 0D F2 | 	cmp	result1, #0 wz
3111c     06 FA 05 56 |  if_ne	mov	result1, #6
31120     A4 07 90 5D |  if_ne	jmp	#LR__4830
31124                 | LR__4792
31124     2C 4E 05 F1 | 	add	fp, #44
31128     A7 30 02 FB | 	rdlong	local06, fp
3112c     2C 4E 85 F1 | 	sub	fp, #44
31130     FF 30 16 F2 | 	cmp	local06, #255 wc
31134     06 FA 05 36 |  if_ae	mov	result1, #6
31138     8C 07 90 3D |  if_ae	jmp	#LR__4830
3113c     18 4E 05 F1 | 	add	fp, #24
31140     A7 2A 02 FB | 	rdlong	local03, fp
31144     14 4E 05 F1 | 	add	fp, #20
31148     A7 28 02 FB | 	rdlong	local02, fp
3114c     14 2D 02 F6 | 	mov	local04, local02
31150     01 2C 06 F1 | 	add	local04, #1
31154     A7 2C 62 FC | 	wrlong	local04, fp
31158     14 27 02 F6 | 	mov	local01, local02
3115c     01 26 66 F0 | 	shl	local01, #1
31160     15 27 02 F1 | 	add	local01, local03
31164     18 4E 85 F1 | 	sub	fp, #24
31168     A7 30 E2 FA | 	rdword	local06, fp
3116c     14 4E 85 F1 | 	sub	fp, #20
31170     13 31 52 FC | 	wrword	local06, local01
31174     B0 FE 9F FD | 	jmp	#LR__4790
31178                 | LR__4793
31178     14 4E 05 F1 | 	add	fp, #20
3117c     A7 32 E2 FA | 	rdword	local07, fp
31180     14 4E 85 F1 | 	sub	fp, #20
31184     20 32 16 F2 | 	cmp	local07, #32 wc
31188     10 4E 05 C1 |  if_b	add	fp, #16
3118c     A7 08 48 CC |  if_b	wrbyte	#4, fp
31190     10 4E 85 C1 |  if_b	sub	fp, #16
31194     74 00 90 CD |  if_b	jmp	#LR__4798
31198     97 24 48 FB | 	callpa	#(@LR__4796-@LR__4794)>>2,fcache_load_ptr_
3119c                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
3119c                 | LR__4794
3119c     30 4E 05 F1 | 	add	fp, #48
311a0     A7 2C 02 FB | 	rdlong	local04, fp
311a4     30 4E 85 F1 | 	sub	fp, #48
311a8     16 33 C2 FA | 	rdbyte	local07, local04
311ac     2F 32 0E F2 | 	cmp	local07, #47 wz
311b0     18 00 90 AD |  if_e	jmp	#LR__4795
311b4     30 4E 05 F1 | 	add	fp, #48
311b8     A7 2C 02 FB | 	rdlong	local04, fp
311bc     30 4E 85 F1 | 	sub	fp, #48
311c0     16 29 C2 FA | 	rdbyte	local02, local04
311c4     5C 28 0E F2 | 	cmp	local02, #92 wz
311c8     18 00 90 5D |  if_ne	jmp	#LR__4797
311cc                 | LR__4795
311cc     30 4E 05 F1 | 	add	fp, #48
311d0     A7 26 02 FB | 	rdlong	local01, fp
311d4     01 26 06 F1 | 	add	local01, #1
311d8     A7 26 62 FC | 	wrlong	local01, fp
311dc     30 4E 85 F1 | 	sub	fp, #48
311e0     B8 FF 9F FD | 	jmp	#LR__4794
311e4                 | LR__4796
311e4                 | LR__4797
311e4     10 4E 05 F1 | 	add	fp, #16
311e8     A7 00 48 FC | 	wrbyte	#0, fp
311ec     20 4E 05 F1 | 	add	fp, #32
311f0     A7 30 02 FB | 	rdlong	local06, fp
311f4     30 4E 85 F1 | 	sub	fp, #48
311f8     18 33 C2 FA | 	rdbyte	local07, local06
311fc     20 32 16 F2 | 	cmp	local07, #32 wc
31200     10 4E 05 C1 |  if_b	add	fp, #16
31204     A7 08 48 CC |  if_b	wrbyte	#4, fp
31208     10 4E 85 C1 |  if_b	sub	fp, #16
3120c                 | LR__4798
3120c     08 4E 05 F1 | 	add	fp, #8
31210     A7 32 02 FB | 	rdlong	local07, fp
31214     28 4E 05 F1 | 	add	fp, #40
31218     A7 26 02 FB | 	rdlong	local01, fp
3121c     30 4E 85 F1 | 	sub	fp, #48
31220     19 27 62 FC | 	wrlong	local01, local07
31224     97 38 48 FB | 	callpa	#(@LR__4800-@LR__4799)>>2,fcache_load_ptr_
31228                 | ' 	}
31228                 | ' 	*path = p;
31228                 | ' #line 2862 "ff.c"
31228                 | ' 	while (di) {
31228                 | LR__4799
31228     2C 4E 05 F1 | 	add	fp, #44
3122c     A7 32 0A FB | 	rdlong	local07, fp wz
31230     2C 4E 85 F1 | 	sub	fp, #44
31234     60 00 90 AD |  if_e	jmp	#LR__4801
31238     18 4E 05 F1 | 	add	fp, #24
3123c     A7 30 02 FB | 	rdlong	local06, fp
31240     14 4E 05 F1 | 	add	fp, #20
31244     A7 2C 02 FB | 	rdlong	local04, fp
31248     01 2C 86 F1 | 	sub	local04, #1
3124c     01 2C 66 F0 | 	shl	local04, #1
31250     18 2D 02 F1 | 	add	local04, local06
31254     16 31 E2 FA | 	rdword	local06, local04
31258     18 4E 85 F1 | 	sub	fp, #24
3125c     A7 30 52 FC | 	wrword	local06, fp
31260     A7 32 E2 FA | 	rdword	local07, fp
31264     14 4E 85 F1 | 	sub	fp, #20
31268     20 32 0E F2 | 	cmp	local07, #32 wz
3126c     14 4E 05 51 |  if_ne	add	fp, #20
31270     A7 26 E2 5A |  if_ne	rdword	local01, fp
31274     14 4E 85 51 |  if_ne	sub	fp, #20
31278     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
3127c     18 00 90 5D |  if_ne	jmp	#LR__4801
31280     2C 4E 05 F1 | 	add	fp, #44
31284     A7 26 02 FB | 	rdlong	local01, fp
31288     01 26 86 F1 | 	sub	local01, #1
3128c     A7 26 62 FC | 	wrlong	local01, fp
31290     2C 4E 85 F1 | 	sub	fp, #44
31294     90 FF 9F FD | 	jmp	#LR__4799
31298                 | LR__4800
31298                 | LR__4801
31298     18 4E 05 F1 | 	add	fp, #24
3129c     A7 34 02 FB | 	rdlong	local08, fp
312a0     14 4E 05 F1 | 	add	fp, #20
312a4     A7 2C 02 FB | 	rdlong	local04, fp
312a8     01 2C 66 F0 | 	shl	local04, #1
312ac     1A 2D 02 F1 | 	add	local04, local08
312b0     16 01 58 FC | 	wrword	#0, local04
312b4     A7 32 0A FB | 	rdlong	local07, fp wz
312b8     2C 4E 85 F1 | 	sub	fp, #44
312bc     06 FA 05 A6 |  if_e	mov	result1, #6
312c0     04 06 90 AD |  if_e	jmp	#LR__4830
312c4                 | ' 
312c4                 | ' 
312c4                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
312c4     28 4E 05 F1 | 	add	fp, #40
312c8     A7 00 68 FC | 	wrlong	#0, fp
312cc     28 4E 85 F1 | 	sub	fp, #40
312d0     97 22 48 FB | 	callpa	#(@LR__4803-@LR__4802)>>2,fcache_load_ptr_
312d4                 | LR__4802
312d4     18 4E 05 F1 | 	add	fp, #24
312d8     A7 36 02 FB | 	rdlong	local09, fp
312dc     10 4E 05 F1 | 	add	fp, #16
312e0     A7 38 02 FB | 	rdlong	local10, fp
312e4     28 4E 85 F1 | 	sub	fp, #40
312e8     01 38 66 F0 | 	shl	local10, #1
312ec     1B 39 02 F1 | 	add	local10, local09
312f0     1C 3B E2 FA | 	rdword	local11, local10
312f4     20 3A 0E F2 | 	cmp	local11, #32 wz
312f8     1C 00 90 5D |  if_ne	jmp	#LR__4804
312fc     28 4E 05 F1 | 	add	fp, #40
31300     A7 3C 02 FB | 	rdlong	local12, fp
31304     1E 2F 02 F6 | 	mov	local05, local12
31308     01 2E 06 F1 | 	add	local05, #1
3130c     A7 2E 62 FC | 	wrlong	local05, fp
31310     28 4E 85 F1 | 	sub	fp, #40
31314     BC FF 9F FD | 	jmp	#LR__4802
31318                 | LR__4803
31318                 | LR__4804
31318     28 4E 05 F1 | 	add	fp, #40
3131c     A7 32 02 FB | 	rdlong	local07, fp
31320     28 4E 85 F1 | 	sub	fp, #40
31324     01 32 16 F2 | 	cmp	local07, #1 wc
31328     28 00 90 3D |  if_ae	jmp	#LR__4805
3132c     18 4E 05 F1 | 	add	fp, #24
31330     A7 2A 02 FB | 	rdlong	local03, fp
31334     10 4E 05 F1 | 	add	fp, #16
31338     A7 36 02 FB | 	rdlong	local09, fp
3133c     28 4E 85 F1 | 	sub	fp, #40
31340     01 36 66 F0 | 	shl	local09, #1
31344     15 37 02 F1 | 	add	local09, local03
31348     1B 27 E2 FA | 	rdword	local01, local09
3134c     2E 26 0E F2 | 	cmp	local01, #46 wz
31350     14 00 90 5D |  if_ne	jmp	#LR__4806
31354                 | LR__4805
31354     10 4E 05 F1 | 	add	fp, #16
31358     A7 32 C2 FA | 	rdbyte	local07, fp
3135c     03 32 46 F5 | 	or	local07, #3
31360     A7 32 42 FC | 	wrbyte	local07, fp
31364     10 4E 85 F1 | 	sub	fp, #16
31368                 | LR__4806
31368     97 2C 48 FB | 	callpa	#(@LR__4808-@LR__4807)>>2,fcache_load_ptr_
3136c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
3136c                 | LR__4807
3136c     2C 4E 05 F1 | 	add	fp, #44
31370     A7 32 02 FB | 	rdlong	local07, fp
31374     2C 4E 85 F1 | 	sub	fp, #44
31378     01 32 16 F2 | 	cmp	local07, #1 wc
3137c     44 00 90 CD |  if_b	jmp	#LR__4809
31380     18 4E 05 F1 | 	add	fp, #24
31384     A7 30 02 FB | 	rdlong	local06, fp
31388     14 4E 05 F1 | 	add	fp, #20
3138c     A7 2A 02 FB | 	rdlong	local03, fp
31390     2C 4E 85 F1 | 	sub	fp, #44
31394     01 2A 86 F1 | 	sub	local03, #1
31398     01 2A 66 F0 | 	shl	local03, #1
3139c     18 2B 02 F1 | 	add	local03, local06
313a0     15 27 E2 FA | 	rdword	local01, local03
313a4     2E 26 0E F2 | 	cmp	local01, #46 wz
313a8     18 00 90 AD |  if_e	jmp	#LR__4809
313ac     2C 4E 05 F1 | 	add	fp, #44
313b0     A7 26 02 FB | 	rdlong	local01, fp
313b4     01 26 86 F1 | 	sub	local01, #1
313b8     A7 26 62 FC | 	wrlong	local01, fp
313bc     2C 4E 85 F1 | 	sub	fp, #44
313c0     A8 FF 9F FD | 	jmp	#LR__4807
313c4                 | LR__4808
313c4                 | LR__4809
313c4     04 4E 05 F1 | 	add	fp, #4
313c8     A7 12 02 FB | 	rdlong	arg01, fp
313cc     04 4E 85 F1 | 	sub	fp, #4
313d0     20 12 06 F1 | 	add	arg01, #32
313d4     20 14 06 F6 | 	mov	arg02, #32
313d8     0B 16 06 F6 | 	mov	arg03, #11
313dc     09 3F 02 F6 | 	mov	local13, arg01
313e0     98 00 A0 FD | 	call	#\builtin_bytefill_
313e4     1F FB 01 F6 | 	mov	result1, local13
313e8     0C 4E 05 F1 | 	add	fp, #12
313ec     A7 00 48 FC | 	wrbyte	#0, fp
313f0     A7 32 C2 FA | 	rdbyte	local07, fp
313f4     14 4E 05 F1 | 	add	fp, #20
313f8     A7 32 62 FC | 	wrlong	local07, fp
313fc     04 4E 05 F1 | 	add	fp, #4
31400     A7 10 68 FC | 	wrlong	#8, fp
31404     24 4E 85 F1 | 	sub	fp, #36
31408                 | ' 
31408                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
31408                 | ' 	i = b = 0; ni = 8;
31408                 | ' 	for (;;) {
31408                 | LR__4810
31408     18 4E 05 F1 | 	add	fp, #24
3140c     A7 2A 02 FB | 	rdlong	local03, fp
31410     10 4E 05 F1 | 	add	fp, #16
31414     A7 36 02 FB | 	rdlong	local09, fp
31418     1B 2D 02 F6 | 	mov	local04, local09
3141c     01 2C 06 F1 | 	add	local04, #1
31420     A7 2C 62 FC | 	wrlong	local04, fp
31424     01 36 66 F0 | 	shl	local09, #1
31428     15 37 02 F1 | 	add	local09, local03
3142c     1B 31 E2 FA | 	rdword	local06, local09
31430     14 4E 85 F1 | 	sub	fp, #20
31434     A7 30 52 FC | 	wrword	local06, fp
31438     A7 32 EA FA | 	rdword	local07, fp wz
3143c     14 4E 85 F1 | 	sub	fp, #20
31440     74 03 90 AD |  if_e	jmp	#LR__4826
31444     14 4E 05 F1 | 	add	fp, #20
31448     A7 32 E2 FA | 	rdword	local07, fp
3144c     14 4E 85 F1 | 	sub	fp, #20
31450     20 32 0E F2 | 	cmp	local07, #32 wz
31454     30 00 90 AD |  if_e	jmp	#LR__4811
31458     14 4E 05 F1 | 	add	fp, #20
3145c     A7 26 E2 FA | 	rdword	local01, fp
31460     14 4E 85 F1 | 	sub	fp, #20
31464     2E 26 0E F2 | 	cmp	local01, #46 wz
31468     34 00 90 5D |  if_ne	jmp	#LR__4812
3146c     28 4E 05 F1 | 	add	fp, #40
31470     A7 2C 02 FB | 	rdlong	local04, fp
31474     04 4E 05 F1 | 	add	fp, #4
31478     A7 38 02 FB | 	rdlong	local10, fp
3147c     2C 4E 85 F1 | 	sub	fp, #44
31480     1C 2D 0A F2 | 	cmp	local04, local10 wz
31484     18 00 90 AD |  if_e	jmp	#LR__4812
31488                 | LR__4811
31488     10 4E 05 F1 | 	add	fp, #16
3148c     A7 32 C2 FA | 	rdbyte	local07, fp
31490     03 32 46 F5 | 	or	local07, #3
31494     A7 32 42 FC | 	wrbyte	local07, fp
31498     10 4E 85 F1 | 	sub	fp, #16
3149c                 | ' 			cf |=  0x01  |  0x02 ;
3149c                 | ' 			continue;
3149c     68 FF 9F FD | 	jmp	#LR__4810
314a0                 | LR__4812
314a0     20 4E 05 F1 | 	add	fp, #32
314a4     A7 32 02 FB | 	rdlong	local07, fp
314a8     04 4E 05 F1 | 	add	fp, #4
314ac     A7 26 02 FB | 	rdlong	local01, fp
314b0     24 4E 85 F1 | 	sub	fp, #36
314b4     13 33 12 F2 | 	cmp	local07, local01 wc
314b8     1C 00 90 3D |  if_ae	jmp	#LR__4813
314bc     28 4E 05 F1 | 	add	fp, #40
314c0     A7 34 02 FB | 	rdlong	local08, fp
314c4     04 4E 05 F1 | 	add	fp, #4
314c8     A7 38 02 FB | 	rdlong	local10, fp
314cc     2C 4E 85 F1 | 	sub	fp, #44
314d0     1C 35 0A F2 | 	cmp	local08, local10 wz
314d4     B0 00 90 5D |  if_ne	jmp	#LR__4815
314d8                 | LR__4813
314d8     24 4E 05 F1 | 	add	fp, #36
314dc     A7 32 02 FB | 	rdlong	local07, fp
314e0     24 4E 85 F1 | 	sub	fp, #36
314e4     0B 32 0E F2 | 	cmp	local07, #11 wz
314e8     18 00 90 5D |  if_ne	jmp	#LR__4814
314ec     10 4E 05 F1 | 	add	fp, #16
314f0     A7 32 C2 FA | 	rdbyte	local07, fp
314f4     03 32 46 F5 | 	or	local07, #3
314f8     A7 32 42 FC | 	wrbyte	local07, fp
314fc     10 4E 85 F1 | 	sub	fp, #16
31500                 | ' 				cf |=  0x01  |  0x02 ;
31500                 | ' 				break;
31500     B4 02 90 FD | 	jmp	#LR__4826
31504                 | LR__4814
31504     28 4E 05 F1 | 	add	fp, #40
31508     A7 32 02 FB | 	rdlong	local07, fp
3150c     04 4E 05 F1 | 	add	fp, #4
31510     A7 26 02 FB | 	rdlong	local01, fp
31514     2C 4E 85 F1 | 	sub	fp, #44
31518     13 33 0A F2 | 	cmp	local07, local01 wz
3151c     10 4E 05 51 |  if_ne	add	fp, #16
31520     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
31524     03 32 46 55 |  if_ne	or	local07, #3
31528     A7 32 42 5C |  if_ne	wrbyte	local07, fp
3152c     10 4E 85 51 |  if_ne	sub	fp, #16
31530     28 4E 05 F1 | 	add	fp, #40
31534     A7 32 02 FB | 	rdlong	local07, fp
31538     04 4E 05 F1 | 	add	fp, #4
3153c     A7 28 02 FB | 	rdlong	local02, fp
31540     2C 4E 85 F1 | 	sub	fp, #44
31544     14 33 1A F2 | 	cmp	local07, local02 wcz
31548     6C 02 90 1D |  if_a	jmp	#LR__4826
3154c     2C 4E 05 F1 | 	add	fp, #44
31550     A7 32 02 FB | 	rdlong	local07, fp
31554     04 4E 85 F1 | 	sub	fp, #4
31558     A7 32 62 FC | 	wrlong	local07, fp
3155c     08 4E 85 F1 | 	sub	fp, #8
31560     A7 10 68 FC | 	wrlong	#8, fp
31564     04 4E 05 F1 | 	add	fp, #4
31568     A7 16 68 FC | 	wrlong	#11, fp
3156c     18 4E 85 F1 | 	sub	fp, #24
31570     A7 3A C2 FA | 	rdbyte	local11, fp
31574     1D 33 E2 F8 | 	getbyte	local07, local11, #0
31578     02 32 66 F0 | 	shl	local07, #2
3157c     A7 32 42 FC | 	wrbyte	local07, fp
31580     0C 4E 85 F1 | 	sub	fp, #12
31584                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
31584                 | ' 			continue;
31584     80 FE 9F FD | 	jmp	#LR__4810
31588                 | LR__4815
31588     14 4E 05 F1 | 	add	fp, #20
3158c     A7 32 E2 FA | 	rdword	local07, fp
31590     14 4E 85 F1 | 	sub	fp, #20
31594     80 32 16 F2 | 	cmp	local07, #128 wc
31598     6C 00 90 CD |  if_b	jmp	#LR__4817
3159c     10 4E 05 F1 | 	add	fp, #16
315a0     A7 32 C2 FA | 	rdbyte	local07, fp
315a4     02 32 46 F5 | 	or	local07, #2
315a8     A7 32 42 FC | 	wrbyte	local07, fp
315ac     04 4E 05 F1 | 	add	fp, #4
315b0     A7 12 E2 FA | 	rdword	arg01, fp
315b4     14 4E 85 F1 | 	sub	fp, #20
315b8     01 00 00 FF 
315bc     52 15 06 F6 | 	mov	arg02, ##850
315c0     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
315c4     14 4E 05 F1 | 	add	fp, #20
315c8     A7 FA 51 FC | 	wrword	result1, fp
315cc     A7 32 E2 FA | 	rdword	local07, fp
315d0     14 4E 85 F1 | 	sub	fp, #20
315d4     80 32 CE F7 | 	test	local07, #128 wz
315d8     2C 00 90 AD |  if_e	jmp	#LR__4816
315dc     14 4E 05 F1 | 	add	fp, #20
315e0     A7 28 E2 FA | 	rdword	local02, fp
315e4     7F 28 06 F5 | 	and	local02, #127
315e8     01 00 00 FF 
315ec     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
315f0     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
315f4     14 33 C2 FA | 	rdbyte	local07, local02
315f8     A7 32 52 FC | 	wrword	local07, fp
315fc     14 4E 85 F1 | 	sub	fp, #20
31600     01 00 00 FF 
31604     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
31608                 | LR__4816
31608                 | LR__4817
31608     14 4E 05 F1 | 	add	fp, #20
3160c     A7 32 E2 FA | 	rdword	local07, fp
31610     14 4E 85 F1 | 	sub	fp, #20
31614     00 33 16 F2 | 	cmp	local07, #256 wc
31618     88 00 90 CD |  if_b	jmp	#LR__4819
3161c     24 4E 05 F1 | 	add	fp, #36
31620     A7 32 02 FB | 	rdlong	local07, fp
31624     01 32 86 F1 | 	sub	local07, #1
31628     04 4E 85 F1 | 	sub	fp, #4
3162c     A7 28 02 FB | 	rdlong	local02, fp
31630     20 4E 85 F1 | 	sub	fp, #32
31634     19 29 12 F2 | 	cmp	local02, local07 wc
31638     2C 00 90 CD |  if_b	jmp	#LR__4818
3163c     10 4E 05 F1 | 	add	fp, #16
31640     A7 3A C2 FA | 	rdbyte	local11, fp
31644     1D 33 E2 F8 | 	getbyte	local07, local11, #0
31648     03 32 46 F5 | 	or	local07, #3
3164c     A7 32 42 FC | 	wrbyte	local07, fp
31650     14 4E 05 F1 | 	add	fp, #20
31654     A7 32 02 FB | 	rdlong	local07, fp
31658     04 4E 85 F1 | 	sub	fp, #4
3165c     A7 32 62 FC | 	wrlong	local07, fp
31660     20 4E 85 F1 | 	sub	fp, #32
31664                 | ' 				cf |=  0x01  |  0x02 ;
31664                 | ' 				i = ni; continue;
31664     A0 FD 9F FD | 	jmp	#LR__4810
31668                 | LR__4818
31668     04 4E 05 F1 | 	add	fp, #4
3166c     A7 36 02 FB | 	rdlong	local09, fp
31670     1C 4E 05 F1 | 	add	fp, #28
31674     A7 38 02 FB | 	rdlong	local10, fp
31678     1C 2D 02 F6 | 	mov	local04, local10
3167c     01 2C 06 F1 | 	add	local04, #1
31680     A7 2C 62 FC | 	wrlong	local04, fp
31684     20 36 06 F1 | 	add	local09, #32
31688     1B 39 02 F1 | 	add	local10, local09
3168c     0C 4E 85 F1 | 	sub	fp, #12
31690     A7 2A E2 FA | 	rdword	local03, fp
31694     14 4E 85 F1 | 	sub	fp, #20
31698     08 2A 46 F0 | 	shr	local03, #8
3169c     1C 2B 42 FC | 	wrbyte	local03, local10
316a0     D4 00 90 FD | 	jmp	#LR__4825
316a4                 | LR__4819
316a4     14 4E 05 F1 | 	add	fp, #20
316a8     A7 32 EA FA | 	rdword	local07, fp wz
316ac     14 4E 85 F1 | 	sub	fp, #20
316b0     20 00 90 AD |  if_e	jmp	#LR__4820
316b4     B8 01 00 FF 
316b8     41 12 06 F6 | 	mov	arg01, ##@LR__5453
316bc     14 4E 05 F1 | 	add	fp, #20
316c0     A7 14 E2 FA | 	rdword	arg02, fp
316c4     14 4E 85 F1 | 	sub	fp, #20
316c8     48 CB BF FD | 	call	#_fatfs_cc_strchr
316cc     00 FA 0D F2 | 	cmp	result1, #0 wz
316d0     20 00 90 AD |  if_e	jmp	#LR__4821
316d4                 | LR__4820
316d4     14 4E 05 F1 | 	add	fp, #20
316d8     A7 BE 58 FC | 	wrword	#95, fp
316dc     04 4E 85 F1 | 	sub	fp, #4
316e0     A7 32 C2 FA | 	rdbyte	local07, fp
316e4     03 32 46 F5 | 	or	local07, #3
316e8     A7 32 42 FC | 	wrbyte	local07, fp
316ec     10 4E 85 F1 | 	sub	fp, #16
316f0     84 00 90 FD | 	jmp	#LR__4824
316f4                 | LR__4821
316f4     14 4E 05 F1 | 	add	fp, #20
316f8     A7 32 E2 FA | 	rdword	local07, fp
316fc     14 4E 85 F1 | 	sub	fp, #20
31700     41 32 16 F2 | 	cmp	local07, #65 wc
31704     24 00 90 CD |  if_b	jmp	#LR__4822
31708     14 4E 05 F1 | 	add	fp, #20
3170c     A7 26 E2 FA | 	rdword	local01, fp
31710     14 4E 85 F1 | 	sub	fp, #20
31714     5B 26 16 F2 | 	cmp	local01, #91 wc
31718     0C 4E 05 C1 |  if_b	add	fp, #12
3171c     A7 32 C2 CA |  if_b	rdbyte	local07, fp
31720     02 32 46 C5 |  if_b	or	local07, #2
31724     A7 32 42 CC |  if_b	wrbyte	local07, fp
31728     0C 4E 85 C1 |  if_b	sub	fp, #12
3172c                 | LR__4822
3172c     14 4E 05 F1 | 	add	fp, #20
31730     A7 32 E2 FA | 	rdword	local07, fp
31734     14 4E 85 F1 | 	sub	fp, #20
31738     61 32 16 F2 | 	cmp	local07, #97 wc
3173c     38 00 90 CD |  if_b	jmp	#LR__4823
31740     14 4E 05 F1 | 	add	fp, #20
31744     A7 26 E2 FA | 	rdword	local01, fp
31748     14 4E 85 F1 | 	sub	fp, #20
3174c     7B 26 16 F2 | 	cmp	local01, #123 wc
31750     24 00 90 3D |  if_ae	jmp	#LR__4823
31754     0C 4E 05 F1 | 	add	fp, #12
31758     A7 32 C2 FA | 	rdbyte	local07, fp
3175c     01 32 46 F5 | 	or	local07, #1
31760     A7 32 42 FC | 	wrbyte	local07, fp
31764     08 4E 05 F1 | 	add	fp, #8
31768     A7 32 E2 FA | 	rdword	local07, fp
3176c     20 32 86 F1 | 	sub	local07, #32
31770     A7 32 52 FC | 	wrword	local07, fp
31774     14 4E 85 F1 | 	sub	fp, #20
31778                 | LR__4823
31778                 | LR__4824
31778                 | LR__4825
31778     04 4E 05 F1 | 	add	fp, #4
3177c     A7 3A 02 FB | 	rdlong	local11, fp
31780     1D 37 02 F6 | 	mov	local09, local11
31784     1C 4E 05 F1 | 	add	fp, #28
31788     A7 28 02 FB | 	rdlong	local02, fp
3178c     14 2D 02 F6 | 	mov	local04, local02
31790     01 2C 06 F1 | 	add	local04, #1
31794     A7 2C 62 FC | 	wrlong	local04, fp
31798     14 39 02 F6 | 	mov	local10, local02
3179c     20 36 06 F1 | 	add	local09, #32
317a0     1B 39 02 F1 | 	add	local10, local09
317a4     0C 4E 85 F1 | 	sub	fp, #12
317a8     A7 2A E2 FA | 	rdword	local03, fp
317ac     14 4E 85 F1 | 	sub	fp, #20
317b0     1C 2B 42 FC | 	wrbyte	local03, local10
317b4     50 FC 9F FD | 	jmp	#LR__4810
317b8                 | LR__4826
317b8     04 4E 05 F1 | 	add	fp, #4
317bc     A7 3A 02 FB | 	rdlong	local11, fp
317c0     04 4E 85 F1 | 	sub	fp, #4
317c4     20 3A 06 F1 | 	add	local11, #32
317c8     1D 33 C2 FA | 	rdbyte	local07, local11
317cc     E5 32 0E F2 | 	cmp	local07, #229 wz
317d0     04 4E 05 A1 |  if_e	add	fp, #4
317d4     A7 32 02 AB |  if_e	rdlong	local07, fp
317d8     04 4E 85 A1 |  if_e	sub	fp, #4
317dc     20 32 06 A1 |  if_e	add	local07, #32
317e0     19 0B 48 AC |  if_e	wrbyte	#5, local07
317e4     24 4E 05 F1 | 	add	fp, #36
317e8     A7 32 02 FB | 	rdlong	local07, fp
317ec     24 4E 85 F1 | 	sub	fp, #36
317f0     08 32 0E F2 | 	cmp	local07, #8 wz
317f4     0C 4E 05 A1 |  if_e	add	fp, #12
317f8     A7 32 C2 AA |  if_e	rdbyte	local07, fp
317fc     02 32 66 A0 |  if_e	shl	local07, #2
31800     A7 32 42 AC |  if_e	wrbyte	local07, fp
31804     0C 4E 85 A1 |  if_e	sub	fp, #12
31808     0C 4E 05 F1 | 	add	fp, #12
3180c     A7 32 C2 FA | 	rdbyte	local07, fp
31810     0C 4E 85 F1 | 	sub	fp, #12
31814     0C 32 06 F5 | 	and	local07, #12
31818     0C 32 0E F2 | 	cmp	local07, #12 wz
3181c     18 00 90 AD |  if_e	jmp	#LR__4827
31820     0C 4E 05 F1 | 	add	fp, #12
31824     A7 26 C2 FA | 	rdbyte	local01, fp
31828     0C 4E 85 F1 | 	sub	fp, #12
3182c     03 26 06 F5 | 	and	local01, #3
31830     03 26 0E F2 | 	cmp	local01, #3 wz
31834     14 00 90 5D |  if_ne	jmp	#LR__4828
31838                 | LR__4827
31838     10 4E 05 F1 | 	add	fp, #16
3183c     A7 32 C2 FA | 	rdbyte	local07, fp
31840     02 32 46 F5 | 	or	local07, #2
31844     A7 32 42 FC | 	wrbyte	local07, fp
31848     10 4E 85 F1 | 	sub	fp, #16
3184c                 | LR__4828
3184c     10 4E 05 F1 | 	add	fp, #16
31850     A7 32 C2 FA | 	rdbyte	local07, fp
31854     10 4E 85 F1 | 	sub	fp, #16
31858     02 32 CE F7 | 	test	local07, #2 wz
3185c     48 00 90 5D |  if_ne	jmp	#LR__4829
31860     0C 4E 05 F1 | 	add	fp, #12
31864     A7 32 C2 FA | 	rdbyte	local07, fp
31868     0C 4E 85 F1 | 	sub	fp, #12
3186c     01 32 CE F7 | 	test	local07, #1 wz
31870     10 4E 05 51 |  if_ne	add	fp, #16
31874     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
31878     10 32 46 55 |  if_ne	or	local07, #16
3187c     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31880     10 4E 85 51 |  if_ne	sub	fp, #16
31884     0C 4E 05 F1 | 	add	fp, #12
31888     A7 32 C2 FA | 	rdbyte	local07, fp
3188c     0C 4E 85 F1 | 	sub	fp, #12
31890     04 32 CE F7 | 	test	local07, #4 wz
31894     10 4E 05 51 |  if_ne	add	fp, #16
31898     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
3189c     08 32 46 55 |  if_ne	or	local07, #8
318a0     A7 32 42 5C |  if_ne	wrbyte	local07, fp
318a4     10 4E 85 51 |  if_ne	sub	fp, #16
318a8                 | LR__4829
318a8     04 4E 05 F1 | 	add	fp, #4
318ac     A7 32 02 FB | 	rdlong	local07, fp
318b0     0C 4E 05 F1 | 	add	fp, #12
318b4     A7 26 C2 FA | 	rdbyte	local01, fp
318b8     10 4E 85 F1 | 	sub	fp, #16
318bc     2B 32 06 F1 | 	add	local07, #43
318c0     19 27 42 FC | 	wrbyte	local01, local07
318c4                 | ' 	}
318c4                 | ' 
318c4                 | ' 	dp->fn[ 11 ] = cf;
318c4                 | ' 
318c4                 | ' 	return FR_OK;
318c4     00 FA 05 F6 | 	mov	result1, #0
318c8                 | LR__4830
318c8     A7 F0 03 F6 | 	mov	ptra, fp
318cc     B2 00 A0 FD | 	call	#popregs_
318d0                 | _fatfs_cc_create_name_ret
318d0     2D 00 64 FD | 	ret
318d4                 | 
318d4                 | _fatfs_cc_follow_path
318d4     02 4A 05 F6 | 	mov	COUNT_, #2
318d8     A8 00 A0 FD | 	call	#pushregs_
318dc     18 F0 07 F1 | 	add	ptra, #24
318e0     04 4E 05 F1 | 	add	fp, #4
318e4     A7 12 62 FC | 	wrlong	arg01, fp
318e8     04 4E 05 F1 | 	add	fp, #4
318ec     A7 14 62 FC | 	wrlong	arg02, fp
318f0     04 4E 85 F1 | 	sub	fp, #4
318f4     A7 FA 01 FB | 	rdlong	result1, fp
318f8     FD 26 02 FB | 	rdlong	local01, result1
318fc     10 4E 05 F1 | 	add	fp, #16
31900     A7 26 62 FC | 	wrlong	local01, fp
31904     14 4E 85 F1 | 	sub	fp, #20
31908     97 24 48 FB | 	callpa	#(@LR__4842-@LR__4840)>>2,fcache_load_ptr_
3190c                 | ' )
3190c                 | ' {
3190c                 | ' 	FRESULT res;
3190c                 | ' 	BYTE ns;
3190c                 | ' 	FATFS *fs = dp->obj.fs;
3190c                 | ' #line 3034 "ff.c"
3190c                 | ' 	{
3190c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
3190c                 | LR__4840
3190c     08 4E 05 F1 | 	add	fp, #8
31910     A7 26 02 FB | 	rdlong	local01, fp
31914     08 4E 85 F1 | 	sub	fp, #8
31918     13 27 C2 FA | 	rdbyte	local01, local01
3191c     2F 26 0E F2 | 	cmp	local01, #47 wz
31920     18 00 90 AD |  if_e	jmp	#LR__4841
31924     08 4E 05 F1 | 	add	fp, #8
31928     A7 26 02 FB | 	rdlong	local01, fp
3192c     08 4E 85 F1 | 	sub	fp, #8
31930     13 27 C2 FA | 	rdbyte	local01, local01
31934     5C 26 0E F2 | 	cmp	local01, #92 wz
31938     18 00 90 5D |  if_ne	jmp	#LR__4843
3193c                 | LR__4841
3193c     08 4E 05 F1 | 	add	fp, #8
31940     A7 26 02 FB | 	rdlong	local01, fp
31944     01 26 06 F1 | 	add	local01, #1
31948     A7 26 62 FC | 	wrlong	local01, fp
3194c     08 4E 85 F1 | 	sub	fp, #8
31950     B8 FF 9F FD | 	jmp	#LR__4840
31954                 | LR__4842
31954                 | LR__4843
31954     04 4E 05 F1 | 	add	fp, #4
31958     A7 26 02 FB | 	rdlong	local01, fp
3195c     08 26 06 F1 | 	add	local01, #8
31960     13 01 68 FC | 	wrlong	#0, local01
31964     04 4E 05 F1 | 	add	fp, #4
31968     A7 26 02 FB | 	rdlong	local01, fp
3196c     08 4E 85 F1 | 	sub	fp, #8
31970     13 27 C2 FA | 	rdbyte	local01, local01
31974     20 26 16 F2 | 	cmp	local01, #32 wc
31978     30 00 90 3D |  if_ae	jmp	#LR__4844
3197c     04 4E 05 F1 | 	add	fp, #4
31980     A7 26 02 FB | 	rdlong	local01, fp
31984     2B 26 06 F1 | 	add	local01, #43
31988     13 01 49 FC | 	wrbyte	#128, local01
3198c     A7 12 02 FB | 	rdlong	arg01, fp
31990     04 4E 85 F1 | 	sub	fp, #4
31994     00 14 06 F6 | 	mov	arg02, #0
31998     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
3199c     0C 4E 05 F1 | 	add	fp, #12
319a0     A7 FA 61 FC | 	wrlong	result1, fp
319a4     0C 4E 85 F1 | 	sub	fp, #12
319a8     1C 01 90 FD | 	jmp	#LR__4848
319ac                 | LR__4844
319ac                 | ' 		for (;;) {
319ac                 | LR__4845
319ac     04 4E 05 F1 | 	add	fp, #4
319b0     A7 12 02 FB | 	rdlong	arg01, fp
319b4     04 4E 05 F1 | 	add	fp, #4
319b8     A7 14 02 F6 | 	mov	arg02, fp
319bc     08 4E 85 F1 | 	sub	fp, #8
319c0     14 F6 BF FD | 	call	#_fatfs_cc_create_name
319c4     0C 4E 05 F1 | 	add	fp, #12
319c8     A7 FA 61 FC | 	wrlong	result1, fp
319cc     00 FA 4D F2 | 	cmps	result1, #0 wz
319d0     0C 4E 85 F1 | 	sub	fp, #12
319d4     F0 00 90 5D |  if_ne	jmp	#LR__4847
319d8     04 4E 05 F1 | 	add	fp, #4
319dc     A7 12 02 FB | 	rdlong	arg01, fp
319e0     04 4E 85 F1 | 	sub	fp, #4
319e4     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
319e8     0C 4E 05 F1 | 	add	fp, #12
319ec     A7 FA 61 FC | 	wrlong	result1, fp
319f0     08 4E 85 F1 | 	sub	fp, #8
319f4     A7 26 02 FB | 	rdlong	local01, fp
319f8     2B 26 06 F1 | 	add	local01, #43
319fc     13 27 C2 FA | 	rdbyte	local01, local01
31a00     0C 4E 05 F1 | 	add	fp, #12
31a04     A7 26 42 FC | 	wrbyte	local01, fp
31a08     04 4E 85 F1 | 	sub	fp, #4
31a0c     A7 26 0A FB | 	rdlong	local01, fp wz
31a10     0C 4E 85 F1 | 	sub	fp, #12
31a14     34 00 90 AD |  if_e	jmp	#LR__4846
31a18     0C 4E 05 F1 | 	add	fp, #12
31a1c     A7 26 02 FB | 	rdlong	local01, fp
31a20     0C 4E 85 F1 | 	sub	fp, #12
31a24     04 26 0E F2 | 	cmp	local01, #4 wz
31a28     9C 00 90 5D |  if_ne	jmp	#LR__4847
31a2c     10 4E 05 F1 | 	add	fp, #16
31a30     A7 26 C2 FA | 	rdbyte	local01, fp
31a34     10 4E 85 F1 | 	sub	fp, #16
31a38     04 26 CE F7 | 	test	local01, #4 wz
31a3c     0C 4E 05 A1 |  if_e	add	fp, #12
31a40     A7 0A 68 AC |  if_e	wrlong	#5, fp
31a44     0C 4E 85 A1 |  if_e	sub	fp, #12
31a48                 | ' 					}
31a48                 | ' 				}
31a48                 | ' 				break;
31a48     7C 00 90 FD | 	jmp	#LR__4847
31a4c                 | LR__4846
31a4c     10 4E 05 F1 | 	add	fp, #16
31a50     A7 26 C2 FA | 	rdbyte	local01, fp
31a54     10 4E 85 F1 | 	sub	fp, #16
31a58     04 26 CE F7 | 	test	local01, #4 wz
31a5c     68 00 90 5D |  if_ne	jmp	#LR__4847
31a60     04 4E 05 F1 | 	add	fp, #4
31a64     A7 26 02 FB | 	rdlong	local01, fp
31a68     04 4E 85 F1 | 	sub	fp, #4
31a6c     06 26 06 F1 | 	add	local01, #6
31a70     13 27 C2 FA | 	rdbyte	local01, local01
31a74     10 26 CE F7 | 	test	local01, #16 wz
31a78     0C 4E 05 A1 |  if_e	add	fp, #12
31a7c     A7 0A 68 AC |  if_e	wrlong	#5, fp
31a80     0C 4E 85 A1 |  if_e	sub	fp, #12
31a84                 | ' 				res = FR_NO_PATH; break;
31a84     40 00 90 AD |  if_e	jmp	#LR__4847
31a88     04 4E 05 F1 | 	add	fp, #4
31a8c     A7 28 02 FB | 	rdlong	local02, fp
31a90     14 27 02 F6 | 	mov	local01, local02
31a94     10 4E 05 F1 | 	add	fp, #16
31a98     A7 14 02 FB | 	rdlong	arg02, fp
31a9c     0A 13 02 F6 | 	mov	arg01, arg02
31aa0     34 14 06 F1 | 	add	arg02, #52
31aa4     14 4E 85 F1 | 	sub	fp, #20
31aa8     10 28 06 F1 | 	add	local02, #16
31aac     14 29 02 FB | 	rdlong	local02, local02
31ab0     FF 29 06 F5 | 	and	local02, #511
31ab4     14 15 02 F1 | 	add	arg02, local02
31ab8     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
31abc     08 26 06 F1 | 	add	local01, #8
31ac0     13 FB 61 FC | 	wrlong	result1, local01
31ac4     E4 FE 9F FD | 	jmp	#LR__4845
31ac8                 | LR__4847
31ac8                 | LR__4848
31ac8                 | ' 			}
31ac8                 | ' #line 3090 "ff.c"
31ac8                 | ' 			{
31ac8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
31ac8                 | ' 			}
31ac8                 | ' 		}
31ac8                 | ' 	}
31ac8                 | ' 
31ac8                 | ' 	return res;
31ac8     0C 4E 05 F1 | 	add	fp, #12
31acc     A7 FA 01 FB | 	rdlong	result1, fp
31ad0     0C 4E 85 F1 | 	sub	fp, #12
31ad4     A7 F0 03 F6 | 	mov	ptra, fp
31ad8     B2 00 A0 FD | 	call	#popregs_
31adc                 | _fatfs_cc_follow_path_ret
31adc     2D 00 64 FD | 	ret
31ae0                 | 
31ae0                 | _fatfs_cc_get_ldnumber
31ae0     01 00 66 F6 | 	neg	_var01, #1
31ae4     09 03 0A FB | 	rdlong	_var02, arg01 wz
31ae8     01 05 02 F6 | 	mov	_var03, _var02
31aec     01 FA 65 A6 |  if_e	neg	result1, #1
31af0     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
31af4     97 10 48 FB | 	callpa	#(@LR__4851-@LR__4850)>>2,fcache_load_ptr_
31af8                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
31af8                 | LR__4850
31af8     02 07 C2 FA | 	rdbyte	_var04, _var03
31afc     03 FB E1 F8 | 	getbyte	result1, _var04, #0
31b00     20 FA 15 F2 | 	cmp	result1, #32 wc
31b04     01 04 06 F1 | 	add	_var03, #1
31b08     03 09 02 36 |  if_ae	mov	_var05, _var04
31b0c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
31b10     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
31b14     E0 FF 9F 1D |  if_a	jmp	#LR__4850
31b18                 | LR__4851
31b18     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
31b1c     3A 06 0E F2 | 	cmp	_var04, #58 wz
31b20     40 00 90 5D |  if_ne	jmp	#LR__4853
31b24     01 0A 06 F6 | 	mov	_var06, #1
31b28     01 09 C2 FA | 	rdbyte	_var05, _var02
31b2c     30 08 16 F2 | 	cmp	_var05, #48 wc
31b30     1C 00 90 CD |  if_b	jmp	#LR__4852
31b34     01 09 C2 FA | 	rdbyte	_var05, _var02
31b38     3A 08 16 F2 | 	cmp	_var05, #58 wc
31b3c     01 0D 02 C6 |  if_b	mov	_var07, _var02
31b40     02 0C 06 C1 |  if_b	add	_var07, #2
31b44     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
31b48     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
31b4c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
31b50                 | LR__4852
31b50     01 0A 56 F2 | 	cmps	_var06, #1 wc
31b54     05 01 02 C6 |  if_b	mov	_var01, _var06
31b58     09 05 62 CC |  if_b	wrlong	_var03, arg01
31b5c                 | ' 			vol = i;
31b5c                 | ' 			*path = tt;
31b5c                 | ' 		}
31b5c                 | ' 		return vol;
31b5c     00 FB 01 F6 | 	mov	result1, _var01
31b60     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
31b64                 | LR__4853
31b64                 | ' 	}
31b64                 | ' #line 3170 "ff.c"
31b64                 | ' 	vol = 0;
31b64                 | ' 
31b64                 | ' 	return vol;
31b64     00 FA 05 F6 | 	mov	result1, #0
31b68                 | _fatfs_cc_get_ldnumber_ret
31b68     2D 00 64 FD | 	ret
31b6c                 | 
31b6c                 | _fatfs_cc_check_fs
31b6c     04 4A 05 F6 | 	mov	COUNT_, #4
31b70     A8 00 A0 FD | 	call	#pushregs_
31b74     09 27 02 F6 | 	mov	local01, arg01
31b78     03 26 06 F1 | 	add	local01, #3
31b7c     13 01 48 FC | 	wrbyte	#0, local01
31b80     2D 26 06 F1 | 	add	local01, #45
31b84     FF FF FF FF 
31b88     13 FF 6B FC | 	wrlong	##-1, local01
31b8c     30 26 86 F1 | 	sub	local01, #48
31b90     13 13 02 F6 | 	mov	arg01, local01
31b94     18 D5 BF FD | 	call	#_fatfs_cc_move_window
31b98     00 FA 0D F2 | 	cmp	result1, #0 wz
31b9c     04 FA 05 56 |  if_ne	mov	result1, #4
31ba0     94 01 90 5D |  if_ne	jmp	#LR__4864
31ba4     34 26 06 F1 | 	add	local01, #52
31ba8     13 13 02 F6 | 	mov	arg01, local01
31bac     FE 13 06 F1 | 	add	arg01, #510
31bb0                 | ' {
31bb0                 | ' 
31bb0                 | ' 	return *((WORD*)ptr);
31bb0     09 29 E2 FA | 	rdword	local02, arg01
31bb4     13 2B C2 FA | 	rdbyte	local03, local01
31bb8     34 26 86 F1 | 	sub	local01, #52
31bbc     15 2D E2 F8 | 	getbyte	local04, local03, #0
31bc0     EB 2C 0E F2 | 	cmp	local04, #235 wz
31bc4     15 17 02 56 |  if_ne	mov	arg03, local03
31bc8     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
31bcc     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
31bd0     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
31bd4     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
31bd8     44 01 90 5D |  if_ne	jmp	#LR__4863
31bdc     14 2D 32 F9 | 	getword	local04, local02, #0
31be0     55 00 00 FF 
31be4     55 2C 0E F2 | 	cmp	local04, ##43605 wz
31be8     2C 00 90 5D |  if_ne	jmp	#LR__4860
31bec     34 26 06 F1 | 	add	local01, #52
31bf0     13 13 02 F6 | 	mov	arg01, local01
31bf4     34 26 86 F1 | 	sub	local01, #52
31bf8     52 12 06 F1 | 	add	arg01, #82
31bfc     B8 01 00 FF 
31c00     48 14 06 F6 | 	mov	arg02, ##@LR__5454
31c04     08 16 06 F6 | 	mov	arg03, #8
31c08     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
31c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
31c10                 | ' 			return 0;
31c10     00 FA 05 A6 |  if_e	mov	result1, #0
31c14     20 01 90 AD |  if_e	jmp	#LR__4864
31c18                 | LR__4860
31c18     34 26 06 F1 | 	add	local01, #52
31c1c     13 13 02 F6 | 	mov	arg01, local01
31c20     0B 12 06 F1 | 	add	arg01, #11
31c24                 | ' {
31c24                 | ' 
31c24                 | ' 	return *((WORD*)ptr);
31c24     09 FB E1 FA | 	rdword	result1, arg01
31c28     0D 26 06 F1 | 	add	local01, #13
31c2c     13 2B C2 FA | 	rdbyte	local03, local01
31c30     41 26 86 F1 | 	sub	local01, #65
31c34     FD 2C 32 F9 | 	getword	local04, result1, #0
31c38     FD 14 32 F9 | 	getword	arg02, result1, #0
31c3c     01 14 86 F1 | 	sub	arg02, #1
31c40     0A 2D CA F7 | 	test	local04, arg02 wz
31c44     D8 00 90 5D |  if_ne	jmp	#LR__4862
31c48     FD 14 32 F9 | 	getword	arg02, result1, #0
31c4c     01 00 00 FF 
31c50     00 14 16 F2 | 	cmp	arg02, ##512 wc
31c54     C8 00 90 CD |  if_b	jmp	#LR__4862
31c58     FD 14 32 F9 | 	getword	arg02, result1, #0
31c5c     01 00 00 FF 
31c60     01 14 16 F2 | 	cmp	arg02, ##513 wc
31c64     B8 00 90 3D |  if_ae	jmp	#LR__4862
31c68     15 13 02 F6 | 	mov	arg01, local03
31c6c     07 12 4E F7 | 	zerox	arg01, #7 wz
31c70     AC 00 90 AD |  if_e	jmp	#LR__4862
31c74     15 13 E2 F8 | 	getbyte	arg01, local03, #0
31c78     15 2B E2 F8 | 	getbyte	local03, local03, #0
31c7c     01 2A 86 F1 | 	sub	local03, #1
31c80     15 13 CA F7 | 	test	arg01, local03 wz
31c84     98 00 90 5D |  if_ne	jmp	#LR__4862
31c88     34 26 06 F1 | 	add	local01, #52
31c8c     13 13 02 F6 | 	mov	arg01, local01
31c90     34 26 86 F1 | 	sub	local01, #52
31c94     0E 12 06 F1 | 	add	arg01, #14
31c98                 | ' {
31c98                 | ' 
31c98                 | ' 	return *((WORD*)ptr);
31c98     09 FB E9 FA | 	rdword	result1, arg01 wz
31c9c     80 00 90 AD |  if_e	jmp	#LR__4862
31ca0     44 26 06 F1 | 	add	local01, #68
31ca4     13 13 C2 FA | 	rdbyte	arg01, local01
31ca8     44 26 86 F1 | 	sub	local01, #68
31cac     01 12 86 F1 | 	sub	arg01, #1
31cb0     02 12 16 F2 | 	cmp	arg01, #2 wc
31cb4     68 00 90 3D |  if_ae	jmp	#LR__4862
31cb8     34 26 06 F1 | 	add	local01, #52
31cbc     13 13 02 F6 | 	mov	arg01, local01
31cc0     34 26 86 F1 | 	sub	local01, #52
31cc4     11 12 06 F1 | 	add	arg01, #17
31cc8                 | ' {
31cc8                 | ' 
31cc8                 | ' 	return *((WORD*)ptr);
31cc8     09 FB E9 FA | 	rdword	result1, arg01 wz
31ccc     50 00 90 AD |  if_e	jmp	#LR__4862
31cd0     34 26 06 F1 | 	add	local01, #52
31cd4     13 13 02 F6 | 	mov	arg01, local01
31cd8     34 26 86 F1 | 	sub	local01, #52
31cdc     13 12 06 F1 | 	add	arg01, #19
31ce0                 | ' {
31ce0                 | ' 
31ce0                 | ' 	return *((WORD*)ptr);
31ce0     09 FB E1 FA | 	rdword	result1, arg01
31ce4     FD 2A 32 F9 | 	getword	local03, result1, #0
31ce8     80 2A 16 F2 | 	cmp	local03, #128 wc
31cec     20 00 90 3D |  if_ae	jmp	#LR__4861
31cf0     34 26 06 F1 | 	add	local01, #52
31cf4     13 13 02 F6 | 	mov	arg01, local01
31cf8     34 26 86 F1 | 	sub	local01, #52
31cfc     20 12 06 F1 | 	add	arg01, #32
31d00                 | ' {
31d00                 | ' 
31d00                 | ' 	return *((DWORD*)ptr);
31d00     09 FB 01 FB | 	rdlong	result1, arg01
31d04     80 00 00 FF 
31d08     00 FA 15 F2 | 	cmp	result1, ##65536 wc
31d0c     10 00 90 CD |  if_b	jmp	#LR__4862
31d10                 | LR__4861
31d10     4A 26 06 F1 | 	add	local01, #74
31d14                 | ' {
31d14                 | ' 
31d14                 | ' 	return *((WORD*)ptr);
31d14     13 FB E9 FA | 	rdword	result1, local01 wz
31d18                 | ' 			&& b != 0 && (b & (b - 1)) == 0
31d18                 | ' 			&& ld_word(fs->win +  14 ) != 0
31d18                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
31d18                 | ' 			&& ld_word(fs->win +  17 ) != 0
31d18                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
31d18                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
31d18                 | ' 				return 0;
31d18     00 FA 05 56 |  if_ne	mov	result1, #0
31d1c     18 00 90 5D |  if_ne	jmp	#LR__4864
31d20                 | LR__4862
31d20                 | LR__4863
31d20                 | ' 		}
31d20                 | ' 	}
31d20                 | ' 	return sign == 0xAA55 ? 2 : 3;
31d20     14 2B 32 F9 | 	getword	local03, local02, #0
31d24     55 00 00 FF 
31d28     55 2A 0E F2 | 	cmp	local03, ##43605 wz
31d2c     02 2C 06 A6 |  if_e	mov	local04, #2
31d30     03 2C 06 56 |  if_ne	mov	local04, #3
31d34     16 FB 01 F6 | 	mov	result1, local04
31d38                 | LR__4864
31d38     A7 F0 03 F6 | 	mov	ptra, fp
31d3c     B2 00 A0 FD | 	call	#popregs_
31d40                 | _fatfs_cc_check_fs_ret
31d40     2D 00 64 FD | 	ret
31d44                 | 
31d44                 | _fatfs_cc_find_volume
31d44     05 4A 05 F6 | 	mov	COUNT_, #5
31d48     A8 00 A0 FD | 	call	#pushregs_
31d4c     24 F0 07 F1 | 	add	ptra, #36
31d50     09 27 02 F6 | 	mov	local01, arg01
31d54     0A 29 02 F6 | 	mov	local02, arg02
31d58     13 13 02 F6 | 	mov	arg01, local01
31d5c     00 14 06 F6 | 	mov	arg02, #0
31d60     08 FE BF FD | 	call	#_fatfs_cc_check_fs
31d64     02 FA 0D F2 | 	cmp	result1, #2 wz
31d68     0C 00 90 AD |  if_e	jmp	#LR__4870
31d6c     03 FA 15 F2 | 	cmp	result1, #3 wc
31d70     00 28 0E C2 |  if_b	cmp	local02, #0 wz
31d74     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4878
31d78                 | LR__4870
31d78                 | ' 	for (i = 0; i < 4; i++) {
31d78     00 2A 06 F6 | 	mov	local03, #0
31d7c     97 26 48 FB | 	callpa	#(@LR__4872-@LR__4871)>>2,fcache_load_ptr_
31d80                 | LR__4871
31d80     04 2A 16 F2 | 	cmp	local03, #4 wc
31d84     44 00 90 3D |  if_ae	jmp	#LR__4873
31d88     15 2D 02 F6 | 	mov	local04, local03
31d8c     02 2C 66 F0 | 	shl	local04, #2
31d90     14 4E 05 F1 | 	add	fp, #20
31d94     A7 2C 02 F1 | 	add	local04, fp
31d98     34 26 06 F1 | 	add	local01, #52
31d9c     13 13 02 F6 | 	mov	arg01, local01
31da0     34 26 86 F1 | 	sub	local01, #52
31da4     BE 13 06 F1 | 	add	arg01, #446
31da8     15 15 02 F6 | 	mov	arg02, local03
31dac     04 14 66 F0 | 	shl	arg02, #4
31db0     0A 13 02 F1 | 	add	arg01, arg02
31db4     08 12 06 F1 | 	add	arg01, #8
31db8                 | ' {
31db8                 | ' 
31db8                 | ' 	return *((DWORD*)ptr);
31db8     09 FB 01 FB | 	rdlong	result1, arg01
31dbc     14 4E 85 F1 | 	sub	fp, #20
31dc0     16 FB 61 FC | 	wrlong	result1, local04
31dc4     01 2A 06 F1 | 	add	local03, #1
31dc8     B4 FF 9F FD | 	jmp	#LR__4871
31dcc                 | LR__4872
31dcc                 | LR__4873
31dcc     00 28 0E F2 | 	cmp	local02, #0 wz
31dd0     14 2D 02 56 |  if_ne	mov	local04, local02
31dd4     01 2C 86 51 |  if_ne	sub	local04, #1
31dd8     00 2C 06 A6 |  if_e	mov	local04, #0
31ddc     16 2B 02 F6 | 	mov	local03, local04
31de0                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
31de0                 | ' 	}
31de0                 | ' 	i = part ? part - 1 : 0;
31de0                 | ' 	do {
31de0                 | LR__4874
31de0     15 2D 02 F6 | 	mov	local04, local03
31de4     02 2C 66 F0 | 	shl	local04, #2
31de8     14 4E 05 F1 | 	add	fp, #20
31dec     A7 2C 02 F1 | 	add	local04, fp
31df0     16 2D 0A FB | 	rdlong	local04, local04 wz
31df4     14 4E 85 F1 | 	sub	fp, #20
31df8     28 00 90 AD |  if_e	jmp	#LR__4875
31dfc     15 2D 02 F6 | 	mov	local04, local03
31e00     02 2C 66 F0 | 	shl	local04, #2
31e04     14 4E 05 F1 | 	add	fp, #20
31e08     A7 2C 02 F1 | 	add	local04, fp
31e0c     16 15 02 FB | 	rdlong	arg02, local04
31e10     13 13 02 F6 | 	mov	arg01, local01
31e14     14 4E 85 F1 | 	sub	fp, #20
31e18     50 FD BF FD | 	call	#_fatfs_cc_check_fs
31e1c     FD 2C 02 F6 | 	mov	local04, result1
31e20     04 00 90 FD | 	jmp	#LR__4876
31e24                 | LR__4875
31e24     03 2C 06 F6 | 	mov	local04, #3
31e28                 | LR__4876
31e28     16 2F 02 F6 | 	mov	local05, local04
31e2c     00 28 0E F2 | 	cmp	local02, #0 wz
31e30     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
31e34     0C 00 90 8D |  if_c_and_z	jmp	#LR__4877
31e38     01 2A 06 A1 |  if_e	add	local03, #1
31e3c     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
31e40     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4874
31e44                 | LR__4877
31e44                 | ' 	return fmt;
31e44     17 FB 01 F6 | 	mov	result1, local05
31e48                 | LR__4878
31e48     A7 F0 03 F6 | 	mov	ptra, fp
31e4c     B2 00 A0 FD | 	call	#popregs_
31e50                 | _fatfs_cc_find_volume_ret
31e50     2D 00 64 FD | 	ret
31e54                 | 
31e54                 | _fatfs_cc_mount_volume
31e54     0B 4A 05 F6 | 	mov	COUNT_, #11
31e58     A8 00 A0 FD | 	call	#pushregs_
31e5c     0A 27 02 F6 | 	mov	local01, arg02
31e60     0B 29 02 F6 | 	mov	local02, arg03
31e64     13 01 68 FC | 	wrlong	#0, local01
31e68     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
31e6c     FD 2A 02 F6 | 	mov	local03, result1
31e70     00 2A 56 F2 | 	cmps	local03, #0 wc
31e74     0B FA 05 C6 |  if_b	mov	result1, #11
31e78     3C 05 90 CD |  if_b	jmp	#LR__4890
31e7c     15 17 02 F6 | 	mov	arg03, local03
31e80     02 16 66 F0 | 	shl	arg03, #2
31e84     F2 16 02 F1 | 	add	arg03, objptr
31e88     0B 2D 0A FB | 	rdlong	local04, arg03 wz
31e8c     0C FA 05 A6 |  if_e	mov	result1, #12
31e90     24 05 90 AD |  if_e	jmp	#LR__4890
31e94     13 2D 62 FC | 	wrlong	local04, local01
31e98     14 29 E2 F8 | 	getbyte	local02, local02, #0
31e9c     FE 28 06 F5 | 	and	local02, #254
31ea0     16 17 CA FA | 	rdbyte	arg03, local04 wz
31ea4     4C 00 90 AD |  if_e	jmp	#LR__4881
31ea8     01 2C 06 F1 | 	add	local04, #1
31eac     16 13 CA FA | 	rdbyte	arg01, local04 wz
31eb0     01 2C 86 F1 | 	sub	local04, #1
31eb4     01 FA 05 56 |  if_ne	mov	result1, #1
31eb8                 | ' 
31eb8                 | ' 	return Stat;
31eb8     01 00 00 AF 
31ebc     20 E4 05 A1 |  if_e	add	objptr, ##544
31ec0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31ec4     01 00 00 AF 
31ec8     20 E4 85 A1 |  if_e	sub	objptr, ##544
31ecc     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
31ed0     01 16 CE F7 | 	test	arg03, #1 wz
31ed4     1C 00 90 5D |  if_ne	jmp	#LR__4880
31ed8     00 28 0E F2 | 	cmp	local02, #0 wz
31edc     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
31ee0     04 FA CD 57 |  if_ne	test	result1, #4 wz
31ee4                 | ' 				return FR_WRITE_PROTECTED;
31ee4     0A FA 05 56 |  if_ne	mov	result1, #10
31ee8     CC 04 90 5D |  if_ne	jmp	#LR__4890
31eec                 | ' 			}
31eec                 | ' 			return FR_OK;
31eec     00 FA 05 F6 | 	mov	result1, #0
31ef0     C4 04 90 FD | 	jmp	#LR__4890
31ef4                 | LR__4880
31ef4                 | LR__4881
31ef4     16 01 48 FC | 	wrbyte	#0, local04
31ef8     01 2C 06 F1 | 	add	local04, #1
31efc     16 2B 42 FC | 	wrbyte	local03, local04
31f00     16 13 C2 FA | 	rdbyte	arg01, local04
31f04     01 2C 86 F1 | 	sub	local04, #1
31f08     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
31f0c     FD 16 02 F6 | 	mov	arg03, result1
31f10     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
31f14     01 2E CE F7 | 	test	local05, #1 wz
31f18                 | ' 		return FR_NOT_READY;
31f18     03 FA 05 56 |  if_ne	mov	result1, #3
31f1c     98 04 90 5D |  if_ne	jmp	#LR__4890
31f20     00 28 0E F2 | 	cmp	local02, #0 wz
31f24     0B 2F 02 56 |  if_ne	mov	local05, arg03
31f28     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
31f2c     04 2E CE 57 |  if_ne	test	local05, #4 wz
31f30                 | ' 		return FR_WRITE_PROTECTED;
31f30     0A FA 05 56 |  if_ne	mov	result1, #10
31f34     80 04 90 5D |  if_ne	jmp	#LR__4890
31f38     16 13 02 F6 | 	mov	arg01, local04
31f3c     00 14 06 F6 | 	mov	arg02, #0
31f40     00 FE BF FD | 	call	#_fatfs_cc_find_volume
31f44     FD 12 02 F6 | 	mov	arg01, result1
31f48     04 12 0E F2 | 	cmp	arg01, #4 wz
31f4c     01 FA 05 A6 |  if_e	mov	result1, #1
31f50     64 04 90 AD |  if_e	jmp	#LR__4890
31f54     02 12 16 F2 | 	cmp	arg01, #2 wc
31f58     0D FA 05 36 |  if_ae	mov	result1, #13
31f5c     58 04 90 3D |  if_ae	jmp	#LR__4890
31f60     30 2C 06 F1 | 	add	local04, #48
31f64     16 31 02 FB | 	rdlong	local06, local04
31f68     04 2C 06 F1 | 	add	local04, #4
31f6c     16 13 02 F6 | 	mov	arg01, local04
31f70     34 2C 86 F1 | 	sub	local04, #52
31f74     0B 12 06 F1 | 	add	arg01, #11
31f78                 | ' {
31f78                 | ' 
31f78                 | ' 	return *((WORD*)ptr);
31f78     09 FB E1 FA | 	rdword	result1, arg01
31f7c     01 00 00 FF 
31f80     00 FA 0D F2 | 	cmp	result1, ##512 wz
31f84     0D FA 05 56 |  if_ne	mov	result1, #13
31f88     2C 04 90 5D |  if_ne	jmp	#LR__4890
31f8c     34 2C 06 F1 | 	add	local04, #52
31f90     16 13 02 F6 | 	mov	arg01, local04
31f94     34 2C 86 F1 | 	sub	local04, #52
31f98     16 12 06 F1 | 	add	arg01, #22
31f9c                 | ' {
31f9c                 | ' 
31f9c                 | ' 	return *((WORD*)ptr);
31f9c     09 FB E1 FA | 	rdword	result1, arg01
31fa0     FD 32 0A F6 | 	mov	local07, result1 wz
31fa4     18 00 90 5D |  if_ne	jmp	#LR__4882
31fa8     34 2C 06 F1 | 	add	local04, #52
31fac     16 13 02 F6 | 	mov	arg01, local04
31fb0     34 2C 86 F1 | 	sub	local04, #52
31fb4     24 12 06 F1 | 	add	arg01, #36
31fb8                 | ' {
31fb8                 | ' 
31fb8                 | ' 	return *((DWORD*)ptr);
31fb8     09 FB 01 FB | 	rdlong	result1, arg01
31fbc     FD 32 02 F6 | 	mov	local07, result1
31fc0                 | LR__4882
31fc0     1C 2C 06 F1 | 	add	local04, #28
31fc4     16 33 62 FC | 	wrlong	local07, local04
31fc8     28 2C 06 F1 | 	add	local04, #40
31fcc     16 2F C2 FA | 	rdbyte	local05, local04
31fd0     42 2C 86 F1 | 	sub	local04, #66
31fd4     16 2F 42 FC | 	wrbyte	local05, local04
31fd8     16 2F C2 FA | 	rdbyte	local05, local04
31fdc     02 2C 86 F1 | 	sub	local04, #2
31fe0     01 2E 0E F2 | 	cmp	local05, #1 wz
31fe4     02 2C 06 51 |  if_ne	add	local04, #2
31fe8     16 2F C2 5A |  if_ne	rdbyte	local05, local04
31fec     02 2C 86 51 |  if_ne	sub	local04, #2
31ff0     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
31ff4     0D FA 05 56 |  if_ne	mov	result1, #13
31ff8     BC 03 90 5D |  if_ne	jmp	#LR__4890
31ffc     02 2C 06 F1 | 	add	local04, #2
32000     16 2F C2 FA | 	rdbyte	local05, local04
32004     17 33 02 FD | 	qmul	local07, local05
32008     3F 2C 06 F1 | 	add	local04, #63
3200c     16 2F C2 FA | 	rdbyte	local05, local04
32010     37 2C 86 F1 | 	sub	local04, #55
32014     16 2F 52 FC | 	wrword	local05, local04
32018     16 2F EA FA | 	rdword	local05, local04 wz
3201c     0A 2C 86 F1 | 	sub	local04, #10
32020     18 32 62 FD | 	getqx	local07
32024     20 00 90 AD |  if_e	jmp	#LR__4883
32028     0A 2C 06 F1 | 	add	local04, #10
3202c     16 2F E2 FA | 	rdword	local05, local04
32030     17 2B 32 F9 | 	getword	local03, local05, #0
32034     0A 2C 86 F1 | 	sub	local04, #10
32038     17 2F 32 F9 | 	getword	local05, local05, #0
3203c     01 2E 86 F1 | 	sub	local05, #1
32040     17 2B CA F7 | 	test	local03, local05 wz
32044     08 00 90 AD |  if_e	jmp	#LR__4884
32048                 | LR__4883
32048     0D FA 05 F6 | 	mov	result1, #13
3204c     68 03 90 FD | 	jmp	#LR__4890
32050                 | LR__4884
32050     34 2C 06 F1 | 	add	local04, #52
32054     16 13 02 F6 | 	mov	arg01, local04
32058     11 12 06 F1 | 	add	arg01, #17
3205c                 | ' {
3205c                 | ' 
3205c                 | ' 	return *((WORD*)ptr);
3205c     09 FB E1 FA | 	rdword	result1, arg01
32060     2C 2C 86 F1 | 	sub	local04, #44
32064     16 FB 51 FC | 	wrword	result1, local04
32068     16 2F E2 FA | 	rdword	local05, local04
3206c     08 2C 86 F1 | 	sub	local04, #8
32070     17 13 52 F6 | 	abs	arg01, local05 wc
32074     09 13 42 F8 | 	getnib	arg01, arg01, #0
32078     09 13 8A F6 | 	negc	arg01, arg01 wz
3207c     0D FA 05 56 |  if_ne	mov	result1, #13
32080     34 03 90 5D |  if_ne	jmp	#LR__4890
32084     34 2C 06 F1 | 	add	local04, #52
32088     16 13 02 F6 | 	mov	arg01, local04
3208c     34 2C 86 F1 | 	sub	local04, #52
32090     13 12 06 F1 | 	add	arg01, #19
32094                 | ' {
32094                 | ' 
32094                 | ' 	return *((WORD*)ptr);
32094     09 FB E1 FA | 	rdword	result1, arg01
32098     FD 34 0A F6 | 	mov	local08, result1 wz
3209c     34 2C 06 A1 |  if_e	add	local04, #52
320a0     16 13 02 A6 |  if_e	mov	arg01, local04
320a4     34 2C 86 A1 |  if_e	sub	local04, #52
320a8     20 12 06 A1 |  if_e	add	arg01, #32
320ac                 | ' {
320ac                 | ' 
320ac                 | ' 	return *((DWORD*)ptr);
320ac     09 35 02 AB |  if_e	rdlong	local08, arg01
320b0     34 2C 06 F1 | 	add	local04, #52
320b4     16 13 02 F6 | 	mov	arg01, local04
320b8     34 2C 86 F1 | 	sub	local04, #52
320bc     0E 12 06 F1 | 	add	arg01, #14
320c0                 | ' {
320c0                 | ' 
320c0                 | ' 	return *((WORD*)ptr);
320c0     09 FB E1 FA | 	rdword	result1, arg01
320c4     FD 12 02 F6 | 	mov	arg01, result1
320c8     09 2F 02 F6 | 	mov	local05, arg01
320cc     0F 2E 4E F7 | 	zerox	local05, #15 wz
320d0     0D FA 05 A6 |  if_e	mov	result1, #13
320d4     E0 02 90 AD |  if_e	jmp	#LR__4890
320d8     09 37 32 F9 | 	getword	local09, arg01, #0
320dc     19 37 02 F1 | 	add	local09, local07
320e0     08 2C 06 F1 | 	add	local04, #8
320e4     16 2F E2 FA | 	rdword	local05, local04
320e8     08 2C 86 F1 | 	sub	local04, #8
320ec     17 2F 52 F6 | 	abs	local05, local05 wc
320f0     04 2E 46 F0 | 	shr	local05, #4
320f4     17 37 82 F3 | 	sumc	local09, local05
320f8     1B 35 12 F2 | 	cmp	local08, local09 wc
320fc     0D FA 05 C6 |  if_b	mov	result1, #13
32100     B4 02 90 CD |  if_b	jmp	#LR__4890
32104     1B 35 82 F1 | 	sub	local08, local09
32108     0A 2C 06 F1 | 	add	local04, #10
3210c     16 2F E2 FA | 	rdword	local05, local04
32110     17 35 12 FD | 	qdiv	local08, local05
32114     0A 2C 86 F1 | 	sub	local04, #10
32118     18 2E 62 FD | 	getqx	local05
3211c     00 2E 0E F2 | 	cmp	local05, #0 wz
32120     0D FA 05 A6 |  if_e	mov	result1, #13
32124     90 02 90 AD |  if_e	jmp	#LR__4890
32128     00 38 06 F6 | 	mov	local10, #0
3212c     FF FF 07 FF 
32130     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
32134     03 38 06 C6 |  if_b	mov	local10, #3
32138     7F 00 00 FF 
3213c     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
32140     02 38 06 C6 |  if_b	mov	local10, #2
32144     07 00 00 FF 
32148     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
3214c     01 38 06 C6 |  if_b	mov	local10, #1
32150     00 38 0E F2 | 	cmp	local10, #0 wz
32154     0D FA 05 A6 |  if_e	mov	result1, #13
32158     5C 02 90 AD |  if_e	jmp	#LR__4890
3215c     02 2E 06 F1 | 	add	local05, #2
32160     18 2C 06 F1 | 	add	local04, #24
32164     16 2F 62 FC | 	wrlong	local05, local04
32168     08 2C 06 F1 | 	add	local04, #8
3216c     16 31 62 FC | 	wrlong	local06, local04
32170     18 2F 02 F6 | 	mov	local05, local06
32174     09 13 32 F9 | 	getword	arg01, arg01, #0
32178     09 2F 02 F1 | 	add	local05, arg01
3217c     04 2C 06 F1 | 	add	local04, #4
32180     16 2F 62 FC | 	wrlong	local05, local04
32184     18 2F 02 F6 | 	mov	local05, local06
32188     1B 2F 02 F1 | 	add	local05, local09
3218c     08 2C 06 F1 | 	add	local04, #8
32190     16 2F 62 FC | 	wrlong	local05, local04
32194     2C 2C 86 F1 | 	sub	local04, #44
32198     03 38 0E F2 | 	cmp	local10, #3 wz
3219c     5C 00 90 5D |  if_ne	jmp	#LR__4885
321a0     34 2C 06 F1 | 	add	local04, #52
321a4     16 13 02 F6 | 	mov	arg01, local04
321a8     34 2C 86 F1 | 	sub	local04, #52
321ac     2A 12 06 F1 | 	add	arg01, #42
321b0                 | ' {
321b0                 | ' 
321b0                 | ' 	return *((WORD*)ptr);
321b0     09 FB E9 FA | 	rdword	result1, arg01 wz
321b4     0D FA 05 56 |  if_ne	mov	result1, #13
321b8     FC 01 90 5D |  if_ne	jmp	#LR__4890
321bc     08 2C 06 F1 | 	add	local04, #8
321c0     16 2F EA FA | 	rdword	local05, local04 wz
321c4     08 2C 86 F1 | 	sub	local04, #8
321c8     0D FA 05 56 |  if_ne	mov	result1, #13
321cc     E8 01 90 5D |  if_ne	jmp	#LR__4890
321d0     34 2C 06 F1 | 	add	local04, #52
321d4     16 13 02 F6 | 	mov	arg01, local04
321d8     2C 12 06 F1 | 	add	arg01, #44
321dc                 | ' {
321dc                 | ' 
321dc                 | ' 	return *((DWORD*)ptr);
321dc     09 FB 01 FB | 	rdlong	result1, arg01
321e0     0C 2C 86 F1 | 	sub	local04, #12
321e4     16 FB 61 FC | 	wrlong	result1, local04
321e8     10 2C 86 F1 | 	sub	local04, #16
321ec     16 3B 02 FB | 	rdlong	local11, local04
321f0     18 2C 86 F1 | 	sub	local04, #24
321f4     02 3A 66 F0 | 	shl	local11, #2
321f8     6C 00 90 FD | 	jmp	#LR__4887
321fc                 | LR__4885
321fc     08 2C 06 F1 | 	add	local04, #8
32200     16 2F EA FA | 	rdword	local05, local04 wz
32204     08 2C 86 F1 | 	sub	local04, #8
32208     0D FA 05 A6 |  if_e	mov	result1, #13
3220c     A8 01 90 AD |  if_e	jmp	#LR__4890
32210     24 2C 06 F1 | 	add	local04, #36
32214     16 2F 02 FB | 	rdlong	local05, local04
32218     19 2F 02 F1 | 	add	local05, local07
3221c     04 2C 06 F1 | 	add	local04, #4
32220     16 2F 62 FC | 	wrlong	local05, local04
32224     28 2C 86 F1 | 	sub	local04, #40
32228     02 38 0E F2 | 	cmp	local10, #2 wz
3222c     18 2C 06 A1 |  if_e	add	local04, #24
32230     16 2F 02 AB |  if_e	rdlong	local05, local04
32234     18 2C 86 A1 |  if_e	sub	local04, #24
32238     01 2E 66 A0 |  if_e	shl	local05, #1
3223c     24 00 90 AD |  if_e	jmp	#LR__4886
32240     18 2C 06 F1 | 	add	local04, #24
32244     16 3B 02 FB | 	rdlong	local11, local04
32248     1D 2F 02 F6 | 	mov	local05, local11
3224c     01 2E 66 F0 | 	shl	local05, #1
32250     1D 2F 02 F1 | 	add	local05, local11
32254     01 2E 46 F0 | 	shr	local05, #1
32258     18 2C 86 F1 | 	sub	local04, #24
3225c     01 3A 06 F5 | 	and	local11, #1
32260     1D 2F 02 F1 | 	add	local05, local11
32264                 | LR__4886
32264     17 3B 02 F6 | 	mov	local11, local05
32268                 | LR__4887
32268     FF 3B 06 F1 | 	add	local11, #511
3226c     09 3A 46 F0 | 	shr	local11, #9
32270     1C 2C 06 F1 | 	add	local04, #28
32274     16 17 02 FB | 	rdlong	arg03, local04
32278     1C 2C 86 F1 | 	sub	local04, #28
3227c     1D 17 12 F2 | 	cmp	arg03, local11 wc
32280     0D FA 05 C6 |  if_b	mov	result1, #13
32284     30 01 90 CD |  if_b	jmp	#LR__4890
32288     14 2C 06 F1 | 	add	local04, #20
3228c     FF FF FF FF 
32290     16 FF 6B FC | 	wrlong	##-1, local04
32294     04 2C 86 F1 | 	sub	local04, #4
32298     FF FF FF FF 
3229c     16 FF 6B FC | 	wrlong	##-1, local04
322a0     0C 2C 86 F1 | 	sub	local04, #12
322a4     16 01 49 FC | 	wrbyte	#128, local04
322a8     04 2C 86 F1 | 	sub	local04, #4
322ac     03 38 0E F2 | 	cmp	local10, #3 wz
322b0     D0 00 90 5D |  if_ne	jmp	#LR__4889
322b4     34 2C 06 F1 | 	add	local04, #52
322b8     16 13 02 F6 | 	mov	arg01, local04
322bc     34 2C 86 F1 | 	sub	local04, #52
322c0     30 12 06 F1 | 	add	arg01, #48
322c4                 | ' {
322c4                 | ' 
322c4                 | ' 	return *((WORD*)ptr);
322c4     09 FB E1 FA | 	rdword	result1, arg01
322c8     FD 2E 32 F9 | 	getword	local05, result1, #0
322cc     01 2E 0E F2 | 	cmp	local05, #1 wz
322d0     B0 00 90 5D |  if_ne	jmp	#LR__4889
322d4     01 30 06 F1 | 	add	local06, #1
322d8     16 13 02 F6 | 	mov	arg01, local04
322dc     18 15 02 F6 | 	mov	arg02, local06
322e0     CC CD BF FD | 	call	#_fatfs_cc_move_window
322e4     00 FA 0D F2 | 	cmp	result1, #0 wz
322e8     98 00 90 5D |  if_ne	jmp	#LR__4889
322ec     04 2C 06 F1 | 	add	local04, #4
322f0     16 01 48 FC | 	wrbyte	#0, local04
322f4     30 2C 06 F1 | 	add	local04, #48
322f8     16 13 02 F6 | 	mov	arg01, local04
322fc     34 2C 86 F1 | 	sub	local04, #52
32300     FE 13 06 F1 | 	add	arg01, #510
32304                 | ' {
32304                 | ' 
32304                 | ' 	return *((WORD*)ptr);
32304     09 FB E1 FA | 	rdword	result1, arg01
32308     FD 2E 32 F9 | 	getword	local05, result1, #0
3230c     55 00 00 FF 
32310     55 2E 0E F2 | 	cmp	local05, ##43605 wz
32314     34 2C 06 A1 |  if_e	add	local04, #52
32318     16 13 02 A6 |  if_e	mov	arg01, local04
3231c     34 2C 86 A1 |  if_e	sub	local04, #52
32320                 | ' {
32320                 | ' 
32320                 | ' 	return *((DWORD*)ptr);
32320     09 FB 01 AB |  if_e	rdlong	result1, arg01
32324     A9 B0 20 AF 
32328     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
3232c     54 00 90 5D |  if_ne	jmp	#LR__4888
32330     34 2C 06 F1 | 	add	local04, #52
32334     16 13 02 F6 | 	mov	arg01, local04
32338     34 2C 86 F1 | 	sub	local04, #52
3233c     E4 13 06 F1 | 	add	arg01, #484
32340                 | ' {
32340                 | ' 
32340                 | ' 	return *((DWORD*)ptr);
32340     09 FB 01 FB | 	rdlong	result1, arg01
32344     B9 A0 30 FF 
32348     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
3234c     34 00 90 5D |  if_ne	jmp	#LR__4888
32350     34 2C 06 F1 | 	add	local04, #52
32354     16 13 02 F6 | 	mov	arg01, local04
32358     E8 13 06 F1 | 	add	arg01, #488
3235c                 | ' {
3235c                 | ' 
3235c                 | ' 	return *((DWORD*)ptr);
3235c     09 FB 01 FB | 	rdlong	result1, arg01
32360     20 2C 86 F1 | 	sub	local04, #32
32364     16 FB 61 FC | 	wrlong	result1, local04
32368     20 2C 06 F1 | 	add	local04, #32
3236c     16 13 02 F6 | 	mov	arg01, local04
32370     EC 13 06 F1 | 	add	arg01, #492
32374                 | ' {
32374                 | ' 
32374                 | ' 	return *((DWORD*)ptr);
32374     09 FB 01 FB | 	rdlong	result1, arg01
32378     24 2C 86 F1 | 	sub	local04, #36
3237c     16 FB 61 FC | 	wrlong	result1, local04
32380     10 2C 86 F1 | 	sub	local04, #16
32384                 | LR__4888
32384                 | LR__4889
32384     16 39 42 FC | 	wrbyte	local10, local04
32388     04 E4 05 F1 | 	add	objptr, #4
3238c     F2 2E E2 FA | 	rdword	local05, objptr
32390     01 2E 06 F1 | 	add	local05, #1
32394     F2 2E 52 FC | 	wrword	local05, objptr
32398     F2 3A E2 FA | 	rdword	local11, objptr
3239c     06 2C 06 F1 | 	add	local04, #6
323a0     16 3B 52 FC | 	wrword	local11, local04
323a4     04 E4 05 F1 | 	add	objptr, #4
323a8     06 2C 06 F1 | 	add	local04, #6
323ac     16 E5 61 FC | 	wrlong	objptr, local04
323b0                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
323b0                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
323b0                 | ' 			{
323b0                 | ' 
323b0                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
323b0                 | ' 
323b0                 | ' 
323b0                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
323b0                 | ' 
323b0                 | ' 			}
323b0                 | ' 		}
323b0                 | ' 
323b0                 | ' 
323b0                 | ' 	}
323b0                 | ' 
323b0                 | ' 	fs->fs_type = (BYTE)fmt;
323b0                 | ' 	fs->id = ++Fsid;
323b0                 | ' 
323b0                 | ' 	fs->lfnbuf = LfnBuf;
323b0                 | ' #line 3567 "ff.c"
323b0                 | ' 	return FR_OK;
323b0     00 FA 05 F6 | 	mov	result1, #0
323b4     08 E4 85 F1 | 	sub	objptr, #8
323b8                 | LR__4890
323b8     A7 F0 03 F6 | 	mov	ptra, fp
323bc     B2 00 A0 FD | 	call	#popregs_
323c0                 | _fatfs_cc_mount_volume_ret
323c0     2D 00 64 FD | 	ret
323c4                 | 
323c4                 | _fatfs_cc_validate
323c4     09 01 0A F6 | 	mov	_var01, arg01 wz
323c8     09 02 06 F6 | 	mov	_var02, #9
323cc     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
323d0     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
323d4     50 00 90 AD |  if_e	jmp	#LR__4900
323d8     04 00 06 F1 | 	add	_var01, #4
323dc     00 07 E2 FA | 	rdword	_var04, _var01
323e0     04 00 86 F1 | 	sub	_var01, #4
323e4     00 13 02 FB | 	rdlong	arg01, _var01
323e8     06 12 06 F1 | 	add	arg01, #6
323ec     09 FB E1 FA | 	rdword	result1, arg01
323f0     FD 06 0A F2 | 	cmp	_var04, result1 wz
323f4     30 00 90 5D |  if_ne	jmp	#LR__4900
323f8     00 07 02 FB | 	rdlong	_var04, _var01
323fc     01 06 06 F1 | 	add	_var04, #1
32400     03 13 CA FA | 	rdbyte	arg01, _var04 wz
32404     01 FA 05 56 |  if_ne	mov	result1, #1
32408                 | ' 
32408                 | ' 	return Stat;
32408     01 00 00 AF 
3240c     20 E4 05 A1 |  if_e	add	objptr, ##544
32410     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
32414     01 00 00 AF 
32418     20 E4 85 A1 |  if_e	sub	objptr, ##544
3241c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
32420     01 04 CE F7 | 	test	_var03, #1 wz
32424     00 02 06 A6 |  if_e	mov	_var02, #0
32428                 | LR__4900
32428     00 02 0E F2 | 	cmp	_var02, #0 wz
3242c     00 05 02 AB |  if_e	rdlong	_var03, _var01
32430     00 04 06 56 |  if_ne	mov	_var03, #0
32434     0A 05 62 FC | 	wrlong	_var03, arg02
32438                 | ' 			res = FR_OK;
32438                 | ' 		}
32438                 | ' 
32438                 | ' 	}
32438                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
32438                 | ' 	return res;
32438     01 FB 01 F6 | 	mov	result1, _var02
3243c                 | _fatfs_cc_validate_ret
3243c     2D 00 64 FD | 	ret
32440                 | 
32440                 | _fatfs_cc_f_mount
32440     01 4A 05 F6 | 	mov	COUNT_, #1
32444     A8 00 A0 FD | 	call	#pushregs_
32448     20 F0 07 F1 | 	add	ptra, #32
3244c     04 4E 05 F1 | 	add	fp, #4
32450     A7 12 62 FC | 	wrlong	arg01, fp
32454     04 4E 05 F1 | 	add	fp, #4
32458     A7 14 62 FC | 	wrlong	arg02, fp
3245c     04 4E 05 F1 | 	add	fp, #4
32460     A7 16 42 FC | 	wrbyte	arg03, fp
32464     04 4E 85 F1 | 	sub	fp, #4
32468     A7 16 02 FB | 	rdlong	arg03, fp
3246c     14 4E 05 F1 | 	add	fp, #20
32470     A7 16 62 FC | 	wrlong	arg03, fp
32474     A7 12 02 F6 | 	mov	arg01, fp
32478     1C 4E 85 F1 | 	sub	fp, #28
3247c     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
32480     14 4E 05 F1 | 	add	fp, #20
32484     A7 FA 61 FC | 	wrlong	result1, fp
32488     14 4E 85 F1 | 	sub	fp, #20
3248c     00 FA 55 F2 | 	cmps	result1, #0 wc
32490     0B FA 05 C6 |  if_b	mov	result1, #11
32494     C0 00 90 CD |  if_b	jmp	#LR__4911
32498     14 4E 05 F1 | 	add	fp, #20
3249c     A7 16 02 FB | 	rdlong	arg03, fp
324a0     02 16 66 F0 | 	shl	arg03, #2
324a4     F2 16 02 F1 | 	add	arg03, objptr
324a8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
324ac     04 4E 85 F1 | 	sub	fp, #4
324b0     A7 16 62 FC | 	wrlong	arg03, fp
324b4     10 4E 85 F1 | 	sub	fp, #16
324b8     28 00 90 AD |  if_e	jmp	#LR__4910
324bc     10 4E 05 F1 | 	add	fp, #16
324c0     A7 16 02 FB | 	rdlong	arg03, fp
324c4     10 4E 85 F1 | 	sub	fp, #16
324c8     01 16 06 F1 | 	add	arg03, #1
324cc     0B 13 C2 FA | 	rdbyte	arg01, arg03
324d0     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
324d4     10 4E 05 F1 | 	add	fp, #16
324d8     A7 16 02 FB | 	rdlong	arg03, fp
324dc     10 4E 85 F1 | 	sub	fp, #16
324e0     0B 01 48 FC | 	wrbyte	#0, arg03
324e4                 | LR__4910
324e4     04 4E 05 F1 | 	add	fp, #4
324e8     A7 26 0A FB | 	rdlong	local01, fp wz
324ec     04 4E 85 F1 | 	sub	fp, #4
324f0     04 4E 05 51 |  if_ne	add	fp, #4
324f4     A7 26 02 5B |  if_ne	rdlong	local01, fp
324f8     04 4E 85 51 |  if_ne	sub	fp, #4
324fc     13 01 48 5C |  if_ne	wrbyte	#0, local01
32500     14 4E 05 F1 | 	add	fp, #20
32504     A7 26 02 FB | 	rdlong	local01, fp
32508     02 26 66 F0 | 	shl	local01, #2
3250c     F2 26 02 F1 | 	add	local01, objptr
32510     10 4E 85 F1 | 	sub	fp, #16
32514     A7 16 02 FB | 	rdlong	arg03, fp
32518     13 17 62 FC | 	wrlong	arg03, local01
3251c     08 4E 05 F1 | 	add	fp, #8
32520     A7 26 CA FA | 	rdbyte	local01, fp wz
32524     0C 4E 85 F1 | 	sub	fp, #12
32528     00 FA 05 A6 |  if_e	mov	result1, #0
3252c     28 00 90 AD |  if_e	jmp	#LR__4911
32530     08 4E 05 F1 | 	add	fp, #8
32534     A7 12 02 F6 | 	mov	arg01, fp
32538     04 4E 85 F1 | 	sub	fp, #4
3253c     A7 14 02 F6 | 	mov	arg02, fp
32540     04 4E 85 F1 | 	sub	fp, #4
32544     00 16 06 F6 | 	mov	arg03, #0
32548     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
3254c     18 4E 05 F1 | 	add	fp, #24
32550     A7 FA 61 FC | 	wrlong	result1, fp
32554                 | ' 
32554                 | ' 	res = mount_volume(&path, &fs, 0);
32554                 | ' 	return res ;
32554     18 4E 85 F1 | 	sub	fp, #24
32558                 | LR__4911
32558     A7 F0 03 F6 | 	mov	ptra, fp
3255c     B2 00 A0 FD | 	call	#popregs_
32560                 | _fatfs_cc_f_mount_ret
32560     2D 00 64 FD | 	ret
32564                 | 
32564                 | _fatfs_cc_f_open
32564     02 4A 05 F6 | 	mov	COUNT_, #2
32568     A8 00 A0 FD | 	call	#pushregs_
3256c     60 F0 07 F1 | 	add	ptra, #96
32570     04 4E 05 F1 | 	add	fp, #4
32574     A7 12 62 FC | 	wrlong	arg01, fp
32578     04 4E 05 F1 | 	add	fp, #4
3257c     A7 14 62 FC | 	wrlong	arg02, fp
32580     04 4E 05 F1 | 	add	fp, #4
32584     A7 16 42 FC | 	wrbyte	arg03, fp
32588     08 4E 85 F1 | 	sub	fp, #8
3258c     A7 18 0A FB | 	rdlong	arg04, fp wz
32590     04 4E 85 F1 | 	sub	fp, #4
32594     09 FA 05 A6 |  if_e	mov	result1, #9
32598     98 06 90 AD |  if_e	jmp	#LR__4937
3259c     0C 4E 05 F1 | 	add	fp, #12
325a0     A7 18 C2 FA | 	rdbyte	arg04, fp
325a4     3F 18 06 F5 | 	and	arg04, #63
325a8     A7 18 42 FC | 	wrbyte	arg04, fp
325ac     04 4E 85 F1 | 	sub	fp, #4
325b0     A7 12 02 F6 | 	mov	arg01, fp
325b4     3C 4E 05 F1 | 	add	fp, #60
325b8     A7 14 02 F6 | 	mov	arg02, fp
325bc     38 4E 85 F1 | 	sub	fp, #56
325c0     A7 16 C2 FA | 	rdbyte	arg03, fp
325c4     0C 4E 85 F1 | 	sub	fp, #12
325c8     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
325cc     10 4E 05 F1 | 	add	fp, #16
325d0     A7 FA 61 FC | 	wrlong	result1, fp
325d4     10 4E 85 F1 | 	sub	fp, #16
325d8     00 FA 0D F2 | 	cmp	result1, #0 wz
325dc     2C 06 90 5D |  if_ne	jmp	#LR__4936
325e0     44 4E 05 F1 | 	add	fp, #68
325e4     A7 18 02 FB | 	rdlong	arg04, fp
325e8     30 4E 85 F1 | 	sub	fp, #48
325ec     A7 18 62 FC | 	wrlong	arg04, fp
325f0     A7 12 02 F6 | 	mov	arg01, fp
325f4     0C 4E 85 F1 | 	sub	fp, #12
325f8     A7 26 02 FB | 	rdlong	local01, fp
325fc     08 4E 85 F1 | 	sub	fp, #8
32600     13 15 02 F6 | 	mov	arg02, local01
32604     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
32608     10 4E 05 F1 | 	add	fp, #16
3260c     A7 FA 61 FC | 	wrlong	result1, fp
32610     10 4E 85 F1 | 	sub	fp, #16
32614     00 FA 0D F2 | 	cmp	result1, #0 wz
32618     1C 00 90 5D |  if_ne	jmp	#LR__4920
3261c     3F 4E 05 F1 | 	add	fp, #63
32620     A7 18 C2 FA | 	rdbyte	arg04, fp
32624     3F 4E 85 F1 | 	sub	fp, #63
32628     80 18 CE F7 | 	test	arg04, #128 wz
3262c     10 4E 05 51 |  if_ne	add	fp, #16
32630     A7 0C 68 5C |  if_ne	wrlong	#6, fp
32634     10 4E 85 51 |  if_ne	sub	fp, #16
32638                 | LR__4920
32638     0C 4E 05 F1 | 	add	fp, #12
3263c     A7 18 C2 FA | 	rdbyte	arg04, fp
32640     0C 4E 85 F1 | 	sub	fp, #12
32644     1C 18 CE F7 | 	test	arg04, #28 wz
32648     F0 01 90 AD |  if_e	jmp	#LR__4925
3264c     10 4E 05 F1 | 	add	fp, #16
32650     A7 26 0A FB | 	rdlong	local01, fp wz
32654     10 4E 85 F1 | 	sub	fp, #16
32658     48 00 90 AD |  if_e	jmp	#LR__4922
3265c     10 4E 05 F1 | 	add	fp, #16
32660     A7 18 02 FB | 	rdlong	arg04, fp
32664     10 4E 85 F1 | 	sub	fp, #16
32668     04 18 0E F2 | 	cmp	arg04, #4 wz
3266c     1C 00 90 5D |  if_ne	jmp	#LR__4921
32670     14 4E 05 F1 | 	add	fp, #20
32674     A7 12 02 F6 | 	mov	arg01, fp
32678     14 4E 85 F1 | 	sub	fp, #20
3267c     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
32680     10 4E 05 F1 | 	add	fp, #16
32684     A7 FA 61 FC | 	wrlong	result1, fp
32688     10 4E 85 F1 | 	sub	fp, #16
3268c                 | LR__4921
3268c     0C 4E 05 F1 | 	add	fp, #12
32690     A7 26 C2 FA | 	rdbyte	local01, fp
32694     08 26 46 F5 | 	or	local01, #8
32698     A7 26 42 FC | 	wrbyte	local01, fp
3269c     0C 4E 85 F1 | 	sub	fp, #12
326a0     3C 00 90 FD | 	jmp	#LR__4924
326a4                 | LR__4922
326a4     1A 4E 05 F1 | 	add	fp, #26
326a8     A7 26 C2 FA | 	rdbyte	local01, fp
326ac     1A 4E 85 F1 | 	sub	fp, #26
326b0     11 26 CE F7 | 	test	local01, #17 wz
326b4     10 4E 05 51 |  if_ne	add	fp, #16
326b8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
326bc     10 4E 85 51 |  if_ne	sub	fp, #16
326c0     1C 00 90 5D |  if_ne	jmp	#LR__4923
326c4     0C 4E 05 F1 | 	add	fp, #12
326c8     A7 26 C2 FA | 	rdbyte	local01, fp
326cc     0C 4E 85 F1 | 	sub	fp, #12
326d0     04 26 CE F7 | 	test	local01, #4 wz
326d4     10 4E 05 51 |  if_ne	add	fp, #16
326d8     A7 10 68 5C |  if_ne	wrlong	#8, fp
326dc     10 4E 85 51 |  if_ne	sub	fp, #16
326e0                 | LR__4923
326e0                 | LR__4924
326e0     10 4E 05 F1 | 	add	fp, #16
326e4     A7 26 0A FB | 	rdlong	local01, fp wz
326e8     10 4E 85 F1 | 	sub	fp, #16
326ec     A8 01 90 5D |  if_ne	jmp	#LR__4928
326f0     0C 4E 05 F1 | 	add	fp, #12
326f4     A7 26 C2 FA | 	rdbyte	local01, fp
326f8     0C 4E 85 F1 | 	sub	fp, #12
326fc     08 26 CE F7 | 	test	local01, #8 wz
32700     94 01 90 AD |  if_e	jmp	#LR__4928
32704     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
32708     54 4E 05 F1 | 	add	fp, #84
3270c     A7 FA 61 FC | 	wrlong	result1, fp
32710     24 4E 85 F1 | 	sub	fp, #36
32714     A7 12 02 FB | 	rdlong	arg01, fp
32718     0E 12 06 F1 | 	add	arg01, #14
3271c     09 FB 61 FC | 	wrlong	result1, arg01
32720     A7 12 02 FB | 	rdlong	arg01, fp
32724     16 12 06 F1 | 	add	arg01, #22
32728     24 4E 05 F1 | 	add	fp, #36
3272c     A7 14 02 FB | 	rdlong	arg02, fp
32730     09 15 62 FC | 	wrlong	arg02, arg01
32734     10 4E 85 F1 | 	sub	fp, #16
32738     A7 12 02 FB | 	rdlong	arg01, fp
3273c     14 4E 85 F1 | 	sub	fp, #20
32740     A7 14 02 FB | 	rdlong	arg02, fp
32744     30 4E 85 F1 | 	sub	fp, #48
32748     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
3274c     48 4E 05 F1 | 	add	fp, #72
32750     A7 FA 61 FC | 	wrlong	result1, fp
32754     18 4E 85 F1 | 	sub	fp, #24
32758     A7 26 02 FB | 	rdlong	local01, fp
3275c     0B 26 06 F1 | 	add	local01, #11
32760     13 41 48 FC | 	wrbyte	#32, local01
32764     14 4E 05 F1 | 	add	fp, #20
32768     A7 12 02 FB | 	rdlong	arg01, fp
3276c     14 4E 85 F1 | 	sub	fp, #20
32770     A7 14 02 FB | 	rdlong	arg02, fp
32774     30 4E 85 F1 | 	sub	fp, #48
32778     00 16 06 F6 | 	mov	arg03, #0
3277c     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
32780     30 4E 05 F1 | 	add	fp, #48
32784     A7 12 02 FB | 	rdlong	arg01, fp
32788     1C 12 06 F1 | 	add	arg01, #28
3278c     09 01 68 FC | 	wrlong	#0, arg01
32790     14 4E 05 F1 | 	add	fp, #20
32794     A7 26 02 FB | 	rdlong	local01, fp
32798     03 26 06 F1 | 	add	local01, #3
3279c     13 03 48 FC | 	wrbyte	#1, local01
327a0     04 4E 05 F1 | 	add	fp, #4
327a4     A7 26 0A FB | 	rdlong	local01, fp wz
327a8     48 4E 85 F1 | 	sub	fp, #72
327ac     E8 00 90 AD |  if_e	jmp	#LR__4928
327b0     44 4E 05 F1 | 	add	fp, #68
327b4     A7 26 02 FB | 	rdlong	local01, fp
327b8     30 26 06 F1 | 	add	local01, #48
327bc     13 27 02 FB | 	rdlong	local01, local01
327c0     14 4E 05 F1 | 	add	fp, #20
327c4     A7 26 62 FC | 	wrlong	local01, fp
327c8     44 4E 85 F1 | 	sub	fp, #68
327cc     A7 12 02 F6 | 	mov	arg01, fp
327d0     34 4E 05 F1 | 	add	fp, #52
327d4     A7 14 02 FB | 	rdlong	arg02, fp
327d8     48 4E 85 F1 | 	sub	fp, #72
327dc     00 16 06 F6 | 	mov	arg03, #0
327e0     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
327e4     10 4E 05 F1 | 	add	fp, #16
327e8     A7 FA 61 FC | 	wrlong	result1, fp
327ec     10 4E 85 F1 | 	sub	fp, #16
327f0     00 FA 0D F2 | 	cmp	result1, #0 wz
327f4     A0 00 90 5D |  if_ne	jmp	#LR__4928
327f8     44 4E 05 F1 | 	add	fp, #68
327fc     A7 12 02 FB | 	rdlong	arg01, fp
32800     14 4E 05 F1 | 	add	fp, #20
32804     A7 14 02 FB | 	rdlong	arg02, fp
32808     58 4E 85 F1 | 	sub	fp, #88
3280c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
32810     10 4E 05 F1 | 	add	fp, #16
32814     A7 FA 61 FC | 	wrlong	result1, fp
32818     34 4E 05 F1 | 	add	fp, #52
3281c     A7 18 02 FB | 	rdlong	arg04, fp
32820     04 4E 05 F1 | 	add	fp, #4
32824     A7 26 02 FB | 	rdlong	local01, fp
32828     48 4E 85 F1 | 	sub	fp, #72
3282c     01 26 86 F1 | 	sub	local01, #1
32830     10 18 06 F1 | 	add	arg04, #16
32834     0C 27 62 FC | 	wrlong	local01, arg04
32838     5C 00 90 FD | 	jmp	#LR__4928
3283c                 | LR__4925
3283c     10 4E 05 F1 | 	add	fp, #16
32840     A7 18 0A FB | 	rdlong	arg04, fp wz
32844     10 4E 85 F1 | 	sub	fp, #16
32848     4C 00 90 5D |  if_ne	jmp	#LR__4927
3284c     1A 4E 05 F1 | 	add	fp, #26
32850     A7 18 C2 FA | 	rdbyte	arg04, fp
32854     1A 4E 85 F1 | 	sub	fp, #26
32858     10 18 CE F7 | 	test	arg04, #16 wz
3285c     10 4E 05 51 |  if_ne	add	fp, #16
32860     A7 08 68 5C |  if_ne	wrlong	#4, fp
32864     10 4E 85 51 |  if_ne	sub	fp, #16
32868     2C 00 90 5D |  if_ne	jmp	#LR__4926
3286c     0C 4E 05 F1 | 	add	fp, #12
32870     A7 18 C2 FA | 	rdbyte	arg04, fp
32874     0C 4E 85 F1 | 	sub	fp, #12
32878     02 18 CE F7 | 	test	arg04, #2 wz
3287c     1A 4E 05 51 |  if_ne	add	fp, #26
32880     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
32884     1A 4E 85 51 |  if_ne	sub	fp, #26
32888     01 26 CE 57 |  if_ne	test	local01, #1 wz
3288c     10 4E 05 51 |  if_ne	add	fp, #16
32890     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32894     10 4E 85 51 |  if_ne	sub	fp, #16
32898                 | LR__4926
32898                 | LR__4927
32898                 | LR__4928
32898     10 4E 05 F1 | 	add	fp, #16
3289c     A7 26 0A FB | 	rdlong	local01, fp wz
328a0     10 4E 85 F1 | 	sub	fp, #16
328a4     60 00 90 5D |  if_ne	jmp	#LR__4929
328a8     0C 4E 05 F1 | 	add	fp, #12
328ac     A7 28 C2 FA | 	rdbyte	local02, fp
328b0     0C 4E 85 F1 | 	sub	fp, #12
328b4     08 28 CE F7 | 	test	local02, #8 wz
328b8     0C 4E 05 51 |  if_ne	add	fp, #12
328bc     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
328c0     40 28 46 55 |  if_ne	or	local02, #64
328c4     A7 28 42 5C |  if_ne	wrbyte	local02, fp
328c8     0C 4E 85 51 |  if_ne	sub	fp, #12
328cc     04 4E 05 F1 | 	add	fp, #4
328d0     A7 28 02 FB | 	rdlong	local02, fp
328d4     40 4E 05 F1 | 	add	fp, #64
328d8     A7 26 02 FB | 	rdlong	local01, fp
328dc     30 26 06 F1 | 	add	local01, #48
328e0     13 27 02 FB | 	rdlong	local01, local01
328e4     20 28 06 F1 | 	add	local02, #32
328e8     14 27 62 FC | 	wrlong	local01, local02
328ec     40 4E 85 F1 | 	sub	fp, #64
328f0     A7 28 02 FB | 	rdlong	local02, fp
328f4     2C 4E 05 F1 | 	add	fp, #44
328f8     A7 26 02 FB | 	rdlong	local01, fp
328fc     30 4E 85 F1 | 	sub	fp, #48
32900     24 28 06 F1 | 	add	local02, #36
32904     14 27 62 FC | 	wrlong	local01, local02
32908                 | LR__4929
32908     10 4E 05 F1 | 	add	fp, #16
3290c     A7 28 0A FB | 	rdlong	local02, fp wz
32910     10 4E 85 F1 | 	sub	fp, #16
32914     F4 02 90 5D |  if_ne	jmp	#LR__4935
32918     04 4E 05 F1 | 	add	fp, #4
3291c     A7 28 02 FB | 	rdlong	local02, fp
32920     40 4E 05 F1 | 	add	fp, #64
32924     A7 12 02 FB | 	rdlong	arg01, fp
32928     14 4E 85 F1 | 	sub	fp, #20
3292c     A7 14 02 FB | 	rdlong	arg02, fp
32930     30 4E 85 F1 | 	sub	fp, #48
32934     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
32938     08 28 06 F1 | 	add	local02, #8
3293c     14 FB 61 FC | 	wrlong	result1, local02
32940     04 4E 05 F1 | 	add	fp, #4
32944     A7 28 02 FB | 	rdlong	local02, fp
32948     2C 4E 05 F1 | 	add	fp, #44
3294c     A7 12 02 FB | 	rdlong	arg01, fp
32950     1C 12 06 F1 | 	add	arg01, #28
32954                 | ' {
32954                 | ' 
32954                 | ' 	return *((DWORD*)ptr);
32954     09 FB 01 FB | 	rdlong	result1, arg01
32958     0C 28 06 F1 | 	add	local02, #12
3295c     14 FB 61 FC | 	wrlong	result1, local02
32960     2C 4E 85 F1 | 	sub	fp, #44
32964     A7 28 02 FB | 	rdlong	local02, fp
32968     40 4E 05 F1 | 	add	fp, #64
3296c     A7 26 02 FB | 	rdlong	local01, fp
32970     14 27 62 FC | 	wrlong	local01, local02
32974     40 4E 85 F1 | 	sub	fp, #64
32978     A7 28 02 FB | 	rdlong	local02, fp
3297c     40 4E 05 F1 | 	add	fp, #64
32980     A7 26 02 FB | 	rdlong	local01, fp
32984     06 26 06 F1 | 	add	local01, #6
32988     13 27 E2 FA | 	rdword	local01, local01
3298c     04 28 06 F1 | 	add	local02, #4
32990     14 27 52 FC | 	wrword	local01, local02
32994     40 4E 85 F1 | 	sub	fp, #64
32998     A7 28 02 FB | 	rdlong	local02, fp
3299c     08 4E 05 F1 | 	add	fp, #8
329a0     A7 26 C2 FA | 	rdbyte	local01, fp
329a4     10 28 06 F1 | 	add	local02, #16
329a8     14 27 42 FC | 	wrbyte	local01, local02
329ac     08 4E 85 F1 | 	sub	fp, #8
329b0     A7 28 02 FB | 	rdlong	local02, fp
329b4     11 28 06 F1 | 	add	local02, #17
329b8     14 01 48 FC | 	wrbyte	#0, local02
329bc     A7 28 02 FB | 	rdlong	local02, fp
329c0     1C 28 06 F1 | 	add	local02, #28
329c4     14 01 68 FC | 	wrlong	#0, local02
329c8     A7 28 02 FB | 	rdlong	local02, fp
329cc     14 28 06 F1 | 	add	local02, #20
329d0     14 01 68 FC | 	wrlong	#0, local02
329d4     A7 12 02 FB | 	rdlong	arg01, fp
329d8     04 4E 85 F1 | 	sub	fp, #4
329dc     28 12 06 F1 | 	add	arg01, #40
329e0     00 14 06 F6 | 	mov	arg02, #0
329e4     09 16 C6 F9 | 	decod	arg03, #9
329e8     98 00 A0 FD | 	call	#\builtin_bytefill_
329ec     0C 4E 05 F1 | 	add	fp, #12
329f0     A7 28 C2 FA | 	rdbyte	local02, fp
329f4     0C 4E 85 F1 | 	sub	fp, #12
329f8     20 28 CE F7 | 	test	local02, #32 wz
329fc     0C 02 90 AD |  if_e	jmp	#LR__4934
32a00     04 4E 05 F1 | 	add	fp, #4
32a04     A7 26 02 FB | 	rdlong	local01, fp
32a08     04 4E 85 F1 | 	sub	fp, #4
32a0c     0C 26 06 F1 | 	add	local01, #12
32a10     13 29 02 FB | 	rdlong	local02, local01
32a14     01 28 16 F2 | 	cmp	local02, #1 wc
32a18     F0 01 90 CD |  if_b	jmp	#LR__4934
32a1c     04 4E 05 F1 | 	add	fp, #4
32a20     A7 26 02 FB | 	rdlong	local01, fp
32a24     13 29 02 F6 | 	mov	local02, local01
32a28     0C 26 06 F1 | 	add	local01, #12
32a2c     13 27 02 FB | 	rdlong	local01, local01
32a30     14 28 06 F1 | 	add	local02, #20
32a34     14 27 62 FC | 	wrlong	local01, local02
32a38     40 4E 05 F1 | 	add	fp, #64
32a3c     A7 28 02 FB | 	rdlong	local02, fp
32a40     0A 28 06 F1 | 	add	local02, #10
32a44     14 29 E2 FA | 	rdword	local02, local02
32a48     09 28 66 F0 | 	shl	local02, #9
32a4c     08 4E 05 F1 | 	add	fp, #8
32a50     A7 28 62 FC | 	wrlong	local02, fp
32a54     48 4E 85 F1 | 	sub	fp, #72
32a58     A7 28 02 FB | 	rdlong	local02, fp
32a5c     08 28 06 F1 | 	add	local02, #8
32a60     14 27 02 FB | 	rdlong	local01, local02
32a64     4C 4E 05 F1 | 	add	fp, #76
32a68     A7 26 62 FC | 	wrlong	local01, fp
32a6c                 | ' 				fp->fptr = fp->obj.objsize;
32a6c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
32a6c                 | ' 				clst = fp->obj.sclust;
32a6c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
32a6c     4C 4E 85 F1 | 	sub	fp, #76
32a70     A7 28 02 FB | 	rdlong	local02, fp
32a74     0C 28 06 F1 | 	add	local02, #12
32a78     14 27 02 FB | 	rdlong	local01, local02
32a7c     58 4E 05 F1 | 	add	fp, #88
32a80     A7 26 62 FC | 	wrlong	local01, fp
32a84     5C 4E 85 F1 | 	sub	fp, #92
32a88                 | LR__4930
32a88     10 4E 05 F1 | 	add	fp, #16
32a8c     A7 28 0A FB | 	rdlong	local02, fp wz
32a90     10 4E 85 F1 | 	sub	fp, #16
32a94     94 00 90 5D |  if_ne	jmp	#LR__4931
32a98     5C 4E 05 F1 | 	add	fp, #92
32a9c     A7 28 02 FB | 	rdlong	local02, fp
32aa0     10 4E 85 F1 | 	sub	fp, #16
32aa4     A7 26 02 FB | 	rdlong	local01, fp
32aa8     4C 4E 85 F1 | 	sub	fp, #76
32aac     13 29 1A F2 | 	cmp	local02, local01 wcz
32ab0     78 00 90 ED |  if_be	jmp	#LR__4931
32ab4     04 4E 05 F1 | 	add	fp, #4
32ab8     A7 12 02 FB | 	rdlong	arg01, fp
32abc     4C 4E 05 F1 | 	add	fp, #76
32ac0     A7 14 02 FB | 	rdlong	arg02, fp
32ac4     50 4E 85 F1 | 	sub	fp, #80
32ac8     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
32acc     50 4E 05 F1 | 	add	fp, #80
32ad0     A7 FA 61 FC | 	wrlong	result1, fp
32ad4     50 4E 85 F1 | 	sub	fp, #80
32ad8     02 FA 15 F2 | 	cmp	result1, #2 wc
32adc     10 4E 05 C1 |  if_b	add	fp, #16
32ae0     A7 04 68 CC |  if_b	wrlong	#2, fp
32ae4     10 4E 85 C1 |  if_b	sub	fp, #16
32ae8     50 4E 05 F1 | 	add	fp, #80
32aec     A7 28 02 FB | 	rdlong	local02, fp
32af0     50 4E 85 F1 | 	sub	fp, #80
32af4     FF FF 7F FF 
32af8     FF 29 0E F2 | 	cmp	local02, ##-1 wz
32afc     10 4E 05 A1 |  if_e	add	fp, #16
32b00     A7 02 68 AC |  if_e	wrlong	#1, fp
32b04     10 4E 85 A1 |  if_e	sub	fp, #16
32b08     5C 4E 05 F1 | 	add	fp, #92
32b0c     A7 28 02 FB | 	rdlong	local02, fp
32b10     10 4E 85 F1 | 	sub	fp, #16
32b14     A7 26 02 FB | 	rdlong	local01, fp
32b18     13 29 82 F1 | 	sub	local02, local01
32b1c     10 4E 05 F1 | 	add	fp, #16
32b20     A7 28 62 FC | 	wrlong	local02, fp
32b24     5C 4E 85 F1 | 	sub	fp, #92
32b28     5C FF 9F FD | 	jmp	#LR__4930
32b2c                 | LR__4931
32b2c     04 4E 05 F1 | 	add	fp, #4
32b30     A7 28 02 FB | 	rdlong	local02, fp
32b34     4C 4E 05 F1 | 	add	fp, #76
32b38     A7 26 02 FB | 	rdlong	local01, fp
32b3c     18 28 06 F1 | 	add	local02, #24
32b40     14 27 62 FC | 	wrlong	local01, local02
32b44     40 4E 85 F1 | 	sub	fp, #64
32b48     A7 28 0A FB | 	rdlong	local02, fp wz
32b4c     10 4E 85 F1 | 	sub	fp, #16
32b50     B8 00 90 5D |  if_ne	jmp	#LR__4933
32b54     5C 4E 05 F1 | 	add	fp, #92
32b58     A7 26 02 FB | 	rdlong	local01, fp
32b5c     5C 4E 85 F1 | 	sub	fp, #92
32b60     FF 27 CE F7 | 	test	local01, #511 wz
32b64     A4 00 90 AD |  if_e	jmp	#LR__4933
32b68     44 4E 05 F1 | 	add	fp, #68
32b6c     A7 12 02 FB | 	rdlong	arg01, fp
32b70     0C 4E 05 F1 | 	add	fp, #12
32b74     A7 14 02 FB | 	rdlong	arg02, fp
32b78     50 4E 85 F1 | 	sub	fp, #80
32b7c     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
32b80     58 4E 05 F1 | 	add	fp, #88
32b84     A7 FA 61 FC | 	wrlong	result1, fp
32b88     00 FA 4D F2 | 	cmps	result1, #0 wz
32b8c     58 4E 85 F1 | 	sub	fp, #88
32b90     10 4E 05 A1 |  if_e	add	fp, #16
32b94     A7 04 68 AC |  if_e	wrlong	#2, fp
32b98     10 4E 85 A1 |  if_e	sub	fp, #16
32b9c     6C 00 90 AD |  if_e	jmp	#LR__4932
32ba0     04 4E 05 F1 | 	add	fp, #4
32ba4     A7 28 02 FB | 	rdlong	local02, fp
32ba8     54 4E 05 F1 | 	add	fp, #84
32bac     A7 26 02 FB | 	rdlong	local01, fp
32bb0     04 4E 05 F1 | 	add	fp, #4
32bb4     A7 18 02 FB | 	rdlong	arg04, fp
32bb8     09 18 46 F0 | 	shr	arg04, #9
32bbc     0C 27 02 F1 | 	add	local01, arg04
32bc0     1C 28 06 F1 | 	add	local02, #28
32bc4     14 27 62 FC | 	wrlong	local01, local02
32bc8     18 4E 85 F1 | 	sub	fp, #24
32bcc     A7 28 02 FB | 	rdlong	local02, fp
32bd0     01 28 06 F1 | 	add	local02, #1
32bd4     14 13 C2 FA | 	rdbyte	arg01, local02
32bd8     40 4E 85 F1 | 	sub	fp, #64
32bdc     A7 28 02 FB | 	rdlong	local02, fp
32be0     14 15 02 F6 | 	mov	arg02, local02
32be4     28 14 06 F1 | 	add	arg02, #40
32be8     04 4E 85 F1 | 	sub	fp, #4
32bec     1C 28 06 F1 | 	add	local02, #28
32bf0     14 17 02 FB | 	rdlong	arg03, local02
32bf4     01 18 06 F6 | 	mov	arg04, #1
32bf8     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
32bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
32c00     10 4E 05 51 |  if_ne	add	fp, #16
32c04     A7 02 68 5C |  if_ne	wrlong	#1, fp
32c08     10 4E 85 51 |  if_ne	sub	fp, #16
32c0c                 | LR__4932
32c0c                 | LR__4933
32c0c                 | LR__4934
32c0c                 | LR__4935
32c0c                 | LR__4936
32c0c     10 4E 05 F1 | 	add	fp, #16
32c10     A7 28 0A FB | 	rdlong	local02, fp wz
32c14     10 4E 85 F1 | 	sub	fp, #16
32c18     04 4E 05 51 |  if_ne	add	fp, #4
32c1c     A7 28 02 5B |  if_ne	rdlong	local02, fp
32c20     04 4E 85 51 |  if_ne	sub	fp, #4
32c24     14 01 68 5C |  if_ne	wrlong	#0, local02
32c28                 | ' 
32c28                 | ' 	return res ;
32c28     10 4E 05 F1 | 	add	fp, #16
32c2c     A7 FA 01 FB | 	rdlong	result1, fp
32c30     10 4E 85 F1 | 	sub	fp, #16
32c34                 | LR__4937
32c34     A7 F0 03 F6 | 	mov	ptra, fp
32c38     B2 00 A0 FD | 	call	#popregs_
32c3c                 | _fatfs_cc_f_open_ret
32c3c     2D 00 64 FD | 	ret
32c40                 | 
32c40                 | _fatfs_cc_f_read
32c40     0E 4A 05 F6 | 	mov	COUNT_, #14
32c44     A8 00 A0 FD | 	call	#pushregs_
32c48     38 F0 07 F1 | 	add	ptra, #56
32c4c     04 4E 05 F1 | 	add	fp, #4
32c50     A7 12 62 FC | 	wrlong	arg01, fp
32c54     04 4E 05 F1 | 	add	fp, #4
32c58     A7 14 62 FC | 	wrlong	arg02, fp
32c5c     04 4E 05 F1 | 	add	fp, #4
32c60     A7 16 62 FC | 	wrlong	arg03, fp
32c64     04 4E 05 F1 | 	add	fp, #4
32c68     A7 18 62 FC | 	wrlong	arg04, fp
32c6c     08 4E 85 F1 | 	sub	fp, #8
32c70     A7 FA 01 FB | 	rdlong	result1, fp
32c74     2C 4E 05 F1 | 	add	fp, #44
32c78     A7 FA 61 FC | 	wrlong	result1, fp
32c7c     24 4E 85 F1 | 	sub	fp, #36
32c80     A7 FA 01 FB | 	rdlong	result1, fp
32c84     FD 00 68 FC | 	wrlong	#0, result1
32c88     0C 4E 85 F1 | 	sub	fp, #12
32c8c     A7 12 02 FB | 	rdlong	arg01, fp
32c90     14 4E 05 F1 | 	add	fp, #20
32c94     A7 14 02 F6 | 	mov	arg02, fp
32c98     18 4E 85 F1 | 	sub	fp, #24
32c9c     24 F7 BF FD | 	call	#_fatfs_cc_validate
32ca0     14 4E 05 F1 | 	add	fp, #20
32ca4     A7 FA 61 FC | 	wrlong	result1, fp
32ca8     00 FA 4D F2 | 	cmps	result1, #0 wz
32cac     14 4E 85 F1 | 	sub	fp, #20
32cb0     20 00 90 5D |  if_ne	jmp	#LR__4940
32cb4     04 4E 05 F1 | 	add	fp, #4
32cb8     A7 14 02 FB | 	rdlong	arg02, fp
32cbc     11 14 06 F1 | 	add	arg02, #17
32cc0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32cc4     10 4E 05 F1 | 	add	fp, #16
32cc8     A7 14 62 FC | 	wrlong	arg02, fp
32ccc     14 4E 85 F1 | 	sub	fp, #20
32cd0     10 00 90 AD |  if_e	jmp	#LR__4941
32cd4                 | LR__4940
32cd4     14 4E 05 F1 | 	add	fp, #20
32cd8     A7 FA 01 FB | 	rdlong	result1, fp
32cdc     14 4E 85 F1 | 	sub	fp, #20
32ce0     EC 05 90 FD | 	jmp	#LR__4960
32ce4                 | LR__4941
32ce4     04 4E 05 F1 | 	add	fp, #4
32ce8     A7 18 02 FB | 	rdlong	arg04, fp
32cec     04 4E 85 F1 | 	sub	fp, #4
32cf0     10 18 06 F1 | 	add	arg04, #16
32cf4     0C 19 C2 FA | 	rdbyte	arg04, arg04
32cf8     01 18 CE F7 | 	test	arg04, #1 wz
32cfc     07 FA 05 A6 |  if_e	mov	result1, #7
32d00     CC 05 90 AD |  if_e	jmp	#LR__4960
32d04     04 4E 05 F1 | 	add	fp, #4
32d08     A7 26 02 FB | 	rdlong	local01, fp
32d0c     13 29 02 F6 | 	mov	local02, local01
32d10     0C 28 06 F1 | 	add	local02, #12
32d14     14 2B 02 FB | 	rdlong	local03, local02
32d18     14 26 06 F1 | 	add	local01, #20
32d1c     13 27 02 FB | 	rdlong	local01, local01
32d20     13 2B 82 F1 | 	sub	local03, local01
32d24     20 4E 05 F1 | 	add	fp, #32
32d28     A7 2A 62 FC | 	wrlong	local03, fp
32d2c     18 4E 85 F1 | 	sub	fp, #24
32d30     A7 2C 02 FB | 	rdlong	local04, fp
32d34     0C 4E 85 F1 | 	sub	fp, #12
32d38     15 2D 1A F2 | 	cmp	local04, local03 wcz
32d3c     24 4E 05 11 |  if_a	add	fp, #36
32d40     A7 2C 02 1B |  if_a	rdlong	local04, fp
32d44     18 4E 85 11 |  if_a	sub	fp, #24
32d48     A7 2C 62 1C |  if_a	wrlong	local04, fp
32d4c     0C 4E 85 11 |  if_a	sub	fp, #12
32d50                 | ' 
32d50                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
32d50                 | LR__4942
32d50     0C 4E 05 F1 | 	add	fp, #12
32d54     A7 28 02 FB | 	rdlong	local02, fp
32d58     0C 4E 85 F1 | 	sub	fp, #12
32d5c     14 2D 02 F6 | 	mov	local04, local02
32d60     01 2C 16 F2 | 	cmp	local04, #1 wc
32d64     64 05 90 CD |  if_b	jmp	#LR__4959
32d68     04 4E 05 F1 | 	add	fp, #4
32d6c     A7 2A 02 FB | 	rdlong	local03, fp
32d70     04 4E 85 F1 | 	sub	fp, #4
32d74     14 2A 06 F1 | 	add	local03, #20
32d78     15 2B 02 FB | 	rdlong	local03, local03
32d7c     FF 2B CE F7 | 	test	local03, #511 wz
32d80     3C 04 90 5D |  if_ne	jmp	#LR__4957
32d84     04 4E 05 F1 | 	add	fp, #4
32d88     A7 26 02 FB | 	rdlong	local01, fp
32d8c     14 26 06 F1 | 	add	local01, #20
32d90     13 2B 02 FB | 	rdlong	local03, local01
32d94     09 2A 46 F0 | 	shr	local03, #9
32d98     14 4E 05 F1 | 	add	fp, #20
32d9c     A7 2E 02 FB | 	rdlong	local05, fp
32da0     17 31 02 F6 | 	mov	local06, local05
32da4     0A 30 06 F1 | 	add	local06, #10
32da8     18 33 E2 FA | 	rdword	local07, local06
32dac     0A 30 86 F1 | 	sub	local06, #10
32db0     19 35 32 F9 | 	getword	local08, local07, #0
32db4     01 34 86 F1 | 	sub	local08, #1
32db8     1A 2B 0A F5 | 	and	local03, local08 wz
32dbc     18 4E 05 F1 | 	add	fp, #24
32dc0     A7 2A 62 FC | 	wrlong	local03, fp
32dc4     30 4E 85 F1 | 	sub	fp, #48
32dc8     E0 00 90 5D |  if_ne	jmp	#LR__4947
32dcc     04 4E 05 F1 | 	add	fp, #4
32dd0     A7 2A 02 FB | 	rdlong	local03, fp
32dd4     04 4E 85 F1 | 	sub	fp, #4
32dd8     14 2A 06 F1 | 	add	local03, #20
32ddc     15 2B 0A FB | 	rdlong	local03, local03 wz
32de0     20 00 90 5D |  if_ne	jmp	#LR__4943
32de4     04 4E 05 F1 | 	add	fp, #4
32de8     A7 2A 02 FB | 	rdlong	local03, fp
32dec     08 2A 06 F1 | 	add	local03, #8
32df0     15 2B 02 FB | 	rdlong	local03, local03
32df4     18 4E 05 F1 | 	add	fp, #24
32df8     A7 2A 62 FC | 	wrlong	local03, fp
32dfc     1C 4E 85 F1 | 	sub	fp, #28
32e00     28 00 90 FD | 	jmp	#LR__4944
32e04                 | LR__4943
32e04     04 4E 05 F1 | 	add	fp, #4
32e08     A7 34 02 FB | 	rdlong	local08, fp
32e0c     1A 13 02 F6 | 	mov	arg01, local08
32e10     04 4E 85 F1 | 	sub	fp, #4
32e14     18 34 06 F1 | 	add	local08, #24
32e18     1A 15 02 FB | 	rdlong	arg02, local08
32e1c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
32e20     1C 4E 05 F1 | 	add	fp, #28
32e24     A7 FA 61 FC | 	wrlong	result1, fp
32e28     1C 4E 85 F1 | 	sub	fp, #28
32e2c                 | LR__4944
32e2c     1C 4E 05 F1 | 	add	fp, #28
32e30     A7 2A 02 FB | 	rdlong	local03, fp
32e34     1C 4E 85 F1 | 	sub	fp, #28
32e38     02 2A 16 F2 | 	cmp	local03, #2 wc
32e3c     1C 00 90 3D |  if_ae	jmp	#LR__4945
32e40     04 4E 05 F1 | 	add	fp, #4
32e44     A7 2A 02 FB | 	rdlong	local03, fp
32e48     04 4E 85 F1 | 	sub	fp, #4
32e4c     11 2A 06 F1 | 	add	local03, #17
32e50     15 05 48 FC | 	wrbyte	#2, local03
32e54     02 FA 05 F6 | 	mov	result1, #2
32e58     74 04 90 FD | 	jmp	#LR__4960
32e5c                 | LR__4945
32e5c     1C 4E 05 F1 | 	add	fp, #28
32e60     A7 2A 02 FB | 	rdlong	local03, fp
32e64     1C 4E 85 F1 | 	sub	fp, #28
32e68     FF FF 7F FF 
32e6c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
32e70     1C 00 90 5D |  if_ne	jmp	#LR__4946
32e74     04 4E 05 F1 | 	add	fp, #4
32e78     A7 2A 02 FB | 	rdlong	local03, fp
32e7c     04 4E 85 F1 | 	sub	fp, #4
32e80     11 2A 06 F1 | 	add	local03, #17
32e84     15 03 48 FC | 	wrbyte	#1, local03
32e88     01 FA 05 F6 | 	mov	result1, #1
32e8c     40 04 90 FD | 	jmp	#LR__4960
32e90                 | LR__4946
32e90     04 4E 05 F1 | 	add	fp, #4
32e94     A7 2A 02 FB | 	rdlong	local03, fp
32e98     18 4E 05 F1 | 	add	fp, #24
32e9c     A7 34 02 FB | 	rdlong	local08, fp
32ea0     1C 4E 85 F1 | 	sub	fp, #28
32ea4     18 2A 06 F1 | 	add	local03, #24
32ea8     15 35 62 FC | 	wrlong	local08, local03
32eac                 | LR__4947
32eac     18 4E 05 F1 | 	add	fp, #24
32eb0     A7 12 02 FB | 	rdlong	arg01, fp
32eb4     14 4E 85 F1 | 	sub	fp, #20
32eb8     A7 2A 02 FB | 	rdlong	local03, fp
32ebc     04 4E 85 F1 | 	sub	fp, #4
32ec0     18 2A 06 F1 | 	add	local03, #24
32ec4     15 15 02 FB | 	rdlong	arg02, local03
32ec8     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
32ecc     20 4E 05 F1 | 	add	fp, #32
32ed0     A7 FA 61 FC | 	wrlong	result1, fp
32ed4     20 4E 85 F1 | 	sub	fp, #32
32ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
32edc     1C 00 90 5D |  if_ne	jmp	#LR__4948
32ee0     04 4E 05 F1 | 	add	fp, #4
32ee4     A7 2A 02 FB | 	rdlong	local03, fp
32ee8     04 4E 85 F1 | 	sub	fp, #4
32eec     11 2A 06 F1 | 	add	local03, #17
32ef0     15 05 48 FC | 	wrbyte	#2, local03
32ef4     02 FA 05 F6 | 	mov	result1, #2
32ef8     D4 03 90 FD | 	jmp	#LR__4960
32efc                 | LR__4948
32efc     20 4E 05 F1 | 	add	fp, #32
32f00     A7 2A 02 FB | 	rdlong	local03, fp
32f04     10 4E 05 F1 | 	add	fp, #16
32f08     A7 34 02 FB | 	rdlong	local08, fp
32f0c     1A 2B 02 F1 | 	add	local03, local08
32f10     10 4E 85 F1 | 	sub	fp, #16
32f14     A7 2A 62 FC | 	wrlong	local03, fp
32f18     14 4E 85 F1 | 	sub	fp, #20
32f1c     A7 2A 02 FB | 	rdlong	local03, fp
32f20     09 2A 46 F0 | 	shr	local03, #9
32f24     20 4E 05 F1 | 	add	fp, #32
32f28     A7 2A 62 FC | 	wrlong	local03, fp
32f2c     2C 4E 85 F1 | 	sub	fp, #44
32f30     01 2A 16 F2 | 	cmp	local03, #1 wc
32f34     5C 01 90 CD |  if_b	jmp	#LR__4952
32f38     30 4E 05 F1 | 	add	fp, #48
32f3c     A7 2A 02 FB | 	rdlong	local03, fp
32f40     04 4E 85 F1 | 	sub	fp, #4
32f44     A7 34 02 FB | 	rdlong	local08, fp
32f48     1A 2B 02 F1 | 	add	local03, local08
32f4c     14 4E 85 F1 | 	sub	fp, #20
32f50     A7 34 02 FB | 	rdlong	local08, fp
32f54     18 4E 85 F1 | 	sub	fp, #24
32f58     0A 34 06 F1 | 	add	local08, #10
32f5c     1A 35 E2 FA | 	rdword	local08, local08
32f60     1A 2B 1A F2 | 	cmp	local03, local08 wcz
32f64     28 00 90 ED |  if_be	jmp	#LR__4949
32f68     18 4E 05 F1 | 	add	fp, #24
32f6c     A7 26 02 FB | 	rdlong	local01, fp
32f70     0A 26 06 F1 | 	add	local01, #10
32f74     13 2B E2 FA | 	rdword	local03, local01
32f78     18 4E 05 F1 | 	add	fp, #24
32f7c     A7 34 02 FB | 	rdlong	local08, fp
32f80     1A 2B 82 F1 | 	sub	local03, local08
32f84     04 4E 85 F1 | 	sub	fp, #4
32f88     A7 2A 62 FC | 	wrlong	local03, fp
32f8c     2C 4E 85 F1 | 	sub	fp, #44
32f90                 | LR__4949
32f90     18 4E 05 F1 | 	add	fp, #24
32f94     A7 26 02 FB | 	rdlong	local01, fp
32f98     01 26 06 F1 | 	add	local01, #1
32f9c     13 13 C2 FA | 	rdbyte	arg01, local01
32fa0     1C 4E 05 F1 | 	add	fp, #28
32fa4     A7 14 02 FB | 	rdlong	arg02, fp
32fa8     14 4E 85 F1 | 	sub	fp, #20
32fac     A7 16 02 FB | 	rdlong	arg03, fp
32fb0     0C 4E 05 F1 | 	add	fp, #12
32fb4     A7 18 02 FB | 	rdlong	arg04, fp
32fb8     2C 4E 85 F1 | 	sub	fp, #44
32fbc     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
32fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
32fc4     1C 00 90 AD |  if_e	jmp	#LR__4950
32fc8     04 4E 05 F1 | 	add	fp, #4
32fcc     A7 2A 02 FB | 	rdlong	local03, fp
32fd0     04 4E 85 F1 | 	sub	fp, #4
32fd4     11 2A 06 F1 | 	add	local03, #17
32fd8     15 03 48 FC | 	wrbyte	#1, local03
32fdc     01 FA 05 F6 | 	mov	result1, #1
32fe0     EC 02 90 FD | 	jmp	#LR__4960
32fe4                 | LR__4950
32fe4     04 4E 05 F1 | 	add	fp, #4
32fe8     A7 26 02 FB | 	rdlong	local01, fp
32fec     04 4E 85 F1 | 	sub	fp, #4
32ff0     10 26 06 F1 | 	add	local01, #16
32ff4     13 2B C2 FA | 	rdbyte	local03, local01
32ff8     80 2A CE F7 | 	test	local03, #128 wz
32ffc     78 00 90 AD |  if_e	jmp	#LR__4951
33000     04 4E 05 F1 | 	add	fp, #4
33004     A7 34 02 FB | 	rdlong	local08, fp
33008     1C 34 06 F1 | 	add	local08, #28
3300c     1A 35 02 FB | 	rdlong	local08, local08
33010     1C 4E 05 F1 | 	add	fp, #28
33014     A7 36 02 FB | 	rdlong	local09, fp
33018     1B 35 82 F1 | 	sub	local08, local09
3301c     0C 4E 05 F1 | 	add	fp, #12
33020     A7 38 02 FB | 	rdlong	local10, fp
33024     2C 4E 85 F1 | 	sub	fp, #44
33028     1C 3B 02 F6 | 	mov	local11, local10
3302c     1D 35 12 F2 | 	cmp	local08, local11 wc
33030     44 00 90 3D |  if_ae	jmp	#LR__4951
33034     34 4E 05 F1 | 	add	fp, #52
33038     A7 12 02 FB | 	rdlong	arg01, fp
3303c     30 4E 85 F1 | 	sub	fp, #48
33040     A7 14 02 FB | 	rdlong	arg02, fp
33044     0A 3B 02 F6 | 	mov	local11, arg02
33048     1C 3A 06 F1 | 	add	local11, #28
3304c     1D 37 02 FB | 	rdlong	local09, local11
33050     1C 4E 05 F1 | 	add	fp, #28
33054     A7 2E 02 FB | 	rdlong	local05, fp
33058     17 37 82 F1 | 	sub	local09, local05
3305c     09 36 66 F0 | 	shl	local09, #9
33060     1B 3B 02 F6 | 	mov	local11, local09
33064     1B 13 02 F1 | 	add	arg01, local09
33068     20 4E 85 F1 | 	sub	fp, #32
3306c     28 14 06 F1 | 	add	arg02, #40
33070     09 16 C6 F9 | 	decod	arg03, #9
33074     F0 42 BF FD | 	call	#__system____builtin_memmove
33078                 | LR__4951
33078     2C 4E 05 F1 | 	add	fp, #44
3307c     A7 2A 02 FB | 	rdlong	local03, fp
33080     09 2A 66 F0 | 	shl	local03, #9
33084     04 4E 85 F1 | 	sub	fp, #4
33088     A7 2A 62 FC | 	wrlong	local03, fp
3308c     28 4E 85 F1 | 	sub	fp, #40
33090                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
33090                 | ' 				}
33090                 | ' 
33090                 | ' 
33090                 | ' 				rcnt =  ((UINT) 512 )  * cc;
33090                 | ' 				continue;
33090     B4 01 90 FD | 	jmp	#LR__4958
33094                 | LR__4952
33094     04 4E 05 F1 | 	add	fp, #4
33098     A7 2A 02 FB | 	rdlong	local03, fp
3309c     1C 2A 06 F1 | 	add	local03, #28
330a0     15 2B 02 FB | 	rdlong	local03, local03
330a4     1C 4E 05 F1 | 	add	fp, #28
330a8     A7 26 02 FB | 	rdlong	local01, fp
330ac     20 4E 85 F1 | 	sub	fp, #32
330b0     13 2B 0A F2 | 	cmp	local03, local01 wz
330b4     EC 00 90 AD |  if_e	jmp	#LR__4956
330b8     04 4E 05 F1 | 	add	fp, #4
330bc     A7 26 02 FB | 	rdlong	local01, fp
330c0     04 4E 85 F1 | 	sub	fp, #4
330c4     10 26 06 F1 | 	add	local01, #16
330c8     13 2B C2 FA | 	rdbyte	local03, local01
330cc     80 2A CE F7 | 	test	local03, #128 wz
330d0     7C 00 90 AD |  if_e	jmp	#LR__4954
330d4     18 4E 05 F1 | 	add	fp, #24
330d8     A7 26 02 FB | 	rdlong	local01, fp
330dc     01 26 06 F1 | 	add	local01, #1
330e0     13 13 C2 FA | 	rdbyte	arg01, local01
330e4     14 4E 85 F1 | 	sub	fp, #20
330e8     A7 2A 02 FB | 	rdlong	local03, fp
330ec     15 15 02 F6 | 	mov	arg02, local03
330f0     28 14 06 F1 | 	add	arg02, #40
330f4     04 4E 85 F1 | 	sub	fp, #4
330f8     1C 2A 06 F1 | 	add	local03, #28
330fc     15 17 02 FB | 	rdlong	arg03, local03
33100     01 18 06 F6 | 	mov	arg04, #1
33104     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
33108     00 FA 0D F2 | 	cmp	result1, #0 wz
3310c     1C 00 90 AD |  if_e	jmp	#LR__4953
33110     04 4E 05 F1 | 	add	fp, #4
33114     A7 2A 02 FB | 	rdlong	local03, fp
33118     04 4E 85 F1 | 	sub	fp, #4
3311c     11 2A 06 F1 | 	add	local03, #17
33120     15 03 48 FC | 	wrbyte	#1, local03
33124     01 FA 05 F6 | 	mov	result1, #1
33128     A4 01 90 FD | 	jmp	#LR__4960
3312c                 | LR__4953
3312c     04 4E 05 F1 | 	add	fp, #4
33130     A7 3A 02 FB | 	rdlong	local11, fp
33134     1D 2B 02 F6 | 	mov	local03, local11
33138     04 4E 85 F1 | 	sub	fp, #4
3313c     10 3A 06 F1 | 	add	local11, #16
33140     1D 3B C2 FA | 	rdbyte	local11, local11
33144     7F 3A 06 F5 | 	and	local11, #127
33148     10 2A 06 F1 | 	add	local03, #16
3314c     15 3B 42 FC | 	wrbyte	local11, local03
33150                 | LR__4954
33150     18 4E 05 F1 | 	add	fp, #24
33154     A7 26 02 FB | 	rdlong	local01, fp
33158     01 26 06 F1 | 	add	local01, #1
3315c     13 13 C2 FA | 	rdbyte	arg01, local01
33160     14 4E 85 F1 | 	sub	fp, #20
33164     A7 14 02 FB | 	rdlong	arg02, fp
33168     28 14 06 F1 | 	add	arg02, #40
3316c     1C 4E 05 F1 | 	add	fp, #28
33170     A7 16 02 FB | 	rdlong	arg03, fp
33174     20 4E 85 F1 | 	sub	fp, #32
33178     01 18 06 F6 | 	mov	arg04, #1
3317c     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
33180     00 FA 0D F2 | 	cmp	result1, #0 wz
33184     1C 00 90 AD |  if_e	jmp	#LR__4955
33188     04 4E 05 F1 | 	add	fp, #4
3318c     A7 2A 02 FB | 	rdlong	local03, fp
33190     04 4E 85 F1 | 	sub	fp, #4
33194     11 2A 06 F1 | 	add	local03, #17
33198     15 03 48 FC | 	wrbyte	#1, local03
3319c     01 FA 05 F6 | 	mov	result1, #1
331a0     2C 01 90 FD | 	jmp	#LR__4960
331a4                 | LR__4955
331a4                 | LR__4956
331a4     04 4E 05 F1 | 	add	fp, #4
331a8     A7 2A 02 FB | 	rdlong	local03, fp
331ac     1C 4E 05 F1 | 	add	fp, #28
331b0     A7 3A 02 FB | 	rdlong	local11, fp
331b4     20 4E 85 F1 | 	sub	fp, #32
331b8     1C 2A 06 F1 | 	add	local03, #28
331bc     15 3B 62 FC | 	wrlong	local11, local03
331c0                 | LR__4957
331c0     04 4E 05 F1 | 	add	fp, #4
331c4     A7 26 02 FB | 	rdlong	local01, fp
331c8     14 26 06 F1 | 	add	local01, #20
331cc     13 3B 02 FB | 	rdlong	local11, local01
331d0     FF 3B 06 F5 | 	and	local11, #511
331d4     09 2A C6 F9 | 	decod	local03, #9
331d8     1D 2B 82 F1 | 	sub	local03, local11
331dc     24 4E 05 F1 | 	add	fp, #36
331e0     A7 2A 62 FC | 	wrlong	local03, fp
331e4     1C 4E 85 F1 | 	sub	fp, #28
331e8     A7 3A 02 FB | 	rdlong	local11, fp
331ec     0C 4E 85 F1 | 	sub	fp, #12
331f0     1D 2B 1A F2 | 	cmp	local03, local11 wcz
331f4     0C 4E 05 11 |  if_a	add	fp, #12
331f8     A7 2A 02 1B |  if_a	rdlong	local03, fp
331fc     1C 4E 05 11 |  if_a	add	fp, #28
33200     A7 2A 62 1C |  if_a	wrlong	local03, fp
33204     28 4E 85 11 |  if_a	sub	fp, #40
33208     34 4E 05 F1 | 	add	fp, #52
3320c     A7 12 02 FB | 	rdlong	arg01, fp
33210     30 4E 85 F1 | 	sub	fp, #48
33214     A7 30 02 FB | 	rdlong	local06, fp
33218     18 15 02 F6 | 	mov	arg02, local06
3321c     28 14 06 F1 | 	add	arg02, #40
33220     14 30 06 F1 | 	add	local06, #20
33224     18 3B 02 FB | 	rdlong	local11, local06
33228     1D 37 02 F6 | 	mov	local09, local11
3322c     1B 39 02 F6 | 	mov	local10, local09
33230     FF 39 06 F5 | 	and	local10, #511
33234     1C 15 02 F1 | 	add	arg02, local10
33238     24 4E 05 F1 | 	add	fp, #36
3323c     A7 16 02 FB | 	rdlong	arg03, fp
33240     28 4E 85 F1 | 	sub	fp, #40
33244     20 41 BF FD | 	call	#__system____builtin_memmove
33248                 | LR__4958
33248     0C 4E 05 F1 | 	add	fp, #12
3324c     A7 2A 02 FB | 	rdlong	local03, fp
33250     1C 4E 05 F1 | 	add	fp, #28
33254     A7 34 02 FB | 	rdlong	local08, fp
33258     1A 2B 82 F1 | 	sub	local03, local08
3325c     1C 4E 85 F1 | 	sub	fp, #28
33260     A7 2A 62 FC | 	wrlong	local03, fp
33264     04 4E 05 F1 | 	add	fp, #4
33268     A7 26 02 FB | 	rdlong	local01, fp
3326c     13 33 02 FB | 	rdlong	local07, local01
33270     18 4E 05 F1 | 	add	fp, #24
33274     A7 34 02 FB | 	rdlong	local08, fp
33278     1A 33 02 F1 | 	add	local07, local08
3327c     13 33 62 FC | 	wrlong	local07, local01
33280     0C 4E 05 F1 | 	add	fp, #12
33284     A7 2A 02 FB | 	rdlong	local03, fp
33288     0C 4E 85 F1 | 	sub	fp, #12
3328c     A7 3C 02 FB | 	rdlong	local12, fp
33290     1E 2B 02 F1 | 	add	local03, local12
33294     0C 4E 05 F1 | 	add	fp, #12
33298     A7 2A 62 FC | 	wrlong	local03, fp
3329c     30 4E 85 F1 | 	sub	fp, #48
332a0     A7 3E 02 FB | 	rdlong	local13, fp
332a4     1F 2B 02 F6 | 	mov	local03, local13
332a8     14 3E 06 F1 | 	add	local13, #20
332ac     1F 41 02 FB | 	rdlong	local14, local13
332b0     24 4E 05 F1 | 	add	fp, #36
332b4     A7 30 02 FB | 	rdlong	local06, fp
332b8     28 4E 85 F1 | 	sub	fp, #40
332bc     18 41 02 F1 | 	add	local14, local06
332c0     14 2A 06 F1 | 	add	local03, #20
332c4     15 41 62 FC | 	wrlong	local14, local03
332c8     84 FA 9F FD | 	jmp	#LR__4942
332cc                 | LR__4959
332cc                 | ' 
332cc                 | ' 
332cc                 | ' 
332cc                 | ' 
332cc                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
332cc                 | ' 
332cc                 | ' 	}
332cc                 | ' 
332cc                 | ' 	return FR_OK ;
332cc     00 FA 05 F6 | 	mov	result1, #0
332d0                 | LR__4960
332d0     A7 F0 03 F6 | 	mov	ptra, fp
332d4     B2 00 A0 FD | 	call	#popregs_
332d8                 | _fatfs_cc_f_read_ret
332d8     2D 00 64 FD | 	ret
332dc                 | 
332dc                 | _fatfs_cc_f_write
332dc     15 4A 05 F6 | 	mov	COUNT_, #21
332e0     A8 00 A0 FD | 	call	#pushregs_
332e4     34 F0 07 F1 | 	add	ptra, #52
332e8     04 4E 05 F1 | 	add	fp, #4
332ec     A7 12 62 FC | 	wrlong	arg01, fp
332f0     04 4E 05 F1 | 	add	fp, #4
332f4     A7 14 62 FC | 	wrlong	arg02, fp
332f8     04 4E 05 F1 | 	add	fp, #4
332fc     A7 16 62 FC | 	wrlong	arg03, fp
33300     04 4E 05 F1 | 	add	fp, #4
33304     A7 18 62 FC | 	wrlong	arg04, fp
33308     08 4E 85 F1 | 	sub	fp, #8
3330c     A7 FA 01 FB | 	rdlong	result1, fp
33310     28 4E 05 F1 | 	add	fp, #40
33314     A7 FA 61 FC | 	wrlong	result1, fp
33318     20 4E 85 F1 | 	sub	fp, #32
3331c     A7 FA 01 FB | 	rdlong	result1, fp
33320     FD 00 68 FC | 	wrlong	#0, result1
33324     0C 4E 85 F1 | 	sub	fp, #12
33328     A7 12 02 FB | 	rdlong	arg01, fp
3332c     14 4E 05 F1 | 	add	fp, #20
33330     A7 14 02 F6 | 	mov	arg02, fp
33334     18 4E 85 F1 | 	sub	fp, #24
33338     88 F0 BF FD | 	call	#_fatfs_cc_validate
3333c     14 4E 05 F1 | 	add	fp, #20
33340     A7 FA 61 FC | 	wrlong	result1, fp
33344     00 FA 4D F2 | 	cmps	result1, #0 wz
33348     14 4E 85 F1 | 	sub	fp, #20
3334c     20 00 90 5D |  if_ne	jmp	#LR__4970
33350     04 4E 05 F1 | 	add	fp, #4
33354     A7 14 02 FB | 	rdlong	arg02, fp
33358     11 14 06 F1 | 	add	arg02, #17
3335c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
33360     10 4E 05 F1 | 	add	fp, #16
33364     A7 14 62 FC | 	wrlong	arg02, fp
33368     14 4E 85 F1 | 	sub	fp, #20
3336c     10 00 90 AD |  if_e	jmp	#LR__4971
33370                 | LR__4970
33370     14 4E 05 F1 | 	add	fp, #20
33374     A7 FA 01 FB | 	rdlong	result1, fp
33378     14 4E 85 F1 | 	sub	fp, #20
3337c     44 07 90 FD | 	jmp	#LR__4993
33380                 | LR__4971
33380     04 4E 05 F1 | 	add	fp, #4
33384     A7 14 02 FB | 	rdlong	arg02, fp
33388     04 4E 85 F1 | 	sub	fp, #4
3338c     10 14 06 F1 | 	add	arg02, #16
33390     0A 15 C2 FA | 	rdbyte	arg02, arg02
33394     02 14 CE F7 | 	test	arg02, #2 wz
33398     07 FA 05 A6 |  if_e	mov	result1, #7
3339c     24 07 90 AD |  if_e	jmp	#LR__4993
333a0     04 4E 05 F1 | 	add	fp, #4
333a4     A7 14 02 FB | 	rdlong	arg02, fp
333a8     0A 13 02 F6 | 	mov	arg01, arg02
333ac     14 12 06 F1 | 	add	arg01, #20
333b0     09 13 02 FB | 	rdlong	arg01, arg01
333b4     08 4E 05 F1 | 	add	fp, #8
333b8     A7 FA 01 FB | 	rdlong	result1, fp
333bc     FD 12 02 F1 | 	add	arg01, result1
333c0     0C 4E 85 F1 | 	sub	fp, #12
333c4     14 14 06 F1 | 	add	arg02, #20
333c8     0A FB 01 FB | 	rdlong	result1, arg02
333cc     FD 12 12 F2 | 	cmp	arg01, result1 wc
333d0     24 00 90 3D |  if_ae	jmp	#LR__4972
333d4     04 4E 05 F1 | 	add	fp, #4
333d8     A7 14 02 FB | 	rdlong	arg02, fp
333dc     01 FA 65 F6 | 	neg	result1, #1
333e0     14 14 06 F1 | 	add	arg02, #20
333e4     0A 15 02 FB | 	rdlong	arg02, arg02
333e8     0A FB 81 F1 | 	sub	result1, arg02
333ec     08 4E 05 F1 | 	add	fp, #8
333f0     A7 FA 61 FC | 	wrlong	result1, fp
333f4     0C 4E 85 F1 | 	sub	fp, #12
333f8                 | LR__4972
333f8                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
333f8                 | ' 	}
333f8                 | ' 
333f8                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
333f8                 | LR__4973
333f8     0C 4E 05 F1 | 	add	fp, #12
333fc     A7 FA 01 FB | 	rdlong	result1, fp
33400     0C 4E 85 F1 | 	sub	fp, #12
33404     01 FA 15 F2 | 	cmp	result1, #1 wc
33408     90 06 90 CD |  if_b	jmp	#LR__4992
3340c     04 4E 05 F1 | 	add	fp, #4
33410     A7 FA 01 FB | 	rdlong	result1, fp
33414     04 4E 85 F1 | 	sub	fp, #4
33418     14 FA 05 F1 | 	add	result1, #20
3341c     FD FA 01 FB | 	rdlong	result1, result1
33420     FF FB CD F7 | 	test	result1, #511 wz
33424     D8 04 90 5D |  if_ne	jmp	#LR__4988
33428     04 4E 05 F1 | 	add	fp, #4
3342c     A7 FA 01 FB | 	rdlong	result1, fp
33430     14 FA 05 F1 | 	add	result1, #20
33434     FD FA 01 FB | 	rdlong	result1, result1
33438     09 FA 45 F0 | 	shr	result1, #9
3343c     14 4E 05 F1 | 	add	fp, #20
33440     A7 14 02 FB | 	rdlong	arg02, fp
33444     0A 14 06 F1 | 	add	arg02, #10
33448     0A 19 E2 FA | 	rdword	arg04, arg02
3344c     0C 15 32 F9 | 	getword	arg02, arg04, #0
33450     01 14 86 F1 | 	sub	arg02, #1
33454     0A FB 09 F5 | 	and	result1, arg02 wz
33458     14 4E 05 F1 | 	add	fp, #20
3345c     A7 FA 61 FC | 	wrlong	result1, fp
33460     2C 4E 85 F1 | 	sub	fp, #44
33464     44 01 90 5D |  if_ne	jmp	#LR__4979
33468     04 4E 05 F1 | 	add	fp, #4
3346c     A7 FA 01 FB | 	rdlong	result1, fp
33470     04 4E 85 F1 | 	sub	fp, #4
33474     14 FA 05 F1 | 	add	result1, #20
33478     FD 14 0A FB | 	rdlong	arg02, result1 wz
3347c     44 00 90 5D |  if_ne	jmp	#LR__4974
33480     04 4E 05 F1 | 	add	fp, #4
33484     A7 14 02 FB | 	rdlong	arg02, fp
33488     08 14 06 F1 | 	add	arg02, #8
3348c     0A 15 0A FB | 	rdlong	arg02, arg02 wz
33490     18 4E 05 F1 | 	add	fp, #24
33494     A7 14 62 FC | 	wrlong	arg02, fp
33498     1C 4E 85 F1 | 	sub	fp, #28
3349c     4C 00 90 5D |  if_ne	jmp	#LR__4975
334a0     04 4E 05 F1 | 	add	fp, #4
334a4     A7 12 02 FB | 	rdlong	arg01, fp
334a8     04 4E 85 F1 | 	sub	fp, #4
334ac     00 14 06 F6 | 	mov	arg02, #0
334b0     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
334b4     1C 4E 05 F1 | 	add	fp, #28
334b8     A7 FA 61 FC | 	wrlong	result1, fp
334bc     1C 4E 85 F1 | 	sub	fp, #28
334c0     28 00 90 FD | 	jmp	#LR__4975
334c4                 | LR__4974
334c4     04 4E 05 F1 | 	add	fp, #4
334c8     A7 18 02 FB | 	rdlong	arg04, fp
334cc     0C 13 02 F6 | 	mov	arg01, arg04
334d0     04 4E 85 F1 | 	sub	fp, #4
334d4     18 18 06 F1 | 	add	arg04, #24
334d8     0C 15 02 FB | 	rdlong	arg02, arg04
334dc     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
334e0     1C 4E 05 F1 | 	add	fp, #28
334e4     A7 FA 61 FC | 	wrlong	result1, fp
334e8     1C 4E 85 F1 | 	sub	fp, #28
334ec                 | LR__4975
334ec     1C 4E 05 F1 | 	add	fp, #28
334f0     A7 FA 09 FB | 	rdlong	result1, fp wz
334f4     1C 4E 85 F1 | 	sub	fp, #28
334f8     A0 05 90 AD |  if_e	jmp	#LR__4992
334fc     1C 4E 05 F1 | 	add	fp, #28
33500     A7 FA 01 FB | 	rdlong	result1, fp
33504     1C 4E 85 F1 | 	sub	fp, #28
33508     01 FA 0D F2 | 	cmp	result1, #1 wz
3350c     1C 00 90 5D |  if_ne	jmp	#LR__4976
33510     04 4E 05 F1 | 	add	fp, #4
33514     A7 FA 01 FB | 	rdlong	result1, fp
33518     04 4E 85 F1 | 	sub	fp, #4
3351c     11 FA 05 F1 | 	add	result1, #17
33520     FD 04 48 FC | 	wrbyte	#2, result1
33524     02 FA 05 F6 | 	mov	result1, #2
33528     98 05 90 FD | 	jmp	#LR__4993
3352c                 | LR__4976
3352c     1C 4E 05 F1 | 	add	fp, #28
33530     A7 FA 01 FB | 	rdlong	result1, fp
33534     1C 4E 85 F1 | 	sub	fp, #28
33538     FF FF 7F FF 
3353c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
33540     1C 00 90 5D |  if_ne	jmp	#LR__4977
33544     04 4E 05 F1 | 	add	fp, #4
33548     A7 FA 01 FB | 	rdlong	result1, fp
3354c     04 4E 85 F1 | 	sub	fp, #4
33550     11 FA 05 F1 | 	add	result1, #17
33554     FD 02 48 FC | 	wrbyte	#1, result1
33558     01 FA 05 F6 | 	mov	result1, #1
3355c     64 05 90 FD | 	jmp	#LR__4993
33560                 | LR__4977
33560     04 4E 05 F1 | 	add	fp, #4
33564     A7 FA 01 FB | 	rdlong	result1, fp
33568     18 4E 05 F1 | 	add	fp, #24
3356c     A7 18 02 FB | 	rdlong	arg04, fp
33570     18 FA 05 F1 | 	add	result1, #24
33574     FD 18 62 FC | 	wrlong	arg04, result1
33578     18 4E 85 F1 | 	sub	fp, #24
3357c     A7 FA 01 FB | 	rdlong	result1, fp
33580     04 4E 85 F1 | 	sub	fp, #4
33584     08 FA 05 F1 | 	add	result1, #8
33588     FD FA 09 FB | 	rdlong	result1, result1 wz
3358c     1C 00 90 5D |  if_ne	jmp	#LR__4978
33590     04 4E 05 F1 | 	add	fp, #4
33594     A7 18 02 FB | 	rdlong	arg04, fp
33598     18 4E 05 F1 | 	add	fp, #24
3359c     A7 FA 01 FB | 	rdlong	result1, fp
335a0     1C 4E 85 F1 | 	sub	fp, #28
335a4     08 18 06 F1 | 	add	arg04, #8
335a8     0C FB 61 FC | 	wrlong	result1, arg04
335ac                 | LR__4978
335ac                 | LR__4979
335ac     04 4E 05 F1 | 	add	fp, #4
335b0     A7 18 02 FB | 	rdlong	arg04, fp
335b4     04 4E 85 F1 | 	sub	fp, #4
335b8     10 18 06 F1 | 	add	arg04, #16
335bc     0C 19 C2 FA | 	rdbyte	arg04, arg04
335c0     80 18 CE F7 | 	test	arg04, #128 wz
335c4     7C 00 90 AD |  if_e	jmp	#LR__4981
335c8     18 4E 05 F1 | 	add	fp, #24
335cc     A7 18 02 FB | 	rdlong	arg04, fp
335d0     01 18 06 F1 | 	add	arg04, #1
335d4     0C 13 C2 FA | 	rdbyte	arg01, arg04
335d8     14 4E 85 F1 | 	sub	fp, #20
335dc     A7 18 02 FB | 	rdlong	arg04, fp
335e0     0C 15 02 F6 | 	mov	arg02, arg04
335e4     28 14 06 F1 | 	add	arg02, #40
335e8     04 4E 85 F1 | 	sub	fp, #4
335ec     1C 18 06 F1 | 	add	arg04, #28
335f0     0C 17 02 FB | 	rdlong	arg03, arg04
335f4     01 18 06 F6 | 	mov	arg04, #1
335f8     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
335fc     00 FA 0D F2 | 	cmp	result1, #0 wz
33600     1C 00 90 AD |  if_e	jmp	#LR__4980
33604     04 4E 05 F1 | 	add	fp, #4
33608     A7 FA 01 FB | 	rdlong	result1, fp
3360c     04 4E 85 F1 | 	sub	fp, #4
33610     11 FA 05 F1 | 	add	result1, #17
33614     FD 02 48 FC | 	wrbyte	#1, result1
33618     01 FA 05 F6 | 	mov	result1, #1
3361c     A4 04 90 FD | 	jmp	#LR__4993
33620                 | LR__4980
33620     04 4E 05 F1 | 	add	fp, #4
33624     A7 18 02 FB | 	rdlong	arg04, fp
33628     0C FB 01 F6 | 	mov	result1, arg04
3362c     04 4E 85 F1 | 	sub	fp, #4
33630     10 18 06 F1 | 	add	arg04, #16
33634     0C 19 C2 FA | 	rdbyte	arg04, arg04
33638     7F 18 06 F5 | 	and	arg04, #127
3363c     10 FA 05 F1 | 	add	result1, #16
33640     FD 18 42 FC | 	wrbyte	arg04, result1
33644                 | LR__4981
33644     18 4E 05 F1 | 	add	fp, #24
33648     A7 12 02 FB | 	rdlong	arg01, fp
3364c     14 4E 85 F1 | 	sub	fp, #20
33650     A7 14 02 FB | 	rdlong	arg02, fp
33654     04 4E 85 F1 | 	sub	fp, #4
33658     18 14 06 F1 | 	add	arg02, #24
3365c     0A 15 02 FB | 	rdlong	arg02, arg02
33660     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
33664     20 4E 05 F1 | 	add	fp, #32
33668     A7 FA 61 FC | 	wrlong	result1, fp
3366c     20 4E 85 F1 | 	sub	fp, #32
33670     00 FA 0D F2 | 	cmp	result1, #0 wz
33674     1C 00 90 5D |  if_ne	jmp	#LR__4982
33678     04 4E 05 F1 | 	add	fp, #4
3367c     A7 FA 01 FB | 	rdlong	result1, fp
33680     04 4E 85 F1 | 	sub	fp, #4
33684     11 FA 05 F1 | 	add	result1, #17
33688     FD 04 48 FC | 	wrbyte	#2, result1
3368c     02 FA 05 F6 | 	mov	result1, #2
33690     30 04 90 FD | 	jmp	#LR__4993
33694                 | LR__4982
33694     20 4E 05 F1 | 	add	fp, #32
33698     A7 FA 01 FB | 	rdlong	result1, fp
3369c     0C 4E 05 F1 | 	add	fp, #12
336a0     A7 26 02 FB | 	rdlong	local01, fp
336a4     13 FB 01 F1 | 	add	result1, local01
336a8     0C 4E 85 F1 | 	sub	fp, #12
336ac     A7 FA 61 FC | 	wrlong	result1, fp
336b0     14 4E 85 F1 | 	sub	fp, #20
336b4     A7 FA 01 FB | 	rdlong	result1, fp
336b8     09 FA 45 F0 | 	shr	result1, #9
336bc     1C 4E 05 F1 | 	add	fp, #28
336c0     A7 FA 61 FC | 	wrlong	result1, fp
336c4     28 4E 85 F1 | 	sub	fp, #40
336c8     01 FA 15 F2 | 	cmp	result1, #1 wc
336cc     60 01 90 CD |  if_b	jmp	#LR__4986
336d0     2C 4E 05 F1 | 	add	fp, #44
336d4     A7 FA 01 FB | 	rdlong	result1, fp
336d8     04 4E 85 F1 | 	sub	fp, #4
336dc     A7 18 02 FB | 	rdlong	arg04, fp
336e0     0C FB 01 F1 | 	add	result1, arg04
336e4     10 4E 85 F1 | 	sub	fp, #16
336e8     A7 18 02 FB | 	rdlong	arg04, fp
336ec     18 4E 85 F1 | 	sub	fp, #24
336f0     0A 18 06 F1 | 	add	arg04, #10
336f4     0C 19 E2 FA | 	rdword	arg04, arg04
336f8     0C FB 19 F2 | 	cmp	result1, arg04 wcz
336fc     28 00 90 ED |  if_be	jmp	#LR__4983
33700     18 4E 05 F1 | 	add	fp, #24
33704     A7 FA 01 FB | 	rdlong	result1, fp
33708     0A FA 05 F1 | 	add	result1, #10
3370c     FD FA E1 FA | 	rdword	result1, result1
33710     14 4E 05 F1 | 	add	fp, #20
33714     A7 18 02 FB | 	rdlong	arg04, fp
33718     0C FB 81 F1 | 	sub	result1, arg04
3371c     04 4E 85 F1 | 	sub	fp, #4
33720     A7 FA 61 FC | 	wrlong	result1, fp
33724     28 4E 85 F1 | 	sub	fp, #40
33728                 | LR__4983
33728     18 4E 05 F1 | 	add	fp, #24
3372c     A7 18 02 FB | 	rdlong	arg04, fp
33730     01 18 06 F1 | 	add	arg04, #1
33734     0C 13 C2 FA | 	rdbyte	arg01, arg04
33738     18 4E 05 F1 | 	add	fp, #24
3373c     A7 14 02 FB | 	rdlong	arg02, fp
33740     10 4E 85 F1 | 	sub	fp, #16
33744     A7 16 02 FB | 	rdlong	arg03, fp
33748     08 4E 05 F1 | 	add	fp, #8
3374c     A7 18 02 FB | 	rdlong	arg04, fp
33750     28 4E 85 F1 | 	sub	fp, #40
33754     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
33758     00 FA 0D F2 | 	cmp	result1, #0 wz
3375c     1C 00 90 AD |  if_e	jmp	#LR__4984
33760     04 4E 05 F1 | 	add	fp, #4
33764     A7 26 02 FB | 	rdlong	local01, fp
33768     04 4E 85 F1 | 	sub	fp, #4
3376c     11 26 06 F1 | 	add	local01, #17
33770     13 03 48 FC | 	wrbyte	#1, local01
33774     01 FA 05 F6 | 	mov	result1, #1
33778     48 03 90 FD | 	jmp	#LR__4993
3377c                 | LR__4984
3377c     04 4E 05 F1 | 	add	fp, #4
33780     A7 FA 01 FB | 	rdlong	result1, fp
33784     1C FA 05 F1 | 	add	result1, #28
33788     FD FA 01 FB | 	rdlong	result1, result1
3378c     1C 4E 05 F1 | 	add	fp, #28
33790     A7 28 02 FB | 	rdlong	local02, fp
33794     14 FB 81 F1 | 	sub	result1, local02
33798     08 4E 05 F1 | 	add	fp, #8
3379c     A7 18 02 FB | 	rdlong	arg04, fp
337a0     28 4E 85 F1 | 	sub	fp, #40
337a4     0C FB 11 F2 | 	cmp	result1, arg04 wc
337a8     68 00 90 3D |  if_ae	jmp	#LR__4985
337ac     04 4E 05 F1 | 	add	fp, #4
337b0     A7 12 02 FB | 	rdlong	arg01, fp
337b4     28 12 06 F1 | 	add	arg01, #40
337b8     2C 4E 05 F1 | 	add	fp, #44
337bc     A7 14 02 FB | 	rdlong	arg02, fp
337c0     2C 4E 85 F1 | 	sub	fp, #44
337c4     A7 FA 01 FB | 	rdlong	result1, fp
337c8     1C FA 05 F1 | 	add	result1, #28
337cc     FD 2A 02 FB | 	rdlong	local03, result1
337d0     1C 4E 05 F1 | 	add	fp, #28
337d4     A7 18 02 FB | 	rdlong	arg04, fp
337d8     20 4E 85 F1 | 	sub	fp, #32
337dc     0C 2B 82 F1 | 	sub	local03, arg04
337e0     09 2A 66 F0 | 	shl	local03, #9
337e4     15 15 02 F1 | 	add	arg02, local03
337e8     09 16 C6 F9 | 	decod	arg03, #9
337ec     78 3B BF FD | 	call	#__system____builtin_memmove
337f0     04 4E 05 F1 | 	add	fp, #4
337f4     A7 18 02 FB | 	rdlong	arg04, fp
337f8     0C FB 01 F6 | 	mov	result1, arg04
337fc     04 4E 85 F1 | 	sub	fp, #4
33800     10 18 06 F1 | 	add	arg04, #16
33804     0C 19 C2 FA | 	rdbyte	arg04, arg04
33808     7F 18 06 F5 | 	and	arg04, #127
3380c     10 FA 05 F1 | 	add	result1, #16
33810     FD 18 42 FC | 	wrbyte	arg04, result1
33814                 | LR__4985
33814     28 4E 05 F1 | 	add	fp, #40
33818     A7 FA 01 FB | 	rdlong	result1, fp
3381c     09 FA 65 F0 | 	shl	result1, #9
33820     04 4E 85 F1 | 	sub	fp, #4
33824     A7 FA 61 FC | 	wrlong	result1, fp
33828     24 4E 85 F1 | 	sub	fp, #36
3382c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
3382c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
3382c                 | ' 				}
3382c                 | ' 
3382c                 | ' 
3382c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
3382c                 | ' 				continue;
3382c     74 01 90 FD | 	jmp	#LR__4989
33830                 | LR__4986
33830     04 4E 05 F1 | 	add	fp, #4
33834     A7 28 02 FB | 	rdlong	local02, fp
33838     1C 28 06 F1 | 	add	local02, #28
3383c     14 FB 01 FB | 	rdlong	result1, local02
33840     1C 4E 05 F1 | 	add	fp, #28
33844     A7 28 02 FB | 	rdlong	local02, fp
33848     20 4E 85 F1 | 	sub	fp, #32
3384c     14 FB 09 F2 | 	cmp	result1, local02 wz
33850     90 00 90 AD |  if_e	jmp	#LR__4987
33854     04 4E 05 F1 | 	add	fp, #4
33858     A7 FA 01 FB | 	rdlong	result1, fp
3385c     FD 2A 02 F6 | 	mov	local03, result1
33860     04 4E 85 F1 | 	sub	fp, #4
33864     14 2A 06 F1 | 	add	local03, #20
33868     15 2B 02 FB | 	rdlong	local03, local03
3386c     0C FA 05 F1 | 	add	result1, #12
33870     FD 2C 02 FB | 	rdlong	local04, result1
33874     16 2F 02 F6 | 	mov	local05, local04
33878     17 2B 12 F2 | 	cmp	local03, local05 wc
3387c     64 00 90 3D |  if_ae	jmp	#LR__4987
33880     18 4E 05 F1 | 	add	fp, #24
33884     A7 18 02 FB | 	rdlong	arg04, fp
33888     01 18 06 F1 | 	add	arg04, #1
3388c     0C 13 C2 FA | 	rdbyte	arg01, arg04
33890     14 4E 85 F1 | 	sub	fp, #20
33894     A7 30 02 FB | 	rdlong	local06, fp
33898     28 30 06 F1 | 	add	local06, #40
3389c     18 33 02 F6 | 	mov	local07, local06
338a0     1C 4E 05 F1 | 	add	fp, #28
338a4     A7 34 02 FB | 	rdlong	local08, fp
338a8     20 4E 85 F1 | 	sub	fp, #32
338ac     01 36 06 F6 | 	mov	local09, #1
338b0     19 15 02 F6 | 	mov	arg02, local07
338b4     1A 17 02 F6 | 	mov	arg03, local08
338b8     01 18 06 F6 | 	mov	arg04, #1
338bc     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
338c0     FD 38 0A F6 | 	mov	local10, result1 wz
338c4     1C 00 90 AD |  if_e	jmp	#LR__4987
338c8     04 4E 05 F1 | 	add	fp, #4
338cc     A7 38 02 FB | 	rdlong	local10, fp
338d0     04 4E 85 F1 | 	sub	fp, #4
338d4     11 38 06 F1 | 	add	local10, #17
338d8     1C 03 48 FC | 	wrbyte	#1, local10
338dc                 | ' 				fp->fptr < fp->obj.objsize &&
338dc                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
338dc                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
338dc     01 FA 05 F6 | 	mov	result1, #1
338e0     E0 01 90 FD | 	jmp	#LR__4993
338e4                 | LR__4987
338e4     04 4E 05 F1 | 	add	fp, #4
338e8     A7 18 02 FB | 	rdlong	arg04, fp
338ec     1C 4E 05 F1 | 	add	fp, #28
338f0     A7 FA 01 FB | 	rdlong	result1, fp
338f4     20 4E 85 F1 | 	sub	fp, #32
338f8     1C 18 06 F1 | 	add	arg04, #28
338fc     0C FB 61 FC | 	wrlong	result1, arg04
33900                 | LR__4988
33900     04 4E 05 F1 | 	add	fp, #4
33904     A7 FA 01 FB | 	rdlong	result1, fp
33908     14 FA 05 F1 | 	add	result1, #20
3390c     FD FA 01 FB | 	rdlong	result1, result1
33910     FF FB 05 F5 | 	and	result1, #511
33914     09 3A C6 F9 | 	decod	local11, #9
33918     FD 3A 82 F1 | 	sub	local11, result1
3391c     20 4E 05 F1 | 	add	fp, #32
33920     A7 3A 62 FC | 	wrlong	local11, fp
33924     18 4E 85 F1 | 	sub	fp, #24
33928     A7 FA 01 FB | 	rdlong	result1, fp
3392c     0C 4E 85 F1 | 	sub	fp, #12
33930     FD 3A 1A F2 | 	cmp	local11, result1 wcz
33934     0C 4E 05 11 |  if_a	add	fp, #12
33938     A7 3A 02 1B |  if_a	rdlong	local11, fp
3393c     18 4E 05 11 |  if_a	add	fp, #24
33940     A7 3A 62 1C |  if_a	wrlong	local11, fp
33944     24 4E 85 11 |  if_a	sub	fp, #36
33948     04 4E 05 F1 | 	add	fp, #4
3394c     A7 3A 02 FB | 	rdlong	local11, fp
33950     1D 13 02 F6 | 	mov	arg01, local11
33954     28 12 06 F1 | 	add	arg01, #40
33958     14 3A 06 F1 | 	add	local11, #20
3395c     1D 3B 02 FB | 	rdlong	local11, local11
33960     FF 3B 06 F5 | 	and	local11, #511
33964     1D 13 02 F1 | 	add	arg01, local11
33968     2C 4E 05 F1 | 	add	fp, #44
3396c     A7 14 02 FB | 	rdlong	arg02, fp
33970     0C 4E 85 F1 | 	sub	fp, #12
33974     A7 16 02 FB | 	rdlong	arg03, fp
33978     24 4E 85 F1 | 	sub	fp, #36
3397c     E8 39 BF FD | 	call	#__system____builtin_memmove
33980     04 4E 05 F1 | 	add	fp, #4
33984     A7 FA 01 FB | 	rdlong	result1, fp
33988     FD 3A 02 F6 | 	mov	local11, result1
3398c     04 4E 85 F1 | 	sub	fp, #4
33990     10 FA 05 F1 | 	add	result1, #16
33994     FD FA C1 FA | 	rdbyte	result1, result1
33998     80 FA 45 F5 | 	or	result1, #128
3399c     10 3A 06 F1 | 	add	local11, #16
339a0     1D FB 41 FC | 	wrbyte	result1, local11
339a4                 | LR__4989
339a4     0C 4E 05 F1 | 	add	fp, #12
339a8     A7 3A 02 FB | 	rdlong	local11, fp
339ac     18 4E 05 F1 | 	add	fp, #24
339b0     A7 FA 01 FB | 	rdlong	result1, fp
339b4     FD 3A 82 F1 | 	sub	local11, result1
339b8     18 4E 85 F1 | 	sub	fp, #24
339bc     A7 3A 62 FC | 	wrlong	local11, fp
339c0     04 4E 05 F1 | 	add	fp, #4
339c4     A7 3C 02 FB | 	rdlong	local12, fp
339c8     1E 3B 02 FB | 	rdlong	local11, local12
339cc     14 4E 05 F1 | 	add	fp, #20
339d0     A7 3E 02 FB | 	rdlong	local13, fp
339d4     1F 3B 02 F1 | 	add	local11, local13
339d8     1E 3B 62 FC | 	wrlong	local11, local12
339dc     0C 4E 05 F1 | 	add	fp, #12
339e0     A7 3A 02 FB | 	rdlong	local11, fp
339e4     0C 4E 85 F1 | 	sub	fp, #12
339e8     A7 40 02 FB | 	rdlong	local14, fp
339ec     20 3B 02 F1 | 	add	local11, local14
339f0     0C 4E 05 F1 | 	add	fp, #12
339f4     A7 3A 62 FC | 	wrlong	local11, fp
339f8     2C 4E 85 F1 | 	sub	fp, #44
339fc     A7 42 02 FB | 	rdlong	local15, fp
33a00     21 3B 02 F6 | 	mov	local11, local15
33a04     14 42 06 F1 | 	add	local15, #20
33a08     21 43 02 FB | 	rdlong	local15, local15
33a0c     20 4E 05 F1 | 	add	fp, #32
33a10     A7 44 02 FB | 	rdlong	local16, fp
33a14     22 43 02 F1 | 	add	local15, local16
33a18     14 3A 06 F1 | 	add	local11, #20
33a1c     1D 43 62 FC | 	wrlong	local15, local11
33a20     20 4E 85 F1 | 	sub	fp, #32
33a24     A7 46 02 FB | 	rdlong	local17, fp
33a28     23 3B 02 F6 | 	mov	local11, local17
33a2c     23 49 02 F6 | 	mov	local18, local17
33a30     04 4E 85 F1 | 	sub	fp, #4
33a34     14 46 06 F1 | 	add	local17, #20
33a38     23 4B 02 FB | 	rdlong	local19, local17
33a3c     0C 48 06 F1 | 	add	local18, #12
33a40     24 4D 02 FB | 	rdlong	local20, local18
33a44     26 4B 1A F2 | 	cmp	local19, local20 wcz
33a48     24 00 90 ED |  if_be	jmp	#LR__4990
33a4c     04 4E 05 F1 | 	add	fp, #4
33a50     A7 2E 02 FB | 	rdlong	local05, fp
33a54     04 4E 85 F1 | 	sub	fp, #4
33a58     17 2B 02 F6 | 	mov	local03, local05
33a5c     14 2A 06 F1 | 	add	local03, #20
33a60     15 2D 02 FB | 	rdlong	local04, local03
33a64     14 2A 86 F1 | 	sub	local03, #20
33a68     16 4F 02 F6 | 	mov	local21, local04
33a6c     20 00 90 FD | 	jmp	#LR__4991
33a70                 | LR__4990
33a70     04 4E 05 F1 | 	add	fp, #4
33a74     A7 32 02 FB | 	rdlong	local07, fp
33a78     04 4E 85 F1 | 	sub	fp, #4
33a7c     19 39 02 F6 | 	mov	local10, local07
33a80     0C 38 06 F1 | 	add	local10, #12
33a84     1C 35 02 FB | 	rdlong	local08, local10
33a88     0C 38 86 F1 | 	sub	local10, #12
33a8c     1A 4F 02 F6 | 	mov	local21, local08
33a90                 | LR__4991
33a90     0C 3A 06 F1 | 	add	local11, #12
33a94     1D 4F 62 FC | 	wrlong	local21, local11
33a98     5C F9 9F FD | 	jmp	#LR__4973
33a9c                 | LR__4992
33a9c     04 4E 05 F1 | 	add	fp, #4
33aa0     A7 3C 02 FB | 	rdlong	local12, fp
33aa4     1E 27 02 F6 | 	mov	local01, local12
33aa8     04 4E 85 F1 | 	sub	fp, #4
33aac     10 3C 06 F1 | 	add	local12, #16
33ab0     1E 3B C2 FA | 	rdbyte	local11, local12
33ab4     40 3A 46 F5 | 	or	local11, #64
33ab8     10 26 06 F1 | 	add	local01, #16
33abc     13 3B 42 FC | 	wrbyte	local11, local01
33ac0                 | ' 
33ac0                 | ' 
33ac0                 | ' 
33ac0                 | ' 
33ac0                 | ' 
33ac0                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
33ac0                 | ' 		fp->flag |=  0x80 ;
33ac0                 | ' 
33ac0                 | ' 	}
33ac0                 | ' 
33ac0                 | ' 	fp->flag |=  0x40 ;
33ac0                 | ' 
33ac0                 | ' 	return FR_OK ;
33ac0     00 FA 05 F6 | 	mov	result1, #0
33ac4                 | LR__4993
33ac4     A7 F0 03 F6 | 	mov	ptra, fp
33ac8     B2 00 A0 FD | 	call	#popregs_
33acc                 | _fatfs_cc_f_write_ret
33acc     2D 00 64 FD | 	ret
33ad0                 | 
33ad0                 | _fatfs_cc_f_sync
33ad0     00 4A 05 F6 | 	mov	COUNT_, #0
33ad4     A8 00 A0 FD | 	call	#pushregs_
33ad8     18 F0 07 F1 | 	add	ptra, #24
33adc     04 4E 05 F1 | 	add	fp, #4
33ae0     A7 12 62 FC | 	wrlong	arg01, fp
33ae4     08 4E 05 F1 | 	add	fp, #8
33ae8     A7 14 02 F6 | 	mov	arg02, fp
33aec     0C 4E 85 F1 | 	sub	fp, #12
33af0     D0 E8 BF FD | 	call	#_fatfs_cc_validate
33af4     08 4E 05 F1 | 	add	fp, #8
33af8     A7 FA 61 FC | 	wrlong	result1, fp
33afc     08 4E 85 F1 | 	sub	fp, #8
33b00     00 FA 0D F2 | 	cmp	result1, #0 wz
33b04     C0 01 90 5D |  if_ne	jmp	#LR__5003
33b08     04 4E 05 F1 | 	add	fp, #4
33b0c     A7 18 02 FB | 	rdlong	arg04, fp
33b10     04 4E 85 F1 | 	sub	fp, #4
33b14     10 18 06 F1 | 	add	arg04, #16
33b18     0C 19 C2 FA | 	rdbyte	arg04, arg04
33b1c     40 18 CE F7 | 	test	arg04, #64 wz
33b20     A4 01 90 AD |  if_e	jmp	#LR__5002
33b24     04 4E 05 F1 | 	add	fp, #4
33b28     A7 18 02 FB | 	rdlong	arg04, fp
33b2c     04 4E 85 F1 | 	sub	fp, #4
33b30     10 18 06 F1 | 	add	arg04, #16
33b34     0C 19 C2 FA | 	rdbyte	arg04, arg04
33b38     80 18 CE F7 | 	test	arg04, #128 wz
33b3c     64 00 90 AD |  if_e	jmp	#LR__5000
33b40     0C 4E 05 F1 | 	add	fp, #12
33b44     A7 18 02 FB | 	rdlong	arg04, fp
33b48     01 18 06 F1 | 	add	arg04, #1
33b4c     0C 13 C2 FA | 	rdbyte	arg01, arg04
33b50     08 4E 85 F1 | 	sub	fp, #8
33b54     A7 18 02 FB | 	rdlong	arg04, fp
33b58     0C 15 02 F6 | 	mov	arg02, arg04
33b5c     28 14 06 F1 | 	add	arg02, #40
33b60     04 4E 85 F1 | 	sub	fp, #4
33b64     1C 18 06 F1 | 	add	arg04, #28
33b68     0C 17 02 FB | 	rdlong	arg03, arg04
33b6c     01 18 06 F6 | 	mov	arg04, #1
33b70     0C AE BF FD | 	call	#_fatfs_cc_disk_write
33b74     00 FA 0D F2 | 	cmp	result1, #0 wz
33b78     01 FA 05 56 |  if_ne	mov	result1, #1
33b7c     54 01 90 5D |  if_ne	jmp	#LR__5004
33b80     04 4E 05 F1 | 	add	fp, #4
33b84     A7 18 02 FB | 	rdlong	arg04, fp
33b88     0C 17 02 F6 | 	mov	arg03, arg04
33b8c     04 4E 85 F1 | 	sub	fp, #4
33b90     10 18 06 F1 | 	add	arg04, #16
33b94     0C 19 C2 FA | 	rdbyte	arg04, arg04
33b98     7F 18 06 F5 | 	and	arg04, #127
33b9c     10 16 06 F1 | 	add	arg03, #16
33ba0     0B 19 42 FC | 	wrbyte	arg04, arg03
33ba4                 | LR__5000
33ba4     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
33ba8     10 4E 05 F1 | 	add	fp, #16
33bac     A7 FA 61 FC | 	wrlong	result1, fp
33bb0     04 4E 85 F1 | 	sub	fp, #4
33bb4     A7 12 02 FB | 	rdlong	arg01, fp
33bb8     08 4E 85 F1 | 	sub	fp, #8
33bbc     A7 18 02 FB | 	rdlong	arg04, fp
33bc0     04 4E 85 F1 | 	sub	fp, #4
33bc4     20 18 06 F1 | 	add	arg04, #32
33bc8     0C 15 02 FB | 	rdlong	arg02, arg04
33bcc     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
33bd0     08 4E 05 F1 | 	add	fp, #8
33bd4     A7 FA 61 FC | 	wrlong	result1, fp
33bd8     08 4E 85 F1 | 	sub	fp, #8
33bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
33be0     E4 00 90 5D |  if_ne	jmp	#LR__5001
33be4     04 4E 05 F1 | 	add	fp, #4
33be8     A7 18 02 FB | 	rdlong	arg04, fp
33bec     24 18 06 F1 | 	add	arg04, #36
33bf0     0C 19 02 FB | 	rdlong	arg04, arg04
33bf4     10 4E 05 F1 | 	add	fp, #16
33bf8     A7 18 62 FC | 	wrlong	arg04, fp
33bfc     0C 17 02 F6 | 	mov	arg03, arg04
33c00     0B 16 06 F1 | 	add	arg03, #11
33c04     0B 17 C2 FA | 	rdbyte	arg03, arg03
33c08     20 16 46 F5 | 	or	arg03, #32
33c0c     0B 18 06 F1 | 	add	arg04, #11
33c10     0C 17 42 FC | 	wrbyte	arg03, arg04
33c14     10 4E 85 F1 | 	sub	fp, #16
33c18     A7 18 02 FB | 	rdlong	arg04, fp
33c1c     0C 13 02 FB | 	rdlong	arg01, arg04
33c20     10 4E 05 F1 | 	add	fp, #16
33c24     A7 14 02 FB | 	rdlong	arg02, fp
33c28     14 4E 85 F1 | 	sub	fp, #20
33c2c     08 18 06 F1 | 	add	arg04, #8
33c30     0C 17 02 FB | 	rdlong	arg03, arg04
33c34     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
33c38     14 4E 05 F1 | 	add	fp, #20
33c3c     A7 12 02 FB | 	rdlong	arg01, fp
33c40     1C 12 06 F1 | 	add	arg01, #28
33c44     10 4E 85 F1 | 	sub	fp, #16
33c48     A7 18 02 FB | 	rdlong	arg04, fp
33c4c     0C 18 06 F1 | 	add	arg04, #12
33c50     0C 15 02 FB | 	rdlong	arg02, arg04
33c54     09 15 62 FC | 	wrlong	arg02, arg01
33c58     10 4E 05 F1 | 	add	fp, #16
33c5c     A7 12 02 FB | 	rdlong	arg01, fp
33c60     16 12 06 F1 | 	add	arg01, #22
33c64     04 4E 85 F1 | 	sub	fp, #4
33c68     A7 14 02 FB | 	rdlong	arg02, fp
33c6c     09 15 62 FC | 	wrlong	arg02, arg01
33c70     04 4E 05 F1 | 	add	fp, #4
33c74     A7 12 02 FB | 	rdlong	arg01, fp
33c78     12 12 06 F1 | 	add	arg01, #18
33c7c     09 01 58 FC | 	wrword	#0, arg01
33c80     08 4E 85 F1 | 	sub	fp, #8
33c84     A7 18 02 FB | 	rdlong	arg04, fp
33c88     03 18 06 F1 | 	add	arg04, #3
33c8c     0C 03 48 FC | 	wrbyte	#1, arg04
33c90     A7 12 02 FB | 	rdlong	arg01, fp
33c94     0C 4E 85 F1 | 	sub	fp, #12
33c98     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
33c9c     08 4E 05 F1 | 	add	fp, #8
33ca0     A7 FA 61 FC | 	wrlong	result1, fp
33ca4     04 4E 85 F1 | 	sub	fp, #4
33ca8     A7 18 02 FB | 	rdlong	arg04, fp
33cac     0C 17 02 F6 | 	mov	arg03, arg04
33cb0     04 4E 85 F1 | 	sub	fp, #4
33cb4     10 18 06 F1 | 	add	arg04, #16
33cb8     0C 19 C2 FA | 	rdbyte	arg04, arg04
33cbc     BF 18 06 F5 | 	and	arg04, #191
33cc0     10 16 06 F1 | 	add	arg03, #16
33cc4     0B 19 42 FC | 	wrbyte	arg04, arg03
33cc8                 | LR__5001
33cc8                 | LR__5002
33cc8                 | LR__5003
33cc8                 | ' 					dir = fp->dir_ptr;
33cc8                 | ' 					dir[ 11 ] |=  0x20 ;
33cc8                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
33cc8                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
33cc8                 | ' 					st_dword(dir +  22 , tm);
33cc8                 | ' 					st_word(dir +  18 , 0);
33cc8                 | ' 					fs->wflag = 1;
33cc8                 | ' 					res = sync_fs(fs);
33cc8                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
33cc8                 | ' 				}
33cc8                 | ' 			}
33cc8                 | ' 		}
33cc8                 | ' 	}
33cc8                 | ' 
33cc8                 | ' 	return res ;
33cc8     08 4E 05 F1 | 	add	fp, #8
33ccc     A7 FA 01 FB | 	rdlong	result1, fp
33cd0     08 4E 85 F1 | 	sub	fp, #8
33cd4                 | LR__5004
33cd4     A7 F0 03 F6 | 	mov	ptra, fp
33cd8     B2 00 A0 FD | 	call	#popregs_
33cdc                 | _fatfs_cc_f_sync_ret
33cdc     2D 00 64 FD | 	ret
33ce0                 | 
33ce0                 | _fatfs_cc_f_close
33ce0     01 4A 05 F6 | 	mov	COUNT_, #1
33ce4     A8 00 A0 FD | 	call	#pushregs_
33ce8     10 F0 07 F1 | 	add	ptra, #16
33cec     04 4E 05 F1 | 	add	fp, #4
33cf0     A7 12 62 FC | 	wrlong	arg01, fp
33cf4     04 4E 85 F1 | 	sub	fp, #4
33cf8     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
33cfc     08 4E 05 F1 | 	add	fp, #8
33d00     A7 FA 61 FC | 	wrlong	result1, fp
33d04     08 4E 85 F1 | 	sub	fp, #8
33d08     00 FA 0D F2 | 	cmp	result1, #0 wz
33d0c     38 00 90 5D |  if_ne	jmp	#LR__5010
33d10     04 4E 05 F1 | 	add	fp, #4
33d14     A7 12 02 FB | 	rdlong	arg01, fp
33d18     08 4E 05 F1 | 	add	fp, #8
33d1c     A7 14 02 F6 | 	mov	arg02, fp
33d20     0C 4E 85 F1 | 	sub	fp, #12
33d24     9C E6 BF FD | 	call	#_fatfs_cc_validate
33d28     08 4E 05 F1 | 	add	fp, #8
33d2c     A7 FA 61 FC | 	wrlong	result1, fp
33d30     08 4E 85 F1 | 	sub	fp, #8
33d34     00 FA 0D F2 | 	cmp	result1, #0 wz
33d38     04 4E 05 A1 |  if_e	add	fp, #4
33d3c     A7 26 02 AB |  if_e	rdlong	local01, fp
33d40     04 4E 85 A1 |  if_e	sub	fp, #4
33d44     13 01 68 AC |  if_e	wrlong	#0, local01
33d48                 | LR__5010
33d48                 | ' 
33d48                 | ' 
33d48                 | ' 
33d48                 | ' 
33d48                 | ' 			fp->obj.fs = 0;
33d48                 | ' #line 4192 "ff.c"
33d48                 | ' 		}
33d48                 | ' 	}
33d48                 | ' 	return res;
33d48     08 4E 05 F1 | 	add	fp, #8
33d4c     A7 FA 01 FB | 	rdlong	result1, fp
33d50     08 4E 85 F1 | 	sub	fp, #8
33d54     A7 F0 03 F6 | 	mov	ptra, fp
33d58     B2 00 A0 FD | 	call	#popregs_
33d5c                 | _fatfs_cc_f_close_ret
33d5c     2D 00 64 FD | 	ret
33d60                 | 
33d60                 | _fatfs_cc_f_lseek
33d60     00 4A 05 F6 | 	mov	COUNT_, #0
33d64     A8 00 A0 FD | 	call	#pushregs_
33d68     24 F0 07 F1 | 	add	ptra, #36
33d6c     04 4E 05 F1 | 	add	fp, #4
33d70     A7 12 62 FC | 	wrlong	arg01, fp
33d74     04 4E 05 F1 | 	add	fp, #4
33d78     A7 14 62 FC | 	wrlong	arg02, fp
33d7c     04 4E 85 F1 | 	sub	fp, #4
33d80     A7 12 02 FB | 	rdlong	arg01, fp
33d84     0C 4E 05 F1 | 	add	fp, #12
33d88     A7 14 02 F6 | 	mov	arg02, fp
33d8c     10 4E 85 F1 | 	sub	fp, #16
33d90     30 E6 BF FD | 	call	#_fatfs_cc_validate
33d94     0C 4E 05 F1 | 	add	fp, #12
33d98     A7 FA 61 FC | 	wrlong	result1, fp
33d9c     0C 4E 85 F1 | 	sub	fp, #12
33da0     00 FA 0D F2 | 	cmp	result1, #0 wz
33da4     1C 00 90 5D |  if_ne	jmp	#LR__5020
33da8     04 4E 05 F1 | 	add	fp, #4
33dac     A7 18 02 FB | 	rdlong	arg04, fp
33db0     11 18 06 F1 | 	add	arg04, #17
33db4     0C 19 C2 FA | 	rdbyte	arg04, arg04
33db8     08 4E 05 F1 | 	add	fp, #8
33dbc     A7 18 62 FC | 	wrlong	arg04, fp
33dc0     0C 4E 85 F1 | 	sub	fp, #12
33dc4                 | LR__5020
33dc4     0C 4E 05 F1 | 	add	fp, #12
33dc8     A7 18 0A FB | 	rdlong	arg04, fp wz
33dcc     0C 4E 85 F1 | 	sub	fp, #12
33dd0     0C 4E 05 51 |  if_ne	add	fp, #12
33dd4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
33dd8     0C 4E 85 51 |  if_ne	sub	fp, #12
33ddc     40 06 90 5D |  if_ne	jmp	#LR__5043
33de0     04 4E 05 F1 | 	add	fp, #4
33de4     A7 18 02 FB | 	rdlong	arg04, fp
33de8     04 4E 05 F1 | 	add	fp, #4
33dec     A7 16 02 FB | 	rdlong	arg03, fp
33df0     08 4E 85 F1 | 	sub	fp, #8
33df4     0C 18 06 F1 | 	add	arg04, #12
33df8     0C 19 02 FB | 	rdlong	arg04, arg04
33dfc     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33e00     3C 00 90 ED |  if_be	jmp	#LR__5021
33e04     04 4E 05 F1 | 	add	fp, #4
33e08     A7 16 02 FB | 	rdlong	arg03, fp
33e0c     04 4E 85 F1 | 	sub	fp, #4
33e10     10 16 06 F1 | 	add	arg03, #16
33e14     0B 17 C2 FA | 	rdbyte	arg03, arg03
33e18     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
33e1c     02 16 CE F7 | 	test	arg03, #2 wz
33e20     1C 00 90 5D |  if_ne	jmp	#LR__5021
33e24     04 4E 05 F1 | 	add	fp, #4
33e28     A7 16 02 FB | 	rdlong	arg03, fp
33e2c     0C 16 06 F1 | 	add	arg03, #12
33e30     0B 17 02 FB | 	rdlong	arg03, arg03
33e34     04 4E 05 F1 | 	add	fp, #4
33e38     A7 16 62 FC | 	wrlong	arg03, fp
33e3c     08 4E 85 F1 | 	sub	fp, #8
33e40                 | LR__5021
33e40     04 4E 05 F1 | 	add	fp, #4
33e44     A7 16 02 FB | 	rdlong	arg03, fp
33e48     14 16 06 F1 | 	add	arg03, #20
33e4c     0B 17 02 FB | 	rdlong	arg03, arg03
33e50     1C 4E 05 F1 | 	add	fp, #28
33e54     A7 16 62 FC | 	wrlong	arg03, fp
33e58     1C 4E 85 F1 | 	sub	fp, #28
33e5c     A7 16 02 FB | 	rdlong	arg03, fp
33e60     18 4E 05 F1 | 	add	fp, #24
33e64     A7 00 68 FC | 	wrlong	#0, fp
33e68     14 16 06 F1 | 	add	arg03, #20
33e6c     0B 01 68 FC | 	wrlong	#0, arg03
33e70     14 4E 85 F1 | 	sub	fp, #20
33e74     A7 16 02 FB | 	rdlong	arg03, fp
33e78     08 4E 85 F1 | 	sub	fp, #8
33e7c     01 16 16 F2 | 	cmp	arg03, #1 wc
33e80     E4 03 90 CD |  if_b	jmp	#LR__5037
33e84     10 4E 05 F1 | 	add	fp, #16
33e88     A7 16 02 FB | 	rdlong	arg03, fp
33e8c     0A 16 06 F1 | 	add	arg03, #10
33e90     0B 19 E2 FA | 	rdword	arg04, arg03
33e94     09 18 66 F0 | 	shl	arg04, #9
33e98     08 4E 05 F1 | 	add	fp, #8
33e9c     A7 18 62 FC | 	wrlong	arg04, fp
33ea0     08 4E 05 F1 | 	add	fp, #8
33ea4     A7 18 02 FB | 	rdlong	arg04, fp
33ea8     20 4E 85 F1 | 	sub	fp, #32
33eac     01 18 16 F2 | 	cmp	arg04, #1 wc
33eb0     AC 00 90 CD |  if_b	jmp	#LR__5022
33eb4     08 4E 05 F1 | 	add	fp, #8
33eb8     A7 18 02 FB | 	rdlong	arg04, fp
33ebc     01 18 86 F1 | 	sub	arg04, #1
33ec0     10 4E 05 F1 | 	add	fp, #16
33ec4     A7 16 02 FB | 	rdlong	arg03, fp
33ec8     0B 19 12 FD | 	qdiv	arg04, arg03
33ecc     08 4E 05 F1 | 	add	fp, #8
33ed0     A7 FA 01 FB | 	rdlong	result1, fp
33ed4     01 FA 85 F1 | 	sub	result1, #1
33ed8     18 18 62 FD | 	getqx	arg04
33edc     0B FB 11 FD | 	qdiv	result1, arg03
33ee0     20 4E 85 F1 | 	sub	fp, #32
33ee4     18 16 62 FD | 	getqx	arg03
33ee8     0B 19 12 F2 | 	cmp	arg04, arg03 wc
33eec     70 00 90 CD |  if_b	jmp	#LR__5022
33ef0     04 4E 05 F1 | 	add	fp, #4
33ef4     A7 16 02 FB | 	rdlong	arg03, fp
33ef8     1C 4E 05 F1 | 	add	fp, #28
33efc     A7 FA 01 FB | 	rdlong	result1, fp
33f00     01 FA 85 F1 | 	sub	result1, #1
33f04     08 4E 85 F1 | 	sub	fp, #8
33f08     A7 18 02 FB | 	rdlong	arg04, fp
33f0c     01 18 86 F1 | 	sub	arg04, #1
33f10     0C FB 21 F5 | 	andn	result1, arg04
33f14     14 16 06 F1 | 	add	arg03, #20
33f18     0B FB 61 FC | 	wrlong	result1, arg03
33f1c     10 4E 85 F1 | 	sub	fp, #16
33f20     A7 16 02 FB | 	rdlong	arg03, fp
33f24     04 4E 85 F1 | 	sub	fp, #4
33f28     A7 18 02 FB | 	rdlong	arg04, fp
33f2c     14 18 06 F1 | 	add	arg04, #20
33f30     0C 19 02 FB | 	rdlong	arg04, arg04
33f34     0C 17 82 F1 | 	sub	arg03, arg04
33f38     04 4E 05 F1 | 	add	fp, #4
33f3c     A7 16 62 FC | 	wrlong	arg03, fp
33f40     04 4E 85 F1 | 	sub	fp, #4
33f44     A7 16 02 FB | 	rdlong	arg03, fp
33f48     18 16 06 F1 | 	add	arg03, #24
33f4c     0B 17 02 FB | 	rdlong	arg03, arg03
33f50     10 4E 05 F1 | 	add	fp, #16
33f54     A7 16 62 FC | 	wrlong	arg03, fp
33f58     14 4E 85 F1 | 	sub	fp, #20
33f5c     D0 00 90 FD | 	jmp	#LR__5026
33f60                 | LR__5022
33f60     04 4E 05 F1 | 	add	fp, #4
33f64     A7 16 02 FB | 	rdlong	arg03, fp
33f68     08 16 06 F1 | 	add	arg03, #8
33f6c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
33f70     10 4E 05 F1 | 	add	fp, #16
33f74     A7 16 62 FC | 	wrlong	arg03, fp
33f78     14 4E 85 F1 | 	sub	fp, #20
33f7c     94 00 90 5D |  if_ne	jmp	#LR__5025
33f80     04 4E 05 F1 | 	add	fp, #4
33f84     A7 12 02 FB | 	rdlong	arg01, fp
33f88     04 4E 85 F1 | 	sub	fp, #4
33f8c     00 14 06 F6 | 	mov	arg02, #0
33f90     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
33f94     14 4E 05 F1 | 	add	fp, #20
33f98     A7 FA 61 FC | 	wrlong	result1, fp
33f9c     14 4E 85 F1 | 	sub	fp, #20
33fa0     01 FA 0D F2 | 	cmp	result1, #1 wz
33fa4     1C 00 90 5D |  if_ne	jmp	#LR__5023
33fa8     04 4E 05 F1 | 	add	fp, #4
33fac     A7 16 02 FB | 	rdlong	arg03, fp
33fb0     04 4E 85 F1 | 	sub	fp, #4
33fb4     11 16 06 F1 | 	add	arg03, #17
33fb8     0B 05 48 FC | 	wrbyte	#2, arg03
33fbc     02 FA 05 F6 | 	mov	result1, #2
33fc0     5C 04 90 FD | 	jmp	#LR__5043
33fc4                 | LR__5023
33fc4     14 4E 05 F1 | 	add	fp, #20
33fc8     A7 FA 01 FB | 	rdlong	result1, fp
33fcc     14 4E 85 F1 | 	sub	fp, #20
33fd0     FF FF 7F FF 
33fd4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
33fd8     1C 00 90 5D |  if_ne	jmp	#LR__5024
33fdc     04 4E 05 F1 | 	add	fp, #4
33fe0     A7 16 02 FB | 	rdlong	arg03, fp
33fe4     04 4E 85 F1 | 	sub	fp, #4
33fe8     11 16 06 F1 | 	add	arg03, #17
33fec     0B 03 48 FC | 	wrbyte	#1, arg03
33ff0     01 FA 05 F6 | 	mov	result1, #1
33ff4     28 04 90 FD | 	jmp	#LR__5043
33ff8                 | LR__5024
33ff8     04 4E 05 F1 | 	add	fp, #4
33ffc     A7 16 02 FB | 	rdlong	arg03, fp
34000     10 4E 05 F1 | 	add	fp, #16
34004     A7 18 02 FB | 	rdlong	arg04, fp
34008     14 4E 85 F1 | 	sub	fp, #20
3400c     08 16 06 F1 | 	add	arg03, #8
34010     0B 19 62 FC | 	wrlong	arg04, arg03
34014                 | LR__5025
34014     04 4E 05 F1 | 	add	fp, #4
34018     A7 16 02 FB | 	rdlong	arg03, fp
3401c     10 4E 05 F1 | 	add	fp, #16
34020     A7 18 02 FB | 	rdlong	arg04, fp
34024     14 4E 85 F1 | 	sub	fp, #20
34028     18 16 06 F1 | 	add	arg03, #24
3402c     0B 19 62 FC | 	wrlong	arg04, arg03
34030                 | LR__5026
34030     14 4E 05 F1 | 	add	fp, #20
34034     A7 16 0A FB | 	rdlong	arg03, fp wz
34038     14 4E 85 F1 | 	sub	fp, #20
3403c     28 02 90 AD |  if_e	jmp	#LR__5036
34040                 | ' 				while (ofs > bcs) {
34040                 | LR__5027
34040     08 4E 05 F1 | 	add	fp, #8
34044     A7 18 02 FB | 	rdlong	arg04, fp
34048     10 4E 05 F1 | 	add	fp, #16
3404c     A7 16 02 FB | 	rdlong	arg03, fp
34050     18 4E 85 F1 | 	sub	fp, #24
34054     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
34058     68 01 90 ED |  if_be	jmp	#LR__5033
3405c     08 4E 05 F1 | 	add	fp, #8
34060     A7 18 02 FB | 	rdlong	arg04, fp
34064     10 4E 05 F1 | 	add	fp, #16
34068     A7 16 02 FB | 	rdlong	arg03, fp
3406c     0B 19 82 F1 | 	sub	arg04, arg03
34070     10 4E 85 F1 | 	sub	fp, #16
34074     A7 18 62 FC | 	wrlong	arg04, fp
34078     04 4E 85 F1 | 	sub	fp, #4
3407c     A7 18 02 FB | 	rdlong	arg04, fp
34080     0C FB 01 F6 | 	mov	result1, arg04
34084     14 18 06 F1 | 	add	arg04, #20
34088     0C 19 02 FB | 	rdlong	arg04, arg04
3408c     14 4E 05 F1 | 	add	fp, #20
34090     A7 16 02 FB | 	rdlong	arg03, fp
34094     0B 19 02 F1 | 	add	arg04, arg03
34098     14 FA 05 F1 | 	add	result1, #20
3409c     FD 18 62 FC | 	wrlong	arg04, result1
340a0     14 4E 85 F1 | 	sub	fp, #20
340a4     A7 16 02 FB | 	rdlong	arg03, fp
340a8     04 4E 85 F1 | 	sub	fp, #4
340ac     10 16 06 F1 | 	add	arg03, #16
340b0     0B 17 C2 FA | 	rdbyte	arg03, arg03
340b4     02 16 CE F7 | 	test	arg03, #2 wz
340b8     3C 00 90 AD |  if_e	jmp	#LR__5028
340bc     04 4E 05 F1 | 	add	fp, #4
340c0     A7 12 02 FB | 	rdlong	arg01, fp
340c4     10 4E 05 F1 | 	add	fp, #16
340c8     A7 14 02 FB | 	rdlong	arg02, fp
340cc     14 4E 85 F1 | 	sub	fp, #20
340d0     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
340d4     14 4E 05 F1 | 	add	fp, #20
340d8     A7 FA 61 FC | 	wrlong	result1, fp
340dc     00 FA 4D F2 | 	cmps	result1, #0 wz
340e0     14 4E 85 F1 | 	sub	fp, #20
340e4     08 4E 05 A1 |  if_e	add	fp, #8
340e8     A7 00 68 AC |  if_e	wrlong	#0, fp
340ec     08 4E 85 A1 |  if_e	sub	fp, #8
340f0                 | ' 							ofs = 0; break;
340f0     D0 00 90 AD |  if_e	jmp	#LR__5033
340f4     24 00 90 FD | 	jmp	#LR__5029
340f8                 | LR__5028
340f8     04 4E 05 F1 | 	add	fp, #4
340fc     A7 12 02 FB | 	rdlong	arg01, fp
34100     10 4E 05 F1 | 	add	fp, #16
34104     A7 14 02 FB | 	rdlong	arg02, fp
34108     14 4E 85 F1 | 	sub	fp, #20
3410c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
34110     14 4E 05 F1 | 	add	fp, #20
34114     A7 FA 61 FC | 	wrlong	result1, fp
34118     14 4E 85 F1 | 	sub	fp, #20
3411c                 | LR__5029
3411c     14 4E 05 F1 | 	add	fp, #20
34120     A7 16 02 FB | 	rdlong	arg03, fp
34124     14 4E 85 F1 | 	sub	fp, #20
34128     FF FF 7F FF 
3412c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
34130     1C 00 90 5D |  if_ne	jmp	#LR__5030
34134     04 4E 05 F1 | 	add	fp, #4
34138     A7 16 02 FB | 	rdlong	arg03, fp
3413c     04 4E 85 F1 | 	sub	fp, #4
34140     11 16 06 F1 | 	add	arg03, #17
34144     0B 03 48 FC | 	wrbyte	#1, arg03
34148     01 FA 05 F6 | 	mov	result1, #1
3414c     D0 02 90 FD | 	jmp	#LR__5043
34150                 | LR__5030
34150     14 4E 05 F1 | 	add	fp, #20
34154     A7 16 02 FB | 	rdlong	arg03, fp
34158     14 4E 85 F1 | 	sub	fp, #20
3415c     02 16 16 F2 | 	cmp	arg03, #2 wc
34160     24 00 90 CD |  if_b	jmp	#LR__5031
34164     10 4E 05 F1 | 	add	fp, #16
34168     A7 18 02 FB | 	rdlong	arg04, fp
3416c     04 4E 05 F1 | 	add	fp, #4
34170     A7 16 02 FB | 	rdlong	arg03, fp
34174     14 4E 85 F1 | 	sub	fp, #20
34178     18 18 06 F1 | 	add	arg04, #24
3417c     0C 19 02 FB | 	rdlong	arg04, arg04
34180     0C 17 12 F2 | 	cmp	arg03, arg04 wc
34184     1C 00 90 CD |  if_b	jmp	#LR__5032
34188                 | LR__5031
34188     04 4E 05 F1 | 	add	fp, #4
3418c     A7 16 02 FB | 	rdlong	arg03, fp
34190     04 4E 85 F1 | 	sub	fp, #4
34194     11 16 06 F1 | 	add	arg03, #17
34198     0B 05 48 FC | 	wrbyte	#2, arg03
3419c     02 FA 05 F6 | 	mov	result1, #2
341a0     7C 02 90 FD | 	jmp	#LR__5043
341a4                 | LR__5032
341a4     04 4E 05 F1 | 	add	fp, #4
341a8     A7 18 02 FB | 	rdlong	arg04, fp
341ac     10 4E 05 F1 | 	add	fp, #16
341b0     A7 16 02 FB | 	rdlong	arg03, fp
341b4     14 4E 85 F1 | 	sub	fp, #20
341b8     18 18 06 F1 | 	add	arg04, #24
341bc     0C 17 62 FC | 	wrlong	arg03, arg04
341c0     7C FE 9F FD | 	jmp	#LR__5027
341c4                 | LR__5033
341c4     04 4E 05 F1 | 	add	fp, #4
341c8     A7 16 02 FB | 	rdlong	arg03, fp
341cc     0B 13 02 F6 | 	mov	arg01, arg03
341d0     14 16 06 F1 | 	add	arg03, #20
341d4     0B 15 02 FB | 	rdlong	arg02, arg03
341d8     04 4E 05 F1 | 	add	fp, #4
341dc     A7 16 02 FB | 	rdlong	arg03, fp
341e0     0B 15 02 F1 | 	add	arg02, arg03
341e4     14 12 06 F1 | 	add	arg01, #20
341e8     09 15 62 FC | 	wrlong	arg02, arg01
341ec     A7 16 02 FB | 	rdlong	arg03, fp
341f0     08 4E 85 F1 | 	sub	fp, #8
341f4     FF 17 CE F7 | 	test	arg03, #511 wz
341f8     6C 00 90 AD |  if_e	jmp	#LR__5035
341fc     10 4E 05 F1 | 	add	fp, #16
34200     A7 12 02 FB | 	rdlong	arg01, fp
34204     04 4E 05 F1 | 	add	fp, #4
34208     A7 14 02 FB | 	rdlong	arg02, fp
3420c     14 4E 85 F1 | 	sub	fp, #20
34210     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
34214     1C 4E 05 F1 | 	add	fp, #28
34218     A7 FA 61 FC | 	wrlong	result1, fp
3421c     1C 4E 85 F1 | 	sub	fp, #28
34220     00 FA 0D F2 | 	cmp	result1, #0 wz
34224     1C 00 90 5D |  if_ne	jmp	#LR__5034
34228     04 4E 05 F1 | 	add	fp, #4
3422c     A7 16 02 FB | 	rdlong	arg03, fp
34230     04 4E 85 F1 | 	sub	fp, #4
34234     11 16 06 F1 | 	add	arg03, #17
34238     0B 05 48 FC | 	wrbyte	#2, arg03
3423c     02 FA 05 F6 | 	mov	result1, #2
34240     DC 01 90 FD | 	jmp	#LR__5043
34244                 | LR__5034
34244     1C 4E 05 F1 | 	add	fp, #28
34248     A7 18 02 FB | 	rdlong	arg04, fp
3424c     14 4E 85 F1 | 	sub	fp, #20
34250     A7 16 02 FB | 	rdlong	arg03, fp
34254     09 16 46 F0 | 	shr	arg03, #9
34258     0B 19 02 F1 | 	add	arg04, arg03
3425c     14 4E 05 F1 | 	add	fp, #20
34260     A7 18 62 FC | 	wrlong	arg04, fp
34264     1C 4E 85 F1 | 	sub	fp, #28
34268                 | LR__5035
34268                 | LR__5036
34268                 | LR__5037
34268     04 4E 05 F1 | 	add	fp, #4
3426c     A7 18 02 FB | 	rdlong	arg04, fp
34270     0C 17 02 F6 | 	mov	arg03, arg04
34274     04 4E 85 F1 | 	sub	fp, #4
34278     14 16 06 F1 | 	add	arg03, #20
3427c     0B 17 02 FB | 	rdlong	arg03, arg03
34280     0C 18 06 F1 | 	add	arg04, #12
34284     0C 19 02 FB | 	rdlong	arg04, arg04
34288     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
3428c     3C 00 90 ED |  if_be	jmp	#LR__5038
34290     04 4E 05 F1 | 	add	fp, #4
34294     A7 18 02 FB | 	rdlong	arg04, fp
34298     0C 17 02 F6 | 	mov	arg03, arg04
3429c     14 18 06 F1 | 	add	arg04, #20
342a0     0C 19 02 FB | 	rdlong	arg04, arg04
342a4     0C 16 06 F1 | 	add	arg03, #12
342a8     0B 19 62 FC | 	wrlong	arg04, arg03
342ac     A7 18 02 FB | 	rdlong	arg04, fp
342b0     0C 17 02 F6 | 	mov	arg03, arg04
342b4     04 4E 85 F1 | 	sub	fp, #4
342b8     10 18 06 F1 | 	add	arg04, #16
342bc     0C 19 C2 FA | 	rdbyte	arg04, arg04
342c0     40 18 46 F5 | 	or	arg04, #64
342c4     10 16 06 F1 | 	add	arg03, #16
342c8     0B 19 42 FC | 	wrbyte	arg04, arg03
342cc                 | LR__5038
342cc     04 4E 05 F1 | 	add	fp, #4
342d0     A7 16 02 FB | 	rdlong	arg03, fp
342d4     04 4E 85 F1 | 	sub	fp, #4
342d8     14 16 06 F1 | 	add	arg03, #20
342dc     0B 17 02 FB | 	rdlong	arg03, arg03
342e0     FF 17 CE F7 | 	test	arg03, #511 wz
342e4     2C 01 90 AD |  if_e	jmp	#LR__5042
342e8     04 4E 05 F1 | 	add	fp, #4
342ec     A7 18 02 FB | 	rdlong	arg04, fp
342f0     18 4E 05 F1 | 	add	fp, #24
342f4     A7 16 02 FB | 	rdlong	arg03, fp
342f8     1C 4E 85 F1 | 	sub	fp, #28
342fc     1C 18 06 F1 | 	add	arg04, #28
34300     0C 19 02 FB | 	rdlong	arg04, arg04
34304     0C 17 0A F2 | 	cmp	arg03, arg04 wz
34308     08 01 90 AD |  if_e	jmp	#LR__5042
3430c     04 4E 05 F1 | 	add	fp, #4
34310     A7 16 02 FB | 	rdlong	arg03, fp
34314     04 4E 85 F1 | 	sub	fp, #4
34318     10 16 06 F1 | 	add	arg03, #16
3431c     0B 17 C2 FA | 	rdbyte	arg03, arg03
34320     80 16 CE F7 | 	test	arg03, #128 wz
34324     7C 00 90 AD |  if_e	jmp	#LR__5040
34328     10 4E 05 F1 | 	add	fp, #16
3432c     A7 16 02 FB | 	rdlong	arg03, fp
34330     01 16 06 F1 | 	add	arg03, #1
34334     0B 13 C2 FA | 	rdbyte	arg01, arg03
34338     0C 4E 85 F1 | 	sub	fp, #12
3433c     A7 16 02 FB | 	rdlong	arg03, fp
34340     0B 15 02 F6 | 	mov	arg02, arg03
34344     28 14 06 F1 | 	add	arg02, #40
34348     04 4E 85 F1 | 	sub	fp, #4
3434c     1C 16 06 F1 | 	add	arg03, #28
34350     0B 17 02 FB | 	rdlong	arg03, arg03
34354     01 18 06 F6 | 	mov	arg04, #1
34358     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
3435c     00 FA 0D F2 | 	cmp	result1, #0 wz
34360     1C 00 90 AD |  if_e	jmp	#LR__5039
34364     04 4E 05 F1 | 	add	fp, #4
34368     A7 16 02 FB | 	rdlong	arg03, fp
3436c     04 4E 85 F1 | 	sub	fp, #4
34370     11 16 06 F1 | 	add	arg03, #17
34374     0B 03 48 FC | 	wrbyte	#1, arg03
34378     01 FA 05 F6 | 	mov	result1, #1
3437c     A0 00 90 FD | 	jmp	#LR__5043
34380                 | LR__5039
34380     04 4E 05 F1 | 	add	fp, #4
34384     A7 18 02 FB | 	rdlong	arg04, fp
34388     0C 17 02 F6 | 	mov	arg03, arg04
3438c     04 4E 85 F1 | 	sub	fp, #4
34390     10 18 06 F1 | 	add	arg04, #16
34394     0C 19 C2 FA | 	rdbyte	arg04, arg04
34398     7F 18 06 F5 | 	and	arg04, #127
3439c     10 16 06 F1 | 	add	arg03, #16
343a0     0B 19 42 FC | 	wrbyte	arg04, arg03
343a4                 | LR__5040
343a4     10 4E 05 F1 | 	add	fp, #16
343a8     A7 16 02 FB | 	rdlong	arg03, fp
343ac     01 16 06 F1 | 	add	arg03, #1
343b0     0B 13 C2 FA | 	rdbyte	arg01, arg03
343b4     0C 4E 85 F1 | 	sub	fp, #12
343b8     A7 14 02 FB | 	rdlong	arg02, fp
343bc     28 14 06 F1 | 	add	arg02, #40
343c0     18 4E 05 F1 | 	add	fp, #24
343c4     A7 16 02 FB | 	rdlong	arg03, fp
343c8     1C 4E 85 F1 | 	sub	fp, #28
343cc     01 18 06 F6 | 	mov	arg04, #1
343d0     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
343d4     00 FA 0D F2 | 	cmp	result1, #0 wz
343d8     1C 00 90 AD |  if_e	jmp	#LR__5041
343dc     04 4E 05 F1 | 	add	fp, #4
343e0     A7 16 02 FB | 	rdlong	arg03, fp
343e4     04 4E 85 F1 | 	sub	fp, #4
343e8     11 16 06 F1 | 	add	arg03, #17
343ec     0B 03 48 FC | 	wrbyte	#1, arg03
343f0     01 FA 05 F6 | 	mov	result1, #1
343f4     28 00 90 FD | 	jmp	#LR__5043
343f8                 | LR__5041
343f8     04 4E 05 F1 | 	add	fp, #4
343fc     A7 18 02 FB | 	rdlong	arg04, fp
34400     18 4E 05 F1 | 	add	fp, #24
34404     A7 16 02 FB | 	rdlong	arg03, fp
34408     1C 4E 85 F1 | 	sub	fp, #28
3440c     1C 18 06 F1 | 	add	arg04, #28
34410     0C 17 62 FC | 	wrlong	arg03, arg04
34414                 | LR__5042
34414                 | ' 
34414                 | ' 			fp->sect = nsect;
34414                 | ' 		}
34414                 | ' 	}
34414                 | ' 
34414                 | ' 	return res ;
34414     0C 4E 05 F1 | 	add	fp, #12
34418     A7 FA 01 FB | 	rdlong	result1, fp
3441c     0C 4E 85 F1 | 	sub	fp, #12
34420                 | LR__5043
34420     A7 F0 03 F6 | 	mov	ptra, fp
34424     B2 00 A0 FD | 	call	#popregs_
34428                 | _fatfs_cc_f_lseek_ret
34428     2D 00 64 FD | 	ret
3442c                 | 
3442c                 | _fatfs_cc_f_opendir
3442c     01 4A 05 F6 | 	mov	COUNT_, #1
34430     A8 00 A0 FD | 	call	#pushregs_
34434     14 F0 07 F1 | 	add	ptra, #20
34438     04 4E 05 F1 | 	add	fp, #4
3443c     A7 12 62 FC | 	wrlong	arg01, fp
34440     04 4E 05 F1 | 	add	fp, #4
34444     A7 14 62 FC | 	wrlong	arg02, fp
34448     04 4E 85 F1 | 	sub	fp, #4
3444c     A7 16 0A FB | 	rdlong	arg03, fp wz
34450     04 4E 85 F1 | 	sub	fp, #4
34454     09 FA 05 A6 |  if_e	mov	result1, #9
34458     78 01 90 AD |  if_e	jmp	#LR__5056
3445c     08 4E 05 F1 | 	add	fp, #8
34460     A7 12 02 F6 | 	mov	arg01, fp
34464     08 4E 05 F1 | 	add	fp, #8
34468     A7 14 02 F6 | 	mov	arg02, fp
3446c     10 4E 85 F1 | 	sub	fp, #16
34470     00 16 06 F6 | 	mov	arg03, #0
34474     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
34478     0C 4E 05 F1 | 	add	fp, #12
3447c     A7 FA 61 FC | 	wrlong	result1, fp
34480     0C 4E 85 F1 | 	sub	fp, #12
34484     00 FA 0D F2 | 	cmp	result1, #0 wz
34488     20 01 90 5D |  if_ne	jmp	#LR__5055
3448c     04 4E 05 F1 | 	add	fp, #4
34490     A7 16 02 FB | 	rdlong	arg03, fp
34494     0C 4E 05 F1 | 	add	fp, #12
34498     A7 FA 01 FB | 	rdlong	result1, fp
3449c     0B FB 61 FC | 	wrlong	result1, arg03
344a0     0C 4E 85 F1 | 	sub	fp, #12
344a4     A7 12 02 FB | 	rdlong	arg01, fp
344a8     04 4E 05 F1 | 	add	fp, #4
344ac     A7 14 02 FB | 	rdlong	arg02, fp
344b0     08 4E 85 F1 | 	sub	fp, #8
344b4     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
344b8     0C 4E 05 F1 | 	add	fp, #12
344bc     A7 FA 61 FC | 	wrlong	result1, fp
344c0     0C 4E 85 F1 | 	sub	fp, #12
344c4     00 FA 0D F2 | 	cmp	result1, #0 wz
344c8     C4 00 90 5D |  if_ne	jmp	#LR__5054
344cc     04 4E 05 F1 | 	add	fp, #4
344d0     A7 16 02 FB | 	rdlong	arg03, fp
344d4     04 4E 85 F1 | 	sub	fp, #4
344d8     2B 16 06 F1 | 	add	arg03, #43
344dc     0B 17 C2 FA | 	rdbyte	arg03, arg03
344e0     80 16 CE F7 | 	test	arg03, #128 wz
344e4     58 00 90 5D |  if_ne	jmp	#LR__5052
344e8     04 4E 05 F1 | 	add	fp, #4
344ec     A7 16 02 FB | 	rdlong	arg03, fp
344f0     04 4E 85 F1 | 	sub	fp, #4
344f4     06 16 06 F1 | 	add	arg03, #6
344f8     0B 17 C2 FA | 	rdbyte	arg03, arg03
344fc     10 16 CE F7 | 	test	arg03, #16 wz
34500     30 00 90 AD |  if_e	jmp	#LR__5050
34504     04 4E 05 F1 | 	add	fp, #4
34508     A7 16 02 FB | 	rdlong	arg03, fp
3450c     0B 27 02 F6 | 	mov	local01, arg03
34510     0C 4E 05 F1 | 	add	fp, #12
34514     A7 12 02 FB | 	rdlong	arg01, fp
34518     10 4E 85 F1 | 	sub	fp, #16
3451c     1C 16 06 F1 | 	add	arg03, #28
34520     0B 15 02 FB | 	rdlong	arg02, arg03
34524     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
34528     08 26 06 F1 | 	add	local01, #8
3452c     13 FB 61 FC | 	wrlong	result1, local01
34530     0C 00 90 FD | 	jmp	#LR__5051
34534                 | LR__5050
34534     0C 4E 05 F1 | 	add	fp, #12
34538     A7 0A 68 FC | 	wrlong	#5, fp
3453c     0C 4E 85 F1 | 	sub	fp, #12
34540                 | LR__5051
34540                 | LR__5052
34540     0C 4E 05 F1 | 	add	fp, #12
34544     A7 26 0A FB | 	rdlong	local01, fp wz
34548     0C 4E 85 F1 | 	sub	fp, #12
3454c     40 00 90 5D |  if_ne	jmp	#LR__5053
34550     04 4E 05 F1 | 	add	fp, #4
34554     A7 26 02 FB | 	rdlong	local01, fp
34558     0C 4E 05 F1 | 	add	fp, #12
3455c     A7 16 02 FB | 	rdlong	arg03, fp
34560     06 16 06 F1 | 	add	arg03, #6
34564     0B 17 E2 FA | 	rdword	arg03, arg03
34568     04 26 06 F1 | 	add	local01, #4
3456c     13 17 52 FC | 	wrword	arg03, local01
34570     0C 4E 85 F1 | 	sub	fp, #12
34574     A7 12 02 FB | 	rdlong	arg01, fp
34578     04 4E 85 F1 | 	sub	fp, #4
3457c     00 14 06 F6 | 	mov	arg02, #0
34580     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
34584     0C 4E 05 F1 | 	add	fp, #12
34588     A7 FA 61 FC | 	wrlong	result1, fp
3458c     0C 4E 85 F1 | 	sub	fp, #12
34590                 | LR__5053
34590                 | LR__5054
34590     0C 4E 05 F1 | 	add	fp, #12
34594     A7 26 02 FB | 	rdlong	local01, fp
34598     0C 4E 85 F1 | 	sub	fp, #12
3459c     04 26 0E F2 | 	cmp	local01, #4 wz
345a0     0C 4E 05 A1 |  if_e	add	fp, #12
345a4     A7 0A 68 AC |  if_e	wrlong	#5, fp
345a8     0C 4E 85 A1 |  if_e	sub	fp, #12
345ac                 | LR__5055
345ac     0C 4E 05 F1 | 	add	fp, #12
345b0     A7 26 0A FB | 	rdlong	local01, fp wz
345b4     0C 4E 85 F1 | 	sub	fp, #12
345b8     04 4E 05 51 |  if_ne	add	fp, #4
345bc     A7 26 02 5B |  if_ne	rdlong	local01, fp
345c0     04 4E 85 51 |  if_ne	sub	fp, #4
345c4     13 01 68 5C |  if_ne	wrlong	#0, local01
345c8                 | ' 
345c8                 | ' 	return res ;
345c8     0C 4E 05 F1 | 	add	fp, #12
345cc     A7 FA 01 FB | 	rdlong	result1, fp
345d0     0C 4E 85 F1 | 	sub	fp, #12
345d4                 | LR__5056
345d4     A7 F0 03 F6 | 	mov	ptra, fp
345d8     B2 00 A0 FD | 	call	#popregs_
345dc                 | _fatfs_cc_f_opendir_ret
345dc     2D 00 64 FD | 	ret
345e0                 | 
345e0                 | _fatfs_cc_f_closedir
345e0     00 4A 05 F6 | 	mov	COUNT_, #0
345e4     A8 00 A0 FD | 	call	#pushregs_
345e8     10 F0 07 F1 | 	add	ptra, #16
345ec     04 4E 05 F1 | 	add	fp, #4
345f0     A7 12 62 FC | 	wrlong	arg01, fp
345f4     08 4E 05 F1 | 	add	fp, #8
345f8     A7 14 02 F6 | 	mov	arg02, fp
345fc     0C 4E 85 F1 | 	sub	fp, #12
34600     C0 DD BF FD | 	call	#_fatfs_cc_validate
34604     08 4E 05 F1 | 	add	fp, #8
34608     A7 FA 61 FC | 	wrlong	result1, fp
3460c     08 4E 85 F1 | 	sub	fp, #8
34610     00 FA 0D F2 | 	cmp	result1, #0 wz
34614     04 4E 05 A1 |  if_e	add	fp, #4
34618     A7 FA 01 AB |  if_e	rdlong	result1, fp
3461c     04 4E 85 A1 |  if_e	sub	fp, #4
34620     FD 00 68 AC |  if_e	wrlong	#0, result1
34624                 | ' 
34624                 | ' 
34624                 | ' 
34624                 | ' 
34624                 | ' 		dp->obj.fs = 0;
34624                 | ' #line 4633 "ff.c"
34624                 | ' 	}
34624                 | ' 	return res;
34624     08 4E 05 F1 | 	add	fp, #8
34628     A7 FA 01 FB | 	rdlong	result1, fp
3462c     08 4E 85 F1 | 	sub	fp, #8
34630     A7 F0 03 F6 | 	mov	ptra, fp
34634     B2 00 A0 FD | 	call	#popregs_
34638                 | _fatfs_cc_f_closedir_ret
34638     2D 00 64 FD | 	ret
3463c                 | 
3463c                 | _fatfs_cc_f_readdir
3463c     00 4A 05 F6 | 	mov	COUNT_, #0
34640     A8 00 A0 FD | 	call	#pushregs_
34644     14 F0 07 F1 | 	add	ptra, #20
34648     04 4E 05 F1 | 	add	fp, #4
3464c     A7 12 62 FC | 	wrlong	arg01, fp
34650     04 4E 05 F1 | 	add	fp, #4
34654     A7 14 62 FC | 	wrlong	arg02, fp
34658     04 4E 85 F1 | 	sub	fp, #4
3465c     A7 12 02 FB | 	rdlong	arg01, fp
34660     0C 4E 05 F1 | 	add	fp, #12
34664     A7 14 02 F6 | 	mov	arg02, fp
34668     10 4E 85 F1 | 	sub	fp, #16
3466c     54 DD BF FD | 	call	#_fatfs_cc_validate
34670     0C 4E 05 F1 | 	add	fp, #12
34674     A7 FA 61 FC | 	wrlong	result1, fp
34678     0C 4E 85 F1 | 	sub	fp, #12
3467c     00 FA 0D F2 | 	cmp	result1, #0 wz
34680     BC 00 90 5D |  if_ne	jmp	#LR__5063
34684     08 4E 05 F1 | 	add	fp, #8
34688     A7 FA 09 FB | 	rdlong	result1, fp wz
3468c     08 4E 85 F1 | 	sub	fp, #8
34690     24 00 90 5D |  if_ne	jmp	#LR__5060
34694     04 4E 05 F1 | 	add	fp, #4
34698     A7 12 02 FB | 	rdlong	arg01, fp
3469c     04 4E 85 F1 | 	sub	fp, #4
346a0     00 14 06 F6 | 	mov	arg02, #0
346a4     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
346a8     0C 4E 05 F1 | 	add	fp, #12
346ac     A7 FA 61 FC | 	wrlong	result1, fp
346b0     0C 4E 85 F1 | 	sub	fp, #12
346b4     88 00 90 FD | 	jmp	#LR__5062
346b8                 | LR__5060
346b8     04 4E 05 F1 | 	add	fp, #4
346bc     A7 12 02 FB | 	rdlong	arg01, fp
346c0     04 4E 85 F1 | 	sub	fp, #4
346c4     00 14 06 F6 | 	mov	arg02, #0
346c8     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
346cc     0C 4E 05 F1 | 	add	fp, #12
346d0     A7 FA 61 FC | 	wrlong	result1, fp
346d4     0C 4E 85 F1 | 	sub	fp, #12
346d8     04 FA 0D F2 | 	cmp	result1, #4 wz
346dc     0C 4E 05 A1 |  if_e	add	fp, #12
346e0     A7 00 68 AC |  if_e	wrlong	#0, fp
346e4     0C 4E 85 A1 |  if_e	sub	fp, #12
346e8     0C 4E 05 F1 | 	add	fp, #12
346ec     A7 FA 09 FB | 	rdlong	result1, fp wz
346f0     0C 4E 85 F1 | 	sub	fp, #12
346f4     48 00 90 5D |  if_ne	jmp	#LR__5061
346f8     04 4E 05 F1 | 	add	fp, #4
346fc     A7 12 02 FB | 	rdlong	arg01, fp
34700     04 4E 05 F1 | 	add	fp, #4
34704     A7 14 02 FB | 	rdlong	arg02, fp
34708     08 4E 85 F1 | 	sub	fp, #8
3470c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
34710     04 4E 05 F1 | 	add	fp, #4
34714     A7 12 02 FB | 	rdlong	arg01, fp
34718     04 4E 85 F1 | 	sub	fp, #4
3471c     00 14 06 F6 | 	mov	arg02, #0
34720     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
34724     0C 4E 05 F1 | 	add	fp, #12
34728     A7 FA 61 FC | 	wrlong	result1, fp
3472c     0C 4E 85 F1 | 	sub	fp, #12
34730     04 FA 0D F2 | 	cmp	result1, #4 wz
34734     0C 4E 05 A1 |  if_e	add	fp, #12
34738     A7 00 68 AC |  if_e	wrlong	#0, fp
3473c     0C 4E 85 A1 |  if_e	sub	fp, #12
34740                 | LR__5061
34740                 | LR__5062
34740                 | LR__5063
34740                 | ' 			}
34740                 | ' 			;
34740                 | ' 		}
34740                 | ' 	}
34740                 | ' 	return res ;
34740     0C 4E 05 F1 | 	add	fp, #12
34744     A7 FA 01 FB | 	rdlong	result1, fp
34748     0C 4E 85 F1 | 	sub	fp, #12
3474c     A7 F0 03 F6 | 	mov	ptra, fp
34750     B2 00 A0 FD | 	call	#popregs_
34754                 | _fatfs_cc_f_readdir_ret
34754     2D 00 64 FD | 	ret
34758                 | 
34758                 | _fatfs_cc_f_stat
34758     00 4A 05 F6 | 	mov	COUNT_, #0
3475c     A8 00 A0 FD | 	call	#pushregs_
34760     40 F0 07 F1 | 	add	ptra, #64
34764     04 4E 05 F1 | 	add	fp, #4
34768     A7 12 62 FC | 	wrlong	arg01, fp
3476c     04 4E 05 F1 | 	add	fp, #4
34770     A7 14 62 FC | 	wrlong	arg02, fp
34774     04 4E 85 F1 | 	sub	fp, #4
34778     A7 12 02 F6 | 	mov	arg01, fp
3477c     0C 4E 05 F1 | 	add	fp, #12
34780     A7 14 02 F6 | 	mov	arg02, fp
34784     10 4E 85 F1 | 	sub	fp, #16
34788     00 16 06 F6 | 	mov	arg03, #0
3478c     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
34790     0C 4E 05 F1 | 	add	fp, #12
34794     A7 FA 61 FC | 	wrlong	result1, fp
34798     0C 4E 85 F1 | 	sub	fp, #12
3479c     00 FA 0D F2 | 	cmp	result1, #0 wz
347a0     74 00 90 5D |  if_ne	jmp	#LR__5073
347a4     10 4E 05 F1 | 	add	fp, #16
347a8     A7 12 02 F6 | 	mov	arg01, fp
347ac     0C 4E 85 F1 | 	sub	fp, #12
347b0     A7 14 02 FB | 	rdlong	arg02, fp
347b4     04 4E 85 F1 | 	sub	fp, #4
347b8     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
347bc     0C 4E 05 F1 | 	add	fp, #12
347c0     A7 FA 61 FC | 	wrlong	result1, fp
347c4     0C 4E 85 F1 | 	sub	fp, #12
347c8     00 FA 0D F2 | 	cmp	result1, #0 wz
347cc     48 00 90 5D |  if_ne	jmp	#LR__5072
347d0     3B 4E 05 F1 | 	add	fp, #59
347d4     A7 FA C1 FA | 	rdbyte	result1, fp
347d8     3B 4E 85 F1 | 	sub	fp, #59
347dc     80 FA CD F7 | 	test	result1, #128 wz
347e0     0C 4E 05 51 |  if_ne	add	fp, #12
347e4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
347e8     0C 4E 85 51 |  if_ne	sub	fp, #12
347ec     28 00 90 5D |  if_ne	jmp	#LR__5071
347f0     08 4E 05 F1 | 	add	fp, #8
347f4     A7 FA 09 FB | 	rdlong	result1, fp wz
347f8     08 4E 85 F1 | 	sub	fp, #8
347fc     18 00 90 AD |  if_e	jmp	#LR__5070
34800     10 4E 05 F1 | 	add	fp, #16
34804     A7 12 02 F6 | 	mov	arg01, fp
34808     08 4E 85 F1 | 	sub	fp, #8
3480c     A7 14 02 FB | 	rdlong	arg02, fp
34810     08 4E 85 F1 | 	sub	fp, #8
34814     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
34818                 | LR__5070
34818                 | LR__5071
34818                 | LR__5072
34818                 | LR__5073
34818                 | ' 			}
34818                 | ' 		}
34818                 | ' 		;
34818                 | ' 	}
34818                 | ' 
34818                 | ' 	return res ;
34818     0C 4E 05 F1 | 	add	fp, #12
3481c     A7 FA 01 FB | 	rdlong	result1, fp
34820     0C 4E 85 F1 | 	sub	fp, #12
34824     A7 F0 03 F6 | 	mov	ptra, fp
34828     B2 00 A0 FD | 	call	#popregs_
3482c                 | _fatfs_cc_f_stat_ret
3482c     2D 00 64 FD | 	ret
34830                 | 
34830                 | _fatfs_cc_f_unlink
34830     00 4A 05 F6 | 	mov	COUNT_, #0
34834     A8 00 A0 FD | 	call	#pushregs_
34838     74 F0 07 F1 | 	add	ptra, #116
3483c     04 4E 05 F1 | 	add	fp, #4
34840     A7 12 62 FC | 	wrlong	arg01, fp
34844     68 4E 05 F1 | 	add	fp, #104
34848     A7 00 68 FC | 	wrlong	#0, fp
3484c     68 4E 85 F1 | 	sub	fp, #104
34850     A7 12 02 F6 | 	mov	arg01, fp
34854     6C 4E 05 F1 | 	add	fp, #108
34858     A7 14 02 F6 | 	mov	arg02, fp
3485c     70 4E 85 F1 | 	sub	fp, #112
34860     02 16 06 F6 | 	mov	arg03, #2
34864     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
34868     08 4E 05 F1 | 	add	fp, #8
3486c     A7 FA 61 FC | 	wrlong	result1, fp
34870     08 4E 85 F1 | 	sub	fp, #8
34874     00 FA 0D F2 | 	cmp	result1, #0 wz
34878     E4 01 90 5D |  if_ne	jmp	#LR__5088
3487c     70 4E 05 F1 | 	add	fp, #112
34880     A7 16 02 FB | 	rdlong	arg03, fp
34884     64 4E 85 F1 | 	sub	fp, #100
34888     A7 16 62 FC | 	wrlong	arg03, fp
3488c     A7 12 02 F6 | 	mov	arg01, fp
34890     08 4E 85 F1 | 	sub	fp, #8
34894     A7 14 02 FB | 	rdlong	arg02, fp
34898     04 4E 85 F1 | 	sub	fp, #4
3489c     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
348a0     08 4E 05 F1 | 	add	fp, #8
348a4     A7 FA 61 FC | 	wrlong	result1, fp
348a8     00 FA 4D F2 | 	cmps	result1, #0 wz
348ac     08 4E 85 F1 | 	sub	fp, #8
348b0     AC 01 90 5D |  if_ne	jmp	#LR__5087
348b4     37 4E 05 F1 | 	add	fp, #55
348b8     A7 FA C1 FA | 	rdbyte	result1, fp
348bc     37 4E 85 F1 | 	sub	fp, #55
348c0     80 FA CD F7 | 	test	result1, #128 wz
348c4     08 4E 05 51 |  if_ne	add	fp, #8
348c8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
348cc     08 4E 85 51 |  if_ne	sub	fp, #8
348d0     1C 00 90 5D |  if_ne	jmp	#LR__5080
348d4     12 4E 05 F1 | 	add	fp, #18
348d8     A7 FA C1 FA | 	rdbyte	result1, fp
348dc     12 4E 85 F1 | 	sub	fp, #18
348e0     01 FA CD F7 | 	test	result1, #1 wz
348e4     08 4E 05 51 |  if_ne	add	fp, #8
348e8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
348ec     08 4E 85 51 |  if_ne	sub	fp, #8
348f0                 | LR__5080
348f0     08 4E 05 F1 | 	add	fp, #8
348f4     A7 FA 09 FB | 	rdlong	result1, fp wz
348f8     08 4E 85 F1 | 	sub	fp, #8
348fc     C8 00 90 5D |  if_ne	jmp	#LR__5083
34900     70 4E 05 F1 | 	add	fp, #112
34904     A7 12 02 FB | 	rdlong	arg01, fp
34908     48 4E 85 F1 | 	sub	fp, #72
3490c     A7 14 02 FB | 	rdlong	arg02, fp
34910     28 4E 85 F1 | 	sub	fp, #40
34914     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
34918     6C 4E 05 F1 | 	add	fp, #108
3491c     A7 FA 61 FC | 	wrlong	result1, fp
34920     5A 4E 85 F1 | 	sub	fp, #90
34924     A7 FA C1 FA | 	rdbyte	result1, fp
34928     12 4E 85 F1 | 	sub	fp, #18
3492c     10 FA CD F7 | 	test	result1, #16 wz
34930     94 00 90 AD |  if_e	jmp	#LR__5082
34934     70 4E 05 F1 | 	add	fp, #112
34938     A7 FA 01 FB | 	rdlong	result1, fp
3493c     34 4E 85 F1 | 	sub	fp, #52
34940     A7 FA 61 FC | 	wrlong	result1, fp
34944     30 4E 05 F1 | 	add	fp, #48
34948     A7 16 02 FB | 	rdlong	arg03, fp
3494c     28 4E 85 F1 | 	sub	fp, #40
34950     A7 16 62 FC | 	wrlong	arg03, fp
34954     08 4E 85 F1 | 	sub	fp, #8
34958     A7 12 02 F6 | 	mov	arg01, fp
3495c     3C 4E 85 F1 | 	sub	fp, #60
34960     00 14 06 F6 | 	mov	arg02, #0
34964     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
34968     08 4E 05 F1 | 	add	fp, #8
3496c     A7 FA 61 FC | 	wrlong	result1, fp
34970     08 4E 85 F1 | 	sub	fp, #8
34974     00 FA 0D F2 | 	cmp	result1, #0 wz
34978     4C 00 90 5D |  if_ne	jmp	#LR__5081
3497c     3C 4E 05 F1 | 	add	fp, #60
34980     A7 12 02 F6 | 	mov	arg01, fp
34984     3C 4E 85 F1 | 	sub	fp, #60
34988     00 14 06 F6 | 	mov	arg02, #0
3498c     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
34990     08 4E 05 F1 | 	add	fp, #8
34994     A7 FA 61 FC | 	wrlong	result1, fp
34998     00 FA 4D F2 | 	cmps	result1, #0 wz
3499c     08 4E 85 F1 | 	sub	fp, #8
349a0     08 4E 05 A1 |  if_e	add	fp, #8
349a4     A7 0E 68 AC |  if_e	wrlong	#7, fp
349a8     08 4E 85 A1 |  if_e	sub	fp, #8
349ac     08 4E 05 F1 | 	add	fp, #8
349b0     A7 FA 01 FB | 	rdlong	result1, fp
349b4     08 4E 85 F1 | 	sub	fp, #8
349b8     04 FA 0D F2 | 	cmp	result1, #4 wz
349bc     08 4E 05 A1 |  if_e	add	fp, #8
349c0     A7 00 68 AC |  if_e	wrlong	#0, fp
349c4     08 4E 85 A1 |  if_e	sub	fp, #8
349c8                 | LR__5081
349c8                 | LR__5082
349c8                 | LR__5083
349c8     08 4E 05 F1 | 	add	fp, #8
349cc     A7 FA 09 FB | 	rdlong	result1, fp wz
349d0     08 4E 85 F1 | 	sub	fp, #8
349d4     88 00 90 5D |  if_ne	jmp	#LR__5086
349d8     0C 4E 05 F1 | 	add	fp, #12
349dc     A7 12 02 F6 | 	mov	arg01, fp
349e0     0C 4E 85 F1 | 	sub	fp, #12
349e4     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
349e8     08 4E 05 F1 | 	add	fp, #8
349ec     A7 FA 61 FC | 	wrlong	result1, fp
349f0     08 4E 85 F1 | 	sub	fp, #8
349f4     00 FA 0D F2 | 	cmp	result1, #0 wz
349f8     38 00 90 5D |  if_ne	jmp	#LR__5084
349fc     6C 4E 05 F1 | 	add	fp, #108
34a00     A7 FA 09 FB | 	rdlong	result1, fp wz
34a04     6C 4E 85 F1 | 	sub	fp, #108
34a08     28 00 90 AD |  if_e	jmp	#LR__5084
34a0c     0C 4E 05 F1 | 	add	fp, #12
34a10     A7 12 02 F6 | 	mov	arg01, fp
34a14     60 4E 05 F1 | 	add	fp, #96
34a18     A7 14 02 FB | 	rdlong	arg02, fp
34a1c     6C 4E 85 F1 | 	sub	fp, #108
34a20     00 16 06 F6 | 	mov	arg03, #0
34a24     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
34a28     08 4E 05 F1 | 	add	fp, #8
34a2c     A7 FA 61 FC | 	wrlong	result1, fp
34a30     08 4E 85 F1 | 	sub	fp, #8
34a34                 | LR__5084
34a34     08 4E 05 F1 | 	add	fp, #8
34a38     A7 FA 09 FB | 	rdlong	result1, fp wz
34a3c     08 4E 85 F1 | 	sub	fp, #8
34a40     1C 00 90 5D |  if_ne	jmp	#LR__5085
34a44     70 4E 05 F1 | 	add	fp, #112
34a48     A7 12 02 FB | 	rdlong	arg01, fp
34a4c     70 4E 85 F1 | 	sub	fp, #112
34a50     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
34a54     08 4E 05 F1 | 	add	fp, #8
34a58     A7 FA 61 FC | 	wrlong	result1, fp
34a5c     08 4E 85 F1 | 	sub	fp, #8
34a60                 | LR__5085
34a60                 | LR__5086
34a60                 | LR__5087
34a60                 | LR__5088
34a60                 | ' 			}
34a60                 | ' 		}
34a60                 | ' 		;
34a60                 | ' 	}
34a60                 | ' 
34a60                 | ' 	return res ;
34a60     08 4E 05 F1 | 	add	fp, #8
34a64     A7 FA 01 FB | 	rdlong	result1, fp
34a68     08 4E 85 F1 | 	sub	fp, #8
34a6c     A7 F0 03 F6 | 	mov	ptra, fp
34a70     B2 00 A0 FD | 	call	#popregs_
34a74                 | _fatfs_cc_f_unlink_ret
34a74     2D 00 64 FD | 	ret
34a78                 | 
34a78                 | _fatfs_cc_f_mkdir
34a78     00 4A 05 F6 | 	mov	COUNT_, #0
34a7c     A8 00 A0 FD | 	call	#pushregs_
34a80     5C F0 07 F1 | 	add	ptra, #92
34a84     04 4E 05 F1 | 	add	fp, #4
34a88     A7 12 62 FC | 	wrlong	arg01, fp
34a8c     A7 12 02 F6 | 	mov	arg01, fp
34a90     48 4E 05 F1 | 	add	fp, #72
34a94     A7 14 02 F6 | 	mov	arg02, fp
34a98     4C 4E 85 F1 | 	sub	fp, #76
34a9c     02 16 06 F6 | 	mov	arg03, #2
34aa0     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
34aa4     08 4E 05 F1 | 	add	fp, #8
34aa8     A7 FA 61 FC | 	wrlong	result1, fp
34aac     08 4E 85 F1 | 	sub	fp, #8
34ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
34ab4     C4 02 90 5D |  if_ne	jmp	#LR__5095
34ab8     4C 4E 05 F1 | 	add	fp, #76
34abc     A7 16 02 FB | 	rdlong	arg03, fp
34ac0     40 4E 85 F1 | 	sub	fp, #64
34ac4     A7 16 62 FC | 	wrlong	arg03, fp
34ac8     A7 12 02 F6 | 	mov	arg01, fp
34acc     08 4E 85 F1 | 	sub	fp, #8
34ad0     A7 14 02 FB | 	rdlong	arg02, fp
34ad4     04 4E 85 F1 | 	sub	fp, #4
34ad8     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
34adc     08 4E 05 F1 | 	add	fp, #8
34ae0     A7 FA 61 FC | 	wrlong	result1, fp
34ae4     00 FA 4D F2 | 	cmps	result1, #0 wz
34ae8     08 4E 85 F1 | 	sub	fp, #8
34aec     08 4E 05 A1 |  if_e	add	fp, #8
34af0     A7 10 68 AC |  if_e	wrlong	#8, fp
34af4     08 4E 85 A1 |  if_e	sub	fp, #8
34af8     08 4E 05 F1 | 	add	fp, #8
34afc     A7 FA 01 FB | 	rdlong	result1, fp
34b00     08 4E 85 F1 | 	sub	fp, #8
34b04     04 FA 0D F2 | 	cmp	result1, #4 wz
34b08     70 02 90 5D |  if_ne	jmp	#LR__5094
34b0c     4C 4E 05 F1 | 	add	fp, #76
34b10     A7 16 02 FB | 	rdlong	arg03, fp
34b14     10 4E 85 F1 | 	sub	fp, #16
34b18     A7 16 62 FC | 	wrlong	arg03, fp
34b1c     A7 12 02 F6 | 	mov	arg01, fp
34b20     3C 4E 85 F1 | 	sub	fp, #60
34b24     00 14 06 F6 | 	mov	arg02, #0
34b28     04 AC BF FD | 	call	#_fatfs_cc_create_chain
34b2c     50 4E 05 F1 | 	add	fp, #80
34b30     A7 FA 61 FC | 	wrlong	result1, fp
34b34     48 4E 85 F1 | 	sub	fp, #72
34b38     A7 00 68 FC | 	wrlong	#0, fp
34b3c     48 4E 05 F1 | 	add	fp, #72
34b40     A7 FA 09 FB | 	rdlong	result1, fp wz
34b44     50 4E 85 F1 | 	sub	fp, #80
34b48     08 4E 05 A1 |  if_e	add	fp, #8
34b4c     A7 0E 68 AC |  if_e	wrlong	#7, fp
34b50     08 4E 85 A1 |  if_e	sub	fp, #8
34b54     50 4E 05 F1 | 	add	fp, #80
34b58     A7 FA 01 FB | 	rdlong	result1, fp
34b5c     50 4E 85 F1 | 	sub	fp, #80
34b60     01 FA 0D F2 | 	cmp	result1, #1 wz
34b64     08 4E 05 A1 |  if_e	add	fp, #8
34b68     A7 04 68 AC |  if_e	wrlong	#2, fp
34b6c     08 4E 85 A1 |  if_e	sub	fp, #8
34b70     50 4E 05 F1 | 	add	fp, #80
34b74     A7 16 02 FB | 	rdlong	arg03, fp
34b78     50 4E 85 F1 | 	sub	fp, #80
34b7c     FF FF 7F FF 
34b80     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
34b84     08 4E 05 A1 |  if_e	add	fp, #8
34b88     A7 02 68 AC |  if_e	wrlong	#1, fp
34b8c     08 4E 85 A1 |  if_e	sub	fp, #8
34b90     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
34b94     58 4E 05 F1 | 	add	fp, #88
34b98     A7 FA 61 FC | 	wrlong	result1, fp
34b9c     50 4E 85 F1 | 	sub	fp, #80
34ba0     A7 FA 09 FB | 	rdlong	result1, fp wz
34ba4     08 4E 85 F1 | 	sub	fp, #8
34ba8     1C 01 90 5D |  if_ne	jmp	#LR__5091
34bac     4C 4E 05 F1 | 	add	fp, #76
34bb0     A7 12 02 FB | 	rdlong	arg01, fp
34bb4     04 4E 05 F1 | 	add	fp, #4
34bb8     A7 14 02 FB | 	rdlong	arg02, fp
34bbc     50 4E 85 F1 | 	sub	fp, #80
34bc0     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
34bc4     08 4E 05 F1 | 	add	fp, #8
34bc8     A7 FA 61 FC | 	wrlong	result1, fp
34bcc     00 FA 4D F2 | 	cmps	result1, #0 wz
34bd0     08 4E 85 F1 | 	sub	fp, #8
34bd4     F0 00 90 5D |  if_ne	jmp	#LR__5090
34bd8     4C 4E 05 F1 | 	add	fp, #76
34bdc     A7 12 02 FB | 	rdlong	arg01, fp
34be0     4C 4E 85 F1 | 	sub	fp, #76
34be4     34 12 06 F1 | 	add	arg01, #52
34be8     20 14 06 F6 | 	mov	arg02, #32
34bec     0B 16 06 F6 | 	mov	arg03, #11
34bf0     98 00 A0 FD | 	call	#\builtin_bytefill_
34bf4     4C 4E 05 F1 | 	add	fp, #76
34bf8     A7 FA 01 FB | 	rdlong	result1, fp
34bfc     34 FA 05 F1 | 	add	result1, #52
34c00     FD 5C 48 FC | 	wrbyte	#46, result1
34c04     A7 16 02 FB | 	rdlong	arg03, fp
34c08     3F 16 06 F1 | 	add	arg03, #63
34c0c     0B 21 48 FC | 	wrbyte	#16, arg03
34c10     A7 12 02 FB | 	rdlong	arg01, fp
34c14     4A 12 06 F1 | 	add	arg01, #74
34c18     0C 4E 05 F1 | 	add	fp, #12
34c1c     A7 14 02 FB | 	rdlong	arg02, fp
34c20     09 15 62 FC | 	wrlong	arg02, arg01
34c24     0C 4E 85 F1 | 	sub	fp, #12
34c28     A7 14 02 FB | 	rdlong	arg02, fp
34c2c     0A 13 02 F6 | 	mov	arg01, arg02
34c30     34 14 06 F1 | 	add	arg02, #52
34c34     04 4E 05 F1 | 	add	fp, #4
34c38     A7 16 02 FB | 	rdlong	arg03, fp
34c3c     50 4E 85 F1 | 	sub	fp, #80
34c40     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
34c44     4C 4E 05 F1 | 	add	fp, #76
34c48     A7 14 02 FB | 	rdlong	arg02, fp
34c4c     0A 13 02 F6 | 	mov	arg01, arg02
34c50     54 12 06 F1 | 	add	arg01, #84
34c54     4C 4E 85 F1 | 	sub	fp, #76
34c58     34 14 06 F1 | 	add	arg02, #52
34c5c     20 16 06 F6 | 	mov	arg03, #32
34c60     04 27 BF FD | 	call	#__system____builtin_memmove
34c64     4C 4E 05 F1 | 	add	fp, #76
34c68     A7 16 02 FB | 	rdlong	arg03, fp
34c6c     55 16 06 F1 | 	add	arg03, #85
34c70     0B 5D 48 FC | 	wrbyte	#46, arg03
34c74     38 4E 85 F1 | 	sub	fp, #56
34c78     A7 16 02 FB | 	rdlong	arg03, fp
34c7c     40 4E 05 F1 | 	add	fp, #64
34c80     A7 16 62 FC | 	wrlong	arg03, fp
34c84     08 4E 85 F1 | 	sub	fp, #8
34c88     A7 14 02 FB | 	rdlong	arg02, fp
34c8c     0A 13 02 F6 | 	mov	arg01, arg02
34c90     54 14 06 F1 | 	add	arg02, #84
34c94     4C 4E 85 F1 | 	sub	fp, #76
34c98     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
34c9c     4C 4E 05 F1 | 	add	fp, #76
34ca0     A7 16 02 FB | 	rdlong	arg03, fp
34ca4     03 16 06 F1 | 	add	arg03, #3
34ca8     0B 03 48 FC | 	wrbyte	#1, arg03
34cac     40 4E 85 F1 | 	sub	fp, #64
34cb0     A7 12 02 F6 | 	mov	arg01, fp
34cb4     0C 4E 85 F1 | 	sub	fp, #12
34cb8     44 BA BF FD | 	call	#_fatfs_cc_dir_register
34cbc     08 4E 05 F1 | 	add	fp, #8
34cc0     A7 FA 61 FC | 	wrlong	result1, fp
34cc4     08 4E 85 F1 | 	sub	fp, #8
34cc8                 | LR__5090
34cc8                 | LR__5091
34cc8     08 4E 05 F1 | 	add	fp, #8
34ccc     A7 FA 09 FB | 	rdlong	result1, fp wz
34cd0     08 4E 85 F1 | 	sub	fp, #8
34cd4     88 00 90 5D |  if_ne	jmp	#LR__5092
34cd8     28 4E 05 F1 | 	add	fp, #40
34cdc     A7 12 02 FB | 	rdlong	arg01, fp
34ce0     16 12 06 F1 | 	add	arg01, #22
34ce4     30 4E 05 F1 | 	add	fp, #48
34ce8     A7 14 02 FB | 	rdlong	arg02, fp
34cec     09 15 62 FC | 	wrlong	arg02, arg01
34cf0     0C 4E 85 F1 | 	sub	fp, #12
34cf4     A7 12 02 FB | 	rdlong	arg01, fp
34cf8     24 4E 85 F1 | 	sub	fp, #36
34cfc     A7 14 02 FB | 	rdlong	arg02, fp
34d00     28 4E 05 F1 | 	add	fp, #40
34d04     A7 16 02 FB | 	rdlong	arg03, fp
34d08     50 4E 85 F1 | 	sub	fp, #80
34d0c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
34d10     28 4E 05 F1 | 	add	fp, #40
34d14     A7 FA 01 FB | 	rdlong	result1, fp
34d18     0B FA 05 F1 | 	add	result1, #11
34d1c     FD 20 48 FC | 	wrbyte	#16, result1
34d20     24 4E 05 F1 | 	add	fp, #36
34d24     A7 FA 01 FB | 	rdlong	result1, fp
34d28     03 FA 05 F1 | 	add	result1, #3
34d2c     FD 02 48 FC | 	wrbyte	#1, result1
34d30     44 4E 85 F1 | 	sub	fp, #68
34d34     A7 FA 09 FB | 	rdlong	result1, fp wz
34d38     08 4E 85 F1 | 	sub	fp, #8
34d3c     3C 00 90 5D |  if_ne	jmp	#LR__5093
34d40     4C 4E 05 F1 | 	add	fp, #76
34d44     A7 12 02 FB | 	rdlong	arg01, fp
34d48     4C 4E 85 F1 | 	sub	fp, #76
34d4c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
34d50     08 4E 05 F1 | 	add	fp, #8
34d54     A7 FA 61 FC | 	wrlong	result1, fp
34d58     08 4E 85 F1 | 	sub	fp, #8
34d5c     1C 00 90 FD | 	jmp	#LR__5093
34d60                 | LR__5092
34d60     3C 4E 05 F1 | 	add	fp, #60
34d64     A7 12 02 F6 | 	mov	arg01, fp
34d68     14 4E 05 F1 | 	add	fp, #20
34d6c     A7 14 02 FB | 	rdlong	arg02, fp
34d70     50 4E 85 F1 | 	sub	fp, #80
34d74     00 16 06 F6 | 	mov	arg03, #0
34d78     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
34d7c                 | LR__5093
34d7c                 | LR__5094
34d7c                 | LR__5095
34d7c                 | ' 				remove_chain(&sobj, dcl, 0);
34d7c                 | ' 			}
34d7c                 | ' 		}
34d7c                 | ' 		;
34d7c                 | ' 	}
34d7c                 | ' 
34d7c                 | ' 	return res ;
34d7c     08 4E 05 F1 | 	add	fp, #8
34d80     A7 FA 01 FB | 	rdlong	result1, fp
34d84     08 4E 85 F1 | 	sub	fp, #8
34d88     A7 F0 03 F6 | 	mov	ptra, fp
34d8c     B2 00 A0 FD | 	call	#popregs_
34d90                 | _fatfs_cc_f_mkdir_ret
34d90     2D 00 64 FD | 	ret
34d94                 | 
34d94                 | _fatfs_cc_f_rename
34d94     01 4A 05 F6 | 	mov	COUNT_, #1
34d98     A8 00 A0 FD | 	call	#pushregs_
34d9c     9C F0 07 F1 | 	add	ptra, #156
34da0     04 4E 05 F1 | 	add	fp, #4
34da4     A7 12 62 FC | 	wrlong	arg01, fp
34da8     04 4E 05 F1 | 	add	fp, #4
34dac     A7 14 62 FC | 	wrlong	arg02, fp
34db0     A7 12 02 F6 | 	mov	arg01, fp
34db4     08 4E 85 F1 | 	sub	fp, #8
34db8     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
34dbc     04 4E 05 F1 | 	add	fp, #4
34dc0     A7 12 02 F6 | 	mov	arg01, fp
34dc4     6C 4E 05 F1 | 	add	fp, #108
34dc8     A7 14 02 F6 | 	mov	arg02, fp
34dcc     70 4E 85 F1 | 	sub	fp, #112
34dd0     02 16 06 F6 | 	mov	arg03, #2
34dd4     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
34dd8     0C 4E 05 F1 | 	add	fp, #12
34ddc     A7 FA 61 FC | 	wrlong	result1, fp
34de0     0C 4E 85 F1 | 	sub	fp, #12
34de4     00 FA 0D F2 | 	cmp	result1, #0 wz
34de8     44 03 90 5D |  if_ne	jmp	#LR__5113
34dec     70 4E 05 F1 | 	add	fp, #112
34df0     A7 16 02 FB | 	rdlong	arg03, fp
34df4     60 4E 85 F1 | 	sub	fp, #96
34df8     A7 16 62 FC | 	wrlong	arg03, fp
34dfc     A7 12 02 F6 | 	mov	arg01, fp
34e00     0C 4E 85 F1 | 	sub	fp, #12
34e04     A7 14 02 FB | 	rdlong	arg02, fp
34e08     04 4E 85 F1 | 	sub	fp, #4
34e0c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
34e10     0C 4E 05 F1 | 	add	fp, #12
34e14     A7 FA 61 FC | 	wrlong	result1, fp
34e18     00 FA 4D F2 | 	cmps	result1, #0 wz
34e1c     0C 4E 85 F1 | 	sub	fp, #12
34e20     1C 00 90 5D |  if_ne	jmp	#LR__5100
34e24     3B 4E 05 F1 | 	add	fp, #59
34e28     A7 FA C1 FA | 	rdbyte	result1, fp
34e2c     3B 4E 85 F1 | 	sub	fp, #59
34e30     A0 FA CD F7 | 	test	result1, #160 wz
34e34     0C 4E 05 51 |  if_ne	add	fp, #12
34e38     A7 0C 68 5C |  if_ne	wrlong	#6, fp
34e3c     0C 4E 85 51 |  if_ne	sub	fp, #12
34e40                 | LR__5100
34e40     0C 4E 05 F1 | 	add	fp, #12
34e44     A7 26 0A FB | 	rdlong	local01, fp wz
34e48     0C 4E 85 F1 | 	sub	fp, #12
34e4c     E0 02 90 5D |  if_ne	jmp	#LR__5112
34e50     74 4E 05 F1 | 	add	fp, #116
34e54     A7 12 02 F6 | 	mov	arg01, fp
34e58     48 4E 85 F1 | 	sub	fp, #72
34e5c     A7 14 02 FB | 	rdlong	arg02, fp
34e60     2C 4E 85 F1 | 	sub	fp, #44
34e64     20 16 06 F6 | 	mov	arg03, #32
34e68     FC 24 BF FD | 	call	#__system____builtin_memmove
34e6c     40 4E 05 F1 | 	add	fp, #64
34e70     A7 12 02 F6 | 	mov	arg01, fp
34e74     30 4E 85 F1 | 	sub	fp, #48
34e78     A7 14 02 F6 | 	mov	arg02, fp
34e7c     10 4E 85 F1 | 	sub	fp, #16
34e80     30 16 06 F6 | 	mov	arg03, #48
34e84     E0 24 BF FD | 	call	#__system____builtin_memmove
34e88     40 4E 05 F1 | 	add	fp, #64
34e8c     A7 12 02 F6 | 	mov	arg01, fp
34e90     38 4E 85 F1 | 	sub	fp, #56
34e94     A7 14 02 FB | 	rdlong	arg02, fp
34e98     08 4E 85 F1 | 	sub	fp, #8
34e9c     34 CA BF FD | 	call	#_fatfs_cc_follow_path
34ea0     0C 4E 05 F1 | 	add	fp, #12
34ea4     A7 FA 61 FC | 	wrlong	result1, fp
34ea8     0C 4E 85 F1 | 	sub	fp, #12
34eac     00 FA 0D F2 | 	cmp	result1, #0 wz
34eb0     4C 00 90 5D |  if_ne	jmp	#LR__5103
34eb4     48 4E 05 F1 | 	add	fp, #72
34eb8     A7 FA 01 FB | 	rdlong	result1, fp
34ebc     30 4E 85 F1 | 	sub	fp, #48
34ec0     A7 16 02 FB | 	rdlong	arg03, fp
34ec4     18 4E 85 F1 | 	sub	fp, #24
34ec8     0B FB 09 F2 | 	cmp	result1, arg03 wz
34ecc     20 00 90 5D |  if_ne	jmp	#LR__5101
34ed0     50 4E 05 F1 | 	add	fp, #80
34ed4     A7 FA 01 FB | 	rdlong	result1, fp
34ed8     30 4E 85 F1 | 	sub	fp, #48
34edc     A7 16 02 FB | 	rdlong	arg03, fp
34ee0     20 4E 85 F1 | 	sub	fp, #32
34ee4     0B FB 09 F2 | 	cmp	result1, arg03 wz
34ee8     04 26 06 A6 |  if_e	mov	local01, #4
34eec     04 00 90 AD |  if_e	jmp	#LR__5102
34ef0                 | LR__5101
34ef0     08 26 06 F6 | 	mov	local01, #8
34ef4                 | LR__5102
34ef4     0C 4E 05 F1 | 	add	fp, #12
34ef8     A7 26 62 FC | 	wrlong	local01, fp
34efc     0C 4E 85 F1 | 	sub	fp, #12
34f00                 | LR__5103
34f00     0C 4E 05 F1 | 	add	fp, #12
34f04     A7 26 02 FB | 	rdlong	local01, fp
34f08     0C 4E 85 F1 | 	sub	fp, #12
34f0c     04 26 0E F2 | 	cmp	local01, #4 wz
34f10     CC 01 90 5D |  if_ne	jmp	#LR__5109
34f14     40 4E 05 F1 | 	add	fp, #64
34f18     A7 12 02 F6 | 	mov	arg01, fp
34f1c     40 4E 85 F1 | 	sub	fp, #64
34f20     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
34f24     0C 4E 05 F1 | 	add	fp, #12
34f28     A7 FA 61 FC | 	wrlong	result1, fp
34f2c     0C 4E 85 F1 | 	sub	fp, #12
34f30     00 FA 0D F2 | 	cmp	result1, #0 wz
34f34     A8 01 90 5D |  if_ne	jmp	#LR__5108
34f38     5C 4E 05 F1 | 	add	fp, #92
34f3c     A7 12 02 FB | 	rdlong	arg01, fp
34f40     38 4E 05 F1 | 	add	fp, #56
34f44     A7 12 62 FC | 	wrlong	arg01, fp
34f48     0D 12 06 F1 | 	add	arg01, #13
34f4c     20 4E 85 F1 | 	sub	fp, #32
34f50     A7 14 02 F6 | 	mov	arg02, fp
34f54     74 4E 85 F1 | 	sub	fp, #116
34f58     0D 14 06 F1 | 	add	arg02, #13
34f5c     13 16 06 F6 | 	mov	arg03, #19
34f60     04 24 BF FD | 	call	#__system____builtin_memmove
34f64     94 4E 05 F1 | 	add	fp, #148
34f68     A7 26 02 FB | 	rdlong	local01, fp
34f6c     15 4E 85 F1 | 	sub	fp, #21
34f70     A7 FA C1 FA | 	rdbyte	result1, fp
34f74     0B 26 06 F1 | 	add	local01, #11
34f78     13 FB 41 FC | 	wrbyte	result1, local01
34f7c     15 4E 05 F1 | 	add	fp, #21
34f80     A7 26 02 FB | 	rdlong	local01, fp
34f84     94 4E 85 F1 | 	sub	fp, #148
34f88     0B 26 06 F1 | 	add	local01, #11
34f8c     13 27 C2 FA | 	rdbyte	local01, local01
34f90     10 26 CE F7 | 	test	local01, #16 wz
34f94     24 00 90 5D |  if_ne	jmp	#LR__5104
34f98     94 4E 05 F1 | 	add	fp, #148
34f9c     A7 FA 01 FB | 	rdlong	result1, fp
34fa0     FD 26 02 F6 | 	mov	local01, result1
34fa4     94 4E 85 F1 | 	sub	fp, #148
34fa8     0B FA 05 F1 | 	add	result1, #11
34fac     FD FA C1 FA | 	rdbyte	result1, result1
34fb0     20 FA 45 F5 | 	or	result1, #32
34fb4     0B 26 06 F1 | 	add	local01, #11
34fb8     13 FB 41 FC | 	wrbyte	result1, local01
34fbc                 | LR__5104
34fbc     70 4E 05 F1 | 	add	fp, #112
34fc0     A7 26 02 FB | 	rdlong	local01, fp
34fc4     03 26 06 F1 | 	add	local01, #3
34fc8     13 03 48 FC | 	wrbyte	#1, local01
34fcc     24 4E 05 F1 | 	add	fp, #36
34fd0     A7 26 02 FB | 	rdlong	local01, fp
34fd4     94 4E 85 F1 | 	sub	fp, #148
34fd8     0B 26 06 F1 | 	add	local01, #11
34fdc     13 27 C2 FA | 	rdbyte	local01, local01
34fe0     10 26 CE F7 | 	test	local01, #16 wz
34fe4     F8 00 90 AD |  if_e	jmp	#LR__5107
34fe8     18 4E 05 F1 | 	add	fp, #24
34fec     A7 16 02 FB | 	rdlong	arg03, fp
34ff0     30 4E 05 F1 | 	add	fp, #48
34ff4     A7 26 02 FB | 	rdlong	local01, fp
34ff8     48 4E 85 F1 | 	sub	fp, #72
34ffc     13 17 0A F2 | 	cmp	arg03, local01 wz
35000     DC 00 90 AD |  if_e	jmp	#LR__5107
35004     70 4E 05 F1 | 	add	fp, #112
35008     A7 12 02 FB | 	rdlong	arg01, fp
3500c     09 27 02 F6 | 	mov	local01, arg01
35010     24 4E 05 F1 | 	add	fp, #36
35014     A7 14 02 FB | 	rdlong	arg02, fp
35018     94 4E 85 F1 | 	sub	fp, #148
3501c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
35020     FD 14 02 F6 | 	mov	arg02, result1
35024     13 13 02 F6 | 	mov	arg01, local01
35028     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
3502c     98 4E 05 F1 | 	add	fp, #152
35030     A7 FA 61 FC | 	wrlong	result1, fp
35034     00 FA 4D F2 | 	cmps	result1, #0 wz
35038     98 4E 85 F1 | 	sub	fp, #152
3503c     0C 4E 05 A1 |  if_e	add	fp, #12
35040     A7 04 68 AC |  if_e	wrlong	#2, fp
35044     0C 4E 85 A1 |  if_e	sub	fp, #12
35048     94 00 90 AD |  if_e	jmp	#LR__5106
3504c     70 4E 05 F1 | 	add	fp, #112
35050     A7 12 02 FB | 	rdlong	arg01, fp
35054     28 4E 05 F1 | 	add	fp, #40
35058     A7 14 02 FB | 	rdlong	arg02, fp
3505c     98 4E 85 F1 | 	sub	fp, #152
35060     4C A0 BF FD | 	call	#_fatfs_cc_move_window
35064     0C 4E 05 F1 | 	add	fp, #12
35068     A7 FA 61 FC | 	wrlong	result1, fp
3506c     64 4E 05 F1 | 	add	fp, #100
35070     A7 26 02 FB | 	rdlong	local01, fp
35074     54 26 06 F1 | 	add	local01, #84
35078     24 4E 05 F1 | 	add	fp, #36
3507c     A7 26 62 FC | 	wrlong	local01, fp
35080     88 4E 85 F1 | 	sub	fp, #136
35084     A7 26 0A FB | 	rdlong	local01, fp wz
35088     0C 4E 85 F1 | 	sub	fp, #12
3508c     50 00 90 5D |  if_ne	jmp	#LR__5105
35090     94 4E 05 F1 | 	add	fp, #148
35094     A7 26 02 FB | 	rdlong	local01, fp
35098     94 4E 85 F1 | 	sub	fp, #148
3509c     01 26 06 F1 | 	add	local01, #1
350a0     13 27 C2 FA | 	rdbyte	local01, local01
350a4     2E 26 0E F2 | 	cmp	local01, #46 wz
350a8     34 00 90 5D |  if_ne	jmp	#LR__5105
350ac     70 4E 05 F1 | 	add	fp, #112
350b0     A7 12 02 FB | 	rdlong	arg01, fp
350b4     24 4E 05 F1 | 	add	fp, #36
350b8     A7 14 02 FB | 	rdlong	arg02, fp
350bc     4C 4E 85 F1 | 	sub	fp, #76
350c0     A7 16 02 FB | 	rdlong	arg03, fp
350c4     48 4E 85 F1 | 	sub	fp, #72
350c8     50 AD BF FD | 	call	#_fatfs_cc_st_clust
350cc     70 4E 05 F1 | 	add	fp, #112
350d0     A7 26 02 FB | 	rdlong	local01, fp
350d4     70 4E 85 F1 | 	sub	fp, #112
350d8     03 26 06 F1 | 	add	local01, #3
350dc     13 03 48 FC | 	wrbyte	#1, local01
350e0                 | LR__5105
350e0                 | LR__5106
350e0                 | LR__5107
350e0                 | LR__5108
350e0                 | LR__5109
350e0     0C 4E 05 F1 | 	add	fp, #12
350e4     A7 26 0A FB | 	rdlong	local01, fp wz
350e8     0C 4E 85 F1 | 	sub	fp, #12
350ec     40 00 90 5D |  if_ne	jmp	#LR__5111
350f0     10 4E 05 F1 | 	add	fp, #16
350f4     A7 12 02 F6 | 	mov	arg01, fp
350f8     10 4E 85 F1 | 	sub	fp, #16
350fc     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
35100     0C 4E 05 F1 | 	add	fp, #12
35104     A7 FA 61 FC | 	wrlong	result1, fp
35108     0C 4E 85 F1 | 	sub	fp, #12
3510c     00 FA 0D F2 | 	cmp	result1, #0 wz
35110     1C 00 90 5D |  if_ne	jmp	#LR__5110
35114     70 4E 05 F1 | 	add	fp, #112
35118     A7 12 02 FB | 	rdlong	arg01, fp
3511c     70 4E 85 F1 | 	sub	fp, #112
35120     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
35124     0C 4E 05 F1 | 	add	fp, #12
35128     A7 FA 61 FC | 	wrlong	result1, fp
3512c     0C 4E 85 F1 | 	sub	fp, #12
35130                 | LR__5110
35130                 | LR__5111
35130                 | LR__5112
35130                 | LR__5113
35130                 | ' 					res = sync_fs(fs);
35130                 | ' 				}
35130                 | ' 			}
35130                 | ' 
35130                 | ' 		}
35130                 | ' 		;
35130                 | ' 	}
35130                 | ' 
35130                 | ' 	return res ;
35130     0C 4E 05 F1 | 	add	fp, #12
35134     A7 FA 01 FB | 	rdlong	result1, fp
35138     0C 4E 85 F1 | 	sub	fp, #12
3513c     A7 F0 03 F6 | 	mov	ptra, fp
35140     B2 00 A0 FD | 	call	#popregs_
35144                 | _fatfs_cc_f_rename_ret
35144     2D 00 64 FD | 	ret
35148                 | 
35148                 | _fatfs_cc_time
35148     00 4A 05 F6 | 	mov	COUNT_, #0
3514c     A8 00 A0 FD | 	call	#pushregs_
35150     14 F0 07 F1 | 	add	ptra, #20
35154     04 4E 05 F1 | 	add	fp, #4
35158     A7 12 62 FC | 	wrlong	arg01, fp
3515c     04 4E 05 F1 | 	add	fp, #4
35160     A7 12 02 F6 | 	mov	arg01, fp
35164     08 4E 85 F1 | 	sub	fp, #8
35168     00 14 06 F6 | 	mov	arg02, #0
3516c     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
35170     08 4E 05 F1 | 	add	fp, #8
35174     A7 FA 01 FB | 	rdlong	result1, fp
35178     08 4E 05 F1 | 	add	fp, #8
3517c     A7 FA 61 FC | 	wrlong	result1, fp
35180     0C 4E 85 F1 | 	sub	fp, #12
35184     A7 FA 09 FB | 	rdlong	result1, fp wz
35188     04 4E 85 F1 | 	sub	fp, #4
3518c     18 00 90 AD |  if_e	jmp	#LR__5120
35190     04 4E 05 F1 | 	add	fp, #4
35194     A7 FA 01 FB | 	rdlong	result1, fp
35198     0C 4E 05 F1 | 	add	fp, #12
3519c     A7 14 02 FB | 	rdlong	arg02, fp
351a0     10 4E 85 F1 | 	sub	fp, #16
351a4     FD 14 62 FC | 	wrlong	arg02, result1
351a8                 | LR__5120
351a8                 | '         *tp = now;
351a8                 | '     return now;
351a8     10 4E 05 F1 | 	add	fp, #16
351ac     A7 FA 01 FB | 	rdlong	result1, fp
351b0     10 4E 85 F1 | 	sub	fp, #16
351b4     A7 F0 03 F6 | 	mov	ptra, fp
351b8     B2 00 A0 FD | 	call	#popregs_
351bc                 | _fatfs_cc_time_ret
351bc     2D 00 64 FD | 	ret
351c0                 | 
351c0                 | _fatfs_cc_mktime
351c0     06 4A 05 F6 | 	mov	COUNT_, #6
351c4     A8 00 A0 FD | 	call	#pushregs_
351c8     09 27 02 F6 | 	mov	local01, arg01
351cc     14 26 06 F1 | 	add	local01, #20
351d0     13 13 02 FB | 	rdlong	arg01, local01
351d4     14 26 86 F1 | 	sub	local01, #20
351d8     46 12 56 F2 | 	cmps	arg01, #70 wc
351dc                 | '                 return (time_t) -1;
351dc     01 FA 65 C6 |  if_b	neg	result1, #1
351e0     7C 01 90 CD |  if_b	jmp	#LR__5134
351e4     03 00 00 FF 
351e8     6C 29 06 F6 | 	mov	local02, ##1900
351ec     14 26 06 F1 | 	add	local01, #20
351f0     13 FB 01 FB | 	rdlong	result1, local01
351f4     FD 28 02 F1 | 	add	local02, result1
351f8     08 26 86 F1 | 	sub	local01, #8
351fc     13 2B 02 FB | 	rdlong	local03, local01
35200     01 2A 86 F1 | 	sub	local03, #1
35204     04 26 06 F1 | 	add	local01, #4
35208     13 13 02 FB | 	rdlong	arg01, local01
3520c     10 26 86 F1 | 	sub	local01, #16
35210     02 12 66 F0 | 	shl	arg01, #2
35214     02 00 00 FF 
35218     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
3521c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35220     09 FB 01 FB | 	rdlong	result1, arg01
35224     FD 2A 02 F1 | 	add	local03, result1
35228     14 13 02 F6 | 	mov	arg01, local02
3522c     02 00 00 FF 
35230     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
35234     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
35238     00 FA 0D F2 | 	cmp	result1, #0 wz
3523c     1C 00 90 AD |  if_e	jmp	#LR__5130
35240     00 2C 06 F6 | 	mov	local04, #0
35244     10 26 06 F1 | 	add	local01, #16
35248     13 FB 01 FB | 	rdlong	result1, local01
3524c     10 26 86 F1 | 	sub	local01, #16
35250     02 FA 55 F2 | 	cmps	result1, #2 wc
35254     01 2C 06 36 |  if_ae	mov	local04, #1
35258     04 00 90 FD | 	jmp	#LR__5131
3525c                 | LR__5130
3525c     00 2C 06 F6 | 	mov	local04, #0
35260                 | LR__5131
35260     04 26 06 F1 | 	add	local01, #4
35264     13 FB 01 FB | 	rdlong	result1, local01
35268     04 26 86 F1 | 	sub	local01, #4
3526c     13 2F 02 FB | 	rdlong	local05, local01
35270     08 26 06 F1 | 	add	local01, #8
35274     13 13 02 FB | 	rdlong	arg01, local01
35278     07 00 00 FF 
3527c     10 12 06 FD | 	qmul	arg01, ##3600
35280     16 2B 02 F1 | 	add	local03, local04
35284     FD 2C 02 F6 | 	mov	local04, result1
35288     04 2C 66 F0 | 	shl	local04, #4
3528c     FD 2C 82 F1 | 	sub	local04, result1
35290     02 2C 66 F0 | 	shl	local04, #2
35294     16 2F 02 F1 | 	add	local05, local04
35298     08 26 86 F1 | 	sub	local01, #8
3529c     18 2C 62 FD | 	getqx	local04
352a0     A8 00 00 FF 
352a4     80 2B 06 FD | 	qmul	local03, ##86400
352a8     16 2F 02 F1 | 	add	local05, local04
352ac     14 2B 02 F6 | 	mov	local03, local02
352b0     03 00 00 FF 
352b4     B2 2B 86 F1 | 	sub	local03, ##1970
352b8     18 2C 62 FD | 	getqx	local04
352bc     99 F0 00 FF 
352c0     80 2B 06 FD | 	qmul	local03, ##31536000
352c4     16 2F 02 F1 | 	add	local05, local04
352c8     14 2B 02 F6 | 	mov	local03, local02
352cc     03 00 00 FF 
352d0     B1 2B 86 F1 | 	sub	local03, ##1969
352d4     15 31 52 F6 | 	abs	local06, local03 wc
352d8     02 30 46 F0 | 	shr	local06, #2
352dc     18 31 82 F6 | 	negc	local06, local06
352e0     03 00 00 FF 
352e4     D1 29 56 F2 | 	cmps	local02, ##2001 wc
352e8     18 2C 62 FD | 	getqx	local04
352ec     16 2F 02 F1 | 	add	local05, local04
352f0     18 00 90 CD |  if_b	jmp	#LR__5132
352f4     03 00 00 FF 
352f8     D0 29 86 F1 | 	sub	local02, ##2000
352fc     14 2D 52 F6 | 	abs	local04, local02 wc
35300     64 2C 16 FD | 	qdiv	local04, #100
35304     18 2C 62 FD | 	getqx	local04
35308     16 31 A2 F3 | 	sumnc	local06, local04
3530c                 | LR__5132
3530c     A8 00 00 FF 
35310     80 31 06 FD | 	qmul	local06, ##86400
35314     18 30 62 FD | 	getqx	local06
35318     18 2F 02 F1 | 	add	local05, local06
3531c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
35320     02 00 00 FF 
35324     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
35328     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
3532c     18 2F 02 F1 | 	add	local05, local06
35330     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
35334     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
35338     02 00 00 FF 
3533c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
35340     01 2A 0E F2 | 	cmp	local03, #1 wz
35344     14 00 90 5D |  if_ne	jmp	#LR__5133
35348     13 13 02 F6 | 	mov	arg01, local01
3534c     D8 19 B0 FD | 	call	#_fatfs_cc___indst
35350     00 FA 0D F2 | 	cmp	result1, #0 wz
35354     07 00 00 5F 
35358     10 2E 86 51 |  if_ne	sub	local05, ##3600
3535c                 | LR__5133
3535c                 | '                 s -=  (3600L) ;
3535c                 | ' 
3535c                 | '         return s;
3535c     17 FB 01 F6 | 	mov	result1, local05
35360                 | LR__5134
35360     A7 F0 03 F6 | 	mov	ptra, fp
35364     B2 00 A0 FD | 	call	#popregs_
35368                 | _fatfs_cc_mktime_ret
35368     2D 00 64 FD | 	ret
3536c                 | 
3536c                 | _fatfs_cc__gmtime_r
3536c     03 4A 05 F6 | 	mov	COUNT_, #3
35370     A8 00 A0 FD | 	call	#pushregs_
35374     09 27 02 FB | 	rdlong	local01, arg01
35378     A8 00 00 FF 
3537c     80 27 16 FD | 	qdiv	local01, ##86400
35380     18 FA 61 FD | 	getqx	result1
35384     04 FA 05 F1 | 	add	result1, #4
35388     07 FA 15 FD | 	qdiv	result1, #7
3538c     18 14 06 F1 | 	add	arg02, #24
35390     D1 7F 27 FF 
35394     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
35398     D1 7F 27 3F 
3539c     00 26 86 31 |  if_ae	sub	local01, ##1325376000
353a0     03 00 00 3F 
353a4     DC 29 06 36 |  if_ae	mov	local02, ##2012
353a8     03 00 00 CF 
353ac     B2 29 06 C6 |  if_b	mov	local02, ##1970
353b0                 | ' 	  year = 1970;
353b0                 | ' 	}
353b0                 | ' 
353b0                 | ' 	for(;;) {
353b0     19 FA 61 FD | 	getqy	result1
353b4     0A FB 61 FC | 	wrlong	result1, arg02
353b8     18 14 86 F1 | 	sub	arg02, #24
353bc                 | LR__5140
353bc     14 13 02 F6 | 	mov	arg01, local02
353c0     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
353c4     00 FA 0D F2 | 	cmp	result1, #0 wz
353c8     42 F1 00 5F 
353cc     00 2B 06 56 |  if_ne	mov	local03, ##31622400
353d0     99 F0 00 AF 
353d4     80 2B 06 A6 |  if_e	mov	local03, ##31536000
353d8     15 27 12 F2 | 	cmp	local01, local03 wc
353dc                 | ' 	    break;
353dc     01 28 06 31 |  if_ae	add	local02, #1
353e0     15 27 82 31 |  if_ae	sub	local01, local03
353e4     D4 FF 9F 3D |  if_ae	jmp	#LR__5140
353e8     A8 00 00 FF 
353ec     80 27 16 FD | 	qdiv	local01, ##86400
353f0     14 2B 02 F6 | 	mov	local03, local02
353f4     03 00 00 FF 
353f8     6C 2B 86 F1 | 	sub	local03, ##1900
353fc     14 14 06 F1 | 	add	arg02, #20
35400     0A 2B 62 FC | 	wrlong	local03, arg02
35404     08 14 06 F1 | 	add	arg02, #8
35408     14 13 02 F6 | 	mov	arg01, local02
3540c     18 28 62 FD | 	getqx	local02
35410     0A 29 62 FC | 	wrlong	local02, arg02
35414     1C 14 86 F1 | 	sub	arg02, #28
35418     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
3541c     00 FA 0D F2 | 	cmp	result1, #0 wz
35420     1D 2A 06 56 |  if_ne	mov	local03, #29
35424     1C 2A 06 A6 |  if_e	mov	local03, #28
35428     02 00 00 FF 
3542c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
35430     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
35434     02 00 00 FF 
35438     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
3543c                 | ' 
3543c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
3543c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
3543c     00 12 06 F6 | 	mov	arg01, #0
35440     97 2A 48 FB | 	callpa	#(@LR__5142-@LR__5141)>>2,fcache_load_ptr_
35444                 | LR__5141
35444     09 2B 02 F6 | 	mov	local03, arg01
35448     02 2A 66 F0 | 	shl	local03, #2
3544c     02 00 00 FF 
35450     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
35454     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
35458     15 2B 02 FB | 	rdlong	local03, local03
3545c     15 29 52 F2 | 	cmps	local02, local03 wc
35460     02 00 00 FF 
35464     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
35468     2C 00 90 CD |  if_b	jmp	#LR__5143
3546c     09 2B 02 F6 | 	mov	local03, arg01
35470     02 2A 66 F0 | 	shl	local03, #2
35474     02 00 00 FF 
35478     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
3547c     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
35480     15 2B 02 FB | 	rdlong	local03, local03
35484     15 29 82 F1 | 	sub	local02, local03
35488     01 12 06 F1 | 	add	arg01, #1
3548c     02 00 00 FF 
35490     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
35494     AC FF 9F FD | 	jmp	#LR__5141
35498                 | LR__5142
35498                 | LR__5143
35498     A8 00 00 FF 
3549c     80 27 16 FD | 	qdiv	local01, ##86400
354a0     10 14 06 F1 | 	add	arg02, #16
354a4     0A 13 62 FC | 	wrlong	arg01, arg02
354a8     01 28 06 F1 | 	add	local02, #1
354ac     04 14 86 F1 | 	sub	arg02, #4
354b0     0A 29 62 FC | 	wrlong	local02, arg02
354b4     19 26 62 FD | 	getqy	local01
354b8     07 00 00 FF 
354bc     10 26 16 FD | 	qdiv	local01, ##3600
354c0     18 2A 62 FD | 	getqx	local03
354c4     07 00 00 FF 
354c8     10 26 16 FD | 	qdiv	local01, ##3600
354cc     04 14 86 F1 | 	sub	arg02, #4
354d0     0A 2B 62 FC | 	wrlong	local03, arg02
354d4     19 26 62 FD | 	getqy	local01
354d8     3C 26 16 FD | 	qdiv	local01, #60
354dc     18 2A 62 FD | 	getqx	local03
354e0     3C 26 16 FD | 	qdiv	local01, #60
354e4     04 14 86 F1 | 	sub	arg02, #4
354e8     0A 2B 62 FC | 	wrlong	local03, arg02
354ec     04 14 86 F1 | 	sub	arg02, #4
354f0                 | '         stm->tm_isdst = 0;
354f0                 | ' 
354f0                 | ' ;
354f0                 | '         return stm;
354f0     0A FB 01 F6 | 	mov	result1, arg02
354f4     19 2A 62 FD | 	getqy	local03
354f8     0A 2B 62 FC | 	wrlong	local03, arg02
354fc     20 14 06 F1 | 	add	arg02, #32
35500     0A 01 68 FC | 	wrlong	#0, arg02
35504     A7 F0 03 F6 | 	mov	ptra, fp
35508     B2 00 A0 FD | 	call	#popregs_
3550c                 | _fatfs_cc__gmtime_r_ret
3550c     2D 00 64 FD | 	ret
35510                 | 
35510                 | _fatfs_cc__tzset
35510     B8 01 00 FF 
35514     51 12 06 F6 | 	mov	arg01, ##@LR__5455
35518     34 00 B0 FD | 	call	#_fatfs_cc_getenv
3551c     FD 12 02 F6 | 	mov	arg01, result1
35520     02 00 00 FF 
35524     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
35528     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
3552c     02 00 00 FF 
35530     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
35534     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
35538     02 00 00 FF 
3553c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
35540     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
35544     02 00 00 FF 
35548     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
3554c                 | _fatfs_cc__tzset_ret
3554c     2D 00 64 FD | 	ret
35550                 | 
35550                 | _fatfs_cc_getenv
35550     06 4A 05 F6 | 	mov	COUNT_, #6
35554     A8 00 A0 FD | 	call	#pushregs_
35558     09 27 02 F6 | 	mov	local01, arg01
3555c     09 29 02 F6 | 	mov	local02, arg01
35560     97 06 48 FB | 	callpa	#(@LR__5151-@LR__5150)>>2,fcache_load_ptr_
35564                 | LR__5150
35564     14 FB C9 FA | 	rdbyte	result1, local02 wz
35568     01 28 06 51 |  if_ne	add	local02, #1
3556c     F4 FF 9F 5D |  if_ne	jmp	#LR__5150
35570                 | LR__5151
35570     09 29 82 F1 | 	sub	local02, arg01
35574     14 FB 01 F6 | 	mov	result1, local02
35578     02 00 00 FF 
3557c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
35580     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
35584     02 00 00 FF 
35588     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
3558c                 | '             return 0;
3558c     00 FA 05 A6 |  if_e	mov	result1, #0
35590     5C 00 90 AD |  if_e	jmp	#LR__5154
35594                 | ' 
35594                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
35594     02 00 00 FF 
35598     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
3559c     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
355a0     02 00 00 FF 
355a4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
355a8                 | LR__5152
355a8     15 2D 0A FB | 	rdlong	local04, local03 wz
355ac     3C 00 90 AD |  if_e	jmp	#LR__5153
355b0     16 13 02 F6 | 	mov	arg01, local04
355b4     13 15 02 F6 | 	mov	arg02, local01
355b8     14 17 02 F6 | 	mov	arg03, local02
355bc     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
355c0     00 FA 0D F2 | 	cmp	result1, #0 wz
355c4     14 2F 02 A6 |  if_e	mov	local05, local02
355c8     16 2F 02 A1 |  if_e	add	local05, local04
355cc     17 31 C2 AA |  if_e	rdbyte	local06, local05
355d0     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
355d4                 | ' 			return name+len+1;
355d4     14 2D 02 A1 |  if_e	add	local04, local02
355d8     01 2C 06 A1 |  if_e	add	local04, #1
355dc     16 FB 01 A6 |  if_e	mov	result1, local04
355e0     0C 00 90 AD |  if_e	jmp	#LR__5154
355e4     04 2A 06 F1 | 	add	local03, #4
355e8     BC FF 9F FD | 	jmp	#LR__5152
355ec                 | LR__5153
355ec                 | ' 	}
355ec                 | ' 	return 0;
355ec     00 FA 05 F6 | 	mov	result1, #0
355f0                 | LR__5154
355f0     A7 F0 03 F6 | 	mov	ptra, fp
355f4     B2 00 A0 FD | 	call	#popregs_
355f8                 | _fatfs_cc_getenv_ret
355f8     2D 00 64 FD | 	ret
355fc                 | 
355fc                 | _fatfs_cc__get_fattime
355fc     00 4A 05 F6 | 	mov	COUNT_, #0
35600     A8 00 A0 FD | 	call	#pushregs_
35604     34 F0 07 F1 | 	add	ptra, #52
35608     00 12 06 F6 | 	mov	arg01, #0
3560c     38 FB BF FD | 	call	#_fatfs_cc_time
35610     04 4E 05 F1 | 	add	fp, #4
35614     A7 FA 61 FC | 	wrlong	result1, fp
35618     A7 12 02 F6 | 	mov	arg01, fp
3561c     0C 4E 05 F1 | 	add	fp, #12
35620     A7 14 02 F6 | 	mov	arg02, fp
35624     10 4E 85 F1 | 	sub	fp, #16
35628     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
3562c     24 4E 05 F1 | 	add	fp, #36
35630     A7 14 02 FB | 	rdlong	arg02, fp
35634     50 14 86 F1 | 	sub	arg02, #80
35638     09 14 66 F0 | 	shl	arg02, #9
3563c     04 4E 85 F1 | 	sub	fp, #4
35640     A7 FA 01 FB | 	rdlong	result1, fp
35644     01 FA 05 F1 | 	add	result1, #1
35648     05 FA 65 F0 | 	shl	result1, #5
3564c     FD 14 42 F5 | 	or	arg02, result1
35650     04 4E 85 F1 | 	sub	fp, #4
35654     A7 FA 01 FB | 	rdlong	result1, fp
35658     FD 14 42 F5 | 	or	arg02, result1
3565c     14 4E 85 F1 | 	sub	fp, #20
35660     A7 14 62 FC | 	wrlong	arg02, fp
35664     10 4E 05 F1 | 	add	fp, #16
35668     A7 14 02 FB | 	rdlong	arg02, fp
3566c     0B 14 66 F0 | 	shl	arg02, #11
35670     04 4E 85 F1 | 	sub	fp, #4
35674     A7 FA 01 FB | 	rdlong	result1, fp
35678     05 FA 65 F0 | 	shl	result1, #5
3567c     FD 14 42 F5 | 	or	arg02, result1
35680     04 4E 85 F1 | 	sub	fp, #4
35684     A7 FA 01 FB | 	rdlong	result1, fp
35688     FD 14 42 F5 | 	or	arg02, result1
3568c     04 4E 85 F1 | 	sub	fp, #4
35690     A7 14 62 FC | 	wrlong	arg02, fp
35694                 | ' 
35694                 | '     now = time(0);
35694                 | '     _gmtime_r (&now, &date);
35694                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
35694                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
35694                 | '     return (ffdate << 16) | fftime;
35694     04 4E 85 F1 | 	sub	fp, #4
35698     A7 FA 01 FB | 	rdlong	result1, fp
3569c     10 FA 65 F0 | 	shl	result1, #16
356a0     08 4E 85 F1 | 	sub	fp, #8
356a4     0A FB 41 F5 | 	or	result1, arg02
356a8     A7 F0 03 F6 | 	mov	ptra, fp
356ac     B2 00 A0 FD | 	call	#popregs_
356b0                 | _fatfs_cc__get_fattime_ret
356b0     2D 00 64 FD | 	ret
356b4                 | 
356b4                 | _fatfs_cc_unixtime_1045
356b4     00 4A 05 F6 | 	mov	COUNT_, #0
356b8     A8 00 A0 FD | 	call	#pushregs_
356bc     34 F0 07 F1 | 	add	ptra, #52
356c0     04 4E 05 F1 | 	add	fp, #4
356c4     A7 12 62 FC | 	wrlong	arg01, fp
356c8     04 4E 05 F1 | 	add	fp, #4
356cc     A7 14 62 FC | 	wrlong	arg02, fp
356d0     04 4E 85 F1 | 	sub	fp, #4
356d4     A7 14 02 FB | 	rdlong	arg02, fp
356d8     09 14 46 F0 | 	shr	arg02, #9
356dc     7F 14 06 F5 | 	and	arg02, #127
356e0     50 FA 05 F6 | 	mov	result1, #80
356e4     0A FB 01 F1 | 	add	result1, arg02
356e8     20 4E 05 F1 | 	add	fp, #32
356ec     A7 FA 61 FC | 	wrlong	result1, fp
356f0     20 4E 85 F1 | 	sub	fp, #32
356f4     A7 FA 01 FB | 	rdlong	result1, fp
356f8     05 FA 45 F0 | 	shr	result1, #5
356fc     FD FA 41 F8 | 	getnib	result1, result1, #0
35700     01 FA 85 F1 | 	sub	result1, #1
35704     1C 4E 05 F1 | 	add	fp, #28
35708     A7 FA 61 FC | 	wrlong	result1, fp
3570c     1C 4E 85 F1 | 	sub	fp, #28
35710     A7 FA 01 FB | 	rdlong	result1, fp
35714     1F FA 05 F5 | 	and	result1, #31
35718     18 4E 05 F1 | 	add	fp, #24
3571c     A7 FA 61 FC | 	wrlong	result1, fp
35720     14 4E 85 F1 | 	sub	fp, #20
35724     A7 FA 01 FB | 	rdlong	result1, fp
35728     0B FA 45 F0 | 	shr	result1, #11
3572c     1F FA 05 F5 | 	and	result1, #31
35730     10 4E 05 F1 | 	add	fp, #16
35734     A7 FA 61 FC | 	wrlong	result1, fp
35738     10 4E 85 F1 | 	sub	fp, #16
3573c     A7 FA 01 FB | 	rdlong	result1, fp
35740     05 FA 45 F0 | 	shr	result1, #5
35744     3F FA 05 F5 | 	and	result1, #63
35748     0C 4E 05 F1 | 	add	fp, #12
3574c     A7 FA 61 FC | 	wrlong	result1, fp
35750     0C 4E 85 F1 | 	sub	fp, #12
35754     A7 14 02 FB | 	rdlong	arg02, fp
35758     1F 14 06 F5 | 	and	arg02, #31
3575c     01 14 66 F0 | 	shl	arg02, #1
35760     08 4E 05 F1 | 	add	fp, #8
35764     A7 14 62 FC | 	wrlong	arg02, fp
35768     A7 12 02 F6 | 	mov	arg01, fp
3576c     10 4E 85 F1 | 	sub	fp, #16
35770     4C FA BF FD | 	call	#_fatfs_cc_mktime
35774     0C 4E 05 F1 | 	add	fp, #12
35778     A7 FA 61 FC | 	wrlong	result1, fp
3577c                 | ' 
3577c                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
3577c                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
3577c                 | '     date.tm_mday = (dosdate & 0x1f);
3577c                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
3577c                 | '     date.tm_min = (dostime >> 5) & 0x3f;
3577c                 | '     date.tm_sec = (dostime & 0x1f) << 1;
3577c                 | ' 
3577c                 | '     t = mktime(&date);
3577c                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
3577c                 | '     return t;
3577c     0C 4E 85 F1 | 	sub	fp, #12
35780     A7 F0 03 F6 | 	mov	ptra, fp
35784     B2 00 A0 FD | 	call	#popregs_
35788                 | _fatfs_cc_unixtime_1045_ret
35788     2D 00 64 FD | 	ret
3578c                 | 
3578c                 | _fatfs_cc__set_dos_error_1047
3578c     09 01 02 F6 | 	mov	_var01, arg01
35790                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
35790                 | '     switch (derr) {
35790     14 00 26 F3 | 	fle	_var01, #20
35794     30 00 62 FD | 	jmprel	_var01
35798                 | LR__5160
35798     50 00 90 FD | 	jmp	#LR__5161
3579c     84 00 90 FD | 	jmp	#LR__5175
357a0     80 00 90 FD | 	jmp	#LR__5176
357a4     7C 00 90 FD | 	jmp	#LR__5177
357a8     48 00 90 FD | 	jmp	#LR__5162
357ac     44 00 90 FD | 	jmp	#LR__5163
357b0     40 00 90 FD | 	jmp	#LR__5164
357b4     44 00 90 FD | 	jmp	#LR__5165
357b8     48 00 90 FD | 	jmp	#LR__5167
357bc     54 00 90 FD | 	jmp	#LR__5170
357c0     38 00 90 FD | 	jmp	#LR__5166
357c4     4C 00 90 FD | 	jmp	#LR__5171
357c8     48 00 90 FD | 	jmp	#LR__5172
357cc     44 00 90 FD | 	jmp	#LR__5173
357d0     50 00 90 FD | 	jmp	#LR__5178
357d4     4C 00 90 FD | 	jmp	#LR__5178
357d8     48 00 90 FD | 	jmp	#LR__5178
357dc     2C 00 90 FD | 	jmp	#LR__5168
357e0     38 00 90 FD | 	jmp	#LR__5174
357e4     2C 00 90 FD | 	jmp	#LR__5169
357e8     38 00 90 FD | 	jmp	#LR__5178
357ec                 | LR__5161
357ec     00 02 06 F6 | 	mov	_var02, #0
357f0                 | '         r = 0;
357f0                 | '         break;
357f0     34 00 90 FD | 	jmp	#LR__5179
357f4                 | LR__5162
357f4                 | LR__5163
357f4                 | LR__5164
357f4     04 02 06 F6 | 	mov	_var02, #4
357f8                 | '         r =  4 ;
357f8                 | '         break;
357f8     2C 00 90 FD | 	jmp	#LR__5179
357fc                 | LR__5165
357fc                 | LR__5166
357fc     06 02 06 F6 | 	mov	_var02, #6
35800                 | '         r =  6 ;
35800                 | '         break;
35800     24 00 90 FD | 	jmp	#LR__5179
35804                 | LR__5167
35804     09 02 06 F6 | 	mov	_var02, #9
35808                 | '         r =  9 ;
35808                 | '         break;
35808     1C 00 90 FD | 	jmp	#LR__5179
3580c                 | LR__5168
3580c     07 02 06 F6 | 	mov	_var02, #7
35810                 | '         r =  7 ;
35810                 | '         break;
35810     14 00 90 FD | 	jmp	#LR__5179
35814                 | LR__5169
35814                 | LR__5170
35814                 | LR__5171
35814                 | LR__5172
35814                 | LR__5173
35814     0A 02 06 F6 | 	mov	_var02, #10
35818                 | '         r =  10 ;
35818                 | '         break;
35818     0C 00 90 FD | 	jmp	#LR__5179
3581c                 | LR__5174
3581c     0B 02 06 F6 | 	mov	_var02, #11
35820                 | '         r =  11 ;
35820                 | '         break;
35820     04 00 90 FD | 	jmp	#LR__5179
35824                 | LR__5175
35824                 | LR__5176
35824                 | LR__5177
35824                 | LR__5178
35824     0C 02 06 F6 | 	mov	_var02, #12
35828                 | '         r =  12 ;
35828                 | '         break;
35828                 | LR__5179
35828                 | '     }
35828                 | '     return _seterror(r);
35828     00 02 4E F2 | 	cmps	_var02, #0 wz
3582c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
35830     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
35834     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
35838     01 FA 65 56 |  if_ne	neg	result1, #1
3583c     00 FA 05 A6 |  if_e	mov	result1, #0
35840                 | _fatfs_cc__set_dos_error_1047_ret
35840     2D 00 64 FD | 	ret
35844                 | 
35844                 | _fatfs_cc_v_creat
35844     04 4A 05 F6 | 	mov	COUNT_, #4
35848     A8 00 A0 FD | 	call	#pushregs_
3584c     09 27 02 F6 | 	mov	local01, arg01
35850     0A 29 02 F6 | 	mov	local02, arg02
35854     03 00 00 FF 
35858     3C 12 06 F6 | 	mov	arg01, ##1596
3585c                 | '     return _gc_alloc(size);
3585c     10 14 06 F6 | 	mov	arg02, #16
35860     28 5E BF FD | 	call	#__system___gc_doalloc
35864     FD 2A 0A F6 | 	mov	local03, result1 wz
35868                 | '       return _seterror( 7 );
35868     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3586c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35870     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35874     01 FA 65 A6 |  if_e	neg	result1, #1
35878     58 00 90 AD |  if_e	jmp	#LR__5181
3587c     15 13 02 F6 | 	mov	arg01, local03
35880     00 14 06 F6 | 	mov	arg02, #0
35884     03 00 00 FF 
35888     3C 16 06 F6 | 	mov	arg03, ##1596
3588c     98 00 A0 FD | 	call	#\builtin_bytefill_
35890     02 00 00 FF 
35894     14 2A 06 F1 | 	add	local03, ##1044
35898     15 13 02 F6 | 	mov	arg01, local03
3589c     02 00 00 FF 
358a0     14 2A 86 F1 | 	sub	local03, ##1044
358a4     14 15 02 F6 | 	mov	arg02, local02
358a8     07 16 06 F6 | 	mov	arg03, #7
358ac     B4 CC BF FD | 	call	#_fatfs_cc_f_open
358b0     FD 2C 0A F6 | 	mov	local04, result1 wz
358b4     14 00 90 AD |  if_e	jmp	#LR__5180
358b8     15 13 02 F6 | 	mov	arg01, local03
358bc                 | '     return _gc_free(ptr);
358bc     D8 5E BF FD | 	call	#__system___gc_free
358c0                 | '     free(f);
358c0                 | '     return _set_dos_error(r);
358c0     16 13 02 F6 | 	mov	arg01, local04
358c4     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1047
358c8     08 00 90 FD | 	jmp	#LR__5181
358cc                 | LR__5180
358cc     13 2B 62 FC | 	wrlong	local03, local01
358d0                 | '   }
358d0                 | '   fil->vfsdata = f;
358d0                 | '   return 0;
358d0     00 FA 05 F6 | 	mov	result1, #0
358d4                 | LR__5181
358d4     A7 F0 03 F6 | 	mov	ptra, fp
358d8     B2 00 A0 FD | 	call	#popregs_
358dc                 | _fatfs_cc_v_creat_ret
358dc     2D 00 64 FD | 	ret
358e0                 | 
358e0                 | _fatfs_cc_v_close
358e0     02 4A 05 F6 | 	mov	COUNT_, #2
358e4     A8 00 A0 FD | 	call	#pushregs_
358e8     09 27 02 FB | 	rdlong	local01, arg01
358ec     02 00 00 FF 
358f0     14 26 06 F1 | 	add	local01, ##1044
358f4     13 13 02 F6 | 	mov	arg01, local01
358f8     02 00 00 FF 
358fc     14 26 86 F1 | 	sub	local01, ##1044
35900     DC E3 BF FD | 	call	#_fatfs_cc_f_close
35904     FD 28 02 F6 | 	mov	local02, result1
35908     13 13 02 F6 | 	mov	arg01, local01
3590c                 | '     return _gc_free(ptr);
3590c     88 5E BF FD | 	call	#__system___gc_free
35910                 | '     FAT_FIL *f = fil->vfsdata;
35910                 | '     r=f_close(&f->fil);
35910                 | '     free(f);
35910                 | '     return _set_dos_error(r);
35910     14 13 02 F6 | 	mov	arg01, local02
35914     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1047
35918     A7 F0 03 F6 | 	mov	ptra, fp
3591c     B2 00 A0 FD | 	call	#popregs_
35920                 | _fatfs_cc_v_close_ret
35920     2D 00 64 FD | 	ret
35924                 | 
35924                 | _fatfs_cc_v_opendir
35924     04 4A 05 F6 | 	mov	COUNT_, #4
35928     A8 00 A0 FD | 	call	#pushregs_
3592c     09 27 02 F6 | 	mov	local01, arg01
35930     0A 29 02 F6 | 	mov	local02, arg02
35934     30 12 06 F6 | 	mov	arg01, #48
35938                 | '     return _gc_alloc(size);
35938     10 14 06 F6 | 	mov	arg02, #16
3593c     4C 5D BF FD | 	call	#__system___gc_doalloc
35940     FD 2A 0A F6 | 	mov	local03, result1 wz
35944                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
35944                 | '       return _seterror( 7 );
35944     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35948     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
3594c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35950     01 FA 65 A6 |  if_e	neg	result1, #1
35954     34 00 90 AD |  if_e	jmp	#LR__5191
35958     14 15 02 F6 | 	mov	arg02, local02
3595c     15 13 02 F6 | 	mov	arg01, local03
35960     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
35964     FD 2C 0A F6 | 	mov	local04, result1 wz
35968     14 00 90 AD |  if_e	jmp	#LR__5190
3596c     15 13 02 F6 | 	mov	arg01, local03
35970                 | '     return _gc_free(ptr);
35970     24 5E BF FD | 	call	#__system___gc_free
35974                 | '         free(f);
35974                 | '         return _set_dos_error(r);
35974     16 13 02 F6 | 	mov	arg01, local04
35978     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1047
3597c     0C 00 90 FD | 	jmp	#LR__5191
35980                 | LR__5190
35980     04 26 06 F1 | 	add	local01, #4
35984     13 2B 62 FC | 	wrlong	local03, local01
35988                 | '     }
35988                 | '     dir->vfsdata = f;
35988                 | '     return 0;
35988     00 FA 05 F6 | 	mov	result1, #0
3598c                 | LR__5191
3598c     A7 F0 03 F6 | 	mov	ptra, fp
35990     B2 00 A0 FD | 	call	#popregs_
35994                 | _fatfs_cc_v_opendir_ret
35994     2D 00 64 FD | 	ret
35998                 | 
35998                 | _fatfs_cc_v_closedir
35998     02 4A 05 F6 | 	mov	COUNT_, #2
3599c     A8 00 A0 FD | 	call	#pushregs_
359a0     04 12 06 F1 | 	add	arg01, #4
359a4     09 27 02 FB | 	rdlong	local01, arg01
359a8     13 13 02 F6 | 	mov	arg01, local01
359ac     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
359b0     FD 28 02 F6 | 	mov	local02, result1
359b4     13 13 02 F6 | 	mov	arg01, local01
359b8                 | '     return _gc_free(ptr);
359b8     DC 5D BF FD | 	call	#__system___gc_free
359bc     00 28 0E F2 | 	cmp	local02, #0 wz
359c0     14 13 02 56 |  if_ne	mov	arg01, local02
359c4     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1047
359c8                 | '     return r;
359c8     14 FB 01 F6 | 	mov	result1, local02
359cc     A7 F0 03 F6 | 	mov	ptra, fp
359d0     B2 00 A0 FD | 	call	#popregs_
359d4                 | _fatfs_cc_v_closedir_ret
359d4     2D 00 64 FD | 	ret
359d8                 | 
359d8                 | _fatfs_cc_v_readdir
359d8     01 4A 05 F6 | 	mov	COUNT_, #1
359dc     A8 00 A0 FD | 	call	#pushregs_
359e0     2C F1 07 F1 | 	add	ptra, #300
359e4     04 4E 05 F1 | 	add	fp, #4
359e8     A7 12 62 FC | 	wrlong	arg01, fp
359ec     04 4E 05 F1 | 	add	fp, #4
359f0     A7 14 62 FC | 	wrlong	arg02, fp
359f4     04 4E 85 F1 | 	sub	fp, #4
359f8     A7 16 02 FB | 	rdlong	arg03, fp
359fc     04 16 06 F1 | 	add	arg03, #4
35a00     0B 13 02 FB | 	rdlong	arg01, arg03
35a04     08 4E 05 F1 | 	add	fp, #8
35a08     A7 14 02 F6 | 	mov	arg02, fp
35a0c     0C 4E 85 F1 | 	sub	fp, #12
35a10     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
35a14     28 4F 05 F1 | 	add	fp, #296
35a18     A7 FA 61 FC | 	wrlong	result1, fp
35a1c     28 4F 85 F1 | 	sub	fp, #296
35a20     00 FA 0D F2 | 	cmp	result1, #0 wz
35a24     14 00 90 AD |  if_e	jmp	#LR__5200
35a28                 | '         return _set_dos_error(r);
35a28     28 4F 05 F1 | 	add	fp, #296
35a2c     A7 12 02 FB | 	rdlong	arg01, fp
35a30     28 4F 85 F1 | 	sub	fp, #296
35a34     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1047
35a38     C4 00 90 FD | 	jmp	#LR__5203
35a3c                 | LR__5200
35a3c     28 4E 05 F1 | 	add	fp, #40
35a40     A7 16 CA FA | 	rdbyte	arg03, fp wz
35a44     28 4E 85 F1 | 	sub	fp, #40
35a48                 | '         return -1;
35a48     01 FA 65 A6 |  if_e	neg	result1, #1
35a4c     B0 00 90 AD |  if_e	jmp	#LR__5203
35a50     08 4E 05 F1 | 	add	fp, #8
35a54     A7 12 02 FB | 	rdlong	arg01, fp
35a58     20 4E 05 F1 | 	add	fp, #32
35a5c     A7 14 02 F6 | 	mov	arg02, fp
35a60     28 4E 85 F1 | 	sub	fp, #40
35a64     3F 16 06 F6 | 	mov	arg03, #63
35a68     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
35a6c     08 4E 05 F1 | 	add	fp, #8
35a70     A7 16 02 FB | 	rdlong	arg03, fp
35a74     3F 16 06 F1 | 	add	arg03, #63
35a78     0B 01 48 FC | 	wrbyte	#0, arg03
35a7c     0C 4E 05 F1 | 	add	fp, #12
35a80     A7 16 C2 FA | 	rdbyte	arg03, fp
35a84     14 4E 85 F1 | 	sub	fp, #20
35a88     10 16 CE F7 | 	test	arg03, #16 wz
35a8c     18 00 90 AD |  if_e	jmp	#LR__5201
35a90     08 4E 05 F1 | 	add	fp, #8
35a94     A7 16 02 FB | 	rdlong	arg03, fp
35a98     08 4E 85 F1 | 	sub	fp, #8
35a9c     50 16 06 F1 | 	add	arg03, #80
35aa0     0B 03 48 FC | 	wrbyte	#1, arg03
35aa4     14 00 90 FD | 	jmp	#LR__5202
35aa8                 | LR__5201
35aa8     08 4E 05 F1 | 	add	fp, #8
35aac     A7 16 02 FB | 	rdlong	arg03, fp
35ab0     08 4E 85 F1 | 	sub	fp, #8
35ab4     50 16 06 F1 | 	add	arg03, #80
35ab8     0B 01 48 FC | 	wrbyte	#0, arg03
35abc                 | LR__5202
35abc     08 4E 05 F1 | 	add	fp, #8
35ac0     A7 16 02 FB | 	rdlong	arg03, fp
35ac4     04 4E 05 F1 | 	add	fp, #4
35ac8     A7 14 02 FB | 	rdlong	arg02, fp
35acc     48 16 06 F1 | 	add	arg03, #72
35ad0     0B 15 62 FC | 	wrlong	arg02, arg03
35ad4     04 4E 85 F1 | 	sub	fp, #4
35ad8     A7 26 02 FB | 	rdlong	local01, fp
35adc     08 4E 05 F1 | 	add	fp, #8
35ae0     A7 12 E2 FA | 	rdword	arg01, fp
35ae4     02 4E 05 F1 | 	add	fp, #2
35ae8     A7 14 E2 FA | 	rdword	arg02, fp
35aec     12 4E 85 F1 | 	sub	fp, #18
35af0     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1045
35af4     4C 26 06 F1 | 	add	local01, #76
35af8     13 FB 61 FC | 	wrlong	result1, local01
35afc                 | '         ent->d_type =  (0) ;
35afc                 | '     }
35afc                 | '     ent->d_size = finfo.fsize;
35afc                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
35afc                 | '     return 0;
35afc     00 FA 05 F6 | 	mov	result1, #0
35b00                 | LR__5203
35b00     A7 F0 03 F6 | 	mov	ptra, fp
35b04     B2 00 A0 FD | 	call	#popregs_
35b08                 | _fatfs_cc_v_readdir_ret
35b08     2D 00 64 FD | 	ret
35b0c                 | 
35b0c                 | _fatfs_cc_v_stat
35b0c     03 4A 05 F6 | 	mov	COUNT_, #3
35b10     A8 00 A0 FD | 	call	#pushregs_
35b14     30 F1 07 F1 | 	add	ptra, #304
35b18     04 4E 05 F1 | 	add	fp, #4
35b1c     A7 12 62 FC | 	wrlong	arg01, fp
35b20     04 4E 05 F1 | 	add	fp, #4
35b24     A7 14 62 FC | 	wrlong	arg02, fp
35b28     08 4E 85 F1 | 	sub	fp, #8
35b2c     0A 13 02 F6 | 	mov	arg01, arg02
35b30     00 14 06 F6 | 	mov	arg02, #0
35b34     30 16 06 F6 | 	mov	arg03, #48
35b38     98 00 A0 FD | 	call	#\builtin_bytefill_
35b3c     04 4E 05 F1 | 	add	fp, #4
35b40     A7 FA 01 FB | 	rdlong	result1, fp
35b44     04 4E 85 F1 | 	sub	fp, #4
35b48     FD FA C9 FA | 	rdbyte	result1, result1 wz
35b4c     2C 00 90 AD |  if_e	jmp	#LR__5210
35b50     04 4E 05 F1 | 	add	fp, #4
35b54     A7 FA 01 FB | 	rdlong	result1, fp
35b58     04 4E 85 F1 | 	sub	fp, #4
35b5c     FD FA C1 FA | 	rdbyte	result1, result1
35b60     2E FA 0D F2 | 	cmp	result1, #46 wz
35b64     04 4E 05 A1 |  if_e	add	fp, #4
35b68     A7 26 02 AB |  if_e	rdlong	local01, fp
35b6c     04 4E 85 A1 |  if_e	sub	fp, #4
35b70     01 26 06 A1 |  if_e	add	local01, #1
35b74     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
35b78     18 00 90 5D |  if_ne	jmp	#LR__5211
35b7c                 | LR__5210
35b7c     18 4E 05 F1 | 	add	fp, #24
35b80     A7 20 48 FC | 	wrbyte	#16, fp
35b84     0C 4E 85 F1 | 	sub	fp, #12
35b88     A7 00 68 FC | 	wrlong	#0, fp
35b8c     0C 4E 85 F1 | 	sub	fp, #12
35b90     24 00 90 FD | 	jmp	#LR__5212
35b94                 | LR__5211
35b94     04 4E 05 F1 | 	add	fp, #4
35b98     A7 12 02 FB | 	rdlong	arg01, fp
35b9c     0C 4E 05 F1 | 	add	fp, #12
35ba0     A7 14 02 F6 | 	mov	arg02, fp
35ba4     10 4E 85 F1 | 	sub	fp, #16
35ba8     AC EB BF FD | 	call	#_fatfs_cc_f_stat
35bac     0C 4E 05 F1 | 	add	fp, #12
35bb0     A7 FA 61 FC | 	wrlong	result1, fp
35bb4     0C 4E 85 F1 | 	sub	fp, #12
35bb8                 | LR__5212
35bb8     0C 4E 05 F1 | 	add	fp, #12
35bbc     A7 28 0A FB | 	rdlong	local02, fp wz
35bc0     0C 4E 85 F1 | 	sub	fp, #12
35bc4     14 00 90 AD |  if_e	jmp	#LR__5213
35bc8                 | '         return _set_dos_error(r);
35bc8     0C 4E 05 F1 | 	add	fp, #12
35bcc     A7 12 02 FB | 	rdlong	arg01, fp
35bd0     0C 4E 85 F1 | 	sub	fp, #12
35bd4     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1047
35bd8     14 01 90 FD | 	jmp	#LR__5214
35bdc                 | LR__5213
35bdc     2C 4F 05 F1 | 	add	fp, #300
35be0     A7 48 6A FC | 	wrlong	#292, fp
35be4     14 4F 85 F1 | 	sub	fp, #276
35be8     A7 2A C2 FA | 	rdbyte	local03, fp
35bec     18 4E 85 F1 | 	sub	fp, #24
35bf0     01 2A CE F7 | 	test	local03, #1 wz
35bf4     2C 4F 05 A1 |  if_e	add	fp, #300
35bf8     A7 2A 02 AB |  if_e	rdlong	local03, fp
35bfc     92 2A 46 A5 |  if_e	or	local03, #146
35c00     A7 2A 62 AC |  if_e	wrlong	local03, fp
35c04     2C 4F 85 A1 |  if_e	sub	fp, #300
35c08     18 4E 05 F1 | 	add	fp, #24
35c0c     A7 2A C2 FA | 	rdbyte	local03, fp
35c10     18 4E 85 F1 | 	sub	fp, #24
35c14     10 2A CE F7 | 	test	local03, #16 wz
35c18     2C 4F 05 51 |  if_ne	add	fp, #300
35c1c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
35c20     08 00 00 5F 
35c24     49 2A 46 55 |  if_ne	or	local03, ##4169
35c28     A7 2A 62 5C |  if_ne	wrlong	local03, fp
35c2c     2C 4F 85 51 |  if_ne	sub	fp, #300
35c30     08 4E 05 F1 | 	add	fp, #8
35c34     A7 2A 02 FB | 	rdlong	local03, fp
35c38     24 4F 05 F1 | 	add	fp, #292
35c3c     A7 28 02 FB | 	rdlong	local02, fp
35c40     08 2A 06 F1 | 	add	local03, #8
35c44     15 29 62 FC | 	wrlong	local02, local03
35c48     24 4F 85 F1 | 	sub	fp, #292
35c4c     A7 2A 02 FB | 	rdlong	local03, fp
35c50     0C 2A 06 F1 | 	add	local03, #12
35c54     15 03 68 FC | 	wrlong	#1, local03
35c58     A7 2A 02 FB | 	rdlong	local03, fp
35c5c     08 4E 05 F1 | 	add	fp, #8
35c60     A7 28 02 FB | 	rdlong	local02, fp
35c64     18 2A 06 F1 | 	add	local03, #24
35c68     15 29 62 FC | 	wrlong	local02, local03
35c6c     08 4E 85 F1 | 	sub	fp, #8
35c70     A7 2A 02 FB | 	rdlong	local03, fp
35c74     1C 2A 06 F1 | 	add	local03, #28
35c78     01 00 80 FF 
35c7c     15 01 68 FC | 	wrlong	##512, local03
35c80     A7 28 02 FB | 	rdlong	local02, fp
35c84     14 2B 02 F6 | 	mov	local03, local02
35c88     18 28 06 F1 | 	add	local02, #24
35c8c     14 29 02 FB | 	rdlong	local02, local02
35c90     FF 29 06 F1 | 	add	local02, #511
35c94     14 29 52 F6 | 	abs	local02, local02 wc
35c98     09 28 46 F0 | 	shr	local02, #9
35c9c     14 29 82 F6 | 	negc	local02, local02
35ca0     20 2A 06 F1 | 	add	local03, #32
35ca4     15 29 62 FC | 	wrlong	local02, local03
35ca8     A7 28 02 FB | 	rdlong	local02, fp
35cac     14 2B 02 F6 | 	mov	local03, local02
35cb0     14 27 02 F6 | 	mov	local01, local02
35cb4     0C 4E 05 F1 | 	add	fp, #12
35cb8     A7 12 E2 FA | 	rdword	arg01, fp
35cbc     02 4E 05 F1 | 	add	fp, #2
35cc0     A7 14 E2 FA | 	rdword	arg02, fp
35cc4     16 4E 85 F1 | 	sub	fp, #22
35cc8     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1045
35ccc     2C 26 06 F1 | 	add	local01, #44
35cd0     13 FB 61 FC | 	wrlong	result1, local01
35cd4     28 28 06 F1 | 	add	local02, #40
35cd8     14 FB 61 FC | 	wrlong	result1, local02
35cdc     24 2A 06 F1 | 	add	local03, #36
35ce0     15 FB 61 FC | 	wrlong	result1, local03
35ce4                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
35ce4                 | '     }
35ce4                 | '     buf->st_mode = mode;
35ce4                 | '     buf->st_nlink = 1;
35ce4                 | '     buf->st_size = finfo.fsize;
35ce4                 | '     buf->st_blksize = 512;
35ce4                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
35ce4                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
35ce4                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
35ce4                 | '     return r;
35ce4     0C 4E 05 F1 | 	add	fp, #12
35ce8     A7 FA 01 FB | 	rdlong	result1, fp
35cec     0C 4E 85 F1 | 	sub	fp, #12
35cf0                 | LR__5214
35cf0     A7 F0 03 F6 | 	mov	ptra, fp
35cf4     B2 00 A0 FD | 	call	#popregs_
35cf8                 | _fatfs_cc_v_stat_ret
35cf8     2D 00 64 FD | 	ret
35cfc                 | 
35cfc                 | _fatfs_cc_v_read
35cfc     00 4A 05 F6 | 	mov	COUNT_, #0
35d00     A8 00 A0 FD | 	call	#pushregs_
35d04     1C F0 07 F1 | 	add	ptra, #28
35d08     04 4E 05 F1 | 	add	fp, #4
35d0c     A7 12 62 FC | 	wrlong	arg01, fp
35d10     04 4E 05 F1 | 	add	fp, #4
35d14     A7 14 62 FC | 	wrlong	arg02, fp
35d18     04 4E 05 F1 | 	add	fp, #4
35d1c     A7 16 62 FC | 	wrlong	arg03, fp
35d20     08 4E 85 F1 | 	sub	fp, #8
35d24     A7 12 02 FB | 	rdlong	arg01, fp
35d28     09 13 0A FB | 	rdlong	arg01, arg01 wz
35d2c     0C 4E 05 F1 | 	add	fp, #12
35d30     A7 12 62 FC | 	wrlong	arg01, fp
35d34     10 4E 85 F1 | 	sub	fp, #16
35d38                 | '         return _seterror( 5 );
35d38     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35d3c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35d40     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35d44     01 FA 65 A6 |  if_e	neg	result1, #1
35d48     B8 00 90 AD |  if_e	jmp	#LR__5222
35d4c     10 4E 05 F1 | 	add	fp, #16
35d50     A7 12 02 FB | 	rdlong	arg01, fp
35d54     02 00 00 FF 
35d58     14 12 06 F1 | 	add	arg01, ##1044
35d5c     08 4E 85 F1 | 	sub	fp, #8
35d60     A7 14 02 FB | 	rdlong	arg02, fp
35d64     04 4E 05 F1 | 	add	fp, #4
35d68     A7 16 02 FB | 	rdlong	arg03, fp
35d6c     0C 4E 05 F1 | 	add	fp, #12
35d70     A7 18 02 F6 | 	mov	arg04, fp
35d74     18 4E 85 F1 | 	sub	fp, #24
35d78     C4 CE BF FD | 	call	#_fatfs_cc_f_read
35d7c     14 4E 05 F1 | 	add	fp, #20
35d80     A7 FA 61 FC | 	wrlong	result1, fp
35d84     14 4E 85 F1 | 	sub	fp, #20
35d88     00 FA 0D F2 | 	cmp	result1, #0 wz
35d8c     34 00 90 AD |  if_e	jmp	#LR__5220
35d90     04 4E 05 F1 | 	add	fp, #4
35d94     A7 18 02 FB | 	rdlong	arg04, fp
35d98     0C 17 02 F6 | 	mov	arg03, arg04
35d9c     08 18 06 F1 | 	add	arg04, #8
35da0     0C 19 02 FB | 	rdlong	arg04, arg04
35da4     20 18 46 F5 | 	or	arg04, #32
35da8     08 16 06 F1 | 	add	arg03, #8
35dac     0B 19 62 FC | 	wrlong	arg04, arg03
35db0                 | '         fil->state |=  (0x20) ;
35db0                 | '         return _set_dos_error(r);
35db0     10 4E 05 F1 | 	add	fp, #16
35db4     A7 12 02 FB | 	rdlong	arg01, fp
35db8     14 4E 85 F1 | 	sub	fp, #20
35dbc     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1047
35dc0     40 00 90 FD | 	jmp	#LR__5222
35dc4                 | LR__5220
35dc4     18 4E 05 F1 | 	add	fp, #24
35dc8     A7 FA 09 FB | 	rdlong	result1, fp wz
35dcc     18 4E 85 F1 | 	sub	fp, #24
35dd0     24 00 90 5D |  if_ne	jmp	#LR__5221
35dd4     04 4E 05 F1 | 	add	fp, #4
35dd8     A7 FA 01 FB | 	rdlong	result1, fp
35ddc     FD 18 02 F6 | 	mov	arg04, result1
35de0     04 4E 85 F1 | 	sub	fp, #4
35de4     08 FA 05 F1 | 	add	result1, #8
35de8     FD FA 01 FB | 	rdlong	result1, result1
35dec     10 FA 45 F5 | 	or	result1, #16
35df0     08 18 06 F1 | 	add	arg04, #8
35df4     0C FB 61 FC | 	wrlong	result1, arg04
35df8                 | LR__5221
35df8                 | '         fil->state |=  (0x10) ;
35df8                 | '     }
35df8                 | '     return x;
35df8     18 4E 05 F1 | 	add	fp, #24
35dfc     A7 FA 01 FB | 	rdlong	result1, fp
35e00     18 4E 85 F1 | 	sub	fp, #24
35e04                 | LR__5222
35e04     A7 F0 03 F6 | 	mov	ptra, fp
35e08     B2 00 A0 FD | 	call	#popregs_
35e0c                 | _fatfs_cc_v_read_ret
35e0c     2D 00 64 FD | 	ret
35e10                 | 
35e10                 | _fatfs_cc_v_write
35e10     00 4A 05 F6 | 	mov	COUNT_, #0
35e14     A8 00 A0 FD | 	call	#pushregs_
35e18     1C F0 07 F1 | 	add	ptra, #28
35e1c     04 4E 05 F1 | 	add	fp, #4
35e20     A7 12 62 FC | 	wrlong	arg01, fp
35e24     04 4E 05 F1 | 	add	fp, #4
35e28     A7 14 62 FC | 	wrlong	arg02, fp
35e2c     04 4E 05 F1 | 	add	fp, #4
35e30     A7 16 62 FC | 	wrlong	arg03, fp
35e34     08 4E 85 F1 | 	sub	fp, #8
35e38     A7 12 02 FB | 	rdlong	arg01, fp
35e3c     09 13 0A FB | 	rdlong	arg01, arg01 wz
35e40     0C 4E 05 F1 | 	add	fp, #12
35e44     A7 12 62 FC | 	wrlong	arg01, fp
35e48     10 4E 85 F1 | 	sub	fp, #16
35e4c                 | '         return _seterror( 5 );
35e4c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35e50     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35e54     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35e58     01 FA 65 A6 |  if_e	neg	result1, #1
35e5c     84 00 90 AD |  if_e	jmp	#LR__5231
35e60     10 4E 05 F1 | 	add	fp, #16
35e64     A7 12 02 FB | 	rdlong	arg01, fp
35e68     02 00 00 FF 
35e6c     14 12 06 F1 | 	add	arg01, ##1044
35e70     08 4E 85 F1 | 	sub	fp, #8
35e74     A7 14 02 FB | 	rdlong	arg02, fp
35e78     04 4E 05 F1 | 	add	fp, #4
35e7c     A7 16 02 FB | 	rdlong	arg03, fp
35e80     0C 4E 05 F1 | 	add	fp, #12
35e84     A7 18 02 F6 | 	mov	arg04, fp
35e88     18 4E 85 F1 | 	sub	fp, #24
35e8c     4C D4 BF FD | 	call	#_fatfs_cc_f_write
35e90     14 4E 05 F1 | 	add	fp, #20
35e94     A7 FA 61 FC | 	wrlong	result1, fp
35e98     14 4E 85 F1 | 	sub	fp, #20
35e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
35ea0     34 00 90 AD |  if_e	jmp	#LR__5230
35ea4     04 4E 05 F1 | 	add	fp, #4
35ea8     A7 18 02 FB | 	rdlong	arg04, fp
35eac     0C 17 02 F6 | 	mov	arg03, arg04
35eb0     08 18 06 F1 | 	add	arg04, #8
35eb4     0C 19 02 FB | 	rdlong	arg04, arg04
35eb8     20 18 46 F5 | 	or	arg04, #32
35ebc     08 16 06 F1 | 	add	arg03, #8
35ec0     0B 19 62 FC | 	wrlong	arg04, arg03
35ec4                 | '         fil->state |=  (0x20) ;
35ec4                 | '         return _set_dos_error(r);
35ec4     10 4E 05 F1 | 	add	fp, #16
35ec8     A7 12 02 FB | 	rdlong	arg01, fp
35ecc     14 4E 85 F1 | 	sub	fp, #20
35ed0     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1047
35ed4     0C 00 90 FD | 	jmp	#LR__5231
35ed8                 | LR__5230
35ed8                 | '     }
35ed8                 | '     return x;
35ed8     18 4E 05 F1 | 	add	fp, #24
35edc     A7 FA 01 FB | 	rdlong	result1, fp
35ee0     18 4E 85 F1 | 	sub	fp, #24
35ee4                 | LR__5231
35ee4     A7 F0 03 F6 | 	mov	ptra, fp
35ee8     B2 00 A0 FD | 	call	#popregs_
35eec                 | _fatfs_cc_v_write_ret
35eec     2D 00 64 FD | 	ret
35ef0                 | 
35ef0                 | _fatfs_cc_v_lseek
35ef0     04 4A 05 F6 | 	mov	COUNT_, #4
35ef4     A8 00 A0 FD | 	call	#pushregs_
35ef8     0A 27 02 F6 | 	mov	local01, arg02
35efc     0B 29 02 F6 | 	mov	local02, arg03
35f00     09 2B 02 FB | 	rdlong	local03, arg01
35f04     02 00 00 FF 
35f08     14 2A 0E F1 | 	add	local03, ##1044 wz
35f0c                 | '         return _seterror( 5 );
35f0c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35f10     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35f14     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35f18     01 FA 65 A6 |  if_e	neg	result1, #1
35f1c     4C 00 90 AD |  if_e	jmp	#LR__5242
35f20     00 28 0E F2 | 	cmp	local02, #0 wz
35f24     24 00 90 AD |  if_e	jmp	#LR__5240
35f28     01 28 0E F2 | 	cmp	local02, #1 wz
35f2c     14 2A 06 A1 |  if_e	add	local03, #20
35f30     15 2D 02 AB |  if_e	rdlong	local04, local03
35f34     14 2A 86 A1 |  if_e	sub	local03, #20
35f38     16 27 02 A1 |  if_e	add	local01, local04
35f3c     0C 2A 06 51 |  if_ne	add	local03, #12
35f40     15 2D 02 5B |  if_ne	rdlong	local04, local03
35f44     0C 2A 86 51 |  if_ne	sub	local03, #12
35f48     16 27 02 51 |  if_ne	add	local01, local04
35f4c                 | LR__5240
35f4c     13 15 02 F6 | 	mov	arg02, local01
35f50     15 13 02 F6 | 	mov	arg01, local03
35f54     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
35f58     FD 12 0A F6 | 	mov	arg01, result1 wz
35f5c     08 00 90 AD |  if_e	jmp	#LR__5241
35f60                 | '         return _set_dos_error(result);
35f60     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1047
35f64     04 00 90 FD | 	jmp	#LR__5242
35f68                 | LR__5241
35f68                 | '     }
35f68                 | '     return offset;
35f68     13 FB 01 F6 | 	mov	result1, local01
35f6c                 | LR__5242
35f6c     A7 F0 03 F6 | 	mov	ptra, fp
35f70     B2 00 A0 FD | 	call	#popregs_
35f74                 | _fatfs_cc_v_lseek_ret
35f74     2D 00 64 FD | 	ret
35f78                 | 
35f78                 | _fatfs_cc_v_ioctl
35f78                 | ' {
35f78                 | '     return _seterror( 10 );
35f78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
35f7c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
35f80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
35f84     01 FA 65 F6 | 	neg	result1, #1
35f88                 | _fatfs_cc_v_ioctl_ret
35f88     2D 00 64 FD | 	ret
35f8c                 | 
35f8c                 | _fatfs_cc_v_mkdir
35f8c     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
35f90     FD 12 02 F6 | 	mov	arg01, result1
35f94                 | ' 
35f94                 | '     r = f_mkdir(name);
35f94                 | '     return _set_dos_error(r);
35f94     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1047
35f98                 | _fatfs_cc_v_mkdir_ret
35f98     2D 00 64 FD | 	ret
35f9c                 | 
35f9c                 | _fatfs_cc_v_remove
35f9c     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35fa0     FD 12 02 F6 | 	mov	arg01, result1
35fa4                 | ' 
35fa4                 | '     r = f_unlink(name);
35fa4                 | '     return _set_dos_error(r);
35fa4     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1047
35fa8                 | _fatfs_cc_v_remove_ret
35fa8     2D 00 64 FD | 	ret
35fac                 | 
35fac                 | _fatfs_cc_v_rmdir
35fac     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35fb0     FD 12 02 F6 | 	mov	arg01, result1
35fb4                 | ' 
35fb4                 | '     r = f_unlink(name);
35fb4                 | '     return _set_dos_error(r);
35fb4     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1047
35fb8                 | _fatfs_cc_v_rmdir_ret
35fb8     2D 00 64 FD | 	ret
35fbc                 | 
35fbc                 | _fatfs_cc_v_rename
35fbc     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
35fc0     FD 12 02 F6 | 	mov	arg01, result1
35fc4                 | '     return _set_dos_error(r);
35fc4     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1047
35fc8                 | _fatfs_cc_v_rename_ret
35fc8     2D 00 64 FD | 	ret
35fcc                 | 
35fcc                 | _fatfs_cc_v_open
35fcc     07 4A 05 F6 | 	mov	COUNT_, #7
35fd0     A8 00 A0 FD | 	call	#pushregs_
35fd4     09 27 02 F6 | 	mov	local01, arg01
35fd8     0A 29 02 F6 | 	mov	local02, arg02
35fdc     0B 2B 02 F6 | 	mov	local03, arg03
35fe0     03 00 00 FF 
35fe4     3C 12 06 F6 | 	mov	arg01, ##1596
35fe8                 | '     return _gc_alloc(size);
35fe8     10 14 06 F6 | 	mov	arg02, #16
35fec     9C 56 BF FD | 	call	#__system___gc_doalloc
35ff0     FD 2C 0A F6 | 	mov	local04, result1 wz
35ff4                 | '       return _seterror( 7 );
35ff4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35ff8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35ffc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36000     01 FA 65 A6 |  if_e	neg	result1, #1
36004     98 00 90 AD |  if_e	jmp	#LR__5256
36008     16 13 02 F6 | 	mov	arg01, local04
3600c     00 14 06 F6 | 	mov	arg02, #0
36010     03 00 00 FF 
36014     3C 16 06 F6 | 	mov	arg03, ##1596
36018     98 00 A0 FD | 	call	#\builtin_bytefill_
3601c                 | '   switch (flags & 3) {
3601c     15 2F 02 F6 | 	mov	local05, local03
36020     03 2E 0E F5 | 	and	local05, #3 wz
36024     0C 00 90 AD |  if_e	jmp	#LR__5250
36028     01 2E 0E F2 | 	cmp	local05, #1 wz
3602c     0C 00 90 AD |  if_e	jmp	#LR__5251
36030     10 00 90 FD | 	jmp	#LR__5252
36034                 | LR__5250
36034     01 30 06 F6 | 	mov	local06, #1
36038                 | '       fs_flags =  0x01 ;
36038                 | '       break;
36038     0C 00 90 FD | 	jmp	#LR__5253
3603c                 | LR__5251
3603c     02 30 06 F6 | 	mov	local06, #2
36040                 | '       fs_flags =  0x02 ;
36040                 | '       break;
36040     04 00 90 FD | 	jmp	#LR__5253
36044                 | LR__5252
36044     03 30 06 F6 | 	mov	local06, #3
36048                 | '       fs_flags =  0x01  |  0x02 ;
36048                 | '       break;
36048                 | LR__5253
36048     08 2A CE F7 | 	test	local03, #8 wz
3604c     18 30 46 55 |  if_ne	or	local06, #24
36050     08 00 90 5D |  if_ne	jmp	#LR__5254
36054     20 2A CE F7 | 	test	local03, #32 wz
36058     30 30 46 55 |  if_ne	or	local06, #48
3605c                 | LR__5254
3605c     02 00 00 FF 
36060     14 2C 06 F1 | 	add	local04, ##1044
36064     16 13 02 F6 | 	mov	arg01, local04
36068     02 00 00 FF 
3606c     14 2C 86 F1 | 	sub	local04, ##1044
36070     14 15 02 F6 | 	mov	arg02, local02
36074     18 17 02 F6 | 	mov	arg03, local06
36078     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
3607c     FD 32 0A F6 | 	mov	local07, result1 wz
36080     14 00 90 AD |  if_e	jmp	#LR__5255
36084     16 13 02 F6 | 	mov	arg01, local04
36088                 | '     return _gc_free(ptr);
36088     0C 57 BF FD | 	call	#__system___gc_free
3608c                 | '     free(f);
3608c                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
3608c                 | '     return _set_dos_error(r);
3608c     19 13 02 F6 | 	mov	arg01, local07
36090     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1047
36094     08 00 90 FD | 	jmp	#LR__5256
36098                 | LR__5255
36098     13 2D 62 FC | 	wrlong	local04, local01
3609c                 | '   }
3609c                 | '   fil->vfsdata = f;
3609c                 | '   return 0;
3609c     00 FA 05 F6 | 	mov	result1, #0
360a0                 | LR__5256
360a0     A7 F0 03 F6 | 	mov	ptra, fp
360a4     B2 00 A0 FD | 	call	#popregs_
360a8                 | _fatfs_cc_v_open_ret
360a8     2D 00 64 FD | 	ret
360ac                 | 
360ac                 | _fatfs_cc_v_flush
360ac     09 13 02 FB | 	rdlong	arg01, arg01
360b0     02 00 00 FF 
360b4     14 12 0E F1 | 	add	arg01, ##1044 wz
360b8                 | '         return _seterror( 5 );
360b8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
360bc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
360c0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
360c4     01 FA 65 A6 |  if_e	neg	result1, #1
360c8     0C 00 90 AD |  if_e	jmp	#LR__5260
360cc     00 DA BF FD | 	call	#_fatfs_cc_f_sync
360d0     FD 12 02 F6 | 	mov	arg01, result1
360d4                 | '     }
360d4                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
360d4                 | '     result = f_sync(f);
360d4                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
360d4                 | '     return _set_dos_error(result);
360d4     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1047
360d8                 | LR__5260
360d8                 | _fatfs_cc_v_flush_ret
360d8     2D 00 64 FD | 	ret
360dc                 | 
360dc                 | _fatfs_cc_v_init
360dc                 | ' {
360dc                 | '     return 0;
360dc     00 FA 05 F6 | 	mov	result1, #0
360e0                 | _fatfs_cc_v_init_ret
360e0     2D 00 64 FD | 	ret
360e4                 | 
360e4                 | _fatfs_cc_v_deinit
360e4     B8 01 00 FF 
360e8     54 14 06 F6 | 	mov	arg02, ##@LR__5456
360ec     00 12 06 F6 | 	mov	arg01, #0
360f0     00 16 06 F6 | 	mov	arg03, #0
360f4     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
360f8     01 00 00 FF 
360fc     08 E4 05 F1 | 	add	objptr, ##520
36100     F2 12 02 FB | 	rdlong	arg01, objptr
36104     04 E4 05 F1 | 	add	objptr, #4
36108     F2 14 02 FB | 	rdlong	arg02, objptr
3610c     01 00 00 FF 
36110     0C E4 85 F1 | 	sub	objptr, ##524
36114     F0 3D BF FD | 	call	#__system___freepins
36118                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36118                 | '     _freepins(f_pinmask);
36118                 | '     return 0;
36118     00 FA 05 F6 | 	mov	result1, #0
3611c                 | _fatfs_cc_v_deinit_ret
3611c     2D 00 64 FD | 	ret
36120                 | 
36120                 | _fatfs_cc_get_vfs
36120     01 4A 05 F6 | 	mov	COUNT_, #1
36124     A8 00 A0 FD | 	call	#pushregs_
36128     09 27 02 F6 | 	mov	local01, arg01
3612c     50 12 06 F6 | 	mov	arg01, #80
36130     28 55 BF FD | 	call	#__system___gc_alloc_managed
36134     FD 12 02 F6 | 	mov	arg01, result1
36138     F2 FA 01 F6 | 	mov	result1, objptr
3613c     00 A8 05 FF 
36140     00 FA 45 F5 | 	or	result1, ##189792256
36144     09 FB 61 FC | 	wrlong	result1, arg01
36148     F2 FA 01 F6 | 	mov	result1, objptr
3614c     00 B0 05 FF 
36150     00 FA 45 F5 | 	or	result1, ##190840832
36154     04 12 06 F1 | 	add	arg01, #4
36158     09 FB 61 FC | 	wrlong	result1, arg01
3615c     F2 FA 01 F6 | 	mov	result1, objptr
36160     00 B8 05 FF 
36164     00 FA 45 F5 | 	or	result1, ##191889408
36168     04 12 06 F1 | 	add	arg01, #4
3616c     09 FB 61 FC | 	wrlong	result1, arg01
36170     F2 FA 01 F6 | 	mov	result1, objptr
36174     00 C0 05 FF 
36178     00 FA 45 F5 | 	or	result1, ##192937984
3617c     04 12 06 F1 | 	add	arg01, #4
36180     09 FB 61 FC | 	wrlong	result1, arg01
36184     F2 FA 01 F6 | 	mov	result1, objptr
36188     00 C8 05 FF 
3618c     00 FA 45 F5 | 	or	result1, ##193986560
36190     04 12 06 F1 | 	add	arg01, #4
36194     09 FB 61 FC | 	wrlong	result1, arg01
36198     04 12 06 F1 | 	add	arg01, #4
3619c     09 01 68 FC | 	wrlong	#0, arg01
361a0     04 12 06 F1 | 	add	arg01, #4
361a4     09 27 62 FC | 	wrlong	local01, arg01
361a8     04 12 06 F1 | 	add	arg01, #4
361ac     09 01 68 FC | 	wrlong	#0, arg01
361b0     F2 FA 01 F6 | 	mov	result1, objptr
361b4     00 D0 05 FF 
361b8     00 FA 45 F5 | 	or	result1, ##195035136
361bc     04 12 06 F1 | 	add	arg01, #4
361c0     09 FB 61 FC | 	wrlong	result1, arg01
361c4     F2 FA 01 F6 | 	mov	result1, objptr
361c8     00 D8 05 FF 
361cc     00 FA 45 F5 | 	or	result1, ##196083712
361d0     04 12 06 F1 | 	add	arg01, #4
361d4     09 FB 61 FC | 	wrlong	result1, arg01
361d8     F2 FA 01 F6 | 	mov	result1, objptr
361dc     00 E0 05 FF 
361e0     00 FA 45 F5 | 	or	result1, ##197132288
361e4     04 12 06 F1 | 	add	arg01, #4
361e8     09 FB 61 FC | 	wrlong	result1, arg01
361ec     F2 FA 01 F6 | 	mov	result1, objptr
361f0     00 E8 05 FF 
361f4     00 FA 45 F5 | 	or	result1, ##198180864
361f8     04 12 06 F1 | 	add	arg01, #4
361fc     09 FB 61 FC | 	wrlong	result1, arg01
36200     F2 FA 01 F6 | 	mov	result1, objptr
36204     00 F0 05 FF 
36208     00 FA 45 F5 | 	or	result1, ##199229440
3620c     04 12 06 F1 | 	add	arg01, #4
36210     09 FB 61 FC | 	wrlong	result1, arg01
36214     F2 FA 01 F6 | 	mov	result1, objptr
36218     00 F8 05 FF 
3621c     00 FA 45 F5 | 	or	result1, ##200278016
36220     04 12 06 F1 | 	add	arg01, #4
36224     09 FB 61 FC | 	wrlong	result1, arg01
36228     F2 FA 01 F6 | 	mov	result1, objptr
3622c     3A FA 25 F4 | 	bith	result1, #58
36230     04 12 06 F1 | 	add	arg01, #4
36234     09 FB 61 FC | 	wrlong	result1, arg01
36238     F2 FA 01 F6 | 	mov	result1, objptr
3623c     00 08 06 FF 
36240     00 FA 45 F5 | 	or	result1, ##202375168
36244     04 12 06 F1 | 	add	arg01, #4
36248     09 FB 61 FC | 	wrlong	result1, arg01
3624c     F2 FA 01 F6 | 	mov	result1, objptr
36250     00 10 06 FF 
36254     00 FA 45 F5 | 	or	result1, ##203423744
36258     04 12 06 F1 | 	add	arg01, #4
3625c     09 FB 61 FC | 	wrlong	result1, arg01
36260     F2 FA 01 F6 | 	mov	result1, objptr
36264     00 18 06 FF 
36268     00 FA 45 F5 | 	or	result1, ##204472320
3626c     04 12 06 F1 | 	add	arg01, #4
36270     09 FB 61 FC | 	wrlong	result1, arg01
36274     F2 FA 01 F6 | 	mov	result1, objptr
36278     00 20 06 FF 
3627c     00 FA 45 F5 | 	or	result1, ##205520896
36280     04 12 06 F1 | 	add	arg01, #4
36284     09 FB 61 FC | 	wrlong	result1, arg01
36288     F2 FA 01 F6 | 	mov	result1, objptr
3628c     00 28 06 FF 
36290     00 FA 45 F5 | 	or	result1, ##206569472
36294     04 12 06 F1 | 	add	arg01, #4
36298     09 FB 61 FC | 	wrlong	result1, arg01
3629c     4C 12 86 F1 | 	sub	arg01, #76
362a0                 | ' 
362a0                 | '     v->close = &v_close;
362a0                 | '     v->read = &v_read;
362a0                 | '     v->write = &v_write;
362a0                 | '     v->lseek = &v_lseek;
362a0                 | '     v->ioctl = &v_ioctl;
362a0                 | '     v->flush = 0;
362a0                 | '     v->vfs_data = ptr;
362a0                 | '     v->reserved = 0;
362a0                 | ' 
362a0                 | '     v->open = &v_open;
362a0                 | '     v->creat = &v_creat;
362a0                 | '     v->opendir = &v_opendir;
362a0                 | '     v->closedir = &v_closedir;
362a0                 | '     v->readdir = &v_readdir;
362a0                 | '     v->stat = &v_stat;
362a0                 | ' 
362a0                 | '     v->mkdir = &v_mkdir;
362a0                 | '     v->rmdir = &v_rmdir;
362a0                 | ' 
362a0                 | '     v->remove = &v_remove;
362a0                 | '     v->rename = &v_rename;
362a0                 | ' 
362a0                 | '     v->init = &v_init;
362a0                 | '     v->deinit = &v_deinit;
362a0                 | ' 
362a0                 | '     return v;
362a0     09 FB 01 F6 | 	mov	result1, arg01
362a4     A7 F0 03 F6 | 	mov	ptra, fp
362a8     B2 00 A0 FD | 	call	#popregs_
362ac                 | _fatfs_cc_get_vfs_ret
362ac     2D 00 64 FD | 	ret
362b0                 | 
362b0                 | _fatfs_cc_xmit_mmc_1198
362b0     01 00 00 FF 
362b4     10 E4 05 F1 | 	add	objptr, ##528
362b8     F2 00 02 FB | 	rdlong	_var01, objptr
362bc     08 E4 05 F1 | 	add	objptr, #8
362c0     F2 02 02 FB | 	rdlong	_var02, objptr
362c4     01 00 00 FF 
362c8     18 E4 85 F1 | 	sub	objptr, ##536
362cc     40 02 62 FD | 	dirl	_var02
362d0     28 02 64 FD | 	setq	#1
362d4     09 05 02 FB | 	rdlong	_var03, arg01
362d8     69 04 62 FD | 	rev	_var03
362dc     1B 04 FE F9 | 	movbyts	_var03, #27
362e0     01 05 22 FC | 	wypin	_var03, _var02
362e4     0A 05 02 F6 | 	mov	_var03, arg02
362e8     02 14 4E F0 | 	shr	arg02, #2 wz
362ec     03 04 66 F0 | 	shl	_var03, #3
362f0     00 05 22 FC | 	wypin	_var03, _var01
362f4     41 02 62 FD | 	dirh	_var02
362f8     08 12 06 F1 | 	add	arg01, #8
362fc     69 06 62 FD | 	rev	_var04
36300     1B 06 FE F9 | 	movbyts	_var04, #27
36304                 | LR__5270
36304     01 07 22 5C |  if_ne	wypin	_var04, _var02
36308     09 07 02 5B |  if_ne	rdlong	_var04, arg01
3630c     04 12 06 51 |  if_ne	add	arg01, #4
36310     69 06 62 5D |  if_ne	rev	_var04
36314     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
36318                 | LR__5271
36318     40 02 72 5D |  if_ne	testp	_var02 wc
3631c     F8 FF 9F 1D |  if_a	jmp	#LR__5271
36320     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5270
36324                 | LR__5272
36324     40 00 72 FD | 	testp	_var01 wc
36328     F8 FF 9F 3D |  if_ae	jmp	#LR__5272
3632c     40 02 62 FD | 	dirl	_var02
36330     FF FF FF FF 
36334     01 FF 2B FC | 	wypin	##-1, _var02
36338     41 02 62 FD | 	dirh	_var02
3633c                 | _fatfs_cc_xmit_mmc_1198_ret
3633c     2D 00 64 FD | 	ret
36340                 | 
36340                 | _fatfs_cc_rcvr_mmc_1205
36340     01 00 00 FF 
36344     10 E4 05 F1 | 	add	objptr, ##528
36348     F2 00 02 FB | 	rdlong	_var01, objptr
3634c     0C E4 05 F1 | 	add	objptr, #12
36350     F2 02 02 FB | 	rdlong	_var02, objptr
36354     01 00 00 FF 
36358     1C E4 85 F1 | 	sub	objptr, ##540
3635c     01 03 08 FC | 	akpin	_var02
36360     0A 05 0A F6 | 	mov	_var03, arg02 wz
36364     02 04 4E F0 | 	shr	_var03, #2 wz
36368     30 00 90 AD |  if_e	jmp	#LR__5282
3636c     02 07 02 F6 | 	mov	_var04, _var03
36370     05 06 66 F0 | 	shl	_var04, #5
36374     00 07 22 FC | 	wypin	_var04, _var01
36378     01 7F 18 FC | 	wxpin	#63, _var02
3637c                 | LR__5280
3637c                 | LR__5281
3637c     40 02 72 FD | 	testp	_var02 wc
36380     F8 FF 9F 3D |  if_ae	jmp	#LR__5281
36384     01 07 8A FA | 	rdpin	_var04, _var02
36388     69 06 62 FD | 	rev	_var04
3638c     1B 06 FE F9 | 	movbyts	_var04, #27
36390     09 07 62 FC | 	wrlong	_var04, arg01
36394     04 12 06 F1 | 	add	arg01, #4
36398     F8 05 6E FB | 	djnz	_var03, #LR__5280
3639c                 | LR__5282
3639c     03 14 0E F5 | 	and	arg02, #3 wz
363a0     24 00 90 AD |  if_e	jmp	#LR__5285
363a4     01 4F 18 FC | 	wxpin	#39, _var02
363a8                 | LR__5283
363a8     00 11 28 FC | 	wypin	#8, _var01
363ac                 | LR__5284
363ac     40 02 72 FD | 	testp	_var02 wc
363b0     F8 FF 9F 3D |  if_ae	jmp	#LR__5284
363b4     01 07 8A FA | 	rdpin	_var04, _var02
363b8     69 06 62 FD | 	rev	_var04
363bc     09 07 42 FC | 	wrbyte	_var04, arg01
363c0     01 12 06 F1 | 	add	arg01, #1
363c4     F8 15 6E FB | 	djnz	arg02, #LR__5283
363c8                 | LR__5285
363c8                 | _fatfs_cc_rcvr_mmc_1205_ret
363c8     2D 00 64 FD | 	ret
363cc                 | 
363cc                 | _fatfs_cc_wait_ready_1209
363cc     01 4A 05 F6 | 	mov	COUNT_, #1
363d0     A8 00 A0 FD | 	call	#pushregs_
363d4     10 F0 07 F1 | 	add	ptra, #16
363d8     1A FA 61 FD | 	getct	result1
363dc     08 4E 05 F1 | 	add	fp, #8
363e0     A7 FA 61 FC | 	wrlong	result1, fp
363e4     14 26 06 FB | 	rdlong	local01, #20
363e8     01 26 46 F0 | 	shr	local01, #1
363ec     04 4E 05 F1 | 	add	fp, #4
363f0     A7 26 62 FC | 	wrlong	local01, fp
363f4     0C 4E 85 F1 | 	sub	fp, #12
363f8                 | ' {
363f8                 | ' 	BYTE d;
363f8                 | ' 	UINT tmr, tmout;
363f8                 | ' 
363f8                 | ' 	tmr = _cnt();
363f8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
363f8                 | ' 	for(;;) {
363f8                 | LR__5290
363f8     04 4E 05 F1 | 	add	fp, #4
363fc     A7 12 02 F6 | 	mov	arg01, fp
36400     04 4E 85 F1 | 	sub	fp, #4
36404     01 14 06 F6 | 	mov	arg02, #1
36408     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1205
3640c     04 4E 05 F1 | 	add	fp, #4
36410     A7 26 C2 FA | 	rdbyte	local01, fp
36414     04 4E 85 F1 | 	sub	fp, #4
36418     FF 26 0E F2 | 	cmp	local01, #255 wz
3641c     01 FA 05 A6 |  if_e	mov	result1, #1
36420     28 00 90 AD |  if_e	jmp	#LR__5291
36424     1A FA 61 FD | 	getct	result1
36428     08 4E 05 F1 | 	add	fp, #8
3642c     A7 26 02 FB | 	rdlong	local01, fp
36430     13 FB 81 F1 | 	sub	result1, local01
36434     04 4E 05 F1 | 	add	fp, #4
36438     A7 26 02 FB | 	rdlong	local01, fp
3643c     0C 4E 85 F1 | 	sub	fp, #12
36440     13 FB 11 F2 | 	cmp	result1, local01 wc
36444     00 FA 05 36 |  if_ae	mov	result1, #0
36448     AC FF 9F CD |  if_b	jmp	#LR__5290
3644c                 | LR__5291
3644c     A7 F0 03 F6 | 	mov	ptra, fp
36450     B2 00 A0 FD | 	call	#popregs_
36454                 | _fatfs_cc_wait_ready_1209_ret
36454     2D 00 64 FD | 	ret
36458                 | 
36458                 | _fatfs_cc_deselect_1215
36458     00 4A 05 F6 | 	mov	COUNT_, #0
3645c     A8 00 A0 FD | 	call	#pushregs_
36460     14 F0 07 F1 | 	add	ptra, #20
36464     01 00 00 FF 
36468     14 E4 05 F1 | 	add	objptr, ##532
3646c     F2 14 02 FB | 	rdlong	arg02, objptr
36470     04 4E 05 F1 | 	add	fp, #4
36474     A7 14 62 FC | 	wrlong	arg02, fp
36478     04 E4 85 F1 | 	sub	objptr, #4
3647c     F2 14 02 FB | 	rdlong	arg02, objptr
36480     04 4E 05 F1 | 	add	fp, #4
36484     A7 14 62 FC | 	wrlong	arg02, fp
36488     08 E4 05 F1 | 	add	objptr, #8
3648c     F2 14 02 FB | 	rdlong	arg02, objptr
36490     04 4E 05 F1 | 	add	fp, #4
36494     A7 14 62 FC | 	wrlong	arg02, fp
36498     04 E4 05 F1 | 	add	objptr, #4
3649c     F2 14 02 FB | 	rdlong	arg02, objptr
364a0     01 00 00 FF 
364a4     1C E4 85 F1 | 	sub	objptr, ##540
364a8     04 4E 05 F1 | 	add	fp, #4
364ac     A7 14 62 FC | 	wrlong	arg02, fp
364b0     0C 4E 85 F1 | 	sub	fp, #12
364b4     A7 12 02 FB | 	rdlong	arg01, fp
364b8     04 4E 85 F1 | 	sub	fp, #4
364bc     59 12 62 FD | 	drvh	arg01
364c0     1F 20 64 FD | 	waitx	#16
364c4     A7 12 02 F6 | 	mov	arg01, fp
364c8     01 14 06 F6 | 	mov	arg02, #1
364cc     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1205
364d0     A7 F0 03 F6 | 	mov	ptra, fp
364d4     B2 00 A0 FD | 	call	#popregs_
364d8                 | _fatfs_cc_deselect_1215_ret
364d8     2D 00 64 FD | 	ret
364dc                 | 
364dc                 | _fatfs_cc_select_1219
364dc     00 4A 05 F6 | 	mov	COUNT_, #0
364e0     A8 00 A0 FD | 	call	#pushregs_
364e4     10 F0 07 F1 | 	add	ptra, #16
364e8     01 00 00 FF 
364ec     14 E4 05 F1 | 	add	objptr, ##532
364f0     F2 14 02 FB | 	rdlong	arg02, objptr
364f4     08 4E 05 F1 | 	add	fp, #8
364f8     A7 14 62 FC | 	wrlong	arg02, fp
364fc     08 E4 05 F1 | 	add	objptr, #8
36500     F2 12 02 FB | 	rdlong	arg01, objptr
36504     01 00 00 FF 
36508     1C E4 85 F1 | 	sub	objptr, ##540
3650c     04 4E 05 F1 | 	add	fp, #4
36510     A7 12 62 FC | 	wrlong	arg01, fp
36514     50 12 62 FD | 	fltl	arg01
36518     04 4E 85 F1 | 	sub	fp, #4
3651c     A7 12 02 FB | 	rdlong	arg01, fp
36520     58 12 62 FD | 	drvl	arg01
36524     1F 20 64 FD | 	waitx	#16
36528     04 4E 05 F1 | 	add	fp, #4
3652c     A7 12 02 FB | 	rdlong	arg01, fp
36530     41 12 62 FD | 	dirh	arg01
36534     08 4E 85 F1 | 	sub	fp, #8
36538     A7 12 02 F6 | 	mov	arg01, fp
3653c     04 4E 85 F1 | 	sub	fp, #4
36540     01 14 06 F6 | 	mov	arg02, #1
36544     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1205
36548     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1209
3654c     00 FA 0D F2 | 	cmp	result1, #0 wz
36550     01 FA 05 56 |  if_ne	mov	result1, #1
36554     08 00 90 5D |  if_ne	jmp	#LR__5300
36558     FC FE BF FD | 	call	#_fatfs_cc_deselect_1215
3655c                 | ' 
3655c                 | ' 	deselect();
3655c                 | ' 	return 0;
3655c     00 FA 05 F6 | 	mov	result1, #0
36560                 | LR__5300
36560     A7 F0 03 F6 | 	mov	ptra, fp
36564     B2 00 A0 FD | 	call	#popregs_
36568                 | _fatfs_cc_select_1219_ret
36568     2D 00 64 FD | 	ret
3656c                 | 
3656c                 | _fatfs_cc_rcvr_datablock_1223
3656c     01 4A 05 F6 | 	mov	COUNT_, #1
36570     A8 00 A0 FD | 	call	#pushregs_
36574     18 F0 07 F1 | 	add	ptra, #24
36578     04 4E 05 F1 | 	add	fp, #4
3657c     A7 12 62 FC | 	wrlong	arg01, fp
36580     04 4E 05 F1 | 	add	fp, #4
36584     A7 14 62 FC | 	wrlong	arg02, fp
36588     1A FA 61 FD | 	getct	result1
3658c     08 4E 05 F1 | 	add	fp, #8
36590     A7 FA 61 FC | 	wrlong	result1, fp
36594     14 26 06 FB | 	rdlong	local01, #20
36598     03 26 46 F0 | 	shr	local01, #3
3659c     04 4E 05 F1 | 	add	fp, #4
365a0     A7 26 62 FC | 	wrlong	local01, fp
365a4     14 4E 85 F1 | 	sub	fp, #20
365a8                 | ' 	BYTE *buff,
365a8                 | ' 	UINT btr
365a8                 | ' )
365a8                 | ' {
365a8                 | ' 	BYTE d[2];
365a8                 | ' 	UINT tmr, tmout;
365a8                 | ' 
365a8                 | ' 	tmr = _cnt();
365a8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
365a8                 | ' 	for(;;) {
365a8                 | LR__5310
365a8     0C 4E 05 F1 | 	add	fp, #12
365ac     A7 12 02 F6 | 	mov	arg01, fp
365b0     0C 4E 85 F1 | 	sub	fp, #12
365b4     01 14 06 F6 | 	mov	arg02, #1
365b8     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1205
365bc     0C 4E 05 F1 | 	add	fp, #12
365c0     A7 26 C2 FA | 	rdbyte	local01, fp
365c4     0C 4E 85 F1 | 	sub	fp, #12
365c8     FF 26 0E F2 | 	cmp	local01, #255 wz
365cc     28 00 90 5D |  if_ne	jmp	#LR__5311
365d0     1A FA 61 FD | 	getct	result1
365d4     FD 26 02 F6 | 	mov	local01, result1
365d8     10 4E 05 F1 | 	add	fp, #16
365dc     A7 14 02 FB | 	rdlong	arg02, fp
365e0     0A 27 82 F1 | 	sub	local01, arg02
365e4     04 4E 05 F1 | 	add	fp, #4
365e8     A7 14 02 FB | 	rdlong	arg02, fp
365ec     14 4E 85 F1 | 	sub	fp, #20
365f0     0A 27 12 F2 | 	cmp	local01, arg02 wc
365f4     B0 FF 9F CD |  if_b	jmp	#LR__5310
365f8                 | LR__5311
365f8     0C 4E 05 F1 | 	add	fp, #12
365fc     A7 26 C2 FA | 	rdbyte	local01, fp
36600     0C 4E 85 F1 | 	sub	fp, #12
36604     FE 26 0E F2 | 	cmp	local01, #254 wz
36608     00 FA 05 56 |  if_ne	mov	result1, #0
3660c     30 00 90 5D |  if_ne	jmp	#LR__5312
36610     04 4E 05 F1 | 	add	fp, #4
36614     A7 12 02 FB | 	rdlong	arg01, fp
36618     04 4E 05 F1 | 	add	fp, #4
3661c     A7 14 02 FB | 	rdlong	arg02, fp
36620     08 4E 85 F1 | 	sub	fp, #8
36624     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1205
36628     0C 4E 05 F1 | 	add	fp, #12
3662c     A7 12 02 F6 | 	mov	arg01, fp
36630     0C 4E 85 F1 | 	sub	fp, #12
36634     02 14 06 F6 | 	mov	arg02, #2
36638     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1205
3663c                 | ' 
3663c                 | ' 	rcvr_mmc(buff, btr);
3663c                 | ' 	rcvr_mmc(d, 2);
3663c                 | ' 
3663c                 | ' 	return 1;
3663c     01 FA 05 F6 | 	mov	result1, #1
36640                 | LR__5312
36640     A7 F0 03 F6 | 	mov	ptra, fp
36644     B2 00 A0 FD | 	call	#popregs_
36648                 | _fatfs_cc_rcvr_datablock_1223_ret
36648     2D 00 64 FD | 	ret
3664c                 | 
3664c                 | _fatfs_cc_xmit_datablock_1225
3664c     00 4A 05 F6 | 	mov	COUNT_, #0
36650     A8 00 A0 FD | 	call	#pushregs_
36654     10 F0 07 F1 | 	add	ptra, #16
36658     04 4E 05 F1 | 	add	fp, #4
3665c     A7 12 62 FC | 	wrlong	arg01, fp
36660     04 4E 05 F1 | 	add	fp, #4
36664     A7 14 42 FC | 	wrbyte	arg02, fp
36668     08 4E 85 F1 | 	sub	fp, #8
3666c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1209
36670     00 FA 0D F2 | 	cmp	result1, #0 wz
36674     00 FA 05 A6 |  if_e	mov	result1, #0
36678     90 00 90 AD |  if_e	jmp	#LR__5321
3667c     08 4E 05 F1 | 	add	fp, #8
36680     A7 14 C2 FA | 	rdbyte	arg02, fp
36684     04 4E 05 F1 | 	add	fp, #4
36688     A7 14 42 FC | 	wrbyte	arg02, fp
3668c     A7 12 02 F6 | 	mov	arg01, fp
36690     0C 4E 85 F1 | 	sub	fp, #12
36694     01 14 06 F6 | 	mov	arg02, #1
36698     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1198
3669c     08 4E 05 F1 | 	add	fp, #8
366a0     A7 14 C2 FA | 	rdbyte	arg02, fp
366a4     08 4E 85 F1 | 	sub	fp, #8
366a8     FD 14 0E F2 | 	cmp	arg02, #253 wz
366ac     58 00 90 AD |  if_e	jmp	#LR__5320
366b0     04 4E 05 F1 | 	add	fp, #4
366b4     A7 12 02 FB | 	rdlong	arg01, fp
366b8     04 4E 85 F1 | 	sub	fp, #4
366bc     09 14 C6 F9 | 	decod	arg02, #9
366c0     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1198
366c4     0C 4E 05 F1 | 	add	fp, #12
366c8     A7 12 02 F6 | 	mov	arg01, fp
366cc     0C 4E 85 F1 | 	sub	fp, #12
366d0     02 14 06 F6 | 	mov	arg02, #2
366d4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1205
366d8     0C 4E 05 F1 | 	add	fp, #12
366dc     A7 12 02 F6 | 	mov	arg01, fp
366e0     0C 4E 85 F1 | 	sub	fp, #12
366e4     01 14 06 F6 | 	mov	arg02, #1
366e8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1205
366ec     0C 4E 05 F1 | 	add	fp, #12
366f0     A7 14 C2 FA | 	rdbyte	arg02, fp
366f4     0C 4E 85 F1 | 	sub	fp, #12
366f8     1F 14 06 F5 | 	and	arg02, #31
366fc     05 14 0E F2 | 	cmp	arg02, #5 wz
36700                 | ' 			return 0;
36700     00 FA 05 56 |  if_ne	mov	result1, #0
36704     04 00 90 5D |  if_ne	jmp	#LR__5321
36708                 | LR__5320
36708                 | ' 	}
36708                 | ' 
36708                 | ' 	return 1;
36708     01 FA 05 F6 | 	mov	result1, #1
3670c                 | LR__5321
3670c     A7 F0 03 F6 | 	mov	ptra, fp
36710     B2 00 A0 FD | 	call	#popregs_
36714                 | _fatfs_cc_xmit_datablock_1225_ret
36714     2D 00 64 FD | 	ret
36718                 | 
36718                 | _fatfs_cc_send_cmd_1229
36718     01 4A 05 F6 | 	mov	COUNT_, #1
3671c     A8 00 A0 FD | 	call	#pushregs_
36720     1C F0 07 F1 | 	add	ptra, #28
36724                 | _fatfs_cc_send_cmd_1229_enter
36724     04 4E 05 F1 | 	add	fp, #4
36728     A7 12 42 FC | 	wrbyte	arg01, fp
3672c     04 4E 05 F1 | 	add	fp, #4
36730     A7 14 62 FC | 	wrlong	arg02, fp
36734     04 4E 85 F1 | 	sub	fp, #4
36738     A7 FA C1 FA | 	rdbyte	result1, fp
3673c     04 4E 85 F1 | 	sub	fp, #4
36740     80 FA CD F7 | 	test	result1, #128 wz
36744     44 00 90 AD |  if_e	jmp	#LR__5330
36748     04 4E 05 F1 | 	add	fp, #4
3674c     A7 14 C2 FA | 	rdbyte	arg02, fp
36750     7F 14 06 F5 | 	and	arg02, #127
36754     A7 14 42 FC | 	wrbyte	arg02, fp
36758     04 4E 85 F1 | 	sub	fp, #4
3675c     37 12 06 F6 | 	mov	arg01, #55
36760     00 14 06 F6 | 	mov	arg02, #0
36764     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1229
36768     0C 4E 05 F1 | 	add	fp, #12
3676c     A7 FA 41 FC | 	wrbyte	result1, fp
36770     A7 14 C2 FA | 	rdbyte	arg02, fp
36774     0C 4E 85 F1 | 	sub	fp, #12
36778     02 14 16 F2 | 	cmp	arg02, #2 wc
3677c     0C 4E 05 31 |  if_ae	add	fp, #12
36780     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
36784     0C 4E 85 31 |  if_ae	sub	fp, #12
36788     6C 01 90 3D |  if_ae	jmp	#LR__5334
3678c                 | LR__5330
3678c     04 4E 05 F1 | 	add	fp, #4
36790     A7 14 C2 FA | 	rdbyte	arg02, fp
36794     04 4E 85 F1 | 	sub	fp, #4
36798     0C 14 0E F2 | 	cmp	arg02, #12 wz
3679c     14 00 90 AD |  if_e	jmp	#LR__5331
367a0     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1215
367a4     34 FD BF FD | 	call	#_fatfs_cc_select_1219
367a8     00 FA 0D F2 | 	cmp	result1, #0 wz
367ac     FF FA 05 A6 |  if_e	mov	result1, #255
367b0     44 01 90 AD |  if_e	jmp	#LR__5334
367b4                 | LR__5331
367b4     04 4E 05 F1 | 	add	fp, #4
367b8     A7 14 C2 FA | 	rdbyte	arg02, fp
367bc     40 FA 05 F6 | 	mov	result1, #64
367c0     0A FB 41 F5 | 	or	result1, arg02
367c4     10 4E 05 F1 | 	add	fp, #16
367c8     A7 FA 41 FC | 	wrbyte	result1, fp
367cc     0C 4E 85 F1 | 	sub	fp, #12
367d0     A7 FA 01 FB | 	rdlong	result1, fp
367d4     18 FA 45 F0 | 	shr	result1, #24
367d8     0D 4E 05 F1 | 	add	fp, #13
367dc     A7 FA 41 FC | 	wrbyte	result1, fp
367e0     0D 4E 85 F1 | 	sub	fp, #13
367e4     A7 FA 01 FB | 	rdlong	result1, fp
367e8     10 FA 45 F0 | 	shr	result1, #16
367ec     0E 4E 05 F1 | 	add	fp, #14
367f0     A7 FA 41 FC | 	wrbyte	result1, fp
367f4     0E 4E 85 F1 | 	sub	fp, #14
367f8     A7 FA 01 FB | 	rdlong	result1, fp
367fc     08 FA 45 F0 | 	shr	result1, #8
36800     0F 4E 05 F1 | 	add	fp, #15
36804     A7 FA 41 FC | 	wrbyte	result1, fp
36808     0F 4E 85 F1 | 	sub	fp, #15
3680c     A7 FA 01 FB | 	rdlong	result1, fp
36810     10 4E 05 F1 | 	add	fp, #16
36814     A7 FA 41 FC | 	wrbyte	result1, fp
36818     0C 4E 85 F1 | 	sub	fp, #12
3681c     A7 02 48 FC | 	wrbyte	#1, fp
36820     08 4E 85 F1 | 	sub	fp, #8
36824     A7 FA C9 FA | 	rdbyte	result1, fp wz
36828     04 4E 85 F1 | 	sub	fp, #4
3682c     0C 4E 05 A1 |  if_e	add	fp, #12
36830     A7 2A 49 AC |  if_e	wrbyte	#149, fp
36834     0C 4E 85 A1 |  if_e	sub	fp, #12
36838     04 4E 05 F1 | 	add	fp, #4
3683c     A7 FA C1 FA | 	rdbyte	result1, fp
36840     04 4E 85 F1 | 	sub	fp, #4
36844     08 FA 0D F2 | 	cmp	result1, #8 wz
36848     0C 4E 05 A1 |  if_e	add	fp, #12
3684c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
36850     0C 4E 85 A1 |  if_e	sub	fp, #12
36854     0C 4E 05 F1 | 	add	fp, #12
36858     A7 14 C2 FA | 	rdbyte	arg02, fp
3685c     0D 4E 05 F1 | 	add	fp, #13
36860     A7 14 42 FC | 	wrbyte	arg02, fp
36864     05 4E 85 F1 | 	sub	fp, #5
36868     A7 12 02 F6 | 	mov	arg01, fp
3686c     14 4E 85 F1 | 	sub	fp, #20
36870     06 14 06 F6 | 	mov	arg02, #6
36874     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1198
36878     04 4E 05 F1 | 	add	fp, #4
3687c     A7 26 C2 FA | 	rdbyte	local01, fp
36880     04 4E 85 F1 | 	sub	fp, #4
36884     0C 26 0E F2 | 	cmp	local01, #12 wz
36888     10 4E 05 A1 |  if_e	add	fp, #16
3688c     A7 12 02 A6 |  if_e	mov	arg01, fp
36890     10 4E 85 A1 |  if_e	sub	fp, #16
36894     01 14 06 A6 |  if_e	mov	arg02, #1
36898     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1205
3689c     0C 4E 05 F1 | 	add	fp, #12
368a0     A7 14 48 FC | 	wrbyte	#10, fp
368a4     0C 4E 85 F1 | 	sub	fp, #12
368a8                 | ' 	n = 10;
368a8                 | ' 	do
368a8                 | LR__5332
368a8     10 4E 05 F1 | 	add	fp, #16
368ac     A7 12 02 F6 | 	mov	arg01, fp
368b0     10 4E 85 F1 | 	sub	fp, #16
368b4     01 14 06 F6 | 	mov	arg02, #1
368b8     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1205
368bc     10 4E 05 F1 | 	add	fp, #16
368c0     A7 26 C2 FA | 	rdbyte	local01, fp
368c4     10 4E 85 F1 | 	sub	fp, #16
368c8     80 26 CE F7 | 	test	local01, #128 wz
368cc     1C 00 90 AD |  if_e	jmp	#LR__5333
368d0     0C 4E 05 F1 | 	add	fp, #12
368d4     A7 26 C2 FA | 	rdbyte	local01, fp
368d8     01 26 86 F1 | 	sub	local01, #1
368dc     A7 26 42 FC | 	wrbyte	local01, fp
368e0     A7 26 CA FA | 	rdbyte	local01, fp wz
368e4     0C 4E 85 F1 | 	sub	fp, #12
368e8     BC FF 9F 5D |  if_ne	jmp	#LR__5332
368ec                 | LR__5333
368ec                 | ' 
368ec                 | ' 	return d;
368ec     10 4E 05 F1 | 	add	fp, #16
368f0     A7 FA C1 FA | 	rdbyte	result1, fp
368f4     10 4E 85 F1 | 	sub	fp, #16
368f8                 | LR__5334
368f8     A7 F0 03 F6 | 	mov	ptra, fp
368fc     B2 00 A0 FD | 	call	#popregs_
36900                 | _fatfs_cc_send_cmd_1229_ret
36900     2D 00 64 FD | 	ret
36904                 | 
36904                 | _fatfs_cc_disk_deinitialize
36904     03 4A 05 F6 | 	mov	COUNT_, #3
36908     A8 00 A0 FD | 	call	#pushregs_
3690c     00 12 4E F2 | 	cmps	arg01, #0 wz
36910     01 00 00 FF 
36914     14 E4 05 F1 | 	add	objptr, ##532
36918     F2 12 02 FB | 	rdlong	arg01, objptr
3691c     04 E4 85 F1 | 	sub	objptr, #4
36920     F2 26 02 FB | 	rdlong	local01, objptr
36924     08 E4 05 F1 | 	add	objptr, #8
36928     F2 28 02 FB | 	rdlong	local02, objptr
3692c     04 E4 05 F1 | 	add	objptr, #4
36930     F2 2A 02 FB | 	rdlong	local03, objptr
36934     01 00 00 FF 
36938     1C E4 85 F1 | 	sub	objptr, ##540
3693c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
3693c                 | '         return RES_NOTRDY;
3693c     03 FA 05 56 |  if_ne	mov	result1, #3
36940     2C 00 90 5D |  if_ne	jmp	#LR__5340
36944     50 12 62 FD | 	fltl	arg01
36948     09 01 08 FC | 	wrpin	#0, arg01
3694c     50 26 62 FD | 	fltl	local01
36950     13 01 08 FC | 	wrpin	#0, local01
36954     50 28 62 FD | 	fltl	local02
36958     14 01 08 FC | 	wrpin	#0, local02
3695c     50 2A 62 FD | 	fltl	local03
36960     15 01 08 FC | 	wrpin	#0, local03
36964     0A 12 06 F6 | 	mov	arg01, #10
36968     40 0E BF FD | 	call	#__system___waitms
3696c                 | '     }
3696c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
3696c                 | '     _pinclear(PIN_SS);
3696c                 | '     _pinclear(PIN_CLK);
3696c                 | '     _pinclear(PIN_DI);
3696c                 | '     _pinclear(PIN_DO);
3696c                 | ' 
3696c                 | '     _waitms(10);
3696c                 | ' 
3696c                 | '     return 0;
3696c     00 FA 05 F6 | 	mov	result1, #0
36970                 | LR__5340
36970     A7 F0 03 F6 | 	mov	ptra, fp
36974     B2 00 A0 FD | 	call	#popregs_
36978                 | _fatfs_cc_disk_deinitialize_ret
36978     2D 00 64 FD | 	ret
3697c                 | 
3697c                 | _fatfs_cc_gettimeofday
3697c     04 4A 05 F6 | 	mov	COUNT_, #4
36980     A8 00 A0 FD | 	call	#pushregs_
36984     09 27 02 F6 | 	mov	local01, arg01
36988     8C 09 BF FD | 	call	#__system___getus
3698c     FD 12 02 F6 | 	mov	arg01, result1
36990     02 00 00 FF 
36994     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
36998     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
3699c     09 FB 01 F6 | 	mov	result1, arg01
369a0     14 FB 81 F1 | 	sub	result1, local02
369a4     A1 07 00 FF 
369a8     40 FA 15 FD | 	qdiv	result1, ##1000000
369ac     02 00 00 FF 
369b0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
369b4     18 28 62 FD | 	getqx	local02
369b8     A1 07 00 FF 
369bc     40 FA 15 FD | 	qdiv	result1, ##1000000
369c0     00 28 0E F2 | 	cmp	local02, #0 wz
369c4     19 2A 62 FD | 	getqy	local03
369c8     28 00 90 AD |  if_e	jmp	#LR__5350
369cc     02 00 00 FF 
369d0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
369d4     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
369d8     14 2D 02 F1 | 	add	local04, local02
369dc     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
369e0     15 13 82 F1 | 	sub	arg01, local03
369e4     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
369e8     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
369ec     02 00 00 FF 
369f0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
369f4                 | LR__5350
369f4     02 00 00 FF 
369f8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
369fc     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
36a00     02 00 00 FF 
36a04     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
36a08     13 2D 62 FC | 	wrlong	local04, local01
36a0c     04 26 06 F1 | 	add	local01, #4
36a10     13 2B 62 FC | 	wrlong	local03, local01
36a14                 | '         lastsec += secs;
36a14                 | '         lastus = now - leftover;
36a14                 | '     }
36a14                 | '     tv->tv_sec = lastsec;
36a14                 | '     tv->tv_usec = leftover;
36a14                 | '     return 0;
36a14     00 FA 05 F6 | 	mov	result1, #0
36a18     A7 F0 03 F6 | 	mov	ptra, fp
36a1c     B2 00 A0 FD | 	call	#popregs_
36a20                 | _fatfs_cc_gettimeofday_ret
36a20     2D 00 64 FD | 	ret
36a24                 | 
36a24                 | _fatfs_cc__is_leap_year
36a24     09 FB 51 F6 | 	abs	result1, arg01 wc
36a28     03 FA 05 F5 | 	and	result1, #3
36a2c     FD FA 89 F6 | 	negc	result1, result1 wz
36a30     38 00 90 5D |  if_ne	jmp	#LR__5361
36a34     09 FB 51 F6 | 	abs	result1, arg01 wc
36a38     64 FA 15 FD | 	qdiv	result1, #100
36a3c     19 FA 61 FD | 	getqy	result1
36a40     FD FA 89 F6 | 	negc	result1, result1 wz
36a44     1C 00 90 5D |  if_ne	jmp	#LR__5360
36a48     09 FB 51 F6 | 	abs	result1, arg01 wc
36a4c     90 FB 15 FD | 	qdiv	result1, #400
36a50                 | '       return (0 == y % 400);
36a50     00 FA 05 F6 | 	mov	result1, #0
36a54     19 00 62 FD | 	getqy	_var01
36a58     00 01 8A F6 | 	negc	_var01, _var01 wz
36a5c     01 FA 05 A6 |  if_e	mov	result1, #1
36a60     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
36a64                 | LR__5360
36a64                 | '     return 1;
36a64     01 FA 05 F6 | 	mov	result1, #1
36a68     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
36a6c                 | LR__5361
36a6c                 | '   }
36a6c                 | '   return 0;
36a6c     00 FA 05 F6 | 	mov	result1, #0
36a70                 | _fatfs_cc__is_leap_year_ret
36a70     2D 00 64 FD | 	ret
36a74                 | 
36a74                 | _fatfs_cc___tzoffset
36a74     09 01 0A F6 | 	mov	_var01, arg01 wz
36a78     FF FF FF FF 
36a7c     0A FF 6B FC | 	wrlong	##-1, arg02
36a80     01 02 06 F6 | 	mov	_var02, #1
36a84     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
36a88                 | '                 return 0;
36a88     00 FA 05 A6 |  if_e	mov	result1, #0
36a8c     94 02 90 AD |  if_e	jmp	#LR__5387
36a90     0A 01 68 FC | 	wrlong	#0, arg02
36a94     02 00 00 FF 
36a98     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36a9c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
36aa0                 | ' 
36aa0                 | '        *hasdst = 0;
36aa0                 | ' 
36aa0                 | ' 	n = stdname;
36aa0                 | '         while (*s && isalpha(*s)) {
36aa0     02 00 00 FF 
36aa4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
36aa8     97 28 48 FB | 	callpa	#(@LR__5371-@LR__5370)>>2,fcache_load_ptr_
36aac                 | LR__5370
36aac     00 05 CA FA | 	rdbyte	_var03, _var01 wz
36ab0     48 00 90 AD |  if_e	jmp	#LR__5372
36ab4     00 13 C2 FA | 	rdbyte	arg01, _var01
36ab8                 | ' {
36ab8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
36ab8     80 12 36 F3 | 	fle	arg01, #128 wc
36abc                 | '     return __ctype[c];
36abc     02 00 00 FF 
36ac0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36ac4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36ac8     09 FB C1 FA | 	rdbyte	result1, arg01
36acc     02 00 00 FF 
36ad0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36ad4     0C FA CD F7 | 	test	result1, #12 wz
36ad8     20 00 90 AD |  if_e	jmp	#LR__5372
36adc     00 09 02 F6 | 	mov	_var05, _var01
36ae0     00 0B 02 F6 | 	mov	_var06, _var01
36ae4     01 0A 06 F1 | 	add	_var06, #1
36ae8     04 0D C2 FA | 	rdbyte	_var07, _var05
36aec     05 01 02 F6 | 	mov	_var01, _var06
36af0     03 0D 42 FC | 	wrbyte	_var07, _var04
36af4     01 06 06 F1 | 	add	_var04, #1
36af8     B0 FF 9F FD | 	jmp	#LR__5370
36afc                 | LR__5371
36afc                 | LR__5372
36afc     03 01 48 FC | 	wrbyte	#0, _var04
36b00     00 0E 06 F6 | 	mov	_var08, #0
36b04     00 05 C2 FA | 	rdbyte	_var03, _var01
36b08     2D 04 0E F2 | 	cmp	_var03, #45 wz
36b0c     01 02 66 A6 |  if_e	neg	_var02, #1
36b10     01 00 06 A1 |  if_e	add	_var01, #1
36b14     97 28 48 FB | 	callpa	#(@LR__5374-@LR__5373)>>2,fcache_load_ptr_
36b18                 | '                 sgn = -1;
36b18                 | '                 s++;
36b18                 | '         }
36b18                 | '         while (isdigit(*s)) {
36b18                 | LR__5373
36b18     00 13 C2 FA | 	rdbyte	arg01, _var01
36b1c                 | ' {
36b1c                 | '   return  (__ctype_get(c) & 0x02 ) ;
36b1c     80 12 36 F3 | 	fle	arg01, #128 wc
36b20                 | '     return __ctype[c];
36b20     02 00 00 FF 
36b24     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36b28     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36b2c     09 FB C1 FA | 	rdbyte	result1, arg01
36b30     02 00 00 FF 
36b34     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36b38     02 FA CD F7 | 	test	result1, #2 wz
36b3c     28 00 90 AD |  if_e	jmp	#LR__5375
36b40     07 05 02 F6 | 	mov	_var03, _var08
36b44     02 04 66 F0 | 	shl	_var03, #2
36b48     07 05 02 F1 | 	add	_var03, _var08
36b4c     01 04 66 F0 | 	shl	_var03, #1
36b50     00 09 C2 FA | 	rdbyte	_var05, _var01
36b54     30 08 86 F1 | 	sub	_var05, #48
36b58     04 05 02 F1 | 	add	_var03, _var05
36b5c     02 0F 02 F6 | 	mov	_var08, _var03
36b60     01 00 06 F1 | 	add	_var01, #1
36b64     B0 FF 9F FD | 	jmp	#LR__5373
36b68                 | LR__5374
36b68                 | LR__5375
36b68     07 00 00 FF 
36b6c     10 0E 06 FD | 	qmul	_var08, ##3600
36b70     00 05 C2 FA | 	rdbyte	_var03, _var01
36b74     3A 04 0E F2 | 	cmp	_var03, #58 wz
36b78     18 10 62 FD | 	getqx	_var09
36b7c     70 00 90 5D |  if_ne	jmp	#LR__5379
36b80     00 0E 06 F6 | 	mov	_var08, #0
36b84     01 00 06 F1 | 	add	_var01, #1
36b88     97 28 48 FB | 	callpa	#(@LR__5377-@LR__5376)>>2,fcache_load_ptr_
36b8c                 | '                 x = 0;
36b8c                 | '                 s++;
36b8c                 | '                 while (isdigit(*s)) {
36b8c                 | LR__5376
36b8c     00 13 C2 FA | 	rdbyte	arg01, _var01
36b90                 | ' {
36b90                 | '   return  (__ctype_get(c) & 0x02 ) ;
36b90     80 12 36 F3 | 	fle	arg01, #128 wc
36b94                 | '     return __ctype[c];
36b94     02 00 00 FF 
36b98     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36b9c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36ba0     09 FB C1 FA | 	rdbyte	result1, arg01
36ba4     02 00 00 FF 
36ba8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36bac     02 FA CD F7 | 	test	result1, #2 wz
36bb0     28 00 90 AD |  if_e	jmp	#LR__5378
36bb4     07 05 02 F6 | 	mov	_var03, _var08
36bb8     02 04 66 F0 | 	shl	_var03, #2
36bbc     07 05 02 F1 | 	add	_var03, _var08
36bc0     01 04 66 F0 | 	shl	_var03, #1
36bc4     00 09 C2 FA | 	rdbyte	_var05, _var01
36bc8     30 08 86 F1 | 	sub	_var05, #48
36bcc     04 05 02 F1 | 	add	_var03, _var05
36bd0     02 0F 02 F6 | 	mov	_var08, _var03
36bd4     01 00 06 F1 | 	add	_var01, #1
36bd8     B0 FF 9F FD | 	jmp	#LR__5376
36bdc                 | LR__5377
36bdc                 | LR__5378
36bdc     07 0D 02 F6 | 	mov	_var07, _var08
36be0     04 0C 66 F0 | 	shl	_var07, #4
36be4     07 0D 82 F1 | 	sub	_var07, _var08
36be8     02 0C 66 F0 | 	shl	_var07, #2
36bec     06 11 02 F1 | 	add	_var09, _var07
36bf0                 | LR__5379
36bf0     02 00 00 FF 
36bf4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
36bf8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
36bfc     00 13 C2 FA | 	rdbyte	arg01, _var01
36c00                 | ' {
36c00                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
36c00     80 12 36 F3 | 	fle	arg01, #128 wc
36c04                 | '     return __ctype[c];
36c04     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
36c08     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36c0c     09 FB C1 FA | 	rdbyte	result1, arg01
36c10     02 00 00 FF 
36c14     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36c18     0C FA CD F7 | 	test	result1, #12 wz
36c1c     50 00 90 AD |  if_e	jmp	#LR__5382
36c20     0A 03 68 FC | 	wrlong	#1, arg02
36c24                 | '                 *hasdst = 1;
36c24                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
36c24                 | LR__5380
36c24     00 05 CA FA | 	rdbyte	_var03, _var01 wz
36c28     44 00 90 AD |  if_e	jmp	#LR__5381
36c2c     00 13 C2 FA | 	rdbyte	arg01, _var01
36c30                 | ' {
36c30                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
36c30     80 12 36 F3 | 	fle	arg01, #128 wc
36c34                 | '     return __ctype[c];
36c34     02 00 00 FF 
36c38     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36c3c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36c40     09 FB C1 FA | 	rdbyte	result1, arg01
36c44     02 00 00 FF 
36c48     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36c4c     0C FA CD F7 | 	test	result1, #12 wz
36c50     1C 00 90 AD |  if_e	jmp	#LR__5381
36c54     00 0B 02 F6 | 	mov	_var06, _var01
36c58     01 0A 06 F1 | 	add	_var06, #1
36c5c     00 0D C2 FA | 	rdbyte	_var07, _var01
36c60     05 01 02 F6 | 	mov	_var01, _var06
36c64     03 0D 42 FC | 	wrbyte	_var07, _var04
36c68     01 06 06 F1 | 	add	_var04, #1
36c6c     B4 FF 9F FD | 	jmp	#LR__5380
36c70                 | LR__5381
36c70                 | LR__5382
36c70     03 01 48 FC | 	wrbyte	#0, _var04
36c74     02 00 00 FF 
36c78     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36c7c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36c80     02 00 00 FF 
36c84     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
36c88     20 00 90 AD |  if_e	jmp	#LR__5383
36c8c     02 00 00 FF 
36c90     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36c94     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36c98     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
36c9c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36ca0     02 00 00 FF 
36ca4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
36ca8     1C 00 90 FD | 	jmp	#LR__5384
36cac                 | LR__5383
36cac     02 00 00 FF 
36cb0     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
36cb4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36cb8     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
36cbc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36cc0     02 00 00 FF 
36cc4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
36cc8                 | LR__5384
36cc8     02 00 00 FF 
36ccc     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
36cd0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36cd4     02 00 00 FF 
36cd8     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
36cdc     20 00 90 AD |  if_e	jmp	#LR__5385
36ce0     02 00 00 FF 
36ce4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
36ce8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36cec     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
36cf0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36cf4     02 00 00 FF 
36cf8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
36cfc     1C 00 90 FD | 	jmp	#LR__5386
36d00                 | LR__5385
36d00     02 00 00 FF 
36d04     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36d08     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36d0c     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
36d10     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36d14     02 00 00 FF 
36d18     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
36d1c                 | LR__5386
36d1c     08 03 02 FD | 	qmul	_var02, _var09
36d20                 | ' 		_tzname[1] = stdname;
36d20                 | ' 
36d20                 | '         return sgn * off;
36d20     18 FA 61 FD | 	getqx	result1
36d24                 | LR__5387
36d24                 | _fatfs_cc___tzoffset_ret
36d24     2D 00 64 FD | 	ret
36d28                 | 
36d28                 | _fatfs_cc___indst
36d28     10 12 06 F1 | 	add	arg01, #16
36d2c     09 01 02 FB | 	rdlong	_var01, arg01
36d30     10 12 86 F1 | 	sub	arg01, #16
36d34     02 00 0E F2 | 	cmp	_var01, #2 wz
36d38     30 00 90 5D |  if_ne	jmp	#LR__5390
36d3c     07 00 06 F6 | 	mov	_var01, #7
36d40     18 12 06 F1 | 	add	arg01, #24
36d44     09 03 02 FB | 	rdlong	_var02, arg01
36d48     01 01 02 F1 | 	add	_var01, _var02
36d4c     0C 12 86 F1 | 	sub	arg01, #12
36d50     09 05 02 FB | 	rdlong	_var03, arg01
36d54     02 01 82 F1 | 	sub	_var01, _var03
36d58     00 00 56 F2 | 	cmps	_var01, #0 wc
36d5c                 | '                         return 1;
36d5c     01 FA 05 C6 |  if_b	mov	result1, #1
36d60     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36d64                 | '                 return 0;
36d64     00 FA 05 F6 | 	mov	result1, #0
36d68     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
36d6c                 | LR__5390
36d6c     10 12 06 F1 | 	add	arg01, #16
36d70     09 01 02 FB | 	rdlong	_var01, arg01
36d74     10 12 86 F1 | 	sub	arg01, #16
36d78     0A 00 0E F2 | 	cmp	_var01, #10 wz
36d7c     28 00 90 5D |  if_ne	jmp	#LR__5391
36d80     18 12 06 F1 | 	add	arg01, #24
36d84     09 01 02 FB | 	rdlong	_var01, arg01
36d88     0C 12 86 F1 | 	sub	arg01, #12
36d8c     09 07 02 FB | 	rdlong	_var04, arg01
36d90     03 01 82 F1 | 	sub	_var01, _var04
36d94     00 00 56 F2 | 	cmps	_var01, #0 wc
36d98                 | '                         return 0;
36d98     00 FA 05 C6 |  if_b	mov	result1, #0
36d9c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36da0                 | '                 return 1;
36da0     01 FA 05 F6 | 	mov	result1, #1
36da4     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
36da8                 | LR__5391
36da8                 | '         }
36da8                 | ' 
36da8                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
36da8     00 00 06 F6 | 	mov	_var01, #0
36dac     10 12 06 F1 | 	add	arg01, #16
36db0     09 03 02 FB | 	rdlong	_var02, arg01
36db4     10 12 86 F1 | 	sub	arg01, #16
36db8     03 02 56 F2 | 	cmps	_var02, #3 wc
36dbc     10 00 90 CD |  if_b	jmp	#LR__5392
36dc0     10 12 06 F1 | 	add	arg01, #16
36dc4     09 05 02 FB | 	rdlong	_var03, arg01
36dc8     0A 04 56 F2 | 	cmps	_var03, #10 wc
36dcc     01 00 06 C6 |  if_b	mov	_var01, #1
36dd0                 | LR__5392
36dd0     00 FB 01 F6 | 	mov	result1, _var01
36dd4                 | _fatfs_cc___indst_ret
36dd4     2D 00 64 FD | 	ret
36dd8                 | 
36dd8                 | ' 	
36dd8                 | ' 	FUNCTION pfunc(c as integer) as integer
36dd8                 | ___strs_cl_pfunc
36dd8                 | ' 		if (i < 16) then
36dd8     04 E4 05 F1 | 	add	objptr, #4
36ddc     F2 FA 01 FB | 	rdlong	result1, objptr
36de0     04 E4 85 F1 | 	sub	objptr, #4
36de4     10 FA 55 F2 | 	cmps	result1, #16 wc
36de8     2C 00 90 3D |  if_ae	jmp	#LR__5400
36dec     F2 FA 01 FB | 	rdlong	result1, objptr
36df0     04 E4 05 F1 | 	add	objptr, #4
36df4     F2 00 02 FB | 	rdlong	_var01, objptr
36df8     FD 00 02 F1 | 	add	_var01, result1
36dfc     00 13 42 FC | 	wrbyte	arg01, _var01
36e00     F2 FA 01 FB | 	rdlong	result1, objptr
36e04     01 FA 05 F1 | 	add	result1, #1
36e08     F2 FA 61 FC | 	wrlong	result1, objptr
36e0c     04 E4 85 F1 | 	sub	objptr, #4
36e10                 | ' 			p(i) = c
36e10                 | ' 			i = i+1
36e10                 | ' 			return 1
36e10     01 FA 05 F6 | 	mov	result1, #1
36e14     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
36e18                 | LR__5400
36e18                 | ' 			return -1
36e18     01 FA 65 F6 | 	neg	result1, #1
36e1c                 | ___strs_cl_pfunc_ret
36e1c     2D 00 64 FD | 	ret
36e20                 | 
36e20                 | __struct__s_vfs_file_t_putchar
36e20     04 4A 05 F6 | 	mov	COUNT_, #4
36e24     A8 00 A0 FD | 	call	#pushregs_
36e28     1C E4 05 F1 | 	add	objptr, #28
36e2c     F2 26 0A FB | 	rdlong	local01, objptr wz
36e30     1C E4 85 F1 | 	sub	objptr, #28
36e34     00 FA 05 A6 |  if_e	mov	result1, #0
36e38     48 00 90 AD |  if_e	jmp	#LR__5410
36e3c     1C E4 05 F1 | 	add	objptr, #28
36e40     F2 28 02 FB | 	rdlong	local02, objptr
36e44     14 2B 02 F6 | 	mov	local03, local02
36e48     1C E4 85 F1 | 	sub	objptr, #28
36e4c     13 2A 46 F7 | 	zerox	local03, #19
36e50     14 28 46 F0 | 	shr	local02, #20
36e54     02 28 66 F0 | 	shl	local02, #2
36e58     ED 28 02 F1 | 	add	local02, __methods__
36e5c     14 29 02 FB | 	rdlong	local02, local02
36e60     F2 14 02 F6 | 	mov	arg02, objptr
36e64     F2 2C 02 F6 | 	mov	local04, objptr
36e68     15 E5 01 F6 | 	mov	objptr, local03
36e6c     2D 28 62 FD | 	call	local02
36e70     16 E5 01 F6 | 	mov	objptr, local04
36e74                 | '     return (i < 0) ? 0 : 1;
36e74     00 FA 55 F2 | 	cmps	result1, #0 wc
36e78     00 26 06 C6 |  if_b	mov	local01, #0
36e7c     01 26 06 36 |  if_ae	mov	local01, #1
36e80     13 FB 01 F6 | 	mov	result1, local01
36e84                 | LR__5410
36e84     A7 F0 03 F6 | 	mov	ptra, fp
36e88     B2 00 A0 FD | 	call	#popregs_
36e8c                 | __struct__s_vfs_file_t_putchar_ret
36e8c     2D 00 64 FD | 	ret
36e90                 | 
36e90                 | __struct__s_vfs_file_t_getchar
36e90     03 4A 05 F6 | 	mov	COUNT_, #3
36e94     A8 00 A0 FD | 	call	#pushregs_
36e98     20 E4 05 F1 | 	add	objptr, #32
36e9c     F2 12 0A FB | 	rdlong	arg01, objptr wz
36ea0     20 E4 85 F1 | 	sub	objptr, #32
36ea4     01 FA 65 A6 |  if_e	neg	result1, #1
36ea8     38 00 90 AD |  if_e	jmp	#LR__5420
36eac                 | '     return getcf(__this);
36eac     20 E4 05 F1 | 	add	objptr, #32
36eb0     F2 26 02 FB | 	rdlong	local01, objptr
36eb4     13 29 02 F6 | 	mov	local02, local01
36eb8     20 E4 85 F1 | 	sub	objptr, #32
36ebc     13 28 46 F7 | 	zerox	local02, #19
36ec0     14 26 46 F0 | 	shr	local01, #20
36ec4     02 26 66 F0 | 	shl	local01, #2
36ec8     ED 26 02 F1 | 	add	local01, __methods__
36ecc     13 27 02 FB | 	rdlong	local01, local01
36ed0     F2 12 02 F6 | 	mov	arg01, objptr
36ed4     F2 2A 02 F6 | 	mov	local03, objptr
36ed8     14 E5 01 F6 | 	mov	objptr, local02
36edc     2D 26 62 FD | 	call	local01
36ee0     15 E5 01 F6 | 	mov	objptr, local03
36ee4                 | LR__5420
36ee4     A7 F0 03 F6 | 	mov	ptra, fp
36ee8     B2 00 A0 FD | 	call	#popregs_
36eec                 | __struct__s_vfs_file_t_getchar_ret
36eec     2D 00 64 FD | 	ret
36ef0                 | 
36ef0                 | __struct___bas_wrap_sender_tx
36ef0     03 4A 05 F6 | 	mov	COUNT_, #3
36ef4     A8 00 A0 FD | 	call	#pushregs_
36ef8     F2 26 02 FB | 	rdlong	local01, objptr
36efc     13 29 02 F6 | 	mov	local02, local01
36f00     13 26 46 F7 | 	zerox	local01, #19
36f04     14 28 46 F0 | 	shr	local02, #20
36f08     02 28 66 F0 | 	shl	local02, #2
36f0c     ED 28 02 F1 | 	add	local02, __methods__
36f10     14 29 02 FB | 	rdlong	local02, local02
36f14     F2 2A 02 F6 | 	mov	local03, objptr
36f18     13 E5 01 F6 | 	mov	objptr, local01
36f1c     2D 28 62 FD | 	call	local02
36f20     15 E5 01 F6 | 	mov	objptr, local03
36f24     01 FA 05 F6 | 	mov	result1, #1
36f28     A7 F0 03 F6 | 	mov	ptra, fp
36f2c     B2 00 A0 FD | 	call	#popregs_
36f30                 | __struct___bas_wrap_sender_tx_ret
36f30     2D 00 64 FD | 	ret
36f34                 | 
36f34                 | __struct___bas_wrap_sender_rx
36f34     03 4A 05 F6 | 	mov	COUNT_, #3
36f38     A8 00 A0 FD | 	call	#pushregs_
36f3c     04 E4 05 F1 | 	add	objptr, #4
36f40     F2 26 02 FB | 	rdlong	local01, objptr
36f44     13 29 02 F6 | 	mov	local02, local01
36f48     04 E4 85 F1 | 	sub	objptr, #4
36f4c     13 28 46 F7 | 	zerox	local02, #19
36f50     14 26 46 F0 | 	shr	local01, #20
36f54     02 26 66 F0 | 	shl	local01, #2
36f58     ED 26 02 F1 | 	add	local01, __methods__
36f5c     13 27 02 FB | 	rdlong	local01, local01
36f60     F2 2A 02 F6 | 	mov	local03, objptr
36f64     14 E5 01 F6 | 	mov	objptr, local02
36f68     2D 26 62 FD | 	call	local01
36f6c     15 E5 01 F6 | 	mov	objptr, local03
36f70     A7 F0 03 F6 | 	mov	ptra, fp
36f74     B2 00 A0 FD | 	call	#popregs_
36f78                 | __struct___bas_wrap_sender_rx_ret
36f78     2D 00 64 FD | 	ret
36f7c                 | 
36f7c                 | __struct___bas_wrap_sender_close
36f7c     03 4A 05 F6 | 	mov	COUNT_, #3
36f80     A8 00 A0 FD | 	call	#pushregs_
36f84     08 E4 05 F1 | 	add	objptr, #8
36f88     F2 26 02 FB | 	rdlong	local01, objptr
36f8c     13 29 02 F6 | 	mov	local02, local01
36f90     08 E4 85 F1 | 	sub	objptr, #8
36f94     13 28 46 F7 | 	zerox	local02, #19
36f98     14 26 46 F0 | 	shr	local01, #20
36f9c     02 26 66 F0 | 	shl	local01, #2
36fa0     ED 26 02 F1 | 	add	local01, __methods__
36fa4     13 27 02 FB | 	rdlong	local01, local01
36fa8     F2 2A 02 F6 | 	mov	local03, objptr
36fac     14 E5 01 F6 | 	mov	objptr, local02
36fb0     2D 26 62 FD | 	call	local01
36fb4     15 E5 01 F6 | 	mov	objptr, local03
36fb8     A7 F0 03 F6 | 	mov	ptra, fp
36fbc     B2 00 A0 FD | 	call	#popregs_
36fc0                 | __struct___bas_wrap_sender_close_ret
36fc0     2D 00 64 FD | 	ret
36fc4                 | 
36fc4                 | LR__5430
36fc4     2F          | 	byte	"/"
36fc5     00          | 	byte	0
36fc6                 | LR__5431
36fc6     69 6E 66    | 	byte	"inf"
36fc9     00          | 	byte	0
36fca                 | LR__5432
36fca     6E 61 6E    | 	byte	"nan"
36fcd     00          | 	byte	0
36fce                 | LR__5433
36fce                 | 	byte	
36fce     00          | 	byte	0
36fcf                 | LR__5434
36fcf                 | 	byte	
36fcf     00          | 	byte	0
36fd0                 | LR__5435
36fd0                 | 	byte	
36fd0     00          | 	byte	0
36fd1                 | LR__5436
36fd1                 | 	byte	
36fd1     00          | 	byte	0
36fd2                 | LR__5437
36fd2                 | 	byte	
36fd2     00          | 	byte	0
36fd3                 | LR__5438
36fd3                 | 	byte	
36fd3     00          | 	byte	0
36fd4                 | LR__5439
36fd4                 | 	byte	
36fd4     00          | 	byte	0
36fd5                 | LR__5440
36fd5                 | 	byte	
36fd5     00          | 	byte	0
36fd6                 | LR__5441
36fd6     00          | 	byte	0
36fd7     00          | 	byte	0
36fd8                 | LR__5442
36fd8     00          | 	byte	0
36fd9     00          | 	byte	0
36fda                 | LR__5443
36fda     00          | 	byte	0
36fdb     00          | 	byte	0
36fdc                 | LR__5444
36fdc     20 21 21 21 
36fe0     20 63 6F 72 
36fe4     72 75 70 74 
36fe8     65 64 20 68 
36fec     65 61 70 3F 
36ff0     3F 3F 20 21 
36ff4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
36ff7     00          | 	byte	0
36ff8                 | LR__5445
36ff8     20 21 21 21 
36ffc     20 6F 75 74 
37000     20 6F 66 20 
37004     68 65 61 70 
37008     20 6D 65 6D 
3700c     6F 72 79 20 
37010     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
37014     00          | 	byte	0
37015                 | LR__5446
37015     20 21 21 21 
37019     20 63 6F 72 
3701d     72 75 70 74 
37021     65 64 20 68 
37025     65 61 70 20 
37029     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
3702d     00          | 	byte	0
3702e                 | LR__5447
3702e     00          | 	byte	0
3702f     00          | 	byte	0
37030                 | LR__5448
37030     2E          | 	byte	"."
37031     00          | 	byte	0
37032                 | LR__5449
37032     00          | 	byte	0
37033     00          | 	byte	0
37034                 | LR__5450
37034     00          | 	byte	0
37035     00          | 	byte	0
37036                 | LR__5451
37036     00          | 	byte	0
37037     00          | 	byte	0
37038                 | LR__5452
37038     2A 3A 3C 3E 
3703c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
37040     00          | 	byte	0
37041                 | LR__5453
37041     2B 2C 3B 3D 
37045     5B 5D       | 	byte	"+,;=[]"
37047     00          | 	byte	0
37048                 | LR__5454
37048     46 41 54 33 
3704c     32 20 20 20 | 	byte	"FAT32   "
37050     00          | 	byte	0
37051                 | LR__5455
37051     54 5A       | 	byte	"TZ"
37053     00          | 	byte	0
37054                 | LR__5456
37054     00          | 	byte	0
37055     00          | 	byte	0
37056                 | LR__5457
37056                 | 	byte	
37056     00          | 	byte	0
37057                 | LR__5458
37057                 | 	byte	
37057     00          | 	byte	0
37058                 | LR__5459
37058                 | 	byte	
37058     00          | 	byte	0
37059                 | LR__5460
37059                 | 	byte	
37059     00          | 	byte	0
3705a                 | LR__5461
3705a     22          | 	byte	34
3705b     00          | 	byte	0
3705c                 | LR__5462
3705c     22          | 	byte	34
3705d     00          | 	byte	0
3705e                 | LR__5463
3705e     3A          | 	byte	":"
3705f     00          | 	byte	0
37060                 | LR__5464
37060                 | 	byte	
37060     00          | 	byte	0
37061                 | LR__5465
37061                 | 	byte	
37061     00          | 	byte	0
37062                 | LR__5466
37062                 | 	byte	
37062     00          | 	byte	0
37063                 | LR__5467
37063                 | 	byte	
37063     00          | 	byte	0
37064                 | LR__5468
37064                 | 	byte	
37064     00          | 	byte	0
37065                 | LR__5469
37065                 | 	byte	
37065     00          | 	byte	0
37066                 | LR__5470
37066                 | 	byte	
37066     00          | 	byte	0
37067                 | LR__5471
37067     30          | 	byte	"0"
37068     00          | 	byte	0
37069                 | LR__5472
37069     22          | 	byte	34
3706a     00          | 	byte	0
3706b                 | LR__5473
3706b     22          | 	byte	34
3706c     00          | 	byte	0
3706d                 | LR__5474
3706d     22          | 	byte	34
3706e     00          | 	byte	0
3706f                 | LR__5475
3706f     22          | 	byte	34
37070     00          | 	byte	0
37071                 | LR__5476
37071     22          | 	byte	34
37072     00          | 	byte	0
37073                 | LR__5477
37073     3E          | 	byte	">"
37074     00          | 	byte	0
37075                 | LR__5478
37075     3C          | 	byte	"<"
37076     00          | 	byte	0
37077                 | LR__5479
37077     2B          | 	byte	"+"
37078     00          | 	byte	0
37079                 | LR__5480
37079     2D          | 	byte	"-"
3707a     00          | 	byte	0
3707b                 | LR__5481
3707b     2A          | 	byte	"*"
3707c     00          | 	byte	0
3707d                 | LR__5482
3707d     2F          | 	byte	"/"
3707e     00          | 	byte	0
3707f                 | LR__5483
3707f     5E          | 	byte	"^"
37080     00          | 	byte	0
37081                 | LR__5484
37081     3D          | 	byte	"="
37082     00          | 	byte	0
37083                 | LR__5485
37083     2B          | 	byte	"+"
37084     00          | 	byte	0
37085                 | LR__5486
37085     2B          | 	byte	"+"
37086     00          | 	byte	0
37087                 | LR__5487
37087     2D          | 	byte	"-"
37088     00          | 	byte	0
37089                 | LR__5488
37089     2D          | 	byte	"-"
3708a     00          | 	byte	0
3708b                 | LR__5489
3708b     3C          | 	byte	"<"
3708c     00          | 	byte	0
3708d                 | LR__5490
3708d     3E          | 	byte	">"
3708e     00          | 	byte	0
3708f                 | LR__5491
3708f     22          | 	byte	34
37090     00          | 	byte	0
37091                 | LR__5492
37091     22          | 	byte	34
37092     00          | 	byte	0
37093                 | LR__5493
37093     65 6C 73 65 | 	byte	"else"
37097     00          | 	byte	0
37098                 | LR__5494
37098     74 68 65 6E | 	byte	"then"
3709c     00          | 	byte	0
3709d                 | LR__5495
3709d     3F          | 	byte	"?"
3709e     00          | 	byte	0
3709f                 | LR__5496
3709f     3F          | 	byte	"?"
370a0     00          | 	byte	0
370a1                 | LR__5497
370a1     2E          | 	byte	"."
370a2     00          | 	byte	0
370a3                 | LR__5498
370a3     6D 6F 75 73 
370a7     65          | 	byte	"mouse"
370a8     00          | 	byte	0
370a9                 | LR__5499
370a9     63 75 72 73 
370ad     6F 72       | 	byte	"cursor"
370af     00          | 	byte	0
370b0                 | LR__5500
370b0     63 6C 69 63 
370b4     6B          | 	byte	"click"
370b5     00          | 	byte	0
370b6                 | LR__5501
370b6     6F 6E       | 	byte	"on"
370b8     00          | 	byte	0
370b9                 | LR__5502
370b9     31          | 	byte	"1"
370ba     00          | 	byte	0
370bb                 | LR__5503
370bb     6F 66 66    | 	byte	"off"
370be     00          | 	byte	0
370bf                 | LR__5504
370bf     30          | 	byte	"0"
370c0     00          | 	byte	0
370c1                 | LR__5505
370c1     6D 6F 64 65 | 	byte	"mode"
370c5     00          | 	byte	0
370c6                 | LR__5506
370c6     6D 2E       | 	byte	"m."
370c8     00          | 	byte	0
370c9                 | LR__5507
370c9     61 74 61 72 
370cd     69          | 	byte	"atari"
370ce     00          | 	byte	0
370cf                 | LR__5508
370cf     30          | 	byte	"0"
370d0     00          | 	byte	0
370d1                 | LR__5509
370d1     70 63 5F 61 
370d5     6D 62 65 72 | 	byte	"pc_amber"
370d9     00          | 	byte	0
370da                 | LR__5510
370da     31          | 	byte	"1"
370db     00          | 	byte	0
370dc                 | LR__5511
370dc     70 63 5F 67 
370e0     72 65 65 6E | 	byte	"pc_green"
370e4     00          | 	byte	0
370e5                 | LR__5512
370e5     32          | 	byte	"2"
370e6     00          | 	byte	0
370e7                 | LR__5513
370e7     70 63 5F 77 
370eb     68 69 74 65 | 	byte	"pc_white"
370ef     00          | 	byte	0
370f0                 | LR__5514
370f0     33          | 	byte	"3"
370f1     00          | 	byte	0
370f2                 | LR__5515
370f2     73 74       | 	byte	"st"
370f4     00          | 	byte	0
370f5                 | LR__5516
370f5     34          | 	byte	"4"
370f6     00          | 	byte	0
370f7                 | LR__5517
370f7     61 6D 69 67 
370fb     61          | 	byte	"amiga"
370fc     00          | 	byte	0
370fd                 | LR__5518
370fd     35          | 	byte	"5"
370fe     00          | 	byte	0
370ff                 | LR__5519
370ff                 | 	byte	
370ff     00          | 	byte	0
37100                 | LR__5520
37100     6C 6F 61 64 | 	byte	"load"
37104     00          | 	byte	0
37105                 | LR__5521
37105     73 61 76 65 | 	byte	"save"
37109     00          | 	byte	0
3710a                 | LR__5522
3710a     62 72 75 6E | 	byte	"brun"
3710e     00          | 	byte	0
3710f                 | LR__5523
3710f     72 75 6E    | 	byte	"run"
37112     00          | 	byte	0
37113                 | LR__5524
37113     6C 6F 2E    | 	byte	"lo."
37116     00          | 	byte	0
37117                 | LR__5525
37117     73 2E       | 	byte	"s."
37119     00          | 	byte	0
3711a                 | LR__5526
3711a     62 72 2E    | 	byte	"br."
3711d     00          | 	byte	0
3711e                 | LR__5527
3711e     65 6E 74 65 
37122     72          | 	byte	"enter"
37123     00          | 	byte	0
37124                 | LR__5528
37124     65 2E       | 	byte	"e."
37126     00          | 	byte	0
37127                 | LR__5529
37127     24          | 	byte	"$"
37128     00          | 	byte	0
37129                 | LR__5530
37129     64 65 6C 65 
3712d     74 65       | 	byte	"delete"
3712f     00          | 	byte	0
37130                 | LR__5531
37130     6D 6B 64 69 
37134     72          | 	byte	"mkdir"
37135     00          | 	byte	0
37136                 | LR__5532
37136     24          | 	byte	"$"
37137     00          | 	byte	0
37138                 | LR__5533
37138     63 6F 70 79 | 	byte	"copy"
3713c     00          | 	byte	0
3713d                 | LR__5534
3713d     24          | 	byte	"$"
3713e     00          | 	byte	0
3713f                 | LR__5535
3713f     63 6F 70 79 | 	byte	"copy"
37143     00          | 	byte	0
37144                 | LR__5536
37144     24          | 	byte	"$"
37145     00          | 	byte	0
37146                 | LR__5537
37146     63 64       | 	byte	"cd"
37148     00          | 	byte	0
37149                 | LR__5538
37149     63 64 2E    | 	byte	"cd."
3714c     00          | 	byte	0
3714d                 | LR__5539
3714d     2E          | 	byte	"."
3714e     00          | 	byte	0
3714f                 | LR__5540
3714f     2E 2E       | 	byte	".."
37151     00          | 	byte	0
37152                 | LR__5541
37152     63 64       | 	byte	"cd"
37154     00          | 	byte	0
37155                 | LR__5542
37155     2F          | 	byte	"/"
37156     00          | 	byte	0
37157                 | LR__5543
37157                 | 	byte	
37157     00          | 	byte	0
37158                 | LR__5544
37158                 | 	byte	
37158     00          | 	byte	0
37159                 | LR__5545
37159                 | 	byte	
37159     00          | 	byte	0
3715a                 | LR__5546
3715a                 | 	byte	
3715a     00          | 	byte	0
3715b                 | LR__5547
3715b                 | 	byte	
3715b     00          | 	byte	0
3715c                 | LR__5548
3715c     52 65 61 64 
37160     79          | 	byte	"Ready"
37161     00          | 	byte	0
37162                 | LR__5549
37162     2B          | 	byte	"+"
37163     00          | 	byte	0
37164                 | LR__5550
37164     2D          | 	byte	"-"
37165     00          | 	byte	0
37166                 | LR__5551
37166     6F 72       | 	byte	"or"
37168     00          | 	byte	0
37169                 | LR__5552
37169     78 6F 72    | 	byte	"xor"
3716c     00          | 	byte	0
3716d                 | LR__5553
3716d     2A          | 	byte	"*"
3716e     00          | 	byte	0
3716f                 | LR__5554
3716f     2F          | 	byte	"/"
37170     00          | 	byte	0
37171                 | LR__5555
37171     61 6E 64    | 	byte	"and"
37174     00          | 	byte	0
37175                 | LR__5556
37175     64 69 76    | 	byte	"div"
37178     00          | 	byte	0
37179                 | LR__5557
37179     6D 6F 64    | 	byte	"mod"
3717c     00          | 	byte	0
3717d                 | LR__5558
3717d     73 68 6C    | 	byte	"shl"
37180     00          | 	byte	0
37181                 | LR__5559
37181     73 68 72    | 	byte	"shr"
37184     00          | 	byte	0
37185                 | LR__5560
37185     5E          | 	byte	"^"
37186     00          | 	byte	0
37187                 | LR__5561
37187     6E 6F 74    | 	byte	"not"
3718a     00          | 	byte	0
3718b                 | LR__5562
3718b     40          | 	byte	"@"
3718c     00          | 	byte	0
3718d                 | LR__5563
3718d     3D          | 	byte	"="
3718e     00          | 	byte	0
3718f                 | LR__5564
3718f     3E 3D       | 	byte	">="
37191     00          | 	byte	0
37192                 | LR__5565
37192     3C 3D       | 	byte	"<="
37194     00          | 	byte	0
37195                 | LR__5566
37195     3C          | 	byte	"<"
37196     00          | 	byte	0
37197                 | LR__5567
37197     3E          | 	byte	">"
37198     00          | 	byte	0
37199                 | LR__5568
37199     3C 3E       | 	byte	"<>"
3719b     00          | 	byte	0
3719c                 | LR__5569
3719c     2B 2B       | 	byte	"++"
3719e     00          | 	byte	0
3719f                 | LR__5570
3719f     2D 2D       | 	byte	"--"
371a1     00          | 	byte	0
371a2                 | LR__5571
371a2     23          | 	byte	"#"
371a3     00          | 	byte	0
371a4                 | LR__5572
371a4     30          | 	byte	"0"
371a5     00          | 	byte	0
371a6                 | LR__5573
371a6     39          | 	byte	"9"
371a7     00          | 	byte	0
371a8                 | LR__5574
371a8     23 72 65 61 
371ac     64          | 	byte	"#read"
371ad     00          | 	byte	0
371ae                 | LR__5575
371ae     23 77 72 69 
371b2     74 65       | 	byte	"#write"
371b4     00          | 	byte	0
371b5                 | LR__5576
371b5     23 61 70 70 
371b9     65 6E 64    | 	byte	"#append"
371bc     00          | 	byte	0
371bd                 | LR__5577
371bd     23          | 	byte	"#"
371be     00          | 	byte	0
371bf                 | LR__5578
371bf     23          | 	byte	"#"
371c0     00          | 	byte	0
371c1                 | LR__5579
371c1     2D          | 	byte	"-"
371c2     00          | 	byte	0
371c3                 | LR__5580
371c3     30          | 	byte	"0"
371c4     00          | 	byte	0
371c5                 | LR__5581
371c5     63          | 	byte	"c"
371c6     00          | 	byte	0
371c7                 | LR__5582
371c7     63 23       | 	byte	"c#"
371c9     00          | 	byte	0
371ca                 | LR__5583
371ca     64          | 	byte	"d"
371cb     00          | 	byte	0
371cc                 | LR__5584
371cc     64 23       | 	byte	"d#"
371ce     00          | 	byte	0
371cf                 | LR__5585
371cf     65          | 	byte	"e"
371d0     00          | 	byte	0
371d1                 | LR__5586
371d1     66          | 	byte	"f"
371d2     00          | 	byte	0
371d3                 | LR__5587
371d3     66 23       | 	byte	"f#"
371d5     00          | 	byte	0
371d6                 | LR__5588
371d6     67          | 	byte	"g"
371d7     00          | 	byte	0
371d8                 | LR__5589
371d8     67 23       | 	byte	"g#"
371da     00          | 	byte	0
371db                 | LR__5590
371db     61          | 	byte	"a"
371dc     00          | 	byte	0
371dd                 | LR__5591
371dd     61 23       | 	byte	"a#"
371df     00          | 	byte	0
371e0                 | LR__5592
371e0     68          | 	byte	"h"
371e1     00          | 	byte	0
371e2                 | LR__5593
371e2     62          | 	byte	"b"
371e3     00          | 	byte	0
371e4                 | LR__5594
371e4     2B          | 	byte	"+"
371e5     00          | 	byte	0
371e6                 | LR__5595
371e6     2D          | 	byte	"-"
371e7     00          | 	byte	0
371e8                 | LR__5596
371e8     3D          | 	byte	"="
371e9     00          | 	byte	0
371ea                 | LR__5597
371ea     2C          | 	byte	","
371eb     00          | 	byte	0
371ec                 | LR__5598
371ec     2A          | 	byte	"*"
371ed     00          | 	byte	0
371ee                 | LR__5599
371ee     2F          | 	byte	"/"
371ef     00          | 	byte	0
371f0                 | LR__5600
371f0     3B          | 	byte	";"
371f1     00          | 	byte	0
371f2                 | LR__5601
371f2     22          | 	byte	34
371f3     00          | 	byte	0
371f4                 | LR__5602
371f4     5E          | 	byte	"^"
371f5     00          | 	byte	0
371f6                 | LR__5603
371f6     29          | 	byte	")"
371f7     00          | 	byte	0
371f8                 | LR__5604
371f8     28          | 	byte	"("
371f9     00          | 	byte	0
371fa                 | LR__5605
371fa     3A          | 	byte	":"
371fb     00          | 	byte	0
371fc                 | LR__5606
371fc     20          | 	byte	" "
371fd     00          | 	byte	0
371fe                 | LR__5607
371fe     3E          | 	byte	">"
371ff     00          | 	byte	0
37200                 | LR__5608
37200     3C          | 	byte	"<"
37201     00          | 	byte	0
37202                 | LR__5609
37202     3D          | 	byte	"="
37203     00          | 	byte	0
37204                 | LR__5610
37204     62 65 65 70 | 	byte	"beep"
37208     00          | 	byte	0
37209                 | LR__5611
37209     62 2E       | 	byte	"b."
3720b     00          | 	byte	0
3720c                 | LR__5612
3720c     62 6C 69 74 | 	byte	"blit"
37210     00          | 	byte	0
37211                 | LR__5613
37211     62 6F 78    | 	byte	"box"
37214     00          | 	byte	0
37215                 | LR__5614
37215     62 72 75 6E | 	byte	"brun"
37219     00          | 	byte	0
3721a                 | LR__5615
3721a     62 72 2E    | 	byte	"br."
3721d     00          | 	byte	0
3721e                 | LR__5616
3721e     63 64       | 	byte	"cd"
37220     00          | 	byte	0
37221                 | LR__5617
37221     63 68 61 6E 
37225     67 65 66 72 
37229     65 71       | 	byte	"changefreq"
3722b     00          | 	byte	0
3722c                 | LR__5618
3722c     63 66 2E    | 	byte	"cf."
3722f     00          | 	byte	0
37230                 | LR__5619
37230     63 68 61 6E 
37234     67 65 70 61 
37238     6E          | 	byte	"changepan"
37239     00          | 	byte	0
3723a                 | LR__5620
3723a     63 70 2E    | 	byte	"cp."
3723d     00          | 	byte	0
3723e                 | LR__5621
3723e     63 68 61 6E 
37242     67 65 76 6F 
37246     6C          | 	byte	"changevol"
37247     00          | 	byte	0
37248                 | LR__5622
37248     63 76 2E    | 	byte	"cv."
3724b     00          | 	byte	0
3724c                 | LR__5623
3724c     63 68 61 6E 
37250     67 65 77 61 
37254     76 65       | 	byte	"changewave"
37256     00          | 	byte	0
37257                 | LR__5624
37257     63 77 2E    | 	byte	"cw."
3725a     00          | 	byte	0
3725b                 | LR__5625
3725b     63 69 72 63 
3725f     6C 65       | 	byte	"circle"
37261     00          | 	byte	0
37262                 | LR__5626
37262     63 69 2E    | 	byte	"ci."
37265     00          | 	byte	0
37266                 | LR__5627
37266     63 6C 69 63 
3726a     6B          | 	byte	"click"
3726b     00          | 	byte	0
3726c                 | LR__5628
3726c     63 6C 6F 73 
37270     65          | 	byte	"close"
37271     00          | 	byte	0
37272                 | LR__5629
37272     63 6C 73    | 	byte	"cls"
37275     00          | 	byte	0
37276                 | LR__5630
37276     63 6F 67 73 
3727a     74 6F 70    | 	byte	"cogstop"
3727d     00          | 	byte	0
3727e                 | LR__5631
3727e     63 6F 6C 6F 
37282     72          | 	byte	"color"
37283     00          | 	byte	0
37284                 | LR__5632
37284     63 2E       | 	byte	"c."
37286     00          | 	byte	0
37287                 | LR__5633
37287     63 6F 70 79 | 	byte	"copy"
3728b     00          | 	byte	0
3728c                 | LR__5634
3728c     63 75 72 73 
37290     6F 72       | 	byte	"cursor"
37292     00          | 	byte	0
37293                 | LR__5635
37293     64 61 74 61 | 	byte	"data"
37297     00          | 	byte	0
37298                 | LR__5636
37298     64 65 66 73 
3729c     6E 64       | 	byte	"defsnd"
3729e     00          | 	byte	0
3729f                 | LR__5637
3729f     64 65 66 65 
372a3     6E 76       | 	byte	"defenv"
372a5     00          | 	byte	0
372a6                 | LR__5638
372a6     64 65 66 73 
372aa     70 72 69 74 
372ae     65          | 	byte	"defsprite"
372af     00          | 	byte	0
372b0                 | LR__5639
372b0     64 73 2E    | 	byte	"ds."
372b3     00          | 	byte	0
372b4                 | LR__5640
372b4     64 65 67    | 	byte	"deg"
372b7     00          | 	byte	0
372b8                 | LR__5641
372b8     64 65 6C 65 
372bc     74 65       | 	byte	"delete"
372be     00          | 	byte	0
372bf                 | LR__5642
372bf     64 69 6D    | 	byte	"dim"
372c2     00          | 	byte	0
372c3                 | LR__5643
372c3     64 69 72    | 	byte	"dir"
372c6     00          | 	byte	0
372c7                 | LR__5644
372c7     64 70 6F 6B 
372cb     65          | 	byte	"dpoke"
372cc     00          | 	byte	0
372cd                 | LR__5645
372cd     64 72 61 77 | 	byte	"draw"
372d1     00          | 	byte	0
372d2                 | LR__5646
372d2     64 72 61 77 
372d6     74 6F       | 	byte	"drawto"
372d8     00          | 	byte	0
372d9                 | LR__5647
372d9     64 72 2E    | 	byte	"dr."
372dc     00          | 	byte	0
372dd                 | LR__5648
372dd     65 6C 73 65 | 	byte	"else"
372e1     00          | 	byte	0
372e2                 | LR__5649
372e2     65 6E 64    | 	byte	"end"
372e5     00          | 	byte	0
372e6                 | LR__5650
372e6     65 6E 74 65 
372ea     72          | 	byte	"enter"
372eb     00          | 	byte	0
372ec                 | LR__5651
372ec     65 2E       | 	byte	"e."
372ee     00          | 	byte	0
372ef                 | LR__5652
372ef     66 63 69 72 
372f3     63 6C 65    | 	byte	"fcircle"
372f6     00          | 	byte	0
372f7                 | LR__5653
372f7     66 63 2E    | 	byte	"fc."
372fa     00          | 	byte	0
372fb                 | LR__5654
372fb     66 69 6C 6C | 	byte	"fill"
372ff     00          | 	byte	0
37300                 | LR__5655
37300     66 69 2E    | 	byte	"fi."
37303     00          | 	byte	0
37304                 | LR__5656
37304     66 6F 6E 74 | 	byte	"font"
37308     00          | 	byte	0
37309                 | LR__5657
37309     66 6F 72    | 	byte	"for"
3730c     00          | 	byte	0
3730d                 | LR__5658
3730d     66 2E       | 	byte	"f."
3730f     00          | 	byte	0
37310                 | LR__5659
37310     66 72 61 6D 
37314     65          | 	byte	"frame"
37315     00          | 	byte	0
37316                 | LR__5660
37316     66 72 2E    | 	byte	"fr."
37319     00          | 	byte	0
3731a                 | LR__5661
3731a     67 65 74    | 	byte	"get"
3731d     00          | 	byte	0
3731e                 | LR__5662
3731e     67 6F 73 75 
37322     62          | 	byte	"gosub"
37323     00          | 	byte	0
37324                 | LR__5663
37324     67 6F 74 6F | 	byte	"goto"
37328     00          | 	byte	0
37329                 | LR__5664
37329     67 2E       | 	byte	"g."
3732b     00          | 	byte	0
3732c                 | LR__5665
3732c     69 66       | 	byte	"if"
3732e     00          | 	byte	0
3732f                 | LR__5666
3732f     69 6E 6B    | 	byte	"ink"
37332     00          | 	byte	0
37333                 | LR__5667
37333     69 2E       | 	byte	"i."
37335     00          | 	byte	0
37336                 | LR__5668
37336     69 6E 70 75 
3733a     74          | 	byte	"input"
3733b     00          | 	byte	0
3733c                 | LR__5669
3733c     6C 69 73 74 | 	byte	"list"
37340     00          | 	byte	0
37341                 | LR__5670
37341     6C 2E       | 	byte	"l."
37343     00          | 	byte	0
37344                 | LR__5671
37344     6C 6F 61 64 | 	byte	"load"
37348     00          | 	byte	0
37349                 | LR__5672
37349     6C 6F 2E    | 	byte	"lo."
3734c     00          | 	byte	0
3734d                 | LR__5673
3734d     6C 70 6F 6B 
37351     65          | 	byte	"lpoke"
37352     00          | 	byte	0
37353                 | LR__5674
37353     6D 6B 64 69 
37357     72          | 	byte	"mkdir"
37358     00          | 	byte	0
37359                 | LR__5675
37359     6D 6F 64 65 | 	byte	"mode"
3735d     00          | 	byte	0
3735e                 | LR__5676
3735e     6D 2E       | 	byte	"m."
37360     00          | 	byte	0
37361                 | LR__5677
37361     6D 6F 75 73 
37365     65          | 	byte	"mouse"
37366     00          | 	byte	0
37367                 | LR__5678
37367     6E 65 77    | 	byte	"new"
3736a     00          | 	byte	0
3736b                 | LR__5679
3736b     6E 65 78 74 | 	byte	"next"
3736f     00          | 	byte	0
37370                 | LR__5680
37370     6E 2E       | 	byte	"n."
37372     00          | 	byte	0
37373                 | LR__5681
37373     6F 6E       | 	byte	"on"
37375     00          | 	byte	0
37376                 | LR__5682
37376     6F 70 65 6E | 	byte	"open"
3737a     00          | 	byte	0
3737b                 | LR__5683
3737b     70 61 70 65 
3737f     72          | 	byte	"paper"
37380     00          | 	byte	0
37381                 | LR__5684
37381     70 61 2E    | 	byte	"pa."
37384     00          | 	byte	0
37385                 | LR__5685
37385     70 69 6E 66 
37389     6C 6F 61 74 | 	byte	"pinfloat"
3738d     00          | 	byte	0
3738e                 | LR__5686
3738e     70 69 6E 68 
37392     69          | 	byte	"pinhi"
37393     00          | 	byte	0
37394                 | LR__5687
37394     70 69 6E 6C 
37398     6F          | 	byte	"pinlo"
37399     00          | 	byte	0
3739a                 | LR__5688
3739a     70 69 6E 73 
3739e     74 61 72 74 | 	byte	"pinstart"
373a2     00          | 	byte	0
373a3                 | LR__5689
373a3     70 69 6E 74 
373a7     6F 67 67 6C 
373ab     65          | 	byte	"pintoggle"
373ac     00          | 	byte	0
373ad                 | LR__5690
373ad     70 69 6E 77 
373b1     72 69 74 65 | 	byte	"pinwrite"
373b5     00          | 	byte	0
373b6                 | LR__5691
373b6     70 6C 61 79 | 	byte	"play"
373ba     00          | 	byte	0
373bb                 | LR__5692
373bb     70 2E       | 	byte	"p."
373bd     00          | 	byte	0
373be                 | LR__5693
373be     70 6C 6F 74 | 	byte	"plot"
373c2     00          | 	byte	0
373c3                 | LR__5694
373c3     70 6C 2E    | 	byte	"pl."
373c6     00          | 	byte	0
373c7                 | LR__5695
373c7     70 6F 6B 65 | 	byte	"poke"
373cb     00          | 	byte	0
373cc                 | LR__5696
373cc     70 6F 70    | 	byte	"pop"
373cf     00          | 	byte	0
373d0                 | LR__5697
373d0     70 6F 73 69 
373d4     74 69 6F 6E | 	byte	"position"
373d8     00          | 	byte	0
373d9                 | LR__5698
373d9     70 6F 73 2E | 	byte	"pos."
373dd     00          | 	byte	0
373de                 | LR__5699
373de     70 72 69 6E 
373e2     74          | 	byte	"print"
373e3     00          | 	byte	0
373e4                 | LR__5700
373e4     3F          | 	byte	"?"
373e5     00          | 	byte	0
373e6                 | LR__5701
373e6     70 75 74    | 	byte	"put"
373e9     00          | 	byte	0
373ea                 | LR__5702
373ea     72 61 64    | 	byte	"rad"
373ed     00          | 	byte	0
373ee                 | LR__5703
373ee     72 65 61 64 | 	byte	"read"
373f2     00          | 	byte	0
373f3                 | LR__5704
373f3     72 65 6C 65 
373f7     61 73 65    | 	byte	"release"
373fa     00          | 	byte	0
373fb                 | LR__5705
373fb     72 65 6D    | 	byte	"rem"
373fe     00          | 	byte	0
373ff                 | LR__5706
373ff     27          | 	byte	"'"
37400     00          | 	byte	0
37401                 | LR__5707
37401     72 65 73 74 
37405     6F 72 65    | 	byte	"restore"
37408     00          | 	byte	0
37409                 | LR__5708
37409     72 65 73 74 
3740d     6F 72 65 70 
37411     61 6C 65 74 
37415     74 65       | 	byte	"restorepalette"
37417     00          | 	byte	0
37418                 | LR__5709
37418     72 70 2E    | 	byte	"rp."
3741b     00          | 	byte	0
3741c                 | LR__5710
3741c     72 65 74 75 
37420     72 6E       | 	byte	"return"
37422     00          | 	byte	0
37423                 | LR__5711
37423     72 75 6E    | 	byte	"run"
37426     00          | 	byte	0
37427                 | LR__5712
37427     73 61 76 65 | 	byte	"save"
3742b     00          | 	byte	0
3742c                 | LR__5713
3742c     73 2E       | 	byte	"s."
3742e     00          | 	byte	0
3742f                 | LR__5714
3742f     73 65 74 63 
37433     6F 6C 6F 72 | 	byte	"setcolor"
37437     00          | 	byte	0
37438                 | LR__5715
37438     73 63 2E    | 	byte	"sc."
3743b     00          | 	byte	0
3743c                 | LR__5716
3743c     73 65 74 64 
37440     65 6C 61 79 | 	byte	"setdelay"
37444     00          | 	byte	0
37445                 | LR__5717
37445     73 64 2E    | 	byte	"sd."
37448     00          | 	byte	0
37449                 | LR__5718
37449     73 65 74 65 
3744d     6E 76       | 	byte	"setenv"
3744f     00          | 	byte	0
37450                 | LR__5719
37450     73 65 2E    | 	byte	"se."
37453     00          | 	byte	0
37454                 | LR__5720
37454     73 65 74 6C 
37458     65 6E       | 	byte	"setlen"
3745a     00          | 	byte	0
3745b                 | LR__5721
3745b     73 6C 2E    | 	byte	"sl."
3745e     00          | 	byte	0
3745f                 | LR__5722
3745f     73 65 74 70 
37463     61 6E       | 	byte	"setpan"
37465     00          | 	byte	0
37466                 | LR__5723
37466     73 70 2E    | 	byte	"sp."
37469     00          | 	byte	0
3746a                 | LR__5724
3746a     73 65 74 73 
3746e     75 73 74 61 
37472     69 6E       | 	byte	"setsustain"
37474     00          | 	byte	0
37475                 | LR__5725
37475     73 73 2E    | 	byte	"ss."
37478     00          | 	byte	0
37479                 | LR__5726
37479     73 65 74 76 
3747d     6F 6C       | 	byte	"setvol"
3747f     00          | 	byte	0
37480                 | LR__5727
37480     73 76 2E    | 	byte	"sv."
37483     00          | 	byte	0
37484                 | LR__5728
37484     73 65 74 77 
37488     61 76 65    | 	byte	"setwave"
3748b     00          | 	byte	0
3748c                 | LR__5729
3748c     73 77 2E    | 	byte	"sw."
3748f     00          | 	byte	0
37490                 | LR__5730
37490     73 65 74 77 
37494     61 76       | 	byte	"setwav"
37496     00          | 	byte	0
37497                 | LR__5731
37497     73 68 75 74 
3749b     75 70       | 	byte	"shutup"
3749d     00          | 	byte	0
3749e                 | LR__5732
3749e     73 68 2E    | 	byte	"sh."
374a1     00          | 	byte	0
374a2                 | LR__5733
374a2     73 6F 75 6E 
374a6     64          | 	byte	"sound"
374a7     00          | 	byte	0
374a8                 | LR__5734
374a8     73 6F 2E    | 	byte	"so."
374ab     00          | 	byte	0
374ac                 | LR__5735
374ac     73 70 72 69 
374b0     74 65       | 	byte	"sprite"
374b2     00          | 	byte	0
374b3                 | LR__5736
374b3     73 70 72 2E | 	byte	"spr."
374b7     00          | 	byte	0
374b8                 | LR__5737
374b8     74 68 65 6E | 	byte	"then"
374bc     00          | 	byte	0
374bd                 | LR__5738
374bd     77 61 69 74 
374c1     6D 73       | 	byte	"waitms"
374c3     00          | 	byte	0
374c4                 | LR__5739
374c4     77 2E       | 	byte	"w."
374c6     00          | 	byte	0
374c7                 | LR__5740
374c7     77 61 69 74 
374cb     63 6C 6F 63 
374cf     6B          | 	byte	"waitclock"
374d0     00          | 	byte	0
374d1                 | LR__5741
374d1     77 63 2E    | 	byte	"wc."
374d4     00          | 	byte	0
374d5                 | LR__5742
374d5     77 61 69 74 
374d9     76 62 6C    | 	byte	"waitvbl"
374dc     00          | 	byte	0
374dd                 | LR__5743
374dd     77 76 2E    | 	byte	"wv."
374e0     00          | 	byte	0
374e1                 | LR__5744
374e1     77 72 70 69 
374e5     6E          | 	byte	"wrpin"
374e6     00          | 	byte	0
374e7                 | LR__5745
374e7     77 78 70 69 
374eb     6E          | 	byte	"wxpin"
374ec     00          | 	byte	0
374ed                 | LR__5746
374ed     77 79 70 69 
374f1     6E          | 	byte	"wypin"
374f2     00          | 	byte	0
374f3                 | LR__5747
374f3     61 62 73    | 	byte	"abs"
374f6     00          | 	byte	0
374f7                 | LR__5748
374f7     61 63 6F 73 | 	byte	"acos"
374fb     00          | 	byte	0
374fc                 | LR__5749
374fc     61 64 72    | 	byte	"adr"
374ff     00          | 	byte	0
37500                 | LR__5750
37500     61 64 64 72 | 	byte	"addr"
37504     00          | 	byte	0
37505                 | LR__5751
37505     61 73 63    | 	byte	"asc"
37508     00          | 	byte	0
37509                 | LR__5752
37509     61 73 69 6E | 	byte	"asin"
3750d     00          | 	byte	0
3750e                 | LR__5753
3750e     61 74 6E    | 	byte	"atn"
37511     00          | 	byte	0
37512                 | LR__5754
37512     62 69 6E 24 | 	byte	"bin$"
37516     00          | 	byte	0
37517                 | LR__5755
37517     63 68 72 24 | 	byte	"chr$"
3751b     00          | 	byte	0
3751c                 | LR__5756
3751c     63 6F 67 69 
37520     6E 69 74    | 	byte	"coginit"
37523     00          | 	byte	0
37524                 | LR__5757
37524     63 6F 73    | 	byte	"cos"
37527     00          | 	byte	0
37528                 | LR__5758
37528     64 70 65 65 
3752c     6B          | 	byte	"dpeek"
3752d     00          | 	byte	0
3752e                 | LR__5759
3752e     66 72 61 6D 
37532     65 62 75 66 | 	byte	"framebuf"
37536     00          | 	byte	0
37537                 | LR__5760
37537     66 62 2E    | 	byte	"fb."
3753a     00          | 	byte	0
3753b                 | LR__5761
3753b     66 72 65    | 	byte	"fre"
3753e     00          | 	byte	0
3753f                 | LR__5762
3753f     67 63 2E    | 	byte	"gc."
37542     00          | 	byte	0
37543                 | LR__5763
37543     67 65 74 63 
37547     6F 6C 6F 72 | 	byte	"getcolor"
3754b     00          | 	byte	0
3754c                 | LR__5764
3754c     67 65 74 70 
37550     69 78 65 6C | 	byte	"getpixel"
37554     00          | 	byte	0
37555                 | LR__5765
37555     67 65 2E    | 	byte	"ge."
37558     00          | 	byte	0
37559                 | LR__5766
37559     67 65 74 65 
3755d     6E 76 73 75 
37561     73 74 61 69 
37565     6E          | 	byte	"getenvsustain"
37566     00          | 	byte	0
37567                 | LR__5767
37567     67 65 74 6E 
3756b     6F 74 65 76 
3756f     61 6C 75 65 | 	byte	"getnotevalue"
37573     00          | 	byte	0
37574                 | LR__5768
37574     67 65 74 74 
37578     69 6D 65    | 	byte	"gettime"
3757b     00          | 	byte	0
3757c                 | LR__5769
3757c     67 74 2E    | 	byte	"gt."
3757f     00          | 	byte	0
37580                 | LR__5770
37580     68 65 78 24 | 	byte	"hex$"
37584     00          | 	byte	0
37585                 | LR__5771
37585     69 6E 6B 65 
37589     79 24       | 	byte	"inkey$"
3758b     00          | 	byte	0
3758c                 | LR__5772
3758c     69 6E 74    | 	byte	"int"
3758f     00          | 	byte	0
37590                 | LR__5773
37590     6C 65 66 74 
37594     24          | 	byte	"left$"
37595     00          | 	byte	0
37596                 | LR__5774
37596     6C 65 6E    | 	byte	"len"
37599     00          | 	byte	0
3759a                 | LR__5775
3759a     6C 6F 67    | 	byte	"log"
3759d     00          | 	byte	0
3759e                 | LR__5776
3759e     6C 70 65 65 
375a2     6B          | 	byte	"lpeek"
375a3     00          | 	byte	0
375a4                 | LR__5777
375a4     6D 65 6D 74 
375a8     6F 70       | 	byte	"memtop"
375aa     00          | 	byte	0
375ab                 | LR__5778
375ab     6D 65 6D 6C 
375af     6F          | 	byte	"memlo"
375b0     00          | 	byte	0
375b1                 | LR__5779
375b1     6D 69 64 24 | 	byte	"mid$"
375b5     00          | 	byte	0
375b6                 | LR__5780
375b6     6D 6F 75 73 
375ba     65 6B       | 	byte	"mousek"
375bc     00          | 	byte	0
375bd                 | LR__5781
375bd     6D 6F 75 73 
375c1     65 77       | 	byte	"mousew"
375c3     00          | 	byte	0
375c4                 | LR__5782
375c4     6D 6F 75 73 
375c8     65 78       | 	byte	"mousex"
375ca     00          | 	byte	0
375cb                 | LR__5783
375cb     6D 6F 75 73 
375cf     65 79       | 	byte	"mousey"
375d1     00          | 	byte	0
375d2                 | LR__5784
375d2     70 61 64 73 | 	byte	"pads"
375d6     00          | 	byte	0
375d7                 | LR__5785
375d7     70 61 64 77 | 	byte	"padw"
375db     00          | 	byte	0
375dc                 | LR__5786
375dc     70 61 64 78 | 	byte	"padx"
375e0     00          | 	byte	0
375e1                 | LR__5787
375e1     70 61 64 79 | 	byte	"pady"
375e5     00          | 	byte	0
375e6                 | LR__5788
375e6     70 61 64 7A | 	byte	"padz"
375ea     00          | 	byte	0
375eb                 | LR__5789
375eb     70 61 64 72 
375ef     78          | 	byte	"padrx"
375f0     00          | 	byte	0
375f1                 | LR__5790
375f1     70 61 64 72 
375f5     79          | 	byte	"padry"
375f6     00          | 	byte	0
375f7                 | LR__5791
375f7     70 61 64 72 
375fb     7A          | 	byte	"padrz"
375fc     00          | 	byte	0
375fd                 | LR__5792
375fd     70 61 64 68 | 	byte	"padh"
37601     00          | 	byte	0
37602                 | LR__5793
37602     70 65 65 6B | 	byte	"peek"
37606     00          | 	byte	0
37607                 | LR__5794
37607     70 69 6E 72 
3760b     65 61 64    | 	byte	"pinread"
3760e     00          | 	byte	0
3760f                 | LR__5795
3760f     72 64 70 69 
37613     6E          | 	byte	"rdpin"
37614     00          | 	byte	0
37615                 | LR__5796
37615     72 69 67 68 
37619     74 24       | 	byte	"right$"
3761b     00          | 	byte	0
3761c                 | LR__5797
3761c     72 71 70 69 
37620     6E          | 	byte	"rqpin"
37621     00          | 	byte	0
37622                 | LR__5798
37622     72 6F 75 6E 
37626     64          | 	byte	"round"
37627     00          | 	byte	0
37628                 | LR__5799
37628     72 6E 64    | 	byte	"rnd"
3762b     00          | 	byte	0
3762c                 | LR__5800
3762c     73 69 6E    | 	byte	"sin"
3762f     00          | 	byte	0
37630                 | LR__5801
37630     73 71 72    | 	byte	"sqr"
37633     00          | 	byte	0
37634                 | LR__5802
37634     73 74 69 63 
37638     6B          | 	byte	"stick"
37639     00          | 	byte	0
3763a                 | LR__5803
3763a     73 74 72 69 
3763e     67          | 	byte	"strig"
3763f     00          | 	byte	0
37640                 | LR__5804
37640     73 74 72 24 | 	byte	"str$"
37644     00          | 	byte	0
37645                 | LR__5805
37645     74 61 6E    | 	byte	"tan"
37648     00          | 	byte	0
37649                 | LR__5806
37649     76 61 6C    | 	byte	"val"
3764c     00          | 	byte	0
3764d                 | LR__5807
3764d     76 61 72 70 
37651     74 72       | 	byte	"varptr"
37653     00          | 	byte	0
37654                 | LR__5808
37654     61          | 	byte	"a"
37655     00          | 	byte	0
37656                 | LR__5809
37656     7A          | 	byte	"z"
37657     00          | 	byte	0
37658                 | LR__5810
37658     5F          | 	byte	"_"
37659     00          | 	byte	0
3765a                 | LR__5811
3765a     61          | 	byte	"a"
3765b     00          | 	byte	0
3765c                 | LR__5812
3765c     7A          | 	byte	"z"
3765d     00          | 	byte	0
3765e                 | LR__5813
3765e     30          | 	byte	"0"
3765f     00          | 	byte	0
37660                 | LR__5814
37660     39          | 	byte	"9"
37661     00          | 	byte	0
37662                 | LR__5815
37662     5F          | 	byte	"_"
37663     00          | 	byte	0
37664                 | LR__5816
37664     2E          | 	byte	"."
37665     00          | 	byte	0
37666                 | LR__5817
37666     61          | 	byte	"a"
37667     00          | 	byte	0
37668                 | LR__5818
37668     7A          | 	byte	"z"
37669     00          | 	byte	0
3766a                 | LR__5819
3766a     30          | 	byte	"0"
3766b     00          | 	byte	0
3766c                 | LR__5820
3766c     39          | 	byte	"9"
3766d     00          | 	byte	0
3766e                 | LR__5821
3766e     5F          | 	byte	"_"
3766f     00          | 	byte	0
37670                 | LR__5822
37670     24          | 	byte	"$"
37671     00          | 	byte	0
37672                 | LR__5823
37672     25          | 	byte	"%"
37673     00          | 	byte	0
37674                 | LR__5824
37674     21          | 	byte	"!"
37675     00          | 	byte	0
37676                 | LR__5825
37676     30          | 	byte	"0"
37677     00          | 	byte	0
37678                 | LR__5826
37678     39          | 	byte	"9"
37679     00          | 	byte	0
3767a                 | LR__5827
3767a     2E          | 	byte	"."
3767b     00          | 	byte	0
3767c                 | LR__5828
3767c     24          | 	byte	"$"
3767d     00          | 	byte	0
3767e                 | LR__5829
3767e     25          | 	byte	"%"
3767f     00          | 	byte	0
37680                 | LR__5830
37680     2D          | 	byte	"-"
37681     00          | 	byte	0
37682                 | LR__5831
37682     2E          | 	byte	"."
37683     00          | 	byte	0
37684                 | LR__5832
37684     24          | 	byte	"$"
37685     00          | 	byte	0
37686                 | LR__5833
37686     25          | 	byte	"%"
37687     00          | 	byte	0
37688                 | LR__5834
37688     30          | 	byte	"0"
37689     00          | 	byte	0
3768a                 | LR__5835
3768a     39          | 	byte	"9"
3768b     00          | 	byte	0
3768c                 | LR__5836
3768c     5F          | 	byte	"_"
3768d     00          | 	byte	0
3768e                 | LR__5837
3768e     2E          | 	byte	"."
3768f     00          | 	byte	0
37690                 | LR__5838
37690     45          | 	byte	"E"
37691     00          | 	byte	0
37692                 | LR__5839
37692     65          | 	byte	"e"
37693     00          | 	byte	0
37694                 | LR__5840
37694     2D          | 	byte	"-"
37695     00          | 	byte	0
37696                 | LR__5841
37696     61          | 	byte	"a"
37697     00          | 	byte	0
37698                 | LR__5842
37698     66          | 	byte	"f"
37699     00          | 	byte	0
3769a                 | LR__5843
3769a     30          | 	byte	"0"
3769b     00          | 	byte	0
3769c                 | LR__5844
3769c     31          | 	byte	"1"
3769d     00          | 	byte	0
3769e                 | LR__5845
3769e     5F          | 	byte	"_"
3769f     00          | 	byte	0
376a0                 | LR__5846
376a0     2D          | 	byte	"-"
376a1     00          | 	byte	0
376a2                 | LR__5847
376a2     65          | 	byte	"e"
376a3     00          | 	byte	0
376a4                 | LR__5848
376a4     2E          | 	byte	"."
376a5     00          | 	byte	0
376a6                 | LR__5849
376a6     45          | 	byte	"E"
376a7     00          | 	byte	0
376a8                 | LR__5850
376a8     65          | 	byte	"e"
376a9     00          | 	byte	0
376aa                 | LR__5851
376aa     30          | 	byte	"0"
376ab     00          | 	byte	0
376ac                 | LR__5852
376ac     39          | 	byte	"9"
376ad     00          | 	byte	0
376ae                 | LR__5853
376ae     24          | 	byte	"$"
376af     00          | 	byte	0
376b0                 | LR__5854
376b0     25          | 	byte	"%"
376b1     00          | 	byte	0
376b2                 | LR__5855
376b2     2D          | 	byte	"-"
376b3     00          | 	byte	0
376b4                 | LR__5856
376b4     24          | 	byte	"$"
376b5     00          | 	byte	0
376b6                 | LR__5857
376b6     25          | 	byte	"%"
376b7     00          | 	byte	0
376b8                 | LR__5858
376b8     30          | 	byte	"0"
376b9     00          | 	byte	0
376ba                 | LR__5859
376ba     39          | 	byte	"9"
376bb     00          | 	byte	0
376bc                 | LR__5860
376bc     5F          | 	byte	"_"
376bd     00          | 	byte	0
376be                 | LR__5861
376be     30          | 	byte	"0"
376bf     00          | 	byte	0
376c0                 | LR__5862
376c0     39          | 	byte	"9"
376c1     00          | 	byte	0
376c2                 | LR__5863
376c2     61          | 	byte	"a"
376c3     00          | 	byte	0
376c4                 | LR__5864
376c4     66          | 	byte	"f"
376c5     00          | 	byte	0
376c6                 | LR__5865
376c6     5F          | 	byte	"_"
376c7     00          | 	byte	0
376c8                 | LR__5866
376c8     30          | 	byte	"0"
376c9     00          | 	byte	0
376ca                 | LR__5867
376ca     31          | 	byte	"1"
376cb     00          | 	byte	0
376cc                 | LR__5868
376cc     5F          | 	byte	"_"
376cd     00          | 	byte	0
376ce                 | LR__5869
376ce     30          | 	byte	"0"
376cf     00          | 	byte	0
376d0                 | LR__5870
376d0     39          | 	byte	"9"
376d1     00          | 	byte	0
376d2                 | LR__5871
376d2     5F          | 	byte	"_"
376d3     00          | 	byte	0
376d4                 | LR__5872
376d4     22          | 	byte	34
376d5     00          | 	byte	0
376d6                 | LR__5873
376d6     22          | 	byte	34
376d7     00          | 	byte	0
376d8                 | LR__5874
376d8     44 69 6D 3A 
376dc     20 61 74 20 
376e0     6C 69 6E 65 
376e4     20          | 	byte	"Dim: at line "
376e5     00          | 	byte	0
376e6                 | LR__5875
376e6     3A 20 77 61 
376ea     72 6E 69 6E 
376ee     67 3A 20 74 
376f2     68 65 20 76 
376f6     61 72 69 61 
376fa     62 6C 65 20 
376fe     65 78 69 73 
37702     74 65 64 2E | 	byte	": warning: the variable existed."
37706     00          | 	byte	0
37707                 | LR__5876
37707     28          | 	byte	"("
37708     00          | 	byte	0
37709                 | LR__5877
37709     61 73       | 	byte	"as"
3770b     00          | 	byte	0
3770c                 | LR__5878
3770c     61 73       | 	byte	"as"
3770e     00          | 	byte	0
3770f                 | LR__5879
3770f     2C          | 	byte	","
37710     00          | 	byte	0
37711                 | LR__5880
37711     29          | 	byte	")"
37712     00          | 	byte	0
37713                 | LR__5881
37713     29          | 	byte	")"
37714     00          | 	byte	0
37715                 | LR__5882
37715     61 73       | 	byte	"as"
37717     00          | 	byte	0
37718                 | LR__5883
37718     62 79 74 65 | 	byte	"byte"
3771c     00          | 	byte	0
3771d                 | LR__5884
3771d     75 62 79 74 
37721     65          | 	byte	"ubyte"
37722     00          | 	byte	0
37723                 | LR__5885
37723     73 68 6F 72 
37727     74          | 	byte	"short"
37728     00          | 	byte	0
37729                 | LR__5886
37729     75 73 68 6F 
3772d     72 74       | 	byte	"ushort"
3772f     00          | 	byte	0
37730                 | LR__5887
37730     6C 6F 6E 67 | 	byte	"long"
37734     00          | 	byte	0
37735                 | LR__5888
37735     69 6E 74 65 
37739     67 65 72    | 	byte	"integer"
3773c     00          | 	byte	0
3773d                 | LR__5889
3773d     75 6C 6F 6E 
37741     67          | 	byte	"ulong"
37742     00          | 	byte	0
37743                 | LR__5890
37743     69 6E 74 36 
37747     34          | 	byte	"int64"
37748     00          | 	byte	0
37749                 | LR__5891
37749     75 69 6E 74 
3774d     36 34       | 	byte	"uint64"
3774f     00          | 	byte	0
37750                 | LR__5892
37750     73 69 6E 67 
37754     6C 65       | 	byte	"single"
37756     00          | 	byte	0
37757                 | LR__5893
37757     64 6F 75 62 
3775b     6C 65       | 	byte	"double"
3775d     00          | 	byte	0
3775e                 | LR__5894
3775e     73 74 72 69 
37762     6E 67       | 	byte	"string"
37764     00          | 	byte	0
37765                 | LR__5895
37765     74 6F       | 	byte	"to"
37767     00          | 	byte	0
37768                 | LR__5896
37768     73 74 65 70 | 	byte	"step"
3776c     00          | 	byte	0
3776d                 | LR__5897
3776d     73 2E       | 	byte	"s."
3776f     00          | 	byte	0
37770                 | LR__5898
37770     73 2E       | 	byte	"s."
37772     00          | 	byte	0
37773                 | LR__5899
37773     67 6F 74 6F | 	byte	"goto"
37777     00          | 	byte	0
37778                 | LR__5900
37778     67 6F 73 75 
3777c     62          | 	byte	"gosub"
3777d     00          | 	byte	0
3777e                 | LR__5901
3777e     24          | 	byte	"$"
3777f     00          | 	byte	0
37780                 | LR__5902
37780     26 68       | 	byte	"&h"
37782     00          | 	byte	0
37783                 | LR__5903
37783     25          | 	byte	"%"
37784     00          | 	byte	0
37785                 | LR__5904
37785     26 62       | 	byte	"&b"
37787     00          | 	byte	0
37788                 | LR__5905
37788                 | 	byte	
37788     00          | 	byte	0
37789                 | LR__5906
37789     61 63 6F 73 
3778d     3A 20       | 	byte	"acos: "
3778f     00          | 	byte	0
37790                 | LR__5907
37790     61 73 63 3A 
37794     20          | 	byte	"asc: "
37795     00          | 	byte	0
37796                 | LR__5908
37796     61 73 63 3A 
3779a     20          | 	byte	"asc: "
3779b     00          | 	byte	0
3779c                 | LR__5909
3779c     61 73 69 6E 
377a0     3A 20       | 	byte	"asin: "
377a2     00          | 	byte	0
377a3                 | LR__5910
377a3     61 74 6E 3A 
377a7     20          | 	byte	"atn: "
377a8     00          | 	byte	0
377a9                 | LR__5911
377a9     62 6C 69 74 
377ad     3A 20       | 	byte	"blit: "
377af     00          | 	byte	0
377b0                 | LR__5912
377b0     62 69 6E 24 
377b4     3A 20       | 	byte	"bin$: "
377b6     00          | 	byte	0
377b7                 | LR__5913
377b7     2F          | 	byte	"/"
377b8     00          | 	byte	0
377b9                 | LR__5914
377b9     2F 73 64 2F 
377bd     62 69 6E 2F | 	byte	"/sd/bin/"
377c1     00          | 	byte	0
377c2                 | LR__5915
377c2     53 79 73 74 
377c6     65 6D 20 65 
377ca     72 72 6F 72 
377ce     20          | 	byte	"System error "
377cf     00          | 	byte	0
377d0                 | LR__5916
377d0     3A 20       | 	byte	": "
377d2     00          | 	byte	0
377d3                 | LR__5917
377d3     2A          | 	byte	"*"
377d4     00          | 	byte	0
377d5                 | LR__5918
377d5     2E 2E       | 	byte	".."
377d7     00          | 	byte	0
377d8                 | LR__5919
377d8     2F          | 	byte	"/"
377d9     00          | 	byte	0
377da                 | LR__5920
377da     2F          | 	byte	"/"
377db     00          | 	byte	0
377dc                 | LR__5921
377dc     53 79 73 74 
377e0     65 6D 20 65 
377e4     72 72 6F 72 
377e8     20          | 	byte	"System error "
377e9     00          | 	byte	0
377ea                 | LR__5922
377ea     3A 20       | 	byte	": "
377ec     00          | 	byte	0
377ed                 | LR__5923
377ed     43 75 72 72 
377f1     65 6E 74 20 
377f5     64 69 72 65 
377f9     63 74 6F 72 
377fd     79 3A 20    | 	byte	"Current directory: "
37800     00          | 	byte	0
37801                 | LR__5924
37801     2F          | 	byte	"/"
37802     00          | 	byte	0
37803                 | LR__5925
37803     53 79 73 74 
37807     65 6D 20 65 
3780b     72 72 6F 72 
3780f     20          | 	byte	"System error "
37810     00          | 	byte	0
37811                 | LR__5926
37811     3A 20       | 	byte	": "
37813     00          | 	byte	0
37814                 | LR__5927
37814     43 75 72 72 
37818     65 6E 74 20 
3781c     64 69 72 65 
37820     63 74 6F 72 
37824     79 3A 20    | 	byte	"Current directory: "
37827     00          | 	byte	0
37828                 | LR__5928
37828     2F          | 	byte	"/"
37829     00          | 	byte	0
3782a                 | LR__5929
3782a     2F          | 	byte	"/"
3782b     00          | 	byte	0
3782c                 | LR__5930
3782c     2F          | 	byte	"/"
3782d     00          | 	byte	0
3782e                 | LR__5931
3782e     53 79 73 74 
37832     65 6D 20 65 
37836     72 72 6F 72 
3783a     20          | 	byte	"System error "
3783b     00          | 	byte	0
3783c                 | LR__5932
3783c     3A 20       | 	byte	": "
3783e     00          | 	byte	0
3783f                 | LR__5933
3783f     43 75 72 72 
37843     65 6E 74 20 
37847     64 69 72 65 
3784b     63 74 6F 72 
3784f     79 3A 20    | 	byte	"Current directory: "
37852     00          | 	byte	0
37853                 | LR__5934
37853     63 68 72 24 
37857     3A 20       | 	byte	"chr$: "
37859     00          | 	byte	0
3785a                 | LR__5935
3785a     63 68 61 6E 
3785e     6E 65 6C 23 
37862     20 65 78 70 
37866     65 63 74 65 
3786a     64          | 	byte	"channel# expected"
3786b     00          | 	byte	0
3786c                 | LR__5936
3786c     63 6F 67 69 
37870     6E 69 74 3A 
37874     20          | 	byte	"coginit: "
37875     00          | 	byte	0
37876                 | LR__5937
37876     53 79 73 74 
3787a     65 6D 20 65 
3787e     72 72 6F 72 
37882     20 2D 20    | 	byte	"System error - "
37885     00          | 	byte	0
37886                 | LR__5938
37886     20 69 6E 20 
3788a     6C 69 6E 65 
3788e     20          | 	byte	" in line "
3788f     00          | 	byte	0
37890                 | LR__5939
37890     3A 20       | 	byte	": "
37892     00          | 	byte	0
37893                 | LR__5940
37893     2C 20 66 69 
37897     6C 65 20 6E 
3789b     61 6D 65 3A 
3789f     20          | 	byte	", file name: "
378a0     00          | 	byte	0
378a1                 | LR__5941
378a1     53 79 73 74 
378a5     65 6D 20 65 
378a9     72 72 6F 72 
378ad     20 2D 20    | 	byte	"System error - "
378b0     00          | 	byte	0
378b1                 | LR__5942
378b1     20 69 6E 20 
378b5     6C 69 6E 65 
378b9     20          | 	byte	" in line "
378ba     00          | 	byte	0
378bb                 | LR__5943
378bb     3A 20       | 	byte	": "
378bd     00          | 	byte	0
378be                 | LR__5944
378be     2C 20 66 69 
378c2     6C 65 20 6E 
378c6     61 6D 65 3A 
378ca     20          | 	byte	", file name: "
378cb     00          | 	byte	0
378cc                 | LR__5945
378cc     63 6F 73 3A 
378d0     20          | 	byte	"cos: "
378d1     00          | 	byte	0
378d2                 | LR__5946
378d2                 | 	byte	
378d2     00          | 	byte	0
378d3                 | LR__5947
378d3                 | 	byte	
378d3     00          | 	byte	0
378d4                 | LR__5948
378d4     2F 73 64 2F 
378d8     6D 65 64 69 
378dc     61 2F 68 2F | 	byte	"/sd/media/h/"
378e0     00          | 	byte	0
378e1                 | LR__5949
378e1     53 79 73 74 
378e5     65 6D 20 65 
378e9     72 72 6F 72 
378ed     20          | 	byte	"System error "
378ee     00          | 	byte	0
378ef                 | LR__5950
378ef     3A 20       | 	byte	": "
378f1     00          | 	byte	0
378f2                 | LR__5951
378f2                 | 	byte	
378f2     00          | 	byte	0
378f3                 | LR__5952
378f3                 | 	byte	
378f3     00          | 	byte	0
378f4                 | LR__5953
378f4     2F 73 64 2F 
378f8     6D 65 64 69 
378fc     61 2F 73 2F | 	byte	"/sd/media/s/"
37900     00          | 	byte	0
37901                 | LR__5954
37901     53 79 73 74 
37905     65 6D 20 65 
37909     72 72 6F 72 
3790d     20          | 	byte	"System error "
3790e     00          | 	byte	0
3790f                 | LR__5955
3790f     3A 20       | 	byte	": "
37911     00          | 	byte	0
37912                 | LR__5956
37912     2F          | 	byte	"/"
37913     00          | 	byte	0
37914                 | LR__5957
37914     2F          | 	byte	"/"
37915     00          | 	byte	0
37916                 | LR__5958
37916     2F          | 	byte	"/"
37917     00          | 	byte	0
37918                 | LR__5959
37918     43 61 6E 6E 
3791c     6F 74 20 64 
37920     65 6C 65 74 
37924     65 20 66 69 
37928     6C 65 20 6F 
3792c     72 20 66 69 
37930     6C 65 20 64 
37934     6F 65 73 6E 
37938     27 74 20 65 
3793c     78 69 73 74 
37940     3A 20 73 79 
37944     73 74 65 6D 
37948     20 65 72 72 
3794c     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
3794f     00          | 	byte	0
37950                 | LR__5960
37950     43 75 72 72 
37954     65 6E 74 20 
37958     64 69 72 65 
3795c     63 74 6F 72 
37960     79 3A 20    | 	byte	"Current directory: "
37963     00          | 	byte	0
37964                 | LR__5961
37964                 | 	byte	
37964     00          | 	byte	0
37965                 | LR__5962
37965     2A          | 	byte	"*"
37966     00          | 	byte	0
37967                 | LR__5963
37967                 | 	byte	
37967     00          | 	byte	0
37968                 | LR__5964
37968     5B 64 69 72 
3796c     5D 20       | 	byte	"[dir] "
3796e     00          | 	byte	0
3796f                 | LR__5965
3796f     4D 6F 72 65 
37973     20 74 68 61 
37977     6E 20 31 32 
3797b     38 20 65 6E 
3797f     74 72 69 65 
37983     73 20 66 6F 
37987     75 6E 64 3A 
3798b     20 63 6C 65 
3798f     61 6E 20 79 
37993     6F 75 72 20 
37997     64 69 72 65 
3799b     63 74 6F 72 
3799f     79          | 	byte	"More than 128 entries found: clean your directory"
379a0     00          | 	byte	0
379a1                 | LR__5966
379a1     2A          | 	byte	"*"
379a2     00          | 	byte	0
379a3                 | LR__5967
379a3                 | 	byte	
379a3     00          | 	byte	0
379a4                 | LR__5968
379a4     4D 6F 72 65 
379a8     20 74 68 61 
379ac     6E 20 31 32 
379b0     38 20 65 6E 
379b4     74 72 69 65 
379b8     73 20 66 6F 
379bc     75 6E 64 3A 
379c0     20 63 6C 65 
379c4     61 6E 20 79 
379c8     6F 75 72 20 
379cc     64 69 72 65 
379d0     63 74 6F 72 
379d4     79          | 	byte	"More than 128 entries found: clean your directory"
379d5     00          | 	byte	0
379d6                 | LR__5969
379d6     45 72 72 6F 
379da     72 20       | 	byte	"Error "
379dc     00          | 	byte	0
379dd                 | LR__5970
379dd     3A 20       | 	byte	": "
379df     00          | 	byte	0
379e0                 | LR__5971
379e0     67 65 74 63 
379e4     6F 6C 6F 72 
379e8     20          | 	byte	"getcolor "
379e9     00          | 	byte	0
379ea                 | LR__5972
379ea     67 65 74 65 
379ee     6E 76 73 75 
379f2     73 74 61 69 
379f6     6E 3A 20    | 	byte	"getenvsustain: "
379f9     00          | 	byte	0
379fa                 | LR__5973
379fa     67 65 74 70 
379fe     69 78 65 6C 
37a02     3A 20       | 	byte	"getpixel: "
37a04     00          | 	byte	0
37a05                 | LR__5974
37a05     68 65 78 24 
37a09     3A 20       | 	byte	"hex$: "
37a0b     00          | 	byte	0
37a0c                 | LR__5975
37a0c                 | 	byte	
37a0c     00          | 	byte	0
37a0d                 | LR__5976
37a0d     49 6E 20 69 
37a11     6E 70 75 74 
37a15     3A 20       | 	byte	"In input: "
37a17     00          | 	byte	0
37a18                 | LR__5977
37a18     2C          | 	byte	","
37a19     00          | 	byte	0
37a1a                 | LR__5978
37a1a                 | 	byte	
37a1a     00          | 	byte	0
37a1b                 | LR__5979
37a1b                 | 	byte	
37a1b     00          | 	byte	0
37a1c                 | LR__5980
37a1c     6C 65 66 74 
37a20     24 3A 20    | 	byte	"left$: "
37a23     00          | 	byte	0
37a24                 | LR__5981
37a24     6C 65 66 74 
37a28     24 3A 20    | 	byte	"left$: "
37a2b     00          | 	byte	0
37a2c                 | LR__5982
37a2c     6C 65 6E 3A 
37a30     20          | 	byte	"len: "
37a31     00          | 	byte	0
37a32                 | LR__5983
37a32     6C 65 6E 3A 
37a36     20          | 	byte	"len: "
37a37     00          | 	byte	0
37a38                 | LR__5984
37a38                 | 	byte	
37a38     00          | 	byte	0
37a39                 | LR__5985
37a39     2F          | 	byte	"/"
37a3a     00          | 	byte	0
37a3b                 | LR__5986
37a3b     2F          | 	byte	"/"
37a3c     00          | 	byte	0
37a3d                 | LR__5987
37a3d     2E 62 61 73 | 	byte	".bas"
37a41     00          | 	byte	0
37a42                 | LR__5988
37a42     53 79 73 74 
37a46     65 6D 20 65 
37a4a     72 72 6F 72 
37a4e     20          | 	byte	"System error "
37a4f     00          | 	byte	0
37a50                 | LR__5989
37a50     3A 20       | 	byte	": "
37a52     00          | 	byte	0
37a53                 | LR__5990
37a53     2E 62 61 73 | 	byte	".bas"
37a57     00          | 	byte	0
37a58                 | LR__5991
37a58     2F          | 	byte	"/"
37a59     00          | 	byte	0
37a5a                 | LR__5992
37a5a                 | 	byte	
37a5a     00          | 	byte	0
37a5b                 | LR__5993
37a5b     4C 6F 61 64 
37a5f     65 64 20    | 	byte	"Loaded "
37a62     00          | 	byte	0
37a63                 | LR__5994
37a63     2F          | 	byte	"/"
37a64     00          | 	byte	0
37a65                 | LR__5995
37a65     6C 6F 67 3A 
37a69     20          | 	byte	"log: "
37a6a     00          | 	byte	0
37a6b                 | LR__5996
37a6b     6D 69 64 24 
37a6f     3A 20       | 	byte	"mid$: "
37a71     00          | 	byte	0
37a72                 | LR__5997
37a72     6D 69 64 24 
37a76     3A 20       | 	byte	"mid$: "
37a78     00          | 	byte	0
37a79                 | LR__5998
37a79     43 61 6E 6E 
37a7d     6F 74 20 63 
37a81     72 65 61 74 
37a85     65 20 61 20 
37a89     64 69 72 65 
37a8d     63 74 6F 72 
37a91     79 3A 20 73 
37a95     79 73 74 65 
37a99     6D 20 65 72 
37a9d     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
37aa1     00          | 	byte	0
37aa2                 | LR__5999
37aa2     20 42 41 53 
37aa6     49 43 20 62 
37aaa     79 74 65 73 
37aae     20 66 72 65 
37ab2     65          | 	byte	" BASIC bytes free"
37ab3     00          | 	byte	0
37ab4                 | LR__6000
37ab4                 | 	byte	
37ab4     00          | 	byte	0
37ab5                 | LR__6001
37ab5                 | 	byte	
37ab5     00          | 	byte	0
37ab6                 | LR__6002
37ab6                 | 	byte	
37ab6     00          | 	byte	0
37ab7                 | LR__6003
37ab7     6E 6F 6E 61 
37abb     6D 65 2E 62 
37abf     61 73       | 	byte	"noname.bas"
37ac1     00          | 	byte	0
37ac2                 | LR__6004
37ac2     66 69 6C 65 
37ac6     6E 61 6D 65 
37aca     20 65 78 70 
37ace     65 63 74 65 
37ad2     64          | 	byte	"filename expected"
37ad3     00          | 	byte	0
37ad4                 | LR__6005
37ad4     72 65 61 64 | 	byte	"read"
37ad8     00          | 	byte	0
37ad9                 | LR__6006
37ad9     77 72 69 74 
37add     65          | 	byte	"write"
37ade     00          | 	byte	0
37adf                 | LR__6007
37adf     61 70 70 65 
37ae3     6E 64       | 	byte	"append"
37ae5     00          | 	byte	0
37ae6                 | LR__6008
37ae6     63 68 61 6E 
37aea     6E 65 6C 23 
37aee     20 65 78 70 
37af2     65 63 74 65 
37af6     64          | 	byte	"channel# expected"
37af7     00          | 	byte	0
37af8                 | LR__6009
37af8     4F 70 65 6E 
37afc     3A 20 69 6E 
37b00     76 61 6C 69 
37b04     64 20 6D 6F 
37b08     64 65       | 	byte	"Open: invalid mode"
37b0a     00          | 	byte	0
37b0b                 | LR__6010
37b0b     70 61 64 72 
37b0f     78 3A 20    | 	byte	"padrx: "
37b12     00          | 	byte	0
37b13                 | LR__6011
37b13     70 61 64 72 
37b17     79 3A 20    | 	byte	"padry: "
37b1a     00          | 	byte	0
37b1b                 | LR__6012
37b1b     70 61 64 72 
37b1f     7A 3A 20    | 	byte	"padrz: "
37b22     00          | 	byte	0
37b23                 | LR__6013
37b23     70 61 64 73 
37b27     3A 20       | 	byte	"pads: "
37b29     00          | 	byte	0
37b2a                 | LR__6014
37b2a     70 61 64 77 
37b2e     3A 20       | 	byte	"padw: "
37b30     00          | 	byte	0
37b31                 | LR__6015
37b31     70 61 64 78 
37b35     3A 20       | 	byte	"padx: "
37b37     00          | 	byte	0
37b38                 | LR__6016
37b38     70 61 64 79 
37b3c     3A 20       | 	byte	"pady: "
37b3e     00          | 	byte	0
37b3f                 | LR__6017
37b3f     70 61 64 7A 
37b43     3A 20       | 	byte	"padz: "
37b45     00          | 	byte	0
37b46                 | LR__6018
37b46     50 72 69 6E 
37b4a     74 20 74 6F 
37b4e     20 63 68 61 
37b52     6E 6E 65 6C 
37b56     20 28 6E 6F 
37b5a     74 20 79 65 
37b5e     74 20 69 6D 
37b62     70 6C 65 6D 
37b66     65 6E 74 65 
37b6a     64 29       | 	byte	"Print to channel (not yet implemented)"
37b6c     00          | 	byte	0
37b6d                 | LR__6019
37b6d                 | 	byte	
37b6d     00          | 	byte	0
37b6e                 | LR__6020
37b6e     64 61 74 61 | 	byte	"data"
37b72     00          | 	byte	0
37b73                 | LR__6021
37b73                 | 	byte	
37b73     00          | 	byte	0
37b74                 | LR__6022
37b74     49 6E 20 72 
37b78     65 61 64 3A 
37b7c     20          | 	byte	"In read: "
37b7d     00          | 	byte	0
37b7e                 | LR__6023
37b7e                 | 	byte	
37b7e     00          | 	byte	0
37b7f                 | LR__6024
37b7f                 | 	byte	
37b7f     00          | 	byte	0
37b80                 | LR__6025
37b80     27          | 	byte	"'"
37b81     00          | 	byte	0
37b82                 | LR__6026
37b82     2C          | 	byte	","
37b83     00          | 	byte	0
37b84                 | LR__6027
37b84                 | 	byte	
37b84     00          | 	byte	0
37b85                 | LR__6028
37b85                 | 	byte	
37b85     00          | 	byte	0
37b86                 | LR__6029
37b86                 | 	byte	
37b86     00          | 	byte	0
37b87                 | LR__6030
37b87                 | 	byte	
37b87     00          | 	byte	0
37b88                 | LR__6031
37b88                 | 	byte	
37b88     00          | 	byte	0
37b89                 | LR__6032
37b89     72 69 67 68 
37b8d     74 24 3A 20 | 	byte	"right$: "
37b91     00          | 	byte	0
37b92                 | LR__6033
37b92     72 69 67 68 
37b96     74 24 3A 20 | 	byte	"right$: "
37b9a     00          | 	byte	0
37b9b                 | LR__6034
37b9b     72 6E 64 3A 
37b9f     20          | 	byte	"rnd: "
37ba0     00          | 	byte	0
37ba1                 | LR__6035
37ba1     72 6E 64 3A 
37ba5     20          | 	byte	"rnd: "
37ba6     00          | 	byte	0
37ba7                 | LR__6036
37ba7                 | 	byte	
37ba7     00          | 	byte	0
37ba8                 | LR__6037
37ba8     53 74 6F 70 
37bac     70 65 64 20 
37bb0     61 74 20 6C 
37bb4     69 6E 65 20 | 	byte	"Stopped at line "
37bb8     00          | 	byte	0
37bb9                 | LR__6038
37bb9                 | 	byte	
37bb9     00          | 	byte	0
37bba                 | LR__6039
37bba     2F          | 	byte	"/"
37bbb     00          | 	byte	0
37bbc                 | LR__6040
37bbc                 | 	byte	
37bbc     00          | 	byte	0
37bbd                 | LR__6041
37bbd     53 61 76 65 
37bc1     64 20 61 73 
37bc5     20          | 	byte	"Saved as "
37bc6     00          | 	byte	0
37bc7                 | LR__6042
37bc7     2F          | 	byte	"/"
37bc8     00          | 	byte	0
37bc9                 | LR__6043
37bc9     73 65 74 63 
37bcd     6F 6C 6F 72 
37bd1     3A 20       | 	byte	"setcolor: "
37bd3     00          | 	byte	0
37bd4                 | LR__6044
37bd4     73 69 6E 3A 
37bd8     20          | 	byte	"sin: "
37bd9     00          | 	byte	0
37bda                 | LR__6045
37bda     73 71 72 3A 
37bde     20          | 	byte	"sqr: "
37bdf     00          | 	byte	0
37be0                 | LR__6046
37be0     73 74 69 63 
37be4     6B 3A 20    | 	byte	"stick: "
37be7     00          | 	byte	0
37be8                 | LR__6047
37be8     73 74 72 69 
37bec     67 3A 20    | 	byte	"strig: "
37bef     00          | 	byte	0
37bf0                 | LR__6048
37bf0     74 61 6E 3A 
37bf4     20          | 	byte	"tan: "
37bf5     00          | 	byte	0
37bf6                 | LR__6049
37bf6     76 61 6C 3A 
37bfa     20          | 	byte	"val: "
37bfb     00          | 	byte	0
37bfc                 | LR__6050
37bfc     76 61 6C 3A 
37c00     20          | 	byte	"val: "
37c01     00          | 	byte	0
37c02                 | LR__6051
37c02     24          | 	byte	"$"
37c03     00          | 	byte	0
37c04                 | LR__6052
37c04     26 68       | 	byte	"&h"
37c06     00          | 	byte	0
37c07                 | LR__6053
37c07     25          | 	byte	"%"
37c08     00          | 	byte	0
37c09                 | LR__6054
37c09     26 62       | 	byte	"&b"
37c0b     00          | 	byte	0
37c0c                 | LR__6055
37c0c                 | 	byte	
37c0c     00          | 	byte	0
37c0d                 | LR__6056
37c0d     45 78 70 65 
37c11     63 74 65 64 
37c15     20 6E 75 6D 
37c19     62 65 72 2C 
37c1d     20 67 6F 74 
37c21     20 73 6F 6D 
37c25     65 74 68 69 
37c29     6E 67 20 65 
37c2d     6C 73 65    | 	byte	"Expected number, got something else"
37c30     00          | 	byte	0
37c31                 | LR__6057
37c31     43 61 6E 6E 
37c35     6F 74 20 61 
37c39     64 64 20 61 
37c3d     20 6E 75 6D 
37c41     62 65 72 20 
37c45     74 6F 20 61 
37c49     20 73 74 72 
37c4d     69 6E 67    | 	byte	"Cannot add a number to a string"
37c50     00          | 	byte	0
37c51                 | LR__6058
37c51     43 61 6E 6E 
37c55     6F 74 20 73 
37c59     75 62 73 74 
37c5d     72 61 63 74 
37c61     20 73 74 72 
37c65     69 6E 67 73 | 	byte	"Cannot substract strings"
37c69     00          | 	byte	0
37c6a                 | LR__6059
37c6a     55 6E 6B 6E 
37c6e     6F 77 6E 20 
37c72     65 72 72 6F 
37c76     72 20 77 68 
37c7a     69 6C 65 20 
37c7e     61 64 64 69 
37c82     6E 67       | 	byte	"Unknown error while adding"
37c84     00          | 	byte	0
37c85                 | LR__6060
37c85     55 6E 6B 6E 
37c89     6F 77 6E 20 
37c8d     65 72 72 6F 
37c91     72 20 77 68 
37c95     69 6C 65 20 
37c99     73 75 62 73 
37c9d     74 72 61 63 
37ca1     74 69 6E 67 | 	byte	"Unknown error while substracting"
37ca5     00          | 	byte	0
37ca6                 | LR__6061
37ca6     43 61 6E 6E 
37caa     6F 74 20 64 
37cae     6F 20 6C 6F 
37cb2     67 69 63 20 
37cb6     6F 70 65 72 
37cba     61 74 69 6F 
37cbe     6E 20 6F 6E 
37cc2     20 73 74 72 
37cc6     69 6E 67 20 
37cca     6F 72 20 66 
37cce     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
37cd2     00          | 	byte	0
37cd3                 | LR__6062
37cd3     55 6E 6B 6E 
37cd7     6F 77 6E 20 
37cdb     65 72 72 6F 
37cdf     72 20 77 68 
37ce3     69 6C 65 20 
37ce7     64 6F 69 6E 
37ceb     67 20 6C 6F 
37cef     67 69 63 20 
37cf3     6F 70 65 72 
37cf7     61 74 69 6F 
37cfb     6E          | 	byte	"Unknown error while doing logic operation"
37cfc     00          | 	byte	0
37cfd                 | LR__6063
37cfd     43 61 6E 6E 
37d01     6F 74 20 6D 
37d05     75 6C 74 69 
37d09     70 6C 79 20 
37d0d     73 74 72 69 
37d11     6E 67 73    | 	byte	"Cannot multiply strings"
37d14     00          | 	byte	0
37d15                 | LR__6064
37d15     55 6E 6B 6E 
37d19     6F 77 6E 20 
37d1d     65 72 72 6F 
37d21     72 20 77 68 
37d25     69 6C 65 20 
37d29     6D 75 6C 74 
37d2d     69 70 6C 79 
37d31     69 6E 67    | 	byte	"Unknown error while multiplying"
37d34     00          | 	byte	0
37d35                 | LR__6065
37d35     43 61 6E 6E 
37d39     6F 74 20 64 
37d3d     69 76 69 64 
37d41     65 20 73 74 
37d45     72 69 6E 67 
37d49     73          | 	byte	"Cannot divide strings"
37d4a     00          | 	byte	0
37d4b                 | LR__6066
37d4b     55 6E 6B 6E 
37d4f     6F 77 6E 20 
37d53     65 72 72 6F 
37d57     72 20 77 68 
37d5b     69 6C 65 20 
37d5f     64 69 76 69 
37d63     64 69 6E 67 | 	byte	"Unknown error while dividing"
37d67     00          | 	byte	0
37d68                 | LR__6067
37d68     43 61 6E 6E 
37d6c     6F 74 20 63 
37d70     6F 6D 70 75 
37d74     74 65 20 61 
37d78     20 70 6F 77 
37d7c     65 72 20 6F 
37d80     66 20 61 20 
37d84     73 74 72 69 
37d88     6E 67       | 	byte	"Cannot compute a power of a string"
37d8a     00          | 	byte	0
37d8b                 | LR__6068
37d8b     55 6E 6B 6E 
37d8f     6F 77 6E 20 
37d93     65 72 72 6F 
37d97     72 20 77 68 
37d9b     69 6C 65 20 
37d9f     63 6F 6D 70 
37da3     75 74 69 6E 
37da7     67 20 61 20 
37dab     70 6F 77 65 
37daf     72          | 	byte	"Unknown error while computing a power"
37db0     00          | 	byte	0
37db1                 | LR__6069
37db1     52 69 67 68 
37db5     74 20 70 61 
37db9     72 65 6E 74 
37dbd     68 65 73 69 
37dc1     73 20 65 78 
37dc5     70 65 63 74 
37dc9     65 64       | 	byte	"Right parenthesis expected"
37dcb     00          | 	byte	0
37dcc                 | LR__6070
37dcc     45 78 70 65 
37dd0     63 74 65 64 
37dd4     20 73 74 72 
37dd8     69 6E 67    | 	byte	"Expected string"
37ddb     00          | 	byte	0
37ddc                 | LR__6071
37ddc     45 78 70 65 
37de0     63 74 65 64 
37de4     20 66 6C 6F 
37de8     61 74       | 	byte	"Expected float"
37dea     00          | 	byte	0
37deb                 | LR__6072
37deb     45 78 70 65 
37def     63 74 65 64 
37df3     20 75 6E 73 
37df7     69 67 6E 65 
37dfb     64 20 69 6E 
37dff     74 65 67 65 
37e03     72          | 	byte	"Expected unsigned integer"
37e04     00          | 	byte	0
37e05                 | LR__6073
37e05     45 78 70 65 
37e09     63 74 65 64 
37e0d     20 69 6E 74 
37e11     65 67 65 72 | 	byte	"Expected integer"
37e15     00          | 	byte	0
37e16                 | LR__6074
37e16     4E 6F 20 6D 
37e1a     6F 72 65 20 
37e1e     76 61 72 69 
37e22     61 62 6C 65 
37e26     20 73 6C 6F 
37e2a     74 73       | 	byte	"No more variable slots"
37e2c     00          | 	byte	0
37e2d                 | LR__6075
37e2d     56 61 72 69 
37e31     61 62 6C 65 
37e35     20 6E 6F 74 
37e39     20 66 6F 75 
37e3d     6E 64       | 	byte	"Variable not found"
37e3f     00          | 	byte	0
37e40                 | LR__6076
37e40     43 6F 6D 6D 
37e44     61 20 65 78 
37e48     70 65 63 74 
37e4c     65 64       | 	byte	"Comma expected"
37e4e     00          | 	byte	0
37e4f                 | LR__6077
37e4f     43 6F 6D 6D 
37e53     61 20 6F 72 
37e57     20 73 65 6D 
37e5b     69 63 6F 6C 
37e5f     6F 6E 20 65 
37e63     78 70 65 63 
37e67     74 65 64    | 	byte	"Comma or semicolon expected"
37e6a     00          | 	byte	0
37e6b                 | LR__6078
37e6b     55 6E 6B 6E 
37e6f     6F 77 6E 20 
37e73     63 6F 6D 6D 
37e77     61 6E 64    | 	byte	"Unknown command"
37e7a     00          | 	byte	0
37e7b                 | LR__6079
37e7b     53 74 61 63 
37e7f     6B 20 75 6E 
37e83     64 65 72 66 
37e87     6C 6F 77    | 	byte	"Stack underflow"
37e8a     00          | 	byte	0
37e8b                 | LR__6080
37e8b     43 61 6E 6E 
37e8f     6F 74 20 65 
37e93     78 65 63 75 
37e97     74 65 20 67 
37e9b     6F 74 6F 20 
37e9f     6F 72 20 67 
37ea3     6F 73 75 62 
37ea7     20 69 6E 20 
37eab     74 68 65 20 
37eaf     69 6D 6D 65 
37eb3     64 69 61 74 
37eb7     65 20 6D 6F 
37ebb     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
37ebd     00          | 	byte	0
37ebe                 | LR__6081
37ebe     43 61 6E 6E 
37ec2     6F 74 20 6C 
37ec6     6F 61 64 20 
37eca     66 72 6F 6D 
37ece     20 74 68 69 
37ed2     73 20 66 69 
37ed6     6C 65       | 	byte	"Cannot load from this file"
37ed8     00          | 	byte	0
37ed9                 | LR__6082
37ed9     54 68 65 20 
37edd     70 72 6F 67 
37ee1     72 61 6D 20 
37ee5     69 73 20 65 
37ee9     6D 70 74 79 | 	byte	"The program is empty"
37eed     00          | 	byte	0
37eee                 | LR__6083
37eee     49 66 20 61 
37ef2     66 74 65 72 
37ef6     20 69 66    | 	byte	"If after if"
37ef9     00          | 	byte	0
37efa                 | LR__6084
37efa     45 6D 70 74 
37efe     79 20 65 78 
37f02     70 72 65 73 
37f06     73 69 6F 6E | 	byte	"Empty expression"
37f0a     00          | 	byte	0
37f0b                 | LR__6085
37f0b     53 74 72 69 
37f0f     6E 67 20 65 
37f13     78 70 65 63 
37f17     74 65 64    | 	byte	"String expected"
37f1a     00          | 	byte	0
37f1b                 | LR__6086
37f1b     49 6E 74 65 
37f1f     72 70 72 65 
37f23     74 65 72 20 
37f27     69 6E 74 65 
37f2b     72 6E 61 6C 
37f2f     20 65 72 72 
37f33     6F 72       | 	byte	"Interpreter internal error"
37f35     00          | 	byte	0
37f36                 | LR__6087
37f36     45 78 70 65 
37f3a     63 74 65 64 
37f3e     20 61 73 73 
37f42     69 67 6E    | 	byte	"Expected assign"
37f45     00          | 	byte	0
37f46                 | LR__6088
37f46     45 78 70 65 
37f4a     63 74 65 64 
37f4e     20 27 74 6F 
37f52     27          | 	byte	"Expected 'to'"
37f53     00          | 	byte	0
37f54                 | LR__6089
37f54     45 78 70 65 
37f58     63 74 65 64 
37f5c     20 69 6E 74 
37f60     65 67 65 72 
37f64     20 76 61 72 
37f68     69 61 62 6C 
37f6c     65          | 	byte	"Expected integer variable"
37f6d     00          | 	byte	0
37f6e                 | LR__6090
37f6e     55 6E 69 6E 
37f72     69 74 69 61 
37f76     6C 69 7A 65 
37f7a     64 20 76 61 
37f7e     72 69 61 62 
37f82     6C 65 20 69 
37f86     6E 20 27 6E 
37f8a     65 78 74 27 
37f8e     2C 20 75 73 
37f92     65 20 27 66 
37f96     6F 72 27 20 
37f9a     62 65 66 6F 
37f9e     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
37fa0     00          | 	byte	0
37fa1                 | LR__6091
37fa1     4E 6F 20 6D 
37fa5     6F 72 65 20 
37fa9     73 6C 6F 74 
37fad     73 20 66 6F 
37fb1     72 20 27 66 
37fb5     6F 72 27    | 	byte	"No more slots for 'for'"
37fb8     00          | 	byte	0
37fb9                 | LR__6092
37fb9     27 4E 65 78 
37fbd     74 27 20 64 
37fc1     6F 65 73 6E 
37fc5     27 74 20 6D 
37fc9     61 74 63 68 
37fcd     20 27 66 6F 
37fd1     72 27       | 	byte	"'Next' doesn't match 'for'"
37fd3     00          | 	byte	0
37fd4                 | LR__6093
37fd4     27 47 6F 74 
37fd8     6F 27 20 74 
37fdc     61 72 67 65 
37fe0     74 20 6C 69 
37fe4     6E 65 20 6E 
37fe8     6F 74 20 66 
37fec     6F 75 6E 64 | 	byte	"'Goto' target line not found"
37ff0     00          | 	byte	0
37ff1                 | LR__6094
37ff1     42 61 64 20 
37ff5     6E 75 6D 62 
37ff9     65 72 20 6F 
37ffd     66 20 70 61 
38001     72 61 6D 65 
38005     74 65 72 73 | 	byte	"Bad number of parameters"
38009     00          | 	byte	0
3800a                 | LR__6095
3800a     46 75 6E 63 
3800e     74 69 6F 6E 
38012     20 75 6E 64 
38016     65 66 69 6E 
3801a     65 64 20 66 
3801e     6F 72 20 73 
38022     74 72 69 6E 
38026     67 73       | 	byte	"Function undefined for strings"
38028     00          | 	byte	0
38029                 | LR__6096
38029     42 61 64 20 
3802d     70 61 72 61 
38031     6D 65 74 65 
38035     72          | 	byte	"Bad parameter"
38036     00          | 	byte	0
38037                 | LR__6097
38037     43 61 6E 6E 
3803b     6F 74 20 64 
3803f     65 63 6C 61 
38043     72 65 20 61 
38047     6E 20 61 72 
3804b     72 61 79 3A 
3804f     20 74 68 65 
38053     20 76 61 72 
38057     69 61 62 6C 
3805b     65 20 65 78 
3805f     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
38063     00          | 	byte	0
38064                 | LR__6098
38064     45 78 70 65 
38068     63 74 65 64 
3806c     20 27 28 27 | 	byte	"Expected '('"
38070     00          | 	byte	0
38071                 | LR__6099
38071     45 78 70 65 
38075     63 74 65 64 
38079     20 27 29 27 
3807d     20 6F 72 20 
38081     27 2C 27    | 	byte	"Expected ')' or ','"
38084     00          | 	byte	0
38085                 | LR__6100
38085     4E 6F 20 6D 
38089     6F 72 65 20 
3808d     74 68 61 6E 
38091     20 33 20 64 
38095     69 6D 65 6E 
38099     73 69 6F 6E 
3809d     73 20 73 75 
380a1     70 70 6F 72 
380a5     74 65 64    | 	byte	"No more than 3 dimensions supported"
380a8     00          | 	byte	0
380a9                 | LR__6101
380a9     56 61 72 69 
380ad     61 62 6C 65 
380b1     20 6E 61 6D 
380b5     65 20 65 78 
380b9     70 65 63 74 
380bd     65 64       | 	byte	"Variable name expected"
380bf     00          | 	byte	0
380c0                 | LR__6102
380c0     54 79 70 65 
380c4     20 6E 61 6D 
380c8     65 20 65 78 
380cc     70 65 63 74 
380d0     65 64       | 	byte	"Type name expected"
380d2     00          | 	byte	0
380d3                 | LR__6103
380d3     54 79 70 65 
380d7     20 6E 6F 74 
380db     20 73 75 70 
380df     70 6F 72 74 
380e3     65 64 20 79 
380e7     65 74       | 	byte	"Type not supported yet"
380e9     00          | 	byte	0
380ea                 | LR__6104
380ea     41 72 72 61 
380ee     79 20 69 6E 
380f2     64 65 78 20 
380f6     6F 75 74 20 
380fa     6F 66 20 72 
380fe     61 6E 67 65 | 	byte	"Array index out of range"
38102     00          | 	byte	0
38103                 | LR__6105
38103     42 61 64 20 
38107     74 79 70 65 
3810b     20 77 68 69 
3810f     6C 65 20 61 
38113     73 73 69 67 
38117     6E 69 6E 67 
3811b     20 74 6F 20 
3811f     61 72 72 61 
38123     79          | 	byte	"Bad type while assigning to array"
38124     00          | 	byte	0
38125                 | LR__6106
38125     54 6F 6F 20 
38129     6D 61 6E 79 
3812d     20 76 61 72 
38131     69 61 62 6C 
38135     65 73       | 	byte	"Too many variables"
38137     00          | 	byte	0
38138                 | LR__6107
38138     27 54 68 65 
3813c     6E 27 20 65 
38140     78 70 65 63 
38144     74 65 64    | 	byte	"'Then' expected"
38147     00          | 	byte	0
38148                 | LR__6108
38148     44 69 72 65 
3814c     63 74 6F 72 
38150     79 20 64 6F 
38154     65 73 6E 27 
38158     74 20 65 78 
3815c     69 73 74    | 	byte	"Directory doesn't exist"
3815f     00          | 	byte	0
38160                 | LR__6109
38160     55 6E 65 78 
38164     70 65 63 74 
38168     65 64 20 65 
3816c     6E 64 20 6F 
38170     66 20 6C 69 
38174     6E 65       | 	byte	"Unexpected end of line"
38176     00          | 	byte	0
38177                 | LR__6110
38177     4E 6F 20 6D 
3817b     6F 72 65 20 
3817f     64 61 74 61 | 	byte	"No more data"
38183     00          | 	byte	0
38184                 | LR__6111
38184     45 72 72 6F 
38188     72 20       | 	byte	"Error "
3818a     00          | 	byte	0
3818b                 | LR__6112
3818b     20 2D 20    | 	byte	" - "
3818e     00          | 	byte	0
3818f                 | LR__6113
3818f     20 69 6E 20 
38193     6C 69 6E 65 
38197     20          | 	byte	" in line "
38198     00          | 	byte	0
38199                 | LR__6114
38199                 | 	byte	
38199     00          | 	byte	0
3819a                 | LR__6115
3819a     2F 73 64    | 	byte	"/sd"
3819d     00          | 	byte	0
3819e                 | LR__6116
3819e     2F 73 64 2F 
381a2     62 61 73    | 	byte	"/sd/bas"
381a5     00          | 	byte	0
381a6                 | LR__6117
381a6     2F 73 64 2F 
381aa     62 61 73    | 	byte	"/sd/bas"
381ad     00          | 	byte	0
381ae                 | LR__6118
381ae     20 42 41 53 
381b2     49 43 20 62 
381b6     79 74 65 73 
381ba     20 66 72 65 
381be     65          | 	byte	" BASIC bytes free"
381bf     00          | 	byte	0
381c0                 | LR__6119
381c0     52 65 61 64 
381c4     79          | 	byte	"Ready"
381c5     00          | 	byte	0
381c6                 | LR__6120
381c6     6E 6F 6E 61 
381ca     6D 65 2E 62 
381ce     61 73       | 	byte	"noname.bas"
381d0     00          | 	byte	0
381d1                 | LR__6121
381d1     2F 73 64 2F 
381d5     62 61 73 2F 
381d9     61 75 74 6F 
381dd     72 75 6E 2E 
381e1     62 61 73    | 	byte	"/sd/bas/autorun.bas"
381e4     00          | 	byte	0
381e5                 | LR__6122
381e5     72 75 6E 20 
381e9     61 75 74 6F 
381ed     72 75 6E 2E 
381f1     62 61 73    | 	byte	"run autorun.bas"
381f4     00          | 	byte	0
381f5                 | LR__6123
381f5                 | 	byte	
381f5     00          | 	byte	0
381f6     00 00       | 	alignl
381f8                 | _dat_
381f8     00 00 00 00 
381fc     00 00 00 00 
38200     00 00 00 00 
38204     00 00 00 00 | 	byte	$00[16]
38208     61 41 17 0E 
3820c     62 42 00 00 
38210     63 43 19 10 
38214     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
38218     65 45 18 0F 
3821c     66 46 00 00 
38220     67 47 00 00 
38224     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
38228     69 49 00 00 
3822c     6A 4A 00 00 
38230     6B 4B 00 00 
38234     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
38238     6D 4D 00 00 
3823c     6E 4E 1A 11 
38240     6F 4F 1E 15 
38244     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
38248     71 51 00 00 
3824c     72 52 00 00 
38250     73 53 1B 12 
38254     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
38258     75 55 00 00 
3825c     76 56 00 00 
38260     77 57 00 00 
38264     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
38268     79 59 00 00 
3826c     7A 5A 1D 14 
38270     31 21 04 00 
38274     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
38278     33 23 06 00 
3827c     34 24 07 00 
38280     35 25 08 00 
38284     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
38288     37 26 0A 00 
3828c     38 2A 0B 00 
38290     39 28 0C 00 
38294     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
38298     8D 8D 00 00 
3829c     9B 9B 00 00 
382a0     88 88 00 00 
382a4     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
382a8     20 20 00 00 
382ac     2D 5F 00 00 
382b0     3D 2B 00 00 
382b4     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
382b8     5D 7D 00 00 
382bc     5C 7C 00 00 
382c0     23 7E 00 00 
382c4     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
382c8     27 22 00 00 
382cc     60 7E 03 00 
382d0     2C 3C 00 00 
382d4     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
382d8     2F 3F 00 00 
382dc     B9 B9 00 00 
382e0     BA 00 00 00 
382e4     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
382e8     BC 00 00 00 
382ec     BD 00 00 00 
382f0     BE 00 00 00 
382f4     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
382f8     C0 00 00 00 
382fc     C1 00 00 00 
38300     C2 00 00 00 
38304     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
38308     C4 00 00 00 
3830c     C5 00 00 00 
38310     C6 00 00 00 
38314     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
38318     C8 00 00 00 
3831c     C9 00 00 00 
38320     CA 00 00 00 
38324     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
38328     7F 7F 00 00 
3832c     CC 00 00 00 
38330     CD 00 00 00 
38334     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
38338     CF 00 00 00 
3833c     D0 00 00 00 
38340     D1 00 00 00 
38344     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
38348     2F 2F 00 00 
3834c     2A 2A 00 00 
38350     2D 2D 00 00 
38354     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
38358     8D 8D 00 00 
3835c     31 31 00 00 
38360     32 32 00 00 
38364     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
38368     34 34 00 00 
3836c     35 35 00 00 
38370     36 36 00 00 
38374     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
38378     38 38 00 00 
3837c     39 39 00 00 
38380     30 30 00 00 
38384     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
38388     5C 7C 00 00 
3838c     00 00 00 00 
38390     00 00 00 00 
38394     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
38398     00 00 00 00 
      ...             
383f0     00 00 00 00 
383f4     00 00 00 00 | 	byte	$00[96]
383f8     2B 00 A6 F2 
383fc     24 A7 09 80 
38400     5B 88 4D 89 
38404     80 88 A5 88 | atari_spl file "atari.spl"
38408     6D 88 B8 88 
3840c     80 88 CB 88 
38410     92 88 A5 88 
38414     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
38418     A5 88 CA 88 
3841c     A6 88 DD 88 
38420     B8 88 AB 89 
38424     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
38428     C8 AD C6 F1 
3842c     91 06 B6 FF 
38430     13 00 4A 00 
38434     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
38438     5D 00 5E 00 
3843c     5D 00 5E 00 
38440     5E 00 5D 00 
38444     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
38448     38 00 83 00 
3844c     25 00 83 00 
38450     C3 FE D1 04 
38454     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
38458     48 88 38 85 
3845c     41 8A CB 88 
38460     28 89 B8 88 
38464     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
38468     15 89 03 89 
3846c     02 89 15 89 
38470     16 89 15 89 
38474     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
38478     15 89 3A 89 
3847c     72 89 E3 89 
38480     52 83 AD 97 
38484     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
38488     0C 02 B6 FF 
3848c     E1 00 A8 00 
38490     F3 00 A8 00 
38494     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
38498     CE 00 CD 00 
3849c     CD 00 BA 00 
384a0     E1 00 BB 00 
384a4     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
384a8     DF 00 C9 FF 
384ac     E6 01 B6 06 
384b0     EE DD 8D 98 
384b4     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
384b8     97 89 73 89 
384bc     3B 89 60 89 
384c0     60 89 60 89 
384c4     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
384c8     73 89 72 89 
384cc     85 89 73 89 
384d0     AA 89 60 89 
384d4     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
384d8     E8 8A 18 86 
384dc     92 88 A5 C2 
384e0     E0 00 C3 05 
384e4     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
384e8     F2 00 64 01 
384ec     06 01 3E 01 
384f0     2B 01 2B 01 
384f4     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
384f8     2B 01 2A 01 
384fc     2B 01 2B 01 
38500     2B 01 18 01 
38504     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
38508     39 07 61 F3 
3850c     C0 AF 37 85 
38510     0F 88 8B 8A 
38514     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
38518     AB 89 D0 89 
3851c     AB 89 D0 89 
38520     D0 89 CF 89 
38524     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
38528     D0 89 F5 89 
3852c     BD 89 08 8A 
38530     CF 89 E8 8A 
38534     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
38538     53 B3 0D F8 
3853c     F4 07 38 00 
38540     63 01 63 01 
38544     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
38548     88 01 88 01 
3854c     76 01 88 01 
38550     88 01 89 01 
38554     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
38558     75 01 AE 01 
3855c     76 01 88 01 
38560     4A 00 46 06 
38564     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
38568     08 8A 9A 86 
3856c     33 8B 08 8A 
38570     2D 8A F5 89 
38574     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
38578     2D 8A 2D 8A 
3857c     2E 8A 1B 8A 
38580     40 8A 2D 8A 
38584     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
38588     2E 8A 79 8A 
3858c     66 8A C8 8B 
38590     72 82 2B 97 
38594     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
38598     1D 02 05 01 
3859c     F8 01 C0 01 
385a0     0B 02 C0 01 
385a4     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
385a8     F9 01 D3 01 
385ac     F8 01 D3 01 
385b0     F8 01 D2 01 
385b4     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
385b8     E6 01 2B 01 
385bc     8E 02 5F 07 
385c0     F7 E2 ED 9C 
385c4     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
385c8     E8 8A 78 8A 
385cc     78 8A 65 8A 
385d0     8B 8A 78 8A 
385d4     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
385d8     8B 8A 9D 8A 
385dc     9D 8A 8B 8A 
385e0     C2 8A 78 8A 
385e4     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
385e8     70 8C 18 86 
385ec     8B 8A 23 C9 
385f0     CB 03 C4 05 
385f4     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
385f8     0B 02 7B 02 
385fc     1E 02 55 02 
38600     30 02 43 02 
38604     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
38608     43 02 44 02 
3860c     43 02 30 02 
38610     68 02 31 02 
38614     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
38618     07 08 3F F7 
3861c     73 B2 13 85 
38620     15 89 ED 8B 
38624     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
38628     B0 8A FB 8A 
3862c     D5 8A FA 8A 
38630     E8 8A FB 8A 
38634     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
38638     E8 8A 21 8B 
3863c     E7 8A 33 8B 
38640     E8 8A 26 8C 
38644     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
38648     8D B0 27 F6 
3864c     9C 08 AD 01 
38650     7B 02 8D 02 
38654     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
38658     A1 02 A0 02 
3865c     A1 02 A0 02 
38660     A0 02 A0 02 
38664     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
38668     7B 02 D8 02 
3866c     7B 02 C6 02 
38670     3E 01 C3 05 
38674     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
38678     00 8C 2A 86 
3867c     E0 8C FA 8A 
38680     6A 8B FB 8A 
38684     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
38688     45 8B 45 8B 
3868c     45 8B 6B 8B 
38690     46 8B 59 8B 
38694     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
38698     6B 8B 6B 8B 
3869c     6B 8B 6B 8B 
386a0     7D 8B 7D 8B 
386a4     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
386a8     90 8B 91 8B 
386ac     90 8B 90 8B 
386b0     A3 8B A3 8B 
386b4     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
386b8     B5 8B B6 8B 
386bc     B5 8B B5 8B 
386c0     B6 8B C8 8B 
386c4     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
386c8     C8 8B DA 8B 
386cc     DB 8B DB 8B 
386d0     DB 8B DC 8B 
386d4     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
386d8     EE 8B EE 8B 
386dc     00 8C 01 8C 
386e0     00 8C 01 8C 
386e4     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
386e8     12 8C 13 8C 
386ec     13 8C 26 8C 
386f0     26 8C 26 8C 
386f4     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
386f8     38 8C 38 8C 
386fc     38 8C 38 8C 
38700     4B 8C 4B 8C 
38704     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
38708     5E 8C 5E 8C 
3870c     5E 8C 5E 8C 
38710     70 8C 70 8C 
38714     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
38718     70 8C 83 8C 
3871c     83 8C 83 8C 
38720     83 8C 96 8C 
38724     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
38728     95 8C A9 8C 
3872c     A9 8C A8 8C 
38730     A8 8C A8 8C 
38734     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
38738     BB 8C BB 8C 
3873c     BB 8C CE 8C 
38740     CE 8C CE 8C 
38744     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
38748     E0 8C E1 8C 
3874c     E1 8C E0 8C 
38750     F4 8C F2 8C 
38754     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
38758     05 8D 05 8D 
3875c     06 8D 06 8D 
38760     19 8D 19 8D 
38764     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
38768     18 8D 2B 8D 
3876c     2B 8D 2B 8D 
38770     2A 8D 3E 8D 
38774     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
38778     3E 8D 51 8D 
3877c     50 8D 50 8D 
38780     50 8D 51 8D 
38784     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
38788     63 8D 64 8D 
3878c     76 8D 75 8D 
38790     75 8D 76 8D 
38794     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
38798     88 8D 88 8D 
3879c     89 8D 9B 8D 
387a0     9A 8D 9B 8D 
387a4     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
387a8     AD 8D AE 8D 
387ac     AD 8D AE 8D 
387b0     C1 8D C1 8D 
387b4     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
387b8     D3 8D D3 8D 
387bc     D3 8D D3 8D 
387c0     D3 8D E6 8D 
387c4     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
387c8     E6 8D E6 8D 
387cc     F9 8D F9 8D 
387d0     F9 8D F8 8D 
387d4     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
387d8     0B 8E 0B 8E 
387dc     1D 8E 1D 8E 
387e0     1E 8E 1E 8E 
387e4     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
387e8     31 8E 31 8E 
387ec     31 8E 42 8E 
387f0     43 8E 43 8E 
387f4     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
387f8     56 8E 56 8E 
387fc     55 8E 56 8E 
38800     68 8E 69 8E 
38804     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
38808     69 8E 7B 8E 
3880c     7C 8E 7B 8E 
38810     7B 8E 8D 8E 
38814     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
38818     8D 8E A1 8E 
3881c     A0 8E A1 8E 
38820     A1 8E A0 8E 
38824     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
38828     B3 8E B3 8E 
3882c     C6 8E C5 8E 
38830     C6 8E C6 8E 
38834     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
38838     D8 8E D9 8E 
3883c     D8 8E EC 8E 
38840     EB 8E EC 8E 
38844     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
38848     FE 8E FE 8E 
3884c     FE 8E FE 8E 
38850     10 8F 10 8F 
38854     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
38858     11 8F 23 8F 
3885c     24 8F 23 8F 
38860     24 8F 37 8F 
38864     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
38868     36 8F 36 8F 
3886c     48 8F 49 8F 
38870     49 8F 49 8F 
38874     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
38878     5B 8F 5C 8F 
3887c     5B 8F 6E 8F 
38880     6E 8F 6E 8F 
38884     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
38888     81 8F 81 8F 
3888c     81 8F 81 8F 
38890     93 8F 93 8F 
38894     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
38898     93 8F A6 8F 
3889c     A6 8F A6 8F 
388a0     A6 8F B9 8F 
388a4     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
388a8     B9 8F B9 8F 
388ac     CC 8F CB 8F 
388b0     CB 8F CC 8F 
388b4     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
388b8     DF 8F DE 8F 
388bc     DE 8F F1 8F 
388c0     F1 8F F1 8F 
388c4     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
388c8     03 90 04 90 
388cc     04 90 04 90 
388d0     16 90 17 90 
388d4     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
388d8     29 90 28 90 
388dc     29 90 28 90 
388e0     29 90 3C 90 
388e4     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
388e8     3C 90 4F 90 
388ec     4E 90 4E 90 
388f0     4E 90 4E 90 
388f4     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
388f8     61 90 61 90 
388fc     73 90 74 90 
38900     74 90 74 90 
38904     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
38908     87 90 86 90 
3890c     87 90 86 90 
38910     99 90 99 90 
38914     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
38918     AB 90 AB 90 
3891c     AC 90 AB 90 
38920     AB 90 BF 90 
38924     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
38928     BE 90 D1 90 
3892c     D0 90 D1 90 
38930     D1 90 D1 90 
38934     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
38938     E3 90 E4 90 
3893c     F6 90 F6 90 
38940     F6 90 F6 90 
38944     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
38948     09 91 0A 91 
3894c     0A 91 1C 91 
38950     1C 91 1C 91 
38954     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
38958     2F 91 2E 91 
3895c     2F 91 2F 91 
38960     2E 91 41 91 
38964     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
38968     41 91 53 91 
3896c     54 91 54 91 
38970     53 91 54 91 
38974     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
38978     67 91 67 91 
3897c     79 91 7A 91 
38980     79 91 78 91 
38984     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
38988     8C 91 8B 91 
3898c     8C 91 8C 91 
38990     9E 91 9E 91 
38994     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
38998     B1 91 B1 91 
3899c     B2 91 B1 91 
389a0     B1 91 C4 91 
389a4     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
389a8     C4 91 D6 91 
389ac     D7 91 D7 91 
389b0     D7 91 D6 91 
389b4     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
389b8     EA 91 EA 91 
389bc     EA 91 FC 91 
389c0     FC 91 FB 91 
389c4     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
389c8     0E 92 0F 92 
389cc     0F 92 0E 92 
389d0     21 92 21 92 
389d4     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
389d8     21 92 34 92 
389dc     33 92 34 92 
389e0     34 92 47 92 
389e4     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
389e8     46 92 47 92 
389ec     59 92 59 92 
389f0     59 92 59 92 
389f4     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
389f8     6C 92 6C 92 
389fc     6B 92 7E 92 
38a00     7E 92 7E 92 
38a04     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
38a08     92 92 91 92 
38a0c     91 92 90 92 
38a10     91 92 A4 92 
38a14     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
38a18     A3 92 B6 92 
38a1c     B6 92 B7 92 
38a20     B7 92 B6 92 
38a24     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
38a28     CA 92 C9 92 
38a2c     CA 92 DC 92 
38a30     DC 92 DC 92 
38a34     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
38a38     EF 92 EF 92 
38a3c     EF 92 EF 92 
38a40     01 93 01 93 
38a44     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
38a48     15 93 14 93 
38a4c     14 93 14 93 
38a50     14 93 27 93 
38a54     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
38a58     27 93 39 93 
38a5c     3A 93 39 93 
38a60     39 93 39 93 
38a64     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
38a68     4B 93 4C 93 
38a6c     5F 93 5F 93 
38a70     5F 93 5E 93 
38a74     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
38a78     5F 93 84 93 
38a7c     4C 93 96 93 
38a80     5F 93 AE 94 
38a84     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
38a88     7B C1 00 00 
38a8c     00 00 00 00 
38a90     00 00 00 00 
38a94     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38a98     00 00 00 00 | 	byte	$00, $00, $00, $00
38a9c     7A D7 00 80 
38aa0     87 8A 48 8F 
38aa4     EC 8C 76 8D 
38aa8     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
38aac     3C 8D 82 8D 
38ab0     42 8D 88 8D 
38ab4     8C 8D 8E 8D 
38ab8     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
38abc     97 8D DE 8D 
38ac0     E1 8D F1 8E 
38ac4     D8 8C A3 83 
38ac8     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
38acc     65 71 C9 65 
38ad0     FC 64 C4 65 
38ad4     C1 65 BF 65 
38ad8     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
38adc     B6 65 B4 65 
38ae0     B2 65 AE 65 
38ae4     AC 65 ED 65 
38ae8     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
38aec     5E 65 25 66 
38af0     FA 62 23 6B 
38af4     B5 6C 61 0A 
38af8     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
38afc     5D 90 BE 8D 
38b00     47 8E C3 8D 
38b04     09 8E C9 8D 
38b08     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
38b0c     15 8E 19 8E 
38b10     1B 8E 62 8E 
38b14     64 8E 68 8E 
38b18     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
38b1c     B5 8E 4C 90 
38b20     FA 84 3C 9D 
38b24     98 13 79 6D 
38b28     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
38b2c     D9 66 50 66 
38b30     D4 66 4B 66 
38b34     8C 66 46 66 
38b38     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
38b3c     81 66 3A 66 
38b40     7C 66 36 66 
38b44     76 66 30 66 
38b48     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
38b4c     6B 66 88 72 
38b50     BF 37 E7 B7 
38b54     75 83 8B 8E 
38b58     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
38b5c     94 8E 96 8E 
38b60     DD 8E 9C 8E 
38b64     E2 8E A2 8E 
38b68     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
38b6c     EE 8E AE 8E 
38b70     38 8F B5 8E 
38b74     3F 8F FD 8E 
38b78     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
38b7c     A5 87 1E E3 
38b80     6D 5D FA 71 
38b84     41 64 25 67 
38b88     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
38b8c     D9 66 1A 67 
38b90     18 67 15 67 
38b94     12 67 0F 67 
38b98     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
38b9c     07 67 C0 66 
38ba0     01 67 BC 66 
38ba4     B8 66 DE 64 
38ba8     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
38bac     43 E5 1F 8B 
38bb0     14 8A F1 90 
38bb4     1C 8F 63 8F 
38bb8     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
38bbc     29 8F 6E 8F 
38bc0     72 8F 75 8F 
38bc4     34 8F BE 8F 
38bc8     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
38bcc     84 8F 87 8F 
38bd0     CC 8F 56 90 
38bd4     67 91 49 80 
38bd8     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
38bdc     46 77 A6 66 
38be0     E8 66 B0 67 
38be4     AD 67 ED 67 
38be8     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
38bec     A2 67 E3 67 
38bf0     9D 67 9A 67 
38bf4     98 67 94 67 
38bf8     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
38bfc     49 67 CD 67 
38c00     28 65 5F 6E 
38c04     82 67 3A 01 
38c08     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
38c0c     C2 91 A9 8F 
38c10     EF 8F AE 8F 
38c14     F4 8F B5 8F 
38c18     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
38c1c     01 90 03 90 
38c20     07 90 09 90 
38c24     0C 90 53 90 
38c28     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
38c2c     18 90 44 93 
38c30     85 84 D6 9D 
38c34     87 1F 2F 75 
38c38     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
38c3c     C4 68 F6 67 
38c40     BE 68 F1 67 
38c44     76 68 2E 68 
38c48     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
38c4c     27 68 24 68 
38c50     64 68 1E 68 
38c54     5F 68 19 68 
38c58     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
38c5c     DC 68 56 72 
38c60     7E 36 C2 B8 
38c64     D7 84 73 90 
38c68     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
38c6c     7B 90 7F 90 
38c70     82 90 84 90 
38c74     CB 90 8B 90 
38c78     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
38c7c     D7 90 96 90 
38c80     20 91 59 90 
38c84     25 91 A2 90 
38c88     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
38c8c     D0 89 40 EE 
38c90     12 64 C4 71 
38c94     29 66 0C 69 
38c98     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
38c9c     C0 68 02 69 
38ca0     FE 68 FB 68 
38ca4     F9 68 F6 68 
38ca8     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
38cac     EE 68 A8 68 
38cb0     2C 69 5F 68 
38cb4     E2 68 81 66 
38cb8     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
38cbc     1E EB A6 8A 
38cc0     73 8B 5E 93 
38cc4     7B 90 48 91 
38cc8     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
38ccc     0D 91 11 91 
38cd0     14 91 16 91 
38cd4     5C 91 1C 91 
38cd8     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
38cdc     68 91 AF 91 
38ce0     2A 91 B5 91 
38ce4     75 91 1A 94 
38ce8     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
38cec     70 0E CB 6C 
38cf0     5D 6E C4 67 
38cf4     99 69 54 69 
38cf8     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
38cfc     D2 69 49 69 
38d00     89 69 86 69 
38d04     40 69 C4 69 
38d08     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
38d0c     35 69 76 69 
38d10     58 67 EB 6D 
38d14     E9 6D 89 0F 
38d18     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
38d1c     33 94 94 91 
38d20     D9 91 56 91 
38d24     E0 91 9F 91 
38d28     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
38d2c     EC 91 EE 91 
38d30     F1 91 F4 91 
38d34     F7 91 3D 92 
38d38     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
38d3c     46 92 21 94 
38d40     11 89 A4 9D 
38d44     FD 0E 8F 6C 
38d48     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
38d4c     28 6A E1 69 
38d50     65 6A 1F 6A 
38d54     5F 6A 1A 6A 
38d58     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
38d5c     54 6A 0F 6A 
38d60     4F 6A 09 6A 
38d64     06 6A 03 6A 
38d68     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
38d6c     23 68 69 77 
38d70     3A 4D 38 CA 
38d74     38 86 4E 91 
38d78     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
38d7c     64 92 24 92 
38d80     6A 92 2A 92 
38d84     70 92 30 92 
38d88     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
38d8c     7B 92 7E 92 
38d90     C5 92 84 92 
38d94     CB 92 8A 92 
38d98     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
38d9c     4D 8D F9 E2 
38da0     97 59 FE 74 
38da4     DB 68 6D 6A 
38da8     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
38dac     A8 6A A5 6A 
38db0     A3 6A 9F 6A 
38db4     9D 6A 9B 6A 
38db8     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
38dbc     D6 6A 8F 6A 
38dc0     CF 6A 46 6A 
38dc4     CA 6A E1 67 
38dc8     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
38dcc     D3 F7 15 92 
38dd0     90 8C BF 94 
38dd4     A6 92 EB 92 
38dd8     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
38ddc     B1 92 F7 92 
38de0     FA 92 FD 92 
38de4     00 93 02 93 
38de8     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
38dec     4F 93 52 93 
38df0     54 93 22 94 
38df4     5A 93 8F 88 
38df8     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
38dfc     1C 77 07 6C 
38e00     E8 69 7A 6B 
38e04     34 6B 75 6B 
38e08     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
38e0c     29 6B 26 6B 
38e10     24 6B 21 6B 
38e14     1D 6B 5E 6B 
38e18     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
38e1c     12 6B 52 6B 
38e20     34 69 34 6E 
38e24     BA 73 A4 24 
38e28     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
38e2c     7A 94 B3 93 
38e30     72 93 31 93 
38e34     78 93 7A 93 
38e38     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
38e3c     83 93 86 93 
38e40     89 93 D0 93 
38e44     D2 93 D5 93 
38e48     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
38e4c     DD 93 40 96 
38e50     30 8B 99 9C 
38e54     52 10 94 71 
38e58     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
38e5c     46 6C 79 6B 
38e60     40 6C B7 6B 
38e64     F7 6B B1 6B 
38e68     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
38e6c     EC 6B A5 6B 
38e70     A2 6B 9F 6B 
38e74     9D 6B 9A 6B 
38e78     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
38e7c     C8 6A E4 76 
38e80     20 4B F9 CE 
38e84     2E 8A 1A 92 
38e88     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
38e8c     FB 93 BA 93 
38e90     01 94 03 94 
38e94     4A 94 09 94 
38e98     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
38e9c     55 94 14 94 
38ea0     9E 94 1A 94 
38ea4     61 94 20 94 
38ea8     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
38eac     3E 87 E5 CD 
38eb0     5F 50 6C 78 
38eb4     B5 6A 04 6C 
38eb8     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
38ebc     83 6C 7F 6C 
38ec0     7C 6C 36 6C 
38ec4     76 6C 74 6C 
38ec8     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
38ecc     6B 6C 25 6C 
38ed0     66 6C 1F 6C 
38ed4     1D 6C 41 6A 
38ed8     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
38edc     BA FA FC 94 
38ee0     5B 8D 97 96 
38ee4     3B 94 C5 94 
38ee8     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
38eec     89 94 8C 94 
38ef0     8F 94 92 94 
38ef4     94 94 DB 94 
38ef8     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
38efc     E4 94 E7 94 
38f00     2D 95 74 95 
38f04     C8 96 15 89 
38f08     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
38f0c     CB 75 31 6F 
38f10     7E 6B 10 6D 
38f14     C9 6C 0A 6D 
38f18     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
38f1c     BD 6C FF 6C 
38f20     FB 6C F9 6C 
38f24     B2 6C F3 6C 
38f28     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
38f2c     A7 6C E8 6C 
38f30     0D 6B 85 6F 
38f34     C7 74 10 28 
38f38     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
38f3c     96 96 47 95 
38f40     06 95 0A 95 
38f44     0C 95 0F 95 
38f48     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
38f4c     17 95 5E 95 
38f50     61 95 63 95 
38f54     22 95 AC 95 
38f58     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
38f5c     72 95 17 98 
38f60     59 8E 01 96 
38f64     CF FC 5A 68 
38f68     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
38f6c     96 6D 50 6D 
38f70     D5 6D 4A 6D 
38f74     8C 6D 89 6D 
38f78     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
38f7c     80 6D 3A 6D 
38f80     7A 6D 77 6D 
38f84     75 6D 71 6D 
38f88     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
38f8c     18 6C BC 78 
38f90     9A 4F 7E CF 
38f94     1F 89 F1 93 
38f98     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
38f9c     D2 95 4E 95 
38fa0     D7 95 53 95 
38fa4     DD 95 E0 95 
38fa8     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
38fac     A5 95 EB 95 
38fb0     EE 95 F0 95 
38fb4     37 96 B3 95 
38fb8     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
38fbc     1A 98 D5 8D 
38fc0     C5 9F CD 0F 
38fc4     0F 71 F3 73 
38fc8     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
38fcc     D9 6D 5E 6E 
38fd0     D3 6D 58 6E 
38fd4     12 6E 0F 6E 
38fd8     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
38fdc     49 6E BF 6D 
38fe0     87 6E 76 6D 
38fe4     81 6E 11 6B 
38fe8     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
38fec     3F 09 44 95 
38ff0     E5 8D 3F 99 
38ff4     D4 95 A2 96 
38ff8     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
38ffc     23 96 69 96 
39000     6B 96 6E 96 
39004     71 96 74 96 
39008     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
3900c     BF 96 3C 96 
39010     C6 96 C8 96 
39014     A3 98 51 8D 
39018     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
3901c     CF 75 29 73 
39020     90 6C EC 6E 
39024     62 6E E7 6E 
39028     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
3902c     9A 6E 98 6E 
39030     95 6E 91 6E 
39034     8E 6E CF 6E 
39038     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
3903c     40 6E C3 6E 
39040     E8 6C 45 6F 
39044     A5 7B C9 35 
39048     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
3904c     2D 98 23 97 
39050     E1 96 A0 96 
39054     A4 96 EA 96 
39058     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
3905c     AF 96 F4 96 
39060     F8 96 3E 97 
39064     FD 96 43 97 
39068     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
3906c     08 97 6B 99 
39070     D6 92 88 91 
39074     D8 EE 84 66 
39078     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
3907c     2E 6F E7 6E 
39080     6C 6F 24 6F 
39084     21 6F 1F 6F 
39088     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
3908c     17 6F 13 6F 
39090     54 6F 0E 6F 
39094     0B 6F 4B 6F 
39098     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
3909c     27 6D 1C 7B 
390a0     19 59 9F DB 
390a4     66 8E BC 94 
390a8     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
390ac     67 97 26 97 
390b0     6D 97 2B 97 
390b4     72 97 32 97 
390b8     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
390bc     C1 97 7F 97 
390c0     C6 97 85 97 
390c4     CB 97 CE 97 
390c8     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
390cc     EC 8A C4 C6 
390d0     68 4C F4 7D 
390d4     63 6E E8 6E 
390d8     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
390dc     ED 6F A7 6F 
390e0     E7 6F A0 6F 
390e4     E1 6F 9B 6F 
390e8     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
390ec     D5 6F 8F 6F 
390f0     CE 6F 45 6F 
390f4     86 6F 68 6D 
390f8     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
390fc     C0 13 AD A2 
39100     A7 8E 79 99 
39104     E6 97 E8 97 
39108     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
3910c     F1 97 F3 97 
39110     F6 97 F9 97 
39114     FB 97 FE 97 
39118     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
3911c     4A 98 0A 98 
39120     93 98 0F 98 
39124     7F 9B BF 8C 
39128     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
3912c     91 7B 62 73 
39130     1A 6E B9 70 
39134     EB 6F B3 70 
39138     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
3913c     25 70 20 70 
39140     1E 70 1B 70 
39144     18 70 15 70 
39148     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
3914c     0D 70 09 70 
39150     07 70 03 70 
39154     01 70 FD 6F 
39158     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
3915c     F6 6F F2 6F 
39160     EF 6F EC 6F 
39164     2C 70 E6 6F 
39168     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
3916c     DD 6F 97 6F 
39170     D7 6F 84 6E 
39174     8F 6F 3F 7D 
39178     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
3917a     FF FF FF FF 
3917e     FF FF       | atarist_spl file "atarist.spl" '512
39180     00 00 00 00 
39184     00 00 00 00 
39188     00 00       | 	byte	$00[10]
3918a     17 7F F2 7F 
3918e     B2 7F 72 7F 
39192     33 7F F4 7E 
39196     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
3919a     36 7E F5 7D 
3919e     E9 51 F2 0D 
391a2     8E 00 F3 FD 
391a6     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
391aa     57 FD 58 FD 
391ae     5B FD 5C FD 
391b2     5C FD 60 7D 
391b6     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
391ba     D6 7C 98 7C 
391be     59 7C 1A 7C 
391c2     DC 7B 9E 7B 
391c6     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
391ca     F3 05 00 FD 
391ce     41 FB EA FA 
391d2     D9 FA DB FA 
391d6     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
391da     E4 FA 9B 36 
391de     F8 7A C0 7A 
391e2     84 7A 45 7A 
391e6     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
391ea     8E 79 51 79 
391ee     15 79 D7 78 
391f2     3C 1F EB FF 
391f6     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
391fa     6D F8 65 F8 
391fe     68 F8 6D F8 
39202     70 F8 74 F8 
39206     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3920a     AB 60 79 60 
3920e     4B 60 1A 60 
39212     E9 5F B9 5F 
39216     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3921a     FB 59 B2 0B 
3921e     92 FA 3A F7 
39222     96 F6 79 F6 
39226     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3922a     82 F6 86 F6 
3922e     8C F6 DB 5D 
39232     F1 5E C1 5E 
39236     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3923a     34 5E 04 5E 
3923e     D6 5D A6 5D 
39242     78 5D D4 3E 
39246     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3924a     27 F5 BA F4 
3924e     AB F4 AD F4 
39252     B2 F4 B8 F4 
39256     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3925a     26 5D 2B 5D 
3925e     FC 5C CD 5C 
39262     9F 5C 70 5C 
39266     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3926a     E5 5B B8 5B 
3926e     DB 24 A7 FC 
39272     D1 F4 4D F3 
39276     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3927a     04 F3 0B F3 
3927e     11 F3 16 F3 
39282     DE 18 98 5B 
39286     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3928a     4E 4A 29 48 
3928e     A0 47 6A 47 
39292     43 47 20 47 
39296     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3929a     E2 F6 98 F2 
3929e     C5 F1 A3 F1 
392a2     A3 F1 A8 F1 
392a6     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
392aa     BF F1 00 3D 
392ae     EF 46 CD 46 
392b2     AA 46 86 46 
392b6     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
392ba     1C 46 F9 45 
392be     D7 45 EE 43 
392c2     DE 02 E8 F3 
392c6     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
392ca     61 F0 65 F0 
392ce     6D F0 74 F0 
392d2     7C F0 84 F0 
392d6     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
392da     8E 45 6D 45 
392de     49 45 27 45 
392e2     05 45 E1 44 
392e6     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
392ea     F1 2F A9 FB 
392ee     8B F1 9B EF 
392f2     40 EF 36 EF 
392f6     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
392fa     4D EF 56 EF 
392fe     5E EF 7B 44 
39302     8C 44 69 44 
39306     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3930a     03 44 E1 43 
3930e     C0 43 F5 37 
39312     69 33 0F 11 
39316     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3931a     66 EE 37 EE 
3931e     38 EE 40 EE 
39322     48 EE 51 EE 
39326     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3932a     7D 32 6A 32 
3932e     51 32 37 32 
39332     1F 32 05 32 
39336     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3933a     B9 31 A1 31 
3933e     F1 04 F4 F1 
39342     50 EE A0 ED 
39346     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3934a     93 ED 9A ED 
3934e     A4 ED AD ED 
39352     F4 27 C1 31 
39356     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3935a     78 31 5F 31 
3935e     46 31 2E 31 
39362     15 31 FC 30 
39366     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3936a     C4 EF 4A ED 
3936e     DC EC CB EC 
39372     D2 EC DA EC 
39376     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3937a     F9 EC 64 2F 
3937e     0A 31 F1 30 
39382     D9 30 C0 30 
39386     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3938a     78 30 5F 30 
3938e     46 30 38 23 
39392     A6 F6 19 EE 
39396     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3939a     20 EC 28 EC 
3939e     32 EC 3C EC 
393a2     47 EC 51 EC 
393a6     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
393aa     A3 22 93 22 
393ae     7F 22 6E 22 
393b2     5D 22 4C 22 
393b6     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
393ba     77 09 76 F1 
393be     CC EC F0 EB 
393c2     CD EB CE EB 
393c6     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
393ca     ED EB F5 EB 
393ce     3E F6 6B 22 
393d2     5F 22 4E 22 
393d6     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
393da     1B 22 0B 22 
393de     FA 21 E9 21 
393e2     D8 21 4D FF 
393e6     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
393ea     92 EB 7B EB 
393ee     82 EB 8C EB 
393f2     97 EB A1 EB 
393f6     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
393fa     15 22 04 22 
393fe     F3 21 E3 21 
39402     D2 21 C0 21 
39406     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3940a     8E 21 7D 21 
3940e     9A F8 A4 ED 
39412     8E EB 2F EB 
39416     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3941a     37 EB 42 EB 
3941e     4C EB 57 EB 
39422     B2 17 22 19 
39426     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3942a     FD 18 EF 18 
3942e     E3 18 D6 18 
39432     CA 18 BD 18 
39436     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3943a     60 EC 35 EB 
3943e     01 EB 01 EB 
39442     0C EB 16 EB 
39446     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3944a     34 EB D0 18 
3944e     00 19 F4 18 
39452     E8 18 DA 18 
39456     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3945a     B6 18 A9 18 
3945e     9D 18 91 05 
39462     F0 EF CA EB 
39466     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3946a     E8 EA F2 EA 
3946e     FE EA 07 EB 
39472     12 EB C2 EF 
39476     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3947a     D9 18 CD 18 
3947e     C0 18 B3 18 
39482     A7 18 9B 18 
39486     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3948a     B8 FC 30 EE 
3948e     61 EB DC EA 
39492     CD EA D2 EA 
39496     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3949a     F3 EA FE EA 
3949e     D2 09 D1 18 
394a2     C3 18 17 18 
394a6     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
394aa     66 11 52 11 
394ae     49 11 41 11 
394b2     38 11 E0 F4 
394b6     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
394ba     C9 EA C5 EA 
394be     CF EA DB EA 
394c2     E6 EA EF EA 
394c6     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
394ca     89 11 80 11 
394ce     78 11 6E 11 
394d2     67 11 5D 11 
394d6     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
394da     43 11 32 0D 
394de     9C F1 07 EC 
394e2     F8 EA CD EA 
394e6     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
394ea     E4 EA ED EA 
394ee     F8 EA 02 EB 
394f2     55 11 91 11 
394f6     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
394fa     75 11 6E 11 
394fe     64 11 5E 11 
39502     54 11 4A 11 
39506     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3950a     A8 EB F1 EA 
3950e     D9 EA DC EA 
39512     E8 EA F1 EA 
39516     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3951a     A6 EB 9E 11 
3951e     A0 11 96 11 
39522     8D 11 85 11 
39526     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3952a     6A 11 CA 0D 
3952e     36 0B 57 F8 
39532     6C ED 57 EB 
39536     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3953a     F4 EA FF EA 
3953e     09 EB 15 EB 
39542     1E EB 1A FD 
39546     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3954a     ED 0A E8 0A 
3954e     E2 0A DC 0A 
39552     D6 0A D1 0A 
39556     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3955a     F8 F3 BC EC 
3955e     57 EB 1E EB 
39562     18 EB 24 EB 
39566     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3956a     42 EB 4D EB 
3956e     08 09 20 0B 
39572     1A 0B 14 0B 
39576     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3957a     04 0B FE 0A 
3957e     F9 0A F2 0A 
39582     84 08 3A F1 
39586     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3958a     42 EB 42 EB 
3958e     4E EB 57 EB 
39592     62 EB 6B EB 
39596     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3959a     48 0B 43 0B 
3959e     3C 0B 36 0B 
395a2     31 0B 2C 0B 
395a6     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
395aa     1B 0B 5C 00 
395ae     6A EF 1B EC 
395b2     81 EB 6A EB 
395b6     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
395ba     85 EB 8E EB 
395be     99 EB A3 EB 
395c2     DD 05 E5 05 
395c6     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
395ca     DB 05 D8 05 
395ce     D5 05 D1 05 
395d2     D0 05 CB 05 
395d6     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
395da     0C EC BB EB 
395de     B3 EB BB EB 
395e2     C5 EB D0 EB 
395e6     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
395ea     E4 F7 2C 06 
395ee     28 06 24 06 
395f2     22 06 1F 06 
395f6     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
395fa     16 06 14 06 
395fe     0F 06 D0 F3 
39602     65 ED 2D EC 
39606     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
3960a     01 EC 0A EC 
3960e     14 EC 1E EC 
39612     29 EC FB 03 
39616     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
3961a     63 06 60 06 
3961e     5E 06 59 06 
39622     58 06 54 06 
39626     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
3962a     69 F1 21 ED 
3962e     55 EC 33 EC 
39632     36 EC 40 EC 
39636     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3963a     5C EC 68 EC 
3963e     92 02 D9 02 
39642     D7 02 D7 02 
39646     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3964a     D1 02 D1 02 
3964e     CE 02 CD 02 
39652     5D FC 80 EF 
39656     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3965a     83 EC 8A EC 
3965e     93 EC 9C EC 
39662     A5 EC B1 EC 
39666     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3966a     2B 03 2A 03 
3966e     29 03 26 03 
39672     25 03 24 03 
39676     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3967a     1F 03 70 F7 
3967e     D0 EE 27 ED 
39682     DB EC D4 EC 
39686     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3968a     F0 EC FA EC 
3968e     02 ED F9 F4 
39692     7B 03 7C 03 
39696     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3969a     75 03 73 03 
3969e     72 03 70 03 
396a2     6D 03 6C 03 
396a6     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
396aa     54 ED 22 ED 
396ae     22 ED 2C ED 
396b2     35 ED 3F ED 
396b6     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
396ba     14 01 C3 03 
396be     C1 03 C0 03 
396c2     5F 01 A5 00 
396c6     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
396ca     7B 00 7C 00 
396ce     20 00 85 F1 
396d2     2A EE 89 ED 
396d6     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
396da     80 ED 87 ED 
396de     90 ED 9A ED 
396e2     A3 ED 73 00 
396e6     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
396ea     D0 00 D0 00 
396ee     D0 00 D0 00 
396f2     D0 00 CF 00 
396f6     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
396fa     80 F0 3D EE 
396fe     D5 ED C7 ED 
39702     CD ED D6 ED 
39706     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3970a     F2 ED FA ED 
3970e     1D 01 29 01 
39712     27 01 27 01 
39716     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3971a     25 01 26 01 
3971e     26 01 23 01 
39722     D0 F7 EC EF 
39726     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3972a     1C EE 24 EE 
3972e     2D EE 37 EE 
39732     40 EE 47 EE 
39736     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3973a     7D 01 7B 01 
3973e     7A 01 7A 01 
39742     79 01 78 01 
39746     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3974a     84 FE DE F3 
3974e     6C EF 93 EE 
39752     72 EE 72 EE 
39756     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3975a     8B EE 95 EE 
3975e     9E EE 15 FC 
39762     67 FE 67 FE 
39766     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3976a     6B FE 6B FE 
3976e     6D FE 6D FE 
39772     6D FE 6F FE 
39776     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3977a     DF EE CC EE 
3977e     CF EE D9 EE 
39782     E1 EE EA EE 
39786     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3978a     5A FE C4 FE 
3978e     C3 FE C5 FE 
39792     C6 FE C6 FE 
39796     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3979a     C8 FE C7 FE 
3979e     DA FB 85 F1 
397a2     8D EF 31 EF 
397a6     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
397aa     34 EF 3E EF 
397ae     46 EF 4F EF 
397b2     57 EF 0D FF 
397b6     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
397ba     1F FF 1F FF 
397be     21 FF 21 FF 
397c2     21 FF 21 FF 
397c6     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
397ca     15 F1 BE EF 
397ce     84 EF 7E EF 
397d2     88 EF 8F EF 
397d6     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
397da     A9 EF 06 F2 
397de     A6 FC AB FC 
397e2     AD FC AE FC 
397e6     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
397ea     B2 FC B4 FC 
397ee     B6 FC B7 FC 
397f2     8B F4 BD F0 
397f6     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
397fa     E4 EF EE EF 
397fe     F6 EF FD EF 
39802     04 F0 0E F0 
39806     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3980a     0B FD 0D FD 
3980e     0F FD 11 FD 
39812     11 FD 13 FD 
39816     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
3981a     17 FD 64 F3 
3981e     CD F0 52 F0 
39822     41 F0 45 F0 
39826     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
3982a     5B F0 64 F0 
3982e     6D F0 FB FC 
39832     65 FD 68 FD 
39836     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
3983a     6C FD 6D FD 
3983e     6F FD 70 FD 
39842     72 FD B3 FB 
39846     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3984a     A4 F0 99 F0 
3984e     A0 F0 A8 F0 
39852     AE F0 B9 F0 
39856     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3985a     CB FB DD FB 
3985e     DE FB E0 FB 
39862     E3 FB E3 FB 
39866     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3986a     E9 FB EC FB 
3986e     62 F7 27 F2 
39872     2A F1 FF F0 
39876     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3987a     0C F1 13 F1 
3987e     1B F1 23 F1 
39882     33 F2 3C FC 
39886     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3988a     42 FC 45 FC 
3988e     47 FC 48 FC 
39892     4A FC 4C FC 
39896     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3989a     20 F2 77 F1 
3989e     5C F1 5F F1 
398a2     64 F1 6C F1 
398a6     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
398aa     83 F1 DC F8 
398ae     9A FC 9A FC 
398b2     9B FC 9E FC 
398b6     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
398ba     A3 FC A4 FC 
398be     A6 FC A9 FC 
398c2     90 F4 33 F2 
398c6     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
398ca     BA F1 BF F1 
398ce     C7 F1 CE F1 
398d2     D6 F1 DC F1 
398d6     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
398da     F3 FC F5 FC 
398de     FE FB 79 FB 
398e2     62 FB 5F FB 
398e6     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
398ea     6F FA AF F3 
398ee     53 F2 12 F2 
398f2     0F F2 15 F2 
398f6     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
398fa     2A F2 32 F2 
398fe     38 F2 9A FB 
39902     AF FB B1 FB 
39906     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3990a     B7 FB B8 FB 
3990e     BA FB BC FB 
39912     C1 FB 3B F8 
39916     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3991a     6E F2 6C F2 
3991e     74 F2 7A F2 
39922     81 F2 87 F2 
39926     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3992a     06 FC 09 FC 
3992e     0C FC 0E FC 
39932     0F FC 12 FC 
39936     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3993a     17 FC 1A FC 
3993e     B2 F6 7B F3 
39942     DD F2 C5 F2 
39946     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3994a     D4 F2 DB F2 
3994e     E0 F2 E8 F2 
39952     28 F8 60 FC 
39956     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3995a     64 FC 66 FC 
3995e     68 FC 6A FC 
39962     6D FC 52 FC 
39966     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3996a     78 F3 24 F3 
3996e     1A F3 1E F3 
39972     24 F3 2A F3 
39976     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3997a     3D F3 80 FA 
3997e     0C FB 0F FB 
39982     10 FB 14 FB 
39986     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3998a     1B FB 1D FB 
3998e     1F FB 92 FA 
39992     DE F4 AE F3 
39996     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3999a     79 F3 7E F3 
3999e     84 F3 8C F3 
399a2     92 F3 97 F3 
399a6     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
399aa     67 FB 69 FB 
399ae     6B FB 6F FB 
399b2     71 FB 72 FB 
399b6     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
399ba     E3 F8 BA F4 
399be     EE F3 CC F3 
399c2     CA F3 CF F3 
399c6     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
399ca     E2 F3 E8 F3 
399ce     ED F3 B7 FB 
399d2     BC FB BE FB 
399d6     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
399da     C4 FB C6 FB 
399de     C8 FB C9 FB 
399e2     CC FB 8F F7 
399e6     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
399ea     1E F4 1E F4 
399ee     24 F4 2A F4 
399f2     30 F4 38 F4 
399f6     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
399fa     AD FA B1 FA 
399fe     B4 FA B6 FA 
39a02     BA FA BB FA 
39a06     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
39a0a     C2 FA C6 FA 
39a0e     55 F6 C6 F4 
39a12     7D F4 72 F4 
39a16     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
39a1a     83 F4 89 F4 
39a1e     8F F4 94 F4 
39a22     66 FA 03 FB 
39a26     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
39a2a     0A FB 0E FB 
39a2e     10 FB 11 FB 
39a32     16 FB 18 FB 
39a36     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
39a3a     F9 F4 CA F4 
39a3e     C5 F4 CB F4 
39a42     D1 F4 D7 F4 
39a46     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
39a4a     E8 F4 3F FB 
39a4e     56 FB 58 FB 
39a52     5A FB 5E FB 
39a56     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
39a5a     64 FB 64 FB 
39a5e     69 FB 99 F9 
39a62     E9 F5 33 F5 
39a66     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
39a6a     1D F5 22 F5 
39a6e     27 F5 2E F5 
39a72     32 F5 37 F5 
39a76     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
39a7a     BC FA BC FA 
39a7e     C1 FA C2 FA 
39a82     C4 FA C8 FA 
39a86     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
39a8a     F9 F7 DB F5 
39a8e     78 F5 69 F5 
39a92     6A F5 70 F5 
39a96     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
39a9a     7F F5 85 F5 
39a9e     6E F7 06 FB 
39aa2     0A FB 0B FB 
39aa6     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
39aaa     14 FB 15 FB 
39aae     18 FB 1B FB 
39ab2     1D FB 70 F7 
39ab6     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
39aba     B6 F5 BB F5 
39abe     C0 F5 C6 F5 
39ac2     CA F5 CF F5 
39ac6     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
39aca     54 FB 56 FB 
39ace     5A FB 5B FB 
39ad2     5E FB 5F FB 
39ad6     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
39ada     67 FB 52 FB 
39ade     29 F7 33 F6 
39ae2     06 F6 02 F6 
39ae6     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
39aea     10 F6 16 F6 
39aee     1A F6 1F F6 
39af2     81 FB 9F FB 
39af6     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
39afa     51 FB F2 FA 
39afe     E3 FA E3 FA 
39b02     E5 FA E9 FA 
39b06     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
39b0a     64 F6 4D F6 
39b0e     4D F6 53 F6 
39b12     57 F6 5C F6 
39b16     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
39b1a     6A F6 19 FB 
39b1e     1E FB 22 FB 
39b22     23 FB 24 FB 
39b26     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
39b2a     2C FB 2E FB 
39b2e     32 FB F0 F8 
39b32     01 F7 A5 F6 
39b36     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
39b3a     9F F6 A3 F6 
39b3e     A6 F6 AC F6 
39b42     B0 F6 EB F7 
39b46     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
39b4a     68 FB 6C FB 
39b4e     6E FB 71 FB 
39b52     72 FB 74 FB 
39b56     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
39b5a     71 F8 21 F7 
39b5e     E5 F6 DD F6 
39b62     E1 F6 E6 F6 
39b66     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
39b6a     F5 F6 F7 F6 
39b6e     F7 FA AB FB 
39b72     AD FB AF FB 
39b76     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
39b7a     B6 FB B9 FB 
39b7e     BB FB BC FB 
39b82     21 FB 07 F8 
39b86     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
39b8a     22 F7 26 F7 
39b8e     2B F7 2E F7 
39b92     34 F7 38 F7 
39b96     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
39b9a     13 FB 16 FB 
39b9e     17 FB 1B FB 
39ba2     1E FB 20 FB 
39ba6     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
39baa     26 FB 77 FA 
39bae     F3 F7 7C F7 
39bb2     67 F7 6A F7 
39bb6     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
39bba     74 F7 7A F7 
39bbe     7E F7 82 F7 
39bc2     53 FB 5A FB 
39bc6     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
39bca     5F FB 63 FB 
39bce     65 FB 67 FB 
39bd2     69 FB 6A FB 
39bd6     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
39bda     B5 F7 A9 F7 
39bde     AD F7 B0 F7 
39be2     B5 F7 B8 F7 
39be6     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
39bea     6E F8 99 FB 
39bee     9C FB 9D FB 
39bf2     9F FB A4 FB 
39bf6     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
39bfa     A9 FB AB FB 
39bfe     AD FB 46 F9 
39c02     26 F8 F0 F7 
39c06     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
39c0a     F4 F7 F8 F7 
39c0e     FB F7 FF F7 
39c12     03 F8 65 FA 
39c16     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
39c1a     2B FB 2F FB 
39c1e     30 FB 32 FB 
39c22     34 FB 38 FB 
39c26     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
39c2a     E9 F8 4A F8 
39c2e     2E F8 2C F8 
39c32     2F F8 36 F8 
39c36     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
39c3a     41 F8 44 F8 
39c3e     4A FB 67 FB 
39c42     68 FB 6B FB 
39c46     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
39c4a     73 FB 74 FB 
39c4e     78 FB 7A FB 
39c52     14 FB E7 F8 
39c56     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
39c5a     6D F8 70 F8 
39c5e     73 F8 78 F8 
39c62     7C F8 80 F8 
39c66     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
39c6a     A6 FB A7 FB 
39c6e     A9 FB AC FB 
39c72     AF FB B1 FB 
39c76     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
39c7a     B7 FB 73 FA 
39c7e     F8 F8 B4 F8 
39c82     A9 F8 AB F8 
39c86     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
39c8a     B4 F8 B8 F8 
39c8e     BB F8 FA F8 
39c92     64 FB 65 FB 
39c96     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
39c9a     6D FB 6F FB 
39c9e     70 FB 74 FB 
39ca2     77 FB 77 FB 
39ca6     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
39caa     E9 F8 E4 F8 
39cae     E8 F8 EB F8 
39cb2     EE F8 F2 F8 
39cb6     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
39cba     B5 FA 9F FB 
39cbe     A1 FB A4 FB 
39cc2     A5 FB A9 FB 
39cc6     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
39cca     AE FB B1 FB 
39cce     B2 FB C7 F9 
39cd2     39 F9 22 F9 
39cd6     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
39cda     26 F9 2A F9 
39cde     2E F9 32 F9 
39ce2     33 F9 BA FB 
39ce6     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
39cea     DE FB E1 FB 
39cee     E2 FB E4 FB 
39cf2     E5 FB E7 FB 
39cf6     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
39cfa     C5 F9 67 F9 
39cfe     57 F9 56 F9 
39d02     5B F9 5F F9 
39d06     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
39d0a     68 F9 6C F9 
39d0e     0B FC 11 FC 
39d12     14 FC 15 FC 
39d16     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
39d1a     B5 FB B5 FB 
39d1e     B6 FB B8 FB 
39d22     E9 FA C8 F9 
39d26     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
39d2a     90 F9 94 F9 
39d2e     95 F9 99 F9 
39d32     9D F9 9F F9 
39d36     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
39d3a     DE FB DF FB 
39d3e     E2 FB E4 FB 
39d42     E6 FB E8 FB 
39d46     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
39d4a     EF FB AC FA 
39d4e     E9 F9 C7 F9 
39d52     C3 F9 C8 F9 
39d56     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
39d5a     D0 F9 D4 F9 
39d5e     D6 F9 0E FB 
39d62     11 FC 13 FC 
39d66     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
39d6a     19 FC 1B FC 
39d6e     1D FC 1E FC 
39d72     21 FC 22 FC 
39d76     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
39d7a     F7 F9 F7 F9 
39d7e     FB F9 FE F9 
39d82     00 FA 03 FA 
39d86     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
39d8a     1B FC 45 FC 
39d8e     46 FC 48 FC 
39d92     4A FC 4B FC 
39d96     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
39d9a     52 FC 54 FC 
39d9e     F3 FB 82 FA 
39da2     35 FA 28 FA 
39da6     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
39daa     31 FA 32 FA 
39dae     37 FA 37 FA 
39db2     3C FA 00 FC 
39db6     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
39dba     09 FC 0B FC 
39dbe     0F FC 12 FC 
39dc2     12 FC 15 FC 
39dc6     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
39dca     8D FA 60 FA 
39dce     5B FA 5C FA 
39dd2     60 FA 61 FA 
39dd6     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
39dda     6C FA 6D FA 
39dde     37 FC 3A FC 
39de2     3B FC 3D FC 
39de6     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
39dea     43 FC 44 FC 
39dee     45 FC 47 FC 
39df2     51 FB AB FA 
39df6     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
39dfa     8E FA 91 FA 
39dfe     93 FA 95 FA 
39e02     98 FA 9B FA 
39e06     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
39e0a     68 FC 6A FC 
39e0e     6C FC 6E FC 
39e12     70 FC 72 FC 
39e16     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
39e1a     76 FC 3B FB 
39e1e     D0 FA BB FA 
39e22     B9 FA BD FA 
39e26     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
39e2a     C4 FA C6 FA 
39e2e     CA FA 13 FC 
39e32     3A FC 3A FC 
39e36     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
39e3a     41 FC 43 FC 
39e3e     44 FC 47 FC 
39e42     48 FC 3C FC 
39e46     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
39e4a     E6 FA E8 FA 
39e4e     EB FA EE FA 
39e52     F0 FA F2 FA 
39e56     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
39e5a     61 FC 66 FC 
39e5e     68 FC 6B FC 
39e62     6C FC 6E FC 
39e66     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
39e6a     73 FC 75 FC 
39e6e     13 FC 3F FB 
39e72     17 FB 12 FB 
39e76     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
39e7a     1A FB 1D FB 
39e7e     1F FB 20 FB 
39e82     23 FB 92 FC 
39e86     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
39e8a     96 FC 97 FC 
39e8e     9A FC 9C FC 
39e92     9E FC 9F FC 
39e96     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
39e9a     5A FB 41 FB 
39e9e     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
39ea2     73 32 00 04 
39ea6     00 00 10 00 
39eaa     00 00 00 00 
39eae     00 00 00 00 | atari2 file "atari2.s2"
39eb2     43 87 43 87 
39eb6     43 87 44 87 
39eba     43 87 44 87 
39ebe     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39ec2     43 87 43 87 
39ec6     43 87 44 87 
39eca     43 87 43 87 
39ece     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39ed2     44 87 43 87 
39ed6     44 87 43 87 
39eda     43 87 43 87 
39ede     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39ee2     43 87 43 87 
39ee6     44 87 43 87 
39eea     44 87 44 87 
39eee     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
39ef2     43 87 43 87 
39ef6     44 87 43 87 
39efa     43 87 42 87 
39efe     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39f02     43 87 43 87 
39f06     43 87 43 87 
39f0a     44 87 43 87 
39f0e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39f12     44 87 44 87 
39f16     43 87 44 87 
39f1a     43 87 44 87 
39f1e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
39f22     44 87 43 87 
39f26     44 87 44 87 
39f2a     43 87 43 87 
39f2e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39f32     43 87 44 87 
39f36     44 87 43 87 
39f3a     43 87 44 87 
39f3e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39f42     43 87 43 87 
39f46     43 87 43 87 
39f4a     43 87 43 87 
39f4e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
39f52     42 87 43 87 
39f56     44 87 42 87 
39f5a     43 87 43 87 
39f5e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
39f62     43 87 44 87 
39f66     44 87 43 87 
39f6a     43 87 43 87 
39f6e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39f72     43 87 5C 87 
39f76     EE 86 AC 87 
39f7a     4C 7C A3 78 
39f7e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
39f82     BC 78 BB 78 
39f86     BD 78 BC 78 
39f8a     BB 78 BD 78 
39f8e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
39f92     BB 78 BB 78 
39f96     BC 78 BC 78 
39f9a     BC 78 BB 78 
39f9e     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39fa2     BC 78 BC 78 
39fa6     BC 78 BC 78 
39faa     BC 78 BC 78 
39fae     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39fb2     BB 78 BC 78 
39fb6     A0 78 4C 7C 
39fba     11 7A 29 89 
39fbe     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
39fc2     44 87 43 87 
39fc6     44 87 43 87 
39fca     43 87 42 87 
39fce     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39fd2     43 87 43 87 
39fd6     44 87 ED 85 
39fda     71 85 52 79 
39fde     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
39fe2     BC 78 BC 78 
39fe6     BC 78 BC 78 
39fea     BC 78 BC 78 
39fee     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39ff2     BC 78 BC 78 
39ff6     BC 78 A0 78 
39ffa     CF 7A B9 81 
39ffe     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3a002     44 87 43 87 
3a006     43 87 44 87 
3a00a     43 87 44 87 
3a00e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a012     43 87 43 87 
3a016     43 87 43 87 
3a01a     44 87 43 87 
3a01e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3a022     43 87 43 87 
3a026     44 87 43 87 
3a02a     44 87 43 87 
3a02e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3a032     44 87 43 87 
3a036     43 87 43 87 
3a03a     5A 87 39 81 
3a03e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3a042     A5 78 BC 78 
3a046     BB 78 BC 78 
3a04a     BB 78 BC 78 
3a04e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3a052     BC 78 BC 78 
3a056     BC 78 BC 78 
3a05a     BC 78 8F 79 
3a05e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3a062     09 85 47 87 
3a066     43 87 43 87 
3a06a     42 87 42 87 
3a06e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3a072     43 87 43 87 
3a076     43 87 43 87 
3a07a     43 87 44 87 
3a07e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a082     43 87 43 87 
3a086     44 87 43 87 
3a08a     42 87 43 87 
3a08e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3a092     44 87 43 87 
3a096     43 87 43 87 
3a09a     44 87 44 87 
3a09e     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3a0a2     94 78 55 7A 
3a0a6     B9 78 BC 78 
3a0aa     BC 78 BC 78 
3a0ae     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3a0b2     BC 78 BB 78 
3a0b6     BC 78 BC 78 
3a0ba     BC 78 BC 78 
3a0be     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a0c2     BB 78 BC 78 
3a0c6     BC 78 BC 78 
3a0ca     BB 78 BC 78 
3a0ce     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a0d2     BC 78 BC 78 
3a0d6     BD 78 BC 78 
3a0da     BC 78 BB 78 
3a0de     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3a0e2     94 78 B3 84 
3a0e6     36 84 4A 87 
3a0ea     43 87 43 87 
3a0ee     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3a0f2     43 87 44 87 
3a0f6     43 87 43 87 
3a0fa     43 87 43 87 
3a0fe     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3a102     43 87 44 87 
3a106     43 87 44 87 
3a10a     43 87 43 87 
3a10e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3a112     43 87 43 87 
3a116     43 87 45 87 
3a11a     43 87 43 87 
3a11e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3a122     43 87 44 87 
3a126     44 87 44 87 
3a12a     43 87 43 87 
3a12e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3a132     43 87 42 87 
3a136     43 87 43 87 
3a13a     44 87 43 87 
3a13e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3a142     54 87 3C 82 
3a146     36 83 52 79 
3a14a     C6 78 BC 78 
3a14e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3a152     BB 78 BB 78 
3a156     BC 78 BC 78 
3a15a     BC 78 BC 78 
3a15e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a162     BD 78 ED 78 
3a166     1B 79 F4 83 
3a16a     4D 83 4E 87 
3a16e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3a172     44 87 43 87 
3a176     42 87 44 87 
3a17a     43 87 42 87 
3a17e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3a182     43 87 54 87 
3a186     26 82 B3 84 
3a18a     D6 77 BB 78 
3a18e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3a192     BC 78 BB 78 
3a196     BB 78 BB 78 
3a19a     BB 78 BB 78 
3a19e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3a1a2     BC 78 BC 78 
3a1a6     26 79 18 75 
3a1aa     36 83 1F 84 
3a1ae     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3a1b2     43 87 43 87 
3a1b6     43 87 43 87 
3a1ba     43 87 44 87 
3a1be     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a1c2     43 87 44 87 
3a1c6     44 87 43 87 
3a1ca     43 87 43 87 
3a1ce     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3a1d2     43 87 43 87 
3a1d6     43 87 43 87 
3a1da     44 87 44 87 
3a1de     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3a1e2     44 87 43 87 
3a1e6     43 87 43 87 
3a1ea     43 87 44 87 
3a1ee     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3a1f2     44 87 44 87 
3a1f6     44 87 43 87 
3a1fa     44 87 43 87 
3a1fe     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a202     43 87 43 87 
3a206     43 87 44 87 
3a20a     44 87 43 87 
3a20e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a212     43 87 43 87 
3a216     43 87 43 87 
3a21a     43 87 44 87 
3a21e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a222     43 87 44 87 
3a226     43 87 44 87 
3a22a     19 87 7D 86 
3a22e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3a232     B1 78 BC 78 
3a236     BC 78 BC 78 
3a23a     BC 78 BC 78 
3a23e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3a242     BC 78 BC 78 
3a246     BD 78 BC 78 
3a24a     B7 78 3B 7B 
3a24e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3a252     96 86 44 87 
3a256     43 87 43 87 
3a25a     43 87 43 87 
3a25e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3a262     44 87 44 87 
3a266     43 87 44 87 
3a26a     43 87 44 87 
3a26e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3a272     43 87 44 87 
3a276     43 87 44 87 
3a27a     43 87 44 87 
3a27e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a282     43 87 44 87 
3a286     43 87 43 87 
3a28a     44 87 43 87 
3a28e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a292     44 87 44 87 
3a296     43 87 43 87 
3a29a     43 87 44 87 
3a29e     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a2a2     43 87 43 87 
3a2a6     43 87 43 87 
3a2aa     44 87 44 87 
3a2ae     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3a2b2     36 83 CF 7A 
3a2b6     AB 78 BB 78 
3a2ba     BC 78 BC 78 
3a2be     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3a2c2     BB 78 BC 78 
3a2c6     BC 78 BC 78 
3a2ca     BC 78 BC 78 
3a2ce     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3a2d2     BC 78 BC 78 
3a2d6     BC 78 BB 78 
3a2da     BC 78 BC 78 
3a2de     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3a2e2     BB 78 BC 78 
3a2e6     BB 78 BC 78 
3a2ea     BC 78 BD 78 
3a2ee     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3a2f2     BC 78 BC 78 
3a2f6     BC 78 BC 78 
3a2fa     BC 78 BD 78 
3a2fe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3a302     BC 78 BB 78 
3a306     BC 78 BB 78 
3a30a     BB 78 BC 78 
3a30e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3a312     BC 78 BC 78 
3a316     BC 78 BC 78 
3a31a     BC 78 BB 78 
3a31e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3a322     BC 78 BC 78 
3a326     BC 78 BD 78 
3a32a     BB 78 BC 78 
3a32e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3a332     BC 78 BC 78 
3a336     BC 78 BB 78 
3a33a     BC 78 BB 78 
3a33e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3a342     BB 78 BC 78 
3a346     BC 78 BC 78 
3a34a     BC 78 BB 78 
3a34e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a352     BC 78 BC 78 
3a356     BC 78 BB 78 
3a35a     BC 78 BB 78 
3a35e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a362     BC 78 BC 78 
3a366     BC 78 BC 78 
3a36a     BB 78 BC 78 
3a36e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3a372     BC 78 9F 78 
3a376     52 79 B3 84 
3a37a     2F 86 60 87 
3a37e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3a382     44 87 43 87 
3a386     43 87 43 87 
3a38a     43 87 43 87 
3a38e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3a392     43 87 43 87 
3a396     43 87 44 87 
3a39a     43 87 43 87 
3a39e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3a3a2     43 87 43 87 
3a3a6     43 87 43 87 
3a3aa     43 87 44 87 
3a3ae     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3a3b2     44 87 44 87 
3a3b6     5E 87 BC 80 
3a3ba     FB 80 94 78 
3a3be     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3a3c2     BD 78 BC 78 
3a3c6     BB 78 BC 78 
3a3ca     BB 78 BB 78 
3a3ce     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3a3d2     BC 78 BB 78 
3a3d6     BB 78 6B 79 
3a3da     D6 77 AC 87 
3a3de     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3a3e2     43 87 44 87 
3a3e6     43 87 43 87 
3a3ea     44 87 43 87 
3a3ee     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3a3f2     43 87 44 87 
3a3f6     43 87 5C 87 
3a3fa     E7 80 00 80 
3a3fe     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3a402     BC 78 BD 78 
3a406     BC 78 BC 78 
3a40a     BC 78 BB 78 
3a40e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a412     BC 78 BC 78 
3a416     BB 78 BC 78 
3a41a     BB 78 BC 78 
3a41e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a422     BB 78 BC 78 
3a426     BC 78 BC 78 
3a42a     BC 78 BC 78 
3a42e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a432     BC 78 BC 78 
3a436     BC 78 BC 78 
3a43a     A0 78 8D 7B 
3a43e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
3a442     60 87 43 87 
3a446     44 87 44 87 
3a44a     43 87 43 87 
3a44e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3a452     44 87 43 87 
3a456     43 87 43 87 
3a45a     44 87 73 86 
3a45e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3a462     51 7B B6 78 
3a466     BC 78 BD 78 
3a46a     BC 78 BC 78 
3a46e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a472     BB 78 BC 78 
3a476     BD 78 BB 78 
3a47a     BC 78 BB 78 
3a47e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3a482     BC 78 BC 78 
3a486     BC 78 BC 78 
3a48a     BB 78 BC 78 
3a48e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a492     BC 78 BB 78 
3a496     BB 78 BC 78 
3a49a     BC 78 BB 78 
3a49e     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3a4a2     22 8C AF 84 
3a4a6     48 87 43 87 
3a4aa     44 87 43 87 
3a4ae     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3a4b2     43 87 42 87 
3a4b6     43 87 43 87 
3a4ba     44 87 43 87 
3a4be     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a4c2     43 87 43 87 
3a4c6     44 87 44 87 
3a4ca     43 87 43 87 
3a4ce     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3a4d2     43 87 43 87 
3a4d6     43 87 43 87 
3a4da     44 87 43 87 
3a4de     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3a4e2     9F 8B D6 77 
3a4e6     16 7C B3 78 
3a4ea     BC 78 BB 78 
3a4ee     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3a4f2     BB 78 BC 78 
3a4f6     BB 78 BC 78 
3a4fa     BC 78 BC 78 
3a4fe     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a502     BC 78 BB 78 
3a506     BB 78 BC 78 
3a50a     BB 78 BC 78 
3a50e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3a512     BB 78 BB 78 
3a516     BC 78 BC 78 
3a51a     BC 78 BB 78 
3a51e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3a522     BC 78 BC 78 
3a526     BC 78 BD 78 
3a52a     BB 78 BC 78 
3a52e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3a532     BC 78 BC 78 
3a536     BC 78 BB 78 
3a53a     BC 78 BC 78 
3a53e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a542     A8 78 54 7E 
3a546     F4 83 17 82 
3a54a     50 87 43 87 
3a54e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3a552     44 87 43 87 
3a556     44 87 43 87 
3a55a     43 87 44 87 
3a55e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3a562     43 87 28 87 
3a566     20 85 CF 7A 
3a56a     70 7D AD 78 
3a56e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3a572     BB 78 BC 78 
3a576     BC 78 BC 78 
3a57a     BB 78 BB 78 
3a57e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3a582     BB 78 B2 78 
3a586     9A 7C CF 7A 
3a58a     4A 87 0D 87 
3a58e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3a592     43 87 44 87 
3a596     43 87 44 87 
3a59a     43 87 43 87 
3a59e     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3a5a2     44 87 43 87 
3a5a6     28 87 51 85 
3a5aa     11 7A 1E 7D 
3a5ae     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3a5b2     BC 78 BB 78 
3a5b6     BC 78 BC 78 
3a5ba     BC 78 BC 78 
3a5be     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a5c2     BB 78 BC 78 
3a5c6     BB 78 BC 78 
3a5ca     BC 78 BC 78 
3a5ce     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a5d2     BB 78 BC 78 
3a5d6     BC 78 BC 78 
3a5da     BD 78 BB 78 
3a5de     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3a5e2     BC 78 BB 78 
3a5e6     BC 78 BC 78 
3a5ea     BC 78 BB 78 
3a5ee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a5f2     BC 78 BC 78 
3a5f6     BC 78 BC 78 
3a5fa     BB 78 BC 78 
3a5fe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a602     BC 78 BD 78 
3a606     BC 78 BC 78 
3a60a     BC 78 BB 78 
3a60e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a612     BC 78 BB 78 
3a616     BB 78 BC 78 
3a61a     BC 78 BB 78 
3a61e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a622     BB 78 BB 78 
3a626     BB 78 BC 78 
3a62a     B6 78 48 7D 
3a62e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3a632     56 87 43 87 
3a636     42 87 44 87 
3a63a     44 87 43 87 
3a63e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a642     43 87 44 87 
3a646     43 87 44 87 
3a64a     4C 87 7E 83 
3a64e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3a652     F7 78 BC 78 
3a656     BC 78 BB 78 
3a65a     BB 78 BC 78 
3a65e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a662     BC 78 BB 78 
3a666     BC 78 BC 78 
3a66a     BB 78 BC 78 
3a66e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3a672     BB 78 BC 78 
3a676     BC 78 BC 78 
3a67a     BC 78 BB 78 
3a67e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a682     BC 78 BC 78 
3a686     BC 78 BC 78 
3a68a     BC 78 BB 78 
3a68e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a692     BC 78 BB 78 
3a696     BB 78 BC 78 
3a69a     BC 78 BB 78 
3a69e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a6a2     BC 78 BC 78 
3a6a6     BB 78 BC 78 
3a6aa     BC 78 BC 78 
3a6ae     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3a6b2     73 32 00 04 
3a6b6     00 00 10 00 
3a6ba     00 00 00 00 
3a6be     00 00 00 00 | atari12 file "atari12.s2"
3a6c2     00 6D 00 6D 
3a6c6     00 6D 00 6D 
3a6ca     00 6D 00 6D 
3a6ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6d2     00 6D 00 6D 
3a6d6     00 6D 00 6D 
3a6da     00 6D 00 6D 
3a6de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6e2     00 6D 00 6D 
3a6e6     00 6D 00 6D 
3a6ea     00 6D 00 6D 
3a6ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6f2     00 6D 00 6D 
3a6f6     00 6D 00 6D 
3a6fa     00 6D 00 6D 
3a6fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a702     00 6D 00 6D 
3a706     00 6D 00 6D 
3a70a     00 6D 00 6D 
3a70e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3a712     00 6C 00 6C 
3a716     00 6C 00 6C 
3a71a     00 6C 00 6C 
3a71e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a722     00 6C 00 6C 
3a726     00 6C 00 6C 
3a72a     00 6C 00 6C 
3a72e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a732     00 6C 00 6C 
3a736     00 6C 00 6C 
3a73a     00 6C 00 6C 
3a73e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a742     00 6C 00 6C 
3a746     00 6C 00 6C 
3a74a     00 6C 00 6C 
3a74e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a752     00 6C 00 6C 
3a756     00 6C 00 6C 
3a75a     00 6C 00 6C 
3a75e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a762     00 6C 00 6C 
3a766     00 6C 00 6C 
3a76a     00 6C 00 6C 
3a76e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a772     00 6C 00 6C 
3a776     00 6C 00 6C 
3a77a     00 6C 00 6C 
3a77e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a782     00 6C 00 6C 
3a786     00 6C 00 6C 
3a78a     00 6C 00 6C 
3a78e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a792     00 6C 00 6C 
3a796     00 6C 00 6C 
3a79a     00 6C 00 6C 
3a79e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a7a2     00 6C 00 6C 
3a7a6     00 6C 00 6C 
3a7aa     00 6C 00 6C 
3a7ae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a7b2     00 6C 00 6C 
3a7b6     00 6C 00 6C 
3a7ba     00 6C 00 6C 
3a7be     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a7c2     00 6C 00 6B 
3a7c6     00 6B 00 6B 
3a7ca     00 6B 00 6B 
3a7ce     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a7d2     00 6B 00 6B 
3a7d6     00 6B 00 6B 
3a7da     00 6B 00 6B 
3a7de     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a7e2     00 6B 00 6B 
3a7e6     00 6B 00 6B 
3a7ea     00 6B 00 6B 
3a7ee     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a7f2     00 6B 00 6B 
3a7f6     00 6B 00 6B 
3a7fa     00 6B 00 6B 
3a7fe     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a802     00 6B 00 6B 
3a806     00 6B 00 6B 
3a80a     00 6B 00 6B 
3a80e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a812     00 6B 00 6B 
3a816     00 6B 00 6B 
3a81a     00 6B 00 6B 
3a81e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a822     00 6B 00 6B 
3a826     00 6B 00 6B 
3a82a     00 6B 00 6B 
3a82e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a832     00 6B 00 6B 
3a836     00 6B 00 6B 
3a83a     00 6B 00 6B 
3a83e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a842     00 6B 00 6B 
3a846     00 6B 00 6B 
3a84a     00 6B 00 6B 
3a84e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a852     00 6B 00 6B 
3a856     00 6B 00 6B 
3a85a     00 6A 00 9D 
3a85e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3a862     00 9E 00 9E 
3a866     00 9E 00 9E 
3a86a     00 9E 00 9E 
3a86e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a872     00 9E 00 9E 
3a876     00 9E 00 9E 
3a87a     00 9E 00 9E 
3a87e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a882     00 9E 00 9E 
3a886     00 9E 00 9E 
3a88a     00 9E 00 9E 
3a88e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a892     00 9E 00 9E 
3a896     00 9E 00 9E 
3a89a     00 9E 00 9E 
3a89e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a8a2     00 9E 00 9E 
3a8a6     00 9E 00 9E 
3a8aa     00 9E 00 9E 
3a8ae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a8b2     00 9E 00 9E 
3a8b6     00 9E 00 9E 
3a8ba     00 9E 00 9E 
3a8be     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a8c2     00 9E 00 9E 
3a8c6     00 9E 00 9E 
3a8ca     00 9E 00 9E 
3a8ce     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a8d2     00 9E 00 9E 
3a8d6     00 9E 00 9E 
3a8da     00 9E 00 9E 
3a8de     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a8e2     00 9E 00 9E 
3a8e6     00 9E 00 9E 
3a8ea     00 9E 00 9E 
3a8ee     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3a8f2     00 9F 00 9F 
3a8f6     00 9F 00 9F 
3a8fa     00 9F 00 9F 
3a8fe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a902     00 9F 00 9F 
3a906     00 9F 00 9F 
3a90a     00 9F 00 9F 
3a90e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a912     00 9F 00 9F 
3a916     00 9F 00 9F 
3a91a     00 9F 00 9F 
3a91e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a922     00 9F 00 9F 
3a926     00 9F 00 9F 
3a92a     00 9F 00 9F 
3a92e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a932     00 9F 00 9F 
3a936     00 9F 00 9F 
3a93a     00 9F 00 9F 
3a93e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a942     00 9F 00 9F 
3a946     00 9F 00 9F 
3a94a     00 9F 00 9F 
3a94e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a952     00 9F 00 9F 
3a956     00 9F 00 9F 
3a95a     00 9F 00 9F 
3a95e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a962     00 9F 00 9F 
3a966     00 9F 00 9F 
3a96a     00 9F 00 9F 
3a96e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a972     00 9F 00 9F 
3a976     00 9F 00 9F 
3a97a     00 9F 00 9F 
3a97e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a982     00 9F 00 9F 
3a986     00 9F 00 9F 
3a98a     00 9F 00 9F 
3a98e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a992     00 9F 00 9F 
3a996     00 9F 00 9F 
3a99a     00 9F 00 9F 
3a99e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a9a2     00 9F 00 9F 
3a9a6     00 9F 00 9F 
3a9aa     00 9F 00 9F 
3a9ae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a9b2     00 9F 00 9F 
3a9b6     00 9F 00 A0 
3a9ba     00 A0 00 A0 
3a9be     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a9c2     00 A0 00 A0 
3a9c6     00 A0 00 A0 
3a9ca     00 A0 00 A0 
3a9ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a9d2     00 A0 00 A0 
3a9d6     00 A0 00 A0 
3a9da     00 A0 00 A0 
3a9de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a9e2     00 A0 00 A0 
3a9e6     00 A0 00 A0 
3a9ea     00 A0 00 A0 
3a9ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a9f2     00 A0 00 A0 
3a9f6     00 A0 00 A0 
3a9fa     00 A0 00 A0 
3a9fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa02     00 A0 00 A0 
3aa06     00 A0 00 A0 
3aa0a     00 A0 00 A0 
3aa0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa12     00 A0 00 A0 
3aa16     00 A0 00 A0 
3aa1a     00 A0 00 A0 
3aa1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa22     00 A0 00 A0 
3aa26     00 A0 00 A0 
3aa2a     00 A0 00 A0 
3aa2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa32     00 A0 00 A0 
3aa36     00 A0 00 A0 
3aa3a     00 A0 00 A0 
3aa3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa42     00 A0 00 A0 
3aa46     00 A0 00 A0 
3aa4a     00 A0 00 A0 
3aa4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa52     00 A0 00 A0 
3aa56     00 A0 00 A0 
3aa5a     00 A0 00 A0 
3aa5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa62     00 A0 00 A0 
3aa66     00 A0 00 A0 
3aa6a     00 A0 00 A0 
3aa6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa72     00 A0 00 A0 
3aa76     00 A0 00 A0 
3aa7a     00 A0 00 A0 
3aa7e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3aa82     00 6D 00 6D 
3aa86     00 6D 00 6D 
3aa8a     00 6D 00 6D 
3aa8e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3aa92     00 6D 00 6D 
3aa96     00 6D 00 6D 
3aa9a     00 6D 00 6D 
3aa9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3aaa2     00 6D 00 6D 
3aaa6     00 6D 00 6D 
3aaaa     00 6D 00 6D 
3aaae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3aab2     00 6D 00 6D 
3aab6     00 6D 00 6D 
3aaba     00 6D 00 6D 
3aabe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3aac2     00 6D 00 6D 
3aac6     00 6D 00 6D 
3aaca     00 6D 00 6D 
3aace     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3aad2     00 6D 00 6D 
3aad6     00 6D 00 6D 
3aada     00 6D 00 6D 
3aade     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3aae2     00 6D 00 6D 
3aae6     00 6D 00 6D 
3aaea     00 6D 00 6D 
3aaee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3aaf2     00 6D 00 6D 
3aaf6     00 6D 00 6D 
3aafa     00 6D 00 6D 
3aafe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ab02     00 6D 00 6D 
3ab06     00 A0 00 A0 
3ab0a     00 A0 00 A0 
3ab0e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ab12     00 A0 00 A0 
3ab16     00 A0 00 A0 
3ab1a     00 A0 00 A0 
3ab1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ab22     00 A0 00 A0 
3ab26     00 A0 00 A0 
3ab2a     00 A0 00 A0 
3ab2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ab32     00 A0 00 A0 
3ab36     00 A0 00 A0 
3ab3a     00 A0 00 A0 
3ab3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ab42     00 A0 00 A0 
3ab46     00 A0 00 A0 
3ab4a     00 A0 00 A0 
3ab4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ab52     00 A0 00 A0 
3ab56     00 A0 00 A0 
3ab5a     00 A0 00 A0 
3ab5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ab62     00 A0 00 A0 
3ab66     00 A0 00 A0 
3ab6a     00 A0 00 A0 
3ab6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ab72     00 A0 00 A0 
3ab76     00 A0 00 A0 
3ab7a     00 A0 00 A0 
3ab7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ab82     00 A0 00 A0 
3ab86     00 A0 00 A0 
3ab8a     00 A0 00 A0 
3ab8e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3ab92     00 6D 00 6D 
3ab96     00 6D 00 6D 
3ab9a     00 6D 00 6D 
3ab9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3aba2     00 6D 00 6D 
3aba6     00 6D 00 6D 
3abaa     00 6D 00 6D 
3abae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3abb2     00 6D 00 6D 
3abb6     00 6D 00 6D 
3abba     00 6D 00 6D 
3abbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3abc2     00 6D 00 6D 
3abc6     00 6D 00 6D 
3abca     00 6D 00 6D 
3abce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3abd2     00 6D 00 6D 
3abd6     00 6D 00 6D 
3abda     00 6D 00 6D 
3abde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3abe2     00 6D 00 6D 
3abe6     00 6D 00 6D 
3abea     00 6D 00 6D 
3abee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3abf2     00 6D 00 6D 
3abf6     00 6D 00 6D 
3abfa     00 6D 00 6D 
3abfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ac02     00 6D 00 6D 
3ac06     00 6D 00 6D 
3ac0a     00 6D 00 6D 
3ac0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ac12     00 6D 00 6D 
3ac16     00 6C 00 A0 
3ac1a     00 9F 00 A0 
3ac1e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3ac22     00 A0 00 A0 
3ac26     00 A0 00 A0 
3ac2a     00 A0 00 A0 
3ac2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ac32     00 A0 00 A0 
3ac36     00 A0 00 A0 
3ac3a     00 A0 00 A0 
3ac3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ac42     00 A0 00 A0 
3ac46     00 A0 00 A0 
3ac4a     00 A0 00 A0 
3ac4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ac52     00 A0 00 A0 
3ac56     00 A0 00 A0 
3ac5a     00 A0 00 A0 
3ac5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ac62     00 A0 00 A0 
3ac66     00 A0 00 A0 
3ac6a     00 A0 00 A0 
3ac6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ac72     00 A0 00 A0 
3ac76     00 A0 00 A0 
3ac7a     00 A0 00 A0 
3ac7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ac82     00 A0 00 A0 
3ac86     00 A0 00 A0 
3ac8a     00 A0 00 A0 
3ac8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ac92     00 A0 00 A0 
3ac96     00 A0 00 A0 
3ac9a     00 A0 00 A0 
3ac9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aca2     00 A0 00 A0 
3aca6     00 A0 00 A0 
3acaa     00 A0 00 A0 
3acae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3acb2     00 A0 00 A0 
3acb6     00 A0 00 A0 
3acba     00 A0 00 A0 
3acbe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3acc2     00 A0 00 A0 
3acc6     00 A0 00 A0 
3acca     00 A0 00 A0 
3acce     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3acd2     00 A1 00 A1 
3acd6     00 A1 00 A1 
3acda     00 A1 00 A1 
3acde     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3ace2     00 A1 00 A1 
3ace6     00 A1 00 A1 
3acea     00 A1 00 A1 
3acee     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3acf2     00 A1 00 A1 
3acf6     00 A1 00 A1 
3acfa     00 A1 00 A1 
3acfe     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3ad02     00 A1 00 A1 
3ad06     00 A1 00 A1 
3ad0a     00 A1 00 A1 
3ad0e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3ad12     00 A1 00 A1 
3ad16     00 A1 00 A1 
3ad1a     00 A1 00 A1 
3ad1e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3ad22     00 A1 00 A1 
3ad26     00 A1 00 A1 
3ad2a     00 6E 00 6E 
3ad2e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3ad32     00 6E 00 6E 
3ad36     00 6E 00 6E 
3ad3a     00 6E 00 6E 
3ad3e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3ad42     00 6E 00 6E 
3ad46     00 6E 00 6E 
3ad4a     00 6E 00 6E 
3ad4e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3ad52     00 6E 00 6E 
3ad56     00 6E 00 6E 
3ad5a     00 6E 00 6E 
3ad5e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3ad62     00 6E 00 6D 
3ad66     00 6D 00 6D 
3ad6a     00 6D 00 6D 
3ad6e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ad72     00 6D 00 6D 
3ad76     00 6D 00 6D 
3ad7a     00 6D 00 6D 
3ad7e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ad82     00 6D 00 6D 
3ad86     00 6D 00 6D 
3ad8a     00 6D 00 6D 
3ad8e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ad92     00 6D 00 6D 
3ad96     00 6D 00 6D 
3ad9a     00 6D 00 6D 
3ad9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ada2     00 6D 00 6D 
3ada6     00 6D 00 6D 
3adaa     00 6D 00 6D 
3adae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3adb2     00 6D 00 6D 
3adb6     00 6D 00 6D 
3adba     00 6D 00 6D 
3adbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3adc2     00 6D 00 6D 
3adc6     00 6D 00 6D 
3adca     00 6D 00 6D 
3adce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3add2     00 6D 00 6D 
3add6     00 6D 00 6D 
3adda     00 6D 00 6D 
3adde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ade2     00 6D 00 6D 
3ade6     00 6D 00 6D 
3adea     00 6D 00 6D 
3adee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3adf2     00 6D 00 6D 
3adf6     00 6D 00 6D 
3adfa     00 6D 00 6D 
3adfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ae02     00 6D 00 6D 
3ae06     00 6D 00 6D 
3ae0a     00 6D 00 6D 
3ae0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ae12     00 6D 00 6D 
3ae16     00 6C 00 6C 
3ae1a     00 6C 00 6C 
3ae1e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3ae22     00 6C 00 6C 
3ae26     00 6C 00 6C 
3ae2a     00 6C 00 6C 
3ae2e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3ae32     00 6C 00 6C 
3ae36     00 6C 00 6C 
3ae3a     00 9D 00 9F 
3ae3e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3ae42     00 9F 00 9F 
3ae46     00 9F 00 9F 
3ae4a     00 A0 00 A0 
3ae4e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ae52     00 A0 00 A0 
3ae56     00 A0 00 A0 
3ae5a     00 A0 00 A0 
3ae5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ae62     00 A0 00 A0 
3ae66     00 A0 00 A0 
3ae6a     00 A0 00 A0 
3ae6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ae72     00 A0 00 A0 
3ae76     00 A0 00 A0 
3ae7a     00 A0 00 A0 
3ae7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ae82     00 A0 00 A0 
3ae86     00 A0 00 A0 
3ae8a     00 A0 00 A0 
3ae8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ae92     00 A0 00 A0 
3ae96     00 A0 00 A0 
3ae9a     00 A0 00 A0 
3ae9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aea2     00 A0 00 A0 
3aea6     00 A0 00 A0 
3aeaa     00 A0 00 A0 
3aeae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aeb2     00 A0 00 A0 
3aeb6     00 A0 00 A0 
3aeba     00 A0 00 A0 
3aebe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aec2     01 00 00 00 
3aec6     00 00 00 00 
3aeca     00 00 00 00 
3aece     00 00 00 00 | mouse  file "mouse2.def"
3aed2     00 00 00 00 
3aed6     00 00 00 00 
3aeda     00 00 00 00 
3aede     00 00 00 00 | 	byte	$00[16]
3aee2     01 01 00 00 
3aee6     00 00 00 00 
3aeea     00 00 00 00 
3aeee     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aef2     00 00 00 00 
3aef6     00 00 00 00 
3aefa     00 00 00 00 
3aefe     00 00 00 00 | 	byte	$00[16]
3af02     01 0D 01 00 
3af06     00 00 00 00 
3af0a     00 00 00 00 
3af0e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af12     00 00 00 00 
3af16     00 00 00 00 
3af1a     00 00 00 00 
3af1e     00 00 00 00 | 	byte	$00[16]
3af22     01 0D 0D 01 
3af26     00 00 00 00 
3af2a     00 00 00 00 
3af2e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af32     00 00 00 00 
3af36     00 00 00 00 
3af3a     00 00 00 00 
3af3e     00 00 00 00 | 	byte	$00[16]
3af42     01 0D 0D 0D 
3af46     01 00 00 00 
3af4a     00 00 00 00 
3af4e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af52     00 00 00 00 
3af56     00 00 00 00 
3af5a     00 00 00 00 
3af5e     00 00 00 00 | 	byte	$00[16]
3af62     01 0D 0D 0D 
3af66     0D 01 00 00 
3af6a     00 00 00 00 
3af6e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af72     00 00 00 00 
3af76     00 00 00 00 
3af7a     00 00 00 00 
3af7e     00 00 00 00 | 	byte	$00[16]
3af82     01 0D 0D 0D 
3af86     0D 0D 01 00 
3af8a     00 00 00 00 
3af8e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af92     00 00 00 00 
3af96     00 00 00 00 
3af9a     00 00 00 00 
3af9e     00 00 00 00 | 	byte	$00[16]
3afa2     01 0D 0D 0D 
3afa6     0D 0D 0D 01 
3afaa     00 00 00 00 
3afae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3afb2     00 00 00 00 
3afb6     00 00 00 00 
3afba     00 00 00 00 
3afbe     00 00 00 00 | 	byte	$00[16]
3afc2     01 0D 0D 0D 
3afc6     0D 0D 0D 0C 
3afca     01 00 00 00 
3afce     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3afd2     00 00 00 00 
3afd6     00 00 00 00 
3afda     00 00 00 00 
3afde     00 00 00 00 | 	byte	$00[16]
3afe2     01 0D 0D 0D 
3afe6     0D 0D 0D 0D 
3afea     0C 01 00 00 
3afee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3aff2     00 00 00 00 
3aff6     00 00 00 00 
3affa     00 00 00 00 
3affe     00 00 00 00 | 	byte	$00[16]
3b002     01 0D 0D 0D 
3b006     0D 0D 0D 0D 
3b00a     0D 0C 01 00 
3b00e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3b012     00 00 00 00 
3b016     00 00 00 00 
3b01a     00 00 00 00 
3b01e     00 00 00 00 | 	byte	$00[16]
3b022     01 0D 0D 0D 
3b026     0D 0D 0D 0D 
3b02a     0D 0D 0B 01 
3b02e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3b032     00 00 00 00 
3b036     00 00 00 00 
3b03a     00 00 00 00 
3b03e     00 00 00 00 | 	byte	$00[16]
3b042     01 0D 0D 0D 
3b046     0C 0D 0D 03 
3b04a     01 01 01 01 
3b04e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3b052     00 00 00 00 
3b056     00 00 00 00 
3b05a     00 00 00 00 
3b05e     00 00 00 00 | 	byte	$00[16]
3b062     01 0D 0D 0C 
3b066     01 09 0D 03 
3b06a     00 00 00 00 
3b06e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3b072     00 00 00 00 
3b076     00 00 00 00 
3b07a     00 00 00 00 
3b07e     00 00 00 00 | 	byte	$00[16]
3b082     01 0D 0C 01 
3b086     00 01 0D 0B 
3b08a     01 00 00 00 
3b08e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3b092     00 00 00 00 
3b096     00 00 00 00 
3b09a     00 00 00 00 
3b09e     00 00 00 00 | 	byte	$00[16]
3b0a2     01 0C 01 00 
3b0a6     00 01 0A 0D 
3b0aa     01 00 00 00 
3b0ae     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3b0b2     00 00 00 00 
3b0b6     00 00 00 00 
3b0ba     00 00 00 00 
3b0be     00 00 00 00 | 	byte	$00[16]
3b0c2     01 01 00 00 
3b0c6     00 00 01 0D 
3b0ca     0B 01 00 00 
3b0ce     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3b0d2     00 00 00 00 
3b0d6     00 00 00 00 
3b0da     00 00 00 00 
3b0de     00 00 00 00 
3b0e2     00 00 00 00 
3b0e6     00 00       | 	byte	$00[22]
3b0e8     01 0B 0D 01 
3b0ec     00 00 00 00 
3b0f0     00 00 00 00 
3b0f4     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b0f8     00 00 00 00 
3b0fc     00 00 00 00 
3b100     00 00 00 00 
3b104     00 00 00 00 
3b108     00          | 	byte	$00[17]
3b109     01 01 00 00 
3b10d     00 00 00 00 
3b111     00 00 00 00 
3b115     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b119     00 00 00 00 
      ...             
3b2bd     00 00 00 00 
3b2c1     00          | 	byte	$00[425]
3b2c2                 | 
3b2c2     00 00       |              	org
3b2c4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3b2c8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3b2cc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3b2d0 003             | 
3b2d0 003 00 30 04 F6 |                 mov     psramaddr,#0
3b2d4 004             | 
3b2d4 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3b2d8 005 20 00 00 FF 
3b2dc 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3b2e0 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3b2e4 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3b2e8 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3b2ec 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3b2f0 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3b2f4 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3b2f8 00d             | 
3b2f8 00d 20 00 00 FF 
3b2fc 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3b300 00f E0 03 00 FF 
3b304 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3b308 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3b30c 012             | 
3b30c 012             |                 
3b30c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3b310 013             |     
3b310 013 01 2C 60 FD |                 cogid 	t11				' get id
3b314 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3b318 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3b31c 016             | 
3b31c 016 00 00 00 00 | t11 		long 	0
3b320 017 00 FF 07 00 | mailbox 	long 	$7FF00
3b324 018 00 00 00 00 | psramaddr 	long 	0
3b328 019 00 00 00 00 | pslockval	long 	0
3b32c 01a 00 00 00 00 | cmd             long    0
3b330 01b 00 00 00 00 | buf1            long    0
3b334 01c 00 40 00 00 | buf2            long    16384
3b338 01d 3C B3 03 00 | 	long	@@@_dat_ + 12612
3b33c 01e 50 32 20 52 
3b340 01f 65 74 72 6F 
3b344 020 6D 61 63 68 
3b348 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3b34c 022 42 41 53 49 
3b350 023 43 20 76 65 
3b354 024 72 73 69 6F 
3b358 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3b35c 026 34 39 20 62 
3b360 027 65 74 61 20 
3b364 028 31 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $31, $00, $00, $00
3b368 029             | 	alignl
3b368 029             | _hg010b_spin2_dat_
3b368 029             | 
3b368 029 00 00 00 00 
3b36c 02a 00 00 00 00 
3b370 02b 00 00 00 00 
3b374 02c 00 00 00 00 
3b378 02d 00 00 00    | vga_font       file "vgafont.def"
3b37b 02d 7E 81 A5 81 
3b37f 02e 81 BD 99 81 
3b383 02f 81 7E 00 00 
3b387 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3b38b 031 7E FF DB FF 
3b38f 032 FF C3 E7 FF 
3b393 033 FF 7E 00 00 
3b397 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3b39b 035 00 36 7F 7F 
3b39f 036 7F 7F 3E 1C 
3b3a3 037 08 00 00 00 
3b3a7 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3b3ab 039 00 08 1C 3E 
3b3af 03a 7F 3E 1C 08 
3b3b3 03b 00 00 00 00 
3b3b7 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3b3bb 03d 18 3C 3C E7 
3b3bf 03e E7 E7 18 18 
3b3c3 03f 3C 00 00 00 
3b3c7 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3b3cb 041 18 3C 7E FF 
3b3cf 042 FF 7E 18 18 
3b3d3 043 3C 00 00 00 
3b3d7 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3b3db 045 00 00 00 18 
3b3df 046 3C 3C 18 00 
3b3e3 047 00 00 00 00 
3b3e7 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3b3eb 049 FF FF FF E7 
3b3ef 04a C3 C3 E7 FF 
3b3f3 04b FF FF FF FF 
3b3f7 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3b3fb 04d 00 00 3C 66 
3b3ff 04e 42 42 66 3C 
3b403 04f 00 00 00 00 
3b407 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3b40b 051 FF FF C3 99 
3b40f 052 BD BD 99 C3 
3b413 053 FF FF FF FF 
3b417 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3b41b 055 78 70 58 4C 
3b41f 056 1E 33 33 33 
3b423 057 33 1E 00 00 
3b427 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3b42b 059 3C 66 66 66 
3b42f 05a 66 3C 18 7E 
3b433 05b 18 18 00 00 
3b437 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3b43b 05d FC CC FC 0C 
3b43f 05e 0C 0C 0C 0E 
3b443 05f 0F 07 00 00 
3b447 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3b44b 061 FE C6 FE C6 
3b44f 062 C6 C6 C6 E6 
3b453 063 E7 67 03 00 
3b457 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3b45b 065 18 18 DB 3C 
3b45f 066 E7 3C DB 18 
3b463 067 18 00 00 00 
3b467 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3b46b 069 03 07 0F 1F 
3b46f 06a 7F 1F 0F 07 
3b473 06b 03 01 00 00 
3b477 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3b47b 06d 60 70 78 7C 
3b47f 06e 7F 7C 78 70 
3b483 06f 60 40 00 00 
3b487 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3b48b 071 18 3C 7E 18 
3b48f 072 18 18 7E 3C 
3b493 073 18 00 00 00 
3b497 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3b49b 075 66 66 66 66 
3b49f 076 66 66 66    | 	byte	$66[7]
3b4a2 077 00 66 66 00 
3b4a6 078 00 00 00 00 
3b4aa 079 00 FE DB DB 
3b4ae 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3b4b2 07b D8 D8 D8 00 
3b4b6 07c 00 00 00 3E 
3b4ba 07d 63 06 1C 36 
3b4be 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3b4c2 07f 30 63 3E 00 
3b4c6 080 00 00 00 00 
3b4ca 081 00 00 00 00 
3b4ce 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3b4d2 083 7F 7F 7F 00 
3b4d6 084 00 00 00 00 
3b4da 085 00 18 3C 7E 
3b4de 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3b4e2 087 3C 18 7E 00 
3b4e6 088 00 00 00 00 
3b4ea 089 00 18 3C 7E 
3b4ee 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3b4f2 08b 18 18 18 00 
3b4f6 08c 00 00 00 00 
3b4fa 08d 00 18 18 18 
3b4fe 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b502 08f 7E 3C 18 00 
3b506 090 00 00 00 00 
3b50a 091 00 00 00 18 
3b50e 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3b512 093 00 00 00 00 
3b516 094 00 00 00 00 
3b51a 095 00 00 00    | 	byte	$00[11]
3b51d 096 0C 06 7F 06 
3b521 097 0C 00 00 00 
3b525 098 00 00 00 00 
3b529 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b52d 09a 00 03 03 03 
3b531 09b 7F 00 00 00 
3b535 09c 00 00 00 00 
3b539 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b53d 09e 14 36 7F 36 
3b541 09f 14 00 00 00 
3b545 0a0 00 00 00 00 
3b549 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3b54d 0a2 1C 1C 3E 3E 
3b551 0a3 7F 7F 00 00 
3b555 0a4 00 00 00 00 
3b559 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3b55d 0a6 7F 3E 3E 1C 
3b561 0a7 1C 08 00 00 
3b565 0a8 00 00 00 00 
3b569 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b56d 0aa 00 00 00 00 
3b571 0ab 00 00 00 00 
3b575 0ac 00 00 00 00 
3b579 0ad 00 00       | 	byte	$00[14]
3b57b 0ad 18 3C 3C 3C 
3b57f 0ae 18 18 18 00 
3b583 0af 18 18 00 00 
3b587 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3b58b 0b1 66 24 00 00 
3b58f 0b2 00 00 00 00 
3b593 0b3 00 00 00 00 
3b597 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b59b 0b5 00 36 36 7F 
3b59f 0b6 36 36 36 7F 
3b5a3 0b7 36 36 00 00 
3b5a7 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3b5ab 0b9 3E 63 43 03 
3b5af 0ba 3E 60 60 61 
3b5b3 0bb 63 3E 18 18 
3b5b7 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3b5bb 0bd 00 00 43 63 
3b5bf 0be 30 18 0C 06 
3b5c3 0bf 63 61 00 00 
3b5c7 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3b5cb 0c1 1C 36 36 1C 
3b5cf 0c2 6E 3B 33 33 
3b5d3 0c3 33 6E 00 00 
3b5d7 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3b5db 0c5 0C 0C 0C 06 
3b5df 0c6 00 00 00 00 
3b5e3 0c7 00 00 00 00 
3b5e7 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b5eb 0c9 30 18 0C 0C 
3b5ef 0ca 0C 0C 0C 0C 
3b5f3 0cb 18 30 00 00 
3b5f7 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3b5fb 0cd 0C 18 30 30 
3b5ff 0ce 30 30 30 30 
3b603 0cf 18 0C 00 00 
3b607 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3b60b 0d1 00 00 00 66 
3b60f 0d2 3C FF 3C 66 
3b613 0d3 00 00 00 00 
3b617 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3b61b 0d5 00 00 00 18 
3b61f 0d6 18 7E 18 18 
3b623 0d7 00 00 00 00 
3b627 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3b62b 0d9 00 00 00 00 
3b62f 0da 00 00 00 00 | 	byte	$00[8]
3b633 0db 18 18 18 0C 
3b637 0dc 00 00 00 00 
3b63b 0dd 00 00 00 00 
3b63f 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3b643 0df 00 00 00 00 
3b647 0e0 00 00 00 00 
3b64b 0e1 00 00 00 00 
3b64f 0e2 00 00 00 00 | 	byte	$00[16]
3b653 0e3 18 18 00 00 
3b657 0e4 00 00 00 00 
3b65b 0e5 00 00 40 60 
3b65f 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3b663 0e7 03 01 00 00 
3b667 0e8 00 00 00 00 
3b66b 0e9 1C 36 63 63 
3b66f 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3b673 0eb 36 1C 00 00 
3b677 0ec 00 00 00 00 
3b67b 0ed 18 1C 1E 18 
3b67f 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3b683 0ef 18 7E 00 00 
3b687 0f0 00 00 00 00 
3b68b 0f1 3E 63 60 30 
3b68f 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3b693 0f3 63 7F 00 00 
3b697 0f4 00 00 00 00 
3b69b 0f5 3E 63 60 60 
3b69f 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3b6a3 0f7 63 3E 00 00 
3b6a7 0f8 00 00 00 00 
3b6ab 0f9 30 38 3C 36 
3b6af 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3b6b3 0fb 30 78 00 00 
3b6b7 0fc 00 00 00 00 
3b6bb 0fd 7F 03 03 03 
3b6bf 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3b6c3 0ff 63 3E 00 00 
3b6c7 100 00 00 00 00 
3b6cb 101 1C 06 03 03 
3b6cf 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3b6d3 103 63 3E 00 00 
3b6d7 104 00 00 00 00 
3b6db 105 7F 63 60 60 
3b6df 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3b6e3 107 0C 0C 00 00 
3b6e7 108 00 00 00 00 
3b6eb 109 3E 63 63 63 
3b6ef 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3b6f3 10b 63 3E 00 00 
3b6f7 10c 00 00 00 00 
3b6fb 10d 3E 63 63 63 
3b6ff 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3b703 10f 30 1E 00 00 
3b707 110 00 00 00 00 
3b70b 111 00 00 00 18 
3b70f 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3b713 113 18 18 00 00 
3b717 114 00 00 00 00 
3b71b 115 00 00 00 18 
3b71f 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3b723 117 18 18 0C 00 
3b727 118 00 00 00 00 
3b72b 119 00 60 30 18 
3b72f 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3b733 11b 30 60 00 00 
3b737 11c 00 00 00 00 
3b73b 11d 00 00 00 7E 
3b73f 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3b743 11f 00 00 00 00 
3b747 120 00 00 00 00 
3b74b 121 00          | 	byte	$00[9]
3b74c 122 06 0C 18 30 
3b750 123 60 30 18 0C 
3b754 124 06 00 00 00 
3b758 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3b75c 126 63 63 30 18 
3b760 127 18 18 00 18 
3b764 128 18 00 00 00 
3b768 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b76c 12a 3E 63 63 7B 
3b770 12b 7B 7B 3B 03 
3b774 12c 3E 00 00 00 
3b778 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3b77c 12e 1C 36 63 63 
3b780 12f 7F 63 63 63 
3b784 130 63 00 00 00 
3b788 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3b78c 132 66 66 66 3E 
3b790 133 66 66 66 66 
3b794 134 3F 00 00 00 
3b798 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3b79c 136 66 43 03 03 
3b7a0 137 03 03 43 66 
3b7a4 138 3C 00 00 00 
3b7a8 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3b7ac 13a 36 66 66 66 
3b7b0 13b 66 66 66 36 
3b7b4 13c 1F 00 00 00 
3b7b8 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3b7bc 13e 66 46 16 1E 
3b7c0 13f 16 06 46 66 
3b7c4 140 7F 00 00 00 
3b7c8 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3b7cc 142 66 46 16 1E 
3b7d0 143 16 06 06 06 
3b7d4 144 0F 00 00 00 
3b7d8 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3b7dc 146 66 43 03 03 
3b7e0 147 7B 63 63 66 
3b7e4 148 5C 00 00 00 
3b7e8 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3b7ec 14a 63 63 63 7F 
3b7f0 14b 63 63 63 63 
3b7f4 14c 63 00 00 00 
3b7f8 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3b7fc 14e 18 18 18 18 
3b800 14f 18 18 18 18 | 	byte	$18[8]
3b804 150 3C 00 00 00 
3b808 151 00 00 00 78 
3b80c 152 30 30 30 30 
3b810 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3b814 154 1E 00 00 00 
3b818 155 00 00 00 67 
3b81c 156 66 66 36 1E 
3b820 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3b824 158 67 00 00 00 
3b828 159 00 00 00 0F 
3b82c 15a 06 06 06 06 
3b830 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b834 15c 7F 00 00 00 
3b838 15d 00 00 00 63 
3b83c 15e 77 7F 7F 6B 
3b840 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3b844 160 63 00 00 00 
3b848 161 00 00 00 63 
3b84c 162 67 6F 7F 7B 
3b850 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3b854 164 63 00 00 00 
3b858 165 00 00 00 3E 
3b85c 166 63 63 63 63 
3b860 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b864 168 3E 00 00 00 
3b868 169 00 00 00 3F 
3b86c 16a 66 66 66 3E 
3b870 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3b874 16c 0F 00 00 00 
3b878 16d 00 00 00 3E 
3b87c 16e 63 63 63 63 
3b880 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3b884 170 3E 30 70 00 
3b888 171 00 00 00 3F 
3b88c 172 66 66 66 3E 
3b890 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3b894 174 67 00 00 00 
3b898 175 00 00 00 3E 
3b89c 176 63 63 06 1C 
3b8a0 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b8a4 178 3E 00 00 00 
3b8a8 179 00 00 00 7E 
3b8ac 17a 7E 5A 18 18 
3b8b0 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b8b4 17c 3C 00 00 00 
3b8b8 17d 00 00 00 63 
3b8bc 17e 63 63 63 63 
3b8c0 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b8c4 180 3E 00 00 00 
3b8c8 181 00 00 00 63 
3b8cc 182 63 63 63 63 
3b8d0 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3b8d4 184 08 00 00 00 
3b8d8 185 00 00 00 63 
3b8dc 186 63 63 63 6B 
3b8e0 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3b8e4 188 36 00 00 00 
3b8e8 189 00 00 00 63 
3b8ec 18a 63 36 3E 1C 
3b8f0 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3b8f4 18c 63 00 00 00 
3b8f8 18d 00 00 00 66 
3b8fc 18e 66 66 66 3C 
3b900 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3b904 190 3C 00 00 00 
3b908 191 00 00 00 7F 
3b90c 192 63 61 30 18 
3b910 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b914 194 7F 00 00 00 
3b918 195 00 00 00 3C 
3b91c 196 0C 0C 0C 0C 
3b920 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3b924 198 3C 00 00 00 
3b928 199 00 00 00 00 
3b92c 19a 01 03 07 0E 
3b930 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3b934 19c 40 00 00 00 
3b938 19d 00 00 00 3C 
3b93c 19e 30 30 30 30 
3b940 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3b944 1a0 3C 00 00 00 
3b948 1a1 1C 36 00 00 
3b94c 1a2 00 00 00 00 
3b950 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b954 1a4 00 00 00 00 
3b958 1a5 00 00 00 00 
3b95c 1a6 00 00 00 00 
3b960 1a7 00 00 00 00 
3b964 1a8 00          | 	byte	$00[17]
3b965 1a8 FF 00 00 0C 
3b969 1a9 18 00 00 00 
3b96d 1aa 00 00 00 00 
3b971 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b975 1ac 00 00 00 00 
3b979 1ad 00 00 00 00 
3b97d 1ae 00          | 	byte	$00[9]
3b97e 1ae 1E 30 3E 33 
3b982 1af 33 33 6E 00 
3b986 1b0 00 00 00 00 
3b98a 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3b98e 1b2 1E 36 66 66 
3b992 1b3 66 66 3E 00 
3b996 1b4 00 00 00 00 
3b99a 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b99e 1b6 3E 63 03 03 
3b9a2 1b7 03 63 3E 00 
3b9a6 1b8 00 00 00 00 
3b9aa 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3b9ae 1ba 3C 36 33 33 
3b9b2 1bb 33 33 6E 00 
3b9b6 1bc 00 00 00 00 
3b9ba 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b9be 1be 3E 63 7F 03 
3b9c2 1bf 03 63 3E 00 
3b9c6 1c0 00 00 00 00 
3b9ca 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3b9ce 1c2 0C 1E 0C 0C 
3b9d2 1c3 0C 0C 1E 00 
3b9d6 1c4 00 00 00 00 
3b9da 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b9de 1c6 6E 33 33 33 
3b9e2 1c7 33 33 3E 30 
3b9e6 1c8 33 1E 00 00 
3b9ea 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3b9ee 1ca 36 6E 66 66 
3b9f2 1cb 66 66 67 00 
3b9f6 1cc 00 00 00 00 
3b9fa 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3b9fe 1ce 1C 18 18 18 
3ba02 1cf 18 18 3C 00 
3ba06 1d0 00 00 00 00 
3ba0a 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3ba0e 1d2 70 60 60 60 
3ba12 1d3 60 60 60 66 
3ba16 1d4 66 3C 00 00 
3ba1a 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3ba1e 1d6 66 36 1E 1E 
3ba22 1d7 36 66 67 00 
3ba26 1d8 00 00 00 00 
3ba2a 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3ba2e 1da 18 18 18 18 
3ba32 1db 18 18       | 	byte	$18[6]
3ba34 1dc 3C 00 00 00 
3ba38 1dd 00 00 00 00 
3ba3c 1de 00 00 37 7F 
3ba40 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3ba44 1e0 63 00 00 00 
3ba48 1e1 00 00 00 00 
3ba4c 1e2 00 00 3B 66 
3ba50 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ba54 1e4 66 00 00 00 
3ba58 1e5 00 00 00 00 
3ba5c 1e6 00 00 3E 63 
3ba60 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3ba64 1e8 3E 00 00 00 
3ba68 1e9 00 00 00 00 
3ba6c 1ea 00 00 3B 66 
3ba70 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ba74 1ec 3E 06 06 0F 
3ba78 1ed 00 00 00 00 
3ba7c 1ee 00 00 6E 33 
3ba80 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3ba84 1f0 3E 30 30 78 
3ba88 1f1 00 00 00 00 
3ba8c 1f2 00 00 3B 6E 
3ba90 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3ba94 1f4 0F 00 00 00 
3ba98 1f5 00 00 00 00 
3ba9c 1f6 00 00 3E 63 
3baa0 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3baa4 1f8 3E 00 00 00 
3baa8 1f9 00 00 00 08 
3baac 1fa 0C 0C 3F 0C 
3bab0 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3bab4 1fc 38 00 00 00 
3bab8 1fd 00 00 00 00 
3babc 1fe 00 00 33 33 
3bac0 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3bac4 200 6E 00 00 00 
3bac8 201 00 00 00 00 
3bacc 202 00 00 63 63 
3bad0 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3bad4 204 1C 00 00 00 
3bad8 205 00 00 00 00 
3badc 206 00 00 63 63 
3bae0 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3bae4 208 36 00 00 00 
3bae8 209 00 00 00 00 
3baec 20a 00 00 63 36 
3baf0 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3baf4 20c 63 00 00 00 
3baf8 20d 00 00 00 00 
3bafc 20e 00 00 63 63 
3bb00 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3bb04 210 7E 60 30 1F 
3bb08 211 00 00 00 00 
3bb0c 212 00 00 7F 33 
3bb10 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3bb14 214 7F 00 00 00 
3bb18 215 00 00 00 70 
3bb1c 216 18 18 18 0E 
3bb20 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3bb24 218 70 00 00 00 
3bb28 219 00 00 00 18 
3bb2c 21a 18 18 18 18 
3bb30 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bb34 21c 18 00 00 00 
3bb38 21d 00 00 00 0E 
3bb3c 21e 18 18 18 70 
3bb40 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3bb44 220 0E 00 00 00 
3bb48 221 6E 3B 00 00 
3bb4c 222 00 00 00 00 
3bb50 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bb54 224 00 00 00 00 
3bb58 225 00 00 00 00 
3bb5c 226 00 00       | 	byte	$00[10]
3bb5e 226 08 1C 36 63 
3bb62 227 63 63 7F 00 
3bb66 228 00 00 00 00 
3bb6a 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3bb6e 22a 03 03 03 03 
3bb72 22b 43 66 3C 18 
3bb76 22c 30 1E 00 00 
3bb7a 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3bb7e 22e 33 33 33 33 
3bb82 22f 33 33       | 	byte	$33[6]
3bb84 230 6E 00 00 00 
3bb88 231 00 00 60 30 
3bb8c 232 18 00 3E 63 
3bb90 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3bb94 234 3E 00 00 00 
3bb98 235 00 00 08 1C 
3bb9c 236 36 00 1E 30 
3bba0 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3bba4 238 6E 00 00 00 
3bba8 239 00 00 00 00 
3bbac 23a 33 00 1E 30 
3bbb0 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3bbb4 23c 6E 00 00 00 
3bbb8 23d 00 00 1C 36 
3bbbc 23e 1C 00 33 33 
3bbc0 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3bbc4 240 6E 00 00 00 
3bbc8 241 00 00 60 30 
3bbcc 242 18 00 3E 63 
3bbd0 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3bbd4 244 3E 00 00 00 
3bbd8 245 00 00 00 00 
3bbdc 246 00 00 3E 63 
3bbe0 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3bbe4 248 3E 18 30 1E 
3bbe8 249 00 00 00 1C 
3bbec 24a 58 78 38 18 
3bbf0 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3bbf4 24c 3C 00 00 00 
3bbf8 24d 00 00 00 00 
3bbfc 24e 63 00 3E 63 
3bc00 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3bc04 250 3E 00 00 00 
3bc08 251 66 33 00 3E 
3bc0c 252 63 63 63 63 
3bc10 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3bc14 254 3E 00 00 00 
3bc18 255 00 00 CC 66 
3bc1c 256 33 00 3E 63 
3bc20 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3bc24 258 3E 00 00 00 
3bc28 259 00 00 18 3C 
3bc2c 25a 66 00 1C 18 
3bc30 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3bc34 25c 3C 00 00 00 
3bc38 25d 30 18 00 7F 
3bc3c 25e 63 61 30 18 
3bc40 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3bc44 260 7F 00 00 00 
3bc48 261 00 63 00 08 
3bc4c 262 1C 36 63 63 
3bc50 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3bc54 264 63 00 00 00 
3bc58 265 30 18 00 3C 
3bc5c 266 66 43 03 03 
3bc60 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3bc64 268 3C 00 00 00 
3bc68 269 30 18 00 7F 
3bc6c 26a 66 46 16 1E 
3bc70 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3bc74 26c 7F 00 00 00 
3bc78 26d 0C 06 00 0F 
3bc7c 26e 06 06 06 06 
3bc80 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3bc84 270 7F 00 00 00 
3bc88 271 30 18 00 1C 
3bc8c 272 18 18 18 18 
3bc90 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3bc94 274 3C 00 00 00 
3bc98 275 00 00 08 1C 
3bc9c 276 36 00 3E 63 
3bca0 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3bca4 278 3E 00 00 00 
3bca8 279 00 00 00 00 
3bcac 27a 63 00 3E 63 
3bcb0 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3bcb4 27c 3E 00 00 00 
3bcb8 27d 00 00 00 6F 
3bcbc 27e 46 26 06 06 
3bcc0 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3bcc4 280 7F 00 00 00 
3bcc8 281 00 00 00 6E 
3bccc 282 4C 2C 0C 0C 
3bcd0 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3bcd4 284 1E 00 00 00 
3bcd8 285 30 18 00 3E 
3bcdc 286 63 63 06 1C 
3bce0 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3bce4 288 3E 00 00 00 
3bce8 289 00 00 60 30 
3bcec 28a 18 00 3E 63 
3bcf0 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3bcf4 28c 3E 00 00 00 
3bcf8 28d 00 63 00 3E 
3bcfc 28e 63 63 63 63 
3bd00 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3bd04 290 3E 00 00 00 
3bd08 291 00 63 00 63 
3bd0c 292 63 63 63 63 
3bd10 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3bd14 294 3E 00 00 00 
3bd18 295 6C 38 00 7E 
3bd1c 296 7E 5A 18 18 
3bd20 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3bd24 298 3C 00 00 00 
3bd28 299 00 00 60 48 
3bd2c 29a 2C 0C 3F 0C 
3bd30 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3bd34 29c 38 00 00 00 
3bd38 29d 00 00 00 0F 
3bd3c 29e 26 36 1E 0E 
3bd40 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3bd44 2a0 7F 00 00 00 
3bd48 2a1 00 00 00 00 
3bd4c 2a2 00 63 36 1C 
3bd50 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3bd54 2a4 00 00 00 00 
3bd58 2a5 00 00       | 	byte	$00[6]
3bd5a 2a5 36 1C 08 00 
3bd5e 2a6 3E 63 03 03 
3bd62 2a7 03 63 3E 00 
3bd66 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3bd6a 2a9 30 18 0C 00 
3bd6e 2aa 1E 30 3E 33 
3bd72 2ab 33 33 6E 00 
3bd76 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3bd7a 2ad 60 30 18 00 
3bd7e 2ae 1C 18 18 18 
3bd82 2af 18 18 3C 00 
3bd86 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3bd8a 2b1 60 30 18 00 
3bd8e 2b2 3E 63 63 63 
3bd92 2b3 63 63 3E 00 
3bd96 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3bd9a 2b5 30 18 0C 00 
3bd9e 2b6 33 33 33 33 
3bda2 2b7 33 33 6E 00 
3bda6 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3bdaa 2b9 00 08 1C 36 
3bdae 2ba 63 63 7F 63 
3bdb2 2bb 63 63 63 18 
3bdb6 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3bdba 2bd 00 00 00 00 
3bdbe 2be 1E 30 3E 33 
3bdc2 2bf 33 33 6E 18 
3bdc6 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3bdca 2c1 00 7F 63 61 
3bdce 2c2 30 18 0C 06 
3bdd2 2c3 43 63 7F 00 
3bdd6 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3bdda 2c5 36 1C 08 00 
3bdde 2c6 7F 33 18 0C 
3bde2 2c7 06 63 7F 00 
3bde6 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3bdea 2c9 00 7F 66 46 
3bdee 2ca 16 1E 16 06 
3bdf2 2cb 46 66 7F 18 
3bdf6 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3bdfa 2cd 00 00 00 00 
3bdfe 2ce 3E 63 7F 03 
3be02 2cf 03 63 3E 18 
3be06 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3be0a 2d1 00 3C 66 03 
3be0e 2d2 1F 03 0F 03 
3be12 2d3 03 66 3C 00 
3be16 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3be1a 2d5 60 30 18 00 
3be1e 2d6 7F 33 18 0C 
3be22 2d7 06 63 7F 00 
3be26 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3be2a 2d9 00 3C 66 43 
3be2e 2da 03 03 03 03 
3be32 2db 43 66 3C 00 
3be36 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3be3a 2dd 00 00 00 00 
3be3e 2de 3E 63 06 1C 
3be42 2df 30 63 3E 18 
3be46 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3be4a 2e1 00 00 00 00 
3be4e 2e2 00 00       | 	byte	$00[6]
3be50 2e3 6C 36 1B 36 
3be54 2e4 6C 00 00 00 
3be58 2e5 00 00 00 00 
3be5c 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3be60 2e7 1B 36 6C 36 
3be64 2e8 1B 00 00 00 
3be68 2e9 88 22 88 22 
3be6c 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3be70 2eb 88 22 88 22 
3be74 2ec 88 22 88 22 
3be78 2ed AA 55 AA 55 
3be7c 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3be80 2ef AA 55 AA 55 
3be84 2f0 AA 55 AA 55 
3be88 2f1 BB EE BB EE 
3be8c 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3be90 2f3 BB EE BB EE 
3be94 2f4 BB EE BB EE 
3be98 2f5 18 18 18 18 
3be9c 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3bea0 2f7 18 18 18 18 
3bea4 2f8 18 18 18 18 
3bea8 2f9 18 18 18 18 
3beac 2fa 18 18 18    | 	byte	$18[15]
3beaf 2fa 1F 18 18 18 
3beb3 2fb 18 18 18 18 
3beb7 2fc 18 30 18 00 
3bebb 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3bebf 2fe 63 7F 63 63 
3bec3 2ff 63 63 00 00 
3bec7 300 00 1C 36 00 
3becb 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3becf 302 63 7F 63 63 
3bed3 303 63 63 00 00 
3bed7 304 00 36 1C 00 
3bedb 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3bedf 306 1E 16 06 46 
3bee3 307 66 7F 00 00 
3bee7 308 00 00 00 00 
3beeb 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3beef 30a 1C 30 60 63 
3bef3 30b 63 3E 18 30 
3bef7 30c 1E 6C 6C 6C 
3befb 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3beff 30e 6F 6C 6C 6C 
3bf03 30f 6C 6C 6C 6C 
3bf07 310 6C 6C 6C 6C 
3bf0b 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3bf0f 312 6C 6C 6C 6C 
3bf13 313 6C 6C 6C 6C 
3bf17 314 6C          | 	byte	$6c[9]
3bf18 315 00 00 00 00 
3bf1c 316 00          | 	byte	$00[5]
3bf1d 316 7F 60 6F 6C 
3bf21 317 6C 6C 6C 6C 
3bf25 318 6C 6C 6C 6C 
3bf29 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3bf2d 31a 6F 60 7F 00 
3bf31 31b 00 00 00 00 
3bf35 31c 00 00 00 18 
3bf39 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3bf3d 31e 61 30 18 0C 
3bf41 31f 06 43 63 7F 
3bf45 320 00 00 00 00 
3bf49 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3bf4d 322 00 7F 33 18 
3bf51 323 0C 06 63 7F 
3bf55 324 00 00 00 00 
3bf59 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3bf5d 326 00 00 1F 18 
3bf61 327 18 18 18 18 
3bf65 328 18 18 18 18 
3bf69 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bf6d 32a 18 18 F8 00 
3bf71 32b 00 00 00 00 
3bf75 32c 00 00 00 18 
3bf79 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3bf7d 32e 18 18 FF 00 
3bf81 32f 00 00 00 00 
3bf85 330 00 00 00 00 
3bf89 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bf8d 332 00 00 FF 18 
3bf91 333 18 18 18 18 
3bf95 334 18 18 18 18 
3bf99 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bf9d 336 18 18 F8 18 
3bfa1 337 18 18 18 18 
3bfa5 338 18 18 18 00 
3bfa9 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3bfad 33a 00 00 FF 00 
3bfb1 33b 00 00 00 00 
3bfb5 33c 00 00 00 18 
3bfb9 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3bfbd 33e 18 18 FF 18 
3bfc1 33f 18 18 18 18 
3bfc5 340 18 18 18 63 
3bfc9 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3bfcd 342 36 63 63 7F 
3bfd1 343 63 63 63 63 
3bfd5 344 00 00 00 00 
3bfd9 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3bfdd 346 00 1E 30 3E 
3bfe1 347 33 33 33 6E 
3bfe5 348 00 00 00 6C 
3bfe9 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3bfed 34a EC 0C FC 00 
3bff1 34b 00 00 00 00 
3bff5 34c 00 00 00 00 
3bff9 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bffd 34e FC 0C EC 6C 
3c001 34f 6C 6C 6C 6C 
3c005 350 6C 6C 6C 6C 
3c009 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3c00d 352 EF 00 FF 00 
3c011 353 00 00 00 00 
3c015 354 00 00 00 00 
3c019 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c01d 356 FF 00 EF 6C 
3c021 357 6C 6C 6C 6C 
3c025 358 6C 6C 6C 6C 
3c029 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3c02d 35a EC 0C EC 6C 
3c031 35b 6C 6C 6C 6C 
3c035 35c 6C 6C 6C 00 
3c039 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3c03d 35e FF 00 FF 00 
3c041 35f 00 00 00 00 
3c045 360 00 00 00 6C 
3c049 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3c04d 362 EF 00 EF 6C 
3c051 363 6C 6C 6C 6C 
3c055 364 6C 6C 6C 00 
3c059 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3c05d 366 63 3E 63 63 
3c061 367 63 63 3E 63 
3c065 368 00 00 00 00 
3c069 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3c06d 36a 30 3C 36 33 
3c071 36b 33 33 33 6E 
3c075 36c 00 00 00 00 
3c079 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3c07d 36e 66 66 6F 66 
3c081 36f 66 66 36 1F 
3c085 370 00 00 00 36 
3c089 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3c08d 372 66 66 66 66 
3c091 373 66 66       | 	byte	$66[6]
3c093 373 36 1F 00 00 
3c097 374 00 00 63 00 
3c09b 375 7F 66 46 16 
3c09f 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3c0a3 377 66 7F 00 00 
3c0a7 378 00 6C 38 00 
3c0ab 379 38 30 30 3C 
3c0af 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3c0b3 37b 33 6E 00 00 
3c0b7 37c 00 36 1C 00 
3c0bb 37d 63 67 6F 7F 
3c0bf 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3c0c3 37f 63 63 00 00 
3c0c7 380 00 30 18 00 
3c0cb 381 3C 18 18 18 
3c0cf 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3c0d3 383 18 3C 00 00 
3c0d7 384 00 3C 66 00 
3c0db 385 3C 18 18 18 
3c0df 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3c0e3 387 18 3C 00 00 
3c0e7 388 00 00 00 36 
3c0eb 389 1C 08 00 3E 
3c0ef 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3c0f3 38b 63 3E 00 00 
3c0f7 38c 00 18 18 18 
3c0fb 38d 18 18 18 18 
3c0ff 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3c103 38f 00 00 00 00 
3c107 390 00 00 00 00 
3c10b 391 00 00 00 00 | 	byte	$00[12]
3c10f 392 F8 18 18 18 
3c113 393 18 18 18 18 
3c117 394 18 FF FF FF 
3c11b 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3c11f 396 FF FF FF FF 
3c123 397 FF FF FF FF 
3c127 398 FF          | 	byte	$ff[9]
3c128 399 00 00 00 00 
3c12c 39a 00 00 00    | 	byte	$00[7]
3c12f 39a FF FF FF FF 
3c133 39b FF FF FF FF 
3c137 39c FF          | 	byte	$ff[9]
3c138 39d 00 00 00 7E 
3c13c 39e 7E 5A 18 18 
3c140 39f 18 18 18 18 
3c144 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3c148 3a1 1C 36 1C 63 
3c14c 3a2 63 63 63 63 
3c150 3a3 63 63 63 63 
3c154 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3c158 3a5 FF FF FF FF 
3c15c 3a6 FF FF FF    | 	byte	$ff[7]
3c15f 3a6 00 00 00 00 
3c163 3a7 00 00 00 00 
3c167 3a8 00          | 	byte	$00[9]
3c168 3a9 30 18 00 3E 
3c16c 3aa 63 63 63 63 
3c170 3ab 63 63 63 63 
3c174 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3c178 3ad 00 00 00 1E 
3c17c 3ae 33 33 33 1B 
3c180 3af 33 63 63 63 
3c184 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3c188 3b1 1C 36 00 3E 
3c18c 3b2 63 63 63 63 
3c190 3b3 63 63 63 63 
3c194 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3c198 3b5 30 18 00 63 
3c19c 3b6 67 6F 7F 7B 
3c1a0 3b7 73 63 63 63 
3c1a4 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3c1a8 3b9 00 00 60 30 
3c1ac 3ba 18 00 3B 66 
3c1b0 3bb 66 66 66 66 
3c1b4 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3c1b8 3bd 00 00 36 1C 
3c1bc 3be 08 00 3B 66 
3c1c0 3bf 66 66 66 66 
3c1c4 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3c1c8 3c1 36 1C 00 3E 
3c1cc 3c2 63 63 06 1C 
3c1d0 3c3 30 60 63 63 
3c1d4 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3c1d8 3c5 00 00 36 1C 
3c1dc 3c6 08 00 3E 63 
3c1e0 3c7 06 1C 30 63 
3c1e4 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3c1e8 3c9 30 18 00 3F 
3c1ec 3ca 66 66 66 3E 
3c1f0 3cb 36 66 66 66 
3c1f4 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3c1f8 3cd 30 18 00 63 
3c1fc 3ce 63 63 63 63 
3c200 3cf 63 63 63 63 
3c204 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3c208 3d1 00 00 60 30 
3c20c 3d2 18 00 3B 6E 
3c210 3d3 66 06 06 06 
3c214 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3c218 3d5 66 33 00 63 
3c21c 3d6 63 63 63 63 
3c220 3d7 63 63 63 63 
3c224 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3c228 3d9 00 00 60 30 
3c22c 3da 18 00 63 63 
3c230 3db 63 63 63 63 
3c234 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3c238 3dd 30 18 00 66 
3c23c 3de 66 66 66 3C 
3c240 3df 18 18 18 18 
3c244 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3c248 3e1 00 00 00 08 
3c24c 3e2 0C 0C 3F 0C 
3c250 3e3 0C 0C 0C 6C 
3c254 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3c258 3e5 30 18 00 00 
3c25c 3e6 00 00 00 00 
3c260 3e7 00 00 00 00 
3c264 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c268 3e9 00 00 00 00 
3c26c 3ea 00 00 00 00 | 	byte	$00[8]
3c270 3eb 7F 00 00 00 
3c274 3ec 00 00 00 00 
3c278 3ed 66 33 00 00 
3c27c 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3c280 3ef 00 00 00 00 
3c284 3f0 00 00 00 00 
3c288 3f1 00 00 00 00 
3c28c 3f2 00 00 00 00 
3c290 3f3 00 00 00 00 
3c294 3f4 00          | 	byte	$00[21]
3c295 3f4 0C 06 3C 36 
3c299 3f5 1C 00 00 00 
3c29d 3f6 00 00 00 00 
3c2a1 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c2a5 3f8 00 00 00 63 
3c2a9 3f9 3E 00 00 00 
3c2ad 3fa 00 00 00 00 
3c2b1 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c2b5 3fc 00 00 00 00 
3c2b9 3fd 3E 63 06 1C 
3c2bd 3fe 36 63 63 36 
3c2c1 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3c2c5 400 00 00 00 00 
3c2c9 401 00 00 00 00 | 	byte	$00[8]
3c2cd 402 18 00 7E 00 
3c2d1 403 18 00 00 00 
3c2d5 404 00 00 00 00 
3c2d9 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c2dd 406 00 00 00 00 
3c2e1 407 00 00 00 00 | 	byte	$00[8]
3c2e5 408 18 30 1E 00 
3c2e9 409 00 00 1C 36 
3c2ed 40a 36 1C 00 00 
3c2f1 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3c2f5 40c 00 00 00 00 
3c2f9 40d 63 00 00 00 
3c2fd 40e 00 00 00 00 
3c301 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c305 410 00 00 00 18 
3c309 411 18 00 00 00 
3c30d 412 00 00 00 00 
3c311 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c315 414 00 00 00 00 
3c319 415 00          | 	byte	$00[5]
3c31a 415 CC 66 33 00 
3c31e 416 33 33 33 33 
3c322 417 33 33 6E 00 
3c326 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3c32a 419 00 3F 66 66 
3c32e 41a 66 3E 36 66 
3c332 41b 66 66 6F 00 
3c336 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3c33a 41d 36 1C 08 00 
3c33e 41e 3B 6E 66 06 
3c342 41f 06 06 0F 00 
3c346 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3c34a 421 00 00 00 7E 
3c34e 422 7E 7E 7E 7E 
3c352 423 7E 7E 00 00 
3c356 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3c35a 425 00 00 00 00 
3c35e 426 00 00 00 00 
3c362 427 00 00 00 00 
3c366 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c368 429 00 00 00 00 
      ...             
3c398 435 00 00 00 00 
3c39c 436 00 00 00    | st_font        file "st4font.def"
3c39f 436 FF FF 00 00 
3c3a3 437 00 00 00 00 
3c3a7 438 00 18 18 18 
3c3ab 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3c3af 43a 18 18 18 18 
3c3b3 43b 18 18 18 18 
3c3b7 43c 18          | 	byte	$18[9]
3c3b8 43d 00 00 00 00 
3c3bc 43e 00 00 00    | 	byte	$00[7]
3c3bf 43e FF FF 18 18 
3c3c3 43f 18 18 18 18 
3c3c7 440 18 18 18 18 
3c3cb 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c3cf 442 FF FF 00 00 
3c3d3 443 00 00 00 00 
3c3d7 444 00 18 18 18 
3c3db 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3c3df 446 1F 1F 18 18 
3c3e3 447 18 18 18 18 
3c3e7 448 18 18 18 18 
3c3eb 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c3ef 44a F8 F8 18 18 
3c3f3 44b 18 18 18 18 
3c3f7 44c 18 00 00 00 
3c3fb 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c3ff 44e 1F 1F 18 18 
3c403 44f 18 18 18 18 
3c407 450 18 00 00 00 
3c40b 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c40f 452 F8 F8 18 18 
3c413 453 18 18 18 18 
3c417 454 18 18 18 18 
3c41b 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c41f 456 1F 1F 00 00 
3c423 457 00 00 00 00 
3c427 458 00 18 18 18 
3c42b 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3c42f 45a F8 F8 00 00 
3c433 45b 00 00 00 00 
3c437 45c 00 18 18 18 
3c43b 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3c43f 45e FF FF 18 18 
3c443 45f 18 18 18 18 
3c447 460 18 00 00 18 
3c44b 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3c44f 462 66 7E 7E 66 
3c453 463 66 66 66 30 
3c457 464 18 00 00 7E 
3c45b 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3c45f 466 3E 06 06 06 
3c463 467 06 7E 7E 18 
3c467 468 0C 30 18 3C 
3c46b 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3c46f 46a 06 06 06 66 
3c473 46b 66 7E 3C 00 
3c477 46c 00 30 18 66 
3c47b 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3c47f 46e 7E 7E 76 76 
3c483 46f 66 66 66 00 
3c487 470 00 30 18 7C 
3c48b 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3c48f 472 1C 38 70 60 
3c493 473 60 7E 3E 00 
3c497 474 00 30 18 7E 
3c49b 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3c49f 476 18 0C 0C 06 
3c4a3 477 06 7E 7E 00 
3c4a7 478 00 18 18 00 
3c4ab 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3c4af 47a 18 18 0C 0C 
3c4b3 47b 06 7E 7E 00 
3c4b7 47c 00 30 18 3C 
3c4bb 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3c4bf 47e 66 66 66 66 
3c4c3 47f 66          | 	byte	$66[5]
3c4c4 480 7E 3C 00 00 
3c4c8 481 00 00 06 06 
3c4cc 482 06 06 16 1E 
3c4d0 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3c4d4 484 7E 7E 00 00 
3c4d8 485 00 00 00 00 
3c4dc 486 00 3C 7C 60 
3c4e0 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3c4e4 488 7E 7C 30 18 
3c4e8 489 00 00 00 00 
3c4ec 48a 00 3C 7E 66 
3c4f0 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3c4f4 48c 7E 7C 18 0C 
3c4f8 48d 00 00 30 18 
3c4fc 48e 00 3C 3E 06 
3c500 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3c504 490 7E 7C 00 00 
3c508 491 00 00 30 18 
3c50c 492 00 3E 7E 66 
3c510 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3c514 494 66 66 00 00 
3c518 495 00 00 30 18 
3c51c 496 00 7C 7E 06 
3c520 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3c524 498 7E 3E 00 00 
3c528 499 00 00 30 18 
3c52c 49a 00 7E 7E 30 
3c530 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3c534 49c 7E 7E 00 00 
3c538 49d 00 00 18 18 
3c53c 49e 00 7E 7E 30 
3c540 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3c544 4a0 7E 7E 00 00 
3c548 4a1 00 00 30 18 
3c54c 4a2 00 3C 7E 66 
3c550 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3c554 4a4 7E 3C 00 00 
3c558 4a5 00 00 1C 1C 
3c55c 4a6 18 18 38 3C 
3c560 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3c564 4a8 3C 3C 00 00 
3c568 4a9 00 00 00 00 
3c56c 4aa 00 00 00 00 
3c570 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c574 4ac 00 00 00 00 
3c578 4ad 00 00       | 	byte	$00[6]
3c57a 4ad 18 18 18 18 
3c57e 4ae 18 18 18 18 | 	byte	$18[8]
3c582 4af 00 00 18 18 
3c586 4b0 00 00 00 00 
3c58a 4b1 66 66 66 66 
3c58e 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3c592 4b3 00 00 00 00 
3c596 4b4 00 00 00 00 
3c59a 4b5 00          | 	byte	$00[9]
3c59b 4b5 66 66 FF FF 
3c59f 4b6 66 66 FF FF 
3c5a3 4b7 66 66 00 00 
3c5a7 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3c5ab 4b9 7C 7E 06 06 
3c5af 4ba 3E 7C 60 60 
3c5b3 4bb 7E 3E 18 18 
3c5b7 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3c5bb 4bd 66 30 30 18 
3c5bf 4be 18 0C 0C 66 
3c5c3 4bf 66 00 00 00 
3c5c7 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3c5cb 4c1 66 66 3C 1C 
3c5cf 4c2 1C FC FE 66 
3c5d3 4c3 66 FE FC 00 
3c5d7 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3c5db 4c5 18 18 18 18 
3c5df 4c6 00 00 00 00 
3c5e3 4c7 00 00 00 00 
3c5e7 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3c5eb 4c9 18 1C 0C 0C 
3c5ef 4ca 0C 0C 0C 0C 
3c5f3 4cb 1C 18 30 00 
3c5f7 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3c5fb 4cd 18 38 30 30 
3c5ff 4ce 30 30 30 30 
3c603 4cf 38 18 0C 00 
3c607 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3c60b 4d1 66 66 3C 3C 
3c60f 4d2 FF FF 3C 3C 
3c613 4d3 66 66 00 00 
3c617 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3c61b 4d5 00 18 18 18 
3c61f 4d6 7E 7E 18 18 
3c623 4d7 18 00 00 00 
3c627 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c62b 4d9 00 00 00 00 
3c62f 4da 00 00       | 	byte	$00[6]
3c631 4db 18 18 18 18 
3c635 4dc 18          | 	byte	$18[5]
3c636 4dc 0C 04 00 00 
3c63a 4dd 00 00 00 00 
3c63e 4de 7E 7E 00 00 
3c642 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3c646 4e0 00 00 00 00 
3c64a 4e1 00 00 00 00 
3c64e 4e2 00 00 00 00 
3c652 4e3 00          | 	byte	$00[13]
3c653 4e3 18 18 18 00 
3c657 4e4 00 00 00 60 
3c65b 4e5 60 60 30 30 
3c65f 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3c663 4e7 06 06 06 00 
3c667 4e8 00 00 00 3C 
3c66b 4e9 7E 66 66 66 
3c66f 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3c673 4eb 66 7E 3C 00 
3c677 4ec 00 00 00 18 
3c67b 4ed 18 1C 1C 18 
3c67f 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3c683 4ef 18 7E 7E 00 
3c687 4f0 00 00 00 3C 
3c68b 4f1 7E 66 66 30 
3c68f 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3c693 4f3 0C 7E 7E 00 
3c697 4f4 00 00 00 7E 
3c69b 4f5 7E 30 30 18 
3c69f 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3c6a3 4f7 66 7E 3C 00 
3c6a7 4f8 00 00 00 30 
3c6ab 4f9 30 38 38 3C 
3c6af 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3c6b3 4fb 7E 30 30 00 
3c6b7 4fc 00 00 00 7E 
3c6bb 4fd 7E 06 06 3E 
3c6bf 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3c6c3 4ff 66 7E 3C 00 
3c6c7 500 00 00 00 38 
3c6cb 501 3C 0E 06 06 
3c6cf 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3c6d3 503 66 7E 3C 00 
3c6d7 504 00 00 00 7E 
3c6db 505 7E 60 60 30 
3c6df 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3c6e3 507 0C 0C 0C 00 
3c6e7 508 00 00 00 3C 
3c6eb 509 7E 66 66 3C 
3c6ef 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3c6f3 50b 66 7E 3C 00 
3c6f7 50c 00 00 00 3C 
3c6fb 50d 7E 66 66 7E 
3c6ff 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3c703 50f 70 3C 1C 00 
3c707 510 00 00 00 00 
3c70b 511 00 00 18 18 
3c70f 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3c713 513 18 18 18 00 
3c717 514 00 00 00 00 
3c71b 515 00 00 18 18 
3c71f 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3c723 517 18 18 18 0C 
3c727 518 04 00 00 00 
3c72b 519 70 38 1C 0E 
3c72f 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3c733 51b 70 00 00 00 
3c737 51c 00 00 00 00 
3c73b 51d 00 00 7E 7E 
3c73f 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3c743 51f 00 00 00 00 
3c747 520 00 00 00 00 | 	byte	$00[8]
3c74b 521 0E 1C 38 70 
3c74f 522 E0 70 38 1C 
3c753 523 0E 00 00 00 
3c757 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3c75b 525 7E 66 66 30 
3c75f 526 30 18 18 18 
3c763 527 00 18 18 00 
3c767 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3c76b 529 7E 66 66 66 
3c76f 52a 66 36 06 66 
3c773 52b 66 7E 3C 00 
3c777 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3c77b 52d 3C 7E 66 66 
3c77f 52e 66 7E 7E 66 
3c783 52f 66 66 66 00 
3c787 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3c78b 531 7E 66 66 7E 
3c78f 532 3E 66 66 66 
3c793 533 66 7E 3E 00 
3c797 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3c79b 535 7E 66 66 06 
3c79f 536 06 06 06 66 
3c7a3 537 66 7E 3C 00 
3c7a7 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3c7ab 539 7E 66 66 66 
3c7af 53a 66 66 66 66 
3c7b3 53b 66 7E 3E 00 
3c7b7 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3c7bb 53d 7E 06 06 3E 
3c7bf 53e 3E 06 06 06 
3c7c3 53f 06 7E 7E 00 
3c7c7 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3c7cb 541 7E 06 06 3E 
3c7cf 542 3E 06 06 06 
3c7d3 543 06 06 06 00 
3c7d7 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3c7db 545 7E 06 06 76 
3c7df 546 76 66 66 66 
3c7e3 547 66 7E 3C 00 
3c7e7 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3c7eb 549 66 66 66 7E 
3c7ef 54a 7E 66 66 66 
3c7f3 54b 66 66 66 00 
3c7f7 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3c7fb 54d 7E 18 18 18 
3c7ff 54e 18 18 18 18 
3c803 54f 18 7E 7E 00 
3c807 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3c80b 551 60 60 60 60 
3c80f 552 60 60 60    | 	byte	$60[7]
3c812 553 66 66 7E 3C 
3c816 554 00 00 00 00 
3c81a 555 66 66 36 36 
3c81e 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3c822 557 66 66 C6 C6 
3c826 558 00 00 00 00 
3c82a 559 06 06 06 06 
3c82e 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3c832 55b 06 06 7E 7E 
3c836 55c 00 00 00 00 
3c83a 55d C6 C6 EE EE 
3c83e 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3c842 55f C6 C6 C6 C6 
3c846 560 00 00 00 00 
3c84a 561 66 66 66 6E 
3c84e 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3c852 563 76 66 66 66 
3c856 564 00 00 00 00 
3c85a 565 3C 7E 66 66 
3c85e 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3c862 567 66 66 7E 3C 
3c866 568 00 00 00 00 
3c86a 569 3E 7E 66 66 
3c86e 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3c872 56b 06 06 06 06 
3c876 56c 00 00 00 00 
3c87a 56d 3C 7E 66 66 
3c87e 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3c882 56f 66 56 3E 6C 
3c886 570 00 00 00 00 
3c88a 571 3E 7E 66 66 
3c88e 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3c892 573 66 66 C6 C6 
3c896 574 00 00 00 00 
3c89a 575 7C 7E 06 06 
3c89e 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3c8a2 577 60 60 7E 3E 
3c8a6 578 00 00 00 00 
3c8aa 579 7E 7E 18 18 
3c8ae 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3c8b2 57b 18 18 18 18 
3c8b6 57c 00 00 00 00 
3c8ba 57d 66 66 66 66 
3c8be 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3c8c2 57f 66 66 7E 3C 
3c8c6 580 00 00 00 00 
3c8ca 581 66 66 66 66 
3c8ce 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3c8d2 583 3C 3C 18 18 
3c8d6 584 00 00 00 00 
3c8da 585 C6 C6 C6 C6 
3c8de 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3c8e2 587 FE EE C6 82 
3c8e6 588 00 00 00 00 
3c8ea 589 66 66 66 3C 
3c8ee 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3c8f2 58b 3C 66 66 66 
3c8f6 58c 00 00 00 00 
3c8fa 58d 66 66 66 66 
3c8fe 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3c902 58f 18 18 18 18 
3c906 590 00 00 00 00 
3c90a 591 7E 7E 30 30 
3c90e 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3c912 593 06 06 7E 7E 
3c916 594 00 00 00 00 
3c91a 595 3C 3C 0C 0C 
3c91e 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3c922 597 0C 0C 3C 3C 
3c926 598 00 00 00 00 
3c92a 599 06 06 0C 0C 
3c92e 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3c932 59b 60 60 C0 C0 
3c936 59c 00 00 00 00 
3c93a 59d 3C 3C 30 30 
3c93e 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3c942 59f 30 30 3C 3C 
3c946 5a0 00 00 00 00 
3c94a 5a1 18 18 3C 3C 
3c94e 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3c952 5a3 00 00 00 00 
3c956 5a4 00 00 00 00 
3c95a 5a5 00 00 00 00 
3c95e 5a6 00 00 00 00 
3c962 5a7 00 00       | 	byte	$00[18]
3c964 5a8 FE FE 00 00 
3c968 5a9 00 00 0C 0C 
3c96c 5aa 18 18 00 00 
3c970 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3c974 5ac 00 00 00 00 
3c978 5ad 00 00 00 00 
3c97c 5ae 00          | 	byte	$00[9]
3c97d 5ae 3C 7C 60 7C 
3c981 5af 7E 66 66 7E 
3c985 5b0 7C 00 00 00 
3c989 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3c98d 5b2 3E 7E 66 66 
3c991 5b3 66 66 66 7E 
3c995 5b4 3E 00 00 00 
3c999 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3c99d 5b6 3C 3E 06 06 
3c9a1 5b7 06 06 06 7E 
3c9a5 5b8 7C 00 00 00 
3c9a9 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3c9ad 5ba 7C 7E 66 66 
3c9b1 5bb 66 66 66 7E 
3c9b5 5bc 7C 00 00 00 
3c9b9 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3c9bd 5be 3C 7E 66 66 
3c9c1 5bf 7E 06 06 7E 
3c9c5 5c0 7C 00 00 00 
3c9c9 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3c9cd 5c2 18 7E 7E 18 
3c9d1 5c3 18 18 18 18 
3c9d5 5c4 18 00 00 00 
3c9d9 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c9dd 5c6 7C 7E 66 66 
3c9e1 5c7 66 66 7E 7C 
3c9e5 5c8 60 7E 3E 00 
3c9e9 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3c9ed 5ca 3E 7E 66 66 
3c9f1 5cb 66 66 66 66 
3c9f5 5cc 66 00 00 00 
3c9f9 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3c9fd 5ce 1C 1C 18 18 
3ca01 5cf 18 18 18 3C 
3ca05 5d0 3C 00 00 00 
3ca09 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3ca0d 5d2 30 30 30 30 
3ca11 5d3 30 30 30 30 
3ca15 5d4 30          | 	byte	$30[9]
3ca16 5d4 3E 1E 00 00 
3ca1a 5d5 06 06 06 36 
3ca1e 5d6 36 1E 1E 1E 
3ca22 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3ca26 5d8 00 00 00 00 
3ca2a 5d9 1C 1C 18 18 
3ca2e 5da 18 18 18 18 
3ca32 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3ca36 5dc 00 00 00 00 
3ca3a 5dd 00 00 00    | 	byte	$00[7]
3ca3d 5de 6C FE FE D6 
3ca41 5df D6 C6 C6 C6 
3ca45 5e0 C6 00 00 00 
3ca49 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3ca4d 5e2 3E 7E 66 66 
3ca51 5e3 66 66 66 66 
3ca55 5e4 66 00 00 00 
3ca59 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3ca5d 5e6 3C 7E 66 66 
3ca61 5e7 66 66 66 7E 
3ca65 5e8 3C 00 00 00 
3ca69 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3ca6d 5ea 3E 7E 66 66 
3ca71 5eb 66 66 66 7E 
3ca75 5ec 3E 06 06 00 
3ca79 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3ca7d 5ee 7C 7E 66 66 
3ca81 5ef 66 66 66 7E 
3ca85 5f0 7C 60 60 00 
3ca89 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3ca8d 5f2 3E 7E 66 06 
3ca91 5f3 06 06 06 06 
3ca95 5f4 06 00 00 00 
3ca99 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3ca9d 5f6 7C 7E 06 0E 
3caa1 5f7 3C 70 60 7E 
3caa5 5f8 3E 00 00 00 
3caa9 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3caad 5fa 7E 7E 18 18 
3cab1 5fb 18 18 18 78 
3cab5 5fc 70 00 00 00 
3cab9 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3cabd 5fe 66 66 66 66 
3cac1 5ff 66 66 66    | 	byte	$66[7]
3cac4 600 7E 7C 00 00 
3cac8 601 00 00 00 00 
3cacc 602 00 66 66 66 
3cad0 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3cad4 604 18 18 00 00 
3cad8 605 00 00 00 00 
3cadc 606 00 C6 C6 D6 
3cae0 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3cae4 608 C6 82 00 00 
3cae8 609 00 00 00 00 
3caec 60a 00 66 66 3C 
3caf0 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3caf4 60c 66 66 00 00 
3caf8 60d 00 00 00 00 
3cafc 60e 00 66 66 66 
3cb00 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3cb04 610 7C 60 7E 3E 
3cb08 611 00 00 00 00 
3cb0c 612 00 7E 7E 30 
3cb10 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3cb14 614 7E 7E 00 00 
3cb18 615 00 00 30 18 
3cb1c 616 18 18 18 0C 
3cb20 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3cb24 618 18 30 00 00 
3cb28 619 00 00 18 18 
3cb2c 61a 18 18 18 18 
3cb30 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3cb34 61c 18 18 00 00 
3cb38 61d 00 00 0C 18 
3cb3c 61e 18 18 18 30 
3cb40 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3cb44 620 18 0C 00 00 
3cb48 621 00 00 6C 7E 
3cb4c 622 36 00 00 00 
3cb50 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3cb54 624 00 00 00 00 
3cb58 625 00 00 00 00 
3cb5c 626 00          | 	byte	$00[9]
3cb5d 626 18 18 18 18 
3cb61 627 18 18 00 00 
3cb65 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3cb68 629 00 6C FE FE 
3cb6c 62a 7C 38 10 00 
3cb70 62b 18 18 18 F8 
3cb74 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3cb78 62d C0 C0 C0 C0 
3cb7c 62e C0 C0 C0 C0 | 	byte	$c0[8]
3cb80 62f 18 18 18 1F 
3cb84 630 1F 00 00 00 
3cb88 631 18 18 18 1F 
3cb8c 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3cb90 633 00 00 00 1F 
3cb94 634 1F 18 18 18 
3cb98 635 C0 E0 70 38 
3cb9c 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3cba0 637 03 07 0E 1C 
3cba4 638 38 70 E0 C0 
3cba8 639 80 C0 E0 F0 
3cbac 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3cbb0 63b 00 00 00 00 
3cbb4 63c F0 F0 F0 F0 
3cbb8 63d 01 03 07 0F 
3cbbc 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3cbc0 63f F0 F0 F0 F0 
3cbc4 640 00 00 00 00 
3cbc8 641 0F 0F 0F 0F 
3cbcc 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3cbd0 643 FF FF 00 00 
3cbd4 644 00 00 00 00 
3cbd8 645 00 00 00 00 
3cbdc 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3cbe0 647 00 00 00 00 
3cbe4 648 0F 0F 0F 0F 
3cbe8 649 00 38 38 EE 
3cbec 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3cbf0 64b 00 00 00 F8 
3cbf4 64c F8 18 18 18 
3cbf8 64d 00 00 00 FF 
3cbfc 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3cc00 64f 18 18 18 FF 
3cc04 650 FF 18 18 18 
3cc08 651 00 00 3C 7E 
3cc0c 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3cc10 653 00 00 00 00 
3cc14 654 FF FF FF FF 
3cc18 655 03 03 03 03 
3cc1c 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3cc20 657 00 00 00 FF 
3cc24 658 FF 18 18 18 
3cc28 659 18 18 18 FF 
3cc2c 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3cc30 65b 0F 0F 0F 0F 
3cc34 65c 0F 0F 0F 0F | 	byte	$0f[8]
3cc38 65d 18 18 18 F8 
3cc3c 65e F8 00 00 00 
3cc40 65f 1E 06 1E 06 
3cc44 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3cc48 661 00 18 3C 7E 
3cc4c 662 18 18 18 00 
3cc50 663 00 18 18 18 
3cc54 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3cc58 665 00 18 0C 7E 
3cc5c 666 0C 18 00 00 
3cc60 667 00 18 30 7E 
3cc64 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3cc68 669 00 00 00 00 
3cc6c 66a 00 00 00 00 
3cc70 66b 00          | 	byte	$00[9]
3cc71 66b 18 18 18 18 
3cc75 66c 00 18 00 00 
3cc79 66d 66 66 66 00 
3cc7d 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3cc81 66f 66 FF 66 66 
3cc85 670 FF 66 00 18 
3cc89 671 7C 06 3C 60 
3cc8d 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3cc91 673 66 36 18 0C 
3cc95 674 66 62 00 38 
3cc99 675 6C 38 1C F6 
3cc9d 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3cca1 677 18 18 18 00 
3cca5 678 00 00 00 00 
3cca9 679 70 38 18 18 
3ccad 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3ccb1 67b 0E 1C 18 18 
3ccb5 67c 1C 0E 00 00 
3ccb9 67d 66 3C FF 3C 
3ccbd 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3ccc1 67f 18 18 7E 18 
3ccc5 680 18 00 00 00 
3ccc9 681 00 00 00 00 
3cccd 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3ccd1 683 00 00 7E 00 
3ccd5 684 00 00 00 00 
3ccd9 685 00 00 00 00 
3ccdd 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3cce1 687 60 30 18 0C 
3cce5 688 06 02 00 00 
3cce9 689 3C 66 76 6E 
3cced 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3ccf1 68b 18 1C 18 18 
3ccf5 68c 18 7E 00 00 
3ccf9 68d 3C 66 30 18 
3ccfd 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3cd01 68f 7E 30 18 30 
3cd05 690 66 3C 00 00 
3cd09 691 30 38 3C 36 
3cd0d 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3cd11 693 7E 06 3E 60 
3cd15 694 66 3C 00 00 
3cd19 695 3C 06 3E 66 
3cd1d 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3cd21 697 7E 60 30 18 
3cd25 698 0C 0C 00 00 
3cd29 699 3C 66 3C 66 
3cd2d 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3cd31 69b 3C 66 7C 60 
3cd35 69c 30 1C 00 00 
3cd39 69d 00 18 18 00 
3cd3d 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3cd41 69f 00 18 18 00 
3cd45 6a0 18 18 0C 60 
3cd49 6a1 30 18 0C 18 
3cd4d 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3cd51 6a3 00 7E 00 00 
3cd55 6a4 7E 00 00 06 
3cd59 6a5 0C 18 30 18 
3cd5d 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3cd61 6a7 3C 66 30 18 
3cd65 6a8 00 18 00 00 
3cd69 6a9 3C 66 76 76 
3cd6d 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3cd71 6ab 18 3C 66 66 
3cd75 6ac 7E 66 00 00 
3cd79 6ad 3E 66 3E 66 
3cd7d 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3cd81 6af 3C 66 06 06 
3cd85 6b0 66 3C 00 00 
3cd89 6b1 1E 36 66 66 
3cd8d 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3cd91 6b3 7E 06 3E 06 
3cd95 6b4 06 7E 00 00 
3cd99 6b5 7E 06 3E 06 
3cd9d 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3cda1 6b7 7C 06 06 76 
3cda5 6b8 66 7C 00 00 
3cda9 6b9 66 66 7E 66 
3cdad 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3cdb1 6bb 7E 18 18 18 
3cdb5 6bc 18 7E 00 00 
3cdb9 6bd 60 60 60 60 
3cdbd 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3cdc1 6bf 66 36 1E 1E 
3cdc5 6c0 36 66 00 00 
3cdc9 6c1 06 06 06 06 
3cdcd 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3cdd1 6c3 C6 EE FE D6 
3cdd5 6c4 C6 C6 00 00 
3cdd9 6c5 66 6E 7E 7E 
3cddd 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3cde1 6c7 3C 66 66 66 
3cde5 6c8 66 3C 00 00 
3cde9 6c9 3E 66 66 3E 
3cded 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3cdf1 6cb 3C 66 66 66 
3cdf5 6cc 36 6C 00 00 
3cdf9 6cd 3E 66 66 3E 
3cdfd 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3ce01 6cf 3C 06 3C 60 
3ce05 6d0 60 3C 00 00 
3ce09 6d1 7E 18 18 18 
3ce0d 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3ce11 6d3 66 66 66 66 
3ce15 6d4 66          | 	byte	$66[5]
3ce16 6d4 7E 00 00 66 
3ce1a 6d5 66 66 66 3C 
3ce1e 6d6 18 00 00 C6 
3ce22 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3ce26 6d8 C6 00 00 66 
3ce2a 6d9 66 3C 3C 66 
3ce2e 6da 66 00 00 66 
3ce32 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3ce36 6dc 18 00 00 7E 
3ce3a 6dd 30 18 0C 06 
3ce3e 6de 7E 00 00 78 
3ce42 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3ce46 6e0 78 00 00 02 
3ce4a 6e1 06 0C 18 30 
3ce4e 6e2 60 00 00 1E 
3ce52 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3ce56 6e4 1E 00 00 10 
3ce5a 6e5 38 6C C6 00 
3ce5e 6e6 00 00 00 00 
3ce62 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ce66 6e8 FF 00 00 18 
3ce6a 6e9 3C 7E 7E 3C 
3ce6e 6ea 18 00 00 00 
3ce72 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3ce76 6ec 7C 00 00 06 
3ce7a 6ed 06 3E 66 66 
3ce7e 6ee 3E 00 00 00 
3ce82 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3ce86 6f0 3C 00 00 60 
3ce8a 6f1 60 7C 66 66 
3ce8e 6f2 7C 00 00 00 
3ce92 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3ce96 6f4 3C 00 00 70 
3ce9a 6f5 18 7C 18 18 
3ce9e 6f6 18 00 00 00 
3cea2 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3cea6 6f8 60 3E 00 06 
3ceaa 6f9 06 3E 66 66 
3ceae 6fa 66 00 00 18 
3ceb2 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3ceb6 6fc 3C 00 00 60 
3ceba 6fd 00 60 60 60 
3cebe 6fe 60 3C 00 06 
3cec2 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3cec6 700 66 00 00 1C 
3ceca 701 18 18 18 18 
3cece 702 3C 00 00 00 
3ced2 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3ced6 704 C6 00 00 00 
3ceda 705 3E 66 66 66 
3cede 706 66 00 00 00 
3cee2 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3cee6 708 3C 00 00 00 
3ceea 709 3E 66 66 3E 
3ceee 70a 06 06 00 00 
3cef2 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3cef6 70c 60 60 00 00 
3cefa 70d 3E 66 06 06 
3cefe 70e 06 00 00 00 
3cf02 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3cf06 710 3E 00 00 18 
3cf0a 711 7E 18 18 18 
3cf0e 712 70 00 00 00 
3cf12 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3cf16 714 7C 00 00 00 
3cf1a 715 66 66 66 3C 
3cf1e 716 18 00 00 00 
3cf22 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3cf26 718 6C 00 00 00 
3cf2a 719 66 3C 18 3C 
3cf2e 71a 66 00 00 00 
3cf32 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3cf36 71c 30 1E 00 00 
3cf3a 71d 7E 30 18 0C 
3cf3e 71e 7E 00 00 18 
3cf42 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3cf46 720 3C 00 18 18 
3cf4a 721 18 18 18 18 
3cf4e 722 18 18 00 7E 
3cf52 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3cf56 724 60 00 10 18 
3cf5a 725 1C 1E 1C 18 
3cf5e 726 10 00 08 18 
3cf62 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3cf66 728 08 00       | 	byte	$08, $00
3cf68 729 00 6C FE FE 
3cf6c 72a 7C 38 10 00 
3cf70 72b 18 18 18 F8 
3cf74 72c F8 18 18 18 | a8_font2       file "atari8.fnt"
3cf78 72d C0 C0 C0 C0 
3cf7c 72e C0 C0 C0 C0 | 	byte	$c0[8]
3cf80 72f 18 18 18 1F 
3cf84 730 1F 00 00 00 
3cf88 731 18 18 18 1F 
3cf8c 732 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3cf90 733 00 00 00 1F 
3cf94 734 1F 18 18 18 
3cf98 735 C0 E0 70 38 
3cf9c 736 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3cfa0 737 03 07 0E 1C 
3cfa4 738 38 70 E0 C0 
3cfa8 739 80 C0 E0 F0 
3cfac 73a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3cfb0 73b 00 00 00 00 
3cfb4 73c F0 F0 F0 F0 
3cfb8 73d 01 03 07 0F 
3cfbc 73e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3cfc0 73f F0 F0 F0 F0 
3cfc4 740 00 00 00 00 
3cfc8 741 0F 0F 0F 0F 
3cfcc 742 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3cfd0 743 FF FF 00 00 
3cfd4 744 00 00 00 00 
3cfd8 745 00 00 00 00 
3cfdc 746 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3cfe0 747 00 00 00 00 
3cfe4 748 0F 0F 0F 0F 
3cfe8 749 00 38 38 EE 
3cfec 74a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3cff0 74b 00 00 00 F8 
3cff4 74c F8 18 18 18 
3cff8 74d 00 00 00 FF 
3cffc 74e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3d000 74f 18 18 18 FF 
3d004 750 FF 18 18 18 
3d008 751 00 00 3C 7E 
3d00c 752 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3d010 753 00 00 00 00 
3d014 754 FF FF FF FF 
3d018 755 03 03 03 03 
3d01c 756 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3d020 757 00 00 00 FF 
3d024 758 FF 18 18 18 
3d028 759 18 18 18 FF 
3d02c 75a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3d030 75b 0F 0F 0F 0F 
3d034 75c 0F 0F 0F 0F | 	byte	$0f[8]
3d038 75d 18 18 18 F8 
3d03c 75e F8 00 00 00 
3d040 75f 1E 06 1E 06 
3d044 760 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3d048 761 00 18 3C 7E 
3d04c 762 18 18 18 00 
3d050 763 00 18 18 18 
3d054 764 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3d058 765 00 18 0C 7E 
3d05c 766 0C 18 00 00 
3d060 767 00 18 30 7E 
3d064 768 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3d068 769 00 00 00 00 
3d06c 76a 00 00 00 00 
3d070 76b 00          | 	byte	$00[9]
3d071 76b 18 18 18 18 
3d075 76c 00 18 00 00 
3d079 76d 66 66 66 00 
3d07d 76e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3d081 76f 66 FF 66 66 
3d085 770 FF 66 00 18 
3d089 771 7C 06 3C 60 
3d08d 772 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3d091 773 66 36 18 0C 
3d095 774 66 62 00 38 
3d099 775 6C 38 1C F6 
3d09d 776 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3d0a1 777 18 18 18 00 
3d0a5 778 00 00 00 00 
3d0a9 779 70 38 18 18 
3d0ad 77a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3d0b1 77b 0E 1C 18 18 
3d0b5 77c 1C 0E 00 00 
3d0b9 77d 66 3C FF 3C 
3d0bd 77e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3d0c1 77f 18 18 7E 18 
3d0c5 780 18 00 00 00 
3d0c9 781 00 00 00 00 
3d0cd 782 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3d0d1 783 00 00 7E 00 
3d0d5 784 00 00 00 00 
3d0d9 785 00 00 00 00 
3d0dd 786 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3d0e1 787 60 30 18 0C 
3d0e5 788 06 02 00 00 
3d0e9 789 3C 66 76 6E 
3d0ed 78a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3d0f1 78b 18 1C 18 18 
3d0f5 78c 18 7E 00 00 
3d0f9 78d 3C 66 30 18 
3d0fd 78e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3d101 78f 7E 30 18 30 
3d105 790 66 3C 00 00 
3d109 791 30 38 3C 36 
3d10d 792 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3d111 793 7E 06 3E 60 
3d115 794 66 3C 00 00 
3d119 795 3C 06 3E 66 
3d11d 796 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3d121 797 7E 60 30 18 
3d125 798 0C 0C 00 00 
3d129 799 3C 66 3C 66 
3d12d 79a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3d131 79b 3C 66 7C 60 
3d135 79c 30 1C 00 00 
3d139 79d 00 18 18 00 
3d13d 79e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3d141 79f 00 18 18 00 
3d145 7a0 18 18 0C 60 
3d149 7a1 30 18 0C 18 
3d14d 7a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3d151 7a3 00 7E 00 00 
3d155 7a4 7E 00 00 06 
3d159 7a5 0C 18 30 18 
3d15d 7a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3d161 7a7 3C 66 30 18 
3d165 7a8 00 18 00 00 
3d169 7a9 3C 66 76 76 
3d16d 7aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3d171 7ab 18 3C 66 66 
3d175 7ac 7E 66 00 00 
3d179 7ad 3E 66 3E 66 
3d17d 7ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3d181 7af 3C 66 06 06 
3d185 7b0 66 3C 00 00 
3d189 7b1 1E 36 66 66 
3d18d 7b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3d191 7b3 7E 06 3E 06 
3d195 7b4 06 7E 00 00 
3d199 7b5 7E 06 3E 06 
3d19d 7b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3d1a1 7b7 7C 06 06 76 
3d1a5 7b8 66 7C 00 00 
3d1a9 7b9 66 66 7E 66 
3d1ad 7ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3d1b1 7bb 7E 18 18 18 
3d1b5 7bc 18 7E 00 00 
3d1b9 7bd 60 60 60 60 
3d1bd 7be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3d1c1 7bf 66 36 1E 1E 
3d1c5 7c0 36 66 00 00 
3d1c9 7c1 06 06 06 06 
3d1cd 7c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3d1d1 7c3 C6 EE FE D6 
3d1d5 7c4 C6 C6 00 00 
3d1d9 7c5 66 6E 7E 7E 
3d1dd 7c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3d1e1 7c7 3C 66 66 66 
3d1e5 7c8 66 3C 00 00 
3d1e9 7c9 3E 66 66 3E 
3d1ed 7ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3d1f1 7cb 3C 66 66 66 
3d1f5 7cc 36 6C 00 00 
3d1f9 7cd 3E 66 66 3E 
3d1fd 7ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3d201 7cf 3C 06 3C 60 
3d205 7d0 60 3C 00 00 
3d209 7d1 7E 18 18 18 
3d20d 7d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3d211 7d3 66 66 66 66 
3d215 7d4 66          | 	byte	$66[5]
3d216 7d4 7E 00 00 66 
3d21a 7d5 66 66 66 3C 
3d21e 7d6 18 00 00 C6 
3d222 7d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3d226 7d8 C6 00 00 66 
3d22a 7d9 66 3C 3C 66 
3d22e 7da 66 00 00 66 
3d232 7db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3d236 7dc 18 00 00 7E 
3d23a 7dd 30 18 0C 06 
3d23e 7de 7E 00 00 78 
3d242 7df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3d246 7e0 78 00 00 02 
3d24a 7e1 06 0C 18 30 
3d24e 7e2 60 00 00 1E 
3d252 7e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3d256 7e4 1E 00 00 10 
3d25a 7e5 38 6C C6 00 
3d25e 7e6 00 00 00 00 
3d262 7e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d266 7e8 FF 00 00 18 
3d26a 7e9 3C 7E 7E 3C 
3d26e 7ea 18 00 00 00 
3d272 7eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3d276 7ec 7C 00 00 06 
3d27a 7ed 06 3E 66 66 
3d27e 7ee 3E 00 00 00 
3d282 7ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3d286 7f0 3C 00 00 60 
3d28a 7f1 60 7C 66 66 
3d28e 7f2 7C 00 00 00 
3d292 7f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3d296 7f4 3C 00 00 70 
3d29a 7f5 18 7C 18 18 
3d29e 7f6 18 00 00 00 
3d2a2 7f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3d2a6 7f8 60 3E 00 06 
3d2aa 7f9 06 3E 66 66 
3d2ae 7fa 66 00 00 18 
3d2b2 7fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3d2b6 7fc 3C 00 00 60 
3d2ba 7fd 00 60 60 60 
3d2be 7fe 60 3C 00 06 
3d2c2 7ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3d2c6 800 66 00 00 1C 
3d2ca 801 18 18 18 18 
3d2ce 802 3C 00 00 00 
3d2d2 803 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3d2d6 804 C6 00 00 00 
3d2da 805 3E 66 66 66 
3d2de 806 66 00 00 00 
3d2e2 807 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3d2e6 808 3C 00 00 00 
3d2ea 809 3E 66 66 3E 
3d2ee 80a 06 06 00 00 
3d2f2 80b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3d2f6 80c 60 60 00 00 
3d2fa 80d 3E 66 06 06 
3d2fe 80e 06 00 00 00 
3d302 80f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3d306 810 3E 00 00 18 
3d30a 811 7E 18 18 18 
3d30e 812 70 00 00 00 
3d312 813 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3d316 814 7C 00 00 00 
3d31a 815 66 66 66 3C 
3d31e 816 18 00 00 00 
3d322 817 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3d326 818 6C 00 00 00 
3d32a 819 66 3C 18 3C 
3d32e 81a 66 00 00 00 
3d332 81b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3d336 81c 30 1E 00 00 
3d33a 81d 7E 30 18 0C 
3d33e 81e 7E 00 00 18 
3d342 81f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3d346 820 3C 00 18 18 
3d34a 821 18 18 18 18 
3d34e 822 18 18 00 7E 
3d352 823 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3d356 824 60 00 10 18 
3d35a 825 1C 1E 1C 18 
3d35e 826 10 00 08 18 
3d362 827 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3d366 828 08 00       | 	byte	$08, $00
3d368 829 00 00 00 00 
      ...             
3d574 8ac 00 00 00 00 
3d578 8ad 00 00       | amiga_font     file "amigafont.def"
3d57a 8ad 18 18 18 18 
3d57e 8ae 18 18       | 	byte	$18[6]
3d580 8af 00 18 18 00 
3d584 8b0 00 00 00 00 
3d588 8b1 00 00 66 66 
3d58c 8b2 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
3d590 8b3 00 00 00 00 
3d594 8b4 00 00 00 00 
3d598 8b5 00 00       | 	byte	$00[10]
3d59a 8b5 36 36 7F 36 
3d59e 8b6 36 36 7F 36 
3d5a2 8b7 36 00 00 00 
3d5a6 8b8 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
3d5aa 8b9 18 7C 06 06 
3d5ae 8ba 3C 60 60 3E 
3d5b2 8bb 18 00 00 00 
3d5b6 8bc 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
3d5ba 8bd 00 00 C6 69 
3d5be 8be 36 18 6C 96 
3d5c2 8bf 63 00 00 00 
3d5c6 8c0 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
3d5ca 8c1 1C 36 36 1E 
3d5ce 8c2 6E 3B 33 73 
3d5d2 8c3 DE 00 00 00 
3d5d6 8c4 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
3d5da 8c5 18 18 0C 00 
3d5de 8c6 00 00 00 00 
3d5e2 8c7 00 00 00 00 
3d5e6 8c8 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d5ea 8c9 30 18 0C 0C 
3d5ee 8ca 0C 0C 0C 18 
3d5f2 8cb 30 00 00 00 
3d5f6 8cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
3d5fa 8cd 0C 18 30 30 
3d5fe 8ce 30 30 30 18 
3d602 8cf 0C 00 00 00 
3d606 8d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
3d60a 8d1 00 66 66 3C 
3d60e 8d2 FF 3C 66 66 
3d612 8d3 00 00 00 00 
3d616 8d4 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
3d61a 8d5 00 18 18 18 
3d61e 8d6 7E 18 18 18 
3d622 8d7 00 00 00 00 
3d626 8d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3d62a 8d9 00 00 00 00 
3d62e 8da 00 00 00    | 	byte	$00[7]
3d631 8db 18 18 0C 00 
3d635 8dc 00 00 00 00 
3d639 8dd 00 00 00 00 
3d63d 8de 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
3d641 8df 00 00 00 00 
3d645 8e0 00 00 00 00 
3d649 8e1 00 00 00 00 
3d64d 8e2 00 00 00 00 | 	byte	$00[16]
3d651 8e3 18 18 00 00 
3d655 8e4 00 00 00 00 
3d659 8e5 00 00 C0 60 
3d65d 8e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
3d661 8e7 03 00 00 00 
3d665 8e8 00 00 00 00 
3d669 8e9 00 3C 66 66 
3d66d 8ea 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
3d671 8eb 66 3C 00 00 
3d675 8ec 00 00 00 00 
3d679 8ed 00 18 1C 1E 
3d67d 8ee 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
3d681 8ef 18 18 00 00 
3d685 8f0 00 00 00 00 
3d689 8f1 00 3C 66 60 
3d68d 8f2 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
3d691 8f3 06 7E 00 00 
3d695 8f4 00 00 00 00 
3d699 8f5 00 3C 66 60 
3d69d 8f6 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
3d6a1 8f7 66 3C 00 00 
3d6a5 8f8 00 00 00 00 
3d6a9 8f9 00 30 38 3C 
3d6ad 8fa 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
3d6b1 8fb 30 30 00 00 
3d6b5 8fc 00 00 00 00 
3d6b9 8fd 00 7E 06 06 
3d6bd 8fe 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
3d6c1 8ff 66 3C 00 00 
3d6c5 900 00 00 00 00 
3d6c9 901 00 38 0C 06 
3d6cd 902 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
3d6d1 903 66 3C 00 00 
3d6d5 904 00 00 00 00 
3d6d9 905 00 7E 60 60 
3d6dd 906 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
3d6e1 907 18 18 00 00 
3d6e5 908 00 00 00 00 
3d6e9 909 00 3C 66 66 
3d6ed 90a 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
3d6f1 90b 66 3C 00 00 
3d6f5 90c 00 00 00 00 
3d6f9 90d 00 3C 66 66 
3d6fd 90e 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
3d701 90f 30 1C 00 00 
3d705 910 00 00 00 00 
3d709 911 00 00 00 18 
3d70d 912 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
3d711 913 18 00 00 00 
3d715 914 00 00 00 00 
3d719 915 00 00 00 18 
3d71d 916 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3d721 917 18 18 0C 00 
3d725 918 00 00 00 00 
3d729 919 00 00 00 60 
3d72d 91a 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
3d731 91b 00 00 00 00 
3d735 91c 00 00 00 00 
3d739 91d 00 00 00 00 | 	byte	$00[12]
3d73d 91e 7E 00 7E 00 
3d741 91f 00 00 00 00 
3d745 920 00 00 00 00 
3d749 921 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
3d74d 922 18 60 18 06 
3d751 923 00 00 00 00 
3d755 924 00 00 00 00 
3d759 925 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
3d75d 926 60 30 18 00 
3d761 927 18 18 00 00 
3d765 928 00 00 00 00 
3d769 929 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3d76d 92a 7B 6B 7B 03 
3d771 92b 03 1E 00 00 
3d775 92c 00 00 00 00 
3d779 92d 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3d77d 92e 63 7F 63 63 
3d781 92f 63 63 00 00 
3d785 930 00 00 00 00 
3d789 931 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
3d78d 932 66 3E 66 66 
3d791 933 66 3E 00 00 
3d795 934 00 00 00 00 
3d799 935 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
3d79d 936 06 06 06 06 
3d7a1 937 0C 78 00 00 
3d7a5 938 00 00 00 00 
3d7a9 939 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
3d7ad 93a 63 63 63 63 
3d7b1 93b 33 1F 00 00 
3d7b5 93c 00 00 00 00 
3d7b9 93d 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3d7bd 93e 06 1E 06 06 
3d7c1 93f 06 7E 00 00 
3d7c5 940 00 00 00 00 
3d7c9 941 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3d7cd 942 06 1E 06 06 
3d7d1 943 06 06 00 00 
3d7d5 944 00 00 00 00 
3d7d9 945 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
3d7dd 946 06 76 66 66 
3d7e1 947 66 7C 00 00 
3d7e5 948 00 00 00 00 
3d7e9 949 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
3d7ed 94a 63 7F 63 63 
3d7f1 94b 63 63 00 00 
3d7f5 94c 00 00 00 00 
3d7f9 94d 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
3d7fd 94e 18 18 18 18 
3d801 94f 18          | 	byte	$18[5]
3d802 94f 3C 00 00 00 
3d806 950 00 00 00 00 
3d80a 951 60 60 60 60 
3d80e 952 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
3d812 953 3E 00 00 00 
3d816 954 00 00 00 00 
3d81a 955 C3 63 33 1B 
3d81e 956 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
3d822 957 C3 00 00 00 
3d826 958 00 00 00 00 
3d82a 959 03 03 03 03 
3d82e 95a 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
3d832 95b 7F 00 00 00 
3d836 95c 00 00 00 00 
3d83a 95d 63 77 7F 6B 
3d83e 95e 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
3d842 95f 63 00 00 00 
3d846 960 00 00 00 00 
3d84a 961 63 67 6F 7B 
3d84e 962 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
3d852 963 63 00 00 00 
3d856 964 00 00 00 00 
3d85a 965 3E 63 63 63 
3d85e 966 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
3d862 967 3E 00 00 00 
3d866 968 00 00 00 00 
3d86a 969 3E 66 66 66 
3d86e 96a 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
3d872 96b 06 00 00 00 
3d876 96c 00 00 00 00 
3d87a 96d 3E 63 63 63 
3d87e 96e 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
3d882 96f FE 00 00 00 
3d886 970 00 00 00 00 
3d88a 971 1F 33 33 33 
3d88e 972 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
3d892 973 63 00 00 00 
3d896 974 00 00 00 00 
3d89a 975 3C 66 06 0C 
3d89e 976 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
3d8a2 977 3C 00 00 00 
3d8a6 978 00 00 00 00 
3d8aa 979 7E 18 18 18 
3d8ae 97a 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
3d8b2 97b 18 00 00 00 
3d8b6 97c 00 00 00 00 
3d8ba 97d 63 63 63 63 
3d8be 97e 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
3d8c2 97f 3E 00 00 00 
3d8c6 980 00 00 00 00 
3d8ca 981 63 63 63 63 
3d8ce 982 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
3d8d2 983 08 00 00 00 
3d8d6 984 00 00 00 00 
3d8da 985 C3 C3 C3 C3 
3d8de 986 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
3d8e2 987 C3 00 00 00 
3d8e6 988 00 00 00 00 
3d8ea 989 C3 C3 66 3C 
3d8ee 98a 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
3d8f2 98b C3 00 00 00 
3d8f6 98c 00 00 00 00 
3d8fa 98d C3 C3 66 3C 
3d8fe 98e 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
3d902 98f 18 00 00 00 
3d906 990 00 00 00 00 
3d90a 991 7F 60 60 30 
3d90e 992 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
3d912 993 7F 00 00 00 
3d916 994 00 00 00 00 
3d91a 995 3C 0C 0C 0C 
3d91e 996 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3d922 997 3C 00 00 00 
3d926 998 00 00 00 00 
3d92a 999 00 03 06 0C 
3d92e 99a 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
3d932 99b 00 00 00 00 
3d936 99c 00 00 00 00 | 	byte	$00[8]
3d93a 99d 3C 30 30 30 
3d93e 99e 30 30 30 30 
3d942 99f 3C 00 00 00 
3d946 9a0 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
3d94a 9a1 08 1C 36 63 
3d94e 9a2 00 00 00 00 
3d952 9a3 00 00 00 00 
3d956 9a4 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d95a 9a5 00 00 00 00 
3d95e 9a6 00 00 00 00 
3d962 9a7 00          | 	byte	$00[9]
3d963 9a7 7F 00 00 00 
3d967 9a8 00 00 00 18 
3d96b 9a9 18 30 00 00 
3d96f 9aa 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
3d973 9ab 00 00 00 00 
3d977 9ac 00 00 00 00 
3d97b 9ad 00 00       | 	byte	$00[10]
3d97d 9ae 3C 60 7C 66 
3d981 9af 66 7C 00 00 
3d985 9b0 00 00 00 00 
3d989 9b1 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
3d98d 9b2 3E 66 66 66 
3d991 9b3 66 3E 00 00 
3d995 9b4 00 00 00 00 
3d999 9b5 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d99d 9b6 3C 06 06 06 
3d9a1 9b7 06 3C 00 00 
3d9a5 9b8 00 00 00 00 
3d9a9 9b9 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
3d9ad 9ba 7C 66 66 66 
3d9b1 9bb 66 7C 00 00 
3d9b5 9bc 00 00 00 00 
3d9b9 9bd 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d9bd 9be 3C 66 7E 06 
3d9c1 9bf 06 3C 00 00 
3d9c5 9c0 00 00 00 00 
3d9c9 9c1 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
3d9cd 9c2 3E 0C 0C 0C 
3d9d1 9c3 0C 0C 00 00 
3d9d5 9c4 00 00 00 00 
3d9d9 9c5 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d9dd 9c6 7C 66 66 66 
3d9e1 9c7 7C 60 60 3C 
3d9e5 9c8 00 00 00 00 
3d9e9 9c9 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
3d9ed 9ca 3E 66 66 66 
3d9f1 9cb 66 66 00 00 
3d9f5 9cc 00 00 00 00 
3d9f9 9cd 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
3d9fd 9ce 18 18 18 18 
3da01 9cf 18          | 	byte	$18[5]
3da02 9cf 30 00 00 00 
3da06 9d0 00 00 00 00 
3da0a 9d1 00 30 00 30 
3da0e 9d2 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
3da12 9d3 30 30 1E 00 
3da16 9d4 00 00 00 00 
3da1a 9d5 03 03 03 33 
3da1e 9d6 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
3da22 9d7 63 00 00 00 
3da26 9d8 00 00 00 00 
3da2a 9d9 18 18 18 18 
3da2e 9da 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3da32 9db 30 00 00 00 
3da36 9dc 00 00 00 00 
3da3a 9dd 00 00 00 37 
3da3e 9de 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
3da42 9df 63 00 00 00 
3da46 9e0 00 00 00 00 
3da4a 9e1 00 00 00 3E 
3da4e 9e2 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
3da52 9e3 66 00 00 00 
3da56 9e4 00 00 00 00 
3da5a 9e5 00 00 00 3C 
3da5e 9e6 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
3da62 9e7 3C 00 00 00 
3da66 9e8 00 00 00 00 
3da6a 9e9 00 00 00 3E 
3da6e 9ea 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
3da72 9eb 06 06 06 00 
3da76 9ec 00 00 00 00 
3da7a 9ed 00 00 00 7C 
3da7e 9ee 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
3da82 9ef 60 60 60 00 
3da86 9f0 00 00 00 00 
3da8a 9f1 00 00 00 3E 
3da8e 9f2 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
3da92 9f3 06 00 00 00 
3da96 9f4 00 00 00 00 
3da9a 9f5 00 00 00 3C 
3da9e 9f6 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
3daa2 9f7 3E 00 00 00 
3daa6 9f8 00 00 00 00 
3daaa 9f9 00 0C 0C 3E 
3daae 9fa 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
3dab2 9fb 38 00 00 00 
3dab6 9fc 00 00 00 00 
3daba 9fd 00 00 00 66 
3dabe 9fe 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
3dac2 9ff 7C 00 00 00 
3dac6 a00 00 00 00 00 
3daca a01 00 00 00 66 
3dace a02 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3dad2 a03 18 00 00 00 
3dad6 a04 00 00 00 00 
3dada a05 00 00 00 63 
3dade a06 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
3dae2 a07 36 00 00 00 
3dae6 a08 00 00 00 00 
3daea a09 00 00 00 63 
3daee a0a 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
3daf2 a0b 63 00 00 00 
3daf6 a0c 00 00 00 00 
3dafa a0d 00 00 00 66 
3dafe a0e 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3db02 a0f 18 0C 06 00 
3db06 a10 00 00 00 00 
3db0a a11 00 00 00 7E 
3db0e a12 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
3db12 a13 7E 00 00 00 
3db16 a14 00 00 00 00 
3db1a a15 70 18 18 18 
3db1e a16 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
3db22 a17 70 00 00 00 
3db26 a18 00 00 00 00 
3db2a a19 18 18 18 18 
3db2e a1a 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3db32 a1b 18 00 00 00 
3db36 a1c 00 00 00 00 
3db3a a1d 0E 18 18 18 
3db3e a1e 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
3db42 a1f 0E 00 00 00 
3db46 a20 00 00 00 00 
3db4a a21 46 5D 31 00 
3db4e a22 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
3db52 a23 00 00 00 00 
3db56 a24 00 00 00 00 | 	byte	$00[8]
3db5a a25 C0 F0 3C 0F 
3db5e a26 C3 F0 3C 0F 
3db62 a27 03 00 00 00 
3db66 a28 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
3db6a a29 18 18 00 18 
3db6e a2a 18 18 18 18 
3db72 a2b 18 00 00 00 
3db76 a2c 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3db7a a2d 18 18 7E 1B 
3db7e a2e 1B 7E 18 18 
3db82 a2f 00 00 00 00 
3db86 a30 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3db8a a31 78 CC 0C 0C 
3db8e a32 1E 0C 0C 06 
3db92 a33 7F 00 00 00 
3db96 a34 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3db9a a35 66 3C 66 66 
3db9e a36 3C 66 00 00 
3dba2 a37 00 00 00 00 
3dba6 a38 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dbaa a39 C3 C3 66 3C 
3dbae a3a 18 7E 18 18 
3dbb2 a3b 18 00 00 00 
3dbb6 a3c 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3dbba a3d 18 18 18 18 
3dbbe a3e 00 18 18 18 
3dbc2 a3f 18 00 00 00 
3dbc6 a40 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3dbca a41 3C 06 06 3C 
3dbce a42 66 66 66 3C 
3dbd2 a43 60 60 3C 00 
3dbd6 a44 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3dbda a45 66 66 00 00 
3dbde a46 00 00 00 00 
3dbe2 a47 00 00 00 00 
3dbe6 a48 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dbea a49 7E 81 B9 85 
3dbee a4a 85 B9 81 7E 
3dbf2 a4b 00 00 00 00 
3dbf6 a4c 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3dbfa a4d 3C 33 33 7E 
3dbfe a4e 00 7F 00 00 
3dc02 a4f 00 00 00 00 
3dc06 a50 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dc0a a51 00 00 CC 66 
3dc0e a52 33 66 CC 00 
3dc12 a53 00 00 00 00 
3dc16 a54 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dc1a a55 7E 60 60 00 
3dc1e a56 00 00 00 00 
3dc22 a57 00 00 00 00 
3dc26 a58 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dc2a a59 7E 81 9D A5 
3dc2e a5a 9D A5 81 7E 
3dc32 a5b 00 00 00 00 
3dc36 a5c 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3dc3a a5d 7E 00 00 00 
3dc3e a5e 00 00 00 00 
3dc42 a5f 00 00 00 00 
3dc46 a60 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dc4a a61 3C 66 66 3C 
3dc4e a62 00 00 00 00 
3dc52 a63 00 00 00 00 
3dc56 a64 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dc5a a65 18 18 18 7E 
3dc5e a66 18 18 18 00 
3dc62 a67 7E 00 00 00 
3dc66 a68 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
3dc6a a69 1E 30 30 18 
3dc6e a6a 0C 06 3E 00 
3dc72 a6b 00 00 00 00 
3dc76 a6c 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dc7a a6d 1E 30 30 1C 
3dc7e a6e 30 30 1E 00 
3dc82 a6f 00 00 00 00 
3dc86 a70 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dc8a a71 30 18 0C 06 
3dc8e a72 00 00 00 00 
3dc92 a73 00 00 00 00 
3dc96 a74 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dc9a a75 00 00 00 66 
3dc9e a76 66 66 66 66 
3dca2 a77 FE 06 06 00 
3dca6 a78 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3dcaa a79 7C 5E 5E 5E 
3dcae a7a 5C 50 50 50 
3dcb2 a7b 50 50 00 00 
3dcb6 a7c 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3dcba a7d 00 00 00 18 
3dcbe a7e 18 00 00 00 
3dcc2 a7f 00 00 00 00 
3dcc6 a80 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dcca a81 00 00 00 00 
3dcce a82 00 00 00 00 
3dcd2 a83 00          | 	byte	$00[9]
3dcd3 a83 30 18 00 00 
3dcd7 a84 00 00 00 18 
3dcdb a85 1C 18 18 18 
3dcdf a86 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
3dce3 a87 00 00 00 00 
3dce7 a88 00 00 00    | 	byte	$00[7]
3dcea a89 3C 66 66 3C 
3dcee a8a 00 7E 00 00 
3dcf2 a8b 00 00 00 00 
3dcf6 a8c 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dcfa a8d 00 00 33 66 
3dcfe a8e CC 66 33 00 
3dd02 a8f 00 00 00 00 
3dd06 a90 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dd0a a91 02 63 32 1A 
3dd0e a92 4E 66 F3 40 
3dd12 a93 40 00 00 00 
3dd16 a94 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3dd1a a95 04 C6 64 34 
3dd1e a96 7C 8C 46 23 
3dd22 a97 F0 00 00 00 
3dd26 a98 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3dd2a a99 03 C4 66 34 
3dd2e a9a 5B 6C F6 43 
3dd32 a9b 40 00 00 00 
3dd36 a9c 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
3dd3a a9d 18 18 00 18 
3dd3e a9e 0C 06 06 66 
3dd42 a9f 3C 00 00 00 
3dd46 aa0 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dd4a aa1 06 0C 3E 63 
3dd4e aa2 63 7F 63 63 
3dd52 aa3 63 00 00 00 
3dd56 aa4 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3dd5a aa5 30 18 3E 63 
3dd5e aa6 63 7F 63 63 
3dd62 aa7 63 00 00 00 
3dd66 aa8 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3dd6a aa9 0C 33 3E 63 
3dd6e aaa 63 63 7F 63 
3dd72 aab 63 00 00 00 
3dd76 aac 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3dd7a aad 4E 39 3E 63 
3dd7e aae 63 7F 63 63 
3dd82 aaf 63 00 00 00 
3dd86 ab0 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3dd8a ab1 63 00 3E 63 
3dd8e ab2 63 7F 63 63 
3dd92 ab3 63 00 00 00 
3dd96 ab4 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3dd9a ab5 1C 22 1C 36 
3dd9e ab6 63 63 7F 63 
3dda2 ab7 63 00 00 00 
3dda6 ab8 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ddaa ab9 F8 3C 3C 36 
3ddae aba F6 3F 33 33 
3ddb2 abb F3 00 00 00 
3ddb6 abc 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3ddba abd 78 0C 06 06 
3ddbe abe 06 06 06 0C 
3ddc2 abf 78 30 18 00 
3ddc6 ac0 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3ddca ac1 0C 18 7E 06 
3ddce ac2 06 3E 06 06 
3ddd2 ac3 7E 00 00 00 
3ddd6 ac4 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3ddda ac5 30 18 7E 06 
3ddde ac6 06 3E 06 06 
3dde2 ac7 7E 00 00 00 
3dde6 ac8 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3ddea ac9 18 66 7E 06 
3ddee aca 06 3E 06 06 
3ddf2 acb 7E 00 00 00 
3ddf6 acc 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3ddfa acd 66 00 7E 06 
3ddfe ace 06 3E 06 06 
3de02 acf 7E 00 00 00 
3de06 ad0 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3de0a ad1 0C 18 3C 18 
3de0e ad2 18 18 18 18 
3de12 ad3 3C 00 00 00 
3de16 ad4 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3de1a ad5 30 18 3C 18 
3de1e ad6 18 18 18 18 
3de22 ad7 3C 00 00 00 
3de26 ad8 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3de2a ad9 18 66 3C 18 
3de2e ada 18 18 18 18 
3de32 adb 3C 00 00 00 
3de36 adc 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3de3a add 66 00 3C 18 
3de3e ade 18 18 18 18 
3de42 adf 3C 00 00 00 
3de46 ae0 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3de4a ae1 1E 36 66 66 
3de4e ae2 6F 66 66 36 
3de52 ae3 1E 00 00 00 
3de56 ae4 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
3de5a ae5 8E 73 67 6F 
3de5e ae6 7B 73 63 63 
3de62 ae7 63 00 00 00 
3de66 ae8 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3de6a ae9 06 0C 3E 63 
3de6e aea 63 63 63 63 
3de72 aeb 3E 00 00 00 
3de76 aec 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3de7a aed 30 18 3E 63 
3de7e aee 63 63 63 63 
3de82 aef 3E 00 00 00 
3de86 af0 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3de8a af1 0C 33 3E 63 
3de8e af2 63 63 63 63 
3de92 af3 3E 00 00 00 
3de96 af4 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3de9a af5 8E 71 3E 63 
3de9e af6 63 63 63 63 
3dea2 af7 3E 00 00 00 
3dea6 af8 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3deaa af9 63 00 3E 63 
3deae afa 63 63 63 63 
3deb2 afb 3E 00 00 00 
3deb6 afc 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3deba afd 00 00 63 36 
3debe afe 1C 1C 36 63 
3dec2 aff 00 00 00 00 
3dec6 b00 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3deca b01 BE 63 73 7B 
3dece b02 6B 6F 67 63 
3ded2 b03 3F 00 00 00 
3ded6 b04 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3deda b05 0C 18 63 63 
3dede b06 63 63 63 63 
3dee2 b07 3E 00 00 00 
3dee6 b08 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3deea b09 18 0C 63 63 
3deee b0a 63 63 63 63 
3def2 b0b 3E 00 00 00 
3def6 b0c 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3defa b0d 08 36 63 63 
3defe b0e 63 63 63 63 
3df02 b0f 3E 00 00 00 
3df06 b10 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3df0a b11 63 00 63 63 
3df0e b12 63 63 63 63 
3df12 b13 3E 00 00 00 
3df16 b14 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3df1a b15 30 18 C3 66 
3df1e b16 3C 18 18 18 
3df22 b17 18 00 00 00 
3df26 b18 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3df2a b19 03 03 3F 63 
3df2e b1a 63 3F 03 03 
3df32 b1b 03 00 00 00 
3df36 b1c 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
3df3a b1d 3C 66 66 66 
3df3e b1e 36 66 66 66 
3df42 b1f 36 06 06 00 
3df46 b20 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
3df4a b21 06 0C 00 3C 
3df4e b22 60 7C 66 66 
3df52 b23 7C 00 00 00 
3df56 b24 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3df5a b25 60 30 00 3C 
3df5e b26 60 7C 66 66 
3df62 b27 7C 00 00 00 
3df66 b28 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3df6a b29 18 66 00 3C 
3df6e b2a 60 7C 66 66 
3df72 b2b 7C 00 00 00 
3df76 b2c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3df7a b2d 8E 71 00 3C 
3df7e b2e 60 7C 66 66 
3df82 b2f 7C 00 00 00 
3df86 b30 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3df8a b31 00 66 00 3C 
3df8e b32 60 7C 66 66 
3df92 b33 7C 00 00 00 
3df96 b34 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3df9a b35 18 24 18 3C 
3df9e b36 60 7C 66 66 
3dfa2 b37 7C 00 00 00 
3dfa6 b38 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dfaa b39 00 00 00 7E 
3dfae b3a D8 FE 1B 1B 
3dfb2 b3b EE 00 00 00 
3dfb6 b3c 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3dfba b3d 00 00 00 3C 
3dfbe b3e 06 06 06 06 
3dfc2 b3f 3C 18 0C 00 
3dfc6 b40 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3dfca b41 06 0C 00 3C 
3dfce b42 66 7E 06 06 
3dfd2 b43 3C 00 00 00 
3dfd6 b44 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3dfda b45 60 30 00 3C 
3dfde b46 66 7E 06 06 
3dfe2 b47 3C 00 00 00 
3dfe6 b48 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3dfea b49 18 66 00 3C 
3dfee b4a 66 7E 06 06 
3dff2 b4b 3C 00 00 00 
3dff6 b4c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3dffa b4d 00 66 00 3C 
3dffe b4e 66 7E 06 06 
3e002 b4f 3C 00 00 00 
3e006 b50 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3e00a b51 0C 18 00 18 
3e00e b52 18 18 18 18 
3e012 b53 30 00 00 00 
3e016 b54 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3e01a b55 18 0C 00 0C 
3e01e b56 0C 0C 0C 0C 
3e022 b57 18 00 00 00 
3e026 b58 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3e02a b59 18 66 00 18 
3e02e b5a 18 18 18 18 
3e032 b5b 30 00 00 00 
3e036 b5c 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3e03a b5d 00 66 00 18 
3e03e b5e 18 18 18 18 
3e042 b5f 30 00 00 00 
3e046 b60 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3e04a b61 03 06 3F 18 
3e04e b62 3C 66 66 66 
3e052 b63 3C 00 00 00 
3e056 b64 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e05a b65 8E 71 00 3E 
3e05e b66 66 66 66 66 
3e062 b67 66 00 00 00 
3e066 b68 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3e06a b69 06 0C 00 3C 
3e06e b6a 66 66 66 66 
3e072 b6b 3C 00 00 00 
3e076 b6c 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e07a b6d 60 30 00 3C 
3e07e b6e 66 66 66 66 
3e082 b6f 3C 00 00 00 
3e086 b70 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e08a b71 18 66 00 3C 
3e08e b72 66 66 66 66 
3e092 b73 3C 00 00 00 
3e096 b74 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e09a b75 8E 71 00 3C 
3e09e b76 66 66 66 66 
3e0a2 b77 3C 00 00 00 
3e0a6 b78 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e0aa b79 00 66 00 3C 
3e0ae b7a 66 66 66 66 
3e0b2 b7b 3C 00 00 00 
3e0b6 b7c 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e0ba b7d 00 18 18 00 
3e0be b7e 7E 00 18 18 
3e0c2 b7f 00 00 00 00 
3e0c6 b80 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3e0ca b81 00 00 00 7E 
3e0ce b82 73 7B 6F 67 
3e0d2 b83 3F 00 00 00 
3e0d6 b84 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3e0da b85 0C 18 00 66 
3e0de b86 66 66 66 66 
3e0e2 b87 7C 00 00 00 
3e0e6 b88 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e0ea b89 30 18 00 66 
3e0ee b8a 66 66 66 66 
3e0f2 b8b 7C 00 00 00 
3e0f6 b8c 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e0fa b8d 18 66 00 66 
3e0fe b8e 66 66 66 66 
3e102 b8f 7C 00 00 00 
3e106 b90 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e10a b91 00 66 00 66 
3e10e b92 66 66 66 66 
3e112 b93 7C 00 00 00 
3e116 b94 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e11a b95 30 18 00 66 
3e11e b96 66 66 66 3C 
3e122 b97 18 0C 06 00 
3e126 b98 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3e12a b99 06 06 06 3E 
3e12e b9a 66 66 66 3E 
3e132 b9b 06 06 06 00 
3e136 b9c 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
3e13a b9d 00 66 00 66 
3e13e b9e 66 66 66 3C 
3e142 b9f 18 0C 06 00 
3e146 ba0 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3e14a ba1 00 7E 66 66 
3e14e ba2 66 66 66 66 
3e152 ba3 66 7E 00 00 
3e156 ba4 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
3e15a ba5 00 00 00 00 
      ...             
3e362 c27 00 00 00 00 
3e366 c28 00 00       | 	byte	$00[526]
3e368 c29 00 00 00 00 
3e36c c2a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3e36d c2a 80 00 00 00 
3e371 c2b 00 80 00 00 
3e375 c2c 80 80 00 00 
3e379 c2d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3e37d c2e 80 00 80 00 
3e381 c2f 00 40 80 00 
3e385 c30 AA AA AA 00 
3e389 c31 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3e38d c32 FF 00 00 00 
3e391 c33 00 FF 00 00 
3e395 c34 FF FF 00 00 
3e399 c35 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3e39d c36 FF 00 FF 00 
3e3a1 c37 00 FF FF 00 
3e3a5 c38 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3e3a8 c39 00 00 00 00 
3e3ac c3a 00          | ataripalette   file "ataripalettep2.def"
3e3ad c3a 11 11 11 00 
3e3b1 c3b 22 22 22 00 
3e3b5 c3c 33 33 33 00 
3e3b9 c3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3e3bd c3e 55 55 55 00 
3e3c1 c3f 66 66 66 00 
3e3c5 c40 77 77 77 00 
3e3c9 c41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3e3cd c42 99 99 99 00 
3e3d1 c43 AA AA AA 00 
3e3d5 c44 BB BB BB 00 
3e3d9 c45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3e3dd c46 DD DD DD 00 
3e3e1 c47 EE EE EE 00 
3e3e5 c48 FF FF FF 00 
3e3e9 c49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3e3ed c4a 00 14 40 00 
3e3f1 c4b 00 1E 60 00 
3e3f5 c4c 00 28 80 00 
3e3f9 c4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3e3fd c4e 00 3C BF 00 
3e401 c4f 00 46 DF 00 
3e405 c50 00 50 FF 00 
3e409 c51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3e40d c52 39 77 FF 00 
3e411 c53 55 8A FF 00 
3e415 c54 71 9E FF 00 
3e419 c55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3e41d c56 AA C5 FF 00 
3e421 c57 C6 D8 FF 00 
3e425 c58 E3 EC FF 00 
3e429 c59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3e42d c5a 00 00 40 00 
3e431 c5b 00 00 60 00 
3e435 c5c 00 00 80 00 
3e439 c5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3e43d c5e 00 00 BF 00 
3e441 c5f 00 00 DF 00 
3e445 c60 00 00 FF 00 
3e449 c61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3e44d c62 39 39 FF 00 
3e451 c63 55 55 FF 00 
3e455 c64 71 71 FF 00 
3e459 c65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3e45d c66 AA AA FF 00 
3e461 c67 C6 C6 FF 00 
3e465 c68 E3 E3 FF 00 
3e469 c69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3e46d c6a 20 00 40 00 
3e471 c6b 30 00 60 00 
3e475 c6c 40 00 80 00 
3e479 c6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3e47d c6e 60 00 BF 00 
3e481 c6f 70 00 DF 00 
3e485 c70 80 00 FF 00 
3e489 c71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3e48d c72 9C 39 FF 00 
3e491 c73 AA 55 FF 00 
3e495 c74 B8 71 FF 00 
3e499 c75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3e49d c76 D5 AA FF 00 
3e4a1 c77 E3 C6 FF 00 
3e4a5 c78 F1 E3 FF 00 
3e4a9 c79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3e4ad c7a 40 00 40 00 
3e4b1 c7b 60 00 60 00 
3e4b5 c7c 80 00 80 00 
3e4b9 c7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3e4bd c7e BF 00 BF 00 
3e4c1 c7f DF 00 DF 00 
3e4c5 c80 FF 00 FF 00 
3e4c9 c81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3e4cd c82 FF 39 FF 00 
3e4d1 c83 FF 55 FF 00 
3e4d5 c84 FF 71 FF 00 
3e4d9 c85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3e4dd c86 FF AA FF 00 
3e4e1 c87 FF C6 FF 00 
3e4e5 c88 FF E3 FF 00 
3e4e9 c89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3e4ed c8a 40 00 20 00 
3e4f1 c8b 60 00 30 00 
3e4f5 c8c 80 00 40 00 
3e4f9 c8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3e4fd c8e BF 00 60 00 
3e501 c8f DF 00 70 00 
3e505 c90 FF 00 80 00 
3e509 c91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3e50d c92 FF 39 9C 00 
3e511 c93 FF 55 AA 00 
3e515 c94 FF 71 B8 00 
3e519 c95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3e51d c96 FF AA D5 00 
3e521 c97 FF C6 E3 00 
3e525 c98 FF E3 F1 00 
3e529 c99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3e52d c9a 40 00 00 00 
3e531 c9b 60 00 00 00 
3e535 c9c 80 00 00 00 
3e539 c9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3e53d c9e BF 00 00 00 
3e541 c9f DF 00 00 00 
3e545 ca0 FF 00 00 00 
3e549 ca1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3e54d ca2 FF 39 39 00 
3e551 ca3 FF 55 55 00 
3e555 ca4 FF 71 71 00 
3e559 ca5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3e55d ca6 FF AA AA 00 
3e561 ca7 FF C6 C6 00 
3e565 ca8 FF E3 E3 00 
3e569 ca9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3e56d caa 40 10 00 00 
3e571 cab 60 18 00 00 
3e575 cac 80 20 00 00 
3e579 cad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3e57d cae BF 30 00 00 
3e581 caf DF 38 00 00 
3e585 cb0 FF 40 00 00 
3e589 cb1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3e58d cb2 FF 6A 39 00 
3e591 cb3 FF 80 55 00 
3e595 cb4 FF 95 71 00 
3e599 cb5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3e59d cb6 FF BF AA 00 
3e5a1 cb7 FF D5 C6 00 
3e5a5 cb8 FF EA E3 00 
3e5a9 cb9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3e5ad cba 40 20 00 00 
3e5b1 cbb 60 30 00 00 
3e5b5 cbc 80 40 00 00 
3e5b9 cbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3e5bd cbe BF 60 00 00 
3e5c1 cbf DF 70 00 00 
3e5c5 cc0 FF 80 00 00 
3e5c9 cc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3e5cd cc2 FF 9C 39 00 
3e5d1 cc3 FF AA 55 00 
3e5d5 cc4 FF B8 71 00 
3e5d9 cc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3e5dd cc6 FF D5 AA 00 
3e5e1 cc7 FF E3 C6 00 
3e5e5 cc8 FF F1 E3 00 
3e5e9 cc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3e5ed cca 40 30 00 00 
3e5f1 ccb 60 48 00 00 
3e5f5 ccc 80 60 00 00 
3e5f9 ccd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3e5fd cce BF 90 00 00 
3e601 ccf DF A8 00 00 
3e605 cd0 FF C0 00 00 
3e609 cd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3e60d cd2 FF CE 39 00 
3e611 cd3 FF D5 55 00 
3e615 cd4 FF DC 71 00 
3e619 cd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3e61d cd6 FF EA AA 00 
3e621 cd7 FF F1 C6 00 
3e625 cd8 FF F8 E3 00 
3e629 cd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3e62d cda 30 40 00 00 
3e631 cdb 48 60 00 00 
3e635 cdc 60 80 00 00 
3e639 cdd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3e63d cde 90 BF 00 00 
3e641 cdf A8 DF 00 00 
3e645 ce0 C0 FF 00 00 
3e649 ce1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3e64d ce2 CE FF 39 00 
3e651 ce3 D5 FF 55 00 
3e655 ce4 DC FF 71 00 
3e659 ce5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3e65d ce6 EA FF AA 00 
3e661 ce7 F1 FF C6 00 
3e665 ce8 F8 FF E3 00 
3e669 ce9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3e66d cea 00 40 00 00 
3e671 ceb 00 60 00 00 
3e675 cec 00 80 00 00 
3e679 ced 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3e67d cee 00 BF 00 00 
3e681 cef 00 DF 00 00 
3e685 cf0 00 FF 00 00 
3e689 cf1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3e68d cf2 39 FF 39 00 
3e691 cf3 55 FF 55 00 
3e695 cf4 71 FF 71 00 
3e699 cf5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3e69d cf6 AA FF AA 00 
3e6a1 cf7 C6 FF C6 00 
3e6a5 cf8 E3 FF E3 00 
3e6a9 cf9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3e6ad cfa 00 40 14 00 
3e6b1 cfb 00 60 1E 00 
3e6b5 cfc 00 80 28 00 
3e6b9 cfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3e6bd cfe 00 BF 3C 00 
3e6c1 cff 00 DF 46 00 
3e6c5 d00 00 FF 50 00 
3e6c9 d01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3e6cd d02 39 FF 77 00 
3e6d1 d03 55 FF 8A 00 
3e6d5 d04 71 FF 9E 00 
3e6d9 d05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3e6dd d06 AA FF C5 00 
3e6e1 d07 C6 FF D8 00 
3e6e5 d08 E3 FF EC 00 
3e6e9 d09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3e6ed d0a 00 40 28 00 
3e6f1 d0b 00 60 3C 00 
3e6f5 d0c 00 80 50 00 
3e6f9 d0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3e6fd d0e 00 BF 78 00 
3e701 d0f 00 DF 8C 00 
3e705 d10 00 FF A0 00 
3e709 d11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3e70d d12 39 FF B5 00 
3e711 d13 55 FF C0 00 
3e715 d14 71 FF CA 00 
3e719 d15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3e71d d16 AA FF DF 00 
3e721 d17 C6 FF EA 00 
3e725 d18 E3 FF F4 00 
3e729 d19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3e72d d1a 00 40 40 00 
3e731 d1b 00 60 60 00 
3e735 d1c 00 80 80 00 
3e739 d1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3e73d d1e 00 BF BF 00 
3e741 d1f 00 DF DF 00 
3e745 d20 00 FF FF 00 
3e749 d21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3e74d d22 39 FF FF 00 
3e751 d23 55 FF FF 00 
3e755 d24 71 FF FF 00 
3e759 d25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3e75d d26 AA FF FF 00 
3e761 d27 C6 FF FF 00 
3e765 d28 E3 FF FF 00 
3e769 d29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3e76d d2a 00 28 40 00 
3e771 d2b 00 3C 60 00 
3e775 d2c 00 50 80 00 
3e779 d2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3e77d d2e 00 78 BF 00 
3e781 d2f 00 8C DF 00 
3e785 d30 00 A0 FF 00 
3e789 d31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3e78d d32 39 B5 FF 00 
3e791 d33 55 C0 FF 00 
3e795 d34 71 CA FF 00 
3e799 d35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3e79d d36 AA DF FF 00 
3e7a1 d37 C6 EA FF 00 
3e7a5 d38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3e7a8 d39 00 00 00 00 
3e7ac d3a 00          | ataripalette2  file "ataripalettep2.def"
3e7ad d3a 11 11 11 00 
3e7b1 d3b 22 22 22 00 
3e7b5 d3c 33 33 33 00 
3e7b9 d3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3e7bd d3e 55 55 55 00 
3e7c1 d3f 66 66 66 00 
3e7c5 d40 77 77 77 00 
3e7c9 d41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3e7cd d42 99 99 99 00 
3e7d1 d43 AA AA AA 00 
3e7d5 d44 BB BB BB 00 
3e7d9 d45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3e7dd d46 DD DD DD 00 
3e7e1 d47 EE EE EE 00 
3e7e5 d48 FF FF FF 00 
3e7e9 d49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3e7ed d4a 00 14 40 00 
3e7f1 d4b 00 1E 60 00 
3e7f5 d4c 00 28 80 00 
3e7f9 d4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3e7fd d4e 00 3C BF 00 
3e801 d4f 00 46 DF 00 
3e805 d50 00 50 FF 00 
3e809 d51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3e80d d52 39 77 FF 00 
3e811 d53 55 8A FF 00 
3e815 d54 71 9E FF 00 
3e819 d55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3e81d d56 AA C5 FF 00 
3e821 d57 C6 D8 FF 00 
3e825 d58 E3 EC FF 00 
3e829 d59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3e82d d5a 00 00 40 00 
3e831 d5b 00 00 60 00 
3e835 d5c 00 00 80 00 
3e839 d5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3e83d d5e 00 00 BF 00 
3e841 d5f 00 00 DF 00 
3e845 d60 00 00 FF 00 
3e849 d61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3e84d d62 39 39 FF 00 
3e851 d63 55 55 FF 00 
3e855 d64 71 71 FF 00 
3e859 d65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3e85d d66 AA AA FF 00 
3e861 d67 C6 C6 FF 00 
3e865 d68 E3 E3 FF 00 
3e869 d69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3e86d d6a 20 00 40 00 
3e871 d6b 30 00 60 00 
3e875 d6c 40 00 80 00 
3e879 d6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3e87d d6e 60 00 BF 00 
3e881 d6f 70 00 DF 00 
3e885 d70 80 00 FF 00 
3e889 d71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3e88d d72 9C 39 FF 00 
3e891 d73 AA 55 FF 00 
3e895 d74 B8 71 FF 00 
3e899 d75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3e89d d76 D5 AA FF 00 
3e8a1 d77 E3 C6 FF 00 
3e8a5 d78 F1 E3 FF 00 
3e8a9 d79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3e8ad d7a 40 00 40 00 
3e8b1 d7b 60 00 60 00 
3e8b5 d7c 80 00 80 00 
3e8b9 d7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3e8bd d7e BF 00 BF 00 
3e8c1 d7f DF 00 DF 00 
3e8c5 d80 FF 00 FF 00 
3e8c9 d81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3e8cd d82 FF 39 FF 00 
3e8d1 d83 FF 55 FF 00 
3e8d5 d84 FF 71 FF 00 
3e8d9 d85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3e8dd d86 FF AA FF 00 
3e8e1 d87 FF C6 FF 00 
3e8e5 d88 FF E3 FF 00 
3e8e9 d89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3e8ed d8a 40 00 20 00 
3e8f1 d8b 60 00 30 00 
3e8f5 d8c 80 00 40 00 
3e8f9 d8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3e8fd d8e BF 00 60 00 
3e901 d8f DF 00 70 00 
3e905 d90 FF 00 80 00 
3e909 d91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3e90d d92 FF 39 9C 00 
3e911 d93 FF 55 AA 00 
3e915 d94 FF 71 B8 00 
3e919 d95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3e91d d96 FF AA D5 00 
3e921 d97 FF C6 E3 00 
3e925 d98 FF E3 F1 00 
3e929 d99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3e92d d9a 40 00 00 00 
3e931 d9b 60 00 00 00 
3e935 d9c 80 00 00 00 
3e939 d9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3e93d d9e BF 00 00 00 
3e941 d9f DF 00 00 00 
3e945 da0 FF 00 00 00 
3e949 da1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3e94d da2 FF 39 39 00 
3e951 da3 FF 55 55 00 
3e955 da4 FF 71 71 00 
3e959 da5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3e95d da6 FF AA AA 00 
3e961 da7 FF C6 C6 00 
3e965 da8 FF E3 E3 00 
3e969 da9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3e96d daa 40 10 00 00 
3e971 dab 60 18 00 00 
3e975 dac 80 20 00 00 
3e979 dad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3e97d dae BF 30 00 00 
3e981 daf DF 38 00 00 
3e985 db0 FF 40 00 00 
3e989 db1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3e98d db2 FF 6A 39 00 
3e991 db3 FF 80 55 00 
3e995 db4 FF 95 71 00 
3e999 db5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3e99d db6 FF BF AA 00 
3e9a1 db7 FF D5 C6 00 
3e9a5 db8 FF EA E3 00 
3e9a9 db9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3e9ad dba 40 20 00 00 
3e9b1 dbb 60 30 00 00 
3e9b5 dbc 80 40 00 00 
3e9b9 dbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3e9bd dbe BF 60 00 00 
3e9c1 dbf DF 70 00 00 
3e9c5 dc0 FF 80 00 00 
3e9c9 dc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3e9cd dc2 FF 9C 39 00 
3e9d1 dc3 FF AA 55 00 
3e9d5 dc4 FF B8 71 00 
3e9d9 dc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3e9dd dc6 FF D5 AA 00 
3e9e1 dc7 FF E3 C6 00 
3e9e5 dc8 FF F1 E3 00 
3e9e9 dc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3e9ed dca 40 30 00 00 
3e9f1 dcb 60 48 00 00 
3e9f5 dcc 80 60 00 00 
3e9f9 dcd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3e9fd dce BF 90 00 00 
3ea01 dcf DF A8 00 00 
3ea05 dd0 FF C0 00 00 
3ea09 dd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3ea0d dd2 FF CE 39 00 
3ea11 dd3 FF D5 55 00 
3ea15 dd4 FF DC 71 00 
3ea19 dd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3ea1d dd6 FF EA AA 00 
3ea21 dd7 FF F1 C6 00 
3ea25 dd8 FF F8 E3 00 
3ea29 dd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3ea2d dda 30 40 00 00 
3ea31 ddb 48 60 00 00 
3ea35 ddc 60 80 00 00 
3ea39 ddd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3ea3d dde 90 BF 00 00 
3ea41 ddf A8 DF 00 00 
3ea45 de0 C0 FF 00 00 
3ea49 de1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3ea4d de2 CE FF 39 00 
3ea51 de3 D5 FF 55 00 
3ea55 de4 DC FF 71 00 
3ea59 de5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3ea5d de6 EA FF AA 00 
3ea61 de7 F1 FF C6 00 
3ea65 de8 F8 FF E3 00 
3ea69 de9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3ea6d dea 00 40 00 00 
3ea71 deb 00 60 00 00 
3ea75 dec 00 80 00 00 
3ea79 ded 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3ea7d dee 00 BF 00 00 
3ea81 def 00 DF 00 00 
3ea85 df0 00 FF 00 00 
3ea89 df1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3ea8d df2 39 FF 39 00 
3ea91 df3 55 FF 55 00 
3ea95 df4 71 FF 71 00 
3ea99 df5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3ea9d df6 AA FF AA 00 
3eaa1 df7 C6 FF C6 00 
3eaa5 df8 E3 FF E3 00 
3eaa9 df9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3eaad dfa 00 40 14 00 
3eab1 dfb 00 60 1E 00 
3eab5 dfc 00 80 28 00 
3eab9 dfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3eabd dfe 00 BF 3C 00 
3eac1 dff 00 DF 46 00 
3eac5 e00 00 FF 50 00 
3eac9 e01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3eacd e02 39 FF 77 00 
3ead1 e03 55 FF 8A 00 
3ead5 e04 71 FF 9E 00 
3ead9 e05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3eadd e06 AA FF C5 00 
3eae1 e07 C6 FF D8 00 
3eae5 e08 E3 FF EC 00 
3eae9 e09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3eaed e0a 00 40 28 00 
3eaf1 e0b 00 60 3C 00 
3eaf5 e0c 00 80 50 00 
3eaf9 e0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3eafd e0e 00 BF 78 00 
3eb01 e0f 00 DF 8C 00 
3eb05 e10 00 FF A0 00 
3eb09 e11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3eb0d e12 39 FF B5 00 
3eb11 e13 55 FF C0 00 
3eb15 e14 71 FF CA 00 
3eb19 e15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3eb1d e16 AA FF DF 00 
3eb21 e17 C6 FF EA 00 
3eb25 e18 E3 FF F4 00 
3eb29 e19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3eb2d e1a 00 40 40 00 
3eb31 e1b 00 60 60 00 
3eb35 e1c 00 80 80 00 
3eb39 e1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3eb3d e1e 00 BF BF 00 
3eb41 e1f 00 DF DF 00 
3eb45 e20 00 FF FF 00 
3eb49 e21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3eb4d e22 39 FF FF 00 
3eb51 e23 55 FF FF 00 
3eb55 e24 71 FF FF 00 
3eb59 e25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3eb5d e26 AA FF FF 00 
3eb61 e27 C6 FF FF 00 
3eb65 e28 E3 FF FF 00 
3eb69 e29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3eb6d e2a 00 28 40 00 
3eb71 e2b 00 3C 60 00 
3eb75 e2c 00 50 80 00 
3eb79 e2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3eb7d e2e 00 78 BF 00 
3eb81 e2f 00 8C DF 00 
3eb85 e30 00 A0 FF 00 
3eb89 e31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3eb8d e32 39 B5 FF 00 
3eb91 e33 55 C0 FF 00 
3eb95 e34 71 CA FF 00 
3eb99 e35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3eb9d e36 AA DF FF 00 
3eba1 e37 C6 EA FF 00 
3eba5 e38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3eba8 e39             | 
3eba8 e39             | '**********************************************************************************
3eba8 e39             | '
3eba8 e39             | '        Timings and colors definitions
3eba8 e39             | '
3eba8 e39             | '**********************************************************************************
3eba8 e39             | 
3eba8 e39             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3eba8 e39 08 00 00 00 
3ebac e3a 3C 00 00 00 
3ebb0 e3b 08 00 00 00 
3ebb4 e3c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3ebb8 e3d 07 00 00 00 
3ebbc e3e 04 00 00 00 
3ebc0 e3f 01 00 00 00 
3ebc4 e40 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3ebc8 e41 58 02 00 00 
3ebcc e42 20 9E 4B 14 
3ebd0 e43 FB A8 9E 01 
3ebd4 e44 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3ebd8 e45 00 00 00 00 
3ebdc e46 C0 00 00 00 
3ebe0 e47 00 00 00 00 
3ebe4 e48 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ebe8 e49             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3ebe8 e49 00 75 C7 97 
3ebec e4a 27 47 F6 0A 
3ebf0 e4b 05 79 CB 9B 
3ebf4 e4c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3ebf8 e4d             | 
3ebf8 e4d             | ''--------  Initialization  ----------------------------------------------------------------
3ebf8 e4d             | 
3ebf8 e4d 28 0C 64 FD | hdmi            setq    #6
3ebfc e4e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3ec00 e4f 28 10 64 FD |                 setq    #8
3ec04 e50 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3ec08 e51             | 
3ec08 e51 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3ec0c e52 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3ec10 e53 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3ec14 e54 D6 C6 01 F1 |                 add     t1,hbase
3ec18 e55 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3ec1c e56 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3ec20 e57 7B 0B 80 5F 
3ec24 e58 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3ec28 e59 66 66 86 FF 
3ec2c e5a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3ec30 e5b             | '
3ec30 e5b D6 C6 01 F6 |                 mov 	t1,hbase			   '
3ec34 e5c 11 C6 65 F0 |                 shl 	t1,#17                             '
3ec38 e5d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3ec3c e5e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3ec40 e5f             | 
3ec40 e5f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3ec44 e60 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3ec48 e61 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3ec4c e62             | 
3ec4c e62             | ''--------  frame rendering main loop  ---------------------------------------------------
3ec4c e62             | 
3ec4c e62 28 06 64 FD | p101            setq 	#3
3ec50 e63 00 A5 05 FB | 		rdlong  vblankptr,ptra
3ec54 e64 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3ec58 e65 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3ec5c e66 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3ec60 e67 00 A0 05 F6 |                 mov     dlinum, #0
3ec64 e68 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3ec68 e69 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3ec6c e6a             | 
3ec6c e6a             | 
3ec6c e6a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3ec70 e6b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3ec74 e6c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3ec78 e6d             |                 
3ec78 e6d             | 
3ec78 e6d             | 
3ec78 e6d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3ec78 e6d             |   
3ec78 e6d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3ec7c e6e 29 FE 65 3D |          if_nc  setq2   #255
3ec80 e6f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3ec84 e70             | 
3ec84 e70             | '' -----   up porch (before the picture)
3ec84 e70             | 
3ec84 e70 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3ec88 e71 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3ec8c e72 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3ec90 e73 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3ec94 e74             |  
3ec94 e74             |    
3ec94 e74             |  
3ec94 e74 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3ec98 e75 E2 8C B1 FC |                 xzero   m_sn,hsync1
3ec9c e76 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3eca0 e77 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3eca4 e78 E1 90 C1 FC |                 xcont   m_vi,hsync0
3eca8 e79 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3ecac e7a             | 
3ecac e7a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3ecb0 e7b E2 8C B1 FC |                 xzero   m_sn,hsync1
3ecb4 e7c 48 00 B0 FD | 		call    #dli
3ecb8 e7d E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ecbc e7e E1 90 C1 FC |                 xcont   m_vi,hsync0
3ecc0 e7f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3ecc4 e80             |                 	
3ecc4 e80             |                 
3ecc4 e80             | 
3ecc4 e80             |  
3ecc4 e80             | '' ------- the main screen drawing starts here
3ecc4 e80             | 
3ecc4 e80 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3ecc8 e81 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3eccc e82 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3ecd0 e83 E1 8E C1 FC |                 xcont   m_bv,hsync0
3ecd4 e84 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3ecd8 e85 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3ecdc e86 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3ece0 e87             |               
3ece0 e87             | 
3ece0 e87 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3ece4 e88 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3ece8 e89             | 
3ece8 e89             | ' ---------------- All visible lines displayed now, start vblank  
3ece8 e89             | 
3ece8 e89 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3ecec e8a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3ecf0 e8b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3ecf4 e8c C3 C4 01 F6 |                 mov     hsync1,sync_223
3ecf8 e8d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3ecfc e8e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3ed00 e8f             | 
3ed00 e8f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3ed00 e8f             | 
3ed00 e8f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3ed00 e8f             | 
3ed00 e8f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3ed04 e90             | 
3ed04 e90 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3ed08 e91 04 B8 05 A1 |     if_z        add     dlptr2,#4
3ed0c e92 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3ed10 e93             | 
3ed10 e93 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3ed14 e94 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3ed18 e95 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3ed1c e96 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3ed20 e97 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3ed24 e98             | 
3ed24 e98 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3ed28 e99 DD C6 41 F8 |                 getnib  t1,dl,#0
3ed2c e9a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3ed30 e9b 70 00 90 AD |     if_z        jmp     #preload
3ed34 e9c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3ed38 e9d 94 00 90 AD |     if_z        jmp     #preload2
3ed3c e9e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3ed40 e9f 0C 00 90 AD |     if_z        jmp     #p390
3ed44 ea0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3ed48 ea1 28 00 90 AD |     if_z        jmp     #p391  
3ed4c ea2             | 
3ed4c ea2 2D 00 64 FD | p308            ret
3ed50 ea3             |    
3ed50 ea3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3ed54 ea4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3ed58 ea5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3ed5c ea6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3ed60 ea7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3ed64 ea8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3ed68 ea9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3ed6c eaa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3ed70 eab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3ed74 eac             |  
3ed74 eac             | '' --------  Reload palette. To do 
3ed74 eac             | 
3ed74 eac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3ed78 ead 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3ed7c eae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3ed80 eaf 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3ed84 eb0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3ed88 eb1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3ed8c eb2 70 FF 9F FD |         	jmp     #dli                
3ed90 eb3             |       
3ed90 eb3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3ed90 eb3             | 
3ed90 eb3             | 
3ed90 eb3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3ed90 eb3             | 
3ed90 eb3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3ed94 eb4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3ed98 eb5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ed9c eb6 E1 90 C1 FC |                 xcont   m_vi,hsync0
3eda0 eb7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3eda4 eb8             |         
3eda4 eb8             | '' -------------- Preload a line from PSRAM        
3eda4 eb8             |         
3eda4 eb8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3eda8 eb9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3edac eba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3edb0 ebb DE B4 01 F6 |                 mov     buf1,buf1c
3edb4 ebc 03 A0 05 F7 |                 incmod  dlinum,#3
3edb8 ebd             | 
3edb8 ebd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3edbc ebe 32 B7 01 F6 |                 mov     buf2,a1024
3edc0 ebf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3edc4 ec0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3edc8 ec1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3edcc ec2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3edd0 ec3             |  
3edd0 ec3             |  
3edd0 ec3             | preload2      '  incmod  dlinum,#3
3edd0 ec3 04 C0 45 F0 |                 shr 	framebuf2,#4
3edd4 ec4 ED B2 01 F6 |                 mov 	cmd,affffffff
3edd8 ec5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3eddc ec6 28 02 64 FD |                 setq	#1
3ede0 ec7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3ede4 ec8             |                 
3ede4 ec8             | 
3ede4 ec8             | '' -------------- Draw sprites
3ede4 ec8             | 
3ede4 ec8 CF 5C 02 F6 | sprite          mov t8,frames
3ede8 ec9 10 5C 0E F5 | 		and t8,#16 wz
3edec eca 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3edf0 ecb 10 48 06 A6 | 	if_z    mov spritenum, #16	
3edf4 ecc             | 		
3edf4 ecc             | 
3edf4 ecc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3edf8 ecd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3edfc ece EF 56 96 F9 |                 alts    t5,#sprite1xy
3ee00 ecf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3ee04 ed0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3ee08 ed1 EF 56 96 F9 |                 alts    t5,#sprite1xy
3ee0c ed2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3ee10 ed3 0F 4C 66 F7 |                 signx	sprite_x,#15
3ee14 ed4 F0 56 96 F9 |                 alts    t5,#sprite1wh
3ee18 ed5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3ee1c ed6 01 52 86 F1 |                 sub     sprite_h,#1
3ee20 ed7 F0 56 96 F9 |                 alts    t5,#sprite1wh
3ee24 ed8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3ee28 ed9             | 
3ee28 ed9             | 
3ee28 ed9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3ee2c eda BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3ee30 edb 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3ee34 edc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3ee38 edd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3ee3c ede AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3ee40 edf 00 5E 06 F6 |                 mov 	t9,#0
3ee44 ee0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3ee48 ee1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3ee4c ee2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3ee50 ee3             |      
3ee50 ee3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3ee54 ee4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3ee58 ee5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3ee5c ee6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3ee60 ee7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3ee64 ee8             |                 
3ee64 ee8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3ee68 ee9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3ee6c eea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3ee70 eeb             |   		
3ee70 eeb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3ee74 eec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3ee78 eed             | 
3ee78 eed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3ee7c eee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3ee80 eef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3ee84 ef0             |  
3ee84 ef0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3ee88 ef1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3ee8c ef2 10 00 90 CD |      if_c 	jmp     #p899		
3ee90 ef3             | 	
3ee90 ef3             | 	
3ee90 ef3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3ee94 ef4 28 CD 01 F1 | 		add	t4,sprite_w
3ee98 ef5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3ee9c ef6             | 
3ee9c ef6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3eea0 ef7             | 
3eea0 ef7 28 59 02 F6 | p899		mov 	t6,sprite_w
3eea4 ef8 01 58 86 F1 | 	 	sub     t6,#1
3eea8 ef9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3eeac efa             | 
3eeac efa 28 58 62 FD |                 setq   	t6
3eeb0 efb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3eeb4 efc 28 5D 02 F6 |                 mov t8,sprite_w
3eeb8 efd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3eebc efe 24 00 90 AD |         if_z    jmp #p898
3eec0 eff             |          
3eec0 eff             |         
3eec0 eff 70 5F 06 F6 |                 mov  t9,#368
3eec4 f00 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3eec8 f01             | 
3eec8 f01 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3eecc f02 08 5C 06 FA |                 mul t8,#8				' bits to shr
3eed0 f03 FF FF 7F FF 
3eed4 f04 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3eed8 f05 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3eedc f06 00 5E 8E F9 |                 altd t9,#0				' and mask 
3eee0 f07 2D 01 00 F5 |                 and 0-0, t7
3eee4 f08             |                
3eee4 f08             | 
3eee4 f08 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3eee8 f09 E5 E0 7A FA |                 wmlong 368,t3				
3eeec f0a             |                 
3eeec f0a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3eef0 f0b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3eef4 f0c 2D 00 64 FD |                 ret
3eef8 f0d             | 	
3eef8 f0d             | 	
3eef8 f0d             |                
3eef8 f0d             |  
3eef8 f0d             | '' -------------- Graphics line ------------------------------------------------------------
3eef8 f0d             |  
3eef8 f0d             | 
3eef8 f0d             | '' consts and vars
3eef8 f0d             | 
3eef8 f0d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3eefc f0e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3ef00 f0f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3ef04 f10 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3ef08 f11             | 
3ef08 f11 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3ef0c f12             | 
3ef0c f12             | '------ these longs will be set by setmode function
3ef0c f12             | 
3ef0c f12 00 00 00 00 | m_bs            long    0        'blanks before sync
3ef10 f13 00 00 00 00 | m_sn            long    0        'sync
3ef14 f14 00 00 00 00 | m_bv            long    0        'blanks before visible
3ef18 f15 00 00 00 00 | m_vi            long    0        'visible pixels #
3ef1c f16             | 'm_border        long    0        'left/right borders
3ef1c f16 00 00 00 00 | i_upporch       long    0        'up porch lines
3ef20 f17 00 00 00 00 | i_vsync         long    0        'vsync lines
3ef24 f18 00 00 00 00 | i_downporch     long    0        'down porch lines
3ef28 f19 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3ef2c f1a 00 00 00 00 | i_totalvis      long    0
3ef30 f1b             | 
3ef30 f1b             | '-------------------------------------
3ef30 f1b             |  
3ef30 f1b 00 00 00 00 | linenum         long    0
3ef34 f1c 00 00 00 00 | frames          long    0
3ef38 f1d 00 00 00 00 | dlinum long 0
3ef3c f1e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3ef40 f1f             | 
3ef40 f1f 00 00 00 00 | vblankptr       long    0
3ef44 f20 00 00 00 00 | modeptr         long    0
3ef48 f21 00 00 00 00 | paletteptr      long    0
3ef4c f22 00 00 00 00 | dlptr           long    0
3ef50 f23 01 00 00 00 | hbase           long    1
3ef54 f24 00 00 00 00 | mailbox         long    0
3ef58 f25 00 00 00 00 | spriteptr          long 0
3ef5c f26             | 
3ef5c f26 00 00 00 00 | cmd             long    0
3ef60 f27 00 EC 07 00 | buf1            long    $80000-1024-4096
3ef64 f28 00 04 00 00 | buf2            long    1024
3ef68 f29 01 00 00 00 | dlptr2          long    1
3ef6c f2a 01 00 00 00 | dl              long    1
3ef70 f2b             | 
3ef70 f2b 00 00 00 00 | buf1c long 0
3ef74 f2c 00 EC 07 00 | buf1d            long    $80000-1024-4096
3ef78 f2d 01 00 00 00 | framebuf2       long    1
3ef7c f2e 01 00 00 00 | hsync0          long    1
3ef80 f2f 01 00 00 00 | hsync1          long    1
3ef84 f30             | 
3ef84 f30 01 00 00 00 | t1              long    1
3ef88 f31 00 00 00 00 | t2 long 0
3ef8c f32 00 00 00 00 | t3 long 0
3ef90 f33 00 00 00 00 | t4 long 0
3ef94 f34             | 
3ef94 f34 00 00 00 00 | rcnt            long    0  'dl repeat count
3ef98 f35 00 00 00 00 | rcnt2           long    0
3ef9c f36 00 00 00 00 | rcnt2a          long    0
3efa0 f37 00 00 00 00 | roffset         long    0
3efa4 f38 00 00 00 00 | rdl             long    0  'dl repeat line
3efa8 f39 00 00 00 00 | dlc             long    0  'dl command
3efac f3a             | 
3efac f3a FF FF FF FF | affffffff       long    $ffffffff
3efb0 f3b 00 00 00 00 | sprite1pointer long 0
3efb4 f3c 00 00 00 00 | sprite1xy      long 0
3efb8 f3d 00 00 00 00 | sprite1wh      long 0
3efbc f3e 00 00 00 00 | sprite2pointer long 0
3efc0 f3f 00 00 00 00 | sprite2xy      long 0
3efc4 f40 00 00 00 00 | sprite2wh      long 0
3efc8 f41 00 00 00 00 | sprite3pointer long 0
3efcc f42 00 00 00 00 | sprite3xy      long 0
3efd0 f43 00 00 00 00 | sprite3wh      long 0
3efd4 f44 00 00 00 00 | sprite4pointer long 0
3efd8 f45 00 00 00 00 | sprite4xy      long 0
3efdc f46 00 00 00 00 | sprite4wh      long 0
3efe0 f47 00 00 00 00 | sprite5pointer long 0
3efe4 f48 00 00 00 00 | sprite5xy      long 0
3efe8 f49 00 00 00 00 | sprite5wh      long 0
3efec f4a 00 00 00 00 | sprite6pointer long 0
3eff0 f4b 00 00 00 00 | sprite6xy      long 0
3eff4 f4c 00 00 00 00 | sprite6wh      long 0
3eff8 f4d 00 00 00 00 | sprite7pointer long 0
3effc f4e 00 00 00 00 | sprite7xy      long 0
3f000 f4f 00 00 00 00 | sprite7wh      long 0
3f004 f50 00 00 00 00 | sprite8pointer long 0
3f008 f51 00 00 00 00 | sprite8xy      long 0
3f00c f52 00 00 00 00 | sprite8wh      long 0
3f010 f53 00 00 00 00 | sprite9pointer long 0
3f014 f54 00 00 00 00 | sprite9xy      long 0
3f018 f55 00 00 00 00 | sprite9wh      long 0
3f01c f56 00 00 00 00 | sprite10pointer long 0
3f020 f57 00 00 00 00 | sprite10xy      long 0
3f024 f58 00 00 00 00 | sprite10wh      long 0
3f028 f59 00 00 00 00 | sprite11pointer long 0
3f02c f5a 00 00 00 00 | sprite11xy      long 0
3f030 f5b 00 00 00 00 | sprite11wh      long 0
3f034 f5c 00 00 00 00 | sprite12pointer long 0
3f038 f5d 00 00 00 00 | sprite12xy      long 0
3f03c f5e 00 00 00 00 | sprite12wh      long 0
3f040 f5f 00 00 00 00 | sprite13pointer long 0
3f044 f60 00 00 00 00 | sprite13xy      long 0
3f048 f61 00 00 00 00 | sprite13wh      long 0
3f04c f62 00 00 00 00 | sprite14pointer long 0
3f050 f63 00 00 00 00 | sprite14xy      long 0
3f054 f64 00 00 00 00 | sprite14wh      long 0
3f058 f65 00 00 00 00 | sprite15pointer long 0
3f05c f66 00 00 00 00 | sprite15xy      long 0
3f060 f67 00 00 00 00 | sprite15wh      long 0
3f064 f68 00 00 00 00 | sprite16pointer long 0
3f068 f69 00 00 00 00 | sprite16xy      long 0
3f06c f6a 00 00 00 00 | sprite16wh      long 0
3f070 f6b 00 00 00 00 | sprite17pointer long 0
3f074 f6c 00 00 00 00 | sprite17xy      long 0
3f078 f6d 00 00 00 00 | sprite17wh      long 0
3f07c f6e 00 00 00 00 | sprite18pointer long 0
3f080 f6f 00 00 00 00 | sprite18xy      long 0
3f084 f70 00 00 00 00 | sprite18wh      long 0
3f088 f71 00 00 00 00 | spritenum long 0
3f08c f72             | 
3f08c f72 00 00 00 00 | spriteline long 0
3f090 f73 84 03 00 00 | sprite_x long 900
3f094 f74 00 00 00 00 | sprite_y long 0
3f098 f75 10 00 00 00 | sprite_w long 16
3f09c f76 40 00 00 00 | sprite_h long 64
3f0a0 f77 00 00 00 00 | l2 long 0
3f0a4 f78 00 00 00 00 | t5 long 0
3f0a8 f79 00 00 00 00 | t6 long 0
3f0ac f7a 00 00 00 00 | t7 long 0
3f0b0 f7b 00 00 00 00 | t8 long 0
3f0b4 f7c 00 00 00 00 | t9 long 0
3f0b8 f7d 00 00 00 00 | preloadaddr long 0
3f0bc f7e 00 00 00 00 | preloadlineaddr long 0
3f0c0 f7f 00 04 00 00 | a1024 long 1024
3f0c4 f80             | 
3f0c4 f80 E0 03 00 00 | aa long 992
3f0c8 f81 FF 03 00 00 | a1023 long 1023
3f0cc f82 00 10 00 00 | a4096 long 4096
3f0d0 f83             |  fit 368
3f0d0 f83             | _psram_spin2_dat_
3f0d0 f83 00 00 00 00 
      ...             
3f1c8 fc1 00 00 00 00 
3f1cc fc2 00 00 00 00 |     listdata long 0[8*8]
3f1d0 fc3             |             orgh
3f1d0                 | 
3f1d0                 | ' driver state
3f1d0     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3f1d4     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3f1d8                 | 
3f1d8                 | ' delay profile
3f1d8     07 00 00 00 
3f1dc     00 CF 7B 05 
3f1e0     80 D1 F0 08 
3f1e4     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3f1e8     80 C4 60 0F 
3f1ec     80 39 7A 12 
3f1f0     40 2D D9 13 
3f1f4     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3f1f8                 | 
3f1f8                 | ' data to be passed to driver when starting it
3f1f8                 | startupData
3f1f8     00 00 00 00 |     long    0           ' current frequency
3f1fc     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3f200     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3f204     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3f208     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3f20c     18 F2 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3f210     98 F2 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3f214     B8 F2 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3f218                 | 
3f218                 | ' data for memory
3f218                 | deviceData
3f218                 |     ' 16 bank parameters follow (16MB per bank)
3f218     00 00 00 00 
      ...             
3f250     00 00 00 00 
3f254     00 00 00 00 |     long    0[16]                               ' banks 0-15
3f258                 |     ' 16 banks of pin parameters follow
3f258     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3f25c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3f260     FF FF FF FF 
      ...             
3f290     FF FF FF FF 
3f294     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3f298                 | 
3f298                 | ' data for COG polling
3f298                 | qosData 
3f298     00 00 FF FF 
3f29c     00 00 FF FF 
3f2a0     00 00 FF FF 
3f2a4     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3f2a8     00 00 FF FF 
3f2ac     00 00 FF FF 
3f2b0     00 00 FF FF 
3f2b4     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3f2b8                 |     
3f2b8                 | ' mailbox storage
3f2b8                 | 
3f2b8                 | mailboxes
3f2b8     00 00 00 00 
      ...             
3f310     00 00 00 00 
3f314     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3f318                 | 	alignl
3f318                 | _psram16drv_spin2_dat_
3f318                 |                             orgh
3f318     00 00 00 00 
      ...             
3f330     00 00 00 00 
3f334     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3f338                 | 
3f338                 | driver_start
3f338                 |                             org
3f338 000             | '..................................................................................................
3f338 000             | ' Memory layout for COG RAM once operational:
3f338 000             | '
3f338 000             | '  COG RAM address      Usage
3f338 000             | '  ---------------      ----
3f338 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3f338 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3f338 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3f338 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3f338 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3f338 000             | '  ~$198-$1F3           State and register variables
3f338 000             | '
3f338 000             | ' Also during driver COG startup:
3f338 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3f338 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3f338 000             | '..................................................................................................
3f338 000             |                             
3f338 000             | ' Mailbox storage after vector initialization
3f338 000             | 
3f338 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3f33c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3f340 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3f344 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3f348 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3f34c 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3f350 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3f354 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3f358 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3f35c 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3f360 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3f364 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3f368 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3f36c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3f370 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3f374 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3f378 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3f37c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3f380 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3f384 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3f388 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3f38c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3f390 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3f394 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3f398 018             | 
3f398 018             | ' Mailbox parameter addresses per COG once patched
3f398 018             |                             
3f398 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3f39c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3f3a0 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3f3a4 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3f3a8 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3f3ac 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3f3b0 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3f3b4 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3f3b8 020             | 
3f3b8 020             | '..................................................................................................
3f3b8 020             | ' Per COG request and state setup and service branching
3f3b8 020             |         
3f3b8 020             | cog0                 
3f3b8 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3f3bc 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3f3c0 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3f3c4 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3f3c8 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f3cc 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f3d0 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3f3d4 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3f3d8 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3f3dc 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f3e0 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f3e4 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3f3e8 02c             | cog1                        
3f3e8 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3f3ec 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3f3f0 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3f3f4 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3f3f8 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f3fc 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f400 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3f404 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3f408 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3f40c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f410 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f414 037 33 CA 63 FD |                             execf   request-0               'jump to service
3f418 038             | cog2                         
3f418 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3f41c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3f420 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3f424 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3f428 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f42c 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f430 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3f434 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3f438 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3f43c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f440 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f444 043 33 CA 63 FD |                             execf   request-0               'jump to service
3f448 044             | cog3                        
3f448 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3f44c 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3f450 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3f454 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3f458 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f45c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f460 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3f464 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3f468 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3f46c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f470 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f474 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3f478 050             | cog4                        
3f478 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3f47c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3f480 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3f484 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3f488 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f48c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f490 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3f494 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3f498 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3f49c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f4a0 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f4a4 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3f4a8 05c             | cog5                        
3f4a8 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3f4ac 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3f4b0 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3f4b4 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3f4b8 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f4bc 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f4c0 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3f4c4 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3f4c8 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3f4cc 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f4d0 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f4d4 067 33 CA 63 FD |                             execf   request-0               'jump to service
3f4d8 068             | cog6                        
3f4d8 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3f4dc 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3f4e0 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3f4e4 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3f4e8 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f4ec 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f4f0 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3f4f4 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3f4f8 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3f4fc 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f500 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f504 073 33 CA 63 FD |                             execf   request-0               'jump to service
3f508 074             | cog7                        
3f508 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3f50c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3f510 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3f514 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3f518 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f51c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f520 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3f524 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3f528 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3f52c 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f530 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f534 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3f538 080             |                             fit     128
3f538 080             | 
3f538 080             |                             fit     128
3f538 080             | pad                         long    0[128-$]                'align init code to $80
3f538 080             | 
3f538 080             | '..................................................................................................
3f538 080             | 
3f538 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3f538 080             | 
3f538 080             | init                        
3f538 080             |                             ' get driver scratch long address in hub
3f538 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3f53c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3f540 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3f544 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3f548 084             |                     
3f548 084             |                             ' read in the additional LUT RAM code
3f548 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3f54c 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3f550 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3f554 087             | 
3f554 087             |                             ' read the startup parameters
3f554 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3f558 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3f55c 089             | 
3f55c 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3f55c 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3f560 08a             | 
3f560 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3f564 08b 01 00 00 5F 
3f568 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3f56c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3f570 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3f574 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3f578 090             | 
3f578 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3f578 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3f57c 091 01 00 00 FF 
3f580 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3f584 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3f588 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3f58c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3f590 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3f594 097 08 DE 47 F5 |                             or      a, #8
3f598 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3f59c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3f5a0 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3f5a4 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3f5a8 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3f5ac 09d 01 DE 07 F1 |                             add     a, #1
3f5b0 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3f5b4 09f             |  
3f5b4 09f             |                             ' setup device control pin states
3f5b4 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3f5b8 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3f5bc 0a1 01 00 00 FF 
3f5c0 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3f5c4 0a3             | 
3f5c4 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3f5c8 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3f5cc 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3f5d0 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3f5d4 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3f5d8 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3f5dc 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3f5e0 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3f5e4 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3f5e8 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3f5ec 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3f5f0 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3f5f4 0af             | pinloop
3f5f4 0af             |                             ' generate minimum CE high time before access
3f5f4 0af A1 07 00 FF 
3f5f8 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3f5fc 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3f600 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3f604 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3f608 0b4 1F DE 63 FD |                             waitx   a                       'delay
3f60c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3f610 0b6             | 
3f610 0b6             |                             ' setup the COG mailboxes and addresses 
3f610 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3f614 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3f618 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3f61c 0b9             | 
3f61c 0b9 28 2E 64 FD |                             setq    #24-1
3f620 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3f624 0bb             | 
3f624 0bb             |                             ' setup the polling loop for active COGs 
3f624 0bb 01 C2 63 FD |                             cogid   id
3f628 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3f62c 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3f630 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3f634 0bf 0A F0 07 F6 |                             mov     ptra, #10
3f638 0c0 E1 F1 03 FA |                             mul     ptra, id
3f63c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3f640 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3f644 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3f648 0c4 03 C2 07 FA |                             mul     id, #3
3f64c 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3f650 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3f654 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3f658 0c8 D8 01 B0 FD |                             call    #reloadcogs
3f65c 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3f660 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3f664 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3f664 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3f668 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3f66c 0cd 08 04 DC FC |                             rep     #2, #8
3f670 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3f674 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3f678 0d0             | 
3f678 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3f678 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3f678 0d0 01 C2 63 FD |                             cogid   id
3f67c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3f680 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3f684 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3f688 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3f68c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3f690 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3f694 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3f698 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3f69c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3f6a0 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3f6a4 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3f6a8 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3f6ac 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3f6b0 0de A5 E5 03 F1 |                             add     d, const512
3f6b4 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3f6b8 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3f6bc 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3f6c0 0e2             |                             
3f6c0 0e2             |                             ' setup register values for control vector loop setup after we return
3f6c0 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3f6c4 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3f6c8 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3f6cc 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3f6d0 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3f6d4 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3f6d8 0e8 D0 C3 8F F9 |                             altd    id, #id0
3f6dc 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3f6e0 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3f6e4 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3f6e8 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3f6ec 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3f6f0 0ee             |  
3f6f0 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3f6f4 0ef 07 CA 07 F5 |                             and     request, #7
3f6f8 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3f6fc 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3f700 0f2             |                             fit     $100                    'ensure all init code fits this space
3f700 0f2             | 
3f700 0f2             |                             fit     $100                    'ensure all init code fits this space
3f700 0f2             | 
3f700 0f2 00 00 00 00 
      ...             
3f730 0fe 00 00 00 00 
3f734 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3f738 100             | 
3f738 100             | '..................................................................................................
3f738 100             | ' Error result handling and COG notification of request completion
3f738 100             | 
3f738 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3f73c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3f740 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3f744 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3f748 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3f74c 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3f750 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3f754 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3f758 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3f75c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3f760 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3f764 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3f768 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3f76c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3f770 10e             | ' Poller re-starts here after a COG is serviced
3f770 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3f774 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3f778 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3f77c 111             | ' Main dynamic polling loop repeats until a request arrives
3f77c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3f780 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3f784 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3f788 114             | 
3f788 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3f78c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3f790 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3f794 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3f798 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3f79c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3f7a0 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3f7a4 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3f7a8 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3f7ac 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3f7b0 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3f7b4 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3f7b8 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3f7bc 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3f7c0 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3f7c4 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3f7c8 124             | 
3f7c8 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3f7cc 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3f7d0 126             |  
3f7d0 126             | '..................................................................................................
3f7d0 126             | ' List handler                               
3f7d0 126             | 
3f7d0 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3f7d4 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3f7d8 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3f7dc 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3f7e0 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3f7e4 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3f7e8 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3f7ec 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3f7f0 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3f7f4 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3f7f8 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3f7fc 131 33 00 60 FD |                             execf   0-0                     'process the request 
3f800 132             | 
3f800 132             | '..................................................................................................
3f800 132             | ' Restoring per COG state and resuming where we left off
3f800 132             | 
3f800 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3f804 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3f808 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3f80c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3f810 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3f814 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3f818 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3f81c 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3f820 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3f824 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3f828 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3f82c 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3f830 13e             |                    
3f830 13e             | '..................................................................................................
3f830 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3f830 13e             | 
3f830 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3f834 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3f838 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3f83c 141 D0 DF B7 F9 |                             setd    a, #id0
3f840 142 D8 DF BF F9 |                             sets    a, #addr1
3f844 143 FE FF FF FF 
3f848 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3f84c 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3f850 146 3F DE A7 F9 |                             alti    a, #%111_111 
3f854 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3f858 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3f85c 149 01 E2 63 FD |                             cogid   c
3f860 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3f864 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3f868 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3f86c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3f870 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3f874 14f 00 E0 03 F6 |                             mov     b, 0-0
3f878 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3f87c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3f880 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3f884 153 0C 00 90 AD |             if_z            jmp     #excluded               
3f888 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3f88c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3f890 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3f894 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3f898 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3f89c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3f8a0 15a             | 
3f8a0 15a             | 'determine priority cogs and build instructions for the polling sequence
3f8a0 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3f8a4 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3f8a8 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3f8ac 15d             | 
3f8ac 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3f8b0 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3f8b4 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3f8b8 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3f8bc 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3f8c0 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3f8c4 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3f8c8 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3f8cc 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3f8d0 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3f8d4 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3f8d8 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3f8dc 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3f8e0 16a             | endprioloop
3f8e0 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3f8e4 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3f8e8 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3f8ec 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3f8f0 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3f8f4 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3f8f8 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3f8fc 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3f900 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3f904 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3f908 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3f90c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3f910 176             | 
3f910 176             | ' populate the round robin COG polling instructions
3f910 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3f914 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3f918 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3f91c 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3f920 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3f924 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3f928 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3f92c 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3f930 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3f934 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3f938 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3f93c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3f940 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3f944 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3f948 184             | '..................................................................................................
3f948 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3f948 184             | 
3f948 184             | set_latency                                                 '            (a) set latency
3f948 184             | get_latency                                                 '            (b) get latency
3f948 184             | set_burst                                                   '            (c) set burst size of bank
3f948 184             | get_burst                                                   '            (d) get burst size of bank
3f948 184             |                                                             '            (e) dump state
3f948 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3f94c 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3f950 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3f954 187             |                                                             ' | | | | e  account for following AUGS
3f954 187 04 00 00 FF 
3f958 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3f95c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3f960 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3f964 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3f968 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3f96c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3f970 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3f974 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3f978 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3f97c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3f980 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3f984 193             | 
3f984 193             | '..................................................................................................
3f984 193             | ' Misc EXECF code
3f984 193             | 
3f984 193 33 72 63 FD | start_read_exec             execf   newburstr
3f988 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3f98c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3f990 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3f994 197             | 
3f994 197             | '..................................................................................................
3f994 197             | ' Variables
3f994 197             | 
3f994 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3f998 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3f99c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3f9a0 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3f9a4 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3f9a8 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3f9ac 19d             | 
3f9ac 19d 00 00 00 80 | xfreq1          long    $80000000
3f9b0 19e 00 00 00 40 | xfreq2          long    $40000000
3f9b4 19f 03 00 00 00 | delay           long    3
3f9b8 1a0             | 
3f9b8 1a0             | lutcodeaddr                 
3f9b8 1a0             | startupparams
3f9b8 1a0             | excludedcogs                                    'careful: shared register use!
3f9b8 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3f9bc 1a1 00 00 00 00 | flags           long    0
3f9c0 1a2             | mask                                            'careful: shared register use!
3f9c0 1a2 00 00 00 00 | resetmaskA      long    0
3f9c4 1a3             | limit                                           'careful: shared register use!
3f9c4 1a3 00 00 00 00 | resetmaskB      long    0
3f9c8 1a4 00 00 00 00 | datapins        long    0
3f9cc 1a5             | const512                                        'careful: shared register use!
3f9cc 1a5 00 00 00 00 | devicelist      long    0
3f9d0 1a6 00 00 00 00 | coglist         long    0
3f9d4 1a7 00 00 00 00 | mbox            long    0 
3f9d8 1a8             | 
3f9d8 1a8             | clkpin                                          'shared with code patched during init
3f9d8 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3f9dc 1a9             | cspin                                           'shared with code patched during init
3f9dc 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3f9e0 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3f9e4 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3f9e8 1ac 01 00 00 00 | clkdelay        long    1
3f9ec 1ad 00 00 00 00 | regdatabus      long    0
3f9f0 1ae             | 
3f9f0 1ae 10 00 00 00 | deviceaddr      long    $10
3f9f4 1af             | rrcounter
3f9f4 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3f9f8 1b0             | 
3f9f8 1b0             | ' jump addresses for the per COG handlers
3f9f8 1b0 20 00 00 00 | cog0_handler    long    cog0
3f9fc 1b1 2C 00 00 00 | cog1_handler    long    cog1
3fa00 1b2 38 00 00 00 | cog2_handler    long    cog2
3fa04 1b3 44 00 00 00 | cog3_handler    long    cog3
3fa08 1b4 50 00 00 00 | cog4_handler    long    cog4
3fa0c 1b5 5C 00 00 00 | cog5_handler    long    cog5
3fa10 1b6 68 00 00 00 | cog6_handler    long    cog6
3fa14 1b7 74 00 00 00 | cog7_handler    long    cog7
3fa18 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3fa1c 1b9             | 
3fa1c 1b9             | ' EXECF sequences
3fa1c 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3fa20 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3fa24 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3fa28 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3fa2c 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3fa30 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3fa34 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3fa38 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3fa38 1c0             | 
3fa38 1c0             | 
3fa38 1c0             | ' SKIPF sequences
3fa38 1c0             | skiptable
3fa38 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3fa3c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3fa40 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3fa44 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3fa48 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3fa4c 1c5 00 00 00 00 | pattern2        long    0
3fa50 1c6 00 00 00 00 | pattern3        long    0
3fa54 1c7 77 02 00 00 | singlelong      long    %1001110111  
3fa58 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3fa5c 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3fa60 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3fa64 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3fa68 1cc             | 
3fa68 1cc             | ' LUT RAM address values
3fa68 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3fa6c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3fa70 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3fa74 1cf F6 02 00 00 | noread          long    noread_lut
3fa78 1d0             | 
3fa78 1d0 00 00 00 00 | id0             long    0
3fa7c 1d1 01 00 00 00 | id1             long    1
3fa80 1d2 02 00 00 00 | id2             long    2
3fa84 1d3 03 00 00 00 | id3             long    3
3fa88 1d4 04 00 00 00 | id4             long    4
3fa8c 1d5 05 00 00 00 | id5             long    5
3fa90 1d6 06 00 00 00 | id6             long    6
3fa94 1d7 07 00 00 00 | id7             long    7
3fa98 1d8             | 
3fa98 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3fa98 1d8             | 'and COG updates and need to follow immediately after id0-id7
3fa98 1d8 00 00 00 00 | addr1           long    0
3fa9c 1d9 00 00 00 00 | hubdata         long    0
3faa0 1da 00 00 00 00 | count           long    0
3faa4 1db 00 00 00 00 | addr2           long    0
3faa8 1dc 00 00 00 00 | total           long    0
3faac 1dd 00 00 00 00 | offset1         long    0
3fab0 1de 00 00 00 00 | offset2         long    0
3fab4 1df 00 00 00 00 | link            long    0
3fab8 1e0             | 
3fab8 1e0             | burstwrite                                      'note shared register use during init
3fab8 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3fabc 1e1 00 00 00 00 | id              long    0
3fac0 1e2             | 
3fac0 1e2 00 00 00 00 | header          long    0
3fac4 1e3 00 00 00 00 | trailer         long    0
3fac8 1e4 00 00 00 00 | cmdaddr         long    0
3facc 1e5 00 00 00 00 | request         long    0
3fad0 1e6 00 00 00 00 | rrlimit         long    0
3fad4 1e7 00 00 00 00 | pinconfig       long    0
3fad8 1e8 00 00 00 00 | clks            long    0
3fadc 1e9 00 00 00 00 | resume          long    0
3fae0 1ea 00 00 00 00 | orighubsize     long    0
3fae4 1eb 00 00 00 00 | wrclks          long    0
3fae8 1ec             | 
3fae8 1ec 00 00 00 00 | pattern         long    0
3faec 1ed 00 00 00 00 | hubscratch      long    0
3faf0 1ee 00 10 00 00 | val4k           long    4096
3faf4 1ef             | 
3faf4 1ef             | ' temporary general purpose regs
3faf4 1ef 00 00 00 00 | a               long    0
3faf8 1f0 00 00 00 00 | b               long    0
3fafc 1f1 00 00 00 00 | c               long    0
3fb00 1f2 00 00 00 00 | d               long    0
3fb04 1f3             |                 fit     502
3fb04 1f3             | 
3fb04 1f3             |                 fit     502
3fb04 1f3             | 
3fb04 1f3             | '..................................................................................................
3fb04 1f3             | 
3fb04 1f3             |             orgh
3fb04                 | 
3fb04                 | lut_code
3fb04                 | 'HW init code up to 80 longs
3fb04                 | 
3fb04                 | '..................................................................................................
3fb04                 | ' Memory layout for LUT RAM once operational:
3fb04                 | '
3fb04                 | '  LUT RAM address      Usage
3fb04                 | '  ---------------      ----
3fb04                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3fb04                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3fb04                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3fb04                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3fb04                 | '
3fb04                 | ' Also during driver COG startup:
3fb04                 | ' $230-$24F is used for HW init setup
3fb04                 | ' $250-$26F is used as temporary vector storage 
3fb04                 | '..................................................................................................
3fb04                 | 
3fb04                 |                 org $230    
3fb04 230             | 
3fb04 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3fb04 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3fb08 231 24 16 60 FD |                             pollxfi
3fb0c 232 FF AA 2A FF 
3fb10 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3fb14 234 28 00 B0 FD |                             call    #sendqspi
3fb18 235 07 F8 07 FF 
3fb1c 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3fb20 237 28 00 B0 FD |                             call    #sendspi
3fb24 238 F8 07 78 FF 
3fb28 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3fb2c 23a 1C 00 B0 FD |                             call    #sendspi
3fb30 23b 7F 78 78 FF 
3fb34 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3fb38 23d 10 00 B0 FD |                             call    #sendspi 
3fb3c 23e 2D 00 64 FD |                             ret
3fb40 23f             | 
3fb40 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3fb44 240 32 0C 64 FD |                             skipf   #%110
3fb48 241 9C EF 03 F6 |                             mov     pb, xsendimm
3fb4c 242             | 
3fb4c 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3fb50 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3fb54 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3fb58 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3fb5c 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3fb60 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3fb64 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3fb68 249 50 48 63 FD |                             fltl    datapins                'float data bus
3fb6c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3fb70 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3fb74 24c             | 
3fb74 24c 00 00 00 00 
3fb78 24d 00 00 00 00 
3fb7c 24e 00 00 00 00 
3fb80 24f 00 00 00 00 |                 long    0[$270-32-$]
3fb84 250             |                 fit     $270-32  ' keep room for 32 vector longs
3fb84 250             |     
3fb84 250             |                 fit     $270-32  ' keep room for 32 vector longs
3fb84 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3fb84 250             | rw_vect ' PSRAM jump vectors
3fb84 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3fb88 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3fb8c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3fb90 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3fb94 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3fb98 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3fb9c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3fba0 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3fba4 258             | ro_vect ' R/O PSRAM jump vectors
3fba4 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3fba8 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3fbac 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3fbb0 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3fbb4 25c 00 01 00 00 |                 long    unsupported
3fbb8 25d 00 01 00 00 |                 long    unsupported
3fbbc 25e 00 01 00 00 |                 long    unsupported
3fbc0 25f 00 01 00 00 |                 long    unsupported
3fbc4 260             | ctrl_vect ' Control jump vectors
3fbc4 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3fbc8 261 00 01 00 00 |                 long    unsupported
3fbcc 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3fbd0 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3fbd4 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3fbd8 265 00 01 00 00 |                 long    unsupported
3fbdc 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3fbe0 267 3E 01 00 00 |                 long    reconfig 
3fbe4 268             | no_vect ' Invalid bank jump vectors
3fbe4 268 01 01 00 00 |                 long    invalidbank
3fbe8 269 01 01 00 00 |                 long    invalidbank
3fbec 26a 01 01 00 00 |                 long    invalidbank
3fbf0 26b 01 01 00 00 |                 long    invalidbank
3fbf4 26c 01 01 00 00 |                 long    invalidbank
3fbf8 26d 01 01 00 00 |                 long    invalidbank
3fbfc 26e 01 01 00 00 |                 long    invalidbank
3fc00 26f 01 01 00 00 |                 long    invalidbank
3fc04 270             |                 fit     $270
3fc04 270             | 
3fc04 270             |                 fit     $270
3fc04 270             | '..................................................................................................
3fc04 270             | ' PSRAM READS
3fc04 270             |                                                             ' a b c d e f
3fc04 270             |                                                             ' B W L B R L  (a) byte read
3fc04 270             |                                                             ' Y O O U E O  (b) word read
3fc04 270             |                                                             ' T R N R S C  (c) long read
3fc04 270             |                                                             ' E D G S U K  (d) new burst read
3fc04 270             |                                                             '       T M E  (e) resumed sub-burst
3fc04 270             |                                                             '         E D  (f) locked sub-burst
3fc04 270             | 
3fc04 270             | 
3fc04 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3fc08 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3fc0c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3fc10 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3fc14 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3fc18 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3fc1c 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3fc20 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3fc24 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3fc28 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3fc2c 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3fc30 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3fc34 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3fc38 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3fc3c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3fc40 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3fc44 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3fc48 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3fc4c 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3fc50 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3fc54 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3fc58 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3fc5c 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3fc60 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3fc64 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3fc68 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3fc6c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3fc70 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3fc74 28c             | 
3fc74 28c             |                             ' fall through to read bursts
3fc74 28c             |                         
3fc74 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3fc74 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3fc78 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3fc7c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3fc80 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3fc84 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3fc88 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3fc8c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3fc90 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3fc94 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3fc98 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3fc9c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3fca0 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3fca4 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3fca8 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3fcac 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3fcb0 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3fcb4 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3fcb8 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3fcbc 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3fcc0 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3fcc4 2a0 E8 D1 03 F1 |                             add     clks, clks
3fcc8 2a1             | readcommon
3fcc8 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3fccc 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3fcd0 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3fcd4 2a4             | 
3fcd4 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3fcd8 2a5 69 C8 63 FD |                             rev     cmdaddr
3fcdc 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3fce0 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3fce4 2a8             | 
3fce4 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3fce8 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3fcec 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3fcec 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3fcf0 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3fcf4 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3fcf8 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3fcfc 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3fcfc 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3fd00 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3fd04 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3fd08 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3fd0c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3fd10 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3fd14 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3fd14 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3fd18 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3fd1c 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3fd20 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3fd24 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3fd28 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3fd2c 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3fd30 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3fd34 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3fd38 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3fd3c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3fd40 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3fd44 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3fd48 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3fd4c 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3fd4c 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3fd50 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3fd54 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3fd58 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3fd5c 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3fd60 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3fd64 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3fd68 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3fd6c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3fd70 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3fd74 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3fd78 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3fd7c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3fd80 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3fd84 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3fd88 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3fd8c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3fd90 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3fd94 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3fd98 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3fd9c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3fda0 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3fda4 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3fda8 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3fdac 2da 10 03 90 FD |                             jmp     #writecommon
3fdb0 2db             | 
3fdb0 2db             | '..................................................................................................
3fdb0 2db             | ' Burst continuation testing
3fdb0 2db             | 
3fdb0 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3fdb4 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3fdb8 2dd             | continue_read_lut          
3fdb8 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3fdbc 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3fdc0 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3fdc4 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3fdc8 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3fdcc 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3fdd0 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3fdd4 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3fdd8 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3fddc 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3fde0 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3fde4 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3fde8 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3fdec 2ea             | 
3fdec 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3fdf0 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3fdf4 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3fdf8 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3fdfc 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3fe00 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3fe04 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3fe08 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3fe0c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3fe10 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3fe14 2f4 2A 1C 66 0D |             _ret_           push    #poller
3fe18 2f5             | 
3fe18 2f5             | 
3fe18 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3fe1c 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3fe1c 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3fe20 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3fe24 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3fe28 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3fe2c 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3fe30 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3fe34 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3fe38 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3fe3c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3fe40 2ff             | '..................................................................................................
3fe40 2ff             | ' Completion of requests
3fe40 2ff             | 
3fe40 2ff             | complete_rw_lut             
3fe40 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3fe44 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3fe48 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3fe4c 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3fe50 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3fe54 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3fe58 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3fe5c 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3fe60 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3fe64 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3fe68 309 32 62 64 AD |             if_z            skipf   #%110001
3fe6c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3fe70 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3fe74 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3fe78 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3fe7c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3fe80 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3fe84 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3fe88 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3fe8c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3fe90 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3fe94 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3fe98 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3fe9c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3fe9c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3fe9c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3fe9c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3fea0 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3fea4 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3fea8 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3feac 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3feb0 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3feb4 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3feb8 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3febc 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3fec0 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3fec4 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3fec8 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3fecc 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3fed0 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3fed4 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3fed8 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3fedc 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3fee0 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3fee4 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3fee8 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3feec 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3fef0 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3fef4 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3fef8 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3fefc 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3ff00 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3ff04 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3ff08 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3ff0c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3ff10 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3ff14 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3ff18 335 DF B7 03 A6 |             if_z            mov     addr2, link
3ff1c 336 34 FF 9F AD |             if_z            jmp     #checknext
3ff20 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3ff24 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3ff28 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3ff2c 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3ff30 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3ff34 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3ff38 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3ff3c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3ff40 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3ff44 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3ff48 341             | 
3ff48 341             | '..................................................................................................
3ff48 341             | ' PSRAM WRITES
3ff48 341             |                                                             '  a b c d e f g h
3ff48 341             | 
3ff48 341             |                                                             '  B W L F B R L L (a) byte write(s)
3ff48 341             |                                                             '  Y O O I U E O O (b) word write(s)
3ff48 341             |                                                             '  T R N L R S C C (c) long write(s)
3ff48 341             |                                                             '  E D G L S U K K (d) resumed fill
3ff48 341             |                                                             '          T M E E (e) new burst write
3ff48 341             |                                                             '            E D D (f) resumed burst
3ff48 341             |                                                             '              F B (g) locked fill
3ff48 341             |                                                             '              I U (h) locked burst write
3ff48 341             |                                                             '              L R 
3ff48 341             |                                                             '              L S 
3ff48 341             |                                                             '                T 
3ff48 341             | 
3ff48 341             | w_single                   
3ff48 341             | w_fill_cont           
3ff48 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3ff4c 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3ff50 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3ff54 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3ff58 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3ff5c 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3ff60 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3ff64 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3ff68 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3ff6c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3ff70 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3ff74 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3ff78 34d             |                ' disable call to r_resume_burst for single longs when z=0
3ff78 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3ff7c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3ff80 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3ff84 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3ff88 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3ff8c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3ff90 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3ff94 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3ff98 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3ff9c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3ffa0 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3ffa4 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3ffa8 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3ffac 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3ffb0 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3ffb4 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3ffb8 35d             |         
3ffb8 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3ffb8 35d             |             '
3ffb8 35d             |             '  At least one of these 3 optional components will be sent
3ffb8 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3ffb8 35d             |             '     body - N x full longs of data
3ffb8 35d             |             '     trailer - last partial long of data
3ffb8 35d             |             '
3ffb8 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3ffb8 35d             |             '
3ffb8 35d             |             'Case    Type                           Sends
3ffb8 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3ffb8 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3ffb8 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3ffb8 35d             |             ' 4)     Multiple long fill             body only
3ffb8 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3ffb8 35d             | 
3ffb8 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3ffb8 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3ffbc 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3ffc0 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3ffc4 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3ffc8 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3ffcc 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3ffd0 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3ffd4 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3ffd8 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3ffdc 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3ffe0 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3ffe4 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3ffe8 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3ffec 36a             |                             
3ffec 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3fff0 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3fff4 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3fff8 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3fffc 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
40000 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
40004 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
40008 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
4000c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
40010 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
40014 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
40018 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
4001c 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
40020 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
40024 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
40028 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
4002c 37a             | 
4002c 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
40030 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
40034 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
40038 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
4003c 37e             |                  
4003c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
40040 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
40044 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
40048 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
4004c 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
40050 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
40054 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
40058 385             | 
40058 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
4005c 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
40060 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
40064 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
40068 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
4006c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
40070 38b             | 
40070 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
40070 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
40074 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
40078 38d 2A B0 63 FD |                             push    addr1                   'save address
4007c 38e             | 
4007c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
4007c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
40080 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
40084 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
40088 391             |             
40088 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
4008c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
40090 393 2B B0 63 FD |                             pop     addr1                   'restore address
40094 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
40098 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
4009c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
400a0 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
400a4 398             | 
400a4 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
400a8 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
400ac 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
400b0 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
400b4 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
400b8 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
400bc 39e             | 
400bc 39e             |                             'trailer is done
400bc 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
400c0 39f             | 
400c0 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
400c4 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
400c8 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
400cc 3a2             | 
400cc 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
400d0 3a3 69 C8 63 FD |                             rev     cmdaddr                 
400d4 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
400d8 3a5 61 C8 63 FD |                             mergeb  cmdaddr
400dc 3a6             |                             
400dc 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
400e0 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
400e4 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
400e8 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
400ec 3aa             |                                                          
400ec 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
400f0 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
400f4 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
400f8 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
400fc 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
40100 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
40104 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
40108 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
4010c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
40110 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
40114 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
40118 3b5             |  
40118 3b5 59 52 63 FD |                             drvh    cspin
4011c 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
40120 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
40124 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
40128 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
4012c 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
40130 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
40134 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
40138 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
4013c 3be EA E5 03 F6 |                             mov     d, orighubsize
40140 3bf EF E5 63 F0 |                             shl     d, a
40144 3c0 F2 E3 83 F1 |                             sub     c, d
40148 3c1 DD E3 03 F1 |                             add     c, offset1
4014c 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
40150 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
40154 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
40158 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
4015c 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
40160 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
40164 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
40168 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
4016c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
40170 3cb BB D3 03 F6 |                             mov     resume, restorefill
40174 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
40178 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
4017c 3ce 6C FC BF CD |             if_c            call    #yield
40180 3cf 2D 00 64 FD |                             ret
40184 3d0             |                            
40184 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
40184 3d0             |                       '     rczl    pa                      'rotate left into address offset
40184 3d0             |                       '     rczl    c wcz                   'restore count and flags
40184 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
40188 3d1 02 EC 67 F0 |                             shl     pa, #2
4018c 3d2 28 06 64 AD |             if_z            setq    #3
40190 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
40194 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
40198 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
4019c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
401a0 3d7             | 
401a0 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
401a4 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
401a8 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
401ac 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
401b0 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
401b4 3dc             |                 fit 1024-32
401b4 3dc             |         
401b4 3dc             | 
401b4 3dc             | '..................................................................................................
401b4 3dc             | 
401b4 3dc             |                 fit 1024-32
401b4 3dc 00 00 00 00 
401b8 3dd 00 00 00 00 
401bc 3de 00 00 00 00 
401c0 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
401c4 3e0             |                 org 1024-32
401c4 000             | 
401c4 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
401c4 000 00 00 00 00 |                 long $0000
401c8 001 11 11 00 00 |                 long $1111
401cc 002 22 22 00 00 |                 long $2222
401d0 003 33 33 00 00 |                 long $3333
401d4 004 44 44 00 00 |                 long $4444
401d8 005 55 55 00 00 |                 long $5555
401dc 006 66 66 00 00 |                 long $6666
401e0 007 77 77 00 00 |                 long $7777
401e4 008 88 88 00 00 |                 long $8888
401e8 009 99 99 00 00 |                 long $9999
401ec 00a AA AA 00 00 |                 long $aaaa
401f0 00b BB BB 00 00 |                 long $bbbb
401f4 00c CC CC 00 00 |                 long $cccc
401f8 00d DD DD 00 00 |                 long $dddd
401fc 00e EE EE 00 00 |                 long $eeee
40200 00f FF FF 00 00 |                 long $ffff
40204 010             | 
40204 010             | 'masks
40204 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
40208 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
4020c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
40210 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
40214 014             | 
40214 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
40218 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
4021c 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
40220 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
40224 018             | 
40224 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
40228 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
4022c 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
40230 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
40234 01c             | 
40234 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
40238 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
4023c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
40240 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
40244 020             |         fit 1024
40244 020             | 
40244 020             |         fit 1024
40244 020             | 
40244 020             | '--------------------------------------------------------------------------------------------------
40244 020             |         orgh
40244                 | 
40244                 | gfxexpansion
40244                 |                             'simple line drawing graphics expansion of memory driver
40244                 |                             'jmp     #donerepeats                'just return for now
40244                 | 
40244     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
40248     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
4024c     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
40250     DD E1 03 F6 |                             mov     b, offset1              'get error term
40254     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
40258     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
4025c     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
40260     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
40264     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
40268     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
4026c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
40270     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
40274     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
40278     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
4027c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
40280     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
40284     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
40288     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
4028c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
40290     DC E5 33 F9 |                             getword d, total, #0            'get line width
40294     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
40298     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
4029c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
402a0     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
402a4     C3 03 80 FD |                             jmp     #readmask               'continue filling
402a8                 | 	alignl
402a8                 | _usbnew_spin2_dat_
402a8                 |                 org     $000
402a8 000             | 
402a8 000             | usb_host_start
402a8 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
402ac 001             | 
402ac 001 03 00 00 FF 
402b0 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
402b4 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
402b8 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
402bc 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
402c0 006 29 72 63 FD |                 setq2   htmp
402c4 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
402c8 008             | 
402c8 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
402cc 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
402d0 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
402d4 00b             | 
402d4 00b             | '------------------------------------------------------------------------------
402d4 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
402d4 00b             | ' special because the receiving function must not respond with either STALL or
402d4 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
402d4 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
402d4 00b             | ' corrupt packet, it must ignore the transaction
402d4 00b             | '------------------------------------------------------------------------------
402d4 00b             | ' On entry:
402d4 00b             | '   PTRA - start address of the SETUP data struct.
402d4 00b             | ' On exit:
402d4 00b             | '   retval - PID_ACK on success, otherwise error code.
402d4 00b             | '------------------------------------------------------------------------------
402d4 00b             | txn_setup
402d4 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
402d8 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
402dc 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
402e0 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
402e4 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
402e8 010             | .setup
402e8 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
402ec 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
402f0 012 2D 00 64 AD |         if_z    ret
402f4 013 7C 0B B0 FD |                 call    #retry_wait
402f8 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
402fc 015 2D 00 64 AD |         if_z    ret
40300 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
40304 017 E0 FF 9F FD |                 jmp     #.setup
40308 018             | 
40308 018             | '------------------------------------------------------------------------------
40308 018             | ' IN/INTERRUPT transaction.
40308 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
40308 018             | '------------------------------------------------------------------------------
40308 018             | ' On entry:
40308 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
40308 018             | '     CRC(b19..23).
40308 018             | ' On exit:
40308 018             | '------------------------------------------------------------------------------
40308 018             | txn_in
40308 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
4030c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
40310 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
40314 01b             | 
40314 01b             |                 ' Fall through to urx_packet
40314 01b             | 
40314 01b             | '------------------------------------------------------------------------------
40314 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
40314 01b             | ' received are handshakes and IN DATAx.
40314 01b             | '------------------------------------------------------------------------------
40314 01b             | ' On entry:
40314 01b             | ' On exit:
40314 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
40314 01b             | '     returned.
40314 01b             | '------------------------------------------------------------------------------
40314 01b             | urx_packet
40314 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
40318 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
4031c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
40320 01e 1A 94 63 FD |                 getct   hct2
40324 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
40328 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
4032c 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
40330 022             | .wait_sop
40330 022 22 A7 8A FA |                 rdpin   urx, dm
40334 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40338 024 08 00 90 CD |         if_c    jmp     #.get_pid
4033c 025 FC 25 CC FB |                 jnct2   #.wait_sop
40340 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
40344 027             | .get_pid
40344 027 28 02 B0 FD |                 call    #urx_next
40348 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
4034c 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
40350 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
40354 02b             | .chk_pid
40354 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40358 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
4035c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
40360 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
40364 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
40368 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
4036c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
40370 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
40374 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
40378 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
4037c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
40380 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
40384 037             | .ack_resend
40384 037 22 A7 82 FA |                 rqpin   urx, dm
40388 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
4038c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
40390 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
40394 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
40398 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
4039c 03d             | .chk_eop
4039c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
403a0 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
403a4 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
403a8 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
403ac 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
403b0 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
403b4 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
403b8 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
403bc 045 2D 00 64 FD |                 ret
403c0 046             | .idle
403c0 046 22 A7 82 FA |                 rqpin   urx, dm
403c4 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
403c8 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
403cc 049 2D 00 64 FD |                 ret
403d0 04a             | 
403d0 04a             | '------------------------------------------------------------------------------
403d0 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
403d0 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
403d0 04a             | ' if one is required.
403d0 04a             | '------------------------------------------------------------------------------
403d0 04a             | ' On entry:
403d0 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
403d0 04a             | ' On exit:
403d0 04a             | '------------------------------------------------------------------------------
403d0 04a             | utx_token
403d0 04a 22 A7 82 FA |                 rqpin   urx, dm
403d4 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
403d8 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
403dc 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
403e0 04e 34 0D B0 CD |         if_c    call    #utx_pre
403e4 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
403e8 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
403ec 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
403f0 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
403f4 053             | .next_byte
403f4 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
403f8 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
403fc 055             | .wait
403fc 055 40 46 72 FD |                 testp   dp                      wc
40400 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
40404 057 23 03 08 FC |                 akpin   dp
40408 058 22 A5 22 FC |                 wypin   utx, dm
4040c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
40410 05a             | 
40410 05a             | '------------------------------------------------------------------------------
40410 05a             | ' SETUP/OUT/INTERRUPT transaction.
40410 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
40410 05a             | '------------------------------------------------------------------------------
40410 05a             | ' On entry:
40410 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
40410 05a             | '     CRC(b19..23).
40410 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
40410 05a             | '   pkt_data - count of DATAx payload bytes to send.
40410 05a             | ' On exit:
40410 05a             | '------------------------------------------------------------------------------
40410 05a             | txn_out
40410 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
40414 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
40418 05c 00 00 C0 FF 
4041c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
40420 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
40424 05f             | 
40424 05f             |                 ' Fall through to utx_data
40424 05f             | 
40424 05f             | '------------------------------------------------------------------------------
40424 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
40424 05f             | ' calculated while the data byte is being shifted out. Since data stage
40424 05f             | ' success/fail is not determined until the status stage of the transaction,
40424 05f             | ' this routine is only concerned about the current DATAx packet.
40424 05f             | '------------------------------------------------------------------------------
40424 05f             | ' On entry:
40424 05f             | '   PTRA - hub start address of the data to read.
40424 05f             | '   pkt_cnt - data payload size.
40424 05f             | ' On exit:
40424 05f             | '------------------------------------------------------------------------------
40424 05f             | utx_data
40424 05f 22 A7 82 FA |                 rqpin   urx, dm
40428 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
4042c 061 F4 FF 9F CD |         if_c    jmp     #utx_data
40430 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
40434 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
40438 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
4043c 065 D8 0C B0 CD |         if_c    call    #utx_pre
40440 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
40444 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
40448 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
4044c 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
40450 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
40454 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
40458 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
4045c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
40460 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
40464 06f             | .read_byte
40464 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
40468 070 F0 00 B0 FD |                 call    #utx_byte
4046c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
40470 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
40474 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
40478 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
4047c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
40480 076             | .send_crc
40480 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
40484 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
40488 078 D0 00 B0 FD |                 call    #utx_byte
4048c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
40490 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
40494 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
40498 07c             | 
40498 07c             | '------------------------------------------------------------------------------
40498 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
40498 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
40498 07c             | ' expects that the packet includes at least the CRC word.
40498 07c             | '
40498 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
40498 07c             | ' was requested, which makes it difficult to determine where the data stops
40498 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
40498 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
40498 07c             | ' USB-16 expected residual value of 0xB001.
40498 07c             | '
40498 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
40498 07c             | ' so the caller can verify IN success before writing the data to its final
40498 07c             | ' destination.
40498 07c             | '------------------------------------------------------------------------------
40498 07c             | ' On entry:
40498 07c             | '   pkt_data - max byte count expected to be in the packet.
40498 07c             | '   newb_flg - signals new byte ready when toggled.
40498 07c             | ' On exit:
40498 07c             | '   pkt_cnt - actual number of bytes read.
40498 07c             | '------------------------------------------------------------------------------
40498 07c             | urx_data
40498 07c F7 77 03 F6 |                 mov     htmp2, pb
4049c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
404a0 07e 00 00 C0 FF 
404a4 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
404a8 080 BB EF 03 F6 |                 mov     pb, htmp2
404ac 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
404b0 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
404b4 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
404b8 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
404bc 085             | .wait_byte
404bc 085             | ' In-line rx for max speed
404bc 085 22 A7 82 FA |                 rqpin   urx, dm
404c0 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
404c4 087 53 A5 02 F5 |                 and     utx, urx
404c8 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
404cc 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
404d0 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
404d4 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
404d8 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
404dc 08d DC FF 9F FD |                 jmp     #.wait_byte
404e0 08e             | .get_byte
404e0 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
404e4 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
404e8 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
404ec 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
404f0 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
404f4 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
404f8 094             | .end_crc
404f8 094 01 B8 06 F1 |                 add     pkt_cnt, #1
404fc 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
40500 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
40504 097 2D 00 64 1D |         if_a    ret
40508 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
40508 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
40508 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
40508 098             | ' to miss it, so cheat a bit and look for SOP clear here.
40508 098 22 A7 82 FA |                 rqpin   urx, dm
4050c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
40510 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
40514 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
40514 09b             | .chk_crc
40514 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
40518 09c 58 00 00 FF 
4051c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
40520 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
40524 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
40528 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
4052c 0a1 34 09 B0 FD |                 call    #poll_waitx
40530 0a2             | 
40530 0a2             |                 ' Fall through to utx_handshake
40530 0a2             | 
40530 0a2             | '------------------------------------------------------------------------------
40530 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
40530 0a2             | ' the appropriate IP delay has been inserted.
40530 0a2             | '------------------------------------------------------------------------------
40530 0a2             | ' On entry:
40530 0a2             | '   retval - handshake PID to send.
40530 0a2             | ' On exit:
40530 0a2             | '   retval unchanged.
40530 0a2             | '------------------------------------------------------------------------------
40530 0a2             | utx_handshake
40530 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
40534 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
40538 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
4053c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
40540 0a6 5F A5 02 F6 |                 mov     utx, retval
40544 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
40548 0a8             | .idle
40548 0a8 22 A7 82 FA |                 rqpin   urx, dm
4054c 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
40550 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
40554 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
40558 0ac 08 09 90 FD |                 jmp     #poll_waitx
4055c 0ad             | 
4055c 0ad             | '------------------------------------------------------------------------------
4055c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
4055c 0ad             | '------------------------------------------------------------------------------
4055c 0ad             | ' On entry:
4055c 0ad             | '   utx - byte to transmit.
4055c 0ad             | ' On exit:
4055c 0ad             | '------------------------------------------------------------------------------
4055c 0ad             | utx_byte
4055c 0ad 40 46 72 FD |                 testp   dp                      wc
40560 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
40564 0af 23 03 08 FC |                 akpin   dp
40568 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
4056c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
40570 0b2             | 
40570 0b2             | '------------------------------------------------------------------------------
40570 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
40570 0b2             | '------------------------------------------------------------------------------
40570 0b2             | ' On entry:
40570 0b2             | ' On exit:
40570 0b2             | '   retval - the byte read.
40570 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
40570 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
40570 0b2             | '     received.
40570 0b2             | '------------------------------------------------------------------------------
40570 0b2             | urx_next
40570 0b2 22 A7 8A FA |                 rdpin   urx, dm
40574 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
40578 0b4 53 A5 02 F5 |                 and     utx, urx
4057c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
40580 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
40584 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
40588 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
4058c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40590 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
40594 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
40598 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
4059c 0bd 2D 00 64 FD |                 ret
405a0 0be             | 
405a0 0be             | '------------------------------------------------------------------------------
405a0 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
405a0 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
405a0 0be             | ' length, and the PID is not included in the CRC calculation:
405a0 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
405a0 0be             | '  CRC5  ENDP ADDRESS PID
405a0 0be             | ' %00000_1111_1111111_xxxxxxxx
405a0 0be             | '------------------------------------------------------------------------------
405a0 0be             | ' On entry:
405a0 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
405a0 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
405a0 0be             | ' On exit:
405a0 0be             | '   ep_addr_pid - CRC value appended to the packet.
405a0 0be             | '------------------------------------------------------------------------------
405a0 0be             | calc_crc5
405a0 0be FF 03 00 FF 
405a4 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
405a8 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
405ac 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
405b0 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
405b4 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
405b8 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
405bc 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
405c0 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
405c4 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
405c8 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
405cc 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
405d0 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
405d4 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
405d8 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
405dc 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
405e0 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
405e4 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
405e8 0d0             | 
405e8 0d0             | '------------------------------------------------------------------------------
405e8 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
405e8 0d0             | '------------------------------------------------------------------------------
405e8 0d0             | isr1_fsframe
405e8 0d0 1A 92 62 FD |                 getct   iframe_ct_base
405ec 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
405f0 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
405f4 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
405f8 0d4             | .wait
405f8 0d4 40 46 72 FD |                 testp   dp                      wc
405fc 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
40600 0d6 23 03 08 FC |                 akpin   dp
40604 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
40608 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
4060c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
40610 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
40614 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
40618 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
4061c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
40620 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
40624 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
40628 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
4062c 0e1 2C FF BF FD |                 call    #utx_byte
40630 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
40634 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
40638 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
4063c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
40640 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
40644 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
40648 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
4064c 0e9 5B A5 42 F5 |                 or      utx, icrc
40650 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
40654 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
40658 0ec 20 00 90 FD |                 jmp     #isr1_wait
4065c 0ed             | isr1_lsframe
4065c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
40660 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40664 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40668 0f0             | .wait
40668 0f0 40 46 72 FD |                 testp   dp                      wc
4066c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
40670 0f2 23 03 08 FC |                 akpin   dp
40674 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
40678 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
4067c 0f5             | isr1_wait
4067c 0f5 22 A5 82 FA |                 rqpin   utx, dm
40680 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
40684 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
40688 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
4068c 0f9 03 00 00 FF 
40690 0fa FF B3 06 F5 |                 and     frame, ##$7ff
40694 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
40698 0fc F5 FF 3B FB |                 reti1
4069c 0fd             | 
4069c 0fd             | '------------------------------------------------------------------------------
4069c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
4069c 0fd             | ' transaction will complete before the next frame is triggered.
4069c 0fd             | '------------------------------------------------------------------------------
4069c 0fd             | ' On entry:
4069c 0fd             | ' On exit:
4069c 0fd             | '------------------------------------------------------------------------------
4069c 0fd             | wait_txn_ok
4069c 0fd 1A 76 63 FD |                 getct   htmp2
406a0 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
406a4 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
406a8 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
406ac 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
406b0 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
406b4 103 2D 00 64 FD |                 ret
406b8 104             | 
406b8 104             | '------------------------------------------------------------------------------
406b8 104             | ' A device connection was detected, or a bus reset was requested by the USB
406b8 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
406b8 104             | ' and perform a reset sequence prior to device enumeration.
406b8 104             | '------------------------------------------------------------------------------
406b8 104             | dev_reset
406b8 104 22 A7 82 FA |                 rqpin   urx, dm
406bc 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
406c0 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
406c4 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
406c8 108             | reset
406c8 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
406cc 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
406d0 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
406d4 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
406d8 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
406dc 10d 1A 92 62 FD |                 getct   iframe_ct_base
406e0 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
406e4 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
406e8 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
406ec 111 24 72 07 F1 |                 add     htmp, #36
406f0 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
406f4 113             | .framewait
406f4 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
406f8 114 F8 FF 9F CD |         if_b    jmp     #.framewait
406fc 115 2D 00 64 FD |                 ret
40700 116             | 
40700 116             | '------------------------------------------------------------------------------
40700 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
40700 116             | '------------------------------------------------------------------------------
40700 116             | ' On entry:
40700 116             | '   PTRA - source address.
40700 116             | '   PB - destination address.
40700 116             | '   hr0 - length of copy, in bytes.
40700 116             | ' On exit:
40700 116             | '------------------------------------------------------------------------------
40700 116             | hmemcpy
40700 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
40704 117 F7 73 43 FC |                 wrbyte  htmp, pb
40708 118 01 EE 07 F1 |                 add     pb, #1
4070c 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
40710 11a             | 
40710 11a             | '------------------------------------------------------------------------------
40710 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
40710 11a             | ' loop until the errant device is disconnected.
40710 11a             | '------------------------------------------------------------------------------
40710 11a             | ' On entry:
40710 11a             | ' On exit:
40710 11a             | '------------------------------------------------------------------------------
40710 11a             | host_error
40710 11a             |           if ERROR_LED >= 0
40710 11a             |           end
40710 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
40714 11b             | 
40714 11b             | '------------------------------------------------------------------------------
40714 11b             | ' Get HID descriptor buffer for current port
40714 11b             | '------------------------------------------------------------------------------
40714 11b             | ' On entry:
40714 11b             | ' On exit:
40714 11b             | '   PB - HID descriptor buffer pointer
40714 11b             | '------------------------------------------------------------------------------
40714 11b             | get_hid_descr_buffer
40714 11b 2D EF 03 F6 |                 mov     pb, hdev_port
40718 11c 01 EE E7 F2 |                 cmpsub  pb, #1
4071c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
40720 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
40724 11f             | 
40724 11f             | 
40724 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
40728 120             | 
40728 120             | ' USB commands and error codes
40728 120 00 00 00 00 | cmd_data        long    0
4072c 121 00 00 00 00 | usb_err_code    long    ERR_NONE
40730 122             | 
40730 122             | ' Parameters block assigned at cog startup
40730 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
40734 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
40738 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
4073c 125             | if ACTIVITY_LED >= 0
4073c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
4073c 125             | end
4073c 125             | if ERROR_LED >= 0
4073c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
4073c 125             | end
4073c 125 00 00 00 00 | hid_descr_p     long    0
40740 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
40740 126             | 'hkbd_report_p   long    0
40740 126 00 00 00 00 | hub_descr_p     long    0
40744 127 00 00 00 00 | urx_buff_p      long    0
40748 128 00 00 00 00 | dev_desc_buff_p long    0
4074c 129 00 00 00 00 | con_desc_buff_p long    0
40750 12a 00 00 00 00 | cache_start_p   long    0
40754 12b 00 00 00 00 | cache_end_p     long    0
40758 12c             | if EMUPAD_MAX_PLAYER > 0
40758 12c             | emupad_out_ptr  long    0
40758 12c             | end
40758 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
4075c 12d             | 
4075c 12d             | hdev_init_start
4075c 12d             | hdev_port       res     1
4075c 12d             | hdev_port       res     1
4075c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
4075c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
4075c 12d             | kbm_next_datax  res     1
4075c 12d             | kbm_next_datax  res     1
4075c 12d             | hub_intf_num    res     1
4075c 12d             | hub_intf_num    res     1
4075c 12d             | hub_next_datax  res     1
4075c 12d             | hub_next_datax  res     1
4075c 12d             | hub_status_chg  res     1
4075c 12d             | hub_status_chg  res     1
4075c 12d             | hub_port_status res     1
4075c 12d             | hub_port_status res     1
4075c 12d             | if HAVE_MOUSE
4075c 12d             | ms_intf_num     res     1
4075c 12d             | ms_intf_num     res     1
4075c 12d             | ms_in_max_pkt   res     1
4075c 12d             | ms_in_max_pkt   res     1
4075c 12d             | end
4075c 12d             | kb_intf_num     res     1
4075c 12d             | kb_intf_num     res     1
4075c 12d             | kb_interval     res     1
4075c 12d             | kb_interval     res     1
4075c 12d             | kb_in_max_pkt   res     1
4075c 12d             | kb_in_max_pkt   res     1
4075c 12d             | kb_max_index    res     1
4075c 12d             | kb_max_index    res     1
4075c 12d             | kb_led_states   res     1
4075c 12d             | kb_led_states   res     1
4075c 12d             | gp_intf_num     res     1
4075c 12d             | gp_intf_num     res     1
4075c 12d             | gp_interval     res     1
4075c 12d             | gp_interval     res     1
4075c 12d             | gp_max_index    res     1
4075c 12d             | gp_max_index    res     1
4075c 12d             | gp_descr_len    res     1+MAX_DEVICES
4075c 12d             | gp_descr_len    res     1+MAX_DEVICES
4075c 12d             | hdev_init_end
4075c 12d             | 
4075c 12d             | ' Initialized at cog startup:
4075c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
4075c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
4075c 12d             | iframe_ct_new   res     1
4075c 12d             | iframe_ct_new   res     1
4075c 12d             | iframe_ct_base  res     1
4075c 12d             | iframe_ct_base  res     1
4075c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
4075c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
4075c 12d             | 
4075c 12d             | ' This register block is reset to zero when a USB device connects
4075c 12d             | hreg_init_start
4075c 12d             | hstatus         res     1         ' Host status flags
4075c 12d             | hstatus         res     1         ' Host status flags
4075c 12d             | hctwait         res     1         ' Poll-based wait clocks
4075c 12d             | hctwait         res     1         ' Poll-based wait clocks
4075c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
4075c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
4075c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
4075c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
4075c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
4075c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
4075c 12d             | xfer_retry      res     1         ' Control transfer retry count
4075c 12d             | xfer_retry      res     1         ' Control transfer retry count
4075c 12d             | retry           res     1         ' Transaction retry count
4075c 12d             | retry           res     1         ' Transaction retry count
4075c 12d             | utx             res     1         ' Byte to transmit on USB
4075c 12d             | utx             res     1         ' Byte to transmit on USB
4075c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
4075c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
4075c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
4075c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
4075c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
4075c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
4075c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
4075c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
4075c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
4075c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
4075c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
4075c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
4075c 12d             | frame           res     1         ' USB 1ms frame counter value
4075c 12d             | frame           res     1         ' USB 1ms frame counter value
4075c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
4075c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
4075c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
4075c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
4075c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
4075c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
4075c 12d             | crc             res     1         ' Used for CRC16 calculation
4075c 12d             | crc             res     1         ' Used for CRC16 calculation
4075c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
4075c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
4075c 12d             | retval          res     1         ' Global success/fail return parameter
4075c 12d             | retval          res     1         ' Global success/fail return parameter
4075c 12d             | context_retval  res     1         ' Operation contextual return parameter
4075c 12d             | context_retval  res     1         ' Operation contextual return parameter
4075c 12d             | ' Device stuff
4075c 12d             | hdev_id         res     1+MAX_DEVICES
4075c 12d             | hdev_id         res     1+MAX_DEVICES
4075c 12d             | hdev_bcd        res     1
4075c 12d             | hdev_bcd        res     1
4075c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
4075c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
4075c 12d             | ' Keyboard/mouse stuff
4075c 12d             | hctrl_ep_addr   res     1
4075c 12d             | hctrl_ep_addr   res     1
4075c 12d             | hctrl_max_pkt   res     1
4075c 12d             | hctrl_max_pkt   res     1
4075c 12d             | hconfig_base    res     1
4075c 12d             | hconfig_base    res     1
4075c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
4075c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
4075c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
4075c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
4075c 12d             | hdev_class      res     1
4075c 12d             | hdev_class      res     1
4075c 12d             | hdev_subclass   res     1
4075c 12d             | hdev_subclass   res     1
4075c 12d             | hdev_protocol   res     1
4075c 12d             | hdev_protocol   res     1
4075c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
4075c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
4075c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
4075c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
4075c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
4075c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
4075c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
4075c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
4075c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
4075c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
4075c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
4075c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
4075c 12d             | if HAVE_MOUSE
4075c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
4075c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
4075c 12d             | end
4075c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
4075c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
4075c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
4075c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
4075c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
4075c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
4075c 12d             | hdev_out_addr   res     1
4075c 12d             | hdev_out_addr   res     1
4075c 12d             | 
4075c 12d             | if EMUPAD_MAX_PLAYER > 0
4075c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
4075c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
4075c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
4075c 12d             | end
4075c 12d             | 
4075c 12d             | hreg_init_end
4075c 12d             | 
4075c 12d             | hidr_start
4075c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
4075c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
4075c 12d             | hidr_flags      res     1
4075c 12d             | hidr_flags      res     1
4075c 12d             | hidr_axis       res     4
4075c 12d             | hidr_axis       res     4
4075c 12d             | hidr_buttons    res     1
4075c 12d             | hidr_buttons    res     1
4075c 12d             | hidr_hats       res     1
4075c 12d             | hidr_hats       res     1
4075c 12d             | '' Above are actually useful values, 6 longs
4075c 12d             | hidr_type       res     1
4075c 12d             | hidr_type       res     1
4075c 12d             | hidr_id         res     1
4075c 12d             | hidr_id         res     1
4075c 12d             | hidr_offset     res     1
4075c 12d             | hidr_offset     res     1
4075c 12d             | hidr_usage_idx  res     1
4075c 12d             | hidr_usage_idx  res     1
4075c 12d             | ' below need to be push/pop'd
4075c 12d             | hidr_state      res     1
4075c 12d             | hidr_state      res     1
4075c 12d             | hidr_size       res     1
4075c 12d             | hidr_size       res     1
4075c 12d             | hidr_count      res     1
4075c 12d             | hidr_count      res     1
4075c 12d             | hidr_lminmax    res     1
4075c 12d             | hidr_lminmax    res     1
4075c 12d             | hidr_pminmax    res     1
4075c 12d             | hidr_pminmax    res     1
4075c 12d             | hidr_end
4075c 12d             | 
4075c 12d             | ' Variables dependent on the system freqency
4075c 12d             | _var_64_lower_  res     1
4075c 12d             | _var_64_lower_  res     1
4075c 12d             | _var_64_upper_  res     1
4075c 12d             | _var_64_upper_  res     1
4075c 12d             | _12Mbps_        res     1
4075c 12d             | _12Mbps_        res     1
4075c 12d             | _1_5Mbps_       res     1
4075c 12d             | _1_5Mbps_       res     1
4075c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
4075c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
4075c 12d             | _1us_           res     1         ' 1us
4075c 12d             | _1us_           res     1         ' 1us
4075c 12d             | _10us_          res     1         ' 10us
4075c 12d             | _10us_          res     1         ' 10us
4075c 12d             | _33us_          res     1         ' 33us
4075c 12d             | _33us_          res     1         ' 33us
4075c 12d             | _txn_err_       res     1         ' 250us
4075c 12d             | _txn_err_       res     1         ' 250us
4075c 12d             | _500us_         res     1         ' 500us
4075c 12d             | _500us_         res     1         ' 500us
4075c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
4075c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
4075c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
4075c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
4075c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
4075c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
4075c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
4075c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
4075c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
4075c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
4075c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
4075c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
4075c 12d             | _preamble_wait_ res     1
4075c 12d             | _preamble_wait_ res     1
4075c 12d             | _1ms_           res     1         ' 1ms
4075c 12d             | _1ms_           res     1         ' 1ms
4075c 12d             | _2ms_           res     1         ' 2ms
4075c 12d             | _2ms_           res     1         ' 2ms
4075c 12d             | _suspend_wait_  res     1         ' 3ms
4075c 12d             | _suspend_wait_  res     1         ' 3ms
4075c 12d             | _4ms_           res     1         ' 4ms
4075c 12d             | _4ms_           res     1         ' 4ms
4075c 12d             | _xfer_wait_     res     1         ' 5ms
4075c 12d             | _xfer_wait_     res     1         ' 5ms
4075c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
4075c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
4075c 12d             | _reset_hold_    res     1         ' 15ms
4075c 12d             | _reset_hold_    res     1         ' 15ms
4075c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
4075c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
4075c 12d             | _21ms_          res     1         ' 21ms
4075c 12d             | _21ms_          res     1         ' 21ms
4075c 12d             | _100ms_         res     1         ' 100ms
4075c 12d             | _100ms_         res     1         ' 100ms
4075c 12d             | _500ms_         res     1         ' 500ms
4075c 12d             | _500ms_         res     1         ' 500ms
4075c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
4075c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
4075c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
4075c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
4075c 12d             | '------------------------------------------------------------------------------
4075c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
4075c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
4075c 12d             | _usb_d_ls_nco_  res     1
4075c 12d             | _usb_d_ls_nco_  res     1
4075c 12d             | _usb_h_fs_nco_  res     1
4075c 12d             | _usb_h_fs_nco_  res     1
4075c 12d             | _usb_d_fs_nco_  res     1
4075c 12d             | _usb_d_fs_nco_  res     1
4075c 12d             | '------------------------------------------------------------------------------
4075c 12d             | ' Scratch registers
4075c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
4075c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
4075c 12d             | htmp1           res     1
4075c 12d             | htmp1           res     1
4075c 12d             | htmp2           res     1
4075c 12d             | htmp2           res     1
4075c 12d             | htmp3           res     1
4075c 12d             | htmp3           res     1
4075c 12d             | hrep            res     1         ' Repeat count
4075c 12d             | hrep            res     1         ' Repeat count
4075c 12d             | hsave0          res     1         ' Subroutine parameter saves
4075c 12d             | hsave0          res     1         ' Subroutine parameter saves
4075c 12d             | hsave1          res     1
4075c 12d             | hsave1          res     1
4075c 12d             | hsave2          res     1
4075c 12d             | hsave2          res     1
4075c 12d             | isrtmp1         res     1
4075c 12d             | isrtmp1         res     1
4075c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
4075c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
4075c 12d             | hr0             res     1         ' Multi-purpose registers
4075c 12d             | hr0             res     1         ' Multi-purpose registers
4075c 12d             | hr1             res     1
4075c 12d             | hr1             res     1
4075c 12d             | hr2             res     1
4075c 12d             | hr2             res     1
4075c 12d             | hr3             res     1
4075c 12d             | hr3             res     1
4075c 12d             | hpar1           res     1         ' Routine entry/exit parameters
4075c 12d             | hpar1           res     1         ' Routine entry/exit parameters
4075c 12d             | hpar2           res     1
4075c 12d             | hpar2           res     1
4075c 12d             | hpar3           res     1
4075c 12d             | hpar3           res     1
4075c 12d             | hct2            res     1         ' Function response bus turn-around timer
4075c 12d             | hct2            res     1         ' Function response bus turn-around timer
4075c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
4075c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
4075c 12d             | mod_cnt         res     1         ' Used in idle loops
4075c 12d             | mod_cnt         res     1         ' Used in idle loops
4075c 12d             |                 fit     $1F0
4075c 12d             |                 org     $200
4075c 200             | hlut_start
4075c 200             | 
4075c 200             | '------------------------------------------------------------------------------
4075c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
4075c 200             | ' settings to startup defaults.
4075c 200             | '------------------------------------------------------------------------------
4075c 200             | ' On entry:
4075c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
4075c 200             | '------------------------------------------------------------------------------
4075c 200             | set_speed_full
4075c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
40760 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
40764 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
40768 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
4076c 204             | '                ret                             wcz     ' Restore caller flags on exit
4076c 204             | 
4076c 204             | '------------------------------------------------------------------------------
4076c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
4076c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
4076c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
4076c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
4076c 204             | ' putting the smart pins into reset.
4076c 204             | '------------------------------------------------------------------------------
4076c 204             | ' On entry:
4076c 204             | ' On exit: CZ flags restored to caller states
4076c 204             | '------------------------------------------------------------------------------
4076c 204             | set_speed_low
4076c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
40770 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
40774 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
40778 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
4077c 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
40780 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
40784 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
40788 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
4078c 20c             | 
4078c 20c             | '------------------------------------------------------------------------------
4078c 20c             | ' Perform configuration stuff required when a device intitially connects.
4078c 20c             | '------------------------------------------------------------------------------
4078c 20c             | ' On entry:
4078c 20c             | ' On exit:
4078c 20c             | '------------------------------------------------------------------------------
4078c 20c             | on_connect
4078c 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
40790 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
40794 20e             | .retry
40794 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40798 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
4079c 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
407a0 211 00 08 00 FF 
407a4 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
407a8 213 28 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
407ac 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
407b0 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
407b4 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
407b8 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
407bc 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
407c0 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
407c4 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
407c8 21b 4C 03 B0 FD |                 call    #poll_waitx
407cc 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
407d0 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
407d4 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
407d8 21f B8 FF 9F FD |                 jmp     #.retry
407dc 220             | .get_dev_desc
407dc 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
407e0 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
407e4 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
407e8 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
407ec 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
407f0 225 88 FB BF FD |                 call    #reset
407f4 226 40 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
407f8 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
407fc 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
40800 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
40804 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40808 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
4080c 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
40810 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
40814 22e 04 00 00 FF 
40818 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
4081c 230 34 FA BF FD |                 call    #calc_crc5
40820 231 28 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
40824 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
40828 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
4082c 234 F7 AD C2 FA |                 rdbyte  total_data, pb
40830 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
40834 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
40838 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4083c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
40840 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
40844 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
40848 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
4084c 23c A0 99 02 F6 |                 mov     hctwait, _500us_
40850 23d C4 02 B0 FD |                 call    #poll_waitx
40854 23e 30 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
40858 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
4085c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
40860 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
40864 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
40868 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4086c 244 2D 00 64 5D |         if_nz   ret
40870 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
40874 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
40878 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
4087c 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
40880 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
40884 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
40888 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
4088c 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
40890 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
40894 24e 2C FB 9F CD |         if_b    jmp     #host_error
40898 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
4089c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
408a0 251 2D EC 63 FD |                 call    pa
408a4 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
408a8 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
408ac 254 2C EC 63 FD |                 jmp     pa
408b0 255             | 
408b0 255             | '------------------------------------------------------------------------------
408b0 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
408b0 255             | ' Status reporting is always in the function-to-host direction.
408b0 255             | '------------------------------------------------------------------------------
408b0 255             | ' On entry:
408b0 255             | '   PTRA - start address of the SETUP data in hub.
408b0 255             | '   PB - start address of the buffer/struct to be written to during the IN data
408b0 255             | '     stage.
408b0 255             | '   ep_addr_pid - device address, endpoint and CRC5.
408b0 255             | ' On exit:
408b0 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
408b0 255             | '     contains the count of data stage bytes actually received, which must
408b0 255             | '     always be <= the count requested.
408b0 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
408b0 255             | '     more specific USB operation error code.
408b0 255             | '------------------------------------------------------------------------------
408b0 255             | control_read
408b0 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
408b4 256 F8 91 03 F6 |                 mov     hpar2, ptra
408b8 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
408bc 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
408c0 259             | .xfer_start
408c0 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
408c4 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
408c8 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
408cc 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
408d0 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
408d4 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
408d8 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
408dc 260 61 00 00 FF 
408e0 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
408e4 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
408e8 263             | .data
408e8 263 56 B1 02 F6 |                 mov     pkt_data, total_data
408ec 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
408f0 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
408f4 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
408f8 267             | .nak_retry
408f8 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
408fc 268             | .in_retry
408fc 268 BC F6 BF FD |                 call    #txn_in
40900 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
40904 26a 28 00 90 AD |         if_z    jmp     #.commit
40908 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
4090c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
40910 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
40914 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
40918 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
4091c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
40920 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
40924 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40928 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
4092c 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
40930 275             | .commit
40930 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
40934 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
40938 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
4093c 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
40940 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
40944 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
40948 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
4094c 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
40950 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
40954 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
40958 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
4095c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
40960 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
40964 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
40968 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
4096c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
40970 285             | .pre_status
40970 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
40974 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
40978 287 00 B0 06 F6 |                 mov     pkt_data, #0
4097c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
40980 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
40984 28a 61 00 00 FF 
40988 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
4098c 28c             | .out_retry
4098c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
40990 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40994 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
40998 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
4099c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
409a0 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
409a4 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
409a8 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
409ac 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
409b0 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
409b4 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
409b8 297             | ' I've encountered transfer STALL, even though the data looks correct, and
409b8 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
409b8 297             | ' ControlRead() transfer gets things unstuck most of the time...
409b8 297             | .xfer_retry
409b8 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
409bc 298 58 01 B0 FD |                 call    #poll_waitx
409c0 299 8C F9 BF FD |                 call    #wait_txn_ok
409c4 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
409c8 29b C8 F1 03 F6 |                 mov     ptra, hpar2
409cc 29c C9 EF 03 F6 |                 mov     pb, hpar3
409d0 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
409d4 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
409d8 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
409dc 2a0             | 
409dc 2a0             | '------------------------------------------------------------------------------
409dc 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
409dc 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
409dc 2a0             | ' the SETUP data struct is filled with the required values.
409dc 2a0             | '------------------------------------------------------------------------------
409dc 2a0             | ' On entry:
409dc 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
409dc 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
409dc 2a0             | '     stage.
409dc 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
409dc 2a0             | ' On exit:
409dc 2a0             | '   retval - used to convey the success/failure of each stage.
409dc 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
409dc 2a0             | '     more specific USB operation error code.
409dc 2a0             | '------------------------------------------------------------------------------
409dc 2a0             | control_write
409dc 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
409e0 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
409e4 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
409e8 2a3             | 
409e8 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
409ec 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
409f0 2a5 F7 93 03 F6 |                 mov     hpar3, pb
409f4 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
409f8 2a7             | .xfer_start
409f8 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
409fc 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
40a00 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
40a04 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40a08 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
40a0c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
40a10 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
40a14 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
40a18 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
40a1c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
40a20 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
40a24 2b2             | .data
40a24 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
40a28 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
40a2c 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
40a30 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
40a34 2b6             | .out_retry
40a34 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
40a38 2b7 88 F6 BF FD |                 call    #txn_out
40a3c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40a40 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
40a44 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
40a48 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
40a4c 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
40a50 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
40a54 2be             | .commit
40a54 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
40a58 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
40a5c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
40a60 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
40a64 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
40a68 2c3             | pre_status_in
40a68 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
40a6c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
40a70 2c5             | .status_retry
40a70 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
40a74 2c6 44 F5 BF FD |                 call    #txn_in
40a78 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
40a7c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
40a80 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
40a84 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
40a88 2cb 2D 00 64 AD |         if_z    ret
40a8c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
40a90 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40a94 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
40a98 2cf             | '               ret                                     ' Caller must handle transfer retirement
40a98 2cf             | 
40a98 2cf             | '------------------------------------------------------------------------------
40a98 2cf             | ' Execute an IN interrupt transaction.
40a98 2cf             | '------------------------------------------------------------------------------
40a98 2cf             | ' On entry:
40a98 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
40a98 2cf             | '   hpar2 - Address of the IN data buffer
40a98 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
40a98 2cf             | ' On exit:
40a98 2cf             | '   retval - the result of the operation.
40a98 2cf             | '   hpar3 - the count of IN data bytes actually received.
40a98 2cf             | '------------------------------------------------------------------------------
40a98 2cf             | do_int_in
40a98 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
40a9c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
40aa0 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
40aa4 2d2             | 
40aa4 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
40aa8 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
40aac 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
40ab0 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
40ab4 2d6             | .retry
40ab4 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
40ab8 2d7 00 F5 BF FD |                 call    #txn_in
40abc 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
40ac0 2d9 1C 00 90 AD |         if_z    jmp     #.commit
40ac4 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
40ac8 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
40acc 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
40ad0 2dd 54 00 B0 FD |                 call    #retry_wait
40ad4 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40ad8 2df 18 00 90 AD |         if_z    jmp     #.post_ret
40adc 2e0 D4 FF 9F FD |                 jmp     #.retry
40ae0 2e1             | .commit
40ae0 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
40ae4 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
40ae8 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
40aec 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
40af0 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
40af4 2e6             | .post_ret
40af4 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
40af8 2e7             | 
40af8 2e7             | 
40af8 2e7             | '------------------------------------------------------------------------------
40af8 2e7             | ' Resets the downstream hub port to FS
40af8 2e7             | '------------------------------------------------------------------------------
40af8 2e7             | dwnstream_reset
40af8 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
40afc 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
40b00 2e9             | 
40b00 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
40b04 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
40b08 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
40b0c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
40b10 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
40b14 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
40b18 2ef             | 
40b18 2ef             | '------------------------------------------------------------------------------
40b18 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
40b18 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
40b18 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
40b18 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
40b18 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
40b18 2ef             | '------------------------------------------------------------------------------
40b18 2ef             | ' On entry:
40b18 2ef             | '   hctwait - wait interval in sysclocks.
40b18 2ef             | ' On exit:
40b18 2ef             | '------------------------------------------------------------------------------
40b18 2ef             | poll_waitx
40b18 2ef 1A 94 63 FD |                 getct   hct2
40b1c 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
40b20 2f1             | .wait
40b20 2f1 FF 25 CC FB |                 jnct2   #.wait
40b24 2f2 2D 00 64 FD |                 ret
40b28 2f3             | 
40b28 2f3             | '------------------------------------------------------------------------------
40b28 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
40b28 2f3             | '------------------------------------------------------------------------------
40b28 2f3             | ' On entry:
40b28 2f3             | '   retval - transaction response PID or error code.
40b28 2f3             | ' On exit:
40b28 2f3             | '------------------------------------------------------------------------------
40b28 2f3             | retry_wait
40b28 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
40b2c 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
40b30 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
40b34 2f6 14 00 90 AD |         if_z    jmp     #.nak
40b38 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
40b3c 2f8 D8 FF BF FD |                 call    #poll_waitx
40b40 2f9             | .dec
40b40 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
40b44 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
40b48 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
40b4c 2fc             | .nak
40b4c 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
40b50 2fd C4 FF BF FD |                 call    #poll_waitx
40b54 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
40b58 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
40b5c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
40b60 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
40b64 302 2D 00 64 FD |                 ret
40b68 303             | 
40b68 303             | host_reset
40b68 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
40b6c 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
40b70 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
40b70 305 BD 01 05 FF 
40b74 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
40b78 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
40b7c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
40b80 309             | ' Check to see if the system clock has been changed.
40b80 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
40b84 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
40b88 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
40b8c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
40b90 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
40b94 30e 40 46 62 FD |                 dirl    dp
40b98 30f             | 
40b98 30f 28 02 64 FD |                 setq    #1
40b9c 310 80 00 80 FF 
40ba0 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
40ba4 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
40ba8 313             | .enable
40ba8 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
40bac 314 41 46 62 FD |                 dirh    dp
40bb0 315 1F 38 63 FD |                 waitx   _1us_
40bb4 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40bb8 317             | 
40bb8 317             |                 ' Handle Port protection enable and startup delay
40bb8 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
40bbc 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
40bc0 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
40bc4 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
40bc8 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
40bcc 31c             | 
40bcc 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
40bd0 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
40bd4 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
40bd8 31f 00 00 04 F6 |                 mov     0-0, #0
40bdc 320             | .regloop
40bdc 320             | 
40bdc 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
40bdc 320             | 
40bdc 320             | discon_entry
40bdc 320 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
40be0 321             | 
40be0 321             |               
40be0 321             |         if HAVE_HIDPAD
40be0 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
40be4 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
40be8 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
40bec 324 F7 01 68 FC |                 wrlong  #0,pb
40bf0 325             |         end
40bf0 325             |         if EMUPAD_MAX_PLAYER > 0
40bf0 325             |         end
40bf0 325             | 
40bf0 325             |                 ' Fall through to disconnected loop
40bf0 325             | 
40bf0 325             | '-----------------------------------------------------------------------------------------------------------------
40bf0 325             | ' Device connect handling (Section 7.1.7.3).
40bf0 325             | '-----------------------------------------------------------------------------------------------------------------
40bf0 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
40bf0 325             | ' device to connect (Section 7.1.7.3).
40bf0 325             | '-----------------------------------------------------------------------------------------------------------------
40bf0 325             | disconnected
40bf0 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
40bf4 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
40bf8 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
40bfc 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
40c00 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
40c04 32a             |         if ACTIVITY_LED >= 0
40c04 32a             |         end
40c04 32a 22 A7 82 FA |                 rqpin   urx, dm
40c08 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
40c0c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
40c10 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
40c14 32e             | .se1_test
40c14 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
40c18 32f FC FE BF FD |                 call    #poll_waitx
40c1c 330 22 A7 82 FA |                 rqpin   urx, dm
40c20 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
40c24 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
40c28 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
40c2c 334             | .se1            'SE1 is a fatal error condition
40c2c 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
40c30 335 E4 FE BF FD |                 call    #poll_waitx
40c34 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
40c38 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
40c3c 338             | .connect_test                                           ' Test lines until stable J/K state seen
40c3c 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
40c40 339 22 A7 82 FA |                 rqpin   urx, dm
40c44 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
40c48 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
40c4c 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
40c50 33d             | connected
40c50 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
40c54 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
40c58 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
40c5c 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
40c60 341             | .set_pulse
40c60 341 1A 66 63 FD |                 getct   _pulse_time_
40c64 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
40c68 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
40c68 343             | ' of 1ms and make a correction, if necessary.
40c68 343             | '                mov     htmp, _1ms_
40c68 343             | '                subs    htmp, iframe_delta
40c68 343             | '                adds    _frame1ms_clks_, htmp
40c68 343             | '                debug(udec(_frame1ms_clks_))
40c68 343             | 
40c68 343             |                 ' Fall through to idle/processing loop
40c68 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
40c6c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
40c70 345             | 
40c70 345             | hidle
40c70 345 22 A7 82 FA |                 rqpin   urx, dm
40c74 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
40c78 347 98 00 90 CD |         if_c    jmp     #.se0_test
40c7c 348 24 06 70 FD |                 pollct3                         wc
40c80 349 68 00 90 3D |         if_nc   jmp     #.nopoll
40c84 34a 1A 96 63 FD |                 getct   hct3
40c88 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
40c8c 34c             | 
40c8c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
40c90 34d 00 72 E3 F8 |                 getbyte htmp
40c94 34e             | 
40c94 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
40c98 34f 94 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
40c9c 350 40 00 90 AD |         if_z    jmp     #.poll
40ca0 351             | 
40ca0 351             |         if _HAVE_GAMEPAD
40ca0 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
40ca4 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
40ca8 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
40cac 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
40cb0 355 2C 00 90 AD |         if_z    jmp     #.poll
40cb4 356             |         end
40cb4 356             | 
40cb4 356             |         if HAVE_MOUSE
40cb4 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
40cb8 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
40cbc 358 20 00 90 AD |         if_z    jmp     #.poll
40cc0 359             |         end
40cc0 359             | 
40cc0 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
40cc4 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
40cc8 35b 14 00 90 AD |         if_z    jmp     #.poll
40ccc 35c             | 
40ccc 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
40cd0 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
40cd4 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
40cd8 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
40cdc 360             |         if HAVE_MOUSE
40cdc 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
40ce0 361             |         else
40ce0 361             |         end
40ce0 361             | 
40ce0 361             | .poll
40ce0 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
40ce4 362 2D EC 63 FD |                 call    pa
40ce8 363             | .skip_poll
40ce8 363             | 
40ce8 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
40cec 364             | 
40cec 364             | .nopoll
40cec 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
40cf0 365 44 00 90 AD |         if_z    jmp     #hsuspend
40cf4 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
40cf8 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
40cfc 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
40d00 369 1A 86 63 FD |                 getct   hr0
40d04 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
40d08 36b             |         if ACTIVITY_LED >= 0
40d08 36b             |         end
40d08 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
40d0c 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
40d10 36d 5C FF 9F FD |                 jmp     #hidle
40d14 36e             | ' Check for extended SE0 state on the bus
40d14 36e             | .se0_test
40d14 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
40d18 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
40d1c 370 22 A7 82 FA |                 rqpin   urx, dm
40d20 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
40d24 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
40d28 373 24 F6 BF FD |                 call    #wait_txn_ok
40d2c 374 00 00 80 FF 
40d30 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
40d34 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
40d34 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
40d38 377             | 
40d38 377             | hsuspend
40d38 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
40d3c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
40d40 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
40d44 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
40d48 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
40d4c 37c 00 98 07 F6 |                 mov     mod_cnt, #0
40d50 37d             | 
40d50 37d             |                 ' Fall through to resume wait loop
40d50 37d             | 
40d50 37d             | hwait_resume
40d50 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
40d54 37e 02 88 47 F0 |                 shr     hr1, #2
40d58 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
40d5c 380             |         if ACTIVITY_LED >= 0
40d5c 380             |         end
40d5c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
40d60 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
40d64 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
40d68 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
40d6c 384 18 00 90 AD |         if_z    jmp     #.resume
40d70 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
40d74 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
40d78 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
40d7c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40d80 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
40d84 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
40d88 38b             | .resume
40d88 38b 22 05 28 FC |                 wypin   #OUT_K, dm
40d8c 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
40d90 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
40d94 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
40d98 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
40d9c 390 1F 72 63 FD |                 waitx   htmp
40da0 391 22 07 28 FC |                 wypin   #OUT_J, dm
40da4 392 01 72 47 F0 |                 shr     htmp, #1
40da8 393 1F 72 63 FD |                 waitx   htmp
40dac 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40db0 395 1A 92 62 FD |                 getct   iframe_ct_base
40db4 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40db8 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40dbc 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
40dc0 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
40dc4 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
40dc8 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
40dcc 39c             | 
40dcc 39c             | '------------------------------------------------------------------------------
40dcc 39c             | ' Send preamble to enable low-speed HUB ports
40dcc 39c             | '------------------------------------------------------------------------------
40dcc 39c             | ' On entry:
40dcc 39c             | ' On exit:
40dcc 39c             | '   USB baud rate set to low-speed
40dcc 39c             | '------------------------------------------------------------------------------
40dcc 39c             | utx_pre
40dcc 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
40dd0 39d 40 46 62 FD |                 dirl    dp
40dd4 39e 28 02 64 FD |                 setq    #1
40dd8 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
40ddc 3a0 58 44 62 FD |                 drvl    dm
40de0 3a1 59 46 62 FD |                 drvh    dp
40de4 3a2             | 
40de4 3a2 1E 00 00 FF 
40de8 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
40dec 3a4             | 
40dec 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
40df0 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
40df4 3a6 28 02 64 3D |         if_nc   setq    #1
40df8 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
40dfc 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
40e00 3a9             | .l1
40e00 3a9             | 
40e00 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
40e04 3aa 40 46 62 FD |                 dirl    dp
40e08 3ab 28 02 64 FD |                 setq    #1
40e0c 3ac 80 00 80 FF 
40e10 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
40e14 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
40e18 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
40e1c 3b0 41 46 62 FD |                 dirh    dp
40e20 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40e24 3b2             | 
40e24 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
40e28 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
40e2c 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
40e30 3b5             | 
40e30 3b5             | hlut_end
40e30 3b5             |                 fit     $400
40e30 3b5             |                 orgh
40e30                 | if OVERLAP_MEMORY
40e30                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
40e30                 | end
40e30                 | '------------------------------------------------------------------------------
40e30                 | ' Routines called from cog space.
40e30                 | '------------------------------------------------------------------------------
40e30                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
40e30                 | '------------------------------------------------------------------------------
40e30                 | 
40e30                 | '------------------------------------------------------------------------------
40e30                 | ' USB host cog initialization.
40e30                 | '------------------------------------------------------------------------------
40e30                 | usb_host_init
40e30                 |                 ' Initialize buffer pointers
40e30                 |         if OVERLAP_MEMORY
40e30                 |         else
40e30     4C 15 B0 FE |                 loc     pb, #hid_descr
40e34                 |         end
40e34     F7 4B 02 F6 |                 mov     hid_descr_p, pb
40e38                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
40e38                 |                 {
40e38                 |                 }
40e38                 |         
40e38                 |                 {
40e38                 |                 }
40e38                 |                 'loc     pb,#hkbd_report
40e38                 |                 'mov     hkbd_report_p,pb
40e38                 | 
40e38     44 1D B0 FE |                 loc     pb, #hub_descr
40e3c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
40e40     59 1D B0 FE |                 loc     pb, #urx_buff
40e44     F7 4F 02 F6 |                 mov     urx_buff_p, pb
40e48     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
40e4c     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
40e50     DB 1D B0 FE |                 loc     pb, #con_desc_buff
40e54     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
40e58     24 15 B0 FE |                 loc     pb, #usb_cache_start
40e5c     F7 55 02 F6 |                 mov     cache_start_p, pb
40e60     25 1D B0 FE |                 loc     pb, #usb_cache_end
40e64     F7 57 02 F6 |                 mov     cache_end_p, pb
40e68                 | 
40e68                 |         if ERROR_LED >= 0
40e68                 |         end
40e68                 | 
40e68                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
40e68                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
40e68                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
40e68                 | ' Configure and enable the Serial Host USB port.
40e68     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
40e6c                 | 
40e6c                 | '------------------------------------------------------------------------------
40e6c                 | ' Timing calculations happen before any interrupt(s) are enabled.
40e6c                 | '------------------------------------------------------------------------------
40e6c                 | ' On entry:
40e6c                 | '   htmp - current CLKFREQ value.
40e6c                 | '------------------------------------------------------------------------------
40e6c                 | hinit_usb_timings
40e6c                 | '                getct   htmp2
40e6c     B9 59 02 F6 |                 mov     save_sysclk, htmp
40e70     8D 5B 80 FF 
40e74     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
40e78     18 32 63 FD |                 getqx   _12Mbps_
40e7c     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
40e80     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
40e84     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
40e88     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
40e8c     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
40e90     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
40e94     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
40e98     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
40e9c     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
40ea0     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
40ea4     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
40ea8     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
40eac     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
40eb0     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
40eb4     80 00 00 FF 
40eb8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
40ebc     18 2E 63 FD |                 getqx   _var_64_lower_
40ec0     19 30 63 FD |                 getqy   _var_64_upper_
40ec4     28 2E 63 FD |                 setq    _var_64_lower_
40ec8     65 CD 1D FF 
40ecc     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
40ed0     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
40ed4     01 00 00 FF 
40ed8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
40edc     18 2E 63 FD |                 getqx   _var_64_lower_
40ee0     19 30 63 FD |                 getqy   _var_64_upper_
40ee4     28 2E 63 FD |                 setq    _var_64_lower_
40ee8     A1 07 00 FF 
40eec     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
40ef0     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
40ef4     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
40ef8     09 38 57 F0 |                 shr     _1us_, #9               wc
40efc     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
40f00     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
40f04     18 3A 63 FD |                 getqx   _10us_
40f08     09 3A 57 F0 |                 shr     _10us_, #9              wc
40f0c     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
40f10     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
40f14     18 3C 63 FD |                 getqx   _33us_
40f18     09 3C 57 F0 |                 shr     _33us_, #9              wc
40f1c     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
40f20     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
40f24     18 3E 63 FD |                 getqx   _txn_err_
40f28     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
40f2c     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
40f30     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
40f34     18 40 63 FD |                 getqx   _500us_
40f38     09 40 57 F0 |                 shr     _500us_, #9             wc
40f3c     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
40f40     01 00 00 FF 
40f44     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
40f48     18 42 63 FD |                 getqx   _txn_ok_ls_
40f4c     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
40f50     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
40f54     01 00 00 FF 
40f58     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
40f5c     18 44 63 FD |                 getqx   _txn_ok_fs_
40f60     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
40f64     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
40f68     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
40f6c     05 00 00 FF 
40f70     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
40f74     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
40f78     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
40f7c     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
40f80     1C 00 00 FF 
40f84     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
40f88     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
40f8c     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
40f90     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
40f94     00 00 00 FF 
40f98     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
40f9c     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
40fa0     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
40fa4     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
40fa8     04 00 00 FF 
40fac     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
40fb0     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
40fb4     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
40fb8     8D 5B 00 FF 
40fbc     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
40fc0     18 4E 63 FD |                 getqx   _preamble_wait_
40fc4     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
40fc8     01 00 00 FF 
40fcc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
40fd0     18 2E 63 FD |                 getqx   _var_64_lower_
40fd4     19 30 63 FD |                 getqy   _var_64_upper_
40fd8     28 2E 63 FD |                 setq    _var_64_lower_
40fdc     01 00 00 FF 
40fe0     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
40fe4     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
40fe8     09 50 57 F0 |                 shr     _1ms_, #9               wc
40fec     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
40ff0     FF FF 7F FF 
40ff4     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
40ff8     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
40ffc     A8 53 03 F6 |                 mov     _2ms_, _1ms_
41000     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
41004     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
41008     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
4100c     A8 57 03 F6 |                 mov     _4ms_, _1ms_
41010     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
41014     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
41018     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
4101c     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
41020     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
41024     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
41028     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
4102c     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
41030     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
41034     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
41038     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
4103c     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
41040     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
41044     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
41048     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
4104c     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
41050     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
41054     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
41058     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
4105c     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
41060                 | '        _ret_   mov     _1sec_, save_sysclk
41060                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
41060                 | '                ret
41060                 | {
41060                 | }
41060                 | 
41060                 | '------------------------------------------------------------------------------
41060                 | ' Parse a configuration descriptor chain to see if the device is a recognized
41060                 | ' one. If it is, start the task progression that will configure the device for
41060                 | ' use.
41060                 | '------------------------------------------------------------------------------
41060                 | ' On entry:
41060                 | '   hconfig_base - start address of the cached config descriptor chain.
41060                 | ' On exit:
41060                 | '------------------------------------------------------------------------------
41060                 | hparse_con_desc
41060     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
41064     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
41068     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
4106c     4E 72 FF F9 |                 movbyts htmp,#%%1032
41070     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
41074                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
41074                 | 
41074     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
41078     6E ED 03 F1 |                 add     pa, hconfig_base
4107c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
41080                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
41080                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
41080                 | ' that defines a keyboard and/or mouse.
41080     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
41084                 | .next_intf
41084     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
41088     B8 01 90 3D |         if_ae   jmp     #hset_config
4108c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
41090     75 F3 03 F1 |                 add     ptrb, hnext_desc
41094     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
41098     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
4109c     0C 00 90 AD |         if_z    jmp     #.intf
410a0     80 73 C7 FA |                 rdbyte  htmp, ptrb
410a4     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
410a8     D8 FF 9F FD |                 jmp     #.next_intf
410ac                 | .intf
410ac     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
410b0     00 92 07 F6 |                 mov     hpar3, #0
410b4     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
410b8     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
410bc     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
410c0     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
410c4                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
410c4                 | 
410c4                 | .endp
410c4     80 73 C7 FA |                 rdbyte  htmp, ptrb
410c8     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
410cc     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
410d0     78 00 90 3D |         if_ae   jmp     #.get_device
410d4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
410d8     75 F3 03 F1 |                 add     ptrb, hnext_desc
410dc     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
410e0     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
410e4     64 00 90 AD |         if_z    jmp     #.get_device
410e8     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
410ec     04 00 90 AD |         if_z    jmp     #.get_ep
410f0     D0 FF 9F FD |                 jmp     #.endp
410f4                 | .get_ep
410f4     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
410f8     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
410fc     0F 88 67 F0 |                 shl     hr1, #8 + 7
41100     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
41104     3F 00 00 FF 
41108     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
4110c     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
41110     00 90 0F F2 |                 cmp     hpar2, #0               wz
41114     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
41118     00 92 0F F2 |                 cmp     hpar3, #0               wz
4111c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
41120     A0 FF 9F FD |                 jmp     #.endp
41124                 | .in_ep
41124     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
41128     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
4112c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
4112c     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
41130     C3 8B DB F8 |                 setbyte hr2, hr0, #3
41134     8C FF 9F FD |                 jmp     #.endp
41138                 | .out_ep
41138     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
4113c     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
41140                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
41140     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
41144     C3 8D DB F8 |                 setbyte hr3, hr0, #3
41148     78 FF 9F FD |                 jmp     #.endp
4114c                 | 
4114c                 | .get_device
4114c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
41150     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
41154     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
41158     64 00 90 AD |         if_z    jmp     #.gamepad
4115c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
41160     A8 00 90 AD |         if_z    jmp     #.hub
41164     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
41168     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
4116c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
41170     4C 00 90 AD |         if_z    jmp     #.gamepad
41174     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
41178     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
4117c                 | .keyboard
4117c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
41180                 |         if HAVE_MOUSE
41180     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
41184                 |         else
41184                 |         end
41184     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
41188     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
4118c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
41190     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
41194     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
41198     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
4119c                 |                 'debug(udec(kb_intf_num))
4119c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
4119c     E4 FE 9F FD |                 jmp     #.next_intf
411a0                 | if HAVE_MOUSE
411a0                 | .mouse
411a0     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
411a4     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
411a8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
411ac     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
411b0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
411b4                 |                 'getbyte ms_interval, hr2, #3
411b4     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
411b8     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
411bc                 |                 'debug(udec(kb_intf_num))
411bc                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
411bc     C4 FE 9F FD |                 jmp     #.next_intf
411c0                 | end
411c0                 | .gamepad
411c0     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
411c4     C8 73 63 F5 |                 xor     htmp, hpar2
411c8     3F 00 00 FF 
411cc     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
411d0     B0 FE 9F AD |         if_z    jmp     #.next_intf
411d4                 |         if HAVE_MOUSE
411d4     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
411d8     C8 73 63 F5 |                 xor     htmp, hpar2
411dc     3F 00 00 FF 
411e0     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
411e4     9C FE 9F AD |         if_z    jmp     #.next_intf
411e8                 |         end
411e8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
411ec     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
411f0     90 FE 9F 5D |         if_nz   jmp     #.next_intf
411f4                 | 
411f4     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
411f8     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
411fc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
41200     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
41204     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
41208                 |                 'debug(udec(gp_intf_num))
41208                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
41208     78 FE 9F FD |                 jmp     #.next_intf
4120c                 | .hub
4120c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
41210     70 FE 9F 5D |         if_nz   jmp     #.next_intf
41214     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
41218     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
4121c     64 FE 9F 5D |         if_nz   jmp     #.next_intf
41220     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
41224     5C FE 9F 5D |         if_nz   jmp     #.next_intf
41228     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
4122c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
41230     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
41234     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
41238     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
4123c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
41240                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
41240     40 FE 9F FD |                 jmp     #.next_intf
41244                 | 
41244                 | '------------------------------------------------------------------------------
41244                 | ' If a newly-connected device is recognized, do whatever is needed to configure
41244                 | ' it according to its function, or functions. In the case of this boot protocol
41244                 | ' keyboard/mouse class driver:
41244                 | ' - SetConfiguration(config_num)
41244                 | ' - SetProtocol(boot)
41244                 | ' - SetIdle(indefinite)
41244                 | ' - Enter the device interrupt IN polling task stage.
41244                 | '------------------------------------------------------------------------------
41244                 | ' On entry:
41244                 | ' On exit:
41244                 | '------------------------------------------------------------------------------
41244                 | hset_config
41244                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
41244                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
41244     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
41248     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
4124c     00 00 0C F2 |                 cmp     0-0, #0                 wz
41250     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
41254                 |         if HAVE_MOUSE
41254     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
41258                 |         end
41258     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
4125c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
41260                 | .set_config
41260     7C 0E D0 FE |                 loc     ptra, #set_config
41264     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
41268     6E ED 03 F1 |                 add     pa, hconfig_base
4126c     F6 8F C3 FA |                 rdbyte  hpar1, pa
41270     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
41274     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
41278     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
4127c     A0 02 A0 FD |                 call    #control_write
41280     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41284     2D 00 64 5D |         if_nz   ret
41288                 | .kbd_config
41288     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
4128c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
41290                 | 
41290     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
41294     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
41298     3F 00 00 FF 
4129c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
412a0     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
412a4                 | 
412a4     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
412a8     44 0E D0 FE |                 loc     ptra, #set_protocol
412ac     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
412b0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
412b4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
412b8     A0 02 A0 FD |                 call    #control_write
412bc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
412c0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
412c4     E4 02 90 5D |         if_nz   jmp     #.notify_client
412c8     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
412cc     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
412d0     30 03 B0 FD |                 call    #hset_idle
412d4                 |                 'cmp     retval, #PID_ACK        wz
412d4                 |         'if_nz   mov     hkbd_ep_addr, #0
412d4                 |         'if_nz   jmp     #.notify_client
412d4     A9 99 02 F6 |                 mov     hctwait, _2ms_
412d8     EF 02 A0 FD |                 call    #poll_waitx
412dc     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
412e0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
412e4     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
412e8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
412ec     2C 03 B0 FD |                 call    #hset_kbdled_report
412f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
412f4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
412f8     B0 02 90 5D |         if_nz   jmp     #.notify_client
412fc     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
41300     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
41304     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41308     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
4130c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
41310     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
41314     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
41318     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
4131c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
41320     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
41324     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
41328                 |         if !!HAVE_MOUSE
41328                 |         end
41328                 | 
41328                 | .mouse_config
41328                 | if HAVE_MOUSE
41328     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
4132c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
41330     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
41334     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
41338     3F 00 00 FF 
4133c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
41340     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
41344                 | 
41344                 |                 debug("mouse passed addr check")
41344                 | 
41344     C0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
41348     00 00 80 FF 
4134c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
41350     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
41354     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41358     55 02 A0 FD |                 call    #control_read
4135c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41360     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
41364     44 02 90 5D |         if_nz   jmp     #.notify_client
41368     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
4136c     56 01 00 F6 |                 mov     0-0, total_data
41370     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41374                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
41374                 | 
41374     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
41378     74 0D D0 FE |                 loc     ptra, #set_protocol
4137c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
41380     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
41384     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
41388     A0 02 A0 FD |                 call    #control_write
4138c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41390     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
41394     14 02 90 5D |         if_nz   jmp     #.notify_client
41398                 |                 debug("mouse passed SetProtocol")
41398     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
4139c     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
413a0     60 02 B0 FD |                 call    #hset_idle
413a4                 |                 'cmp     retval, #PID_ACK        wz
413a4                 |         'if_nz   mov     hmouse_ep_addr, #0
413a4                 |         'if_nz   jmp     #.notify_client
413a4                 |                 debug("mouse passed SetIdle")
413a4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
413a8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
413ac     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
413b0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
413b4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
413b8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
413bc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
413c0     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
413c4     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
413c8     3F 00 00 FF 
413cc     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
413d0     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
413d4     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
413d8     D0 01 90 FD |                 jmp     #.notify_client
413dc                 | end
413dc                 | .gamepad_config
413dc                 | if _HAVE_GAMEPAD
413dc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
413e0     00 00 0C F2 |                 cmp     0-0, #0                 wz
413e4     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
413e8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
413ec     00 72 03 F6 |                 mov     htmp, 0-0
413f0     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
413f4     3F 00 00 FF 
413f8     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
413fc     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
41400                 | 
41400     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
41404     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
41408     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
4140c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41410     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
41414     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
41418     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
4141c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
41420     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
41424     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
41428     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
4142c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
41430     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
41434     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
41438                 | 
41438                 |                 if EMUPAD_MAX_PLAYER > 0
41438                 |                 
41438                 | .rule_loop           
41438                 |                 end
41438                 | 
41438     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
4143c     5C 00 90 AD |         if_e    jmp     #.xinput
41440     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
41444     00 72 03 F6 |                 mov     htmp,0-0
41448     01 A6 02 FF 
4144c     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
41450     7C 00 90 AD |         if_e    jmp     #.ps3
41454                 | 
41454     B0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
41458     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
4145c     00 00 80 5F 
41460     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
41464     03 00 80 AF 
41468     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
4146c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
41470     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41474     55 02 A0 FD |                 call    #control_read
41478     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4147c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
41480     00 00 04 56 |         if_nz   mov     0-0, #0
41484     24 01 90 5D |         if_nz   jmp     #.notify_client
41488     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
4148c     56 01 00 F6 |                 mov     0-0, total_data
41490     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41494                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
41494                 | 
41494     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
41498     10 01 90 FD |                 jmp     #.notify_client
4149c                 | .xinput
4149c     C4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
414a0     2D EF 03 F6 |                 mov     pb,hdev_port
414a4     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
414a8     03 EE 27 F3 |                 fle     pb,#3
414ac     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
414b0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
414b4                 | 
414b4     03 B0 06 F6 |                 mov     pkt_data, #3
414b8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
414bc     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
414c0     5A 00 A0 FD |                 call    #txn_out
414c4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
414c8                 | 
414c8     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
414cc     DC 00 90 FD |                 jmp     #.notify_client
414d0                 | .ps3
414d0     60 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
414d4     2D EF 03 F6 |                 mov     pb,hdev_port
414d8     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
414dc     04 EE 27 F3 |                 fle     pb,#4
414e0     F7 EF C3 F9 |                 decod   pb
414e4     09 EF 47 FC |                 wrbyte  pb, ptra[9]
414e8                 | 
414e8     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
414ec     10 0C D0 FE |                 loc     ptra, #set_report
414f0     01 00 80 FF 
414f4     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
414f8     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
414fc     03 61 5C FC |                 wrword  #48, ptra[wLength]
41500     30 0C B0 FE |                 loc     pb, #ps3_command_buff
41504     A0 02 A0 FD |                 call    #control_write
41508                 | 
41508     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
4150c     F0 0B D0 FE |                 loc     ptra, #set_report
41510     01 00 80 FF 
41514     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
41518     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
4151c     03 09 5C FC |                 wrword  #4, ptra[wLength]
41520     0C 0C B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
41524     A0 02 A0 FD |                 call    #control_write
41528     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
4152c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
41530     00 00 04 56 |         if_nz   mov     0-0, #0
41534     74 00 90 5D |         if_nz   jmp     #.notify_client
41538                 | 
41538     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
4153c     6C 00 90 FD |                 jmp     #.notify_client
41540                 | end
41540                 | 
41540                 | .hub_config
41540     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
41544     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
41548     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
4154c     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
41550     3F 00 00 FF 
41554     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
41558     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
4155c                 | 
4155c     B0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
41560     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
41564     26 EF 03 F6 |                 mov     pb, hub_descr_p
41568     55 02 A0 FD |                 call    #control_read
4156c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41570     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
41574     34 00 90 5D |         if_nz   jmp     #.notify_client
41578                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
41578                 | 
41578     26 F1 03 F6 |                 mov     ptra, hub_descr_p
4157c     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
41580     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
41584                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
41584                 | .pwr_loop
41584     90 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
41588     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
4158c     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
41590     A0 02 A0 FD |                 call    #control_write
41594     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
41598                 | 
41598     B2 99 02 F6 |                 mov     hctwait, _500ms_
4159c     B1 99 02 F1 |                 add     hctwait, _100ms_
415a0     EF 02 A0 FD |                 call    #poll_waitx
415a4                 | 
415a4     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
415a8     00 00 90 FD |                 jmp     #.notify_client
415ac                 | 
415ac                 | .notify_client
415ac     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
415b0     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
415b4                 |                 debug(uhex_long(hdev_type,hdev_type+1))
415b4                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
415b4     2D 00 64 FD |                 ret
415b8                 | 
415b8                 | '------------------------------------------------------------------------------
415b8                 | ' Initialize the keyboard/mouse data area to start-up values.
415b8                 | '------------------------------------------------------------------------------
415b8                 | ' On entry:
415b8                 | ' On exit:
415b8                 | '------------------------------------------------------------------------------
415b8                 | init_kbdm_data
415b8     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
415bc     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
415c0                 | 
415c0     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
415c4     2B ED 03 F6 |                 mov     pa, cache_end_p
415c8                 | .loop
415c8     61 01 4C FC |                 wrbyte  #0, ptra++
415cc     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
415d0     F4 FF 9F CD |         if_b    jmp     #.loop
415d4                 |         
415d4                 |         if EMUPAD_MAX_PLAYER > 0
415d4                 |         end
415d4                 | 
415d4                 | 
415d4     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
415d8                 | .regloop
415d8     00 EC 8F F9 |                 altd    pa
415dc     00 00 04 F6 |                 mov     0-0, #0
415e0     01 EC 07 F1 |                 add     pa, #1
415e4     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
415e8     EC FF 9F 5D |         if_nz   jmp     #.regloop
415ec                 | 
415ec     E1 E1 61 FF 
415f0     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
415f4     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
415f8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
415fc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
41600                 | 
41600     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
41604                 | 
41604                 | '------------------------------------------------------------------------------
41604                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
41604                 | ' function.
41604                 | '------------------------------------------------------------------------------
41604                 | ' On entry:
41604                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
41604                 | '   hpar2 - index number of the target interface.
41604                 | ' On exit:
41604                 | '------------------------------------------------------------------------------
41604                 | hset_idle
41604     A9 99 02 F6 |                 mov     hctwait, _2ms_
41608     EF 02 A0 FD |                 call    #poll_waitx
4160c     E8 0A D0 FE |                 loc     ptra, #set_idle
41610     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
41614     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
41618     A0 02 80 FD |                 jmp     #control_write
4161c                 | 
4161c                 | '------------------------------------------------------------------------------
4161c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
4161c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
4161c                 | '------------------------------------------------------------------------------
4161c                 | ' On entry:
4161c                 | '   ep_addr_pid - device address and enpoint for the request.
4161c                 | ' On exit:
4161c                 | '   retval - transaction result.
4161c                 | '------------------------------------------------------------------------------
4161c                 | hset_kbdled_report
4161c     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
41620     DC 0A D0 FE |                 loc     ptra, #set_report
41624     01 00 80 FF 
41628     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
4162c     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
41630     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
41634     27 EF 03 F6 |                 mov     pb, urx_buff_p
41638     F7 77 42 FC |                 wrbyte  kb_led_states, pb
4163c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
41640                 | 
41640                 | '------------------------------------------------------------------------------
41640                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
41640                 | '------------------------------------------------------------------------------
41640                 | ' On entry:
41640                 | ' On exit:
41640                 | '------------------------------------------------------------------------------
41640                 | hget_kbd_in_report
41640     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
41644     27 91 03 F6 |                 mov     hpar2, urx_buff_p
41648     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
4164c     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
41650     CF 02 A0 FD |                 call    #do_int_in
41654     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41658     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
4165c                 | 
4165c     00 92 0F F2 |                 cmp     hpar3, #0               wz
41660     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
41664                 | 
41664     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
41668     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
4166c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
41670     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
41674                 | 
41674     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
41678     18 00 B0 FD |                 call    #hkbd_compare
4167c                 |         if EMUPAD_MAX_PLAYER > 0
4167c                 |         end
4167c                 | 
4167c                 | .led_check
4167c     3B 73 03 F6 |                 mov     htmp, kb_led_states
41680     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
41684     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
41688     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
4168c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
41690     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
41694                 | 
41694                 | '------------------------------------------------------------------------------
41694                 | ' Compare current and previous keyboard data buffers for keypress changes.
41694                 | '------------------------------------------------------------------------------
41694                 | hkbd_compare
41694     27 F1 03 F6 |                 mov     ptra, urx_buff_p
41698     E4 13 F0 FE |                 loc     ptrb, #hkbd_report
4169c     61 75 07 FB |                 rdlong  htmp1, ptra++
416a0     E1 77 07 FB |                 rdlong  htmp2, ptrb++
416a4     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
416a8     61 75 07 FB |                 rdlong  htmp1, ptra++
416ac     E1 77 07 FB |                 rdlong  htmp2, ptrb++
416b0     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
416b4     2D 00 64 AD |         if_z    ret
416b8                 | 
416b8     C4 13 D0 FE |                 loc     ptra, #hkbd_report
416bc                 | 
416bc                 |                 ' Handle modifiers
416bc     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
416c0     00 89 C7 FA |                 rdbyte  hr1, ptra
416c4     C8 89 43 F9 |                 rolword hr1,hpar2,#0
416c8     63 88 63 FD |                 mergew  hr1
416cc     08 EC 07 F6 |                 mov     pa,#8
416d0                 | .modloop
416d0     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
416d4     E8 8E 07 F6 |                 mov     hpar1,#$E8
416d8     F6 8F 83 F1 |                 sub     hpar1,pa
416dc     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
416e0     FB ED 6F FB |                 djnz    pa,#.modloop
416e4                 | 
416e4     6F E0 75 FD | .release        modc    _set    wc
416e8                 |                 'alts    hdev_port, #hid_report_p
416e8                 |                 'mov     ptra, hid_report_p
416e8     02 F0 07 F1 |                 add     ptra, #2
416ec     06 EC 07 F6 |                 mov     pa, #6
416f0     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
416f4     20 00 90 AD |         if_z    jmp     #.rl3
416f8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
416fc     02 F2 07 F1 |                 add     ptrb, #2
41700     06 EE 07 F6 |                 mov     pb, #6
41704     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
41708     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
4170c     08 00 90 AD |         if_z    jmp     #.rl3
41710     FC EF 6F FB |                 djnz    pb, #.rl2
41714     68 00 B0 FD |                 call    #hkbd_translate
41718     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
4171c                 | 
4171c     00 92 07 F6 |                 mov     hpar3, #0
41720     1F 92 27 F4 |                 bith    hpar3, #31
41724                 | 
41724     6F 00 74 FD | .press          modc    _clr    wc
41728     27 F1 03 F6 |                 mov     ptra, urx_buff_p
4172c     02 F0 07 F1 |                 add     ptra, #2
41730     06 EC 07 F6 |                 mov     pa, #6
41734     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
41738     20 00 90 AD |         if_z    jmp     #.pl3
4173c     40 13 F0 FE |                 loc     ptrb, #hkbd_report
41740     02 F2 07 F1 |                 add     ptrb, #2
41744     06 EE 07 F6 |                 mov     pb, #6
41748     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
4174c     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
41750     08 00 90 AD |         if_z    jmp     #.pl3
41754     FC EF 6F FB |                 djnz    pb, #.pl2
41758     24 00 B0 FD |                 call    #hkbd_translate
4175c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
41760                 | 
41760     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
41764     18 13 F0 FE |                 loc     ptrb, #hkbd_report
41768     28 02 64 FD |                 setq #1
4176c     61 75 07 FB |                 rdlong  htmp1, ptra++
41770     28 02 64 FD |                 setq #1
41774     E1 75 67 FC |                 wrlong  htmp1, ptrb++
41778     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
4177c                 | 
4177c     2D 00 64 FD |                 ret
41780                 | 
41780                 | '------------------------------------------------------------------------------
41780                 | ' Translate keyboard scancode to ASCII
41780                 | '------------------------------------------------------------------------------
41780                 | ' On entry:
41780                 | '   hpar1 - scancode
41780                 | '   hpar2 - key modifiers state
41780                 | '       c - pressed (0) or released (1) flag
41780                 | ' On exit:
41780                 | '   hpar1 - bit     31 = 0 pressed, 1 released
41780                 | '               30..17 = unused
41780                 | '                   18 = scroll-lock state 
41780                 | '                   17 = caps-lock state
41780                 | '                   16 = num-lock state 
41780                 | '                15..8 = key modifiers state
41780                 | '                 7..0 = scancode
41780                 | '------------------------------------------------------------------------------
41780                 | hkbd_translate
41780     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
41784     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
41788     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
4178c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
41790     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
41794     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
41798                 | 
41798                 |         if EMUPAD_MAX_PLAYER > 0
41798                 | 
41798                 |         if EMUPAD_BT0_BIT >= 0
41798                 |         end
41798                 |         if EMUPAD_BT1_BIT >= 0
41798                 |         end
41798                 |         if EMUPAD_BT2_BIT >= 0
41798                 |         end
41798                 |         if EMUPAD_BT3_BIT >= 0
41798                 |         end
41798                 |         if EMUPAD_BT4_BIT >= 0
41798                 |         end
41798                 |         if EMUPAD_BT5_BIT >= 0
41798                 |         end
41798                 |         if EMUPAD_BT6_BIT >= 0
41798                 |         end
41798                 |         if EMUPAD_BT7_BIT >= 0
41798                 |         end
41798                 |         if EMUPAD_BT8_BIT >= 0
41798                 |         end
41798                 |         if EMUPAD_BT9_BIT >= 0
41798                 |         end
41798                 | 
41798                 |         end
41798     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
4179c     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
417a0     1F 8E 47 F4 |                 bitc    hpar1, #31
417a4                 |         if KEYQUEUE_SIZE > 0
417a4     D4 09 B0 FE |                 loc pb,#keyq_head
417a8     F7 73 E3 FA |                 rdword htmp,pb
417ac     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
417b0     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
417b4     B9 77 03 F6 |                 mov htmp2,htmp
417b8     04 76 07 FA |                 mul htmp2,#4
417bc     F7 77 03 F1 |                 add htmp2,pb
417c0     02 76 07 F1 |                 add htmp2,#2
417c4     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
417c8     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
417cc     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
417d0     F7 73 43 5C |         if_nz   wrbyte htmp,pb
417d4                 |         end
417d4     2D 00 7C FD |                 ret wcz
417d8                 | 
417d8                 | if HAVE_MOUSE
417d8                 | '------------------------------------------------------------------------------
417d8                 | ' Execute an IN interrupt transaction to poll for mouse activity.
417d8                 | '------------------------------------------------------------------------------
417d8                 | ' On entry:
417d8                 | ' On exit:
417d8                 | '------------------------------------------------------------------------------
417d8                 | hget_mouse_in_report
417d8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
417dc     27 91 03 F6 |                 mov     hpar2, urx_buff_p
417e0     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
417e4     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
417e8     CF 02 A0 FD |                 call    #do_int_in
417ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
417f0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
417f4                 | 
417f4     00 92 0F F2 |                 cmp     hpar3, #0               wz
417f8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
417fc                 | 
417fc     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
41800     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
41804     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
41808     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
4180c                 | 
4180c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
41810     05 92 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
41814     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
41818     01 92 87 31 |         if_ae   sub     hpar3, #1
4181c                 | 
4181c     50 09 90 FE |                 loc     pa, #mouse_limits
41820     65 13 F0 FE |                 loc     ptrb, #mouse_xacc
41824                 | 
41824                 |                 ' load xacc,yacc,zacc
41824     28 04 64 FD |                 setq    #3-1
41828     80 89 07 FB |                 rdlong  hr1,ptrb
4182c                 |                 ' load limits and outptr
4182c     28 04 64 FD |                 setq    #3-1
41830     F6 75 03 FB |                 rdlong  htmp1,pa
41834                 | 
41834     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
41838     8C 73 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
4183c     00 72 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
41840     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
41844     01 72 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
41848     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
4184c     02 72 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
41850     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
41854                 |               
41854                 | 
41854     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
41858     07 72 67 F7 |                 signx   htmp, #7
4185c     B9 89 03 F1 |                 add     hr1,htmp
41860     00 74 0F F2 |                 cmp     htmp1,#0 wz
41864     BA 89 63 53 |         if_ne   fles    hr1,htmp1
41868     00 88 47 53 |         if_ne   fges    hr1,#0
4186c                 | 
4186c     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
41870     07 72 67 F7 |                 signx   htmp, #7
41874     B9 8B 03 F1 |                 add     hr2,htmp
41878     00 76 0F F2 |                 cmp     htmp2,#0 wz
4187c     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
41880     00 8A 47 53 |         if_ne   fges    hr2,#0
41884                 |                 
41884                 | 
41884     04 92 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
41888     00 73 C7 AA |         if_z    rdbyte  htmp, ptra
4188c     07 72 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
41890     B9 8D 03 A1 |         if_z    add     hr3,htmp
41894                 | 
41894     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
41898     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
4189c                 | 
4189c                 |                 ' write back accumulators
4189c     28 04 64 FD |                 setq    #3-1
418a0     80 89 67 FC |                 wrlong  hr1,ptrb
418a4                 |                 ' if outptr set, write X/Y words
418a4     00 78 0F F2 |                 cmp htmp3,#0                    wz
418a8     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
418ac     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
418b0     2D 00 64 FD |                 ret
418b4                 | end
418b4                 | 
418b4                 | '------------------------------------------------------------------------------
418b4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
418b4                 | '------------------------------------------------------------------------------
418b4                 | ' On entry:
418b4                 | ' On exit:
418b4                 | '------------------------------------------------------------------------------
418b4                 | if _HAVE_GAMEPAD
418b4                 | hget_gp_in_report
418b4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
418b8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
418bc                 | 
418bc     27 91 03 F6 |                 mov     hpar2, urx_buff_p
418c0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
418c4     00 92 E3 F8 |                 getbyte hpar3
418c8     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
418cc     CF 02 A0 FD |                 call    #do_int_in
418d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
418d4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
418d8                 | 
418d8     00 92 0F F2 |                 cmp     hpar3, #0               wz
418dc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
418e0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
418e0                 | 
418e0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
418e4     00 72 E3 F8 |                 getbyte htmp                            ' |
418e8     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
418ec     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
418f0     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
418f4     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
418f8     B9 01 C0 F8 |                 setbyte htmp                            ' |
418fc                 | 
418fc                 | ' Note: the following code compares the current and previous reports
418fc                 | ' and process the data if there are changes to ease the debug output.
418fc                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
418fc                 | ' gpPreReport buffer.
418fc                 | 
418fc                 |                 ' ----- start of block to remove
418fc                 |                 {
418fc                 |                 }
418fc                 |                 ' ----- end of block to remove
418fc     04 05 90 FE |                 loc pa,#hpad_translate
41900     2A EC 63 FD |                 push pa
41904                 | 
41904                 |                 ' FALL THROUGH !!!!
41904                 | 
41904                 | '------------------------------------------------------------------------------
41904                 | ' Decode controller report
41904                 | '------------------------------------------------------------------------------
41904                 | hid_decode
41904                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
41904     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
41908     00 04 00 FF 
4190c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
41910                 | 
41910     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
41914                 | 
41914     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
41918     00 1C E3 F8 |                 getbyte hidr_type
4191c     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
41920     44 02 90 AD |         if_z    jmp     #hpad_xinput
41924     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
41928     2C 03 90 AD |         if_z    jmp     #hpad_ps3
4192c     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
41930     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
41934     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
41938                 |                 
41938                 | 
41938                 | '------------------------------------------------------------------------------
41938                 | ' Handle HID controller (or mouse now
41938                 | ' On entry:
41938                 | '   ptrb - controller report
41938                 | '------------------------------------------------------------------------------
41938                 | hpad_hid
41938     1B 01 A0 FD |                 call    #get_hid_descr_buffer
4193c     F7 F1 03 F6 |                 mov     ptra, pb
41940     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
41944     00 EC 03 F6 |                 mov     pa, 0-0
41948                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
41948     19 2A 3B FF 
4194c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
41950                 | 
41950                 | .next
41950     00 EC 5F F2 |                 cmps    pa, #0      wcz
41954     2D 00 7C ED |         if_be   ret     wcz
41958                 | 
41958     61 8F C7 FA |                 rdbyte  hpar1, ptra++
4195c     01 EC 87 F1 |                 sub     pa, #1
41960     00 90 07 F6 |                 mov     hpar2, #0
41964                 | 
41964     C7 73 03 F6 |                 mov     htmp, hpar1
41968     03 72 07 F5 |                 and     htmp, #$03
4196c     01 72 0F F2 |                 cmp     htmp, #1    wz
41970     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
41974     07 90 67 A7 |         if_z    signx   hpar2,#7
41978     01 EC 87 A1 |         if_z    sub     pa, #1
4197c     02 72 0F F2 |                 cmp     htmp, #2    wz
41980     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
41984     0F 90 67 A7 |         if_z    signx   hpar2,#15
41988     02 EC 87 A1 |         if_z    sub     pa, #2
4198c     03 72 0F F2 |                 cmp     htmp, #3    wz
41990     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
41994     04 EC 87 A1 |         if_z    sub     pa, #4
41998                 | 
41998     FC 8E 07 F5 |                 and     hpar1, #$FC
4199c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
4199c                 | 
4199c     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
419a0     18 01 90 AD |         if_z    jmp     #.report_id
419a4     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
419a8     30 01 90 AD |         if_z    jmp     #.usage_page
419ac     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
419b0     38 01 90 AD |         if_z    jmp     #.usage
419b4     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
419b8     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
419bc     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
419c0     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
419c4     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
419c8     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
419cc     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
419d0     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
419d4     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
419d8     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
419dc     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
419e0     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
419e4     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
419e8     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
419ec     60 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
419f0     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
419f4     58 FF 9F 5D |         if_nz   jmp     #.next
419f8                 | 
419f8     D5 25 A7 FB |                 tjf     hidr_state,#.next
419fc                 | 
419fc     03 90 07 F5 |                 and     hpar2, #$03
41a00     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
41a04     18 00 90 5D |         if_nz   jmp     #.skip
41a08                 | 
41a08     02 24 0F F2 |                 cmp     hidr_state, #2  wz
41a0c     20 00 90 AD |         if_z    jmp     #.axes
41a10     03 24 0F F2 |                 cmp     hidr_state, #3  wz
41a14     5C 00 90 AD |         if_z    jmp     #.hats
41a18     04 24 0F F2 |                 cmp     hidr_state, #4  wz
41a1c     70 00 90 AD |         if_z    jmp     #.buttons
41a20                 | .skip
41a20     93 73 03 F6 |                 mov     htmp, hidr_size
41a24     94 73 03 FA |                 mul     htmp, hidr_count
41a28     B9 21 03 F1 |                 add     hidr_offset, htmp
41a2c     20 FF 9F FD |                 jmp     #.next
41a30                 | .axes
41a30                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
41a30     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
41a34     94 89 03 F6 |                 mov     hr1, hidr_count
41a38                 | .l1
41a38     90 8F 03 F6 |                 mov     hpar1, hidr_offset
41a3c     93 91 03 F6 |                 mov     hpar2, hidr_size
41a40     08 03 B0 FD |                 call    #hpad_getbits
41a44     68 03 B0 FD |                 call    #hpad_normalize
41a48     08 86 1F F2 |                 cmp     hr0, #8         wcz
41a4c     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
41a50     00 8A 43 C8 |         if_b    getnib  hr2
41a54     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
41a58     5F 01 20 C9 |         if_b    setword retval
41a5c     01 86 07 C1 |         if_b    add     hr0, #1
41a60     93 21 03 F1 |                 add     hidr_offset, hidr_size
41a64     F4 89 6F FB |                 djnz    hr1, #.l1
41a68                 | 
41a68     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
41a6c     01 24 07 F6 |                 mov     hidr_state, #1
41a70     DC FE 9F FD |                 jmp     #.next
41a74                 | .hats
41a74                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
41a74     90 8F 03 F6 |                 mov     hpar1, hidr_offset
41a78     93 91 03 F6 |                 mov     hpar2, hidr_size
41a7c     CC 02 B0 FD |                 call    #hpad_getbits
41a80     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
41a84     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
41a88     01 24 07 F6 |                 mov     hidr_state, #1
41a8c     90 FF 9F FD |                 jmp     #.skip
41a90                 | .buttons
41a90                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
41a90     90 8F 03 F6 |                 mov     hpar1, hidr_offset
41a94     93 91 03 F6 |                 mov     hpar2, hidr_size
41a98     94 91 03 FA |                 mul     hpar2, hidr_count
41a9c     AC 02 B0 FD |                 call    #hpad_getbits
41aa0     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
41aa4     B9 BF 62 F0 |                 shl     retval, htmp
41aa8     5F 19 43 F5 |                 or      hidr_buttons, retval
41aac     94 73 03 F1 |                 add     htmp, hidr_count
41ab0     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
41ab4     01 24 07 F6 |                 mov     hidr_state, #1
41ab8     64 FF 9F FD |                 jmp     #.skip
41abc                 | .report_id
41abc     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
41ac0     2D 00 7C 5D |         if_nz   ret     wcz
41ac4     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
41ac8     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
41acc     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
41ad0     01 24 67 56 |         if_nz   neg     hidr_state,#1
41ad4     01 F2 87 51 |         if_nz   sub     ptrb,#1
41ad8     74 FE 9F FD |                 jmp     #.next
41adc                 | .usage_page
41adc     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
41ae0     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
41ae4     04 24 07 A6 |         if_z    mov     hidr_state, #4
41ae8     64 FE 9F FD |                 jmp     #.next
41aec                 | .usage
41aec     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
41af0     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
41af4     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
41af8     01 24 07 A6 |         if_z    mov     hidr_state, #1
41afc     50 FE 9F AD |         if_z    jmp     #.next
41b00     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
41b04     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
41b08     01 24 07 A6 |         if_z    mov     hidr_state, #1
41b0c     40 FE 9F AD |         if_z    jmp     #.next
41b10     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
41b14     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
41b18     10 00 90 3D |         if_nc   jmp     #.usage_axis
41b1c     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
41b20     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
41b24     03 24 07 A6 |         if_z    mov     hidr_state, #3
41b28     24 FE 9F FD |                 jmp     #.next
41b2c                 | .usage_axis
41b2c     01 24 57 F2 |                 cmps    hidr_state, #1          wc
41b30     1C FE 9F CD |         if_b    jmp     #.next
41b34     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
41b38     C8 01 00 F8 |                 setnib  hpar2
41b3c                 | 
41b3c     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
41b40     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
41b44                 | 
41b44     01 22 07 F1 |                 add     hidr_usage_idx, #1
41b48     02 24 07 F6 |                 mov     hidr_state, #2
41b4c     00 FE 9F FD |                 jmp     #.next
41b50                 | .pushpop
41b50                 |                 ' Entering with C set if PUSH  
41b50     38 0F B0 FE |                 loc     pb, #hid_stack
41b54     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
41b58     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
41b5c     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
41b60     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
41b64     E8 FD 9F FD |                 jmp     #.next
41b68                 |         
41b68                 | 
41b68                 | '------------------------------------------------------------------------------
41b68                 | ' Handle XInput controller
41b68                 | ' On entry:
41b68                 | '   ptrb - controller report
41b68                 | '------------------------------------------------------------------------------
41b68                 | '   Default implementation translates the report to a pseudo-defacto hid
41b68                 | '   standard and jumps to hpad_translate for actions.
41b68                 | '   Implementors may take specific actions for this kind of controller.
41b68                 | '------------------------------------------------------------------------------
41b68                 | hpad_xinput
41b68     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
41b6c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
41b70     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
41b74     14 72 0F F2 |                 cmp     htmp, #$14      wz
41b78     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
41b7c                 | 
41b7c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
41b7c                 | 
41b7c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
41b80     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
41b84                 | 
41b84     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
41b88     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
41b8c     5F BF 22 F6 |                 not     retval
41b90     5F 11 2B F9 |                 setword hidr_axis, retval, #1
41b94     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
41b98     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
41b9c     5F BF 22 F6 |                 not     retval
41ba0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
41ba4                 | 
41ba4     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
41ba8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
41bac     C0 BE 1E F2 |                 cmp     retval, #192    wcz
41bb0     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
41bb4     F8 01 B0 FD |                 call    #hpad_normalize
41bb8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
41bbc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
41bc0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
41bc4     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
41bc8     E4 01 B0 FD |                 call    #hpad_normalize
41bcc     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
41bd0                 | 
41bd0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
41bd4     81 BF E6 FA |                 rdword  retval, ptrb[1]
41bd8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
41bdc     00 18 47 F4 |                 bitc    hidr_buttons, #0
41be0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
41be4     01 18 47 F4 |                 bitc    hidr_buttons, #1
41be8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
41bec     02 18 47 F4 |                 bitc    hidr_buttons, #2
41bf0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
41bf4     03 18 47 F4 |                 bitc    hidr_buttons, #3
41bf8     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
41bfc     04 18 47 F4 |                 bitc    hidr_buttons, #4
41c00     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
41c04     05 18 47 F4 |                 bitc    hidr_buttons, #5
41c08     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
41c0c     08 18 47 F4 |                 bitc    hidr_buttons, #8
41c10     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
41c14     09 18 47 F4 |                 bitc    hidr_buttons, #9
41c18     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
41c1c     0A 18 47 F4 |                 bitc    hidr_buttons, #10
41c20     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
41c24     0B 18 47 F4 |                 bitc    hidr_buttons, #11
41c28     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
41c2c     0C 18 47 F4 |                 bitc    hidr_buttons, #12
41c30                 | 
41c30     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
41c34     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
41c38     7A BB 7A FF 
41c3c     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
41c40     F9 FF 7F FF 
41c44     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
41c48     BA 73 5F F9 |                 altgn   htmp, #htmp1
41c4c     00 72 43 F8 |                 getnib  htmp
41c50     B9 1B C3 F8 |                 setbyte hidr_hats, htmp, #0
41c54                 | 
41c54     AC 01 90 FD |                 jmp     #hpad_translate
41c58                 | 
41c58                 | '------------------------------------------------------------------------------
41c58                 | ' Handle PS3 controller
41c58                 | ' On entry:
41c58                 | '   ptrb - controller report
41c58                 | '------------------------------------------------------------------------------
41c58                 | '   Default implementation translates the report to a pseudo-defacto hid
41c58                 | '   standard and jumps to hpad_translate for actions.
41c58                 | '   Implementors may take specific actions for this kind of controller.
41c58                 | '------------------------------------------------------------------------------
41c58                 | hpad_ps3
41c58     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
41c5c     01 72 0F F2 |                 cmp     htmp, #$01      wz
41c60     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
41c64                 | 
41c64                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
41c64                 | 
41c64     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
41c68     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
41c6c     40 01 B0 FD |                 call    #hpad_normalize
41c70     5F 11 23 F9 |                 setword hidr_axis, retval, #0
41c74     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
41c78     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
41c7c     30 01 B0 FD |                 call    #hpad_normalize
41c80     5F 11 2B F9 |                 setword hidr_axis, retval, #1
41c84     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
41c88     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
41c8c     20 01 B0 FD |                 call    #hpad_normalize
41c90     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
41c94     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
41c98     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
41c9c     10 01 B0 FD |                 call    #hpad_normalize
41ca0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
41ca4     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
41ca8     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
41cac                 | 
41cac     08 8E 07 F6 |                 mov     hpar1, #8
41cb0     13 90 07 F6 |                 mov     hpar2, #19
41cb4     94 00 B0 FD |                 call    #hpad_getbits
41cb8                 | 
41cb8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
41cbc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
41cc0     00 18 47 F4 |                 bitc    hidr_buttons, #0
41cc4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
41cc8     01 18 47 F4 |                 bitc    hidr_buttons, #1
41ccc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
41cd0     02 18 47 F4 |                 bitc    hidr_buttons, #2
41cd4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
41cd8     03 18 47 F4 |                 bitc    hidr_buttons, #3
41cdc     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
41ce0     04 18 47 F4 |                 bitc    hidr_buttons, #4
41ce4     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
41ce8     05 18 47 F4 |                 bitc    hidr_buttons, #5
41cec     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
41cf0     06 18 47 F4 |                 bitc    hidr_buttons, #6
41cf4     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
41cf8     07 18 47 F4 |                 bitc    hidr_buttons, #7
41cfc     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
41d00     08 18 47 F4 |                 bitc    hidr_buttons, #8
41d04     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
41d08     09 18 47 F4 |                 bitc    hidr_buttons, #9
41d0c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
41d10     0A 18 47 F4 |                 bitc    hidr_buttons, #10
41d14     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
41d18     0B 18 47 F4 |                 bitc    hidr_buttons, #11
41d1c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
41d20     0C 18 47 F4 |                 bitc    hidr_buttons, #12
41d24                 | 
41d24     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
41d28     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
41d2c     09 FA 79 FF 
41d30     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
41d34     FF FA 7F FF 
41d38     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
41d3c     BA 73 5F F9 |                 altgn   htmp, #htmp1
41d40     00 72 43 F8 |                 getnib  htmp
41d44     B9 1B C3 F8 |                 setbyte hidr_hats, htmp, #0
41d48                 | 
41d48     B8 00 90 FD |                 jmp     #hpad_translate
41d4c                 | 
41d4c                 | '------------------------------------------------------------------------------
41d4c                 | ' Read bits from report data buffer
41d4c                 | '------------------------------------------------------------------------------
41d4c                 | ' On entry:
41d4c                 | '   PTRB - report buffer
41d4c                 | '   hpar1 - start bit
41d4c                 | '   hpar2 - number of bits
41d4c                 | ' On exit:
41d4c                 | '   retval - bits
41d4c                 | '------------------------------------------------------------------------------
41d4c                 | hpad_getbits
41d4c     C7 73 03 F6 |                 mov     htmp, hpar1
41d50     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
41d54     F9 73 03 F1 |                 add     htmp, ptrb
41d58     B9 BF 02 FB |                 rdlong  retval, htmp
41d5c                 | 
41d5c     C7 75 03 F6 |                 mov     htmp1, hpar1
41d60     07 74 07 F5 |                 and     htmp1, #$07     ' shift
41d64     BA BF 42 F0 |                 shr     retval, htmp1
41d68                 | 
41d68     18 90 1F F2 |                 cmp     hpar2, #24      wcz
41d6c     10 00 90 1D |         if_a    jmp     #.l1
41d70                 | 
41d70     C8 91 C3 F9 |                 decod   hpar2
41d74     01 90 87 F1 |                 sub     hpar2, #1
41d78     C8 BF 02 F5 |                 and     retval, hpar2
41d7c     2D 00 64 FD |                 ret
41d80                 | .l1
41d80     FF 7F 00 FF 
41d84     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
41d88     03 72 07 F1 |                 add     htmp, #3
41d8c     B9 77 03 FB |                 rdlong  htmp2, htmp
41d90     18 90 87 F1 |                 sub     hpar2, #24
41d94     C8 91 C3 F9 |                 decod   hpar2
41d98     01 90 87 F1 |                 sub     hpar2, #1
41d9c     BA 77 43 F0 |                 shr     htmp2, htmp1
41da0     C8 77 03 F5 |                 and     htmp2, hpar2
41da4     18 76 67 F0 |                 shl     htmp2, #24
41da8     BB BF 42 F5 |                 or      retval, htmp2
41dac     2D 00 64 FD |                 ret
41db0                 | 
41db0                 | '------------------------------------------------------------------------------
41db0                 | ' Normalize value to signed word (-32768 / 32767)
41db0                 | '------------------------------------------------------------------------------
41db0                 | ' On entry:
41db0                 | '   retval - value to normalize
41db0                 | '   hidr_lminmax - min (word 1) max (word 0) value range
41db0                 | '   - or -
41db0                 | '   hidr_pminmax - min (word 1) max (word 0) value range
41db0                 | '   hidr_size - value bits length
41db0                 | ' On exit:
41db0                 | '   retval - normalized value
41db0                 | '------------------------------------------------------------------------------
41db0                 | hpad_normalize
41db0     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
41db4     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
41db8     2D 00 64 AD |         if_z    ret
41dbc     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
41dc0     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
41dc4     0F 74 77 F7 |                 signx   htmp1, #15      wc
41dc8     FF 27 97 C9 |         if_c    alts    hidr_size, #511
41dcc     00 BE 66 C7 |         if_c    signx   retval, #0-0
41dd0     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
41dd4     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
41dd8     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
41ddc     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
41de0     B9 73 53 F6 |                 abs     htmp            wc
41de4     1F BE 0E F4 |                 testb   retval, #31     wz
41de8     5F BF 42 F6 |                 abs     retval
41dec     B9 BF 12 FD |                 qdiv    retval, htmp
41df0     18 BE 62 FD |                 getqx   retval
41df4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
41df8     C0 FF 7F FF 
41dfc     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
41e00     2D 00 64 FD |                 ret
41e04                 | 
41e04                 | '------------------------------------------------------------------------------
41e04                 | ' Perform controller actions
41e04                 | ' On entry:
41e04                 | '    hidr_id        report id
41e04                 | '    hidr_axis      axis value (signed word, 2 axes per long)
41e04                 | '                      X = hidr_axis+0, #0
41e04                 | '                      Y = hidr_axis+0, #1
41e04                 | '                      Z = hidr_axis+1, #0
41e04                 | '                     RX = hidr_axis+1, #1
41e04                 | '                     RY = hidr_axis+2, #0
41e04                 | '                     RZ = hidr_axis+2, #1
41e04                 | '                     Sl = hidr_axis+3, #0
41e04                 | '                     Wh = hidr_axis+3, #1
41e04                 | '    hidr_buttons   buttons state (bits 0 to 31)
41e04                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
41e04                 | '
41e04                 | '                     -------3 -------2 -------1 -------0 byte
41e04                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
41e04                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
41e04                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
41e04                 | '                              |||||||| ||||++++--------- n. axes
41e04                 | '                              |||||||| ++++------------- n. hats
41e04                 | '                              ++++++++------------------ valid axes
41e04                 | '------------------------------------------------------------------------------
41e04                 | hpad_translate
41e04                 | 
41e04                 | 
41e04                 |         if HAVE_HIDPAD
41e04     98 0C F0 FE |                 loc     ptrb,#hidpad_report
41e08     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
41e0c     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
41e10     01 72 E7 F2 |                 cmpsub  htmp,#1
41e14     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
41e18     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
41e1c     2D 00 7C 3D |         if_ae   ret     wcz
41e20     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
41e24     B9 F3 03 F1 |                 add     ptrb,htmp
41e28     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
41e2c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
41e30     28 0E 64 FD |                 setq    #8-1
41e34     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
41e38                 |         end
41e38                 | 
41e38                 | 
41e38                 |         if EMUPAD_MAX_PLAYER > 0
41e38                 | .emupad_no_hat
41e38                 |         if EMUPAD_BT0_BIT >= 0
41e38                 |         end
41e38                 |         if EMUPAD_BT1_BIT >= 0
41e38                 |         end
41e38                 |         if EMUPAD_BT2_BIT >= 0
41e38                 |         end
41e38                 |         if EMUPAD_BT3_BIT >= 0
41e38                 |         end
41e38                 |         if EMUPAD_BT4_BIT >= 0
41e38                 |         end
41e38                 |         if EMUPAD_BT5_BIT >= 0
41e38                 |         end
41e38                 |         if EMUPAD_BT6_BIT >= 0
41e38                 |         end
41e38                 |         if EMUPAD_BT7_BIT >= 0
41e38                 |         end
41e38                 |         if EMUPAD_BT8_BIT >= 0
41e38                 |         end
41e38                 |         if EMUPAD_BT9_BIT >= 0
41e38                 |         end
41e38                 | .emupad_slot_over
41e38                 |         end
41e38                 | 
41e38                 |         if 0
41e38                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
41e38                 | 
41e38                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
41e38                 | 
41e38                 |         end
41e38     2D 00 64 FD |                 ret
41e3c                 | end
41e3c                 | 
41e3c                 | if EMUPAD_MAX_PLAYER > 0
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | ' Clear EmuPad state
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | emupad_reset
41e3c                 | 
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | ' Get EmuPad Player number for current device (into retval)
41e3c                 | ' Z flag is also set if current device is valid
41e3c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | emupad_getnum
41e3c                 | .loop
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | emupad_discon
41e3c                 | .loop         
41e3c                 |         
41e3c                 |         ' FALL THROUGH!!!
41e3c                 | 
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | ' Update EmuPad reports (all of them...)
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | emupad_write_reports
41e3c                 | .devloop
41e3c                 | 
41e3c                 | end
41e3c                 | 
41e3c                 | 
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | ' On entry:
41e3c                 | ' On exit:
41e3c                 | '------------------------------------------------------------------------------
41e3c                 | hget_hub_status
41e3c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
41e40     27 91 03 F6 |                 mov     hpar2, urx_buff_p
41e44     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
41e48     01 92 2F F9 |                 setword hpar3, #1, #1
41e4c     CF 02 A0 FD |                 call    #do_int_in
41e50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41e54     0C 00 90 AD |         if_z    jmp     #.data
41e58     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
41e5c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
41e60     2D 00 64 FD |                 ret
41e64                 | .data
41e64     00 92 0F F2 |                 cmp     hpar3, #0               wz
41e68     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
41e6c                 | 
41e6c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
41e70     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
41e74     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
41e78     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
41e7c                 |                 debug(ubin_long(hub_status_chg))
41e7c                 | 
41e7c     01 5A 06 F6 |                 mov     hdev_port, #1
41e80                 | .loop
41e80     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
41e84     0C 00 B0 AD |         if_x1   call    #hub_port_handler
41e88     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
41e8c     F0 FF 9F 3D |         if_nc   jmp     #.loop
41e90     2D 00 64 FD |                 ret
41e94                 | 
41e94                 | hub_port_handler
41e94     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
41e98     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41e9c     27 EF 03 F6 |                 mov     pb, urx_buff_p
41ea0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41ea4     55 02 A0 FD |                 call    #control_read
41ea8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
41eac                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
41eac                 | 
41eac     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
41eb0     50 01 90 5D |         if_x0   jmp     #.other
41eb4     68 02 D0 FE |                 loc     ptra, #clr_port_feat
41eb8     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
41ebc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41ec0     A0 02 A0 FD |                 call    #control_write
41ec4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
41ec8     7C 01 90 5D |         if_x0   jmp     #.disconnect
41ecc     B1 99 02 F6 |                 mov     hctwait, _100ms_
41ed0     EF 02 A0 FD |                 call    #poll_waitx
41ed4                 | 
41ed4     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
41ed8     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
41edc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41ee0     A0 02 A0 FD |                 call    #control_write
41ee4                 | 
41ee4     02 78 07 F6 |                 mov     htmp3, #2
41ee8                 | .wait_reset
41ee8     AD 99 02 F6 |                 mov     hctwait, _8ms_
41eec     EF 02 A0 FD |                 call    #poll_waitx
41ef0     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41ef4     27 EF 03 F6 |                 mov     pb, urx_buff_p
41ef8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41efc     55 02 A0 FD |                 call    #control_read
41f00     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
41f04     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
41f08     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
41f0c                 | 
41f0c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
41f10     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
41f14     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41f18     A0 02 A0 FD |                 call    #control_write
41f1c                 | 
41f1c     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
41f20                 | .wait_recover
41f20     A8 99 02 F6 |                 mov     hctwait, _1ms_
41f24     EF 02 A0 FD |                 call    #poll_waitx
41f28     FD 73 6F FB |                 djnz    htmp,#.wait_recover
41f2c                 | 
41f2c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41f30     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
41f34     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
41f38                 | 
41f38     00 08 00 FF 
41f3c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
41f40     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
41f44     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
41f48     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
41f4c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
41f50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41f54     48 01 90 5D |         if_nz   jmp     #.done
41f58                 | .get_dev_desc
41f58     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
41f5c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
41f60     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
41f64     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
41f68     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
41f6c     01 73 57 FC |                 wrword  htmp, ptra[wValue]
41f70     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
41f74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41f78     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
41f7c     AD 99 02 F6 |                 mov     hctwait, _8ms_
41f80     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
41f84     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
41f88     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
41f8c     BE 00 A0 FD |                 call    #calc_crc5
41f90     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
41f94     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
41f98     F7 AD C2 FA |                 rdbyte  total_data, pb
41f9c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
41fa0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
41fa4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41fa8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
41fac     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
41fb0     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
41fb4                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
41fb4     A0 99 02 F6 |                 mov     hctwait, _500us_
41fb8     EF 02 A0 FD |                 call    #poll_waitx
41fbc     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
41fc0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
41fc4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
41fc8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
41fcc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41fd0     CC 00 90 5D |         if_nz   jmp     #.done
41fd4     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
41fd8     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
41fdc     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
41fe0     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
41fe4     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
41fe8     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
41fec     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
41ff0     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
41ff4     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
41ff8     A4 00 90 CD |         if_b    jmp     #.done
41ffc     60 F0 BF FD |                 call    #hparse_con_desc
42000     9C 00 90 FD |                 jmp     #.done
42004                 | 
42004                 | .other
42004     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
42008     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
4200c     28 00 90 AD |         if_x1   jmp     #.reset_feature
42010     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
42014     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
42018     1C 00 90 AD |         if_x1   jmp     #.reset_feature
4201c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
42020     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
42024     10 00 90 AD |         if_x1   jmp     #.reset_feature
42028     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
4202c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
42030     04 00 90 AD |         if_x1   jmp     #.reset_feature
42034     68 00 90 FD |                 jmp     #.done
42038                 | .reset_feature
42038     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
4203c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42040     A0 02 A0 FD |                 call    #control_write
42044     58 00 90 FD |                 jmp     #.done
42048                 | .disconnect
42048                 | 
42048     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
4204c     00 72 E3 F8 |                 getbyte htmp
42050     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
42054     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
42058     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
4205c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
42060     00 76 06 A6 |         if_z    mov     kb_led_states, #0
42064     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
42068                 |         if EMUPAD_MAX_PLAYER > 0
42068                 |         end
42068                 |         if HAVE_MOUSE
42068     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
4206c     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
42070     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
42074                 |         end
42074                 |         if HAVE_HIDPAD
42074     28 0A F0 FE |                 loc ptrb,#hidpad_report
42078     2D 73 03 F6 |                 mov htmp,hdev_port
4207c     01 72 E7 F2 |                 cmpsub htmp,#1
42080     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
42084     B9 F3 03 F1 |                 add ptrb,htmp
42088     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
4208c     80 01 6C FC |                 wrlong #0,ptrb
42090                 |         end
42090                 | 
42090     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
42094     00 00 C4 F8 |                 setbyte #0
42098     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
4209c     00 00 04 F6 |                 mov     0-0, #0
420a0                 | 
420a0                 | .done
420a0     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
420a4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
420a8     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
420ac     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
420b0     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
420b4     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
420b8                 | 
420b8     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
420bc     27 EF 03 F6 |                 mov     pb, urx_buff_p
420c0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
420c4     55 02 A0 FD |                 call    #control_read
420c8     00 69 06 FB |                 rdlong  hub_port_status, ptra
420cc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
420cc     2D 00 64 FD |                 ret
420d0                 | 
420d0                 | '------------------------------------------------------------------------------
420d0                 | ' Partially populated SETUP packets
420d0                 | '------------------------------------------------------------------------------
420d0     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
420d1     06          |                 byte    REQ_GET_DESC
420d2     00 01       |                 word    TYPE_DEVICE << 8
420d4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
420d6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
420d8     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
420d9     06          |                 byte    REQ_GET_DESC
420da     00 02       |                 word    TYPE_CONFIG << 8
420dc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
420de     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
420e0     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
420e1     09          |                 byte    REQ_SET_CONFIG
420e2     00 00       |                 word    0       ' Configuration value
420e4     00 00       |                 word    0       ' Zero
420e6     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
420e8     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
420e9     05          |                 byte    REQ_SET_ADDR
420ea     00 00       |                 word    0       ' Zero
420ec     00 00       |                 word    0       ' Zero
420ee     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
420f0                 | '------------------------------------------------------------------------------
420f0                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
420f0                 | ' wValue field dictates which protocol should be used.
420f0                 | '
420f0                 | ' When initialized, all devices default to report protocol. However the host
420f0                 | ' should not make any assumptions about the device state and should set the
420f0                 | ' desired protocol whenever initializing a device.
420f0                 | '------------------------------------------------------------------------------
420f0     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
420f1     0B          |                 byte    HID_SET_PROTO
420f2     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
420f4                 |                                                 ' (HID 1.11 Section 7.2.6).
420f4     00 00       |                 word    0               ' Interface index number.
420f6     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
420f8                 | '------------------------------------------------------------------------------
420f8     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
420f9     0A          |                 byte    HID_SET_IDLE
420fa     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
420fc                 |                                         ' reporting until a change is detected in the report data
420fc                 | 
420fc                 |                                         ' (HID 1.11 Section 7.2.4).
420fc     00 00       |                 word    0       ' Interface index number.
420fe     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
42100     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
42101     09          |                 byte    HID_SET_REPORT
42102     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
42104                 |                                         ' (HID 1.11 Section 7.2.2).
42104     00 00       |                 word    0       ' Interface index number.
42106     00 00       |                 word    0       ' Size of the report, in bytes.
42108     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
42109     06          |                 byte    REQ_GET_DESC
4210a     00 22       |                 word    TYPE_REPORT << 8
4210c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
4210e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42110                 | '------------------------------------------------------------------------------
42110     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
42111     06          |                 byte    REQ_GET_DESC
42112     00 29       |                 word    TYPE_HUB << 8
42114     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
42116     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42118     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
42119     03          |                 byte    REQ_SET_FEATURE
4211a     00 00       |                 word    0       ' port power
4211c     01 00       |                 word    1       ' Port index number (1+)
4211e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42120     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
42121     01          |                 byte    REQ_CLEAR_FEATURE
42122     00 00       |                 word    0       ' port power
42124     01 00       |                 word    1       ' Port index number (1+)
42126     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42128     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
42129     00          |                 byte    REQ_GET_STATUS
4212a     00 00       |                 word    0
4212c     01 00       |                 word    1       ' Port index number (1+)
4212e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
42130                 | '------------------------------------------------------------------------------
42130                 | if _HAVE_GAMEPAD
42130     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
42134                 | ps3_command_buff
42134     00 00 00 00 
42138     00          |                 byte    $00, $00, $00, $00, $00
42139     00 00 00 00 
4213d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
4213e     FF 27 10 00 
42142     32          |                 byte    $FF, $27, $10, $00, $32
42143     FF 27 10 00 
42147     32          |                 byte    $FF, $27, $10, $00, $32
42148     FF 27 10 00 
4214c     32          |                 byte    $FF, $27, $10, $00, $32
4214d     FF 27 10 00 
42151     32          |                 byte    $FF, $27, $10, $00, $32
42152     00 00 00 00 
42156     00          |                 byte    $00, $00, $00, $00, $00
42157     00 00 00 00 
4215b     00          |                 byte    $00, $00, $00, $00, $00
4215c     00 00 00 00 
42160     00          |                 byte    $00, $00, $00, $00, $00
42161     00 00 00    |                 byte    $00, $00, $00
42164                 | '------------------------------------------------------------------------------
42164     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
42167                 |                                         ' 0x01 All blinking
42167                 |                                         ' 0x02 1 flashes, then on
42167                 |                                         ' 0x03 2 flashes, then on
42167                 |                                         ' 0x04 3 flashes, then on
42167                 |                                         ' 0x05 4 flashes, then on
42167                 |                                         ' 0x06 1 on
42167                 |                                         ' 0x07 2 on
42167                 |                                         ' 0x08 3 on
42167                 |                                         ' 0x09 4 on
42167                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
42167                 |                                         ' 0x0B Blinking*
42167                 |                                         ' 0x0C Slow blinking*
42167                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
42167     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
4216a     00          |                 byte    $00             ' Left rumble
4216b     00          |                 byte    $00             ' Right rumble
4216c     00 00 00    |                 byte    $00, $00, $00
4216f     00          | end
42170                 | alignl
42170                 | 
42170                 | if HAVE_MOUSE
42170     00 00 00 00 
42174     00 00 00 00 | mouse_limits long 0[2]
42178     00 00 00 00 | mouse_outptr long 0
4217c                 | end
4217c                 | 
4217c                 | if KEYQUEUE_SIZE > 0
4217c     00          | keyq_head byte 0
4217d     00          | keyq_tail byte 0
4217e     00 00 00 00 
      ...             
4237a     00 00 00 00 
4237e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
42380                 | alignl
42380                 | end
42380                 | 
42380                 | if EMUPAD_MAX_PLAYER > 0
42380                 | emupad_rule_buffer
42380                 | if EMUPAD_BUILTIN_RULES
42380                 | file "padmap_builtin.dat"
42380                 | end
42380                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
42380                 | '' Default rule directly follows!
42380                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
42380                 | end
42380                 | 
42380                 | '------------------------------------------------------------------------------
42380                 | ' The USB data cache area gets zero-filled at every device disconnect
42380                 | '------------------------------------------------------------------------------
42380                 | usb_cache_start
42380                 | 
42380                 | ' HID descriptor and report buffers
42380                 | if !!OVERLAP_MEMORY
42380     00 00 00 00 
      ...             
42a78     00 00 00 00 
42a7c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
42a80                 | end
42a80     00 00 00 00 
42a84     00 00 00 00 | hkbd_report     byte    0[8]
42a88     00 00 00 00 | hkbd_led_rep    byte    0
42a8c                 | alignl
42a8c                 | 
42a8c     00 00 00 00 
42a90     00 00 00 00 
42a94     00 00 00 00 
42a98     00 00 00 00 
42a9c     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
42aa0                 | 
42aa0                 | if HAVE_HIDPAD
42aa0     00 00 00 00 
      ...             
42b78     00 00 00 00 
42b7c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
42b80                 | end
42b80                 | 
42b80                 | ' HUB descriptor
42b80     00          | hub_descr       byte    0   ' bDescLength
42b81     00          |                 byte    0   ' bDescriptorType
42b82     00          |                 byte    0   ' bNbrPorts
42b83     00 00       |                 word    0   ' wHubCharacteristics
42b85     00          |                 byte    0   ' bPwrOn2PwrGood
42b86     00          |                 byte    0   ' bHubContrCurrent
42b87     00          |                 byte    0   ' DeviceRemoveable
42b88     00          |                 byte    0   ' PortPwrCtrlMask
42b89                 | 
42b89                 | usb_cache_end
42b89                 | 
42b89                 | if HAVE_MOUSE
42b89     00 00 00 00 | mouse_xacc      long 0
42b8d     00 00 00 00 | mouse_yacc      long 0
42b91     00 00 00 00 | mouse_zacc      long 0
42b95     00          | mouse_bstate    byte 0
42b96     00          | mouse_lpending  byte 0
42b97     00          | mouse_rpending  byte 0
42b98     00          | mouse_mpending  byte 0
42b99     00          | mouse_lock      byte 0
42b9a     00 00 00    |                 byte 0[3] ' padding
42b9d                 | end
42b9d                 | 
42b9d     00 00 00 00 
      ...             
42c15     00 00 00 00 
42c19     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
42c1d     00 00 00 00 
42c21     00 00 00 00 
42c25     00 00 00 00 
42c29     00 00 00 00 
42c2d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
42c2f     00 00 00 00 
      ...             
42d27     00 00 00 00 
42d2b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
42d2f                 | 
42d2f     00          | driver_cog      byte    0                       ' Current driver cog + 1
42d30                 | 	alignl
42d30                 | _audio096_spin2_dat_
42d30                 | 
42d30                 | audio       org     0
42d30                 | 
42d30     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
42d34     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
42d38     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
42d3c                 |  
42d3c     01 EC 63 FD |             cogid   pa                   ' compute cogid
42d40     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
42d44     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
42d48     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
42d4c                 | 
42d4c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
42d50     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
42d54     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
42d58     0F 24 06 FC |             wrpin   dac2,#right
42d5c     0F 00 1E FC |             wxpin   #256,#right    
42d60     41 9C 64 FD |             dirh    #left addpins 1
42d64     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
42d68     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
42d6c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
42d70                 |             
42d70                 | '---------------------------------------------------------------------------------        
42d70                 | '----------------- The main loop -------------------------------------------------
42d70                 | '---------------------------------------------------------------------------------
42d70                 | 
42d70     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
42d74     10 00 90 CD |       if_c  jmp     #loop1
42d78                 |   
42d78     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
42d7c     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
42d80     D5 00 80 F1 |             sub     0-0,a40000000
42d84     FD 01 6E FB |             djnz    cn,#p402
42d88                 |     
42d88     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
42d8c     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
42d90     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
42d94     01 00 06 C6 |     if_c    mov     cn,#1
42d98     DA 02 3A F3 |             fle     ct,time3 wcz
42d9c     02 00 06 C6 |     if_c    mov     cn,#2     
42da0     DB 02 3A F3 |             fle     ct,time4 wcz
42da4     03 00 06 C6 |     if_c    mov     cn,#3
42da8     DC 02 3A F3 |             fle     ct,time5 wcz
42dac     04 00 06 C6 |     if_c    mov     cn,#4
42db0     DD 02 3A F3 |             fle     ct,time6 wcz
42db4     05 00 06 C6 |     if_c    mov     cn,#5
42db8     DE 02 3A F3 |             fle     ct,time7 wcz
42dbc     06 00 06 C6 |     if_c    mov     cn,#6
42dc0     DF 02 3A F3 |             fle     ct,time8 wcz
42dc4     07 00 06 C6 |     if_c    mov     cn,#7
42dc8                 | 
42dc8                 | 
42dc8                 | '----------------------------------------------------------------------------------
42dc8                 | '------------- Compute channel samples --------------------------------------------
42dc8                 | '----------------------------------------------------------------------------------
42dc8                 | 
42dc8                 | 
42dc8     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
42dcc     06 C0 65 F0 |             shl     channeladd,#6
42dd0     E0 F0 03 F1 |             add     ptra,channeladd
42dd4                 | 
42dd4     28 16 64 FD |             setq    #11                        	' read parameters
42dd8     00 D7 05 FB |             rdlong  pointer0,ptra
42ddc                 |     	    
42ddc     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
42de0     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
42de4     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
42de8     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
42dec     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
42df0     00 C4 0D F2 |             cmp     qq,#0 wz                         
42df4     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
42df8     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
42dfc                 |             
42dfc     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
42e00     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
42e04     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
42e08                 | 
42e08     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
42e0c     EC 08 3A F9 |             getword oldrs,sample0,#1
42e10     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
42e14     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
42e18     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
42e1c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
42e20                 | 
42e20     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
42e24     00 04 02 F6 |             mov     dt0,0-0    
42e28     D7 04 82 F1 |             sub     dt0,time0
42e2c                 |             
42e2c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
42e30     FB 00 00 F1 |             add     0-0,afreq0  	
42e34                 |             
42e34                 | '---- envelopes
42e34                 |             
42e34     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
42e38     20 00 00 AF 
42e3c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
42e40     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
42e44                 | 
42e44     FB 48 02 F6 |             mov     envs1,afreq0
42e48     F5 48 02 FA |             mul     envs1,envspd0
42e4c     24 E7 01 F1 |             add     envph0,envs1 
42e50                 | 
42e50     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
42e54     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
42e58     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
42e5c     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
42e60     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
42e64     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
42e68     00 46 06 36 |     if_ge   mov     envlo,#0
42e6c     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
42e70     16 E6 65 30 |     if_ge   shl     envph0,#22
42e74                 | 
42e74     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
42e78     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
42e7c     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
42e80     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
42e84     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
42e88     24 49 32 F9 |             getword envs1,envs1,#0		' current value
42e8c     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
42e90     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
42e94     23 49 02 FA |             mul     envs1,envlo
42e98     25 49 02 F1 |             add     envs1,envs2
42e9c     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
42ea0                 |             
42ea0     1B DA 0D F4 | p410        testb   sstart0, #27 wz
42ea4     1B C6 61 AD |     if_z    getrnd  spl
42ea8     58 00 90 AD |     if_z    jmp     #p406
42eac                 |  
42eac     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
42eb0     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
42eb4     08 D6 45 F0 |             shr     pointer0,#8
42eb8                 |          
42eb8     1F DA 0D F4 |             testb   sstart0,#31 wz            
42ebc     01 D6 65 A0 |     if_z    shl     pointer0,#1        
42ec0     1C DA 0D F4 |             testb   sstart0,#28 wz            
42ec4     01 D6 65 A0 |     if_z    shl     pointer0,#1        
42ec8                 |         
42ec8     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
42ecc     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
42ed0     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
42ed4                 |             
42ed4     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
42ed8     ED C4 01 F1 |             add     qq,sstart0            
42edc                 | 
42edc     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
42ee0     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
42ee4     1C 01 B0 1D |     if_gt   call    #cache_read
42ee8                 |          
42ee8     1F DA 0D F4 |             testb   sstart0,#31 wz 
42eec     08 C6 65 50 |     if_nz   shl     spl,#8
42ef0     08 D6 65 50 |     if_nz   shl     pointer0,#8
42ef4     07 D6 65 A0 |     if_z    shl     pointer0,#7
42ef8     1C DA 0D F4 |             testb   sstart0,#28 wz            
42efc     01 D6 45 A0 |     if_z    shr     pointer0,#1    
42f00     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
42f04                 | 
42f04                 | 
42f04     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
42f08     00 C6 01 F6 |             mov     spl,0-0
42f0c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
42f10     00 C6 01 F6 |             mov     spl,0-0
42f14                 | 
42f14     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
42f18     00 0A 02 F6 |             mov     ls0,0-0
42f1c     20 00 00 FF 
42f20     00 C4 05 F6 |             mov     qq,##16384
42f24     FE C4 81 F1 |             sub     qq,apan0
42f28     E2 C6 31 FA |             scas    spl,qq
42f2c     00 0C 02 F6 |             mov     rs0, 0-0
42f30                 | 
42f30     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
42f34     06 11 02 F1 |             add     rs,rs0
42f38     03 0F 82 F1 |             sub     ls,oldls
42f3c     05 0F 02 F1 |             add     ls,ls0
42f40                 |    
42f40     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
42f44     05 D9 21 F9 |             setword sample0,ls0,#0
42f48                 |             
42f48     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
42f4c     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
42f50     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
42f54                 |   '  if_z    mov     sample0,#0
42f54     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
42f58     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
42f5c     04 00 00 AF 
42f60     00 B0 05 A1 |     if_z    add     time1,##2048
42f64     D8 B2 01 A6 |     if_z    mov     time2,time1
42f68     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
42f6c                 | 
42f6c     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
42f70     00 D7 65 FC |             wrlong  pointer0,ptra
42f74     08 E7 65 FC |             wrlong  envph0,ptra[8]
42f78     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
42f7c                 |                       
42f7c     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
42f80     FF C3 25 A7 |     if_z    decmod  front, #511          
42f84                 |          
42f84     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
42f88     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
42f8c     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
42f90     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
42f94                 | 	    
42f94                 | 		    
42f94     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
42f98     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
42f9c     04 15 02 F6 |             mov     newsample, oldrs       
42fa0                 | 
42fa0     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
42fa4     02 AF 01 F1 |             add     time0,dt0    
42fa8                 |                                      
42fa8     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
42fac     D8 FD 9F AD |     if_z    jmp     #loop1
42fb0     02 C5 01 F6 |             mov     qq,dt0
42fb4                 | 
42fb4                 |     
42fb4                 |             
42fb4     01 4E 36 F0 | p301        rol     dropper,#1 wc
42fb8     40 00 90 3D |     if_nc   jmp     #p399
42fbc     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
42fc0     00 C2 9D F2 |             cmpr    front, #0-0 wcz
42fc4     F4 FF 9F AD |     if_e    jmp     #p398   
42fc8                 | 		
42fc8     00 1A 0E F2 | 	    cmp     scbase,#0 wz
42fcc     20 00 90 AD |     if_z    jmp     #p302	   
42fd0                 |   
42fd0     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
42fd4     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
42fd8     02 1E 66 C0 |     if_c    shl     scptr2,#2
42fdc     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
42fe0     60 1E 66 FC |             wrlong  scptr2,#$60
42fe4     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
42fe8     01 00 00 CF 
42fec     7F 1C 06 C7 |     if_c    incmod  scptr,##639
42ff0                 | 			    
42ff0     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
42ff4     00 00 00 FF 
42ff8     FF C3 05 F7 |             incmod  front, ##511
42ffc     ED C5 6D FB | p399        djnz    qq,#p301
43000                 |             
43000     6C FD 9F FD |             jmp     #loop            'loop
43004                 | 
43004                 | '----------------------------------------------------------------------------------
43004                 | '------------- This is the end of the main loop -----------------------------------
43004                 | '----------------------------------------------------------------------------------
43004                 | 
43004                 | '----------------------------------------------------------------------------------
43004                 | '------------- PSRAM cache ----------- --------------------------------------------
43004                 | '----------------------------------------------------------------------------------
43004                 | 
43004                 | ' There are 8 cache pointers for 8 channels
43004                 | ' if 24 higher bits of address=cache, then get a word from the cache
43004                 | ' else load the cache from PSRAM, update the pointer, then read a sample
43004                 | 
43004                 | 
43004     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
43008                 |             
43008     E2 40 02 F6 | 	    mov     addrhi,qq		
4300c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
43010     14 01 96 F9 | 	    alts    cn,#cache1            
43014     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
43018     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
4301c                 | 	
4301c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
43020     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
43024     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
43028     08 38 66 F0 | 	    shl     cmd,#8
4302c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
43030     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
43034     08 3A 66 F0 |             shl     hubaddr,#8                  '
43038     13 3B 02 F1 |             add     hubaddr,hubptr 
4303c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
43040     28 04 64 FD |             setq    #2                          ' write 3 longs
43044     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
43048     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
4304c     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
43050                 |             
43050                 | 	
43050     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
43054     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
43058     13 C5 01 F1 | 	    add     qq,hubptr
4305c     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
43060     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
43064                 |           
43064                 | 
43064                 | '--------------------------------------------------------------------------
43064                 | '------ Interrupt service -------------------------------------------------
43064                 | '------ Output the sample, get the next one if exists ---------------------
43064                 | '--------------------------------------------------------------------------
43064                 | 
43064     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
43068     0F D0 25 FC |             wypin   rsample,#right       '4
4306c     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
43070     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
43074     FF F3 07 57 |     if_ne   incmod  ptrb,#511
43078     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
4307c     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
43080                 |     
43080     F5 FF 3B FB |             reti1                        '17/19 
43084                 |           
43084                 | '---------------------------------------------------------------------------
43084                 | '-------- End of interrupt -------------------------------------------------
43084                 | '---------------------------------------------------------------------------    
43084                 | 
43084                 | 
43084                 | '---------------------------------------------------------------------------
43084                 | '------- Variables ---------------------------------------------------------
43084                 | '---------------------------------------------------------------------------
43084                 | 
43084                 | ' constants
43084                 | 
43084     00 00 00 40 | a40000000   long $40000000
43088     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
4308c                 | 
4308c                 | ' Time variables
4308c                 | 
4308c     00 00 00 00 | time0       long 0    ' Global sample computing time
43090     01 00 00 00 | time1       long 1    ' Local channels time
43094     02 00 00 00 | time2       long 2
43098     03 00 00 00 | time3       long 3
4309c     04 00 00 00 | time4       long 4
430a0     05 00 00 00 | time5       long 5
430a4     06 00 00 00 | time6       long 6
430a8     07 00 00 00 | time7       long 7
430ac     08 00 00 00 | time8       long 8
430b0                 | 
430b0     00 00 00 00 | channeladd long 0
430b4                 | 
430b4     00 00 00 00 | front       long 0
430b8                 | 
430b8                 | ' temporary variables 
430b8     00 00 00 00 | qq          long 0
430bc     00 00 00 00 | spl         long 0
430c0     00 00 00 00 | zero        long 0
430c4     00 00 00 00 | mailbox     long 0
430c8     00 00 00 00 | mailbox2 long 0
430cc                 | 
430cc                 | ' Interrupt ISR variables
430cc                 | 
430cc     00 00 00 00 | lsample     long 0
430d0     00 00 00 00 | rsample     long 0
430d4     00 00 00 00 | lsnext      long 0
430d8     00 00 00 00 | rsnext      long 0 
430dc                 | 
430dc                 | ' channel parameter block
430dc                 | 
430dc     00 00 00 00 | pointer0    long 0     
430e0     00 00 00 00 | sample0     long 0
430e4     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
430e8     00 00 00 00 | lstart0     long 0
430ec     00 00 00 00 | lend0       long 0
430f0     00 00 00 00 | volpan0     long 0
430f4     00 00 00 00 | freqskip0   long 0
430f8     00 00 00 00 | command0    long 0
430fc     00 00 00 00 | envph0	    long 0
43100     00 00 00 00 | envptr0	    long 0
43104     00 00 00 00 | envspd0	    long 0
43108     00 00 00 00 | envlen0	    long 0
4310c     00 00 00 00 | res5	    long 0
43110     00 00 00 00 | res6	    long 0
43114     00 00 00 00 | res7	    long 0
43118     00 00 00 00 | res8	    long 0
4311c                 | 
4311c     00 00 00 00 | afreq0      long 0
43120     00 00 00 00 | askip0      long 0
43124     00 00 00 00 | avol0       long 0
43128     00 00 00 00 | apan0       long 0
4312c                 | 
4312c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
43130     00 00 00 00 | cn          long 0
43134     00 00 00 00 | ct          long 0
43138     00 00 00 00 | dt0         long 0
4313c                 | 
4313c                 | ' Samples
4313c     00 00 00 00 | oldls       long 0
43140     00 00 00 00 | oldrs       long 0
43144                 | 
43144     00 00 00 00 | ls0         long 0
43148     00 00 00 00 | rs0         long 0
4314c                 | 
4314c     00 00 00 00 | ls          long 0    
43150     00 00 00 00 | rs          long 0
43154                 | 
43154     00 00 00 00 | oldsample   long 0
43158     00 00 00 00 | newsample   long 0
4315c                 | 
4315c     00 00 00 00 | nrsample    long 0
43160     00 00 00 00 | nlsample    long 0
43164                 | 
43164     00 00 00 00 | scbase long 0
43168     00 00 00 00 | scptr long 0
4316c     00 00 00 00 | scptr2 long 0
43170     00 00 00 00 | scope long 0
43174                 | 
43174     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
43178     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
4317c                 | 
4317c     00 18 07 00 | hubptr      long $71800
43180     00 00 00 00 | cache1      long 0
43184     00 00 00 00 | cache2      long 0
43188     00 00 00 00 | cache3      long 0
4318c     00 00 00 00 | cache4      long 0
43190     00 00 00 00 | cache5      long 0
43194     00 00 00 00 | cache6      long 0
43198     00 00 00 00 | cache7      long 0
4319c     00 00 00 00 | cache8      long 0
431a0                 | 
431a0                 | 
431a0     00 00 00 00 | cmd         long 0
431a4     00 00 00 00 | hubaddr     long 0
431a8     00 01 00 00 | count       long 256
431ac     00 00 00 00 | addrlo long 0
431b0     00 00 00 00 | addrhi long 0
431b4     00 00 00 00 | pointer00 long 0
431b8     00 00 00 00 | envhi long 0
431bc     00 00 00 00 | envlo long 0
431c0     00 00 00 00 | envs1 long 0
431c4     00 00 00 00 | envs2 long 0
431c8     00 00 00 00 | noise0 long 0
431cc     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
431d0     00 00 00 00 
431d4     00 00 00 00 | null  			long 	0,0           ' for channel reset
431d8                 | 	alignl
431d8                 | __system__dat_
431d8     00 00 00 00 
431dc     00 00 00 00 | 	byte	$00[8]
431e0     03 00 00 00 
431e4     00 00 00 00 
431e8     00 00 00 00 
431ec     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
431f0     00 00 00 00 
      ...             
4347c     00 00 00 00 
43480     00 00 00 00 | 	byte	$00[660]
43484     00 00 E0 0A | 	long	(174 {__system____root_opendir})<<20
43488     00 00 F0 0A | 	long	(175 {__system____root_closedir})<<20
4348c     00 00 00 0B | 	long	(176 {__system____root_readdir})<<20
43490     00 00 10 0B | 	long	(177 {__system____root_stat})<<20
43494     00 00 00 00 
43498     00 00 00 00 
4349c     00 00 00 00 
434a0     00 00 00 00 
434a4     00 00 00 00 
434a8     00 00 00 00 
434ac     00 00 00 00 | 	byte	$00[28]
434b0     18 35 04 00 | 	long	@@@__system__dat_ + 832
434b4     1B 35 04 00 | 	long	@@@__system__dat_ + 835
434b8     3C 35 04 00 | 	long	@@@__system__dat_ + 868
434bc     55 35 04 00 | 	long	@@@__system__dat_ + 893
434c0     70 35 04 00 | 	long	@@@__system__dat_ + 920
434c4     8A 35 04 00 | 	long	@@@__system__dat_ + 946
434c8     9A 35 04 00 | 	long	@@@__system__dat_ + 962
434cc     AC 35 04 00 | 	long	@@@__system__dat_ + 980
434d0     BE 35 04 00 | 	long	@@@__system__dat_ + 998
434d4     D0 35 04 00 | 	long	@@@__system__dat_ + 1016
434d8     DC 35 04 00 | 	long	@@@__system__dat_ + 1028
434dc     ED 35 04 00 | 	long	@@@__system__dat_ + 1045
434e0     01 36 04 00 | 	long	@@@__system__dat_ + 1065
434e4     0B 36 04 00 | 	long	@@@__system__dat_ + 1075
434e8     1B 36 04 00 | 	long	@@@__system__dat_ + 1091
434ec     2A 36 04 00 | 	long	@@@__system__dat_ + 1106
434f0     40 36 04 00 | 	long	@@@__system__dat_ + 1128
434f4     59 36 04 00 | 	long	@@@__system__dat_ + 1153
434f8     6D 36 04 00 | 	long	@@@__system__dat_ + 1173
434fc     7B 36 04 00 | 	long	@@@__system__dat_ + 1187
43500     8F 36 04 00 | 	long	@@@__system__dat_ + 1207
43504     9B 36 04 00 | 	long	@@@__system__dat_ + 1219
43508     AD 36 04 00 | 	long	@@@__system__dat_ + 1237
4350c     C5 36 04 00 | 	long	@@@__system__dat_ + 1261
43510     D7 36 04 00 | 	long	@@@__system__dat_ + 1279
43514     EA 36 04 00 | 	long	@@@__system__dat_ + 1298
43518     4F 4B 00 4E 
4351c     75 6D 65 72 
43520     69 63 61 6C 
43524     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
43528     75 6D 65 6E 
4352c     74 20 6F 75 
43530     74 20 6F 66 
43534     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
43538     61 69 6E 00 
4353c     52 65 73 75 
43540     6C 74 20 6E 
43544     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
43548     65 70 72 65 
4354c     73 65 6E 74 
43550     61 62 6C 65 
43554     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
43558     65 67 61 6C 
4355c     20 6D 75 6C 
43560     74 69 62 79 
43564     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
43568     65 71 75 65 
4356c     6E 63 65 00 
43570     4E 6F 20 73 
43574     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
43578     66 69 6C 65 
4357c     20 6F 72 20 
43580     64 69 72 65 
43584     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
43588     79 00 42 61 
4358c     64 20 66 69 
43590     6C 65 20 6E 
43594     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
43598     72 00 50 65 
4359c     72 6D 69 73 
435a0     73 69 6F 6E 
435a4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
435a8     69 65 64 00 
435ac     4E 6F 74 20 
435b0     65 6E 6F 75 
435b4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
435b8     65 6D 6F 72 
435bc     79 00 54 65 
435c0     6D 70 6F 72 
435c4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
435c8     66 61 69 6C 
435cc     75 72 65 00 
435d0     46 69 6C 65 
435d4     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
435d8     73 74 73 00 
435dc     49 6E 76 61 
435e0     6C 69 64 20 
435e4     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
435e8     6D 65 6E 74 
435ec     00 54 6F 6F 
435f0     20 6D 61 6E 
435f4     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
435f8     65 6E 20 66 
435fc     69 6C 65 73 
43600     00 49 2F 4F 
43604     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
43608     6F 72 00 4E 
4360c     6F 74 20 61 
43610     20 64 69 72 
43614     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
43618     72 79 00 49 
4361c     73 20 61 20 
43620     64 69 72 65 
43624     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
43628     79 00 52 65 
4362c     61 64 20 6F 
43630     6E 6C 79 20 
43634     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
43638     20 73 79 73 
4363c     74 65 6D 00 
43640     46 75 6E 63 
43644     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
43648     20 6E 6F 74 
4364c     20 69 6D 70 
43650     6C 65 6D 65 
43654     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
43658     00 44 69 72 
4365c     65 63 74 6F 
43660     72 79 20 6E 
43664     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
43668     6D 70 74 79 
4366c     00 4E 61 6D 
43670     65 20 74 6F 
43674     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
43678     6E 67 00 44 
4367c     65 76 69 63 
43680     65 20 6E 6F 
43684     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
43688     65 6B 61 62 
4368c     6C 65 00 42 
43690     61 64 20 61 
43694     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
43698     73 73 00 42 
4369c     72 6F 6B 65 
436a0     6E 20 63 6F 
436a4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
436a8     74 69 6F 6E 
436ac     00 44 65 76 
436b0     69 63 65 20 
436b4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
436b8     65 73 6F 75 
436bc     72 63 65 20 
436c0     62 75 73 79 
436c4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
436c8     73 73 20 64 
436cc     65 76 69 63 
436d0     65 20 6C 69 
436d4     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
436d8     6F 20 73 70 
436dc     61 63 65 20 
436e0     6F 6E 20 64 
436e4     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
436e8     65 00 55 6E 
436ec     6B 6E 6F 77 
436f0     6E 20 65 72 
436f4     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
436f8     00 00 00 00 
436fc     00 00 00 00 
43700     00 00 00 00 | 	byte	$00[12]
43704     05 00 00 00 
43708     00 00 00 00 
4370c     00 00 00 00 
43710     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43714     00 00 00 00 | 	byte	$00, $00, $00, $00
43718     00 00 60 0C | 	long	(198 {__system___tx})<<20
4371c     00 00 70 0C | 	long	(199 {__system___rx})<<20
43720     00 00 00 00 | 	byte	$00, $00, $00, $00
43724     00 00 80 0C | 	long	(200 {__system___rxtxioctl_0781})<<20
43728     00 00 90 0C | 	long	(201 {__system____dummy_flush_0782})<<20
4372c     00 00 00 00 
43730     00 00 00 00 | 	byte	$00[8]
43734     01 00 00 00 
43738     06 00 00 00 
4373c     00 00 00 00 
43740     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43744     00 00 00 00 
43748     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
4374c     00 00 60 0C | 	long	(198 {__system___tx})<<20
43750     00 00 70 0C | 	long	(199 {__system___rx})<<20
43754     00 00 00 00 | 	byte	$00, $00, $00, $00
43758     00 00 80 0C | 	long	(200 {__system___rxtxioctl_0781})<<20
4375c     00 00 90 0C | 	long	(201 {__system____dummy_flush_0782})<<20
43760     00 00 00 00 
43764     00 00 00 00 | 	byte	$00[8]
43768     01 00 00 00 
4376c     06 00 00 00 
43770     00 00 00 00 
43774     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43778     00 00 00 00 
4377c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
43780     00 00 60 0C | 	long	(198 {__system___tx})<<20
43784     00 00 70 0C | 	long	(199 {__system___rx})<<20
43788     00 00 00 00 | 	byte	$00, $00, $00, $00
4378c     00 00 80 0C | 	long	(200 {__system___rxtxioctl_0781})<<20
43790     00 00 90 0C | 	long	(201 {__system____dummy_flush_0782})<<20
43794     00 00 00 00 
      ...             
43904     00 00 00 00 
43908     00 00 00 00 | 	byte	$00[376]
4390c     10 39 04 00 | 	long	@@@__system__dat_ + 1848
43910     00 00 00 00 
43914     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
43918                 | 	alignl
43918                 | _fatfs_cc_dat_
43918     C7 00 FC 00 
4391c     E9 00 E2 00 
43920     E4 00 E0 00 
43924     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
43928     EA 00 EB 00 
4392c     E8 00 EF 00 
43930     EE 00 EC 00 
43934     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
43938     C9 00 E6 00 
4393c     C6 00 F4 00 
43940     F6 00 F2 00 
43944     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
43948     FF 00 D6 00 
4394c     DC 00 F8 00 
43950     A3 00 D8 00 
43954     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
43958     E1 00 ED 00 
4395c     F3 00 FA 00 
43960     F1 00 D1 00 
43964     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
43968     BF 00 AE 00 
4396c     AC 00 BD 00 
43970     BC 00 A1 00 
43974     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
43978     91 25 92 25 
4397c     93 25 02 25 
43980     24 25 C1 00 
43984     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
43988     A9 00 63 25 
4398c     51 25 57 25 
43990     5D 25 A2 00 
43994     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
43998     14 25 34 25 
4399c     2C 25 1C 25 
439a0     00 25 3C 25 
439a4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
439a8     5A 25 54 25 
439ac     69 25 66 25 
439b0     60 25 50 25 
439b4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
439b8     F0 00 D0 00 
439bc     CA 00 CB 00 
439c0     C8 00 31 01 
439c4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
439c8     CF 00 18 25 
439cc     0C 25 88 25 
439d0     84 25 A6 00 
439d4     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
439d8     D3 00 DF 00 
439dc     D4 00 D2 00 
439e0     F5 00 D5 00 
439e4     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
439e8     DE 00 DA 00 
439ec     DB 00 D9 00 
439f0     FD 00 DD 00 
439f4     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
439f8     AD 00 B1 00 
439fc     17 20 BE 00 
43a00     B6 00 A7 00 
43a04     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
43a08     B0 00 A8 00 
43a0c     B7 00 B9 00 
43a10     B3 00 B2 00 
43a14     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
43a18     61 00 1A 03 
43a1c     E0 00 17 03 
43a20     F8 00 07 03 
43a24     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
43a28     78 01 00 01 
43a2c     30 01 32 01 
43a30     06 01 39 01 
43a34     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
43a38     2E 01 79 01 
43a3c     06 01 80 01 
43a40     4D 00 43 02 
43a44     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
43a48     82 01 84 01 
43a4c     84 01 86 01 
43a50     87 01 87 01 
43a54     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
43a58     8B 01 8B 01 
43a5c     8D 01 8E 01 
43a60     8F 01 90 01 
43a64     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
43a68     93 01 94 01 
43a6c     F6 01 96 01 
43a70     97 01 98 01 
43a74     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
43a78     9B 01 9C 01 
43a7c     9D 01 20 02 
43a80     9F 01 A0 01 
43a84     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
43a88     A2 01 A4 01 
43a8c     A4 01 A6 01 
43a90     A7 01 A7 01 
43a94     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
43a98     AB 01 AC 01 
43a9c     AC 01 AE 01 
43aa0     AF 01 AF 01 
43aa4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
43aa8     B3 01 B3 01 
43aac     B5 01 B5 01 
43ab0     B7 01 B8 01 
43ab4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
43ab8     BB 01 BC 01 
43abc     BC 01 BE 01 
43ac0     F7 01 C0 01 
43ac4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
43ac8     C3 01 C4 01 
43acc     C5 01 C4 01 
43ad0     C7 01 C8 01 
43ad4     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
43ad8     CB 01 CA 01 
43adc     CD 01 10 01 
43ae0     DD 01 01 00 
43ae4     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
43ae8     12 01 F3 01 
43aec     03 00 F1 01 
43af0     F4 01 F4 01 
43af4     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
43af8     22 02 12 01 
43afc     3A 02 09 00 
43b00     65 2C 3B 02 
43b04     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
43b08     66 2C 3F 02 
43b0c     40 02 41 02 
43b10     41 02 46 02 
43b14     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
43b18     40 00 81 01 
43b1c     86 01 55 02 
43b20     89 01 8A 01 
43b24     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
43b28     5A 02 90 01 
43b2c     5C 02 5D 02 
43b30     5E 02 5F 02 
43b34     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
43b38     62 02 94 01 
43b3c     64 02 65 02 
43b40     66 02 67 02 
43b44     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
43b48     6A 02 62 2C 
43b4c     6C 02 6D 02 
43b50     6E 02 9C 01 
43b54     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
43b58     9D 01 73 02 
43b5c     74 02 9F 01 
43b60     76 02 77 02 
43b64     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
43b68     7A 02 7B 02 
43b6c     7C 02 64 2C 
43b70     7E 02 7F 02 
43b74     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
43b78     82 02 A9 01 
43b7c     84 02 85 02 
43b80     86 02 87 02 
43b84     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
43b88     B1 01 B2 01 
43b8c     45 02 8D 02 
43b90     8E 02 8F 02 
43b94     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
43b98     B7 01 7B 03 
43b9c     03 00 FD 03 
43ba0     FE 03 FF 03 
43ba4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
43ba8     86 03 88 03 
43bac     89 03 8A 03 
43bb0     B1 03 11 03 
43bb4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
43bb8     A3 03 A3 03 
43bbc     C4 03 08 03 
43bc0     CC 03 03 00 
43bc4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
43bc8     8F 03 D8 03 
43bcc     18 01 F2 03 
43bd0     0A 00 F9 03 
43bd4     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
43bd8     F5 03 F6 03 
43bdc     F7 03 F7 03 
43be0     F9 03 FA 03 
43be4     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
43be8     20 03 50 04 
43bec     10 07 60 04 
43bf0     22 01 8A 04 
43bf4     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
43bf8     0E 01 CF 04 
43bfc     01 00 C0 04 
43c00     D0 04 44 01 
43c04     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
43c08     00 00 7D 1D 
43c0c     01 00 63 2C 
43c10     00 1E 96 01 
43c14     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
43c18     00 1F 08 06 
43c1c     10 1F 06 06 
43c20     20 1F 08 06 
43c24     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
43c28     40 1F 06 06 
43c2c     51 1F 07 00 
43c30     59 1F 52 1F 
43c34     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
43c38     5D 1F 56 1F 
43c3c     5F 1F 60 1F 
43c40     08 06 70 1F 
43c44     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
43c48     BB 1F C8 1F 
43c4c     C9 1F CA 1F 
43c50     CB 1F DA 1F 
43c54     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
43c58     F9 1F EA 1F 
43c5c     EB 1F FA 1F 
43c60     FB 1F 80 1F 
43c64     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
43c68     08 06 A0 1F 
43c6c     08 06 B0 1F 
43c70     04 00 B8 1F 
43c74     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
43c78     BC 1F CC 1F 
43c7c     01 00 C3 1F 
43c80     D0 1F 02 06 
43c84     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
43c88     E5 1F 01 00 
43c8c     EC 1F F3 1F 
43c90     01 00 FC 1F 
43c94     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
43c98     32 21 70 21 
43c9c     10 02 84 21 
43ca0     01 00 83 21 
43ca4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
43ca8     30 2C 2F 04 
43cac     60 2C 02 01 
43cb0     67 2C 06 01 
43cb4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
43cb8     80 2C 64 01 
43cbc     00 2D 26 08 
43cc0     41 FF 1A 03 
43cc4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
43cc8     05 07 09 0E 
43ccc     10 12 14 16 
43cd0     18 1C 1E 43 
43cd4     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
43cd8     41 41 43 45 
43cdc     45 45 49 49 
43ce0     49 41 41 45 
43ce4     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
43ce8     4F 55 55 59 
43cec     4F 55 4F 9C 
43cf0     4F 9E 9F 41 
43cf4     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
43cf8     A5 A6 A7 A8 
43cfc     A9 AA AB AC 
43d00     AD AE AF B0 
43d04     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
43d08     41 41 41 B8 
43d0c     B9 BA BB BC 
43d10     BD BE BF C0 
43d14     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
43d18     C5 41 41 C8 
43d1c     C9 CA CB CC 
43d20     CD CE CF D1 
43d24     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
43d28     49 49 49 49 
43d2c     D9 DA DB DC 
43d30     DD 49 DF 4F 
43d34     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
43d38     4F E6 E8 E8 
43d3c     55 55 55 59 
43d40     59 EE EF F0 
43d44     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
43d48     F5 F6 F7 F8 
43d4c     F9 FA FB FC 
43d50     FD FE FF 00 
43d54     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
43d58     00 00 00 00 | 	byte	$00, $00, $00, $00
43d5c     00 00 50 0B | 	long	(181 {_fatfs_cc_v_close})<<20
43d60     00 00 60 0B | 	long	(182 {_fatfs_cc_v_read})<<20
43d64     00 00 70 0B | 	long	(183 {_fatfs_cc_v_write})<<20
43d68     00 00 80 0B | 	long	(184 {_fatfs_cc_v_lseek})<<20
43d6c     00 00 90 0B | 	long	(185 {_fatfs_cc_v_ioctl})<<20
43d70     00 00 A0 0C | 	long	(202 {_fatfs_cc_v_flush})<<20
43d74     00 00 00 00 
43d78     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
43d7c     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_open})<<20
43d80     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_creat})<<20
43d84     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_opendir})<<20
43d88     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_closedir})<<20
43d8c     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_readdir})<<20
43d90     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_stat})<<20
43d94     00 00 00 0C | 	long	(192 {_fatfs_cc_v_mkdir})<<20
43d98     00 00 10 0C | 	long	(193 {_fatfs_cc_v_rmdir})<<20
43d9c     00 00 20 0C | 	long	(194 {_fatfs_cc_v_remove})<<20
43da0     00 00 30 0C | 	long	(195 {_fatfs_cc_v_rename})<<20
43da4     00 00 40 0C | 	long	(196 {_fatfs_cc_v_init})<<20
43da8     00 00 50 0C | 	long	(197 {_fatfs_cc_v_deinit})<<20
43dac     FF FF FF FF 
43db0     1F 00 00 00 
43db4     1C 00 00 00 
43db8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
43dbc     1E 00 00 00 
43dc0     1F 00 00 00 
43dc4     1E 00 00 00 
43dc8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
43dcc     1F 00 00 00 
43dd0     1E 00 00 00 
43dd4     1F 00 00 00 
43dd8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
43ddc     1F 00 00 00 
43de0     00 00 00 00 
43de4     1F 00 00 00 
43de8     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
43dec     5A 00 00 00 
43df0     78 00 00 00 
43df4     97 00 00 00 
43df8     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
43dfc     D4 00 00 00 
43e00     F3 00 00 00 
43e04     11 01 00 00 
43e08     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
43e0c     4E 01 00 00 
43e10     6D 01 00 00 
43e14     FF FF FF FF 
43e18     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
43e1c     00 00 00 00 
      ...             
43e34     00 00 00 00 
43e38     00 00 00 00 | 	byte	$00[32]
43e3c     5A 3E 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
43e40     5E 3E 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
43e44     00 00 00 00 
43e48     00 00 00 00 
43e4c     00 00 00 00 
43e50     00 00 00 00 
43e54     00 00       | 	byte	$00[18]
43e56     3F 3F 3F 00 
43e5a     55 43 54 00 
43e5e     55 43 54 00 
43e62     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
43e66     00 00 00 00 
43e6a     00 00 00    | 	byte	$00[7]
43e6d     CA 9A 3B 00 
43e71     00 00 00 01 
43e75     01 01 01 01 
43e79     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
43e7d     91 11 11 11 
43e81     11 01 01 01 
43e85     01 01 01 01 
43e89     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
43e8d     01 01 01 01 
43e91     01 01 01    | 	byte	$01[7]
43e94     90 20 20 20 
43e98     20 20 20 20 
43e9c     20 20 20 20 
43ea0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
43ea4     42 42 42 42 
43ea8     42 42 42 42 
43eac     42 42       | 	byte	$42[10]
43eae     20 20 20 20 
43eb2     20 20 20    | 	byte	$20[7]
43eb5     44 44 44 44 
43eb9     44 44       | 	byte	$44[6]
43ebb     04 04 04 04 
43ebf     04 04 04 04 
43ec3     04 04 04 04 
43ec7     04 04 04 04 
43ecb     04 04 04 04 | 	byte	$04[20]
43ecf     20 20 20 20 
43ed3     20 20       | 	byte	$20[6]
43ed5     48 48 48 48 
43ed9     48 48       | 	byte	$48[6]
43edb     08 08 08 08 
43edf     08 08 08 08 
43ee3     08 08 08 08 
43ee7     08 08 08 08 
43eeb     08 08 08 08 | 	byte	$08[20]
43eef     20 20 20 20 
43ef3     01 00 00 00 
43ef7     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
43ef8                 | __methodtable__
43ef8     B8 67 01 00 | 	long	@_do_no_command
43efc     B4 0F 02 00 | 	long	@_do_plus
43f00     D4 FF 01 00 | 	long	@_do_minus
43f04     9C 0E 02 00 | 	long	@_do_or
43f08     54 06 02 00 | 	long	@_do_mul
43f0c     98 EA 01 00 | 	long	@_do_fdiv
43f10     84 E2 01 00 | 	long	@_do_and
43f14     9C E3 01 00 | 	long	@_do_div
43f18     34 04 02 00 | 	long	@_do_mod
43f1c     68 16 02 00 | 	long	@_do_shl
43f20     80 17 02 00 | 	long	@_do_shr
43f24     A0 14 02 00 | 	long	@_do_power
43f28     3C D8 01 00 | 	long	@_do_getvar
43f2c     E4 98 01 00 | 	long	@_do_push
43f30     34 D2 01 00 | 	long	@_do_assign
43f34     C0 F7 00 00 | 	long	@_do_cls
43f38     84 61 01 00 | 	long	@_do_new
43f3c     28 91 01 00 | 	long	@_do_plot
43f40     28 20 01 00 | 	long	@_do_draw
43f44     90 93 01 00 | 	long	@_do_print
43f48     A0 F5 00 00 | 	long	@_do_circle
43f4c     5C 22 01 00 | 	long	@_do_fcircle
43f50     84 E4 00 00 | 	long	@_do_box
43f54     40 27 01 00 | 	long	@_do_frame
43f58     7C FA 00 00 | 	long	@_do_color
43f5c     D0 24 01 00 | 	long	@_do_for
43f60     F0 63 01 00 | 	long	@_do_next
43f64     90 4E 01 00 | 	long	@_do_list
43f68     08 B5 01 00 | 	long	@_do_run
43f6c     84 21 01 00 | 	long	@_do_error
43f70     98 34 01 00 | 	long	@_do_fast_goto
43f74     88 35 01 00 | 	long	@_do_find_goto
43f78     9C 37 01 00 | 	long	@_do_slow_goto
43f7c     D8 67 01 00 | 	long	@_do_nothing
43f80     24 B9 01 00 | 	long	@_do_save
43f84     2C 51 01 00 | 	long	@_do_load
43f88     E4 83 01 00 | 	long	@_do_pinwrite
43f8c     74 CF 01 00 | 	long	@_do_waitms
43f90     A8 D0 01 00 | 	long	@_do_waitvbl
43f94     90 3A 01 00 | 	long	@_do_if
43f98     1C 21 01 00 | 	long	@_do_else
43f9c     BC E5 01 00 | 	long	@_do_eq
43fa0     60 EC 01 00 | 	long	@_do_ge
43fa4     2C F6 01 00 | 	long	@_do_le
43fa8     48 F1 01 00 | 	long	@_do_gt
43fac     08 FB 01 00 | 	long	@_do_lt
43fb0     C0 09 02 00 | 	long	@_do_ne
43fb4     70 B2 01 00 | 	long	@_do_rnd
43fb8     6C E6 00 00 | 	long	@_do_brun
43fbc     08 E0 00 00 | 	long	@_do_beep
43fc0     B8 18 01 00 | 	long	@_do_dir
43fc4     18 80 01 00 | 	long	@_do_paper
43fc8     4C 3E 01 00 | 	long	@_do_ink
43fcc     54 24 01 00 | 	long	@_do_font
43fd0     F8 5B 01 00 | 	long	@_do_mode
43fd4     40 60 01 00 | 	long	@_do_mouse
43fd8     18 33 01 00 | 	long	@_do_gettime
43fdc     B8 FF 00 00 | 	long	@_do_cursor
43fe0     18 F7 00 00 | 	long	@_do_click
43fe4     FC 60 01 00 | 	long	@_do_mousex
43fe8     40 61 01 00 | 	long	@_do_mousey
43fec     74 60 01 00 | 	long	@_do_mousek
43ff0     B8 60 01 00 | 	long	@_do_mousew
43ff4     DC C4 01 00 | 	long	@_do_sin
43ff8     14 C8 01 00 | 	long	@_do_stick
43ffc     A4 C9 01 00 | 	long	@_do_strig
44000     34 C6 01 00 | 	long	@_do_sprite
44004     DC 13 01 00 | 	long	@_do_defsprite
44008     C4 31 01 00 | 	long	@_do_getpixel
4400c     50 CF 01 00 | 	long	@_do_waitclock
44010     84 03 02 00 | 	long	@_do_negative
44014     68 9F 01 00 | 	long	@_do_rdpin
44018     94 B4 01 00 | 	long	@_do_rqpin
4401c     10 82 01 00 | 	long	@_do_pinread
44020     B4 D0 01 00 | 	long	@_do_wrpin
44024     34 D1 01 00 | 	long	@_do_wxpin
44028     B4 D1 01 00 | 	long	@_do_wypin
4402c     50 81 01 00 | 	long	@_do_pinfloat
44030     D0 81 01 00 | 	long	@_do_pinlo
44034     90 81 01 00 | 	long	@_do_pinhi
44038     94 82 01 00 | 	long	@_do_pinstart
4403c     A4 83 01 00 | 	long	@_do_pintoggle
44040     08 93 01 00 | 	long	@_do_position
44044     94 FE 00 00 | 	long	@_do_cos
44048     34 CB 01 00 | 	long	@_do_tan
4404c     F0 DE 00 00 | 	long	@_do_atn
44050     E0 DD 00 00 | 	long	@_do_asin
44054     70 DB 00 00 | 	long	@_do_acos
44058     20 C7 01 00 | 	long	@_do_sqr
4405c     40 23 01 00 | 	long	@_do_fill
44060     EC 0A 01 00 | 	long	@_do_defsnd
44064     EC FF 00 00 | 	long	@_do_defenv
44068     40 9F 01 00 | 	long	@_do_rad
4406c     50 17 01 00 | 	long	@_do_deg
44070     CC 3E 01 00 | 	long	@_do_int
44074     6C 84 01 00 | 	long	@_do_play
44078     34 BF 01 00 | 	long	@_do_setdelay
4407c     DC BF 01 00 | 	long	@_do_setenv
44080     84 C0 01 00 | 	long	@_do_setlen
44084     2C C1 01 00 | 	long	@_do_setpan
44088     7C C2 01 00 | 	long	@_do_setvol
4408c     24 C3 01 00 | 	long	@_do_setwave
44090     D4 C1 01 00 | 	long	@_do_setsustain
44094     60 AF 01 00 | 	long	@_do_release
44098     B0 2F 01 00 | 	long	@_do_getenvsustain
4409c     F8 91 01 00 | 	long	@_do_poke
440a0     50 1F 01 00 | 	long	@_do_dpoke
440a4     0C 58 01 00 | 	long	@_do_lpoke
440a8     A0 80 01 00 | 	long	@_do_peek
440ac     A4 1E 01 00 | 	long	@_do_dpeek
440b0     60 57 01 00 | 	long	@_do_lpeek
440b4     9C 28 01 00 | 	long	@_do_fre
440b8     C0 30 01 00 | 	long	@_do_getnotevalue
440bc     F4 DD 01 00 | 	long	@_do_getaddr
440c0     74 3B 01 00 | 	long	@_do_inkey
440c4     F0 DA 00 00 | 	long	@_do_abs
440c8     2C 39 01 00 | 	long	@_do_hex
440cc     20 E3 00 00 | 	long	@_do_bin
440d0     44 CC 01 00 | 	long	@_do_val
440d4     A0 F4 00 00 | 	long	@_do_chr
440d8     80 DC 00 00 | 	long	@_do_asc
440dc     90 4B 01 00 | 	long	@_do_left
440e0     E4 B0 01 00 | 	long	@_do_right
440e4     6C 59 01 00 | 	long	@_do_mid
440e8     1C 4D 01 00 | 	long	@_do_len
440ec     80 33 01 00 | 	long	@_do_gosub
440f0     38 B0 01 00 | 	long	@_do_return
440f4     40 21 01 00 | 	long	@_do_end
440f8     D0 92 01 00 | 	long	@_do_pop
440fc     E4 55 01 00 | 	long	@_do_log
44100     94 F2 00 00 | 	long	@_do_changevol
44104     74 F3 00 00 | 	long	@_do_changewav
44108     84 F1 00 00 | 	long	@_do_changepan
4410c     68 EE 00 00 | 	long	@_do_changefreq
44110     CC C3 01 00 | 	long	@_do_shutup
44114     40 B4 01 00 | 	long	@_do_round
44118     74 21 01 00 | 	long	@_do_enter
4411c     00 69 01 00 | 	long	@_do_open
44120     44 F7 00 00 | 	long	@_do_close
44124     00 29 01 00 | 	long	@_do_get
44128     00 9A 01 00 | 	long	@_do_put
4412c     A8 E8 00 00 | 	long	@_do_cd
44130     78 17 01 00 | 	long	@_do_delete
44134     38 5B 01 00 | 	long	@_do_mkdir
44138     1C E1 00 00 | 	long	@_do_blit
4413c     68 28 01 00 | 	long	@_do_framebuf
44140     DC 67 01 00 | 	long	@_do_on
44144     EC C5 01 00 | 	long	@_do_skip
44148     88 3F 01 00 | 	long	@_do_input
4414c     CC A1 01 00 | 	long	@_do_read
44150     F8 AF 01 00 | 	long	@_do_restore
44154     98 78 01 00 | 	long	@_do_padx
44158     18 7B 01 00 | 	long	@_do_pady
4415c     98 7D 01 00 | 	long	@_do_padz
44160     18 6C 01 00 | 	long	@_do_padrx
44164     98 6E 01 00 | 	long	@_do_padry
44168     18 71 01 00 | 	long	@_do_padrz
4416c     18 76 01 00 | 	long	@_do_padw
44170     98 73 01 00 | 	long	@_do_pads
44174     B4 FA 00 00 | 	long	@_do_copy
44178     00 F8 00 00 | 	long	@_do_coginit
4417c     3C FA 00 00 | 	long	@_do_cogstop
44180     E4 58 01 00 | 	long	@_do_memlo
44184     28 59 01 00 | 	long	@_do_memtop
44188     C8 BC 01 00 | 	long	@_do_setcolor
4418c     A4 2E 01 00 | 	long	@_do_getcolor
44190     30 B0 01 00 | 	long	@_do_restorepalette
44194     30 59 02 00 | 	long	@_hg010b_spin2_putchar
44198     F0 6E 03 00 | 	long	@__struct___bas_wrap_sender_tx
4419c     34 6F 03 00 | 	long	@__struct___bas_wrap_sender_rx
441a0     7C 6F 03 00 | 	long	@__struct___bas_wrap_sender_close
441a4     20 6E 03 00 | 	long	@__struct__s_vfs_file_t_putchar
441a8     90 6E 03 00 | 	long	@__struct__s_vfs_file_t_getchar
441ac     D8 6D 03 00 | 	long	@___strs_cl_pfunc
441b0     70 CB 02 00 | 	long	@__system____root_opendir
441b4     0C CC 02 00 | 	long	@__system____root_closedir
441b8     88 CB 02 00 | 	long	@__system____root_readdir
441bc     14 CC 02 00 | 	long	@__system____root_stat
441c0     60 C4 02 00 | 	long	@__system____default_putc
441c4     E4 C3 02 00 | 	long	@__system____default_getc
441c8     08 C5 02 00 | 	long	@__system____default_flush
441cc     E0 58 03 00 | 	long	@_fatfs_cc_v_close
441d0     FC 5C 03 00 | 	long	@_fatfs_cc_v_read
441d4     10 5E 03 00 | 	long	@_fatfs_cc_v_write
441d8     F0 5E 03 00 | 	long	@_fatfs_cc_v_lseek
441dc     78 5F 03 00 | 	long	@_fatfs_cc_v_ioctl
441e0     CC 5F 03 00 | 	long	@_fatfs_cc_v_open
441e4     44 58 03 00 | 	long	@_fatfs_cc_v_creat
441e8     24 59 03 00 | 	long	@_fatfs_cc_v_opendir
441ec     98 59 03 00 | 	long	@_fatfs_cc_v_closedir
441f0     D8 59 03 00 | 	long	@_fatfs_cc_v_readdir
441f4     0C 5B 03 00 | 	long	@_fatfs_cc_v_stat
441f8     8C 5F 03 00 | 	long	@_fatfs_cc_v_mkdir
441fc     AC 5F 03 00 | 	long	@_fatfs_cc_v_rmdir
44200     9C 5F 03 00 | 	long	@_fatfs_cc_v_remove
44204     BC 5F 03 00 | 	long	@_fatfs_cc_v_rename
44208     DC 60 03 00 | 	long	@_fatfs_cc_v_init
4420c     E4 60 03 00 | 	long	@_fatfs_cc_v_deinit
44210     B0 75 02 00 | 	long	@__system___tx
44214     F0 75 02 00 | 	long	@__system___rx
44218     80 D7 02 00 | 	long	@__system___rxtxioctl_0781
4421c     D8 D7 02 00 | 	long	@__system____dummy_flush_0782
44220     AC 60 03 00 | 	long	@_fatfs_cc_v_flush
44224                 | __heap_base
44224     00 00 00 00 
      ...             
5b924     00 00 00 00 
5b928     00 00 00 00 | 	long	0[24002]
5b92c                 | objmem
5b92c     00 00 00 00 
      ...             
65e80     00 00 00 00 
65e84     00 00 00 00 | 	long	0[10583]
65e88                 | stackspace
65e88     00 00 00 00 | 	long	0[1]
65e8c 100             | 	org	COG_BSS_START
65e8c 100             | _var01
65e8c 100             | 	res	1
65e8c 101             | _var02
65e8c 101             | 	res	1
65e8c 102             | _var03
65e8c 102             | 	res	1
65e8c 103             | _var04
65e8c 103             | 	res	1
65e8c 104             | _var05
65e8c 104             | 	res	1
65e8c 105             | _var06
65e8c 105             | 	res	1
65e8c 106             | _var07
65e8c 106             | 	res	1
65e8c 107             | _var08
65e8c 107             | 	res	1
65e8c 108             | _var09
65e8c 108             | 	res	1
65e8c 109             | arg01
65e8c 109             | 	res	1
65e8c 10a             | arg02
65e8c 10a             | 	res	1
65e8c 10b             | arg03
65e8c 10b             | 	res	1
65e8c 10c             | arg04
65e8c 10c             | 	res	1
65e8c 10d             | arg05
65e8c 10d             | 	res	1
65e8c 10e             | arg06
65e8c 10e             | 	res	1
65e8c 10f             | arg07
65e8c 10f             | 	res	1
65e8c 110             | arg08
65e8c 110             | 	res	1
65e8c 111             | arg09
65e8c 111             | 	res	1
65e8c 112             | arg10
65e8c 112             | 	res	1
65e8c 113             | local01
65e8c 113             | 	res	1
65e8c 114             | local02
65e8c 114             | 	res	1
65e8c 115             | local03
65e8c 115             | 	res	1
65e8c 116             | local04
65e8c 116             | 	res	1
65e8c 117             | local05
65e8c 117             | 	res	1
65e8c 118             | local06
65e8c 118             | 	res	1
65e8c 119             | local07
65e8c 119             | 	res	1
65e8c 11a             | local08
65e8c 11a             | 	res	1
65e8c 11b             | local09
65e8c 11b             | 	res	1
65e8c 11c             | local10
65e8c 11c             | 	res	1
65e8c 11d             | local11
65e8c 11d             | 	res	1
65e8c 11e             | local12
65e8c 11e             | 	res	1
65e8c 11f             | local13
65e8c 11f             | 	res	1
65e8c 120             | local14
65e8c 120             | 	res	1
65e8c 121             | local15
65e8c 121             | 	res	1
65e8c 122             | local16
65e8c 122             | 	res	1
65e8c 123             | local17
65e8c 123             | 	res	1
65e8c 124             | local18
65e8c 124             | 	res	1
65e8c 125             | local19
65e8c 125             | 	res	1
65e8c 126             | local20
65e8c 126             | 	res	1
65e8c 127             | local21
65e8c 127             | 	res	1
65e8c 128             | local22
65e8c 128             | 	res	1
65e8c 129             | local23
65e8c 129             | 	res	1
65e8c 12a             | local24
65e8c 12a             | 	res	1
65e8c 12b             | local25
65e8c 12b             | 	res	1
65e8c 12c             | local26
65e8c 12c             | 	res	1
65e8c 12d             | local27
65e8c 12d             | 	res	1
65e8c 12e             | local28
65e8c 12e             | 	res	1
65e8c 12f             | local29
65e8c 12f             | 	res	1
65e8c 130             | local30
65e8c 130             | 	res	1
65e8c 131             | local31
65e8c 131             | 	res	1
65e8c 132             | local32
65e8c 132             | 	res	1
65e8c 133             | local33
65e8c 133             | 	res	1
65e8c 134             | local34
65e8c 134             | 	res	1
65e8c 135             | local35
65e8c 135             | 	res	1
65e8c 136             | local36
65e8c 136             | 	res	1
65e8c 137             | local37
65e8c 137             | 	res	1
65e8c 138             | local38
65e8c 138             | 	res	1
65e8c 139             | local39
65e8c 139             | 	res	1
65e8c 13a             | local40
65e8c 13a             | 	res	1
65e8c 13b             | local41
65e8c 13b             | 	res	1
65e8c 13c             | local42
65e8c 13c             | 	res	1
65e8c 13d             | local43
65e8c 13d             | 	res	1
65e8c 13e             | local44
65e8c 13e             | 	res	1
65e8c 13f             | local45
65e8c 13f             | 	res	1
65e8c 140             | local46
65e8c 140             | 	res	1
65e8c 141             | local47
65e8c 141             | 	res	1
65e8c 142             | local48
65e8c 142             | 	res	1
65e8c 143             | local49
65e8c 143             | 	res	1
65e8c 144             | local50
65e8c 144             | 	res	1
65e8c 145             | local51
65e8c 145             | 	res	1
65e8c 146             | local52
65e8c 146             | 	res	1
65e8c 147             | local53
65e8c 147             | 	res	1
65e8c 148             | muldiva_
65e8c 148             | 	res	1
65e8c 149             | muldivb_
65e8c 149             | 	res	1
65e8c 14a             | 	fit	480
65e8c 14a             | 
