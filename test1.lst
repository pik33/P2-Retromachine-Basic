00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/test1.p2asm"
00000                 | con
00000                 | 	_clkfreq = 160000000
00000                 | 	_clkmode = 16779259
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 160000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $10007fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 EA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 F4 F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 03 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16779256
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 03 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16779259
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e B4 C4 84 FF 
00440 00f 14 00 6C FC | 	wrlong	##160000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E0 07 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 00 62 FD | 	cogid	arg01
00614 084 03 00 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E3 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 EB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 01 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D EA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 04 56 F0 |         shr	arg03, #1 wc
00668 099 00 03 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 00 06 C1 |  if_c   add	arg01, #1
00670 09b 00 02 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 04 56 F0 |         shr	arg03, #1 wc
00678 09d 00 03 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 00 06 C1 |  if_c   add	arg01, #2
00680 09f 01 03 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 00 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 04 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 02 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 02 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 0B 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 0B 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 1B 37 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E0 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 1A 35 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 1B 35 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E0 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 36 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 34 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 1A 35 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E0 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 1B 37 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 EA 05 F6 |     mov result1, #0
00720 0c7 00 EC 05 F6 |     mov result2, #0
00724 0c8 00 DD 01 F6 |     mov abortchain, arg01
00728 0c9 00 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 00 06 F1 |     add arg01, #4
00730 0cb 00 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 00 06 F1 |     add arg01, #4
00738 0cd 00 E3 61 FC |     wrlong objptr, arg01
0073c 0ce 04 00 06 F1 |     add arg01, #4
00740 0cf 00 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 01 01 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 00 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 00 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 00 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 01 EB 01 F6 |     mov result1, arg02
0077c 0de 01 EC 05 F6 |     mov result2, #1
00780 0df 00 03 02 FB |     rdlong arg02, arg01
00784 0e0 04 00 06 F1 |     add arg01, #4
00788 0e1 00 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 00 06 F1 |     add arg01, #4
00790 0e3 00 E3 01 FB |     rdlong objptr, arg01
00794 0e4 04 00 06 F1 |     add arg01, #4
00798 0e5 00 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 00 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 04 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec B0 D3 00 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 28 D3 00 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | itmp1_
007c0 0ef 00 00 00 00 | 	long	0
007c4 0f0             | itmp2_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | objptr
007c8 0f1 28 EB 00 00 | 	long	@objmem
007cc 0f2             | ptr___system__dat__
007cc 0f2 1C C6 00 00 | 	long	@__system__dat_
007d0 0f3             | ptr__fatfs_cc_dat__
007d0 0f3 48 CD 00 00 | 	long	@_fatfs_cc_dat_
007d4 0f4             | ptr_stackspace_
007d4 0f4 30 EB 00 00 | 	long	@stackspace
007d8 0f5             | result1
007d8 0f5 00 00 00 00 | 	long	0
007dc 0f6             | result2
007dc 0f6 01 00 00 00 | 	long	1
007e0 0f7             | COG_BSS_START
007e0 0f7             | 	fit	480
007e0                 | 	orgh
007e0                 | hubentry
007e0                 | 
007e0                 | _program
007e0     01 4A 05 F6 | 	mov	COUNT_, #1
007e4     A8 00 A0 FD | 	call	#pushregs_
007e8     62 00 00 FF 
007ec     D0 0B 06 F6 | 	mov	local01, ##@LR__1630
007f0     3D 00 06 F6 | 	mov	arg01, #61
007f4     3C 02 06 F6 | 	mov	arg02, #60
007f8     3B 04 06 F6 | 	mov	arg03, #59
007fc     3A 06 06 F6 | 	mov	arg04, #58
00800     68 1F B0 FD | 	call	#__system___vfs_open_sdcardx
00804     F5 02 02 F6 | 	mov	arg02, result1
00808     05 01 02 F6 | 	mov	arg01, local01
0080c     64 07 B0 FD | 	call	#__system___mount
00810     62 00 00 FF 
00814     D4 01 06 F6 | 	mov	arg01, ##@LR__1631
00818     18 0A B0 FD | 	call	#__system___chdir
0081c     62 00 00 FF 
00820     DC 0B 06 F6 | 	mov	local01, ##@LR__1632
00824     F1 0A 62 FC | 	wrlong	local01, objptr
00828                 | ' 
00828                 | ' close #9: open "nonexistingfile" for input as #9
00828     09 00 06 F6 | 	mov	arg01, #9
0082c     98 24 B0 FD | 	call	#__system__close
00830     62 00 00 FF 
00834     E4 03 06 F6 | 	mov	arg02, ##@LR__1633
00838     09 00 06 F6 | 	mov	arg01, #9
0083c     00 04 06 F6 | 	mov	arg03, #0
00840     0C 0E B0 FD | 	call	#__system___basic_open_string
00844     20 E4 05 F1 | 	add	ptr___system__dat__, #32
00848     F2 0A 02 FB | 	rdlong	local01, ptr___system__dat__
0084c     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00850     04 E2 05 F1 | 	add	objptr, #4
00854     F1 0A 62 FC | 	wrlong	local01, objptr
00858     04 E2 85 F1 | 	sub	objptr, #4
0085c     00 00 06 F6 | 	mov	arg01, #0
00860     D8 2A B0 FD | 	call	#__system___getiolock_0121
00864     F5 00 02 F6 | 	mov	arg01, result1
00868     4C 05 B0 FD | 	call	#__system___lockmem
0086c     04 E2 05 F1 | 	add	objptr, #4
00870     F1 02 02 FB | 	rdlong	arg02, objptr
00874     04 E2 85 F1 | 	sub	objptr, #4
00878     00 00 06 F6 | 	mov	arg01, #0
0087c     00 04 06 F6 | 	mov	arg03, #0
00880     0A 06 06 F6 | 	mov	arg04, #10
00884     FC 0E B0 FD | 	call	#__system___basic_print_integer
00888     00 00 06 F6 | 	mov	arg01, #0
0088c     09 02 06 F6 | 	mov	arg02, #9
00890     00 04 06 F6 | 	mov	arg03, #0
00894     50 0E B0 FD | 	call	#__system___basic_print_char
00898     00 0A 06 F6 | 	mov	local01, #0
0089c     04 E2 05 F1 | 	add	objptr, #4
008a0     F1 00 02 FB | 	rdlong	arg01, objptr
008a4     04 E2 85 F1 | 	sub	objptr, #4
008a8     8C 11 B0 FD | 	call	#__system___strerror
008ac     F5 02 02 F6 | 	mov	arg02, result1
008b0     05 01 02 F6 | 	mov	arg01, local01
008b4     00 04 06 F6 | 	mov	arg03, #0
008b8     84 0E B0 FD | 	call	#__system___basic_print_string
008bc     00 00 06 F6 | 	mov	arg01, #0
008c0     0A 02 06 F6 | 	mov	arg02, #10
008c4     00 04 06 F6 | 	mov	arg03, #0
008c8     1C 0E B0 FD | 	call	#__system___basic_print_char
008cc     00 00 06 F6 | 	mov	arg01, #0
008d0     68 2A B0 FD | 	call	#__system___getiolock_0121
008d4     F5 00 68 FC | 	wrlong	#0, result1
008d8     09 00 06 F6 | 	mov	arg01, #9
008dc     E8 23 B0 FD | 	call	#__system__close
008e0     62 00 00 FF 
008e4     F4 01 06 F6 | 	mov	arg01, ##@LR__1634
008e8     48 09 B0 FD | 	call	#__system___chdir
008ec     20 E4 05 F1 | 	add	ptr___system__dat__, #32
008f0     F2 0A 02 FB | 	rdlong	local01, ptr___system__dat__
008f4     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
008f8     04 E2 05 F1 | 	add	objptr, #4
008fc     F1 0A 62 FC | 	wrlong	local01, objptr
00900     04 E2 85 F1 | 	sub	objptr, #4
00904     00 00 06 F6 | 	mov	arg01, #0
00908     30 2A B0 FD | 	call	#__system___getiolock_0121
0090c     F5 00 02 F6 | 	mov	arg01, result1
00910     A4 04 B0 FD | 	call	#__system___lockmem
00914     04 E2 05 F1 | 	add	objptr, #4
00918     F1 02 02 FB | 	rdlong	arg02, objptr
0091c     04 E2 85 F1 | 	sub	objptr, #4
00920     00 00 06 F6 | 	mov	arg01, #0
00924     00 04 06 F6 | 	mov	arg03, #0
00928     0A 06 06 F6 | 	mov	arg04, #10
0092c     54 0E B0 FD | 	call	#__system___basic_print_integer
00930     00 00 06 F6 | 	mov	arg01, #0
00934     09 02 06 F6 | 	mov	arg02, #9
00938     00 04 06 F6 | 	mov	arg03, #0
0093c     A8 0D B0 FD | 	call	#__system___basic_print_char
00940     00 0A 06 F6 | 	mov	local01, #0
00944     04 E2 05 F1 | 	add	objptr, #4
00948     F1 00 02 FB | 	rdlong	arg01, objptr
0094c     04 E2 85 F1 | 	sub	objptr, #4
00950     E4 10 B0 FD | 	call	#__system___strerror
00954     F5 02 02 F6 | 	mov	arg02, result1
00958     05 01 02 F6 | 	mov	arg01, local01
0095c     00 04 06 F6 | 	mov	arg03, #0
00960     DC 0D B0 FD | 	call	#__system___basic_print_string
00964     00 00 06 F6 | 	mov	arg01, #0
00968     0A 02 06 F6 | 	mov	arg02, #10
0096c     00 04 06 F6 | 	mov	arg03, #0
00970     74 0D B0 FD | 	call	#__system___basic_print_char
00974     00 00 06 F6 | 	mov	arg01, #0
00978     C0 29 B0 FD | 	call	#__system___getiolock_0121
0097c     F5 00 68 FC | 	wrlong	#0, result1
00980     62 00 00 FF 
00984     FB 01 06 F6 | 	mov	arg01, ##@LR__1635
00988     A8 08 B0 FD | 	call	#__system___chdir
0098c                 | ' chdir "/sd/bas"
0098c                 | ' 
0098c                 | ' close #9: open "mousetheremin.bas" for input as #9
0098c     09 00 06 F6 | 	mov	arg01, #9
00990     34 23 B0 FD | 	call	#__system__close
00994     63 00 00 FF 
00998     03 02 06 F6 | 	mov	arg02, ##@LR__1636
0099c     09 00 06 F6 | 	mov	arg01, #9
009a0     00 04 06 F6 | 	mov	arg03, #0
009a4     A8 0C B0 FD | 	call	#__system___basic_open_string
009a8     20 E4 05 F1 | 	add	ptr___system__dat__, #32
009ac     F2 0A 02 FB | 	rdlong	local01, ptr___system__dat__
009b0     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
009b4     04 E2 05 F1 | 	add	objptr, #4
009b8     F1 0A 62 FC | 	wrlong	local01, objptr
009bc     04 E2 85 F1 | 	sub	objptr, #4
009c0     00 00 06 F6 | 	mov	arg01, #0
009c4     74 29 B0 FD | 	call	#__system___getiolock_0121
009c8     F5 00 02 F6 | 	mov	arg01, result1
009cc     E8 03 B0 FD | 	call	#__system___lockmem
009d0     04 E2 05 F1 | 	add	objptr, #4
009d4     F1 02 02 FB | 	rdlong	arg02, objptr
009d8     04 E2 85 F1 | 	sub	objptr, #4
009dc     00 00 06 F6 | 	mov	arg01, #0
009e0     00 04 06 F6 | 	mov	arg03, #0
009e4     0A 06 06 F6 | 	mov	arg04, #10
009e8     98 0D B0 FD | 	call	#__system___basic_print_integer
009ec     00 00 06 F6 | 	mov	arg01, #0
009f0     09 02 06 F6 | 	mov	arg02, #9
009f4     00 04 06 F6 | 	mov	arg03, #0
009f8     EC 0C B0 FD | 	call	#__system___basic_print_char
009fc     00 0A 06 F6 | 	mov	local01, #0
00a00     04 E2 05 F1 | 	add	objptr, #4
00a04     F1 00 02 FB | 	rdlong	arg01, objptr
00a08     04 E2 85 F1 | 	sub	objptr, #4
00a0c     28 10 B0 FD | 	call	#__system___strerror
00a10     F5 02 02 F6 | 	mov	arg02, result1
00a14     05 01 02 F6 | 	mov	arg01, local01
00a18     00 04 06 F6 | 	mov	arg03, #0
00a1c     20 0D B0 FD | 	call	#__system___basic_print_string
00a20     00 00 06 F6 | 	mov	arg01, #0
00a24     0A 02 06 F6 | 	mov	arg02, #10
00a28     00 04 06 F6 | 	mov	arg03, #0
00a2c     B8 0C B0 FD | 	call	#__system___basic_print_char
00a30     00 00 06 F6 | 	mov	arg01, #0
00a34     04 29 B0 FD | 	call	#__system___getiolock_0121
00a38     F5 00 68 FC | 	wrlong	#0, result1
00a3c     09 00 06 F6 | 	mov	arg01, #9
00a40     84 22 B0 FD | 	call	#__system__close
00a44     63 00 00 FF 
00a48     15 00 06 F6 | 	mov	arg01, ##@LR__1637
00a4c     E4 07 B0 FD | 	call	#__system___chdir
00a50     20 E4 05 F1 | 	add	ptr___system__dat__, #32
00a54     F2 0A 02 FB | 	rdlong	local01, ptr___system__dat__
00a58     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00a5c     04 E2 05 F1 | 	add	objptr, #4
00a60     F1 0A 62 FC | 	wrlong	local01, objptr
00a64     04 E2 85 F1 | 	sub	objptr, #4
00a68     00 00 06 F6 | 	mov	arg01, #0
00a6c     CC 28 B0 FD | 	call	#__system___getiolock_0121
00a70     F5 00 02 F6 | 	mov	arg01, result1
00a74     40 03 B0 FD | 	call	#__system___lockmem
00a78     04 E2 05 F1 | 	add	objptr, #4
00a7c     F1 02 02 FB | 	rdlong	arg02, objptr
00a80     04 E2 85 F1 | 	sub	objptr, #4
00a84     00 00 06 F6 | 	mov	arg01, #0
00a88     00 04 06 F6 | 	mov	arg03, #0
00a8c     0A 06 06 F6 | 	mov	arg04, #10
00a90     F0 0C B0 FD | 	call	#__system___basic_print_integer
00a94     00 00 06 F6 | 	mov	arg01, #0
00a98     09 02 06 F6 | 	mov	arg02, #9
00a9c     00 04 06 F6 | 	mov	arg03, #0
00aa0     44 0C B0 FD | 	call	#__system___basic_print_char
00aa4     00 0A 06 F6 | 	mov	local01, #0
00aa8     04 E2 05 F1 | 	add	objptr, #4
00aac     F1 00 02 FB | 	rdlong	arg01, objptr
00ab0     04 E2 85 F1 | 	sub	objptr, #4
00ab4     80 0F B0 FD | 	call	#__system___strerror
00ab8     F5 02 02 F6 | 	mov	arg02, result1
00abc     05 01 02 F6 | 	mov	arg01, local01
00ac0     00 04 06 F6 | 	mov	arg03, #0
00ac4     78 0C B0 FD | 	call	#__system___basic_print_string
00ac8     00 00 06 F6 | 	mov	arg01, #0
00acc     0A 02 06 F6 | 	mov	arg02, #10
00ad0     00 04 06 F6 | 	mov	arg03, #0
00ad4     10 0C B0 FD | 	call	#__system___basic_print_char
00ad8     00 00 06 F6 | 	mov	arg01, #0
00adc     5C 28 B0 FD | 	call	#__system___getiolock_0121
00ae0     F5 00 68 FC | 	wrlong	#0, result1
00ae4     A7 F0 03 F6 | 	mov	ptra, fp
00ae8     B2 00 A0 FD | 	call	#popregs_
00aec                 | _program_ret
00aec     2D 00 64 FD | 	ret
00af0                 | hubexit
00af0     81 00 80 FD | 	jmp	#cogexit
00af4                 | 
00af4                 | __system___setbaud
00af4     14 34 06 FB | 	rdlong	muldiva_, #20
00af8     00 37 02 F6 | 	mov	muldivb_, arg01
00afc     BA 00 A0 FD | 	call	#divide_
00b00     97 06 48 FB | 	callpa	#(@LR__0002-@LR__0001)>>2,fcache_load_ptr_
00b04                 | LR__0001
00b04     3E EA 9D FA | 	rdpin	result1, #62 wc
00b08     F6 EC A1 F1 | 	subx	result2, result2
00b0c     F4 FF 9F CD |  if_b	jmp	#LR__0001
00b10                 | LR__0002
00b10     40 7C 64 FD | 	dirl	#62
00b14     40 7E 64 FD | 	dirl	#63
00b18     F2 36 62 FC | 	wrlong	muldivb_, ptr___system__dat__
00b1c     10 36 66 F0 | 	shl	muldivb_, #16
00b20     07 02 06 F6 | 	mov	arg02, #7
00b24     1B 03 02 F1 | 	add	arg02, muldivb_
00b28     3E F8 0C FC | 	wrpin	#124, #62
00b2c     3E 02 16 FC | 	wxpin	arg02, #62
00b30     3F 7C 0C FC | 	wrpin	#62, #63
00b34     14 02 06 F1 | 	add	arg02, #20
00b38     3F 02 16 FC | 	wxpin	arg02, #63
00b3c     41 7C 64 FD | 	dirh	#62
00b40     41 7E 64 FD | 	dirh	#63
00b44                 | __system___setbaud_ret
00b44     2D 00 64 FD | 	ret
00b48                 | 
00b48                 | __system___txraw
00b48     01 4A 05 F6 | 	mov	COUNT_, #1
00b4c     A8 00 A0 FD | 	call	#pushregs_
00b50     00 0B 02 F6 | 	mov	local01, arg01
00b54     97 06 48 FB | 	callpa	#(@LR__0011-@LR__0010)>>2,fcache_load_ptr_
00b58                 | LR__0010
00b58     3E EA 9D FA | 	rdpin	result1, #62 wc
00b5c     F6 EC A1 F1 | 	subx	result2, result2
00b60     F4 FF 9F CD |  if_b	jmp	#LR__0010
00b64                 | LR__0011
00b64     F2 EA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
00b68     C2 01 00 AF 
00b6c     00 00 06 A6 |  if_e	mov	arg01, ##230400
00b70     80 FF BF AD |  if_e	call	#__system___setbaud
00b74     58 7C 64 FD | 	drvl	#62
00b78     3E 0A 26 FC | 	wypin	local01, #62
00b7c     01 EA 05 F6 | 	mov	result1, #1
00b80     A7 F0 03 F6 | 	mov	ptra, fp
00b84     B2 00 A0 FD | 	call	#popregs_
00b88                 | __system___txraw_ret
00b88     2D 00 64 FD | 	ret
00b8c                 | 
00b8c                 | __system___rxraw
00b8c     0D 4A 05 F6 | 	mov	COUNT_, #13
00b90     A8 00 A0 FD | 	call	#pushregs_
00b94     00 0B 02 F6 | 	mov	local01, arg01
00b98     F2 0C 0A FB | 	rdlong	local02, ptr___system__dat__ wz
00b9c     C2 01 00 AF 
00ba0     00 00 06 A6 |  if_e	mov	arg01, ##230400
00ba4     4C FF BF AD |  if_e	call	#__system___setbaud
00ba8     00 0A 0E F2 | 	cmp	local01, #0 wz
00bac     20 00 90 AD |  if_e	jmp	#LR__0020
00bb0     14 0E 06 FB | 	rdlong	local03, #20
00bb4     0A 0E 46 F0 | 	shr	local03, #10
00bb8     07 0B 02 FD | 	qmul	local01, local03
00bbc     1A EA 61 FD | 	getct	result1
00bc0     18 10 62 FD | 	getqx	local04
00bc4     08 EB 01 F1 | 	add	result1, local04
00bc8     F5 12 02 F6 | 	mov	local05, result1
00bcc     04 00 90 FD | 	jmp	#LR__0021
00bd0                 | LR__0020
00bd0     00 12 06 F6 | 	mov	local05, #0
00bd4                 | LR__0021
00bd4     01 14 66 F6 | 	neg	local06, #1
00bd8     3F 16 06 F6 | 	mov	local07, #63
00bdc     00 18 06 F6 | 	mov	local08, #0
00be0     04 E4 05 F1 | 	add	ptr___system__dat__, #4
00be4     F2 1A 02 FB | 	rdlong	local09, ptr___system__dat__
00be8     04 E4 85 F1 | 	sub	ptr___system__dat__, #4
00bec                 | LR__0022
00bec     08 1A 16 F4 | 	testb	local09, #8 wc
00bf0     09 1A 76 F4 | 	testbn	local09, #9 andc
00bf4     0A 1A 46 F0 | 	shr	local09, #10
00bf8     01 18 06 C6 |  if_b	mov	local08, #1
00bfc     40 7E 6C 3D |  if_ae	testp	#63 wz
00c00     01 18 06 26 |  if_nc_and_z	mov	local08, #1
00c04     3F 1A 8E 2A |  if_nc_and_z	rdpin	local09, #63
00c08     04 1A 46 20 |  if_nc_and_z	shr	local09, #4
00c0c                 | LR__0023
00c0c     00 0C 06 F6 | 	mov	local02, #0
00c10     00 18 0E F2 | 	cmp	local08, #0 wz
00c14     01 0C 66 56 |  if_ne	neg	local02, #1
00c18     00 1C 06 F6 | 	mov	local10, #0
00c1c     00 0E 06 F6 | 	mov	local03, #0
00c20     00 0A 0E F2 | 	cmp	local01, #0 wz
00c24     01 0E 66 56 |  if_ne	neg	local03, #1
00c28     00 10 06 F6 | 	mov	local04, #0
00c2c     00 1E 06 F6 | 	mov	local11, #0
00c30     09 21 02 F6 | 	mov	local12, local05
00c34     1A EA 61 FD | 	getct	result1
00c38     F5 22 02 F6 | 	mov	local13, result1
00c3c     11 21 82 F1 | 	sub	local12, local13
00c40     00 20 56 F2 | 	cmps	local12, #0 wc
00c44     00 1E 26 C6 |  if_b	not	local11, #0
00c48     00 1E 0E F2 | 	cmp	local11, #0 wz
00c4c     00 10 26 56 |  if_ne	not	local04, #0
00c50     08 0F CA F7 | 	test	local03, local04 wz
00c54     00 1C 26 56 |  if_ne	not	local10, #0
00c58     0E 0D 4A F5 | 	or	local02, local10 wz
00c5c     8C FF 9F AD |  if_e	jmp	#LR__0022
00c60     00 18 0E F2 | 	cmp	local08, #0 wz
00c64     0D 15 02 56 |  if_ne	mov	local06, local09
00c68     0A 15 E2 58 |  if_ne	getbyte	local06, local06, #0
00c6c     04 E4 05 F1 | 	add	ptr___system__dat__, #4
00c70     F2 1A 62 FC | 	wrlong	local09, ptr___system__dat__
00c74     04 E4 85 F1 | 	sub	ptr___system__dat__, #4
00c78     0A EB 01 F6 | 	mov	result1, local06
00c7c     A7 F0 03 F6 | 	mov	ptra, fp
00c80     B2 00 A0 FD | 	call	#popregs_
00c84                 | __system___rxraw_ret
00c84     2D 00 64 FD | 	ret
00c88                 | 
00c88                 | __system___getus
00c88     1A EC 71 FD | 	getct	result2 wc
00c8c     1A EE 61 FD | 	getct	_var01
00c90     10 E4 05 F1 | 	add	ptr___system__dat__, #16
00c94     F2 F0 09 FB | 	rdlong	_var02, ptr___system__dat__ wz
00c98     10 E4 85 F1 | 	sub	ptr___system__dat__, #16
00c9c     20 00 90 5D |  if_ne	jmp	#LR__0030
00ca0     14 F0 05 FB | 	rdlong	_var02, #20
00ca4     A1 07 00 FF 
00ca8     40 F0 15 FD | 	qdiv	_var02, ##1000000
00cac     10 E4 05 F1 | 	add	ptr___system__dat__, #16
00cb0     18 EA 61 FD | 	getqx	result1
00cb4     F5 F0 01 F6 | 	mov	_var02, result1
00cb8     F2 EA 61 FC | 	wrlong	result1, ptr___system__dat__
00cbc     10 E4 85 F1 | 	sub	ptr___system__dat__, #16
00cc0                 | LR__0030
00cc0     F8 EC 11 FD | 	qdiv	result2, _var02
00cc4     19 EC 61 FD | 	getqy	result2
00cc8     28 EC 61 FD | 	setq	result2
00ccc     F8 EE 11 FD | 	qdiv	_var01, _var02
00cd0     18 EA 61 FD | 	getqx	result1
00cd4                 | __system___getus_ret
00cd4     2D 00 64 FD | 	ret
00cd8                 | 
00cd8                 | __system____builtin_memmove
00cd8     00 EF 01 F6 | 	mov	_var01, arg01
00cdc     01 01 52 F2 | 	cmps	arg01, arg02 wc
00ce0     10 00 90 CD |  if_b	jmp	#LR__0040
00ce4     01 F1 01 F6 | 	mov	_var02, arg02
00ce8     02 F1 01 F1 | 	add	_var02, arg03
00cec     F8 00 52 F2 | 	cmps	arg01, _var02 wc
00cf0     48 00 90 CD |  if_b	jmp	#LR__0046
00cf4                 | LR__0040
00cf4     02 F3 01 F6 | 	mov	_var03, arg03
00cf8     02 F2 4D F0 | 	shr	_var03, #2 wz
00cfc     18 00 90 AD |  if_e	jmp	#LR__0045
00d00     97 0A 48 FB | 	callpa	#(@LR__0043-@LR__0041)>>2,fcache_load_ptr_
00d04                 | LR__0041
00d04     F9 08 D8 FC | 	rep	@LR__0044, _var03
00d08                 | LR__0042
00d08     01 F3 01 FB | 	rdlong	_var03, arg02
00d0c     00 F3 61 FC | 	wrlong	_var03, arg01
00d10     04 00 06 F1 | 	add	arg01, #4
00d14     04 02 06 F1 | 	add	arg02, #4
00d18                 | LR__0043
00d18                 | LR__0044
00d18                 | LR__0045
00d18     02 04 CE F7 | 	test	arg03, #2 wz
00d1c     01 F1 E1 5A |  if_ne	rdword	_var02, arg02
00d20     00 F1 51 5C |  if_ne	wrword	_var02, arg01
00d24     02 00 06 51 |  if_ne	add	arg01, #2
00d28     02 02 06 51 |  if_ne	add	arg02, #2
00d2c     01 04 CE F7 | 	test	arg03, #1 wz
00d30     01 F1 C1 5A |  if_ne	rdbyte	_var02, arg02
00d34     00 F1 41 5C |  if_ne	wrbyte	_var02, arg01
00d38     28 00 90 FD | 	jmp	#LR__0052
00d3c                 | LR__0046
00d3c     02 01 02 F1 | 	add	arg01, arg03
00d40     02 03 02 F1 | 	add	arg02, arg03
00d44     02 F5 09 F6 | 	mov	_var04, arg03 wz
00d48     18 00 90 AD |  if_e	jmp	#LR__0051
00d4c     97 0A 48 FB | 	callpa	#(@LR__0049-@LR__0047)>>2,fcache_load_ptr_
00d50                 | LR__0047
00d50     FA 08 D8 FC | 	rep	@LR__0050, _var04
00d54                 | LR__0048
00d54     01 00 86 F1 | 	sub	arg01, #1
00d58     01 02 86 F1 | 	sub	arg02, #1
00d5c     01 F1 C1 FA | 	rdbyte	_var02, arg02
00d60     00 F1 41 FC | 	wrbyte	_var02, arg01
00d64                 | LR__0049
00d64                 | LR__0050
00d64                 | LR__0051
00d64                 | LR__0052
00d64     F7 EA 01 F6 | 	mov	result1, _var01
00d68                 | __system____builtin_memmove_ret
00d68     2D 00 64 FD | 	ret
00d6c                 | 
00d6c                 | __system____builtin_strcpy
00d6c     00 EF 01 F6 | 	mov	_var01, arg01
00d70     97 0A 48 FB | 	callpa	#(@LR__0061-@LR__0060)>>2,fcache_load_ptr_
00d74                 | LR__0060
00d74     01 EB C9 FA | 	rdbyte	result1, arg02 wz
00d78     00 EB 41 FC | 	wrbyte	result1, arg01
00d7c     01 02 06 F1 | 	add	arg02, #1
00d80     01 00 06 F1 | 	add	arg01, #1
00d84     EC FF 9F 5D |  if_ne	jmp	#LR__0060
00d88                 | LR__0061
00d88     F7 EA 01 F6 | 	mov	result1, _var01
00d8c                 | __system____builtin_strcpy_ret
00d8c     2D 00 64 FD | 	ret
00d90                 | 
00d90                 | __system____topofstack
00d90     00 4A 05 F6 | 	mov	COUNT_, #0
00d94     A8 00 A0 FD | 	call	#pushregs_
00d98     08 F0 07 F1 | 	add	ptra, #8
00d9c     04 4E 05 F1 | 	add	fp, #4
00da0     A7 00 62 FC | 	wrlong	arg01, fp
00da4     A7 EA 01 F6 | 	mov	result1, fp
00da8     04 4E 85 F1 | 	sub	fp, #4
00dac     A7 F0 03 F6 | 	mov	ptra, fp
00db0     B2 00 A0 FD | 	call	#popregs_
00db4                 | __system____topofstack_ret
00db4     2D 00 64 FD | 	ret
00db8                 | 
00db8                 | __system___lockmem
00db8     00 EA 05 F6 | 	mov	result1, #0
00dbc     01 EA 61 FD | 	cogid	result1
00dc0     00 EB 05 F1 | 	add	result1, #256
00dc4                 | LR__0070
00dc4     00 EF 09 FB | 	rdlong	_var01, arg01 wz
00dc8     00 EB 61 AC |  if_e	wrlong	result1, arg01
00dcc     00 EF 01 AB |  if_e	rdlong	_var01, arg01
00dd0     00 EF 01 AB |  if_e	rdlong	_var01, arg01
00dd4     F5 EE 09 F2 | 	cmp	_var01, result1 wz
00dd8     E8 FF 9F 5D |  if_ne	jmp	#LR__0070
00ddc                 | __system___lockmem_ret
00ddc     2D 00 64 FD | 	ret
00de0                 | 
00de0                 | __system___tx
00de0     02 4A 05 F6 | 	mov	COUNT_, #2
00de4     A8 00 A0 FD | 	call	#pushregs_
00de8     00 0B 02 F6 | 	mov	local01, arg01
00dec     0A 0A 0E F2 | 	cmp	local01, #10 wz
00df0     18 00 90 5D |  if_ne	jmp	#LR__0080
00df4     08 E4 05 F1 | 	add	ptr___system__dat__, #8
00df8     F2 0C 02 FB | 	rdlong	local02, ptr___system__dat__
00dfc     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
00e00     02 0C CE F7 | 	test	local02, #2 wz
00e04     0D 00 06 56 |  if_ne	mov	arg01, #13
00e08     3C FD BF 5D |  if_ne	call	#__system___txraw
00e0c                 | LR__0080
00e0c     05 01 02 F6 | 	mov	arg01, local01
00e10     34 FD BF FD | 	call	#__system___txraw
00e14     A7 F0 03 F6 | 	mov	ptra, fp
00e18     B2 00 A0 FD | 	call	#popregs_
00e1c                 | __system___tx_ret
00e1c     2D 00 64 FD | 	ret
00e20                 | 
00e20                 | __system___rx
00e20     01 4A 05 F6 | 	mov	COUNT_, #1
00e24     A8 00 A0 FD | 	call	#pushregs_
00e28                 | LR__0090
00e28     00 00 06 F6 | 	mov	arg01, #0
00e2c     5C FD BF FD | 	call	#__system___rxraw
00e30     F5 0A 02 F6 | 	mov	local01, result1
00e34     FF FF 7F FF 
00e38     FF 0B 0E F2 | 	cmp	local01, ##-1 wz
00e3c     E8 FF 9F AD |  if_e	jmp	#LR__0090
00e40     0D 0A 0E F2 | 	cmp	local01, #13 wz
00e44     14 00 90 5D |  if_ne	jmp	#LR__0091
00e48     08 E4 05 F1 | 	add	ptr___system__dat__, #8
00e4c     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
00e50     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
00e54     02 EA CD F7 | 	test	result1, #2 wz
00e58     0A 0A 06 56 |  if_ne	mov	local01, #10
00e5c                 | LR__0091
00e5c     08 E4 05 F1 | 	add	ptr___system__dat__, #8
00e60     F2 00 02 FB | 	rdlong	arg01, ptr___system__dat__
00e64     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
00e68     01 00 CE F7 | 	test	arg01, #1 wz
00e6c     1C 00 90 AD |  if_e	jmp	#LR__0094
00e70     7F 0A 0E F2 | 	cmp	local01, #127 wz
00e74     0C 00 90 5D |  if_ne	jmp	#LR__0092
00e78     08 00 06 F6 | 	mov	arg01, #8
00e7c     60 FF BF FD | 	call	#__system___tx
00e80     08 00 90 FD | 	jmp	#LR__0093
00e84                 | LR__0092
00e84     05 01 02 F6 | 	mov	arg01, local01
00e88     54 FF BF FD | 	call	#__system___tx
00e8c                 | LR__0093
00e8c                 | LR__0094
00e8c     05 EB 01 F6 | 	mov	result1, local01
00e90     A7 F0 03 F6 | 	mov	ptra, fp
00e94     B2 00 A0 FD | 	call	#popregs_
00e98                 | __system___rx_ret
00e98     2D 00 64 FD | 	ret
00e9c                 | 
00e9c                 | __system___waitms
00e9c     00 EF 01 F6 | 	mov	_var01, arg01
00ea0     1A F0 61 FD | 	getct	_var02
00ea4     14 F2 05 FB | 	rdlong	_var03, #20
00ea8     97 14 48 FB | 	callpa	#(@LR__0101-@LR__0100)>>2,fcache_load_ptr_
00eac                 | LR__0100
00eac     01 00 00 FF 
00eb0     E8 EF 55 F2 | 	cmps	_var01, ##1000 wc
00eb4     1C 00 90 CD |  if_b	jmp	#LR__0102
00eb8     F9 F0 01 F1 | 	add	_var02, _var03
00ebc     F8 00 02 F6 | 	mov	arg01, _var02
00ec0     00 00 66 FA | 	addct1	arg01, #0
00ec4     24 22 60 FD | 	waitct1
00ec8     01 00 00 FF 
00ecc     E8 EF 85 F1 | 	sub	_var01, ##1000
00ed0     D8 FF 9F FD | 	jmp	#LR__0100
00ed4                 | LR__0101
00ed4                 | LR__0102
00ed4     01 EE 55 F2 | 	cmps	_var01, #1 wc
00ed8     28 00 90 CD |  if_b	jmp	#LR__0103
00edc     F9 EE 01 FD | 	qmul	_var01, _var03
00ee0     01 00 00 FF 
00ee4     E8 05 06 F6 | 	mov	arg03, ##1000
00ee8     19 EA 61 FD | 	getqy	result1
00eec     18 00 62 FD | 	getqx	arg01
00ef0     28 EA 61 FD | 	setq	result1
00ef4     02 01 12 FD | 	qdiv	arg01, arg03
00ef8     18 00 62 FD | 	getqx	arg01
00efc     F8 00 62 FA | 	addct1	arg01, _var02
00f00     24 22 60 FD | 	waitct1
00f04                 | LR__0103
00f04                 | __system___waitms_ret
00f04     2D 00 64 FD | 	ret
00f08                 | 
00f08                 | __system___waitus
00f08     00 EF 01 F6 | 	mov	_var01, arg01
00f0c     1A F0 61 FD | 	getct	_var02
00f10     14 F2 05 FB | 	rdlong	_var03, #20
00f14     97 14 48 FB | 	callpa	#(@LR__0111-@LR__0110)>>2,fcache_load_ptr_
00f18                 | LR__0110
00f18     A1 07 00 FF 
00f1c     40 EE 55 F2 | 	cmps	_var01, ##1000000 wc
00f20     1C 00 90 CD |  if_b	jmp	#LR__0112
00f24     F9 F0 01 F1 | 	add	_var02, _var03
00f28     F8 00 02 F6 | 	mov	arg01, _var02
00f2c     00 00 66 FA | 	addct1	arg01, #0
00f30     24 22 60 FD | 	waitct1
00f34     A1 07 00 FF 
00f38     40 EE 85 F1 | 	sub	_var01, ##1000000
00f3c     D8 FF 9F FD | 	jmp	#LR__0110
00f40                 | LR__0111
00f40                 | LR__0112
00f40     01 EE 55 F2 | 	cmps	_var01, #1 wc
00f44     28 00 90 CD |  if_b	jmp	#LR__0113
00f48     F9 EE 01 FD | 	qmul	_var01, _var03
00f4c     A1 07 00 FF 
00f50     40 04 06 F6 | 	mov	arg03, ##1000000
00f54     19 EA 61 FD | 	getqy	result1
00f58     18 00 62 FD | 	getqx	arg01
00f5c     28 EA 61 FD | 	setq	result1
00f60     02 01 12 FD | 	qdiv	arg01, arg03
00f64     18 EA 61 FD | 	getqx	result1
00f68     F5 F0 61 FA | 	addct1	_var02, result1
00f6c     24 22 60 FD | 	waitct1
00f70                 | LR__0113
00f70                 | __system___waitus_ret
00f70     2D 00 64 FD | 	ret
00f74                 | 
00f74                 | __system___mount
00f74     0B 4A 05 F6 | 	mov	COUNT_, #11
00f78     A8 00 A0 FD | 	call	#pushregs_
00f7c     00 0B 02 F6 | 	mov	local01, arg01
00f80     01 0D 0A F6 | 	mov	local02, arg02 wz
00f84     01 0E 66 F6 | 	neg	local03, #1
00f88     01 EA 65 A6 |  if_e	neg	result1, #1
00f8c     98 02 90 AD |  if_e	jmp	#LR__0135
00f90     05 EB C1 FA | 	rdbyte	result1, local01
00f94     2F EA 0D F2 | 	cmp	result1, #47 wz
00f98     28 00 90 5D |  if_ne	jmp	#LR__0122
00f9c     05 01 02 F6 | 	mov	arg01, local01
00fa0     00 11 02 F6 | 	mov	local04, arg01
00fa4     97 06 48 FB | 	callpa	#(@LR__0121-@LR__0120)>>2,fcache_load_ptr_
00fa8                 | LR__0120
00fa8     08 EB C9 FA | 	rdbyte	result1, local04 wz
00fac     01 10 06 51 |  if_ne	add	local04, #1
00fb0     F4 FF 9F 5D |  if_ne	jmp	#LR__0120
00fb4                 | LR__0121
00fb4     00 11 82 F1 | 	sub	local04, arg01
00fb8     08 EB 01 F6 | 	mov	result1, local04
00fbc     10 EA 55 F2 | 	cmps	result1, #16 wc
00fc0     14 00 90 CD |  if_b	jmp	#LR__0123
00fc4                 | LR__0122
00fc4     20 E4 05 F1 | 	add	ptr___system__dat__, #32
00fc8     F2 14 68 FC | 	wrlong	#10, ptr___system__dat__
00fcc     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00fd0     01 EA 65 F6 | 	neg	result1, #1
00fd4     50 02 90 FD | 	jmp	#LR__0135
00fd8                 | LR__0123
00fd8     00 12 06 F6 | 	mov	local05, #0
00fdc                 | LR__0124
00fdc     04 12 56 F2 | 	cmps	local05, #4 wc
00fe0     B0 00 90 3D |  if_ae	jmp	#LR__0129
00fe4     09 01 02 F6 | 	mov	arg01, local05
00fe8     02 00 66 F0 | 	shl	arg01, #2
00fec     64 E4 05 F1 | 	add	ptr___system__dat__, #100
00ff0     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
00ff4     00 EB 09 FB | 	rdlong	result1, arg01 wz
00ff8     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
00ffc     00 0E 56 A2 |  if_e	cmps	local03, #0 wc
01000     09 0F 02 86 |  if_c_and_z	mov	local03, local05
01004     84 00 90 8D |  if_c_and_z	jmp	#LR__0128
01008     09 01 02 F6 | 	mov	arg01, local05
0100c     02 00 66 F0 | 	shl	arg01, #2
01010     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01014     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
01018     00 01 02 FB | 	rdlong	arg01, arg01
0101c     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01020     00 11 02 F6 | 	mov	local04, arg01
01024     97 06 48 FB | 	callpa	#(@LR__0126-@LR__0125)>>2,fcache_load_ptr_
01028                 | LR__0125
01028     08 EB C9 FA | 	rdbyte	result1, local04 wz
0102c     01 10 06 51 |  if_ne	add	local04, #1
01030     F4 FF 9F 5D |  if_ne	jmp	#LR__0125
01034                 | LR__0126
01034     00 11 82 F1 | 	sub	local04, arg01
01038     08 15 02 F6 | 	mov	local06, local04
0103c     0A 01 02 F6 | 	mov	arg01, local06
01040     05 01 02 F1 | 	add	arg01, local01
01044     00 EB C1 FA | 	rdbyte	result1, arg01
01048     2F EA 0D F2 | 	cmp	result1, #47 wz
0104c     0A 17 02 56 |  if_ne	mov	local07, local06
01050     05 17 02 51 |  if_ne	add	local07, local01
01054     0B 01 CA 5A |  if_ne	rdbyte	arg01, local07 wz
01058     30 00 90 5D |  if_ne	jmp	#LR__0127
0105c     09 05 02 F6 | 	mov	arg03, local05
01060     02 04 66 F0 | 	shl	arg03, #2
01064     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01068     F2 04 02 F1 | 	add	arg03, ptr___system__dat__
0106c     02 03 02 FB | 	rdlong	arg02, arg03
01070     05 01 02 F6 | 	mov	arg01, local01
01074     0A 05 02 F6 | 	mov	arg03, local06
01078     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
0107c     20 1E B0 FD | 	call	#__system__strncmp
01080     00 EA 0D F2 | 	cmp	result1, #0 wz
01084     09 0F 02 A6 |  if_e	mov	local03, local05
01088     08 00 90 AD |  if_e	jmp	#LR__0129
0108c                 | LR__0127
0108c                 | LR__0128
0108c     01 12 06 F1 | 	add	local05, #1
01090     48 FF 9F FD | 	jmp	#LR__0124
01094                 | LR__0129
01094     FF FF 7F FF 
01098     FF 0F 0E F2 | 	cmp	local03, ##-1 wz
0109c     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
010a0     F2 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
010a4     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
010a8     01 EA 65 A6 |  if_e	neg	result1, #1
010ac     78 01 90 AD |  if_e	jmp	#LR__0135
010b0     07 13 02 F6 | 	mov	local05, local03
010b4     09 17 02 F6 | 	mov	local07, local05
010b8     02 16 66 F0 | 	shl	local07, #2
010bc     74 E4 05 F1 | 	add	ptr___system__dat__, #116
010c0     F2 16 02 F1 | 	add	local07, ptr___system__dat__
010c4     0B 15 0A FB | 	rdlong	local06, local07 wz
010c8     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
010cc     58 00 90 AD |  if_e	jmp	#LR__0130
010d0     4C 14 06 F1 | 	add	local06, #76
010d4     0A 17 0A FB | 	rdlong	local07, local06 wz
010d8     4C 14 86 F1 | 	sub	local06, #76
010dc     48 00 90 AD |  if_e	jmp	#LR__0130
010e0     4C 14 06 F1 | 	add	local06, #76
010e4     0A 17 02 FB | 	rdlong	local07, local06
010e8     0B 0F 02 F6 | 	mov	local03, local07
010ec     13 16 46 F7 | 	zerox	local07, #19
010f0     14 0E 46 F0 | 	shr	local03, #20
010f4     02 0E 66 F0 | 	shl	local03, #2
010f8     ED 0E 02 F1 | 	add	local03, __methods__
010fc     07 0F 02 FB | 	rdlong	local03, local03
01100     09 15 02 F6 | 	mov	local06, local05
01104     02 14 66 F0 | 	shl	local06, #2
01108     64 E4 05 F1 | 	add	ptr___system__dat__, #100
0110c     F2 14 02 F1 | 	add	local06, ptr___system__dat__
01110     0A 01 02 FB | 	rdlong	arg01, local06
01114     F1 14 02 F6 | 	mov	local06, objptr
01118     0B E3 01 F6 | 	mov	objptr, local07
0111c     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01120     2D 0E 62 FD | 	call	local03
01124     0A E3 01 F6 | 	mov	objptr, local06
01128                 | LR__0130
01128     09 19 02 F6 | 	mov	local08, local05
0112c     02 18 66 F0 | 	shl	local08, #2
01130     74 E4 05 F1 | 	add	ptr___system__dat__, #116
01134     F2 18 02 F1 | 	add	local08, ptr___system__dat__
01138     0C 0D 62 FC | 	wrlong	local02, local08
0113c     00 0C 0E F2 | 	cmp	local02, #0 wz
01140     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
01144     18 00 90 5D |  if_ne	jmp	#LR__0131
01148     02 12 66 F0 | 	shl	local05, #2
0114c     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01150     F2 12 02 F1 | 	add	local05, ptr___system__dat__
01154     09 01 68 FC | 	wrlong	#0, local05
01158     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
0115c     C4 00 90 FD | 	jmp	#LR__0134
01160                 | LR__0131
01160     09 1B 02 F6 | 	mov	local09, local05
01164     04 1A 66 F0 | 	shl	local09, #4
01168     24 E4 05 F1 | 	add	ptr___system__dat__, #36
0116c     F2 1A 02 F1 | 	add	local09, ptr___system__dat__
01170     0D 01 02 F6 | 	mov	arg01, local09
01174     05 03 02 F6 | 	mov	arg02, local01
01178     10 04 06 F6 | 	mov	arg03, #16
0117c     24 E4 85 F1 | 	sub	ptr___system__dat__, #36
01180     70 1C B0 FD | 	call	#__system__strncpy
01184     48 0C 06 F1 | 	add	local02, #72
01188     06 19 0A FB | 	rdlong	local08, local02 wz
0118c     48 0C 86 F1 | 	sub	local02, #72
01190     7C 00 90 AD |  if_e	jmp	#LR__0133
01194     48 0C 06 F1 | 	add	local02, #72
01198     06 19 02 FB | 	rdlong	local08, local02
0119c     0C 1D 02 F6 | 	mov	local10, local08
011a0     13 18 46 F7 | 	zerox	local08, #19
011a4     14 1C 46 F0 | 	shr	local10, #20
011a8     02 1C 66 F0 | 	shl	local10, #2
011ac     ED 1C 02 F1 | 	add	local10, __methods__
011b0     0E 1D 02 FB | 	rdlong	local10, local10
011b4     0D 01 02 F6 | 	mov	arg01, local09
011b8     F1 1E 02 F6 | 	mov	local11, objptr
011bc     0C E3 01 F6 | 	mov	objptr, local08
011c0     2D 1C 62 FD | 	call	local10
011c4     0F E3 01 F6 | 	mov	objptr, local11
011c8     F5 00 0A F6 | 	mov	arg01, result1 wz
011cc     40 00 90 AD |  if_e	jmp	#LR__0132
011d0     09 19 02 F6 | 	mov	local08, local05
011d4     02 18 66 F0 | 	shl	local08, #2
011d8     74 E4 05 F1 | 	add	ptr___system__dat__, #116
011dc     F2 18 02 F1 | 	add	local08, ptr___system__dat__
011e0     0C 01 68 FC | 	wrlong	#0, local08
011e4     02 12 66 F0 | 	shl	local05, #2
011e8     10 E4 85 F1 | 	sub	ptr___system__dat__, #16
011ec     F2 12 02 F1 | 	add	local05, ptr___system__dat__
011f0     09 01 68 FC | 	wrlong	#0, local05
011f4     00 01 6A F6 | 	neg	arg01, arg01 wz
011f8     44 E4 85 F1 | 	sub	ptr___system__dat__, #68
011fc     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
01200     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
01204     01 EA 65 56 |  if_ne	neg	result1, #1
01208     00 EA 05 A6 |  if_e	mov	result1, #0
0120c     18 00 90 FD | 	jmp	#LR__0135
01210                 | LR__0132
01210                 | LR__0133
01210     02 12 66 F0 | 	shl	local05, #2
01214     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01218     F2 12 02 F1 | 	add	local05, ptr___system__dat__
0121c     09 1B 62 FC | 	wrlong	local09, local05
01220     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01224                 | LR__0134
01224     00 EA 05 F6 | 	mov	result1, #0
01228                 | LR__0135
01228     A7 F0 03 F6 | 	mov	ptra, fp
0122c     B2 00 A0 FD | 	call	#popregs_
01230                 | __system___mount_ret
01230     2D 00 64 FD | 	ret
01234                 | 
01234                 | __system___chdir
01234     00 4A 05 F6 | 	mov	COUNT_, #0
01238     A8 00 A0 FD | 	call	#pushregs_
0123c     40 F0 07 F1 | 	add	ptra, #64
01240     04 4E 05 F1 | 	add	fp, #4
01244     A7 00 62 FC | 	wrlong	arg01, fp
01248     04 4E 05 F1 | 	add	fp, #4
0124c     A7 02 02 F6 | 	mov	arg02, fp
01250     08 4E 85 F1 | 	sub	fp, #8
01254     A8 19 B0 FD | 	call	#__system__stat
01258     3C 4E 05 F1 | 	add	fp, #60
0125c     A7 EA 61 FC | 	wrlong	result1, fp
01260     3C 4E 85 F1 | 	sub	fp, #60
01264     00 EA 0D F2 | 	cmp	result1, #0 wz
01268     3C 4E 05 51 |  if_ne	add	fp, #60
0126c     A7 EA 01 5B |  if_ne	rdlong	result1, fp
01270     3C 4E 85 51 |  if_ne	sub	fp, #60
01274     BC 00 90 5D |  if_ne	jmp	#LR__0142
01278     10 4E 05 F1 | 	add	fp, #16
0127c     A7 00 02 FB | 	rdlong	arg01, fp
01280     10 4E 85 F1 | 	sub	fp, #16
01284     78 00 00 FF 
01288     00 00 06 F5 | 	and	arg01, ##61440
0128c     08 00 00 FF 
01290     00 00 0E F2 | 	cmp	arg01, ##4096 wz
01294     20 E4 05 51 |  if_ne	add	ptr___system__dat__, #32
01298     F2 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
0129c     20 E4 85 51 |  if_ne	sub	ptr___system__dat__, #32
012a0     01 EA 65 56 |  if_ne	neg	result1, #1
012a4     8C 00 90 5D |  if_ne	jmp	#LR__0142
012a8     04 4E 05 F1 | 	add	fp, #4
012ac     A7 04 02 FB | 	rdlong	arg03, fp
012b0     04 4E 85 F1 | 	sub	fp, #4
012b4     02 05 C2 FA | 	rdbyte	arg03, arg03
012b8     2F 04 0E F2 | 	cmp	arg03, #47 wz
012bc     24 00 90 5D |  if_ne	jmp	#LR__0140
012c0     84 E4 05 F1 | 	add	ptr___system__dat__, #132
012c4     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
012c8     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
012cc     04 4E 05 F1 | 	add	fp, #4
012d0     A7 02 02 FB | 	rdlong	arg02, fp
012d4     04 4E 85 F1 | 	sub	fp, #4
012d8     00 05 06 F6 | 	mov	arg03, #256
012dc     14 1B B0 FD | 	call	#__system__strncpy
012e0     4C 00 90 FD | 	jmp	#LR__0141
012e4                 | LR__0140
012e4     84 E5 05 F1 | 	add	ptr___system__dat__, #388
012e8     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
012ec     38 4E 05 F1 | 	add	fp, #56
012f0     A7 00 62 FC | 	wrlong	arg01, fp
012f4     38 4E 85 F1 | 	sub	fp, #56
012f8     00 E5 85 F1 | 	sub	ptr___system__dat__, #256
012fc     F2 02 02 F6 | 	mov	arg02, ptr___system__dat__
01300     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
01304     00 05 06 F6 | 	mov	arg03, #256
01308     E8 1A B0 FD | 	call	#__system__strncpy
0130c     38 4E 05 F1 | 	add	fp, #56
01310     A7 00 02 FB | 	rdlong	arg01, fp
01314     34 4E 85 F1 | 	sub	fp, #52
01318     A7 02 02 FB | 	rdlong	arg02, fp
0131c     04 4E 85 F1 | 	sub	fp, #4
01320     84 E4 05 F1 | 	add	ptr___system__dat__, #132
01324     F2 04 02 F6 | 	mov	arg03, ptr___system__dat__
01328     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
0132c     10 00 B0 FD | 	call	#__system____getvfsforfile
01330                 | LR__0141
01330     00 EA 05 F6 | 	mov	result1, #0
01334                 | LR__0142
01334     A7 F0 03 F6 | 	mov	ptra, fp
01338     B2 00 A0 FD | 	call	#popregs_
0133c                 | __system___chdir_ret
0133c     2D 00 64 FD | 	ret
01340                 | 
01340                 | __system____getvfsforfile
01340     0E 4A 05 F6 | 	mov	COUNT_, #14
01344     A8 00 A0 FD | 	call	#pushregs_
01348     00 0B 02 F6 | 	mov	local01, arg01
0134c     01 0D 02 F6 | 	mov	local02, arg02
01350     02 0F 02 F6 | 	mov	local03, arg03
01354     97 10 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
01358                 | LR__0150
01358     06 EB C1 FA | 	rdbyte	result1, local02
0135c     2F EA 0D F2 | 	cmp	result1, #47 wz
01360     01 0C 06 A1 |  if_e	add	local02, #1
01364     06 11 C2 AA |  if_e	rdbyte	local04, local02
01368     01 0C 86 A1 |  if_e	sub	local02, #1
0136c     2F 10 0E A2 |  if_e	cmp	local04, #47 wz
01370     01 0C 06 A1 |  if_e	add	local02, #1
01374     E0 FF 9F AD |  if_e	jmp	#LR__0150
01378                 | LR__0151
01378     06 11 C2 FA | 	rdbyte	local04, local02
0137c     2F 10 0E F2 | 	cmp	local04, #47 wz
01380     14 00 90 5D |  if_ne	jmp	#LR__0152
01384     05 01 02 F6 | 	mov	arg01, local01
01388     06 03 02 F6 | 	mov	arg02, local02
0138c     00 05 06 F6 | 	mov	arg03, #256
01390     60 1A B0 FD | 	call	#__system__strncpy
01394     7C 00 90 FD | 	jmp	#LR__0154
01398                 | LR__0152
01398     84 E4 05 F1 | 	add	ptr___system__dat__, #132
0139c     F2 02 02 F6 | 	mov	arg02, ptr___system__dat__
013a0     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
013a4     05 01 02 F6 | 	mov	arg01, local01
013a8     00 05 06 F6 | 	mov	arg03, #256
013ac     44 1A B0 FD | 	call	#__system__strncpy
013b0     06 11 CA FA | 	rdbyte	local04, local02 wz
013b4     5C 00 90 AD |  if_e	jmp	#LR__0153
013b8     06 11 C2 FA | 	rdbyte	local04, local02
013bc     2E 10 0E F2 | 	cmp	local04, #46 wz
013c0     01 0C 06 A1 |  if_e	add	local02, #1
013c4     06 13 C2 AA |  if_e	rdbyte	local05, local02
013c8     01 0C 86 A1 |  if_e	sub	local02, #1
013cc     09 15 02 A6 |  if_e	mov	local06, local05
013d0     07 14 4E A7 |  if_e	zerox	local06, #7 wz
013d4     3C 00 90 AD |  if_e	jmp	#LR__0153
013d8     05 13 C2 FA | 	rdbyte	local05, local01
013dc     2F 12 0E F2 | 	cmp	local05, #47 wz
013e0     01 0A 06 A1 |  if_e	add	local01, #1
013e4     05 11 C2 AA |  if_e	rdbyte	local04, local01
013e8     01 0A 86 A1 |  if_e	sub	local01, #1
013ec     00 10 4E A2 |  if_e	cmps	local04, #0 wz
013f0     62 00 00 5F 
013f4     5C 03 06 56 |  if_ne	mov	arg02, ##@LR__1620
013f8     05 01 02 56 |  if_ne	mov	arg01, local01
013fc     00 05 06 56 |  if_ne	mov	arg03, #256
01400     3C 1A B0 5D |  if_ne	call	#__system__strncat
01404     05 01 02 F6 | 	mov	arg01, local01
01408     06 03 02 F6 | 	mov	arg02, local02
0140c     00 05 06 F6 | 	mov	arg03, #256
01410     2C 1A B0 FD | 	call	#__system__strncat
01414                 | LR__0153
01414                 | LR__0154
01414     05 01 02 F6 | 	mov	arg01, local01
01418     E4 1B B0 FD | 	call	#__system___normalizeName
0141c     05 11 CA FA | 	rdbyte	local04, local01 wz
01420     1C 00 90 AD |  if_e	jmp	#LR__0155
01424     05 11 C2 FA | 	rdbyte	local04, local01
01428     2F 10 0E F2 | 	cmp	local04, #47 wz
0142c     01 0A 06 A1 |  if_e	add	local01, #1
01430     05 15 C2 AA |  if_e	rdbyte	local06, local01
01434     01 0A 86 A1 |  if_e	sub	local01, #1
01438     00 14 4E A2 |  if_e	cmps	local06, #0 wz
0143c     18 00 90 5D |  if_ne	jmp	#LR__0156
01440                 | LR__0155
01440     01 00 00 FF 
01444     84 E4 05 F1 | 	add	ptr___system__dat__, ##644
01448     F2 EA 01 F6 | 	mov	result1, ptr___system__dat__
0144c     01 00 00 FF 
01450     84 E4 85 F1 | 	sub	ptr___system__dat__, ##644
01454     EC 01 90 FD | 	jmp	#LR__0170
01458                 | LR__0156
01458     00 16 06 F6 | 	mov	local07, #0
0145c                 | LR__0157
0145c     04 16 56 F2 | 	cmps	local07, #4 wc
01460     CC 01 90 3D |  if_ae	jmp	#LR__0169
01464     0B 15 02 F6 | 	mov	local06, local07
01468     02 14 66 F0 | 	shl	local06, #2
0146c     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01470     F2 14 02 F1 | 	add	local06, ptr___system__dat__
01474     0A 15 0A FB | 	rdlong	local06, local06 wz
01478     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
0147c     A8 01 90 AD |  if_e	jmp	#LR__0168
01480     0B 11 02 F6 | 	mov	local04, local07
01484     02 10 66 F0 | 	shl	local04, #2
01488     64 E4 05 F1 | 	add	ptr___system__dat__, #100
0148c     F2 10 02 F1 | 	add	local04, ptr___system__dat__
01490     08 01 02 FB | 	rdlong	arg01, local04
01494     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01498     00 19 02 F6 | 	mov	local08, arg01
0149c     97 06 48 FB | 	callpa	#(@LR__0159-@LR__0158)>>2,fcache_load_ptr_
014a0                 | LR__0158
014a0     0C EB C9 FA | 	rdbyte	result1, local08 wz
014a4     01 18 06 51 |  if_ne	add	local08, #1
014a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0158
014ac                 | LR__0159
014ac     00 19 82 F1 | 	sub	local08, arg01
014b0     0C 1B 02 F6 | 	mov	local09, local08
014b4     0D 11 02 F6 | 	mov	local04, local09
014b8     05 11 02 F1 | 	add	local04, local01
014bc     08 15 C2 FA | 	rdbyte	local06, local04
014c0     2F 14 0E F2 | 	cmp	local06, #47 wz
014c4     0D 1D 02 56 |  if_ne	mov	local10, local09
014c8     05 1D 02 51 |  if_ne	add	local10, local01
014cc     0E 13 CA 5A |  if_ne	rdbyte	local05, local10 wz
014d0     54 01 90 5D |  if_ne	jmp	#LR__0167
014d4     0B 05 02 F6 | 	mov	arg03, local07
014d8     02 04 66 F0 | 	shl	arg03, #2
014dc     64 E4 05 F1 | 	add	ptr___system__dat__, #100
014e0     F2 04 02 F1 | 	add	arg03, ptr___system__dat__
014e4     02 03 02 FB | 	rdlong	arg02, arg03
014e8     0D 05 02 F6 | 	mov	arg03, local09
014ec     05 01 02 F6 | 	mov	arg01, local01
014f0     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
014f4     A8 19 B0 FD | 	call	#__system__strncmp
014f8     00 EA 4D F2 | 	cmps	result1, #0 wz
014fc     28 01 90 5D |  if_ne	jmp	#LR__0167
01500     0B 1F 02 F6 | 	mov	local11, local07
01504     02 1E 66 F0 | 	shl	local11, #2
01508     74 E4 05 F1 | 	add	ptr___system__dat__, #116
0150c     F2 1E 02 F1 | 	add	local11, ptr___system__dat__
01510     0F 21 02 FB | 	rdlong	local12, local11
01514     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
01518     97 22 48 FB | 	callpa	#(@LR__0161-@LR__0160)>>2,fcache_load_ptr_
0151c                 | LR__0160
0151c     0D 15 02 F6 | 	mov	local06, local09
01520     01 14 06 F1 | 	add	local06, #1
01524     05 15 02 F1 | 	add	local06, local01
01528     0A 1F C2 FA | 	rdbyte	local11, local06
0152c     2E 1E 0E F2 | 	cmp	local11, #46 wz
01530     2C 00 90 5D |  if_ne	jmp	#LR__0162
01534     0D 1F 02 F6 | 	mov	local11, local09
01538     02 1E 06 F1 | 	add	local11, #2
0153c     05 1F 02 F1 | 	add	local11, local01
01540     0F 1D C2 FA | 	rdbyte	local10, local11
01544     2F 1C 0E F2 | 	cmp	local10, #47 wz
01548     0D 23 02 56 |  if_ne	mov	local13, local09
0154c     02 22 06 51 |  if_ne	add	local13, #2
01550     05 23 02 51 |  if_ne	add	local13, local01
01554     11 25 CA 5A |  if_ne	rdbyte	local14, local13 wz
01558     01 1A 06 A1 |  if_e	add	local09, #1
0155c     BC FF 9F AD |  if_e	jmp	#LR__0160
01560                 | LR__0161
01560                 | LR__0162
01560     00 0E 0E F2 | 	cmp	local03, #0 wz
01564     07 01 02 56 |  if_ne	mov	arg01, local03
01568     05 03 02 56 |  if_ne	mov	arg02, local01
0156c     00 05 06 56 |  if_ne	mov	arg03, #256
01570     80 18 B0 5D |  if_ne	call	#__system__strncpy
01574     05 03 02 F6 | 	mov	arg02, local01
01578     0D 03 02 F1 | 	add	arg02, local09
0157c     01 02 06 F1 | 	add	arg02, #1
01580     05 01 02 F6 | 	mov	arg01, local01
01584     E4 F7 BF FD | 	call	#__system____builtin_strcpy
01588     05 01 02 F6 | 	mov	arg01, local01
0158c     00 19 02 F6 | 	mov	local08, arg01
01590     97 06 48 FB | 	callpa	#(@LR__0164-@LR__0163)>>2,fcache_load_ptr_
01594                 | LR__0163
01594     0C EB C9 FA | 	rdbyte	result1, local08 wz
01598     01 18 06 51 |  if_ne	add	local08, #1
0159c     F4 FF 9F 5D |  if_ne	jmp	#LR__0163
015a0                 | LR__0164
015a0     00 19 82 F1 | 	sub	local08, arg01
015a4     0C 1B 02 F6 | 	mov	local09, local08
015a8                 | LR__0165
015a8     01 1A 56 F2 | 	cmps	local09, #1 wc
015ac     70 00 90 CD |  if_b	jmp	#LR__0166
015b0     0D 11 02 F6 | 	mov	local04, local09
015b4     05 11 02 F1 | 	add	local04, local01
015b8     08 1F C2 FA | 	rdbyte	local11, local04
015bc     2F 1E 0E F2 | 	cmp	local11, #47 wz
015c0     0D 1F 02 A6 |  if_e	mov	local11, local09
015c4     05 1F 02 A1 |  if_e	add	local11, local01
015c8     0F 01 48 AC |  if_e	wrbyte	#0, local11
015cc     01 1A 86 A1 |  if_e	sub	local09, #1
015d0     D4 FF 9F AD |  if_e	jmp	#LR__0165
015d4     0D 11 02 F6 | 	mov	local04, local09
015d8     05 11 02 F1 | 	add	local04, local01
015dc     08 1F C2 FA | 	rdbyte	local11, local04
015e0     2E 1E 0E F2 | 	cmp	local11, #46 wz
015e4     38 00 90 5D |  if_ne	jmp	#LR__0166
015e8     02 1A 56 F2 | 	cmps	local09, #2 wc
015ec     30 00 90 CD |  if_b	jmp	#LR__0166
015f0     0D 25 02 F6 | 	mov	local14, local09
015f4     01 24 86 F1 | 	sub	local14, #1
015f8     05 25 02 F1 | 	add	local14, local01
015fc     12 13 C2 FA | 	rdbyte	local05, local14
01600     2F 12 0E F2 | 	cmp	local05, #47 wz
01604     18 00 90 5D |  if_ne	jmp	#LR__0166
01608     0D 11 02 F6 | 	mov	local04, local09
0160c     01 10 86 F1 | 	sub	local04, #1
01610     05 11 02 F1 | 	add	local04, local01
01614     08 01 48 FC | 	wrbyte	#0, local04
01618     02 1A 86 F1 | 	sub	local09, #2
0161c     88 FF 9F FD | 	jmp	#LR__0165
01620                 | LR__0166
01620     10 EB 01 F6 | 	mov	result1, local12
01624     1C 00 90 FD | 	jmp	#LR__0170
01628                 | LR__0167
01628                 | LR__0168
01628     01 16 06 F1 | 	add	local07, #1
0162c     2C FE 9F FD | 	jmp	#LR__0157
01630                 | LR__0169
01630     03 00 00 FF 
01634     28 E5 05 F1 | 	add	ptr___system__dat__, ##1832
01638     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
0163c     03 00 00 FF 
01640     28 E5 85 F1 | 	sub	ptr___system__dat__, ##1832
01644                 | LR__0170
01644     A7 F0 03 F6 | 	mov	ptra, fp
01648     B2 00 A0 FD | 	call	#popregs_
0164c                 | __system____getvfsforfile_ret
0164c     2D 00 64 FD | 	ret
01650                 | 
01650                 | __system___basic_open_string
01650     04 4A 05 F6 | 	mov	COUNT_, #4
01654     A8 00 A0 FD | 	call	#pushregs_
01658     01 0B 02 F6 | 	mov	local01, arg02
0165c     02 0D 02 F6 | 	mov	local02, arg03
01660     68 17 B0 FD | 	call	#__system____getftab
01664     F5 0E 0A F6 | 	mov	local03, result1 wz
01668     18 00 90 5D |  if_ne	jmp	#LR__0180
0166c     EE 00 02 F6 | 	mov	arg01, abortchain
01670     0C 02 06 F6 | 	mov	arg02, #12
01674     01 04 06 F6 | 	mov	arg03, #1
01678     DA 00 A0 FD | 	call	#__longjmp
0167c     01 EA 65 F6 | 	neg	result1, #1
01680     58 00 90 FD | 	jmp	#LR__0182
01684                 | LR__0180
01684     08 0E 06 F1 | 	add	local03, #8
01688     07 07 0A FB | 	rdlong	arg04, local03 wz
0168c     08 0E 86 F1 | 	sub	local03, #8
01690     07 01 02 56 |  if_ne	mov	arg01, local03
01694     F0 0F B0 5D |  if_ne	call	#__system___closeraw
01698     05 03 02 F6 | 	mov	arg02, local01
0169c     06 05 02 F6 | 	mov	arg03, local02
016a0     07 01 02 F6 | 	mov	arg01, local03
016a4     B6 07 06 F6 | 	mov	arg04, #438
016a8     D8 0C B0 FD | 	call	#__system___openraw
016ac     F5 10 02 F6 | 	mov	local04, result1
016b0     00 10 56 F2 | 	cmps	local04, #0 wc
016b4     20 00 90 3D |  if_ae	jmp	#LR__0181
016b8     20 E4 05 F1 | 	add	ptr___system__dat__, #32
016bc     F2 02 02 FB | 	rdlong	arg02, ptr___system__dat__
016c0     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
016c4     EE 00 02 F6 | 	mov	arg01, abortchain
016c8     01 04 06 F6 | 	mov	arg03, #1
016cc     DA 00 A0 FD | 	call	#__longjmp
016d0     01 EA 65 F6 | 	neg	result1, #1
016d4     04 00 90 FD | 	jmp	#LR__0182
016d8                 | LR__0181
016d8     08 EB 01 F6 | 	mov	result1, local04
016dc                 | LR__0182
016dc     A7 F0 03 F6 | 	mov	ptra, fp
016e0     B2 00 A0 FD | 	call	#popregs_
016e4                 | __system___basic_open_string_ret
016e4     2D 00 64 FD | 	ret
016e8                 | 
016e8                 | __system___basic_print_char
016e8     03 4A 05 F6 | 	mov	COUNT_, #3
016ec     A8 00 A0 FD | 	call	#pushregs_
016f0     01 0B 02 F6 | 	mov	local01, arg02
016f4     04 1C B0 FD | 	call	#__system___gettxfunc
016f8     F5 0C 0A F6 | 	mov	local02, result1 wz
016fc     00 EA 05 A6 |  if_e	mov	result1, #0
01700     30 00 90 AD |  if_e	jmp	#LR__0190
01704     06 0F 02 F6 | 	mov	local03, local02
01708     13 0C 46 F7 | 	zerox	local02, #19
0170c     14 0E 46 F0 | 	shr	local03, #20
01710     02 0E 66 F0 | 	shl	local03, #2
01714     ED 0E 02 F1 | 	add	local03, __methods__
01718     07 0F 02 FB | 	rdlong	local03, local03
0171c     05 01 02 F6 | 	mov	arg01, local01
01720     F1 0A 02 F6 | 	mov	local01, objptr
01724     06 E3 01 F6 | 	mov	objptr, local02
01728     2D 0E 62 FD | 	call	local03
0172c     05 E3 01 F6 | 	mov	objptr, local01
01730     01 EA 05 F6 | 	mov	result1, #1
01734                 | LR__0190
01734     A7 F0 03 F6 | 	mov	ptra, fp
01738     B2 00 A0 FD | 	call	#popregs_
0173c                 | __system___basic_print_char_ret
0173c     2D 00 64 FD | 	ret
01740                 | 
01740                 | __system___basic_print_string
01740     03 4A 05 F6 | 	mov	COUNT_, #3
01744     A8 00 A0 FD | 	call	#pushregs_
01748     01 0B 02 F6 | 	mov	local01, arg02
0174c     02 0D 02 F6 | 	mov	local02, arg03
01750     A8 1B B0 FD | 	call	#__system___gettxfunc
01754     F5 0E 0A F6 | 	mov	local03, result1 wz
01758     00 EA 05 A6 |  if_e	mov	result1, #0
0175c     18 00 90 AD |  if_e	jmp	#LR__0200
01760     00 0A 0E F2 | 	cmp	local01, #0 wz
01764     00 EA 05 A6 |  if_e	mov	result1, #0
01768     07 01 02 56 |  if_ne	mov	arg01, local03
0176c     06 03 02 56 |  if_ne	mov	arg02, local02
01770     05 05 02 56 |  if_ne	mov	arg03, local01
01774     A4 00 B0 5D |  if_ne	call	#__system___fmtstr
01778                 | LR__0200
01778     A7 F0 03 F6 | 	mov	ptra, fp
0177c     B2 00 A0 FD | 	call	#popregs_
01780                 | __system___basic_print_string_ret
01780     2D 00 64 FD | 	ret
01784                 | 
01784                 | __system___basic_print_integer
01784     04 4A 05 F6 | 	mov	COUNT_, #4
01788     A8 00 A0 FD | 	call	#pushregs_
0178c     01 0B 02 F6 | 	mov	local01, arg02
01790     02 0D 02 F6 | 	mov	local02, arg03
01794     03 0F 02 F6 | 	mov	local03, arg04
01798     60 1B B0 FD | 	call	#__system___gettxfunc
0179c     F5 10 0A F6 | 	mov	local04, result1 wz
017a0     00 EA 05 A6 |  if_e	mov	result1, #0
017a4     08 01 02 56 |  if_ne	mov	arg01, local04
017a8     06 03 02 56 |  if_ne	mov	arg02, local02
017ac     05 05 02 56 |  if_ne	mov	arg03, local01
017b0     07 07 02 56 |  if_ne	mov	arg04, local03
017b4     50 01 B0 5D |  if_ne	call	#__system___fmtnum
017b8     A7 F0 03 F6 | 	mov	ptra, fp
017bc     B2 00 A0 FD | 	call	#popregs_
017c0                 | __system___basic_print_integer_ret
017c0     2D 00 64 FD | 	ret
017c4                 | 
017c4                 | __system___fmtchar
017c4     00 4A 05 F6 | 	mov	COUNT_, #0
017c8     A8 00 A0 FD | 	call	#pushregs_
017cc     10 F0 07 F1 | 	add	ptra, #16
017d0     04 4E 05 F1 | 	add	fp, #4
017d4     A7 00 62 FC | 	wrlong	arg01, fp
017d8     04 4E 05 F1 | 	add	fp, #4
017dc     A7 02 62 FC | 	wrlong	arg02, fp
017e0     04 4E 05 F1 | 	add	fp, #4
017e4     A7 04 62 FC | 	wrlong	arg03, fp
017e8     02 05 E2 F8 | 	getbyte	arg03, arg03, #0
017ec     A7 04 62 FC | 	wrlong	arg03, fp
017f0     08 4E 85 F1 | 	sub	fp, #8
017f4     A7 00 02 FB | 	rdlong	arg01, fp
017f8     04 4E 05 F1 | 	add	fp, #4
017fc     A7 02 02 FB | 	rdlong	arg02, fp
01800     04 4E 05 F1 | 	add	fp, #4
01804     A7 04 02 F6 | 	mov	arg03, fp
01808     0C 4E 85 F1 | 	sub	fp, #12
0180c     0C 00 B0 FD | 	call	#__system___fmtstr
01810     A7 F0 03 F6 | 	mov	ptra, fp
01814     B2 00 A0 FD | 	call	#popregs_
01818                 | __system___fmtchar_ret
01818     2D 00 64 FD | 	ret
0181c                 | 
0181c                 | __system___fmtstr
0181c     09 4A 05 F6 | 	mov	COUNT_, #9
01820     A8 00 A0 FD | 	call	#pushregs_
01824     00 0B 02 F6 | 	mov	local01, arg01
01828     01 0D 02 F6 | 	mov	local02, arg02
0182c     02 0F 02 F6 | 	mov	local03, arg03
01830     06 07 E2 F8 | 	getbyte	arg04, local02, #0
01834     07 01 02 F6 | 	mov	arg01, local03
01838     00 11 02 F6 | 	mov	local04, arg01
0183c     97 06 48 FB | 	callpa	#(@LR__0211-@LR__0210)>>2,fcache_load_ptr_
01840                 | LR__0210
01840     08 EB C9 FA | 	rdbyte	result1, local04 wz
01844     01 10 06 51 |  if_ne	add	local04, #1
01848     F4 FF 9F 5D |  if_ne	jmp	#LR__0210
0184c                 | LR__0211
0184c     00 11 82 F1 | 	sub	local04, arg01
01850     00 06 0E F2 | 	cmp	arg04, #0 wz
01854     03 11 7A 53 |  if_ne	fles	local04, arg04 wcz
01858     06 03 02 F6 | 	mov	arg02, local02
0185c     08 05 02 F6 | 	mov	arg03, local04
01860     05 01 02 F6 | 	mov	arg01, local01
01864     02 06 06 F6 | 	mov	arg04, #2
01868     54 19 B0 FD | 	call	#__system___fmtpad
0186c     F5 12 02 F6 | 	mov	local05, result1
01870     00 12 56 F2 | 	cmps	local05, #0 wc
01874     09 EB 01 C6 |  if_b	mov	result1, local05
01878     80 00 90 CD |  if_b	jmp	#LR__0214
0187c     01 10 56 F2 | 	cmps	local04, #1 wc
01880     50 00 90 CD |  if_b	jmp	#LR__0213
01884     08 15 02 F6 | 	mov	local06, local04
01888                 | LR__0212
01888     05 17 02 F6 | 	mov	local07, local01
0188c     05 19 02 F6 | 	mov	local08, local01
01890     13 16 46 F7 | 	zerox	local07, #19
01894     14 18 46 F0 | 	shr	local08, #20
01898     02 18 66 F0 | 	shl	local08, #2
0189c     ED 18 02 F1 | 	add	local08, __methods__
018a0     0C 19 02 FB | 	rdlong	local08, local08
018a4     07 01 C2 FA | 	rdbyte	arg01, local03
018a8     F1 1A 02 F6 | 	mov	local09, objptr
018ac     0B E3 01 F6 | 	mov	objptr, local07
018b0     01 0E 06 F1 | 	add	local03, #1
018b4     2D 18 62 FD | 	call	local08
018b8     0D E3 01 F6 | 	mov	objptr, local09
018bc     F5 1A 02 F6 | 	mov	local09, result1
018c0     00 1A 56 F2 | 	cmps	local09, #0 wc
018c4     0D EB 01 C6 |  if_b	mov	result1, local09
018c8     30 00 90 CD |  if_b	jmp	#LR__0214
018cc     0D 13 02 F1 | 	add	local05, local09
018d0     ED 15 6E FB | 	djnz	local06, #LR__0212
018d4                 | LR__0213
018d4     06 03 02 F6 | 	mov	arg02, local02
018d8     08 05 02 F6 | 	mov	arg03, local04
018dc     05 01 02 F6 | 	mov	arg01, local01
018e0     01 06 06 F6 | 	mov	arg04, #1
018e4     D8 18 B0 FD | 	call	#__system___fmtpad
018e8     F5 1A 02 F6 | 	mov	local09, result1
018ec     00 1A 56 F2 | 	cmps	local09, #0 wc
018f0     0D EB 01 C6 |  if_b	mov	result1, local09
018f4     0D 13 02 31 |  if_ae	add	local05, local09
018f8     09 EB 01 36 |  if_ae	mov	result1, local05
018fc                 | LR__0214
018fc     A7 F0 03 F6 | 	mov	ptra, fp
01900     B2 00 A0 FD | 	call	#popregs_
01904                 | __system___fmtstr_ret
01904     2D 00 64 FD | 	ret
01908                 | 
01908                 | __system___fmtnum
01908     0B 4A 05 F6 | 	mov	COUNT_, #11
0190c     A8 00 A0 FD | 	call	#pushregs_
01910     00 0B 02 F6 | 	mov	local01, arg01
01914     01 0D 02 F6 | 	mov	local02, arg02
01918     02 0F 02 F6 | 	mov	local03, arg03
0191c     03 11 02 F6 | 	mov	local04, arg04
01920     F8 13 02 F6 | 	mov	local05, ptra
01924     09 15 02 F6 | 	mov	local06, local05
01928     00 16 06 F6 | 	mov	local07, #0
0192c     06 19 02 F6 | 	mov	local08, local02
01930     10 18 46 F0 | 	shr	local08, #16
01934     3F 18 06 F5 | 	and	local08, #63
01938     06 1B E2 F8 | 	getbyte	local09, local02, #0
0193c     06 1D 02 F6 | 	mov	local10, local02
01940     1A 1C 46 F0 | 	shr	local10, #26
01944     03 1C 06 F5 | 	and	local10, #3
01948     0E 1F 02 F6 | 	mov	local11, local10
0194c     01 18 56 F2 | 	cmps	local08, #1 wc
01950     44 F0 07 F1 | 	add	ptra, #68
01954     01 18 86 31 |  if_ae	sub	local08, #1
01958     41 1A 56 F2 | 	cmps	local09, #65 wc
0195c     00 1A 0E C2 |  if_b	cmp	local09, #0 wz
01960     40 1A 06 B6 |  if_nc_or_z	mov	local09, #64
01964     03 1E 0E F2 | 	cmp	local11, #3 wz
01968     00 1E 06 A6 |  if_e	mov	local11, #0
0196c     00 0E 56 52 |  if_ne	cmps	local03, #0 wc
01970     04 1E 06 46 |  if_c_and_nz	mov	local11, #4
01974     07 0F 62 46 |  if_c_and_nz	neg	local03, local03
01978     00 1E 0E F2 | 	cmp	local11, #0 wz
0197c     4C 00 90 AD |  if_e	jmp	#LR__0223
01980     01 16 06 F6 | 	mov	local07, #1
01984     0D 19 0A F2 | 	cmp	local08, local09 wz
01988     18 00 90 5D |  if_ne	jmp	#LR__0221
0198c     05 18 6E FB | 	djnz	local08, #LR__0220
01990     05 01 02 F6 | 	mov	arg01, local01
01994     06 03 02 F6 | 	mov	arg02, local02
01998     23 04 06 F6 | 	mov	arg03, #35
0199c     24 FE BF FD | 	call	#__system___fmtchar
019a0     88 00 90 FD | 	jmp	#LR__0227
019a4                 | LR__0220
019a4                 | LR__0221
019a4     02 1E 0E F2 | 	cmp	local11, #2 wz
019a8     0A 1D 02 A6 |  if_e	mov	local10, local06
019ac     01 14 06 A1 |  if_e	add	local06, #1
019b0     0E 41 48 AC |  if_e	wrbyte	#32, local10
019b4     14 00 90 AD |  if_e	jmp	#LR__0222
019b8     04 1E 0E F2 | 	cmp	local11, #4 wz
019bc     0A 5B 48 AC |  if_e	wrbyte	#45, local06
019c0     01 14 06 A1 |  if_e	add	local06, #1
019c4     0A 57 48 5C |  if_ne	wrbyte	#43, local06
019c8     01 14 06 51 |  if_ne	add	local06, #1
019cc                 | LR__0222
019cc                 | LR__0223
019cc     0A 01 02 F6 | 	mov	arg01, local06
019d0     07 03 02 F6 | 	mov	arg02, local03
019d4     08 05 02 F6 | 	mov	arg03, local04
019d8     0C 07 02 F6 | 	mov	arg04, local08
019dc     00 08 06 F6 | 	mov	arg05, #0
019e0     1D 0C 2E F4 | 	testbn	local02, #29 wz
019e4     01 08 06 56 |  if_ne	mov	arg05, #1
019e8     9C 18 B0 FD | 	call	#__system___uitoa
019ec     F5 16 02 F1 | 	add	local07, result1
019f0     0D 17 5A F2 | 	cmps	local07, local09 wcz
019f4     24 00 90 ED |  if_be	jmp	#LR__0226
019f8     97 0E 48 FB | 	callpa	#(@LR__0225-@LR__0224)>>2,fcache_load_ptr_
019fc                 | LR__0224
019fc     0D 1D 02 F6 | 	mov	local10, local09
01a00     01 1C 56 F2 | 	cmps	local10, #1 wc
01a04     01 1A 86 F1 | 	sub	local09, #1
01a08     0A 1D 02 36 |  if_ae	mov	local10, local06
01a0c     01 14 06 31 |  if_ae	add	local06, #1
01a10     0E 47 48 3C |  if_ae	wrbyte	#35, local10
01a14     E4 FF 9F 3D |  if_ae	jmp	#LR__0224
01a18                 | LR__0225
01a18     0A 01 48 FC | 	wrbyte	#0, local06
01a1c                 | LR__0226
01a1c     05 01 02 F6 | 	mov	arg01, local01
01a20     06 03 02 F6 | 	mov	arg02, local02
01a24     09 05 02 F6 | 	mov	arg03, local05
01a28     F0 FD BF FD | 	call	#__system___fmtstr
01a2c                 | LR__0227
01a2c     A7 F0 03 F6 | 	mov	ptra, fp
01a30     B2 00 A0 FD | 	call	#popregs_
01a34                 | __system___fmtnum_ret
01a34     2D 00 64 FD | 	ret
01a38                 | 
01a38                 | __system___strerror
01a38     00 00 56 F2 | 	cmps	arg01, #0 wc
01a3c     08 00 90 CD |  if_b	jmp	#LR__0230
01a40     1A 00 56 F2 | 	cmps	arg01, #26 wc
01a44     04 00 90 CD |  if_b	jmp	#LR__0231
01a48                 | LR__0230
01a48     19 00 06 F6 | 	mov	arg01, #25
01a4c                 | LR__0231
01a4c     02 00 66 F0 | 	shl	arg01, #2
01a50     01 00 00 FF 
01a54     D8 E4 05 F1 | 	add	ptr___system__dat__, ##728
01a58     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
01a5c     00 EB 01 FB | 	rdlong	result1, arg01
01a60     01 00 00 FF 
01a64     D8 E4 85 F1 | 	sub	ptr___system__dat__, ##728
01a68                 | __system___strerror_ret
01a68     2D 00 64 FD | 	ret
01a6c                 | 
01a6c                 | __system___int64_shl
01a6c     20 04 CE F7 | 	test	arg03, #32 wz
01a70     00 03 02 56 |  if_ne	mov	arg02, arg01
01a74     00 00 06 56 |  if_ne	mov	arg01, #0
01a78     1F 04 CE F7 | 	test	arg03, #31 wz
01a7c     18 00 90 AD |  if_e	jmp	#LR__0240
01a80     02 03 62 F0 | 	shl	arg02, arg03
01a84     00 EB 01 F6 | 	mov	result1, arg01
01a88     02 ED 61 F6 | 	neg	result2, arg03
01a8c     F6 EA 41 F0 | 	shr	result1, result2
01a90     F5 02 42 F5 | 	or	arg02, result1
01a94     02 01 62 F0 | 	shl	arg01, arg03
01a98                 | LR__0240
01a98     01 ED 01 F6 | 	mov	result2, arg02
01a9c     00 EB 01 F6 | 	mov	result1, arg01
01aa0                 | __system___int64_shl_ret
01aa0     2D 00 64 FD | 	ret
01aa4                 | 
01aa4                 | __system___usepins
01aa4     14 E4 05 F1 | 	add	ptr___system__dat__, #20
01aa8     F2 EE 01 FB | 	rdlong	_var01, ptr___system__dat__
01aac     14 E4 85 F1 | 	sub	ptr___system__dat__, #20
01ab0     F7 00 CA F7 | 	test	arg01, _var01 wz
01ab4     18 E4 05 A1 |  if_e	add	ptr___system__dat__, #24
01ab8     F2 F0 01 AB |  if_e	rdlong	_var02, ptr___system__dat__
01abc     18 E4 85 A1 |  if_e	sub	ptr___system__dat__, #24
01ac0     F8 02 CA A7 |  if_e	test	arg02, _var02 wz
01ac4     00 EA 05 56 |  if_ne	mov	result1, #0
01ac8     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
01acc     14 E4 05 F1 | 	add	ptr___system__dat__, #20
01ad0     F2 F0 01 FB | 	rdlong	_var02, ptr___system__dat__
01ad4     00 F1 41 F5 | 	or	_var02, arg01
01ad8     F2 F0 61 FC | 	wrlong	_var02, ptr___system__dat__
01adc     04 E4 05 F1 | 	add	ptr___system__dat__, #4
01ae0     F2 F0 01 FB | 	rdlong	_var02, ptr___system__dat__
01ae4     01 F1 41 F5 | 	or	_var02, arg02
01ae8     F2 F0 61 FC | 	wrlong	_var02, ptr___system__dat__
01aec     18 E4 85 F1 | 	sub	ptr___system__dat__, #24
01af0     01 EA 65 F6 | 	neg	result1, #1
01af4                 | __system___usepins_ret
01af4     2D 00 64 FD | 	ret
01af8                 | 
01af8                 | __system___freepins
01af8     14 E4 05 F1 | 	add	ptr___system__dat__, #20
01afc     F2 EE 01 FB | 	rdlong	_var01, ptr___system__dat__
01b00     00 EF 21 F5 | 	andn	_var01, arg01
01b04     F2 EE 61 FC | 	wrlong	_var01, ptr___system__dat__
01b08     04 E4 05 F1 | 	add	ptr___system__dat__, #4
01b0c     F2 EE 01 FB | 	rdlong	_var01, ptr___system__dat__
01b10     01 EF 21 F5 | 	andn	_var01, arg02
01b14     F2 EE 61 FC | 	wrlong	_var01, ptr___system__dat__
01b18     18 E4 85 F1 | 	sub	ptr___system__dat__, #24
01b1c                 | __system___freepins_ret
01b1c     2D 00 64 FD | 	ret
01b20                 | 
01b20                 | __system___gc_ptrs
01b20     EC EE 01 F6 | 	mov	_var01, __heap_ptr
01b24     F7 F0 01 F6 | 	mov	_var02, _var01
01b28     0B 00 00 FF 
01b2c     68 F1 05 F1 | 	add	_var02, ##5992
01b30     F7 EC 09 FB | 	rdlong	result2, _var01 wz
01b34     74 00 90 5D |  if_ne	jmp	#LR__0250
01b38     F8 EC 01 F6 | 	mov	result2, _var02
01b3c     F7 EC 81 F1 | 	sub	result2, _var01
01b40     F7 02 58 FC | 	wrword	#1, _var01
01b44     F7 EA 01 F6 | 	mov	result1, _var01
01b48     02 EA 05 F1 | 	add	result1, #2
01b4c     36 00 80 FF 
01b50     F5 20 59 FC | 	wrword	##27792, result1
01b54     F7 EA 01 F6 | 	mov	result1, _var01
01b58     04 EA 05 F1 | 	add	result1, #4
01b5c     F5 00 58 FC | 	wrword	#0, result1
01b60     F7 EA 01 F6 | 	mov	result1, _var01
01b64     06 EA 05 F1 | 	add	result1, #6
01b68     F5 02 58 FC | 	wrword	#1, result1
01b6c     10 EE 05 F1 | 	add	_var01, #16
01b70     F6 EC 51 F6 | 	abs	result2, result2 wc
01b74     04 EC 45 F0 | 	shr	result2, #4
01b78     F6 EC 81 F6 | 	negc	result2, result2
01b7c     F7 EC 51 FC | 	wrword	result2, _var01
01b80     F7 EC 01 F6 | 	mov	result2, _var01
01b84     02 EC 05 F1 | 	add	result2, #2
01b88     36 00 80 FF 
01b8c     F6 1E 59 FC | 	wrword	##27791, result2
01b90     F7 EC 01 F6 | 	mov	result2, _var01
01b94     04 EC 05 F1 | 	add	result2, #4
01b98     F6 00 58 FC | 	wrword	#0, result2
01b9c     F7 EC 01 F6 | 	mov	result2, _var01
01ba0     06 EC 05 F1 | 	add	result2, #6
01ba4     F6 00 58 FC | 	wrword	#0, result2
01ba8     10 EE 85 F1 | 	sub	_var01, #16
01bac                 | LR__0250
01bac     F7 EA 01 F6 | 	mov	result1, _var01
01bb0     F8 EC 01 F6 | 	mov	result2, _var02
01bb4                 | __system___gc_ptrs_ret
01bb4     2D 00 64 FD | 	ret
01bb8                 | 
01bb8                 | __system___gc_tryalloc
01bb8     0B 4A 05 F6 | 	mov	COUNT_, #11
01bbc     A8 00 A0 FD | 	call	#pushregs_
01bc0     00 0B 02 F6 | 	mov	local01, arg01
01bc4     01 0D 02 F6 | 	mov	local02, arg02
01bc8     54 FF BF FD | 	call	#__system___gc_ptrs
01bcc     F5 0E 02 F6 | 	mov	local03, result1
01bd0     F6 10 02 F6 | 	mov	local04, result2
01bd4     07 13 02 F6 | 	mov	local05, local03
01bd8     00 14 06 F6 | 	mov	local06, #0
01bdc     97 1E 48 FB | 	callpa	#(@LR__0261-@LR__0260)>>2,fcache_load_ptr_
01be0                 | LR__0260
01be0     09 17 02 F6 | 	mov	local07, local05
01be4     06 12 06 F1 | 	add	local05, #6
01be8     09 03 EA FA | 	rdword	arg02, local05 wz
01bec     07 01 02 F6 | 	mov	arg01, local03
01bf0     00 EA 05 A6 |  if_e	mov	result1, #0
01bf4     04 02 66 50 |  if_ne	shl	arg02, #4
01bf8     01 01 02 51 |  if_ne	add	arg01, arg02
01bfc     00 EB 01 56 |  if_ne	mov	result1, arg01
01c00     F5 12 0A F6 | 	mov	local05, result1 wz
01c04     09 15 E2 5A |  if_ne	rdword	local06, local05
01c08     00 12 0E F2 | 	cmp	local05, #0 wz
01c0c     08 13 52 52 |  if_ne	cmps	local05, local04 wc
01c10     08 00 90 1D |  if_a	jmp	#LR__0262
01c14     0A 0B 5A 52 |  if_ne	cmps	local01, local06 wcz
01c18     C4 FF 9F 1D |  if_a	jmp	#LR__0260
01c1c                 | LR__0261
01c1c                 | LR__0262
01c1c     00 12 0E F2 | 	cmp	local05, #0 wz
01c20     09 EB 01 A6 |  if_e	mov	result1, local05
01c24     3C 01 90 AD |  if_e	jmp	#LR__0265
01c28     09 ED 01 F6 | 	mov	result2, local05
01c2c     06 EC 05 F1 | 	add	result2, #6
01c30     F6 18 E2 FA | 	rdword	local08, result2
01c34     0A 0B 52 F2 | 	cmps	local01, local06 wc
01c38     C0 00 90 3D |  if_ae	jmp	#LR__0264
01c3c     09 0B 52 FC | 	wrword	local01, local05
01c40     09 01 02 F6 | 	mov	arg01, local05
01c44     05 19 02 F6 | 	mov	local08, local01
01c48     04 18 66 F0 | 	shl	local08, #4
01c4c     0C 01 02 F1 | 	add	arg01, local08
01c50     05 15 82 F1 | 	sub	local06, local01
01c54     00 15 52 FC | 	wrword	local06, arg01
01c58     00 19 02 F6 | 	mov	local08, arg01
01c5c     02 18 06 F1 | 	add	local08, #2
01c60     36 00 80 FF 
01c64     0C 1F 59 FC | 	wrword	##27791, local08
01c68     09 03 0A F6 | 	mov	arg02, local05 wz
01c6c     00 EA 05 A6 |  if_e	mov	result1, #0
01c70     07 03 82 51 |  if_ne	sub	arg02, local03
01c74     04 02 46 50 |  if_ne	shr	arg02, #4
01c78     01 EB 01 56 |  if_ne	mov	result1, arg02
01c7c     00 19 02 F6 | 	mov	local08, arg01
01c80     04 18 06 F1 | 	add	local08, #4
01c84     0C EB 51 FC | 	wrword	result1, local08
01c88     09 19 02 F6 | 	mov	local08, local05
01c8c     06 18 06 F1 | 	add	local08, #6
01c90     00 03 02 F6 | 	mov	arg02, arg01
01c94     0C 19 E2 FA | 	rdword	local08, local08
01c98     06 02 06 F1 | 	add	arg02, #6
01c9c     01 19 52 FC | 	wrword	local08, arg02
01ca0     00 1B 02 F6 | 	mov	local09, arg01
01ca4     0D 03 0A F6 | 	mov	arg02, local09 wz
01ca8     00 EA 05 A6 |  if_e	mov	result1, #0
01cac     07 03 82 51 |  if_ne	sub	arg02, local03
01cb0     04 02 46 50 |  if_ne	shr	arg02, #4
01cb4     01 EB 01 56 |  if_ne	mov	result1, arg02
01cb8     F5 18 02 F6 | 	mov	local08, result1
01cbc     00 1D EA FA | 	rdword	local10, arg01 wz
01cc0     00 EA 05 A6 |  if_e	mov	result1, #0
01cc4     04 1C 66 50 |  if_ne	shl	local10, #4
01cc8     0E 01 02 51 |  if_ne	add	arg01, local10
01ccc     00 EB 01 56 |  if_ne	mov	result1, arg01
01cd0     F5 1E 0A F6 | 	mov	local11, result1 wz
01cd4     24 00 90 AD |  if_e	jmp	#LR__0263
01cd8     08 1F 52 F2 | 	cmps	local11, local04 wc
01cdc     1C 00 90 3D |  if_ae	jmp	#LR__0263
01ce0     0D 03 0A F6 | 	mov	arg02, local09 wz
01ce4     00 EA 05 A6 |  if_e	mov	result1, #0
01ce8     07 03 82 51 |  if_ne	sub	arg02, local03
01cec     04 02 46 50 |  if_ne	shr	arg02, #4
01cf0     01 EB 01 56 |  if_ne	mov	result1, arg02
01cf4     04 1E 06 F1 | 	add	local11, #4
01cf8     0F EB 51 FC | 	wrword	result1, local11
01cfc                 | LR__0263
01cfc                 | LR__0264
01cfc     06 16 06 F1 | 	add	local07, #6
01d00     0B 19 52 FC | 	wrword	local08, local07
01d04     36 00 00 FF 
01d08     80 1A 06 F6 | 	mov	local09, ##27776
01d0c     06 1B 42 F5 | 	or	local09, local02
01d10     00 EA 05 F6 | 	mov	result1, #0
01d14     01 EA 61 FD | 	cogid	result1
01d18     F5 1A 42 F5 | 	or	local09, result1
01d1c     09 1F 02 F6 | 	mov	local11, local05
01d20     02 1E 06 F1 | 	add	local11, #2
01d24     0F 1B 52 FC | 	wrword	local09, local11
01d28     07 1B 02 F6 | 	mov	local09, local03
01d2c     08 1A 06 F1 | 	add	local09, #8
01d30     09 1F 02 F6 | 	mov	local11, local05
01d34     0D 1B E2 FA | 	rdword	local09, local09
01d38     06 1E 06 F1 | 	add	local11, #6
01d3c     0F 1B 52 FC | 	wrword	local09, local11
01d40     09 03 0A F6 | 	mov	arg02, local05 wz
01d44     00 EA 05 A6 |  if_e	mov	result1, #0
01d48     07 03 82 51 |  if_ne	sub	arg02, local03
01d4c     04 02 46 50 |  if_ne	shr	arg02, #4
01d50     01 EB 01 56 |  if_ne	mov	result1, arg02
01d54     08 0E 06 F1 | 	add	local03, #8
01d58     07 EB 51 FC | 	wrword	result1, local03
01d5c     08 12 06 F1 | 	add	local05, #8
01d60     09 EB 01 F6 | 	mov	result1, local05
01d64                 | LR__0265
01d64     A7 F0 03 F6 | 	mov	ptra, fp
01d68     B2 00 A0 FD | 	call	#popregs_
01d6c                 | __system___gc_tryalloc_ret
01d6c     2D 00 64 FD | 	ret
01d70                 | 
01d70                 | __system___gc_alloc_managed
01d70     01 4A 05 F6 | 	mov	COUNT_, #1
01d74     A8 00 A0 FD | 	call	#pushregs_
01d78     00 0B 02 F6 | 	mov	local01, arg01
01d7c     00 02 06 F6 | 	mov	arg02, #0
01d80     1C 00 B0 FD | 	call	#__system___gc_doalloc
01d84     F5 02 0A F6 | 	mov	arg02, result1 wz
01d88     01 0A 56 A2 |  if_e	cmps	local01, #1 wc
01d8c     00 EA 05 26 |  if_nc_and_z	mov	result1, #0
01d90     01 EB 01 D6 |  if_c_or_nz	mov	result1, arg02
01d94     A7 F0 03 F6 | 	mov	ptra, fp
01d98     B2 00 A0 FD | 	call	#popregs_
01d9c                 | __system___gc_alloc_managed_ret
01d9c     2D 00 64 FD | 	ret
01da0                 | 
01da0                 | __system___gc_doalloc
01da0     06 4A 05 F6 | 	mov	COUNT_, #6
01da4     A8 00 A0 FD | 	call	#pushregs_
01da8     00 0B 0A F6 | 	mov	local01, arg01 wz
01dac     01 0D 02 F6 | 	mov	local02, arg02
01db0     00 EA 05 A6 |  if_e	mov	result1, #0
01db4     8C 00 90 AD |  if_e	jmp	#LR__0277
01db8     17 0A 06 F1 | 	add	local01, #23
01dbc     0F 0A 26 F5 | 	andn	local01, #15
01dc0     04 0A 46 F0 | 	shr	local01, #4
01dc4     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01dc8     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01dcc     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01dd0     E4 EF BF FD | 	call	#__system___lockmem
01dd4     05 01 02 F6 | 	mov	arg01, local01
01dd8     06 03 02 F6 | 	mov	arg02, local02
01ddc     D8 FD BF FD | 	call	#__system___gc_tryalloc
01de0     F5 0E 0A F6 | 	mov	local03, result1 wz
01de4     14 00 90 5D |  if_ne	jmp	#LR__0270
01de8     70 03 B0 FD | 	call	#__system___gc_docollect
01dec     05 01 02 F6 | 	mov	arg01, local01
01df0     06 03 02 F6 | 	mov	arg02, local02
01df4     C0 FD BF FD | 	call	#__system___gc_tryalloc
01df8     F5 0E 02 F6 | 	mov	local03, result1
01dfc                 | LR__0270
01dfc     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01e00     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01e04     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01e08     00 01 68 FC | 	wrlong	#0, arg01
01e0c     00 0E 0E F2 | 	cmp	local03, #0 wz
01e10     2C 00 90 AD |  if_e	jmp	#LR__0276
01e14     04 0A 66 F0 | 	shl	local01, #4
01e18     08 0A 86 F1 | 	sub	local01, #8
01e1c     05 11 52 F6 | 	abs	local04, local01 wc
01e20     02 10 46 F0 | 	shr	local04, #2
01e24     08 13 8A F6 | 	negc	local05, local04 wz
01e28     07 15 02 F6 | 	mov	local06, local03
01e2c     10 00 90 AD |  if_e	jmp	#LR__0275
01e30     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0271)>>2,fcache_load_ptr_
01e34                 | LR__0271
01e34     09 05 D8 FC | 	rep	@LR__0274, local05
01e38                 | LR__0272
01e38     0A 01 68 FC | 	wrlong	#0, local06
01e3c     04 14 06 F1 | 	add	local06, #4
01e40                 | LR__0273
01e40                 | LR__0274
01e40                 | LR__0275
01e40                 | LR__0276
01e40     07 EB 01 F6 | 	mov	result1, local03
01e44                 | LR__0277
01e44     A7 F0 03 F6 | 	mov	ptra, fp
01e48     B2 00 A0 FD | 	call	#popregs_
01e4c                 | __system___gc_doalloc_ret
01e4c     2D 00 64 FD | 	ret
01e50                 | 
01e50                 | __system___gc_isvalidptr
01e50     F8 04 06 F4 | 	bitl	arg03, #248
01e54     08 04 86 F1 | 	sub	arg03, #8
01e58     00 05 52 F2 | 	cmps	arg03, arg01 wc
01e5c     08 00 90 CD |  if_b	jmp	#LR__0280
01e60     01 05 52 F2 | 	cmps	arg03, arg02 wc
01e64     08 00 90 CD |  if_b	jmp	#LR__0281
01e68                 | LR__0280
01e68     00 EA 05 F6 | 	mov	result1, #0
01e6c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
01e70                 | LR__0281
01e70     02 EF 01 F6 | 	mov	_var01, arg03
01e74     00 EF 61 F5 | 	xor	_var01, arg01
01e78     0F EE CD F7 | 	test	_var01, #15 wz
01e7c     00 EA 05 56 |  if_ne	mov	result1, #0
01e80     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
01e84     02 EF 01 F6 | 	mov	_var01, arg03
01e88     02 EE 05 F1 | 	add	_var01, #2
01e8c     F7 EE E1 FA | 	rdword	_var01, _var01
01e90     7F 00 00 FF 
01e94     C0 EF 05 F5 | 	and	_var01, ##65472
01e98     36 00 00 FF 
01e9c     80 EE 0D F2 | 	cmp	_var01, ##27776 wz
01ea0     00 EA 05 56 |  if_ne	mov	result1, #0
01ea4     02 EB 01 A6 |  if_e	mov	result1, arg03
01ea8                 | __system___gc_isvalidptr_ret
01ea8     2D 00 64 FD | 	ret
01eac                 | 
01eac                 | __system___gc_free
01eac     00 05 02 F6 | 	mov	arg03, arg01
01eb0     6C FC BF FD | 	call	#__system___gc_ptrs
01eb4     F5 00 02 F6 | 	mov	arg01, result1
01eb8     F6 02 02 F6 | 	mov	arg02, result2
01ebc     90 FF BF FD | 	call	#__system___gc_isvalidptr
01ec0     F5 02 0A F6 | 	mov	arg02, result1 wz
01ec4     28 00 90 AD |  if_e	jmp	#LR__0290
01ec8     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01ecc     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01ed0     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01ed4     E0 EE BF FD | 	call	#__system___lockmem
01ed8     01 01 02 F6 | 	mov	arg01, arg02
01edc     14 00 B0 FD | 	call	#__system___gc_dofree
01ee0     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01ee4     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01ee8     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01eec     00 01 68 FC | 	wrlong	#0, arg01
01ef0                 | LR__0290
01ef0                 | __system___gc_free_ret
01ef0     2D 00 64 FD | 	ret
01ef4                 | 
01ef4                 | __system___gc_dofree
01ef4     06 4A 05 F6 | 	mov	COUNT_, #6
01ef8     A8 00 A0 FD | 	call	#pushregs_
01efc     00 0B 02 F6 | 	mov	local01, arg01
01f00     1C FC BF FD | 	call	#__system___gc_ptrs
01f04     F5 0C 02 F6 | 	mov	local02, result1
01f08     F6 0E 02 F6 | 	mov	local03, result2
01f0c     05 03 02 F6 | 	mov	arg02, local01
01f10     02 02 06 F1 | 	add	arg02, #2
01f14     36 00 80 FF 
01f18     01 1F 59 FC | 	wrword	##27791, arg02
01f1c     05 11 02 F6 | 	mov	local04, local01
01f20     05 01 02 F6 | 	mov	arg01, local01
01f24     00 13 EA FA | 	rdword	local05, arg01 wz
01f28     00 EA 05 A6 |  if_e	mov	result1, #0
01f2c     04 12 66 50 |  if_ne	shl	local05, #4
01f30     09 01 02 51 |  if_ne	add	arg01, local05
01f34     00 EB 01 56 |  if_ne	mov	result1, arg01
01f38     F5 14 02 F6 | 	mov	local06, result1
01f3c     97 24 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
01f40                 | LR__0300
01f40     04 10 06 F1 | 	add	local04, #4
01f44     08 03 EA FA | 	rdword	arg02, local04 wz
01f48     06 01 02 F6 | 	mov	arg01, local02
01f4c     00 EA 05 A6 |  if_e	mov	result1, #0
01f50     04 02 66 50 |  if_ne	shl	arg02, #4
01f54     01 01 02 51 |  if_ne	add	arg01, arg02
01f58     00 EB 01 56 |  if_ne	mov	result1, arg01
01f5c     F5 10 0A F6 | 	mov	local04, result1 wz
01f60     24 00 90 AD |  if_e	jmp	#LR__0302
01f64     08 01 02 F6 | 	mov	arg01, local04
01f68     00 EA 05 F6 | 	mov	result1, #0
01f6c     02 00 06 F1 | 	add	arg01, #2
01f70     00 01 E2 FA | 	rdword	arg01, arg01
01f74     36 00 00 FF 
01f78     8F 00 0E F2 | 	cmp	arg01, ##27791 wz
01f7c     01 EA 65 A6 |  if_e	neg	result1, #1
01f80     00 EA 0D F2 | 	cmp	result1, #0 wz
01f84     B8 FF 9F AD |  if_e	jmp	#LR__0300
01f88                 | LR__0301
01f88                 | LR__0302
01f88     00 10 0E F2 | 	cmp	local04, #0 wz
01f8c     06 11 02 A6 |  if_e	mov	local04, local02
01f90     08 03 02 F6 | 	mov	arg02, local04
01f94     06 02 06 F1 | 	add	arg02, #6
01f98     05 01 02 F6 | 	mov	arg01, local01
01f9c     01 03 E2 FA | 	rdword	arg02, arg02
01fa0     06 00 06 F1 | 	add	arg01, #6
01fa4     00 03 52 FC | 	wrword	arg02, arg01
01fa8     05 03 0A F6 | 	mov	arg02, local01 wz
01fac     00 EA 05 A6 |  if_e	mov	result1, #0
01fb0     06 03 82 51 |  if_ne	sub	arg02, local02
01fb4     04 02 46 50 |  if_ne	shr	arg02, #4
01fb8     01 EB 01 56 |  if_ne	mov	result1, arg02
01fbc     08 03 02 F6 | 	mov	arg02, local04
01fc0     06 02 06 F1 | 	add	arg02, #6
01fc4     01 EB 51 FC | 	wrword	result1, arg02
01fc8     06 11 0A F2 | 	cmp	local04, local02 wz
01fcc     A4 00 90 AD |  if_e	jmp	#LR__0305
01fd0     08 01 02 F6 | 	mov	arg01, local04
01fd4     00 13 EA FA | 	rdword	local05, arg01 wz
01fd8     00 EA 05 A6 |  if_e	mov	result1, #0
01fdc     04 12 66 50 |  if_ne	shl	local05, #4
01fe0     09 01 02 51 |  if_ne	add	arg01, local05
01fe4     00 EB 01 56 |  if_ne	mov	result1, arg01
01fe8     05 EB 09 F2 | 	cmp	result1, local01 wz
01fec     84 00 90 5D |  if_ne	jmp	#LR__0304
01ff0     08 15 E2 FA | 	rdword	local06, local04
01ff4     05 03 E2 FA | 	rdword	arg02, local01
01ff8     01 15 02 F1 | 	add	local06, arg02
01ffc     08 15 52 FC | 	wrword	local06, local04
02000     05 15 02 F6 | 	mov	local06, local01
02004     02 14 06 F1 | 	add	local06, #2
02008     0A 01 58 FC | 	wrword	#0, local06
0200c     05 01 02 F6 | 	mov	arg01, local01
02010     00 13 EA FA | 	rdword	local05, arg01 wz
02014     00 EA 05 A6 |  if_e	mov	result1, #0
02018     04 12 66 50 |  if_ne	shl	local05, #4
0201c     09 01 02 51 |  if_ne	add	arg01, local05
02020     00 EB 01 56 |  if_ne	mov	result1, arg01
02024     F5 14 02 F6 | 	mov	local06, result1
02028     07 15 52 F2 | 	cmps	local06, local03 wc
0202c     20 00 90 3D |  if_ae	jmp	#LR__0303
02030     08 03 0A F6 | 	mov	arg02, local04 wz
02034     00 EA 05 A6 |  if_e	mov	result1, #0
02038     06 03 82 51 |  if_ne	sub	arg02, local02
0203c     04 02 46 50 |  if_ne	shr	arg02, #4
02040     01 EB 01 56 |  if_ne	mov	result1, arg02
02044     0A 03 02 F6 | 	mov	arg02, local06
02048     04 02 06 F1 | 	add	arg02, #4
0204c     01 EB 51 FC | 	wrword	result1, arg02
02050                 | LR__0303
02050     05 03 02 F6 | 	mov	arg02, local01
02054     06 02 06 F1 | 	add	arg02, #6
02058     08 ED 01 F6 | 	mov	result2, local04
0205c     01 03 E2 FA | 	rdword	arg02, arg02
02060     06 EC 05 F1 | 	add	result2, #6
02064     F6 02 52 FC | 	wrword	arg02, result2
02068     06 0A 06 F1 | 	add	local01, #6
0206c     05 01 58 FC | 	wrword	#0, local01
02070     08 0B 02 F6 | 	mov	local01, local04
02074                 | LR__0304
02074                 | LR__0305
02074     05 01 02 F6 | 	mov	arg01, local01
02078     00 13 EA FA | 	rdword	local05, arg01 wz
0207c     00 EA 05 A6 |  if_e	mov	result1, #0
02080     04 12 66 50 |  if_ne	shl	local05, #4
02084     09 01 02 51 |  if_ne	add	arg01, local05
02088     00 EB 01 56 |  if_ne	mov	result1, arg01
0208c     F5 02 0A F6 | 	mov	arg02, result1 wz
02090     B8 00 90 AD |  if_e	jmp	#LR__0307
02094     07 03 52 F2 | 	cmps	arg02, local03 wc
02098     B0 00 90 3D |  if_ae	jmp	#LR__0307
0209c     01 01 02 F6 | 	mov	arg01, arg02
020a0     00 EA 05 F6 | 	mov	result1, #0
020a4     02 00 06 F1 | 	add	arg01, #2
020a8     00 01 E2 FA | 	rdword	arg01, arg01
020ac     36 00 00 FF 
020b0     8F 00 0E F2 | 	cmp	arg01, ##27791 wz
020b4     01 EA 65 A6 |  if_e	neg	result1, #1
020b8     00 EA 0D F2 | 	cmp	result1, #0 wz
020bc     8C 00 90 AD |  if_e	jmp	#LR__0307
020c0     05 11 02 F6 | 	mov	local04, local01
020c4     08 15 E2 FA | 	rdword	local06, local04
020c8     01 01 02 F6 | 	mov	arg01, arg02
020cc     00 0B E2 FA | 	rdword	local01, arg01
020d0     05 15 02 F1 | 	add	local06, local01
020d4     08 15 52 FC | 	wrword	local06, local04
020d8     00 15 02 F6 | 	mov	local06, arg01
020dc     06 14 06 F1 | 	add	local06, #6
020e0     08 0B 02 F6 | 	mov	local01, local04
020e4     0A 15 E2 FA | 	rdword	local06, local06
020e8     06 0A 06 F1 | 	add	local01, #6
020ec     05 15 52 FC | 	wrword	local06, local01
020f0     00 15 02 F6 | 	mov	local06, arg01
020f4     02 14 06 F1 | 	add	local06, #2
020f8     0A 55 59 FC | 	wrword	#170, local06
020fc     00 15 02 F6 | 	mov	local06, arg01
02100     06 14 06 F1 | 	add	local06, #6
02104     0A 01 58 FC | 	wrword	#0, local06
02108     00 13 EA FA | 	rdword	local05, arg01 wz
0210c     00 EA 05 A6 |  if_e	mov	result1, #0
02110     04 12 66 50 |  if_ne	shl	local05, #4
02114     09 01 02 51 |  if_ne	add	arg01, local05
02118     00 EB 01 56 |  if_ne	mov	result1, arg01
0211c     F5 14 0A F6 | 	mov	local06, result1 wz
02120     28 00 90 AD |  if_e	jmp	#LR__0306
02124     07 15 52 F2 | 	cmps	local06, local03 wc
02128     20 00 90 3D |  if_ae	jmp	#LR__0306
0212c     08 03 0A F6 | 	mov	arg02, local04 wz
02130     00 EA 05 A6 |  if_e	mov	result1, #0
02134     06 03 82 51 |  if_ne	sub	arg02, local02
02138     04 02 46 50 |  if_ne	shr	arg02, #4
0213c     01 EB 01 56 |  if_ne	mov	result1, arg02
02140     0A 11 02 F6 | 	mov	local04, local06
02144     04 10 06 F1 | 	add	local04, #4
02148     08 EB 51 FC | 	wrword	result1, local04
0214c                 | LR__0306
0214c                 | LR__0307
0214c     0A EB 01 F6 | 	mov	result1, local06
02150     A7 F0 03 F6 | 	mov	ptra, fp
02154     B2 00 A0 FD | 	call	#popregs_
02158                 | __system___gc_dofree_ret
02158     2D 00 64 FD | 	ret
0215c                 | 
0215c                 | __system___gc_docollect
0215c     05 4A 05 F6 | 	mov	COUNT_, #5
02160     A8 00 A0 FD | 	call	#pushregs_
02164     B8 F9 BF FD | 	call	#__system___gc_ptrs
02168     F6 0A 02 F6 | 	mov	local01, result2
0216c     F5 0C 02 F6 | 	mov	local02, result1
02170     06 01 02 F6 | 	mov	arg01, local02
02174     00 0F EA FA | 	rdword	local03, arg01 wz
02178     00 EA 05 A6 |  if_e	mov	result1, #0
0217c     04 0E 66 50 |  if_ne	shl	local03, #4
02180     07 01 02 51 |  if_ne	add	arg01, local03
02184     00 EB 01 56 |  if_ne	mov	result1, arg01
02188     F5 10 0A F6 | 	mov	local04, result1 wz
0218c     00 EA 05 F6 | 	mov	result1, #0
02190     01 EA 61 FD | 	cogid	result1
02194     F5 12 02 F6 | 	mov	local05, result1
02198     48 00 90 AD |  if_e	jmp	#LR__0312
0219c     97 22 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
021a0                 | LR__0310
021a0     05 11 52 F2 | 	cmps	local04, local01 wc
021a4     3C 00 90 3D |  if_ae	jmp	#LR__0312
021a8     08 03 02 F6 | 	mov	arg02, local04
021ac     02 02 06 F1 | 	add	arg02, #2
021b0     01 03 E2 FA | 	rdword	arg02, arg02
021b4     20 02 26 F5 | 	andn	arg02, #32
021b8     08 01 02 F6 | 	mov	arg01, local04
021bc     02 00 06 F1 | 	add	arg01, #2
021c0     00 03 52 FC | 	wrword	arg02, arg01
021c4     08 01 02 F6 | 	mov	arg01, local04
021c8     00 0F EA FA | 	rdword	local03, arg01 wz
021cc     00 EA 05 A6 |  if_e	mov	result1, #0
021d0     04 0E 66 50 |  if_ne	shl	local03, #4
021d4     07 01 02 51 |  if_ne	add	arg01, local03
021d8     00 EB 01 56 |  if_ne	mov	result1, arg01
021dc     F5 10 0A F6 | 	mov	local04, result1 wz
021e0     BC FF 9F 5D |  if_ne	jmp	#LR__0310
021e4                 | LR__0311
021e4                 | LR__0312
021e4     00 0E 06 F6 | 	mov	local03, #0
021e8     00 00 06 F6 | 	mov	arg01, #0
021ec     A0 EB BF FD | 	call	#__system____topofstack
021f0     F5 02 02 F6 | 	mov	arg02, result1
021f4     07 01 02 F6 | 	mov	arg01, local03
021f8     90 00 B0 FD | 	call	#__system___gc_markhub
021fc     1C 01 B0 FD | 	call	#__system___gc_markcog
02200     06 01 02 F6 | 	mov	arg01, local02
02204     00 0F EA FA | 	rdword	local03, arg01 wz
02208     00 EA 05 A6 |  if_e	mov	result1, #0
0220c     04 0E 66 50 |  if_ne	shl	local03, #4
02210     07 01 02 51 |  if_ne	add	arg01, local03
02214     00 EB 01 56 |  if_ne	mov	result1, arg01
02218     F5 0C 0A F6 | 	mov	local02, result1 wz
0221c     60 00 90 AD |  if_e	jmp	#LR__0316
02220                 | LR__0313
02220     06 11 02 F6 | 	mov	local04, local02
02224     08 01 02 F6 | 	mov	arg01, local04
02228     00 0F EA FA | 	rdword	local03, arg01 wz
0222c     00 EA 05 A6 |  if_e	mov	result1, #0
02230     04 0E 66 50 |  if_ne	shl	local03, #4
02234     07 01 02 51 |  if_ne	add	arg01, local03
02238     00 EB 01 56 |  if_ne	mov	result1, arg01
0223c     F5 0C 02 F6 | 	mov	local02, result1
02240     08 03 02 F6 | 	mov	arg02, local04
02244     02 02 06 F1 | 	add	arg02, #2
02248     01 03 E2 FA | 	rdword	arg02, arg02
0224c     20 02 CE F7 | 	test	arg02, #32 wz
02250     10 02 CE A7 |  if_e	test	arg02, #16 wz
02254     1C 00 90 5D |  if_ne	jmp	#LR__0315
02258     01 03 42 F8 | 	getnib	arg02, arg02, #0
0225c     09 03 0A F2 | 	cmp	arg02, local05 wz
02260     0E 02 0E 52 |  if_ne	cmp	arg02, #14 wz
02264     0C 00 90 5D |  if_ne	jmp	#LR__0314
02268     08 01 02 F6 | 	mov	arg01, local04
0226c     84 FC BF FD | 	call	#__system___gc_dofree
02270     F5 0C 02 F6 | 	mov	local02, result1
02274                 | LR__0314
02274                 | LR__0315
02274     00 0C 0E F2 | 	cmp	local02, #0 wz
02278     05 0D 52 52 |  if_ne	cmps	local02, local01 wc
0227c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__0313
02280                 | LR__0316
02280     A7 F0 03 F6 | 	mov	ptra, fp
02284     B2 00 A0 FD | 	call	#popregs_
02288                 | __system___gc_docollect_ret
02288     2D 00 64 FD | 	ret
0228c                 | 
0228c                 | __system___gc_markhub
0228c     04 4A 05 F6 | 	mov	COUNT_, #4
02290     A8 00 A0 FD | 	call	#pushregs_
02294     00 0B 02 F6 | 	mov	local01, arg01
02298     01 0D 02 F6 | 	mov	local02, arg02
0229c     80 F8 BF FD | 	call	#__system___gc_ptrs
022a0     F5 0E 02 F6 | 	mov	local03, result1
022a4     F6 10 02 F6 | 	mov	local04, result2
022a8                 | LR__0320
022a8     06 0B 52 F2 | 	cmps	local01, local02 wc
022ac     60 00 90 3D |  if_ae	jmp	#LR__0321
022b0     05 05 02 FB | 	rdlong	arg03, local01
022b4     04 0A 06 F1 | 	add	local01, #4
022b8     08 03 02 F6 | 	mov	arg02, local04
022bc     07 01 02 F6 | 	mov	arg01, local03
022c0     8C FB BF FD | 	call	#__system___gc_isvalidptr
022c4     F5 04 0A F6 | 	mov	arg03, result1 wz
022c8     DC FF 9F AD |  if_e	jmp	#LR__0320
022cc     02 01 02 F6 | 	mov	arg01, arg03
022d0     00 EA 05 F6 | 	mov	result1, #0
022d4     02 00 06 F1 | 	add	arg01, #2
022d8     00 01 E2 FA | 	rdword	arg01, arg01
022dc     36 00 00 FF 
022e0     8F 00 0E F2 | 	cmp	arg01, ##27791 wz
022e4     01 EA 65 A6 |  if_e	neg	result1, #1
022e8     00 EA 0D F2 | 	cmp	result1, #0 wz
022ec     B8 FF 9F 5D |  if_ne	jmp	#LR__0320
022f0     02 ED 01 F6 | 	mov	result2, arg03
022f4     02 EC 05 F1 | 	add	result2, #2
022f8     F6 EC E1 FA | 	rdword	result2, result2
022fc     0F EC 25 F5 | 	andn	result2, #15
02300     2E EC 45 F5 | 	or	result2, #46
02304     02 04 06 F1 | 	add	arg03, #2
02308     02 ED 51 FC | 	wrword	result2, arg03
0230c     98 FF 9F FD | 	jmp	#LR__0320
02310                 | LR__0321
02310     A7 F0 03 F6 | 	mov	ptra, fp
02314     B2 00 A0 FD | 	call	#popregs_
02318                 | __system___gc_markhub_ret
02318     2D 00 64 FD | 	ret
0231c                 | 
0231c                 | __system___gc_markcog
0231c     04 4A 05 F6 | 	mov	COUNT_, #4
02320     A8 00 A0 FD | 	call	#pushregs_
02324     F8 F7 BF FD | 	call	#__system___gc_ptrs
02328     F5 0A 02 F6 | 	mov	local01, result1
0232c     F6 0C 02 F6 | 	mov	local02, result2
02330     EF 0F 06 F6 | 	mov	local03, #495
02334                 | LR__0330
02334                 | 	'.live	local03
02334     00 0E 96 F9 | 	alts	local03, #0
02338     07 11 02 F6 | 	mov	local04, local03
0233c     05 01 02 F6 | 	mov	arg01, local01
02340     06 03 02 F6 | 	mov	arg02, local02
02344     08 05 02 F6 | 	mov	arg03, local04
02348     04 FB BF FD | 	call	#__system___gc_isvalidptr
0234c     00 EA 0D F2 | 	cmp	result1, #0 wz
02350     18 00 90 AD |  if_e	jmp	#LR__0331
02354     F5 10 02 F6 | 	mov	local04, result1
02358     02 10 06 F1 | 	add	local04, #2
0235c     08 11 E2 FA | 	rdword	local04, local04
02360     20 10 46 F5 | 	or	local04, #32
02364     02 EA 05 F1 | 	add	result1, #2
02368     F5 10 52 FC | 	wrword	local04, result1
0236c                 | LR__0331
0236c     01 0E 86 F1 | 	sub	local03, #1
02370     00 0E 56 F2 | 	cmps	local03, #0 wc
02374     BC FF 9F 3D |  if_ae	jmp	#LR__0330
02378     A7 F0 03 F6 | 	mov	ptra, fp
0237c     B2 00 A0 FD | 	call	#popregs_
02380                 | __system___gc_markcog_ret
02380     2D 00 64 FD | 	ret
02384                 | 
02384                 | __system___openraw
02384     15 4A 05 F6 | 	mov	COUNT_, #21
02388     A8 00 A0 FD | 	call	#pushregs_
0238c     00 0B 02 F6 | 	mov	local01, arg01
02390     01 0D 02 F6 | 	mov	local02, arg02
02394     02 0F 02 F6 | 	mov	local03, arg03
02398     03 11 02 F6 | 	mov	local04, arg04
0239c     04 12 06 F6 | 	mov	local05, #4
023a0     05 15 02 F6 | 	mov	local06, local01
023a4     00 16 06 F6 | 	mov	local07, #0
023a8     84 E5 05 F1 | 	add	ptr___system__dat__, #388
023ac     F2 18 02 F6 | 	mov	local08, ptr___system__dat__
023b0     0C 01 02 F6 | 	mov	arg01, local08
023b4     06 03 02 F6 | 	mov	arg02, local02
023b8     00 04 06 F6 | 	mov	arg03, #0
023bc     84 E5 85 F1 | 	sub	ptr___system__dat__, #388
023c0     7C EF BF FD | 	call	#__system____getvfsforfile
023c4     F5 1A 0A F6 | 	mov	local09, result1 wz
023c8     10 00 90 AD |  if_e	jmp	#LR__0340
023cc     20 1A 06 F1 | 	add	local09, #32
023d0     0D EB 09 FB | 	rdlong	result1, local09 wz
023d4     20 1A 86 F1 | 	sub	local09, #32
023d8     14 00 90 5D |  if_ne	jmp	#LR__0341
023dc                 | LR__0340
023dc     20 E4 05 F1 | 	add	ptr___system__dat__, #32
023e0     F2 20 68 FC | 	wrlong	#16, ptr___system__dat__
023e4     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
023e8     01 EA 65 F6 | 	neg	result1, #1
023ec     8C 02 90 FD | 	jmp	#LR__0354
023f0                 | LR__0341
023f0     0A 01 02 F6 | 	mov	arg01, local06
023f4     00 02 06 F6 | 	mov	arg02, #0
023f8     34 04 06 F6 | 	mov	arg03, #52
023fc     00 1D 02 F6 | 	mov	local10, arg01
02400     98 00 A0 FD | 	call	#\builtin_bytefill_
02404     20 1A 06 F1 | 	add	local09, #32
02408     0D 1F 02 FB | 	rdlong	local11, local09
0240c     0F 21 02 F6 | 	mov	local12, local11
02410     0F 23 02 F6 | 	mov	local13, local11
02414     20 1A 86 F1 | 	sub	local09, #32
02418     11 25 02 F6 | 	mov	local14, local13
0241c     13 20 46 F7 | 	zerox	local12, #19
02420     14 24 46 F0 | 	shr	local14, #20
02424     02 24 66 F0 | 	shl	local14, #2
02428     ED 24 02 F1 | 	add	local14, __methods__
0242c     12 25 02 FB | 	rdlong	local14, local14
02430     0A 27 02 F6 | 	mov	local15, local06
02434     0C 29 02 F6 | 	mov	local16, local08
02438     07 2B 02 F6 | 	mov	local17, local03
0243c     13 01 02 F6 | 	mov	arg01, local15
02440     14 03 02 F6 | 	mov	arg02, local16
02444     15 05 02 F6 | 	mov	arg03, local17
02448     F1 2C 02 F6 | 	mov	local18, objptr
0244c     10 E3 01 F6 | 	mov	objptr, local12
02450     2D 24 62 FD | 	call	local14
02454     16 E3 01 F6 | 	mov	objptr, local18
02458     F5 2E 0A F6 | 	mov	local19, result1 wz
0245c     04 0E CE 57 |  if_ne	test	local03, #4 wz
02460     58 00 90 AD |  if_e	jmp	#LR__0342
02464     24 1A 06 F1 | 	add	local09, #36
02468     0D 1F 02 FB | 	rdlong	local11, local09
0246c     0F 21 02 F6 | 	mov	local12, local11
02470     0F 23 02 F6 | 	mov	local13, local11
02474     24 1A 86 F1 | 	sub	local09, #36
02478     11 25 02 F6 | 	mov	local14, local13
0247c     13 20 46 F7 | 	zerox	local12, #19
02480     14 24 46 F0 | 	shr	local14, #20
02484     02 24 66 F0 | 	shl	local14, #2
02488     ED 24 02 F1 | 	add	local14, __methods__
0248c     12 25 02 FB | 	rdlong	local14, local14
02490     0A 27 02 F6 | 	mov	local15, local06
02494     0C 29 02 F6 | 	mov	local16, local08
02498     08 2B 02 F6 | 	mov	local17, local04
0249c     13 01 02 F6 | 	mov	arg01, local15
024a0     14 03 02 F6 | 	mov	arg02, local16
024a4     15 05 02 F6 | 	mov	arg03, local17
024a8     F1 2C 02 F6 | 	mov	local18, objptr
024ac     10 E3 01 F6 | 	mov	objptr, local12
024b0     2D 24 62 FD | 	call	local14
024b4     16 E3 01 F6 | 	mov	objptr, local18
024b8     F5 2E 02 F6 | 	mov	local19, result1
024bc                 | LR__0342
024bc     00 2E 0E F2 | 	cmp	local19, #0 wz
024c0     8C 01 90 5D |  if_ne	jmp	#LR__0352
024c4     07 31 02 F6 | 	mov	local20, local03
024c8     03 30 0E F5 | 	and	local20, #3 wz
024cc     02 12 46 55 |  if_ne	or	local05, #2
024d0     01 30 0E F2 | 	cmp	local20, #1 wz
024d4     01 12 46 55 |  if_ne	or	local05, #1
024d8     20 0E CE F7 | 	test	local03, #32 wz
024dc     C0 12 46 55 |  if_ne	or	local05, #192
024e0     08 14 06 F1 | 	add	local06, #8
024e4     0A 13 62 FC | 	wrlong	local05, local06
024e8     0C 14 06 F1 | 	add	local06, #12
024ec     0A 33 0A FB | 	rdlong	local21, local06 wz
024f0     14 14 86 F1 | 	sub	local06, #20
024f4     18 00 90 5D |  if_ne	jmp	#LR__0343
024f8     04 1A 06 F1 | 	add	local09, #4
024fc     0D 33 02 FB | 	rdlong	local21, local09
02500     04 1A 86 F1 | 	sub	local09, #4
02504     14 14 06 F1 | 	add	local06, #20
02508     0A 33 62 FC | 	wrlong	local21, local06
0250c     14 14 86 F1 | 	sub	local06, #20
02510                 | LR__0343
02510     18 14 06 F1 | 	add	local06, #24
02514     0A 33 0A FB | 	rdlong	local21, local06 wz
02518     18 14 86 F1 | 	sub	local06, #24
0251c     18 00 90 5D |  if_ne	jmp	#LR__0344
02520     08 1A 06 F1 | 	add	local09, #8
02524     0D 33 02 FB | 	rdlong	local21, local09
02528     08 1A 86 F1 | 	sub	local09, #8
0252c     18 14 06 F1 | 	add	local06, #24
02530     0A 33 62 FC | 	wrlong	local21, local06
02534     18 14 86 F1 | 	sub	local06, #24
02538                 | LR__0344
02538     24 14 06 F1 | 	add	local06, #36
0253c     0A 33 0A FB | 	rdlong	local21, local06 wz
02540     24 14 86 F1 | 	sub	local06, #36
02544     0D 33 02 AB |  if_e	rdlong	local21, local09
02548     24 14 06 A1 |  if_e	add	local06, #36
0254c     0A 33 62 AC |  if_e	wrlong	local21, local06
02550     24 14 86 A1 |  if_e	sub	local06, #36
02554     28 14 06 F1 | 	add	local06, #40
02558     0A 33 0A FB | 	rdlong	local21, local06 wz
0255c     28 14 86 F1 | 	sub	local06, #40
02560     18 00 90 5D |  if_ne	jmp	#LR__0345
02564     10 1A 06 F1 | 	add	local09, #16
02568     0D 33 02 FB | 	rdlong	local21, local09
0256c     10 1A 86 F1 | 	sub	local09, #16
02570     28 14 06 F1 | 	add	local06, #40
02574     0A 33 62 FC | 	wrlong	local21, local06
02578     28 14 86 F1 | 	sub	local06, #40
0257c                 | LR__0345
0257c     30 14 06 F1 | 	add	local06, #48
02580     0A 33 0A FB | 	rdlong	local21, local06 wz
02584     30 14 86 F1 | 	sub	local06, #48
02588     18 00 90 5D |  if_ne	jmp	#LR__0346
0258c     0C 1A 06 F1 | 	add	local09, #12
02590     0D 33 02 FB | 	rdlong	local21, local09
02594     0C 1A 86 F1 | 	sub	local09, #12
02598     30 14 06 F1 | 	add	local06, #48
0259c     0A 33 62 FC | 	wrlong	local21, local06
025a0     30 14 86 F1 | 	sub	local06, #48
025a4                 | LR__0346
025a4     1C 14 06 F1 | 	add	local06, #28
025a8     0A 33 0A FB | 	rdlong	local21, local06 wz
025ac     1C 14 86 F1 | 	sub	local06, #28
025b0     1C 00 90 5D |  if_ne	jmp	#LR__0347
025b4     01 16 06 F6 | 	mov	local07, #1
025b8     F1 00 02 F6 | 	mov	arg01, objptr
025bc     00 48 00 FF 
025c0     00 00 46 F5 | 	or	arg01, ##9437184
025c4     1C 14 06 F1 | 	add	local06, #28
025c8     0A 01 62 FC | 	wrlong	arg01, local06
025cc     1C 14 86 F1 | 	sub	local06, #28
025d0                 | LR__0347
025d0     20 14 06 F1 | 	add	local06, #32
025d4     0A 33 0A FB | 	rdlong	local21, local06 wz
025d8     20 14 86 F1 | 	sub	local06, #32
025dc     1C 00 90 5D |  if_ne	jmp	#LR__0348
025e0     01 16 06 F6 | 	mov	local07, #1
025e4     F1 00 02 F6 | 	mov	arg01, objptr
025e8     00 50 00 FF 
025ec     00 00 46 F5 | 	or	arg01, ##10485760
025f0     20 14 06 F1 | 	add	local06, #32
025f4     0A 01 62 FC | 	wrlong	arg01, local06
025f8     20 14 86 F1 | 	sub	local06, #32
025fc                 | LR__0348
025fc     2C 14 06 F1 | 	add	local06, #44
02600     0A 33 0A FB | 	rdlong	local21, local06 wz
02604     2C 14 86 F1 | 	sub	local06, #44
02608     44 00 90 5D |  if_ne	jmp	#LR__0351
0260c     14 1A 06 F1 | 	add	local09, #20
02610     0D 33 0A FB | 	rdlong	local21, local09 wz
02614     14 1A 86 F1 | 	sub	local09, #20
02618     18 00 90 AD |  if_e	jmp	#LR__0349
0261c     14 1A 06 F1 | 	add	local09, #20
02620     0D 33 02 FB | 	rdlong	local21, local09
02624     2C 14 06 F1 | 	add	local06, #44
02628     0A 33 62 FC | 	wrlong	local21, local06
0262c     2C 14 86 F1 | 	sub	local06, #44
02630     1C 00 90 FD | 	jmp	#LR__0350
02634                 | LR__0349
02634     01 16 06 F6 | 	mov	local07, #1
02638     F1 00 02 F6 | 	mov	arg01, objptr
0263c     00 58 00 FF 
02640     00 00 46 F5 | 	or	arg01, ##11534336
02644     2C 14 06 F1 | 	add	local06, #44
02648     0A 01 62 FC | 	wrlong	arg01, local06
0264c     2C 14 86 F1 | 	sub	local06, #44
02650                 | LR__0350
02650                 | LR__0351
02650                 | LR__0352
02650     00 16 0E F2 | 	cmp	local07, #0 wz
02654     0A 01 02 56 |  if_ne	mov	arg01, local06
02658     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
0265c     00 2E 0E F2 | 	cmp	local19, #0 wz
02660     00 00 06 A6 |  if_e	mov	arg01, #0
02664     10 00 90 5D |  if_ne	jmp	#LR__0353
02668     00 00 4E F2 | 	cmps	arg01, #0 wz
0266c     20 E4 05 F1 | 	add	ptr___system__dat__, #32
02670     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
02674     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
02678                 | LR__0353
02678     17 EB 01 F6 | 	mov	result1, local19
0267c                 | LR__0354
0267c     A7 F0 03 F6 | 	mov	ptra, fp
02680     B2 00 A0 FD | 	call	#popregs_
02684                 | __system___openraw_ret
02684     2D 00 64 FD | 	ret
02688                 | 
02688                 | __system___closeraw
02688     05 4A 05 F6 | 	mov	COUNT_, #5
0268c     A8 00 A0 FD | 	call	#pushregs_
02690     00 0B 02 F6 | 	mov	local01, arg01
02694     00 0C 06 F6 | 	mov	local02, #0
02698     08 0A 06 F1 | 	add	local01, #8
0269c     05 EB 09 FB | 	rdlong	result1, local01 wz
026a0     08 0A 86 F1 | 	sub	local01, #8
026a4     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
026a8     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
026ac     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
026b0     01 EA 65 A6 |  if_e	neg	result1, #1
026b4     A8 00 90 AD |  if_e	jmp	#LR__0362
026b8     2C 0A 06 F1 | 	add	local01, #44
026bc     05 EB 09 FB | 	rdlong	result1, local01 wz
026c0     2C 0A 86 F1 | 	sub	local01, #44
026c4     38 00 90 AD |  if_e	jmp	#LR__0360
026c8     2C 0A 06 F1 | 	add	local01, #44
026cc     05 0F 02 FB | 	rdlong	local03, local01
026d0     07 11 02 F6 | 	mov	local04, local03
026d4     2C 0A 86 F1 | 	sub	local01, #44
026d8     13 10 46 F7 | 	zerox	local04, #19
026dc     14 0E 46 F0 | 	shr	local03, #20
026e0     02 0E 66 F0 | 	shl	local03, #2
026e4     ED 0E 02 F1 | 	add	local03, __methods__
026e8     07 0F 02 FB | 	rdlong	local03, local03
026ec     05 01 02 F6 | 	mov	arg01, local01
026f0     F1 12 02 F6 | 	mov	local05, objptr
026f4     08 E3 01 F6 | 	mov	objptr, local04
026f8     2D 0E 62 FD | 	call	local03
026fc     09 E3 01 F6 | 	mov	objptr, local05
02700                 | LR__0360
02700     24 0A 06 F1 | 	add	local01, #36
02704     05 13 0A FB | 	rdlong	local05, local01 wz
02708     24 0A 86 F1 | 	sub	local01, #36
0270c     3C 00 90 AD |  if_e	jmp	#LR__0361
02710     24 0A 06 F1 | 	add	local01, #36
02714     05 0F 02 FB | 	rdlong	local03, local01
02718     07 11 02 F6 | 	mov	local04, local03
0271c     24 0A 86 F1 | 	sub	local01, #36
02720     13 10 46 F7 | 	zerox	local04, #19
02724     14 0E 46 F0 | 	shr	local03, #20
02728     02 0E 66 F0 | 	shl	local03, #2
0272c     ED 0E 02 F1 | 	add	local03, __methods__
02730     07 0F 02 FB | 	rdlong	local03, local03
02734     05 01 02 F6 | 	mov	arg01, local01
02738     F1 12 02 F6 | 	mov	local05, objptr
0273c     08 E3 01 F6 | 	mov	objptr, local04
02740     2D 0E 62 FD | 	call	local03
02744     09 E3 01 F6 | 	mov	objptr, local05
02748     F5 0C 02 F6 | 	mov	local02, result1
0274c                 | LR__0361
0274c     05 01 02 F6 | 	mov	arg01, local01
02750     00 02 06 F6 | 	mov	arg02, #0
02754     34 04 06 F6 | 	mov	arg03, #52
02758     98 00 A0 FD | 	call	#\builtin_bytefill_
0275c     06 EB 01 F6 | 	mov	result1, local02
02760                 | LR__0362
02760     A7 F0 03 F6 | 	mov	ptra, fp
02764     B2 00 A0 FD | 	call	#popregs_
02768                 | __system___closeraw_ret
02768     2D 00 64 FD | 	ret
0276c                 | 
0276c                 | __system___vfs_open_sdcardx
0276c     0B 4A 05 F6 | 	mov	COUNT_, #11
02770     A8 00 A0 FD | 	call	#pushregs_
02774     00 0F 02 F6 | 	mov	local03, arg01
02778     01 11 02 F6 | 	mov	local04, arg02
0277c     02 13 02 F6 | 	mov	local05, arg03
02780     03 15 02 F6 | 	mov	local06, arg04
02784     01 00 00 FF 
02788     24 00 06 F6 | 	mov	arg01, ##548
0278c     E0 F5 BF FD | 	call	#__system___gc_alloc_managed
02790     F5 16 02 F6 | 	mov	local07, result1
02794     01 00 00 FF 
02798     34 00 06 F6 | 	mov	arg01, ##564
0279c     D0 F5 BF FD | 	call	#__system___gc_alloc_managed
027a0     F5 18 02 F6 | 	mov	local08, result1
027a4     07 07 02 F6 | 	mov	arg04, local03
027a8     1F 06 C6 F0 | 	sar	arg04, #31
027ac     07 05 02 F6 | 	mov	arg03, local03
027b0     01 00 06 F6 | 	mov	arg01, #1
027b4     00 02 06 F6 | 	mov	arg02, #0
027b8     B0 F2 BF FD | 	call	#__system___int64_shl
027bc     F5 0A 02 F6 | 	mov	local01, result1
027c0     F6 1A 02 F6 | 	mov	local09, result2
027c4     08 07 02 F6 | 	mov	arg04, local04
027c8     1F 06 C6 F0 | 	sar	arg04, #31
027cc     08 05 02 F6 | 	mov	arg03, local04
027d0     01 00 06 F6 | 	mov	arg01, #1
027d4     00 02 06 F6 | 	mov	arg02, #0
027d8     90 F2 BF FD | 	call	#__system___int64_shl
027dc     F5 0A 42 F5 | 	or	local01, result1
027e0     F6 1A 42 F5 | 	or	local09, result2
027e4     09 07 02 F6 | 	mov	arg04, local05
027e8     1F 06 C6 F0 | 	sar	arg04, #31
027ec     09 05 02 F6 | 	mov	arg03, local05
027f0     01 00 06 F6 | 	mov	arg01, #1
027f4     00 02 06 F6 | 	mov	arg02, #0
027f8     70 F2 BF FD | 	call	#__system___int64_shl
027fc     F5 0A 42 F5 | 	or	local01, result1
02800     F6 1A 42 F5 | 	or	local09, result2
02804     0A 07 02 F6 | 	mov	arg04, local06
02808     1F 06 C6 F0 | 	sar	arg04, #31
0280c     0A 05 02 F6 | 	mov	arg03, local06
02810     01 00 06 F6 | 	mov	arg01, #1
02814     00 02 06 F6 | 	mov	arg02, #0
02818     50 F2 BF FD | 	call	#__system___int64_shl
0281c     0D 03 02 F6 | 	mov	arg02, local09
02820     F5 0A 42 F5 | 	or	local01, result1
02824     01 ED 41 F5 | 	or	result2, arg02
02828     F6 0C 02 F6 | 	mov	local02, result2
0282c     05 01 02 F6 | 	mov	arg01, local01
02830     06 03 02 F6 | 	mov	arg02, local02
02834     6C F2 BF FD | 	call	#__system___usepins
02838     00 EA 0D F2 | 	cmp	result1, #0 wz
0283c     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
02840     F2 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
02844     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
02848     00 EA 05 A6 |  if_e	mov	result1, #0
0284c     B4 00 90 AD |  if_e	jmp	#LR__0372
02850     05 1D 02 F6 | 	mov	local10, local01
02854     06 1B 02 F6 | 	mov	local09, local02
02858     01 00 00 FF 
0285c     08 16 06 F1 | 	add	local07, ##520
02860     0B 1D 62 FC | 	wrlong	local10, local07
02864     04 16 06 F1 | 	add	local07, #4
02868     0B 1B 62 FC | 	wrlong	local09, local07
0286c     01 00 00 FF 
02870     0C 16 86 F1 | 	sub	local07, ##524
02874     0A 09 02 F6 | 	mov	arg05, local06
02878     00 00 06 F6 | 	mov	arg01, #0
0287c     07 03 02 F6 | 	mov	arg02, local03
02880     08 05 02 F6 | 	mov	arg03, local04
02884     09 07 02 F6 | 	mov	arg04, local05
02888     F1 1C 02 F6 | 	mov	local10, objptr
0288c     0B E3 01 F6 | 	mov	objptr, local07
02890     48 1A B0 FD | 	call	#_fatfs_cc_disk_setpins
02894     0E E3 01 F6 | 	mov	objptr, local10
02898     F5 1E 0A F6 | 	mov	local11, result1 wz
0289c     24 00 90 5D |  if_ne	jmp	#LR__0370
028a0     62 00 00 FF 
028a4     B0 03 06 F6 | 	mov	arg02, ##@LR__1624
028a8     0C 01 02 F6 | 	mov	arg01, local08
028ac     00 04 06 F6 | 	mov	arg03, #0
028b0     F1 1E 02 F6 | 	mov	local11, objptr
028b4     0B E3 01 F6 | 	mov	objptr, local07
028b8     78 51 B0 FD | 	call	#_fatfs_cc_f_mount
028bc     0F E3 01 F6 | 	mov	objptr, local11
028c0     F5 1E 02 F6 | 	mov	local11, result1
028c4                 | LR__0370
028c4     00 1E 0E F2 | 	cmp	local11, #0 wz
028c8     24 00 90 AD |  if_e	jmp	#LR__0371
028cc     05 01 02 F6 | 	mov	arg01, local01
028d0     06 03 02 F6 | 	mov	arg02, local02
028d4     20 F2 BF FD | 	call	#__system___freepins
028d8     0F 01 6A F6 | 	neg	arg01, local11 wz
028dc     20 E4 05 F1 | 	add	ptr___system__dat__, #32
028e0     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
028e4     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
028e8     00 EA 05 F6 | 	mov	result1, #0
028ec     14 00 90 FD | 	jmp	#LR__0372
028f0                 | LR__0371
028f0     0B 01 02 F6 | 	mov	arg01, local07
028f4     F1 1E 02 F6 | 	mov	local11, objptr
028f8     0B E3 01 F6 | 	mov	objptr, local07
028fc     14 8E B0 FD | 	call	#_fatfs_cc_get_vfs
02900     0F E3 01 F6 | 	mov	objptr, local11
02904                 | LR__0372
02904     A7 F0 03 F6 | 	mov	ptra, fp
02908     B2 00 A0 FD | 	call	#popregs_
0290c                 | __system___vfs_open_sdcardx_ret
0290c     2D 00 64 FD | 	ret
02910                 | 
02910                 | __system____default_getc
02910     03 4A 05 F6 | 	mov	COUNT_, #3
02914     A8 00 A0 FD | 	call	#pushregs_
02918     00 0B 02 F6 | 	mov	local01, arg01
0291c     05 0D 02 FB | 	rdlong	local02, local01
02920     08 0C 06 F1 | 	add	local02, #8
02924     06 0F 02 FB | 	rdlong	local03, local02
02928     02 0E CE F7 | 	test	local03, #2 wz
0292c     05 01 02 56 |  if_ne	mov	arg01, local01
02930     00 01 B0 5D |  if_ne	call	#__system____default_flush
02934     06 0F 02 FB | 	rdlong	local03, local02
02938     01 0E 46 F5 | 	or	local03, #1
0293c     06 0F 62 FC | 	wrlong	local03, local02
02940     08 0C 86 F1 | 	sub	local02, #8
02944     06 0F 0A FB | 	rdlong	local03, local02 wz
02948     0C 00 90 5D |  if_ne	jmp	#LR__0380
0294c     05 01 02 F6 | 	mov	arg01, local01
02950     98 0A B0 FD | 	call	#__system____default_filbuf
02954     F5 0E 02 F6 | 	mov	local03, result1
02958                 | LR__0380
02958     01 0E 56 F2 | 	cmps	local03, #1 wc
0295c     01 EA 65 C6 |  if_b	neg	result1, #1
02960     1C 00 90 CD |  if_b	jmp	#LR__0381
02964     01 0E 86 F1 | 	sub	local03, #1
02968     06 0F 62 FC | 	wrlong	local03, local02
0296c     04 0C 06 F1 | 	add	local02, #4
02970     06 0F 02 FB | 	rdlong	local03, local02
02974     07 EB C1 FA | 	rdbyte	result1, local03
02978     01 0E 06 F1 | 	add	local03, #1
0297c     06 0F 62 FC | 	wrlong	local03, local02
02980                 | LR__0381
02980     A7 F0 03 F6 | 	mov	ptra, fp
02984     B2 00 A0 FD | 	call	#popregs_
02988                 | __system____default_getc_ret
02988     2D 00 64 FD | 	ret
0298c                 | 
0298c                 | __system____default_putc
0298c     06 4A 05 F6 | 	mov	COUNT_, #6
02990     A8 00 A0 FD | 	call	#pushregs_
02994     00 0B 02 F6 | 	mov	local01, arg01
02998     01 0D 02 F6 | 	mov	local02, arg02
0299c     06 0F 02 FB | 	rdlong	local03, local02
029a0     08 0E 06 F1 | 	add	local03, #8
029a4     07 EB 01 FB | 	rdlong	result1, local03
029a8     01 EA CD F7 | 	test	result1, #1 wz
029ac     06 01 02 56 |  if_ne	mov	arg01, local02
029b0     80 00 B0 5D |  if_ne	call	#__system____default_flush
029b4     07 11 02 FB | 	rdlong	local04, local03
029b8     02 10 46 F5 | 	or	local04, #2
029bc     07 11 62 FC | 	wrlong	local04, local03
029c0     08 0E 86 F1 | 	sub	local03, #8
029c4     07 13 02 FB | 	rdlong	local05, local03
029c8     10 0E 06 F1 | 	add	local03, #16
029cc     07 03 02 FB | 	rdlong	arg02, local03
029d0     10 0E 86 F1 | 	sub	local03, #16
029d4     09 EB 01 F6 | 	mov	result1, local05
029d8     01 EB 01 F1 | 	add	result1, arg02
029dc     F5 0A 42 FC | 	wrbyte	local01, result1
029e0     05 0B E2 F8 | 	getbyte	local01, local01, #0
029e4     01 12 06 F1 | 	add	local05, #1
029e8     07 13 62 FC | 	wrlong	local05, local03
029ec     06 0C 06 F1 | 	add	local02, #6
029f0     06 15 EA FA | 	rdword	local06, local02 wz
029f4     06 0C 86 F1 | 	sub	local02, #6
029f8     0C 0E 06 51 |  if_ne	add	local03, #12
029fc     07 11 02 5B |  if_ne	rdlong	local04, local03
02a00     08 13 0A 52 |  if_ne	cmp	local05, local04 wz
02a04     0C 00 90 AD |  if_e	jmp	#LR__0390
02a08     0A 0A 0E F2 | 	cmp	local01, #10 wz
02a0c     01 14 0E A2 |  if_e	cmp	local06, #1 wz
02a10     10 00 90 5D |  if_ne	jmp	#LR__0391
02a14                 | LR__0390
02a14     06 01 02 F6 | 	mov	arg01, local02
02a18     18 00 B0 FD | 	call	#__system____default_flush
02a1c     00 EA 0D F2 | 	cmp	result1, #0 wz
02a20     01 0A 66 56 |  if_ne	neg	local01, #1
02a24                 | LR__0391
02a24     05 EB 01 F6 | 	mov	result1, local01
02a28     A7 F0 03 F6 | 	mov	ptra, fp
02a2c     B2 00 A0 FD | 	call	#popregs_
02a30                 | __system____default_putc_ret
02a30     2D 00 64 FD | 	ret
02a34                 | 
02a34                 | __system____default_flush
02a34     06 4A 05 F6 | 	mov	COUNT_, #6
02a38     A8 00 A0 FD | 	call	#pushregs_
02a3c     00 0B 02 F6 | 	mov	local01, arg01
02a40     05 0D 02 FB | 	rdlong	local02, local01
02a44     06 0F 02 FB | 	rdlong	local03, local02
02a48     08 0C 06 F1 | 	add	local02, #8
02a4c     06 EB 01 FB | 	rdlong	result1, local02
02a50     08 0C 86 F1 | 	sub	local02, #8
02a54     02 EA CD F7 | 	test	result1, #2 wz
02a58     D0 00 90 AD |  if_e	jmp	#LR__0402
02a5c     01 0E 56 F2 | 	cmps	local03, #1 wc
02a60     20 01 90 CD |  if_b	jmp	#LR__0404
02a64     08 0A 06 F1 | 	add	local01, #8
02a68     05 EB 01 FB | 	rdlong	result1, local01
02a6c     08 0A 86 F1 | 	sub	local01, #8
02a70     40 EA CD F7 | 	test	result1, #64 wz
02a74     68 00 90 AD |  if_e	jmp	#LR__0401
02a78     08 0A 06 F1 | 	add	local01, #8
02a7c     05 05 02 FB | 	rdlong	arg03, local01
02a80     08 0A 86 F1 | 	sub	local01, #8
02a84     80 04 CE F7 | 	test	arg03, #128 wz
02a88     54 00 90 AD |  if_e	jmp	#LR__0400
02a8c     30 0A 06 F1 | 	add	local01, #48
02a90     05 11 02 FB | 	rdlong	local04, local01
02a94     08 13 02 F6 | 	mov	local05, local04
02a98     30 0A 86 F1 | 	sub	local01, #48
02a9c     13 12 46 F7 | 	zerox	local05, #19
02aa0     14 10 46 F0 | 	shr	local04, #20
02aa4     02 10 66 F0 | 	shl	local04, #2
02aa8     ED 10 02 F1 | 	add	local04, __methods__
02aac     08 11 02 FB | 	rdlong	local04, local04
02ab0     05 01 02 F6 | 	mov	arg01, local01
02ab4     00 02 06 F6 | 	mov	arg02, #0
02ab8     02 04 06 F6 | 	mov	arg03, #2
02abc     F1 14 02 F6 | 	mov	local06, objptr
02ac0     09 E3 01 F6 | 	mov	objptr, local05
02ac4     2D 10 62 FD | 	call	local04
02ac8     0A E3 01 F6 | 	mov	objptr, local06
02acc     08 0A 06 F1 | 	add	local01, #8
02ad0     05 15 02 FB | 	rdlong	local06, local01
02ad4     80 14 26 F5 | 	andn	local06, #128
02ad8     05 15 62 FC | 	wrlong	local06, local01
02adc     08 0A 86 F1 | 	sub	local01, #8
02ae0                 | LR__0400
02ae0                 | LR__0401
02ae0     18 0A 06 F1 | 	add	local01, #24
02ae4     05 11 02 FB | 	rdlong	local04, local01
02ae8     08 13 02 F6 | 	mov	local05, local04
02aec     18 0A 86 F1 | 	sub	local01, #24
02af0     13 12 46 F7 | 	zerox	local05, #19
02af4     14 10 46 F0 | 	shr	local04, #20
02af8     02 10 66 F0 | 	shl	local04, #2
02afc     ED 10 02 F1 | 	add	local04, __methods__
02b00     08 11 02 FB | 	rdlong	local04, local04
02b04     10 0C 06 F1 | 	add	local02, #16
02b08     06 03 02 FB | 	rdlong	arg02, local02
02b0c     10 0C 86 F1 | 	sub	local02, #16
02b10     05 01 02 F6 | 	mov	arg01, local01
02b14     07 05 02 F6 | 	mov	arg03, local03
02b18     F1 14 02 F6 | 	mov	local06, objptr
02b1c     09 E3 01 F6 | 	mov	objptr, local05
02b20     2D 10 62 FD | 	call	local04
02b24     0A E3 01 F6 | 	mov	objptr, local06
02b28     58 00 90 FD | 	jmp	#LR__0404
02b2c                 | LR__0402
02b2c     08 0C 06 F1 | 	add	local02, #8
02b30     06 15 02 FB | 	rdlong	local06, local02
02b34     08 0C 86 F1 | 	sub	local02, #8
02b38     01 14 CE F7 | 	test	local06, #1 wz
02b3c     00 0E 0E 52 |  if_ne	cmp	local03, #0 wz
02b40     40 00 90 AD |  if_e	jmp	#LR__0403
02b44     30 0A 06 F1 | 	add	local01, #48
02b48     05 11 02 FB | 	rdlong	local04, local01
02b4c     08 13 02 F6 | 	mov	local05, local04
02b50     30 0A 86 F1 | 	sub	local01, #48
02b54     13 12 46 F7 | 	zerox	local05, #19
02b58     14 10 46 F0 | 	shr	local04, #20
02b5c     02 10 66 F0 | 	shl	local04, #2
02b60     ED 10 02 F1 | 	add	local04, __methods__
02b64     08 11 02 FB | 	rdlong	local04, local04
02b68     05 01 02 F6 | 	mov	arg01, local01
02b6c     07 03 62 F6 | 	neg	arg02, local03
02b70     01 04 06 F6 | 	mov	arg03, #1
02b74     F1 14 02 F6 | 	mov	local06, objptr
02b78     09 E3 01 F6 | 	mov	objptr, local05
02b7c     2D 10 62 FD | 	call	local04
02b80     0A E3 01 F6 | 	mov	objptr, local06
02b84                 | LR__0403
02b84                 | LR__0404
02b84     06 01 68 FC | 	wrlong	#0, local02
02b88     04 0C 06 F1 | 	add	local02, #4
02b8c     06 01 68 FC | 	wrlong	#0, local02
02b90     04 0C 06 F1 | 	add	local02, #4
02b94     06 01 68 FC | 	wrlong	#0, local02
02b98     00 EA 05 F6 | 	mov	result1, #0
02b9c     A7 F0 03 F6 | 	mov	ptra, fp
02ba0     B2 00 A0 FD | 	call	#popregs_
02ba4                 | __system____default_flush_ret
02ba4     2D 00 64 FD | 	ret
02ba8                 | 
02ba8                 | __system____default_buffer_init
02ba8     02 4A 05 F6 | 	mov	COUNT_, #2
02bac     A8 00 A0 FD | 	call	#pushregs_
02bb0     00 0B 02 F6 | 	mov	local01, arg01
02bb4     05 0D 02 FB | 	rdlong	local02, local01
02bb8     05 01 02 F6 | 	mov	arg01, local01
02bbc     CC 01 B0 FD | 	call	#__system___isatty
02bc0     00 EA 0D F2 | 	cmp	result1, #0 wz
02bc4     06 0A 06 51 |  if_ne	add	local01, #6
02bc8     05 0B 58 5C |  if_ne	wrword	#5, local01
02bcc     06 0A 06 A1 |  if_e	add	local01, #6
02bd0     05 0D 58 AC |  if_e	wrword	#6, local01
02bd4     14 0C 06 F1 | 	add	local02, #20
02bd8     06 0B 02 F6 | 	mov	local01, local02
02bdc     04 0C 86 F1 | 	sub	local02, #4
02be0     06 0B 62 FC | 	wrlong	local01, local02
02be4     04 0C 86 F1 | 	sub	local02, #4
02be8     02 00 80 FF 
02bec     06 01 68 FC | 	wrlong	##1024, local02
02bf0     00 EA 05 F6 | 	mov	result1, #0
02bf4     A7 F0 03 F6 | 	mov	ptra, fp
02bf8     B2 00 A0 FD | 	call	#popregs_
02bfc                 | __system____default_buffer_init_ret
02bfc     2D 00 64 FD | 	ret
02c00                 | 
02c00                 | __system__stat
02c00     04 4A 05 F6 | 	mov	COUNT_, #4
02c04     A8 00 A0 FD | 	call	#pushregs_
02c08     01 0B 02 F6 | 	mov	local01, arg02
02c0c     84 E5 05 F1 | 	add	ptr___system__dat__, #388
02c10     F2 0C 02 F6 | 	mov	local02, ptr___system__dat__
02c14     00 03 02 F6 | 	mov	arg02, arg01
02c18     06 01 02 F6 | 	mov	arg01, local02
02c1c     00 04 06 F6 | 	mov	arg03, #0
02c20     84 E5 85 F1 | 	sub	ptr___system__dat__, #388
02c24     18 E7 BF FD | 	call	#__system____getvfsforfile
02c28     F5 0E 0A F6 | 	mov	local03, result1 wz
02c2c     10 00 90 AD |  if_e	jmp	#LR__0410
02c30     34 0E 06 F1 | 	add	local03, #52
02c34     07 05 0A FB | 	rdlong	arg03, local03 wz
02c38     34 0E 86 F1 | 	sub	local03, #52
02c3c     14 00 90 5D |  if_ne	jmp	#LR__0411
02c40                 | LR__0410
02c40     20 E4 05 F1 | 	add	ptr___system__dat__, #32
02c44     F2 20 68 FC | 	wrlong	#16, ptr___system__dat__
02c48     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
02c4c     01 EA 65 F6 | 	neg	result1, #1
02c50     68 00 90 FD | 	jmp	#LR__0412
02c54                 | LR__0411
02c54     05 01 02 F6 | 	mov	arg01, local01
02c58     00 02 06 F6 | 	mov	arg02, #0
02c5c     30 04 06 F6 | 	mov	arg03, #48
02c60     00 11 02 F6 | 	mov	local04, arg01
02c64     98 00 A0 FD | 	call	#\builtin_bytefill_
02c68     08 EB 01 F6 | 	mov	result1, local04
02c6c     06 01 CA FA | 	rdbyte	arg01, local02 wz
02c70     08 0A 06 A1 |  if_e	add	local01, #8
02c74     08 00 80 AF 
02c78     05 FF 6B AC |  if_e	wrlong	##4607, local01
02c7c     00 EA 05 A6 |  if_e	mov	result1, #0
02c80     38 00 90 AD |  if_e	jmp	#LR__0412
02c84     34 0E 06 F1 | 	add	local03, #52
02c88     07 0F 02 FB | 	rdlong	local03, local03
02c8c     07 11 02 F6 | 	mov	local04, local03
02c90     13 0E 46 F7 | 	zerox	local03, #19
02c94     14 10 46 F0 | 	shr	local04, #20
02c98     02 10 66 F0 | 	shl	local04, #2
02c9c     ED 10 02 F1 | 	add	local04, __methods__
02ca0     08 11 02 FB | 	rdlong	local04, local04
02ca4     06 01 02 F6 | 	mov	arg01, local02
02ca8     05 03 02 F6 | 	mov	arg02, local01
02cac     F1 0C 02 F6 | 	mov	local02, objptr
02cb0     07 E3 01 F6 | 	mov	objptr, local03
02cb4     2D 10 62 FD | 	call	local04
02cb8     06 E3 01 F6 | 	mov	objptr, local02
02cbc                 | LR__0412
02cbc     A7 F0 03 F6 | 	mov	ptra, fp
02cc0     B2 00 A0 FD | 	call	#popregs_
02cc4                 | __system__stat_ret
02cc4     2D 00 64 FD | 	ret
02cc8                 | 
02cc8                 | __system__close
02cc8     0A 00 16 F2 | 	cmp	arg01, #10 wc
02ccc     20 E4 05 31 |  if_ae	add	ptr___system__dat__, #32
02cd0     F2 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
02cd4     20 E4 85 31 |  if_ae	sub	ptr___system__dat__, #32
02cd8     01 EA 65 36 |  if_ae	neg	result1, #1
02cdc     20 00 90 3D |  if_ae	jmp	#LR__0420
02ce0     34 00 06 FD | 	qmul	arg01, #52
02ce4     02 00 00 FF 
02ce8     20 E5 05 F1 | 	add	ptr___system__dat__, ##1312
02cec     18 00 62 FD | 	getqx	arg01
02cf0     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
02cf4     02 00 00 FF 
02cf8     20 E5 85 F1 | 	sub	ptr___system__dat__, ##1312
02cfc     88 F9 BF FD | 	call	#__system___closeraw
02d00                 | LR__0420
02d00                 | __system__close_ret
02d00     2D 00 64 FD | 	ret
02d04                 | 
02d04                 | __system___ioctl
02d04     03 4A 05 F6 | 	mov	COUNT_, #3
02d08     A8 00 A0 FD | 	call	#pushregs_
02d0c     00 00 4E F2 | 	cmps	arg01, #0 wz
02d10     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
02d14     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
02d18     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
02d1c     01 EA 65 A6 |  if_e	neg	result1, #1
02d20     5C 00 90 AD |  if_e	jmp	#LR__0431
02d24     28 00 06 F1 | 	add	arg01, #40
02d28     00 0B 02 FB | 	rdlong	local01, arg01
02d2c     05 0D 02 F6 | 	mov	local02, local01
02d30     28 00 86 F1 | 	sub	arg01, #40
02d34     13 0C 46 F7 | 	zerox	local02, #19
02d38     14 0A 46 F0 | 	shr	local01, #20
02d3c     02 0A 66 F0 | 	shl	local01, #2
02d40     ED 0A 02 F1 | 	add	local01, __methods__
02d44     05 0B 02 FB | 	rdlong	local01, local01
02d48     F1 0E 02 F6 | 	mov	local03, objptr
02d4c     06 E3 01 F6 | 	mov	objptr, local02
02d50     2D 0A 62 FD | 	call	local01
02d54     07 E3 01 F6 | 	mov	objptr, local03
02d58     F5 00 0A F6 | 	mov	arg01, result1 wz
02d5c     1C 00 90 AD |  if_e	jmp	#LR__0430
02d60     00 00 4E F2 | 	cmps	arg01, #0 wz
02d64     20 E4 05 F1 | 	add	ptr___system__dat__, #32
02d68     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
02d6c     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
02d70     01 EA 65 56 |  if_ne	neg	result1, #1
02d74     00 EA 05 A6 |  if_e	mov	result1, #0
02d78     04 00 90 FD | 	jmp	#LR__0431
02d7c                 | LR__0430
02d7c     00 EA 05 F6 | 	mov	result1, #0
02d80                 | LR__0431
02d80     A7 F0 03 F6 | 	mov	ptra, fp
02d84     B2 00 A0 FD | 	call	#popregs_
02d88                 | __system___ioctl_ret
02d88     2D 00 64 FD | 	ret
02d8c                 | 
02d8c                 | __system___isatty
02d8c     00 4A 05 F6 | 	mov	COUNT_, #0
02d90     A8 00 A0 FD | 	call	#pushregs_
02d94     0C F0 07 F1 | 	add	ptra, #12
02d98     04 4E 05 F1 | 	add	fp, #4
02d9c     A7 00 62 FC | 	wrlong	arg01, fp
02da0     04 4E 05 F1 | 	add	fp, #4
02da4     A7 04 02 F6 | 	mov	arg03, fp
02da8     08 4E 85 F1 | 	sub	fp, #8
02dac     00 03 06 F6 | 	mov	arg02, #256
02db0     50 FF BF FD | 	call	#__system___ioctl
02db4     00 EA 0D F2 | 	cmp	result1, #0 wz
02db8     01 EA 05 A6 |  if_e	mov	result1, #1
02dbc     00 EA 05 56 |  if_ne	mov	result1, #0
02dc0     A7 F0 03 F6 | 	mov	ptra, fp
02dc4     B2 00 A0 FD | 	call	#popregs_
02dc8                 | __system___isatty_ret
02dc8     2D 00 64 FD | 	ret
02dcc                 | 
02dcc                 | __system____getftab
02dcc     0A 00 16 F2 | 	cmp	arg01, #10 wc
02dd0     34 00 06 CD |  if_b	qmul	arg01, #52
02dd4     00 EA 05 36 |  if_ae	mov	result1, #0
02dd8     02 00 00 CF 
02ddc     20 E5 05 C1 |  if_b	add	ptr___system__dat__, ##1312
02de0     18 EA 61 CD |  if_b	getqx	result1
02de4     F2 EA 01 C1 |  if_b	add	result1, ptr___system__dat__
02de8     02 00 00 CF 
02dec     20 E5 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
02df0                 | __system____getftab_ret
02df0     2D 00 64 FD | 	ret
02df4                 | 
02df4                 | __system__strncpy
02df4     00 EF 01 F6 | 	mov	_var01, arg01
02df8                 | LR__0440
02df8     01 04 86 F1 | 	sub	arg03, #1
02dfc     00 04 56 F2 | 	cmps	arg03, #0 wc
02e00     18 00 90 CD |  if_b	jmp	#LR__0441
02e04     01 EB C1 FA | 	rdbyte	result1, arg02
02e08     F7 EA 41 FC | 	wrbyte	result1, _var01
02e0c     01 02 06 F1 | 	add	arg02, #1
02e10     F7 EA C9 FA | 	rdbyte	result1, _var01 wz
02e14     01 EE 05 F1 | 	add	_var01, #1
02e18     DC FF 9F 5D |  if_ne	jmp	#LR__0440
02e1c                 | LR__0441
02e1c     97 0C 48 FB | 	callpa	#(@LR__0443-@LR__0442)>>2,fcache_load_ptr_
02e20                 | LR__0442
02e20     01 04 86 F1 | 	sub	arg03, #1
02e24     00 04 56 F2 | 	cmps	arg03, #0 wc
02e28     F7 F0 01 36 |  if_ae	mov	_var02, _var01
02e2c     01 EE 05 31 |  if_ae	add	_var01, #1
02e30     F8 00 48 3C |  if_ae	wrbyte	#0, _var02
02e34     E8 FF 9F 3D |  if_ae	jmp	#LR__0442
02e38                 | LR__0443
02e38     00 EB 01 F6 | 	mov	result1, arg01
02e3c                 | __system__strncpy_ret
02e3c     2D 00 64 FD | 	ret
02e40                 | 
02e40                 | __system__strncat
02e40     00 02 4E F2 | 	cmps	arg02, #0 wz
02e44     50 00 90 AD |  if_e	jmp	#LR__0454
02e48     01 04 16 F2 | 	cmp	arg03, #1 wc
02e4c     48 00 90 CD |  if_b	jmp	#LR__0454
02e50     00 EF 01 F6 | 	mov	_var01, arg01
02e54     97 1E 48 FB | 	callpa	#(@LR__0452-@LR__0450)>>2,fcache_load_ptr_
02e58                 | LR__0450
02e58     F7 EA C9 FA | 	rdbyte	result1, _var01 wz
02e5c     01 EE 05 51 |  if_ne	add	_var01, #1
02e60     F4 FF 9F 5D |  if_ne	jmp	#LR__0450
02e64     02 F1 01 F6 | 	mov	_var02, arg03
02e68                 | LR__0451
02e68     01 F3 C1 FA | 	rdbyte	_var03, arg02
02e6c     F9 F4 01 F6 | 	mov	_var04, _var03
02e70     07 F4 4D F7 | 	zerox	_var04, #7 wz
02e74     01 02 06 F1 | 	add	arg02, #1
02e78     18 00 90 AD |  if_e	jmp	#LR__0453
02e7c     01 F0 85 F1 | 	sub	_var02, #1
02e80     00 F0 55 F2 | 	cmps	_var02, #0 wc
02e84     F7 F4 01 36 |  if_ae	mov	_var04, _var01
02e88     01 EE 05 31 |  if_ae	add	_var01, #1
02e8c     FA F2 41 3C |  if_ae	wrbyte	_var03, _var04
02e90     D4 FF 9F 3D |  if_ae	jmp	#LR__0451
02e94                 | LR__0452
02e94                 | LR__0453
02e94     F7 00 48 FC | 	wrbyte	#0, _var01
02e98                 | LR__0454
02e98     00 EB 01 F6 | 	mov	result1, arg01
02e9c                 | __system__strncat_ret
02e9c     2D 00 64 FD | 	ret
02ea0                 | 
02ea0                 | __system__strncmp
02ea0     00 EF 09 F6 | 	mov	_var01, arg01 wz
02ea4     14 00 90 5D |  if_ne	jmp	#LR__0460
02ea8     00 02 0E F2 | 	cmp	arg02, #0 wz
02eac     01 F0 65 56 |  if_ne	neg	_var02, #1
02eb0     00 F0 05 A6 |  if_e	mov	_var02, #0
02eb4     F8 EA 01 F6 | 	mov	result1, _var02
02eb8     74 00 90 FD | 	jmp	#__system__strncmp_ret
02ebc                 | LR__0460
02ebc     00 02 0E F2 | 	cmp	arg02, #0 wz
02ec0     01 EA 05 A6 |  if_e	mov	result1, #1
02ec4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
02ec8     02 F3 01 F6 | 	mov	_var03, arg03
02ecc     97 16 48 FB | 	callpa	#(@LR__0462-@LR__0461)>>2,fcache_load_ptr_
02ed0                 | LR__0461
02ed0     F7 F4 C1 FA | 	rdbyte	_var04, _var01
02ed4     01 F7 01 F6 | 	mov	_var05, arg02
02ed8     FB F8 C1 FA | 	rdbyte	_var06, _var05
02edc     01 F2 85 F1 | 	sub	_var03, #1
02ee0     00 F2 55 F2 | 	cmps	_var03, #0 wc
02ee4     01 EE 05 F1 | 	add	_var01, #1
02ee8     01 02 06 F1 | 	add	arg02, #1
02eec     00 F4 0D 32 |  if_ae	cmp	_var04, #0 wz
02ef0     08 00 90 2D |  if_nc_and_z	jmp	#LR__0463
02ef4     FC F4 09 32 |  if_ae	cmp	_var04, _var06 wz
02ef8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__0461
02efc                 | LR__0462
02efc                 | LR__0463
02efc     00 F2 55 F2 | 	cmps	_var03, #0 wc
02f00     00 EA 05 C6 |  if_b	mov	result1, #0
02f04     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
02f08     FC F4 09 F2 | 	cmp	_var04, _var06 wz
02f0c     00 EA 05 A6 |  if_e	mov	result1, #0
02f10     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
02f14     00 F4 0D F2 | 	cmp	_var04, #0 wz
02f18     01 EA 65 A6 |  if_e	neg	result1, #1
02f1c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
02f20     00 F8 0D F2 | 	cmp	_var06, #0 wz
02f24     01 EA 05 A6 |  if_e	mov	result1, #1
02f28     FA EA 01 56 |  if_ne	mov	result1, _var04
02f2c     FC EA 81 51 |  if_ne	sub	result1, _var06
02f30                 | __system__strncmp_ret
02f30     2D 00 64 FD | 	ret
02f34                 | 
02f34                 | __system____root_opendir
02f34     64 E4 05 F1 | 	add	ptr___system__dat__, #100
02f38     04 00 06 F1 | 	add	arg01, #4
02f3c     00 E5 61 FC | 	wrlong	ptr___system__dat__, arg01
02f40     00 EA 05 F6 | 	mov	result1, #0
02f44     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
02f48                 | __system____root_opendir_ret
02f48     2D 00 64 FD | 	ret
02f4c                 | 
02f4c                 | __system____root_readdir
02f4c     03 4A 05 F6 | 	mov	COUNT_, #3
02f50     A8 00 A0 FD | 	call	#pushregs_
02f54     00 0B 02 F6 | 	mov	local01, arg01
02f58     01 0D 02 F6 | 	mov	local02, arg02
02f5c     04 0A 06 F1 | 	add	local01, #4
02f60     05 0F 02 FB | 	rdlong	local03, local01
02f64     04 0A 86 F1 | 	sub	local01, #4
02f68                 | LR__0470
02f68     74 E4 05 F1 | 	add	ptr___system__dat__, #116
02f6c     F2 0E 0A F2 | 	cmp	local03, ptr___system__dat__ wz
02f70     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
02f74     01 EA 65 A6 |  if_e	neg	result1, #1
02f78     48 00 90 AD |  if_e	jmp	#LR__0471
02f7c     07 05 0A FB | 	rdlong	arg03, local03 wz
02f80     04 0E 06 A1 |  if_e	add	local03, #4
02f84     E0 FF 9F AD |  if_e	jmp	#LR__0470
02f88     07 03 02 FB | 	rdlong	arg02, local03
02f8c     01 02 06 F1 | 	add	arg02, #1
02f90     06 01 02 F6 | 	mov	arg01, local02
02f94     40 04 06 F6 | 	mov	arg03, #64
02f98     58 FE BF FD | 	call	#__system__strncpy
02f9c     50 0C 06 F1 | 	add	local02, #80
02fa0     06 03 48 FC | 	wrbyte	#1, local02
02fa4     08 0C 86 F1 | 	sub	local02, #8
02fa8     06 01 68 FC | 	wrlong	#0, local02
02fac     04 0C 06 F1 | 	add	local02, #4
02fb0     06 01 68 FC | 	wrlong	#0, local02
02fb4     04 0E 06 F1 | 	add	local03, #4
02fb8     04 0A 06 F1 | 	add	local01, #4
02fbc     05 0F 62 FC | 	wrlong	local03, local01
02fc0     00 EA 05 F6 | 	mov	result1, #0
02fc4                 | LR__0471
02fc4     A7 F0 03 F6 | 	mov	ptra, fp
02fc8     B2 00 A0 FD | 	call	#popregs_
02fcc                 | __system____root_readdir_ret
02fcc     2D 00 64 FD | 	ret
02fd0                 | 
02fd0                 | __system____root_closedir
02fd0     00 EA 05 F6 | 	mov	result1, #0
02fd4                 | __system____root_closedir_ret
02fd4     2D 00 64 FD | 	ret
02fd8                 | 
02fd8                 | __system____root_stat
02fd8     01 EF 01 F6 | 	mov	_var01, arg02
02fdc     F7 00 02 F6 | 	mov	arg01, _var01
02fe0     00 02 06 F6 | 	mov	arg02, #0
02fe4     30 04 06 F6 | 	mov	arg03, #48
02fe8     98 00 A0 FD | 	call	#\builtin_bytefill_
02fec     08 EE 05 F1 | 	add	_var01, #8
02ff0     08 00 80 FF 
02ff4     F7 FE 6B FC | 	wrlong	##4607, _var01
02ff8     00 EA 05 F6 | 	mov	result1, #0
02ffc                 | __system____root_stat_ret
02ffc     2D 00 64 FD | 	ret
03000                 | 
03000                 | __system___normalizeName
03000     00 EE 05 F6 | 	mov	_var01, #0
03004     00 F1 01 F6 | 	mov	_var02, arg01
03008     F8 F2 01 F6 | 	mov	_var03, _var02
0300c                 | LR__0480
0300c     F8 F4 C9 FA | 	rdbyte	_var04, _var02 wz
03010     5C 01 90 AD |  if_e	jmp	#LR__0499
03014     00 EE 0D F2 | 	cmp	_var01, #0 wz
03018     F9 F4 01 56 |  if_ne	mov	_var04, _var03
0301c     01 F2 05 51 |  if_ne	add	_var03, #1
03020     FA 5E 48 5C |  if_ne	wrbyte	#47, _var04
03024     00 EE 05 56 |  if_ne	mov	_var01, #0
03028     F8 F4 C1 FA | 	rdbyte	_var04, _var02
0302c     2E F4 0D F2 | 	cmp	_var04, #46 wz
03030     D8 00 90 5D |  if_ne	jmp	#LR__0492
03034     01 F0 05 F1 | 	add	_var02, #1
03038     F8 F4 C1 FA | 	rdbyte	_var04, _var02
0303c     01 F0 85 F1 | 	sub	_var02, #1
03040     2F F4 0D F2 | 	cmp	_var04, #47 wz
03044     18 00 90 AD |  if_e	jmp	#LR__0481
03048     01 F0 05 F1 | 	add	_var02, #1
0304c     F8 F6 C1 FA | 	rdbyte	_var05, _var02
03050     01 F0 85 F1 | 	sub	_var02, #1
03054     FB F8 01 F6 | 	mov	_var06, _var05
03058     07 F8 4D F7 | 	zerox	_var06, #7 wz
0305c     10 00 90 5D |  if_ne	jmp	#LR__0482
03060                 | LR__0481
03060     F8 FA 01 F6 | 	mov	_var07, _var02
03064     01 FA 05 F1 | 	add	_var07, #1
03068     FD F0 01 F6 | 	mov	_var02, _var07
0306c     E0 00 90 FD | 	jmp	#LR__0496
03070                 | LR__0482
03070     01 F0 05 F1 | 	add	_var02, #1
03074     F8 FA C1 FA | 	rdbyte	_var07, _var02
03078     01 F0 85 F1 | 	sub	_var02, #1
0307c     FD F4 E1 F8 | 	getbyte	_var04, _var07, #0
03080     2E F4 0D F2 | 	cmp	_var04, #46 wz
03084     84 00 90 5D |  if_ne	jmp	#LR__0491
03088     02 F0 05 F1 | 	add	_var02, #2
0308c     F8 FA C1 FA | 	rdbyte	_var07, _var02
03090     02 F0 85 F1 | 	sub	_var02, #2
03094     FD F4 E1 F8 | 	getbyte	_var04, _var07, #0
03098     2F F4 0D F2 | 	cmp	_var04, #47 wz
0309c     18 00 90 AD |  if_e	jmp	#LR__0483
030a0     02 F0 05 F1 | 	add	_var02, #2
030a4     F8 F6 C1 FA | 	rdbyte	_var05, _var02
030a8     02 F0 85 F1 | 	sub	_var02, #2
030ac     FB F8 01 F6 | 	mov	_var06, _var05
030b0     07 F8 4D F7 | 	zerox	_var06, #7 wz
030b4     54 00 90 5D |  if_ne	jmp	#LR__0490
030b8                 | LR__0483
030b8     02 F0 05 F1 | 	add	_var02, #2
030bc     00 F3 59 F2 | 	cmps	_var03, arg01 wcz
030c0     40 00 90 ED |  if_be	jmp	#LR__0489
030c4     F9 FC 01 F6 | 	mov	_var08, _var03
030c8     01 FC 85 F1 | 	sub	_var08, #1
030cc                 | LR__0484
030cc     FE F4 C1 FA | 	rdbyte	_var04, _var08
030d0     2F F4 0D F2 | 	cmp	_var04, #47 wz
030d4     0C 00 90 5D |  if_ne	jmp	#LR__0485
030d8     00 FD 59 F2 | 	cmps	_var08, arg01 wcz
030dc     01 FC 85 11 |  if_a	sub	_var08, #1
030e0     E8 FF 9F 1D |  if_a	jmp	#LR__0484
030e4                 | LR__0485
030e4     97 0C 48 FB | 	callpa	#(@LR__0487-@LR__0486)>>2,fcache_load_ptr_
030e8                 | LR__0486
030e8     00 FD 59 F2 | 	cmps	_var08, arg01 wcz
030ec     10 00 90 ED |  if_be	jmp	#LR__0488
030f0     FE F4 C1 FA | 	rdbyte	_var04, _var08
030f4     2F F4 0D F2 | 	cmp	_var04, #47 wz
030f8     01 FC 85 51 |  if_ne	sub	_var08, #1
030fc     E8 FF 9F 5D |  if_ne	jmp	#LR__0486
03100                 | LR__0487
03100                 | LR__0488
03100     FE F2 01 F6 | 	mov	_var03, _var08
03104                 | LR__0489
03104     01 EE 05 F6 | 	mov	_var01, #1
03108     44 00 90 FD | 	jmp	#LR__0496
0310c                 | LR__0490
0310c                 | LR__0491
0310c                 | LR__0492
0310c     97 18 48 FB | 	callpa	#(@LR__0494-@LR__0493)>>2,fcache_load_ptr_
03110                 | LR__0493
03110     F8 F4 C9 FA | 	rdbyte	_var04, _var02 wz
03114     F8 FA C1 5A |  if_ne	rdbyte	_var07, _var02
03118     2F FA 0D 52 |  if_ne	cmp	_var07, #47 wz
0311c     20 00 90 AD |  if_e	jmp	#LR__0495
03120     F8 F8 01 F6 | 	mov	_var06, _var02
03124     F8 F6 01 F6 | 	mov	_var05, _var02
03128     01 F6 05 F1 | 	add	_var05, #1
0312c     FC FE C1 FA | 	rdbyte	_var09, _var06
03130     FB F0 01 F6 | 	mov	_var02, _var05
03134     F9 FE 41 FC | 	wrbyte	_var09, _var03
03138     01 F2 05 F1 | 	add	_var03, #1
0313c     D0 FF 9F FD | 	jmp	#LR__0493
03140                 | LR__0494
03140                 | LR__0495
03140     F8 F4 C1 FA | 	rdbyte	_var04, _var02
03144     2F F4 0D F2 | 	cmp	_var04, #47 wz
03148     C0 FE 9F 5D |  if_ne	jmp	#LR__0480
0314c     01 EE 05 F6 | 	mov	_var01, #1
03150                 | LR__0496
03150     97 0C 48 FB | 	callpa	#(@LR__0498-@LR__0497)>>2,fcache_load_ptr_
03154                 | LR__0497
03154     F8 F4 C1 FA | 	rdbyte	_var04, _var02
03158     2F F4 0D F2 | 	cmp	_var04, #47 wz
0315c     F8 FA 01 A6 |  if_e	mov	_var07, _var02
03160     01 FA 05 A1 |  if_e	add	_var07, #1
03164     FD F0 01 A6 |  if_e	mov	_var02, _var07
03168     E8 FF 9F AD |  if_e	jmp	#LR__0497
0316c                 | LR__0498
0316c     9C FE 9F FD | 	jmp	#LR__0480
03170                 | LR__0499
03170     F9 00 48 FC | 	wrbyte	#0, _var03
03174                 | __system___normalizeName_ret
03174     2D 00 64 FD | 	ret
03178                 | 
03178                 | __system___strrev
03178     00 EF C9 FA | 	rdbyte	_var01, arg01 wz
0317c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
03180     00 F1 01 F6 | 	mov	_var02, arg01
03184     97 1A 48 FB | 	callpa	#(@LR__0502-@LR__0500)>>2,fcache_load_ptr_
03188                 | LR__0500
03188     F8 EE C9 FA | 	rdbyte	_var01, _var02 wz
0318c     01 F0 05 51 |  if_ne	add	_var02, #1
03190     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
03194     01 F0 85 F1 | 	sub	_var02, #1
03198                 | LR__0501
03198     00 F1 59 F2 | 	cmps	_var02, arg01 wcz
0319c     1C 00 90 ED |  if_be	jmp	#LR__0503
031a0     00 EF C1 FA | 	rdbyte	_var01, arg01
031a4     F8 F2 C1 FA | 	rdbyte	_var03, _var02
031a8     00 F3 41 FC | 	wrbyte	_var03, arg01
031ac     F8 EE 41 FC | 	wrbyte	_var01, _var02
031b0     01 00 06 F1 | 	add	arg01, #1
031b4     01 F0 85 F1 | 	sub	_var02, #1
031b8     DC FF 9F FD | 	jmp	#LR__0501
031bc                 | LR__0502
031bc                 | LR__0503
031bc                 | __system___strrev_ret
031bc     2D 00 64 FD | 	ret
031c0                 | 
031c0                 | __system___fmtpad
031c0     06 4A 05 F6 | 	mov	COUNT_, #6
031c4     A8 00 A0 FD | 	call	#pushregs_
031c8     00 0B 02 F6 | 	mov	local01, arg01
031cc     01 0D 02 F6 | 	mov	local02, arg02
031d0     02 0F 02 F6 | 	mov	local03, arg03
031d4     06 01 EA F8 | 	getbyte	arg01, local02, #1
031d8     16 0C 46 F0 | 	shr	local02, #22
031dc     03 0C 0E F5 | 	and	local02, #3 wz
031e0     00 10 06 F6 | 	mov	local04, #0
031e4     01 0C 06 A6 |  if_e	mov	local02, #1
031e8     03 0D CA F7 | 	test	local02, arg04 wz
031ec     00 EA 05 A6 |  if_e	mov	result1, #0
031f0     88 00 90 AD |  if_e	jmp	#LR__0513
031f4     00 0F C2 F2 | 	subr	local03, arg01
031f8     01 0E 56 F2 | 	cmps	local03, #1 wc
031fc     00 EA 05 C6 |  if_b	mov	result1, #0
03200     78 00 90 CD |  if_b	jmp	#LR__0513
03204     03 0C 0E F2 | 	cmp	local02, #3 wz
03208     18 00 90 5D |  if_ne	jmp	#LR__0510
0320c     01 06 0E F2 | 	cmp	arg04, #1 wz
03210     6E 0C 62 FD | 	wrz	local02
03214     06 0F 02 F1 | 	add	local03, local02
03218     07 0F 52 F6 | 	abs	local03, local03 wc
0321c     01 0E 46 F0 | 	shr	local03, #1
03220     07 0F 82 F6 | 	negc	local03, local03
03224                 | LR__0510
03224     01 0E 56 F2 | 	cmps	local03, #1 wc
03228     4C 00 90 CD |  if_b	jmp	#LR__0512
0322c     07 13 02 F6 | 	mov	local05, local03
03230                 | LR__0511
03230     05 0D 02 F6 | 	mov	local02, local01
03234     05 15 02 F6 | 	mov	local06, local01
03238     13 0C 46 F7 | 	zerox	local02, #19
0323c     14 14 46 F0 | 	shr	local06, #20
03240     02 14 66 F0 | 	shl	local06, #2
03244     ED 14 02 F1 | 	add	local06, __methods__
03248     0A 15 02 FB | 	rdlong	local06, local06
0324c     20 00 06 F6 | 	mov	arg01, #32
03250     F1 0E 02 F6 | 	mov	local03, objptr
03254     06 E3 01 F6 | 	mov	objptr, local02
03258     2D 14 62 FD | 	call	local06
0325c     07 E3 01 F6 | 	mov	objptr, local03
03260     F5 14 02 F6 | 	mov	local06, result1
03264     00 14 56 F2 | 	cmps	local06, #0 wc
03268     0A EB 01 C6 |  if_b	mov	result1, local06
0326c     0C 00 90 CD |  if_b	jmp	#LR__0513
03270     0A 11 02 F1 | 	add	local04, local06
03274     EE 13 6E FB | 	djnz	local05, #LR__0511
03278                 | LR__0512
03278     08 EB 01 F6 | 	mov	result1, local04
0327c                 | LR__0513
0327c     A7 F0 03 F6 | 	mov	ptra, fp
03280     B2 00 A0 FD | 	call	#popregs_
03284                 | __system___fmtpad_ret
03284     2D 00 64 FD | 	ret
03288                 | 
03288                 | __system___uitoa
03288     04 4A 05 F6 | 	mov	COUNT_, #4
0328c     A8 00 A0 FD | 	call	#pushregs_
03290     00 0B 02 F6 | 	mov	local01, arg01
03294     00 08 4E F2 | 	cmps	arg05, #0 wz
03298     05 09 02 F6 | 	mov	arg05, local01
0329c     00 0C 06 F6 | 	mov	local02, #0
032a0     37 0E 06 56 |  if_ne	mov	local03, #55
032a4     57 0E 06 A6 |  if_e	mov	local03, #87
032a8                 | LR__0520
032a8     02 03 12 FD | 	qdiv	arg02, arg03
032ac     19 10 62 FD | 	getqy	local04
032b0     02 03 12 FD | 	qdiv	arg02, arg03
032b4     0A 10 16 F2 | 	cmp	local04, #10 wc
032b8     30 10 06 C1 |  if_b	add	local04, #48
032bc     07 11 02 31 |  if_ae	add	local04, local03
032c0     04 11 42 FC | 	wrbyte	local04, arg05
032c4     01 08 06 F1 | 	add	arg05, #1
032c8     01 0C 06 F1 | 	add	local02, #1
032cc     18 02 62 FD | 	getqx	arg02
032d0     00 02 0E F2 | 	cmp	arg02, #0 wz
032d4     D0 FF 9F 5D |  if_ne	jmp	#LR__0520
032d8     03 0D 12 F2 | 	cmp	local02, arg04 wc
032dc     C8 FF 9F CD |  if_b	jmp	#LR__0520
032e0     04 01 48 FC | 	wrbyte	#0, arg05
032e4     05 01 02 F6 | 	mov	arg01, local01
032e8     8C FE BF FD | 	call	#__system___strrev
032ec     06 EB 01 F6 | 	mov	result1, local02
032f0     A7 F0 03 F6 | 	mov	ptra, fp
032f4     B2 00 A0 FD | 	call	#popregs_
032f8                 | __system___uitoa_ret
032f8     2D 00 64 FD | 	ret
032fc                 | 
032fc                 | __system___gettxfunc
032fc     01 4A 05 F6 | 	mov	COUNT_, #1
03300     A8 00 A0 FD | 	call	#pushregs_
03304     C4 FA BF FD | 	call	#__system____getftab
03308     F5 0A 0A F6 | 	mov	local01, result1 wz
0330c     10 00 90 AD |  if_e	jmp	#LR__0530
03310     08 0A 06 F1 | 	add	local01, #8
03314     05 03 0A FB | 	rdlong	arg02, local01 wz
03318     08 0A 86 F1 | 	sub	local01, #8
0331c     08 00 90 5D |  if_ne	jmp	#LR__0531
03320                 | LR__0530
03320     00 EA 05 F6 | 	mov	result1, #0
03324     08 00 90 FD | 	jmp	#LR__0532
03328                 | LR__0531
03328     34 0A 26 F4 | 	bith	local01, #52
0332c     05 EB 01 F6 | 	mov	result1, local01
03330                 | LR__0532
03330     A7 F0 03 F6 | 	mov	ptra, fp
03334     B2 00 A0 FD | 	call	#popregs_
03338                 | __system___gettxfunc_ret
03338     2D 00 64 FD | 	ret
0333c                 | 
0333c                 | __system___getiolock_0121
0333c     01 4A 05 F6 | 	mov	COUNT_, #1
03340     A8 00 A0 FD | 	call	#pushregs_
03344     84 FA BF FD | 	call	#__system____getftab
03348     F5 0A 0A F6 | 	mov	local01, result1 wz
0334c     10 00 90 AD |  if_e	jmp	#LR__0540
03350     08 0A 06 F1 | 	add	local01, #8
03354     05 EB 09 FB | 	rdlong	result1, local01 wz
03358     08 0A 86 F1 | 	sub	local01, #8
0335c     18 00 90 5D |  if_ne	jmp	#LR__0541
03360                 | LR__0540
03360     01 00 00 FF 
03364     D4 E4 05 F1 | 	add	ptr___system__dat__, ##724
03368     F2 EA 01 F6 | 	mov	result1, ptr___system__dat__
0336c     01 00 00 FF 
03370     D4 E4 85 F1 | 	sub	ptr___system__dat__, ##724
03374     08 00 90 FD | 	jmp	#LR__0542
03378                 | LR__0541
03378     0C 0A 06 F1 | 	add	local01, #12
0337c     05 EB 01 F6 | 	mov	result1, local01
03380                 | LR__0542
03380     A7 F0 03 F6 | 	mov	ptra, fp
03384     B2 00 A0 FD | 	call	#popregs_
03388                 | __system___getiolock_0121_ret
03388     2D 00 64 FD | 	ret
0338c                 | 
0338c                 | __system___rxtxioctl_0188
0338c     00 03 0E F2 | 	cmp	arg02, #256 wz
03390     0C 00 90 AD |  if_e	jmp	#LR__0550
03394     01 03 0E F2 | 	cmp	arg02, #257 wz
03398     1C 00 90 AD |  if_e	jmp	#LR__0551
0339c     30 00 90 FD | 	jmp	#LR__0552
033a0                 | LR__0550
033a0     08 E4 05 F1 | 	add	ptr___system__dat__, #8
033a4     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
033a8     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
033ac     02 EB 61 FC | 	wrlong	result1, arg03
033b0     00 EA 05 F6 | 	mov	result1, #0
033b4     28 00 90 FD | 	jmp	#LR__0553
033b8                 | LR__0551
033b8     02 01 02 FB | 	rdlong	arg01, arg03
033bc     08 E4 05 F1 | 	add	ptr___system__dat__, #8
033c0     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
033c4     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
033c8     00 EA 05 F6 | 	mov	result1, #0
033cc     10 00 90 FD | 	jmp	#LR__0553
033d0                 | LR__0552
033d0     20 E4 05 F1 | 	add	ptr___system__dat__, #32
033d4     F2 14 68 FC | 	wrlong	#10, ptr___system__dat__
033d8     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
033dc     01 EA 65 F6 | 	neg	result1, #1
033e0                 | LR__0553
033e0                 | __system___rxtxioctl_0188_ret
033e0     2D 00 64 FD | 	ret
033e4                 | 
033e4                 | __system____dummy_flush_0189
033e4     00 EA 05 F6 | 	mov	result1, #0
033e8                 | __system____dummy_flush_0189_ret
033e8     2D 00 64 FD | 	ret
033ec                 | 
033ec                 | __system____default_filbuf
033ec     04 4A 05 F6 | 	mov	COUNT_, #4
033f0     A8 00 A0 FD | 	call	#pushregs_
033f4     00 0B 02 F6 | 	mov	local01, arg01
033f8     05 0D 02 FB | 	rdlong	local02, local01
033fc     0C 0C 06 F1 | 	add	local02, #12
03400     06 EB 09 FB | 	rdlong	result1, local02 wz
03404     0C 0C 86 F1 | 	sub	local02, #12
03408     20 00 90 5D |  if_ne	jmp	#LR__0560
0340c     14 0C 06 F1 | 	add	local02, #20
03410     06 EB 01 F6 | 	mov	result1, local02
03414     04 0C 86 F1 | 	sub	local02, #4
03418     06 EB 61 FC | 	wrlong	result1, local02
0341c     04 0C 86 F1 | 	sub	local02, #4
03420     02 00 80 FF 
03424     06 01 68 FC | 	wrlong	##1024, local02
03428     0C 0C 86 F1 | 	sub	local02, #12
0342c                 | LR__0560
0342c     14 0A 06 F1 | 	add	local01, #20
03430     05 0F 02 FB | 	rdlong	local03, local01
03434     07 11 02 F6 | 	mov	local04, local03
03438     14 0A 86 F1 | 	sub	local01, #20
0343c     13 10 46 F7 | 	zerox	local04, #19
03440     14 0E 46 F0 | 	shr	local03, #20
03444     02 0E 66 F0 | 	shl	local03, #2
03448     ED 0E 02 F1 | 	add	local03, __methods__
0344c     07 0F 02 FB | 	rdlong	local03, local03
03450     10 0C 06 F1 | 	add	local02, #16
03454     06 03 02 FB | 	rdlong	arg02, local02
03458     04 0C 86 F1 | 	sub	local02, #4
0345c     06 05 02 FB | 	rdlong	arg03, local02
03460     0C 0C 86 F1 | 	sub	local02, #12
03464     05 01 02 F6 | 	mov	arg01, local01
03468     F1 0A 02 F6 | 	mov	local01, objptr
0346c     08 E3 01 F6 | 	mov	objptr, local04
03470     2D 0E 62 FD | 	call	local03
03474     05 E3 01 F6 | 	mov	objptr, local01
03478     F5 10 02 F6 | 	mov	local04, result1
0347c     00 10 56 F2 | 	cmps	local04, #0 wc
03480     01 EA 65 C6 |  if_b	neg	result1, #1
03484     28 00 90 CD |  if_b	jmp	#LR__0561
03488     06 11 62 FC | 	wrlong	local04, local02
0348c     10 0C 06 F1 | 	add	local02, #16
03490     06 0F 02 FB | 	rdlong	local03, local02
03494     0C 0C 86 F1 | 	sub	local02, #12
03498     06 0F 62 FC | 	wrlong	local03, local02
0349c     04 0C 06 F1 | 	add	local02, #4
034a0     06 0F 02 FB | 	rdlong	local03, local02
034a4     01 0E 46 F5 | 	or	local03, #1
034a8     06 0F 62 FC | 	wrlong	local03, local02
034ac     08 EB 01 F6 | 	mov	result1, local04
034b0                 | LR__0561
034b0     A7 F0 03 F6 | 	mov	ptra, fp
034b4     B2 00 A0 FD | 	call	#popregs_
034b8                 | __system____default_filbuf_ret
034b8     2D 00 64 FD | 	ret
034bc                 | 
034bc                 | _fatfs_cc_ff_uni2oem
034bc     00 EE 05 F6 | 	mov	_var01, #0
034c0     80 00 16 F2 | 	cmp	arg01, #128 wc
034c4     00 EF 01 C6 |  if_b	mov	_var01, arg01
034c8     58 00 90 CD |  if_b	jmp	#LR__0574
034cc     80 00 00 FF 
034d0     00 00 16 F2 | 	cmp	arg01, ##65536 wc
034d4     4C 00 90 3D |  if_ae	jmp	#LR__0573
034d8     01 EB 31 F9 | 	getword	result1, arg02, #0
034dc     01 00 00 FF 
034e0     52 EB 0D F2 | 	cmp	result1, ##850 wz
034e4     3C 00 90 5D |  if_ne	jmp	#LR__0573
034e8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
034e8     00 EE 05 F6 | 	mov	_var01, #0
034ec     97 14 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
034f0                 | LR__0570
034f0     F7 EA 31 F9 | 	getword	result1, _var01, #0
034f4     80 EA 15 F2 | 	cmp	result1, #128 wc
034f8     1C 00 90 3D |  if_ae	jmp	#LR__0572
034fc     F7 EA 31 F9 | 	getword	result1, _var01, #0
03500     01 EA 65 F0 | 	shl	result1, #1
03504     F3 EA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
03508     F5 EA E1 FA | 	rdword	result1, result1
0350c     F5 00 0A F2 | 	cmp	arg01, result1 wz
03510     01 EE 05 51 |  if_ne	add	_var01, #1
03514     D8 FF 9F 5D |  if_ne	jmp	#LR__0570
03518                 | LR__0571
03518                 | LR__0572
03518     F7 EE 31 F9 | 	getword	_var01, _var01, #0
0351c     80 EE 05 F1 | 	add	_var01, #128
03520     F7 EE E1 F8 | 	getbyte	_var01, _var01, #0
03524                 | LR__0573
03524                 | LR__0574
03524                 | ' 			c = (c + 0x80) & 0xFF;
03524                 | ' 		}
03524                 | ' 	}
03524                 | ' 
03524                 | ' 	return c;
03524     F7 EA 01 F6 | 	mov	result1, _var01
03528                 | _fatfs_cc_ff_uni2oem_ret
03528     2D 00 64 FD | 	ret
0352c                 | 
0352c                 | _fatfs_cc_ff_oem2uni
0352c     00 EE 05 F6 | 	mov	_var01, #0
03530     00 EB 31 F9 | 	getword	result1, arg01, #0
03534     80 EA 15 F2 | 	cmp	result1, #128 wc
03538     00 EF 01 C6 |  if_b	mov	_var01, arg01
0353c     2C 00 90 CD |  if_b	jmp	#LR__0581
03540     01 03 32 F9 | 	getword	arg02, arg02, #0
03544     01 00 00 FF 
03548     52 03 0E F2 | 	cmp	arg02, ##850 wz
0354c     1C 00 90 5D |  if_ne	jmp	#LR__0580
03550     00 EB 31 F9 | 	getword	result1, arg01, #0
03554     00 EB 15 F2 | 	cmp	result1, #256 wc
03558     00 01 32 C9 |  if_b	getword	arg01, arg01, #0
0355c     80 00 86 C1 |  if_b	sub	arg01, #128
03560     01 00 66 C0 |  if_b	shl	arg01, #1
03564     F3 00 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
03568     00 EF E1 CA |  if_b	rdword	_var01, arg01
0356c                 | LR__0580
0356c                 | LR__0581
0356c                 | ' 		}
0356c                 | ' 	}
0356c                 | ' 
0356c                 | ' 	return c;
0356c     F7 EA 01 F6 | 	mov	result1, _var01
03570                 | _fatfs_cc_ff_oem2uni_ret
03570     2D 00 64 FD | 	ret
03574                 | 
03574                 | _fatfs_cc_ff_wtoupper
03574     00 EF 01 F6 | 	mov	_var01, arg01
03578     80 00 00 FF 
0357c     00 EE 15 F2 | 	cmp	_var01, ##65536 wc
03580     60 01 90 3D |  if_ae	jmp	#LR__0603
03584     F7 F0 01 F6 | 	mov	_var02, _var01
03588     F8 EE 31 F9 | 	getword	_var01, _var02, #0
0358c     08 00 00 FF 
03590     00 EE 15 F2 | 	cmp	_var01, ##4096 wc
03594     00 E7 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
03598     F3 F2 01 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
0359c     00 E7 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
035a0     01 00 00 3F 
035a4     F2 E6 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
035a8     F3 F2 01 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
035ac     01 00 00 3F 
035b0     F2 E6 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
035b4     F9 F4 01 F6 | 	mov	_var04, _var03
035b8                 | ' 		uc = (WORD)uni;
035b8                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
035b8                 | ' 		for (;;) {
035b8                 | LR__0590
035b8     FA F6 E1 FA | 	rdword	_var05, _var04
035bc     FB F2 01 F6 | 	mov	_var03, _var05
035c0     0F F2 4D F7 | 	zerox	_var03, #15 wz
035c4     02 F4 05 F1 | 	add	_var04, #2
035c8     14 01 90 AD |  if_e	jmp	#LR__0602
035cc     F8 F2 31 F9 | 	getword	_var03, _var02, #0
035d0     FB EE 31 F9 | 	getword	_var01, _var05, #0
035d4     F7 F2 11 F2 | 	cmp	_var03, _var01 wc
035d8     04 01 90 CD |  if_b	jmp	#LR__0602
035dc     FA F8 E1 FA | 	rdword	_var06, _var04
035e0     FC FA 31 F9 | 	getword	_var07, _var06, #0
035e4     08 FA 45 F0 | 	shr	_var07, #8
035e8     FC F8 31 F9 | 	getword	_var06, _var06, #0
035ec     FC F8 E1 F8 | 	getbyte	_var06, _var06, #0
035f0     F8 F2 31 F9 | 	getword	_var03, _var02, #0
035f4     FB FC 31 F9 | 	getword	_var08, _var05, #0
035f8     FC EE 31 F9 | 	getword	_var01, _var06, #0
035fc     F7 FC 01 F1 | 	add	_var08, _var01
03600     FE F2 51 F2 | 	cmps	_var03, _var08 wc
03604     02 F4 05 F1 | 	add	_var04, #2
03608     C4 00 90 3D |  if_ae	jmp	#LR__0601
0360c                 | ' 				switch (cmd) {
0360c     FD FE 31 F9 | 	getword	_var09, _var07, #0
03610     09 FE 25 F3 | 	fle	_var09, #9
03614     30 FE 61 FD | 	jmprel	_var09
03618                 | LR__0591
03618     24 00 90 FD | 	jmp	#LR__0592
0361c     3C 00 90 FD | 	jmp	#LR__0593
03620     54 00 90 FD | 	jmp	#LR__0594
03624     5C 00 90 FD | 	jmp	#LR__0595
03628     64 00 90 FD | 	jmp	#LR__0596
0362c     6C 00 90 FD | 	jmp	#LR__0597
03630     74 00 90 FD | 	jmp	#LR__0598
03634     7C 00 90 FD | 	jmp	#LR__0599
03638     84 00 90 FD | 	jmp	#LR__0600
0363c     A0 00 90 FD | 	jmp	#LR__0602
03640                 | LR__0592
03640     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03644     FB F6 31 F9 | 	getword	_var05, _var05, #0
03648     FB F0 81 F1 | 	sub	_var02, _var05
0364c     01 F0 65 F0 | 	shl	_var02, #1
03650     FA F0 01 F1 | 	add	_var02, _var04
03654     F8 F0 E1 FA | 	rdword	_var02, _var02
03658     84 00 90 FD | 	jmp	#LR__0602
0365c                 | LR__0593
0365c     F8 F2 31 F9 | 	getword	_var03, _var02, #0
03660     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03664     FB F6 31 F9 | 	getword	_var05, _var05, #0
03668     FB F0 81 F1 | 	sub	_var02, _var05
0366c     01 F0 05 F5 | 	and	_var02, #1
03670     F9 F0 C1 F2 | 	subr	_var02, _var03
03674     68 00 90 FD | 	jmp	#LR__0602
03678                 | LR__0594
03678     F8 F0 31 F9 | 	getword	_var02, _var02, #0
0367c     10 F0 85 F1 | 	sub	_var02, #16
03680     5C 00 90 FD | 	jmp	#LR__0602
03684                 | LR__0595
03684     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03688     20 F0 85 F1 | 	sub	_var02, #32
0368c     50 00 90 FD | 	jmp	#LR__0602
03690                 | LR__0596
03690     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03694     30 F0 85 F1 | 	sub	_var02, #48
03698     44 00 90 FD | 	jmp	#LR__0602
0369c                 | LR__0597
0369c     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036a0     1A F0 85 F1 | 	sub	_var02, #26
036a4     38 00 90 FD | 	jmp	#LR__0602
036a8                 | LR__0598
036a8     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036ac     08 F0 05 F1 | 	add	_var02, #8
036b0     2C 00 90 FD | 	jmp	#LR__0602
036b4                 | LR__0599
036b4     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036b8     50 F0 85 F1 | 	sub	_var02, #80
036bc     20 00 90 FD | 	jmp	#LR__0602
036c0                 | LR__0600
036c0     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036c4     0E 00 00 FF 
036c8     60 F0 85 F1 | 	sub	_var02, ##7264
036cc                 | ' 				}
036cc                 | ' 				break;
036cc     10 00 90 FD | 	jmp	#LR__0602
036d0                 | LR__0601
036d0     0F FA 4D F7 | 	zerox	_var07, #15 wz
036d4     02 F8 05 AA |  if_e	mul	_var06, #2
036d8     FC F4 01 A1 |  if_e	add	_var04, _var06
036dc     D8 FE 9F FD | 	jmp	#LR__0590
036e0                 | LR__0602
036e0     F8 EE 31 F9 | 	getword	_var01, _var02, #0
036e4                 | LR__0603
036e4                 | ' 		}
036e4                 | ' 		uni = uc;
036e4                 | ' 	}
036e4                 | ' 
036e4                 | ' 	return uni;
036e4     F7 EA 01 F6 | 	mov	result1, _var01
036e8                 | _fatfs_cc_ff_wtoupper_ret
036e8     2D 00 64 FD | 	ret
036ec                 | 
036ec                 | _fatfs_cc_strncpy
036ec     00 EF 01 F6 | 	mov	_var01, arg01
036f0     97 12 48 FB | 	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
036f4                 | ' 
036f4                 | ' 	dscan = dst;
036f4                 | ' 	sscan = src;
036f4                 | ' 	count = n;
036f4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
036f4                 | LR__0610
036f4     01 04 86 F1 | 	sub	arg03, #1
036f8     00 04 56 F2 | 	cmps	arg03, #0 wc
036fc     18 00 90 CD |  if_b	jmp	#LR__0612
03700     01 EB C1 FA | 	rdbyte	result1, arg02
03704     F7 EA 41 FC | 	wrbyte	result1, _var01
03708     01 02 06 F1 | 	add	arg02, #1
0370c     F7 EA C9 FA | 	rdbyte	result1, _var01 wz
03710                 | ' 		continue;
03710     01 EE 05 F1 | 	add	_var01, #1
03714     DC FF 9F 5D |  if_ne	jmp	#LR__0610
03718                 | LR__0611
03718                 | LR__0612
03718     97 0C 48 FB | 	callpa	#(@LR__0614-@LR__0613)>>2,fcache_load_ptr_
0371c                 | ' 	while (--count >= 0)
0371c                 | LR__0613
0371c     01 04 86 F1 | 	sub	arg03, #1
03720     00 04 56 F2 | 	cmps	arg03, #0 wc
03724     F7 F0 01 36 |  if_ae	mov	_var02, _var01
03728     01 EE 05 31 |  if_ae	add	_var01, #1
0372c     F8 00 48 3C |  if_ae	wrbyte	#0, _var02
03730     E8 FF 9F 3D |  if_ae	jmp	#LR__0613
03734                 | LR__0614
03734                 | ' 		*dscan++ = '\0';
03734                 | ' 	return(dst);
03734     00 EB 01 F6 | 	mov	result1, arg01
03738                 | _fatfs_cc_strncpy_ret
03738     2D 00 64 FD | 	ret
0373c                 | 
0373c                 | _fatfs_cc_memcmp
0373c                 | ' 	for (n = size; n > 0; n--)
0373c     00 04 0E F2 | 	cmp	arg03, #0 wz
03740     28 00 90 AD |  if_e	jmp	#LR__0621
03744                 | LR__0620
03744     00 EF C1 FA | 	rdbyte	_var01, arg01
03748     01 F1 C1 FA | 	rdbyte	_var02, arg02
0374c     F8 EE 09 F2 | 	cmp	_var01, _var02 wz
03750     01 00 06 A1 |  if_e	add	arg01, #1
03754     01 02 06 A1 |  if_e	add	arg02, #1
03758                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
03758     00 EB C1 5A |  if_ne	rdbyte	result1, arg01
0375c     01 F1 C1 5A |  if_ne	rdbyte	_var02, arg02
03760     F8 EA 81 51 |  if_ne	sub	result1, _var02
03764     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
03768     F6 05 6E FB | 	djnz	arg03, #LR__0620
0376c                 | LR__0621
0376c                 | ' 
0376c                 | ' 	return(0);
0376c     00 EA 05 F6 | 	mov	result1, #0
03770                 | _fatfs_cc_memcmp_ret
03770     2D 00 64 FD | 	ret
03774                 | 
03774                 | _fatfs_cc_strncmp
03774     00 EF 09 F6 | 	mov	_var01, arg01 wz
03778     14 00 90 5D |  if_ne	jmp	#LR__0630
0377c                 | ' 		return scan2 ? -1 : 0;
0377c     00 02 0E F2 | 	cmp	arg02, #0 wz
03780     01 F0 65 56 |  if_ne	neg	_var02, #1
03784     00 F0 05 A6 |  if_e	mov	_var02, #0
03788     F8 EA 01 F6 | 	mov	result1, _var02
0378c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
03790                 | LR__0630
03790     00 02 0E F2 | 	cmp	arg02, #0 wz
03794     01 EA 05 A6 |  if_e	mov	result1, #1
03798     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
0379c     02 F3 01 F6 | 	mov	_var03, arg03
037a0     97 16 48 FB | 	callpa	#(@LR__0632-@LR__0631)>>2,fcache_load_ptr_
037a4                 | ' 	count = n;
037a4                 | ' 	do {
037a4                 | LR__0631
037a4     F7 F4 C1 FA | 	rdbyte	_var04, _var01
037a8     01 F7 01 F6 | 	mov	_var05, arg02
037ac     FB F8 C1 FA | 	rdbyte	_var06, _var05
037b0     01 F2 85 F1 | 	sub	_var03, #1
037b4     00 F2 55 F2 | 	cmps	_var03, #0 wc
037b8     01 EE 05 F1 | 	add	_var01, #1
037bc     01 02 06 F1 | 	add	arg02, #1
037c0     00 F4 0D 32 |  if_ae	cmp	_var04, #0 wz
037c4     08 00 90 2D |  if_nc_and_z	jmp	#LR__0633
037c8     FC F4 09 32 |  if_ae	cmp	_var04, _var06 wz
037cc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__0631
037d0                 | LR__0632
037d0                 | LR__0633
037d0     00 F2 55 F2 | 	cmps	_var03, #0 wc
037d4                 | ' 		return(0);
037d4     00 EA 05 C6 |  if_b	mov	result1, #0
037d8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
037dc     FC F4 09 F2 | 	cmp	_var04, _var06 wz
037e0                 | ' 		return(0);
037e0     00 EA 05 A6 |  if_e	mov	result1, #0
037e4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
037e8     00 F4 0D F2 | 	cmp	_var04, #0 wz
037ec                 | ' 		return(-1);
037ec     01 EA 65 A6 |  if_e	neg	result1, #1
037f0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
037f4     00 F8 0D F2 | 	cmp	_var06, #0 wz
037f8                 | ' 		return(1);
037f8     01 EA 05 A6 |  if_e	mov	result1, #1
037fc                 | ' 		return(c1 - c2);
037fc     FA EA 01 56 |  if_ne	mov	result1, _var04
03800     FC EA 81 51 |  if_ne	sub	result1, _var06
03804                 | _fatfs_cc_strncmp_ret
03804     2D 00 64 FD | 	ret
03808                 | 
03808                 | _fatfs_cc_strchr
03808                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
03808                 | ' 	while ((c = *s++) != (char) charwanted)
03808                 | LR__0640
03808     00 EF 01 F6 | 	mov	_var01, arg01
0380c     F7 F0 C1 FA | 	rdbyte	_var02, _var01
03810     F8 F2 E1 F8 | 	getbyte	_var03, _var02, #0
03814     01 F5 E1 F8 | 	getbyte	_var04, arg02, #0
03818     FA F2 09 F2 | 	cmp	_var03, _var04 wz
0381c     01 00 06 F1 | 	add	arg01, #1
03820     14 00 90 AD |  if_e	jmp	#LR__0641
03824     F8 F2 01 F6 | 	mov	_var03, _var02
03828     07 F2 4D F7 | 	zerox	_var03, #7 wz
0382c     00 EA 05 A6 |  if_e	mov	result1, #0
03830     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
03834     D0 FF 9F FD | 	jmp	#LR__0640
03838                 | LR__0641
03838                 | ' 	return((char *)--s);
03838     01 00 86 F1 | 	sub	arg01, #1
0383c     00 EB 01 F6 | 	mov	result1, arg01
03840                 | _fatfs_cc_strchr_ret
03840     2D 00 64 FD | 	ret
03844                 | 
03844                 | _fatfs_cc_disk_initialize
03844     04 4A 05 F6 | 	mov	COUNT_, #4
03848     A8 00 A0 FD | 	call	#pushregs_
0384c     40 F0 07 F1 | 	add	ptra, #64
03850     04 4E 05 F1 | 	add	fp, #4
03854     A7 00 42 FC | 	wrbyte	arg01, fp
03858     01 00 00 FF 
0385c     14 E2 05 F1 | 	add	objptr, ##532
03860     F1 06 02 FB | 	rdlong	arg04, objptr
03864     2C 4E 05 F1 | 	add	fp, #44
03868     A7 06 62 FC | 	wrlong	arg04, fp
0386c     04 E2 85 F1 | 	sub	objptr, #4
03870     F1 06 02 FB | 	rdlong	arg04, objptr
03874     04 4E 05 F1 | 	add	fp, #4
03878     A7 06 62 FC | 	wrlong	arg04, fp
0387c     08 E2 05 F1 | 	add	objptr, #8
03880     F1 06 02 FB | 	rdlong	arg04, objptr
03884     04 4E 05 F1 | 	add	fp, #4
03888     A7 06 62 FC | 	wrlong	arg04, fp
0388c     04 E2 05 F1 | 	add	objptr, #4
03890     F1 06 02 FB | 	rdlong	arg04, objptr
03894     04 4E 05 F1 | 	add	fp, #4
03898     A7 06 62 FC | 	wrlong	arg04, fp
0389c     04 E2 05 F1 | 	add	objptr, #4
038a0     F1 02 48 FC | 	wrbyte	#1, objptr
038a4     01 00 00 FF 
038a8     20 E2 85 F1 | 	sub	objptr, ##544
038ac     38 4E 85 F1 | 	sub	fp, #56
038b0     A7 06 CA FA | 	rdbyte	arg04, fp wz
038b4     04 4E 85 F1 | 	sub	fp, #4
038b8                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
038b8                 | '             return RES_NOTRDY;
038b8     03 EA 05 56 |  if_ne	mov	result1, #3
038bc     D8 05 90 5D |  if_ne	jmp	#LR__0668
038c0     13 00 00 FF 
038c4     10 01 06 F6 | 	mov	arg01, ##10000
038c8     3C D6 BF FD | 	call	#__system___waitus
038cc     30 4E 05 F1 | 	add	fp, #48
038d0     A7 00 02 FB | 	rdlong	arg01, fp
038d4     00 01 08 FC | 	wrpin	#0, arg01
038d8     04 4E 05 F1 | 	add	fp, #4
038dc     A7 00 02 FB | 	rdlong	arg01, fp
038e0     00 01 08 FC | 	wrpin	#0, arg01
038e4     04 4E 05 F1 | 	add	fp, #4
038e8     A7 00 02 FB | 	rdlong	arg01, fp
038ec     00 01 08 FC | 	wrpin	#0, arg01
038f0     04 4E 05 F1 | 	add	fp, #4
038f4     A7 00 02 FB | 	rdlong	arg01, fp
038f8     09 00 80 FF 
038fc     00 01 08 FC | 	wrpin	##4608, arg01
03900     0C 4E 85 F1 | 	sub	fp, #12
03904     A7 00 02 FB | 	rdlong	arg01, fp
03908     59 00 62 FD | 	drvh	arg01
0390c     04 4E 05 F1 | 	add	fp, #4
03910     A7 00 02 FB | 	rdlong	arg01, fp
03914     59 00 62 FD | 	drvh	arg01
03918     04 4E 05 F1 | 	add	fp, #4
0391c     A7 00 02 FB | 	rdlong	arg01, fp
03920     59 00 62 FD | 	drvh	arg01
03924     04 4E 05 F1 | 	add	fp, #4
03928     A7 00 02 FB | 	rdlong	arg01, fp
0392c     59 00 62 FD | 	drvh	arg01
03930     20 4E 85 F1 | 	sub	fp, #32
03934     00 04 80 FF 
03938     A7 20 68 FC | 	wrlong	##524304, fp
0393c     04 4E 05 F1 | 	add	fp, #4
03940     20 03 80 FF 
03944     A7 90 68 FC | 	wrlong	##409672, fp
03948     14 4E 05 F1 | 	add	fp, #20
0394c     A7 0A 02 FB | 	rdlong	local01, fp
03950     18 4E 85 F1 | 	sub	fp, #24
03954     A7 04 02 FB | 	rdlong	arg03, fp
03958     40 0A 62 FD | 	dirl	local01
0395c     A0 03 80 FF 
03960     05 91 08 FC | 	wrpin	##475208, local01
03964     05 05 12 FC | 	wxpin	arg03, local01
03968     05 01 28 FC | 	wypin	#0, local01
0396c     41 0A 62 FD | 	dirh	local01
03970     1C 4E 05 F1 | 	add	fp, #28
03974     A7 0C 02 FB | 	rdlong	local02, fp
03978     06 0B 82 F1 | 	sub	local01, local02
0397c     07 0A 06 F5 | 	and	local01, #7
03980     18 0A 66 F0 | 	shl	local01, #24
03984     78 02 06 F6 | 	mov	arg02, #120
03988     05 03 42 F5 | 	or	arg02, local01
0398c     14 4E 85 F1 | 	sub	fp, #20
03990     A7 02 62 FC | 	wrlong	arg02, fp
03994     14 4E 05 F1 | 	add	fp, #20
03998     A7 00 02 FB | 	rdlong	arg01, fp
0399c     10 02 26 F4 | 	bith	arg02, #16
039a0     40 00 62 FD | 	dirl	arg01
039a4     00 03 02 FC | 	wrpin	arg02, arg01
039a8     00 3F 18 FC | 	wxpin	#31, arg01
039ac     FF FF FF FF 
039b0     00 FF 2B FC | 	wypin	##-1, arg01
039b4     41 00 62 FD | 	dirh	arg01
039b8     04 4E 85 F1 | 	sub	fp, #4
039bc     A7 02 02 FB | 	rdlong	arg02, fp
039c0     08 4E 05 F1 | 	add	fp, #8
039c4     A7 0E 02 FB | 	rdlong	local03, fp
039c8     07 03 82 F1 | 	sub	arg02, local03
039cc     07 02 06 F5 | 	and	arg02, #7
039d0     18 02 66 F0 | 	shl	arg02, #24
039d4     14 4E 85 F1 | 	sub	fp, #20
039d8     A7 02 62 FC | 	wrlong	arg02, fp
039dc     29 00 00 FF 
039e0     7A 02 46 F5 | 	or	arg02, ##21114
039e4     A7 02 62 FC | 	wrlong	arg02, fp
039e8     14 4E 05 F1 | 	add	fp, #20
039ec     A7 00 02 FB | 	rdlong	arg01, fp
039f0     40 00 62 FD | 	dirl	arg01
039f4     00 03 02 FC | 	wrpin	arg02, arg01
039f8     00 4F 18 FC | 	wxpin	#39, arg01
039fc     00 01 28 FC | 	wypin	#0, arg01
03a00     41 00 62 FD | 	dirh	arg01
03a04     28 4E 85 F1 | 	sub	fp, #40
03a08     A7 00 02 F6 | 	mov	arg01, fp
03a0c     14 4E 85 F1 | 	sub	fp, #20
03a10     0A 02 06 F6 | 	mov	arg02, #10
03a14     08 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03a18     00 00 06 F6 | 	mov	arg01, #0
03a1c     00 02 06 F6 | 	mov	arg02, #0
03a20     D4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03a24     10 80 B0 FD | 	call	#_fatfs_cc_deselect_0605
03a28     64 00 06 F6 | 	mov	arg01, #100
03a2c     D8 D4 BF FD | 	call	#__system___waitus
03a30     14 4E 05 F1 | 	add	fp, #20
03a34     A7 00 02 F6 | 	mov	arg01, fp
03a38     14 4E 85 F1 | 	sub	fp, #20
03a3c     0A 02 06 F6 | 	mov	arg02, #10
03a40     DC 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03a44     0C 4E 05 F1 | 	add	fp, #12
03a48     A7 00 48 FC | 	wrbyte	#0, fp
03a4c     0C 4E 85 F1 | 	sub	fp, #12
03a50     00 00 06 F6 | 	mov	arg01, #0
03a54     00 02 06 F6 | 	mov	arg02, #0
03a58     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03a5c     F5 06 E2 F8 | 	getbyte	arg04, result1, #0
03a60     01 06 0E F2 | 	cmp	arg04, #1 wz
03a64     B8 03 90 5D |  if_ne	jmp	#LR__0667
03a68     08 00 06 F6 | 	mov	arg01, #8
03a6c     AA 03 06 F6 | 	mov	arg02, #426
03a70     84 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03a74     F5 EA E1 F8 | 	getbyte	result1, result1, #0
03a78     01 EA 0D F2 | 	cmp	result1, #1 wz
03a7c     98 01 90 5D |  if_ne	jmp	#LR__0653
03a80     14 4E 05 F1 | 	add	fp, #20
03a84     A7 00 02 F6 | 	mov	arg01, fp
03a88     14 4E 85 F1 | 	sub	fp, #20
03a8c     04 02 06 F6 | 	mov	arg02, #4
03a90     8C 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03a94     16 4E 05 F1 | 	add	fp, #22
03a98     A7 10 C2 FA | 	rdbyte	local04, fp
03a9c     16 4E 85 F1 | 	sub	fp, #22
03aa0     01 10 0E F2 | 	cmp	local04, #1 wz
03aa4     17 4E 05 A1 |  if_e	add	fp, #23
03aa8     A7 0E C2 AA |  if_e	rdbyte	local03, fp
03aac     17 4E 85 A1 |  if_e	sub	fp, #23
03ab0     AA 0E 0E A2 |  if_e	cmp	local03, #170 wz
03ab4     68 03 90 5D |  if_ne	jmp	#LR__0666
03ab8                 | ' 				for (tmr = 1000; tmr; tmr--) {
03ab8     18 4E 05 F1 | 	add	fp, #24
03abc     01 00 80 FF 
03ac0     A7 D0 6B FC | 	wrlong	##1000, fp
03ac4     18 4E 85 F1 | 	sub	fp, #24
03ac8                 | LR__0650
03ac8     18 4E 05 F1 | 	add	fp, #24
03acc     A7 0A 0A FB | 	rdlong	local01, fp wz
03ad0     18 4E 85 F1 | 	sub	fp, #24
03ad4     3C 00 90 AD |  if_e	jmp	#LR__0651
03ad8     A9 00 06 F6 | 	mov	arg01, #169
03adc     1E 02 C6 F9 | 	decod	arg02, #30
03ae0     14 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03ae4     F5 10 02 F6 | 	mov	local04, result1
03ae8     07 10 4E F7 | 	zerox	local04, #7 wz
03aec     24 00 90 AD |  if_e	jmp	#LR__0651
03af0     01 00 00 FF 
03af4     E8 01 06 F6 | 	mov	arg01, ##1000
03af8     0C D4 BF FD | 	call	#__system___waitus
03afc     18 4E 05 F1 | 	add	fp, #24
03b00     A7 10 02 FB | 	rdlong	local04, fp
03b04     01 10 86 F1 | 	sub	local04, #1
03b08     A7 10 62 FC | 	wrlong	local04, fp
03b0c     18 4E 85 F1 | 	sub	fp, #24
03b10     B4 FF 9F FD | 	jmp	#LR__0650
03b14                 | LR__0651
03b14     18 4E 05 F1 | 	add	fp, #24
03b18     A7 10 0A FB | 	rdlong	local04, fp wz
03b1c     18 4E 85 F1 | 	sub	fp, #24
03b20     4C 00 90 AD |  if_e	jmp	#LR__0652
03b24     3A 00 06 F6 | 	mov	arg01, #58
03b28     00 02 06 F6 | 	mov	arg02, #0
03b2c     C8 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03b30     F5 0E 02 F6 | 	mov	local03, result1
03b34     07 0E 4E F7 | 	zerox	local03, #7 wz
03b38     34 00 90 5D |  if_ne	jmp	#LR__0652
03b3c     14 4E 05 F1 | 	add	fp, #20
03b40     A7 00 02 F6 | 	mov	arg01, fp
03b44     14 4E 85 F1 | 	sub	fp, #20
03b48     04 02 06 F6 | 	mov	arg02, #4
03b4c     D0 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03b50     14 4E 05 F1 | 	add	fp, #20
03b54     A7 0A C2 FA | 	rdbyte	local01, fp
03b58     40 0A CE F7 | 	test	local01, #64 wz
03b5c     0C 10 06 56 |  if_ne	mov	local04, #12
03b60     04 10 06 A6 |  if_e	mov	local04, #4
03b64     08 4E 85 F1 | 	sub	fp, #8
03b68     A7 10 42 FC | 	wrbyte	local04, fp
03b6c     0C 4E 85 F1 | 	sub	fp, #12
03b70                 | LR__0652
03b70     14 10 06 FB | 	rdlong	local04, #20
03b74     18 4E 05 F1 | 	add	fp, #24
03b78     A7 10 62 FC | 	wrlong	local04, fp
03b7c     0C 4E 05 F1 | 	add	fp, #12
03b80     A7 10 02 FB | 	rdlong	local04, fp
03b84     1B 10 26 F4 | 	bith	local04, #27
03b88     A7 10 62 FC | 	wrlong	local04, fp
03b8c     0C 4E 85 F1 | 	sub	fp, #12
03b90     A7 10 02 FB | 	rdlong	local04, fp
03b94     18 4E 85 F1 | 	sub	fp, #24
03b98     68 78 04 FF 
03b9c     81 11 16 F2 | 	cmp	local04, ##150000001 wc
03ba0     1C 4E 05 C1 |  if_b	add	fp, #28
03ba4     00 01 80 CF 
03ba8     A7 08 68 CC |  if_b	wrlong	##131076, fp
03bac     1C 4E 85 C1 |  if_b	sub	fp, #28
03bb0     6C 02 90 CD |  if_b	jmp	#LR__0666
03bb4     18 4E 05 F1 | 	add	fp, #24
03bb8     A7 10 02 FB | 	rdlong	local04, fp
03bbc     18 4E 85 F1 | 	sub	fp, #24
03bc0     E1 F5 05 FF 
03bc4     01 10 16 F2 | 	cmp	local04, ##200000001 wc
03bc8     1C 4E 05 C1 |  if_b	add	fp, #28
03bcc     00 01 80 CF 
03bd0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
03bd4     1C 4E 85 C1 |  if_b	sub	fp, #28
03bd8     44 02 90 CD |  if_b	jmp	#LR__0666
03bdc     18 4E 05 F1 | 	add	fp, #24
03be0     A7 10 02 FB | 	rdlong	local04, fp
03be4     18 4E 85 F1 | 	sub	fp, #24
03be8     3B 58 08 FF 
03bec     01 10 16 F2 | 	cmp	local04, ##280000001 wc
03bf0     1C 4E 05 C1 |  if_b	add	fp, #28
03bf4     00 01 80 CF 
03bf8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
03bfc     1C 4E 85 C1 |  if_b	sub	fp, #28
03c00     1C 02 90 CD |  if_b	jmp	#LR__0666
03c04     1C 4E 05 F1 | 	add	fp, #28
03c08     80 01 80 FF 
03c0c     A7 10 68 FC | 	wrlong	##196616, fp
03c10     1C 4E 85 F1 | 	sub	fp, #28
03c14     08 02 90 FD | 	jmp	#LR__0666
03c18                 | LR__0653
03c18     A9 00 06 F6 | 	mov	arg01, #169
03c1c     00 02 06 F6 | 	mov	arg02, #0
03c20     D4 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03c24     F5 10 E2 F8 | 	getbyte	local04, result1, #0
03c28     02 10 16 F2 | 	cmp	local04, #2 wc
03c2c     18 00 90 3D |  if_ae	jmp	#LR__0654
03c30     0C 4E 05 F1 | 	add	fp, #12
03c34     A7 04 48 FC | 	wrbyte	#2, fp
03c38     04 4E 05 F1 | 	add	fp, #4
03c3c     A7 52 49 FC | 	wrbyte	#169, fp
03c40     10 4E 85 F1 | 	sub	fp, #16
03c44     14 00 90 FD | 	jmp	#LR__0655
03c48                 | LR__0654
03c48     0C 4E 05 F1 | 	add	fp, #12
03c4c     A7 02 48 FC | 	wrbyte	#1, fp
03c50     04 4E 05 F1 | 	add	fp, #4
03c54     A7 02 48 FC | 	wrbyte	#1, fp
03c58     10 4E 85 F1 | 	sub	fp, #16
03c5c                 | LR__0655
03c5c                 | ' 				ty =  0x01 ; cmd =  (1) ;
03c5c                 | ' 			}
03c5c                 | ' 			for (tmr = 1000; tmr; tmr--) {
03c5c     18 4E 05 F1 | 	add	fp, #24
03c60     01 00 80 FF 
03c64     A7 D0 6B FC | 	wrlong	##1000, fp
03c68     18 4E 85 F1 | 	sub	fp, #24
03c6c                 | LR__0656
03c6c     18 4E 05 F1 | 	add	fp, #24
03c70     A7 0E 0A FB | 	rdlong	local03, fp wz
03c74     18 4E 85 F1 | 	sub	fp, #24
03c78     44 00 90 AD |  if_e	jmp	#LR__0657
03c7c     10 4E 05 F1 | 	add	fp, #16
03c80     A7 00 C2 FA | 	rdbyte	arg01, fp
03c84     10 4E 85 F1 | 	sub	fp, #16
03c88     00 02 06 F6 | 	mov	arg02, #0
03c8c     68 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03c90     F5 10 02 F6 | 	mov	local04, result1
03c94     07 10 4E F7 | 	zerox	local04, #7 wz
03c98     24 00 90 AD |  if_e	jmp	#LR__0657
03c9c     01 00 00 FF 
03ca0     E8 01 06 F6 | 	mov	arg01, ##1000
03ca4     60 D2 BF FD | 	call	#__system___waitus
03ca8     18 4E 05 F1 | 	add	fp, #24
03cac     A7 10 02 FB | 	rdlong	local04, fp
03cb0     01 10 86 F1 | 	sub	local04, #1
03cb4     A7 10 62 FC | 	wrlong	local04, fp
03cb8     18 4E 85 F1 | 	sub	fp, #24
03cbc     AC FF 9F FD | 	jmp	#LR__0656
03cc0                 | LR__0657
03cc0     18 4E 05 F1 | 	add	fp, #24
03cc4     A7 10 0A FB | 	rdlong	local04, fp wz
03cc8     18 4E 85 F1 | 	sub	fp, #24
03ccc     14 00 90 AD |  if_e	jmp	#LR__0658
03cd0     10 00 06 F6 | 	mov	arg01, #16
03cd4     09 02 C6 F9 | 	decod	arg02, #9
03cd8     1C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03cdc     07 EA 4D F7 | 	zerox	result1, #7 wz
03ce0     0C 00 90 AD |  if_e	jmp	#LR__0659
03ce4                 | LR__0658
03ce4     0C 4E 05 F1 | 	add	fp, #12
03ce8     A7 00 48 FC | 	wrbyte	#0, fp
03cec     0C 4E 85 F1 | 	sub	fp, #12
03cf0                 | LR__0659
03cf0     14 10 06 FB | 	rdlong	local04, #20
03cf4     18 4E 05 F1 | 	add	fp, #24
03cf8     A7 10 62 FC | 	wrlong	local04, fp
03cfc     18 4E 85 F1 | 	sub	fp, #24
03d00     F0 FA 02 FF 
03d04     01 11 16 F2 | 	cmp	local04, ##100000001 wc
03d08     18 00 90 3D |  if_ae	jmp	#LR__0660
03d0c     24 4E 05 F1 | 	add	fp, #36
03d10     A7 10 02 FB | 	rdlong	local04, fp
03d14     1B 10 26 F4 | 	bith	local04, #27
03d18     A7 10 62 FC | 	wrlong	local04, fp
03d1c     24 4E 85 F1 | 	sub	fp, #36
03d20     2C 00 90 FD | 	jmp	#LR__0661
03d24                 | LR__0660
03d24     18 4E 05 F1 | 	add	fp, #24
03d28     A7 10 02 FB | 	rdlong	local04, fp
03d2c     18 4E 85 F1 | 	sub	fp, #24
03d30     E1 F5 05 FF 
03d34     01 10 16 F2 | 	cmp	local04, ##200000001 wc
03d38     24 4E 05 C1 |  if_b	add	fp, #36
03d3c     A7 10 02 CB |  if_b	rdlong	local04, fp
03d40     80 00 04 CF 
03d44     00 10 46 C5 |  if_b	or	local04, ##134283264
03d48     A7 10 62 CC |  if_b	wrlong	local04, fp
03d4c     24 4E 85 C1 |  if_b	sub	fp, #36
03d50                 | LR__0661
03d50     18 4E 05 F1 | 	add	fp, #24
03d54     A7 10 02 FB | 	rdlong	local04, fp
03d58     18 4E 85 F1 | 	sub	fp, #24
03d5c     F0 FA 02 FF 
03d60     01 11 16 F2 | 	cmp	local04, ##100000001 wc
03d64     1C 4E 05 C1 |  if_b	add	fp, #28
03d68     00 01 80 CF 
03d6c     A7 08 68 CC |  if_b	wrlong	##131076, fp
03d70     1C 4E 85 C1 |  if_b	sub	fp, #28
03d74     A8 00 90 CD |  if_b	jmp	#LR__0665
03d78     18 4E 05 F1 | 	add	fp, #24
03d7c     A7 10 02 FB | 	rdlong	local04, fp
03d80     18 4E 85 F1 | 	sub	fp, #24
03d84     68 78 04 FF 
03d88     81 11 16 F2 | 	cmp	local04, ##150000001 wc
03d8c     1C 4E 05 C1 |  if_b	add	fp, #28
03d90     80 01 80 CF 
03d94     A7 0C 68 CC |  if_b	wrlong	##196614, fp
03d98     1C 4E 85 C1 |  if_b	sub	fp, #28
03d9c     80 00 90 CD |  if_b	jmp	#LR__0664
03da0     18 4E 05 F1 | 	add	fp, #24
03da4     A7 10 02 FB | 	rdlong	local04, fp
03da8     18 4E 85 F1 | 	sub	fp, #24
03dac     E1 F5 05 FF 
03db0     01 10 16 F2 | 	cmp	local04, ##200000001 wc
03db4     1C 4E 05 C1 |  if_b	add	fp, #28
03db8     00 02 80 CF 
03dbc     A7 10 68 CC |  if_b	wrlong	##262152, fp
03dc0     1C 4E 85 C1 |  if_b	sub	fp, #28
03dc4     58 00 90 CD |  if_b	jmp	#LR__0663
03dc8     18 4E 05 F1 | 	add	fp, #24
03dcc     A7 10 02 FB | 	rdlong	local04, fp
03dd0     18 4E 85 F1 | 	sub	fp, #24
03dd4     59 73 07 FF 
03dd8     81 10 16 F2 | 	cmp	local04, ##250000001 wc
03ddc     1C 4E 05 C1 |  if_b	add	fp, #28
03de0     80 02 80 CF 
03de4     A7 14 68 CC |  if_b	wrlong	##327690, fp
03de8     1C 4E 85 C1 |  if_b	sub	fp, #28
03dec     30 00 90 CD |  if_b	jmp	#LR__0662
03df0     18 4E 05 F1 | 	add	fp, #24
03df4     A7 10 02 FB | 	rdlong	local04, fp
03df8     18 4E 85 F1 | 	sub	fp, #24
03dfc     D1 F0 08 FF 
03e00     01 11 16 F2 | 	cmp	local04, ##300000001 wc
03e04     1C 4E 05 C1 |  if_b	add	fp, #28
03e08     00 03 80 CF 
03e0c     A7 18 68 CC |  if_b	wrlong	##393228, fp
03e10     1C 4E 85 F3 | 	sumc	fp, #28
03e14     80 03 80 3F 
03e18     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
03e1c     1C 4E 85 31 |  if_ae	sub	fp, #28
03e20                 | LR__0662
03e20                 | LR__0663
03e20                 | LR__0664
03e20                 | LR__0665
03e20                 | LR__0666
03e20                 | LR__0667
03e20     0C 4E 05 F1 | 	add	fp, #12
03e24     A7 10 C2 FA | 	rdbyte	local04, fp
03e28     01 00 00 FF 
03e2c     21 E2 05 F1 | 	add	objptr, ##545
03e30     F1 10 42 FC | 	wrbyte	local04, objptr
03e34     A7 0A CA FA | 	rdbyte	local01, fp wz
03e38     00 10 06 56 |  if_ne	mov	local04, #0
03e3c     01 10 06 A6 |  if_e	mov	local04, #1
03e40     20 4E 05 F1 | 	add	fp, #32
03e44     A7 10 42 FC | 	wrbyte	local04, fp
03e48     A7 10 C2 FA | 	rdbyte	local04, fp
03e4c     2C 4E 85 F1 | 	sub	fp, #44
03e50     01 E2 85 F1 | 	sub	objptr, #1
03e54     F1 10 42 FC | 	wrbyte	local04, objptr
03e58     01 00 00 FF 
03e5c     20 E2 85 F1 | 	sub	objptr, ##544
03e60     D4 7B B0 FD | 	call	#_fatfs_cc_deselect_0605
03e64     34 4E 05 F1 | 	add	fp, #52
03e68     A7 00 02 FB | 	rdlong	arg01, fp
03e6c     18 4E 85 F1 | 	sub	fp, #24
03e70     A7 02 02 FB | 	rdlong	arg02, fp
03e74     00 03 12 FC | 	wxpin	arg02, arg01
03e78     1C 4E 05 F1 | 	add	fp, #28
03e7c     A7 00 02 FB | 	rdlong	arg01, fp
03e80     14 4E 85 F1 | 	sub	fp, #20
03e84     A7 02 02 FB | 	rdlong	arg02, fp
03e88     00 03 02 FC | 	wrpin	arg02, arg01
03e8c                 | ' 
03e8c                 | ' 		}
03e8c                 | ' 	}
03e8c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
03e8c                 | ' 	CardType = ty;
03e8c                 | ' 	s = ty ? 0 :  0x01 ;
03e8c                 | ' 	Stat = s;
03e8c                 | ' 
03e8c                 | ' 	deselect();
03e8c                 | ' 
03e8c                 | ' 
03e8c                 | ' 	_wxpin( PIN_CLK, ck_div );
03e8c                 | ' 	_wrpin( PIN_DI, spm_tx );
03e8c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
03e8c                 | ' 	return s;
03e8c     08 4E 05 F1 | 	add	fp, #8
03e90     A7 EA C1 FA | 	rdbyte	result1, fp
03e94     2C 4E 85 F1 | 	sub	fp, #44
03e98                 | LR__0668
03e98     A7 F0 03 F6 | 	mov	ptra, fp
03e9c     B2 00 A0 FD | 	call	#popregs_
03ea0                 | _fatfs_cc_disk_initialize_ret
03ea0     2D 00 64 FD | 	ret
03ea4                 | 
03ea4                 | _fatfs_cc_disk_read
03ea4     05 4A 05 F6 | 	mov	COUNT_, #5
03ea8     A8 00 A0 FD | 	call	#pushregs_
03eac     01 0B 02 F6 | 	mov	local01, arg02
03eb0     02 0D 02 F6 | 	mov	local02, arg03
03eb4     03 0F 02 F6 | 	mov	local03, arg04
03eb8     00 00 0E F2 | 	cmp	arg01, #0 wz
03ebc     01 EA 05 56 |  if_ne	mov	result1, #1
03ec0                 | ' 
03ec0                 | ' 	return Stat;
03ec0     01 00 00 AF 
03ec4     20 E2 05 A1 |  if_e	add	objptr, ##544
03ec8     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
03ecc     01 00 00 AF 
03ed0     20 E2 85 A1 |  if_e	sub	objptr, ##544
03ed4     F5 EA E1 F8 | 	getbyte	result1, result1, #0
03ed8     01 EA CD F7 | 	test	result1, #1 wz
03edc     03 EA 05 56 |  if_ne	mov	result1, #3
03ee0     84 00 90 5D |  if_ne	jmp	#LR__0672
03ee4     01 00 00 FF 
03ee8     21 E2 05 F1 | 	add	objptr, ##545
03eec     F1 10 C2 FA | 	rdbyte	local04, objptr
03ef0     01 00 00 FF 
03ef4     21 E2 85 F1 | 	sub	objptr, ##545
03ef8     08 10 CE F7 | 	test	local04, #8 wz
03efc     09 0C 66 A0 |  if_e	shl	local02, #9
03f00     02 0E 16 F2 | 	cmp	local03, #2 wc
03f04     12 10 06 36 |  if_ae	mov	local04, #18
03f08     11 10 06 C6 |  if_b	mov	local04, #17
03f0c     06 03 02 F6 | 	mov	arg02, local02
03f10     08 01 02 F6 | 	mov	arg01, local04
03f14     E0 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03f18     F5 12 02 F6 | 	mov	local05, result1
03f1c     07 12 4E F7 | 	zerox	local05, #7 wz
03f20     30 00 90 5D |  if_ne	jmp	#LR__0671
03f24                 | ' 		do {
03f24                 | LR__0670
03f24     05 01 02 F6 | 	mov	arg01, local01
03f28     09 02 C6 F9 | 	decod	arg02, #9
03f2c     1C 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0613
03f30     00 EA 0D F2 | 	cmp	result1, #0 wz
03f34     01 00 00 5F 
03f38     00 0A 06 51 |  if_ne	add	local01, ##512
03f3c     F9 0F 6E 5B |  if_ne	djnz	local03, #LR__0670
03f40     08 11 E2 F8 | 	getbyte	local04, local04, #0
03f44     12 10 0E F2 | 	cmp	local04, #18 wz
03f48     0C 00 06 A6 |  if_e	mov	arg01, #12
03f4c     00 02 06 A6 |  if_e	mov	arg02, #0
03f50     A4 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0619
03f54                 | LR__0671
03f54     E0 7A B0 FD | 	call	#_fatfs_cc_deselect_0605
03f58                 | ' 	}
03f58                 | ' 	deselect();
03f58                 | ' 
03f58                 | ' 	return count ? RES_ERROR : RES_OK;
03f58     00 0E 0E F2 | 	cmp	local03, #0 wz
03f5c     01 12 06 56 |  if_ne	mov	local05, #1
03f60     00 12 06 A6 |  if_e	mov	local05, #0
03f64     09 EB 01 F6 | 	mov	result1, local05
03f68                 | LR__0672
03f68     A7 F0 03 F6 | 	mov	ptra, fp
03f6c     B2 00 A0 FD | 	call	#popregs_
03f70                 | _fatfs_cc_disk_read_ret
03f70     2D 00 64 FD | 	ret
03f74                 | 
03f74                 | _fatfs_cc_disk_write
03f74     04 4A 05 F6 | 	mov	COUNT_, #4
03f78     A8 00 A0 FD | 	call	#pushregs_
03f7c     01 0B 02 F6 | 	mov	local01, arg02
03f80     03 0D 02 F6 | 	mov	local02, arg04
03f84     02 0F 02 F6 | 	mov	local03, arg03
03f88     00 00 0E F2 | 	cmp	arg01, #0 wz
03f8c     01 EA 05 56 |  if_ne	mov	result1, #1
03f90                 | ' 
03f90                 | ' 	return Stat;
03f90     01 00 00 AF 
03f94     20 E2 05 A1 |  if_e	add	objptr, ##544
03f98     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
03f9c     01 00 00 AF 
03fa0     20 E2 85 A1 |  if_e	sub	objptr, ##544
03fa4     F5 EA E1 F8 | 	getbyte	result1, result1, #0
03fa8     01 EA CD F7 | 	test	result1, #1 wz
03fac     03 EA 05 56 |  if_ne	mov	result1, #3
03fb0     D4 00 90 5D |  if_ne	jmp	#LR__0684
03fb4     01 00 00 FF 
03fb8     21 E2 05 F1 | 	add	objptr, ##545
03fbc     F1 04 C2 FA | 	rdbyte	arg03, objptr
03fc0     01 00 00 FF 
03fc4     21 E2 85 F1 | 	sub	objptr, ##545
03fc8     08 04 CE F7 | 	test	arg03, #8 wz
03fcc     09 0E 66 A0 |  if_e	shl	local03, #9
03fd0     01 0C 0E F2 | 	cmp	local02, #1 wz
03fd4     30 00 90 5D |  if_ne	jmp	#LR__0680
03fd8     18 00 06 F6 | 	mov	arg01, #24
03fdc     07 03 02 F6 | 	mov	arg02, local03
03fe0     14 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03fe4     F5 10 02 F6 | 	mov	local04, result1
03fe8     07 10 4E F7 | 	zerox	local04, #7 wz
03fec     84 00 90 5D |  if_ne	jmp	#LR__0683
03ff0     05 01 02 F6 | 	mov	arg01, local01
03ff4     FE 02 06 F6 | 	mov	arg02, #254
03ff8     30 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0615
03ffc     00 EA 0D F2 | 	cmp	result1, #0 wz
04000     00 0C 06 56 |  if_ne	mov	local02, #0
04004     6C 00 90 FD | 	jmp	#LR__0683
04008                 | LR__0680
04008     01 00 00 FF 
0400c     21 E2 05 F1 | 	add	objptr, ##545
04010     F1 10 C2 FA | 	rdbyte	local04, objptr
04014     01 00 00 FF 
04018     21 E2 85 F1 | 	sub	objptr, ##545
0401c     06 10 CE F7 | 	test	local04, #6 wz
04020     97 00 06 56 |  if_ne	mov	arg01, #151
04024     06 03 02 56 |  if_ne	mov	arg02, local02
04028     CC 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0619
0402c     07 03 02 F6 | 	mov	arg02, local03
04030     19 00 06 F6 | 	mov	arg01, #25
04034     C0 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0619
04038     F5 10 02 F6 | 	mov	local04, result1
0403c     07 10 4E F7 | 	zerox	local04, #7 wz
04040     30 00 90 5D |  if_ne	jmp	#LR__0682
04044                 | ' 			do {
04044                 | LR__0681
04044     05 01 02 F6 | 	mov	arg01, local01
04048     FC 02 06 F6 | 	mov	arg02, #252
0404c     DC 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0615
04050     00 EA 0D F2 | 	cmp	result1, #0 wz
04054     01 00 00 5F 
04058     00 0A 06 51 |  if_ne	add	local01, ##512
0405c     F9 0D 6E 5B |  if_ne	djnz	local02, #LR__0681
04060     00 00 06 F6 | 	mov	arg01, #0
04064     FD 02 06 F6 | 	mov	arg02, #253
04068     C0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0615
0406c     00 EA 0D F2 | 	cmp	result1, #0 wz
04070     01 0C 06 A6 |  if_e	mov	local02, #1
04074                 | LR__0682
04074                 | LR__0683
04074     C0 79 B0 FD | 	call	#_fatfs_cc_deselect_0605
04078                 | ' 				count = 1;
04078                 | ' 		}
04078                 | ' 	}
04078                 | ' 	deselect();
04078                 | ' 
04078                 | ' 	return count ? RES_ERROR : RES_OK;
04078     00 0C 0E F2 | 	cmp	local02, #0 wz
0407c     01 10 06 56 |  if_ne	mov	local04, #1
04080     00 10 06 A6 |  if_e	mov	local04, #0
04084     08 EB 01 F6 | 	mov	result1, local04
04088                 | LR__0684
04088     A7 F0 03 F6 | 	mov	ptra, fp
0408c     B2 00 A0 FD | 	call	#popregs_
04090                 | _fatfs_cc_disk_write_ret
04090     2D 00 64 FD | 	ret
04094                 | 
04094                 | _fatfs_cc_disk_ioctl
04094     01 4A 05 F6 | 	mov	COUNT_, #1
04098     A8 00 A0 FD | 	call	#pushregs_
0409c     30 F0 07 F1 | 	add	ptra, #48
040a0     04 4E 05 F1 | 	add	fp, #4
040a4     A7 00 42 FC | 	wrbyte	arg01, fp
040a8     04 4E 05 F1 | 	add	fp, #4
040ac     A7 02 42 FC | 	wrbyte	arg02, fp
040b0     04 4E 05 F1 | 	add	fp, #4
040b4     A7 04 62 FC | 	wrlong	arg03, fp
040b8     08 4E 85 F1 | 	sub	fp, #8
040bc     A7 00 CA FA | 	rdbyte	arg01, fp wz
040c0     04 4E 85 F1 | 	sub	fp, #4
040c4     01 EA 05 56 |  if_ne	mov	result1, #1
040c8                 | ' 
040c8                 | ' 	return Stat;
040c8     01 00 00 AF 
040cc     20 E2 05 A1 |  if_e	add	objptr, ##544
040d0     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
040d4     01 00 00 AF 
040d8     20 E2 85 A1 |  if_e	sub	objptr, ##544
040dc     F5 EA E1 F8 | 	getbyte	result1, result1, #0
040e0     01 EA CD F7 | 	test	result1, #1 wz
040e4     03 EA 05 56 |  if_ne	mov	result1, #3
040e8     E4 01 90 5D |  if_ne	jmp	#LR__0698
040ec     10 4E 05 F1 | 	add	fp, #16
040f0     A7 02 68 FC | 	wrlong	#1, fp
040f4                 | ' 
040f4                 | ' 	res = RES_ERROR;
040f4                 | ' 	switch (ctrl) {
040f4     08 4E 85 F1 | 	sub	fp, #8
040f8     A7 0A C2 FA | 	rdbyte	local01, fp
040fc     08 4E 85 F1 | 	sub	fp, #8
04100     04 0A 26 F3 | 	fle	local01, #4
04104     30 0A 62 FD | 	jmprel	local01
04108                 | LR__0690
04108     10 00 90 FD | 	jmp	#LR__0691
0410c     24 00 90 FD | 	jmp	#LR__0692
04110     A0 01 90 FD | 	jmp	#LR__0696
04114     80 01 90 FD | 	jmp	#LR__0695
04118     98 01 90 FD | 	jmp	#LR__0696
0411c                 | LR__0691
0411c     9C 79 B0 FD | 	call	#_fatfs_cc_select_0609
04120     00 EA 0D F2 | 	cmp	result1, #0 wz
04124     10 4E 05 51 |  if_ne	add	fp, #16
04128     A7 00 68 5C |  if_ne	wrlong	#0, fp
0412c     10 4E 85 51 |  if_ne	sub	fp, #16
04130                 | ' 			break;
04130     8C 01 90 FD | 	jmp	#LR__0697
04134                 | LR__0692
04134     09 00 06 F6 | 	mov	arg01, #9
04138     00 02 06 F6 | 	mov	arg02, #0
0413c     B8 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0619
04140     F5 0A 02 F6 | 	mov	local01, result1
04144     07 0A 4E F7 | 	zerox	local01, #7 wz
04148     74 01 90 5D |  if_ne	jmp	#LR__0697
0414c     18 4E 05 F1 | 	add	fp, #24
04150     A7 00 02 F6 | 	mov	arg01, fp
04154     18 4E 85 F1 | 	sub	fp, #24
04158     10 02 06 F6 | 	mov	arg02, #16
0415c     EC 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0613
04160     00 EA 0D F2 | 	cmp	result1, #0 wz
04164     58 01 90 AD |  if_e	jmp	#LR__0697
04168     18 4E 05 F1 | 	add	fp, #24
0416c     A7 0A C2 FA | 	rdbyte	local01, fp
04170     18 4E 85 F1 | 	sub	fp, #24
04174     06 0A 46 F0 | 	shr	local01, #6
04178     01 0A 0E F2 | 	cmp	local01, #1 wz
0417c     5C 00 90 5D |  if_ne	jmp	#LR__0693
04180     21 4E 05 F1 | 	add	fp, #33
04184     A7 0A C2 FA | 	rdbyte	local01, fp
04188     01 4E 85 F1 | 	sub	fp, #1
0418c     A7 EA C1 FA | 	rdbyte	result1, fp
04190     F5 EA 31 F9 | 	getword	result1, result1, #0
04194     08 EA 65 F0 | 	shl	result1, #8
04198     F5 0A 02 F1 | 	add	local01, result1
0419c     01 4E 85 F1 | 	sub	fp, #1
041a0     A7 EA C1 FA | 	rdbyte	result1, fp
041a4     3F EA 05 F5 | 	and	result1, #63
041a8     10 EA 65 F0 | 	shl	result1, #16
041ac     F5 0A 02 F1 | 	add	local01, result1
041b0     01 0A 06 F1 | 	add	local01, #1
041b4     09 4E 05 F1 | 	add	fp, #9
041b8     A7 0A 62 FC | 	wrlong	local01, fp
041bc     1C 4E 85 F1 | 	sub	fp, #28
041c0     A7 0A 02 FB | 	rdlong	local01, fp
041c4     1C 4E 05 F1 | 	add	fp, #28
041c8     A7 EA 01 FB | 	rdlong	result1, fp
041cc     28 4E 85 F1 | 	sub	fp, #40
041d0     0A EA 65 F0 | 	shl	result1, #10
041d4     05 EB 61 FC | 	wrlong	result1, local01
041d8     AC 00 90 FD | 	jmp	#LR__0694
041dc                 | LR__0693
041dc     1D 4E 05 F1 | 	add	fp, #29
041e0     A7 0A C2 FA | 	rdbyte	local01, fp
041e4     05 0B 42 F8 | 	getnib	local01, local01, #0
041e8     05 4E 05 F1 | 	add	fp, #5
041ec     A7 EA C1 FA | 	rdbyte	result1, fp
041f0     80 EA 05 F5 | 	and	result1, #128
041f4     07 EA C5 F0 | 	sar	result1, #7
041f8     F5 0A 02 F1 | 	add	local01, result1
041fc     01 4E 85 F1 | 	sub	fp, #1
04200     A7 EA C1 FA | 	rdbyte	result1, fp
04204     03 EA 05 F5 | 	and	result1, #3
04208     01 EA 65 F0 | 	shl	result1, #1
0420c     F5 0A 02 F1 | 	add	local01, result1
04210     02 0A 06 F1 | 	add	local01, #2
04214     0D 4E 85 F1 | 	sub	fp, #13
04218     A7 0A 42 FC | 	wrbyte	local01, fp
0421c     0C 4E 05 F1 | 	add	fp, #12
04220     A7 0A C2 FA | 	rdbyte	local01, fp
04224     06 0A 46 F0 | 	shr	local01, #6
04228     01 4E 85 F1 | 	sub	fp, #1
0422c     A7 EA C1 FA | 	rdbyte	result1, fp
04230     F5 EA 31 F9 | 	getword	result1, result1, #0
04234     02 EA 65 F0 | 	shl	result1, #2
04238     F5 0A 02 F1 | 	add	local01, result1
0423c     01 4E 85 F1 | 	sub	fp, #1
04240     A7 EA C1 FA | 	rdbyte	result1, fp
04244     03 EA 05 F5 | 	and	result1, #3
04248     F5 EA 31 F9 | 	getword	result1, result1, #0
0424c     0A EA 65 F0 | 	shl	result1, #10
04250     F5 0A 02 F1 | 	add	local01, result1
04254     01 0A 06 F1 | 	add	local01, #1
04258     0A 4E 05 F1 | 	add	fp, #10
0425c     A7 0A 62 FC | 	wrlong	local01, fp
04260     1C 4E 85 F1 | 	sub	fp, #28
04264     A7 0A 02 FB | 	rdlong	local01, fp
04268     1C 4E 05 F1 | 	add	fp, #28
0426c     A7 EA 01 FB | 	rdlong	result1, fp
04270     14 4E 85 F1 | 	sub	fp, #20
04274     A7 04 C2 FA | 	rdbyte	arg03, fp
04278     14 4E 85 F1 | 	sub	fp, #20
0427c     09 04 86 F1 | 	sub	arg03, #9
04280     02 EB 61 F0 | 	shl	result1, arg03
04284     05 EB 61 FC | 	wrlong	result1, local01
04288                 | LR__0694
04288     10 4E 05 F1 | 	add	fp, #16
0428c     A7 00 68 FC | 	wrlong	#0, fp
04290     10 4E 85 F1 | 	sub	fp, #16
04294                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
04294                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
04294                 | ' 					*(LBA_t*)buff = cs << (n - 9);
04294                 | ' 				}
04294                 | ' 				res = RES_OK;
04294                 | ' 			}
04294                 | ' 			break;
04294     28 00 90 FD | 	jmp	#LR__0697
04298                 | LR__0695
04298     0C 4E 05 F1 | 	add	fp, #12
0429c     A7 0A 02 FB | 	rdlong	local01, fp
042a0     05 01 69 FC | 	wrlong	#128, local01
042a4     04 4E 05 F1 | 	add	fp, #4
042a8     A7 00 68 FC | 	wrlong	#0, fp
042ac     10 4E 85 F1 | 	sub	fp, #16
042b0                 | ' 			*(DWORD*)buff = 128;
042b0                 | ' 			res = RES_OK;
042b0                 | ' 			break;
042b0     0C 00 90 FD | 	jmp	#LR__0697
042b4                 | LR__0696
042b4     10 4E 05 F1 | 	add	fp, #16
042b8     A7 08 68 FC | 	wrlong	#4, fp
042bc     10 4E 85 F1 | 	sub	fp, #16
042c0                 | LR__0697
042c0     74 77 B0 FD | 	call	#_fatfs_cc_deselect_0605
042c4                 | ' 			res = RES_PARERR;
042c4                 | ' 	}
042c4                 | ' 
042c4                 | ' 	deselect();
042c4                 | ' 
042c4                 | ' 	return res;
042c4     10 4E 05 F1 | 	add	fp, #16
042c8     A7 EA 01 FB | 	rdlong	result1, fp
042cc     10 4E 85 F1 | 	sub	fp, #16
042d0                 | LR__0698
042d0     A7 F0 03 F6 | 	mov	ptra, fp
042d4     B2 00 A0 FD | 	call	#popregs_
042d8                 | _fatfs_cc_disk_ioctl_ret
042d8     2D 00 64 FD | 	ret
042dc                 | 
042dc                 | _fatfs_cc_disk_setpins
042dc     00 00 0E F2 | 	cmp	arg01, #0 wz
042e0     01 EA 65 56 |  if_ne	neg	result1, #1
042e4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
042e8     01 00 00 FF 
042ec     10 E2 05 F1 | 	add	objptr, ##528
042f0     F1 02 62 FC | 	wrlong	arg02, objptr
042f4     04 E2 05 F1 | 	add	objptr, #4
042f8     F1 04 62 FC | 	wrlong	arg03, objptr
042fc     04 E2 05 F1 | 	add	objptr, #4
04300     F1 06 62 FC | 	wrlong	arg04, objptr
04304     04 E2 05 F1 | 	add	objptr, #4
04308     F1 08 62 FC | 	wrlong	arg05, objptr
0430c     01 00 00 FF 
04310     1C E2 85 F1 | 	sub	objptr, ##540
04314     00 EA 05 F6 | 	mov	result1, #0
04318                 | _fatfs_cc_disk_setpins_ret
04318     2D 00 64 FD | 	ret
0431c                 | 
0431c                 | _fatfs_cc_tchar2uni
0431c     00 EF 01 FB | 	rdlong	_var01, arg01
04320     F7 F0 01 F6 | 	mov	_var02, _var01
04324     01 EE 05 F1 | 	add	_var01, #1
04328     F7 F2 01 F6 | 	mov	_var03, _var01
0432c     F8 F4 C1 FA | 	rdbyte	_var04, _var02
04330     80 F4 CD F7 | 	test	_var04, #128 wz
04334     E8 00 90 AD |  if_e	jmp	#LR__0707
04338     FA F6 01 F6 | 	mov	_var05, _var04
0433c     E0 F6 05 F5 | 	and	_var05, #224
04340     C0 F6 0D F2 | 	cmp	_var05, #192 wz
04344     1F F4 05 A5 |  if_e	and	_var04, #31
04348     01 F8 05 A6 |  if_e	mov	_var06, #1
0434c     34 00 90 AD |  if_e	jmp	#LR__0701
04350     FA F6 01 F6 | 	mov	_var05, _var04
04354     F0 F6 05 F5 | 	and	_var05, #240
04358     E0 F6 0D F2 | 	cmp	_var05, #224 wz
0435c     FA F4 41 A8 |  if_e	getnib	_var04, _var04, #0
04360     02 F8 05 A6 |  if_e	mov	_var06, #2
04364     1C 00 90 AD |  if_e	jmp	#LR__0700
04368     FA F6 01 F6 | 	mov	_var05, _var04
0436c     F8 F6 05 F5 | 	and	_var05, #248
04370     F0 F6 0D F2 | 	cmp	_var05, #240 wz
04374     07 F4 05 A5 |  if_e	and	_var04, #7
04378     03 F8 05 A6 |  if_e	mov	_var06, #3
0437c                 | ' 			return 0xFFFFFFFF;
0437c     01 EA 65 56 |  if_ne	neg	result1, #1
04380     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
04384                 | LR__0700
04384                 | LR__0701
04384                 | ' 		}
04384                 | ' 		do {
04384                 | LR__0702
04384     F9 FA C1 FA | 	rdbyte	_var07, _var03
04388     FD F6 E1 F8 | 	getbyte	_var05, _var07, #0
0438c     C0 F6 05 F5 | 	and	_var05, #192
04390     80 F6 0D F2 | 	cmp	_var05, #128 wz
04394     01 F2 05 F1 | 	add	_var03, #1
04398     01 EA 65 56 |  if_ne	neg	result1, #1
0439c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
043a0     06 F4 65 F0 | 	shl	_var04, #6
043a4     FD F0 E1 F8 | 	getbyte	_var02, _var07, #0
043a8     3F F0 05 F5 | 	and	_var02, #63
043ac     F8 F4 41 F5 | 	or	_var04, _var02
043b0     F4 F9 6D FB | 	djnz	_var06, #LR__0702
043b4     80 F4 15 F2 | 	cmp	_var04, #128 wc
043b8     24 00 90 CD |  if_b	jmp	#LR__0704
043bc     6C 00 00 FF 
043c0     00 F4 15 F2 | 	cmp	_var04, ##55296 wc
043c4     0C 00 90 CD |  if_b	jmp	#LR__0703
043c8     70 00 00 FF 
043cc     00 F4 15 F2 | 	cmp	_var04, ##57344 wc
043d0     0C 00 90 CD |  if_b	jmp	#LR__0704
043d4                 | LR__0703
043d4     80 08 00 FF 
043d8     00 F4 15 F2 | 	cmp	_var04, ##1114112 wc
043dc     08 00 90 CD |  if_b	jmp	#LR__0705
043e0                 | LR__0704
043e0     01 EA 65 F6 | 	neg	result1, #1
043e4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
043e8                 | LR__0705
043e8     80 00 00 FF 
043ec     00 F4 15 F2 | 	cmp	_var04, ##65536 wc
043f0     2C 00 90 CD |  if_b	jmp	#LR__0706
043f4     FA F0 01 F6 | 	mov	_var02, _var04
043f8     80 00 00 FF 
043fc     00 F0 85 F1 | 	sub	_var02, ##65536
04400     06 F0 65 F0 | 	shl	_var02, #6
04404     80 FF 01 FF 
04408     00 F0 05 F5 | 	and	_var02, ##67043328
0440c     6E 00 6C FF 
04410     00 F6 05 F6 | 	mov	_var05, ##-671032320
04414     F8 F6 41 F5 | 	or	_var05, _var02
04418     09 F4 45 F7 | 	zerox	_var04, #9
0441c     FB F4 41 F5 | 	or	_var04, _var05
04420                 | LR__0706
04420                 | LR__0707
04420     00 F3 61 FC | 	wrlong	_var03, arg01
04424                 | ' 	}
04424                 | ' #line 811 "ff.c"
04424                 | ' 	*str = p;
04424                 | ' 	return uc;
04424     FA EA 01 F6 | 	mov	result1, _var04
04428                 | _fatfs_cc_tchar2uni_ret
04428     2D 00 64 FD | 	ret
0442c                 | 
0442c                 | _fatfs_cc_put_utf
0442c     80 00 16 F2 | 	cmp	arg01, #128 wc
04430     18 00 90 3D |  if_ae	jmp	#LR__0710
04434     01 04 16 F2 | 	cmp	arg03, #1 wc
04438     00 EA 05 C6 |  if_b	mov	result1, #0
0443c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
04440     01 01 42 FC | 	wrbyte	arg01, arg02
04444                 | ' 		*buf = (TCHAR)chr;
04444                 | ' 		return 1;
04444     01 EA 05 F6 | 	mov	result1, #1
04448     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
0444c                 | LR__0710
0444c     04 00 00 FF 
04450     00 00 16 F2 | 	cmp	arg01, ##2048 wc
04454     40 00 90 3D |  if_ae	jmp	#LR__0711
04458     02 04 16 F2 | 	cmp	arg03, #2 wc
0445c     00 EA 05 C6 |  if_b	mov	result1, #0
04460     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
04464     00 EB 01 F6 | 	mov	result1, arg01
04468     06 EA 45 F0 | 	shr	result1, #6
0446c     1F EA 05 F5 | 	and	result1, #31
04470     C0 04 06 F6 | 	mov	arg03, #192
04474     F5 04 42 F5 | 	or	arg03, result1
04478     01 05 42 FC | 	wrbyte	arg03, arg02
0447c     01 02 06 F1 | 	add	arg02, #1
04480     3F 00 06 F5 | 	and	arg01, #63
04484     80 EA 05 F6 | 	mov	result1, #128
04488     00 EB 41 F5 | 	or	result1, arg01
0448c     01 EB 41 FC | 	wrbyte	result1, arg02
04490                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
04490                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
04490                 | ' 		return 2;
04490     02 EA 05 F6 | 	mov	result1, #2
04494     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
04498                 | LR__0711
04498     80 00 00 FF 
0449c     00 00 16 F2 | 	cmp	arg01, ##65536 wc
044a0     70 00 90 3D |  if_ae	jmp	#LR__0714
044a4     03 04 16 F2 | 	cmp	arg03, #3 wc
044a8     18 00 90 CD |  if_b	jmp	#LR__0712
044ac     6C 00 00 FF 
044b0     00 00 16 F2 | 	cmp	arg01, ##55296 wc
044b4     14 00 90 CD |  if_b	jmp	#LR__0713
044b8     70 00 00 FF 
044bc     00 00 16 F2 | 	cmp	arg01, ##57344 wc
044c0     08 00 90 3D |  if_ae	jmp	#LR__0713
044c4                 | LR__0712
044c4     00 EA 05 F6 | 	mov	result1, #0
044c8     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
044cc                 | LR__0713
044cc     00 EB 59 F8 | 	getnib	result1, arg01, #3
044d0     E0 04 06 F6 | 	mov	arg03, #224
044d4     F5 04 42 F5 | 	or	arg03, result1
044d8     01 05 42 FC | 	wrbyte	arg03, arg02
044dc     01 02 06 F1 | 	add	arg02, #1
044e0     00 EB 01 F6 | 	mov	result1, arg01
044e4     06 EA 45 F0 | 	shr	result1, #6
044e8     3F EA 05 F5 | 	and	result1, #63
044ec     80 04 06 F6 | 	mov	arg03, #128
044f0     F5 04 42 F5 | 	or	arg03, result1
044f4     01 05 42 FC | 	wrbyte	arg03, arg02
044f8     01 02 06 F1 | 	add	arg02, #1
044fc     3F 00 06 F5 | 	and	arg01, #63
04500     80 EA 05 F6 | 	mov	result1, #128
04504     00 EB 41 F5 | 	or	result1, arg01
04508     01 EB 41 FC | 	wrbyte	result1, arg02
0450c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
0450c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
0450c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
0450c                 | ' 		return 3;
0450c     03 EA 05 F6 | 	mov	result1, #3
04510     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
04514                 | LR__0714
04514     04 04 16 F2 | 	cmp	arg03, #4 wc
04518     00 EA 05 C6 |  if_b	mov	result1, #0
0451c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
04520     00 EF 01 F6 | 	mov	_var01, arg01
04524     E0 EF 05 F4 | 	bitl	_var01, #480
04528     00 00 6C FF 
0452c     00 EE 85 F1 | 	sub	_var01, ##-671088640
04530     06 EE 45 F0 | 	shr	_var01, #6
04534     00 01 32 F9 | 	getword	arg01, arg01, #0
04538     6E 00 00 FF 
0453c     00 00 86 F1 | 	sub	arg01, ##56320
04540     00 08 00 FF 
04544     00 EE 15 F2 | 	cmp	_var01, ##1048576 wc
04548     02 00 00 CF 
0454c     00 00 16 C2 |  if_b	cmp	arg01, ##1024 wc
04550     00 EA 05 36 |  if_ae	mov	result1, #0
04554     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
04558     00 EF 41 F5 | 	or	_var01, arg01
0455c     80 00 00 FF 
04560     00 EE 05 F1 | 	add	_var01, ##65536
04564     F7 EA 01 F6 | 	mov	result1, _var01
04568     12 EA 45 F0 | 	shr	result1, #18
0456c     07 EA 05 F5 | 	and	result1, #7
04570     F0 04 06 F6 | 	mov	arg03, #240
04574     F5 04 42 F5 | 	or	arg03, result1
04578     01 05 42 FC | 	wrbyte	arg03, arg02
0457c     01 02 06 F1 | 	add	arg02, #1
04580     F7 EA 01 F6 | 	mov	result1, _var01
04584     0C EA 45 F0 | 	shr	result1, #12
04588     3F EA 05 F5 | 	and	result1, #63
0458c     80 04 06 F6 | 	mov	arg03, #128
04590     F5 04 42 F5 | 	or	arg03, result1
04594     01 05 42 FC | 	wrbyte	arg03, arg02
04598     01 02 06 F1 | 	add	arg02, #1
0459c     F7 EA 01 F6 | 	mov	result1, _var01
045a0     06 EA 45 F0 | 	shr	result1, #6
045a4     3F EA 05 F5 | 	and	result1, #63
045a8     80 04 06 F6 | 	mov	arg03, #128
045ac     F5 04 42 F5 | 	or	arg03, result1
045b0     01 05 42 FC | 	wrbyte	arg03, arg02
045b4     01 02 06 F1 | 	add	arg02, #1
045b8     3F EE 05 F5 | 	and	_var01, #63
045bc     80 EA 05 F6 | 	mov	result1, #128
045c0     F7 EA 41 F5 | 	or	result1, _var01
045c4     01 EB 41 FC | 	wrbyte	result1, arg02
045c8                 | ' 	chr = (hc | chr) + 0x10000;
045c8                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
045c8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
045c8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
045c8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
045c8                 | ' 	return 4;
045c8     04 EA 05 F6 | 	mov	result1, #4
045cc                 | _fatfs_cc_put_utf_ret
045cc     2D 00 64 FD | 	ret
045d0                 | 
045d0                 | _fatfs_cc_sync_window
045d0     02 4A 05 F6 | 	mov	COUNT_, #2
045d4     A8 00 A0 FD | 	call	#pushregs_
045d8     00 0B 02 F6 | 	mov	local01, arg01
045dc     00 0C 06 F6 | 	mov	local02, #0
045e0     03 0A 06 F1 | 	add	local01, #3
045e4     05 EB C9 FA | 	rdbyte	result1, local01 wz
045e8     03 0A 86 F1 | 	sub	local01, #3
045ec     A4 00 90 AD |  if_e	jmp	#LR__0722
045f0     01 0A 06 F1 | 	add	local01, #1
045f4     05 01 C2 FA | 	rdbyte	arg01, local01
045f8     33 0A 06 F1 | 	add	local01, #51
045fc     05 03 02 F6 | 	mov	arg02, local01
04600     04 0A 86 F1 | 	sub	local01, #4
04604     05 05 02 FB | 	rdlong	arg03, local01
04608     30 0A 86 F1 | 	sub	local01, #48
0460c     01 06 06 F6 | 	mov	arg04, #1
04610     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
04614     00 EA 0D F2 | 	cmp	result1, #0 wz
04618     74 00 90 5D |  if_ne	jmp	#LR__0720
0461c     03 0A 06 F1 | 	add	local01, #3
04620     05 01 48 FC | 	wrbyte	#0, local01
04624     2D 0A 06 F1 | 	add	local01, #45
04628     05 EB 01 FB | 	rdlong	result1, local01
0462c     0C 0A 86 F1 | 	sub	local01, #12
04630     05 07 02 FB | 	rdlong	arg04, local01
04634     03 EB 81 F1 | 	sub	result1, arg04
04638     08 0A 86 F1 | 	sub	local01, #8
0463c     05 07 02 FB | 	rdlong	arg04, local01
04640     1C 0A 86 F1 | 	sub	local01, #28
04644     03 EB 11 F2 | 	cmp	result1, arg04 wc
04648     48 00 90 3D |  if_ae	jmp	#LR__0721
0464c     02 0A 06 F1 | 	add	local01, #2
04650     05 07 C2 FA | 	rdbyte	arg04, local01
04654     02 0A 86 F1 | 	sub	local01, #2
04658     02 06 0E F2 | 	cmp	arg04, #2 wz
0465c     34 00 90 5D |  if_ne	jmp	#LR__0721
04660     01 0A 06 F1 | 	add	local01, #1
04664     05 01 C2 FA | 	rdbyte	arg01, local01
04668     33 0A 06 F1 | 	add	local01, #51
0466c     05 03 02 F6 | 	mov	arg02, local01
04670     04 0A 86 F1 | 	sub	local01, #4
04674     05 05 02 FB | 	rdlong	arg03, local01
04678     14 0A 86 F1 | 	sub	local01, #20
0467c     05 0B 02 FB | 	rdlong	local01, local01
04680     05 05 02 F1 | 	add	arg03, local01
04684     01 06 06 F6 | 	mov	arg04, #1
04688     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
0468c     04 00 90 FD | 	jmp	#LR__0721
04690                 | LR__0720
04690     01 0C 06 F6 | 	mov	local02, #1
04694                 | LR__0721
04694                 | LR__0722
04694                 | ' 			res = FR_DISK_ERR;
04694                 | ' 		}
04694                 | ' 	}
04694                 | ' 	return res;
04694     06 EB 01 F6 | 	mov	result1, local02
04698     A7 F0 03 F6 | 	mov	ptra, fp
0469c     B2 00 A0 FD | 	call	#popregs_
046a0                 | _fatfs_cc_sync_window_ret
046a0     2D 00 64 FD | 	ret
046a4                 | 
046a4                 | _fatfs_cc_move_window
046a4     03 4A 05 F6 | 	mov	COUNT_, #3
046a8     A8 00 A0 FD | 	call	#pushregs_
046ac     00 0B 02 F6 | 	mov	local01, arg01
046b0     01 0D 02 F6 | 	mov	local02, arg02
046b4     00 0E 06 F6 | 	mov	local03, #0
046b8     30 0A 06 F1 | 	add	local01, #48
046bc     05 07 02 FB | 	rdlong	arg04, local01
046c0     30 0A 86 F1 | 	sub	local01, #48
046c4     03 0D 0A F2 | 	cmp	local02, arg04 wz
046c8     40 00 90 AD |  if_e	jmp	#LR__0731
046cc     05 01 02 F6 | 	mov	arg01, local01
046d0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
046d4     F5 0E 0A F6 | 	mov	local03, result1 wz
046d8     30 00 90 5D |  if_ne	jmp	#LR__0730
046dc     01 0A 06 F1 | 	add	local01, #1
046e0     05 01 C2 FA | 	rdbyte	arg01, local01
046e4     33 0A 06 F1 | 	add	local01, #51
046e8     05 03 02 F6 | 	mov	arg02, local01
046ec     06 05 02 F6 | 	mov	arg03, local02
046f0     01 06 06 F6 | 	mov	arg04, #1
046f4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
046f8     00 EA 0D F2 | 	cmp	result1, #0 wz
046fc     01 0C 66 56 |  if_ne	neg	local02, #1
04700     01 0E 06 56 |  if_ne	mov	local03, #1
04704     04 0A 86 F1 | 	sub	local01, #4
04708     05 0D 62 FC | 	wrlong	local02, local01
0470c                 | LR__0730
0470c                 | LR__0731
0470c                 | ' 				sect = (LBA_t)0 - 1;
0470c                 | ' 				res = FR_DISK_ERR;
0470c                 | ' 			}
0470c                 | ' 			fs->winsect = sect;
0470c                 | ' 		}
0470c                 | ' 	}
0470c                 | ' 	return res;
0470c     07 EB 01 F6 | 	mov	result1, local03
04710     A7 F0 03 F6 | 	mov	ptra, fp
04714     B2 00 A0 FD | 	call	#popregs_
04718                 | _fatfs_cc_move_window_ret
04718     2D 00 64 FD | 	ret
0471c                 | 
0471c                 | _fatfs_cc_sync_fs
0471c     02 4A 05 F6 | 	mov	COUNT_, #2
04720     A8 00 A0 FD | 	call	#pushregs_
04724     00 0B 02 F6 | 	mov	local01, arg01
04728     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
0472c     F5 0C 0A F6 | 	mov	local02, result1 wz
04730     D8 00 90 5D |  if_ne	jmp	#LR__0741
04734     05 07 C2 FA | 	rdbyte	arg04, local01
04738     03 06 0E F2 | 	cmp	arg04, #3 wz
0473c     04 0A 06 A1 |  if_e	add	local01, #4
04740     05 07 C2 AA |  if_e	rdbyte	arg04, local01
04744     04 0A 86 A1 |  if_e	sub	local01, #4
04748     01 06 0E A2 |  if_e	cmp	arg04, #1 wz
0474c     A0 00 90 5D |  if_ne	jmp	#LR__0740
04750     34 0A 06 F1 | 	add	local01, #52
04754     05 01 02 F6 | 	mov	arg01, local01
04758     00 02 06 F6 | 	mov	arg02, #0
0475c     09 04 C6 F9 | 	decod	arg03, #9
04760     98 00 A0 FD | 	call	#\builtin_bytefill_
04764     05 01 02 F6 | 	mov	arg01, local01
04768     FE 01 06 F1 | 	add	arg01, #510
0476c     55 00 80 FF 
04770     00 AB 58 FC | 	wrword	##43605, arg01
04774     A9 B0 A0 FF 
04778     05 A5 68 FC | 	wrlong	##1096897106, local01
0477c     05 01 02 F6 | 	mov	arg01, local01
04780     E4 01 06 F1 | 	add	arg01, #484
04784     B9 A0 B0 FF 
04788     00 E5 68 FC | 	wrlong	##1631679090, arg01
0478c     05 01 02 F6 | 	mov	arg01, local01
04790     E8 01 06 F1 | 	add	arg01, #488
04794     20 0A 86 F1 | 	sub	local01, #32
04798     05 03 02 FB | 	rdlong	arg02, local01
0479c     00 03 62 FC | 	wrlong	arg02, arg01
047a0     20 0A 06 F1 | 	add	local01, #32
047a4     05 01 02 F6 | 	mov	arg01, local01
047a8     EC 01 06 F1 | 	add	arg01, #492
047ac     24 0A 86 F1 | 	sub	local01, #36
047b0     05 03 02 FB | 	rdlong	arg02, local01
047b4     00 03 62 FC | 	wrlong	arg02, arg01
047b8     10 0A 06 F1 | 	add	local01, #16
047bc     05 05 02 FB | 	rdlong	arg03, local01
047c0     01 04 06 F1 | 	add	arg03, #1
047c4     10 0A 06 F1 | 	add	local01, #16
047c8     05 05 62 FC | 	wrlong	arg03, local01
047cc     2F 0A 86 F1 | 	sub	local01, #47
047d0     05 01 C2 FA | 	rdbyte	arg01, local01
047d4     33 0A 06 F1 | 	add	local01, #51
047d8     05 03 02 F6 | 	mov	arg02, local01
047dc     01 06 06 F6 | 	mov	arg04, #1
047e0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
047e4     30 0A 86 F1 | 	sub	local01, #48
047e8     05 01 48 FC | 	wrbyte	#0, local01
047ec     04 0A 86 F1 | 	sub	local01, #4
047f0                 | LR__0740
047f0     01 0A 06 F1 | 	add	local01, #1
047f4     05 01 C2 FA | 	rdbyte	arg01, local01
047f8     00 02 06 F6 | 	mov	arg02, #0
047fc     00 04 06 F6 | 	mov	arg03, #0
04800     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
04804     00 EA 0D F2 | 	cmp	result1, #0 wz
04808     01 0C 06 56 |  if_ne	mov	local02, #1
0480c                 | LR__0741
0480c                 | ' 	}
0480c                 | ' 
0480c                 | ' 	return res;
0480c     06 EB 01 F6 | 	mov	result1, local02
04810     A7 F0 03 F6 | 	mov	ptra, fp
04814     B2 00 A0 FD | 	call	#popregs_
04818                 | _fatfs_cc_sync_fs_ret
04818     2D 00 64 FD | 	ret
0481c                 | 
0481c                 | _fatfs_cc_clst2sect
0481c     02 02 86 F1 | 	sub	arg02, #2
04820     18 00 06 F1 | 	add	arg01, #24
04824     00 EF 01 FB | 	rdlong	_var01, arg01
04828     18 00 86 F1 | 	sub	arg01, #24
0482c     02 EE 85 F1 | 	sub	_var01, #2
04830     F7 02 12 F2 | 	cmp	arg02, _var01 wc
04834     00 EA 05 36 |  if_ae	mov	result1, #0
04838     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
0483c     0A 00 06 F1 | 	add	arg01, #10
04840     00 EF E1 FA | 	rdword	_var01, arg01
04844     01 EF 01 FD | 	qmul	_var01, arg02
04848                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
04848     22 00 06 F1 | 	add	arg01, #34
0484c     00 EB 01 FB | 	rdlong	result1, arg01
04850     18 EE 61 FD | 	getqx	_var01
04854     F7 EA 01 F1 | 	add	result1, _var01
04858                 | _fatfs_cc_clst2sect_ret
04858     2D 00 64 FD | 	ret
0485c                 | 
0485c                 | _fatfs_cc_get_fat
0485c     07 4A 05 F6 | 	mov	COUNT_, #7
04860     A8 00 A0 FD | 	call	#pushregs_
04864     01 0B 02 F6 | 	mov	local01, arg02
04868     00 0D 02 FB | 	rdlong	local02, arg01
0486c     02 0A 16 F2 | 	cmp	local01, #2 wc
04870     14 00 90 CD |  if_b	jmp	#LR__0750
04874     18 0C 06 F1 | 	add	local02, #24
04878     06 0F 02 FB | 	rdlong	local03, local02
0487c     18 0C 86 F1 | 	sub	local02, #24
04880     07 0B 12 F2 | 	cmp	local01, local03 wc
04884     08 00 90 CD |  if_b	jmp	#LR__0751
04888                 | LR__0750
04888     01 10 06 F6 | 	mov	local04, #1
0488c     60 01 90 FD | 	jmp	#LR__0758
04890                 | LR__0751
04890     01 10 66 F6 | 	neg	local04, #1
04894                 | ' 		val = 0xFFFFFFFF;
04894                 | ' 
04894                 | ' 		switch (fs->fs_type) {
04894     06 13 C2 FA | 	rdbyte	local05, local02
04898     01 12 86 F1 | 	sub	local05, #1
0489c     03 12 26 F3 | 	fle	local05, #3
048a0     30 12 62 FD | 	jmprel	local05
048a4                 | LR__0752
048a4     0C 00 90 FD | 	jmp	#LR__0753
048a8     B8 00 90 FD | 	jmp	#LR__0754
048ac     F8 00 90 FD | 	jmp	#LR__0755
048b0     38 01 90 FD | 	jmp	#LR__0756
048b4                 | LR__0753
048b4     05 13 02 F6 | 	mov	local05, local01
048b8     05 01 02 F6 | 	mov	arg01, local01
048bc     01 00 46 F0 | 	shr	arg01, #1
048c0     00 13 02 F1 | 	add	local05, arg01
048c4     06 01 02 F6 | 	mov	arg01, local02
048c8     09 15 02 F6 | 	mov	local06, local05
048cc     09 14 46 F0 | 	shr	local06, #9
048d0     24 0C 06 F1 | 	add	local02, #36
048d4     06 03 02 FB | 	rdlong	arg02, local02
048d8     24 0C 86 F1 | 	sub	local02, #36
048dc     0A 03 02 F1 | 	add	arg02, local06
048e0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
048e4     00 EA 0D F2 | 	cmp	result1, #0 wz
048e8     04 01 90 5D |  if_ne	jmp	#LR__0757
048ec     09 15 02 F6 | 	mov	local06, local05
048f0     FF 15 06 F5 | 	and	local06, #511
048f4     34 0C 06 F1 | 	add	local02, #52
048f8     06 15 02 F1 | 	add	local06, local02
048fc     0A 17 C2 FA | 	rdbyte	local07, local06
04900     34 0C 86 F1 | 	sub	local02, #52
04904     06 01 02 F6 | 	mov	arg01, local02
04908     01 12 06 F1 | 	add	local05, #1
0490c     09 15 02 F6 | 	mov	local06, local05
04910     09 14 46 F0 | 	shr	local06, #9
04914     24 0C 06 F1 | 	add	local02, #36
04918     06 03 02 FB | 	rdlong	arg02, local02
0491c     24 0C 86 F1 | 	sub	local02, #36
04920     0A 03 02 F1 | 	add	arg02, local06
04924     7C FD BF FD | 	call	#_fatfs_cc_move_window
04928     00 EA 0D F2 | 	cmp	result1, #0 wz
0492c     C0 00 90 5D |  if_ne	jmp	#LR__0757
04930     FF 13 06 F5 | 	and	local05, #511
04934     34 0C 06 F1 | 	add	local02, #52
04938     06 13 02 F1 | 	add	local05, local02
0493c     09 15 C2 FA | 	rdbyte	local06, local05
04940     08 14 66 F0 | 	shl	local06, #8
04944     0A 17 42 F5 | 	or	local07, local06
04948     01 0A CE F7 | 	test	local01, #1 wz
0494c     04 16 46 50 |  if_ne	shr	local07, #4
04950     0B 0F 02 56 |  if_ne	mov	local03, local07
04954     0B 16 46 A7 |  if_e	zerox	local07, #11
04958     0B 0F 02 A6 |  if_e	mov	local03, local07
0495c     07 11 02 F6 | 	mov	local04, local03
04960                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
04960                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
04960                 | ' 			break;
04960     8C 00 90 FD | 	jmp	#LR__0757
04964                 | LR__0754
04964     06 01 02 F6 | 	mov	arg01, local02
04968     05 15 02 F6 | 	mov	local06, local01
0496c     08 14 46 F0 | 	shr	local06, #8
04970     24 0C 06 F1 | 	add	local02, #36
04974     06 03 02 FB | 	rdlong	arg02, local02
04978     24 0C 86 F1 | 	sub	local02, #36
0497c     0A 03 02 F1 | 	add	arg02, local06
04980     20 FD BF FD | 	call	#_fatfs_cc_move_window
04984     00 EA 0D F2 | 	cmp	result1, #0 wz
04988     64 00 90 5D |  if_ne	jmp	#LR__0757
0498c     34 0C 06 F1 | 	add	local02, #52
04990     01 0A 66 F0 | 	shl	local01, #1
04994     FF 0B 06 F5 | 	and	local01, #511
04998     05 0D 02 F1 | 	add	local02, local01
0499c                 | ' {
0499c                 | ' 
0499c                 | ' 	return *((WORD*)ptr);
0499c     06 EB E1 FA | 	rdword	result1, local02
049a0     F5 10 32 F9 | 	getword	local04, result1, #0
049a4                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
049a4                 | ' 			break;
049a4     48 00 90 FD | 	jmp	#LR__0757
049a8                 | LR__0755
049a8     06 01 02 F6 | 	mov	arg01, local02
049ac     05 15 02 F6 | 	mov	local06, local01
049b0     07 14 46 F0 | 	shr	local06, #7
049b4     24 0C 06 F1 | 	add	local02, #36
049b8     06 03 02 FB | 	rdlong	arg02, local02
049bc     24 0C 86 F1 | 	sub	local02, #36
049c0     0A 03 02 F1 | 	add	arg02, local06
049c4     DC FC BF FD | 	call	#_fatfs_cc_move_window
049c8     00 EA 0D F2 | 	cmp	result1, #0 wz
049cc     20 00 90 5D |  if_ne	jmp	#LR__0757
049d0     34 0C 06 F1 | 	add	local02, #52
049d4     02 0A 66 F0 | 	shl	local01, #2
049d8     FF 0B 06 F5 | 	and	local01, #511
049dc     05 0D 02 F1 | 	add	local02, local01
049e0                 | ' {
049e0                 | ' 
049e0                 | ' 	return *((DWORD*)ptr);
049e0     06 11 02 FB | 	rdlong	local04, local02
049e4     7C 10 06 F4 | 	bitl	local04, #124
049e8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
049e8                 | ' 			break;
049e8     04 00 90 FD | 	jmp	#LR__0757
049ec                 | LR__0756
049ec     01 10 06 F6 | 	mov	local04, #1
049f0                 | LR__0757
049f0                 | LR__0758
049f0                 | ' 			val = 1;
049f0                 | ' 		}
049f0                 | ' 	}
049f0                 | ' 
049f0                 | ' 	return val;
049f0     08 EB 01 F6 | 	mov	result1, local04
049f4     A7 F0 03 F6 | 	mov	ptra, fp
049f8     B2 00 A0 FD | 	call	#popregs_
049fc                 | _fatfs_cc_get_fat_ret
049fc     2D 00 64 FD | 	ret
04a00                 | 
04a00                 | _fatfs_cc_put_fat
04a00     08 4A 05 F6 | 	mov	COUNT_, #8
04a04     A8 00 A0 FD | 	call	#pushregs_
04a08     00 0B 02 F6 | 	mov	local01, arg01
04a0c     01 0D 02 F6 | 	mov	local02, arg02
04a10     02 0F 02 F6 | 	mov	local03, arg03
04a14     02 10 06 F6 | 	mov	local04, #2
04a18     02 0C 16 F2 | 	cmp	local02, #2 wc
04a1c     E0 01 90 CD |  if_b	jmp	#LR__0767
04a20     18 0A 06 F1 | 	add	local01, #24
04a24     05 13 02 FB | 	rdlong	local05, local01
04a28     18 0A 86 F1 | 	sub	local01, #24
04a2c     09 0D 12 F2 | 	cmp	local02, local05 wc
04a30     CC 01 90 3D |  if_ae	jmp	#LR__0767
04a34                 | ' 		switch (fs->fs_type) {
04a34     05 15 C2 FA | 	rdbyte	local06, local01
04a38     01 14 86 F1 | 	sub	local06, #1
04a3c     03 14 26 F3 | 	fle	local06, #3
04a40     30 14 62 FD | 	jmprel	local06
04a44                 | LR__0760
04a44     0C 00 90 FD | 	jmp	#LR__0761
04a48     F8 00 90 FD | 	jmp	#LR__0764
04a4c     40 01 90 FD | 	jmp	#LR__0765
04a50     AC 01 90 FD | 	jmp	#LR__0766
04a54                 | LR__0761
04a54     06 17 02 F6 | 	mov	local07, local02
04a58     06 13 02 F6 | 	mov	local05, local02
04a5c     01 12 46 F0 | 	shr	local05, #1
04a60     09 17 02 F1 | 	add	local07, local05
04a64     05 01 02 F6 | 	mov	arg01, local01
04a68     0B 15 02 F6 | 	mov	local06, local07
04a6c     09 14 46 F0 | 	shr	local06, #9
04a70     24 0A 06 F1 | 	add	local01, #36
04a74     05 03 02 FB | 	rdlong	arg02, local01
04a78     24 0A 86 F1 | 	sub	local01, #36
04a7c     0A 03 02 F1 | 	add	arg02, local06
04a80     20 FC BF FD | 	call	#_fatfs_cc_move_window
04a84     F5 10 0A F6 | 	mov	local04, result1 wz
04a88     74 01 90 5D |  if_ne	jmp	#LR__0766
04a8c     34 0A 06 F1 | 	add	local01, #52
04a90     05 19 02 F6 | 	mov	local08, local01
04a94     0B 13 02 F6 | 	mov	local05, local07
04a98     FF 13 06 F5 | 	and	local05, #511
04a9c     09 19 02 F1 | 	add	local08, local05
04aa0     01 0C CE F7 | 	test	local02, #1 wz
04aa4     34 0A 86 F1 | 	sub	local01, #52
04aa8     01 16 06 F1 | 	add	local07, #1
04aac     18 00 90 AD |  if_e	jmp	#LR__0762
04ab0     0C 13 C2 FA | 	rdbyte	local05, local08
04ab4     09 13 42 F8 | 	getnib	local05, local05, #0
04ab8     07 15 E2 F8 | 	getbyte	local06, local03, #0
04abc     04 14 66 F0 | 	shl	local06, #4
04ac0     0A 13 42 F5 | 	or	local05, local06
04ac4     04 00 90 FD | 	jmp	#LR__0763
04ac8                 | LR__0762
04ac8     07 13 02 F6 | 	mov	local05, local03
04acc                 | LR__0763
04acc     0C 13 42 FC | 	wrbyte	local05, local08
04ad0     03 0A 06 F1 | 	add	local01, #3
04ad4     05 03 48 FC | 	wrbyte	#1, local01
04ad8     03 0A 86 F1 | 	sub	local01, #3
04adc     05 01 02 F6 | 	mov	arg01, local01
04ae0     0B 19 02 F6 | 	mov	local08, local07
04ae4     09 18 46 F0 | 	shr	local08, #9
04ae8     24 0A 06 F1 | 	add	local01, #36
04aec     05 03 02 FB | 	rdlong	arg02, local01
04af0     24 0A 86 F1 | 	sub	local01, #36
04af4     0C 03 02 F1 | 	add	arg02, local08
04af8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
04afc     F5 10 0A F6 | 	mov	local04, result1 wz
04b00     FC 00 90 5D |  if_ne	jmp	#LR__0766
04b04     34 0A 06 F1 | 	add	local01, #52
04b08     05 19 02 F6 | 	mov	local08, local01
04b0c     FF 17 06 F5 | 	and	local07, #511
04b10     0B 19 02 F1 | 	add	local08, local07
04b14     01 0C CE F7 | 	test	local02, #1 wz
04b18     04 0E 46 50 |  if_ne	shr	local03, #4
04b1c     07 13 02 56 |  if_ne	mov	local05, local03
04b20     0C 13 C2 AA |  if_e	rdbyte	local05, local08
04b24     F0 12 06 A5 |  if_e	and	local05, #240
04b28     07 0F EA A8 |  if_e	getbyte	local03, local03, #1
04b2c     07 0F 42 A8 |  if_e	getnib	local03, local03, #0
04b30     07 13 42 A5 |  if_e	or	local05, local03
04b34     0C 13 42 FC | 	wrbyte	local05, local08
04b38     31 0A 86 F1 | 	sub	local01, #49
04b3c     05 03 48 FC | 	wrbyte	#1, local01
04b40                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
04b40                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
04b40                 | ' 			fs->wflag = 1;
04b40                 | ' 			break;
04b40     BC 00 90 FD | 	jmp	#LR__0766
04b44                 | LR__0764
04b44     05 01 02 F6 | 	mov	arg01, local01
04b48     06 19 02 F6 | 	mov	local08, local02
04b4c     08 18 46 F0 | 	shr	local08, #8
04b50     24 0A 06 F1 | 	add	local01, #36
04b54     05 03 02 FB | 	rdlong	arg02, local01
04b58     24 0A 86 F1 | 	sub	local01, #36
04b5c     0C 03 02 F1 | 	add	arg02, local08
04b60     40 FB BF FD | 	call	#_fatfs_cc_move_window
04b64     F5 10 0A F6 | 	mov	local04, result1 wz
04b68     94 00 90 5D |  if_ne	jmp	#LR__0766
04b6c     34 0A 06 F1 | 	add	local01, #52
04b70     05 01 02 F6 | 	mov	arg01, local01
04b74     01 0C 66 F0 | 	shl	local02, #1
04b78     FF 0D 06 F5 | 	and	local02, #511
04b7c     06 01 02 F1 | 	add	arg01, local02
04b80     00 0F 52 FC | 	wrword	local03, arg01
04b84     31 0A 86 F1 | 	sub	local01, #49
04b88     05 03 48 FC | 	wrbyte	#1, local01
04b8c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
04b8c                 | ' 			fs->wflag = 1;
04b8c                 | ' 			break;
04b8c     70 00 90 FD | 	jmp	#LR__0766
04b90                 | LR__0765
04b90     05 01 02 F6 | 	mov	arg01, local01
04b94     06 19 02 F6 | 	mov	local08, local02
04b98     07 18 46 F0 | 	shr	local08, #7
04b9c     24 0A 06 F1 | 	add	local01, #36
04ba0     05 03 02 FB | 	rdlong	arg02, local01
04ba4     24 0A 86 F1 | 	sub	local01, #36
04ba8     0C 03 02 F1 | 	add	arg02, local08
04bac     F4 FA BF FD | 	call	#_fatfs_cc_move_window
04bb0     F5 10 0A F6 | 	mov	local04, result1 wz
04bb4     48 00 90 5D |  if_ne	jmp	#LR__0766
04bb8     7C 0E 06 F4 | 	bitl	local03, #124
04bbc     34 0A 06 F1 | 	add	local01, #52
04bc0     06 19 02 F6 | 	mov	local08, local02
04bc4     02 18 66 F0 | 	shl	local08, #2
04bc8     FF 19 06 F5 | 	and	local08, #511
04bcc     05 01 02 F6 | 	mov	arg01, local01
04bd0     0C 01 02 F1 | 	add	arg01, local08
04bd4                 | ' {
04bd4                 | ' 
04bd4                 | ' 	return *((DWORD*)ptr);
04bd4     00 19 02 FB | 	rdlong	local08, arg01
04bd8     00 00 78 FF 
04bdc     00 18 06 F5 | 	and	local08, ##-268435456
04be0     0C 0F 42 F5 | 	or	local03, local08
04be4     05 01 02 F6 | 	mov	arg01, local01
04be8     02 0C 66 F0 | 	shl	local02, #2
04bec     FF 0D 06 F5 | 	and	local02, #511
04bf0     06 01 02 F1 | 	add	arg01, local02
04bf4     00 0F 62 FC | 	wrlong	local03, arg01
04bf8     31 0A 86 F1 | 	sub	local01, #49
04bfc     05 03 48 FC | 	wrbyte	#1, local01
04c00                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
04c00                 | ' 			}
04c00                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
04c00                 | ' 			fs->wflag = 1;
04c00                 | ' 			break;
04c00                 | LR__0766
04c00                 | LR__0767
04c00                 | ' 		}
04c00                 | ' 	}
04c00                 | ' 	return res;
04c00     08 EB 01 F6 | 	mov	result1, local04
04c04     A7 F0 03 F6 | 	mov	ptra, fp
04c08     B2 00 A0 FD | 	call	#popregs_
04c0c                 | _fatfs_cc_put_fat_ret
04c0c     2D 00 64 FD | 	ret
04c10                 | 
04c10                 | _fatfs_cc_remove_chain
04c10     05 4A 05 F6 | 	mov	COUNT_, #5
04c14     A8 00 A0 FD | 	call	#pushregs_
04c18     00 0B 02 F6 | 	mov	local01, arg01
04c1c     01 0D 02 F6 | 	mov	local02, arg02
04c20     02 0F 02 F6 | 	mov	local03, arg03
04c24     05 11 02 FB | 	rdlong	local04, local01
04c28     02 0C 16 F2 | 	cmp	local02, #2 wc
04c2c     14 00 90 CD |  if_b	jmp	#LR__0770
04c30     18 10 06 F1 | 	add	local04, #24
04c34     08 EB 01 FB | 	rdlong	result1, local04
04c38     18 10 86 F1 | 	sub	local04, #24
04c3c     F5 0C 12 F2 | 	cmp	local02, result1 wc
04c40     08 00 90 CD |  if_b	jmp	#LR__0771
04c44                 | LR__0770
04c44     02 EA 05 F6 | 	mov	result1, #2
04c48     CC 00 90 FD | 	jmp	#LR__0776
04c4c                 | LR__0771
04c4c     00 0E 0E F2 | 	cmp	local03, #0 wz
04c50     18 00 90 AD |  if_e	jmp	#LR__0772
04c54     07 03 02 F6 | 	mov	arg02, local03
04c58     08 01 02 F6 | 	mov	arg01, local04
04c5c     01 04 66 F6 | 	neg	arg03, #1
04c60     9C FD BF FD | 	call	#_fatfs_cc_put_fat
04c64     00 EA 0D F2 | 	cmp	result1, #0 wz
04c68     AC 00 90 5D |  if_ne	jmp	#LR__0776
04c6c                 | LR__0772
04c6c                 | ' 	}
04c6c                 | ' 
04c6c                 | ' 
04c6c                 | ' 	do {
04c6c                 | LR__0773
04c6c     06 03 02 F6 | 	mov	arg02, local02
04c70     05 01 02 F6 | 	mov	arg01, local01
04c74     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
04c78     F5 12 0A F6 | 	mov	local05, result1 wz
04c7c     94 00 90 AD |  if_e	jmp	#LR__0775
04c80     01 12 0E F2 | 	cmp	local05, #1 wz
04c84     02 EA 05 A6 |  if_e	mov	result1, #2
04c88     8C 00 90 AD |  if_e	jmp	#LR__0776
04c8c     FF FF 7F FF 
04c90     FF 13 0E F2 | 	cmp	local05, ##-1 wz
04c94     01 EA 05 A6 |  if_e	mov	result1, #1
04c98     7C 00 90 AD |  if_e	jmp	#LR__0776
04c9c     06 03 02 F6 | 	mov	arg02, local02
04ca0     08 01 02 F6 | 	mov	arg01, local04
04ca4     00 04 06 F6 | 	mov	arg03, #0
04ca8     54 FD BF FD | 	call	#_fatfs_cc_put_fat
04cac     F5 0E 0A F6 | 	mov	local03, result1 wz
04cb0     07 EB 01 56 |  if_ne	mov	result1, local03
04cb4     60 00 90 5D |  if_ne	jmp	#LR__0776
04cb8     18 10 06 F1 | 	add	local04, #24
04cbc     08 0F 02 FB | 	rdlong	local03, local04
04cc0     02 0E 86 F1 | 	sub	local03, #2
04cc4     04 10 86 F1 | 	sub	local04, #4
04cc8     08 0D 02 FB | 	rdlong	local02, local04
04ccc     14 10 86 F1 | 	sub	local04, #20
04cd0     07 0D 12 F2 | 	cmp	local02, local03 wc
04cd4     24 00 90 3D |  if_ae	jmp	#LR__0774
04cd8     14 10 06 F1 | 	add	local04, #20
04cdc     08 0F 02 FB | 	rdlong	local03, local04
04ce0     01 0E 06 F1 | 	add	local03, #1
04ce4     08 0F 62 FC | 	wrlong	local03, local04
04ce8     10 10 86 F1 | 	sub	local04, #16
04cec     08 0F C2 FA | 	rdbyte	local03, local04
04cf0     01 0E 46 F5 | 	or	local03, #1
04cf4     08 0F 42 FC | 	wrbyte	local03, local04
04cf8     04 10 86 F1 | 	sub	local04, #4
04cfc                 | LR__0774
04cfc     09 0D 02 F6 | 	mov	local02, local05
04d00     18 10 06 F1 | 	add	local04, #24
04d04     08 13 02 FB | 	rdlong	local05, local04
04d08     18 10 86 F1 | 	sub	local04, #24
04d0c     09 0D 12 F2 | 	cmp	local02, local05 wc
04d10     58 FF 9F CD |  if_b	jmp	#LR__0773
04d14                 | LR__0775
04d14                 | ' #line 1500 "ff.c"
04d14                 | ' 	return FR_OK;
04d14     00 EA 05 F6 | 	mov	result1, #0
04d18                 | LR__0776
04d18     A7 F0 03 F6 | 	mov	ptra, fp
04d1c     B2 00 A0 FD | 	call	#popregs_
04d20                 | _fatfs_cc_remove_chain_ret
04d20     2D 00 64 FD | 	ret
04d24                 | 
04d24                 | _fatfs_cc_create_chain
04d24     09 4A 05 F6 | 	mov	COUNT_, #9
04d28     A8 00 A0 FD | 	call	#pushregs_
04d2c     00 0B 02 F6 | 	mov	local01, arg01
04d30     01 0D 0A F6 | 	mov	local02, arg02 wz
04d34     05 0F 02 FB | 	rdlong	local03, local01
04d38     28 00 90 5D |  if_ne	jmp	#LR__0780
04d3c     10 0E 06 F1 | 	add	local03, #16
04d40     07 11 0A FB | 	rdlong	local04, local03 wz
04d44     10 0E 86 F1 | 	sub	local03, #16
04d48     18 0E 06 51 |  if_ne	add	local03, #24
04d4c     07 13 02 5B |  if_ne	rdlong	local05, local03
04d50     18 0E 86 51 |  if_ne	sub	local03, #24
04d54     09 11 12 52 |  if_ne	cmp	local04, local05 wc
04d58     50 00 90 4D |  if_c_and_nz	jmp	#LR__0781
04d5c     01 10 06 F6 | 	mov	local04, #1
04d60     48 00 90 FD | 	jmp	#LR__0781
04d64                 | LR__0780
04d64     06 03 02 F6 | 	mov	arg02, local02
04d68     05 01 02 F6 | 	mov	arg01, local01
04d6c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
04d70     F5 10 02 F6 | 	mov	local04, result1
04d74     02 10 16 F2 | 	cmp	local04, #2 wc
04d78     01 EA 05 C6 |  if_b	mov	result1, #1
04d7c     BC 01 90 CD |  if_b	jmp	#LR__0791
04d80     FF FF 7F FF 
04d84     FF 11 0E F2 | 	cmp	local04, ##-1 wz
04d88     08 EB 01 A6 |  if_e	mov	result1, local04
04d8c     AC 01 90 AD |  if_e	jmp	#LR__0791
04d90     18 0E 06 F1 | 	add	local03, #24
04d94     07 13 02 FB | 	rdlong	local05, local03
04d98     18 0E 86 F1 | 	sub	local03, #24
04d9c     09 11 12 F2 | 	cmp	local04, local05 wc
04da0     08 EB 01 C6 |  if_b	mov	result1, local04
04da4     94 01 90 CD |  if_b	jmp	#LR__0791
04da8     06 11 02 F6 | 	mov	local04, local02
04dac                 | LR__0781
04dac     14 0E 06 F1 | 	add	local03, #20
04db0     07 13 0A FB | 	rdlong	local05, local03 wz
04db4     14 0E 86 F1 | 	sub	local03, #20
04db8     00 EA 05 A6 |  if_e	mov	result1, #0
04dbc     7C 01 90 AD |  if_e	jmp	#LR__0791
04dc0     00 14 06 F6 | 	mov	local06, #0
04dc4     06 11 0A F2 | 	cmp	local04, local02 wz
04dc8     74 00 90 5D |  if_ne	jmp	#LR__0784
04dcc     08 15 02 F6 | 	mov	local06, local04
04dd0     01 14 06 F1 | 	add	local06, #1
04dd4     18 0E 06 F1 | 	add	local03, #24
04dd8     07 13 02 FB | 	rdlong	local05, local03
04ddc     18 0E 86 F1 | 	sub	local03, #24
04de0     09 15 12 F2 | 	cmp	local06, local05 wc
04de4     02 14 06 36 |  if_ae	mov	local06, #2
04de8     0A 03 02 F6 | 	mov	arg02, local06
04dec     05 01 02 F6 | 	mov	arg01, local01
04df0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
04df4     F5 12 02 F6 | 	mov	local05, result1
04df8     01 12 0E F2 | 	cmp	local05, #1 wz
04dfc     FF FF 7F 5F 
04e00     FF 13 0E 52 |  if_ne	cmp	local05, ##-1 wz
04e04     09 EB 01 A6 |  if_e	mov	result1, local05
04e08     30 01 90 AD |  if_e	jmp	#LR__0791
04e0c     00 12 0E F2 | 	cmp	local05, #0 wz
04e10     2C 00 90 AD |  if_e	jmp	#LR__0783
04e14     10 0E 06 F1 | 	add	local03, #16
04e18     07 17 02 FB | 	rdlong	local07, local03
04e1c     10 0E 86 F1 | 	sub	local03, #16
04e20     02 16 16 F2 | 	cmp	local07, #2 wc
04e24     14 00 90 CD |  if_b	jmp	#LR__0782
04e28     18 0E 06 F1 | 	add	local03, #24
04e2c     07 13 02 FB | 	rdlong	local05, local03
04e30     18 0E 86 F1 | 	sub	local03, #24
04e34     09 17 12 F2 | 	cmp	local07, local05 wc
04e38     0B 11 02 C6 |  if_b	mov	local04, local07
04e3c                 | LR__0782
04e3c     00 14 06 F6 | 	mov	local06, #0
04e40                 | LR__0783
04e40                 | LR__0784
04e40     00 14 0E F2 | 	cmp	local06, #0 wz
04e44     60 00 90 5D |  if_ne	jmp	#LR__0787
04e48     08 15 02 F6 | 	mov	local06, local04
04e4c                 | ' 			ncl = scl;
04e4c                 | ' 			for (;;) {
04e4c                 | LR__0785
04e4c     01 14 06 F1 | 	add	local06, #1
04e50     18 0E 06 F1 | 	add	local03, #24
04e54     07 13 02 FB | 	rdlong	local05, local03
04e58     18 0E 86 F1 | 	sub	local03, #24
04e5c     09 15 12 F2 | 	cmp	local06, local05 wc
04e60     02 14 06 36 |  if_ae	mov	local06, #2
04e64     08 15 1A 32 |  if_ae	cmp	local06, local04 wcz
04e68     00 EA 05 16 |  if_a	mov	result1, #0
04e6c     CC 00 90 1D |  if_a	jmp	#LR__0791
04e70     0A 03 02 F6 | 	mov	arg02, local06
04e74     05 01 02 F6 | 	mov	arg01, local01
04e78     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
04e7c     F5 16 0A F6 | 	mov	local07, result1 wz
04e80     24 00 90 AD |  if_e	jmp	#LR__0786
04e84     01 16 0E F2 | 	cmp	local07, #1 wz
04e88     FF FF 7F 5F 
04e8c     FF 17 0E 52 |  if_ne	cmp	local07, ##-1 wz
04e90     0B EB 01 A6 |  if_e	mov	result1, local07
04e94     A4 00 90 AD |  if_e	jmp	#LR__0791
04e98     08 15 0A F2 | 	cmp	local06, local04 wz
04e9c     00 EA 05 A6 |  if_e	mov	result1, #0
04ea0     98 00 90 AD |  if_e	jmp	#LR__0791
04ea4     A4 FF 9F FD | 	jmp	#LR__0785
04ea8                 | LR__0786
04ea8                 | LR__0787
04ea8     07 01 02 F6 | 	mov	arg01, local03
04eac     0A 03 02 F6 | 	mov	arg02, local06
04eb0     01 04 66 F6 | 	neg	arg03, #1
04eb4     48 FB BF FD | 	call	#_fatfs_cc_put_fat
04eb8     F5 18 0A F6 | 	mov	local08, result1 wz
04ebc     1C 00 90 5D |  if_ne	jmp	#LR__0788
04ec0     00 0C 0E F2 | 	cmp	local02, #0 wz
04ec4     14 00 90 AD |  if_e	jmp	#LR__0788
04ec8     07 01 02 F6 | 	mov	arg01, local03
04ecc     06 03 02 F6 | 	mov	arg02, local02
04ed0     0A 05 02 F6 | 	mov	arg03, local06
04ed4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
04ed8     F5 18 02 F6 | 	mov	local08, result1
04edc                 | LR__0788
04edc     00 18 0E F2 | 	cmp	local08, #0 wz
04ee0     4C 00 90 5D |  if_ne	jmp	#LR__0789
04ee4     10 0E 06 F1 | 	add	local03, #16
04ee8     07 15 62 FC | 	wrlong	local06, local03
04eec     08 0E 06 F1 | 	add	local03, #8
04ef0     07 13 02 FB | 	rdlong	local05, local03
04ef4     02 12 86 F1 | 	sub	local05, #2
04ef8     04 0E 86 F1 | 	sub	local03, #4
04efc     07 1B 02 FB | 	rdlong	local09, local03
04f00     14 0E 86 F1 | 	sub	local03, #20
04f04     09 1B 1A F2 | 	cmp	local09, local05 wcz
04f08     14 0E 06 E1 |  if_be	add	local03, #20
04f0c     07 1B 02 EB |  if_be	rdlong	local09, local03
04f10     01 1A 86 E1 |  if_be	sub	local09, #1
04f14     07 1B 62 EC |  if_be	wrlong	local09, local03
04f18     14 0E 86 E1 |  if_be	sub	local03, #20
04f1c     04 0E 06 F1 | 	add	local03, #4
04f20     07 13 C2 FA | 	rdbyte	local05, local03
04f24     01 12 46 F5 | 	or	local05, #1
04f28     07 13 42 FC | 	wrbyte	local05, local03
04f2c     08 00 90 FD | 	jmp	#LR__0790
04f30                 | LR__0789
04f30     01 18 0E F2 | 	cmp	local08, #1 wz
04f34     01 14 C6 F6 | 	negz	local06, #1
04f38                 | LR__0790
04f38                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
04f38                 | ' 	}
04f38                 | ' 
04f38                 | ' 	return ncl;
04f38     0A EB 01 F6 | 	mov	result1, local06
04f3c                 | LR__0791
04f3c     A7 F0 03 F6 | 	mov	ptra, fp
04f40     B2 00 A0 FD | 	call	#popregs_
04f44                 | _fatfs_cc_create_chain_ret
04f44     2D 00 64 FD | 	ret
04f48                 | 
04f48                 | _fatfs_cc_dir_clear
04f48     06 4A 05 F6 | 	mov	COUNT_, #6
04f4c     A8 00 A0 FD | 	call	#pushregs_
04f50     00 0B 02 F6 | 	mov	local01, arg01
04f54     01 0D 02 F6 | 	mov	local02, arg02
04f58     05 01 02 F6 | 	mov	arg01, local01
04f5c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
04f60     00 EA 0D F2 | 	cmp	result1, #0 wz
04f64     01 EA 05 56 |  if_ne	mov	result1, #1
04f68     90 00 90 5D |  if_ne	jmp	#LR__0802
04f6c     05 01 02 F6 | 	mov	arg01, local01
04f70     06 03 02 F6 | 	mov	arg02, local02
04f74     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
04f78     F5 0E 02 F6 | 	mov	local03, result1
04f7c     30 0A 06 F1 | 	add	local01, #48
04f80     05 0F 62 FC | 	wrlong	local03, local01
04f84     04 0A 06 F1 | 	add	local01, #4
04f88     05 01 02 F6 | 	mov	arg01, local01
04f8c     00 02 06 F6 | 	mov	arg02, #0
04f90     09 04 C6 F9 | 	decod	arg03, #9
04f94     98 00 A0 FD | 	call	#\builtin_bytefill_
04f98     05 11 02 F6 | 	mov	local04, local01
04f9c                 | ' #line 1667 "ff.c"
04f9c                 | ' 	{
04f9c                 | ' 		ibuf = fs->win; szb = 1;
04f9c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
04f9c     00 12 06 F6 | 	mov	local05, #0
04fa0     34 0A 86 F1 | 	sub	local01, #52
04fa4                 | LR__0800
04fa4     0A 0A 06 F1 | 	add	local01, #10
04fa8     05 15 E2 FA | 	rdword	local06, local01
04fac     0A 0A 86 F1 | 	sub	local01, #10
04fb0     0A 13 12 F2 | 	cmp	local05, local06 wc
04fb4     2C 00 90 3D |  if_ae	jmp	#LR__0801
04fb8     01 0A 06 F1 | 	add	local01, #1
04fbc     05 01 C2 FA | 	rdbyte	arg01, local01
04fc0     01 0A 86 F1 | 	sub	local01, #1
04fc4     08 03 02 F6 | 	mov	arg02, local04
04fc8     07 05 02 F6 | 	mov	arg03, local03
04fcc     09 05 02 F1 | 	add	arg03, local05
04fd0     01 06 06 F6 | 	mov	arg04, #1
04fd4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
04fd8     00 EA 0D F2 | 	cmp	result1, #0 wz
04fdc     01 12 06 A1 |  if_e	add	local05, #1
04fe0     C0 FF 9F AD |  if_e	jmp	#LR__0800
04fe4                 | LR__0801
04fe4                 | ' 	}
04fe4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
04fe4     0A 0A 06 F1 | 	add	local01, #10
04fe8     05 11 E2 FA | 	rdword	local04, local01
04fec     08 13 0A F2 | 	cmp	local05, local04 wz
04ff0     00 14 06 A6 |  if_e	mov	local06, #0
04ff4     01 14 06 56 |  if_ne	mov	local06, #1
04ff8     0A EB 01 F6 | 	mov	result1, local06
04ffc                 | LR__0802
04ffc     A7 F0 03 F6 | 	mov	ptra, fp
05000     B2 00 A0 FD | 	call	#popregs_
05004                 | _fatfs_cc_dir_clear_ret
05004     2D 00 64 FD | 	ret
05008                 | 
05008                 | _fatfs_cc_dir_sdi
05008     06 4A 05 F6 | 	mov	COUNT_, #6
0500c     A8 00 A0 FD | 	call	#pushregs_
05010     00 0B 02 F6 | 	mov	local01, arg01
05014     01 0D 02 F6 | 	mov	local02, arg02
05018     05 0F 02 FB | 	rdlong	local03, local01
0501c     00 10 00 FF 
05020     00 0C 16 F2 | 	cmp	local02, ##2097152 wc
05024     1F 0C CE C7 |  if_b	test	local02, #31 wz
05028                 | ' 		return FR_INT_ERR;
05028     02 EA 05 76 |  if_nc_or_nz	mov	result1, #2
0502c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__0816
05030     10 0A 06 F1 | 	add	local01, #16
05034     05 0D 62 FC | 	wrlong	local02, local01
05038     08 0A 86 F1 | 	sub	local01, #8
0503c     05 11 0A FB | 	rdlong	local04, local01 wz
05040     08 0A 86 F1 | 	sub	local01, #8
05044     07 13 C2 AA |  if_e	rdbyte	local05, local03
05048     03 12 16 A2 |  if_e	cmp	local05, #3 wc
0504c     28 0E 06 21 |  if_nc_and_z	add	local03, #40
05050     07 11 02 2B |  if_nc_and_z	rdlong	local04, local03
05054     28 0E 86 21 |  if_nc_and_z	sub	local03, #40
05058     00 10 0E F2 | 	cmp	local04, #0 wz
0505c     3C 00 90 5D |  if_ne	jmp	#LR__0810
05060     06 13 02 F6 | 	mov	local05, local02
05064     05 12 46 F0 | 	shr	local05, #5
05068     08 0E 06 F1 | 	add	local03, #8
0506c     07 03 E2 FA | 	rdword	arg02, local03
05070     08 0E 86 F1 | 	sub	local03, #8
05074     01 13 12 F2 | 	cmp	local05, arg02 wc
05078     02 EA 05 36 |  if_ae	mov	result1, #2
0507c     E4 00 90 3D |  if_ae	jmp	#LR__0816
05080     28 0E 06 F1 | 	add	local03, #40
05084     07 13 02 FB | 	rdlong	local05, local03
05088     28 0E 86 F1 | 	sub	local03, #40
0508c     18 0A 06 F1 | 	add	local01, #24
05090     05 13 62 FC | 	wrlong	local05, local01
05094     18 0A 86 F1 | 	sub	local01, #24
05098     7C 00 90 FD | 	jmp	#LR__0815
0509c                 | LR__0810
0509c     0A 0E 06 F1 | 	add	local03, #10
050a0     07 15 E2 FA | 	rdword	local06, local03
050a4     0A 0E 86 F1 | 	sub	local03, #10
050a8     09 14 66 F0 | 	shl	local06, #9
050ac                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
050ac                 | ' 		while (ofs >= csz) {
050ac                 | LR__0811
050ac     0A 0D 12 F2 | 	cmp	local02, local06 wc
050b0     4C 00 90 CD |  if_b	jmp	#LR__0814
050b4     05 01 02 F6 | 	mov	arg01, local01
050b8     08 03 02 F6 | 	mov	arg02, local04
050bc     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
050c0     F5 10 02 F6 | 	mov	local04, result1
050c4     FF FF 7F FF 
050c8     FF 11 0E F2 | 	cmp	local04, ##-1 wz
050cc     01 EA 05 A6 |  if_e	mov	result1, #1
050d0     90 00 90 AD |  if_e	jmp	#LR__0816
050d4     02 10 16 F2 | 	cmp	local04, #2 wc
050d8     14 00 90 CD |  if_b	jmp	#LR__0812
050dc     18 0E 06 F1 | 	add	local03, #24
050e0     07 13 02 FB | 	rdlong	local05, local03
050e4     18 0E 86 F1 | 	sub	local03, #24
050e8     09 11 12 F2 | 	cmp	local04, local05 wc
050ec     08 00 90 CD |  if_b	jmp	#LR__0813
050f0                 | LR__0812
050f0     02 EA 05 F6 | 	mov	result1, #2
050f4     6C 00 90 FD | 	jmp	#LR__0816
050f8                 | LR__0813
050f8     0A 0D 82 F1 | 	sub	local02, local06
050fc     AC FF 9F FD | 	jmp	#LR__0811
05100                 | LR__0814
05100     07 01 02 F6 | 	mov	arg01, local03
05104     08 03 02 F6 | 	mov	arg02, local04
05108     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
0510c     18 0A 06 F1 | 	add	local01, #24
05110     05 EB 61 FC | 	wrlong	result1, local01
05114     18 0A 86 F1 | 	sub	local01, #24
05118                 | LR__0815
05118     14 0A 06 F1 | 	add	local01, #20
0511c     05 11 62 FC | 	wrlong	local04, local01
05120     04 0A 06 F1 | 	add	local01, #4
05124     05 13 0A FB | 	rdlong	local05, local01 wz
05128     18 0A 86 F1 | 	sub	local01, #24
0512c     02 EA 05 A6 |  if_e	mov	result1, #2
05130     30 00 90 AD |  if_e	jmp	#LR__0816
05134     06 15 02 F6 | 	mov	local06, local02
05138     09 14 46 F0 | 	shr	local06, #9
0513c     18 0A 06 F1 | 	add	local01, #24
05140     05 13 02 FB | 	rdlong	local05, local01
05144     0A 13 02 F1 | 	add	local05, local06
05148     05 13 62 FC | 	wrlong	local05, local01
0514c     34 0E 06 F1 | 	add	local03, #52
05150     FF 0D 06 F5 | 	and	local02, #511
05154     06 0F 02 F1 | 	add	local03, local02
05158     04 0A 06 F1 | 	add	local01, #4
0515c     05 0F 62 FC | 	wrlong	local03, local01
05160                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
05160                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
05160                 | ' 
05160                 | ' 	return FR_OK;
05160     00 EA 05 F6 | 	mov	result1, #0
05164                 | LR__0816
05164     A7 F0 03 F6 | 	mov	ptra, fp
05168     B2 00 A0 FD | 	call	#popregs_
0516c                 | _fatfs_cc_dir_sdi_ret
0516c     2D 00 64 FD | 	ret
05170                 | 
05170                 | _fatfs_cc_dir_next
05170     05 4A 05 F6 | 	mov	COUNT_, #5
05174     A8 00 A0 FD | 	call	#pushregs_
05178     00 0B 02 F6 | 	mov	local01, arg01
0517c     01 0D 02 F6 | 	mov	local02, arg02
05180     05 0F 02 FB | 	rdlong	local03, local01
05184     10 0A 06 F1 | 	add	local01, #16
05188     05 11 02 FB | 	rdlong	local04, local01
0518c     10 0A 86 F1 | 	sub	local01, #16
05190     20 10 06 F1 | 	add	local04, #32
05194     00 10 00 FF 
05198     00 10 16 F2 | 	cmp	local04, ##2097152 wc
0519c     18 0A 06 31 |  if_ae	add	local01, #24
051a0     05 01 68 3C |  if_ae	wrlong	#0, local01
051a4     18 0A 86 31 |  if_ae	sub	local01, #24
051a8     18 0A 06 F1 | 	add	local01, #24
051ac     05 03 0A FB | 	rdlong	arg02, local01 wz
051b0     18 0A 86 F1 | 	sub	local01, #24
051b4     04 EA 05 A6 |  if_e	mov	result1, #4
051b8     64 01 90 AD |  if_e	jmp	#LR__0825
051bc     FF 11 CE F7 | 	test	local04, #511 wz
051c0     3C 01 90 5D |  if_ne	jmp	#LR__0824
051c4     18 0A 06 F1 | 	add	local01, #24
051c8     05 03 02 FB | 	rdlong	arg02, local01
051cc     01 02 06 F1 | 	add	arg02, #1
051d0     05 03 62 FC | 	wrlong	arg02, local01
051d4     04 0A 86 F1 | 	sub	local01, #4
051d8     05 03 0A FB | 	rdlong	arg02, local01 wz
051dc     14 0A 86 F1 | 	sub	local01, #20
051e0     2C 00 90 5D |  if_ne	jmp	#LR__0820
051e4     08 03 02 F6 | 	mov	arg02, local04
051e8     05 02 46 F0 | 	shr	arg02, #5
051ec     08 0E 06 F1 | 	add	local03, #8
051f0     07 0D E2 FA | 	rdword	local02, local03
051f4     08 0E 86 F1 | 	sub	local03, #8
051f8     06 03 12 F2 | 	cmp	arg02, local02 wc
051fc     18 0A 06 31 |  if_ae	add	local01, #24
05200     05 01 68 3C |  if_ae	wrlong	#0, local01
05204                 | ' 				dp->sect = 0; return FR_NO_FILE;
05204     04 EA 05 36 |  if_ae	mov	result1, #4
05208     14 01 90 3D |  if_ae	jmp	#LR__0825
0520c     F0 00 90 FD | 	jmp	#LR__0823
05210                 | LR__0820
05210     08 01 02 F6 | 	mov	arg01, local04
05214     09 00 46 F0 | 	shr	arg01, #9
05218     0A 0E 06 F1 | 	add	local03, #10
0521c     07 03 E2 FA | 	rdword	arg02, local03
05220     0A 0E 86 F1 | 	sub	local03, #10
05224     01 02 86 F1 | 	sub	arg02, #1
05228     01 01 CA F7 | 	test	arg01, arg02 wz
0522c     D0 00 90 5D |  if_ne	jmp	#LR__0822
05230     05 01 02 F6 | 	mov	arg01, local01
05234     14 0A 06 F1 | 	add	local01, #20
05238     05 03 02 FB | 	rdlong	arg02, local01
0523c     14 0A 86 F1 | 	sub	local01, #20
05240     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
05244     F5 12 02 F6 | 	mov	local05, result1
05248     02 12 16 F2 | 	cmp	local05, #2 wc
0524c     02 EA 05 C6 |  if_b	mov	result1, #2
05250     CC 00 90 CD |  if_b	jmp	#LR__0825
05254     FF FF 7F FF 
05258     FF 13 0E F2 | 	cmp	local05, ##-1 wz
0525c     01 EA 05 A6 |  if_e	mov	result1, #1
05260     BC 00 90 AD |  if_e	jmp	#LR__0825
05264     18 0E 06 F1 | 	add	local03, #24
05268     07 03 02 FB | 	rdlong	arg02, local03
0526c     18 0E 86 F1 | 	sub	local03, #24
05270     01 13 12 F2 | 	cmp	local05, arg02 wc
05274     68 00 90 CD |  if_b	jmp	#LR__0821
05278     00 0C 0E F2 | 	cmp	local02, #0 wz
0527c     18 0A 06 A1 |  if_e	add	local01, #24
05280     05 01 68 AC |  if_e	wrlong	#0, local01
05284                 | ' 						dp->sect = 0; return FR_NO_FILE;
05284     04 EA 05 A6 |  if_e	mov	result1, #4
05288     94 00 90 AD |  if_e	jmp	#LR__0825
0528c     05 01 02 F6 | 	mov	arg01, local01
05290     14 0A 06 F1 | 	add	local01, #20
05294     05 03 02 FB | 	rdlong	arg02, local01
05298     14 0A 86 F1 | 	sub	local01, #20
0529c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
052a0     F5 12 0A F6 | 	mov	local05, result1 wz
052a4     07 EA 05 A6 |  if_e	mov	result1, #7
052a8     74 00 90 AD |  if_e	jmp	#LR__0825
052ac     01 12 0E F2 | 	cmp	local05, #1 wz
052b0     02 EA 05 A6 |  if_e	mov	result1, #2
052b4     68 00 90 AD |  if_e	jmp	#LR__0825
052b8     FF FF 7F FF 
052bc     FF 13 0E F2 | 	cmp	local05, ##-1 wz
052c0     01 EA 05 A6 |  if_e	mov	result1, #1
052c4     58 00 90 AD |  if_e	jmp	#LR__0825
052c8     09 03 02 F6 | 	mov	arg02, local05
052cc     07 01 02 F6 | 	mov	arg01, local03
052d0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
052d4     00 EA 0D F2 | 	cmp	result1, #0 wz
052d8     01 EA 05 56 |  if_ne	mov	result1, #1
052dc     40 00 90 5D |  if_ne	jmp	#LR__0825
052e0                 | LR__0821
052e0     14 0A 06 F1 | 	add	local01, #20
052e4     05 13 62 FC | 	wrlong	local05, local01
052e8     07 01 02 F6 | 	mov	arg01, local03
052ec     09 03 02 F6 | 	mov	arg02, local05
052f0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
052f4     04 0A 06 F1 | 	add	local01, #4
052f8     05 EB 61 FC | 	wrlong	result1, local01
052fc     18 0A 86 F1 | 	sub	local01, #24
05300                 | LR__0822
05300                 | LR__0823
05300                 | LR__0824
05300     10 0A 06 F1 | 	add	local01, #16
05304     05 11 62 FC | 	wrlong	local04, local01
05308     34 0E 06 F1 | 	add	local03, #52
0530c     FF 11 06 F5 | 	and	local04, #511
05310     08 0F 02 F1 | 	add	local03, local04
05314     0C 0A 06 F1 | 	add	local01, #12
05318     05 0F 62 FC | 	wrlong	local03, local01
0531c                 | ' #line 1771 "ff.c"
0531c                 | ' 				}
0531c                 | ' 				dp->clust = clst;
0531c                 | ' 				dp->sect = clst2sect(fs, clst);
0531c                 | ' 			}
0531c                 | ' 		}
0531c                 | ' 	}
0531c                 | ' 	dp->dptr = ofs;
0531c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
0531c                 | ' 
0531c                 | ' 	return FR_OK;
0531c     00 EA 05 F6 | 	mov	result1, #0
05320                 | LR__0825
05320     A7 F0 03 F6 | 	mov	ptra, fp
05324     B2 00 A0 FD | 	call	#popregs_
05328                 | _fatfs_cc_dir_next_ret
05328     2D 00 64 FD | 	ret
0532c                 | 
0532c                 | _fatfs_cc_dir_alloc
0532c     08 4A 05 F6 | 	mov	COUNT_, #8
05330     A8 00 A0 FD | 	call	#pushregs_
05334     00 0B 02 F6 | 	mov	local01, arg01
05338     01 0D 02 F6 | 	mov	local02, arg02
0533c     05 0F 02 FB | 	rdlong	local03, local01
05340     05 01 02 F6 | 	mov	arg01, local01
05344     00 02 06 F6 | 	mov	arg02, #0
05348     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
0534c     F5 10 0A F6 | 	mov	local04, result1 wz
05350     70 00 90 5D |  if_ne	jmp	#LR__0834
05354     00 12 06 F6 | 	mov	local05, #0
05358                 | ' 		n = 0;
05358                 | ' 		do {
05358                 | LR__0830
05358     18 0A 06 F1 | 	add	local01, #24
0535c     05 03 02 FB | 	rdlong	arg02, local01
05360     18 0A 86 F1 | 	sub	local01, #24
05364     07 01 02 F6 | 	mov	arg01, local03
05368     38 F3 BF FD | 	call	#_fatfs_cc_move_window
0536c     F5 10 0A F6 | 	mov	local04, result1 wz
05370     50 00 90 5D |  if_ne	jmp	#LR__0833
05374     1C 0A 06 F1 | 	add	local01, #28
05378     05 15 02 FB | 	rdlong	local06, local01
0537c     1C 0A 86 F1 | 	sub	local01, #28
05380     0A 15 C2 FA | 	rdbyte	local06, local06
05384     E5 14 0E F2 | 	cmp	local06, #229 wz
05388     1C 0A 06 51 |  if_ne	add	local01, #28
0538c     05 17 02 5B |  if_ne	rdlong	local07, local01
05390     1C 0A 86 51 |  if_ne	sub	local01, #28
05394     0B 19 CA 5A |  if_ne	rdbyte	local08, local07 wz
05398     10 00 90 5D |  if_ne	jmp	#LR__0831
0539c     01 12 06 F1 | 	add	local05, #1
053a0     06 13 0A F2 | 	cmp	local05, local02 wz
053a4     1C 00 90 AD |  if_e	jmp	#LR__0833
053a8     04 00 90 FD | 	jmp	#LR__0832
053ac                 | LR__0831
053ac     00 12 06 F6 | 	mov	local05, #0
053b0                 | LR__0832
053b0     05 01 02 F6 | 	mov	arg01, local01
053b4     01 02 06 F6 | 	mov	arg02, #1
053b8     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
053bc     F5 10 0A F6 | 	mov	local04, result1 wz
053c0     94 FF 9F AD |  if_e	jmp	#LR__0830
053c4                 | LR__0833
053c4                 | LR__0834
053c4     04 10 0E F2 | 	cmp	local04, #4 wz
053c8     07 10 06 A6 |  if_e	mov	local04, #7
053cc                 | ' 	return res;
053cc     08 EB 01 F6 | 	mov	result1, local04
053d0     A7 F0 03 F6 | 	mov	ptra, fp
053d4     B2 00 A0 FD | 	call	#popregs_
053d8                 | _fatfs_cc_dir_alloc_ret
053d8     2D 00 64 FD | 	ret
053dc                 | 
053dc                 | _fatfs_cc_ld_clust
053dc     00 EF 01 F6 | 	mov	_var01, arg01
053e0     01 01 02 F6 | 	mov	arg01, arg02
053e4     1A 00 06 F1 | 	add	arg01, #26
053e8                 | ' {
053e8                 | ' 
053e8                 | ' 	return *((WORD*)ptr);
053e8     00 EB E1 FA | 	rdword	result1, arg01
053ec     F5 00 32 F9 | 	getword	arg01, result1, #0
053f0     F7 EE C1 FA | 	rdbyte	_var01, _var01
053f4     03 EE 0D F2 | 	cmp	_var01, #3 wz
053f8     14 02 06 A1 |  if_e	add	arg02, #20
053fc                 | ' {
053fc                 | ' 
053fc                 | ' 	return *((WORD*)ptr);
053fc     01 EB E1 AA |  if_e	rdword	result1, arg02
05400     10 EA 65 A0 |  if_e	shl	result1, #16
05404     F5 00 42 A5 |  if_e	or	arg01, result1
05408                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
05408                 | ' 	}
05408                 | ' 
05408                 | ' 	return cl;
05408     00 EB 01 F6 | 	mov	result1, arg01
0540c                 | _fatfs_cc_ld_clust_ret
0540c     2D 00 64 FD | 	ret
05410                 | 
05410                 | _fatfs_cc_st_clust
05410     00 EF 01 F6 | 	mov	_var01, arg01
05414     01 01 02 F6 | 	mov	arg01, arg02
05418     1A 00 06 F1 | 	add	arg01, #26
0541c     00 05 52 FC | 	wrword	arg03, arg01
05420     F7 EE C1 FA | 	rdbyte	_var01, _var01
05424     03 EE 0D F2 | 	cmp	_var01, #3 wz
05428     14 02 06 A1 |  if_e	add	arg02, #20
0542c     10 04 46 A0 |  if_e	shr	arg03, #16
05430     01 05 52 AC |  if_e	wrword	arg03, arg02
05434                 | _fatfs_cc_st_clust_ret
05434     2D 00 64 FD | 	ret
05438                 | 
05438                 | _fatfs_cc_cmp_lfn
05438     07 4A 05 F6 | 	mov	COUNT_, #7
0543c     A8 00 A0 FD | 	call	#pushregs_
05440     00 0B 02 F6 | 	mov	local01, arg01
05444     01 01 02 F6 | 	mov	arg01, arg02
05448     1A 00 06 F1 | 	add	arg01, #26
0544c                 | ' {
0544c                 | ' 
0544c                 | ' 	return *((WORD*)ptr);
0544c     00 EB E9 FA | 	rdword	result1, arg01 wz
05450     00 EA 05 56 |  if_ne	mov	result1, #0
05454     E0 00 90 5D |  if_ne	jmp	#LR__0846
05458     01 0D C2 FA | 	rdbyte	local02, arg02
0545c     3F 0C 06 F5 | 	and	local02, #63
05460     01 0C 86 F1 | 	sub	local02, #1
05464     0D 0C 06 FD | 	qmul	local02, #13
05468                 | ' 
05468                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
05468                 | ' 
05468                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
05468     01 0E 06 F6 | 	mov	local03, #1
0546c     00 10 06 F6 | 	mov	local04, #0
05470     18 12 62 FD | 	getqx	local05
05474                 | LR__0840
05474     0D 10 16 F2 | 	cmp	local04, #13 wc
05478     9C 00 90 3D |  if_ae	jmp	#LR__0845
0547c     01 01 02 F6 | 	mov	arg01, arg02
05480     08 0D 02 F6 | 	mov	local02, local04
05484     01 00 00 FF 
05488     AE E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
0548c     F3 0C 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
05490     06 0D C2 FA | 	rdbyte	local02, local02
05494     01 0C 06 FA | 	mul	local02, #1
05498     06 01 02 F1 | 	add	arg01, local02
0549c     01 00 00 FF 
054a0     AE E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
054a4                 | ' {
054a4                 | ' 
054a4                 | ' 	return *((WORD*)ptr);
054a4     00 EB E1 FA | 	rdword	result1, arg01
054a8     F5 14 02 F6 | 	mov	local06, result1
054ac     07 0D 02 F6 | 	mov	local02, local03
054b0     0F 0C 4E F7 | 	zerox	local02, #15 wz
054b4     44 00 90 AD |  if_e	jmp	#LR__0843
054b8     00 13 16 F2 | 	cmp	local05, #256 wc
054bc     2C 00 90 3D |  if_ae	jmp	#LR__0841
054c0     0A 01 32 F9 | 	getword	arg01, local06, #0
054c4     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
054c8     F5 0C 02 F6 | 	mov	local02, result1
054cc     09 0F 02 F6 | 	mov	local03, local05
054d0     01 0E 66 F0 | 	shl	local03, #1
054d4     05 0F 02 F1 | 	add	local03, local01
054d8     07 01 E2 FA | 	rdword	arg01, local03
054dc     01 12 06 F1 | 	add	local05, #1
054e0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
054e4     F5 0C 0A F2 | 	cmp	local02, result1 wz
054e8     08 00 90 AD |  if_e	jmp	#LR__0842
054ec                 | LR__0841
054ec                 | ' 				return 0;
054ec     00 EA 05 F6 | 	mov	result1, #0
054f0     44 00 90 FD | 	jmp	#LR__0846
054f4                 | LR__0842
054f4     0A 0F 02 F6 | 	mov	local03, local06
054f8     14 00 90 FD | 	jmp	#LR__0844
054fc                 | LR__0843
054fc     0A 15 32 F9 | 	getword	local06, local06, #0
05500     7F 00 00 FF 
05504     FF 15 0E F2 | 	cmp	local06, ##65535 wz
05508     00 EA 05 56 |  if_ne	mov	result1, #0
0550c     28 00 90 5D |  if_ne	jmp	#LR__0846
05510                 | LR__0844
05510     01 10 06 F1 | 	add	local04, #1
05514     5C FF 9F FD | 	jmp	#LR__0840
05518                 | LR__0845
05518     01 0D C2 FA | 	rdbyte	local02, arg02
0551c     40 0C CE F7 | 	test	local02, #64 wz
05520     00 0E 0E 52 |  if_ne	cmp	local03, #0 wz
05524     01 12 66 50 |  if_ne	shl	local05, #1
05528     05 13 02 51 |  if_ne	add	local05, local01
0552c     09 17 EA 5A |  if_ne	rdword	local07, local05 wz
05530     00 EA 05 56 |  if_ne	mov	result1, #0
05534                 | ' 
05534                 | ' 	return 1;
05534     01 EA 05 A6 |  if_e	mov	result1, #1
05538                 | LR__0846
05538     A7 F0 03 F6 | 	mov	ptra, fp
0553c     B2 00 A0 FD | 	call	#popregs_
05540                 | _fatfs_cc_cmp_lfn_ret
05540     2D 00 64 FD | 	ret
05544                 | 
05544                 | _fatfs_cc_pick_lfn
05544     00 EF 01 F6 | 	mov	_var01, arg01
05548     01 01 02 F6 | 	mov	arg01, arg02
0554c     1A 00 06 F1 | 	add	arg01, #26
05550                 | ' {
05550                 | ' 
05550                 | ' 	return *((WORD*)ptr);
05550     00 EB E9 FA | 	rdword	result1, arg01 wz
05554     00 EA 05 56 |  if_ne	mov	result1, #0
05558     D4 00 90 5D |  if_ne	jmp	#LR__0855
0555c     01 F1 C1 FA | 	rdbyte	_var02, arg02
05560     40 F0 25 F5 | 	andn	_var02, #64
05564     01 F0 85 F1 | 	sub	_var02, #1
05568     0D F0 05 FD | 	qmul	_var02, #13
0556c                 | ' 
0556c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
0556c                 | ' 
0556c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
0556c     01 F2 05 F6 | 	mov	_var03, #1
05570     00 F4 05 F6 | 	mov	_var04, #0
05574     18 F6 61 FD | 	getqx	_var05
05578                 | LR__0850
05578     0D F4 15 F2 | 	cmp	_var04, #13 wc
0557c     80 00 90 3D |  if_ae	jmp	#LR__0853
05580     01 01 02 F6 | 	mov	arg01, arg02
05584     FA F0 01 F6 | 	mov	_var02, _var04
05588     01 00 00 FF 
0558c     AE E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
05590     F3 F0 01 F1 | 	add	_var02, ptr__fatfs_cc_dat__
05594     F8 F0 C1 FA | 	rdbyte	_var02, _var02
05598     01 F0 05 FA | 	mul	_var02, #1
0559c     F8 00 02 F1 | 	add	arg01, _var02
055a0     01 00 00 FF 
055a4     AE E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
055a8                 | ' {
055a8                 | ' 
055a8                 | ' 	return *((WORD*)ptr);
055a8     00 EB E1 FA | 	rdword	result1, arg01
055ac     F5 F8 01 F6 | 	mov	_var06, result1
055b0     F9 F0 01 F6 | 	mov	_var02, _var03
055b4     0F F0 4D F7 | 	zerox	_var02, #15 wz
055b8     28 00 90 AD |  if_e	jmp	#LR__0851
055bc     00 F7 15 F2 | 	cmp	_var05, #256 wc
055c0     00 EA 05 36 |  if_ae	mov	result1, #0
055c4     68 00 90 3D |  if_ae	jmp	#LR__0855
055c8     FB F0 01 F6 | 	mov	_var02, _var05
055cc     01 F0 65 F0 | 	shl	_var02, #1
055d0     F7 F0 01 F1 | 	add	_var02, _var01
055d4     FC F2 01 F6 | 	mov	_var03, _var06
055d8     F8 F2 51 FC | 	wrword	_var03, _var02
055dc     01 F6 05 F1 | 	add	_var05, #1
055e0     14 00 90 FD | 	jmp	#LR__0852
055e4                 | LR__0851
055e4     FC F8 31 F9 | 	getword	_var06, _var06, #0
055e8     7F 00 00 FF 
055ec     FF F9 0D F2 | 	cmp	_var06, ##65535 wz
055f0     00 EA 05 56 |  if_ne	mov	result1, #0
055f4     38 00 90 5D |  if_ne	jmp	#LR__0855
055f8                 | LR__0852
055f8     01 F4 05 F1 | 	add	_var04, #1
055fc     78 FF 9F FD | 	jmp	#LR__0850
05600                 | LR__0853
05600     01 F1 C1 FA | 	rdbyte	_var02, arg02
05604     40 F0 CD F7 | 	test	_var02, #64 wz
05608     F9 FA 01 56 |  if_ne	mov	_var07, _var03
0560c     0F FA 4D 57 |  if_ne	zerox	_var07, #15 wz
05610     18 00 90 AD |  if_e	jmp	#LR__0854
05614     00 F7 15 F2 | 	cmp	_var05, #256 wc
05618     00 EA 05 36 |  if_ae	mov	result1, #0
0561c     10 00 90 3D |  if_ae	jmp	#LR__0855
05620     01 F6 65 F0 | 	shl	_var05, #1
05624     F7 F6 01 F1 | 	add	_var05, _var01
05628     FB 00 58 FC | 	wrword	#0, _var05
0562c                 | LR__0854
0562c                 | ' 		lfnbuf[i] = 0;
0562c                 | ' 	}
0562c                 | ' 
0562c                 | ' 	return 1;
0562c     01 EA 05 F6 | 	mov	result1, #1
05630                 | LR__0855
05630                 | _fatfs_cc_pick_lfn_ret
05630     2D 00 64 FD | 	ret
05634                 | 
05634                 | _fatfs_cc_put_lfn
05634     0D 02 06 F1 | 	add	arg02, #13
05638     01 07 42 FC | 	wrbyte	arg04, arg02
0563c     02 07 E2 F8 | 	getbyte	arg04, arg03, #0
05640     01 06 86 F1 | 	sub	arg04, #1
05644     0D 06 06 FD | 	qmul	arg04, #13
05648     00 EF 01 F6 | 	mov	_var01, arg01
0564c     02 02 86 F1 | 	sub	arg02, #2
05650     01 1F 48 FC | 	wrbyte	#15, arg02
05654     01 02 06 F1 | 	add	arg02, #1
05658     01 01 48 FC | 	wrbyte	#0, arg02
0565c     0C 02 86 F1 | 	sub	arg02, #12
05660     01 01 02 F6 | 	mov	arg01, arg02
05664     1A 00 06 F1 | 	add	arg01, #26
05668     00 01 58 FC | 	wrword	#0, arg01
0566c     00 F0 05 F6 | 	mov	_var02, #0
05670     00 F2 05 F6 | 	mov	_var03, #0
05674                 | ' 	BYTE* dir,
05674                 | ' 	BYTE ord,
05674                 | ' 	BYTE sum
05674                 | ' )
05674                 | ' {
05674                 | ' 	UINT i, s;
05674                 | ' 	WCHAR wc;
05674                 | ' 
05674                 | ' 
05674                 | ' 	dir[ 13 ] = sum;
05674                 | ' 	dir[ 11 ] =  0x0F ;
05674                 | ' 	dir[ 12 ] = 0;
05674                 | ' 	st_word(dir +  26 , 0);
05674                 | ' 
05674                 | ' 	i = (ord - 1) * 13;
05674                 | ' 	s = wc = 0;
05674                 | ' 	do {
05674     01 00 00 FF 
05678     AE E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
0567c     18 F4 61 FD | 	getqx	_var04
05680     97 2A 48 FB | 	callpa	#(@LR__0861-@LR__0860)>>2,fcache_load_ptr_
05684                 | LR__0860
05684     F8 06 32 F9 | 	getword	arg04, _var02, #0
05688     7F 00 00 FF 
0568c     FF 07 0E F2 | 	cmp	arg04, ##65535 wz
05690     FA 00 02 56 |  if_ne	mov	arg01, _var04
05694     01 F4 05 51 |  if_ne	add	_var04, #1
05698     01 00 66 50 |  if_ne	shl	arg01, #1
0569c     F7 00 02 51 |  if_ne	add	arg01, _var01
056a0     00 F1 E1 5A |  if_ne	rdword	_var02, arg01
056a4     01 01 02 F6 | 	mov	arg01, arg02
056a8     F9 06 02 F6 | 	mov	arg04, _var03
056ac     F3 06 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
056b0     03 07 C2 FA | 	rdbyte	arg04, arg04
056b4     01 06 06 FA | 	mul	arg04, #1
056b8     03 01 02 F1 | 	add	arg01, arg04
056bc     00 F1 51 FC | 	wrword	_var02, arg01
056c0     F8 06 02 F6 | 	mov	arg04, _var02
056c4     0F 06 4E F7 | 	zerox	arg04, #15 wz
056c8     0F F0 CD A9 |  if_e	bmask	_var02, #15
056cc     01 F2 05 F1 | 	add	_var03, #1
056d0     0D F2 15 F2 | 	cmp	_var03, #13 wc
056d4     AC FF 9F CD |  if_b	jmp	#LR__0860
056d8                 | LR__0861
056d8     01 00 00 FF 
056dc     AE E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
056e0     F8 F0 31 F9 | 	getword	_var02, _var02, #0
056e4     7F 00 00 FF 
056e8     FF F1 0D F2 | 	cmp	_var02, ##65535 wz
056ec     01 F4 65 50 |  if_ne	shl	_var04, #1
056f0     F7 F4 01 51 |  if_ne	add	_var04, _var01
056f4     FA F4 E9 5A |  if_ne	rdword	_var04, _var04 wz
056f8     02 05 E2 A8 |  if_e	getbyte	arg03, arg03, #0
056fc     40 04 46 A5 |  if_e	or	arg03, #64
05700     01 05 42 FC | 	wrbyte	arg03, arg02
05704                 | _fatfs_cc_put_lfn_ret
05704     2D 00 64 FD | 	ret
05708                 | 
05708                 | _fatfs_cc_gen_numname
05708     08 4A 05 F6 | 	mov	COUNT_, #8
0570c     A8 00 A0 FD | 	call	#pushregs_
05710     2C F0 07 F1 | 	add	ptra, #44
05714     00 0B 02 F6 | 	mov	local01, arg01
05718     01 0D 02 F6 | 	mov	local02, arg02
0571c     02 0F 02 F6 | 	mov	local03, arg03
05720     03 11 02 F6 | 	mov	local04, arg04
05724     05 01 02 F6 | 	mov	arg01, local01
05728     06 03 02 F6 | 	mov	arg02, local02
0572c     0B 04 06 F6 | 	mov	arg03, #11
05730     A4 B5 BF FD | 	call	#__system____builtin_memmove
05734     06 10 16 F2 | 	cmp	local04, #6 wc
05738     48 00 90 CD |  if_b	jmp	#LR__0875
0573c     08 13 02 F6 | 	mov	local05, local04
05740     97 1E 48 FB | 	callpa	#(@LR__0873-@LR__0870)>>2,fcache_load_ptr_
05744                 | ' 		sreg = seq;
05744                 | ' 		while (*lfn) {
05744                 | LR__0870
05744     07 15 EA FA | 	rdword	local06, local03 wz
05748     34 00 90 AD |  if_e	jmp	#LR__0874
0574c     07 17 E2 FA | 	rdword	local07, local03
05750                 | ' 			wc = *lfn++;
05750                 | ' 			for (i = 0; i < 16; i++) {
05750     02 0E 06 F1 | 	add	local03, #2
05754     10 12 DC FC | 	rep	@LR__0872, #16
05758                 | LR__0871
05758     01 12 66 F0 | 	shl	local05, #1
0575c     0B 15 32 F9 | 	getword	local06, local07, #0
05760     01 14 06 F5 | 	and	local06, #1
05764     0A 13 02 F1 | 	add	local05, local06
05768     0B 17 32 F9 | 	getword	local07, local07, #0
0576c     01 16 46 F0 | 	shr	local07, #1
05770     10 12 2E F4 | 	testbn	local05, #16 wz
05774     88 00 00 5F 
05778     21 12 66 55 |  if_ne	xor	local05, ##69665
0577c                 | LR__0872
0577c     C4 FF 9F FD | 	jmp	#LR__0870
05780                 | LR__0873
05780                 | LR__0874
05780     09 11 02 F6 | 	mov	local04, local05
05784                 | LR__0875
05784     07 16 06 F6 | 	mov	local07, #7
05788                 | ' 			}
05788                 | ' 		}
05788                 | ' 		seq = (UINT)sreg;
05788                 | ' 	}
05788                 | ' 
05788                 | ' 
05788                 | ' 	i = 7;
05788                 | ' 	do {
05788     10 4E 05 F1 | 	add	fp, #16
0578c     97 1A 48 FB | 	callpa	#(@LR__0877-@LR__0876)>>2,fcache_load_ptr_
05790                 | LR__0876
05790     08 13 42 F8 | 	getnib	local05, local04, #0
05794     30 12 06 F1 | 	add	local05, #48
05798     04 10 46 F0 | 	shr	local04, #4
0579c     09 15 E2 F8 | 	getbyte	local06, local05, #0
057a0     3A 14 16 F2 | 	cmp	local06, #58 wc
057a4     09 13 E2 38 |  if_ae	getbyte	local05, local05, #0
057a8     07 12 06 31 |  if_ae	add	local05, #7
057ac     0B 15 02 F6 | 	mov	local06, local07
057b0     01 16 8E F1 | 	sub	local07, #1 wz
057b4     A7 14 02 F1 | 	add	local06, fp
057b8     0A 13 42 FC | 	wrbyte	local05, local06
057bc     00 10 0E 52 |  if_ne	cmp	local04, #0 wz
057c0     CC FF 9F 5D |  if_ne	jmp	#LR__0876
057c4                 | LR__0877
057c4     0B 15 02 F6 | 	mov	local06, local07
057c8     A7 14 02 F1 | 	add	local06, fp
057cc     0A FD 48 FC | 	wrbyte	#126, local06
057d0                 | ' 	ns[i] = '~';
057d0                 | ' 
057d0                 | ' 
057d0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
057d0     00 12 06 F6 | 	mov	local05, #0
057d4     10 4E 85 F1 | 	sub	fp, #16
057d8     97 2A 48 FB | 	callpa	#(@LR__0880-@LR__0878)>>2,fcache_load_ptr_
057dc                 | LR__0878
057dc     0B 13 12 F2 | 	cmp	local05, local07 wc
057e0     4C 00 90 3D |  if_ae	jmp	#LR__0881
057e4     09 15 02 F6 | 	mov	local06, local05
057e8     05 15 02 F1 | 	add	local06, local01
057ec     0A 15 C2 FA | 	rdbyte	local06, local06
057f0     20 14 0E F2 | 	cmp	local06, #32 wz
057f4     38 00 90 AD |  if_e	jmp	#LR__0881
057f8     09 01 02 F6 | 	mov	arg01, local05
057fc     05 01 02 F1 | 	add	arg01, local01
05800     00 01 CA FA | 	rdbyte	arg01, arg01 wz
05804     00 EA 05 56 |  if_ne	mov	result1, #0
05808                 | ' 
05808                 | ' 	return 0;
05808     00 EA 05 A6 |  if_e	mov	result1, #0
0580c     00 EA 0D F2 | 	cmp	result1, #0 wz
05810     14 00 90 AD |  if_e	jmp	#LR__0879
05814     0B 15 02 F6 | 	mov	local06, local07
05818     01 14 86 F1 | 	sub	local06, #1
0581c     0A 13 0A F2 | 	cmp	local05, local06 wz
05820     0C 00 90 AD |  if_e	jmp	#LR__0881
05824     01 12 06 F1 | 	add	local05, #1
05828                 | LR__0879
05828     01 12 06 F1 | 	add	local05, #1
0582c     AC FF 9F FD | 	jmp	#LR__0878
05830                 | LR__0880
05830                 | LR__0881
05830     97 20 48 FB | 	callpa	#(@LR__0885-@LR__0882)>>2,fcache_load_ptr_
05834                 | ' 			j++;
05834                 | ' 		}
05834                 | ' 	}
05834                 | ' 	do {
05834                 | LR__0882
05834     09 15 02 F6 | 	mov	local06, local05
05838     05 15 02 F1 | 	add	local06, local01
0583c     08 16 16 F2 | 	cmp	local07, #8 wc
05840     01 12 06 F1 | 	add	local05, #1
05844     1C 00 90 3D |  if_ae	jmp	#LR__0883
05848     0B 11 02 F6 | 	mov	local04, local07
0584c     10 4E 05 F1 | 	add	fp, #16
05850     A7 10 02 F1 | 	add	local04, fp
05854     08 19 C2 FA | 	rdbyte	local08, local04
05858     01 16 06 F1 | 	add	local07, #1
0585c     10 4E 85 F1 | 	sub	fp, #16
05860     04 00 90 FD | 	jmp	#LR__0884
05864                 | LR__0883
05864     20 18 06 F6 | 	mov	local08, #32
05868                 | LR__0884
05868     0A 19 42 FC | 	wrbyte	local08, local06
0586c     08 12 16 F2 | 	cmp	local05, #8 wc
05870     C0 FF 9F CD |  if_b	jmp	#LR__0882
05874                 | LR__0885
05874     A7 F0 03 F6 | 	mov	ptra, fp
05878     B2 00 A0 FD | 	call	#popregs_
0587c                 | _fatfs_cc_gen_numname_ret
0587c     2D 00 64 FD | 	ret
05880                 | 
05880                 | _fatfs_cc_sum_sfn
05880     00 EE 05 F6 | 	mov	_var01, #0
05884                 | ' )
05884                 | ' {
05884                 | ' 	BYTE sum = 0;
05884                 | ' 	UINT n = 11;
05884                 | ' 
05884                 | ' 	do {
05884     97 12 48 FB | 	callpa	#(@LR__0892-@LR__0890)>>2,fcache_load_ptr_
05888                 | LR__0890
05888     0B 10 DC FC | 	rep	@LR__0893, #11
0588c                 | LR__0891
0588c     F7 EA E1 F8 | 	getbyte	result1, _var01, #0
05890     01 EA 45 F0 | 	shr	result1, #1
05894     F7 EE E1 F8 | 	getbyte	_var01, _var01, #0
05898     07 EE 65 F0 | 	shl	_var01, #7
0589c     F7 EA 01 F1 | 	add	result1, _var01
058a0     00 EF C1 FA | 	rdbyte	_var01, arg01
058a4     F5 EE 01 F1 | 	add	_var01, result1
058a8     01 00 06 F1 | 	add	arg01, #1
058ac                 | LR__0892
058ac                 | LR__0893
058ac                 | ' 	return sum;
058ac     F7 EA 01 F6 | 	mov	result1, _var01
058b0                 | _fatfs_cc_sum_sfn_ret
058b0     2D 00 64 FD | 	ret
058b4                 | 
058b4                 | _fatfs_cc_dir_read
058b4     0C 4A 05 F6 | 	mov	COUNT_, #12
058b8     A8 00 A0 FD | 	call	#pushregs_
058bc     00 0B 02 F6 | 	mov	local01, arg01
058c0     01 0D 02 F6 | 	mov	local02, arg02
058c4     04 0E 06 F6 | 	mov	local03, #4
058c8     05 11 02 FB | 	rdlong	local04, local01
058cc     FF 12 06 F6 | 	mov	local05, #255
058d0     FF 14 06 F6 | 	mov	local06, #255
058d4                 | ' )
058d4                 | ' {
058d4                 | ' 	FRESULT res = FR_NO_FILE;
058d4                 | ' 	FATFS *fs = dp->obj.fs;
058d4                 | ' 	BYTE attr, b;
058d4                 | ' 
058d4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
058d4                 | ' 
058d4                 | ' 
058d4                 | ' 	while (dp->sect) {
058d4                 | LR__0900
058d4     18 0A 06 F1 | 	add	local01, #24
058d8     05 EB 09 FB | 	rdlong	result1, local01 wz
058dc     18 0A 86 F1 | 	sub	local01, #24
058e0     AC 01 90 AD |  if_e	jmp	#LR__0910
058e4     18 0A 06 F1 | 	add	local01, #24
058e8     05 03 02 FB | 	rdlong	arg02, local01
058ec     18 0A 86 F1 | 	sub	local01, #24
058f0     08 01 02 F6 | 	mov	arg01, local04
058f4     AC ED BF FD | 	call	#_fatfs_cc_move_window
058f8     F5 0E 0A F6 | 	mov	local03, result1 wz
058fc     90 01 90 5D |  if_ne	jmp	#LR__0910
05900     1C 0A 06 F1 | 	add	local01, #28
05904     05 EB 01 FB | 	rdlong	result1, local01
05908     1C 0A 86 F1 | 	sub	local01, #28
0590c     F5 16 C2 FA | 	rdbyte	local07, result1
05910     0B EB 01 F6 | 	mov	result1, local07
05914     07 EA 4D F7 | 	zerox	result1, #7 wz
05918     04 0E 06 A6 |  if_e	mov	local03, #4
0591c                 | ' 			res = FR_NO_FILE; break;
0591c     70 01 90 AD |  if_e	jmp	#LR__0910
05920     1C 0A 06 F1 | 	add	local01, #28
05924     05 19 02 FB | 	rdlong	local08, local01
05928     0B 18 06 F1 | 	add	local08, #11
0592c     0C 1B C2 FA | 	rdbyte	local09, local08
05930     3F 1A 06 F5 | 	and	local09, #63
05934     16 0A 86 F1 | 	sub	local01, #22
05938     05 1B 42 FC | 	wrbyte	local09, local01
0593c     06 0A 86 F1 | 	sub	local01, #6
05940     0B EB E1 F8 | 	getbyte	result1, local07, #0
05944     E5 EA 0D F2 | 	cmp	result1, #229 wz
05948     0B 19 02 56 |  if_ne	mov	local08, local07
0594c     0C 19 E2 58 |  if_ne	getbyte	local08, local08, #0
05950     2E 18 0E 52 |  if_ne	cmp	local08, #46 wz
05954     1C 00 90 AD |  if_e	jmp	#LR__0901
05958     00 1C 06 F6 | 	mov	local10, #0
0595c     0D 19 E2 F8 | 	getbyte	local08, local09, #0
05960     20 18 26 F5 | 	andn	local08, #32
05964     08 18 0E F2 | 	cmp	local08, #8 wz
05968     01 1C 06 A6 |  if_e	mov	local10, #1
0596c     06 1D 0A F2 | 	cmp	local10, local02 wz
05970     08 00 90 AD |  if_e	jmp	#LR__0902
05974                 | LR__0901
05974     FF 12 06 F6 | 	mov	local05, #255
05978     00 01 90 FD | 	jmp	#LR__0909
0597c                 | LR__0902
0597c     0D 1B E2 F8 | 	getbyte	local09, local09, #0
05980     0F 1A 0E F2 | 	cmp	local09, #15 wz
05984     B4 00 90 5D |  if_ne	jmp	#LR__0906
05988     0B 1F E2 F8 | 	getbyte	local11, local07, #0
0598c     40 1E CE F7 | 	test	local11, #64 wz
05990     30 00 90 AD |  if_e	jmp	#LR__0903
05994     1C 0A 06 F1 | 	add	local01, #28
05998     05 1F 02 FB | 	rdlong	local11, local01
0599c     0D 1E 06 F1 | 	add	local11, #13
059a0     0F 15 C2 FA | 	rdbyte	local06, local11
059a4     0B 17 E2 F8 | 	getbyte	local07, local07, #0
059a8     BF 16 06 F5 | 	and	local07, #191
059ac     0B 13 02 F6 | 	mov	local05, local07
059b0     0C 0A 86 F1 | 	sub	local01, #12
059b4     05 1F 02 FB | 	rdlong	local11, local01
059b8     1C 0A 06 F1 | 	add	local01, #28
059bc     05 1F 62 FC | 	wrlong	local11, local01
059c0     2C 0A 86 F1 | 	sub	local01, #44
059c4                 | LR__0903
059c4     0B 19 E2 F8 | 	getbyte	local08, local07, #0
059c8     09 1D E2 F8 | 	getbyte	local10, local05, #0
059cc     0E 19 0A F2 | 	cmp	local08, local10 wz
059d0     5C 00 90 5D |  if_ne	jmp	#LR__0904
059d4     0A 1D E2 F8 | 	getbyte	local10, local06, #0
059d8     1C 0A 06 F1 | 	add	local01, #28
059dc     05 1B 02 FB | 	rdlong	local09, local01
059e0     1C 0A 86 F1 | 	sub	local01, #28
059e4     0D 1A 06 F1 | 	add	local09, #13
059e8     0D 19 C2 FA | 	rdbyte	local08, local09
059ec     0C 1B E2 F8 | 	getbyte	local09, local08, #0
059f0     0D 1D 0A F2 | 	cmp	local10, local09 wz
059f4     38 00 90 5D |  if_ne	jmp	#LR__0904
059f8     0C 10 06 F1 | 	add	local04, #12
059fc     08 01 02 FB | 	rdlong	arg01, local04
05a00     0C 10 86 F1 | 	sub	local04, #12
05a04     1C 0A 06 F1 | 	add	local01, #28
05a08     05 21 02 FB | 	rdlong	local12, local01
05a0c     1C 0A 86 F1 | 	sub	local01, #28
05a10     10 03 02 F6 | 	mov	arg02, local12
05a14     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
05a18     00 EA 4D F2 | 	cmps	result1, #0 wz
05a1c     09 21 02 56 |  if_ne	mov	local12, local05
05a20     10 21 E2 58 |  if_ne	getbyte	local12, local12, #0
05a24     01 20 86 51 |  if_ne	sub	local12, #1
05a28     10 1F 02 56 |  if_ne	mov	local11, local12
05a2c     04 00 90 5D |  if_ne	jmp	#LR__0905
05a30                 | LR__0904
05a30     FF 1E 06 F6 | 	mov	local11, #255
05a34                 | LR__0905
05a34     0F 13 02 F6 | 	mov	local05, local11
05a38     40 00 90 FD | 	jmp	#LR__0908
05a3c                 | LR__0906
05a3c     09 1F 02 F6 | 	mov	local11, local05
05a40     07 1E 4E F7 | 	zerox	local11, #7 wz
05a44     20 00 90 5D |  if_ne	jmp	#LR__0907
05a48     0A 15 E2 F8 | 	getbyte	local06, local06, #0
05a4c     1C 0A 06 F1 | 	add	local01, #28
05a50     05 01 02 FB | 	rdlong	arg01, local01
05a54     1C 0A 86 F1 | 	sub	local01, #28
05a58     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
05a5c     F5 EA E1 F8 | 	getbyte	result1, result1, #0
05a60     F5 14 0A F2 | 	cmp	local06, result1 wz
05a64     28 00 90 AD |  if_e	jmp	#LR__0910
05a68                 | LR__0907
05a68     2C 0A 06 F1 | 	add	local01, #44
05a6c     FF FF FF FF 
05a70     05 FF 6B FC | 	wrlong	##-1, local01
05a74     2C 0A 86 F1 | 	sub	local01, #44
05a78                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
05a78                 | ' 					}
05a78                 | ' 					break;
05a78     14 00 90 FD | 	jmp	#LR__0910
05a7c                 | LR__0908
05a7c                 | LR__0909
05a7c     05 01 02 F6 | 	mov	arg01, local01
05a80     00 02 06 F6 | 	mov	arg02, #0
05a84     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
05a88     F5 0E 0A F6 | 	mov	local03, result1 wz
05a8c     44 FE 9F AD |  if_e	jmp	#LR__0900
05a90                 | LR__0910
05a90     00 0E 0E F2 | 	cmp	local03, #0 wz
05a94     18 0A 06 51 |  if_ne	add	local01, #24
05a98     05 01 68 5C |  if_ne	wrlong	#0, local01
05a9c                 | ' 	return res;
05a9c     07 EB 01 F6 | 	mov	result1, local03
05aa0     A7 F0 03 F6 | 	mov	ptra, fp
05aa4     B2 00 A0 FD | 	call	#popregs_
05aa8                 | _fatfs_cc_dir_read_ret
05aa8     2D 00 64 FD | 	ret
05aac                 | 
05aac                 | _fatfs_cc_dir_find
05aac     0B 4A 05 F6 | 	mov	COUNT_, #11
05ab0     A8 00 A0 FD | 	call	#pushregs_
05ab4     00 0B 02 F6 | 	mov	local01, arg01
05ab8     05 0D 02 FB | 	rdlong	local02, local01
05abc     05 01 02 F6 | 	mov	arg01, local01
05ac0     00 02 06 F6 | 	mov	arg02, #0
05ac4     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
05ac8     00 EA 0D F2 | 	cmp	result1, #0 wz
05acc     18 02 90 5D |  if_ne	jmp	#LR__0932
05ad0     FF 0E 06 F6 | 	mov	local03, #255
05ad4     FF 10 06 F6 | 	mov	local04, #255
05ad8     2C 0A 06 F1 | 	add	local01, #44
05adc     FF FF FF FF 
05ae0     05 FF 6B FC | 	wrlong	##-1, local01
05ae4     2C 0A 86 F1 | 	sub	local01, #44
05ae8                 | ' #line 2404 "ff.c"
05ae8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
05ae8                 | ' 
05ae8                 | ' 	do {
05ae8                 | LR__0920
05ae8     18 0A 06 F1 | 	add	local01, #24
05aec     05 03 02 FB | 	rdlong	arg02, local01
05af0     18 0A 86 F1 | 	sub	local01, #24
05af4     06 01 02 F6 | 	mov	arg01, local02
05af8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
05afc     F5 12 0A F6 | 	mov	local05, result1 wz
05b00     E0 01 90 5D |  if_ne	jmp	#LR__0931
05b04     1C 0A 06 F1 | 	add	local01, #28
05b08     05 05 02 FB | 	rdlong	arg03, local01
05b0c     1C 0A 86 F1 | 	sub	local01, #28
05b10     02 15 C2 FA | 	rdbyte	local06, arg03
05b14     0A 05 02 F6 | 	mov	arg03, local06
05b18     07 04 4E F7 | 	zerox	arg03, #7 wz
05b1c     04 12 06 A6 |  if_e	mov	local05, #4
05b20     C0 01 90 AD |  if_e	jmp	#LR__0931
05b24     1C 0A 06 F1 | 	add	local01, #28
05b28     05 17 02 FB | 	rdlong	local07, local01
05b2c     0B 05 02 F6 | 	mov	arg03, local07
05b30     0B 04 06 F1 | 	add	arg03, #11
05b34     02 19 C2 FA | 	rdbyte	local08, arg03
05b38     3F 18 06 F5 | 	and	local08, #63
05b3c     16 0A 86 F1 | 	sub	local01, #22
05b40     05 19 42 FC | 	wrbyte	local08, local01
05b44     06 0A 86 F1 | 	sub	local01, #6
05b48     0A 05 E2 F8 | 	getbyte	arg03, local06, #0
05b4c     E5 04 0E F2 | 	cmp	arg03, #229 wz
05b50     18 00 90 AD |  if_e	jmp	#LR__0921
05b54     0C 05 E2 F8 | 	getbyte	arg03, local08, #0
05b58     08 04 CE F7 | 	test	arg03, #8 wz
05b5c     0C 17 02 56 |  if_ne	mov	local07, local08
05b60     0B 17 E2 58 |  if_ne	getbyte	local07, local07, #0
05b64     0F 16 0E 52 |  if_ne	cmp	local07, #15 wz
05b68     18 00 90 AD |  if_e	jmp	#LR__0922
05b6c                 | LR__0921
05b6c     FF 10 06 F6 | 	mov	local04, #255
05b70     2C 0A 06 F1 | 	add	local01, #44
05b74     FF FF FF FF 
05b78     05 FF 6B FC | 	wrlong	##-1, local01
05b7c     2C 0A 86 F1 | 	sub	local01, #44
05b80     4C 01 90 FD | 	jmp	#LR__0930
05b84                 | LR__0922
05b84     0C 19 E2 F8 | 	getbyte	local08, local08, #0
05b88     0F 18 0E F2 | 	cmp	local08, #15 wz
05b8c     C8 00 90 5D |  if_ne	jmp	#LR__0926
05b90     2B 0A 06 F1 | 	add	local01, #43
05b94     05 19 C2 FA | 	rdbyte	local08, local01
05b98     2B 0A 86 F1 | 	sub	local01, #43
05b9c     40 18 CE F7 | 	test	local08, #64 wz
05ba0     2C 01 90 5D |  if_ne	jmp	#LR__0929
05ba4     0A 1B E2 F8 | 	getbyte	local09, local06, #0
05ba8     40 1A CE F7 | 	test	local09, #64 wz
05bac     30 00 90 AD |  if_e	jmp	#LR__0923
05bb0     1C 0A 06 F1 | 	add	local01, #28
05bb4     05 1B 02 FB | 	rdlong	local09, local01
05bb8     0D 1A 06 F1 | 	add	local09, #13
05bbc     0D 0F C2 FA | 	rdbyte	local03, local09
05bc0     0A 15 E2 F8 | 	getbyte	local06, local06, #0
05bc4     BF 14 06 F5 | 	and	local06, #191
05bc8     0A 11 02 F6 | 	mov	local04, local06
05bcc     0C 0A 86 F1 | 	sub	local01, #12
05bd0     05 1B 02 FB | 	rdlong	local09, local01
05bd4     1C 0A 06 F1 | 	add	local01, #28
05bd8     05 1B 62 FC | 	wrlong	local09, local01
05bdc     2C 0A 86 F1 | 	sub	local01, #44
05be0                 | LR__0923
05be0     0A 1D E2 F8 | 	getbyte	local10, local06, #0
05be4     08 17 E2 F8 | 	getbyte	local07, local04, #0
05be8     0B 1D 0A F2 | 	cmp	local10, local07 wz
05bec     5C 00 90 5D |  if_ne	jmp	#LR__0924
05bf0     07 19 E2 F8 | 	getbyte	local08, local03, #0
05bf4     1C 0A 06 F1 | 	add	local01, #28
05bf8     05 17 02 FB | 	rdlong	local07, local01
05bfc     1C 0A 86 F1 | 	sub	local01, #28
05c00     0D 16 06 F1 | 	add	local07, #13
05c04     0B 15 C2 FA | 	rdbyte	local06, local07
05c08     0A 17 E2 F8 | 	getbyte	local07, local06, #0
05c0c     0B 19 0A F2 | 	cmp	local08, local07 wz
05c10     38 00 90 5D |  if_ne	jmp	#LR__0924
05c14     0C 0C 06 F1 | 	add	local02, #12
05c18     06 01 02 FB | 	rdlong	arg01, local02
05c1c     0C 0C 86 F1 | 	sub	local02, #12
05c20     1C 0A 06 F1 | 	add	local01, #28
05c24     05 1F 02 FB | 	rdlong	local11, local01
05c28     1C 0A 86 F1 | 	sub	local01, #28
05c2c     0F 03 02 F6 | 	mov	arg02, local11
05c30     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
05c34     00 EA 4D F2 | 	cmps	result1, #0 wz
05c38     08 1F 02 56 |  if_ne	mov	local11, local04
05c3c     0F 1F E2 58 |  if_ne	getbyte	local11, local11, #0
05c40     01 1E 86 51 |  if_ne	sub	local11, #1
05c44     0F 1B 02 56 |  if_ne	mov	local09, local11
05c48     04 00 90 5D |  if_ne	jmp	#LR__0925
05c4c                 | LR__0924
05c4c     FF 1A 06 F6 | 	mov	local09, #255
05c50                 | LR__0925
05c50     0D 11 02 F6 | 	mov	local04, local09
05c54     78 00 90 FD | 	jmp	#LR__0929
05c58                 | LR__0926
05c58     08 1B 02 F6 | 	mov	local09, local04
05c5c     07 1A 4E F7 | 	zerox	local09, #7 wz
05c60     20 00 90 5D |  if_ne	jmp	#LR__0927
05c64     07 1D E2 F8 | 	getbyte	local10, local03, #0
05c68     1C 0A 06 F1 | 	add	local01, #28
05c6c     05 01 02 FB | 	rdlong	arg01, local01
05c70     1C 0A 86 F1 | 	sub	local01, #28
05c74     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
05c78     F5 EA E1 F8 | 	getbyte	result1, result1, #0
05c7c     F5 1C 0A F2 | 	cmp	local10, result1 wz
05c80     60 00 90 AD |  if_e	jmp	#LR__0931
05c84                 | LR__0927
05c84     2B 0A 06 F1 | 	add	local01, #43
05c88     05 1B C2 FA | 	rdbyte	local09, local01
05c8c     2B 0A 86 F1 | 	sub	local01, #43
05c90     01 1A CE F7 | 	test	local09, #1 wz
05c94     24 00 90 5D |  if_ne	jmp	#LR__0928
05c98     1C 0A 06 F1 | 	add	local01, #28
05c9c     05 01 02 FB | 	rdlong	arg01, local01
05ca0     04 0A 06 F1 | 	add	local01, #4
05ca4     05 03 02 F6 | 	mov	arg02, local01
05ca8     20 0A 86 F1 | 	sub	local01, #32
05cac     0B 04 06 F6 | 	mov	arg03, #11
05cb0     88 DA BF FD | 	call	#_fatfs_cc_memcmp
05cb4     00 EA 0D F2 | 	cmp	result1, #0 wz
05cb8     28 00 90 AD |  if_e	jmp	#LR__0931
05cbc                 | LR__0928
05cbc     FF 10 06 F6 | 	mov	local04, #255
05cc0     2C 0A 06 F1 | 	add	local01, #44
05cc4     FF FF FF FF 
05cc8     05 FF 6B FC | 	wrlong	##-1, local01
05ccc     2C 0A 86 F1 | 	sub	local01, #44
05cd0                 | LR__0929
05cd0                 | LR__0930
05cd0     05 01 02 F6 | 	mov	arg01, local01
05cd4     00 02 06 F6 | 	mov	arg02, #0
05cd8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
05cdc     F5 12 0A F6 | 	mov	local05, result1 wz
05ce0     04 FE 9F AD |  if_e	jmp	#LR__0920
05ce4                 | LR__0931
05ce4                 | ' 
05ce4                 | ' 	return res;
05ce4     09 EB 01 F6 | 	mov	result1, local05
05ce8                 | LR__0932
05ce8     A7 F0 03 F6 | 	mov	ptra, fp
05cec     B2 00 A0 FD | 	call	#popregs_
05cf0                 | _fatfs_cc_dir_find_ret
05cf0     2D 00 64 FD | 	ret
05cf4                 | 
05cf4                 | _fatfs_cc_dir_register
05cf4     0A 4A 05 F6 | 	mov	COUNT_, #10
05cf8     A8 00 A0 FD | 	call	#pushregs_
05cfc     2C F0 07 F1 | 	add	ptra, #44
05d00     04 4E 05 F1 | 	add	fp, #4
05d04     A7 00 62 FC | 	wrlong	arg01, fp
05d08     00 0B 02 FB | 	rdlong	local01, arg01
05d0c     08 4E 05 F1 | 	add	fp, #8
05d10     A7 0A 62 FC | 	wrlong	local01, fp
05d14     08 4E 85 F1 | 	sub	fp, #8
05d18     A7 0C 02 FB | 	rdlong	local02, fp
05d1c     04 4E 85 F1 | 	sub	fp, #4
05d20     2B 0C 06 F1 | 	add	local02, #43
05d24     06 0D C2 FA | 	rdbyte	local02, local02
05d28     A0 0C CE F7 | 	test	local02, #160 wz
05d2c     06 EA 05 56 |  if_ne	mov	result1, #6
05d30     F8 03 90 5D |  if_ne	jmp	#LR__0955
05d34                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
05d34     14 4E 05 F1 | 	add	fp, #20
05d38     A7 00 68 FC | 	wrlong	#0, fp
05d3c     14 4E 85 F1 | 	sub	fp, #20
05d40     97 28 48 FB | 	callpa	#(@LR__0941-@LR__0940)>>2,fcache_load_ptr_
05d44                 | LR__0940
05d44     0C 4E 05 F1 | 	add	fp, #12
05d48     A7 0C 02 FB | 	rdlong	local02, fp
05d4c     0C 0C 06 F1 | 	add	local02, #12
05d50     06 0F 02 FB | 	rdlong	local03, local02
05d54     08 4E 05 F1 | 	add	fp, #8
05d58     A7 10 02 FB | 	rdlong	local04, fp
05d5c     14 4E 85 F1 | 	sub	fp, #20
05d60     01 10 66 F0 | 	shl	local04, #1
05d64     07 11 02 F1 | 	add	local04, local03
05d68     08 0D EA FA | 	rdword	local02, local04 wz
05d6c     24 00 90 AD |  if_e	jmp	#LR__0942
05d70     14 4E 05 F1 | 	add	fp, #20
05d74     A7 12 02 FB | 	rdlong	local05, fp
05d78     09 15 02 F6 | 	mov	local06, local05
05d7c     09 17 02 F6 | 	mov	local07, local05
05d80     0B 19 02 F6 | 	mov	local08, local07
05d84     01 18 06 F1 | 	add	local08, #1
05d88     A7 18 62 FC | 	wrlong	local08, fp
05d8c     14 4E 85 F1 | 	sub	fp, #20
05d90     B0 FF 9F FD | 	jmp	#LR__0940
05d94                 | LR__0941
05d94                 | LR__0942
05d94     1C 4E 05 F1 | 	add	fp, #28
05d98     A7 00 02 F6 | 	mov	arg01, fp
05d9c     18 4E 85 F1 | 	sub	fp, #24
05da0     A7 02 02 FB | 	rdlong	arg02, fp
05da4     04 4E 85 F1 | 	sub	fp, #4
05da8     20 02 06 F1 | 	add	arg02, #32
05dac     0C 04 06 F6 | 	mov	arg03, #12
05db0     24 AF BF FD | 	call	#__system____builtin_memmove
05db4     27 4E 05 F1 | 	add	fp, #39
05db8     A7 1A C2 FA | 	rdbyte	local09, fp
05dbc     27 4E 85 F1 | 	sub	fp, #39
05dc0     01 1A CE F7 | 	test	local09, #1 wz
05dc4     F4 00 90 AD |  if_e	jmp	#LR__0945
05dc8     04 4E 05 F1 | 	add	fp, #4
05dcc     A7 1C 02 FB | 	rdlong	local10, fp
05dd0     2B 1C 06 F1 | 	add	local10, #43
05dd4     0E 81 48 FC | 	wrbyte	#64, local10
05dd8                 | ' 		dp->fn[ 11 ] =  0x40 ;
05dd8                 | ' 		for (n = 1; n < 100; n++) {
05dd8     0C 4E 05 F1 | 	add	fp, #12
05ddc     A7 02 68 FC | 	wrlong	#1, fp
05de0     10 4E 85 F1 | 	sub	fp, #16
05de4                 | LR__0943
05de4     10 4E 05 F1 | 	add	fp, #16
05de8     A7 0C 02 FB | 	rdlong	local02, fp
05dec     10 4E 85 F1 | 	sub	fp, #16
05df0     64 0C 16 F2 | 	cmp	local02, #100 wc
05df4     70 00 90 3D |  if_ae	jmp	#LR__0944
05df8     04 4E 05 F1 | 	add	fp, #4
05dfc     A7 00 02 FB | 	rdlong	arg01, fp
05e00     20 00 06 F1 | 	add	arg01, #32
05e04     18 4E 05 F1 | 	add	fp, #24
05e08     A7 02 02 F6 | 	mov	arg02, fp
05e0c     10 4E 85 F1 | 	sub	fp, #16
05e10     A7 1C 02 FB | 	rdlong	local10, fp
05e14     0C 1C 06 F1 | 	add	local10, #12
05e18     0E 05 02 FB | 	rdlong	arg03, local10
05e1c     04 4E 05 F1 | 	add	fp, #4
05e20     A7 06 02 FB | 	rdlong	arg04, fp
05e24     10 4E 85 F1 | 	sub	fp, #16
05e28     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
05e2c     04 4E 05 F1 | 	add	fp, #4
05e30     A7 00 02 FB | 	rdlong	arg01, fp
05e34     04 4E 85 F1 | 	sub	fp, #4
05e38     70 FC BF FD | 	call	#_fatfs_cc_dir_find
05e3c     08 4E 05 F1 | 	add	fp, #8
05e40     A7 EA 61 FC | 	wrlong	result1, fp
05e44     00 EA 4D F2 | 	cmps	result1, #0 wz
05e48     08 4E 85 F1 | 	sub	fp, #8
05e4c     18 00 90 5D |  if_ne	jmp	#LR__0944
05e50     10 4E 05 F1 | 	add	fp, #16
05e54     A7 1C 02 FB | 	rdlong	local10, fp
05e58     01 1C 06 F1 | 	add	local10, #1
05e5c     A7 1C 62 FC | 	wrlong	local10, fp
05e60     10 4E 85 F1 | 	sub	fp, #16
05e64     7C FF 9F FD | 	jmp	#LR__0943
05e68                 | LR__0944
05e68     10 4E 05 F1 | 	add	fp, #16
05e6c     A7 1C 02 FB | 	rdlong	local10, fp
05e70     10 4E 85 F1 | 	sub	fp, #16
05e74     64 1C 0E F2 | 	cmp	local10, #100 wz
05e78     07 EA 05 A6 |  if_e	mov	result1, #7
05e7c     AC 02 90 AD |  if_e	jmp	#LR__0955
05e80     08 4E 05 F1 | 	add	fp, #8
05e84     A7 1C 02 FB | 	rdlong	local10, fp
05e88     08 4E 85 F1 | 	sub	fp, #8
05e8c     04 1C 0E F2 | 	cmp	local10, #4 wz
05e90     08 4E 05 51 |  if_ne	add	fp, #8
05e94     A7 EA 01 5B |  if_ne	rdlong	result1, fp
05e98     08 4E 85 51 |  if_ne	sub	fp, #8
05e9c     8C 02 90 5D |  if_ne	jmp	#LR__0955
05ea0     04 4E 05 F1 | 	add	fp, #4
05ea4     A7 1C 02 FB | 	rdlong	local10, fp
05ea8     23 4E 05 F1 | 	add	fp, #35
05eac     A7 0A C2 FA | 	rdbyte	local01, fp
05eb0     27 4E 85 F1 | 	sub	fp, #39
05eb4     2B 1C 06 F1 | 	add	local10, #43
05eb8     0E 0B 42 FC | 	wrbyte	local01, local10
05ebc                 | LR__0945
05ebc     27 4E 05 F1 | 	add	fp, #39
05ec0     A7 0C C2 FA | 	rdbyte	local02, fp
05ec4     27 4E 85 F1 | 	sub	fp, #39
05ec8     02 0C CE F7 | 	test	local02, #2 wz
05ecc     20 00 90 AD |  if_e	jmp	#LR__0946
05ed0     14 4E 05 F1 | 	add	fp, #20
05ed4     A7 1C 02 FB | 	rdlong	local10, fp
05ed8     0C 1C 06 F1 | 	add	local10, #12
05edc     0D 1C 16 FD | 	qdiv	local10, #13
05ee0     14 4E 85 F1 | 	sub	fp, #20
05ee4     18 1C 62 FD | 	getqx	local10
05ee8     01 1C 06 F1 | 	add	local10, #1
05eec     04 00 90 FD | 	jmp	#LR__0947
05ef0                 | LR__0946
05ef0     01 1C 06 F6 | 	mov	local10, #1
05ef4                 | LR__0947
05ef4     18 4E 05 F1 | 	add	fp, #24
05ef8     A7 1C 62 FC | 	wrlong	local10, fp
05efc     14 4E 85 F1 | 	sub	fp, #20
05f00     A7 00 02 FB | 	rdlong	arg01, fp
05f04     0E 03 02 F6 | 	mov	arg02, local10
05f08     04 4E 85 F1 | 	sub	fp, #4
05f0c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
05f10     08 4E 05 F1 | 	add	fp, #8
05f14     A7 EA 61 FC | 	wrlong	result1, fp
05f18     08 4E 85 F1 | 	sub	fp, #8
05f1c     00 EA 0D F2 | 	cmp	result1, #0 wz
05f20     38 01 90 5D |  if_ne	jmp	#LR__0952
05f24     18 4E 05 F1 | 	add	fp, #24
05f28     A7 1C 02 FB | 	rdlong	local10, fp
05f2c     01 1C 8E F1 | 	sub	local10, #1 wz
05f30     A7 1C 62 FC | 	wrlong	local10, fp
05f34     18 4E 85 F1 | 	sub	fp, #24
05f38     20 01 90 AD |  if_e	jmp	#LR__0952
05f3c     04 4E 05 F1 | 	add	fp, #4
05f40     A7 1C 02 FB | 	rdlong	local10, fp
05f44     0E 01 02 F6 | 	mov	arg01, local10
05f48     14 4E 05 F1 | 	add	fp, #20
05f4c     A7 06 02 FB | 	rdlong	arg04, fp
05f50     18 4E 85 F1 | 	sub	fp, #24
05f54     05 06 66 F0 | 	shl	arg04, #5
05f58     10 1C 06 F1 | 	add	local10, #16
05f5c     0E 03 02 FB | 	rdlong	arg02, local10
05f60     03 03 82 F1 | 	sub	arg02, arg04
05f64     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
05f68     08 4E 05 F1 | 	add	fp, #8
05f6c     A7 EA 61 FC | 	wrlong	result1, fp
05f70     08 4E 85 F1 | 	sub	fp, #8
05f74     00 EA 0D F2 | 	cmp	result1, #0 wz
05f78     E0 00 90 5D |  if_ne	jmp	#LR__0951
05f7c     04 4E 05 F1 | 	add	fp, #4
05f80     A7 00 02 FB | 	rdlong	arg01, fp
05f84     04 4E 85 F1 | 	sub	fp, #4
05f88     20 00 06 F1 | 	add	arg01, #32
05f8c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
05f90     F5 1C 02 F6 | 	mov	local10, result1
05f94     28 4E 05 F1 | 	add	fp, #40
05f98     A7 1C 42 FC | 	wrbyte	local10, fp
05f9c     28 4E 85 F1 | 	sub	fp, #40
05fa0                 | ' 			sum = sum_sfn(dp->fn);
05fa0                 | ' 			do {
05fa0                 | LR__0948
05fa0     0C 4E 05 F1 | 	add	fp, #12
05fa4     A7 00 02 FB | 	rdlong	arg01, fp
05fa8     08 4E 85 F1 | 	sub	fp, #8
05fac     A7 0A 02 FB | 	rdlong	local01, fp
05fb0     04 4E 85 F1 | 	sub	fp, #4
05fb4     18 0A 06 F1 | 	add	local01, #24
05fb8     05 03 02 FB | 	rdlong	arg02, local01
05fbc     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
05fc0     08 4E 05 F1 | 	add	fp, #8
05fc4     A7 EA 61 FC | 	wrlong	result1, fp
05fc8     00 EA 4D F2 | 	cmps	result1, #0 wz
05fcc     08 4E 85 F1 | 	sub	fp, #8
05fd0     88 00 90 5D |  if_ne	jmp	#LR__0950
05fd4     0C 4E 05 F1 | 	add	fp, #12
05fd8     A7 0C 02 FB | 	rdlong	local02, fp
05fdc     0C 0C 06 F1 | 	add	local02, #12
05fe0     06 01 02 FB | 	rdlong	arg01, local02
05fe4     08 4E 85 F1 | 	sub	fp, #8
05fe8     A7 0A 02 FB | 	rdlong	local01, fp
05fec     1C 0A 06 F1 | 	add	local01, #28
05ff0     05 03 02 FB | 	rdlong	arg02, local01
05ff4     14 4E 05 F1 | 	add	fp, #20
05ff8     A7 04 02 FB | 	rdlong	arg03, fp
05ffc     10 4E 05 F1 | 	add	fp, #16
06000     A7 06 C2 FA | 	rdbyte	arg04, fp
06004     28 4E 85 F1 | 	sub	fp, #40
06008     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
0600c     0C 4E 05 F1 | 	add	fp, #12
06010     A7 1C 02 FB | 	rdlong	local10, fp
06014     03 1C 06 F1 | 	add	local10, #3
06018     0E 03 48 FC | 	wrbyte	#1, local10
0601c     08 4E 85 F1 | 	sub	fp, #8
06020     A7 00 02 FB | 	rdlong	arg01, fp
06024     04 4E 85 F1 | 	sub	fp, #4
06028     00 02 06 F6 | 	mov	arg02, #0
0602c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
06030     08 4E 05 F1 | 	add	fp, #8
06034     A7 EA 61 FC | 	wrlong	result1, fp
06038     00 EA 4D F2 | 	cmps	result1, #0 wz
0603c     08 4E 85 F1 | 	sub	fp, #8
06040     18 00 90 5D |  if_ne	jmp	#LR__0949
06044     18 4E 05 F1 | 	add	fp, #24
06048     A7 1C 02 FB | 	rdlong	local10, fp
0604c     01 1C 8E F1 | 	sub	local10, #1 wz
06050     A7 1C 62 FC | 	wrlong	local10, fp
06054     18 4E 85 F1 | 	sub	fp, #24
06058     44 FF 9F 5D |  if_ne	jmp	#LR__0948
0605c                 | LR__0949
0605c                 | LR__0950
0605c                 | LR__0951
0605c                 | LR__0952
0605c     08 4E 05 F1 | 	add	fp, #8
06060     A7 1C 0A FB | 	rdlong	local10, fp wz
06064     08 4E 85 F1 | 	sub	fp, #8
06068     B4 00 90 5D |  if_ne	jmp	#LR__0954
0606c     0C 4E 05 F1 | 	add	fp, #12
06070     A7 00 02 FB | 	rdlong	arg01, fp
06074     08 4E 85 F1 | 	sub	fp, #8
06078     A7 0A 02 FB | 	rdlong	local01, fp
0607c     04 4E 85 F1 | 	sub	fp, #4
06080     18 0A 06 F1 | 	add	local01, #24
06084     05 03 02 FB | 	rdlong	arg02, local01
06088     18 E6 BF FD | 	call	#_fatfs_cc_move_window
0608c     08 4E 05 F1 | 	add	fp, #8
06090     A7 EA 61 FC | 	wrlong	result1, fp
06094     08 4E 85 F1 | 	sub	fp, #8
06098     00 EA 0D F2 | 	cmp	result1, #0 wz
0609c     80 00 90 5D |  if_ne	jmp	#LR__0953
060a0     04 4E 05 F1 | 	add	fp, #4
060a4     A7 0C 02 FB | 	rdlong	local02, fp
060a8     04 4E 85 F1 | 	sub	fp, #4
060ac     1C 0C 06 F1 | 	add	local02, #28
060b0     06 01 02 FB | 	rdlong	arg01, local02
060b4     00 02 06 F6 | 	mov	arg02, #0
060b8     20 04 06 F6 | 	mov	arg03, #32
060bc     98 00 A0 FD | 	call	#\builtin_bytefill_
060c0     04 4E 05 F1 | 	add	fp, #4
060c4     A7 02 02 FB | 	rdlong	arg02, fp
060c8     01 0B 02 F6 | 	mov	local01, arg02
060cc     1C 0A 06 F1 | 	add	local01, #28
060d0     05 01 02 FB | 	rdlong	arg01, local01
060d4     04 4E 85 F1 | 	sub	fp, #4
060d8     20 02 06 F1 | 	add	arg02, #32
060dc     0B 04 06 F6 | 	mov	arg03, #11
060e0     F4 AB BF FD | 	call	#__system____builtin_memmove
060e4     04 4E 05 F1 | 	add	fp, #4
060e8     A7 1A 02 FB | 	rdlong	local09, fp
060ec     0D 1D 02 F6 | 	mov	local10, local09
060f0     1C 1C 06 F1 | 	add	local10, #28
060f4     0E 0B 02 FB | 	rdlong	local01, local10
060f8     2B 1A 06 F1 | 	add	local09, #43
060fc     0D 1D C2 FA | 	rdbyte	local10, local09
06100     18 1C 06 F5 | 	and	local10, #24
06104     0C 0A 06 F1 | 	add	local01, #12
06108     05 1D 42 FC | 	wrbyte	local10, local01
0610c     08 4E 05 F1 | 	add	fp, #8
06110     A7 1C 02 FB | 	rdlong	local10, fp
06114     0C 4E 85 F1 | 	sub	fp, #12
06118     03 1C 06 F1 | 	add	local10, #3
0611c     0E 03 48 FC | 	wrbyte	#1, local10
06120                 | LR__0953
06120                 | LR__0954
06120                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
06120                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
06120                 | ' 
06120                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
06120                 | ' 
06120                 | ' 			fs->wflag = 1;
06120                 | ' 		}
06120                 | ' 	}
06120                 | ' 
06120                 | ' 	return res;
06120     08 4E 05 F1 | 	add	fp, #8
06124     A7 EA 01 FB | 	rdlong	result1, fp
06128     08 4E 85 F1 | 	sub	fp, #8
0612c                 | LR__0955
0612c     A7 F0 03 F6 | 	mov	ptra, fp
06130     B2 00 A0 FD | 	call	#popregs_
06134                 | _fatfs_cc_dir_register_ret
06134     2D 00 64 FD | 	ret
06138                 | 
06138                 | _fatfs_cc_dir_remove
06138     05 4A 05 F6 | 	mov	COUNT_, #5
0613c     A8 00 A0 FD | 	call	#pushregs_
06140     00 0B 02 F6 | 	mov	local01, arg01
06144     05 0D 02 FB | 	rdlong	local02, local01
06148     10 0A 06 F1 | 	add	local01, #16
0614c     05 0F 02 FB | 	rdlong	local03, local01
06150     1C 0A 06 F1 | 	add	local01, #28
06154     05 03 02 FB | 	rdlong	arg02, local01
06158     2C 0A 86 F1 | 	sub	local01, #44
0615c     FF FF 7F FF 
06160     FF 03 0E F2 | 	cmp	arg02, ##-1 wz
06164     00 10 06 A6 |  if_e	mov	local04, #0
06168     18 00 90 AD |  if_e	jmp	#LR__0960
0616c     05 01 02 F6 | 	mov	arg01, local01
06170     2C 0A 06 F1 | 	add	local01, #44
06174     05 03 02 FB | 	rdlong	arg02, local01
06178     2C 0A 86 F1 | 	sub	local01, #44
0617c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
06180     F5 10 02 F6 | 	mov	local04, result1
06184                 | LR__0960
06184     08 13 0A F6 | 	mov	local05, local04 wz
06188     64 00 90 5D |  if_ne	jmp	#LR__0963
0618c                 | ' 		do {
0618c                 | LR__0961
0618c     18 0A 06 F1 | 	add	local01, #24
06190     05 03 02 FB | 	rdlong	arg02, local01
06194     18 0A 86 F1 | 	sub	local01, #24
06198     06 01 02 F6 | 	mov	arg01, local02
0619c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
061a0     F5 12 0A F6 | 	mov	local05, result1 wz
061a4     40 00 90 5D |  if_ne	jmp	#LR__0962
061a8     1C 0A 06 F1 | 	add	local01, #28
061ac     05 11 02 FB | 	rdlong	local04, local01
061b0     08 CB 49 FC | 	wrbyte	#229, local04
061b4     03 0C 06 F1 | 	add	local02, #3
061b8     06 03 48 FC | 	wrbyte	#1, local02
061bc     03 0C 86 F1 | 	sub	local02, #3
061c0     0C 0A 86 F1 | 	sub	local01, #12
061c4     05 11 02 FB | 	rdlong	local04, local01
061c8     10 0A 86 F1 | 	sub	local01, #16
061cc     07 11 12 F2 | 	cmp	local04, local03 wc
061d0     14 00 90 3D |  if_ae	jmp	#LR__0962
061d4     05 01 02 F6 | 	mov	arg01, local01
061d8     00 02 06 F6 | 	mov	arg02, #0
061dc     90 EF BF FD | 	call	#_fatfs_cc_dir_next
061e0     F5 12 0A F6 | 	mov	local05, result1 wz
061e4     A4 FF 9F AD |  if_e	jmp	#LR__0961
061e8                 | LR__0962
061e8     04 12 0E F2 | 	cmp	local05, #4 wz
061ec     02 12 06 A6 |  if_e	mov	local05, #2
061f0                 | LR__0963
061f0                 | ' 	}
061f0                 | ' #line 2590 "ff.c"
061f0                 | ' 	return res;
061f0     09 EB 01 F6 | 	mov	result1, local05
061f4     A7 F0 03 F6 | 	mov	ptra, fp
061f8     B2 00 A0 FD | 	call	#popregs_
061fc                 | _fatfs_cc_dir_remove_ret
061fc     2D 00 64 FD | 	ret
06200                 | 
06200                 | _fatfs_cc_get_fileinfo
06200     0F 4A 05 F6 | 	mov	COUNT_, #15
06204     A8 00 A0 FD | 	call	#pushregs_
06208     00 0B 02 F6 | 	mov	local01, arg01
0620c     01 0D 02 F6 | 	mov	local02, arg02
06210     05 0F 02 FB | 	rdlong	local03, local01
06214     1C 0C 06 F1 | 	add	local02, #28
06218     06 01 48 FC | 	wrbyte	#0, local02
0621c     1C 0C 86 F1 | 	sub	local02, #28
06220     18 0A 06 F1 | 	add	local01, #24
06224     05 11 0A FB | 	rdlong	local04, local01 wz
06228     18 0A 86 F1 | 	sub	local01, #24
0622c     90 03 90 AD |  if_e	jmp	#LR__0984
06230     2C 0A 06 F1 | 	add	local01, #44
06234     05 11 02 FB | 	rdlong	local04, local01
06238     2C 0A 86 F1 | 	sub	local01, #44
0623c     FF FF 7F FF 
06240     FF 11 0E F2 | 	cmp	local04, ##-1 wz
06244     D8 00 90 AD |  if_e	jmp	#LR__0973
06248     00 12 06 F6 | 	mov	local05, #0
0624c     00 14 06 F6 | 	mov	local06, #0
06250     00 16 06 F6 | 	mov	local07, #0
06254                 | ' 			si = di = 0;
06254                 | ' 			hs = 0;
06254                 | ' 			while (fs->lfnbuf[si] != 0) {
06254                 | LR__0970
06254     0C 0E 06 F1 | 	add	local03, #12
06258     07 11 02 FB | 	rdlong	local04, local03
0625c     0C 0E 86 F1 | 	sub	local03, #12
06260     0A 19 02 F6 | 	mov	local08, local06
06264     01 18 66 F0 | 	shl	local08, #1
06268     08 19 02 F1 | 	add	local08, local04
0626c     0C 11 EA FA | 	rdword	local04, local08 wz
06270     90 00 90 AD |  if_e	jmp	#LR__0972
06274     0C 0E 06 F1 | 	add	local03, #12
06278     07 1B 02 FB | 	rdlong	local09, local03
0627c     0C 0E 86 F1 | 	sub	local03, #12
06280     0A 1D 02 F6 | 	mov	local10, local06
06284     01 1C 66 F0 | 	shl	local10, #1
06288     0D 1D 02 F1 | 	add	local10, local09
0628c     0E 1F E2 FA | 	rdword	local11, local10
06290     0B 11 02 F6 | 	mov	local04, local07
06294     0F 10 4E F7 | 	zerox	local04, #15 wz
06298     01 14 06 F1 | 	add	local06, #1
0629c     24 00 90 5D |  if_ne	jmp	#LR__0971
062a0     0F 21 32 F9 | 	getword	local12, local11, #0
062a4     6C 00 00 FF 
062a8     00 20 16 F2 | 	cmp	local12, ##55296 wc
062ac     14 00 90 CD |  if_b	jmp	#LR__0971
062b0     0F 23 32 F9 | 	getword	local13, local11, #0
062b4     70 00 00 FF 
062b8     00 22 16 F2 | 	cmp	local13, ##57344 wc
062bc     0F 17 02 C6 |  if_b	mov	local07, local11
062c0                 | ' 					hs = wc; continue;
062c0     90 FF 9F CD |  if_b	jmp	#LR__0970
062c4                 | LR__0971
062c4     0B 01 32 F9 | 	getword	arg01, local07, #0
062c8     10 00 66 F0 | 	shl	arg01, #16
062cc     0F 1F 32 F9 | 	getword	local11, local11, #0
062d0     0F 01 42 F5 | 	or	arg01, local11
062d4     09 03 02 F6 | 	mov	arg02, local05
062d8     1C 0C 06 F1 | 	add	local02, #28
062dc     06 03 02 F1 | 	add	arg02, local02
062e0     FF 04 06 F6 | 	mov	arg03, #255
062e4     09 05 82 F1 | 	sub	arg03, local05
062e8     1C 0C 86 F1 | 	sub	local02, #28
062ec     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
062f0     F5 24 0A F6 | 	mov	local14, result1 wz
062f4     00 12 06 A6 |  if_e	mov	local05, #0
062f8     12 13 02 51 |  if_ne	add	local05, local14
062fc     00 16 06 56 |  if_ne	mov	local07, #0
06300     50 FF 9F 5D |  if_ne	jmp	#LR__0970
06304                 | LR__0972
06304     0B 11 02 F6 | 	mov	local04, local07
06308     0F 10 4E F7 | 	zerox	local04, #15 wz
0630c     00 12 06 56 |  if_ne	mov	local05, #0
06310     1C 0C 06 F1 | 	add	local02, #28
06314     06 13 02 F1 | 	add	local05, local02
06318     09 01 48 FC | 	wrbyte	#0, local05
0631c     1C 0C 86 F1 | 	sub	local02, #28
06320                 | LR__0973
06320     00 12 06 F6 | 	mov	local05, #0
06324     00 14 06 F6 | 	mov	local06, #0
06328                 | ' 			fno->fname[di] = 0;
06328                 | ' 		}
06328                 | ' 	}
06328                 | ' 
06328                 | ' 	si = di = 0;
06328                 | ' 	while (si < 11) {
06328                 | LR__0974
06328     0B 14 16 F2 | 	cmp	local06, #11 wc
0632c     20 01 90 3D |  if_ae	jmp	#LR__0977
06330     1C 0A 06 F1 | 	add	local01, #28
06334     05 1B 02 FB | 	rdlong	local09, local01
06338     1C 0A 86 F1 | 	sub	local01, #28
0633c     0A 1D 02 F6 | 	mov	local10, local06
06340     0D 1D 02 F1 | 	add	local10, local09
06344     0E 1F C2 FA | 	rdbyte	local11, local10
06348     0F 11 32 F9 | 	getword	local04, local11, #0
0634c     20 10 0E F2 | 	cmp	local04, #32 wz
06350     01 14 06 F1 | 	add	local06, #1
06354     D0 FF 9F AD |  if_e	jmp	#LR__0974
06358     0F 11 32 F9 | 	getword	local04, local11, #0
0635c     05 10 0E F2 | 	cmp	local04, #5 wz
06360     E5 1E 06 A6 |  if_e	mov	local11, #229
06364     09 14 0E F2 | 	cmp	local06, #9 wz
06368     20 00 90 5D |  if_ne	jmp	#LR__0975
0636c     0C 12 16 F2 | 	cmp	local05, #12 wc
06370     18 00 90 3D |  if_ae	jmp	#LR__0975
06374     09 23 02 F6 | 	mov	local13, local05
06378     0C 0C 06 F1 | 	add	local02, #12
0637c     06 23 02 F1 | 	add	local13, local02
06380     11 5D 48 FC | 	wrbyte	#46, local13
06384     01 12 06 F1 | 	add	local05, #1
06388     0C 0C 86 F1 | 	sub	local02, #12
0638c                 | LR__0975
0638c     0F 01 32 F9 | 	getword	arg01, local11, #0
06390     07 00 4E F7 | 	zerox	arg01, #7 wz
06394     00 EA 05 56 |  if_ne	mov	result1, #0
06398                 | ' 
06398                 | ' 	return 0;
06398     00 EA 05 A6 |  if_e	mov	result1, #0
0639c     00 EA 0D F2 | 	cmp	result1, #0 wz
063a0     08 14 0E 52 |  if_ne	cmp	local06, #8 wz
063a4     0B 14 0E 52 |  if_ne	cmp	local06, #11 wz
063a8     50 00 90 AD |  if_e	jmp	#LR__0976
063ac     1C 0A 06 F1 | 	add	local01, #28
063b0     05 1D 02 FB | 	rdlong	local10, local01
063b4     1C 0A 86 F1 | 	sub	local01, #28
063b8     0A 19 02 F6 | 	mov	local08, local06
063bc     0E 19 02 F1 | 	add	local08, local10
063c0     0C 01 CA FA | 	rdbyte	arg01, local08 wz
063c4     00 EA 05 56 |  if_ne	mov	result1, #0
063c8                 | ' 
063c8                 | ' 	return 0;
063c8     00 EA 05 A6 |  if_e	mov	result1, #0
063cc     00 EA 0D F2 | 	cmp	result1, #0 wz
063d0     28 00 90 AD |  if_e	jmp	#LR__0976
063d4     0F 1F 32 F9 | 	getword	local11, local11, #0
063d8     08 1E 66 F0 | 	shl	local11, #8
063dc     1C 0A 06 F1 | 	add	local01, #28
063e0     05 25 02 FB | 	rdlong	local14, local01
063e4     1C 0A 86 F1 | 	sub	local01, #28
063e8     0A 1B 02 F6 | 	mov	local09, local06
063ec     12 1B 02 F1 | 	add	local09, local14
063f0     0D 21 C2 FA | 	rdbyte	local12, local09
063f4     10 1F 42 F5 | 	or	local11, local12
063f8     01 14 06 F1 | 	add	local06, #1
063fc                 | LR__0976
063fc     0F 01 02 F6 | 	mov	arg01, local11
06400     01 00 00 FF 
06404     52 03 06 F6 | 	mov	arg02, ##850
06408     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
0640c     F5 1E 02 F6 | 	mov	local11, result1
06410     0F 11 02 F6 | 	mov	local04, local11
06414     0F 10 4E F7 | 	zerox	local04, #15 wz
06418     00 12 06 A6 |  if_e	mov	local05, #0
0641c     30 00 90 AD |  if_e	jmp	#LR__0977
06420     0F 01 32 F9 | 	getword	arg01, local11, #0
06424     09 03 02 F6 | 	mov	arg02, local05
06428     0C 0C 06 F1 | 	add	local02, #12
0642c     06 03 02 F1 | 	add	arg02, local02
06430     0C 04 06 F6 | 	mov	arg03, #12
06434     09 05 82 F1 | 	sub	arg03, local05
06438     0C 0C 86 F1 | 	sub	local02, #12
0643c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
06440     F5 24 0A F6 | 	mov	local14, result1 wz
06444     00 12 06 A6 |  if_e	mov	local05, #0
06448     12 13 02 51 |  if_ne	add	local05, local14
0644c     D8 FE 9F 5D |  if_ne	jmp	#LR__0974
06450                 | LR__0977
06450     09 11 02 F6 | 	mov	local04, local05
06454     0C 0C 06 F1 | 	add	local02, #12
06458     06 11 02 F1 | 	add	local04, local02
0645c     08 01 48 FC | 	wrbyte	#0, local04
06460     10 0C 06 F1 | 	add	local02, #16
06464     06 11 CA FA | 	rdbyte	local04, local02 wz
06468     1C 0C 86 F1 | 	sub	local02, #28
0646c     F8 00 90 5D |  if_ne	jmp	#LR__0983
06470     00 12 0E F2 | 	cmp	local05, #0 wz
06474     1C 00 90 5D |  if_ne	jmp	#LR__0978
06478     09 23 02 F6 | 	mov	local13, local05
0647c     1C 0C 06 F1 | 	add	local02, #28
06480     06 23 02 F1 | 	add	local13, local02
06484     11 7F 48 FC | 	wrbyte	#63, local13
06488     01 12 06 F1 | 	add	local05, #1
0648c     1C 0C 86 F1 | 	sub	local02, #28
06490     A4 00 90 FD | 	jmp	#LR__0982
06494                 | LR__0978
06494                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
06494     00 12 06 F6 | 	mov	local05, #0
06498     00 14 06 F6 | 	mov	local06, #0
0649c     08 26 06 F6 | 	mov	local15, #8
064a0                 | LR__0979
064a0     0A 11 02 F6 | 	mov	local04, local06
064a4     0C 0C 06 F1 | 	add	local02, #12
064a8     06 11 02 F1 | 	add	local04, local02
064ac     08 23 CA FA | 	rdbyte	local13, local04 wz
064b0     0C 0C 86 F1 | 	sub	local02, #12
064b4     80 00 90 AD |  if_e	jmp	#LR__0981
064b8     0A 19 02 F6 | 	mov	local08, local06
064bc     0C 0C 06 F1 | 	add	local02, #12
064c0     06 19 02 F1 | 	add	local08, local02
064c4     0C 1F C2 FA | 	rdbyte	local11, local08
064c8     0F 25 32 F9 | 	getword	local14, local11, #0
064cc     2E 24 0E F2 | 	cmp	local14, #46 wz
064d0     0C 0C 86 F1 | 	sub	local02, #12
064d4     10 26 06 A6 |  if_e	mov	local15, #16
064d8     0F 25 32 F9 | 	getword	local14, local11, #0
064dc     41 24 16 F2 | 	cmp	local14, #65 wc
064e0     30 00 90 CD |  if_b	jmp	#LR__0980
064e4     0F 19 32 F9 | 	getword	local08, local11, #0
064e8     5B 18 16 F2 | 	cmp	local08, #91 wc
064ec     24 00 90 3D |  if_ae	jmp	#LR__0980
064f0     1C 0A 06 F1 | 	add	local01, #28
064f4     05 1B 02 FB | 	rdlong	local09, local01
064f8     1C 0A 86 F1 | 	sub	local01, #28
064fc     0C 1A 06 F1 | 	add	local09, #12
06500     0D 1D C2 FA | 	rdbyte	local10, local09
06504     13 25 E2 F8 | 	getbyte	local14, local15, #0
06508     12 1D CA F7 | 	test	local10, local14 wz
0650c     0F 1F 32 59 |  if_ne	getword	local11, local11, #0
06510     20 1E 06 51 |  if_ne	add	local11, #32
06514                 | LR__0980
06514     09 25 02 F6 | 	mov	local14, local05
06518     1C 0C 06 F1 | 	add	local02, #28
0651c     06 25 02 F1 | 	add	local14, local02
06520     0F 1F 32 F9 | 	getword	local11, local11, #0
06524     12 1F 42 FC | 	wrbyte	local11, local14
06528     01 14 06 F1 | 	add	local06, #1
0652c     01 12 06 F1 | 	add	local05, #1
06530     1C 0C 86 F1 | 	sub	local02, #28
06534     68 FF 9F FD | 	jmp	#LR__0979
06538                 | LR__0981
06538                 | LR__0982
06538     1C 0C 06 F1 | 	add	local02, #28
0653c     06 13 02 F1 | 	add	local05, local02
06540     09 01 48 FC | 	wrbyte	#0, local05
06544     1C 0A 06 F1 | 	add	local01, #28
06548     05 11 02 FB | 	rdlong	local04, local01
0654c     1C 0A 86 F1 | 	sub	local01, #28
06550     0C 10 06 F1 | 	add	local04, #12
06554     08 23 CA FA | 	rdbyte	local13, local04 wz
06558     1C 0C 86 F1 | 	sub	local02, #28
0655c     0C 0C 06 A1 |  if_e	add	local02, #12
06560     06 01 48 AC |  if_e	wrbyte	#0, local02
06564     0C 0C 86 A1 |  if_e	sub	local02, #12
06568                 | LR__0983
06568     1C 0A 06 F1 | 	add	local01, #28
0656c     05 21 02 FB | 	rdlong	local12, local01
06570     0B 20 06 F1 | 	add	local12, #11
06574     10 11 C2 FA | 	rdbyte	local04, local12
06578     3F 10 06 F5 | 	and	local04, #63
0657c     08 0C 06 F1 | 	add	local02, #8
06580     06 11 42 FC | 	wrbyte	local04, local02
06584     08 0C 86 F1 | 	sub	local02, #8
06588     05 01 02 FB | 	rdlong	arg01, local01
0658c     1C 00 06 F1 | 	add	arg01, #28
06590                 | ' {
06590                 | ' 
06590                 | ' 	return *((DWORD*)ptr);
06590     00 EB 01 FB | 	rdlong	result1, arg01
06594     06 EB 61 FC | 	wrlong	result1, local02
06598     05 01 02 FB | 	rdlong	arg01, local01
0659c     16 00 06 F1 | 	add	arg01, #22
065a0                 | ' {
065a0                 | ' 
065a0                 | ' 	return *((WORD*)ptr);
065a0     00 EB E1 FA | 	rdword	result1, arg01
065a4     06 0C 06 F1 | 	add	local02, #6
065a8     06 EB 51 FC | 	wrword	result1, local02
065ac     05 01 02 FB | 	rdlong	arg01, local01
065b0     18 00 06 F1 | 	add	arg01, #24
065b4                 | ' {
065b4                 | ' 
065b4                 | ' 	return *((WORD*)ptr);
065b4     00 EB E1 FA | 	rdword	result1, arg01
065b8     02 0C 86 F1 | 	sub	local02, #2
065bc     06 EB 51 FC | 	wrword	result1, local02
065c0                 | LR__0984
065c0     A7 F0 03 F6 | 	mov	ptra, fp
065c4     B2 00 A0 FD | 	call	#popregs_
065c8                 | _fatfs_cc_get_fileinfo_ret
065c8     2D 00 64 FD | 	ret
065cc                 | 
065cc                 | _fatfs_cc_create_name
065cc     0D 4A 05 F6 | 	mov	COUNT_, #13
065d0     A8 00 A0 FD | 	call	#pushregs_
065d4     34 F0 07 F1 | 	add	ptra, #52
065d8     04 4E 05 F1 | 	add	fp, #4
065dc     A7 00 62 FC | 	wrlong	arg01, fp
065e0     04 4E 05 F1 | 	add	fp, #4
065e4     A7 02 62 FC | 	wrlong	arg02, fp
065e8     01 EB 01 FB | 	rdlong	result1, arg02
065ec     28 4E 05 F1 | 	add	fp, #40
065f0     A7 EA 61 FC | 	wrlong	result1, fp
065f4     2C 4E 85 F1 | 	sub	fp, #44
065f8     A7 EA 01 FB | 	rdlong	result1, fp
065fc     F5 0A 02 FB | 	rdlong	local01, result1
06600     0C 0A 06 F1 | 	add	local01, #12
06604     05 0D 02 FB | 	rdlong	local02, local01
06608     14 4E 05 F1 | 	add	fp, #20
0660c     A7 0C 62 FC | 	wrlong	local02, fp
06610     14 4E 05 F1 | 	add	fp, #20
06614     A7 00 68 FC | 	wrlong	#0, fp
06618     2C 4E 85 F1 | 	sub	fp, #44
0661c                 | ' 
0661c                 | ' 
0661c                 | ' 
0661c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
0661c                 | ' 	for (;;) {
0661c                 | LR__0990
0661c     30 4E 05 F1 | 	add	fp, #48
06620     A7 00 02 F6 | 	mov	arg01, fp
06624     30 4E 85 F1 | 	sub	fp, #48
06628     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
0662c     1C 4E 05 F1 | 	add	fp, #28
06630     A7 EA 61 FC | 	wrlong	result1, fp
06634     1C 4E 85 F1 | 	sub	fp, #28
06638     FF FF 7F FF 
0663c     FF EB 0D F2 | 	cmp	result1, ##-1 wz
06640     06 EA 05 A6 |  if_e	mov	result1, #6
06644     74 08 90 AD |  if_e	jmp	#LR__1030
06648     1C 4E 05 F1 | 	add	fp, #28
0664c     A7 0A 02 FB | 	rdlong	local01, fp
06650     1C 4E 85 F1 | 	sub	fp, #28
06654     80 00 00 FF 
06658     00 0A 16 F2 | 	cmp	local01, ##65536 wc
0665c     3C 00 90 CD |  if_b	jmp	#LR__0991
06660     18 4E 05 F1 | 	add	fp, #24
06664     A7 0E 02 FB | 	rdlong	local03, fp
06668     14 4E 05 F1 | 	add	fp, #20
0666c     A7 0A 02 FB | 	rdlong	local01, fp
06670     05 11 02 F6 | 	mov	local04, local01
06674     01 10 06 F1 | 	add	local04, #1
06678     A7 10 62 FC | 	wrlong	local04, fp
0667c     01 0A 66 F0 | 	shl	local01, #1
06680     07 0B 02 F1 | 	add	local01, local03
06684     10 4E 85 F1 | 	sub	fp, #16
06688     A7 12 02 FB | 	rdlong	local05, fp
0668c     1C 4E 85 F1 | 	sub	fp, #28
06690     09 15 02 F6 | 	mov	local06, local05
06694     10 14 46 F0 | 	shr	local06, #16
06698     05 15 52 FC | 	wrword	local06, local01
0669c                 | LR__0991
0669c     1C 4E 05 F1 | 	add	fp, #28
066a0     A7 0A 02 FB | 	rdlong	local01, fp
066a4     08 4E 85 F1 | 	sub	fp, #8
066a8     A7 0A 52 FC | 	wrword	local01, fp
066ac     A7 0A E2 FA | 	rdword	local01, fp
066b0     14 4E 85 F1 | 	sub	fp, #20
066b4     20 0A 16 F2 | 	cmp	local01, #32 wc
066b8     B0 00 90 CD |  if_b	jmp	#LR__0993
066bc     14 4E 05 F1 | 	add	fp, #20
066c0     A7 0A E2 FA | 	rdword	local01, fp
066c4     14 4E 85 F1 | 	sub	fp, #20
066c8     2F 0A 0E F2 | 	cmp	local01, #47 wz
066cc     14 4E 05 51 |  if_ne	add	fp, #20
066d0     A7 10 E2 5A |  if_ne	rdword	local04, fp
066d4     14 4E 85 51 |  if_ne	sub	fp, #20
066d8     5C 10 0E 52 |  if_ne	cmp	local04, #92 wz
066dc     8C 00 90 AD |  if_e	jmp	#LR__0993
066e0     14 4E 05 F1 | 	add	fp, #20
066e4     A7 00 E2 FA | 	rdword	arg01, fp
066e8     14 4E 85 F1 | 	sub	fp, #20
066ec     80 00 16 F2 | 	cmp	arg01, #128 wc
066f0     24 00 90 3D |  if_ae	jmp	#LR__0992
066f4     62 00 00 FF 
066f8     B2 01 06 F6 | 	mov	arg01, ##@LR__1625
066fc     14 4E 05 F1 | 	add	fp, #20
06700     A7 02 E2 FA | 	rdword	arg02, fp
06704     14 4E 85 F1 | 	sub	fp, #20
06708     FC D0 BF FD | 	call	#_fatfs_cc_strchr
0670c     00 EA 0D F2 | 	cmp	result1, #0 wz
06710     06 EA 05 56 |  if_ne	mov	result1, #6
06714     A4 07 90 5D |  if_ne	jmp	#LR__1030
06718                 | LR__0992
06718     2C 4E 05 F1 | 	add	fp, #44
0671c     A7 14 02 FB | 	rdlong	local06, fp
06720     2C 4E 85 F1 | 	sub	fp, #44
06724     FF 14 16 F2 | 	cmp	local06, #255 wc
06728     06 EA 05 36 |  if_ae	mov	result1, #6
0672c     8C 07 90 3D |  if_ae	jmp	#LR__1030
06730     18 4E 05 F1 | 	add	fp, #24
06734     A7 0E 02 FB | 	rdlong	local03, fp
06738     14 4E 05 F1 | 	add	fp, #20
0673c     A7 0C 02 FB | 	rdlong	local02, fp
06740     06 11 02 F6 | 	mov	local04, local02
06744     01 10 06 F1 | 	add	local04, #1
06748     A7 10 62 FC | 	wrlong	local04, fp
0674c     06 0B 02 F6 | 	mov	local01, local02
06750     01 0A 66 F0 | 	shl	local01, #1
06754     07 0B 02 F1 | 	add	local01, local03
06758     18 4E 85 F1 | 	sub	fp, #24
0675c     A7 14 E2 FA | 	rdword	local06, fp
06760     14 4E 85 F1 | 	sub	fp, #20
06764     05 15 52 FC | 	wrword	local06, local01
06768     B0 FE 9F FD | 	jmp	#LR__0990
0676c                 | LR__0993
0676c     14 4E 05 F1 | 	add	fp, #20
06770     A7 16 E2 FA | 	rdword	local07, fp
06774     14 4E 85 F1 | 	sub	fp, #20
06778     20 16 16 F2 | 	cmp	local07, #32 wc
0677c     10 4E 05 C1 |  if_b	add	fp, #16
06780     A7 08 48 CC |  if_b	wrbyte	#4, fp
06784     10 4E 85 C1 |  if_b	sub	fp, #16
06788     74 00 90 CD |  if_b	jmp	#LR__0998
0678c     97 24 48 FB | 	callpa	#(@LR__0996-@LR__0994)>>2,fcache_load_ptr_
06790                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
06790                 | LR__0994
06790     30 4E 05 F1 | 	add	fp, #48
06794     A7 10 02 FB | 	rdlong	local04, fp
06798     30 4E 85 F1 | 	sub	fp, #48
0679c     08 17 C2 FA | 	rdbyte	local07, local04
067a0     2F 16 0E F2 | 	cmp	local07, #47 wz
067a4     18 00 90 AD |  if_e	jmp	#LR__0995
067a8     30 4E 05 F1 | 	add	fp, #48
067ac     A7 10 02 FB | 	rdlong	local04, fp
067b0     30 4E 85 F1 | 	sub	fp, #48
067b4     08 0D C2 FA | 	rdbyte	local02, local04
067b8     5C 0C 0E F2 | 	cmp	local02, #92 wz
067bc     18 00 90 5D |  if_ne	jmp	#LR__0997
067c0                 | LR__0995
067c0     30 4E 05 F1 | 	add	fp, #48
067c4     A7 0A 02 FB | 	rdlong	local01, fp
067c8     01 0A 06 F1 | 	add	local01, #1
067cc     A7 0A 62 FC | 	wrlong	local01, fp
067d0     30 4E 85 F1 | 	sub	fp, #48
067d4     B8 FF 9F FD | 	jmp	#LR__0994
067d8                 | LR__0996
067d8                 | LR__0997
067d8     10 4E 05 F1 | 	add	fp, #16
067dc     A7 00 48 FC | 	wrbyte	#0, fp
067e0     20 4E 05 F1 | 	add	fp, #32
067e4     A7 14 02 FB | 	rdlong	local06, fp
067e8     30 4E 85 F1 | 	sub	fp, #48
067ec     0A 17 C2 FA | 	rdbyte	local07, local06
067f0     20 16 16 F2 | 	cmp	local07, #32 wc
067f4     10 4E 05 C1 |  if_b	add	fp, #16
067f8     A7 08 48 CC |  if_b	wrbyte	#4, fp
067fc     10 4E 85 C1 |  if_b	sub	fp, #16
06800                 | LR__0998
06800     08 4E 05 F1 | 	add	fp, #8
06804     A7 16 02 FB | 	rdlong	local07, fp
06808     28 4E 05 F1 | 	add	fp, #40
0680c     A7 0A 02 FB | 	rdlong	local01, fp
06810     30 4E 85 F1 | 	sub	fp, #48
06814     0B 0B 62 FC | 	wrlong	local01, local07
06818     97 38 48 FB | 	callpa	#(@LR__1000-@LR__0999)>>2,fcache_load_ptr_
0681c                 | ' 	}
0681c                 | ' 	*path = p;
0681c                 | ' #line 2862 "ff.c"
0681c                 | ' 	while (di) {
0681c                 | LR__0999
0681c     2C 4E 05 F1 | 	add	fp, #44
06820     A7 16 0A FB | 	rdlong	local07, fp wz
06824     2C 4E 85 F1 | 	sub	fp, #44
06828     60 00 90 AD |  if_e	jmp	#LR__1001
0682c     18 4E 05 F1 | 	add	fp, #24
06830     A7 14 02 FB | 	rdlong	local06, fp
06834     14 4E 05 F1 | 	add	fp, #20
06838     A7 10 02 FB | 	rdlong	local04, fp
0683c     01 10 86 F1 | 	sub	local04, #1
06840     01 10 66 F0 | 	shl	local04, #1
06844     0A 11 02 F1 | 	add	local04, local06
06848     08 15 E2 FA | 	rdword	local06, local04
0684c     18 4E 85 F1 | 	sub	fp, #24
06850     A7 14 52 FC | 	wrword	local06, fp
06854     A7 16 E2 FA | 	rdword	local07, fp
06858     14 4E 85 F1 | 	sub	fp, #20
0685c     20 16 0E F2 | 	cmp	local07, #32 wz
06860     14 4E 05 51 |  if_ne	add	fp, #20
06864     A7 0A E2 5A |  if_ne	rdword	local01, fp
06868     14 4E 85 51 |  if_ne	sub	fp, #20
0686c     2E 0A 0E 52 |  if_ne	cmp	local01, #46 wz
06870     18 00 90 5D |  if_ne	jmp	#LR__1001
06874     2C 4E 05 F1 | 	add	fp, #44
06878     A7 0A 02 FB | 	rdlong	local01, fp
0687c     01 0A 86 F1 | 	sub	local01, #1
06880     A7 0A 62 FC | 	wrlong	local01, fp
06884     2C 4E 85 F1 | 	sub	fp, #44
06888     90 FF 9F FD | 	jmp	#LR__0999
0688c                 | LR__1000
0688c                 | LR__1001
0688c     18 4E 05 F1 | 	add	fp, #24
06890     A7 18 02 FB | 	rdlong	local08, fp
06894     14 4E 05 F1 | 	add	fp, #20
06898     A7 10 02 FB | 	rdlong	local04, fp
0689c     01 10 66 F0 | 	shl	local04, #1
068a0     0C 11 02 F1 | 	add	local04, local08
068a4     08 01 58 FC | 	wrword	#0, local04
068a8     A7 16 0A FB | 	rdlong	local07, fp wz
068ac     2C 4E 85 F1 | 	sub	fp, #44
068b0     06 EA 05 A6 |  if_e	mov	result1, #6
068b4     04 06 90 AD |  if_e	jmp	#LR__1030
068b8                 | ' 
068b8                 | ' 
068b8                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
068b8     28 4E 05 F1 | 	add	fp, #40
068bc     A7 00 68 FC | 	wrlong	#0, fp
068c0     28 4E 85 F1 | 	sub	fp, #40
068c4     97 22 48 FB | 	callpa	#(@LR__1003-@LR__1002)>>2,fcache_load_ptr_
068c8                 | LR__1002
068c8     18 4E 05 F1 | 	add	fp, #24
068cc     A7 1A 02 FB | 	rdlong	local09, fp
068d0     10 4E 05 F1 | 	add	fp, #16
068d4     A7 1C 02 FB | 	rdlong	local10, fp
068d8     28 4E 85 F1 | 	sub	fp, #40
068dc     01 1C 66 F0 | 	shl	local10, #1
068e0     0D 1D 02 F1 | 	add	local10, local09
068e4     0E 1F E2 FA | 	rdword	local11, local10
068e8     20 1E 0E F2 | 	cmp	local11, #32 wz
068ec     1C 00 90 5D |  if_ne	jmp	#LR__1004
068f0     28 4E 05 F1 | 	add	fp, #40
068f4     A7 20 02 FB | 	rdlong	local12, fp
068f8     10 13 02 F6 | 	mov	local05, local12
068fc     01 12 06 F1 | 	add	local05, #1
06900     A7 12 62 FC | 	wrlong	local05, fp
06904     28 4E 85 F1 | 	sub	fp, #40
06908     BC FF 9F FD | 	jmp	#LR__1002
0690c                 | LR__1003
0690c                 | LR__1004
0690c     28 4E 05 F1 | 	add	fp, #40
06910     A7 16 02 FB | 	rdlong	local07, fp
06914     28 4E 85 F1 | 	sub	fp, #40
06918     01 16 16 F2 | 	cmp	local07, #1 wc
0691c     28 00 90 3D |  if_ae	jmp	#LR__1005
06920     18 4E 05 F1 | 	add	fp, #24
06924     A7 0E 02 FB | 	rdlong	local03, fp
06928     10 4E 05 F1 | 	add	fp, #16
0692c     A7 1A 02 FB | 	rdlong	local09, fp
06930     28 4E 85 F1 | 	sub	fp, #40
06934     01 1A 66 F0 | 	shl	local09, #1
06938     07 1B 02 F1 | 	add	local09, local03
0693c     0D 0B E2 FA | 	rdword	local01, local09
06940     2E 0A 0E F2 | 	cmp	local01, #46 wz
06944     14 00 90 5D |  if_ne	jmp	#LR__1006
06948                 | LR__1005
06948     10 4E 05 F1 | 	add	fp, #16
0694c     A7 16 C2 FA | 	rdbyte	local07, fp
06950     03 16 46 F5 | 	or	local07, #3
06954     A7 16 42 FC | 	wrbyte	local07, fp
06958     10 4E 85 F1 | 	sub	fp, #16
0695c                 | LR__1006
0695c     97 2C 48 FB | 	callpa	#(@LR__1008-@LR__1007)>>2,fcache_load_ptr_
06960                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
06960                 | LR__1007
06960     2C 4E 05 F1 | 	add	fp, #44
06964     A7 16 02 FB | 	rdlong	local07, fp
06968     2C 4E 85 F1 | 	sub	fp, #44
0696c     01 16 16 F2 | 	cmp	local07, #1 wc
06970     44 00 90 CD |  if_b	jmp	#LR__1009
06974     18 4E 05 F1 | 	add	fp, #24
06978     A7 14 02 FB | 	rdlong	local06, fp
0697c     14 4E 05 F1 | 	add	fp, #20
06980     A7 0E 02 FB | 	rdlong	local03, fp
06984     2C 4E 85 F1 | 	sub	fp, #44
06988     01 0E 86 F1 | 	sub	local03, #1
0698c     01 0E 66 F0 | 	shl	local03, #1
06990     0A 0F 02 F1 | 	add	local03, local06
06994     07 0B E2 FA | 	rdword	local01, local03
06998     2E 0A 0E F2 | 	cmp	local01, #46 wz
0699c     18 00 90 AD |  if_e	jmp	#LR__1009
069a0     2C 4E 05 F1 | 	add	fp, #44
069a4     A7 0A 02 FB | 	rdlong	local01, fp
069a8     01 0A 86 F1 | 	sub	local01, #1
069ac     A7 0A 62 FC | 	wrlong	local01, fp
069b0     2C 4E 85 F1 | 	sub	fp, #44
069b4     A8 FF 9F FD | 	jmp	#LR__1007
069b8                 | LR__1008
069b8                 | LR__1009
069b8     04 4E 05 F1 | 	add	fp, #4
069bc     A7 00 02 FB | 	rdlong	arg01, fp
069c0     04 4E 85 F1 | 	sub	fp, #4
069c4     20 00 06 F1 | 	add	arg01, #32
069c8     20 02 06 F6 | 	mov	arg02, #32
069cc     0B 04 06 F6 | 	mov	arg03, #11
069d0     00 23 02 F6 | 	mov	local13, arg01
069d4     98 00 A0 FD | 	call	#\builtin_bytefill_
069d8     11 EB 01 F6 | 	mov	result1, local13
069dc     0C 4E 05 F1 | 	add	fp, #12
069e0     A7 00 48 FC | 	wrbyte	#0, fp
069e4     A7 16 C2 FA | 	rdbyte	local07, fp
069e8     14 4E 05 F1 | 	add	fp, #20
069ec     A7 16 62 FC | 	wrlong	local07, fp
069f0     04 4E 05 F1 | 	add	fp, #4
069f4     A7 10 68 FC | 	wrlong	#8, fp
069f8     24 4E 85 F1 | 	sub	fp, #36
069fc                 | ' 
069fc                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
069fc                 | ' 	i = b = 0; ni = 8;
069fc                 | ' 	for (;;) {
069fc                 | LR__1010
069fc     18 4E 05 F1 | 	add	fp, #24
06a00     A7 0E 02 FB | 	rdlong	local03, fp
06a04     10 4E 05 F1 | 	add	fp, #16
06a08     A7 1A 02 FB | 	rdlong	local09, fp
06a0c     0D 11 02 F6 | 	mov	local04, local09
06a10     01 10 06 F1 | 	add	local04, #1
06a14     A7 10 62 FC | 	wrlong	local04, fp
06a18     01 1A 66 F0 | 	shl	local09, #1
06a1c     07 1B 02 F1 | 	add	local09, local03
06a20     0D 15 E2 FA | 	rdword	local06, local09
06a24     14 4E 85 F1 | 	sub	fp, #20
06a28     A7 14 52 FC | 	wrword	local06, fp
06a2c     A7 16 EA FA | 	rdword	local07, fp wz
06a30     14 4E 85 F1 | 	sub	fp, #20
06a34     74 03 90 AD |  if_e	jmp	#LR__1026
06a38     14 4E 05 F1 | 	add	fp, #20
06a3c     A7 16 E2 FA | 	rdword	local07, fp
06a40     14 4E 85 F1 | 	sub	fp, #20
06a44     20 16 0E F2 | 	cmp	local07, #32 wz
06a48     30 00 90 AD |  if_e	jmp	#LR__1011
06a4c     14 4E 05 F1 | 	add	fp, #20
06a50     A7 0A E2 FA | 	rdword	local01, fp
06a54     14 4E 85 F1 | 	sub	fp, #20
06a58     2E 0A 0E F2 | 	cmp	local01, #46 wz
06a5c     34 00 90 5D |  if_ne	jmp	#LR__1012
06a60     28 4E 05 F1 | 	add	fp, #40
06a64     A7 10 02 FB | 	rdlong	local04, fp
06a68     04 4E 05 F1 | 	add	fp, #4
06a6c     A7 1C 02 FB | 	rdlong	local10, fp
06a70     2C 4E 85 F1 | 	sub	fp, #44
06a74     0E 11 0A F2 | 	cmp	local04, local10 wz
06a78     18 00 90 AD |  if_e	jmp	#LR__1012
06a7c                 | LR__1011
06a7c     10 4E 05 F1 | 	add	fp, #16
06a80     A7 16 C2 FA | 	rdbyte	local07, fp
06a84     03 16 46 F5 | 	or	local07, #3
06a88     A7 16 42 FC | 	wrbyte	local07, fp
06a8c     10 4E 85 F1 | 	sub	fp, #16
06a90                 | ' 			cf |=  0x01  |  0x02 ;
06a90                 | ' 			continue;
06a90     68 FF 9F FD | 	jmp	#LR__1010
06a94                 | LR__1012
06a94     20 4E 05 F1 | 	add	fp, #32
06a98     A7 16 02 FB | 	rdlong	local07, fp
06a9c     04 4E 05 F1 | 	add	fp, #4
06aa0     A7 0A 02 FB | 	rdlong	local01, fp
06aa4     24 4E 85 F1 | 	sub	fp, #36
06aa8     05 17 12 F2 | 	cmp	local07, local01 wc
06aac     1C 00 90 3D |  if_ae	jmp	#LR__1013
06ab0     28 4E 05 F1 | 	add	fp, #40
06ab4     A7 18 02 FB | 	rdlong	local08, fp
06ab8     04 4E 05 F1 | 	add	fp, #4
06abc     A7 1C 02 FB | 	rdlong	local10, fp
06ac0     2C 4E 85 F1 | 	sub	fp, #44
06ac4     0E 19 0A F2 | 	cmp	local08, local10 wz
06ac8     B0 00 90 5D |  if_ne	jmp	#LR__1015
06acc                 | LR__1013
06acc     24 4E 05 F1 | 	add	fp, #36
06ad0     A7 16 02 FB | 	rdlong	local07, fp
06ad4     24 4E 85 F1 | 	sub	fp, #36
06ad8     0B 16 0E F2 | 	cmp	local07, #11 wz
06adc     18 00 90 5D |  if_ne	jmp	#LR__1014
06ae0     10 4E 05 F1 | 	add	fp, #16
06ae4     A7 16 C2 FA | 	rdbyte	local07, fp
06ae8     03 16 46 F5 | 	or	local07, #3
06aec     A7 16 42 FC | 	wrbyte	local07, fp
06af0     10 4E 85 F1 | 	sub	fp, #16
06af4                 | ' 				cf |=  0x01  |  0x02 ;
06af4                 | ' 				break;
06af4     B4 02 90 FD | 	jmp	#LR__1026
06af8                 | LR__1014
06af8     28 4E 05 F1 | 	add	fp, #40
06afc     A7 16 02 FB | 	rdlong	local07, fp
06b00     04 4E 05 F1 | 	add	fp, #4
06b04     A7 0A 02 FB | 	rdlong	local01, fp
06b08     2C 4E 85 F1 | 	sub	fp, #44
06b0c     05 17 0A F2 | 	cmp	local07, local01 wz
06b10     10 4E 05 51 |  if_ne	add	fp, #16
06b14     A7 16 C2 5A |  if_ne	rdbyte	local07, fp
06b18     03 16 46 55 |  if_ne	or	local07, #3
06b1c     A7 16 42 5C |  if_ne	wrbyte	local07, fp
06b20     10 4E 85 51 |  if_ne	sub	fp, #16
06b24     28 4E 05 F1 | 	add	fp, #40
06b28     A7 16 02 FB | 	rdlong	local07, fp
06b2c     04 4E 05 F1 | 	add	fp, #4
06b30     A7 0C 02 FB | 	rdlong	local02, fp
06b34     2C 4E 85 F1 | 	sub	fp, #44
06b38     06 17 1A F2 | 	cmp	local07, local02 wcz
06b3c     6C 02 90 1D |  if_a	jmp	#LR__1026
06b40     2C 4E 05 F1 | 	add	fp, #44
06b44     A7 16 02 FB | 	rdlong	local07, fp
06b48     04 4E 85 F1 | 	sub	fp, #4
06b4c     A7 16 62 FC | 	wrlong	local07, fp
06b50     08 4E 85 F1 | 	sub	fp, #8
06b54     A7 10 68 FC | 	wrlong	#8, fp
06b58     04 4E 05 F1 | 	add	fp, #4
06b5c     A7 16 68 FC | 	wrlong	#11, fp
06b60     18 4E 85 F1 | 	sub	fp, #24
06b64     A7 1E C2 FA | 	rdbyte	local11, fp
06b68     0F 17 E2 F8 | 	getbyte	local07, local11, #0
06b6c     02 16 66 F0 | 	shl	local07, #2
06b70     A7 16 42 FC | 	wrbyte	local07, fp
06b74     0C 4E 85 F1 | 	sub	fp, #12
06b78                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
06b78                 | ' 			continue;
06b78     80 FE 9F FD | 	jmp	#LR__1010
06b7c                 | LR__1015
06b7c     14 4E 05 F1 | 	add	fp, #20
06b80     A7 16 E2 FA | 	rdword	local07, fp
06b84     14 4E 85 F1 | 	sub	fp, #20
06b88     80 16 16 F2 | 	cmp	local07, #128 wc
06b8c     6C 00 90 CD |  if_b	jmp	#LR__1017
06b90     10 4E 05 F1 | 	add	fp, #16
06b94     A7 16 C2 FA | 	rdbyte	local07, fp
06b98     02 16 46 F5 | 	or	local07, #2
06b9c     A7 16 42 FC | 	wrbyte	local07, fp
06ba0     04 4E 05 F1 | 	add	fp, #4
06ba4     A7 00 E2 FA | 	rdword	arg01, fp
06ba8     14 4E 85 F1 | 	sub	fp, #20
06bac     01 00 00 FF 
06bb0     52 03 06 F6 | 	mov	arg02, ##850
06bb4     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
06bb8     14 4E 05 F1 | 	add	fp, #20
06bbc     A7 EA 51 FC | 	wrword	result1, fp
06bc0     A7 16 E2 FA | 	rdword	local07, fp
06bc4     14 4E 85 F1 | 	sub	fp, #20
06bc8     80 16 CE F7 | 	test	local07, #128 wz
06bcc     2C 00 90 AD |  if_e	jmp	#LR__1016
06bd0     14 4E 05 F1 | 	add	fp, #20
06bd4     A7 0C E2 FA | 	rdword	local02, fp
06bd8     7F 0C 06 F5 | 	and	local02, #127
06bdc     01 00 00 FF 
06be0     BB E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
06be4     F3 0C 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
06be8     06 17 C2 FA | 	rdbyte	local07, local02
06bec     A7 16 52 FC | 	wrword	local07, fp
06bf0     14 4E 85 F1 | 	sub	fp, #20
06bf4     01 00 00 FF 
06bf8     BB E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
06bfc                 | LR__1016
06bfc                 | LR__1017
06bfc     14 4E 05 F1 | 	add	fp, #20
06c00     A7 16 E2 FA | 	rdword	local07, fp
06c04     14 4E 85 F1 | 	sub	fp, #20
06c08     00 17 16 F2 | 	cmp	local07, #256 wc
06c0c     88 00 90 CD |  if_b	jmp	#LR__1019
06c10     24 4E 05 F1 | 	add	fp, #36
06c14     A7 16 02 FB | 	rdlong	local07, fp
06c18     01 16 86 F1 | 	sub	local07, #1
06c1c     04 4E 85 F1 | 	sub	fp, #4
06c20     A7 0C 02 FB | 	rdlong	local02, fp
06c24     20 4E 85 F1 | 	sub	fp, #32
06c28     0B 0D 12 F2 | 	cmp	local02, local07 wc
06c2c     2C 00 90 CD |  if_b	jmp	#LR__1018
06c30     10 4E 05 F1 | 	add	fp, #16
06c34     A7 1E C2 FA | 	rdbyte	local11, fp
06c38     0F 17 E2 F8 | 	getbyte	local07, local11, #0
06c3c     03 16 46 F5 | 	or	local07, #3
06c40     A7 16 42 FC | 	wrbyte	local07, fp
06c44     14 4E 05 F1 | 	add	fp, #20
06c48     A7 16 02 FB | 	rdlong	local07, fp
06c4c     04 4E 85 F1 | 	sub	fp, #4
06c50     A7 16 62 FC | 	wrlong	local07, fp
06c54     20 4E 85 F1 | 	sub	fp, #32
06c58                 | ' 				cf |=  0x01  |  0x02 ;
06c58                 | ' 				i = ni; continue;
06c58     A0 FD 9F FD | 	jmp	#LR__1010
06c5c                 | LR__1018
06c5c     04 4E 05 F1 | 	add	fp, #4
06c60     A7 1A 02 FB | 	rdlong	local09, fp
06c64     1C 4E 05 F1 | 	add	fp, #28
06c68     A7 1C 02 FB | 	rdlong	local10, fp
06c6c     0E 11 02 F6 | 	mov	local04, local10
06c70     01 10 06 F1 | 	add	local04, #1
06c74     A7 10 62 FC | 	wrlong	local04, fp
06c78     20 1A 06 F1 | 	add	local09, #32
06c7c     0D 1D 02 F1 | 	add	local10, local09
06c80     0C 4E 85 F1 | 	sub	fp, #12
06c84     A7 0E E2 FA | 	rdword	local03, fp
06c88     14 4E 85 F1 | 	sub	fp, #20
06c8c     08 0E 46 F0 | 	shr	local03, #8
06c90     0E 0F 42 FC | 	wrbyte	local03, local10
06c94     D4 00 90 FD | 	jmp	#LR__1025
06c98                 | LR__1019
06c98     14 4E 05 F1 | 	add	fp, #20
06c9c     A7 16 EA FA | 	rdword	local07, fp wz
06ca0     14 4E 85 F1 | 	sub	fp, #20
06ca4     20 00 90 AD |  if_e	jmp	#LR__1020
06ca8     62 00 00 FF 
06cac     BB 01 06 F6 | 	mov	arg01, ##@LR__1626
06cb0     14 4E 05 F1 | 	add	fp, #20
06cb4     A7 02 E2 FA | 	rdword	arg02, fp
06cb8     14 4E 85 F1 | 	sub	fp, #20
06cbc     48 CB BF FD | 	call	#_fatfs_cc_strchr
06cc0     00 EA 0D F2 | 	cmp	result1, #0 wz
06cc4     20 00 90 AD |  if_e	jmp	#LR__1021
06cc8                 | LR__1020
06cc8     14 4E 05 F1 | 	add	fp, #20
06ccc     A7 BE 58 FC | 	wrword	#95, fp
06cd0     04 4E 85 F1 | 	sub	fp, #4
06cd4     A7 16 C2 FA | 	rdbyte	local07, fp
06cd8     03 16 46 F5 | 	or	local07, #3
06cdc     A7 16 42 FC | 	wrbyte	local07, fp
06ce0     10 4E 85 F1 | 	sub	fp, #16
06ce4     84 00 90 FD | 	jmp	#LR__1024
06ce8                 | LR__1021
06ce8     14 4E 05 F1 | 	add	fp, #20
06cec     A7 16 E2 FA | 	rdword	local07, fp
06cf0     14 4E 85 F1 | 	sub	fp, #20
06cf4     41 16 16 F2 | 	cmp	local07, #65 wc
06cf8     24 00 90 CD |  if_b	jmp	#LR__1022
06cfc     14 4E 05 F1 | 	add	fp, #20
06d00     A7 0A E2 FA | 	rdword	local01, fp
06d04     14 4E 85 F1 | 	sub	fp, #20
06d08     5B 0A 16 F2 | 	cmp	local01, #91 wc
06d0c     0C 4E 05 C1 |  if_b	add	fp, #12
06d10     A7 16 C2 CA |  if_b	rdbyte	local07, fp
06d14     02 16 46 C5 |  if_b	or	local07, #2
06d18     A7 16 42 CC |  if_b	wrbyte	local07, fp
06d1c     0C 4E 85 C1 |  if_b	sub	fp, #12
06d20                 | LR__1022
06d20     14 4E 05 F1 | 	add	fp, #20
06d24     A7 16 E2 FA | 	rdword	local07, fp
06d28     14 4E 85 F1 | 	sub	fp, #20
06d2c     61 16 16 F2 | 	cmp	local07, #97 wc
06d30     38 00 90 CD |  if_b	jmp	#LR__1023
06d34     14 4E 05 F1 | 	add	fp, #20
06d38     A7 0A E2 FA | 	rdword	local01, fp
06d3c     14 4E 85 F1 | 	sub	fp, #20
06d40     7B 0A 16 F2 | 	cmp	local01, #123 wc
06d44     24 00 90 3D |  if_ae	jmp	#LR__1023
06d48     0C 4E 05 F1 | 	add	fp, #12
06d4c     A7 16 C2 FA | 	rdbyte	local07, fp
06d50     01 16 46 F5 | 	or	local07, #1
06d54     A7 16 42 FC | 	wrbyte	local07, fp
06d58     08 4E 05 F1 | 	add	fp, #8
06d5c     A7 16 E2 FA | 	rdword	local07, fp
06d60     20 16 86 F1 | 	sub	local07, #32
06d64     A7 16 52 FC | 	wrword	local07, fp
06d68     14 4E 85 F1 | 	sub	fp, #20
06d6c                 | LR__1023
06d6c                 | LR__1024
06d6c                 | LR__1025
06d6c     04 4E 05 F1 | 	add	fp, #4
06d70     A7 1E 02 FB | 	rdlong	local11, fp
06d74     0F 1B 02 F6 | 	mov	local09, local11
06d78     1C 4E 05 F1 | 	add	fp, #28
06d7c     A7 0C 02 FB | 	rdlong	local02, fp
06d80     06 11 02 F6 | 	mov	local04, local02
06d84     01 10 06 F1 | 	add	local04, #1
06d88     A7 10 62 FC | 	wrlong	local04, fp
06d8c     06 1D 02 F6 | 	mov	local10, local02
06d90     20 1A 06 F1 | 	add	local09, #32
06d94     0D 1D 02 F1 | 	add	local10, local09
06d98     0C 4E 85 F1 | 	sub	fp, #12
06d9c     A7 0E E2 FA | 	rdword	local03, fp
06da0     14 4E 85 F1 | 	sub	fp, #20
06da4     0E 0F 42 FC | 	wrbyte	local03, local10
06da8     50 FC 9F FD | 	jmp	#LR__1010
06dac                 | LR__1026
06dac     04 4E 05 F1 | 	add	fp, #4
06db0     A7 1E 02 FB | 	rdlong	local11, fp
06db4     04 4E 85 F1 | 	sub	fp, #4
06db8     20 1E 06 F1 | 	add	local11, #32
06dbc     0F 17 C2 FA | 	rdbyte	local07, local11
06dc0     E5 16 0E F2 | 	cmp	local07, #229 wz
06dc4     04 4E 05 A1 |  if_e	add	fp, #4
06dc8     A7 16 02 AB |  if_e	rdlong	local07, fp
06dcc     04 4E 85 A1 |  if_e	sub	fp, #4
06dd0     20 16 06 A1 |  if_e	add	local07, #32
06dd4     0B 0B 48 AC |  if_e	wrbyte	#5, local07
06dd8     24 4E 05 F1 | 	add	fp, #36
06ddc     A7 16 02 FB | 	rdlong	local07, fp
06de0     24 4E 85 F1 | 	sub	fp, #36
06de4     08 16 0E F2 | 	cmp	local07, #8 wz
06de8     0C 4E 05 A1 |  if_e	add	fp, #12
06dec     A7 16 C2 AA |  if_e	rdbyte	local07, fp
06df0     02 16 66 A0 |  if_e	shl	local07, #2
06df4     A7 16 42 AC |  if_e	wrbyte	local07, fp
06df8     0C 4E 85 A1 |  if_e	sub	fp, #12
06dfc     0C 4E 05 F1 | 	add	fp, #12
06e00     A7 16 C2 FA | 	rdbyte	local07, fp
06e04     0C 4E 85 F1 | 	sub	fp, #12
06e08     0C 16 06 F5 | 	and	local07, #12
06e0c     0C 16 0E F2 | 	cmp	local07, #12 wz
06e10     18 00 90 AD |  if_e	jmp	#LR__1027
06e14     0C 4E 05 F1 | 	add	fp, #12
06e18     A7 0A C2 FA | 	rdbyte	local01, fp
06e1c     0C 4E 85 F1 | 	sub	fp, #12
06e20     03 0A 06 F5 | 	and	local01, #3
06e24     03 0A 0E F2 | 	cmp	local01, #3 wz
06e28     14 00 90 5D |  if_ne	jmp	#LR__1028
06e2c                 | LR__1027
06e2c     10 4E 05 F1 | 	add	fp, #16
06e30     A7 16 C2 FA | 	rdbyte	local07, fp
06e34     02 16 46 F5 | 	or	local07, #2
06e38     A7 16 42 FC | 	wrbyte	local07, fp
06e3c     10 4E 85 F1 | 	sub	fp, #16
06e40                 | LR__1028
06e40     10 4E 05 F1 | 	add	fp, #16
06e44     A7 16 C2 FA | 	rdbyte	local07, fp
06e48     10 4E 85 F1 | 	sub	fp, #16
06e4c     02 16 CE F7 | 	test	local07, #2 wz
06e50     48 00 90 5D |  if_ne	jmp	#LR__1029
06e54     0C 4E 05 F1 | 	add	fp, #12
06e58     A7 16 C2 FA | 	rdbyte	local07, fp
06e5c     0C 4E 85 F1 | 	sub	fp, #12
06e60     01 16 CE F7 | 	test	local07, #1 wz
06e64     10 4E 05 51 |  if_ne	add	fp, #16
06e68     A7 16 C2 5A |  if_ne	rdbyte	local07, fp
06e6c     10 16 46 55 |  if_ne	or	local07, #16
06e70     A7 16 42 5C |  if_ne	wrbyte	local07, fp
06e74     10 4E 85 51 |  if_ne	sub	fp, #16
06e78     0C 4E 05 F1 | 	add	fp, #12
06e7c     A7 16 C2 FA | 	rdbyte	local07, fp
06e80     0C 4E 85 F1 | 	sub	fp, #12
06e84     04 16 CE F7 | 	test	local07, #4 wz
06e88     10 4E 05 51 |  if_ne	add	fp, #16
06e8c     A7 16 C2 5A |  if_ne	rdbyte	local07, fp
06e90     08 16 46 55 |  if_ne	or	local07, #8
06e94     A7 16 42 5C |  if_ne	wrbyte	local07, fp
06e98     10 4E 85 51 |  if_ne	sub	fp, #16
06e9c                 | LR__1029
06e9c     04 4E 05 F1 | 	add	fp, #4
06ea0     A7 16 02 FB | 	rdlong	local07, fp
06ea4     0C 4E 05 F1 | 	add	fp, #12
06ea8     A7 0A C2 FA | 	rdbyte	local01, fp
06eac     10 4E 85 F1 | 	sub	fp, #16
06eb0     2B 16 06 F1 | 	add	local07, #43
06eb4     0B 0B 42 FC | 	wrbyte	local01, local07
06eb8                 | ' 	}
06eb8                 | ' 
06eb8                 | ' 	dp->fn[ 11 ] = cf;
06eb8                 | ' 
06eb8                 | ' 	return FR_OK;
06eb8     00 EA 05 F6 | 	mov	result1, #0
06ebc                 | LR__1030
06ebc     A7 F0 03 F6 | 	mov	ptra, fp
06ec0     B2 00 A0 FD | 	call	#popregs_
06ec4                 | _fatfs_cc_create_name_ret
06ec4     2D 00 64 FD | 	ret
06ec8                 | 
06ec8                 | _fatfs_cc_follow_path
06ec8     02 4A 05 F6 | 	mov	COUNT_, #2
06ecc     A8 00 A0 FD | 	call	#pushregs_
06ed0     18 F0 07 F1 | 	add	ptra, #24
06ed4     04 4E 05 F1 | 	add	fp, #4
06ed8     A7 00 62 FC | 	wrlong	arg01, fp
06edc     04 4E 05 F1 | 	add	fp, #4
06ee0     A7 02 62 FC | 	wrlong	arg02, fp
06ee4     04 4E 85 F1 | 	sub	fp, #4
06ee8     A7 EA 01 FB | 	rdlong	result1, fp
06eec     F5 0A 02 FB | 	rdlong	local01, result1
06ef0     10 4E 05 F1 | 	add	fp, #16
06ef4     A7 0A 62 FC | 	wrlong	local01, fp
06ef8     14 4E 85 F1 | 	sub	fp, #20
06efc     97 24 48 FB | 	callpa	#(@LR__1042-@LR__1040)>>2,fcache_load_ptr_
06f00                 | ' )
06f00                 | ' {
06f00                 | ' 	FRESULT res;
06f00                 | ' 	BYTE ns;
06f00                 | ' 	FATFS *fs = dp->obj.fs;
06f00                 | ' #line 3034 "ff.c"
06f00                 | ' 	{
06f00                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
06f00                 | LR__1040
06f00     08 4E 05 F1 | 	add	fp, #8
06f04     A7 0A 02 FB | 	rdlong	local01, fp
06f08     08 4E 85 F1 | 	sub	fp, #8
06f0c     05 0B C2 FA | 	rdbyte	local01, local01
06f10     2F 0A 0E F2 | 	cmp	local01, #47 wz
06f14     18 00 90 AD |  if_e	jmp	#LR__1041
06f18     08 4E 05 F1 | 	add	fp, #8
06f1c     A7 0A 02 FB | 	rdlong	local01, fp
06f20     08 4E 85 F1 | 	sub	fp, #8
06f24     05 0B C2 FA | 	rdbyte	local01, local01
06f28     5C 0A 0E F2 | 	cmp	local01, #92 wz
06f2c     18 00 90 5D |  if_ne	jmp	#LR__1043
06f30                 | LR__1041
06f30     08 4E 05 F1 | 	add	fp, #8
06f34     A7 0A 02 FB | 	rdlong	local01, fp
06f38     01 0A 06 F1 | 	add	local01, #1
06f3c     A7 0A 62 FC | 	wrlong	local01, fp
06f40     08 4E 85 F1 | 	sub	fp, #8
06f44     B8 FF 9F FD | 	jmp	#LR__1040
06f48                 | LR__1042
06f48                 | LR__1043
06f48     04 4E 05 F1 | 	add	fp, #4
06f4c     A7 0A 02 FB | 	rdlong	local01, fp
06f50     08 0A 06 F1 | 	add	local01, #8
06f54     05 01 68 FC | 	wrlong	#0, local01
06f58     04 4E 05 F1 | 	add	fp, #4
06f5c     A7 0A 02 FB | 	rdlong	local01, fp
06f60     08 4E 85 F1 | 	sub	fp, #8
06f64     05 0B C2 FA | 	rdbyte	local01, local01
06f68     20 0A 16 F2 | 	cmp	local01, #32 wc
06f6c     30 00 90 3D |  if_ae	jmp	#LR__1044
06f70     04 4E 05 F1 | 	add	fp, #4
06f74     A7 0A 02 FB | 	rdlong	local01, fp
06f78     2B 0A 06 F1 | 	add	local01, #43
06f7c     05 01 49 FC | 	wrbyte	#128, local01
06f80     A7 00 02 FB | 	rdlong	arg01, fp
06f84     04 4E 85 F1 | 	sub	fp, #4
06f88     00 02 06 F6 | 	mov	arg02, #0
06f8c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
06f90     0C 4E 05 F1 | 	add	fp, #12
06f94     A7 EA 61 FC | 	wrlong	result1, fp
06f98     0C 4E 85 F1 | 	sub	fp, #12
06f9c     1C 01 90 FD | 	jmp	#LR__1048
06fa0                 | LR__1044
06fa0                 | ' 		for (;;) {
06fa0                 | LR__1045
06fa0     04 4E 05 F1 | 	add	fp, #4
06fa4     A7 00 02 FB | 	rdlong	arg01, fp
06fa8     04 4E 05 F1 | 	add	fp, #4
06fac     A7 02 02 F6 | 	mov	arg02, fp
06fb0     08 4E 85 F1 | 	sub	fp, #8
06fb4     14 F6 BF FD | 	call	#_fatfs_cc_create_name
06fb8     0C 4E 05 F1 | 	add	fp, #12
06fbc     A7 EA 61 FC | 	wrlong	result1, fp
06fc0     00 EA 4D F2 | 	cmps	result1, #0 wz
06fc4     0C 4E 85 F1 | 	sub	fp, #12
06fc8     F0 00 90 5D |  if_ne	jmp	#LR__1047
06fcc     04 4E 05 F1 | 	add	fp, #4
06fd0     A7 00 02 FB | 	rdlong	arg01, fp
06fd4     04 4E 85 F1 | 	sub	fp, #4
06fd8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
06fdc     0C 4E 05 F1 | 	add	fp, #12
06fe0     A7 EA 61 FC | 	wrlong	result1, fp
06fe4     08 4E 85 F1 | 	sub	fp, #8
06fe8     A7 0A 02 FB | 	rdlong	local01, fp
06fec     2B 0A 06 F1 | 	add	local01, #43
06ff0     05 0B C2 FA | 	rdbyte	local01, local01
06ff4     0C 4E 05 F1 | 	add	fp, #12
06ff8     A7 0A 42 FC | 	wrbyte	local01, fp
06ffc     04 4E 85 F1 | 	sub	fp, #4
07000     A7 0A 0A FB | 	rdlong	local01, fp wz
07004     0C 4E 85 F1 | 	sub	fp, #12
07008     34 00 90 AD |  if_e	jmp	#LR__1046
0700c     0C 4E 05 F1 | 	add	fp, #12
07010     A7 0A 02 FB | 	rdlong	local01, fp
07014     0C 4E 85 F1 | 	sub	fp, #12
07018     04 0A 0E F2 | 	cmp	local01, #4 wz
0701c     9C 00 90 5D |  if_ne	jmp	#LR__1047
07020     10 4E 05 F1 | 	add	fp, #16
07024     A7 0A C2 FA | 	rdbyte	local01, fp
07028     10 4E 85 F1 | 	sub	fp, #16
0702c     04 0A CE F7 | 	test	local01, #4 wz
07030     0C 4E 05 A1 |  if_e	add	fp, #12
07034     A7 0A 68 AC |  if_e	wrlong	#5, fp
07038     0C 4E 85 A1 |  if_e	sub	fp, #12
0703c                 | ' 					}
0703c                 | ' 				}
0703c                 | ' 				break;
0703c     7C 00 90 FD | 	jmp	#LR__1047
07040                 | LR__1046
07040     10 4E 05 F1 | 	add	fp, #16
07044     A7 0A C2 FA | 	rdbyte	local01, fp
07048     10 4E 85 F1 | 	sub	fp, #16
0704c     04 0A CE F7 | 	test	local01, #4 wz
07050     68 00 90 5D |  if_ne	jmp	#LR__1047
07054     04 4E 05 F1 | 	add	fp, #4
07058     A7 0A 02 FB | 	rdlong	local01, fp
0705c     04 4E 85 F1 | 	sub	fp, #4
07060     06 0A 06 F1 | 	add	local01, #6
07064     05 0B C2 FA | 	rdbyte	local01, local01
07068     10 0A CE F7 | 	test	local01, #16 wz
0706c     0C 4E 05 A1 |  if_e	add	fp, #12
07070     A7 0A 68 AC |  if_e	wrlong	#5, fp
07074     0C 4E 85 A1 |  if_e	sub	fp, #12
07078                 | ' 				res = FR_NO_PATH; break;
07078     40 00 90 AD |  if_e	jmp	#LR__1047
0707c     04 4E 05 F1 | 	add	fp, #4
07080     A7 0C 02 FB | 	rdlong	local02, fp
07084     06 0B 02 F6 | 	mov	local01, local02
07088     10 4E 05 F1 | 	add	fp, #16
0708c     A7 02 02 FB | 	rdlong	arg02, fp
07090     01 01 02 F6 | 	mov	arg01, arg02
07094     34 02 06 F1 | 	add	arg02, #52
07098     14 4E 85 F1 | 	sub	fp, #20
0709c     10 0C 06 F1 | 	add	local02, #16
070a0     06 0D 02 FB | 	rdlong	local02, local02
070a4     FF 0D 06 F5 | 	and	local02, #511
070a8     06 03 02 F1 | 	add	arg02, local02
070ac     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
070b0     08 0A 06 F1 | 	add	local01, #8
070b4     05 EB 61 FC | 	wrlong	result1, local01
070b8     E4 FE 9F FD | 	jmp	#LR__1045
070bc                 | LR__1047
070bc                 | LR__1048
070bc                 | ' 			}
070bc                 | ' #line 3090 "ff.c"
070bc                 | ' 			{
070bc                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
070bc                 | ' 			}
070bc                 | ' 		}
070bc                 | ' 	}
070bc                 | ' 
070bc                 | ' 	return res;
070bc     0C 4E 05 F1 | 	add	fp, #12
070c0     A7 EA 01 FB | 	rdlong	result1, fp
070c4     0C 4E 85 F1 | 	sub	fp, #12
070c8     A7 F0 03 F6 | 	mov	ptra, fp
070cc     B2 00 A0 FD | 	call	#popregs_
070d0                 | _fatfs_cc_follow_path_ret
070d0     2D 00 64 FD | 	ret
070d4                 | 
070d4                 | _fatfs_cc_get_ldnumber
070d4     01 EE 65 F6 | 	neg	_var01, #1
070d8     00 F1 09 FB | 	rdlong	_var02, arg01 wz
070dc     F8 F2 01 F6 | 	mov	_var03, _var02
070e0     01 EA 65 A6 |  if_e	neg	result1, #1
070e4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
070e8     97 10 48 FB | 	callpa	#(@LR__1051-@LR__1050)>>2,fcache_load_ptr_
070ec                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
070ec                 | LR__1050
070ec     F9 F4 C1 FA | 	rdbyte	_var04, _var03
070f0     FA EA E1 F8 | 	getbyte	result1, _var04, #0
070f4     20 EA 15 F2 | 	cmp	result1, #32 wc
070f8     01 F2 05 F1 | 	add	_var03, #1
070fc     FA F6 01 36 |  if_ae	mov	_var05, _var04
07100     FB F6 E1 38 |  if_ae	getbyte	_var05, _var05, #0
07104     3A F6 0D 32 |  if_ae	cmp	_var05, #58 wz
07108     E0 FF 9F 1D |  if_a	jmp	#LR__1050
0710c                 | LR__1051
0710c     FA F4 E1 F8 | 	getbyte	_var04, _var04, #0
07110     3A F4 0D F2 | 	cmp	_var04, #58 wz
07114     40 00 90 5D |  if_ne	jmp	#LR__1053
07118     01 F8 05 F6 | 	mov	_var06, #1
0711c     F8 F6 C1 FA | 	rdbyte	_var05, _var02
07120     30 F6 15 F2 | 	cmp	_var05, #48 wc
07124     1C 00 90 CD |  if_b	jmp	#LR__1052
07128     F8 F6 C1 FA | 	rdbyte	_var05, _var02
0712c     3A F6 15 F2 | 	cmp	_var05, #58 wc
07130     F8 FA 01 C6 |  if_b	mov	_var07, _var02
07134     02 FA 05 C1 |  if_b	add	_var07, #2
07138     F9 FA 09 C2 |  if_b	cmp	_var07, _var03 wz
0713c     F8 F8 C1 8A |  if_c_and_z	rdbyte	_var06, _var02
07140     30 F8 85 81 |  if_c_and_z	sub	_var06, #48
07144                 | LR__1052
07144     01 F8 55 F2 | 	cmps	_var06, #1 wc
07148     FC EE 01 C6 |  if_b	mov	_var01, _var06
0714c     00 F3 61 CC |  if_b	wrlong	_var03, arg01
07150                 | ' 			vol = i;
07150                 | ' 			*path = tt;
07150                 | ' 		}
07150                 | ' 		return vol;
07150     F7 EA 01 F6 | 	mov	result1, _var01
07154     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
07158                 | LR__1053
07158                 | ' 	}
07158                 | ' #line 3170 "ff.c"
07158                 | ' 	vol = 0;
07158                 | ' 
07158                 | ' 	return vol;
07158     00 EA 05 F6 | 	mov	result1, #0
0715c                 | _fatfs_cc_get_ldnumber_ret
0715c     2D 00 64 FD | 	ret
07160                 | 
07160                 | _fatfs_cc_check_fs
07160     04 4A 05 F6 | 	mov	COUNT_, #4
07164     A8 00 A0 FD | 	call	#pushregs_
07168     00 0B 02 F6 | 	mov	local01, arg01
0716c     03 0A 06 F1 | 	add	local01, #3
07170     05 01 48 FC | 	wrbyte	#0, local01
07174     2D 0A 06 F1 | 	add	local01, #45
07178     FF FF FF FF 
0717c     05 FF 6B FC | 	wrlong	##-1, local01
07180     30 0A 86 F1 | 	sub	local01, #48
07184     05 01 02 F6 | 	mov	arg01, local01
07188     18 D5 BF FD | 	call	#_fatfs_cc_move_window
0718c     00 EA 0D F2 | 	cmp	result1, #0 wz
07190     04 EA 05 56 |  if_ne	mov	result1, #4
07194     94 01 90 5D |  if_ne	jmp	#LR__1064
07198     34 0A 06 F1 | 	add	local01, #52
0719c     05 01 02 F6 | 	mov	arg01, local01
071a0     FE 01 06 F1 | 	add	arg01, #510
071a4                 | ' {
071a4                 | ' 
071a4                 | ' 	return *((WORD*)ptr);
071a4     00 0D E2 FA | 	rdword	local02, arg01
071a8     05 0F C2 FA | 	rdbyte	local03, local01
071ac     34 0A 86 F1 | 	sub	local01, #52
071b0     07 11 E2 F8 | 	getbyte	local04, local03, #0
071b4     EB 10 0E F2 | 	cmp	local04, #235 wz
071b8     07 05 02 56 |  if_ne	mov	arg03, local03
071bc     02 05 E2 58 |  if_ne	getbyte	arg03, arg03, #0
071c0     E9 04 0E 52 |  if_ne	cmp	arg03, #233 wz
071c4     07 0F E2 58 |  if_ne	getbyte	local03, local03, #0
071c8     E8 0E 0E 52 |  if_ne	cmp	local03, #232 wz
071cc     44 01 90 5D |  if_ne	jmp	#LR__1063
071d0     06 11 32 F9 | 	getword	local04, local02, #0
071d4     55 00 00 FF 
071d8     55 10 0E F2 | 	cmp	local04, ##43605 wz
071dc     2C 00 90 5D |  if_ne	jmp	#LR__1060
071e0     34 0A 06 F1 | 	add	local01, #52
071e4     05 01 02 F6 | 	mov	arg01, local01
071e8     34 0A 86 F1 | 	sub	local01, #52
071ec     52 00 06 F1 | 	add	arg01, #82
071f0     62 00 00 FF 
071f4     C2 03 06 F6 | 	mov	arg02, ##@LR__1627
071f8     08 04 06 F6 | 	mov	arg03, #8
071fc     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
07200     00 EA 0D F2 | 	cmp	result1, #0 wz
07204                 | ' 			return 0;
07204     00 EA 05 A6 |  if_e	mov	result1, #0
07208     20 01 90 AD |  if_e	jmp	#LR__1064
0720c                 | LR__1060
0720c     34 0A 06 F1 | 	add	local01, #52
07210     05 01 02 F6 | 	mov	arg01, local01
07214     0B 00 06 F1 | 	add	arg01, #11
07218                 | ' {
07218                 | ' 
07218                 | ' 	return *((WORD*)ptr);
07218     00 EB E1 FA | 	rdword	result1, arg01
0721c     0D 0A 06 F1 | 	add	local01, #13
07220     05 0F C2 FA | 	rdbyte	local03, local01
07224     41 0A 86 F1 | 	sub	local01, #65
07228     F5 10 32 F9 | 	getword	local04, result1, #0
0722c     F5 02 32 F9 | 	getword	arg02, result1, #0
07230     01 02 86 F1 | 	sub	arg02, #1
07234     01 11 CA F7 | 	test	local04, arg02 wz
07238     D8 00 90 5D |  if_ne	jmp	#LR__1062
0723c     F5 02 32 F9 | 	getword	arg02, result1, #0
07240     01 00 00 FF 
07244     00 02 16 F2 | 	cmp	arg02, ##512 wc
07248     C8 00 90 CD |  if_b	jmp	#LR__1062
0724c     F5 02 32 F9 | 	getword	arg02, result1, #0
07250     01 00 00 FF 
07254     01 02 16 F2 | 	cmp	arg02, ##513 wc
07258     B8 00 90 3D |  if_ae	jmp	#LR__1062
0725c     07 01 02 F6 | 	mov	arg01, local03
07260     07 00 4E F7 | 	zerox	arg01, #7 wz
07264     AC 00 90 AD |  if_e	jmp	#LR__1062
07268     07 01 E2 F8 | 	getbyte	arg01, local03, #0
0726c     07 0F E2 F8 | 	getbyte	local03, local03, #0
07270     01 0E 86 F1 | 	sub	local03, #1
07274     07 01 CA F7 | 	test	arg01, local03 wz
07278     98 00 90 5D |  if_ne	jmp	#LR__1062
0727c     34 0A 06 F1 | 	add	local01, #52
07280     05 01 02 F6 | 	mov	arg01, local01
07284     34 0A 86 F1 | 	sub	local01, #52
07288     0E 00 06 F1 | 	add	arg01, #14
0728c                 | ' {
0728c                 | ' 
0728c                 | ' 	return *((WORD*)ptr);
0728c     00 EB E9 FA | 	rdword	result1, arg01 wz
07290     80 00 90 AD |  if_e	jmp	#LR__1062
07294     44 0A 06 F1 | 	add	local01, #68
07298     05 01 C2 FA | 	rdbyte	arg01, local01
0729c     44 0A 86 F1 | 	sub	local01, #68
072a0     01 00 86 F1 | 	sub	arg01, #1
072a4     02 00 16 F2 | 	cmp	arg01, #2 wc
072a8     68 00 90 3D |  if_ae	jmp	#LR__1062
072ac     34 0A 06 F1 | 	add	local01, #52
072b0     05 01 02 F6 | 	mov	arg01, local01
072b4     34 0A 86 F1 | 	sub	local01, #52
072b8     11 00 06 F1 | 	add	arg01, #17
072bc                 | ' {
072bc                 | ' 
072bc                 | ' 	return *((WORD*)ptr);
072bc     00 EB E9 FA | 	rdword	result1, arg01 wz
072c0     50 00 90 AD |  if_e	jmp	#LR__1062
072c4     34 0A 06 F1 | 	add	local01, #52
072c8     05 01 02 F6 | 	mov	arg01, local01
072cc     34 0A 86 F1 | 	sub	local01, #52
072d0     13 00 06 F1 | 	add	arg01, #19
072d4                 | ' {
072d4                 | ' 
072d4                 | ' 	return *((WORD*)ptr);
072d4     00 EB E1 FA | 	rdword	result1, arg01
072d8     F5 0E 32 F9 | 	getword	local03, result1, #0
072dc     80 0E 16 F2 | 	cmp	local03, #128 wc
072e0     20 00 90 3D |  if_ae	jmp	#LR__1061
072e4     34 0A 06 F1 | 	add	local01, #52
072e8     05 01 02 F6 | 	mov	arg01, local01
072ec     34 0A 86 F1 | 	sub	local01, #52
072f0     20 00 06 F1 | 	add	arg01, #32
072f4                 | ' {
072f4                 | ' 
072f4                 | ' 	return *((DWORD*)ptr);
072f4     00 EB 01 FB | 	rdlong	result1, arg01
072f8     80 00 00 FF 
072fc     00 EA 15 F2 | 	cmp	result1, ##65536 wc
07300     10 00 90 CD |  if_b	jmp	#LR__1062
07304                 | LR__1061
07304     4A 0A 06 F1 | 	add	local01, #74
07308                 | ' {
07308                 | ' 
07308                 | ' 	return *((WORD*)ptr);
07308     05 EB E9 FA | 	rdword	result1, local01 wz
0730c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
0730c                 | ' 			&& ld_word(fs->win +  14 ) != 0
0730c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
0730c                 | ' 			&& ld_word(fs->win +  17 ) != 0
0730c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
0730c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
0730c                 | ' 				return 0;
0730c     00 EA 05 56 |  if_ne	mov	result1, #0
07310     18 00 90 5D |  if_ne	jmp	#LR__1064
07314                 | LR__1062
07314                 | LR__1063
07314                 | ' 		}
07314                 | ' 	}
07314                 | ' 	return sign == 0xAA55 ? 2 : 3;
07314     06 0F 32 F9 | 	getword	local03, local02, #0
07318     55 00 00 FF 
0731c     55 0E 0E F2 | 	cmp	local03, ##43605 wz
07320     02 10 06 A6 |  if_e	mov	local04, #2
07324     03 10 06 56 |  if_ne	mov	local04, #3
07328     08 EB 01 F6 | 	mov	result1, local04
0732c                 | LR__1064
0732c     A7 F0 03 F6 | 	mov	ptra, fp
07330     B2 00 A0 FD | 	call	#popregs_
07334                 | _fatfs_cc_check_fs_ret
07334     2D 00 64 FD | 	ret
07338                 | 
07338                 | _fatfs_cc_find_volume
07338     05 4A 05 F6 | 	mov	COUNT_, #5
0733c     A8 00 A0 FD | 	call	#pushregs_
07340     24 F0 07 F1 | 	add	ptra, #36
07344     00 0B 02 F6 | 	mov	local01, arg01
07348     01 0D 02 F6 | 	mov	local02, arg02
0734c     05 01 02 F6 | 	mov	arg01, local01
07350     00 02 06 F6 | 	mov	arg02, #0
07354     08 FE BF FD | 	call	#_fatfs_cc_check_fs
07358     02 EA 0D F2 | 	cmp	result1, #2 wz
0735c     0C 00 90 AD |  if_e	jmp	#LR__1070
07360     03 EA 15 F2 | 	cmp	result1, #3 wc
07364     00 0C 0E C2 |  if_b	cmp	local02, #0 wz
07368     D0 00 90 BD |  if_nc_or_z	jmp	#LR__1078
0736c                 | LR__1070
0736c                 | ' 	for (i = 0; i < 4; i++) {
0736c     00 0E 06 F6 | 	mov	local03, #0
07370     97 26 48 FB | 	callpa	#(@LR__1072-@LR__1071)>>2,fcache_load_ptr_
07374                 | LR__1071
07374     04 0E 16 F2 | 	cmp	local03, #4 wc
07378     44 00 90 3D |  if_ae	jmp	#LR__1073
0737c     07 11 02 F6 | 	mov	local04, local03
07380     02 10 66 F0 | 	shl	local04, #2
07384     14 4E 05 F1 | 	add	fp, #20
07388     A7 10 02 F1 | 	add	local04, fp
0738c     34 0A 06 F1 | 	add	local01, #52
07390     05 01 02 F6 | 	mov	arg01, local01
07394     34 0A 86 F1 | 	sub	local01, #52
07398     BE 01 06 F1 | 	add	arg01, #446
0739c     07 03 02 F6 | 	mov	arg02, local03
073a0     04 02 66 F0 | 	shl	arg02, #4
073a4     01 01 02 F1 | 	add	arg01, arg02
073a8     08 00 06 F1 | 	add	arg01, #8
073ac                 | ' {
073ac                 | ' 
073ac                 | ' 	return *((DWORD*)ptr);
073ac     00 EB 01 FB | 	rdlong	result1, arg01
073b0     14 4E 85 F1 | 	sub	fp, #20
073b4     08 EB 61 FC | 	wrlong	result1, local04
073b8     01 0E 06 F1 | 	add	local03, #1
073bc     B4 FF 9F FD | 	jmp	#LR__1071
073c0                 | LR__1072
073c0                 | LR__1073
073c0     00 0C 0E F2 | 	cmp	local02, #0 wz
073c4     06 11 02 56 |  if_ne	mov	local04, local02
073c8     01 10 86 51 |  if_ne	sub	local04, #1
073cc     00 10 06 A6 |  if_e	mov	local04, #0
073d0     08 0F 02 F6 | 	mov	local03, local04
073d4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
073d4                 | ' 	}
073d4                 | ' 	i = part ? part - 1 : 0;
073d4                 | ' 	do {
073d4                 | LR__1074
073d4     07 11 02 F6 | 	mov	local04, local03
073d8     02 10 66 F0 | 	shl	local04, #2
073dc     14 4E 05 F1 | 	add	fp, #20
073e0     A7 10 02 F1 | 	add	local04, fp
073e4     08 11 0A FB | 	rdlong	local04, local04 wz
073e8     14 4E 85 F1 | 	sub	fp, #20
073ec     28 00 90 AD |  if_e	jmp	#LR__1075
073f0     07 11 02 F6 | 	mov	local04, local03
073f4     02 10 66 F0 | 	shl	local04, #2
073f8     14 4E 05 F1 | 	add	fp, #20
073fc     A7 10 02 F1 | 	add	local04, fp
07400     08 03 02 FB | 	rdlong	arg02, local04
07404     05 01 02 F6 | 	mov	arg01, local01
07408     14 4E 85 F1 | 	sub	fp, #20
0740c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
07410     F5 10 02 F6 | 	mov	local04, result1
07414     04 00 90 FD | 	jmp	#LR__1076
07418                 | LR__1075
07418     03 10 06 F6 | 	mov	local04, #3
0741c                 | LR__1076
0741c     08 13 02 F6 | 	mov	local05, local04
07420     00 0C 0E F2 | 	cmp	local02, #0 wz
07424     02 12 16 A2 |  if_e	cmp	local05, #2 wc
07428     0C 00 90 8D |  if_c_and_z	jmp	#LR__1077
0742c     01 0E 06 A1 |  if_e	add	local03, #1
07430     04 0E 16 A2 |  if_e	cmp	local03, #4 wc
07434     9C FF 9F 8D |  if_c_and_z	jmp	#LR__1074
07438                 | LR__1077
07438                 | ' 	return fmt;
07438     09 EB 01 F6 | 	mov	result1, local05
0743c                 | LR__1078
0743c     A7 F0 03 F6 | 	mov	ptra, fp
07440     B2 00 A0 FD | 	call	#popregs_
07444                 | _fatfs_cc_find_volume_ret
07444     2D 00 64 FD | 	ret
07448                 | 
07448                 | _fatfs_cc_mount_volume
07448     0B 4A 05 F6 | 	mov	COUNT_, #11
0744c     A8 00 A0 FD | 	call	#pushregs_
07450     01 0B 02 F6 | 	mov	local01, arg02
07454     02 0D 02 F6 | 	mov	local02, arg03
07458     05 01 68 FC | 	wrlong	#0, local01
0745c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
07460     F5 0E 02 F6 | 	mov	local03, result1
07464     00 0E 56 F2 | 	cmps	local03, #0 wc
07468     0B EA 05 C6 |  if_b	mov	result1, #11
0746c     3C 05 90 CD |  if_b	jmp	#LR__1090
07470     07 05 02 F6 | 	mov	arg03, local03
07474     02 04 66 F0 | 	shl	arg03, #2
07478     F1 04 02 F1 | 	add	arg03, objptr
0747c     02 11 0A FB | 	rdlong	local04, arg03 wz
07480     0C EA 05 A6 |  if_e	mov	result1, #12
07484     24 05 90 AD |  if_e	jmp	#LR__1090
07488     05 11 62 FC | 	wrlong	local04, local01
0748c     06 0D E2 F8 | 	getbyte	local02, local02, #0
07490     FE 0C 06 F5 | 	and	local02, #254
07494     08 05 CA FA | 	rdbyte	arg03, local04 wz
07498     4C 00 90 AD |  if_e	jmp	#LR__1081
0749c     01 10 06 F1 | 	add	local04, #1
074a0     08 01 CA FA | 	rdbyte	arg01, local04 wz
074a4     01 10 86 F1 | 	sub	local04, #1
074a8     01 EA 05 56 |  if_ne	mov	result1, #1
074ac                 | ' 
074ac                 | ' 	return Stat;
074ac     01 00 00 AF 
074b0     20 E2 05 A1 |  if_e	add	objptr, ##544
074b4     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
074b8     01 00 00 AF 
074bc     20 E2 85 A1 |  if_e	sub	objptr, ##544
074c0     F5 04 E2 F8 | 	getbyte	arg03, result1, #0
074c4     01 04 CE F7 | 	test	arg03, #1 wz
074c8     1C 00 90 5D |  if_ne	jmp	#LR__1080
074cc     00 0C 0E F2 | 	cmp	local02, #0 wz
074d0     F5 EA E1 58 |  if_ne	getbyte	result1, result1, #0
074d4     04 EA CD 57 |  if_ne	test	result1, #4 wz
074d8                 | ' 				return FR_WRITE_PROTECTED;
074d8     0A EA 05 56 |  if_ne	mov	result1, #10
074dc     CC 04 90 5D |  if_ne	jmp	#LR__1090
074e0                 | ' 			}
074e0                 | ' 			return FR_OK;
074e0     00 EA 05 F6 | 	mov	result1, #0
074e4     C4 04 90 FD | 	jmp	#LR__1090
074e8                 | LR__1080
074e8                 | LR__1081
074e8     08 01 48 FC | 	wrbyte	#0, local04
074ec     01 10 06 F1 | 	add	local04, #1
074f0     08 0F 42 FC | 	wrbyte	local03, local04
074f4     08 01 C2 FA | 	rdbyte	arg01, local04
074f8     01 10 86 F1 | 	sub	local04, #1
074fc     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
07500     F5 04 02 F6 | 	mov	arg03, result1
07504     02 13 E2 F8 | 	getbyte	local05, arg03, #0
07508     01 12 CE F7 | 	test	local05, #1 wz
0750c                 | ' 		return FR_NOT_READY;
0750c     03 EA 05 56 |  if_ne	mov	result1, #3
07510     98 04 90 5D |  if_ne	jmp	#LR__1090
07514     00 0C 0E F2 | 	cmp	local02, #0 wz
07518     02 13 02 56 |  if_ne	mov	local05, arg03
0751c     09 13 E2 58 |  if_ne	getbyte	local05, local05, #0
07520     04 12 CE 57 |  if_ne	test	local05, #4 wz
07524                 | ' 		return FR_WRITE_PROTECTED;
07524     0A EA 05 56 |  if_ne	mov	result1, #10
07528     80 04 90 5D |  if_ne	jmp	#LR__1090
0752c     08 01 02 F6 | 	mov	arg01, local04
07530     00 02 06 F6 | 	mov	arg02, #0
07534     00 FE BF FD | 	call	#_fatfs_cc_find_volume
07538     F5 00 02 F6 | 	mov	arg01, result1
0753c     04 00 0E F2 | 	cmp	arg01, #4 wz
07540     01 EA 05 A6 |  if_e	mov	result1, #1
07544     64 04 90 AD |  if_e	jmp	#LR__1090
07548     02 00 16 F2 | 	cmp	arg01, #2 wc
0754c     0D EA 05 36 |  if_ae	mov	result1, #13
07550     58 04 90 3D |  if_ae	jmp	#LR__1090
07554     30 10 06 F1 | 	add	local04, #48
07558     08 15 02 FB | 	rdlong	local06, local04
0755c     04 10 06 F1 | 	add	local04, #4
07560     08 01 02 F6 | 	mov	arg01, local04
07564     34 10 86 F1 | 	sub	local04, #52
07568     0B 00 06 F1 | 	add	arg01, #11
0756c                 | ' {
0756c                 | ' 
0756c                 | ' 	return *((WORD*)ptr);
0756c     00 EB E1 FA | 	rdword	result1, arg01
07570     01 00 00 FF 
07574     00 EA 0D F2 | 	cmp	result1, ##512 wz
07578     0D EA 05 56 |  if_ne	mov	result1, #13
0757c     2C 04 90 5D |  if_ne	jmp	#LR__1090
07580     34 10 06 F1 | 	add	local04, #52
07584     08 01 02 F6 | 	mov	arg01, local04
07588     34 10 86 F1 | 	sub	local04, #52
0758c     16 00 06 F1 | 	add	arg01, #22
07590                 | ' {
07590                 | ' 
07590                 | ' 	return *((WORD*)ptr);
07590     00 EB E1 FA | 	rdword	result1, arg01
07594     F5 16 0A F6 | 	mov	local07, result1 wz
07598     18 00 90 5D |  if_ne	jmp	#LR__1082
0759c     34 10 06 F1 | 	add	local04, #52
075a0     08 01 02 F6 | 	mov	arg01, local04
075a4     34 10 86 F1 | 	sub	local04, #52
075a8     24 00 06 F1 | 	add	arg01, #36
075ac                 | ' {
075ac                 | ' 
075ac                 | ' 	return *((DWORD*)ptr);
075ac     00 EB 01 FB | 	rdlong	result1, arg01
075b0     F5 16 02 F6 | 	mov	local07, result1
075b4                 | LR__1082
075b4     1C 10 06 F1 | 	add	local04, #28
075b8     08 17 62 FC | 	wrlong	local07, local04
075bc     28 10 06 F1 | 	add	local04, #40
075c0     08 13 C2 FA | 	rdbyte	local05, local04
075c4     42 10 86 F1 | 	sub	local04, #66
075c8     08 13 42 FC | 	wrbyte	local05, local04
075cc     08 13 C2 FA | 	rdbyte	local05, local04
075d0     02 10 86 F1 | 	sub	local04, #2
075d4     01 12 0E F2 | 	cmp	local05, #1 wz
075d8     02 10 06 51 |  if_ne	add	local04, #2
075dc     08 13 C2 5A |  if_ne	rdbyte	local05, local04
075e0     02 10 86 51 |  if_ne	sub	local04, #2
075e4     02 12 0E 52 |  if_ne	cmp	local05, #2 wz
075e8     0D EA 05 56 |  if_ne	mov	result1, #13
075ec     BC 03 90 5D |  if_ne	jmp	#LR__1090
075f0     02 10 06 F1 | 	add	local04, #2
075f4     08 13 C2 FA | 	rdbyte	local05, local04
075f8     09 17 02 FD | 	qmul	local07, local05
075fc     3F 10 06 F1 | 	add	local04, #63
07600     08 13 C2 FA | 	rdbyte	local05, local04
07604     37 10 86 F1 | 	sub	local04, #55
07608     08 13 52 FC | 	wrword	local05, local04
0760c     08 13 EA FA | 	rdword	local05, local04 wz
07610     0A 10 86 F1 | 	sub	local04, #10
07614     18 16 62 FD | 	getqx	local07
07618     20 00 90 AD |  if_e	jmp	#LR__1083
0761c     0A 10 06 F1 | 	add	local04, #10
07620     08 13 E2 FA | 	rdword	local05, local04
07624     09 0F 32 F9 | 	getword	local03, local05, #0
07628     0A 10 86 F1 | 	sub	local04, #10
0762c     09 13 32 F9 | 	getword	local05, local05, #0
07630     01 12 86 F1 | 	sub	local05, #1
07634     09 0F CA F7 | 	test	local03, local05 wz
07638     08 00 90 AD |  if_e	jmp	#LR__1084
0763c                 | LR__1083
0763c     0D EA 05 F6 | 	mov	result1, #13
07640     68 03 90 FD | 	jmp	#LR__1090
07644                 | LR__1084
07644     34 10 06 F1 | 	add	local04, #52
07648     08 01 02 F6 | 	mov	arg01, local04
0764c     11 00 06 F1 | 	add	arg01, #17
07650                 | ' {
07650                 | ' 
07650                 | ' 	return *((WORD*)ptr);
07650     00 EB E1 FA | 	rdword	result1, arg01
07654     2C 10 86 F1 | 	sub	local04, #44
07658     08 EB 51 FC | 	wrword	result1, local04
0765c     08 13 E2 FA | 	rdword	local05, local04
07660     08 10 86 F1 | 	sub	local04, #8
07664     09 01 52 F6 | 	abs	arg01, local05 wc
07668     00 01 42 F8 | 	getnib	arg01, arg01, #0
0766c     00 01 8A F6 | 	negc	arg01, arg01 wz
07670     0D EA 05 56 |  if_ne	mov	result1, #13
07674     34 03 90 5D |  if_ne	jmp	#LR__1090
07678     34 10 06 F1 | 	add	local04, #52
0767c     08 01 02 F6 | 	mov	arg01, local04
07680     34 10 86 F1 | 	sub	local04, #52
07684     13 00 06 F1 | 	add	arg01, #19
07688                 | ' {
07688                 | ' 
07688                 | ' 	return *((WORD*)ptr);
07688     00 EB E1 FA | 	rdword	result1, arg01
0768c     F5 18 0A F6 | 	mov	local08, result1 wz
07690     34 10 06 A1 |  if_e	add	local04, #52
07694     08 01 02 A6 |  if_e	mov	arg01, local04
07698     34 10 86 A1 |  if_e	sub	local04, #52
0769c     20 00 06 A1 |  if_e	add	arg01, #32
076a0                 | ' {
076a0                 | ' 
076a0                 | ' 	return *((DWORD*)ptr);
076a0     00 19 02 AB |  if_e	rdlong	local08, arg01
076a4     34 10 06 F1 | 	add	local04, #52
076a8     08 01 02 F6 | 	mov	arg01, local04
076ac     34 10 86 F1 | 	sub	local04, #52
076b0     0E 00 06 F1 | 	add	arg01, #14
076b4                 | ' {
076b4                 | ' 
076b4                 | ' 	return *((WORD*)ptr);
076b4     00 EB E1 FA | 	rdword	result1, arg01
076b8     F5 00 02 F6 | 	mov	arg01, result1
076bc     00 13 02 F6 | 	mov	local05, arg01
076c0     0F 12 4E F7 | 	zerox	local05, #15 wz
076c4     0D EA 05 A6 |  if_e	mov	result1, #13
076c8     E0 02 90 AD |  if_e	jmp	#LR__1090
076cc     00 1B 32 F9 | 	getword	local09, arg01, #0
076d0     0B 1B 02 F1 | 	add	local09, local07
076d4     08 10 06 F1 | 	add	local04, #8
076d8     08 13 E2 FA | 	rdword	local05, local04
076dc     08 10 86 F1 | 	sub	local04, #8
076e0     09 13 52 F6 | 	abs	local05, local05 wc
076e4     04 12 46 F0 | 	shr	local05, #4
076e8     09 1B 82 F3 | 	sumc	local09, local05
076ec     0D 19 12 F2 | 	cmp	local08, local09 wc
076f0     0D EA 05 C6 |  if_b	mov	result1, #13
076f4     B4 02 90 CD |  if_b	jmp	#LR__1090
076f8     0D 19 82 F1 | 	sub	local08, local09
076fc     0A 10 06 F1 | 	add	local04, #10
07700     08 13 E2 FA | 	rdword	local05, local04
07704     09 19 12 FD | 	qdiv	local08, local05
07708     0A 10 86 F1 | 	sub	local04, #10
0770c     18 12 62 FD | 	getqx	local05
07710     00 12 0E F2 | 	cmp	local05, #0 wz
07714     0D EA 05 A6 |  if_e	mov	result1, #13
07718     90 02 90 AD |  if_e	jmp	#LR__1090
0771c     00 1C 06 F6 | 	mov	local10, #0
07720     FF FF 07 FF 
07724     F6 13 16 F2 | 	cmp	local05, ##268435446 wc
07728     03 1C 06 C6 |  if_b	mov	local10, #3
0772c     7F 00 00 FF 
07730     F6 13 16 F2 | 	cmp	local05, ##65526 wc
07734     02 1C 06 C6 |  if_b	mov	local10, #2
07738     07 00 00 FF 
0773c     F6 13 16 F2 | 	cmp	local05, ##4086 wc
07740     01 1C 06 C6 |  if_b	mov	local10, #1
07744     00 1C 0E F2 | 	cmp	local10, #0 wz
07748     0D EA 05 A6 |  if_e	mov	result1, #13
0774c     5C 02 90 AD |  if_e	jmp	#LR__1090
07750     02 12 06 F1 | 	add	local05, #2
07754     18 10 06 F1 | 	add	local04, #24
07758     08 13 62 FC | 	wrlong	local05, local04
0775c     08 10 06 F1 | 	add	local04, #8
07760     08 15 62 FC | 	wrlong	local06, local04
07764     0A 13 02 F6 | 	mov	local05, local06
07768     00 01 32 F9 | 	getword	arg01, arg01, #0
0776c     00 13 02 F1 | 	add	local05, arg01
07770     04 10 06 F1 | 	add	local04, #4
07774     08 13 62 FC | 	wrlong	local05, local04
07778     0A 13 02 F6 | 	mov	local05, local06
0777c     0D 13 02 F1 | 	add	local05, local09
07780     08 10 06 F1 | 	add	local04, #8
07784     08 13 62 FC | 	wrlong	local05, local04
07788     2C 10 86 F1 | 	sub	local04, #44
0778c     03 1C 0E F2 | 	cmp	local10, #3 wz
07790     5C 00 90 5D |  if_ne	jmp	#LR__1085
07794     34 10 06 F1 | 	add	local04, #52
07798     08 01 02 F6 | 	mov	arg01, local04
0779c     34 10 86 F1 | 	sub	local04, #52
077a0     2A 00 06 F1 | 	add	arg01, #42
077a4                 | ' {
077a4                 | ' 
077a4                 | ' 	return *((WORD*)ptr);
077a4     00 EB E9 FA | 	rdword	result1, arg01 wz
077a8     0D EA 05 56 |  if_ne	mov	result1, #13
077ac     FC 01 90 5D |  if_ne	jmp	#LR__1090
077b0     08 10 06 F1 | 	add	local04, #8
077b4     08 13 EA FA | 	rdword	local05, local04 wz
077b8     08 10 86 F1 | 	sub	local04, #8
077bc     0D EA 05 56 |  if_ne	mov	result1, #13
077c0     E8 01 90 5D |  if_ne	jmp	#LR__1090
077c4     34 10 06 F1 | 	add	local04, #52
077c8     08 01 02 F6 | 	mov	arg01, local04
077cc     2C 00 06 F1 | 	add	arg01, #44
077d0                 | ' {
077d0                 | ' 
077d0                 | ' 	return *((DWORD*)ptr);
077d0     00 EB 01 FB | 	rdlong	result1, arg01
077d4     0C 10 86 F1 | 	sub	local04, #12
077d8     08 EB 61 FC | 	wrlong	result1, local04
077dc     10 10 86 F1 | 	sub	local04, #16
077e0     08 1F 02 FB | 	rdlong	local11, local04
077e4     18 10 86 F1 | 	sub	local04, #24
077e8     02 1E 66 F0 | 	shl	local11, #2
077ec     6C 00 90 FD | 	jmp	#LR__1087
077f0                 | LR__1085
077f0     08 10 06 F1 | 	add	local04, #8
077f4     08 13 EA FA | 	rdword	local05, local04 wz
077f8     08 10 86 F1 | 	sub	local04, #8
077fc     0D EA 05 A6 |  if_e	mov	result1, #13
07800     A8 01 90 AD |  if_e	jmp	#LR__1090
07804     24 10 06 F1 | 	add	local04, #36
07808     08 13 02 FB | 	rdlong	local05, local04
0780c     0B 13 02 F1 | 	add	local05, local07
07810     04 10 06 F1 | 	add	local04, #4
07814     08 13 62 FC | 	wrlong	local05, local04
07818     28 10 86 F1 | 	sub	local04, #40
0781c     02 1C 0E F2 | 	cmp	local10, #2 wz
07820     18 10 06 A1 |  if_e	add	local04, #24
07824     08 13 02 AB |  if_e	rdlong	local05, local04
07828     18 10 86 A1 |  if_e	sub	local04, #24
0782c     01 12 66 A0 |  if_e	shl	local05, #1
07830     24 00 90 AD |  if_e	jmp	#LR__1086
07834     18 10 06 F1 | 	add	local04, #24
07838     08 1F 02 FB | 	rdlong	local11, local04
0783c     0F 13 02 F6 | 	mov	local05, local11
07840     01 12 66 F0 | 	shl	local05, #1
07844     0F 13 02 F1 | 	add	local05, local11
07848     01 12 46 F0 | 	shr	local05, #1
0784c     18 10 86 F1 | 	sub	local04, #24
07850     01 1E 06 F5 | 	and	local11, #1
07854     0F 13 02 F1 | 	add	local05, local11
07858                 | LR__1086
07858     09 1F 02 F6 | 	mov	local11, local05
0785c                 | LR__1087
0785c     FF 1F 06 F1 | 	add	local11, #511
07860     09 1E 46 F0 | 	shr	local11, #9
07864     1C 10 06 F1 | 	add	local04, #28
07868     08 05 02 FB | 	rdlong	arg03, local04
0786c     1C 10 86 F1 | 	sub	local04, #28
07870     0F 05 12 F2 | 	cmp	arg03, local11 wc
07874     0D EA 05 C6 |  if_b	mov	result1, #13
07878     30 01 90 CD |  if_b	jmp	#LR__1090
0787c     14 10 06 F1 | 	add	local04, #20
07880     FF FF FF FF 
07884     08 FF 6B FC | 	wrlong	##-1, local04
07888     04 10 86 F1 | 	sub	local04, #4
0788c     FF FF FF FF 
07890     08 FF 6B FC | 	wrlong	##-1, local04
07894     0C 10 86 F1 | 	sub	local04, #12
07898     08 01 49 FC | 	wrbyte	#128, local04
0789c     04 10 86 F1 | 	sub	local04, #4
078a0     03 1C 0E F2 | 	cmp	local10, #3 wz
078a4     D0 00 90 5D |  if_ne	jmp	#LR__1089
078a8     34 10 06 F1 | 	add	local04, #52
078ac     08 01 02 F6 | 	mov	arg01, local04
078b0     34 10 86 F1 | 	sub	local04, #52
078b4     30 00 06 F1 | 	add	arg01, #48
078b8                 | ' {
078b8                 | ' 
078b8                 | ' 	return *((WORD*)ptr);
078b8     00 EB E1 FA | 	rdword	result1, arg01
078bc     F5 12 32 F9 | 	getword	local05, result1, #0
078c0     01 12 0E F2 | 	cmp	local05, #1 wz
078c4     B0 00 90 5D |  if_ne	jmp	#LR__1089
078c8     01 14 06 F1 | 	add	local06, #1
078cc     08 01 02 F6 | 	mov	arg01, local04
078d0     0A 03 02 F6 | 	mov	arg02, local06
078d4     CC CD BF FD | 	call	#_fatfs_cc_move_window
078d8     00 EA 0D F2 | 	cmp	result1, #0 wz
078dc     98 00 90 5D |  if_ne	jmp	#LR__1089
078e0     04 10 06 F1 | 	add	local04, #4
078e4     08 01 48 FC | 	wrbyte	#0, local04
078e8     30 10 06 F1 | 	add	local04, #48
078ec     08 01 02 F6 | 	mov	arg01, local04
078f0     34 10 86 F1 | 	sub	local04, #52
078f4     FE 01 06 F1 | 	add	arg01, #510
078f8                 | ' {
078f8                 | ' 
078f8                 | ' 	return *((WORD*)ptr);
078f8     00 EB E1 FA | 	rdword	result1, arg01
078fc     F5 12 32 F9 | 	getword	local05, result1, #0
07900     55 00 00 FF 
07904     55 12 0E F2 | 	cmp	local05, ##43605 wz
07908     34 10 06 A1 |  if_e	add	local04, #52
0790c     08 01 02 A6 |  if_e	mov	arg01, local04
07910     34 10 86 A1 |  if_e	sub	local04, #52
07914                 | ' {
07914                 | ' 
07914                 | ' 	return *((DWORD*)ptr);
07914     00 EB 01 AB |  if_e	rdlong	result1, arg01
07918     A9 B0 20 AF 
0791c     52 EA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
07920     54 00 90 5D |  if_ne	jmp	#LR__1088
07924     34 10 06 F1 | 	add	local04, #52
07928     08 01 02 F6 | 	mov	arg01, local04
0792c     34 10 86 F1 | 	sub	local04, #52
07930     E4 01 06 F1 | 	add	arg01, #484
07934                 | ' {
07934                 | ' 
07934                 | ' 	return *((DWORD*)ptr);
07934     00 EB 01 FB | 	rdlong	result1, arg01
07938     B9 A0 30 FF 
0793c     72 EA 0D F2 | 	cmp	result1, ##1631679090 wz
07940     34 00 90 5D |  if_ne	jmp	#LR__1088
07944     34 10 06 F1 | 	add	local04, #52
07948     08 01 02 F6 | 	mov	arg01, local04
0794c     E8 01 06 F1 | 	add	arg01, #488
07950                 | ' {
07950                 | ' 
07950                 | ' 	return *((DWORD*)ptr);
07950     00 EB 01 FB | 	rdlong	result1, arg01
07954     20 10 86 F1 | 	sub	local04, #32
07958     08 EB 61 FC | 	wrlong	result1, local04
0795c     20 10 06 F1 | 	add	local04, #32
07960     08 01 02 F6 | 	mov	arg01, local04
07964     EC 01 06 F1 | 	add	arg01, #492
07968                 | ' {
07968                 | ' 
07968                 | ' 	return *((DWORD*)ptr);
07968     00 EB 01 FB | 	rdlong	result1, arg01
0796c     24 10 86 F1 | 	sub	local04, #36
07970     08 EB 61 FC | 	wrlong	result1, local04
07974     10 10 86 F1 | 	sub	local04, #16
07978                 | LR__1088
07978                 | LR__1089
07978     08 1D 42 FC | 	wrbyte	local10, local04
0797c     04 E2 05 F1 | 	add	objptr, #4
07980     F1 12 E2 FA | 	rdword	local05, objptr
07984     01 12 06 F1 | 	add	local05, #1
07988     F1 12 52 FC | 	wrword	local05, objptr
0798c     F1 1E E2 FA | 	rdword	local11, objptr
07990     06 10 06 F1 | 	add	local04, #6
07994     08 1F 52 FC | 	wrword	local11, local04
07998     04 E2 05 F1 | 	add	objptr, #4
0799c     06 10 06 F1 | 	add	local04, #6
079a0     08 E3 61 FC | 	wrlong	objptr, local04
079a4                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
079a4                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
079a4                 | ' 			{
079a4                 | ' 
079a4                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
079a4                 | ' 
079a4                 | ' 
079a4                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
079a4                 | ' 
079a4                 | ' 			}
079a4                 | ' 		}
079a4                 | ' 
079a4                 | ' 
079a4                 | ' 	}
079a4                 | ' 
079a4                 | ' 	fs->fs_type = (BYTE)fmt;
079a4                 | ' 	fs->id = ++Fsid;
079a4                 | ' 
079a4                 | ' 	fs->lfnbuf = LfnBuf;
079a4                 | ' #line 3567 "ff.c"
079a4                 | ' 	return FR_OK;
079a4     00 EA 05 F6 | 	mov	result1, #0
079a8     08 E2 85 F1 | 	sub	objptr, #8
079ac                 | LR__1090
079ac     A7 F0 03 F6 | 	mov	ptra, fp
079b0     B2 00 A0 FD | 	call	#popregs_
079b4                 | _fatfs_cc_mount_volume_ret
079b4     2D 00 64 FD | 	ret
079b8                 | 
079b8                 | _fatfs_cc_validate
079b8     00 EF 09 F6 | 	mov	_var01, arg01 wz
079bc     09 F0 05 F6 | 	mov	_var02, #9
079c0     F7 F2 09 5B |  if_ne	rdlong	_var03, _var01 wz
079c4     F9 F4 C9 5A |  if_ne	rdbyte	_var04, _var03 wz
079c8     50 00 90 AD |  if_e	jmp	#LR__1100
079cc     04 EE 05 F1 | 	add	_var01, #4
079d0     F7 F4 E1 FA | 	rdword	_var04, _var01
079d4     04 EE 85 F1 | 	sub	_var01, #4
079d8     F7 00 02 FB | 	rdlong	arg01, _var01
079dc     06 00 06 F1 | 	add	arg01, #6
079e0     00 EB E1 FA | 	rdword	result1, arg01
079e4     F5 F4 09 F2 | 	cmp	_var04, result1 wz
079e8     30 00 90 5D |  if_ne	jmp	#LR__1100
079ec     F7 F4 01 FB | 	rdlong	_var04, _var01
079f0     01 F4 05 F1 | 	add	_var04, #1
079f4     FA 00 CA FA | 	rdbyte	arg01, _var04 wz
079f8     01 EA 05 56 |  if_ne	mov	result1, #1
079fc                 | ' 
079fc                 | ' 	return Stat;
079fc     01 00 00 AF 
07a00     20 E2 05 A1 |  if_e	add	objptr, ##544
07a04     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
07a08     01 00 00 AF 
07a0c     20 E2 85 A1 |  if_e	sub	objptr, ##544
07a10     F5 F2 E1 F8 | 	getbyte	_var03, result1, #0
07a14     01 F2 CD F7 | 	test	_var03, #1 wz
07a18     00 F0 05 A6 |  if_e	mov	_var02, #0
07a1c                 | LR__1100
07a1c     00 F0 0D F2 | 	cmp	_var02, #0 wz
07a20     F7 F2 01 AB |  if_e	rdlong	_var03, _var01
07a24     00 F2 05 56 |  if_ne	mov	_var03, #0
07a28     01 F3 61 FC | 	wrlong	_var03, arg02
07a2c                 | ' 			res = FR_OK;
07a2c                 | ' 		}
07a2c                 | ' 
07a2c                 | ' 	}
07a2c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
07a2c                 | ' 	return res;
07a2c     F8 EA 01 F6 | 	mov	result1, _var02
07a30                 | _fatfs_cc_validate_ret
07a30     2D 00 64 FD | 	ret
07a34                 | 
07a34                 | _fatfs_cc_f_mount
07a34     01 4A 05 F6 | 	mov	COUNT_, #1
07a38     A8 00 A0 FD | 	call	#pushregs_
07a3c     20 F0 07 F1 | 	add	ptra, #32
07a40     04 4E 05 F1 | 	add	fp, #4
07a44     A7 00 62 FC | 	wrlong	arg01, fp
07a48     04 4E 05 F1 | 	add	fp, #4
07a4c     A7 02 62 FC | 	wrlong	arg02, fp
07a50     04 4E 05 F1 | 	add	fp, #4
07a54     A7 04 42 FC | 	wrbyte	arg03, fp
07a58     04 4E 85 F1 | 	sub	fp, #4
07a5c     A7 04 02 FB | 	rdlong	arg03, fp
07a60     14 4E 05 F1 | 	add	fp, #20
07a64     A7 04 62 FC | 	wrlong	arg03, fp
07a68     A7 00 02 F6 | 	mov	arg01, fp
07a6c     1C 4E 85 F1 | 	sub	fp, #28
07a70     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
07a74     14 4E 05 F1 | 	add	fp, #20
07a78     A7 EA 61 FC | 	wrlong	result1, fp
07a7c     14 4E 85 F1 | 	sub	fp, #20
07a80     00 EA 55 F2 | 	cmps	result1, #0 wc
07a84     0B EA 05 C6 |  if_b	mov	result1, #11
07a88     C0 00 90 CD |  if_b	jmp	#LR__1111
07a8c     14 4E 05 F1 | 	add	fp, #20
07a90     A7 04 02 FB | 	rdlong	arg03, fp
07a94     02 04 66 F0 | 	shl	arg03, #2
07a98     F1 04 02 F1 | 	add	arg03, objptr
07a9c     02 05 0A FB | 	rdlong	arg03, arg03 wz
07aa0     04 4E 85 F1 | 	sub	fp, #4
07aa4     A7 04 62 FC | 	wrlong	arg03, fp
07aa8     10 4E 85 F1 | 	sub	fp, #16
07aac     28 00 90 AD |  if_e	jmp	#LR__1110
07ab0     10 4E 05 F1 | 	add	fp, #16
07ab4     A7 04 02 FB | 	rdlong	arg03, fp
07ab8     10 4E 85 F1 | 	sub	fp, #16
07abc     01 04 06 F1 | 	add	arg03, #1
07ac0     02 01 C2 FA | 	rdbyte	arg01, arg03
07ac4     1C 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
07ac8     10 4E 05 F1 | 	add	fp, #16
07acc     A7 04 02 FB | 	rdlong	arg03, fp
07ad0     10 4E 85 F1 | 	sub	fp, #16
07ad4     02 01 48 FC | 	wrbyte	#0, arg03
07ad8                 | LR__1110
07ad8     04 4E 05 F1 | 	add	fp, #4
07adc     A7 0A 0A FB | 	rdlong	local01, fp wz
07ae0     04 4E 85 F1 | 	sub	fp, #4
07ae4     04 4E 05 51 |  if_ne	add	fp, #4
07ae8     A7 0A 02 5B |  if_ne	rdlong	local01, fp
07aec     04 4E 85 51 |  if_ne	sub	fp, #4
07af0     05 01 48 5C |  if_ne	wrbyte	#0, local01
07af4     14 4E 05 F1 | 	add	fp, #20
07af8     A7 0A 02 FB | 	rdlong	local01, fp
07afc     02 0A 66 F0 | 	shl	local01, #2
07b00     F1 0A 02 F1 | 	add	local01, objptr
07b04     10 4E 85 F1 | 	sub	fp, #16
07b08     A7 04 02 FB | 	rdlong	arg03, fp
07b0c     05 05 62 FC | 	wrlong	arg03, local01
07b10     08 4E 05 F1 | 	add	fp, #8
07b14     A7 0A CA FA | 	rdbyte	local01, fp wz
07b18     0C 4E 85 F1 | 	sub	fp, #12
07b1c     00 EA 05 A6 |  if_e	mov	result1, #0
07b20     28 00 90 AD |  if_e	jmp	#LR__1111
07b24     08 4E 05 F1 | 	add	fp, #8
07b28     A7 00 02 F6 | 	mov	arg01, fp
07b2c     04 4E 85 F1 | 	sub	fp, #4
07b30     A7 02 02 F6 | 	mov	arg02, fp
07b34     04 4E 85 F1 | 	sub	fp, #4
07b38     00 04 06 F6 | 	mov	arg03, #0
07b3c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
07b40     18 4E 05 F1 | 	add	fp, #24
07b44     A7 EA 61 FC | 	wrlong	result1, fp
07b48                 | ' 
07b48                 | ' 	res = mount_volume(&path, &fs, 0);
07b48                 | ' 	return res ;
07b48     18 4E 85 F1 | 	sub	fp, #24
07b4c                 | LR__1111
07b4c     A7 F0 03 F6 | 	mov	ptra, fp
07b50     B2 00 A0 FD | 	call	#popregs_
07b54                 | _fatfs_cc_f_mount_ret
07b54     2D 00 64 FD | 	ret
07b58                 | 
07b58                 | _fatfs_cc_f_open
07b58     02 4A 05 F6 | 	mov	COUNT_, #2
07b5c     A8 00 A0 FD | 	call	#pushregs_
07b60     60 F0 07 F1 | 	add	ptra, #96
07b64     04 4E 05 F1 | 	add	fp, #4
07b68     A7 00 62 FC | 	wrlong	arg01, fp
07b6c     04 4E 05 F1 | 	add	fp, #4
07b70     A7 02 62 FC | 	wrlong	arg02, fp
07b74     04 4E 05 F1 | 	add	fp, #4
07b78     A7 04 42 FC | 	wrbyte	arg03, fp
07b7c     08 4E 85 F1 | 	sub	fp, #8
07b80     A7 06 0A FB | 	rdlong	arg04, fp wz
07b84     04 4E 85 F1 | 	sub	fp, #4
07b88     09 EA 05 A6 |  if_e	mov	result1, #9
07b8c     98 06 90 AD |  if_e	jmp	#LR__1137
07b90     0C 4E 05 F1 | 	add	fp, #12
07b94     A7 06 C2 FA | 	rdbyte	arg04, fp
07b98     3F 06 06 F5 | 	and	arg04, #63
07b9c     A7 06 42 FC | 	wrbyte	arg04, fp
07ba0     04 4E 85 F1 | 	sub	fp, #4
07ba4     A7 00 02 F6 | 	mov	arg01, fp
07ba8     3C 4E 05 F1 | 	add	fp, #60
07bac     A7 02 02 F6 | 	mov	arg02, fp
07bb0     38 4E 85 F1 | 	sub	fp, #56
07bb4     A7 04 C2 FA | 	rdbyte	arg03, fp
07bb8     0C 4E 85 F1 | 	sub	fp, #12
07bbc     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
07bc0     10 4E 05 F1 | 	add	fp, #16
07bc4     A7 EA 61 FC | 	wrlong	result1, fp
07bc8     10 4E 85 F1 | 	sub	fp, #16
07bcc     00 EA 0D F2 | 	cmp	result1, #0 wz
07bd0     2C 06 90 5D |  if_ne	jmp	#LR__1136
07bd4     44 4E 05 F1 | 	add	fp, #68
07bd8     A7 06 02 FB | 	rdlong	arg04, fp
07bdc     30 4E 85 F1 | 	sub	fp, #48
07be0     A7 06 62 FC | 	wrlong	arg04, fp
07be4     A7 00 02 F6 | 	mov	arg01, fp
07be8     0C 4E 85 F1 | 	sub	fp, #12
07bec     A7 0A 02 FB | 	rdlong	local01, fp
07bf0     08 4E 85 F1 | 	sub	fp, #8
07bf4     05 03 02 F6 | 	mov	arg02, local01
07bf8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
07bfc     10 4E 05 F1 | 	add	fp, #16
07c00     A7 EA 61 FC | 	wrlong	result1, fp
07c04     10 4E 85 F1 | 	sub	fp, #16
07c08     00 EA 0D F2 | 	cmp	result1, #0 wz
07c0c     1C 00 90 5D |  if_ne	jmp	#LR__1120
07c10     3F 4E 05 F1 | 	add	fp, #63
07c14     A7 06 C2 FA | 	rdbyte	arg04, fp
07c18     3F 4E 85 F1 | 	sub	fp, #63
07c1c     80 06 CE F7 | 	test	arg04, #128 wz
07c20     10 4E 05 51 |  if_ne	add	fp, #16
07c24     A7 0C 68 5C |  if_ne	wrlong	#6, fp
07c28     10 4E 85 51 |  if_ne	sub	fp, #16
07c2c                 | LR__1120
07c2c     0C 4E 05 F1 | 	add	fp, #12
07c30     A7 06 C2 FA | 	rdbyte	arg04, fp
07c34     0C 4E 85 F1 | 	sub	fp, #12
07c38     1C 06 CE F7 | 	test	arg04, #28 wz
07c3c     F0 01 90 AD |  if_e	jmp	#LR__1125
07c40     10 4E 05 F1 | 	add	fp, #16
07c44     A7 0A 0A FB | 	rdlong	local01, fp wz
07c48     10 4E 85 F1 | 	sub	fp, #16
07c4c     48 00 90 AD |  if_e	jmp	#LR__1122
07c50     10 4E 05 F1 | 	add	fp, #16
07c54     A7 06 02 FB | 	rdlong	arg04, fp
07c58     10 4E 85 F1 | 	sub	fp, #16
07c5c     04 06 0E F2 | 	cmp	arg04, #4 wz
07c60     1C 00 90 5D |  if_ne	jmp	#LR__1121
07c64     14 4E 05 F1 | 	add	fp, #20
07c68     A7 00 02 F6 | 	mov	arg01, fp
07c6c     14 4E 85 F1 | 	sub	fp, #20
07c70     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
07c74     10 4E 05 F1 | 	add	fp, #16
07c78     A7 EA 61 FC | 	wrlong	result1, fp
07c7c     10 4E 85 F1 | 	sub	fp, #16
07c80                 | LR__1121
07c80     0C 4E 05 F1 | 	add	fp, #12
07c84     A7 0A C2 FA | 	rdbyte	local01, fp
07c88     08 0A 46 F5 | 	or	local01, #8
07c8c     A7 0A 42 FC | 	wrbyte	local01, fp
07c90     0C 4E 85 F1 | 	sub	fp, #12
07c94     3C 00 90 FD | 	jmp	#LR__1124
07c98                 | LR__1122
07c98     1A 4E 05 F1 | 	add	fp, #26
07c9c     A7 0A C2 FA | 	rdbyte	local01, fp
07ca0     1A 4E 85 F1 | 	sub	fp, #26
07ca4     11 0A CE F7 | 	test	local01, #17 wz
07ca8     10 4E 05 51 |  if_ne	add	fp, #16
07cac     A7 0E 68 5C |  if_ne	wrlong	#7, fp
07cb0     10 4E 85 51 |  if_ne	sub	fp, #16
07cb4     1C 00 90 5D |  if_ne	jmp	#LR__1123
07cb8     0C 4E 05 F1 | 	add	fp, #12
07cbc     A7 0A C2 FA | 	rdbyte	local01, fp
07cc0     0C 4E 85 F1 | 	sub	fp, #12
07cc4     04 0A CE F7 | 	test	local01, #4 wz
07cc8     10 4E 05 51 |  if_ne	add	fp, #16
07ccc     A7 10 68 5C |  if_ne	wrlong	#8, fp
07cd0     10 4E 85 51 |  if_ne	sub	fp, #16
07cd4                 | LR__1123
07cd4                 | LR__1124
07cd4     10 4E 05 F1 | 	add	fp, #16
07cd8     A7 0A 0A FB | 	rdlong	local01, fp wz
07cdc     10 4E 85 F1 | 	sub	fp, #16
07ce0     A8 01 90 5D |  if_ne	jmp	#LR__1128
07ce4     0C 4E 05 F1 | 	add	fp, #12
07ce8     A7 0A C2 FA | 	rdbyte	local01, fp
07cec     0C 4E 85 F1 | 	sub	fp, #12
07cf0     08 0A CE F7 | 	test	local01, #8 wz
07cf4     94 01 90 AD |  if_e	jmp	#LR__1128
07cf8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
07cfc     54 4E 05 F1 | 	add	fp, #84
07d00     A7 EA 61 FC | 	wrlong	result1, fp
07d04     24 4E 85 F1 | 	sub	fp, #36
07d08     A7 00 02 FB | 	rdlong	arg01, fp
07d0c     0E 00 06 F1 | 	add	arg01, #14
07d10     00 EB 61 FC | 	wrlong	result1, arg01
07d14     A7 00 02 FB | 	rdlong	arg01, fp
07d18     16 00 06 F1 | 	add	arg01, #22
07d1c     24 4E 05 F1 | 	add	fp, #36
07d20     A7 02 02 FB | 	rdlong	arg02, fp
07d24     00 03 62 FC | 	wrlong	arg02, arg01
07d28     10 4E 85 F1 | 	sub	fp, #16
07d2c     A7 00 02 FB | 	rdlong	arg01, fp
07d30     14 4E 85 F1 | 	sub	fp, #20
07d34     A7 02 02 FB | 	rdlong	arg02, fp
07d38     30 4E 85 F1 | 	sub	fp, #48
07d3c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
07d40     48 4E 05 F1 | 	add	fp, #72
07d44     A7 EA 61 FC | 	wrlong	result1, fp
07d48     18 4E 85 F1 | 	sub	fp, #24
07d4c     A7 0A 02 FB | 	rdlong	local01, fp
07d50     0B 0A 06 F1 | 	add	local01, #11
07d54     05 41 48 FC | 	wrbyte	#32, local01
07d58     14 4E 05 F1 | 	add	fp, #20
07d5c     A7 00 02 FB | 	rdlong	arg01, fp
07d60     14 4E 85 F1 | 	sub	fp, #20
07d64     A7 02 02 FB | 	rdlong	arg02, fp
07d68     30 4E 85 F1 | 	sub	fp, #48
07d6c     00 04 06 F6 | 	mov	arg03, #0
07d70     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
07d74     30 4E 05 F1 | 	add	fp, #48
07d78     A7 00 02 FB | 	rdlong	arg01, fp
07d7c     1C 00 06 F1 | 	add	arg01, #28
07d80     00 01 68 FC | 	wrlong	#0, arg01
07d84     14 4E 05 F1 | 	add	fp, #20
07d88     A7 0A 02 FB | 	rdlong	local01, fp
07d8c     03 0A 06 F1 | 	add	local01, #3
07d90     05 03 48 FC | 	wrbyte	#1, local01
07d94     04 4E 05 F1 | 	add	fp, #4
07d98     A7 0A 0A FB | 	rdlong	local01, fp wz
07d9c     48 4E 85 F1 | 	sub	fp, #72
07da0     E8 00 90 AD |  if_e	jmp	#LR__1128
07da4     44 4E 05 F1 | 	add	fp, #68
07da8     A7 0A 02 FB | 	rdlong	local01, fp
07dac     30 0A 06 F1 | 	add	local01, #48
07db0     05 0B 02 FB | 	rdlong	local01, local01
07db4     14 4E 05 F1 | 	add	fp, #20
07db8     A7 0A 62 FC | 	wrlong	local01, fp
07dbc     44 4E 85 F1 | 	sub	fp, #68
07dc0     A7 00 02 F6 | 	mov	arg01, fp
07dc4     34 4E 05 F1 | 	add	fp, #52
07dc8     A7 02 02 FB | 	rdlong	arg02, fp
07dcc     48 4E 85 F1 | 	sub	fp, #72
07dd0     00 04 06 F6 | 	mov	arg03, #0
07dd4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
07dd8     10 4E 05 F1 | 	add	fp, #16
07ddc     A7 EA 61 FC | 	wrlong	result1, fp
07de0     10 4E 85 F1 | 	sub	fp, #16
07de4     00 EA 0D F2 | 	cmp	result1, #0 wz
07de8     A0 00 90 5D |  if_ne	jmp	#LR__1128
07dec     44 4E 05 F1 | 	add	fp, #68
07df0     A7 00 02 FB | 	rdlong	arg01, fp
07df4     14 4E 05 F1 | 	add	fp, #20
07df8     A7 02 02 FB | 	rdlong	arg02, fp
07dfc     58 4E 85 F1 | 	sub	fp, #88
07e00     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
07e04     10 4E 05 F1 | 	add	fp, #16
07e08     A7 EA 61 FC | 	wrlong	result1, fp
07e0c     34 4E 05 F1 | 	add	fp, #52
07e10     A7 06 02 FB | 	rdlong	arg04, fp
07e14     04 4E 05 F1 | 	add	fp, #4
07e18     A7 0A 02 FB | 	rdlong	local01, fp
07e1c     48 4E 85 F1 | 	sub	fp, #72
07e20     01 0A 86 F1 | 	sub	local01, #1
07e24     10 06 06 F1 | 	add	arg04, #16
07e28     03 0B 62 FC | 	wrlong	local01, arg04
07e2c     5C 00 90 FD | 	jmp	#LR__1128
07e30                 | LR__1125
07e30     10 4E 05 F1 | 	add	fp, #16
07e34     A7 06 0A FB | 	rdlong	arg04, fp wz
07e38     10 4E 85 F1 | 	sub	fp, #16
07e3c     4C 00 90 5D |  if_ne	jmp	#LR__1127
07e40     1A 4E 05 F1 | 	add	fp, #26
07e44     A7 06 C2 FA | 	rdbyte	arg04, fp
07e48     1A 4E 85 F1 | 	sub	fp, #26
07e4c     10 06 CE F7 | 	test	arg04, #16 wz
07e50     10 4E 05 51 |  if_ne	add	fp, #16
07e54     A7 08 68 5C |  if_ne	wrlong	#4, fp
07e58     10 4E 85 51 |  if_ne	sub	fp, #16
07e5c     2C 00 90 5D |  if_ne	jmp	#LR__1126
07e60     0C 4E 05 F1 | 	add	fp, #12
07e64     A7 06 C2 FA | 	rdbyte	arg04, fp
07e68     0C 4E 85 F1 | 	sub	fp, #12
07e6c     02 06 CE F7 | 	test	arg04, #2 wz
07e70     1A 4E 05 51 |  if_ne	add	fp, #26
07e74     A7 0A C2 5A |  if_ne	rdbyte	local01, fp
07e78     1A 4E 85 51 |  if_ne	sub	fp, #26
07e7c     01 0A CE 57 |  if_ne	test	local01, #1 wz
07e80     10 4E 05 51 |  if_ne	add	fp, #16
07e84     A7 0E 68 5C |  if_ne	wrlong	#7, fp
07e88     10 4E 85 51 |  if_ne	sub	fp, #16
07e8c                 | LR__1126
07e8c                 | LR__1127
07e8c                 | LR__1128
07e8c     10 4E 05 F1 | 	add	fp, #16
07e90     A7 0A 0A FB | 	rdlong	local01, fp wz
07e94     10 4E 85 F1 | 	sub	fp, #16
07e98     60 00 90 5D |  if_ne	jmp	#LR__1129
07e9c     0C 4E 05 F1 | 	add	fp, #12
07ea0     A7 0C C2 FA | 	rdbyte	local02, fp
07ea4     0C 4E 85 F1 | 	sub	fp, #12
07ea8     08 0C CE F7 | 	test	local02, #8 wz
07eac     0C 4E 05 51 |  if_ne	add	fp, #12
07eb0     A7 0C C2 5A |  if_ne	rdbyte	local02, fp
07eb4     40 0C 46 55 |  if_ne	or	local02, #64
07eb8     A7 0C 42 5C |  if_ne	wrbyte	local02, fp
07ebc     0C 4E 85 51 |  if_ne	sub	fp, #12
07ec0     04 4E 05 F1 | 	add	fp, #4
07ec4     A7 0C 02 FB | 	rdlong	local02, fp
07ec8     40 4E 05 F1 | 	add	fp, #64
07ecc     A7 0A 02 FB | 	rdlong	local01, fp
07ed0     30 0A 06 F1 | 	add	local01, #48
07ed4     05 0B 02 FB | 	rdlong	local01, local01
07ed8     20 0C 06 F1 | 	add	local02, #32
07edc     06 0B 62 FC | 	wrlong	local01, local02
07ee0     40 4E 85 F1 | 	sub	fp, #64
07ee4     A7 0C 02 FB | 	rdlong	local02, fp
07ee8     2C 4E 05 F1 | 	add	fp, #44
07eec     A7 0A 02 FB | 	rdlong	local01, fp
07ef0     30 4E 85 F1 | 	sub	fp, #48
07ef4     24 0C 06 F1 | 	add	local02, #36
07ef8     06 0B 62 FC | 	wrlong	local01, local02
07efc                 | LR__1129
07efc     10 4E 05 F1 | 	add	fp, #16
07f00     A7 0C 0A FB | 	rdlong	local02, fp wz
07f04     10 4E 85 F1 | 	sub	fp, #16
07f08     F4 02 90 5D |  if_ne	jmp	#LR__1135
07f0c     04 4E 05 F1 | 	add	fp, #4
07f10     A7 0C 02 FB | 	rdlong	local02, fp
07f14     40 4E 05 F1 | 	add	fp, #64
07f18     A7 00 02 FB | 	rdlong	arg01, fp
07f1c     14 4E 85 F1 | 	sub	fp, #20
07f20     A7 02 02 FB | 	rdlong	arg02, fp
07f24     30 4E 85 F1 | 	sub	fp, #48
07f28     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
07f2c     08 0C 06 F1 | 	add	local02, #8
07f30     06 EB 61 FC | 	wrlong	result1, local02
07f34     04 4E 05 F1 | 	add	fp, #4
07f38     A7 0C 02 FB | 	rdlong	local02, fp
07f3c     2C 4E 05 F1 | 	add	fp, #44
07f40     A7 00 02 FB | 	rdlong	arg01, fp
07f44     1C 00 06 F1 | 	add	arg01, #28
07f48                 | ' {
07f48                 | ' 
07f48                 | ' 	return *((DWORD*)ptr);
07f48     00 EB 01 FB | 	rdlong	result1, arg01
07f4c     0C 0C 06 F1 | 	add	local02, #12
07f50     06 EB 61 FC | 	wrlong	result1, local02
07f54     2C 4E 85 F1 | 	sub	fp, #44
07f58     A7 0C 02 FB | 	rdlong	local02, fp
07f5c     40 4E 05 F1 | 	add	fp, #64
07f60     A7 0A 02 FB | 	rdlong	local01, fp
07f64     06 0B 62 FC | 	wrlong	local01, local02
07f68     40 4E 85 F1 | 	sub	fp, #64
07f6c     A7 0C 02 FB | 	rdlong	local02, fp
07f70     40 4E 05 F1 | 	add	fp, #64
07f74     A7 0A 02 FB | 	rdlong	local01, fp
07f78     06 0A 06 F1 | 	add	local01, #6
07f7c     05 0B E2 FA | 	rdword	local01, local01
07f80     04 0C 06 F1 | 	add	local02, #4
07f84     06 0B 52 FC | 	wrword	local01, local02
07f88     40 4E 85 F1 | 	sub	fp, #64
07f8c     A7 0C 02 FB | 	rdlong	local02, fp
07f90     08 4E 05 F1 | 	add	fp, #8
07f94     A7 0A C2 FA | 	rdbyte	local01, fp
07f98     10 0C 06 F1 | 	add	local02, #16
07f9c     06 0B 42 FC | 	wrbyte	local01, local02
07fa0     08 4E 85 F1 | 	sub	fp, #8
07fa4     A7 0C 02 FB | 	rdlong	local02, fp
07fa8     11 0C 06 F1 | 	add	local02, #17
07fac     06 01 48 FC | 	wrbyte	#0, local02
07fb0     A7 0C 02 FB | 	rdlong	local02, fp
07fb4     1C 0C 06 F1 | 	add	local02, #28
07fb8     06 01 68 FC | 	wrlong	#0, local02
07fbc     A7 0C 02 FB | 	rdlong	local02, fp
07fc0     14 0C 06 F1 | 	add	local02, #20
07fc4     06 01 68 FC | 	wrlong	#0, local02
07fc8     A7 00 02 FB | 	rdlong	arg01, fp
07fcc     04 4E 85 F1 | 	sub	fp, #4
07fd0     28 00 06 F1 | 	add	arg01, #40
07fd4     00 02 06 F6 | 	mov	arg02, #0
07fd8     09 04 C6 F9 | 	decod	arg03, #9
07fdc     98 00 A0 FD | 	call	#\builtin_bytefill_
07fe0     0C 4E 05 F1 | 	add	fp, #12
07fe4     A7 0C C2 FA | 	rdbyte	local02, fp
07fe8     0C 4E 85 F1 | 	sub	fp, #12
07fec     20 0C CE F7 | 	test	local02, #32 wz
07ff0     0C 02 90 AD |  if_e	jmp	#LR__1134
07ff4     04 4E 05 F1 | 	add	fp, #4
07ff8     A7 0A 02 FB | 	rdlong	local01, fp
07ffc     04 4E 85 F1 | 	sub	fp, #4
08000     0C 0A 06 F1 | 	add	local01, #12
08004     05 0D 02 FB | 	rdlong	local02, local01
08008     01 0C 16 F2 | 	cmp	local02, #1 wc
0800c     F0 01 90 CD |  if_b	jmp	#LR__1134
08010     04 4E 05 F1 | 	add	fp, #4
08014     A7 0A 02 FB | 	rdlong	local01, fp
08018     05 0D 02 F6 | 	mov	local02, local01
0801c     0C 0A 06 F1 | 	add	local01, #12
08020     05 0B 02 FB | 	rdlong	local01, local01
08024     14 0C 06 F1 | 	add	local02, #20
08028     06 0B 62 FC | 	wrlong	local01, local02
0802c     40 4E 05 F1 | 	add	fp, #64
08030     A7 0C 02 FB | 	rdlong	local02, fp
08034     0A 0C 06 F1 | 	add	local02, #10
08038     06 0D E2 FA | 	rdword	local02, local02
0803c     09 0C 66 F0 | 	shl	local02, #9
08040     08 4E 05 F1 | 	add	fp, #8
08044     A7 0C 62 FC | 	wrlong	local02, fp
08048     48 4E 85 F1 | 	sub	fp, #72
0804c     A7 0C 02 FB | 	rdlong	local02, fp
08050     08 0C 06 F1 | 	add	local02, #8
08054     06 0B 02 FB | 	rdlong	local01, local02
08058     4C 4E 05 F1 | 	add	fp, #76
0805c     A7 0A 62 FC | 	wrlong	local01, fp
08060                 | ' 				fp->fptr = fp->obj.objsize;
08060                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
08060                 | ' 				clst = fp->obj.sclust;
08060                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
08060     4C 4E 85 F1 | 	sub	fp, #76
08064     A7 0C 02 FB | 	rdlong	local02, fp
08068     0C 0C 06 F1 | 	add	local02, #12
0806c     06 0B 02 FB | 	rdlong	local01, local02
08070     58 4E 05 F1 | 	add	fp, #88
08074     A7 0A 62 FC | 	wrlong	local01, fp
08078     5C 4E 85 F1 | 	sub	fp, #92
0807c                 | LR__1130
0807c     10 4E 05 F1 | 	add	fp, #16
08080     A7 0C 0A FB | 	rdlong	local02, fp wz
08084     10 4E 85 F1 | 	sub	fp, #16
08088     94 00 90 5D |  if_ne	jmp	#LR__1131
0808c     5C 4E 05 F1 | 	add	fp, #92
08090     A7 0C 02 FB | 	rdlong	local02, fp
08094     10 4E 85 F1 | 	sub	fp, #16
08098     A7 0A 02 FB | 	rdlong	local01, fp
0809c     4C 4E 85 F1 | 	sub	fp, #76
080a0     05 0D 1A F2 | 	cmp	local02, local01 wcz
080a4     78 00 90 ED |  if_be	jmp	#LR__1131
080a8     04 4E 05 F1 | 	add	fp, #4
080ac     A7 00 02 FB | 	rdlong	arg01, fp
080b0     4C 4E 05 F1 | 	add	fp, #76
080b4     A7 02 02 FB | 	rdlong	arg02, fp
080b8     50 4E 85 F1 | 	sub	fp, #80
080bc     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
080c0     50 4E 05 F1 | 	add	fp, #80
080c4     A7 EA 61 FC | 	wrlong	result1, fp
080c8     50 4E 85 F1 | 	sub	fp, #80
080cc     02 EA 15 F2 | 	cmp	result1, #2 wc
080d0     10 4E 05 C1 |  if_b	add	fp, #16
080d4     A7 04 68 CC |  if_b	wrlong	#2, fp
080d8     10 4E 85 C1 |  if_b	sub	fp, #16
080dc     50 4E 05 F1 | 	add	fp, #80
080e0     A7 0C 02 FB | 	rdlong	local02, fp
080e4     50 4E 85 F1 | 	sub	fp, #80
080e8     FF FF 7F FF 
080ec     FF 0D 0E F2 | 	cmp	local02, ##-1 wz
080f0     10 4E 05 A1 |  if_e	add	fp, #16
080f4     A7 02 68 AC |  if_e	wrlong	#1, fp
080f8     10 4E 85 A1 |  if_e	sub	fp, #16
080fc     5C 4E 05 F1 | 	add	fp, #92
08100     A7 0C 02 FB | 	rdlong	local02, fp
08104     10 4E 85 F1 | 	sub	fp, #16
08108     A7 0A 02 FB | 	rdlong	local01, fp
0810c     05 0D 82 F1 | 	sub	local02, local01
08110     10 4E 05 F1 | 	add	fp, #16
08114     A7 0C 62 FC | 	wrlong	local02, fp
08118     5C 4E 85 F1 | 	sub	fp, #92
0811c     5C FF 9F FD | 	jmp	#LR__1130
08120                 | LR__1131
08120     04 4E 05 F1 | 	add	fp, #4
08124     A7 0C 02 FB | 	rdlong	local02, fp
08128     4C 4E 05 F1 | 	add	fp, #76
0812c     A7 0A 02 FB | 	rdlong	local01, fp
08130     18 0C 06 F1 | 	add	local02, #24
08134     06 0B 62 FC | 	wrlong	local01, local02
08138     40 4E 85 F1 | 	sub	fp, #64
0813c     A7 0C 0A FB | 	rdlong	local02, fp wz
08140     10 4E 85 F1 | 	sub	fp, #16
08144     B8 00 90 5D |  if_ne	jmp	#LR__1133
08148     5C 4E 05 F1 | 	add	fp, #92
0814c     A7 0A 02 FB | 	rdlong	local01, fp
08150     5C 4E 85 F1 | 	sub	fp, #92
08154     FF 0B CE F7 | 	test	local01, #511 wz
08158     A4 00 90 AD |  if_e	jmp	#LR__1133
0815c     44 4E 05 F1 | 	add	fp, #68
08160     A7 00 02 FB | 	rdlong	arg01, fp
08164     0C 4E 05 F1 | 	add	fp, #12
08168     A7 02 02 FB | 	rdlong	arg02, fp
0816c     50 4E 85 F1 | 	sub	fp, #80
08170     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
08174     58 4E 05 F1 | 	add	fp, #88
08178     A7 EA 61 FC | 	wrlong	result1, fp
0817c     00 EA 4D F2 | 	cmps	result1, #0 wz
08180     58 4E 85 F1 | 	sub	fp, #88
08184     10 4E 05 A1 |  if_e	add	fp, #16
08188     A7 04 68 AC |  if_e	wrlong	#2, fp
0818c     10 4E 85 A1 |  if_e	sub	fp, #16
08190     6C 00 90 AD |  if_e	jmp	#LR__1132
08194     04 4E 05 F1 | 	add	fp, #4
08198     A7 0C 02 FB | 	rdlong	local02, fp
0819c     54 4E 05 F1 | 	add	fp, #84
081a0     A7 0A 02 FB | 	rdlong	local01, fp
081a4     04 4E 05 F1 | 	add	fp, #4
081a8     A7 06 02 FB | 	rdlong	arg04, fp
081ac     09 06 46 F0 | 	shr	arg04, #9
081b0     03 0B 02 F1 | 	add	local01, arg04
081b4     1C 0C 06 F1 | 	add	local02, #28
081b8     06 0B 62 FC | 	wrlong	local01, local02
081bc     18 4E 85 F1 | 	sub	fp, #24
081c0     A7 0C 02 FB | 	rdlong	local02, fp
081c4     01 0C 06 F1 | 	add	local02, #1
081c8     06 01 C2 FA | 	rdbyte	arg01, local02
081cc     40 4E 85 F1 | 	sub	fp, #64
081d0     A7 0C 02 FB | 	rdlong	local02, fp
081d4     06 03 02 F6 | 	mov	arg02, local02
081d8     28 02 06 F1 | 	add	arg02, #40
081dc     04 4E 85 F1 | 	sub	fp, #4
081e0     1C 0C 06 F1 | 	add	local02, #28
081e4     06 05 02 FB | 	rdlong	arg03, local02
081e8     01 06 06 F6 | 	mov	arg04, #1
081ec     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
081f0     00 EA 0D F2 | 	cmp	result1, #0 wz
081f4     10 4E 05 51 |  if_ne	add	fp, #16
081f8     A7 02 68 5C |  if_ne	wrlong	#1, fp
081fc     10 4E 85 51 |  if_ne	sub	fp, #16
08200                 | LR__1132
08200                 | LR__1133
08200                 | LR__1134
08200                 | LR__1135
08200                 | LR__1136
08200     10 4E 05 F1 | 	add	fp, #16
08204     A7 0C 0A FB | 	rdlong	local02, fp wz
08208     10 4E 85 F1 | 	sub	fp, #16
0820c     04 4E 05 51 |  if_ne	add	fp, #4
08210     A7 0C 02 5B |  if_ne	rdlong	local02, fp
08214     04 4E 85 51 |  if_ne	sub	fp, #4
08218     06 01 68 5C |  if_ne	wrlong	#0, local02
0821c                 | ' 
0821c                 | ' 	return res ;
0821c     10 4E 05 F1 | 	add	fp, #16
08220     A7 EA 01 FB | 	rdlong	result1, fp
08224     10 4E 85 F1 | 	sub	fp, #16
08228                 | LR__1137
08228     A7 F0 03 F6 | 	mov	ptra, fp
0822c     B2 00 A0 FD | 	call	#popregs_
08230                 | _fatfs_cc_f_open_ret
08230     2D 00 64 FD | 	ret
08234                 | 
08234                 | _fatfs_cc_f_read
08234     0E 4A 05 F6 | 	mov	COUNT_, #14
08238     A8 00 A0 FD | 	call	#pushregs_
0823c     38 F0 07 F1 | 	add	ptra, #56
08240     04 4E 05 F1 | 	add	fp, #4
08244     A7 00 62 FC | 	wrlong	arg01, fp
08248     04 4E 05 F1 | 	add	fp, #4
0824c     A7 02 62 FC | 	wrlong	arg02, fp
08250     04 4E 05 F1 | 	add	fp, #4
08254     A7 04 62 FC | 	wrlong	arg03, fp
08258     04 4E 05 F1 | 	add	fp, #4
0825c     A7 06 62 FC | 	wrlong	arg04, fp
08260     08 4E 85 F1 | 	sub	fp, #8
08264     A7 EA 01 FB | 	rdlong	result1, fp
08268     2C 4E 05 F1 | 	add	fp, #44
0826c     A7 EA 61 FC | 	wrlong	result1, fp
08270     24 4E 85 F1 | 	sub	fp, #36
08274     A7 EA 01 FB | 	rdlong	result1, fp
08278     F5 00 68 FC | 	wrlong	#0, result1
0827c     0C 4E 85 F1 | 	sub	fp, #12
08280     A7 00 02 FB | 	rdlong	arg01, fp
08284     14 4E 05 F1 | 	add	fp, #20
08288     A7 02 02 F6 | 	mov	arg02, fp
0828c     18 4E 85 F1 | 	sub	fp, #24
08290     24 F7 BF FD | 	call	#_fatfs_cc_validate
08294     14 4E 05 F1 | 	add	fp, #20
08298     A7 EA 61 FC | 	wrlong	result1, fp
0829c     00 EA 4D F2 | 	cmps	result1, #0 wz
082a0     14 4E 85 F1 | 	sub	fp, #20
082a4     20 00 90 5D |  if_ne	jmp	#LR__1140
082a8     04 4E 05 F1 | 	add	fp, #4
082ac     A7 02 02 FB | 	rdlong	arg02, fp
082b0     11 02 06 F1 | 	add	arg02, #17
082b4     01 03 CA FA | 	rdbyte	arg02, arg02 wz
082b8     10 4E 05 F1 | 	add	fp, #16
082bc     A7 02 62 FC | 	wrlong	arg02, fp
082c0     14 4E 85 F1 | 	sub	fp, #20
082c4     10 00 90 AD |  if_e	jmp	#LR__1141
082c8                 | LR__1140
082c8     14 4E 05 F1 | 	add	fp, #20
082cc     A7 EA 01 FB | 	rdlong	result1, fp
082d0     14 4E 85 F1 | 	sub	fp, #20
082d4     EC 05 90 FD | 	jmp	#LR__1160
082d8                 | LR__1141
082d8     04 4E 05 F1 | 	add	fp, #4
082dc     A7 06 02 FB | 	rdlong	arg04, fp
082e0     04 4E 85 F1 | 	sub	fp, #4
082e4     10 06 06 F1 | 	add	arg04, #16
082e8     03 07 C2 FA | 	rdbyte	arg04, arg04
082ec     01 06 CE F7 | 	test	arg04, #1 wz
082f0     07 EA 05 A6 |  if_e	mov	result1, #7
082f4     CC 05 90 AD |  if_e	jmp	#LR__1160
082f8     04 4E 05 F1 | 	add	fp, #4
082fc     A7 0A 02 FB | 	rdlong	local01, fp
08300     05 0D 02 F6 | 	mov	local02, local01
08304     0C 0C 06 F1 | 	add	local02, #12
08308     06 0F 02 FB | 	rdlong	local03, local02
0830c     14 0A 06 F1 | 	add	local01, #20
08310     05 0B 02 FB | 	rdlong	local01, local01
08314     05 0F 82 F1 | 	sub	local03, local01
08318     20 4E 05 F1 | 	add	fp, #32
0831c     A7 0E 62 FC | 	wrlong	local03, fp
08320     18 4E 85 F1 | 	sub	fp, #24
08324     A7 10 02 FB | 	rdlong	local04, fp
08328     0C 4E 85 F1 | 	sub	fp, #12
0832c     07 11 1A F2 | 	cmp	local04, local03 wcz
08330     24 4E 05 11 |  if_a	add	fp, #36
08334     A7 10 02 1B |  if_a	rdlong	local04, fp
08338     18 4E 85 11 |  if_a	sub	fp, #24
0833c     A7 10 62 1C |  if_a	wrlong	local04, fp
08340     0C 4E 85 11 |  if_a	sub	fp, #12
08344                 | ' 
08344                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
08344                 | LR__1142
08344     0C 4E 05 F1 | 	add	fp, #12
08348     A7 0C 02 FB | 	rdlong	local02, fp
0834c     0C 4E 85 F1 | 	sub	fp, #12
08350     06 11 02 F6 | 	mov	local04, local02
08354     01 10 16 F2 | 	cmp	local04, #1 wc
08358     64 05 90 CD |  if_b	jmp	#LR__1159
0835c     04 4E 05 F1 | 	add	fp, #4
08360     A7 0E 02 FB | 	rdlong	local03, fp
08364     04 4E 85 F1 | 	sub	fp, #4
08368     14 0E 06 F1 | 	add	local03, #20
0836c     07 0F 02 FB | 	rdlong	local03, local03
08370     FF 0F CE F7 | 	test	local03, #511 wz
08374     3C 04 90 5D |  if_ne	jmp	#LR__1157
08378     04 4E 05 F1 | 	add	fp, #4
0837c     A7 0A 02 FB | 	rdlong	local01, fp
08380     14 0A 06 F1 | 	add	local01, #20
08384     05 0F 02 FB | 	rdlong	local03, local01
08388     09 0E 46 F0 | 	shr	local03, #9
0838c     14 4E 05 F1 | 	add	fp, #20
08390     A7 12 02 FB | 	rdlong	local05, fp
08394     09 15 02 F6 | 	mov	local06, local05
08398     0A 14 06 F1 | 	add	local06, #10
0839c     0A 17 E2 FA | 	rdword	local07, local06
083a0     0A 14 86 F1 | 	sub	local06, #10
083a4     0B 19 32 F9 | 	getword	local08, local07, #0
083a8     01 18 86 F1 | 	sub	local08, #1
083ac     0C 0F 0A F5 | 	and	local03, local08 wz
083b0     18 4E 05 F1 | 	add	fp, #24
083b4     A7 0E 62 FC | 	wrlong	local03, fp
083b8     30 4E 85 F1 | 	sub	fp, #48
083bc     E0 00 90 5D |  if_ne	jmp	#LR__1147
083c0     04 4E 05 F1 | 	add	fp, #4
083c4     A7 0E 02 FB | 	rdlong	local03, fp
083c8     04 4E 85 F1 | 	sub	fp, #4
083cc     14 0E 06 F1 | 	add	local03, #20
083d0     07 0F 0A FB | 	rdlong	local03, local03 wz
083d4     20 00 90 5D |  if_ne	jmp	#LR__1143
083d8     04 4E 05 F1 | 	add	fp, #4
083dc     A7 0E 02 FB | 	rdlong	local03, fp
083e0     08 0E 06 F1 | 	add	local03, #8
083e4     07 0F 02 FB | 	rdlong	local03, local03
083e8     18 4E 05 F1 | 	add	fp, #24
083ec     A7 0E 62 FC | 	wrlong	local03, fp
083f0     1C 4E 85 F1 | 	sub	fp, #28
083f4     28 00 90 FD | 	jmp	#LR__1144
083f8                 | LR__1143
083f8     04 4E 05 F1 | 	add	fp, #4
083fc     A7 18 02 FB | 	rdlong	local08, fp
08400     0C 01 02 F6 | 	mov	arg01, local08
08404     04 4E 85 F1 | 	sub	fp, #4
08408     18 18 06 F1 | 	add	local08, #24
0840c     0C 03 02 FB | 	rdlong	arg02, local08
08410     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
08414     1C 4E 05 F1 | 	add	fp, #28
08418     A7 EA 61 FC | 	wrlong	result1, fp
0841c     1C 4E 85 F1 | 	sub	fp, #28
08420                 | LR__1144
08420     1C 4E 05 F1 | 	add	fp, #28
08424     A7 0E 02 FB | 	rdlong	local03, fp
08428     1C 4E 85 F1 | 	sub	fp, #28
0842c     02 0E 16 F2 | 	cmp	local03, #2 wc
08430     1C 00 90 3D |  if_ae	jmp	#LR__1145
08434     04 4E 05 F1 | 	add	fp, #4
08438     A7 0E 02 FB | 	rdlong	local03, fp
0843c     04 4E 85 F1 | 	sub	fp, #4
08440     11 0E 06 F1 | 	add	local03, #17
08444     07 05 48 FC | 	wrbyte	#2, local03
08448     02 EA 05 F6 | 	mov	result1, #2
0844c     74 04 90 FD | 	jmp	#LR__1160
08450                 | LR__1145
08450     1C 4E 05 F1 | 	add	fp, #28
08454     A7 0E 02 FB | 	rdlong	local03, fp
08458     1C 4E 85 F1 | 	sub	fp, #28
0845c     FF FF 7F FF 
08460     FF 0F 0E F2 | 	cmp	local03, ##-1 wz
08464     1C 00 90 5D |  if_ne	jmp	#LR__1146
08468     04 4E 05 F1 | 	add	fp, #4
0846c     A7 0E 02 FB | 	rdlong	local03, fp
08470     04 4E 85 F1 | 	sub	fp, #4
08474     11 0E 06 F1 | 	add	local03, #17
08478     07 03 48 FC | 	wrbyte	#1, local03
0847c     01 EA 05 F6 | 	mov	result1, #1
08480     40 04 90 FD | 	jmp	#LR__1160
08484                 | LR__1146
08484     04 4E 05 F1 | 	add	fp, #4
08488     A7 0E 02 FB | 	rdlong	local03, fp
0848c     18 4E 05 F1 | 	add	fp, #24
08490     A7 18 02 FB | 	rdlong	local08, fp
08494     1C 4E 85 F1 | 	sub	fp, #28
08498     18 0E 06 F1 | 	add	local03, #24
0849c     07 19 62 FC | 	wrlong	local08, local03
084a0                 | LR__1147
084a0     18 4E 05 F1 | 	add	fp, #24
084a4     A7 00 02 FB | 	rdlong	arg01, fp
084a8     14 4E 85 F1 | 	sub	fp, #20
084ac     A7 0E 02 FB | 	rdlong	local03, fp
084b0     04 4E 85 F1 | 	sub	fp, #4
084b4     18 0E 06 F1 | 	add	local03, #24
084b8     07 03 02 FB | 	rdlong	arg02, local03
084bc     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
084c0     20 4E 05 F1 | 	add	fp, #32
084c4     A7 EA 61 FC | 	wrlong	result1, fp
084c8     20 4E 85 F1 | 	sub	fp, #32
084cc     00 EA 0D F2 | 	cmp	result1, #0 wz
084d0     1C 00 90 5D |  if_ne	jmp	#LR__1148
084d4     04 4E 05 F1 | 	add	fp, #4
084d8     A7 0E 02 FB | 	rdlong	local03, fp
084dc     04 4E 85 F1 | 	sub	fp, #4
084e0     11 0E 06 F1 | 	add	local03, #17
084e4     07 05 48 FC | 	wrbyte	#2, local03
084e8     02 EA 05 F6 | 	mov	result1, #2
084ec     D4 03 90 FD | 	jmp	#LR__1160
084f0                 | LR__1148
084f0     20 4E 05 F1 | 	add	fp, #32
084f4     A7 0E 02 FB | 	rdlong	local03, fp
084f8     10 4E 05 F1 | 	add	fp, #16
084fc     A7 18 02 FB | 	rdlong	local08, fp
08500     0C 0F 02 F1 | 	add	local03, local08
08504     10 4E 85 F1 | 	sub	fp, #16
08508     A7 0E 62 FC | 	wrlong	local03, fp
0850c     14 4E 85 F1 | 	sub	fp, #20
08510     A7 0E 02 FB | 	rdlong	local03, fp
08514     09 0E 46 F0 | 	shr	local03, #9
08518     20 4E 05 F1 | 	add	fp, #32
0851c     A7 0E 62 FC | 	wrlong	local03, fp
08520     2C 4E 85 F1 | 	sub	fp, #44
08524     01 0E 16 F2 | 	cmp	local03, #1 wc
08528     5C 01 90 CD |  if_b	jmp	#LR__1152
0852c     30 4E 05 F1 | 	add	fp, #48
08530     A7 0E 02 FB | 	rdlong	local03, fp
08534     04 4E 85 F1 | 	sub	fp, #4
08538     A7 18 02 FB | 	rdlong	local08, fp
0853c     0C 0F 02 F1 | 	add	local03, local08
08540     14 4E 85 F1 | 	sub	fp, #20
08544     A7 18 02 FB | 	rdlong	local08, fp
08548     18 4E 85 F1 | 	sub	fp, #24
0854c     0A 18 06 F1 | 	add	local08, #10
08550     0C 19 E2 FA | 	rdword	local08, local08
08554     0C 0F 1A F2 | 	cmp	local03, local08 wcz
08558     28 00 90 ED |  if_be	jmp	#LR__1149
0855c     18 4E 05 F1 | 	add	fp, #24
08560     A7 0A 02 FB | 	rdlong	local01, fp
08564     0A 0A 06 F1 | 	add	local01, #10
08568     05 0F E2 FA | 	rdword	local03, local01
0856c     18 4E 05 F1 | 	add	fp, #24
08570     A7 18 02 FB | 	rdlong	local08, fp
08574     0C 0F 82 F1 | 	sub	local03, local08
08578     04 4E 85 F1 | 	sub	fp, #4
0857c     A7 0E 62 FC | 	wrlong	local03, fp
08580     2C 4E 85 F1 | 	sub	fp, #44
08584                 | LR__1149
08584     18 4E 05 F1 | 	add	fp, #24
08588     A7 0A 02 FB | 	rdlong	local01, fp
0858c     01 0A 06 F1 | 	add	local01, #1
08590     05 01 C2 FA | 	rdbyte	arg01, local01
08594     1C 4E 05 F1 | 	add	fp, #28
08598     A7 02 02 FB | 	rdlong	arg02, fp
0859c     14 4E 85 F1 | 	sub	fp, #20
085a0     A7 04 02 FB | 	rdlong	arg03, fp
085a4     0C 4E 05 F1 | 	add	fp, #12
085a8     A7 06 02 FB | 	rdlong	arg04, fp
085ac     2C 4E 85 F1 | 	sub	fp, #44
085b0     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
085b4     00 EA 0D F2 | 	cmp	result1, #0 wz
085b8     1C 00 90 AD |  if_e	jmp	#LR__1150
085bc     04 4E 05 F1 | 	add	fp, #4
085c0     A7 0E 02 FB | 	rdlong	local03, fp
085c4     04 4E 85 F1 | 	sub	fp, #4
085c8     11 0E 06 F1 | 	add	local03, #17
085cc     07 03 48 FC | 	wrbyte	#1, local03
085d0     01 EA 05 F6 | 	mov	result1, #1
085d4     EC 02 90 FD | 	jmp	#LR__1160
085d8                 | LR__1150
085d8     04 4E 05 F1 | 	add	fp, #4
085dc     A7 0A 02 FB | 	rdlong	local01, fp
085e0     04 4E 85 F1 | 	sub	fp, #4
085e4     10 0A 06 F1 | 	add	local01, #16
085e8     05 0F C2 FA | 	rdbyte	local03, local01
085ec     80 0E CE F7 | 	test	local03, #128 wz
085f0     78 00 90 AD |  if_e	jmp	#LR__1151
085f4     04 4E 05 F1 | 	add	fp, #4
085f8     A7 18 02 FB | 	rdlong	local08, fp
085fc     1C 18 06 F1 | 	add	local08, #28
08600     0C 19 02 FB | 	rdlong	local08, local08
08604     1C 4E 05 F1 | 	add	fp, #28
08608     A7 1A 02 FB | 	rdlong	local09, fp
0860c     0D 19 82 F1 | 	sub	local08, local09
08610     0C 4E 05 F1 | 	add	fp, #12
08614     A7 1C 02 FB | 	rdlong	local10, fp
08618     2C 4E 85 F1 | 	sub	fp, #44
0861c     0E 1F 02 F6 | 	mov	local11, local10
08620     0F 19 12 F2 | 	cmp	local08, local11 wc
08624     44 00 90 3D |  if_ae	jmp	#LR__1151
08628     34 4E 05 F1 | 	add	fp, #52
0862c     A7 00 02 FB | 	rdlong	arg01, fp
08630     30 4E 85 F1 | 	sub	fp, #48
08634     A7 02 02 FB | 	rdlong	arg02, fp
08638     01 1F 02 F6 | 	mov	local11, arg02
0863c     1C 1E 06 F1 | 	add	local11, #28
08640     0F 1B 02 FB | 	rdlong	local09, local11
08644     1C 4E 05 F1 | 	add	fp, #28
08648     A7 12 02 FB | 	rdlong	local05, fp
0864c     09 1B 82 F1 | 	sub	local09, local05
08650     09 1A 66 F0 | 	shl	local09, #9
08654     0D 1F 02 F6 | 	mov	local11, local09
08658     0D 01 02 F1 | 	add	arg01, local09
0865c     20 4E 85 F1 | 	sub	fp, #32
08660     28 02 06 F1 | 	add	arg02, #40
08664     09 04 C6 F9 | 	decod	arg03, #9
08668     6C 86 BF FD | 	call	#__system____builtin_memmove
0866c                 | LR__1151
0866c     2C 4E 05 F1 | 	add	fp, #44
08670     A7 0E 02 FB | 	rdlong	local03, fp
08674     09 0E 66 F0 | 	shl	local03, #9
08678     04 4E 85 F1 | 	sub	fp, #4
0867c     A7 0E 62 FC | 	wrlong	local03, fp
08680     28 4E 85 F1 | 	sub	fp, #40
08684                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
08684                 | ' 				}
08684                 | ' 
08684                 | ' 
08684                 | ' 				rcnt =  ((UINT) 512 )  * cc;
08684                 | ' 				continue;
08684     B4 01 90 FD | 	jmp	#LR__1158
08688                 | LR__1152
08688     04 4E 05 F1 | 	add	fp, #4
0868c     A7 0E 02 FB | 	rdlong	local03, fp
08690     1C 0E 06 F1 | 	add	local03, #28
08694     07 0F 02 FB | 	rdlong	local03, local03
08698     1C 4E 05 F1 | 	add	fp, #28
0869c     A7 0A 02 FB | 	rdlong	local01, fp
086a0     20 4E 85 F1 | 	sub	fp, #32
086a4     05 0F 0A F2 | 	cmp	local03, local01 wz
086a8     EC 00 90 AD |  if_e	jmp	#LR__1156
086ac     04 4E 05 F1 | 	add	fp, #4
086b0     A7 0A 02 FB | 	rdlong	local01, fp
086b4     04 4E 85 F1 | 	sub	fp, #4
086b8     10 0A 06 F1 | 	add	local01, #16
086bc     05 0F C2 FA | 	rdbyte	local03, local01
086c0     80 0E CE F7 | 	test	local03, #128 wz
086c4     7C 00 90 AD |  if_e	jmp	#LR__1154
086c8     18 4E 05 F1 | 	add	fp, #24
086cc     A7 0A 02 FB | 	rdlong	local01, fp
086d0     01 0A 06 F1 | 	add	local01, #1
086d4     05 01 C2 FA | 	rdbyte	arg01, local01
086d8     14 4E 85 F1 | 	sub	fp, #20
086dc     A7 0E 02 FB | 	rdlong	local03, fp
086e0     07 03 02 F6 | 	mov	arg02, local03
086e4     28 02 06 F1 | 	add	arg02, #40
086e8     04 4E 85 F1 | 	sub	fp, #4
086ec     1C 0E 06 F1 | 	add	local03, #28
086f0     07 05 02 FB | 	rdlong	arg03, local03
086f4     01 06 06 F6 | 	mov	arg04, #1
086f8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
086fc     00 EA 0D F2 | 	cmp	result1, #0 wz
08700     1C 00 90 AD |  if_e	jmp	#LR__1153
08704     04 4E 05 F1 | 	add	fp, #4
08708     A7 0E 02 FB | 	rdlong	local03, fp
0870c     04 4E 85 F1 | 	sub	fp, #4
08710     11 0E 06 F1 | 	add	local03, #17
08714     07 03 48 FC | 	wrbyte	#1, local03
08718     01 EA 05 F6 | 	mov	result1, #1
0871c     A4 01 90 FD | 	jmp	#LR__1160
08720                 | LR__1153
08720     04 4E 05 F1 | 	add	fp, #4
08724     A7 1E 02 FB | 	rdlong	local11, fp
08728     0F 0F 02 F6 | 	mov	local03, local11
0872c     04 4E 85 F1 | 	sub	fp, #4
08730     10 1E 06 F1 | 	add	local11, #16
08734     0F 1F C2 FA | 	rdbyte	local11, local11
08738     7F 1E 06 F5 | 	and	local11, #127
0873c     10 0E 06 F1 | 	add	local03, #16
08740     07 1F 42 FC | 	wrbyte	local11, local03
08744                 | LR__1154
08744     18 4E 05 F1 | 	add	fp, #24
08748     A7 0A 02 FB | 	rdlong	local01, fp
0874c     01 0A 06 F1 | 	add	local01, #1
08750     05 01 C2 FA | 	rdbyte	arg01, local01
08754     14 4E 85 F1 | 	sub	fp, #20
08758     A7 02 02 FB | 	rdlong	arg02, fp
0875c     28 02 06 F1 | 	add	arg02, #40
08760     1C 4E 05 F1 | 	add	fp, #28
08764     A7 04 02 FB | 	rdlong	arg03, fp
08768     20 4E 85 F1 | 	sub	fp, #32
0876c     01 06 06 F6 | 	mov	arg04, #1
08770     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
08774     00 EA 0D F2 | 	cmp	result1, #0 wz
08778     1C 00 90 AD |  if_e	jmp	#LR__1155
0877c     04 4E 05 F1 | 	add	fp, #4
08780     A7 0E 02 FB | 	rdlong	local03, fp
08784     04 4E 85 F1 | 	sub	fp, #4
08788     11 0E 06 F1 | 	add	local03, #17
0878c     07 03 48 FC | 	wrbyte	#1, local03
08790     01 EA 05 F6 | 	mov	result1, #1
08794     2C 01 90 FD | 	jmp	#LR__1160
08798                 | LR__1155
08798                 | LR__1156
08798     04 4E 05 F1 | 	add	fp, #4
0879c     A7 0E 02 FB | 	rdlong	local03, fp
087a0     1C 4E 05 F1 | 	add	fp, #28
087a4     A7 1E 02 FB | 	rdlong	local11, fp
087a8     20 4E 85 F1 | 	sub	fp, #32
087ac     1C 0E 06 F1 | 	add	local03, #28
087b0     07 1F 62 FC | 	wrlong	local11, local03
087b4                 | LR__1157
087b4     04 4E 05 F1 | 	add	fp, #4
087b8     A7 0A 02 FB | 	rdlong	local01, fp
087bc     14 0A 06 F1 | 	add	local01, #20
087c0     05 1F 02 FB | 	rdlong	local11, local01
087c4     FF 1F 06 F5 | 	and	local11, #511
087c8     09 0E C6 F9 | 	decod	local03, #9
087cc     0F 0F 82 F1 | 	sub	local03, local11
087d0     24 4E 05 F1 | 	add	fp, #36
087d4     A7 0E 62 FC | 	wrlong	local03, fp
087d8     1C 4E 85 F1 | 	sub	fp, #28
087dc     A7 1E 02 FB | 	rdlong	local11, fp
087e0     0C 4E 85 F1 | 	sub	fp, #12
087e4     0F 0F 1A F2 | 	cmp	local03, local11 wcz
087e8     0C 4E 05 11 |  if_a	add	fp, #12
087ec     A7 0E 02 1B |  if_a	rdlong	local03, fp
087f0     1C 4E 05 11 |  if_a	add	fp, #28
087f4     A7 0E 62 1C |  if_a	wrlong	local03, fp
087f8     28 4E 85 11 |  if_a	sub	fp, #40
087fc     34 4E 05 F1 | 	add	fp, #52
08800     A7 00 02 FB | 	rdlong	arg01, fp
08804     30 4E 85 F1 | 	sub	fp, #48
08808     A7 14 02 FB | 	rdlong	local06, fp
0880c     0A 03 02 F6 | 	mov	arg02, local06
08810     28 02 06 F1 | 	add	arg02, #40
08814     14 14 06 F1 | 	add	local06, #20
08818     0A 1F 02 FB | 	rdlong	local11, local06
0881c     0F 1B 02 F6 | 	mov	local09, local11
08820     0D 1D 02 F6 | 	mov	local10, local09
08824     FF 1D 06 F5 | 	and	local10, #511
08828     0E 03 02 F1 | 	add	arg02, local10
0882c     24 4E 05 F1 | 	add	fp, #36
08830     A7 04 02 FB | 	rdlong	arg03, fp
08834     28 4E 85 F1 | 	sub	fp, #40
08838     9C 84 BF FD | 	call	#__system____builtin_memmove
0883c                 | LR__1158
0883c     0C 4E 05 F1 | 	add	fp, #12
08840     A7 0E 02 FB | 	rdlong	local03, fp
08844     1C 4E 05 F1 | 	add	fp, #28
08848     A7 18 02 FB | 	rdlong	local08, fp
0884c     0C 0F 82 F1 | 	sub	local03, local08
08850     1C 4E 85 F1 | 	sub	fp, #28
08854     A7 0E 62 FC | 	wrlong	local03, fp
08858     04 4E 05 F1 | 	add	fp, #4
0885c     A7 0A 02 FB | 	rdlong	local01, fp
08860     05 17 02 FB | 	rdlong	local07, local01
08864     18 4E 05 F1 | 	add	fp, #24
08868     A7 18 02 FB | 	rdlong	local08, fp
0886c     0C 17 02 F1 | 	add	local07, local08
08870     05 17 62 FC | 	wrlong	local07, local01
08874     0C 4E 05 F1 | 	add	fp, #12
08878     A7 0E 02 FB | 	rdlong	local03, fp
0887c     0C 4E 85 F1 | 	sub	fp, #12
08880     A7 20 02 FB | 	rdlong	local12, fp
08884     10 0F 02 F1 | 	add	local03, local12
08888     0C 4E 05 F1 | 	add	fp, #12
0888c     A7 0E 62 FC | 	wrlong	local03, fp
08890     30 4E 85 F1 | 	sub	fp, #48
08894     A7 22 02 FB | 	rdlong	local13, fp
08898     11 0F 02 F6 | 	mov	local03, local13
0889c     14 22 06 F1 | 	add	local13, #20
088a0     11 25 02 FB | 	rdlong	local14, local13
088a4     24 4E 05 F1 | 	add	fp, #36
088a8     A7 14 02 FB | 	rdlong	local06, fp
088ac     28 4E 85 F1 | 	sub	fp, #40
088b0     0A 25 02 F1 | 	add	local14, local06
088b4     14 0E 06 F1 | 	add	local03, #20
088b8     07 25 62 FC | 	wrlong	local14, local03
088bc     84 FA 9F FD | 	jmp	#LR__1142
088c0                 | LR__1159
088c0                 | ' 
088c0                 | ' 
088c0                 | ' 
088c0                 | ' 
088c0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
088c0                 | ' 
088c0                 | ' 	}
088c0                 | ' 
088c0                 | ' 	return FR_OK ;
088c0     00 EA 05 F6 | 	mov	result1, #0
088c4                 | LR__1160
088c4     A7 F0 03 F6 | 	mov	ptra, fp
088c8     B2 00 A0 FD | 	call	#popregs_
088cc                 | _fatfs_cc_f_read_ret
088cc     2D 00 64 FD | 	ret
088d0                 | 
088d0                 | _fatfs_cc_f_write
088d0     15 4A 05 F6 | 	mov	COUNT_, #21
088d4     A8 00 A0 FD | 	call	#pushregs_
088d8     34 F0 07 F1 | 	add	ptra, #52
088dc     04 4E 05 F1 | 	add	fp, #4
088e0     A7 00 62 FC | 	wrlong	arg01, fp
088e4     04 4E 05 F1 | 	add	fp, #4
088e8     A7 02 62 FC | 	wrlong	arg02, fp
088ec     04 4E 05 F1 | 	add	fp, #4
088f0     A7 04 62 FC | 	wrlong	arg03, fp
088f4     04 4E 05 F1 | 	add	fp, #4
088f8     A7 06 62 FC | 	wrlong	arg04, fp
088fc     08 4E 85 F1 | 	sub	fp, #8
08900     A7 EA 01 FB | 	rdlong	result1, fp
08904     28 4E 05 F1 | 	add	fp, #40
08908     A7 EA 61 FC | 	wrlong	result1, fp
0890c     20 4E 85 F1 | 	sub	fp, #32
08910     A7 EA 01 FB | 	rdlong	result1, fp
08914     F5 00 68 FC | 	wrlong	#0, result1
08918     0C 4E 85 F1 | 	sub	fp, #12
0891c     A7 00 02 FB | 	rdlong	arg01, fp
08920     14 4E 05 F1 | 	add	fp, #20
08924     A7 02 02 F6 | 	mov	arg02, fp
08928     18 4E 85 F1 | 	sub	fp, #24
0892c     88 F0 BF FD | 	call	#_fatfs_cc_validate
08930     14 4E 05 F1 | 	add	fp, #20
08934     A7 EA 61 FC | 	wrlong	result1, fp
08938     00 EA 4D F2 | 	cmps	result1, #0 wz
0893c     14 4E 85 F1 | 	sub	fp, #20
08940     20 00 90 5D |  if_ne	jmp	#LR__1170
08944     04 4E 05 F1 | 	add	fp, #4
08948     A7 02 02 FB | 	rdlong	arg02, fp
0894c     11 02 06 F1 | 	add	arg02, #17
08950     01 03 CA FA | 	rdbyte	arg02, arg02 wz
08954     10 4E 05 F1 | 	add	fp, #16
08958     A7 02 62 FC | 	wrlong	arg02, fp
0895c     14 4E 85 F1 | 	sub	fp, #20
08960     10 00 90 AD |  if_e	jmp	#LR__1171
08964                 | LR__1170
08964     14 4E 05 F1 | 	add	fp, #20
08968     A7 EA 01 FB | 	rdlong	result1, fp
0896c     14 4E 85 F1 | 	sub	fp, #20
08970     44 07 90 FD | 	jmp	#LR__1193
08974                 | LR__1171
08974     04 4E 05 F1 | 	add	fp, #4
08978     A7 02 02 FB | 	rdlong	arg02, fp
0897c     04 4E 85 F1 | 	sub	fp, #4
08980     10 02 06 F1 | 	add	arg02, #16
08984     01 03 C2 FA | 	rdbyte	arg02, arg02
08988     02 02 CE F7 | 	test	arg02, #2 wz
0898c     07 EA 05 A6 |  if_e	mov	result1, #7
08990     24 07 90 AD |  if_e	jmp	#LR__1193
08994     04 4E 05 F1 | 	add	fp, #4
08998     A7 02 02 FB | 	rdlong	arg02, fp
0899c     01 01 02 F6 | 	mov	arg01, arg02
089a0     14 00 06 F1 | 	add	arg01, #20
089a4     00 01 02 FB | 	rdlong	arg01, arg01
089a8     08 4E 05 F1 | 	add	fp, #8
089ac     A7 EA 01 FB | 	rdlong	result1, fp
089b0     F5 00 02 F1 | 	add	arg01, result1
089b4     0C 4E 85 F1 | 	sub	fp, #12
089b8     14 02 06 F1 | 	add	arg02, #20
089bc     01 EB 01 FB | 	rdlong	result1, arg02
089c0     F5 00 12 F2 | 	cmp	arg01, result1 wc
089c4     24 00 90 3D |  if_ae	jmp	#LR__1172
089c8     04 4E 05 F1 | 	add	fp, #4
089cc     A7 02 02 FB | 	rdlong	arg02, fp
089d0     01 EA 65 F6 | 	neg	result1, #1
089d4     14 02 06 F1 | 	add	arg02, #20
089d8     01 03 02 FB | 	rdlong	arg02, arg02
089dc     01 EB 81 F1 | 	sub	result1, arg02
089e0     08 4E 05 F1 | 	add	fp, #8
089e4     A7 EA 61 FC | 	wrlong	result1, fp
089e8     0C 4E 85 F1 | 	sub	fp, #12
089ec                 | LR__1172
089ec                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
089ec                 | ' 	}
089ec                 | ' 
089ec                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
089ec                 | LR__1173
089ec     0C 4E 05 F1 | 	add	fp, #12
089f0     A7 EA 01 FB | 	rdlong	result1, fp
089f4     0C 4E 85 F1 | 	sub	fp, #12
089f8     01 EA 15 F2 | 	cmp	result1, #1 wc
089fc     90 06 90 CD |  if_b	jmp	#LR__1192
08a00     04 4E 05 F1 | 	add	fp, #4
08a04     A7 EA 01 FB | 	rdlong	result1, fp
08a08     04 4E 85 F1 | 	sub	fp, #4
08a0c     14 EA 05 F1 | 	add	result1, #20
08a10     F5 EA 01 FB | 	rdlong	result1, result1
08a14     FF EB CD F7 | 	test	result1, #511 wz
08a18     D8 04 90 5D |  if_ne	jmp	#LR__1188
08a1c     04 4E 05 F1 | 	add	fp, #4
08a20     A7 EA 01 FB | 	rdlong	result1, fp
08a24     14 EA 05 F1 | 	add	result1, #20
08a28     F5 EA 01 FB | 	rdlong	result1, result1
08a2c     09 EA 45 F0 | 	shr	result1, #9
08a30     14 4E 05 F1 | 	add	fp, #20
08a34     A7 02 02 FB | 	rdlong	arg02, fp
08a38     0A 02 06 F1 | 	add	arg02, #10
08a3c     01 07 E2 FA | 	rdword	arg04, arg02
08a40     03 03 32 F9 | 	getword	arg02, arg04, #0
08a44     01 02 86 F1 | 	sub	arg02, #1
08a48     01 EB 09 F5 | 	and	result1, arg02 wz
08a4c     14 4E 05 F1 | 	add	fp, #20
08a50     A7 EA 61 FC | 	wrlong	result1, fp
08a54     2C 4E 85 F1 | 	sub	fp, #44
08a58     44 01 90 5D |  if_ne	jmp	#LR__1179
08a5c     04 4E 05 F1 | 	add	fp, #4
08a60     A7 EA 01 FB | 	rdlong	result1, fp
08a64     04 4E 85 F1 | 	sub	fp, #4
08a68     14 EA 05 F1 | 	add	result1, #20
08a6c     F5 02 0A FB | 	rdlong	arg02, result1 wz
08a70     44 00 90 5D |  if_ne	jmp	#LR__1174
08a74     04 4E 05 F1 | 	add	fp, #4
08a78     A7 02 02 FB | 	rdlong	arg02, fp
08a7c     08 02 06 F1 | 	add	arg02, #8
08a80     01 03 0A FB | 	rdlong	arg02, arg02 wz
08a84     18 4E 05 F1 | 	add	fp, #24
08a88     A7 02 62 FC | 	wrlong	arg02, fp
08a8c     1C 4E 85 F1 | 	sub	fp, #28
08a90     4C 00 90 5D |  if_ne	jmp	#LR__1175
08a94     04 4E 05 F1 | 	add	fp, #4
08a98     A7 00 02 FB | 	rdlong	arg01, fp
08a9c     04 4E 85 F1 | 	sub	fp, #4
08aa0     00 02 06 F6 | 	mov	arg02, #0
08aa4     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
08aa8     1C 4E 05 F1 | 	add	fp, #28
08aac     A7 EA 61 FC | 	wrlong	result1, fp
08ab0     1C 4E 85 F1 | 	sub	fp, #28
08ab4     28 00 90 FD | 	jmp	#LR__1175
08ab8                 | LR__1174
08ab8     04 4E 05 F1 | 	add	fp, #4
08abc     A7 06 02 FB | 	rdlong	arg04, fp
08ac0     03 01 02 F6 | 	mov	arg01, arg04
08ac4     04 4E 85 F1 | 	sub	fp, #4
08ac8     18 06 06 F1 | 	add	arg04, #24
08acc     03 03 02 FB | 	rdlong	arg02, arg04
08ad0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
08ad4     1C 4E 05 F1 | 	add	fp, #28
08ad8     A7 EA 61 FC | 	wrlong	result1, fp
08adc     1C 4E 85 F1 | 	sub	fp, #28
08ae0                 | LR__1175
08ae0     1C 4E 05 F1 | 	add	fp, #28
08ae4     A7 EA 09 FB | 	rdlong	result1, fp wz
08ae8     1C 4E 85 F1 | 	sub	fp, #28
08aec     A0 05 90 AD |  if_e	jmp	#LR__1192
08af0     1C 4E 05 F1 | 	add	fp, #28
08af4     A7 EA 01 FB | 	rdlong	result1, fp
08af8     1C 4E 85 F1 | 	sub	fp, #28
08afc     01 EA 0D F2 | 	cmp	result1, #1 wz
08b00     1C 00 90 5D |  if_ne	jmp	#LR__1176
08b04     04 4E 05 F1 | 	add	fp, #4
08b08     A7 EA 01 FB | 	rdlong	result1, fp
08b0c     04 4E 85 F1 | 	sub	fp, #4
08b10     11 EA 05 F1 | 	add	result1, #17
08b14     F5 04 48 FC | 	wrbyte	#2, result1
08b18     02 EA 05 F6 | 	mov	result1, #2
08b1c     98 05 90 FD | 	jmp	#LR__1193
08b20                 | LR__1176
08b20     1C 4E 05 F1 | 	add	fp, #28
08b24     A7 EA 01 FB | 	rdlong	result1, fp
08b28     1C 4E 85 F1 | 	sub	fp, #28
08b2c     FF FF 7F FF 
08b30     FF EB 0D F2 | 	cmp	result1, ##-1 wz
08b34     1C 00 90 5D |  if_ne	jmp	#LR__1177
08b38     04 4E 05 F1 | 	add	fp, #4
08b3c     A7 EA 01 FB | 	rdlong	result1, fp
08b40     04 4E 85 F1 | 	sub	fp, #4
08b44     11 EA 05 F1 | 	add	result1, #17
08b48     F5 02 48 FC | 	wrbyte	#1, result1
08b4c     01 EA 05 F6 | 	mov	result1, #1
08b50     64 05 90 FD | 	jmp	#LR__1193
08b54                 | LR__1177
08b54     04 4E 05 F1 | 	add	fp, #4
08b58     A7 EA 01 FB | 	rdlong	result1, fp
08b5c     18 4E 05 F1 | 	add	fp, #24
08b60     A7 06 02 FB | 	rdlong	arg04, fp
08b64     18 EA 05 F1 | 	add	result1, #24
08b68     F5 06 62 FC | 	wrlong	arg04, result1
08b6c     18 4E 85 F1 | 	sub	fp, #24
08b70     A7 EA 01 FB | 	rdlong	result1, fp
08b74     04 4E 85 F1 | 	sub	fp, #4
08b78     08 EA 05 F1 | 	add	result1, #8
08b7c     F5 EA 09 FB | 	rdlong	result1, result1 wz
08b80     1C 00 90 5D |  if_ne	jmp	#LR__1178
08b84     04 4E 05 F1 | 	add	fp, #4
08b88     A7 06 02 FB | 	rdlong	arg04, fp
08b8c     18 4E 05 F1 | 	add	fp, #24
08b90     A7 EA 01 FB | 	rdlong	result1, fp
08b94     1C 4E 85 F1 | 	sub	fp, #28
08b98     08 06 06 F1 | 	add	arg04, #8
08b9c     03 EB 61 FC | 	wrlong	result1, arg04
08ba0                 | LR__1178
08ba0                 | LR__1179
08ba0     04 4E 05 F1 | 	add	fp, #4
08ba4     A7 06 02 FB | 	rdlong	arg04, fp
08ba8     04 4E 85 F1 | 	sub	fp, #4
08bac     10 06 06 F1 | 	add	arg04, #16
08bb0     03 07 C2 FA | 	rdbyte	arg04, arg04
08bb4     80 06 CE F7 | 	test	arg04, #128 wz
08bb8     7C 00 90 AD |  if_e	jmp	#LR__1181
08bbc     18 4E 05 F1 | 	add	fp, #24
08bc0     A7 06 02 FB | 	rdlong	arg04, fp
08bc4     01 06 06 F1 | 	add	arg04, #1
08bc8     03 01 C2 FA | 	rdbyte	arg01, arg04
08bcc     14 4E 85 F1 | 	sub	fp, #20
08bd0     A7 06 02 FB | 	rdlong	arg04, fp
08bd4     03 03 02 F6 | 	mov	arg02, arg04
08bd8     28 02 06 F1 | 	add	arg02, #40
08bdc     04 4E 85 F1 | 	sub	fp, #4
08be0     1C 06 06 F1 | 	add	arg04, #28
08be4     03 05 02 FB | 	rdlong	arg03, arg04
08be8     01 06 06 F6 | 	mov	arg04, #1
08bec     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
08bf0     00 EA 0D F2 | 	cmp	result1, #0 wz
08bf4     1C 00 90 AD |  if_e	jmp	#LR__1180
08bf8     04 4E 05 F1 | 	add	fp, #4
08bfc     A7 EA 01 FB | 	rdlong	result1, fp
08c00     04 4E 85 F1 | 	sub	fp, #4
08c04     11 EA 05 F1 | 	add	result1, #17
08c08     F5 02 48 FC | 	wrbyte	#1, result1
08c0c     01 EA 05 F6 | 	mov	result1, #1
08c10     A4 04 90 FD | 	jmp	#LR__1193
08c14                 | LR__1180
08c14     04 4E 05 F1 | 	add	fp, #4
08c18     A7 06 02 FB | 	rdlong	arg04, fp
08c1c     03 EB 01 F6 | 	mov	result1, arg04
08c20     04 4E 85 F1 | 	sub	fp, #4
08c24     10 06 06 F1 | 	add	arg04, #16
08c28     03 07 C2 FA | 	rdbyte	arg04, arg04
08c2c     7F 06 06 F5 | 	and	arg04, #127
08c30     10 EA 05 F1 | 	add	result1, #16
08c34     F5 06 42 FC | 	wrbyte	arg04, result1
08c38                 | LR__1181
08c38     18 4E 05 F1 | 	add	fp, #24
08c3c     A7 00 02 FB | 	rdlong	arg01, fp
08c40     14 4E 85 F1 | 	sub	fp, #20
08c44     A7 02 02 FB | 	rdlong	arg02, fp
08c48     04 4E 85 F1 | 	sub	fp, #4
08c4c     18 02 06 F1 | 	add	arg02, #24
08c50     01 03 02 FB | 	rdlong	arg02, arg02
08c54     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
08c58     20 4E 05 F1 | 	add	fp, #32
08c5c     A7 EA 61 FC | 	wrlong	result1, fp
08c60     20 4E 85 F1 | 	sub	fp, #32
08c64     00 EA 0D F2 | 	cmp	result1, #0 wz
08c68     1C 00 90 5D |  if_ne	jmp	#LR__1182
08c6c     04 4E 05 F1 | 	add	fp, #4
08c70     A7 EA 01 FB | 	rdlong	result1, fp
08c74     04 4E 85 F1 | 	sub	fp, #4
08c78     11 EA 05 F1 | 	add	result1, #17
08c7c     F5 04 48 FC | 	wrbyte	#2, result1
08c80     02 EA 05 F6 | 	mov	result1, #2
08c84     30 04 90 FD | 	jmp	#LR__1193
08c88                 | LR__1182
08c88     20 4E 05 F1 | 	add	fp, #32
08c8c     A7 EA 01 FB | 	rdlong	result1, fp
08c90     0C 4E 05 F1 | 	add	fp, #12
08c94     A7 0A 02 FB | 	rdlong	local01, fp
08c98     05 EB 01 F1 | 	add	result1, local01
08c9c     0C 4E 85 F1 | 	sub	fp, #12
08ca0     A7 EA 61 FC | 	wrlong	result1, fp
08ca4     14 4E 85 F1 | 	sub	fp, #20
08ca8     A7 EA 01 FB | 	rdlong	result1, fp
08cac     09 EA 45 F0 | 	shr	result1, #9
08cb0     1C 4E 05 F1 | 	add	fp, #28
08cb4     A7 EA 61 FC | 	wrlong	result1, fp
08cb8     28 4E 85 F1 | 	sub	fp, #40
08cbc     01 EA 15 F2 | 	cmp	result1, #1 wc
08cc0     60 01 90 CD |  if_b	jmp	#LR__1186
08cc4     2C 4E 05 F1 | 	add	fp, #44
08cc8     A7 EA 01 FB | 	rdlong	result1, fp
08ccc     04 4E 85 F1 | 	sub	fp, #4
08cd0     A7 06 02 FB | 	rdlong	arg04, fp
08cd4     03 EB 01 F1 | 	add	result1, arg04
08cd8     10 4E 85 F1 | 	sub	fp, #16
08cdc     A7 06 02 FB | 	rdlong	arg04, fp
08ce0     18 4E 85 F1 | 	sub	fp, #24
08ce4     0A 06 06 F1 | 	add	arg04, #10
08ce8     03 07 E2 FA | 	rdword	arg04, arg04
08cec     03 EB 19 F2 | 	cmp	result1, arg04 wcz
08cf0     28 00 90 ED |  if_be	jmp	#LR__1183
08cf4     18 4E 05 F1 | 	add	fp, #24
08cf8     A7 EA 01 FB | 	rdlong	result1, fp
08cfc     0A EA 05 F1 | 	add	result1, #10
08d00     F5 EA E1 FA | 	rdword	result1, result1
08d04     14 4E 05 F1 | 	add	fp, #20
08d08     A7 06 02 FB | 	rdlong	arg04, fp
08d0c     03 EB 81 F1 | 	sub	result1, arg04
08d10     04 4E 85 F1 | 	sub	fp, #4
08d14     A7 EA 61 FC | 	wrlong	result1, fp
08d18     28 4E 85 F1 | 	sub	fp, #40
08d1c                 | LR__1183
08d1c     18 4E 05 F1 | 	add	fp, #24
08d20     A7 06 02 FB | 	rdlong	arg04, fp
08d24     01 06 06 F1 | 	add	arg04, #1
08d28     03 01 C2 FA | 	rdbyte	arg01, arg04
08d2c     18 4E 05 F1 | 	add	fp, #24
08d30     A7 02 02 FB | 	rdlong	arg02, fp
08d34     10 4E 85 F1 | 	sub	fp, #16
08d38     A7 04 02 FB | 	rdlong	arg03, fp
08d3c     08 4E 05 F1 | 	add	fp, #8
08d40     A7 06 02 FB | 	rdlong	arg04, fp
08d44     28 4E 85 F1 | 	sub	fp, #40
08d48     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
08d4c     00 EA 0D F2 | 	cmp	result1, #0 wz
08d50     1C 00 90 AD |  if_e	jmp	#LR__1184
08d54     04 4E 05 F1 | 	add	fp, #4
08d58     A7 0A 02 FB | 	rdlong	local01, fp
08d5c     04 4E 85 F1 | 	sub	fp, #4
08d60     11 0A 06 F1 | 	add	local01, #17
08d64     05 03 48 FC | 	wrbyte	#1, local01
08d68     01 EA 05 F6 | 	mov	result1, #1
08d6c     48 03 90 FD | 	jmp	#LR__1193
08d70                 | LR__1184
08d70     04 4E 05 F1 | 	add	fp, #4
08d74     A7 EA 01 FB | 	rdlong	result1, fp
08d78     1C EA 05 F1 | 	add	result1, #28
08d7c     F5 EA 01 FB | 	rdlong	result1, result1
08d80     1C 4E 05 F1 | 	add	fp, #28
08d84     A7 0C 02 FB | 	rdlong	local02, fp
08d88     06 EB 81 F1 | 	sub	result1, local02
08d8c     08 4E 05 F1 | 	add	fp, #8
08d90     A7 06 02 FB | 	rdlong	arg04, fp
08d94     28 4E 85 F1 | 	sub	fp, #40
08d98     03 EB 11 F2 | 	cmp	result1, arg04 wc
08d9c     68 00 90 3D |  if_ae	jmp	#LR__1185
08da0     04 4E 05 F1 | 	add	fp, #4
08da4     A7 00 02 FB | 	rdlong	arg01, fp
08da8     28 00 06 F1 | 	add	arg01, #40
08dac     2C 4E 05 F1 | 	add	fp, #44
08db0     A7 02 02 FB | 	rdlong	arg02, fp
08db4     2C 4E 85 F1 | 	sub	fp, #44
08db8     A7 EA 01 FB | 	rdlong	result1, fp
08dbc     1C EA 05 F1 | 	add	result1, #28
08dc0     F5 0E 02 FB | 	rdlong	local03, result1
08dc4     1C 4E 05 F1 | 	add	fp, #28
08dc8     A7 06 02 FB | 	rdlong	arg04, fp
08dcc     20 4E 85 F1 | 	sub	fp, #32
08dd0     03 0F 82 F1 | 	sub	local03, arg04
08dd4     09 0E 66 F0 | 	shl	local03, #9
08dd8     07 03 02 F1 | 	add	arg02, local03
08ddc     09 04 C6 F9 | 	decod	arg03, #9
08de0     F4 7E BF FD | 	call	#__system____builtin_memmove
08de4     04 4E 05 F1 | 	add	fp, #4
08de8     A7 06 02 FB | 	rdlong	arg04, fp
08dec     03 EB 01 F6 | 	mov	result1, arg04
08df0     04 4E 85 F1 | 	sub	fp, #4
08df4     10 06 06 F1 | 	add	arg04, #16
08df8     03 07 C2 FA | 	rdbyte	arg04, arg04
08dfc     7F 06 06 F5 | 	and	arg04, #127
08e00     10 EA 05 F1 | 	add	result1, #16
08e04     F5 06 42 FC | 	wrbyte	arg04, result1
08e08                 | LR__1185
08e08     28 4E 05 F1 | 	add	fp, #40
08e0c     A7 EA 01 FB | 	rdlong	result1, fp
08e10     09 EA 65 F0 | 	shl	result1, #9
08e14     04 4E 85 F1 | 	sub	fp, #4
08e18     A7 EA 61 FC | 	wrlong	result1, fp
08e1c     24 4E 85 F1 | 	sub	fp, #36
08e20                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
08e20                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
08e20                 | ' 				}
08e20                 | ' 
08e20                 | ' 
08e20                 | ' 				wcnt =  ((UINT) 512 )  * cc;
08e20                 | ' 				continue;
08e20     74 01 90 FD | 	jmp	#LR__1189
08e24                 | LR__1186
08e24     04 4E 05 F1 | 	add	fp, #4
08e28     A7 0C 02 FB | 	rdlong	local02, fp
08e2c     1C 0C 06 F1 | 	add	local02, #28
08e30     06 EB 01 FB | 	rdlong	result1, local02
08e34     1C 4E 05 F1 | 	add	fp, #28
08e38     A7 0C 02 FB | 	rdlong	local02, fp
08e3c     20 4E 85 F1 | 	sub	fp, #32
08e40     06 EB 09 F2 | 	cmp	result1, local02 wz
08e44     90 00 90 AD |  if_e	jmp	#LR__1187
08e48     04 4E 05 F1 | 	add	fp, #4
08e4c     A7 EA 01 FB | 	rdlong	result1, fp
08e50     F5 0E 02 F6 | 	mov	local03, result1
08e54     04 4E 85 F1 | 	sub	fp, #4
08e58     14 0E 06 F1 | 	add	local03, #20
08e5c     07 0F 02 FB | 	rdlong	local03, local03
08e60     0C EA 05 F1 | 	add	result1, #12
08e64     F5 10 02 FB | 	rdlong	local04, result1
08e68     08 13 02 F6 | 	mov	local05, local04
08e6c     09 0F 12 F2 | 	cmp	local03, local05 wc
08e70     64 00 90 3D |  if_ae	jmp	#LR__1187
08e74     18 4E 05 F1 | 	add	fp, #24
08e78     A7 06 02 FB | 	rdlong	arg04, fp
08e7c     01 06 06 F1 | 	add	arg04, #1
08e80     03 01 C2 FA | 	rdbyte	arg01, arg04
08e84     14 4E 85 F1 | 	sub	fp, #20
08e88     A7 14 02 FB | 	rdlong	local06, fp
08e8c     28 14 06 F1 | 	add	local06, #40
08e90     0A 17 02 F6 | 	mov	local07, local06
08e94     1C 4E 05 F1 | 	add	fp, #28
08e98     A7 18 02 FB | 	rdlong	local08, fp
08e9c     20 4E 85 F1 | 	sub	fp, #32
08ea0     01 1A 06 F6 | 	mov	local09, #1
08ea4     0B 03 02 F6 | 	mov	arg02, local07
08ea8     0C 05 02 F6 | 	mov	arg03, local08
08eac     01 06 06 F6 | 	mov	arg04, #1
08eb0     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
08eb4     F5 1C 0A F6 | 	mov	local10, result1 wz
08eb8     1C 00 90 AD |  if_e	jmp	#LR__1187
08ebc     04 4E 05 F1 | 	add	fp, #4
08ec0     A7 1C 02 FB | 	rdlong	local10, fp
08ec4     04 4E 85 F1 | 	sub	fp, #4
08ec8     11 1C 06 F1 | 	add	local10, #17
08ecc     0E 03 48 FC | 	wrbyte	#1, local10
08ed0                 | ' 				fp->fptr < fp->obj.objsize &&
08ed0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
08ed0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
08ed0     01 EA 05 F6 | 	mov	result1, #1
08ed4     E0 01 90 FD | 	jmp	#LR__1193
08ed8                 | LR__1187
08ed8     04 4E 05 F1 | 	add	fp, #4
08edc     A7 06 02 FB | 	rdlong	arg04, fp
08ee0     1C 4E 05 F1 | 	add	fp, #28
08ee4     A7 EA 01 FB | 	rdlong	result1, fp
08ee8     20 4E 85 F1 | 	sub	fp, #32
08eec     1C 06 06 F1 | 	add	arg04, #28
08ef0     03 EB 61 FC | 	wrlong	result1, arg04
08ef4                 | LR__1188
08ef4     04 4E 05 F1 | 	add	fp, #4
08ef8     A7 EA 01 FB | 	rdlong	result1, fp
08efc     14 EA 05 F1 | 	add	result1, #20
08f00     F5 EA 01 FB | 	rdlong	result1, result1
08f04     FF EB 05 F5 | 	and	result1, #511
08f08     09 1E C6 F9 | 	decod	local11, #9
08f0c     F5 1E 82 F1 | 	sub	local11, result1
08f10     20 4E 05 F1 | 	add	fp, #32
08f14     A7 1E 62 FC | 	wrlong	local11, fp
08f18     18 4E 85 F1 | 	sub	fp, #24
08f1c     A7 EA 01 FB | 	rdlong	result1, fp
08f20     0C 4E 85 F1 | 	sub	fp, #12
08f24     F5 1E 1A F2 | 	cmp	local11, result1 wcz
08f28     0C 4E 05 11 |  if_a	add	fp, #12
08f2c     A7 1E 02 1B |  if_a	rdlong	local11, fp
08f30     18 4E 05 11 |  if_a	add	fp, #24
08f34     A7 1E 62 1C |  if_a	wrlong	local11, fp
08f38     24 4E 85 11 |  if_a	sub	fp, #36
08f3c     04 4E 05 F1 | 	add	fp, #4
08f40     A7 1E 02 FB | 	rdlong	local11, fp
08f44     0F 01 02 F6 | 	mov	arg01, local11
08f48     28 00 06 F1 | 	add	arg01, #40
08f4c     14 1E 06 F1 | 	add	local11, #20
08f50     0F 1F 02 FB | 	rdlong	local11, local11
08f54     FF 1F 06 F5 | 	and	local11, #511
08f58     0F 01 02 F1 | 	add	arg01, local11
08f5c     2C 4E 05 F1 | 	add	fp, #44
08f60     A7 02 02 FB | 	rdlong	arg02, fp
08f64     0C 4E 85 F1 | 	sub	fp, #12
08f68     A7 04 02 FB | 	rdlong	arg03, fp
08f6c     24 4E 85 F1 | 	sub	fp, #36
08f70     64 7D BF FD | 	call	#__system____builtin_memmove
08f74     04 4E 05 F1 | 	add	fp, #4
08f78     A7 EA 01 FB | 	rdlong	result1, fp
08f7c     F5 1E 02 F6 | 	mov	local11, result1
08f80     04 4E 85 F1 | 	sub	fp, #4
08f84     10 EA 05 F1 | 	add	result1, #16
08f88     F5 EA C1 FA | 	rdbyte	result1, result1
08f8c     80 EA 45 F5 | 	or	result1, #128
08f90     10 1E 06 F1 | 	add	local11, #16
08f94     0F EB 41 FC | 	wrbyte	result1, local11
08f98                 | LR__1189
08f98     0C 4E 05 F1 | 	add	fp, #12
08f9c     A7 1E 02 FB | 	rdlong	local11, fp
08fa0     18 4E 05 F1 | 	add	fp, #24
08fa4     A7 EA 01 FB | 	rdlong	result1, fp
08fa8     F5 1E 82 F1 | 	sub	local11, result1
08fac     18 4E 85 F1 | 	sub	fp, #24
08fb0     A7 1E 62 FC | 	wrlong	local11, fp
08fb4     04 4E 05 F1 | 	add	fp, #4
08fb8     A7 20 02 FB | 	rdlong	local12, fp
08fbc     10 1F 02 FB | 	rdlong	local11, local12
08fc0     14 4E 05 F1 | 	add	fp, #20
08fc4     A7 22 02 FB | 	rdlong	local13, fp
08fc8     11 1F 02 F1 | 	add	local11, local13
08fcc     10 1F 62 FC | 	wrlong	local11, local12
08fd0     0C 4E 05 F1 | 	add	fp, #12
08fd4     A7 1E 02 FB | 	rdlong	local11, fp
08fd8     0C 4E 85 F1 | 	sub	fp, #12
08fdc     A7 24 02 FB | 	rdlong	local14, fp
08fe0     12 1F 02 F1 | 	add	local11, local14
08fe4     0C 4E 05 F1 | 	add	fp, #12
08fe8     A7 1E 62 FC | 	wrlong	local11, fp
08fec     2C 4E 85 F1 | 	sub	fp, #44
08ff0     A7 26 02 FB | 	rdlong	local15, fp
08ff4     13 1F 02 F6 | 	mov	local11, local15
08ff8     14 26 06 F1 | 	add	local15, #20
08ffc     13 27 02 FB | 	rdlong	local15, local15
09000     20 4E 05 F1 | 	add	fp, #32
09004     A7 28 02 FB | 	rdlong	local16, fp
09008     14 27 02 F1 | 	add	local15, local16
0900c     14 1E 06 F1 | 	add	local11, #20
09010     0F 27 62 FC | 	wrlong	local15, local11
09014     20 4E 85 F1 | 	sub	fp, #32
09018     A7 2A 02 FB | 	rdlong	local17, fp
0901c     15 1F 02 F6 | 	mov	local11, local17
09020     15 2D 02 F6 | 	mov	local18, local17
09024     04 4E 85 F1 | 	sub	fp, #4
09028     14 2A 06 F1 | 	add	local17, #20
0902c     15 2F 02 FB | 	rdlong	local19, local17
09030     0C 2C 06 F1 | 	add	local18, #12
09034     16 31 02 FB | 	rdlong	local20, local18
09038     18 2F 1A F2 | 	cmp	local19, local20 wcz
0903c     24 00 90 ED |  if_be	jmp	#LR__1190
09040     04 4E 05 F1 | 	add	fp, #4
09044     A7 12 02 FB | 	rdlong	local05, fp
09048     04 4E 85 F1 | 	sub	fp, #4
0904c     09 0F 02 F6 | 	mov	local03, local05
09050     14 0E 06 F1 | 	add	local03, #20
09054     07 11 02 FB | 	rdlong	local04, local03
09058     14 0E 86 F1 | 	sub	local03, #20
0905c     08 33 02 F6 | 	mov	local21, local04
09060     20 00 90 FD | 	jmp	#LR__1191
09064                 | LR__1190
09064     04 4E 05 F1 | 	add	fp, #4
09068     A7 16 02 FB | 	rdlong	local07, fp
0906c     04 4E 85 F1 | 	sub	fp, #4
09070     0B 1D 02 F6 | 	mov	local10, local07
09074     0C 1C 06 F1 | 	add	local10, #12
09078     0E 19 02 FB | 	rdlong	local08, local10
0907c     0C 1C 86 F1 | 	sub	local10, #12
09080     0C 33 02 F6 | 	mov	local21, local08
09084                 | LR__1191
09084     0C 1E 06 F1 | 	add	local11, #12
09088     0F 33 62 FC | 	wrlong	local21, local11
0908c     5C F9 9F FD | 	jmp	#LR__1173
09090                 | LR__1192
09090     04 4E 05 F1 | 	add	fp, #4
09094     A7 20 02 FB | 	rdlong	local12, fp
09098     10 0B 02 F6 | 	mov	local01, local12
0909c     04 4E 85 F1 | 	sub	fp, #4
090a0     10 20 06 F1 | 	add	local12, #16
090a4     10 1F C2 FA | 	rdbyte	local11, local12
090a8     40 1E 46 F5 | 	or	local11, #64
090ac     10 0A 06 F1 | 	add	local01, #16
090b0     05 1F 42 FC | 	wrbyte	local11, local01
090b4                 | ' 
090b4                 | ' 
090b4                 | ' 
090b4                 | ' 
090b4                 | ' 
090b4                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
090b4                 | ' 		fp->flag |=  0x80 ;
090b4                 | ' 
090b4                 | ' 	}
090b4                 | ' 
090b4                 | ' 	fp->flag |=  0x40 ;
090b4                 | ' 
090b4                 | ' 	return FR_OK ;
090b4     00 EA 05 F6 | 	mov	result1, #0
090b8                 | LR__1193
090b8     A7 F0 03 F6 | 	mov	ptra, fp
090bc     B2 00 A0 FD | 	call	#popregs_
090c0                 | _fatfs_cc_f_write_ret
090c0     2D 00 64 FD | 	ret
090c4                 | 
090c4                 | _fatfs_cc_f_sync
090c4     00 4A 05 F6 | 	mov	COUNT_, #0
090c8     A8 00 A0 FD | 	call	#pushregs_
090cc     18 F0 07 F1 | 	add	ptra, #24
090d0     04 4E 05 F1 | 	add	fp, #4
090d4     A7 00 62 FC | 	wrlong	arg01, fp
090d8     08 4E 05 F1 | 	add	fp, #8
090dc     A7 02 02 F6 | 	mov	arg02, fp
090e0     0C 4E 85 F1 | 	sub	fp, #12
090e4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
090e8     08 4E 05 F1 | 	add	fp, #8
090ec     A7 EA 61 FC | 	wrlong	result1, fp
090f0     08 4E 85 F1 | 	sub	fp, #8
090f4     00 EA 0D F2 | 	cmp	result1, #0 wz
090f8     C0 01 90 5D |  if_ne	jmp	#LR__1203
090fc     04 4E 05 F1 | 	add	fp, #4
09100     A7 06 02 FB | 	rdlong	arg04, fp
09104     04 4E 85 F1 | 	sub	fp, #4
09108     10 06 06 F1 | 	add	arg04, #16
0910c     03 07 C2 FA | 	rdbyte	arg04, arg04
09110     40 06 CE F7 | 	test	arg04, #64 wz
09114     A4 01 90 AD |  if_e	jmp	#LR__1202
09118     04 4E 05 F1 | 	add	fp, #4
0911c     A7 06 02 FB | 	rdlong	arg04, fp
09120     04 4E 85 F1 | 	sub	fp, #4
09124     10 06 06 F1 | 	add	arg04, #16
09128     03 07 C2 FA | 	rdbyte	arg04, arg04
0912c     80 06 CE F7 | 	test	arg04, #128 wz
09130     64 00 90 AD |  if_e	jmp	#LR__1200
09134     0C 4E 05 F1 | 	add	fp, #12
09138     A7 06 02 FB | 	rdlong	arg04, fp
0913c     01 06 06 F1 | 	add	arg04, #1
09140     03 01 C2 FA | 	rdbyte	arg01, arg04
09144     08 4E 85 F1 | 	sub	fp, #8
09148     A7 06 02 FB | 	rdlong	arg04, fp
0914c     03 03 02 F6 | 	mov	arg02, arg04
09150     28 02 06 F1 | 	add	arg02, #40
09154     04 4E 85 F1 | 	sub	fp, #4
09158     1C 06 06 F1 | 	add	arg04, #28
0915c     03 05 02 FB | 	rdlong	arg03, arg04
09160     01 06 06 F6 | 	mov	arg04, #1
09164     0C AE BF FD | 	call	#_fatfs_cc_disk_write
09168     00 EA 0D F2 | 	cmp	result1, #0 wz
0916c     01 EA 05 56 |  if_ne	mov	result1, #1
09170     54 01 90 5D |  if_ne	jmp	#LR__1204
09174     04 4E 05 F1 | 	add	fp, #4
09178     A7 06 02 FB | 	rdlong	arg04, fp
0917c     03 05 02 F6 | 	mov	arg03, arg04
09180     04 4E 85 F1 | 	sub	fp, #4
09184     10 06 06 F1 | 	add	arg04, #16
09188     03 07 C2 FA | 	rdbyte	arg04, arg04
0918c     7F 06 06 F5 | 	and	arg04, #127
09190     10 04 06 F1 | 	add	arg03, #16
09194     02 07 42 FC | 	wrbyte	arg04, arg03
09198                 | LR__1200
09198     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
0919c     10 4E 05 F1 | 	add	fp, #16
091a0     A7 EA 61 FC | 	wrlong	result1, fp
091a4     04 4E 85 F1 | 	sub	fp, #4
091a8     A7 00 02 FB | 	rdlong	arg01, fp
091ac     08 4E 85 F1 | 	sub	fp, #8
091b0     A7 06 02 FB | 	rdlong	arg04, fp
091b4     04 4E 85 F1 | 	sub	fp, #4
091b8     20 06 06 F1 | 	add	arg04, #32
091bc     03 03 02 FB | 	rdlong	arg02, arg04
091c0     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
091c4     08 4E 05 F1 | 	add	fp, #8
091c8     A7 EA 61 FC | 	wrlong	result1, fp
091cc     08 4E 85 F1 | 	sub	fp, #8
091d0     00 EA 0D F2 | 	cmp	result1, #0 wz
091d4     E4 00 90 5D |  if_ne	jmp	#LR__1201
091d8     04 4E 05 F1 | 	add	fp, #4
091dc     A7 06 02 FB | 	rdlong	arg04, fp
091e0     24 06 06 F1 | 	add	arg04, #36
091e4     03 07 02 FB | 	rdlong	arg04, arg04
091e8     10 4E 05 F1 | 	add	fp, #16
091ec     A7 06 62 FC | 	wrlong	arg04, fp
091f0     03 05 02 F6 | 	mov	arg03, arg04
091f4     0B 04 06 F1 | 	add	arg03, #11
091f8     02 05 C2 FA | 	rdbyte	arg03, arg03
091fc     20 04 46 F5 | 	or	arg03, #32
09200     0B 06 06 F1 | 	add	arg04, #11
09204     03 05 42 FC | 	wrbyte	arg03, arg04
09208     10 4E 85 F1 | 	sub	fp, #16
0920c     A7 06 02 FB | 	rdlong	arg04, fp
09210     03 01 02 FB | 	rdlong	arg01, arg04
09214     10 4E 05 F1 | 	add	fp, #16
09218     A7 02 02 FB | 	rdlong	arg02, fp
0921c     14 4E 85 F1 | 	sub	fp, #20
09220     08 06 06 F1 | 	add	arg04, #8
09224     03 05 02 FB | 	rdlong	arg03, arg04
09228     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
0922c     14 4E 05 F1 | 	add	fp, #20
09230     A7 00 02 FB | 	rdlong	arg01, fp
09234     1C 00 06 F1 | 	add	arg01, #28
09238     10 4E 85 F1 | 	sub	fp, #16
0923c     A7 06 02 FB | 	rdlong	arg04, fp
09240     0C 06 06 F1 | 	add	arg04, #12
09244     03 03 02 FB | 	rdlong	arg02, arg04
09248     00 03 62 FC | 	wrlong	arg02, arg01
0924c     10 4E 05 F1 | 	add	fp, #16
09250     A7 00 02 FB | 	rdlong	arg01, fp
09254     16 00 06 F1 | 	add	arg01, #22
09258     04 4E 85 F1 | 	sub	fp, #4
0925c     A7 02 02 FB | 	rdlong	arg02, fp
09260     00 03 62 FC | 	wrlong	arg02, arg01
09264     04 4E 05 F1 | 	add	fp, #4
09268     A7 00 02 FB | 	rdlong	arg01, fp
0926c     12 00 06 F1 | 	add	arg01, #18
09270     00 01 58 FC | 	wrword	#0, arg01
09274     08 4E 85 F1 | 	sub	fp, #8
09278     A7 06 02 FB | 	rdlong	arg04, fp
0927c     03 06 06 F1 | 	add	arg04, #3
09280     03 03 48 FC | 	wrbyte	#1, arg04
09284     A7 00 02 FB | 	rdlong	arg01, fp
09288     0C 4E 85 F1 | 	sub	fp, #12
0928c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
09290     08 4E 05 F1 | 	add	fp, #8
09294     A7 EA 61 FC | 	wrlong	result1, fp
09298     04 4E 85 F1 | 	sub	fp, #4
0929c     A7 06 02 FB | 	rdlong	arg04, fp
092a0     03 05 02 F6 | 	mov	arg03, arg04
092a4     04 4E 85 F1 | 	sub	fp, #4
092a8     10 06 06 F1 | 	add	arg04, #16
092ac     03 07 C2 FA | 	rdbyte	arg04, arg04
092b0     BF 06 06 F5 | 	and	arg04, #191
092b4     10 04 06 F1 | 	add	arg03, #16
092b8     02 07 42 FC | 	wrbyte	arg04, arg03
092bc                 | LR__1201
092bc                 | LR__1202
092bc                 | LR__1203
092bc                 | ' 					dir = fp->dir_ptr;
092bc                 | ' 					dir[ 11 ] |=  0x20 ;
092bc                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
092bc                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
092bc                 | ' 					st_dword(dir +  22 , tm);
092bc                 | ' 					st_word(dir +  18 , 0);
092bc                 | ' 					fs->wflag = 1;
092bc                 | ' 					res = sync_fs(fs);
092bc                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
092bc                 | ' 				}
092bc                 | ' 			}
092bc                 | ' 		}
092bc                 | ' 	}
092bc                 | ' 
092bc                 | ' 	return res ;
092bc     08 4E 05 F1 | 	add	fp, #8
092c0     A7 EA 01 FB | 	rdlong	result1, fp
092c4     08 4E 85 F1 | 	sub	fp, #8
092c8                 | LR__1204
092c8     A7 F0 03 F6 | 	mov	ptra, fp
092cc     B2 00 A0 FD | 	call	#popregs_
092d0                 | _fatfs_cc_f_sync_ret
092d0     2D 00 64 FD | 	ret
092d4                 | 
092d4                 | _fatfs_cc_f_close
092d4     01 4A 05 F6 | 	mov	COUNT_, #1
092d8     A8 00 A0 FD | 	call	#pushregs_
092dc     10 F0 07 F1 | 	add	ptra, #16
092e0     04 4E 05 F1 | 	add	fp, #4
092e4     A7 00 62 FC | 	wrlong	arg01, fp
092e8     04 4E 85 F1 | 	sub	fp, #4
092ec     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
092f0     08 4E 05 F1 | 	add	fp, #8
092f4     A7 EA 61 FC | 	wrlong	result1, fp
092f8     08 4E 85 F1 | 	sub	fp, #8
092fc     00 EA 0D F2 | 	cmp	result1, #0 wz
09300     38 00 90 5D |  if_ne	jmp	#LR__1210
09304     04 4E 05 F1 | 	add	fp, #4
09308     A7 00 02 FB | 	rdlong	arg01, fp
0930c     08 4E 05 F1 | 	add	fp, #8
09310     A7 02 02 F6 | 	mov	arg02, fp
09314     0C 4E 85 F1 | 	sub	fp, #12
09318     9C E6 BF FD | 	call	#_fatfs_cc_validate
0931c     08 4E 05 F1 | 	add	fp, #8
09320     A7 EA 61 FC | 	wrlong	result1, fp
09324     08 4E 85 F1 | 	sub	fp, #8
09328     00 EA 0D F2 | 	cmp	result1, #0 wz
0932c     04 4E 05 A1 |  if_e	add	fp, #4
09330     A7 0A 02 AB |  if_e	rdlong	local01, fp
09334     04 4E 85 A1 |  if_e	sub	fp, #4
09338     05 01 68 AC |  if_e	wrlong	#0, local01
0933c                 | LR__1210
0933c                 | ' 
0933c                 | ' 
0933c                 | ' 
0933c                 | ' 
0933c                 | ' 			fp->obj.fs = 0;
0933c                 | ' #line 4192 "ff.c"
0933c                 | ' 		}
0933c                 | ' 	}
0933c                 | ' 	return res;
0933c     08 4E 05 F1 | 	add	fp, #8
09340     A7 EA 01 FB | 	rdlong	result1, fp
09344     08 4E 85 F1 | 	sub	fp, #8
09348     A7 F0 03 F6 | 	mov	ptra, fp
0934c     B2 00 A0 FD | 	call	#popregs_
09350                 | _fatfs_cc_f_close_ret
09350     2D 00 64 FD | 	ret
09354                 | 
09354                 | _fatfs_cc_f_lseek
09354     00 4A 05 F6 | 	mov	COUNT_, #0
09358     A8 00 A0 FD | 	call	#pushregs_
0935c     24 F0 07 F1 | 	add	ptra, #36
09360     04 4E 05 F1 | 	add	fp, #4
09364     A7 00 62 FC | 	wrlong	arg01, fp
09368     04 4E 05 F1 | 	add	fp, #4
0936c     A7 02 62 FC | 	wrlong	arg02, fp
09370     04 4E 85 F1 | 	sub	fp, #4
09374     A7 00 02 FB | 	rdlong	arg01, fp
09378     0C 4E 05 F1 | 	add	fp, #12
0937c     A7 02 02 F6 | 	mov	arg02, fp
09380     10 4E 85 F1 | 	sub	fp, #16
09384     30 E6 BF FD | 	call	#_fatfs_cc_validate
09388     0C 4E 05 F1 | 	add	fp, #12
0938c     A7 EA 61 FC | 	wrlong	result1, fp
09390     0C 4E 85 F1 | 	sub	fp, #12
09394     00 EA 0D F2 | 	cmp	result1, #0 wz
09398     1C 00 90 5D |  if_ne	jmp	#LR__1220
0939c     04 4E 05 F1 | 	add	fp, #4
093a0     A7 06 02 FB | 	rdlong	arg04, fp
093a4     11 06 06 F1 | 	add	arg04, #17
093a8     03 07 C2 FA | 	rdbyte	arg04, arg04
093ac     08 4E 05 F1 | 	add	fp, #8
093b0     A7 06 62 FC | 	wrlong	arg04, fp
093b4     0C 4E 85 F1 | 	sub	fp, #12
093b8                 | LR__1220
093b8     0C 4E 05 F1 | 	add	fp, #12
093bc     A7 06 0A FB | 	rdlong	arg04, fp wz
093c0     0C 4E 85 F1 | 	sub	fp, #12
093c4     0C 4E 05 51 |  if_ne	add	fp, #12
093c8     A7 EA 01 5B |  if_ne	rdlong	result1, fp
093cc     0C 4E 85 51 |  if_ne	sub	fp, #12
093d0     40 06 90 5D |  if_ne	jmp	#LR__1243
093d4     04 4E 05 F1 | 	add	fp, #4
093d8     A7 06 02 FB | 	rdlong	arg04, fp
093dc     04 4E 05 F1 | 	add	fp, #4
093e0     A7 04 02 FB | 	rdlong	arg03, fp
093e4     08 4E 85 F1 | 	sub	fp, #8
093e8     0C 06 06 F1 | 	add	arg04, #12
093ec     03 07 02 FB | 	rdlong	arg04, arg04
093f0     03 05 1A F2 | 	cmp	arg03, arg04 wcz
093f4     3C 00 90 ED |  if_be	jmp	#LR__1221
093f8     04 4E 05 F1 | 	add	fp, #4
093fc     A7 04 02 FB | 	rdlong	arg03, fp
09400     04 4E 85 F1 | 	sub	fp, #4
09404     10 04 06 F1 | 	add	arg03, #16
09408     02 05 C2 FA | 	rdbyte	arg03, arg03
0940c     02 05 E2 F8 | 	getbyte	arg03, arg03, #0
09410     02 04 CE F7 | 	test	arg03, #2 wz
09414     1C 00 90 5D |  if_ne	jmp	#LR__1221
09418     04 4E 05 F1 | 	add	fp, #4
0941c     A7 04 02 FB | 	rdlong	arg03, fp
09420     0C 04 06 F1 | 	add	arg03, #12
09424     02 05 02 FB | 	rdlong	arg03, arg03
09428     04 4E 05 F1 | 	add	fp, #4
0942c     A7 04 62 FC | 	wrlong	arg03, fp
09430     08 4E 85 F1 | 	sub	fp, #8
09434                 | LR__1221
09434     04 4E 05 F1 | 	add	fp, #4
09438     A7 04 02 FB | 	rdlong	arg03, fp
0943c     14 04 06 F1 | 	add	arg03, #20
09440     02 05 02 FB | 	rdlong	arg03, arg03
09444     1C 4E 05 F1 | 	add	fp, #28
09448     A7 04 62 FC | 	wrlong	arg03, fp
0944c     1C 4E 85 F1 | 	sub	fp, #28
09450     A7 04 02 FB | 	rdlong	arg03, fp
09454     18 4E 05 F1 | 	add	fp, #24
09458     A7 00 68 FC | 	wrlong	#0, fp
0945c     14 04 06 F1 | 	add	arg03, #20
09460     02 01 68 FC | 	wrlong	#0, arg03
09464     14 4E 85 F1 | 	sub	fp, #20
09468     A7 04 02 FB | 	rdlong	arg03, fp
0946c     08 4E 85 F1 | 	sub	fp, #8
09470     01 04 16 F2 | 	cmp	arg03, #1 wc
09474     E4 03 90 CD |  if_b	jmp	#LR__1237
09478     10 4E 05 F1 | 	add	fp, #16
0947c     A7 04 02 FB | 	rdlong	arg03, fp
09480     0A 04 06 F1 | 	add	arg03, #10
09484     02 07 E2 FA | 	rdword	arg04, arg03
09488     09 06 66 F0 | 	shl	arg04, #9
0948c     08 4E 05 F1 | 	add	fp, #8
09490     A7 06 62 FC | 	wrlong	arg04, fp
09494     08 4E 05 F1 | 	add	fp, #8
09498     A7 06 02 FB | 	rdlong	arg04, fp
0949c     20 4E 85 F1 | 	sub	fp, #32
094a0     01 06 16 F2 | 	cmp	arg04, #1 wc
094a4     AC 00 90 CD |  if_b	jmp	#LR__1222
094a8     08 4E 05 F1 | 	add	fp, #8
094ac     A7 06 02 FB | 	rdlong	arg04, fp
094b0     01 06 86 F1 | 	sub	arg04, #1
094b4     10 4E 05 F1 | 	add	fp, #16
094b8     A7 04 02 FB | 	rdlong	arg03, fp
094bc     02 07 12 FD | 	qdiv	arg04, arg03
094c0     08 4E 05 F1 | 	add	fp, #8
094c4     A7 EA 01 FB | 	rdlong	result1, fp
094c8     01 EA 85 F1 | 	sub	result1, #1
094cc     18 06 62 FD | 	getqx	arg04
094d0     02 EB 11 FD | 	qdiv	result1, arg03
094d4     20 4E 85 F1 | 	sub	fp, #32
094d8     18 04 62 FD | 	getqx	arg03
094dc     02 07 12 F2 | 	cmp	arg04, arg03 wc
094e0     70 00 90 CD |  if_b	jmp	#LR__1222
094e4     04 4E 05 F1 | 	add	fp, #4
094e8     A7 04 02 FB | 	rdlong	arg03, fp
094ec     1C 4E 05 F1 | 	add	fp, #28
094f0     A7 EA 01 FB | 	rdlong	result1, fp
094f4     01 EA 85 F1 | 	sub	result1, #1
094f8     08 4E 85 F1 | 	sub	fp, #8
094fc     A7 06 02 FB | 	rdlong	arg04, fp
09500     01 06 86 F1 | 	sub	arg04, #1
09504     03 EB 21 F5 | 	andn	result1, arg04
09508     14 04 06 F1 | 	add	arg03, #20
0950c     02 EB 61 FC | 	wrlong	result1, arg03
09510     10 4E 85 F1 | 	sub	fp, #16
09514     A7 04 02 FB | 	rdlong	arg03, fp
09518     04 4E 85 F1 | 	sub	fp, #4
0951c     A7 06 02 FB | 	rdlong	arg04, fp
09520     14 06 06 F1 | 	add	arg04, #20
09524     03 07 02 FB | 	rdlong	arg04, arg04
09528     03 05 82 F1 | 	sub	arg03, arg04
0952c     04 4E 05 F1 | 	add	fp, #4
09530     A7 04 62 FC | 	wrlong	arg03, fp
09534     04 4E 85 F1 | 	sub	fp, #4
09538     A7 04 02 FB | 	rdlong	arg03, fp
0953c     18 04 06 F1 | 	add	arg03, #24
09540     02 05 02 FB | 	rdlong	arg03, arg03
09544     10 4E 05 F1 | 	add	fp, #16
09548     A7 04 62 FC | 	wrlong	arg03, fp
0954c     14 4E 85 F1 | 	sub	fp, #20
09550     D0 00 90 FD | 	jmp	#LR__1226
09554                 | LR__1222
09554     04 4E 05 F1 | 	add	fp, #4
09558     A7 04 02 FB | 	rdlong	arg03, fp
0955c     08 04 06 F1 | 	add	arg03, #8
09560     02 05 0A FB | 	rdlong	arg03, arg03 wz
09564     10 4E 05 F1 | 	add	fp, #16
09568     A7 04 62 FC | 	wrlong	arg03, fp
0956c     14 4E 85 F1 | 	sub	fp, #20
09570     94 00 90 5D |  if_ne	jmp	#LR__1225
09574     04 4E 05 F1 | 	add	fp, #4
09578     A7 00 02 FB | 	rdlong	arg01, fp
0957c     04 4E 85 F1 | 	sub	fp, #4
09580     00 02 06 F6 | 	mov	arg02, #0
09584     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
09588     14 4E 05 F1 | 	add	fp, #20
0958c     A7 EA 61 FC | 	wrlong	result1, fp
09590     14 4E 85 F1 | 	sub	fp, #20
09594     01 EA 0D F2 | 	cmp	result1, #1 wz
09598     1C 00 90 5D |  if_ne	jmp	#LR__1223
0959c     04 4E 05 F1 | 	add	fp, #4
095a0     A7 04 02 FB | 	rdlong	arg03, fp
095a4     04 4E 85 F1 | 	sub	fp, #4
095a8     11 04 06 F1 | 	add	arg03, #17
095ac     02 05 48 FC | 	wrbyte	#2, arg03
095b0     02 EA 05 F6 | 	mov	result1, #2
095b4     5C 04 90 FD | 	jmp	#LR__1243
095b8                 | LR__1223
095b8     14 4E 05 F1 | 	add	fp, #20
095bc     A7 EA 01 FB | 	rdlong	result1, fp
095c0     14 4E 85 F1 | 	sub	fp, #20
095c4     FF FF 7F FF 
095c8     FF EB 0D F2 | 	cmp	result1, ##-1 wz
095cc     1C 00 90 5D |  if_ne	jmp	#LR__1224
095d0     04 4E 05 F1 | 	add	fp, #4
095d4     A7 04 02 FB | 	rdlong	arg03, fp
095d8     04 4E 85 F1 | 	sub	fp, #4
095dc     11 04 06 F1 | 	add	arg03, #17
095e0     02 03 48 FC | 	wrbyte	#1, arg03
095e4     01 EA 05 F6 | 	mov	result1, #1
095e8     28 04 90 FD | 	jmp	#LR__1243
095ec                 | LR__1224
095ec     04 4E 05 F1 | 	add	fp, #4
095f0     A7 04 02 FB | 	rdlong	arg03, fp
095f4     10 4E 05 F1 | 	add	fp, #16
095f8     A7 06 02 FB | 	rdlong	arg04, fp
095fc     14 4E 85 F1 | 	sub	fp, #20
09600     08 04 06 F1 | 	add	arg03, #8
09604     02 07 62 FC | 	wrlong	arg04, arg03
09608                 | LR__1225
09608     04 4E 05 F1 | 	add	fp, #4
0960c     A7 04 02 FB | 	rdlong	arg03, fp
09610     10 4E 05 F1 | 	add	fp, #16
09614     A7 06 02 FB | 	rdlong	arg04, fp
09618     14 4E 85 F1 | 	sub	fp, #20
0961c     18 04 06 F1 | 	add	arg03, #24
09620     02 07 62 FC | 	wrlong	arg04, arg03
09624                 | LR__1226
09624     14 4E 05 F1 | 	add	fp, #20
09628     A7 04 0A FB | 	rdlong	arg03, fp wz
0962c     14 4E 85 F1 | 	sub	fp, #20
09630     28 02 90 AD |  if_e	jmp	#LR__1236
09634                 | ' 				while (ofs > bcs) {
09634                 | LR__1227
09634     08 4E 05 F1 | 	add	fp, #8
09638     A7 06 02 FB | 	rdlong	arg04, fp
0963c     10 4E 05 F1 | 	add	fp, #16
09640     A7 04 02 FB | 	rdlong	arg03, fp
09644     18 4E 85 F1 | 	sub	fp, #24
09648     02 07 1A F2 | 	cmp	arg04, arg03 wcz
0964c     68 01 90 ED |  if_be	jmp	#LR__1233
09650     08 4E 05 F1 | 	add	fp, #8
09654     A7 06 02 FB | 	rdlong	arg04, fp
09658     10 4E 05 F1 | 	add	fp, #16
0965c     A7 04 02 FB | 	rdlong	arg03, fp
09660     02 07 82 F1 | 	sub	arg04, arg03
09664     10 4E 85 F1 | 	sub	fp, #16
09668     A7 06 62 FC | 	wrlong	arg04, fp
0966c     04 4E 85 F1 | 	sub	fp, #4
09670     A7 06 02 FB | 	rdlong	arg04, fp
09674     03 EB 01 F6 | 	mov	result1, arg04
09678     14 06 06 F1 | 	add	arg04, #20
0967c     03 07 02 FB | 	rdlong	arg04, arg04
09680     14 4E 05 F1 | 	add	fp, #20
09684     A7 04 02 FB | 	rdlong	arg03, fp
09688     02 07 02 F1 | 	add	arg04, arg03
0968c     14 EA 05 F1 | 	add	result1, #20
09690     F5 06 62 FC | 	wrlong	arg04, result1
09694     14 4E 85 F1 | 	sub	fp, #20
09698     A7 04 02 FB | 	rdlong	arg03, fp
0969c     04 4E 85 F1 | 	sub	fp, #4
096a0     10 04 06 F1 | 	add	arg03, #16
096a4     02 05 C2 FA | 	rdbyte	arg03, arg03
096a8     02 04 CE F7 | 	test	arg03, #2 wz
096ac     3C 00 90 AD |  if_e	jmp	#LR__1228
096b0     04 4E 05 F1 | 	add	fp, #4
096b4     A7 00 02 FB | 	rdlong	arg01, fp
096b8     10 4E 05 F1 | 	add	fp, #16
096bc     A7 02 02 FB | 	rdlong	arg02, fp
096c0     14 4E 85 F1 | 	sub	fp, #20
096c4     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
096c8     14 4E 05 F1 | 	add	fp, #20
096cc     A7 EA 61 FC | 	wrlong	result1, fp
096d0     00 EA 4D F2 | 	cmps	result1, #0 wz
096d4     14 4E 85 F1 | 	sub	fp, #20
096d8     08 4E 05 A1 |  if_e	add	fp, #8
096dc     A7 00 68 AC |  if_e	wrlong	#0, fp
096e0     08 4E 85 A1 |  if_e	sub	fp, #8
096e4                 | ' 							ofs = 0; break;
096e4     D0 00 90 AD |  if_e	jmp	#LR__1233
096e8     24 00 90 FD | 	jmp	#LR__1229
096ec                 | LR__1228
096ec     04 4E 05 F1 | 	add	fp, #4
096f0     A7 00 02 FB | 	rdlong	arg01, fp
096f4     10 4E 05 F1 | 	add	fp, #16
096f8     A7 02 02 FB | 	rdlong	arg02, fp
096fc     14 4E 85 F1 | 	sub	fp, #20
09700     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
09704     14 4E 05 F1 | 	add	fp, #20
09708     A7 EA 61 FC | 	wrlong	result1, fp
0970c     14 4E 85 F1 | 	sub	fp, #20
09710                 | LR__1229
09710     14 4E 05 F1 | 	add	fp, #20
09714     A7 04 02 FB | 	rdlong	arg03, fp
09718     14 4E 85 F1 | 	sub	fp, #20
0971c     FF FF 7F FF 
09720     FF 05 0E F2 | 	cmp	arg03, ##-1 wz
09724     1C 00 90 5D |  if_ne	jmp	#LR__1230
09728     04 4E 05 F1 | 	add	fp, #4
0972c     A7 04 02 FB | 	rdlong	arg03, fp
09730     04 4E 85 F1 | 	sub	fp, #4
09734     11 04 06 F1 | 	add	arg03, #17
09738     02 03 48 FC | 	wrbyte	#1, arg03
0973c     01 EA 05 F6 | 	mov	result1, #1
09740     D0 02 90 FD | 	jmp	#LR__1243
09744                 | LR__1230
09744     14 4E 05 F1 | 	add	fp, #20
09748     A7 04 02 FB | 	rdlong	arg03, fp
0974c     14 4E 85 F1 | 	sub	fp, #20
09750     02 04 16 F2 | 	cmp	arg03, #2 wc
09754     24 00 90 CD |  if_b	jmp	#LR__1231
09758     10 4E 05 F1 | 	add	fp, #16
0975c     A7 06 02 FB | 	rdlong	arg04, fp
09760     04 4E 05 F1 | 	add	fp, #4
09764     A7 04 02 FB | 	rdlong	arg03, fp
09768     14 4E 85 F1 | 	sub	fp, #20
0976c     18 06 06 F1 | 	add	arg04, #24
09770     03 07 02 FB | 	rdlong	arg04, arg04
09774     03 05 12 F2 | 	cmp	arg03, arg04 wc
09778     1C 00 90 CD |  if_b	jmp	#LR__1232
0977c                 | LR__1231
0977c     04 4E 05 F1 | 	add	fp, #4
09780     A7 04 02 FB | 	rdlong	arg03, fp
09784     04 4E 85 F1 | 	sub	fp, #4
09788     11 04 06 F1 | 	add	arg03, #17
0978c     02 05 48 FC | 	wrbyte	#2, arg03
09790     02 EA 05 F6 | 	mov	result1, #2
09794     7C 02 90 FD | 	jmp	#LR__1243
09798                 | LR__1232
09798     04 4E 05 F1 | 	add	fp, #4
0979c     A7 06 02 FB | 	rdlong	arg04, fp
097a0     10 4E 05 F1 | 	add	fp, #16
097a4     A7 04 02 FB | 	rdlong	arg03, fp
097a8     14 4E 85 F1 | 	sub	fp, #20
097ac     18 06 06 F1 | 	add	arg04, #24
097b0     03 05 62 FC | 	wrlong	arg03, arg04
097b4     7C FE 9F FD | 	jmp	#LR__1227
097b8                 | LR__1233
097b8     04 4E 05 F1 | 	add	fp, #4
097bc     A7 04 02 FB | 	rdlong	arg03, fp
097c0     02 01 02 F6 | 	mov	arg01, arg03
097c4     14 04 06 F1 | 	add	arg03, #20
097c8     02 03 02 FB | 	rdlong	arg02, arg03
097cc     04 4E 05 F1 | 	add	fp, #4
097d0     A7 04 02 FB | 	rdlong	arg03, fp
097d4     02 03 02 F1 | 	add	arg02, arg03
097d8     14 00 06 F1 | 	add	arg01, #20
097dc     00 03 62 FC | 	wrlong	arg02, arg01
097e0     A7 04 02 FB | 	rdlong	arg03, fp
097e4     08 4E 85 F1 | 	sub	fp, #8
097e8     FF 05 CE F7 | 	test	arg03, #511 wz
097ec     6C 00 90 AD |  if_e	jmp	#LR__1235
097f0     10 4E 05 F1 | 	add	fp, #16
097f4     A7 00 02 FB | 	rdlong	arg01, fp
097f8     04 4E 05 F1 | 	add	fp, #4
097fc     A7 02 02 FB | 	rdlong	arg02, fp
09800     14 4E 85 F1 | 	sub	fp, #20
09804     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
09808     1C 4E 05 F1 | 	add	fp, #28
0980c     A7 EA 61 FC | 	wrlong	result1, fp
09810     1C 4E 85 F1 | 	sub	fp, #28
09814     00 EA 0D F2 | 	cmp	result1, #0 wz
09818     1C 00 90 5D |  if_ne	jmp	#LR__1234
0981c     04 4E 05 F1 | 	add	fp, #4
09820     A7 04 02 FB | 	rdlong	arg03, fp
09824     04 4E 85 F1 | 	sub	fp, #4
09828     11 04 06 F1 | 	add	arg03, #17
0982c     02 05 48 FC | 	wrbyte	#2, arg03
09830     02 EA 05 F6 | 	mov	result1, #2
09834     DC 01 90 FD | 	jmp	#LR__1243
09838                 | LR__1234
09838     1C 4E 05 F1 | 	add	fp, #28
0983c     A7 06 02 FB | 	rdlong	arg04, fp
09840     14 4E 85 F1 | 	sub	fp, #20
09844     A7 04 02 FB | 	rdlong	arg03, fp
09848     09 04 46 F0 | 	shr	arg03, #9
0984c     02 07 02 F1 | 	add	arg04, arg03
09850     14 4E 05 F1 | 	add	fp, #20
09854     A7 06 62 FC | 	wrlong	arg04, fp
09858     1C 4E 85 F1 | 	sub	fp, #28
0985c                 | LR__1235
0985c                 | LR__1236
0985c                 | LR__1237
0985c     04 4E 05 F1 | 	add	fp, #4
09860     A7 06 02 FB | 	rdlong	arg04, fp
09864     03 05 02 F6 | 	mov	arg03, arg04
09868     04 4E 85 F1 | 	sub	fp, #4
0986c     14 04 06 F1 | 	add	arg03, #20
09870     02 05 02 FB | 	rdlong	arg03, arg03
09874     0C 06 06 F1 | 	add	arg04, #12
09878     03 07 02 FB | 	rdlong	arg04, arg04
0987c     03 05 1A F2 | 	cmp	arg03, arg04 wcz
09880     3C 00 90 ED |  if_be	jmp	#LR__1238
09884     04 4E 05 F1 | 	add	fp, #4
09888     A7 06 02 FB | 	rdlong	arg04, fp
0988c     03 05 02 F6 | 	mov	arg03, arg04
09890     14 06 06 F1 | 	add	arg04, #20
09894     03 07 02 FB | 	rdlong	arg04, arg04
09898     0C 04 06 F1 | 	add	arg03, #12
0989c     02 07 62 FC | 	wrlong	arg04, arg03
098a0     A7 06 02 FB | 	rdlong	arg04, fp
098a4     03 05 02 F6 | 	mov	arg03, arg04
098a8     04 4E 85 F1 | 	sub	fp, #4
098ac     10 06 06 F1 | 	add	arg04, #16
098b0     03 07 C2 FA | 	rdbyte	arg04, arg04
098b4     40 06 46 F5 | 	or	arg04, #64
098b8     10 04 06 F1 | 	add	arg03, #16
098bc     02 07 42 FC | 	wrbyte	arg04, arg03
098c0                 | LR__1238
098c0     04 4E 05 F1 | 	add	fp, #4
098c4     A7 04 02 FB | 	rdlong	arg03, fp
098c8     04 4E 85 F1 | 	sub	fp, #4
098cc     14 04 06 F1 | 	add	arg03, #20
098d0     02 05 02 FB | 	rdlong	arg03, arg03
098d4     FF 05 CE F7 | 	test	arg03, #511 wz
098d8     2C 01 90 AD |  if_e	jmp	#LR__1242
098dc     04 4E 05 F1 | 	add	fp, #4
098e0     A7 06 02 FB | 	rdlong	arg04, fp
098e4     18 4E 05 F1 | 	add	fp, #24
098e8     A7 04 02 FB | 	rdlong	arg03, fp
098ec     1C 4E 85 F1 | 	sub	fp, #28
098f0     1C 06 06 F1 | 	add	arg04, #28
098f4     03 07 02 FB | 	rdlong	arg04, arg04
098f8     03 05 0A F2 | 	cmp	arg03, arg04 wz
098fc     08 01 90 AD |  if_e	jmp	#LR__1242
09900     04 4E 05 F1 | 	add	fp, #4
09904     A7 04 02 FB | 	rdlong	arg03, fp
09908     04 4E 85 F1 | 	sub	fp, #4
0990c     10 04 06 F1 | 	add	arg03, #16
09910     02 05 C2 FA | 	rdbyte	arg03, arg03
09914     80 04 CE F7 | 	test	arg03, #128 wz
09918     7C 00 90 AD |  if_e	jmp	#LR__1240
0991c     10 4E 05 F1 | 	add	fp, #16
09920     A7 04 02 FB | 	rdlong	arg03, fp
09924     01 04 06 F1 | 	add	arg03, #1
09928     02 01 C2 FA | 	rdbyte	arg01, arg03
0992c     0C 4E 85 F1 | 	sub	fp, #12
09930     A7 04 02 FB | 	rdlong	arg03, fp
09934     02 03 02 F6 | 	mov	arg02, arg03
09938     28 02 06 F1 | 	add	arg02, #40
0993c     04 4E 85 F1 | 	sub	fp, #4
09940     1C 04 06 F1 | 	add	arg03, #28
09944     02 05 02 FB | 	rdlong	arg03, arg03
09948     01 06 06 F6 | 	mov	arg04, #1
0994c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
09950     00 EA 0D F2 | 	cmp	result1, #0 wz
09954     1C 00 90 AD |  if_e	jmp	#LR__1239
09958     04 4E 05 F1 | 	add	fp, #4
0995c     A7 04 02 FB | 	rdlong	arg03, fp
09960     04 4E 85 F1 | 	sub	fp, #4
09964     11 04 06 F1 | 	add	arg03, #17
09968     02 03 48 FC | 	wrbyte	#1, arg03
0996c     01 EA 05 F6 | 	mov	result1, #1
09970     A0 00 90 FD | 	jmp	#LR__1243
09974                 | LR__1239
09974     04 4E 05 F1 | 	add	fp, #4
09978     A7 06 02 FB | 	rdlong	arg04, fp
0997c     03 05 02 F6 | 	mov	arg03, arg04
09980     04 4E 85 F1 | 	sub	fp, #4
09984     10 06 06 F1 | 	add	arg04, #16
09988     03 07 C2 FA | 	rdbyte	arg04, arg04
0998c     7F 06 06 F5 | 	and	arg04, #127
09990     10 04 06 F1 | 	add	arg03, #16
09994     02 07 42 FC | 	wrbyte	arg04, arg03
09998                 | LR__1240
09998     10 4E 05 F1 | 	add	fp, #16
0999c     A7 04 02 FB | 	rdlong	arg03, fp
099a0     01 04 06 F1 | 	add	arg03, #1
099a4     02 01 C2 FA | 	rdbyte	arg01, arg03
099a8     0C 4E 85 F1 | 	sub	fp, #12
099ac     A7 02 02 FB | 	rdlong	arg02, fp
099b0     28 02 06 F1 | 	add	arg02, #40
099b4     18 4E 05 F1 | 	add	fp, #24
099b8     A7 04 02 FB | 	rdlong	arg03, fp
099bc     1C 4E 85 F1 | 	sub	fp, #28
099c0     01 06 06 F6 | 	mov	arg04, #1
099c4     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
099c8     00 EA 0D F2 | 	cmp	result1, #0 wz
099cc     1C 00 90 AD |  if_e	jmp	#LR__1241
099d0     04 4E 05 F1 | 	add	fp, #4
099d4     A7 04 02 FB | 	rdlong	arg03, fp
099d8     04 4E 85 F1 | 	sub	fp, #4
099dc     11 04 06 F1 | 	add	arg03, #17
099e0     02 03 48 FC | 	wrbyte	#1, arg03
099e4     01 EA 05 F6 | 	mov	result1, #1
099e8     28 00 90 FD | 	jmp	#LR__1243
099ec                 | LR__1241
099ec     04 4E 05 F1 | 	add	fp, #4
099f0     A7 06 02 FB | 	rdlong	arg04, fp
099f4     18 4E 05 F1 | 	add	fp, #24
099f8     A7 04 02 FB | 	rdlong	arg03, fp
099fc     1C 4E 85 F1 | 	sub	fp, #28
09a00     1C 06 06 F1 | 	add	arg04, #28
09a04     03 05 62 FC | 	wrlong	arg03, arg04
09a08                 | LR__1242
09a08                 | ' 
09a08                 | ' 			fp->sect = nsect;
09a08                 | ' 		}
09a08                 | ' 	}
09a08                 | ' 
09a08                 | ' 	return res ;
09a08     0C 4E 05 F1 | 	add	fp, #12
09a0c     A7 EA 01 FB | 	rdlong	result1, fp
09a10     0C 4E 85 F1 | 	sub	fp, #12
09a14                 | LR__1243
09a14     A7 F0 03 F6 | 	mov	ptra, fp
09a18     B2 00 A0 FD | 	call	#popregs_
09a1c                 | _fatfs_cc_f_lseek_ret
09a1c     2D 00 64 FD | 	ret
09a20                 | 
09a20                 | _fatfs_cc_f_opendir
09a20     01 4A 05 F6 | 	mov	COUNT_, #1
09a24     A8 00 A0 FD | 	call	#pushregs_
09a28     14 F0 07 F1 | 	add	ptra, #20
09a2c     04 4E 05 F1 | 	add	fp, #4
09a30     A7 00 62 FC | 	wrlong	arg01, fp
09a34     04 4E 05 F1 | 	add	fp, #4
09a38     A7 02 62 FC | 	wrlong	arg02, fp
09a3c     04 4E 85 F1 | 	sub	fp, #4
09a40     A7 04 0A FB | 	rdlong	arg03, fp wz
09a44     04 4E 85 F1 | 	sub	fp, #4
09a48     09 EA 05 A6 |  if_e	mov	result1, #9
09a4c     78 01 90 AD |  if_e	jmp	#LR__1256
09a50     08 4E 05 F1 | 	add	fp, #8
09a54     A7 00 02 F6 | 	mov	arg01, fp
09a58     08 4E 05 F1 | 	add	fp, #8
09a5c     A7 02 02 F6 | 	mov	arg02, fp
09a60     10 4E 85 F1 | 	sub	fp, #16
09a64     00 04 06 F6 | 	mov	arg03, #0
09a68     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
09a6c     0C 4E 05 F1 | 	add	fp, #12
09a70     A7 EA 61 FC | 	wrlong	result1, fp
09a74     0C 4E 85 F1 | 	sub	fp, #12
09a78     00 EA 0D F2 | 	cmp	result1, #0 wz
09a7c     20 01 90 5D |  if_ne	jmp	#LR__1255
09a80     04 4E 05 F1 | 	add	fp, #4
09a84     A7 04 02 FB | 	rdlong	arg03, fp
09a88     0C 4E 05 F1 | 	add	fp, #12
09a8c     A7 EA 01 FB | 	rdlong	result1, fp
09a90     02 EB 61 FC | 	wrlong	result1, arg03
09a94     0C 4E 85 F1 | 	sub	fp, #12
09a98     A7 00 02 FB | 	rdlong	arg01, fp
09a9c     04 4E 05 F1 | 	add	fp, #4
09aa0     A7 02 02 FB | 	rdlong	arg02, fp
09aa4     08 4E 85 F1 | 	sub	fp, #8
09aa8     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
09aac     0C 4E 05 F1 | 	add	fp, #12
09ab0     A7 EA 61 FC | 	wrlong	result1, fp
09ab4     0C 4E 85 F1 | 	sub	fp, #12
09ab8     00 EA 0D F2 | 	cmp	result1, #0 wz
09abc     C4 00 90 5D |  if_ne	jmp	#LR__1254
09ac0     04 4E 05 F1 | 	add	fp, #4
09ac4     A7 04 02 FB | 	rdlong	arg03, fp
09ac8     04 4E 85 F1 | 	sub	fp, #4
09acc     2B 04 06 F1 | 	add	arg03, #43
09ad0     02 05 C2 FA | 	rdbyte	arg03, arg03
09ad4     80 04 CE F7 | 	test	arg03, #128 wz
09ad8     58 00 90 5D |  if_ne	jmp	#LR__1252
09adc     04 4E 05 F1 | 	add	fp, #4
09ae0     A7 04 02 FB | 	rdlong	arg03, fp
09ae4     04 4E 85 F1 | 	sub	fp, #4
09ae8     06 04 06 F1 | 	add	arg03, #6
09aec     02 05 C2 FA | 	rdbyte	arg03, arg03
09af0     10 04 CE F7 | 	test	arg03, #16 wz
09af4     30 00 90 AD |  if_e	jmp	#LR__1250
09af8     04 4E 05 F1 | 	add	fp, #4
09afc     A7 04 02 FB | 	rdlong	arg03, fp
09b00     02 0B 02 F6 | 	mov	local01, arg03
09b04     0C 4E 05 F1 | 	add	fp, #12
09b08     A7 00 02 FB | 	rdlong	arg01, fp
09b0c     10 4E 85 F1 | 	sub	fp, #16
09b10     1C 04 06 F1 | 	add	arg03, #28
09b14     02 03 02 FB | 	rdlong	arg02, arg03
09b18     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
09b1c     08 0A 06 F1 | 	add	local01, #8
09b20     05 EB 61 FC | 	wrlong	result1, local01
09b24     0C 00 90 FD | 	jmp	#LR__1251
09b28                 | LR__1250
09b28     0C 4E 05 F1 | 	add	fp, #12
09b2c     A7 0A 68 FC | 	wrlong	#5, fp
09b30     0C 4E 85 F1 | 	sub	fp, #12
09b34                 | LR__1251
09b34                 | LR__1252
09b34     0C 4E 05 F1 | 	add	fp, #12
09b38     A7 0A 0A FB | 	rdlong	local01, fp wz
09b3c     0C 4E 85 F1 | 	sub	fp, #12
09b40     40 00 90 5D |  if_ne	jmp	#LR__1253
09b44     04 4E 05 F1 | 	add	fp, #4
09b48     A7 0A 02 FB | 	rdlong	local01, fp
09b4c     0C 4E 05 F1 | 	add	fp, #12
09b50     A7 04 02 FB | 	rdlong	arg03, fp
09b54     06 04 06 F1 | 	add	arg03, #6
09b58     02 05 E2 FA | 	rdword	arg03, arg03
09b5c     04 0A 06 F1 | 	add	local01, #4
09b60     05 05 52 FC | 	wrword	arg03, local01
09b64     0C 4E 85 F1 | 	sub	fp, #12
09b68     A7 00 02 FB | 	rdlong	arg01, fp
09b6c     04 4E 85 F1 | 	sub	fp, #4
09b70     00 02 06 F6 | 	mov	arg02, #0
09b74     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
09b78     0C 4E 05 F1 | 	add	fp, #12
09b7c     A7 EA 61 FC | 	wrlong	result1, fp
09b80     0C 4E 85 F1 | 	sub	fp, #12
09b84                 | LR__1253
09b84                 | LR__1254
09b84     0C 4E 05 F1 | 	add	fp, #12
09b88     A7 0A 02 FB | 	rdlong	local01, fp
09b8c     0C 4E 85 F1 | 	sub	fp, #12
09b90     04 0A 0E F2 | 	cmp	local01, #4 wz
09b94     0C 4E 05 A1 |  if_e	add	fp, #12
09b98     A7 0A 68 AC |  if_e	wrlong	#5, fp
09b9c     0C 4E 85 A1 |  if_e	sub	fp, #12
09ba0                 | LR__1255
09ba0     0C 4E 05 F1 | 	add	fp, #12
09ba4     A7 0A 0A FB | 	rdlong	local01, fp wz
09ba8     0C 4E 85 F1 | 	sub	fp, #12
09bac     04 4E 05 51 |  if_ne	add	fp, #4
09bb0     A7 0A 02 5B |  if_ne	rdlong	local01, fp
09bb4     04 4E 85 51 |  if_ne	sub	fp, #4
09bb8     05 01 68 5C |  if_ne	wrlong	#0, local01
09bbc                 | ' 
09bbc                 | ' 	return res ;
09bbc     0C 4E 05 F1 | 	add	fp, #12
09bc0     A7 EA 01 FB | 	rdlong	result1, fp
09bc4     0C 4E 85 F1 | 	sub	fp, #12
09bc8                 | LR__1256
09bc8     A7 F0 03 F6 | 	mov	ptra, fp
09bcc     B2 00 A0 FD | 	call	#popregs_
09bd0                 | _fatfs_cc_f_opendir_ret
09bd0     2D 00 64 FD | 	ret
09bd4                 | 
09bd4                 | _fatfs_cc_f_closedir
09bd4     00 4A 05 F6 | 	mov	COUNT_, #0
09bd8     A8 00 A0 FD | 	call	#pushregs_
09bdc     10 F0 07 F1 | 	add	ptra, #16
09be0     04 4E 05 F1 | 	add	fp, #4
09be4     A7 00 62 FC | 	wrlong	arg01, fp
09be8     08 4E 05 F1 | 	add	fp, #8
09bec     A7 02 02 F6 | 	mov	arg02, fp
09bf0     0C 4E 85 F1 | 	sub	fp, #12
09bf4     C0 DD BF FD | 	call	#_fatfs_cc_validate
09bf8     08 4E 05 F1 | 	add	fp, #8
09bfc     A7 EA 61 FC | 	wrlong	result1, fp
09c00     08 4E 85 F1 | 	sub	fp, #8
09c04     00 EA 0D F2 | 	cmp	result1, #0 wz
09c08     04 4E 05 A1 |  if_e	add	fp, #4
09c0c     A7 EA 01 AB |  if_e	rdlong	result1, fp
09c10     04 4E 85 A1 |  if_e	sub	fp, #4
09c14     F5 00 68 AC |  if_e	wrlong	#0, result1
09c18                 | ' 
09c18                 | ' 
09c18                 | ' 
09c18                 | ' 
09c18                 | ' 		dp->obj.fs = 0;
09c18                 | ' #line 4633 "ff.c"
09c18                 | ' 	}
09c18                 | ' 	return res;
09c18     08 4E 05 F1 | 	add	fp, #8
09c1c     A7 EA 01 FB | 	rdlong	result1, fp
09c20     08 4E 85 F1 | 	sub	fp, #8
09c24     A7 F0 03 F6 | 	mov	ptra, fp
09c28     B2 00 A0 FD | 	call	#popregs_
09c2c                 | _fatfs_cc_f_closedir_ret
09c2c     2D 00 64 FD | 	ret
09c30                 | 
09c30                 | _fatfs_cc_f_readdir
09c30     00 4A 05 F6 | 	mov	COUNT_, #0
09c34     A8 00 A0 FD | 	call	#pushregs_
09c38     14 F0 07 F1 | 	add	ptra, #20
09c3c     04 4E 05 F1 | 	add	fp, #4
09c40     A7 00 62 FC | 	wrlong	arg01, fp
09c44     04 4E 05 F1 | 	add	fp, #4
09c48     A7 02 62 FC | 	wrlong	arg02, fp
09c4c     04 4E 85 F1 | 	sub	fp, #4
09c50     A7 00 02 FB | 	rdlong	arg01, fp
09c54     0C 4E 05 F1 | 	add	fp, #12
09c58     A7 02 02 F6 | 	mov	arg02, fp
09c5c     10 4E 85 F1 | 	sub	fp, #16
09c60     54 DD BF FD | 	call	#_fatfs_cc_validate
09c64     0C 4E 05 F1 | 	add	fp, #12
09c68     A7 EA 61 FC | 	wrlong	result1, fp
09c6c     0C 4E 85 F1 | 	sub	fp, #12
09c70     00 EA 0D F2 | 	cmp	result1, #0 wz
09c74     BC 00 90 5D |  if_ne	jmp	#LR__1263
09c78     08 4E 05 F1 | 	add	fp, #8
09c7c     A7 EA 09 FB | 	rdlong	result1, fp wz
09c80     08 4E 85 F1 | 	sub	fp, #8
09c84     24 00 90 5D |  if_ne	jmp	#LR__1260
09c88     04 4E 05 F1 | 	add	fp, #4
09c8c     A7 00 02 FB | 	rdlong	arg01, fp
09c90     04 4E 85 F1 | 	sub	fp, #4
09c94     00 02 06 F6 | 	mov	arg02, #0
09c98     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
09c9c     0C 4E 05 F1 | 	add	fp, #12
09ca0     A7 EA 61 FC | 	wrlong	result1, fp
09ca4     0C 4E 85 F1 | 	sub	fp, #12
09ca8     88 00 90 FD | 	jmp	#LR__1262
09cac                 | LR__1260
09cac     04 4E 05 F1 | 	add	fp, #4
09cb0     A7 00 02 FB | 	rdlong	arg01, fp
09cb4     04 4E 85 F1 | 	sub	fp, #4
09cb8     00 02 06 F6 | 	mov	arg02, #0
09cbc     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
09cc0     0C 4E 05 F1 | 	add	fp, #12
09cc4     A7 EA 61 FC | 	wrlong	result1, fp
09cc8     0C 4E 85 F1 | 	sub	fp, #12
09ccc     04 EA 0D F2 | 	cmp	result1, #4 wz
09cd0     0C 4E 05 A1 |  if_e	add	fp, #12
09cd4     A7 00 68 AC |  if_e	wrlong	#0, fp
09cd8     0C 4E 85 A1 |  if_e	sub	fp, #12
09cdc     0C 4E 05 F1 | 	add	fp, #12
09ce0     A7 EA 09 FB | 	rdlong	result1, fp wz
09ce4     0C 4E 85 F1 | 	sub	fp, #12
09ce8     48 00 90 5D |  if_ne	jmp	#LR__1261
09cec     04 4E 05 F1 | 	add	fp, #4
09cf0     A7 00 02 FB | 	rdlong	arg01, fp
09cf4     04 4E 05 F1 | 	add	fp, #4
09cf8     A7 02 02 FB | 	rdlong	arg02, fp
09cfc     08 4E 85 F1 | 	sub	fp, #8
09d00     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
09d04     04 4E 05 F1 | 	add	fp, #4
09d08     A7 00 02 FB | 	rdlong	arg01, fp
09d0c     04 4E 85 F1 | 	sub	fp, #4
09d10     00 02 06 F6 | 	mov	arg02, #0
09d14     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
09d18     0C 4E 05 F1 | 	add	fp, #12
09d1c     A7 EA 61 FC | 	wrlong	result1, fp
09d20     0C 4E 85 F1 | 	sub	fp, #12
09d24     04 EA 0D F2 | 	cmp	result1, #4 wz
09d28     0C 4E 05 A1 |  if_e	add	fp, #12
09d2c     A7 00 68 AC |  if_e	wrlong	#0, fp
09d30     0C 4E 85 A1 |  if_e	sub	fp, #12
09d34                 | LR__1261
09d34                 | LR__1262
09d34                 | LR__1263
09d34                 | ' 			}
09d34                 | ' 			;
09d34                 | ' 		}
09d34                 | ' 	}
09d34                 | ' 	return res ;
09d34     0C 4E 05 F1 | 	add	fp, #12
09d38     A7 EA 01 FB | 	rdlong	result1, fp
09d3c     0C 4E 85 F1 | 	sub	fp, #12
09d40     A7 F0 03 F6 | 	mov	ptra, fp
09d44     B2 00 A0 FD | 	call	#popregs_
09d48                 | _fatfs_cc_f_readdir_ret
09d48     2D 00 64 FD | 	ret
09d4c                 | 
09d4c                 | _fatfs_cc_f_stat
09d4c     00 4A 05 F6 | 	mov	COUNT_, #0
09d50     A8 00 A0 FD | 	call	#pushregs_
09d54     40 F0 07 F1 | 	add	ptra, #64
09d58     04 4E 05 F1 | 	add	fp, #4
09d5c     A7 00 62 FC | 	wrlong	arg01, fp
09d60     04 4E 05 F1 | 	add	fp, #4
09d64     A7 02 62 FC | 	wrlong	arg02, fp
09d68     04 4E 85 F1 | 	sub	fp, #4
09d6c     A7 00 02 F6 | 	mov	arg01, fp
09d70     0C 4E 05 F1 | 	add	fp, #12
09d74     A7 02 02 F6 | 	mov	arg02, fp
09d78     10 4E 85 F1 | 	sub	fp, #16
09d7c     00 04 06 F6 | 	mov	arg03, #0
09d80     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
09d84     0C 4E 05 F1 | 	add	fp, #12
09d88     A7 EA 61 FC | 	wrlong	result1, fp
09d8c     0C 4E 85 F1 | 	sub	fp, #12
09d90     00 EA 0D F2 | 	cmp	result1, #0 wz
09d94     74 00 90 5D |  if_ne	jmp	#LR__1273
09d98     10 4E 05 F1 | 	add	fp, #16
09d9c     A7 00 02 F6 | 	mov	arg01, fp
09da0     0C 4E 85 F1 | 	sub	fp, #12
09da4     A7 02 02 FB | 	rdlong	arg02, fp
09da8     04 4E 85 F1 | 	sub	fp, #4
09dac     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
09db0     0C 4E 05 F1 | 	add	fp, #12
09db4     A7 EA 61 FC | 	wrlong	result1, fp
09db8     0C 4E 85 F1 | 	sub	fp, #12
09dbc     00 EA 0D F2 | 	cmp	result1, #0 wz
09dc0     48 00 90 5D |  if_ne	jmp	#LR__1272
09dc4     3B 4E 05 F1 | 	add	fp, #59
09dc8     A7 EA C1 FA | 	rdbyte	result1, fp
09dcc     3B 4E 85 F1 | 	sub	fp, #59
09dd0     80 EA CD F7 | 	test	result1, #128 wz
09dd4     0C 4E 05 51 |  if_ne	add	fp, #12
09dd8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
09ddc     0C 4E 85 51 |  if_ne	sub	fp, #12
09de0     28 00 90 5D |  if_ne	jmp	#LR__1271
09de4     08 4E 05 F1 | 	add	fp, #8
09de8     A7 EA 09 FB | 	rdlong	result1, fp wz
09dec     08 4E 85 F1 | 	sub	fp, #8
09df0     18 00 90 AD |  if_e	jmp	#LR__1270
09df4     10 4E 05 F1 | 	add	fp, #16
09df8     A7 00 02 F6 | 	mov	arg01, fp
09dfc     08 4E 85 F1 | 	sub	fp, #8
09e00     A7 02 02 FB | 	rdlong	arg02, fp
09e04     08 4E 85 F1 | 	sub	fp, #8
09e08     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
09e0c                 | LR__1270
09e0c                 | LR__1271
09e0c                 | LR__1272
09e0c                 | LR__1273
09e0c                 | ' 			}
09e0c                 | ' 		}
09e0c                 | ' 		;
09e0c                 | ' 	}
09e0c                 | ' 
09e0c                 | ' 	return res ;
09e0c     0C 4E 05 F1 | 	add	fp, #12
09e10     A7 EA 01 FB | 	rdlong	result1, fp
09e14     0C 4E 85 F1 | 	sub	fp, #12
09e18     A7 F0 03 F6 | 	mov	ptra, fp
09e1c     B2 00 A0 FD | 	call	#popregs_
09e20                 | _fatfs_cc_f_stat_ret
09e20     2D 00 64 FD | 	ret
09e24                 | 
09e24                 | _fatfs_cc_f_unlink
09e24     00 4A 05 F6 | 	mov	COUNT_, #0
09e28     A8 00 A0 FD | 	call	#pushregs_
09e2c     74 F0 07 F1 | 	add	ptra, #116
09e30     04 4E 05 F1 | 	add	fp, #4
09e34     A7 00 62 FC | 	wrlong	arg01, fp
09e38     68 4E 05 F1 | 	add	fp, #104
09e3c     A7 00 68 FC | 	wrlong	#0, fp
09e40     68 4E 85 F1 | 	sub	fp, #104
09e44     A7 00 02 F6 | 	mov	arg01, fp
09e48     6C 4E 05 F1 | 	add	fp, #108
09e4c     A7 02 02 F6 | 	mov	arg02, fp
09e50     70 4E 85 F1 | 	sub	fp, #112
09e54     02 04 06 F6 | 	mov	arg03, #2
09e58     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
09e5c     08 4E 05 F1 | 	add	fp, #8
09e60     A7 EA 61 FC | 	wrlong	result1, fp
09e64     08 4E 85 F1 | 	sub	fp, #8
09e68     00 EA 0D F2 | 	cmp	result1, #0 wz
09e6c     E4 01 90 5D |  if_ne	jmp	#LR__1288
09e70     70 4E 05 F1 | 	add	fp, #112
09e74     A7 04 02 FB | 	rdlong	arg03, fp
09e78     64 4E 85 F1 | 	sub	fp, #100
09e7c     A7 04 62 FC | 	wrlong	arg03, fp
09e80     A7 00 02 F6 | 	mov	arg01, fp
09e84     08 4E 85 F1 | 	sub	fp, #8
09e88     A7 02 02 FB | 	rdlong	arg02, fp
09e8c     04 4E 85 F1 | 	sub	fp, #4
09e90     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
09e94     08 4E 05 F1 | 	add	fp, #8
09e98     A7 EA 61 FC | 	wrlong	result1, fp
09e9c     00 EA 4D F2 | 	cmps	result1, #0 wz
09ea0     08 4E 85 F1 | 	sub	fp, #8
09ea4     AC 01 90 5D |  if_ne	jmp	#LR__1287
09ea8     37 4E 05 F1 | 	add	fp, #55
09eac     A7 EA C1 FA | 	rdbyte	result1, fp
09eb0     37 4E 85 F1 | 	sub	fp, #55
09eb4     80 EA CD F7 | 	test	result1, #128 wz
09eb8     08 4E 05 51 |  if_ne	add	fp, #8
09ebc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
09ec0     08 4E 85 51 |  if_ne	sub	fp, #8
09ec4     1C 00 90 5D |  if_ne	jmp	#LR__1280
09ec8     12 4E 05 F1 | 	add	fp, #18
09ecc     A7 EA C1 FA | 	rdbyte	result1, fp
09ed0     12 4E 85 F1 | 	sub	fp, #18
09ed4     01 EA CD F7 | 	test	result1, #1 wz
09ed8     08 4E 05 51 |  if_ne	add	fp, #8
09edc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
09ee0     08 4E 85 51 |  if_ne	sub	fp, #8
09ee4                 | LR__1280
09ee4     08 4E 05 F1 | 	add	fp, #8
09ee8     A7 EA 09 FB | 	rdlong	result1, fp wz
09eec     08 4E 85 F1 | 	sub	fp, #8
09ef0     C8 00 90 5D |  if_ne	jmp	#LR__1283
09ef4     70 4E 05 F1 | 	add	fp, #112
09ef8     A7 00 02 FB | 	rdlong	arg01, fp
09efc     48 4E 85 F1 | 	sub	fp, #72
09f00     A7 02 02 FB | 	rdlong	arg02, fp
09f04     28 4E 85 F1 | 	sub	fp, #40
09f08     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
09f0c     6C 4E 05 F1 | 	add	fp, #108
09f10     A7 EA 61 FC | 	wrlong	result1, fp
09f14     5A 4E 85 F1 | 	sub	fp, #90
09f18     A7 EA C1 FA | 	rdbyte	result1, fp
09f1c     12 4E 85 F1 | 	sub	fp, #18
09f20     10 EA CD F7 | 	test	result1, #16 wz
09f24     94 00 90 AD |  if_e	jmp	#LR__1282
09f28     70 4E 05 F1 | 	add	fp, #112
09f2c     A7 EA 01 FB | 	rdlong	result1, fp
09f30     34 4E 85 F1 | 	sub	fp, #52
09f34     A7 EA 61 FC | 	wrlong	result1, fp
09f38     30 4E 05 F1 | 	add	fp, #48
09f3c     A7 04 02 FB | 	rdlong	arg03, fp
09f40     28 4E 85 F1 | 	sub	fp, #40
09f44     A7 04 62 FC | 	wrlong	arg03, fp
09f48     08 4E 85 F1 | 	sub	fp, #8
09f4c     A7 00 02 F6 | 	mov	arg01, fp
09f50     3C 4E 85 F1 | 	sub	fp, #60
09f54     00 02 06 F6 | 	mov	arg02, #0
09f58     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
09f5c     08 4E 05 F1 | 	add	fp, #8
09f60     A7 EA 61 FC | 	wrlong	result1, fp
09f64     08 4E 85 F1 | 	sub	fp, #8
09f68     00 EA 0D F2 | 	cmp	result1, #0 wz
09f6c     4C 00 90 5D |  if_ne	jmp	#LR__1281
09f70     3C 4E 05 F1 | 	add	fp, #60
09f74     A7 00 02 F6 | 	mov	arg01, fp
09f78     3C 4E 85 F1 | 	sub	fp, #60
09f7c     00 02 06 F6 | 	mov	arg02, #0
09f80     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
09f84     08 4E 05 F1 | 	add	fp, #8
09f88     A7 EA 61 FC | 	wrlong	result1, fp
09f8c     00 EA 4D F2 | 	cmps	result1, #0 wz
09f90     08 4E 85 F1 | 	sub	fp, #8
09f94     08 4E 05 A1 |  if_e	add	fp, #8
09f98     A7 0E 68 AC |  if_e	wrlong	#7, fp
09f9c     08 4E 85 A1 |  if_e	sub	fp, #8
09fa0     08 4E 05 F1 | 	add	fp, #8
09fa4     A7 EA 01 FB | 	rdlong	result1, fp
09fa8     08 4E 85 F1 | 	sub	fp, #8
09fac     04 EA 0D F2 | 	cmp	result1, #4 wz
09fb0     08 4E 05 A1 |  if_e	add	fp, #8
09fb4     A7 00 68 AC |  if_e	wrlong	#0, fp
09fb8     08 4E 85 A1 |  if_e	sub	fp, #8
09fbc                 | LR__1281
09fbc                 | LR__1282
09fbc                 | LR__1283
09fbc     08 4E 05 F1 | 	add	fp, #8
09fc0     A7 EA 09 FB | 	rdlong	result1, fp wz
09fc4     08 4E 85 F1 | 	sub	fp, #8
09fc8     88 00 90 5D |  if_ne	jmp	#LR__1286
09fcc     0C 4E 05 F1 | 	add	fp, #12
09fd0     A7 00 02 F6 | 	mov	arg01, fp
09fd4     0C 4E 85 F1 | 	sub	fp, #12
09fd8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
09fdc     08 4E 05 F1 | 	add	fp, #8
09fe0     A7 EA 61 FC | 	wrlong	result1, fp
09fe4     08 4E 85 F1 | 	sub	fp, #8
09fe8     00 EA 0D F2 | 	cmp	result1, #0 wz
09fec     38 00 90 5D |  if_ne	jmp	#LR__1284
09ff0     6C 4E 05 F1 | 	add	fp, #108
09ff4     A7 EA 09 FB | 	rdlong	result1, fp wz
09ff8     6C 4E 85 F1 | 	sub	fp, #108
09ffc     28 00 90 AD |  if_e	jmp	#LR__1284
0a000     0C 4E 05 F1 | 	add	fp, #12
0a004     A7 00 02 F6 | 	mov	arg01, fp
0a008     60 4E 05 F1 | 	add	fp, #96
0a00c     A7 02 02 FB | 	rdlong	arg02, fp
0a010     6C 4E 85 F1 | 	sub	fp, #108
0a014     00 04 06 F6 | 	mov	arg03, #0
0a018     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
0a01c     08 4E 05 F1 | 	add	fp, #8
0a020     A7 EA 61 FC | 	wrlong	result1, fp
0a024     08 4E 85 F1 | 	sub	fp, #8
0a028                 | LR__1284
0a028     08 4E 05 F1 | 	add	fp, #8
0a02c     A7 EA 09 FB | 	rdlong	result1, fp wz
0a030     08 4E 85 F1 | 	sub	fp, #8
0a034     1C 00 90 5D |  if_ne	jmp	#LR__1285
0a038     70 4E 05 F1 | 	add	fp, #112
0a03c     A7 00 02 FB | 	rdlong	arg01, fp
0a040     70 4E 85 F1 | 	sub	fp, #112
0a044     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
0a048     08 4E 05 F1 | 	add	fp, #8
0a04c     A7 EA 61 FC | 	wrlong	result1, fp
0a050     08 4E 85 F1 | 	sub	fp, #8
0a054                 | LR__1285
0a054                 | LR__1286
0a054                 | LR__1287
0a054                 | LR__1288
0a054                 | ' 			}
0a054                 | ' 		}
0a054                 | ' 		;
0a054                 | ' 	}
0a054                 | ' 
0a054                 | ' 	return res ;
0a054     08 4E 05 F1 | 	add	fp, #8
0a058     A7 EA 01 FB | 	rdlong	result1, fp
0a05c     08 4E 85 F1 | 	sub	fp, #8
0a060     A7 F0 03 F6 | 	mov	ptra, fp
0a064     B2 00 A0 FD | 	call	#popregs_
0a068                 | _fatfs_cc_f_unlink_ret
0a068     2D 00 64 FD | 	ret
0a06c                 | 
0a06c                 | _fatfs_cc_f_mkdir
0a06c     00 4A 05 F6 | 	mov	COUNT_, #0
0a070     A8 00 A0 FD | 	call	#pushregs_
0a074     5C F0 07 F1 | 	add	ptra, #92
0a078     04 4E 05 F1 | 	add	fp, #4
0a07c     A7 00 62 FC | 	wrlong	arg01, fp
0a080     A7 00 02 F6 | 	mov	arg01, fp
0a084     48 4E 05 F1 | 	add	fp, #72
0a088     A7 02 02 F6 | 	mov	arg02, fp
0a08c     4C 4E 85 F1 | 	sub	fp, #76
0a090     02 04 06 F6 | 	mov	arg03, #2
0a094     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
0a098     08 4E 05 F1 | 	add	fp, #8
0a09c     A7 EA 61 FC | 	wrlong	result1, fp
0a0a0     08 4E 85 F1 | 	sub	fp, #8
0a0a4     00 EA 0D F2 | 	cmp	result1, #0 wz
0a0a8     C4 02 90 5D |  if_ne	jmp	#LR__1295
0a0ac     4C 4E 05 F1 | 	add	fp, #76
0a0b0     A7 04 02 FB | 	rdlong	arg03, fp
0a0b4     40 4E 85 F1 | 	sub	fp, #64
0a0b8     A7 04 62 FC | 	wrlong	arg03, fp
0a0bc     A7 00 02 F6 | 	mov	arg01, fp
0a0c0     08 4E 85 F1 | 	sub	fp, #8
0a0c4     A7 02 02 FB | 	rdlong	arg02, fp
0a0c8     04 4E 85 F1 | 	sub	fp, #4
0a0cc     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
0a0d0     08 4E 05 F1 | 	add	fp, #8
0a0d4     A7 EA 61 FC | 	wrlong	result1, fp
0a0d8     00 EA 4D F2 | 	cmps	result1, #0 wz
0a0dc     08 4E 85 F1 | 	sub	fp, #8
0a0e0     08 4E 05 A1 |  if_e	add	fp, #8
0a0e4     A7 10 68 AC |  if_e	wrlong	#8, fp
0a0e8     08 4E 85 A1 |  if_e	sub	fp, #8
0a0ec     08 4E 05 F1 | 	add	fp, #8
0a0f0     A7 EA 01 FB | 	rdlong	result1, fp
0a0f4     08 4E 85 F1 | 	sub	fp, #8
0a0f8     04 EA 0D F2 | 	cmp	result1, #4 wz
0a0fc     70 02 90 5D |  if_ne	jmp	#LR__1294
0a100     4C 4E 05 F1 | 	add	fp, #76
0a104     A7 04 02 FB | 	rdlong	arg03, fp
0a108     10 4E 85 F1 | 	sub	fp, #16
0a10c     A7 04 62 FC | 	wrlong	arg03, fp
0a110     A7 00 02 F6 | 	mov	arg01, fp
0a114     3C 4E 85 F1 | 	sub	fp, #60
0a118     00 02 06 F6 | 	mov	arg02, #0
0a11c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
0a120     50 4E 05 F1 | 	add	fp, #80
0a124     A7 EA 61 FC | 	wrlong	result1, fp
0a128     48 4E 85 F1 | 	sub	fp, #72
0a12c     A7 00 68 FC | 	wrlong	#0, fp
0a130     48 4E 05 F1 | 	add	fp, #72
0a134     A7 EA 09 FB | 	rdlong	result1, fp wz
0a138     50 4E 85 F1 | 	sub	fp, #80
0a13c     08 4E 05 A1 |  if_e	add	fp, #8
0a140     A7 0E 68 AC |  if_e	wrlong	#7, fp
0a144     08 4E 85 A1 |  if_e	sub	fp, #8
0a148     50 4E 05 F1 | 	add	fp, #80
0a14c     A7 EA 01 FB | 	rdlong	result1, fp
0a150     50 4E 85 F1 | 	sub	fp, #80
0a154     01 EA 0D F2 | 	cmp	result1, #1 wz
0a158     08 4E 05 A1 |  if_e	add	fp, #8
0a15c     A7 04 68 AC |  if_e	wrlong	#2, fp
0a160     08 4E 85 A1 |  if_e	sub	fp, #8
0a164     50 4E 05 F1 | 	add	fp, #80
0a168     A7 04 02 FB | 	rdlong	arg03, fp
0a16c     50 4E 85 F1 | 	sub	fp, #80
0a170     FF FF 7F FF 
0a174     FF 05 0E F2 | 	cmp	arg03, ##-1 wz
0a178     08 4E 05 A1 |  if_e	add	fp, #8
0a17c     A7 02 68 AC |  if_e	wrlong	#1, fp
0a180     08 4E 85 A1 |  if_e	sub	fp, #8
0a184     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
0a188     58 4E 05 F1 | 	add	fp, #88
0a18c     A7 EA 61 FC | 	wrlong	result1, fp
0a190     50 4E 85 F1 | 	sub	fp, #80
0a194     A7 EA 09 FB | 	rdlong	result1, fp wz
0a198     08 4E 85 F1 | 	sub	fp, #8
0a19c     1C 01 90 5D |  if_ne	jmp	#LR__1291
0a1a0     4C 4E 05 F1 | 	add	fp, #76
0a1a4     A7 00 02 FB | 	rdlong	arg01, fp
0a1a8     04 4E 05 F1 | 	add	fp, #4
0a1ac     A7 02 02 FB | 	rdlong	arg02, fp
0a1b0     50 4E 85 F1 | 	sub	fp, #80
0a1b4     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
0a1b8     08 4E 05 F1 | 	add	fp, #8
0a1bc     A7 EA 61 FC | 	wrlong	result1, fp
0a1c0     00 EA 4D F2 | 	cmps	result1, #0 wz
0a1c4     08 4E 85 F1 | 	sub	fp, #8
0a1c8     F0 00 90 5D |  if_ne	jmp	#LR__1290
0a1cc     4C 4E 05 F1 | 	add	fp, #76
0a1d0     A7 00 02 FB | 	rdlong	arg01, fp
0a1d4     4C 4E 85 F1 | 	sub	fp, #76
0a1d8     34 00 06 F1 | 	add	arg01, #52
0a1dc     20 02 06 F6 | 	mov	arg02, #32
0a1e0     0B 04 06 F6 | 	mov	arg03, #11
0a1e4     98 00 A0 FD | 	call	#\builtin_bytefill_
0a1e8     4C 4E 05 F1 | 	add	fp, #76
0a1ec     A7 EA 01 FB | 	rdlong	result1, fp
0a1f0     34 EA 05 F1 | 	add	result1, #52
0a1f4     F5 5C 48 FC | 	wrbyte	#46, result1
0a1f8     A7 04 02 FB | 	rdlong	arg03, fp
0a1fc     3F 04 06 F1 | 	add	arg03, #63
0a200     02 21 48 FC | 	wrbyte	#16, arg03
0a204     A7 00 02 FB | 	rdlong	arg01, fp
0a208     4A 00 06 F1 | 	add	arg01, #74
0a20c     0C 4E 05 F1 | 	add	fp, #12
0a210     A7 02 02 FB | 	rdlong	arg02, fp
0a214     00 03 62 FC | 	wrlong	arg02, arg01
0a218     0C 4E 85 F1 | 	sub	fp, #12
0a21c     A7 02 02 FB | 	rdlong	arg02, fp
0a220     01 01 02 F6 | 	mov	arg01, arg02
0a224     34 02 06 F1 | 	add	arg02, #52
0a228     04 4E 05 F1 | 	add	fp, #4
0a22c     A7 04 02 FB | 	rdlong	arg03, fp
0a230     50 4E 85 F1 | 	sub	fp, #80
0a234     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
0a238     4C 4E 05 F1 | 	add	fp, #76
0a23c     A7 02 02 FB | 	rdlong	arg02, fp
0a240     01 01 02 F6 | 	mov	arg01, arg02
0a244     54 00 06 F1 | 	add	arg01, #84
0a248     4C 4E 85 F1 | 	sub	fp, #76
0a24c     34 02 06 F1 | 	add	arg02, #52
0a250     20 04 06 F6 | 	mov	arg03, #32
0a254     80 6A BF FD | 	call	#__system____builtin_memmove
0a258     4C 4E 05 F1 | 	add	fp, #76
0a25c     A7 04 02 FB | 	rdlong	arg03, fp
0a260     55 04 06 F1 | 	add	arg03, #85
0a264     02 5D 48 FC | 	wrbyte	#46, arg03
0a268     38 4E 85 F1 | 	sub	fp, #56
0a26c     A7 04 02 FB | 	rdlong	arg03, fp
0a270     40 4E 05 F1 | 	add	fp, #64
0a274     A7 04 62 FC | 	wrlong	arg03, fp
0a278     08 4E 85 F1 | 	sub	fp, #8
0a27c     A7 02 02 FB | 	rdlong	arg02, fp
0a280     01 01 02 F6 | 	mov	arg01, arg02
0a284     54 02 06 F1 | 	add	arg02, #84
0a288     4C 4E 85 F1 | 	sub	fp, #76
0a28c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
0a290     4C 4E 05 F1 | 	add	fp, #76
0a294     A7 04 02 FB | 	rdlong	arg03, fp
0a298     03 04 06 F1 | 	add	arg03, #3
0a29c     02 03 48 FC | 	wrbyte	#1, arg03
0a2a0     40 4E 85 F1 | 	sub	fp, #64
0a2a4     A7 00 02 F6 | 	mov	arg01, fp
0a2a8     0C 4E 85 F1 | 	sub	fp, #12
0a2ac     44 BA BF FD | 	call	#_fatfs_cc_dir_register
0a2b0     08 4E 05 F1 | 	add	fp, #8
0a2b4     A7 EA 61 FC | 	wrlong	result1, fp
0a2b8     08 4E 85 F1 | 	sub	fp, #8
0a2bc                 | LR__1290
0a2bc                 | LR__1291
0a2bc     08 4E 05 F1 | 	add	fp, #8
0a2c0     A7 EA 09 FB | 	rdlong	result1, fp wz
0a2c4     08 4E 85 F1 | 	sub	fp, #8
0a2c8     88 00 90 5D |  if_ne	jmp	#LR__1292
0a2cc     28 4E 05 F1 | 	add	fp, #40
0a2d0     A7 00 02 FB | 	rdlong	arg01, fp
0a2d4     16 00 06 F1 | 	add	arg01, #22
0a2d8     30 4E 05 F1 | 	add	fp, #48
0a2dc     A7 02 02 FB | 	rdlong	arg02, fp
0a2e0     00 03 62 FC | 	wrlong	arg02, arg01
0a2e4     0C 4E 85 F1 | 	sub	fp, #12
0a2e8     A7 00 02 FB | 	rdlong	arg01, fp
0a2ec     24 4E 85 F1 | 	sub	fp, #36
0a2f0     A7 02 02 FB | 	rdlong	arg02, fp
0a2f4     28 4E 05 F1 | 	add	fp, #40
0a2f8     A7 04 02 FB | 	rdlong	arg03, fp
0a2fc     50 4E 85 F1 | 	sub	fp, #80
0a300     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
0a304     28 4E 05 F1 | 	add	fp, #40
0a308     A7 EA 01 FB | 	rdlong	result1, fp
0a30c     0B EA 05 F1 | 	add	result1, #11
0a310     F5 20 48 FC | 	wrbyte	#16, result1
0a314     24 4E 05 F1 | 	add	fp, #36
0a318     A7 EA 01 FB | 	rdlong	result1, fp
0a31c     03 EA 05 F1 | 	add	result1, #3
0a320     F5 02 48 FC | 	wrbyte	#1, result1
0a324     44 4E 85 F1 | 	sub	fp, #68
0a328     A7 EA 09 FB | 	rdlong	result1, fp wz
0a32c     08 4E 85 F1 | 	sub	fp, #8
0a330     3C 00 90 5D |  if_ne	jmp	#LR__1293
0a334     4C 4E 05 F1 | 	add	fp, #76
0a338     A7 00 02 FB | 	rdlong	arg01, fp
0a33c     4C 4E 85 F1 | 	sub	fp, #76
0a340     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
0a344     08 4E 05 F1 | 	add	fp, #8
0a348     A7 EA 61 FC | 	wrlong	result1, fp
0a34c     08 4E 85 F1 | 	sub	fp, #8
0a350     1C 00 90 FD | 	jmp	#LR__1293
0a354                 | LR__1292
0a354     3C 4E 05 F1 | 	add	fp, #60
0a358     A7 00 02 F6 | 	mov	arg01, fp
0a35c     14 4E 05 F1 | 	add	fp, #20
0a360     A7 02 02 FB | 	rdlong	arg02, fp
0a364     50 4E 85 F1 | 	sub	fp, #80
0a368     00 04 06 F6 | 	mov	arg03, #0
0a36c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
0a370                 | LR__1293
0a370                 | LR__1294
0a370                 | LR__1295
0a370                 | ' 				remove_chain(&sobj, dcl, 0);
0a370                 | ' 			}
0a370                 | ' 		}
0a370                 | ' 		;
0a370                 | ' 	}
0a370                 | ' 
0a370                 | ' 	return res ;
0a370     08 4E 05 F1 | 	add	fp, #8
0a374     A7 EA 01 FB | 	rdlong	result1, fp
0a378     08 4E 85 F1 | 	sub	fp, #8
0a37c     A7 F0 03 F6 | 	mov	ptra, fp
0a380     B2 00 A0 FD | 	call	#popregs_
0a384                 | _fatfs_cc_f_mkdir_ret
0a384     2D 00 64 FD | 	ret
0a388                 | 
0a388                 | _fatfs_cc_f_rename
0a388     01 4A 05 F6 | 	mov	COUNT_, #1
0a38c     A8 00 A0 FD | 	call	#pushregs_
0a390     9C F0 07 F1 | 	add	ptra, #156
0a394     04 4E 05 F1 | 	add	fp, #4
0a398     A7 00 62 FC | 	wrlong	arg01, fp
0a39c     04 4E 05 F1 | 	add	fp, #4
0a3a0     A7 02 62 FC | 	wrlong	arg02, fp
0a3a4     A7 00 02 F6 | 	mov	arg01, fp
0a3a8     08 4E 85 F1 | 	sub	fp, #8
0a3ac     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
0a3b0     04 4E 05 F1 | 	add	fp, #4
0a3b4     A7 00 02 F6 | 	mov	arg01, fp
0a3b8     6C 4E 05 F1 | 	add	fp, #108
0a3bc     A7 02 02 F6 | 	mov	arg02, fp
0a3c0     70 4E 85 F1 | 	sub	fp, #112
0a3c4     02 04 06 F6 | 	mov	arg03, #2
0a3c8     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
0a3cc     0C 4E 05 F1 | 	add	fp, #12
0a3d0     A7 EA 61 FC | 	wrlong	result1, fp
0a3d4     0C 4E 85 F1 | 	sub	fp, #12
0a3d8     00 EA 0D F2 | 	cmp	result1, #0 wz
0a3dc     44 03 90 5D |  if_ne	jmp	#LR__1313
0a3e0     70 4E 05 F1 | 	add	fp, #112
0a3e4     A7 04 02 FB | 	rdlong	arg03, fp
0a3e8     60 4E 85 F1 | 	sub	fp, #96
0a3ec     A7 04 62 FC | 	wrlong	arg03, fp
0a3f0     A7 00 02 F6 | 	mov	arg01, fp
0a3f4     0C 4E 85 F1 | 	sub	fp, #12
0a3f8     A7 02 02 FB | 	rdlong	arg02, fp
0a3fc     04 4E 85 F1 | 	sub	fp, #4
0a400     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
0a404     0C 4E 05 F1 | 	add	fp, #12
0a408     A7 EA 61 FC | 	wrlong	result1, fp
0a40c     00 EA 4D F2 | 	cmps	result1, #0 wz
0a410     0C 4E 85 F1 | 	sub	fp, #12
0a414     1C 00 90 5D |  if_ne	jmp	#LR__1300
0a418     3B 4E 05 F1 | 	add	fp, #59
0a41c     A7 EA C1 FA | 	rdbyte	result1, fp
0a420     3B 4E 85 F1 | 	sub	fp, #59
0a424     A0 EA CD F7 | 	test	result1, #160 wz
0a428     0C 4E 05 51 |  if_ne	add	fp, #12
0a42c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
0a430     0C 4E 85 51 |  if_ne	sub	fp, #12
0a434                 | LR__1300
0a434     0C 4E 05 F1 | 	add	fp, #12
0a438     A7 0A 0A FB | 	rdlong	local01, fp wz
0a43c     0C 4E 85 F1 | 	sub	fp, #12
0a440     E0 02 90 5D |  if_ne	jmp	#LR__1312
0a444     74 4E 05 F1 | 	add	fp, #116
0a448     A7 00 02 F6 | 	mov	arg01, fp
0a44c     48 4E 85 F1 | 	sub	fp, #72
0a450     A7 02 02 FB | 	rdlong	arg02, fp
0a454     2C 4E 85 F1 | 	sub	fp, #44
0a458     20 04 06 F6 | 	mov	arg03, #32
0a45c     78 68 BF FD | 	call	#__system____builtin_memmove
0a460     40 4E 05 F1 | 	add	fp, #64
0a464     A7 00 02 F6 | 	mov	arg01, fp
0a468     30 4E 85 F1 | 	sub	fp, #48
0a46c     A7 02 02 F6 | 	mov	arg02, fp
0a470     10 4E 85 F1 | 	sub	fp, #16
0a474     30 04 06 F6 | 	mov	arg03, #48
0a478     5C 68 BF FD | 	call	#__system____builtin_memmove
0a47c     40 4E 05 F1 | 	add	fp, #64
0a480     A7 00 02 F6 | 	mov	arg01, fp
0a484     38 4E 85 F1 | 	sub	fp, #56
0a488     A7 02 02 FB | 	rdlong	arg02, fp
0a48c     08 4E 85 F1 | 	sub	fp, #8
0a490     34 CA BF FD | 	call	#_fatfs_cc_follow_path
0a494     0C 4E 05 F1 | 	add	fp, #12
0a498     A7 EA 61 FC | 	wrlong	result1, fp
0a49c     0C 4E 85 F1 | 	sub	fp, #12
0a4a0     00 EA 0D F2 | 	cmp	result1, #0 wz
0a4a4     4C 00 90 5D |  if_ne	jmp	#LR__1303
0a4a8     48 4E 05 F1 | 	add	fp, #72
0a4ac     A7 EA 01 FB | 	rdlong	result1, fp
0a4b0     30 4E 85 F1 | 	sub	fp, #48
0a4b4     A7 04 02 FB | 	rdlong	arg03, fp
0a4b8     18 4E 85 F1 | 	sub	fp, #24
0a4bc     02 EB 09 F2 | 	cmp	result1, arg03 wz
0a4c0     20 00 90 5D |  if_ne	jmp	#LR__1301
0a4c4     50 4E 05 F1 | 	add	fp, #80
0a4c8     A7 EA 01 FB | 	rdlong	result1, fp
0a4cc     30 4E 85 F1 | 	sub	fp, #48
0a4d0     A7 04 02 FB | 	rdlong	arg03, fp
0a4d4     20 4E 85 F1 | 	sub	fp, #32
0a4d8     02 EB 09 F2 | 	cmp	result1, arg03 wz
0a4dc     04 0A 06 A6 |  if_e	mov	local01, #4
0a4e0     04 00 90 AD |  if_e	jmp	#LR__1302
0a4e4                 | LR__1301
0a4e4     08 0A 06 F6 | 	mov	local01, #8
0a4e8                 | LR__1302
0a4e8     0C 4E 05 F1 | 	add	fp, #12
0a4ec     A7 0A 62 FC | 	wrlong	local01, fp
0a4f0     0C 4E 85 F1 | 	sub	fp, #12
0a4f4                 | LR__1303
0a4f4     0C 4E 05 F1 | 	add	fp, #12
0a4f8     A7 0A 02 FB | 	rdlong	local01, fp
0a4fc     0C 4E 85 F1 | 	sub	fp, #12
0a500     04 0A 0E F2 | 	cmp	local01, #4 wz
0a504     CC 01 90 5D |  if_ne	jmp	#LR__1309
0a508     40 4E 05 F1 | 	add	fp, #64
0a50c     A7 00 02 F6 | 	mov	arg01, fp
0a510     40 4E 85 F1 | 	sub	fp, #64
0a514     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
0a518     0C 4E 05 F1 | 	add	fp, #12
0a51c     A7 EA 61 FC | 	wrlong	result1, fp
0a520     0C 4E 85 F1 | 	sub	fp, #12
0a524     00 EA 0D F2 | 	cmp	result1, #0 wz
0a528     A8 01 90 5D |  if_ne	jmp	#LR__1308
0a52c     5C 4E 05 F1 | 	add	fp, #92
0a530     A7 00 02 FB | 	rdlong	arg01, fp
0a534     38 4E 05 F1 | 	add	fp, #56
0a538     A7 00 62 FC | 	wrlong	arg01, fp
0a53c     0D 00 06 F1 | 	add	arg01, #13
0a540     20 4E 85 F1 | 	sub	fp, #32
0a544     A7 02 02 F6 | 	mov	arg02, fp
0a548     74 4E 85 F1 | 	sub	fp, #116
0a54c     0D 02 06 F1 | 	add	arg02, #13
0a550     13 04 06 F6 | 	mov	arg03, #19
0a554     80 67 BF FD | 	call	#__system____builtin_memmove
0a558     94 4E 05 F1 | 	add	fp, #148
0a55c     A7 0A 02 FB | 	rdlong	local01, fp
0a560     15 4E 85 F1 | 	sub	fp, #21
0a564     A7 EA C1 FA | 	rdbyte	result1, fp
0a568     0B 0A 06 F1 | 	add	local01, #11
0a56c     05 EB 41 FC | 	wrbyte	result1, local01
0a570     15 4E 05 F1 | 	add	fp, #21
0a574     A7 0A 02 FB | 	rdlong	local01, fp
0a578     94 4E 85 F1 | 	sub	fp, #148
0a57c     0B 0A 06 F1 | 	add	local01, #11
0a580     05 0B C2 FA | 	rdbyte	local01, local01
0a584     10 0A CE F7 | 	test	local01, #16 wz
0a588     24 00 90 5D |  if_ne	jmp	#LR__1304
0a58c     94 4E 05 F1 | 	add	fp, #148
0a590     A7 EA 01 FB | 	rdlong	result1, fp
0a594     F5 0A 02 F6 | 	mov	local01, result1
0a598     94 4E 85 F1 | 	sub	fp, #148
0a59c     0B EA 05 F1 | 	add	result1, #11
0a5a0     F5 EA C1 FA | 	rdbyte	result1, result1
0a5a4     20 EA 45 F5 | 	or	result1, #32
0a5a8     0B 0A 06 F1 | 	add	local01, #11
0a5ac     05 EB 41 FC | 	wrbyte	result1, local01
0a5b0                 | LR__1304
0a5b0     70 4E 05 F1 | 	add	fp, #112
0a5b4     A7 0A 02 FB | 	rdlong	local01, fp
0a5b8     03 0A 06 F1 | 	add	local01, #3
0a5bc     05 03 48 FC | 	wrbyte	#1, local01
0a5c0     24 4E 05 F1 | 	add	fp, #36
0a5c4     A7 0A 02 FB | 	rdlong	local01, fp
0a5c8     94 4E 85 F1 | 	sub	fp, #148
0a5cc     0B 0A 06 F1 | 	add	local01, #11
0a5d0     05 0B C2 FA | 	rdbyte	local01, local01
0a5d4     10 0A CE F7 | 	test	local01, #16 wz
0a5d8     F8 00 90 AD |  if_e	jmp	#LR__1307
0a5dc     18 4E 05 F1 | 	add	fp, #24
0a5e0     A7 04 02 FB | 	rdlong	arg03, fp
0a5e4     30 4E 05 F1 | 	add	fp, #48
0a5e8     A7 0A 02 FB | 	rdlong	local01, fp
0a5ec     48 4E 85 F1 | 	sub	fp, #72
0a5f0     05 05 0A F2 | 	cmp	arg03, local01 wz
0a5f4     DC 00 90 AD |  if_e	jmp	#LR__1307
0a5f8     70 4E 05 F1 | 	add	fp, #112
0a5fc     A7 00 02 FB | 	rdlong	arg01, fp
0a600     00 0B 02 F6 | 	mov	local01, arg01
0a604     24 4E 05 F1 | 	add	fp, #36
0a608     A7 02 02 FB | 	rdlong	arg02, fp
0a60c     94 4E 85 F1 | 	sub	fp, #148
0a610     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
0a614     F5 02 02 F6 | 	mov	arg02, result1
0a618     05 01 02 F6 | 	mov	arg01, local01
0a61c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
0a620     98 4E 05 F1 | 	add	fp, #152
0a624     A7 EA 61 FC | 	wrlong	result1, fp
0a628     00 EA 4D F2 | 	cmps	result1, #0 wz
0a62c     98 4E 85 F1 | 	sub	fp, #152
0a630     0C 4E 05 A1 |  if_e	add	fp, #12
0a634     A7 04 68 AC |  if_e	wrlong	#2, fp
0a638     0C 4E 85 A1 |  if_e	sub	fp, #12
0a63c     94 00 90 AD |  if_e	jmp	#LR__1306
0a640     70 4E 05 F1 | 	add	fp, #112
0a644     A7 00 02 FB | 	rdlong	arg01, fp
0a648     28 4E 05 F1 | 	add	fp, #40
0a64c     A7 02 02 FB | 	rdlong	arg02, fp
0a650     98 4E 85 F1 | 	sub	fp, #152
0a654     4C A0 BF FD | 	call	#_fatfs_cc_move_window
0a658     0C 4E 05 F1 | 	add	fp, #12
0a65c     A7 EA 61 FC | 	wrlong	result1, fp
0a660     64 4E 05 F1 | 	add	fp, #100
0a664     A7 0A 02 FB | 	rdlong	local01, fp
0a668     54 0A 06 F1 | 	add	local01, #84
0a66c     24 4E 05 F1 | 	add	fp, #36
0a670     A7 0A 62 FC | 	wrlong	local01, fp
0a674     88 4E 85 F1 | 	sub	fp, #136
0a678     A7 0A 0A FB | 	rdlong	local01, fp wz
0a67c     0C 4E 85 F1 | 	sub	fp, #12
0a680     50 00 90 5D |  if_ne	jmp	#LR__1305
0a684     94 4E 05 F1 | 	add	fp, #148
0a688     A7 0A 02 FB | 	rdlong	local01, fp
0a68c     94 4E 85 F1 | 	sub	fp, #148
0a690     01 0A 06 F1 | 	add	local01, #1
0a694     05 0B C2 FA | 	rdbyte	local01, local01
0a698     2E 0A 0E F2 | 	cmp	local01, #46 wz
0a69c     34 00 90 5D |  if_ne	jmp	#LR__1305
0a6a0     70 4E 05 F1 | 	add	fp, #112
0a6a4     A7 00 02 FB | 	rdlong	arg01, fp
0a6a8     24 4E 05 F1 | 	add	fp, #36
0a6ac     A7 02 02 FB | 	rdlong	arg02, fp
0a6b0     4C 4E 85 F1 | 	sub	fp, #76
0a6b4     A7 04 02 FB | 	rdlong	arg03, fp
0a6b8     48 4E 85 F1 | 	sub	fp, #72
0a6bc     50 AD BF FD | 	call	#_fatfs_cc_st_clust
0a6c0     70 4E 05 F1 | 	add	fp, #112
0a6c4     A7 0A 02 FB | 	rdlong	local01, fp
0a6c8     70 4E 85 F1 | 	sub	fp, #112
0a6cc     03 0A 06 F1 | 	add	local01, #3
0a6d0     05 03 48 FC | 	wrbyte	#1, local01
0a6d4                 | LR__1305
0a6d4                 | LR__1306
0a6d4                 | LR__1307
0a6d4                 | LR__1308
0a6d4                 | LR__1309
0a6d4     0C 4E 05 F1 | 	add	fp, #12
0a6d8     A7 0A 0A FB | 	rdlong	local01, fp wz
0a6dc     0C 4E 85 F1 | 	sub	fp, #12
0a6e0     40 00 90 5D |  if_ne	jmp	#LR__1311
0a6e4     10 4E 05 F1 | 	add	fp, #16
0a6e8     A7 00 02 F6 | 	mov	arg01, fp
0a6ec     10 4E 85 F1 | 	sub	fp, #16
0a6f0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
0a6f4     0C 4E 05 F1 | 	add	fp, #12
0a6f8     A7 EA 61 FC | 	wrlong	result1, fp
0a6fc     0C 4E 85 F1 | 	sub	fp, #12
0a700     00 EA 0D F2 | 	cmp	result1, #0 wz
0a704     1C 00 90 5D |  if_ne	jmp	#LR__1310
0a708     70 4E 05 F1 | 	add	fp, #112
0a70c     A7 00 02 FB | 	rdlong	arg01, fp
0a710     70 4E 85 F1 | 	sub	fp, #112
0a714     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
0a718     0C 4E 05 F1 | 	add	fp, #12
0a71c     A7 EA 61 FC | 	wrlong	result1, fp
0a720     0C 4E 85 F1 | 	sub	fp, #12
0a724                 | LR__1310
0a724                 | LR__1311
0a724                 | LR__1312
0a724                 | LR__1313
0a724                 | ' 					res = sync_fs(fs);
0a724                 | ' 				}
0a724                 | ' 			}
0a724                 | ' 
0a724                 | ' 		}
0a724                 | ' 		;
0a724                 | ' 	}
0a724                 | ' 
0a724                 | ' 	return res ;
0a724     0C 4E 05 F1 | 	add	fp, #12
0a728     A7 EA 01 FB | 	rdlong	result1, fp
0a72c     0C 4E 85 F1 | 	sub	fp, #12
0a730     A7 F0 03 F6 | 	mov	ptra, fp
0a734     B2 00 A0 FD | 	call	#popregs_
0a738                 | _fatfs_cc_f_rename_ret
0a738     2D 00 64 FD | 	ret
0a73c                 | 
0a73c                 | _fatfs_cc_time
0a73c     00 4A 05 F6 | 	mov	COUNT_, #0
0a740     A8 00 A0 FD | 	call	#pushregs_
0a744     14 F0 07 F1 | 	add	ptra, #20
0a748     04 4E 05 F1 | 	add	fp, #4
0a74c     A7 00 62 FC | 	wrlong	arg01, fp
0a750     04 4E 05 F1 | 	add	fp, #4
0a754     A7 00 02 F6 | 	mov	arg01, fp
0a758     08 4E 85 F1 | 	sub	fp, #8
0a75c     00 02 06 F6 | 	mov	arg02, #0
0a760     F8 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
0a764     08 4E 05 F1 | 	add	fp, #8
0a768     A7 EA 01 FB | 	rdlong	result1, fp
0a76c     08 4E 05 F1 | 	add	fp, #8
0a770     A7 EA 61 FC | 	wrlong	result1, fp
0a774     0C 4E 85 F1 | 	sub	fp, #12
0a778     A7 EA 09 FB | 	rdlong	result1, fp wz
0a77c     04 4E 85 F1 | 	sub	fp, #4
0a780     18 00 90 AD |  if_e	jmp	#LR__1320
0a784     04 4E 05 F1 | 	add	fp, #4
0a788     A7 EA 01 FB | 	rdlong	result1, fp
0a78c     0C 4E 05 F1 | 	add	fp, #12
0a790     A7 02 02 FB | 	rdlong	arg02, fp
0a794     10 4E 85 F1 | 	sub	fp, #16
0a798     F5 02 62 FC | 	wrlong	arg02, result1
0a79c                 | LR__1320
0a79c                 | '         *tp = now;
0a79c                 | '     return now;
0a79c     10 4E 05 F1 | 	add	fp, #16
0a7a0     A7 EA 01 FB | 	rdlong	result1, fp
0a7a4     10 4E 85 F1 | 	sub	fp, #16
0a7a8     A7 F0 03 F6 | 	mov	ptra, fp
0a7ac     B2 00 A0 FD | 	call	#popregs_
0a7b0                 | _fatfs_cc_time_ret
0a7b0     2D 00 64 FD | 	ret
0a7b4                 | 
0a7b4                 | _fatfs_cc_mktime
0a7b4     06 4A 05 F6 | 	mov	COUNT_, #6
0a7b8     A8 00 A0 FD | 	call	#pushregs_
0a7bc     00 0B 02 F6 | 	mov	local01, arg01
0a7c0     14 0A 06 F1 | 	add	local01, #20
0a7c4     05 01 02 FB | 	rdlong	arg01, local01
0a7c8     14 0A 86 F1 | 	sub	local01, #20
0a7cc     46 00 56 F2 | 	cmps	arg01, #70 wc
0a7d0                 | '                 return (time_t) -1;
0a7d0     01 EA 65 C6 |  if_b	neg	result1, #1
0a7d4     7C 01 90 CD |  if_b	jmp	#LR__1334
0a7d8     03 00 00 FF 
0a7dc     6C 0D 06 F6 | 	mov	local02, ##1900
0a7e0     14 0A 06 F1 | 	add	local01, #20
0a7e4     05 EB 01 FB | 	rdlong	result1, local01
0a7e8     F5 0C 02 F1 | 	add	local02, result1
0a7ec     08 0A 86 F1 | 	sub	local01, #8
0a7f0     05 0F 02 FB | 	rdlong	local03, local01
0a7f4     01 0E 86 F1 | 	sub	local03, #1
0a7f8     04 0A 06 F1 | 	add	local01, #4
0a7fc     05 01 02 FB | 	rdlong	arg01, local01
0a800     10 0A 86 F1 | 	sub	local01, #16
0a804     02 00 66 F0 | 	shl	arg01, #2
0a808     02 00 00 FF 
0a80c     C8 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
0a810     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0a814     00 EB 01 FB | 	rdlong	result1, arg01
0a818     F5 0E 02 F1 | 	add	local03, result1
0a81c     06 01 02 F6 | 	mov	arg01, local02
0a820     02 00 00 FF 
0a824     C8 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
0a828     D8 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
0a82c     00 EA 0D F2 | 	cmp	result1, #0 wz
0a830     1C 00 90 AD |  if_e	jmp	#LR__1330
0a834     00 10 06 F6 | 	mov	local04, #0
0a838     10 0A 06 F1 | 	add	local01, #16
0a83c     05 EB 01 FB | 	rdlong	result1, local01
0a840     10 0A 86 F1 | 	sub	local01, #16
0a844     02 EA 55 F2 | 	cmps	result1, #2 wc
0a848     01 10 06 36 |  if_ae	mov	local04, #1
0a84c     04 00 90 FD | 	jmp	#LR__1331
0a850                 | LR__1330
0a850     00 10 06 F6 | 	mov	local04, #0
0a854                 | LR__1331
0a854     04 0A 06 F1 | 	add	local01, #4
0a858     05 EB 01 FB | 	rdlong	result1, local01
0a85c     04 0A 86 F1 | 	sub	local01, #4
0a860     05 13 02 FB | 	rdlong	local05, local01
0a864     08 0A 06 F1 | 	add	local01, #8
0a868     05 01 02 FB | 	rdlong	arg01, local01
0a86c     07 00 00 FF 
0a870     10 00 06 FD | 	qmul	arg01, ##3600
0a874     08 0F 02 F1 | 	add	local03, local04
0a878     F5 10 02 F6 | 	mov	local04, result1
0a87c     04 10 66 F0 | 	shl	local04, #4
0a880     F5 10 82 F1 | 	sub	local04, result1
0a884     02 10 66 F0 | 	shl	local04, #2
0a888     08 13 02 F1 | 	add	local05, local04
0a88c     08 0A 86 F1 | 	sub	local01, #8
0a890     18 10 62 FD | 	getqx	local04
0a894     A8 00 00 FF 
0a898     80 0F 06 FD | 	qmul	local03, ##86400
0a89c     08 13 02 F1 | 	add	local05, local04
0a8a0     06 0F 02 F6 | 	mov	local03, local02
0a8a4     03 00 00 FF 
0a8a8     B2 0F 86 F1 | 	sub	local03, ##1970
0a8ac     18 10 62 FD | 	getqx	local04
0a8b0     99 F0 00 FF 
0a8b4     80 0F 06 FD | 	qmul	local03, ##31536000
0a8b8     08 13 02 F1 | 	add	local05, local04
0a8bc     06 0F 02 F6 | 	mov	local03, local02
0a8c0     03 00 00 FF 
0a8c4     B1 0F 86 F1 | 	sub	local03, ##1969
0a8c8     07 15 52 F6 | 	abs	local06, local03 wc
0a8cc     02 14 46 F0 | 	shr	local06, #2
0a8d0     0A 15 82 F6 | 	negc	local06, local06
0a8d4     03 00 00 FF 
0a8d8     D1 0D 56 F2 | 	cmps	local02, ##2001 wc
0a8dc     18 10 62 FD | 	getqx	local04
0a8e0     08 13 02 F1 | 	add	local05, local04
0a8e4     18 00 90 CD |  if_b	jmp	#LR__1332
0a8e8     03 00 00 FF 
0a8ec     D0 0D 86 F1 | 	sub	local02, ##2000
0a8f0     06 11 52 F6 | 	abs	local04, local02 wc
0a8f4     64 10 16 FD | 	qdiv	local04, #100
0a8f8     18 10 62 FD | 	getqx	local04
0a8fc     08 15 A2 F3 | 	sumnc	local06, local04
0a900                 | LR__1332
0a900     A8 00 00 FF 
0a904     80 15 06 FD | 	qmul	local06, ##86400
0a908     18 14 62 FD | 	getqx	local06
0a90c     0A 13 02 F1 | 	add	local05, local06
0a910     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
0a914     02 00 00 FF 
0a918     94 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
0a91c     F3 14 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
0a920     0A 13 02 F1 | 	add	local05, local06
0a924     68 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
0a928     F3 0E 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
0a92c     02 00 00 FF 
0a930     FC E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
0a934     01 0E 0E F2 | 	cmp	local03, #1 wz
0a938     14 00 90 5D |  if_ne	jmp	#LR__1333
0a93c     05 01 02 F6 | 	mov	arg01, local01
0a940     C4 19 B0 FD | 	call	#_fatfs_cc___indst
0a944     00 EA 0D F2 | 	cmp	result1, #0 wz
0a948     07 00 00 5F 
0a94c     10 12 86 51 |  if_ne	sub	local05, ##3600
0a950                 | LR__1333
0a950                 | '                 s -=  (3600L) ;
0a950                 | ' 
0a950                 | '         return s;
0a950     09 EB 01 F6 | 	mov	result1, local05
0a954                 | LR__1334
0a954     A7 F0 03 F6 | 	mov	ptra, fp
0a958     B2 00 A0 FD | 	call	#popregs_
0a95c                 | _fatfs_cc_mktime_ret
0a95c     2D 00 64 FD | 	ret
0a960                 | 
0a960                 | _fatfs_cc__gmtime_r
0a960     03 4A 05 F6 | 	mov	COUNT_, #3
0a964     A8 00 A0 FD | 	call	#pushregs_
0a968     00 0B 02 FB | 	rdlong	local01, arg01
0a96c     A8 00 00 FF 
0a970     80 0B 16 FD | 	qdiv	local01, ##86400
0a974     18 EA 61 FD | 	getqx	result1
0a978     04 EA 05 F1 | 	add	result1, #4
0a97c     07 EA 15 FD | 	qdiv	result1, #7
0a980     18 02 06 F1 | 	add	arg02, #24
0a984     D1 7F 27 FF 
0a988     00 0A 16 F2 | 	cmp	local01, ##1325376000 wc
0a98c     D1 7F 27 3F 
0a990     00 0A 86 31 |  if_ae	sub	local01, ##1325376000
0a994     03 00 00 3F 
0a998     DC 0D 06 36 |  if_ae	mov	local02, ##2012
0a99c     03 00 00 CF 
0a9a0     B2 0D 06 C6 |  if_b	mov	local02, ##1970
0a9a4                 | ' 	  year = 1970;
0a9a4                 | ' 	}
0a9a4                 | ' 
0a9a4                 | ' 	for(;;) {
0a9a4     19 EA 61 FD | 	getqy	result1
0a9a8     01 EB 61 FC | 	wrlong	result1, arg02
0a9ac     18 02 86 F1 | 	sub	arg02, #24
0a9b0                 | LR__1340
0a9b0     06 01 02 F6 | 	mov	arg01, local02
0a9b4     4C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
0a9b8     00 EA 0D F2 | 	cmp	result1, #0 wz
0a9bc     42 F1 00 5F 
0a9c0     00 0F 06 56 |  if_ne	mov	local03, ##31622400
0a9c4     99 F0 00 AF 
0a9c8     80 0F 06 A6 |  if_e	mov	local03, ##31536000
0a9cc     07 0B 12 F2 | 	cmp	local01, local03 wc
0a9d0                 | ' 	    break;
0a9d0     01 0C 06 31 |  if_ae	add	local02, #1
0a9d4     07 0B 82 31 |  if_ae	sub	local01, local03
0a9d8     D4 FF 9F 3D |  if_ae	jmp	#LR__1340
0a9dc     A8 00 00 FF 
0a9e0     80 0B 16 FD | 	qdiv	local01, ##86400
0a9e4     06 0F 02 F6 | 	mov	local03, local02
0a9e8     03 00 00 FF 
0a9ec     6C 0F 86 F1 | 	sub	local03, ##1900
0a9f0     14 02 06 F1 | 	add	arg02, #20
0a9f4     01 0F 62 FC | 	wrlong	local03, arg02
0a9f8     08 02 06 F1 | 	add	arg02, #8
0a9fc     06 01 02 F6 | 	mov	arg01, local02
0aa00     18 0C 62 FD | 	getqx	local02
0aa04     01 0D 62 FC | 	wrlong	local02, arg02
0aa08     1C 02 86 F1 | 	sub	arg02, #28
0aa0c     F4 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
0aa10     00 EA 0D F2 | 	cmp	result1, #0 wz
0aa14     1D 0E 06 56 |  if_ne	mov	local03, #29
0aa18     1C 0E 06 A6 |  if_e	mov	local03, #28
0aa1c     02 00 00 FF 
0aa20     9C E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
0aa24     F3 0E 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
0aa28     02 00 00 FF 
0aa2c     9C E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
0aa30                 | ' 
0aa30                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
0aa30                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
0aa30     00 00 06 F6 | 	mov	arg01, #0
0aa34     97 2A 48 FB | 	callpa	#(@LR__1342-@LR__1341)>>2,fcache_load_ptr_
0aa38                 | LR__1341
0aa38     00 0F 02 F6 | 	mov	local03, arg01
0aa3c     02 0E 66 F0 | 	shl	local03, #2
0aa40     02 00 00 FF 
0aa44     98 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
0aa48     F3 0E 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
0aa4c     07 0F 02 FB | 	rdlong	local03, local03
0aa50     07 0D 52 F2 | 	cmps	local02, local03 wc
0aa54     02 00 00 FF 
0aa58     98 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
0aa5c     2C 00 90 CD |  if_b	jmp	#LR__1343
0aa60     00 0F 02 F6 | 	mov	local03, arg01
0aa64     02 0E 66 F0 | 	shl	local03, #2
0aa68     02 00 00 FF 
0aa6c     98 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
0aa70     F3 0E 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
0aa74     07 0F 02 FB | 	rdlong	local03, local03
0aa78     07 0D 82 F1 | 	sub	local02, local03
0aa7c     01 00 06 F1 | 	add	arg01, #1
0aa80     02 00 00 FF 
0aa84     98 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
0aa88     AC FF 9F FD | 	jmp	#LR__1341
0aa8c                 | LR__1342
0aa8c                 | LR__1343
0aa8c     A8 00 00 FF 
0aa90     80 0B 16 FD | 	qdiv	local01, ##86400
0aa94     10 02 06 F1 | 	add	arg02, #16
0aa98     01 01 62 FC | 	wrlong	arg01, arg02
0aa9c     01 0C 06 F1 | 	add	local02, #1
0aaa0     04 02 86 F1 | 	sub	arg02, #4
0aaa4     01 0D 62 FC | 	wrlong	local02, arg02
0aaa8     19 0A 62 FD | 	getqy	local01
0aaac     07 00 00 FF 
0aab0     10 0A 16 FD | 	qdiv	local01, ##3600
0aab4     18 0E 62 FD | 	getqx	local03
0aab8     07 00 00 FF 
0aabc     10 0A 16 FD | 	qdiv	local01, ##3600
0aac0     04 02 86 F1 | 	sub	arg02, #4
0aac4     01 0F 62 FC | 	wrlong	local03, arg02
0aac8     19 0A 62 FD | 	getqy	local01
0aacc     3C 0A 16 FD | 	qdiv	local01, #60
0aad0     18 0E 62 FD | 	getqx	local03
0aad4     3C 0A 16 FD | 	qdiv	local01, #60
0aad8     04 02 86 F1 | 	sub	arg02, #4
0aadc     01 0F 62 FC | 	wrlong	local03, arg02
0aae0     04 02 86 F1 | 	sub	arg02, #4
0aae4                 | '         stm->tm_isdst = 0;
0aae4                 | ' 
0aae4                 | ' ;
0aae4                 | '         return stm;
0aae4     01 EB 01 F6 | 	mov	result1, arg02
0aae8     19 0E 62 FD | 	getqy	local03
0aaec     01 0F 62 FC | 	wrlong	local03, arg02
0aaf0     20 02 06 F1 | 	add	arg02, #32
0aaf4     01 01 68 FC | 	wrlong	#0, arg02
0aaf8     A7 F0 03 F6 | 	mov	ptra, fp
0aafc     B2 00 A0 FD | 	call	#popregs_
0ab00                 | _fatfs_cc__gmtime_r_ret
0ab00     2D 00 64 FD | 	ret
0ab04                 | 
0ab04                 | _fatfs_cc__tzset
0ab04     62 00 00 FF 
0ab08     CB 01 06 F6 | 	mov	arg01, ##@LR__1628
0ab0c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
0ab10     F5 00 02 F6 | 	mov	arg01, result1
0ab14     02 00 00 FF 
0ab18     FC E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
0ab1c     F3 02 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
0ab20     02 00 00 FF 
0ab24     FC E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
0ab28     28 15 B0 FD | 	call	#_fatfs_cc___tzoffset
0ab2c     02 00 00 FF 
0ab30     94 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
0ab34     F3 EA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
0ab38     02 00 00 FF 
0ab3c     94 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
0ab40                 | _fatfs_cc__tzset_ret
0ab40     2D 00 64 FD | 	ret
0ab44                 | 
0ab44                 | _fatfs_cc_getenv
0ab44     06 4A 05 F6 | 	mov	COUNT_, #6
0ab48     A8 00 A0 FD | 	call	#pushregs_
0ab4c     00 0B 02 F6 | 	mov	local01, arg01
0ab50     00 0D 02 F6 | 	mov	local02, arg01
0ab54     97 06 48 FB | 	callpa	#(@LR__1351-@LR__1350)>>2,fcache_load_ptr_
0ab58                 | LR__1350
0ab58     06 EB C9 FA | 	rdbyte	result1, local02 wz
0ab5c     01 0C 06 51 |  if_ne	add	local02, #1
0ab60     F4 FF 9F 5D |  if_ne	jmp	#LR__1350
0ab64                 | LR__1351
0ab64     00 0D 82 F1 | 	sub	local02, arg01
0ab68     06 EB 01 F6 | 	mov	result1, local02
0ab6c     02 00 00 FF 
0ab70     4C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
0ab74     F3 04 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
0ab78     02 00 00 FF 
0ab7c     4C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
0ab80                 | '             return 0;
0ab80     00 EA 05 A6 |  if_e	mov	result1, #0
0ab84     5C 00 90 AD |  if_e	jmp	#LR__1354
0ab88                 | ' 
0ab88                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
0ab88     02 00 00 FF 
0ab8c     4C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
0ab90     F3 0E 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
0ab94     02 00 00 FF 
0ab98     4C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
0ab9c                 | LR__1352
0ab9c     07 11 0A FB | 	rdlong	local04, local03 wz
0aba0     3C 00 90 AD |  if_e	jmp	#LR__1353
0aba4     08 01 02 F6 | 	mov	arg01, local04
0aba8     05 03 02 F6 | 	mov	arg02, local01
0abac     06 05 02 F6 | 	mov	arg03, local02
0abb0     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
0abb4     00 EA 0D F2 | 	cmp	result1, #0 wz
0abb8     06 13 02 A6 |  if_e	mov	local05, local02
0abbc     08 13 02 A1 |  if_e	add	local05, local04
0abc0     09 15 C2 AA |  if_e	rdbyte	local06, local05
0abc4     3D 14 0E A2 |  if_e	cmp	local06, #61 wz
0abc8                 | ' 			return name+len+1;
0abc8     06 11 02 A1 |  if_e	add	local04, local02
0abcc     01 10 06 A1 |  if_e	add	local04, #1
0abd0     08 EB 01 A6 |  if_e	mov	result1, local04
0abd4     0C 00 90 AD |  if_e	jmp	#LR__1354
0abd8     04 0E 06 F1 | 	add	local03, #4
0abdc     BC FF 9F FD | 	jmp	#LR__1352
0abe0                 | LR__1353
0abe0                 | ' 	}
0abe0                 | ' 	return 0;
0abe0     00 EA 05 F6 | 	mov	result1, #0
0abe4                 | LR__1354
0abe4     A7 F0 03 F6 | 	mov	ptra, fp
0abe8     B2 00 A0 FD | 	call	#popregs_
0abec                 | _fatfs_cc_getenv_ret
0abec     2D 00 64 FD | 	ret
0abf0                 | 
0abf0                 | _fatfs_cc__get_fattime
0abf0     00 4A 05 F6 | 	mov	COUNT_, #0
0abf4     A8 00 A0 FD | 	call	#pushregs_
0abf8     34 F0 07 F1 | 	add	ptra, #52
0abfc     00 00 06 F6 | 	mov	arg01, #0
0ac00     38 FB BF FD | 	call	#_fatfs_cc_time
0ac04     04 4E 05 F1 | 	add	fp, #4
0ac08     A7 EA 61 FC | 	wrlong	result1, fp
0ac0c     A7 00 02 F6 | 	mov	arg01, fp
0ac10     0C 4E 05 F1 | 	add	fp, #12
0ac14     A7 02 02 F6 | 	mov	arg02, fp
0ac18     10 4E 85 F1 | 	sub	fp, #16
0ac1c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
0ac20     24 4E 05 F1 | 	add	fp, #36
0ac24     A7 02 02 FB | 	rdlong	arg02, fp
0ac28     50 02 86 F1 | 	sub	arg02, #80
0ac2c     09 02 66 F0 | 	shl	arg02, #9
0ac30     04 4E 85 F1 | 	sub	fp, #4
0ac34     A7 EA 01 FB | 	rdlong	result1, fp
0ac38     01 EA 05 F1 | 	add	result1, #1
0ac3c     05 EA 65 F0 | 	shl	result1, #5
0ac40     F5 02 42 F5 | 	or	arg02, result1
0ac44     04 4E 85 F1 | 	sub	fp, #4
0ac48     A7 EA 01 FB | 	rdlong	result1, fp
0ac4c     F5 02 42 F5 | 	or	arg02, result1
0ac50     14 4E 85 F1 | 	sub	fp, #20
0ac54     A7 02 62 FC | 	wrlong	arg02, fp
0ac58     10 4E 05 F1 | 	add	fp, #16
0ac5c     A7 02 02 FB | 	rdlong	arg02, fp
0ac60     0B 02 66 F0 | 	shl	arg02, #11
0ac64     04 4E 85 F1 | 	sub	fp, #4
0ac68     A7 EA 01 FB | 	rdlong	result1, fp
0ac6c     05 EA 65 F0 | 	shl	result1, #5
0ac70     F5 02 42 F5 | 	or	arg02, result1
0ac74     04 4E 85 F1 | 	sub	fp, #4
0ac78     A7 EA 01 FB | 	rdlong	result1, fp
0ac7c     F5 02 42 F5 | 	or	arg02, result1
0ac80     04 4E 85 F1 | 	sub	fp, #4
0ac84     A7 02 62 FC | 	wrlong	arg02, fp
0ac88                 | ' 
0ac88                 | '     now = time(0);
0ac88                 | '     _gmtime_r (&now, &date);
0ac88                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
0ac88                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
0ac88                 | '     return (ffdate << 16) | fftime;
0ac88     04 4E 85 F1 | 	sub	fp, #4
0ac8c     A7 EA 01 FB | 	rdlong	result1, fp
0ac90     10 EA 65 F0 | 	shl	result1, #16
0ac94     08 4E 85 F1 | 	sub	fp, #8
0ac98     01 EB 41 F5 | 	or	result1, arg02
0ac9c     A7 F0 03 F6 | 	mov	ptra, fp
0aca0     B2 00 A0 FD | 	call	#popregs_
0aca4                 | _fatfs_cc__get_fattime_ret
0aca4     2D 00 64 FD | 	ret
0aca8                 | 
0aca8                 | _fatfs_cc_unixtime_0452
0aca8     00 4A 05 F6 | 	mov	COUNT_, #0
0acac     A8 00 A0 FD | 	call	#pushregs_
0acb0     34 F0 07 F1 | 	add	ptra, #52
0acb4     04 4E 05 F1 | 	add	fp, #4
0acb8     A7 00 62 FC | 	wrlong	arg01, fp
0acbc     04 4E 05 F1 | 	add	fp, #4
0acc0     A7 02 62 FC | 	wrlong	arg02, fp
0acc4     04 4E 85 F1 | 	sub	fp, #4
0acc8     A7 02 02 FB | 	rdlong	arg02, fp
0accc     09 02 46 F0 | 	shr	arg02, #9
0acd0     7F 02 06 F5 | 	and	arg02, #127
0acd4     50 EA 05 F6 | 	mov	result1, #80
0acd8     01 EB 01 F1 | 	add	result1, arg02
0acdc     20 4E 05 F1 | 	add	fp, #32
0ace0     A7 EA 61 FC | 	wrlong	result1, fp
0ace4     20 4E 85 F1 | 	sub	fp, #32
0ace8     A7 EA 01 FB | 	rdlong	result1, fp
0acec     05 EA 45 F0 | 	shr	result1, #5
0acf0     F5 EA 41 F8 | 	getnib	result1, result1, #0
0acf4     01 EA 85 F1 | 	sub	result1, #1
0acf8     1C 4E 05 F1 | 	add	fp, #28
0acfc     A7 EA 61 FC | 	wrlong	result1, fp
0ad00     1C 4E 85 F1 | 	sub	fp, #28
0ad04     A7 EA 01 FB | 	rdlong	result1, fp
0ad08     1F EA 05 F5 | 	and	result1, #31
0ad0c     18 4E 05 F1 | 	add	fp, #24
0ad10     A7 EA 61 FC | 	wrlong	result1, fp
0ad14     14 4E 85 F1 | 	sub	fp, #20
0ad18     A7 EA 01 FB | 	rdlong	result1, fp
0ad1c     0B EA 45 F0 | 	shr	result1, #11
0ad20     1F EA 05 F5 | 	and	result1, #31
0ad24     10 4E 05 F1 | 	add	fp, #16
0ad28     A7 EA 61 FC | 	wrlong	result1, fp
0ad2c     10 4E 85 F1 | 	sub	fp, #16
0ad30     A7 EA 01 FB | 	rdlong	result1, fp
0ad34     05 EA 45 F0 | 	shr	result1, #5
0ad38     3F EA 05 F5 | 	and	result1, #63
0ad3c     0C 4E 05 F1 | 	add	fp, #12
0ad40     A7 EA 61 FC | 	wrlong	result1, fp
0ad44     0C 4E 85 F1 | 	sub	fp, #12
0ad48     A7 02 02 FB | 	rdlong	arg02, fp
0ad4c     1F 02 06 F5 | 	and	arg02, #31
0ad50     01 02 66 F0 | 	shl	arg02, #1
0ad54     08 4E 05 F1 | 	add	fp, #8
0ad58     A7 02 62 FC | 	wrlong	arg02, fp
0ad5c     A7 00 02 F6 | 	mov	arg01, fp
0ad60     10 4E 85 F1 | 	sub	fp, #16
0ad64     4C FA BF FD | 	call	#_fatfs_cc_mktime
0ad68     0C 4E 05 F1 | 	add	fp, #12
0ad6c     A7 EA 61 FC | 	wrlong	result1, fp
0ad70                 | ' 
0ad70                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
0ad70                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
0ad70                 | '     date.tm_mday = (dosdate & 0x1f);
0ad70                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
0ad70                 | '     date.tm_min = (dostime >> 5) & 0x3f;
0ad70                 | '     date.tm_sec = (dostime & 0x1f) << 1;
0ad70                 | ' 
0ad70                 | '     t = mktime(&date);
0ad70                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0ad70                 | '     return t;
0ad70     0C 4E 85 F1 | 	sub	fp, #12
0ad74     A7 F0 03 F6 | 	mov	ptra, fp
0ad78     B2 00 A0 FD | 	call	#popregs_
0ad7c                 | _fatfs_cc_unixtime_0452_ret
0ad7c     2D 00 64 FD | 	ret
0ad80                 | 
0ad80                 | _fatfs_cc__set_dos_error_0454
0ad80     00 EF 01 F6 | 	mov	_var01, arg01
0ad84                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0ad84                 | '     switch (derr) {
0ad84     14 EE 25 F3 | 	fle	_var01, #20
0ad88     30 EE 61 FD | 	jmprel	_var01
0ad8c                 | LR__1360
0ad8c     50 00 90 FD | 	jmp	#LR__1361
0ad90     84 00 90 FD | 	jmp	#LR__1375
0ad94     80 00 90 FD | 	jmp	#LR__1376
0ad98     7C 00 90 FD | 	jmp	#LR__1377
0ad9c     48 00 90 FD | 	jmp	#LR__1362
0ada0     44 00 90 FD | 	jmp	#LR__1363
0ada4     40 00 90 FD | 	jmp	#LR__1364
0ada8     44 00 90 FD | 	jmp	#LR__1365
0adac     48 00 90 FD | 	jmp	#LR__1367
0adb0     54 00 90 FD | 	jmp	#LR__1370
0adb4     38 00 90 FD | 	jmp	#LR__1366
0adb8     4C 00 90 FD | 	jmp	#LR__1371
0adbc     48 00 90 FD | 	jmp	#LR__1372
0adc0     44 00 90 FD | 	jmp	#LR__1373
0adc4     50 00 90 FD | 	jmp	#LR__1378
0adc8     4C 00 90 FD | 	jmp	#LR__1378
0adcc     48 00 90 FD | 	jmp	#LR__1378
0add0     2C 00 90 FD | 	jmp	#LR__1368
0add4     38 00 90 FD | 	jmp	#LR__1374
0add8     2C 00 90 FD | 	jmp	#LR__1369
0addc     38 00 90 FD | 	jmp	#LR__1378
0ade0                 | LR__1361
0ade0     00 F0 05 F6 | 	mov	_var02, #0
0ade4                 | '         r = 0;
0ade4                 | '         break;
0ade4     34 00 90 FD | 	jmp	#LR__1379
0ade8                 | LR__1362
0ade8                 | LR__1363
0ade8                 | LR__1364
0ade8     04 F0 05 F6 | 	mov	_var02, #4
0adec                 | '         r =  4 ;
0adec                 | '         break;
0adec     2C 00 90 FD | 	jmp	#LR__1379
0adf0                 | LR__1365
0adf0                 | LR__1366
0adf0     06 F0 05 F6 | 	mov	_var02, #6
0adf4                 | '         r =  6 ;
0adf4                 | '         break;
0adf4     24 00 90 FD | 	jmp	#LR__1379
0adf8                 | LR__1367
0adf8     09 F0 05 F6 | 	mov	_var02, #9
0adfc                 | '         r =  9 ;
0adfc                 | '         break;
0adfc     1C 00 90 FD | 	jmp	#LR__1379
0ae00                 | LR__1368
0ae00     07 F0 05 F6 | 	mov	_var02, #7
0ae04                 | '         r =  7 ;
0ae04                 | '         break;
0ae04     14 00 90 FD | 	jmp	#LR__1379
0ae08                 | LR__1369
0ae08                 | LR__1370
0ae08                 | LR__1371
0ae08                 | LR__1372
0ae08                 | LR__1373
0ae08     0A F0 05 F6 | 	mov	_var02, #10
0ae0c                 | '         r =  10 ;
0ae0c                 | '         break;
0ae0c     0C 00 90 FD | 	jmp	#LR__1379
0ae10                 | LR__1374
0ae10     0B F0 05 F6 | 	mov	_var02, #11
0ae14                 | '         r =  11 ;
0ae14                 | '         break;
0ae14     04 00 90 FD | 	jmp	#LR__1379
0ae18                 | LR__1375
0ae18                 | LR__1376
0ae18                 | LR__1377
0ae18                 | LR__1378
0ae18     0C F0 05 F6 | 	mov	_var02, #12
0ae1c                 | '         r =  12 ;
0ae1c                 | '         break;
0ae1c                 | LR__1379
0ae1c                 | '     }
0ae1c                 | '     return _seterror(r);
0ae1c     00 F0 4D F2 | 	cmps	_var02, #0 wz
0ae20     20 E4 05 F1 | 	add	ptr___system__dat__, #32
0ae24     F2 F0 61 FC | 	wrlong	_var02, ptr___system__dat__
0ae28     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
0ae2c     01 EA 65 56 |  if_ne	neg	result1, #1
0ae30     00 EA 05 A6 |  if_e	mov	result1, #0
0ae34                 | _fatfs_cc__set_dos_error_0454_ret
0ae34     2D 00 64 FD | 	ret
0ae38                 | 
0ae38                 | _fatfs_cc_v_creat
0ae38     04 4A 05 F6 | 	mov	COUNT_, #4
0ae3c     A8 00 A0 FD | 	call	#pushregs_
0ae40     00 0B 02 F6 | 	mov	local01, arg01
0ae44     01 0D 02 F6 | 	mov	local02, arg02
0ae48     03 00 00 FF 
0ae4c     3C 00 06 F6 | 	mov	arg01, ##1596
0ae50                 | '     return _gc_alloc(size);
0ae50     10 02 06 F6 | 	mov	arg02, #16
0ae54     48 6F BF FD | 	call	#__system___gc_doalloc
0ae58     F5 0E 0A F6 | 	mov	local03, result1 wz
0ae5c                 | '       return _seterror( 7 );
0ae5c     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0ae60     F2 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
0ae64     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0ae68     01 EA 65 A6 |  if_e	neg	result1, #1
0ae6c     58 00 90 AD |  if_e	jmp	#LR__1381
0ae70     07 01 02 F6 | 	mov	arg01, local03
0ae74     00 02 06 F6 | 	mov	arg02, #0
0ae78     03 00 00 FF 
0ae7c     3C 04 06 F6 | 	mov	arg03, ##1596
0ae80     98 00 A0 FD | 	call	#\builtin_bytefill_
0ae84     02 00 00 FF 
0ae88     14 0E 06 F1 | 	add	local03, ##1044
0ae8c     07 01 02 F6 | 	mov	arg01, local03
0ae90     02 00 00 FF 
0ae94     14 0E 86 F1 | 	sub	local03, ##1044
0ae98     06 03 02 F6 | 	mov	arg02, local02
0ae9c     07 04 06 F6 | 	mov	arg03, #7
0aea0     B4 CC BF FD | 	call	#_fatfs_cc_f_open
0aea4     F5 10 0A F6 | 	mov	local04, result1 wz
0aea8     14 00 90 AD |  if_e	jmp	#LR__1380
0aeac     07 01 02 F6 | 	mov	arg01, local03
0aeb0                 | '     return _gc_free(ptr);
0aeb0     F8 6F BF FD | 	call	#__system___gc_free
0aeb4                 | '     free(f);
0aeb4                 | '     return _set_dos_error(r);
0aeb4     08 01 02 F6 | 	mov	arg01, local04
0aeb8     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0aebc     08 00 90 FD | 	jmp	#LR__1381
0aec0                 | LR__1380
0aec0     05 0F 62 FC | 	wrlong	local03, local01
0aec4                 | '   }
0aec4                 | '   fil->vfsdata = f;
0aec4                 | '   return 0;
0aec4     00 EA 05 F6 | 	mov	result1, #0
0aec8                 | LR__1381
0aec8     A7 F0 03 F6 | 	mov	ptra, fp
0aecc     B2 00 A0 FD | 	call	#popregs_
0aed0                 | _fatfs_cc_v_creat_ret
0aed0     2D 00 64 FD | 	ret
0aed4                 | 
0aed4                 | _fatfs_cc_v_close
0aed4     02 4A 05 F6 | 	mov	COUNT_, #2
0aed8     A8 00 A0 FD | 	call	#pushregs_
0aedc     00 0B 02 FB | 	rdlong	local01, arg01
0aee0     02 00 00 FF 
0aee4     14 0A 06 F1 | 	add	local01, ##1044
0aee8     05 01 02 F6 | 	mov	arg01, local01
0aeec     02 00 00 FF 
0aef0     14 0A 86 F1 | 	sub	local01, ##1044
0aef4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
0aef8     F5 0C 02 F6 | 	mov	local02, result1
0aefc     05 01 02 F6 | 	mov	arg01, local01
0af00                 | '     return _gc_free(ptr);
0af00     A8 6F BF FD | 	call	#__system___gc_free
0af04                 | '     FAT_FIL *f = fil->vfsdata;
0af04                 | '     r=f_close(&f->fil);
0af04                 | '     free(f);
0af04                 | '     return _set_dos_error(r);
0af04     06 01 02 F6 | 	mov	arg01, local02
0af08     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0af0c     A7 F0 03 F6 | 	mov	ptra, fp
0af10     B2 00 A0 FD | 	call	#popregs_
0af14                 | _fatfs_cc_v_close_ret
0af14     2D 00 64 FD | 	ret
0af18                 | 
0af18                 | _fatfs_cc_v_opendir
0af18     04 4A 05 F6 | 	mov	COUNT_, #4
0af1c     A8 00 A0 FD | 	call	#pushregs_
0af20     00 0B 02 F6 | 	mov	local01, arg01
0af24     01 0D 02 F6 | 	mov	local02, arg02
0af28     30 00 06 F6 | 	mov	arg01, #48
0af2c                 | '     return _gc_alloc(size);
0af2c     10 02 06 F6 | 	mov	arg02, #16
0af30     6C 6E BF FD | 	call	#__system___gc_doalloc
0af34     F5 0E 0A F6 | 	mov	local03, result1 wz
0af38                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0af38                 | '       return _seterror( 7 );
0af38     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0af3c     F2 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
0af40     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0af44     01 EA 65 A6 |  if_e	neg	result1, #1
0af48     34 00 90 AD |  if_e	jmp	#LR__1391
0af4c     06 03 02 F6 | 	mov	arg02, local02
0af50     07 01 02 F6 | 	mov	arg01, local03
0af54     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
0af58     F5 10 0A F6 | 	mov	local04, result1 wz
0af5c     14 00 90 AD |  if_e	jmp	#LR__1390
0af60     07 01 02 F6 | 	mov	arg01, local03
0af64                 | '     return _gc_free(ptr);
0af64     44 6F BF FD | 	call	#__system___gc_free
0af68                 | '         free(f);
0af68                 | '         return _set_dos_error(r);
0af68     08 01 02 F6 | 	mov	arg01, local04
0af6c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0af70     0C 00 90 FD | 	jmp	#LR__1391
0af74                 | LR__1390
0af74     04 0A 06 F1 | 	add	local01, #4
0af78     05 0F 62 FC | 	wrlong	local03, local01
0af7c                 | '     }
0af7c                 | '     dir->vfsdata = f;
0af7c                 | '     return 0;
0af7c     00 EA 05 F6 | 	mov	result1, #0
0af80                 | LR__1391
0af80     A7 F0 03 F6 | 	mov	ptra, fp
0af84     B2 00 A0 FD | 	call	#popregs_
0af88                 | _fatfs_cc_v_opendir_ret
0af88     2D 00 64 FD | 	ret
0af8c                 | 
0af8c                 | _fatfs_cc_v_closedir
0af8c     02 4A 05 F6 | 	mov	COUNT_, #2
0af90     A8 00 A0 FD | 	call	#pushregs_
0af94     04 00 06 F1 | 	add	arg01, #4
0af98     00 0B 02 FB | 	rdlong	local01, arg01
0af9c     05 01 02 F6 | 	mov	arg01, local01
0afa0     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
0afa4     F5 0C 02 F6 | 	mov	local02, result1
0afa8     05 01 02 F6 | 	mov	arg01, local01
0afac                 | '     return _gc_free(ptr);
0afac     FC 6E BF FD | 	call	#__system___gc_free
0afb0     00 0C 0E F2 | 	cmp	local02, #0 wz
0afb4     06 01 02 56 |  if_ne	mov	arg01, local02
0afb8     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0454
0afbc                 | '     return r;
0afbc     06 EB 01 F6 | 	mov	result1, local02
0afc0     A7 F0 03 F6 | 	mov	ptra, fp
0afc4     B2 00 A0 FD | 	call	#popregs_
0afc8                 | _fatfs_cc_v_closedir_ret
0afc8     2D 00 64 FD | 	ret
0afcc                 | 
0afcc                 | _fatfs_cc_v_readdir
0afcc     01 4A 05 F6 | 	mov	COUNT_, #1
0afd0     A8 00 A0 FD | 	call	#pushregs_
0afd4     2C F1 07 F1 | 	add	ptra, #300
0afd8     04 4E 05 F1 | 	add	fp, #4
0afdc     A7 00 62 FC | 	wrlong	arg01, fp
0afe0     04 4E 05 F1 | 	add	fp, #4
0afe4     A7 02 62 FC | 	wrlong	arg02, fp
0afe8     04 4E 85 F1 | 	sub	fp, #4
0afec     A7 04 02 FB | 	rdlong	arg03, fp
0aff0     04 04 06 F1 | 	add	arg03, #4
0aff4     02 01 02 FB | 	rdlong	arg01, arg03
0aff8     08 4E 05 F1 | 	add	fp, #8
0affc     A7 02 02 F6 | 	mov	arg02, fp
0b000     0C 4E 85 F1 | 	sub	fp, #12
0b004     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
0b008     28 4F 05 F1 | 	add	fp, #296
0b00c     A7 EA 61 FC | 	wrlong	result1, fp
0b010     28 4F 85 F1 | 	sub	fp, #296
0b014     00 EA 0D F2 | 	cmp	result1, #0 wz
0b018     14 00 90 AD |  if_e	jmp	#LR__1400
0b01c                 | '         return _set_dos_error(r);
0b01c     28 4F 05 F1 | 	add	fp, #296
0b020     A7 00 02 FB | 	rdlong	arg01, fp
0b024     28 4F 85 F1 | 	sub	fp, #296
0b028     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b02c     C4 00 90 FD | 	jmp	#LR__1403
0b030                 | LR__1400
0b030     28 4E 05 F1 | 	add	fp, #40
0b034     A7 04 CA FA | 	rdbyte	arg03, fp wz
0b038     28 4E 85 F1 | 	sub	fp, #40
0b03c                 | '         return -1;
0b03c     01 EA 65 A6 |  if_e	neg	result1, #1
0b040     B0 00 90 AD |  if_e	jmp	#LR__1403
0b044     08 4E 05 F1 | 	add	fp, #8
0b048     A7 00 02 FB | 	rdlong	arg01, fp
0b04c     20 4E 05 F1 | 	add	fp, #32
0b050     A7 02 02 F6 | 	mov	arg02, fp
0b054     28 4E 85 F1 | 	sub	fp, #40
0b058     3F 04 06 F6 | 	mov	arg03, #63
0b05c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
0b060     08 4E 05 F1 | 	add	fp, #8
0b064     A7 04 02 FB | 	rdlong	arg03, fp
0b068     3F 04 06 F1 | 	add	arg03, #63
0b06c     02 01 48 FC | 	wrbyte	#0, arg03
0b070     0C 4E 05 F1 | 	add	fp, #12
0b074     A7 04 C2 FA | 	rdbyte	arg03, fp
0b078     14 4E 85 F1 | 	sub	fp, #20
0b07c     10 04 CE F7 | 	test	arg03, #16 wz
0b080     18 00 90 AD |  if_e	jmp	#LR__1401
0b084     08 4E 05 F1 | 	add	fp, #8
0b088     A7 04 02 FB | 	rdlong	arg03, fp
0b08c     08 4E 85 F1 | 	sub	fp, #8
0b090     50 04 06 F1 | 	add	arg03, #80
0b094     02 03 48 FC | 	wrbyte	#1, arg03
0b098     14 00 90 FD | 	jmp	#LR__1402
0b09c                 | LR__1401
0b09c     08 4E 05 F1 | 	add	fp, #8
0b0a0     A7 04 02 FB | 	rdlong	arg03, fp
0b0a4     08 4E 85 F1 | 	sub	fp, #8
0b0a8     50 04 06 F1 | 	add	arg03, #80
0b0ac     02 01 48 FC | 	wrbyte	#0, arg03
0b0b0                 | LR__1402
0b0b0     08 4E 05 F1 | 	add	fp, #8
0b0b4     A7 04 02 FB | 	rdlong	arg03, fp
0b0b8     04 4E 05 F1 | 	add	fp, #4
0b0bc     A7 02 02 FB | 	rdlong	arg02, fp
0b0c0     48 04 06 F1 | 	add	arg03, #72
0b0c4     02 03 62 FC | 	wrlong	arg02, arg03
0b0c8     04 4E 85 F1 | 	sub	fp, #4
0b0cc     A7 0A 02 FB | 	rdlong	local01, fp
0b0d0     08 4E 05 F1 | 	add	fp, #8
0b0d4     A7 00 E2 FA | 	rdword	arg01, fp
0b0d8     02 4E 05 F1 | 	add	fp, #2
0b0dc     A7 02 E2 FA | 	rdword	arg02, fp
0b0e0     12 4E 85 F1 | 	sub	fp, #18
0b0e4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0452
0b0e8     4C 0A 06 F1 | 	add	local01, #76
0b0ec     05 EB 61 FC | 	wrlong	result1, local01
0b0f0                 | '         ent->d_type =  (0) ;
0b0f0                 | '     }
0b0f0                 | '     ent->d_size = finfo.fsize;
0b0f0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
0b0f0                 | '     return 0;
0b0f0     00 EA 05 F6 | 	mov	result1, #0
0b0f4                 | LR__1403
0b0f4     A7 F0 03 F6 | 	mov	ptra, fp
0b0f8     B2 00 A0 FD | 	call	#popregs_
0b0fc                 | _fatfs_cc_v_readdir_ret
0b0fc     2D 00 64 FD | 	ret
0b100                 | 
0b100                 | _fatfs_cc_v_stat
0b100     03 4A 05 F6 | 	mov	COUNT_, #3
0b104     A8 00 A0 FD | 	call	#pushregs_
0b108     30 F1 07 F1 | 	add	ptra, #304
0b10c     04 4E 05 F1 | 	add	fp, #4
0b110     A7 00 62 FC | 	wrlong	arg01, fp
0b114     04 4E 05 F1 | 	add	fp, #4
0b118     A7 02 62 FC | 	wrlong	arg02, fp
0b11c     08 4E 85 F1 | 	sub	fp, #8
0b120     01 01 02 F6 | 	mov	arg01, arg02
0b124     00 02 06 F6 | 	mov	arg02, #0
0b128     30 04 06 F6 | 	mov	arg03, #48
0b12c     98 00 A0 FD | 	call	#\builtin_bytefill_
0b130     04 4E 05 F1 | 	add	fp, #4
0b134     A7 EA 01 FB | 	rdlong	result1, fp
0b138     04 4E 85 F1 | 	sub	fp, #4
0b13c     F5 EA C9 FA | 	rdbyte	result1, result1 wz
0b140     2C 00 90 AD |  if_e	jmp	#LR__1410
0b144     04 4E 05 F1 | 	add	fp, #4
0b148     A7 EA 01 FB | 	rdlong	result1, fp
0b14c     04 4E 85 F1 | 	sub	fp, #4
0b150     F5 EA C1 FA | 	rdbyte	result1, result1
0b154     2E EA 0D F2 | 	cmp	result1, #46 wz
0b158     04 4E 05 A1 |  if_e	add	fp, #4
0b15c     A7 0A 02 AB |  if_e	rdlong	local01, fp
0b160     04 4E 85 A1 |  if_e	sub	fp, #4
0b164     01 0A 06 A1 |  if_e	add	local01, #1
0b168     05 0D CA AA |  if_e	rdbyte	local02, local01 wz
0b16c     18 00 90 5D |  if_ne	jmp	#LR__1411
0b170                 | LR__1410
0b170     18 4E 05 F1 | 	add	fp, #24
0b174     A7 20 48 FC | 	wrbyte	#16, fp
0b178     0C 4E 85 F1 | 	sub	fp, #12
0b17c     A7 00 68 FC | 	wrlong	#0, fp
0b180     0C 4E 85 F1 | 	sub	fp, #12
0b184     24 00 90 FD | 	jmp	#LR__1412
0b188                 | LR__1411
0b188     04 4E 05 F1 | 	add	fp, #4
0b18c     A7 00 02 FB | 	rdlong	arg01, fp
0b190     0C 4E 05 F1 | 	add	fp, #12
0b194     A7 02 02 F6 | 	mov	arg02, fp
0b198     10 4E 85 F1 | 	sub	fp, #16
0b19c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
0b1a0     0C 4E 05 F1 | 	add	fp, #12
0b1a4     A7 EA 61 FC | 	wrlong	result1, fp
0b1a8     0C 4E 85 F1 | 	sub	fp, #12
0b1ac                 | LR__1412
0b1ac     0C 4E 05 F1 | 	add	fp, #12
0b1b0     A7 0C 0A FB | 	rdlong	local02, fp wz
0b1b4     0C 4E 85 F1 | 	sub	fp, #12
0b1b8     14 00 90 AD |  if_e	jmp	#LR__1413
0b1bc                 | '         return _set_dos_error(r);
0b1bc     0C 4E 05 F1 | 	add	fp, #12
0b1c0     A7 00 02 FB | 	rdlong	arg01, fp
0b1c4     0C 4E 85 F1 | 	sub	fp, #12
0b1c8     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b1cc     14 01 90 FD | 	jmp	#LR__1414
0b1d0                 | LR__1413
0b1d0     2C 4F 05 F1 | 	add	fp, #300
0b1d4     A7 48 6A FC | 	wrlong	#292, fp
0b1d8     14 4F 85 F1 | 	sub	fp, #276
0b1dc     A7 0E C2 FA | 	rdbyte	local03, fp
0b1e0     18 4E 85 F1 | 	sub	fp, #24
0b1e4     01 0E CE F7 | 	test	local03, #1 wz
0b1e8     2C 4F 05 A1 |  if_e	add	fp, #300
0b1ec     A7 0E 02 AB |  if_e	rdlong	local03, fp
0b1f0     92 0E 46 A5 |  if_e	or	local03, #146
0b1f4     A7 0E 62 AC |  if_e	wrlong	local03, fp
0b1f8     2C 4F 85 A1 |  if_e	sub	fp, #300
0b1fc     18 4E 05 F1 | 	add	fp, #24
0b200     A7 0E C2 FA | 	rdbyte	local03, fp
0b204     18 4E 85 F1 | 	sub	fp, #24
0b208     10 0E CE F7 | 	test	local03, #16 wz
0b20c     2C 4F 05 51 |  if_ne	add	fp, #300
0b210     A7 0E 02 5B |  if_ne	rdlong	local03, fp
0b214     08 00 00 5F 
0b218     49 0E 46 55 |  if_ne	or	local03, ##4169
0b21c     A7 0E 62 5C |  if_ne	wrlong	local03, fp
0b220     2C 4F 85 51 |  if_ne	sub	fp, #300
0b224     08 4E 05 F1 | 	add	fp, #8
0b228     A7 0E 02 FB | 	rdlong	local03, fp
0b22c     24 4F 05 F1 | 	add	fp, #292
0b230     A7 0C 02 FB | 	rdlong	local02, fp
0b234     08 0E 06 F1 | 	add	local03, #8
0b238     07 0D 62 FC | 	wrlong	local02, local03
0b23c     24 4F 85 F1 | 	sub	fp, #292
0b240     A7 0E 02 FB | 	rdlong	local03, fp
0b244     0C 0E 06 F1 | 	add	local03, #12
0b248     07 03 68 FC | 	wrlong	#1, local03
0b24c     A7 0E 02 FB | 	rdlong	local03, fp
0b250     08 4E 05 F1 | 	add	fp, #8
0b254     A7 0C 02 FB | 	rdlong	local02, fp
0b258     18 0E 06 F1 | 	add	local03, #24
0b25c     07 0D 62 FC | 	wrlong	local02, local03
0b260     08 4E 85 F1 | 	sub	fp, #8
0b264     A7 0E 02 FB | 	rdlong	local03, fp
0b268     1C 0E 06 F1 | 	add	local03, #28
0b26c     01 00 80 FF 
0b270     07 01 68 FC | 	wrlong	##512, local03
0b274     A7 0C 02 FB | 	rdlong	local02, fp
0b278     06 0F 02 F6 | 	mov	local03, local02
0b27c     18 0C 06 F1 | 	add	local02, #24
0b280     06 0D 02 FB | 	rdlong	local02, local02
0b284     FF 0D 06 F1 | 	add	local02, #511
0b288     06 0D 52 F6 | 	abs	local02, local02 wc
0b28c     09 0C 46 F0 | 	shr	local02, #9
0b290     06 0D 82 F6 | 	negc	local02, local02
0b294     20 0E 06 F1 | 	add	local03, #32
0b298     07 0D 62 FC | 	wrlong	local02, local03
0b29c     A7 0C 02 FB | 	rdlong	local02, fp
0b2a0     06 0F 02 F6 | 	mov	local03, local02
0b2a4     06 0B 02 F6 | 	mov	local01, local02
0b2a8     0C 4E 05 F1 | 	add	fp, #12
0b2ac     A7 00 E2 FA | 	rdword	arg01, fp
0b2b0     02 4E 05 F1 | 	add	fp, #2
0b2b4     A7 02 E2 FA | 	rdword	arg02, fp
0b2b8     16 4E 85 F1 | 	sub	fp, #22
0b2bc     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0452
0b2c0     2C 0A 06 F1 | 	add	local01, #44
0b2c4     05 EB 61 FC | 	wrlong	result1, local01
0b2c8     28 0C 06 F1 | 	add	local02, #40
0b2cc     06 EB 61 FC | 	wrlong	result1, local02
0b2d0     24 0E 06 F1 | 	add	local03, #36
0b2d4     07 EB 61 FC | 	wrlong	result1, local03
0b2d8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
0b2d8                 | '     }
0b2d8                 | '     buf->st_mode = mode;
0b2d8                 | '     buf->st_nlink = 1;
0b2d8                 | '     buf->st_size = finfo.fsize;
0b2d8                 | '     buf->st_blksize = 512;
0b2d8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
0b2d8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
0b2d8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b2d8                 | '     return r;
0b2d8     0C 4E 05 F1 | 	add	fp, #12
0b2dc     A7 EA 01 FB | 	rdlong	result1, fp
0b2e0     0C 4E 85 F1 | 	sub	fp, #12
0b2e4                 | LR__1414
0b2e4     A7 F0 03 F6 | 	mov	ptra, fp
0b2e8     B2 00 A0 FD | 	call	#popregs_
0b2ec                 | _fatfs_cc_v_stat_ret
0b2ec     2D 00 64 FD | 	ret
0b2f0                 | 
0b2f0                 | _fatfs_cc_v_read
0b2f0     00 4A 05 F6 | 	mov	COUNT_, #0
0b2f4     A8 00 A0 FD | 	call	#pushregs_
0b2f8     1C F0 07 F1 | 	add	ptra, #28
0b2fc     04 4E 05 F1 | 	add	fp, #4
0b300     A7 00 62 FC | 	wrlong	arg01, fp
0b304     04 4E 05 F1 | 	add	fp, #4
0b308     A7 02 62 FC | 	wrlong	arg02, fp
0b30c     04 4E 05 F1 | 	add	fp, #4
0b310     A7 04 62 FC | 	wrlong	arg03, fp
0b314     08 4E 85 F1 | 	sub	fp, #8
0b318     A7 00 02 FB | 	rdlong	arg01, fp
0b31c     00 01 0A FB | 	rdlong	arg01, arg01 wz
0b320     0C 4E 05 F1 | 	add	fp, #12
0b324     A7 00 62 FC | 	wrlong	arg01, fp
0b328     10 4E 85 F1 | 	sub	fp, #16
0b32c                 | '         return _seterror( 5 );
0b32c     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b330     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b334     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b338     01 EA 65 A6 |  if_e	neg	result1, #1
0b33c     B8 00 90 AD |  if_e	jmp	#LR__1422
0b340     10 4E 05 F1 | 	add	fp, #16
0b344     A7 00 02 FB | 	rdlong	arg01, fp
0b348     02 00 00 FF 
0b34c     14 00 06 F1 | 	add	arg01, ##1044
0b350     08 4E 85 F1 | 	sub	fp, #8
0b354     A7 02 02 FB | 	rdlong	arg02, fp
0b358     04 4E 05 F1 | 	add	fp, #4
0b35c     A7 04 02 FB | 	rdlong	arg03, fp
0b360     0C 4E 05 F1 | 	add	fp, #12
0b364     A7 06 02 F6 | 	mov	arg04, fp
0b368     18 4E 85 F1 | 	sub	fp, #24
0b36c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
0b370     14 4E 05 F1 | 	add	fp, #20
0b374     A7 EA 61 FC | 	wrlong	result1, fp
0b378     14 4E 85 F1 | 	sub	fp, #20
0b37c     00 EA 0D F2 | 	cmp	result1, #0 wz
0b380     34 00 90 AD |  if_e	jmp	#LR__1420
0b384     04 4E 05 F1 | 	add	fp, #4
0b388     A7 06 02 FB | 	rdlong	arg04, fp
0b38c     03 05 02 F6 | 	mov	arg03, arg04
0b390     08 06 06 F1 | 	add	arg04, #8
0b394     03 07 02 FB | 	rdlong	arg04, arg04
0b398     20 06 46 F5 | 	or	arg04, #32
0b39c     08 04 06 F1 | 	add	arg03, #8
0b3a0     02 07 62 FC | 	wrlong	arg04, arg03
0b3a4                 | '         fil->state |=  (0x20) ;
0b3a4                 | '         return _set_dos_error(r);
0b3a4     10 4E 05 F1 | 	add	fp, #16
0b3a8     A7 00 02 FB | 	rdlong	arg01, fp
0b3ac     14 4E 85 F1 | 	sub	fp, #20
0b3b0     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b3b4     40 00 90 FD | 	jmp	#LR__1422
0b3b8                 | LR__1420
0b3b8     18 4E 05 F1 | 	add	fp, #24
0b3bc     A7 EA 09 FB | 	rdlong	result1, fp wz
0b3c0     18 4E 85 F1 | 	sub	fp, #24
0b3c4     24 00 90 5D |  if_ne	jmp	#LR__1421
0b3c8     04 4E 05 F1 | 	add	fp, #4
0b3cc     A7 EA 01 FB | 	rdlong	result1, fp
0b3d0     F5 06 02 F6 | 	mov	arg04, result1
0b3d4     04 4E 85 F1 | 	sub	fp, #4
0b3d8     08 EA 05 F1 | 	add	result1, #8
0b3dc     F5 EA 01 FB | 	rdlong	result1, result1
0b3e0     10 EA 45 F5 | 	or	result1, #16
0b3e4     08 06 06 F1 | 	add	arg04, #8
0b3e8     03 EB 61 FC | 	wrlong	result1, arg04
0b3ec                 | LR__1421
0b3ec                 | '         fil->state |=  (0x10) ;
0b3ec                 | '     }
0b3ec                 | '     return x;
0b3ec     18 4E 05 F1 | 	add	fp, #24
0b3f0     A7 EA 01 FB | 	rdlong	result1, fp
0b3f4     18 4E 85 F1 | 	sub	fp, #24
0b3f8                 | LR__1422
0b3f8     A7 F0 03 F6 | 	mov	ptra, fp
0b3fc     B2 00 A0 FD | 	call	#popregs_
0b400                 | _fatfs_cc_v_read_ret
0b400     2D 00 64 FD | 	ret
0b404                 | 
0b404                 | _fatfs_cc_v_write
0b404     00 4A 05 F6 | 	mov	COUNT_, #0
0b408     A8 00 A0 FD | 	call	#pushregs_
0b40c     1C F0 07 F1 | 	add	ptra, #28
0b410     04 4E 05 F1 | 	add	fp, #4
0b414     A7 00 62 FC | 	wrlong	arg01, fp
0b418     04 4E 05 F1 | 	add	fp, #4
0b41c     A7 02 62 FC | 	wrlong	arg02, fp
0b420     04 4E 05 F1 | 	add	fp, #4
0b424     A7 04 62 FC | 	wrlong	arg03, fp
0b428     08 4E 85 F1 | 	sub	fp, #8
0b42c     A7 00 02 FB | 	rdlong	arg01, fp
0b430     00 01 0A FB | 	rdlong	arg01, arg01 wz
0b434     0C 4E 05 F1 | 	add	fp, #12
0b438     A7 00 62 FC | 	wrlong	arg01, fp
0b43c     10 4E 85 F1 | 	sub	fp, #16
0b440                 | '         return _seterror( 5 );
0b440     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b444     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b448     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b44c     01 EA 65 A6 |  if_e	neg	result1, #1
0b450     84 00 90 AD |  if_e	jmp	#LR__1431
0b454     10 4E 05 F1 | 	add	fp, #16
0b458     A7 00 02 FB | 	rdlong	arg01, fp
0b45c     02 00 00 FF 
0b460     14 00 06 F1 | 	add	arg01, ##1044
0b464     08 4E 85 F1 | 	sub	fp, #8
0b468     A7 02 02 FB | 	rdlong	arg02, fp
0b46c     04 4E 05 F1 | 	add	fp, #4
0b470     A7 04 02 FB | 	rdlong	arg03, fp
0b474     0C 4E 05 F1 | 	add	fp, #12
0b478     A7 06 02 F6 | 	mov	arg04, fp
0b47c     18 4E 85 F1 | 	sub	fp, #24
0b480     4C D4 BF FD | 	call	#_fatfs_cc_f_write
0b484     14 4E 05 F1 | 	add	fp, #20
0b488     A7 EA 61 FC | 	wrlong	result1, fp
0b48c     14 4E 85 F1 | 	sub	fp, #20
0b490     00 EA 0D F2 | 	cmp	result1, #0 wz
0b494     34 00 90 AD |  if_e	jmp	#LR__1430
0b498     04 4E 05 F1 | 	add	fp, #4
0b49c     A7 06 02 FB | 	rdlong	arg04, fp
0b4a0     03 05 02 F6 | 	mov	arg03, arg04
0b4a4     08 06 06 F1 | 	add	arg04, #8
0b4a8     03 07 02 FB | 	rdlong	arg04, arg04
0b4ac     20 06 46 F5 | 	or	arg04, #32
0b4b0     08 04 06 F1 | 	add	arg03, #8
0b4b4     02 07 62 FC | 	wrlong	arg04, arg03
0b4b8                 | '         fil->state |=  (0x20) ;
0b4b8                 | '         return _set_dos_error(r);
0b4b8     10 4E 05 F1 | 	add	fp, #16
0b4bc     A7 00 02 FB | 	rdlong	arg01, fp
0b4c0     14 4E 85 F1 | 	sub	fp, #20
0b4c4     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b4c8     0C 00 90 FD | 	jmp	#LR__1431
0b4cc                 | LR__1430
0b4cc                 | '     }
0b4cc                 | '     return x;
0b4cc     18 4E 05 F1 | 	add	fp, #24
0b4d0     A7 EA 01 FB | 	rdlong	result1, fp
0b4d4     18 4E 85 F1 | 	sub	fp, #24
0b4d8                 | LR__1431
0b4d8     A7 F0 03 F6 | 	mov	ptra, fp
0b4dc     B2 00 A0 FD | 	call	#popregs_
0b4e0                 | _fatfs_cc_v_write_ret
0b4e0     2D 00 64 FD | 	ret
0b4e4                 | 
0b4e4                 | _fatfs_cc_v_lseek
0b4e4     04 4A 05 F6 | 	mov	COUNT_, #4
0b4e8     A8 00 A0 FD | 	call	#pushregs_
0b4ec     01 0B 02 F6 | 	mov	local01, arg02
0b4f0     02 0D 02 F6 | 	mov	local02, arg03
0b4f4     00 0F 02 FB | 	rdlong	local03, arg01
0b4f8     02 00 00 FF 
0b4fc     14 0E 0E F1 | 	add	local03, ##1044 wz
0b500                 | '         return _seterror( 5 );
0b500     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b504     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b508     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b50c     01 EA 65 A6 |  if_e	neg	result1, #1
0b510     4C 00 90 AD |  if_e	jmp	#LR__1442
0b514     00 0C 0E F2 | 	cmp	local02, #0 wz
0b518     24 00 90 AD |  if_e	jmp	#LR__1440
0b51c     01 0C 0E F2 | 	cmp	local02, #1 wz
0b520     14 0E 06 A1 |  if_e	add	local03, #20
0b524     07 11 02 AB |  if_e	rdlong	local04, local03
0b528     14 0E 86 A1 |  if_e	sub	local03, #20
0b52c     08 0B 02 A1 |  if_e	add	local01, local04
0b530     0C 0E 06 51 |  if_ne	add	local03, #12
0b534     07 11 02 5B |  if_ne	rdlong	local04, local03
0b538     0C 0E 86 51 |  if_ne	sub	local03, #12
0b53c     08 0B 02 51 |  if_ne	add	local01, local04
0b540                 | LR__1440
0b540     05 03 02 F6 | 	mov	arg02, local01
0b544     07 01 02 F6 | 	mov	arg01, local03
0b548     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
0b54c     F5 00 0A F6 | 	mov	arg01, result1 wz
0b550     08 00 90 AD |  if_e	jmp	#LR__1441
0b554                 | '         return _set_dos_error(result);
0b554     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b558     04 00 90 FD | 	jmp	#LR__1442
0b55c                 | LR__1441
0b55c                 | '     }
0b55c                 | '     return offset;
0b55c     05 EB 01 F6 | 	mov	result1, local01
0b560                 | LR__1442
0b560     A7 F0 03 F6 | 	mov	ptra, fp
0b564     B2 00 A0 FD | 	call	#popregs_
0b568                 | _fatfs_cc_v_lseek_ret
0b568     2D 00 64 FD | 	ret
0b56c                 | 
0b56c                 | _fatfs_cc_v_ioctl
0b56c                 | ' {
0b56c                 | '     return _seterror( 10 );
0b56c     20 E4 05 F1 | 	add	ptr___system__dat__, #32
0b570     F2 14 68 FC | 	wrlong	#10, ptr___system__dat__
0b574     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
0b578     01 EA 65 F6 | 	neg	result1, #1
0b57c                 | _fatfs_cc_v_ioctl_ret
0b57c     2D 00 64 FD | 	ret
0b580                 | 
0b580                 | _fatfs_cc_v_mkdir
0b580     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
0b584     F5 00 02 F6 | 	mov	arg01, result1
0b588                 | ' 
0b588                 | '     r = f_mkdir(name);
0b588                 | '     return _set_dos_error(r);
0b588     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b58c                 | _fatfs_cc_v_mkdir_ret
0b58c     2D 00 64 FD | 	ret
0b590                 | 
0b590                 | _fatfs_cc_v_remove
0b590     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
0b594     F5 00 02 F6 | 	mov	arg01, result1
0b598                 | ' 
0b598                 | '     r = f_unlink(name);
0b598                 | '     return _set_dos_error(r);
0b598     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b59c                 | _fatfs_cc_v_remove_ret
0b59c     2D 00 64 FD | 	ret
0b5a0                 | 
0b5a0                 | _fatfs_cc_v_rmdir
0b5a0     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
0b5a4     F5 00 02 F6 | 	mov	arg01, result1
0b5a8                 | ' 
0b5a8                 | '     r = f_unlink(name);
0b5a8                 | '     return _set_dos_error(r);
0b5a8     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b5ac                 | _fatfs_cc_v_rmdir_ret
0b5ac     2D 00 64 FD | 	ret
0b5b0                 | 
0b5b0                 | _fatfs_cc_v_rename
0b5b0     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
0b5b4     F5 00 02 F6 | 	mov	arg01, result1
0b5b8                 | '     return _set_dos_error(r);
0b5b8     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b5bc                 | _fatfs_cc_v_rename_ret
0b5bc     2D 00 64 FD | 	ret
0b5c0                 | 
0b5c0                 | _fatfs_cc_v_open
0b5c0     07 4A 05 F6 | 	mov	COUNT_, #7
0b5c4     A8 00 A0 FD | 	call	#pushregs_
0b5c8     00 0B 02 F6 | 	mov	local01, arg01
0b5cc     01 0D 02 F6 | 	mov	local02, arg02
0b5d0     02 0F 02 F6 | 	mov	local03, arg03
0b5d4     03 00 00 FF 
0b5d8     3C 00 06 F6 | 	mov	arg01, ##1596
0b5dc                 | '     return _gc_alloc(size);
0b5dc     10 02 06 F6 | 	mov	arg02, #16
0b5e0     BC 67 BF FD | 	call	#__system___gc_doalloc
0b5e4     F5 10 0A F6 | 	mov	local04, result1 wz
0b5e8                 | '       return _seterror( 7 );
0b5e8     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b5ec     F2 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
0b5f0     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b5f4     01 EA 65 A6 |  if_e	neg	result1, #1
0b5f8     98 00 90 AD |  if_e	jmp	#LR__1456
0b5fc     08 01 02 F6 | 	mov	arg01, local04
0b600     00 02 06 F6 | 	mov	arg02, #0
0b604     03 00 00 FF 
0b608     3C 04 06 F6 | 	mov	arg03, ##1596
0b60c     98 00 A0 FD | 	call	#\builtin_bytefill_
0b610                 | '   switch (flags & 3) {
0b610     07 13 02 F6 | 	mov	local05, local03
0b614     03 12 0E F5 | 	and	local05, #3 wz
0b618     0C 00 90 AD |  if_e	jmp	#LR__1450
0b61c     01 12 0E F2 | 	cmp	local05, #1 wz
0b620     0C 00 90 AD |  if_e	jmp	#LR__1451
0b624     10 00 90 FD | 	jmp	#LR__1452
0b628                 | LR__1450
0b628     01 14 06 F6 | 	mov	local06, #1
0b62c                 | '       fs_flags =  0x01 ;
0b62c                 | '       break;
0b62c     0C 00 90 FD | 	jmp	#LR__1453
0b630                 | LR__1451
0b630     02 14 06 F6 | 	mov	local06, #2
0b634                 | '       fs_flags =  0x02 ;
0b634                 | '       break;
0b634     04 00 90 FD | 	jmp	#LR__1453
0b638                 | LR__1452
0b638     03 14 06 F6 | 	mov	local06, #3
0b63c                 | '       fs_flags =  0x01  |  0x02 ;
0b63c                 | '       break;
0b63c                 | LR__1453
0b63c     08 0E CE F7 | 	test	local03, #8 wz
0b640     18 14 46 55 |  if_ne	or	local06, #24
0b644     08 00 90 5D |  if_ne	jmp	#LR__1454
0b648     20 0E CE F7 | 	test	local03, #32 wz
0b64c     30 14 46 55 |  if_ne	or	local06, #48
0b650                 | LR__1454
0b650     02 00 00 FF 
0b654     14 10 06 F1 | 	add	local04, ##1044
0b658     08 01 02 F6 | 	mov	arg01, local04
0b65c     02 00 00 FF 
0b660     14 10 86 F1 | 	sub	local04, ##1044
0b664     06 03 02 F6 | 	mov	arg02, local02
0b668     0A 05 02 F6 | 	mov	arg03, local06
0b66c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
0b670     F5 16 0A F6 | 	mov	local07, result1 wz
0b674     14 00 90 AD |  if_e	jmp	#LR__1455
0b678     08 01 02 F6 | 	mov	arg01, local04
0b67c                 | '     return _gc_free(ptr);
0b67c     2C 68 BF FD | 	call	#__system___gc_free
0b680                 | '     free(f);
0b680                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b680                 | '     return _set_dos_error(r);
0b680     0B 01 02 F6 | 	mov	arg01, local07
0b684     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b688     08 00 90 FD | 	jmp	#LR__1456
0b68c                 | LR__1455
0b68c     05 11 62 FC | 	wrlong	local04, local01
0b690                 | '   }
0b690                 | '   fil->vfsdata = f;
0b690                 | '   return 0;
0b690     00 EA 05 F6 | 	mov	result1, #0
0b694                 | LR__1456
0b694     A7 F0 03 F6 | 	mov	ptra, fp
0b698     B2 00 A0 FD | 	call	#popregs_
0b69c                 | _fatfs_cc_v_open_ret
0b69c     2D 00 64 FD | 	ret
0b6a0                 | 
0b6a0                 | _fatfs_cc_v_flush
0b6a0     00 01 02 FB | 	rdlong	arg01, arg01
0b6a4     02 00 00 FF 
0b6a8     14 00 0E F1 | 	add	arg01, ##1044 wz
0b6ac                 | '         return _seterror( 5 );
0b6ac     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b6b0     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b6b4     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b6b8     01 EA 65 A6 |  if_e	neg	result1, #1
0b6bc     0C 00 90 AD |  if_e	jmp	#LR__1460
0b6c0     00 DA BF FD | 	call	#_fatfs_cc_f_sync
0b6c4     F5 00 02 F6 | 	mov	arg01, result1
0b6c8                 | '     }
0b6c8                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b6c8                 | '     result = f_sync(f);
0b6c8                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b6c8                 | '     return _set_dos_error(result);
0b6c8     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b6cc                 | LR__1460
0b6cc                 | _fatfs_cc_v_flush_ret
0b6cc     2D 00 64 FD | 	ret
0b6d0                 | 
0b6d0                 | _fatfs_cc_v_init
0b6d0                 | ' {
0b6d0                 | '     return 0;
0b6d0     00 EA 05 F6 | 	mov	result1, #0
0b6d4                 | _fatfs_cc_v_init_ret
0b6d4     2D 00 64 FD | 	ret
0b6d8                 | 
0b6d8                 | _fatfs_cc_v_deinit
0b6d8     62 00 00 FF 
0b6dc     CE 03 06 F6 | 	mov	arg02, ##@LR__1629
0b6e0     00 00 06 F6 | 	mov	arg01, #0
0b6e4     00 04 06 F6 | 	mov	arg03, #0
0b6e8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
0b6ec     01 00 00 FF 
0b6f0     08 E2 05 F1 | 	add	objptr, ##520
0b6f4     F1 00 02 FB | 	rdlong	arg01, objptr
0b6f8     04 E2 05 F1 | 	add	objptr, #4
0b6fc     F1 02 02 FB | 	rdlong	arg02, objptr
0b700     01 00 00 FF 
0b704     0C E2 85 F1 | 	sub	objptr, ##524
0b708     EC 63 BF FD | 	call	#__system___freepins
0b70c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b70c                 | '     _freepins(f_pinmask);
0b70c                 | '     return 0;
0b70c     00 EA 05 F6 | 	mov	result1, #0
0b710                 | _fatfs_cc_v_deinit_ret
0b710     2D 00 64 FD | 	ret
0b714                 | 
0b714                 | _fatfs_cc_get_vfs
0b714     01 4A 05 F6 | 	mov	COUNT_, #1
0b718     A8 00 A0 FD | 	call	#pushregs_
0b71c     00 0B 02 F6 | 	mov	local01, arg01
0b720     50 00 06 F6 | 	mov	arg01, #80
0b724     48 66 BF FD | 	call	#__system___gc_alloc_managed
0b728     F5 00 02 F6 | 	mov	arg01, result1
0b72c     F1 EA 01 F6 | 	mov	result1, objptr
0b730     36 EA 25 F4 | 	bith	result1, #54
0b734     00 EB 61 FC | 	wrlong	result1, arg01
0b738     F1 EA 01 F6 | 	mov	result1, objptr
0b73c     00 68 00 FF 
0b740     00 EA 45 F5 | 	or	result1, ##13631488
0b744     04 00 06 F1 | 	add	arg01, #4
0b748     00 EB 61 FC | 	wrlong	result1, arg01
0b74c     F1 EA 01 F6 | 	mov	result1, objptr
0b750     55 EA 25 F4 | 	bith	result1, #85
0b754     04 00 06 F1 | 	add	arg01, #4
0b758     00 EB 61 FC | 	wrlong	result1, arg01
0b75c     F1 EA 01 F6 | 	mov	result1, objptr
0b760     74 EA 25 F4 | 	bith	result1, #116
0b764     04 00 06 F1 | 	add	arg01, #4
0b768     00 EB 61 FC | 	wrlong	result1, arg01
0b76c     F1 EA 01 F6 | 	mov	result1, objptr
0b770     18 EA 25 F4 | 	bith	result1, #24
0b774     04 00 06 F1 | 	add	arg01, #4
0b778     00 EB 61 FC | 	wrlong	result1, arg01
0b77c     04 00 06 F1 | 	add	arg01, #4
0b780     00 01 68 FC | 	wrlong	#0, arg01
0b784     04 00 06 F1 | 	add	arg01, #4
0b788     00 0B 62 FC | 	wrlong	local01, arg01
0b78c     04 00 06 F1 | 	add	arg01, #4
0b790     00 01 68 FC | 	wrlong	#0, arg01
0b794     F1 EA 01 F6 | 	mov	result1, objptr
0b798     00 88 00 FF 
0b79c     00 EA 45 F5 | 	or	result1, ##17825792
0b7a0     04 00 06 F1 | 	add	arg01, #4
0b7a4     00 EB 61 FC | 	wrlong	result1, arg01
0b7a8     F1 EA 01 F6 | 	mov	result1, objptr
0b7ac     00 90 00 FF 
0b7b0     00 EA 45 F5 | 	or	result1, ##18874368
0b7b4     04 00 06 F1 | 	add	arg01, #4
0b7b8     00 EB 61 FC | 	wrlong	result1, arg01
0b7bc     F1 EA 01 F6 | 	mov	result1, objptr
0b7c0     00 98 00 FF 
0b7c4     00 EA 45 F5 | 	or	result1, ##19922944
0b7c8     04 00 06 F1 | 	add	arg01, #4
0b7cc     00 EB 61 FC | 	wrlong	result1, arg01
0b7d0     F1 EA 01 F6 | 	mov	result1, objptr
0b7d4     00 A0 00 FF 
0b7d8     00 EA 45 F5 | 	or	result1, ##20971520
0b7dc     04 00 06 F1 | 	add	arg01, #4
0b7e0     00 EB 61 FC | 	wrlong	result1, arg01
0b7e4     F1 EA 01 F6 | 	mov	result1, objptr
0b7e8     00 A8 00 FF 
0b7ec     00 EA 45 F5 | 	or	result1, ##22020096
0b7f0     04 00 06 F1 | 	add	arg01, #4
0b7f4     00 EB 61 FC | 	wrlong	result1, arg01
0b7f8     F1 EA 01 F6 | 	mov	result1, objptr
0b7fc     00 B0 00 FF 
0b800     00 EA 45 F5 | 	or	result1, ##23068672
0b804     04 00 06 F1 | 	add	arg01, #4
0b808     00 EB 61 FC | 	wrlong	result1, arg01
0b80c     F1 EA 01 F6 | 	mov	result1, objptr
0b810     00 B8 00 FF 
0b814     00 EA 45 F5 | 	or	result1, ##24117248
0b818     04 00 06 F1 | 	add	arg01, #4
0b81c     00 EB 61 FC | 	wrlong	result1, arg01
0b820     F1 EA 01 F6 | 	mov	result1, objptr
0b824     37 EA 25 F4 | 	bith	result1, #55
0b828     04 00 06 F1 | 	add	arg01, #4
0b82c     00 EB 61 FC | 	wrlong	result1, arg01
0b830     F1 EA 01 F6 | 	mov	result1, objptr
0b834     00 C8 00 FF 
0b838     00 EA 45 F5 | 	or	result1, ##26214400
0b83c     04 00 06 F1 | 	add	arg01, #4
0b840     00 EB 61 FC | 	wrlong	result1, arg01
0b844     F1 EA 01 F6 | 	mov	result1, objptr
0b848     00 D0 00 FF 
0b84c     00 EA 45 F5 | 	or	result1, ##27262976
0b850     04 00 06 F1 | 	add	arg01, #4
0b854     00 EB 61 FC | 	wrlong	result1, arg01
0b858     F1 EA 01 F6 | 	mov	result1, objptr
0b85c     00 D8 00 FF 
0b860     00 EA 45 F5 | 	or	result1, ##28311552
0b864     04 00 06 F1 | 	add	arg01, #4
0b868     00 EB 61 FC | 	wrlong	result1, arg01
0b86c     F1 EA 01 F6 | 	mov	result1, objptr
0b870     56 EA 25 F4 | 	bith	result1, #86
0b874     04 00 06 F1 | 	add	arg01, #4
0b878     00 EB 61 FC | 	wrlong	result1, arg01
0b87c     4C 00 86 F1 | 	sub	arg01, #76
0b880                 | ' 
0b880                 | '     v->close = &v_close;
0b880                 | '     v->read = &v_read;
0b880                 | '     v->write = &v_write;
0b880                 | '     v->lseek = &v_lseek;
0b880                 | '     v->ioctl = &v_ioctl;
0b880                 | '     v->flush = 0;
0b880                 | '     v->vfs_data = ptr;
0b880                 | '     v->reserved = 0;
0b880                 | ' 
0b880                 | '     v->open = &v_open;
0b880                 | '     v->creat = &v_creat;
0b880                 | '     v->opendir = &v_opendir;
0b880                 | '     v->closedir = &v_closedir;
0b880                 | '     v->readdir = &v_readdir;
0b880                 | '     v->stat = &v_stat;
0b880                 | ' 
0b880                 | '     v->mkdir = &v_mkdir;
0b880                 | '     v->rmdir = &v_rmdir;
0b880                 | ' 
0b880                 | '     v->remove = &v_remove;
0b880                 | '     v->rename = &v_rename;
0b880                 | ' 
0b880                 | '     v->init = &v_init;
0b880                 | '     v->deinit = &v_deinit;
0b880                 | ' 
0b880                 | '     return v;
0b880     00 EB 01 F6 | 	mov	result1, arg01
0b884     A7 F0 03 F6 | 	mov	ptra, fp
0b888     B2 00 A0 FD | 	call	#popregs_
0b88c                 | _fatfs_cc_get_vfs_ret
0b88c     2D 00 64 FD | 	ret
0b890                 | 
0b890                 | _fatfs_cc_xmit_mmc_0588
0b890     01 00 00 FF 
0b894     10 E2 05 F1 | 	add	objptr, ##528
0b898     F1 EE 01 FB | 	rdlong	_var01, objptr
0b89c     08 E2 05 F1 | 	add	objptr, #8
0b8a0     F1 F0 01 FB | 	rdlong	_var02, objptr
0b8a4     01 00 00 FF 
0b8a8     18 E2 85 F1 | 	sub	objptr, ##536
0b8ac     40 F0 61 FD | 	dirl	_var02
0b8b0     28 02 64 FD | 	setq	#1
0b8b4     00 F3 01 FB | 	rdlong	_var03, arg01
0b8b8     69 F2 61 FD | 	rev	_var03
0b8bc     1B F2 FD F9 | 	movbyts	_var03, #27
0b8c0     F8 F2 21 FC | 	wypin	_var03, _var02
0b8c4     01 F3 01 F6 | 	mov	_var03, arg02
0b8c8     02 02 4E F0 | 	shr	arg02, #2 wz
0b8cc     03 F2 65 F0 | 	shl	_var03, #3
0b8d0     F7 F2 21 FC | 	wypin	_var03, _var01
0b8d4     41 F0 61 FD | 	dirh	_var02
0b8d8     08 00 06 F1 | 	add	arg01, #8
0b8dc     69 F4 61 FD | 	rev	_var04
0b8e0     1B F4 FD F9 | 	movbyts	_var04, #27
0b8e4                 | LR__1470
0b8e4     F8 F4 21 5C |  if_ne	wypin	_var04, _var02
0b8e8     00 F5 01 5B |  if_ne	rdlong	_var04, arg01
0b8ec     04 00 06 51 |  if_ne	add	arg01, #4
0b8f0     69 F4 61 5D |  if_ne	rev	_var04
0b8f4     1B F4 FD 59 |  if_ne	movbyts	_var04, #27
0b8f8                 | LR__1471
0b8f8     40 F0 71 5D |  if_ne	testp	_var02 wc
0b8fc     F8 FF 9F 1D |  if_a	jmp	#LR__1471
0b900     F8 03 6E 5B |  if_ne	djnz	arg02, #LR__1470
0b904                 | LR__1472
0b904     40 EE 71 FD | 	testp	_var01 wc
0b908     F8 FF 9F 3D |  if_ae	jmp	#LR__1472
0b90c     40 F0 61 FD | 	dirl	_var02
0b910     FF FF FF FF 
0b914     F8 FE 2B FC | 	wypin	##-1, _var02
0b918     41 F0 61 FD | 	dirh	_var02
0b91c                 | _fatfs_cc_xmit_mmc_0588_ret
0b91c     2D 00 64 FD | 	ret
0b920                 | 
0b920                 | _fatfs_cc_rcvr_mmc_0595
0b920     01 00 00 FF 
0b924     10 E2 05 F1 | 	add	objptr, ##528
0b928     F1 EE 01 FB | 	rdlong	_var01, objptr
0b92c     0C E2 05 F1 | 	add	objptr, #12
0b930     F1 F0 01 FB | 	rdlong	_var02, objptr
0b934     01 00 00 FF 
0b938     1C E2 85 F1 | 	sub	objptr, ##540
0b93c     F8 02 08 FC | 	akpin	_var02
0b940     01 F3 09 F6 | 	mov	_var03, arg02 wz
0b944     02 F2 4D F0 | 	shr	_var03, #2 wz
0b948     30 00 90 AD |  if_e	jmp	#LR__1482
0b94c     F9 F4 01 F6 | 	mov	_var04, _var03
0b950     05 F4 65 F0 | 	shl	_var04, #5
0b954     F7 F4 21 FC | 	wypin	_var04, _var01
0b958     F8 7E 18 FC | 	wxpin	#63, _var02
0b95c                 | LR__1480
0b95c                 | LR__1481
0b95c     40 F0 71 FD | 	testp	_var02 wc
0b960     F8 FF 9F 3D |  if_ae	jmp	#LR__1481
0b964     F8 F4 89 FA | 	rdpin	_var04, _var02
0b968     69 F4 61 FD | 	rev	_var04
0b96c     1B F4 FD F9 | 	movbyts	_var04, #27
0b970     00 F5 61 FC | 	wrlong	_var04, arg01
0b974     04 00 06 F1 | 	add	arg01, #4
0b978     F8 F3 6D FB | 	djnz	_var03, #LR__1480
0b97c                 | LR__1482
0b97c     03 02 0E F5 | 	and	arg02, #3 wz
0b980     24 00 90 AD |  if_e	jmp	#LR__1485
0b984     F8 4E 18 FC | 	wxpin	#39, _var02
0b988                 | LR__1483
0b988     F7 10 28 FC | 	wypin	#8, _var01
0b98c                 | LR__1484
0b98c     40 F0 71 FD | 	testp	_var02 wc
0b990     F8 FF 9F 3D |  if_ae	jmp	#LR__1484
0b994     F8 F4 89 FA | 	rdpin	_var04, _var02
0b998     69 F4 61 FD | 	rev	_var04
0b99c     00 F5 41 FC | 	wrbyte	_var04, arg01
0b9a0     01 00 06 F1 | 	add	arg01, #1
0b9a4     F8 03 6E FB | 	djnz	arg02, #LR__1483
0b9a8                 | LR__1485
0b9a8                 | _fatfs_cc_rcvr_mmc_0595_ret
0b9a8     2D 00 64 FD | 	ret
0b9ac                 | 
0b9ac                 | _fatfs_cc_wait_ready_0599
0b9ac     01 4A 05 F6 | 	mov	COUNT_, #1
0b9b0     A8 00 A0 FD | 	call	#pushregs_
0b9b4     10 F0 07 F1 | 	add	ptra, #16
0b9b8     1A EA 61 FD | 	getct	result1
0b9bc     08 4E 05 F1 | 	add	fp, #8
0b9c0     A7 EA 61 FC | 	wrlong	result1, fp
0b9c4     14 0A 06 FB | 	rdlong	local01, #20
0b9c8     01 0A 46 F0 | 	shr	local01, #1
0b9cc     04 4E 05 F1 | 	add	fp, #4
0b9d0     A7 0A 62 FC | 	wrlong	local01, fp
0b9d4     0C 4E 85 F1 | 	sub	fp, #12
0b9d8                 | ' {
0b9d8                 | ' 	BYTE d;
0b9d8                 | ' 	UINT tmr, tmout;
0b9d8                 | ' 
0b9d8                 | ' 	tmr = _cnt();
0b9d8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
0b9d8                 | ' 	for(;;) {
0b9d8                 | LR__1490
0b9d8     04 4E 05 F1 | 	add	fp, #4
0b9dc     A7 00 02 F6 | 	mov	arg01, fp
0b9e0     04 4E 85 F1 | 	sub	fp, #4
0b9e4     01 02 06 F6 | 	mov	arg02, #1
0b9e8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0b9ec     04 4E 05 F1 | 	add	fp, #4
0b9f0     A7 0A C2 FA | 	rdbyte	local01, fp
0b9f4     04 4E 85 F1 | 	sub	fp, #4
0b9f8     FF 0A 0E F2 | 	cmp	local01, #255 wz
0b9fc     01 EA 05 A6 |  if_e	mov	result1, #1
0ba00     28 00 90 AD |  if_e	jmp	#LR__1491
0ba04     1A EA 61 FD | 	getct	result1
0ba08     08 4E 05 F1 | 	add	fp, #8
0ba0c     A7 0A 02 FB | 	rdlong	local01, fp
0ba10     05 EB 81 F1 | 	sub	result1, local01
0ba14     04 4E 05 F1 | 	add	fp, #4
0ba18     A7 0A 02 FB | 	rdlong	local01, fp
0ba1c     0C 4E 85 F1 | 	sub	fp, #12
0ba20     05 EB 11 F2 | 	cmp	result1, local01 wc
0ba24     00 EA 05 36 |  if_ae	mov	result1, #0
0ba28     AC FF 9F CD |  if_b	jmp	#LR__1490
0ba2c                 | LR__1491
0ba2c     A7 F0 03 F6 | 	mov	ptra, fp
0ba30     B2 00 A0 FD | 	call	#popregs_
0ba34                 | _fatfs_cc_wait_ready_0599_ret
0ba34     2D 00 64 FD | 	ret
0ba38                 | 
0ba38                 | _fatfs_cc_deselect_0605
0ba38     00 4A 05 F6 | 	mov	COUNT_, #0
0ba3c     A8 00 A0 FD | 	call	#pushregs_
0ba40     14 F0 07 F1 | 	add	ptra, #20
0ba44     01 00 00 FF 
0ba48     14 E2 05 F1 | 	add	objptr, ##532
0ba4c     F1 02 02 FB | 	rdlong	arg02, objptr
0ba50     04 4E 05 F1 | 	add	fp, #4
0ba54     A7 02 62 FC | 	wrlong	arg02, fp
0ba58     04 E2 85 F1 | 	sub	objptr, #4
0ba5c     F1 02 02 FB | 	rdlong	arg02, objptr
0ba60     04 4E 05 F1 | 	add	fp, #4
0ba64     A7 02 62 FC | 	wrlong	arg02, fp
0ba68     08 E2 05 F1 | 	add	objptr, #8
0ba6c     F1 02 02 FB | 	rdlong	arg02, objptr
0ba70     04 4E 05 F1 | 	add	fp, #4
0ba74     A7 02 62 FC | 	wrlong	arg02, fp
0ba78     04 E2 05 F1 | 	add	objptr, #4
0ba7c     F1 02 02 FB | 	rdlong	arg02, objptr
0ba80     01 00 00 FF 
0ba84     1C E2 85 F1 | 	sub	objptr, ##540
0ba88     04 4E 05 F1 | 	add	fp, #4
0ba8c     A7 02 62 FC | 	wrlong	arg02, fp
0ba90     0C 4E 85 F1 | 	sub	fp, #12
0ba94     A7 00 02 FB | 	rdlong	arg01, fp
0ba98     04 4E 85 F1 | 	sub	fp, #4
0ba9c     59 00 62 FD | 	drvh	arg01
0baa0     1F 20 64 FD | 	waitx	#16
0baa4     A7 00 02 F6 | 	mov	arg01, fp
0baa8     01 02 06 F6 | 	mov	arg02, #1
0baac     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bab0     A7 F0 03 F6 | 	mov	ptra, fp
0bab4     B2 00 A0 FD | 	call	#popregs_
0bab8                 | _fatfs_cc_deselect_0605_ret
0bab8     2D 00 64 FD | 	ret
0babc                 | 
0babc                 | _fatfs_cc_select_0609
0babc     00 4A 05 F6 | 	mov	COUNT_, #0
0bac0     A8 00 A0 FD | 	call	#pushregs_
0bac4     10 F0 07 F1 | 	add	ptra, #16
0bac8     01 00 00 FF 
0bacc     14 E2 05 F1 | 	add	objptr, ##532
0bad0     F1 02 02 FB | 	rdlong	arg02, objptr
0bad4     08 4E 05 F1 | 	add	fp, #8
0bad8     A7 02 62 FC | 	wrlong	arg02, fp
0badc     08 E2 05 F1 | 	add	objptr, #8
0bae0     F1 00 02 FB | 	rdlong	arg01, objptr
0bae4     01 00 00 FF 
0bae8     1C E2 85 F1 | 	sub	objptr, ##540
0baec     04 4E 05 F1 | 	add	fp, #4
0baf0     A7 00 62 FC | 	wrlong	arg01, fp
0baf4     50 00 62 FD | 	fltl	arg01
0baf8     04 4E 85 F1 | 	sub	fp, #4
0bafc     A7 00 02 FB | 	rdlong	arg01, fp
0bb00     58 00 62 FD | 	drvl	arg01
0bb04     1F 20 64 FD | 	waitx	#16
0bb08     04 4E 05 F1 | 	add	fp, #4
0bb0c     A7 00 02 FB | 	rdlong	arg01, fp
0bb10     41 00 62 FD | 	dirh	arg01
0bb14     08 4E 85 F1 | 	sub	fp, #8
0bb18     A7 00 02 F6 | 	mov	arg01, fp
0bb1c     04 4E 85 F1 | 	sub	fp, #4
0bb20     01 02 06 F6 | 	mov	arg02, #1
0bb24     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bb28     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0599
0bb2c     00 EA 0D F2 | 	cmp	result1, #0 wz
0bb30     01 EA 05 56 |  if_ne	mov	result1, #1
0bb34     08 00 90 5D |  if_ne	jmp	#LR__1500
0bb38     FC FE BF FD | 	call	#_fatfs_cc_deselect_0605
0bb3c                 | ' 
0bb3c                 | ' 	deselect();
0bb3c                 | ' 	return 0;
0bb3c     00 EA 05 F6 | 	mov	result1, #0
0bb40                 | LR__1500
0bb40     A7 F0 03 F6 | 	mov	ptra, fp
0bb44     B2 00 A0 FD | 	call	#popregs_
0bb48                 | _fatfs_cc_select_0609_ret
0bb48     2D 00 64 FD | 	ret
0bb4c                 | 
0bb4c                 | _fatfs_cc_rcvr_datablock_0613
0bb4c     01 4A 05 F6 | 	mov	COUNT_, #1
0bb50     A8 00 A0 FD | 	call	#pushregs_
0bb54     18 F0 07 F1 | 	add	ptra, #24
0bb58     04 4E 05 F1 | 	add	fp, #4
0bb5c     A7 00 62 FC | 	wrlong	arg01, fp
0bb60     04 4E 05 F1 | 	add	fp, #4
0bb64     A7 02 62 FC | 	wrlong	arg02, fp
0bb68     1A EA 61 FD | 	getct	result1
0bb6c     08 4E 05 F1 | 	add	fp, #8
0bb70     A7 EA 61 FC | 	wrlong	result1, fp
0bb74     14 0A 06 FB | 	rdlong	local01, #20
0bb78     03 0A 46 F0 | 	shr	local01, #3
0bb7c     04 4E 05 F1 | 	add	fp, #4
0bb80     A7 0A 62 FC | 	wrlong	local01, fp
0bb84     14 4E 85 F1 | 	sub	fp, #20
0bb88                 | ' 	BYTE *buff,
0bb88                 | ' 	UINT btr
0bb88                 | ' )
0bb88                 | ' {
0bb88                 | ' 	BYTE d[2];
0bb88                 | ' 	UINT tmr, tmout;
0bb88                 | ' 
0bb88                 | ' 	tmr = _cnt();
0bb88                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
0bb88                 | ' 	for(;;) {
0bb88                 | LR__1510
0bb88     0C 4E 05 F1 | 	add	fp, #12
0bb8c     A7 00 02 F6 | 	mov	arg01, fp
0bb90     0C 4E 85 F1 | 	sub	fp, #12
0bb94     01 02 06 F6 | 	mov	arg02, #1
0bb98     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bb9c     0C 4E 05 F1 | 	add	fp, #12
0bba0     A7 0A C2 FA | 	rdbyte	local01, fp
0bba4     0C 4E 85 F1 | 	sub	fp, #12
0bba8     FF 0A 0E F2 | 	cmp	local01, #255 wz
0bbac     28 00 90 5D |  if_ne	jmp	#LR__1511
0bbb0     1A EA 61 FD | 	getct	result1
0bbb4     F5 0A 02 F6 | 	mov	local01, result1
0bbb8     10 4E 05 F1 | 	add	fp, #16
0bbbc     A7 02 02 FB | 	rdlong	arg02, fp
0bbc0     01 0B 82 F1 | 	sub	local01, arg02
0bbc4     04 4E 05 F1 | 	add	fp, #4
0bbc8     A7 02 02 FB | 	rdlong	arg02, fp
0bbcc     14 4E 85 F1 | 	sub	fp, #20
0bbd0     01 0B 12 F2 | 	cmp	local01, arg02 wc
0bbd4     B0 FF 9F CD |  if_b	jmp	#LR__1510
0bbd8                 | LR__1511
0bbd8     0C 4E 05 F1 | 	add	fp, #12
0bbdc     A7 0A C2 FA | 	rdbyte	local01, fp
0bbe0     0C 4E 85 F1 | 	sub	fp, #12
0bbe4     FE 0A 0E F2 | 	cmp	local01, #254 wz
0bbe8     00 EA 05 56 |  if_ne	mov	result1, #0
0bbec     30 00 90 5D |  if_ne	jmp	#LR__1512
0bbf0     04 4E 05 F1 | 	add	fp, #4
0bbf4     A7 00 02 FB | 	rdlong	arg01, fp
0bbf8     04 4E 05 F1 | 	add	fp, #4
0bbfc     A7 02 02 FB | 	rdlong	arg02, fp
0bc00     08 4E 85 F1 | 	sub	fp, #8
0bc04     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bc08     0C 4E 05 F1 | 	add	fp, #12
0bc0c     A7 00 02 F6 | 	mov	arg01, fp
0bc10     0C 4E 85 F1 | 	sub	fp, #12
0bc14     02 02 06 F6 | 	mov	arg02, #2
0bc18     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bc1c                 | ' 
0bc1c                 | ' 	rcvr_mmc(buff, btr);
0bc1c                 | ' 	rcvr_mmc(d, 2);
0bc1c                 | ' 
0bc1c                 | ' 	return 1;
0bc1c     01 EA 05 F6 | 	mov	result1, #1
0bc20                 | LR__1512
0bc20     A7 F0 03 F6 | 	mov	ptra, fp
0bc24     B2 00 A0 FD | 	call	#popregs_
0bc28                 | _fatfs_cc_rcvr_datablock_0613_ret
0bc28     2D 00 64 FD | 	ret
0bc2c                 | 
0bc2c                 | _fatfs_cc_xmit_datablock_0615
0bc2c     00 4A 05 F6 | 	mov	COUNT_, #0
0bc30     A8 00 A0 FD | 	call	#pushregs_
0bc34     10 F0 07 F1 | 	add	ptra, #16
0bc38     04 4E 05 F1 | 	add	fp, #4
0bc3c     A7 00 62 FC | 	wrlong	arg01, fp
0bc40     04 4E 05 F1 | 	add	fp, #4
0bc44     A7 02 42 FC | 	wrbyte	arg02, fp
0bc48     08 4E 85 F1 | 	sub	fp, #8
0bc4c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0599
0bc50     00 EA 0D F2 | 	cmp	result1, #0 wz
0bc54     00 EA 05 A6 |  if_e	mov	result1, #0
0bc58     90 00 90 AD |  if_e	jmp	#LR__1521
0bc5c     08 4E 05 F1 | 	add	fp, #8
0bc60     A7 02 C2 FA | 	rdbyte	arg02, fp
0bc64     04 4E 05 F1 | 	add	fp, #4
0bc68     A7 02 42 FC | 	wrbyte	arg02, fp
0bc6c     A7 00 02 F6 | 	mov	arg01, fp
0bc70     0C 4E 85 F1 | 	sub	fp, #12
0bc74     01 02 06 F6 | 	mov	arg02, #1
0bc78     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0588
0bc7c     08 4E 05 F1 | 	add	fp, #8
0bc80     A7 02 C2 FA | 	rdbyte	arg02, fp
0bc84     08 4E 85 F1 | 	sub	fp, #8
0bc88     FD 02 0E F2 | 	cmp	arg02, #253 wz
0bc8c     58 00 90 AD |  if_e	jmp	#LR__1520
0bc90     04 4E 05 F1 | 	add	fp, #4
0bc94     A7 00 02 FB | 	rdlong	arg01, fp
0bc98     04 4E 85 F1 | 	sub	fp, #4
0bc9c     09 02 C6 F9 | 	decod	arg02, #9
0bca0     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0588
0bca4     0C 4E 05 F1 | 	add	fp, #12
0bca8     A7 00 02 F6 | 	mov	arg01, fp
0bcac     0C 4E 85 F1 | 	sub	fp, #12
0bcb0     02 02 06 F6 | 	mov	arg02, #2
0bcb4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bcb8     0C 4E 05 F1 | 	add	fp, #12
0bcbc     A7 00 02 F6 | 	mov	arg01, fp
0bcc0     0C 4E 85 F1 | 	sub	fp, #12
0bcc4     01 02 06 F6 | 	mov	arg02, #1
0bcc8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bccc     0C 4E 05 F1 | 	add	fp, #12
0bcd0     A7 02 C2 FA | 	rdbyte	arg02, fp
0bcd4     0C 4E 85 F1 | 	sub	fp, #12
0bcd8     1F 02 06 F5 | 	and	arg02, #31
0bcdc     05 02 0E F2 | 	cmp	arg02, #5 wz
0bce0                 | ' 			return 0;
0bce0     00 EA 05 56 |  if_ne	mov	result1, #0
0bce4     04 00 90 5D |  if_ne	jmp	#LR__1521
0bce8                 | LR__1520
0bce8                 | ' 	}
0bce8                 | ' 
0bce8                 | ' 	return 1;
0bce8     01 EA 05 F6 | 	mov	result1, #1
0bcec                 | LR__1521
0bcec     A7 F0 03 F6 | 	mov	ptra, fp
0bcf0     B2 00 A0 FD | 	call	#popregs_
0bcf4                 | _fatfs_cc_xmit_datablock_0615_ret
0bcf4     2D 00 64 FD | 	ret
0bcf8                 | 
0bcf8                 | _fatfs_cc_send_cmd_0619
0bcf8     01 4A 05 F6 | 	mov	COUNT_, #1
0bcfc     A8 00 A0 FD | 	call	#pushregs_
0bd00     1C F0 07 F1 | 	add	ptra, #28
0bd04                 | _fatfs_cc_send_cmd_0619_enter
0bd04     04 4E 05 F1 | 	add	fp, #4
0bd08     A7 00 42 FC | 	wrbyte	arg01, fp
0bd0c     04 4E 05 F1 | 	add	fp, #4
0bd10     A7 02 62 FC | 	wrlong	arg02, fp
0bd14     04 4E 85 F1 | 	sub	fp, #4
0bd18     A7 EA C1 FA | 	rdbyte	result1, fp
0bd1c     04 4E 85 F1 | 	sub	fp, #4
0bd20     80 EA CD F7 | 	test	result1, #128 wz
0bd24     44 00 90 AD |  if_e	jmp	#LR__1530
0bd28     04 4E 05 F1 | 	add	fp, #4
0bd2c     A7 02 C2 FA | 	rdbyte	arg02, fp
0bd30     7F 02 06 F5 | 	and	arg02, #127
0bd34     A7 02 42 FC | 	wrbyte	arg02, fp
0bd38     04 4E 85 F1 | 	sub	fp, #4
0bd3c     37 00 06 F6 | 	mov	arg01, #55
0bd40     00 02 06 F6 | 	mov	arg02, #0
0bd44     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0619
0bd48     0C 4E 05 F1 | 	add	fp, #12
0bd4c     A7 EA 41 FC | 	wrbyte	result1, fp
0bd50     A7 02 C2 FA | 	rdbyte	arg02, fp
0bd54     0C 4E 85 F1 | 	sub	fp, #12
0bd58     02 02 16 F2 | 	cmp	arg02, #2 wc
0bd5c     0C 4E 05 31 |  if_ae	add	fp, #12
0bd60     A7 EA C1 3A |  if_ae	rdbyte	result1, fp
0bd64     0C 4E 85 31 |  if_ae	sub	fp, #12
0bd68     6C 01 90 3D |  if_ae	jmp	#LR__1534
0bd6c                 | LR__1530
0bd6c     04 4E 05 F1 | 	add	fp, #4
0bd70     A7 02 C2 FA | 	rdbyte	arg02, fp
0bd74     04 4E 85 F1 | 	sub	fp, #4
0bd78     0C 02 0E F2 | 	cmp	arg02, #12 wz
0bd7c     14 00 90 AD |  if_e	jmp	#LR__1531
0bd80     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0605
0bd84     34 FD BF FD | 	call	#_fatfs_cc_select_0609
0bd88     00 EA 0D F2 | 	cmp	result1, #0 wz
0bd8c     FF EA 05 A6 |  if_e	mov	result1, #255
0bd90     44 01 90 AD |  if_e	jmp	#LR__1534
0bd94                 | LR__1531
0bd94     04 4E 05 F1 | 	add	fp, #4
0bd98     A7 02 C2 FA | 	rdbyte	arg02, fp
0bd9c     40 EA 05 F6 | 	mov	result1, #64
0bda0     01 EB 41 F5 | 	or	result1, arg02
0bda4     10 4E 05 F1 | 	add	fp, #16
0bda8     A7 EA 41 FC | 	wrbyte	result1, fp
0bdac     0C 4E 85 F1 | 	sub	fp, #12
0bdb0     A7 EA 01 FB | 	rdlong	result1, fp
0bdb4     18 EA 45 F0 | 	shr	result1, #24
0bdb8     0D 4E 05 F1 | 	add	fp, #13
0bdbc     A7 EA 41 FC | 	wrbyte	result1, fp
0bdc0     0D 4E 85 F1 | 	sub	fp, #13
0bdc4     A7 EA 01 FB | 	rdlong	result1, fp
0bdc8     10 EA 45 F0 | 	shr	result1, #16
0bdcc     0E 4E 05 F1 | 	add	fp, #14
0bdd0     A7 EA 41 FC | 	wrbyte	result1, fp
0bdd4     0E 4E 85 F1 | 	sub	fp, #14
0bdd8     A7 EA 01 FB | 	rdlong	result1, fp
0bddc     08 EA 45 F0 | 	shr	result1, #8
0bde0     0F 4E 05 F1 | 	add	fp, #15
0bde4     A7 EA 41 FC | 	wrbyte	result1, fp
0bde8     0F 4E 85 F1 | 	sub	fp, #15
0bdec     A7 EA 01 FB | 	rdlong	result1, fp
0bdf0     10 4E 05 F1 | 	add	fp, #16
0bdf4     A7 EA 41 FC | 	wrbyte	result1, fp
0bdf8     0C 4E 85 F1 | 	sub	fp, #12
0bdfc     A7 02 48 FC | 	wrbyte	#1, fp
0be00     08 4E 85 F1 | 	sub	fp, #8
0be04     A7 EA C9 FA | 	rdbyte	result1, fp wz
0be08     04 4E 85 F1 | 	sub	fp, #4
0be0c     0C 4E 05 A1 |  if_e	add	fp, #12
0be10     A7 2A 49 AC |  if_e	wrbyte	#149, fp
0be14     0C 4E 85 A1 |  if_e	sub	fp, #12
0be18     04 4E 05 F1 | 	add	fp, #4
0be1c     A7 EA C1 FA | 	rdbyte	result1, fp
0be20     04 4E 85 F1 | 	sub	fp, #4
0be24     08 EA 0D F2 | 	cmp	result1, #8 wz
0be28     0C 4E 05 A1 |  if_e	add	fp, #12
0be2c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
0be30     0C 4E 85 A1 |  if_e	sub	fp, #12
0be34     0C 4E 05 F1 | 	add	fp, #12
0be38     A7 02 C2 FA | 	rdbyte	arg02, fp
0be3c     0D 4E 05 F1 | 	add	fp, #13
0be40     A7 02 42 FC | 	wrbyte	arg02, fp
0be44     05 4E 85 F1 | 	sub	fp, #5
0be48     A7 00 02 F6 | 	mov	arg01, fp
0be4c     14 4E 85 F1 | 	sub	fp, #20
0be50     06 02 06 F6 | 	mov	arg02, #6
0be54     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0588
0be58     04 4E 05 F1 | 	add	fp, #4
0be5c     A7 0A C2 FA | 	rdbyte	local01, fp
0be60     04 4E 85 F1 | 	sub	fp, #4
0be64     0C 0A 0E F2 | 	cmp	local01, #12 wz
0be68     10 4E 05 A1 |  if_e	add	fp, #16
0be6c     A7 00 02 A6 |  if_e	mov	arg01, fp
0be70     10 4E 85 A1 |  if_e	sub	fp, #16
0be74     01 02 06 A6 |  if_e	mov	arg02, #1
0be78     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0595
0be7c     0C 4E 05 F1 | 	add	fp, #12
0be80     A7 14 48 FC | 	wrbyte	#10, fp
0be84     0C 4E 85 F1 | 	sub	fp, #12
0be88                 | ' 	n = 10;
0be88                 | ' 	do
0be88                 | LR__1532
0be88     10 4E 05 F1 | 	add	fp, #16
0be8c     A7 00 02 F6 | 	mov	arg01, fp
0be90     10 4E 85 F1 | 	sub	fp, #16
0be94     01 02 06 F6 | 	mov	arg02, #1
0be98     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0be9c     10 4E 05 F1 | 	add	fp, #16
0bea0     A7 0A C2 FA | 	rdbyte	local01, fp
0bea4     10 4E 85 F1 | 	sub	fp, #16
0bea8     80 0A CE F7 | 	test	local01, #128 wz
0beac     1C 00 90 AD |  if_e	jmp	#LR__1533
0beb0     0C 4E 05 F1 | 	add	fp, #12
0beb4     A7 0A C2 FA | 	rdbyte	local01, fp
0beb8     01 0A 86 F1 | 	sub	local01, #1
0bebc     A7 0A 42 FC | 	wrbyte	local01, fp
0bec0     A7 0A CA FA | 	rdbyte	local01, fp wz
0bec4     0C 4E 85 F1 | 	sub	fp, #12
0bec8     BC FF 9F 5D |  if_ne	jmp	#LR__1532
0becc                 | LR__1533
0becc                 | ' 
0becc                 | ' 	return d;
0becc     10 4E 05 F1 | 	add	fp, #16
0bed0     A7 EA C1 FA | 	rdbyte	result1, fp
0bed4     10 4E 85 F1 | 	sub	fp, #16
0bed8                 | LR__1534
0bed8     A7 F0 03 F6 | 	mov	ptra, fp
0bedc     B2 00 A0 FD | 	call	#popregs_
0bee0                 | _fatfs_cc_send_cmd_0619_ret
0bee0     2D 00 64 FD | 	ret
0bee4                 | 
0bee4                 | _fatfs_cc_disk_deinitialize
0bee4     03 4A 05 F6 | 	mov	COUNT_, #3
0bee8     A8 00 A0 FD | 	call	#pushregs_
0beec     00 00 4E F2 | 	cmps	arg01, #0 wz
0bef0     01 00 00 FF 
0bef4     14 E2 05 F1 | 	add	objptr, ##532
0bef8     F1 00 02 FB | 	rdlong	arg01, objptr
0befc     04 E2 85 F1 | 	sub	objptr, #4
0bf00     F1 0A 02 FB | 	rdlong	local01, objptr
0bf04     08 E2 05 F1 | 	add	objptr, #8
0bf08     F1 0C 02 FB | 	rdlong	local02, objptr
0bf0c     04 E2 05 F1 | 	add	objptr, #4
0bf10     F1 0E 02 FB | 	rdlong	local03, objptr
0bf14     01 00 00 FF 
0bf18     1C E2 85 F1 | 	sub	objptr, ##540
0bf1c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
0bf1c                 | '         return RES_NOTRDY;
0bf1c     03 EA 05 56 |  if_ne	mov	result1, #3
0bf20     2C 00 90 5D |  if_ne	jmp	#LR__1540
0bf24     50 00 62 FD | 	fltl	arg01
0bf28     00 01 08 FC | 	wrpin	#0, arg01
0bf2c     50 0A 62 FD | 	fltl	local01
0bf30     05 01 08 FC | 	wrpin	#0, local01
0bf34     50 0C 62 FD | 	fltl	local02
0bf38     06 01 08 FC | 	wrpin	#0, local02
0bf3c     50 0E 62 FD | 	fltl	local03
0bf40     07 01 08 FC | 	wrpin	#0, local03
0bf44     0A 00 06 F6 | 	mov	arg01, #10
0bf48     50 4F BF FD | 	call	#__system___waitms
0bf4c                 | '     }
0bf4c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
0bf4c                 | '     _pinclear(PIN_SS);
0bf4c                 | '     _pinclear(PIN_CLK);
0bf4c                 | '     _pinclear(PIN_DI);
0bf4c                 | '     _pinclear(PIN_DO);
0bf4c                 | ' 
0bf4c                 | '     _waitms(10);
0bf4c                 | ' 
0bf4c                 | '     return 0;
0bf4c     00 EA 05 F6 | 	mov	result1, #0
0bf50                 | LR__1540
0bf50     A7 F0 03 F6 | 	mov	ptra, fp
0bf54     B2 00 A0 FD | 	call	#popregs_
0bf58                 | _fatfs_cc_disk_deinitialize_ret
0bf58     2D 00 64 FD | 	ret
0bf5c                 | 
0bf5c                 | _fatfs_cc_gettimeofday
0bf5c     04 4A 05 F6 | 	mov	COUNT_, #4
0bf60     A8 00 A0 FD | 	call	#pushregs_
0bf64     00 0B 02 F6 | 	mov	local01, arg01
0bf68     1C 4D BF FD | 	call	#__system___getus
0bf6c     F5 00 02 F6 | 	mov	arg01, result1
0bf70     02 00 00 FF 
0bf74     58 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
0bf78     F3 0C 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
0bf7c     00 EB 01 F6 | 	mov	result1, arg01
0bf80     06 EB 81 F1 | 	sub	result1, local02
0bf84     A1 07 00 FF 
0bf88     40 EA 15 FD | 	qdiv	result1, ##1000000
0bf8c     02 00 00 FF 
0bf90     58 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
0bf94     18 0C 62 FD | 	getqx	local02
0bf98     A1 07 00 FF 
0bf9c     40 EA 15 FD | 	qdiv	result1, ##1000000
0bfa0     00 0C 0E F2 | 	cmp	local02, #0 wz
0bfa4     19 0E 62 FD | 	getqy	local03
0bfa8     28 00 90 AD |  if_e	jmp	#LR__1550
0bfac     02 00 00 FF 
0bfb0     54 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
0bfb4     F3 10 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
0bfb8     06 11 02 F1 | 	add	local04, local02
0bfbc     F3 10 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
0bfc0     07 01 82 F1 | 	sub	arg01, local03
0bfc4     04 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
0bfc8     F3 00 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
0bfcc     02 00 00 FF 
0bfd0     58 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
0bfd4                 | LR__1550
0bfd4     02 00 00 FF 
0bfd8     54 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
0bfdc     F3 10 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
0bfe0     02 00 00 FF 
0bfe4     54 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
0bfe8     05 11 62 FC | 	wrlong	local04, local01
0bfec     04 0A 06 F1 | 	add	local01, #4
0bff0     05 0F 62 FC | 	wrlong	local03, local01
0bff4                 | '         lastsec += secs;
0bff4                 | '         lastus = now - leftover;
0bff4                 | '     }
0bff4                 | '     tv->tv_sec = lastsec;
0bff4                 | '     tv->tv_usec = leftover;
0bff4                 | '     return 0;
0bff4     00 EA 05 F6 | 	mov	result1, #0
0bff8     A7 F0 03 F6 | 	mov	ptra, fp
0bffc     B2 00 A0 FD | 	call	#popregs_
0c000                 | _fatfs_cc_gettimeofday_ret
0c000     2D 00 64 FD | 	ret
0c004                 | 
0c004                 | _fatfs_cc__is_leap_year
0c004     00 EB 51 F6 | 	abs	result1, arg01 wc
0c008     03 EA 05 F5 | 	and	result1, #3
0c00c     F5 EA 89 F6 | 	negc	result1, result1 wz
0c010     38 00 90 5D |  if_ne	jmp	#LR__1561
0c014     00 EB 51 F6 | 	abs	result1, arg01 wc
0c018     64 EA 15 FD | 	qdiv	result1, #100
0c01c     19 EA 61 FD | 	getqy	result1
0c020     F5 EA 89 F6 | 	negc	result1, result1 wz
0c024     1C 00 90 5D |  if_ne	jmp	#LR__1560
0c028     00 EB 51 F6 | 	abs	result1, arg01 wc
0c02c     90 EB 15 FD | 	qdiv	result1, #400
0c030                 | '       return (0 == y % 400);
0c030     00 EA 05 F6 | 	mov	result1, #0
0c034     19 EE 61 FD | 	getqy	_var01
0c038     F7 EE 89 F6 | 	negc	_var01, _var01 wz
0c03c     01 EA 05 A6 |  if_e	mov	result1, #1
0c040     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
0c044                 | LR__1560
0c044                 | '     return 1;
0c044     01 EA 05 F6 | 	mov	result1, #1
0c048     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
0c04c                 | LR__1561
0c04c                 | '   }
0c04c                 | '   return 0;
0c04c     00 EA 05 F6 | 	mov	result1, #0
0c050                 | _fatfs_cc__is_leap_year_ret
0c050     2D 00 64 FD | 	ret
0c054                 | 
0c054                 | _fatfs_cc___tzoffset
0c054     00 EF 09 F6 | 	mov	_var01, arg01 wz
0c058     FF FF FF FF 
0c05c     01 FF 6B FC | 	wrlong	##-1, arg02
0c060     01 F0 05 F6 | 	mov	_var02, #1
0c064     F7 F2 C9 5A |  if_ne	rdbyte	_var03, _var01 wz
0c068                 | '                 return 0;
0c068     00 EA 05 A6 |  if_e	mov	result1, #0
0c06c     94 02 90 AD |  if_e	jmp	#LR__1587
0c070     01 01 68 FC | 	wrlong	#0, arg02
0c074     02 00 00 FF 
0c078     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c07c     F3 F4 01 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
0c080                 | ' 
0c080                 | '        *hasdst = 0;
0c080                 | ' 
0c080                 | ' 	n = stdname;
0c080                 | '         while (*s && isalpha(*s)) {
0c080     02 00 00 FF 
0c084     2C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
0c088     97 28 48 FB | 	callpa	#(@LR__1571-@LR__1570)>>2,fcache_load_ptr_
0c08c                 | LR__1570
0c08c     F7 F2 C9 FA | 	rdbyte	_var03, _var01 wz
0c090     48 00 90 AD |  if_e	jmp	#LR__1572
0c094     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c098                 | ' {
0c098                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
0c098     80 00 36 F3 | 	fle	arg01, #128 wc
0c09c                 | '     return __ctype[c];
0c09c     02 00 00 FF 
0c0a0     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c0a4     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c0a8     00 EB C1 FA | 	rdbyte	result1, arg01
0c0ac     02 00 00 FF 
0c0b0     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c0b4     0C EA CD F7 | 	test	result1, #12 wz
0c0b8     20 00 90 AD |  if_e	jmp	#LR__1572
0c0bc     F7 F6 01 F6 | 	mov	_var05, _var01
0c0c0     F7 F8 01 F6 | 	mov	_var06, _var01
0c0c4     01 F8 05 F1 | 	add	_var06, #1
0c0c8     FB FA C1 FA | 	rdbyte	_var07, _var05
0c0cc     FC EE 01 F6 | 	mov	_var01, _var06
0c0d0     FA FA 41 FC | 	wrbyte	_var07, _var04
0c0d4     01 F4 05 F1 | 	add	_var04, #1
0c0d8     B0 FF 9F FD | 	jmp	#LR__1570
0c0dc                 | LR__1571
0c0dc                 | LR__1572
0c0dc     FA 00 48 FC | 	wrbyte	#0, _var04
0c0e0     00 FC 05 F6 | 	mov	_var08, #0
0c0e4     F7 F2 C1 FA | 	rdbyte	_var03, _var01
0c0e8     2D F2 0D F2 | 	cmp	_var03, #45 wz
0c0ec     01 F0 65 A6 |  if_e	neg	_var02, #1
0c0f0     01 EE 05 A1 |  if_e	add	_var01, #1
0c0f4     97 28 48 FB | 	callpa	#(@LR__1574-@LR__1573)>>2,fcache_load_ptr_
0c0f8                 | '                 sgn = -1;
0c0f8                 | '                 s++;
0c0f8                 | '         }
0c0f8                 | '         while (isdigit(*s)) {
0c0f8                 | LR__1573
0c0f8     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c0fc                 | ' {
0c0fc                 | '   return  (__ctype_get(c) & 0x02 ) ;
0c0fc     80 00 36 F3 | 	fle	arg01, #128 wc
0c100                 | '     return __ctype[c];
0c100     02 00 00 FF 
0c104     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c108     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c10c     00 EB C1 FA | 	rdbyte	result1, arg01
0c110     02 00 00 FF 
0c114     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c118     02 EA CD F7 | 	test	result1, #2 wz
0c11c     28 00 90 AD |  if_e	jmp	#LR__1575
0c120     FE F2 01 F6 | 	mov	_var03, _var08
0c124     02 F2 65 F0 | 	shl	_var03, #2
0c128     FE F2 01 F1 | 	add	_var03, _var08
0c12c     01 F2 65 F0 | 	shl	_var03, #1
0c130     F7 F6 C1 FA | 	rdbyte	_var05, _var01
0c134     30 F6 85 F1 | 	sub	_var05, #48
0c138     FB F2 01 F1 | 	add	_var03, _var05
0c13c     F9 FC 01 F6 | 	mov	_var08, _var03
0c140     01 EE 05 F1 | 	add	_var01, #1
0c144     B0 FF 9F FD | 	jmp	#LR__1573
0c148                 | LR__1574
0c148                 | LR__1575
0c148     07 00 00 FF 
0c14c     10 FC 05 FD | 	qmul	_var08, ##3600
0c150     F7 F2 C1 FA | 	rdbyte	_var03, _var01
0c154     3A F2 0D F2 | 	cmp	_var03, #58 wz
0c158     18 FE 61 FD | 	getqx	_var09
0c15c     70 00 90 5D |  if_ne	jmp	#LR__1579
0c160     00 FC 05 F6 | 	mov	_var08, #0
0c164     01 EE 05 F1 | 	add	_var01, #1
0c168     97 28 48 FB | 	callpa	#(@LR__1577-@LR__1576)>>2,fcache_load_ptr_
0c16c                 | '                 x = 0;
0c16c                 | '                 s++;
0c16c                 | '                 while (isdigit(*s)) {
0c16c                 | LR__1576
0c16c     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c170                 | ' {
0c170                 | '   return  (__ctype_get(c) & 0x02 ) ;
0c170     80 00 36 F3 | 	fle	arg01, #128 wc
0c174                 | '     return __ctype[c];
0c174     02 00 00 FF 
0c178     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c17c     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c180     00 EB C1 FA | 	rdbyte	result1, arg01
0c184     02 00 00 FF 
0c188     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c18c     02 EA CD F7 | 	test	result1, #2 wz
0c190     28 00 90 AD |  if_e	jmp	#LR__1578
0c194     FE F2 01 F6 | 	mov	_var03, _var08
0c198     02 F2 65 F0 | 	shl	_var03, #2
0c19c     FE F2 01 F1 | 	add	_var03, _var08
0c1a0     01 F2 65 F0 | 	shl	_var03, #1
0c1a4     F7 F6 C1 FA | 	rdbyte	_var05, _var01
0c1a8     30 F6 85 F1 | 	sub	_var05, #48
0c1ac     FB F2 01 F1 | 	add	_var03, _var05
0c1b0     F9 FC 01 F6 | 	mov	_var08, _var03
0c1b4     01 EE 05 F1 | 	add	_var01, #1
0c1b8     B0 FF 9F FD | 	jmp	#LR__1576
0c1bc                 | LR__1577
0c1bc                 | LR__1578
0c1bc     FE FA 01 F6 | 	mov	_var07, _var08
0c1c0     04 FA 65 F0 | 	shl	_var07, #4
0c1c4     FE FA 81 F1 | 	sub	_var07, _var08
0c1c8     02 FA 65 F0 | 	shl	_var07, #2
0c1cc     FD FE 01 F1 | 	add	_var09, _var07
0c1d0                 | LR__1579
0c1d0     02 00 00 FF 
0c1d4     35 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
0c1d8     F3 F4 01 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
0c1dc     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c1e0                 | ' {
0c1e0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
0c1e0     80 00 36 F3 | 	fle	arg01, #128 wc
0c1e4                 | '     return __ctype[c];
0c1e4     27 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
0c1e8     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c1ec     00 EB C1 FA | 	rdbyte	result1, arg01
0c1f0     02 00 00 FF 
0c1f4     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c1f8     0C EA CD F7 | 	test	result1, #12 wz
0c1fc     50 00 90 AD |  if_e	jmp	#LR__1582
0c200     01 03 68 FC | 	wrlong	#1, arg02
0c204                 | '                 *hasdst = 1;
0c204                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
0c204                 | LR__1580
0c204     F7 F2 C9 FA | 	rdbyte	_var03, _var01 wz
0c208     44 00 90 AD |  if_e	jmp	#LR__1581
0c20c     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c210                 | ' {
0c210                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
0c210     80 00 36 F3 | 	fle	arg01, #128 wc
0c214                 | '     return __ctype[c];
0c214     02 00 00 FF 
0c218     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c21c     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c220     00 EB C1 FA | 	rdbyte	result1, arg01
0c224     02 00 00 FF 
0c228     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c22c     0C EA CD F7 | 	test	result1, #12 wz
0c230     1C 00 90 AD |  if_e	jmp	#LR__1581
0c234     F7 F8 01 F6 | 	mov	_var06, _var01
0c238     01 F8 05 F1 | 	add	_var06, #1
0c23c     F7 FA C1 FA | 	rdbyte	_var07, _var01
0c240     FC EE 01 F6 | 	mov	_var01, _var06
0c244     FA FA 41 FC | 	wrbyte	_var07, _var04
0c248     01 F4 05 F1 | 	add	_var04, #1
0c24c     B4 FF 9F FD | 	jmp	#LR__1580
0c250                 | LR__1581
0c250                 | LR__1582
0c250     FA 00 48 FC | 	wrbyte	#0, _var04
0c254     02 00 00 FF 
0c258     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c25c     F3 F2 C9 FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
0c260     02 00 00 FF 
0c264     2C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
0c268     20 00 90 AD |  if_e	jmp	#LR__1583
0c26c     02 00 00 FF 
0c270     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c274     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c278     08 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
0c27c     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c280     02 00 00 FF 
0c284     24 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
0c288     1C 00 90 FD | 	jmp	#LR__1584
0c28c                 | LR__1583
0c28c     02 00 00 FF 
0c290     3E E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
0c294     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c298     1A E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
0c29c     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c2a0     02 00 00 FF 
0c2a4     24 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
0c2a8                 | LR__1584
0c2a8     02 00 00 FF 
0c2ac     35 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
0c2b0     F3 F2 C9 FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
0c2b4     02 00 00 FF 
0c2b8     35 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
0c2bc     20 00 90 AD |  if_e	jmp	#LR__1585
0c2c0     02 00 00 FF 
0c2c4     35 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
0c2c8     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c2cc     0D E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
0c2d0     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c2d4     02 00 00 FF 
0c2d8     28 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
0c2dc     1C 00 90 FD | 	jmp	#LR__1586
0c2e0                 | LR__1585
0c2e0     02 00 00 FF 
0c2e4     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c2e8     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c2ec     04 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
0c2f0     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c2f4     02 00 00 FF 
0c2f8     28 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
0c2fc                 | LR__1586
0c2fc     FF F0 01 FD | 	qmul	_var02, _var09
0c300                 | ' 		_tzname[1] = stdname;
0c300                 | ' 
0c300                 | '         return sgn * off;
0c300     18 EA 61 FD | 	getqx	result1
0c304                 | LR__1587
0c304                 | _fatfs_cc___tzoffset_ret
0c304     2D 00 64 FD | 	ret
0c308                 | 
0c308                 | _fatfs_cc___indst
0c308     10 00 06 F1 | 	add	arg01, #16
0c30c     00 EF 01 FB | 	rdlong	_var01, arg01
0c310     10 00 86 F1 | 	sub	arg01, #16
0c314     02 EE 0D F2 | 	cmp	_var01, #2 wz
0c318     30 00 90 5D |  if_ne	jmp	#LR__1590
0c31c     07 EE 05 F6 | 	mov	_var01, #7
0c320     18 00 06 F1 | 	add	arg01, #24
0c324     00 F1 01 FB | 	rdlong	_var02, arg01
0c328     F8 EE 01 F1 | 	add	_var01, _var02
0c32c     0C 00 86 F1 | 	sub	arg01, #12
0c330     00 F3 01 FB | 	rdlong	_var03, arg01
0c334     F9 EE 81 F1 | 	sub	_var01, _var03
0c338     00 EE 55 F2 | 	cmps	_var01, #0 wc
0c33c                 | '                         return 1;
0c33c     01 EA 05 C6 |  if_b	mov	result1, #1
0c340     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
0c344                 | '                 return 0;
0c344     00 EA 05 F6 | 	mov	result1, #0
0c348     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
0c34c                 | LR__1590
0c34c     10 00 06 F1 | 	add	arg01, #16
0c350     00 EF 01 FB | 	rdlong	_var01, arg01
0c354     10 00 86 F1 | 	sub	arg01, #16
0c358     0A EE 0D F2 | 	cmp	_var01, #10 wz
0c35c     28 00 90 5D |  if_ne	jmp	#LR__1591
0c360     18 00 06 F1 | 	add	arg01, #24
0c364     00 EF 01 FB | 	rdlong	_var01, arg01
0c368     0C 00 86 F1 | 	sub	arg01, #12
0c36c     00 F5 01 FB | 	rdlong	_var04, arg01
0c370     FA EE 81 F1 | 	sub	_var01, _var04
0c374     00 EE 55 F2 | 	cmps	_var01, #0 wc
0c378                 | '                         return 0;
0c378     00 EA 05 C6 |  if_b	mov	result1, #0
0c37c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
0c380                 | '                 return 1;
0c380     01 EA 05 F6 | 	mov	result1, #1
0c384     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
0c388                 | LR__1591
0c388                 | '         }
0c388                 | ' 
0c388                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
0c388     00 EE 05 F6 | 	mov	_var01, #0
0c38c     10 00 06 F1 | 	add	arg01, #16
0c390     00 F1 01 FB | 	rdlong	_var02, arg01
0c394     10 00 86 F1 | 	sub	arg01, #16
0c398     03 F0 55 F2 | 	cmps	_var02, #3 wc
0c39c     10 00 90 CD |  if_b	jmp	#LR__1592
0c3a0     10 00 06 F1 | 	add	arg01, #16
0c3a4     00 F3 01 FB | 	rdlong	_var03, arg01
0c3a8     0A F2 55 F2 | 	cmps	_var03, #10 wc
0c3ac     01 EE 05 C6 |  if_b	mov	_var01, #1
0c3b0                 | LR__1592
0c3b0     F7 EA 01 F6 | 	mov	result1, _var01
0c3b4                 | _fatfs_cc___indst_ret
0c3b4     2D 00 64 FD | 	ret
0c3b8                 | 
0c3b8                 | __struct__s_vfs_file_t_putchar
0c3b8     04 4A 05 F6 | 	mov	COUNT_, #4
0c3bc     A8 00 A0 FD | 	call	#pushregs_
0c3c0     1C E2 05 F1 | 	add	objptr, #28
0c3c4     F1 0A 0A FB | 	rdlong	local01, objptr wz
0c3c8     1C E2 85 F1 | 	sub	objptr, #28
0c3cc     00 EA 05 A6 |  if_e	mov	result1, #0
0c3d0     48 00 90 AD |  if_e	jmp	#LR__1600
0c3d4     1C E2 05 F1 | 	add	objptr, #28
0c3d8     F1 0C 02 FB | 	rdlong	local02, objptr
0c3dc     06 0F 02 F6 | 	mov	local03, local02
0c3e0     1C E2 85 F1 | 	sub	objptr, #28
0c3e4     13 0E 46 F7 | 	zerox	local03, #19
0c3e8     14 0C 46 F0 | 	shr	local02, #20
0c3ec     02 0C 66 F0 | 	shl	local02, #2
0c3f0     ED 0C 02 F1 | 	add	local02, __methods__
0c3f4     06 0D 02 FB | 	rdlong	local02, local02
0c3f8     F1 02 02 F6 | 	mov	arg02, objptr
0c3fc     F1 10 02 F6 | 	mov	local04, objptr
0c400     07 E3 01 F6 | 	mov	objptr, local03
0c404     2D 0C 62 FD | 	call	local02
0c408     08 E3 01 F6 | 	mov	objptr, local04
0c40c                 | '     return (i < 0) ? 0 : 1;
0c40c     00 EA 55 F2 | 	cmps	result1, #0 wc
0c410     00 0A 06 C6 |  if_b	mov	local01, #0
0c414     01 0A 06 36 |  if_ae	mov	local01, #1
0c418     05 EB 01 F6 | 	mov	result1, local01
0c41c                 | LR__1600
0c41c     A7 F0 03 F6 | 	mov	ptra, fp
0c420     B2 00 A0 FD | 	call	#popregs_
0c424                 | __struct__s_vfs_file_t_putchar_ret
0c424     2D 00 64 FD | 	ret
0c428                 | 
0c428                 | __struct__s_vfs_file_t_getchar
0c428     03 4A 05 F6 | 	mov	COUNT_, #3
0c42c     A8 00 A0 FD | 	call	#pushregs_
0c430     20 E2 05 F1 | 	add	objptr, #32
0c434     F1 00 0A FB | 	rdlong	arg01, objptr wz
0c438     20 E2 85 F1 | 	sub	objptr, #32
0c43c     01 EA 65 A6 |  if_e	neg	result1, #1
0c440     38 00 90 AD |  if_e	jmp	#LR__1610
0c444                 | '     return getcf(__this);
0c444     20 E2 05 F1 | 	add	objptr, #32
0c448     F1 0A 02 FB | 	rdlong	local01, objptr
0c44c     05 0D 02 F6 | 	mov	local02, local01
0c450     20 E2 85 F1 | 	sub	objptr, #32
0c454     13 0C 46 F7 | 	zerox	local02, #19
0c458     14 0A 46 F0 | 	shr	local01, #20
0c45c     02 0A 66 F0 | 	shl	local01, #2
0c460     ED 0A 02 F1 | 	add	local01, __methods__
0c464     05 0B 02 FB | 	rdlong	local01, local01
0c468     F1 00 02 F6 | 	mov	arg01, objptr
0c46c     F1 0E 02 F6 | 	mov	local03, objptr
0c470     06 E3 01 F6 | 	mov	objptr, local02
0c474     2D 0A 62 FD | 	call	local01
0c478     07 E3 01 F6 | 	mov	objptr, local03
0c47c                 | LR__1610
0c47c     A7 F0 03 F6 | 	mov	ptra, fp
0c480     B2 00 A0 FD | 	call	#popregs_
0c484                 | __struct__s_vfs_file_t_getchar_ret
0c484     2D 00 64 FD | 	ret
0c488                 | 
0c488                 | __struct___bas_wrap_sender_tx
0c488     03 4A 05 F6 | 	mov	COUNT_, #3
0c48c     A8 00 A0 FD | 	call	#pushregs_
0c490     F1 0A 02 FB | 	rdlong	local01, objptr
0c494     05 0D 02 F6 | 	mov	local02, local01
0c498     13 0A 46 F7 | 	zerox	local01, #19
0c49c     14 0C 46 F0 | 	shr	local02, #20
0c4a0     02 0C 66 F0 | 	shl	local02, #2
0c4a4     ED 0C 02 F1 | 	add	local02, __methods__
0c4a8     06 0D 02 FB | 	rdlong	local02, local02
0c4ac     F1 0E 02 F6 | 	mov	local03, objptr
0c4b0     05 E3 01 F6 | 	mov	objptr, local01
0c4b4     2D 0C 62 FD | 	call	local02
0c4b8     07 E3 01 F6 | 	mov	objptr, local03
0c4bc     01 EA 05 F6 | 	mov	result1, #1
0c4c0     A7 F0 03 F6 | 	mov	ptra, fp
0c4c4     B2 00 A0 FD | 	call	#popregs_
0c4c8                 | __struct___bas_wrap_sender_tx_ret
0c4c8     2D 00 64 FD | 	ret
0c4cc                 | 
0c4cc                 | __struct___bas_wrap_sender_rx
0c4cc     03 4A 05 F6 | 	mov	COUNT_, #3
0c4d0     A8 00 A0 FD | 	call	#pushregs_
0c4d4     04 E2 05 F1 | 	add	objptr, #4
0c4d8     F1 0A 02 FB | 	rdlong	local01, objptr
0c4dc     05 0D 02 F6 | 	mov	local02, local01
0c4e0     04 E2 85 F1 | 	sub	objptr, #4
0c4e4     13 0C 46 F7 | 	zerox	local02, #19
0c4e8     14 0A 46 F0 | 	shr	local01, #20
0c4ec     02 0A 66 F0 | 	shl	local01, #2
0c4f0     ED 0A 02 F1 | 	add	local01, __methods__
0c4f4     05 0B 02 FB | 	rdlong	local01, local01
0c4f8     F1 0E 02 F6 | 	mov	local03, objptr
0c4fc     06 E3 01 F6 | 	mov	objptr, local02
0c500     2D 0A 62 FD | 	call	local01
0c504     07 E3 01 F6 | 	mov	objptr, local03
0c508     A7 F0 03 F6 | 	mov	ptra, fp
0c50c     B2 00 A0 FD | 	call	#popregs_
0c510                 | __struct___bas_wrap_sender_rx_ret
0c510     2D 00 64 FD | 	ret
0c514                 | 
0c514                 | __struct___bas_wrap_sender_close
0c514     03 4A 05 F6 | 	mov	COUNT_, #3
0c518     A8 00 A0 FD | 	call	#pushregs_
0c51c     08 E2 05 F1 | 	add	objptr, #8
0c520     F1 0A 02 FB | 	rdlong	local01, objptr
0c524     05 0D 02 F6 | 	mov	local02, local01
0c528     08 E2 85 F1 | 	sub	objptr, #8
0c52c     13 0C 46 F7 | 	zerox	local02, #19
0c530     14 0A 46 F0 | 	shr	local01, #20
0c534     02 0A 66 F0 | 	shl	local01, #2
0c538     ED 0A 02 F1 | 	add	local01, __methods__
0c53c     05 0B 02 FB | 	rdlong	local01, local01
0c540     F1 0E 02 F6 | 	mov	local03, objptr
0c544     06 E3 01 F6 | 	mov	objptr, local02
0c548     2D 0A 62 FD | 	call	local01
0c54c     07 E3 01 F6 | 	mov	objptr, local03
0c550     A7 F0 03 F6 | 	mov	ptra, fp
0c554     B2 00 A0 FD | 	call	#popregs_
0c558                 | __struct___bas_wrap_sender_close_ret
0c558     2D 00 64 FD | 	ret
0c55c                 | 
0c55c                 | LR__1620
0c55c     2F          | 	byte	"/"
0c55d     00          | 	byte	0
0c55e                 | LR__1621
0c55e     20 21 21 21 
0c562     20 63 6F 72 
0c566     72 75 70 74 
0c56a     65 64 20 68 
0c56e     65 61 70 3F 
0c572     3F 3F 20 21 
0c576     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0c579     00          | 	byte	0
0c57a                 | LR__1622
0c57a     20 21 21 21 
0c57e     20 6F 75 74 
0c582     20 6F 66 20 
0c586     68 65 61 70 
0c58a     20 6D 65 6D 
0c58e     6F 72 79 20 
0c592     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
0c596     00          | 	byte	0
0c597                 | LR__1623
0c597     20 21 21 21 
0c59b     20 63 6F 72 
0c59f     72 75 70 74 
0c5a3     65 64 20 68 
0c5a7     65 61 70 20 
0c5ab     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0c5af     00          | 	byte	0
0c5b0                 | LR__1624
0c5b0     00          | 	byte	0
0c5b1     00          | 	byte	0
0c5b2                 | LR__1625
0c5b2     2A 3A 3C 3E 
0c5b6     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
0c5ba     00          | 	byte	0
0c5bb                 | LR__1626
0c5bb     2B 2C 3B 3D 
0c5bf     5B 5D       | 	byte	"+,;=[]"
0c5c1     00          | 	byte	0
0c5c2                 | LR__1627
0c5c2     46 41 54 33 
0c5c6     32 20 20 20 | 	byte	"FAT32   "
0c5ca     00          | 	byte	0
0c5cb                 | LR__1628
0c5cb     54 5A       | 	byte	"TZ"
0c5cd     00          | 	byte	0
0c5ce                 | LR__1629
0c5ce     00          | 	byte	0
0c5cf     00          | 	byte	0
0c5d0                 | LR__1630
0c5d0     2F 73 64    | 	byte	"/sd"
0c5d3     00          | 	byte	0
0c5d4                 | LR__1631
0c5d4     2F 73 64 2F 
0c5d8     62 61 73    | 	byte	"/sd/bas"
0c5db     00          | 	byte	0
0c5dc                 | LR__1632
0c5dc     2F 73 64 2F 
0c5e0     62 61 73    | 	byte	"/sd/bas"
0c5e3     00          | 	byte	0
0c5e4                 | LR__1633
0c5e4     6E 6F 6E 65 
0c5e8     78 69 73 74 
0c5ec     69 6E 67 66 
0c5f0     69 6C 65    | 	byte	"nonexistingfile"
0c5f3     00          | 	byte	0
0c5f4                 | LR__1634
0c5f4     2F 6B 77 61 
0c5f8     73 73       | 	byte	"/kwass"
0c5fa     00          | 	byte	0
0c5fb                 | LR__1635
0c5fb     2F 73 64 2F 
0c5ff     62 61 73    | 	byte	"/sd/bas"
0c602     00          | 	byte	0
0c603                 | LR__1636
0c603     6D 6F 75 73 
0c607     65 74 68 65 
0c60b     72 65 6D 69 
0c60f     6E 2E 62 61 
0c613     73          | 	byte	"mousetheremin.bas"
0c614     00          | 	byte	0
0c615                 | LR__1637
0c615     2F 73 64    | 	byte	"/sd"
0c618     00          | 	byte	0
0c619     00 00 00    | 	alignl
0c61c                 | __system__dat_
0c61c     00 00 00 00 
0c620     00 00 00 00 | 	byte	$00[8]
0c624     03 00 00 00 
0c628     00 00 00 00 
0c62c     00 00 00 00 
0c630     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c634     00 00 00 00 
      ...             
0c8c0     00 00 00 00 
0c8c4     00 00 00 00 | 	byte	$00[660]
0c8c8     00 00 50 00 | 	long	(5 {__system____root_opendir})<<20
0c8cc     00 00 60 00 | 	long	(6 {__system____root_closedir})<<20
0c8d0     00 00 70 00 | 	long	(7 {__system____root_readdir})<<20
0c8d4     00 00 80 00 | 	long	(8 {__system____root_stat})<<20
0c8d8     00 00 00 00 
0c8dc     00 00 00 00 
0c8e0     00 00 00 00 
0c8e4     00 00 00 00 
0c8e8     00 00 00 00 
0c8ec     00 00 00 00 
0c8f0     00 00 00 00 | 	byte	$00[28]
0c8f4     5C C9 00 00 | 	long	@@@__system__dat_ + 832
0c8f8     5F C9 00 00 | 	long	@@@__system__dat_ + 835
0c8fc     80 C9 00 00 | 	long	@@@__system__dat_ + 868
0c900     99 C9 00 00 | 	long	@@@__system__dat_ + 893
0c904     B4 C9 00 00 | 	long	@@@__system__dat_ + 920
0c908     CE C9 00 00 | 	long	@@@__system__dat_ + 946
0c90c     DE C9 00 00 | 	long	@@@__system__dat_ + 962
0c910     F0 C9 00 00 | 	long	@@@__system__dat_ + 980
0c914     02 CA 00 00 | 	long	@@@__system__dat_ + 998
0c918     14 CA 00 00 | 	long	@@@__system__dat_ + 1016
0c91c     20 CA 00 00 | 	long	@@@__system__dat_ + 1028
0c920     31 CA 00 00 | 	long	@@@__system__dat_ + 1045
0c924     45 CA 00 00 | 	long	@@@__system__dat_ + 1065
0c928     4F CA 00 00 | 	long	@@@__system__dat_ + 1075
0c92c     5F CA 00 00 | 	long	@@@__system__dat_ + 1091
0c930     6E CA 00 00 | 	long	@@@__system__dat_ + 1106
0c934     84 CA 00 00 | 	long	@@@__system__dat_ + 1128
0c938     9D CA 00 00 | 	long	@@@__system__dat_ + 1153
0c93c     B1 CA 00 00 | 	long	@@@__system__dat_ + 1173
0c940     BF CA 00 00 | 	long	@@@__system__dat_ + 1187
0c944     D3 CA 00 00 | 	long	@@@__system__dat_ + 1207
0c948     DF CA 00 00 | 	long	@@@__system__dat_ + 1219
0c94c     F1 CA 00 00 | 	long	@@@__system__dat_ + 1237
0c950     09 CB 00 00 | 	long	@@@__system__dat_ + 1261
0c954     1B CB 00 00 | 	long	@@@__system__dat_ + 1279
0c958     2E CB 00 00 | 	long	@@@__system__dat_ + 1298
0c95c     4F 4B 00 4E 
0c960     75 6D 65 72 
0c964     69 63 61 6C 
0c968     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
0c96c     75 6D 65 6E 
0c970     74 20 6F 75 
0c974     74 20 6F 66 
0c978     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
0c97c     61 69 6E 00 
0c980     52 65 73 75 
0c984     6C 74 20 6E 
0c988     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
0c98c     65 70 72 65 
0c990     73 65 6E 74 
0c994     61 62 6C 65 
0c998     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
0c99c     65 67 61 6C 
0c9a0     20 6D 75 6C 
0c9a4     74 69 62 79 
0c9a8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
0c9ac     65 71 75 65 
0c9b0     6E 63 65 00 
0c9b4     4E 6F 20 73 
0c9b8     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
0c9bc     66 69 6C 65 
0c9c0     20 6F 72 20 
0c9c4     64 69 72 65 
0c9c8     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
0c9cc     79 00 42 61 
0c9d0     64 20 66 69 
0c9d4     6C 65 20 6E 
0c9d8     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
0c9dc     72 00 50 65 
0c9e0     72 6D 69 73 
0c9e4     73 69 6F 6E 
0c9e8     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
0c9ec     69 65 64 00 
0c9f0     4E 6F 74 20 
0c9f4     65 6E 6F 75 
0c9f8     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
0c9fc     65 6D 6F 72 
0ca00     79 00 54 65 
0ca04     6D 70 6F 72 
0ca08     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
0ca0c     66 61 69 6C 
0ca10     75 72 65 00 
0ca14     46 69 6C 65 
0ca18     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
0ca1c     73 74 73 00 
0ca20     49 6E 76 61 
0ca24     6C 69 64 20 
0ca28     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
0ca2c     6D 65 6E 74 
0ca30     00 54 6F 6F 
0ca34     20 6D 61 6E 
0ca38     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
0ca3c     65 6E 20 66 
0ca40     69 6C 65 73 
0ca44     00 49 2F 4F 
0ca48     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
0ca4c     6F 72 00 4E 
0ca50     6F 74 20 61 
0ca54     20 64 69 72 
0ca58     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
0ca5c     72 79 00 49 
0ca60     73 20 61 20 
0ca64     64 69 72 65 
0ca68     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
0ca6c     79 00 52 65 
0ca70     61 64 20 6F 
0ca74     6E 6C 79 20 
0ca78     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
0ca7c     20 73 79 73 
0ca80     74 65 6D 00 
0ca84     46 75 6E 63 
0ca88     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
0ca8c     20 6E 6F 74 
0ca90     20 69 6D 70 
0ca94     6C 65 6D 65 
0ca98     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
0ca9c     00 44 69 72 
0caa0     65 63 74 6F 
0caa4     72 79 20 6E 
0caa8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
0caac     6D 70 74 79 
0cab0     00 4E 61 6D 
0cab4     65 20 74 6F 
0cab8     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
0cabc     6E 67 00 44 
0cac0     65 76 69 63 
0cac4     65 20 6E 6F 
0cac8     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
0cacc     65 6B 61 62 
0cad0     6C 65 00 42 
0cad4     61 64 20 61 
0cad8     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
0cadc     73 73 00 42 
0cae0     72 6F 6B 65 
0cae4     6E 20 63 6F 
0cae8     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
0caec     74 69 6F 6E 
0caf0     00 44 65 76 
0caf4     69 63 65 20 
0caf8     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
0cafc     65 73 6F 75 
0cb00     72 63 65 20 
0cb04     62 75 73 79 
0cb08     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
0cb0c     73 73 20 64 
0cb10     65 76 69 63 
0cb14     65 20 6C 69 
0cb18     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
0cb1c     6F 20 73 70 
0cb20     61 63 65 20 
0cb24     6F 6E 20 64 
0cb28     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
0cb2c     65 00 55 6E 
0cb30     6B 6E 6F 77 
0cb34     6E 20 65 72 
0cb38     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
0cb3c     00 00 00 00 
0cb40     00 00 00 00 | 	byte	$00[8]
0cb44     05 00 00 00 
0cb48     00 00 00 00 
0cb4c     00 00 00 00 
0cb50     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb54     00 00 00 00 | 	byte	$00, $00, $00, $00
0cb58     00 00 D0 01 | 	long	(29 {__system___tx})<<20
0cb5c     00 00 E0 01 | 	long	(30 {__system___rx})<<20
0cb60     00 00 00 00 | 	byte	$00, $00, $00, $00
0cb64     00 00 F0 01 | 	long	(31 {__system___rxtxioctl_0188})<<20
0cb68     00 00 00 02 | 	long	(32 {__system____dummy_flush_0189})<<20
0cb6c     00 00 00 00 
0cb70     00 00 00 00 | 	byte	$00[8]
0cb74     01 00 00 00 
0cb78     06 00 00 00 
0cb7c     00 00 00 00 
0cb80     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb84     00 00 00 00 
0cb88     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
0cb8c     00 00 D0 01 | 	long	(29 {__system___tx})<<20
0cb90     00 00 E0 01 | 	long	(30 {__system___rx})<<20
0cb94     00 00 00 00 | 	byte	$00, $00, $00, $00
0cb98     00 00 F0 01 | 	long	(31 {__system___rxtxioctl_0188})<<20
0cb9c     00 00 00 02 | 	long	(32 {__system____dummy_flush_0189})<<20
0cba0     00 00 00 00 
0cba4     00 00 00 00 | 	byte	$00[8]
0cba8     01 00 00 00 
0cbac     06 00 00 00 
0cbb0     00 00 00 00 
0cbb4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cbb8     00 00 00 00 
0cbbc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
0cbc0     00 00 D0 01 | 	long	(29 {__system___tx})<<20
0cbc4     00 00 E0 01 | 	long	(30 {__system___rx})<<20
0cbc8     00 00 00 00 | 	byte	$00, $00, $00, $00
0cbcc     00 00 F0 01 | 	long	(31 {__system___rxtxioctl_0188})<<20
0cbd0     00 00 00 02 | 	long	(32 {__system____dummy_flush_0189})<<20
0cbd4     00 00 00 00 
      ...             
0cd40     00 00 00 00 
0cd44     00 00 00 00 | 	byte	$00[372]
0cd48                 | 	alignl
0cd48                 | _fatfs_cc_dat_
0cd48     C7 00 FC 00 
0cd4c     E9 00 E2 00 
0cd50     E4 00 E0 00 
0cd54     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
0cd58     EA 00 EB 00 
0cd5c     E8 00 EF 00 
0cd60     EE 00 EC 00 
0cd64     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
0cd68     C9 00 E6 00 
0cd6c     C6 00 F4 00 
0cd70     F6 00 F2 00 
0cd74     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
0cd78     FF 00 D6 00 
0cd7c     DC 00 F8 00 
0cd80     A3 00 D8 00 
0cd84     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
0cd88     E1 00 ED 00 
0cd8c     F3 00 FA 00 
0cd90     F1 00 D1 00 
0cd94     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
0cd98     BF 00 AE 00 
0cd9c     AC 00 BD 00 
0cda0     BC 00 A1 00 
0cda4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
0cda8     91 25 92 25 
0cdac     93 25 02 25 
0cdb0     24 25 C1 00 
0cdb4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
0cdb8     A9 00 63 25 
0cdbc     51 25 57 25 
0cdc0     5D 25 A2 00 
0cdc4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
0cdc8     14 25 34 25 
0cdcc     2C 25 1C 25 
0cdd0     00 25 3C 25 
0cdd4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
0cdd8     5A 25 54 25 
0cddc     69 25 66 25 
0cde0     60 25 50 25 
0cde4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
0cde8     F0 00 D0 00 
0cdec     CA 00 CB 00 
0cdf0     C8 00 31 01 
0cdf4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
0cdf8     CF 00 18 25 
0cdfc     0C 25 88 25 
0ce00     84 25 A6 00 
0ce04     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
0ce08     D3 00 DF 00 
0ce0c     D4 00 D2 00 
0ce10     F5 00 D5 00 
0ce14     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
0ce18     DE 00 DA 00 
0ce1c     DB 00 D9 00 
0ce20     FD 00 DD 00 
0ce24     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
0ce28     AD 00 B1 00 
0ce2c     17 20 BE 00 
0ce30     B6 00 A7 00 
0ce34     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
0ce38     B0 00 A8 00 
0ce3c     B7 00 B9 00 
0ce40     B3 00 B2 00 
0ce44     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
0ce48     61 00 1A 03 
0ce4c     E0 00 17 03 
0ce50     F8 00 07 03 
0ce54     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
0ce58     78 01 00 01 
0ce5c     30 01 32 01 
0ce60     06 01 39 01 
0ce64     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
0ce68     2E 01 79 01 
0ce6c     06 01 80 01 
0ce70     4D 00 43 02 
0ce74     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
0ce78     82 01 84 01 
0ce7c     84 01 86 01 
0ce80     87 01 87 01 
0ce84     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
0ce88     8B 01 8B 01 
0ce8c     8D 01 8E 01 
0ce90     8F 01 90 01 
0ce94     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
0ce98     93 01 94 01 
0ce9c     F6 01 96 01 
0cea0     97 01 98 01 
0cea4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
0cea8     9B 01 9C 01 
0ceac     9D 01 20 02 
0ceb0     9F 01 A0 01 
0ceb4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
0ceb8     A2 01 A4 01 
0cebc     A4 01 A6 01 
0cec0     A7 01 A7 01 
0cec4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
0cec8     AB 01 AC 01 
0cecc     AC 01 AE 01 
0ced0     AF 01 AF 01 
0ced4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
0ced8     B3 01 B3 01 
0cedc     B5 01 B5 01 
0cee0     B7 01 B8 01 
0cee4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
0cee8     BB 01 BC 01 
0ceec     BC 01 BE 01 
0cef0     F7 01 C0 01 
0cef4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
0cef8     C3 01 C4 01 
0cefc     C5 01 C4 01 
0cf00     C7 01 C8 01 
0cf04     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
0cf08     CB 01 CA 01 
0cf0c     CD 01 10 01 
0cf10     DD 01 01 00 
0cf14     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
0cf18     12 01 F3 01 
0cf1c     03 00 F1 01 
0cf20     F4 01 F4 01 
0cf24     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
0cf28     22 02 12 01 
0cf2c     3A 02 09 00 
0cf30     65 2C 3B 02 
0cf34     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
0cf38     66 2C 3F 02 
0cf3c     40 02 41 02 
0cf40     41 02 46 02 
0cf44     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
0cf48     40 00 81 01 
0cf4c     86 01 55 02 
0cf50     89 01 8A 01 
0cf54     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
0cf58     5A 02 90 01 
0cf5c     5C 02 5D 02 
0cf60     5E 02 5F 02 
0cf64     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
0cf68     62 02 94 01 
0cf6c     64 02 65 02 
0cf70     66 02 67 02 
0cf74     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
0cf78     6A 02 62 2C 
0cf7c     6C 02 6D 02 
0cf80     6E 02 9C 01 
0cf84     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
0cf88     9D 01 73 02 
0cf8c     74 02 9F 01 
0cf90     76 02 77 02 
0cf94     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
0cf98     7A 02 7B 02 
0cf9c     7C 02 64 2C 
0cfa0     7E 02 7F 02 
0cfa4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
0cfa8     82 02 A9 01 
0cfac     84 02 85 02 
0cfb0     86 02 87 02 
0cfb4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
0cfb8     B1 01 B2 01 
0cfbc     45 02 8D 02 
0cfc0     8E 02 8F 02 
0cfc4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
0cfc8     B7 01 7B 03 
0cfcc     03 00 FD 03 
0cfd0     FE 03 FF 03 
0cfd4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
0cfd8     86 03 88 03 
0cfdc     89 03 8A 03 
0cfe0     B1 03 11 03 
0cfe4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
0cfe8     A3 03 A3 03 
0cfec     C4 03 08 03 
0cff0     CC 03 03 00 
0cff4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
0cff8     8F 03 D8 03 
0cffc     18 01 F2 03 
0d000     0A 00 F9 03 
0d004     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
0d008     F5 03 F6 03 
0d00c     F7 03 F7 03 
0d010     F9 03 FA 03 
0d014     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
0d018     20 03 50 04 
0d01c     10 07 60 04 
0d020     22 01 8A 04 
0d024     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
0d028     0E 01 CF 04 
0d02c     01 00 C0 04 
0d030     D0 04 44 01 
0d034     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
0d038     00 00 7D 1D 
0d03c     01 00 63 2C 
0d040     00 1E 96 01 
0d044     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
0d048     00 1F 08 06 
0d04c     10 1F 06 06 
0d050     20 1F 08 06 
0d054     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
0d058     40 1F 06 06 
0d05c     51 1F 07 00 
0d060     59 1F 52 1F 
0d064     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
0d068     5D 1F 56 1F 
0d06c     5F 1F 60 1F 
0d070     08 06 70 1F 
0d074     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
0d078     BB 1F C8 1F 
0d07c     C9 1F CA 1F 
0d080     CB 1F DA 1F 
0d084     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
0d088     F9 1F EA 1F 
0d08c     EB 1F FA 1F 
0d090     FB 1F 80 1F 
0d094     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
0d098     08 06 A0 1F 
0d09c     08 06 B0 1F 
0d0a0     04 00 B8 1F 
0d0a4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
0d0a8     BC 1F CC 1F 
0d0ac     01 00 C3 1F 
0d0b0     D0 1F 02 06 
0d0b4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
0d0b8     E5 1F 01 00 
0d0bc     EC 1F F3 1F 
0d0c0     01 00 FC 1F 
0d0c4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
0d0c8     32 21 70 21 
0d0cc     10 02 84 21 
0d0d0     01 00 83 21 
0d0d4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
0d0d8     30 2C 2F 04 
0d0dc     60 2C 02 01 
0d0e0     67 2C 06 01 
0d0e4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
0d0e8     80 2C 64 01 
0d0ec     00 2D 26 08 
0d0f0     41 FF 1A 03 
0d0f4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
0d0f8     05 07 09 0E 
0d0fc     10 12 14 16 
0d100     18 1C 1E 43 
0d104     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
0d108     41 41 43 45 
0d10c     45 45 49 49 
0d110     49 41 41 45 
0d114     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
0d118     4F 55 55 59 
0d11c     4F 55 4F 9C 
0d120     4F 9E 9F 41 
0d124     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
0d128     A5 A6 A7 A8 
0d12c     A9 AA AB AC 
0d130     AD AE AF B0 
0d134     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
0d138     41 41 41 B8 
0d13c     B9 BA BB BC 
0d140     BD BE BF C0 
0d144     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
0d148     C5 41 41 C8 
0d14c     C9 CA CB CC 
0d150     CD CE CF D1 
0d154     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
0d158     49 49 49 49 
0d15c     D9 DA DB DC 
0d160     DD 49 DF 4F 
0d164     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
0d168     4F E6 E8 E8 
0d16c     55 55 55 59 
0d170     59 EE EF F0 
0d174     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
0d178     F5 F6 F7 F8 
0d17c     F9 FA FB FC 
0d180     FD FE FF 00 
0d184     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
0d188     00 00 00 00 | 	byte	$00, $00, $00, $00
0d18c     00 00 C0 00 | 	long	(12 {_fatfs_cc_v_close})<<20
0d190     00 00 D0 00 | 	long	(13 {_fatfs_cc_v_read})<<20
0d194     00 00 E0 00 | 	long	(14 {_fatfs_cc_v_write})<<20
0d198     00 00 F0 00 | 	long	(15 {_fatfs_cc_v_lseek})<<20
0d19c     00 00 00 01 | 	long	(16 {_fatfs_cc_v_ioctl})<<20
0d1a0     00 00 10 02 | 	long	(33 {_fatfs_cc_v_flush})<<20
0d1a4     00 00 00 00 
0d1a8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
0d1ac     00 00 10 01 | 	long	(17 {_fatfs_cc_v_open})<<20
0d1b0     00 00 20 01 | 	long	(18 {_fatfs_cc_v_creat})<<20
0d1b4     00 00 30 01 | 	long	(19 {_fatfs_cc_v_opendir})<<20
0d1b8     00 00 40 01 | 	long	(20 {_fatfs_cc_v_closedir})<<20
0d1bc     00 00 50 01 | 	long	(21 {_fatfs_cc_v_readdir})<<20
0d1c0     00 00 60 01 | 	long	(22 {_fatfs_cc_v_stat})<<20
0d1c4     00 00 70 01 | 	long	(23 {_fatfs_cc_v_mkdir})<<20
0d1c8     00 00 80 01 | 	long	(24 {_fatfs_cc_v_rmdir})<<20
0d1cc     00 00 90 01 | 	long	(25 {_fatfs_cc_v_remove})<<20
0d1d0     00 00 A0 01 | 	long	(26 {_fatfs_cc_v_rename})<<20
0d1d4     00 00 B0 01 | 	long	(27 {_fatfs_cc_v_init})<<20
0d1d8     00 00 C0 01 | 	long	(28 {_fatfs_cc_v_deinit})<<20
0d1dc     FF FF FF FF 
0d1e0     1F 00 00 00 
0d1e4     1C 00 00 00 
0d1e8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
0d1ec     1E 00 00 00 
0d1f0     1F 00 00 00 
0d1f4     1E 00 00 00 
0d1f8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
0d1fc     1F 00 00 00 
0d200     1E 00 00 00 
0d204     1F 00 00 00 
0d208     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
0d20c     1F 00 00 00 
0d210     00 00 00 00 
0d214     1F 00 00 00 
0d218     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
0d21c     5A 00 00 00 
0d220     78 00 00 00 
0d224     97 00 00 00 
0d228     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
0d22c     D4 00 00 00 
0d230     F3 00 00 00 
0d234     11 01 00 00 
0d238     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
0d23c     4E 01 00 00 
0d240     6D 01 00 00 
0d244     FF FF FF FF 
0d248     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
0d24c     00 00 00 00 
      ...             
0d264     00 00 00 00 
0d268     00 00 00 00 | 	byte	$00[32]
0d26c     8A D2 00 00 | 	long	@@@_fatfs_cc_dat_ + 1346
0d270     8E D2 00 00 | 	long	@@@_fatfs_cc_dat_ + 1350
0d274     00 00 00 00 
0d278     00 00 00 00 
0d27c     00 00 00 00 
0d280     00 00 00 00 
0d284     00 00       | 	byte	$00[18]
0d286     3F 3F 3F 00 
0d28a     55 43 54 00 
0d28e     55 43 54 00 
0d292     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
0d296     00 00 00 00 
0d29a     00 00 00    | 	byte	$00[7]
0d29d     CA 9A 3B 00 
0d2a1     00 00 00 01 
0d2a5     01 01 01 01 
0d2a9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
0d2ad     91 11 11 11 
0d2b1     11 01 01 01 
0d2b5     01 01 01 01 
0d2b9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
0d2bd     01 01 01 01 
0d2c1     01 01 01    | 	byte	$01[7]
0d2c4     90 20 20 20 
0d2c8     20 20 20 20 
0d2cc     20 20 20 20 
0d2d0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
0d2d4     42 42 42 42 
0d2d8     42 42 42 42 
0d2dc     42 42       | 	byte	$42[10]
0d2de     20 20 20 20 
0d2e2     20 20 20    | 	byte	$20[7]
0d2e5     44 44 44 44 
0d2e9     44 44       | 	byte	$44[6]
0d2eb     04 04 04 04 
0d2ef     04 04 04 04 
0d2f3     04 04 04 04 
0d2f7     04 04 04 04 
0d2fb     04 04 04 04 | 	byte	$04[20]
0d2ff     20 20 20 20 
0d303     20 20       | 	byte	$20[6]
0d305     48 48 48 48 
0d309     48 48       | 	byte	$48[6]
0d30b     08 08 08 08 
0d30f     08 08 08 08 
0d313     08 08 08 08 
0d317     08 08 08 08 
0d31b     08 08 08 08 | 	byte	$08[20]
0d31f     20 20 20 20 
0d323     01 00 00 00 
0d327     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
0d328                 | __methodtable__
0d328     88 C4 00 00 | 	long	@__struct___bas_wrap_sender_tx
0d32c     CC C4 00 00 | 	long	@__struct___bas_wrap_sender_rx
0d330     14 C5 00 00 | 	long	@__struct___bas_wrap_sender_close
0d334     B8 C3 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0d338     28 C4 00 00 | 	long	@__struct__s_vfs_file_t_getchar
0d33c     34 2F 00 00 | 	long	@__system____root_opendir
0d340     D0 2F 00 00 | 	long	@__system____root_closedir
0d344     4C 2F 00 00 | 	long	@__system____root_readdir
0d348     D8 2F 00 00 | 	long	@__system____root_stat
0d34c     8C 29 00 00 | 	long	@__system____default_putc
0d350     10 29 00 00 | 	long	@__system____default_getc
0d354     34 2A 00 00 | 	long	@__system____default_flush
0d358     D4 AE 00 00 | 	long	@_fatfs_cc_v_close
0d35c     F0 B2 00 00 | 	long	@_fatfs_cc_v_read
0d360     04 B4 00 00 | 	long	@_fatfs_cc_v_write
0d364     E4 B4 00 00 | 	long	@_fatfs_cc_v_lseek
0d368     6C B5 00 00 | 	long	@_fatfs_cc_v_ioctl
0d36c     C0 B5 00 00 | 	long	@_fatfs_cc_v_open
0d370     38 AE 00 00 | 	long	@_fatfs_cc_v_creat
0d374     18 AF 00 00 | 	long	@_fatfs_cc_v_opendir
0d378     8C AF 00 00 | 	long	@_fatfs_cc_v_closedir
0d37c     CC AF 00 00 | 	long	@_fatfs_cc_v_readdir
0d380     00 B1 00 00 | 	long	@_fatfs_cc_v_stat
0d384     80 B5 00 00 | 	long	@_fatfs_cc_v_mkdir
0d388     A0 B5 00 00 | 	long	@_fatfs_cc_v_rmdir
0d38c     90 B5 00 00 | 	long	@_fatfs_cc_v_remove
0d390     B0 B5 00 00 | 	long	@_fatfs_cc_v_rename
0d394     D0 B6 00 00 | 	long	@_fatfs_cc_v_init
0d398     D8 B6 00 00 | 	long	@_fatfs_cc_v_deinit
0d39c     E0 0D 00 00 | 	long	@__system___tx
0d3a0     20 0E 00 00 | 	long	@__system___rx
0d3a4     8C 33 00 00 | 	long	@__system___rxtxioctl_0188
0d3a8     E4 33 00 00 | 	long	@__system____dummy_flush_0189
0d3ac     A0 B6 00 00 | 	long	@_fatfs_cc_v_flush
0d3b0                 | __heap_base
0d3b0     00 00 00 00 
      ...             
0eb20     00 00 00 00 
0eb24     00 00 00 00 | 	long	0[1502]
0eb28                 | objmem
0eb28     00 00 00 00 
0eb2c     00 00 00 00 | 	long	0[2]
0eb30                 | stackspace
0eb30     00 00 00 00 | 	long	0[1]
0eb34 0f7             | 	org	COG_BSS_START
0eb34 0f7             | _var01
0eb34 0f7             | 	res	1
0eb34 0f8             | _var02
0eb34 0f8             | 	res	1
0eb34 0f9             | _var03
0eb34 0f9             | 	res	1
0eb34 0fa             | _var04
0eb34 0fa             | 	res	1
0eb34 0fb             | _var05
0eb34 0fb             | 	res	1
0eb34 0fc             | _var06
0eb34 0fc             | 	res	1
0eb34 0fd             | _var07
0eb34 0fd             | 	res	1
0eb34 0fe             | _var08
0eb34 0fe             | 	res	1
0eb34 0ff             | _var09
0eb34 0ff             | 	res	1
0eb34 100             | arg01
0eb34 100             | 	res	1
0eb34 101             | arg02
0eb34 101             | 	res	1
0eb34 102             | arg03
0eb34 102             | 	res	1
0eb34 103             | arg04
0eb34 103             | 	res	1
0eb34 104             | arg05
0eb34 104             | 	res	1
0eb34 105             | local01
0eb34 105             | 	res	1
0eb34 106             | local02
0eb34 106             | 	res	1
0eb34 107             | local03
0eb34 107             | 	res	1
0eb34 108             | local04
0eb34 108             | 	res	1
0eb34 109             | local05
0eb34 109             | 	res	1
0eb34 10a             | local06
0eb34 10a             | 	res	1
0eb34 10b             | local07
0eb34 10b             | 	res	1
0eb34 10c             | local08
0eb34 10c             | 	res	1
0eb34 10d             | local09
0eb34 10d             | 	res	1
0eb34 10e             | local10
0eb34 10e             | 	res	1
0eb34 10f             | local11
0eb34 10f             | 	res	1
0eb34 110             | local12
0eb34 110             | 	res	1
0eb34 111             | local13
0eb34 111             | 	res	1
0eb34 112             | local14
0eb34 112             | 	res	1
0eb34 113             | local15
0eb34 113             | 	res	1
0eb34 114             | local16
0eb34 114             | 	res	1
0eb34 115             | local17
0eb34 115             | 	res	1
0eb34 116             | local18
0eb34 116             | 	res	1
0eb34 117             | local19
0eb34 117             | 	res	1
0eb34 118             | local20
0eb34 118             | 	res	1
0eb34 119             | local21
0eb34 119             | 	res	1
0eb34 11a             | muldiva_
0eb34 11a             | 	res	1
0eb34 11b             | muldivb_
0eb34 11b             | 	res	1
0eb34 11c             | 	fit	480
0eb34 11c             | 
