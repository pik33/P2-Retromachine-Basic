00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/test1.p2asm"
00000                 | con
00000                 | 	_clkfreq = 160000000
00000                 | 	_clkmode = 16779259
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 160000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $10007fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 EA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 F4 F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 03 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16779256
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 03 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16779259
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e B4 C4 84 FF 
00440 00f 14 00 6C FC | 	wrlong	##160000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E0 07 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 00 62 FD | 	cogid	arg01
00614 084 03 00 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E3 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 EB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 01 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D EA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 04 56 F0 |         shr	arg03, #1 wc
00668 099 00 03 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 00 06 C1 |  if_c   add	arg01, #1
00670 09b 00 02 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 04 56 F0 |         shr	arg03, #1 wc
00678 09d 00 03 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 00 06 C1 |  if_c   add	arg01, #2
00680 09f 01 03 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 00 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 04 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 02 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 02 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 0B 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 0B 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 1B 37 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E0 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 1A 35 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 1B 35 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E0 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 36 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 34 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 1A 35 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E0 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 1B 37 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 EA 05 F6 |     mov result1, #0
00720 0c7 00 EC 05 F6 |     mov result2, #0
00724 0c8 00 DD 01 F6 |     mov abortchain, arg01
00728 0c9 00 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 00 06 F1 |     add arg01, #4
00730 0cb 00 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 00 06 F1 |     add arg01, #4
00738 0cd 00 E3 61 FC |     wrlong objptr, arg01
0073c 0ce 04 00 06 F1 |     add arg01, #4
00740 0cf 00 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 01 01 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 00 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 00 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 00 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 01 EB 01 F6 |     mov result1, arg02
0077c 0de 01 EC 05 F6 |     mov result2, #1
00780 0df 00 03 02 FB |     rdlong arg02, arg01
00784 0e0 04 00 06 F1 |     add arg01, #4
00788 0e1 00 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 00 06 F1 |     add arg01, #4
00790 0e3 00 E3 01 FB |     rdlong objptr, arg01
00794 0e4 04 00 06 F1 |     add arg01, #4
00798 0e5 00 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 00 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 04 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec A0 D3 00 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 18 D3 00 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | itmp1_
007c0 0ef 00 00 00 00 | 	long	0
007c4 0f0             | itmp2_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | objptr
007c8 0f1 18 EB 00 00 | 	long	@objmem
007cc 0f2             | ptr___system__dat__
007cc 0f2 0C C6 00 00 | 	long	@__system__dat_
007d0 0f3             | ptr__fatfs_cc_dat__
007d0 0f3 38 CD 00 00 | 	long	@_fatfs_cc_dat_
007d4 0f4             | ptr_stackspace_
007d4 0f4 1C EB 00 00 | 	long	@stackspace
007d8 0f5             | result1
007d8 0f5 00 00 00 00 | 	long	0
007dc 0f6             | result2
007dc 0f6 01 00 00 00 | 	long	1
007e0 0f7             | COG_BSS_START
007e0 0f7             | 	fit	480
007e0                 | 	orgh
007e0                 | hubentry
007e0                 | 
007e0                 | _program
007e0     01 4A 05 F6 | 	mov	COUNT_, #1
007e4     A8 00 A0 FD | 	call	#pushregs_
007e8     62 00 00 FF 
007ec     D4 0B 06 F6 | 	mov	local01, ##@LR__1630
007f0     3D 00 06 F6 | 	mov	arg01, #61
007f4     3C 02 06 F6 | 	mov	arg02, #60
007f8     3B 04 06 F6 | 	mov	arg03, #59
007fc     3A 06 06 F6 | 	mov	arg04, #58
00800     6C 1F B0 FD | 	call	#__system___vfs_open_sdcardx
00804     F5 02 02 F6 | 	mov	arg02, result1
00808     05 01 02 F6 | 	mov	arg01, local01
0080c     68 07 B0 FD | 	call	#__system___mount
00810     62 00 00 FF 
00814     D8 01 06 F6 | 	mov	arg01, ##@LR__1631
00818     1C 0A B0 FD | 	call	#__system___chdir
0081c                 | ' chdir "/sd"
0081c                 | ' 
0081c                 | ' close #9: open "nonexistingfile" for input as #9
0081c     09 00 06 F6 | 	mov	arg01, #9
00820     A8 24 B0 FD | 	call	#__system__close
00824     62 00 00 FF 
00828     DC 03 06 F6 | 	mov	arg02, ##@LR__1632
0082c     09 00 06 F6 | 	mov	arg01, #9
00830     00 04 06 F6 | 	mov	arg03, #0
00834     1C 0E B0 FD | 	call	#__system___basic_open_string
00838     20 E4 05 F1 | 	add	ptr___system__dat__, #32
0083c     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
00840     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00844     F1 EA 61 FC | 	wrlong	result1, objptr
00848     00 00 06 F6 | 	mov	arg01, #0
0084c     F0 2A B0 FD | 	call	#__system___getiolock_0121
00850     F5 00 02 F6 | 	mov	arg01, result1
00854     64 05 B0 FD | 	call	#__system___lockmem
00858     F1 02 02 FB | 	rdlong	arg02, objptr
0085c     00 00 06 F6 | 	mov	arg01, #0
00860     00 04 06 F6 | 	mov	arg03, #0
00864     0A 06 06 F6 | 	mov	arg04, #10
00868     1C 0F B0 FD | 	call	#__system___basic_print_integer
0086c     00 00 06 F6 | 	mov	arg01, #0
00870     09 02 06 F6 | 	mov	arg02, #9
00874     00 04 06 F6 | 	mov	arg03, #0
00878     70 0E B0 FD | 	call	#__system___basic_print_char
0087c     00 0A 06 F6 | 	mov	local01, #0
00880     F1 00 02 FB | 	rdlong	arg01, objptr
00884     B4 11 B0 FD | 	call	#__system___strerror
00888     F5 02 02 F6 | 	mov	arg02, result1
0088c     05 01 02 F6 | 	mov	arg01, local01
00890     00 04 06 F6 | 	mov	arg03, #0
00894     AC 0E B0 FD | 	call	#__system___basic_print_string
00898     00 00 06 F6 | 	mov	arg01, #0
0089c     0A 02 06 F6 | 	mov	arg02, #10
008a0     00 04 06 F6 | 	mov	arg03, #0
008a4     44 0E B0 FD | 	call	#__system___basic_print_char
008a8     00 00 06 F6 | 	mov	arg01, #0
008ac     90 2A B0 FD | 	call	#__system___getiolock_0121
008b0     F5 00 68 FC | 	wrlong	#0, result1
008b4     09 00 06 F6 | 	mov	arg01, #9
008b8     10 24 B0 FD | 	call	#__system__close
008bc     20 E4 05 F1 | 	add	ptr___system__dat__, #32
008c0     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
008c4     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
008c8     F1 EA 61 FC | 	wrlong	result1, objptr
008cc     00 00 06 F6 | 	mov	arg01, #0
008d0     6C 2A B0 FD | 	call	#__system___getiolock_0121
008d4     F5 00 02 F6 | 	mov	arg01, result1
008d8     E0 04 B0 FD | 	call	#__system___lockmem
008dc     F1 02 02 FB | 	rdlong	arg02, objptr
008e0     00 00 06 F6 | 	mov	arg01, #0
008e4     00 04 06 F6 | 	mov	arg03, #0
008e8     0A 06 06 F6 | 	mov	arg04, #10
008ec     98 0E B0 FD | 	call	#__system___basic_print_integer
008f0     00 00 06 F6 | 	mov	arg01, #0
008f4     09 02 06 F6 | 	mov	arg02, #9
008f8     00 04 06 F6 | 	mov	arg03, #0
008fc     EC 0D B0 FD | 	call	#__system___basic_print_char
00900     00 0A 06 F6 | 	mov	local01, #0
00904     F1 00 02 FB | 	rdlong	arg01, objptr
00908     30 11 B0 FD | 	call	#__system___strerror
0090c     F5 02 02 F6 | 	mov	arg02, result1
00910     05 01 02 F6 | 	mov	arg01, local01
00914     00 04 06 F6 | 	mov	arg03, #0
00918     28 0E B0 FD | 	call	#__system___basic_print_string
0091c     00 00 06 F6 | 	mov	arg01, #0
00920     0A 02 06 F6 | 	mov	arg02, #10
00924     00 04 06 F6 | 	mov	arg03, #0
00928     C0 0D B0 FD | 	call	#__system___basic_print_char
0092c     00 00 06 F6 | 	mov	arg01, #0
00930     0C 2A B0 FD | 	call	#__system___getiolock_0121
00934     F5 00 68 FC | 	wrlong	#0, result1
00938     62 00 00 FF 
0093c     EC 01 06 F6 | 	mov	arg01, ##@LR__1633
00940     F4 08 B0 FD | 	call	#__system___chdir
00944     20 E4 05 F1 | 	add	ptr___system__dat__, #32
00948     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
0094c     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00950     F1 EA 61 FC | 	wrlong	result1, objptr
00954     00 00 06 F6 | 	mov	arg01, #0
00958     E4 29 B0 FD | 	call	#__system___getiolock_0121
0095c     F5 00 02 F6 | 	mov	arg01, result1
00960     58 04 B0 FD | 	call	#__system___lockmem
00964     F1 02 02 FB | 	rdlong	arg02, objptr
00968     00 00 06 F6 | 	mov	arg01, #0
0096c     00 04 06 F6 | 	mov	arg03, #0
00970     0A 06 06 F6 | 	mov	arg04, #10
00974     10 0E B0 FD | 	call	#__system___basic_print_integer
00978     00 00 06 F6 | 	mov	arg01, #0
0097c     09 02 06 F6 | 	mov	arg02, #9
00980     00 04 06 F6 | 	mov	arg03, #0
00984     64 0D B0 FD | 	call	#__system___basic_print_char
00988     00 0A 06 F6 | 	mov	local01, #0
0098c     F1 00 02 FB | 	rdlong	arg01, objptr
00990     A8 10 B0 FD | 	call	#__system___strerror
00994     F5 02 02 F6 | 	mov	arg02, result1
00998     05 01 02 F6 | 	mov	arg01, local01
0099c     00 04 06 F6 | 	mov	arg03, #0
009a0     A0 0D B0 FD | 	call	#__system___basic_print_string
009a4     00 00 06 F6 | 	mov	arg01, #0
009a8     0A 02 06 F6 | 	mov	arg02, #10
009ac     00 04 06 F6 | 	mov	arg03, #0
009b0     38 0D B0 FD | 	call	#__system___basic_print_char
009b4     00 00 06 F6 | 	mov	arg01, #0
009b8     84 29 B0 FD | 	call	#__system___getiolock_0121
009bc     F5 00 68 FC | 	wrlong	#0, result1
009c0                 | ' 
009c0                 | ' close #9: open "mousetheremin.bas" for input as #9
009c0     09 00 06 F6 | 	mov	arg01, #9
009c4     04 23 B0 FD | 	call	#__system__close
009c8     62 00 00 FF 
009cc     F4 03 06 F6 | 	mov	arg02, ##@LR__1634
009d0     09 00 06 F6 | 	mov	arg01, #9
009d4     00 04 06 F6 | 	mov	arg03, #0
009d8     78 0C B0 FD | 	call	#__system___basic_open_string
009dc     20 E4 05 F1 | 	add	ptr___system__dat__, #32
009e0     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
009e4     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
009e8     F1 EA 61 FC | 	wrlong	result1, objptr
009ec     00 00 06 F6 | 	mov	arg01, #0
009f0     4C 29 B0 FD | 	call	#__system___getiolock_0121
009f4     F5 00 02 F6 | 	mov	arg01, result1
009f8     C0 03 B0 FD | 	call	#__system___lockmem
009fc     F1 02 02 FB | 	rdlong	arg02, objptr
00a00     00 00 06 F6 | 	mov	arg01, #0
00a04     00 04 06 F6 | 	mov	arg03, #0
00a08     0A 06 06 F6 | 	mov	arg04, #10
00a0c     78 0D B0 FD | 	call	#__system___basic_print_integer
00a10     00 00 06 F6 | 	mov	arg01, #0
00a14     09 02 06 F6 | 	mov	arg02, #9
00a18     00 04 06 F6 | 	mov	arg03, #0
00a1c     CC 0C B0 FD | 	call	#__system___basic_print_char
00a20     00 0A 06 F6 | 	mov	local01, #0
00a24     F1 00 02 FB | 	rdlong	arg01, objptr
00a28     10 10 B0 FD | 	call	#__system___strerror
00a2c     F5 02 02 F6 | 	mov	arg02, result1
00a30     05 01 02 F6 | 	mov	arg01, local01
00a34     00 04 06 F6 | 	mov	arg03, #0
00a38     08 0D B0 FD | 	call	#__system___basic_print_string
00a3c     00 00 06 F6 | 	mov	arg01, #0
00a40     0A 02 06 F6 | 	mov	arg02, #10
00a44     00 04 06 F6 | 	mov	arg03, #0
00a48     A0 0C B0 FD | 	call	#__system___basic_print_char
00a4c     00 00 06 F6 | 	mov	arg01, #0
00a50     EC 28 B0 FD | 	call	#__system___getiolock_0121
00a54     F5 00 68 FC | 	wrlong	#0, result1
00a58     09 00 06 F6 | 	mov	arg01, #9
00a5c     6C 22 B0 FD | 	call	#__system__close
00a60     63 00 00 FF 
00a64     06 00 06 F6 | 	mov	arg01, ##@LR__1635
00a68     CC 07 B0 FD | 	call	#__system___chdir
00a6c     20 E4 05 F1 | 	add	ptr___system__dat__, #32
00a70     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
00a74     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00a78     F1 EA 61 FC | 	wrlong	result1, objptr
00a7c     00 00 06 F6 | 	mov	arg01, #0
00a80     BC 28 B0 FD | 	call	#__system___getiolock_0121
00a84     F5 00 02 F6 | 	mov	arg01, result1
00a88     30 03 B0 FD | 	call	#__system___lockmem
00a8c     F1 02 02 FB | 	rdlong	arg02, objptr
00a90     00 00 06 F6 | 	mov	arg01, #0
00a94     00 04 06 F6 | 	mov	arg03, #0
00a98     0A 06 06 F6 | 	mov	arg04, #10
00a9c     E8 0C B0 FD | 	call	#__system___basic_print_integer
00aa0     00 00 06 F6 | 	mov	arg01, #0
00aa4     09 02 06 F6 | 	mov	arg02, #9
00aa8     00 04 06 F6 | 	mov	arg03, #0
00aac     3C 0C B0 FD | 	call	#__system___basic_print_char
00ab0     00 0A 06 F6 | 	mov	local01, #0
00ab4     F1 00 02 FB | 	rdlong	arg01, objptr
00ab8     80 0F B0 FD | 	call	#__system___strerror
00abc     F5 02 02 F6 | 	mov	arg02, result1
00ac0     05 01 02 F6 | 	mov	arg01, local01
00ac4     00 04 06 F6 | 	mov	arg03, #0
00ac8     78 0C B0 FD | 	call	#__system___basic_print_string
00acc     00 00 06 F6 | 	mov	arg01, #0
00ad0     0A 02 06 F6 | 	mov	arg02, #10
00ad4     00 04 06 F6 | 	mov	arg03, #0
00ad8     10 0C B0 FD | 	call	#__system___basic_print_char
00adc     00 00 06 F6 | 	mov	arg01, #0
00ae0     5C 28 B0 FD | 	call	#__system___getiolock_0121
00ae4     F5 00 68 FC | 	wrlong	#0, result1
00ae8     A7 F0 03 F6 | 	mov	ptra, fp
00aec     B2 00 A0 FD | 	call	#popregs_
00af0                 | _program_ret
00af0     2D 00 64 FD | 	ret
00af4                 | hubexit
00af4     81 00 80 FD | 	jmp	#cogexit
00af8                 | 
00af8                 | __system___setbaud
00af8     14 34 06 FB | 	rdlong	muldiva_, #20
00afc     00 37 02 F6 | 	mov	muldivb_, arg01
00b00     BA 00 A0 FD | 	call	#divide_
00b04     97 06 48 FB | 	callpa	#(@LR__0002-@LR__0001)>>2,fcache_load_ptr_
00b08                 | LR__0001
00b08     3E EA 9D FA | 	rdpin	result1, #62 wc
00b0c     F6 EC A1 F1 | 	subx	result2, result2
00b10     F4 FF 9F CD |  if_b	jmp	#LR__0001
00b14                 | LR__0002
00b14     40 7C 64 FD | 	dirl	#62
00b18     40 7E 64 FD | 	dirl	#63
00b1c     F2 36 62 FC | 	wrlong	muldivb_, ptr___system__dat__
00b20     10 36 66 F0 | 	shl	muldivb_, #16
00b24     07 02 06 F6 | 	mov	arg02, #7
00b28     1B 03 02 F1 | 	add	arg02, muldivb_
00b2c     3E F8 0C FC | 	wrpin	#124, #62
00b30     3E 02 16 FC | 	wxpin	arg02, #62
00b34     3F 7C 0C FC | 	wrpin	#62, #63
00b38     14 02 06 F1 | 	add	arg02, #20
00b3c     3F 02 16 FC | 	wxpin	arg02, #63
00b40     41 7C 64 FD | 	dirh	#62
00b44     41 7E 64 FD | 	dirh	#63
00b48                 | __system___setbaud_ret
00b48     2D 00 64 FD | 	ret
00b4c                 | 
00b4c                 | __system___txraw
00b4c     01 4A 05 F6 | 	mov	COUNT_, #1
00b50     A8 00 A0 FD | 	call	#pushregs_
00b54     00 0B 02 F6 | 	mov	local01, arg01
00b58     97 06 48 FB | 	callpa	#(@LR__0011-@LR__0010)>>2,fcache_load_ptr_
00b5c                 | LR__0010
00b5c     3E EA 9D FA | 	rdpin	result1, #62 wc
00b60     F6 EC A1 F1 | 	subx	result2, result2
00b64     F4 FF 9F CD |  if_b	jmp	#LR__0010
00b68                 | LR__0011
00b68     F2 EA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
00b6c     C2 01 00 AF 
00b70     00 00 06 A6 |  if_e	mov	arg01, ##230400
00b74     80 FF BF AD |  if_e	call	#__system___setbaud
00b78     58 7C 64 FD | 	drvl	#62
00b7c     3E 0A 26 FC | 	wypin	local01, #62
00b80     01 EA 05 F6 | 	mov	result1, #1
00b84     A7 F0 03 F6 | 	mov	ptra, fp
00b88     B2 00 A0 FD | 	call	#popregs_
00b8c                 | __system___txraw_ret
00b8c     2D 00 64 FD | 	ret
00b90                 | 
00b90                 | __system___rxraw
00b90     0D 4A 05 F6 | 	mov	COUNT_, #13
00b94     A8 00 A0 FD | 	call	#pushregs_
00b98     00 0B 02 F6 | 	mov	local01, arg01
00b9c     F2 0C 0A FB | 	rdlong	local02, ptr___system__dat__ wz
00ba0     C2 01 00 AF 
00ba4     00 00 06 A6 |  if_e	mov	arg01, ##230400
00ba8     4C FF BF AD |  if_e	call	#__system___setbaud
00bac     00 0A 0E F2 | 	cmp	local01, #0 wz
00bb0     20 00 90 AD |  if_e	jmp	#LR__0020
00bb4     14 0E 06 FB | 	rdlong	local03, #20
00bb8     0A 0E 46 F0 | 	shr	local03, #10
00bbc     07 0B 02 FD | 	qmul	local01, local03
00bc0     1A EA 61 FD | 	getct	result1
00bc4     18 10 62 FD | 	getqx	local04
00bc8     08 EB 01 F1 | 	add	result1, local04
00bcc     F5 12 02 F6 | 	mov	local05, result1
00bd0     04 00 90 FD | 	jmp	#LR__0021
00bd4                 | LR__0020
00bd4     00 12 06 F6 | 	mov	local05, #0
00bd8                 | LR__0021
00bd8     01 14 66 F6 | 	neg	local06, #1
00bdc     3F 16 06 F6 | 	mov	local07, #63
00be0     00 18 06 F6 | 	mov	local08, #0
00be4     04 E4 05 F1 | 	add	ptr___system__dat__, #4
00be8     F2 1A 02 FB | 	rdlong	local09, ptr___system__dat__
00bec     04 E4 85 F1 | 	sub	ptr___system__dat__, #4
00bf0                 | LR__0022
00bf0     08 1A 16 F4 | 	testb	local09, #8 wc
00bf4     09 1A 76 F4 | 	testbn	local09, #9 andc
00bf8     0A 1A 46 F0 | 	shr	local09, #10
00bfc     01 18 06 C6 |  if_b	mov	local08, #1
00c00     40 7E 6C 3D |  if_ae	testp	#63 wz
00c04     01 18 06 26 |  if_nc_and_z	mov	local08, #1
00c08     3F 1A 8E 2A |  if_nc_and_z	rdpin	local09, #63
00c0c     04 1A 46 20 |  if_nc_and_z	shr	local09, #4
00c10                 | LR__0023
00c10     00 0C 06 F6 | 	mov	local02, #0
00c14     00 18 0E F2 | 	cmp	local08, #0 wz
00c18     01 0C 66 56 |  if_ne	neg	local02, #1
00c1c     00 1C 06 F6 | 	mov	local10, #0
00c20     00 0E 06 F6 | 	mov	local03, #0
00c24     00 0A 0E F2 | 	cmp	local01, #0 wz
00c28     01 0E 66 56 |  if_ne	neg	local03, #1
00c2c     00 10 06 F6 | 	mov	local04, #0
00c30     00 1E 06 F6 | 	mov	local11, #0
00c34     09 21 02 F6 | 	mov	local12, local05
00c38     1A EA 61 FD | 	getct	result1
00c3c     F5 22 02 F6 | 	mov	local13, result1
00c40     11 21 82 F1 | 	sub	local12, local13
00c44     00 20 56 F2 | 	cmps	local12, #0 wc
00c48     00 1E 26 C6 |  if_b	not	local11, #0
00c4c     00 1E 0E F2 | 	cmp	local11, #0 wz
00c50     00 10 26 56 |  if_ne	not	local04, #0
00c54     08 0F CA F7 | 	test	local03, local04 wz
00c58     00 1C 26 56 |  if_ne	not	local10, #0
00c5c     0E 0D 4A F5 | 	or	local02, local10 wz
00c60     8C FF 9F AD |  if_e	jmp	#LR__0022
00c64     00 18 0E F2 | 	cmp	local08, #0 wz
00c68     0D 15 02 56 |  if_ne	mov	local06, local09
00c6c     0A 15 E2 58 |  if_ne	getbyte	local06, local06, #0
00c70     04 E4 05 F1 | 	add	ptr___system__dat__, #4
00c74     F2 1A 62 FC | 	wrlong	local09, ptr___system__dat__
00c78     04 E4 85 F1 | 	sub	ptr___system__dat__, #4
00c7c     0A EB 01 F6 | 	mov	result1, local06
00c80     A7 F0 03 F6 | 	mov	ptra, fp
00c84     B2 00 A0 FD | 	call	#popregs_
00c88                 | __system___rxraw_ret
00c88     2D 00 64 FD | 	ret
00c8c                 | 
00c8c                 | __system___getus
00c8c     1A EC 71 FD | 	getct	result2 wc
00c90     1A EE 61 FD | 	getct	_var01
00c94     10 E4 05 F1 | 	add	ptr___system__dat__, #16
00c98     F2 F0 09 FB | 	rdlong	_var02, ptr___system__dat__ wz
00c9c     10 E4 85 F1 | 	sub	ptr___system__dat__, #16
00ca0     20 00 90 5D |  if_ne	jmp	#LR__0030
00ca4     14 F0 05 FB | 	rdlong	_var02, #20
00ca8     A1 07 00 FF 
00cac     40 F0 15 FD | 	qdiv	_var02, ##1000000
00cb0     10 E4 05 F1 | 	add	ptr___system__dat__, #16
00cb4     18 EA 61 FD | 	getqx	result1
00cb8     F5 F0 01 F6 | 	mov	_var02, result1
00cbc     F2 EA 61 FC | 	wrlong	result1, ptr___system__dat__
00cc0     10 E4 85 F1 | 	sub	ptr___system__dat__, #16
00cc4                 | LR__0030
00cc4     F8 EC 11 FD | 	qdiv	result2, _var02
00cc8     19 EC 61 FD | 	getqy	result2
00ccc     28 EC 61 FD | 	setq	result2
00cd0     F8 EE 11 FD | 	qdiv	_var01, _var02
00cd4     18 EA 61 FD | 	getqx	result1
00cd8                 | __system___getus_ret
00cd8     2D 00 64 FD | 	ret
00cdc                 | 
00cdc                 | __system____builtin_memmove
00cdc     00 EF 01 F6 | 	mov	_var01, arg01
00ce0     01 01 52 F2 | 	cmps	arg01, arg02 wc
00ce4     10 00 90 CD |  if_b	jmp	#LR__0040
00ce8     01 F1 01 F6 | 	mov	_var02, arg02
00cec     02 F1 01 F1 | 	add	_var02, arg03
00cf0     F8 00 52 F2 | 	cmps	arg01, _var02 wc
00cf4     48 00 90 CD |  if_b	jmp	#LR__0046
00cf8                 | LR__0040
00cf8     02 F3 01 F6 | 	mov	_var03, arg03
00cfc     02 F2 4D F0 | 	shr	_var03, #2 wz
00d00     18 00 90 AD |  if_e	jmp	#LR__0045
00d04     97 0A 48 FB | 	callpa	#(@LR__0043-@LR__0041)>>2,fcache_load_ptr_
00d08                 | LR__0041
00d08     F9 08 D8 FC | 	rep	@LR__0044, _var03
00d0c                 | LR__0042
00d0c     01 F3 01 FB | 	rdlong	_var03, arg02
00d10     00 F3 61 FC | 	wrlong	_var03, arg01
00d14     04 00 06 F1 | 	add	arg01, #4
00d18     04 02 06 F1 | 	add	arg02, #4
00d1c                 | LR__0043
00d1c                 | LR__0044
00d1c                 | LR__0045
00d1c     02 04 CE F7 | 	test	arg03, #2 wz
00d20     01 F1 E1 5A |  if_ne	rdword	_var02, arg02
00d24     00 F1 51 5C |  if_ne	wrword	_var02, arg01
00d28     02 00 06 51 |  if_ne	add	arg01, #2
00d2c     02 02 06 51 |  if_ne	add	arg02, #2
00d30     01 04 CE F7 | 	test	arg03, #1 wz
00d34     01 F1 C1 5A |  if_ne	rdbyte	_var02, arg02
00d38     00 F1 41 5C |  if_ne	wrbyte	_var02, arg01
00d3c     28 00 90 FD | 	jmp	#LR__0052
00d40                 | LR__0046
00d40     02 01 02 F1 | 	add	arg01, arg03
00d44     02 03 02 F1 | 	add	arg02, arg03
00d48     02 F5 09 F6 | 	mov	_var04, arg03 wz
00d4c     18 00 90 AD |  if_e	jmp	#LR__0051
00d50     97 0A 48 FB | 	callpa	#(@LR__0049-@LR__0047)>>2,fcache_load_ptr_
00d54                 | LR__0047
00d54     FA 08 D8 FC | 	rep	@LR__0050, _var04
00d58                 | LR__0048
00d58     01 00 86 F1 | 	sub	arg01, #1
00d5c     01 02 86 F1 | 	sub	arg02, #1
00d60     01 F1 C1 FA | 	rdbyte	_var02, arg02
00d64     00 F1 41 FC | 	wrbyte	_var02, arg01
00d68                 | LR__0049
00d68                 | LR__0050
00d68                 | LR__0051
00d68                 | LR__0052
00d68     F7 EA 01 F6 | 	mov	result1, _var01
00d6c                 | __system____builtin_memmove_ret
00d6c     2D 00 64 FD | 	ret
00d70                 | 
00d70                 | __system____builtin_strcpy
00d70     00 EF 01 F6 | 	mov	_var01, arg01
00d74     97 0A 48 FB | 	callpa	#(@LR__0061-@LR__0060)>>2,fcache_load_ptr_
00d78                 | LR__0060
00d78     01 EB C9 FA | 	rdbyte	result1, arg02 wz
00d7c     00 EB 41 FC | 	wrbyte	result1, arg01
00d80     01 02 06 F1 | 	add	arg02, #1
00d84     01 00 06 F1 | 	add	arg01, #1
00d88     EC FF 9F 5D |  if_ne	jmp	#LR__0060
00d8c                 | LR__0061
00d8c     F7 EA 01 F6 | 	mov	result1, _var01
00d90                 | __system____builtin_strcpy_ret
00d90     2D 00 64 FD | 	ret
00d94                 | 
00d94                 | __system____topofstack
00d94     00 4A 05 F6 | 	mov	COUNT_, #0
00d98     A8 00 A0 FD | 	call	#pushregs_
00d9c     08 F0 07 F1 | 	add	ptra, #8
00da0     04 4E 05 F1 | 	add	fp, #4
00da4     A7 00 62 FC | 	wrlong	arg01, fp
00da8     A7 EA 01 F6 | 	mov	result1, fp
00dac     04 4E 85 F1 | 	sub	fp, #4
00db0     A7 F0 03 F6 | 	mov	ptra, fp
00db4     B2 00 A0 FD | 	call	#popregs_
00db8                 | __system____topofstack_ret
00db8     2D 00 64 FD | 	ret
00dbc                 | 
00dbc                 | __system___lockmem
00dbc     00 EA 05 F6 | 	mov	result1, #0
00dc0     01 EA 61 FD | 	cogid	result1
00dc4     00 EB 05 F1 | 	add	result1, #256
00dc8                 | LR__0070
00dc8     00 EF 09 FB | 	rdlong	_var01, arg01 wz
00dcc     00 EB 61 AC |  if_e	wrlong	result1, arg01
00dd0     00 EF 01 AB |  if_e	rdlong	_var01, arg01
00dd4     00 EF 01 AB |  if_e	rdlong	_var01, arg01
00dd8     F5 EE 09 F2 | 	cmp	_var01, result1 wz
00ddc     E8 FF 9F 5D |  if_ne	jmp	#LR__0070
00de0                 | __system___lockmem_ret
00de0     2D 00 64 FD | 	ret
00de4                 | 
00de4                 | __system___tx
00de4     02 4A 05 F6 | 	mov	COUNT_, #2
00de8     A8 00 A0 FD | 	call	#pushregs_
00dec     00 0B 02 F6 | 	mov	local01, arg01
00df0     0A 0A 0E F2 | 	cmp	local01, #10 wz
00df4     18 00 90 5D |  if_ne	jmp	#LR__0080
00df8     08 E4 05 F1 | 	add	ptr___system__dat__, #8
00dfc     F2 0C 02 FB | 	rdlong	local02, ptr___system__dat__
00e00     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
00e04     02 0C CE F7 | 	test	local02, #2 wz
00e08     0D 00 06 56 |  if_ne	mov	arg01, #13
00e0c     3C FD BF 5D |  if_ne	call	#__system___txraw
00e10                 | LR__0080
00e10     05 01 02 F6 | 	mov	arg01, local01
00e14     34 FD BF FD | 	call	#__system___txraw
00e18     A7 F0 03 F6 | 	mov	ptra, fp
00e1c     B2 00 A0 FD | 	call	#popregs_
00e20                 | __system___tx_ret
00e20     2D 00 64 FD | 	ret
00e24                 | 
00e24                 | __system___rx
00e24     01 4A 05 F6 | 	mov	COUNT_, #1
00e28     A8 00 A0 FD | 	call	#pushregs_
00e2c                 | LR__0090
00e2c     00 00 06 F6 | 	mov	arg01, #0
00e30     5C FD BF FD | 	call	#__system___rxraw
00e34     F5 0A 02 F6 | 	mov	local01, result1
00e38     FF FF 7F FF 
00e3c     FF 0B 0E F2 | 	cmp	local01, ##-1 wz
00e40     E8 FF 9F AD |  if_e	jmp	#LR__0090
00e44     0D 0A 0E F2 | 	cmp	local01, #13 wz
00e48     14 00 90 5D |  if_ne	jmp	#LR__0091
00e4c     08 E4 05 F1 | 	add	ptr___system__dat__, #8
00e50     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
00e54     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
00e58     02 EA CD F7 | 	test	result1, #2 wz
00e5c     0A 0A 06 56 |  if_ne	mov	local01, #10
00e60                 | LR__0091
00e60     08 E4 05 F1 | 	add	ptr___system__dat__, #8
00e64     F2 00 02 FB | 	rdlong	arg01, ptr___system__dat__
00e68     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
00e6c     01 00 CE F7 | 	test	arg01, #1 wz
00e70     1C 00 90 AD |  if_e	jmp	#LR__0094
00e74     7F 0A 0E F2 | 	cmp	local01, #127 wz
00e78     0C 00 90 5D |  if_ne	jmp	#LR__0092
00e7c     08 00 06 F6 | 	mov	arg01, #8
00e80     60 FF BF FD | 	call	#__system___tx
00e84     08 00 90 FD | 	jmp	#LR__0093
00e88                 | LR__0092
00e88     05 01 02 F6 | 	mov	arg01, local01
00e8c     54 FF BF FD | 	call	#__system___tx
00e90                 | LR__0093
00e90                 | LR__0094
00e90     05 EB 01 F6 | 	mov	result1, local01
00e94     A7 F0 03 F6 | 	mov	ptra, fp
00e98     B2 00 A0 FD | 	call	#popregs_
00e9c                 | __system___rx_ret
00e9c     2D 00 64 FD | 	ret
00ea0                 | 
00ea0                 | __system___waitms
00ea0     00 EF 01 F6 | 	mov	_var01, arg01
00ea4     1A F0 61 FD | 	getct	_var02
00ea8     14 F2 05 FB | 	rdlong	_var03, #20
00eac     97 14 48 FB | 	callpa	#(@LR__0101-@LR__0100)>>2,fcache_load_ptr_
00eb0                 | LR__0100
00eb0     01 00 00 FF 
00eb4     E8 EF 55 F2 | 	cmps	_var01, ##1000 wc
00eb8     1C 00 90 CD |  if_b	jmp	#LR__0102
00ebc     F9 F0 01 F1 | 	add	_var02, _var03
00ec0     F8 00 02 F6 | 	mov	arg01, _var02
00ec4     00 00 66 FA | 	addct1	arg01, #0
00ec8     24 22 60 FD | 	waitct1
00ecc     01 00 00 FF 
00ed0     E8 EF 85 F1 | 	sub	_var01, ##1000
00ed4     D8 FF 9F FD | 	jmp	#LR__0100
00ed8                 | LR__0101
00ed8                 | LR__0102
00ed8     01 EE 55 F2 | 	cmps	_var01, #1 wc
00edc     28 00 90 CD |  if_b	jmp	#LR__0103
00ee0     F9 EE 01 FD | 	qmul	_var01, _var03
00ee4     01 00 00 FF 
00ee8     E8 05 06 F6 | 	mov	arg03, ##1000
00eec     19 EA 61 FD | 	getqy	result1
00ef0     18 00 62 FD | 	getqx	arg01
00ef4     28 EA 61 FD | 	setq	result1
00ef8     02 01 12 FD | 	qdiv	arg01, arg03
00efc     18 00 62 FD | 	getqx	arg01
00f00     F8 00 62 FA | 	addct1	arg01, _var02
00f04     24 22 60 FD | 	waitct1
00f08                 | LR__0103
00f08                 | __system___waitms_ret
00f08     2D 00 64 FD | 	ret
00f0c                 | 
00f0c                 | __system___waitus
00f0c     00 EF 01 F6 | 	mov	_var01, arg01
00f10     1A F0 61 FD | 	getct	_var02
00f14     14 F2 05 FB | 	rdlong	_var03, #20
00f18     97 14 48 FB | 	callpa	#(@LR__0111-@LR__0110)>>2,fcache_load_ptr_
00f1c                 | LR__0110
00f1c     A1 07 00 FF 
00f20     40 EE 55 F2 | 	cmps	_var01, ##1000000 wc
00f24     1C 00 90 CD |  if_b	jmp	#LR__0112
00f28     F9 F0 01 F1 | 	add	_var02, _var03
00f2c     F8 00 02 F6 | 	mov	arg01, _var02
00f30     00 00 66 FA | 	addct1	arg01, #0
00f34     24 22 60 FD | 	waitct1
00f38     A1 07 00 FF 
00f3c     40 EE 85 F1 | 	sub	_var01, ##1000000
00f40     D8 FF 9F FD | 	jmp	#LR__0110
00f44                 | LR__0111
00f44                 | LR__0112
00f44     01 EE 55 F2 | 	cmps	_var01, #1 wc
00f48     28 00 90 CD |  if_b	jmp	#LR__0113
00f4c     F9 EE 01 FD | 	qmul	_var01, _var03
00f50     A1 07 00 FF 
00f54     40 04 06 F6 | 	mov	arg03, ##1000000
00f58     19 EA 61 FD | 	getqy	result1
00f5c     18 00 62 FD | 	getqx	arg01
00f60     28 EA 61 FD | 	setq	result1
00f64     02 01 12 FD | 	qdiv	arg01, arg03
00f68     18 EA 61 FD | 	getqx	result1
00f6c     F5 F0 61 FA | 	addct1	_var02, result1
00f70     24 22 60 FD | 	waitct1
00f74                 | LR__0113
00f74                 | __system___waitus_ret
00f74     2D 00 64 FD | 	ret
00f78                 | 
00f78                 | __system___mount
00f78     0B 4A 05 F6 | 	mov	COUNT_, #11
00f7c     A8 00 A0 FD | 	call	#pushregs_
00f80     00 0B 02 F6 | 	mov	local01, arg01
00f84     01 0D 0A F6 | 	mov	local02, arg02 wz
00f88     01 0E 66 F6 | 	neg	local03, #1
00f8c     01 EA 65 A6 |  if_e	neg	result1, #1
00f90     98 02 90 AD |  if_e	jmp	#LR__0135
00f94     05 EB C1 FA | 	rdbyte	result1, local01
00f98     2F EA 0D F2 | 	cmp	result1, #47 wz
00f9c     28 00 90 5D |  if_ne	jmp	#LR__0122
00fa0     05 01 02 F6 | 	mov	arg01, local01
00fa4     00 11 02 F6 | 	mov	local04, arg01
00fa8     97 06 48 FB | 	callpa	#(@LR__0121-@LR__0120)>>2,fcache_load_ptr_
00fac                 | LR__0120
00fac     08 EB C9 FA | 	rdbyte	result1, local04 wz
00fb0     01 10 06 51 |  if_ne	add	local04, #1
00fb4     F4 FF 9F 5D |  if_ne	jmp	#LR__0120
00fb8                 | LR__0121
00fb8     00 11 82 F1 | 	sub	local04, arg01
00fbc     08 EB 01 F6 | 	mov	result1, local04
00fc0     10 EA 55 F2 | 	cmps	result1, #16 wc
00fc4     14 00 90 CD |  if_b	jmp	#LR__0123
00fc8                 | LR__0122
00fc8     20 E4 05 F1 | 	add	ptr___system__dat__, #32
00fcc     F2 14 68 FC | 	wrlong	#10, ptr___system__dat__
00fd0     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00fd4     01 EA 65 F6 | 	neg	result1, #1
00fd8     50 02 90 FD | 	jmp	#LR__0135
00fdc                 | LR__0123
00fdc     00 12 06 F6 | 	mov	local05, #0
00fe0                 | LR__0124
00fe0     04 12 56 F2 | 	cmps	local05, #4 wc
00fe4     B0 00 90 3D |  if_ae	jmp	#LR__0129
00fe8     09 01 02 F6 | 	mov	arg01, local05
00fec     02 00 66 F0 | 	shl	arg01, #2
00ff0     64 E4 05 F1 | 	add	ptr___system__dat__, #100
00ff4     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
00ff8     00 EB 09 FB | 	rdlong	result1, arg01 wz
00ffc     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01000     00 0E 56 A2 |  if_e	cmps	local03, #0 wc
01004     09 0F 02 86 |  if_c_and_z	mov	local03, local05
01008     84 00 90 8D |  if_c_and_z	jmp	#LR__0128
0100c     09 01 02 F6 | 	mov	arg01, local05
01010     02 00 66 F0 | 	shl	arg01, #2
01014     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01018     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
0101c     00 01 02 FB | 	rdlong	arg01, arg01
01020     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01024     00 11 02 F6 | 	mov	local04, arg01
01028     97 06 48 FB | 	callpa	#(@LR__0126-@LR__0125)>>2,fcache_load_ptr_
0102c                 | LR__0125
0102c     08 EB C9 FA | 	rdbyte	result1, local04 wz
01030     01 10 06 51 |  if_ne	add	local04, #1
01034     F4 FF 9F 5D |  if_ne	jmp	#LR__0125
01038                 | LR__0126
01038     00 11 82 F1 | 	sub	local04, arg01
0103c     08 15 02 F6 | 	mov	local06, local04
01040     0A 01 02 F6 | 	mov	arg01, local06
01044     05 01 02 F1 | 	add	arg01, local01
01048     00 EB C1 FA | 	rdbyte	result1, arg01
0104c     2F EA 0D F2 | 	cmp	result1, #47 wz
01050     0A 17 02 56 |  if_ne	mov	local07, local06
01054     05 17 02 51 |  if_ne	add	local07, local01
01058     0B 01 CA 5A |  if_ne	rdbyte	arg01, local07 wz
0105c     30 00 90 5D |  if_ne	jmp	#LR__0127
01060     09 05 02 F6 | 	mov	arg03, local05
01064     02 04 66 F0 | 	shl	arg03, #2
01068     64 E4 05 F1 | 	add	ptr___system__dat__, #100
0106c     F2 04 02 F1 | 	add	arg03, ptr___system__dat__
01070     02 03 02 FB | 	rdlong	arg02, arg03
01074     05 01 02 F6 | 	mov	arg01, local01
01078     0A 05 02 F6 | 	mov	arg03, local06
0107c     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01080     20 1E B0 FD | 	call	#__system__strncmp
01084     00 EA 0D F2 | 	cmp	result1, #0 wz
01088     09 0F 02 A6 |  if_e	mov	local03, local05
0108c     08 00 90 AD |  if_e	jmp	#LR__0129
01090                 | LR__0127
01090                 | LR__0128
01090     01 12 06 F1 | 	add	local05, #1
01094     48 FF 9F FD | 	jmp	#LR__0124
01098                 | LR__0129
01098     FF FF 7F FF 
0109c     FF 0F 0E F2 | 	cmp	local03, ##-1 wz
010a0     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
010a4     F2 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
010a8     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
010ac     01 EA 65 A6 |  if_e	neg	result1, #1
010b0     78 01 90 AD |  if_e	jmp	#LR__0135
010b4     07 13 02 F6 | 	mov	local05, local03
010b8     09 17 02 F6 | 	mov	local07, local05
010bc     02 16 66 F0 | 	shl	local07, #2
010c0     74 E4 05 F1 | 	add	ptr___system__dat__, #116
010c4     F2 16 02 F1 | 	add	local07, ptr___system__dat__
010c8     0B 15 0A FB | 	rdlong	local06, local07 wz
010cc     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
010d0     58 00 90 AD |  if_e	jmp	#LR__0130
010d4     4C 14 06 F1 | 	add	local06, #76
010d8     0A 17 0A FB | 	rdlong	local07, local06 wz
010dc     4C 14 86 F1 | 	sub	local06, #76
010e0     48 00 90 AD |  if_e	jmp	#LR__0130
010e4     4C 14 06 F1 | 	add	local06, #76
010e8     0A 17 02 FB | 	rdlong	local07, local06
010ec     0B 0F 02 F6 | 	mov	local03, local07
010f0     13 16 46 F7 | 	zerox	local07, #19
010f4     14 0E 46 F0 | 	shr	local03, #20
010f8     02 0E 66 F0 | 	shl	local03, #2
010fc     ED 0E 02 F1 | 	add	local03, __methods__
01100     07 0F 02 FB | 	rdlong	local03, local03
01104     09 15 02 F6 | 	mov	local06, local05
01108     02 14 66 F0 | 	shl	local06, #2
0110c     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01110     F2 14 02 F1 | 	add	local06, ptr___system__dat__
01114     0A 01 02 FB | 	rdlong	arg01, local06
01118     F1 14 02 F6 | 	mov	local06, objptr
0111c     0B E3 01 F6 | 	mov	objptr, local07
01120     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01124     2D 0E 62 FD | 	call	local03
01128     0A E3 01 F6 | 	mov	objptr, local06
0112c                 | LR__0130
0112c     09 19 02 F6 | 	mov	local08, local05
01130     02 18 66 F0 | 	shl	local08, #2
01134     74 E4 05 F1 | 	add	ptr___system__dat__, #116
01138     F2 18 02 F1 | 	add	local08, ptr___system__dat__
0113c     0C 0D 62 FC | 	wrlong	local02, local08
01140     00 0C 0E F2 | 	cmp	local02, #0 wz
01144     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
01148     18 00 90 5D |  if_ne	jmp	#LR__0131
0114c     02 12 66 F0 | 	shl	local05, #2
01150     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01154     F2 12 02 F1 | 	add	local05, ptr___system__dat__
01158     09 01 68 FC | 	wrlong	#0, local05
0115c     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01160     C4 00 90 FD | 	jmp	#LR__0134
01164                 | LR__0131
01164     09 1B 02 F6 | 	mov	local09, local05
01168     04 1A 66 F0 | 	shl	local09, #4
0116c     24 E4 05 F1 | 	add	ptr___system__dat__, #36
01170     F2 1A 02 F1 | 	add	local09, ptr___system__dat__
01174     0D 01 02 F6 | 	mov	arg01, local09
01178     05 03 02 F6 | 	mov	arg02, local01
0117c     10 04 06 F6 | 	mov	arg03, #16
01180     24 E4 85 F1 | 	sub	ptr___system__dat__, #36
01184     70 1C B0 FD | 	call	#__system__strncpy
01188     48 0C 06 F1 | 	add	local02, #72
0118c     06 19 0A FB | 	rdlong	local08, local02 wz
01190     48 0C 86 F1 | 	sub	local02, #72
01194     7C 00 90 AD |  if_e	jmp	#LR__0133
01198     48 0C 06 F1 | 	add	local02, #72
0119c     06 19 02 FB | 	rdlong	local08, local02
011a0     0C 1D 02 F6 | 	mov	local10, local08
011a4     13 18 46 F7 | 	zerox	local08, #19
011a8     14 1C 46 F0 | 	shr	local10, #20
011ac     02 1C 66 F0 | 	shl	local10, #2
011b0     ED 1C 02 F1 | 	add	local10, __methods__
011b4     0E 1D 02 FB | 	rdlong	local10, local10
011b8     0D 01 02 F6 | 	mov	arg01, local09
011bc     F1 1E 02 F6 | 	mov	local11, objptr
011c0     0C E3 01 F6 | 	mov	objptr, local08
011c4     2D 1C 62 FD | 	call	local10
011c8     0F E3 01 F6 | 	mov	objptr, local11
011cc     F5 00 0A F6 | 	mov	arg01, result1 wz
011d0     40 00 90 AD |  if_e	jmp	#LR__0132
011d4     09 19 02 F6 | 	mov	local08, local05
011d8     02 18 66 F0 | 	shl	local08, #2
011dc     74 E4 05 F1 | 	add	ptr___system__dat__, #116
011e0     F2 18 02 F1 | 	add	local08, ptr___system__dat__
011e4     0C 01 68 FC | 	wrlong	#0, local08
011e8     02 12 66 F0 | 	shl	local05, #2
011ec     10 E4 85 F1 | 	sub	ptr___system__dat__, #16
011f0     F2 12 02 F1 | 	add	local05, ptr___system__dat__
011f4     09 01 68 FC | 	wrlong	#0, local05
011f8     00 01 6A F6 | 	neg	arg01, arg01 wz
011fc     44 E4 85 F1 | 	sub	ptr___system__dat__, #68
01200     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
01204     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
01208     01 EA 65 56 |  if_ne	neg	result1, #1
0120c     00 EA 05 A6 |  if_e	mov	result1, #0
01210     18 00 90 FD | 	jmp	#LR__0135
01214                 | LR__0132
01214                 | LR__0133
01214     02 12 66 F0 | 	shl	local05, #2
01218     64 E4 05 F1 | 	add	ptr___system__dat__, #100
0121c     F2 12 02 F1 | 	add	local05, ptr___system__dat__
01220     09 1B 62 FC | 	wrlong	local09, local05
01224     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01228                 | LR__0134
01228     00 EA 05 F6 | 	mov	result1, #0
0122c                 | LR__0135
0122c     A7 F0 03 F6 | 	mov	ptra, fp
01230     B2 00 A0 FD | 	call	#popregs_
01234                 | __system___mount_ret
01234     2D 00 64 FD | 	ret
01238                 | 
01238                 | __system___chdir
01238     00 4A 05 F6 | 	mov	COUNT_, #0
0123c     A8 00 A0 FD | 	call	#pushregs_
01240     40 F0 07 F1 | 	add	ptra, #64
01244     04 4E 05 F1 | 	add	fp, #4
01248     A7 00 62 FC | 	wrlong	arg01, fp
0124c     04 4E 05 F1 | 	add	fp, #4
01250     A7 02 02 F6 | 	mov	arg02, fp
01254     08 4E 85 F1 | 	sub	fp, #8
01258     A8 19 B0 FD | 	call	#__system__stat
0125c     3C 4E 05 F1 | 	add	fp, #60
01260     A7 EA 61 FC | 	wrlong	result1, fp
01264     3C 4E 85 F1 | 	sub	fp, #60
01268     00 EA 0D F2 | 	cmp	result1, #0 wz
0126c     3C 4E 05 51 |  if_ne	add	fp, #60
01270     A7 EA 01 5B |  if_ne	rdlong	result1, fp
01274     3C 4E 85 51 |  if_ne	sub	fp, #60
01278     BC 00 90 5D |  if_ne	jmp	#LR__0142
0127c     10 4E 05 F1 | 	add	fp, #16
01280     A7 00 02 FB | 	rdlong	arg01, fp
01284     10 4E 85 F1 | 	sub	fp, #16
01288     78 00 00 FF 
0128c     00 00 06 F5 | 	and	arg01, ##61440
01290     08 00 00 FF 
01294     00 00 0E F2 | 	cmp	arg01, ##4096 wz
01298     20 E4 05 51 |  if_ne	add	ptr___system__dat__, #32
0129c     F2 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
012a0     20 E4 85 51 |  if_ne	sub	ptr___system__dat__, #32
012a4     01 EA 65 56 |  if_ne	neg	result1, #1
012a8     8C 00 90 5D |  if_ne	jmp	#LR__0142
012ac     04 4E 05 F1 | 	add	fp, #4
012b0     A7 04 02 FB | 	rdlong	arg03, fp
012b4     04 4E 85 F1 | 	sub	fp, #4
012b8     02 05 C2 FA | 	rdbyte	arg03, arg03
012bc     2F 04 0E F2 | 	cmp	arg03, #47 wz
012c0     24 00 90 5D |  if_ne	jmp	#LR__0140
012c4     84 E4 05 F1 | 	add	ptr___system__dat__, #132
012c8     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
012cc     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
012d0     04 4E 05 F1 | 	add	fp, #4
012d4     A7 02 02 FB | 	rdlong	arg02, fp
012d8     04 4E 85 F1 | 	sub	fp, #4
012dc     00 05 06 F6 | 	mov	arg03, #256
012e0     14 1B B0 FD | 	call	#__system__strncpy
012e4     4C 00 90 FD | 	jmp	#LR__0141
012e8                 | LR__0140
012e8     84 E5 05 F1 | 	add	ptr___system__dat__, #388
012ec     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
012f0     38 4E 05 F1 | 	add	fp, #56
012f4     A7 00 62 FC | 	wrlong	arg01, fp
012f8     38 4E 85 F1 | 	sub	fp, #56
012fc     00 E5 85 F1 | 	sub	ptr___system__dat__, #256
01300     F2 02 02 F6 | 	mov	arg02, ptr___system__dat__
01304     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
01308     00 05 06 F6 | 	mov	arg03, #256
0130c     E8 1A B0 FD | 	call	#__system__strncpy
01310     38 4E 05 F1 | 	add	fp, #56
01314     A7 00 02 FB | 	rdlong	arg01, fp
01318     34 4E 85 F1 | 	sub	fp, #52
0131c     A7 02 02 FB | 	rdlong	arg02, fp
01320     04 4E 85 F1 | 	sub	fp, #4
01324     84 E4 05 F1 | 	add	ptr___system__dat__, #132
01328     F2 04 02 F6 | 	mov	arg03, ptr___system__dat__
0132c     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
01330     10 00 B0 FD | 	call	#__system____getvfsforfile
01334                 | LR__0141
01334     00 EA 05 F6 | 	mov	result1, #0
01338                 | LR__0142
01338     A7 F0 03 F6 | 	mov	ptra, fp
0133c     B2 00 A0 FD | 	call	#popregs_
01340                 | __system___chdir_ret
01340     2D 00 64 FD | 	ret
01344                 | 
01344                 | __system____getvfsforfile
01344     0E 4A 05 F6 | 	mov	COUNT_, #14
01348     A8 00 A0 FD | 	call	#pushregs_
0134c     00 0B 02 F6 | 	mov	local01, arg01
01350     01 0D 02 F6 | 	mov	local02, arg02
01354     02 0F 02 F6 | 	mov	local03, arg03
01358     97 10 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
0135c                 | LR__0150
0135c     06 EB C1 FA | 	rdbyte	result1, local02
01360     2F EA 0D F2 | 	cmp	result1, #47 wz
01364     01 0C 06 A1 |  if_e	add	local02, #1
01368     06 11 C2 AA |  if_e	rdbyte	local04, local02
0136c     01 0C 86 A1 |  if_e	sub	local02, #1
01370     2F 10 0E A2 |  if_e	cmp	local04, #47 wz
01374     01 0C 06 A1 |  if_e	add	local02, #1
01378     E0 FF 9F AD |  if_e	jmp	#LR__0150
0137c                 | LR__0151
0137c     06 11 C2 FA | 	rdbyte	local04, local02
01380     2F 10 0E F2 | 	cmp	local04, #47 wz
01384     14 00 90 5D |  if_ne	jmp	#LR__0152
01388     05 01 02 F6 | 	mov	arg01, local01
0138c     06 03 02 F6 | 	mov	arg02, local02
01390     00 05 06 F6 | 	mov	arg03, #256
01394     60 1A B0 FD | 	call	#__system__strncpy
01398     7C 00 90 FD | 	jmp	#LR__0154
0139c                 | LR__0152
0139c     84 E4 05 F1 | 	add	ptr___system__dat__, #132
013a0     F2 02 02 F6 | 	mov	arg02, ptr___system__dat__
013a4     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
013a8     05 01 02 F6 | 	mov	arg01, local01
013ac     00 05 06 F6 | 	mov	arg03, #256
013b0     44 1A B0 FD | 	call	#__system__strncpy
013b4     06 11 CA FA | 	rdbyte	local04, local02 wz
013b8     5C 00 90 AD |  if_e	jmp	#LR__0153
013bc     06 11 C2 FA | 	rdbyte	local04, local02
013c0     2E 10 0E F2 | 	cmp	local04, #46 wz
013c4     01 0C 06 A1 |  if_e	add	local02, #1
013c8     06 13 C2 AA |  if_e	rdbyte	local05, local02
013cc     01 0C 86 A1 |  if_e	sub	local02, #1
013d0     09 15 02 A6 |  if_e	mov	local06, local05
013d4     07 14 4E A7 |  if_e	zerox	local06, #7 wz
013d8     3C 00 90 AD |  if_e	jmp	#LR__0153
013dc     05 13 C2 FA | 	rdbyte	local05, local01
013e0     2F 12 0E F2 | 	cmp	local05, #47 wz
013e4     01 0A 06 A1 |  if_e	add	local01, #1
013e8     05 11 C2 AA |  if_e	rdbyte	local04, local01
013ec     01 0A 86 A1 |  if_e	sub	local01, #1
013f0     00 10 4E A2 |  if_e	cmps	local04, #0 wz
013f4     62 00 00 5F 
013f8     60 03 06 56 |  if_ne	mov	arg02, ##@LR__1620
013fc     05 01 02 56 |  if_ne	mov	arg01, local01
01400     00 05 06 56 |  if_ne	mov	arg03, #256
01404     3C 1A B0 5D |  if_ne	call	#__system__strncat
01408     05 01 02 F6 | 	mov	arg01, local01
0140c     06 03 02 F6 | 	mov	arg02, local02
01410     00 05 06 F6 | 	mov	arg03, #256
01414     2C 1A B0 FD | 	call	#__system__strncat
01418                 | LR__0153
01418                 | LR__0154
01418     05 01 02 F6 | 	mov	arg01, local01
0141c     E4 1B B0 FD | 	call	#__system___normalizeName
01420     05 11 CA FA | 	rdbyte	local04, local01 wz
01424     1C 00 90 AD |  if_e	jmp	#LR__0155
01428     05 11 C2 FA | 	rdbyte	local04, local01
0142c     2F 10 0E F2 | 	cmp	local04, #47 wz
01430     01 0A 06 A1 |  if_e	add	local01, #1
01434     05 15 C2 AA |  if_e	rdbyte	local06, local01
01438     01 0A 86 A1 |  if_e	sub	local01, #1
0143c     00 14 4E A2 |  if_e	cmps	local06, #0 wz
01440     18 00 90 5D |  if_ne	jmp	#LR__0156
01444                 | LR__0155
01444     01 00 00 FF 
01448     84 E4 05 F1 | 	add	ptr___system__dat__, ##644
0144c     F2 EA 01 F6 | 	mov	result1, ptr___system__dat__
01450     01 00 00 FF 
01454     84 E4 85 F1 | 	sub	ptr___system__dat__, ##644
01458     EC 01 90 FD | 	jmp	#LR__0170
0145c                 | LR__0156
0145c     00 16 06 F6 | 	mov	local07, #0
01460                 | LR__0157
01460     04 16 56 F2 | 	cmps	local07, #4 wc
01464     CC 01 90 3D |  if_ae	jmp	#LR__0169
01468     0B 15 02 F6 | 	mov	local06, local07
0146c     02 14 66 F0 | 	shl	local06, #2
01470     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01474     F2 14 02 F1 | 	add	local06, ptr___system__dat__
01478     0A 15 0A FB | 	rdlong	local06, local06 wz
0147c     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01480     A8 01 90 AD |  if_e	jmp	#LR__0168
01484     0B 11 02 F6 | 	mov	local04, local07
01488     02 10 66 F0 | 	shl	local04, #2
0148c     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01490     F2 10 02 F1 | 	add	local04, ptr___system__dat__
01494     08 01 02 FB | 	rdlong	arg01, local04
01498     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
0149c     00 19 02 F6 | 	mov	local08, arg01
014a0     97 06 48 FB | 	callpa	#(@LR__0159-@LR__0158)>>2,fcache_load_ptr_
014a4                 | LR__0158
014a4     0C EB C9 FA | 	rdbyte	result1, local08 wz
014a8     01 18 06 51 |  if_ne	add	local08, #1
014ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0158
014b0                 | LR__0159
014b0     00 19 82 F1 | 	sub	local08, arg01
014b4     0C 1B 02 F6 | 	mov	local09, local08
014b8     0D 11 02 F6 | 	mov	local04, local09
014bc     05 11 02 F1 | 	add	local04, local01
014c0     08 15 C2 FA | 	rdbyte	local06, local04
014c4     2F 14 0E F2 | 	cmp	local06, #47 wz
014c8     0D 1D 02 56 |  if_ne	mov	local10, local09
014cc     05 1D 02 51 |  if_ne	add	local10, local01
014d0     0E 13 CA 5A |  if_ne	rdbyte	local05, local10 wz
014d4     54 01 90 5D |  if_ne	jmp	#LR__0167
014d8     0B 05 02 F6 | 	mov	arg03, local07
014dc     02 04 66 F0 | 	shl	arg03, #2
014e0     64 E4 05 F1 | 	add	ptr___system__dat__, #100
014e4     F2 04 02 F1 | 	add	arg03, ptr___system__dat__
014e8     02 03 02 FB | 	rdlong	arg02, arg03
014ec     0D 05 02 F6 | 	mov	arg03, local09
014f0     05 01 02 F6 | 	mov	arg01, local01
014f4     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
014f8     A8 19 B0 FD | 	call	#__system__strncmp
014fc     00 EA 4D F2 | 	cmps	result1, #0 wz
01500     28 01 90 5D |  if_ne	jmp	#LR__0167
01504     0B 1F 02 F6 | 	mov	local11, local07
01508     02 1E 66 F0 | 	shl	local11, #2
0150c     74 E4 05 F1 | 	add	ptr___system__dat__, #116
01510     F2 1E 02 F1 | 	add	local11, ptr___system__dat__
01514     0F 21 02 FB | 	rdlong	local12, local11
01518     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
0151c     97 22 48 FB | 	callpa	#(@LR__0161-@LR__0160)>>2,fcache_load_ptr_
01520                 | LR__0160
01520     0D 15 02 F6 | 	mov	local06, local09
01524     01 14 06 F1 | 	add	local06, #1
01528     05 15 02 F1 | 	add	local06, local01
0152c     0A 1F C2 FA | 	rdbyte	local11, local06
01530     2E 1E 0E F2 | 	cmp	local11, #46 wz
01534     2C 00 90 5D |  if_ne	jmp	#LR__0162
01538     0D 1F 02 F6 | 	mov	local11, local09
0153c     02 1E 06 F1 | 	add	local11, #2
01540     05 1F 02 F1 | 	add	local11, local01
01544     0F 1D C2 FA | 	rdbyte	local10, local11
01548     2F 1C 0E F2 | 	cmp	local10, #47 wz
0154c     0D 23 02 56 |  if_ne	mov	local13, local09
01550     02 22 06 51 |  if_ne	add	local13, #2
01554     05 23 02 51 |  if_ne	add	local13, local01
01558     11 25 CA 5A |  if_ne	rdbyte	local14, local13 wz
0155c     01 1A 06 A1 |  if_e	add	local09, #1
01560     BC FF 9F AD |  if_e	jmp	#LR__0160
01564                 | LR__0161
01564                 | LR__0162
01564     00 0E 0E F2 | 	cmp	local03, #0 wz
01568     07 01 02 56 |  if_ne	mov	arg01, local03
0156c     05 03 02 56 |  if_ne	mov	arg02, local01
01570     00 05 06 56 |  if_ne	mov	arg03, #256
01574     80 18 B0 5D |  if_ne	call	#__system__strncpy
01578     05 03 02 F6 | 	mov	arg02, local01
0157c     0D 03 02 F1 | 	add	arg02, local09
01580     01 02 06 F1 | 	add	arg02, #1
01584     05 01 02 F6 | 	mov	arg01, local01
01588     E4 F7 BF FD | 	call	#__system____builtin_strcpy
0158c     05 01 02 F6 | 	mov	arg01, local01
01590     00 19 02 F6 | 	mov	local08, arg01
01594     97 06 48 FB | 	callpa	#(@LR__0164-@LR__0163)>>2,fcache_load_ptr_
01598                 | LR__0163
01598     0C EB C9 FA | 	rdbyte	result1, local08 wz
0159c     01 18 06 51 |  if_ne	add	local08, #1
015a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0163
015a4                 | LR__0164
015a4     00 19 82 F1 | 	sub	local08, arg01
015a8     0C 1B 02 F6 | 	mov	local09, local08
015ac                 | LR__0165
015ac     01 1A 56 F2 | 	cmps	local09, #1 wc
015b0     70 00 90 CD |  if_b	jmp	#LR__0166
015b4     0D 11 02 F6 | 	mov	local04, local09
015b8     05 11 02 F1 | 	add	local04, local01
015bc     08 1F C2 FA | 	rdbyte	local11, local04
015c0     2F 1E 0E F2 | 	cmp	local11, #47 wz
015c4     0D 1F 02 A6 |  if_e	mov	local11, local09
015c8     05 1F 02 A1 |  if_e	add	local11, local01
015cc     0F 01 48 AC |  if_e	wrbyte	#0, local11
015d0     01 1A 86 A1 |  if_e	sub	local09, #1
015d4     D4 FF 9F AD |  if_e	jmp	#LR__0165
015d8     0D 11 02 F6 | 	mov	local04, local09
015dc     05 11 02 F1 | 	add	local04, local01
015e0     08 1F C2 FA | 	rdbyte	local11, local04
015e4     2E 1E 0E F2 | 	cmp	local11, #46 wz
015e8     38 00 90 5D |  if_ne	jmp	#LR__0166
015ec     02 1A 56 F2 | 	cmps	local09, #2 wc
015f0     30 00 90 CD |  if_b	jmp	#LR__0166
015f4     0D 25 02 F6 | 	mov	local14, local09
015f8     01 24 86 F1 | 	sub	local14, #1
015fc     05 25 02 F1 | 	add	local14, local01
01600     12 13 C2 FA | 	rdbyte	local05, local14
01604     2F 12 0E F2 | 	cmp	local05, #47 wz
01608     18 00 90 5D |  if_ne	jmp	#LR__0166
0160c     0D 11 02 F6 | 	mov	local04, local09
01610     01 10 86 F1 | 	sub	local04, #1
01614     05 11 02 F1 | 	add	local04, local01
01618     08 01 48 FC | 	wrbyte	#0, local04
0161c     02 1A 86 F1 | 	sub	local09, #2
01620     88 FF 9F FD | 	jmp	#LR__0165
01624                 | LR__0166
01624     10 EB 01 F6 | 	mov	result1, local12
01628     1C 00 90 FD | 	jmp	#LR__0170
0162c                 | LR__0167
0162c                 | LR__0168
0162c     01 16 06 F1 | 	add	local07, #1
01630     2C FE 9F FD | 	jmp	#LR__0157
01634                 | LR__0169
01634     03 00 00 FF 
01638     28 E5 05 F1 | 	add	ptr___system__dat__, ##1832
0163c     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
01640     03 00 00 FF 
01644     28 E5 85 F1 | 	sub	ptr___system__dat__, ##1832
01648                 | LR__0170
01648     A7 F0 03 F6 | 	mov	ptra, fp
0164c     B2 00 A0 FD | 	call	#popregs_
01650                 | __system____getvfsforfile_ret
01650     2D 00 64 FD | 	ret
01654                 | 
01654                 | __system___basic_open_string
01654     04 4A 05 F6 | 	mov	COUNT_, #4
01658     A8 00 A0 FD | 	call	#pushregs_
0165c     01 0B 02 F6 | 	mov	local01, arg02
01660     02 0D 02 F6 | 	mov	local02, arg03
01664     68 17 B0 FD | 	call	#__system____getftab
01668     F5 0E 0A F6 | 	mov	local03, result1 wz
0166c     18 00 90 5D |  if_ne	jmp	#LR__0180
01670     EE 00 02 F6 | 	mov	arg01, abortchain
01674     0C 02 06 F6 | 	mov	arg02, #12
01678     01 04 06 F6 | 	mov	arg03, #1
0167c     DA 00 A0 FD | 	call	#__longjmp
01680     01 EA 65 F6 | 	neg	result1, #1
01684     58 00 90 FD | 	jmp	#LR__0182
01688                 | LR__0180
01688     08 0E 06 F1 | 	add	local03, #8
0168c     07 07 0A FB | 	rdlong	arg04, local03 wz
01690     08 0E 86 F1 | 	sub	local03, #8
01694     07 01 02 56 |  if_ne	mov	arg01, local03
01698     F0 0F B0 5D |  if_ne	call	#__system___closeraw
0169c     05 03 02 F6 | 	mov	arg02, local01
016a0     06 05 02 F6 | 	mov	arg03, local02
016a4     07 01 02 F6 | 	mov	arg01, local03
016a8     B6 07 06 F6 | 	mov	arg04, #438
016ac     D8 0C B0 FD | 	call	#__system___openraw
016b0     F5 10 02 F6 | 	mov	local04, result1
016b4     00 10 56 F2 | 	cmps	local04, #0 wc
016b8     20 00 90 3D |  if_ae	jmp	#LR__0181
016bc     20 E4 05 F1 | 	add	ptr___system__dat__, #32
016c0     F2 02 02 FB | 	rdlong	arg02, ptr___system__dat__
016c4     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
016c8     EE 00 02 F6 | 	mov	arg01, abortchain
016cc     01 04 06 F6 | 	mov	arg03, #1
016d0     DA 00 A0 FD | 	call	#__longjmp
016d4     01 EA 65 F6 | 	neg	result1, #1
016d8     04 00 90 FD | 	jmp	#LR__0182
016dc                 | LR__0181
016dc     08 EB 01 F6 | 	mov	result1, local04
016e0                 | LR__0182
016e0     A7 F0 03 F6 | 	mov	ptra, fp
016e4     B2 00 A0 FD | 	call	#popregs_
016e8                 | __system___basic_open_string_ret
016e8     2D 00 64 FD | 	ret
016ec                 | 
016ec                 | __system___basic_print_char
016ec     03 4A 05 F6 | 	mov	COUNT_, #3
016f0     A8 00 A0 FD | 	call	#pushregs_
016f4     01 0B 02 F6 | 	mov	local01, arg02
016f8     04 1C B0 FD | 	call	#__system___gettxfunc
016fc     F5 0C 0A F6 | 	mov	local02, result1 wz
01700     00 EA 05 A6 |  if_e	mov	result1, #0
01704     30 00 90 AD |  if_e	jmp	#LR__0190
01708     06 0F 02 F6 | 	mov	local03, local02
0170c     13 0C 46 F7 | 	zerox	local02, #19
01710     14 0E 46 F0 | 	shr	local03, #20
01714     02 0E 66 F0 | 	shl	local03, #2
01718     ED 0E 02 F1 | 	add	local03, __methods__
0171c     07 0F 02 FB | 	rdlong	local03, local03
01720     05 01 02 F6 | 	mov	arg01, local01
01724     F1 0A 02 F6 | 	mov	local01, objptr
01728     06 E3 01 F6 | 	mov	objptr, local02
0172c     2D 0E 62 FD | 	call	local03
01730     05 E3 01 F6 | 	mov	objptr, local01
01734     01 EA 05 F6 | 	mov	result1, #1
01738                 | LR__0190
01738     A7 F0 03 F6 | 	mov	ptra, fp
0173c     B2 00 A0 FD | 	call	#popregs_
01740                 | __system___basic_print_char_ret
01740     2D 00 64 FD | 	ret
01744                 | 
01744                 | __system___basic_print_string
01744     03 4A 05 F6 | 	mov	COUNT_, #3
01748     A8 00 A0 FD | 	call	#pushregs_
0174c     01 0B 02 F6 | 	mov	local01, arg02
01750     02 0D 02 F6 | 	mov	local02, arg03
01754     A8 1B B0 FD | 	call	#__system___gettxfunc
01758     F5 0E 0A F6 | 	mov	local03, result1 wz
0175c     00 EA 05 A6 |  if_e	mov	result1, #0
01760     18 00 90 AD |  if_e	jmp	#LR__0200
01764     00 0A 0E F2 | 	cmp	local01, #0 wz
01768     00 EA 05 A6 |  if_e	mov	result1, #0
0176c     07 01 02 56 |  if_ne	mov	arg01, local03
01770     06 03 02 56 |  if_ne	mov	arg02, local02
01774     05 05 02 56 |  if_ne	mov	arg03, local01
01778     A4 00 B0 5D |  if_ne	call	#__system___fmtstr
0177c                 | LR__0200
0177c     A7 F0 03 F6 | 	mov	ptra, fp
01780     B2 00 A0 FD | 	call	#popregs_
01784                 | __system___basic_print_string_ret
01784     2D 00 64 FD | 	ret
01788                 | 
01788                 | __system___basic_print_integer
01788     04 4A 05 F6 | 	mov	COUNT_, #4
0178c     A8 00 A0 FD | 	call	#pushregs_
01790     01 0B 02 F6 | 	mov	local01, arg02
01794     02 0D 02 F6 | 	mov	local02, arg03
01798     03 0F 02 F6 | 	mov	local03, arg04
0179c     60 1B B0 FD | 	call	#__system___gettxfunc
017a0     F5 10 0A F6 | 	mov	local04, result1 wz
017a4     00 EA 05 A6 |  if_e	mov	result1, #0
017a8     08 01 02 56 |  if_ne	mov	arg01, local04
017ac     06 03 02 56 |  if_ne	mov	arg02, local02
017b0     05 05 02 56 |  if_ne	mov	arg03, local01
017b4     07 07 02 56 |  if_ne	mov	arg04, local03
017b8     50 01 B0 5D |  if_ne	call	#__system___fmtnum
017bc     A7 F0 03 F6 | 	mov	ptra, fp
017c0     B2 00 A0 FD | 	call	#popregs_
017c4                 | __system___basic_print_integer_ret
017c4     2D 00 64 FD | 	ret
017c8                 | 
017c8                 | __system___fmtchar
017c8     00 4A 05 F6 | 	mov	COUNT_, #0
017cc     A8 00 A0 FD | 	call	#pushregs_
017d0     10 F0 07 F1 | 	add	ptra, #16
017d4     04 4E 05 F1 | 	add	fp, #4
017d8     A7 00 62 FC | 	wrlong	arg01, fp
017dc     04 4E 05 F1 | 	add	fp, #4
017e0     A7 02 62 FC | 	wrlong	arg02, fp
017e4     04 4E 05 F1 | 	add	fp, #4
017e8     A7 04 62 FC | 	wrlong	arg03, fp
017ec     02 05 E2 F8 | 	getbyte	arg03, arg03, #0
017f0     A7 04 62 FC | 	wrlong	arg03, fp
017f4     08 4E 85 F1 | 	sub	fp, #8
017f8     A7 00 02 FB | 	rdlong	arg01, fp
017fc     04 4E 05 F1 | 	add	fp, #4
01800     A7 02 02 FB | 	rdlong	arg02, fp
01804     04 4E 05 F1 | 	add	fp, #4
01808     A7 04 02 F6 | 	mov	arg03, fp
0180c     0C 4E 85 F1 | 	sub	fp, #12
01810     0C 00 B0 FD | 	call	#__system___fmtstr
01814     A7 F0 03 F6 | 	mov	ptra, fp
01818     B2 00 A0 FD | 	call	#popregs_
0181c                 | __system___fmtchar_ret
0181c     2D 00 64 FD | 	ret
01820                 | 
01820                 | __system___fmtstr
01820     09 4A 05 F6 | 	mov	COUNT_, #9
01824     A8 00 A0 FD | 	call	#pushregs_
01828     00 0B 02 F6 | 	mov	local01, arg01
0182c     01 0D 02 F6 | 	mov	local02, arg02
01830     02 0F 02 F6 | 	mov	local03, arg03
01834     06 07 E2 F8 | 	getbyte	arg04, local02, #0
01838     07 01 02 F6 | 	mov	arg01, local03
0183c     00 11 02 F6 | 	mov	local04, arg01
01840     97 06 48 FB | 	callpa	#(@LR__0211-@LR__0210)>>2,fcache_load_ptr_
01844                 | LR__0210
01844     08 EB C9 FA | 	rdbyte	result1, local04 wz
01848     01 10 06 51 |  if_ne	add	local04, #1
0184c     F4 FF 9F 5D |  if_ne	jmp	#LR__0210
01850                 | LR__0211
01850     00 11 82 F1 | 	sub	local04, arg01
01854     00 06 0E F2 | 	cmp	arg04, #0 wz
01858     03 11 7A 53 |  if_ne	fles	local04, arg04 wcz
0185c     06 03 02 F6 | 	mov	arg02, local02
01860     08 05 02 F6 | 	mov	arg03, local04
01864     05 01 02 F6 | 	mov	arg01, local01
01868     02 06 06 F6 | 	mov	arg04, #2
0186c     54 19 B0 FD | 	call	#__system___fmtpad
01870     F5 12 02 F6 | 	mov	local05, result1
01874     00 12 56 F2 | 	cmps	local05, #0 wc
01878     09 EB 01 C6 |  if_b	mov	result1, local05
0187c     80 00 90 CD |  if_b	jmp	#LR__0214
01880     01 10 56 F2 | 	cmps	local04, #1 wc
01884     50 00 90 CD |  if_b	jmp	#LR__0213
01888     08 15 02 F6 | 	mov	local06, local04
0188c                 | LR__0212
0188c     05 17 02 F6 | 	mov	local07, local01
01890     05 19 02 F6 | 	mov	local08, local01
01894     13 16 46 F7 | 	zerox	local07, #19
01898     14 18 46 F0 | 	shr	local08, #20
0189c     02 18 66 F0 | 	shl	local08, #2
018a0     ED 18 02 F1 | 	add	local08, __methods__
018a4     0C 19 02 FB | 	rdlong	local08, local08
018a8     07 01 C2 FA | 	rdbyte	arg01, local03
018ac     F1 1A 02 F6 | 	mov	local09, objptr
018b0     0B E3 01 F6 | 	mov	objptr, local07
018b4     01 0E 06 F1 | 	add	local03, #1
018b8     2D 18 62 FD | 	call	local08
018bc     0D E3 01 F6 | 	mov	objptr, local09
018c0     F5 1A 02 F6 | 	mov	local09, result1
018c4     00 1A 56 F2 | 	cmps	local09, #0 wc
018c8     0D EB 01 C6 |  if_b	mov	result1, local09
018cc     30 00 90 CD |  if_b	jmp	#LR__0214
018d0     0D 13 02 F1 | 	add	local05, local09
018d4     ED 15 6E FB | 	djnz	local06, #LR__0212
018d8                 | LR__0213
018d8     06 03 02 F6 | 	mov	arg02, local02
018dc     08 05 02 F6 | 	mov	arg03, local04
018e0     05 01 02 F6 | 	mov	arg01, local01
018e4     01 06 06 F6 | 	mov	arg04, #1
018e8     D8 18 B0 FD | 	call	#__system___fmtpad
018ec     F5 1A 02 F6 | 	mov	local09, result1
018f0     00 1A 56 F2 | 	cmps	local09, #0 wc
018f4     0D EB 01 C6 |  if_b	mov	result1, local09
018f8     0D 13 02 31 |  if_ae	add	local05, local09
018fc     09 EB 01 36 |  if_ae	mov	result1, local05
01900                 | LR__0214
01900     A7 F0 03 F6 | 	mov	ptra, fp
01904     B2 00 A0 FD | 	call	#popregs_
01908                 | __system___fmtstr_ret
01908     2D 00 64 FD | 	ret
0190c                 | 
0190c                 | __system___fmtnum
0190c     0B 4A 05 F6 | 	mov	COUNT_, #11
01910     A8 00 A0 FD | 	call	#pushregs_
01914     00 0B 02 F6 | 	mov	local01, arg01
01918     01 0D 02 F6 | 	mov	local02, arg02
0191c     02 0F 02 F6 | 	mov	local03, arg03
01920     03 11 02 F6 | 	mov	local04, arg04
01924     F8 13 02 F6 | 	mov	local05, ptra
01928     09 15 02 F6 | 	mov	local06, local05
0192c     00 16 06 F6 | 	mov	local07, #0
01930     06 19 02 F6 | 	mov	local08, local02
01934     10 18 46 F0 | 	shr	local08, #16
01938     3F 18 06 F5 | 	and	local08, #63
0193c     06 1B E2 F8 | 	getbyte	local09, local02, #0
01940     06 1D 02 F6 | 	mov	local10, local02
01944     1A 1C 46 F0 | 	shr	local10, #26
01948     03 1C 06 F5 | 	and	local10, #3
0194c     0E 1F 02 F6 | 	mov	local11, local10
01950     01 18 56 F2 | 	cmps	local08, #1 wc
01954     44 F0 07 F1 | 	add	ptra, #68
01958     01 18 86 31 |  if_ae	sub	local08, #1
0195c     41 1A 56 F2 | 	cmps	local09, #65 wc
01960     00 1A 0E C2 |  if_b	cmp	local09, #0 wz
01964     40 1A 06 B6 |  if_nc_or_z	mov	local09, #64
01968     03 1E 0E F2 | 	cmp	local11, #3 wz
0196c     00 1E 06 A6 |  if_e	mov	local11, #0
01970     00 0E 56 52 |  if_ne	cmps	local03, #0 wc
01974     04 1E 06 46 |  if_c_and_nz	mov	local11, #4
01978     07 0F 62 46 |  if_c_and_nz	neg	local03, local03
0197c     00 1E 0E F2 | 	cmp	local11, #0 wz
01980     4C 00 90 AD |  if_e	jmp	#LR__0223
01984     01 16 06 F6 | 	mov	local07, #1
01988     0D 19 0A F2 | 	cmp	local08, local09 wz
0198c     18 00 90 5D |  if_ne	jmp	#LR__0221
01990     05 18 6E FB | 	djnz	local08, #LR__0220
01994     05 01 02 F6 | 	mov	arg01, local01
01998     06 03 02 F6 | 	mov	arg02, local02
0199c     23 04 06 F6 | 	mov	arg03, #35
019a0     24 FE BF FD | 	call	#__system___fmtchar
019a4     88 00 90 FD | 	jmp	#LR__0227
019a8                 | LR__0220
019a8                 | LR__0221
019a8     02 1E 0E F2 | 	cmp	local11, #2 wz
019ac     0A 1D 02 A6 |  if_e	mov	local10, local06
019b0     01 14 06 A1 |  if_e	add	local06, #1
019b4     0E 41 48 AC |  if_e	wrbyte	#32, local10
019b8     14 00 90 AD |  if_e	jmp	#LR__0222
019bc     04 1E 0E F2 | 	cmp	local11, #4 wz
019c0     0A 5B 48 AC |  if_e	wrbyte	#45, local06
019c4     01 14 06 A1 |  if_e	add	local06, #1
019c8     0A 57 48 5C |  if_ne	wrbyte	#43, local06
019cc     01 14 06 51 |  if_ne	add	local06, #1
019d0                 | LR__0222
019d0                 | LR__0223
019d0     0A 01 02 F6 | 	mov	arg01, local06
019d4     07 03 02 F6 | 	mov	arg02, local03
019d8     08 05 02 F6 | 	mov	arg03, local04
019dc     0C 07 02 F6 | 	mov	arg04, local08
019e0     00 08 06 F6 | 	mov	arg05, #0
019e4     1D 0C 2E F4 | 	testbn	local02, #29 wz
019e8     01 08 06 56 |  if_ne	mov	arg05, #1
019ec     9C 18 B0 FD | 	call	#__system___uitoa
019f0     F5 16 02 F1 | 	add	local07, result1
019f4     0D 17 5A F2 | 	cmps	local07, local09 wcz
019f8     24 00 90 ED |  if_be	jmp	#LR__0226
019fc     97 0E 48 FB | 	callpa	#(@LR__0225-@LR__0224)>>2,fcache_load_ptr_
01a00                 | LR__0224
01a00     0D 1D 02 F6 | 	mov	local10, local09
01a04     01 1C 56 F2 | 	cmps	local10, #1 wc
01a08     01 1A 86 F1 | 	sub	local09, #1
01a0c     0A 1D 02 36 |  if_ae	mov	local10, local06
01a10     01 14 06 31 |  if_ae	add	local06, #1
01a14     0E 47 48 3C |  if_ae	wrbyte	#35, local10
01a18     E4 FF 9F 3D |  if_ae	jmp	#LR__0224
01a1c                 | LR__0225
01a1c     0A 01 48 FC | 	wrbyte	#0, local06
01a20                 | LR__0226
01a20     05 01 02 F6 | 	mov	arg01, local01
01a24     06 03 02 F6 | 	mov	arg02, local02
01a28     09 05 02 F6 | 	mov	arg03, local05
01a2c     F0 FD BF FD | 	call	#__system___fmtstr
01a30                 | LR__0227
01a30     A7 F0 03 F6 | 	mov	ptra, fp
01a34     B2 00 A0 FD | 	call	#popregs_
01a38                 | __system___fmtnum_ret
01a38     2D 00 64 FD | 	ret
01a3c                 | 
01a3c                 | __system___strerror
01a3c     00 00 56 F2 | 	cmps	arg01, #0 wc
01a40     08 00 90 CD |  if_b	jmp	#LR__0230
01a44     1A 00 56 F2 | 	cmps	arg01, #26 wc
01a48     04 00 90 CD |  if_b	jmp	#LR__0231
01a4c                 | LR__0230
01a4c     19 00 06 F6 | 	mov	arg01, #25
01a50                 | LR__0231
01a50     02 00 66 F0 | 	shl	arg01, #2
01a54     01 00 00 FF 
01a58     D8 E4 05 F1 | 	add	ptr___system__dat__, ##728
01a5c     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
01a60     00 EB 01 FB | 	rdlong	result1, arg01
01a64     01 00 00 FF 
01a68     D8 E4 85 F1 | 	sub	ptr___system__dat__, ##728
01a6c                 | __system___strerror_ret
01a6c     2D 00 64 FD | 	ret
01a70                 | 
01a70                 | __system___int64_shl
01a70     20 04 CE F7 | 	test	arg03, #32 wz
01a74     00 03 02 56 |  if_ne	mov	arg02, arg01
01a78     00 00 06 56 |  if_ne	mov	arg01, #0
01a7c     1F 04 CE F7 | 	test	arg03, #31 wz
01a80     18 00 90 AD |  if_e	jmp	#LR__0240
01a84     02 03 62 F0 | 	shl	arg02, arg03
01a88     00 EB 01 F6 | 	mov	result1, arg01
01a8c     02 ED 61 F6 | 	neg	result2, arg03
01a90     F6 EA 41 F0 | 	shr	result1, result2
01a94     F5 02 42 F5 | 	or	arg02, result1
01a98     02 01 62 F0 | 	shl	arg01, arg03
01a9c                 | LR__0240
01a9c     01 ED 01 F6 | 	mov	result2, arg02
01aa0     00 EB 01 F6 | 	mov	result1, arg01
01aa4                 | __system___int64_shl_ret
01aa4     2D 00 64 FD | 	ret
01aa8                 | 
01aa8                 | __system___usepins
01aa8     14 E4 05 F1 | 	add	ptr___system__dat__, #20
01aac     F2 EE 01 FB | 	rdlong	_var01, ptr___system__dat__
01ab0     14 E4 85 F1 | 	sub	ptr___system__dat__, #20
01ab4     F7 00 CA F7 | 	test	arg01, _var01 wz
01ab8     18 E4 05 A1 |  if_e	add	ptr___system__dat__, #24
01abc     F2 F0 01 AB |  if_e	rdlong	_var02, ptr___system__dat__
01ac0     18 E4 85 A1 |  if_e	sub	ptr___system__dat__, #24
01ac4     F8 02 CA A7 |  if_e	test	arg02, _var02 wz
01ac8     00 EA 05 56 |  if_ne	mov	result1, #0
01acc     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
01ad0     14 E4 05 F1 | 	add	ptr___system__dat__, #20
01ad4     F2 F0 01 FB | 	rdlong	_var02, ptr___system__dat__
01ad8     00 F1 41 F5 | 	or	_var02, arg01
01adc     F2 F0 61 FC | 	wrlong	_var02, ptr___system__dat__
01ae0     04 E4 05 F1 | 	add	ptr___system__dat__, #4
01ae4     F2 F0 01 FB | 	rdlong	_var02, ptr___system__dat__
01ae8     01 F1 41 F5 | 	or	_var02, arg02
01aec     F2 F0 61 FC | 	wrlong	_var02, ptr___system__dat__
01af0     18 E4 85 F1 | 	sub	ptr___system__dat__, #24
01af4     01 EA 65 F6 | 	neg	result1, #1
01af8                 | __system___usepins_ret
01af8     2D 00 64 FD | 	ret
01afc                 | 
01afc                 | __system___freepins
01afc     14 E4 05 F1 | 	add	ptr___system__dat__, #20
01b00     F2 EE 01 FB | 	rdlong	_var01, ptr___system__dat__
01b04     00 EF 21 F5 | 	andn	_var01, arg01
01b08     F2 EE 61 FC | 	wrlong	_var01, ptr___system__dat__
01b0c     04 E4 05 F1 | 	add	ptr___system__dat__, #4
01b10     F2 EE 01 FB | 	rdlong	_var01, ptr___system__dat__
01b14     01 EF 21 F5 | 	andn	_var01, arg02
01b18     F2 EE 61 FC | 	wrlong	_var01, ptr___system__dat__
01b1c     18 E4 85 F1 | 	sub	ptr___system__dat__, #24
01b20                 | __system___freepins_ret
01b20     2D 00 64 FD | 	ret
01b24                 | 
01b24                 | __system___gc_ptrs
01b24     EC EE 01 F6 | 	mov	_var01, __heap_ptr
01b28     F7 F0 01 F6 | 	mov	_var02, _var01
01b2c     0B 00 00 FF 
01b30     68 F1 05 F1 | 	add	_var02, ##5992
01b34     F7 EC 09 FB | 	rdlong	result2, _var01 wz
01b38     74 00 90 5D |  if_ne	jmp	#LR__0250
01b3c     F8 EC 01 F6 | 	mov	result2, _var02
01b40     F7 EC 81 F1 | 	sub	result2, _var01
01b44     F7 02 58 FC | 	wrword	#1, _var01
01b48     F7 EA 01 F6 | 	mov	result1, _var01
01b4c     02 EA 05 F1 | 	add	result1, #2
01b50     36 00 80 FF 
01b54     F5 20 59 FC | 	wrword	##27792, result1
01b58     F7 EA 01 F6 | 	mov	result1, _var01
01b5c     04 EA 05 F1 | 	add	result1, #4
01b60     F5 00 58 FC | 	wrword	#0, result1
01b64     F7 EA 01 F6 | 	mov	result1, _var01
01b68     06 EA 05 F1 | 	add	result1, #6
01b6c     F5 02 58 FC | 	wrword	#1, result1
01b70     10 EE 05 F1 | 	add	_var01, #16
01b74     F6 EC 51 F6 | 	abs	result2, result2 wc
01b78     04 EC 45 F0 | 	shr	result2, #4
01b7c     F6 EC 81 F6 | 	negc	result2, result2
01b80     F7 EC 51 FC | 	wrword	result2, _var01
01b84     F7 EC 01 F6 | 	mov	result2, _var01
01b88     02 EC 05 F1 | 	add	result2, #2
01b8c     36 00 80 FF 
01b90     F6 1E 59 FC | 	wrword	##27791, result2
01b94     F7 EC 01 F6 | 	mov	result2, _var01
01b98     04 EC 05 F1 | 	add	result2, #4
01b9c     F6 00 58 FC | 	wrword	#0, result2
01ba0     F7 EC 01 F6 | 	mov	result2, _var01
01ba4     06 EC 05 F1 | 	add	result2, #6
01ba8     F6 00 58 FC | 	wrword	#0, result2
01bac     10 EE 85 F1 | 	sub	_var01, #16
01bb0                 | LR__0250
01bb0     F7 EA 01 F6 | 	mov	result1, _var01
01bb4     F8 EC 01 F6 | 	mov	result2, _var02
01bb8                 | __system___gc_ptrs_ret
01bb8     2D 00 64 FD | 	ret
01bbc                 | 
01bbc                 | __system___gc_tryalloc
01bbc     0B 4A 05 F6 | 	mov	COUNT_, #11
01bc0     A8 00 A0 FD | 	call	#pushregs_
01bc4     00 0B 02 F6 | 	mov	local01, arg01
01bc8     01 0D 02 F6 | 	mov	local02, arg02
01bcc     54 FF BF FD | 	call	#__system___gc_ptrs
01bd0     F5 0E 02 F6 | 	mov	local03, result1
01bd4     F6 10 02 F6 | 	mov	local04, result2
01bd8     07 13 02 F6 | 	mov	local05, local03
01bdc     00 14 06 F6 | 	mov	local06, #0
01be0     97 1E 48 FB | 	callpa	#(@LR__0261-@LR__0260)>>2,fcache_load_ptr_
01be4                 | LR__0260
01be4     09 17 02 F6 | 	mov	local07, local05
01be8     06 12 06 F1 | 	add	local05, #6
01bec     09 03 EA FA | 	rdword	arg02, local05 wz
01bf0     07 01 02 F6 | 	mov	arg01, local03
01bf4     00 EA 05 A6 |  if_e	mov	result1, #0
01bf8     04 02 66 50 |  if_ne	shl	arg02, #4
01bfc     01 01 02 51 |  if_ne	add	arg01, arg02
01c00     00 EB 01 56 |  if_ne	mov	result1, arg01
01c04     F5 12 0A F6 | 	mov	local05, result1 wz
01c08     09 15 E2 5A |  if_ne	rdword	local06, local05
01c0c     00 12 0E F2 | 	cmp	local05, #0 wz
01c10     08 13 52 52 |  if_ne	cmps	local05, local04 wc
01c14     08 00 90 1D |  if_a	jmp	#LR__0262
01c18     0A 0B 5A 52 |  if_ne	cmps	local01, local06 wcz
01c1c     C4 FF 9F 1D |  if_a	jmp	#LR__0260
01c20                 | LR__0261
01c20                 | LR__0262
01c20     00 12 0E F2 | 	cmp	local05, #0 wz
01c24     09 EB 01 A6 |  if_e	mov	result1, local05
01c28     3C 01 90 AD |  if_e	jmp	#LR__0265
01c2c     09 ED 01 F6 | 	mov	result2, local05
01c30     06 EC 05 F1 | 	add	result2, #6
01c34     F6 18 E2 FA | 	rdword	local08, result2
01c38     0A 0B 52 F2 | 	cmps	local01, local06 wc
01c3c     C0 00 90 3D |  if_ae	jmp	#LR__0264
01c40     09 0B 52 FC | 	wrword	local01, local05
01c44     09 01 02 F6 | 	mov	arg01, local05
01c48     05 19 02 F6 | 	mov	local08, local01
01c4c     04 18 66 F0 | 	shl	local08, #4
01c50     0C 01 02 F1 | 	add	arg01, local08
01c54     05 15 82 F1 | 	sub	local06, local01
01c58     00 15 52 FC | 	wrword	local06, arg01
01c5c     00 19 02 F6 | 	mov	local08, arg01
01c60     02 18 06 F1 | 	add	local08, #2
01c64     36 00 80 FF 
01c68     0C 1F 59 FC | 	wrword	##27791, local08
01c6c     09 03 0A F6 | 	mov	arg02, local05 wz
01c70     00 EA 05 A6 |  if_e	mov	result1, #0
01c74     07 03 82 51 |  if_ne	sub	arg02, local03
01c78     04 02 46 50 |  if_ne	shr	arg02, #4
01c7c     01 EB 01 56 |  if_ne	mov	result1, arg02
01c80     00 19 02 F6 | 	mov	local08, arg01
01c84     04 18 06 F1 | 	add	local08, #4
01c88     0C EB 51 FC | 	wrword	result1, local08
01c8c     09 19 02 F6 | 	mov	local08, local05
01c90     06 18 06 F1 | 	add	local08, #6
01c94     00 03 02 F6 | 	mov	arg02, arg01
01c98     0C 19 E2 FA | 	rdword	local08, local08
01c9c     06 02 06 F1 | 	add	arg02, #6
01ca0     01 19 52 FC | 	wrword	local08, arg02
01ca4     00 1B 02 F6 | 	mov	local09, arg01
01ca8     0D 03 0A F6 | 	mov	arg02, local09 wz
01cac     00 EA 05 A6 |  if_e	mov	result1, #0
01cb0     07 03 82 51 |  if_ne	sub	arg02, local03
01cb4     04 02 46 50 |  if_ne	shr	arg02, #4
01cb8     01 EB 01 56 |  if_ne	mov	result1, arg02
01cbc     F5 18 02 F6 | 	mov	local08, result1
01cc0     00 1D EA FA | 	rdword	local10, arg01 wz
01cc4     00 EA 05 A6 |  if_e	mov	result1, #0
01cc8     04 1C 66 50 |  if_ne	shl	local10, #4
01ccc     0E 01 02 51 |  if_ne	add	arg01, local10
01cd0     00 EB 01 56 |  if_ne	mov	result1, arg01
01cd4     F5 1E 0A F6 | 	mov	local11, result1 wz
01cd8     24 00 90 AD |  if_e	jmp	#LR__0263
01cdc     08 1F 52 F2 | 	cmps	local11, local04 wc
01ce0     1C 00 90 3D |  if_ae	jmp	#LR__0263
01ce4     0D 03 0A F6 | 	mov	arg02, local09 wz
01ce8     00 EA 05 A6 |  if_e	mov	result1, #0
01cec     07 03 82 51 |  if_ne	sub	arg02, local03
01cf0     04 02 46 50 |  if_ne	shr	arg02, #4
01cf4     01 EB 01 56 |  if_ne	mov	result1, arg02
01cf8     04 1E 06 F1 | 	add	local11, #4
01cfc     0F EB 51 FC | 	wrword	result1, local11
01d00                 | LR__0263
01d00                 | LR__0264
01d00     06 16 06 F1 | 	add	local07, #6
01d04     0B 19 52 FC | 	wrword	local08, local07
01d08     36 00 00 FF 
01d0c     80 1A 06 F6 | 	mov	local09, ##27776
01d10     06 1B 42 F5 | 	or	local09, local02
01d14     00 EA 05 F6 | 	mov	result1, #0
01d18     01 EA 61 FD | 	cogid	result1
01d1c     F5 1A 42 F5 | 	or	local09, result1
01d20     09 1F 02 F6 | 	mov	local11, local05
01d24     02 1E 06 F1 | 	add	local11, #2
01d28     0F 1B 52 FC | 	wrword	local09, local11
01d2c     07 1B 02 F6 | 	mov	local09, local03
01d30     08 1A 06 F1 | 	add	local09, #8
01d34     09 1F 02 F6 | 	mov	local11, local05
01d38     0D 1B E2 FA | 	rdword	local09, local09
01d3c     06 1E 06 F1 | 	add	local11, #6
01d40     0F 1B 52 FC | 	wrword	local09, local11
01d44     09 03 0A F6 | 	mov	arg02, local05 wz
01d48     00 EA 05 A6 |  if_e	mov	result1, #0
01d4c     07 03 82 51 |  if_ne	sub	arg02, local03
01d50     04 02 46 50 |  if_ne	shr	arg02, #4
01d54     01 EB 01 56 |  if_ne	mov	result1, arg02
01d58     08 0E 06 F1 | 	add	local03, #8
01d5c     07 EB 51 FC | 	wrword	result1, local03
01d60     08 12 06 F1 | 	add	local05, #8
01d64     09 EB 01 F6 | 	mov	result1, local05
01d68                 | LR__0265
01d68     A7 F0 03 F6 | 	mov	ptra, fp
01d6c     B2 00 A0 FD | 	call	#popregs_
01d70                 | __system___gc_tryalloc_ret
01d70     2D 00 64 FD | 	ret
01d74                 | 
01d74                 | __system___gc_alloc_managed
01d74     01 4A 05 F6 | 	mov	COUNT_, #1
01d78     A8 00 A0 FD | 	call	#pushregs_
01d7c     00 0B 02 F6 | 	mov	local01, arg01
01d80     00 02 06 F6 | 	mov	arg02, #0
01d84     1C 00 B0 FD | 	call	#__system___gc_doalloc
01d88     F5 02 0A F6 | 	mov	arg02, result1 wz
01d8c     01 0A 56 A2 |  if_e	cmps	local01, #1 wc
01d90     00 EA 05 26 |  if_nc_and_z	mov	result1, #0
01d94     01 EB 01 D6 |  if_c_or_nz	mov	result1, arg02
01d98     A7 F0 03 F6 | 	mov	ptra, fp
01d9c     B2 00 A0 FD | 	call	#popregs_
01da0                 | __system___gc_alloc_managed_ret
01da0     2D 00 64 FD | 	ret
01da4                 | 
01da4                 | __system___gc_doalloc
01da4     06 4A 05 F6 | 	mov	COUNT_, #6
01da8     A8 00 A0 FD | 	call	#pushregs_
01dac     00 0B 0A F6 | 	mov	local01, arg01 wz
01db0     01 0D 02 F6 | 	mov	local02, arg02
01db4     00 EA 05 A6 |  if_e	mov	result1, #0
01db8     8C 00 90 AD |  if_e	jmp	#LR__0277
01dbc     17 0A 06 F1 | 	add	local01, #23
01dc0     0F 0A 26 F5 | 	andn	local01, #15
01dc4     04 0A 46 F0 | 	shr	local01, #4
01dc8     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01dcc     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01dd0     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01dd4     E4 EF BF FD | 	call	#__system___lockmem
01dd8     05 01 02 F6 | 	mov	arg01, local01
01ddc     06 03 02 F6 | 	mov	arg02, local02
01de0     D8 FD BF FD | 	call	#__system___gc_tryalloc
01de4     F5 0E 0A F6 | 	mov	local03, result1 wz
01de8     14 00 90 5D |  if_ne	jmp	#LR__0270
01dec     70 03 B0 FD | 	call	#__system___gc_docollect
01df0     05 01 02 F6 | 	mov	arg01, local01
01df4     06 03 02 F6 | 	mov	arg02, local02
01df8     C0 FD BF FD | 	call	#__system___gc_tryalloc
01dfc     F5 0E 02 F6 | 	mov	local03, result1
01e00                 | LR__0270
01e00     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01e04     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01e08     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01e0c     00 01 68 FC | 	wrlong	#0, arg01
01e10     00 0E 0E F2 | 	cmp	local03, #0 wz
01e14     2C 00 90 AD |  if_e	jmp	#LR__0276
01e18     04 0A 66 F0 | 	shl	local01, #4
01e1c     08 0A 86 F1 | 	sub	local01, #8
01e20     05 11 52 F6 | 	abs	local04, local01 wc
01e24     02 10 46 F0 | 	shr	local04, #2
01e28     08 13 8A F6 | 	negc	local05, local04 wz
01e2c     07 15 02 F6 | 	mov	local06, local03
01e30     10 00 90 AD |  if_e	jmp	#LR__0275
01e34     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0271)>>2,fcache_load_ptr_
01e38                 | LR__0271
01e38     09 05 D8 FC | 	rep	@LR__0274, local05
01e3c                 | LR__0272
01e3c     0A 01 68 FC | 	wrlong	#0, local06
01e40     04 14 06 F1 | 	add	local06, #4
01e44                 | LR__0273
01e44                 | LR__0274
01e44                 | LR__0275
01e44                 | LR__0276
01e44     07 EB 01 F6 | 	mov	result1, local03
01e48                 | LR__0277
01e48     A7 F0 03 F6 | 	mov	ptra, fp
01e4c     B2 00 A0 FD | 	call	#popregs_
01e50                 | __system___gc_doalloc_ret
01e50     2D 00 64 FD | 	ret
01e54                 | 
01e54                 | __system___gc_isvalidptr
01e54     F8 04 06 F4 | 	bitl	arg03, #248
01e58     08 04 86 F1 | 	sub	arg03, #8
01e5c     00 05 52 F2 | 	cmps	arg03, arg01 wc
01e60     08 00 90 CD |  if_b	jmp	#LR__0280
01e64     01 05 52 F2 | 	cmps	arg03, arg02 wc
01e68     08 00 90 CD |  if_b	jmp	#LR__0281
01e6c                 | LR__0280
01e6c     00 EA 05 F6 | 	mov	result1, #0
01e70     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
01e74                 | LR__0281
01e74     02 EF 01 F6 | 	mov	_var01, arg03
01e78     00 EF 61 F5 | 	xor	_var01, arg01
01e7c     0F EE CD F7 | 	test	_var01, #15 wz
01e80     00 EA 05 56 |  if_ne	mov	result1, #0
01e84     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
01e88     02 EF 01 F6 | 	mov	_var01, arg03
01e8c     02 EE 05 F1 | 	add	_var01, #2
01e90     F7 EE E1 FA | 	rdword	_var01, _var01
01e94     7F 00 00 FF 
01e98     C0 EF 05 F5 | 	and	_var01, ##65472
01e9c     36 00 00 FF 
01ea0     80 EE 0D F2 | 	cmp	_var01, ##27776 wz
01ea4     00 EA 05 56 |  if_ne	mov	result1, #0
01ea8     02 EB 01 A6 |  if_e	mov	result1, arg03
01eac                 | __system___gc_isvalidptr_ret
01eac     2D 00 64 FD | 	ret
01eb0                 | 
01eb0                 | __system___gc_free
01eb0     00 05 02 F6 | 	mov	arg03, arg01
01eb4     6C FC BF FD | 	call	#__system___gc_ptrs
01eb8     F5 00 02 F6 | 	mov	arg01, result1
01ebc     F6 02 02 F6 | 	mov	arg02, result2
01ec0     90 FF BF FD | 	call	#__system___gc_isvalidptr
01ec4     F5 02 0A F6 | 	mov	arg02, result1 wz
01ec8     28 00 90 AD |  if_e	jmp	#LR__0290
01ecc     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01ed0     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01ed4     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01ed8     E0 EE BF FD | 	call	#__system___lockmem
01edc     01 01 02 F6 | 	mov	arg01, arg02
01ee0     14 00 B0 FD | 	call	#__system___gc_dofree
01ee4     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01ee8     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01eec     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01ef0     00 01 68 FC | 	wrlong	#0, arg01
01ef4                 | LR__0290
01ef4                 | __system___gc_free_ret
01ef4     2D 00 64 FD | 	ret
01ef8                 | 
01ef8                 | __system___gc_dofree
01ef8     06 4A 05 F6 | 	mov	COUNT_, #6
01efc     A8 00 A0 FD | 	call	#pushregs_
01f00     00 0B 02 F6 | 	mov	local01, arg01
01f04     1C FC BF FD | 	call	#__system___gc_ptrs
01f08     F5 0C 02 F6 | 	mov	local02, result1
01f0c     F6 0E 02 F6 | 	mov	local03, result2
01f10     05 03 02 F6 | 	mov	arg02, local01
01f14     02 02 06 F1 | 	add	arg02, #2
01f18     36 00 80 FF 
01f1c     01 1F 59 FC | 	wrword	##27791, arg02
01f20     05 11 02 F6 | 	mov	local04, local01
01f24     05 01 02 F6 | 	mov	arg01, local01
01f28     00 13 EA FA | 	rdword	local05, arg01 wz
01f2c     00 EA 05 A6 |  if_e	mov	result1, #0
01f30     04 12 66 50 |  if_ne	shl	local05, #4
01f34     09 01 02 51 |  if_ne	add	arg01, local05
01f38     00 EB 01 56 |  if_ne	mov	result1, arg01
01f3c     F5 14 02 F6 | 	mov	local06, result1
01f40     97 24 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
01f44                 | LR__0300
01f44     04 10 06 F1 | 	add	local04, #4
01f48     08 03 EA FA | 	rdword	arg02, local04 wz
01f4c     06 01 02 F6 | 	mov	arg01, local02
01f50     00 EA 05 A6 |  if_e	mov	result1, #0
01f54     04 02 66 50 |  if_ne	shl	arg02, #4
01f58     01 01 02 51 |  if_ne	add	arg01, arg02
01f5c     00 EB 01 56 |  if_ne	mov	result1, arg01
01f60     F5 10 0A F6 | 	mov	local04, result1 wz
01f64     24 00 90 AD |  if_e	jmp	#LR__0302
01f68     08 01 02 F6 | 	mov	arg01, local04
01f6c     00 EA 05 F6 | 	mov	result1, #0
01f70     02 00 06 F1 | 	add	arg01, #2
01f74     00 01 E2 FA | 	rdword	arg01, arg01
01f78     36 00 00 FF 
01f7c     8F 00 0E F2 | 	cmp	arg01, ##27791 wz
01f80     01 EA 65 A6 |  if_e	neg	result1, #1
01f84     00 EA 0D F2 | 	cmp	result1, #0 wz
01f88     B8 FF 9F AD |  if_e	jmp	#LR__0300
01f8c                 | LR__0301
01f8c                 | LR__0302
01f8c     00 10 0E F2 | 	cmp	local04, #0 wz
01f90     06 11 02 A6 |  if_e	mov	local04, local02
01f94     08 03 02 F6 | 	mov	arg02, local04
01f98     06 02 06 F1 | 	add	arg02, #6
01f9c     05 01 02 F6 | 	mov	arg01, local01
01fa0     01 03 E2 FA | 	rdword	arg02, arg02
01fa4     06 00 06 F1 | 	add	arg01, #6
01fa8     00 03 52 FC | 	wrword	arg02, arg01
01fac     05 03 0A F6 | 	mov	arg02, local01 wz
01fb0     00 EA 05 A6 |  if_e	mov	result1, #0
01fb4     06 03 82 51 |  if_ne	sub	arg02, local02
01fb8     04 02 46 50 |  if_ne	shr	arg02, #4
01fbc     01 EB 01 56 |  if_ne	mov	result1, arg02
01fc0     08 03 02 F6 | 	mov	arg02, local04
01fc4     06 02 06 F1 | 	add	arg02, #6
01fc8     01 EB 51 FC | 	wrword	result1, arg02
01fcc     06 11 0A F2 | 	cmp	local04, local02 wz
01fd0     A4 00 90 AD |  if_e	jmp	#LR__0305
01fd4     08 01 02 F6 | 	mov	arg01, local04
01fd8     00 13 EA FA | 	rdword	local05, arg01 wz
01fdc     00 EA 05 A6 |  if_e	mov	result1, #0
01fe0     04 12 66 50 |  if_ne	shl	local05, #4
01fe4     09 01 02 51 |  if_ne	add	arg01, local05
01fe8     00 EB 01 56 |  if_ne	mov	result1, arg01
01fec     05 EB 09 F2 | 	cmp	result1, local01 wz
01ff0     84 00 90 5D |  if_ne	jmp	#LR__0304
01ff4     08 15 E2 FA | 	rdword	local06, local04
01ff8     05 03 E2 FA | 	rdword	arg02, local01
01ffc     01 15 02 F1 | 	add	local06, arg02
02000     08 15 52 FC | 	wrword	local06, local04
02004     05 15 02 F6 | 	mov	local06, local01
02008     02 14 06 F1 | 	add	local06, #2
0200c     0A 01 58 FC | 	wrword	#0, local06
02010     05 01 02 F6 | 	mov	arg01, local01
02014     00 13 EA FA | 	rdword	local05, arg01 wz
02018     00 EA 05 A6 |  if_e	mov	result1, #0
0201c     04 12 66 50 |  if_ne	shl	local05, #4
02020     09 01 02 51 |  if_ne	add	arg01, local05
02024     00 EB 01 56 |  if_ne	mov	result1, arg01
02028     F5 14 02 F6 | 	mov	local06, result1
0202c     07 15 52 F2 | 	cmps	local06, local03 wc
02030     20 00 90 3D |  if_ae	jmp	#LR__0303
02034     08 03 0A F6 | 	mov	arg02, local04 wz
02038     00 EA 05 A6 |  if_e	mov	result1, #0
0203c     06 03 82 51 |  if_ne	sub	arg02, local02
02040     04 02 46 50 |  if_ne	shr	arg02, #4
02044     01 EB 01 56 |  if_ne	mov	result1, arg02
02048     0A 03 02 F6 | 	mov	arg02, local06
0204c     04 02 06 F1 | 	add	arg02, #4
02050     01 EB 51 FC | 	wrword	result1, arg02
02054                 | LR__0303
02054     05 03 02 F6 | 	mov	arg02, local01
02058     06 02 06 F1 | 	add	arg02, #6
0205c     08 ED 01 F6 | 	mov	result2, local04
02060     01 03 E2 FA | 	rdword	arg02, arg02
02064     06 EC 05 F1 | 	add	result2, #6
02068     F6 02 52 FC | 	wrword	arg02, result2
0206c     06 0A 06 F1 | 	add	local01, #6
02070     05 01 58 FC | 	wrword	#0, local01
02074     08 0B 02 F6 | 	mov	local01, local04
02078                 | LR__0304
02078                 | LR__0305
02078     05 01 02 F6 | 	mov	arg01, local01
0207c     00 13 EA FA | 	rdword	local05, arg01 wz
02080     00 EA 05 A6 |  if_e	mov	result1, #0
02084     04 12 66 50 |  if_ne	shl	local05, #4
02088     09 01 02 51 |  if_ne	add	arg01, local05
0208c     00 EB 01 56 |  if_ne	mov	result1, arg01
02090     F5 02 0A F6 | 	mov	arg02, result1 wz
02094     B8 00 90 AD |  if_e	jmp	#LR__0307
02098     07 03 52 F2 | 	cmps	arg02, local03 wc
0209c     B0 00 90 3D |  if_ae	jmp	#LR__0307
020a0     01 01 02 F6 | 	mov	arg01, arg02
020a4     00 EA 05 F6 | 	mov	result1, #0
020a8     02 00 06 F1 | 	add	arg01, #2
020ac     00 01 E2 FA | 	rdword	arg01, arg01
020b0     36 00 00 FF 
020b4     8F 00 0E F2 | 	cmp	arg01, ##27791 wz
020b8     01 EA 65 A6 |  if_e	neg	result1, #1
020bc     00 EA 0D F2 | 	cmp	result1, #0 wz
020c0     8C 00 90 AD |  if_e	jmp	#LR__0307
020c4     05 11 02 F6 | 	mov	local04, local01
020c8     08 15 E2 FA | 	rdword	local06, local04
020cc     01 01 02 F6 | 	mov	arg01, arg02
020d0     00 0B E2 FA | 	rdword	local01, arg01
020d4     05 15 02 F1 | 	add	local06, local01
020d8     08 15 52 FC | 	wrword	local06, local04
020dc     00 15 02 F6 | 	mov	local06, arg01
020e0     06 14 06 F1 | 	add	local06, #6
020e4     08 0B 02 F6 | 	mov	local01, local04
020e8     0A 15 E2 FA | 	rdword	local06, local06
020ec     06 0A 06 F1 | 	add	local01, #6
020f0     05 15 52 FC | 	wrword	local06, local01
020f4     00 15 02 F6 | 	mov	local06, arg01
020f8     02 14 06 F1 | 	add	local06, #2
020fc     0A 55 59 FC | 	wrword	#170, local06
02100     00 15 02 F6 | 	mov	local06, arg01
02104     06 14 06 F1 | 	add	local06, #6
02108     0A 01 58 FC | 	wrword	#0, local06
0210c     00 13 EA FA | 	rdword	local05, arg01 wz
02110     00 EA 05 A6 |  if_e	mov	result1, #0
02114     04 12 66 50 |  if_ne	shl	local05, #4
02118     09 01 02 51 |  if_ne	add	arg01, local05
0211c     00 EB 01 56 |  if_ne	mov	result1, arg01
02120     F5 14 0A F6 | 	mov	local06, result1 wz
02124     28 00 90 AD |  if_e	jmp	#LR__0306
02128     07 15 52 F2 | 	cmps	local06, local03 wc
0212c     20 00 90 3D |  if_ae	jmp	#LR__0306
02130     08 03 0A F6 | 	mov	arg02, local04 wz
02134     00 EA 05 A6 |  if_e	mov	result1, #0
02138     06 03 82 51 |  if_ne	sub	arg02, local02
0213c     04 02 46 50 |  if_ne	shr	arg02, #4
02140     01 EB 01 56 |  if_ne	mov	result1, arg02
02144     0A 11 02 F6 | 	mov	local04, local06
02148     04 10 06 F1 | 	add	local04, #4
0214c     08 EB 51 FC | 	wrword	result1, local04
02150                 | LR__0306
02150                 | LR__0307
02150     0A EB 01 F6 | 	mov	result1, local06
02154     A7 F0 03 F6 | 	mov	ptra, fp
02158     B2 00 A0 FD | 	call	#popregs_
0215c                 | __system___gc_dofree_ret
0215c     2D 00 64 FD | 	ret
02160                 | 
02160                 | __system___gc_docollect
02160     05 4A 05 F6 | 	mov	COUNT_, #5
02164     A8 00 A0 FD | 	call	#pushregs_
02168     B8 F9 BF FD | 	call	#__system___gc_ptrs
0216c     F6 0A 02 F6 | 	mov	local01, result2
02170     F5 0C 02 F6 | 	mov	local02, result1
02174     06 01 02 F6 | 	mov	arg01, local02
02178     00 0F EA FA | 	rdword	local03, arg01 wz
0217c     00 EA 05 A6 |  if_e	mov	result1, #0
02180     04 0E 66 50 |  if_ne	shl	local03, #4
02184     07 01 02 51 |  if_ne	add	arg01, local03
02188     00 EB 01 56 |  if_ne	mov	result1, arg01
0218c     F5 10 0A F6 | 	mov	local04, result1 wz
02190     00 EA 05 F6 | 	mov	result1, #0
02194     01 EA 61 FD | 	cogid	result1
02198     F5 12 02 F6 | 	mov	local05, result1
0219c     48 00 90 AD |  if_e	jmp	#LR__0312
021a0     97 22 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
021a4                 | LR__0310
021a4     05 11 52 F2 | 	cmps	local04, local01 wc
021a8     3C 00 90 3D |  if_ae	jmp	#LR__0312
021ac     08 03 02 F6 | 	mov	arg02, local04
021b0     02 02 06 F1 | 	add	arg02, #2
021b4     01 03 E2 FA | 	rdword	arg02, arg02
021b8     20 02 26 F5 | 	andn	arg02, #32
021bc     08 01 02 F6 | 	mov	arg01, local04
021c0     02 00 06 F1 | 	add	arg01, #2
021c4     00 03 52 FC | 	wrword	arg02, arg01
021c8     08 01 02 F6 | 	mov	arg01, local04
021cc     00 0F EA FA | 	rdword	local03, arg01 wz
021d0     00 EA 05 A6 |  if_e	mov	result1, #0
021d4     04 0E 66 50 |  if_ne	shl	local03, #4
021d8     07 01 02 51 |  if_ne	add	arg01, local03
021dc     00 EB 01 56 |  if_ne	mov	result1, arg01
021e0     F5 10 0A F6 | 	mov	local04, result1 wz
021e4     BC FF 9F 5D |  if_ne	jmp	#LR__0310
021e8                 | LR__0311
021e8                 | LR__0312
021e8     00 0E 06 F6 | 	mov	local03, #0
021ec     00 00 06 F6 | 	mov	arg01, #0
021f0     A0 EB BF FD | 	call	#__system____topofstack
021f4     F5 02 02 F6 | 	mov	arg02, result1
021f8     07 01 02 F6 | 	mov	arg01, local03
021fc     90 00 B0 FD | 	call	#__system___gc_markhub
02200     1C 01 B0 FD | 	call	#__system___gc_markcog
02204     06 01 02 F6 | 	mov	arg01, local02
02208     00 0F EA FA | 	rdword	local03, arg01 wz
0220c     00 EA 05 A6 |  if_e	mov	result1, #0
02210     04 0E 66 50 |  if_ne	shl	local03, #4
02214     07 01 02 51 |  if_ne	add	arg01, local03
02218     00 EB 01 56 |  if_ne	mov	result1, arg01
0221c     F5 0C 0A F6 | 	mov	local02, result1 wz
02220     60 00 90 AD |  if_e	jmp	#LR__0316
02224                 | LR__0313
02224     06 11 02 F6 | 	mov	local04, local02
02228     08 01 02 F6 | 	mov	arg01, local04
0222c     00 0F EA FA | 	rdword	local03, arg01 wz
02230     00 EA 05 A6 |  if_e	mov	result1, #0
02234     04 0E 66 50 |  if_ne	shl	local03, #4
02238     07 01 02 51 |  if_ne	add	arg01, local03
0223c     00 EB 01 56 |  if_ne	mov	result1, arg01
02240     F5 0C 02 F6 | 	mov	local02, result1
02244     08 03 02 F6 | 	mov	arg02, local04
02248     02 02 06 F1 | 	add	arg02, #2
0224c     01 03 E2 FA | 	rdword	arg02, arg02
02250     20 02 CE F7 | 	test	arg02, #32 wz
02254     10 02 CE A7 |  if_e	test	arg02, #16 wz
02258     1C 00 90 5D |  if_ne	jmp	#LR__0315
0225c     01 03 42 F8 | 	getnib	arg02, arg02, #0
02260     09 03 0A F2 | 	cmp	arg02, local05 wz
02264     0E 02 0E 52 |  if_ne	cmp	arg02, #14 wz
02268     0C 00 90 5D |  if_ne	jmp	#LR__0314
0226c     08 01 02 F6 | 	mov	arg01, local04
02270     84 FC BF FD | 	call	#__system___gc_dofree
02274     F5 0C 02 F6 | 	mov	local02, result1
02278                 | LR__0314
02278                 | LR__0315
02278     00 0C 0E F2 | 	cmp	local02, #0 wz
0227c     05 0D 52 52 |  if_ne	cmps	local02, local01 wc
02280     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__0313
02284                 | LR__0316
02284     A7 F0 03 F6 | 	mov	ptra, fp
02288     B2 00 A0 FD | 	call	#popregs_
0228c                 | __system___gc_docollect_ret
0228c     2D 00 64 FD | 	ret
02290                 | 
02290                 | __system___gc_markhub
02290     04 4A 05 F6 | 	mov	COUNT_, #4
02294     A8 00 A0 FD | 	call	#pushregs_
02298     00 0B 02 F6 | 	mov	local01, arg01
0229c     01 0D 02 F6 | 	mov	local02, arg02
022a0     80 F8 BF FD | 	call	#__system___gc_ptrs
022a4     F5 0E 02 F6 | 	mov	local03, result1
022a8     F6 10 02 F6 | 	mov	local04, result2
022ac                 | LR__0320
022ac     06 0B 52 F2 | 	cmps	local01, local02 wc
022b0     60 00 90 3D |  if_ae	jmp	#LR__0321
022b4     05 05 02 FB | 	rdlong	arg03, local01
022b8     04 0A 06 F1 | 	add	local01, #4
022bc     08 03 02 F6 | 	mov	arg02, local04
022c0     07 01 02 F6 | 	mov	arg01, local03
022c4     8C FB BF FD | 	call	#__system___gc_isvalidptr
022c8     F5 04 0A F6 | 	mov	arg03, result1 wz
022cc     DC FF 9F AD |  if_e	jmp	#LR__0320
022d0     02 01 02 F6 | 	mov	arg01, arg03
022d4     00 EA 05 F6 | 	mov	result1, #0
022d8     02 00 06 F1 | 	add	arg01, #2
022dc     00 01 E2 FA | 	rdword	arg01, arg01
022e0     36 00 00 FF 
022e4     8F 00 0E F2 | 	cmp	arg01, ##27791 wz
022e8     01 EA 65 A6 |  if_e	neg	result1, #1
022ec     00 EA 0D F2 | 	cmp	result1, #0 wz
022f0     B8 FF 9F 5D |  if_ne	jmp	#LR__0320
022f4     02 ED 01 F6 | 	mov	result2, arg03
022f8     02 EC 05 F1 | 	add	result2, #2
022fc     F6 EC E1 FA | 	rdword	result2, result2
02300     0F EC 25 F5 | 	andn	result2, #15
02304     2E EC 45 F5 | 	or	result2, #46
02308     02 04 06 F1 | 	add	arg03, #2
0230c     02 ED 51 FC | 	wrword	result2, arg03
02310     98 FF 9F FD | 	jmp	#LR__0320
02314                 | LR__0321
02314     A7 F0 03 F6 | 	mov	ptra, fp
02318     B2 00 A0 FD | 	call	#popregs_
0231c                 | __system___gc_markhub_ret
0231c     2D 00 64 FD | 	ret
02320                 | 
02320                 | __system___gc_markcog
02320     04 4A 05 F6 | 	mov	COUNT_, #4
02324     A8 00 A0 FD | 	call	#pushregs_
02328     F8 F7 BF FD | 	call	#__system___gc_ptrs
0232c     F5 0A 02 F6 | 	mov	local01, result1
02330     F6 0C 02 F6 | 	mov	local02, result2
02334     EF 0F 06 F6 | 	mov	local03, #495
02338                 | LR__0330
02338                 | 	'.live	local03
02338     00 0E 96 F9 | 	alts	local03, #0
0233c     07 11 02 F6 | 	mov	local04, local03
02340     05 01 02 F6 | 	mov	arg01, local01
02344     06 03 02 F6 | 	mov	arg02, local02
02348     08 05 02 F6 | 	mov	arg03, local04
0234c     04 FB BF FD | 	call	#__system___gc_isvalidptr
02350     00 EA 0D F2 | 	cmp	result1, #0 wz
02354     18 00 90 AD |  if_e	jmp	#LR__0331
02358     F5 10 02 F6 | 	mov	local04, result1
0235c     02 10 06 F1 | 	add	local04, #2
02360     08 11 E2 FA | 	rdword	local04, local04
02364     20 10 46 F5 | 	or	local04, #32
02368     02 EA 05 F1 | 	add	result1, #2
0236c     F5 10 52 FC | 	wrword	local04, result1
02370                 | LR__0331
02370     01 0E 86 F1 | 	sub	local03, #1
02374     00 0E 56 F2 | 	cmps	local03, #0 wc
02378     BC FF 9F 3D |  if_ae	jmp	#LR__0330
0237c     A7 F0 03 F6 | 	mov	ptra, fp
02380     B2 00 A0 FD | 	call	#popregs_
02384                 | __system___gc_markcog_ret
02384     2D 00 64 FD | 	ret
02388                 | 
02388                 | __system___openraw
02388     15 4A 05 F6 | 	mov	COUNT_, #21
0238c     A8 00 A0 FD | 	call	#pushregs_
02390     00 0B 02 F6 | 	mov	local01, arg01
02394     01 0D 02 F6 | 	mov	local02, arg02
02398     02 0F 02 F6 | 	mov	local03, arg03
0239c     03 11 02 F6 | 	mov	local04, arg04
023a0     04 12 06 F6 | 	mov	local05, #4
023a4     05 15 02 F6 | 	mov	local06, local01
023a8     00 16 06 F6 | 	mov	local07, #0
023ac     84 E5 05 F1 | 	add	ptr___system__dat__, #388
023b0     F2 18 02 F6 | 	mov	local08, ptr___system__dat__
023b4     0C 01 02 F6 | 	mov	arg01, local08
023b8     06 03 02 F6 | 	mov	arg02, local02
023bc     00 04 06 F6 | 	mov	arg03, #0
023c0     84 E5 85 F1 | 	sub	ptr___system__dat__, #388
023c4     7C EF BF FD | 	call	#__system____getvfsforfile
023c8     F5 1A 0A F6 | 	mov	local09, result1 wz
023cc     10 00 90 AD |  if_e	jmp	#LR__0340
023d0     20 1A 06 F1 | 	add	local09, #32
023d4     0D EB 09 FB | 	rdlong	result1, local09 wz
023d8     20 1A 86 F1 | 	sub	local09, #32
023dc     14 00 90 5D |  if_ne	jmp	#LR__0341
023e0                 | LR__0340
023e0     20 E4 05 F1 | 	add	ptr___system__dat__, #32
023e4     F2 20 68 FC | 	wrlong	#16, ptr___system__dat__
023e8     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
023ec     01 EA 65 F6 | 	neg	result1, #1
023f0     8C 02 90 FD | 	jmp	#LR__0354
023f4                 | LR__0341
023f4     0A 01 02 F6 | 	mov	arg01, local06
023f8     00 02 06 F6 | 	mov	arg02, #0
023fc     34 04 06 F6 | 	mov	arg03, #52
02400     00 1D 02 F6 | 	mov	local10, arg01
02404     98 00 A0 FD | 	call	#\builtin_bytefill_
02408     20 1A 06 F1 | 	add	local09, #32
0240c     0D 1F 02 FB | 	rdlong	local11, local09
02410     0F 21 02 F6 | 	mov	local12, local11
02414     0F 23 02 F6 | 	mov	local13, local11
02418     20 1A 86 F1 | 	sub	local09, #32
0241c     11 25 02 F6 | 	mov	local14, local13
02420     13 20 46 F7 | 	zerox	local12, #19
02424     14 24 46 F0 | 	shr	local14, #20
02428     02 24 66 F0 | 	shl	local14, #2
0242c     ED 24 02 F1 | 	add	local14, __methods__
02430     12 25 02 FB | 	rdlong	local14, local14
02434     0A 27 02 F6 | 	mov	local15, local06
02438     0C 29 02 F6 | 	mov	local16, local08
0243c     07 2B 02 F6 | 	mov	local17, local03
02440     13 01 02 F6 | 	mov	arg01, local15
02444     14 03 02 F6 | 	mov	arg02, local16
02448     15 05 02 F6 | 	mov	arg03, local17
0244c     F1 2C 02 F6 | 	mov	local18, objptr
02450     10 E3 01 F6 | 	mov	objptr, local12
02454     2D 24 62 FD | 	call	local14
02458     16 E3 01 F6 | 	mov	objptr, local18
0245c     F5 2E 0A F6 | 	mov	local19, result1 wz
02460     04 0E CE 57 |  if_ne	test	local03, #4 wz
02464     58 00 90 AD |  if_e	jmp	#LR__0342
02468     24 1A 06 F1 | 	add	local09, #36
0246c     0D 1F 02 FB | 	rdlong	local11, local09
02470     0F 21 02 F6 | 	mov	local12, local11
02474     0F 23 02 F6 | 	mov	local13, local11
02478     24 1A 86 F1 | 	sub	local09, #36
0247c     11 25 02 F6 | 	mov	local14, local13
02480     13 20 46 F7 | 	zerox	local12, #19
02484     14 24 46 F0 | 	shr	local14, #20
02488     02 24 66 F0 | 	shl	local14, #2
0248c     ED 24 02 F1 | 	add	local14, __methods__
02490     12 25 02 FB | 	rdlong	local14, local14
02494     0A 27 02 F6 | 	mov	local15, local06
02498     0C 29 02 F6 | 	mov	local16, local08
0249c     08 2B 02 F6 | 	mov	local17, local04
024a0     13 01 02 F6 | 	mov	arg01, local15
024a4     14 03 02 F6 | 	mov	arg02, local16
024a8     15 05 02 F6 | 	mov	arg03, local17
024ac     F1 2C 02 F6 | 	mov	local18, objptr
024b0     10 E3 01 F6 | 	mov	objptr, local12
024b4     2D 24 62 FD | 	call	local14
024b8     16 E3 01 F6 | 	mov	objptr, local18
024bc     F5 2E 02 F6 | 	mov	local19, result1
024c0                 | LR__0342
024c0     00 2E 0E F2 | 	cmp	local19, #0 wz
024c4     8C 01 90 5D |  if_ne	jmp	#LR__0352
024c8     07 31 02 F6 | 	mov	local20, local03
024cc     03 30 0E F5 | 	and	local20, #3 wz
024d0     02 12 46 55 |  if_ne	or	local05, #2
024d4     01 30 0E F2 | 	cmp	local20, #1 wz
024d8     01 12 46 55 |  if_ne	or	local05, #1
024dc     20 0E CE F7 | 	test	local03, #32 wz
024e0     C0 12 46 55 |  if_ne	or	local05, #192
024e4     08 14 06 F1 | 	add	local06, #8
024e8     0A 13 62 FC | 	wrlong	local05, local06
024ec     0C 14 06 F1 | 	add	local06, #12
024f0     0A 33 0A FB | 	rdlong	local21, local06 wz
024f4     14 14 86 F1 | 	sub	local06, #20
024f8     18 00 90 5D |  if_ne	jmp	#LR__0343
024fc     04 1A 06 F1 | 	add	local09, #4
02500     0D 33 02 FB | 	rdlong	local21, local09
02504     04 1A 86 F1 | 	sub	local09, #4
02508     14 14 06 F1 | 	add	local06, #20
0250c     0A 33 62 FC | 	wrlong	local21, local06
02510     14 14 86 F1 | 	sub	local06, #20
02514                 | LR__0343
02514     18 14 06 F1 | 	add	local06, #24
02518     0A 33 0A FB | 	rdlong	local21, local06 wz
0251c     18 14 86 F1 | 	sub	local06, #24
02520     18 00 90 5D |  if_ne	jmp	#LR__0344
02524     08 1A 06 F1 | 	add	local09, #8
02528     0D 33 02 FB | 	rdlong	local21, local09
0252c     08 1A 86 F1 | 	sub	local09, #8
02530     18 14 06 F1 | 	add	local06, #24
02534     0A 33 62 FC | 	wrlong	local21, local06
02538     18 14 86 F1 | 	sub	local06, #24
0253c                 | LR__0344
0253c     24 14 06 F1 | 	add	local06, #36
02540     0A 33 0A FB | 	rdlong	local21, local06 wz
02544     24 14 86 F1 | 	sub	local06, #36
02548     0D 33 02 AB |  if_e	rdlong	local21, local09
0254c     24 14 06 A1 |  if_e	add	local06, #36
02550     0A 33 62 AC |  if_e	wrlong	local21, local06
02554     24 14 86 A1 |  if_e	sub	local06, #36
02558     28 14 06 F1 | 	add	local06, #40
0255c     0A 33 0A FB | 	rdlong	local21, local06 wz
02560     28 14 86 F1 | 	sub	local06, #40
02564     18 00 90 5D |  if_ne	jmp	#LR__0345
02568     10 1A 06 F1 | 	add	local09, #16
0256c     0D 33 02 FB | 	rdlong	local21, local09
02570     10 1A 86 F1 | 	sub	local09, #16
02574     28 14 06 F1 | 	add	local06, #40
02578     0A 33 62 FC | 	wrlong	local21, local06
0257c     28 14 86 F1 | 	sub	local06, #40
02580                 | LR__0345
02580     30 14 06 F1 | 	add	local06, #48
02584     0A 33 0A FB | 	rdlong	local21, local06 wz
02588     30 14 86 F1 | 	sub	local06, #48
0258c     18 00 90 5D |  if_ne	jmp	#LR__0346
02590     0C 1A 06 F1 | 	add	local09, #12
02594     0D 33 02 FB | 	rdlong	local21, local09
02598     0C 1A 86 F1 | 	sub	local09, #12
0259c     30 14 06 F1 | 	add	local06, #48
025a0     0A 33 62 FC | 	wrlong	local21, local06
025a4     30 14 86 F1 | 	sub	local06, #48
025a8                 | LR__0346
025a8     1C 14 06 F1 | 	add	local06, #28
025ac     0A 33 0A FB | 	rdlong	local21, local06 wz
025b0     1C 14 86 F1 | 	sub	local06, #28
025b4     1C 00 90 5D |  if_ne	jmp	#LR__0347
025b8     01 16 06 F6 | 	mov	local07, #1
025bc     F1 00 02 F6 | 	mov	arg01, objptr
025c0     00 48 00 FF 
025c4     00 00 46 F5 | 	or	arg01, ##9437184
025c8     1C 14 06 F1 | 	add	local06, #28
025cc     0A 01 62 FC | 	wrlong	arg01, local06
025d0     1C 14 86 F1 | 	sub	local06, #28
025d4                 | LR__0347
025d4     20 14 06 F1 | 	add	local06, #32
025d8     0A 33 0A FB | 	rdlong	local21, local06 wz
025dc     20 14 86 F1 | 	sub	local06, #32
025e0     1C 00 90 5D |  if_ne	jmp	#LR__0348
025e4     01 16 06 F6 | 	mov	local07, #1
025e8     F1 00 02 F6 | 	mov	arg01, objptr
025ec     00 50 00 FF 
025f0     00 00 46 F5 | 	or	arg01, ##10485760
025f4     20 14 06 F1 | 	add	local06, #32
025f8     0A 01 62 FC | 	wrlong	arg01, local06
025fc     20 14 86 F1 | 	sub	local06, #32
02600                 | LR__0348
02600     2C 14 06 F1 | 	add	local06, #44
02604     0A 33 0A FB | 	rdlong	local21, local06 wz
02608     2C 14 86 F1 | 	sub	local06, #44
0260c     44 00 90 5D |  if_ne	jmp	#LR__0351
02610     14 1A 06 F1 | 	add	local09, #20
02614     0D 33 0A FB | 	rdlong	local21, local09 wz
02618     14 1A 86 F1 | 	sub	local09, #20
0261c     18 00 90 AD |  if_e	jmp	#LR__0349
02620     14 1A 06 F1 | 	add	local09, #20
02624     0D 33 02 FB | 	rdlong	local21, local09
02628     2C 14 06 F1 | 	add	local06, #44
0262c     0A 33 62 FC | 	wrlong	local21, local06
02630     2C 14 86 F1 | 	sub	local06, #44
02634     1C 00 90 FD | 	jmp	#LR__0350
02638                 | LR__0349
02638     01 16 06 F6 | 	mov	local07, #1
0263c     F1 00 02 F6 | 	mov	arg01, objptr
02640     00 58 00 FF 
02644     00 00 46 F5 | 	or	arg01, ##11534336
02648     2C 14 06 F1 | 	add	local06, #44
0264c     0A 01 62 FC | 	wrlong	arg01, local06
02650     2C 14 86 F1 | 	sub	local06, #44
02654                 | LR__0350
02654                 | LR__0351
02654                 | LR__0352
02654     00 16 0E F2 | 	cmp	local07, #0 wz
02658     0A 01 02 56 |  if_ne	mov	arg01, local06
0265c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
02660     00 2E 0E F2 | 	cmp	local19, #0 wz
02664     00 00 06 A6 |  if_e	mov	arg01, #0
02668     10 00 90 5D |  if_ne	jmp	#LR__0353
0266c     00 00 4E F2 | 	cmps	arg01, #0 wz
02670     20 E4 05 F1 | 	add	ptr___system__dat__, #32
02674     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
02678     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
0267c                 | LR__0353
0267c     17 EB 01 F6 | 	mov	result1, local19
02680                 | LR__0354
02680     A7 F0 03 F6 | 	mov	ptra, fp
02684     B2 00 A0 FD | 	call	#popregs_
02688                 | __system___openraw_ret
02688     2D 00 64 FD | 	ret
0268c                 | 
0268c                 | __system___closeraw
0268c     05 4A 05 F6 | 	mov	COUNT_, #5
02690     A8 00 A0 FD | 	call	#pushregs_
02694     00 0B 02 F6 | 	mov	local01, arg01
02698     00 0C 06 F6 | 	mov	local02, #0
0269c     08 0A 06 F1 | 	add	local01, #8
026a0     05 EB 09 FB | 	rdlong	result1, local01 wz
026a4     08 0A 86 F1 | 	sub	local01, #8
026a8     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
026ac     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
026b0     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
026b4     01 EA 65 A6 |  if_e	neg	result1, #1
026b8     A8 00 90 AD |  if_e	jmp	#LR__0362
026bc     2C 0A 06 F1 | 	add	local01, #44
026c0     05 EB 09 FB | 	rdlong	result1, local01 wz
026c4     2C 0A 86 F1 | 	sub	local01, #44
026c8     38 00 90 AD |  if_e	jmp	#LR__0360
026cc     2C 0A 06 F1 | 	add	local01, #44
026d0     05 0F 02 FB | 	rdlong	local03, local01
026d4     07 11 02 F6 | 	mov	local04, local03
026d8     2C 0A 86 F1 | 	sub	local01, #44
026dc     13 10 46 F7 | 	zerox	local04, #19
026e0     14 0E 46 F0 | 	shr	local03, #20
026e4     02 0E 66 F0 | 	shl	local03, #2
026e8     ED 0E 02 F1 | 	add	local03, __methods__
026ec     07 0F 02 FB | 	rdlong	local03, local03
026f0     05 01 02 F6 | 	mov	arg01, local01
026f4     F1 12 02 F6 | 	mov	local05, objptr
026f8     08 E3 01 F6 | 	mov	objptr, local04
026fc     2D 0E 62 FD | 	call	local03
02700     09 E3 01 F6 | 	mov	objptr, local05
02704                 | LR__0360
02704     24 0A 06 F1 | 	add	local01, #36
02708     05 13 0A FB | 	rdlong	local05, local01 wz
0270c     24 0A 86 F1 | 	sub	local01, #36
02710     3C 00 90 AD |  if_e	jmp	#LR__0361
02714     24 0A 06 F1 | 	add	local01, #36
02718     05 0F 02 FB | 	rdlong	local03, local01
0271c     07 11 02 F6 | 	mov	local04, local03
02720     24 0A 86 F1 | 	sub	local01, #36
02724     13 10 46 F7 | 	zerox	local04, #19
02728     14 0E 46 F0 | 	shr	local03, #20
0272c     02 0E 66 F0 | 	shl	local03, #2
02730     ED 0E 02 F1 | 	add	local03, __methods__
02734     07 0F 02 FB | 	rdlong	local03, local03
02738     05 01 02 F6 | 	mov	arg01, local01
0273c     F1 12 02 F6 | 	mov	local05, objptr
02740     08 E3 01 F6 | 	mov	objptr, local04
02744     2D 0E 62 FD | 	call	local03
02748     09 E3 01 F6 | 	mov	objptr, local05
0274c     F5 0C 02 F6 | 	mov	local02, result1
02750                 | LR__0361
02750     05 01 02 F6 | 	mov	arg01, local01
02754     00 02 06 F6 | 	mov	arg02, #0
02758     34 04 06 F6 | 	mov	arg03, #52
0275c     98 00 A0 FD | 	call	#\builtin_bytefill_
02760     06 EB 01 F6 | 	mov	result1, local02
02764                 | LR__0362
02764     A7 F0 03 F6 | 	mov	ptra, fp
02768     B2 00 A0 FD | 	call	#popregs_
0276c                 | __system___closeraw_ret
0276c     2D 00 64 FD | 	ret
02770                 | 
02770                 | __system___vfs_open_sdcardx
02770     0B 4A 05 F6 | 	mov	COUNT_, #11
02774     A8 00 A0 FD | 	call	#pushregs_
02778     00 0F 02 F6 | 	mov	local03, arg01
0277c     01 11 02 F6 | 	mov	local04, arg02
02780     02 13 02 F6 | 	mov	local05, arg03
02784     03 15 02 F6 | 	mov	local06, arg04
02788     01 00 00 FF 
0278c     24 00 06 F6 | 	mov	arg01, ##548
02790     E0 F5 BF FD | 	call	#__system___gc_alloc_managed
02794     F5 16 02 F6 | 	mov	local07, result1
02798     01 00 00 FF 
0279c     34 00 06 F6 | 	mov	arg01, ##564
027a0     D0 F5 BF FD | 	call	#__system___gc_alloc_managed
027a4     F5 18 02 F6 | 	mov	local08, result1
027a8     07 07 02 F6 | 	mov	arg04, local03
027ac     1F 06 C6 F0 | 	sar	arg04, #31
027b0     07 05 02 F6 | 	mov	arg03, local03
027b4     01 00 06 F6 | 	mov	arg01, #1
027b8     00 02 06 F6 | 	mov	arg02, #0
027bc     B0 F2 BF FD | 	call	#__system___int64_shl
027c0     F5 0A 02 F6 | 	mov	local01, result1
027c4     F6 1A 02 F6 | 	mov	local09, result2
027c8     08 07 02 F6 | 	mov	arg04, local04
027cc     1F 06 C6 F0 | 	sar	arg04, #31
027d0     08 05 02 F6 | 	mov	arg03, local04
027d4     01 00 06 F6 | 	mov	arg01, #1
027d8     00 02 06 F6 | 	mov	arg02, #0
027dc     90 F2 BF FD | 	call	#__system___int64_shl
027e0     F5 0A 42 F5 | 	or	local01, result1
027e4     F6 1A 42 F5 | 	or	local09, result2
027e8     09 07 02 F6 | 	mov	arg04, local05
027ec     1F 06 C6 F0 | 	sar	arg04, #31
027f0     09 05 02 F6 | 	mov	arg03, local05
027f4     01 00 06 F6 | 	mov	arg01, #1
027f8     00 02 06 F6 | 	mov	arg02, #0
027fc     70 F2 BF FD | 	call	#__system___int64_shl
02800     F5 0A 42 F5 | 	or	local01, result1
02804     F6 1A 42 F5 | 	or	local09, result2
02808     0A 07 02 F6 | 	mov	arg04, local06
0280c     1F 06 C6 F0 | 	sar	arg04, #31
02810     0A 05 02 F6 | 	mov	arg03, local06
02814     01 00 06 F6 | 	mov	arg01, #1
02818     00 02 06 F6 | 	mov	arg02, #0
0281c     50 F2 BF FD | 	call	#__system___int64_shl
02820     0D 03 02 F6 | 	mov	arg02, local09
02824     F5 0A 42 F5 | 	or	local01, result1
02828     01 ED 41 F5 | 	or	result2, arg02
0282c     F6 0C 02 F6 | 	mov	local02, result2
02830     05 01 02 F6 | 	mov	arg01, local01
02834     06 03 02 F6 | 	mov	arg02, local02
02838     6C F2 BF FD | 	call	#__system___usepins
0283c     00 EA 0D F2 | 	cmp	result1, #0 wz
02840     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
02844     F2 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
02848     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0284c     00 EA 05 A6 |  if_e	mov	result1, #0
02850     B4 00 90 AD |  if_e	jmp	#LR__0372
02854     05 1D 02 F6 | 	mov	local10, local01
02858     06 1B 02 F6 | 	mov	local09, local02
0285c     01 00 00 FF 
02860     08 16 06 F1 | 	add	local07, ##520
02864     0B 1D 62 FC | 	wrlong	local10, local07
02868     04 16 06 F1 | 	add	local07, #4
0286c     0B 1B 62 FC | 	wrlong	local09, local07
02870     01 00 00 FF 
02874     0C 16 86 F1 | 	sub	local07, ##524
02878     0A 09 02 F6 | 	mov	arg05, local06
0287c     00 00 06 F6 | 	mov	arg01, #0
02880     07 03 02 F6 | 	mov	arg02, local03
02884     08 05 02 F6 | 	mov	arg03, local04
02888     09 07 02 F6 | 	mov	arg04, local05
0288c     F1 1C 02 F6 | 	mov	local10, objptr
02890     0B E3 01 F6 | 	mov	objptr, local07
02894     48 1A B0 FD | 	call	#_fatfs_cc_disk_setpins
02898     0E E3 01 F6 | 	mov	objptr, local10
0289c     F5 1E 0A F6 | 	mov	local11, result1 wz
028a0     24 00 90 5D |  if_ne	jmp	#LR__0370
028a4     62 00 00 FF 
028a8     B4 03 06 F6 | 	mov	arg02, ##@LR__1624
028ac     0C 01 02 F6 | 	mov	arg01, local08
028b0     00 04 06 F6 | 	mov	arg03, #0
028b4     F1 1E 02 F6 | 	mov	local11, objptr
028b8     0B E3 01 F6 | 	mov	objptr, local07
028bc     78 51 B0 FD | 	call	#_fatfs_cc_f_mount
028c0     0F E3 01 F6 | 	mov	objptr, local11
028c4     F5 1E 02 F6 | 	mov	local11, result1
028c8                 | LR__0370
028c8     00 1E 0E F2 | 	cmp	local11, #0 wz
028cc     24 00 90 AD |  if_e	jmp	#LR__0371
028d0     05 01 02 F6 | 	mov	arg01, local01
028d4     06 03 02 F6 | 	mov	arg02, local02
028d8     20 F2 BF FD | 	call	#__system___freepins
028dc     0F 01 6A F6 | 	neg	arg01, local11 wz
028e0     20 E4 05 F1 | 	add	ptr___system__dat__, #32
028e4     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
028e8     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
028ec     00 EA 05 F6 | 	mov	result1, #0
028f0     14 00 90 FD | 	jmp	#LR__0372
028f4                 | LR__0371
028f4     0B 01 02 F6 | 	mov	arg01, local07
028f8     F1 1E 02 F6 | 	mov	local11, objptr
028fc     0B E3 01 F6 | 	mov	objptr, local07
02900     14 8E B0 FD | 	call	#_fatfs_cc_get_vfs
02904     0F E3 01 F6 | 	mov	objptr, local11
02908                 | LR__0372
02908     A7 F0 03 F6 | 	mov	ptra, fp
0290c     B2 00 A0 FD | 	call	#popregs_
02910                 | __system___vfs_open_sdcardx_ret
02910     2D 00 64 FD | 	ret
02914                 | 
02914                 | __system____default_getc
02914     03 4A 05 F6 | 	mov	COUNT_, #3
02918     A8 00 A0 FD | 	call	#pushregs_
0291c     00 0B 02 F6 | 	mov	local01, arg01
02920     05 0D 02 FB | 	rdlong	local02, local01
02924     08 0C 06 F1 | 	add	local02, #8
02928     06 0F 02 FB | 	rdlong	local03, local02
0292c     02 0E CE F7 | 	test	local03, #2 wz
02930     05 01 02 56 |  if_ne	mov	arg01, local01
02934     00 01 B0 5D |  if_ne	call	#__system____default_flush
02938     06 0F 02 FB | 	rdlong	local03, local02
0293c     01 0E 46 F5 | 	or	local03, #1
02940     06 0F 62 FC | 	wrlong	local03, local02
02944     08 0C 86 F1 | 	sub	local02, #8
02948     06 0F 0A FB | 	rdlong	local03, local02 wz
0294c     0C 00 90 5D |  if_ne	jmp	#LR__0380
02950     05 01 02 F6 | 	mov	arg01, local01
02954     98 0A B0 FD | 	call	#__system____default_filbuf
02958     F5 0E 02 F6 | 	mov	local03, result1
0295c                 | LR__0380
0295c     01 0E 56 F2 | 	cmps	local03, #1 wc
02960     01 EA 65 C6 |  if_b	neg	result1, #1
02964     1C 00 90 CD |  if_b	jmp	#LR__0381
02968     01 0E 86 F1 | 	sub	local03, #1
0296c     06 0F 62 FC | 	wrlong	local03, local02
02970     04 0C 06 F1 | 	add	local02, #4
02974     06 0F 02 FB | 	rdlong	local03, local02
02978     07 EB C1 FA | 	rdbyte	result1, local03
0297c     01 0E 06 F1 | 	add	local03, #1
02980     06 0F 62 FC | 	wrlong	local03, local02
02984                 | LR__0381
02984     A7 F0 03 F6 | 	mov	ptra, fp
02988     B2 00 A0 FD | 	call	#popregs_
0298c                 | __system____default_getc_ret
0298c     2D 00 64 FD | 	ret
02990                 | 
02990                 | __system____default_putc
02990     06 4A 05 F6 | 	mov	COUNT_, #6
02994     A8 00 A0 FD | 	call	#pushregs_
02998     00 0B 02 F6 | 	mov	local01, arg01
0299c     01 0D 02 F6 | 	mov	local02, arg02
029a0     06 0F 02 FB | 	rdlong	local03, local02
029a4     08 0E 06 F1 | 	add	local03, #8
029a8     07 EB 01 FB | 	rdlong	result1, local03
029ac     01 EA CD F7 | 	test	result1, #1 wz
029b0     06 01 02 56 |  if_ne	mov	arg01, local02
029b4     80 00 B0 5D |  if_ne	call	#__system____default_flush
029b8     07 11 02 FB | 	rdlong	local04, local03
029bc     02 10 46 F5 | 	or	local04, #2
029c0     07 11 62 FC | 	wrlong	local04, local03
029c4     08 0E 86 F1 | 	sub	local03, #8
029c8     07 13 02 FB | 	rdlong	local05, local03
029cc     10 0E 06 F1 | 	add	local03, #16
029d0     07 03 02 FB | 	rdlong	arg02, local03
029d4     10 0E 86 F1 | 	sub	local03, #16
029d8     09 EB 01 F6 | 	mov	result1, local05
029dc     01 EB 01 F1 | 	add	result1, arg02
029e0     F5 0A 42 FC | 	wrbyte	local01, result1
029e4     05 0B E2 F8 | 	getbyte	local01, local01, #0
029e8     01 12 06 F1 | 	add	local05, #1
029ec     07 13 62 FC | 	wrlong	local05, local03
029f0     06 0C 06 F1 | 	add	local02, #6
029f4     06 15 EA FA | 	rdword	local06, local02 wz
029f8     06 0C 86 F1 | 	sub	local02, #6
029fc     0C 0E 06 51 |  if_ne	add	local03, #12
02a00     07 11 02 5B |  if_ne	rdlong	local04, local03
02a04     08 13 0A 52 |  if_ne	cmp	local05, local04 wz
02a08     0C 00 90 AD |  if_e	jmp	#LR__0390
02a0c     0A 0A 0E F2 | 	cmp	local01, #10 wz
02a10     01 14 0E A2 |  if_e	cmp	local06, #1 wz
02a14     10 00 90 5D |  if_ne	jmp	#LR__0391
02a18                 | LR__0390
02a18     06 01 02 F6 | 	mov	arg01, local02
02a1c     18 00 B0 FD | 	call	#__system____default_flush
02a20     00 EA 0D F2 | 	cmp	result1, #0 wz
02a24     01 0A 66 56 |  if_ne	neg	local01, #1
02a28                 | LR__0391
02a28     05 EB 01 F6 | 	mov	result1, local01
02a2c     A7 F0 03 F6 | 	mov	ptra, fp
02a30     B2 00 A0 FD | 	call	#popregs_
02a34                 | __system____default_putc_ret
02a34     2D 00 64 FD | 	ret
02a38                 | 
02a38                 | __system____default_flush
02a38     06 4A 05 F6 | 	mov	COUNT_, #6
02a3c     A8 00 A0 FD | 	call	#pushregs_
02a40     00 0B 02 F6 | 	mov	local01, arg01
02a44     05 0D 02 FB | 	rdlong	local02, local01
02a48     06 0F 02 FB | 	rdlong	local03, local02
02a4c     08 0C 06 F1 | 	add	local02, #8
02a50     06 EB 01 FB | 	rdlong	result1, local02
02a54     08 0C 86 F1 | 	sub	local02, #8
02a58     02 EA CD F7 | 	test	result1, #2 wz
02a5c     D0 00 90 AD |  if_e	jmp	#LR__0402
02a60     01 0E 56 F2 | 	cmps	local03, #1 wc
02a64     20 01 90 CD |  if_b	jmp	#LR__0404
02a68     08 0A 06 F1 | 	add	local01, #8
02a6c     05 EB 01 FB | 	rdlong	result1, local01
02a70     08 0A 86 F1 | 	sub	local01, #8
02a74     40 EA CD F7 | 	test	result1, #64 wz
02a78     68 00 90 AD |  if_e	jmp	#LR__0401
02a7c     08 0A 06 F1 | 	add	local01, #8
02a80     05 05 02 FB | 	rdlong	arg03, local01
02a84     08 0A 86 F1 | 	sub	local01, #8
02a88     80 04 CE F7 | 	test	arg03, #128 wz
02a8c     54 00 90 AD |  if_e	jmp	#LR__0400
02a90     30 0A 06 F1 | 	add	local01, #48
02a94     05 11 02 FB | 	rdlong	local04, local01
02a98     08 13 02 F6 | 	mov	local05, local04
02a9c     30 0A 86 F1 | 	sub	local01, #48
02aa0     13 12 46 F7 | 	zerox	local05, #19
02aa4     14 10 46 F0 | 	shr	local04, #20
02aa8     02 10 66 F0 | 	shl	local04, #2
02aac     ED 10 02 F1 | 	add	local04, __methods__
02ab0     08 11 02 FB | 	rdlong	local04, local04
02ab4     05 01 02 F6 | 	mov	arg01, local01
02ab8     00 02 06 F6 | 	mov	arg02, #0
02abc     02 04 06 F6 | 	mov	arg03, #2
02ac0     F1 14 02 F6 | 	mov	local06, objptr
02ac4     09 E3 01 F6 | 	mov	objptr, local05
02ac8     2D 10 62 FD | 	call	local04
02acc     0A E3 01 F6 | 	mov	objptr, local06
02ad0     08 0A 06 F1 | 	add	local01, #8
02ad4     05 15 02 FB | 	rdlong	local06, local01
02ad8     80 14 26 F5 | 	andn	local06, #128
02adc     05 15 62 FC | 	wrlong	local06, local01
02ae0     08 0A 86 F1 | 	sub	local01, #8
02ae4                 | LR__0400
02ae4                 | LR__0401
02ae4     18 0A 06 F1 | 	add	local01, #24
02ae8     05 11 02 FB | 	rdlong	local04, local01
02aec     08 13 02 F6 | 	mov	local05, local04
02af0     18 0A 86 F1 | 	sub	local01, #24
02af4     13 12 46 F7 | 	zerox	local05, #19
02af8     14 10 46 F0 | 	shr	local04, #20
02afc     02 10 66 F0 | 	shl	local04, #2
02b00     ED 10 02 F1 | 	add	local04, __methods__
02b04     08 11 02 FB | 	rdlong	local04, local04
02b08     10 0C 06 F1 | 	add	local02, #16
02b0c     06 03 02 FB | 	rdlong	arg02, local02
02b10     10 0C 86 F1 | 	sub	local02, #16
02b14     05 01 02 F6 | 	mov	arg01, local01
02b18     07 05 02 F6 | 	mov	arg03, local03
02b1c     F1 14 02 F6 | 	mov	local06, objptr
02b20     09 E3 01 F6 | 	mov	objptr, local05
02b24     2D 10 62 FD | 	call	local04
02b28     0A E3 01 F6 | 	mov	objptr, local06
02b2c     58 00 90 FD | 	jmp	#LR__0404
02b30                 | LR__0402
02b30     08 0C 06 F1 | 	add	local02, #8
02b34     06 15 02 FB | 	rdlong	local06, local02
02b38     08 0C 86 F1 | 	sub	local02, #8
02b3c     01 14 CE F7 | 	test	local06, #1 wz
02b40     00 0E 0E 52 |  if_ne	cmp	local03, #0 wz
02b44     40 00 90 AD |  if_e	jmp	#LR__0403
02b48     30 0A 06 F1 | 	add	local01, #48
02b4c     05 11 02 FB | 	rdlong	local04, local01
02b50     08 13 02 F6 | 	mov	local05, local04
02b54     30 0A 86 F1 | 	sub	local01, #48
02b58     13 12 46 F7 | 	zerox	local05, #19
02b5c     14 10 46 F0 | 	shr	local04, #20
02b60     02 10 66 F0 | 	shl	local04, #2
02b64     ED 10 02 F1 | 	add	local04, __methods__
02b68     08 11 02 FB | 	rdlong	local04, local04
02b6c     05 01 02 F6 | 	mov	arg01, local01
02b70     07 03 62 F6 | 	neg	arg02, local03
02b74     01 04 06 F6 | 	mov	arg03, #1
02b78     F1 14 02 F6 | 	mov	local06, objptr
02b7c     09 E3 01 F6 | 	mov	objptr, local05
02b80     2D 10 62 FD | 	call	local04
02b84     0A E3 01 F6 | 	mov	objptr, local06
02b88                 | LR__0403
02b88                 | LR__0404
02b88     06 01 68 FC | 	wrlong	#0, local02
02b8c     04 0C 06 F1 | 	add	local02, #4
02b90     06 01 68 FC | 	wrlong	#0, local02
02b94     04 0C 06 F1 | 	add	local02, #4
02b98     06 01 68 FC | 	wrlong	#0, local02
02b9c     00 EA 05 F6 | 	mov	result1, #0
02ba0     A7 F0 03 F6 | 	mov	ptra, fp
02ba4     B2 00 A0 FD | 	call	#popregs_
02ba8                 | __system____default_flush_ret
02ba8     2D 00 64 FD | 	ret
02bac                 | 
02bac                 | __system____default_buffer_init
02bac     02 4A 05 F6 | 	mov	COUNT_, #2
02bb0     A8 00 A0 FD | 	call	#pushregs_
02bb4     00 0B 02 F6 | 	mov	local01, arg01
02bb8     05 0D 02 FB | 	rdlong	local02, local01
02bbc     05 01 02 F6 | 	mov	arg01, local01
02bc0     CC 01 B0 FD | 	call	#__system___isatty
02bc4     00 EA 0D F2 | 	cmp	result1, #0 wz
02bc8     06 0A 06 51 |  if_ne	add	local01, #6
02bcc     05 0B 58 5C |  if_ne	wrword	#5, local01
02bd0     06 0A 06 A1 |  if_e	add	local01, #6
02bd4     05 0D 58 AC |  if_e	wrword	#6, local01
02bd8     14 0C 06 F1 | 	add	local02, #20
02bdc     06 0B 02 F6 | 	mov	local01, local02
02be0     04 0C 86 F1 | 	sub	local02, #4
02be4     06 0B 62 FC | 	wrlong	local01, local02
02be8     04 0C 86 F1 | 	sub	local02, #4
02bec     02 00 80 FF 
02bf0     06 01 68 FC | 	wrlong	##1024, local02
02bf4     00 EA 05 F6 | 	mov	result1, #0
02bf8     A7 F0 03 F6 | 	mov	ptra, fp
02bfc     B2 00 A0 FD | 	call	#popregs_
02c00                 | __system____default_buffer_init_ret
02c00     2D 00 64 FD | 	ret
02c04                 | 
02c04                 | __system__stat
02c04     04 4A 05 F6 | 	mov	COUNT_, #4
02c08     A8 00 A0 FD | 	call	#pushregs_
02c0c     01 0B 02 F6 | 	mov	local01, arg02
02c10     84 E5 05 F1 | 	add	ptr___system__dat__, #388
02c14     F2 0C 02 F6 | 	mov	local02, ptr___system__dat__
02c18     00 03 02 F6 | 	mov	arg02, arg01
02c1c     06 01 02 F6 | 	mov	arg01, local02
02c20     00 04 06 F6 | 	mov	arg03, #0
02c24     84 E5 85 F1 | 	sub	ptr___system__dat__, #388
02c28     18 E7 BF FD | 	call	#__system____getvfsforfile
02c2c     F5 0E 0A F6 | 	mov	local03, result1 wz
02c30     10 00 90 AD |  if_e	jmp	#LR__0410
02c34     34 0E 06 F1 | 	add	local03, #52
02c38     07 05 0A FB | 	rdlong	arg03, local03 wz
02c3c     34 0E 86 F1 | 	sub	local03, #52
02c40     14 00 90 5D |  if_ne	jmp	#LR__0411
02c44                 | LR__0410
02c44     20 E4 05 F1 | 	add	ptr___system__dat__, #32
02c48     F2 20 68 FC | 	wrlong	#16, ptr___system__dat__
02c4c     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
02c50     01 EA 65 F6 | 	neg	result1, #1
02c54     68 00 90 FD | 	jmp	#LR__0412
02c58                 | LR__0411
02c58     05 01 02 F6 | 	mov	arg01, local01
02c5c     00 02 06 F6 | 	mov	arg02, #0
02c60     30 04 06 F6 | 	mov	arg03, #48
02c64     00 11 02 F6 | 	mov	local04, arg01
02c68     98 00 A0 FD | 	call	#\builtin_bytefill_
02c6c     08 EB 01 F6 | 	mov	result1, local04
02c70     06 01 CA FA | 	rdbyte	arg01, local02 wz
02c74     08 0A 06 A1 |  if_e	add	local01, #8
02c78     08 00 80 AF 
02c7c     05 FF 6B AC |  if_e	wrlong	##4607, local01
02c80     00 EA 05 A6 |  if_e	mov	result1, #0
02c84     38 00 90 AD |  if_e	jmp	#LR__0412
02c88     34 0E 06 F1 | 	add	local03, #52
02c8c     07 0F 02 FB | 	rdlong	local03, local03
02c90     07 11 02 F6 | 	mov	local04, local03
02c94     13 0E 46 F7 | 	zerox	local03, #19
02c98     14 10 46 F0 | 	shr	local04, #20
02c9c     02 10 66 F0 | 	shl	local04, #2
02ca0     ED 10 02 F1 | 	add	local04, __methods__
02ca4     08 11 02 FB | 	rdlong	local04, local04
02ca8     06 01 02 F6 | 	mov	arg01, local02
02cac     05 03 02 F6 | 	mov	arg02, local01
02cb0     F1 0C 02 F6 | 	mov	local02, objptr
02cb4     07 E3 01 F6 | 	mov	objptr, local03
02cb8     2D 10 62 FD | 	call	local04
02cbc     06 E3 01 F6 | 	mov	objptr, local02
02cc0                 | LR__0412
02cc0     A7 F0 03 F6 | 	mov	ptra, fp
02cc4     B2 00 A0 FD | 	call	#popregs_
02cc8                 | __system__stat_ret
02cc8     2D 00 64 FD | 	ret
02ccc                 | 
02ccc                 | __system__close
02ccc     0A 00 16 F2 | 	cmp	arg01, #10 wc
02cd0     20 E4 05 31 |  if_ae	add	ptr___system__dat__, #32
02cd4     F2 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
02cd8     20 E4 85 31 |  if_ae	sub	ptr___system__dat__, #32
02cdc     01 EA 65 36 |  if_ae	neg	result1, #1
02ce0     20 00 90 3D |  if_ae	jmp	#LR__0420
02ce4     34 00 06 FD | 	qmul	arg01, #52
02ce8     02 00 00 FF 
02cec     20 E5 05 F1 | 	add	ptr___system__dat__, ##1312
02cf0     18 00 62 FD | 	getqx	arg01
02cf4     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
02cf8     02 00 00 FF 
02cfc     20 E5 85 F1 | 	sub	ptr___system__dat__, ##1312
02d00     88 F9 BF FD | 	call	#__system___closeraw
02d04                 | LR__0420
02d04                 | __system__close_ret
02d04     2D 00 64 FD | 	ret
02d08                 | 
02d08                 | __system___ioctl
02d08     03 4A 05 F6 | 	mov	COUNT_, #3
02d0c     A8 00 A0 FD | 	call	#pushregs_
02d10     00 00 4E F2 | 	cmps	arg01, #0 wz
02d14     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
02d18     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
02d1c     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
02d20     01 EA 65 A6 |  if_e	neg	result1, #1
02d24     5C 00 90 AD |  if_e	jmp	#LR__0431
02d28     28 00 06 F1 | 	add	arg01, #40
02d2c     00 0B 02 FB | 	rdlong	local01, arg01
02d30     05 0D 02 F6 | 	mov	local02, local01
02d34     28 00 86 F1 | 	sub	arg01, #40
02d38     13 0C 46 F7 | 	zerox	local02, #19
02d3c     14 0A 46 F0 | 	shr	local01, #20
02d40     02 0A 66 F0 | 	shl	local01, #2
02d44     ED 0A 02 F1 | 	add	local01, __methods__
02d48     05 0B 02 FB | 	rdlong	local01, local01
02d4c     F1 0E 02 F6 | 	mov	local03, objptr
02d50     06 E3 01 F6 | 	mov	objptr, local02
02d54     2D 0A 62 FD | 	call	local01
02d58     07 E3 01 F6 | 	mov	objptr, local03
02d5c     F5 00 0A F6 | 	mov	arg01, result1 wz
02d60     1C 00 90 AD |  if_e	jmp	#LR__0430
02d64     00 00 4E F2 | 	cmps	arg01, #0 wz
02d68     20 E4 05 F1 | 	add	ptr___system__dat__, #32
02d6c     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
02d70     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
02d74     01 EA 65 56 |  if_ne	neg	result1, #1
02d78     00 EA 05 A6 |  if_e	mov	result1, #0
02d7c     04 00 90 FD | 	jmp	#LR__0431
02d80                 | LR__0430
02d80     00 EA 05 F6 | 	mov	result1, #0
02d84                 | LR__0431
02d84     A7 F0 03 F6 | 	mov	ptra, fp
02d88     B2 00 A0 FD | 	call	#popregs_
02d8c                 | __system___ioctl_ret
02d8c     2D 00 64 FD | 	ret
02d90                 | 
02d90                 | __system___isatty
02d90     00 4A 05 F6 | 	mov	COUNT_, #0
02d94     A8 00 A0 FD | 	call	#pushregs_
02d98     0C F0 07 F1 | 	add	ptra, #12
02d9c     04 4E 05 F1 | 	add	fp, #4
02da0     A7 00 62 FC | 	wrlong	arg01, fp
02da4     04 4E 05 F1 | 	add	fp, #4
02da8     A7 04 02 F6 | 	mov	arg03, fp
02dac     08 4E 85 F1 | 	sub	fp, #8
02db0     00 03 06 F6 | 	mov	arg02, #256
02db4     50 FF BF FD | 	call	#__system___ioctl
02db8     00 EA 0D F2 | 	cmp	result1, #0 wz
02dbc     01 EA 05 A6 |  if_e	mov	result1, #1
02dc0     00 EA 05 56 |  if_ne	mov	result1, #0
02dc4     A7 F0 03 F6 | 	mov	ptra, fp
02dc8     B2 00 A0 FD | 	call	#popregs_
02dcc                 | __system___isatty_ret
02dcc     2D 00 64 FD | 	ret
02dd0                 | 
02dd0                 | __system____getftab
02dd0     0A 00 16 F2 | 	cmp	arg01, #10 wc
02dd4     34 00 06 CD |  if_b	qmul	arg01, #52
02dd8     00 EA 05 36 |  if_ae	mov	result1, #0
02ddc     02 00 00 CF 
02de0     20 E5 05 C1 |  if_b	add	ptr___system__dat__, ##1312
02de4     18 EA 61 CD |  if_b	getqx	result1
02de8     F2 EA 01 C1 |  if_b	add	result1, ptr___system__dat__
02dec     02 00 00 CF 
02df0     20 E5 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
02df4                 | __system____getftab_ret
02df4     2D 00 64 FD | 	ret
02df8                 | 
02df8                 | __system__strncpy
02df8     00 EF 01 F6 | 	mov	_var01, arg01
02dfc                 | LR__0440
02dfc     01 04 86 F1 | 	sub	arg03, #1
02e00     00 04 56 F2 | 	cmps	arg03, #0 wc
02e04     18 00 90 CD |  if_b	jmp	#LR__0441
02e08     01 EB C1 FA | 	rdbyte	result1, arg02
02e0c     F7 EA 41 FC | 	wrbyte	result1, _var01
02e10     01 02 06 F1 | 	add	arg02, #1
02e14     F7 EA C9 FA | 	rdbyte	result1, _var01 wz
02e18     01 EE 05 F1 | 	add	_var01, #1
02e1c     DC FF 9F 5D |  if_ne	jmp	#LR__0440
02e20                 | LR__0441
02e20     97 0C 48 FB | 	callpa	#(@LR__0443-@LR__0442)>>2,fcache_load_ptr_
02e24                 | LR__0442
02e24     01 04 86 F1 | 	sub	arg03, #1
02e28     00 04 56 F2 | 	cmps	arg03, #0 wc
02e2c     F7 F0 01 36 |  if_ae	mov	_var02, _var01
02e30     01 EE 05 31 |  if_ae	add	_var01, #1
02e34     F8 00 48 3C |  if_ae	wrbyte	#0, _var02
02e38     E8 FF 9F 3D |  if_ae	jmp	#LR__0442
02e3c                 | LR__0443
02e3c     00 EB 01 F6 | 	mov	result1, arg01
02e40                 | __system__strncpy_ret
02e40     2D 00 64 FD | 	ret
02e44                 | 
02e44                 | __system__strncat
02e44     00 02 4E F2 | 	cmps	arg02, #0 wz
02e48     50 00 90 AD |  if_e	jmp	#LR__0454
02e4c     01 04 16 F2 | 	cmp	arg03, #1 wc
02e50     48 00 90 CD |  if_b	jmp	#LR__0454
02e54     00 EF 01 F6 | 	mov	_var01, arg01
02e58     97 1E 48 FB | 	callpa	#(@LR__0452-@LR__0450)>>2,fcache_load_ptr_
02e5c                 | LR__0450
02e5c     F7 EA C9 FA | 	rdbyte	result1, _var01 wz
02e60     01 EE 05 51 |  if_ne	add	_var01, #1
02e64     F4 FF 9F 5D |  if_ne	jmp	#LR__0450
02e68     02 F1 01 F6 | 	mov	_var02, arg03
02e6c                 | LR__0451
02e6c     01 F3 C1 FA | 	rdbyte	_var03, arg02
02e70     F9 F4 01 F6 | 	mov	_var04, _var03
02e74     07 F4 4D F7 | 	zerox	_var04, #7 wz
02e78     01 02 06 F1 | 	add	arg02, #1
02e7c     18 00 90 AD |  if_e	jmp	#LR__0453
02e80     01 F0 85 F1 | 	sub	_var02, #1
02e84     00 F0 55 F2 | 	cmps	_var02, #0 wc
02e88     F7 F4 01 36 |  if_ae	mov	_var04, _var01
02e8c     01 EE 05 31 |  if_ae	add	_var01, #1
02e90     FA F2 41 3C |  if_ae	wrbyte	_var03, _var04
02e94     D4 FF 9F 3D |  if_ae	jmp	#LR__0451
02e98                 | LR__0452
02e98                 | LR__0453
02e98     F7 00 48 FC | 	wrbyte	#0, _var01
02e9c                 | LR__0454
02e9c     00 EB 01 F6 | 	mov	result1, arg01
02ea0                 | __system__strncat_ret
02ea0     2D 00 64 FD | 	ret
02ea4                 | 
02ea4                 | __system__strncmp
02ea4     00 EF 09 F6 | 	mov	_var01, arg01 wz
02ea8     14 00 90 5D |  if_ne	jmp	#LR__0460
02eac     00 02 0E F2 | 	cmp	arg02, #0 wz
02eb0     01 F0 65 56 |  if_ne	neg	_var02, #1
02eb4     00 F0 05 A6 |  if_e	mov	_var02, #0
02eb8     F8 EA 01 F6 | 	mov	result1, _var02
02ebc     74 00 90 FD | 	jmp	#__system__strncmp_ret
02ec0                 | LR__0460
02ec0     00 02 0E F2 | 	cmp	arg02, #0 wz
02ec4     01 EA 05 A6 |  if_e	mov	result1, #1
02ec8     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
02ecc     02 F3 01 F6 | 	mov	_var03, arg03
02ed0     97 16 48 FB | 	callpa	#(@LR__0462-@LR__0461)>>2,fcache_load_ptr_
02ed4                 | LR__0461
02ed4     F7 F4 C1 FA | 	rdbyte	_var04, _var01
02ed8     01 F7 01 F6 | 	mov	_var05, arg02
02edc     FB F8 C1 FA | 	rdbyte	_var06, _var05
02ee0     01 F2 85 F1 | 	sub	_var03, #1
02ee4     00 F2 55 F2 | 	cmps	_var03, #0 wc
02ee8     01 EE 05 F1 | 	add	_var01, #1
02eec     01 02 06 F1 | 	add	arg02, #1
02ef0     00 F4 0D 32 |  if_ae	cmp	_var04, #0 wz
02ef4     08 00 90 2D |  if_nc_and_z	jmp	#LR__0463
02ef8     FC F4 09 32 |  if_ae	cmp	_var04, _var06 wz
02efc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__0461
02f00                 | LR__0462
02f00                 | LR__0463
02f00     00 F2 55 F2 | 	cmps	_var03, #0 wc
02f04     00 EA 05 C6 |  if_b	mov	result1, #0
02f08     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
02f0c     FC F4 09 F2 | 	cmp	_var04, _var06 wz
02f10     00 EA 05 A6 |  if_e	mov	result1, #0
02f14     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
02f18     00 F4 0D F2 | 	cmp	_var04, #0 wz
02f1c     01 EA 65 A6 |  if_e	neg	result1, #1
02f20     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
02f24     00 F8 0D F2 | 	cmp	_var06, #0 wz
02f28     01 EA 05 A6 |  if_e	mov	result1, #1
02f2c     FA EA 01 56 |  if_ne	mov	result1, _var04
02f30     FC EA 81 51 |  if_ne	sub	result1, _var06
02f34                 | __system__strncmp_ret
02f34     2D 00 64 FD | 	ret
02f38                 | 
02f38                 | __system____root_opendir
02f38     64 E4 05 F1 | 	add	ptr___system__dat__, #100
02f3c     04 00 06 F1 | 	add	arg01, #4
02f40     00 E5 61 FC | 	wrlong	ptr___system__dat__, arg01
02f44     00 EA 05 F6 | 	mov	result1, #0
02f48     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
02f4c                 | __system____root_opendir_ret
02f4c     2D 00 64 FD | 	ret
02f50                 | 
02f50                 | __system____root_readdir
02f50     03 4A 05 F6 | 	mov	COUNT_, #3
02f54     A8 00 A0 FD | 	call	#pushregs_
02f58     00 0B 02 F6 | 	mov	local01, arg01
02f5c     01 0D 02 F6 | 	mov	local02, arg02
02f60     04 0A 06 F1 | 	add	local01, #4
02f64     05 0F 02 FB | 	rdlong	local03, local01
02f68     04 0A 86 F1 | 	sub	local01, #4
02f6c                 | LR__0470
02f6c     74 E4 05 F1 | 	add	ptr___system__dat__, #116
02f70     F2 0E 0A F2 | 	cmp	local03, ptr___system__dat__ wz
02f74     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
02f78     01 EA 65 A6 |  if_e	neg	result1, #1
02f7c     48 00 90 AD |  if_e	jmp	#LR__0471
02f80     07 05 0A FB | 	rdlong	arg03, local03 wz
02f84     04 0E 06 A1 |  if_e	add	local03, #4
02f88     E0 FF 9F AD |  if_e	jmp	#LR__0470
02f8c     07 03 02 FB | 	rdlong	arg02, local03
02f90     01 02 06 F1 | 	add	arg02, #1
02f94     06 01 02 F6 | 	mov	arg01, local02
02f98     40 04 06 F6 | 	mov	arg03, #64
02f9c     58 FE BF FD | 	call	#__system__strncpy
02fa0     50 0C 06 F1 | 	add	local02, #80
02fa4     06 03 48 FC | 	wrbyte	#1, local02
02fa8     08 0C 86 F1 | 	sub	local02, #8
02fac     06 01 68 FC | 	wrlong	#0, local02
02fb0     04 0C 06 F1 | 	add	local02, #4
02fb4     06 01 68 FC | 	wrlong	#0, local02
02fb8     04 0E 06 F1 | 	add	local03, #4
02fbc     04 0A 06 F1 | 	add	local01, #4
02fc0     05 0F 62 FC | 	wrlong	local03, local01
02fc4     00 EA 05 F6 | 	mov	result1, #0
02fc8                 | LR__0471
02fc8     A7 F0 03 F6 | 	mov	ptra, fp
02fcc     B2 00 A0 FD | 	call	#popregs_
02fd0                 | __system____root_readdir_ret
02fd0     2D 00 64 FD | 	ret
02fd4                 | 
02fd4                 | __system____root_closedir
02fd4     00 EA 05 F6 | 	mov	result1, #0
02fd8                 | __system____root_closedir_ret
02fd8     2D 00 64 FD | 	ret
02fdc                 | 
02fdc                 | __system____root_stat
02fdc     01 EF 01 F6 | 	mov	_var01, arg02
02fe0     F7 00 02 F6 | 	mov	arg01, _var01
02fe4     00 02 06 F6 | 	mov	arg02, #0
02fe8     30 04 06 F6 | 	mov	arg03, #48
02fec     98 00 A0 FD | 	call	#\builtin_bytefill_
02ff0     08 EE 05 F1 | 	add	_var01, #8
02ff4     08 00 80 FF 
02ff8     F7 FE 6B FC | 	wrlong	##4607, _var01
02ffc     00 EA 05 F6 | 	mov	result1, #0
03000                 | __system____root_stat_ret
03000     2D 00 64 FD | 	ret
03004                 | 
03004                 | __system___normalizeName
03004     00 EE 05 F6 | 	mov	_var01, #0
03008     00 F1 01 F6 | 	mov	_var02, arg01
0300c     F8 F2 01 F6 | 	mov	_var03, _var02
03010                 | LR__0480
03010     F8 F4 C9 FA | 	rdbyte	_var04, _var02 wz
03014     5C 01 90 AD |  if_e	jmp	#LR__0499
03018     00 EE 0D F2 | 	cmp	_var01, #0 wz
0301c     F9 F4 01 56 |  if_ne	mov	_var04, _var03
03020     01 F2 05 51 |  if_ne	add	_var03, #1
03024     FA 5E 48 5C |  if_ne	wrbyte	#47, _var04
03028     00 EE 05 56 |  if_ne	mov	_var01, #0
0302c     F8 F4 C1 FA | 	rdbyte	_var04, _var02
03030     2E F4 0D F2 | 	cmp	_var04, #46 wz
03034     D8 00 90 5D |  if_ne	jmp	#LR__0492
03038     01 F0 05 F1 | 	add	_var02, #1
0303c     F8 F4 C1 FA | 	rdbyte	_var04, _var02
03040     01 F0 85 F1 | 	sub	_var02, #1
03044     2F F4 0D F2 | 	cmp	_var04, #47 wz
03048     18 00 90 AD |  if_e	jmp	#LR__0481
0304c     01 F0 05 F1 | 	add	_var02, #1
03050     F8 F6 C1 FA | 	rdbyte	_var05, _var02
03054     01 F0 85 F1 | 	sub	_var02, #1
03058     FB F8 01 F6 | 	mov	_var06, _var05
0305c     07 F8 4D F7 | 	zerox	_var06, #7 wz
03060     10 00 90 5D |  if_ne	jmp	#LR__0482
03064                 | LR__0481
03064     F8 FA 01 F6 | 	mov	_var07, _var02
03068     01 FA 05 F1 | 	add	_var07, #1
0306c     FD F0 01 F6 | 	mov	_var02, _var07
03070     E0 00 90 FD | 	jmp	#LR__0496
03074                 | LR__0482
03074     01 F0 05 F1 | 	add	_var02, #1
03078     F8 FA C1 FA | 	rdbyte	_var07, _var02
0307c     01 F0 85 F1 | 	sub	_var02, #1
03080     FD F4 E1 F8 | 	getbyte	_var04, _var07, #0
03084     2E F4 0D F2 | 	cmp	_var04, #46 wz
03088     84 00 90 5D |  if_ne	jmp	#LR__0491
0308c     02 F0 05 F1 | 	add	_var02, #2
03090     F8 FA C1 FA | 	rdbyte	_var07, _var02
03094     02 F0 85 F1 | 	sub	_var02, #2
03098     FD F4 E1 F8 | 	getbyte	_var04, _var07, #0
0309c     2F F4 0D F2 | 	cmp	_var04, #47 wz
030a0     18 00 90 AD |  if_e	jmp	#LR__0483
030a4     02 F0 05 F1 | 	add	_var02, #2
030a8     F8 F6 C1 FA | 	rdbyte	_var05, _var02
030ac     02 F0 85 F1 | 	sub	_var02, #2
030b0     FB F8 01 F6 | 	mov	_var06, _var05
030b4     07 F8 4D F7 | 	zerox	_var06, #7 wz
030b8     54 00 90 5D |  if_ne	jmp	#LR__0490
030bc                 | LR__0483
030bc     02 F0 05 F1 | 	add	_var02, #2
030c0     00 F3 59 F2 | 	cmps	_var03, arg01 wcz
030c4     40 00 90 ED |  if_be	jmp	#LR__0489
030c8     F9 FC 01 F6 | 	mov	_var08, _var03
030cc     01 FC 85 F1 | 	sub	_var08, #1
030d0                 | LR__0484
030d0     FE F4 C1 FA | 	rdbyte	_var04, _var08
030d4     2F F4 0D F2 | 	cmp	_var04, #47 wz
030d8     0C 00 90 5D |  if_ne	jmp	#LR__0485
030dc     00 FD 59 F2 | 	cmps	_var08, arg01 wcz
030e0     01 FC 85 11 |  if_a	sub	_var08, #1
030e4     E8 FF 9F 1D |  if_a	jmp	#LR__0484
030e8                 | LR__0485
030e8     97 0C 48 FB | 	callpa	#(@LR__0487-@LR__0486)>>2,fcache_load_ptr_
030ec                 | LR__0486
030ec     00 FD 59 F2 | 	cmps	_var08, arg01 wcz
030f0     10 00 90 ED |  if_be	jmp	#LR__0488
030f4     FE F4 C1 FA | 	rdbyte	_var04, _var08
030f8     2F F4 0D F2 | 	cmp	_var04, #47 wz
030fc     01 FC 85 51 |  if_ne	sub	_var08, #1
03100     E8 FF 9F 5D |  if_ne	jmp	#LR__0486
03104                 | LR__0487
03104                 | LR__0488
03104     FE F2 01 F6 | 	mov	_var03, _var08
03108                 | LR__0489
03108     01 EE 05 F6 | 	mov	_var01, #1
0310c     44 00 90 FD | 	jmp	#LR__0496
03110                 | LR__0490
03110                 | LR__0491
03110                 | LR__0492
03110     97 18 48 FB | 	callpa	#(@LR__0494-@LR__0493)>>2,fcache_load_ptr_
03114                 | LR__0493
03114     F8 F4 C9 FA | 	rdbyte	_var04, _var02 wz
03118     F8 FA C1 5A |  if_ne	rdbyte	_var07, _var02
0311c     2F FA 0D 52 |  if_ne	cmp	_var07, #47 wz
03120     20 00 90 AD |  if_e	jmp	#LR__0495
03124     F8 F8 01 F6 | 	mov	_var06, _var02
03128     F8 F6 01 F6 | 	mov	_var05, _var02
0312c     01 F6 05 F1 | 	add	_var05, #1
03130     FC FE C1 FA | 	rdbyte	_var09, _var06
03134     FB F0 01 F6 | 	mov	_var02, _var05
03138     F9 FE 41 FC | 	wrbyte	_var09, _var03
0313c     01 F2 05 F1 | 	add	_var03, #1
03140     D0 FF 9F FD | 	jmp	#LR__0493
03144                 | LR__0494
03144                 | LR__0495
03144     F8 F4 C1 FA | 	rdbyte	_var04, _var02
03148     2F F4 0D F2 | 	cmp	_var04, #47 wz
0314c     C0 FE 9F 5D |  if_ne	jmp	#LR__0480
03150     01 EE 05 F6 | 	mov	_var01, #1
03154                 | LR__0496
03154     97 0C 48 FB | 	callpa	#(@LR__0498-@LR__0497)>>2,fcache_load_ptr_
03158                 | LR__0497
03158     F8 F4 C1 FA | 	rdbyte	_var04, _var02
0315c     2F F4 0D F2 | 	cmp	_var04, #47 wz
03160     F8 FA 01 A6 |  if_e	mov	_var07, _var02
03164     01 FA 05 A1 |  if_e	add	_var07, #1
03168     FD F0 01 A6 |  if_e	mov	_var02, _var07
0316c     E8 FF 9F AD |  if_e	jmp	#LR__0497
03170                 | LR__0498
03170     9C FE 9F FD | 	jmp	#LR__0480
03174                 | LR__0499
03174     F9 00 48 FC | 	wrbyte	#0, _var03
03178                 | __system___normalizeName_ret
03178     2D 00 64 FD | 	ret
0317c                 | 
0317c                 | __system___strrev
0317c     00 EF C9 FA | 	rdbyte	_var01, arg01 wz
03180     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
03184     00 F1 01 F6 | 	mov	_var02, arg01
03188     97 1A 48 FB | 	callpa	#(@LR__0502-@LR__0500)>>2,fcache_load_ptr_
0318c                 | LR__0500
0318c     F8 EE C9 FA | 	rdbyte	_var01, _var02 wz
03190     01 F0 05 51 |  if_ne	add	_var02, #1
03194     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
03198     01 F0 85 F1 | 	sub	_var02, #1
0319c                 | LR__0501
0319c     00 F1 59 F2 | 	cmps	_var02, arg01 wcz
031a0     1C 00 90 ED |  if_be	jmp	#LR__0503
031a4     00 EF C1 FA | 	rdbyte	_var01, arg01
031a8     F8 F2 C1 FA | 	rdbyte	_var03, _var02
031ac     00 F3 41 FC | 	wrbyte	_var03, arg01
031b0     F8 EE 41 FC | 	wrbyte	_var01, _var02
031b4     01 00 06 F1 | 	add	arg01, #1
031b8     01 F0 85 F1 | 	sub	_var02, #1
031bc     DC FF 9F FD | 	jmp	#LR__0501
031c0                 | LR__0502
031c0                 | LR__0503
031c0                 | __system___strrev_ret
031c0     2D 00 64 FD | 	ret
031c4                 | 
031c4                 | __system___fmtpad
031c4     06 4A 05 F6 | 	mov	COUNT_, #6
031c8     A8 00 A0 FD | 	call	#pushregs_
031cc     00 0B 02 F6 | 	mov	local01, arg01
031d0     01 0D 02 F6 | 	mov	local02, arg02
031d4     02 0F 02 F6 | 	mov	local03, arg03
031d8     06 01 EA F8 | 	getbyte	arg01, local02, #1
031dc     16 0C 46 F0 | 	shr	local02, #22
031e0     03 0C 0E F5 | 	and	local02, #3 wz
031e4     00 10 06 F6 | 	mov	local04, #0
031e8     01 0C 06 A6 |  if_e	mov	local02, #1
031ec     03 0D CA F7 | 	test	local02, arg04 wz
031f0     00 EA 05 A6 |  if_e	mov	result1, #0
031f4     88 00 90 AD |  if_e	jmp	#LR__0513
031f8     00 0F C2 F2 | 	subr	local03, arg01
031fc     01 0E 56 F2 | 	cmps	local03, #1 wc
03200     00 EA 05 C6 |  if_b	mov	result1, #0
03204     78 00 90 CD |  if_b	jmp	#LR__0513
03208     03 0C 0E F2 | 	cmp	local02, #3 wz
0320c     18 00 90 5D |  if_ne	jmp	#LR__0510
03210     01 06 0E F2 | 	cmp	arg04, #1 wz
03214     6E 0C 62 FD | 	wrz	local02
03218     06 0F 02 F1 | 	add	local03, local02
0321c     07 0F 52 F6 | 	abs	local03, local03 wc
03220     01 0E 46 F0 | 	shr	local03, #1
03224     07 0F 82 F6 | 	negc	local03, local03
03228                 | LR__0510
03228     01 0E 56 F2 | 	cmps	local03, #1 wc
0322c     4C 00 90 CD |  if_b	jmp	#LR__0512
03230     07 13 02 F6 | 	mov	local05, local03
03234                 | LR__0511
03234     05 0D 02 F6 | 	mov	local02, local01
03238     05 15 02 F6 | 	mov	local06, local01
0323c     13 0C 46 F7 | 	zerox	local02, #19
03240     14 14 46 F0 | 	shr	local06, #20
03244     02 14 66 F0 | 	shl	local06, #2
03248     ED 14 02 F1 | 	add	local06, __methods__
0324c     0A 15 02 FB | 	rdlong	local06, local06
03250     20 00 06 F6 | 	mov	arg01, #32
03254     F1 0E 02 F6 | 	mov	local03, objptr
03258     06 E3 01 F6 | 	mov	objptr, local02
0325c     2D 14 62 FD | 	call	local06
03260     07 E3 01 F6 | 	mov	objptr, local03
03264     F5 14 02 F6 | 	mov	local06, result1
03268     00 14 56 F2 | 	cmps	local06, #0 wc
0326c     0A EB 01 C6 |  if_b	mov	result1, local06
03270     0C 00 90 CD |  if_b	jmp	#LR__0513
03274     0A 11 02 F1 | 	add	local04, local06
03278     EE 13 6E FB | 	djnz	local05, #LR__0511
0327c                 | LR__0512
0327c     08 EB 01 F6 | 	mov	result1, local04
03280                 | LR__0513
03280     A7 F0 03 F6 | 	mov	ptra, fp
03284     B2 00 A0 FD | 	call	#popregs_
03288                 | __system___fmtpad_ret
03288     2D 00 64 FD | 	ret
0328c                 | 
0328c                 | __system___uitoa
0328c     04 4A 05 F6 | 	mov	COUNT_, #4
03290     A8 00 A0 FD | 	call	#pushregs_
03294     00 0B 02 F6 | 	mov	local01, arg01
03298     00 08 4E F2 | 	cmps	arg05, #0 wz
0329c     05 09 02 F6 | 	mov	arg05, local01
032a0     00 0C 06 F6 | 	mov	local02, #0
032a4     37 0E 06 56 |  if_ne	mov	local03, #55
032a8     57 0E 06 A6 |  if_e	mov	local03, #87
032ac                 | LR__0520
032ac     02 03 12 FD | 	qdiv	arg02, arg03
032b0     19 10 62 FD | 	getqy	local04
032b4     02 03 12 FD | 	qdiv	arg02, arg03
032b8     0A 10 16 F2 | 	cmp	local04, #10 wc
032bc     30 10 06 C1 |  if_b	add	local04, #48
032c0     07 11 02 31 |  if_ae	add	local04, local03
032c4     04 11 42 FC | 	wrbyte	local04, arg05
032c8     01 08 06 F1 | 	add	arg05, #1
032cc     01 0C 06 F1 | 	add	local02, #1
032d0     18 02 62 FD | 	getqx	arg02
032d4     00 02 0E F2 | 	cmp	arg02, #0 wz
032d8     D0 FF 9F 5D |  if_ne	jmp	#LR__0520
032dc     03 0D 12 F2 | 	cmp	local02, arg04 wc
032e0     C8 FF 9F CD |  if_b	jmp	#LR__0520
032e4     04 01 48 FC | 	wrbyte	#0, arg05
032e8     05 01 02 F6 | 	mov	arg01, local01
032ec     8C FE BF FD | 	call	#__system___strrev
032f0     06 EB 01 F6 | 	mov	result1, local02
032f4     A7 F0 03 F6 | 	mov	ptra, fp
032f8     B2 00 A0 FD | 	call	#popregs_
032fc                 | __system___uitoa_ret
032fc     2D 00 64 FD | 	ret
03300                 | 
03300                 | __system___gettxfunc
03300     01 4A 05 F6 | 	mov	COUNT_, #1
03304     A8 00 A0 FD | 	call	#pushregs_
03308     C4 FA BF FD | 	call	#__system____getftab
0330c     F5 0A 0A F6 | 	mov	local01, result1 wz
03310     10 00 90 AD |  if_e	jmp	#LR__0530
03314     08 0A 06 F1 | 	add	local01, #8
03318     05 03 0A FB | 	rdlong	arg02, local01 wz
0331c     08 0A 86 F1 | 	sub	local01, #8
03320     08 00 90 5D |  if_ne	jmp	#LR__0531
03324                 | LR__0530
03324     00 EA 05 F6 | 	mov	result1, #0
03328     08 00 90 FD | 	jmp	#LR__0532
0332c                 | LR__0531
0332c     34 0A 26 F4 | 	bith	local01, #52
03330     05 EB 01 F6 | 	mov	result1, local01
03334                 | LR__0532
03334     A7 F0 03 F6 | 	mov	ptra, fp
03338     B2 00 A0 FD | 	call	#popregs_
0333c                 | __system___gettxfunc_ret
0333c     2D 00 64 FD | 	ret
03340                 | 
03340                 | __system___getiolock_0121
03340     01 4A 05 F6 | 	mov	COUNT_, #1
03344     A8 00 A0 FD | 	call	#pushregs_
03348     84 FA BF FD | 	call	#__system____getftab
0334c     F5 0A 0A F6 | 	mov	local01, result1 wz
03350     10 00 90 AD |  if_e	jmp	#LR__0540
03354     08 0A 06 F1 | 	add	local01, #8
03358     05 EB 09 FB | 	rdlong	result1, local01 wz
0335c     08 0A 86 F1 | 	sub	local01, #8
03360     18 00 90 5D |  if_ne	jmp	#LR__0541
03364                 | LR__0540
03364     01 00 00 FF 
03368     D4 E4 05 F1 | 	add	ptr___system__dat__, ##724
0336c     F2 EA 01 F6 | 	mov	result1, ptr___system__dat__
03370     01 00 00 FF 
03374     D4 E4 85 F1 | 	sub	ptr___system__dat__, ##724
03378     08 00 90 FD | 	jmp	#LR__0542
0337c                 | LR__0541
0337c     0C 0A 06 F1 | 	add	local01, #12
03380     05 EB 01 F6 | 	mov	result1, local01
03384                 | LR__0542
03384     A7 F0 03 F6 | 	mov	ptra, fp
03388     B2 00 A0 FD | 	call	#popregs_
0338c                 | __system___getiolock_0121_ret
0338c     2D 00 64 FD | 	ret
03390                 | 
03390                 | __system___rxtxioctl_0188
03390     00 03 0E F2 | 	cmp	arg02, #256 wz
03394     0C 00 90 AD |  if_e	jmp	#LR__0550
03398     01 03 0E F2 | 	cmp	arg02, #257 wz
0339c     1C 00 90 AD |  if_e	jmp	#LR__0551
033a0     30 00 90 FD | 	jmp	#LR__0552
033a4                 | LR__0550
033a4     08 E4 05 F1 | 	add	ptr___system__dat__, #8
033a8     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
033ac     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
033b0     02 EB 61 FC | 	wrlong	result1, arg03
033b4     00 EA 05 F6 | 	mov	result1, #0
033b8     28 00 90 FD | 	jmp	#LR__0553
033bc                 | LR__0551
033bc     02 01 02 FB | 	rdlong	arg01, arg03
033c0     08 E4 05 F1 | 	add	ptr___system__dat__, #8
033c4     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
033c8     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
033cc     00 EA 05 F6 | 	mov	result1, #0
033d0     10 00 90 FD | 	jmp	#LR__0553
033d4                 | LR__0552
033d4     20 E4 05 F1 | 	add	ptr___system__dat__, #32
033d8     F2 14 68 FC | 	wrlong	#10, ptr___system__dat__
033dc     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
033e0     01 EA 65 F6 | 	neg	result1, #1
033e4                 | LR__0553
033e4                 | __system___rxtxioctl_0188_ret
033e4     2D 00 64 FD | 	ret
033e8                 | 
033e8                 | __system____dummy_flush_0189
033e8     00 EA 05 F6 | 	mov	result1, #0
033ec                 | __system____dummy_flush_0189_ret
033ec     2D 00 64 FD | 	ret
033f0                 | 
033f0                 | __system____default_filbuf
033f0     04 4A 05 F6 | 	mov	COUNT_, #4
033f4     A8 00 A0 FD | 	call	#pushregs_
033f8     00 0B 02 F6 | 	mov	local01, arg01
033fc     05 0D 02 FB | 	rdlong	local02, local01
03400     0C 0C 06 F1 | 	add	local02, #12
03404     06 EB 09 FB | 	rdlong	result1, local02 wz
03408     0C 0C 86 F1 | 	sub	local02, #12
0340c     20 00 90 5D |  if_ne	jmp	#LR__0560
03410     14 0C 06 F1 | 	add	local02, #20
03414     06 EB 01 F6 | 	mov	result1, local02
03418     04 0C 86 F1 | 	sub	local02, #4
0341c     06 EB 61 FC | 	wrlong	result1, local02
03420     04 0C 86 F1 | 	sub	local02, #4
03424     02 00 80 FF 
03428     06 01 68 FC | 	wrlong	##1024, local02
0342c     0C 0C 86 F1 | 	sub	local02, #12
03430                 | LR__0560
03430     14 0A 06 F1 | 	add	local01, #20
03434     05 0F 02 FB | 	rdlong	local03, local01
03438     07 11 02 F6 | 	mov	local04, local03
0343c     14 0A 86 F1 | 	sub	local01, #20
03440     13 10 46 F7 | 	zerox	local04, #19
03444     14 0E 46 F0 | 	shr	local03, #20
03448     02 0E 66 F0 | 	shl	local03, #2
0344c     ED 0E 02 F1 | 	add	local03, __methods__
03450     07 0F 02 FB | 	rdlong	local03, local03
03454     10 0C 06 F1 | 	add	local02, #16
03458     06 03 02 FB | 	rdlong	arg02, local02
0345c     04 0C 86 F1 | 	sub	local02, #4
03460     06 05 02 FB | 	rdlong	arg03, local02
03464     0C 0C 86 F1 | 	sub	local02, #12
03468     05 01 02 F6 | 	mov	arg01, local01
0346c     F1 0A 02 F6 | 	mov	local01, objptr
03470     08 E3 01 F6 | 	mov	objptr, local04
03474     2D 0E 62 FD | 	call	local03
03478     05 E3 01 F6 | 	mov	objptr, local01
0347c     F5 10 02 F6 | 	mov	local04, result1
03480     00 10 56 F2 | 	cmps	local04, #0 wc
03484     01 EA 65 C6 |  if_b	neg	result1, #1
03488     28 00 90 CD |  if_b	jmp	#LR__0561
0348c     06 11 62 FC | 	wrlong	local04, local02
03490     10 0C 06 F1 | 	add	local02, #16
03494     06 0F 02 FB | 	rdlong	local03, local02
03498     0C 0C 86 F1 | 	sub	local02, #12
0349c     06 0F 62 FC | 	wrlong	local03, local02
034a0     04 0C 06 F1 | 	add	local02, #4
034a4     06 0F 02 FB | 	rdlong	local03, local02
034a8     01 0E 46 F5 | 	or	local03, #1
034ac     06 0F 62 FC | 	wrlong	local03, local02
034b0     08 EB 01 F6 | 	mov	result1, local04
034b4                 | LR__0561
034b4     A7 F0 03 F6 | 	mov	ptra, fp
034b8     B2 00 A0 FD | 	call	#popregs_
034bc                 | __system____default_filbuf_ret
034bc     2D 00 64 FD | 	ret
034c0                 | 
034c0                 | _fatfs_cc_ff_uni2oem
034c0     00 EE 05 F6 | 	mov	_var01, #0
034c4     80 00 16 F2 | 	cmp	arg01, #128 wc
034c8     00 EF 01 C6 |  if_b	mov	_var01, arg01
034cc     58 00 90 CD |  if_b	jmp	#LR__0574
034d0     80 00 00 FF 
034d4     00 00 16 F2 | 	cmp	arg01, ##65536 wc
034d8     4C 00 90 3D |  if_ae	jmp	#LR__0573
034dc     01 EB 31 F9 | 	getword	result1, arg02, #0
034e0     01 00 00 FF 
034e4     52 EB 0D F2 | 	cmp	result1, ##850 wz
034e8     3C 00 90 5D |  if_ne	jmp	#LR__0573
034ec                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
034ec     00 EE 05 F6 | 	mov	_var01, #0
034f0     97 14 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
034f4                 | LR__0570
034f4     F7 EA 31 F9 | 	getword	result1, _var01, #0
034f8     80 EA 15 F2 | 	cmp	result1, #128 wc
034fc     1C 00 90 3D |  if_ae	jmp	#LR__0572
03500     F7 EA 31 F9 | 	getword	result1, _var01, #0
03504     01 EA 65 F0 | 	shl	result1, #1
03508     F3 EA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
0350c     F5 EA E1 FA | 	rdword	result1, result1
03510     F5 00 0A F2 | 	cmp	arg01, result1 wz
03514     01 EE 05 51 |  if_ne	add	_var01, #1
03518     D8 FF 9F 5D |  if_ne	jmp	#LR__0570
0351c                 | LR__0571
0351c                 | LR__0572
0351c     F7 EE 31 F9 | 	getword	_var01, _var01, #0
03520     80 EE 05 F1 | 	add	_var01, #128
03524     F7 EE E1 F8 | 	getbyte	_var01, _var01, #0
03528                 | LR__0573
03528                 | LR__0574
03528                 | ' 			c = (c + 0x80) & 0xFF;
03528                 | ' 		}
03528                 | ' 	}
03528                 | ' 
03528                 | ' 	return c;
03528     F7 EA 01 F6 | 	mov	result1, _var01
0352c                 | _fatfs_cc_ff_uni2oem_ret
0352c     2D 00 64 FD | 	ret
03530                 | 
03530                 | _fatfs_cc_ff_oem2uni
03530     00 EE 05 F6 | 	mov	_var01, #0
03534     00 EB 31 F9 | 	getword	result1, arg01, #0
03538     80 EA 15 F2 | 	cmp	result1, #128 wc
0353c     00 EF 01 C6 |  if_b	mov	_var01, arg01
03540     2C 00 90 CD |  if_b	jmp	#LR__0581
03544     01 03 32 F9 | 	getword	arg02, arg02, #0
03548     01 00 00 FF 
0354c     52 03 0E F2 | 	cmp	arg02, ##850 wz
03550     1C 00 90 5D |  if_ne	jmp	#LR__0580
03554     00 EB 31 F9 | 	getword	result1, arg01, #0
03558     00 EB 15 F2 | 	cmp	result1, #256 wc
0355c     00 01 32 C9 |  if_b	getword	arg01, arg01, #0
03560     80 00 86 C1 |  if_b	sub	arg01, #128
03564     01 00 66 C0 |  if_b	shl	arg01, #1
03568     F3 00 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
0356c     00 EF E1 CA |  if_b	rdword	_var01, arg01
03570                 | LR__0580
03570                 | LR__0581
03570                 | ' 		}
03570                 | ' 	}
03570                 | ' 
03570                 | ' 	return c;
03570     F7 EA 01 F6 | 	mov	result1, _var01
03574                 | _fatfs_cc_ff_oem2uni_ret
03574     2D 00 64 FD | 	ret
03578                 | 
03578                 | _fatfs_cc_ff_wtoupper
03578     00 EF 01 F6 | 	mov	_var01, arg01
0357c     80 00 00 FF 
03580     00 EE 15 F2 | 	cmp	_var01, ##65536 wc
03584     60 01 90 3D |  if_ae	jmp	#LR__0603
03588     F7 F0 01 F6 | 	mov	_var02, _var01
0358c     F8 EE 31 F9 | 	getword	_var01, _var02, #0
03590     08 00 00 FF 
03594     00 EE 15 F2 | 	cmp	_var01, ##4096 wc
03598     00 E7 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
0359c     F3 F2 01 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
035a0     00 E7 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
035a4     01 00 00 3F 
035a8     F2 E6 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
035ac     F3 F2 01 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
035b0     01 00 00 3F 
035b4     F2 E6 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
035b8     F9 F4 01 F6 | 	mov	_var04, _var03
035bc                 | ' 		uc = (WORD)uni;
035bc                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
035bc                 | ' 		for (;;) {
035bc                 | LR__0590
035bc     FA F6 E1 FA | 	rdword	_var05, _var04
035c0     FB F2 01 F6 | 	mov	_var03, _var05
035c4     0F F2 4D F7 | 	zerox	_var03, #15 wz
035c8     02 F4 05 F1 | 	add	_var04, #2
035cc     14 01 90 AD |  if_e	jmp	#LR__0602
035d0     F8 F2 31 F9 | 	getword	_var03, _var02, #0
035d4     FB EE 31 F9 | 	getword	_var01, _var05, #0
035d8     F7 F2 11 F2 | 	cmp	_var03, _var01 wc
035dc     04 01 90 CD |  if_b	jmp	#LR__0602
035e0     FA F8 E1 FA | 	rdword	_var06, _var04
035e4     FC FA 31 F9 | 	getword	_var07, _var06, #0
035e8     08 FA 45 F0 | 	shr	_var07, #8
035ec     FC F8 31 F9 | 	getword	_var06, _var06, #0
035f0     FC F8 E1 F8 | 	getbyte	_var06, _var06, #0
035f4     F8 F2 31 F9 | 	getword	_var03, _var02, #0
035f8     FB FC 31 F9 | 	getword	_var08, _var05, #0
035fc     FC EE 31 F9 | 	getword	_var01, _var06, #0
03600     F7 FC 01 F1 | 	add	_var08, _var01
03604     FE F2 51 F2 | 	cmps	_var03, _var08 wc
03608     02 F4 05 F1 | 	add	_var04, #2
0360c     C4 00 90 3D |  if_ae	jmp	#LR__0601
03610                 | ' 				switch (cmd) {
03610     FD FE 31 F9 | 	getword	_var09, _var07, #0
03614     09 FE 25 F3 | 	fle	_var09, #9
03618     30 FE 61 FD | 	jmprel	_var09
0361c                 | LR__0591
0361c     24 00 90 FD | 	jmp	#LR__0592
03620     3C 00 90 FD | 	jmp	#LR__0593
03624     54 00 90 FD | 	jmp	#LR__0594
03628     5C 00 90 FD | 	jmp	#LR__0595
0362c     64 00 90 FD | 	jmp	#LR__0596
03630     6C 00 90 FD | 	jmp	#LR__0597
03634     74 00 90 FD | 	jmp	#LR__0598
03638     7C 00 90 FD | 	jmp	#LR__0599
0363c     84 00 90 FD | 	jmp	#LR__0600
03640     A0 00 90 FD | 	jmp	#LR__0602
03644                 | LR__0592
03644     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03648     FB F6 31 F9 | 	getword	_var05, _var05, #0
0364c     FB F0 81 F1 | 	sub	_var02, _var05
03650     01 F0 65 F0 | 	shl	_var02, #1
03654     FA F0 01 F1 | 	add	_var02, _var04
03658     F8 F0 E1 FA | 	rdword	_var02, _var02
0365c     84 00 90 FD | 	jmp	#LR__0602
03660                 | LR__0593
03660     F8 F2 31 F9 | 	getword	_var03, _var02, #0
03664     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03668     FB F6 31 F9 | 	getword	_var05, _var05, #0
0366c     FB F0 81 F1 | 	sub	_var02, _var05
03670     01 F0 05 F5 | 	and	_var02, #1
03674     F9 F0 C1 F2 | 	subr	_var02, _var03
03678     68 00 90 FD | 	jmp	#LR__0602
0367c                 | LR__0594
0367c     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03680     10 F0 85 F1 | 	sub	_var02, #16
03684     5C 00 90 FD | 	jmp	#LR__0602
03688                 | LR__0595
03688     F8 F0 31 F9 | 	getword	_var02, _var02, #0
0368c     20 F0 85 F1 | 	sub	_var02, #32
03690     50 00 90 FD | 	jmp	#LR__0602
03694                 | LR__0596
03694     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03698     30 F0 85 F1 | 	sub	_var02, #48
0369c     44 00 90 FD | 	jmp	#LR__0602
036a0                 | LR__0597
036a0     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036a4     1A F0 85 F1 | 	sub	_var02, #26
036a8     38 00 90 FD | 	jmp	#LR__0602
036ac                 | LR__0598
036ac     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036b0     08 F0 05 F1 | 	add	_var02, #8
036b4     2C 00 90 FD | 	jmp	#LR__0602
036b8                 | LR__0599
036b8     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036bc     50 F0 85 F1 | 	sub	_var02, #80
036c0     20 00 90 FD | 	jmp	#LR__0602
036c4                 | LR__0600
036c4     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036c8     0E 00 00 FF 
036cc     60 F0 85 F1 | 	sub	_var02, ##7264
036d0                 | ' 				}
036d0                 | ' 				break;
036d0     10 00 90 FD | 	jmp	#LR__0602
036d4                 | LR__0601
036d4     0F FA 4D F7 | 	zerox	_var07, #15 wz
036d8     02 F8 05 AA |  if_e	mul	_var06, #2
036dc     FC F4 01 A1 |  if_e	add	_var04, _var06
036e0     D8 FE 9F FD | 	jmp	#LR__0590
036e4                 | LR__0602
036e4     F8 EE 31 F9 | 	getword	_var01, _var02, #0
036e8                 | LR__0603
036e8                 | ' 		}
036e8                 | ' 		uni = uc;
036e8                 | ' 	}
036e8                 | ' 
036e8                 | ' 	return uni;
036e8     F7 EA 01 F6 | 	mov	result1, _var01
036ec                 | _fatfs_cc_ff_wtoupper_ret
036ec     2D 00 64 FD | 	ret
036f0                 | 
036f0                 | _fatfs_cc_strncpy
036f0     00 EF 01 F6 | 	mov	_var01, arg01
036f4     97 12 48 FB | 	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
036f8                 | ' 
036f8                 | ' 	dscan = dst;
036f8                 | ' 	sscan = src;
036f8                 | ' 	count = n;
036f8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
036f8                 | LR__0610
036f8     01 04 86 F1 | 	sub	arg03, #1
036fc     00 04 56 F2 | 	cmps	arg03, #0 wc
03700     18 00 90 CD |  if_b	jmp	#LR__0612
03704     01 EB C1 FA | 	rdbyte	result1, arg02
03708     F7 EA 41 FC | 	wrbyte	result1, _var01
0370c     01 02 06 F1 | 	add	arg02, #1
03710     F7 EA C9 FA | 	rdbyte	result1, _var01 wz
03714                 | ' 		continue;
03714     01 EE 05 F1 | 	add	_var01, #1
03718     DC FF 9F 5D |  if_ne	jmp	#LR__0610
0371c                 | LR__0611
0371c                 | LR__0612
0371c     97 0C 48 FB | 	callpa	#(@LR__0614-@LR__0613)>>2,fcache_load_ptr_
03720                 | ' 	while (--count >= 0)
03720                 | LR__0613
03720     01 04 86 F1 | 	sub	arg03, #1
03724     00 04 56 F2 | 	cmps	arg03, #0 wc
03728     F7 F0 01 36 |  if_ae	mov	_var02, _var01
0372c     01 EE 05 31 |  if_ae	add	_var01, #1
03730     F8 00 48 3C |  if_ae	wrbyte	#0, _var02
03734     E8 FF 9F 3D |  if_ae	jmp	#LR__0613
03738                 | LR__0614
03738                 | ' 		*dscan++ = '\0';
03738                 | ' 	return(dst);
03738     00 EB 01 F6 | 	mov	result1, arg01
0373c                 | _fatfs_cc_strncpy_ret
0373c     2D 00 64 FD | 	ret
03740                 | 
03740                 | _fatfs_cc_memcmp
03740                 | ' 	for (n = size; n > 0; n--)
03740     00 04 0E F2 | 	cmp	arg03, #0 wz
03744     28 00 90 AD |  if_e	jmp	#LR__0621
03748                 | LR__0620
03748     00 EF C1 FA | 	rdbyte	_var01, arg01
0374c     01 F1 C1 FA | 	rdbyte	_var02, arg02
03750     F8 EE 09 F2 | 	cmp	_var01, _var02 wz
03754     01 00 06 A1 |  if_e	add	arg01, #1
03758     01 02 06 A1 |  if_e	add	arg02, #1
0375c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
0375c     00 EB C1 5A |  if_ne	rdbyte	result1, arg01
03760     01 F1 C1 5A |  if_ne	rdbyte	_var02, arg02
03764     F8 EA 81 51 |  if_ne	sub	result1, _var02
03768     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
0376c     F6 05 6E FB | 	djnz	arg03, #LR__0620
03770                 | LR__0621
03770                 | ' 
03770                 | ' 	return(0);
03770     00 EA 05 F6 | 	mov	result1, #0
03774                 | _fatfs_cc_memcmp_ret
03774     2D 00 64 FD | 	ret
03778                 | 
03778                 | _fatfs_cc_strncmp
03778     00 EF 09 F6 | 	mov	_var01, arg01 wz
0377c     14 00 90 5D |  if_ne	jmp	#LR__0630
03780                 | ' 		return scan2 ? -1 : 0;
03780     00 02 0E F2 | 	cmp	arg02, #0 wz
03784     01 F0 65 56 |  if_ne	neg	_var02, #1
03788     00 F0 05 A6 |  if_e	mov	_var02, #0
0378c     F8 EA 01 F6 | 	mov	result1, _var02
03790     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
03794                 | LR__0630
03794     00 02 0E F2 | 	cmp	arg02, #0 wz
03798     01 EA 05 A6 |  if_e	mov	result1, #1
0379c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
037a0     02 F3 01 F6 | 	mov	_var03, arg03
037a4     97 16 48 FB | 	callpa	#(@LR__0632-@LR__0631)>>2,fcache_load_ptr_
037a8                 | ' 	count = n;
037a8                 | ' 	do {
037a8                 | LR__0631
037a8     F7 F4 C1 FA | 	rdbyte	_var04, _var01
037ac     01 F7 01 F6 | 	mov	_var05, arg02
037b0     FB F8 C1 FA | 	rdbyte	_var06, _var05
037b4     01 F2 85 F1 | 	sub	_var03, #1
037b8     00 F2 55 F2 | 	cmps	_var03, #0 wc
037bc     01 EE 05 F1 | 	add	_var01, #1
037c0     01 02 06 F1 | 	add	arg02, #1
037c4     00 F4 0D 32 |  if_ae	cmp	_var04, #0 wz
037c8     08 00 90 2D |  if_nc_and_z	jmp	#LR__0633
037cc     FC F4 09 32 |  if_ae	cmp	_var04, _var06 wz
037d0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__0631
037d4                 | LR__0632
037d4                 | LR__0633
037d4     00 F2 55 F2 | 	cmps	_var03, #0 wc
037d8                 | ' 		return(0);
037d8     00 EA 05 C6 |  if_b	mov	result1, #0
037dc     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
037e0     FC F4 09 F2 | 	cmp	_var04, _var06 wz
037e4                 | ' 		return(0);
037e4     00 EA 05 A6 |  if_e	mov	result1, #0
037e8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
037ec     00 F4 0D F2 | 	cmp	_var04, #0 wz
037f0                 | ' 		return(-1);
037f0     01 EA 65 A6 |  if_e	neg	result1, #1
037f4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
037f8     00 F8 0D F2 | 	cmp	_var06, #0 wz
037fc                 | ' 		return(1);
037fc     01 EA 05 A6 |  if_e	mov	result1, #1
03800                 | ' 		return(c1 - c2);
03800     FA EA 01 56 |  if_ne	mov	result1, _var04
03804     FC EA 81 51 |  if_ne	sub	result1, _var06
03808                 | _fatfs_cc_strncmp_ret
03808     2D 00 64 FD | 	ret
0380c                 | 
0380c                 | _fatfs_cc_strchr
0380c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
0380c                 | ' 	while ((c = *s++) != (char) charwanted)
0380c                 | LR__0640
0380c     00 EF 01 F6 | 	mov	_var01, arg01
03810     F7 F0 C1 FA | 	rdbyte	_var02, _var01
03814     F8 F2 E1 F8 | 	getbyte	_var03, _var02, #0
03818     01 F5 E1 F8 | 	getbyte	_var04, arg02, #0
0381c     FA F2 09 F2 | 	cmp	_var03, _var04 wz
03820     01 00 06 F1 | 	add	arg01, #1
03824     14 00 90 AD |  if_e	jmp	#LR__0641
03828     F8 F2 01 F6 | 	mov	_var03, _var02
0382c     07 F2 4D F7 | 	zerox	_var03, #7 wz
03830     00 EA 05 A6 |  if_e	mov	result1, #0
03834     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
03838     D0 FF 9F FD | 	jmp	#LR__0640
0383c                 | LR__0641
0383c                 | ' 	return((char *)--s);
0383c     01 00 86 F1 | 	sub	arg01, #1
03840     00 EB 01 F6 | 	mov	result1, arg01
03844                 | _fatfs_cc_strchr_ret
03844     2D 00 64 FD | 	ret
03848                 | 
03848                 | _fatfs_cc_disk_initialize
03848     04 4A 05 F6 | 	mov	COUNT_, #4
0384c     A8 00 A0 FD | 	call	#pushregs_
03850     40 F0 07 F1 | 	add	ptra, #64
03854     04 4E 05 F1 | 	add	fp, #4
03858     A7 00 42 FC | 	wrbyte	arg01, fp
0385c     01 00 00 FF 
03860     14 E2 05 F1 | 	add	objptr, ##532
03864     F1 06 02 FB | 	rdlong	arg04, objptr
03868     2C 4E 05 F1 | 	add	fp, #44
0386c     A7 06 62 FC | 	wrlong	arg04, fp
03870     04 E2 85 F1 | 	sub	objptr, #4
03874     F1 06 02 FB | 	rdlong	arg04, objptr
03878     04 4E 05 F1 | 	add	fp, #4
0387c     A7 06 62 FC | 	wrlong	arg04, fp
03880     08 E2 05 F1 | 	add	objptr, #8
03884     F1 06 02 FB | 	rdlong	arg04, objptr
03888     04 4E 05 F1 | 	add	fp, #4
0388c     A7 06 62 FC | 	wrlong	arg04, fp
03890     04 E2 05 F1 | 	add	objptr, #4
03894     F1 06 02 FB | 	rdlong	arg04, objptr
03898     04 4E 05 F1 | 	add	fp, #4
0389c     A7 06 62 FC | 	wrlong	arg04, fp
038a0     04 E2 05 F1 | 	add	objptr, #4
038a4     F1 02 48 FC | 	wrbyte	#1, objptr
038a8     01 00 00 FF 
038ac     20 E2 85 F1 | 	sub	objptr, ##544
038b0     38 4E 85 F1 | 	sub	fp, #56
038b4     A7 06 CA FA | 	rdbyte	arg04, fp wz
038b8     04 4E 85 F1 | 	sub	fp, #4
038bc                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
038bc                 | '             return RES_NOTRDY;
038bc     03 EA 05 56 |  if_ne	mov	result1, #3
038c0     D8 05 90 5D |  if_ne	jmp	#LR__0668
038c4     13 00 00 FF 
038c8     10 01 06 F6 | 	mov	arg01, ##10000
038cc     3C D6 BF FD | 	call	#__system___waitus
038d0     30 4E 05 F1 | 	add	fp, #48
038d4     A7 00 02 FB | 	rdlong	arg01, fp
038d8     00 01 08 FC | 	wrpin	#0, arg01
038dc     04 4E 05 F1 | 	add	fp, #4
038e0     A7 00 02 FB | 	rdlong	arg01, fp
038e4     00 01 08 FC | 	wrpin	#0, arg01
038e8     04 4E 05 F1 | 	add	fp, #4
038ec     A7 00 02 FB | 	rdlong	arg01, fp
038f0     00 01 08 FC | 	wrpin	#0, arg01
038f4     04 4E 05 F1 | 	add	fp, #4
038f8     A7 00 02 FB | 	rdlong	arg01, fp
038fc     09 00 80 FF 
03900     00 01 08 FC | 	wrpin	##4608, arg01
03904     0C 4E 85 F1 | 	sub	fp, #12
03908     A7 00 02 FB | 	rdlong	arg01, fp
0390c     59 00 62 FD | 	drvh	arg01
03910     04 4E 05 F1 | 	add	fp, #4
03914     A7 00 02 FB | 	rdlong	arg01, fp
03918     59 00 62 FD | 	drvh	arg01
0391c     04 4E 05 F1 | 	add	fp, #4
03920     A7 00 02 FB | 	rdlong	arg01, fp
03924     59 00 62 FD | 	drvh	arg01
03928     04 4E 05 F1 | 	add	fp, #4
0392c     A7 00 02 FB | 	rdlong	arg01, fp
03930     59 00 62 FD | 	drvh	arg01
03934     20 4E 85 F1 | 	sub	fp, #32
03938     00 04 80 FF 
0393c     A7 20 68 FC | 	wrlong	##524304, fp
03940     04 4E 05 F1 | 	add	fp, #4
03944     20 03 80 FF 
03948     A7 90 68 FC | 	wrlong	##409672, fp
0394c     14 4E 05 F1 | 	add	fp, #20
03950     A7 0A 02 FB | 	rdlong	local01, fp
03954     18 4E 85 F1 | 	sub	fp, #24
03958     A7 04 02 FB | 	rdlong	arg03, fp
0395c     40 0A 62 FD | 	dirl	local01
03960     A0 03 80 FF 
03964     05 91 08 FC | 	wrpin	##475208, local01
03968     05 05 12 FC | 	wxpin	arg03, local01
0396c     05 01 28 FC | 	wypin	#0, local01
03970     41 0A 62 FD | 	dirh	local01
03974     1C 4E 05 F1 | 	add	fp, #28
03978     A7 0C 02 FB | 	rdlong	local02, fp
0397c     06 0B 82 F1 | 	sub	local01, local02
03980     07 0A 06 F5 | 	and	local01, #7
03984     18 0A 66 F0 | 	shl	local01, #24
03988     78 02 06 F6 | 	mov	arg02, #120
0398c     05 03 42 F5 | 	or	arg02, local01
03990     14 4E 85 F1 | 	sub	fp, #20
03994     A7 02 62 FC | 	wrlong	arg02, fp
03998     14 4E 05 F1 | 	add	fp, #20
0399c     A7 00 02 FB | 	rdlong	arg01, fp
039a0     10 02 26 F4 | 	bith	arg02, #16
039a4     40 00 62 FD | 	dirl	arg01
039a8     00 03 02 FC | 	wrpin	arg02, arg01
039ac     00 3F 18 FC | 	wxpin	#31, arg01
039b0     FF FF FF FF 
039b4     00 FF 2B FC | 	wypin	##-1, arg01
039b8     41 00 62 FD | 	dirh	arg01
039bc     04 4E 85 F1 | 	sub	fp, #4
039c0     A7 02 02 FB | 	rdlong	arg02, fp
039c4     08 4E 05 F1 | 	add	fp, #8
039c8     A7 0E 02 FB | 	rdlong	local03, fp
039cc     07 03 82 F1 | 	sub	arg02, local03
039d0     07 02 06 F5 | 	and	arg02, #7
039d4     18 02 66 F0 | 	shl	arg02, #24
039d8     14 4E 85 F1 | 	sub	fp, #20
039dc     A7 02 62 FC | 	wrlong	arg02, fp
039e0     29 00 00 FF 
039e4     7A 02 46 F5 | 	or	arg02, ##21114
039e8     A7 02 62 FC | 	wrlong	arg02, fp
039ec     14 4E 05 F1 | 	add	fp, #20
039f0     A7 00 02 FB | 	rdlong	arg01, fp
039f4     40 00 62 FD | 	dirl	arg01
039f8     00 03 02 FC | 	wrpin	arg02, arg01
039fc     00 4F 18 FC | 	wxpin	#39, arg01
03a00     00 01 28 FC | 	wypin	#0, arg01
03a04     41 00 62 FD | 	dirh	arg01
03a08     28 4E 85 F1 | 	sub	fp, #40
03a0c     A7 00 02 F6 | 	mov	arg01, fp
03a10     14 4E 85 F1 | 	sub	fp, #20
03a14     0A 02 06 F6 | 	mov	arg02, #10
03a18     08 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03a1c     00 00 06 F6 | 	mov	arg01, #0
03a20     00 02 06 F6 | 	mov	arg02, #0
03a24     D4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03a28     10 80 B0 FD | 	call	#_fatfs_cc_deselect_0605
03a2c     64 00 06 F6 | 	mov	arg01, #100
03a30     D8 D4 BF FD | 	call	#__system___waitus
03a34     14 4E 05 F1 | 	add	fp, #20
03a38     A7 00 02 F6 | 	mov	arg01, fp
03a3c     14 4E 85 F1 | 	sub	fp, #20
03a40     0A 02 06 F6 | 	mov	arg02, #10
03a44     DC 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03a48     0C 4E 05 F1 | 	add	fp, #12
03a4c     A7 00 48 FC | 	wrbyte	#0, fp
03a50     0C 4E 85 F1 | 	sub	fp, #12
03a54     00 00 06 F6 | 	mov	arg01, #0
03a58     00 02 06 F6 | 	mov	arg02, #0
03a5c     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03a60     F5 06 E2 F8 | 	getbyte	arg04, result1, #0
03a64     01 06 0E F2 | 	cmp	arg04, #1 wz
03a68     B8 03 90 5D |  if_ne	jmp	#LR__0667
03a6c     08 00 06 F6 | 	mov	arg01, #8
03a70     AA 03 06 F6 | 	mov	arg02, #426
03a74     84 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03a78     F5 EA E1 F8 | 	getbyte	result1, result1, #0
03a7c     01 EA 0D F2 | 	cmp	result1, #1 wz
03a80     98 01 90 5D |  if_ne	jmp	#LR__0653
03a84     14 4E 05 F1 | 	add	fp, #20
03a88     A7 00 02 F6 | 	mov	arg01, fp
03a8c     14 4E 85 F1 | 	sub	fp, #20
03a90     04 02 06 F6 | 	mov	arg02, #4
03a94     8C 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03a98     16 4E 05 F1 | 	add	fp, #22
03a9c     A7 10 C2 FA | 	rdbyte	local04, fp
03aa0     16 4E 85 F1 | 	sub	fp, #22
03aa4     01 10 0E F2 | 	cmp	local04, #1 wz
03aa8     17 4E 05 A1 |  if_e	add	fp, #23
03aac     A7 0E C2 AA |  if_e	rdbyte	local03, fp
03ab0     17 4E 85 A1 |  if_e	sub	fp, #23
03ab4     AA 0E 0E A2 |  if_e	cmp	local03, #170 wz
03ab8     68 03 90 5D |  if_ne	jmp	#LR__0666
03abc                 | ' 				for (tmr = 1000; tmr; tmr--) {
03abc     18 4E 05 F1 | 	add	fp, #24
03ac0     01 00 80 FF 
03ac4     A7 D0 6B FC | 	wrlong	##1000, fp
03ac8     18 4E 85 F1 | 	sub	fp, #24
03acc                 | LR__0650
03acc     18 4E 05 F1 | 	add	fp, #24
03ad0     A7 0A 0A FB | 	rdlong	local01, fp wz
03ad4     18 4E 85 F1 | 	sub	fp, #24
03ad8     3C 00 90 AD |  if_e	jmp	#LR__0651
03adc     A9 00 06 F6 | 	mov	arg01, #169
03ae0     1E 02 C6 F9 | 	decod	arg02, #30
03ae4     14 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03ae8     F5 10 02 F6 | 	mov	local04, result1
03aec     07 10 4E F7 | 	zerox	local04, #7 wz
03af0     24 00 90 AD |  if_e	jmp	#LR__0651
03af4     01 00 00 FF 
03af8     E8 01 06 F6 | 	mov	arg01, ##1000
03afc     0C D4 BF FD | 	call	#__system___waitus
03b00     18 4E 05 F1 | 	add	fp, #24
03b04     A7 10 02 FB | 	rdlong	local04, fp
03b08     01 10 86 F1 | 	sub	local04, #1
03b0c     A7 10 62 FC | 	wrlong	local04, fp
03b10     18 4E 85 F1 | 	sub	fp, #24
03b14     B4 FF 9F FD | 	jmp	#LR__0650
03b18                 | LR__0651
03b18     18 4E 05 F1 | 	add	fp, #24
03b1c     A7 10 0A FB | 	rdlong	local04, fp wz
03b20     18 4E 85 F1 | 	sub	fp, #24
03b24     4C 00 90 AD |  if_e	jmp	#LR__0652
03b28     3A 00 06 F6 | 	mov	arg01, #58
03b2c     00 02 06 F6 | 	mov	arg02, #0
03b30     C8 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03b34     F5 0E 02 F6 | 	mov	local03, result1
03b38     07 0E 4E F7 | 	zerox	local03, #7 wz
03b3c     34 00 90 5D |  if_ne	jmp	#LR__0652
03b40     14 4E 05 F1 | 	add	fp, #20
03b44     A7 00 02 F6 | 	mov	arg01, fp
03b48     14 4E 85 F1 | 	sub	fp, #20
03b4c     04 02 06 F6 | 	mov	arg02, #4
03b50     D0 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03b54     14 4E 05 F1 | 	add	fp, #20
03b58     A7 0A C2 FA | 	rdbyte	local01, fp
03b5c     40 0A CE F7 | 	test	local01, #64 wz
03b60     0C 10 06 56 |  if_ne	mov	local04, #12
03b64     04 10 06 A6 |  if_e	mov	local04, #4
03b68     08 4E 85 F1 | 	sub	fp, #8
03b6c     A7 10 42 FC | 	wrbyte	local04, fp
03b70     0C 4E 85 F1 | 	sub	fp, #12
03b74                 | LR__0652
03b74     14 10 06 FB | 	rdlong	local04, #20
03b78     18 4E 05 F1 | 	add	fp, #24
03b7c     A7 10 62 FC | 	wrlong	local04, fp
03b80     0C 4E 05 F1 | 	add	fp, #12
03b84     A7 10 02 FB | 	rdlong	local04, fp
03b88     1B 10 26 F4 | 	bith	local04, #27
03b8c     A7 10 62 FC | 	wrlong	local04, fp
03b90     0C 4E 85 F1 | 	sub	fp, #12
03b94     A7 10 02 FB | 	rdlong	local04, fp
03b98     18 4E 85 F1 | 	sub	fp, #24
03b9c     68 78 04 FF 
03ba0     81 11 16 F2 | 	cmp	local04, ##150000001 wc
03ba4     1C 4E 05 C1 |  if_b	add	fp, #28
03ba8     00 01 80 CF 
03bac     A7 08 68 CC |  if_b	wrlong	##131076, fp
03bb0     1C 4E 85 C1 |  if_b	sub	fp, #28
03bb4     6C 02 90 CD |  if_b	jmp	#LR__0666
03bb8     18 4E 05 F1 | 	add	fp, #24
03bbc     A7 10 02 FB | 	rdlong	local04, fp
03bc0     18 4E 85 F1 | 	sub	fp, #24
03bc4     E1 F5 05 FF 
03bc8     01 10 16 F2 | 	cmp	local04, ##200000001 wc
03bcc     1C 4E 05 C1 |  if_b	add	fp, #28
03bd0     00 01 80 CF 
03bd4     A7 0A 68 CC |  if_b	wrlong	##131077, fp
03bd8     1C 4E 85 C1 |  if_b	sub	fp, #28
03bdc     44 02 90 CD |  if_b	jmp	#LR__0666
03be0     18 4E 05 F1 | 	add	fp, #24
03be4     A7 10 02 FB | 	rdlong	local04, fp
03be8     18 4E 85 F1 | 	sub	fp, #24
03bec     3B 58 08 FF 
03bf0     01 10 16 F2 | 	cmp	local04, ##280000001 wc
03bf4     1C 4E 05 C1 |  if_b	add	fp, #28
03bf8     00 01 80 CF 
03bfc     A7 0C 68 CC |  if_b	wrlong	##131078, fp
03c00     1C 4E 85 C1 |  if_b	sub	fp, #28
03c04     1C 02 90 CD |  if_b	jmp	#LR__0666
03c08     1C 4E 05 F1 | 	add	fp, #28
03c0c     80 01 80 FF 
03c10     A7 10 68 FC | 	wrlong	##196616, fp
03c14     1C 4E 85 F1 | 	sub	fp, #28
03c18     08 02 90 FD | 	jmp	#LR__0666
03c1c                 | LR__0653
03c1c     A9 00 06 F6 | 	mov	arg01, #169
03c20     00 02 06 F6 | 	mov	arg02, #0
03c24     D4 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03c28     F5 10 E2 F8 | 	getbyte	local04, result1, #0
03c2c     02 10 16 F2 | 	cmp	local04, #2 wc
03c30     18 00 90 3D |  if_ae	jmp	#LR__0654
03c34     0C 4E 05 F1 | 	add	fp, #12
03c38     A7 04 48 FC | 	wrbyte	#2, fp
03c3c     04 4E 05 F1 | 	add	fp, #4
03c40     A7 52 49 FC | 	wrbyte	#169, fp
03c44     10 4E 85 F1 | 	sub	fp, #16
03c48     14 00 90 FD | 	jmp	#LR__0655
03c4c                 | LR__0654
03c4c     0C 4E 05 F1 | 	add	fp, #12
03c50     A7 02 48 FC | 	wrbyte	#1, fp
03c54     04 4E 05 F1 | 	add	fp, #4
03c58     A7 02 48 FC | 	wrbyte	#1, fp
03c5c     10 4E 85 F1 | 	sub	fp, #16
03c60                 | LR__0655
03c60                 | ' 				ty =  0x01 ; cmd =  (1) ;
03c60                 | ' 			}
03c60                 | ' 			for (tmr = 1000; tmr; tmr--) {
03c60     18 4E 05 F1 | 	add	fp, #24
03c64     01 00 80 FF 
03c68     A7 D0 6B FC | 	wrlong	##1000, fp
03c6c     18 4E 85 F1 | 	sub	fp, #24
03c70                 | LR__0656
03c70     18 4E 05 F1 | 	add	fp, #24
03c74     A7 0E 0A FB | 	rdlong	local03, fp wz
03c78     18 4E 85 F1 | 	sub	fp, #24
03c7c     44 00 90 AD |  if_e	jmp	#LR__0657
03c80     10 4E 05 F1 | 	add	fp, #16
03c84     A7 00 C2 FA | 	rdbyte	arg01, fp
03c88     10 4E 85 F1 | 	sub	fp, #16
03c8c     00 02 06 F6 | 	mov	arg02, #0
03c90     68 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03c94     F5 10 02 F6 | 	mov	local04, result1
03c98     07 10 4E F7 | 	zerox	local04, #7 wz
03c9c     24 00 90 AD |  if_e	jmp	#LR__0657
03ca0     01 00 00 FF 
03ca4     E8 01 06 F6 | 	mov	arg01, ##1000
03ca8     60 D2 BF FD | 	call	#__system___waitus
03cac     18 4E 05 F1 | 	add	fp, #24
03cb0     A7 10 02 FB | 	rdlong	local04, fp
03cb4     01 10 86 F1 | 	sub	local04, #1
03cb8     A7 10 62 FC | 	wrlong	local04, fp
03cbc     18 4E 85 F1 | 	sub	fp, #24
03cc0     AC FF 9F FD | 	jmp	#LR__0656
03cc4                 | LR__0657
03cc4     18 4E 05 F1 | 	add	fp, #24
03cc8     A7 10 0A FB | 	rdlong	local04, fp wz
03ccc     18 4E 85 F1 | 	sub	fp, #24
03cd0     14 00 90 AD |  if_e	jmp	#LR__0658
03cd4     10 00 06 F6 | 	mov	arg01, #16
03cd8     09 02 C6 F9 | 	decod	arg02, #9
03cdc     1C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03ce0     07 EA 4D F7 | 	zerox	result1, #7 wz
03ce4     0C 00 90 AD |  if_e	jmp	#LR__0659
03ce8                 | LR__0658
03ce8     0C 4E 05 F1 | 	add	fp, #12
03cec     A7 00 48 FC | 	wrbyte	#0, fp
03cf0     0C 4E 85 F1 | 	sub	fp, #12
03cf4                 | LR__0659
03cf4     14 10 06 FB | 	rdlong	local04, #20
03cf8     18 4E 05 F1 | 	add	fp, #24
03cfc     A7 10 62 FC | 	wrlong	local04, fp
03d00     18 4E 85 F1 | 	sub	fp, #24
03d04     F0 FA 02 FF 
03d08     01 11 16 F2 | 	cmp	local04, ##100000001 wc
03d0c     18 00 90 3D |  if_ae	jmp	#LR__0660
03d10     24 4E 05 F1 | 	add	fp, #36
03d14     A7 10 02 FB | 	rdlong	local04, fp
03d18     1B 10 26 F4 | 	bith	local04, #27
03d1c     A7 10 62 FC | 	wrlong	local04, fp
03d20     24 4E 85 F1 | 	sub	fp, #36
03d24     2C 00 90 FD | 	jmp	#LR__0661
03d28                 | LR__0660
03d28     18 4E 05 F1 | 	add	fp, #24
03d2c     A7 10 02 FB | 	rdlong	local04, fp
03d30     18 4E 85 F1 | 	sub	fp, #24
03d34     E1 F5 05 FF 
03d38     01 10 16 F2 | 	cmp	local04, ##200000001 wc
03d3c     24 4E 05 C1 |  if_b	add	fp, #36
03d40     A7 10 02 CB |  if_b	rdlong	local04, fp
03d44     80 00 04 CF 
03d48     00 10 46 C5 |  if_b	or	local04, ##134283264
03d4c     A7 10 62 CC |  if_b	wrlong	local04, fp
03d50     24 4E 85 C1 |  if_b	sub	fp, #36
03d54                 | LR__0661
03d54     18 4E 05 F1 | 	add	fp, #24
03d58     A7 10 02 FB | 	rdlong	local04, fp
03d5c     18 4E 85 F1 | 	sub	fp, #24
03d60     F0 FA 02 FF 
03d64     01 11 16 F2 | 	cmp	local04, ##100000001 wc
03d68     1C 4E 05 C1 |  if_b	add	fp, #28
03d6c     00 01 80 CF 
03d70     A7 08 68 CC |  if_b	wrlong	##131076, fp
03d74     1C 4E 85 C1 |  if_b	sub	fp, #28
03d78     A8 00 90 CD |  if_b	jmp	#LR__0665
03d7c     18 4E 05 F1 | 	add	fp, #24
03d80     A7 10 02 FB | 	rdlong	local04, fp
03d84     18 4E 85 F1 | 	sub	fp, #24
03d88     68 78 04 FF 
03d8c     81 11 16 F2 | 	cmp	local04, ##150000001 wc
03d90     1C 4E 05 C1 |  if_b	add	fp, #28
03d94     80 01 80 CF 
03d98     A7 0C 68 CC |  if_b	wrlong	##196614, fp
03d9c     1C 4E 85 C1 |  if_b	sub	fp, #28
03da0     80 00 90 CD |  if_b	jmp	#LR__0664
03da4     18 4E 05 F1 | 	add	fp, #24
03da8     A7 10 02 FB | 	rdlong	local04, fp
03dac     18 4E 85 F1 | 	sub	fp, #24
03db0     E1 F5 05 FF 
03db4     01 10 16 F2 | 	cmp	local04, ##200000001 wc
03db8     1C 4E 05 C1 |  if_b	add	fp, #28
03dbc     00 02 80 CF 
03dc0     A7 10 68 CC |  if_b	wrlong	##262152, fp
03dc4     1C 4E 85 C1 |  if_b	sub	fp, #28
03dc8     58 00 90 CD |  if_b	jmp	#LR__0663
03dcc     18 4E 05 F1 | 	add	fp, #24
03dd0     A7 10 02 FB | 	rdlong	local04, fp
03dd4     18 4E 85 F1 | 	sub	fp, #24
03dd8     59 73 07 FF 
03ddc     81 10 16 F2 | 	cmp	local04, ##250000001 wc
03de0     1C 4E 05 C1 |  if_b	add	fp, #28
03de4     80 02 80 CF 
03de8     A7 14 68 CC |  if_b	wrlong	##327690, fp
03dec     1C 4E 85 C1 |  if_b	sub	fp, #28
03df0     30 00 90 CD |  if_b	jmp	#LR__0662
03df4     18 4E 05 F1 | 	add	fp, #24
03df8     A7 10 02 FB | 	rdlong	local04, fp
03dfc     18 4E 85 F1 | 	sub	fp, #24
03e00     D1 F0 08 FF 
03e04     01 11 16 F2 | 	cmp	local04, ##300000001 wc
03e08     1C 4E 05 C1 |  if_b	add	fp, #28
03e0c     00 03 80 CF 
03e10     A7 18 68 CC |  if_b	wrlong	##393228, fp
03e14     1C 4E 85 F3 | 	sumc	fp, #28
03e18     80 03 80 3F 
03e1c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
03e20     1C 4E 85 31 |  if_ae	sub	fp, #28
03e24                 | LR__0662
03e24                 | LR__0663
03e24                 | LR__0664
03e24                 | LR__0665
03e24                 | LR__0666
03e24                 | LR__0667
03e24     0C 4E 05 F1 | 	add	fp, #12
03e28     A7 10 C2 FA | 	rdbyte	local04, fp
03e2c     01 00 00 FF 
03e30     21 E2 05 F1 | 	add	objptr, ##545
03e34     F1 10 42 FC | 	wrbyte	local04, objptr
03e38     A7 0A CA FA | 	rdbyte	local01, fp wz
03e3c     00 10 06 56 |  if_ne	mov	local04, #0
03e40     01 10 06 A6 |  if_e	mov	local04, #1
03e44     20 4E 05 F1 | 	add	fp, #32
03e48     A7 10 42 FC | 	wrbyte	local04, fp
03e4c     A7 10 C2 FA | 	rdbyte	local04, fp
03e50     2C 4E 85 F1 | 	sub	fp, #44
03e54     01 E2 85 F1 | 	sub	objptr, #1
03e58     F1 10 42 FC | 	wrbyte	local04, objptr
03e5c     01 00 00 FF 
03e60     20 E2 85 F1 | 	sub	objptr, ##544
03e64     D4 7B B0 FD | 	call	#_fatfs_cc_deselect_0605
03e68     34 4E 05 F1 | 	add	fp, #52
03e6c     A7 00 02 FB | 	rdlong	arg01, fp
03e70     18 4E 85 F1 | 	sub	fp, #24
03e74     A7 02 02 FB | 	rdlong	arg02, fp
03e78     00 03 12 FC | 	wxpin	arg02, arg01
03e7c     1C 4E 05 F1 | 	add	fp, #28
03e80     A7 00 02 FB | 	rdlong	arg01, fp
03e84     14 4E 85 F1 | 	sub	fp, #20
03e88     A7 02 02 FB | 	rdlong	arg02, fp
03e8c     00 03 02 FC | 	wrpin	arg02, arg01
03e90                 | ' 
03e90                 | ' 		}
03e90                 | ' 	}
03e90                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
03e90                 | ' 	CardType = ty;
03e90                 | ' 	s = ty ? 0 :  0x01 ;
03e90                 | ' 	Stat = s;
03e90                 | ' 
03e90                 | ' 	deselect();
03e90                 | ' 
03e90                 | ' 
03e90                 | ' 	_wxpin( PIN_CLK, ck_div );
03e90                 | ' 	_wrpin( PIN_DI, spm_tx );
03e90                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
03e90                 | ' 	return s;
03e90     08 4E 05 F1 | 	add	fp, #8
03e94     A7 EA C1 FA | 	rdbyte	result1, fp
03e98     2C 4E 85 F1 | 	sub	fp, #44
03e9c                 | LR__0668
03e9c     A7 F0 03 F6 | 	mov	ptra, fp
03ea0     B2 00 A0 FD | 	call	#popregs_
03ea4                 | _fatfs_cc_disk_initialize_ret
03ea4     2D 00 64 FD | 	ret
03ea8                 | 
03ea8                 | _fatfs_cc_disk_read
03ea8     05 4A 05 F6 | 	mov	COUNT_, #5
03eac     A8 00 A0 FD | 	call	#pushregs_
03eb0     01 0B 02 F6 | 	mov	local01, arg02
03eb4     02 0D 02 F6 | 	mov	local02, arg03
03eb8     03 0F 02 F6 | 	mov	local03, arg04
03ebc     00 00 0E F2 | 	cmp	arg01, #0 wz
03ec0     01 EA 05 56 |  if_ne	mov	result1, #1
03ec4                 | ' 
03ec4                 | ' 	return Stat;
03ec4     01 00 00 AF 
03ec8     20 E2 05 A1 |  if_e	add	objptr, ##544
03ecc     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
03ed0     01 00 00 AF 
03ed4     20 E2 85 A1 |  if_e	sub	objptr, ##544
03ed8     F5 EA E1 F8 | 	getbyte	result1, result1, #0
03edc     01 EA CD F7 | 	test	result1, #1 wz
03ee0     03 EA 05 56 |  if_ne	mov	result1, #3
03ee4     84 00 90 5D |  if_ne	jmp	#LR__0672
03ee8     01 00 00 FF 
03eec     21 E2 05 F1 | 	add	objptr, ##545
03ef0     F1 10 C2 FA | 	rdbyte	local04, objptr
03ef4     01 00 00 FF 
03ef8     21 E2 85 F1 | 	sub	objptr, ##545
03efc     08 10 CE F7 | 	test	local04, #8 wz
03f00     09 0C 66 A0 |  if_e	shl	local02, #9
03f04     02 0E 16 F2 | 	cmp	local03, #2 wc
03f08     12 10 06 36 |  if_ae	mov	local04, #18
03f0c     11 10 06 C6 |  if_b	mov	local04, #17
03f10     06 03 02 F6 | 	mov	arg02, local02
03f14     08 01 02 F6 | 	mov	arg01, local04
03f18     E0 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03f1c     F5 12 02 F6 | 	mov	local05, result1
03f20     07 12 4E F7 | 	zerox	local05, #7 wz
03f24     30 00 90 5D |  if_ne	jmp	#LR__0671
03f28                 | ' 		do {
03f28                 | LR__0670
03f28     05 01 02 F6 | 	mov	arg01, local01
03f2c     09 02 C6 F9 | 	decod	arg02, #9
03f30     1C 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0613
03f34     00 EA 0D F2 | 	cmp	result1, #0 wz
03f38     01 00 00 5F 
03f3c     00 0A 06 51 |  if_ne	add	local01, ##512
03f40     F9 0F 6E 5B |  if_ne	djnz	local03, #LR__0670
03f44     08 11 E2 F8 | 	getbyte	local04, local04, #0
03f48     12 10 0E F2 | 	cmp	local04, #18 wz
03f4c     0C 00 06 A6 |  if_e	mov	arg01, #12
03f50     00 02 06 A6 |  if_e	mov	arg02, #0
03f54     A4 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0619
03f58                 | LR__0671
03f58     E0 7A B0 FD | 	call	#_fatfs_cc_deselect_0605
03f5c                 | ' 	}
03f5c                 | ' 	deselect();
03f5c                 | ' 
03f5c                 | ' 	return count ? RES_ERROR : RES_OK;
03f5c     00 0E 0E F2 | 	cmp	local03, #0 wz
03f60     01 12 06 56 |  if_ne	mov	local05, #1
03f64     00 12 06 A6 |  if_e	mov	local05, #0
03f68     09 EB 01 F6 | 	mov	result1, local05
03f6c                 | LR__0672
03f6c     A7 F0 03 F6 | 	mov	ptra, fp
03f70     B2 00 A0 FD | 	call	#popregs_
03f74                 | _fatfs_cc_disk_read_ret
03f74     2D 00 64 FD | 	ret
03f78                 | 
03f78                 | _fatfs_cc_disk_write
03f78     04 4A 05 F6 | 	mov	COUNT_, #4
03f7c     A8 00 A0 FD | 	call	#pushregs_
03f80     01 0B 02 F6 | 	mov	local01, arg02
03f84     03 0D 02 F6 | 	mov	local02, arg04
03f88     02 0F 02 F6 | 	mov	local03, arg03
03f8c     00 00 0E F2 | 	cmp	arg01, #0 wz
03f90     01 EA 05 56 |  if_ne	mov	result1, #1
03f94                 | ' 
03f94                 | ' 	return Stat;
03f94     01 00 00 AF 
03f98     20 E2 05 A1 |  if_e	add	objptr, ##544
03f9c     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
03fa0     01 00 00 AF 
03fa4     20 E2 85 A1 |  if_e	sub	objptr, ##544
03fa8     F5 EA E1 F8 | 	getbyte	result1, result1, #0
03fac     01 EA CD F7 | 	test	result1, #1 wz
03fb0     03 EA 05 56 |  if_ne	mov	result1, #3
03fb4     D4 00 90 5D |  if_ne	jmp	#LR__0684
03fb8     01 00 00 FF 
03fbc     21 E2 05 F1 | 	add	objptr, ##545
03fc0     F1 04 C2 FA | 	rdbyte	arg03, objptr
03fc4     01 00 00 FF 
03fc8     21 E2 85 F1 | 	sub	objptr, ##545
03fcc     08 04 CE F7 | 	test	arg03, #8 wz
03fd0     09 0E 66 A0 |  if_e	shl	local03, #9
03fd4     01 0C 0E F2 | 	cmp	local02, #1 wz
03fd8     30 00 90 5D |  if_ne	jmp	#LR__0680
03fdc     18 00 06 F6 | 	mov	arg01, #24
03fe0     07 03 02 F6 | 	mov	arg02, local03
03fe4     14 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03fe8     F5 10 02 F6 | 	mov	local04, result1
03fec     07 10 4E F7 | 	zerox	local04, #7 wz
03ff0     84 00 90 5D |  if_ne	jmp	#LR__0683
03ff4     05 01 02 F6 | 	mov	arg01, local01
03ff8     FE 02 06 F6 | 	mov	arg02, #254
03ffc     30 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0615
04000     00 EA 0D F2 | 	cmp	result1, #0 wz
04004     00 0C 06 56 |  if_ne	mov	local02, #0
04008     6C 00 90 FD | 	jmp	#LR__0683
0400c                 | LR__0680
0400c     01 00 00 FF 
04010     21 E2 05 F1 | 	add	objptr, ##545
04014     F1 10 C2 FA | 	rdbyte	local04, objptr
04018     01 00 00 FF 
0401c     21 E2 85 F1 | 	sub	objptr, ##545
04020     06 10 CE F7 | 	test	local04, #6 wz
04024     97 00 06 56 |  if_ne	mov	arg01, #151
04028     06 03 02 56 |  if_ne	mov	arg02, local02
0402c     CC 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0619
04030     07 03 02 F6 | 	mov	arg02, local03
04034     19 00 06 F6 | 	mov	arg01, #25
04038     C0 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0619
0403c     F5 10 02 F6 | 	mov	local04, result1
04040     07 10 4E F7 | 	zerox	local04, #7 wz
04044     30 00 90 5D |  if_ne	jmp	#LR__0682
04048                 | ' 			do {
04048                 | LR__0681
04048     05 01 02 F6 | 	mov	arg01, local01
0404c     FC 02 06 F6 | 	mov	arg02, #252
04050     DC 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0615
04054     00 EA 0D F2 | 	cmp	result1, #0 wz
04058     01 00 00 5F 
0405c     00 0A 06 51 |  if_ne	add	local01, ##512
04060     F9 0D 6E 5B |  if_ne	djnz	local02, #LR__0681
04064     00 00 06 F6 | 	mov	arg01, #0
04068     FD 02 06 F6 | 	mov	arg02, #253
0406c     C0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0615
04070     00 EA 0D F2 | 	cmp	result1, #0 wz
04074     01 0C 06 A6 |  if_e	mov	local02, #1
04078                 | LR__0682
04078                 | LR__0683
04078     C0 79 B0 FD | 	call	#_fatfs_cc_deselect_0605
0407c                 | ' 				count = 1;
0407c                 | ' 		}
0407c                 | ' 	}
0407c                 | ' 	deselect();
0407c                 | ' 
0407c                 | ' 	return count ? RES_ERROR : RES_OK;
0407c     00 0C 0E F2 | 	cmp	local02, #0 wz
04080     01 10 06 56 |  if_ne	mov	local04, #1
04084     00 10 06 A6 |  if_e	mov	local04, #0
04088     08 EB 01 F6 | 	mov	result1, local04
0408c                 | LR__0684
0408c     A7 F0 03 F6 | 	mov	ptra, fp
04090     B2 00 A0 FD | 	call	#popregs_
04094                 | _fatfs_cc_disk_write_ret
04094     2D 00 64 FD | 	ret
04098                 | 
04098                 | _fatfs_cc_disk_ioctl
04098     01 4A 05 F6 | 	mov	COUNT_, #1
0409c     A8 00 A0 FD | 	call	#pushregs_
040a0     30 F0 07 F1 | 	add	ptra, #48
040a4     04 4E 05 F1 | 	add	fp, #4
040a8     A7 00 42 FC | 	wrbyte	arg01, fp
040ac     04 4E 05 F1 | 	add	fp, #4
040b0     A7 02 42 FC | 	wrbyte	arg02, fp
040b4     04 4E 05 F1 | 	add	fp, #4
040b8     A7 04 62 FC | 	wrlong	arg03, fp
040bc     08 4E 85 F1 | 	sub	fp, #8
040c0     A7 00 CA FA | 	rdbyte	arg01, fp wz
040c4     04 4E 85 F1 | 	sub	fp, #4
040c8     01 EA 05 56 |  if_ne	mov	result1, #1
040cc                 | ' 
040cc                 | ' 	return Stat;
040cc     01 00 00 AF 
040d0     20 E2 05 A1 |  if_e	add	objptr, ##544
040d4     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
040d8     01 00 00 AF 
040dc     20 E2 85 A1 |  if_e	sub	objptr, ##544
040e0     F5 EA E1 F8 | 	getbyte	result1, result1, #0
040e4     01 EA CD F7 | 	test	result1, #1 wz
040e8     03 EA 05 56 |  if_ne	mov	result1, #3
040ec     E4 01 90 5D |  if_ne	jmp	#LR__0698
040f0     10 4E 05 F1 | 	add	fp, #16
040f4     A7 02 68 FC | 	wrlong	#1, fp
040f8                 | ' 
040f8                 | ' 	res = RES_ERROR;
040f8                 | ' 	switch (ctrl) {
040f8     08 4E 85 F1 | 	sub	fp, #8
040fc     A7 0A C2 FA | 	rdbyte	local01, fp
04100     08 4E 85 F1 | 	sub	fp, #8
04104     04 0A 26 F3 | 	fle	local01, #4
04108     30 0A 62 FD | 	jmprel	local01
0410c                 | LR__0690
0410c     10 00 90 FD | 	jmp	#LR__0691
04110     24 00 90 FD | 	jmp	#LR__0692
04114     A0 01 90 FD | 	jmp	#LR__0696
04118     80 01 90 FD | 	jmp	#LR__0695
0411c     98 01 90 FD | 	jmp	#LR__0696
04120                 | LR__0691
04120     9C 79 B0 FD | 	call	#_fatfs_cc_select_0609
04124     00 EA 0D F2 | 	cmp	result1, #0 wz
04128     10 4E 05 51 |  if_ne	add	fp, #16
0412c     A7 00 68 5C |  if_ne	wrlong	#0, fp
04130     10 4E 85 51 |  if_ne	sub	fp, #16
04134                 | ' 			break;
04134     8C 01 90 FD | 	jmp	#LR__0697
04138                 | LR__0692
04138     09 00 06 F6 | 	mov	arg01, #9
0413c     00 02 06 F6 | 	mov	arg02, #0
04140     B8 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0619
04144     F5 0A 02 F6 | 	mov	local01, result1
04148     07 0A 4E F7 | 	zerox	local01, #7 wz
0414c     74 01 90 5D |  if_ne	jmp	#LR__0697
04150     18 4E 05 F1 | 	add	fp, #24
04154     A7 00 02 F6 | 	mov	arg01, fp
04158     18 4E 85 F1 | 	sub	fp, #24
0415c     10 02 06 F6 | 	mov	arg02, #16
04160     EC 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0613
04164     00 EA 0D F2 | 	cmp	result1, #0 wz
04168     58 01 90 AD |  if_e	jmp	#LR__0697
0416c     18 4E 05 F1 | 	add	fp, #24
04170     A7 0A C2 FA | 	rdbyte	local01, fp
04174     18 4E 85 F1 | 	sub	fp, #24
04178     06 0A 46 F0 | 	shr	local01, #6
0417c     01 0A 0E F2 | 	cmp	local01, #1 wz
04180     5C 00 90 5D |  if_ne	jmp	#LR__0693
04184     21 4E 05 F1 | 	add	fp, #33
04188     A7 0A C2 FA | 	rdbyte	local01, fp
0418c     01 4E 85 F1 | 	sub	fp, #1
04190     A7 EA C1 FA | 	rdbyte	result1, fp
04194     F5 EA 31 F9 | 	getword	result1, result1, #0
04198     08 EA 65 F0 | 	shl	result1, #8
0419c     F5 0A 02 F1 | 	add	local01, result1
041a0     01 4E 85 F1 | 	sub	fp, #1
041a4     A7 EA C1 FA | 	rdbyte	result1, fp
041a8     3F EA 05 F5 | 	and	result1, #63
041ac     10 EA 65 F0 | 	shl	result1, #16
041b0     F5 0A 02 F1 | 	add	local01, result1
041b4     01 0A 06 F1 | 	add	local01, #1
041b8     09 4E 05 F1 | 	add	fp, #9
041bc     A7 0A 62 FC | 	wrlong	local01, fp
041c0     1C 4E 85 F1 | 	sub	fp, #28
041c4     A7 0A 02 FB | 	rdlong	local01, fp
041c8     1C 4E 05 F1 | 	add	fp, #28
041cc     A7 EA 01 FB | 	rdlong	result1, fp
041d0     28 4E 85 F1 | 	sub	fp, #40
041d4     0A EA 65 F0 | 	shl	result1, #10
041d8     05 EB 61 FC | 	wrlong	result1, local01
041dc     AC 00 90 FD | 	jmp	#LR__0694
041e0                 | LR__0693
041e0     1D 4E 05 F1 | 	add	fp, #29
041e4     A7 0A C2 FA | 	rdbyte	local01, fp
041e8     05 0B 42 F8 | 	getnib	local01, local01, #0
041ec     05 4E 05 F1 | 	add	fp, #5
041f0     A7 EA C1 FA | 	rdbyte	result1, fp
041f4     80 EA 05 F5 | 	and	result1, #128
041f8     07 EA C5 F0 | 	sar	result1, #7
041fc     F5 0A 02 F1 | 	add	local01, result1
04200     01 4E 85 F1 | 	sub	fp, #1
04204     A7 EA C1 FA | 	rdbyte	result1, fp
04208     03 EA 05 F5 | 	and	result1, #3
0420c     01 EA 65 F0 | 	shl	result1, #1
04210     F5 0A 02 F1 | 	add	local01, result1
04214     02 0A 06 F1 | 	add	local01, #2
04218     0D 4E 85 F1 | 	sub	fp, #13
0421c     A7 0A 42 FC | 	wrbyte	local01, fp
04220     0C 4E 05 F1 | 	add	fp, #12
04224     A7 0A C2 FA | 	rdbyte	local01, fp
04228     06 0A 46 F0 | 	shr	local01, #6
0422c     01 4E 85 F1 | 	sub	fp, #1
04230     A7 EA C1 FA | 	rdbyte	result1, fp
04234     F5 EA 31 F9 | 	getword	result1, result1, #0
04238     02 EA 65 F0 | 	shl	result1, #2
0423c     F5 0A 02 F1 | 	add	local01, result1
04240     01 4E 85 F1 | 	sub	fp, #1
04244     A7 EA C1 FA | 	rdbyte	result1, fp
04248     03 EA 05 F5 | 	and	result1, #3
0424c     F5 EA 31 F9 | 	getword	result1, result1, #0
04250     0A EA 65 F0 | 	shl	result1, #10
04254     F5 0A 02 F1 | 	add	local01, result1
04258     01 0A 06 F1 | 	add	local01, #1
0425c     0A 4E 05 F1 | 	add	fp, #10
04260     A7 0A 62 FC | 	wrlong	local01, fp
04264     1C 4E 85 F1 | 	sub	fp, #28
04268     A7 0A 02 FB | 	rdlong	local01, fp
0426c     1C 4E 05 F1 | 	add	fp, #28
04270     A7 EA 01 FB | 	rdlong	result1, fp
04274     14 4E 85 F1 | 	sub	fp, #20
04278     A7 04 C2 FA | 	rdbyte	arg03, fp
0427c     14 4E 85 F1 | 	sub	fp, #20
04280     09 04 86 F1 | 	sub	arg03, #9
04284     02 EB 61 F0 | 	shl	result1, arg03
04288     05 EB 61 FC | 	wrlong	result1, local01
0428c                 | LR__0694
0428c     10 4E 05 F1 | 	add	fp, #16
04290     A7 00 68 FC | 	wrlong	#0, fp
04294     10 4E 85 F1 | 	sub	fp, #16
04298                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
04298                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
04298                 | ' 					*(LBA_t*)buff = cs << (n - 9);
04298                 | ' 				}
04298                 | ' 				res = RES_OK;
04298                 | ' 			}
04298                 | ' 			break;
04298     28 00 90 FD | 	jmp	#LR__0697
0429c                 | LR__0695
0429c     0C 4E 05 F1 | 	add	fp, #12
042a0     A7 0A 02 FB | 	rdlong	local01, fp
042a4     05 01 69 FC | 	wrlong	#128, local01
042a8     04 4E 05 F1 | 	add	fp, #4
042ac     A7 00 68 FC | 	wrlong	#0, fp
042b0     10 4E 85 F1 | 	sub	fp, #16
042b4                 | ' 			*(DWORD*)buff = 128;
042b4                 | ' 			res = RES_OK;
042b4                 | ' 			break;
042b4     0C 00 90 FD | 	jmp	#LR__0697
042b8                 | LR__0696
042b8     10 4E 05 F1 | 	add	fp, #16
042bc     A7 08 68 FC | 	wrlong	#4, fp
042c0     10 4E 85 F1 | 	sub	fp, #16
042c4                 | LR__0697
042c4     74 77 B0 FD | 	call	#_fatfs_cc_deselect_0605
042c8                 | ' 			res = RES_PARERR;
042c8                 | ' 	}
042c8                 | ' 
042c8                 | ' 	deselect();
042c8                 | ' 
042c8                 | ' 	return res;
042c8     10 4E 05 F1 | 	add	fp, #16
042cc     A7 EA 01 FB | 	rdlong	result1, fp
042d0     10 4E 85 F1 | 	sub	fp, #16
042d4                 | LR__0698
042d4     A7 F0 03 F6 | 	mov	ptra, fp
042d8     B2 00 A0 FD | 	call	#popregs_
042dc                 | _fatfs_cc_disk_ioctl_ret
042dc     2D 00 64 FD | 	ret
042e0                 | 
042e0                 | _fatfs_cc_disk_setpins
042e0     00 00 0E F2 | 	cmp	arg01, #0 wz
042e4     01 EA 65 56 |  if_ne	neg	result1, #1
042e8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
042ec     01 00 00 FF 
042f0     10 E2 05 F1 | 	add	objptr, ##528
042f4     F1 02 62 FC | 	wrlong	arg02, objptr
042f8     04 E2 05 F1 | 	add	objptr, #4
042fc     F1 04 62 FC | 	wrlong	arg03, objptr
04300     04 E2 05 F1 | 	add	objptr, #4
04304     F1 06 62 FC | 	wrlong	arg04, objptr
04308     04 E2 05 F1 | 	add	objptr, #4
0430c     F1 08 62 FC | 	wrlong	arg05, objptr
04310     01 00 00 FF 
04314     1C E2 85 F1 | 	sub	objptr, ##540
04318     00 EA 05 F6 | 	mov	result1, #0
0431c                 | _fatfs_cc_disk_setpins_ret
0431c     2D 00 64 FD | 	ret
04320                 | 
04320                 | _fatfs_cc_tchar2uni
04320     00 EF 01 FB | 	rdlong	_var01, arg01
04324     F7 F0 01 F6 | 	mov	_var02, _var01
04328     01 EE 05 F1 | 	add	_var01, #1
0432c     F7 F2 01 F6 | 	mov	_var03, _var01
04330     F8 F4 C1 FA | 	rdbyte	_var04, _var02
04334     80 F4 CD F7 | 	test	_var04, #128 wz
04338     E8 00 90 AD |  if_e	jmp	#LR__0707
0433c     FA F6 01 F6 | 	mov	_var05, _var04
04340     E0 F6 05 F5 | 	and	_var05, #224
04344     C0 F6 0D F2 | 	cmp	_var05, #192 wz
04348     1F F4 05 A5 |  if_e	and	_var04, #31
0434c     01 F8 05 A6 |  if_e	mov	_var06, #1
04350     34 00 90 AD |  if_e	jmp	#LR__0701
04354     FA F6 01 F6 | 	mov	_var05, _var04
04358     F0 F6 05 F5 | 	and	_var05, #240
0435c     E0 F6 0D F2 | 	cmp	_var05, #224 wz
04360     FA F4 41 A8 |  if_e	getnib	_var04, _var04, #0
04364     02 F8 05 A6 |  if_e	mov	_var06, #2
04368     1C 00 90 AD |  if_e	jmp	#LR__0700
0436c     FA F6 01 F6 | 	mov	_var05, _var04
04370     F8 F6 05 F5 | 	and	_var05, #248
04374     F0 F6 0D F2 | 	cmp	_var05, #240 wz
04378     07 F4 05 A5 |  if_e	and	_var04, #7
0437c     03 F8 05 A6 |  if_e	mov	_var06, #3
04380                 | ' 			return 0xFFFFFFFF;
04380     01 EA 65 56 |  if_ne	neg	result1, #1
04384     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
04388                 | LR__0700
04388                 | LR__0701
04388                 | ' 		}
04388                 | ' 		do {
04388                 | LR__0702
04388     F9 FA C1 FA | 	rdbyte	_var07, _var03
0438c     FD F6 E1 F8 | 	getbyte	_var05, _var07, #0
04390     C0 F6 05 F5 | 	and	_var05, #192
04394     80 F6 0D F2 | 	cmp	_var05, #128 wz
04398     01 F2 05 F1 | 	add	_var03, #1
0439c     01 EA 65 56 |  if_ne	neg	result1, #1
043a0     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
043a4     06 F4 65 F0 | 	shl	_var04, #6
043a8     FD F0 E1 F8 | 	getbyte	_var02, _var07, #0
043ac     3F F0 05 F5 | 	and	_var02, #63
043b0     F8 F4 41 F5 | 	or	_var04, _var02
043b4     F4 F9 6D FB | 	djnz	_var06, #LR__0702
043b8     80 F4 15 F2 | 	cmp	_var04, #128 wc
043bc     24 00 90 CD |  if_b	jmp	#LR__0704
043c0     6C 00 00 FF 
043c4     00 F4 15 F2 | 	cmp	_var04, ##55296 wc
043c8     0C 00 90 CD |  if_b	jmp	#LR__0703
043cc     70 00 00 FF 
043d0     00 F4 15 F2 | 	cmp	_var04, ##57344 wc
043d4     0C 00 90 CD |  if_b	jmp	#LR__0704
043d8                 | LR__0703
043d8     80 08 00 FF 
043dc     00 F4 15 F2 | 	cmp	_var04, ##1114112 wc
043e0     08 00 90 CD |  if_b	jmp	#LR__0705
043e4                 | LR__0704
043e4     01 EA 65 F6 | 	neg	result1, #1
043e8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
043ec                 | LR__0705
043ec     80 00 00 FF 
043f0     00 F4 15 F2 | 	cmp	_var04, ##65536 wc
043f4     2C 00 90 CD |  if_b	jmp	#LR__0706
043f8     FA F0 01 F6 | 	mov	_var02, _var04
043fc     80 00 00 FF 
04400     00 F0 85 F1 | 	sub	_var02, ##65536
04404     06 F0 65 F0 | 	shl	_var02, #6
04408     80 FF 01 FF 
0440c     00 F0 05 F5 | 	and	_var02, ##67043328
04410     6E 00 6C FF 
04414     00 F6 05 F6 | 	mov	_var05, ##-671032320
04418     F8 F6 41 F5 | 	or	_var05, _var02
0441c     09 F4 45 F7 | 	zerox	_var04, #9
04420     FB F4 41 F5 | 	or	_var04, _var05
04424                 | LR__0706
04424                 | LR__0707
04424     00 F3 61 FC | 	wrlong	_var03, arg01
04428                 | ' 	}
04428                 | ' #line 811 "ff.c"
04428                 | ' 	*str = p;
04428                 | ' 	return uc;
04428     FA EA 01 F6 | 	mov	result1, _var04
0442c                 | _fatfs_cc_tchar2uni_ret
0442c     2D 00 64 FD | 	ret
04430                 | 
04430                 | _fatfs_cc_put_utf
04430     80 00 16 F2 | 	cmp	arg01, #128 wc
04434     18 00 90 3D |  if_ae	jmp	#LR__0710
04438     01 04 16 F2 | 	cmp	arg03, #1 wc
0443c     00 EA 05 C6 |  if_b	mov	result1, #0
04440     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
04444     01 01 42 FC | 	wrbyte	arg01, arg02
04448                 | ' 		*buf = (TCHAR)chr;
04448                 | ' 		return 1;
04448     01 EA 05 F6 | 	mov	result1, #1
0444c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
04450                 | LR__0710
04450     04 00 00 FF 
04454     00 00 16 F2 | 	cmp	arg01, ##2048 wc
04458     40 00 90 3D |  if_ae	jmp	#LR__0711
0445c     02 04 16 F2 | 	cmp	arg03, #2 wc
04460     00 EA 05 C6 |  if_b	mov	result1, #0
04464     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
04468     00 EB 01 F6 | 	mov	result1, arg01
0446c     06 EA 45 F0 | 	shr	result1, #6
04470     1F EA 05 F5 | 	and	result1, #31
04474     C0 04 06 F6 | 	mov	arg03, #192
04478     F5 04 42 F5 | 	or	arg03, result1
0447c     01 05 42 FC | 	wrbyte	arg03, arg02
04480     01 02 06 F1 | 	add	arg02, #1
04484     3F 00 06 F5 | 	and	arg01, #63
04488     80 EA 05 F6 | 	mov	result1, #128
0448c     00 EB 41 F5 | 	or	result1, arg01
04490     01 EB 41 FC | 	wrbyte	result1, arg02
04494                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
04494                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
04494                 | ' 		return 2;
04494     02 EA 05 F6 | 	mov	result1, #2
04498     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
0449c                 | LR__0711
0449c     80 00 00 FF 
044a0     00 00 16 F2 | 	cmp	arg01, ##65536 wc
044a4     70 00 90 3D |  if_ae	jmp	#LR__0714
044a8     03 04 16 F2 | 	cmp	arg03, #3 wc
044ac     18 00 90 CD |  if_b	jmp	#LR__0712
044b0     6C 00 00 FF 
044b4     00 00 16 F2 | 	cmp	arg01, ##55296 wc
044b8     14 00 90 CD |  if_b	jmp	#LR__0713
044bc     70 00 00 FF 
044c0     00 00 16 F2 | 	cmp	arg01, ##57344 wc
044c4     08 00 90 3D |  if_ae	jmp	#LR__0713
044c8                 | LR__0712
044c8     00 EA 05 F6 | 	mov	result1, #0
044cc     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
044d0                 | LR__0713
044d0     00 EB 59 F8 | 	getnib	result1, arg01, #3
044d4     E0 04 06 F6 | 	mov	arg03, #224
044d8     F5 04 42 F5 | 	or	arg03, result1
044dc     01 05 42 FC | 	wrbyte	arg03, arg02
044e0     01 02 06 F1 | 	add	arg02, #1
044e4     00 EB 01 F6 | 	mov	result1, arg01
044e8     06 EA 45 F0 | 	shr	result1, #6
044ec     3F EA 05 F5 | 	and	result1, #63
044f0     80 04 06 F6 | 	mov	arg03, #128
044f4     F5 04 42 F5 | 	or	arg03, result1
044f8     01 05 42 FC | 	wrbyte	arg03, arg02
044fc     01 02 06 F1 | 	add	arg02, #1
04500     3F 00 06 F5 | 	and	arg01, #63
04504     80 EA 05 F6 | 	mov	result1, #128
04508     00 EB 41 F5 | 	or	result1, arg01
0450c     01 EB 41 FC | 	wrbyte	result1, arg02
04510                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
04510                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
04510                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
04510                 | ' 		return 3;
04510     03 EA 05 F6 | 	mov	result1, #3
04514     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
04518                 | LR__0714
04518     04 04 16 F2 | 	cmp	arg03, #4 wc
0451c     00 EA 05 C6 |  if_b	mov	result1, #0
04520     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
04524     00 EF 01 F6 | 	mov	_var01, arg01
04528     E0 EF 05 F4 | 	bitl	_var01, #480
0452c     00 00 6C FF 
04530     00 EE 85 F1 | 	sub	_var01, ##-671088640
04534     06 EE 45 F0 | 	shr	_var01, #6
04538     00 01 32 F9 | 	getword	arg01, arg01, #0
0453c     6E 00 00 FF 
04540     00 00 86 F1 | 	sub	arg01, ##56320
04544     00 08 00 FF 
04548     00 EE 15 F2 | 	cmp	_var01, ##1048576 wc
0454c     02 00 00 CF 
04550     00 00 16 C2 |  if_b	cmp	arg01, ##1024 wc
04554     00 EA 05 36 |  if_ae	mov	result1, #0
04558     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
0455c     00 EF 41 F5 | 	or	_var01, arg01
04560     80 00 00 FF 
04564     00 EE 05 F1 | 	add	_var01, ##65536
04568     F7 EA 01 F6 | 	mov	result1, _var01
0456c     12 EA 45 F0 | 	shr	result1, #18
04570     07 EA 05 F5 | 	and	result1, #7
04574     F0 04 06 F6 | 	mov	arg03, #240
04578     F5 04 42 F5 | 	or	arg03, result1
0457c     01 05 42 FC | 	wrbyte	arg03, arg02
04580     01 02 06 F1 | 	add	arg02, #1
04584     F7 EA 01 F6 | 	mov	result1, _var01
04588     0C EA 45 F0 | 	shr	result1, #12
0458c     3F EA 05 F5 | 	and	result1, #63
04590     80 04 06 F6 | 	mov	arg03, #128
04594     F5 04 42 F5 | 	or	arg03, result1
04598     01 05 42 FC | 	wrbyte	arg03, arg02
0459c     01 02 06 F1 | 	add	arg02, #1
045a0     F7 EA 01 F6 | 	mov	result1, _var01
045a4     06 EA 45 F0 | 	shr	result1, #6
045a8     3F EA 05 F5 | 	and	result1, #63
045ac     80 04 06 F6 | 	mov	arg03, #128
045b0     F5 04 42 F5 | 	or	arg03, result1
045b4     01 05 42 FC | 	wrbyte	arg03, arg02
045b8     01 02 06 F1 | 	add	arg02, #1
045bc     3F EE 05 F5 | 	and	_var01, #63
045c0     80 EA 05 F6 | 	mov	result1, #128
045c4     F7 EA 41 F5 | 	or	result1, _var01
045c8     01 EB 41 FC | 	wrbyte	result1, arg02
045cc                 | ' 	chr = (hc | chr) + 0x10000;
045cc                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
045cc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
045cc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
045cc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
045cc                 | ' 	return 4;
045cc     04 EA 05 F6 | 	mov	result1, #4
045d0                 | _fatfs_cc_put_utf_ret
045d0     2D 00 64 FD | 	ret
045d4                 | 
045d4                 | _fatfs_cc_sync_window
045d4     02 4A 05 F6 | 	mov	COUNT_, #2
045d8     A8 00 A0 FD | 	call	#pushregs_
045dc     00 0B 02 F6 | 	mov	local01, arg01
045e0     00 0C 06 F6 | 	mov	local02, #0
045e4     03 0A 06 F1 | 	add	local01, #3
045e8     05 EB C9 FA | 	rdbyte	result1, local01 wz
045ec     03 0A 86 F1 | 	sub	local01, #3
045f0     A4 00 90 AD |  if_e	jmp	#LR__0722
045f4     01 0A 06 F1 | 	add	local01, #1
045f8     05 01 C2 FA | 	rdbyte	arg01, local01
045fc     33 0A 06 F1 | 	add	local01, #51
04600     05 03 02 F6 | 	mov	arg02, local01
04604     04 0A 86 F1 | 	sub	local01, #4
04608     05 05 02 FB | 	rdlong	arg03, local01
0460c     30 0A 86 F1 | 	sub	local01, #48
04610     01 06 06 F6 | 	mov	arg04, #1
04614     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
04618     00 EA 0D F2 | 	cmp	result1, #0 wz
0461c     74 00 90 5D |  if_ne	jmp	#LR__0720
04620     03 0A 06 F1 | 	add	local01, #3
04624     05 01 48 FC | 	wrbyte	#0, local01
04628     2D 0A 06 F1 | 	add	local01, #45
0462c     05 EB 01 FB | 	rdlong	result1, local01
04630     0C 0A 86 F1 | 	sub	local01, #12
04634     05 07 02 FB | 	rdlong	arg04, local01
04638     03 EB 81 F1 | 	sub	result1, arg04
0463c     08 0A 86 F1 | 	sub	local01, #8
04640     05 07 02 FB | 	rdlong	arg04, local01
04644     1C 0A 86 F1 | 	sub	local01, #28
04648     03 EB 11 F2 | 	cmp	result1, arg04 wc
0464c     48 00 90 3D |  if_ae	jmp	#LR__0721
04650     02 0A 06 F1 | 	add	local01, #2
04654     05 07 C2 FA | 	rdbyte	arg04, local01
04658     02 0A 86 F1 | 	sub	local01, #2
0465c     02 06 0E F2 | 	cmp	arg04, #2 wz
04660     34 00 90 5D |  if_ne	jmp	#LR__0721
04664     01 0A 06 F1 | 	add	local01, #1
04668     05 01 C2 FA | 	rdbyte	arg01, local01
0466c     33 0A 06 F1 | 	add	local01, #51
04670     05 03 02 F6 | 	mov	arg02, local01
04674     04 0A 86 F1 | 	sub	local01, #4
04678     05 05 02 FB | 	rdlong	arg03, local01
0467c     14 0A 86 F1 | 	sub	local01, #20
04680     05 0B 02 FB | 	rdlong	local01, local01
04684     05 05 02 F1 | 	add	arg03, local01
04688     01 06 06 F6 | 	mov	arg04, #1
0468c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
04690     04 00 90 FD | 	jmp	#LR__0721
04694                 | LR__0720
04694     01 0C 06 F6 | 	mov	local02, #1
04698                 | LR__0721
04698                 | LR__0722
04698                 | ' 			res = FR_DISK_ERR;
04698                 | ' 		}
04698                 | ' 	}
04698                 | ' 	return res;
04698     06 EB 01 F6 | 	mov	result1, local02
0469c     A7 F0 03 F6 | 	mov	ptra, fp
046a0     B2 00 A0 FD | 	call	#popregs_
046a4                 | _fatfs_cc_sync_window_ret
046a4     2D 00 64 FD | 	ret
046a8                 | 
046a8                 | _fatfs_cc_move_window
046a8     03 4A 05 F6 | 	mov	COUNT_, #3
046ac     A8 00 A0 FD | 	call	#pushregs_
046b0     00 0B 02 F6 | 	mov	local01, arg01
046b4     01 0D 02 F6 | 	mov	local02, arg02
046b8     00 0E 06 F6 | 	mov	local03, #0
046bc     30 0A 06 F1 | 	add	local01, #48
046c0     05 07 02 FB | 	rdlong	arg04, local01
046c4     30 0A 86 F1 | 	sub	local01, #48
046c8     03 0D 0A F2 | 	cmp	local02, arg04 wz
046cc     40 00 90 AD |  if_e	jmp	#LR__0731
046d0     05 01 02 F6 | 	mov	arg01, local01
046d4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
046d8     F5 0E 0A F6 | 	mov	local03, result1 wz
046dc     30 00 90 5D |  if_ne	jmp	#LR__0730
046e0     01 0A 06 F1 | 	add	local01, #1
046e4     05 01 C2 FA | 	rdbyte	arg01, local01
046e8     33 0A 06 F1 | 	add	local01, #51
046ec     05 03 02 F6 | 	mov	arg02, local01
046f0     06 05 02 F6 | 	mov	arg03, local02
046f4     01 06 06 F6 | 	mov	arg04, #1
046f8     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
046fc     00 EA 0D F2 | 	cmp	result1, #0 wz
04700     01 0C 66 56 |  if_ne	neg	local02, #1
04704     01 0E 06 56 |  if_ne	mov	local03, #1
04708     04 0A 86 F1 | 	sub	local01, #4
0470c     05 0D 62 FC | 	wrlong	local02, local01
04710                 | LR__0730
04710                 | LR__0731
04710                 | ' 				sect = (LBA_t)0 - 1;
04710                 | ' 				res = FR_DISK_ERR;
04710                 | ' 			}
04710                 | ' 			fs->winsect = sect;
04710                 | ' 		}
04710                 | ' 	}
04710                 | ' 	return res;
04710     07 EB 01 F6 | 	mov	result1, local03
04714     A7 F0 03 F6 | 	mov	ptra, fp
04718     B2 00 A0 FD | 	call	#popregs_
0471c                 | _fatfs_cc_move_window_ret
0471c     2D 00 64 FD | 	ret
04720                 | 
04720                 | _fatfs_cc_sync_fs
04720     02 4A 05 F6 | 	mov	COUNT_, #2
04724     A8 00 A0 FD | 	call	#pushregs_
04728     00 0B 02 F6 | 	mov	local01, arg01
0472c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
04730     F5 0C 0A F6 | 	mov	local02, result1 wz
04734     D8 00 90 5D |  if_ne	jmp	#LR__0741
04738     05 07 C2 FA | 	rdbyte	arg04, local01
0473c     03 06 0E F2 | 	cmp	arg04, #3 wz
04740     04 0A 06 A1 |  if_e	add	local01, #4
04744     05 07 C2 AA |  if_e	rdbyte	arg04, local01
04748     04 0A 86 A1 |  if_e	sub	local01, #4
0474c     01 06 0E A2 |  if_e	cmp	arg04, #1 wz
04750     A0 00 90 5D |  if_ne	jmp	#LR__0740
04754     34 0A 06 F1 | 	add	local01, #52
04758     05 01 02 F6 | 	mov	arg01, local01
0475c     00 02 06 F6 | 	mov	arg02, #0
04760     09 04 C6 F9 | 	decod	arg03, #9
04764     98 00 A0 FD | 	call	#\builtin_bytefill_
04768     05 01 02 F6 | 	mov	arg01, local01
0476c     FE 01 06 F1 | 	add	arg01, #510
04770     55 00 80 FF 
04774     00 AB 58 FC | 	wrword	##43605, arg01
04778     A9 B0 A0 FF 
0477c     05 A5 68 FC | 	wrlong	##1096897106, local01
04780     05 01 02 F6 | 	mov	arg01, local01
04784     E4 01 06 F1 | 	add	arg01, #484
04788     B9 A0 B0 FF 
0478c     00 E5 68 FC | 	wrlong	##1631679090, arg01
04790     05 01 02 F6 | 	mov	arg01, local01
04794     E8 01 06 F1 | 	add	arg01, #488
04798     20 0A 86 F1 | 	sub	local01, #32
0479c     05 03 02 FB | 	rdlong	arg02, local01
047a0     00 03 62 FC | 	wrlong	arg02, arg01
047a4     20 0A 06 F1 | 	add	local01, #32
047a8     05 01 02 F6 | 	mov	arg01, local01
047ac     EC 01 06 F1 | 	add	arg01, #492
047b0     24 0A 86 F1 | 	sub	local01, #36
047b4     05 03 02 FB | 	rdlong	arg02, local01
047b8     00 03 62 FC | 	wrlong	arg02, arg01
047bc     10 0A 06 F1 | 	add	local01, #16
047c0     05 05 02 FB | 	rdlong	arg03, local01
047c4     01 04 06 F1 | 	add	arg03, #1
047c8     10 0A 06 F1 | 	add	local01, #16
047cc     05 05 62 FC | 	wrlong	arg03, local01
047d0     2F 0A 86 F1 | 	sub	local01, #47
047d4     05 01 C2 FA | 	rdbyte	arg01, local01
047d8     33 0A 06 F1 | 	add	local01, #51
047dc     05 03 02 F6 | 	mov	arg02, local01
047e0     01 06 06 F6 | 	mov	arg04, #1
047e4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
047e8     30 0A 86 F1 | 	sub	local01, #48
047ec     05 01 48 FC | 	wrbyte	#0, local01
047f0     04 0A 86 F1 | 	sub	local01, #4
047f4                 | LR__0740
047f4     01 0A 06 F1 | 	add	local01, #1
047f8     05 01 C2 FA | 	rdbyte	arg01, local01
047fc     00 02 06 F6 | 	mov	arg02, #0
04800     00 04 06 F6 | 	mov	arg03, #0
04804     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
04808     00 EA 0D F2 | 	cmp	result1, #0 wz
0480c     01 0C 06 56 |  if_ne	mov	local02, #1
04810                 | LR__0741
04810                 | ' 	}
04810                 | ' 
04810                 | ' 	return res;
04810     06 EB 01 F6 | 	mov	result1, local02
04814     A7 F0 03 F6 | 	mov	ptra, fp
04818     B2 00 A0 FD | 	call	#popregs_
0481c                 | _fatfs_cc_sync_fs_ret
0481c     2D 00 64 FD | 	ret
04820                 | 
04820                 | _fatfs_cc_clst2sect
04820     02 02 86 F1 | 	sub	arg02, #2
04824     18 00 06 F1 | 	add	arg01, #24
04828     00 EF 01 FB | 	rdlong	_var01, arg01
0482c     18 00 86 F1 | 	sub	arg01, #24
04830     02 EE 85 F1 | 	sub	_var01, #2
04834     F7 02 12 F2 | 	cmp	arg02, _var01 wc
04838     00 EA 05 36 |  if_ae	mov	result1, #0
0483c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
04840     0A 00 06 F1 | 	add	arg01, #10
04844     00 EF E1 FA | 	rdword	_var01, arg01
04848     01 EF 01 FD | 	qmul	_var01, arg02
0484c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
0484c     22 00 06 F1 | 	add	arg01, #34
04850     00 EB 01 FB | 	rdlong	result1, arg01
04854     18 EE 61 FD | 	getqx	_var01
04858     F7 EA 01 F1 | 	add	result1, _var01
0485c                 | _fatfs_cc_clst2sect_ret
0485c     2D 00 64 FD | 	ret
04860                 | 
04860                 | _fatfs_cc_get_fat
04860     07 4A 05 F6 | 	mov	COUNT_, #7
04864     A8 00 A0 FD | 	call	#pushregs_
04868     01 0B 02 F6 | 	mov	local01, arg02
0486c     00 0D 02 FB | 	rdlong	local02, arg01
04870     02 0A 16 F2 | 	cmp	local01, #2 wc
04874     14 00 90 CD |  if_b	jmp	#LR__0750
04878     18 0C 06 F1 | 	add	local02, #24
0487c     06 0F 02 FB | 	rdlong	local03, local02
04880     18 0C 86 F1 | 	sub	local02, #24
04884     07 0B 12 F2 | 	cmp	local01, local03 wc
04888     08 00 90 CD |  if_b	jmp	#LR__0751
0488c                 | LR__0750
0488c     01 10 06 F6 | 	mov	local04, #1
04890     60 01 90 FD | 	jmp	#LR__0758
04894                 | LR__0751
04894     01 10 66 F6 | 	neg	local04, #1
04898                 | ' 		val = 0xFFFFFFFF;
04898                 | ' 
04898                 | ' 		switch (fs->fs_type) {
04898     06 13 C2 FA | 	rdbyte	local05, local02
0489c     01 12 86 F1 | 	sub	local05, #1
048a0     03 12 26 F3 | 	fle	local05, #3
048a4     30 12 62 FD | 	jmprel	local05
048a8                 | LR__0752
048a8     0C 00 90 FD | 	jmp	#LR__0753
048ac     B8 00 90 FD | 	jmp	#LR__0754
048b0     F8 00 90 FD | 	jmp	#LR__0755
048b4     38 01 90 FD | 	jmp	#LR__0756
048b8                 | LR__0753
048b8     05 13 02 F6 | 	mov	local05, local01
048bc     05 01 02 F6 | 	mov	arg01, local01
048c0     01 00 46 F0 | 	shr	arg01, #1
048c4     00 13 02 F1 | 	add	local05, arg01
048c8     06 01 02 F6 | 	mov	arg01, local02
048cc     09 15 02 F6 | 	mov	local06, local05
048d0     09 14 46 F0 | 	shr	local06, #9
048d4     24 0C 06 F1 | 	add	local02, #36
048d8     06 03 02 FB | 	rdlong	arg02, local02
048dc     24 0C 86 F1 | 	sub	local02, #36
048e0     0A 03 02 F1 | 	add	arg02, local06
048e4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
048e8     00 EA 0D F2 | 	cmp	result1, #0 wz
048ec     04 01 90 5D |  if_ne	jmp	#LR__0757
048f0     09 15 02 F6 | 	mov	local06, local05
048f4     FF 15 06 F5 | 	and	local06, #511
048f8     34 0C 06 F1 | 	add	local02, #52
048fc     06 15 02 F1 | 	add	local06, local02
04900     0A 17 C2 FA | 	rdbyte	local07, local06
04904     34 0C 86 F1 | 	sub	local02, #52
04908     06 01 02 F6 | 	mov	arg01, local02
0490c     01 12 06 F1 | 	add	local05, #1
04910     09 15 02 F6 | 	mov	local06, local05
04914     09 14 46 F0 | 	shr	local06, #9
04918     24 0C 06 F1 | 	add	local02, #36
0491c     06 03 02 FB | 	rdlong	arg02, local02
04920     24 0C 86 F1 | 	sub	local02, #36
04924     0A 03 02 F1 | 	add	arg02, local06
04928     7C FD BF FD | 	call	#_fatfs_cc_move_window
0492c     00 EA 0D F2 | 	cmp	result1, #0 wz
04930     C0 00 90 5D |  if_ne	jmp	#LR__0757
04934     FF 13 06 F5 | 	and	local05, #511
04938     34 0C 06 F1 | 	add	local02, #52
0493c     06 13 02 F1 | 	add	local05, local02
04940     09 15 C2 FA | 	rdbyte	local06, local05
04944     08 14 66 F0 | 	shl	local06, #8
04948     0A 17 42 F5 | 	or	local07, local06
0494c     01 0A CE F7 | 	test	local01, #1 wz
04950     04 16 46 50 |  if_ne	shr	local07, #4
04954     0B 0F 02 56 |  if_ne	mov	local03, local07
04958     0B 16 46 A7 |  if_e	zerox	local07, #11
0495c     0B 0F 02 A6 |  if_e	mov	local03, local07
04960     07 11 02 F6 | 	mov	local04, local03
04964                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
04964                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
04964                 | ' 			break;
04964     8C 00 90 FD | 	jmp	#LR__0757
04968                 | LR__0754
04968     06 01 02 F6 | 	mov	arg01, local02
0496c     05 15 02 F6 | 	mov	local06, local01
04970     08 14 46 F0 | 	shr	local06, #8
04974     24 0C 06 F1 | 	add	local02, #36
04978     06 03 02 FB | 	rdlong	arg02, local02
0497c     24 0C 86 F1 | 	sub	local02, #36
04980     0A 03 02 F1 | 	add	arg02, local06
04984     20 FD BF FD | 	call	#_fatfs_cc_move_window
04988     00 EA 0D F2 | 	cmp	result1, #0 wz
0498c     64 00 90 5D |  if_ne	jmp	#LR__0757
04990     34 0C 06 F1 | 	add	local02, #52
04994     01 0A 66 F0 | 	shl	local01, #1
04998     FF 0B 06 F5 | 	and	local01, #511
0499c     05 0D 02 F1 | 	add	local02, local01
049a0                 | ' {
049a0                 | ' 
049a0                 | ' 	return *((WORD*)ptr);
049a0     06 EB E1 FA | 	rdword	result1, local02
049a4     F5 10 32 F9 | 	getword	local04, result1, #0
049a8                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
049a8                 | ' 			break;
049a8     48 00 90 FD | 	jmp	#LR__0757
049ac                 | LR__0755
049ac     06 01 02 F6 | 	mov	arg01, local02
049b0     05 15 02 F6 | 	mov	local06, local01
049b4     07 14 46 F0 | 	shr	local06, #7
049b8     24 0C 06 F1 | 	add	local02, #36
049bc     06 03 02 FB | 	rdlong	arg02, local02
049c0     24 0C 86 F1 | 	sub	local02, #36
049c4     0A 03 02 F1 | 	add	arg02, local06
049c8     DC FC BF FD | 	call	#_fatfs_cc_move_window
049cc     00 EA 0D F2 | 	cmp	result1, #0 wz
049d0     20 00 90 5D |  if_ne	jmp	#LR__0757
049d4     34 0C 06 F1 | 	add	local02, #52
049d8     02 0A 66 F0 | 	shl	local01, #2
049dc     FF 0B 06 F5 | 	and	local01, #511
049e0     05 0D 02 F1 | 	add	local02, local01
049e4                 | ' {
049e4                 | ' 
049e4                 | ' 	return *((DWORD*)ptr);
049e4     06 11 02 FB | 	rdlong	local04, local02
049e8     7C 10 06 F4 | 	bitl	local04, #124
049ec                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
049ec                 | ' 			break;
049ec     04 00 90 FD | 	jmp	#LR__0757
049f0                 | LR__0756
049f0     01 10 06 F6 | 	mov	local04, #1
049f4                 | LR__0757
049f4                 | LR__0758
049f4                 | ' 			val = 1;
049f4                 | ' 		}
049f4                 | ' 	}
049f4                 | ' 
049f4                 | ' 	return val;
049f4     08 EB 01 F6 | 	mov	result1, local04
049f8     A7 F0 03 F6 | 	mov	ptra, fp
049fc     B2 00 A0 FD | 	call	#popregs_
04a00                 | _fatfs_cc_get_fat_ret
04a00     2D 00 64 FD | 	ret
04a04                 | 
04a04                 | _fatfs_cc_put_fat
04a04     08 4A 05 F6 | 	mov	COUNT_, #8
04a08     A8 00 A0 FD | 	call	#pushregs_
04a0c     00 0B 02 F6 | 	mov	local01, arg01
04a10     01 0D 02 F6 | 	mov	local02, arg02
04a14     02 0F 02 F6 | 	mov	local03, arg03
04a18     02 10 06 F6 | 	mov	local04, #2
04a1c     02 0C 16 F2 | 	cmp	local02, #2 wc
04a20     E0 01 90 CD |  if_b	jmp	#LR__0767
04a24     18 0A 06 F1 | 	add	local01, #24
04a28     05 13 02 FB | 	rdlong	local05, local01
04a2c     18 0A 86 F1 | 	sub	local01, #24
04a30     09 0D 12 F2 | 	cmp	local02, local05 wc
04a34     CC 01 90 3D |  if_ae	jmp	#LR__0767
04a38                 | ' 		switch (fs->fs_type) {
04a38     05 15 C2 FA | 	rdbyte	local06, local01
04a3c     01 14 86 F1 | 	sub	local06, #1
04a40     03 14 26 F3 | 	fle	local06, #3
04a44     30 14 62 FD | 	jmprel	local06
04a48                 | LR__0760
04a48     0C 00 90 FD | 	jmp	#LR__0761
04a4c     F8 00 90 FD | 	jmp	#LR__0764
04a50     40 01 90 FD | 	jmp	#LR__0765
04a54     AC 01 90 FD | 	jmp	#LR__0766
04a58                 | LR__0761
04a58     06 17 02 F6 | 	mov	local07, local02
04a5c     06 13 02 F6 | 	mov	local05, local02
04a60     01 12 46 F0 | 	shr	local05, #1
04a64     09 17 02 F1 | 	add	local07, local05
04a68     05 01 02 F6 | 	mov	arg01, local01
04a6c     0B 15 02 F6 | 	mov	local06, local07
04a70     09 14 46 F0 | 	shr	local06, #9
04a74     24 0A 06 F1 | 	add	local01, #36
04a78     05 03 02 FB | 	rdlong	arg02, local01
04a7c     24 0A 86 F1 | 	sub	local01, #36
04a80     0A 03 02 F1 | 	add	arg02, local06
04a84     20 FC BF FD | 	call	#_fatfs_cc_move_window
04a88     F5 10 0A F6 | 	mov	local04, result1 wz
04a8c     74 01 90 5D |  if_ne	jmp	#LR__0766
04a90     34 0A 06 F1 | 	add	local01, #52
04a94     05 19 02 F6 | 	mov	local08, local01
04a98     0B 13 02 F6 | 	mov	local05, local07
04a9c     FF 13 06 F5 | 	and	local05, #511
04aa0     09 19 02 F1 | 	add	local08, local05
04aa4     01 0C CE F7 | 	test	local02, #1 wz
04aa8     34 0A 86 F1 | 	sub	local01, #52
04aac     01 16 06 F1 | 	add	local07, #1
04ab0     18 00 90 AD |  if_e	jmp	#LR__0762
04ab4     0C 13 C2 FA | 	rdbyte	local05, local08
04ab8     09 13 42 F8 | 	getnib	local05, local05, #0
04abc     07 15 E2 F8 | 	getbyte	local06, local03, #0
04ac0     04 14 66 F0 | 	shl	local06, #4
04ac4     0A 13 42 F5 | 	or	local05, local06
04ac8     04 00 90 FD | 	jmp	#LR__0763
04acc                 | LR__0762
04acc     07 13 02 F6 | 	mov	local05, local03
04ad0                 | LR__0763
04ad0     0C 13 42 FC | 	wrbyte	local05, local08
04ad4     03 0A 06 F1 | 	add	local01, #3
04ad8     05 03 48 FC | 	wrbyte	#1, local01
04adc     03 0A 86 F1 | 	sub	local01, #3
04ae0     05 01 02 F6 | 	mov	arg01, local01
04ae4     0B 19 02 F6 | 	mov	local08, local07
04ae8     09 18 46 F0 | 	shr	local08, #9
04aec     24 0A 06 F1 | 	add	local01, #36
04af0     05 03 02 FB | 	rdlong	arg02, local01
04af4     24 0A 86 F1 | 	sub	local01, #36
04af8     0C 03 02 F1 | 	add	arg02, local08
04afc     A8 FB BF FD | 	call	#_fatfs_cc_move_window
04b00     F5 10 0A F6 | 	mov	local04, result1 wz
04b04     FC 00 90 5D |  if_ne	jmp	#LR__0766
04b08     34 0A 06 F1 | 	add	local01, #52
04b0c     05 19 02 F6 | 	mov	local08, local01
04b10     FF 17 06 F5 | 	and	local07, #511
04b14     0B 19 02 F1 | 	add	local08, local07
04b18     01 0C CE F7 | 	test	local02, #1 wz
04b1c     04 0E 46 50 |  if_ne	shr	local03, #4
04b20     07 13 02 56 |  if_ne	mov	local05, local03
04b24     0C 13 C2 AA |  if_e	rdbyte	local05, local08
04b28     F0 12 06 A5 |  if_e	and	local05, #240
04b2c     07 0F EA A8 |  if_e	getbyte	local03, local03, #1
04b30     07 0F 42 A8 |  if_e	getnib	local03, local03, #0
04b34     07 13 42 A5 |  if_e	or	local05, local03
04b38     0C 13 42 FC | 	wrbyte	local05, local08
04b3c     31 0A 86 F1 | 	sub	local01, #49
04b40     05 03 48 FC | 	wrbyte	#1, local01
04b44                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
04b44                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
04b44                 | ' 			fs->wflag = 1;
04b44                 | ' 			break;
04b44     BC 00 90 FD | 	jmp	#LR__0766
04b48                 | LR__0764
04b48     05 01 02 F6 | 	mov	arg01, local01
04b4c     06 19 02 F6 | 	mov	local08, local02
04b50     08 18 46 F0 | 	shr	local08, #8
04b54     24 0A 06 F1 | 	add	local01, #36
04b58     05 03 02 FB | 	rdlong	arg02, local01
04b5c     24 0A 86 F1 | 	sub	local01, #36
04b60     0C 03 02 F1 | 	add	arg02, local08
04b64     40 FB BF FD | 	call	#_fatfs_cc_move_window
04b68     F5 10 0A F6 | 	mov	local04, result1 wz
04b6c     94 00 90 5D |  if_ne	jmp	#LR__0766
04b70     34 0A 06 F1 | 	add	local01, #52
04b74     05 01 02 F6 | 	mov	arg01, local01
04b78     01 0C 66 F0 | 	shl	local02, #1
04b7c     FF 0D 06 F5 | 	and	local02, #511
04b80     06 01 02 F1 | 	add	arg01, local02
04b84     00 0F 52 FC | 	wrword	local03, arg01
04b88     31 0A 86 F1 | 	sub	local01, #49
04b8c     05 03 48 FC | 	wrbyte	#1, local01
04b90                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
04b90                 | ' 			fs->wflag = 1;
04b90                 | ' 			break;
04b90     70 00 90 FD | 	jmp	#LR__0766
04b94                 | LR__0765
04b94     05 01 02 F6 | 	mov	arg01, local01
04b98     06 19 02 F6 | 	mov	local08, local02
04b9c     07 18 46 F0 | 	shr	local08, #7
04ba0     24 0A 06 F1 | 	add	local01, #36
04ba4     05 03 02 FB | 	rdlong	arg02, local01
04ba8     24 0A 86 F1 | 	sub	local01, #36
04bac     0C 03 02 F1 | 	add	arg02, local08
04bb0     F4 FA BF FD | 	call	#_fatfs_cc_move_window
04bb4     F5 10 0A F6 | 	mov	local04, result1 wz
04bb8     48 00 90 5D |  if_ne	jmp	#LR__0766
04bbc     7C 0E 06 F4 | 	bitl	local03, #124
04bc0     34 0A 06 F1 | 	add	local01, #52
04bc4     06 19 02 F6 | 	mov	local08, local02
04bc8     02 18 66 F0 | 	shl	local08, #2
04bcc     FF 19 06 F5 | 	and	local08, #511
04bd0     05 01 02 F6 | 	mov	arg01, local01
04bd4     0C 01 02 F1 | 	add	arg01, local08
04bd8                 | ' {
04bd8                 | ' 
04bd8                 | ' 	return *((DWORD*)ptr);
04bd8     00 19 02 FB | 	rdlong	local08, arg01
04bdc     00 00 78 FF 
04be0     00 18 06 F5 | 	and	local08, ##-268435456
04be4     0C 0F 42 F5 | 	or	local03, local08
04be8     05 01 02 F6 | 	mov	arg01, local01
04bec     02 0C 66 F0 | 	shl	local02, #2
04bf0     FF 0D 06 F5 | 	and	local02, #511
04bf4     06 01 02 F1 | 	add	arg01, local02
04bf8     00 0F 62 FC | 	wrlong	local03, arg01
04bfc     31 0A 86 F1 | 	sub	local01, #49
04c00     05 03 48 FC | 	wrbyte	#1, local01
04c04                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
04c04                 | ' 			}
04c04                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
04c04                 | ' 			fs->wflag = 1;
04c04                 | ' 			break;
04c04                 | LR__0766
04c04                 | LR__0767
04c04                 | ' 		}
04c04                 | ' 	}
04c04                 | ' 	return res;
04c04     08 EB 01 F6 | 	mov	result1, local04
04c08     A7 F0 03 F6 | 	mov	ptra, fp
04c0c     B2 00 A0 FD | 	call	#popregs_
04c10                 | _fatfs_cc_put_fat_ret
04c10     2D 00 64 FD | 	ret
04c14                 | 
04c14                 | _fatfs_cc_remove_chain
04c14     05 4A 05 F6 | 	mov	COUNT_, #5
04c18     A8 00 A0 FD | 	call	#pushregs_
04c1c     00 0B 02 F6 | 	mov	local01, arg01
04c20     01 0D 02 F6 | 	mov	local02, arg02
04c24     02 0F 02 F6 | 	mov	local03, arg03
04c28     05 11 02 FB | 	rdlong	local04, local01
04c2c     02 0C 16 F2 | 	cmp	local02, #2 wc
04c30     14 00 90 CD |  if_b	jmp	#LR__0770
04c34     18 10 06 F1 | 	add	local04, #24
04c38     08 EB 01 FB | 	rdlong	result1, local04
04c3c     18 10 86 F1 | 	sub	local04, #24
04c40     F5 0C 12 F2 | 	cmp	local02, result1 wc
04c44     08 00 90 CD |  if_b	jmp	#LR__0771
04c48                 | LR__0770
04c48     02 EA 05 F6 | 	mov	result1, #2
04c4c     CC 00 90 FD | 	jmp	#LR__0776
04c50                 | LR__0771
04c50     00 0E 0E F2 | 	cmp	local03, #0 wz
04c54     18 00 90 AD |  if_e	jmp	#LR__0772
04c58     07 03 02 F6 | 	mov	arg02, local03
04c5c     08 01 02 F6 | 	mov	arg01, local04
04c60     01 04 66 F6 | 	neg	arg03, #1
04c64     9C FD BF FD | 	call	#_fatfs_cc_put_fat
04c68     00 EA 0D F2 | 	cmp	result1, #0 wz
04c6c     AC 00 90 5D |  if_ne	jmp	#LR__0776
04c70                 | LR__0772
04c70                 | ' 	}
04c70                 | ' 
04c70                 | ' 
04c70                 | ' 	do {
04c70                 | LR__0773
04c70     06 03 02 F6 | 	mov	arg02, local02
04c74     05 01 02 F6 | 	mov	arg01, local01
04c78     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
04c7c     F5 12 0A F6 | 	mov	local05, result1 wz
04c80     94 00 90 AD |  if_e	jmp	#LR__0775
04c84     01 12 0E F2 | 	cmp	local05, #1 wz
04c88     02 EA 05 A6 |  if_e	mov	result1, #2
04c8c     8C 00 90 AD |  if_e	jmp	#LR__0776
04c90     FF FF 7F FF 
04c94     FF 13 0E F2 | 	cmp	local05, ##-1 wz
04c98     01 EA 05 A6 |  if_e	mov	result1, #1
04c9c     7C 00 90 AD |  if_e	jmp	#LR__0776
04ca0     06 03 02 F6 | 	mov	arg02, local02
04ca4     08 01 02 F6 | 	mov	arg01, local04
04ca8     00 04 06 F6 | 	mov	arg03, #0
04cac     54 FD BF FD | 	call	#_fatfs_cc_put_fat
04cb0     F5 0E 0A F6 | 	mov	local03, result1 wz
04cb4     07 EB 01 56 |  if_ne	mov	result1, local03
04cb8     60 00 90 5D |  if_ne	jmp	#LR__0776
04cbc     18 10 06 F1 | 	add	local04, #24
04cc0     08 0F 02 FB | 	rdlong	local03, local04
04cc4     02 0E 86 F1 | 	sub	local03, #2
04cc8     04 10 86 F1 | 	sub	local04, #4
04ccc     08 0D 02 FB | 	rdlong	local02, local04
04cd0     14 10 86 F1 | 	sub	local04, #20
04cd4     07 0D 12 F2 | 	cmp	local02, local03 wc
04cd8     24 00 90 3D |  if_ae	jmp	#LR__0774
04cdc     14 10 06 F1 | 	add	local04, #20
04ce0     08 0F 02 FB | 	rdlong	local03, local04
04ce4     01 0E 06 F1 | 	add	local03, #1
04ce8     08 0F 62 FC | 	wrlong	local03, local04
04cec     10 10 86 F1 | 	sub	local04, #16
04cf0     08 0F C2 FA | 	rdbyte	local03, local04
04cf4     01 0E 46 F5 | 	or	local03, #1
04cf8     08 0F 42 FC | 	wrbyte	local03, local04
04cfc     04 10 86 F1 | 	sub	local04, #4
04d00                 | LR__0774
04d00     09 0D 02 F6 | 	mov	local02, local05
04d04     18 10 06 F1 | 	add	local04, #24
04d08     08 13 02 FB | 	rdlong	local05, local04
04d0c     18 10 86 F1 | 	sub	local04, #24
04d10     09 0D 12 F2 | 	cmp	local02, local05 wc
04d14     58 FF 9F CD |  if_b	jmp	#LR__0773
04d18                 | LR__0775
04d18                 | ' #line 1500 "ff.c"
04d18                 | ' 	return FR_OK;
04d18     00 EA 05 F6 | 	mov	result1, #0
04d1c                 | LR__0776
04d1c     A7 F0 03 F6 | 	mov	ptra, fp
04d20     B2 00 A0 FD | 	call	#popregs_
04d24                 | _fatfs_cc_remove_chain_ret
04d24     2D 00 64 FD | 	ret
04d28                 | 
04d28                 | _fatfs_cc_create_chain
04d28     09 4A 05 F6 | 	mov	COUNT_, #9
04d2c     A8 00 A0 FD | 	call	#pushregs_
04d30     00 0B 02 F6 | 	mov	local01, arg01
04d34     01 0D 0A F6 | 	mov	local02, arg02 wz
04d38     05 0F 02 FB | 	rdlong	local03, local01
04d3c     28 00 90 5D |  if_ne	jmp	#LR__0780
04d40     10 0E 06 F1 | 	add	local03, #16
04d44     07 11 0A FB | 	rdlong	local04, local03 wz
04d48     10 0E 86 F1 | 	sub	local03, #16
04d4c     18 0E 06 51 |  if_ne	add	local03, #24
04d50     07 13 02 5B |  if_ne	rdlong	local05, local03
04d54     18 0E 86 51 |  if_ne	sub	local03, #24
04d58     09 11 12 52 |  if_ne	cmp	local04, local05 wc
04d5c     50 00 90 4D |  if_c_and_nz	jmp	#LR__0781
04d60     01 10 06 F6 | 	mov	local04, #1
04d64     48 00 90 FD | 	jmp	#LR__0781
04d68                 | LR__0780
04d68     06 03 02 F6 | 	mov	arg02, local02
04d6c     05 01 02 F6 | 	mov	arg01, local01
04d70     EC FA BF FD | 	call	#_fatfs_cc_get_fat
04d74     F5 10 02 F6 | 	mov	local04, result1
04d78     02 10 16 F2 | 	cmp	local04, #2 wc
04d7c     01 EA 05 C6 |  if_b	mov	result1, #1
04d80     BC 01 90 CD |  if_b	jmp	#LR__0791
04d84     FF FF 7F FF 
04d88     FF 11 0E F2 | 	cmp	local04, ##-1 wz
04d8c     08 EB 01 A6 |  if_e	mov	result1, local04
04d90     AC 01 90 AD |  if_e	jmp	#LR__0791
04d94     18 0E 06 F1 | 	add	local03, #24
04d98     07 13 02 FB | 	rdlong	local05, local03
04d9c     18 0E 86 F1 | 	sub	local03, #24
04da0     09 11 12 F2 | 	cmp	local04, local05 wc
04da4     08 EB 01 C6 |  if_b	mov	result1, local04
04da8     94 01 90 CD |  if_b	jmp	#LR__0791
04dac     06 11 02 F6 | 	mov	local04, local02
04db0                 | LR__0781
04db0     14 0E 06 F1 | 	add	local03, #20
04db4     07 13 0A FB | 	rdlong	local05, local03 wz
04db8     14 0E 86 F1 | 	sub	local03, #20
04dbc     00 EA 05 A6 |  if_e	mov	result1, #0
04dc0     7C 01 90 AD |  if_e	jmp	#LR__0791
04dc4     00 14 06 F6 | 	mov	local06, #0
04dc8     06 11 0A F2 | 	cmp	local04, local02 wz
04dcc     74 00 90 5D |  if_ne	jmp	#LR__0784
04dd0     08 15 02 F6 | 	mov	local06, local04
04dd4     01 14 06 F1 | 	add	local06, #1
04dd8     18 0E 06 F1 | 	add	local03, #24
04ddc     07 13 02 FB | 	rdlong	local05, local03
04de0     18 0E 86 F1 | 	sub	local03, #24
04de4     09 15 12 F2 | 	cmp	local06, local05 wc
04de8     02 14 06 36 |  if_ae	mov	local06, #2
04dec     0A 03 02 F6 | 	mov	arg02, local06
04df0     05 01 02 F6 | 	mov	arg01, local01
04df4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
04df8     F5 12 02 F6 | 	mov	local05, result1
04dfc     01 12 0E F2 | 	cmp	local05, #1 wz
04e00     FF FF 7F 5F 
04e04     FF 13 0E 52 |  if_ne	cmp	local05, ##-1 wz
04e08     09 EB 01 A6 |  if_e	mov	result1, local05
04e0c     30 01 90 AD |  if_e	jmp	#LR__0791
04e10     00 12 0E F2 | 	cmp	local05, #0 wz
04e14     2C 00 90 AD |  if_e	jmp	#LR__0783
04e18     10 0E 06 F1 | 	add	local03, #16
04e1c     07 17 02 FB | 	rdlong	local07, local03
04e20     10 0E 86 F1 | 	sub	local03, #16
04e24     02 16 16 F2 | 	cmp	local07, #2 wc
04e28     14 00 90 CD |  if_b	jmp	#LR__0782
04e2c     18 0E 06 F1 | 	add	local03, #24
04e30     07 13 02 FB | 	rdlong	local05, local03
04e34     18 0E 86 F1 | 	sub	local03, #24
04e38     09 17 12 F2 | 	cmp	local07, local05 wc
04e3c     0B 11 02 C6 |  if_b	mov	local04, local07
04e40                 | LR__0782
04e40     00 14 06 F6 | 	mov	local06, #0
04e44                 | LR__0783
04e44                 | LR__0784
04e44     00 14 0E F2 | 	cmp	local06, #0 wz
04e48     60 00 90 5D |  if_ne	jmp	#LR__0787
04e4c     08 15 02 F6 | 	mov	local06, local04
04e50                 | ' 			ncl = scl;
04e50                 | ' 			for (;;) {
04e50                 | LR__0785
04e50     01 14 06 F1 | 	add	local06, #1
04e54     18 0E 06 F1 | 	add	local03, #24
04e58     07 13 02 FB | 	rdlong	local05, local03
04e5c     18 0E 86 F1 | 	sub	local03, #24
04e60     09 15 12 F2 | 	cmp	local06, local05 wc
04e64     02 14 06 36 |  if_ae	mov	local06, #2
04e68     08 15 1A 32 |  if_ae	cmp	local06, local04 wcz
04e6c     00 EA 05 16 |  if_a	mov	result1, #0
04e70     CC 00 90 1D |  if_a	jmp	#LR__0791
04e74     0A 03 02 F6 | 	mov	arg02, local06
04e78     05 01 02 F6 | 	mov	arg01, local01
04e7c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
04e80     F5 16 0A F6 | 	mov	local07, result1 wz
04e84     24 00 90 AD |  if_e	jmp	#LR__0786
04e88     01 16 0E F2 | 	cmp	local07, #1 wz
04e8c     FF FF 7F 5F 
04e90     FF 17 0E 52 |  if_ne	cmp	local07, ##-1 wz
04e94     0B EB 01 A6 |  if_e	mov	result1, local07
04e98     A4 00 90 AD |  if_e	jmp	#LR__0791
04e9c     08 15 0A F2 | 	cmp	local06, local04 wz
04ea0     00 EA 05 A6 |  if_e	mov	result1, #0
04ea4     98 00 90 AD |  if_e	jmp	#LR__0791
04ea8     A4 FF 9F FD | 	jmp	#LR__0785
04eac                 | LR__0786
04eac                 | LR__0787
04eac     07 01 02 F6 | 	mov	arg01, local03
04eb0     0A 03 02 F6 | 	mov	arg02, local06
04eb4     01 04 66 F6 | 	neg	arg03, #1
04eb8     48 FB BF FD | 	call	#_fatfs_cc_put_fat
04ebc     F5 18 0A F6 | 	mov	local08, result1 wz
04ec0     1C 00 90 5D |  if_ne	jmp	#LR__0788
04ec4     00 0C 0E F2 | 	cmp	local02, #0 wz
04ec8     14 00 90 AD |  if_e	jmp	#LR__0788
04ecc     07 01 02 F6 | 	mov	arg01, local03
04ed0     06 03 02 F6 | 	mov	arg02, local02
04ed4     0A 05 02 F6 | 	mov	arg03, local06
04ed8     28 FB BF FD | 	call	#_fatfs_cc_put_fat
04edc     F5 18 02 F6 | 	mov	local08, result1
04ee0                 | LR__0788
04ee0     00 18 0E F2 | 	cmp	local08, #0 wz
04ee4     4C 00 90 5D |  if_ne	jmp	#LR__0789
04ee8     10 0E 06 F1 | 	add	local03, #16
04eec     07 15 62 FC | 	wrlong	local06, local03
04ef0     08 0E 06 F1 | 	add	local03, #8
04ef4     07 13 02 FB | 	rdlong	local05, local03
04ef8     02 12 86 F1 | 	sub	local05, #2
04efc     04 0E 86 F1 | 	sub	local03, #4
04f00     07 1B 02 FB | 	rdlong	local09, local03
04f04     14 0E 86 F1 | 	sub	local03, #20
04f08     09 1B 1A F2 | 	cmp	local09, local05 wcz
04f0c     14 0E 06 E1 |  if_be	add	local03, #20
04f10     07 1B 02 EB |  if_be	rdlong	local09, local03
04f14     01 1A 86 E1 |  if_be	sub	local09, #1
04f18     07 1B 62 EC |  if_be	wrlong	local09, local03
04f1c     14 0E 86 E1 |  if_be	sub	local03, #20
04f20     04 0E 06 F1 | 	add	local03, #4
04f24     07 13 C2 FA | 	rdbyte	local05, local03
04f28     01 12 46 F5 | 	or	local05, #1
04f2c     07 13 42 FC | 	wrbyte	local05, local03
04f30     08 00 90 FD | 	jmp	#LR__0790
04f34                 | LR__0789
04f34     01 18 0E F2 | 	cmp	local08, #1 wz
04f38     01 14 C6 F6 | 	negz	local06, #1
04f3c                 | LR__0790
04f3c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
04f3c                 | ' 	}
04f3c                 | ' 
04f3c                 | ' 	return ncl;
04f3c     0A EB 01 F6 | 	mov	result1, local06
04f40                 | LR__0791
04f40     A7 F0 03 F6 | 	mov	ptra, fp
04f44     B2 00 A0 FD | 	call	#popregs_
04f48                 | _fatfs_cc_create_chain_ret
04f48     2D 00 64 FD | 	ret
04f4c                 | 
04f4c                 | _fatfs_cc_dir_clear
04f4c     06 4A 05 F6 | 	mov	COUNT_, #6
04f50     A8 00 A0 FD | 	call	#pushregs_
04f54     00 0B 02 F6 | 	mov	local01, arg01
04f58     01 0D 02 F6 | 	mov	local02, arg02
04f5c     05 01 02 F6 | 	mov	arg01, local01
04f60     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
04f64     00 EA 0D F2 | 	cmp	result1, #0 wz
04f68     01 EA 05 56 |  if_ne	mov	result1, #1
04f6c     90 00 90 5D |  if_ne	jmp	#LR__0802
04f70     05 01 02 F6 | 	mov	arg01, local01
04f74     06 03 02 F6 | 	mov	arg02, local02
04f78     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
04f7c     F5 0E 02 F6 | 	mov	local03, result1
04f80     30 0A 06 F1 | 	add	local01, #48
04f84     05 0F 62 FC | 	wrlong	local03, local01
04f88     04 0A 06 F1 | 	add	local01, #4
04f8c     05 01 02 F6 | 	mov	arg01, local01
04f90     00 02 06 F6 | 	mov	arg02, #0
04f94     09 04 C6 F9 | 	decod	arg03, #9
04f98     98 00 A0 FD | 	call	#\builtin_bytefill_
04f9c     05 11 02 F6 | 	mov	local04, local01
04fa0                 | ' #line 1667 "ff.c"
04fa0                 | ' 	{
04fa0                 | ' 		ibuf = fs->win; szb = 1;
04fa0                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
04fa0     00 12 06 F6 | 	mov	local05, #0
04fa4     34 0A 86 F1 | 	sub	local01, #52
04fa8                 | LR__0800
04fa8     0A 0A 06 F1 | 	add	local01, #10
04fac     05 15 E2 FA | 	rdword	local06, local01
04fb0     0A 0A 86 F1 | 	sub	local01, #10
04fb4     0A 13 12 F2 | 	cmp	local05, local06 wc
04fb8     2C 00 90 3D |  if_ae	jmp	#LR__0801
04fbc     01 0A 06 F1 | 	add	local01, #1
04fc0     05 01 C2 FA | 	rdbyte	arg01, local01
04fc4     01 0A 86 F1 | 	sub	local01, #1
04fc8     08 03 02 F6 | 	mov	arg02, local04
04fcc     07 05 02 F6 | 	mov	arg03, local03
04fd0     09 05 02 F1 | 	add	arg03, local05
04fd4     01 06 06 F6 | 	mov	arg04, #1
04fd8     9C EF BF FD | 	call	#_fatfs_cc_disk_write
04fdc     00 EA 0D F2 | 	cmp	result1, #0 wz
04fe0     01 12 06 A1 |  if_e	add	local05, #1
04fe4     C0 FF 9F AD |  if_e	jmp	#LR__0800
04fe8                 | LR__0801
04fe8                 | ' 	}
04fe8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
04fe8     0A 0A 06 F1 | 	add	local01, #10
04fec     05 11 E2 FA | 	rdword	local04, local01
04ff0     08 13 0A F2 | 	cmp	local05, local04 wz
04ff4     00 14 06 A6 |  if_e	mov	local06, #0
04ff8     01 14 06 56 |  if_ne	mov	local06, #1
04ffc     0A EB 01 F6 | 	mov	result1, local06
05000                 | LR__0802
05000     A7 F0 03 F6 | 	mov	ptra, fp
05004     B2 00 A0 FD | 	call	#popregs_
05008                 | _fatfs_cc_dir_clear_ret
05008     2D 00 64 FD | 	ret
0500c                 | 
0500c                 | _fatfs_cc_dir_sdi
0500c     06 4A 05 F6 | 	mov	COUNT_, #6
05010     A8 00 A0 FD | 	call	#pushregs_
05014     00 0B 02 F6 | 	mov	local01, arg01
05018     01 0D 02 F6 | 	mov	local02, arg02
0501c     05 0F 02 FB | 	rdlong	local03, local01
05020     00 10 00 FF 
05024     00 0C 16 F2 | 	cmp	local02, ##2097152 wc
05028     1F 0C CE C7 |  if_b	test	local02, #31 wz
0502c                 | ' 		return FR_INT_ERR;
0502c     02 EA 05 76 |  if_nc_or_nz	mov	result1, #2
05030     34 01 90 7D |  if_nc_or_nz	jmp	#LR__0816
05034     10 0A 06 F1 | 	add	local01, #16
05038     05 0D 62 FC | 	wrlong	local02, local01
0503c     08 0A 86 F1 | 	sub	local01, #8
05040     05 11 0A FB | 	rdlong	local04, local01 wz
05044     08 0A 86 F1 | 	sub	local01, #8
05048     07 13 C2 AA |  if_e	rdbyte	local05, local03
0504c     03 12 16 A2 |  if_e	cmp	local05, #3 wc
05050     28 0E 06 21 |  if_nc_and_z	add	local03, #40
05054     07 11 02 2B |  if_nc_and_z	rdlong	local04, local03
05058     28 0E 86 21 |  if_nc_and_z	sub	local03, #40
0505c     00 10 0E F2 | 	cmp	local04, #0 wz
05060     3C 00 90 5D |  if_ne	jmp	#LR__0810
05064     06 13 02 F6 | 	mov	local05, local02
05068     05 12 46 F0 | 	shr	local05, #5
0506c     08 0E 06 F1 | 	add	local03, #8
05070     07 03 E2 FA | 	rdword	arg02, local03
05074     08 0E 86 F1 | 	sub	local03, #8
05078     01 13 12 F2 | 	cmp	local05, arg02 wc
0507c     02 EA 05 36 |  if_ae	mov	result1, #2
05080     E4 00 90 3D |  if_ae	jmp	#LR__0816
05084     28 0E 06 F1 | 	add	local03, #40
05088     07 13 02 FB | 	rdlong	local05, local03
0508c     28 0E 86 F1 | 	sub	local03, #40
05090     18 0A 06 F1 | 	add	local01, #24
05094     05 13 62 FC | 	wrlong	local05, local01
05098     18 0A 86 F1 | 	sub	local01, #24
0509c     7C 00 90 FD | 	jmp	#LR__0815
050a0                 | LR__0810
050a0     0A 0E 06 F1 | 	add	local03, #10
050a4     07 15 E2 FA | 	rdword	local06, local03
050a8     0A 0E 86 F1 | 	sub	local03, #10
050ac     09 14 66 F0 | 	shl	local06, #9
050b0                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
050b0                 | ' 		while (ofs >= csz) {
050b0                 | LR__0811
050b0     0A 0D 12 F2 | 	cmp	local02, local06 wc
050b4     4C 00 90 CD |  if_b	jmp	#LR__0814
050b8     05 01 02 F6 | 	mov	arg01, local01
050bc     08 03 02 F6 | 	mov	arg02, local04
050c0     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
050c4     F5 10 02 F6 | 	mov	local04, result1
050c8     FF FF 7F FF 
050cc     FF 11 0E F2 | 	cmp	local04, ##-1 wz
050d0     01 EA 05 A6 |  if_e	mov	result1, #1
050d4     90 00 90 AD |  if_e	jmp	#LR__0816
050d8     02 10 16 F2 | 	cmp	local04, #2 wc
050dc     14 00 90 CD |  if_b	jmp	#LR__0812
050e0     18 0E 06 F1 | 	add	local03, #24
050e4     07 13 02 FB | 	rdlong	local05, local03
050e8     18 0E 86 F1 | 	sub	local03, #24
050ec     09 11 12 F2 | 	cmp	local04, local05 wc
050f0     08 00 90 CD |  if_b	jmp	#LR__0813
050f4                 | LR__0812
050f4     02 EA 05 F6 | 	mov	result1, #2
050f8     6C 00 90 FD | 	jmp	#LR__0816
050fc                 | LR__0813
050fc     0A 0D 82 F1 | 	sub	local02, local06
05100     AC FF 9F FD | 	jmp	#LR__0811
05104                 | LR__0814
05104     07 01 02 F6 | 	mov	arg01, local03
05108     08 03 02 F6 | 	mov	arg02, local04
0510c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
05110     18 0A 06 F1 | 	add	local01, #24
05114     05 EB 61 FC | 	wrlong	result1, local01
05118     18 0A 86 F1 | 	sub	local01, #24
0511c                 | LR__0815
0511c     14 0A 06 F1 | 	add	local01, #20
05120     05 11 62 FC | 	wrlong	local04, local01
05124     04 0A 06 F1 | 	add	local01, #4
05128     05 13 0A FB | 	rdlong	local05, local01 wz
0512c     18 0A 86 F1 | 	sub	local01, #24
05130     02 EA 05 A6 |  if_e	mov	result1, #2
05134     30 00 90 AD |  if_e	jmp	#LR__0816
05138     06 15 02 F6 | 	mov	local06, local02
0513c     09 14 46 F0 | 	shr	local06, #9
05140     18 0A 06 F1 | 	add	local01, #24
05144     05 13 02 FB | 	rdlong	local05, local01
05148     0A 13 02 F1 | 	add	local05, local06
0514c     05 13 62 FC | 	wrlong	local05, local01
05150     34 0E 06 F1 | 	add	local03, #52
05154     FF 0D 06 F5 | 	and	local02, #511
05158     06 0F 02 F1 | 	add	local03, local02
0515c     04 0A 06 F1 | 	add	local01, #4
05160     05 0F 62 FC | 	wrlong	local03, local01
05164                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
05164                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
05164                 | ' 
05164                 | ' 	return FR_OK;
05164     00 EA 05 F6 | 	mov	result1, #0
05168                 | LR__0816
05168     A7 F0 03 F6 | 	mov	ptra, fp
0516c     B2 00 A0 FD | 	call	#popregs_
05170                 | _fatfs_cc_dir_sdi_ret
05170     2D 00 64 FD | 	ret
05174                 | 
05174                 | _fatfs_cc_dir_next
05174     05 4A 05 F6 | 	mov	COUNT_, #5
05178     A8 00 A0 FD | 	call	#pushregs_
0517c     00 0B 02 F6 | 	mov	local01, arg01
05180     01 0D 02 F6 | 	mov	local02, arg02
05184     05 0F 02 FB | 	rdlong	local03, local01
05188     10 0A 06 F1 | 	add	local01, #16
0518c     05 11 02 FB | 	rdlong	local04, local01
05190     10 0A 86 F1 | 	sub	local01, #16
05194     20 10 06 F1 | 	add	local04, #32
05198     00 10 00 FF 
0519c     00 10 16 F2 | 	cmp	local04, ##2097152 wc
051a0     18 0A 06 31 |  if_ae	add	local01, #24
051a4     05 01 68 3C |  if_ae	wrlong	#0, local01
051a8     18 0A 86 31 |  if_ae	sub	local01, #24
051ac     18 0A 06 F1 | 	add	local01, #24
051b0     05 03 0A FB | 	rdlong	arg02, local01 wz
051b4     18 0A 86 F1 | 	sub	local01, #24
051b8     04 EA 05 A6 |  if_e	mov	result1, #4
051bc     64 01 90 AD |  if_e	jmp	#LR__0825
051c0     FF 11 CE F7 | 	test	local04, #511 wz
051c4     3C 01 90 5D |  if_ne	jmp	#LR__0824
051c8     18 0A 06 F1 | 	add	local01, #24
051cc     05 03 02 FB | 	rdlong	arg02, local01
051d0     01 02 06 F1 | 	add	arg02, #1
051d4     05 03 62 FC | 	wrlong	arg02, local01
051d8     04 0A 86 F1 | 	sub	local01, #4
051dc     05 03 0A FB | 	rdlong	arg02, local01 wz
051e0     14 0A 86 F1 | 	sub	local01, #20
051e4     2C 00 90 5D |  if_ne	jmp	#LR__0820
051e8     08 03 02 F6 | 	mov	arg02, local04
051ec     05 02 46 F0 | 	shr	arg02, #5
051f0     08 0E 06 F1 | 	add	local03, #8
051f4     07 0D E2 FA | 	rdword	local02, local03
051f8     08 0E 86 F1 | 	sub	local03, #8
051fc     06 03 12 F2 | 	cmp	arg02, local02 wc
05200     18 0A 06 31 |  if_ae	add	local01, #24
05204     05 01 68 3C |  if_ae	wrlong	#0, local01
05208                 | ' 				dp->sect = 0; return FR_NO_FILE;
05208     04 EA 05 36 |  if_ae	mov	result1, #4
0520c     14 01 90 3D |  if_ae	jmp	#LR__0825
05210     F0 00 90 FD | 	jmp	#LR__0823
05214                 | LR__0820
05214     08 01 02 F6 | 	mov	arg01, local04
05218     09 00 46 F0 | 	shr	arg01, #9
0521c     0A 0E 06 F1 | 	add	local03, #10
05220     07 03 E2 FA | 	rdword	arg02, local03
05224     0A 0E 86 F1 | 	sub	local03, #10
05228     01 02 86 F1 | 	sub	arg02, #1
0522c     01 01 CA F7 | 	test	arg01, arg02 wz
05230     D0 00 90 5D |  if_ne	jmp	#LR__0822
05234     05 01 02 F6 | 	mov	arg01, local01
05238     14 0A 06 F1 | 	add	local01, #20
0523c     05 03 02 FB | 	rdlong	arg02, local01
05240     14 0A 86 F1 | 	sub	local01, #20
05244     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
05248     F5 12 02 F6 | 	mov	local05, result1
0524c     02 12 16 F2 | 	cmp	local05, #2 wc
05250     02 EA 05 C6 |  if_b	mov	result1, #2
05254     CC 00 90 CD |  if_b	jmp	#LR__0825
05258     FF FF 7F FF 
0525c     FF 13 0E F2 | 	cmp	local05, ##-1 wz
05260     01 EA 05 A6 |  if_e	mov	result1, #1
05264     BC 00 90 AD |  if_e	jmp	#LR__0825
05268     18 0E 06 F1 | 	add	local03, #24
0526c     07 03 02 FB | 	rdlong	arg02, local03
05270     18 0E 86 F1 | 	sub	local03, #24
05274     01 13 12 F2 | 	cmp	local05, arg02 wc
05278     68 00 90 CD |  if_b	jmp	#LR__0821
0527c     00 0C 0E F2 | 	cmp	local02, #0 wz
05280     18 0A 06 A1 |  if_e	add	local01, #24
05284     05 01 68 AC |  if_e	wrlong	#0, local01
05288                 | ' 						dp->sect = 0; return FR_NO_FILE;
05288     04 EA 05 A6 |  if_e	mov	result1, #4
0528c     94 00 90 AD |  if_e	jmp	#LR__0825
05290     05 01 02 F6 | 	mov	arg01, local01
05294     14 0A 06 F1 | 	add	local01, #20
05298     05 03 02 FB | 	rdlong	arg02, local01
0529c     14 0A 86 F1 | 	sub	local01, #20
052a0     84 FA BF FD | 	call	#_fatfs_cc_create_chain
052a4     F5 12 0A F6 | 	mov	local05, result1 wz
052a8     07 EA 05 A6 |  if_e	mov	result1, #7
052ac     74 00 90 AD |  if_e	jmp	#LR__0825
052b0     01 12 0E F2 | 	cmp	local05, #1 wz
052b4     02 EA 05 A6 |  if_e	mov	result1, #2
052b8     68 00 90 AD |  if_e	jmp	#LR__0825
052bc     FF FF 7F FF 
052c0     FF 13 0E F2 | 	cmp	local05, ##-1 wz
052c4     01 EA 05 A6 |  if_e	mov	result1, #1
052c8     58 00 90 AD |  if_e	jmp	#LR__0825
052cc     09 03 02 F6 | 	mov	arg02, local05
052d0     07 01 02 F6 | 	mov	arg01, local03
052d4     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
052d8     00 EA 0D F2 | 	cmp	result1, #0 wz
052dc     01 EA 05 56 |  if_ne	mov	result1, #1
052e0     40 00 90 5D |  if_ne	jmp	#LR__0825
052e4                 | LR__0821
052e4     14 0A 06 F1 | 	add	local01, #20
052e8     05 13 62 FC | 	wrlong	local05, local01
052ec     07 01 02 F6 | 	mov	arg01, local03
052f0     09 03 02 F6 | 	mov	arg02, local05
052f4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
052f8     04 0A 06 F1 | 	add	local01, #4
052fc     05 EB 61 FC | 	wrlong	result1, local01
05300     18 0A 86 F1 | 	sub	local01, #24
05304                 | LR__0822
05304                 | LR__0823
05304                 | LR__0824
05304     10 0A 06 F1 | 	add	local01, #16
05308     05 11 62 FC | 	wrlong	local04, local01
0530c     34 0E 06 F1 | 	add	local03, #52
05310     FF 11 06 F5 | 	and	local04, #511
05314     08 0F 02 F1 | 	add	local03, local04
05318     0C 0A 06 F1 | 	add	local01, #12
0531c     05 0F 62 FC | 	wrlong	local03, local01
05320                 | ' #line 1771 "ff.c"
05320                 | ' 				}
05320                 | ' 				dp->clust = clst;
05320                 | ' 				dp->sect = clst2sect(fs, clst);
05320                 | ' 			}
05320                 | ' 		}
05320                 | ' 	}
05320                 | ' 	dp->dptr = ofs;
05320                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
05320                 | ' 
05320                 | ' 	return FR_OK;
05320     00 EA 05 F6 | 	mov	result1, #0
05324                 | LR__0825
05324     A7 F0 03 F6 | 	mov	ptra, fp
05328     B2 00 A0 FD | 	call	#popregs_
0532c                 | _fatfs_cc_dir_next_ret
0532c     2D 00 64 FD | 	ret
05330                 | 
05330                 | _fatfs_cc_dir_alloc
05330     08 4A 05 F6 | 	mov	COUNT_, #8
05334     A8 00 A0 FD | 	call	#pushregs_
05338     00 0B 02 F6 | 	mov	local01, arg01
0533c     01 0D 02 F6 | 	mov	local02, arg02
05340     05 0F 02 FB | 	rdlong	local03, local01
05344     05 01 02 F6 | 	mov	arg01, local01
05348     00 02 06 F6 | 	mov	arg02, #0
0534c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
05350     F5 10 0A F6 | 	mov	local04, result1 wz
05354     70 00 90 5D |  if_ne	jmp	#LR__0834
05358     00 12 06 F6 | 	mov	local05, #0
0535c                 | ' 		n = 0;
0535c                 | ' 		do {
0535c                 | LR__0830
0535c     18 0A 06 F1 | 	add	local01, #24
05360     05 03 02 FB | 	rdlong	arg02, local01
05364     18 0A 86 F1 | 	sub	local01, #24
05368     07 01 02 F6 | 	mov	arg01, local03
0536c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
05370     F5 10 0A F6 | 	mov	local04, result1 wz
05374     50 00 90 5D |  if_ne	jmp	#LR__0833
05378     1C 0A 06 F1 | 	add	local01, #28
0537c     05 15 02 FB | 	rdlong	local06, local01
05380     1C 0A 86 F1 | 	sub	local01, #28
05384     0A 15 C2 FA | 	rdbyte	local06, local06
05388     E5 14 0E F2 | 	cmp	local06, #229 wz
0538c     1C 0A 06 51 |  if_ne	add	local01, #28
05390     05 17 02 5B |  if_ne	rdlong	local07, local01
05394     1C 0A 86 51 |  if_ne	sub	local01, #28
05398     0B 19 CA 5A |  if_ne	rdbyte	local08, local07 wz
0539c     10 00 90 5D |  if_ne	jmp	#LR__0831
053a0     01 12 06 F1 | 	add	local05, #1
053a4     06 13 0A F2 | 	cmp	local05, local02 wz
053a8     1C 00 90 AD |  if_e	jmp	#LR__0833
053ac     04 00 90 FD | 	jmp	#LR__0832
053b0                 | LR__0831
053b0     00 12 06 F6 | 	mov	local05, #0
053b4                 | LR__0832
053b4     05 01 02 F6 | 	mov	arg01, local01
053b8     01 02 06 F6 | 	mov	arg02, #1
053bc     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
053c0     F5 10 0A F6 | 	mov	local04, result1 wz
053c4     94 FF 9F AD |  if_e	jmp	#LR__0830
053c8                 | LR__0833
053c8                 | LR__0834
053c8     04 10 0E F2 | 	cmp	local04, #4 wz
053cc     07 10 06 A6 |  if_e	mov	local04, #7
053d0                 | ' 	return res;
053d0     08 EB 01 F6 | 	mov	result1, local04
053d4     A7 F0 03 F6 | 	mov	ptra, fp
053d8     B2 00 A0 FD | 	call	#popregs_
053dc                 | _fatfs_cc_dir_alloc_ret
053dc     2D 00 64 FD | 	ret
053e0                 | 
053e0                 | _fatfs_cc_ld_clust
053e0     00 EF 01 F6 | 	mov	_var01, arg01
053e4     01 01 02 F6 | 	mov	arg01, arg02
053e8     1A 00 06 F1 | 	add	arg01, #26
053ec                 | ' {
053ec                 | ' 
053ec                 | ' 	return *((WORD*)ptr);
053ec     00 EB E1 FA | 	rdword	result1, arg01
053f0     F5 00 32 F9 | 	getword	arg01, result1, #0
053f4     F7 EE C1 FA | 	rdbyte	_var01, _var01
053f8     03 EE 0D F2 | 	cmp	_var01, #3 wz
053fc     14 02 06 A1 |  if_e	add	arg02, #20
05400                 | ' {
05400                 | ' 
05400                 | ' 	return *((WORD*)ptr);
05400     01 EB E1 AA |  if_e	rdword	result1, arg02
05404     10 EA 65 A0 |  if_e	shl	result1, #16
05408     F5 00 42 A5 |  if_e	or	arg01, result1
0540c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
0540c                 | ' 	}
0540c                 | ' 
0540c                 | ' 	return cl;
0540c     00 EB 01 F6 | 	mov	result1, arg01
05410                 | _fatfs_cc_ld_clust_ret
05410     2D 00 64 FD | 	ret
05414                 | 
05414                 | _fatfs_cc_st_clust
05414     00 EF 01 F6 | 	mov	_var01, arg01
05418     01 01 02 F6 | 	mov	arg01, arg02
0541c     1A 00 06 F1 | 	add	arg01, #26
05420     00 05 52 FC | 	wrword	arg03, arg01
05424     F7 EE C1 FA | 	rdbyte	_var01, _var01
05428     03 EE 0D F2 | 	cmp	_var01, #3 wz
0542c     14 02 06 A1 |  if_e	add	arg02, #20
05430     10 04 46 A0 |  if_e	shr	arg03, #16
05434     01 05 52 AC |  if_e	wrword	arg03, arg02
05438                 | _fatfs_cc_st_clust_ret
05438     2D 00 64 FD | 	ret
0543c                 | 
0543c                 | _fatfs_cc_cmp_lfn
0543c     07 4A 05 F6 | 	mov	COUNT_, #7
05440     A8 00 A0 FD | 	call	#pushregs_
05444     00 0B 02 F6 | 	mov	local01, arg01
05448     01 01 02 F6 | 	mov	arg01, arg02
0544c     1A 00 06 F1 | 	add	arg01, #26
05450                 | ' {
05450                 | ' 
05450                 | ' 	return *((WORD*)ptr);
05450     00 EB E9 FA | 	rdword	result1, arg01 wz
05454     00 EA 05 56 |  if_ne	mov	result1, #0
05458     E0 00 90 5D |  if_ne	jmp	#LR__0846
0545c     01 0D C2 FA | 	rdbyte	local02, arg02
05460     3F 0C 06 F5 | 	and	local02, #63
05464     01 0C 86 F1 | 	sub	local02, #1
05468     0D 0C 06 FD | 	qmul	local02, #13
0546c                 | ' 
0546c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
0546c                 | ' 
0546c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
0546c     01 0E 06 F6 | 	mov	local03, #1
05470     00 10 06 F6 | 	mov	local04, #0
05474     18 12 62 FD | 	getqx	local05
05478                 | LR__0840
05478     0D 10 16 F2 | 	cmp	local04, #13 wc
0547c     9C 00 90 3D |  if_ae	jmp	#LR__0845
05480     01 01 02 F6 | 	mov	arg01, arg02
05484     08 0D 02 F6 | 	mov	local02, local04
05488     01 00 00 FF 
0548c     AE E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
05490     F3 0C 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
05494     06 0D C2 FA | 	rdbyte	local02, local02
05498     01 0C 06 FA | 	mul	local02, #1
0549c     06 01 02 F1 | 	add	arg01, local02
054a0     01 00 00 FF 
054a4     AE E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
054a8                 | ' {
054a8                 | ' 
054a8                 | ' 	return *((WORD*)ptr);
054a8     00 EB E1 FA | 	rdword	result1, arg01
054ac     F5 14 02 F6 | 	mov	local06, result1
054b0     07 0D 02 F6 | 	mov	local02, local03
054b4     0F 0C 4E F7 | 	zerox	local02, #15 wz
054b8     44 00 90 AD |  if_e	jmp	#LR__0843
054bc     00 13 16 F2 | 	cmp	local05, #256 wc
054c0     2C 00 90 3D |  if_ae	jmp	#LR__0841
054c4     0A 01 32 F9 | 	getword	arg01, local06, #0
054c8     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
054cc     F5 0C 02 F6 | 	mov	local02, result1
054d0     09 0F 02 F6 | 	mov	local03, local05
054d4     01 0E 66 F0 | 	shl	local03, #1
054d8     05 0F 02 F1 | 	add	local03, local01
054dc     07 01 E2 FA | 	rdword	arg01, local03
054e0     01 12 06 F1 | 	add	local05, #1
054e4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
054e8     F5 0C 0A F2 | 	cmp	local02, result1 wz
054ec     08 00 90 AD |  if_e	jmp	#LR__0842
054f0                 | LR__0841
054f0                 | ' 				return 0;
054f0     00 EA 05 F6 | 	mov	result1, #0
054f4     44 00 90 FD | 	jmp	#LR__0846
054f8                 | LR__0842
054f8     0A 0F 02 F6 | 	mov	local03, local06
054fc     14 00 90 FD | 	jmp	#LR__0844
05500                 | LR__0843
05500     0A 15 32 F9 | 	getword	local06, local06, #0
05504     7F 00 00 FF 
05508     FF 15 0E F2 | 	cmp	local06, ##65535 wz
0550c     00 EA 05 56 |  if_ne	mov	result1, #0
05510     28 00 90 5D |  if_ne	jmp	#LR__0846
05514                 | LR__0844
05514     01 10 06 F1 | 	add	local04, #1
05518     5C FF 9F FD | 	jmp	#LR__0840
0551c                 | LR__0845
0551c     01 0D C2 FA | 	rdbyte	local02, arg02
05520     40 0C CE F7 | 	test	local02, #64 wz
05524     00 0E 0E 52 |  if_ne	cmp	local03, #0 wz
05528     01 12 66 50 |  if_ne	shl	local05, #1
0552c     05 13 02 51 |  if_ne	add	local05, local01
05530     09 17 EA 5A |  if_ne	rdword	local07, local05 wz
05534     00 EA 05 56 |  if_ne	mov	result1, #0
05538                 | ' 
05538                 | ' 	return 1;
05538     01 EA 05 A6 |  if_e	mov	result1, #1
0553c                 | LR__0846
0553c     A7 F0 03 F6 | 	mov	ptra, fp
05540     B2 00 A0 FD | 	call	#popregs_
05544                 | _fatfs_cc_cmp_lfn_ret
05544     2D 00 64 FD | 	ret
05548                 | 
05548                 | _fatfs_cc_pick_lfn
05548     00 EF 01 F6 | 	mov	_var01, arg01
0554c     01 01 02 F6 | 	mov	arg01, arg02
05550     1A 00 06 F1 | 	add	arg01, #26
05554                 | ' {
05554                 | ' 
05554                 | ' 	return *((WORD*)ptr);
05554     00 EB E9 FA | 	rdword	result1, arg01 wz
05558     00 EA 05 56 |  if_ne	mov	result1, #0
0555c     D4 00 90 5D |  if_ne	jmp	#LR__0855
05560     01 F1 C1 FA | 	rdbyte	_var02, arg02
05564     40 F0 25 F5 | 	andn	_var02, #64
05568     01 F0 85 F1 | 	sub	_var02, #1
0556c     0D F0 05 FD | 	qmul	_var02, #13
05570                 | ' 
05570                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
05570                 | ' 
05570                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
05570     01 F2 05 F6 | 	mov	_var03, #1
05574     00 F4 05 F6 | 	mov	_var04, #0
05578     18 F6 61 FD | 	getqx	_var05
0557c                 | LR__0850
0557c     0D F4 15 F2 | 	cmp	_var04, #13 wc
05580     80 00 90 3D |  if_ae	jmp	#LR__0853
05584     01 01 02 F6 | 	mov	arg01, arg02
05588     FA F0 01 F6 | 	mov	_var02, _var04
0558c     01 00 00 FF 
05590     AE E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
05594     F3 F0 01 F1 | 	add	_var02, ptr__fatfs_cc_dat__
05598     F8 F0 C1 FA | 	rdbyte	_var02, _var02
0559c     01 F0 05 FA | 	mul	_var02, #1
055a0     F8 00 02 F1 | 	add	arg01, _var02
055a4     01 00 00 FF 
055a8     AE E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
055ac                 | ' {
055ac                 | ' 
055ac                 | ' 	return *((WORD*)ptr);
055ac     00 EB E1 FA | 	rdword	result1, arg01
055b0     F5 F8 01 F6 | 	mov	_var06, result1
055b4     F9 F0 01 F6 | 	mov	_var02, _var03
055b8     0F F0 4D F7 | 	zerox	_var02, #15 wz
055bc     28 00 90 AD |  if_e	jmp	#LR__0851
055c0     00 F7 15 F2 | 	cmp	_var05, #256 wc
055c4     00 EA 05 36 |  if_ae	mov	result1, #0
055c8     68 00 90 3D |  if_ae	jmp	#LR__0855
055cc     FB F0 01 F6 | 	mov	_var02, _var05
055d0     01 F0 65 F0 | 	shl	_var02, #1
055d4     F7 F0 01 F1 | 	add	_var02, _var01
055d8     FC F2 01 F6 | 	mov	_var03, _var06
055dc     F8 F2 51 FC | 	wrword	_var03, _var02
055e0     01 F6 05 F1 | 	add	_var05, #1
055e4     14 00 90 FD | 	jmp	#LR__0852
055e8                 | LR__0851
055e8     FC F8 31 F9 | 	getword	_var06, _var06, #0
055ec     7F 00 00 FF 
055f0     FF F9 0D F2 | 	cmp	_var06, ##65535 wz
055f4     00 EA 05 56 |  if_ne	mov	result1, #0
055f8     38 00 90 5D |  if_ne	jmp	#LR__0855
055fc                 | LR__0852
055fc     01 F4 05 F1 | 	add	_var04, #1
05600     78 FF 9F FD | 	jmp	#LR__0850
05604                 | LR__0853
05604     01 F1 C1 FA | 	rdbyte	_var02, arg02
05608     40 F0 CD F7 | 	test	_var02, #64 wz
0560c     F9 FA 01 56 |  if_ne	mov	_var07, _var03
05610     0F FA 4D 57 |  if_ne	zerox	_var07, #15 wz
05614     18 00 90 AD |  if_e	jmp	#LR__0854
05618     00 F7 15 F2 | 	cmp	_var05, #256 wc
0561c     00 EA 05 36 |  if_ae	mov	result1, #0
05620     10 00 90 3D |  if_ae	jmp	#LR__0855
05624     01 F6 65 F0 | 	shl	_var05, #1
05628     F7 F6 01 F1 | 	add	_var05, _var01
0562c     FB 00 58 FC | 	wrword	#0, _var05
05630                 | LR__0854
05630                 | ' 		lfnbuf[i] = 0;
05630                 | ' 	}
05630                 | ' 
05630                 | ' 	return 1;
05630     01 EA 05 F6 | 	mov	result1, #1
05634                 | LR__0855
05634                 | _fatfs_cc_pick_lfn_ret
05634     2D 00 64 FD | 	ret
05638                 | 
05638                 | _fatfs_cc_put_lfn
05638     0D 02 06 F1 | 	add	arg02, #13
0563c     01 07 42 FC | 	wrbyte	arg04, arg02
05640     02 07 E2 F8 | 	getbyte	arg04, arg03, #0
05644     01 06 86 F1 | 	sub	arg04, #1
05648     0D 06 06 FD | 	qmul	arg04, #13
0564c     00 EF 01 F6 | 	mov	_var01, arg01
05650     02 02 86 F1 | 	sub	arg02, #2
05654     01 1F 48 FC | 	wrbyte	#15, arg02
05658     01 02 06 F1 | 	add	arg02, #1
0565c     01 01 48 FC | 	wrbyte	#0, arg02
05660     0C 02 86 F1 | 	sub	arg02, #12
05664     01 01 02 F6 | 	mov	arg01, arg02
05668     1A 00 06 F1 | 	add	arg01, #26
0566c     00 01 58 FC | 	wrword	#0, arg01
05670     00 F0 05 F6 | 	mov	_var02, #0
05674     00 F2 05 F6 | 	mov	_var03, #0
05678                 | ' 	BYTE* dir,
05678                 | ' 	BYTE ord,
05678                 | ' 	BYTE sum
05678                 | ' )
05678                 | ' {
05678                 | ' 	UINT i, s;
05678                 | ' 	WCHAR wc;
05678                 | ' 
05678                 | ' 
05678                 | ' 	dir[ 13 ] = sum;
05678                 | ' 	dir[ 11 ] =  0x0F ;
05678                 | ' 	dir[ 12 ] = 0;
05678                 | ' 	st_word(dir +  26 , 0);
05678                 | ' 
05678                 | ' 	i = (ord - 1) * 13;
05678                 | ' 	s = wc = 0;
05678                 | ' 	do {
05678     01 00 00 FF 
0567c     AE E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
05680     18 F4 61 FD | 	getqx	_var04
05684     97 2A 48 FB | 	callpa	#(@LR__0861-@LR__0860)>>2,fcache_load_ptr_
05688                 | LR__0860
05688     F8 06 32 F9 | 	getword	arg04, _var02, #0
0568c     7F 00 00 FF 
05690     FF 07 0E F2 | 	cmp	arg04, ##65535 wz
05694     FA 00 02 56 |  if_ne	mov	arg01, _var04
05698     01 F4 05 51 |  if_ne	add	_var04, #1
0569c     01 00 66 50 |  if_ne	shl	arg01, #1
056a0     F7 00 02 51 |  if_ne	add	arg01, _var01
056a4     00 F1 E1 5A |  if_ne	rdword	_var02, arg01
056a8     01 01 02 F6 | 	mov	arg01, arg02
056ac     F9 06 02 F6 | 	mov	arg04, _var03
056b0     F3 06 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
056b4     03 07 C2 FA | 	rdbyte	arg04, arg04
056b8     01 06 06 FA | 	mul	arg04, #1
056bc     03 01 02 F1 | 	add	arg01, arg04
056c0     00 F1 51 FC | 	wrword	_var02, arg01
056c4     F8 06 02 F6 | 	mov	arg04, _var02
056c8     0F 06 4E F7 | 	zerox	arg04, #15 wz
056cc     0F F0 CD A9 |  if_e	bmask	_var02, #15
056d0     01 F2 05 F1 | 	add	_var03, #1
056d4     0D F2 15 F2 | 	cmp	_var03, #13 wc
056d8     AC FF 9F CD |  if_b	jmp	#LR__0860
056dc                 | LR__0861
056dc     01 00 00 FF 
056e0     AE E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
056e4     F8 F0 31 F9 | 	getword	_var02, _var02, #0
056e8     7F 00 00 FF 
056ec     FF F1 0D F2 | 	cmp	_var02, ##65535 wz
056f0     01 F4 65 50 |  if_ne	shl	_var04, #1
056f4     F7 F4 01 51 |  if_ne	add	_var04, _var01
056f8     FA F4 E9 5A |  if_ne	rdword	_var04, _var04 wz
056fc     02 05 E2 A8 |  if_e	getbyte	arg03, arg03, #0
05700     40 04 46 A5 |  if_e	or	arg03, #64
05704     01 05 42 FC | 	wrbyte	arg03, arg02
05708                 | _fatfs_cc_put_lfn_ret
05708     2D 00 64 FD | 	ret
0570c                 | 
0570c                 | _fatfs_cc_gen_numname
0570c     08 4A 05 F6 | 	mov	COUNT_, #8
05710     A8 00 A0 FD | 	call	#pushregs_
05714     2C F0 07 F1 | 	add	ptra, #44
05718     00 0B 02 F6 | 	mov	local01, arg01
0571c     01 0D 02 F6 | 	mov	local02, arg02
05720     02 0F 02 F6 | 	mov	local03, arg03
05724     03 11 02 F6 | 	mov	local04, arg04
05728     05 01 02 F6 | 	mov	arg01, local01
0572c     06 03 02 F6 | 	mov	arg02, local02
05730     0B 04 06 F6 | 	mov	arg03, #11
05734     A4 B5 BF FD | 	call	#__system____builtin_memmove
05738     06 10 16 F2 | 	cmp	local04, #6 wc
0573c     48 00 90 CD |  if_b	jmp	#LR__0875
05740     08 13 02 F6 | 	mov	local05, local04
05744     97 1E 48 FB | 	callpa	#(@LR__0873-@LR__0870)>>2,fcache_load_ptr_
05748                 | ' 		sreg = seq;
05748                 | ' 		while (*lfn) {
05748                 | LR__0870
05748     07 15 EA FA | 	rdword	local06, local03 wz
0574c     34 00 90 AD |  if_e	jmp	#LR__0874
05750     07 17 E2 FA | 	rdword	local07, local03
05754                 | ' 			wc = *lfn++;
05754                 | ' 			for (i = 0; i < 16; i++) {
05754     02 0E 06 F1 | 	add	local03, #2
05758     10 12 DC FC | 	rep	@LR__0872, #16
0575c                 | LR__0871
0575c     01 12 66 F0 | 	shl	local05, #1
05760     0B 15 32 F9 | 	getword	local06, local07, #0
05764     01 14 06 F5 | 	and	local06, #1
05768     0A 13 02 F1 | 	add	local05, local06
0576c     0B 17 32 F9 | 	getword	local07, local07, #0
05770     01 16 46 F0 | 	shr	local07, #1
05774     10 12 2E F4 | 	testbn	local05, #16 wz
05778     88 00 00 5F 
0577c     21 12 66 55 |  if_ne	xor	local05, ##69665
05780                 | LR__0872
05780     C4 FF 9F FD | 	jmp	#LR__0870
05784                 | LR__0873
05784                 | LR__0874
05784     09 11 02 F6 | 	mov	local04, local05
05788                 | LR__0875
05788     07 16 06 F6 | 	mov	local07, #7
0578c                 | ' 			}
0578c                 | ' 		}
0578c                 | ' 		seq = (UINT)sreg;
0578c                 | ' 	}
0578c                 | ' 
0578c                 | ' 
0578c                 | ' 	i = 7;
0578c                 | ' 	do {
0578c     10 4E 05 F1 | 	add	fp, #16
05790     97 1A 48 FB | 	callpa	#(@LR__0877-@LR__0876)>>2,fcache_load_ptr_
05794                 | LR__0876
05794     08 13 42 F8 | 	getnib	local05, local04, #0
05798     30 12 06 F1 | 	add	local05, #48
0579c     04 10 46 F0 | 	shr	local04, #4
057a0     09 15 E2 F8 | 	getbyte	local06, local05, #0
057a4     3A 14 16 F2 | 	cmp	local06, #58 wc
057a8     09 13 E2 38 |  if_ae	getbyte	local05, local05, #0
057ac     07 12 06 31 |  if_ae	add	local05, #7
057b0     0B 15 02 F6 | 	mov	local06, local07
057b4     01 16 8E F1 | 	sub	local07, #1 wz
057b8     A7 14 02 F1 | 	add	local06, fp
057bc     0A 13 42 FC | 	wrbyte	local05, local06
057c0     00 10 0E 52 |  if_ne	cmp	local04, #0 wz
057c4     CC FF 9F 5D |  if_ne	jmp	#LR__0876
057c8                 | LR__0877
057c8     0B 15 02 F6 | 	mov	local06, local07
057cc     A7 14 02 F1 | 	add	local06, fp
057d0     0A FD 48 FC | 	wrbyte	#126, local06
057d4                 | ' 	ns[i] = '~';
057d4                 | ' 
057d4                 | ' 
057d4                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
057d4     00 12 06 F6 | 	mov	local05, #0
057d8     10 4E 85 F1 | 	sub	fp, #16
057dc     97 2A 48 FB | 	callpa	#(@LR__0880-@LR__0878)>>2,fcache_load_ptr_
057e0                 | LR__0878
057e0     0B 13 12 F2 | 	cmp	local05, local07 wc
057e4     4C 00 90 3D |  if_ae	jmp	#LR__0881
057e8     09 15 02 F6 | 	mov	local06, local05
057ec     05 15 02 F1 | 	add	local06, local01
057f0     0A 15 C2 FA | 	rdbyte	local06, local06
057f4     20 14 0E F2 | 	cmp	local06, #32 wz
057f8     38 00 90 AD |  if_e	jmp	#LR__0881
057fc     09 01 02 F6 | 	mov	arg01, local05
05800     05 01 02 F1 | 	add	arg01, local01
05804     00 01 CA FA | 	rdbyte	arg01, arg01 wz
05808     00 EA 05 56 |  if_ne	mov	result1, #0
0580c                 | ' 
0580c                 | ' 	return 0;
0580c     00 EA 05 A6 |  if_e	mov	result1, #0
05810     00 EA 0D F2 | 	cmp	result1, #0 wz
05814     14 00 90 AD |  if_e	jmp	#LR__0879
05818     0B 15 02 F6 | 	mov	local06, local07
0581c     01 14 86 F1 | 	sub	local06, #1
05820     0A 13 0A F2 | 	cmp	local05, local06 wz
05824     0C 00 90 AD |  if_e	jmp	#LR__0881
05828     01 12 06 F1 | 	add	local05, #1
0582c                 | LR__0879
0582c     01 12 06 F1 | 	add	local05, #1
05830     AC FF 9F FD | 	jmp	#LR__0878
05834                 | LR__0880
05834                 | LR__0881
05834     97 20 48 FB | 	callpa	#(@LR__0885-@LR__0882)>>2,fcache_load_ptr_
05838                 | ' 			j++;
05838                 | ' 		}
05838                 | ' 	}
05838                 | ' 	do {
05838                 | LR__0882
05838     09 15 02 F6 | 	mov	local06, local05
0583c     05 15 02 F1 | 	add	local06, local01
05840     08 16 16 F2 | 	cmp	local07, #8 wc
05844     01 12 06 F1 | 	add	local05, #1
05848     1C 00 90 3D |  if_ae	jmp	#LR__0883
0584c     0B 11 02 F6 | 	mov	local04, local07
05850     10 4E 05 F1 | 	add	fp, #16
05854     A7 10 02 F1 | 	add	local04, fp
05858     08 19 C2 FA | 	rdbyte	local08, local04
0585c     01 16 06 F1 | 	add	local07, #1
05860     10 4E 85 F1 | 	sub	fp, #16
05864     04 00 90 FD | 	jmp	#LR__0884
05868                 | LR__0883
05868     20 18 06 F6 | 	mov	local08, #32
0586c                 | LR__0884
0586c     0A 19 42 FC | 	wrbyte	local08, local06
05870     08 12 16 F2 | 	cmp	local05, #8 wc
05874     C0 FF 9F CD |  if_b	jmp	#LR__0882
05878                 | LR__0885
05878     A7 F0 03 F6 | 	mov	ptra, fp
0587c     B2 00 A0 FD | 	call	#popregs_
05880                 | _fatfs_cc_gen_numname_ret
05880     2D 00 64 FD | 	ret
05884                 | 
05884                 | _fatfs_cc_sum_sfn
05884     00 EE 05 F6 | 	mov	_var01, #0
05888                 | ' )
05888                 | ' {
05888                 | ' 	BYTE sum = 0;
05888                 | ' 	UINT n = 11;
05888                 | ' 
05888                 | ' 	do {
05888     97 12 48 FB | 	callpa	#(@LR__0892-@LR__0890)>>2,fcache_load_ptr_
0588c                 | LR__0890
0588c     0B 10 DC FC | 	rep	@LR__0893, #11
05890                 | LR__0891
05890     F7 EA E1 F8 | 	getbyte	result1, _var01, #0
05894     01 EA 45 F0 | 	shr	result1, #1
05898     F7 EE E1 F8 | 	getbyte	_var01, _var01, #0
0589c     07 EE 65 F0 | 	shl	_var01, #7
058a0     F7 EA 01 F1 | 	add	result1, _var01
058a4     00 EF C1 FA | 	rdbyte	_var01, arg01
058a8     F5 EE 01 F1 | 	add	_var01, result1
058ac     01 00 06 F1 | 	add	arg01, #1
058b0                 | LR__0892
058b0                 | LR__0893
058b0                 | ' 	return sum;
058b0     F7 EA 01 F6 | 	mov	result1, _var01
058b4                 | _fatfs_cc_sum_sfn_ret
058b4     2D 00 64 FD | 	ret
058b8                 | 
058b8                 | _fatfs_cc_dir_read
058b8     0C 4A 05 F6 | 	mov	COUNT_, #12
058bc     A8 00 A0 FD | 	call	#pushregs_
058c0     00 0B 02 F6 | 	mov	local01, arg01
058c4     01 0D 02 F6 | 	mov	local02, arg02
058c8     04 0E 06 F6 | 	mov	local03, #4
058cc     05 11 02 FB | 	rdlong	local04, local01
058d0     FF 12 06 F6 | 	mov	local05, #255
058d4     FF 14 06 F6 | 	mov	local06, #255
058d8                 | ' )
058d8                 | ' {
058d8                 | ' 	FRESULT res = FR_NO_FILE;
058d8                 | ' 	FATFS *fs = dp->obj.fs;
058d8                 | ' 	BYTE attr, b;
058d8                 | ' 
058d8                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
058d8                 | ' 
058d8                 | ' 
058d8                 | ' 	while (dp->sect) {
058d8                 | LR__0900
058d8     18 0A 06 F1 | 	add	local01, #24
058dc     05 EB 09 FB | 	rdlong	result1, local01 wz
058e0     18 0A 86 F1 | 	sub	local01, #24
058e4     AC 01 90 AD |  if_e	jmp	#LR__0910
058e8     18 0A 06 F1 | 	add	local01, #24
058ec     05 03 02 FB | 	rdlong	arg02, local01
058f0     18 0A 86 F1 | 	sub	local01, #24
058f4     08 01 02 F6 | 	mov	arg01, local04
058f8     AC ED BF FD | 	call	#_fatfs_cc_move_window
058fc     F5 0E 0A F6 | 	mov	local03, result1 wz
05900     90 01 90 5D |  if_ne	jmp	#LR__0910
05904     1C 0A 06 F1 | 	add	local01, #28
05908     05 EB 01 FB | 	rdlong	result1, local01
0590c     1C 0A 86 F1 | 	sub	local01, #28
05910     F5 16 C2 FA | 	rdbyte	local07, result1
05914     0B EB 01 F6 | 	mov	result1, local07
05918     07 EA 4D F7 | 	zerox	result1, #7 wz
0591c     04 0E 06 A6 |  if_e	mov	local03, #4
05920                 | ' 			res = FR_NO_FILE; break;
05920     70 01 90 AD |  if_e	jmp	#LR__0910
05924     1C 0A 06 F1 | 	add	local01, #28
05928     05 19 02 FB | 	rdlong	local08, local01
0592c     0B 18 06 F1 | 	add	local08, #11
05930     0C 1B C2 FA | 	rdbyte	local09, local08
05934     3F 1A 06 F5 | 	and	local09, #63
05938     16 0A 86 F1 | 	sub	local01, #22
0593c     05 1B 42 FC | 	wrbyte	local09, local01
05940     06 0A 86 F1 | 	sub	local01, #6
05944     0B EB E1 F8 | 	getbyte	result1, local07, #0
05948     E5 EA 0D F2 | 	cmp	result1, #229 wz
0594c     0B 19 02 56 |  if_ne	mov	local08, local07
05950     0C 19 E2 58 |  if_ne	getbyte	local08, local08, #0
05954     2E 18 0E 52 |  if_ne	cmp	local08, #46 wz
05958     1C 00 90 AD |  if_e	jmp	#LR__0901
0595c     00 1C 06 F6 | 	mov	local10, #0
05960     0D 19 E2 F8 | 	getbyte	local08, local09, #0
05964     20 18 26 F5 | 	andn	local08, #32
05968     08 18 0E F2 | 	cmp	local08, #8 wz
0596c     01 1C 06 A6 |  if_e	mov	local10, #1
05970     06 1D 0A F2 | 	cmp	local10, local02 wz
05974     08 00 90 AD |  if_e	jmp	#LR__0902
05978                 | LR__0901
05978     FF 12 06 F6 | 	mov	local05, #255
0597c     00 01 90 FD | 	jmp	#LR__0909
05980                 | LR__0902
05980     0D 1B E2 F8 | 	getbyte	local09, local09, #0
05984     0F 1A 0E F2 | 	cmp	local09, #15 wz
05988     B4 00 90 5D |  if_ne	jmp	#LR__0906
0598c     0B 1F E2 F8 | 	getbyte	local11, local07, #0
05990     40 1E CE F7 | 	test	local11, #64 wz
05994     30 00 90 AD |  if_e	jmp	#LR__0903
05998     1C 0A 06 F1 | 	add	local01, #28
0599c     05 1F 02 FB | 	rdlong	local11, local01
059a0     0D 1E 06 F1 | 	add	local11, #13
059a4     0F 15 C2 FA | 	rdbyte	local06, local11
059a8     0B 17 E2 F8 | 	getbyte	local07, local07, #0
059ac     BF 16 06 F5 | 	and	local07, #191
059b0     0B 13 02 F6 | 	mov	local05, local07
059b4     0C 0A 86 F1 | 	sub	local01, #12
059b8     05 1F 02 FB | 	rdlong	local11, local01
059bc     1C 0A 06 F1 | 	add	local01, #28
059c0     05 1F 62 FC | 	wrlong	local11, local01
059c4     2C 0A 86 F1 | 	sub	local01, #44
059c8                 | LR__0903
059c8     0B 19 E2 F8 | 	getbyte	local08, local07, #0
059cc     09 1D E2 F8 | 	getbyte	local10, local05, #0
059d0     0E 19 0A F2 | 	cmp	local08, local10 wz
059d4     5C 00 90 5D |  if_ne	jmp	#LR__0904
059d8     0A 1D E2 F8 | 	getbyte	local10, local06, #0
059dc     1C 0A 06 F1 | 	add	local01, #28
059e0     05 1B 02 FB | 	rdlong	local09, local01
059e4     1C 0A 86 F1 | 	sub	local01, #28
059e8     0D 1A 06 F1 | 	add	local09, #13
059ec     0D 19 C2 FA | 	rdbyte	local08, local09
059f0     0C 1B E2 F8 | 	getbyte	local09, local08, #0
059f4     0D 1D 0A F2 | 	cmp	local10, local09 wz
059f8     38 00 90 5D |  if_ne	jmp	#LR__0904
059fc     0C 10 06 F1 | 	add	local04, #12
05a00     08 01 02 FB | 	rdlong	arg01, local04
05a04     0C 10 86 F1 | 	sub	local04, #12
05a08     1C 0A 06 F1 | 	add	local01, #28
05a0c     05 21 02 FB | 	rdlong	local12, local01
05a10     1C 0A 86 F1 | 	sub	local01, #28
05a14     10 03 02 F6 | 	mov	arg02, local12
05a18     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
05a1c     00 EA 4D F2 | 	cmps	result1, #0 wz
05a20     09 21 02 56 |  if_ne	mov	local12, local05
05a24     10 21 E2 58 |  if_ne	getbyte	local12, local12, #0
05a28     01 20 86 51 |  if_ne	sub	local12, #1
05a2c     10 1F 02 56 |  if_ne	mov	local11, local12
05a30     04 00 90 5D |  if_ne	jmp	#LR__0905
05a34                 | LR__0904
05a34     FF 1E 06 F6 | 	mov	local11, #255
05a38                 | LR__0905
05a38     0F 13 02 F6 | 	mov	local05, local11
05a3c     40 00 90 FD | 	jmp	#LR__0908
05a40                 | LR__0906
05a40     09 1F 02 F6 | 	mov	local11, local05
05a44     07 1E 4E F7 | 	zerox	local11, #7 wz
05a48     20 00 90 5D |  if_ne	jmp	#LR__0907
05a4c     0A 15 E2 F8 | 	getbyte	local06, local06, #0
05a50     1C 0A 06 F1 | 	add	local01, #28
05a54     05 01 02 FB | 	rdlong	arg01, local01
05a58     1C 0A 86 F1 | 	sub	local01, #28
05a5c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
05a60     F5 EA E1 F8 | 	getbyte	result1, result1, #0
05a64     F5 14 0A F2 | 	cmp	local06, result1 wz
05a68     28 00 90 AD |  if_e	jmp	#LR__0910
05a6c                 | LR__0907
05a6c     2C 0A 06 F1 | 	add	local01, #44
05a70     FF FF FF FF 
05a74     05 FF 6B FC | 	wrlong	##-1, local01
05a78     2C 0A 86 F1 | 	sub	local01, #44
05a7c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
05a7c                 | ' 					}
05a7c                 | ' 					break;
05a7c     14 00 90 FD | 	jmp	#LR__0910
05a80                 | LR__0908
05a80                 | LR__0909
05a80     05 01 02 F6 | 	mov	arg01, local01
05a84     00 02 06 F6 | 	mov	arg02, #0
05a88     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
05a8c     F5 0E 0A F6 | 	mov	local03, result1 wz
05a90     44 FE 9F AD |  if_e	jmp	#LR__0900
05a94                 | LR__0910
05a94     00 0E 0E F2 | 	cmp	local03, #0 wz
05a98     18 0A 06 51 |  if_ne	add	local01, #24
05a9c     05 01 68 5C |  if_ne	wrlong	#0, local01
05aa0                 | ' 	return res;
05aa0     07 EB 01 F6 | 	mov	result1, local03
05aa4     A7 F0 03 F6 | 	mov	ptra, fp
05aa8     B2 00 A0 FD | 	call	#popregs_
05aac                 | _fatfs_cc_dir_read_ret
05aac     2D 00 64 FD | 	ret
05ab0                 | 
05ab0                 | _fatfs_cc_dir_find
05ab0     0B 4A 05 F6 | 	mov	COUNT_, #11
05ab4     A8 00 A0 FD | 	call	#pushregs_
05ab8     00 0B 02 F6 | 	mov	local01, arg01
05abc     05 0D 02 FB | 	rdlong	local02, local01
05ac0     05 01 02 F6 | 	mov	arg01, local01
05ac4     00 02 06 F6 | 	mov	arg02, #0
05ac8     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
05acc     00 EA 0D F2 | 	cmp	result1, #0 wz
05ad0     18 02 90 5D |  if_ne	jmp	#LR__0932
05ad4     FF 0E 06 F6 | 	mov	local03, #255
05ad8     FF 10 06 F6 | 	mov	local04, #255
05adc     2C 0A 06 F1 | 	add	local01, #44
05ae0     FF FF FF FF 
05ae4     05 FF 6B FC | 	wrlong	##-1, local01
05ae8     2C 0A 86 F1 | 	sub	local01, #44
05aec                 | ' #line 2404 "ff.c"
05aec                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
05aec                 | ' 
05aec                 | ' 	do {
05aec                 | LR__0920
05aec     18 0A 06 F1 | 	add	local01, #24
05af0     05 03 02 FB | 	rdlong	arg02, local01
05af4     18 0A 86 F1 | 	sub	local01, #24
05af8     06 01 02 F6 | 	mov	arg01, local02
05afc     A8 EB BF FD | 	call	#_fatfs_cc_move_window
05b00     F5 12 0A F6 | 	mov	local05, result1 wz
05b04     E0 01 90 5D |  if_ne	jmp	#LR__0931
05b08     1C 0A 06 F1 | 	add	local01, #28
05b0c     05 05 02 FB | 	rdlong	arg03, local01
05b10     1C 0A 86 F1 | 	sub	local01, #28
05b14     02 15 C2 FA | 	rdbyte	local06, arg03
05b18     0A 05 02 F6 | 	mov	arg03, local06
05b1c     07 04 4E F7 | 	zerox	arg03, #7 wz
05b20     04 12 06 A6 |  if_e	mov	local05, #4
05b24     C0 01 90 AD |  if_e	jmp	#LR__0931
05b28     1C 0A 06 F1 | 	add	local01, #28
05b2c     05 17 02 FB | 	rdlong	local07, local01
05b30     0B 05 02 F6 | 	mov	arg03, local07
05b34     0B 04 06 F1 | 	add	arg03, #11
05b38     02 19 C2 FA | 	rdbyte	local08, arg03
05b3c     3F 18 06 F5 | 	and	local08, #63
05b40     16 0A 86 F1 | 	sub	local01, #22
05b44     05 19 42 FC | 	wrbyte	local08, local01
05b48     06 0A 86 F1 | 	sub	local01, #6
05b4c     0A 05 E2 F8 | 	getbyte	arg03, local06, #0
05b50     E5 04 0E F2 | 	cmp	arg03, #229 wz
05b54     18 00 90 AD |  if_e	jmp	#LR__0921
05b58     0C 05 E2 F8 | 	getbyte	arg03, local08, #0
05b5c     08 04 CE F7 | 	test	arg03, #8 wz
05b60     0C 17 02 56 |  if_ne	mov	local07, local08
05b64     0B 17 E2 58 |  if_ne	getbyte	local07, local07, #0
05b68     0F 16 0E 52 |  if_ne	cmp	local07, #15 wz
05b6c     18 00 90 AD |  if_e	jmp	#LR__0922
05b70                 | LR__0921
05b70     FF 10 06 F6 | 	mov	local04, #255
05b74     2C 0A 06 F1 | 	add	local01, #44
05b78     FF FF FF FF 
05b7c     05 FF 6B FC | 	wrlong	##-1, local01
05b80     2C 0A 86 F1 | 	sub	local01, #44
05b84     4C 01 90 FD | 	jmp	#LR__0930
05b88                 | LR__0922
05b88     0C 19 E2 F8 | 	getbyte	local08, local08, #0
05b8c     0F 18 0E F2 | 	cmp	local08, #15 wz
05b90     C8 00 90 5D |  if_ne	jmp	#LR__0926
05b94     2B 0A 06 F1 | 	add	local01, #43
05b98     05 19 C2 FA | 	rdbyte	local08, local01
05b9c     2B 0A 86 F1 | 	sub	local01, #43
05ba0     40 18 CE F7 | 	test	local08, #64 wz
05ba4     2C 01 90 5D |  if_ne	jmp	#LR__0929
05ba8     0A 1B E2 F8 | 	getbyte	local09, local06, #0
05bac     40 1A CE F7 | 	test	local09, #64 wz
05bb0     30 00 90 AD |  if_e	jmp	#LR__0923
05bb4     1C 0A 06 F1 | 	add	local01, #28
05bb8     05 1B 02 FB | 	rdlong	local09, local01
05bbc     0D 1A 06 F1 | 	add	local09, #13
05bc0     0D 0F C2 FA | 	rdbyte	local03, local09
05bc4     0A 15 E2 F8 | 	getbyte	local06, local06, #0
05bc8     BF 14 06 F5 | 	and	local06, #191
05bcc     0A 11 02 F6 | 	mov	local04, local06
05bd0     0C 0A 86 F1 | 	sub	local01, #12
05bd4     05 1B 02 FB | 	rdlong	local09, local01
05bd8     1C 0A 06 F1 | 	add	local01, #28
05bdc     05 1B 62 FC | 	wrlong	local09, local01
05be0     2C 0A 86 F1 | 	sub	local01, #44
05be4                 | LR__0923
05be4     0A 1D E2 F8 | 	getbyte	local10, local06, #0
05be8     08 17 E2 F8 | 	getbyte	local07, local04, #0
05bec     0B 1D 0A F2 | 	cmp	local10, local07 wz
05bf0     5C 00 90 5D |  if_ne	jmp	#LR__0924
05bf4     07 19 E2 F8 | 	getbyte	local08, local03, #0
05bf8     1C 0A 06 F1 | 	add	local01, #28
05bfc     05 17 02 FB | 	rdlong	local07, local01
05c00     1C 0A 86 F1 | 	sub	local01, #28
05c04     0D 16 06 F1 | 	add	local07, #13
05c08     0B 15 C2 FA | 	rdbyte	local06, local07
05c0c     0A 17 E2 F8 | 	getbyte	local07, local06, #0
05c10     0B 19 0A F2 | 	cmp	local08, local07 wz
05c14     38 00 90 5D |  if_ne	jmp	#LR__0924
05c18     0C 0C 06 F1 | 	add	local02, #12
05c1c     06 01 02 FB | 	rdlong	arg01, local02
05c20     0C 0C 86 F1 | 	sub	local02, #12
05c24     1C 0A 06 F1 | 	add	local01, #28
05c28     05 1F 02 FB | 	rdlong	local11, local01
05c2c     1C 0A 86 F1 | 	sub	local01, #28
05c30     0F 03 02 F6 | 	mov	arg02, local11
05c34     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
05c38     00 EA 4D F2 | 	cmps	result1, #0 wz
05c3c     08 1F 02 56 |  if_ne	mov	local11, local04
05c40     0F 1F E2 58 |  if_ne	getbyte	local11, local11, #0
05c44     01 1E 86 51 |  if_ne	sub	local11, #1
05c48     0F 1B 02 56 |  if_ne	mov	local09, local11
05c4c     04 00 90 5D |  if_ne	jmp	#LR__0925
05c50                 | LR__0924
05c50     FF 1A 06 F6 | 	mov	local09, #255
05c54                 | LR__0925
05c54     0D 11 02 F6 | 	mov	local04, local09
05c58     78 00 90 FD | 	jmp	#LR__0929
05c5c                 | LR__0926
05c5c     08 1B 02 F6 | 	mov	local09, local04
05c60     07 1A 4E F7 | 	zerox	local09, #7 wz
05c64     20 00 90 5D |  if_ne	jmp	#LR__0927
05c68     07 1D E2 F8 | 	getbyte	local10, local03, #0
05c6c     1C 0A 06 F1 | 	add	local01, #28
05c70     05 01 02 FB | 	rdlong	arg01, local01
05c74     1C 0A 86 F1 | 	sub	local01, #28
05c78     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
05c7c     F5 EA E1 F8 | 	getbyte	result1, result1, #0
05c80     F5 1C 0A F2 | 	cmp	local10, result1 wz
05c84     60 00 90 AD |  if_e	jmp	#LR__0931
05c88                 | LR__0927
05c88     2B 0A 06 F1 | 	add	local01, #43
05c8c     05 1B C2 FA | 	rdbyte	local09, local01
05c90     2B 0A 86 F1 | 	sub	local01, #43
05c94     01 1A CE F7 | 	test	local09, #1 wz
05c98     24 00 90 5D |  if_ne	jmp	#LR__0928
05c9c     1C 0A 06 F1 | 	add	local01, #28
05ca0     05 01 02 FB | 	rdlong	arg01, local01
05ca4     04 0A 06 F1 | 	add	local01, #4
05ca8     05 03 02 F6 | 	mov	arg02, local01
05cac     20 0A 86 F1 | 	sub	local01, #32
05cb0     0B 04 06 F6 | 	mov	arg03, #11
05cb4     88 DA BF FD | 	call	#_fatfs_cc_memcmp
05cb8     00 EA 0D F2 | 	cmp	result1, #0 wz
05cbc     28 00 90 AD |  if_e	jmp	#LR__0931
05cc0                 | LR__0928
05cc0     FF 10 06 F6 | 	mov	local04, #255
05cc4     2C 0A 06 F1 | 	add	local01, #44
05cc8     FF FF FF FF 
05ccc     05 FF 6B FC | 	wrlong	##-1, local01
05cd0     2C 0A 86 F1 | 	sub	local01, #44
05cd4                 | LR__0929
05cd4                 | LR__0930
05cd4     05 01 02 F6 | 	mov	arg01, local01
05cd8     00 02 06 F6 | 	mov	arg02, #0
05cdc     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
05ce0     F5 12 0A F6 | 	mov	local05, result1 wz
05ce4     04 FE 9F AD |  if_e	jmp	#LR__0920
05ce8                 | LR__0931
05ce8                 | ' 
05ce8                 | ' 	return res;
05ce8     09 EB 01 F6 | 	mov	result1, local05
05cec                 | LR__0932
05cec     A7 F0 03 F6 | 	mov	ptra, fp
05cf0     B2 00 A0 FD | 	call	#popregs_
05cf4                 | _fatfs_cc_dir_find_ret
05cf4     2D 00 64 FD | 	ret
05cf8                 | 
05cf8                 | _fatfs_cc_dir_register
05cf8     0A 4A 05 F6 | 	mov	COUNT_, #10
05cfc     A8 00 A0 FD | 	call	#pushregs_
05d00     2C F0 07 F1 | 	add	ptra, #44
05d04     04 4E 05 F1 | 	add	fp, #4
05d08     A7 00 62 FC | 	wrlong	arg01, fp
05d0c     00 0B 02 FB | 	rdlong	local01, arg01
05d10     08 4E 05 F1 | 	add	fp, #8
05d14     A7 0A 62 FC | 	wrlong	local01, fp
05d18     08 4E 85 F1 | 	sub	fp, #8
05d1c     A7 0C 02 FB | 	rdlong	local02, fp
05d20     04 4E 85 F1 | 	sub	fp, #4
05d24     2B 0C 06 F1 | 	add	local02, #43
05d28     06 0D C2 FA | 	rdbyte	local02, local02
05d2c     A0 0C CE F7 | 	test	local02, #160 wz
05d30     06 EA 05 56 |  if_ne	mov	result1, #6
05d34     F8 03 90 5D |  if_ne	jmp	#LR__0955
05d38                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
05d38     14 4E 05 F1 | 	add	fp, #20
05d3c     A7 00 68 FC | 	wrlong	#0, fp
05d40     14 4E 85 F1 | 	sub	fp, #20
05d44     97 28 48 FB | 	callpa	#(@LR__0941-@LR__0940)>>2,fcache_load_ptr_
05d48                 | LR__0940
05d48     0C 4E 05 F1 | 	add	fp, #12
05d4c     A7 0C 02 FB | 	rdlong	local02, fp
05d50     0C 0C 06 F1 | 	add	local02, #12
05d54     06 0F 02 FB | 	rdlong	local03, local02
05d58     08 4E 05 F1 | 	add	fp, #8
05d5c     A7 10 02 FB | 	rdlong	local04, fp
05d60     14 4E 85 F1 | 	sub	fp, #20
05d64     01 10 66 F0 | 	shl	local04, #1
05d68     07 11 02 F1 | 	add	local04, local03
05d6c     08 0D EA FA | 	rdword	local02, local04 wz
05d70     24 00 90 AD |  if_e	jmp	#LR__0942
05d74     14 4E 05 F1 | 	add	fp, #20
05d78     A7 12 02 FB | 	rdlong	local05, fp
05d7c     09 15 02 F6 | 	mov	local06, local05
05d80     09 17 02 F6 | 	mov	local07, local05
05d84     0B 19 02 F6 | 	mov	local08, local07
05d88     01 18 06 F1 | 	add	local08, #1
05d8c     A7 18 62 FC | 	wrlong	local08, fp
05d90     14 4E 85 F1 | 	sub	fp, #20
05d94     B0 FF 9F FD | 	jmp	#LR__0940
05d98                 | LR__0941
05d98                 | LR__0942
05d98     1C 4E 05 F1 | 	add	fp, #28
05d9c     A7 00 02 F6 | 	mov	arg01, fp
05da0     18 4E 85 F1 | 	sub	fp, #24
05da4     A7 02 02 FB | 	rdlong	arg02, fp
05da8     04 4E 85 F1 | 	sub	fp, #4
05dac     20 02 06 F1 | 	add	arg02, #32
05db0     0C 04 06 F6 | 	mov	arg03, #12
05db4     24 AF BF FD | 	call	#__system____builtin_memmove
05db8     27 4E 05 F1 | 	add	fp, #39
05dbc     A7 1A C2 FA | 	rdbyte	local09, fp
05dc0     27 4E 85 F1 | 	sub	fp, #39
05dc4     01 1A CE F7 | 	test	local09, #1 wz
05dc8     F4 00 90 AD |  if_e	jmp	#LR__0945
05dcc     04 4E 05 F1 | 	add	fp, #4
05dd0     A7 1C 02 FB | 	rdlong	local10, fp
05dd4     2B 1C 06 F1 | 	add	local10, #43
05dd8     0E 81 48 FC | 	wrbyte	#64, local10
05ddc                 | ' 		dp->fn[ 11 ] =  0x40 ;
05ddc                 | ' 		for (n = 1; n < 100; n++) {
05ddc     0C 4E 05 F1 | 	add	fp, #12
05de0     A7 02 68 FC | 	wrlong	#1, fp
05de4     10 4E 85 F1 | 	sub	fp, #16
05de8                 | LR__0943
05de8     10 4E 05 F1 | 	add	fp, #16
05dec     A7 0C 02 FB | 	rdlong	local02, fp
05df0     10 4E 85 F1 | 	sub	fp, #16
05df4     64 0C 16 F2 | 	cmp	local02, #100 wc
05df8     70 00 90 3D |  if_ae	jmp	#LR__0944
05dfc     04 4E 05 F1 | 	add	fp, #4
05e00     A7 00 02 FB | 	rdlong	arg01, fp
05e04     20 00 06 F1 | 	add	arg01, #32
05e08     18 4E 05 F1 | 	add	fp, #24
05e0c     A7 02 02 F6 | 	mov	arg02, fp
05e10     10 4E 85 F1 | 	sub	fp, #16
05e14     A7 1C 02 FB | 	rdlong	local10, fp
05e18     0C 1C 06 F1 | 	add	local10, #12
05e1c     0E 05 02 FB | 	rdlong	arg03, local10
05e20     04 4E 05 F1 | 	add	fp, #4
05e24     A7 06 02 FB | 	rdlong	arg04, fp
05e28     10 4E 85 F1 | 	sub	fp, #16
05e2c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
05e30     04 4E 05 F1 | 	add	fp, #4
05e34     A7 00 02 FB | 	rdlong	arg01, fp
05e38     04 4E 85 F1 | 	sub	fp, #4
05e3c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
05e40     08 4E 05 F1 | 	add	fp, #8
05e44     A7 EA 61 FC | 	wrlong	result1, fp
05e48     00 EA 4D F2 | 	cmps	result1, #0 wz
05e4c     08 4E 85 F1 | 	sub	fp, #8
05e50     18 00 90 5D |  if_ne	jmp	#LR__0944
05e54     10 4E 05 F1 | 	add	fp, #16
05e58     A7 1C 02 FB | 	rdlong	local10, fp
05e5c     01 1C 06 F1 | 	add	local10, #1
05e60     A7 1C 62 FC | 	wrlong	local10, fp
05e64     10 4E 85 F1 | 	sub	fp, #16
05e68     7C FF 9F FD | 	jmp	#LR__0943
05e6c                 | LR__0944
05e6c     10 4E 05 F1 | 	add	fp, #16
05e70     A7 1C 02 FB | 	rdlong	local10, fp
05e74     10 4E 85 F1 | 	sub	fp, #16
05e78     64 1C 0E F2 | 	cmp	local10, #100 wz
05e7c     07 EA 05 A6 |  if_e	mov	result1, #7
05e80     AC 02 90 AD |  if_e	jmp	#LR__0955
05e84     08 4E 05 F1 | 	add	fp, #8
05e88     A7 1C 02 FB | 	rdlong	local10, fp
05e8c     08 4E 85 F1 | 	sub	fp, #8
05e90     04 1C 0E F2 | 	cmp	local10, #4 wz
05e94     08 4E 05 51 |  if_ne	add	fp, #8
05e98     A7 EA 01 5B |  if_ne	rdlong	result1, fp
05e9c     08 4E 85 51 |  if_ne	sub	fp, #8
05ea0     8C 02 90 5D |  if_ne	jmp	#LR__0955
05ea4     04 4E 05 F1 | 	add	fp, #4
05ea8     A7 1C 02 FB | 	rdlong	local10, fp
05eac     23 4E 05 F1 | 	add	fp, #35
05eb0     A7 0A C2 FA | 	rdbyte	local01, fp
05eb4     27 4E 85 F1 | 	sub	fp, #39
05eb8     2B 1C 06 F1 | 	add	local10, #43
05ebc     0E 0B 42 FC | 	wrbyte	local01, local10
05ec0                 | LR__0945
05ec0     27 4E 05 F1 | 	add	fp, #39
05ec4     A7 0C C2 FA | 	rdbyte	local02, fp
05ec8     27 4E 85 F1 | 	sub	fp, #39
05ecc     02 0C CE F7 | 	test	local02, #2 wz
05ed0     20 00 90 AD |  if_e	jmp	#LR__0946
05ed4     14 4E 05 F1 | 	add	fp, #20
05ed8     A7 1C 02 FB | 	rdlong	local10, fp
05edc     0C 1C 06 F1 | 	add	local10, #12
05ee0     0D 1C 16 FD | 	qdiv	local10, #13
05ee4     14 4E 85 F1 | 	sub	fp, #20
05ee8     18 1C 62 FD | 	getqx	local10
05eec     01 1C 06 F1 | 	add	local10, #1
05ef0     04 00 90 FD | 	jmp	#LR__0947
05ef4                 | LR__0946
05ef4     01 1C 06 F6 | 	mov	local10, #1
05ef8                 | LR__0947
05ef8     18 4E 05 F1 | 	add	fp, #24
05efc     A7 1C 62 FC | 	wrlong	local10, fp
05f00     14 4E 85 F1 | 	sub	fp, #20
05f04     A7 00 02 FB | 	rdlong	arg01, fp
05f08     0E 03 02 F6 | 	mov	arg02, local10
05f0c     04 4E 85 F1 | 	sub	fp, #4
05f10     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
05f14     08 4E 05 F1 | 	add	fp, #8
05f18     A7 EA 61 FC | 	wrlong	result1, fp
05f1c     08 4E 85 F1 | 	sub	fp, #8
05f20     00 EA 0D F2 | 	cmp	result1, #0 wz
05f24     38 01 90 5D |  if_ne	jmp	#LR__0952
05f28     18 4E 05 F1 | 	add	fp, #24
05f2c     A7 1C 02 FB | 	rdlong	local10, fp
05f30     01 1C 8E F1 | 	sub	local10, #1 wz
05f34     A7 1C 62 FC | 	wrlong	local10, fp
05f38     18 4E 85 F1 | 	sub	fp, #24
05f3c     20 01 90 AD |  if_e	jmp	#LR__0952
05f40     04 4E 05 F1 | 	add	fp, #4
05f44     A7 1C 02 FB | 	rdlong	local10, fp
05f48     0E 01 02 F6 | 	mov	arg01, local10
05f4c     14 4E 05 F1 | 	add	fp, #20
05f50     A7 06 02 FB | 	rdlong	arg04, fp
05f54     18 4E 85 F1 | 	sub	fp, #24
05f58     05 06 66 F0 | 	shl	arg04, #5
05f5c     10 1C 06 F1 | 	add	local10, #16
05f60     0E 03 02 FB | 	rdlong	arg02, local10
05f64     03 03 82 F1 | 	sub	arg02, arg04
05f68     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
05f6c     08 4E 05 F1 | 	add	fp, #8
05f70     A7 EA 61 FC | 	wrlong	result1, fp
05f74     08 4E 85 F1 | 	sub	fp, #8
05f78     00 EA 0D F2 | 	cmp	result1, #0 wz
05f7c     E0 00 90 5D |  if_ne	jmp	#LR__0951
05f80     04 4E 05 F1 | 	add	fp, #4
05f84     A7 00 02 FB | 	rdlong	arg01, fp
05f88     04 4E 85 F1 | 	sub	fp, #4
05f8c     20 00 06 F1 | 	add	arg01, #32
05f90     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
05f94     F5 1C 02 F6 | 	mov	local10, result1
05f98     28 4E 05 F1 | 	add	fp, #40
05f9c     A7 1C 42 FC | 	wrbyte	local10, fp
05fa0     28 4E 85 F1 | 	sub	fp, #40
05fa4                 | ' 			sum = sum_sfn(dp->fn);
05fa4                 | ' 			do {
05fa4                 | LR__0948
05fa4     0C 4E 05 F1 | 	add	fp, #12
05fa8     A7 00 02 FB | 	rdlong	arg01, fp
05fac     08 4E 85 F1 | 	sub	fp, #8
05fb0     A7 0A 02 FB | 	rdlong	local01, fp
05fb4     04 4E 85 F1 | 	sub	fp, #4
05fb8     18 0A 06 F1 | 	add	local01, #24
05fbc     05 03 02 FB | 	rdlong	arg02, local01
05fc0     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
05fc4     08 4E 05 F1 | 	add	fp, #8
05fc8     A7 EA 61 FC | 	wrlong	result1, fp
05fcc     00 EA 4D F2 | 	cmps	result1, #0 wz
05fd0     08 4E 85 F1 | 	sub	fp, #8
05fd4     88 00 90 5D |  if_ne	jmp	#LR__0950
05fd8     0C 4E 05 F1 | 	add	fp, #12
05fdc     A7 0C 02 FB | 	rdlong	local02, fp
05fe0     0C 0C 06 F1 | 	add	local02, #12
05fe4     06 01 02 FB | 	rdlong	arg01, local02
05fe8     08 4E 85 F1 | 	sub	fp, #8
05fec     A7 0A 02 FB | 	rdlong	local01, fp
05ff0     1C 0A 06 F1 | 	add	local01, #28
05ff4     05 03 02 FB | 	rdlong	arg02, local01
05ff8     14 4E 05 F1 | 	add	fp, #20
05ffc     A7 04 02 FB | 	rdlong	arg03, fp
06000     10 4E 05 F1 | 	add	fp, #16
06004     A7 06 C2 FA | 	rdbyte	arg04, fp
06008     28 4E 85 F1 | 	sub	fp, #40
0600c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
06010     0C 4E 05 F1 | 	add	fp, #12
06014     A7 1C 02 FB | 	rdlong	local10, fp
06018     03 1C 06 F1 | 	add	local10, #3
0601c     0E 03 48 FC | 	wrbyte	#1, local10
06020     08 4E 85 F1 | 	sub	fp, #8
06024     A7 00 02 FB | 	rdlong	arg01, fp
06028     04 4E 85 F1 | 	sub	fp, #4
0602c     00 02 06 F6 | 	mov	arg02, #0
06030     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
06034     08 4E 05 F1 | 	add	fp, #8
06038     A7 EA 61 FC | 	wrlong	result1, fp
0603c     00 EA 4D F2 | 	cmps	result1, #0 wz
06040     08 4E 85 F1 | 	sub	fp, #8
06044     18 00 90 5D |  if_ne	jmp	#LR__0949
06048     18 4E 05 F1 | 	add	fp, #24
0604c     A7 1C 02 FB | 	rdlong	local10, fp
06050     01 1C 8E F1 | 	sub	local10, #1 wz
06054     A7 1C 62 FC | 	wrlong	local10, fp
06058     18 4E 85 F1 | 	sub	fp, #24
0605c     44 FF 9F 5D |  if_ne	jmp	#LR__0948
06060                 | LR__0949
06060                 | LR__0950
06060                 | LR__0951
06060                 | LR__0952
06060     08 4E 05 F1 | 	add	fp, #8
06064     A7 1C 0A FB | 	rdlong	local10, fp wz
06068     08 4E 85 F1 | 	sub	fp, #8
0606c     B4 00 90 5D |  if_ne	jmp	#LR__0954
06070     0C 4E 05 F1 | 	add	fp, #12
06074     A7 00 02 FB | 	rdlong	arg01, fp
06078     08 4E 85 F1 | 	sub	fp, #8
0607c     A7 0A 02 FB | 	rdlong	local01, fp
06080     04 4E 85 F1 | 	sub	fp, #4
06084     18 0A 06 F1 | 	add	local01, #24
06088     05 03 02 FB | 	rdlong	arg02, local01
0608c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
06090     08 4E 05 F1 | 	add	fp, #8
06094     A7 EA 61 FC | 	wrlong	result1, fp
06098     08 4E 85 F1 | 	sub	fp, #8
0609c     00 EA 0D F2 | 	cmp	result1, #0 wz
060a0     80 00 90 5D |  if_ne	jmp	#LR__0953
060a4     04 4E 05 F1 | 	add	fp, #4
060a8     A7 0C 02 FB | 	rdlong	local02, fp
060ac     04 4E 85 F1 | 	sub	fp, #4
060b0     1C 0C 06 F1 | 	add	local02, #28
060b4     06 01 02 FB | 	rdlong	arg01, local02
060b8     00 02 06 F6 | 	mov	arg02, #0
060bc     20 04 06 F6 | 	mov	arg03, #32
060c0     98 00 A0 FD | 	call	#\builtin_bytefill_
060c4     04 4E 05 F1 | 	add	fp, #4
060c8     A7 02 02 FB | 	rdlong	arg02, fp
060cc     01 0B 02 F6 | 	mov	local01, arg02
060d0     1C 0A 06 F1 | 	add	local01, #28
060d4     05 01 02 FB | 	rdlong	arg01, local01
060d8     04 4E 85 F1 | 	sub	fp, #4
060dc     20 02 06 F1 | 	add	arg02, #32
060e0     0B 04 06 F6 | 	mov	arg03, #11
060e4     F4 AB BF FD | 	call	#__system____builtin_memmove
060e8     04 4E 05 F1 | 	add	fp, #4
060ec     A7 1A 02 FB | 	rdlong	local09, fp
060f0     0D 1D 02 F6 | 	mov	local10, local09
060f4     1C 1C 06 F1 | 	add	local10, #28
060f8     0E 0B 02 FB | 	rdlong	local01, local10
060fc     2B 1A 06 F1 | 	add	local09, #43
06100     0D 1D C2 FA | 	rdbyte	local10, local09
06104     18 1C 06 F5 | 	and	local10, #24
06108     0C 0A 06 F1 | 	add	local01, #12
0610c     05 1D 42 FC | 	wrbyte	local10, local01
06110     08 4E 05 F1 | 	add	fp, #8
06114     A7 1C 02 FB | 	rdlong	local10, fp
06118     0C 4E 85 F1 | 	sub	fp, #12
0611c     03 1C 06 F1 | 	add	local10, #3
06120     0E 03 48 FC | 	wrbyte	#1, local10
06124                 | LR__0953
06124                 | LR__0954
06124                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
06124                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
06124                 | ' 
06124                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
06124                 | ' 
06124                 | ' 			fs->wflag = 1;
06124                 | ' 		}
06124                 | ' 	}
06124                 | ' 
06124                 | ' 	return res;
06124     08 4E 05 F1 | 	add	fp, #8
06128     A7 EA 01 FB | 	rdlong	result1, fp
0612c     08 4E 85 F1 | 	sub	fp, #8
06130                 | LR__0955
06130     A7 F0 03 F6 | 	mov	ptra, fp
06134     B2 00 A0 FD | 	call	#popregs_
06138                 | _fatfs_cc_dir_register_ret
06138     2D 00 64 FD | 	ret
0613c                 | 
0613c                 | _fatfs_cc_dir_remove
0613c     05 4A 05 F6 | 	mov	COUNT_, #5
06140     A8 00 A0 FD | 	call	#pushregs_
06144     00 0B 02 F6 | 	mov	local01, arg01
06148     05 0D 02 FB | 	rdlong	local02, local01
0614c     10 0A 06 F1 | 	add	local01, #16
06150     05 0F 02 FB | 	rdlong	local03, local01
06154     1C 0A 06 F1 | 	add	local01, #28
06158     05 03 02 FB | 	rdlong	arg02, local01
0615c     2C 0A 86 F1 | 	sub	local01, #44
06160     FF FF 7F FF 
06164     FF 03 0E F2 | 	cmp	arg02, ##-1 wz
06168     00 10 06 A6 |  if_e	mov	local04, #0
0616c     18 00 90 AD |  if_e	jmp	#LR__0960
06170     05 01 02 F6 | 	mov	arg01, local01
06174     2C 0A 06 F1 | 	add	local01, #44
06178     05 03 02 FB | 	rdlong	arg02, local01
0617c     2C 0A 86 F1 | 	sub	local01, #44
06180     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
06184     F5 10 02 F6 | 	mov	local04, result1
06188                 | LR__0960
06188     08 13 0A F6 | 	mov	local05, local04 wz
0618c     64 00 90 5D |  if_ne	jmp	#LR__0963
06190                 | ' 		do {
06190                 | LR__0961
06190     18 0A 06 F1 | 	add	local01, #24
06194     05 03 02 FB | 	rdlong	arg02, local01
06198     18 0A 86 F1 | 	sub	local01, #24
0619c     06 01 02 F6 | 	mov	arg01, local02
061a0     04 E5 BF FD | 	call	#_fatfs_cc_move_window
061a4     F5 12 0A F6 | 	mov	local05, result1 wz
061a8     40 00 90 5D |  if_ne	jmp	#LR__0962
061ac     1C 0A 06 F1 | 	add	local01, #28
061b0     05 11 02 FB | 	rdlong	local04, local01
061b4     08 CB 49 FC | 	wrbyte	#229, local04
061b8     03 0C 06 F1 | 	add	local02, #3
061bc     06 03 48 FC | 	wrbyte	#1, local02
061c0     03 0C 86 F1 | 	sub	local02, #3
061c4     0C 0A 86 F1 | 	sub	local01, #12
061c8     05 11 02 FB | 	rdlong	local04, local01
061cc     10 0A 86 F1 | 	sub	local01, #16
061d0     07 11 12 F2 | 	cmp	local04, local03 wc
061d4     14 00 90 3D |  if_ae	jmp	#LR__0962
061d8     05 01 02 F6 | 	mov	arg01, local01
061dc     00 02 06 F6 | 	mov	arg02, #0
061e0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
061e4     F5 12 0A F6 | 	mov	local05, result1 wz
061e8     A4 FF 9F AD |  if_e	jmp	#LR__0961
061ec                 | LR__0962
061ec     04 12 0E F2 | 	cmp	local05, #4 wz
061f0     02 12 06 A6 |  if_e	mov	local05, #2
061f4                 | LR__0963
061f4                 | ' 	}
061f4                 | ' #line 2590 "ff.c"
061f4                 | ' 	return res;
061f4     09 EB 01 F6 | 	mov	result1, local05
061f8     A7 F0 03 F6 | 	mov	ptra, fp
061fc     B2 00 A0 FD | 	call	#popregs_
06200                 | _fatfs_cc_dir_remove_ret
06200     2D 00 64 FD | 	ret
06204                 | 
06204                 | _fatfs_cc_get_fileinfo
06204     0F 4A 05 F6 | 	mov	COUNT_, #15
06208     A8 00 A0 FD | 	call	#pushregs_
0620c     00 0B 02 F6 | 	mov	local01, arg01
06210     01 0D 02 F6 | 	mov	local02, arg02
06214     05 0F 02 FB | 	rdlong	local03, local01
06218     1C 0C 06 F1 | 	add	local02, #28
0621c     06 01 48 FC | 	wrbyte	#0, local02
06220     1C 0C 86 F1 | 	sub	local02, #28
06224     18 0A 06 F1 | 	add	local01, #24
06228     05 11 0A FB | 	rdlong	local04, local01 wz
0622c     18 0A 86 F1 | 	sub	local01, #24
06230     90 03 90 AD |  if_e	jmp	#LR__0984
06234     2C 0A 06 F1 | 	add	local01, #44
06238     05 11 02 FB | 	rdlong	local04, local01
0623c     2C 0A 86 F1 | 	sub	local01, #44
06240     FF FF 7F FF 
06244     FF 11 0E F2 | 	cmp	local04, ##-1 wz
06248     D8 00 90 AD |  if_e	jmp	#LR__0973
0624c     00 12 06 F6 | 	mov	local05, #0
06250     00 14 06 F6 | 	mov	local06, #0
06254     00 16 06 F6 | 	mov	local07, #0
06258                 | ' 			si = di = 0;
06258                 | ' 			hs = 0;
06258                 | ' 			while (fs->lfnbuf[si] != 0) {
06258                 | LR__0970
06258     0C 0E 06 F1 | 	add	local03, #12
0625c     07 11 02 FB | 	rdlong	local04, local03
06260     0C 0E 86 F1 | 	sub	local03, #12
06264     0A 19 02 F6 | 	mov	local08, local06
06268     01 18 66 F0 | 	shl	local08, #1
0626c     08 19 02 F1 | 	add	local08, local04
06270     0C 11 EA FA | 	rdword	local04, local08 wz
06274     90 00 90 AD |  if_e	jmp	#LR__0972
06278     0C 0E 06 F1 | 	add	local03, #12
0627c     07 1B 02 FB | 	rdlong	local09, local03
06280     0C 0E 86 F1 | 	sub	local03, #12
06284     0A 1D 02 F6 | 	mov	local10, local06
06288     01 1C 66 F0 | 	shl	local10, #1
0628c     0D 1D 02 F1 | 	add	local10, local09
06290     0E 1F E2 FA | 	rdword	local11, local10
06294     0B 11 02 F6 | 	mov	local04, local07
06298     0F 10 4E F7 | 	zerox	local04, #15 wz
0629c     01 14 06 F1 | 	add	local06, #1
062a0     24 00 90 5D |  if_ne	jmp	#LR__0971
062a4     0F 21 32 F9 | 	getword	local12, local11, #0
062a8     6C 00 00 FF 
062ac     00 20 16 F2 | 	cmp	local12, ##55296 wc
062b0     14 00 90 CD |  if_b	jmp	#LR__0971
062b4     0F 23 32 F9 | 	getword	local13, local11, #0
062b8     70 00 00 FF 
062bc     00 22 16 F2 | 	cmp	local13, ##57344 wc
062c0     0F 17 02 C6 |  if_b	mov	local07, local11
062c4                 | ' 					hs = wc; continue;
062c4     90 FF 9F CD |  if_b	jmp	#LR__0970
062c8                 | LR__0971
062c8     0B 01 32 F9 | 	getword	arg01, local07, #0
062cc     10 00 66 F0 | 	shl	arg01, #16
062d0     0F 1F 32 F9 | 	getword	local11, local11, #0
062d4     0F 01 42 F5 | 	or	arg01, local11
062d8     09 03 02 F6 | 	mov	arg02, local05
062dc     1C 0C 06 F1 | 	add	local02, #28
062e0     06 03 02 F1 | 	add	arg02, local02
062e4     FF 04 06 F6 | 	mov	arg03, #255
062e8     09 05 82 F1 | 	sub	arg03, local05
062ec     1C 0C 86 F1 | 	sub	local02, #28
062f0     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
062f4     F5 24 0A F6 | 	mov	local14, result1 wz
062f8     00 12 06 A6 |  if_e	mov	local05, #0
062fc     12 13 02 51 |  if_ne	add	local05, local14
06300     00 16 06 56 |  if_ne	mov	local07, #0
06304     50 FF 9F 5D |  if_ne	jmp	#LR__0970
06308                 | LR__0972
06308     0B 11 02 F6 | 	mov	local04, local07
0630c     0F 10 4E F7 | 	zerox	local04, #15 wz
06310     00 12 06 56 |  if_ne	mov	local05, #0
06314     1C 0C 06 F1 | 	add	local02, #28
06318     06 13 02 F1 | 	add	local05, local02
0631c     09 01 48 FC | 	wrbyte	#0, local05
06320     1C 0C 86 F1 | 	sub	local02, #28
06324                 | LR__0973
06324     00 12 06 F6 | 	mov	local05, #0
06328     00 14 06 F6 | 	mov	local06, #0
0632c                 | ' 			fno->fname[di] = 0;
0632c                 | ' 		}
0632c                 | ' 	}
0632c                 | ' 
0632c                 | ' 	si = di = 0;
0632c                 | ' 	while (si < 11) {
0632c                 | LR__0974
0632c     0B 14 16 F2 | 	cmp	local06, #11 wc
06330     20 01 90 3D |  if_ae	jmp	#LR__0977
06334     1C 0A 06 F1 | 	add	local01, #28
06338     05 1B 02 FB | 	rdlong	local09, local01
0633c     1C 0A 86 F1 | 	sub	local01, #28
06340     0A 1D 02 F6 | 	mov	local10, local06
06344     0D 1D 02 F1 | 	add	local10, local09
06348     0E 1F C2 FA | 	rdbyte	local11, local10
0634c     0F 11 32 F9 | 	getword	local04, local11, #0
06350     20 10 0E F2 | 	cmp	local04, #32 wz
06354     01 14 06 F1 | 	add	local06, #1
06358     D0 FF 9F AD |  if_e	jmp	#LR__0974
0635c     0F 11 32 F9 | 	getword	local04, local11, #0
06360     05 10 0E F2 | 	cmp	local04, #5 wz
06364     E5 1E 06 A6 |  if_e	mov	local11, #229
06368     09 14 0E F2 | 	cmp	local06, #9 wz
0636c     20 00 90 5D |  if_ne	jmp	#LR__0975
06370     0C 12 16 F2 | 	cmp	local05, #12 wc
06374     18 00 90 3D |  if_ae	jmp	#LR__0975
06378     09 23 02 F6 | 	mov	local13, local05
0637c     0C 0C 06 F1 | 	add	local02, #12
06380     06 23 02 F1 | 	add	local13, local02
06384     11 5D 48 FC | 	wrbyte	#46, local13
06388     01 12 06 F1 | 	add	local05, #1
0638c     0C 0C 86 F1 | 	sub	local02, #12
06390                 | LR__0975
06390     0F 01 32 F9 | 	getword	arg01, local11, #0
06394     07 00 4E F7 | 	zerox	arg01, #7 wz
06398     00 EA 05 56 |  if_ne	mov	result1, #0
0639c                 | ' 
0639c                 | ' 	return 0;
0639c     00 EA 05 A6 |  if_e	mov	result1, #0
063a0     00 EA 0D F2 | 	cmp	result1, #0 wz
063a4     08 14 0E 52 |  if_ne	cmp	local06, #8 wz
063a8     0B 14 0E 52 |  if_ne	cmp	local06, #11 wz
063ac     50 00 90 AD |  if_e	jmp	#LR__0976
063b0     1C 0A 06 F1 | 	add	local01, #28
063b4     05 1D 02 FB | 	rdlong	local10, local01
063b8     1C 0A 86 F1 | 	sub	local01, #28
063bc     0A 19 02 F6 | 	mov	local08, local06
063c0     0E 19 02 F1 | 	add	local08, local10
063c4     0C 01 CA FA | 	rdbyte	arg01, local08 wz
063c8     00 EA 05 56 |  if_ne	mov	result1, #0
063cc                 | ' 
063cc                 | ' 	return 0;
063cc     00 EA 05 A6 |  if_e	mov	result1, #0
063d0     00 EA 0D F2 | 	cmp	result1, #0 wz
063d4     28 00 90 AD |  if_e	jmp	#LR__0976
063d8     0F 1F 32 F9 | 	getword	local11, local11, #0
063dc     08 1E 66 F0 | 	shl	local11, #8
063e0     1C 0A 06 F1 | 	add	local01, #28
063e4     05 25 02 FB | 	rdlong	local14, local01
063e8     1C 0A 86 F1 | 	sub	local01, #28
063ec     0A 1B 02 F6 | 	mov	local09, local06
063f0     12 1B 02 F1 | 	add	local09, local14
063f4     0D 21 C2 FA | 	rdbyte	local12, local09
063f8     10 1F 42 F5 | 	or	local11, local12
063fc     01 14 06 F1 | 	add	local06, #1
06400                 | LR__0976
06400     0F 01 02 F6 | 	mov	arg01, local11
06404     01 00 00 FF 
06408     52 03 06 F6 | 	mov	arg02, ##850
0640c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
06410     F5 1E 02 F6 | 	mov	local11, result1
06414     0F 11 02 F6 | 	mov	local04, local11
06418     0F 10 4E F7 | 	zerox	local04, #15 wz
0641c     00 12 06 A6 |  if_e	mov	local05, #0
06420     30 00 90 AD |  if_e	jmp	#LR__0977
06424     0F 01 32 F9 | 	getword	arg01, local11, #0
06428     09 03 02 F6 | 	mov	arg02, local05
0642c     0C 0C 06 F1 | 	add	local02, #12
06430     06 03 02 F1 | 	add	arg02, local02
06434     0C 04 06 F6 | 	mov	arg03, #12
06438     09 05 82 F1 | 	sub	arg03, local05
0643c     0C 0C 86 F1 | 	sub	local02, #12
06440     EC DF BF FD | 	call	#_fatfs_cc_put_utf
06444     F5 24 0A F6 | 	mov	local14, result1 wz
06448     00 12 06 A6 |  if_e	mov	local05, #0
0644c     12 13 02 51 |  if_ne	add	local05, local14
06450     D8 FE 9F 5D |  if_ne	jmp	#LR__0974
06454                 | LR__0977
06454     09 11 02 F6 | 	mov	local04, local05
06458     0C 0C 06 F1 | 	add	local02, #12
0645c     06 11 02 F1 | 	add	local04, local02
06460     08 01 48 FC | 	wrbyte	#0, local04
06464     10 0C 06 F1 | 	add	local02, #16
06468     06 11 CA FA | 	rdbyte	local04, local02 wz
0646c     1C 0C 86 F1 | 	sub	local02, #28
06470     F8 00 90 5D |  if_ne	jmp	#LR__0983
06474     00 12 0E F2 | 	cmp	local05, #0 wz
06478     1C 00 90 5D |  if_ne	jmp	#LR__0978
0647c     09 23 02 F6 | 	mov	local13, local05
06480     1C 0C 06 F1 | 	add	local02, #28
06484     06 23 02 F1 | 	add	local13, local02
06488     11 7F 48 FC | 	wrbyte	#63, local13
0648c     01 12 06 F1 | 	add	local05, #1
06490     1C 0C 86 F1 | 	sub	local02, #28
06494     A4 00 90 FD | 	jmp	#LR__0982
06498                 | LR__0978
06498                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
06498     00 12 06 F6 | 	mov	local05, #0
0649c     00 14 06 F6 | 	mov	local06, #0
064a0     08 26 06 F6 | 	mov	local15, #8
064a4                 | LR__0979
064a4     0A 11 02 F6 | 	mov	local04, local06
064a8     0C 0C 06 F1 | 	add	local02, #12
064ac     06 11 02 F1 | 	add	local04, local02
064b0     08 23 CA FA | 	rdbyte	local13, local04 wz
064b4     0C 0C 86 F1 | 	sub	local02, #12
064b8     80 00 90 AD |  if_e	jmp	#LR__0981
064bc     0A 19 02 F6 | 	mov	local08, local06
064c0     0C 0C 06 F1 | 	add	local02, #12
064c4     06 19 02 F1 | 	add	local08, local02
064c8     0C 1F C2 FA | 	rdbyte	local11, local08
064cc     0F 25 32 F9 | 	getword	local14, local11, #0
064d0     2E 24 0E F2 | 	cmp	local14, #46 wz
064d4     0C 0C 86 F1 | 	sub	local02, #12
064d8     10 26 06 A6 |  if_e	mov	local15, #16
064dc     0F 25 32 F9 | 	getword	local14, local11, #0
064e0     41 24 16 F2 | 	cmp	local14, #65 wc
064e4     30 00 90 CD |  if_b	jmp	#LR__0980
064e8     0F 19 32 F9 | 	getword	local08, local11, #0
064ec     5B 18 16 F2 | 	cmp	local08, #91 wc
064f0     24 00 90 3D |  if_ae	jmp	#LR__0980
064f4     1C 0A 06 F1 | 	add	local01, #28
064f8     05 1B 02 FB | 	rdlong	local09, local01
064fc     1C 0A 86 F1 | 	sub	local01, #28
06500     0C 1A 06 F1 | 	add	local09, #12
06504     0D 1D C2 FA | 	rdbyte	local10, local09
06508     13 25 E2 F8 | 	getbyte	local14, local15, #0
0650c     12 1D CA F7 | 	test	local10, local14 wz
06510     0F 1F 32 59 |  if_ne	getword	local11, local11, #0
06514     20 1E 06 51 |  if_ne	add	local11, #32
06518                 | LR__0980
06518     09 25 02 F6 | 	mov	local14, local05
0651c     1C 0C 06 F1 | 	add	local02, #28
06520     06 25 02 F1 | 	add	local14, local02
06524     0F 1F 32 F9 | 	getword	local11, local11, #0
06528     12 1F 42 FC | 	wrbyte	local11, local14
0652c     01 14 06 F1 | 	add	local06, #1
06530     01 12 06 F1 | 	add	local05, #1
06534     1C 0C 86 F1 | 	sub	local02, #28
06538     68 FF 9F FD | 	jmp	#LR__0979
0653c                 | LR__0981
0653c                 | LR__0982
0653c     1C 0C 06 F1 | 	add	local02, #28
06540     06 13 02 F1 | 	add	local05, local02
06544     09 01 48 FC | 	wrbyte	#0, local05
06548     1C 0A 06 F1 | 	add	local01, #28
0654c     05 11 02 FB | 	rdlong	local04, local01
06550     1C 0A 86 F1 | 	sub	local01, #28
06554     0C 10 06 F1 | 	add	local04, #12
06558     08 23 CA FA | 	rdbyte	local13, local04 wz
0655c     1C 0C 86 F1 | 	sub	local02, #28
06560     0C 0C 06 A1 |  if_e	add	local02, #12
06564     06 01 48 AC |  if_e	wrbyte	#0, local02
06568     0C 0C 86 A1 |  if_e	sub	local02, #12
0656c                 | LR__0983
0656c     1C 0A 06 F1 | 	add	local01, #28
06570     05 21 02 FB | 	rdlong	local12, local01
06574     0B 20 06 F1 | 	add	local12, #11
06578     10 11 C2 FA | 	rdbyte	local04, local12
0657c     3F 10 06 F5 | 	and	local04, #63
06580     08 0C 06 F1 | 	add	local02, #8
06584     06 11 42 FC | 	wrbyte	local04, local02
06588     08 0C 86 F1 | 	sub	local02, #8
0658c     05 01 02 FB | 	rdlong	arg01, local01
06590     1C 00 06 F1 | 	add	arg01, #28
06594                 | ' {
06594                 | ' 
06594                 | ' 	return *((DWORD*)ptr);
06594     00 EB 01 FB | 	rdlong	result1, arg01
06598     06 EB 61 FC | 	wrlong	result1, local02
0659c     05 01 02 FB | 	rdlong	arg01, local01
065a0     16 00 06 F1 | 	add	arg01, #22
065a4                 | ' {
065a4                 | ' 
065a4                 | ' 	return *((WORD*)ptr);
065a4     00 EB E1 FA | 	rdword	result1, arg01
065a8     06 0C 06 F1 | 	add	local02, #6
065ac     06 EB 51 FC | 	wrword	result1, local02
065b0     05 01 02 FB | 	rdlong	arg01, local01
065b4     18 00 06 F1 | 	add	arg01, #24
065b8                 | ' {
065b8                 | ' 
065b8                 | ' 	return *((WORD*)ptr);
065b8     00 EB E1 FA | 	rdword	result1, arg01
065bc     02 0C 86 F1 | 	sub	local02, #2
065c0     06 EB 51 FC | 	wrword	result1, local02
065c4                 | LR__0984
065c4     A7 F0 03 F6 | 	mov	ptra, fp
065c8     B2 00 A0 FD | 	call	#popregs_
065cc                 | _fatfs_cc_get_fileinfo_ret
065cc     2D 00 64 FD | 	ret
065d0                 | 
065d0                 | _fatfs_cc_create_name
065d0     0D 4A 05 F6 | 	mov	COUNT_, #13
065d4     A8 00 A0 FD | 	call	#pushregs_
065d8     34 F0 07 F1 | 	add	ptra, #52
065dc     04 4E 05 F1 | 	add	fp, #4
065e0     A7 00 62 FC | 	wrlong	arg01, fp
065e4     04 4E 05 F1 | 	add	fp, #4
065e8     A7 02 62 FC | 	wrlong	arg02, fp
065ec     01 EB 01 FB | 	rdlong	result1, arg02
065f0     28 4E 05 F1 | 	add	fp, #40
065f4     A7 EA 61 FC | 	wrlong	result1, fp
065f8     2C 4E 85 F1 | 	sub	fp, #44
065fc     A7 EA 01 FB | 	rdlong	result1, fp
06600     F5 0A 02 FB | 	rdlong	local01, result1
06604     0C 0A 06 F1 | 	add	local01, #12
06608     05 0D 02 FB | 	rdlong	local02, local01
0660c     14 4E 05 F1 | 	add	fp, #20
06610     A7 0C 62 FC | 	wrlong	local02, fp
06614     14 4E 05 F1 | 	add	fp, #20
06618     A7 00 68 FC | 	wrlong	#0, fp
0661c     2C 4E 85 F1 | 	sub	fp, #44
06620                 | ' 
06620                 | ' 
06620                 | ' 
06620                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
06620                 | ' 	for (;;) {
06620                 | LR__0990
06620     30 4E 05 F1 | 	add	fp, #48
06624     A7 00 02 F6 | 	mov	arg01, fp
06628     30 4E 85 F1 | 	sub	fp, #48
0662c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
06630     1C 4E 05 F1 | 	add	fp, #28
06634     A7 EA 61 FC | 	wrlong	result1, fp
06638     1C 4E 85 F1 | 	sub	fp, #28
0663c     FF FF 7F FF 
06640     FF EB 0D F2 | 	cmp	result1, ##-1 wz
06644     06 EA 05 A6 |  if_e	mov	result1, #6
06648     74 08 90 AD |  if_e	jmp	#LR__1030
0664c     1C 4E 05 F1 | 	add	fp, #28
06650     A7 0A 02 FB | 	rdlong	local01, fp
06654     1C 4E 85 F1 | 	sub	fp, #28
06658     80 00 00 FF 
0665c     00 0A 16 F2 | 	cmp	local01, ##65536 wc
06660     3C 00 90 CD |  if_b	jmp	#LR__0991
06664     18 4E 05 F1 | 	add	fp, #24
06668     A7 0E 02 FB | 	rdlong	local03, fp
0666c     14 4E 05 F1 | 	add	fp, #20
06670     A7 0A 02 FB | 	rdlong	local01, fp
06674     05 11 02 F6 | 	mov	local04, local01
06678     01 10 06 F1 | 	add	local04, #1
0667c     A7 10 62 FC | 	wrlong	local04, fp
06680     01 0A 66 F0 | 	shl	local01, #1
06684     07 0B 02 F1 | 	add	local01, local03
06688     10 4E 85 F1 | 	sub	fp, #16
0668c     A7 12 02 FB | 	rdlong	local05, fp
06690     1C 4E 85 F1 | 	sub	fp, #28
06694     09 15 02 F6 | 	mov	local06, local05
06698     10 14 46 F0 | 	shr	local06, #16
0669c     05 15 52 FC | 	wrword	local06, local01
066a0                 | LR__0991
066a0     1C 4E 05 F1 | 	add	fp, #28
066a4     A7 0A 02 FB | 	rdlong	local01, fp
066a8     08 4E 85 F1 | 	sub	fp, #8
066ac     A7 0A 52 FC | 	wrword	local01, fp
066b0     A7 0A E2 FA | 	rdword	local01, fp
066b4     14 4E 85 F1 | 	sub	fp, #20
066b8     20 0A 16 F2 | 	cmp	local01, #32 wc
066bc     B0 00 90 CD |  if_b	jmp	#LR__0993
066c0     14 4E 05 F1 | 	add	fp, #20
066c4     A7 0A E2 FA | 	rdword	local01, fp
066c8     14 4E 85 F1 | 	sub	fp, #20
066cc     2F 0A 0E F2 | 	cmp	local01, #47 wz
066d0     14 4E 05 51 |  if_ne	add	fp, #20
066d4     A7 10 E2 5A |  if_ne	rdword	local04, fp
066d8     14 4E 85 51 |  if_ne	sub	fp, #20
066dc     5C 10 0E 52 |  if_ne	cmp	local04, #92 wz
066e0     8C 00 90 AD |  if_e	jmp	#LR__0993
066e4     14 4E 05 F1 | 	add	fp, #20
066e8     A7 00 E2 FA | 	rdword	arg01, fp
066ec     14 4E 85 F1 | 	sub	fp, #20
066f0     80 00 16 F2 | 	cmp	arg01, #128 wc
066f4     24 00 90 3D |  if_ae	jmp	#LR__0992
066f8     62 00 00 FF 
066fc     B6 01 06 F6 | 	mov	arg01, ##@LR__1625
06700     14 4E 05 F1 | 	add	fp, #20
06704     A7 02 E2 FA | 	rdword	arg02, fp
06708     14 4E 85 F1 | 	sub	fp, #20
0670c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
06710     00 EA 0D F2 | 	cmp	result1, #0 wz
06714     06 EA 05 56 |  if_ne	mov	result1, #6
06718     A4 07 90 5D |  if_ne	jmp	#LR__1030
0671c                 | LR__0992
0671c     2C 4E 05 F1 | 	add	fp, #44
06720     A7 14 02 FB | 	rdlong	local06, fp
06724     2C 4E 85 F1 | 	sub	fp, #44
06728     FF 14 16 F2 | 	cmp	local06, #255 wc
0672c     06 EA 05 36 |  if_ae	mov	result1, #6
06730     8C 07 90 3D |  if_ae	jmp	#LR__1030
06734     18 4E 05 F1 | 	add	fp, #24
06738     A7 0E 02 FB | 	rdlong	local03, fp
0673c     14 4E 05 F1 | 	add	fp, #20
06740     A7 0C 02 FB | 	rdlong	local02, fp
06744     06 11 02 F6 | 	mov	local04, local02
06748     01 10 06 F1 | 	add	local04, #1
0674c     A7 10 62 FC | 	wrlong	local04, fp
06750     06 0B 02 F6 | 	mov	local01, local02
06754     01 0A 66 F0 | 	shl	local01, #1
06758     07 0B 02 F1 | 	add	local01, local03
0675c     18 4E 85 F1 | 	sub	fp, #24
06760     A7 14 E2 FA | 	rdword	local06, fp
06764     14 4E 85 F1 | 	sub	fp, #20
06768     05 15 52 FC | 	wrword	local06, local01
0676c     B0 FE 9F FD | 	jmp	#LR__0990
06770                 | LR__0993
06770     14 4E 05 F1 | 	add	fp, #20
06774     A7 16 E2 FA | 	rdword	local07, fp
06778     14 4E 85 F1 | 	sub	fp, #20
0677c     20 16 16 F2 | 	cmp	local07, #32 wc
06780     10 4E 05 C1 |  if_b	add	fp, #16
06784     A7 08 48 CC |  if_b	wrbyte	#4, fp
06788     10 4E 85 C1 |  if_b	sub	fp, #16
0678c     74 00 90 CD |  if_b	jmp	#LR__0998
06790     97 24 48 FB | 	callpa	#(@LR__0996-@LR__0994)>>2,fcache_load_ptr_
06794                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
06794                 | LR__0994
06794     30 4E 05 F1 | 	add	fp, #48
06798     A7 10 02 FB | 	rdlong	local04, fp
0679c     30 4E 85 F1 | 	sub	fp, #48
067a0     08 17 C2 FA | 	rdbyte	local07, local04
067a4     2F 16 0E F2 | 	cmp	local07, #47 wz
067a8     18 00 90 AD |  if_e	jmp	#LR__0995
067ac     30 4E 05 F1 | 	add	fp, #48
067b0     A7 10 02 FB | 	rdlong	local04, fp
067b4     30 4E 85 F1 | 	sub	fp, #48
067b8     08 0D C2 FA | 	rdbyte	local02, local04
067bc     5C 0C 0E F2 | 	cmp	local02, #92 wz
067c0     18 00 90 5D |  if_ne	jmp	#LR__0997
067c4                 | LR__0995
067c4     30 4E 05 F1 | 	add	fp, #48
067c8     A7 0A 02 FB | 	rdlong	local01, fp
067cc     01 0A 06 F1 | 	add	local01, #1
067d0     A7 0A 62 FC | 	wrlong	local01, fp
067d4     30 4E 85 F1 | 	sub	fp, #48
067d8     B8 FF 9F FD | 	jmp	#LR__0994
067dc                 | LR__0996
067dc                 | LR__0997
067dc     10 4E 05 F1 | 	add	fp, #16
067e0     A7 00 48 FC | 	wrbyte	#0, fp
067e4     20 4E 05 F1 | 	add	fp, #32
067e8     A7 14 02 FB | 	rdlong	local06, fp
067ec     30 4E 85 F1 | 	sub	fp, #48
067f0     0A 17 C2 FA | 	rdbyte	local07, local06
067f4     20 16 16 F2 | 	cmp	local07, #32 wc
067f8     10 4E 05 C1 |  if_b	add	fp, #16
067fc     A7 08 48 CC |  if_b	wrbyte	#4, fp
06800     10 4E 85 C1 |  if_b	sub	fp, #16
06804                 | LR__0998
06804     08 4E 05 F1 | 	add	fp, #8
06808     A7 16 02 FB | 	rdlong	local07, fp
0680c     28 4E 05 F1 | 	add	fp, #40
06810     A7 0A 02 FB | 	rdlong	local01, fp
06814     30 4E 85 F1 | 	sub	fp, #48
06818     0B 0B 62 FC | 	wrlong	local01, local07
0681c     97 38 48 FB | 	callpa	#(@LR__1000-@LR__0999)>>2,fcache_load_ptr_
06820                 | ' 	}
06820                 | ' 	*path = p;
06820                 | ' #line 2862 "ff.c"
06820                 | ' 	while (di) {
06820                 | LR__0999
06820     2C 4E 05 F1 | 	add	fp, #44
06824     A7 16 0A FB | 	rdlong	local07, fp wz
06828     2C 4E 85 F1 | 	sub	fp, #44
0682c     60 00 90 AD |  if_e	jmp	#LR__1001
06830     18 4E 05 F1 | 	add	fp, #24
06834     A7 14 02 FB | 	rdlong	local06, fp
06838     14 4E 05 F1 | 	add	fp, #20
0683c     A7 10 02 FB | 	rdlong	local04, fp
06840     01 10 86 F1 | 	sub	local04, #1
06844     01 10 66 F0 | 	shl	local04, #1
06848     0A 11 02 F1 | 	add	local04, local06
0684c     08 15 E2 FA | 	rdword	local06, local04
06850     18 4E 85 F1 | 	sub	fp, #24
06854     A7 14 52 FC | 	wrword	local06, fp
06858     A7 16 E2 FA | 	rdword	local07, fp
0685c     14 4E 85 F1 | 	sub	fp, #20
06860     20 16 0E F2 | 	cmp	local07, #32 wz
06864     14 4E 05 51 |  if_ne	add	fp, #20
06868     A7 0A E2 5A |  if_ne	rdword	local01, fp
0686c     14 4E 85 51 |  if_ne	sub	fp, #20
06870     2E 0A 0E 52 |  if_ne	cmp	local01, #46 wz
06874     18 00 90 5D |  if_ne	jmp	#LR__1001
06878     2C 4E 05 F1 | 	add	fp, #44
0687c     A7 0A 02 FB | 	rdlong	local01, fp
06880     01 0A 86 F1 | 	sub	local01, #1
06884     A7 0A 62 FC | 	wrlong	local01, fp
06888     2C 4E 85 F1 | 	sub	fp, #44
0688c     90 FF 9F FD | 	jmp	#LR__0999
06890                 | LR__1000
06890                 | LR__1001
06890     18 4E 05 F1 | 	add	fp, #24
06894     A7 18 02 FB | 	rdlong	local08, fp
06898     14 4E 05 F1 | 	add	fp, #20
0689c     A7 10 02 FB | 	rdlong	local04, fp
068a0     01 10 66 F0 | 	shl	local04, #1
068a4     0C 11 02 F1 | 	add	local04, local08
068a8     08 01 58 FC | 	wrword	#0, local04
068ac     A7 16 0A FB | 	rdlong	local07, fp wz
068b0     2C 4E 85 F1 | 	sub	fp, #44
068b4     06 EA 05 A6 |  if_e	mov	result1, #6
068b8     04 06 90 AD |  if_e	jmp	#LR__1030
068bc                 | ' 
068bc                 | ' 
068bc                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
068bc     28 4E 05 F1 | 	add	fp, #40
068c0     A7 00 68 FC | 	wrlong	#0, fp
068c4     28 4E 85 F1 | 	sub	fp, #40
068c8     97 22 48 FB | 	callpa	#(@LR__1003-@LR__1002)>>2,fcache_load_ptr_
068cc                 | LR__1002
068cc     18 4E 05 F1 | 	add	fp, #24
068d0     A7 1A 02 FB | 	rdlong	local09, fp
068d4     10 4E 05 F1 | 	add	fp, #16
068d8     A7 1C 02 FB | 	rdlong	local10, fp
068dc     28 4E 85 F1 | 	sub	fp, #40
068e0     01 1C 66 F0 | 	shl	local10, #1
068e4     0D 1D 02 F1 | 	add	local10, local09
068e8     0E 1F E2 FA | 	rdword	local11, local10
068ec     20 1E 0E F2 | 	cmp	local11, #32 wz
068f0     1C 00 90 5D |  if_ne	jmp	#LR__1004
068f4     28 4E 05 F1 | 	add	fp, #40
068f8     A7 20 02 FB | 	rdlong	local12, fp
068fc     10 13 02 F6 | 	mov	local05, local12
06900     01 12 06 F1 | 	add	local05, #1
06904     A7 12 62 FC | 	wrlong	local05, fp
06908     28 4E 85 F1 | 	sub	fp, #40
0690c     BC FF 9F FD | 	jmp	#LR__1002
06910                 | LR__1003
06910                 | LR__1004
06910     28 4E 05 F1 | 	add	fp, #40
06914     A7 16 02 FB | 	rdlong	local07, fp
06918     28 4E 85 F1 | 	sub	fp, #40
0691c     01 16 16 F2 | 	cmp	local07, #1 wc
06920     28 00 90 3D |  if_ae	jmp	#LR__1005
06924     18 4E 05 F1 | 	add	fp, #24
06928     A7 0E 02 FB | 	rdlong	local03, fp
0692c     10 4E 05 F1 | 	add	fp, #16
06930     A7 1A 02 FB | 	rdlong	local09, fp
06934     28 4E 85 F1 | 	sub	fp, #40
06938     01 1A 66 F0 | 	shl	local09, #1
0693c     07 1B 02 F1 | 	add	local09, local03
06940     0D 0B E2 FA | 	rdword	local01, local09
06944     2E 0A 0E F2 | 	cmp	local01, #46 wz
06948     14 00 90 5D |  if_ne	jmp	#LR__1006
0694c                 | LR__1005
0694c     10 4E 05 F1 | 	add	fp, #16
06950     A7 16 C2 FA | 	rdbyte	local07, fp
06954     03 16 46 F5 | 	or	local07, #3
06958     A7 16 42 FC | 	wrbyte	local07, fp
0695c     10 4E 85 F1 | 	sub	fp, #16
06960                 | LR__1006
06960     97 2C 48 FB | 	callpa	#(@LR__1008-@LR__1007)>>2,fcache_load_ptr_
06964                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
06964                 | LR__1007
06964     2C 4E 05 F1 | 	add	fp, #44
06968     A7 16 02 FB | 	rdlong	local07, fp
0696c     2C 4E 85 F1 | 	sub	fp, #44
06970     01 16 16 F2 | 	cmp	local07, #1 wc
06974     44 00 90 CD |  if_b	jmp	#LR__1009
06978     18 4E 05 F1 | 	add	fp, #24
0697c     A7 14 02 FB | 	rdlong	local06, fp
06980     14 4E 05 F1 | 	add	fp, #20
06984     A7 0E 02 FB | 	rdlong	local03, fp
06988     2C 4E 85 F1 | 	sub	fp, #44
0698c     01 0E 86 F1 | 	sub	local03, #1
06990     01 0E 66 F0 | 	shl	local03, #1
06994     0A 0F 02 F1 | 	add	local03, local06
06998     07 0B E2 FA | 	rdword	local01, local03
0699c     2E 0A 0E F2 | 	cmp	local01, #46 wz
069a0     18 00 90 AD |  if_e	jmp	#LR__1009
069a4     2C 4E 05 F1 | 	add	fp, #44
069a8     A7 0A 02 FB | 	rdlong	local01, fp
069ac     01 0A 86 F1 | 	sub	local01, #1
069b0     A7 0A 62 FC | 	wrlong	local01, fp
069b4     2C 4E 85 F1 | 	sub	fp, #44
069b8     A8 FF 9F FD | 	jmp	#LR__1007
069bc                 | LR__1008
069bc                 | LR__1009
069bc     04 4E 05 F1 | 	add	fp, #4
069c0     A7 00 02 FB | 	rdlong	arg01, fp
069c4     04 4E 85 F1 | 	sub	fp, #4
069c8     20 00 06 F1 | 	add	arg01, #32
069cc     20 02 06 F6 | 	mov	arg02, #32
069d0     0B 04 06 F6 | 	mov	arg03, #11
069d4     00 23 02 F6 | 	mov	local13, arg01
069d8     98 00 A0 FD | 	call	#\builtin_bytefill_
069dc     11 EB 01 F6 | 	mov	result1, local13
069e0     0C 4E 05 F1 | 	add	fp, #12
069e4     A7 00 48 FC | 	wrbyte	#0, fp
069e8     A7 16 C2 FA | 	rdbyte	local07, fp
069ec     14 4E 05 F1 | 	add	fp, #20
069f0     A7 16 62 FC | 	wrlong	local07, fp
069f4     04 4E 05 F1 | 	add	fp, #4
069f8     A7 10 68 FC | 	wrlong	#8, fp
069fc     24 4E 85 F1 | 	sub	fp, #36
06a00                 | ' 
06a00                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
06a00                 | ' 	i = b = 0; ni = 8;
06a00                 | ' 	for (;;) {
06a00                 | LR__1010
06a00     18 4E 05 F1 | 	add	fp, #24
06a04     A7 0E 02 FB | 	rdlong	local03, fp
06a08     10 4E 05 F1 | 	add	fp, #16
06a0c     A7 1A 02 FB | 	rdlong	local09, fp
06a10     0D 11 02 F6 | 	mov	local04, local09
06a14     01 10 06 F1 | 	add	local04, #1
06a18     A7 10 62 FC | 	wrlong	local04, fp
06a1c     01 1A 66 F0 | 	shl	local09, #1
06a20     07 1B 02 F1 | 	add	local09, local03
06a24     0D 15 E2 FA | 	rdword	local06, local09
06a28     14 4E 85 F1 | 	sub	fp, #20
06a2c     A7 14 52 FC | 	wrword	local06, fp
06a30     A7 16 EA FA | 	rdword	local07, fp wz
06a34     14 4E 85 F1 | 	sub	fp, #20
06a38     74 03 90 AD |  if_e	jmp	#LR__1026
06a3c     14 4E 05 F1 | 	add	fp, #20
06a40     A7 16 E2 FA | 	rdword	local07, fp
06a44     14 4E 85 F1 | 	sub	fp, #20
06a48     20 16 0E F2 | 	cmp	local07, #32 wz
06a4c     30 00 90 AD |  if_e	jmp	#LR__1011
06a50     14 4E 05 F1 | 	add	fp, #20
06a54     A7 0A E2 FA | 	rdword	local01, fp
06a58     14 4E 85 F1 | 	sub	fp, #20
06a5c     2E 0A 0E F2 | 	cmp	local01, #46 wz
06a60     34 00 90 5D |  if_ne	jmp	#LR__1012
06a64     28 4E 05 F1 | 	add	fp, #40
06a68     A7 10 02 FB | 	rdlong	local04, fp
06a6c     04 4E 05 F1 | 	add	fp, #4
06a70     A7 1C 02 FB | 	rdlong	local10, fp
06a74     2C 4E 85 F1 | 	sub	fp, #44
06a78     0E 11 0A F2 | 	cmp	local04, local10 wz
06a7c     18 00 90 AD |  if_e	jmp	#LR__1012
06a80                 | LR__1011
06a80     10 4E 05 F1 | 	add	fp, #16
06a84     A7 16 C2 FA | 	rdbyte	local07, fp
06a88     03 16 46 F5 | 	or	local07, #3
06a8c     A7 16 42 FC | 	wrbyte	local07, fp
06a90     10 4E 85 F1 | 	sub	fp, #16
06a94                 | ' 			cf |=  0x01  |  0x02 ;
06a94                 | ' 			continue;
06a94     68 FF 9F FD | 	jmp	#LR__1010
06a98                 | LR__1012
06a98     20 4E 05 F1 | 	add	fp, #32
06a9c     A7 16 02 FB | 	rdlong	local07, fp
06aa0     04 4E 05 F1 | 	add	fp, #4
06aa4     A7 0A 02 FB | 	rdlong	local01, fp
06aa8     24 4E 85 F1 | 	sub	fp, #36
06aac     05 17 12 F2 | 	cmp	local07, local01 wc
06ab0     1C 00 90 3D |  if_ae	jmp	#LR__1013
06ab4     28 4E 05 F1 | 	add	fp, #40
06ab8     A7 18 02 FB | 	rdlong	local08, fp
06abc     04 4E 05 F1 | 	add	fp, #4
06ac0     A7 1C 02 FB | 	rdlong	local10, fp
06ac4     2C 4E 85 F1 | 	sub	fp, #44
06ac8     0E 19 0A F2 | 	cmp	local08, local10 wz
06acc     B0 00 90 5D |  if_ne	jmp	#LR__1015
06ad0                 | LR__1013
06ad0     24 4E 05 F1 | 	add	fp, #36
06ad4     A7 16 02 FB | 	rdlong	local07, fp
06ad8     24 4E 85 F1 | 	sub	fp, #36
06adc     0B 16 0E F2 | 	cmp	local07, #11 wz
06ae0     18 00 90 5D |  if_ne	jmp	#LR__1014
06ae4     10 4E 05 F1 | 	add	fp, #16
06ae8     A7 16 C2 FA | 	rdbyte	local07, fp
06aec     03 16 46 F5 | 	or	local07, #3
06af0     A7 16 42 FC | 	wrbyte	local07, fp
06af4     10 4E 85 F1 | 	sub	fp, #16
06af8                 | ' 				cf |=  0x01  |  0x02 ;
06af8                 | ' 				break;
06af8     B4 02 90 FD | 	jmp	#LR__1026
06afc                 | LR__1014
06afc     28 4E 05 F1 | 	add	fp, #40
06b00     A7 16 02 FB | 	rdlong	local07, fp
06b04     04 4E 05 F1 | 	add	fp, #4
06b08     A7 0A 02 FB | 	rdlong	local01, fp
06b0c     2C 4E 85 F1 | 	sub	fp, #44
06b10     05 17 0A F2 | 	cmp	local07, local01 wz
06b14     10 4E 05 51 |  if_ne	add	fp, #16
06b18     A7 16 C2 5A |  if_ne	rdbyte	local07, fp
06b1c     03 16 46 55 |  if_ne	or	local07, #3
06b20     A7 16 42 5C |  if_ne	wrbyte	local07, fp
06b24     10 4E 85 51 |  if_ne	sub	fp, #16
06b28     28 4E 05 F1 | 	add	fp, #40
06b2c     A7 16 02 FB | 	rdlong	local07, fp
06b30     04 4E 05 F1 | 	add	fp, #4
06b34     A7 0C 02 FB | 	rdlong	local02, fp
06b38     2C 4E 85 F1 | 	sub	fp, #44
06b3c     06 17 1A F2 | 	cmp	local07, local02 wcz
06b40     6C 02 90 1D |  if_a	jmp	#LR__1026
06b44     2C 4E 05 F1 | 	add	fp, #44
06b48     A7 16 02 FB | 	rdlong	local07, fp
06b4c     04 4E 85 F1 | 	sub	fp, #4
06b50     A7 16 62 FC | 	wrlong	local07, fp
06b54     08 4E 85 F1 | 	sub	fp, #8
06b58     A7 10 68 FC | 	wrlong	#8, fp
06b5c     04 4E 05 F1 | 	add	fp, #4
06b60     A7 16 68 FC | 	wrlong	#11, fp
06b64     18 4E 85 F1 | 	sub	fp, #24
06b68     A7 1E C2 FA | 	rdbyte	local11, fp
06b6c     0F 17 E2 F8 | 	getbyte	local07, local11, #0
06b70     02 16 66 F0 | 	shl	local07, #2
06b74     A7 16 42 FC | 	wrbyte	local07, fp
06b78     0C 4E 85 F1 | 	sub	fp, #12
06b7c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
06b7c                 | ' 			continue;
06b7c     80 FE 9F FD | 	jmp	#LR__1010
06b80                 | LR__1015
06b80     14 4E 05 F1 | 	add	fp, #20
06b84     A7 16 E2 FA | 	rdword	local07, fp
06b88     14 4E 85 F1 | 	sub	fp, #20
06b8c     80 16 16 F2 | 	cmp	local07, #128 wc
06b90     6C 00 90 CD |  if_b	jmp	#LR__1017
06b94     10 4E 05 F1 | 	add	fp, #16
06b98     A7 16 C2 FA | 	rdbyte	local07, fp
06b9c     02 16 46 F5 | 	or	local07, #2
06ba0     A7 16 42 FC | 	wrbyte	local07, fp
06ba4     04 4E 05 F1 | 	add	fp, #4
06ba8     A7 00 E2 FA | 	rdword	arg01, fp
06bac     14 4E 85 F1 | 	sub	fp, #20
06bb0     01 00 00 FF 
06bb4     52 03 06 F6 | 	mov	arg02, ##850
06bb8     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
06bbc     14 4E 05 F1 | 	add	fp, #20
06bc0     A7 EA 51 FC | 	wrword	result1, fp
06bc4     A7 16 E2 FA | 	rdword	local07, fp
06bc8     14 4E 85 F1 | 	sub	fp, #20
06bcc     80 16 CE F7 | 	test	local07, #128 wz
06bd0     2C 00 90 AD |  if_e	jmp	#LR__1016
06bd4     14 4E 05 F1 | 	add	fp, #20
06bd8     A7 0C E2 FA | 	rdword	local02, fp
06bdc     7F 0C 06 F5 | 	and	local02, #127
06be0     01 00 00 FF 
06be4     BB E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
06be8     F3 0C 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
06bec     06 17 C2 FA | 	rdbyte	local07, local02
06bf0     A7 16 52 FC | 	wrword	local07, fp
06bf4     14 4E 85 F1 | 	sub	fp, #20
06bf8     01 00 00 FF 
06bfc     BB E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
06c00                 | LR__1016
06c00                 | LR__1017
06c00     14 4E 05 F1 | 	add	fp, #20
06c04     A7 16 E2 FA | 	rdword	local07, fp
06c08     14 4E 85 F1 | 	sub	fp, #20
06c0c     00 17 16 F2 | 	cmp	local07, #256 wc
06c10     88 00 90 CD |  if_b	jmp	#LR__1019
06c14     24 4E 05 F1 | 	add	fp, #36
06c18     A7 16 02 FB | 	rdlong	local07, fp
06c1c     01 16 86 F1 | 	sub	local07, #1
06c20     04 4E 85 F1 | 	sub	fp, #4
06c24     A7 0C 02 FB | 	rdlong	local02, fp
06c28     20 4E 85 F1 | 	sub	fp, #32
06c2c     0B 0D 12 F2 | 	cmp	local02, local07 wc
06c30     2C 00 90 CD |  if_b	jmp	#LR__1018
06c34     10 4E 05 F1 | 	add	fp, #16
06c38     A7 1E C2 FA | 	rdbyte	local11, fp
06c3c     0F 17 E2 F8 | 	getbyte	local07, local11, #0
06c40     03 16 46 F5 | 	or	local07, #3
06c44     A7 16 42 FC | 	wrbyte	local07, fp
06c48     14 4E 05 F1 | 	add	fp, #20
06c4c     A7 16 02 FB | 	rdlong	local07, fp
06c50     04 4E 85 F1 | 	sub	fp, #4
06c54     A7 16 62 FC | 	wrlong	local07, fp
06c58     20 4E 85 F1 | 	sub	fp, #32
06c5c                 | ' 				cf |=  0x01  |  0x02 ;
06c5c                 | ' 				i = ni; continue;
06c5c     A0 FD 9F FD | 	jmp	#LR__1010
06c60                 | LR__1018
06c60     04 4E 05 F1 | 	add	fp, #4
06c64     A7 1A 02 FB | 	rdlong	local09, fp
06c68     1C 4E 05 F1 | 	add	fp, #28
06c6c     A7 1C 02 FB | 	rdlong	local10, fp
06c70     0E 11 02 F6 | 	mov	local04, local10
06c74     01 10 06 F1 | 	add	local04, #1
06c78     A7 10 62 FC | 	wrlong	local04, fp
06c7c     20 1A 06 F1 | 	add	local09, #32
06c80     0D 1D 02 F1 | 	add	local10, local09
06c84     0C 4E 85 F1 | 	sub	fp, #12
06c88     A7 0E E2 FA | 	rdword	local03, fp
06c8c     14 4E 85 F1 | 	sub	fp, #20
06c90     08 0E 46 F0 | 	shr	local03, #8
06c94     0E 0F 42 FC | 	wrbyte	local03, local10
06c98     D4 00 90 FD | 	jmp	#LR__1025
06c9c                 | LR__1019
06c9c     14 4E 05 F1 | 	add	fp, #20
06ca0     A7 16 EA FA | 	rdword	local07, fp wz
06ca4     14 4E 85 F1 | 	sub	fp, #20
06ca8     20 00 90 AD |  if_e	jmp	#LR__1020
06cac     62 00 00 FF 
06cb0     BF 01 06 F6 | 	mov	arg01, ##@LR__1626
06cb4     14 4E 05 F1 | 	add	fp, #20
06cb8     A7 02 E2 FA | 	rdword	arg02, fp
06cbc     14 4E 85 F1 | 	sub	fp, #20
06cc0     48 CB BF FD | 	call	#_fatfs_cc_strchr
06cc4     00 EA 0D F2 | 	cmp	result1, #0 wz
06cc8     20 00 90 AD |  if_e	jmp	#LR__1021
06ccc                 | LR__1020
06ccc     14 4E 05 F1 | 	add	fp, #20
06cd0     A7 BE 58 FC | 	wrword	#95, fp
06cd4     04 4E 85 F1 | 	sub	fp, #4
06cd8     A7 16 C2 FA | 	rdbyte	local07, fp
06cdc     03 16 46 F5 | 	or	local07, #3
06ce0     A7 16 42 FC | 	wrbyte	local07, fp
06ce4     10 4E 85 F1 | 	sub	fp, #16
06ce8     84 00 90 FD | 	jmp	#LR__1024
06cec                 | LR__1021
06cec     14 4E 05 F1 | 	add	fp, #20
06cf0     A7 16 E2 FA | 	rdword	local07, fp
06cf4     14 4E 85 F1 | 	sub	fp, #20
06cf8     41 16 16 F2 | 	cmp	local07, #65 wc
06cfc     24 00 90 CD |  if_b	jmp	#LR__1022
06d00     14 4E 05 F1 | 	add	fp, #20
06d04     A7 0A E2 FA | 	rdword	local01, fp
06d08     14 4E 85 F1 | 	sub	fp, #20
06d0c     5B 0A 16 F2 | 	cmp	local01, #91 wc
06d10     0C 4E 05 C1 |  if_b	add	fp, #12
06d14     A7 16 C2 CA |  if_b	rdbyte	local07, fp
06d18     02 16 46 C5 |  if_b	or	local07, #2
06d1c     A7 16 42 CC |  if_b	wrbyte	local07, fp
06d20     0C 4E 85 C1 |  if_b	sub	fp, #12
06d24                 | LR__1022
06d24     14 4E 05 F1 | 	add	fp, #20
06d28     A7 16 E2 FA | 	rdword	local07, fp
06d2c     14 4E 85 F1 | 	sub	fp, #20
06d30     61 16 16 F2 | 	cmp	local07, #97 wc
06d34     38 00 90 CD |  if_b	jmp	#LR__1023
06d38     14 4E 05 F1 | 	add	fp, #20
06d3c     A7 0A E2 FA | 	rdword	local01, fp
06d40     14 4E 85 F1 | 	sub	fp, #20
06d44     7B 0A 16 F2 | 	cmp	local01, #123 wc
06d48     24 00 90 3D |  if_ae	jmp	#LR__1023
06d4c     0C 4E 05 F1 | 	add	fp, #12
06d50     A7 16 C2 FA | 	rdbyte	local07, fp
06d54     01 16 46 F5 | 	or	local07, #1
06d58     A7 16 42 FC | 	wrbyte	local07, fp
06d5c     08 4E 05 F1 | 	add	fp, #8
06d60     A7 16 E2 FA | 	rdword	local07, fp
06d64     20 16 86 F1 | 	sub	local07, #32
06d68     A7 16 52 FC | 	wrword	local07, fp
06d6c     14 4E 85 F1 | 	sub	fp, #20
06d70                 | LR__1023
06d70                 | LR__1024
06d70                 | LR__1025
06d70     04 4E 05 F1 | 	add	fp, #4
06d74     A7 1E 02 FB | 	rdlong	local11, fp
06d78     0F 1B 02 F6 | 	mov	local09, local11
06d7c     1C 4E 05 F1 | 	add	fp, #28
06d80     A7 0C 02 FB | 	rdlong	local02, fp
06d84     06 11 02 F6 | 	mov	local04, local02
06d88     01 10 06 F1 | 	add	local04, #1
06d8c     A7 10 62 FC | 	wrlong	local04, fp
06d90     06 1D 02 F6 | 	mov	local10, local02
06d94     20 1A 06 F1 | 	add	local09, #32
06d98     0D 1D 02 F1 | 	add	local10, local09
06d9c     0C 4E 85 F1 | 	sub	fp, #12
06da0     A7 0E E2 FA | 	rdword	local03, fp
06da4     14 4E 85 F1 | 	sub	fp, #20
06da8     0E 0F 42 FC | 	wrbyte	local03, local10
06dac     50 FC 9F FD | 	jmp	#LR__1010
06db0                 | LR__1026
06db0     04 4E 05 F1 | 	add	fp, #4
06db4     A7 1E 02 FB | 	rdlong	local11, fp
06db8     04 4E 85 F1 | 	sub	fp, #4
06dbc     20 1E 06 F1 | 	add	local11, #32
06dc0     0F 17 C2 FA | 	rdbyte	local07, local11
06dc4     E5 16 0E F2 | 	cmp	local07, #229 wz
06dc8     04 4E 05 A1 |  if_e	add	fp, #4
06dcc     A7 16 02 AB |  if_e	rdlong	local07, fp
06dd0     04 4E 85 A1 |  if_e	sub	fp, #4
06dd4     20 16 06 A1 |  if_e	add	local07, #32
06dd8     0B 0B 48 AC |  if_e	wrbyte	#5, local07
06ddc     24 4E 05 F1 | 	add	fp, #36
06de0     A7 16 02 FB | 	rdlong	local07, fp
06de4     24 4E 85 F1 | 	sub	fp, #36
06de8     08 16 0E F2 | 	cmp	local07, #8 wz
06dec     0C 4E 05 A1 |  if_e	add	fp, #12
06df0     A7 16 C2 AA |  if_e	rdbyte	local07, fp
06df4     02 16 66 A0 |  if_e	shl	local07, #2
06df8     A7 16 42 AC |  if_e	wrbyte	local07, fp
06dfc     0C 4E 85 A1 |  if_e	sub	fp, #12
06e00     0C 4E 05 F1 | 	add	fp, #12
06e04     A7 16 C2 FA | 	rdbyte	local07, fp
06e08     0C 4E 85 F1 | 	sub	fp, #12
06e0c     0C 16 06 F5 | 	and	local07, #12
06e10     0C 16 0E F2 | 	cmp	local07, #12 wz
06e14     18 00 90 AD |  if_e	jmp	#LR__1027
06e18     0C 4E 05 F1 | 	add	fp, #12
06e1c     A7 0A C2 FA | 	rdbyte	local01, fp
06e20     0C 4E 85 F1 | 	sub	fp, #12
06e24     03 0A 06 F5 | 	and	local01, #3
06e28     03 0A 0E F2 | 	cmp	local01, #3 wz
06e2c     14 00 90 5D |  if_ne	jmp	#LR__1028
06e30                 | LR__1027
06e30     10 4E 05 F1 | 	add	fp, #16
06e34     A7 16 C2 FA | 	rdbyte	local07, fp
06e38     02 16 46 F5 | 	or	local07, #2
06e3c     A7 16 42 FC | 	wrbyte	local07, fp
06e40     10 4E 85 F1 | 	sub	fp, #16
06e44                 | LR__1028
06e44     10 4E 05 F1 | 	add	fp, #16
06e48     A7 16 C2 FA | 	rdbyte	local07, fp
06e4c     10 4E 85 F1 | 	sub	fp, #16
06e50     02 16 CE F7 | 	test	local07, #2 wz
06e54     48 00 90 5D |  if_ne	jmp	#LR__1029
06e58     0C 4E 05 F1 | 	add	fp, #12
06e5c     A7 16 C2 FA | 	rdbyte	local07, fp
06e60     0C 4E 85 F1 | 	sub	fp, #12
06e64     01 16 CE F7 | 	test	local07, #1 wz
06e68     10 4E 05 51 |  if_ne	add	fp, #16
06e6c     A7 16 C2 5A |  if_ne	rdbyte	local07, fp
06e70     10 16 46 55 |  if_ne	or	local07, #16
06e74     A7 16 42 5C |  if_ne	wrbyte	local07, fp
06e78     10 4E 85 51 |  if_ne	sub	fp, #16
06e7c     0C 4E 05 F1 | 	add	fp, #12
06e80     A7 16 C2 FA | 	rdbyte	local07, fp
06e84     0C 4E 85 F1 | 	sub	fp, #12
06e88     04 16 CE F7 | 	test	local07, #4 wz
06e8c     10 4E 05 51 |  if_ne	add	fp, #16
06e90     A7 16 C2 5A |  if_ne	rdbyte	local07, fp
06e94     08 16 46 55 |  if_ne	or	local07, #8
06e98     A7 16 42 5C |  if_ne	wrbyte	local07, fp
06e9c     10 4E 85 51 |  if_ne	sub	fp, #16
06ea0                 | LR__1029
06ea0     04 4E 05 F1 | 	add	fp, #4
06ea4     A7 16 02 FB | 	rdlong	local07, fp
06ea8     0C 4E 05 F1 | 	add	fp, #12
06eac     A7 0A C2 FA | 	rdbyte	local01, fp
06eb0     10 4E 85 F1 | 	sub	fp, #16
06eb4     2B 16 06 F1 | 	add	local07, #43
06eb8     0B 0B 42 FC | 	wrbyte	local01, local07
06ebc                 | ' 	}
06ebc                 | ' 
06ebc                 | ' 	dp->fn[ 11 ] = cf;
06ebc                 | ' 
06ebc                 | ' 	return FR_OK;
06ebc     00 EA 05 F6 | 	mov	result1, #0
06ec0                 | LR__1030
06ec0     A7 F0 03 F6 | 	mov	ptra, fp
06ec4     B2 00 A0 FD | 	call	#popregs_
06ec8                 | _fatfs_cc_create_name_ret
06ec8     2D 00 64 FD | 	ret
06ecc                 | 
06ecc                 | _fatfs_cc_follow_path
06ecc     02 4A 05 F6 | 	mov	COUNT_, #2
06ed0     A8 00 A0 FD | 	call	#pushregs_
06ed4     18 F0 07 F1 | 	add	ptra, #24
06ed8     04 4E 05 F1 | 	add	fp, #4
06edc     A7 00 62 FC | 	wrlong	arg01, fp
06ee0     04 4E 05 F1 | 	add	fp, #4
06ee4     A7 02 62 FC | 	wrlong	arg02, fp
06ee8     04 4E 85 F1 | 	sub	fp, #4
06eec     A7 EA 01 FB | 	rdlong	result1, fp
06ef0     F5 0A 02 FB | 	rdlong	local01, result1
06ef4     10 4E 05 F1 | 	add	fp, #16
06ef8     A7 0A 62 FC | 	wrlong	local01, fp
06efc     14 4E 85 F1 | 	sub	fp, #20
06f00     97 24 48 FB | 	callpa	#(@LR__1042-@LR__1040)>>2,fcache_load_ptr_
06f04                 | ' )
06f04                 | ' {
06f04                 | ' 	FRESULT res;
06f04                 | ' 	BYTE ns;
06f04                 | ' 	FATFS *fs = dp->obj.fs;
06f04                 | ' #line 3034 "ff.c"
06f04                 | ' 	{
06f04                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
06f04                 | LR__1040
06f04     08 4E 05 F1 | 	add	fp, #8
06f08     A7 0A 02 FB | 	rdlong	local01, fp
06f0c     08 4E 85 F1 | 	sub	fp, #8
06f10     05 0B C2 FA | 	rdbyte	local01, local01
06f14     2F 0A 0E F2 | 	cmp	local01, #47 wz
06f18     18 00 90 AD |  if_e	jmp	#LR__1041
06f1c     08 4E 05 F1 | 	add	fp, #8
06f20     A7 0A 02 FB | 	rdlong	local01, fp
06f24     08 4E 85 F1 | 	sub	fp, #8
06f28     05 0B C2 FA | 	rdbyte	local01, local01
06f2c     5C 0A 0E F2 | 	cmp	local01, #92 wz
06f30     18 00 90 5D |  if_ne	jmp	#LR__1043
06f34                 | LR__1041
06f34     08 4E 05 F1 | 	add	fp, #8
06f38     A7 0A 02 FB | 	rdlong	local01, fp
06f3c     01 0A 06 F1 | 	add	local01, #1
06f40     A7 0A 62 FC | 	wrlong	local01, fp
06f44     08 4E 85 F1 | 	sub	fp, #8
06f48     B8 FF 9F FD | 	jmp	#LR__1040
06f4c                 | LR__1042
06f4c                 | LR__1043
06f4c     04 4E 05 F1 | 	add	fp, #4
06f50     A7 0A 02 FB | 	rdlong	local01, fp
06f54     08 0A 06 F1 | 	add	local01, #8
06f58     05 01 68 FC | 	wrlong	#0, local01
06f5c     04 4E 05 F1 | 	add	fp, #4
06f60     A7 0A 02 FB | 	rdlong	local01, fp
06f64     08 4E 85 F1 | 	sub	fp, #8
06f68     05 0B C2 FA | 	rdbyte	local01, local01
06f6c     20 0A 16 F2 | 	cmp	local01, #32 wc
06f70     30 00 90 3D |  if_ae	jmp	#LR__1044
06f74     04 4E 05 F1 | 	add	fp, #4
06f78     A7 0A 02 FB | 	rdlong	local01, fp
06f7c     2B 0A 06 F1 | 	add	local01, #43
06f80     05 01 49 FC | 	wrbyte	#128, local01
06f84     A7 00 02 FB | 	rdlong	arg01, fp
06f88     04 4E 85 F1 | 	sub	fp, #4
06f8c     00 02 06 F6 | 	mov	arg02, #0
06f90     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
06f94     0C 4E 05 F1 | 	add	fp, #12
06f98     A7 EA 61 FC | 	wrlong	result1, fp
06f9c     0C 4E 85 F1 | 	sub	fp, #12
06fa0     1C 01 90 FD | 	jmp	#LR__1048
06fa4                 | LR__1044
06fa4                 | ' 		for (;;) {
06fa4                 | LR__1045
06fa4     04 4E 05 F1 | 	add	fp, #4
06fa8     A7 00 02 FB | 	rdlong	arg01, fp
06fac     04 4E 05 F1 | 	add	fp, #4
06fb0     A7 02 02 F6 | 	mov	arg02, fp
06fb4     08 4E 85 F1 | 	sub	fp, #8
06fb8     14 F6 BF FD | 	call	#_fatfs_cc_create_name
06fbc     0C 4E 05 F1 | 	add	fp, #12
06fc0     A7 EA 61 FC | 	wrlong	result1, fp
06fc4     00 EA 4D F2 | 	cmps	result1, #0 wz
06fc8     0C 4E 85 F1 | 	sub	fp, #12
06fcc     F0 00 90 5D |  if_ne	jmp	#LR__1047
06fd0     04 4E 05 F1 | 	add	fp, #4
06fd4     A7 00 02 FB | 	rdlong	arg01, fp
06fd8     04 4E 85 F1 | 	sub	fp, #4
06fdc     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
06fe0     0C 4E 05 F1 | 	add	fp, #12
06fe4     A7 EA 61 FC | 	wrlong	result1, fp
06fe8     08 4E 85 F1 | 	sub	fp, #8
06fec     A7 0A 02 FB | 	rdlong	local01, fp
06ff0     2B 0A 06 F1 | 	add	local01, #43
06ff4     05 0B C2 FA | 	rdbyte	local01, local01
06ff8     0C 4E 05 F1 | 	add	fp, #12
06ffc     A7 0A 42 FC | 	wrbyte	local01, fp
07000     04 4E 85 F1 | 	sub	fp, #4
07004     A7 0A 0A FB | 	rdlong	local01, fp wz
07008     0C 4E 85 F1 | 	sub	fp, #12
0700c     34 00 90 AD |  if_e	jmp	#LR__1046
07010     0C 4E 05 F1 | 	add	fp, #12
07014     A7 0A 02 FB | 	rdlong	local01, fp
07018     0C 4E 85 F1 | 	sub	fp, #12
0701c     04 0A 0E F2 | 	cmp	local01, #4 wz
07020     9C 00 90 5D |  if_ne	jmp	#LR__1047
07024     10 4E 05 F1 | 	add	fp, #16
07028     A7 0A C2 FA | 	rdbyte	local01, fp
0702c     10 4E 85 F1 | 	sub	fp, #16
07030     04 0A CE F7 | 	test	local01, #4 wz
07034     0C 4E 05 A1 |  if_e	add	fp, #12
07038     A7 0A 68 AC |  if_e	wrlong	#5, fp
0703c     0C 4E 85 A1 |  if_e	sub	fp, #12
07040                 | ' 					}
07040                 | ' 				}
07040                 | ' 				break;
07040     7C 00 90 FD | 	jmp	#LR__1047
07044                 | LR__1046
07044     10 4E 05 F1 | 	add	fp, #16
07048     A7 0A C2 FA | 	rdbyte	local01, fp
0704c     10 4E 85 F1 | 	sub	fp, #16
07050     04 0A CE F7 | 	test	local01, #4 wz
07054     68 00 90 5D |  if_ne	jmp	#LR__1047
07058     04 4E 05 F1 | 	add	fp, #4
0705c     A7 0A 02 FB | 	rdlong	local01, fp
07060     04 4E 85 F1 | 	sub	fp, #4
07064     06 0A 06 F1 | 	add	local01, #6
07068     05 0B C2 FA | 	rdbyte	local01, local01
0706c     10 0A CE F7 | 	test	local01, #16 wz
07070     0C 4E 05 A1 |  if_e	add	fp, #12
07074     A7 0A 68 AC |  if_e	wrlong	#5, fp
07078     0C 4E 85 A1 |  if_e	sub	fp, #12
0707c                 | ' 				res = FR_NO_PATH; break;
0707c     40 00 90 AD |  if_e	jmp	#LR__1047
07080     04 4E 05 F1 | 	add	fp, #4
07084     A7 0C 02 FB | 	rdlong	local02, fp
07088     06 0B 02 F6 | 	mov	local01, local02
0708c     10 4E 05 F1 | 	add	fp, #16
07090     A7 02 02 FB | 	rdlong	arg02, fp
07094     01 01 02 F6 | 	mov	arg01, arg02
07098     34 02 06 F1 | 	add	arg02, #52
0709c     14 4E 85 F1 | 	sub	fp, #20
070a0     10 0C 06 F1 | 	add	local02, #16
070a4     06 0D 02 FB | 	rdlong	local02, local02
070a8     FF 0D 06 F5 | 	and	local02, #511
070ac     06 03 02 F1 | 	add	arg02, local02
070b0     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
070b4     08 0A 06 F1 | 	add	local01, #8
070b8     05 EB 61 FC | 	wrlong	result1, local01
070bc     E4 FE 9F FD | 	jmp	#LR__1045
070c0                 | LR__1047
070c0                 | LR__1048
070c0                 | ' 			}
070c0                 | ' #line 3090 "ff.c"
070c0                 | ' 			{
070c0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
070c0                 | ' 			}
070c0                 | ' 		}
070c0                 | ' 	}
070c0                 | ' 
070c0                 | ' 	return res;
070c0     0C 4E 05 F1 | 	add	fp, #12
070c4     A7 EA 01 FB | 	rdlong	result1, fp
070c8     0C 4E 85 F1 | 	sub	fp, #12
070cc     A7 F0 03 F6 | 	mov	ptra, fp
070d0     B2 00 A0 FD | 	call	#popregs_
070d4                 | _fatfs_cc_follow_path_ret
070d4     2D 00 64 FD | 	ret
070d8                 | 
070d8                 | _fatfs_cc_get_ldnumber
070d8     01 EE 65 F6 | 	neg	_var01, #1
070dc     00 F1 09 FB | 	rdlong	_var02, arg01 wz
070e0     F8 F2 01 F6 | 	mov	_var03, _var02
070e4     01 EA 65 A6 |  if_e	neg	result1, #1
070e8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
070ec     97 10 48 FB | 	callpa	#(@LR__1051-@LR__1050)>>2,fcache_load_ptr_
070f0                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
070f0                 | LR__1050
070f0     F9 F4 C1 FA | 	rdbyte	_var04, _var03
070f4     FA EA E1 F8 | 	getbyte	result1, _var04, #0
070f8     20 EA 15 F2 | 	cmp	result1, #32 wc
070fc     01 F2 05 F1 | 	add	_var03, #1
07100     FA F6 01 36 |  if_ae	mov	_var05, _var04
07104     FB F6 E1 38 |  if_ae	getbyte	_var05, _var05, #0
07108     3A F6 0D 32 |  if_ae	cmp	_var05, #58 wz
0710c     E0 FF 9F 1D |  if_a	jmp	#LR__1050
07110                 | LR__1051
07110     FA F4 E1 F8 | 	getbyte	_var04, _var04, #0
07114     3A F4 0D F2 | 	cmp	_var04, #58 wz
07118     40 00 90 5D |  if_ne	jmp	#LR__1053
0711c     01 F8 05 F6 | 	mov	_var06, #1
07120     F8 F6 C1 FA | 	rdbyte	_var05, _var02
07124     30 F6 15 F2 | 	cmp	_var05, #48 wc
07128     1C 00 90 CD |  if_b	jmp	#LR__1052
0712c     F8 F6 C1 FA | 	rdbyte	_var05, _var02
07130     3A F6 15 F2 | 	cmp	_var05, #58 wc
07134     F8 FA 01 C6 |  if_b	mov	_var07, _var02
07138     02 FA 05 C1 |  if_b	add	_var07, #2
0713c     F9 FA 09 C2 |  if_b	cmp	_var07, _var03 wz
07140     F8 F8 C1 8A |  if_c_and_z	rdbyte	_var06, _var02
07144     30 F8 85 81 |  if_c_and_z	sub	_var06, #48
07148                 | LR__1052
07148     01 F8 55 F2 | 	cmps	_var06, #1 wc
0714c     FC EE 01 C6 |  if_b	mov	_var01, _var06
07150     00 F3 61 CC |  if_b	wrlong	_var03, arg01
07154                 | ' 			vol = i;
07154                 | ' 			*path = tt;
07154                 | ' 		}
07154                 | ' 		return vol;
07154     F7 EA 01 F6 | 	mov	result1, _var01
07158     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
0715c                 | LR__1053
0715c                 | ' 	}
0715c                 | ' #line 3170 "ff.c"
0715c                 | ' 	vol = 0;
0715c                 | ' 
0715c                 | ' 	return vol;
0715c     00 EA 05 F6 | 	mov	result1, #0
07160                 | _fatfs_cc_get_ldnumber_ret
07160     2D 00 64 FD | 	ret
07164                 | 
07164                 | _fatfs_cc_check_fs
07164     04 4A 05 F6 | 	mov	COUNT_, #4
07168     A8 00 A0 FD | 	call	#pushregs_
0716c     00 0B 02 F6 | 	mov	local01, arg01
07170     03 0A 06 F1 | 	add	local01, #3
07174     05 01 48 FC | 	wrbyte	#0, local01
07178     2D 0A 06 F1 | 	add	local01, #45
0717c     FF FF FF FF 
07180     05 FF 6B FC | 	wrlong	##-1, local01
07184     30 0A 86 F1 | 	sub	local01, #48
07188     05 01 02 F6 | 	mov	arg01, local01
0718c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
07190     00 EA 0D F2 | 	cmp	result1, #0 wz
07194     04 EA 05 56 |  if_ne	mov	result1, #4
07198     94 01 90 5D |  if_ne	jmp	#LR__1064
0719c     34 0A 06 F1 | 	add	local01, #52
071a0     05 01 02 F6 | 	mov	arg01, local01
071a4     FE 01 06 F1 | 	add	arg01, #510
071a8                 | ' {
071a8                 | ' 
071a8                 | ' 	return *((WORD*)ptr);
071a8     00 0D E2 FA | 	rdword	local02, arg01
071ac     05 0F C2 FA | 	rdbyte	local03, local01
071b0     34 0A 86 F1 | 	sub	local01, #52
071b4     07 11 E2 F8 | 	getbyte	local04, local03, #0
071b8     EB 10 0E F2 | 	cmp	local04, #235 wz
071bc     07 05 02 56 |  if_ne	mov	arg03, local03
071c0     02 05 E2 58 |  if_ne	getbyte	arg03, arg03, #0
071c4     E9 04 0E 52 |  if_ne	cmp	arg03, #233 wz
071c8     07 0F E2 58 |  if_ne	getbyte	local03, local03, #0
071cc     E8 0E 0E 52 |  if_ne	cmp	local03, #232 wz
071d0     44 01 90 5D |  if_ne	jmp	#LR__1063
071d4     06 11 32 F9 | 	getword	local04, local02, #0
071d8     55 00 00 FF 
071dc     55 10 0E F2 | 	cmp	local04, ##43605 wz
071e0     2C 00 90 5D |  if_ne	jmp	#LR__1060
071e4     34 0A 06 F1 | 	add	local01, #52
071e8     05 01 02 F6 | 	mov	arg01, local01
071ec     34 0A 86 F1 | 	sub	local01, #52
071f0     52 00 06 F1 | 	add	arg01, #82
071f4     62 00 00 FF 
071f8     C6 03 06 F6 | 	mov	arg02, ##@LR__1627
071fc     08 04 06 F6 | 	mov	arg03, #8
07200     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
07204     00 EA 0D F2 | 	cmp	result1, #0 wz
07208                 | ' 			return 0;
07208     00 EA 05 A6 |  if_e	mov	result1, #0
0720c     20 01 90 AD |  if_e	jmp	#LR__1064
07210                 | LR__1060
07210     34 0A 06 F1 | 	add	local01, #52
07214     05 01 02 F6 | 	mov	arg01, local01
07218     0B 00 06 F1 | 	add	arg01, #11
0721c                 | ' {
0721c                 | ' 
0721c                 | ' 	return *((WORD*)ptr);
0721c     00 EB E1 FA | 	rdword	result1, arg01
07220     0D 0A 06 F1 | 	add	local01, #13
07224     05 0F C2 FA | 	rdbyte	local03, local01
07228     41 0A 86 F1 | 	sub	local01, #65
0722c     F5 10 32 F9 | 	getword	local04, result1, #0
07230     F5 02 32 F9 | 	getword	arg02, result1, #0
07234     01 02 86 F1 | 	sub	arg02, #1
07238     01 11 CA F7 | 	test	local04, arg02 wz
0723c     D8 00 90 5D |  if_ne	jmp	#LR__1062
07240     F5 02 32 F9 | 	getword	arg02, result1, #0
07244     01 00 00 FF 
07248     00 02 16 F2 | 	cmp	arg02, ##512 wc
0724c     C8 00 90 CD |  if_b	jmp	#LR__1062
07250     F5 02 32 F9 | 	getword	arg02, result1, #0
07254     01 00 00 FF 
07258     01 02 16 F2 | 	cmp	arg02, ##513 wc
0725c     B8 00 90 3D |  if_ae	jmp	#LR__1062
07260     07 01 02 F6 | 	mov	arg01, local03
07264     07 00 4E F7 | 	zerox	arg01, #7 wz
07268     AC 00 90 AD |  if_e	jmp	#LR__1062
0726c     07 01 E2 F8 | 	getbyte	arg01, local03, #0
07270     07 0F E2 F8 | 	getbyte	local03, local03, #0
07274     01 0E 86 F1 | 	sub	local03, #1
07278     07 01 CA F7 | 	test	arg01, local03 wz
0727c     98 00 90 5D |  if_ne	jmp	#LR__1062
07280     34 0A 06 F1 | 	add	local01, #52
07284     05 01 02 F6 | 	mov	arg01, local01
07288     34 0A 86 F1 | 	sub	local01, #52
0728c     0E 00 06 F1 | 	add	arg01, #14
07290                 | ' {
07290                 | ' 
07290                 | ' 	return *((WORD*)ptr);
07290     00 EB E9 FA | 	rdword	result1, arg01 wz
07294     80 00 90 AD |  if_e	jmp	#LR__1062
07298     44 0A 06 F1 | 	add	local01, #68
0729c     05 01 C2 FA | 	rdbyte	arg01, local01
072a0     44 0A 86 F1 | 	sub	local01, #68
072a4     01 00 86 F1 | 	sub	arg01, #1
072a8     02 00 16 F2 | 	cmp	arg01, #2 wc
072ac     68 00 90 3D |  if_ae	jmp	#LR__1062
072b0     34 0A 06 F1 | 	add	local01, #52
072b4     05 01 02 F6 | 	mov	arg01, local01
072b8     34 0A 86 F1 | 	sub	local01, #52
072bc     11 00 06 F1 | 	add	arg01, #17
072c0                 | ' {
072c0                 | ' 
072c0                 | ' 	return *((WORD*)ptr);
072c0     00 EB E9 FA | 	rdword	result1, arg01 wz
072c4     50 00 90 AD |  if_e	jmp	#LR__1062
072c8     34 0A 06 F1 | 	add	local01, #52
072cc     05 01 02 F6 | 	mov	arg01, local01
072d0     34 0A 86 F1 | 	sub	local01, #52
072d4     13 00 06 F1 | 	add	arg01, #19
072d8                 | ' {
072d8                 | ' 
072d8                 | ' 	return *((WORD*)ptr);
072d8     00 EB E1 FA | 	rdword	result1, arg01
072dc     F5 0E 32 F9 | 	getword	local03, result1, #0
072e0     80 0E 16 F2 | 	cmp	local03, #128 wc
072e4     20 00 90 3D |  if_ae	jmp	#LR__1061
072e8     34 0A 06 F1 | 	add	local01, #52
072ec     05 01 02 F6 | 	mov	arg01, local01
072f0     34 0A 86 F1 | 	sub	local01, #52
072f4     20 00 06 F1 | 	add	arg01, #32
072f8                 | ' {
072f8                 | ' 
072f8                 | ' 	return *((DWORD*)ptr);
072f8     00 EB 01 FB | 	rdlong	result1, arg01
072fc     80 00 00 FF 
07300     00 EA 15 F2 | 	cmp	result1, ##65536 wc
07304     10 00 90 CD |  if_b	jmp	#LR__1062
07308                 | LR__1061
07308     4A 0A 06 F1 | 	add	local01, #74
0730c                 | ' {
0730c                 | ' 
0730c                 | ' 	return *((WORD*)ptr);
0730c     05 EB E9 FA | 	rdword	result1, local01 wz
07310                 | ' 			&& b != 0 && (b & (b - 1)) == 0
07310                 | ' 			&& ld_word(fs->win +  14 ) != 0
07310                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
07310                 | ' 			&& ld_word(fs->win +  17 ) != 0
07310                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
07310                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
07310                 | ' 				return 0;
07310     00 EA 05 56 |  if_ne	mov	result1, #0
07314     18 00 90 5D |  if_ne	jmp	#LR__1064
07318                 | LR__1062
07318                 | LR__1063
07318                 | ' 		}
07318                 | ' 	}
07318                 | ' 	return sign == 0xAA55 ? 2 : 3;
07318     06 0F 32 F9 | 	getword	local03, local02, #0
0731c     55 00 00 FF 
07320     55 0E 0E F2 | 	cmp	local03, ##43605 wz
07324     02 10 06 A6 |  if_e	mov	local04, #2
07328     03 10 06 56 |  if_ne	mov	local04, #3
0732c     08 EB 01 F6 | 	mov	result1, local04
07330                 | LR__1064
07330     A7 F0 03 F6 | 	mov	ptra, fp
07334     B2 00 A0 FD | 	call	#popregs_
07338                 | _fatfs_cc_check_fs_ret
07338     2D 00 64 FD | 	ret
0733c                 | 
0733c                 | _fatfs_cc_find_volume
0733c     05 4A 05 F6 | 	mov	COUNT_, #5
07340     A8 00 A0 FD | 	call	#pushregs_
07344     24 F0 07 F1 | 	add	ptra, #36
07348     00 0B 02 F6 | 	mov	local01, arg01
0734c     01 0D 02 F6 | 	mov	local02, arg02
07350     05 01 02 F6 | 	mov	arg01, local01
07354     00 02 06 F6 | 	mov	arg02, #0
07358     08 FE BF FD | 	call	#_fatfs_cc_check_fs
0735c     02 EA 0D F2 | 	cmp	result1, #2 wz
07360     0C 00 90 AD |  if_e	jmp	#LR__1070
07364     03 EA 15 F2 | 	cmp	result1, #3 wc
07368     00 0C 0E C2 |  if_b	cmp	local02, #0 wz
0736c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__1078
07370                 | LR__1070
07370                 | ' 	for (i = 0; i < 4; i++) {
07370     00 0E 06 F6 | 	mov	local03, #0
07374     97 26 48 FB | 	callpa	#(@LR__1072-@LR__1071)>>2,fcache_load_ptr_
07378                 | LR__1071
07378     04 0E 16 F2 | 	cmp	local03, #4 wc
0737c     44 00 90 3D |  if_ae	jmp	#LR__1073
07380     07 11 02 F6 | 	mov	local04, local03
07384     02 10 66 F0 | 	shl	local04, #2
07388     14 4E 05 F1 | 	add	fp, #20
0738c     A7 10 02 F1 | 	add	local04, fp
07390     34 0A 06 F1 | 	add	local01, #52
07394     05 01 02 F6 | 	mov	arg01, local01
07398     34 0A 86 F1 | 	sub	local01, #52
0739c     BE 01 06 F1 | 	add	arg01, #446
073a0     07 03 02 F6 | 	mov	arg02, local03
073a4     04 02 66 F0 | 	shl	arg02, #4
073a8     01 01 02 F1 | 	add	arg01, arg02
073ac     08 00 06 F1 | 	add	arg01, #8
073b0                 | ' {
073b0                 | ' 
073b0                 | ' 	return *((DWORD*)ptr);
073b0     00 EB 01 FB | 	rdlong	result1, arg01
073b4     14 4E 85 F1 | 	sub	fp, #20
073b8     08 EB 61 FC | 	wrlong	result1, local04
073bc     01 0E 06 F1 | 	add	local03, #1
073c0     B4 FF 9F FD | 	jmp	#LR__1071
073c4                 | LR__1072
073c4                 | LR__1073
073c4     00 0C 0E F2 | 	cmp	local02, #0 wz
073c8     06 11 02 56 |  if_ne	mov	local04, local02
073cc     01 10 86 51 |  if_ne	sub	local04, #1
073d0     00 10 06 A6 |  if_e	mov	local04, #0
073d4     08 0F 02 F6 | 	mov	local03, local04
073d8                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
073d8                 | ' 	}
073d8                 | ' 	i = part ? part - 1 : 0;
073d8                 | ' 	do {
073d8                 | LR__1074
073d8     07 11 02 F6 | 	mov	local04, local03
073dc     02 10 66 F0 | 	shl	local04, #2
073e0     14 4E 05 F1 | 	add	fp, #20
073e4     A7 10 02 F1 | 	add	local04, fp
073e8     08 11 0A FB | 	rdlong	local04, local04 wz
073ec     14 4E 85 F1 | 	sub	fp, #20
073f0     28 00 90 AD |  if_e	jmp	#LR__1075
073f4     07 11 02 F6 | 	mov	local04, local03
073f8     02 10 66 F0 | 	shl	local04, #2
073fc     14 4E 05 F1 | 	add	fp, #20
07400     A7 10 02 F1 | 	add	local04, fp
07404     08 03 02 FB | 	rdlong	arg02, local04
07408     05 01 02 F6 | 	mov	arg01, local01
0740c     14 4E 85 F1 | 	sub	fp, #20
07410     50 FD BF FD | 	call	#_fatfs_cc_check_fs
07414     F5 10 02 F6 | 	mov	local04, result1
07418     04 00 90 FD | 	jmp	#LR__1076
0741c                 | LR__1075
0741c     03 10 06 F6 | 	mov	local04, #3
07420                 | LR__1076
07420     08 13 02 F6 | 	mov	local05, local04
07424     00 0C 0E F2 | 	cmp	local02, #0 wz
07428     02 12 16 A2 |  if_e	cmp	local05, #2 wc
0742c     0C 00 90 8D |  if_c_and_z	jmp	#LR__1077
07430     01 0E 06 A1 |  if_e	add	local03, #1
07434     04 0E 16 A2 |  if_e	cmp	local03, #4 wc
07438     9C FF 9F 8D |  if_c_and_z	jmp	#LR__1074
0743c                 | LR__1077
0743c                 | ' 	return fmt;
0743c     09 EB 01 F6 | 	mov	result1, local05
07440                 | LR__1078
07440     A7 F0 03 F6 | 	mov	ptra, fp
07444     B2 00 A0 FD | 	call	#popregs_
07448                 | _fatfs_cc_find_volume_ret
07448     2D 00 64 FD | 	ret
0744c                 | 
0744c                 | _fatfs_cc_mount_volume
0744c     0B 4A 05 F6 | 	mov	COUNT_, #11
07450     A8 00 A0 FD | 	call	#pushregs_
07454     01 0B 02 F6 | 	mov	local01, arg02
07458     02 0D 02 F6 | 	mov	local02, arg03
0745c     05 01 68 FC | 	wrlong	#0, local01
07460     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
07464     F5 0E 02 F6 | 	mov	local03, result1
07468     00 0E 56 F2 | 	cmps	local03, #0 wc
0746c     0B EA 05 C6 |  if_b	mov	result1, #11
07470     3C 05 90 CD |  if_b	jmp	#LR__1090
07474     07 05 02 F6 | 	mov	arg03, local03
07478     02 04 66 F0 | 	shl	arg03, #2
0747c     F1 04 02 F1 | 	add	arg03, objptr
07480     02 11 0A FB | 	rdlong	local04, arg03 wz
07484     0C EA 05 A6 |  if_e	mov	result1, #12
07488     24 05 90 AD |  if_e	jmp	#LR__1090
0748c     05 11 62 FC | 	wrlong	local04, local01
07490     06 0D E2 F8 | 	getbyte	local02, local02, #0
07494     FE 0C 06 F5 | 	and	local02, #254
07498     08 05 CA FA | 	rdbyte	arg03, local04 wz
0749c     4C 00 90 AD |  if_e	jmp	#LR__1081
074a0     01 10 06 F1 | 	add	local04, #1
074a4     08 01 CA FA | 	rdbyte	arg01, local04 wz
074a8     01 10 86 F1 | 	sub	local04, #1
074ac     01 EA 05 56 |  if_ne	mov	result1, #1
074b0                 | ' 
074b0                 | ' 	return Stat;
074b0     01 00 00 AF 
074b4     20 E2 05 A1 |  if_e	add	objptr, ##544
074b8     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
074bc     01 00 00 AF 
074c0     20 E2 85 A1 |  if_e	sub	objptr, ##544
074c4     F5 04 E2 F8 | 	getbyte	arg03, result1, #0
074c8     01 04 CE F7 | 	test	arg03, #1 wz
074cc     1C 00 90 5D |  if_ne	jmp	#LR__1080
074d0     00 0C 0E F2 | 	cmp	local02, #0 wz
074d4     F5 EA E1 58 |  if_ne	getbyte	result1, result1, #0
074d8     04 EA CD 57 |  if_ne	test	result1, #4 wz
074dc                 | ' 				return FR_WRITE_PROTECTED;
074dc     0A EA 05 56 |  if_ne	mov	result1, #10
074e0     CC 04 90 5D |  if_ne	jmp	#LR__1090
074e4                 | ' 			}
074e4                 | ' 			return FR_OK;
074e4     00 EA 05 F6 | 	mov	result1, #0
074e8     C4 04 90 FD | 	jmp	#LR__1090
074ec                 | LR__1080
074ec                 | LR__1081
074ec     08 01 48 FC | 	wrbyte	#0, local04
074f0     01 10 06 F1 | 	add	local04, #1
074f4     08 0F 42 FC | 	wrbyte	local03, local04
074f8     08 01 C2 FA | 	rdbyte	arg01, local04
074fc     01 10 86 F1 | 	sub	local04, #1
07500     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
07504     F5 04 02 F6 | 	mov	arg03, result1
07508     02 13 E2 F8 | 	getbyte	local05, arg03, #0
0750c     01 12 CE F7 | 	test	local05, #1 wz
07510                 | ' 		return FR_NOT_READY;
07510     03 EA 05 56 |  if_ne	mov	result1, #3
07514     98 04 90 5D |  if_ne	jmp	#LR__1090
07518     00 0C 0E F2 | 	cmp	local02, #0 wz
0751c     02 13 02 56 |  if_ne	mov	local05, arg03
07520     09 13 E2 58 |  if_ne	getbyte	local05, local05, #0
07524     04 12 CE 57 |  if_ne	test	local05, #4 wz
07528                 | ' 		return FR_WRITE_PROTECTED;
07528     0A EA 05 56 |  if_ne	mov	result1, #10
0752c     80 04 90 5D |  if_ne	jmp	#LR__1090
07530     08 01 02 F6 | 	mov	arg01, local04
07534     00 02 06 F6 | 	mov	arg02, #0
07538     00 FE BF FD | 	call	#_fatfs_cc_find_volume
0753c     F5 00 02 F6 | 	mov	arg01, result1
07540     04 00 0E F2 | 	cmp	arg01, #4 wz
07544     01 EA 05 A6 |  if_e	mov	result1, #1
07548     64 04 90 AD |  if_e	jmp	#LR__1090
0754c     02 00 16 F2 | 	cmp	arg01, #2 wc
07550     0D EA 05 36 |  if_ae	mov	result1, #13
07554     58 04 90 3D |  if_ae	jmp	#LR__1090
07558     30 10 06 F1 | 	add	local04, #48
0755c     08 15 02 FB | 	rdlong	local06, local04
07560     04 10 06 F1 | 	add	local04, #4
07564     08 01 02 F6 | 	mov	arg01, local04
07568     34 10 86 F1 | 	sub	local04, #52
0756c     0B 00 06 F1 | 	add	arg01, #11
07570                 | ' {
07570                 | ' 
07570                 | ' 	return *((WORD*)ptr);
07570     00 EB E1 FA | 	rdword	result1, arg01
07574     01 00 00 FF 
07578     00 EA 0D F2 | 	cmp	result1, ##512 wz
0757c     0D EA 05 56 |  if_ne	mov	result1, #13
07580     2C 04 90 5D |  if_ne	jmp	#LR__1090
07584     34 10 06 F1 | 	add	local04, #52
07588     08 01 02 F6 | 	mov	arg01, local04
0758c     34 10 86 F1 | 	sub	local04, #52
07590     16 00 06 F1 | 	add	arg01, #22
07594                 | ' {
07594                 | ' 
07594                 | ' 	return *((WORD*)ptr);
07594     00 EB E1 FA | 	rdword	result1, arg01
07598     F5 16 0A F6 | 	mov	local07, result1 wz
0759c     18 00 90 5D |  if_ne	jmp	#LR__1082
075a0     34 10 06 F1 | 	add	local04, #52
075a4     08 01 02 F6 | 	mov	arg01, local04
075a8     34 10 86 F1 | 	sub	local04, #52
075ac     24 00 06 F1 | 	add	arg01, #36
075b0                 | ' {
075b0                 | ' 
075b0                 | ' 	return *((DWORD*)ptr);
075b0     00 EB 01 FB | 	rdlong	result1, arg01
075b4     F5 16 02 F6 | 	mov	local07, result1
075b8                 | LR__1082
075b8     1C 10 06 F1 | 	add	local04, #28
075bc     08 17 62 FC | 	wrlong	local07, local04
075c0     28 10 06 F1 | 	add	local04, #40
075c4     08 13 C2 FA | 	rdbyte	local05, local04
075c8     42 10 86 F1 | 	sub	local04, #66
075cc     08 13 42 FC | 	wrbyte	local05, local04
075d0     08 13 C2 FA | 	rdbyte	local05, local04
075d4     02 10 86 F1 | 	sub	local04, #2
075d8     01 12 0E F2 | 	cmp	local05, #1 wz
075dc     02 10 06 51 |  if_ne	add	local04, #2
075e0     08 13 C2 5A |  if_ne	rdbyte	local05, local04
075e4     02 10 86 51 |  if_ne	sub	local04, #2
075e8     02 12 0E 52 |  if_ne	cmp	local05, #2 wz
075ec     0D EA 05 56 |  if_ne	mov	result1, #13
075f0     BC 03 90 5D |  if_ne	jmp	#LR__1090
075f4     02 10 06 F1 | 	add	local04, #2
075f8     08 13 C2 FA | 	rdbyte	local05, local04
075fc     09 17 02 FD | 	qmul	local07, local05
07600     3F 10 06 F1 | 	add	local04, #63
07604     08 13 C2 FA | 	rdbyte	local05, local04
07608     37 10 86 F1 | 	sub	local04, #55
0760c     08 13 52 FC | 	wrword	local05, local04
07610     08 13 EA FA | 	rdword	local05, local04 wz
07614     0A 10 86 F1 | 	sub	local04, #10
07618     18 16 62 FD | 	getqx	local07
0761c     20 00 90 AD |  if_e	jmp	#LR__1083
07620     0A 10 06 F1 | 	add	local04, #10
07624     08 13 E2 FA | 	rdword	local05, local04
07628     09 0F 32 F9 | 	getword	local03, local05, #0
0762c     0A 10 86 F1 | 	sub	local04, #10
07630     09 13 32 F9 | 	getword	local05, local05, #0
07634     01 12 86 F1 | 	sub	local05, #1
07638     09 0F CA F7 | 	test	local03, local05 wz
0763c     08 00 90 AD |  if_e	jmp	#LR__1084
07640                 | LR__1083
07640     0D EA 05 F6 | 	mov	result1, #13
07644     68 03 90 FD | 	jmp	#LR__1090
07648                 | LR__1084
07648     34 10 06 F1 | 	add	local04, #52
0764c     08 01 02 F6 | 	mov	arg01, local04
07650     11 00 06 F1 | 	add	arg01, #17
07654                 | ' {
07654                 | ' 
07654                 | ' 	return *((WORD*)ptr);
07654     00 EB E1 FA | 	rdword	result1, arg01
07658     2C 10 86 F1 | 	sub	local04, #44
0765c     08 EB 51 FC | 	wrword	result1, local04
07660     08 13 E2 FA | 	rdword	local05, local04
07664     08 10 86 F1 | 	sub	local04, #8
07668     09 01 52 F6 | 	abs	arg01, local05 wc
0766c     00 01 42 F8 | 	getnib	arg01, arg01, #0
07670     00 01 8A F6 | 	negc	arg01, arg01 wz
07674     0D EA 05 56 |  if_ne	mov	result1, #13
07678     34 03 90 5D |  if_ne	jmp	#LR__1090
0767c     34 10 06 F1 | 	add	local04, #52
07680     08 01 02 F6 | 	mov	arg01, local04
07684     34 10 86 F1 | 	sub	local04, #52
07688     13 00 06 F1 | 	add	arg01, #19
0768c                 | ' {
0768c                 | ' 
0768c                 | ' 	return *((WORD*)ptr);
0768c     00 EB E1 FA | 	rdword	result1, arg01
07690     F5 18 0A F6 | 	mov	local08, result1 wz
07694     34 10 06 A1 |  if_e	add	local04, #52
07698     08 01 02 A6 |  if_e	mov	arg01, local04
0769c     34 10 86 A1 |  if_e	sub	local04, #52
076a0     20 00 06 A1 |  if_e	add	arg01, #32
076a4                 | ' {
076a4                 | ' 
076a4                 | ' 	return *((DWORD*)ptr);
076a4     00 19 02 AB |  if_e	rdlong	local08, arg01
076a8     34 10 06 F1 | 	add	local04, #52
076ac     08 01 02 F6 | 	mov	arg01, local04
076b0     34 10 86 F1 | 	sub	local04, #52
076b4     0E 00 06 F1 | 	add	arg01, #14
076b8                 | ' {
076b8                 | ' 
076b8                 | ' 	return *((WORD*)ptr);
076b8     00 EB E1 FA | 	rdword	result1, arg01
076bc     F5 00 02 F6 | 	mov	arg01, result1
076c0     00 13 02 F6 | 	mov	local05, arg01
076c4     0F 12 4E F7 | 	zerox	local05, #15 wz
076c8     0D EA 05 A6 |  if_e	mov	result1, #13
076cc     E0 02 90 AD |  if_e	jmp	#LR__1090
076d0     00 1B 32 F9 | 	getword	local09, arg01, #0
076d4     0B 1B 02 F1 | 	add	local09, local07
076d8     08 10 06 F1 | 	add	local04, #8
076dc     08 13 E2 FA | 	rdword	local05, local04
076e0     08 10 86 F1 | 	sub	local04, #8
076e4     09 13 52 F6 | 	abs	local05, local05 wc
076e8     04 12 46 F0 | 	shr	local05, #4
076ec     09 1B 82 F3 | 	sumc	local09, local05
076f0     0D 19 12 F2 | 	cmp	local08, local09 wc
076f4     0D EA 05 C6 |  if_b	mov	result1, #13
076f8     B4 02 90 CD |  if_b	jmp	#LR__1090
076fc     0D 19 82 F1 | 	sub	local08, local09
07700     0A 10 06 F1 | 	add	local04, #10
07704     08 13 E2 FA | 	rdword	local05, local04
07708     09 19 12 FD | 	qdiv	local08, local05
0770c     0A 10 86 F1 | 	sub	local04, #10
07710     18 12 62 FD | 	getqx	local05
07714     00 12 0E F2 | 	cmp	local05, #0 wz
07718     0D EA 05 A6 |  if_e	mov	result1, #13
0771c     90 02 90 AD |  if_e	jmp	#LR__1090
07720     00 1C 06 F6 | 	mov	local10, #0
07724     FF FF 07 FF 
07728     F6 13 16 F2 | 	cmp	local05, ##268435446 wc
0772c     03 1C 06 C6 |  if_b	mov	local10, #3
07730     7F 00 00 FF 
07734     F6 13 16 F2 | 	cmp	local05, ##65526 wc
07738     02 1C 06 C6 |  if_b	mov	local10, #2
0773c     07 00 00 FF 
07740     F6 13 16 F2 | 	cmp	local05, ##4086 wc
07744     01 1C 06 C6 |  if_b	mov	local10, #1
07748     00 1C 0E F2 | 	cmp	local10, #0 wz
0774c     0D EA 05 A6 |  if_e	mov	result1, #13
07750     5C 02 90 AD |  if_e	jmp	#LR__1090
07754     02 12 06 F1 | 	add	local05, #2
07758     18 10 06 F1 | 	add	local04, #24
0775c     08 13 62 FC | 	wrlong	local05, local04
07760     08 10 06 F1 | 	add	local04, #8
07764     08 15 62 FC | 	wrlong	local06, local04
07768     0A 13 02 F6 | 	mov	local05, local06
0776c     00 01 32 F9 | 	getword	arg01, arg01, #0
07770     00 13 02 F1 | 	add	local05, arg01
07774     04 10 06 F1 | 	add	local04, #4
07778     08 13 62 FC | 	wrlong	local05, local04
0777c     0A 13 02 F6 | 	mov	local05, local06
07780     0D 13 02 F1 | 	add	local05, local09
07784     08 10 06 F1 | 	add	local04, #8
07788     08 13 62 FC | 	wrlong	local05, local04
0778c     2C 10 86 F1 | 	sub	local04, #44
07790     03 1C 0E F2 | 	cmp	local10, #3 wz
07794     5C 00 90 5D |  if_ne	jmp	#LR__1085
07798     34 10 06 F1 | 	add	local04, #52
0779c     08 01 02 F6 | 	mov	arg01, local04
077a0     34 10 86 F1 | 	sub	local04, #52
077a4     2A 00 06 F1 | 	add	arg01, #42
077a8                 | ' {
077a8                 | ' 
077a8                 | ' 	return *((WORD*)ptr);
077a8     00 EB E9 FA | 	rdword	result1, arg01 wz
077ac     0D EA 05 56 |  if_ne	mov	result1, #13
077b0     FC 01 90 5D |  if_ne	jmp	#LR__1090
077b4     08 10 06 F1 | 	add	local04, #8
077b8     08 13 EA FA | 	rdword	local05, local04 wz
077bc     08 10 86 F1 | 	sub	local04, #8
077c0     0D EA 05 56 |  if_ne	mov	result1, #13
077c4     E8 01 90 5D |  if_ne	jmp	#LR__1090
077c8     34 10 06 F1 | 	add	local04, #52
077cc     08 01 02 F6 | 	mov	arg01, local04
077d0     2C 00 06 F1 | 	add	arg01, #44
077d4                 | ' {
077d4                 | ' 
077d4                 | ' 	return *((DWORD*)ptr);
077d4     00 EB 01 FB | 	rdlong	result1, arg01
077d8     0C 10 86 F1 | 	sub	local04, #12
077dc     08 EB 61 FC | 	wrlong	result1, local04
077e0     10 10 86 F1 | 	sub	local04, #16
077e4     08 1F 02 FB | 	rdlong	local11, local04
077e8     18 10 86 F1 | 	sub	local04, #24
077ec     02 1E 66 F0 | 	shl	local11, #2
077f0     6C 00 90 FD | 	jmp	#LR__1087
077f4                 | LR__1085
077f4     08 10 06 F1 | 	add	local04, #8
077f8     08 13 EA FA | 	rdword	local05, local04 wz
077fc     08 10 86 F1 | 	sub	local04, #8
07800     0D EA 05 A6 |  if_e	mov	result1, #13
07804     A8 01 90 AD |  if_e	jmp	#LR__1090
07808     24 10 06 F1 | 	add	local04, #36
0780c     08 13 02 FB | 	rdlong	local05, local04
07810     0B 13 02 F1 | 	add	local05, local07
07814     04 10 06 F1 | 	add	local04, #4
07818     08 13 62 FC | 	wrlong	local05, local04
0781c     28 10 86 F1 | 	sub	local04, #40
07820     02 1C 0E F2 | 	cmp	local10, #2 wz
07824     18 10 06 A1 |  if_e	add	local04, #24
07828     08 13 02 AB |  if_e	rdlong	local05, local04
0782c     18 10 86 A1 |  if_e	sub	local04, #24
07830     01 12 66 A0 |  if_e	shl	local05, #1
07834     24 00 90 AD |  if_e	jmp	#LR__1086
07838     18 10 06 F1 | 	add	local04, #24
0783c     08 1F 02 FB | 	rdlong	local11, local04
07840     0F 13 02 F6 | 	mov	local05, local11
07844     01 12 66 F0 | 	shl	local05, #1
07848     0F 13 02 F1 | 	add	local05, local11
0784c     01 12 46 F0 | 	shr	local05, #1
07850     18 10 86 F1 | 	sub	local04, #24
07854     01 1E 06 F5 | 	and	local11, #1
07858     0F 13 02 F1 | 	add	local05, local11
0785c                 | LR__1086
0785c     09 1F 02 F6 | 	mov	local11, local05
07860                 | LR__1087
07860     FF 1F 06 F1 | 	add	local11, #511
07864     09 1E 46 F0 | 	shr	local11, #9
07868     1C 10 06 F1 | 	add	local04, #28
0786c     08 05 02 FB | 	rdlong	arg03, local04
07870     1C 10 86 F1 | 	sub	local04, #28
07874     0F 05 12 F2 | 	cmp	arg03, local11 wc
07878     0D EA 05 C6 |  if_b	mov	result1, #13
0787c     30 01 90 CD |  if_b	jmp	#LR__1090
07880     14 10 06 F1 | 	add	local04, #20
07884     FF FF FF FF 
07888     08 FF 6B FC | 	wrlong	##-1, local04
0788c     04 10 86 F1 | 	sub	local04, #4
07890     FF FF FF FF 
07894     08 FF 6B FC | 	wrlong	##-1, local04
07898     0C 10 86 F1 | 	sub	local04, #12
0789c     08 01 49 FC | 	wrbyte	#128, local04
078a0     04 10 86 F1 | 	sub	local04, #4
078a4     03 1C 0E F2 | 	cmp	local10, #3 wz
078a8     D0 00 90 5D |  if_ne	jmp	#LR__1089
078ac     34 10 06 F1 | 	add	local04, #52
078b0     08 01 02 F6 | 	mov	arg01, local04
078b4     34 10 86 F1 | 	sub	local04, #52
078b8     30 00 06 F1 | 	add	arg01, #48
078bc                 | ' {
078bc                 | ' 
078bc                 | ' 	return *((WORD*)ptr);
078bc     00 EB E1 FA | 	rdword	result1, arg01
078c0     F5 12 32 F9 | 	getword	local05, result1, #0
078c4     01 12 0E F2 | 	cmp	local05, #1 wz
078c8     B0 00 90 5D |  if_ne	jmp	#LR__1089
078cc     01 14 06 F1 | 	add	local06, #1
078d0     08 01 02 F6 | 	mov	arg01, local04
078d4     0A 03 02 F6 | 	mov	arg02, local06
078d8     CC CD BF FD | 	call	#_fatfs_cc_move_window
078dc     00 EA 0D F2 | 	cmp	result1, #0 wz
078e0     98 00 90 5D |  if_ne	jmp	#LR__1089
078e4     04 10 06 F1 | 	add	local04, #4
078e8     08 01 48 FC | 	wrbyte	#0, local04
078ec     30 10 06 F1 | 	add	local04, #48
078f0     08 01 02 F6 | 	mov	arg01, local04
078f4     34 10 86 F1 | 	sub	local04, #52
078f8     FE 01 06 F1 | 	add	arg01, #510
078fc                 | ' {
078fc                 | ' 
078fc                 | ' 	return *((WORD*)ptr);
078fc     00 EB E1 FA | 	rdword	result1, arg01
07900     F5 12 32 F9 | 	getword	local05, result1, #0
07904     55 00 00 FF 
07908     55 12 0E F2 | 	cmp	local05, ##43605 wz
0790c     34 10 06 A1 |  if_e	add	local04, #52
07910     08 01 02 A6 |  if_e	mov	arg01, local04
07914     34 10 86 A1 |  if_e	sub	local04, #52
07918                 | ' {
07918                 | ' 
07918                 | ' 	return *((DWORD*)ptr);
07918     00 EB 01 AB |  if_e	rdlong	result1, arg01
0791c     A9 B0 20 AF 
07920     52 EA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
07924     54 00 90 5D |  if_ne	jmp	#LR__1088
07928     34 10 06 F1 | 	add	local04, #52
0792c     08 01 02 F6 | 	mov	arg01, local04
07930     34 10 86 F1 | 	sub	local04, #52
07934     E4 01 06 F1 | 	add	arg01, #484
07938                 | ' {
07938                 | ' 
07938                 | ' 	return *((DWORD*)ptr);
07938     00 EB 01 FB | 	rdlong	result1, arg01
0793c     B9 A0 30 FF 
07940     72 EA 0D F2 | 	cmp	result1, ##1631679090 wz
07944     34 00 90 5D |  if_ne	jmp	#LR__1088
07948     34 10 06 F1 | 	add	local04, #52
0794c     08 01 02 F6 | 	mov	arg01, local04
07950     E8 01 06 F1 | 	add	arg01, #488
07954                 | ' {
07954                 | ' 
07954                 | ' 	return *((DWORD*)ptr);
07954     00 EB 01 FB | 	rdlong	result1, arg01
07958     20 10 86 F1 | 	sub	local04, #32
0795c     08 EB 61 FC | 	wrlong	result1, local04
07960     20 10 06 F1 | 	add	local04, #32
07964     08 01 02 F6 | 	mov	arg01, local04
07968     EC 01 06 F1 | 	add	arg01, #492
0796c                 | ' {
0796c                 | ' 
0796c                 | ' 	return *((DWORD*)ptr);
0796c     00 EB 01 FB | 	rdlong	result1, arg01
07970     24 10 86 F1 | 	sub	local04, #36
07974     08 EB 61 FC | 	wrlong	result1, local04
07978     10 10 86 F1 | 	sub	local04, #16
0797c                 | LR__1088
0797c                 | LR__1089
0797c     08 1D 42 FC | 	wrbyte	local10, local04
07980     04 E2 05 F1 | 	add	objptr, #4
07984     F1 12 E2 FA | 	rdword	local05, objptr
07988     01 12 06 F1 | 	add	local05, #1
0798c     F1 12 52 FC | 	wrword	local05, objptr
07990     F1 1E E2 FA | 	rdword	local11, objptr
07994     06 10 06 F1 | 	add	local04, #6
07998     08 1F 52 FC | 	wrword	local11, local04
0799c     04 E2 05 F1 | 	add	objptr, #4
079a0     06 10 06 F1 | 	add	local04, #6
079a4     08 E3 61 FC | 	wrlong	objptr, local04
079a8                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
079a8                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
079a8                 | ' 			{
079a8                 | ' 
079a8                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
079a8                 | ' 
079a8                 | ' 
079a8                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
079a8                 | ' 
079a8                 | ' 			}
079a8                 | ' 		}
079a8                 | ' 
079a8                 | ' 
079a8                 | ' 	}
079a8                 | ' 
079a8                 | ' 	fs->fs_type = (BYTE)fmt;
079a8                 | ' 	fs->id = ++Fsid;
079a8                 | ' 
079a8                 | ' 	fs->lfnbuf = LfnBuf;
079a8                 | ' #line 3567 "ff.c"
079a8                 | ' 	return FR_OK;
079a8     00 EA 05 F6 | 	mov	result1, #0
079ac     08 E2 85 F1 | 	sub	objptr, #8
079b0                 | LR__1090
079b0     A7 F0 03 F6 | 	mov	ptra, fp
079b4     B2 00 A0 FD | 	call	#popregs_
079b8                 | _fatfs_cc_mount_volume_ret
079b8     2D 00 64 FD | 	ret
079bc                 | 
079bc                 | _fatfs_cc_validate
079bc     00 EF 09 F6 | 	mov	_var01, arg01 wz
079c0     09 F0 05 F6 | 	mov	_var02, #9
079c4     F7 F2 09 5B |  if_ne	rdlong	_var03, _var01 wz
079c8     F9 F4 C9 5A |  if_ne	rdbyte	_var04, _var03 wz
079cc     50 00 90 AD |  if_e	jmp	#LR__1100
079d0     04 EE 05 F1 | 	add	_var01, #4
079d4     F7 F4 E1 FA | 	rdword	_var04, _var01
079d8     04 EE 85 F1 | 	sub	_var01, #4
079dc     F7 00 02 FB | 	rdlong	arg01, _var01
079e0     06 00 06 F1 | 	add	arg01, #6
079e4     00 EB E1 FA | 	rdword	result1, arg01
079e8     F5 F4 09 F2 | 	cmp	_var04, result1 wz
079ec     30 00 90 5D |  if_ne	jmp	#LR__1100
079f0     F7 F4 01 FB | 	rdlong	_var04, _var01
079f4     01 F4 05 F1 | 	add	_var04, #1
079f8     FA 00 CA FA | 	rdbyte	arg01, _var04 wz
079fc     01 EA 05 56 |  if_ne	mov	result1, #1
07a00                 | ' 
07a00                 | ' 	return Stat;
07a00     01 00 00 AF 
07a04     20 E2 05 A1 |  if_e	add	objptr, ##544
07a08     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
07a0c     01 00 00 AF 
07a10     20 E2 85 A1 |  if_e	sub	objptr, ##544
07a14     F5 F2 E1 F8 | 	getbyte	_var03, result1, #0
07a18     01 F2 CD F7 | 	test	_var03, #1 wz
07a1c     00 F0 05 A6 |  if_e	mov	_var02, #0
07a20                 | LR__1100
07a20     00 F0 0D F2 | 	cmp	_var02, #0 wz
07a24     F7 F2 01 AB |  if_e	rdlong	_var03, _var01
07a28     00 F2 05 56 |  if_ne	mov	_var03, #0
07a2c     01 F3 61 FC | 	wrlong	_var03, arg02
07a30                 | ' 			res = FR_OK;
07a30                 | ' 		}
07a30                 | ' 
07a30                 | ' 	}
07a30                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
07a30                 | ' 	return res;
07a30     F8 EA 01 F6 | 	mov	result1, _var02
07a34                 | _fatfs_cc_validate_ret
07a34     2D 00 64 FD | 	ret
07a38                 | 
07a38                 | _fatfs_cc_f_mount
07a38     01 4A 05 F6 | 	mov	COUNT_, #1
07a3c     A8 00 A0 FD | 	call	#pushregs_
07a40     20 F0 07 F1 | 	add	ptra, #32
07a44     04 4E 05 F1 | 	add	fp, #4
07a48     A7 00 62 FC | 	wrlong	arg01, fp
07a4c     04 4E 05 F1 | 	add	fp, #4
07a50     A7 02 62 FC | 	wrlong	arg02, fp
07a54     04 4E 05 F1 | 	add	fp, #4
07a58     A7 04 42 FC | 	wrbyte	arg03, fp
07a5c     04 4E 85 F1 | 	sub	fp, #4
07a60     A7 04 02 FB | 	rdlong	arg03, fp
07a64     14 4E 05 F1 | 	add	fp, #20
07a68     A7 04 62 FC | 	wrlong	arg03, fp
07a6c     A7 00 02 F6 | 	mov	arg01, fp
07a70     1C 4E 85 F1 | 	sub	fp, #28
07a74     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
07a78     14 4E 05 F1 | 	add	fp, #20
07a7c     A7 EA 61 FC | 	wrlong	result1, fp
07a80     14 4E 85 F1 | 	sub	fp, #20
07a84     00 EA 55 F2 | 	cmps	result1, #0 wc
07a88     0B EA 05 C6 |  if_b	mov	result1, #11
07a8c     C0 00 90 CD |  if_b	jmp	#LR__1111
07a90     14 4E 05 F1 | 	add	fp, #20
07a94     A7 04 02 FB | 	rdlong	arg03, fp
07a98     02 04 66 F0 | 	shl	arg03, #2
07a9c     F1 04 02 F1 | 	add	arg03, objptr
07aa0     02 05 0A FB | 	rdlong	arg03, arg03 wz
07aa4     04 4E 85 F1 | 	sub	fp, #4
07aa8     A7 04 62 FC | 	wrlong	arg03, fp
07aac     10 4E 85 F1 | 	sub	fp, #16
07ab0     28 00 90 AD |  if_e	jmp	#LR__1110
07ab4     10 4E 05 F1 | 	add	fp, #16
07ab8     A7 04 02 FB | 	rdlong	arg03, fp
07abc     10 4E 85 F1 | 	sub	fp, #16
07ac0     01 04 06 F1 | 	add	arg03, #1
07ac4     02 01 C2 FA | 	rdbyte	arg01, arg03
07ac8     1C 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
07acc     10 4E 05 F1 | 	add	fp, #16
07ad0     A7 04 02 FB | 	rdlong	arg03, fp
07ad4     10 4E 85 F1 | 	sub	fp, #16
07ad8     02 01 48 FC | 	wrbyte	#0, arg03
07adc                 | LR__1110
07adc     04 4E 05 F1 | 	add	fp, #4
07ae0     A7 0A 0A FB | 	rdlong	local01, fp wz
07ae4     04 4E 85 F1 | 	sub	fp, #4
07ae8     04 4E 05 51 |  if_ne	add	fp, #4
07aec     A7 0A 02 5B |  if_ne	rdlong	local01, fp
07af0     04 4E 85 51 |  if_ne	sub	fp, #4
07af4     05 01 48 5C |  if_ne	wrbyte	#0, local01
07af8     14 4E 05 F1 | 	add	fp, #20
07afc     A7 0A 02 FB | 	rdlong	local01, fp
07b00     02 0A 66 F0 | 	shl	local01, #2
07b04     F1 0A 02 F1 | 	add	local01, objptr
07b08     10 4E 85 F1 | 	sub	fp, #16
07b0c     A7 04 02 FB | 	rdlong	arg03, fp
07b10     05 05 62 FC | 	wrlong	arg03, local01
07b14     08 4E 05 F1 | 	add	fp, #8
07b18     A7 0A CA FA | 	rdbyte	local01, fp wz
07b1c     0C 4E 85 F1 | 	sub	fp, #12
07b20     00 EA 05 A6 |  if_e	mov	result1, #0
07b24     28 00 90 AD |  if_e	jmp	#LR__1111
07b28     08 4E 05 F1 | 	add	fp, #8
07b2c     A7 00 02 F6 | 	mov	arg01, fp
07b30     04 4E 85 F1 | 	sub	fp, #4
07b34     A7 02 02 F6 | 	mov	arg02, fp
07b38     04 4E 85 F1 | 	sub	fp, #4
07b3c     00 04 06 F6 | 	mov	arg03, #0
07b40     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
07b44     18 4E 05 F1 | 	add	fp, #24
07b48     A7 EA 61 FC | 	wrlong	result1, fp
07b4c                 | ' 
07b4c                 | ' 	res = mount_volume(&path, &fs, 0);
07b4c                 | ' 	return res ;
07b4c     18 4E 85 F1 | 	sub	fp, #24
07b50                 | LR__1111
07b50     A7 F0 03 F6 | 	mov	ptra, fp
07b54     B2 00 A0 FD | 	call	#popregs_
07b58                 | _fatfs_cc_f_mount_ret
07b58     2D 00 64 FD | 	ret
07b5c                 | 
07b5c                 | _fatfs_cc_f_open
07b5c     02 4A 05 F6 | 	mov	COUNT_, #2
07b60     A8 00 A0 FD | 	call	#pushregs_
07b64     60 F0 07 F1 | 	add	ptra, #96
07b68     04 4E 05 F1 | 	add	fp, #4
07b6c     A7 00 62 FC | 	wrlong	arg01, fp
07b70     04 4E 05 F1 | 	add	fp, #4
07b74     A7 02 62 FC | 	wrlong	arg02, fp
07b78     04 4E 05 F1 | 	add	fp, #4
07b7c     A7 04 42 FC | 	wrbyte	arg03, fp
07b80     08 4E 85 F1 | 	sub	fp, #8
07b84     A7 06 0A FB | 	rdlong	arg04, fp wz
07b88     04 4E 85 F1 | 	sub	fp, #4
07b8c     09 EA 05 A6 |  if_e	mov	result1, #9
07b90     98 06 90 AD |  if_e	jmp	#LR__1137
07b94     0C 4E 05 F1 | 	add	fp, #12
07b98     A7 06 C2 FA | 	rdbyte	arg04, fp
07b9c     3F 06 06 F5 | 	and	arg04, #63
07ba0     A7 06 42 FC | 	wrbyte	arg04, fp
07ba4     04 4E 85 F1 | 	sub	fp, #4
07ba8     A7 00 02 F6 | 	mov	arg01, fp
07bac     3C 4E 05 F1 | 	add	fp, #60
07bb0     A7 02 02 F6 | 	mov	arg02, fp
07bb4     38 4E 85 F1 | 	sub	fp, #56
07bb8     A7 04 C2 FA | 	rdbyte	arg03, fp
07bbc     0C 4E 85 F1 | 	sub	fp, #12
07bc0     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
07bc4     10 4E 05 F1 | 	add	fp, #16
07bc8     A7 EA 61 FC | 	wrlong	result1, fp
07bcc     10 4E 85 F1 | 	sub	fp, #16
07bd0     00 EA 0D F2 | 	cmp	result1, #0 wz
07bd4     2C 06 90 5D |  if_ne	jmp	#LR__1136
07bd8     44 4E 05 F1 | 	add	fp, #68
07bdc     A7 06 02 FB | 	rdlong	arg04, fp
07be0     30 4E 85 F1 | 	sub	fp, #48
07be4     A7 06 62 FC | 	wrlong	arg04, fp
07be8     A7 00 02 F6 | 	mov	arg01, fp
07bec     0C 4E 85 F1 | 	sub	fp, #12
07bf0     A7 0A 02 FB | 	rdlong	local01, fp
07bf4     08 4E 85 F1 | 	sub	fp, #8
07bf8     05 03 02 F6 | 	mov	arg02, local01
07bfc     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
07c00     10 4E 05 F1 | 	add	fp, #16
07c04     A7 EA 61 FC | 	wrlong	result1, fp
07c08     10 4E 85 F1 | 	sub	fp, #16
07c0c     00 EA 0D F2 | 	cmp	result1, #0 wz
07c10     1C 00 90 5D |  if_ne	jmp	#LR__1120
07c14     3F 4E 05 F1 | 	add	fp, #63
07c18     A7 06 C2 FA | 	rdbyte	arg04, fp
07c1c     3F 4E 85 F1 | 	sub	fp, #63
07c20     80 06 CE F7 | 	test	arg04, #128 wz
07c24     10 4E 05 51 |  if_ne	add	fp, #16
07c28     A7 0C 68 5C |  if_ne	wrlong	#6, fp
07c2c     10 4E 85 51 |  if_ne	sub	fp, #16
07c30                 | LR__1120
07c30     0C 4E 05 F1 | 	add	fp, #12
07c34     A7 06 C2 FA | 	rdbyte	arg04, fp
07c38     0C 4E 85 F1 | 	sub	fp, #12
07c3c     1C 06 CE F7 | 	test	arg04, #28 wz
07c40     F0 01 90 AD |  if_e	jmp	#LR__1125
07c44     10 4E 05 F1 | 	add	fp, #16
07c48     A7 0A 0A FB | 	rdlong	local01, fp wz
07c4c     10 4E 85 F1 | 	sub	fp, #16
07c50     48 00 90 AD |  if_e	jmp	#LR__1122
07c54     10 4E 05 F1 | 	add	fp, #16
07c58     A7 06 02 FB | 	rdlong	arg04, fp
07c5c     10 4E 85 F1 | 	sub	fp, #16
07c60     04 06 0E F2 | 	cmp	arg04, #4 wz
07c64     1C 00 90 5D |  if_ne	jmp	#LR__1121
07c68     14 4E 05 F1 | 	add	fp, #20
07c6c     A7 00 02 F6 | 	mov	arg01, fp
07c70     14 4E 85 F1 | 	sub	fp, #20
07c74     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
07c78     10 4E 05 F1 | 	add	fp, #16
07c7c     A7 EA 61 FC | 	wrlong	result1, fp
07c80     10 4E 85 F1 | 	sub	fp, #16
07c84                 | LR__1121
07c84     0C 4E 05 F1 | 	add	fp, #12
07c88     A7 0A C2 FA | 	rdbyte	local01, fp
07c8c     08 0A 46 F5 | 	or	local01, #8
07c90     A7 0A 42 FC | 	wrbyte	local01, fp
07c94     0C 4E 85 F1 | 	sub	fp, #12
07c98     3C 00 90 FD | 	jmp	#LR__1124
07c9c                 | LR__1122
07c9c     1A 4E 05 F1 | 	add	fp, #26
07ca0     A7 0A C2 FA | 	rdbyte	local01, fp
07ca4     1A 4E 85 F1 | 	sub	fp, #26
07ca8     11 0A CE F7 | 	test	local01, #17 wz
07cac     10 4E 05 51 |  if_ne	add	fp, #16
07cb0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
07cb4     10 4E 85 51 |  if_ne	sub	fp, #16
07cb8     1C 00 90 5D |  if_ne	jmp	#LR__1123
07cbc     0C 4E 05 F1 | 	add	fp, #12
07cc0     A7 0A C2 FA | 	rdbyte	local01, fp
07cc4     0C 4E 85 F1 | 	sub	fp, #12
07cc8     04 0A CE F7 | 	test	local01, #4 wz
07ccc     10 4E 05 51 |  if_ne	add	fp, #16
07cd0     A7 10 68 5C |  if_ne	wrlong	#8, fp
07cd4     10 4E 85 51 |  if_ne	sub	fp, #16
07cd8                 | LR__1123
07cd8                 | LR__1124
07cd8     10 4E 05 F1 | 	add	fp, #16
07cdc     A7 0A 0A FB | 	rdlong	local01, fp wz
07ce0     10 4E 85 F1 | 	sub	fp, #16
07ce4     A8 01 90 5D |  if_ne	jmp	#LR__1128
07ce8     0C 4E 05 F1 | 	add	fp, #12
07cec     A7 0A C2 FA | 	rdbyte	local01, fp
07cf0     0C 4E 85 F1 | 	sub	fp, #12
07cf4     08 0A CE F7 | 	test	local01, #8 wz
07cf8     94 01 90 AD |  if_e	jmp	#LR__1128
07cfc     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
07d00     54 4E 05 F1 | 	add	fp, #84
07d04     A7 EA 61 FC | 	wrlong	result1, fp
07d08     24 4E 85 F1 | 	sub	fp, #36
07d0c     A7 00 02 FB | 	rdlong	arg01, fp
07d10     0E 00 06 F1 | 	add	arg01, #14
07d14     00 EB 61 FC | 	wrlong	result1, arg01
07d18     A7 00 02 FB | 	rdlong	arg01, fp
07d1c     16 00 06 F1 | 	add	arg01, #22
07d20     24 4E 05 F1 | 	add	fp, #36
07d24     A7 02 02 FB | 	rdlong	arg02, fp
07d28     00 03 62 FC | 	wrlong	arg02, arg01
07d2c     10 4E 85 F1 | 	sub	fp, #16
07d30     A7 00 02 FB | 	rdlong	arg01, fp
07d34     14 4E 85 F1 | 	sub	fp, #20
07d38     A7 02 02 FB | 	rdlong	arg02, fp
07d3c     30 4E 85 F1 | 	sub	fp, #48
07d40     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
07d44     48 4E 05 F1 | 	add	fp, #72
07d48     A7 EA 61 FC | 	wrlong	result1, fp
07d4c     18 4E 85 F1 | 	sub	fp, #24
07d50     A7 0A 02 FB | 	rdlong	local01, fp
07d54     0B 0A 06 F1 | 	add	local01, #11
07d58     05 41 48 FC | 	wrbyte	#32, local01
07d5c     14 4E 05 F1 | 	add	fp, #20
07d60     A7 00 02 FB | 	rdlong	arg01, fp
07d64     14 4E 85 F1 | 	sub	fp, #20
07d68     A7 02 02 FB | 	rdlong	arg02, fp
07d6c     30 4E 85 F1 | 	sub	fp, #48
07d70     00 04 06 F6 | 	mov	arg03, #0
07d74     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
07d78     30 4E 05 F1 | 	add	fp, #48
07d7c     A7 00 02 FB | 	rdlong	arg01, fp
07d80     1C 00 06 F1 | 	add	arg01, #28
07d84     00 01 68 FC | 	wrlong	#0, arg01
07d88     14 4E 05 F1 | 	add	fp, #20
07d8c     A7 0A 02 FB | 	rdlong	local01, fp
07d90     03 0A 06 F1 | 	add	local01, #3
07d94     05 03 48 FC | 	wrbyte	#1, local01
07d98     04 4E 05 F1 | 	add	fp, #4
07d9c     A7 0A 0A FB | 	rdlong	local01, fp wz
07da0     48 4E 85 F1 | 	sub	fp, #72
07da4     E8 00 90 AD |  if_e	jmp	#LR__1128
07da8     44 4E 05 F1 | 	add	fp, #68
07dac     A7 0A 02 FB | 	rdlong	local01, fp
07db0     30 0A 06 F1 | 	add	local01, #48
07db4     05 0B 02 FB | 	rdlong	local01, local01
07db8     14 4E 05 F1 | 	add	fp, #20
07dbc     A7 0A 62 FC | 	wrlong	local01, fp
07dc0     44 4E 85 F1 | 	sub	fp, #68
07dc4     A7 00 02 F6 | 	mov	arg01, fp
07dc8     34 4E 05 F1 | 	add	fp, #52
07dcc     A7 02 02 FB | 	rdlong	arg02, fp
07dd0     48 4E 85 F1 | 	sub	fp, #72
07dd4     00 04 06 F6 | 	mov	arg03, #0
07dd8     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
07ddc     10 4E 05 F1 | 	add	fp, #16
07de0     A7 EA 61 FC | 	wrlong	result1, fp
07de4     10 4E 85 F1 | 	sub	fp, #16
07de8     00 EA 0D F2 | 	cmp	result1, #0 wz
07dec     A0 00 90 5D |  if_ne	jmp	#LR__1128
07df0     44 4E 05 F1 | 	add	fp, #68
07df4     A7 00 02 FB | 	rdlong	arg01, fp
07df8     14 4E 05 F1 | 	add	fp, #20
07dfc     A7 02 02 FB | 	rdlong	arg02, fp
07e00     58 4E 85 F1 | 	sub	fp, #88
07e04     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
07e08     10 4E 05 F1 | 	add	fp, #16
07e0c     A7 EA 61 FC | 	wrlong	result1, fp
07e10     34 4E 05 F1 | 	add	fp, #52
07e14     A7 06 02 FB | 	rdlong	arg04, fp
07e18     04 4E 05 F1 | 	add	fp, #4
07e1c     A7 0A 02 FB | 	rdlong	local01, fp
07e20     48 4E 85 F1 | 	sub	fp, #72
07e24     01 0A 86 F1 | 	sub	local01, #1
07e28     10 06 06 F1 | 	add	arg04, #16
07e2c     03 0B 62 FC | 	wrlong	local01, arg04
07e30     5C 00 90 FD | 	jmp	#LR__1128
07e34                 | LR__1125
07e34     10 4E 05 F1 | 	add	fp, #16
07e38     A7 06 0A FB | 	rdlong	arg04, fp wz
07e3c     10 4E 85 F1 | 	sub	fp, #16
07e40     4C 00 90 5D |  if_ne	jmp	#LR__1127
07e44     1A 4E 05 F1 | 	add	fp, #26
07e48     A7 06 C2 FA | 	rdbyte	arg04, fp
07e4c     1A 4E 85 F1 | 	sub	fp, #26
07e50     10 06 CE F7 | 	test	arg04, #16 wz
07e54     10 4E 05 51 |  if_ne	add	fp, #16
07e58     A7 08 68 5C |  if_ne	wrlong	#4, fp
07e5c     10 4E 85 51 |  if_ne	sub	fp, #16
07e60     2C 00 90 5D |  if_ne	jmp	#LR__1126
07e64     0C 4E 05 F1 | 	add	fp, #12
07e68     A7 06 C2 FA | 	rdbyte	arg04, fp
07e6c     0C 4E 85 F1 | 	sub	fp, #12
07e70     02 06 CE F7 | 	test	arg04, #2 wz
07e74     1A 4E 05 51 |  if_ne	add	fp, #26
07e78     A7 0A C2 5A |  if_ne	rdbyte	local01, fp
07e7c     1A 4E 85 51 |  if_ne	sub	fp, #26
07e80     01 0A CE 57 |  if_ne	test	local01, #1 wz
07e84     10 4E 05 51 |  if_ne	add	fp, #16
07e88     A7 0E 68 5C |  if_ne	wrlong	#7, fp
07e8c     10 4E 85 51 |  if_ne	sub	fp, #16
07e90                 | LR__1126
07e90                 | LR__1127
07e90                 | LR__1128
07e90     10 4E 05 F1 | 	add	fp, #16
07e94     A7 0A 0A FB | 	rdlong	local01, fp wz
07e98     10 4E 85 F1 | 	sub	fp, #16
07e9c     60 00 90 5D |  if_ne	jmp	#LR__1129
07ea0     0C 4E 05 F1 | 	add	fp, #12
07ea4     A7 0C C2 FA | 	rdbyte	local02, fp
07ea8     0C 4E 85 F1 | 	sub	fp, #12
07eac     08 0C CE F7 | 	test	local02, #8 wz
07eb0     0C 4E 05 51 |  if_ne	add	fp, #12
07eb4     A7 0C C2 5A |  if_ne	rdbyte	local02, fp
07eb8     40 0C 46 55 |  if_ne	or	local02, #64
07ebc     A7 0C 42 5C |  if_ne	wrbyte	local02, fp
07ec0     0C 4E 85 51 |  if_ne	sub	fp, #12
07ec4     04 4E 05 F1 | 	add	fp, #4
07ec8     A7 0C 02 FB | 	rdlong	local02, fp
07ecc     40 4E 05 F1 | 	add	fp, #64
07ed0     A7 0A 02 FB | 	rdlong	local01, fp
07ed4     30 0A 06 F1 | 	add	local01, #48
07ed8     05 0B 02 FB | 	rdlong	local01, local01
07edc     20 0C 06 F1 | 	add	local02, #32
07ee0     06 0B 62 FC | 	wrlong	local01, local02
07ee4     40 4E 85 F1 | 	sub	fp, #64
07ee8     A7 0C 02 FB | 	rdlong	local02, fp
07eec     2C 4E 05 F1 | 	add	fp, #44
07ef0     A7 0A 02 FB | 	rdlong	local01, fp
07ef4     30 4E 85 F1 | 	sub	fp, #48
07ef8     24 0C 06 F1 | 	add	local02, #36
07efc     06 0B 62 FC | 	wrlong	local01, local02
07f00                 | LR__1129
07f00     10 4E 05 F1 | 	add	fp, #16
07f04     A7 0C 0A FB | 	rdlong	local02, fp wz
07f08     10 4E 85 F1 | 	sub	fp, #16
07f0c     F4 02 90 5D |  if_ne	jmp	#LR__1135
07f10     04 4E 05 F1 | 	add	fp, #4
07f14     A7 0C 02 FB | 	rdlong	local02, fp
07f18     40 4E 05 F1 | 	add	fp, #64
07f1c     A7 00 02 FB | 	rdlong	arg01, fp
07f20     14 4E 85 F1 | 	sub	fp, #20
07f24     A7 02 02 FB | 	rdlong	arg02, fp
07f28     30 4E 85 F1 | 	sub	fp, #48
07f2c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
07f30     08 0C 06 F1 | 	add	local02, #8
07f34     06 EB 61 FC | 	wrlong	result1, local02
07f38     04 4E 05 F1 | 	add	fp, #4
07f3c     A7 0C 02 FB | 	rdlong	local02, fp
07f40     2C 4E 05 F1 | 	add	fp, #44
07f44     A7 00 02 FB | 	rdlong	arg01, fp
07f48     1C 00 06 F1 | 	add	arg01, #28
07f4c                 | ' {
07f4c                 | ' 
07f4c                 | ' 	return *((DWORD*)ptr);
07f4c     00 EB 01 FB | 	rdlong	result1, arg01
07f50     0C 0C 06 F1 | 	add	local02, #12
07f54     06 EB 61 FC | 	wrlong	result1, local02
07f58     2C 4E 85 F1 | 	sub	fp, #44
07f5c     A7 0C 02 FB | 	rdlong	local02, fp
07f60     40 4E 05 F1 | 	add	fp, #64
07f64     A7 0A 02 FB | 	rdlong	local01, fp
07f68     06 0B 62 FC | 	wrlong	local01, local02
07f6c     40 4E 85 F1 | 	sub	fp, #64
07f70     A7 0C 02 FB | 	rdlong	local02, fp
07f74     40 4E 05 F1 | 	add	fp, #64
07f78     A7 0A 02 FB | 	rdlong	local01, fp
07f7c     06 0A 06 F1 | 	add	local01, #6
07f80     05 0B E2 FA | 	rdword	local01, local01
07f84     04 0C 06 F1 | 	add	local02, #4
07f88     06 0B 52 FC | 	wrword	local01, local02
07f8c     40 4E 85 F1 | 	sub	fp, #64
07f90     A7 0C 02 FB | 	rdlong	local02, fp
07f94     08 4E 05 F1 | 	add	fp, #8
07f98     A7 0A C2 FA | 	rdbyte	local01, fp
07f9c     10 0C 06 F1 | 	add	local02, #16
07fa0     06 0B 42 FC | 	wrbyte	local01, local02
07fa4     08 4E 85 F1 | 	sub	fp, #8
07fa8     A7 0C 02 FB | 	rdlong	local02, fp
07fac     11 0C 06 F1 | 	add	local02, #17
07fb0     06 01 48 FC | 	wrbyte	#0, local02
07fb4     A7 0C 02 FB | 	rdlong	local02, fp
07fb8     1C 0C 06 F1 | 	add	local02, #28
07fbc     06 01 68 FC | 	wrlong	#0, local02
07fc0     A7 0C 02 FB | 	rdlong	local02, fp
07fc4     14 0C 06 F1 | 	add	local02, #20
07fc8     06 01 68 FC | 	wrlong	#0, local02
07fcc     A7 00 02 FB | 	rdlong	arg01, fp
07fd0     04 4E 85 F1 | 	sub	fp, #4
07fd4     28 00 06 F1 | 	add	arg01, #40
07fd8     00 02 06 F6 | 	mov	arg02, #0
07fdc     09 04 C6 F9 | 	decod	arg03, #9
07fe0     98 00 A0 FD | 	call	#\builtin_bytefill_
07fe4     0C 4E 05 F1 | 	add	fp, #12
07fe8     A7 0C C2 FA | 	rdbyte	local02, fp
07fec     0C 4E 85 F1 | 	sub	fp, #12
07ff0     20 0C CE F7 | 	test	local02, #32 wz
07ff4     0C 02 90 AD |  if_e	jmp	#LR__1134
07ff8     04 4E 05 F1 | 	add	fp, #4
07ffc     A7 0A 02 FB | 	rdlong	local01, fp
08000     04 4E 85 F1 | 	sub	fp, #4
08004     0C 0A 06 F1 | 	add	local01, #12
08008     05 0D 02 FB | 	rdlong	local02, local01
0800c     01 0C 16 F2 | 	cmp	local02, #1 wc
08010     F0 01 90 CD |  if_b	jmp	#LR__1134
08014     04 4E 05 F1 | 	add	fp, #4
08018     A7 0A 02 FB | 	rdlong	local01, fp
0801c     05 0D 02 F6 | 	mov	local02, local01
08020     0C 0A 06 F1 | 	add	local01, #12
08024     05 0B 02 FB | 	rdlong	local01, local01
08028     14 0C 06 F1 | 	add	local02, #20
0802c     06 0B 62 FC | 	wrlong	local01, local02
08030     40 4E 05 F1 | 	add	fp, #64
08034     A7 0C 02 FB | 	rdlong	local02, fp
08038     0A 0C 06 F1 | 	add	local02, #10
0803c     06 0D E2 FA | 	rdword	local02, local02
08040     09 0C 66 F0 | 	shl	local02, #9
08044     08 4E 05 F1 | 	add	fp, #8
08048     A7 0C 62 FC | 	wrlong	local02, fp
0804c     48 4E 85 F1 | 	sub	fp, #72
08050     A7 0C 02 FB | 	rdlong	local02, fp
08054     08 0C 06 F1 | 	add	local02, #8
08058     06 0B 02 FB | 	rdlong	local01, local02
0805c     4C 4E 05 F1 | 	add	fp, #76
08060     A7 0A 62 FC | 	wrlong	local01, fp
08064                 | ' 				fp->fptr = fp->obj.objsize;
08064                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
08064                 | ' 				clst = fp->obj.sclust;
08064                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
08064     4C 4E 85 F1 | 	sub	fp, #76
08068     A7 0C 02 FB | 	rdlong	local02, fp
0806c     0C 0C 06 F1 | 	add	local02, #12
08070     06 0B 02 FB | 	rdlong	local01, local02
08074     58 4E 05 F1 | 	add	fp, #88
08078     A7 0A 62 FC | 	wrlong	local01, fp
0807c     5C 4E 85 F1 | 	sub	fp, #92
08080                 | LR__1130
08080     10 4E 05 F1 | 	add	fp, #16
08084     A7 0C 0A FB | 	rdlong	local02, fp wz
08088     10 4E 85 F1 | 	sub	fp, #16
0808c     94 00 90 5D |  if_ne	jmp	#LR__1131
08090     5C 4E 05 F1 | 	add	fp, #92
08094     A7 0C 02 FB | 	rdlong	local02, fp
08098     10 4E 85 F1 | 	sub	fp, #16
0809c     A7 0A 02 FB | 	rdlong	local01, fp
080a0     4C 4E 85 F1 | 	sub	fp, #76
080a4     05 0D 1A F2 | 	cmp	local02, local01 wcz
080a8     78 00 90 ED |  if_be	jmp	#LR__1131
080ac     04 4E 05 F1 | 	add	fp, #4
080b0     A7 00 02 FB | 	rdlong	arg01, fp
080b4     4C 4E 05 F1 | 	add	fp, #76
080b8     A7 02 02 FB | 	rdlong	arg02, fp
080bc     50 4E 85 F1 | 	sub	fp, #80
080c0     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
080c4     50 4E 05 F1 | 	add	fp, #80
080c8     A7 EA 61 FC | 	wrlong	result1, fp
080cc     50 4E 85 F1 | 	sub	fp, #80
080d0     02 EA 15 F2 | 	cmp	result1, #2 wc
080d4     10 4E 05 C1 |  if_b	add	fp, #16
080d8     A7 04 68 CC |  if_b	wrlong	#2, fp
080dc     10 4E 85 C1 |  if_b	sub	fp, #16
080e0     50 4E 05 F1 | 	add	fp, #80
080e4     A7 0C 02 FB | 	rdlong	local02, fp
080e8     50 4E 85 F1 | 	sub	fp, #80
080ec     FF FF 7F FF 
080f0     FF 0D 0E F2 | 	cmp	local02, ##-1 wz
080f4     10 4E 05 A1 |  if_e	add	fp, #16
080f8     A7 02 68 AC |  if_e	wrlong	#1, fp
080fc     10 4E 85 A1 |  if_e	sub	fp, #16
08100     5C 4E 05 F1 | 	add	fp, #92
08104     A7 0C 02 FB | 	rdlong	local02, fp
08108     10 4E 85 F1 | 	sub	fp, #16
0810c     A7 0A 02 FB | 	rdlong	local01, fp
08110     05 0D 82 F1 | 	sub	local02, local01
08114     10 4E 05 F1 | 	add	fp, #16
08118     A7 0C 62 FC | 	wrlong	local02, fp
0811c     5C 4E 85 F1 | 	sub	fp, #92
08120     5C FF 9F FD | 	jmp	#LR__1130
08124                 | LR__1131
08124     04 4E 05 F1 | 	add	fp, #4
08128     A7 0C 02 FB | 	rdlong	local02, fp
0812c     4C 4E 05 F1 | 	add	fp, #76
08130     A7 0A 02 FB | 	rdlong	local01, fp
08134     18 0C 06 F1 | 	add	local02, #24
08138     06 0B 62 FC | 	wrlong	local01, local02
0813c     40 4E 85 F1 | 	sub	fp, #64
08140     A7 0C 0A FB | 	rdlong	local02, fp wz
08144     10 4E 85 F1 | 	sub	fp, #16
08148     B8 00 90 5D |  if_ne	jmp	#LR__1133
0814c     5C 4E 05 F1 | 	add	fp, #92
08150     A7 0A 02 FB | 	rdlong	local01, fp
08154     5C 4E 85 F1 | 	sub	fp, #92
08158     FF 0B CE F7 | 	test	local01, #511 wz
0815c     A4 00 90 AD |  if_e	jmp	#LR__1133
08160     44 4E 05 F1 | 	add	fp, #68
08164     A7 00 02 FB | 	rdlong	arg01, fp
08168     0C 4E 05 F1 | 	add	fp, #12
0816c     A7 02 02 FB | 	rdlong	arg02, fp
08170     50 4E 85 F1 | 	sub	fp, #80
08174     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
08178     58 4E 05 F1 | 	add	fp, #88
0817c     A7 EA 61 FC | 	wrlong	result1, fp
08180     00 EA 4D F2 | 	cmps	result1, #0 wz
08184     58 4E 85 F1 | 	sub	fp, #88
08188     10 4E 05 A1 |  if_e	add	fp, #16
0818c     A7 04 68 AC |  if_e	wrlong	#2, fp
08190     10 4E 85 A1 |  if_e	sub	fp, #16
08194     6C 00 90 AD |  if_e	jmp	#LR__1132
08198     04 4E 05 F1 | 	add	fp, #4
0819c     A7 0C 02 FB | 	rdlong	local02, fp
081a0     54 4E 05 F1 | 	add	fp, #84
081a4     A7 0A 02 FB | 	rdlong	local01, fp
081a8     04 4E 05 F1 | 	add	fp, #4
081ac     A7 06 02 FB | 	rdlong	arg04, fp
081b0     09 06 46 F0 | 	shr	arg04, #9
081b4     03 0B 02 F1 | 	add	local01, arg04
081b8     1C 0C 06 F1 | 	add	local02, #28
081bc     06 0B 62 FC | 	wrlong	local01, local02
081c0     18 4E 85 F1 | 	sub	fp, #24
081c4     A7 0C 02 FB | 	rdlong	local02, fp
081c8     01 0C 06 F1 | 	add	local02, #1
081cc     06 01 C2 FA | 	rdbyte	arg01, local02
081d0     40 4E 85 F1 | 	sub	fp, #64
081d4     A7 0C 02 FB | 	rdlong	local02, fp
081d8     06 03 02 F6 | 	mov	arg02, local02
081dc     28 02 06 F1 | 	add	arg02, #40
081e0     04 4E 85 F1 | 	sub	fp, #4
081e4     1C 0C 06 F1 | 	add	local02, #28
081e8     06 05 02 FB | 	rdlong	arg03, local02
081ec     01 06 06 F6 | 	mov	arg04, #1
081f0     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
081f4     00 EA 0D F2 | 	cmp	result1, #0 wz
081f8     10 4E 05 51 |  if_ne	add	fp, #16
081fc     A7 02 68 5C |  if_ne	wrlong	#1, fp
08200     10 4E 85 51 |  if_ne	sub	fp, #16
08204                 | LR__1132
08204                 | LR__1133
08204                 | LR__1134
08204                 | LR__1135
08204                 | LR__1136
08204     10 4E 05 F1 | 	add	fp, #16
08208     A7 0C 0A FB | 	rdlong	local02, fp wz
0820c     10 4E 85 F1 | 	sub	fp, #16
08210     04 4E 05 51 |  if_ne	add	fp, #4
08214     A7 0C 02 5B |  if_ne	rdlong	local02, fp
08218     04 4E 85 51 |  if_ne	sub	fp, #4
0821c     06 01 68 5C |  if_ne	wrlong	#0, local02
08220                 | ' 
08220                 | ' 	return res ;
08220     10 4E 05 F1 | 	add	fp, #16
08224     A7 EA 01 FB | 	rdlong	result1, fp
08228     10 4E 85 F1 | 	sub	fp, #16
0822c                 | LR__1137
0822c     A7 F0 03 F6 | 	mov	ptra, fp
08230     B2 00 A0 FD | 	call	#popregs_
08234                 | _fatfs_cc_f_open_ret
08234     2D 00 64 FD | 	ret
08238                 | 
08238                 | _fatfs_cc_f_read
08238     0E 4A 05 F6 | 	mov	COUNT_, #14
0823c     A8 00 A0 FD | 	call	#pushregs_
08240     38 F0 07 F1 | 	add	ptra, #56
08244     04 4E 05 F1 | 	add	fp, #4
08248     A7 00 62 FC | 	wrlong	arg01, fp
0824c     04 4E 05 F1 | 	add	fp, #4
08250     A7 02 62 FC | 	wrlong	arg02, fp
08254     04 4E 05 F1 | 	add	fp, #4
08258     A7 04 62 FC | 	wrlong	arg03, fp
0825c     04 4E 05 F1 | 	add	fp, #4
08260     A7 06 62 FC | 	wrlong	arg04, fp
08264     08 4E 85 F1 | 	sub	fp, #8
08268     A7 EA 01 FB | 	rdlong	result1, fp
0826c     2C 4E 05 F1 | 	add	fp, #44
08270     A7 EA 61 FC | 	wrlong	result1, fp
08274     24 4E 85 F1 | 	sub	fp, #36
08278     A7 EA 01 FB | 	rdlong	result1, fp
0827c     F5 00 68 FC | 	wrlong	#0, result1
08280     0C 4E 85 F1 | 	sub	fp, #12
08284     A7 00 02 FB | 	rdlong	arg01, fp
08288     14 4E 05 F1 | 	add	fp, #20
0828c     A7 02 02 F6 | 	mov	arg02, fp
08290     18 4E 85 F1 | 	sub	fp, #24
08294     24 F7 BF FD | 	call	#_fatfs_cc_validate
08298     14 4E 05 F1 | 	add	fp, #20
0829c     A7 EA 61 FC | 	wrlong	result1, fp
082a0     00 EA 4D F2 | 	cmps	result1, #0 wz
082a4     14 4E 85 F1 | 	sub	fp, #20
082a8     20 00 90 5D |  if_ne	jmp	#LR__1140
082ac     04 4E 05 F1 | 	add	fp, #4
082b0     A7 02 02 FB | 	rdlong	arg02, fp
082b4     11 02 06 F1 | 	add	arg02, #17
082b8     01 03 CA FA | 	rdbyte	arg02, arg02 wz
082bc     10 4E 05 F1 | 	add	fp, #16
082c0     A7 02 62 FC | 	wrlong	arg02, fp
082c4     14 4E 85 F1 | 	sub	fp, #20
082c8     10 00 90 AD |  if_e	jmp	#LR__1141
082cc                 | LR__1140
082cc     14 4E 05 F1 | 	add	fp, #20
082d0     A7 EA 01 FB | 	rdlong	result1, fp
082d4     14 4E 85 F1 | 	sub	fp, #20
082d8     EC 05 90 FD | 	jmp	#LR__1160
082dc                 | LR__1141
082dc     04 4E 05 F1 | 	add	fp, #4
082e0     A7 06 02 FB | 	rdlong	arg04, fp
082e4     04 4E 85 F1 | 	sub	fp, #4
082e8     10 06 06 F1 | 	add	arg04, #16
082ec     03 07 C2 FA | 	rdbyte	arg04, arg04
082f0     01 06 CE F7 | 	test	arg04, #1 wz
082f4     07 EA 05 A6 |  if_e	mov	result1, #7
082f8     CC 05 90 AD |  if_e	jmp	#LR__1160
082fc     04 4E 05 F1 | 	add	fp, #4
08300     A7 0A 02 FB | 	rdlong	local01, fp
08304     05 0D 02 F6 | 	mov	local02, local01
08308     0C 0C 06 F1 | 	add	local02, #12
0830c     06 0F 02 FB | 	rdlong	local03, local02
08310     14 0A 06 F1 | 	add	local01, #20
08314     05 0B 02 FB | 	rdlong	local01, local01
08318     05 0F 82 F1 | 	sub	local03, local01
0831c     20 4E 05 F1 | 	add	fp, #32
08320     A7 0E 62 FC | 	wrlong	local03, fp
08324     18 4E 85 F1 | 	sub	fp, #24
08328     A7 10 02 FB | 	rdlong	local04, fp
0832c     0C 4E 85 F1 | 	sub	fp, #12
08330     07 11 1A F2 | 	cmp	local04, local03 wcz
08334     24 4E 05 11 |  if_a	add	fp, #36
08338     A7 10 02 1B |  if_a	rdlong	local04, fp
0833c     18 4E 85 11 |  if_a	sub	fp, #24
08340     A7 10 62 1C |  if_a	wrlong	local04, fp
08344     0C 4E 85 11 |  if_a	sub	fp, #12
08348                 | ' 
08348                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
08348                 | LR__1142
08348     0C 4E 05 F1 | 	add	fp, #12
0834c     A7 0C 02 FB | 	rdlong	local02, fp
08350     0C 4E 85 F1 | 	sub	fp, #12
08354     06 11 02 F6 | 	mov	local04, local02
08358     01 10 16 F2 | 	cmp	local04, #1 wc
0835c     64 05 90 CD |  if_b	jmp	#LR__1159
08360     04 4E 05 F1 | 	add	fp, #4
08364     A7 0E 02 FB | 	rdlong	local03, fp
08368     04 4E 85 F1 | 	sub	fp, #4
0836c     14 0E 06 F1 | 	add	local03, #20
08370     07 0F 02 FB | 	rdlong	local03, local03
08374     FF 0F CE F7 | 	test	local03, #511 wz
08378     3C 04 90 5D |  if_ne	jmp	#LR__1157
0837c     04 4E 05 F1 | 	add	fp, #4
08380     A7 0A 02 FB | 	rdlong	local01, fp
08384     14 0A 06 F1 | 	add	local01, #20
08388     05 0F 02 FB | 	rdlong	local03, local01
0838c     09 0E 46 F0 | 	shr	local03, #9
08390     14 4E 05 F1 | 	add	fp, #20
08394     A7 12 02 FB | 	rdlong	local05, fp
08398     09 15 02 F6 | 	mov	local06, local05
0839c     0A 14 06 F1 | 	add	local06, #10
083a0     0A 17 E2 FA | 	rdword	local07, local06
083a4     0A 14 86 F1 | 	sub	local06, #10
083a8     0B 19 32 F9 | 	getword	local08, local07, #0
083ac     01 18 86 F1 | 	sub	local08, #1
083b0     0C 0F 0A F5 | 	and	local03, local08 wz
083b4     18 4E 05 F1 | 	add	fp, #24
083b8     A7 0E 62 FC | 	wrlong	local03, fp
083bc     30 4E 85 F1 | 	sub	fp, #48
083c0     E0 00 90 5D |  if_ne	jmp	#LR__1147
083c4     04 4E 05 F1 | 	add	fp, #4
083c8     A7 0E 02 FB | 	rdlong	local03, fp
083cc     04 4E 85 F1 | 	sub	fp, #4
083d0     14 0E 06 F1 | 	add	local03, #20
083d4     07 0F 0A FB | 	rdlong	local03, local03 wz
083d8     20 00 90 5D |  if_ne	jmp	#LR__1143
083dc     04 4E 05 F1 | 	add	fp, #4
083e0     A7 0E 02 FB | 	rdlong	local03, fp
083e4     08 0E 06 F1 | 	add	local03, #8
083e8     07 0F 02 FB | 	rdlong	local03, local03
083ec     18 4E 05 F1 | 	add	fp, #24
083f0     A7 0E 62 FC | 	wrlong	local03, fp
083f4     1C 4E 85 F1 | 	sub	fp, #28
083f8     28 00 90 FD | 	jmp	#LR__1144
083fc                 | LR__1143
083fc     04 4E 05 F1 | 	add	fp, #4
08400     A7 18 02 FB | 	rdlong	local08, fp
08404     0C 01 02 F6 | 	mov	arg01, local08
08408     04 4E 85 F1 | 	sub	fp, #4
0840c     18 18 06 F1 | 	add	local08, #24
08410     0C 03 02 FB | 	rdlong	arg02, local08
08414     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
08418     1C 4E 05 F1 | 	add	fp, #28
0841c     A7 EA 61 FC | 	wrlong	result1, fp
08420     1C 4E 85 F1 | 	sub	fp, #28
08424                 | LR__1144
08424     1C 4E 05 F1 | 	add	fp, #28
08428     A7 0E 02 FB | 	rdlong	local03, fp
0842c     1C 4E 85 F1 | 	sub	fp, #28
08430     02 0E 16 F2 | 	cmp	local03, #2 wc
08434     1C 00 90 3D |  if_ae	jmp	#LR__1145
08438     04 4E 05 F1 | 	add	fp, #4
0843c     A7 0E 02 FB | 	rdlong	local03, fp
08440     04 4E 85 F1 | 	sub	fp, #4
08444     11 0E 06 F1 | 	add	local03, #17
08448     07 05 48 FC | 	wrbyte	#2, local03
0844c     02 EA 05 F6 | 	mov	result1, #2
08450     74 04 90 FD | 	jmp	#LR__1160
08454                 | LR__1145
08454     1C 4E 05 F1 | 	add	fp, #28
08458     A7 0E 02 FB | 	rdlong	local03, fp
0845c     1C 4E 85 F1 | 	sub	fp, #28
08460     FF FF 7F FF 
08464     FF 0F 0E F2 | 	cmp	local03, ##-1 wz
08468     1C 00 90 5D |  if_ne	jmp	#LR__1146
0846c     04 4E 05 F1 | 	add	fp, #4
08470     A7 0E 02 FB | 	rdlong	local03, fp
08474     04 4E 85 F1 | 	sub	fp, #4
08478     11 0E 06 F1 | 	add	local03, #17
0847c     07 03 48 FC | 	wrbyte	#1, local03
08480     01 EA 05 F6 | 	mov	result1, #1
08484     40 04 90 FD | 	jmp	#LR__1160
08488                 | LR__1146
08488     04 4E 05 F1 | 	add	fp, #4
0848c     A7 0E 02 FB | 	rdlong	local03, fp
08490     18 4E 05 F1 | 	add	fp, #24
08494     A7 18 02 FB | 	rdlong	local08, fp
08498     1C 4E 85 F1 | 	sub	fp, #28
0849c     18 0E 06 F1 | 	add	local03, #24
084a0     07 19 62 FC | 	wrlong	local08, local03
084a4                 | LR__1147
084a4     18 4E 05 F1 | 	add	fp, #24
084a8     A7 00 02 FB | 	rdlong	arg01, fp
084ac     14 4E 85 F1 | 	sub	fp, #20
084b0     A7 0E 02 FB | 	rdlong	local03, fp
084b4     04 4E 85 F1 | 	sub	fp, #4
084b8     18 0E 06 F1 | 	add	local03, #24
084bc     07 03 02 FB | 	rdlong	arg02, local03
084c0     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
084c4     20 4E 05 F1 | 	add	fp, #32
084c8     A7 EA 61 FC | 	wrlong	result1, fp
084cc     20 4E 85 F1 | 	sub	fp, #32
084d0     00 EA 0D F2 | 	cmp	result1, #0 wz
084d4     1C 00 90 5D |  if_ne	jmp	#LR__1148
084d8     04 4E 05 F1 | 	add	fp, #4
084dc     A7 0E 02 FB | 	rdlong	local03, fp
084e0     04 4E 85 F1 | 	sub	fp, #4
084e4     11 0E 06 F1 | 	add	local03, #17
084e8     07 05 48 FC | 	wrbyte	#2, local03
084ec     02 EA 05 F6 | 	mov	result1, #2
084f0     D4 03 90 FD | 	jmp	#LR__1160
084f4                 | LR__1148
084f4     20 4E 05 F1 | 	add	fp, #32
084f8     A7 0E 02 FB | 	rdlong	local03, fp
084fc     10 4E 05 F1 | 	add	fp, #16
08500     A7 18 02 FB | 	rdlong	local08, fp
08504     0C 0F 02 F1 | 	add	local03, local08
08508     10 4E 85 F1 | 	sub	fp, #16
0850c     A7 0E 62 FC | 	wrlong	local03, fp
08510     14 4E 85 F1 | 	sub	fp, #20
08514     A7 0E 02 FB | 	rdlong	local03, fp
08518     09 0E 46 F0 | 	shr	local03, #9
0851c     20 4E 05 F1 | 	add	fp, #32
08520     A7 0E 62 FC | 	wrlong	local03, fp
08524     2C 4E 85 F1 | 	sub	fp, #44
08528     01 0E 16 F2 | 	cmp	local03, #1 wc
0852c     5C 01 90 CD |  if_b	jmp	#LR__1152
08530     30 4E 05 F1 | 	add	fp, #48
08534     A7 0E 02 FB | 	rdlong	local03, fp
08538     04 4E 85 F1 | 	sub	fp, #4
0853c     A7 18 02 FB | 	rdlong	local08, fp
08540     0C 0F 02 F1 | 	add	local03, local08
08544     14 4E 85 F1 | 	sub	fp, #20
08548     A7 18 02 FB | 	rdlong	local08, fp
0854c     18 4E 85 F1 | 	sub	fp, #24
08550     0A 18 06 F1 | 	add	local08, #10
08554     0C 19 E2 FA | 	rdword	local08, local08
08558     0C 0F 1A F2 | 	cmp	local03, local08 wcz
0855c     28 00 90 ED |  if_be	jmp	#LR__1149
08560     18 4E 05 F1 | 	add	fp, #24
08564     A7 0A 02 FB | 	rdlong	local01, fp
08568     0A 0A 06 F1 | 	add	local01, #10
0856c     05 0F E2 FA | 	rdword	local03, local01
08570     18 4E 05 F1 | 	add	fp, #24
08574     A7 18 02 FB | 	rdlong	local08, fp
08578     0C 0F 82 F1 | 	sub	local03, local08
0857c     04 4E 85 F1 | 	sub	fp, #4
08580     A7 0E 62 FC | 	wrlong	local03, fp
08584     2C 4E 85 F1 | 	sub	fp, #44
08588                 | LR__1149
08588     18 4E 05 F1 | 	add	fp, #24
0858c     A7 0A 02 FB | 	rdlong	local01, fp
08590     01 0A 06 F1 | 	add	local01, #1
08594     05 01 C2 FA | 	rdbyte	arg01, local01
08598     1C 4E 05 F1 | 	add	fp, #28
0859c     A7 02 02 FB | 	rdlong	arg02, fp
085a0     14 4E 85 F1 | 	sub	fp, #20
085a4     A7 04 02 FB | 	rdlong	arg03, fp
085a8     0C 4E 05 F1 | 	add	fp, #12
085ac     A7 06 02 FB | 	rdlong	arg04, fp
085b0     2C 4E 85 F1 | 	sub	fp, #44
085b4     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
085b8     00 EA 0D F2 | 	cmp	result1, #0 wz
085bc     1C 00 90 AD |  if_e	jmp	#LR__1150
085c0     04 4E 05 F1 | 	add	fp, #4
085c4     A7 0E 02 FB | 	rdlong	local03, fp
085c8     04 4E 85 F1 | 	sub	fp, #4
085cc     11 0E 06 F1 | 	add	local03, #17
085d0     07 03 48 FC | 	wrbyte	#1, local03
085d4     01 EA 05 F6 | 	mov	result1, #1
085d8     EC 02 90 FD | 	jmp	#LR__1160
085dc                 | LR__1150
085dc     04 4E 05 F1 | 	add	fp, #4
085e0     A7 0A 02 FB | 	rdlong	local01, fp
085e4     04 4E 85 F1 | 	sub	fp, #4
085e8     10 0A 06 F1 | 	add	local01, #16
085ec     05 0F C2 FA | 	rdbyte	local03, local01
085f0     80 0E CE F7 | 	test	local03, #128 wz
085f4     78 00 90 AD |  if_e	jmp	#LR__1151
085f8     04 4E 05 F1 | 	add	fp, #4
085fc     A7 18 02 FB | 	rdlong	local08, fp
08600     1C 18 06 F1 | 	add	local08, #28
08604     0C 19 02 FB | 	rdlong	local08, local08
08608     1C 4E 05 F1 | 	add	fp, #28
0860c     A7 1A 02 FB | 	rdlong	local09, fp
08610     0D 19 82 F1 | 	sub	local08, local09
08614     0C 4E 05 F1 | 	add	fp, #12
08618     A7 1C 02 FB | 	rdlong	local10, fp
0861c     2C 4E 85 F1 | 	sub	fp, #44
08620     0E 1F 02 F6 | 	mov	local11, local10
08624     0F 19 12 F2 | 	cmp	local08, local11 wc
08628     44 00 90 3D |  if_ae	jmp	#LR__1151
0862c     34 4E 05 F1 | 	add	fp, #52
08630     A7 00 02 FB | 	rdlong	arg01, fp
08634     30 4E 85 F1 | 	sub	fp, #48
08638     A7 02 02 FB | 	rdlong	arg02, fp
0863c     01 1F 02 F6 | 	mov	local11, arg02
08640     1C 1E 06 F1 | 	add	local11, #28
08644     0F 1B 02 FB | 	rdlong	local09, local11
08648     1C 4E 05 F1 | 	add	fp, #28
0864c     A7 12 02 FB | 	rdlong	local05, fp
08650     09 1B 82 F1 | 	sub	local09, local05
08654     09 1A 66 F0 | 	shl	local09, #9
08658     0D 1F 02 F6 | 	mov	local11, local09
0865c     0D 01 02 F1 | 	add	arg01, local09
08660     20 4E 85 F1 | 	sub	fp, #32
08664     28 02 06 F1 | 	add	arg02, #40
08668     09 04 C6 F9 | 	decod	arg03, #9
0866c     6C 86 BF FD | 	call	#__system____builtin_memmove
08670                 | LR__1151
08670     2C 4E 05 F1 | 	add	fp, #44
08674     A7 0E 02 FB | 	rdlong	local03, fp
08678     09 0E 66 F0 | 	shl	local03, #9
0867c     04 4E 85 F1 | 	sub	fp, #4
08680     A7 0E 62 FC | 	wrlong	local03, fp
08684     28 4E 85 F1 | 	sub	fp, #40
08688                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
08688                 | ' 				}
08688                 | ' 
08688                 | ' 
08688                 | ' 				rcnt =  ((UINT) 512 )  * cc;
08688                 | ' 				continue;
08688     B4 01 90 FD | 	jmp	#LR__1158
0868c                 | LR__1152
0868c     04 4E 05 F1 | 	add	fp, #4
08690     A7 0E 02 FB | 	rdlong	local03, fp
08694     1C 0E 06 F1 | 	add	local03, #28
08698     07 0F 02 FB | 	rdlong	local03, local03
0869c     1C 4E 05 F1 | 	add	fp, #28
086a0     A7 0A 02 FB | 	rdlong	local01, fp
086a4     20 4E 85 F1 | 	sub	fp, #32
086a8     05 0F 0A F2 | 	cmp	local03, local01 wz
086ac     EC 00 90 AD |  if_e	jmp	#LR__1156
086b0     04 4E 05 F1 | 	add	fp, #4
086b4     A7 0A 02 FB | 	rdlong	local01, fp
086b8     04 4E 85 F1 | 	sub	fp, #4
086bc     10 0A 06 F1 | 	add	local01, #16
086c0     05 0F C2 FA | 	rdbyte	local03, local01
086c4     80 0E CE F7 | 	test	local03, #128 wz
086c8     7C 00 90 AD |  if_e	jmp	#LR__1154
086cc     18 4E 05 F1 | 	add	fp, #24
086d0     A7 0A 02 FB | 	rdlong	local01, fp
086d4     01 0A 06 F1 | 	add	local01, #1
086d8     05 01 C2 FA | 	rdbyte	arg01, local01
086dc     14 4E 85 F1 | 	sub	fp, #20
086e0     A7 0E 02 FB | 	rdlong	local03, fp
086e4     07 03 02 F6 | 	mov	arg02, local03
086e8     28 02 06 F1 | 	add	arg02, #40
086ec     04 4E 85 F1 | 	sub	fp, #4
086f0     1C 0E 06 F1 | 	add	local03, #28
086f4     07 05 02 FB | 	rdlong	arg03, local03
086f8     01 06 06 F6 | 	mov	arg04, #1
086fc     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
08700     00 EA 0D F2 | 	cmp	result1, #0 wz
08704     1C 00 90 AD |  if_e	jmp	#LR__1153
08708     04 4E 05 F1 | 	add	fp, #4
0870c     A7 0E 02 FB | 	rdlong	local03, fp
08710     04 4E 85 F1 | 	sub	fp, #4
08714     11 0E 06 F1 | 	add	local03, #17
08718     07 03 48 FC | 	wrbyte	#1, local03
0871c     01 EA 05 F6 | 	mov	result1, #1
08720     A4 01 90 FD | 	jmp	#LR__1160
08724                 | LR__1153
08724     04 4E 05 F1 | 	add	fp, #4
08728     A7 1E 02 FB | 	rdlong	local11, fp
0872c     0F 0F 02 F6 | 	mov	local03, local11
08730     04 4E 85 F1 | 	sub	fp, #4
08734     10 1E 06 F1 | 	add	local11, #16
08738     0F 1F C2 FA | 	rdbyte	local11, local11
0873c     7F 1E 06 F5 | 	and	local11, #127
08740     10 0E 06 F1 | 	add	local03, #16
08744     07 1F 42 FC | 	wrbyte	local11, local03
08748                 | LR__1154
08748     18 4E 05 F1 | 	add	fp, #24
0874c     A7 0A 02 FB | 	rdlong	local01, fp
08750     01 0A 06 F1 | 	add	local01, #1
08754     05 01 C2 FA | 	rdbyte	arg01, local01
08758     14 4E 85 F1 | 	sub	fp, #20
0875c     A7 02 02 FB | 	rdlong	arg02, fp
08760     28 02 06 F1 | 	add	arg02, #40
08764     1C 4E 05 F1 | 	add	fp, #28
08768     A7 04 02 FB | 	rdlong	arg03, fp
0876c     20 4E 85 F1 | 	sub	fp, #32
08770     01 06 06 F6 | 	mov	arg04, #1
08774     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
08778     00 EA 0D F2 | 	cmp	result1, #0 wz
0877c     1C 00 90 AD |  if_e	jmp	#LR__1155
08780     04 4E 05 F1 | 	add	fp, #4
08784     A7 0E 02 FB | 	rdlong	local03, fp
08788     04 4E 85 F1 | 	sub	fp, #4
0878c     11 0E 06 F1 | 	add	local03, #17
08790     07 03 48 FC | 	wrbyte	#1, local03
08794     01 EA 05 F6 | 	mov	result1, #1
08798     2C 01 90 FD | 	jmp	#LR__1160
0879c                 | LR__1155
0879c                 | LR__1156
0879c     04 4E 05 F1 | 	add	fp, #4
087a0     A7 0E 02 FB | 	rdlong	local03, fp
087a4     1C 4E 05 F1 | 	add	fp, #28
087a8     A7 1E 02 FB | 	rdlong	local11, fp
087ac     20 4E 85 F1 | 	sub	fp, #32
087b0     1C 0E 06 F1 | 	add	local03, #28
087b4     07 1F 62 FC | 	wrlong	local11, local03
087b8                 | LR__1157
087b8     04 4E 05 F1 | 	add	fp, #4
087bc     A7 0A 02 FB | 	rdlong	local01, fp
087c0     14 0A 06 F1 | 	add	local01, #20
087c4     05 1F 02 FB | 	rdlong	local11, local01
087c8     FF 1F 06 F5 | 	and	local11, #511
087cc     09 0E C6 F9 | 	decod	local03, #9
087d0     0F 0F 82 F1 | 	sub	local03, local11
087d4     24 4E 05 F1 | 	add	fp, #36
087d8     A7 0E 62 FC | 	wrlong	local03, fp
087dc     1C 4E 85 F1 | 	sub	fp, #28
087e0     A7 1E 02 FB | 	rdlong	local11, fp
087e4     0C 4E 85 F1 | 	sub	fp, #12
087e8     0F 0F 1A F2 | 	cmp	local03, local11 wcz
087ec     0C 4E 05 11 |  if_a	add	fp, #12
087f0     A7 0E 02 1B |  if_a	rdlong	local03, fp
087f4     1C 4E 05 11 |  if_a	add	fp, #28
087f8     A7 0E 62 1C |  if_a	wrlong	local03, fp
087fc     28 4E 85 11 |  if_a	sub	fp, #40
08800     34 4E 05 F1 | 	add	fp, #52
08804     A7 00 02 FB | 	rdlong	arg01, fp
08808     30 4E 85 F1 | 	sub	fp, #48
0880c     A7 14 02 FB | 	rdlong	local06, fp
08810     0A 03 02 F6 | 	mov	arg02, local06
08814     28 02 06 F1 | 	add	arg02, #40
08818     14 14 06 F1 | 	add	local06, #20
0881c     0A 1F 02 FB | 	rdlong	local11, local06
08820     0F 1B 02 F6 | 	mov	local09, local11
08824     0D 1D 02 F6 | 	mov	local10, local09
08828     FF 1D 06 F5 | 	and	local10, #511
0882c     0E 03 02 F1 | 	add	arg02, local10
08830     24 4E 05 F1 | 	add	fp, #36
08834     A7 04 02 FB | 	rdlong	arg03, fp
08838     28 4E 85 F1 | 	sub	fp, #40
0883c     9C 84 BF FD | 	call	#__system____builtin_memmove
08840                 | LR__1158
08840     0C 4E 05 F1 | 	add	fp, #12
08844     A7 0E 02 FB | 	rdlong	local03, fp
08848     1C 4E 05 F1 | 	add	fp, #28
0884c     A7 18 02 FB | 	rdlong	local08, fp
08850     0C 0F 82 F1 | 	sub	local03, local08
08854     1C 4E 85 F1 | 	sub	fp, #28
08858     A7 0E 62 FC | 	wrlong	local03, fp
0885c     04 4E 05 F1 | 	add	fp, #4
08860     A7 0A 02 FB | 	rdlong	local01, fp
08864     05 17 02 FB | 	rdlong	local07, local01
08868     18 4E 05 F1 | 	add	fp, #24
0886c     A7 18 02 FB | 	rdlong	local08, fp
08870     0C 17 02 F1 | 	add	local07, local08
08874     05 17 62 FC | 	wrlong	local07, local01
08878     0C 4E 05 F1 | 	add	fp, #12
0887c     A7 0E 02 FB | 	rdlong	local03, fp
08880     0C 4E 85 F1 | 	sub	fp, #12
08884     A7 20 02 FB | 	rdlong	local12, fp
08888     10 0F 02 F1 | 	add	local03, local12
0888c     0C 4E 05 F1 | 	add	fp, #12
08890     A7 0E 62 FC | 	wrlong	local03, fp
08894     30 4E 85 F1 | 	sub	fp, #48
08898     A7 22 02 FB | 	rdlong	local13, fp
0889c     11 0F 02 F6 | 	mov	local03, local13
088a0     14 22 06 F1 | 	add	local13, #20
088a4     11 25 02 FB | 	rdlong	local14, local13
088a8     24 4E 05 F1 | 	add	fp, #36
088ac     A7 14 02 FB | 	rdlong	local06, fp
088b0     28 4E 85 F1 | 	sub	fp, #40
088b4     0A 25 02 F1 | 	add	local14, local06
088b8     14 0E 06 F1 | 	add	local03, #20
088bc     07 25 62 FC | 	wrlong	local14, local03
088c0     84 FA 9F FD | 	jmp	#LR__1142
088c4                 | LR__1159
088c4                 | ' 
088c4                 | ' 
088c4                 | ' 
088c4                 | ' 
088c4                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
088c4                 | ' 
088c4                 | ' 	}
088c4                 | ' 
088c4                 | ' 	return FR_OK ;
088c4     00 EA 05 F6 | 	mov	result1, #0
088c8                 | LR__1160
088c8     A7 F0 03 F6 | 	mov	ptra, fp
088cc     B2 00 A0 FD | 	call	#popregs_
088d0                 | _fatfs_cc_f_read_ret
088d0     2D 00 64 FD | 	ret
088d4                 | 
088d4                 | _fatfs_cc_f_write
088d4     15 4A 05 F6 | 	mov	COUNT_, #21
088d8     A8 00 A0 FD | 	call	#pushregs_
088dc     34 F0 07 F1 | 	add	ptra, #52
088e0     04 4E 05 F1 | 	add	fp, #4
088e4     A7 00 62 FC | 	wrlong	arg01, fp
088e8     04 4E 05 F1 | 	add	fp, #4
088ec     A7 02 62 FC | 	wrlong	arg02, fp
088f0     04 4E 05 F1 | 	add	fp, #4
088f4     A7 04 62 FC | 	wrlong	arg03, fp
088f8     04 4E 05 F1 | 	add	fp, #4
088fc     A7 06 62 FC | 	wrlong	arg04, fp
08900     08 4E 85 F1 | 	sub	fp, #8
08904     A7 EA 01 FB | 	rdlong	result1, fp
08908     28 4E 05 F1 | 	add	fp, #40
0890c     A7 EA 61 FC | 	wrlong	result1, fp
08910     20 4E 85 F1 | 	sub	fp, #32
08914     A7 EA 01 FB | 	rdlong	result1, fp
08918     F5 00 68 FC | 	wrlong	#0, result1
0891c     0C 4E 85 F1 | 	sub	fp, #12
08920     A7 00 02 FB | 	rdlong	arg01, fp
08924     14 4E 05 F1 | 	add	fp, #20
08928     A7 02 02 F6 | 	mov	arg02, fp
0892c     18 4E 85 F1 | 	sub	fp, #24
08930     88 F0 BF FD | 	call	#_fatfs_cc_validate
08934     14 4E 05 F1 | 	add	fp, #20
08938     A7 EA 61 FC | 	wrlong	result1, fp
0893c     00 EA 4D F2 | 	cmps	result1, #0 wz
08940     14 4E 85 F1 | 	sub	fp, #20
08944     20 00 90 5D |  if_ne	jmp	#LR__1170
08948     04 4E 05 F1 | 	add	fp, #4
0894c     A7 02 02 FB | 	rdlong	arg02, fp
08950     11 02 06 F1 | 	add	arg02, #17
08954     01 03 CA FA | 	rdbyte	arg02, arg02 wz
08958     10 4E 05 F1 | 	add	fp, #16
0895c     A7 02 62 FC | 	wrlong	arg02, fp
08960     14 4E 85 F1 | 	sub	fp, #20
08964     10 00 90 AD |  if_e	jmp	#LR__1171
08968                 | LR__1170
08968     14 4E 05 F1 | 	add	fp, #20
0896c     A7 EA 01 FB | 	rdlong	result1, fp
08970     14 4E 85 F1 | 	sub	fp, #20
08974     44 07 90 FD | 	jmp	#LR__1193
08978                 | LR__1171
08978     04 4E 05 F1 | 	add	fp, #4
0897c     A7 02 02 FB | 	rdlong	arg02, fp
08980     04 4E 85 F1 | 	sub	fp, #4
08984     10 02 06 F1 | 	add	arg02, #16
08988     01 03 C2 FA | 	rdbyte	arg02, arg02
0898c     02 02 CE F7 | 	test	arg02, #2 wz
08990     07 EA 05 A6 |  if_e	mov	result1, #7
08994     24 07 90 AD |  if_e	jmp	#LR__1193
08998     04 4E 05 F1 | 	add	fp, #4
0899c     A7 02 02 FB | 	rdlong	arg02, fp
089a0     01 01 02 F6 | 	mov	arg01, arg02
089a4     14 00 06 F1 | 	add	arg01, #20
089a8     00 01 02 FB | 	rdlong	arg01, arg01
089ac     08 4E 05 F1 | 	add	fp, #8
089b0     A7 EA 01 FB | 	rdlong	result1, fp
089b4     F5 00 02 F1 | 	add	arg01, result1
089b8     0C 4E 85 F1 | 	sub	fp, #12
089bc     14 02 06 F1 | 	add	arg02, #20
089c0     01 EB 01 FB | 	rdlong	result1, arg02
089c4     F5 00 12 F2 | 	cmp	arg01, result1 wc
089c8     24 00 90 3D |  if_ae	jmp	#LR__1172
089cc     04 4E 05 F1 | 	add	fp, #4
089d0     A7 02 02 FB | 	rdlong	arg02, fp
089d4     01 EA 65 F6 | 	neg	result1, #1
089d8     14 02 06 F1 | 	add	arg02, #20
089dc     01 03 02 FB | 	rdlong	arg02, arg02
089e0     01 EB 81 F1 | 	sub	result1, arg02
089e4     08 4E 05 F1 | 	add	fp, #8
089e8     A7 EA 61 FC | 	wrlong	result1, fp
089ec     0C 4E 85 F1 | 	sub	fp, #12
089f0                 | LR__1172
089f0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
089f0                 | ' 	}
089f0                 | ' 
089f0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
089f0                 | LR__1173
089f0     0C 4E 05 F1 | 	add	fp, #12
089f4     A7 EA 01 FB | 	rdlong	result1, fp
089f8     0C 4E 85 F1 | 	sub	fp, #12
089fc     01 EA 15 F2 | 	cmp	result1, #1 wc
08a00     90 06 90 CD |  if_b	jmp	#LR__1192
08a04     04 4E 05 F1 | 	add	fp, #4
08a08     A7 EA 01 FB | 	rdlong	result1, fp
08a0c     04 4E 85 F1 | 	sub	fp, #4
08a10     14 EA 05 F1 | 	add	result1, #20
08a14     F5 EA 01 FB | 	rdlong	result1, result1
08a18     FF EB CD F7 | 	test	result1, #511 wz
08a1c     D8 04 90 5D |  if_ne	jmp	#LR__1188
08a20     04 4E 05 F1 | 	add	fp, #4
08a24     A7 EA 01 FB | 	rdlong	result1, fp
08a28     14 EA 05 F1 | 	add	result1, #20
08a2c     F5 EA 01 FB | 	rdlong	result1, result1
08a30     09 EA 45 F0 | 	shr	result1, #9
08a34     14 4E 05 F1 | 	add	fp, #20
08a38     A7 02 02 FB | 	rdlong	arg02, fp
08a3c     0A 02 06 F1 | 	add	arg02, #10
08a40     01 07 E2 FA | 	rdword	arg04, arg02
08a44     03 03 32 F9 | 	getword	arg02, arg04, #0
08a48     01 02 86 F1 | 	sub	arg02, #1
08a4c     01 EB 09 F5 | 	and	result1, arg02 wz
08a50     14 4E 05 F1 | 	add	fp, #20
08a54     A7 EA 61 FC | 	wrlong	result1, fp
08a58     2C 4E 85 F1 | 	sub	fp, #44
08a5c     44 01 90 5D |  if_ne	jmp	#LR__1179
08a60     04 4E 05 F1 | 	add	fp, #4
08a64     A7 EA 01 FB | 	rdlong	result1, fp
08a68     04 4E 85 F1 | 	sub	fp, #4
08a6c     14 EA 05 F1 | 	add	result1, #20
08a70     F5 02 0A FB | 	rdlong	arg02, result1 wz
08a74     44 00 90 5D |  if_ne	jmp	#LR__1174
08a78     04 4E 05 F1 | 	add	fp, #4
08a7c     A7 02 02 FB | 	rdlong	arg02, fp
08a80     08 02 06 F1 | 	add	arg02, #8
08a84     01 03 0A FB | 	rdlong	arg02, arg02 wz
08a88     18 4E 05 F1 | 	add	fp, #24
08a8c     A7 02 62 FC | 	wrlong	arg02, fp
08a90     1C 4E 85 F1 | 	sub	fp, #28
08a94     4C 00 90 5D |  if_ne	jmp	#LR__1175
08a98     04 4E 05 F1 | 	add	fp, #4
08a9c     A7 00 02 FB | 	rdlong	arg01, fp
08aa0     04 4E 85 F1 | 	sub	fp, #4
08aa4     00 02 06 F6 | 	mov	arg02, #0
08aa8     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
08aac     1C 4E 05 F1 | 	add	fp, #28
08ab0     A7 EA 61 FC | 	wrlong	result1, fp
08ab4     1C 4E 85 F1 | 	sub	fp, #28
08ab8     28 00 90 FD | 	jmp	#LR__1175
08abc                 | LR__1174
08abc     04 4E 05 F1 | 	add	fp, #4
08ac0     A7 06 02 FB | 	rdlong	arg04, fp
08ac4     03 01 02 F6 | 	mov	arg01, arg04
08ac8     04 4E 85 F1 | 	sub	fp, #4
08acc     18 06 06 F1 | 	add	arg04, #24
08ad0     03 03 02 FB | 	rdlong	arg02, arg04
08ad4     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
08ad8     1C 4E 05 F1 | 	add	fp, #28
08adc     A7 EA 61 FC | 	wrlong	result1, fp
08ae0     1C 4E 85 F1 | 	sub	fp, #28
08ae4                 | LR__1175
08ae4     1C 4E 05 F1 | 	add	fp, #28
08ae8     A7 EA 09 FB | 	rdlong	result1, fp wz
08aec     1C 4E 85 F1 | 	sub	fp, #28
08af0     A0 05 90 AD |  if_e	jmp	#LR__1192
08af4     1C 4E 05 F1 | 	add	fp, #28
08af8     A7 EA 01 FB | 	rdlong	result1, fp
08afc     1C 4E 85 F1 | 	sub	fp, #28
08b00     01 EA 0D F2 | 	cmp	result1, #1 wz
08b04     1C 00 90 5D |  if_ne	jmp	#LR__1176
08b08     04 4E 05 F1 | 	add	fp, #4
08b0c     A7 EA 01 FB | 	rdlong	result1, fp
08b10     04 4E 85 F1 | 	sub	fp, #4
08b14     11 EA 05 F1 | 	add	result1, #17
08b18     F5 04 48 FC | 	wrbyte	#2, result1
08b1c     02 EA 05 F6 | 	mov	result1, #2
08b20     98 05 90 FD | 	jmp	#LR__1193
08b24                 | LR__1176
08b24     1C 4E 05 F1 | 	add	fp, #28
08b28     A7 EA 01 FB | 	rdlong	result1, fp
08b2c     1C 4E 85 F1 | 	sub	fp, #28
08b30     FF FF 7F FF 
08b34     FF EB 0D F2 | 	cmp	result1, ##-1 wz
08b38     1C 00 90 5D |  if_ne	jmp	#LR__1177
08b3c     04 4E 05 F1 | 	add	fp, #4
08b40     A7 EA 01 FB | 	rdlong	result1, fp
08b44     04 4E 85 F1 | 	sub	fp, #4
08b48     11 EA 05 F1 | 	add	result1, #17
08b4c     F5 02 48 FC | 	wrbyte	#1, result1
08b50     01 EA 05 F6 | 	mov	result1, #1
08b54     64 05 90 FD | 	jmp	#LR__1193
08b58                 | LR__1177
08b58     04 4E 05 F1 | 	add	fp, #4
08b5c     A7 EA 01 FB | 	rdlong	result1, fp
08b60     18 4E 05 F1 | 	add	fp, #24
08b64     A7 06 02 FB | 	rdlong	arg04, fp
08b68     18 EA 05 F1 | 	add	result1, #24
08b6c     F5 06 62 FC | 	wrlong	arg04, result1
08b70     18 4E 85 F1 | 	sub	fp, #24
08b74     A7 EA 01 FB | 	rdlong	result1, fp
08b78     04 4E 85 F1 | 	sub	fp, #4
08b7c     08 EA 05 F1 | 	add	result1, #8
08b80     F5 EA 09 FB | 	rdlong	result1, result1 wz
08b84     1C 00 90 5D |  if_ne	jmp	#LR__1178
08b88     04 4E 05 F1 | 	add	fp, #4
08b8c     A7 06 02 FB | 	rdlong	arg04, fp
08b90     18 4E 05 F1 | 	add	fp, #24
08b94     A7 EA 01 FB | 	rdlong	result1, fp
08b98     1C 4E 85 F1 | 	sub	fp, #28
08b9c     08 06 06 F1 | 	add	arg04, #8
08ba0     03 EB 61 FC | 	wrlong	result1, arg04
08ba4                 | LR__1178
08ba4                 | LR__1179
08ba4     04 4E 05 F1 | 	add	fp, #4
08ba8     A7 06 02 FB | 	rdlong	arg04, fp
08bac     04 4E 85 F1 | 	sub	fp, #4
08bb0     10 06 06 F1 | 	add	arg04, #16
08bb4     03 07 C2 FA | 	rdbyte	arg04, arg04
08bb8     80 06 CE F7 | 	test	arg04, #128 wz
08bbc     7C 00 90 AD |  if_e	jmp	#LR__1181
08bc0     18 4E 05 F1 | 	add	fp, #24
08bc4     A7 06 02 FB | 	rdlong	arg04, fp
08bc8     01 06 06 F1 | 	add	arg04, #1
08bcc     03 01 C2 FA | 	rdbyte	arg01, arg04
08bd0     14 4E 85 F1 | 	sub	fp, #20
08bd4     A7 06 02 FB | 	rdlong	arg04, fp
08bd8     03 03 02 F6 | 	mov	arg02, arg04
08bdc     28 02 06 F1 | 	add	arg02, #40
08be0     04 4E 85 F1 | 	sub	fp, #4
08be4     1C 06 06 F1 | 	add	arg04, #28
08be8     03 05 02 FB | 	rdlong	arg03, arg04
08bec     01 06 06 F6 | 	mov	arg04, #1
08bf0     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
08bf4     00 EA 0D F2 | 	cmp	result1, #0 wz
08bf8     1C 00 90 AD |  if_e	jmp	#LR__1180
08bfc     04 4E 05 F1 | 	add	fp, #4
08c00     A7 EA 01 FB | 	rdlong	result1, fp
08c04     04 4E 85 F1 | 	sub	fp, #4
08c08     11 EA 05 F1 | 	add	result1, #17
08c0c     F5 02 48 FC | 	wrbyte	#1, result1
08c10     01 EA 05 F6 | 	mov	result1, #1
08c14     A4 04 90 FD | 	jmp	#LR__1193
08c18                 | LR__1180
08c18     04 4E 05 F1 | 	add	fp, #4
08c1c     A7 06 02 FB | 	rdlong	arg04, fp
08c20     03 EB 01 F6 | 	mov	result1, arg04
08c24     04 4E 85 F1 | 	sub	fp, #4
08c28     10 06 06 F1 | 	add	arg04, #16
08c2c     03 07 C2 FA | 	rdbyte	arg04, arg04
08c30     7F 06 06 F5 | 	and	arg04, #127
08c34     10 EA 05 F1 | 	add	result1, #16
08c38     F5 06 42 FC | 	wrbyte	arg04, result1
08c3c                 | LR__1181
08c3c     18 4E 05 F1 | 	add	fp, #24
08c40     A7 00 02 FB | 	rdlong	arg01, fp
08c44     14 4E 85 F1 | 	sub	fp, #20
08c48     A7 02 02 FB | 	rdlong	arg02, fp
08c4c     04 4E 85 F1 | 	sub	fp, #4
08c50     18 02 06 F1 | 	add	arg02, #24
08c54     01 03 02 FB | 	rdlong	arg02, arg02
08c58     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
08c5c     20 4E 05 F1 | 	add	fp, #32
08c60     A7 EA 61 FC | 	wrlong	result1, fp
08c64     20 4E 85 F1 | 	sub	fp, #32
08c68     00 EA 0D F2 | 	cmp	result1, #0 wz
08c6c     1C 00 90 5D |  if_ne	jmp	#LR__1182
08c70     04 4E 05 F1 | 	add	fp, #4
08c74     A7 EA 01 FB | 	rdlong	result1, fp
08c78     04 4E 85 F1 | 	sub	fp, #4
08c7c     11 EA 05 F1 | 	add	result1, #17
08c80     F5 04 48 FC | 	wrbyte	#2, result1
08c84     02 EA 05 F6 | 	mov	result1, #2
08c88     30 04 90 FD | 	jmp	#LR__1193
08c8c                 | LR__1182
08c8c     20 4E 05 F1 | 	add	fp, #32
08c90     A7 EA 01 FB | 	rdlong	result1, fp
08c94     0C 4E 05 F1 | 	add	fp, #12
08c98     A7 0A 02 FB | 	rdlong	local01, fp
08c9c     05 EB 01 F1 | 	add	result1, local01
08ca0     0C 4E 85 F1 | 	sub	fp, #12
08ca4     A7 EA 61 FC | 	wrlong	result1, fp
08ca8     14 4E 85 F1 | 	sub	fp, #20
08cac     A7 EA 01 FB | 	rdlong	result1, fp
08cb0     09 EA 45 F0 | 	shr	result1, #9
08cb4     1C 4E 05 F1 | 	add	fp, #28
08cb8     A7 EA 61 FC | 	wrlong	result1, fp
08cbc     28 4E 85 F1 | 	sub	fp, #40
08cc0     01 EA 15 F2 | 	cmp	result1, #1 wc
08cc4     60 01 90 CD |  if_b	jmp	#LR__1186
08cc8     2C 4E 05 F1 | 	add	fp, #44
08ccc     A7 EA 01 FB | 	rdlong	result1, fp
08cd0     04 4E 85 F1 | 	sub	fp, #4
08cd4     A7 06 02 FB | 	rdlong	arg04, fp
08cd8     03 EB 01 F1 | 	add	result1, arg04
08cdc     10 4E 85 F1 | 	sub	fp, #16
08ce0     A7 06 02 FB | 	rdlong	arg04, fp
08ce4     18 4E 85 F1 | 	sub	fp, #24
08ce8     0A 06 06 F1 | 	add	arg04, #10
08cec     03 07 E2 FA | 	rdword	arg04, arg04
08cf0     03 EB 19 F2 | 	cmp	result1, arg04 wcz
08cf4     28 00 90 ED |  if_be	jmp	#LR__1183
08cf8     18 4E 05 F1 | 	add	fp, #24
08cfc     A7 EA 01 FB | 	rdlong	result1, fp
08d00     0A EA 05 F1 | 	add	result1, #10
08d04     F5 EA E1 FA | 	rdword	result1, result1
08d08     14 4E 05 F1 | 	add	fp, #20
08d0c     A7 06 02 FB | 	rdlong	arg04, fp
08d10     03 EB 81 F1 | 	sub	result1, arg04
08d14     04 4E 85 F1 | 	sub	fp, #4
08d18     A7 EA 61 FC | 	wrlong	result1, fp
08d1c     28 4E 85 F1 | 	sub	fp, #40
08d20                 | LR__1183
08d20     18 4E 05 F1 | 	add	fp, #24
08d24     A7 06 02 FB | 	rdlong	arg04, fp
08d28     01 06 06 F1 | 	add	arg04, #1
08d2c     03 01 C2 FA | 	rdbyte	arg01, arg04
08d30     18 4E 05 F1 | 	add	fp, #24
08d34     A7 02 02 FB | 	rdlong	arg02, fp
08d38     10 4E 85 F1 | 	sub	fp, #16
08d3c     A7 04 02 FB | 	rdlong	arg03, fp
08d40     08 4E 05 F1 | 	add	fp, #8
08d44     A7 06 02 FB | 	rdlong	arg04, fp
08d48     28 4E 85 F1 | 	sub	fp, #40
08d4c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
08d50     00 EA 0D F2 | 	cmp	result1, #0 wz
08d54     1C 00 90 AD |  if_e	jmp	#LR__1184
08d58     04 4E 05 F1 | 	add	fp, #4
08d5c     A7 0A 02 FB | 	rdlong	local01, fp
08d60     04 4E 85 F1 | 	sub	fp, #4
08d64     11 0A 06 F1 | 	add	local01, #17
08d68     05 03 48 FC | 	wrbyte	#1, local01
08d6c     01 EA 05 F6 | 	mov	result1, #1
08d70     48 03 90 FD | 	jmp	#LR__1193
08d74                 | LR__1184
08d74     04 4E 05 F1 | 	add	fp, #4
08d78     A7 EA 01 FB | 	rdlong	result1, fp
08d7c     1C EA 05 F1 | 	add	result1, #28
08d80     F5 EA 01 FB | 	rdlong	result1, result1
08d84     1C 4E 05 F1 | 	add	fp, #28
08d88     A7 0C 02 FB | 	rdlong	local02, fp
08d8c     06 EB 81 F1 | 	sub	result1, local02
08d90     08 4E 05 F1 | 	add	fp, #8
08d94     A7 06 02 FB | 	rdlong	arg04, fp
08d98     28 4E 85 F1 | 	sub	fp, #40
08d9c     03 EB 11 F2 | 	cmp	result1, arg04 wc
08da0     68 00 90 3D |  if_ae	jmp	#LR__1185
08da4     04 4E 05 F1 | 	add	fp, #4
08da8     A7 00 02 FB | 	rdlong	arg01, fp
08dac     28 00 06 F1 | 	add	arg01, #40
08db0     2C 4E 05 F1 | 	add	fp, #44
08db4     A7 02 02 FB | 	rdlong	arg02, fp
08db8     2C 4E 85 F1 | 	sub	fp, #44
08dbc     A7 EA 01 FB | 	rdlong	result1, fp
08dc0     1C EA 05 F1 | 	add	result1, #28
08dc4     F5 0E 02 FB | 	rdlong	local03, result1
08dc8     1C 4E 05 F1 | 	add	fp, #28
08dcc     A7 06 02 FB | 	rdlong	arg04, fp
08dd0     20 4E 85 F1 | 	sub	fp, #32
08dd4     03 0F 82 F1 | 	sub	local03, arg04
08dd8     09 0E 66 F0 | 	shl	local03, #9
08ddc     07 03 02 F1 | 	add	arg02, local03
08de0     09 04 C6 F9 | 	decod	arg03, #9
08de4     F4 7E BF FD | 	call	#__system____builtin_memmove
08de8     04 4E 05 F1 | 	add	fp, #4
08dec     A7 06 02 FB | 	rdlong	arg04, fp
08df0     03 EB 01 F6 | 	mov	result1, arg04
08df4     04 4E 85 F1 | 	sub	fp, #4
08df8     10 06 06 F1 | 	add	arg04, #16
08dfc     03 07 C2 FA | 	rdbyte	arg04, arg04
08e00     7F 06 06 F5 | 	and	arg04, #127
08e04     10 EA 05 F1 | 	add	result1, #16
08e08     F5 06 42 FC | 	wrbyte	arg04, result1
08e0c                 | LR__1185
08e0c     28 4E 05 F1 | 	add	fp, #40
08e10     A7 EA 01 FB | 	rdlong	result1, fp
08e14     09 EA 65 F0 | 	shl	result1, #9
08e18     04 4E 85 F1 | 	sub	fp, #4
08e1c     A7 EA 61 FC | 	wrlong	result1, fp
08e20     24 4E 85 F1 | 	sub	fp, #36
08e24                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
08e24                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
08e24                 | ' 				}
08e24                 | ' 
08e24                 | ' 
08e24                 | ' 				wcnt =  ((UINT) 512 )  * cc;
08e24                 | ' 				continue;
08e24     74 01 90 FD | 	jmp	#LR__1189
08e28                 | LR__1186
08e28     04 4E 05 F1 | 	add	fp, #4
08e2c     A7 0C 02 FB | 	rdlong	local02, fp
08e30     1C 0C 06 F1 | 	add	local02, #28
08e34     06 EB 01 FB | 	rdlong	result1, local02
08e38     1C 4E 05 F1 | 	add	fp, #28
08e3c     A7 0C 02 FB | 	rdlong	local02, fp
08e40     20 4E 85 F1 | 	sub	fp, #32
08e44     06 EB 09 F2 | 	cmp	result1, local02 wz
08e48     90 00 90 AD |  if_e	jmp	#LR__1187
08e4c     04 4E 05 F1 | 	add	fp, #4
08e50     A7 EA 01 FB | 	rdlong	result1, fp
08e54     F5 0E 02 F6 | 	mov	local03, result1
08e58     04 4E 85 F1 | 	sub	fp, #4
08e5c     14 0E 06 F1 | 	add	local03, #20
08e60     07 0F 02 FB | 	rdlong	local03, local03
08e64     0C EA 05 F1 | 	add	result1, #12
08e68     F5 10 02 FB | 	rdlong	local04, result1
08e6c     08 13 02 F6 | 	mov	local05, local04
08e70     09 0F 12 F2 | 	cmp	local03, local05 wc
08e74     64 00 90 3D |  if_ae	jmp	#LR__1187
08e78     18 4E 05 F1 | 	add	fp, #24
08e7c     A7 06 02 FB | 	rdlong	arg04, fp
08e80     01 06 06 F1 | 	add	arg04, #1
08e84     03 01 C2 FA | 	rdbyte	arg01, arg04
08e88     14 4E 85 F1 | 	sub	fp, #20
08e8c     A7 14 02 FB | 	rdlong	local06, fp
08e90     28 14 06 F1 | 	add	local06, #40
08e94     0A 17 02 F6 | 	mov	local07, local06
08e98     1C 4E 05 F1 | 	add	fp, #28
08e9c     A7 18 02 FB | 	rdlong	local08, fp
08ea0     20 4E 85 F1 | 	sub	fp, #32
08ea4     01 1A 06 F6 | 	mov	local09, #1
08ea8     0B 03 02 F6 | 	mov	arg02, local07
08eac     0C 05 02 F6 | 	mov	arg03, local08
08eb0     01 06 06 F6 | 	mov	arg04, #1
08eb4     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
08eb8     F5 1C 0A F6 | 	mov	local10, result1 wz
08ebc     1C 00 90 AD |  if_e	jmp	#LR__1187
08ec0     04 4E 05 F1 | 	add	fp, #4
08ec4     A7 1C 02 FB | 	rdlong	local10, fp
08ec8     04 4E 85 F1 | 	sub	fp, #4
08ecc     11 1C 06 F1 | 	add	local10, #17
08ed0     0E 03 48 FC | 	wrbyte	#1, local10
08ed4                 | ' 				fp->fptr < fp->obj.objsize &&
08ed4                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
08ed4                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
08ed4     01 EA 05 F6 | 	mov	result1, #1
08ed8     E0 01 90 FD | 	jmp	#LR__1193
08edc                 | LR__1187
08edc     04 4E 05 F1 | 	add	fp, #4
08ee0     A7 06 02 FB | 	rdlong	arg04, fp
08ee4     1C 4E 05 F1 | 	add	fp, #28
08ee8     A7 EA 01 FB | 	rdlong	result1, fp
08eec     20 4E 85 F1 | 	sub	fp, #32
08ef0     1C 06 06 F1 | 	add	arg04, #28
08ef4     03 EB 61 FC | 	wrlong	result1, arg04
08ef8                 | LR__1188
08ef8     04 4E 05 F1 | 	add	fp, #4
08efc     A7 EA 01 FB | 	rdlong	result1, fp
08f00     14 EA 05 F1 | 	add	result1, #20
08f04     F5 EA 01 FB | 	rdlong	result1, result1
08f08     FF EB 05 F5 | 	and	result1, #511
08f0c     09 1E C6 F9 | 	decod	local11, #9
08f10     F5 1E 82 F1 | 	sub	local11, result1
08f14     20 4E 05 F1 | 	add	fp, #32
08f18     A7 1E 62 FC | 	wrlong	local11, fp
08f1c     18 4E 85 F1 | 	sub	fp, #24
08f20     A7 EA 01 FB | 	rdlong	result1, fp
08f24     0C 4E 85 F1 | 	sub	fp, #12
08f28     F5 1E 1A F2 | 	cmp	local11, result1 wcz
08f2c     0C 4E 05 11 |  if_a	add	fp, #12
08f30     A7 1E 02 1B |  if_a	rdlong	local11, fp
08f34     18 4E 05 11 |  if_a	add	fp, #24
08f38     A7 1E 62 1C |  if_a	wrlong	local11, fp
08f3c     24 4E 85 11 |  if_a	sub	fp, #36
08f40     04 4E 05 F1 | 	add	fp, #4
08f44     A7 1E 02 FB | 	rdlong	local11, fp
08f48     0F 01 02 F6 | 	mov	arg01, local11
08f4c     28 00 06 F1 | 	add	arg01, #40
08f50     14 1E 06 F1 | 	add	local11, #20
08f54     0F 1F 02 FB | 	rdlong	local11, local11
08f58     FF 1F 06 F5 | 	and	local11, #511
08f5c     0F 01 02 F1 | 	add	arg01, local11
08f60     2C 4E 05 F1 | 	add	fp, #44
08f64     A7 02 02 FB | 	rdlong	arg02, fp
08f68     0C 4E 85 F1 | 	sub	fp, #12
08f6c     A7 04 02 FB | 	rdlong	arg03, fp
08f70     24 4E 85 F1 | 	sub	fp, #36
08f74     64 7D BF FD | 	call	#__system____builtin_memmove
08f78     04 4E 05 F1 | 	add	fp, #4
08f7c     A7 EA 01 FB | 	rdlong	result1, fp
08f80     F5 1E 02 F6 | 	mov	local11, result1
08f84     04 4E 85 F1 | 	sub	fp, #4
08f88     10 EA 05 F1 | 	add	result1, #16
08f8c     F5 EA C1 FA | 	rdbyte	result1, result1
08f90     80 EA 45 F5 | 	or	result1, #128
08f94     10 1E 06 F1 | 	add	local11, #16
08f98     0F EB 41 FC | 	wrbyte	result1, local11
08f9c                 | LR__1189
08f9c     0C 4E 05 F1 | 	add	fp, #12
08fa0     A7 1E 02 FB | 	rdlong	local11, fp
08fa4     18 4E 05 F1 | 	add	fp, #24
08fa8     A7 EA 01 FB | 	rdlong	result1, fp
08fac     F5 1E 82 F1 | 	sub	local11, result1
08fb0     18 4E 85 F1 | 	sub	fp, #24
08fb4     A7 1E 62 FC | 	wrlong	local11, fp
08fb8     04 4E 05 F1 | 	add	fp, #4
08fbc     A7 20 02 FB | 	rdlong	local12, fp
08fc0     10 1F 02 FB | 	rdlong	local11, local12
08fc4     14 4E 05 F1 | 	add	fp, #20
08fc8     A7 22 02 FB | 	rdlong	local13, fp
08fcc     11 1F 02 F1 | 	add	local11, local13
08fd0     10 1F 62 FC | 	wrlong	local11, local12
08fd4     0C 4E 05 F1 | 	add	fp, #12
08fd8     A7 1E 02 FB | 	rdlong	local11, fp
08fdc     0C 4E 85 F1 | 	sub	fp, #12
08fe0     A7 24 02 FB | 	rdlong	local14, fp
08fe4     12 1F 02 F1 | 	add	local11, local14
08fe8     0C 4E 05 F1 | 	add	fp, #12
08fec     A7 1E 62 FC | 	wrlong	local11, fp
08ff0     2C 4E 85 F1 | 	sub	fp, #44
08ff4     A7 26 02 FB | 	rdlong	local15, fp
08ff8     13 1F 02 F6 | 	mov	local11, local15
08ffc     14 26 06 F1 | 	add	local15, #20
09000     13 27 02 FB | 	rdlong	local15, local15
09004     20 4E 05 F1 | 	add	fp, #32
09008     A7 28 02 FB | 	rdlong	local16, fp
0900c     14 27 02 F1 | 	add	local15, local16
09010     14 1E 06 F1 | 	add	local11, #20
09014     0F 27 62 FC | 	wrlong	local15, local11
09018     20 4E 85 F1 | 	sub	fp, #32
0901c     A7 2A 02 FB | 	rdlong	local17, fp
09020     15 1F 02 F6 | 	mov	local11, local17
09024     15 2D 02 F6 | 	mov	local18, local17
09028     04 4E 85 F1 | 	sub	fp, #4
0902c     14 2A 06 F1 | 	add	local17, #20
09030     15 2F 02 FB | 	rdlong	local19, local17
09034     0C 2C 06 F1 | 	add	local18, #12
09038     16 31 02 FB | 	rdlong	local20, local18
0903c     18 2F 1A F2 | 	cmp	local19, local20 wcz
09040     24 00 90 ED |  if_be	jmp	#LR__1190
09044     04 4E 05 F1 | 	add	fp, #4
09048     A7 12 02 FB | 	rdlong	local05, fp
0904c     04 4E 85 F1 | 	sub	fp, #4
09050     09 0F 02 F6 | 	mov	local03, local05
09054     14 0E 06 F1 | 	add	local03, #20
09058     07 11 02 FB | 	rdlong	local04, local03
0905c     14 0E 86 F1 | 	sub	local03, #20
09060     08 33 02 F6 | 	mov	local21, local04
09064     20 00 90 FD | 	jmp	#LR__1191
09068                 | LR__1190
09068     04 4E 05 F1 | 	add	fp, #4
0906c     A7 16 02 FB | 	rdlong	local07, fp
09070     04 4E 85 F1 | 	sub	fp, #4
09074     0B 1D 02 F6 | 	mov	local10, local07
09078     0C 1C 06 F1 | 	add	local10, #12
0907c     0E 19 02 FB | 	rdlong	local08, local10
09080     0C 1C 86 F1 | 	sub	local10, #12
09084     0C 33 02 F6 | 	mov	local21, local08
09088                 | LR__1191
09088     0C 1E 06 F1 | 	add	local11, #12
0908c     0F 33 62 FC | 	wrlong	local21, local11
09090     5C F9 9F FD | 	jmp	#LR__1173
09094                 | LR__1192
09094     04 4E 05 F1 | 	add	fp, #4
09098     A7 20 02 FB | 	rdlong	local12, fp
0909c     10 0B 02 F6 | 	mov	local01, local12
090a0     04 4E 85 F1 | 	sub	fp, #4
090a4     10 20 06 F1 | 	add	local12, #16
090a8     10 1F C2 FA | 	rdbyte	local11, local12
090ac     40 1E 46 F5 | 	or	local11, #64
090b0     10 0A 06 F1 | 	add	local01, #16
090b4     05 1F 42 FC | 	wrbyte	local11, local01
090b8                 | ' 
090b8                 | ' 
090b8                 | ' 
090b8                 | ' 
090b8                 | ' 
090b8                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
090b8                 | ' 		fp->flag |=  0x80 ;
090b8                 | ' 
090b8                 | ' 	}
090b8                 | ' 
090b8                 | ' 	fp->flag |=  0x40 ;
090b8                 | ' 
090b8                 | ' 	return FR_OK ;
090b8     00 EA 05 F6 | 	mov	result1, #0
090bc                 | LR__1193
090bc     A7 F0 03 F6 | 	mov	ptra, fp
090c0     B2 00 A0 FD | 	call	#popregs_
090c4                 | _fatfs_cc_f_write_ret
090c4     2D 00 64 FD | 	ret
090c8                 | 
090c8                 | _fatfs_cc_f_sync
090c8     00 4A 05 F6 | 	mov	COUNT_, #0
090cc     A8 00 A0 FD | 	call	#pushregs_
090d0     18 F0 07 F1 | 	add	ptra, #24
090d4     04 4E 05 F1 | 	add	fp, #4
090d8     A7 00 62 FC | 	wrlong	arg01, fp
090dc     08 4E 05 F1 | 	add	fp, #8
090e0     A7 02 02 F6 | 	mov	arg02, fp
090e4     0C 4E 85 F1 | 	sub	fp, #12
090e8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
090ec     08 4E 05 F1 | 	add	fp, #8
090f0     A7 EA 61 FC | 	wrlong	result1, fp
090f4     08 4E 85 F1 | 	sub	fp, #8
090f8     00 EA 0D F2 | 	cmp	result1, #0 wz
090fc     C0 01 90 5D |  if_ne	jmp	#LR__1203
09100     04 4E 05 F1 | 	add	fp, #4
09104     A7 06 02 FB | 	rdlong	arg04, fp
09108     04 4E 85 F1 | 	sub	fp, #4
0910c     10 06 06 F1 | 	add	arg04, #16
09110     03 07 C2 FA | 	rdbyte	arg04, arg04
09114     40 06 CE F7 | 	test	arg04, #64 wz
09118     A4 01 90 AD |  if_e	jmp	#LR__1202
0911c     04 4E 05 F1 | 	add	fp, #4
09120     A7 06 02 FB | 	rdlong	arg04, fp
09124     04 4E 85 F1 | 	sub	fp, #4
09128     10 06 06 F1 | 	add	arg04, #16
0912c     03 07 C2 FA | 	rdbyte	arg04, arg04
09130     80 06 CE F7 | 	test	arg04, #128 wz
09134     64 00 90 AD |  if_e	jmp	#LR__1200
09138     0C 4E 05 F1 | 	add	fp, #12
0913c     A7 06 02 FB | 	rdlong	arg04, fp
09140     01 06 06 F1 | 	add	arg04, #1
09144     03 01 C2 FA | 	rdbyte	arg01, arg04
09148     08 4E 85 F1 | 	sub	fp, #8
0914c     A7 06 02 FB | 	rdlong	arg04, fp
09150     03 03 02 F6 | 	mov	arg02, arg04
09154     28 02 06 F1 | 	add	arg02, #40
09158     04 4E 85 F1 | 	sub	fp, #4
0915c     1C 06 06 F1 | 	add	arg04, #28
09160     03 05 02 FB | 	rdlong	arg03, arg04
09164     01 06 06 F6 | 	mov	arg04, #1
09168     0C AE BF FD | 	call	#_fatfs_cc_disk_write
0916c     00 EA 0D F2 | 	cmp	result1, #0 wz
09170     01 EA 05 56 |  if_ne	mov	result1, #1
09174     54 01 90 5D |  if_ne	jmp	#LR__1204
09178     04 4E 05 F1 | 	add	fp, #4
0917c     A7 06 02 FB | 	rdlong	arg04, fp
09180     03 05 02 F6 | 	mov	arg03, arg04
09184     04 4E 85 F1 | 	sub	fp, #4
09188     10 06 06 F1 | 	add	arg04, #16
0918c     03 07 C2 FA | 	rdbyte	arg04, arg04
09190     7F 06 06 F5 | 	and	arg04, #127
09194     10 04 06 F1 | 	add	arg03, #16
09198     02 07 42 FC | 	wrbyte	arg04, arg03
0919c                 | LR__1200
0919c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
091a0     10 4E 05 F1 | 	add	fp, #16
091a4     A7 EA 61 FC | 	wrlong	result1, fp
091a8     04 4E 85 F1 | 	sub	fp, #4
091ac     A7 00 02 FB | 	rdlong	arg01, fp
091b0     08 4E 85 F1 | 	sub	fp, #8
091b4     A7 06 02 FB | 	rdlong	arg04, fp
091b8     04 4E 85 F1 | 	sub	fp, #4
091bc     20 06 06 F1 | 	add	arg04, #32
091c0     03 03 02 FB | 	rdlong	arg02, arg04
091c4     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
091c8     08 4E 05 F1 | 	add	fp, #8
091cc     A7 EA 61 FC | 	wrlong	result1, fp
091d0     08 4E 85 F1 | 	sub	fp, #8
091d4     00 EA 0D F2 | 	cmp	result1, #0 wz
091d8     E4 00 90 5D |  if_ne	jmp	#LR__1201
091dc     04 4E 05 F1 | 	add	fp, #4
091e0     A7 06 02 FB | 	rdlong	arg04, fp
091e4     24 06 06 F1 | 	add	arg04, #36
091e8     03 07 02 FB | 	rdlong	arg04, arg04
091ec     10 4E 05 F1 | 	add	fp, #16
091f0     A7 06 62 FC | 	wrlong	arg04, fp
091f4     03 05 02 F6 | 	mov	arg03, arg04
091f8     0B 04 06 F1 | 	add	arg03, #11
091fc     02 05 C2 FA | 	rdbyte	arg03, arg03
09200     20 04 46 F5 | 	or	arg03, #32
09204     0B 06 06 F1 | 	add	arg04, #11
09208     03 05 42 FC | 	wrbyte	arg03, arg04
0920c     10 4E 85 F1 | 	sub	fp, #16
09210     A7 06 02 FB | 	rdlong	arg04, fp
09214     03 01 02 FB | 	rdlong	arg01, arg04
09218     10 4E 05 F1 | 	add	fp, #16
0921c     A7 02 02 FB | 	rdlong	arg02, fp
09220     14 4E 85 F1 | 	sub	fp, #20
09224     08 06 06 F1 | 	add	arg04, #8
09228     03 05 02 FB | 	rdlong	arg03, arg04
0922c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
09230     14 4E 05 F1 | 	add	fp, #20
09234     A7 00 02 FB | 	rdlong	arg01, fp
09238     1C 00 06 F1 | 	add	arg01, #28
0923c     10 4E 85 F1 | 	sub	fp, #16
09240     A7 06 02 FB | 	rdlong	arg04, fp
09244     0C 06 06 F1 | 	add	arg04, #12
09248     03 03 02 FB | 	rdlong	arg02, arg04
0924c     00 03 62 FC | 	wrlong	arg02, arg01
09250     10 4E 05 F1 | 	add	fp, #16
09254     A7 00 02 FB | 	rdlong	arg01, fp
09258     16 00 06 F1 | 	add	arg01, #22
0925c     04 4E 85 F1 | 	sub	fp, #4
09260     A7 02 02 FB | 	rdlong	arg02, fp
09264     00 03 62 FC | 	wrlong	arg02, arg01
09268     04 4E 05 F1 | 	add	fp, #4
0926c     A7 00 02 FB | 	rdlong	arg01, fp
09270     12 00 06 F1 | 	add	arg01, #18
09274     00 01 58 FC | 	wrword	#0, arg01
09278     08 4E 85 F1 | 	sub	fp, #8
0927c     A7 06 02 FB | 	rdlong	arg04, fp
09280     03 06 06 F1 | 	add	arg04, #3
09284     03 03 48 FC | 	wrbyte	#1, arg04
09288     A7 00 02 FB | 	rdlong	arg01, fp
0928c     0C 4E 85 F1 | 	sub	fp, #12
09290     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
09294     08 4E 05 F1 | 	add	fp, #8
09298     A7 EA 61 FC | 	wrlong	result1, fp
0929c     04 4E 85 F1 | 	sub	fp, #4
092a0     A7 06 02 FB | 	rdlong	arg04, fp
092a4     03 05 02 F6 | 	mov	arg03, arg04
092a8     04 4E 85 F1 | 	sub	fp, #4
092ac     10 06 06 F1 | 	add	arg04, #16
092b0     03 07 C2 FA | 	rdbyte	arg04, arg04
092b4     BF 06 06 F5 | 	and	arg04, #191
092b8     10 04 06 F1 | 	add	arg03, #16
092bc     02 07 42 FC | 	wrbyte	arg04, arg03
092c0                 | LR__1201
092c0                 | LR__1202
092c0                 | LR__1203
092c0                 | ' 					dir = fp->dir_ptr;
092c0                 | ' 					dir[ 11 ] |=  0x20 ;
092c0                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
092c0                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
092c0                 | ' 					st_dword(dir +  22 , tm);
092c0                 | ' 					st_word(dir +  18 , 0);
092c0                 | ' 					fs->wflag = 1;
092c0                 | ' 					res = sync_fs(fs);
092c0                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
092c0                 | ' 				}
092c0                 | ' 			}
092c0                 | ' 		}
092c0                 | ' 	}
092c0                 | ' 
092c0                 | ' 	return res ;
092c0     08 4E 05 F1 | 	add	fp, #8
092c4     A7 EA 01 FB | 	rdlong	result1, fp
092c8     08 4E 85 F1 | 	sub	fp, #8
092cc                 | LR__1204
092cc     A7 F0 03 F6 | 	mov	ptra, fp
092d0     B2 00 A0 FD | 	call	#popregs_
092d4                 | _fatfs_cc_f_sync_ret
092d4     2D 00 64 FD | 	ret
092d8                 | 
092d8                 | _fatfs_cc_f_close
092d8     01 4A 05 F6 | 	mov	COUNT_, #1
092dc     A8 00 A0 FD | 	call	#pushregs_
092e0     10 F0 07 F1 | 	add	ptra, #16
092e4     04 4E 05 F1 | 	add	fp, #4
092e8     A7 00 62 FC | 	wrlong	arg01, fp
092ec     04 4E 85 F1 | 	sub	fp, #4
092f0     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
092f4     08 4E 05 F1 | 	add	fp, #8
092f8     A7 EA 61 FC | 	wrlong	result1, fp
092fc     08 4E 85 F1 | 	sub	fp, #8
09300     00 EA 0D F2 | 	cmp	result1, #0 wz
09304     38 00 90 5D |  if_ne	jmp	#LR__1210
09308     04 4E 05 F1 | 	add	fp, #4
0930c     A7 00 02 FB | 	rdlong	arg01, fp
09310     08 4E 05 F1 | 	add	fp, #8
09314     A7 02 02 F6 | 	mov	arg02, fp
09318     0C 4E 85 F1 | 	sub	fp, #12
0931c     9C E6 BF FD | 	call	#_fatfs_cc_validate
09320     08 4E 05 F1 | 	add	fp, #8
09324     A7 EA 61 FC | 	wrlong	result1, fp
09328     08 4E 85 F1 | 	sub	fp, #8
0932c     00 EA 0D F2 | 	cmp	result1, #0 wz
09330     04 4E 05 A1 |  if_e	add	fp, #4
09334     A7 0A 02 AB |  if_e	rdlong	local01, fp
09338     04 4E 85 A1 |  if_e	sub	fp, #4
0933c     05 01 68 AC |  if_e	wrlong	#0, local01
09340                 | LR__1210
09340                 | ' 
09340                 | ' 
09340                 | ' 
09340                 | ' 
09340                 | ' 			fp->obj.fs = 0;
09340                 | ' #line 4192 "ff.c"
09340                 | ' 		}
09340                 | ' 	}
09340                 | ' 	return res;
09340     08 4E 05 F1 | 	add	fp, #8
09344     A7 EA 01 FB | 	rdlong	result1, fp
09348     08 4E 85 F1 | 	sub	fp, #8
0934c     A7 F0 03 F6 | 	mov	ptra, fp
09350     B2 00 A0 FD | 	call	#popregs_
09354                 | _fatfs_cc_f_close_ret
09354     2D 00 64 FD | 	ret
09358                 | 
09358                 | _fatfs_cc_f_lseek
09358     00 4A 05 F6 | 	mov	COUNT_, #0
0935c     A8 00 A0 FD | 	call	#pushregs_
09360     24 F0 07 F1 | 	add	ptra, #36
09364     04 4E 05 F1 | 	add	fp, #4
09368     A7 00 62 FC | 	wrlong	arg01, fp
0936c     04 4E 05 F1 | 	add	fp, #4
09370     A7 02 62 FC | 	wrlong	arg02, fp
09374     04 4E 85 F1 | 	sub	fp, #4
09378     A7 00 02 FB | 	rdlong	arg01, fp
0937c     0C 4E 05 F1 | 	add	fp, #12
09380     A7 02 02 F6 | 	mov	arg02, fp
09384     10 4E 85 F1 | 	sub	fp, #16
09388     30 E6 BF FD | 	call	#_fatfs_cc_validate
0938c     0C 4E 05 F1 | 	add	fp, #12
09390     A7 EA 61 FC | 	wrlong	result1, fp
09394     0C 4E 85 F1 | 	sub	fp, #12
09398     00 EA 0D F2 | 	cmp	result1, #0 wz
0939c     1C 00 90 5D |  if_ne	jmp	#LR__1220
093a0     04 4E 05 F1 | 	add	fp, #4
093a4     A7 06 02 FB | 	rdlong	arg04, fp
093a8     11 06 06 F1 | 	add	arg04, #17
093ac     03 07 C2 FA | 	rdbyte	arg04, arg04
093b0     08 4E 05 F1 | 	add	fp, #8
093b4     A7 06 62 FC | 	wrlong	arg04, fp
093b8     0C 4E 85 F1 | 	sub	fp, #12
093bc                 | LR__1220
093bc     0C 4E 05 F1 | 	add	fp, #12
093c0     A7 06 0A FB | 	rdlong	arg04, fp wz
093c4     0C 4E 85 F1 | 	sub	fp, #12
093c8     0C 4E 05 51 |  if_ne	add	fp, #12
093cc     A7 EA 01 5B |  if_ne	rdlong	result1, fp
093d0     0C 4E 85 51 |  if_ne	sub	fp, #12
093d4     40 06 90 5D |  if_ne	jmp	#LR__1243
093d8     04 4E 05 F1 | 	add	fp, #4
093dc     A7 06 02 FB | 	rdlong	arg04, fp
093e0     04 4E 05 F1 | 	add	fp, #4
093e4     A7 04 02 FB | 	rdlong	arg03, fp
093e8     08 4E 85 F1 | 	sub	fp, #8
093ec     0C 06 06 F1 | 	add	arg04, #12
093f0     03 07 02 FB | 	rdlong	arg04, arg04
093f4     03 05 1A F2 | 	cmp	arg03, arg04 wcz
093f8     3C 00 90 ED |  if_be	jmp	#LR__1221
093fc     04 4E 05 F1 | 	add	fp, #4
09400     A7 04 02 FB | 	rdlong	arg03, fp
09404     04 4E 85 F1 | 	sub	fp, #4
09408     10 04 06 F1 | 	add	arg03, #16
0940c     02 05 C2 FA | 	rdbyte	arg03, arg03
09410     02 05 E2 F8 | 	getbyte	arg03, arg03, #0
09414     02 04 CE F7 | 	test	arg03, #2 wz
09418     1C 00 90 5D |  if_ne	jmp	#LR__1221
0941c     04 4E 05 F1 | 	add	fp, #4
09420     A7 04 02 FB | 	rdlong	arg03, fp
09424     0C 04 06 F1 | 	add	arg03, #12
09428     02 05 02 FB | 	rdlong	arg03, arg03
0942c     04 4E 05 F1 | 	add	fp, #4
09430     A7 04 62 FC | 	wrlong	arg03, fp
09434     08 4E 85 F1 | 	sub	fp, #8
09438                 | LR__1221
09438     04 4E 05 F1 | 	add	fp, #4
0943c     A7 04 02 FB | 	rdlong	arg03, fp
09440     14 04 06 F1 | 	add	arg03, #20
09444     02 05 02 FB | 	rdlong	arg03, arg03
09448     1C 4E 05 F1 | 	add	fp, #28
0944c     A7 04 62 FC | 	wrlong	arg03, fp
09450     1C 4E 85 F1 | 	sub	fp, #28
09454     A7 04 02 FB | 	rdlong	arg03, fp
09458     18 4E 05 F1 | 	add	fp, #24
0945c     A7 00 68 FC | 	wrlong	#0, fp
09460     14 04 06 F1 | 	add	arg03, #20
09464     02 01 68 FC | 	wrlong	#0, arg03
09468     14 4E 85 F1 | 	sub	fp, #20
0946c     A7 04 02 FB | 	rdlong	arg03, fp
09470     08 4E 85 F1 | 	sub	fp, #8
09474     01 04 16 F2 | 	cmp	arg03, #1 wc
09478     E4 03 90 CD |  if_b	jmp	#LR__1237
0947c     10 4E 05 F1 | 	add	fp, #16
09480     A7 04 02 FB | 	rdlong	arg03, fp
09484     0A 04 06 F1 | 	add	arg03, #10
09488     02 07 E2 FA | 	rdword	arg04, arg03
0948c     09 06 66 F0 | 	shl	arg04, #9
09490     08 4E 05 F1 | 	add	fp, #8
09494     A7 06 62 FC | 	wrlong	arg04, fp
09498     08 4E 05 F1 | 	add	fp, #8
0949c     A7 06 02 FB | 	rdlong	arg04, fp
094a0     20 4E 85 F1 | 	sub	fp, #32
094a4     01 06 16 F2 | 	cmp	arg04, #1 wc
094a8     AC 00 90 CD |  if_b	jmp	#LR__1222
094ac     08 4E 05 F1 | 	add	fp, #8
094b0     A7 06 02 FB | 	rdlong	arg04, fp
094b4     01 06 86 F1 | 	sub	arg04, #1
094b8     10 4E 05 F1 | 	add	fp, #16
094bc     A7 04 02 FB | 	rdlong	arg03, fp
094c0     02 07 12 FD | 	qdiv	arg04, arg03
094c4     08 4E 05 F1 | 	add	fp, #8
094c8     A7 EA 01 FB | 	rdlong	result1, fp
094cc     01 EA 85 F1 | 	sub	result1, #1
094d0     18 06 62 FD | 	getqx	arg04
094d4     02 EB 11 FD | 	qdiv	result1, arg03
094d8     20 4E 85 F1 | 	sub	fp, #32
094dc     18 04 62 FD | 	getqx	arg03
094e0     02 07 12 F2 | 	cmp	arg04, arg03 wc
094e4     70 00 90 CD |  if_b	jmp	#LR__1222
094e8     04 4E 05 F1 | 	add	fp, #4
094ec     A7 04 02 FB | 	rdlong	arg03, fp
094f0     1C 4E 05 F1 | 	add	fp, #28
094f4     A7 EA 01 FB | 	rdlong	result1, fp
094f8     01 EA 85 F1 | 	sub	result1, #1
094fc     08 4E 85 F1 | 	sub	fp, #8
09500     A7 06 02 FB | 	rdlong	arg04, fp
09504     01 06 86 F1 | 	sub	arg04, #1
09508     03 EB 21 F5 | 	andn	result1, arg04
0950c     14 04 06 F1 | 	add	arg03, #20
09510     02 EB 61 FC | 	wrlong	result1, arg03
09514     10 4E 85 F1 | 	sub	fp, #16
09518     A7 04 02 FB | 	rdlong	arg03, fp
0951c     04 4E 85 F1 | 	sub	fp, #4
09520     A7 06 02 FB | 	rdlong	arg04, fp
09524     14 06 06 F1 | 	add	arg04, #20
09528     03 07 02 FB | 	rdlong	arg04, arg04
0952c     03 05 82 F1 | 	sub	arg03, arg04
09530     04 4E 05 F1 | 	add	fp, #4
09534     A7 04 62 FC | 	wrlong	arg03, fp
09538     04 4E 85 F1 | 	sub	fp, #4
0953c     A7 04 02 FB | 	rdlong	arg03, fp
09540     18 04 06 F1 | 	add	arg03, #24
09544     02 05 02 FB | 	rdlong	arg03, arg03
09548     10 4E 05 F1 | 	add	fp, #16
0954c     A7 04 62 FC | 	wrlong	arg03, fp
09550     14 4E 85 F1 | 	sub	fp, #20
09554     D0 00 90 FD | 	jmp	#LR__1226
09558                 | LR__1222
09558     04 4E 05 F1 | 	add	fp, #4
0955c     A7 04 02 FB | 	rdlong	arg03, fp
09560     08 04 06 F1 | 	add	arg03, #8
09564     02 05 0A FB | 	rdlong	arg03, arg03 wz
09568     10 4E 05 F1 | 	add	fp, #16
0956c     A7 04 62 FC | 	wrlong	arg03, fp
09570     14 4E 85 F1 | 	sub	fp, #20
09574     94 00 90 5D |  if_ne	jmp	#LR__1225
09578     04 4E 05 F1 | 	add	fp, #4
0957c     A7 00 02 FB | 	rdlong	arg01, fp
09580     04 4E 85 F1 | 	sub	fp, #4
09584     00 02 06 F6 | 	mov	arg02, #0
09588     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
0958c     14 4E 05 F1 | 	add	fp, #20
09590     A7 EA 61 FC | 	wrlong	result1, fp
09594     14 4E 85 F1 | 	sub	fp, #20
09598     01 EA 0D F2 | 	cmp	result1, #1 wz
0959c     1C 00 90 5D |  if_ne	jmp	#LR__1223
095a0     04 4E 05 F1 | 	add	fp, #4
095a4     A7 04 02 FB | 	rdlong	arg03, fp
095a8     04 4E 85 F1 | 	sub	fp, #4
095ac     11 04 06 F1 | 	add	arg03, #17
095b0     02 05 48 FC | 	wrbyte	#2, arg03
095b4     02 EA 05 F6 | 	mov	result1, #2
095b8     5C 04 90 FD | 	jmp	#LR__1243
095bc                 | LR__1223
095bc     14 4E 05 F1 | 	add	fp, #20
095c0     A7 EA 01 FB | 	rdlong	result1, fp
095c4     14 4E 85 F1 | 	sub	fp, #20
095c8     FF FF 7F FF 
095cc     FF EB 0D F2 | 	cmp	result1, ##-1 wz
095d0     1C 00 90 5D |  if_ne	jmp	#LR__1224
095d4     04 4E 05 F1 | 	add	fp, #4
095d8     A7 04 02 FB | 	rdlong	arg03, fp
095dc     04 4E 85 F1 | 	sub	fp, #4
095e0     11 04 06 F1 | 	add	arg03, #17
095e4     02 03 48 FC | 	wrbyte	#1, arg03
095e8     01 EA 05 F6 | 	mov	result1, #1
095ec     28 04 90 FD | 	jmp	#LR__1243
095f0                 | LR__1224
095f0     04 4E 05 F1 | 	add	fp, #4
095f4     A7 04 02 FB | 	rdlong	arg03, fp
095f8     10 4E 05 F1 | 	add	fp, #16
095fc     A7 06 02 FB | 	rdlong	arg04, fp
09600     14 4E 85 F1 | 	sub	fp, #20
09604     08 04 06 F1 | 	add	arg03, #8
09608     02 07 62 FC | 	wrlong	arg04, arg03
0960c                 | LR__1225
0960c     04 4E 05 F1 | 	add	fp, #4
09610     A7 04 02 FB | 	rdlong	arg03, fp
09614     10 4E 05 F1 | 	add	fp, #16
09618     A7 06 02 FB | 	rdlong	arg04, fp
0961c     14 4E 85 F1 | 	sub	fp, #20
09620     18 04 06 F1 | 	add	arg03, #24
09624     02 07 62 FC | 	wrlong	arg04, arg03
09628                 | LR__1226
09628     14 4E 05 F1 | 	add	fp, #20
0962c     A7 04 0A FB | 	rdlong	arg03, fp wz
09630     14 4E 85 F1 | 	sub	fp, #20
09634     28 02 90 AD |  if_e	jmp	#LR__1236
09638                 | ' 				while (ofs > bcs) {
09638                 | LR__1227
09638     08 4E 05 F1 | 	add	fp, #8
0963c     A7 06 02 FB | 	rdlong	arg04, fp
09640     10 4E 05 F1 | 	add	fp, #16
09644     A7 04 02 FB | 	rdlong	arg03, fp
09648     18 4E 85 F1 | 	sub	fp, #24
0964c     02 07 1A F2 | 	cmp	arg04, arg03 wcz
09650     68 01 90 ED |  if_be	jmp	#LR__1233
09654     08 4E 05 F1 | 	add	fp, #8
09658     A7 06 02 FB | 	rdlong	arg04, fp
0965c     10 4E 05 F1 | 	add	fp, #16
09660     A7 04 02 FB | 	rdlong	arg03, fp
09664     02 07 82 F1 | 	sub	arg04, arg03
09668     10 4E 85 F1 | 	sub	fp, #16
0966c     A7 06 62 FC | 	wrlong	arg04, fp
09670     04 4E 85 F1 | 	sub	fp, #4
09674     A7 06 02 FB | 	rdlong	arg04, fp
09678     03 EB 01 F6 | 	mov	result1, arg04
0967c     14 06 06 F1 | 	add	arg04, #20
09680     03 07 02 FB | 	rdlong	arg04, arg04
09684     14 4E 05 F1 | 	add	fp, #20
09688     A7 04 02 FB | 	rdlong	arg03, fp
0968c     02 07 02 F1 | 	add	arg04, arg03
09690     14 EA 05 F1 | 	add	result1, #20
09694     F5 06 62 FC | 	wrlong	arg04, result1
09698     14 4E 85 F1 | 	sub	fp, #20
0969c     A7 04 02 FB | 	rdlong	arg03, fp
096a0     04 4E 85 F1 | 	sub	fp, #4
096a4     10 04 06 F1 | 	add	arg03, #16
096a8     02 05 C2 FA | 	rdbyte	arg03, arg03
096ac     02 04 CE F7 | 	test	arg03, #2 wz
096b0     3C 00 90 AD |  if_e	jmp	#LR__1228
096b4     04 4E 05 F1 | 	add	fp, #4
096b8     A7 00 02 FB | 	rdlong	arg01, fp
096bc     10 4E 05 F1 | 	add	fp, #16
096c0     A7 02 02 FB | 	rdlong	arg02, fp
096c4     14 4E 85 F1 | 	sub	fp, #20
096c8     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
096cc     14 4E 05 F1 | 	add	fp, #20
096d0     A7 EA 61 FC | 	wrlong	result1, fp
096d4     00 EA 4D F2 | 	cmps	result1, #0 wz
096d8     14 4E 85 F1 | 	sub	fp, #20
096dc     08 4E 05 A1 |  if_e	add	fp, #8
096e0     A7 00 68 AC |  if_e	wrlong	#0, fp
096e4     08 4E 85 A1 |  if_e	sub	fp, #8
096e8                 | ' 							ofs = 0; break;
096e8     D0 00 90 AD |  if_e	jmp	#LR__1233
096ec     24 00 90 FD | 	jmp	#LR__1229
096f0                 | LR__1228
096f0     04 4E 05 F1 | 	add	fp, #4
096f4     A7 00 02 FB | 	rdlong	arg01, fp
096f8     10 4E 05 F1 | 	add	fp, #16
096fc     A7 02 02 FB | 	rdlong	arg02, fp
09700     14 4E 85 F1 | 	sub	fp, #20
09704     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
09708     14 4E 05 F1 | 	add	fp, #20
0970c     A7 EA 61 FC | 	wrlong	result1, fp
09710     14 4E 85 F1 | 	sub	fp, #20
09714                 | LR__1229
09714     14 4E 05 F1 | 	add	fp, #20
09718     A7 04 02 FB | 	rdlong	arg03, fp
0971c     14 4E 85 F1 | 	sub	fp, #20
09720     FF FF 7F FF 
09724     FF 05 0E F2 | 	cmp	arg03, ##-1 wz
09728     1C 00 90 5D |  if_ne	jmp	#LR__1230
0972c     04 4E 05 F1 | 	add	fp, #4
09730     A7 04 02 FB | 	rdlong	arg03, fp
09734     04 4E 85 F1 | 	sub	fp, #4
09738     11 04 06 F1 | 	add	arg03, #17
0973c     02 03 48 FC | 	wrbyte	#1, arg03
09740     01 EA 05 F6 | 	mov	result1, #1
09744     D0 02 90 FD | 	jmp	#LR__1243
09748                 | LR__1230
09748     14 4E 05 F1 | 	add	fp, #20
0974c     A7 04 02 FB | 	rdlong	arg03, fp
09750     14 4E 85 F1 | 	sub	fp, #20
09754     02 04 16 F2 | 	cmp	arg03, #2 wc
09758     24 00 90 CD |  if_b	jmp	#LR__1231
0975c     10 4E 05 F1 | 	add	fp, #16
09760     A7 06 02 FB | 	rdlong	arg04, fp
09764     04 4E 05 F1 | 	add	fp, #4
09768     A7 04 02 FB | 	rdlong	arg03, fp
0976c     14 4E 85 F1 | 	sub	fp, #20
09770     18 06 06 F1 | 	add	arg04, #24
09774     03 07 02 FB | 	rdlong	arg04, arg04
09778     03 05 12 F2 | 	cmp	arg03, arg04 wc
0977c     1C 00 90 CD |  if_b	jmp	#LR__1232
09780                 | LR__1231
09780     04 4E 05 F1 | 	add	fp, #4
09784     A7 04 02 FB | 	rdlong	arg03, fp
09788     04 4E 85 F1 | 	sub	fp, #4
0978c     11 04 06 F1 | 	add	arg03, #17
09790     02 05 48 FC | 	wrbyte	#2, arg03
09794     02 EA 05 F6 | 	mov	result1, #2
09798     7C 02 90 FD | 	jmp	#LR__1243
0979c                 | LR__1232
0979c     04 4E 05 F1 | 	add	fp, #4
097a0     A7 06 02 FB | 	rdlong	arg04, fp
097a4     10 4E 05 F1 | 	add	fp, #16
097a8     A7 04 02 FB | 	rdlong	arg03, fp
097ac     14 4E 85 F1 | 	sub	fp, #20
097b0     18 06 06 F1 | 	add	arg04, #24
097b4     03 05 62 FC | 	wrlong	arg03, arg04
097b8     7C FE 9F FD | 	jmp	#LR__1227
097bc                 | LR__1233
097bc     04 4E 05 F1 | 	add	fp, #4
097c0     A7 04 02 FB | 	rdlong	arg03, fp
097c4     02 01 02 F6 | 	mov	arg01, arg03
097c8     14 04 06 F1 | 	add	arg03, #20
097cc     02 03 02 FB | 	rdlong	arg02, arg03
097d0     04 4E 05 F1 | 	add	fp, #4
097d4     A7 04 02 FB | 	rdlong	arg03, fp
097d8     02 03 02 F1 | 	add	arg02, arg03
097dc     14 00 06 F1 | 	add	arg01, #20
097e0     00 03 62 FC | 	wrlong	arg02, arg01
097e4     A7 04 02 FB | 	rdlong	arg03, fp
097e8     08 4E 85 F1 | 	sub	fp, #8
097ec     FF 05 CE F7 | 	test	arg03, #511 wz
097f0     6C 00 90 AD |  if_e	jmp	#LR__1235
097f4     10 4E 05 F1 | 	add	fp, #16
097f8     A7 00 02 FB | 	rdlong	arg01, fp
097fc     04 4E 05 F1 | 	add	fp, #4
09800     A7 02 02 FB | 	rdlong	arg02, fp
09804     14 4E 85 F1 | 	sub	fp, #20
09808     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
0980c     1C 4E 05 F1 | 	add	fp, #28
09810     A7 EA 61 FC | 	wrlong	result1, fp
09814     1C 4E 85 F1 | 	sub	fp, #28
09818     00 EA 0D F2 | 	cmp	result1, #0 wz
0981c     1C 00 90 5D |  if_ne	jmp	#LR__1234
09820     04 4E 05 F1 | 	add	fp, #4
09824     A7 04 02 FB | 	rdlong	arg03, fp
09828     04 4E 85 F1 | 	sub	fp, #4
0982c     11 04 06 F1 | 	add	arg03, #17
09830     02 05 48 FC | 	wrbyte	#2, arg03
09834     02 EA 05 F6 | 	mov	result1, #2
09838     DC 01 90 FD | 	jmp	#LR__1243
0983c                 | LR__1234
0983c     1C 4E 05 F1 | 	add	fp, #28
09840     A7 06 02 FB | 	rdlong	arg04, fp
09844     14 4E 85 F1 | 	sub	fp, #20
09848     A7 04 02 FB | 	rdlong	arg03, fp
0984c     09 04 46 F0 | 	shr	arg03, #9
09850     02 07 02 F1 | 	add	arg04, arg03
09854     14 4E 05 F1 | 	add	fp, #20
09858     A7 06 62 FC | 	wrlong	arg04, fp
0985c     1C 4E 85 F1 | 	sub	fp, #28
09860                 | LR__1235
09860                 | LR__1236
09860                 | LR__1237
09860     04 4E 05 F1 | 	add	fp, #4
09864     A7 06 02 FB | 	rdlong	arg04, fp
09868     03 05 02 F6 | 	mov	arg03, arg04
0986c     04 4E 85 F1 | 	sub	fp, #4
09870     14 04 06 F1 | 	add	arg03, #20
09874     02 05 02 FB | 	rdlong	arg03, arg03
09878     0C 06 06 F1 | 	add	arg04, #12
0987c     03 07 02 FB | 	rdlong	arg04, arg04
09880     03 05 1A F2 | 	cmp	arg03, arg04 wcz
09884     3C 00 90 ED |  if_be	jmp	#LR__1238
09888     04 4E 05 F1 | 	add	fp, #4
0988c     A7 06 02 FB | 	rdlong	arg04, fp
09890     03 05 02 F6 | 	mov	arg03, arg04
09894     14 06 06 F1 | 	add	arg04, #20
09898     03 07 02 FB | 	rdlong	arg04, arg04
0989c     0C 04 06 F1 | 	add	arg03, #12
098a0     02 07 62 FC | 	wrlong	arg04, arg03
098a4     A7 06 02 FB | 	rdlong	arg04, fp
098a8     03 05 02 F6 | 	mov	arg03, arg04
098ac     04 4E 85 F1 | 	sub	fp, #4
098b0     10 06 06 F1 | 	add	arg04, #16
098b4     03 07 C2 FA | 	rdbyte	arg04, arg04
098b8     40 06 46 F5 | 	or	arg04, #64
098bc     10 04 06 F1 | 	add	arg03, #16
098c0     02 07 42 FC | 	wrbyte	arg04, arg03
098c4                 | LR__1238
098c4     04 4E 05 F1 | 	add	fp, #4
098c8     A7 04 02 FB | 	rdlong	arg03, fp
098cc     04 4E 85 F1 | 	sub	fp, #4
098d0     14 04 06 F1 | 	add	arg03, #20
098d4     02 05 02 FB | 	rdlong	arg03, arg03
098d8     FF 05 CE F7 | 	test	arg03, #511 wz
098dc     2C 01 90 AD |  if_e	jmp	#LR__1242
098e0     04 4E 05 F1 | 	add	fp, #4
098e4     A7 06 02 FB | 	rdlong	arg04, fp
098e8     18 4E 05 F1 | 	add	fp, #24
098ec     A7 04 02 FB | 	rdlong	arg03, fp
098f0     1C 4E 85 F1 | 	sub	fp, #28
098f4     1C 06 06 F1 | 	add	arg04, #28
098f8     03 07 02 FB | 	rdlong	arg04, arg04
098fc     03 05 0A F2 | 	cmp	arg03, arg04 wz
09900     08 01 90 AD |  if_e	jmp	#LR__1242
09904     04 4E 05 F1 | 	add	fp, #4
09908     A7 04 02 FB | 	rdlong	arg03, fp
0990c     04 4E 85 F1 | 	sub	fp, #4
09910     10 04 06 F1 | 	add	arg03, #16
09914     02 05 C2 FA | 	rdbyte	arg03, arg03
09918     80 04 CE F7 | 	test	arg03, #128 wz
0991c     7C 00 90 AD |  if_e	jmp	#LR__1240
09920     10 4E 05 F1 | 	add	fp, #16
09924     A7 04 02 FB | 	rdlong	arg03, fp
09928     01 04 06 F1 | 	add	arg03, #1
0992c     02 01 C2 FA | 	rdbyte	arg01, arg03
09930     0C 4E 85 F1 | 	sub	fp, #12
09934     A7 04 02 FB | 	rdlong	arg03, fp
09938     02 03 02 F6 | 	mov	arg02, arg03
0993c     28 02 06 F1 | 	add	arg02, #40
09940     04 4E 85 F1 | 	sub	fp, #4
09944     1C 04 06 F1 | 	add	arg03, #28
09948     02 05 02 FB | 	rdlong	arg03, arg03
0994c     01 06 06 F6 | 	mov	arg04, #1
09950     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
09954     00 EA 0D F2 | 	cmp	result1, #0 wz
09958     1C 00 90 AD |  if_e	jmp	#LR__1239
0995c     04 4E 05 F1 | 	add	fp, #4
09960     A7 04 02 FB | 	rdlong	arg03, fp
09964     04 4E 85 F1 | 	sub	fp, #4
09968     11 04 06 F1 | 	add	arg03, #17
0996c     02 03 48 FC | 	wrbyte	#1, arg03
09970     01 EA 05 F6 | 	mov	result1, #1
09974     A0 00 90 FD | 	jmp	#LR__1243
09978                 | LR__1239
09978     04 4E 05 F1 | 	add	fp, #4
0997c     A7 06 02 FB | 	rdlong	arg04, fp
09980     03 05 02 F6 | 	mov	arg03, arg04
09984     04 4E 85 F1 | 	sub	fp, #4
09988     10 06 06 F1 | 	add	arg04, #16
0998c     03 07 C2 FA | 	rdbyte	arg04, arg04
09990     7F 06 06 F5 | 	and	arg04, #127
09994     10 04 06 F1 | 	add	arg03, #16
09998     02 07 42 FC | 	wrbyte	arg04, arg03
0999c                 | LR__1240
0999c     10 4E 05 F1 | 	add	fp, #16
099a0     A7 04 02 FB | 	rdlong	arg03, fp
099a4     01 04 06 F1 | 	add	arg03, #1
099a8     02 01 C2 FA | 	rdbyte	arg01, arg03
099ac     0C 4E 85 F1 | 	sub	fp, #12
099b0     A7 02 02 FB | 	rdlong	arg02, fp
099b4     28 02 06 F1 | 	add	arg02, #40
099b8     18 4E 05 F1 | 	add	fp, #24
099bc     A7 04 02 FB | 	rdlong	arg03, fp
099c0     1C 4E 85 F1 | 	sub	fp, #28
099c4     01 06 06 F6 | 	mov	arg04, #1
099c8     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
099cc     00 EA 0D F2 | 	cmp	result1, #0 wz
099d0     1C 00 90 AD |  if_e	jmp	#LR__1241
099d4     04 4E 05 F1 | 	add	fp, #4
099d8     A7 04 02 FB | 	rdlong	arg03, fp
099dc     04 4E 85 F1 | 	sub	fp, #4
099e0     11 04 06 F1 | 	add	arg03, #17
099e4     02 03 48 FC | 	wrbyte	#1, arg03
099e8     01 EA 05 F6 | 	mov	result1, #1
099ec     28 00 90 FD | 	jmp	#LR__1243
099f0                 | LR__1241
099f0     04 4E 05 F1 | 	add	fp, #4
099f4     A7 06 02 FB | 	rdlong	arg04, fp
099f8     18 4E 05 F1 | 	add	fp, #24
099fc     A7 04 02 FB | 	rdlong	arg03, fp
09a00     1C 4E 85 F1 | 	sub	fp, #28
09a04     1C 06 06 F1 | 	add	arg04, #28
09a08     03 05 62 FC | 	wrlong	arg03, arg04
09a0c                 | LR__1242
09a0c                 | ' 
09a0c                 | ' 			fp->sect = nsect;
09a0c                 | ' 		}
09a0c                 | ' 	}
09a0c                 | ' 
09a0c                 | ' 	return res ;
09a0c     0C 4E 05 F1 | 	add	fp, #12
09a10     A7 EA 01 FB | 	rdlong	result1, fp
09a14     0C 4E 85 F1 | 	sub	fp, #12
09a18                 | LR__1243
09a18     A7 F0 03 F6 | 	mov	ptra, fp
09a1c     B2 00 A0 FD | 	call	#popregs_
09a20                 | _fatfs_cc_f_lseek_ret
09a20     2D 00 64 FD | 	ret
09a24                 | 
09a24                 | _fatfs_cc_f_opendir
09a24     01 4A 05 F6 | 	mov	COUNT_, #1
09a28     A8 00 A0 FD | 	call	#pushregs_
09a2c     14 F0 07 F1 | 	add	ptra, #20
09a30     04 4E 05 F1 | 	add	fp, #4
09a34     A7 00 62 FC | 	wrlong	arg01, fp
09a38     04 4E 05 F1 | 	add	fp, #4
09a3c     A7 02 62 FC | 	wrlong	arg02, fp
09a40     04 4E 85 F1 | 	sub	fp, #4
09a44     A7 04 0A FB | 	rdlong	arg03, fp wz
09a48     04 4E 85 F1 | 	sub	fp, #4
09a4c     09 EA 05 A6 |  if_e	mov	result1, #9
09a50     78 01 90 AD |  if_e	jmp	#LR__1256
09a54     08 4E 05 F1 | 	add	fp, #8
09a58     A7 00 02 F6 | 	mov	arg01, fp
09a5c     08 4E 05 F1 | 	add	fp, #8
09a60     A7 02 02 F6 | 	mov	arg02, fp
09a64     10 4E 85 F1 | 	sub	fp, #16
09a68     00 04 06 F6 | 	mov	arg03, #0
09a6c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
09a70     0C 4E 05 F1 | 	add	fp, #12
09a74     A7 EA 61 FC | 	wrlong	result1, fp
09a78     0C 4E 85 F1 | 	sub	fp, #12
09a7c     00 EA 0D F2 | 	cmp	result1, #0 wz
09a80     20 01 90 5D |  if_ne	jmp	#LR__1255
09a84     04 4E 05 F1 | 	add	fp, #4
09a88     A7 04 02 FB | 	rdlong	arg03, fp
09a8c     0C 4E 05 F1 | 	add	fp, #12
09a90     A7 EA 01 FB | 	rdlong	result1, fp
09a94     02 EB 61 FC | 	wrlong	result1, arg03
09a98     0C 4E 85 F1 | 	sub	fp, #12
09a9c     A7 00 02 FB | 	rdlong	arg01, fp
09aa0     04 4E 05 F1 | 	add	fp, #4
09aa4     A7 02 02 FB | 	rdlong	arg02, fp
09aa8     08 4E 85 F1 | 	sub	fp, #8
09aac     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
09ab0     0C 4E 05 F1 | 	add	fp, #12
09ab4     A7 EA 61 FC | 	wrlong	result1, fp
09ab8     0C 4E 85 F1 | 	sub	fp, #12
09abc     00 EA 0D F2 | 	cmp	result1, #0 wz
09ac0     C4 00 90 5D |  if_ne	jmp	#LR__1254
09ac4     04 4E 05 F1 | 	add	fp, #4
09ac8     A7 04 02 FB | 	rdlong	arg03, fp
09acc     04 4E 85 F1 | 	sub	fp, #4
09ad0     2B 04 06 F1 | 	add	arg03, #43
09ad4     02 05 C2 FA | 	rdbyte	arg03, arg03
09ad8     80 04 CE F7 | 	test	arg03, #128 wz
09adc     58 00 90 5D |  if_ne	jmp	#LR__1252
09ae0     04 4E 05 F1 | 	add	fp, #4
09ae4     A7 04 02 FB | 	rdlong	arg03, fp
09ae8     04 4E 85 F1 | 	sub	fp, #4
09aec     06 04 06 F1 | 	add	arg03, #6
09af0     02 05 C2 FA | 	rdbyte	arg03, arg03
09af4     10 04 CE F7 | 	test	arg03, #16 wz
09af8     30 00 90 AD |  if_e	jmp	#LR__1250
09afc     04 4E 05 F1 | 	add	fp, #4
09b00     A7 04 02 FB | 	rdlong	arg03, fp
09b04     02 0B 02 F6 | 	mov	local01, arg03
09b08     0C 4E 05 F1 | 	add	fp, #12
09b0c     A7 00 02 FB | 	rdlong	arg01, fp
09b10     10 4E 85 F1 | 	sub	fp, #16
09b14     1C 04 06 F1 | 	add	arg03, #28
09b18     02 03 02 FB | 	rdlong	arg02, arg03
09b1c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
09b20     08 0A 06 F1 | 	add	local01, #8
09b24     05 EB 61 FC | 	wrlong	result1, local01
09b28     0C 00 90 FD | 	jmp	#LR__1251
09b2c                 | LR__1250
09b2c     0C 4E 05 F1 | 	add	fp, #12
09b30     A7 0A 68 FC | 	wrlong	#5, fp
09b34     0C 4E 85 F1 | 	sub	fp, #12
09b38                 | LR__1251
09b38                 | LR__1252
09b38     0C 4E 05 F1 | 	add	fp, #12
09b3c     A7 0A 0A FB | 	rdlong	local01, fp wz
09b40     0C 4E 85 F1 | 	sub	fp, #12
09b44     40 00 90 5D |  if_ne	jmp	#LR__1253
09b48     04 4E 05 F1 | 	add	fp, #4
09b4c     A7 0A 02 FB | 	rdlong	local01, fp
09b50     0C 4E 05 F1 | 	add	fp, #12
09b54     A7 04 02 FB | 	rdlong	arg03, fp
09b58     06 04 06 F1 | 	add	arg03, #6
09b5c     02 05 E2 FA | 	rdword	arg03, arg03
09b60     04 0A 06 F1 | 	add	local01, #4
09b64     05 05 52 FC | 	wrword	arg03, local01
09b68     0C 4E 85 F1 | 	sub	fp, #12
09b6c     A7 00 02 FB | 	rdlong	arg01, fp
09b70     04 4E 85 F1 | 	sub	fp, #4
09b74     00 02 06 F6 | 	mov	arg02, #0
09b78     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
09b7c     0C 4E 05 F1 | 	add	fp, #12
09b80     A7 EA 61 FC | 	wrlong	result1, fp
09b84     0C 4E 85 F1 | 	sub	fp, #12
09b88                 | LR__1253
09b88                 | LR__1254
09b88     0C 4E 05 F1 | 	add	fp, #12
09b8c     A7 0A 02 FB | 	rdlong	local01, fp
09b90     0C 4E 85 F1 | 	sub	fp, #12
09b94     04 0A 0E F2 | 	cmp	local01, #4 wz
09b98     0C 4E 05 A1 |  if_e	add	fp, #12
09b9c     A7 0A 68 AC |  if_e	wrlong	#5, fp
09ba0     0C 4E 85 A1 |  if_e	sub	fp, #12
09ba4                 | LR__1255
09ba4     0C 4E 05 F1 | 	add	fp, #12
09ba8     A7 0A 0A FB | 	rdlong	local01, fp wz
09bac     0C 4E 85 F1 | 	sub	fp, #12
09bb0     04 4E 05 51 |  if_ne	add	fp, #4
09bb4     A7 0A 02 5B |  if_ne	rdlong	local01, fp
09bb8     04 4E 85 51 |  if_ne	sub	fp, #4
09bbc     05 01 68 5C |  if_ne	wrlong	#0, local01
09bc0                 | ' 
09bc0                 | ' 	return res ;
09bc0     0C 4E 05 F1 | 	add	fp, #12
09bc4     A7 EA 01 FB | 	rdlong	result1, fp
09bc8     0C 4E 85 F1 | 	sub	fp, #12
09bcc                 | LR__1256
09bcc     A7 F0 03 F6 | 	mov	ptra, fp
09bd0     B2 00 A0 FD | 	call	#popregs_
09bd4                 | _fatfs_cc_f_opendir_ret
09bd4     2D 00 64 FD | 	ret
09bd8                 | 
09bd8                 | _fatfs_cc_f_closedir
09bd8     00 4A 05 F6 | 	mov	COUNT_, #0
09bdc     A8 00 A0 FD | 	call	#pushregs_
09be0     10 F0 07 F1 | 	add	ptra, #16
09be4     04 4E 05 F1 | 	add	fp, #4
09be8     A7 00 62 FC | 	wrlong	arg01, fp
09bec     08 4E 05 F1 | 	add	fp, #8
09bf0     A7 02 02 F6 | 	mov	arg02, fp
09bf4     0C 4E 85 F1 | 	sub	fp, #12
09bf8     C0 DD BF FD | 	call	#_fatfs_cc_validate
09bfc     08 4E 05 F1 | 	add	fp, #8
09c00     A7 EA 61 FC | 	wrlong	result1, fp
09c04     08 4E 85 F1 | 	sub	fp, #8
09c08     00 EA 0D F2 | 	cmp	result1, #0 wz
09c0c     04 4E 05 A1 |  if_e	add	fp, #4
09c10     A7 EA 01 AB |  if_e	rdlong	result1, fp
09c14     04 4E 85 A1 |  if_e	sub	fp, #4
09c18     F5 00 68 AC |  if_e	wrlong	#0, result1
09c1c                 | ' 
09c1c                 | ' 
09c1c                 | ' 
09c1c                 | ' 
09c1c                 | ' 		dp->obj.fs = 0;
09c1c                 | ' #line 4633 "ff.c"
09c1c                 | ' 	}
09c1c                 | ' 	return res;
09c1c     08 4E 05 F1 | 	add	fp, #8
09c20     A7 EA 01 FB | 	rdlong	result1, fp
09c24     08 4E 85 F1 | 	sub	fp, #8
09c28     A7 F0 03 F6 | 	mov	ptra, fp
09c2c     B2 00 A0 FD | 	call	#popregs_
09c30                 | _fatfs_cc_f_closedir_ret
09c30     2D 00 64 FD | 	ret
09c34                 | 
09c34                 | _fatfs_cc_f_readdir
09c34     00 4A 05 F6 | 	mov	COUNT_, #0
09c38     A8 00 A0 FD | 	call	#pushregs_
09c3c     14 F0 07 F1 | 	add	ptra, #20
09c40     04 4E 05 F1 | 	add	fp, #4
09c44     A7 00 62 FC | 	wrlong	arg01, fp
09c48     04 4E 05 F1 | 	add	fp, #4
09c4c     A7 02 62 FC | 	wrlong	arg02, fp
09c50     04 4E 85 F1 | 	sub	fp, #4
09c54     A7 00 02 FB | 	rdlong	arg01, fp
09c58     0C 4E 05 F1 | 	add	fp, #12
09c5c     A7 02 02 F6 | 	mov	arg02, fp
09c60     10 4E 85 F1 | 	sub	fp, #16
09c64     54 DD BF FD | 	call	#_fatfs_cc_validate
09c68     0C 4E 05 F1 | 	add	fp, #12
09c6c     A7 EA 61 FC | 	wrlong	result1, fp
09c70     0C 4E 85 F1 | 	sub	fp, #12
09c74     00 EA 0D F2 | 	cmp	result1, #0 wz
09c78     BC 00 90 5D |  if_ne	jmp	#LR__1263
09c7c     08 4E 05 F1 | 	add	fp, #8
09c80     A7 EA 09 FB | 	rdlong	result1, fp wz
09c84     08 4E 85 F1 | 	sub	fp, #8
09c88     24 00 90 5D |  if_ne	jmp	#LR__1260
09c8c     04 4E 05 F1 | 	add	fp, #4
09c90     A7 00 02 FB | 	rdlong	arg01, fp
09c94     04 4E 85 F1 | 	sub	fp, #4
09c98     00 02 06 F6 | 	mov	arg02, #0
09c9c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
09ca0     0C 4E 05 F1 | 	add	fp, #12
09ca4     A7 EA 61 FC | 	wrlong	result1, fp
09ca8     0C 4E 85 F1 | 	sub	fp, #12
09cac     88 00 90 FD | 	jmp	#LR__1262
09cb0                 | LR__1260
09cb0     04 4E 05 F1 | 	add	fp, #4
09cb4     A7 00 02 FB | 	rdlong	arg01, fp
09cb8     04 4E 85 F1 | 	sub	fp, #4
09cbc     00 02 06 F6 | 	mov	arg02, #0
09cc0     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
09cc4     0C 4E 05 F1 | 	add	fp, #12
09cc8     A7 EA 61 FC | 	wrlong	result1, fp
09ccc     0C 4E 85 F1 | 	sub	fp, #12
09cd0     04 EA 0D F2 | 	cmp	result1, #4 wz
09cd4     0C 4E 05 A1 |  if_e	add	fp, #12
09cd8     A7 00 68 AC |  if_e	wrlong	#0, fp
09cdc     0C 4E 85 A1 |  if_e	sub	fp, #12
09ce0     0C 4E 05 F1 | 	add	fp, #12
09ce4     A7 EA 09 FB | 	rdlong	result1, fp wz
09ce8     0C 4E 85 F1 | 	sub	fp, #12
09cec     48 00 90 5D |  if_ne	jmp	#LR__1261
09cf0     04 4E 05 F1 | 	add	fp, #4
09cf4     A7 00 02 FB | 	rdlong	arg01, fp
09cf8     04 4E 05 F1 | 	add	fp, #4
09cfc     A7 02 02 FB | 	rdlong	arg02, fp
09d00     08 4E 85 F1 | 	sub	fp, #8
09d04     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
09d08     04 4E 05 F1 | 	add	fp, #4
09d0c     A7 00 02 FB | 	rdlong	arg01, fp
09d10     04 4E 85 F1 | 	sub	fp, #4
09d14     00 02 06 F6 | 	mov	arg02, #0
09d18     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
09d1c     0C 4E 05 F1 | 	add	fp, #12
09d20     A7 EA 61 FC | 	wrlong	result1, fp
09d24     0C 4E 85 F1 | 	sub	fp, #12
09d28     04 EA 0D F2 | 	cmp	result1, #4 wz
09d2c     0C 4E 05 A1 |  if_e	add	fp, #12
09d30     A7 00 68 AC |  if_e	wrlong	#0, fp
09d34     0C 4E 85 A1 |  if_e	sub	fp, #12
09d38                 | LR__1261
09d38                 | LR__1262
09d38                 | LR__1263
09d38                 | ' 			}
09d38                 | ' 			;
09d38                 | ' 		}
09d38                 | ' 	}
09d38                 | ' 	return res ;
09d38     0C 4E 05 F1 | 	add	fp, #12
09d3c     A7 EA 01 FB | 	rdlong	result1, fp
09d40     0C 4E 85 F1 | 	sub	fp, #12
09d44     A7 F0 03 F6 | 	mov	ptra, fp
09d48     B2 00 A0 FD | 	call	#popregs_
09d4c                 | _fatfs_cc_f_readdir_ret
09d4c     2D 00 64 FD | 	ret
09d50                 | 
09d50                 | _fatfs_cc_f_stat
09d50     00 4A 05 F6 | 	mov	COUNT_, #0
09d54     A8 00 A0 FD | 	call	#pushregs_
09d58     40 F0 07 F1 | 	add	ptra, #64
09d5c     04 4E 05 F1 | 	add	fp, #4
09d60     A7 00 62 FC | 	wrlong	arg01, fp
09d64     04 4E 05 F1 | 	add	fp, #4
09d68     A7 02 62 FC | 	wrlong	arg02, fp
09d6c     04 4E 85 F1 | 	sub	fp, #4
09d70     A7 00 02 F6 | 	mov	arg01, fp
09d74     0C 4E 05 F1 | 	add	fp, #12
09d78     A7 02 02 F6 | 	mov	arg02, fp
09d7c     10 4E 85 F1 | 	sub	fp, #16
09d80     00 04 06 F6 | 	mov	arg03, #0
09d84     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
09d88     0C 4E 05 F1 | 	add	fp, #12
09d8c     A7 EA 61 FC | 	wrlong	result1, fp
09d90     0C 4E 85 F1 | 	sub	fp, #12
09d94     00 EA 0D F2 | 	cmp	result1, #0 wz
09d98     74 00 90 5D |  if_ne	jmp	#LR__1273
09d9c     10 4E 05 F1 | 	add	fp, #16
09da0     A7 00 02 F6 | 	mov	arg01, fp
09da4     0C 4E 85 F1 | 	sub	fp, #12
09da8     A7 02 02 FB | 	rdlong	arg02, fp
09dac     04 4E 85 F1 | 	sub	fp, #4
09db0     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
09db4     0C 4E 05 F1 | 	add	fp, #12
09db8     A7 EA 61 FC | 	wrlong	result1, fp
09dbc     0C 4E 85 F1 | 	sub	fp, #12
09dc0     00 EA 0D F2 | 	cmp	result1, #0 wz
09dc4     48 00 90 5D |  if_ne	jmp	#LR__1272
09dc8     3B 4E 05 F1 | 	add	fp, #59
09dcc     A7 EA C1 FA | 	rdbyte	result1, fp
09dd0     3B 4E 85 F1 | 	sub	fp, #59
09dd4     80 EA CD F7 | 	test	result1, #128 wz
09dd8     0C 4E 05 51 |  if_ne	add	fp, #12
09ddc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
09de0     0C 4E 85 51 |  if_ne	sub	fp, #12
09de4     28 00 90 5D |  if_ne	jmp	#LR__1271
09de8     08 4E 05 F1 | 	add	fp, #8
09dec     A7 EA 09 FB | 	rdlong	result1, fp wz
09df0     08 4E 85 F1 | 	sub	fp, #8
09df4     18 00 90 AD |  if_e	jmp	#LR__1270
09df8     10 4E 05 F1 | 	add	fp, #16
09dfc     A7 00 02 F6 | 	mov	arg01, fp
09e00     08 4E 85 F1 | 	sub	fp, #8
09e04     A7 02 02 FB | 	rdlong	arg02, fp
09e08     08 4E 85 F1 | 	sub	fp, #8
09e0c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
09e10                 | LR__1270
09e10                 | LR__1271
09e10                 | LR__1272
09e10                 | LR__1273
09e10                 | ' 			}
09e10                 | ' 		}
09e10                 | ' 		;
09e10                 | ' 	}
09e10                 | ' 
09e10                 | ' 	return res ;
09e10     0C 4E 05 F1 | 	add	fp, #12
09e14     A7 EA 01 FB | 	rdlong	result1, fp
09e18     0C 4E 85 F1 | 	sub	fp, #12
09e1c     A7 F0 03 F6 | 	mov	ptra, fp
09e20     B2 00 A0 FD | 	call	#popregs_
09e24                 | _fatfs_cc_f_stat_ret
09e24     2D 00 64 FD | 	ret
09e28                 | 
09e28                 | _fatfs_cc_f_unlink
09e28     00 4A 05 F6 | 	mov	COUNT_, #0
09e2c     A8 00 A0 FD | 	call	#pushregs_
09e30     74 F0 07 F1 | 	add	ptra, #116
09e34     04 4E 05 F1 | 	add	fp, #4
09e38     A7 00 62 FC | 	wrlong	arg01, fp
09e3c     68 4E 05 F1 | 	add	fp, #104
09e40     A7 00 68 FC | 	wrlong	#0, fp
09e44     68 4E 85 F1 | 	sub	fp, #104
09e48     A7 00 02 F6 | 	mov	arg01, fp
09e4c     6C 4E 05 F1 | 	add	fp, #108
09e50     A7 02 02 F6 | 	mov	arg02, fp
09e54     70 4E 85 F1 | 	sub	fp, #112
09e58     02 04 06 F6 | 	mov	arg03, #2
09e5c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
09e60     08 4E 05 F1 | 	add	fp, #8
09e64     A7 EA 61 FC | 	wrlong	result1, fp
09e68     08 4E 85 F1 | 	sub	fp, #8
09e6c     00 EA 0D F2 | 	cmp	result1, #0 wz
09e70     E4 01 90 5D |  if_ne	jmp	#LR__1288
09e74     70 4E 05 F1 | 	add	fp, #112
09e78     A7 04 02 FB | 	rdlong	arg03, fp
09e7c     64 4E 85 F1 | 	sub	fp, #100
09e80     A7 04 62 FC | 	wrlong	arg03, fp
09e84     A7 00 02 F6 | 	mov	arg01, fp
09e88     08 4E 85 F1 | 	sub	fp, #8
09e8c     A7 02 02 FB | 	rdlong	arg02, fp
09e90     04 4E 85 F1 | 	sub	fp, #4
09e94     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
09e98     08 4E 05 F1 | 	add	fp, #8
09e9c     A7 EA 61 FC | 	wrlong	result1, fp
09ea0     00 EA 4D F2 | 	cmps	result1, #0 wz
09ea4     08 4E 85 F1 | 	sub	fp, #8
09ea8     AC 01 90 5D |  if_ne	jmp	#LR__1287
09eac     37 4E 05 F1 | 	add	fp, #55
09eb0     A7 EA C1 FA | 	rdbyte	result1, fp
09eb4     37 4E 85 F1 | 	sub	fp, #55
09eb8     80 EA CD F7 | 	test	result1, #128 wz
09ebc     08 4E 05 51 |  if_ne	add	fp, #8
09ec0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
09ec4     08 4E 85 51 |  if_ne	sub	fp, #8
09ec8     1C 00 90 5D |  if_ne	jmp	#LR__1280
09ecc     12 4E 05 F1 | 	add	fp, #18
09ed0     A7 EA C1 FA | 	rdbyte	result1, fp
09ed4     12 4E 85 F1 | 	sub	fp, #18
09ed8     01 EA CD F7 | 	test	result1, #1 wz
09edc     08 4E 05 51 |  if_ne	add	fp, #8
09ee0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
09ee4     08 4E 85 51 |  if_ne	sub	fp, #8
09ee8                 | LR__1280
09ee8     08 4E 05 F1 | 	add	fp, #8
09eec     A7 EA 09 FB | 	rdlong	result1, fp wz
09ef0     08 4E 85 F1 | 	sub	fp, #8
09ef4     C8 00 90 5D |  if_ne	jmp	#LR__1283
09ef8     70 4E 05 F1 | 	add	fp, #112
09efc     A7 00 02 FB | 	rdlong	arg01, fp
09f00     48 4E 85 F1 | 	sub	fp, #72
09f04     A7 02 02 FB | 	rdlong	arg02, fp
09f08     28 4E 85 F1 | 	sub	fp, #40
09f0c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
09f10     6C 4E 05 F1 | 	add	fp, #108
09f14     A7 EA 61 FC | 	wrlong	result1, fp
09f18     5A 4E 85 F1 | 	sub	fp, #90
09f1c     A7 EA C1 FA | 	rdbyte	result1, fp
09f20     12 4E 85 F1 | 	sub	fp, #18
09f24     10 EA CD F7 | 	test	result1, #16 wz
09f28     94 00 90 AD |  if_e	jmp	#LR__1282
09f2c     70 4E 05 F1 | 	add	fp, #112
09f30     A7 EA 01 FB | 	rdlong	result1, fp
09f34     34 4E 85 F1 | 	sub	fp, #52
09f38     A7 EA 61 FC | 	wrlong	result1, fp
09f3c     30 4E 05 F1 | 	add	fp, #48
09f40     A7 04 02 FB | 	rdlong	arg03, fp
09f44     28 4E 85 F1 | 	sub	fp, #40
09f48     A7 04 62 FC | 	wrlong	arg03, fp
09f4c     08 4E 85 F1 | 	sub	fp, #8
09f50     A7 00 02 F6 | 	mov	arg01, fp
09f54     3C 4E 85 F1 | 	sub	fp, #60
09f58     00 02 06 F6 | 	mov	arg02, #0
09f5c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
09f60     08 4E 05 F1 | 	add	fp, #8
09f64     A7 EA 61 FC | 	wrlong	result1, fp
09f68     08 4E 85 F1 | 	sub	fp, #8
09f6c     00 EA 0D F2 | 	cmp	result1, #0 wz
09f70     4C 00 90 5D |  if_ne	jmp	#LR__1281
09f74     3C 4E 05 F1 | 	add	fp, #60
09f78     A7 00 02 F6 | 	mov	arg01, fp
09f7c     3C 4E 85 F1 | 	sub	fp, #60
09f80     00 02 06 F6 | 	mov	arg02, #0
09f84     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
09f88     08 4E 05 F1 | 	add	fp, #8
09f8c     A7 EA 61 FC | 	wrlong	result1, fp
09f90     00 EA 4D F2 | 	cmps	result1, #0 wz
09f94     08 4E 85 F1 | 	sub	fp, #8
09f98     08 4E 05 A1 |  if_e	add	fp, #8
09f9c     A7 0E 68 AC |  if_e	wrlong	#7, fp
09fa0     08 4E 85 A1 |  if_e	sub	fp, #8
09fa4     08 4E 05 F1 | 	add	fp, #8
09fa8     A7 EA 01 FB | 	rdlong	result1, fp
09fac     08 4E 85 F1 | 	sub	fp, #8
09fb0     04 EA 0D F2 | 	cmp	result1, #4 wz
09fb4     08 4E 05 A1 |  if_e	add	fp, #8
09fb8     A7 00 68 AC |  if_e	wrlong	#0, fp
09fbc     08 4E 85 A1 |  if_e	sub	fp, #8
09fc0                 | LR__1281
09fc0                 | LR__1282
09fc0                 | LR__1283
09fc0     08 4E 05 F1 | 	add	fp, #8
09fc4     A7 EA 09 FB | 	rdlong	result1, fp wz
09fc8     08 4E 85 F1 | 	sub	fp, #8
09fcc     88 00 90 5D |  if_ne	jmp	#LR__1286
09fd0     0C 4E 05 F1 | 	add	fp, #12
09fd4     A7 00 02 F6 | 	mov	arg01, fp
09fd8     0C 4E 85 F1 | 	sub	fp, #12
09fdc     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
09fe0     08 4E 05 F1 | 	add	fp, #8
09fe4     A7 EA 61 FC | 	wrlong	result1, fp
09fe8     08 4E 85 F1 | 	sub	fp, #8
09fec     00 EA 0D F2 | 	cmp	result1, #0 wz
09ff0     38 00 90 5D |  if_ne	jmp	#LR__1284
09ff4     6C 4E 05 F1 | 	add	fp, #108
09ff8     A7 EA 09 FB | 	rdlong	result1, fp wz
09ffc     6C 4E 85 F1 | 	sub	fp, #108
0a000     28 00 90 AD |  if_e	jmp	#LR__1284
0a004     0C 4E 05 F1 | 	add	fp, #12
0a008     A7 00 02 F6 | 	mov	arg01, fp
0a00c     60 4E 05 F1 | 	add	fp, #96
0a010     A7 02 02 FB | 	rdlong	arg02, fp
0a014     6C 4E 85 F1 | 	sub	fp, #108
0a018     00 04 06 F6 | 	mov	arg03, #0
0a01c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
0a020     08 4E 05 F1 | 	add	fp, #8
0a024     A7 EA 61 FC | 	wrlong	result1, fp
0a028     08 4E 85 F1 | 	sub	fp, #8
0a02c                 | LR__1284
0a02c     08 4E 05 F1 | 	add	fp, #8
0a030     A7 EA 09 FB | 	rdlong	result1, fp wz
0a034     08 4E 85 F1 | 	sub	fp, #8
0a038     1C 00 90 5D |  if_ne	jmp	#LR__1285
0a03c     70 4E 05 F1 | 	add	fp, #112
0a040     A7 00 02 FB | 	rdlong	arg01, fp
0a044     70 4E 85 F1 | 	sub	fp, #112
0a048     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
0a04c     08 4E 05 F1 | 	add	fp, #8
0a050     A7 EA 61 FC | 	wrlong	result1, fp
0a054     08 4E 85 F1 | 	sub	fp, #8
0a058                 | LR__1285
0a058                 | LR__1286
0a058                 | LR__1287
0a058                 | LR__1288
0a058                 | ' 			}
0a058                 | ' 		}
0a058                 | ' 		;
0a058                 | ' 	}
0a058                 | ' 
0a058                 | ' 	return res ;
0a058     08 4E 05 F1 | 	add	fp, #8
0a05c     A7 EA 01 FB | 	rdlong	result1, fp
0a060     08 4E 85 F1 | 	sub	fp, #8
0a064     A7 F0 03 F6 | 	mov	ptra, fp
0a068     B2 00 A0 FD | 	call	#popregs_
0a06c                 | _fatfs_cc_f_unlink_ret
0a06c     2D 00 64 FD | 	ret
0a070                 | 
0a070                 | _fatfs_cc_f_mkdir
0a070     00 4A 05 F6 | 	mov	COUNT_, #0
0a074     A8 00 A0 FD | 	call	#pushregs_
0a078     5C F0 07 F1 | 	add	ptra, #92
0a07c     04 4E 05 F1 | 	add	fp, #4
0a080     A7 00 62 FC | 	wrlong	arg01, fp
0a084     A7 00 02 F6 | 	mov	arg01, fp
0a088     48 4E 05 F1 | 	add	fp, #72
0a08c     A7 02 02 F6 | 	mov	arg02, fp
0a090     4C 4E 85 F1 | 	sub	fp, #76
0a094     02 04 06 F6 | 	mov	arg03, #2
0a098     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
0a09c     08 4E 05 F1 | 	add	fp, #8
0a0a0     A7 EA 61 FC | 	wrlong	result1, fp
0a0a4     08 4E 85 F1 | 	sub	fp, #8
0a0a8     00 EA 0D F2 | 	cmp	result1, #0 wz
0a0ac     C4 02 90 5D |  if_ne	jmp	#LR__1295
0a0b0     4C 4E 05 F1 | 	add	fp, #76
0a0b4     A7 04 02 FB | 	rdlong	arg03, fp
0a0b8     40 4E 85 F1 | 	sub	fp, #64
0a0bc     A7 04 62 FC | 	wrlong	arg03, fp
0a0c0     A7 00 02 F6 | 	mov	arg01, fp
0a0c4     08 4E 85 F1 | 	sub	fp, #8
0a0c8     A7 02 02 FB | 	rdlong	arg02, fp
0a0cc     04 4E 85 F1 | 	sub	fp, #4
0a0d0     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
0a0d4     08 4E 05 F1 | 	add	fp, #8
0a0d8     A7 EA 61 FC | 	wrlong	result1, fp
0a0dc     00 EA 4D F2 | 	cmps	result1, #0 wz
0a0e0     08 4E 85 F1 | 	sub	fp, #8
0a0e4     08 4E 05 A1 |  if_e	add	fp, #8
0a0e8     A7 10 68 AC |  if_e	wrlong	#8, fp
0a0ec     08 4E 85 A1 |  if_e	sub	fp, #8
0a0f0     08 4E 05 F1 | 	add	fp, #8
0a0f4     A7 EA 01 FB | 	rdlong	result1, fp
0a0f8     08 4E 85 F1 | 	sub	fp, #8
0a0fc     04 EA 0D F2 | 	cmp	result1, #4 wz
0a100     70 02 90 5D |  if_ne	jmp	#LR__1294
0a104     4C 4E 05 F1 | 	add	fp, #76
0a108     A7 04 02 FB | 	rdlong	arg03, fp
0a10c     10 4E 85 F1 | 	sub	fp, #16
0a110     A7 04 62 FC | 	wrlong	arg03, fp
0a114     A7 00 02 F6 | 	mov	arg01, fp
0a118     3C 4E 85 F1 | 	sub	fp, #60
0a11c     00 02 06 F6 | 	mov	arg02, #0
0a120     04 AC BF FD | 	call	#_fatfs_cc_create_chain
0a124     50 4E 05 F1 | 	add	fp, #80
0a128     A7 EA 61 FC | 	wrlong	result1, fp
0a12c     48 4E 85 F1 | 	sub	fp, #72
0a130     A7 00 68 FC | 	wrlong	#0, fp
0a134     48 4E 05 F1 | 	add	fp, #72
0a138     A7 EA 09 FB | 	rdlong	result1, fp wz
0a13c     50 4E 85 F1 | 	sub	fp, #80
0a140     08 4E 05 A1 |  if_e	add	fp, #8
0a144     A7 0E 68 AC |  if_e	wrlong	#7, fp
0a148     08 4E 85 A1 |  if_e	sub	fp, #8
0a14c     50 4E 05 F1 | 	add	fp, #80
0a150     A7 EA 01 FB | 	rdlong	result1, fp
0a154     50 4E 85 F1 | 	sub	fp, #80
0a158     01 EA 0D F2 | 	cmp	result1, #1 wz
0a15c     08 4E 05 A1 |  if_e	add	fp, #8
0a160     A7 04 68 AC |  if_e	wrlong	#2, fp
0a164     08 4E 85 A1 |  if_e	sub	fp, #8
0a168     50 4E 05 F1 | 	add	fp, #80
0a16c     A7 04 02 FB | 	rdlong	arg03, fp
0a170     50 4E 85 F1 | 	sub	fp, #80
0a174     FF FF 7F FF 
0a178     FF 05 0E F2 | 	cmp	arg03, ##-1 wz
0a17c     08 4E 05 A1 |  if_e	add	fp, #8
0a180     A7 02 68 AC |  if_e	wrlong	#1, fp
0a184     08 4E 85 A1 |  if_e	sub	fp, #8
0a188     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
0a18c     58 4E 05 F1 | 	add	fp, #88
0a190     A7 EA 61 FC | 	wrlong	result1, fp
0a194     50 4E 85 F1 | 	sub	fp, #80
0a198     A7 EA 09 FB | 	rdlong	result1, fp wz
0a19c     08 4E 85 F1 | 	sub	fp, #8
0a1a0     1C 01 90 5D |  if_ne	jmp	#LR__1291
0a1a4     4C 4E 05 F1 | 	add	fp, #76
0a1a8     A7 00 02 FB | 	rdlong	arg01, fp
0a1ac     04 4E 05 F1 | 	add	fp, #4
0a1b0     A7 02 02 FB | 	rdlong	arg02, fp
0a1b4     50 4E 85 F1 | 	sub	fp, #80
0a1b8     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
0a1bc     08 4E 05 F1 | 	add	fp, #8
0a1c0     A7 EA 61 FC | 	wrlong	result1, fp
0a1c4     00 EA 4D F2 | 	cmps	result1, #0 wz
0a1c8     08 4E 85 F1 | 	sub	fp, #8
0a1cc     F0 00 90 5D |  if_ne	jmp	#LR__1290
0a1d0     4C 4E 05 F1 | 	add	fp, #76
0a1d4     A7 00 02 FB | 	rdlong	arg01, fp
0a1d8     4C 4E 85 F1 | 	sub	fp, #76
0a1dc     34 00 06 F1 | 	add	arg01, #52
0a1e0     20 02 06 F6 | 	mov	arg02, #32
0a1e4     0B 04 06 F6 | 	mov	arg03, #11
0a1e8     98 00 A0 FD | 	call	#\builtin_bytefill_
0a1ec     4C 4E 05 F1 | 	add	fp, #76
0a1f0     A7 EA 01 FB | 	rdlong	result1, fp
0a1f4     34 EA 05 F1 | 	add	result1, #52
0a1f8     F5 5C 48 FC | 	wrbyte	#46, result1
0a1fc     A7 04 02 FB | 	rdlong	arg03, fp
0a200     3F 04 06 F1 | 	add	arg03, #63
0a204     02 21 48 FC | 	wrbyte	#16, arg03
0a208     A7 00 02 FB | 	rdlong	arg01, fp
0a20c     4A 00 06 F1 | 	add	arg01, #74
0a210     0C 4E 05 F1 | 	add	fp, #12
0a214     A7 02 02 FB | 	rdlong	arg02, fp
0a218     00 03 62 FC | 	wrlong	arg02, arg01
0a21c     0C 4E 85 F1 | 	sub	fp, #12
0a220     A7 02 02 FB | 	rdlong	arg02, fp
0a224     01 01 02 F6 | 	mov	arg01, arg02
0a228     34 02 06 F1 | 	add	arg02, #52
0a22c     04 4E 05 F1 | 	add	fp, #4
0a230     A7 04 02 FB | 	rdlong	arg03, fp
0a234     50 4E 85 F1 | 	sub	fp, #80
0a238     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
0a23c     4C 4E 05 F1 | 	add	fp, #76
0a240     A7 02 02 FB | 	rdlong	arg02, fp
0a244     01 01 02 F6 | 	mov	arg01, arg02
0a248     54 00 06 F1 | 	add	arg01, #84
0a24c     4C 4E 85 F1 | 	sub	fp, #76
0a250     34 02 06 F1 | 	add	arg02, #52
0a254     20 04 06 F6 | 	mov	arg03, #32
0a258     80 6A BF FD | 	call	#__system____builtin_memmove
0a25c     4C 4E 05 F1 | 	add	fp, #76
0a260     A7 04 02 FB | 	rdlong	arg03, fp
0a264     55 04 06 F1 | 	add	arg03, #85
0a268     02 5D 48 FC | 	wrbyte	#46, arg03
0a26c     38 4E 85 F1 | 	sub	fp, #56
0a270     A7 04 02 FB | 	rdlong	arg03, fp
0a274     40 4E 05 F1 | 	add	fp, #64
0a278     A7 04 62 FC | 	wrlong	arg03, fp
0a27c     08 4E 85 F1 | 	sub	fp, #8
0a280     A7 02 02 FB | 	rdlong	arg02, fp
0a284     01 01 02 F6 | 	mov	arg01, arg02
0a288     54 02 06 F1 | 	add	arg02, #84
0a28c     4C 4E 85 F1 | 	sub	fp, #76
0a290     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
0a294     4C 4E 05 F1 | 	add	fp, #76
0a298     A7 04 02 FB | 	rdlong	arg03, fp
0a29c     03 04 06 F1 | 	add	arg03, #3
0a2a0     02 03 48 FC | 	wrbyte	#1, arg03
0a2a4     40 4E 85 F1 | 	sub	fp, #64
0a2a8     A7 00 02 F6 | 	mov	arg01, fp
0a2ac     0C 4E 85 F1 | 	sub	fp, #12
0a2b0     44 BA BF FD | 	call	#_fatfs_cc_dir_register
0a2b4     08 4E 05 F1 | 	add	fp, #8
0a2b8     A7 EA 61 FC | 	wrlong	result1, fp
0a2bc     08 4E 85 F1 | 	sub	fp, #8
0a2c0                 | LR__1290
0a2c0                 | LR__1291
0a2c0     08 4E 05 F1 | 	add	fp, #8
0a2c4     A7 EA 09 FB | 	rdlong	result1, fp wz
0a2c8     08 4E 85 F1 | 	sub	fp, #8
0a2cc     88 00 90 5D |  if_ne	jmp	#LR__1292
0a2d0     28 4E 05 F1 | 	add	fp, #40
0a2d4     A7 00 02 FB | 	rdlong	arg01, fp
0a2d8     16 00 06 F1 | 	add	arg01, #22
0a2dc     30 4E 05 F1 | 	add	fp, #48
0a2e0     A7 02 02 FB | 	rdlong	arg02, fp
0a2e4     00 03 62 FC | 	wrlong	arg02, arg01
0a2e8     0C 4E 85 F1 | 	sub	fp, #12
0a2ec     A7 00 02 FB | 	rdlong	arg01, fp
0a2f0     24 4E 85 F1 | 	sub	fp, #36
0a2f4     A7 02 02 FB | 	rdlong	arg02, fp
0a2f8     28 4E 05 F1 | 	add	fp, #40
0a2fc     A7 04 02 FB | 	rdlong	arg03, fp
0a300     50 4E 85 F1 | 	sub	fp, #80
0a304     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
0a308     28 4E 05 F1 | 	add	fp, #40
0a30c     A7 EA 01 FB | 	rdlong	result1, fp
0a310     0B EA 05 F1 | 	add	result1, #11
0a314     F5 20 48 FC | 	wrbyte	#16, result1
0a318     24 4E 05 F1 | 	add	fp, #36
0a31c     A7 EA 01 FB | 	rdlong	result1, fp
0a320     03 EA 05 F1 | 	add	result1, #3
0a324     F5 02 48 FC | 	wrbyte	#1, result1
0a328     44 4E 85 F1 | 	sub	fp, #68
0a32c     A7 EA 09 FB | 	rdlong	result1, fp wz
0a330     08 4E 85 F1 | 	sub	fp, #8
0a334     3C 00 90 5D |  if_ne	jmp	#LR__1293
0a338     4C 4E 05 F1 | 	add	fp, #76
0a33c     A7 00 02 FB | 	rdlong	arg01, fp
0a340     4C 4E 85 F1 | 	sub	fp, #76
0a344     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
0a348     08 4E 05 F1 | 	add	fp, #8
0a34c     A7 EA 61 FC | 	wrlong	result1, fp
0a350     08 4E 85 F1 | 	sub	fp, #8
0a354     1C 00 90 FD | 	jmp	#LR__1293
0a358                 | LR__1292
0a358     3C 4E 05 F1 | 	add	fp, #60
0a35c     A7 00 02 F6 | 	mov	arg01, fp
0a360     14 4E 05 F1 | 	add	fp, #20
0a364     A7 02 02 FB | 	rdlong	arg02, fp
0a368     50 4E 85 F1 | 	sub	fp, #80
0a36c     00 04 06 F6 | 	mov	arg03, #0
0a370     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
0a374                 | LR__1293
0a374                 | LR__1294
0a374                 | LR__1295
0a374                 | ' 				remove_chain(&sobj, dcl, 0);
0a374                 | ' 			}
0a374                 | ' 		}
0a374                 | ' 		;
0a374                 | ' 	}
0a374                 | ' 
0a374                 | ' 	return res ;
0a374     08 4E 05 F1 | 	add	fp, #8
0a378     A7 EA 01 FB | 	rdlong	result1, fp
0a37c     08 4E 85 F1 | 	sub	fp, #8
0a380     A7 F0 03 F6 | 	mov	ptra, fp
0a384     B2 00 A0 FD | 	call	#popregs_
0a388                 | _fatfs_cc_f_mkdir_ret
0a388     2D 00 64 FD | 	ret
0a38c                 | 
0a38c                 | _fatfs_cc_f_rename
0a38c     01 4A 05 F6 | 	mov	COUNT_, #1
0a390     A8 00 A0 FD | 	call	#pushregs_
0a394     9C F0 07 F1 | 	add	ptra, #156
0a398     04 4E 05 F1 | 	add	fp, #4
0a39c     A7 00 62 FC | 	wrlong	arg01, fp
0a3a0     04 4E 05 F1 | 	add	fp, #4
0a3a4     A7 02 62 FC | 	wrlong	arg02, fp
0a3a8     A7 00 02 F6 | 	mov	arg01, fp
0a3ac     08 4E 85 F1 | 	sub	fp, #8
0a3b0     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
0a3b4     04 4E 05 F1 | 	add	fp, #4
0a3b8     A7 00 02 F6 | 	mov	arg01, fp
0a3bc     6C 4E 05 F1 | 	add	fp, #108
0a3c0     A7 02 02 F6 | 	mov	arg02, fp
0a3c4     70 4E 85 F1 | 	sub	fp, #112
0a3c8     02 04 06 F6 | 	mov	arg03, #2
0a3cc     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
0a3d0     0C 4E 05 F1 | 	add	fp, #12
0a3d4     A7 EA 61 FC | 	wrlong	result1, fp
0a3d8     0C 4E 85 F1 | 	sub	fp, #12
0a3dc     00 EA 0D F2 | 	cmp	result1, #0 wz
0a3e0     44 03 90 5D |  if_ne	jmp	#LR__1313
0a3e4     70 4E 05 F1 | 	add	fp, #112
0a3e8     A7 04 02 FB | 	rdlong	arg03, fp
0a3ec     60 4E 85 F1 | 	sub	fp, #96
0a3f0     A7 04 62 FC | 	wrlong	arg03, fp
0a3f4     A7 00 02 F6 | 	mov	arg01, fp
0a3f8     0C 4E 85 F1 | 	sub	fp, #12
0a3fc     A7 02 02 FB | 	rdlong	arg02, fp
0a400     04 4E 85 F1 | 	sub	fp, #4
0a404     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
0a408     0C 4E 05 F1 | 	add	fp, #12
0a40c     A7 EA 61 FC | 	wrlong	result1, fp
0a410     00 EA 4D F2 | 	cmps	result1, #0 wz
0a414     0C 4E 85 F1 | 	sub	fp, #12
0a418     1C 00 90 5D |  if_ne	jmp	#LR__1300
0a41c     3B 4E 05 F1 | 	add	fp, #59
0a420     A7 EA C1 FA | 	rdbyte	result1, fp
0a424     3B 4E 85 F1 | 	sub	fp, #59
0a428     A0 EA CD F7 | 	test	result1, #160 wz
0a42c     0C 4E 05 51 |  if_ne	add	fp, #12
0a430     A7 0C 68 5C |  if_ne	wrlong	#6, fp
0a434     0C 4E 85 51 |  if_ne	sub	fp, #12
0a438                 | LR__1300
0a438     0C 4E 05 F1 | 	add	fp, #12
0a43c     A7 0A 0A FB | 	rdlong	local01, fp wz
0a440     0C 4E 85 F1 | 	sub	fp, #12
0a444     E0 02 90 5D |  if_ne	jmp	#LR__1312
0a448     74 4E 05 F1 | 	add	fp, #116
0a44c     A7 00 02 F6 | 	mov	arg01, fp
0a450     48 4E 85 F1 | 	sub	fp, #72
0a454     A7 02 02 FB | 	rdlong	arg02, fp
0a458     2C 4E 85 F1 | 	sub	fp, #44
0a45c     20 04 06 F6 | 	mov	arg03, #32
0a460     78 68 BF FD | 	call	#__system____builtin_memmove
0a464     40 4E 05 F1 | 	add	fp, #64
0a468     A7 00 02 F6 | 	mov	arg01, fp
0a46c     30 4E 85 F1 | 	sub	fp, #48
0a470     A7 02 02 F6 | 	mov	arg02, fp
0a474     10 4E 85 F1 | 	sub	fp, #16
0a478     30 04 06 F6 | 	mov	arg03, #48
0a47c     5C 68 BF FD | 	call	#__system____builtin_memmove
0a480     40 4E 05 F1 | 	add	fp, #64
0a484     A7 00 02 F6 | 	mov	arg01, fp
0a488     38 4E 85 F1 | 	sub	fp, #56
0a48c     A7 02 02 FB | 	rdlong	arg02, fp
0a490     08 4E 85 F1 | 	sub	fp, #8
0a494     34 CA BF FD | 	call	#_fatfs_cc_follow_path
0a498     0C 4E 05 F1 | 	add	fp, #12
0a49c     A7 EA 61 FC | 	wrlong	result1, fp
0a4a0     0C 4E 85 F1 | 	sub	fp, #12
0a4a4     00 EA 0D F2 | 	cmp	result1, #0 wz
0a4a8     4C 00 90 5D |  if_ne	jmp	#LR__1303
0a4ac     48 4E 05 F1 | 	add	fp, #72
0a4b0     A7 EA 01 FB | 	rdlong	result1, fp
0a4b4     30 4E 85 F1 | 	sub	fp, #48
0a4b8     A7 04 02 FB | 	rdlong	arg03, fp
0a4bc     18 4E 85 F1 | 	sub	fp, #24
0a4c0     02 EB 09 F2 | 	cmp	result1, arg03 wz
0a4c4     20 00 90 5D |  if_ne	jmp	#LR__1301
0a4c8     50 4E 05 F1 | 	add	fp, #80
0a4cc     A7 EA 01 FB | 	rdlong	result1, fp
0a4d0     30 4E 85 F1 | 	sub	fp, #48
0a4d4     A7 04 02 FB | 	rdlong	arg03, fp
0a4d8     20 4E 85 F1 | 	sub	fp, #32
0a4dc     02 EB 09 F2 | 	cmp	result1, arg03 wz
0a4e0     04 0A 06 A6 |  if_e	mov	local01, #4
0a4e4     04 00 90 AD |  if_e	jmp	#LR__1302
0a4e8                 | LR__1301
0a4e8     08 0A 06 F6 | 	mov	local01, #8
0a4ec                 | LR__1302
0a4ec     0C 4E 05 F1 | 	add	fp, #12
0a4f0     A7 0A 62 FC | 	wrlong	local01, fp
0a4f4     0C 4E 85 F1 | 	sub	fp, #12
0a4f8                 | LR__1303
0a4f8     0C 4E 05 F1 | 	add	fp, #12
0a4fc     A7 0A 02 FB | 	rdlong	local01, fp
0a500     0C 4E 85 F1 | 	sub	fp, #12
0a504     04 0A 0E F2 | 	cmp	local01, #4 wz
0a508     CC 01 90 5D |  if_ne	jmp	#LR__1309
0a50c     40 4E 05 F1 | 	add	fp, #64
0a510     A7 00 02 F6 | 	mov	arg01, fp
0a514     40 4E 85 F1 | 	sub	fp, #64
0a518     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
0a51c     0C 4E 05 F1 | 	add	fp, #12
0a520     A7 EA 61 FC | 	wrlong	result1, fp
0a524     0C 4E 85 F1 | 	sub	fp, #12
0a528     00 EA 0D F2 | 	cmp	result1, #0 wz
0a52c     A8 01 90 5D |  if_ne	jmp	#LR__1308
0a530     5C 4E 05 F1 | 	add	fp, #92
0a534     A7 00 02 FB | 	rdlong	arg01, fp
0a538     38 4E 05 F1 | 	add	fp, #56
0a53c     A7 00 62 FC | 	wrlong	arg01, fp
0a540     0D 00 06 F1 | 	add	arg01, #13
0a544     20 4E 85 F1 | 	sub	fp, #32
0a548     A7 02 02 F6 | 	mov	arg02, fp
0a54c     74 4E 85 F1 | 	sub	fp, #116
0a550     0D 02 06 F1 | 	add	arg02, #13
0a554     13 04 06 F6 | 	mov	arg03, #19
0a558     80 67 BF FD | 	call	#__system____builtin_memmove
0a55c     94 4E 05 F1 | 	add	fp, #148
0a560     A7 0A 02 FB | 	rdlong	local01, fp
0a564     15 4E 85 F1 | 	sub	fp, #21
0a568     A7 EA C1 FA | 	rdbyte	result1, fp
0a56c     0B 0A 06 F1 | 	add	local01, #11
0a570     05 EB 41 FC | 	wrbyte	result1, local01
0a574     15 4E 05 F1 | 	add	fp, #21
0a578     A7 0A 02 FB | 	rdlong	local01, fp
0a57c     94 4E 85 F1 | 	sub	fp, #148
0a580     0B 0A 06 F1 | 	add	local01, #11
0a584     05 0B C2 FA | 	rdbyte	local01, local01
0a588     10 0A CE F7 | 	test	local01, #16 wz
0a58c     24 00 90 5D |  if_ne	jmp	#LR__1304
0a590     94 4E 05 F1 | 	add	fp, #148
0a594     A7 EA 01 FB | 	rdlong	result1, fp
0a598     F5 0A 02 F6 | 	mov	local01, result1
0a59c     94 4E 85 F1 | 	sub	fp, #148
0a5a0     0B EA 05 F1 | 	add	result1, #11
0a5a4     F5 EA C1 FA | 	rdbyte	result1, result1
0a5a8     20 EA 45 F5 | 	or	result1, #32
0a5ac     0B 0A 06 F1 | 	add	local01, #11
0a5b0     05 EB 41 FC | 	wrbyte	result1, local01
0a5b4                 | LR__1304
0a5b4     70 4E 05 F1 | 	add	fp, #112
0a5b8     A7 0A 02 FB | 	rdlong	local01, fp
0a5bc     03 0A 06 F1 | 	add	local01, #3
0a5c0     05 03 48 FC | 	wrbyte	#1, local01
0a5c4     24 4E 05 F1 | 	add	fp, #36
0a5c8     A7 0A 02 FB | 	rdlong	local01, fp
0a5cc     94 4E 85 F1 | 	sub	fp, #148
0a5d0     0B 0A 06 F1 | 	add	local01, #11
0a5d4     05 0B C2 FA | 	rdbyte	local01, local01
0a5d8     10 0A CE F7 | 	test	local01, #16 wz
0a5dc     F8 00 90 AD |  if_e	jmp	#LR__1307
0a5e0     18 4E 05 F1 | 	add	fp, #24
0a5e4     A7 04 02 FB | 	rdlong	arg03, fp
0a5e8     30 4E 05 F1 | 	add	fp, #48
0a5ec     A7 0A 02 FB | 	rdlong	local01, fp
0a5f0     48 4E 85 F1 | 	sub	fp, #72
0a5f4     05 05 0A F2 | 	cmp	arg03, local01 wz
0a5f8     DC 00 90 AD |  if_e	jmp	#LR__1307
0a5fc     70 4E 05 F1 | 	add	fp, #112
0a600     A7 00 02 FB | 	rdlong	arg01, fp
0a604     00 0B 02 F6 | 	mov	local01, arg01
0a608     24 4E 05 F1 | 	add	fp, #36
0a60c     A7 02 02 FB | 	rdlong	arg02, fp
0a610     94 4E 85 F1 | 	sub	fp, #148
0a614     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
0a618     F5 02 02 F6 | 	mov	arg02, result1
0a61c     05 01 02 F6 | 	mov	arg01, local01
0a620     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
0a624     98 4E 05 F1 | 	add	fp, #152
0a628     A7 EA 61 FC | 	wrlong	result1, fp
0a62c     00 EA 4D F2 | 	cmps	result1, #0 wz
0a630     98 4E 85 F1 | 	sub	fp, #152
0a634     0C 4E 05 A1 |  if_e	add	fp, #12
0a638     A7 04 68 AC |  if_e	wrlong	#2, fp
0a63c     0C 4E 85 A1 |  if_e	sub	fp, #12
0a640     94 00 90 AD |  if_e	jmp	#LR__1306
0a644     70 4E 05 F1 | 	add	fp, #112
0a648     A7 00 02 FB | 	rdlong	arg01, fp
0a64c     28 4E 05 F1 | 	add	fp, #40
0a650     A7 02 02 FB | 	rdlong	arg02, fp
0a654     98 4E 85 F1 | 	sub	fp, #152
0a658     4C A0 BF FD | 	call	#_fatfs_cc_move_window
0a65c     0C 4E 05 F1 | 	add	fp, #12
0a660     A7 EA 61 FC | 	wrlong	result1, fp
0a664     64 4E 05 F1 | 	add	fp, #100
0a668     A7 0A 02 FB | 	rdlong	local01, fp
0a66c     54 0A 06 F1 | 	add	local01, #84
0a670     24 4E 05 F1 | 	add	fp, #36
0a674     A7 0A 62 FC | 	wrlong	local01, fp
0a678     88 4E 85 F1 | 	sub	fp, #136
0a67c     A7 0A 0A FB | 	rdlong	local01, fp wz
0a680     0C 4E 85 F1 | 	sub	fp, #12
0a684     50 00 90 5D |  if_ne	jmp	#LR__1305
0a688     94 4E 05 F1 | 	add	fp, #148
0a68c     A7 0A 02 FB | 	rdlong	local01, fp
0a690     94 4E 85 F1 | 	sub	fp, #148
0a694     01 0A 06 F1 | 	add	local01, #1
0a698     05 0B C2 FA | 	rdbyte	local01, local01
0a69c     2E 0A 0E F2 | 	cmp	local01, #46 wz
0a6a0     34 00 90 5D |  if_ne	jmp	#LR__1305
0a6a4     70 4E 05 F1 | 	add	fp, #112
0a6a8     A7 00 02 FB | 	rdlong	arg01, fp
0a6ac     24 4E 05 F1 | 	add	fp, #36
0a6b0     A7 02 02 FB | 	rdlong	arg02, fp
0a6b4     4C 4E 85 F1 | 	sub	fp, #76
0a6b8     A7 04 02 FB | 	rdlong	arg03, fp
0a6bc     48 4E 85 F1 | 	sub	fp, #72
0a6c0     50 AD BF FD | 	call	#_fatfs_cc_st_clust
0a6c4     70 4E 05 F1 | 	add	fp, #112
0a6c8     A7 0A 02 FB | 	rdlong	local01, fp
0a6cc     70 4E 85 F1 | 	sub	fp, #112
0a6d0     03 0A 06 F1 | 	add	local01, #3
0a6d4     05 03 48 FC | 	wrbyte	#1, local01
0a6d8                 | LR__1305
0a6d8                 | LR__1306
0a6d8                 | LR__1307
0a6d8                 | LR__1308
0a6d8                 | LR__1309
0a6d8     0C 4E 05 F1 | 	add	fp, #12
0a6dc     A7 0A 0A FB | 	rdlong	local01, fp wz
0a6e0     0C 4E 85 F1 | 	sub	fp, #12
0a6e4     40 00 90 5D |  if_ne	jmp	#LR__1311
0a6e8     10 4E 05 F1 | 	add	fp, #16
0a6ec     A7 00 02 F6 | 	mov	arg01, fp
0a6f0     10 4E 85 F1 | 	sub	fp, #16
0a6f4     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
0a6f8     0C 4E 05 F1 | 	add	fp, #12
0a6fc     A7 EA 61 FC | 	wrlong	result1, fp
0a700     0C 4E 85 F1 | 	sub	fp, #12
0a704     00 EA 0D F2 | 	cmp	result1, #0 wz
0a708     1C 00 90 5D |  if_ne	jmp	#LR__1310
0a70c     70 4E 05 F1 | 	add	fp, #112
0a710     A7 00 02 FB | 	rdlong	arg01, fp
0a714     70 4E 85 F1 | 	sub	fp, #112
0a718     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
0a71c     0C 4E 05 F1 | 	add	fp, #12
0a720     A7 EA 61 FC | 	wrlong	result1, fp
0a724     0C 4E 85 F1 | 	sub	fp, #12
0a728                 | LR__1310
0a728                 | LR__1311
0a728                 | LR__1312
0a728                 | LR__1313
0a728                 | ' 					res = sync_fs(fs);
0a728                 | ' 				}
0a728                 | ' 			}
0a728                 | ' 
0a728                 | ' 		}
0a728                 | ' 		;
0a728                 | ' 	}
0a728                 | ' 
0a728                 | ' 	return res ;
0a728     0C 4E 05 F1 | 	add	fp, #12
0a72c     A7 EA 01 FB | 	rdlong	result1, fp
0a730     0C 4E 85 F1 | 	sub	fp, #12
0a734     A7 F0 03 F6 | 	mov	ptra, fp
0a738     B2 00 A0 FD | 	call	#popregs_
0a73c                 | _fatfs_cc_f_rename_ret
0a73c     2D 00 64 FD | 	ret
0a740                 | 
0a740                 | _fatfs_cc_time
0a740     00 4A 05 F6 | 	mov	COUNT_, #0
0a744     A8 00 A0 FD | 	call	#pushregs_
0a748     14 F0 07 F1 | 	add	ptra, #20
0a74c     04 4E 05 F1 | 	add	fp, #4
0a750     A7 00 62 FC | 	wrlong	arg01, fp
0a754     04 4E 05 F1 | 	add	fp, #4
0a758     A7 00 02 F6 | 	mov	arg01, fp
0a75c     08 4E 85 F1 | 	sub	fp, #8
0a760     00 02 06 F6 | 	mov	arg02, #0
0a764     F8 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
0a768     08 4E 05 F1 | 	add	fp, #8
0a76c     A7 EA 01 FB | 	rdlong	result1, fp
0a770     08 4E 05 F1 | 	add	fp, #8
0a774     A7 EA 61 FC | 	wrlong	result1, fp
0a778     0C 4E 85 F1 | 	sub	fp, #12
0a77c     A7 EA 09 FB | 	rdlong	result1, fp wz
0a780     04 4E 85 F1 | 	sub	fp, #4
0a784     18 00 90 AD |  if_e	jmp	#LR__1320
0a788     04 4E 05 F1 | 	add	fp, #4
0a78c     A7 EA 01 FB | 	rdlong	result1, fp
0a790     0C 4E 05 F1 | 	add	fp, #12
0a794     A7 02 02 FB | 	rdlong	arg02, fp
0a798     10 4E 85 F1 | 	sub	fp, #16
0a79c     F5 02 62 FC | 	wrlong	arg02, result1
0a7a0                 | LR__1320
0a7a0                 | '         *tp = now;
0a7a0                 | '     return now;
0a7a0     10 4E 05 F1 | 	add	fp, #16
0a7a4     A7 EA 01 FB | 	rdlong	result1, fp
0a7a8     10 4E 85 F1 | 	sub	fp, #16
0a7ac     A7 F0 03 F6 | 	mov	ptra, fp
0a7b0     B2 00 A0 FD | 	call	#popregs_
0a7b4                 | _fatfs_cc_time_ret
0a7b4     2D 00 64 FD | 	ret
0a7b8                 | 
0a7b8                 | _fatfs_cc_mktime
0a7b8     06 4A 05 F6 | 	mov	COUNT_, #6
0a7bc     A8 00 A0 FD | 	call	#pushregs_
0a7c0     00 0B 02 F6 | 	mov	local01, arg01
0a7c4     14 0A 06 F1 | 	add	local01, #20
0a7c8     05 01 02 FB | 	rdlong	arg01, local01
0a7cc     14 0A 86 F1 | 	sub	local01, #20
0a7d0     46 00 56 F2 | 	cmps	arg01, #70 wc
0a7d4                 | '                 return (time_t) -1;
0a7d4     01 EA 65 C6 |  if_b	neg	result1, #1
0a7d8     7C 01 90 CD |  if_b	jmp	#LR__1334
0a7dc     03 00 00 FF 
0a7e0     6C 0D 06 F6 | 	mov	local02, ##1900
0a7e4     14 0A 06 F1 | 	add	local01, #20
0a7e8     05 EB 01 FB | 	rdlong	result1, local01
0a7ec     F5 0C 02 F1 | 	add	local02, result1
0a7f0     08 0A 86 F1 | 	sub	local01, #8
0a7f4     05 0F 02 FB | 	rdlong	local03, local01
0a7f8     01 0E 86 F1 | 	sub	local03, #1
0a7fc     04 0A 06 F1 | 	add	local01, #4
0a800     05 01 02 FB | 	rdlong	arg01, local01
0a804     10 0A 86 F1 | 	sub	local01, #16
0a808     02 00 66 F0 | 	shl	arg01, #2
0a80c     02 00 00 FF 
0a810     C8 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
0a814     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0a818     00 EB 01 FB | 	rdlong	result1, arg01
0a81c     F5 0E 02 F1 | 	add	local03, result1
0a820     06 01 02 F6 | 	mov	arg01, local02
0a824     02 00 00 FF 
0a828     C8 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
0a82c     D8 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
0a830     00 EA 0D F2 | 	cmp	result1, #0 wz
0a834     1C 00 90 AD |  if_e	jmp	#LR__1330
0a838     00 10 06 F6 | 	mov	local04, #0
0a83c     10 0A 06 F1 | 	add	local01, #16
0a840     05 EB 01 FB | 	rdlong	result1, local01
0a844     10 0A 86 F1 | 	sub	local01, #16
0a848     02 EA 55 F2 | 	cmps	result1, #2 wc
0a84c     01 10 06 36 |  if_ae	mov	local04, #1
0a850     04 00 90 FD | 	jmp	#LR__1331
0a854                 | LR__1330
0a854     00 10 06 F6 | 	mov	local04, #0
0a858                 | LR__1331
0a858     04 0A 06 F1 | 	add	local01, #4
0a85c     05 EB 01 FB | 	rdlong	result1, local01
0a860     04 0A 86 F1 | 	sub	local01, #4
0a864     05 13 02 FB | 	rdlong	local05, local01
0a868     08 0A 06 F1 | 	add	local01, #8
0a86c     05 01 02 FB | 	rdlong	arg01, local01
0a870     07 00 00 FF 
0a874     10 00 06 FD | 	qmul	arg01, ##3600
0a878     08 0F 02 F1 | 	add	local03, local04
0a87c     F5 10 02 F6 | 	mov	local04, result1
0a880     04 10 66 F0 | 	shl	local04, #4
0a884     F5 10 82 F1 | 	sub	local04, result1
0a888     02 10 66 F0 | 	shl	local04, #2
0a88c     08 13 02 F1 | 	add	local05, local04
0a890     08 0A 86 F1 | 	sub	local01, #8
0a894     18 10 62 FD | 	getqx	local04
0a898     A8 00 00 FF 
0a89c     80 0F 06 FD | 	qmul	local03, ##86400
0a8a0     08 13 02 F1 | 	add	local05, local04
0a8a4     06 0F 02 F6 | 	mov	local03, local02
0a8a8     03 00 00 FF 
0a8ac     B2 0F 86 F1 | 	sub	local03, ##1970
0a8b0     18 10 62 FD | 	getqx	local04
0a8b4     99 F0 00 FF 
0a8b8     80 0F 06 FD | 	qmul	local03, ##31536000
0a8bc     08 13 02 F1 | 	add	local05, local04
0a8c0     06 0F 02 F6 | 	mov	local03, local02
0a8c4     03 00 00 FF 
0a8c8     B1 0F 86 F1 | 	sub	local03, ##1969
0a8cc     07 15 52 F6 | 	abs	local06, local03 wc
0a8d0     02 14 46 F0 | 	shr	local06, #2
0a8d4     0A 15 82 F6 | 	negc	local06, local06
0a8d8     03 00 00 FF 
0a8dc     D1 0D 56 F2 | 	cmps	local02, ##2001 wc
0a8e0     18 10 62 FD | 	getqx	local04
0a8e4     08 13 02 F1 | 	add	local05, local04
0a8e8     18 00 90 CD |  if_b	jmp	#LR__1332
0a8ec     03 00 00 FF 
0a8f0     D0 0D 86 F1 | 	sub	local02, ##2000
0a8f4     06 11 52 F6 | 	abs	local04, local02 wc
0a8f8     64 10 16 FD | 	qdiv	local04, #100
0a8fc     18 10 62 FD | 	getqx	local04
0a900     08 15 A2 F3 | 	sumnc	local06, local04
0a904                 | LR__1332
0a904     A8 00 00 FF 
0a908     80 15 06 FD | 	qmul	local06, ##86400
0a90c     18 14 62 FD | 	getqx	local06
0a910     0A 13 02 F1 | 	add	local05, local06
0a914     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
0a918     02 00 00 FF 
0a91c     94 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
0a920     F3 14 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
0a924     0A 13 02 F1 | 	add	local05, local06
0a928     68 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
0a92c     F3 0E 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
0a930     02 00 00 FF 
0a934     FC E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
0a938     01 0E 0E F2 | 	cmp	local03, #1 wz
0a93c     14 00 90 5D |  if_ne	jmp	#LR__1333
0a940     05 01 02 F6 | 	mov	arg01, local01
0a944     C4 19 B0 FD | 	call	#_fatfs_cc___indst
0a948     00 EA 0D F2 | 	cmp	result1, #0 wz
0a94c     07 00 00 5F 
0a950     10 12 86 51 |  if_ne	sub	local05, ##3600
0a954                 | LR__1333
0a954                 | '                 s -=  (3600L) ;
0a954                 | ' 
0a954                 | '         return s;
0a954     09 EB 01 F6 | 	mov	result1, local05
0a958                 | LR__1334
0a958     A7 F0 03 F6 | 	mov	ptra, fp
0a95c     B2 00 A0 FD | 	call	#popregs_
0a960                 | _fatfs_cc_mktime_ret
0a960     2D 00 64 FD | 	ret
0a964                 | 
0a964                 | _fatfs_cc__gmtime_r
0a964     03 4A 05 F6 | 	mov	COUNT_, #3
0a968     A8 00 A0 FD | 	call	#pushregs_
0a96c     00 0B 02 FB | 	rdlong	local01, arg01
0a970     A8 00 00 FF 
0a974     80 0B 16 FD | 	qdiv	local01, ##86400
0a978     18 EA 61 FD | 	getqx	result1
0a97c     04 EA 05 F1 | 	add	result1, #4
0a980     07 EA 15 FD | 	qdiv	result1, #7
0a984     18 02 06 F1 | 	add	arg02, #24
0a988     D1 7F 27 FF 
0a98c     00 0A 16 F2 | 	cmp	local01, ##1325376000 wc
0a990     D1 7F 27 3F 
0a994     00 0A 86 31 |  if_ae	sub	local01, ##1325376000
0a998     03 00 00 3F 
0a99c     DC 0D 06 36 |  if_ae	mov	local02, ##2012
0a9a0     03 00 00 CF 
0a9a4     B2 0D 06 C6 |  if_b	mov	local02, ##1970
0a9a8                 | ' 	  year = 1970;
0a9a8                 | ' 	}
0a9a8                 | ' 
0a9a8                 | ' 	for(;;) {
0a9a8     19 EA 61 FD | 	getqy	result1
0a9ac     01 EB 61 FC | 	wrlong	result1, arg02
0a9b0     18 02 86 F1 | 	sub	arg02, #24
0a9b4                 | LR__1340
0a9b4     06 01 02 F6 | 	mov	arg01, local02
0a9b8     4C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
0a9bc     00 EA 0D F2 | 	cmp	result1, #0 wz
0a9c0     42 F1 00 5F 
0a9c4     00 0F 06 56 |  if_ne	mov	local03, ##31622400
0a9c8     99 F0 00 AF 
0a9cc     80 0F 06 A6 |  if_e	mov	local03, ##31536000
0a9d0     07 0B 12 F2 | 	cmp	local01, local03 wc
0a9d4                 | ' 	    break;
0a9d4     01 0C 06 31 |  if_ae	add	local02, #1
0a9d8     07 0B 82 31 |  if_ae	sub	local01, local03
0a9dc     D4 FF 9F 3D |  if_ae	jmp	#LR__1340
0a9e0     A8 00 00 FF 
0a9e4     80 0B 16 FD | 	qdiv	local01, ##86400
0a9e8     06 0F 02 F6 | 	mov	local03, local02
0a9ec     03 00 00 FF 
0a9f0     6C 0F 86 F1 | 	sub	local03, ##1900
0a9f4     14 02 06 F1 | 	add	arg02, #20
0a9f8     01 0F 62 FC | 	wrlong	local03, arg02
0a9fc     08 02 06 F1 | 	add	arg02, #8
0aa00     06 01 02 F6 | 	mov	arg01, local02
0aa04     18 0C 62 FD | 	getqx	local02
0aa08     01 0D 62 FC | 	wrlong	local02, arg02
0aa0c     1C 02 86 F1 | 	sub	arg02, #28
0aa10     F4 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
0aa14     00 EA 0D F2 | 	cmp	result1, #0 wz
0aa18     1D 0E 06 56 |  if_ne	mov	local03, #29
0aa1c     1C 0E 06 A6 |  if_e	mov	local03, #28
0aa20     02 00 00 FF 
0aa24     9C E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
0aa28     F3 0E 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
0aa2c     02 00 00 FF 
0aa30     9C E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
0aa34                 | ' 
0aa34                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
0aa34                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
0aa34     00 00 06 F6 | 	mov	arg01, #0
0aa38     97 2A 48 FB | 	callpa	#(@LR__1342-@LR__1341)>>2,fcache_load_ptr_
0aa3c                 | LR__1341
0aa3c     00 0F 02 F6 | 	mov	local03, arg01
0aa40     02 0E 66 F0 | 	shl	local03, #2
0aa44     02 00 00 FF 
0aa48     98 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
0aa4c     F3 0E 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
0aa50     07 0F 02 FB | 	rdlong	local03, local03
0aa54     07 0D 52 F2 | 	cmps	local02, local03 wc
0aa58     02 00 00 FF 
0aa5c     98 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
0aa60     2C 00 90 CD |  if_b	jmp	#LR__1343
0aa64     00 0F 02 F6 | 	mov	local03, arg01
0aa68     02 0E 66 F0 | 	shl	local03, #2
0aa6c     02 00 00 FF 
0aa70     98 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
0aa74     F3 0E 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
0aa78     07 0F 02 FB | 	rdlong	local03, local03
0aa7c     07 0D 82 F1 | 	sub	local02, local03
0aa80     01 00 06 F1 | 	add	arg01, #1
0aa84     02 00 00 FF 
0aa88     98 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
0aa8c     AC FF 9F FD | 	jmp	#LR__1341
0aa90                 | LR__1342
0aa90                 | LR__1343
0aa90     A8 00 00 FF 
0aa94     80 0B 16 FD | 	qdiv	local01, ##86400
0aa98     10 02 06 F1 | 	add	arg02, #16
0aa9c     01 01 62 FC | 	wrlong	arg01, arg02
0aaa0     01 0C 06 F1 | 	add	local02, #1
0aaa4     04 02 86 F1 | 	sub	arg02, #4
0aaa8     01 0D 62 FC | 	wrlong	local02, arg02
0aaac     19 0A 62 FD | 	getqy	local01
0aab0     07 00 00 FF 
0aab4     10 0A 16 FD | 	qdiv	local01, ##3600
0aab8     18 0E 62 FD | 	getqx	local03
0aabc     07 00 00 FF 
0aac0     10 0A 16 FD | 	qdiv	local01, ##3600
0aac4     04 02 86 F1 | 	sub	arg02, #4
0aac8     01 0F 62 FC | 	wrlong	local03, arg02
0aacc     19 0A 62 FD | 	getqy	local01
0aad0     3C 0A 16 FD | 	qdiv	local01, #60
0aad4     18 0E 62 FD | 	getqx	local03
0aad8     3C 0A 16 FD | 	qdiv	local01, #60
0aadc     04 02 86 F1 | 	sub	arg02, #4
0aae0     01 0F 62 FC | 	wrlong	local03, arg02
0aae4     04 02 86 F1 | 	sub	arg02, #4
0aae8                 | '         stm->tm_isdst = 0;
0aae8                 | ' 
0aae8                 | ' ;
0aae8                 | '         return stm;
0aae8     01 EB 01 F6 | 	mov	result1, arg02
0aaec     19 0E 62 FD | 	getqy	local03
0aaf0     01 0F 62 FC | 	wrlong	local03, arg02
0aaf4     20 02 06 F1 | 	add	arg02, #32
0aaf8     01 01 68 FC | 	wrlong	#0, arg02
0aafc     A7 F0 03 F6 | 	mov	ptra, fp
0ab00     B2 00 A0 FD | 	call	#popregs_
0ab04                 | _fatfs_cc__gmtime_r_ret
0ab04     2D 00 64 FD | 	ret
0ab08                 | 
0ab08                 | _fatfs_cc__tzset
0ab08     62 00 00 FF 
0ab0c     CF 01 06 F6 | 	mov	arg01, ##@LR__1628
0ab10     34 00 B0 FD | 	call	#_fatfs_cc_getenv
0ab14     F5 00 02 F6 | 	mov	arg01, result1
0ab18     02 00 00 FF 
0ab1c     FC E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
0ab20     F3 02 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
0ab24     02 00 00 FF 
0ab28     FC E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
0ab2c     28 15 B0 FD | 	call	#_fatfs_cc___tzoffset
0ab30     02 00 00 FF 
0ab34     94 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
0ab38     F3 EA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
0ab3c     02 00 00 FF 
0ab40     94 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
0ab44                 | _fatfs_cc__tzset_ret
0ab44     2D 00 64 FD | 	ret
0ab48                 | 
0ab48                 | _fatfs_cc_getenv
0ab48     06 4A 05 F6 | 	mov	COUNT_, #6
0ab4c     A8 00 A0 FD | 	call	#pushregs_
0ab50     00 0B 02 F6 | 	mov	local01, arg01
0ab54     00 0D 02 F6 | 	mov	local02, arg01
0ab58     97 06 48 FB | 	callpa	#(@LR__1351-@LR__1350)>>2,fcache_load_ptr_
0ab5c                 | LR__1350
0ab5c     06 EB C9 FA | 	rdbyte	result1, local02 wz
0ab60     01 0C 06 51 |  if_ne	add	local02, #1
0ab64     F4 FF 9F 5D |  if_ne	jmp	#LR__1350
0ab68                 | LR__1351
0ab68     00 0D 82 F1 | 	sub	local02, arg01
0ab6c     06 EB 01 F6 | 	mov	result1, local02
0ab70     02 00 00 FF 
0ab74     4C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
0ab78     F3 04 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
0ab7c     02 00 00 FF 
0ab80     4C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
0ab84                 | '             return 0;
0ab84     00 EA 05 A6 |  if_e	mov	result1, #0
0ab88     5C 00 90 AD |  if_e	jmp	#LR__1354
0ab8c                 | ' 
0ab8c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
0ab8c     02 00 00 FF 
0ab90     4C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
0ab94     F3 0E 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
0ab98     02 00 00 FF 
0ab9c     4C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
0aba0                 | LR__1352
0aba0     07 11 0A FB | 	rdlong	local04, local03 wz
0aba4     3C 00 90 AD |  if_e	jmp	#LR__1353
0aba8     08 01 02 F6 | 	mov	arg01, local04
0abac     05 03 02 F6 | 	mov	arg02, local01
0abb0     06 05 02 F6 | 	mov	arg03, local02
0abb4     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
0abb8     00 EA 0D F2 | 	cmp	result1, #0 wz
0abbc     06 13 02 A6 |  if_e	mov	local05, local02
0abc0     08 13 02 A1 |  if_e	add	local05, local04
0abc4     09 15 C2 AA |  if_e	rdbyte	local06, local05
0abc8     3D 14 0E A2 |  if_e	cmp	local06, #61 wz
0abcc                 | ' 			return name+len+1;
0abcc     06 11 02 A1 |  if_e	add	local04, local02
0abd0     01 10 06 A1 |  if_e	add	local04, #1
0abd4     08 EB 01 A6 |  if_e	mov	result1, local04
0abd8     0C 00 90 AD |  if_e	jmp	#LR__1354
0abdc     04 0E 06 F1 | 	add	local03, #4
0abe0     BC FF 9F FD | 	jmp	#LR__1352
0abe4                 | LR__1353
0abe4                 | ' 	}
0abe4                 | ' 	return 0;
0abe4     00 EA 05 F6 | 	mov	result1, #0
0abe8                 | LR__1354
0abe8     A7 F0 03 F6 | 	mov	ptra, fp
0abec     B2 00 A0 FD | 	call	#popregs_
0abf0                 | _fatfs_cc_getenv_ret
0abf0     2D 00 64 FD | 	ret
0abf4                 | 
0abf4                 | _fatfs_cc__get_fattime
0abf4     00 4A 05 F6 | 	mov	COUNT_, #0
0abf8     A8 00 A0 FD | 	call	#pushregs_
0abfc     34 F0 07 F1 | 	add	ptra, #52
0ac00     00 00 06 F6 | 	mov	arg01, #0
0ac04     38 FB BF FD | 	call	#_fatfs_cc_time
0ac08     04 4E 05 F1 | 	add	fp, #4
0ac0c     A7 EA 61 FC | 	wrlong	result1, fp
0ac10     A7 00 02 F6 | 	mov	arg01, fp
0ac14     0C 4E 05 F1 | 	add	fp, #12
0ac18     A7 02 02 F6 | 	mov	arg02, fp
0ac1c     10 4E 85 F1 | 	sub	fp, #16
0ac20     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
0ac24     24 4E 05 F1 | 	add	fp, #36
0ac28     A7 02 02 FB | 	rdlong	arg02, fp
0ac2c     50 02 86 F1 | 	sub	arg02, #80
0ac30     09 02 66 F0 | 	shl	arg02, #9
0ac34     04 4E 85 F1 | 	sub	fp, #4
0ac38     A7 EA 01 FB | 	rdlong	result1, fp
0ac3c     01 EA 05 F1 | 	add	result1, #1
0ac40     05 EA 65 F0 | 	shl	result1, #5
0ac44     F5 02 42 F5 | 	or	arg02, result1
0ac48     04 4E 85 F1 | 	sub	fp, #4
0ac4c     A7 EA 01 FB | 	rdlong	result1, fp
0ac50     F5 02 42 F5 | 	or	arg02, result1
0ac54     14 4E 85 F1 | 	sub	fp, #20
0ac58     A7 02 62 FC | 	wrlong	arg02, fp
0ac5c     10 4E 05 F1 | 	add	fp, #16
0ac60     A7 02 02 FB | 	rdlong	arg02, fp
0ac64     0B 02 66 F0 | 	shl	arg02, #11
0ac68     04 4E 85 F1 | 	sub	fp, #4
0ac6c     A7 EA 01 FB | 	rdlong	result1, fp
0ac70     05 EA 65 F0 | 	shl	result1, #5
0ac74     F5 02 42 F5 | 	or	arg02, result1
0ac78     04 4E 85 F1 | 	sub	fp, #4
0ac7c     A7 EA 01 FB | 	rdlong	result1, fp
0ac80     F5 02 42 F5 | 	or	arg02, result1
0ac84     04 4E 85 F1 | 	sub	fp, #4
0ac88     A7 02 62 FC | 	wrlong	arg02, fp
0ac8c                 | ' 
0ac8c                 | '     now = time(0);
0ac8c                 | '     _gmtime_r (&now, &date);
0ac8c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
0ac8c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
0ac8c                 | '     return (ffdate << 16) | fftime;
0ac8c     04 4E 85 F1 | 	sub	fp, #4
0ac90     A7 EA 01 FB | 	rdlong	result1, fp
0ac94     10 EA 65 F0 | 	shl	result1, #16
0ac98     08 4E 85 F1 | 	sub	fp, #8
0ac9c     01 EB 41 F5 | 	or	result1, arg02
0aca0     A7 F0 03 F6 | 	mov	ptra, fp
0aca4     B2 00 A0 FD | 	call	#popregs_
0aca8                 | _fatfs_cc__get_fattime_ret
0aca8     2D 00 64 FD | 	ret
0acac                 | 
0acac                 | _fatfs_cc_unixtime_0452
0acac     00 4A 05 F6 | 	mov	COUNT_, #0
0acb0     A8 00 A0 FD | 	call	#pushregs_
0acb4     34 F0 07 F1 | 	add	ptra, #52
0acb8     04 4E 05 F1 | 	add	fp, #4
0acbc     A7 00 62 FC | 	wrlong	arg01, fp
0acc0     04 4E 05 F1 | 	add	fp, #4
0acc4     A7 02 62 FC | 	wrlong	arg02, fp
0acc8     04 4E 85 F1 | 	sub	fp, #4
0accc     A7 02 02 FB | 	rdlong	arg02, fp
0acd0     09 02 46 F0 | 	shr	arg02, #9
0acd4     7F 02 06 F5 | 	and	arg02, #127
0acd8     50 EA 05 F6 | 	mov	result1, #80
0acdc     01 EB 01 F1 | 	add	result1, arg02
0ace0     20 4E 05 F1 | 	add	fp, #32
0ace4     A7 EA 61 FC | 	wrlong	result1, fp
0ace8     20 4E 85 F1 | 	sub	fp, #32
0acec     A7 EA 01 FB | 	rdlong	result1, fp
0acf0     05 EA 45 F0 | 	shr	result1, #5
0acf4     F5 EA 41 F8 | 	getnib	result1, result1, #0
0acf8     01 EA 85 F1 | 	sub	result1, #1
0acfc     1C 4E 05 F1 | 	add	fp, #28
0ad00     A7 EA 61 FC | 	wrlong	result1, fp
0ad04     1C 4E 85 F1 | 	sub	fp, #28
0ad08     A7 EA 01 FB | 	rdlong	result1, fp
0ad0c     1F EA 05 F5 | 	and	result1, #31
0ad10     18 4E 05 F1 | 	add	fp, #24
0ad14     A7 EA 61 FC | 	wrlong	result1, fp
0ad18     14 4E 85 F1 | 	sub	fp, #20
0ad1c     A7 EA 01 FB | 	rdlong	result1, fp
0ad20     0B EA 45 F0 | 	shr	result1, #11
0ad24     1F EA 05 F5 | 	and	result1, #31
0ad28     10 4E 05 F1 | 	add	fp, #16
0ad2c     A7 EA 61 FC | 	wrlong	result1, fp
0ad30     10 4E 85 F1 | 	sub	fp, #16
0ad34     A7 EA 01 FB | 	rdlong	result1, fp
0ad38     05 EA 45 F0 | 	shr	result1, #5
0ad3c     3F EA 05 F5 | 	and	result1, #63
0ad40     0C 4E 05 F1 | 	add	fp, #12
0ad44     A7 EA 61 FC | 	wrlong	result1, fp
0ad48     0C 4E 85 F1 | 	sub	fp, #12
0ad4c     A7 02 02 FB | 	rdlong	arg02, fp
0ad50     1F 02 06 F5 | 	and	arg02, #31
0ad54     01 02 66 F0 | 	shl	arg02, #1
0ad58     08 4E 05 F1 | 	add	fp, #8
0ad5c     A7 02 62 FC | 	wrlong	arg02, fp
0ad60     A7 00 02 F6 | 	mov	arg01, fp
0ad64     10 4E 85 F1 | 	sub	fp, #16
0ad68     4C FA BF FD | 	call	#_fatfs_cc_mktime
0ad6c     0C 4E 05 F1 | 	add	fp, #12
0ad70     A7 EA 61 FC | 	wrlong	result1, fp
0ad74                 | ' 
0ad74                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
0ad74                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
0ad74                 | '     date.tm_mday = (dosdate & 0x1f);
0ad74                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
0ad74                 | '     date.tm_min = (dostime >> 5) & 0x3f;
0ad74                 | '     date.tm_sec = (dostime & 0x1f) << 1;
0ad74                 | ' 
0ad74                 | '     t = mktime(&date);
0ad74                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0ad74                 | '     return t;
0ad74     0C 4E 85 F1 | 	sub	fp, #12
0ad78     A7 F0 03 F6 | 	mov	ptra, fp
0ad7c     B2 00 A0 FD | 	call	#popregs_
0ad80                 | _fatfs_cc_unixtime_0452_ret
0ad80     2D 00 64 FD | 	ret
0ad84                 | 
0ad84                 | _fatfs_cc__set_dos_error_0454
0ad84     00 EF 01 F6 | 	mov	_var01, arg01
0ad88                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0ad88                 | '     switch (derr) {
0ad88     14 EE 25 F3 | 	fle	_var01, #20
0ad8c     30 EE 61 FD | 	jmprel	_var01
0ad90                 | LR__1360
0ad90     50 00 90 FD | 	jmp	#LR__1361
0ad94     84 00 90 FD | 	jmp	#LR__1375
0ad98     80 00 90 FD | 	jmp	#LR__1376
0ad9c     7C 00 90 FD | 	jmp	#LR__1377
0ada0     48 00 90 FD | 	jmp	#LR__1362
0ada4     44 00 90 FD | 	jmp	#LR__1363
0ada8     40 00 90 FD | 	jmp	#LR__1364
0adac     44 00 90 FD | 	jmp	#LR__1365
0adb0     48 00 90 FD | 	jmp	#LR__1367
0adb4     54 00 90 FD | 	jmp	#LR__1370
0adb8     38 00 90 FD | 	jmp	#LR__1366
0adbc     4C 00 90 FD | 	jmp	#LR__1371
0adc0     48 00 90 FD | 	jmp	#LR__1372
0adc4     44 00 90 FD | 	jmp	#LR__1373
0adc8     50 00 90 FD | 	jmp	#LR__1378
0adcc     4C 00 90 FD | 	jmp	#LR__1378
0add0     48 00 90 FD | 	jmp	#LR__1378
0add4     2C 00 90 FD | 	jmp	#LR__1368
0add8     38 00 90 FD | 	jmp	#LR__1374
0addc     2C 00 90 FD | 	jmp	#LR__1369
0ade0     38 00 90 FD | 	jmp	#LR__1378
0ade4                 | LR__1361
0ade4     00 F0 05 F6 | 	mov	_var02, #0
0ade8                 | '         r = 0;
0ade8                 | '         break;
0ade8     34 00 90 FD | 	jmp	#LR__1379
0adec                 | LR__1362
0adec                 | LR__1363
0adec                 | LR__1364
0adec     04 F0 05 F6 | 	mov	_var02, #4
0adf0                 | '         r =  4 ;
0adf0                 | '         break;
0adf0     2C 00 90 FD | 	jmp	#LR__1379
0adf4                 | LR__1365
0adf4                 | LR__1366
0adf4     06 F0 05 F6 | 	mov	_var02, #6
0adf8                 | '         r =  6 ;
0adf8                 | '         break;
0adf8     24 00 90 FD | 	jmp	#LR__1379
0adfc                 | LR__1367
0adfc     09 F0 05 F6 | 	mov	_var02, #9
0ae00                 | '         r =  9 ;
0ae00                 | '         break;
0ae00     1C 00 90 FD | 	jmp	#LR__1379
0ae04                 | LR__1368
0ae04     07 F0 05 F6 | 	mov	_var02, #7
0ae08                 | '         r =  7 ;
0ae08                 | '         break;
0ae08     14 00 90 FD | 	jmp	#LR__1379
0ae0c                 | LR__1369
0ae0c                 | LR__1370
0ae0c                 | LR__1371
0ae0c                 | LR__1372
0ae0c                 | LR__1373
0ae0c     0A F0 05 F6 | 	mov	_var02, #10
0ae10                 | '         r =  10 ;
0ae10                 | '         break;
0ae10     0C 00 90 FD | 	jmp	#LR__1379
0ae14                 | LR__1374
0ae14     0B F0 05 F6 | 	mov	_var02, #11
0ae18                 | '         r =  11 ;
0ae18                 | '         break;
0ae18     04 00 90 FD | 	jmp	#LR__1379
0ae1c                 | LR__1375
0ae1c                 | LR__1376
0ae1c                 | LR__1377
0ae1c                 | LR__1378
0ae1c     0C F0 05 F6 | 	mov	_var02, #12
0ae20                 | '         r =  12 ;
0ae20                 | '         break;
0ae20                 | LR__1379
0ae20                 | '     }
0ae20                 | '     return _seterror(r);
0ae20     00 F0 4D F2 | 	cmps	_var02, #0 wz
0ae24     20 E4 05 F1 | 	add	ptr___system__dat__, #32
0ae28     F2 F0 61 FC | 	wrlong	_var02, ptr___system__dat__
0ae2c     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
0ae30     01 EA 65 56 |  if_ne	neg	result1, #1
0ae34     00 EA 05 A6 |  if_e	mov	result1, #0
0ae38                 | _fatfs_cc__set_dos_error_0454_ret
0ae38     2D 00 64 FD | 	ret
0ae3c                 | 
0ae3c                 | _fatfs_cc_v_creat
0ae3c     04 4A 05 F6 | 	mov	COUNT_, #4
0ae40     A8 00 A0 FD | 	call	#pushregs_
0ae44     00 0B 02 F6 | 	mov	local01, arg01
0ae48     01 0D 02 F6 | 	mov	local02, arg02
0ae4c     03 00 00 FF 
0ae50     3C 00 06 F6 | 	mov	arg01, ##1596
0ae54                 | '     return _gc_alloc(size);
0ae54     10 02 06 F6 | 	mov	arg02, #16
0ae58     48 6F BF FD | 	call	#__system___gc_doalloc
0ae5c     F5 0E 0A F6 | 	mov	local03, result1 wz
0ae60                 | '       return _seterror( 7 );
0ae60     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0ae64     F2 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
0ae68     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0ae6c     01 EA 65 A6 |  if_e	neg	result1, #1
0ae70     58 00 90 AD |  if_e	jmp	#LR__1381
0ae74     07 01 02 F6 | 	mov	arg01, local03
0ae78     00 02 06 F6 | 	mov	arg02, #0
0ae7c     03 00 00 FF 
0ae80     3C 04 06 F6 | 	mov	arg03, ##1596
0ae84     98 00 A0 FD | 	call	#\builtin_bytefill_
0ae88     02 00 00 FF 
0ae8c     14 0E 06 F1 | 	add	local03, ##1044
0ae90     07 01 02 F6 | 	mov	arg01, local03
0ae94     02 00 00 FF 
0ae98     14 0E 86 F1 | 	sub	local03, ##1044
0ae9c     06 03 02 F6 | 	mov	arg02, local02
0aea0     07 04 06 F6 | 	mov	arg03, #7
0aea4     B4 CC BF FD | 	call	#_fatfs_cc_f_open
0aea8     F5 10 0A F6 | 	mov	local04, result1 wz
0aeac     14 00 90 AD |  if_e	jmp	#LR__1380
0aeb0     07 01 02 F6 | 	mov	arg01, local03
0aeb4                 | '     return _gc_free(ptr);
0aeb4     F8 6F BF FD | 	call	#__system___gc_free
0aeb8                 | '     free(f);
0aeb8                 | '     return _set_dos_error(r);
0aeb8     08 01 02 F6 | 	mov	arg01, local04
0aebc     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0aec0     08 00 90 FD | 	jmp	#LR__1381
0aec4                 | LR__1380
0aec4     05 0F 62 FC | 	wrlong	local03, local01
0aec8                 | '   }
0aec8                 | '   fil->vfsdata = f;
0aec8                 | '   return 0;
0aec8     00 EA 05 F6 | 	mov	result1, #0
0aecc                 | LR__1381
0aecc     A7 F0 03 F6 | 	mov	ptra, fp
0aed0     B2 00 A0 FD | 	call	#popregs_
0aed4                 | _fatfs_cc_v_creat_ret
0aed4     2D 00 64 FD | 	ret
0aed8                 | 
0aed8                 | _fatfs_cc_v_close
0aed8     02 4A 05 F6 | 	mov	COUNT_, #2
0aedc     A8 00 A0 FD | 	call	#pushregs_
0aee0     00 0B 02 FB | 	rdlong	local01, arg01
0aee4     02 00 00 FF 
0aee8     14 0A 06 F1 | 	add	local01, ##1044
0aeec     05 01 02 F6 | 	mov	arg01, local01
0aef0     02 00 00 FF 
0aef4     14 0A 86 F1 | 	sub	local01, ##1044
0aef8     DC E3 BF FD | 	call	#_fatfs_cc_f_close
0aefc     F5 0C 02 F6 | 	mov	local02, result1
0af00     05 01 02 F6 | 	mov	arg01, local01
0af04                 | '     return _gc_free(ptr);
0af04     A8 6F BF FD | 	call	#__system___gc_free
0af08                 | '     FAT_FIL *f = fil->vfsdata;
0af08                 | '     r=f_close(&f->fil);
0af08                 | '     free(f);
0af08                 | '     return _set_dos_error(r);
0af08     06 01 02 F6 | 	mov	arg01, local02
0af0c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0af10     A7 F0 03 F6 | 	mov	ptra, fp
0af14     B2 00 A0 FD | 	call	#popregs_
0af18                 | _fatfs_cc_v_close_ret
0af18     2D 00 64 FD | 	ret
0af1c                 | 
0af1c                 | _fatfs_cc_v_opendir
0af1c     04 4A 05 F6 | 	mov	COUNT_, #4
0af20     A8 00 A0 FD | 	call	#pushregs_
0af24     00 0B 02 F6 | 	mov	local01, arg01
0af28     01 0D 02 F6 | 	mov	local02, arg02
0af2c     30 00 06 F6 | 	mov	arg01, #48
0af30                 | '     return _gc_alloc(size);
0af30     10 02 06 F6 | 	mov	arg02, #16
0af34     6C 6E BF FD | 	call	#__system___gc_doalloc
0af38     F5 0E 0A F6 | 	mov	local03, result1 wz
0af3c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0af3c                 | '       return _seterror( 7 );
0af3c     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0af40     F2 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
0af44     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0af48     01 EA 65 A6 |  if_e	neg	result1, #1
0af4c     34 00 90 AD |  if_e	jmp	#LR__1391
0af50     06 03 02 F6 | 	mov	arg02, local02
0af54     07 01 02 F6 | 	mov	arg01, local03
0af58     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
0af5c     F5 10 0A F6 | 	mov	local04, result1 wz
0af60     14 00 90 AD |  if_e	jmp	#LR__1390
0af64     07 01 02 F6 | 	mov	arg01, local03
0af68                 | '     return _gc_free(ptr);
0af68     44 6F BF FD | 	call	#__system___gc_free
0af6c                 | '         free(f);
0af6c                 | '         return _set_dos_error(r);
0af6c     08 01 02 F6 | 	mov	arg01, local04
0af70     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0af74     0C 00 90 FD | 	jmp	#LR__1391
0af78                 | LR__1390
0af78     04 0A 06 F1 | 	add	local01, #4
0af7c     05 0F 62 FC | 	wrlong	local03, local01
0af80                 | '     }
0af80                 | '     dir->vfsdata = f;
0af80                 | '     return 0;
0af80     00 EA 05 F6 | 	mov	result1, #0
0af84                 | LR__1391
0af84     A7 F0 03 F6 | 	mov	ptra, fp
0af88     B2 00 A0 FD | 	call	#popregs_
0af8c                 | _fatfs_cc_v_opendir_ret
0af8c     2D 00 64 FD | 	ret
0af90                 | 
0af90                 | _fatfs_cc_v_closedir
0af90     02 4A 05 F6 | 	mov	COUNT_, #2
0af94     A8 00 A0 FD | 	call	#pushregs_
0af98     04 00 06 F1 | 	add	arg01, #4
0af9c     00 0B 02 FB | 	rdlong	local01, arg01
0afa0     05 01 02 F6 | 	mov	arg01, local01
0afa4     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
0afa8     F5 0C 02 F6 | 	mov	local02, result1
0afac     05 01 02 F6 | 	mov	arg01, local01
0afb0                 | '     return _gc_free(ptr);
0afb0     FC 6E BF FD | 	call	#__system___gc_free
0afb4     00 0C 0E F2 | 	cmp	local02, #0 wz
0afb8     06 01 02 56 |  if_ne	mov	arg01, local02
0afbc     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0454
0afc0                 | '     return r;
0afc0     06 EB 01 F6 | 	mov	result1, local02
0afc4     A7 F0 03 F6 | 	mov	ptra, fp
0afc8     B2 00 A0 FD | 	call	#popregs_
0afcc                 | _fatfs_cc_v_closedir_ret
0afcc     2D 00 64 FD | 	ret
0afd0                 | 
0afd0                 | _fatfs_cc_v_readdir
0afd0     01 4A 05 F6 | 	mov	COUNT_, #1
0afd4     A8 00 A0 FD | 	call	#pushregs_
0afd8     2C F1 07 F1 | 	add	ptra, #300
0afdc     04 4E 05 F1 | 	add	fp, #4
0afe0     A7 00 62 FC | 	wrlong	arg01, fp
0afe4     04 4E 05 F1 | 	add	fp, #4
0afe8     A7 02 62 FC | 	wrlong	arg02, fp
0afec     04 4E 85 F1 | 	sub	fp, #4
0aff0     A7 04 02 FB | 	rdlong	arg03, fp
0aff4     04 04 06 F1 | 	add	arg03, #4
0aff8     02 01 02 FB | 	rdlong	arg01, arg03
0affc     08 4E 05 F1 | 	add	fp, #8
0b000     A7 02 02 F6 | 	mov	arg02, fp
0b004     0C 4E 85 F1 | 	sub	fp, #12
0b008     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
0b00c     28 4F 05 F1 | 	add	fp, #296
0b010     A7 EA 61 FC | 	wrlong	result1, fp
0b014     28 4F 85 F1 | 	sub	fp, #296
0b018     00 EA 0D F2 | 	cmp	result1, #0 wz
0b01c     14 00 90 AD |  if_e	jmp	#LR__1400
0b020                 | '         return _set_dos_error(r);
0b020     28 4F 05 F1 | 	add	fp, #296
0b024     A7 00 02 FB | 	rdlong	arg01, fp
0b028     28 4F 85 F1 | 	sub	fp, #296
0b02c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b030     C4 00 90 FD | 	jmp	#LR__1403
0b034                 | LR__1400
0b034     28 4E 05 F1 | 	add	fp, #40
0b038     A7 04 CA FA | 	rdbyte	arg03, fp wz
0b03c     28 4E 85 F1 | 	sub	fp, #40
0b040                 | '         return -1;
0b040     01 EA 65 A6 |  if_e	neg	result1, #1
0b044     B0 00 90 AD |  if_e	jmp	#LR__1403
0b048     08 4E 05 F1 | 	add	fp, #8
0b04c     A7 00 02 FB | 	rdlong	arg01, fp
0b050     20 4E 05 F1 | 	add	fp, #32
0b054     A7 02 02 F6 | 	mov	arg02, fp
0b058     28 4E 85 F1 | 	sub	fp, #40
0b05c     3F 04 06 F6 | 	mov	arg03, #63
0b060     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
0b064     08 4E 05 F1 | 	add	fp, #8
0b068     A7 04 02 FB | 	rdlong	arg03, fp
0b06c     3F 04 06 F1 | 	add	arg03, #63
0b070     02 01 48 FC | 	wrbyte	#0, arg03
0b074     0C 4E 05 F1 | 	add	fp, #12
0b078     A7 04 C2 FA | 	rdbyte	arg03, fp
0b07c     14 4E 85 F1 | 	sub	fp, #20
0b080     10 04 CE F7 | 	test	arg03, #16 wz
0b084     18 00 90 AD |  if_e	jmp	#LR__1401
0b088     08 4E 05 F1 | 	add	fp, #8
0b08c     A7 04 02 FB | 	rdlong	arg03, fp
0b090     08 4E 85 F1 | 	sub	fp, #8
0b094     50 04 06 F1 | 	add	arg03, #80
0b098     02 03 48 FC | 	wrbyte	#1, arg03
0b09c     14 00 90 FD | 	jmp	#LR__1402
0b0a0                 | LR__1401
0b0a0     08 4E 05 F1 | 	add	fp, #8
0b0a4     A7 04 02 FB | 	rdlong	arg03, fp
0b0a8     08 4E 85 F1 | 	sub	fp, #8
0b0ac     50 04 06 F1 | 	add	arg03, #80
0b0b0     02 01 48 FC | 	wrbyte	#0, arg03
0b0b4                 | LR__1402
0b0b4     08 4E 05 F1 | 	add	fp, #8
0b0b8     A7 04 02 FB | 	rdlong	arg03, fp
0b0bc     04 4E 05 F1 | 	add	fp, #4
0b0c0     A7 02 02 FB | 	rdlong	arg02, fp
0b0c4     48 04 06 F1 | 	add	arg03, #72
0b0c8     02 03 62 FC | 	wrlong	arg02, arg03
0b0cc     04 4E 85 F1 | 	sub	fp, #4
0b0d0     A7 0A 02 FB | 	rdlong	local01, fp
0b0d4     08 4E 05 F1 | 	add	fp, #8
0b0d8     A7 00 E2 FA | 	rdword	arg01, fp
0b0dc     02 4E 05 F1 | 	add	fp, #2
0b0e0     A7 02 E2 FA | 	rdword	arg02, fp
0b0e4     12 4E 85 F1 | 	sub	fp, #18
0b0e8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0452
0b0ec     4C 0A 06 F1 | 	add	local01, #76
0b0f0     05 EB 61 FC | 	wrlong	result1, local01
0b0f4                 | '         ent->d_type =  (0) ;
0b0f4                 | '     }
0b0f4                 | '     ent->d_size = finfo.fsize;
0b0f4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
0b0f4                 | '     return 0;
0b0f4     00 EA 05 F6 | 	mov	result1, #0
0b0f8                 | LR__1403
0b0f8     A7 F0 03 F6 | 	mov	ptra, fp
0b0fc     B2 00 A0 FD | 	call	#popregs_
0b100                 | _fatfs_cc_v_readdir_ret
0b100     2D 00 64 FD | 	ret
0b104                 | 
0b104                 | _fatfs_cc_v_stat
0b104     03 4A 05 F6 | 	mov	COUNT_, #3
0b108     A8 00 A0 FD | 	call	#pushregs_
0b10c     30 F1 07 F1 | 	add	ptra, #304
0b110     04 4E 05 F1 | 	add	fp, #4
0b114     A7 00 62 FC | 	wrlong	arg01, fp
0b118     04 4E 05 F1 | 	add	fp, #4
0b11c     A7 02 62 FC | 	wrlong	arg02, fp
0b120     08 4E 85 F1 | 	sub	fp, #8
0b124     01 01 02 F6 | 	mov	arg01, arg02
0b128     00 02 06 F6 | 	mov	arg02, #0
0b12c     30 04 06 F6 | 	mov	arg03, #48
0b130     98 00 A0 FD | 	call	#\builtin_bytefill_
0b134     04 4E 05 F1 | 	add	fp, #4
0b138     A7 EA 01 FB | 	rdlong	result1, fp
0b13c     04 4E 85 F1 | 	sub	fp, #4
0b140     F5 EA C9 FA | 	rdbyte	result1, result1 wz
0b144     2C 00 90 AD |  if_e	jmp	#LR__1410
0b148     04 4E 05 F1 | 	add	fp, #4
0b14c     A7 EA 01 FB | 	rdlong	result1, fp
0b150     04 4E 85 F1 | 	sub	fp, #4
0b154     F5 EA C1 FA | 	rdbyte	result1, result1
0b158     2E EA 0D F2 | 	cmp	result1, #46 wz
0b15c     04 4E 05 A1 |  if_e	add	fp, #4
0b160     A7 0A 02 AB |  if_e	rdlong	local01, fp
0b164     04 4E 85 A1 |  if_e	sub	fp, #4
0b168     01 0A 06 A1 |  if_e	add	local01, #1
0b16c     05 0D CA AA |  if_e	rdbyte	local02, local01 wz
0b170     18 00 90 5D |  if_ne	jmp	#LR__1411
0b174                 | LR__1410
0b174     18 4E 05 F1 | 	add	fp, #24
0b178     A7 20 48 FC | 	wrbyte	#16, fp
0b17c     0C 4E 85 F1 | 	sub	fp, #12
0b180     A7 00 68 FC | 	wrlong	#0, fp
0b184     0C 4E 85 F1 | 	sub	fp, #12
0b188     24 00 90 FD | 	jmp	#LR__1412
0b18c                 | LR__1411
0b18c     04 4E 05 F1 | 	add	fp, #4
0b190     A7 00 02 FB | 	rdlong	arg01, fp
0b194     0C 4E 05 F1 | 	add	fp, #12
0b198     A7 02 02 F6 | 	mov	arg02, fp
0b19c     10 4E 85 F1 | 	sub	fp, #16
0b1a0     AC EB BF FD | 	call	#_fatfs_cc_f_stat
0b1a4     0C 4E 05 F1 | 	add	fp, #12
0b1a8     A7 EA 61 FC | 	wrlong	result1, fp
0b1ac     0C 4E 85 F1 | 	sub	fp, #12
0b1b0                 | LR__1412
0b1b0     0C 4E 05 F1 | 	add	fp, #12
0b1b4     A7 0C 0A FB | 	rdlong	local02, fp wz
0b1b8     0C 4E 85 F1 | 	sub	fp, #12
0b1bc     14 00 90 AD |  if_e	jmp	#LR__1413
0b1c0                 | '         return _set_dos_error(r);
0b1c0     0C 4E 05 F1 | 	add	fp, #12
0b1c4     A7 00 02 FB | 	rdlong	arg01, fp
0b1c8     0C 4E 85 F1 | 	sub	fp, #12
0b1cc     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b1d0     14 01 90 FD | 	jmp	#LR__1414
0b1d4                 | LR__1413
0b1d4     2C 4F 05 F1 | 	add	fp, #300
0b1d8     A7 48 6A FC | 	wrlong	#292, fp
0b1dc     14 4F 85 F1 | 	sub	fp, #276
0b1e0     A7 0E C2 FA | 	rdbyte	local03, fp
0b1e4     18 4E 85 F1 | 	sub	fp, #24
0b1e8     01 0E CE F7 | 	test	local03, #1 wz
0b1ec     2C 4F 05 A1 |  if_e	add	fp, #300
0b1f0     A7 0E 02 AB |  if_e	rdlong	local03, fp
0b1f4     92 0E 46 A5 |  if_e	or	local03, #146
0b1f8     A7 0E 62 AC |  if_e	wrlong	local03, fp
0b1fc     2C 4F 85 A1 |  if_e	sub	fp, #300
0b200     18 4E 05 F1 | 	add	fp, #24
0b204     A7 0E C2 FA | 	rdbyte	local03, fp
0b208     18 4E 85 F1 | 	sub	fp, #24
0b20c     10 0E CE F7 | 	test	local03, #16 wz
0b210     2C 4F 05 51 |  if_ne	add	fp, #300
0b214     A7 0E 02 5B |  if_ne	rdlong	local03, fp
0b218     08 00 00 5F 
0b21c     49 0E 46 55 |  if_ne	or	local03, ##4169
0b220     A7 0E 62 5C |  if_ne	wrlong	local03, fp
0b224     2C 4F 85 51 |  if_ne	sub	fp, #300
0b228     08 4E 05 F1 | 	add	fp, #8
0b22c     A7 0E 02 FB | 	rdlong	local03, fp
0b230     24 4F 05 F1 | 	add	fp, #292
0b234     A7 0C 02 FB | 	rdlong	local02, fp
0b238     08 0E 06 F1 | 	add	local03, #8
0b23c     07 0D 62 FC | 	wrlong	local02, local03
0b240     24 4F 85 F1 | 	sub	fp, #292
0b244     A7 0E 02 FB | 	rdlong	local03, fp
0b248     0C 0E 06 F1 | 	add	local03, #12
0b24c     07 03 68 FC | 	wrlong	#1, local03
0b250     A7 0E 02 FB | 	rdlong	local03, fp
0b254     08 4E 05 F1 | 	add	fp, #8
0b258     A7 0C 02 FB | 	rdlong	local02, fp
0b25c     18 0E 06 F1 | 	add	local03, #24
0b260     07 0D 62 FC | 	wrlong	local02, local03
0b264     08 4E 85 F1 | 	sub	fp, #8
0b268     A7 0E 02 FB | 	rdlong	local03, fp
0b26c     1C 0E 06 F1 | 	add	local03, #28
0b270     01 00 80 FF 
0b274     07 01 68 FC | 	wrlong	##512, local03
0b278     A7 0C 02 FB | 	rdlong	local02, fp
0b27c     06 0F 02 F6 | 	mov	local03, local02
0b280     18 0C 06 F1 | 	add	local02, #24
0b284     06 0D 02 FB | 	rdlong	local02, local02
0b288     FF 0D 06 F1 | 	add	local02, #511
0b28c     06 0D 52 F6 | 	abs	local02, local02 wc
0b290     09 0C 46 F0 | 	shr	local02, #9
0b294     06 0D 82 F6 | 	negc	local02, local02
0b298     20 0E 06 F1 | 	add	local03, #32
0b29c     07 0D 62 FC | 	wrlong	local02, local03
0b2a0     A7 0C 02 FB | 	rdlong	local02, fp
0b2a4     06 0F 02 F6 | 	mov	local03, local02
0b2a8     06 0B 02 F6 | 	mov	local01, local02
0b2ac     0C 4E 05 F1 | 	add	fp, #12
0b2b0     A7 00 E2 FA | 	rdword	arg01, fp
0b2b4     02 4E 05 F1 | 	add	fp, #2
0b2b8     A7 02 E2 FA | 	rdword	arg02, fp
0b2bc     16 4E 85 F1 | 	sub	fp, #22
0b2c0     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0452
0b2c4     2C 0A 06 F1 | 	add	local01, #44
0b2c8     05 EB 61 FC | 	wrlong	result1, local01
0b2cc     28 0C 06 F1 | 	add	local02, #40
0b2d0     06 EB 61 FC | 	wrlong	result1, local02
0b2d4     24 0E 06 F1 | 	add	local03, #36
0b2d8     07 EB 61 FC | 	wrlong	result1, local03
0b2dc                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
0b2dc                 | '     }
0b2dc                 | '     buf->st_mode = mode;
0b2dc                 | '     buf->st_nlink = 1;
0b2dc                 | '     buf->st_size = finfo.fsize;
0b2dc                 | '     buf->st_blksize = 512;
0b2dc                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
0b2dc                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
0b2dc                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b2dc                 | '     return r;
0b2dc     0C 4E 05 F1 | 	add	fp, #12
0b2e0     A7 EA 01 FB | 	rdlong	result1, fp
0b2e4     0C 4E 85 F1 | 	sub	fp, #12
0b2e8                 | LR__1414
0b2e8     A7 F0 03 F6 | 	mov	ptra, fp
0b2ec     B2 00 A0 FD | 	call	#popregs_
0b2f0                 | _fatfs_cc_v_stat_ret
0b2f0     2D 00 64 FD | 	ret
0b2f4                 | 
0b2f4                 | _fatfs_cc_v_read
0b2f4     00 4A 05 F6 | 	mov	COUNT_, #0
0b2f8     A8 00 A0 FD | 	call	#pushregs_
0b2fc     1C F0 07 F1 | 	add	ptra, #28
0b300     04 4E 05 F1 | 	add	fp, #4
0b304     A7 00 62 FC | 	wrlong	arg01, fp
0b308     04 4E 05 F1 | 	add	fp, #4
0b30c     A7 02 62 FC | 	wrlong	arg02, fp
0b310     04 4E 05 F1 | 	add	fp, #4
0b314     A7 04 62 FC | 	wrlong	arg03, fp
0b318     08 4E 85 F1 | 	sub	fp, #8
0b31c     A7 00 02 FB | 	rdlong	arg01, fp
0b320     00 01 0A FB | 	rdlong	arg01, arg01 wz
0b324     0C 4E 05 F1 | 	add	fp, #12
0b328     A7 00 62 FC | 	wrlong	arg01, fp
0b32c     10 4E 85 F1 | 	sub	fp, #16
0b330                 | '         return _seterror( 5 );
0b330     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b334     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b338     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b33c     01 EA 65 A6 |  if_e	neg	result1, #1
0b340     B8 00 90 AD |  if_e	jmp	#LR__1422
0b344     10 4E 05 F1 | 	add	fp, #16
0b348     A7 00 02 FB | 	rdlong	arg01, fp
0b34c     02 00 00 FF 
0b350     14 00 06 F1 | 	add	arg01, ##1044
0b354     08 4E 85 F1 | 	sub	fp, #8
0b358     A7 02 02 FB | 	rdlong	arg02, fp
0b35c     04 4E 05 F1 | 	add	fp, #4
0b360     A7 04 02 FB | 	rdlong	arg03, fp
0b364     0C 4E 05 F1 | 	add	fp, #12
0b368     A7 06 02 F6 | 	mov	arg04, fp
0b36c     18 4E 85 F1 | 	sub	fp, #24
0b370     C4 CE BF FD | 	call	#_fatfs_cc_f_read
0b374     14 4E 05 F1 | 	add	fp, #20
0b378     A7 EA 61 FC | 	wrlong	result1, fp
0b37c     14 4E 85 F1 | 	sub	fp, #20
0b380     00 EA 0D F2 | 	cmp	result1, #0 wz
0b384     34 00 90 AD |  if_e	jmp	#LR__1420
0b388     04 4E 05 F1 | 	add	fp, #4
0b38c     A7 06 02 FB | 	rdlong	arg04, fp
0b390     03 05 02 F6 | 	mov	arg03, arg04
0b394     08 06 06 F1 | 	add	arg04, #8
0b398     03 07 02 FB | 	rdlong	arg04, arg04
0b39c     20 06 46 F5 | 	or	arg04, #32
0b3a0     08 04 06 F1 | 	add	arg03, #8
0b3a4     02 07 62 FC | 	wrlong	arg04, arg03
0b3a8                 | '         fil->state |=  (0x20) ;
0b3a8                 | '         return _set_dos_error(r);
0b3a8     10 4E 05 F1 | 	add	fp, #16
0b3ac     A7 00 02 FB | 	rdlong	arg01, fp
0b3b0     14 4E 85 F1 | 	sub	fp, #20
0b3b4     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b3b8     40 00 90 FD | 	jmp	#LR__1422
0b3bc                 | LR__1420
0b3bc     18 4E 05 F1 | 	add	fp, #24
0b3c0     A7 EA 09 FB | 	rdlong	result1, fp wz
0b3c4     18 4E 85 F1 | 	sub	fp, #24
0b3c8     24 00 90 5D |  if_ne	jmp	#LR__1421
0b3cc     04 4E 05 F1 | 	add	fp, #4
0b3d0     A7 EA 01 FB | 	rdlong	result1, fp
0b3d4     F5 06 02 F6 | 	mov	arg04, result1
0b3d8     04 4E 85 F1 | 	sub	fp, #4
0b3dc     08 EA 05 F1 | 	add	result1, #8
0b3e0     F5 EA 01 FB | 	rdlong	result1, result1
0b3e4     10 EA 45 F5 | 	or	result1, #16
0b3e8     08 06 06 F1 | 	add	arg04, #8
0b3ec     03 EB 61 FC | 	wrlong	result1, arg04
0b3f0                 | LR__1421
0b3f0                 | '         fil->state |=  (0x10) ;
0b3f0                 | '     }
0b3f0                 | '     return x;
0b3f0     18 4E 05 F1 | 	add	fp, #24
0b3f4     A7 EA 01 FB | 	rdlong	result1, fp
0b3f8     18 4E 85 F1 | 	sub	fp, #24
0b3fc                 | LR__1422
0b3fc     A7 F0 03 F6 | 	mov	ptra, fp
0b400     B2 00 A0 FD | 	call	#popregs_
0b404                 | _fatfs_cc_v_read_ret
0b404     2D 00 64 FD | 	ret
0b408                 | 
0b408                 | _fatfs_cc_v_write
0b408     00 4A 05 F6 | 	mov	COUNT_, #0
0b40c     A8 00 A0 FD | 	call	#pushregs_
0b410     1C F0 07 F1 | 	add	ptra, #28
0b414     04 4E 05 F1 | 	add	fp, #4
0b418     A7 00 62 FC | 	wrlong	arg01, fp
0b41c     04 4E 05 F1 | 	add	fp, #4
0b420     A7 02 62 FC | 	wrlong	arg02, fp
0b424     04 4E 05 F1 | 	add	fp, #4
0b428     A7 04 62 FC | 	wrlong	arg03, fp
0b42c     08 4E 85 F1 | 	sub	fp, #8
0b430     A7 00 02 FB | 	rdlong	arg01, fp
0b434     00 01 0A FB | 	rdlong	arg01, arg01 wz
0b438     0C 4E 05 F1 | 	add	fp, #12
0b43c     A7 00 62 FC | 	wrlong	arg01, fp
0b440     10 4E 85 F1 | 	sub	fp, #16
0b444                 | '         return _seterror( 5 );
0b444     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b448     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b44c     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b450     01 EA 65 A6 |  if_e	neg	result1, #1
0b454     84 00 90 AD |  if_e	jmp	#LR__1431
0b458     10 4E 05 F1 | 	add	fp, #16
0b45c     A7 00 02 FB | 	rdlong	arg01, fp
0b460     02 00 00 FF 
0b464     14 00 06 F1 | 	add	arg01, ##1044
0b468     08 4E 85 F1 | 	sub	fp, #8
0b46c     A7 02 02 FB | 	rdlong	arg02, fp
0b470     04 4E 05 F1 | 	add	fp, #4
0b474     A7 04 02 FB | 	rdlong	arg03, fp
0b478     0C 4E 05 F1 | 	add	fp, #12
0b47c     A7 06 02 F6 | 	mov	arg04, fp
0b480     18 4E 85 F1 | 	sub	fp, #24
0b484     4C D4 BF FD | 	call	#_fatfs_cc_f_write
0b488     14 4E 05 F1 | 	add	fp, #20
0b48c     A7 EA 61 FC | 	wrlong	result1, fp
0b490     14 4E 85 F1 | 	sub	fp, #20
0b494     00 EA 0D F2 | 	cmp	result1, #0 wz
0b498     34 00 90 AD |  if_e	jmp	#LR__1430
0b49c     04 4E 05 F1 | 	add	fp, #4
0b4a0     A7 06 02 FB | 	rdlong	arg04, fp
0b4a4     03 05 02 F6 | 	mov	arg03, arg04
0b4a8     08 06 06 F1 | 	add	arg04, #8
0b4ac     03 07 02 FB | 	rdlong	arg04, arg04
0b4b0     20 06 46 F5 | 	or	arg04, #32
0b4b4     08 04 06 F1 | 	add	arg03, #8
0b4b8     02 07 62 FC | 	wrlong	arg04, arg03
0b4bc                 | '         fil->state |=  (0x20) ;
0b4bc                 | '         return _set_dos_error(r);
0b4bc     10 4E 05 F1 | 	add	fp, #16
0b4c0     A7 00 02 FB | 	rdlong	arg01, fp
0b4c4     14 4E 85 F1 | 	sub	fp, #20
0b4c8     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b4cc     0C 00 90 FD | 	jmp	#LR__1431
0b4d0                 | LR__1430
0b4d0                 | '     }
0b4d0                 | '     return x;
0b4d0     18 4E 05 F1 | 	add	fp, #24
0b4d4     A7 EA 01 FB | 	rdlong	result1, fp
0b4d8     18 4E 85 F1 | 	sub	fp, #24
0b4dc                 | LR__1431
0b4dc     A7 F0 03 F6 | 	mov	ptra, fp
0b4e0     B2 00 A0 FD | 	call	#popregs_
0b4e4                 | _fatfs_cc_v_write_ret
0b4e4     2D 00 64 FD | 	ret
0b4e8                 | 
0b4e8                 | _fatfs_cc_v_lseek
0b4e8     04 4A 05 F6 | 	mov	COUNT_, #4
0b4ec     A8 00 A0 FD | 	call	#pushregs_
0b4f0     01 0B 02 F6 | 	mov	local01, arg02
0b4f4     02 0D 02 F6 | 	mov	local02, arg03
0b4f8     00 0F 02 FB | 	rdlong	local03, arg01
0b4fc     02 00 00 FF 
0b500     14 0E 0E F1 | 	add	local03, ##1044 wz
0b504                 | '         return _seterror( 5 );
0b504     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b508     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b50c     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b510     01 EA 65 A6 |  if_e	neg	result1, #1
0b514     4C 00 90 AD |  if_e	jmp	#LR__1442
0b518     00 0C 0E F2 | 	cmp	local02, #0 wz
0b51c     24 00 90 AD |  if_e	jmp	#LR__1440
0b520     01 0C 0E F2 | 	cmp	local02, #1 wz
0b524     14 0E 06 A1 |  if_e	add	local03, #20
0b528     07 11 02 AB |  if_e	rdlong	local04, local03
0b52c     14 0E 86 A1 |  if_e	sub	local03, #20
0b530     08 0B 02 A1 |  if_e	add	local01, local04
0b534     0C 0E 06 51 |  if_ne	add	local03, #12
0b538     07 11 02 5B |  if_ne	rdlong	local04, local03
0b53c     0C 0E 86 51 |  if_ne	sub	local03, #12
0b540     08 0B 02 51 |  if_ne	add	local01, local04
0b544                 | LR__1440
0b544     05 03 02 F6 | 	mov	arg02, local01
0b548     07 01 02 F6 | 	mov	arg01, local03
0b54c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
0b550     F5 00 0A F6 | 	mov	arg01, result1 wz
0b554     08 00 90 AD |  if_e	jmp	#LR__1441
0b558                 | '         return _set_dos_error(result);
0b558     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b55c     04 00 90 FD | 	jmp	#LR__1442
0b560                 | LR__1441
0b560                 | '     }
0b560                 | '     return offset;
0b560     05 EB 01 F6 | 	mov	result1, local01
0b564                 | LR__1442
0b564     A7 F0 03 F6 | 	mov	ptra, fp
0b568     B2 00 A0 FD | 	call	#popregs_
0b56c                 | _fatfs_cc_v_lseek_ret
0b56c     2D 00 64 FD | 	ret
0b570                 | 
0b570                 | _fatfs_cc_v_ioctl
0b570                 | ' {
0b570                 | '     return _seterror( 10 );
0b570     20 E4 05 F1 | 	add	ptr___system__dat__, #32
0b574     F2 14 68 FC | 	wrlong	#10, ptr___system__dat__
0b578     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
0b57c     01 EA 65 F6 | 	neg	result1, #1
0b580                 | _fatfs_cc_v_ioctl_ret
0b580     2D 00 64 FD | 	ret
0b584                 | 
0b584                 | _fatfs_cc_v_mkdir
0b584     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
0b588     F5 00 02 F6 | 	mov	arg01, result1
0b58c                 | ' 
0b58c                 | '     r = f_mkdir(name);
0b58c                 | '     return _set_dos_error(r);
0b58c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b590                 | _fatfs_cc_v_mkdir_ret
0b590     2D 00 64 FD | 	ret
0b594                 | 
0b594                 | _fatfs_cc_v_remove
0b594     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
0b598     F5 00 02 F6 | 	mov	arg01, result1
0b59c                 | ' 
0b59c                 | '     r = f_unlink(name);
0b59c                 | '     return _set_dos_error(r);
0b59c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b5a0                 | _fatfs_cc_v_remove_ret
0b5a0     2D 00 64 FD | 	ret
0b5a4                 | 
0b5a4                 | _fatfs_cc_v_rmdir
0b5a4     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
0b5a8     F5 00 02 F6 | 	mov	arg01, result1
0b5ac                 | ' 
0b5ac                 | '     r = f_unlink(name);
0b5ac                 | '     return _set_dos_error(r);
0b5ac     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b5b0                 | _fatfs_cc_v_rmdir_ret
0b5b0     2D 00 64 FD | 	ret
0b5b4                 | 
0b5b4                 | _fatfs_cc_v_rename
0b5b4     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
0b5b8     F5 00 02 F6 | 	mov	arg01, result1
0b5bc                 | '     return _set_dos_error(r);
0b5bc     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b5c0                 | _fatfs_cc_v_rename_ret
0b5c0     2D 00 64 FD | 	ret
0b5c4                 | 
0b5c4                 | _fatfs_cc_v_open
0b5c4     07 4A 05 F6 | 	mov	COUNT_, #7
0b5c8     A8 00 A0 FD | 	call	#pushregs_
0b5cc     00 0B 02 F6 | 	mov	local01, arg01
0b5d0     01 0D 02 F6 | 	mov	local02, arg02
0b5d4     02 0F 02 F6 | 	mov	local03, arg03
0b5d8     03 00 00 FF 
0b5dc     3C 00 06 F6 | 	mov	arg01, ##1596
0b5e0                 | '     return _gc_alloc(size);
0b5e0     10 02 06 F6 | 	mov	arg02, #16
0b5e4     BC 67 BF FD | 	call	#__system___gc_doalloc
0b5e8     F5 10 0A F6 | 	mov	local04, result1 wz
0b5ec                 | '       return _seterror( 7 );
0b5ec     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b5f0     F2 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
0b5f4     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b5f8     01 EA 65 A6 |  if_e	neg	result1, #1
0b5fc     98 00 90 AD |  if_e	jmp	#LR__1456
0b600     08 01 02 F6 | 	mov	arg01, local04
0b604     00 02 06 F6 | 	mov	arg02, #0
0b608     03 00 00 FF 
0b60c     3C 04 06 F6 | 	mov	arg03, ##1596
0b610     98 00 A0 FD | 	call	#\builtin_bytefill_
0b614                 | '   switch (flags & 3) {
0b614     07 13 02 F6 | 	mov	local05, local03
0b618     03 12 0E F5 | 	and	local05, #3 wz
0b61c     0C 00 90 AD |  if_e	jmp	#LR__1450
0b620     01 12 0E F2 | 	cmp	local05, #1 wz
0b624     0C 00 90 AD |  if_e	jmp	#LR__1451
0b628     10 00 90 FD | 	jmp	#LR__1452
0b62c                 | LR__1450
0b62c     01 14 06 F6 | 	mov	local06, #1
0b630                 | '       fs_flags =  0x01 ;
0b630                 | '       break;
0b630     0C 00 90 FD | 	jmp	#LR__1453
0b634                 | LR__1451
0b634     02 14 06 F6 | 	mov	local06, #2
0b638                 | '       fs_flags =  0x02 ;
0b638                 | '       break;
0b638     04 00 90 FD | 	jmp	#LR__1453
0b63c                 | LR__1452
0b63c     03 14 06 F6 | 	mov	local06, #3
0b640                 | '       fs_flags =  0x01  |  0x02 ;
0b640                 | '       break;
0b640                 | LR__1453
0b640     08 0E CE F7 | 	test	local03, #8 wz
0b644     18 14 46 55 |  if_ne	or	local06, #24
0b648     08 00 90 5D |  if_ne	jmp	#LR__1454
0b64c     20 0E CE F7 | 	test	local03, #32 wz
0b650     30 14 46 55 |  if_ne	or	local06, #48
0b654                 | LR__1454
0b654     02 00 00 FF 
0b658     14 10 06 F1 | 	add	local04, ##1044
0b65c     08 01 02 F6 | 	mov	arg01, local04
0b660     02 00 00 FF 
0b664     14 10 86 F1 | 	sub	local04, ##1044
0b668     06 03 02 F6 | 	mov	arg02, local02
0b66c     0A 05 02 F6 | 	mov	arg03, local06
0b670     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
0b674     F5 16 0A F6 | 	mov	local07, result1 wz
0b678     14 00 90 AD |  if_e	jmp	#LR__1455
0b67c     08 01 02 F6 | 	mov	arg01, local04
0b680                 | '     return _gc_free(ptr);
0b680     2C 68 BF FD | 	call	#__system___gc_free
0b684                 | '     free(f);
0b684                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b684                 | '     return _set_dos_error(r);
0b684     0B 01 02 F6 | 	mov	arg01, local07
0b688     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b68c     08 00 90 FD | 	jmp	#LR__1456
0b690                 | LR__1455
0b690     05 11 62 FC | 	wrlong	local04, local01
0b694                 | '   }
0b694                 | '   fil->vfsdata = f;
0b694                 | '   return 0;
0b694     00 EA 05 F6 | 	mov	result1, #0
0b698                 | LR__1456
0b698     A7 F0 03 F6 | 	mov	ptra, fp
0b69c     B2 00 A0 FD | 	call	#popregs_
0b6a0                 | _fatfs_cc_v_open_ret
0b6a0     2D 00 64 FD | 	ret
0b6a4                 | 
0b6a4                 | _fatfs_cc_v_flush
0b6a4     00 01 02 FB | 	rdlong	arg01, arg01
0b6a8     02 00 00 FF 
0b6ac     14 00 0E F1 | 	add	arg01, ##1044 wz
0b6b0                 | '         return _seterror( 5 );
0b6b0     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b6b4     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b6b8     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b6bc     01 EA 65 A6 |  if_e	neg	result1, #1
0b6c0     0C 00 90 AD |  if_e	jmp	#LR__1460
0b6c4     00 DA BF FD | 	call	#_fatfs_cc_f_sync
0b6c8     F5 00 02 F6 | 	mov	arg01, result1
0b6cc                 | '     }
0b6cc                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b6cc                 | '     result = f_sync(f);
0b6cc                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b6cc                 | '     return _set_dos_error(result);
0b6cc     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b6d0                 | LR__1460
0b6d0                 | _fatfs_cc_v_flush_ret
0b6d0     2D 00 64 FD | 	ret
0b6d4                 | 
0b6d4                 | _fatfs_cc_v_init
0b6d4                 | ' {
0b6d4                 | '     return 0;
0b6d4     00 EA 05 F6 | 	mov	result1, #0
0b6d8                 | _fatfs_cc_v_init_ret
0b6d8     2D 00 64 FD | 	ret
0b6dc                 | 
0b6dc                 | _fatfs_cc_v_deinit
0b6dc     62 00 00 FF 
0b6e0     D2 03 06 F6 | 	mov	arg02, ##@LR__1629
0b6e4     00 00 06 F6 | 	mov	arg01, #0
0b6e8     00 04 06 F6 | 	mov	arg03, #0
0b6ec     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
0b6f0     01 00 00 FF 
0b6f4     08 E2 05 F1 | 	add	objptr, ##520
0b6f8     F1 00 02 FB | 	rdlong	arg01, objptr
0b6fc     04 E2 05 F1 | 	add	objptr, #4
0b700     F1 02 02 FB | 	rdlong	arg02, objptr
0b704     01 00 00 FF 
0b708     0C E2 85 F1 | 	sub	objptr, ##524
0b70c     EC 63 BF FD | 	call	#__system___freepins
0b710                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b710                 | '     _freepins(f_pinmask);
0b710                 | '     return 0;
0b710     00 EA 05 F6 | 	mov	result1, #0
0b714                 | _fatfs_cc_v_deinit_ret
0b714     2D 00 64 FD | 	ret
0b718                 | 
0b718                 | _fatfs_cc_get_vfs
0b718     01 4A 05 F6 | 	mov	COUNT_, #1
0b71c     A8 00 A0 FD | 	call	#pushregs_
0b720     00 0B 02 F6 | 	mov	local01, arg01
0b724     50 00 06 F6 | 	mov	arg01, #80
0b728     48 66 BF FD | 	call	#__system___gc_alloc_managed
0b72c     F5 00 02 F6 | 	mov	arg01, result1
0b730     F1 EA 01 F6 | 	mov	result1, objptr
0b734     36 EA 25 F4 | 	bith	result1, #54
0b738     00 EB 61 FC | 	wrlong	result1, arg01
0b73c     F1 EA 01 F6 | 	mov	result1, objptr
0b740     00 68 00 FF 
0b744     00 EA 45 F5 | 	or	result1, ##13631488
0b748     04 00 06 F1 | 	add	arg01, #4
0b74c     00 EB 61 FC | 	wrlong	result1, arg01
0b750     F1 EA 01 F6 | 	mov	result1, objptr
0b754     55 EA 25 F4 | 	bith	result1, #85
0b758     04 00 06 F1 | 	add	arg01, #4
0b75c     00 EB 61 FC | 	wrlong	result1, arg01
0b760     F1 EA 01 F6 | 	mov	result1, objptr
0b764     74 EA 25 F4 | 	bith	result1, #116
0b768     04 00 06 F1 | 	add	arg01, #4
0b76c     00 EB 61 FC | 	wrlong	result1, arg01
0b770     F1 EA 01 F6 | 	mov	result1, objptr
0b774     18 EA 25 F4 | 	bith	result1, #24
0b778     04 00 06 F1 | 	add	arg01, #4
0b77c     00 EB 61 FC | 	wrlong	result1, arg01
0b780     04 00 06 F1 | 	add	arg01, #4
0b784     00 01 68 FC | 	wrlong	#0, arg01
0b788     04 00 06 F1 | 	add	arg01, #4
0b78c     00 0B 62 FC | 	wrlong	local01, arg01
0b790     04 00 06 F1 | 	add	arg01, #4
0b794     00 01 68 FC | 	wrlong	#0, arg01
0b798     F1 EA 01 F6 | 	mov	result1, objptr
0b79c     00 88 00 FF 
0b7a0     00 EA 45 F5 | 	or	result1, ##17825792
0b7a4     04 00 06 F1 | 	add	arg01, #4
0b7a8     00 EB 61 FC | 	wrlong	result1, arg01
0b7ac     F1 EA 01 F6 | 	mov	result1, objptr
0b7b0     00 90 00 FF 
0b7b4     00 EA 45 F5 | 	or	result1, ##18874368
0b7b8     04 00 06 F1 | 	add	arg01, #4
0b7bc     00 EB 61 FC | 	wrlong	result1, arg01
0b7c0     F1 EA 01 F6 | 	mov	result1, objptr
0b7c4     00 98 00 FF 
0b7c8     00 EA 45 F5 | 	or	result1, ##19922944
0b7cc     04 00 06 F1 | 	add	arg01, #4
0b7d0     00 EB 61 FC | 	wrlong	result1, arg01
0b7d4     F1 EA 01 F6 | 	mov	result1, objptr
0b7d8     00 A0 00 FF 
0b7dc     00 EA 45 F5 | 	or	result1, ##20971520
0b7e0     04 00 06 F1 | 	add	arg01, #4
0b7e4     00 EB 61 FC | 	wrlong	result1, arg01
0b7e8     F1 EA 01 F6 | 	mov	result1, objptr
0b7ec     00 A8 00 FF 
0b7f0     00 EA 45 F5 | 	or	result1, ##22020096
0b7f4     04 00 06 F1 | 	add	arg01, #4
0b7f8     00 EB 61 FC | 	wrlong	result1, arg01
0b7fc     F1 EA 01 F6 | 	mov	result1, objptr
0b800     00 B0 00 FF 
0b804     00 EA 45 F5 | 	or	result1, ##23068672
0b808     04 00 06 F1 | 	add	arg01, #4
0b80c     00 EB 61 FC | 	wrlong	result1, arg01
0b810     F1 EA 01 F6 | 	mov	result1, objptr
0b814     00 B8 00 FF 
0b818     00 EA 45 F5 | 	or	result1, ##24117248
0b81c     04 00 06 F1 | 	add	arg01, #4
0b820     00 EB 61 FC | 	wrlong	result1, arg01
0b824     F1 EA 01 F6 | 	mov	result1, objptr
0b828     37 EA 25 F4 | 	bith	result1, #55
0b82c     04 00 06 F1 | 	add	arg01, #4
0b830     00 EB 61 FC | 	wrlong	result1, arg01
0b834     F1 EA 01 F6 | 	mov	result1, objptr
0b838     00 C8 00 FF 
0b83c     00 EA 45 F5 | 	or	result1, ##26214400
0b840     04 00 06 F1 | 	add	arg01, #4
0b844     00 EB 61 FC | 	wrlong	result1, arg01
0b848     F1 EA 01 F6 | 	mov	result1, objptr
0b84c     00 D0 00 FF 
0b850     00 EA 45 F5 | 	or	result1, ##27262976
0b854     04 00 06 F1 | 	add	arg01, #4
0b858     00 EB 61 FC | 	wrlong	result1, arg01
0b85c     F1 EA 01 F6 | 	mov	result1, objptr
0b860     00 D8 00 FF 
0b864     00 EA 45 F5 | 	or	result1, ##28311552
0b868     04 00 06 F1 | 	add	arg01, #4
0b86c     00 EB 61 FC | 	wrlong	result1, arg01
0b870     F1 EA 01 F6 | 	mov	result1, objptr
0b874     56 EA 25 F4 | 	bith	result1, #86
0b878     04 00 06 F1 | 	add	arg01, #4
0b87c     00 EB 61 FC | 	wrlong	result1, arg01
0b880     4C 00 86 F1 | 	sub	arg01, #76
0b884                 | ' 
0b884                 | '     v->close = &v_close;
0b884                 | '     v->read = &v_read;
0b884                 | '     v->write = &v_write;
0b884                 | '     v->lseek = &v_lseek;
0b884                 | '     v->ioctl = &v_ioctl;
0b884                 | '     v->flush = 0;
0b884                 | '     v->vfs_data = ptr;
0b884                 | '     v->reserved = 0;
0b884                 | ' 
0b884                 | '     v->open = &v_open;
0b884                 | '     v->creat = &v_creat;
0b884                 | '     v->opendir = &v_opendir;
0b884                 | '     v->closedir = &v_closedir;
0b884                 | '     v->readdir = &v_readdir;
0b884                 | '     v->stat = &v_stat;
0b884                 | ' 
0b884                 | '     v->mkdir = &v_mkdir;
0b884                 | '     v->rmdir = &v_rmdir;
0b884                 | ' 
0b884                 | '     v->remove = &v_remove;
0b884                 | '     v->rename = &v_rename;
0b884                 | ' 
0b884                 | '     v->init = &v_init;
0b884                 | '     v->deinit = &v_deinit;
0b884                 | ' 
0b884                 | '     return v;
0b884     00 EB 01 F6 | 	mov	result1, arg01
0b888     A7 F0 03 F6 | 	mov	ptra, fp
0b88c     B2 00 A0 FD | 	call	#popregs_
0b890                 | _fatfs_cc_get_vfs_ret
0b890     2D 00 64 FD | 	ret
0b894                 | 
0b894                 | _fatfs_cc_xmit_mmc_0588
0b894     01 00 00 FF 
0b898     10 E2 05 F1 | 	add	objptr, ##528
0b89c     F1 EE 01 FB | 	rdlong	_var01, objptr
0b8a0     08 E2 05 F1 | 	add	objptr, #8
0b8a4     F1 F0 01 FB | 	rdlong	_var02, objptr
0b8a8     01 00 00 FF 
0b8ac     18 E2 85 F1 | 	sub	objptr, ##536
0b8b0     40 F0 61 FD | 	dirl	_var02
0b8b4     28 02 64 FD | 	setq	#1
0b8b8     00 F3 01 FB | 	rdlong	_var03, arg01
0b8bc     69 F2 61 FD | 	rev	_var03
0b8c0     1B F2 FD F9 | 	movbyts	_var03, #27
0b8c4     F8 F2 21 FC | 	wypin	_var03, _var02
0b8c8     01 F3 01 F6 | 	mov	_var03, arg02
0b8cc     02 02 4E F0 | 	shr	arg02, #2 wz
0b8d0     03 F2 65 F0 | 	shl	_var03, #3
0b8d4     F7 F2 21 FC | 	wypin	_var03, _var01
0b8d8     41 F0 61 FD | 	dirh	_var02
0b8dc     08 00 06 F1 | 	add	arg01, #8
0b8e0     69 F4 61 FD | 	rev	_var04
0b8e4     1B F4 FD F9 | 	movbyts	_var04, #27
0b8e8                 | LR__1470
0b8e8     F8 F4 21 5C |  if_ne	wypin	_var04, _var02
0b8ec     00 F5 01 5B |  if_ne	rdlong	_var04, arg01
0b8f0     04 00 06 51 |  if_ne	add	arg01, #4
0b8f4     69 F4 61 5D |  if_ne	rev	_var04
0b8f8     1B F4 FD 59 |  if_ne	movbyts	_var04, #27
0b8fc                 | LR__1471
0b8fc     40 F0 71 5D |  if_ne	testp	_var02 wc
0b900     F8 FF 9F 1D |  if_a	jmp	#LR__1471
0b904     F8 03 6E 5B |  if_ne	djnz	arg02, #LR__1470
0b908                 | LR__1472
0b908     40 EE 71 FD | 	testp	_var01 wc
0b90c     F8 FF 9F 3D |  if_ae	jmp	#LR__1472
0b910     40 F0 61 FD | 	dirl	_var02
0b914     FF FF FF FF 
0b918     F8 FE 2B FC | 	wypin	##-1, _var02
0b91c     41 F0 61 FD | 	dirh	_var02
0b920                 | _fatfs_cc_xmit_mmc_0588_ret
0b920     2D 00 64 FD | 	ret
0b924                 | 
0b924                 | _fatfs_cc_rcvr_mmc_0595
0b924     01 00 00 FF 
0b928     10 E2 05 F1 | 	add	objptr, ##528
0b92c     F1 EE 01 FB | 	rdlong	_var01, objptr
0b930     0C E2 05 F1 | 	add	objptr, #12
0b934     F1 F0 01 FB | 	rdlong	_var02, objptr
0b938     01 00 00 FF 
0b93c     1C E2 85 F1 | 	sub	objptr, ##540
0b940     F8 02 08 FC | 	akpin	_var02
0b944     01 F3 09 F6 | 	mov	_var03, arg02 wz
0b948     02 F2 4D F0 | 	shr	_var03, #2 wz
0b94c     30 00 90 AD |  if_e	jmp	#LR__1482
0b950     F9 F4 01 F6 | 	mov	_var04, _var03
0b954     05 F4 65 F0 | 	shl	_var04, #5
0b958     F7 F4 21 FC | 	wypin	_var04, _var01
0b95c     F8 7E 18 FC | 	wxpin	#63, _var02
0b960                 | LR__1480
0b960                 | LR__1481
0b960     40 F0 71 FD | 	testp	_var02 wc
0b964     F8 FF 9F 3D |  if_ae	jmp	#LR__1481
0b968     F8 F4 89 FA | 	rdpin	_var04, _var02
0b96c     69 F4 61 FD | 	rev	_var04
0b970     1B F4 FD F9 | 	movbyts	_var04, #27
0b974     00 F5 61 FC | 	wrlong	_var04, arg01
0b978     04 00 06 F1 | 	add	arg01, #4
0b97c     F8 F3 6D FB | 	djnz	_var03, #LR__1480
0b980                 | LR__1482
0b980     03 02 0E F5 | 	and	arg02, #3 wz
0b984     24 00 90 AD |  if_e	jmp	#LR__1485
0b988     F8 4E 18 FC | 	wxpin	#39, _var02
0b98c                 | LR__1483
0b98c     F7 10 28 FC | 	wypin	#8, _var01
0b990                 | LR__1484
0b990     40 F0 71 FD | 	testp	_var02 wc
0b994     F8 FF 9F 3D |  if_ae	jmp	#LR__1484
0b998     F8 F4 89 FA | 	rdpin	_var04, _var02
0b99c     69 F4 61 FD | 	rev	_var04
0b9a0     00 F5 41 FC | 	wrbyte	_var04, arg01
0b9a4     01 00 06 F1 | 	add	arg01, #1
0b9a8     F8 03 6E FB | 	djnz	arg02, #LR__1483
0b9ac                 | LR__1485
0b9ac                 | _fatfs_cc_rcvr_mmc_0595_ret
0b9ac     2D 00 64 FD | 	ret
0b9b0                 | 
0b9b0                 | _fatfs_cc_wait_ready_0599
0b9b0     01 4A 05 F6 | 	mov	COUNT_, #1
0b9b4     A8 00 A0 FD | 	call	#pushregs_
0b9b8     10 F0 07 F1 | 	add	ptra, #16
0b9bc     1A EA 61 FD | 	getct	result1
0b9c0     08 4E 05 F1 | 	add	fp, #8
0b9c4     A7 EA 61 FC | 	wrlong	result1, fp
0b9c8     14 0A 06 FB | 	rdlong	local01, #20
0b9cc     01 0A 46 F0 | 	shr	local01, #1
0b9d0     04 4E 05 F1 | 	add	fp, #4
0b9d4     A7 0A 62 FC | 	wrlong	local01, fp
0b9d8     0C 4E 85 F1 | 	sub	fp, #12
0b9dc                 | ' {
0b9dc                 | ' 	BYTE d;
0b9dc                 | ' 	UINT tmr, tmout;
0b9dc                 | ' 
0b9dc                 | ' 	tmr = _cnt();
0b9dc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
0b9dc                 | ' 	for(;;) {
0b9dc                 | LR__1490
0b9dc     04 4E 05 F1 | 	add	fp, #4
0b9e0     A7 00 02 F6 | 	mov	arg01, fp
0b9e4     04 4E 85 F1 | 	sub	fp, #4
0b9e8     01 02 06 F6 | 	mov	arg02, #1
0b9ec     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0b9f0     04 4E 05 F1 | 	add	fp, #4
0b9f4     A7 0A C2 FA | 	rdbyte	local01, fp
0b9f8     04 4E 85 F1 | 	sub	fp, #4
0b9fc     FF 0A 0E F2 | 	cmp	local01, #255 wz
0ba00     01 EA 05 A6 |  if_e	mov	result1, #1
0ba04     28 00 90 AD |  if_e	jmp	#LR__1491
0ba08     1A EA 61 FD | 	getct	result1
0ba0c     08 4E 05 F1 | 	add	fp, #8
0ba10     A7 0A 02 FB | 	rdlong	local01, fp
0ba14     05 EB 81 F1 | 	sub	result1, local01
0ba18     04 4E 05 F1 | 	add	fp, #4
0ba1c     A7 0A 02 FB | 	rdlong	local01, fp
0ba20     0C 4E 85 F1 | 	sub	fp, #12
0ba24     05 EB 11 F2 | 	cmp	result1, local01 wc
0ba28     00 EA 05 36 |  if_ae	mov	result1, #0
0ba2c     AC FF 9F CD |  if_b	jmp	#LR__1490
0ba30                 | LR__1491
0ba30     A7 F0 03 F6 | 	mov	ptra, fp
0ba34     B2 00 A0 FD | 	call	#popregs_
0ba38                 | _fatfs_cc_wait_ready_0599_ret
0ba38     2D 00 64 FD | 	ret
0ba3c                 | 
0ba3c                 | _fatfs_cc_deselect_0605
0ba3c     00 4A 05 F6 | 	mov	COUNT_, #0
0ba40     A8 00 A0 FD | 	call	#pushregs_
0ba44     14 F0 07 F1 | 	add	ptra, #20
0ba48     01 00 00 FF 
0ba4c     14 E2 05 F1 | 	add	objptr, ##532
0ba50     F1 02 02 FB | 	rdlong	arg02, objptr
0ba54     04 4E 05 F1 | 	add	fp, #4
0ba58     A7 02 62 FC | 	wrlong	arg02, fp
0ba5c     04 E2 85 F1 | 	sub	objptr, #4
0ba60     F1 02 02 FB | 	rdlong	arg02, objptr
0ba64     04 4E 05 F1 | 	add	fp, #4
0ba68     A7 02 62 FC | 	wrlong	arg02, fp
0ba6c     08 E2 05 F1 | 	add	objptr, #8
0ba70     F1 02 02 FB | 	rdlong	arg02, objptr
0ba74     04 4E 05 F1 | 	add	fp, #4
0ba78     A7 02 62 FC | 	wrlong	arg02, fp
0ba7c     04 E2 05 F1 | 	add	objptr, #4
0ba80     F1 02 02 FB | 	rdlong	arg02, objptr
0ba84     01 00 00 FF 
0ba88     1C E2 85 F1 | 	sub	objptr, ##540
0ba8c     04 4E 05 F1 | 	add	fp, #4
0ba90     A7 02 62 FC | 	wrlong	arg02, fp
0ba94     0C 4E 85 F1 | 	sub	fp, #12
0ba98     A7 00 02 FB | 	rdlong	arg01, fp
0ba9c     04 4E 85 F1 | 	sub	fp, #4
0baa0     59 00 62 FD | 	drvh	arg01
0baa4     1F 20 64 FD | 	waitx	#16
0baa8     A7 00 02 F6 | 	mov	arg01, fp
0baac     01 02 06 F6 | 	mov	arg02, #1
0bab0     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bab4     A7 F0 03 F6 | 	mov	ptra, fp
0bab8     B2 00 A0 FD | 	call	#popregs_
0babc                 | _fatfs_cc_deselect_0605_ret
0babc     2D 00 64 FD | 	ret
0bac0                 | 
0bac0                 | _fatfs_cc_select_0609
0bac0     00 4A 05 F6 | 	mov	COUNT_, #0
0bac4     A8 00 A0 FD | 	call	#pushregs_
0bac8     10 F0 07 F1 | 	add	ptra, #16
0bacc     01 00 00 FF 
0bad0     14 E2 05 F1 | 	add	objptr, ##532
0bad4     F1 02 02 FB | 	rdlong	arg02, objptr
0bad8     08 4E 05 F1 | 	add	fp, #8
0badc     A7 02 62 FC | 	wrlong	arg02, fp
0bae0     08 E2 05 F1 | 	add	objptr, #8
0bae4     F1 00 02 FB | 	rdlong	arg01, objptr
0bae8     01 00 00 FF 
0baec     1C E2 85 F1 | 	sub	objptr, ##540
0baf0     04 4E 05 F1 | 	add	fp, #4
0baf4     A7 00 62 FC | 	wrlong	arg01, fp
0baf8     50 00 62 FD | 	fltl	arg01
0bafc     04 4E 85 F1 | 	sub	fp, #4
0bb00     A7 00 02 FB | 	rdlong	arg01, fp
0bb04     58 00 62 FD | 	drvl	arg01
0bb08     1F 20 64 FD | 	waitx	#16
0bb0c     04 4E 05 F1 | 	add	fp, #4
0bb10     A7 00 02 FB | 	rdlong	arg01, fp
0bb14     41 00 62 FD | 	dirh	arg01
0bb18     08 4E 85 F1 | 	sub	fp, #8
0bb1c     A7 00 02 F6 | 	mov	arg01, fp
0bb20     04 4E 85 F1 | 	sub	fp, #4
0bb24     01 02 06 F6 | 	mov	arg02, #1
0bb28     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bb2c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0599
0bb30     00 EA 0D F2 | 	cmp	result1, #0 wz
0bb34     01 EA 05 56 |  if_ne	mov	result1, #1
0bb38     08 00 90 5D |  if_ne	jmp	#LR__1500
0bb3c     FC FE BF FD | 	call	#_fatfs_cc_deselect_0605
0bb40                 | ' 
0bb40                 | ' 	deselect();
0bb40                 | ' 	return 0;
0bb40     00 EA 05 F6 | 	mov	result1, #0
0bb44                 | LR__1500
0bb44     A7 F0 03 F6 | 	mov	ptra, fp
0bb48     B2 00 A0 FD | 	call	#popregs_
0bb4c                 | _fatfs_cc_select_0609_ret
0bb4c     2D 00 64 FD | 	ret
0bb50                 | 
0bb50                 | _fatfs_cc_rcvr_datablock_0613
0bb50     01 4A 05 F6 | 	mov	COUNT_, #1
0bb54     A8 00 A0 FD | 	call	#pushregs_
0bb58     18 F0 07 F1 | 	add	ptra, #24
0bb5c     04 4E 05 F1 | 	add	fp, #4
0bb60     A7 00 62 FC | 	wrlong	arg01, fp
0bb64     04 4E 05 F1 | 	add	fp, #4
0bb68     A7 02 62 FC | 	wrlong	arg02, fp
0bb6c     1A EA 61 FD | 	getct	result1
0bb70     08 4E 05 F1 | 	add	fp, #8
0bb74     A7 EA 61 FC | 	wrlong	result1, fp
0bb78     14 0A 06 FB | 	rdlong	local01, #20
0bb7c     03 0A 46 F0 | 	shr	local01, #3
0bb80     04 4E 05 F1 | 	add	fp, #4
0bb84     A7 0A 62 FC | 	wrlong	local01, fp
0bb88     14 4E 85 F1 | 	sub	fp, #20
0bb8c                 | ' 	BYTE *buff,
0bb8c                 | ' 	UINT btr
0bb8c                 | ' )
0bb8c                 | ' {
0bb8c                 | ' 	BYTE d[2];
0bb8c                 | ' 	UINT tmr, tmout;
0bb8c                 | ' 
0bb8c                 | ' 	tmr = _cnt();
0bb8c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
0bb8c                 | ' 	for(;;) {
0bb8c                 | LR__1510
0bb8c     0C 4E 05 F1 | 	add	fp, #12
0bb90     A7 00 02 F6 | 	mov	arg01, fp
0bb94     0C 4E 85 F1 | 	sub	fp, #12
0bb98     01 02 06 F6 | 	mov	arg02, #1
0bb9c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bba0     0C 4E 05 F1 | 	add	fp, #12
0bba4     A7 0A C2 FA | 	rdbyte	local01, fp
0bba8     0C 4E 85 F1 | 	sub	fp, #12
0bbac     FF 0A 0E F2 | 	cmp	local01, #255 wz
0bbb0     28 00 90 5D |  if_ne	jmp	#LR__1511
0bbb4     1A EA 61 FD | 	getct	result1
0bbb8     F5 0A 02 F6 | 	mov	local01, result1
0bbbc     10 4E 05 F1 | 	add	fp, #16
0bbc0     A7 02 02 FB | 	rdlong	arg02, fp
0bbc4     01 0B 82 F1 | 	sub	local01, arg02
0bbc8     04 4E 05 F1 | 	add	fp, #4
0bbcc     A7 02 02 FB | 	rdlong	arg02, fp
0bbd0     14 4E 85 F1 | 	sub	fp, #20
0bbd4     01 0B 12 F2 | 	cmp	local01, arg02 wc
0bbd8     B0 FF 9F CD |  if_b	jmp	#LR__1510
0bbdc                 | LR__1511
0bbdc     0C 4E 05 F1 | 	add	fp, #12
0bbe0     A7 0A C2 FA | 	rdbyte	local01, fp
0bbe4     0C 4E 85 F1 | 	sub	fp, #12
0bbe8     FE 0A 0E F2 | 	cmp	local01, #254 wz
0bbec     00 EA 05 56 |  if_ne	mov	result1, #0
0bbf0     30 00 90 5D |  if_ne	jmp	#LR__1512
0bbf4     04 4E 05 F1 | 	add	fp, #4
0bbf8     A7 00 02 FB | 	rdlong	arg01, fp
0bbfc     04 4E 05 F1 | 	add	fp, #4
0bc00     A7 02 02 FB | 	rdlong	arg02, fp
0bc04     08 4E 85 F1 | 	sub	fp, #8
0bc08     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bc0c     0C 4E 05 F1 | 	add	fp, #12
0bc10     A7 00 02 F6 | 	mov	arg01, fp
0bc14     0C 4E 85 F1 | 	sub	fp, #12
0bc18     02 02 06 F6 | 	mov	arg02, #2
0bc1c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bc20                 | ' 
0bc20                 | ' 	rcvr_mmc(buff, btr);
0bc20                 | ' 	rcvr_mmc(d, 2);
0bc20                 | ' 
0bc20                 | ' 	return 1;
0bc20     01 EA 05 F6 | 	mov	result1, #1
0bc24                 | LR__1512
0bc24     A7 F0 03 F6 | 	mov	ptra, fp
0bc28     B2 00 A0 FD | 	call	#popregs_
0bc2c                 | _fatfs_cc_rcvr_datablock_0613_ret
0bc2c     2D 00 64 FD | 	ret
0bc30                 | 
0bc30                 | _fatfs_cc_xmit_datablock_0615
0bc30     00 4A 05 F6 | 	mov	COUNT_, #0
0bc34     A8 00 A0 FD | 	call	#pushregs_
0bc38     10 F0 07 F1 | 	add	ptra, #16
0bc3c     04 4E 05 F1 | 	add	fp, #4
0bc40     A7 00 62 FC | 	wrlong	arg01, fp
0bc44     04 4E 05 F1 | 	add	fp, #4
0bc48     A7 02 42 FC | 	wrbyte	arg02, fp
0bc4c     08 4E 85 F1 | 	sub	fp, #8
0bc50     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0599
0bc54     00 EA 0D F2 | 	cmp	result1, #0 wz
0bc58     00 EA 05 A6 |  if_e	mov	result1, #0
0bc5c     90 00 90 AD |  if_e	jmp	#LR__1521
0bc60     08 4E 05 F1 | 	add	fp, #8
0bc64     A7 02 C2 FA | 	rdbyte	arg02, fp
0bc68     04 4E 05 F1 | 	add	fp, #4
0bc6c     A7 02 42 FC | 	wrbyte	arg02, fp
0bc70     A7 00 02 F6 | 	mov	arg01, fp
0bc74     0C 4E 85 F1 | 	sub	fp, #12
0bc78     01 02 06 F6 | 	mov	arg02, #1
0bc7c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0588
0bc80     08 4E 05 F1 | 	add	fp, #8
0bc84     A7 02 C2 FA | 	rdbyte	arg02, fp
0bc88     08 4E 85 F1 | 	sub	fp, #8
0bc8c     FD 02 0E F2 | 	cmp	arg02, #253 wz
0bc90     58 00 90 AD |  if_e	jmp	#LR__1520
0bc94     04 4E 05 F1 | 	add	fp, #4
0bc98     A7 00 02 FB | 	rdlong	arg01, fp
0bc9c     04 4E 85 F1 | 	sub	fp, #4
0bca0     09 02 C6 F9 | 	decod	arg02, #9
0bca4     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0588
0bca8     0C 4E 05 F1 | 	add	fp, #12
0bcac     A7 00 02 F6 | 	mov	arg01, fp
0bcb0     0C 4E 85 F1 | 	sub	fp, #12
0bcb4     02 02 06 F6 | 	mov	arg02, #2
0bcb8     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bcbc     0C 4E 05 F1 | 	add	fp, #12
0bcc0     A7 00 02 F6 | 	mov	arg01, fp
0bcc4     0C 4E 85 F1 | 	sub	fp, #12
0bcc8     01 02 06 F6 | 	mov	arg02, #1
0bccc     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bcd0     0C 4E 05 F1 | 	add	fp, #12
0bcd4     A7 02 C2 FA | 	rdbyte	arg02, fp
0bcd8     0C 4E 85 F1 | 	sub	fp, #12
0bcdc     1F 02 06 F5 | 	and	arg02, #31
0bce0     05 02 0E F2 | 	cmp	arg02, #5 wz
0bce4                 | ' 			return 0;
0bce4     00 EA 05 56 |  if_ne	mov	result1, #0
0bce8     04 00 90 5D |  if_ne	jmp	#LR__1521
0bcec                 | LR__1520
0bcec                 | ' 	}
0bcec                 | ' 
0bcec                 | ' 	return 1;
0bcec     01 EA 05 F6 | 	mov	result1, #1
0bcf0                 | LR__1521
0bcf0     A7 F0 03 F6 | 	mov	ptra, fp
0bcf4     B2 00 A0 FD | 	call	#popregs_
0bcf8                 | _fatfs_cc_xmit_datablock_0615_ret
0bcf8     2D 00 64 FD | 	ret
0bcfc                 | 
0bcfc                 | _fatfs_cc_send_cmd_0619
0bcfc     01 4A 05 F6 | 	mov	COUNT_, #1
0bd00     A8 00 A0 FD | 	call	#pushregs_
0bd04     1C F0 07 F1 | 	add	ptra, #28
0bd08                 | _fatfs_cc_send_cmd_0619_enter
0bd08     04 4E 05 F1 | 	add	fp, #4
0bd0c     A7 00 42 FC | 	wrbyte	arg01, fp
0bd10     04 4E 05 F1 | 	add	fp, #4
0bd14     A7 02 62 FC | 	wrlong	arg02, fp
0bd18     04 4E 85 F1 | 	sub	fp, #4
0bd1c     A7 EA C1 FA | 	rdbyte	result1, fp
0bd20     04 4E 85 F1 | 	sub	fp, #4
0bd24     80 EA CD F7 | 	test	result1, #128 wz
0bd28     44 00 90 AD |  if_e	jmp	#LR__1530
0bd2c     04 4E 05 F1 | 	add	fp, #4
0bd30     A7 02 C2 FA | 	rdbyte	arg02, fp
0bd34     7F 02 06 F5 | 	and	arg02, #127
0bd38     A7 02 42 FC | 	wrbyte	arg02, fp
0bd3c     04 4E 85 F1 | 	sub	fp, #4
0bd40     37 00 06 F6 | 	mov	arg01, #55
0bd44     00 02 06 F6 | 	mov	arg02, #0
0bd48     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0619
0bd4c     0C 4E 05 F1 | 	add	fp, #12
0bd50     A7 EA 41 FC | 	wrbyte	result1, fp
0bd54     A7 02 C2 FA | 	rdbyte	arg02, fp
0bd58     0C 4E 85 F1 | 	sub	fp, #12
0bd5c     02 02 16 F2 | 	cmp	arg02, #2 wc
0bd60     0C 4E 05 31 |  if_ae	add	fp, #12
0bd64     A7 EA C1 3A |  if_ae	rdbyte	result1, fp
0bd68     0C 4E 85 31 |  if_ae	sub	fp, #12
0bd6c     6C 01 90 3D |  if_ae	jmp	#LR__1534
0bd70                 | LR__1530
0bd70     04 4E 05 F1 | 	add	fp, #4
0bd74     A7 02 C2 FA | 	rdbyte	arg02, fp
0bd78     04 4E 85 F1 | 	sub	fp, #4
0bd7c     0C 02 0E F2 | 	cmp	arg02, #12 wz
0bd80     14 00 90 AD |  if_e	jmp	#LR__1531
0bd84     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0605
0bd88     34 FD BF FD | 	call	#_fatfs_cc_select_0609
0bd8c     00 EA 0D F2 | 	cmp	result1, #0 wz
0bd90     FF EA 05 A6 |  if_e	mov	result1, #255
0bd94     44 01 90 AD |  if_e	jmp	#LR__1534
0bd98                 | LR__1531
0bd98     04 4E 05 F1 | 	add	fp, #4
0bd9c     A7 02 C2 FA | 	rdbyte	arg02, fp
0bda0     40 EA 05 F6 | 	mov	result1, #64
0bda4     01 EB 41 F5 | 	or	result1, arg02
0bda8     10 4E 05 F1 | 	add	fp, #16
0bdac     A7 EA 41 FC | 	wrbyte	result1, fp
0bdb0     0C 4E 85 F1 | 	sub	fp, #12
0bdb4     A7 EA 01 FB | 	rdlong	result1, fp
0bdb8     18 EA 45 F0 | 	shr	result1, #24
0bdbc     0D 4E 05 F1 | 	add	fp, #13
0bdc0     A7 EA 41 FC | 	wrbyte	result1, fp
0bdc4     0D 4E 85 F1 | 	sub	fp, #13
0bdc8     A7 EA 01 FB | 	rdlong	result1, fp
0bdcc     10 EA 45 F0 | 	shr	result1, #16
0bdd0     0E 4E 05 F1 | 	add	fp, #14
0bdd4     A7 EA 41 FC | 	wrbyte	result1, fp
0bdd8     0E 4E 85 F1 | 	sub	fp, #14
0bddc     A7 EA 01 FB | 	rdlong	result1, fp
0bde0     08 EA 45 F0 | 	shr	result1, #8
0bde4     0F 4E 05 F1 | 	add	fp, #15
0bde8     A7 EA 41 FC | 	wrbyte	result1, fp
0bdec     0F 4E 85 F1 | 	sub	fp, #15
0bdf0     A7 EA 01 FB | 	rdlong	result1, fp
0bdf4     10 4E 05 F1 | 	add	fp, #16
0bdf8     A7 EA 41 FC | 	wrbyte	result1, fp
0bdfc     0C 4E 85 F1 | 	sub	fp, #12
0be00     A7 02 48 FC | 	wrbyte	#1, fp
0be04     08 4E 85 F1 | 	sub	fp, #8
0be08     A7 EA C9 FA | 	rdbyte	result1, fp wz
0be0c     04 4E 85 F1 | 	sub	fp, #4
0be10     0C 4E 05 A1 |  if_e	add	fp, #12
0be14     A7 2A 49 AC |  if_e	wrbyte	#149, fp
0be18     0C 4E 85 A1 |  if_e	sub	fp, #12
0be1c     04 4E 05 F1 | 	add	fp, #4
0be20     A7 EA C1 FA | 	rdbyte	result1, fp
0be24     04 4E 85 F1 | 	sub	fp, #4
0be28     08 EA 0D F2 | 	cmp	result1, #8 wz
0be2c     0C 4E 05 A1 |  if_e	add	fp, #12
0be30     A7 0E 49 AC |  if_e	wrbyte	#135, fp
0be34     0C 4E 85 A1 |  if_e	sub	fp, #12
0be38     0C 4E 05 F1 | 	add	fp, #12
0be3c     A7 02 C2 FA | 	rdbyte	arg02, fp
0be40     0D 4E 05 F1 | 	add	fp, #13
0be44     A7 02 42 FC | 	wrbyte	arg02, fp
0be48     05 4E 85 F1 | 	sub	fp, #5
0be4c     A7 00 02 F6 | 	mov	arg01, fp
0be50     14 4E 85 F1 | 	sub	fp, #20
0be54     06 02 06 F6 | 	mov	arg02, #6
0be58     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0588
0be5c     04 4E 05 F1 | 	add	fp, #4
0be60     A7 0A C2 FA | 	rdbyte	local01, fp
0be64     04 4E 85 F1 | 	sub	fp, #4
0be68     0C 0A 0E F2 | 	cmp	local01, #12 wz
0be6c     10 4E 05 A1 |  if_e	add	fp, #16
0be70     A7 00 02 A6 |  if_e	mov	arg01, fp
0be74     10 4E 85 A1 |  if_e	sub	fp, #16
0be78     01 02 06 A6 |  if_e	mov	arg02, #1
0be7c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0595
0be80     0C 4E 05 F1 | 	add	fp, #12
0be84     A7 14 48 FC | 	wrbyte	#10, fp
0be88     0C 4E 85 F1 | 	sub	fp, #12
0be8c                 | ' 	n = 10;
0be8c                 | ' 	do
0be8c                 | LR__1532
0be8c     10 4E 05 F1 | 	add	fp, #16
0be90     A7 00 02 F6 | 	mov	arg01, fp
0be94     10 4E 85 F1 | 	sub	fp, #16
0be98     01 02 06 F6 | 	mov	arg02, #1
0be9c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bea0     10 4E 05 F1 | 	add	fp, #16
0bea4     A7 0A C2 FA | 	rdbyte	local01, fp
0bea8     10 4E 85 F1 | 	sub	fp, #16
0beac     80 0A CE F7 | 	test	local01, #128 wz
0beb0     1C 00 90 AD |  if_e	jmp	#LR__1533
0beb4     0C 4E 05 F1 | 	add	fp, #12
0beb8     A7 0A C2 FA | 	rdbyte	local01, fp
0bebc     01 0A 86 F1 | 	sub	local01, #1
0bec0     A7 0A 42 FC | 	wrbyte	local01, fp
0bec4     A7 0A CA FA | 	rdbyte	local01, fp wz
0bec8     0C 4E 85 F1 | 	sub	fp, #12
0becc     BC FF 9F 5D |  if_ne	jmp	#LR__1532
0bed0                 | LR__1533
0bed0                 | ' 
0bed0                 | ' 	return d;
0bed0     10 4E 05 F1 | 	add	fp, #16
0bed4     A7 EA C1 FA | 	rdbyte	result1, fp
0bed8     10 4E 85 F1 | 	sub	fp, #16
0bedc                 | LR__1534
0bedc     A7 F0 03 F6 | 	mov	ptra, fp
0bee0     B2 00 A0 FD | 	call	#popregs_
0bee4                 | _fatfs_cc_send_cmd_0619_ret
0bee4     2D 00 64 FD | 	ret
0bee8                 | 
0bee8                 | _fatfs_cc_disk_deinitialize
0bee8     03 4A 05 F6 | 	mov	COUNT_, #3
0beec     A8 00 A0 FD | 	call	#pushregs_
0bef0     00 00 4E F2 | 	cmps	arg01, #0 wz
0bef4     01 00 00 FF 
0bef8     14 E2 05 F1 | 	add	objptr, ##532
0befc     F1 00 02 FB | 	rdlong	arg01, objptr
0bf00     04 E2 85 F1 | 	sub	objptr, #4
0bf04     F1 0A 02 FB | 	rdlong	local01, objptr
0bf08     08 E2 05 F1 | 	add	objptr, #8
0bf0c     F1 0C 02 FB | 	rdlong	local02, objptr
0bf10     04 E2 05 F1 | 	add	objptr, #4
0bf14     F1 0E 02 FB | 	rdlong	local03, objptr
0bf18     01 00 00 FF 
0bf1c     1C E2 85 F1 | 	sub	objptr, ##540
0bf20                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
0bf20                 | '         return RES_NOTRDY;
0bf20     03 EA 05 56 |  if_ne	mov	result1, #3
0bf24     2C 00 90 5D |  if_ne	jmp	#LR__1540
0bf28     50 00 62 FD | 	fltl	arg01
0bf2c     00 01 08 FC | 	wrpin	#0, arg01
0bf30     50 0A 62 FD | 	fltl	local01
0bf34     05 01 08 FC | 	wrpin	#0, local01
0bf38     50 0C 62 FD | 	fltl	local02
0bf3c     06 01 08 FC | 	wrpin	#0, local02
0bf40     50 0E 62 FD | 	fltl	local03
0bf44     07 01 08 FC | 	wrpin	#0, local03
0bf48     0A 00 06 F6 | 	mov	arg01, #10
0bf4c     50 4F BF FD | 	call	#__system___waitms
0bf50                 | '     }
0bf50                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
0bf50                 | '     _pinclear(PIN_SS);
0bf50                 | '     _pinclear(PIN_CLK);
0bf50                 | '     _pinclear(PIN_DI);
0bf50                 | '     _pinclear(PIN_DO);
0bf50                 | ' 
0bf50                 | '     _waitms(10);
0bf50                 | ' 
0bf50                 | '     return 0;
0bf50     00 EA 05 F6 | 	mov	result1, #0
0bf54                 | LR__1540
0bf54     A7 F0 03 F6 | 	mov	ptra, fp
0bf58     B2 00 A0 FD | 	call	#popregs_
0bf5c                 | _fatfs_cc_disk_deinitialize_ret
0bf5c     2D 00 64 FD | 	ret
0bf60                 | 
0bf60                 | _fatfs_cc_gettimeofday
0bf60     04 4A 05 F6 | 	mov	COUNT_, #4
0bf64     A8 00 A0 FD | 	call	#pushregs_
0bf68     00 0B 02 F6 | 	mov	local01, arg01
0bf6c     1C 4D BF FD | 	call	#__system___getus
0bf70     F5 00 02 F6 | 	mov	arg01, result1
0bf74     02 00 00 FF 
0bf78     58 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
0bf7c     F3 0C 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
0bf80     00 EB 01 F6 | 	mov	result1, arg01
0bf84     06 EB 81 F1 | 	sub	result1, local02
0bf88     A1 07 00 FF 
0bf8c     40 EA 15 FD | 	qdiv	result1, ##1000000
0bf90     02 00 00 FF 
0bf94     58 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
0bf98     18 0C 62 FD | 	getqx	local02
0bf9c     A1 07 00 FF 
0bfa0     40 EA 15 FD | 	qdiv	result1, ##1000000
0bfa4     00 0C 0E F2 | 	cmp	local02, #0 wz
0bfa8     19 0E 62 FD | 	getqy	local03
0bfac     28 00 90 AD |  if_e	jmp	#LR__1550
0bfb0     02 00 00 FF 
0bfb4     54 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
0bfb8     F3 10 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
0bfbc     06 11 02 F1 | 	add	local04, local02
0bfc0     F3 10 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
0bfc4     07 01 82 F1 | 	sub	arg01, local03
0bfc8     04 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
0bfcc     F3 00 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
0bfd0     02 00 00 FF 
0bfd4     58 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
0bfd8                 | LR__1550
0bfd8     02 00 00 FF 
0bfdc     54 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
0bfe0     F3 10 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
0bfe4     02 00 00 FF 
0bfe8     54 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
0bfec     05 11 62 FC | 	wrlong	local04, local01
0bff0     04 0A 06 F1 | 	add	local01, #4
0bff4     05 0F 62 FC | 	wrlong	local03, local01
0bff8                 | '         lastsec += secs;
0bff8                 | '         lastus = now - leftover;
0bff8                 | '     }
0bff8                 | '     tv->tv_sec = lastsec;
0bff8                 | '     tv->tv_usec = leftover;
0bff8                 | '     return 0;
0bff8     00 EA 05 F6 | 	mov	result1, #0
0bffc     A7 F0 03 F6 | 	mov	ptra, fp
0c000     B2 00 A0 FD | 	call	#popregs_
0c004                 | _fatfs_cc_gettimeofday_ret
0c004     2D 00 64 FD | 	ret
0c008                 | 
0c008                 | _fatfs_cc__is_leap_year
0c008     00 EB 51 F6 | 	abs	result1, arg01 wc
0c00c     03 EA 05 F5 | 	and	result1, #3
0c010     F5 EA 89 F6 | 	negc	result1, result1 wz
0c014     38 00 90 5D |  if_ne	jmp	#LR__1561
0c018     00 EB 51 F6 | 	abs	result1, arg01 wc
0c01c     64 EA 15 FD | 	qdiv	result1, #100
0c020     19 EA 61 FD | 	getqy	result1
0c024     F5 EA 89 F6 | 	negc	result1, result1 wz
0c028     1C 00 90 5D |  if_ne	jmp	#LR__1560
0c02c     00 EB 51 F6 | 	abs	result1, arg01 wc
0c030     90 EB 15 FD | 	qdiv	result1, #400
0c034                 | '       return (0 == y % 400);
0c034     00 EA 05 F6 | 	mov	result1, #0
0c038     19 EE 61 FD | 	getqy	_var01
0c03c     F7 EE 89 F6 | 	negc	_var01, _var01 wz
0c040     01 EA 05 A6 |  if_e	mov	result1, #1
0c044     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
0c048                 | LR__1560
0c048                 | '     return 1;
0c048     01 EA 05 F6 | 	mov	result1, #1
0c04c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
0c050                 | LR__1561
0c050                 | '   }
0c050                 | '   return 0;
0c050     00 EA 05 F6 | 	mov	result1, #0
0c054                 | _fatfs_cc__is_leap_year_ret
0c054     2D 00 64 FD | 	ret
0c058                 | 
0c058                 | _fatfs_cc___tzoffset
0c058     00 EF 09 F6 | 	mov	_var01, arg01 wz
0c05c     FF FF FF FF 
0c060     01 FF 6B FC | 	wrlong	##-1, arg02
0c064     01 F0 05 F6 | 	mov	_var02, #1
0c068     F7 F2 C9 5A |  if_ne	rdbyte	_var03, _var01 wz
0c06c                 | '                 return 0;
0c06c     00 EA 05 A6 |  if_e	mov	result1, #0
0c070     94 02 90 AD |  if_e	jmp	#LR__1587
0c074     01 01 68 FC | 	wrlong	#0, arg02
0c078     02 00 00 FF 
0c07c     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c080     F3 F4 01 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
0c084                 | ' 
0c084                 | '        *hasdst = 0;
0c084                 | ' 
0c084                 | ' 	n = stdname;
0c084                 | '         while (*s && isalpha(*s)) {
0c084     02 00 00 FF 
0c088     2C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
0c08c     97 28 48 FB | 	callpa	#(@LR__1571-@LR__1570)>>2,fcache_load_ptr_
0c090                 | LR__1570
0c090     F7 F2 C9 FA | 	rdbyte	_var03, _var01 wz
0c094     48 00 90 AD |  if_e	jmp	#LR__1572
0c098     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c09c                 | ' {
0c09c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
0c09c     80 00 36 F3 | 	fle	arg01, #128 wc
0c0a0                 | '     return __ctype[c];
0c0a0     02 00 00 FF 
0c0a4     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c0a8     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c0ac     00 EB C1 FA | 	rdbyte	result1, arg01
0c0b0     02 00 00 FF 
0c0b4     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c0b8     0C EA CD F7 | 	test	result1, #12 wz
0c0bc     20 00 90 AD |  if_e	jmp	#LR__1572
0c0c0     F7 F6 01 F6 | 	mov	_var05, _var01
0c0c4     F7 F8 01 F6 | 	mov	_var06, _var01
0c0c8     01 F8 05 F1 | 	add	_var06, #1
0c0cc     FB FA C1 FA | 	rdbyte	_var07, _var05
0c0d0     FC EE 01 F6 | 	mov	_var01, _var06
0c0d4     FA FA 41 FC | 	wrbyte	_var07, _var04
0c0d8     01 F4 05 F1 | 	add	_var04, #1
0c0dc     B0 FF 9F FD | 	jmp	#LR__1570
0c0e0                 | LR__1571
0c0e0                 | LR__1572
0c0e0     FA 00 48 FC | 	wrbyte	#0, _var04
0c0e4     00 FC 05 F6 | 	mov	_var08, #0
0c0e8     F7 F2 C1 FA | 	rdbyte	_var03, _var01
0c0ec     2D F2 0D F2 | 	cmp	_var03, #45 wz
0c0f0     01 F0 65 A6 |  if_e	neg	_var02, #1
0c0f4     01 EE 05 A1 |  if_e	add	_var01, #1
0c0f8     97 28 48 FB | 	callpa	#(@LR__1574-@LR__1573)>>2,fcache_load_ptr_
0c0fc                 | '                 sgn = -1;
0c0fc                 | '                 s++;
0c0fc                 | '         }
0c0fc                 | '         while (isdigit(*s)) {
0c0fc                 | LR__1573
0c0fc     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c100                 | ' {
0c100                 | '   return  (__ctype_get(c) & 0x02 ) ;
0c100     80 00 36 F3 | 	fle	arg01, #128 wc
0c104                 | '     return __ctype[c];
0c104     02 00 00 FF 
0c108     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c10c     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c110     00 EB C1 FA | 	rdbyte	result1, arg01
0c114     02 00 00 FF 
0c118     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c11c     02 EA CD F7 | 	test	result1, #2 wz
0c120     28 00 90 AD |  if_e	jmp	#LR__1575
0c124     FE F2 01 F6 | 	mov	_var03, _var08
0c128     02 F2 65 F0 | 	shl	_var03, #2
0c12c     FE F2 01 F1 | 	add	_var03, _var08
0c130     01 F2 65 F0 | 	shl	_var03, #1
0c134     F7 F6 C1 FA | 	rdbyte	_var05, _var01
0c138     30 F6 85 F1 | 	sub	_var05, #48
0c13c     FB F2 01 F1 | 	add	_var03, _var05
0c140     F9 FC 01 F6 | 	mov	_var08, _var03
0c144     01 EE 05 F1 | 	add	_var01, #1
0c148     B0 FF 9F FD | 	jmp	#LR__1573
0c14c                 | LR__1574
0c14c                 | LR__1575
0c14c     07 00 00 FF 
0c150     10 FC 05 FD | 	qmul	_var08, ##3600
0c154     F7 F2 C1 FA | 	rdbyte	_var03, _var01
0c158     3A F2 0D F2 | 	cmp	_var03, #58 wz
0c15c     18 FE 61 FD | 	getqx	_var09
0c160     70 00 90 5D |  if_ne	jmp	#LR__1579
0c164     00 FC 05 F6 | 	mov	_var08, #0
0c168     01 EE 05 F1 | 	add	_var01, #1
0c16c     97 28 48 FB | 	callpa	#(@LR__1577-@LR__1576)>>2,fcache_load_ptr_
0c170                 | '                 x = 0;
0c170                 | '                 s++;
0c170                 | '                 while (isdigit(*s)) {
0c170                 | LR__1576
0c170     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c174                 | ' {
0c174                 | '   return  (__ctype_get(c) & 0x02 ) ;
0c174     80 00 36 F3 | 	fle	arg01, #128 wc
0c178                 | '     return __ctype[c];
0c178     02 00 00 FF 
0c17c     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c180     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c184     00 EB C1 FA | 	rdbyte	result1, arg01
0c188     02 00 00 FF 
0c18c     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c190     02 EA CD F7 | 	test	result1, #2 wz
0c194     28 00 90 AD |  if_e	jmp	#LR__1578
0c198     FE F2 01 F6 | 	mov	_var03, _var08
0c19c     02 F2 65 F0 | 	shl	_var03, #2
0c1a0     FE F2 01 F1 | 	add	_var03, _var08
0c1a4     01 F2 65 F0 | 	shl	_var03, #1
0c1a8     F7 F6 C1 FA | 	rdbyte	_var05, _var01
0c1ac     30 F6 85 F1 | 	sub	_var05, #48
0c1b0     FB F2 01 F1 | 	add	_var03, _var05
0c1b4     F9 FC 01 F6 | 	mov	_var08, _var03
0c1b8     01 EE 05 F1 | 	add	_var01, #1
0c1bc     B0 FF 9F FD | 	jmp	#LR__1576
0c1c0                 | LR__1577
0c1c0                 | LR__1578
0c1c0     FE FA 01 F6 | 	mov	_var07, _var08
0c1c4     04 FA 65 F0 | 	shl	_var07, #4
0c1c8     FE FA 81 F1 | 	sub	_var07, _var08
0c1cc     02 FA 65 F0 | 	shl	_var07, #2
0c1d0     FD FE 01 F1 | 	add	_var09, _var07
0c1d4                 | LR__1579
0c1d4     02 00 00 FF 
0c1d8     35 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
0c1dc     F3 F4 01 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
0c1e0     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c1e4                 | ' {
0c1e4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
0c1e4     80 00 36 F3 | 	fle	arg01, #128 wc
0c1e8                 | '     return __ctype[c];
0c1e8     27 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
0c1ec     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c1f0     00 EB C1 FA | 	rdbyte	result1, arg01
0c1f4     02 00 00 FF 
0c1f8     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c1fc     0C EA CD F7 | 	test	result1, #12 wz
0c200     50 00 90 AD |  if_e	jmp	#LR__1582
0c204     01 03 68 FC | 	wrlong	#1, arg02
0c208                 | '                 *hasdst = 1;
0c208                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
0c208                 | LR__1580
0c208     F7 F2 C9 FA | 	rdbyte	_var03, _var01 wz
0c20c     44 00 90 AD |  if_e	jmp	#LR__1581
0c210     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c214                 | ' {
0c214                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
0c214     80 00 36 F3 | 	fle	arg01, #128 wc
0c218                 | '     return __ctype[c];
0c218     02 00 00 FF 
0c21c     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c220     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c224     00 EB C1 FA | 	rdbyte	result1, arg01
0c228     02 00 00 FF 
0c22c     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c230     0C EA CD F7 | 	test	result1, #12 wz
0c234     1C 00 90 AD |  if_e	jmp	#LR__1581
0c238     F7 F8 01 F6 | 	mov	_var06, _var01
0c23c     01 F8 05 F1 | 	add	_var06, #1
0c240     F7 FA C1 FA | 	rdbyte	_var07, _var01
0c244     FC EE 01 F6 | 	mov	_var01, _var06
0c248     FA FA 41 FC | 	wrbyte	_var07, _var04
0c24c     01 F4 05 F1 | 	add	_var04, #1
0c250     B4 FF 9F FD | 	jmp	#LR__1580
0c254                 | LR__1581
0c254                 | LR__1582
0c254     FA 00 48 FC | 	wrbyte	#0, _var04
0c258     02 00 00 FF 
0c25c     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c260     F3 F2 C9 FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
0c264     02 00 00 FF 
0c268     2C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
0c26c     20 00 90 AD |  if_e	jmp	#LR__1583
0c270     02 00 00 FF 
0c274     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c278     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c27c     08 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
0c280     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c284     02 00 00 FF 
0c288     24 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
0c28c     1C 00 90 FD | 	jmp	#LR__1584
0c290                 | LR__1583
0c290     02 00 00 FF 
0c294     3E E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
0c298     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c29c     1A E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
0c2a0     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c2a4     02 00 00 FF 
0c2a8     24 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
0c2ac                 | LR__1584
0c2ac     02 00 00 FF 
0c2b0     35 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
0c2b4     F3 F2 C9 FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
0c2b8     02 00 00 FF 
0c2bc     35 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
0c2c0     20 00 90 AD |  if_e	jmp	#LR__1585
0c2c4     02 00 00 FF 
0c2c8     35 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
0c2cc     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c2d0     0D E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
0c2d4     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c2d8     02 00 00 FF 
0c2dc     28 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
0c2e0     1C 00 90 FD | 	jmp	#LR__1586
0c2e4                 | LR__1585
0c2e4     02 00 00 FF 
0c2e8     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c2ec     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c2f0     04 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
0c2f4     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c2f8     02 00 00 FF 
0c2fc     28 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
0c300                 | LR__1586
0c300     FF F0 01 FD | 	qmul	_var02, _var09
0c304                 | ' 		_tzname[1] = stdname;
0c304                 | ' 
0c304                 | '         return sgn * off;
0c304     18 EA 61 FD | 	getqx	result1
0c308                 | LR__1587
0c308                 | _fatfs_cc___tzoffset_ret
0c308     2D 00 64 FD | 	ret
0c30c                 | 
0c30c                 | _fatfs_cc___indst
0c30c     10 00 06 F1 | 	add	arg01, #16
0c310     00 EF 01 FB | 	rdlong	_var01, arg01
0c314     10 00 86 F1 | 	sub	arg01, #16
0c318     02 EE 0D F2 | 	cmp	_var01, #2 wz
0c31c     30 00 90 5D |  if_ne	jmp	#LR__1590
0c320     07 EE 05 F6 | 	mov	_var01, #7
0c324     18 00 06 F1 | 	add	arg01, #24
0c328     00 F1 01 FB | 	rdlong	_var02, arg01
0c32c     F8 EE 01 F1 | 	add	_var01, _var02
0c330     0C 00 86 F1 | 	sub	arg01, #12
0c334     00 F3 01 FB | 	rdlong	_var03, arg01
0c338     F9 EE 81 F1 | 	sub	_var01, _var03
0c33c     00 EE 55 F2 | 	cmps	_var01, #0 wc
0c340                 | '                         return 1;
0c340     01 EA 05 C6 |  if_b	mov	result1, #1
0c344     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
0c348                 | '                 return 0;
0c348     00 EA 05 F6 | 	mov	result1, #0
0c34c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
0c350                 | LR__1590
0c350     10 00 06 F1 | 	add	arg01, #16
0c354     00 EF 01 FB | 	rdlong	_var01, arg01
0c358     10 00 86 F1 | 	sub	arg01, #16
0c35c     0A EE 0D F2 | 	cmp	_var01, #10 wz
0c360     28 00 90 5D |  if_ne	jmp	#LR__1591
0c364     18 00 06 F1 | 	add	arg01, #24
0c368     00 EF 01 FB | 	rdlong	_var01, arg01
0c36c     0C 00 86 F1 | 	sub	arg01, #12
0c370     00 F5 01 FB | 	rdlong	_var04, arg01
0c374     FA EE 81 F1 | 	sub	_var01, _var04
0c378     00 EE 55 F2 | 	cmps	_var01, #0 wc
0c37c                 | '                         return 0;
0c37c     00 EA 05 C6 |  if_b	mov	result1, #0
0c380     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
0c384                 | '                 return 1;
0c384     01 EA 05 F6 | 	mov	result1, #1
0c388     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
0c38c                 | LR__1591
0c38c                 | '         }
0c38c                 | ' 
0c38c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
0c38c     00 EE 05 F6 | 	mov	_var01, #0
0c390     10 00 06 F1 | 	add	arg01, #16
0c394     00 F1 01 FB | 	rdlong	_var02, arg01
0c398     10 00 86 F1 | 	sub	arg01, #16
0c39c     03 F0 55 F2 | 	cmps	_var02, #3 wc
0c3a0     10 00 90 CD |  if_b	jmp	#LR__1592
0c3a4     10 00 06 F1 | 	add	arg01, #16
0c3a8     00 F3 01 FB | 	rdlong	_var03, arg01
0c3ac     0A F2 55 F2 | 	cmps	_var03, #10 wc
0c3b0     01 EE 05 C6 |  if_b	mov	_var01, #1
0c3b4                 | LR__1592
0c3b4     F7 EA 01 F6 | 	mov	result1, _var01
0c3b8                 | _fatfs_cc___indst_ret
0c3b8     2D 00 64 FD | 	ret
0c3bc                 | 
0c3bc                 | __struct__s_vfs_file_t_putchar
0c3bc     04 4A 05 F6 | 	mov	COUNT_, #4
0c3c0     A8 00 A0 FD | 	call	#pushregs_
0c3c4     1C E2 05 F1 | 	add	objptr, #28
0c3c8     F1 0A 0A FB | 	rdlong	local01, objptr wz
0c3cc     1C E2 85 F1 | 	sub	objptr, #28
0c3d0     00 EA 05 A6 |  if_e	mov	result1, #0
0c3d4     48 00 90 AD |  if_e	jmp	#LR__1600
0c3d8     1C E2 05 F1 | 	add	objptr, #28
0c3dc     F1 0C 02 FB | 	rdlong	local02, objptr
0c3e0     06 0F 02 F6 | 	mov	local03, local02
0c3e4     1C E2 85 F1 | 	sub	objptr, #28
0c3e8     13 0E 46 F7 | 	zerox	local03, #19
0c3ec     14 0C 46 F0 | 	shr	local02, #20
0c3f0     02 0C 66 F0 | 	shl	local02, #2
0c3f4     ED 0C 02 F1 | 	add	local02, __methods__
0c3f8     06 0D 02 FB | 	rdlong	local02, local02
0c3fc     F1 02 02 F6 | 	mov	arg02, objptr
0c400     F1 10 02 F6 | 	mov	local04, objptr
0c404     07 E3 01 F6 | 	mov	objptr, local03
0c408     2D 0C 62 FD | 	call	local02
0c40c     08 E3 01 F6 | 	mov	objptr, local04
0c410                 | '     return (i < 0) ? 0 : 1;
0c410     00 EA 55 F2 | 	cmps	result1, #0 wc
0c414     00 0A 06 C6 |  if_b	mov	local01, #0
0c418     01 0A 06 36 |  if_ae	mov	local01, #1
0c41c     05 EB 01 F6 | 	mov	result1, local01
0c420                 | LR__1600
0c420     A7 F0 03 F6 | 	mov	ptra, fp
0c424     B2 00 A0 FD | 	call	#popregs_
0c428                 | __struct__s_vfs_file_t_putchar_ret
0c428     2D 00 64 FD | 	ret
0c42c                 | 
0c42c                 | __struct__s_vfs_file_t_getchar
0c42c     03 4A 05 F6 | 	mov	COUNT_, #3
0c430     A8 00 A0 FD | 	call	#pushregs_
0c434     20 E2 05 F1 | 	add	objptr, #32
0c438     F1 00 0A FB | 	rdlong	arg01, objptr wz
0c43c     20 E2 85 F1 | 	sub	objptr, #32
0c440     01 EA 65 A6 |  if_e	neg	result1, #1
0c444     38 00 90 AD |  if_e	jmp	#LR__1610
0c448                 | '     return getcf(__this);
0c448     20 E2 05 F1 | 	add	objptr, #32
0c44c     F1 0A 02 FB | 	rdlong	local01, objptr
0c450     05 0D 02 F6 | 	mov	local02, local01
0c454     20 E2 85 F1 | 	sub	objptr, #32
0c458     13 0C 46 F7 | 	zerox	local02, #19
0c45c     14 0A 46 F0 | 	shr	local01, #20
0c460     02 0A 66 F0 | 	shl	local01, #2
0c464     ED 0A 02 F1 | 	add	local01, __methods__
0c468     05 0B 02 FB | 	rdlong	local01, local01
0c46c     F1 00 02 F6 | 	mov	arg01, objptr
0c470     F1 0E 02 F6 | 	mov	local03, objptr
0c474     06 E3 01 F6 | 	mov	objptr, local02
0c478     2D 0A 62 FD | 	call	local01
0c47c     07 E3 01 F6 | 	mov	objptr, local03
0c480                 | LR__1610
0c480     A7 F0 03 F6 | 	mov	ptra, fp
0c484     B2 00 A0 FD | 	call	#popregs_
0c488                 | __struct__s_vfs_file_t_getchar_ret
0c488     2D 00 64 FD | 	ret
0c48c                 | 
0c48c                 | __struct___bas_wrap_sender_tx
0c48c     03 4A 05 F6 | 	mov	COUNT_, #3
0c490     A8 00 A0 FD | 	call	#pushregs_
0c494     F1 0A 02 FB | 	rdlong	local01, objptr
0c498     05 0D 02 F6 | 	mov	local02, local01
0c49c     13 0A 46 F7 | 	zerox	local01, #19
0c4a0     14 0C 46 F0 | 	shr	local02, #20
0c4a4     02 0C 66 F0 | 	shl	local02, #2
0c4a8     ED 0C 02 F1 | 	add	local02, __methods__
0c4ac     06 0D 02 FB | 	rdlong	local02, local02
0c4b0     F1 0E 02 F6 | 	mov	local03, objptr
0c4b4     05 E3 01 F6 | 	mov	objptr, local01
0c4b8     2D 0C 62 FD | 	call	local02
0c4bc     07 E3 01 F6 | 	mov	objptr, local03
0c4c0     01 EA 05 F6 | 	mov	result1, #1
0c4c4     A7 F0 03 F6 | 	mov	ptra, fp
0c4c8     B2 00 A0 FD | 	call	#popregs_
0c4cc                 | __struct___bas_wrap_sender_tx_ret
0c4cc     2D 00 64 FD | 	ret
0c4d0                 | 
0c4d0                 | __struct___bas_wrap_sender_rx
0c4d0     03 4A 05 F6 | 	mov	COUNT_, #3
0c4d4     A8 00 A0 FD | 	call	#pushregs_
0c4d8     04 E2 05 F1 | 	add	objptr, #4
0c4dc     F1 0A 02 FB | 	rdlong	local01, objptr
0c4e0     05 0D 02 F6 | 	mov	local02, local01
0c4e4     04 E2 85 F1 | 	sub	objptr, #4
0c4e8     13 0C 46 F7 | 	zerox	local02, #19
0c4ec     14 0A 46 F0 | 	shr	local01, #20
0c4f0     02 0A 66 F0 | 	shl	local01, #2
0c4f4     ED 0A 02 F1 | 	add	local01, __methods__
0c4f8     05 0B 02 FB | 	rdlong	local01, local01
0c4fc     F1 0E 02 F6 | 	mov	local03, objptr
0c500     06 E3 01 F6 | 	mov	objptr, local02
0c504     2D 0A 62 FD | 	call	local01
0c508     07 E3 01 F6 | 	mov	objptr, local03
0c50c     A7 F0 03 F6 | 	mov	ptra, fp
0c510     B2 00 A0 FD | 	call	#popregs_
0c514                 | __struct___bas_wrap_sender_rx_ret
0c514     2D 00 64 FD | 	ret
0c518                 | 
0c518                 | __struct___bas_wrap_sender_close
0c518     03 4A 05 F6 | 	mov	COUNT_, #3
0c51c     A8 00 A0 FD | 	call	#pushregs_
0c520     08 E2 05 F1 | 	add	objptr, #8
0c524     F1 0A 02 FB | 	rdlong	local01, objptr
0c528     05 0D 02 F6 | 	mov	local02, local01
0c52c     08 E2 85 F1 | 	sub	objptr, #8
0c530     13 0C 46 F7 | 	zerox	local02, #19
0c534     14 0A 46 F0 | 	shr	local01, #20
0c538     02 0A 66 F0 | 	shl	local01, #2
0c53c     ED 0A 02 F1 | 	add	local01, __methods__
0c540     05 0B 02 FB | 	rdlong	local01, local01
0c544     F1 0E 02 F6 | 	mov	local03, objptr
0c548     06 E3 01 F6 | 	mov	objptr, local02
0c54c     2D 0A 62 FD | 	call	local01
0c550     07 E3 01 F6 | 	mov	objptr, local03
0c554     A7 F0 03 F6 | 	mov	ptra, fp
0c558     B2 00 A0 FD | 	call	#popregs_
0c55c                 | __struct___bas_wrap_sender_close_ret
0c55c     2D 00 64 FD | 	ret
0c560                 | 
0c560                 | LR__1620
0c560     2F          | 	byte	"/"
0c561     00          | 	byte	0
0c562                 | LR__1621
0c562     20 21 21 21 
0c566     20 63 6F 72 
0c56a     72 75 70 74 
0c56e     65 64 20 68 
0c572     65 61 70 3F 
0c576     3F 3F 20 21 
0c57a     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0c57d     00          | 	byte	0
0c57e                 | LR__1622
0c57e     20 21 21 21 
0c582     20 6F 75 74 
0c586     20 6F 66 20 
0c58a     68 65 61 70 
0c58e     20 6D 65 6D 
0c592     6F 72 79 20 
0c596     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
0c59a     00          | 	byte	0
0c59b                 | LR__1623
0c59b     20 21 21 21 
0c59f     20 63 6F 72 
0c5a3     72 75 70 74 
0c5a7     65 64 20 68 
0c5ab     65 61 70 20 
0c5af     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0c5b3     00          | 	byte	0
0c5b4                 | LR__1624
0c5b4     00          | 	byte	0
0c5b5     00          | 	byte	0
0c5b6                 | LR__1625
0c5b6     2A 3A 3C 3E 
0c5ba     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
0c5be     00          | 	byte	0
0c5bf                 | LR__1626
0c5bf     2B 2C 3B 3D 
0c5c3     5B 5D       | 	byte	"+,;=[]"
0c5c5     00          | 	byte	0
0c5c6                 | LR__1627
0c5c6     46 41 54 33 
0c5ca     32 20 20 20 | 	byte	"FAT32   "
0c5ce     00          | 	byte	0
0c5cf                 | LR__1628
0c5cf     54 5A       | 	byte	"TZ"
0c5d1     00          | 	byte	0
0c5d2                 | LR__1629
0c5d2     00          | 	byte	0
0c5d3     00          | 	byte	0
0c5d4                 | LR__1630
0c5d4     2F 73 64    | 	byte	"/sd"
0c5d7     00          | 	byte	0
0c5d8                 | LR__1631
0c5d8     2F 73 64    | 	byte	"/sd"
0c5db     00          | 	byte	0
0c5dc                 | LR__1632
0c5dc     6E 6F 6E 65 
0c5e0     78 69 73 74 
0c5e4     69 6E 67 66 
0c5e8     69 6C 65    | 	byte	"nonexistingfile"
0c5eb     00          | 	byte	0
0c5ec                 | LR__1633
0c5ec     2F 73 64 2F 
0c5f0     62 61 73    | 	byte	"/sd/bas"
0c5f3     00          | 	byte	0
0c5f4                 | LR__1634
0c5f4     6D 6F 75 73 
0c5f8     65 74 68 65 
0c5fc     72 65 6D 69 
0c600     6E 2E 62 61 
0c604     73          | 	byte	"mousetheremin.bas"
0c605     00          | 	byte	0
0c606                 | LR__1635
0c606     2F 73 64    | 	byte	"/sd"
0c609     00          | 	byte	0
0c60a     00 00       | 	alignl
0c60c                 | __system__dat_
0c60c     00 00 00 00 
0c610     00 00 00 00 | 	byte	$00[8]
0c614     03 00 00 00 
0c618     00 00 00 00 
0c61c     00 00 00 00 
0c620     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c624     00 00 00 00 
      ...             
0c8b0     00 00 00 00 
0c8b4     00 00 00 00 | 	byte	$00[660]
0c8b8     00 00 50 00 | 	long	(5 {__system____root_opendir})<<20
0c8bc     00 00 60 00 | 	long	(6 {__system____root_closedir})<<20
0c8c0     00 00 70 00 | 	long	(7 {__system____root_readdir})<<20
0c8c4     00 00 80 00 | 	long	(8 {__system____root_stat})<<20
0c8c8     00 00 00 00 
0c8cc     00 00 00 00 
0c8d0     00 00 00 00 
0c8d4     00 00 00 00 
0c8d8     00 00 00 00 
0c8dc     00 00 00 00 
0c8e0     00 00 00 00 | 	byte	$00[28]
0c8e4     4C C9 00 00 | 	long	@@@__system__dat_ + 832
0c8e8     4F C9 00 00 | 	long	@@@__system__dat_ + 835
0c8ec     70 C9 00 00 | 	long	@@@__system__dat_ + 868
0c8f0     89 C9 00 00 | 	long	@@@__system__dat_ + 893
0c8f4     A4 C9 00 00 | 	long	@@@__system__dat_ + 920
0c8f8     BE C9 00 00 | 	long	@@@__system__dat_ + 946
0c8fc     CE C9 00 00 | 	long	@@@__system__dat_ + 962
0c900     E0 C9 00 00 | 	long	@@@__system__dat_ + 980
0c904     F2 C9 00 00 | 	long	@@@__system__dat_ + 998
0c908     04 CA 00 00 | 	long	@@@__system__dat_ + 1016
0c90c     10 CA 00 00 | 	long	@@@__system__dat_ + 1028
0c910     21 CA 00 00 | 	long	@@@__system__dat_ + 1045
0c914     35 CA 00 00 | 	long	@@@__system__dat_ + 1065
0c918     3F CA 00 00 | 	long	@@@__system__dat_ + 1075
0c91c     4F CA 00 00 | 	long	@@@__system__dat_ + 1091
0c920     5E CA 00 00 | 	long	@@@__system__dat_ + 1106
0c924     74 CA 00 00 | 	long	@@@__system__dat_ + 1128
0c928     8D CA 00 00 | 	long	@@@__system__dat_ + 1153
0c92c     A1 CA 00 00 | 	long	@@@__system__dat_ + 1173
0c930     AF CA 00 00 | 	long	@@@__system__dat_ + 1187
0c934     C3 CA 00 00 | 	long	@@@__system__dat_ + 1207
0c938     CF CA 00 00 | 	long	@@@__system__dat_ + 1219
0c93c     E1 CA 00 00 | 	long	@@@__system__dat_ + 1237
0c940     F9 CA 00 00 | 	long	@@@__system__dat_ + 1261
0c944     0B CB 00 00 | 	long	@@@__system__dat_ + 1279
0c948     1E CB 00 00 | 	long	@@@__system__dat_ + 1298
0c94c     4F 4B 00 4E 
0c950     75 6D 65 72 
0c954     69 63 61 6C 
0c958     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
0c95c     75 6D 65 6E 
0c960     74 20 6F 75 
0c964     74 20 6F 66 
0c968     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
0c96c     61 69 6E 00 
0c970     52 65 73 75 
0c974     6C 74 20 6E 
0c978     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
0c97c     65 70 72 65 
0c980     73 65 6E 74 
0c984     61 62 6C 65 
0c988     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
0c98c     65 67 61 6C 
0c990     20 6D 75 6C 
0c994     74 69 62 79 
0c998     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
0c99c     65 71 75 65 
0c9a0     6E 63 65 00 
0c9a4     4E 6F 20 73 
0c9a8     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
0c9ac     66 69 6C 65 
0c9b0     20 6F 72 20 
0c9b4     64 69 72 65 
0c9b8     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
0c9bc     79 00 42 61 
0c9c0     64 20 66 69 
0c9c4     6C 65 20 6E 
0c9c8     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
0c9cc     72 00 50 65 
0c9d0     72 6D 69 73 
0c9d4     73 69 6F 6E 
0c9d8     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
0c9dc     69 65 64 00 
0c9e0     4E 6F 74 20 
0c9e4     65 6E 6F 75 
0c9e8     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
0c9ec     65 6D 6F 72 
0c9f0     79 00 54 65 
0c9f4     6D 70 6F 72 
0c9f8     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
0c9fc     66 61 69 6C 
0ca00     75 72 65 00 
0ca04     46 69 6C 65 
0ca08     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
0ca0c     73 74 73 00 
0ca10     49 6E 76 61 
0ca14     6C 69 64 20 
0ca18     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
0ca1c     6D 65 6E 74 
0ca20     00 54 6F 6F 
0ca24     20 6D 61 6E 
0ca28     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
0ca2c     65 6E 20 66 
0ca30     69 6C 65 73 
0ca34     00 49 2F 4F 
0ca38     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
0ca3c     6F 72 00 4E 
0ca40     6F 74 20 61 
0ca44     20 64 69 72 
0ca48     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
0ca4c     72 79 00 49 
0ca50     73 20 61 20 
0ca54     64 69 72 65 
0ca58     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
0ca5c     79 00 52 65 
0ca60     61 64 20 6F 
0ca64     6E 6C 79 20 
0ca68     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
0ca6c     20 73 79 73 
0ca70     74 65 6D 00 
0ca74     46 75 6E 63 
0ca78     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
0ca7c     20 6E 6F 74 
0ca80     20 69 6D 70 
0ca84     6C 65 6D 65 
0ca88     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
0ca8c     00 44 69 72 
0ca90     65 63 74 6F 
0ca94     72 79 20 6E 
0ca98     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
0ca9c     6D 70 74 79 
0caa0     00 4E 61 6D 
0caa4     65 20 74 6F 
0caa8     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
0caac     6E 67 00 44 
0cab0     65 76 69 63 
0cab4     65 20 6E 6F 
0cab8     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
0cabc     65 6B 61 62 
0cac0     6C 65 00 42 
0cac4     61 64 20 61 
0cac8     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
0cacc     73 73 00 42 
0cad0     72 6F 6B 65 
0cad4     6E 20 63 6F 
0cad8     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
0cadc     74 69 6F 6E 
0cae0     00 44 65 76 
0cae4     69 63 65 20 
0cae8     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
0caec     65 73 6F 75 
0caf0     72 63 65 20 
0caf4     62 75 73 79 
0caf8     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
0cafc     73 73 20 64 
0cb00     65 76 69 63 
0cb04     65 20 6C 69 
0cb08     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
0cb0c     6F 20 73 70 
0cb10     61 63 65 20 
0cb14     6F 6E 20 64 
0cb18     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
0cb1c     65 00 55 6E 
0cb20     6B 6E 6F 77 
0cb24     6E 20 65 72 
0cb28     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
0cb2c     00 00 00 00 
0cb30     00 00 00 00 | 	byte	$00[8]
0cb34     05 00 00 00 
0cb38     00 00 00 00 
0cb3c     00 00 00 00 
0cb40     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb44     00 00 00 00 | 	byte	$00, $00, $00, $00
0cb48     00 00 D0 01 | 	long	(29 {__system___tx})<<20
0cb4c     00 00 E0 01 | 	long	(30 {__system___rx})<<20
0cb50     00 00 00 00 | 	byte	$00, $00, $00, $00
0cb54     00 00 F0 01 | 	long	(31 {__system___rxtxioctl_0188})<<20
0cb58     00 00 00 02 | 	long	(32 {__system____dummy_flush_0189})<<20
0cb5c     00 00 00 00 
0cb60     00 00 00 00 | 	byte	$00[8]
0cb64     01 00 00 00 
0cb68     06 00 00 00 
0cb6c     00 00 00 00 
0cb70     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb74     00 00 00 00 
0cb78     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
0cb7c     00 00 D0 01 | 	long	(29 {__system___tx})<<20
0cb80     00 00 E0 01 | 	long	(30 {__system___rx})<<20
0cb84     00 00 00 00 | 	byte	$00, $00, $00, $00
0cb88     00 00 F0 01 | 	long	(31 {__system___rxtxioctl_0188})<<20
0cb8c     00 00 00 02 | 	long	(32 {__system____dummy_flush_0189})<<20
0cb90     00 00 00 00 
0cb94     00 00 00 00 | 	byte	$00[8]
0cb98     01 00 00 00 
0cb9c     06 00 00 00 
0cba0     00 00 00 00 
0cba4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cba8     00 00 00 00 
0cbac     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
0cbb0     00 00 D0 01 | 	long	(29 {__system___tx})<<20
0cbb4     00 00 E0 01 | 	long	(30 {__system___rx})<<20
0cbb8     00 00 00 00 | 	byte	$00, $00, $00, $00
0cbbc     00 00 F0 01 | 	long	(31 {__system___rxtxioctl_0188})<<20
0cbc0     00 00 00 02 | 	long	(32 {__system____dummy_flush_0189})<<20
0cbc4     00 00 00 00 
      ...             
0cd30     00 00 00 00 
0cd34     00 00 00 00 | 	byte	$00[372]
0cd38                 | 	alignl
0cd38                 | _fatfs_cc_dat_
0cd38     C7 00 FC 00 
0cd3c     E9 00 E2 00 
0cd40     E4 00 E0 00 
0cd44     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
0cd48     EA 00 EB 00 
0cd4c     E8 00 EF 00 
0cd50     EE 00 EC 00 
0cd54     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
0cd58     C9 00 E6 00 
0cd5c     C6 00 F4 00 
0cd60     F6 00 F2 00 
0cd64     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
0cd68     FF 00 D6 00 
0cd6c     DC 00 F8 00 
0cd70     A3 00 D8 00 
0cd74     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
0cd78     E1 00 ED 00 
0cd7c     F3 00 FA 00 
0cd80     F1 00 D1 00 
0cd84     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
0cd88     BF 00 AE 00 
0cd8c     AC 00 BD 00 
0cd90     BC 00 A1 00 
0cd94     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
0cd98     91 25 92 25 
0cd9c     93 25 02 25 
0cda0     24 25 C1 00 
0cda4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
0cda8     A9 00 63 25 
0cdac     51 25 57 25 
0cdb0     5D 25 A2 00 
0cdb4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
0cdb8     14 25 34 25 
0cdbc     2C 25 1C 25 
0cdc0     00 25 3C 25 
0cdc4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
0cdc8     5A 25 54 25 
0cdcc     69 25 66 25 
0cdd0     60 25 50 25 
0cdd4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
0cdd8     F0 00 D0 00 
0cddc     CA 00 CB 00 
0cde0     C8 00 31 01 
0cde4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
0cde8     CF 00 18 25 
0cdec     0C 25 88 25 
0cdf0     84 25 A6 00 
0cdf4     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
0cdf8     D3 00 DF 00 
0cdfc     D4 00 D2 00 
0ce00     F5 00 D5 00 
0ce04     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
0ce08     DE 00 DA 00 
0ce0c     DB 00 D9 00 
0ce10     FD 00 DD 00 
0ce14     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
0ce18     AD 00 B1 00 
0ce1c     17 20 BE 00 
0ce20     B6 00 A7 00 
0ce24     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
0ce28     B0 00 A8 00 
0ce2c     B7 00 B9 00 
0ce30     B3 00 B2 00 
0ce34     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
0ce38     61 00 1A 03 
0ce3c     E0 00 17 03 
0ce40     F8 00 07 03 
0ce44     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
0ce48     78 01 00 01 
0ce4c     30 01 32 01 
0ce50     06 01 39 01 
0ce54     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
0ce58     2E 01 79 01 
0ce5c     06 01 80 01 
0ce60     4D 00 43 02 
0ce64     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
0ce68     82 01 84 01 
0ce6c     84 01 86 01 
0ce70     87 01 87 01 
0ce74     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
0ce78     8B 01 8B 01 
0ce7c     8D 01 8E 01 
0ce80     8F 01 90 01 
0ce84     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
0ce88     93 01 94 01 
0ce8c     F6 01 96 01 
0ce90     97 01 98 01 
0ce94     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
0ce98     9B 01 9C 01 
0ce9c     9D 01 20 02 
0cea0     9F 01 A0 01 
0cea4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
0cea8     A2 01 A4 01 
0ceac     A4 01 A6 01 
0ceb0     A7 01 A7 01 
0ceb4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
0ceb8     AB 01 AC 01 
0cebc     AC 01 AE 01 
0cec0     AF 01 AF 01 
0cec4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
0cec8     B3 01 B3 01 
0cecc     B5 01 B5 01 
0ced0     B7 01 B8 01 
0ced4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
0ced8     BB 01 BC 01 
0cedc     BC 01 BE 01 
0cee0     F7 01 C0 01 
0cee4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
0cee8     C3 01 C4 01 
0ceec     C5 01 C4 01 
0cef0     C7 01 C8 01 
0cef4     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
0cef8     CB 01 CA 01 
0cefc     CD 01 10 01 
0cf00     DD 01 01 00 
0cf04     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
0cf08     12 01 F3 01 
0cf0c     03 00 F1 01 
0cf10     F4 01 F4 01 
0cf14     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
0cf18     22 02 12 01 
0cf1c     3A 02 09 00 
0cf20     65 2C 3B 02 
0cf24     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
0cf28     66 2C 3F 02 
0cf2c     40 02 41 02 
0cf30     41 02 46 02 
0cf34     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
0cf38     40 00 81 01 
0cf3c     86 01 55 02 
0cf40     89 01 8A 01 
0cf44     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
0cf48     5A 02 90 01 
0cf4c     5C 02 5D 02 
0cf50     5E 02 5F 02 
0cf54     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
0cf58     62 02 94 01 
0cf5c     64 02 65 02 
0cf60     66 02 67 02 
0cf64     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
0cf68     6A 02 62 2C 
0cf6c     6C 02 6D 02 
0cf70     6E 02 9C 01 
0cf74     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
0cf78     9D 01 73 02 
0cf7c     74 02 9F 01 
0cf80     76 02 77 02 
0cf84     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
0cf88     7A 02 7B 02 
0cf8c     7C 02 64 2C 
0cf90     7E 02 7F 02 
0cf94     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
0cf98     82 02 A9 01 
0cf9c     84 02 85 02 
0cfa0     86 02 87 02 
0cfa4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
0cfa8     B1 01 B2 01 
0cfac     45 02 8D 02 
0cfb0     8E 02 8F 02 
0cfb4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
0cfb8     B7 01 7B 03 
0cfbc     03 00 FD 03 
0cfc0     FE 03 FF 03 
0cfc4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
0cfc8     86 03 88 03 
0cfcc     89 03 8A 03 
0cfd0     B1 03 11 03 
0cfd4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
0cfd8     A3 03 A3 03 
0cfdc     C4 03 08 03 
0cfe0     CC 03 03 00 
0cfe4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
0cfe8     8F 03 D8 03 
0cfec     18 01 F2 03 
0cff0     0A 00 F9 03 
0cff4     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
0cff8     F5 03 F6 03 
0cffc     F7 03 F7 03 
0d000     F9 03 FA 03 
0d004     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
0d008     20 03 50 04 
0d00c     10 07 60 04 
0d010     22 01 8A 04 
0d014     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
0d018     0E 01 CF 04 
0d01c     01 00 C0 04 
0d020     D0 04 44 01 
0d024     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
0d028     00 00 7D 1D 
0d02c     01 00 63 2C 
0d030     00 1E 96 01 
0d034     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
0d038     00 1F 08 06 
0d03c     10 1F 06 06 
0d040     20 1F 08 06 
0d044     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
0d048     40 1F 06 06 
0d04c     51 1F 07 00 
0d050     59 1F 52 1F 
0d054     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
0d058     5D 1F 56 1F 
0d05c     5F 1F 60 1F 
0d060     08 06 70 1F 
0d064     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
0d068     BB 1F C8 1F 
0d06c     C9 1F CA 1F 
0d070     CB 1F DA 1F 
0d074     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
0d078     F9 1F EA 1F 
0d07c     EB 1F FA 1F 
0d080     FB 1F 80 1F 
0d084     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
0d088     08 06 A0 1F 
0d08c     08 06 B0 1F 
0d090     04 00 B8 1F 
0d094     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
0d098     BC 1F CC 1F 
0d09c     01 00 C3 1F 
0d0a0     D0 1F 02 06 
0d0a4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
0d0a8     E5 1F 01 00 
0d0ac     EC 1F F3 1F 
0d0b0     01 00 FC 1F 
0d0b4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
0d0b8     32 21 70 21 
0d0bc     10 02 84 21 
0d0c0     01 00 83 21 
0d0c4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
0d0c8     30 2C 2F 04 
0d0cc     60 2C 02 01 
0d0d0     67 2C 06 01 
0d0d4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
0d0d8     80 2C 64 01 
0d0dc     00 2D 26 08 
0d0e0     41 FF 1A 03 
0d0e4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
0d0e8     05 07 09 0E 
0d0ec     10 12 14 16 
0d0f0     18 1C 1E 43 
0d0f4     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
0d0f8     41 41 43 45 
0d0fc     45 45 49 49 
0d100     49 41 41 45 
0d104     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
0d108     4F 55 55 59 
0d10c     4F 55 4F 9C 
0d110     4F 9E 9F 41 
0d114     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
0d118     A5 A6 A7 A8 
0d11c     A9 AA AB AC 
0d120     AD AE AF B0 
0d124     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
0d128     41 41 41 B8 
0d12c     B9 BA BB BC 
0d130     BD BE BF C0 
0d134     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
0d138     C5 41 41 C8 
0d13c     C9 CA CB CC 
0d140     CD CE CF D1 
0d144     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
0d148     49 49 49 49 
0d14c     D9 DA DB DC 
0d150     DD 49 DF 4F 
0d154     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
0d158     4F E6 E8 E8 
0d15c     55 55 55 59 
0d160     59 EE EF F0 
0d164     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
0d168     F5 F6 F7 F8 
0d16c     F9 FA FB FC 
0d170     FD FE FF 00 
0d174     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
0d178     00 00 00 00 | 	byte	$00, $00, $00, $00
0d17c     00 00 C0 00 | 	long	(12 {_fatfs_cc_v_close})<<20
0d180     00 00 D0 00 | 	long	(13 {_fatfs_cc_v_read})<<20
0d184     00 00 E0 00 | 	long	(14 {_fatfs_cc_v_write})<<20
0d188     00 00 F0 00 | 	long	(15 {_fatfs_cc_v_lseek})<<20
0d18c     00 00 00 01 | 	long	(16 {_fatfs_cc_v_ioctl})<<20
0d190     00 00 10 02 | 	long	(33 {_fatfs_cc_v_flush})<<20
0d194     00 00 00 00 
0d198     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
0d19c     00 00 10 01 | 	long	(17 {_fatfs_cc_v_open})<<20
0d1a0     00 00 20 01 | 	long	(18 {_fatfs_cc_v_creat})<<20
0d1a4     00 00 30 01 | 	long	(19 {_fatfs_cc_v_opendir})<<20
0d1a8     00 00 40 01 | 	long	(20 {_fatfs_cc_v_closedir})<<20
0d1ac     00 00 50 01 | 	long	(21 {_fatfs_cc_v_readdir})<<20
0d1b0     00 00 60 01 | 	long	(22 {_fatfs_cc_v_stat})<<20
0d1b4     00 00 70 01 | 	long	(23 {_fatfs_cc_v_mkdir})<<20
0d1b8     00 00 80 01 | 	long	(24 {_fatfs_cc_v_rmdir})<<20
0d1bc     00 00 90 01 | 	long	(25 {_fatfs_cc_v_remove})<<20
0d1c0     00 00 A0 01 | 	long	(26 {_fatfs_cc_v_rename})<<20
0d1c4     00 00 B0 01 | 	long	(27 {_fatfs_cc_v_init})<<20
0d1c8     00 00 C0 01 | 	long	(28 {_fatfs_cc_v_deinit})<<20
0d1cc     FF FF FF FF 
0d1d0     1F 00 00 00 
0d1d4     1C 00 00 00 
0d1d8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
0d1dc     1E 00 00 00 
0d1e0     1F 00 00 00 
0d1e4     1E 00 00 00 
0d1e8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
0d1ec     1F 00 00 00 
0d1f0     1E 00 00 00 
0d1f4     1F 00 00 00 
0d1f8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
0d1fc     1F 00 00 00 
0d200     00 00 00 00 
0d204     1F 00 00 00 
0d208     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
0d20c     5A 00 00 00 
0d210     78 00 00 00 
0d214     97 00 00 00 
0d218     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
0d21c     D4 00 00 00 
0d220     F3 00 00 00 
0d224     11 01 00 00 
0d228     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
0d22c     4E 01 00 00 
0d230     6D 01 00 00 
0d234     FF FF FF FF 
0d238     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
0d23c     00 00 00 00 
      ...             
0d254     00 00 00 00 
0d258     00 00 00 00 | 	byte	$00[32]
0d25c     7A D2 00 00 | 	long	@@@_fatfs_cc_dat_ + 1346
0d260     7E D2 00 00 | 	long	@@@_fatfs_cc_dat_ + 1350
0d264     00 00 00 00 
0d268     00 00 00 00 
0d26c     00 00 00 00 
0d270     00 00 00 00 
0d274     00 00       | 	byte	$00[18]
0d276     3F 3F 3F 00 
0d27a     55 43 54 00 
0d27e     55 43 54 00 
0d282     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
0d286     00 00 00 00 
0d28a     00 00 00    | 	byte	$00[7]
0d28d     CA 9A 3B 00 
0d291     00 00 00 01 
0d295     01 01 01 01 
0d299     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
0d29d     91 11 11 11 
0d2a1     11 01 01 01 
0d2a5     01 01 01 01 
0d2a9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
0d2ad     01 01 01 01 
0d2b1     01 01 01    | 	byte	$01[7]
0d2b4     90 20 20 20 
0d2b8     20 20 20 20 
0d2bc     20 20 20 20 
0d2c0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
0d2c4     42 42 42 42 
0d2c8     42 42 42 42 
0d2cc     42 42       | 	byte	$42[10]
0d2ce     20 20 20 20 
0d2d2     20 20 20    | 	byte	$20[7]
0d2d5     44 44 44 44 
0d2d9     44 44       | 	byte	$44[6]
0d2db     04 04 04 04 
0d2df     04 04 04 04 
0d2e3     04 04 04 04 
0d2e7     04 04 04 04 
0d2eb     04 04 04 04 | 	byte	$04[20]
0d2ef     20 20 20 20 
0d2f3     20 20       | 	byte	$20[6]
0d2f5     48 48 48 48 
0d2f9     48 48       | 	byte	$48[6]
0d2fb     08 08 08 08 
0d2ff     08 08 08 08 
0d303     08 08 08 08 
0d307     08 08 08 08 
0d30b     08 08 08 08 | 	byte	$08[20]
0d30f     20 20 20 20 
0d313     01 00 00 00 
0d317     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
0d318                 | __methodtable__
0d318     8C C4 00 00 | 	long	@__struct___bas_wrap_sender_tx
0d31c     D0 C4 00 00 | 	long	@__struct___bas_wrap_sender_rx
0d320     18 C5 00 00 | 	long	@__struct___bas_wrap_sender_close
0d324     BC C3 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0d328     2C C4 00 00 | 	long	@__struct__s_vfs_file_t_getchar
0d32c     38 2F 00 00 | 	long	@__system____root_opendir
0d330     D4 2F 00 00 | 	long	@__system____root_closedir
0d334     50 2F 00 00 | 	long	@__system____root_readdir
0d338     DC 2F 00 00 | 	long	@__system____root_stat
0d33c     90 29 00 00 | 	long	@__system____default_putc
0d340     14 29 00 00 | 	long	@__system____default_getc
0d344     38 2A 00 00 | 	long	@__system____default_flush
0d348     D8 AE 00 00 | 	long	@_fatfs_cc_v_close
0d34c     F4 B2 00 00 | 	long	@_fatfs_cc_v_read
0d350     08 B4 00 00 | 	long	@_fatfs_cc_v_write
0d354     E8 B4 00 00 | 	long	@_fatfs_cc_v_lseek
0d358     70 B5 00 00 | 	long	@_fatfs_cc_v_ioctl
0d35c     C4 B5 00 00 | 	long	@_fatfs_cc_v_open
0d360     3C AE 00 00 | 	long	@_fatfs_cc_v_creat
0d364     1C AF 00 00 | 	long	@_fatfs_cc_v_opendir
0d368     90 AF 00 00 | 	long	@_fatfs_cc_v_closedir
0d36c     D0 AF 00 00 | 	long	@_fatfs_cc_v_readdir
0d370     04 B1 00 00 | 	long	@_fatfs_cc_v_stat
0d374     84 B5 00 00 | 	long	@_fatfs_cc_v_mkdir
0d378     A4 B5 00 00 | 	long	@_fatfs_cc_v_rmdir
0d37c     94 B5 00 00 | 	long	@_fatfs_cc_v_remove
0d380     B4 B5 00 00 | 	long	@_fatfs_cc_v_rename
0d384     D4 B6 00 00 | 	long	@_fatfs_cc_v_init
0d388     DC B6 00 00 | 	long	@_fatfs_cc_v_deinit
0d38c     E4 0D 00 00 | 	long	@__system___tx
0d390     24 0E 00 00 | 	long	@__system___rx
0d394     90 33 00 00 | 	long	@__system___rxtxioctl_0188
0d398     E8 33 00 00 | 	long	@__system____dummy_flush_0189
0d39c     A4 B6 00 00 | 	long	@_fatfs_cc_v_flush
0d3a0                 | __heap_base
0d3a0     00 00 00 00 
      ...             
0eb10     00 00 00 00 
0eb14     00 00 00 00 | 	long	0[1502]
0eb18                 | objmem
0eb18     00 00 00 00 | 	long	0[1]
0eb1c                 | stackspace
0eb1c     00 00 00 00 | 	long	0[1]
0eb20 0f7             | 	org	COG_BSS_START
0eb20 0f7             | _var01
0eb20 0f7             | 	res	1
0eb20 0f8             | _var02
0eb20 0f8             | 	res	1
0eb20 0f9             | _var03
0eb20 0f9             | 	res	1
0eb20 0fa             | _var04
0eb20 0fa             | 	res	1
0eb20 0fb             | _var05
0eb20 0fb             | 	res	1
0eb20 0fc             | _var06
0eb20 0fc             | 	res	1
0eb20 0fd             | _var07
0eb20 0fd             | 	res	1
0eb20 0fe             | _var08
0eb20 0fe             | 	res	1
0eb20 0ff             | _var09
0eb20 0ff             | 	res	1
0eb20 100             | arg01
0eb20 100             | 	res	1
0eb20 101             | arg02
0eb20 101             | 	res	1
0eb20 102             | arg03
0eb20 102             | 	res	1
0eb20 103             | arg04
0eb20 103             | 	res	1
0eb20 104             | arg05
0eb20 104             | 	res	1
0eb20 105             | local01
0eb20 105             | 	res	1
0eb20 106             | local02
0eb20 106             | 	res	1
0eb20 107             | local03
0eb20 107             | 	res	1
0eb20 108             | local04
0eb20 108             | 	res	1
0eb20 109             | local05
0eb20 109             | 	res	1
0eb20 10a             | local06
0eb20 10a             | 	res	1
0eb20 10b             | local07
0eb20 10b             | 	res	1
0eb20 10c             | local08
0eb20 10c             | 	res	1
0eb20 10d             | local09
0eb20 10d             | 	res	1
0eb20 10e             | local10
0eb20 10e             | 	res	1
0eb20 10f             | local11
0eb20 10f             | 	res	1
0eb20 110             | local12
0eb20 110             | 	res	1
0eb20 111             | local13
0eb20 111             | 	res	1
0eb20 112             | local14
0eb20 112             | 	res	1
0eb20 113             | local15
0eb20 113             | 	res	1
0eb20 114             | local16
0eb20 114             | 	res	1
0eb20 115             | local17
0eb20 115             | 	res	1
0eb20 116             | local18
0eb20 116             | 	res	1
0eb20 117             | local19
0eb20 117             | 	res	1
0eb20 118             | local20
0eb20 118             | 	res	1
0eb20 119             | local21
0eb20 119             | 	res	1
0eb20 11a             | muldiva_
0eb20 11a             | 	res	1
0eb20 11b             | muldivb_
0eb20 11b             | 	res	1
0eb20 11c             | 	fit	480
0eb20 11c             | 
