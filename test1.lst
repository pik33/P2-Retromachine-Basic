00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/test1.p2asm"
00000                 | con
00000                 | 	_clkfreq = 160000000
00000                 | 	_clkmode = 16779259
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 160000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $10007fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 EA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 F4 F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 03 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16779256
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 03 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16779259
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e B4 C4 84 FF 
00440 00f 14 00 6C FC | 	wrlong	##160000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E0 07 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 00 62 FD | 	cogid	arg01
00614 084 03 00 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E3 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 EB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 01 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D EA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 04 56 F0 |         shr	arg03, #1 wc
00668 099 00 03 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 00 06 C1 |  if_c   add	arg01, #1
00670 09b 00 02 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 04 56 F0 |         shr	arg03, #1 wc
00678 09d 00 03 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 00 06 C1 |  if_c   add	arg01, #2
00680 09f 01 03 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 00 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 04 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 02 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 02 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 0B 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 0B 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 1B 37 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E0 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 1A 35 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 1B 35 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E0 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 36 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 34 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 1A 35 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E0 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 1B 37 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 EA 05 F6 |     mov result1, #0
00720 0c7 00 EC 05 F6 |     mov result2, #0
00724 0c8 00 DD 01 F6 |     mov abortchain, arg01
00728 0c9 00 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 00 06 F1 |     add arg01, #4
00730 0cb 00 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 00 06 F1 |     add arg01, #4
00738 0cd 00 E3 61 FC |     wrlong objptr, arg01
0073c 0ce 04 00 06 F1 |     add arg01, #4
00740 0cf 00 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 01 01 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 00 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 00 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 00 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 01 EB 01 F6 |     mov result1, arg02
0077c 0de 01 EC 05 F6 |     mov result2, #1
00780 0df 00 03 02 FB |     rdlong arg02, arg01
00784 0e0 04 00 06 F1 |     add arg01, #4
00788 0e1 00 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 00 06 F1 |     add arg01, #4
00790 0e3 00 E3 01 FB |     rdlong objptr, arg01
00794 0e4 04 00 06 F1 |     add arg01, #4
00798 0e5 00 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 00 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 04 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec C0 D3 00 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 38 D3 00 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | itmp1_
007c0 0ef 00 00 00 00 | 	long	0
007c4 0f0             | itmp2_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | objptr
007c8 0f1 38 EB 00 00 | 	long	@objmem
007cc 0f2             | ptr___system__dat__
007cc 0f2 2C C6 00 00 | 	long	@__system__dat_
007d0 0f3             | ptr__fatfs_cc_dat__
007d0 0f3 58 CD 00 00 | 	long	@_fatfs_cc_dat_
007d4 0f4             | ptr_stackspace_
007d4 0f4 40 EB 00 00 | 	long	@stackspace
007d8 0f5             | result1
007d8 0f5 00 00 00 00 | 	long	0
007dc 0f6             | result2
007dc 0f6 01 00 00 00 | 	long	1
007e0 0f7             | COG_BSS_START
007e0 0f7             | 	fit	480
007e0                 | 	orgh
007e0                 | hubentry
007e0                 | 
007e0                 | _program
007e0     01 4A 05 F6 | 	mov	COUNT_, #1
007e4     A8 00 A0 FD | 	call	#pushregs_
007e8     62 00 00 FF 
007ec     E0 0B 06 F6 | 	mov	local01, ##@LR__1640
007f0     3D 00 06 F6 | 	mov	arg01, #61
007f4     3C 02 06 F6 | 	mov	arg02, #60
007f8     3B 04 06 F6 | 	mov	arg03, #59
007fc     3A 06 06 F6 | 	mov	arg04, #58
00800     78 1F B0 FD | 	call	#__system___vfs_open_sdcardx
00804     F5 02 02 F6 | 	mov	arg02, result1
00808     05 01 02 F6 | 	mov	arg01, local01
0080c     74 07 B0 FD | 	call	#__system___mount
00810     62 00 00 FF 
00814     E4 01 06 F6 | 	mov	arg01, ##@LR__1641
00818     28 0A B0 FD | 	call	#__system___chdir
0081c     62 00 00 FF 
00820     EC 0B 06 F6 | 	mov	local01, ##@LR__1642
00824     F1 0A 62 FC | 	wrlong	local01, objptr
00828                 | ' 
00828                 | ' close #9: open "nonexistingfile" for input as #9
00828     09 00 06 F6 | 	mov	arg01, #9
0082c     A8 24 B0 FD | 	call	#__system__close
00830     62 00 00 FF 
00834     F4 03 06 F6 | 	mov	arg02, ##@LR__1643
00838     09 00 06 F6 | 	mov	arg01, #9
0083c     00 04 06 F6 | 	mov	arg03, #0
00840     1C 0E B0 FD | 	call	#__system___basic_open_string
00844                 | ' do: let err=geterr() : print err, strerror$(err) : loop until err=0 : close #9
00844     04 E2 05 F1 | 	add	objptr, #4
00848                 | LR__0001
00848     20 E4 05 F1 | 	add	ptr___system__dat__, #32
0084c     F2 0A 02 FB | 	rdlong	local01, ptr___system__dat__
00850     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00854     F1 0A 62 FC | 	wrlong	local01, objptr
00858     04 E2 85 F1 | 	sub	objptr, #4
0085c     00 00 06 F6 | 	mov	arg01, #0
00860     E8 2A B0 FD | 	call	#__system___getiolock_0121
00864     F5 00 02 F6 | 	mov	arg01, result1
00868     5C 05 B0 FD | 	call	#__system___lockmem
0086c     04 E2 05 F1 | 	add	objptr, #4
00870     F1 02 02 FB | 	rdlong	arg02, objptr
00874     04 E2 85 F1 | 	sub	objptr, #4
00878     00 00 06 F6 | 	mov	arg01, #0
0087c     00 04 06 F6 | 	mov	arg03, #0
00880     0A 06 06 F6 | 	mov	arg04, #10
00884     0C 0F B0 FD | 	call	#__system___basic_print_integer
00888     00 00 06 F6 | 	mov	arg01, #0
0088c     09 02 06 F6 | 	mov	arg02, #9
00890     00 04 06 F6 | 	mov	arg03, #0
00894     60 0E B0 FD | 	call	#__system___basic_print_char
00898     00 0A 06 F6 | 	mov	local01, #0
0089c     04 E2 05 F1 | 	add	objptr, #4
008a0     F1 00 02 FB | 	rdlong	arg01, objptr
008a4     04 E2 85 F1 | 	sub	objptr, #4
008a8     9C 11 B0 FD | 	call	#__system___strerror
008ac     F5 02 02 F6 | 	mov	arg02, result1
008b0     05 01 02 F6 | 	mov	arg01, local01
008b4     00 04 06 F6 | 	mov	arg03, #0
008b8     94 0E B0 FD | 	call	#__system___basic_print_string
008bc     00 00 06 F6 | 	mov	arg01, #0
008c0     0A 02 06 F6 | 	mov	arg02, #10
008c4     00 04 06 F6 | 	mov	arg03, #0
008c8     2C 0E B0 FD | 	call	#__system___basic_print_char
008cc     00 00 06 F6 | 	mov	arg01, #0
008d0     78 2A B0 FD | 	call	#__system___getiolock_0121
008d4     F5 00 68 FC | 	wrlong	#0, result1
008d8     04 E2 05 F1 | 	add	objptr, #4
008dc     F1 0A 0A FB | 	rdlong	local01, objptr wz
008e0     64 FF 9F 5D |  if_ne	jmp	#LR__0001
008e4     04 E2 85 F1 | 	sub	objptr, #4
008e8     09 00 06 F6 | 	mov	arg01, #9
008ec     E8 23 B0 FD | 	call	#__system__close
008f0     63 00 00 FF 
008f4     04 00 06 F6 | 	mov	arg01, ##@LR__1644
008f8     48 09 B0 FD | 	call	#__system___chdir
008fc     20 E4 05 F1 | 	add	ptr___system__dat__, #32
00900     F2 0A 02 FB | 	rdlong	local01, ptr___system__dat__
00904     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00908     04 E2 05 F1 | 	add	objptr, #4
0090c     F1 0A 62 FC | 	wrlong	local01, objptr
00910     04 E2 85 F1 | 	sub	objptr, #4
00914     00 00 06 F6 | 	mov	arg01, #0
00918     30 2A B0 FD | 	call	#__system___getiolock_0121
0091c     F5 00 02 F6 | 	mov	arg01, result1
00920     A4 04 B0 FD | 	call	#__system___lockmem
00924     04 E2 05 F1 | 	add	objptr, #4
00928     F1 02 02 FB | 	rdlong	arg02, objptr
0092c     04 E2 85 F1 | 	sub	objptr, #4
00930     00 00 06 F6 | 	mov	arg01, #0
00934     00 04 06 F6 | 	mov	arg03, #0
00938     0A 06 06 F6 | 	mov	arg04, #10
0093c     54 0E B0 FD | 	call	#__system___basic_print_integer
00940     00 00 06 F6 | 	mov	arg01, #0
00944     09 02 06 F6 | 	mov	arg02, #9
00948     00 04 06 F6 | 	mov	arg03, #0
0094c     A8 0D B0 FD | 	call	#__system___basic_print_char
00950     00 0A 06 F6 | 	mov	local01, #0
00954     04 E2 05 F1 | 	add	objptr, #4
00958     F1 00 02 FB | 	rdlong	arg01, objptr
0095c     04 E2 85 F1 | 	sub	objptr, #4
00960     E4 10 B0 FD | 	call	#__system___strerror
00964     F5 02 02 F6 | 	mov	arg02, result1
00968     05 01 02 F6 | 	mov	arg01, local01
0096c     00 04 06 F6 | 	mov	arg03, #0
00970     DC 0D B0 FD | 	call	#__system___basic_print_string
00974     00 00 06 F6 | 	mov	arg01, #0
00978     0A 02 06 F6 | 	mov	arg02, #10
0097c     00 04 06 F6 | 	mov	arg03, #0
00980     74 0D B0 FD | 	call	#__system___basic_print_char
00984     00 00 06 F6 | 	mov	arg01, #0
00988     C0 29 B0 FD | 	call	#__system___getiolock_0121
0098c     F5 00 68 FC | 	wrlong	#0, result1
00990     63 00 00 FF 
00994     0B 00 06 F6 | 	mov	arg01, ##@LR__1645
00998     A8 08 B0 FD | 	call	#__system___chdir
0099c                 | ' chdir "/sd/bas"
0099c                 | ' 
0099c                 | ' close #9: open "mousetheremin.bas" for input as #9
0099c     09 00 06 F6 | 	mov	arg01, #9
009a0     34 23 B0 FD | 	call	#__system__close
009a4     63 00 00 FF 
009a8     13 02 06 F6 | 	mov	arg02, ##@LR__1646
009ac     09 00 06 F6 | 	mov	arg01, #9
009b0     00 04 06 F6 | 	mov	arg03, #0
009b4     A8 0C B0 FD | 	call	#__system___basic_open_string
009b8     20 E4 05 F1 | 	add	ptr___system__dat__, #32
009bc     F2 0A 02 FB | 	rdlong	local01, ptr___system__dat__
009c0     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
009c4     04 E2 05 F1 | 	add	objptr, #4
009c8     F1 0A 62 FC | 	wrlong	local01, objptr
009cc     04 E2 85 F1 | 	sub	objptr, #4
009d0     00 00 06 F6 | 	mov	arg01, #0
009d4     74 29 B0 FD | 	call	#__system___getiolock_0121
009d8     F5 00 02 F6 | 	mov	arg01, result1
009dc     E8 03 B0 FD | 	call	#__system___lockmem
009e0     04 E2 05 F1 | 	add	objptr, #4
009e4     F1 02 02 FB | 	rdlong	arg02, objptr
009e8     04 E2 85 F1 | 	sub	objptr, #4
009ec     00 00 06 F6 | 	mov	arg01, #0
009f0     00 04 06 F6 | 	mov	arg03, #0
009f4     0A 06 06 F6 | 	mov	arg04, #10
009f8     98 0D B0 FD | 	call	#__system___basic_print_integer
009fc     00 00 06 F6 | 	mov	arg01, #0
00a00     09 02 06 F6 | 	mov	arg02, #9
00a04     00 04 06 F6 | 	mov	arg03, #0
00a08     EC 0C B0 FD | 	call	#__system___basic_print_char
00a0c     00 0A 06 F6 | 	mov	local01, #0
00a10     04 E2 05 F1 | 	add	objptr, #4
00a14     F1 00 02 FB | 	rdlong	arg01, objptr
00a18     04 E2 85 F1 | 	sub	objptr, #4
00a1c     28 10 B0 FD | 	call	#__system___strerror
00a20     F5 02 02 F6 | 	mov	arg02, result1
00a24     05 01 02 F6 | 	mov	arg01, local01
00a28     00 04 06 F6 | 	mov	arg03, #0
00a2c     20 0D B0 FD | 	call	#__system___basic_print_string
00a30     00 00 06 F6 | 	mov	arg01, #0
00a34     0A 02 06 F6 | 	mov	arg02, #10
00a38     00 04 06 F6 | 	mov	arg03, #0
00a3c     B8 0C B0 FD | 	call	#__system___basic_print_char
00a40     00 00 06 F6 | 	mov	arg01, #0
00a44     04 29 B0 FD | 	call	#__system___getiolock_0121
00a48     F5 00 68 FC | 	wrlong	#0, result1
00a4c     09 00 06 F6 | 	mov	arg01, #9
00a50     84 22 B0 FD | 	call	#__system__close
00a54     63 00 00 FF 
00a58     25 00 06 F6 | 	mov	arg01, ##@LR__1647
00a5c     E4 07 B0 FD | 	call	#__system___chdir
00a60     20 E4 05 F1 | 	add	ptr___system__dat__, #32
00a64     F2 0A 02 FB | 	rdlong	local01, ptr___system__dat__
00a68     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00a6c     04 E2 05 F1 | 	add	objptr, #4
00a70     F1 0A 62 FC | 	wrlong	local01, objptr
00a74     04 E2 85 F1 | 	sub	objptr, #4
00a78     00 00 06 F6 | 	mov	arg01, #0
00a7c     CC 28 B0 FD | 	call	#__system___getiolock_0121
00a80     F5 00 02 F6 | 	mov	arg01, result1
00a84     40 03 B0 FD | 	call	#__system___lockmem
00a88     04 E2 05 F1 | 	add	objptr, #4
00a8c     F1 02 02 FB | 	rdlong	arg02, objptr
00a90     04 E2 85 F1 | 	sub	objptr, #4
00a94     00 00 06 F6 | 	mov	arg01, #0
00a98     00 04 06 F6 | 	mov	arg03, #0
00a9c     0A 06 06 F6 | 	mov	arg04, #10
00aa0     F0 0C B0 FD | 	call	#__system___basic_print_integer
00aa4     00 00 06 F6 | 	mov	arg01, #0
00aa8     09 02 06 F6 | 	mov	arg02, #9
00aac     00 04 06 F6 | 	mov	arg03, #0
00ab0     44 0C B0 FD | 	call	#__system___basic_print_char
00ab4     00 0A 06 F6 | 	mov	local01, #0
00ab8     04 E2 05 F1 | 	add	objptr, #4
00abc     F1 00 02 FB | 	rdlong	arg01, objptr
00ac0     04 E2 85 F1 | 	sub	objptr, #4
00ac4     80 0F B0 FD | 	call	#__system___strerror
00ac8     F5 02 02 F6 | 	mov	arg02, result1
00acc     05 01 02 F6 | 	mov	arg01, local01
00ad0     00 04 06 F6 | 	mov	arg03, #0
00ad4     78 0C B0 FD | 	call	#__system___basic_print_string
00ad8     00 00 06 F6 | 	mov	arg01, #0
00adc     0A 02 06 F6 | 	mov	arg02, #10
00ae0     00 04 06 F6 | 	mov	arg03, #0
00ae4     10 0C B0 FD | 	call	#__system___basic_print_char
00ae8     00 00 06 F6 | 	mov	arg01, #0
00aec     5C 28 B0 FD | 	call	#__system___getiolock_0121
00af0     F5 00 68 FC | 	wrlong	#0, result1
00af4     A7 F0 03 F6 | 	mov	ptra, fp
00af8     B2 00 A0 FD | 	call	#popregs_
00afc                 | _program_ret
00afc     2D 00 64 FD | 	ret
00b00                 | hubexit
00b00     81 00 80 FD | 	jmp	#cogexit
00b04                 | 
00b04                 | __system___setbaud
00b04     14 34 06 FB | 	rdlong	muldiva_, #20
00b08     00 37 02 F6 | 	mov	muldivb_, arg01
00b0c     BA 00 A0 FD | 	call	#divide_
00b10     97 06 48 FB | 	callpa	#(@LR__0011-@LR__0010)>>2,fcache_load_ptr_
00b14                 | LR__0010
00b14     3E EA 9D FA | 	rdpin	result1, #62 wc
00b18     F6 EC A1 F1 | 	subx	result2, result2
00b1c     F4 FF 9F CD |  if_b	jmp	#LR__0010
00b20                 | LR__0011
00b20     40 7C 64 FD | 	dirl	#62
00b24     40 7E 64 FD | 	dirl	#63
00b28     F2 36 62 FC | 	wrlong	muldivb_, ptr___system__dat__
00b2c     10 36 66 F0 | 	shl	muldivb_, #16
00b30     07 02 06 F6 | 	mov	arg02, #7
00b34     1B 03 02 F1 | 	add	arg02, muldivb_
00b38     3E F8 0C FC | 	wrpin	#124, #62
00b3c     3E 02 16 FC | 	wxpin	arg02, #62
00b40     3F 7C 0C FC | 	wrpin	#62, #63
00b44     14 02 06 F1 | 	add	arg02, #20
00b48     3F 02 16 FC | 	wxpin	arg02, #63
00b4c     41 7C 64 FD | 	dirh	#62
00b50     41 7E 64 FD | 	dirh	#63
00b54                 | __system___setbaud_ret
00b54     2D 00 64 FD | 	ret
00b58                 | 
00b58                 | __system___txraw
00b58     01 4A 05 F6 | 	mov	COUNT_, #1
00b5c     A8 00 A0 FD | 	call	#pushregs_
00b60     00 0B 02 F6 | 	mov	local01, arg01
00b64     97 06 48 FB | 	callpa	#(@LR__0021-@LR__0020)>>2,fcache_load_ptr_
00b68                 | LR__0020
00b68     3E EA 9D FA | 	rdpin	result1, #62 wc
00b6c     F6 EC A1 F1 | 	subx	result2, result2
00b70     F4 FF 9F CD |  if_b	jmp	#LR__0020
00b74                 | LR__0021
00b74     F2 EA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
00b78     C2 01 00 AF 
00b7c     00 00 06 A6 |  if_e	mov	arg01, ##230400
00b80     80 FF BF AD |  if_e	call	#__system___setbaud
00b84     58 7C 64 FD | 	drvl	#62
00b88     3E 0A 26 FC | 	wypin	local01, #62
00b8c     01 EA 05 F6 | 	mov	result1, #1
00b90     A7 F0 03 F6 | 	mov	ptra, fp
00b94     B2 00 A0 FD | 	call	#popregs_
00b98                 | __system___txraw_ret
00b98     2D 00 64 FD | 	ret
00b9c                 | 
00b9c                 | __system___rxraw
00b9c     0D 4A 05 F6 | 	mov	COUNT_, #13
00ba0     A8 00 A0 FD | 	call	#pushregs_
00ba4     00 0B 02 F6 | 	mov	local01, arg01
00ba8     F2 0C 0A FB | 	rdlong	local02, ptr___system__dat__ wz
00bac     C2 01 00 AF 
00bb0     00 00 06 A6 |  if_e	mov	arg01, ##230400
00bb4     4C FF BF AD |  if_e	call	#__system___setbaud
00bb8     00 0A 0E F2 | 	cmp	local01, #0 wz
00bbc     20 00 90 AD |  if_e	jmp	#LR__0030
00bc0     14 0E 06 FB | 	rdlong	local03, #20
00bc4     0A 0E 46 F0 | 	shr	local03, #10
00bc8     07 0B 02 FD | 	qmul	local01, local03
00bcc     1A EA 61 FD | 	getct	result1
00bd0     18 10 62 FD | 	getqx	local04
00bd4     08 EB 01 F1 | 	add	result1, local04
00bd8     F5 12 02 F6 | 	mov	local05, result1
00bdc     04 00 90 FD | 	jmp	#LR__0031
00be0                 | LR__0030
00be0     00 12 06 F6 | 	mov	local05, #0
00be4                 | LR__0031
00be4     01 14 66 F6 | 	neg	local06, #1
00be8     3F 16 06 F6 | 	mov	local07, #63
00bec     00 18 06 F6 | 	mov	local08, #0
00bf0     04 E4 05 F1 | 	add	ptr___system__dat__, #4
00bf4     F2 1A 02 FB | 	rdlong	local09, ptr___system__dat__
00bf8     04 E4 85 F1 | 	sub	ptr___system__dat__, #4
00bfc                 | LR__0032
00bfc     08 1A 16 F4 | 	testb	local09, #8 wc
00c00     09 1A 76 F4 | 	testbn	local09, #9 andc
00c04     0A 1A 46 F0 | 	shr	local09, #10
00c08     01 18 06 C6 |  if_b	mov	local08, #1
00c0c     40 7E 6C 3D |  if_ae	testp	#63 wz
00c10     01 18 06 26 |  if_nc_and_z	mov	local08, #1
00c14     3F 1A 8E 2A |  if_nc_and_z	rdpin	local09, #63
00c18     04 1A 46 20 |  if_nc_and_z	shr	local09, #4
00c1c                 | LR__0033
00c1c     00 0C 06 F6 | 	mov	local02, #0
00c20     00 18 0E F2 | 	cmp	local08, #0 wz
00c24     01 0C 66 56 |  if_ne	neg	local02, #1
00c28     00 1C 06 F6 | 	mov	local10, #0
00c2c     00 0E 06 F6 | 	mov	local03, #0
00c30     00 0A 0E F2 | 	cmp	local01, #0 wz
00c34     01 0E 66 56 |  if_ne	neg	local03, #1
00c38     00 10 06 F6 | 	mov	local04, #0
00c3c     00 1E 06 F6 | 	mov	local11, #0
00c40     09 21 02 F6 | 	mov	local12, local05
00c44     1A EA 61 FD | 	getct	result1
00c48     F5 22 02 F6 | 	mov	local13, result1
00c4c     11 21 82 F1 | 	sub	local12, local13
00c50     00 20 56 F2 | 	cmps	local12, #0 wc
00c54     00 1E 26 C6 |  if_b	not	local11, #0
00c58     00 1E 0E F2 | 	cmp	local11, #0 wz
00c5c     00 10 26 56 |  if_ne	not	local04, #0
00c60     08 0F CA F7 | 	test	local03, local04 wz
00c64     00 1C 26 56 |  if_ne	not	local10, #0
00c68     0E 0D 4A F5 | 	or	local02, local10 wz
00c6c     8C FF 9F AD |  if_e	jmp	#LR__0032
00c70     00 18 0E F2 | 	cmp	local08, #0 wz
00c74     0D 15 02 56 |  if_ne	mov	local06, local09
00c78     0A 15 E2 58 |  if_ne	getbyte	local06, local06, #0
00c7c     04 E4 05 F1 | 	add	ptr___system__dat__, #4
00c80     F2 1A 62 FC | 	wrlong	local09, ptr___system__dat__
00c84     04 E4 85 F1 | 	sub	ptr___system__dat__, #4
00c88     0A EB 01 F6 | 	mov	result1, local06
00c8c     A7 F0 03 F6 | 	mov	ptra, fp
00c90     B2 00 A0 FD | 	call	#popregs_
00c94                 | __system___rxraw_ret
00c94     2D 00 64 FD | 	ret
00c98                 | 
00c98                 | __system___getus
00c98     1A EC 71 FD | 	getct	result2 wc
00c9c     1A EE 61 FD | 	getct	_var01
00ca0     10 E4 05 F1 | 	add	ptr___system__dat__, #16
00ca4     F2 F0 09 FB | 	rdlong	_var02, ptr___system__dat__ wz
00ca8     10 E4 85 F1 | 	sub	ptr___system__dat__, #16
00cac     20 00 90 5D |  if_ne	jmp	#LR__0040
00cb0     14 F0 05 FB | 	rdlong	_var02, #20
00cb4     A1 07 00 FF 
00cb8     40 F0 15 FD | 	qdiv	_var02, ##1000000
00cbc     10 E4 05 F1 | 	add	ptr___system__dat__, #16
00cc0     18 EA 61 FD | 	getqx	result1
00cc4     F5 F0 01 F6 | 	mov	_var02, result1
00cc8     F2 EA 61 FC | 	wrlong	result1, ptr___system__dat__
00ccc     10 E4 85 F1 | 	sub	ptr___system__dat__, #16
00cd0                 | LR__0040
00cd0     F8 EC 11 FD | 	qdiv	result2, _var02
00cd4     19 EC 61 FD | 	getqy	result2
00cd8     28 EC 61 FD | 	setq	result2
00cdc     F8 EE 11 FD | 	qdiv	_var01, _var02
00ce0     18 EA 61 FD | 	getqx	result1
00ce4                 | __system___getus_ret
00ce4     2D 00 64 FD | 	ret
00ce8                 | 
00ce8                 | __system____builtin_memmove
00ce8     00 EF 01 F6 | 	mov	_var01, arg01
00cec     01 01 52 F2 | 	cmps	arg01, arg02 wc
00cf0     10 00 90 CD |  if_b	jmp	#LR__0050
00cf4     01 F1 01 F6 | 	mov	_var02, arg02
00cf8     02 F1 01 F1 | 	add	_var02, arg03
00cfc     F8 00 52 F2 | 	cmps	arg01, _var02 wc
00d00     48 00 90 CD |  if_b	jmp	#LR__0056
00d04                 | LR__0050
00d04     02 F3 01 F6 | 	mov	_var03, arg03
00d08     02 F2 4D F0 | 	shr	_var03, #2 wz
00d0c     18 00 90 AD |  if_e	jmp	#LR__0055
00d10     97 0A 48 FB | 	callpa	#(@LR__0053-@LR__0051)>>2,fcache_load_ptr_
00d14                 | LR__0051
00d14     F9 08 D8 FC | 	rep	@LR__0054, _var03
00d18                 | LR__0052
00d18     01 F3 01 FB | 	rdlong	_var03, arg02
00d1c     00 F3 61 FC | 	wrlong	_var03, arg01
00d20     04 00 06 F1 | 	add	arg01, #4
00d24     04 02 06 F1 | 	add	arg02, #4
00d28                 | LR__0053
00d28                 | LR__0054
00d28                 | LR__0055
00d28     02 04 CE F7 | 	test	arg03, #2 wz
00d2c     01 F1 E1 5A |  if_ne	rdword	_var02, arg02
00d30     00 F1 51 5C |  if_ne	wrword	_var02, arg01
00d34     02 00 06 51 |  if_ne	add	arg01, #2
00d38     02 02 06 51 |  if_ne	add	arg02, #2
00d3c     01 04 CE F7 | 	test	arg03, #1 wz
00d40     01 F1 C1 5A |  if_ne	rdbyte	_var02, arg02
00d44     00 F1 41 5C |  if_ne	wrbyte	_var02, arg01
00d48     28 00 90 FD | 	jmp	#LR__0062
00d4c                 | LR__0056
00d4c     02 01 02 F1 | 	add	arg01, arg03
00d50     02 03 02 F1 | 	add	arg02, arg03
00d54     02 F5 09 F6 | 	mov	_var04, arg03 wz
00d58     18 00 90 AD |  if_e	jmp	#LR__0061
00d5c     97 0A 48 FB | 	callpa	#(@LR__0059-@LR__0057)>>2,fcache_load_ptr_
00d60                 | LR__0057
00d60     FA 08 D8 FC | 	rep	@LR__0060, _var04
00d64                 | LR__0058
00d64     01 00 86 F1 | 	sub	arg01, #1
00d68     01 02 86 F1 | 	sub	arg02, #1
00d6c     01 F1 C1 FA | 	rdbyte	_var02, arg02
00d70     00 F1 41 FC | 	wrbyte	_var02, arg01
00d74                 | LR__0059
00d74                 | LR__0060
00d74                 | LR__0061
00d74                 | LR__0062
00d74     F7 EA 01 F6 | 	mov	result1, _var01
00d78                 | __system____builtin_memmove_ret
00d78     2D 00 64 FD | 	ret
00d7c                 | 
00d7c                 | __system____builtin_strcpy
00d7c     00 EF 01 F6 | 	mov	_var01, arg01
00d80     97 0A 48 FB | 	callpa	#(@LR__0071-@LR__0070)>>2,fcache_load_ptr_
00d84                 | LR__0070
00d84     01 EB C9 FA | 	rdbyte	result1, arg02 wz
00d88     00 EB 41 FC | 	wrbyte	result1, arg01
00d8c     01 02 06 F1 | 	add	arg02, #1
00d90     01 00 06 F1 | 	add	arg01, #1
00d94     EC FF 9F 5D |  if_ne	jmp	#LR__0070
00d98                 | LR__0071
00d98     F7 EA 01 F6 | 	mov	result1, _var01
00d9c                 | __system____builtin_strcpy_ret
00d9c     2D 00 64 FD | 	ret
00da0                 | 
00da0                 | __system____topofstack
00da0     00 4A 05 F6 | 	mov	COUNT_, #0
00da4     A8 00 A0 FD | 	call	#pushregs_
00da8     08 F0 07 F1 | 	add	ptra, #8
00dac     04 4E 05 F1 | 	add	fp, #4
00db0     A7 00 62 FC | 	wrlong	arg01, fp
00db4     A7 EA 01 F6 | 	mov	result1, fp
00db8     04 4E 85 F1 | 	sub	fp, #4
00dbc     A7 F0 03 F6 | 	mov	ptra, fp
00dc0     B2 00 A0 FD | 	call	#popregs_
00dc4                 | __system____topofstack_ret
00dc4     2D 00 64 FD | 	ret
00dc8                 | 
00dc8                 | __system___lockmem
00dc8     00 EA 05 F6 | 	mov	result1, #0
00dcc     01 EA 61 FD | 	cogid	result1
00dd0     00 EB 05 F1 | 	add	result1, #256
00dd4                 | LR__0080
00dd4     00 EF 09 FB | 	rdlong	_var01, arg01 wz
00dd8     00 EB 61 AC |  if_e	wrlong	result1, arg01
00ddc     00 EF 01 AB |  if_e	rdlong	_var01, arg01
00de0     00 EF 01 AB |  if_e	rdlong	_var01, arg01
00de4     F5 EE 09 F2 | 	cmp	_var01, result1 wz
00de8     E8 FF 9F 5D |  if_ne	jmp	#LR__0080
00dec                 | __system___lockmem_ret
00dec     2D 00 64 FD | 	ret
00df0                 | 
00df0                 | __system___tx
00df0     02 4A 05 F6 | 	mov	COUNT_, #2
00df4     A8 00 A0 FD | 	call	#pushregs_
00df8     00 0B 02 F6 | 	mov	local01, arg01
00dfc     0A 0A 0E F2 | 	cmp	local01, #10 wz
00e00     18 00 90 5D |  if_ne	jmp	#LR__0090
00e04     08 E4 05 F1 | 	add	ptr___system__dat__, #8
00e08     F2 0C 02 FB | 	rdlong	local02, ptr___system__dat__
00e0c     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
00e10     02 0C CE F7 | 	test	local02, #2 wz
00e14     0D 00 06 56 |  if_ne	mov	arg01, #13
00e18     3C FD BF 5D |  if_ne	call	#__system___txraw
00e1c                 | LR__0090
00e1c     05 01 02 F6 | 	mov	arg01, local01
00e20     34 FD BF FD | 	call	#__system___txraw
00e24     A7 F0 03 F6 | 	mov	ptra, fp
00e28     B2 00 A0 FD | 	call	#popregs_
00e2c                 | __system___tx_ret
00e2c     2D 00 64 FD | 	ret
00e30                 | 
00e30                 | __system___rx
00e30     01 4A 05 F6 | 	mov	COUNT_, #1
00e34     A8 00 A0 FD | 	call	#pushregs_
00e38                 | LR__0100
00e38     00 00 06 F6 | 	mov	arg01, #0
00e3c     5C FD BF FD | 	call	#__system___rxraw
00e40     F5 0A 02 F6 | 	mov	local01, result1
00e44     FF FF 7F FF 
00e48     FF 0B 0E F2 | 	cmp	local01, ##-1 wz
00e4c     E8 FF 9F AD |  if_e	jmp	#LR__0100
00e50     0D 0A 0E F2 | 	cmp	local01, #13 wz
00e54     14 00 90 5D |  if_ne	jmp	#LR__0101
00e58     08 E4 05 F1 | 	add	ptr___system__dat__, #8
00e5c     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
00e60     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
00e64     02 EA CD F7 | 	test	result1, #2 wz
00e68     0A 0A 06 56 |  if_ne	mov	local01, #10
00e6c                 | LR__0101
00e6c     08 E4 05 F1 | 	add	ptr___system__dat__, #8
00e70     F2 00 02 FB | 	rdlong	arg01, ptr___system__dat__
00e74     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
00e78     01 00 CE F7 | 	test	arg01, #1 wz
00e7c     1C 00 90 AD |  if_e	jmp	#LR__0104
00e80     7F 0A 0E F2 | 	cmp	local01, #127 wz
00e84     0C 00 90 5D |  if_ne	jmp	#LR__0102
00e88     08 00 06 F6 | 	mov	arg01, #8
00e8c     60 FF BF FD | 	call	#__system___tx
00e90     08 00 90 FD | 	jmp	#LR__0103
00e94                 | LR__0102
00e94     05 01 02 F6 | 	mov	arg01, local01
00e98     54 FF BF FD | 	call	#__system___tx
00e9c                 | LR__0103
00e9c                 | LR__0104
00e9c     05 EB 01 F6 | 	mov	result1, local01
00ea0     A7 F0 03 F6 | 	mov	ptra, fp
00ea4     B2 00 A0 FD | 	call	#popregs_
00ea8                 | __system___rx_ret
00ea8     2D 00 64 FD | 	ret
00eac                 | 
00eac                 | __system___waitms
00eac     00 EF 01 F6 | 	mov	_var01, arg01
00eb0     1A F0 61 FD | 	getct	_var02
00eb4     14 F2 05 FB | 	rdlong	_var03, #20
00eb8     97 14 48 FB | 	callpa	#(@LR__0111-@LR__0110)>>2,fcache_load_ptr_
00ebc                 | LR__0110
00ebc     01 00 00 FF 
00ec0     E8 EF 55 F2 | 	cmps	_var01, ##1000 wc
00ec4     1C 00 90 CD |  if_b	jmp	#LR__0112
00ec8     F9 F0 01 F1 | 	add	_var02, _var03
00ecc     F8 00 02 F6 | 	mov	arg01, _var02
00ed0     00 00 66 FA | 	addct1	arg01, #0
00ed4     24 22 60 FD | 	waitct1
00ed8     01 00 00 FF 
00edc     E8 EF 85 F1 | 	sub	_var01, ##1000
00ee0     D8 FF 9F FD | 	jmp	#LR__0110
00ee4                 | LR__0111
00ee4                 | LR__0112
00ee4     01 EE 55 F2 | 	cmps	_var01, #1 wc
00ee8     28 00 90 CD |  if_b	jmp	#LR__0113
00eec     F9 EE 01 FD | 	qmul	_var01, _var03
00ef0     01 00 00 FF 
00ef4     E8 05 06 F6 | 	mov	arg03, ##1000
00ef8     19 EA 61 FD | 	getqy	result1
00efc     18 00 62 FD | 	getqx	arg01
00f00     28 EA 61 FD | 	setq	result1
00f04     02 01 12 FD | 	qdiv	arg01, arg03
00f08     18 00 62 FD | 	getqx	arg01
00f0c     F8 00 62 FA | 	addct1	arg01, _var02
00f10     24 22 60 FD | 	waitct1
00f14                 | LR__0113
00f14                 | __system___waitms_ret
00f14     2D 00 64 FD | 	ret
00f18                 | 
00f18                 | __system___waitus
00f18     00 EF 01 F6 | 	mov	_var01, arg01
00f1c     1A F0 61 FD | 	getct	_var02
00f20     14 F2 05 FB | 	rdlong	_var03, #20
00f24     97 14 48 FB | 	callpa	#(@LR__0121-@LR__0120)>>2,fcache_load_ptr_
00f28                 | LR__0120
00f28     A1 07 00 FF 
00f2c     40 EE 55 F2 | 	cmps	_var01, ##1000000 wc
00f30     1C 00 90 CD |  if_b	jmp	#LR__0122
00f34     F9 F0 01 F1 | 	add	_var02, _var03
00f38     F8 00 02 F6 | 	mov	arg01, _var02
00f3c     00 00 66 FA | 	addct1	arg01, #0
00f40     24 22 60 FD | 	waitct1
00f44     A1 07 00 FF 
00f48     40 EE 85 F1 | 	sub	_var01, ##1000000
00f4c     D8 FF 9F FD | 	jmp	#LR__0120
00f50                 | LR__0121
00f50                 | LR__0122
00f50     01 EE 55 F2 | 	cmps	_var01, #1 wc
00f54     28 00 90 CD |  if_b	jmp	#LR__0123
00f58     F9 EE 01 FD | 	qmul	_var01, _var03
00f5c     A1 07 00 FF 
00f60     40 04 06 F6 | 	mov	arg03, ##1000000
00f64     19 EA 61 FD | 	getqy	result1
00f68     18 00 62 FD | 	getqx	arg01
00f6c     28 EA 61 FD | 	setq	result1
00f70     02 01 12 FD | 	qdiv	arg01, arg03
00f74     18 EA 61 FD | 	getqx	result1
00f78     F5 F0 61 FA | 	addct1	_var02, result1
00f7c     24 22 60 FD | 	waitct1
00f80                 | LR__0123
00f80                 | __system___waitus_ret
00f80     2D 00 64 FD | 	ret
00f84                 | 
00f84                 | __system___mount
00f84     0B 4A 05 F6 | 	mov	COUNT_, #11
00f88     A8 00 A0 FD | 	call	#pushregs_
00f8c     00 0B 02 F6 | 	mov	local01, arg01
00f90     01 0D 0A F6 | 	mov	local02, arg02 wz
00f94     01 0E 66 F6 | 	neg	local03, #1
00f98     01 EA 65 A6 |  if_e	neg	result1, #1
00f9c     98 02 90 AD |  if_e	jmp	#LR__0145
00fa0     05 EB C1 FA | 	rdbyte	result1, local01
00fa4     2F EA 0D F2 | 	cmp	result1, #47 wz
00fa8     28 00 90 5D |  if_ne	jmp	#LR__0132
00fac     05 01 02 F6 | 	mov	arg01, local01
00fb0     00 11 02 F6 | 	mov	local04, arg01
00fb4     97 06 48 FB | 	callpa	#(@LR__0131-@LR__0130)>>2,fcache_load_ptr_
00fb8                 | LR__0130
00fb8     08 EB C9 FA | 	rdbyte	result1, local04 wz
00fbc     01 10 06 51 |  if_ne	add	local04, #1
00fc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
00fc4                 | LR__0131
00fc4     00 11 82 F1 | 	sub	local04, arg01
00fc8     08 EB 01 F6 | 	mov	result1, local04
00fcc     10 EA 55 F2 | 	cmps	result1, #16 wc
00fd0     14 00 90 CD |  if_b	jmp	#LR__0133
00fd4                 | LR__0132
00fd4     20 E4 05 F1 | 	add	ptr___system__dat__, #32
00fd8     F2 14 68 FC | 	wrlong	#10, ptr___system__dat__
00fdc     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
00fe0     01 EA 65 F6 | 	neg	result1, #1
00fe4     50 02 90 FD | 	jmp	#LR__0145
00fe8                 | LR__0133
00fe8     00 12 06 F6 | 	mov	local05, #0
00fec                 | LR__0134
00fec     04 12 56 F2 | 	cmps	local05, #4 wc
00ff0     B0 00 90 3D |  if_ae	jmp	#LR__0139
00ff4     09 01 02 F6 | 	mov	arg01, local05
00ff8     02 00 66 F0 | 	shl	arg01, #2
00ffc     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01000     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
01004     00 EB 09 FB | 	rdlong	result1, arg01 wz
01008     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
0100c     00 0E 56 A2 |  if_e	cmps	local03, #0 wc
01010     09 0F 02 86 |  if_c_and_z	mov	local03, local05
01014     84 00 90 8D |  if_c_and_z	jmp	#LR__0138
01018     09 01 02 F6 | 	mov	arg01, local05
0101c     02 00 66 F0 | 	shl	arg01, #2
01020     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01024     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
01028     00 01 02 FB | 	rdlong	arg01, arg01
0102c     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01030     00 11 02 F6 | 	mov	local04, arg01
01034     97 06 48 FB | 	callpa	#(@LR__0136-@LR__0135)>>2,fcache_load_ptr_
01038                 | LR__0135
01038     08 EB C9 FA | 	rdbyte	result1, local04 wz
0103c     01 10 06 51 |  if_ne	add	local04, #1
01040     F4 FF 9F 5D |  if_ne	jmp	#LR__0135
01044                 | LR__0136
01044     00 11 82 F1 | 	sub	local04, arg01
01048     08 15 02 F6 | 	mov	local06, local04
0104c     0A 01 02 F6 | 	mov	arg01, local06
01050     05 01 02 F1 | 	add	arg01, local01
01054     00 EB C1 FA | 	rdbyte	result1, arg01
01058     2F EA 0D F2 | 	cmp	result1, #47 wz
0105c     0A 17 02 56 |  if_ne	mov	local07, local06
01060     05 17 02 51 |  if_ne	add	local07, local01
01064     0B 01 CA 5A |  if_ne	rdbyte	arg01, local07 wz
01068     30 00 90 5D |  if_ne	jmp	#LR__0137
0106c     09 05 02 F6 | 	mov	arg03, local05
01070     02 04 66 F0 | 	shl	arg03, #2
01074     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01078     F2 04 02 F1 | 	add	arg03, ptr___system__dat__
0107c     02 03 02 FB | 	rdlong	arg02, arg03
01080     05 01 02 F6 | 	mov	arg01, local01
01084     0A 05 02 F6 | 	mov	arg03, local06
01088     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
0108c     20 1E B0 FD | 	call	#__system__strncmp
01090     00 EA 0D F2 | 	cmp	result1, #0 wz
01094     09 0F 02 A6 |  if_e	mov	local03, local05
01098     08 00 90 AD |  if_e	jmp	#LR__0139
0109c                 | LR__0137
0109c                 | LR__0138
0109c     01 12 06 F1 | 	add	local05, #1
010a0     48 FF 9F FD | 	jmp	#LR__0134
010a4                 | LR__0139
010a4     FF FF 7F FF 
010a8     FF 0F 0E F2 | 	cmp	local03, ##-1 wz
010ac     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
010b0     F2 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
010b4     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
010b8     01 EA 65 A6 |  if_e	neg	result1, #1
010bc     78 01 90 AD |  if_e	jmp	#LR__0145
010c0     07 13 02 F6 | 	mov	local05, local03
010c4     09 17 02 F6 | 	mov	local07, local05
010c8     02 16 66 F0 | 	shl	local07, #2
010cc     74 E4 05 F1 | 	add	ptr___system__dat__, #116
010d0     F2 16 02 F1 | 	add	local07, ptr___system__dat__
010d4     0B 15 0A FB | 	rdlong	local06, local07 wz
010d8     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
010dc     58 00 90 AD |  if_e	jmp	#LR__0140
010e0     4C 14 06 F1 | 	add	local06, #76
010e4     0A 17 0A FB | 	rdlong	local07, local06 wz
010e8     4C 14 86 F1 | 	sub	local06, #76
010ec     48 00 90 AD |  if_e	jmp	#LR__0140
010f0     4C 14 06 F1 | 	add	local06, #76
010f4     0A 17 02 FB | 	rdlong	local07, local06
010f8     0B 0F 02 F6 | 	mov	local03, local07
010fc     13 16 46 F7 | 	zerox	local07, #19
01100     14 0E 46 F0 | 	shr	local03, #20
01104     02 0E 66 F0 | 	shl	local03, #2
01108     ED 0E 02 F1 | 	add	local03, __methods__
0110c     07 0F 02 FB | 	rdlong	local03, local03
01110     09 15 02 F6 | 	mov	local06, local05
01114     02 14 66 F0 | 	shl	local06, #2
01118     64 E4 05 F1 | 	add	ptr___system__dat__, #100
0111c     F2 14 02 F1 | 	add	local06, ptr___system__dat__
01120     0A 01 02 FB | 	rdlong	arg01, local06
01124     F1 14 02 F6 | 	mov	local06, objptr
01128     0B E3 01 F6 | 	mov	objptr, local07
0112c     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01130     2D 0E 62 FD | 	call	local03
01134     0A E3 01 F6 | 	mov	objptr, local06
01138                 | LR__0140
01138     09 19 02 F6 | 	mov	local08, local05
0113c     02 18 66 F0 | 	shl	local08, #2
01140     74 E4 05 F1 | 	add	ptr___system__dat__, #116
01144     F2 18 02 F1 | 	add	local08, ptr___system__dat__
01148     0C 0D 62 FC | 	wrlong	local02, local08
0114c     00 0C 0E F2 | 	cmp	local02, #0 wz
01150     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
01154     18 00 90 5D |  if_ne	jmp	#LR__0141
01158     02 12 66 F0 | 	shl	local05, #2
0115c     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01160     F2 12 02 F1 | 	add	local05, ptr___system__dat__
01164     09 01 68 FC | 	wrlong	#0, local05
01168     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
0116c     C4 00 90 FD | 	jmp	#LR__0144
01170                 | LR__0141
01170     09 1B 02 F6 | 	mov	local09, local05
01174     04 1A 66 F0 | 	shl	local09, #4
01178     24 E4 05 F1 | 	add	ptr___system__dat__, #36
0117c     F2 1A 02 F1 | 	add	local09, ptr___system__dat__
01180     0D 01 02 F6 | 	mov	arg01, local09
01184     05 03 02 F6 | 	mov	arg02, local01
01188     10 04 06 F6 | 	mov	arg03, #16
0118c     24 E4 85 F1 | 	sub	ptr___system__dat__, #36
01190     70 1C B0 FD | 	call	#__system__strncpy
01194     48 0C 06 F1 | 	add	local02, #72
01198     06 19 0A FB | 	rdlong	local08, local02 wz
0119c     48 0C 86 F1 | 	sub	local02, #72
011a0     7C 00 90 AD |  if_e	jmp	#LR__0143
011a4     48 0C 06 F1 | 	add	local02, #72
011a8     06 19 02 FB | 	rdlong	local08, local02
011ac     0C 1D 02 F6 | 	mov	local10, local08
011b0     13 18 46 F7 | 	zerox	local08, #19
011b4     14 1C 46 F0 | 	shr	local10, #20
011b8     02 1C 66 F0 | 	shl	local10, #2
011bc     ED 1C 02 F1 | 	add	local10, __methods__
011c0     0E 1D 02 FB | 	rdlong	local10, local10
011c4     0D 01 02 F6 | 	mov	arg01, local09
011c8     F1 1E 02 F6 | 	mov	local11, objptr
011cc     0C E3 01 F6 | 	mov	objptr, local08
011d0     2D 1C 62 FD | 	call	local10
011d4     0F E3 01 F6 | 	mov	objptr, local11
011d8     F5 00 0A F6 | 	mov	arg01, result1 wz
011dc     40 00 90 AD |  if_e	jmp	#LR__0142
011e0     09 19 02 F6 | 	mov	local08, local05
011e4     02 18 66 F0 | 	shl	local08, #2
011e8     74 E4 05 F1 | 	add	ptr___system__dat__, #116
011ec     F2 18 02 F1 | 	add	local08, ptr___system__dat__
011f0     0C 01 68 FC | 	wrlong	#0, local08
011f4     02 12 66 F0 | 	shl	local05, #2
011f8     10 E4 85 F1 | 	sub	ptr___system__dat__, #16
011fc     F2 12 02 F1 | 	add	local05, ptr___system__dat__
01200     09 01 68 FC | 	wrlong	#0, local05
01204     00 01 6A F6 | 	neg	arg01, arg01 wz
01208     44 E4 85 F1 | 	sub	ptr___system__dat__, #68
0120c     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
01210     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
01214     01 EA 65 56 |  if_ne	neg	result1, #1
01218     00 EA 05 A6 |  if_e	mov	result1, #0
0121c     18 00 90 FD | 	jmp	#LR__0145
01220                 | LR__0142
01220                 | LR__0143
01220     02 12 66 F0 | 	shl	local05, #2
01224     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01228     F2 12 02 F1 | 	add	local05, ptr___system__dat__
0122c     09 1B 62 FC | 	wrlong	local09, local05
01230     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01234                 | LR__0144
01234     00 EA 05 F6 | 	mov	result1, #0
01238                 | LR__0145
01238     A7 F0 03 F6 | 	mov	ptra, fp
0123c     B2 00 A0 FD | 	call	#popregs_
01240                 | __system___mount_ret
01240     2D 00 64 FD | 	ret
01244                 | 
01244                 | __system___chdir
01244     00 4A 05 F6 | 	mov	COUNT_, #0
01248     A8 00 A0 FD | 	call	#pushregs_
0124c     40 F0 07 F1 | 	add	ptra, #64
01250     04 4E 05 F1 | 	add	fp, #4
01254     A7 00 62 FC | 	wrlong	arg01, fp
01258     04 4E 05 F1 | 	add	fp, #4
0125c     A7 02 02 F6 | 	mov	arg02, fp
01260     08 4E 85 F1 | 	sub	fp, #8
01264     A8 19 B0 FD | 	call	#__system__stat
01268     3C 4E 05 F1 | 	add	fp, #60
0126c     A7 EA 61 FC | 	wrlong	result1, fp
01270     3C 4E 85 F1 | 	sub	fp, #60
01274     00 EA 0D F2 | 	cmp	result1, #0 wz
01278     3C 4E 05 51 |  if_ne	add	fp, #60
0127c     A7 EA 01 5B |  if_ne	rdlong	result1, fp
01280     3C 4E 85 51 |  if_ne	sub	fp, #60
01284     BC 00 90 5D |  if_ne	jmp	#LR__0152
01288     10 4E 05 F1 | 	add	fp, #16
0128c     A7 00 02 FB | 	rdlong	arg01, fp
01290     10 4E 85 F1 | 	sub	fp, #16
01294     78 00 00 FF 
01298     00 00 06 F5 | 	and	arg01, ##61440
0129c     08 00 00 FF 
012a0     00 00 0E F2 | 	cmp	arg01, ##4096 wz
012a4     20 E4 05 51 |  if_ne	add	ptr___system__dat__, #32
012a8     F2 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
012ac     20 E4 85 51 |  if_ne	sub	ptr___system__dat__, #32
012b0     01 EA 65 56 |  if_ne	neg	result1, #1
012b4     8C 00 90 5D |  if_ne	jmp	#LR__0152
012b8     04 4E 05 F1 | 	add	fp, #4
012bc     A7 04 02 FB | 	rdlong	arg03, fp
012c0     04 4E 85 F1 | 	sub	fp, #4
012c4     02 05 C2 FA | 	rdbyte	arg03, arg03
012c8     2F 04 0E F2 | 	cmp	arg03, #47 wz
012cc     24 00 90 5D |  if_ne	jmp	#LR__0150
012d0     84 E4 05 F1 | 	add	ptr___system__dat__, #132
012d4     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
012d8     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
012dc     04 4E 05 F1 | 	add	fp, #4
012e0     A7 02 02 FB | 	rdlong	arg02, fp
012e4     04 4E 85 F1 | 	sub	fp, #4
012e8     00 05 06 F6 | 	mov	arg03, #256
012ec     14 1B B0 FD | 	call	#__system__strncpy
012f0     4C 00 90 FD | 	jmp	#LR__0151
012f4                 | LR__0150
012f4     84 E5 05 F1 | 	add	ptr___system__dat__, #388
012f8     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
012fc     38 4E 05 F1 | 	add	fp, #56
01300     A7 00 62 FC | 	wrlong	arg01, fp
01304     38 4E 85 F1 | 	sub	fp, #56
01308     00 E5 85 F1 | 	sub	ptr___system__dat__, #256
0130c     F2 02 02 F6 | 	mov	arg02, ptr___system__dat__
01310     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
01314     00 05 06 F6 | 	mov	arg03, #256
01318     E8 1A B0 FD | 	call	#__system__strncpy
0131c     38 4E 05 F1 | 	add	fp, #56
01320     A7 00 02 FB | 	rdlong	arg01, fp
01324     34 4E 85 F1 | 	sub	fp, #52
01328     A7 02 02 FB | 	rdlong	arg02, fp
0132c     04 4E 85 F1 | 	sub	fp, #4
01330     84 E4 05 F1 | 	add	ptr___system__dat__, #132
01334     F2 04 02 F6 | 	mov	arg03, ptr___system__dat__
01338     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
0133c     10 00 B0 FD | 	call	#__system____getvfsforfile
01340                 | LR__0151
01340     00 EA 05 F6 | 	mov	result1, #0
01344                 | LR__0152
01344     A7 F0 03 F6 | 	mov	ptra, fp
01348     B2 00 A0 FD | 	call	#popregs_
0134c                 | __system___chdir_ret
0134c     2D 00 64 FD | 	ret
01350                 | 
01350                 | __system____getvfsforfile
01350     0E 4A 05 F6 | 	mov	COUNT_, #14
01354     A8 00 A0 FD | 	call	#pushregs_
01358     00 0B 02 F6 | 	mov	local01, arg01
0135c     01 0D 02 F6 | 	mov	local02, arg02
01360     02 0F 02 F6 | 	mov	local03, arg03
01364     97 10 48 FB | 	callpa	#(@LR__0161-@LR__0160)>>2,fcache_load_ptr_
01368                 | LR__0160
01368     06 EB C1 FA | 	rdbyte	result1, local02
0136c     2F EA 0D F2 | 	cmp	result1, #47 wz
01370     01 0C 06 A1 |  if_e	add	local02, #1
01374     06 11 C2 AA |  if_e	rdbyte	local04, local02
01378     01 0C 86 A1 |  if_e	sub	local02, #1
0137c     2F 10 0E A2 |  if_e	cmp	local04, #47 wz
01380     01 0C 06 A1 |  if_e	add	local02, #1
01384     E0 FF 9F AD |  if_e	jmp	#LR__0160
01388                 | LR__0161
01388     06 11 C2 FA | 	rdbyte	local04, local02
0138c     2F 10 0E F2 | 	cmp	local04, #47 wz
01390     14 00 90 5D |  if_ne	jmp	#LR__0162
01394     05 01 02 F6 | 	mov	arg01, local01
01398     06 03 02 F6 | 	mov	arg02, local02
0139c     00 05 06 F6 | 	mov	arg03, #256
013a0     60 1A B0 FD | 	call	#__system__strncpy
013a4     7C 00 90 FD | 	jmp	#LR__0164
013a8                 | LR__0162
013a8     84 E4 05 F1 | 	add	ptr___system__dat__, #132
013ac     F2 02 02 F6 | 	mov	arg02, ptr___system__dat__
013b0     84 E4 85 F1 | 	sub	ptr___system__dat__, #132
013b4     05 01 02 F6 | 	mov	arg01, local01
013b8     00 05 06 F6 | 	mov	arg03, #256
013bc     44 1A B0 FD | 	call	#__system__strncpy
013c0     06 11 CA FA | 	rdbyte	local04, local02 wz
013c4     5C 00 90 AD |  if_e	jmp	#LR__0163
013c8     06 11 C2 FA | 	rdbyte	local04, local02
013cc     2E 10 0E F2 | 	cmp	local04, #46 wz
013d0     01 0C 06 A1 |  if_e	add	local02, #1
013d4     06 13 C2 AA |  if_e	rdbyte	local05, local02
013d8     01 0C 86 A1 |  if_e	sub	local02, #1
013dc     09 15 02 A6 |  if_e	mov	local06, local05
013e0     07 14 4E A7 |  if_e	zerox	local06, #7 wz
013e4     3C 00 90 AD |  if_e	jmp	#LR__0163
013e8     05 13 C2 FA | 	rdbyte	local05, local01
013ec     2F 12 0E F2 | 	cmp	local05, #47 wz
013f0     01 0A 06 A1 |  if_e	add	local01, #1
013f4     05 11 C2 AA |  if_e	rdbyte	local04, local01
013f8     01 0A 86 A1 |  if_e	sub	local01, #1
013fc     00 10 4E A2 |  if_e	cmps	local04, #0 wz
01400     62 00 00 5F 
01404     6C 03 06 56 |  if_ne	mov	arg02, ##@LR__1630
01408     05 01 02 56 |  if_ne	mov	arg01, local01
0140c     00 05 06 56 |  if_ne	mov	arg03, #256
01410     3C 1A B0 5D |  if_ne	call	#__system__strncat
01414     05 01 02 F6 | 	mov	arg01, local01
01418     06 03 02 F6 | 	mov	arg02, local02
0141c     00 05 06 F6 | 	mov	arg03, #256
01420     2C 1A B0 FD | 	call	#__system__strncat
01424                 | LR__0163
01424                 | LR__0164
01424     05 01 02 F6 | 	mov	arg01, local01
01428     E4 1B B0 FD | 	call	#__system___normalizeName
0142c     05 11 CA FA | 	rdbyte	local04, local01 wz
01430     1C 00 90 AD |  if_e	jmp	#LR__0165
01434     05 11 C2 FA | 	rdbyte	local04, local01
01438     2F 10 0E F2 | 	cmp	local04, #47 wz
0143c     01 0A 06 A1 |  if_e	add	local01, #1
01440     05 15 C2 AA |  if_e	rdbyte	local06, local01
01444     01 0A 86 A1 |  if_e	sub	local01, #1
01448     00 14 4E A2 |  if_e	cmps	local06, #0 wz
0144c     18 00 90 5D |  if_ne	jmp	#LR__0166
01450                 | LR__0165
01450     01 00 00 FF 
01454     84 E4 05 F1 | 	add	ptr___system__dat__, ##644
01458     F2 EA 01 F6 | 	mov	result1, ptr___system__dat__
0145c     01 00 00 FF 
01460     84 E4 85 F1 | 	sub	ptr___system__dat__, ##644
01464     EC 01 90 FD | 	jmp	#LR__0180
01468                 | LR__0166
01468     00 16 06 F6 | 	mov	local07, #0
0146c                 | LR__0167
0146c     04 16 56 F2 | 	cmps	local07, #4 wc
01470     CC 01 90 3D |  if_ae	jmp	#LR__0179
01474     0B 15 02 F6 | 	mov	local06, local07
01478     02 14 66 F0 | 	shl	local06, #2
0147c     64 E4 05 F1 | 	add	ptr___system__dat__, #100
01480     F2 14 02 F1 | 	add	local06, ptr___system__dat__
01484     0A 15 0A FB | 	rdlong	local06, local06 wz
01488     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
0148c     A8 01 90 AD |  if_e	jmp	#LR__0178
01490     0B 11 02 F6 | 	mov	local04, local07
01494     02 10 66 F0 | 	shl	local04, #2
01498     64 E4 05 F1 | 	add	ptr___system__dat__, #100
0149c     F2 10 02 F1 | 	add	local04, ptr___system__dat__
014a0     08 01 02 FB | 	rdlong	arg01, local04
014a4     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
014a8     00 19 02 F6 | 	mov	local08, arg01
014ac     97 06 48 FB | 	callpa	#(@LR__0169-@LR__0168)>>2,fcache_load_ptr_
014b0                 | LR__0168
014b0     0C EB C9 FA | 	rdbyte	result1, local08 wz
014b4     01 18 06 51 |  if_ne	add	local08, #1
014b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0168
014bc                 | LR__0169
014bc     00 19 82 F1 | 	sub	local08, arg01
014c0     0C 1B 02 F6 | 	mov	local09, local08
014c4     0D 11 02 F6 | 	mov	local04, local09
014c8     05 11 02 F1 | 	add	local04, local01
014cc     08 15 C2 FA | 	rdbyte	local06, local04
014d0     2F 14 0E F2 | 	cmp	local06, #47 wz
014d4     0D 1D 02 56 |  if_ne	mov	local10, local09
014d8     05 1D 02 51 |  if_ne	add	local10, local01
014dc     0E 13 CA 5A |  if_ne	rdbyte	local05, local10 wz
014e0     54 01 90 5D |  if_ne	jmp	#LR__0177
014e4     0B 05 02 F6 | 	mov	arg03, local07
014e8     02 04 66 F0 | 	shl	arg03, #2
014ec     64 E4 05 F1 | 	add	ptr___system__dat__, #100
014f0     F2 04 02 F1 | 	add	arg03, ptr___system__dat__
014f4     02 03 02 FB | 	rdlong	arg02, arg03
014f8     0D 05 02 F6 | 	mov	arg03, local09
014fc     05 01 02 F6 | 	mov	arg01, local01
01500     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
01504     A8 19 B0 FD | 	call	#__system__strncmp
01508     00 EA 4D F2 | 	cmps	result1, #0 wz
0150c     28 01 90 5D |  if_ne	jmp	#LR__0177
01510     0B 1F 02 F6 | 	mov	local11, local07
01514     02 1E 66 F0 | 	shl	local11, #2
01518     74 E4 05 F1 | 	add	ptr___system__dat__, #116
0151c     F2 1E 02 F1 | 	add	local11, ptr___system__dat__
01520     0F 21 02 FB | 	rdlong	local12, local11
01524     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
01528     97 22 48 FB | 	callpa	#(@LR__0171-@LR__0170)>>2,fcache_load_ptr_
0152c                 | LR__0170
0152c     0D 15 02 F6 | 	mov	local06, local09
01530     01 14 06 F1 | 	add	local06, #1
01534     05 15 02 F1 | 	add	local06, local01
01538     0A 1F C2 FA | 	rdbyte	local11, local06
0153c     2E 1E 0E F2 | 	cmp	local11, #46 wz
01540     2C 00 90 5D |  if_ne	jmp	#LR__0172
01544     0D 1F 02 F6 | 	mov	local11, local09
01548     02 1E 06 F1 | 	add	local11, #2
0154c     05 1F 02 F1 | 	add	local11, local01
01550     0F 1D C2 FA | 	rdbyte	local10, local11
01554     2F 1C 0E F2 | 	cmp	local10, #47 wz
01558     0D 23 02 56 |  if_ne	mov	local13, local09
0155c     02 22 06 51 |  if_ne	add	local13, #2
01560     05 23 02 51 |  if_ne	add	local13, local01
01564     11 25 CA 5A |  if_ne	rdbyte	local14, local13 wz
01568     01 1A 06 A1 |  if_e	add	local09, #1
0156c     BC FF 9F AD |  if_e	jmp	#LR__0170
01570                 | LR__0171
01570                 | LR__0172
01570     00 0E 0E F2 | 	cmp	local03, #0 wz
01574     07 01 02 56 |  if_ne	mov	arg01, local03
01578     05 03 02 56 |  if_ne	mov	arg02, local01
0157c     00 05 06 56 |  if_ne	mov	arg03, #256
01580     80 18 B0 5D |  if_ne	call	#__system__strncpy
01584     05 03 02 F6 | 	mov	arg02, local01
01588     0D 03 02 F1 | 	add	arg02, local09
0158c     01 02 06 F1 | 	add	arg02, #1
01590     05 01 02 F6 | 	mov	arg01, local01
01594     E4 F7 BF FD | 	call	#__system____builtin_strcpy
01598     05 01 02 F6 | 	mov	arg01, local01
0159c     00 19 02 F6 | 	mov	local08, arg01
015a0     97 06 48 FB | 	callpa	#(@LR__0174-@LR__0173)>>2,fcache_load_ptr_
015a4                 | LR__0173
015a4     0C EB C9 FA | 	rdbyte	result1, local08 wz
015a8     01 18 06 51 |  if_ne	add	local08, #1
015ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0173
015b0                 | LR__0174
015b0     00 19 82 F1 | 	sub	local08, arg01
015b4     0C 1B 02 F6 | 	mov	local09, local08
015b8                 | LR__0175
015b8     01 1A 56 F2 | 	cmps	local09, #1 wc
015bc     70 00 90 CD |  if_b	jmp	#LR__0176
015c0     0D 11 02 F6 | 	mov	local04, local09
015c4     05 11 02 F1 | 	add	local04, local01
015c8     08 1F C2 FA | 	rdbyte	local11, local04
015cc     2F 1E 0E F2 | 	cmp	local11, #47 wz
015d0     0D 1F 02 A6 |  if_e	mov	local11, local09
015d4     05 1F 02 A1 |  if_e	add	local11, local01
015d8     0F 01 48 AC |  if_e	wrbyte	#0, local11
015dc     01 1A 86 A1 |  if_e	sub	local09, #1
015e0     D4 FF 9F AD |  if_e	jmp	#LR__0175
015e4     0D 11 02 F6 | 	mov	local04, local09
015e8     05 11 02 F1 | 	add	local04, local01
015ec     08 1F C2 FA | 	rdbyte	local11, local04
015f0     2E 1E 0E F2 | 	cmp	local11, #46 wz
015f4     38 00 90 5D |  if_ne	jmp	#LR__0176
015f8     02 1A 56 F2 | 	cmps	local09, #2 wc
015fc     30 00 90 CD |  if_b	jmp	#LR__0176
01600     0D 25 02 F6 | 	mov	local14, local09
01604     01 24 86 F1 | 	sub	local14, #1
01608     05 25 02 F1 | 	add	local14, local01
0160c     12 13 C2 FA | 	rdbyte	local05, local14
01610     2F 12 0E F2 | 	cmp	local05, #47 wz
01614     18 00 90 5D |  if_ne	jmp	#LR__0176
01618     0D 11 02 F6 | 	mov	local04, local09
0161c     01 10 86 F1 | 	sub	local04, #1
01620     05 11 02 F1 | 	add	local04, local01
01624     08 01 48 FC | 	wrbyte	#0, local04
01628     02 1A 86 F1 | 	sub	local09, #2
0162c     88 FF 9F FD | 	jmp	#LR__0175
01630                 | LR__0176
01630     10 EB 01 F6 | 	mov	result1, local12
01634     1C 00 90 FD | 	jmp	#LR__0180
01638                 | LR__0177
01638                 | LR__0178
01638     01 16 06 F1 | 	add	local07, #1
0163c     2C FE 9F FD | 	jmp	#LR__0167
01640                 | LR__0179
01640     03 00 00 FF 
01644     28 E5 05 F1 | 	add	ptr___system__dat__, ##1832
01648     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
0164c     03 00 00 FF 
01650     28 E5 85 F1 | 	sub	ptr___system__dat__, ##1832
01654                 | LR__0180
01654     A7 F0 03 F6 | 	mov	ptra, fp
01658     B2 00 A0 FD | 	call	#popregs_
0165c                 | __system____getvfsforfile_ret
0165c     2D 00 64 FD | 	ret
01660                 | 
01660                 | __system___basic_open_string
01660     04 4A 05 F6 | 	mov	COUNT_, #4
01664     A8 00 A0 FD | 	call	#pushregs_
01668     01 0B 02 F6 | 	mov	local01, arg02
0166c     02 0D 02 F6 | 	mov	local02, arg03
01670     68 17 B0 FD | 	call	#__system____getftab
01674     F5 0E 0A F6 | 	mov	local03, result1 wz
01678     18 00 90 5D |  if_ne	jmp	#LR__0190
0167c     EE 00 02 F6 | 	mov	arg01, abortchain
01680     0C 02 06 F6 | 	mov	arg02, #12
01684     01 04 06 F6 | 	mov	arg03, #1
01688     DA 00 A0 FD | 	call	#__longjmp
0168c     01 EA 65 F6 | 	neg	result1, #1
01690     58 00 90 FD | 	jmp	#LR__0192
01694                 | LR__0190
01694     08 0E 06 F1 | 	add	local03, #8
01698     07 07 0A FB | 	rdlong	arg04, local03 wz
0169c     08 0E 86 F1 | 	sub	local03, #8
016a0     07 01 02 56 |  if_ne	mov	arg01, local03
016a4     F0 0F B0 5D |  if_ne	call	#__system___closeraw
016a8     05 03 02 F6 | 	mov	arg02, local01
016ac     06 05 02 F6 | 	mov	arg03, local02
016b0     07 01 02 F6 | 	mov	arg01, local03
016b4     B6 07 06 F6 | 	mov	arg04, #438
016b8     D8 0C B0 FD | 	call	#__system___openraw
016bc     F5 10 02 F6 | 	mov	local04, result1
016c0     00 10 56 F2 | 	cmps	local04, #0 wc
016c4     20 00 90 3D |  if_ae	jmp	#LR__0191
016c8     20 E4 05 F1 | 	add	ptr___system__dat__, #32
016cc     F2 02 02 FB | 	rdlong	arg02, ptr___system__dat__
016d0     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
016d4     EE 00 02 F6 | 	mov	arg01, abortchain
016d8     01 04 06 F6 | 	mov	arg03, #1
016dc     DA 00 A0 FD | 	call	#__longjmp
016e0     01 EA 65 F6 | 	neg	result1, #1
016e4     04 00 90 FD | 	jmp	#LR__0192
016e8                 | LR__0191
016e8     08 EB 01 F6 | 	mov	result1, local04
016ec                 | LR__0192
016ec     A7 F0 03 F6 | 	mov	ptra, fp
016f0     B2 00 A0 FD | 	call	#popregs_
016f4                 | __system___basic_open_string_ret
016f4     2D 00 64 FD | 	ret
016f8                 | 
016f8                 | __system___basic_print_char
016f8     03 4A 05 F6 | 	mov	COUNT_, #3
016fc     A8 00 A0 FD | 	call	#pushregs_
01700     01 0B 02 F6 | 	mov	local01, arg02
01704     04 1C B0 FD | 	call	#__system___gettxfunc
01708     F5 0C 0A F6 | 	mov	local02, result1 wz
0170c     00 EA 05 A6 |  if_e	mov	result1, #0
01710     30 00 90 AD |  if_e	jmp	#LR__0200
01714     06 0F 02 F6 | 	mov	local03, local02
01718     13 0C 46 F7 | 	zerox	local02, #19
0171c     14 0E 46 F0 | 	shr	local03, #20
01720     02 0E 66 F0 | 	shl	local03, #2
01724     ED 0E 02 F1 | 	add	local03, __methods__
01728     07 0F 02 FB | 	rdlong	local03, local03
0172c     05 01 02 F6 | 	mov	arg01, local01
01730     F1 0A 02 F6 | 	mov	local01, objptr
01734     06 E3 01 F6 | 	mov	objptr, local02
01738     2D 0E 62 FD | 	call	local03
0173c     05 E3 01 F6 | 	mov	objptr, local01
01740     01 EA 05 F6 | 	mov	result1, #1
01744                 | LR__0200
01744     A7 F0 03 F6 | 	mov	ptra, fp
01748     B2 00 A0 FD | 	call	#popregs_
0174c                 | __system___basic_print_char_ret
0174c     2D 00 64 FD | 	ret
01750                 | 
01750                 | __system___basic_print_string
01750     03 4A 05 F6 | 	mov	COUNT_, #3
01754     A8 00 A0 FD | 	call	#pushregs_
01758     01 0B 02 F6 | 	mov	local01, arg02
0175c     02 0D 02 F6 | 	mov	local02, arg03
01760     A8 1B B0 FD | 	call	#__system___gettxfunc
01764     F5 0E 0A F6 | 	mov	local03, result1 wz
01768     00 EA 05 A6 |  if_e	mov	result1, #0
0176c     18 00 90 AD |  if_e	jmp	#LR__0210
01770     00 0A 0E F2 | 	cmp	local01, #0 wz
01774     00 EA 05 A6 |  if_e	mov	result1, #0
01778     07 01 02 56 |  if_ne	mov	arg01, local03
0177c     06 03 02 56 |  if_ne	mov	arg02, local02
01780     05 05 02 56 |  if_ne	mov	arg03, local01
01784     A4 00 B0 5D |  if_ne	call	#__system___fmtstr
01788                 | LR__0210
01788     A7 F0 03 F6 | 	mov	ptra, fp
0178c     B2 00 A0 FD | 	call	#popregs_
01790                 | __system___basic_print_string_ret
01790     2D 00 64 FD | 	ret
01794                 | 
01794                 | __system___basic_print_integer
01794     04 4A 05 F6 | 	mov	COUNT_, #4
01798     A8 00 A0 FD | 	call	#pushregs_
0179c     01 0B 02 F6 | 	mov	local01, arg02
017a0     02 0D 02 F6 | 	mov	local02, arg03
017a4     03 0F 02 F6 | 	mov	local03, arg04
017a8     60 1B B0 FD | 	call	#__system___gettxfunc
017ac     F5 10 0A F6 | 	mov	local04, result1 wz
017b0     00 EA 05 A6 |  if_e	mov	result1, #0
017b4     08 01 02 56 |  if_ne	mov	arg01, local04
017b8     06 03 02 56 |  if_ne	mov	arg02, local02
017bc     05 05 02 56 |  if_ne	mov	arg03, local01
017c0     07 07 02 56 |  if_ne	mov	arg04, local03
017c4     50 01 B0 5D |  if_ne	call	#__system___fmtnum
017c8     A7 F0 03 F6 | 	mov	ptra, fp
017cc     B2 00 A0 FD | 	call	#popregs_
017d0                 | __system___basic_print_integer_ret
017d0     2D 00 64 FD | 	ret
017d4                 | 
017d4                 | __system___fmtchar
017d4     00 4A 05 F6 | 	mov	COUNT_, #0
017d8     A8 00 A0 FD | 	call	#pushregs_
017dc     10 F0 07 F1 | 	add	ptra, #16
017e0     04 4E 05 F1 | 	add	fp, #4
017e4     A7 00 62 FC | 	wrlong	arg01, fp
017e8     04 4E 05 F1 | 	add	fp, #4
017ec     A7 02 62 FC | 	wrlong	arg02, fp
017f0     04 4E 05 F1 | 	add	fp, #4
017f4     A7 04 62 FC | 	wrlong	arg03, fp
017f8     02 05 E2 F8 | 	getbyte	arg03, arg03, #0
017fc     A7 04 62 FC | 	wrlong	arg03, fp
01800     08 4E 85 F1 | 	sub	fp, #8
01804     A7 00 02 FB | 	rdlong	arg01, fp
01808     04 4E 05 F1 | 	add	fp, #4
0180c     A7 02 02 FB | 	rdlong	arg02, fp
01810     04 4E 05 F1 | 	add	fp, #4
01814     A7 04 02 F6 | 	mov	arg03, fp
01818     0C 4E 85 F1 | 	sub	fp, #12
0181c     0C 00 B0 FD | 	call	#__system___fmtstr
01820     A7 F0 03 F6 | 	mov	ptra, fp
01824     B2 00 A0 FD | 	call	#popregs_
01828                 | __system___fmtchar_ret
01828     2D 00 64 FD | 	ret
0182c                 | 
0182c                 | __system___fmtstr
0182c     09 4A 05 F6 | 	mov	COUNT_, #9
01830     A8 00 A0 FD | 	call	#pushregs_
01834     00 0B 02 F6 | 	mov	local01, arg01
01838     01 0D 02 F6 | 	mov	local02, arg02
0183c     02 0F 02 F6 | 	mov	local03, arg03
01840     06 07 E2 F8 | 	getbyte	arg04, local02, #0
01844     07 01 02 F6 | 	mov	arg01, local03
01848     00 11 02 F6 | 	mov	local04, arg01
0184c     97 06 48 FB | 	callpa	#(@LR__0221-@LR__0220)>>2,fcache_load_ptr_
01850                 | LR__0220
01850     08 EB C9 FA | 	rdbyte	result1, local04 wz
01854     01 10 06 51 |  if_ne	add	local04, #1
01858     F4 FF 9F 5D |  if_ne	jmp	#LR__0220
0185c                 | LR__0221
0185c     00 11 82 F1 | 	sub	local04, arg01
01860     00 06 0E F2 | 	cmp	arg04, #0 wz
01864     03 11 7A 53 |  if_ne	fles	local04, arg04 wcz
01868     06 03 02 F6 | 	mov	arg02, local02
0186c     08 05 02 F6 | 	mov	arg03, local04
01870     05 01 02 F6 | 	mov	arg01, local01
01874     02 06 06 F6 | 	mov	arg04, #2
01878     54 19 B0 FD | 	call	#__system___fmtpad
0187c     F5 12 02 F6 | 	mov	local05, result1
01880     00 12 56 F2 | 	cmps	local05, #0 wc
01884     09 EB 01 C6 |  if_b	mov	result1, local05
01888     80 00 90 CD |  if_b	jmp	#LR__0224
0188c     01 10 56 F2 | 	cmps	local04, #1 wc
01890     50 00 90 CD |  if_b	jmp	#LR__0223
01894     08 15 02 F6 | 	mov	local06, local04
01898                 | LR__0222
01898     05 17 02 F6 | 	mov	local07, local01
0189c     05 19 02 F6 | 	mov	local08, local01
018a0     13 16 46 F7 | 	zerox	local07, #19
018a4     14 18 46 F0 | 	shr	local08, #20
018a8     02 18 66 F0 | 	shl	local08, #2
018ac     ED 18 02 F1 | 	add	local08, __methods__
018b0     0C 19 02 FB | 	rdlong	local08, local08
018b4     07 01 C2 FA | 	rdbyte	arg01, local03
018b8     F1 1A 02 F6 | 	mov	local09, objptr
018bc     0B E3 01 F6 | 	mov	objptr, local07
018c0     01 0E 06 F1 | 	add	local03, #1
018c4     2D 18 62 FD | 	call	local08
018c8     0D E3 01 F6 | 	mov	objptr, local09
018cc     F5 1A 02 F6 | 	mov	local09, result1
018d0     00 1A 56 F2 | 	cmps	local09, #0 wc
018d4     0D EB 01 C6 |  if_b	mov	result1, local09
018d8     30 00 90 CD |  if_b	jmp	#LR__0224
018dc     0D 13 02 F1 | 	add	local05, local09
018e0     ED 15 6E FB | 	djnz	local06, #LR__0222
018e4                 | LR__0223
018e4     06 03 02 F6 | 	mov	arg02, local02
018e8     08 05 02 F6 | 	mov	arg03, local04
018ec     05 01 02 F6 | 	mov	arg01, local01
018f0     01 06 06 F6 | 	mov	arg04, #1
018f4     D8 18 B0 FD | 	call	#__system___fmtpad
018f8     F5 1A 02 F6 | 	mov	local09, result1
018fc     00 1A 56 F2 | 	cmps	local09, #0 wc
01900     0D EB 01 C6 |  if_b	mov	result1, local09
01904     0D 13 02 31 |  if_ae	add	local05, local09
01908     09 EB 01 36 |  if_ae	mov	result1, local05
0190c                 | LR__0224
0190c     A7 F0 03 F6 | 	mov	ptra, fp
01910     B2 00 A0 FD | 	call	#popregs_
01914                 | __system___fmtstr_ret
01914     2D 00 64 FD | 	ret
01918                 | 
01918                 | __system___fmtnum
01918     0B 4A 05 F6 | 	mov	COUNT_, #11
0191c     A8 00 A0 FD | 	call	#pushregs_
01920     00 0B 02 F6 | 	mov	local01, arg01
01924     01 0D 02 F6 | 	mov	local02, arg02
01928     02 0F 02 F6 | 	mov	local03, arg03
0192c     03 11 02 F6 | 	mov	local04, arg04
01930     F8 13 02 F6 | 	mov	local05, ptra
01934     09 15 02 F6 | 	mov	local06, local05
01938     00 16 06 F6 | 	mov	local07, #0
0193c     06 19 02 F6 | 	mov	local08, local02
01940     10 18 46 F0 | 	shr	local08, #16
01944     3F 18 06 F5 | 	and	local08, #63
01948     06 1B E2 F8 | 	getbyte	local09, local02, #0
0194c     06 1D 02 F6 | 	mov	local10, local02
01950     1A 1C 46 F0 | 	shr	local10, #26
01954     03 1C 06 F5 | 	and	local10, #3
01958     0E 1F 02 F6 | 	mov	local11, local10
0195c     01 18 56 F2 | 	cmps	local08, #1 wc
01960     44 F0 07 F1 | 	add	ptra, #68
01964     01 18 86 31 |  if_ae	sub	local08, #1
01968     41 1A 56 F2 | 	cmps	local09, #65 wc
0196c     00 1A 0E C2 |  if_b	cmp	local09, #0 wz
01970     40 1A 06 B6 |  if_nc_or_z	mov	local09, #64
01974     03 1E 0E F2 | 	cmp	local11, #3 wz
01978     00 1E 06 A6 |  if_e	mov	local11, #0
0197c     00 0E 56 52 |  if_ne	cmps	local03, #0 wc
01980     04 1E 06 46 |  if_c_and_nz	mov	local11, #4
01984     07 0F 62 46 |  if_c_and_nz	neg	local03, local03
01988     00 1E 0E F2 | 	cmp	local11, #0 wz
0198c     4C 00 90 AD |  if_e	jmp	#LR__0233
01990     01 16 06 F6 | 	mov	local07, #1
01994     0D 19 0A F2 | 	cmp	local08, local09 wz
01998     18 00 90 5D |  if_ne	jmp	#LR__0231
0199c     05 18 6E FB | 	djnz	local08, #LR__0230
019a0     05 01 02 F6 | 	mov	arg01, local01
019a4     06 03 02 F6 | 	mov	arg02, local02
019a8     23 04 06 F6 | 	mov	arg03, #35
019ac     24 FE BF FD | 	call	#__system___fmtchar
019b0     88 00 90 FD | 	jmp	#LR__0237
019b4                 | LR__0230
019b4                 | LR__0231
019b4     02 1E 0E F2 | 	cmp	local11, #2 wz
019b8     0A 1D 02 A6 |  if_e	mov	local10, local06
019bc     01 14 06 A1 |  if_e	add	local06, #1
019c0     0E 41 48 AC |  if_e	wrbyte	#32, local10
019c4     14 00 90 AD |  if_e	jmp	#LR__0232
019c8     04 1E 0E F2 | 	cmp	local11, #4 wz
019cc     0A 5B 48 AC |  if_e	wrbyte	#45, local06
019d0     01 14 06 A1 |  if_e	add	local06, #1
019d4     0A 57 48 5C |  if_ne	wrbyte	#43, local06
019d8     01 14 06 51 |  if_ne	add	local06, #1
019dc                 | LR__0232
019dc                 | LR__0233
019dc     0A 01 02 F6 | 	mov	arg01, local06
019e0     07 03 02 F6 | 	mov	arg02, local03
019e4     08 05 02 F6 | 	mov	arg03, local04
019e8     0C 07 02 F6 | 	mov	arg04, local08
019ec     00 08 06 F6 | 	mov	arg05, #0
019f0     1D 0C 2E F4 | 	testbn	local02, #29 wz
019f4     01 08 06 56 |  if_ne	mov	arg05, #1
019f8     9C 18 B0 FD | 	call	#__system___uitoa
019fc     F5 16 02 F1 | 	add	local07, result1
01a00     0D 17 5A F2 | 	cmps	local07, local09 wcz
01a04     24 00 90 ED |  if_be	jmp	#LR__0236
01a08     97 0E 48 FB | 	callpa	#(@LR__0235-@LR__0234)>>2,fcache_load_ptr_
01a0c                 | LR__0234
01a0c     0D 1D 02 F6 | 	mov	local10, local09
01a10     01 1C 56 F2 | 	cmps	local10, #1 wc
01a14     01 1A 86 F1 | 	sub	local09, #1
01a18     0A 1D 02 36 |  if_ae	mov	local10, local06
01a1c     01 14 06 31 |  if_ae	add	local06, #1
01a20     0E 47 48 3C |  if_ae	wrbyte	#35, local10
01a24     E4 FF 9F 3D |  if_ae	jmp	#LR__0234
01a28                 | LR__0235
01a28     0A 01 48 FC | 	wrbyte	#0, local06
01a2c                 | LR__0236
01a2c     05 01 02 F6 | 	mov	arg01, local01
01a30     06 03 02 F6 | 	mov	arg02, local02
01a34     09 05 02 F6 | 	mov	arg03, local05
01a38     F0 FD BF FD | 	call	#__system___fmtstr
01a3c                 | LR__0237
01a3c     A7 F0 03 F6 | 	mov	ptra, fp
01a40     B2 00 A0 FD | 	call	#popregs_
01a44                 | __system___fmtnum_ret
01a44     2D 00 64 FD | 	ret
01a48                 | 
01a48                 | __system___strerror
01a48     00 00 56 F2 | 	cmps	arg01, #0 wc
01a4c     08 00 90 CD |  if_b	jmp	#LR__0240
01a50     1A 00 56 F2 | 	cmps	arg01, #26 wc
01a54     04 00 90 CD |  if_b	jmp	#LR__0241
01a58                 | LR__0240
01a58     19 00 06 F6 | 	mov	arg01, #25
01a5c                 | LR__0241
01a5c     02 00 66 F0 | 	shl	arg01, #2
01a60     01 00 00 FF 
01a64     D8 E4 05 F1 | 	add	ptr___system__dat__, ##728
01a68     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
01a6c     00 EB 01 FB | 	rdlong	result1, arg01
01a70     01 00 00 FF 
01a74     D8 E4 85 F1 | 	sub	ptr___system__dat__, ##728
01a78                 | __system___strerror_ret
01a78     2D 00 64 FD | 	ret
01a7c                 | 
01a7c                 | __system___int64_shl
01a7c     20 04 CE F7 | 	test	arg03, #32 wz
01a80     00 03 02 56 |  if_ne	mov	arg02, arg01
01a84     00 00 06 56 |  if_ne	mov	arg01, #0
01a88     1F 04 CE F7 | 	test	arg03, #31 wz
01a8c     18 00 90 AD |  if_e	jmp	#LR__0250
01a90     02 03 62 F0 | 	shl	arg02, arg03
01a94     00 EB 01 F6 | 	mov	result1, arg01
01a98     02 ED 61 F6 | 	neg	result2, arg03
01a9c     F6 EA 41 F0 | 	shr	result1, result2
01aa0     F5 02 42 F5 | 	or	arg02, result1
01aa4     02 01 62 F0 | 	shl	arg01, arg03
01aa8                 | LR__0250
01aa8     01 ED 01 F6 | 	mov	result2, arg02
01aac     00 EB 01 F6 | 	mov	result1, arg01
01ab0                 | __system___int64_shl_ret
01ab0     2D 00 64 FD | 	ret
01ab4                 | 
01ab4                 | __system___usepins
01ab4     14 E4 05 F1 | 	add	ptr___system__dat__, #20
01ab8     F2 EE 01 FB | 	rdlong	_var01, ptr___system__dat__
01abc     14 E4 85 F1 | 	sub	ptr___system__dat__, #20
01ac0     F7 00 CA F7 | 	test	arg01, _var01 wz
01ac4     18 E4 05 A1 |  if_e	add	ptr___system__dat__, #24
01ac8     F2 F0 01 AB |  if_e	rdlong	_var02, ptr___system__dat__
01acc     18 E4 85 A1 |  if_e	sub	ptr___system__dat__, #24
01ad0     F8 02 CA A7 |  if_e	test	arg02, _var02 wz
01ad4     00 EA 05 56 |  if_ne	mov	result1, #0
01ad8     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
01adc     14 E4 05 F1 | 	add	ptr___system__dat__, #20
01ae0     F2 F0 01 FB | 	rdlong	_var02, ptr___system__dat__
01ae4     00 F1 41 F5 | 	or	_var02, arg01
01ae8     F2 F0 61 FC | 	wrlong	_var02, ptr___system__dat__
01aec     04 E4 05 F1 | 	add	ptr___system__dat__, #4
01af0     F2 F0 01 FB | 	rdlong	_var02, ptr___system__dat__
01af4     01 F1 41 F5 | 	or	_var02, arg02
01af8     F2 F0 61 FC | 	wrlong	_var02, ptr___system__dat__
01afc     18 E4 85 F1 | 	sub	ptr___system__dat__, #24
01b00     01 EA 65 F6 | 	neg	result1, #1
01b04                 | __system___usepins_ret
01b04     2D 00 64 FD | 	ret
01b08                 | 
01b08                 | __system___freepins
01b08     14 E4 05 F1 | 	add	ptr___system__dat__, #20
01b0c     F2 EE 01 FB | 	rdlong	_var01, ptr___system__dat__
01b10     00 EF 21 F5 | 	andn	_var01, arg01
01b14     F2 EE 61 FC | 	wrlong	_var01, ptr___system__dat__
01b18     04 E4 05 F1 | 	add	ptr___system__dat__, #4
01b1c     F2 EE 01 FB | 	rdlong	_var01, ptr___system__dat__
01b20     01 EF 21 F5 | 	andn	_var01, arg02
01b24     F2 EE 61 FC | 	wrlong	_var01, ptr___system__dat__
01b28     18 E4 85 F1 | 	sub	ptr___system__dat__, #24
01b2c                 | __system___freepins_ret
01b2c     2D 00 64 FD | 	ret
01b30                 | 
01b30                 | __system___gc_ptrs
01b30     EC EE 01 F6 | 	mov	_var01, __heap_ptr
01b34     F7 F0 01 F6 | 	mov	_var02, _var01
01b38     0B 00 00 FF 
01b3c     68 F1 05 F1 | 	add	_var02, ##5992
01b40     F7 EC 09 FB | 	rdlong	result2, _var01 wz
01b44     74 00 90 5D |  if_ne	jmp	#LR__0260
01b48     F8 EC 01 F6 | 	mov	result2, _var02
01b4c     F7 EC 81 F1 | 	sub	result2, _var01
01b50     F7 02 58 FC | 	wrword	#1, _var01
01b54     F7 EA 01 F6 | 	mov	result1, _var01
01b58     02 EA 05 F1 | 	add	result1, #2
01b5c     36 00 80 FF 
01b60     F5 20 59 FC | 	wrword	##27792, result1
01b64     F7 EA 01 F6 | 	mov	result1, _var01
01b68     04 EA 05 F1 | 	add	result1, #4
01b6c     F5 00 58 FC | 	wrword	#0, result1
01b70     F7 EA 01 F6 | 	mov	result1, _var01
01b74     06 EA 05 F1 | 	add	result1, #6
01b78     F5 02 58 FC | 	wrword	#1, result1
01b7c     10 EE 05 F1 | 	add	_var01, #16
01b80     F6 EC 51 F6 | 	abs	result2, result2 wc
01b84     04 EC 45 F0 | 	shr	result2, #4
01b88     F6 EC 81 F6 | 	negc	result2, result2
01b8c     F7 EC 51 FC | 	wrword	result2, _var01
01b90     F7 EC 01 F6 | 	mov	result2, _var01
01b94     02 EC 05 F1 | 	add	result2, #2
01b98     36 00 80 FF 
01b9c     F6 1E 59 FC | 	wrword	##27791, result2
01ba0     F7 EC 01 F6 | 	mov	result2, _var01
01ba4     04 EC 05 F1 | 	add	result2, #4
01ba8     F6 00 58 FC | 	wrword	#0, result2
01bac     F7 EC 01 F6 | 	mov	result2, _var01
01bb0     06 EC 05 F1 | 	add	result2, #6
01bb4     F6 00 58 FC | 	wrword	#0, result2
01bb8     10 EE 85 F1 | 	sub	_var01, #16
01bbc                 | LR__0260
01bbc     F7 EA 01 F6 | 	mov	result1, _var01
01bc0     F8 EC 01 F6 | 	mov	result2, _var02
01bc4                 | __system___gc_ptrs_ret
01bc4     2D 00 64 FD | 	ret
01bc8                 | 
01bc8                 | __system___gc_tryalloc
01bc8     0B 4A 05 F6 | 	mov	COUNT_, #11
01bcc     A8 00 A0 FD | 	call	#pushregs_
01bd0     00 0B 02 F6 | 	mov	local01, arg01
01bd4     01 0D 02 F6 | 	mov	local02, arg02
01bd8     54 FF BF FD | 	call	#__system___gc_ptrs
01bdc     F5 0E 02 F6 | 	mov	local03, result1
01be0     F6 10 02 F6 | 	mov	local04, result2
01be4     07 13 02 F6 | 	mov	local05, local03
01be8     00 14 06 F6 | 	mov	local06, #0
01bec     97 1E 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
01bf0                 | LR__0270
01bf0     09 17 02 F6 | 	mov	local07, local05
01bf4     06 12 06 F1 | 	add	local05, #6
01bf8     09 03 EA FA | 	rdword	arg02, local05 wz
01bfc     07 01 02 F6 | 	mov	arg01, local03
01c00     00 EA 05 A6 |  if_e	mov	result1, #0
01c04     04 02 66 50 |  if_ne	shl	arg02, #4
01c08     01 01 02 51 |  if_ne	add	arg01, arg02
01c0c     00 EB 01 56 |  if_ne	mov	result1, arg01
01c10     F5 12 0A F6 | 	mov	local05, result1 wz
01c14     09 15 E2 5A |  if_ne	rdword	local06, local05
01c18     00 12 0E F2 | 	cmp	local05, #0 wz
01c1c     08 13 52 52 |  if_ne	cmps	local05, local04 wc
01c20     08 00 90 1D |  if_a	jmp	#LR__0272
01c24     0A 0B 5A 52 |  if_ne	cmps	local01, local06 wcz
01c28     C4 FF 9F 1D |  if_a	jmp	#LR__0270
01c2c                 | LR__0271
01c2c                 | LR__0272
01c2c     00 12 0E F2 | 	cmp	local05, #0 wz
01c30     09 EB 01 A6 |  if_e	mov	result1, local05
01c34     3C 01 90 AD |  if_e	jmp	#LR__0275
01c38     09 ED 01 F6 | 	mov	result2, local05
01c3c     06 EC 05 F1 | 	add	result2, #6
01c40     F6 18 E2 FA | 	rdword	local08, result2
01c44     0A 0B 52 F2 | 	cmps	local01, local06 wc
01c48     C0 00 90 3D |  if_ae	jmp	#LR__0274
01c4c     09 0B 52 FC | 	wrword	local01, local05
01c50     09 01 02 F6 | 	mov	arg01, local05
01c54     05 19 02 F6 | 	mov	local08, local01
01c58     04 18 66 F0 | 	shl	local08, #4
01c5c     0C 01 02 F1 | 	add	arg01, local08
01c60     05 15 82 F1 | 	sub	local06, local01
01c64     00 15 52 FC | 	wrword	local06, arg01
01c68     00 19 02 F6 | 	mov	local08, arg01
01c6c     02 18 06 F1 | 	add	local08, #2
01c70     36 00 80 FF 
01c74     0C 1F 59 FC | 	wrword	##27791, local08
01c78     09 03 0A F6 | 	mov	arg02, local05 wz
01c7c     00 EA 05 A6 |  if_e	mov	result1, #0
01c80     07 03 82 51 |  if_ne	sub	arg02, local03
01c84     04 02 46 50 |  if_ne	shr	arg02, #4
01c88     01 EB 01 56 |  if_ne	mov	result1, arg02
01c8c     00 19 02 F6 | 	mov	local08, arg01
01c90     04 18 06 F1 | 	add	local08, #4
01c94     0C EB 51 FC | 	wrword	result1, local08
01c98     09 19 02 F6 | 	mov	local08, local05
01c9c     06 18 06 F1 | 	add	local08, #6
01ca0     00 03 02 F6 | 	mov	arg02, arg01
01ca4     0C 19 E2 FA | 	rdword	local08, local08
01ca8     06 02 06 F1 | 	add	arg02, #6
01cac     01 19 52 FC | 	wrword	local08, arg02
01cb0     00 1B 02 F6 | 	mov	local09, arg01
01cb4     0D 03 0A F6 | 	mov	arg02, local09 wz
01cb8     00 EA 05 A6 |  if_e	mov	result1, #0
01cbc     07 03 82 51 |  if_ne	sub	arg02, local03
01cc0     04 02 46 50 |  if_ne	shr	arg02, #4
01cc4     01 EB 01 56 |  if_ne	mov	result1, arg02
01cc8     F5 18 02 F6 | 	mov	local08, result1
01ccc     00 1D EA FA | 	rdword	local10, arg01 wz
01cd0     00 EA 05 A6 |  if_e	mov	result1, #0
01cd4     04 1C 66 50 |  if_ne	shl	local10, #4
01cd8     0E 01 02 51 |  if_ne	add	arg01, local10
01cdc     00 EB 01 56 |  if_ne	mov	result1, arg01
01ce0     F5 1E 0A F6 | 	mov	local11, result1 wz
01ce4     24 00 90 AD |  if_e	jmp	#LR__0273
01ce8     08 1F 52 F2 | 	cmps	local11, local04 wc
01cec     1C 00 90 3D |  if_ae	jmp	#LR__0273
01cf0     0D 03 0A F6 | 	mov	arg02, local09 wz
01cf4     00 EA 05 A6 |  if_e	mov	result1, #0
01cf8     07 03 82 51 |  if_ne	sub	arg02, local03
01cfc     04 02 46 50 |  if_ne	shr	arg02, #4
01d00     01 EB 01 56 |  if_ne	mov	result1, arg02
01d04     04 1E 06 F1 | 	add	local11, #4
01d08     0F EB 51 FC | 	wrword	result1, local11
01d0c                 | LR__0273
01d0c                 | LR__0274
01d0c     06 16 06 F1 | 	add	local07, #6
01d10     0B 19 52 FC | 	wrword	local08, local07
01d14     36 00 00 FF 
01d18     80 1A 06 F6 | 	mov	local09, ##27776
01d1c     06 1B 42 F5 | 	or	local09, local02
01d20     00 EA 05 F6 | 	mov	result1, #0
01d24     01 EA 61 FD | 	cogid	result1
01d28     F5 1A 42 F5 | 	or	local09, result1
01d2c     09 1F 02 F6 | 	mov	local11, local05
01d30     02 1E 06 F1 | 	add	local11, #2
01d34     0F 1B 52 FC | 	wrword	local09, local11
01d38     07 1B 02 F6 | 	mov	local09, local03
01d3c     08 1A 06 F1 | 	add	local09, #8
01d40     09 1F 02 F6 | 	mov	local11, local05
01d44     0D 1B E2 FA | 	rdword	local09, local09
01d48     06 1E 06 F1 | 	add	local11, #6
01d4c     0F 1B 52 FC | 	wrword	local09, local11
01d50     09 03 0A F6 | 	mov	arg02, local05 wz
01d54     00 EA 05 A6 |  if_e	mov	result1, #0
01d58     07 03 82 51 |  if_ne	sub	arg02, local03
01d5c     04 02 46 50 |  if_ne	shr	arg02, #4
01d60     01 EB 01 56 |  if_ne	mov	result1, arg02
01d64     08 0E 06 F1 | 	add	local03, #8
01d68     07 EB 51 FC | 	wrword	result1, local03
01d6c     08 12 06 F1 | 	add	local05, #8
01d70     09 EB 01 F6 | 	mov	result1, local05
01d74                 | LR__0275
01d74     A7 F0 03 F6 | 	mov	ptra, fp
01d78     B2 00 A0 FD | 	call	#popregs_
01d7c                 | __system___gc_tryalloc_ret
01d7c     2D 00 64 FD | 	ret
01d80                 | 
01d80                 | __system___gc_alloc_managed
01d80     01 4A 05 F6 | 	mov	COUNT_, #1
01d84     A8 00 A0 FD | 	call	#pushregs_
01d88     00 0B 02 F6 | 	mov	local01, arg01
01d8c     00 02 06 F6 | 	mov	arg02, #0
01d90     1C 00 B0 FD | 	call	#__system___gc_doalloc
01d94     F5 02 0A F6 | 	mov	arg02, result1 wz
01d98     01 0A 56 A2 |  if_e	cmps	local01, #1 wc
01d9c     00 EA 05 26 |  if_nc_and_z	mov	result1, #0
01da0     01 EB 01 D6 |  if_c_or_nz	mov	result1, arg02
01da4     A7 F0 03 F6 | 	mov	ptra, fp
01da8     B2 00 A0 FD | 	call	#popregs_
01dac                 | __system___gc_alloc_managed_ret
01dac     2D 00 64 FD | 	ret
01db0                 | 
01db0                 | __system___gc_doalloc
01db0     06 4A 05 F6 | 	mov	COUNT_, #6
01db4     A8 00 A0 FD | 	call	#pushregs_
01db8     00 0B 0A F6 | 	mov	local01, arg01 wz
01dbc     01 0D 02 F6 | 	mov	local02, arg02
01dc0     00 EA 05 A6 |  if_e	mov	result1, #0
01dc4     8C 00 90 AD |  if_e	jmp	#LR__0287
01dc8     17 0A 06 F1 | 	add	local01, #23
01dcc     0F 0A 26 F5 | 	andn	local01, #15
01dd0     04 0A 46 F0 | 	shr	local01, #4
01dd4     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01dd8     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01ddc     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01de0     E4 EF BF FD | 	call	#__system___lockmem
01de4     05 01 02 F6 | 	mov	arg01, local01
01de8     06 03 02 F6 | 	mov	arg02, local02
01dec     D8 FD BF FD | 	call	#__system___gc_tryalloc
01df0     F5 0E 0A F6 | 	mov	local03, result1 wz
01df4     14 00 90 5D |  if_ne	jmp	#LR__0280
01df8     70 03 B0 FD | 	call	#__system___gc_docollect
01dfc     05 01 02 F6 | 	mov	arg01, local01
01e00     06 03 02 F6 | 	mov	arg02, local02
01e04     C0 FD BF FD | 	call	#__system___gc_tryalloc
01e08     F5 0E 02 F6 | 	mov	local03, result1
01e0c                 | LR__0280
01e0c     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01e10     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01e14     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01e18     00 01 68 FC | 	wrlong	#0, arg01
01e1c     00 0E 0E F2 | 	cmp	local03, #0 wz
01e20     2C 00 90 AD |  if_e	jmp	#LR__0286
01e24     04 0A 66 F0 | 	shl	local01, #4
01e28     08 0A 86 F1 | 	sub	local01, #8
01e2c     05 11 52 F6 | 	abs	local04, local01 wc
01e30     02 10 46 F0 | 	shr	local04, #2
01e34     08 13 8A F6 | 	negc	local05, local04 wz
01e38     07 15 02 F6 | 	mov	local06, local03
01e3c     10 00 90 AD |  if_e	jmp	#LR__0285
01e40     97 06 48 FB | 	callpa	#(@LR__0283-@LR__0281)>>2,fcache_load_ptr_
01e44                 | LR__0281
01e44     09 05 D8 FC | 	rep	@LR__0284, local05
01e48                 | LR__0282
01e48     0A 01 68 FC | 	wrlong	#0, local06
01e4c     04 14 06 F1 | 	add	local06, #4
01e50                 | LR__0283
01e50                 | LR__0284
01e50                 | LR__0285
01e50                 | LR__0286
01e50     07 EB 01 F6 | 	mov	result1, local03
01e54                 | LR__0287
01e54     A7 F0 03 F6 | 	mov	ptra, fp
01e58     B2 00 A0 FD | 	call	#popregs_
01e5c                 | __system___gc_doalloc_ret
01e5c     2D 00 64 FD | 	ret
01e60                 | 
01e60                 | __system___gc_isvalidptr
01e60     F8 04 06 F4 | 	bitl	arg03, #248
01e64     08 04 86 F1 | 	sub	arg03, #8
01e68     00 05 52 F2 | 	cmps	arg03, arg01 wc
01e6c     08 00 90 CD |  if_b	jmp	#LR__0290
01e70     01 05 52 F2 | 	cmps	arg03, arg02 wc
01e74     08 00 90 CD |  if_b	jmp	#LR__0291
01e78                 | LR__0290
01e78     00 EA 05 F6 | 	mov	result1, #0
01e7c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
01e80                 | LR__0291
01e80     02 EF 01 F6 | 	mov	_var01, arg03
01e84     00 EF 61 F5 | 	xor	_var01, arg01
01e88     0F EE CD F7 | 	test	_var01, #15 wz
01e8c     00 EA 05 56 |  if_ne	mov	result1, #0
01e90     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
01e94     02 EF 01 F6 | 	mov	_var01, arg03
01e98     02 EE 05 F1 | 	add	_var01, #2
01e9c     F7 EE E1 FA | 	rdword	_var01, _var01
01ea0     7F 00 00 FF 
01ea4     C0 EF 05 F5 | 	and	_var01, ##65472
01ea8     36 00 00 FF 
01eac     80 EE 0D F2 | 	cmp	_var01, ##27776 wz
01eb0     00 EA 05 56 |  if_ne	mov	result1, #0
01eb4     02 EB 01 A6 |  if_e	mov	result1, arg03
01eb8                 | __system___gc_isvalidptr_ret
01eb8     2D 00 64 FD | 	ret
01ebc                 | 
01ebc                 | __system___gc_free
01ebc     00 05 02 F6 | 	mov	arg03, arg01
01ec0     6C FC BF FD | 	call	#__system___gc_ptrs
01ec4     F5 00 02 F6 | 	mov	arg01, result1
01ec8     F6 02 02 F6 | 	mov	arg02, result2
01ecc     90 FF BF FD | 	call	#__system___gc_isvalidptr
01ed0     F5 02 0A F6 | 	mov	arg02, result1 wz
01ed4     28 00 90 AD |  if_e	jmp	#LR__0300
01ed8     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01edc     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01ee0     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01ee4     E0 EE BF FD | 	call	#__system___lockmem
01ee8     01 01 02 F6 | 	mov	arg01, arg02
01eec     14 00 B0 FD | 	call	#__system___gc_dofree
01ef0     1C E4 05 F1 | 	add	ptr___system__dat__, #28
01ef4     F2 00 02 F6 | 	mov	arg01, ptr___system__dat__
01ef8     1C E4 85 F1 | 	sub	ptr___system__dat__, #28
01efc     00 01 68 FC | 	wrlong	#0, arg01
01f00                 | LR__0300
01f00                 | __system___gc_free_ret
01f00     2D 00 64 FD | 	ret
01f04                 | 
01f04                 | __system___gc_dofree
01f04     06 4A 05 F6 | 	mov	COUNT_, #6
01f08     A8 00 A0 FD | 	call	#pushregs_
01f0c     00 0B 02 F6 | 	mov	local01, arg01
01f10     1C FC BF FD | 	call	#__system___gc_ptrs
01f14     F5 0C 02 F6 | 	mov	local02, result1
01f18     F6 0E 02 F6 | 	mov	local03, result2
01f1c     05 03 02 F6 | 	mov	arg02, local01
01f20     02 02 06 F1 | 	add	arg02, #2
01f24     36 00 80 FF 
01f28     01 1F 59 FC | 	wrword	##27791, arg02
01f2c     05 11 02 F6 | 	mov	local04, local01
01f30     05 01 02 F6 | 	mov	arg01, local01
01f34     00 13 EA FA | 	rdword	local05, arg01 wz
01f38     00 EA 05 A6 |  if_e	mov	result1, #0
01f3c     04 12 66 50 |  if_ne	shl	local05, #4
01f40     09 01 02 51 |  if_ne	add	arg01, local05
01f44     00 EB 01 56 |  if_ne	mov	result1, arg01
01f48     F5 14 02 F6 | 	mov	local06, result1
01f4c     97 24 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
01f50                 | LR__0310
01f50     04 10 06 F1 | 	add	local04, #4
01f54     08 03 EA FA | 	rdword	arg02, local04 wz
01f58     06 01 02 F6 | 	mov	arg01, local02
01f5c     00 EA 05 A6 |  if_e	mov	result1, #0
01f60     04 02 66 50 |  if_ne	shl	arg02, #4
01f64     01 01 02 51 |  if_ne	add	arg01, arg02
01f68     00 EB 01 56 |  if_ne	mov	result1, arg01
01f6c     F5 10 0A F6 | 	mov	local04, result1 wz
01f70     24 00 90 AD |  if_e	jmp	#LR__0312
01f74     08 01 02 F6 | 	mov	arg01, local04
01f78     00 EA 05 F6 | 	mov	result1, #0
01f7c     02 00 06 F1 | 	add	arg01, #2
01f80     00 01 E2 FA | 	rdword	arg01, arg01
01f84     36 00 00 FF 
01f88     8F 00 0E F2 | 	cmp	arg01, ##27791 wz
01f8c     01 EA 65 A6 |  if_e	neg	result1, #1
01f90     00 EA 0D F2 | 	cmp	result1, #0 wz
01f94     B8 FF 9F AD |  if_e	jmp	#LR__0310
01f98                 | LR__0311
01f98                 | LR__0312
01f98     00 10 0E F2 | 	cmp	local04, #0 wz
01f9c     06 11 02 A6 |  if_e	mov	local04, local02
01fa0     08 03 02 F6 | 	mov	arg02, local04
01fa4     06 02 06 F1 | 	add	arg02, #6
01fa8     05 01 02 F6 | 	mov	arg01, local01
01fac     01 03 E2 FA | 	rdword	arg02, arg02
01fb0     06 00 06 F1 | 	add	arg01, #6
01fb4     00 03 52 FC | 	wrword	arg02, arg01
01fb8     05 03 0A F6 | 	mov	arg02, local01 wz
01fbc     00 EA 05 A6 |  if_e	mov	result1, #0
01fc0     06 03 82 51 |  if_ne	sub	arg02, local02
01fc4     04 02 46 50 |  if_ne	shr	arg02, #4
01fc8     01 EB 01 56 |  if_ne	mov	result1, arg02
01fcc     08 03 02 F6 | 	mov	arg02, local04
01fd0     06 02 06 F1 | 	add	arg02, #6
01fd4     01 EB 51 FC | 	wrword	result1, arg02
01fd8     06 11 0A F2 | 	cmp	local04, local02 wz
01fdc     A4 00 90 AD |  if_e	jmp	#LR__0315
01fe0     08 01 02 F6 | 	mov	arg01, local04
01fe4     00 13 EA FA | 	rdword	local05, arg01 wz
01fe8     00 EA 05 A6 |  if_e	mov	result1, #0
01fec     04 12 66 50 |  if_ne	shl	local05, #4
01ff0     09 01 02 51 |  if_ne	add	arg01, local05
01ff4     00 EB 01 56 |  if_ne	mov	result1, arg01
01ff8     05 EB 09 F2 | 	cmp	result1, local01 wz
01ffc     84 00 90 5D |  if_ne	jmp	#LR__0314
02000     08 15 E2 FA | 	rdword	local06, local04
02004     05 03 E2 FA | 	rdword	arg02, local01
02008     01 15 02 F1 | 	add	local06, arg02
0200c     08 15 52 FC | 	wrword	local06, local04
02010     05 15 02 F6 | 	mov	local06, local01
02014     02 14 06 F1 | 	add	local06, #2
02018     0A 01 58 FC | 	wrword	#0, local06
0201c     05 01 02 F6 | 	mov	arg01, local01
02020     00 13 EA FA | 	rdword	local05, arg01 wz
02024     00 EA 05 A6 |  if_e	mov	result1, #0
02028     04 12 66 50 |  if_ne	shl	local05, #4
0202c     09 01 02 51 |  if_ne	add	arg01, local05
02030     00 EB 01 56 |  if_ne	mov	result1, arg01
02034     F5 14 02 F6 | 	mov	local06, result1
02038     07 15 52 F2 | 	cmps	local06, local03 wc
0203c     20 00 90 3D |  if_ae	jmp	#LR__0313
02040     08 03 0A F6 | 	mov	arg02, local04 wz
02044     00 EA 05 A6 |  if_e	mov	result1, #0
02048     06 03 82 51 |  if_ne	sub	arg02, local02
0204c     04 02 46 50 |  if_ne	shr	arg02, #4
02050     01 EB 01 56 |  if_ne	mov	result1, arg02
02054     0A 03 02 F6 | 	mov	arg02, local06
02058     04 02 06 F1 | 	add	arg02, #4
0205c     01 EB 51 FC | 	wrword	result1, arg02
02060                 | LR__0313
02060     05 03 02 F6 | 	mov	arg02, local01
02064     06 02 06 F1 | 	add	arg02, #6
02068     08 ED 01 F6 | 	mov	result2, local04
0206c     01 03 E2 FA | 	rdword	arg02, arg02
02070     06 EC 05 F1 | 	add	result2, #6
02074     F6 02 52 FC | 	wrword	arg02, result2
02078     06 0A 06 F1 | 	add	local01, #6
0207c     05 01 58 FC | 	wrword	#0, local01
02080     08 0B 02 F6 | 	mov	local01, local04
02084                 | LR__0314
02084                 | LR__0315
02084     05 01 02 F6 | 	mov	arg01, local01
02088     00 13 EA FA | 	rdword	local05, arg01 wz
0208c     00 EA 05 A6 |  if_e	mov	result1, #0
02090     04 12 66 50 |  if_ne	shl	local05, #4
02094     09 01 02 51 |  if_ne	add	arg01, local05
02098     00 EB 01 56 |  if_ne	mov	result1, arg01
0209c     F5 02 0A F6 | 	mov	arg02, result1 wz
020a0     B8 00 90 AD |  if_e	jmp	#LR__0317
020a4     07 03 52 F2 | 	cmps	arg02, local03 wc
020a8     B0 00 90 3D |  if_ae	jmp	#LR__0317
020ac     01 01 02 F6 | 	mov	arg01, arg02
020b0     00 EA 05 F6 | 	mov	result1, #0
020b4     02 00 06 F1 | 	add	arg01, #2
020b8     00 01 E2 FA | 	rdword	arg01, arg01
020bc     36 00 00 FF 
020c0     8F 00 0E F2 | 	cmp	arg01, ##27791 wz
020c4     01 EA 65 A6 |  if_e	neg	result1, #1
020c8     00 EA 0D F2 | 	cmp	result1, #0 wz
020cc     8C 00 90 AD |  if_e	jmp	#LR__0317
020d0     05 11 02 F6 | 	mov	local04, local01
020d4     08 15 E2 FA | 	rdword	local06, local04
020d8     01 01 02 F6 | 	mov	arg01, arg02
020dc     00 0B E2 FA | 	rdword	local01, arg01
020e0     05 15 02 F1 | 	add	local06, local01
020e4     08 15 52 FC | 	wrword	local06, local04
020e8     00 15 02 F6 | 	mov	local06, arg01
020ec     06 14 06 F1 | 	add	local06, #6
020f0     08 0B 02 F6 | 	mov	local01, local04
020f4     0A 15 E2 FA | 	rdword	local06, local06
020f8     06 0A 06 F1 | 	add	local01, #6
020fc     05 15 52 FC | 	wrword	local06, local01
02100     00 15 02 F6 | 	mov	local06, arg01
02104     02 14 06 F1 | 	add	local06, #2
02108     0A 55 59 FC | 	wrword	#170, local06
0210c     00 15 02 F6 | 	mov	local06, arg01
02110     06 14 06 F1 | 	add	local06, #6
02114     0A 01 58 FC | 	wrword	#0, local06
02118     00 13 EA FA | 	rdword	local05, arg01 wz
0211c     00 EA 05 A6 |  if_e	mov	result1, #0
02120     04 12 66 50 |  if_ne	shl	local05, #4
02124     09 01 02 51 |  if_ne	add	arg01, local05
02128     00 EB 01 56 |  if_ne	mov	result1, arg01
0212c     F5 14 0A F6 | 	mov	local06, result1 wz
02130     28 00 90 AD |  if_e	jmp	#LR__0316
02134     07 15 52 F2 | 	cmps	local06, local03 wc
02138     20 00 90 3D |  if_ae	jmp	#LR__0316
0213c     08 03 0A F6 | 	mov	arg02, local04 wz
02140     00 EA 05 A6 |  if_e	mov	result1, #0
02144     06 03 82 51 |  if_ne	sub	arg02, local02
02148     04 02 46 50 |  if_ne	shr	arg02, #4
0214c     01 EB 01 56 |  if_ne	mov	result1, arg02
02150     0A 11 02 F6 | 	mov	local04, local06
02154     04 10 06 F1 | 	add	local04, #4
02158     08 EB 51 FC | 	wrword	result1, local04
0215c                 | LR__0316
0215c                 | LR__0317
0215c     0A EB 01 F6 | 	mov	result1, local06
02160     A7 F0 03 F6 | 	mov	ptra, fp
02164     B2 00 A0 FD | 	call	#popregs_
02168                 | __system___gc_dofree_ret
02168     2D 00 64 FD | 	ret
0216c                 | 
0216c                 | __system___gc_docollect
0216c     05 4A 05 F6 | 	mov	COUNT_, #5
02170     A8 00 A0 FD | 	call	#pushregs_
02174     B8 F9 BF FD | 	call	#__system___gc_ptrs
02178     F6 0A 02 F6 | 	mov	local01, result2
0217c     F5 0C 02 F6 | 	mov	local02, result1
02180     06 01 02 F6 | 	mov	arg01, local02
02184     00 0F EA FA | 	rdword	local03, arg01 wz
02188     00 EA 05 A6 |  if_e	mov	result1, #0
0218c     04 0E 66 50 |  if_ne	shl	local03, #4
02190     07 01 02 51 |  if_ne	add	arg01, local03
02194     00 EB 01 56 |  if_ne	mov	result1, arg01
02198     F5 10 0A F6 | 	mov	local04, result1 wz
0219c     00 EA 05 F6 | 	mov	result1, #0
021a0     01 EA 61 FD | 	cogid	result1
021a4     F5 12 02 F6 | 	mov	local05, result1
021a8     48 00 90 AD |  if_e	jmp	#LR__0322
021ac     97 22 48 FB | 	callpa	#(@LR__0321-@LR__0320)>>2,fcache_load_ptr_
021b0                 | LR__0320
021b0     05 11 52 F2 | 	cmps	local04, local01 wc
021b4     3C 00 90 3D |  if_ae	jmp	#LR__0322
021b8     08 03 02 F6 | 	mov	arg02, local04
021bc     02 02 06 F1 | 	add	arg02, #2
021c0     01 03 E2 FA | 	rdword	arg02, arg02
021c4     20 02 26 F5 | 	andn	arg02, #32
021c8     08 01 02 F6 | 	mov	arg01, local04
021cc     02 00 06 F1 | 	add	arg01, #2
021d0     00 03 52 FC | 	wrword	arg02, arg01
021d4     08 01 02 F6 | 	mov	arg01, local04
021d8     00 0F EA FA | 	rdword	local03, arg01 wz
021dc     00 EA 05 A6 |  if_e	mov	result1, #0
021e0     04 0E 66 50 |  if_ne	shl	local03, #4
021e4     07 01 02 51 |  if_ne	add	arg01, local03
021e8     00 EB 01 56 |  if_ne	mov	result1, arg01
021ec     F5 10 0A F6 | 	mov	local04, result1 wz
021f0     BC FF 9F 5D |  if_ne	jmp	#LR__0320
021f4                 | LR__0321
021f4                 | LR__0322
021f4     00 0E 06 F6 | 	mov	local03, #0
021f8     00 00 06 F6 | 	mov	arg01, #0
021fc     A0 EB BF FD | 	call	#__system____topofstack
02200     F5 02 02 F6 | 	mov	arg02, result1
02204     07 01 02 F6 | 	mov	arg01, local03
02208     90 00 B0 FD | 	call	#__system___gc_markhub
0220c     1C 01 B0 FD | 	call	#__system___gc_markcog
02210     06 01 02 F6 | 	mov	arg01, local02
02214     00 0F EA FA | 	rdword	local03, arg01 wz
02218     00 EA 05 A6 |  if_e	mov	result1, #0
0221c     04 0E 66 50 |  if_ne	shl	local03, #4
02220     07 01 02 51 |  if_ne	add	arg01, local03
02224     00 EB 01 56 |  if_ne	mov	result1, arg01
02228     F5 0C 0A F6 | 	mov	local02, result1 wz
0222c     60 00 90 AD |  if_e	jmp	#LR__0326
02230                 | LR__0323
02230     06 11 02 F6 | 	mov	local04, local02
02234     08 01 02 F6 | 	mov	arg01, local04
02238     00 0F EA FA | 	rdword	local03, arg01 wz
0223c     00 EA 05 A6 |  if_e	mov	result1, #0
02240     04 0E 66 50 |  if_ne	shl	local03, #4
02244     07 01 02 51 |  if_ne	add	arg01, local03
02248     00 EB 01 56 |  if_ne	mov	result1, arg01
0224c     F5 0C 02 F6 | 	mov	local02, result1
02250     08 03 02 F6 | 	mov	arg02, local04
02254     02 02 06 F1 | 	add	arg02, #2
02258     01 03 E2 FA | 	rdword	arg02, arg02
0225c     20 02 CE F7 | 	test	arg02, #32 wz
02260     10 02 CE A7 |  if_e	test	arg02, #16 wz
02264     1C 00 90 5D |  if_ne	jmp	#LR__0325
02268     01 03 42 F8 | 	getnib	arg02, arg02, #0
0226c     09 03 0A F2 | 	cmp	arg02, local05 wz
02270     0E 02 0E 52 |  if_ne	cmp	arg02, #14 wz
02274     0C 00 90 5D |  if_ne	jmp	#LR__0324
02278     08 01 02 F6 | 	mov	arg01, local04
0227c     84 FC BF FD | 	call	#__system___gc_dofree
02280     F5 0C 02 F6 | 	mov	local02, result1
02284                 | LR__0324
02284                 | LR__0325
02284     00 0C 0E F2 | 	cmp	local02, #0 wz
02288     05 0D 52 52 |  if_ne	cmps	local02, local01 wc
0228c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__0323
02290                 | LR__0326
02290     A7 F0 03 F6 | 	mov	ptra, fp
02294     B2 00 A0 FD | 	call	#popregs_
02298                 | __system___gc_docollect_ret
02298     2D 00 64 FD | 	ret
0229c                 | 
0229c                 | __system___gc_markhub
0229c     04 4A 05 F6 | 	mov	COUNT_, #4
022a0     A8 00 A0 FD | 	call	#pushregs_
022a4     00 0B 02 F6 | 	mov	local01, arg01
022a8     01 0D 02 F6 | 	mov	local02, arg02
022ac     80 F8 BF FD | 	call	#__system___gc_ptrs
022b0     F5 0E 02 F6 | 	mov	local03, result1
022b4     F6 10 02 F6 | 	mov	local04, result2
022b8                 | LR__0330
022b8     06 0B 52 F2 | 	cmps	local01, local02 wc
022bc     60 00 90 3D |  if_ae	jmp	#LR__0331
022c0     05 05 02 FB | 	rdlong	arg03, local01
022c4     04 0A 06 F1 | 	add	local01, #4
022c8     08 03 02 F6 | 	mov	arg02, local04
022cc     07 01 02 F6 | 	mov	arg01, local03
022d0     8C FB BF FD | 	call	#__system___gc_isvalidptr
022d4     F5 04 0A F6 | 	mov	arg03, result1 wz
022d8     DC FF 9F AD |  if_e	jmp	#LR__0330
022dc     02 01 02 F6 | 	mov	arg01, arg03
022e0     00 EA 05 F6 | 	mov	result1, #0
022e4     02 00 06 F1 | 	add	arg01, #2
022e8     00 01 E2 FA | 	rdword	arg01, arg01
022ec     36 00 00 FF 
022f0     8F 00 0E F2 | 	cmp	arg01, ##27791 wz
022f4     01 EA 65 A6 |  if_e	neg	result1, #1
022f8     00 EA 0D F2 | 	cmp	result1, #0 wz
022fc     B8 FF 9F 5D |  if_ne	jmp	#LR__0330
02300     02 ED 01 F6 | 	mov	result2, arg03
02304     02 EC 05 F1 | 	add	result2, #2
02308     F6 EC E1 FA | 	rdword	result2, result2
0230c     0F EC 25 F5 | 	andn	result2, #15
02310     2E EC 45 F5 | 	or	result2, #46
02314     02 04 06 F1 | 	add	arg03, #2
02318     02 ED 51 FC | 	wrword	result2, arg03
0231c     98 FF 9F FD | 	jmp	#LR__0330
02320                 | LR__0331
02320     A7 F0 03 F6 | 	mov	ptra, fp
02324     B2 00 A0 FD | 	call	#popregs_
02328                 | __system___gc_markhub_ret
02328     2D 00 64 FD | 	ret
0232c                 | 
0232c                 | __system___gc_markcog
0232c     04 4A 05 F6 | 	mov	COUNT_, #4
02330     A8 00 A0 FD | 	call	#pushregs_
02334     F8 F7 BF FD | 	call	#__system___gc_ptrs
02338     F5 0A 02 F6 | 	mov	local01, result1
0233c     F6 0C 02 F6 | 	mov	local02, result2
02340     EF 0F 06 F6 | 	mov	local03, #495
02344                 | LR__0340
02344                 | 	'.live	local03
02344     00 0E 96 F9 | 	alts	local03, #0
02348     07 11 02 F6 | 	mov	local04, local03
0234c     05 01 02 F6 | 	mov	arg01, local01
02350     06 03 02 F6 | 	mov	arg02, local02
02354     08 05 02 F6 | 	mov	arg03, local04
02358     04 FB BF FD | 	call	#__system___gc_isvalidptr
0235c     00 EA 0D F2 | 	cmp	result1, #0 wz
02360     18 00 90 AD |  if_e	jmp	#LR__0341
02364     F5 10 02 F6 | 	mov	local04, result1
02368     02 10 06 F1 | 	add	local04, #2
0236c     08 11 E2 FA | 	rdword	local04, local04
02370     20 10 46 F5 | 	or	local04, #32
02374     02 EA 05 F1 | 	add	result1, #2
02378     F5 10 52 FC | 	wrword	local04, result1
0237c                 | LR__0341
0237c     01 0E 86 F1 | 	sub	local03, #1
02380     00 0E 56 F2 | 	cmps	local03, #0 wc
02384     BC FF 9F 3D |  if_ae	jmp	#LR__0340
02388     A7 F0 03 F6 | 	mov	ptra, fp
0238c     B2 00 A0 FD | 	call	#popregs_
02390                 | __system___gc_markcog_ret
02390     2D 00 64 FD | 	ret
02394                 | 
02394                 | __system___openraw
02394     15 4A 05 F6 | 	mov	COUNT_, #21
02398     A8 00 A0 FD | 	call	#pushregs_
0239c     00 0B 02 F6 | 	mov	local01, arg01
023a0     01 0D 02 F6 | 	mov	local02, arg02
023a4     02 0F 02 F6 | 	mov	local03, arg03
023a8     03 11 02 F6 | 	mov	local04, arg04
023ac     04 12 06 F6 | 	mov	local05, #4
023b0     05 15 02 F6 | 	mov	local06, local01
023b4     00 16 06 F6 | 	mov	local07, #0
023b8     84 E5 05 F1 | 	add	ptr___system__dat__, #388
023bc     F2 18 02 F6 | 	mov	local08, ptr___system__dat__
023c0     0C 01 02 F6 | 	mov	arg01, local08
023c4     06 03 02 F6 | 	mov	arg02, local02
023c8     00 04 06 F6 | 	mov	arg03, #0
023cc     84 E5 85 F1 | 	sub	ptr___system__dat__, #388
023d0     7C EF BF FD | 	call	#__system____getvfsforfile
023d4     F5 1A 0A F6 | 	mov	local09, result1 wz
023d8     10 00 90 AD |  if_e	jmp	#LR__0350
023dc     20 1A 06 F1 | 	add	local09, #32
023e0     0D EB 09 FB | 	rdlong	result1, local09 wz
023e4     20 1A 86 F1 | 	sub	local09, #32
023e8     14 00 90 5D |  if_ne	jmp	#LR__0351
023ec                 | LR__0350
023ec     20 E4 05 F1 | 	add	ptr___system__dat__, #32
023f0     F2 20 68 FC | 	wrlong	#16, ptr___system__dat__
023f4     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
023f8     01 EA 65 F6 | 	neg	result1, #1
023fc     8C 02 90 FD | 	jmp	#LR__0364
02400                 | LR__0351
02400     0A 01 02 F6 | 	mov	arg01, local06
02404     00 02 06 F6 | 	mov	arg02, #0
02408     34 04 06 F6 | 	mov	arg03, #52
0240c     00 1D 02 F6 | 	mov	local10, arg01
02410     98 00 A0 FD | 	call	#\builtin_bytefill_
02414     20 1A 06 F1 | 	add	local09, #32
02418     0D 1F 02 FB | 	rdlong	local11, local09
0241c     0F 21 02 F6 | 	mov	local12, local11
02420     0F 23 02 F6 | 	mov	local13, local11
02424     20 1A 86 F1 | 	sub	local09, #32
02428     11 25 02 F6 | 	mov	local14, local13
0242c     13 20 46 F7 | 	zerox	local12, #19
02430     14 24 46 F0 | 	shr	local14, #20
02434     02 24 66 F0 | 	shl	local14, #2
02438     ED 24 02 F1 | 	add	local14, __methods__
0243c     12 25 02 FB | 	rdlong	local14, local14
02440     0A 27 02 F6 | 	mov	local15, local06
02444     0C 29 02 F6 | 	mov	local16, local08
02448     07 2B 02 F6 | 	mov	local17, local03
0244c     13 01 02 F6 | 	mov	arg01, local15
02450     14 03 02 F6 | 	mov	arg02, local16
02454     15 05 02 F6 | 	mov	arg03, local17
02458     F1 2C 02 F6 | 	mov	local18, objptr
0245c     10 E3 01 F6 | 	mov	objptr, local12
02460     2D 24 62 FD | 	call	local14
02464     16 E3 01 F6 | 	mov	objptr, local18
02468     F5 2E 0A F6 | 	mov	local19, result1 wz
0246c     04 0E CE 57 |  if_ne	test	local03, #4 wz
02470     58 00 90 AD |  if_e	jmp	#LR__0352
02474     24 1A 06 F1 | 	add	local09, #36
02478     0D 1F 02 FB | 	rdlong	local11, local09
0247c     0F 21 02 F6 | 	mov	local12, local11
02480     0F 23 02 F6 | 	mov	local13, local11
02484     24 1A 86 F1 | 	sub	local09, #36
02488     11 25 02 F6 | 	mov	local14, local13
0248c     13 20 46 F7 | 	zerox	local12, #19
02490     14 24 46 F0 | 	shr	local14, #20
02494     02 24 66 F0 | 	shl	local14, #2
02498     ED 24 02 F1 | 	add	local14, __methods__
0249c     12 25 02 FB | 	rdlong	local14, local14
024a0     0A 27 02 F6 | 	mov	local15, local06
024a4     0C 29 02 F6 | 	mov	local16, local08
024a8     08 2B 02 F6 | 	mov	local17, local04
024ac     13 01 02 F6 | 	mov	arg01, local15
024b0     14 03 02 F6 | 	mov	arg02, local16
024b4     15 05 02 F6 | 	mov	arg03, local17
024b8     F1 2C 02 F6 | 	mov	local18, objptr
024bc     10 E3 01 F6 | 	mov	objptr, local12
024c0     2D 24 62 FD | 	call	local14
024c4     16 E3 01 F6 | 	mov	objptr, local18
024c8     F5 2E 02 F6 | 	mov	local19, result1
024cc                 | LR__0352
024cc     00 2E 0E F2 | 	cmp	local19, #0 wz
024d0     8C 01 90 5D |  if_ne	jmp	#LR__0362
024d4     07 31 02 F6 | 	mov	local20, local03
024d8     03 30 0E F5 | 	and	local20, #3 wz
024dc     02 12 46 55 |  if_ne	or	local05, #2
024e0     01 30 0E F2 | 	cmp	local20, #1 wz
024e4     01 12 46 55 |  if_ne	or	local05, #1
024e8     20 0E CE F7 | 	test	local03, #32 wz
024ec     C0 12 46 55 |  if_ne	or	local05, #192
024f0     08 14 06 F1 | 	add	local06, #8
024f4     0A 13 62 FC | 	wrlong	local05, local06
024f8     0C 14 06 F1 | 	add	local06, #12
024fc     0A 33 0A FB | 	rdlong	local21, local06 wz
02500     14 14 86 F1 | 	sub	local06, #20
02504     18 00 90 5D |  if_ne	jmp	#LR__0353
02508     04 1A 06 F1 | 	add	local09, #4
0250c     0D 33 02 FB | 	rdlong	local21, local09
02510     04 1A 86 F1 | 	sub	local09, #4
02514     14 14 06 F1 | 	add	local06, #20
02518     0A 33 62 FC | 	wrlong	local21, local06
0251c     14 14 86 F1 | 	sub	local06, #20
02520                 | LR__0353
02520     18 14 06 F1 | 	add	local06, #24
02524     0A 33 0A FB | 	rdlong	local21, local06 wz
02528     18 14 86 F1 | 	sub	local06, #24
0252c     18 00 90 5D |  if_ne	jmp	#LR__0354
02530     08 1A 06 F1 | 	add	local09, #8
02534     0D 33 02 FB | 	rdlong	local21, local09
02538     08 1A 86 F1 | 	sub	local09, #8
0253c     18 14 06 F1 | 	add	local06, #24
02540     0A 33 62 FC | 	wrlong	local21, local06
02544     18 14 86 F1 | 	sub	local06, #24
02548                 | LR__0354
02548     24 14 06 F1 | 	add	local06, #36
0254c     0A 33 0A FB | 	rdlong	local21, local06 wz
02550     24 14 86 F1 | 	sub	local06, #36
02554     0D 33 02 AB |  if_e	rdlong	local21, local09
02558     24 14 06 A1 |  if_e	add	local06, #36
0255c     0A 33 62 AC |  if_e	wrlong	local21, local06
02560     24 14 86 A1 |  if_e	sub	local06, #36
02564     28 14 06 F1 | 	add	local06, #40
02568     0A 33 0A FB | 	rdlong	local21, local06 wz
0256c     28 14 86 F1 | 	sub	local06, #40
02570     18 00 90 5D |  if_ne	jmp	#LR__0355
02574     10 1A 06 F1 | 	add	local09, #16
02578     0D 33 02 FB | 	rdlong	local21, local09
0257c     10 1A 86 F1 | 	sub	local09, #16
02580     28 14 06 F1 | 	add	local06, #40
02584     0A 33 62 FC | 	wrlong	local21, local06
02588     28 14 86 F1 | 	sub	local06, #40
0258c                 | LR__0355
0258c     30 14 06 F1 | 	add	local06, #48
02590     0A 33 0A FB | 	rdlong	local21, local06 wz
02594     30 14 86 F1 | 	sub	local06, #48
02598     18 00 90 5D |  if_ne	jmp	#LR__0356
0259c     0C 1A 06 F1 | 	add	local09, #12
025a0     0D 33 02 FB | 	rdlong	local21, local09
025a4     0C 1A 86 F1 | 	sub	local09, #12
025a8     30 14 06 F1 | 	add	local06, #48
025ac     0A 33 62 FC | 	wrlong	local21, local06
025b0     30 14 86 F1 | 	sub	local06, #48
025b4                 | LR__0356
025b4     1C 14 06 F1 | 	add	local06, #28
025b8     0A 33 0A FB | 	rdlong	local21, local06 wz
025bc     1C 14 86 F1 | 	sub	local06, #28
025c0     1C 00 90 5D |  if_ne	jmp	#LR__0357
025c4     01 16 06 F6 | 	mov	local07, #1
025c8     F1 00 02 F6 | 	mov	arg01, objptr
025cc     00 48 00 FF 
025d0     00 00 46 F5 | 	or	arg01, ##9437184
025d4     1C 14 06 F1 | 	add	local06, #28
025d8     0A 01 62 FC | 	wrlong	arg01, local06
025dc     1C 14 86 F1 | 	sub	local06, #28
025e0                 | LR__0357
025e0     20 14 06 F1 | 	add	local06, #32
025e4     0A 33 0A FB | 	rdlong	local21, local06 wz
025e8     20 14 86 F1 | 	sub	local06, #32
025ec     1C 00 90 5D |  if_ne	jmp	#LR__0358
025f0     01 16 06 F6 | 	mov	local07, #1
025f4     F1 00 02 F6 | 	mov	arg01, objptr
025f8     00 50 00 FF 
025fc     00 00 46 F5 | 	or	arg01, ##10485760
02600     20 14 06 F1 | 	add	local06, #32
02604     0A 01 62 FC | 	wrlong	arg01, local06
02608     20 14 86 F1 | 	sub	local06, #32
0260c                 | LR__0358
0260c     2C 14 06 F1 | 	add	local06, #44
02610     0A 33 0A FB | 	rdlong	local21, local06 wz
02614     2C 14 86 F1 | 	sub	local06, #44
02618     44 00 90 5D |  if_ne	jmp	#LR__0361
0261c     14 1A 06 F1 | 	add	local09, #20
02620     0D 33 0A FB | 	rdlong	local21, local09 wz
02624     14 1A 86 F1 | 	sub	local09, #20
02628     18 00 90 AD |  if_e	jmp	#LR__0359
0262c     14 1A 06 F1 | 	add	local09, #20
02630     0D 33 02 FB | 	rdlong	local21, local09
02634     2C 14 06 F1 | 	add	local06, #44
02638     0A 33 62 FC | 	wrlong	local21, local06
0263c     2C 14 86 F1 | 	sub	local06, #44
02640     1C 00 90 FD | 	jmp	#LR__0360
02644                 | LR__0359
02644     01 16 06 F6 | 	mov	local07, #1
02648     F1 00 02 F6 | 	mov	arg01, objptr
0264c     00 58 00 FF 
02650     00 00 46 F5 | 	or	arg01, ##11534336
02654     2C 14 06 F1 | 	add	local06, #44
02658     0A 01 62 FC | 	wrlong	arg01, local06
0265c     2C 14 86 F1 | 	sub	local06, #44
02660                 | LR__0360
02660                 | LR__0361
02660                 | LR__0362
02660     00 16 0E F2 | 	cmp	local07, #0 wz
02664     0A 01 02 56 |  if_ne	mov	arg01, local06
02668     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
0266c     00 2E 0E F2 | 	cmp	local19, #0 wz
02670     00 00 06 A6 |  if_e	mov	arg01, #0
02674     10 00 90 5D |  if_ne	jmp	#LR__0363
02678     00 00 4E F2 | 	cmps	arg01, #0 wz
0267c     20 E4 05 F1 | 	add	ptr___system__dat__, #32
02680     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
02684     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
02688                 | LR__0363
02688     17 EB 01 F6 | 	mov	result1, local19
0268c                 | LR__0364
0268c     A7 F0 03 F6 | 	mov	ptra, fp
02690     B2 00 A0 FD | 	call	#popregs_
02694                 | __system___openraw_ret
02694     2D 00 64 FD | 	ret
02698                 | 
02698                 | __system___closeraw
02698     05 4A 05 F6 | 	mov	COUNT_, #5
0269c     A8 00 A0 FD | 	call	#pushregs_
026a0     00 0B 02 F6 | 	mov	local01, arg01
026a4     00 0C 06 F6 | 	mov	local02, #0
026a8     08 0A 06 F1 | 	add	local01, #8
026ac     05 EB 09 FB | 	rdlong	result1, local01 wz
026b0     08 0A 86 F1 | 	sub	local01, #8
026b4     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
026b8     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
026bc     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
026c0     01 EA 65 A6 |  if_e	neg	result1, #1
026c4     A8 00 90 AD |  if_e	jmp	#LR__0372
026c8     2C 0A 06 F1 | 	add	local01, #44
026cc     05 EB 09 FB | 	rdlong	result1, local01 wz
026d0     2C 0A 86 F1 | 	sub	local01, #44
026d4     38 00 90 AD |  if_e	jmp	#LR__0370
026d8     2C 0A 06 F1 | 	add	local01, #44
026dc     05 0F 02 FB | 	rdlong	local03, local01
026e0     07 11 02 F6 | 	mov	local04, local03
026e4     2C 0A 86 F1 | 	sub	local01, #44
026e8     13 10 46 F7 | 	zerox	local04, #19
026ec     14 0E 46 F0 | 	shr	local03, #20
026f0     02 0E 66 F0 | 	shl	local03, #2
026f4     ED 0E 02 F1 | 	add	local03, __methods__
026f8     07 0F 02 FB | 	rdlong	local03, local03
026fc     05 01 02 F6 | 	mov	arg01, local01
02700     F1 12 02 F6 | 	mov	local05, objptr
02704     08 E3 01 F6 | 	mov	objptr, local04
02708     2D 0E 62 FD | 	call	local03
0270c     09 E3 01 F6 | 	mov	objptr, local05
02710                 | LR__0370
02710     24 0A 06 F1 | 	add	local01, #36
02714     05 13 0A FB | 	rdlong	local05, local01 wz
02718     24 0A 86 F1 | 	sub	local01, #36
0271c     3C 00 90 AD |  if_e	jmp	#LR__0371
02720     24 0A 06 F1 | 	add	local01, #36
02724     05 0F 02 FB | 	rdlong	local03, local01
02728     07 11 02 F6 | 	mov	local04, local03
0272c     24 0A 86 F1 | 	sub	local01, #36
02730     13 10 46 F7 | 	zerox	local04, #19
02734     14 0E 46 F0 | 	shr	local03, #20
02738     02 0E 66 F0 | 	shl	local03, #2
0273c     ED 0E 02 F1 | 	add	local03, __methods__
02740     07 0F 02 FB | 	rdlong	local03, local03
02744     05 01 02 F6 | 	mov	arg01, local01
02748     F1 12 02 F6 | 	mov	local05, objptr
0274c     08 E3 01 F6 | 	mov	objptr, local04
02750     2D 0E 62 FD | 	call	local03
02754     09 E3 01 F6 | 	mov	objptr, local05
02758     F5 0C 02 F6 | 	mov	local02, result1
0275c                 | LR__0371
0275c     05 01 02 F6 | 	mov	arg01, local01
02760     00 02 06 F6 | 	mov	arg02, #0
02764     34 04 06 F6 | 	mov	arg03, #52
02768     98 00 A0 FD | 	call	#\builtin_bytefill_
0276c     06 EB 01 F6 | 	mov	result1, local02
02770                 | LR__0372
02770     A7 F0 03 F6 | 	mov	ptra, fp
02774     B2 00 A0 FD | 	call	#popregs_
02778                 | __system___closeraw_ret
02778     2D 00 64 FD | 	ret
0277c                 | 
0277c                 | __system___vfs_open_sdcardx
0277c     0B 4A 05 F6 | 	mov	COUNT_, #11
02780     A8 00 A0 FD | 	call	#pushregs_
02784     00 0F 02 F6 | 	mov	local03, arg01
02788     01 11 02 F6 | 	mov	local04, arg02
0278c     02 13 02 F6 | 	mov	local05, arg03
02790     03 15 02 F6 | 	mov	local06, arg04
02794     01 00 00 FF 
02798     24 00 06 F6 | 	mov	arg01, ##548
0279c     E0 F5 BF FD | 	call	#__system___gc_alloc_managed
027a0     F5 16 02 F6 | 	mov	local07, result1
027a4     01 00 00 FF 
027a8     34 00 06 F6 | 	mov	arg01, ##564
027ac     D0 F5 BF FD | 	call	#__system___gc_alloc_managed
027b0     F5 18 02 F6 | 	mov	local08, result1
027b4     07 07 02 F6 | 	mov	arg04, local03
027b8     1F 06 C6 F0 | 	sar	arg04, #31
027bc     07 05 02 F6 | 	mov	arg03, local03
027c0     01 00 06 F6 | 	mov	arg01, #1
027c4     00 02 06 F6 | 	mov	arg02, #0
027c8     B0 F2 BF FD | 	call	#__system___int64_shl
027cc     F5 0A 02 F6 | 	mov	local01, result1
027d0     F6 1A 02 F6 | 	mov	local09, result2
027d4     08 07 02 F6 | 	mov	arg04, local04
027d8     1F 06 C6 F0 | 	sar	arg04, #31
027dc     08 05 02 F6 | 	mov	arg03, local04
027e0     01 00 06 F6 | 	mov	arg01, #1
027e4     00 02 06 F6 | 	mov	arg02, #0
027e8     90 F2 BF FD | 	call	#__system___int64_shl
027ec     F5 0A 42 F5 | 	or	local01, result1
027f0     F6 1A 42 F5 | 	or	local09, result2
027f4     09 07 02 F6 | 	mov	arg04, local05
027f8     1F 06 C6 F0 | 	sar	arg04, #31
027fc     09 05 02 F6 | 	mov	arg03, local05
02800     01 00 06 F6 | 	mov	arg01, #1
02804     00 02 06 F6 | 	mov	arg02, #0
02808     70 F2 BF FD | 	call	#__system___int64_shl
0280c     F5 0A 42 F5 | 	or	local01, result1
02810     F6 1A 42 F5 | 	or	local09, result2
02814     0A 07 02 F6 | 	mov	arg04, local06
02818     1F 06 C6 F0 | 	sar	arg04, #31
0281c     0A 05 02 F6 | 	mov	arg03, local06
02820     01 00 06 F6 | 	mov	arg01, #1
02824     00 02 06 F6 | 	mov	arg02, #0
02828     50 F2 BF FD | 	call	#__system___int64_shl
0282c     0D 03 02 F6 | 	mov	arg02, local09
02830     F5 0A 42 F5 | 	or	local01, result1
02834     01 ED 41 F5 | 	or	result2, arg02
02838     F6 0C 02 F6 | 	mov	local02, result2
0283c     05 01 02 F6 | 	mov	arg01, local01
02840     06 03 02 F6 | 	mov	arg02, local02
02844     6C F2 BF FD | 	call	#__system___usepins
02848     00 EA 0D F2 | 	cmp	result1, #0 wz
0284c     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
02850     F2 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
02854     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
02858     00 EA 05 A6 |  if_e	mov	result1, #0
0285c     B4 00 90 AD |  if_e	jmp	#LR__0382
02860     05 1D 02 F6 | 	mov	local10, local01
02864     06 1B 02 F6 | 	mov	local09, local02
02868     01 00 00 FF 
0286c     08 16 06 F1 | 	add	local07, ##520
02870     0B 1D 62 FC | 	wrlong	local10, local07
02874     04 16 06 F1 | 	add	local07, #4
02878     0B 1B 62 FC | 	wrlong	local09, local07
0287c     01 00 00 FF 
02880     0C 16 86 F1 | 	sub	local07, ##524
02884     0A 09 02 F6 | 	mov	arg05, local06
02888     00 00 06 F6 | 	mov	arg01, #0
0288c     07 03 02 F6 | 	mov	arg02, local03
02890     08 05 02 F6 | 	mov	arg03, local04
02894     09 07 02 F6 | 	mov	arg04, local05
02898     F1 1C 02 F6 | 	mov	local10, objptr
0289c     0B E3 01 F6 | 	mov	objptr, local07
028a0     48 1A B0 FD | 	call	#_fatfs_cc_disk_setpins
028a4     0E E3 01 F6 | 	mov	objptr, local10
028a8     F5 1E 0A F6 | 	mov	local11, result1 wz
028ac     24 00 90 5D |  if_ne	jmp	#LR__0380
028b0     62 00 00 FF 
028b4     C0 03 06 F6 | 	mov	arg02, ##@LR__1634
028b8     0C 01 02 F6 | 	mov	arg01, local08
028bc     00 04 06 F6 | 	mov	arg03, #0
028c0     F1 1E 02 F6 | 	mov	local11, objptr
028c4     0B E3 01 F6 | 	mov	objptr, local07
028c8     78 51 B0 FD | 	call	#_fatfs_cc_f_mount
028cc     0F E3 01 F6 | 	mov	objptr, local11
028d0     F5 1E 02 F6 | 	mov	local11, result1
028d4                 | LR__0380
028d4     00 1E 0E F2 | 	cmp	local11, #0 wz
028d8     24 00 90 AD |  if_e	jmp	#LR__0381
028dc     05 01 02 F6 | 	mov	arg01, local01
028e0     06 03 02 F6 | 	mov	arg02, local02
028e4     20 F2 BF FD | 	call	#__system___freepins
028e8     0F 01 6A F6 | 	neg	arg01, local11 wz
028ec     20 E4 05 F1 | 	add	ptr___system__dat__, #32
028f0     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
028f4     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
028f8     00 EA 05 F6 | 	mov	result1, #0
028fc     14 00 90 FD | 	jmp	#LR__0382
02900                 | LR__0381
02900     0B 01 02 F6 | 	mov	arg01, local07
02904     F1 1E 02 F6 | 	mov	local11, objptr
02908     0B E3 01 F6 | 	mov	objptr, local07
0290c     14 8E B0 FD | 	call	#_fatfs_cc_get_vfs
02910     0F E3 01 F6 | 	mov	objptr, local11
02914                 | LR__0382
02914     A7 F0 03 F6 | 	mov	ptra, fp
02918     B2 00 A0 FD | 	call	#popregs_
0291c                 | __system___vfs_open_sdcardx_ret
0291c     2D 00 64 FD | 	ret
02920                 | 
02920                 | __system____default_getc
02920     03 4A 05 F6 | 	mov	COUNT_, #3
02924     A8 00 A0 FD | 	call	#pushregs_
02928     00 0B 02 F6 | 	mov	local01, arg01
0292c     05 0D 02 FB | 	rdlong	local02, local01
02930     08 0C 06 F1 | 	add	local02, #8
02934     06 0F 02 FB | 	rdlong	local03, local02
02938     02 0E CE F7 | 	test	local03, #2 wz
0293c     05 01 02 56 |  if_ne	mov	arg01, local01
02940     00 01 B0 5D |  if_ne	call	#__system____default_flush
02944     06 0F 02 FB | 	rdlong	local03, local02
02948     01 0E 46 F5 | 	or	local03, #1
0294c     06 0F 62 FC | 	wrlong	local03, local02
02950     08 0C 86 F1 | 	sub	local02, #8
02954     06 0F 0A FB | 	rdlong	local03, local02 wz
02958     0C 00 90 5D |  if_ne	jmp	#LR__0390
0295c     05 01 02 F6 | 	mov	arg01, local01
02960     98 0A B0 FD | 	call	#__system____default_filbuf
02964     F5 0E 02 F6 | 	mov	local03, result1
02968                 | LR__0390
02968     01 0E 56 F2 | 	cmps	local03, #1 wc
0296c     01 EA 65 C6 |  if_b	neg	result1, #1
02970     1C 00 90 CD |  if_b	jmp	#LR__0391
02974     01 0E 86 F1 | 	sub	local03, #1
02978     06 0F 62 FC | 	wrlong	local03, local02
0297c     04 0C 06 F1 | 	add	local02, #4
02980     06 0F 02 FB | 	rdlong	local03, local02
02984     07 EB C1 FA | 	rdbyte	result1, local03
02988     01 0E 06 F1 | 	add	local03, #1
0298c     06 0F 62 FC | 	wrlong	local03, local02
02990                 | LR__0391
02990     A7 F0 03 F6 | 	mov	ptra, fp
02994     B2 00 A0 FD | 	call	#popregs_
02998                 | __system____default_getc_ret
02998     2D 00 64 FD | 	ret
0299c                 | 
0299c                 | __system____default_putc
0299c     06 4A 05 F6 | 	mov	COUNT_, #6
029a0     A8 00 A0 FD | 	call	#pushregs_
029a4     00 0B 02 F6 | 	mov	local01, arg01
029a8     01 0D 02 F6 | 	mov	local02, arg02
029ac     06 0F 02 FB | 	rdlong	local03, local02
029b0     08 0E 06 F1 | 	add	local03, #8
029b4     07 EB 01 FB | 	rdlong	result1, local03
029b8     01 EA CD F7 | 	test	result1, #1 wz
029bc     06 01 02 56 |  if_ne	mov	arg01, local02
029c0     80 00 B0 5D |  if_ne	call	#__system____default_flush
029c4     07 11 02 FB | 	rdlong	local04, local03
029c8     02 10 46 F5 | 	or	local04, #2
029cc     07 11 62 FC | 	wrlong	local04, local03
029d0     08 0E 86 F1 | 	sub	local03, #8
029d4     07 13 02 FB | 	rdlong	local05, local03
029d8     10 0E 06 F1 | 	add	local03, #16
029dc     07 03 02 FB | 	rdlong	arg02, local03
029e0     10 0E 86 F1 | 	sub	local03, #16
029e4     09 EB 01 F6 | 	mov	result1, local05
029e8     01 EB 01 F1 | 	add	result1, arg02
029ec     F5 0A 42 FC | 	wrbyte	local01, result1
029f0     05 0B E2 F8 | 	getbyte	local01, local01, #0
029f4     01 12 06 F1 | 	add	local05, #1
029f8     07 13 62 FC | 	wrlong	local05, local03
029fc     06 0C 06 F1 | 	add	local02, #6
02a00     06 15 EA FA | 	rdword	local06, local02 wz
02a04     06 0C 86 F1 | 	sub	local02, #6
02a08     0C 0E 06 51 |  if_ne	add	local03, #12
02a0c     07 11 02 5B |  if_ne	rdlong	local04, local03
02a10     08 13 0A 52 |  if_ne	cmp	local05, local04 wz
02a14     0C 00 90 AD |  if_e	jmp	#LR__0400
02a18     0A 0A 0E F2 | 	cmp	local01, #10 wz
02a1c     01 14 0E A2 |  if_e	cmp	local06, #1 wz
02a20     10 00 90 5D |  if_ne	jmp	#LR__0401
02a24                 | LR__0400
02a24     06 01 02 F6 | 	mov	arg01, local02
02a28     18 00 B0 FD | 	call	#__system____default_flush
02a2c     00 EA 0D F2 | 	cmp	result1, #0 wz
02a30     01 0A 66 56 |  if_ne	neg	local01, #1
02a34                 | LR__0401
02a34     05 EB 01 F6 | 	mov	result1, local01
02a38     A7 F0 03 F6 | 	mov	ptra, fp
02a3c     B2 00 A0 FD | 	call	#popregs_
02a40                 | __system____default_putc_ret
02a40     2D 00 64 FD | 	ret
02a44                 | 
02a44                 | __system____default_flush
02a44     06 4A 05 F6 | 	mov	COUNT_, #6
02a48     A8 00 A0 FD | 	call	#pushregs_
02a4c     00 0B 02 F6 | 	mov	local01, arg01
02a50     05 0D 02 FB | 	rdlong	local02, local01
02a54     06 0F 02 FB | 	rdlong	local03, local02
02a58     08 0C 06 F1 | 	add	local02, #8
02a5c     06 EB 01 FB | 	rdlong	result1, local02
02a60     08 0C 86 F1 | 	sub	local02, #8
02a64     02 EA CD F7 | 	test	result1, #2 wz
02a68     D0 00 90 AD |  if_e	jmp	#LR__0412
02a6c     01 0E 56 F2 | 	cmps	local03, #1 wc
02a70     20 01 90 CD |  if_b	jmp	#LR__0414
02a74     08 0A 06 F1 | 	add	local01, #8
02a78     05 EB 01 FB | 	rdlong	result1, local01
02a7c     08 0A 86 F1 | 	sub	local01, #8
02a80     40 EA CD F7 | 	test	result1, #64 wz
02a84     68 00 90 AD |  if_e	jmp	#LR__0411
02a88     08 0A 06 F1 | 	add	local01, #8
02a8c     05 05 02 FB | 	rdlong	arg03, local01
02a90     08 0A 86 F1 | 	sub	local01, #8
02a94     80 04 CE F7 | 	test	arg03, #128 wz
02a98     54 00 90 AD |  if_e	jmp	#LR__0410
02a9c     30 0A 06 F1 | 	add	local01, #48
02aa0     05 11 02 FB | 	rdlong	local04, local01
02aa4     08 13 02 F6 | 	mov	local05, local04
02aa8     30 0A 86 F1 | 	sub	local01, #48
02aac     13 12 46 F7 | 	zerox	local05, #19
02ab0     14 10 46 F0 | 	shr	local04, #20
02ab4     02 10 66 F0 | 	shl	local04, #2
02ab8     ED 10 02 F1 | 	add	local04, __methods__
02abc     08 11 02 FB | 	rdlong	local04, local04
02ac0     05 01 02 F6 | 	mov	arg01, local01
02ac4     00 02 06 F6 | 	mov	arg02, #0
02ac8     02 04 06 F6 | 	mov	arg03, #2
02acc     F1 14 02 F6 | 	mov	local06, objptr
02ad0     09 E3 01 F6 | 	mov	objptr, local05
02ad4     2D 10 62 FD | 	call	local04
02ad8     0A E3 01 F6 | 	mov	objptr, local06
02adc     08 0A 06 F1 | 	add	local01, #8
02ae0     05 15 02 FB | 	rdlong	local06, local01
02ae4     80 14 26 F5 | 	andn	local06, #128
02ae8     05 15 62 FC | 	wrlong	local06, local01
02aec     08 0A 86 F1 | 	sub	local01, #8
02af0                 | LR__0410
02af0                 | LR__0411
02af0     18 0A 06 F1 | 	add	local01, #24
02af4     05 11 02 FB | 	rdlong	local04, local01
02af8     08 13 02 F6 | 	mov	local05, local04
02afc     18 0A 86 F1 | 	sub	local01, #24
02b00     13 12 46 F7 | 	zerox	local05, #19
02b04     14 10 46 F0 | 	shr	local04, #20
02b08     02 10 66 F0 | 	shl	local04, #2
02b0c     ED 10 02 F1 | 	add	local04, __methods__
02b10     08 11 02 FB | 	rdlong	local04, local04
02b14     10 0C 06 F1 | 	add	local02, #16
02b18     06 03 02 FB | 	rdlong	arg02, local02
02b1c     10 0C 86 F1 | 	sub	local02, #16
02b20     05 01 02 F6 | 	mov	arg01, local01
02b24     07 05 02 F6 | 	mov	arg03, local03
02b28     F1 14 02 F6 | 	mov	local06, objptr
02b2c     09 E3 01 F6 | 	mov	objptr, local05
02b30     2D 10 62 FD | 	call	local04
02b34     0A E3 01 F6 | 	mov	objptr, local06
02b38     58 00 90 FD | 	jmp	#LR__0414
02b3c                 | LR__0412
02b3c     08 0C 06 F1 | 	add	local02, #8
02b40     06 15 02 FB | 	rdlong	local06, local02
02b44     08 0C 86 F1 | 	sub	local02, #8
02b48     01 14 CE F7 | 	test	local06, #1 wz
02b4c     00 0E 0E 52 |  if_ne	cmp	local03, #0 wz
02b50     40 00 90 AD |  if_e	jmp	#LR__0413
02b54     30 0A 06 F1 | 	add	local01, #48
02b58     05 11 02 FB | 	rdlong	local04, local01
02b5c     08 13 02 F6 | 	mov	local05, local04
02b60     30 0A 86 F1 | 	sub	local01, #48
02b64     13 12 46 F7 | 	zerox	local05, #19
02b68     14 10 46 F0 | 	shr	local04, #20
02b6c     02 10 66 F0 | 	shl	local04, #2
02b70     ED 10 02 F1 | 	add	local04, __methods__
02b74     08 11 02 FB | 	rdlong	local04, local04
02b78     05 01 02 F6 | 	mov	arg01, local01
02b7c     07 03 62 F6 | 	neg	arg02, local03
02b80     01 04 06 F6 | 	mov	arg03, #1
02b84     F1 14 02 F6 | 	mov	local06, objptr
02b88     09 E3 01 F6 | 	mov	objptr, local05
02b8c     2D 10 62 FD | 	call	local04
02b90     0A E3 01 F6 | 	mov	objptr, local06
02b94                 | LR__0413
02b94                 | LR__0414
02b94     06 01 68 FC | 	wrlong	#0, local02
02b98     04 0C 06 F1 | 	add	local02, #4
02b9c     06 01 68 FC | 	wrlong	#0, local02
02ba0     04 0C 06 F1 | 	add	local02, #4
02ba4     06 01 68 FC | 	wrlong	#0, local02
02ba8     00 EA 05 F6 | 	mov	result1, #0
02bac     A7 F0 03 F6 | 	mov	ptra, fp
02bb0     B2 00 A0 FD | 	call	#popregs_
02bb4                 | __system____default_flush_ret
02bb4     2D 00 64 FD | 	ret
02bb8                 | 
02bb8                 | __system____default_buffer_init
02bb8     02 4A 05 F6 | 	mov	COUNT_, #2
02bbc     A8 00 A0 FD | 	call	#pushregs_
02bc0     00 0B 02 F6 | 	mov	local01, arg01
02bc4     05 0D 02 FB | 	rdlong	local02, local01
02bc8     05 01 02 F6 | 	mov	arg01, local01
02bcc     CC 01 B0 FD | 	call	#__system___isatty
02bd0     00 EA 0D F2 | 	cmp	result1, #0 wz
02bd4     06 0A 06 51 |  if_ne	add	local01, #6
02bd8     05 0B 58 5C |  if_ne	wrword	#5, local01
02bdc     06 0A 06 A1 |  if_e	add	local01, #6
02be0     05 0D 58 AC |  if_e	wrword	#6, local01
02be4     14 0C 06 F1 | 	add	local02, #20
02be8     06 0B 02 F6 | 	mov	local01, local02
02bec     04 0C 86 F1 | 	sub	local02, #4
02bf0     06 0B 62 FC | 	wrlong	local01, local02
02bf4     04 0C 86 F1 | 	sub	local02, #4
02bf8     02 00 80 FF 
02bfc     06 01 68 FC | 	wrlong	##1024, local02
02c00     00 EA 05 F6 | 	mov	result1, #0
02c04     A7 F0 03 F6 | 	mov	ptra, fp
02c08     B2 00 A0 FD | 	call	#popregs_
02c0c                 | __system____default_buffer_init_ret
02c0c     2D 00 64 FD | 	ret
02c10                 | 
02c10                 | __system__stat
02c10     04 4A 05 F6 | 	mov	COUNT_, #4
02c14     A8 00 A0 FD | 	call	#pushregs_
02c18     01 0B 02 F6 | 	mov	local01, arg02
02c1c     84 E5 05 F1 | 	add	ptr___system__dat__, #388
02c20     F2 0C 02 F6 | 	mov	local02, ptr___system__dat__
02c24     00 03 02 F6 | 	mov	arg02, arg01
02c28     06 01 02 F6 | 	mov	arg01, local02
02c2c     00 04 06 F6 | 	mov	arg03, #0
02c30     84 E5 85 F1 | 	sub	ptr___system__dat__, #388
02c34     18 E7 BF FD | 	call	#__system____getvfsforfile
02c38     F5 0E 0A F6 | 	mov	local03, result1 wz
02c3c     10 00 90 AD |  if_e	jmp	#LR__0420
02c40     34 0E 06 F1 | 	add	local03, #52
02c44     07 05 0A FB | 	rdlong	arg03, local03 wz
02c48     34 0E 86 F1 | 	sub	local03, #52
02c4c     14 00 90 5D |  if_ne	jmp	#LR__0421
02c50                 | LR__0420
02c50     20 E4 05 F1 | 	add	ptr___system__dat__, #32
02c54     F2 20 68 FC | 	wrlong	#16, ptr___system__dat__
02c58     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
02c5c     01 EA 65 F6 | 	neg	result1, #1
02c60     68 00 90 FD | 	jmp	#LR__0422
02c64                 | LR__0421
02c64     05 01 02 F6 | 	mov	arg01, local01
02c68     00 02 06 F6 | 	mov	arg02, #0
02c6c     30 04 06 F6 | 	mov	arg03, #48
02c70     00 11 02 F6 | 	mov	local04, arg01
02c74     98 00 A0 FD | 	call	#\builtin_bytefill_
02c78     08 EB 01 F6 | 	mov	result1, local04
02c7c     06 01 CA FA | 	rdbyte	arg01, local02 wz
02c80     08 0A 06 A1 |  if_e	add	local01, #8
02c84     08 00 80 AF 
02c88     05 FF 6B AC |  if_e	wrlong	##4607, local01
02c8c     00 EA 05 A6 |  if_e	mov	result1, #0
02c90     38 00 90 AD |  if_e	jmp	#LR__0422
02c94     34 0E 06 F1 | 	add	local03, #52
02c98     07 0F 02 FB | 	rdlong	local03, local03
02c9c     07 11 02 F6 | 	mov	local04, local03
02ca0     13 0E 46 F7 | 	zerox	local03, #19
02ca4     14 10 46 F0 | 	shr	local04, #20
02ca8     02 10 66 F0 | 	shl	local04, #2
02cac     ED 10 02 F1 | 	add	local04, __methods__
02cb0     08 11 02 FB | 	rdlong	local04, local04
02cb4     06 01 02 F6 | 	mov	arg01, local02
02cb8     05 03 02 F6 | 	mov	arg02, local01
02cbc     F1 0C 02 F6 | 	mov	local02, objptr
02cc0     07 E3 01 F6 | 	mov	objptr, local03
02cc4     2D 10 62 FD | 	call	local04
02cc8     06 E3 01 F6 | 	mov	objptr, local02
02ccc                 | LR__0422
02ccc     A7 F0 03 F6 | 	mov	ptra, fp
02cd0     B2 00 A0 FD | 	call	#popregs_
02cd4                 | __system__stat_ret
02cd4     2D 00 64 FD | 	ret
02cd8                 | 
02cd8                 | __system__close
02cd8     0A 00 16 F2 | 	cmp	arg01, #10 wc
02cdc     20 E4 05 31 |  if_ae	add	ptr___system__dat__, #32
02ce0     F2 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
02ce4     20 E4 85 31 |  if_ae	sub	ptr___system__dat__, #32
02ce8     01 EA 65 36 |  if_ae	neg	result1, #1
02cec     20 00 90 3D |  if_ae	jmp	#LR__0430
02cf0     34 00 06 FD | 	qmul	arg01, #52
02cf4     02 00 00 FF 
02cf8     20 E5 05 F1 | 	add	ptr___system__dat__, ##1312
02cfc     18 00 62 FD | 	getqx	arg01
02d00     F2 00 02 F1 | 	add	arg01, ptr___system__dat__
02d04     02 00 00 FF 
02d08     20 E5 85 F1 | 	sub	ptr___system__dat__, ##1312
02d0c     88 F9 BF FD | 	call	#__system___closeraw
02d10                 | LR__0430
02d10                 | __system__close_ret
02d10     2D 00 64 FD | 	ret
02d14                 | 
02d14                 | __system___ioctl
02d14     03 4A 05 F6 | 	mov	COUNT_, #3
02d18     A8 00 A0 FD | 	call	#pushregs_
02d1c     00 00 4E F2 | 	cmps	arg01, #0 wz
02d20     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
02d24     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
02d28     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
02d2c     01 EA 65 A6 |  if_e	neg	result1, #1
02d30     5C 00 90 AD |  if_e	jmp	#LR__0441
02d34     28 00 06 F1 | 	add	arg01, #40
02d38     00 0B 02 FB | 	rdlong	local01, arg01
02d3c     05 0D 02 F6 | 	mov	local02, local01
02d40     28 00 86 F1 | 	sub	arg01, #40
02d44     13 0C 46 F7 | 	zerox	local02, #19
02d48     14 0A 46 F0 | 	shr	local01, #20
02d4c     02 0A 66 F0 | 	shl	local01, #2
02d50     ED 0A 02 F1 | 	add	local01, __methods__
02d54     05 0B 02 FB | 	rdlong	local01, local01
02d58     F1 0E 02 F6 | 	mov	local03, objptr
02d5c     06 E3 01 F6 | 	mov	objptr, local02
02d60     2D 0A 62 FD | 	call	local01
02d64     07 E3 01 F6 | 	mov	objptr, local03
02d68     F5 00 0A F6 | 	mov	arg01, result1 wz
02d6c     1C 00 90 AD |  if_e	jmp	#LR__0440
02d70     00 00 4E F2 | 	cmps	arg01, #0 wz
02d74     20 E4 05 F1 | 	add	ptr___system__dat__, #32
02d78     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
02d7c     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
02d80     01 EA 65 56 |  if_ne	neg	result1, #1
02d84     00 EA 05 A6 |  if_e	mov	result1, #0
02d88     04 00 90 FD | 	jmp	#LR__0441
02d8c                 | LR__0440
02d8c     00 EA 05 F6 | 	mov	result1, #0
02d90                 | LR__0441
02d90     A7 F0 03 F6 | 	mov	ptra, fp
02d94     B2 00 A0 FD | 	call	#popregs_
02d98                 | __system___ioctl_ret
02d98     2D 00 64 FD | 	ret
02d9c                 | 
02d9c                 | __system___isatty
02d9c     00 4A 05 F6 | 	mov	COUNT_, #0
02da0     A8 00 A0 FD | 	call	#pushregs_
02da4     0C F0 07 F1 | 	add	ptra, #12
02da8     04 4E 05 F1 | 	add	fp, #4
02dac     A7 00 62 FC | 	wrlong	arg01, fp
02db0     04 4E 05 F1 | 	add	fp, #4
02db4     A7 04 02 F6 | 	mov	arg03, fp
02db8     08 4E 85 F1 | 	sub	fp, #8
02dbc     00 03 06 F6 | 	mov	arg02, #256
02dc0     50 FF BF FD | 	call	#__system___ioctl
02dc4     00 EA 0D F2 | 	cmp	result1, #0 wz
02dc8     01 EA 05 A6 |  if_e	mov	result1, #1
02dcc     00 EA 05 56 |  if_ne	mov	result1, #0
02dd0     A7 F0 03 F6 | 	mov	ptra, fp
02dd4     B2 00 A0 FD | 	call	#popregs_
02dd8                 | __system___isatty_ret
02dd8     2D 00 64 FD | 	ret
02ddc                 | 
02ddc                 | __system____getftab
02ddc     0A 00 16 F2 | 	cmp	arg01, #10 wc
02de0     34 00 06 CD |  if_b	qmul	arg01, #52
02de4     00 EA 05 36 |  if_ae	mov	result1, #0
02de8     02 00 00 CF 
02dec     20 E5 05 C1 |  if_b	add	ptr___system__dat__, ##1312
02df0     18 EA 61 CD |  if_b	getqx	result1
02df4     F2 EA 01 C1 |  if_b	add	result1, ptr___system__dat__
02df8     02 00 00 CF 
02dfc     20 E5 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
02e00                 | __system____getftab_ret
02e00     2D 00 64 FD | 	ret
02e04                 | 
02e04                 | __system__strncpy
02e04     00 EF 01 F6 | 	mov	_var01, arg01
02e08                 | LR__0450
02e08     01 04 86 F1 | 	sub	arg03, #1
02e0c     00 04 56 F2 | 	cmps	arg03, #0 wc
02e10     18 00 90 CD |  if_b	jmp	#LR__0451
02e14     01 EB C1 FA | 	rdbyte	result1, arg02
02e18     F7 EA 41 FC | 	wrbyte	result1, _var01
02e1c     01 02 06 F1 | 	add	arg02, #1
02e20     F7 EA C9 FA | 	rdbyte	result1, _var01 wz
02e24     01 EE 05 F1 | 	add	_var01, #1
02e28     DC FF 9F 5D |  if_ne	jmp	#LR__0450
02e2c                 | LR__0451
02e2c     97 0C 48 FB | 	callpa	#(@LR__0453-@LR__0452)>>2,fcache_load_ptr_
02e30                 | LR__0452
02e30     01 04 86 F1 | 	sub	arg03, #1
02e34     00 04 56 F2 | 	cmps	arg03, #0 wc
02e38     F7 F0 01 36 |  if_ae	mov	_var02, _var01
02e3c     01 EE 05 31 |  if_ae	add	_var01, #1
02e40     F8 00 48 3C |  if_ae	wrbyte	#0, _var02
02e44     E8 FF 9F 3D |  if_ae	jmp	#LR__0452
02e48                 | LR__0453
02e48     00 EB 01 F6 | 	mov	result1, arg01
02e4c                 | __system__strncpy_ret
02e4c     2D 00 64 FD | 	ret
02e50                 | 
02e50                 | __system__strncat
02e50     00 02 4E F2 | 	cmps	arg02, #0 wz
02e54     50 00 90 AD |  if_e	jmp	#LR__0464
02e58     01 04 16 F2 | 	cmp	arg03, #1 wc
02e5c     48 00 90 CD |  if_b	jmp	#LR__0464
02e60     00 EF 01 F6 | 	mov	_var01, arg01
02e64     97 1E 48 FB | 	callpa	#(@LR__0462-@LR__0460)>>2,fcache_load_ptr_
02e68                 | LR__0460
02e68     F7 EA C9 FA | 	rdbyte	result1, _var01 wz
02e6c     01 EE 05 51 |  if_ne	add	_var01, #1
02e70     F4 FF 9F 5D |  if_ne	jmp	#LR__0460
02e74     02 F1 01 F6 | 	mov	_var02, arg03
02e78                 | LR__0461
02e78     01 F3 C1 FA | 	rdbyte	_var03, arg02
02e7c     F9 F4 01 F6 | 	mov	_var04, _var03
02e80     07 F4 4D F7 | 	zerox	_var04, #7 wz
02e84     01 02 06 F1 | 	add	arg02, #1
02e88     18 00 90 AD |  if_e	jmp	#LR__0463
02e8c     01 F0 85 F1 | 	sub	_var02, #1
02e90     00 F0 55 F2 | 	cmps	_var02, #0 wc
02e94     F7 F4 01 36 |  if_ae	mov	_var04, _var01
02e98     01 EE 05 31 |  if_ae	add	_var01, #1
02e9c     FA F2 41 3C |  if_ae	wrbyte	_var03, _var04
02ea0     D4 FF 9F 3D |  if_ae	jmp	#LR__0461
02ea4                 | LR__0462
02ea4                 | LR__0463
02ea4     F7 00 48 FC | 	wrbyte	#0, _var01
02ea8                 | LR__0464
02ea8     00 EB 01 F6 | 	mov	result1, arg01
02eac                 | __system__strncat_ret
02eac     2D 00 64 FD | 	ret
02eb0                 | 
02eb0                 | __system__strncmp
02eb0     00 EF 09 F6 | 	mov	_var01, arg01 wz
02eb4     14 00 90 5D |  if_ne	jmp	#LR__0470
02eb8     00 02 0E F2 | 	cmp	arg02, #0 wz
02ebc     01 F0 65 56 |  if_ne	neg	_var02, #1
02ec0     00 F0 05 A6 |  if_e	mov	_var02, #0
02ec4     F8 EA 01 F6 | 	mov	result1, _var02
02ec8     74 00 90 FD | 	jmp	#__system__strncmp_ret
02ecc                 | LR__0470
02ecc     00 02 0E F2 | 	cmp	arg02, #0 wz
02ed0     01 EA 05 A6 |  if_e	mov	result1, #1
02ed4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
02ed8     02 F3 01 F6 | 	mov	_var03, arg03
02edc     97 16 48 FB | 	callpa	#(@LR__0472-@LR__0471)>>2,fcache_load_ptr_
02ee0                 | LR__0471
02ee0     F7 F4 C1 FA | 	rdbyte	_var04, _var01
02ee4     01 F7 01 F6 | 	mov	_var05, arg02
02ee8     FB F8 C1 FA | 	rdbyte	_var06, _var05
02eec     01 F2 85 F1 | 	sub	_var03, #1
02ef0     00 F2 55 F2 | 	cmps	_var03, #0 wc
02ef4     01 EE 05 F1 | 	add	_var01, #1
02ef8     01 02 06 F1 | 	add	arg02, #1
02efc     00 F4 0D 32 |  if_ae	cmp	_var04, #0 wz
02f00     08 00 90 2D |  if_nc_and_z	jmp	#LR__0473
02f04     FC F4 09 32 |  if_ae	cmp	_var04, _var06 wz
02f08     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__0471
02f0c                 | LR__0472
02f0c                 | LR__0473
02f0c     00 F2 55 F2 | 	cmps	_var03, #0 wc
02f10     00 EA 05 C6 |  if_b	mov	result1, #0
02f14     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
02f18     FC F4 09 F2 | 	cmp	_var04, _var06 wz
02f1c     00 EA 05 A6 |  if_e	mov	result1, #0
02f20     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
02f24     00 F4 0D F2 | 	cmp	_var04, #0 wz
02f28     01 EA 65 A6 |  if_e	neg	result1, #1
02f2c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
02f30     00 F8 0D F2 | 	cmp	_var06, #0 wz
02f34     01 EA 05 A6 |  if_e	mov	result1, #1
02f38     FA EA 01 56 |  if_ne	mov	result1, _var04
02f3c     FC EA 81 51 |  if_ne	sub	result1, _var06
02f40                 | __system__strncmp_ret
02f40     2D 00 64 FD | 	ret
02f44                 | 
02f44                 | __system____root_opendir
02f44     64 E4 05 F1 | 	add	ptr___system__dat__, #100
02f48     04 00 06 F1 | 	add	arg01, #4
02f4c     00 E5 61 FC | 	wrlong	ptr___system__dat__, arg01
02f50     00 EA 05 F6 | 	mov	result1, #0
02f54     64 E4 85 F1 | 	sub	ptr___system__dat__, #100
02f58                 | __system____root_opendir_ret
02f58     2D 00 64 FD | 	ret
02f5c                 | 
02f5c                 | __system____root_readdir
02f5c     03 4A 05 F6 | 	mov	COUNT_, #3
02f60     A8 00 A0 FD | 	call	#pushregs_
02f64     00 0B 02 F6 | 	mov	local01, arg01
02f68     01 0D 02 F6 | 	mov	local02, arg02
02f6c     04 0A 06 F1 | 	add	local01, #4
02f70     05 0F 02 FB | 	rdlong	local03, local01
02f74     04 0A 86 F1 | 	sub	local01, #4
02f78                 | LR__0480
02f78     74 E4 05 F1 | 	add	ptr___system__dat__, #116
02f7c     F2 0E 0A F2 | 	cmp	local03, ptr___system__dat__ wz
02f80     74 E4 85 F1 | 	sub	ptr___system__dat__, #116
02f84     01 EA 65 A6 |  if_e	neg	result1, #1
02f88     48 00 90 AD |  if_e	jmp	#LR__0481
02f8c     07 05 0A FB | 	rdlong	arg03, local03 wz
02f90     04 0E 06 A1 |  if_e	add	local03, #4
02f94     E0 FF 9F AD |  if_e	jmp	#LR__0480
02f98     07 03 02 FB | 	rdlong	arg02, local03
02f9c     01 02 06 F1 | 	add	arg02, #1
02fa0     06 01 02 F6 | 	mov	arg01, local02
02fa4     40 04 06 F6 | 	mov	arg03, #64
02fa8     58 FE BF FD | 	call	#__system__strncpy
02fac     50 0C 06 F1 | 	add	local02, #80
02fb0     06 03 48 FC | 	wrbyte	#1, local02
02fb4     08 0C 86 F1 | 	sub	local02, #8
02fb8     06 01 68 FC | 	wrlong	#0, local02
02fbc     04 0C 06 F1 | 	add	local02, #4
02fc0     06 01 68 FC | 	wrlong	#0, local02
02fc4     04 0E 06 F1 | 	add	local03, #4
02fc8     04 0A 06 F1 | 	add	local01, #4
02fcc     05 0F 62 FC | 	wrlong	local03, local01
02fd0     00 EA 05 F6 | 	mov	result1, #0
02fd4                 | LR__0481
02fd4     A7 F0 03 F6 | 	mov	ptra, fp
02fd8     B2 00 A0 FD | 	call	#popregs_
02fdc                 | __system____root_readdir_ret
02fdc     2D 00 64 FD | 	ret
02fe0                 | 
02fe0                 | __system____root_closedir
02fe0     00 EA 05 F6 | 	mov	result1, #0
02fe4                 | __system____root_closedir_ret
02fe4     2D 00 64 FD | 	ret
02fe8                 | 
02fe8                 | __system____root_stat
02fe8     01 EF 01 F6 | 	mov	_var01, arg02
02fec     F7 00 02 F6 | 	mov	arg01, _var01
02ff0     00 02 06 F6 | 	mov	arg02, #0
02ff4     30 04 06 F6 | 	mov	arg03, #48
02ff8     98 00 A0 FD | 	call	#\builtin_bytefill_
02ffc     08 EE 05 F1 | 	add	_var01, #8
03000     08 00 80 FF 
03004     F7 FE 6B FC | 	wrlong	##4607, _var01
03008     00 EA 05 F6 | 	mov	result1, #0
0300c                 | __system____root_stat_ret
0300c     2D 00 64 FD | 	ret
03010                 | 
03010                 | __system___normalizeName
03010     00 EE 05 F6 | 	mov	_var01, #0
03014     00 F1 01 F6 | 	mov	_var02, arg01
03018     F8 F2 01 F6 | 	mov	_var03, _var02
0301c                 | LR__0490
0301c     F8 F4 C9 FA | 	rdbyte	_var04, _var02 wz
03020     5C 01 90 AD |  if_e	jmp	#LR__0509
03024     00 EE 0D F2 | 	cmp	_var01, #0 wz
03028     F9 F4 01 56 |  if_ne	mov	_var04, _var03
0302c     01 F2 05 51 |  if_ne	add	_var03, #1
03030     FA 5E 48 5C |  if_ne	wrbyte	#47, _var04
03034     00 EE 05 56 |  if_ne	mov	_var01, #0
03038     F8 F4 C1 FA | 	rdbyte	_var04, _var02
0303c     2E F4 0D F2 | 	cmp	_var04, #46 wz
03040     D8 00 90 5D |  if_ne	jmp	#LR__0502
03044     01 F0 05 F1 | 	add	_var02, #1
03048     F8 F4 C1 FA | 	rdbyte	_var04, _var02
0304c     01 F0 85 F1 | 	sub	_var02, #1
03050     2F F4 0D F2 | 	cmp	_var04, #47 wz
03054     18 00 90 AD |  if_e	jmp	#LR__0491
03058     01 F0 05 F1 | 	add	_var02, #1
0305c     F8 F6 C1 FA | 	rdbyte	_var05, _var02
03060     01 F0 85 F1 | 	sub	_var02, #1
03064     FB F8 01 F6 | 	mov	_var06, _var05
03068     07 F8 4D F7 | 	zerox	_var06, #7 wz
0306c     10 00 90 5D |  if_ne	jmp	#LR__0492
03070                 | LR__0491
03070     F8 FA 01 F6 | 	mov	_var07, _var02
03074     01 FA 05 F1 | 	add	_var07, #1
03078     FD F0 01 F6 | 	mov	_var02, _var07
0307c     E0 00 90 FD | 	jmp	#LR__0506
03080                 | LR__0492
03080     01 F0 05 F1 | 	add	_var02, #1
03084     F8 FA C1 FA | 	rdbyte	_var07, _var02
03088     01 F0 85 F1 | 	sub	_var02, #1
0308c     FD F4 E1 F8 | 	getbyte	_var04, _var07, #0
03090     2E F4 0D F2 | 	cmp	_var04, #46 wz
03094     84 00 90 5D |  if_ne	jmp	#LR__0501
03098     02 F0 05 F1 | 	add	_var02, #2
0309c     F8 FA C1 FA | 	rdbyte	_var07, _var02
030a0     02 F0 85 F1 | 	sub	_var02, #2
030a4     FD F4 E1 F8 | 	getbyte	_var04, _var07, #0
030a8     2F F4 0D F2 | 	cmp	_var04, #47 wz
030ac     18 00 90 AD |  if_e	jmp	#LR__0493
030b0     02 F0 05 F1 | 	add	_var02, #2
030b4     F8 F6 C1 FA | 	rdbyte	_var05, _var02
030b8     02 F0 85 F1 | 	sub	_var02, #2
030bc     FB F8 01 F6 | 	mov	_var06, _var05
030c0     07 F8 4D F7 | 	zerox	_var06, #7 wz
030c4     54 00 90 5D |  if_ne	jmp	#LR__0500
030c8                 | LR__0493
030c8     02 F0 05 F1 | 	add	_var02, #2
030cc     00 F3 59 F2 | 	cmps	_var03, arg01 wcz
030d0     40 00 90 ED |  if_be	jmp	#LR__0499
030d4     F9 FC 01 F6 | 	mov	_var08, _var03
030d8     01 FC 85 F1 | 	sub	_var08, #1
030dc                 | LR__0494
030dc     FE F4 C1 FA | 	rdbyte	_var04, _var08
030e0     2F F4 0D F2 | 	cmp	_var04, #47 wz
030e4     0C 00 90 5D |  if_ne	jmp	#LR__0495
030e8     00 FD 59 F2 | 	cmps	_var08, arg01 wcz
030ec     01 FC 85 11 |  if_a	sub	_var08, #1
030f0     E8 FF 9F 1D |  if_a	jmp	#LR__0494
030f4                 | LR__0495
030f4     97 0C 48 FB | 	callpa	#(@LR__0497-@LR__0496)>>2,fcache_load_ptr_
030f8                 | LR__0496
030f8     00 FD 59 F2 | 	cmps	_var08, arg01 wcz
030fc     10 00 90 ED |  if_be	jmp	#LR__0498
03100     FE F4 C1 FA | 	rdbyte	_var04, _var08
03104     2F F4 0D F2 | 	cmp	_var04, #47 wz
03108     01 FC 85 51 |  if_ne	sub	_var08, #1
0310c     E8 FF 9F 5D |  if_ne	jmp	#LR__0496
03110                 | LR__0497
03110                 | LR__0498
03110     FE F2 01 F6 | 	mov	_var03, _var08
03114                 | LR__0499
03114     01 EE 05 F6 | 	mov	_var01, #1
03118     44 00 90 FD | 	jmp	#LR__0506
0311c                 | LR__0500
0311c                 | LR__0501
0311c                 | LR__0502
0311c     97 18 48 FB | 	callpa	#(@LR__0504-@LR__0503)>>2,fcache_load_ptr_
03120                 | LR__0503
03120     F8 F4 C9 FA | 	rdbyte	_var04, _var02 wz
03124     F8 FA C1 5A |  if_ne	rdbyte	_var07, _var02
03128     2F FA 0D 52 |  if_ne	cmp	_var07, #47 wz
0312c     20 00 90 AD |  if_e	jmp	#LR__0505
03130     F8 F8 01 F6 | 	mov	_var06, _var02
03134     F8 F6 01 F6 | 	mov	_var05, _var02
03138     01 F6 05 F1 | 	add	_var05, #1
0313c     FC FE C1 FA | 	rdbyte	_var09, _var06
03140     FB F0 01 F6 | 	mov	_var02, _var05
03144     F9 FE 41 FC | 	wrbyte	_var09, _var03
03148     01 F2 05 F1 | 	add	_var03, #1
0314c     D0 FF 9F FD | 	jmp	#LR__0503
03150                 | LR__0504
03150                 | LR__0505
03150     F8 F4 C1 FA | 	rdbyte	_var04, _var02
03154     2F F4 0D F2 | 	cmp	_var04, #47 wz
03158     C0 FE 9F 5D |  if_ne	jmp	#LR__0490
0315c     01 EE 05 F6 | 	mov	_var01, #1
03160                 | LR__0506
03160     97 0C 48 FB | 	callpa	#(@LR__0508-@LR__0507)>>2,fcache_load_ptr_
03164                 | LR__0507
03164     F8 F4 C1 FA | 	rdbyte	_var04, _var02
03168     2F F4 0D F2 | 	cmp	_var04, #47 wz
0316c     F8 FA 01 A6 |  if_e	mov	_var07, _var02
03170     01 FA 05 A1 |  if_e	add	_var07, #1
03174     FD F0 01 A6 |  if_e	mov	_var02, _var07
03178     E8 FF 9F AD |  if_e	jmp	#LR__0507
0317c                 | LR__0508
0317c     9C FE 9F FD | 	jmp	#LR__0490
03180                 | LR__0509
03180     F9 00 48 FC | 	wrbyte	#0, _var03
03184                 | __system___normalizeName_ret
03184     2D 00 64 FD | 	ret
03188                 | 
03188                 | __system___strrev
03188     00 EF C9 FA | 	rdbyte	_var01, arg01 wz
0318c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
03190     00 F1 01 F6 | 	mov	_var02, arg01
03194     97 1A 48 FB | 	callpa	#(@LR__0512-@LR__0510)>>2,fcache_load_ptr_
03198                 | LR__0510
03198     F8 EE C9 FA | 	rdbyte	_var01, _var02 wz
0319c     01 F0 05 51 |  if_ne	add	_var02, #1
031a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0510
031a4     01 F0 85 F1 | 	sub	_var02, #1
031a8                 | LR__0511
031a8     00 F1 59 F2 | 	cmps	_var02, arg01 wcz
031ac     1C 00 90 ED |  if_be	jmp	#LR__0513
031b0     00 EF C1 FA | 	rdbyte	_var01, arg01
031b4     F8 F2 C1 FA | 	rdbyte	_var03, _var02
031b8     00 F3 41 FC | 	wrbyte	_var03, arg01
031bc     F8 EE 41 FC | 	wrbyte	_var01, _var02
031c0     01 00 06 F1 | 	add	arg01, #1
031c4     01 F0 85 F1 | 	sub	_var02, #1
031c8     DC FF 9F FD | 	jmp	#LR__0511
031cc                 | LR__0512
031cc                 | LR__0513
031cc                 | __system___strrev_ret
031cc     2D 00 64 FD | 	ret
031d0                 | 
031d0                 | __system___fmtpad
031d0     06 4A 05 F6 | 	mov	COUNT_, #6
031d4     A8 00 A0 FD | 	call	#pushregs_
031d8     00 0B 02 F6 | 	mov	local01, arg01
031dc     01 0D 02 F6 | 	mov	local02, arg02
031e0     02 0F 02 F6 | 	mov	local03, arg03
031e4     06 01 EA F8 | 	getbyte	arg01, local02, #1
031e8     16 0C 46 F0 | 	shr	local02, #22
031ec     03 0C 0E F5 | 	and	local02, #3 wz
031f0     00 10 06 F6 | 	mov	local04, #0
031f4     01 0C 06 A6 |  if_e	mov	local02, #1
031f8     03 0D CA F7 | 	test	local02, arg04 wz
031fc     00 EA 05 A6 |  if_e	mov	result1, #0
03200     88 00 90 AD |  if_e	jmp	#LR__0523
03204     00 0F C2 F2 | 	subr	local03, arg01
03208     01 0E 56 F2 | 	cmps	local03, #1 wc
0320c     00 EA 05 C6 |  if_b	mov	result1, #0
03210     78 00 90 CD |  if_b	jmp	#LR__0523
03214     03 0C 0E F2 | 	cmp	local02, #3 wz
03218     18 00 90 5D |  if_ne	jmp	#LR__0520
0321c     01 06 0E F2 | 	cmp	arg04, #1 wz
03220     6E 0C 62 FD | 	wrz	local02
03224     06 0F 02 F1 | 	add	local03, local02
03228     07 0F 52 F6 | 	abs	local03, local03 wc
0322c     01 0E 46 F0 | 	shr	local03, #1
03230     07 0F 82 F6 | 	negc	local03, local03
03234                 | LR__0520
03234     01 0E 56 F2 | 	cmps	local03, #1 wc
03238     4C 00 90 CD |  if_b	jmp	#LR__0522
0323c     07 13 02 F6 | 	mov	local05, local03
03240                 | LR__0521
03240     05 0D 02 F6 | 	mov	local02, local01
03244     05 15 02 F6 | 	mov	local06, local01
03248     13 0C 46 F7 | 	zerox	local02, #19
0324c     14 14 46 F0 | 	shr	local06, #20
03250     02 14 66 F0 | 	shl	local06, #2
03254     ED 14 02 F1 | 	add	local06, __methods__
03258     0A 15 02 FB | 	rdlong	local06, local06
0325c     20 00 06 F6 | 	mov	arg01, #32
03260     F1 0E 02 F6 | 	mov	local03, objptr
03264     06 E3 01 F6 | 	mov	objptr, local02
03268     2D 14 62 FD | 	call	local06
0326c     07 E3 01 F6 | 	mov	objptr, local03
03270     F5 14 02 F6 | 	mov	local06, result1
03274     00 14 56 F2 | 	cmps	local06, #0 wc
03278     0A EB 01 C6 |  if_b	mov	result1, local06
0327c     0C 00 90 CD |  if_b	jmp	#LR__0523
03280     0A 11 02 F1 | 	add	local04, local06
03284     EE 13 6E FB | 	djnz	local05, #LR__0521
03288                 | LR__0522
03288     08 EB 01 F6 | 	mov	result1, local04
0328c                 | LR__0523
0328c     A7 F0 03 F6 | 	mov	ptra, fp
03290     B2 00 A0 FD | 	call	#popregs_
03294                 | __system___fmtpad_ret
03294     2D 00 64 FD | 	ret
03298                 | 
03298                 | __system___uitoa
03298     04 4A 05 F6 | 	mov	COUNT_, #4
0329c     A8 00 A0 FD | 	call	#pushregs_
032a0     00 0B 02 F6 | 	mov	local01, arg01
032a4     00 08 4E F2 | 	cmps	arg05, #0 wz
032a8     05 09 02 F6 | 	mov	arg05, local01
032ac     00 0C 06 F6 | 	mov	local02, #0
032b0     37 0E 06 56 |  if_ne	mov	local03, #55
032b4     57 0E 06 A6 |  if_e	mov	local03, #87
032b8                 | LR__0530
032b8     02 03 12 FD | 	qdiv	arg02, arg03
032bc     19 10 62 FD | 	getqy	local04
032c0     02 03 12 FD | 	qdiv	arg02, arg03
032c4     0A 10 16 F2 | 	cmp	local04, #10 wc
032c8     30 10 06 C1 |  if_b	add	local04, #48
032cc     07 11 02 31 |  if_ae	add	local04, local03
032d0     04 11 42 FC | 	wrbyte	local04, arg05
032d4     01 08 06 F1 | 	add	arg05, #1
032d8     01 0C 06 F1 | 	add	local02, #1
032dc     18 02 62 FD | 	getqx	arg02
032e0     00 02 0E F2 | 	cmp	arg02, #0 wz
032e4     D0 FF 9F 5D |  if_ne	jmp	#LR__0530
032e8     03 0D 12 F2 | 	cmp	local02, arg04 wc
032ec     C8 FF 9F CD |  if_b	jmp	#LR__0530
032f0     04 01 48 FC | 	wrbyte	#0, arg05
032f4     05 01 02 F6 | 	mov	arg01, local01
032f8     8C FE BF FD | 	call	#__system___strrev
032fc     06 EB 01 F6 | 	mov	result1, local02
03300     A7 F0 03 F6 | 	mov	ptra, fp
03304     B2 00 A0 FD | 	call	#popregs_
03308                 | __system___uitoa_ret
03308     2D 00 64 FD | 	ret
0330c                 | 
0330c                 | __system___gettxfunc
0330c     01 4A 05 F6 | 	mov	COUNT_, #1
03310     A8 00 A0 FD | 	call	#pushregs_
03314     C4 FA BF FD | 	call	#__system____getftab
03318     F5 0A 0A F6 | 	mov	local01, result1 wz
0331c     10 00 90 AD |  if_e	jmp	#LR__0540
03320     08 0A 06 F1 | 	add	local01, #8
03324     05 03 0A FB | 	rdlong	arg02, local01 wz
03328     08 0A 86 F1 | 	sub	local01, #8
0332c     08 00 90 5D |  if_ne	jmp	#LR__0541
03330                 | LR__0540
03330     00 EA 05 F6 | 	mov	result1, #0
03334     08 00 90 FD | 	jmp	#LR__0542
03338                 | LR__0541
03338     34 0A 26 F4 | 	bith	local01, #52
0333c     05 EB 01 F6 | 	mov	result1, local01
03340                 | LR__0542
03340     A7 F0 03 F6 | 	mov	ptra, fp
03344     B2 00 A0 FD | 	call	#popregs_
03348                 | __system___gettxfunc_ret
03348     2D 00 64 FD | 	ret
0334c                 | 
0334c                 | __system___getiolock_0121
0334c     01 4A 05 F6 | 	mov	COUNT_, #1
03350     A8 00 A0 FD | 	call	#pushregs_
03354     84 FA BF FD | 	call	#__system____getftab
03358     F5 0A 0A F6 | 	mov	local01, result1 wz
0335c     10 00 90 AD |  if_e	jmp	#LR__0550
03360     08 0A 06 F1 | 	add	local01, #8
03364     05 EB 09 FB | 	rdlong	result1, local01 wz
03368     08 0A 86 F1 | 	sub	local01, #8
0336c     18 00 90 5D |  if_ne	jmp	#LR__0551
03370                 | LR__0550
03370     01 00 00 FF 
03374     D4 E4 05 F1 | 	add	ptr___system__dat__, ##724
03378     F2 EA 01 F6 | 	mov	result1, ptr___system__dat__
0337c     01 00 00 FF 
03380     D4 E4 85 F1 | 	sub	ptr___system__dat__, ##724
03384     08 00 90 FD | 	jmp	#LR__0552
03388                 | LR__0551
03388     0C 0A 06 F1 | 	add	local01, #12
0338c     05 EB 01 F6 | 	mov	result1, local01
03390                 | LR__0552
03390     A7 F0 03 F6 | 	mov	ptra, fp
03394     B2 00 A0 FD | 	call	#popregs_
03398                 | __system___getiolock_0121_ret
03398     2D 00 64 FD | 	ret
0339c                 | 
0339c                 | __system___rxtxioctl_0188
0339c     00 03 0E F2 | 	cmp	arg02, #256 wz
033a0     0C 00 90 AD |  if_e	jmp	#LR__0560
033a4     01 03 0E F2 | 	cmp	arg02, #257 wz
033a8     1C 00 90 AD |  if_e	jmp	#LR__0561
033ac     30 00 90 FD | 	jmp	#LR__0562
033b0                 | LR__0560
033b0     08 E4 05 F1 | 	add	ptr___system__dat__, #8
033b4     F2 EA 01 FB | 	rdlong	result1, ptr___system__dat__
033b8     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
033bc     02 EB 61 FC | 	wrlong	result1, arg03
033c0     00 EA 05 F6 | 	mov	result1, #0
033c4     28 00 90 FD | 	jmp	#LR__0563
033c8                 | LR__0561
033c8     02 01 02 FB | 	rdlong	arg01, arg03
033cc     08 E4 05 F1 | 	add	ptr___system__dat__, #8
033d0     F2 00 62 FC | 	wrlong	arg01, ptr___system__dat__
033d4     08 E4 85 F1 | 	sub	ptr___system__dat__, #8
033d8     00 EA 05 F6 | 	mov	result1, #0
033dc     10 00 90 FD | 	jmp	#LR__0563
033e0                 | LR__0562
033e0     20 E4 05 F1 | 	add	ptr___system__dat__, #32
033e4     F2 14 68 FC | 	wrlong	#10, ptr___system__dat__
033e8     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
033ec     01 EA 65 F6 | 	neg	result1, #1
033f0                 | LR__0563
033f0                 | __system___rxtxioctl_0188_ret
033f0     2D 00 64 FD | 	ret
033f4                 | 
033f4                 | __system____dummy_flush_0189
033f4     00 EA 05 F6 | 	mov	result1, #0
033f8                 | __system____dummy_flush_0189_ret
033f8     2D 00 64 FD | 	ret
033fc                 | 
033fc                 | __system____default_filbuf
033fc     04 4A 05 F6 | 	mov	COUNT_, #4
03400     A8 00 A0 FD | 	call	#pushregs_
03404     00 0B 02 F6 | 	mov	local01, arg01
03408     05 0D 02 FB | 	rdlong	local02, local01
0340c     0C 0C 06 F1 | 	add	local02, #12
03410     06 EB 09 FB | 	rdlong	result1, local02 wz
03414     0C 0C 86 F1 | 	sub	local02, #12
03418     20 00 90 5D |  if_ne	jmp	#LR__0570
0341c     14 0C 06 F1 | 	add	local02, #20
03420     06 EB 01 F6 | 	mov	result1, local02
03424     04 0C 86 F1 | 	sub	local02, #4
03428     06 EB 61 FC | 	wrlong	result1, local02
0342c     04 0C 86 F1 | 	sub	local02, #4
03430     02 00 80 FF 
03434     06 01 68 FC | 	wrlong	##1024, local02
03438     0C 0C 86 F1 | 	sub	local02, #12
0343c                 | LR__0570
0343c     14 0A 06 F1 | 	add	local01, #20
03440     05 0F 02 FB | 	rdlong	local03, local01
03444     07 11 02 F6 | 	mov	local04, local03
03448     14 0A 86 F1 | 	sub	local01, #20
0344c     13 10 46 F7 | 	zerox	local04, #19
03450     14 0E 46 F0 | 	shr	local03, #20
03454     02 0E 66 F0 | 	shl	local03, #2
03458     ED 0E 02 F1 | 	add	local03, __methods__
0345c     07 0F 02 FB | 	rdlong	local03, local03
03460     10 0C 06 F1 | 	add	local02, #16
03464     06 03 02 FB | 	rdlong	arg02, local02
03468     04 0C 86 F1 | 	sub	local02, #4
0346c     06 05 02 FB | 	rdlong	arg03, local02
03470     0C 0C 86 F1 | 	sub	local02, #12
03474     05 01 02 F6 | 	mov	arg01, local01
03478     F1 0A 02 F6 | 	mov	local01, objptr
0347c     08 E3 01 F6 | 	mov	objptr, local04
03480     2D 0E 62 FD | 	call	local03
03484     05 E3 01 F6 | 	mov	objptr, local01
03488     F5 10 02 F6 | 	mov	local04, result1
0348c     00 10 56 F2 | 	cmps	local04, #0 wc
03490     01 EA 65 C6 |  if_b	neg	result1, #1
03494     28 00 90 CD |  if_b	jmp	#LR__0571
03498     06 11 62 FC | 	wrlong	local04, local02
0349c     10 0C 06 F1 | 	add	local02, #16
034a0     06 0F 02 FB | 	rdlong	local03, local02
034a4     0C 0C 86 F1 | 	sub	local02, #12
034a8     06 0F 62 FC | 	wrlong	local03, local02
034ac     04 0C 06 F1 | 	add	local02, #4
034b0     06 0F 02 FB | 	rdlong	local03, local02
034b4     01 0E 46 F5 | 	or	local03, #1
034b8     06 0F 62 FC | 	wrlong	local03, local02
034bc     08 EB 01 F6 | 	mov	result1, local04
034c0                 | LR__0571
034c0     A7 F0 03 F6 | 	mov	ptra, fp
034c4     B2 00 A0 FD | 	call	#popregs_
034c8                 | __system____default_filbuf_ret
034c8     2D 00 64 FD | 	ret
034cc                 | 
034cc                 | _fatfs_cc_ff_uni2oem
034cc     00 EE 05 F6 | 	mov	_var01, #0
034d0     80 00 16 F2 | 	cmp	arg01, #128 wc
034d4     00 EF 01 C6 |  if_b	mov	_var01, arg01
034d8     58 00 90 CD |  if_b	jmp	#LR__0584
034dc     80 00 00 FF 
034e0     00 00 16 F2 | 	cmp	arg01, ##65536 wc
034e4     4C 00 90 3D |  if_ae	jmp	#LR__0583
034e8     01 EB 31 F9 | 	getword	result1, arg02, #0
034ec     01 00 00 FF 
034f0     52 EB 0D F2 | 	cmp	result1, ##850 wz
034f4     3C 00 90 5D |  if_ne	jmp	#LR__0583
034f8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
034f8     00 EE 05 F6 | 	mov	_var01, #0
034fc     97 14 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
03500                 | LR__0580
03500     F7 EA 31 F9 | 	getword	result1, _var01, #0
03504     80 EA 15 F2 | 	cmp	result1, #128 wc
03508     1C 00 90 3D |  if_ae	jmp	#LR__0582
0350c     F7 EA 31 F9 | 	getword	result1, _var01, #0
03510     01 EA 65 F0 | 	shl	result1, #1
03514     F3 EA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
03518     F5 EA E1 FA | 	rdword	result1, result1
0351c     F5 00 0A F2 | 	cmp	arg01, result1 wz
03520     01 EE 05 51 |  if_ne	add	_var01, #1
03524     D8 FF 9F 5D |  if_ne	jmp	#LR__0580
03528                 | LR__0581
03528                 | LR__0582
03528     F7 EE 31 F9 | 	getword	_var01, _var01, #0
0352c     80 EE 05 F1 | 	add	_var01, #128
03530     F7 EE E1 F8 | 	getbyte	_var01, _var01, #0
03534                 | LR__0583
03534                 | LR__0584
03534                 | ' 			c = (c + 0x80) & 0xFF;
03534                 | ' 		}
03534                 | ' 	}
03534                 | ' 
03534                 | ' 	return c;
03534     F7 EA 01 F6 | 	mov	result1, _var01
03538                 | _fatfs_cc_ff_uni2oem_ret
03538     2D 00 64 FD | 	ret
0353c                 | 
0353c                 | _fatfs_cc_ff_oem2uni
0353c     00 EE 05 F6 | 	mov	_var01, #0
03540     00 EB 31 F9 | 	getword	result1, arg01, #0
03544     80 EA 15 F2 | 	cmp	result1, #128 wc
03548     00 EF 01 C6 |  if_b	mov	_var01, arg01
0354c     2C 00 90 CD |  if_b	jmp	#LR__0591
03550     01 03 32 F9 | 	getword	arg02, arg02, #0
03554     01 00 00 FF 
03558     52 03 0E F2 | 	cmp	arg02, ##850 wz
0355c     1C 00 90 5D |  if_ne	jmp	#LR__0590
03560     00 EB 31 F9 | 	getword	result1, arg01, #0
03564     00 EB 15 F2 | 	cmp	result1, #256 wc
03568     00 01 32 C9 |  if_b	getword	arg01, arg01, #0
0356c     80 00 86 C1 |  if_b	sub	arg01, #128
03570     01 00 66 C0 |  if_b	shl	arg01, #1
03574     F3 00 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
03578     00 EF E1 CA |  if_b	rdword	_var01, arg01
0357c                 | LR__0590
0357c                 | LR__0591
0357c                 | ' 		}
0357c                 | ' 	}
0357c                 | ' 
0357c                 | ' 	return c;
0357c     F7 EA 01 F6 | 	mov	result1, _var01
03580                 | _fatfs_cc_ff_oem2uni_ret
03580     2D 00 64 FD | 	ret
03584                 | 
03584                 | _fatfs_cc_ff_wtoupper
03584     00 EF 01 F6 | 	mov	_var01, arg01
03588     80 00 00 FF 
0358c     00 EE 15 F2 | 	cmp	_var01, ##65536 wc
03590     60 01 90 3D |  if_ae	jmp	#LR__0613
03594     F7 F0 01 F6 | 	mov	_var02, _var01
03598     F8 EE 31 F9 | 	getword	_var01, _var02, #0
0359c     08 00 00 FF 
035a0     00 EE 15 F2 | 	cmp	_var01, ##4096 wc
035a4     00 E7 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
035a8     F3 F2 01 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
035ac     00 E7 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
035b0     01 00 00 3F 
035b4     F2 E6 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
035b8     F3 F2 01 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
035bc     01 00 00 3F 
035c0     F2 E6 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
035c4     F9 F4 01 F6 | 	mov	_var04, _var03
035c8                 | ' 		uc = (WORD)uni;
035c8                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
035c8                 | ' 		for (;;) {
035c8                 | LR__0600
035c8     FA F6 E1 FA | 	rdword	_var05, _var04
035cc     FB F2 01 F6 | 	mov	_var03, _var05
035d0     0F F2 4D F7 | 	zerox	_var03, #15 wz
035d4     02 F4 05 F1 | 	add	_var04, #2
035d8     14 01 90 AD |  if_e	jmp	#LR__0612
035dc     F8 F2 31 F9 | 	getword	_var03, _var02, #0
035e0     FB EE 31 F9 | 	getword	_var01, _var05, #0
035e4     F7 F2 11 F2 | 	cmp	_var03, _var01 wc
035e8     04 01 90 CD |  if_b	jmp	#LR__0612
035ec     FA F8 E1 FA | 	rdword	_var06, _var04
035f0     FC FA 31 F9 | 	getword	_var07, _var06, #0
035f4     08 FA 45 F0 | 	shr	_var07, #8
035f8     FC F8 31 F9 | 	getword	_var06, _var06, #0
035fc     FC F8 E1 F8 | 	getbyte	_var06, _var06, #0
03600     F8 F2 31 F9 | 	getword	_var03, _var02, #0
03604     FB FC 31 F9 | 	getword	_var08, _var05, #0
03608     FC EE 31 F9 | 	getword	_var01, _var06, #0
0360c     F7 FC 01 F1 | 	add	_var08, _var01
03610     FE F2 51 F2 | 	cmps	_var03, _var08 wc
03614     02 F4 05 F1 | 	add	_var04, #2
03618     C4 00 90 3D |  if_ae	jmp	#LR__0611
0361c                 | ' 				switch (cmd) {
0361c     FD FE 31 F9 | 	getword	_var09, _var07, #0
03620     09 FE 25 F3 | 	fle	_var09, #9
03624     30 FE 61 FD | 	jmprel	_var09
03628                 | LR__0601
03628     24 00 90 FD | 	jmp	#LR__0602
0362c     3C 00 90 FD | 	jmp	#LR__0603
03630     54 00 90 FD | 	jmp	#LR__0604
03634     5C 00 90 FD | 	jmp	#LR__0605
03638     64 00 90 FD | 	jmp	#LR__0606
0363c     6C 00 90 FD | 	jmp	#LR__0607
03640     74 00 90 FD | 	jmp	#LR__0608
03644     7C 00 90 FD | 	jmp	#LR__0609
03648     84 00 90 FD | 	jmp	#LR__0610
0364c     A0 00 90 FD | 	jmp	#LR__0612
03650                 | LR__0602
03650     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03654     FB F6 31 F9 | 	getword	_var05, _var05, #0
03658     FB F0 81 F1 | 	sub	_var02, _var05
0365c     01 F0 65 F0 | 	shl	_var02, #1
03660     FA F0 01 F1 | 	add	_var02, _var04
03664     F8 F0 E1 FA | 	rdword	_var02, _var02
03668     84 00 90 FD | 	jmp	#LR__0612
0366c                 | LR__0603
0366c     F8 F2 31 F9 | 	getword	_var03, _var02, #0
03670     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03674     FB F6 31 F9 | 	getword	_var05, _var05, #0
03678     FB F0 81 F1 | 	sub	_var02, _var05
0367c     01 F0 05 F5 | 	and	_var02, #1
03680     F9 F0 C1 F2 | 	subr	_var02, _var03
03684     68 00 90 FD | 	jmp	#LR__0612
03688                 | LR__0604
03688     F8 F0 31 F9 | 	getword	_var02, _var02, #0
0368c     10 F0 85 F1 | 	sub	_var02, #16
03690     5C 00 90 FD | 	jmp	#LR__0612
03694                 | LR__0605
03694     F8 F0 31 F9 | 	getword	_var02, _var02, #0
03698     20 F0 85 F1 | 	sub	_var02, #32
0369c     50 00 90 FD | 	jmp	#LR__0612
036a0                 | LR__0606
036a0     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036a4     30 F0 85 F1 | 	sub	_var02, #48
036a8     44 00 90 FD | 	jmp	#LR__0612
036ac                 | LR__0607
036ac     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036b0     1A F0 85 F1 | 	sub	_var02, #26
036b4     38 00 90 FD | 	jmp	#LR__0612
036b8                 | LR__0608
036b8     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036bc     08 F0 05 F1 | 	add	_var02, #8
036c0     2C 00 90 FD | 	jmp	#LR__0612
036c4                 | LR__0609
036c4     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036c8     50 F0 85 F1 | 	sub	_var02, #80
036cc     20 00 90 FD | 	jmp	#LR__0612
036d0                 | LR__0610
036d0     F8 F0 31 F9 | 	getword	_var02, _var02, #0
036d4     0E 00 00 FF 
036d8     60 F0 85 F1 | 	sub	_var02, ##7264
036dc                 | ' 				}
036dc                 | ' 				break;
036dc     10 00 90 FD | 	jmp	#LR__0612
036e0                 | LR__0611
036e0     0F FA 4D F7 | 	zerox	_var07, #15 wz
036e4     02 F8 05 AA |  if_e	mul	_var06, #2
036e8     FC F4 01 A1 |  if_e	add	_var04, _var06
036ec     D8 FE 9F FD | 	jmp	#LR__0600
036f0                 | LR__0612
036f0     F8 EE 31 F9 | 	getword	_var01, _var02, #0
036f4                 | LR__0613
036f4                 | ' 		}
036f4                 | ' 		uni = uc;
036f4                 | ' 	}
036f4                 | ' 
036f4                 | ' 	return uni;
036f4     F7 EA 01 F6 | 	mov	result1, _var01
036f8                 | _fatfs_cc_ff_wtoupper_ret
036f8     2D 00 64 FD | 	ret
036fc                 | 
036fc                 | _fatfs_cc_strncpy
036fc     00 EF 01 F6 | 	mov	_var01, arg01
03700     97 12 48 FB | 	callpa	#(@LR__0621-@LR__0620)>>2,fcache_load_ptr_
03704                 | ' 
03704                 | ' 	dscan = dst;
03704                 | ' 	sscan = src;
03704                 | ' 	count = n;
03704                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
03704                 | LR__0620
03704     01 04 86 F1 | 	sub	arg03, #1
03708     00 04 56 F2 | 	cmps	arg03, #0 wc
0370c     18 00 90 CD |  if_b	jmp	#LR__0622
03710     01 EB C1 FA | 	rdbyte	result1, arg02
03714     F7 EA 41 FC | 	wrbyte	result1, _var01
03718     01 02 06 F1 | 	add	arg02, #1
0371c     F7 EA C9 FA | 	rdbyte	result1, _var01 wz
03720                 | ' 		continue;
03720     01 EE 05 F1 | 	add	_var01, #1
03724     DC FF 9F 5D |  if_ne	jmp	#LR__0620
03728                 | LR__0621
03728                 | LR__0622
03728     97 0C 48 FB | 	callpa	#(@LR__0624-@LR__0623)>>2,fcache_load_ptr_
0372c                 | ' 	while (--count >= 0)
0372c                 | LR__0623
0372c     01 04 86 F1 | 	sub	arg03, #1
03730     00 04 56 F2 | 	cmps	arg03, #0 wc
03734     F7 F0 01 36 |  if_ae	mov	_var02, _var01
03738     01 EE 05 31 |  if_ae	add	_var01, #1
0373c     F8 00 48 3C |  if_ae	wrbyte	#0, _var02
03740     E8 FF 9F 3D |  if_ae	jmp	#LR__0623
03744                 | LR__0624
03744                 | ' 		*dscan++ = '\0';
03744                 | ' 	return(dst);
03744     00 EB 01 F6 | 	mov	result1, arg01
03748                 | _fatfs_cc_strncpy_ret
03748     2D 00 64 FD | 	ret
0374c                 | 
0374c                 | _fatfs_cc_memcmp
0374c                 | ' 	for (n = size; n > 0; n--)
0374c     00 04 0E F2 | 	cmp	arg03, #0 wz
03750     28 00 90 AD |  if_e	jmp	#LR__0631
03754                 | LR__0630
03754     00 EF C1 FA | 	rdbyte	_var01, arg01
03758     01 F1 C1 FA | 	rdbyte	_var02, arg02
0375c     F8 EE 09 F2 | 	cmp	_var01, _var02 wz
03760     01 00 06 A1 |  if_e	add	arg01, #1
03764     01 02 06 A1 |  if_e	add	arg02, #1
03768                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
03768     00 EB C1 5A |  if_ne	rdbyte	result1, arg01
0376c     01 F1 C1 5A |  if_ne	rdbyte	_var02, arg02
03770     F8 EA 81 51 |  if_ne	sub	result1, _var02
03774     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
03778     F6 05 6E FB | 	djnz	arg03, #LR__0630
0377c                 | LR__0631
0377c                 | ' 
0377c                 | ' 	return(0);
0377c     00 EA 05 F6 | 	mov	result1, #0
03780                 | _fatfs_cc_memcmp_ret
03780     2D 00 64 FD | 	ret
03784                 | 
03784                 | _fatfs_cc_strncmp
03784     00 EF 09 F6 | 	mov	_var01, arg01 wz
03788     14 00 90 5D |  if_ne	jmp	#LR__0640
0378c                 | ' 		return scan2 ? -1 : 0;
0378c     00 02 0E F2 | 	cmp	arg02, #0 wz
03790     01 F0 65 56 |  if_ne	neg	_var02, #1
03794     00 F0 05 A6 |  if_e	mov	_var02, #0
03798     F8 EA 01 F6 | 	mov	result1, _var02
0379c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
037a0                 | LR__0640
037a0     00 02 0E F2 | 	cmp	arg02, #0 wz
037a4     01 EA 05 A6 |  if_e	mov	result1, #1
037a8     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
037ac     02 F3 01 F6 | 	mov	_var03, arg03
037b0     97 16 48 FB | 	callpa	#(@LR__0642-@LR__0641)>>2,fcache_load_ptr_
037b4                 | ' 	count = n;
037b4                 | ' 	do {
037b4                 | LR__0641
037b4     F7 F4 C1 FA | 	rdbyte	_var04, _var01
037b8     01 F7 01 F6 | 	mov	_var05, arg02
037bc     FB F8 C1 FA | 	rdbyte	_var06, _var05
037c0     01 F2 85 F1 | 	sub	_var03, #1
037c4     00 F2 55 F2 | 	cmps	_var03, #0 wc
037c8     01 EE 05 F1 | 	add	_var01, #1
037cc     01 02 06 F1 | 	add	arg02, #1
037d0     00 F4 0D 32 |  if_ae	cmp	_var04, #0 wz
037d4     08 00 90 2D |  if_nc_and_z	jmp	#LR__0643
037d8     FC F4 09 32 |  if_ae	cmp	_var04, _var06 wz
037dc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__0641
037e0                 | LR__0642
037e0                 | LR__0643
037e0     00 F2 55 F2 | 	cmps	_var03, #0 wc
037e4                 | ' 		return(0);
037e4     00 EA 05 C6 |  if_b	mov	result1, #0
037e8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
037ec     FC F4 09 F2 | 	cmp	_var04, _var06 wz
037f0                 | ' 		return(0);
037f0     00 EA 05 A6 |  if_e	mov	result1, #0
037f4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
037f8     00 F4 0D F2 | 	cmp	_var04, #0 wz
037fc                 | ' 		return(-1);
037fc     01 EA 65 A6 |  if_e	neg	result1, #1
03800     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
03804     00 F8 0D F2 | 	cmp	_var06, #0 wz
03808                 | ' 		return(1);
03808     01 EA 05 A6 |  if_e	mov	result1, #1
0380c                 | ' 		return(c1 - c2);
0380c     FA EA 01 56 |  if_ne	mov	result1, _var04
03810     FC EA 81 51 |  if_ne	sub	result1, _var06
03814                 | _fatfs_cc_strncmp_ret
03814     2D 00 64 FD | 	ret
03818                 | 
03818                 | _fatfs_cc_strchr
03818                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
03818                 | ' 	while ((c = *s++) != (char) charwanted)
03818                 | LR__0650
03818     00 EF 01 F6 | 	mov	_var01, arg01
0381c     F7 F0 C1 FA | 	rdbyte	_var02, _var01
03820     F8 F2 E1 F8 | 	getbyte	_var03, _var02, #0
03824     01 F5 E1 F8 | 	getbyte	_var04, arg02, #0
03828     FA F2 09 F2 | 	cmp	_var03, _var04 wz
0382c     01 00 06 F1 | 	add	arg01, #1
03830     14 00 90 AD |  if_e	jmp	#LR__0651
03834     F8 F2 01 F6 | 	mov	_var03, _var02
03838     07 F2 4D F7 | 	zerox	_var03, #7 wz
0383c     00 EA 05 A6 |  if_e	mov	result1, #0
03840     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
03844     D0 FF 9F FD | 	jmp	#LR__0650
03848                 | LR__0651
03848                 | ' 	return((char *)--s);
03848     01 00 86 F1 | 	sub	arg01, #1
0384c     00 EB 01 F6 | 	mov	result1, arg01
03850                 | _fatfs_cc_strchr_ret
03850     2D 00 64 FD | 	ret
03854                 | 
03854                 | _fatfs_cc_disk_initialize
03854     04 4A 05 F6 | 	mov	COUNT_, #4
03858     A8 00 A0 FD | 	call	#pushregs_
0385c     40 F0 07 F1 | 	add	ptra, #64
03860     04 4E 05 F1 | 	add	fp, #4
03864     A7 00 42 FC | 	wrbyte	arg01, fp
03868     01 00 00 FF 
0386c     14 E2 05 F1 | 	add	objptr, ##532
03870     F1 06 02 FB | 	rdlong	arg04, objptr
03874     2C 4E 05 F1 | 	add	fp, #44
03878     A7 06 62 FC | 	wrlong	arg04, fp
0387c     04 E2 85 F1 | 	sub	objptr, #4
03880     F1 06 02 FB | 	rdlong	arg04, objptr
03884     04 4E 05 F1 | 	add	fp, #4
03888     A7 06 62 FC | 	wrlong	arg04, fp
0388c     08 E2 05 F1 | 	add	objptr, #8
03890     F1 06 02 FB | 	rdlong	arg04, objptr
03894     04 4E 05 F1 | 	add	fp, #4
03898     A7 06 62 FC | 	wrlong	arg04, fp
0389c     04 E2 05 F1 | 	add	objptr, #4
038a0     F1 06 02 FB | 	rdlong	arg04, objptr
038a4     04 4E 05 F1 | 	add	fp, #4
038a8     A7 06 62 FC | 	wrlong	arg04, fp
038ac     04 E2 05 F1 | 	add	objptr, #4
038b0     F1 02 48 FC | 	wrbyte	#1, objptr
038b4     01 00 00 FF 
038b8     20 E2 85 F1 | 	sub	objptr, ##544
038bc     38 4E 85 F1 | 	sub	fp, #56
038c0     A7 06 CA FA | 	rdbyte	arg04, fp wz
038c4     04 4E 85 F1 | 	sub	fp, #4
038c8                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
038c8                 | '             return RES_NOTRDY;
038c8     03 EA 05 56 |  if_ne	mov	result1, #3
038cc     D8 05 90 5D |  if_ne	jmp	#LR__0678
038d0     13 00 00 FF 
038d4     10 01 06 F6 | 	mov	arg01, ##10000
038d8     3C D6 BF FD | 	call	#__system___waitus
038dc     30 4E 05 F1 | 	add	fp, #48
038e0     A7 00 02 FB | 	rdlong	arg01, fp
038e4     00 01 08 FC | 	wrpin	#0, arg01
038e8     04 4E 05 F1 | 	add	fp, #4
038ec     A7 00 02 FB | 	rdlong	arg01, fp
038f0     00 01 08 FC | 	wrpin	#0, arg01
038f4     04 4E 05 F1 | 	add	fp, #4
038f8     A7 00 02 FB | 	rdlong	arg01, fp
038fc     00 01 08 FC | 	wrpin	#0, arg01
03900     04 4E 05 F1 | 	add	fp, #4
03904     A7 00 02 FB | 	rdlong	arg01, fp
03908     09 00 80 FF 
0390c     00 01 08 FC | 	wrpin	##4608, arg01
03910     0C 4E 85 F1 | 	sub	fp, #12
03914     A7 00 02 FB | 	rdlong	arg01, fp
03918     59 00 62 FD | 	drvh	arg01
0391c     04 4E 05 F1 | 	add	fp, #4
03920     A7 00 02 FB | 	rdlong	arg01, fp
03924     59 00 62 FD | 	drvh	arg01
03928     04 4E 05 F1 | 	add	fp, #4
0392c     A7 00 02 FB | 	rdlong	arg01, fp
03930     59 00 62 FD | 	drvh	arg01
03934     04 4E 05 F1 | 	add	fp, #4
03938     A7 00 02 FB | 	rdlong	arg01, fp
0393c     59 00 62 FD | 	drvh	arg01
03940     20 4E 85 F1 | 	sub	fp, #32
03944     00 04 80 FF 
03948     A7 20 68 FC | 	wrlong	##524304, fp
0394c     04 4E 05 F1 | 	add	fp, #4
03950     20 03 80 FF 
03954     A7 90 68 FC | 	wrlong	##409672, fp
03958     14 4E 05 F1 | 	add	fp, #20
0395c     A7 0A 02 FB | 	rdlong	local01, fp
03960     18 4E 85 F1 | 	sub	fp, #24
03964     A7 04 02 FB | 	rdlong	arg03, fp
03968     40 0A 62 FD | 	dirl	local01
0396c     A0 03 80 FF 
03970     05 91 08 FC | 	wrpin	##475208, local01
03974     05 05 12 FC | 	wxpin	arg03, local01
03978     05 01 28 FC | 	wypin	#0, local01
0397c     41 0A 62 FD | 	dirh	local01
03980     1C 4E 05 F1 | 	add	fp, #28
03984     A7 0C 02 FB | 	rdlong	local02, fp
03988     06 0B 82 F1 | 	sub	local01, local02
0398c     07 0A 06 F5 | 	and	local01, #7
03990     18 0A 66 F0 | 	shl	local01, #24
03994     78 02 06 F6 | 	mov	arg02, #120
03998     05 03 42 F5 | 	or	arg02, local01
0399c     14 4E 85 F1 | 	sub	fp, #20
039a0     A7 02 62 FC | 	wrlong	arg02, fp
039a4     14 4E 05 F1 | 	add	fp, #20
039a8     A7 00 02 FB | 	rdlong	arg01, fp
039ac     10 02 26 F4 | 	bith	arg02, #16
039b0     40 00 62 FD | 	dirl	arg01
039b4     00 03 02 FC | 	wrpin	arg02, arg01
039b8     00 3F 18 FC | 	wxpin	#31, arg01
039bc     FF FF FF FF 
039c0     00 FF 2B FC | 	wypin	##-1, arg01
039c4     41 00 62 FD | 	dirh	arg01
039c8     04 4E 85 F1 | 	sub	fp, #4
039cc     A7 02 02 FB | 	rdlong	arg02, fp
039d0     08 4E 05 F1 | 	add	fp, #8
039d4     A7 0E 02 FB | 	rdlong	local03, fp
039d8     07 03 82 F1 | 	sub	arg02, local03
039dc     07 02 06 F5 | 	and	arg02, #7
039e0     18 02 66 F0 | 	shl	arg02, #24
039e4     14 4E 85 F1 | 	sub	fp, #20
039e8     A7 02 62 FC | 	wrlong	arg02, fp
039ec     29 00 00 FF 
039f0     7A 02 46 F5 | 	or	arg02, ##21114
039f4     A7 02 62 FC | 	wrlong	arg02, fp
039f8     14 4E 05 F1 | 	add	fp, #20
039fc     A7 00 02 FB | 	rdlong	arg01, fp
03a00     40 00 62 FD | 	dirl	arg01
03a04     00 03 02 FC | 	wrpin	arg02, arg01
03a08     00 4F 18 FC | 	wxpin	#39, arg01
03a0c     00 01 28 FC | 	wypin	#0, arg01
03a10     41 00 62 FD | 	dirh	arg01
03a14     28 4E 85 F1 | 	sub	fp, #40
03a18     A7 00 02 F6 | 	mov	arg01, fp
03a1c     14 4E 85 F1 | 	sub	fp, #20
03a20     0A 02 06 F6 | 	mov	arg02, #10
03a24     08 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03a28     00 00 06 F6 | 	mov	arg01, #0
03a2c     00 02 06 F6 | 	mov	arg02, #0
03a30     D4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03a34     10 80 B0 FD | 	call	#_fatfs_cc_deselect_0605
03a38     64 00 06 F6 | 	mov	arg01, #100
03a3c     D8 D4 BF FD | 	call	#__system___waitus
03a40     14 4E 05 F1 | 	add	fp, #20
03a44     A7 00 02 F6 | 	mov	arg01, fp
03a48     14 4E 85 F1 | 	sub	fp, #20
03a4c     0A 02 06 F6 | 	mov	arg02, #10
03a50     DC 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03a54     0C 4E 05 F1 | 	add	fp, #12
03a58     A7 00 48 FC | 	wrbyte	#0, fp
03a5c     0C 4E 85 F1 | 	sub	fp, #12
03a60     00 00 06 F6 | 	mov	arg01, #0
03a64     00 02 06 F6 | 	mov	arg02, #0
03a68     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03a6c     F5 06 E2 F8 | 	getbyte	arg04, result1, #0
03a70     01 06 0E F2 | 	cmp	arg04, #1 wz
03a74     B8 03 90 5D |  if_ne	jmp	#LR__0677
03a78     08 00 06 F6 | 	mov	arg01, #8
03a7c     AA 03 06 F6 | 	mov	arg02, #426
03a80     84 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03a84     F5 EA E1 F8 | 	getbyte	result1, result1, #0
03a88     01 EA 0D F2 | 	cmp	result1, #1 wz
03a8c     98 01 90 5D |  if_ne	jmp	#LR__0663
03a90     14 4E 05 F1 | 	add	fp, #20
03a94     A7 00 02 F6 | 	mov	arg01, fp
03a98     14 4E 85 F1 | 	sub	fp, #20
03a9c     04 02 06 F6 | 	mov	arg02, #4
03aa0     8C 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03aa4     16 4E 05 F1 | 	add	fp, #22
03aa8     A7 10 C2 FA | 	rdbyte	local04, fp
03aac     16 4E 85 F1 | 	sub	fp, #22
03ab0     01 10 0E F2 | 	cmp	local04, #1 wz
03ab4     17 4E 05 A1 |  if_e	add	fp, #23
03ab8     A7 0E C2 AA |  if_e	rdbyte	local03, fp
03abc     17 4E 85 A1 |  if_e	sub	fp, #23
03ac0     AA 0E 0E A2 |  if_e	cmp	local03, #170 wz
03ac4     68 03 90 5D |  if_ne	jmp	#LR__0676
03ac8                 | ' 				for (tmr = 1000; tmr; tmr--) {
03ac8     18 4E 05 F1 | 	add	fp, #24
03acc     01 00 80 FF 
03ad0     A7 D0 6B FC | 	wrlong	##1000, fp
03ad4     18 4E 85 F1 | 	sub	fp, #24
03ad8                 | LR__0660
03ad8     18 4E 05 F1 | 	add	fp, #24
03adc     A7 0A 0A FB | 	rdlong	local01, fp wz
03ae0     18 4E 85 F1 | 	sub	fp, #24
03ae4     3C 00 90 AD |  if_e	jmp	#LR__0661
03ae8     A9 00 06 F6 | 	mov	arg01, #169
03aec     1E 02 C6 F9 | 	decod	arg02, #30
03af0     14 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03af4     F5 10 02 F6 | 	mov	local04, result1
03af8     07 10 4E F7 | 	zerox	local04, #7 wz
03afc     24 00 90 AD |  if_e	jmp	#LR__0661
03b00     01 00 00 FF 
03b04     E8 01 06 F6 | 	mov	arg01, ##1000
03b08     0C D4 BF FD | 	call	#__system___waitus
03b0c     18 4E 05 F1 | 	add	fp, #24
03b10     A7 10 02 FB | 	rdlong	local04, fp
03b14     01 10 86 F1 | 	sub	local04, #1
03b18     A7 10 62 FC | 	wrlong	local04, fp
03b1c     18 4E 85 F1 | 	sub	fp, #24
03b20     B4 FF 9F FD | 	jmp	#LR__0660
03b24                 | LR__0661
03b24     18 4E 05 F1 | 	add	fp, #24
03b28     A7 10 0A FB | 	rdlong	local04, fp wz
03b2c     18 4E 85 F1 | 	sub	fp, #24
03b30     4C 00 90 AD |  if_e	jmp	#LR__0662
03b34     3A 00 06 F6 | 	mov	arg01, #58
03b38     00 02 06 F6 | 	mov	arg02, #0
03b3c     C8 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03b40     F5 0E 02 F6 | 	mov	local03, result1
03b44     07 0E 4E F7 | 	zerox	local03, #7 wz
03b48     34 00 90 5D |  if_ne	jmp	#LR__0662
03b4c     14 4E 05 F1 | 	add	fp, #20
03b50     A7 00 02 F6 | 	mov	arg01, fp
03b54     14 4E 85 F1 | 	sub	fp, #20
03b58     04 02 06 F6 | 	mov	arg02, #4
03b5c     D0 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0595
03b60     14 4E 05 F1 | 	add	fp, #20
03b64     A7 0A C2 FA | 	rdbyte	local01, fp
03b68     40 0A CE F7 | 	test	local01, #64 wz
03b6c     0C 10 06 56 |  if_ne	mov	local04, #12
03b70     04 10 06 A6 |  if_e	mov	local04, #4
03b74     08 4E 85 F1 | 	sub	fp, #8
03b78     A7 10 42 FC | 	wrbyte	local04, fp
03b7c     0C 4E 85 F1 | 	sub	fp, #12
03b80                 | LR__0662
03b80     14 10 06 FB | 	rdlong	local04, #20
03b84     18 4E 05 F1 | 	add	fp, #24
03b88     A7 10 62 FC | 	wrlong	local04, fp
03b8c     0C 4E 05 F1 | 	add	fp, #12
03b90     A7 10 02 FB | 	rdlong	local04, fp
03b94     1B 10 26 F4 | 	bith	local04, #27
03b98     A7 10 62 FC | 	wrlong	local04, fp
03b9c     0C 4E 85 F1 | 	sub	fp, #12
03ba0     A7 10 02 FB | 	rdlong	local04, fp
03ba4     18 4E 85 F1 | 	sub	fp, #24
03ba8     68 78 04 FF 
03bac     81 11 16 F2 | 	cmp	local04, ##150000001 wc
03bb0     1C 4E 05 C1 |  if_b	add	fp, #28
03bb4     00 01 80 CF 
03bb8     A7 08 68 CC |  if_b	wrlong	##131076, fp
03bbc     1C 4E 85 C1 |  if_b	sub	fp, #28
03bc0     6C 02 90 CD |  if_b	jmp	#LR__0676
03bc4     18 4E 05 F1 | 	add	fp, #24
03bc8     A7 10 02 FB | 	rdlong	local04, fp
03bcc     18 4E 85 F1 | 	sub	fp, #24
03bd0     E1 F5 05 FF 
03bd4     01 10 16 F2 | 	cmp	local04, ##200000001 wc
03bd8     1C 4E 05 C1 |  if_b	add	fp, #28
03bdc     00 01 80 CF 
03be0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
03be4     1C 4E 85 C1 |  if_b	sub	fp, #28
03be8     44 02 90 CD |  if_b	jmp	#LR__0676
03bec     18 4E 05 F1 | 	add	fp, #24
03bf0     A7 10 02 FB | 	rdlong	local04, fp
03bf4     18 4E 85 F1 | 	sub	fp, #24
03bf8     3B 58 08 FF 
03bfc     01 10 16 F2 | 	cmp	local04, ##280000001 wc
03c00     1C 4E 05 C1 |  if_b	add	fp, #28
03c04     00 01 80 CF 
03c08     A7 0C 68 CC |  if_b	wrlong	##131078, fp
03c0c     1C 4E 85 C1 |  if_b	sub	fp, #28
03c10     1C 02 90 CD |  if_b	jmp	#LR__0676
03c14     1C 4E 05 F1 | 	add	fp, #28
03c18     80 01 80 FF 
03c1c     A7 10 68 FC | 	wrlong	##196616, fp
03c20     1C 4E 85 F1 | 	sub	fp, #28
03c24     08 02 90 FD | 	jmp	#LR__0676
03c28                 | LR__0663
03c28     A9 00 06 F6 | 	mov	arg01, #169
03c2c     00 02 06 F6 | 	mov	arg02, #0
03c30     D4 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03c34     F5 10 E2 F8 | 	getbyte	local04, result1, #0
03c38     02 10 16 F2 | 	cmp	local04, #2 wc
03c3c     18 00 90 3D |  if_ae	jmp	#LR__0664
03c40     0C 4E 05 F1 | 	add	fp, #12
03c44     A7 04 48 FC | 	wrbyte	#2, fp
03c48     04 4E 05 F1 | 	add	fp, #4
03c4c     A7 52 49 FC | 	wrbyte	#169, fp
03c50     10 4E 85 F1 | 	sub	fp, #16
03c54     14 00 90 FD | 	jmp	#LR__0665
03c58                 | LR__0664
03c58     0C 4E 05 F1 | 	add	fp, #12
03c5c     A7 02 48 FC | 	wrbyte	#1, fp
03c60     04 4E 05 F1 | 	add	fp, #4
03c64     A7 02 48 FC | 	wrbyte	#1, fp
03c68     10 4E 85 F1 | 	sub	fp, #16
03c6c                 | LR__0665
03c6c                 | ' 				ty =  0x01 ; cmd =  (1) ;
03c6c                 | ' 			}
03c6c                 | ' 			for (tmr = 1000; tmr; tmr--) {
03c6c     18 4E 05 F1 | 	add	fp, #24
03c70     01 00 80 FF 
03c74     A7 D0 6B FC | 	wrlong	##1000, fp
03c78     18 4E 85 F1 | 	sub	fp, #24
03c7c                 | LR__0666
03c7c     18 4E 05 F1 | 	add	fp, #24
03c80     A7 0E 0A FB | 	rdlong	local03, fp wz
03c84     18 4E 85 F1 | 	sub	fp, #24
03c88     44 00 90 AD |  if_e	jmp	#LR__0667
03c8c     10 4E 05 F1 | 	add	fp, #16
03c90     A7 00 C2 FA | 	rdbyte	arg01, fp
03c94     10 4E 85 F1 | 	sub	fp, #16
03c98     00 02 06 F6 | 	mov	arg02, #0
03c9c     68 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03ca0     F5 10 02 F6 | 	mov	local04, result1
03ca4     07 10 4E F7 | 	zerox	local04, #7 wz
03ca8     24 00 90 AD |  if_e	jmp	#LR__0667
03cac     01 00 00 FF 
03cb0     E8 01 06 F6 | 	mov	arg01, ##1000
03cb4     60 D2 BF FD | 	call	#__system___waitus
03cb8     18 4E 05 F1 | 	add	fp, #24
03cbc     A7 10 02 FB | 	rdlong	local04, fp
03cc0     01 10 86 F1 | 	sub	local04, #1
03cc4     A7 10 62 FC | 	wrlong	local04, fp
03cc8     18 4E 85 F1 | 	sub	fp, #24
03ccc     AC FF 9F FD | 	jmp	#LR__0666
03cd0                 | LR__0667
03cd0     18 4E 05 F1 | 	add	fp, #24
03cd4     A7 10 0A FB | 	rdlong	local04, fp wz
03cd8     18 4E 85 F1 | 	sub	fp, #24
03cdc     14 00 90 AD |  if_e	jmp	#LR__0668
03ce0     10 00 06 F6 | 	mov	arg01, #16
03ce4     09 02 C6 F9 | 	decod	arg02, #9
03ce8     1C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03cec     07 EA 4D F7 | 	zerox	result1, #7 wz
03cf0     0C 00 90 AD |  if_e	jmp	#LR__0669
03cf4                 | LR__0668
03cf4     0C 4E 05 F1 | 	add	fp, #12
03cf8     A7 00 48 FC | 	wrbyte	#0, fp
03cfc     0C 4E 85 F1 | 	sub	fp, #12
03d00                 | LR__0669
03d00     14 10 06 FB | 	rdlong	local04, #20
03d04     18 4E 05 F1 | 	add	fp, #24
03d08     A7 10 62 FC | 	wrlong	local04, fp
03d0c     18 4E 85 F1 | 	sub	fp, #24
03d10     F0 FA 02 FF 
03d14     01 11 16 F2 | 	cmp	local04, ##100000001 wc
03d18     18 00 90 3D |  if_ae	jmp	#LR__0670
03d1c     24 4E 05 F1 | 	add	fp, #36
03d20     A7 10 02 FB | 	rdlong	local04, fp
03d24     1B 10 26 F4 | 	bith	local04, #27
03d28     A7 10 62 FC | 	wrlong	local04, fp
03d2c     24 4E 85 F1 | 	sub	fp, #36
03d30     2C 00 90 FD | 	jmp	#LR__0671
03d34                 | LR__0670
03d34     18 4E 05 F1 | 	add	fp, #24
03d38     A7 10 02 FB | 	rdlong	local04, fp
03d3c     18 4E 85 F1 | 	sub	fp, #24
03d40     E1 F5 05 FF 
03d44     01 10 16 F2 | 	cmp	local04, ##200000001 wc
03d48     24 4E 05 C1 |  if_b	add	fp, #36
03d4c     A7 10 02 CB |  if_b	rdlong	local04, fp
03d50     80 00 04 CF 
03d54     00 10 46 C5 |  if_b	or	local04, ##134283264
03d58     A7 10 62 CC |  if_b	wrlong	local04, fp
03d5c     24 4E 85 C1 |  if_b	sub	fp, #36
03d60                 | LR__0671
03d60     18 4E 05 F1 | 	add	fp, #24
03d64     A7 10 02 FB | 	rdlong	local04, fp
03d68     18 4E 85 F1 | 	sub	fp, #24
03d6c     F0 FA 02 FF 
03d70     01 11 16 F2 | 	cmp	local04, ##100000001 wc
03d74     1C 4E 05 C1 |  if_b	add	fp, #28
03d78     00 01 80 CF 
03d7c     A7 08 68 CC |  if_b	wrlong	##131076, fp
03d80     1C 4E 85 C1 |  if_b	sub	fp, #28
03d84     A8 00 90 CD |  if_b	jmp	#LR__0675
03d88     18 4E 05 F1 | 	add	fp, #24
03d8c     A7 10 02 FB | 	rdlong	local04, fp
03d90     18 4E 85 F1 | 	sub	fp, #24
03d94     68 78 04 FF 
03d98     81 11 16 F2 | 	cmp	local04, ##150000001 wc
03d9c     1C 4E 05 C1 |  if_b	add	fp, #28
03da0     80 01 80 CF 
03da4     A7 0C 68 CC |  if_b	wrlong	##196614, fp
03da8     1C 4E 85 C1 |  if_b	sub	fp, #28
03dac     80 00 90 CD |  if_b	jmp	#LR__0674
03db0     18 4E 05 F1 | 	add	fp, #24
03db4     A7 10 02 FB | 	rdlong	local04, fp
03db8     18 4E 85 F1 | 	sub	fp, #24
03dbc     E1 F5 05 FF 
03dc0     01 10 16 F2 | 	cmp	local04, ##200000001 wc
03dc4     1C 4E 05 C1 |  if_b	add	fp, #28
03dc8     00 02 80 CF 
03dcc     A7 10 68 CC |  if_b	wrlong	##262152, fp
03dd0     1C 4E 85 C1 |  if_b	sub	fp, #28
03dd4     58 00 90 CD |  if_b	jmp	#LR__0673
03dd8     18 4E 05 F1 | 	add	fp, #24
03ddc     A7 10 02 FB | 	rdlong	local04, fp
03de0     18 4E 85 F1 | 	sub	fp, #24
03de4     59 73 07 FF 
03de8     81 10 16 F2 | 	cmp	local04, ##250000001 wc
03dec     1C 4E 05 C1 |  if_b	add	fp, #28
03df0     80 02 80 CF 
03df4     A7 14 68 CC |  if_b	wrlong	##327690, fp
03df8     1C 4E 85 C1 |  if_b	sub	fp, #28
03dfc     30 00 90 CD |  if_b	jmp	#LR__0672
03e00     18 4E 05 F1 | 	add	fp, #24
03e04     A7 10 02 FB | 	rdlong	local04, fp
03e08     18 4E 85 F1 | 	sub	fp, #24
03e0c     D1 F0 08 FF 
03e10     01 11 16 F2 | 	cmp	local04, ##300000001 wc
03e14     1C 4E 05 C1 |  if_b	add	fp, #28
03e18     00 03 80 CF 
03e1c     A7 18 68 CC |  if_b	wrlong	##393228, fp
03e20     1C 4E 85 F3 | 	sumc	fp, #28
03e24     80 03 80 3F 
03e28     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
03e2c     1C 4E 85 31 |  if_ae	sub	fp, #28
03e30                 | LR__0672
03e30                 | LR__0673
03e30                 | LR__0674
03e30                 | LR__0675
03e30                 | LR__0676
03e30                 | LR__0677
03e30     0C 4E 05 F1 | 	add	fp, #12
03e34     A7 10 C2 FA | 	rdbyte	local04, fp
03e38     01 00 00 FF 
03e3c     21 E2 05 F1 | 	add	objptr, ##545
03e40     F1 10 42 FC | 	wrbyte	local04, objptr
03e44     A7 0A CA FA | 	rdbyte	local01, fp wz
03e48     00 10 06 56 |  if_ne	mov	local04, #0
03e4c     01 10 06 A6 |  if_e	mov	local04, #1
03e50     20 4E 05 F1 | 	add	fp, #32
03e54     A7 10 42 FC | 	wrbyte	local04, fp
03e58     A7 10 C2 FA | 	rdbyte	local04, fp
03e5c     2C 4E 85 F1 | 	sub	fp, #44
03e60     01 E2 85 F1 | 	sub	objptr, #1
03e64     F1 10 42 FC | 	wrbyte	local04, objptr
03e68     01 00 00 FF 
03e6c     20 E2 85 F1 | 	sub	objptr, ##544
03e70     D4 7B B0 FD | 	call	#_fatfs_cc_deselect_0605
03e74     34 4E 05 F1 | 	add	fp, #52
03e78     A7 00 02 FB | 	rdlong	arg01, fp
03e7c     18 4E 85 F1 | 	sub	fp, #24
03e80     A7 02 02 FB | 	rdlong	arg02, fp
03e84     00 03 12 FC | 	wxpin	arg02, arg01
03e88     1C 4E 05 F1 | 	add	fp, #28
03e8c     A7 00 02 FB | 	rdlong	arg01, fp
03e90     14 4E 85 F1 | 	sub	fp, #20
03e94     A7 02 02 FB | 	rdlong	arg02, fp
03e98     00 03 02 FC | 	wrpin	arg02, arg01
03e9c                 | ' 
03e9c                 | ' 		}
03e9c                 | ' 	}
03e9c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
03e9c                 | ' 	CardType = ty;
03e9c                 | ' 	s = ty ? 0 :  0x01 ;
03e9c                 | ' 	Stat = s;
03e9c                 | ' 
03e9c                 | ' 	deselect();
03e9c                 | ' 
03e9c                 | ' 
03e9c                 | ' 	_wxpin( PIN_CLK, ck_div );
03e9c                 | ' 	_wrpin( PIN_DI, spm_tx );
03e9c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
03e9c                 | ' 	return s;
03e9c     08 4E 05 F1 | 	add	fp, #8
03ea0     A7 EA C1 FA | 	rdbyte	result1, fp
03ea4     2C 4E 85 F1 | 	sub	fp, #44
03ea8                 | LR__0678
03ea8     A7 F0 03 F6 | 	mov	ptra, fp
03eac     B2 00 A0 FD | 	call	#popregs_
03eb0                 | _fatfs_cc_disk_initialize_ret
03eb0     2D 00 64 FD | 	ret
03eb4                 | 
03eb4                 | _fatfs_cc_disk_read
03eb4     05 4A 05 F6 | 	mov	COUNT_, #5
03eb8     A8 00 A0 FD | 	call	#pushregs_
03ebc     01 0B 02 F6 | 	mov	local01, arg02
03ec0     02 0D 02 F6 | 	mov	local02, arg03
03ec4     03 0F 02 F6 | 	mov	local03, arg04
03ec8     00 00 0E F2 | 	cmp	arg01, #0 wz
03ecc     01 EA 05 56 |  if_ne	mov	result1, #1
03ed0                 | ' 
03ed0                 | ' 	return Stat;
03ed0     01 00 00 AF 
03ed4     20 E2 05 A1 |  if_e	add	objptr, ##544
03ed8     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
03edc     01 00 00 AF 
03ee0     20 E2 85 A1 |  if_e	sub	objptr, ##544
03ee4     F5 EA E1 F8 | 	getbyte	result1, result1, #0
03ee8     01 EA CD F7 | 	test	result1, #1 wz
03eec     03 EA 05 56 |  if_ne	mov	result1, #3
03ef0     84 00 90 5D |  if_ne	jmp	#LR__0682
03ef4     01 00 00 FF 
03ef8     21 E2 05 F1 | 	add	objptr, ##545
03efc     F1 10 C2 FA | 	rdbyte	local04, objptr
03f00     01 00 00 FF 
03f04     21 E2 85 F1 | 	sub	objptr, ##545
03f08     08 10 CE F7 | 	test	local04, #8 wz
03f0c     09 0C 66 A0 |  if_e	shl	local02, #9
03f10     02 0E 16 F2 | 	cmp	local03, #2 wc
03f14     12 10 06 36 |  if_ae	mov	local04, #18
03f18     11 10 06 C6 |  if_b	mov	local04, #17
03f1c     06 03 02 F6 | 	mov	arg02, local02
03f20     08 01 02 F6 | 	mov	arg01, local04
03f24     E0 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03f28     F5 12 02 F6 | 	mov	local05, result1
03f2c     07 12 4E F7 | 	zerox	local05, #7 wz
03f30     30 00 90 5D |  if_ne	jmp	#LR__0681
03f34                 | ' 		do {
03f34                 | LR__0680
03f34     05 01 02 F6 | 	mov	arg01, local01
03f38     09 02 C6 F9 | 	decod	arg02, #9
03f3c     1C 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0613
03f40     00 EA 0D F2 | 	cmp	result1, #0 wz
03f44     01 00 00 5F 
03f48     00 0A 06 51 |  if_ne	add	local01, ##512
03f4c     F9 0F 6E 5B |  if_ne	djnz	local03, #LR__0680
03f50     08 11 E2 F8 | 	getbyte	local04, local04, #0
03f54     12 10 0E F2 | 	cmp	local04, #18 wz
03f58     0C 00 06 A6 |  if_e	mov	arg01, #12
03f5c     00 02 06 A6 |  if_e	mov	arg02, #0
03f60     A4 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0619
03f64                 | LR__0681
03f64     E0 7A B0 FD | 	call	#_fatfs_cc_deselect_0605
03f68                 | ' 	}
03f68                 | ' 	deselect();
03f68                 | ' 
03f68                 | ' 	return count ? RES_ERROR : RES_OK;
03f68     00 0E 0E F2 | 	cmp	local03, #0 wz
03f6c     01 12 06 56 |  if_ne	mov	local05, #1
03f70     00 12 06 A6 |  if_e	mov	local05, #0
03f74     09 EB 01 F6 | 	mov	result1, local05
03f78                 | LR__0682
03f78     A7 F0 03 F6 | 	mov	ptra, fp
03f7c     B2 00 A0 FD | 	call	#popregs_
03f80                 | _fatfs_cc_disk_read_ret
03f80     2D 00 64 FD | 	ret
03f84                 | 
03f84                 | _fatfs_cc_disk_write
03f84     04 4A 05 F6 | 	mov	COUNT_, #4
03f88     A8 00 A0 FD | 	call	#pushregs_
03f8c     01 0B 02 F6 | 	mov	local01, arg02
03f90     03 0D 02 F6 | 	mov	local02, arg04
03f94     02 0F 02 F6 | 	mov	local03, arg03
03f98     00 00 0E F2 | 	cmp	arg01, #0 wz
03f9c     01 EA 05 56 |  if_ne	mov	result1, #1
03fa0                 | ' 
03fa0                 | ' 	return Stat;
03fa0     01 00 00 AF 
03fa4     20 E2 05 A1 |  if_e	add	objptr, ##544
03fa8     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
03fac     01 00 00 AF 
03fb0     20 E2 85 A1 |  if_e	sub	objptr, ##544
03fb4     F5 EA E1 F8 | 	getbyte	result1, result1, #0
03fb8     01 EA CD F7 | 	test	result1, #1 wz
03fbc     03 EA 05 56 |  if_ne	mov	result1, #3
03fc0     D4 00 90 5D |  if_ne	jmp	#LR__0694
03fc4     01 00 00 FF 
03fc8     21 E2 05 F1 | 	add	objptr, ##545
03fcc     F1 04 C2 FA | 	rdbyte	arg03, objptr
03fd0     01 00 00 FF 
03fd4     21 E2 85 F1 | 	sub	objptr, ##545
03fd8     08 04 CE F7 | 	test	arg03, #8 wz
03fdc     09 0E 66 A0 |  if_e	shl	local03, #9
03fe0     01 0C 0E F2 | 	cmp	local02, #1 wz
03fe4     30 00 90 5D |  if_ne	jmp	#LR__0690
03fe8     18 00 06 F6 | 	mov	arg01, #24
03fec     07 03 02 F6 | 	mov	arg02, local03
03ff0     14 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0619
03ff4     F5 10 02 F6 | 	mov	local04, result1
03ff8     07 10 4E F7 | 	zerox	local04, #7 wz
03ffc     84 00 90 5D |  if_ne	jmp	#LR__0693
04000     05 01 02 F6 | 	mov	arg01, local01
04004     FE 02 06 F6 | 	mov	arg02, #254
04008     30 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0615
0400c     00 EA 0D F2 | 	cmp	result1, #0 wz
04010     00 0C 06 56 |  if_ne	mov	local02, #0
04014     6C 00 90 FD | 	jmp	#LR__0693
04018                 | LR__0690
04018     01 00 00 FF 
0401c     21 E2 05 F1 | 	add	objptr, ##545
04020     F1 10 C2 FA | 	rdbyte	local04, objptr
04024     01 00 00 FF 
04028     21 E2 85 F1 | 	sub	objptr, ##545
0402c     06 10 CE F7 | 	test	local04, #6 wz
04030     97 00 06 56 |  if_ne	mov	arg01, #151
04034     06 03 02 56 |  if_ne	mov	arg02, local02
04038     CC 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0619
0403c     07 03 02 F6 | 	mov	arg02, local03
04040     19 00 06 F6 | 	mov	arg01, #25
04044     C0 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0619
04048     F5 10 02 F6 | 	mov	local04, result1
0404c     07 10 4E F7 | 	zerox	local04, #7 wz
04050     30 00 90 5D |  if_ne	jmp	#LR__0692
04054                 | ' 			do {
04054                 | LR__0691
04054     05 01 02 F6 | 	mov	arg01, local01
04058     FC 02 06 F6 | 	mov	arg02, #252
0405c     DC 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0615
04060     00 EA 0D F2 | 	cmp	result1, #0 wz
04064     01 00 00 5F 
04068     00 0A 06 51 |  if_ne	add	local01, ##512
0406c     F9 0D 6E 5B |  if_ne	djnz	local02, #LR__0691
04070     00 00 06 F6 | 	mov	arg01, #0
04074     FD 02 06 F6 | 	mov	arg02, #253
04078     C0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0615
0407c     00 EA 0D F2 | 	cmp	result1, #0 wz
04080     01 0C 06 A6 |  if_e	mov	local02, #1
04084                 | LR__0692
04084                 | LR__0693
04084     C0 79 B0 FD | 	call	#_fatfs_cc_deselect_0605
04088                 | ' 				count = 1;
04088                 | ' 		}
04088                 | ' 	}
04088                 | ' 	deselect();
04088                 | ' 
04088                 | ' 	return count ? RES_ERROR : RES_OK;
04088     00 0C 0E F2 | 	cmp	local02, #0 wz
0408c     01 10 06 56 |  if_ne	mov	local04, #1
04090     00 10 06 A6 |  if_e	mov	local04, #0
04094     08 EB 01 F6 | 	mov	result1, local04
04098                 | LR__0694
04098     A7 F0 03 F6 | 	mov	ptra, fp
0409c     B2 00 A0 FD | 	call	#popregs_
040a0                 | _fatfs_cc_disk_write_ret
040a0     2D 00 64 FD | 	ret
040a4                 | 
040a4                 | _fatfs_cc_disk_ioctl
040a4     01 4A 05 F6 | 	mov	COUNT_, #1
040a8     A8 00 A0 FD | 	call	#pushregs_
040ac     30 F0 07 F1 | 	add	ptra, #48
040b0     04 4E 05 F1 | 	add	fp, #4
040b4     A7 00 42 FC | 	wrbyte	arg01, fp
040b8     04 4E 05 F1 | 	add	fp, #4
040bc     A7 02 42 FC | 	wrbyte	arg02, fp
040c0     04 4E 05 F1 | 	add	fp, #4
040c4     A7 04 62 FC | 	wrlong	arg03, fp
040c8     08 4E 85 F1 | 	sub	fp, #8
040cc     A7 00 CA FA | 	rdbyte	arg01, fp wz
040d0     04 4E 85 F1 | 	sub	fp, #4
040d4     01 EA 05 56 |  if_ne	mov	result1, #1
040d8                 | ' 
040d8                 | ' 	return Stat;
040d8     01 00 00 AF 
040dc     20 E2 05 A1 |  if_e	add	objptr, ##544
040e0     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
040e4     01 00 00 AF 
040e8     20 E2 85 A1 |  if_e	sub	objptr, ##544
040ec     F5 EA E1 F8 | 	getbyte	result1, result1, #0
040f0     01 EA CD F7 | 	test	result1, #1 wz
040f4     03 EA 05 56 |  if_ne	mov	result1, #3
040f8     E4 01 90 5D |  if_ne	jmp	#LR__0708
040fc     10 4E 05 F1 | 	add	fp, #16
04100     A7 02 68 FC | 	wrlong	#1, fp
04104                 | ' 
04104                 | ' 	res = RES_ERROR;
04104                 | ' 	switch (ctrl) {
04104     08 4E 85 F1 | 	sub	fp, #8
04108     A7 0A C2 FA | 	rdbyte	local01, fp
0410c     08 4E 85 F1 | 	sub	fp, #8
04110     04 0A 26 F3 | 	fle	local01, #4
04114     30 0A 62 FD | 	jmprel	local01
04118                 | LR__0700
04118     10 00 90 FD | 	jmp	#LR__0701
0411c     24 00 90 FD | 	jmp	#LR__0702
04120     A0 01 90 FD | 	jmp	#LR__0706
04124     80 01 90 FD | 	jmp	#LR__0705
04128     98 01 90 FD | 	jmp	#LR__0706
0412c                 | LR__0701
0412c     9C 79 B0 FD | 	call	#_fatfs_cc_select_0609
04130     00 EA 0D F2 | 	cmp	result1, #0 wz
04134     10 4E 05 51 |  if_ne	add	fp, #16
04138     A7 00 68 5C |  if_ne	wrlong	#0, fp
0413c     10 4E 85 51 |  if_ne	sub	fp, #16
04140                 | ' 			break;
04140     8C 01 90 FD | 	jmp	#LR__0707
04144                 | LR__0702
04144     09 00 06 F6 | 	mov	arg01, #9
04148     00 02 06 F6 | 	mov	arg02, #0
0414c     B8 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0619
04150     F5 0A 02 F6 | 	mov	local01, result1
04154     07 0A 4E F7 | 	zerox	local01, #7 wz
04158     74 01 90 5D |  if_ne	jmp	#LR__0707
0415c     18 4E 05 F1 | 	add	fp, #24
04160     A7 00 02 F6 | 	mov	arg01, fp
04164     18 4E 85 F1 | 	sub	fp, #24
04168     10 02 06 F6 | 	mov	arg02, #16
0416c     EC 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0613
04170     00 EA 0D F2 | 	cmp	result1, #0 wz
04174     58 01 90 AD |  if_e	jmp	#LR__0707
04178     18 4E 05 F1 | 	add	fp, #24
0417c     A7 0A C2 FA | 	rdbyte	local01, fp
04180     18 4E 85 F1 | 	sub	fp, #24
04184     06 0A 46 F0 | 	shr	local01, #6
04188     01 0A 0E F2 | 	cmp	local01, #1 wz
0418c     5C 00 90 5D |  if_ne	jmp	#LR__0703
04190     21 4E 05 F1 | 	add	fp, #33
04194     A7 0A C2 FA | 	rdbyte	local01, fp
04198     01 4E 85 F1 | 	sub	fp, #1
0419c     A7 EA C1 FA | 	rdbyte	result1, fp
041a0     F5 EA 31 F9 | 	getword	result1, result1, #0
041a4     08 EA 65 F0 | 	shl	result1, #8
041a8     F5 0A 02 F1 | 	add	local01, result1
041ac     01 4E 85 F1 | 	sub	fp, #1
041b0     A7 EA C1 FA | 	rdbyte	result1, fp
041b4     3F EA 05 F5 | 	and	result1, #63
041b8     10 EA 65 F0 | 	shl	result1, #16
041bc     F5 0A 02 F1 | 	add	local01, result1
041c0     01 0A 06 F1 | 	add	local01, #1
041c4     09 4E 05 F1 | 	add	fp, #9
041c8     A7 0A 62 FC | 	wrlong	local01, fp
041cc     1C 4E 85 F1 | 	sub	fp, #28
041d0     A7 0A 02 FB | 	rdlong	local01, fp
041d4     1C 4E 05 F1 | 	add	fp, #28
041d8     A7 EA 01 FB | 	rdlong	result1, fp
041dc     28 4E 85 F1 | 	sub	fp, #40
041e0     0A EA 65 F0 | 	shl	result1, #10
041e4     05 EB 61 FC | 	wrlong	result1, local01
041e8     AC 00 90 FD | 	jmp	#LR__0704
041ec                 | LR__0703
041ec     1D 4E 05 F1 | 	add	fp, #29
041f0     A7 0A C2 FA | 	rdbyte	local01, fp
041f4     05 0B 42 F8 | 	getnib	local01, local01, #0
041f8     05 4E 05 F1 | 	add	fp, #5
041fc     A7 EA C1 FA | 	rdbyte	result1, fp
04200     80 EA 05 F5 | 	and	result1, #128
04204     07 EA C5 F0 | 	sar	result1, #7
04208     F5 0A 02 F1 | 	add	local01, result1
0420c     01 4E 85 F1 | 	sub	fp, #1
04210     A7 EA C1 FA | 	rdbyte	result1, fp
04214     03 EA 05 F5 | 	and	result1, #3
04218     01 EA 65 F0 | 	shl	result1, #1
0421c     F5 0A 02 F1 | 	add	local01, result1
04220     02 0A 06 F1 | 	add	local01, #2
04224     0D 4E 85 F1 | 	sub	fp, #13
04228     A7 0A 42 FC | 	wrbyte	local01, fp
0422c     0C 4E 05 F1 | 	add	fp, #12
04230     A7 0A C2 FA | 	rdbyte	local01, fp
04234     06 0A 46 F0 | 	shr	local01, #6
04238     01 4E 85 F1 | 	sub	fp, #1
0423c     A7 EA C1 FA | 	rdbyte	result1, fp
04240     F5 EA 31 F9 | 	getword	result1, result1, #0
04244     02 EA 65 F0 | 	shl	result1, #2
04248     F5 0A 02 F1 | 	add	local01, result1
0424c     01 4E 85 F1 | 	sub	fp, #1
04250     A7 EA C1 FA | 	rdbyte	result1, fp
04254     03 EA 05 F5 | 	and	result1, #3
04258     F5 EA 31 F9 | 	getword	result1, result1, #0
0425c     0A EA 65 F0 | 	shl	result1, #10
04260     F5 0A 02 F1 | 	add	local01, result1
04264     01 0A 06 F1 | 	add	local01, #1
04268     0A 4E 05 F1 | 	add	fp, #10
0426c     A7 0A 62 FC | 	wrlong	local01, fp
04270     1C 4E 85 F1 | 	sub	fp, #28
04274     A7 0A 02 FB | 	rdlong	local01, fp
04278     1C 4E 05 F1 | 	add	fp, #28
0427c     A7 EA 01 FB | 	rdlong	result1, fp
04280     14 4E 85 F1 | 	sub	fp, #20
04284     A7 04 C2 FA | 	rdbyte	arg03, fp
04288     14 4E 85 F1 | 	sub	fp, #20
0428c     09 04 86 F1 | 	sub	arg03, #9
04290     02 EB 61 F0 | 	shl	result1, arg03
04294     05 EB 61 FC | 	wrlong	result1, local01
04298                 | LR__0704
04298     10 4E 05 F1 | 	add	fp, #16
0429c     A7 00 68 FC | 	wrlong	#0, fp
042a0     10 4E 85 F1 | 	sub	fp, #16
042a4                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
042a4                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
042a4                 | ' 					*(LBA_t*)buff = cs << (n - 9);
042a4                 | ' 				}
042a4                 | ' 				res = RES_OK;
042a4                 | ' 			}
042a4                 | ' 			break;
042a4     28 00 90 FD | 	jmp	#LR__0707
042a8                 | LR__0705
042a8     0C 4E 05 F1 | 	add	fp, #12
042ac     A7 0A 02 FB | 	rdlong	local01, fp
042b0     05 01 69 FC | 	wrlong	#128, local01
042b4     04 4E 05 F1 | 	add	fp, #4
042b8     A7 00 68 FC | 	wrlong	#0, fp
042bc     10 4E 85 F1 | 	sub	fp, #16
042c0                 | ' 			*(DWORD*)buff = 128;
042c0                 | ' 			res = RES_OK;
042c0                 | ' 			break;
042c0     0C 00 90 FD | 	jmp	#LR__0707
042c4                 | LR__0706
042c4     10 4E 05 F1 | 	add	fp, #16
042c8     A7 08 68 FC | 	wrlong	#4, fp
042cc     10 4E 85 F1 | 	sub	fp, #16
042d0                 | LR__0707
042d0     74 77 B0 FD | 	call	#_fatfs_cc_deselect_0605
042d4                 | ' 			res = RES_PARERR;
042d4                 | ' 	}
042d4                 | ' 
042d4                 | ' 	deselect();
042d4                 | ' 
042d4                 | ' 	return res;
042d4     10 4E 05 F1 | 	add	fp, #16
042d8     A7 EA 01 FB | 	rdlong	result1, fp
042dc     10 4E 85 F1 | 	sub	fp, #16
042e0                 | LR__0708
042e0     A7 F0 03 F6 | 	mov	ptra, fp
042e4     B2 00 A0 FD | 	call	#popregs_
042e8                 | _fatfs_cc_disk_ioctl_ret
042e8     2D 00 64 FD | 	ret
042ec                 | 
042ec                 | _fatfs_cc_disk_setpins
042ec     00 00 0E F2 | 	cmp	arg01, #0 wz
042f0     01 EA 65 56 |  if_ne	neg	result1, #1
042f4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
042f8     01 00 00 FF 
042fc     10 E2 05 F1 | 	add	objptr, ##528
04300     F1 02 62 FC | 	wrlong	arg02, objptr
04304     04 E2 05 F1 | 	add	objptr, #4
04308     F1 04 62 FC | 	wrlong	arg03, objptr
0430c     04 E2 05 F1 | 	add	objptr, #4
04310     F1 06 62 FC | 	wrlong	arg04, objptr
04314     04 E2 05 F1 | 	add	objptr, #4
04318     F1 08 62 FC | 	wrlong	arg05, objptr
0431c     01 00 00 FF 
04320     1C E2 85 F1 | 	sub	objptr, ##540
04324     00 EA 05 F6 | 	mov	result1, #0
04328                 | _fatfs_cc_disk_setpins_ret
04328     2D 00 64 FD | 	ret
0432c                 | 
0432c                 | _fatfs_cc_tchar2uni
0432c     00 EF 01 FB | 	rdlong	_var01, arg01
04330     F7 F0 01 F6 | 	mov	_var02, _var01
04334     01 EE 05 F1 | 	add	_var01, #1
04338     F7 F2 01 F6 | 	mov	_var03, _var01
0433c     F8 F4 C1 FA | 	rdbyte	_var04, _var02
04340     80 F4 CD F7 | 	test	_var04, #128 wz
04344     E8 00 90 AD |  if_e	jmp	#LR__0717
04348     FA F6 01 F6 | 	mov	_var05, _var04
0434c     E0 F6 05 F5 | 	and	_var05, #224
04350     C0 F6 0D F2 | 	cmp	_var05, #192 wz
04354     1F F4 05 A5 |  if_e	and	_var04, #31
04358     01 F8 05 A6 |  if_e	mov	_var06, #1
0435c     34 00 90 AD |  if_e	jmp	#LR__0711
04360     FA F6 01 F6 | 	mov	_var05, _var04
04364     F0 F6 05 F5 | 	and	_var05, #240
04368     E0 F6 0D F2 | 	cmp	_var05, #224 wz
0436c     FA F4 41 A8 |  if_e	getnib	_var04, _var04, #0
04370     02 F8 05 A6 |  if_e	mov	_var06, #2
04374     1C 00 90 AD |  if_e	jmp	#LR__0710
04378     FA F6 01 F6 | 	mov	_var05, _var04
0437c     F8 F6 05 F5 | 	and	_var05, #248
04380     F0 F6 0D F2 | 	cmp	_var05, #240 wz
04384     07 F4 05 A5 |  if_e	and	_var04, #7
04388     03 F8 05 A6 |  if_e	mov	_var06, #3
0438c                 | ' 			return 0xFFFFFFFF;
0438c     01 EA 65 56 |  if_ne	neg	result1, #1
04390     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
04394                 | LR__0710
04394                 | LR__0711
04394                 | ' 		}
04394                 | ' 		do {
04394                 | LR__0712
04394     F9 FA C1 FA | 	rdbyte	_var07, _var03
04398     FD F6 E1 F8 | 	getbyte	_var05, _var07, #0
0439c     C0 F6 05 F5 | 	and	_var05, #192
043a0     80 F6 0D F2 | 	cmp	_var05, #128 wz
043a4     01 F2 05 F1 | 	add	_var03, #1
043a8     01 EA 65 56 |  if_ne	neg	result1, #1
043ac     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
043b0     06 F4 65 F0 | 	shl	_var04, #6
043b4     FD F0 E1 F8 | 	getbyte	_var02, _var07, #0
043b8     3F F0 05 F5 | 	and	_var02, #63
043bc     F8 F4 41 F5 | 	or	_var04, _var02
043c0     F4 F9 6D FB | 	djnz	_var06, #LR__0712
043c4     80 F4 15 F2 | 	cmp	_var04, #128 wc
043c8     24 00 90 CD |  if_b	jmp	#LR__0714
043cc     6C 00 00 FF 
043d0     00 F4 15 F2 | 	cmp	_var04, ##55296 wc
043d4     0C 00 90 CD |  if_b	jmp	#LR__0713
043d8     70 00 00 FF 
043dc     00 F4 15 F2 | 	cmp	_var04, ##57344 wc
043e0     0C 00 90 CD |  if_b	jmp	#LR__0714
043e4                 | LR__0713
043e4     80 08 00 FF 
043e8     00 F4 15 F2 | 	cmp	_var04, ##1114112 wc
043ec     08 00 90 CD |  if_b	jmp	#LR__0715
043f0                 | LR__0714
043f0     01 EA 65 F6 | 	neg	result1, #1
043f4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
043f8                 | LR__0715
043f8     80 00 00 FF 
043fc     00 F4 15 F2 | 	cmp	_var04, ##65536 wc
04400     2C 00 90 CD |  if_b	jmp	#LR__0716
04404     FA F0 01 F6 | 	mov	_var02, _var04
04408     80 00 00 FF 
0440c     00 F0 85 F1 | 	sub	_var02, ##65536
04410     06 F0 65 F0 | 	shl	_var02, #6
04414     80 FF 01 FF 
04418     00 F0 05 F5 | 	and	_var02, ##67043328
0441c     6E 00 6C FF 
04420     00 F6 05 F6 | 	mov	_var05, ##-671032320
04424     F8 F6 41 F5 | 	or	_var05, _var02
04428     09 F4 45 F7 | 	zerox	_var04, #9
0442c     FB F4 41 F5 | 	or	_var04, _var05
04430                 | LR__0716
04430                 | LR__0717
04430     00 F3 61 FC | 	wrlong	_var03, arg01
04434                 | ' 	}
04434                 | ' #line 811 "ff.c"
04434                 | ' 	*str = p;
04434                 | ' 	return uc;
04434     FA EA 01 F6 | 	mov	result1, _var04
04438                 | _fatfs_cc_tchar2uni_ret
04438     2D 00 64 FD | 	ret
0443c                 | 
0443c                 | _fatfs_cc_put_utf
0443c     80 00 16 F2 | 	cmp	arg01, #128 wc
04440     18 00 90 3D |  if_ae	jmp	#LR__0720
04444     01 04 16 F2 | 	cmp	arg03, #1 wc
04448     00 EA 05 C6 |  if_b	mov	result1, #0
0444c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
04450     01 01 42 FC | 	wrbyte	arg01, arg02
04454                 | ' 		*buf = (TCHAR)chr;
04454                 | ' 		return 1;
04454     01 EA 05 F6 | 	mov	result1, #1
04458     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
0445c                 | LR__0720
0445c     04 00 00 FF 
04460     00 00 16 F2 | 	cmp	arg01, ##2048 wc
04464     40 00 90 3D |  if_ae	jmp	#LR__0721
04468     02 04 16 F2 | 	cmp	arg03, #2 wc
0446c     00 EA 05 C6 |  if_b	mov	result1, #0
04470     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
04474     00 EB 01 F6 | 	mov	result1, arg01
04478     06 EA 45 F0 | 	shr	result1, #6
0447c     1F EA 05 F5 | 	and	result1, #31
04480     C0 04 06 F6 | 	mov	arg03, #192
04484     F5 04 42 F5 | 	or	arg03, result1
04488     01 05 42 FC | 	wrbyte	arg03, arg02
0448c     01 02 06 F1 | 	add	arg02, #1
04490     3F 00 06 F5 | 	and	arg01, #63
04494     80 EA 05 F6 | 	mov	result1, #128
04498     00 EB 41 F5 | 	or	result1, arg01
0449c     01 EB 41 FC | 	wrbyte	result1, arg02
044a0                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
044a0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
044a0                 | ' 		return 2;
044a0     02 EA 05 F6 | 	mov	result1, #2
044a4     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
044a8                 | LR__0721
044a8     80 00 00 FF 
044ac     00 00 16 F2 | 	cmp	arg01, ##65536 wc
044b0     70 00 90 3D |  if_ae	jmp	#LR__0724
044b4     03 04 16 F2 | 	cmp	arg03, #3 wc
044b8     18 00 90 CD |  if_b	jmp	#LR__0722
044bc     6C 00 00 FF 
044c0     00 00 16 F2 | 	cmp	arg01, ##55296 wc
044c4     14 00 90 CD |  if_b	jmp	#LR__0723
044c8     70 00 00 FF 
044cc     00 00 16 F2 | 	cmp	arg01, ##57344 wc
044d0     08 00 90 3D |  if_ae	jmp	#LR__0723
044d4                 | LR__0722
044d4     00 EA 05 F6 | 	mov	result1, #0
044d8     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
044dc                 | LR__0723
044dc     00 EB 59 F8 | 	getnib	result1, arg01, #3
044e0     E0 04 06 F6 | 	mov	arg03, #224
044e4     F5 04 42 F5 | 	or	arg03, result1
044e8     01 05 42 FC | 	wrbyte	arg03, arg02
044ec     01 02 06 F1 | 	add	arg02, #1
044f0     00 EB 01 F6 | 	mov	result1, arg01
044f4     06 EA 45 F0 | 	shr	result1, #6
044f8     3F EA 05 F5 | 	and	result1, #63
044fc     80 04 06 F6 | 	mov	arg03, #128
04500     F5 04 42 F5 | 	or	arg03, result1
04504     01 05 42 FC | 	wrbyte	arg03, arg02
04508     01 02 06 F1 | 	add	arg02, #1
0450c     3F 00 06 F5 | 	and	arg01, #63
04510     80 EA 05 F6 | 	mov	result1, #128
04514     00 EB 41 F5 | 	or	result1, arg01
04518     01 EB 41 FC | 	wrbyte	result1, arg02
0451c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
0451c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
0451c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
0451c                 | ' 		return 3;
0451c     03 EA 05 F6 | 	mov	result1, #3
04520     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
04524                 | LR__0724
04524     04 04 16 F2 | 	cmp	arg03, #4 wc
04528     00 EA 05 C6 |  if_b	mov	result1, #0
0452c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
04530     00 EF 01 F6 | 	mov	_var01, arg01
04534     E0 EF 05 F4 | 	bitl	_var01, #480
04538     00 00 6C FF 
0453c     00 EE 85 F1 | 	sub	_var01, ##-671088640
04540     06 EE 45 F0 | 	shr	_var01, #6
04544     00 01 32 F9 | 	getword	arg01, arg01, #0
04548     6E 00 00 FF 
0454c     00 00 86 F1 | 	sub	arg01, ##56320
04550     00 08 00 FF 
04554     00 EE 15 F2 | 	cmp	_var01, ##1048576 wc
04558     02 00 00 CF 
0455c     00 00 16 C2 |  if_b	cmp	arg01, ##1024 wc
04560     00 EA 05 36 |  if_ae	mov	result1, #0
04564     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
04568     00 EF 41 F5 | 	or	_var01, arg01
0456c     80 00 00 FF 
04570     00 EE 05 F1 | 	add	_var01, ##65536
04574     F7 EA 01 F6 | 	mov	result1, _var01
04578     12 EA 45 F0 | 	shr	result1, #18
0457c     07 EA 05 F5 | 	and	result1, #7
04580     F0 04 06 F6 | 	mov	arg03, #240
04584     F5 04 42 F5 | 	or	arg03, result1
04588     01 05 42 FC | 	wrbyte	arg03, arg02
0458c     01 02 06 F1 | 	add	arg02, #1
04590     F7 EA 01 F6 | 	mov	result1, _var01
04594     0C EA 45 F0 | 	shr	result1, #12
04598     3F EA 05 F5 | 	and	result1, #63
0459c     80 04 06 F6 | 	mov	arg03, #128
045a0     F5 04 42 F5 | 	or	arg03, result1
045a4     01 05 42 FC | 	wrbyte	arg03, arg02
045a8     01 02 06 F1 | 	add	arg02, #1
045ac     F7 EA 01 F6 | 	mov	result1, _var01
045b0     06 EA 45 F0 | 	shr	result1, #6
045b4     3F EA 05 F5 | 	and	result1, #63
045b8     80 04 06 F6 | 	mov	arg03, #128
045bc     F5 04 42 F5 | 	or	arg03, result1
045c0     01 05 42 FC | 	wrbyte	arg03, arg02
045c4     01 02 06 F1 | 	add	arg02, #1
045c8     3F EE 05 F5 | 	and	_var01, #63
045cc     80 EA 05 F6 | 	mov	result1, #128
045d0     F7 EA 41 F5 | 	or	result1, _var01
045d4     01 EB 41 FC | 	wrbyte	result1, arg02
045d8                 | ' 	chr = (hc | chr) + 0x10000;
045d8                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
045d8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
045d8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
045d8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
045d8                 | ' 	return 4;
045d8     04 EA 05 F6 | 	mov	result1, #4
045dc                 | _fatfs_cc_put_utf_ret
045dc     2D 00 64 FD | 	ret
045e0                 | 
045e0                 | _fatfs_cc_sync_window
045e0     02 4A 05 F6 | 	mov	COUNT_, #2
045e4     A8 00 A0 FD | 	call	#pushregs_
045e8     00 0B 02 F6 | 	mov	local01, arg01
045ec     00 0C 06 F6 | 	mov	local02, #0
045f0     03 0A 06 F1 | 	add	local01, #3
045f4     05 EB C9 FA | 	rdbyte	result1, local01 wz
045f8     03 0A 86 F1 | 	sub	local01, #3
045fc     A4 00 90 AD |  if_e	jmp	#LR__0732
04600     01 0A 06 F1 | 	add	local01, #1
04604     05 01 C2 FA | 	rdbyte	arg01, local01
04608     33 0A 06 F1 | 	add	local01, #51
0460c     05 03 02 F6 | 	mov	arg02, local01
04610     04 0A 86 F1 | 	sub	local01, #4
04614     05 05 02 FB | 	rdlong	arg03, local01
04618     30 0A 86 F1 | 	sub	local01, #48
0461c     01 06 06 F6 | 	mov	arg04, #1
04620     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
04624     00 EA 0D F2 | 	cmp	result1, #0 wz
04628     74 00 90 5D |  if_ne	jmp	#LR__0730
0462c     03 0A 06 F1 | 	add	local01, #3
04630     05 01 48 FC | 	wrbyte	#0, local01
04634     2D 0A 06 F1 | 	add	local01, #45
04638     05 EB 01 FB | 	rdlong	result1, local01
0463c     0C 0A 86 F1 | 	sub	local01, #12
04640     05 07 02 FB | 	rdlong	arg04, local01
04644     03 EB 81 F1 | 	sub	result1, arg04
04648     08 0A 86 F1 | 	sub	local01, #8
0464c     05 07 02 FB | 	rdlong	arg04, local01
04650     1C 0A 86 F1 | 	sub	local01, #28
04654     03 EB 11 F2 | 	cmp	result1, arg04 wc
04658     48 00 90 3D |  if_ae	jmp	#LR__0731
0465c     02 0A 06 F1 | 	add	local01, #2
04660     05 07 C2 FA | 	rdbyte	arg04, local01
04664     02 0A 86 F1 | 	sub	local01, #2
04668     02 06 0E F2 | 	cmp	arg04, #2 wz
0466c     34 00 90 5D |  if_ne	jmp	#LR__0731
04670     01 0A 06 F1 | 	add	local01, #1
04674     05 01 C2 FA | 	rdbyte	arg01, local01
04678     33 0A 06 F1 | 	add	local01, #51
0467c     05 03 02 F6 | 	mov	arg02, local01
04680     04 0A 86 F1 | 	sub	local01, #4
04684     05 05 02 FB | 	rdlong	arg03, local01
04688     14 0A 86 F1 | 	sub	local01, #20
0468c     05 0B 02 FB | 	rdlong	local01, local01
04690     05 05 02 F1 | 	add	arg03, local01
04694     01 06 06 F6 | 	mov	arg04, #1
04698     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
0469c     04 00 90 FD | 	jmp	#LR__0731
046a0                 | LR__0730
046a0     01 0C 06 F6 | 	mov	local02, #1
046a4                 | LR__0731
046a4                 | LR__0732
046a4                 | ' 			res = FR_DISK_ERR;
046a4                 | ' 		}
046a4                 | ' 	}
046a4                 | ' 	return res;
046a4     06 EB 01 F6 | 	mov	result1, local02
046a8     A7 F0 03 F6 | 	mov	ptra, fp
046ac     B2 00 A0 FD | 	call	#popregs_
046b0                 | _fatfs_cc_sync_window_ret
046b0     2D 00 64 FD | 	ret
046b4                 | 
046b4                 | _fatfs_cc_move_window
046b4     03 4A 05 F6 | 	mov	COUNT_, #3
046b8     A8 00 A0 FD | 	call	#pushregs_
046bc     00 0B 02 F6 | 	mov	local01, arg01
046c0     01 0D 02 F6 | 	mov	local02, arg02
046c4     00 0E 06 F6 | 	mov	local03, #0
046c8     30 0A 06 F1 | 	add	local01, #48
046cc     05 07 02 FB | 	rdlong	arg04, local01
046d0     30 0A 86 F1 | 	sub	local01, #48
046d4     03 0D 0A F2 | 	cmp	local02, arg04 wz
046d8     40 00 90 AD |  if_e	jmp	#LR__0741
046dc     05 01 02 F6 | 	mov	arg01, local01
046e0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
046e4     F5 0E 0A F6 | 	mov	local03, result1 wz
046e8     30 00 90 5D |  if_ne	jmp	#LR__0740
046ec     01 0A 06 F1 | 	add	local01, #1
046f0     05 01 C2 FA | 	rdbyte	arg01, local01
046f4     33 0A 06 F1 | 	add	local01, #51
046f8     05 03 02 F6 | 	mov	arg02, local01
046fc     06 05 02 F6 | 	mov	arg03, local02
04700     01 06 06 F6 | 	mov	arg04, #1
04704     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
04708     00 EA 0D F2 | 	cmp	result1, #0 wz
0470c     01 0C 66 56 |  if_ne	neg	local02, #1
04710     01 0E 06 56 |  if_ne	mov	local03, #1
04714     04 0A 86 F1 | 	sub	local01, #4
04718     05 0D 62 FC | 	wrlong	local02, local01
0471c                 | LR__0740
0471c                 | LR__0741
0471c                 | ' 				sect = (LBA_t)0 - 1;
0471c                 | ' 				res = FR_DISK_ERR;
0471c                 | ' 			}
0471c                 | ' 			fs->winsect = sect;
0471c                 | ' 		}
0471c                 | ' 	}
0471c                 | ' 	return res;
0471c     07 EB 01 F6 | 	mov	result1, local03
04720     A7 F0 03 F6 | 	mov	ptra, fp
04724     B2 00 A0 FD | 	call	#popregs_
04728                 | _fatfs_cc_move_window_ret
04728     2D 00 64 FD | 	ret
0472c                 | 
0472c                 | _fatfs_cc_sync_fs
0472c     02 4A 05 F6 | 	mov	COUNT_, #2
04730     A8 00 A0 FD | 	call	#pushregs_
04734     00 0B 02 F6 | 	mov	local01, arg01
04738     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
0473c     F5 0C 0A F6 | 	mov	local02, result1 wz
04740     D8 00 90 5D |  if_ne	jmp	#LR__0751
04744     05 07 C2 FA | 	rdbyte	arg04, local01
04748     03 06 0E F2 | 	cmp	arg04, #3 wz
0474c     04 0A 06 A1 |  if_e	add	local01, #4
04750     05 07 C2 AA |  if_e	rdbyte	arg04, local01
04754     04 0A 86 A1 |  if_e	sub	local01, #4
04758     01 06 0E A2 |  if_e	cmp	arg04, #1 wz
0475c     A0 00 90 5D |  if_ne	jmp	#LR__0750
04760     34 0A 06 F1 | 	add	local01, #52
04764     05 01 02 F6 | 	mov	arg01, local01
04768     00 02 06 F6 | 	mov	arg02, #0
0476c     09 04 C6 F9 | 	decod	arg03, #9
04770     98 00 A0 FD | 	call	#\builtin_bytefill_
04774     05 01 02 F6 | 	mov	arg01, local01
04778     FE 01 06 F1 | 	add	arg01, #510
0477c     55 00 80 FF 
04780     00 AB 58 FC | 	wrword	##43605, arg01
04784     A9 B0 A0 FF 
04788     05 A5 68 FC | 	wrlong	##1096897106, local01
0478c     05 01 02 F6 | 	mov	arg01, local01
04790     E4 01 06 F1 | 	add	arg01, #484
04794     B9 A0 B0 FF 
04798     00 E5 68 FC | 	wrlong	##1631679090, arg01
0479c     05 01 02 F6 | 	mov	arg01, local01
047a0     E8 01 06 F1 | 	add	arg01, #488
047a4     20 0A 86 F1 | 	sub	local01, #32
047a8     05 03 02 FB | 	rdlong	arg02, local01
047ac     00 03 62 FC | 	wrlong	arg02, arg01
047b0     20 0A 06 F1 | 	add	local01, #32
047b4     05 01 02 F6 | 	mov	arg01, local01
047b8     EC 01 06 F1 | 	add	arg01, #492
047bc     24 0A 86 F1 | 	sub	local01, #36
047c0     05 03 02 FB | 	rdlong	arg02, local01
047c4     00 03 62 FC | 	wrlong	arg02, arg01
047c8     10 0A 06 F1 | 	add	local01, #16
047cc     05 05 02 FB | 	rdlong	arg03, local01
047d0     01 04 06 F1 | 	add	arg03, #1
047d4     10 0A 06 F1 | 	add	local01, #16
047d8     05 05 62 FC | 	wrlong	arg03, local01
047dc     2F 0A 86 F1 | 	sub	local01, #47
047e0     05 01 C2 FA | 	rdbyte	arg01, local01
047e4     33 0A 06 F1 | 	add	local01, #51
047e8     05 03 02 F6 | 	mov	arg02, local01
047ec     01 06 06 F6 | 	mov	arg04, #1
047f0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
047f4     30 0A 86 F1 | 	sub	local01, #48
047f8     05 01 48 FC | 	wrbyte	#0, local01
047fc     04 0A 86 F1 | 	sub	local01, #4
04800                 | LR__0750
04800     01 0A 06 F1 | 	add	local01, #1
04804     05 01 C2 FA | 	rdbyte	arg01, local01
04808     00 02 06 F6 | 	mov	arg02, #0
0480c     00 04 06 F6 | 	mov	arg03, #0
04810     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
04814     00 EA 0D F2 | 	cmp	result1, #0 wz
04818     01 0C 06 56 |  if_ne	mov	local02, #1
0481c                 | LR__0751
0481c                 | ' 	}
0481c                 | ' 
0481c                 | ' 	return res;
0481c     06 EB 01 F6 | 	mov	result1, local02
04820     A7 F0 03 F6 | 	mov	ptra, fp
04824     B2 00 A0 FD | 	call	#popregs_
04828                 | _fatfs_cc_sync_fs_ret
04828     2D 00 64 FD | 	ret
0482c                 | 
0482c                 | _fatfs_cc_clst2sect
0482c     02 02 86 F1 | 	sub	arg02, #2
04830     18 00 06 F1 | 	add	arg01, #24
04834     00 EF 01 FB | 	rdlong	_var01, arg01
04838     18 00 86 F1 | 	sub	arg01, #24
0483c     02 EE 85 F1 | 	sub	_var01, #2
04840     F7 02 12 F2 | 	cmp	arg02, _var01 wc
04844     00 EA 05 36 |  if_ae	mov	result1, #0
04848     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
0484c     0A 00 06 F1 | 	add	arg01, #10
04850     00 EF E1 FA | 	rdword	_var01, arg01
04854     01 EF 01 FD | 	qmul	_var01, arg02
04858                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
04858     22 00 06 F1 | 	add	arg01, #34
0485c     00 EB 01 FB | 	rdlong	result1, arg01
04860     18 EE 61 FD | 	getqx	_var01
04864     F7 EA 01 F1 | 	add	result1, _var01
04868                 | _fatfs_cc_clst2sect_ret
04868     2D 00 64 FD | 	ret
0486c                 | 
0486c                 | _fatfs_cc_get_fat
0486c     07 4A 05 F6 | 	mov	COUNT_, #7
04870     A8 00 A0 FD | 	call	#pushregs_
04874     01 0B 02 F6 | 	mov	local01, arg02
04878     00 0D 02 FB | 	rdlong	local02, arg01
0487c     02 0A 16 F2 | 	cmp	local01, #2 wc
04880     14 00 90 CD |  if_b	jmp	#LR__0760
04884     18 0C 06 F1 | 	add	local02, #24
04888     06 0F 02 FB | 	rdlong	local03, local02
0488c     18 0C 86 F1 | 	sub	local02, #24
04890     07 0B 12 F2 | 	cmp	local01, local03 wc
04894     08 00 90 CD |  if_b	jmp	#LR__0761
04898                 | LR__0760
04898     01 10 06 F6 | 	mov	local04, #1
0489c     60 01 90 FD | 	jmp	#LR__0768
048a0                 | LR__0761
048a0     01 10 66 F6 | 	neg	local04, #1
048a4                 | ' 		val = 0xFFFFFFFF;
048a4                 | ' 
048a4                 | ' 		switch (fs->fs_type) {
048a4     06 13 C2 FA | 	rdbyte	local05, local02
048a8     01 12 86 F1 | 	sub	local05, #1
048ac     03 12 26 F3 | 	fle	local05, #3
048b0     30 12 62 FD | 	jmprel	local05
048b4                 | LR__0762
048b4     0C 00 90 FD | 	jmp	#LR__0763
048b8     B8 00 90 FD | 	jmp	#LR__0764
048bc     F8 00 90 FD | 	jmp	#LR__0765
048c0     38 01 90 FD | 	jmp	#LR__0766
048c4                 | LR__0763
048c4     05 13 02 F6 | 	mov	local05, local01
048c8     05 01 02 F6 | 	mov	arg01, local01
048cc     01 00 46 F0 | 	shr	arg01, #1
048d0     00 13 02 F1 | 	add	local05, arg01
048d4     06 01 02 F6 | 	mov	arg01, local02
048d8     09 15 02 F6 | 	mov	local06, local05
048dc     09 14 46 F0 | 	shr	local06, #9
048e0     24 0C 06 F1 | 	add	local02, #36
048e4     06 03 02 FB | 	rdlong	arg02, local02
048e8     24 0C 86 F1 | 	sub	local02, #36
048ec     0A 03 02 F1 | 	add	arg02, local06
048f0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
048f4     00 EA 0D F2 | 	cmp	result1, #0 wz
048f8     04 01 90 5D |  if_ne	jmp	#LR__0767
048fc     09 15 02 F6 | 	mov	local06, local05
04900     FF 15 06 F5 | 	and	local06, #511
04904     34 0C 06 F1 | 	add	local02, #52
04908     06 15 02 F1 | 	add	local06, local02
0490c     0A 17 C2 FA | 	rdbyte	local07, local06
04910     34 0C 86 F1 | 	sub	local02, #52
04914     06 01 02 F6 | 	mov	arg01, local02
04918     01 12 06 F1 | 	add	local05, #1
0491c     09 15 02 F6 | 	mov	local06, local05
04920     09 14 46 F0 | 	shr	local06, #9
04924     24 0C 06 F1 | 	add	local02, #36
04928     06 03 02 FB | 	rdlong	arg02, local02
0492c     24 0C 86 F1 | 	sub	local02, #36
04930     0A 03 02 F1 | 	add	arg02, local06
04934     7C FD BF FD | 	call	#_fatfs_cc_move_window
04938     00 EA 0D F2 | 	cmp	result1, #0 wz
0493c     C0 00 90 5D |  if_ne	jmp	#LR__0767
04940     FF 13 06 F5 | 	and	local05, #511
04944     34 0C 06 F1 | 	add	local02, #52
04948     06 13 02 F1 | 	add	local05, local02
0494c     09 15 C2 FA | 	rdbyte	local06, local05
04950     08 14 66 F0 | 	shl	local06, #8
04954     0A 17 42 F5 | 	or	local07, local06
04958     01 0A CE F7 | 	test	local01, #1 wz
0495c     04 16 46 50 |  if_ne	shr	local07, #4
04960     0B 0F 02 56 |  if_ne	mov	local03, local07
04964     0B 16 46 A7 |  if_e	zerox	local07, #11
04968     0B 0F 02 A6 |  if_e	mov	local03, local07
0496c     07 11 02 F6 | 	mov	local04, local03
04970                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
04970                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
04970                 | ' 			break;
04970     8C 00 90 FD | 	jmp	#LR__0767
04974                 | LR__0764
04974     06 01 02 F6 | 	mov	arg01, local02
04978     05 15 02 F6 | 	mov	local06, local01
0497c     08 14 46 F0 | 	shr	local06, #8
04980     24 0C 06 F1 | 	add	local02, #36
04984     06 03 02 FB | 	rdlong	arg02, local02
04988     24 0C 86 F1 | 	sub	local02, #36
0498c     0A 03 02 F1 | 	add	arg02, local06
04990     20 FD BF FD | 	call	#_fatfs_cc_move_window
04994     00 EA 0D F2 | 	cmp	result1, #0 wz
04998     64 00 90 5D |  if_ne	jmp	#LR__0767
0499c     34 0C 06 F1 | 	add	local02, #52
049a0     01 0A 66 F0 | 	shl	local01, #1
049a4     FF 0B 06 F5 | 	and	local01, #511
049a8     05 0D 02 F1 | 	add	local02, local01
049ac                 | ' {
049ac                 | ' 
049ac                 | ' 	return *((WORD*)ptr);
049ac     06 EB E1 FA | 	rdword	result1, local02
049b0     F5 10 32 F9 | 	getword	local04, result1, #0
049b4                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
049b4                 | ' 			break;
049b4     48 00 90 FD | 	jmp	#LR__0767
049b8                 | LR__0765
049b8     06 01 02 F6 | 	mov	arg01, local02
049bc     05 15 02 F6 | 	mov	local06, local01
049c0     07 14 46 F0 | 	shr	local06, #7
049c4     24 0C 06 F1 | 	add	local02, #36
049c8     06 03 02 FB | 	rdlong	arg02, local02
049cc     24 0C 86 F1 | 	sub	local02, #36
049d0     0A 03 02 F1 | 	add	arg02, local06
049d4     DC FC BF FD | 	call	#_fatfs_cc_move_window
049d8     00 EA 0D F2 | 	cmp	result1, #0 wz
049dc     20 00 90 5D |  if_ne	jmp	#LR__0767
049e0     34 0C 06 F1 | 	add	local02, #52
049e4     02 0A 66 F0 | 	shl	local01, #2
049e8     FF 0B 06 F5 | 	and	local01, #511
049ec     05 0D 02 F1 | 	add	local02, local01
049f0                 | ' {
049f0                 | ' 
049f0                 | ' 	return *((DWORD*)ptr);
049f0     06 11 02 FB | 	rdlong	local04, local02
049f4     7C 10 06 F4 | 	bitl	local04, #124
049f8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
049f8                 | ' 			break;
049f8     04 00 90 FD | 	jmp	#LR__0767
049fc                 | LR__0766
049fc     01 10 06 F6 | 	mov	local04, #1
04a00                 | LR__0767
04a00                 | LR__0768
04a00                 | ' 			val = 1;
04a00                 | ' 		}
04a00                 | ' 	}
04a00                 | ' 
04a00                 | ' 	return val;
04a00     08 EB 01 F6 | 	mov	result1, local04
04a04     A7 F0 03 F6 | 	mov	ptra, fp
04a08     B2 00 A0 FD | 	call	#popregs_
04a0c                 | _fatfs_cc_get_fat_ret
04a0c     2D 00 64 FD | 	ret
04a10                 | 
04a10                 | _fatfs_cc_put_fat
04a10     08 4A 05 F6 | 	mov	COUNT_, #8
04a14     A8 00 A0 FD | 	call	#pushregs_
04a18     00 0B 02 F6 | 	mov	local01, arg01
04a1c     01 0D 02 F6 | 	mov	local02, arg02
04a20     02 0F 02 F6 | 	mov	local03, arg03
04a24     02 10 06 F6 | 	mov	local04, #2
04a28     02 0C 16 F2 | 	cmp	local02, #2 wc
04a2c     E0 01 90 CD |  if_b	jmp	#LR__0777
04a30     18 0A 06 F1 | 	add	local01, #24
04a34     05 13 02 FB | 	rdlong	local05, local01
04a38     18 0A 86 F1 | 	sub	local01, #24
04a3c     09 0D 12 F2 | 	cmp	local02, local05 wc
04a40     CC 01 90 3D |  if_ae	jmp	#LR__0777
04a44                 | ' 		switch (fs->fs_type) {
04a44     05 15 C2 FA | 	rdbyte	local06, local01
04a48     01 14 86 F1 | 	sub	local06, #1
04a4c     03 14 26 F3 | 	fle	local06, #3
04a50     30 14 62 FD | 	jmprel	local06
04a54                 | LR__0770
04a54     0C 00 90 FD | 	jmp	#LR__0771
04a58     F8 00 90 FD | 	jmp	#LR__0774
04a5c     40 01 90 FD | 	jmp	#LR__0775
04a60     AC 01 90 FD | 	jmp	#LR__0776
04a64                 | LR__0771
04a64     06 17 02 F6 | 	mov	local07, local02
04a68     06 13 02 F6 | 	mov	local05, local02
04a6c     01 12 46 F0 | 	shr	local05, #1
04a70     09 17 02 F1 | 	add	local07, local05
04a74     05 01 02 F6 | 	mov	arg01, local01
04a78     0B 15 02 F6 | 	mov	local06, local07
04a7c     09 14 46 F0 | 	shr	local06, #9
04a80     24 0A 06 F1 | 	add	local01, #36
04a84     05 03 02 FB | 	rdlong	arg02, local01
04a88     24 0A 86 F1 | 	sub	local01, #36
04a8c     0A 03 02 F1 | 	add	arg02, local06
04a90     20 FC BF FD | 	call	#_fatfs_cc_move_window
04a94     F5 10 0A F6 | 	mov	local04, result1 wz
04a98     74 01 90 5D |  if_ne	jmp	#LR__0776
04a9c     34 0A 06 F1 | 	add	local01, #52
04aa0     05 19 02 F6 | 	mov	local08, local01
04aa4     0B 13 02 F6 | 	mov	local05, local07
04aa8     FF 13 06 F5 | 	and	local05, #511
04aac     09 19 02 F1 | 	add	local08, local05
04ab0     01 0C CE F7 | 	test	local02, #1 wz
04ab4     34 0A 86 F1 | 	sub	local01, #52
04ab8     01 16 06 F1 | 	add	local07, #1
04abc     18 00 90 AD |  if_e	jmp	#LR__0772
04ac0     0C 13 C2 FA | 	rdbyte	local05, local08
04ac4     09 13 42 F8 | 	getnib	local05, local05, #0
04ac8     07 15 E2 F8 | 	getbyte	local06, local03, #0
04acc     04 14 66 F0 | 	shl	local06, #4
04ad0     0A 13 42 F5 | 	or	local05, local06
04ad4     04 00 90 FD | 	jmp	#LR__0773
04ad8                 | LR__0772
04ad8     07 13 02 F6 | 	mov	local05, local03
04adc                 | LR__0773
04adc     0C 13 42 FC | 	wrbyte	local05, local08
04ae0     03 0A 06 F1 | 	add	local01, #3
04ae4     05 03 48 FC | 	wrbyte	#1, local01
04ae8     03 0A 86 F1 | 	sub	local01, #3
04aec     05 01 02 F6 | 	mov	arg01, local01
04af0     0B 19 02 F6 | 	mov	local08, local07
04af4     09 18 46 F0 | 	shr	local08, #9
04af8     24 0A 06 F1 | 	add	local01, #36
04afc     05 03 02 FB | 	rdlong	arg02, local01
04b00     24 0A 86 F1 | 	sub	local01, #36
04b04     0C 03 02 F1 | 	add	arg02, local08
04b08     A8 FB BF FD | 	call	#_fatfs_cc_move_window
04b0c     F5 10 0A F6 | 	mov	local04, result1 wz
04b10     FC 00 90 5D |  if_ne	jmp	#LR__0776
04b14     34 0A 06 F1 | 	add	local01, #52
04b18     05 19 02 F6 | 	mov	local08, local01
04b1c     FF 17 06 F5 | 	and	local07, #511
04b20     0B 19 02 F1 | 	add	local08, local07
04b24     01 0C CE F7 | 	test	local02, #1 wz
04b28     04 0E 46 50 |  if_ne	shr	local03, #4
04b2c     07 13 02 56 |  if_ne	mov	local05, local03
04b30     0C 13 C2 AA |  if_e	rdbyte	local05, local08
04b34     F0 12 06 A5 |  if_e	and	local05, #240
04b38     07 0F EA A8 |  if_e	getbyte	local03, local03, #1
04b3c     07 0F 42 A8 |  if_e	getnib	local03, local03, #0
04b40     07 13 42 A5 |  if_e	or	local05, local03
04b44     0C 13 42 FC | 	wrbyte	local05, local08
04b48     31 0A 86 F1 | 	sub	local01, #49
04b4c     05 03 48 FC | 	wrbyte	#1, local01
04b50                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
04b50                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
04b50                 | ' 			fs->wflag = 1;
04b50                 | ' 			break;
04b50     BC 00 90 FD | 	jmp	#LR__0776
04b54                 | LR__0774
04b54     05 01 02 F6 | 	mov	arg01, local01
04b58     06 19 02 F6 | 	mov	local08, local02
04b5c     08 18 46 F0 | 	shr	local08, #8
04b60     24 0A 06 F1 | 	add	local01, #36
04b64     05 03 02 FB | 	rdlong	arg02, local01
04b68     24 0A 86 F1 | 	sub	local01, #36
04b6c     0C 03 02 F1 | 	add	arg02, local08
04b70     40 FB BF FD | 	call	#_fatfs_cc_move_window
04b74     F5 10 0A F6 | 	mov	local04, result1 wz
04b78     94 00 90 5D |  if_ne	jmp	#LR__0776
04b7c     34 0A 06 F1 | 	add	local01, #52
04b80     05 01 02 F6 | 	mov	arg01, local01
04b84     01 0C 66 F0 | 	shl	local02, #1
04b88     FF 0D 06 F5 | 	and	local02, #511
04b8c     06 01 02 F1 | 	add	arg01, local02
04b90     00 0F 52 FC | 	wrword	local03, arg01
04b94     31 0A 86 F1 | 	sub	local01, #49
04b98     05 03 48 FC | 	wrbyte	#1, local01
04b9c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
04b9c                 | ' 			fs->wflag = 1;
04b9c                 | ' 			break;
04b9c     70 00 90 FD | 	jmp	#LR__0776
04ba0                 | LR__0775
04ba0     05 01 02 F6 | 	mov	arg01, local01
04ba4     06 19 02 F6 | 	mov	local08, local02
04ba8     07 18 46 F0 | 	shr	local08, #7
04bac     24 0A 06 F1 | 	add	local01, #36
04bb0     05 03 02 FB | 	rdlong	arg02, local01
04bb4     24 0A 86 F1 | 	sub	local01, #36
04bb8     0C 03 02 F1 | 	add	arg02, local08
04bbc     F4 FA BF FD | 	call	#_fatfs_cc_move_window
04bc0     F5 10 0A F6 | 	mov	local04, result1 wz
04bc4     48 00 90 5D |  if_ne	jmp	#LR__0776
04bc8     7C 0E 06 F4 | 	bitl	local03, #124
04bcc     34 0A 06 F1 | 	add	local01, #52
04bd0     06 19 02 F6 | 	mov	local08, local02
04bd4     02 18 66 F0 | 	shl	local08, #2
04bd8     FF 19 06 F5 | 	and	local08, #511
04bdc     05 01 02 F6 | 	mov	arg01, local01
04be0     0C 01 02 F1 | 	add	arg01, local08
04be4                 | ' {
04be4                 | ' 
04be4                 | ' 	return *((DWORD*)ptr);
04be4     00 19 02 FB | 	rdlong	local08, arg01
04be8     00 00 78 FF 
04bec     00 18 06 F5 | 	and	local08, ##-268435456
04bf0     0C 0F 42 F5 | 	or	local03, local08
04bf4     05 01 02 F6 | 	mov	arg01, local01
04bf8     02 0C 66 F0 | 	shl	local02, #2
04bfc     FF 0D 06 F5 | 	and	local02, #511
04c00     06 01 02 F1 | 	add	arg01, local02
04c04     00 0F 62 FC | 	wrlong	local03, arg01
04c08     31 0A 86 F1 | 	sub	local01, #49
04c0c     05 03 48 FC | 	wrbyte	#1, local01
04c10                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
04c10                 | ' 			}
04c10                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
04c10                 | ' 			fs->wflag = 1;
04c10                 | ' 			break;
04c10                 | LR__0776
04c10                 | LR__0777
04c10                 | ' 		}
04c10                 | ' 	}
04c10                 | ' 	return res;
04c10     08 EB 01 F6 | 	mov	result1, local04
04c14     A7 F0 03 F6 | 	mov	ptra, fp
04c18     B2 00 A0 FD | 	call	#popregs_
04c1c                 | _fatfs_cc_put_fat_ret
04c1c     2D 00 64 FD | 	ret
04c20                 | 
04c20                 | _fatfs_cc_remove_chain
04c20     05 4A 05 F6 | 	mov	COUNT_, #5
04c24     A8 00 A0 FD | 	call	#pushregs_
04c28     00 0B 02 F6 | 	mov	local01, arg01
04c2c     01 0D 02 F6 | 	mov	local02, arg02
04c30     02 0F 02 F6 | 	mov	local03, arg03
04c34     05 11 02 FB | 	rdlong	local04, local01
04c38     02 0C 16 F2 | 	cmp	local02, #2 wc
04c3c     14 00 90 CD |  if_b	jmp	#LR__0780
04c40     18 10 06 F1 | 	add	local04, #24
04c44     08 EB 01 FB | 	rdlong	result1, local04
04c48     18 10 86 F1 | 	sub	local04, #24
04c4c     F5 0C 12 F2 | 	cmp	local02, result1 wc
04c50     08 00 90 CD |  if_b	jmp	#LR__0781
04c54                 | LR__0780
04c54     02 EA 05 F6 | 	mov	result1, #2
04c58     CC 00 90 FD | 	jmp	#LR__0786
04c5c                 | LR__0781
04c5c     00 0E 0E F2 | 	cmp	local03, #0 wz
04c60     18 00 90 AD |  if_e	jmp	#LR__0782
04c64     07 03 02 F6 | 	mov	arg02, local03
04c68     08 01 02 F6 | 	mov	arg01, local04
04c6c     01 04 66 F6 | 	neg	arg03, #1
04c70     9C FD BF FD | 	call	#_fatfs_cc_put_fat
04c74     00 EA 0D F2 | 	cmp	result1, #0 wz
04c78     AC 00 90 5D |  if_ne	jmp	#LR__0786
04c7c                 | LR__0782
04c7c                 | ' 	}
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 	do {
04c7c                 | LR__0783
04c7c     06 03 02 F6 | 	mov	arg02, local02
04c80     05 01 02 F6 | 	mov	arg01, local01
04c84     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
04c88     F5 12 0A F6 | 	mov	local05, result1 wz
04c8c     94 00 90 AD |  if_e	jmp	#LR__0785
04c90     01 12 0E F2 | 	cmp	local05, #1 wz
04c94     02 EA 05 A6 |  if_e	mov	result1, #2
04c98     8C 00 90 AD |  if_e	jmp	#LR__0786
04c9c     FF FF 7F FF 
04ca0     FF 13 0E F2 | 	cmp	local05, ##-1 wz
04ca4     01 EA 05 A6 |  if_e	mov	result1, #1
04ca8     7C 00 90 AD |  if_e	jmp	#LR__0786
04cac     06 03 02 F6 | 	mov	arg02, local02
04cb0     08 01 02 F6 | 	mov	arg01, local04
04cb4     00 04 06 F6 | 	mov	arg03, #0
04cb8     54 FD BF FD | 	call	#_fatfs_cc_put_fat
04cbc     F5 0E 0A F6 | 	mov	local03, result1 wz
04cc0     07 EB 01 56 |  if_ne	mov	result1, local03
04cc4     60 00 90 5D |  if_ne	jmp	#LR__0786
04cc8     18 10 06 F1 | 	add	local04, #24
04ccc     08 0F 02 FB | 	rdlong	local03, local04
04cd0     02 0E 86 F1 | 	sub	local03, #2
04cd4     04 10 86 F1 | 	sub	local04, #4
04cd8     08 0D 02 FB | 	rdlong	local02, local04
04cdc     14 10 86 F1 | 	sub	local04, #20
04ce0     07 0D 12 F2 | 	cmp	local02, local03 wc
04ce4     24 00 90 3D |  if_ae	jmp	#LR__0784
04ce8     14 10 06 F1 | 	add	local04, #20
04cec     08 0F 02 FB | 	rdlong	local03, local04
04cf0     01 0E 06 F1 | 	add	local03, #1
04cf4     08 0F 62 FC | 	wrlong	local03, local04
04cf8     10 10 86 F1 | 	sub	local04, #16
04cfc     08 0F C2 FA | 	rdbyte	local03, local04
04d00     01 0E 46 F5 | 	or	local03, #1
04d04     08 0F 42 FC | 	wrbyte	local03, local04
04d08     04 10 86 F1 | 	sub	local04, #4
04d0c                 | LR__0784
04d0c     09 0D 02 F6 | 	mov	local02, local05
04d10     18 10 06 F1 | 	add	local04, #24
04d14     08 13 02 FB | 	rdlong	local05, local04
04d18     18 10 86 F1 | 	sub	local04, #24
04d1c     09 0D 12 F2 | 	cmp	local02, local05 wc
04d20     58 FF 9F CD |  if_b	jmp	#LR__0783
04d24                 | LR__0785
04d24                 | ' #line 1500 "ff.c"
04d24                 | ' 	return FR_OK;
04d24     00 EA 05 F6 | 	mov	result1, #0
04d28                 | LR__0786
04d28     A7 F0 03 F6 | 	mov	ptra, fp
04d2c     B2 00 A0 FD | 	call	#popregs_
04d30                 | _fatfs_cc_remove_chain_ret
04d30     2D 00 64 FD | 	ret
04d34                 | 
04d34                 | _fatfs_cc_create_chain
04d34     09 4A 05 F6 | 	mov	COUNT_, #9
04d38     A8 00 A0 FD | 	call	#pushregs_
04d3c     00 0B 02 F6 | 	mov	local01, arg01
04d40     01 0D 0A F6 | 	mov	local02, arg02 wz
04d44     05 0F 02 FB | 	rdlong	local03, local01
04d48     28 00 90 5D |  if_ne	jmp	#LR__0790
04d4c     10 0E 06 F1 | 	add	local03, #16
04d50     07 11 0A FB | 	rdlong	local04, local03 wz
04d54     10 0E 86 F1 | 	sub	local03, #16
04d58     18 0E 06 51 |  if_ne	add	local03, #24
04d5c     07 13 02 5B |  if_ne	rdlong	local05, local03
04d60     18 0E 86 51 |  if_ne	sub	local03, #24
04d64     09 11 12 52 |  if_ne	cmp	local04, local05 wc
04d68     50 00 90 4D |  if_c_and_nz	jmp	#LR__0791
04d6c     01 10 06 F6 | 	mov	local04, #1
04d70     48 00 90 FD | 	jmp	#LR__0791
04d74                 | LR__0790
04d74     06 03 02 F6 | 	mov	arg02, local02
04d78     05 01 02 F6 | 	mov	arg01, local01
04d7c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
04d80     F5 10 02 F6 | 	mov	local04, result1
04d84     02 10 16 F2 | 	cmp	local04, #2 wc
04d88     01 EA 05 C6 |  if_b	mov	result1, #1
04d8c     BC 01 90 CD |  if_b	jmp	#LR__0801
04d90     FF FF 7F FF 
04d94     FF 11 0E F2 | 	cmp	local04, ##-1 wz
04d98     08 EB 01 A6 |  if_e	mov	result1, local04
04d9c     AC 01 90 AD |  if_e	jmp	#LR__0801
04da0     18 0E 06 F1 | 	add	local03, #24
04da4     07 13 02 FB | 	rdlong	local05, local03
04da8     18 0E 86 F1 | 	sub	local03, #24
04dac     09 11 12 F2 | 	cmp	local04, local05 wc
04db0     08 EB 01 C6 |  if_b	mov	result1, local04
04db4     94 01 90 CD |  if_b	jmp	#LR__0801
04db8     06 11 02 F6 | 	mov	local04, local02
04dbc                 | LR__0791
04dbc     14 0E 06 F1 | 	add	local03, #20
04dc0     07 13 0A FB | 	rdlong	local05, local03 wz
04dc4     14 0E 86 F1 | 	sub	local03, #20
04dc8     00 EA 05 A6 |  if_e	mov	result1, #0
04dcc     7C 01 90 AD |  if_e	jmp	#LR__0801
04dd0     00 14 06 F6 | 	mov	local06, #0
04dd4     06 11 0A F2 | 	cmp	local04, local02 wz
04dd8     74 00 90 5D |  if_ne	jmp	#LR__0794
04ddc     08 15 02 F6 | 	mov	local06, local04
04de0     01 14 06 F1 | 	add	local06, #1
04de4     18 0E 06 F1 | 	add	local03, #24
04de8     07 13 02 FB | 	rdlong	local05, local03
04dec     18 0E 86 F1 | 	sub	local03, #24
04df0     09 15 12 F2 | 	cmp	local06, local05 wc
04df4     02 14 06 36 |  if_ae	mov	local06, #2
04df8     0A 03 02 F6 | 	mov	arg02, local06
04dfc     05 01 02 F6 | 	mov	arg01, local01
04e00     68 FA BF FD | 	call	#_fatfs_cc_get_fat
04e04     F5 12 02 F6 | 	mov	local05, result1
04e08     01 12 0E F2 | 	cmp	local05, #1 wz
04e0c     FF FF 7F 5F 
04e10     FF 13 0E 52 |  if_ne	cmp	local05, ##-1 wz
04e14     09 EB 01 A6 |  if_e	mov	result1, local05
04e18     30 01 90 AD |  if_e	jmp	#LR__0801
04e1c     00 12 0E F2 | 	cmp	local05, #0 wz
04e20     2C 00 90 AD |  if_e	jmp	#LR__0793
04e24     10 0E 06 F1 | 	add	local03, #16
04e28     07 17 02 FB | 	rdlong	local07, local03
04e2c     10 0E 86 F1 | 	sub	local03, #16
04e30     02 16 16 F2 | 	cmp	local07, #2 wc
04e34     14 00 90 CD |  if_b	jmp	#LR__0792
04e38     18 0E 06 F1 | 	add	local03, #24
04e3c     07 13 02 FB | 	rdlong	local05, local03
04e40     18 0E 86 F1 | 	sub	local03, #24
04e44     09 17 12 F2 | 	cmp	local07, local05 wc
04e48     0B 11 02 C6 |  if_b	mov	local04, local07
04e4c                 | LR__0792
04e4c     00 14 06 F6 | 	mov	local06, #0
04e50                 | LR__0793
04e50                 | LR__0794
04e50     00 14 0E F2 | 	cmp	local06, #0 wz
04e54     60 00 90 5D |  if_ne	jmp	#LR__0797
04e58     08 15 02 F6 | 	mov	local06, local04
04e5c                 | ' 			ncl = scl;
04e5c                 | ' 			for (;;) {
04e5c                 | LR__0795
04e5c     01 14 06 F1 | 	add	local06, #1
04e60     18 0E 06 F1 | 	add	local03, #24
04e64     07 13 02 FB | 	rdlong	local05, local03
04e68     18 0E 86 F1 | 	sub	local03, #24
04e6c     09 15 12 F2 | 	cmp	local06, local05 wc
04e70     02 14 06 36 |  if_ae	mov	local06, #2
04e74     08 15 1A 32 |  if_ae	cmp	local06, local04 wcz
04e78     00 EA 05 16 |  if_a	mov	result1, #0
04e7c     CC 00 90 1D |  if_a	jmp	#LR__0801
04e80     0A 03 02 F6 | 	mov	arg02, local06
04e84     05 01 02 F6 | 	mov	arg01, local01
04e88     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
04e8c     F5 16 0A F6 | 	mov	local07, result1 wz
04e90     24 00 90 AD |  if_e	jmp	#LR__0796
04e94     01 16 0E F2 | 	cmp	local07, #1 wz
04e98     FF FF 7F 5F 
04e9c     FF 17 0E 52 |  if_ne	cmp	local07, ##-1 wz
04ea0     0B EB 01 A6 |  if_e	mov	result1, local07
04ea4     A4 00 90 AD |  if_e	jmp	#LR__0801
04ea8     08 15 0A F2 | 	cmp	local06, local04 wz
04eac     00 EA 05 A6 |  if_e	mov	result1, #0
04eb0     98 00 90 AD |  if_e	jmp	#LR__0801
04eb4     A4 FF 9F FD | 	jmp	#LR__0795
04eb8                 | LR__0796
04eb8                 | LR__0797
04eb8     07 01 02 F6 | 	mov	arg01, local03
04ebc     0A 03 02 F6 | 	mov	arg02, local06
04ec0     01 04 66 F6 | 	neg	arg03, #1
04ec4     48 FB BF FD | 	call	#_fatfs_cc_put_fat
04ec8     F5 18 0A F6 | 	mov	local08, result1 wz
04ecc     1C 00 90 5D |  if_ne	jmp	#LR__0798
04ed0     00 0C 0E F2 | 	cmp	local02, #0 wz
04ed4     14 00 90 AD |  if_e	jmp	#LR__0798
04ed8     07 01 02 F6 | 	mov	arg01, local03
04edc     06 03 02 F6 | 	mov	arg02, local02
04ee0     0A 05 02 F6 | 	mov	arg03, local06
04ee4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
04ee8     F5 18 02 F6 | 	mov	local08, result1
04eec                 | LR__0798
04eec     00 18 0E F2 | 	cmp	local08, #0 wz
04ef0     4C 00 90 5D |  if_ne	jmp	#LR__0799
04ef4     10 0E 06 F1 | 	add	local03, #16
04ef8     07 15 62 FC | 	wrlong	local06, local03
04efc     08 0E 06 F1 | 	add	local03, #8
04f00     07 13 02 FB | 	rdlong	local05, local03
04f04     02 12 86 F1 | 	sub	local05, #2
04f08     04 0E 86 F1 | 	sub	local03, #4
04f0c     07 1B 02 FB | 	rdlong	local09, local03
04f10     14 0E 86 F1 | 	sub	local03, #20
04f14     09 1B 1A F2 | 	cmp	local09, local05 wcz
04f18     14 0E 06 E1 |  if_be	add	local03, #20
04f1c     07 1B 02 EB |  if_be	rdlong	local09, local03
04f20     01 1A 86 E1 |  if_be	sub	local09, #1
04f24     07 1B 62 EC |  if_be	wrlong	local09, local03
04f28     14 0E 86 E1 |  if_be	sub	local03, #20
04f2c     04 0E 06 F1 | 	add	local03, #4
04f30     07 13 C2 FA | 	rdbyte	local05, local03
04f34     01 12 46 F5 | 	or	local05, #1
04f38     07 13 42 FC | 	wrbyte	local05, local03
04f3c     08 00 90 FD | 	jmp	#LR__0800
04f40                 | LR__0799
04f40     01 18 0E F2 | 	cmp	local08, #1 wz
04f44     01 14 C6 F6 | 	negz	local06, #1
04f48                 | LR__0800
04f48                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
04f48                 | ' 	}
04f48                 | ' 
04f48                 | ' 	return ncl;
04f48     0A EB 01 F6 | 	mov	result1, local06
04f4c                 | LR__0801
04f4c     A7 F0 03 F6 | 	mov	ptra, fp
04f50     B2 00 A0 FD | 	call	#popregs_
04f54                 | _fatfs_cc_create_chain_ret
04f54     2D 00 64 FD | 	ret
04f58                 | 
04f58                 | _fatfs_cc_dir_clear
04f58     06 4A 05 F6 | 	mov	COUNT_, #6
04f5c     A8 00 A0 FD | 	call	#pushregs_
04f60     00 0B 02 F6 | 	mov	local01, arg01
04f64     01 0D 02 F6 | 	mov	local02, arg02
04f68     05 01 02 F6 | 	mov	arg01, local01
04f6c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
04f70     00 EA 0D F2 | 	cmp	result1, #0 wz
04f74     01 EA 05 56 |  if_ne	mov	result1, #1
04f78     90 00 90 5D |  if_ne	jmp	#LR__0812
04f7c     05 01 02 F6 | 	mov	arg01, local01
04f80     06 03 02 F6 | 	mov	arg02, local02
04f84     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
04f88     F5 0E 02 F6 | 	mov	local03, result1
04f8c     30 0A 06 F1 | 	add	local01, #48
04f90     05 0F 62 FC | 	wrlong	local03, local01
04f94     04 0A 06 F1 | 	add	local01, #4
04f98     05 01 02 F6 | 	mov	arg01, local01
04f9c     00 02 06 F6 | 	mov	arg02, #0
04fa0     09 04 C6 F9 | 	decod	arg03, #9
04fa4     98 00 A0 FD | 	call	#\builtin_bytefill_
04fa8     05 11 02 F6 | 	mov	local04, local01
04fac                 | ' #line 1667 "ff.c"
04fac                 | ' 	{
04fac                 | ' 		ibuf = fs->win; szb = 1;
04fac                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
04fac     00 12 06 F6 | 	mov	local05, #0
04fb0     34 0A 86 F1 | 	sub	local01, #52
04fb4                 | LR__0810
04fb4     0A 0A 06 F1 | 	add	local01, #10
04fb8     05 15 E2 FA | 	rdword	local06, local01
04fbc     0A 0A 86 F1 | 	sub	local01, #10
04fc0     0A 13 12 F2 | 	cmp	local05, local06 wc
04fc4     2C 00 90 3D |  if_ae	jmp	#LR__0811
04fc8     01 0A 06 F1 | 	add	local01, #1
04fcc     05 01 C2 FA | 	rdbyte	arg01, local01
04fd0     01 0A 86 F1 | 	sub	local01, #1
04fd4     08 03 02 F6 | 	mov	arg02, local04
04fd8     07 05 02 F6 | 	mov	arg03, local03
04fdc     09 05 02 F1 | 	add	arg03, local05
04fe0     01 06 06 F6 | 	mov	arg04, #1
04fe4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
04fe8     00 EA 0D F2 | 	cmp	result1, #0 wz
04fec     01 12 06 A1 |  if_e	add	local05, #1
04ff0     C0 FF 9F AD |  if_e	jmp	#LR__0810
04ff4                 | LR__0811
04ff4                 | ' 	}
04ff4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
04ff4     0A 0A 06 F1 | 	add	local01, #10
04ff8     05 11 E2 FA | 	rdword	local04, local01
04ffc     08 13 0A F2 | 	cmp	local05, local04 wz
05000     00 14 06 A6 |  if_e	mov	local06, #0
05004     01 14 06 56 |  if_ne	mov	local06, #1
05008     0A EB 01 F6 | 	mov	result1, local06
0500c                 | LR__0812
0500c     A7 F0 03 F6 | 	mov	ptra, fp
05010     B2 00 A0 FD | 	call	#popregs_
05014                 | _fatfs_cc_dir_clear_ret
05014     2D 00 64 FD | 	ret
05018                 | 
05018                 | _fatfs_cc_dir_sdi
05018     06 4A 05 F6 | 	mov	COUNT_, #6
0501c     A8 00 A0 FD | 	call	#pushregs_
05020     00 0B 02 F6 | 	mov	local01, arg01
05024     01 0D 02 F6 | 	mov	local02, arg02
05028     05 0F 02 FB | 	rdlong	local03, local01
0502c     00 10 00 FF 
05030     00 0C 16 F2 | 	cmp	local02, ##2097152 wc
05034     1F 0C CE C7 |  if_b	test	local02, #31 wz
05038                 | ' 		return FR_INT_ERR;
05038     02 EA 05 76 |  if_nc_or_nz	mov	result1, #2
0503c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__0826
05040     10 0A 06 F1 | 	add	local01, #16
05044     05 0D 62 FC | 	wrlong	local02, local01
05048     08 0A 86 F1 | 	sub	local01, #8
0504c     05 11 0A FB | 	rdlong	local04, local01 wz
05050     08 0A 86 F1 | 	sub	local01, #8
05054     07 13 C2 AA |  if_e	rdbyte	local05, local03
05058     03 12 16 A2 |  if_e	cmp	local05, #3 wc
0505c     28 0E 06 21 |  if_nc_and_z	add	local03, #40
05060     07 11 02 2B |  if_nc_and_z	rdlong	local04, local03
05064     28 0E 86 21 |  if_nc_and_z	sub	local03, #40
05068     00 10 0E F2 | 	cmp	local04, #0 wz
0506c     3C 00 90 5D |  if_ne	jmp	#LR__0820
05070     06 13 02 F6 | 	mov	local05, local02
05074     05 12 46 F0 | 	shr	local05, #5
05078     08 0E 06 F1 | 	add	local03, #8
0507c     07 03 E2 FA | 	rdword	arg02, local03
05080     08 0E 86 F1 | 	sub	local03, #8
05084     01 13 12 F2 | 	cmp	local05, arg02 wc
05088     02 EA 05 36 |  if_ae	mov	result1, #2
0508c     E4 00 90 3D |  if_ae	jmp	#LR__0826
05090     28 0E 06 F1 | 	add	local03, #40
05094     07 13 02 FB | 	rdlong	local05, local03
05098     28 0E 86 F1 | 	sub	local03, #40
0509c     18 0A 06 F1 | 	add	local01, #24
050a0     05 13 62 FC | 	wrlong	local05, local01
050a4     18 0A 86 F1 | 	sub	local01, #24
050a8     7C 00 90 FD | 	jmp	#LR__0825
050ac                 | LR__0820
050ac     0A 0E 06 F1 | 	add	local03, #10
050b0     07 15 E2 FA | 	rdword	local06, local03
050b4     0A 0E 86 F1 | 	sub	local03, #10
050b8     09 14 66 F0 | 	shl	local06, #9
050bc                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
050bc                 | ' 		while (ofs >= csz) {
050bc                 | LR__0821
050bc     0A 0D 12 F2 | 	cmp	local02, local06 wc
050c0     4C 00 90 CD |  if_b	jmp	#LR__0824
050c4     05 01 02 F6 | 	mov	arg01, local01
050c8     08 03 02 F6 | 	mov	arg02, local04
050cc     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
050d0     F5 10 02 F6 | 	mov	local04, result1
050d4     FF FF 7F FF 
050d8     FF 11 0E F2 | 	cmp	local04, ##-1 wz
050dc     01 EA 05 A6 |  if_e	mov	result1, #1
050e0     90 00 90 AD |  if_e	jmp	#LR__0826
050e4     02 10 16 F2 | 	cmp	local04, #2 wc
050e8     14 00 90 CD |  if_b	jmp	#LR__0822
050ec     18 0E 06 F1 | 	add	local03, #24
050f0     07 13 02 FB | 	rdlong	local05, local03
050f4     18 0E 86 F1 | 	sub	local03, #24
050f8     09 11 12 F2 | 	cmp	local04, local05 wc
050fc     08 00 90 CD |  if_b	jmp	#LR__0823
05100                 | LR__0822
05100     02 EA 05 F6 | 	mov	result1, #2
05104     6C 00 90 FD | 	jmp	#LR__0826
05108                 | LR__0823
05108     0A 0D 82 F1 | 	sub	local02, local06
0510c     AC FF 9F FD | 	jmp	#LR__0821
05110                 | LR__0824
05110     07 01 02 F6 | 	mov	arg01, local03
05114     08 03 02 F6 | 	mov	arg02, local04
05118     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
0511c     18 0A 06 F1 | 	add	local01, #24
05120     05 EB 61 FC | 	wrlong	result1, local01
05124     18 0A 86 F1 | 	sub	local01, #24
05128                 | LR__0825
05128     14 0A 06 F1 | 	add	local01, #20
0512c     05 11 62 FC | 	wrlong	local04, local01
05130     04 0A 06 F1 | 	add	local01, #4
05134     05 13 0A FB | 	rdlong	local05, local01 wz
05138     18 0A 86 F1 | 	sub	local01, #24
0513c     02 EA 05 A6 |  if_e	mov	result1, #2
05140     30 00 90 AD |  if_e	jmp	#LR__0826
05144     06 15 02 F6 | 	mov	local06, local02
05148     09 14 46 F0 | 	shr	local06, #9
0514c     18 0A 06 F1 | 	add	local01, #24
05150     05 13 02 FB | 	rdlong	local05, local01
05154     0A 13 02 F1 | 	add	local05, local06
05158     05 13 62 FC | 	wrlong	local05, local01
0515c     34 0E 06 F1 | 	add	local03, #52
05160     FF 0D 06 F5 | 	and	local02, #511
05164     06 0F 02 F1 | 	add	local03, local02
05168     04 0A 06 F1 | 	add	local01, #4
0516c     05 0F 62 FC | 	wrlong	local03, local01
05170                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
05170                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
05170                 | ' 
05170                 | ' 	return FR_OK;
05170     00 EA 05 F6 | 	mov	result1, #0
05174                 | LR__0826
05174     A7 F0 03 F6 | 	mov	ptra, fp
05178     B2 00 A0 FD | 	call	#popregs_
0517c                 | _fatfs_cc_dir_sdi_ret
0517c     2D 00 64 FD | 	ret
05180                 | 
05180                 | _fatfs_cc_dir_next
05180     05 4A 05 F6 | 	mov	COUNT_, #5
05184     A8 00 A0 FD | 	call	#pushregs_
05188     00 0B 02 F6 | 	mov	local01, arg01
0518c     01 0D 02 F6 | 	mov	local02, arg02
05190     05 0F 02 FB | 	rdlong	local03, local01
05194     10 0A 06 F1 | 	add	local01, #16
05198     05 11 02 FB | 	rdlong	local04, local01
0519c     10 0A 86 F1 | 	sub	local01, #16
051a0     20 10 06 F1 | 	add	local04, #32
051a4     00 10 00 FF 
051a8     00 10 16 F2 | 	cmp	local04, ##2097152 wc
051ac     18 0A 06 31 |  if_ae	add	local01, #24
051b0     05 01 68 3C |  if_ae	wrlong	#0, local01
051b4     18 0A 86 31 |  if_ae	sub	local01, #24
051b8     18 0A 06 F1 | 	add	local01, #24
051bc     05 03 0A FB | 	rdlong	arg02, local01 wz
051c0     18 0A 86 F1 | 	sub	local01, #24
051c4     04 EA 05 A6 |  if_e	mov	result1, #4
051c8     64 01 90 AD |  if_e	jmp	#LR__0835
051cc     FF 11 CE F7 | 	test	local04, #511 wz
051d0     3C 01 90 5D |  if_ne	jmp	#LR__0834
051d4     18 0A 06 F1 | 	add	local01, #24
051d8     05 03 02 FB | 	rdlong	arg02, local01
051dc     01 02 06 F1 | 	add	arg02, #1
051e0     05 03 62 FC | 	wrlong	arg02, local01
051e4     04 0A 86 F1 | 	sub	local01, #4
051e8     05 03 0A FB | 	rdlong	arg02, local01 wz
051ec     14 0A 86 F1 | 	sub	local01, #20
051f0     2C 00 90 5D |  if_ne	jmp	#LR__0830
051f4     08 03 02 F6 | 	mov	arg02, local04
051f8     05 02 46 F0 | 	shr	arg02, #5
051fc     08 0E 06 F1 | 	add	local03, #8
05200     07 0D E2 FA | 	rdword	local02, local03
05204     08 0E 86 F1 | 	sub	local03, #8
05208     06 03 12 F2 | 	cmp	arg02, local02 wc
0520c     18 0A 06 31 |  if_ae	add	local01, #24
05210     05 01 68 3C |  if_ae	wrlong	#0, local01
05214                 | ' 				dp->sect = 0; return FR_NO_FILE;
05214     04 EA 05 36 |  if_ae	mov	result1, #4
05218     14 01 90 3D |  if_ae	jmp	#LR__0835
0521c     F0 00 90 FD | 	jmp	#LR__0833
05220                 | LR__0830
05220     08 01 02 F6 | 	mov	arg01, local04
05224     09 00 46 F0 | 	shr	arg01, #9
05228     0A 0E 06 F1 | 	add	local03, #10
0522c     07 03 E2 FA | 	rdword	arg02, local03
05230     0A 0E 86 F1 | 	sub	local03, #10
05234     01 02 86 F1 | 	sub	arg02, #1
05238     01 01 CA F7 | 	test	arg01, arg02 wz
0523c     D0 00 90 5D |  if_ne	jmp	#LR__0832
05240     05 01 02 F6 | 	mov	arg01, local01
05244     14 0A 06 F1 | 	add	local01, #20
05248     05 03 02 FB | 	rdlong	arg02, local01
0524c     14 0A 86 F1 | 	sub	local01, #20
05250     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
05254     F5 12 02 F6 | 	mov	local05, result1
05258     02 12 16 F2 | 	cmp	local05, #2 wc
0525c     02 EA 05 C6 |  if_b	mov	result1, #2
05260     CC 00 90 CD |  if_b	jmp	#LR__0835
05264     FF FF 7F FF 
05268     FF 13 0E F2 | 	cmp	local05, ##-1 wz
0526c     01 EA 05 A6 |  if_e	mov	result1, #1
05270     BC 00 90 AD |  if_e	jmp	#LR__0835
05274     18 0E 06 F1 | 	add	local03, #24
05278     07 03 02 FB | 	rdlong	arg02, local03
0527c     18 0E 86 F1 | 	sub	local03, #24
05280     01 13 12 F2 | 	cmp	local05, arg02 wc
05284     68 00 90 CD |  if_b	jmp	#LR__0831
05288     00 0C 0E F2 | 	cmp	local02, #0 wz
0528c     18 0A 06 A1 |  if_e	add	local01, #24
05290     05 01 68 AC |  if_e	wrlong	#0, local01
05294                 | ' 						dp->sect = 0; return FR_NO_FILE;
05294     04 EA 05 A6 |  if_e	mov	result1, #4
05298     94 00 90 AD |  if_e	jmp	#LR__0835
0529c     05 01 02 F6 | 	mov	arg01, local01
052a0     14 0A 06 F1 | 	add	local01, #20
052a4     05 03 02 FB | 	rdlong	arg02, local01
052a8     14 0A 86 F1 | 	sub	local01, #20
052ac     84 FA BF FD | 	call	#_fatfs_cc_create_chain
052b0     F5 12 0A F6 | 	mov	local05, result1 wz
052b4     07 EA 05 A6 |  if_e	mov	result1, #7
052b8     74 00 90 AD |  if_e	jmp	#LR__0835
052bc     01 12 0E F2 | 	cmp	local05, #1 wz
052c0     02 EA 05 A6 |  if_e	mov	result1, #2
052c4     68 00 90 AD |  if_e	jmp	#LR__0835
052c8     FF FF 7F FF 
052cc     FF 13 0E F2 | 	cmp	local05, ##-1 wz
052d0     01 EA 05 A6 |  if_e	mov	result1, #1
052d4     58 00 90 AD |  if_e	jmp	#LR__0835
052d8     09 03 02 F6 | 	mov	arg02, local05
052dc     07 01 02 F6 | 	mov	arg01, local03
052e0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
052e4     00 EA 0D F2 | 	cmp	result1, #0 wz
052e8     01 EA 05 56 |  if_ne	mov	result1, #1
052ec     40 00 90 5D |  if_ne	jmp	#LR__0835
052f0                 | LR__0831
052f0     14 0A 06 F1 | 	add	local01, #20
052f4     05 13 62 FC | 	wrlong	local05, local01
052f8     07 01 02 F6 | 	mov	arg01, local03
052fc     09 03 02 F6 | 	mov	arg02, local05
05300     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
05304     04 0A 06 F1 | 	add	local01, #4
05308     05 EB 61 FC | 	wrlong	result1, local01
0530c     18 0A 86 F1 | 	sub	local01, #24
05310                 | LR__0832
05310                 | LR__0833
05310                 | LR__0834
05310     10 0A 06 F1 | 	add	local01, #16
05314     05 11 62 FC | 	wrlong	local04, local01
05318     34 0E 06 F1 | 	add	local03, #52
0531c     FF 11 06 F5 | 	and	local04, #511
05320     08 0F 02 F1 | 	add	local03, local04
05324     0C 0A 06 F1 | 	add	local01, #12
05328     05 0F 62 FC | 	wrlong	local03, local01
0532c                 | ' #line 1771 "ff.c"
0532c                 | ' 				}
0532c                 | ' 				dp->clust = clst;
0532c                 | ' 				dp->sect = clst2sect(fs, clst);
0532c                 | ' 			}
0532c                 | ' 		}
0532c                 | ' 	}
0532c                 | ' 	dp->dptr = ofs;
0532c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
0532c                 | ' 
0532c                 | ' 	return FR_OK;
0532c     00 EA 05 F6 | 	mov	result1, #0
05330                 | LR__0835
05330     A7 F0 03 F6 | 	mov	ptra, fp
05334     B2 00 A0 FD | 	call	#popregs_
05338                 | _fatfs_cc_dir_next_ret
05338     2D 00 64 FD | 	ret
0533c                 | 
0533c                 | _fatfs_cc_dir_alloc
0533c     08 4A 05 F6 | 	mov	COUNT_, #8
05340     A8 00 A0 FD | 	call	#pushregs_
05344     00 0B 02 F6 | 	mov	local01, arg01
05348     01 0D 02 F6 | 	mov	local02, arg02
0534c     05 0F 02 FB | 	rdlong	local03, local01
05350     05 01 02 F6 | 	mov	arg01, local01
05354     00 02 06 F6 | 	mov	arg02, #0
05358     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
0535c     F5 10 0A F6 | 	mov	local04, result1 wz
05360     70 00 90 5D |  if_ne	jmp	#LR__0844
05364     00 12 06 F6 | 	mov	local05, #0
05368                 | ' 		n = 0;
05368                 | ' 		do {
05368                 | LR__0840
05368     18 0A 06 F1 | 	add	local01, #24
0536c     05 03 02 FB | 	rdlong	arg02, local01
05370     18 0A 86 F1 | 	sub	local01, #24
05374     07 01 02 F6 | 	mov	arg01, local03
05378     38 F3 BF FD | 	call	#_fatfs_cc_move_window
0537c     F5 10 0A F6 | 	mov	local04, result1 wz
05380     50 00 90 5D |  if_ne	jmp	#LR__0843
05384     1C 0A 06 F1 | 	add	local01, #28
05388     05 15 02 FB | 	rdlong	local06, local01
0538c     1C 0A 86 F1 | 	sub	local01, #28
05390     0A 15 C2 FA | 	rdbyte	local06, local06
05394     E5 14 0E F2 | 	cmp	local06, #229 wz
05398     1C 0A 06 51 |  if_ne	add	local01, #28
0539c     05 17 02 5B |  if_ne	rdlong	local07, local01
053a0     1C 0A 86 51 |  if_ne	sub	local01, #28
053a4     0B 19 CA 5A |  if_ne	rdbyte	local08, local07 wz
053a8     10 00 90 5D |  if_ne	jmp	#LR__0841
053ac     01 12 06 F1 | 	add	local05, #1
053b0     06 13 0A F2 | 	cmp	local05, local02 wz
053b4     1C 00 90 AD |  if_e	jmp	#LR__0843
053b8     04 00 90 FD | 	jmp	#LR__0842
053bc                 | LR__0841
053bc     00 12 06 F6 | 	mov	local05, #0
053c0                 | LR__0842
053c0     05 01 02 F6 | 	mov	arg01, local01
053c4     01 02 06 F6 | 	mov	arg02, #1
053c8     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
053cc     F5 10 0A F6 | 	mov	local04, result1 wz
053d0     94 FF 9F AD |  if_e	jmp	#LR__0840
053d4                 | LR__0843
053d4                 | LR__0844
053d4     04 10 0E F2 | 	cmp	local04, #4 wz
053d8     07 10 06 A6 |  if_e	mov	local04, #7
053dc                 | ' 	return res;
053dc     08 EB 01 F6 | 	mov	result1, local04
053e0     A7 F0 03 F6 | 	mov	ptra, fp
053e4     B2 00 A0 FD | 	call	#popregs_
053e8                 | _fatfs_cc_dir_alloc_ret
053e8     2D 00 64 FD | 	ret
053ec                 | 
053ec                 | _fatfs_cc_ld_clust
053ec     00 EF 01 F6 | 	mov	_var01, arg01
053f0     01 01 02 F6 | 	mov	arg01, arg02
053f4     1A 00 06 F1 | 	add	arg01, #26
053f8                 | ' {
053f8                 | ' 
053f8                 | ' 	return *((WORD*)ptr);
053f8     00 EB E1 FA | 	rdword	result1, arg01
053fc     F5 00 32 F9 | 	getword	arg01, result1, #0
05400     F7 EE C1 FA | 	rdbyte	_var01, _var01
05404     03 EE 0D F2 | 	cmp	_var01, #3 wz
05408     14 02 06 A1 |  if_e	add	arg02, #20
0540c                 | ' {
0540c                 | ' 
0540c                 | ' 	return *((WORD*)ptr);
0540c     01 EB E1 AA |  if_e	rdword	result1, arg02
05410     10 EA 65 A0 |  if_e	shl	result1, #16
05414     F5 00 42 A5 |  if_e	or	arg01, result1
05418                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
05418                 | ' 	}
05418                 | ' 
05418                 | ' 	return cl;
05418     00 EB 01 F6 | 	mov	result1, arg01
0541c                 | _fatfs_cc_ld_clust_ret
0541c     2D 00 64 FD | 	ret
05420                 | 
05420                 | _fatfs_cc_st_clust
05420     00 EF 01 F6 | 	mov	_var01, arg01
05424     01 01 02 F6 | 	mov	arg01, arg02
05428     1A 00 06 F1 | 	add	arg01, #26
0542c     00 05 52 FC | 	wrword	arg03, arg01
05430     F7 EE C1 FA | 	rdbyte	_var01, _var01
05434     03 EE 0D F2 | 	cmp	_var01, #3 wz
05438     14 02 06 A1 |  if_e	add	arg02, #20
0543c     10 04 46 A0 |  if_e	shr	arg03, #16
05440     01 05 52 AC |  if_e	wrword	arg03, arg02
05444                 | _fatfs_cc_st_clust_ret
05444     2D 00 64 FD | 	ret
05448                 | 
05448                 | _fatfs_cc_cmp_lfn
05448     07 4A 05 F6 | 	mov	COUNT_, #7
0544c     A8 00 A0 FD | 	call	#pushregs_
05450     00 0B 02 F6 | 	mov	local01, arg01
05454     01 01 02 F6 | 	mov	arg01, arg02
05458     1A 00 06 F1 | 	add	arg01, #26
0545c                 | ' {
0545c                 | ' 
0545c                 | ' 	return *((WORD*)ptr);
0545c     00 EB E9 FA | 	rdword	result1, arg01 wz
05460     00 EA 05 56 |  if_ne	mov	result1, #0
05464     E0 00 90 5D |  if_ne	jmp	#LR__0856
05468     01 0D C2 FA | 	rdbyte	local02, arg02
0546c     3F 0C 06 F5 | 	and	local02, #63
05470     01 0C 86 F1 | 	sub	local02, #1
05474     0D 0C 06 FD | 	qmul	local02, #13
05478                 | ' 
05478                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
05478                 | ' 
05478                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
05478     01 0E 06 F6 | 	mov	local03, #1
0547c     00 10 06 F6 | 	mov	local04, #0
05480     18 12 62 FD | 	getqx	local05
05484                 | LR__0850
05484     0D 10 16 F2 | 	cmp	local04, #13 wc
05488     9C 00 90 3D |  if_ae	jmp	#LR__0855
0548c     01 01 02 F6 | 	mov	arg01, arg02
05490     08 0D 02 F6 | 	mov	local02, local04
05494     01 00 00 FF 
05498     AE E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
0549c     F3 0C 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
054a0     06 0D C2 FA | 	rdbyte	local02, local02
054a4     01 0C 06 FA | 	mul	local02, #1
054a8     06 01 02 F1 | 	add	arg01, local02
054ac     01 00 00 FF 
054b0     AE E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
054b4                 | ' {
054b4                 | ' 
054b4                 | ' 	return *((WORD*)ptr);
054b4     00 EB E1 FA | 	rdword	result1, arg01
054b8     F5 14 02 F6 | 	mov	local06, result1
054bc     07 0D 02 F6 | 	mov	local02, local03
054c0     0F 0C 4E F7 | 	zerox	local02, #15 wz
054c4     44 00 90 AD |  if_e	jmp	#LR__0853
054c8     00 13 16 F2 | 	cmp	local05, #256 wc
054cc     2C 00 90 3D |  if_ae	jmp	#LR__0851
054d0     0A 01 32 F9 | 	getword	arg01, local06, #0
054d4     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
054d8     F5 0C 02 F6 | 	mov	local02, result1
054dc     09 0F 02 F6 | 	mov	local03, local05
054e0     01 0E 66 F0 | 	shl	local03, #1
054e4     05 0F 02 F1 | 	add	local03, local01
054e8     07 01 E2 FA | 	rdword	arg01, local03
054ec     01 12 06 F1 | 	add	local05, #1
054f0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
054f4     F5 0C 0A F2 | 	cmp	local02, result1 wz
054f8     08 00 90 AD |  if_e	jmp	#LR__0852
054fc                 | LR__0851
054fc                 | ' 				return 0;
054fc     00 EA 05 F6 | 	mov	result1, #0
05500     44 00 90 FD | 	jmp	#LR__0856
05504                 | LR__0852
05504     0A 0F 02 F6 | 	mov	local03, local06
05508     14 00 90 FD | 	jmp	#LR__0854
0550c                 | LR__0853
0550c     0A 15 32 F9 | 	getword	local06, local06, #0
05510     7F 00 00 FF 
05514     FF 15 0E F2 | 	cmp	local06, ##65535 wz
05518     00 EA 05 56 |  if_ne	mov	result1, #0
0551c     28 00 90 5D |  if_ne	jmp	#LR__0856
05520                 | LR__0854
05520     01 10 06 F1 | 	add	local04, #1
05524     5C FF 9F FD | 	jmp	#LR__0850
05528                 | LR__0855
05528     01 0D C2 FA | 	rdbyte	local02, arg02
0552c     40 0C CE F7 | 	test	local02, #64 wz
05530     00 0E 0E 52 |  if_ne	cmp	local03, #0 wz
05534     01 12 66 50 |  if_ne	shl	local05, #1
05538     05 13 02 51 |  if_ne	add	local05, local01
0553c     09 17 EA 5A |  if_ne	rdword	local07, local05 wz
05540     00 EA 05 56 |  if_ne	mov	result1, #0
05544                 | ' 
05544                 | ' 	return 1;
05544     01 EA 05 A6 |  if_e	mov	result1, #1
05548                 | LR__0856
05548     A7 F0 03 F6 | 	mov	ptra, fp
0554c     B2 00 A0 FD | 	call	#popregs_
05550                 | _fatfs_cc_cmp_lfn_ret
05550     2D 00 64 FD | 	ret
05554                 | 
05554                 | _fatfs_cc_pick_lfn
05554     00 EF 01 F6 | 	mov	_var01, arg01
05558     01 01 02 F6 | 	mov	arg01, arg02
0555c     1A 00 06 F1 | 	add	arg01, #26
05560                 | ' {
05560                 | ' 
05560                 | ' 	return *((WORD*)ptr);
05560     00 EB E9 FA | 	rdword	result1, arg01 wz
05564     00 EA 05 56 |  if_ne	mov	result1, #0
05568     D4 00 90 5D |  if_ne	jmp	#LR__0865
0556c     01 F1 C1 FA | 	rdbyte	_var02, arg02
05570     40 F0 25 F5 | 	andn	_var02, #64
05574     01 F0 85 F1 | 	sub	_var02, #1
05578     0D F0 05 FD | 	qmul	_var02, #13
0557c                 | ' 
0557c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
0557c                 | ' 
0557c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
0557c     01 F2 05 F6 | 	mov	_var03, #1
05580     00 F4 05 F6 | 	mov	_var04, #0
05584     18 F6 61 FD | 	getqx	_var05
05588                 | LR__0860
05588     0D F4 15 F2 | 	cmp	_var04, #13 wc
0558c     80 00 90 3D |  if_ae	jmp	#LR__0863
05590     01 01 02 F6 | 	mov	arg01, arg02
05594     FA F0 01 F6 | 	mov	_var02, _var04
05598     01 00 00 FF 
0559c     AE E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
055a0     F3 F0 01 F1 | 	add	_var02, ptr__fatfs_cc_dat__
055a4     F8 F0 C1 FA | 	rdbyte	_var02, _var02
055a8     01 F0 05 FA | 	mul	_var02, #1
055ac     F8 00 02 F1 | 	add	arg01, _var02
055b0     01 00 00 FF 
055b4     AE E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
055b8                 | ' {
055b8                 | ' 
055b8                 | ' 	return *((WORD*)ptr);
055b8     00 EB E1 FA | 	rdword	result1, arg01
055bc     F5 F8 01 F6 | 	mov	_var06, result1
055c0     F9 F0 01 F6 | 	mov	_var02, _var03
055c4     0F F0 4D F7 | 	zerox	_var02, #15 wz
055c8     28 00 90 AD |  if_e	jmp	#LR__0861
055cc     00 F7 15 F2 | 	cmp	_var05, #256 wc
055d0     00 EA 05 36 |  if_ae	mov	result1, #0
055d4     68 00 90 3D |  if_ae	jmp	#LR__0865
055d8     FB F0 01 F6 | 	mov	_var02, _var05
055dc     01 F0 65 F0 | 	shl	_var02, #1
055e0     F7 F0 01 F1 | 	add	_var02, _var01
055e4     FC F2 01 F6 | 	mov	_var03, _var06
055e8     F8 F2 51 FC | 	wrword	_var03, _var02
055ec     01 F6 05 F1 | 	add	_var05, #1
055f0     14 00 90 FD | 	jmp	#LR__0862
055f4                 | LR__0861
055f4     FC F8 31 F9 | 	getword	_var06, _var06, #0
055f8     7F 00 00 FF 
055fc     FF F9 0D F2 | 	cmp	_var06, ##65535 wz
05600     00 EA 05 56 |  if_ne	mov	result1, #0
05604     38 00 90 5D |  if_ne	jmp	#LR__0865
05608                 | LR__0862
05608     01 F4 05 F1 | 	add	_var04, #1
0560c     78 FF 9F FD | 	jmp	#LR__0860
05610                 | LR__0863
05610     01 F1 C1 FA | 	rdbyte	_var02, arg02
05614     40 F0 CD F7 | 	test	_var02, #64 wz
05618     F9 FA 01 56 |  if_ne	mov	_var07, _var03
0561c     0F FA 4D 57 |  if_ne	zerox	_var07, #15 wz
05620     18 00 90 AD |  if_e	jmp	#LR__0864
05624     00 F7 15 F2 | 	cmp	_var05, #256 wc
05628     00 EA 05 36 |  if_ae	mov	result1, #0
0562c     10 00 90 3D |  if_ae	jmp	#LR__0865
05630     01 F6 65 F0 | 	shl	_var05, #1
05634     F7 F6 01 F1 | 	add	_var05, _var01
05638     FB 00 58 FC | 	wrword	#0, _var05
0563c                 | LR__0864
0563c                 | ' 		lfnbuf[i] = 0;
0563c                 | ' 	}
0563c                 | ' 
0563c                 | ' 	return 1;
0563c     01 EA 05 F6 | 	mov	result1, #1
05640                 | LR__0865
05640                 | _fatfs_cc_pick_lfn_ret
05640     2D 00 64 FD | 	ret
05644                 | 
05644                 | _fatfs_cc_put_lfn
05644     0D 02 06 F1 | 	add	arg02, #13
05648     01 07 42 FC | 	wrbyte	arg04, arg02
0564c     02 07 E2 F8 | 	getbyte	arg04, arg03, #0
05650     01 06 86 F1 | 	sub	arg04, #1
05654     0D 06 06 FD | 	qmul	arg04, #13
05658     00 EF 01 F6 | 	mov	_var01, arg01
0565c     02 02 86 F1 | 	sub	arg02, #2
05660     01 1F 48 FC | 	wrbyte	#15, arg02
05664     01 02 06 F1 | 	add	arg02, #1
05668     01 01 48 FC | 	wrbyte	#0, arg02
0566c     0C 02 86 F1 | 	sub	arg02, #12
05670     01 01 02 F6 | 	mov	arg01, arg02
05674     1A 00 06 F1 | 	add	arg01, #26
05678     00 01 58 FC | 	wrword	#0, arg01
0567c     00 F0 05 F6 | 	mov	_var02, #0
05680     00 F2 05 F6 | 	mov	_var03, #0
05684                 | ' 	BYTE* dir,
05684                 | ' 	BYTE ord,
05684                 | ' 	BYTE sum
05684                 | ' )
05684                 | ' {
05684                 | ' 	UINT i, s;
05684                 | ' 	WCHAR wc;
05684                 | ' 
05684                 | ' 
05684                 | ' 	dir[ 13 ] = sum;
05684                 | ' 	dir[ 11 ] =  0x0F ;
05684                 | ' 	dir[ 12 ] = 0;
05684                 | ' 	st_word(dir +  26 , 0);
05684                 | ' 
05684                 | ' 	i = (ord - 1) * 13;
05684                 | ' 	s = wc = 0;
05684                 | ' 	do {
05684     01 00 00 FF 
05688     AE E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
0568c     18 F4 61 FD | 	getqx	_var04
05690     97 2A 48 FB | 	callpa	#(@LR__0871-@LR__0870)>>2,fcache_load_ptr_
05694                 | LR__0870
05694     F8 06 32 F9 | 	getword	arg04, _var02, #0
05698     7F 00 00 FF 
0569c     FF 07 0E F2 | 	cmp	arg04, ##65535 wz
056a0     FA 00 02 56 |  if_ne	mov	arg01, _var04
056a4     01 F4 05 51 |  if_ne	add	_var04, #1
056a8     01 00 66 50 |  if_ne	shl	arg01, #1
056ac     F7 00 02 51 |  if_ne	add	arg01, _var01
056b0     00 F1 E1 5A |  if_ne	rdword	_var02, arg01
056b4     01 01 02 F6 | 	mov	arg01, arg02
056b8     F9 06 02 F6 | 	mov	arg04, _var03
056bc     F3 06 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
056c0     03 07 C2 FA | 	rdbyte	arg04, arg04
056c4     01 06 06 FA | 	mul	arg04, #1
056c8     03 01 02 F1 | 	add	arg01, arg04
056cc     00 F1 51 FC | 	wrword	_var02, arg01
056d0     F8 06 02 F6 | 	mov	arg04, _var02
056d4     0F 06 4E F7 | 	zerox	arg04, #15 wz
056d8     0F F0 CD A9 |  if_e	bmask	_var02, #15
056dc     01 F2 05 F1 | 	add	_var03, #1
056e0     0D F2 15 F2 | 	cmp	_var03, #13 wc
056e4     AC FF 9F CD |  if_b	jmp	#LR__0870
056e8                 | LR__0871
056e8     01 00 00 FF 
056ec     AE E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
056f0     F8 F0 31 F9 | 	getword	_var02, _var02, #0
056f4     7F 00 00 FF 
056f8     FF F1 0D F2 | 	cmp	_var02, ##65535 wz
056fc     01 F4 65 50 |  if_ne	shl	_var04, #1
05700     F7 F4 01 51 |  if_ne	add	_var04, _var01
05704     FA F4 E9 5A |  if_ne	rdword	_var04, _var04 wz
05708     02 05 E2 A8 |  if_e	getbyte	arg03, arg03, #0
0570c     40 04 46 A5 |  if_e	or	arg03, #64
05710     01 05 42 FC | 	wrbyte	arg03, arg02
05714                 | _fatfs_cc_put_lfn_ret
05714     2D 00 64 FD | 	ret
05718                 | 
05718                 | _fatfs_cc_gen_numname
05718     08 4A 05 F6 | 	mov	COUNT_, #8
0571c     A8 00 A0 FD | 	call	#pushregs_
05720     2C F0 07 F1 | 	add	ptra, #44
05724     00 0B 02 F6 | 	mov	local01, arg01
05728     01 0D 02 F6 | 	mov	local02, arg02
0572c     02 0F 02 F6 | 	mov	local03, arg03
05730     03 11 02 F6 | 	mov	local04, arg04
05734     05 01 02 F6 | 	mov	arg01, local01
05738     06 03 02 F6 | 	mov	arg02, local02
0573c     0B 04 06 F6 | 	mov	arg03, #11
05740     A4 B5 BF FD | 	call	#__system____builtin_memmove
05744     06 10 16 F2 | 	cmp	local04, #6 wc
05748     48 00 90 CD |  if_b	jmp	#LR__0885
0574c     08 13 02 F6 | 	mov	local05, local04
05750     97 1E 48 FB | 	callpa	#(@LR__0883-@LR__0880)>>2,fcache_load_ptr_
05754                 | ' 		sreg = seq;
05754                 | ' 		while (*lfn) {
05754                 | LR__0880
05754     07 15 EA FA | 	rdword	local06, local03 wz
05758     34 00 90 AD |  if_e	jmp	#LR__0884
0575c     07 17 E2 FA | 	rdword	local07, local03
05760                 | ' 			wc = *lfn++;
05760                 | ' 			for (i = 0; i < 16; i++) {
05760     02 0E 06 F1 | 	add	local03, #2
05764     10 12 DC FC | 	rep	@LR__0882, #16
05768                 | LR__0881
05768     01 12 66 F0 | 	shl	local05, #1
0576c     0B 15 32 F9 | 	getword	local06, local07, #0
05770     01 14 06 F5 | 	and	local06, #1
05774     0A 13 02 F1 | 	add	local05, local06
05778     0B 17 32 F9 | 	getword	local07, local07, #0
0577c     01 16 46 F0 | 	shr	local07, #1
05780     10 12 2E F4 | 	testbn	local05, #16 wz
05784     88 00 00 5F 
05788     21 12 66 55 |  if_ne	xor	local05, ##69665
0578c                 | LR__0882
0578c     C4 FF 9F FD | 	jmp	#LR__0880
05790                 | LR__0883
05790                 | LR__0884
05790     09 11 02 F6 | 	mov	local04, local05
05794                 | LR__0885
05794     07 16 06 F6 | 	mov	local07, #7
05798                 | ' 			}
05798                 | ' 		}
05798                 | ' 		seq = (UINT)sreg;
05798                 | ' 	}
05798                 | ' 
05798                 | ' 
05798                 | ' 	i = 7;
05798                 | ' 	do {
05798     10 4E 05 F1 | 	add	fp, #16
0579c     97 1A 48 FB | 	callpa	#(@LR__0887-@LR__0886)>>2,fcache_load_ptr_
057a0                 | LR__0886
057a0     08 13 42 F8 | 	getnib	local05, local04, #0
057a4     30 12 06 F1 | 	add	local05, #48
057a8     04 10 46 F0 | 	shr	local04, #4
057ac     09 15 E2 F8 | 	getbyte	local06, local05, #0
057b0     3A 14 16 F2 | 	cmp	local06, #58 wc
057b4     09 13 E2 38 |  if_ae	getbyte	local05, local05, #0
057b8     07 12 06 31 |  if_ae	add	local05, #7
057bc     0B 15 02 F6 | 	mov	local06, local07
057c0     01 16 8E F1 | 	sub	local07, #1 wz
057c4     A7 14 02 F1 | 	add	local06, fp
057c8     0A 13 42 FC | 	wrbyte	local05, local06
057cc     00 10 0E 52 |  if_ne	cmp	local04, #0 wz
057d0     CC FF 9F 5D |  if_ne	jmp	#LR__0886
057d4                 | LR__0887
057d4     0B 15 02 F6 | 	mov	local06, local07
057d8     A7 14 02 F1 | 	add	local06, fp
057dc     0A FD 48 FC | 	wrbyte	#126, local06
057e0                 | ' 	ns[i] = '~';
057e0                 | ' 
057e0                 | ' 
057e0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
057e0     00 12 06 F6 | 	mov	local05, #0
057e4     10 4E 85 F1 | 	sub	fp, #16
057e8     97 2A 48 FB | 	callpa	#(@LR__0890-@LR__0888)>>2,fcache_load_ptr_
057ec                 | LR__0888
057ec     0B 13 12 F2 | 	cmp	local05, local07 wc
057f0     4C 00 90 3D |  if_ae	jmp	#LR__0891
057f4     09 15 02 F6 | 	mov	local06, local05
057f8     05 15 02 F1 | 	add	local06, local01
057fc     0A 15 C2 FA | 	rdbyte	local06, local06
05800     20 14 0E F2 | 	cmp	local06, #32 wz
05804     38 00 90 AD |  if_e	jmp	#LR__0891
05808     09 01 02 F6 | 	mov	arg01, local05
0580c     05 01 02 F1 | 	add	arg01, local01
05810     00 01 CA FA | 	rdbyte	arg01, arg01 wz
05814     00 EA 05 56 |  if_ne	mov	result1, #0
05818                 | ' 
05818                 | ' 	return 0;
05818     00 EA 05 A6 |  if_e	mov	result1, #0
0581c     00 EA 0D F2 | 	cmp	result1, #0 wz
05820     14 00 90 AD |  if_e	jmp	#LR__0889
05824     0B 15 02 F6 | 	mov	local06, local07
05828     01 14 86 F1 | 	sub	local06, #1
0582c     0A 13 0A F2 | 	cmp	local05, local06 wz
05830     0C 00 90 AD |  if_e	jmp	#LR__0891
05834     01 12 06 F1 | 	add	local05, #1
05838                 | LR__0889
05838     01 12 06 F1 | 	add	local05, #1
0583c     AC FF 9F FD | 	jmp	#LR__0888
05840                 | LR__0890
05840                 | LR__0891
05840     97 20 48 FB | 	callpa	#(@LR__0895-@LR__0892)>>2,fcache_load_ptr_
05844                 | ' 			j++;
05844                 | ' 		}
05844                 | ' 	}
05844                 | ' 	do {
05844                 | LR__0892
05844     09 15 02 F6 | 	mov	local06, local05
05848     05 15 02 F1 | 	add	local06, local01
0584c     08 16 16 F2 | 	cmp	local07, #8 wc
05850     01 12 06 F1 | 	add	local05, #1
05854     1C 00 90 3D |  if_ae	jmp	#LR__0893
05858     0B 11 02 F6 | 	mov	local04, local07
0585c     10 4E 05 F1 | 	add	fp, #16
05860     A7 10 02 F1 | 	add	local04, fp
05864     08 19 C2 FA | 	rdbyte	local08, local04
05868     01 16 06 F1 | 	add	local07, #1
0586c     10 4E 85 F1 | 	sub	fp, #16
05870     04 00 90 FD | 	jmp	#LR__0894
05874                 | LR__0893
05874     20 18 06 F6 | 	mov	local08, #32
05878                 | LR__0894
05878     0A 19 42 FC | 	wrbyte	local08, local06
0587c     08 12 16 F2 | 	cmp	local05, #8 wc
05880     C0 FF 9F CD |  if_b	jmp	#LR__0892
05884                 | LR__0895
05884     A7 F0 03 F6 | 	mov	ptra, fp
05888     B2 00 A0 FD | 	call	#popregs_
0588c                 | _fatfs_cc_gen_numname_ret
0588c     2D 00 64 FD | 	ret
05890                 | 
05890                 | _fatfs_cc_sum_sfn
05890     00 EE 05 F6 | 	mov	_var01, #0
05894                 | ' )
05894                 | ' {
05894                 | ' 	BYTE sum = 0;
05894                 | ' 	UINT n = 11;
05894                 | ' 
05894                 | ' 	do {
05894     97 12 48 FB | 	callpa	#(@LR__0902-@LR__0900)>>2,fcache_load_ptr_
05898                 | LR__0900
05898     0B 10 DC FC | 	rep	@LR__0903, #11
0589c                 | LR__0901
0589c     F7 EA E1 F8 | 	getbyte	result1, _var01, #0
058a0     01 EA 45 F0 | 	shr	result1, #1
058a4     F7 EE E1 F8 | 	getbyte	_var01, _var01, #0
058a8     07 EE 65 F0 | 	shl	_var01, #7
058ac     F7 EA 01 F1 | 	add	result1, _var01
058b0     00 EF C1 FA | 	rdbyte	_var01, arg01
058b4     F5 EE 01 F1 | 	add	_var01, result1
058b8     01 00 06 F1 | 	add	arg01, #1
058bc                 | LR__0902
058bc                 | LR__0903
058bc                 | ' 	return sum;
058bc     F7 EA 01 F6 | 	mov	result1, _var01
058c0                 | _fatfs_cc_sum_sfn_ret
058c0     2D 00 64 FD | 	ret
058c4                 | 
058c4                 | _fatfs_cc_dir_read
058c4     0C 4A 05 F6 | 	mov	COUNT_, #12
058c8     A8 00 A0 FD | 	call	#pushregs_
058cc     00 0B 02 F6 | 	mov	local01, arg01
058d0     01 0D 02 F6 | 	mov	local02, arg02
058d4     04 0E 06 F6 | 	mov	local03, #4
058d8     05 11 02 FB | 	rdlong	local04, local01
058dc     FF 12 06 F6 | 	mov	local05, #255
058e0     FF 14 06 F6 | 	mov	local06, #255
058e4                 | ' )
058e4                 | ' {
058e4                 | ' 	FRESULT res = FR_NO_FILE;
058e4                 | ' 	FATFS *fs = dp->obj.fs;
058e4                 | ' 	BYTE attr, b;
058e4                 | ' 
058e4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
058e4                 | ' 
058e4                 | ' 
058e4                 | ' 	while (dp->sect) {
058e4                 | LR__0910
058e4     18 0A 06 F1 | 	add	local01, #24
058e8     05 EB 09 FB | 	rdlong	result1, local01 wz
058ec     18 0A 86 F1 | 	sub	local01, #24
058f0     AC 01 90 AD |  if_e	jmp	#LR__0920
058f4     18 0A 06 F1 | 	add	local01, #24
058f8     05 03 02 FB | 	rdlong	arg02, local01
058fc     18 0A 86 F1 | 	sub	local01, #24
05900     08 01 02 F6 | 	mov	arg01, local04
05904     AC ED BF FD | 	call	#_fatfs_cc_move_window
05908     F5 0E 0A F6 | 	mov	local03, result1 wz
0590c     90 01 90 5D |  if_ne	jmp	#LR__0920
05910     1C 0A 06 F1 | 	add	local01, #28
05914     05 EB 01 FB | 	rdlong	result1, local01
05918     1C 0A 86 F1 | 	sub	local01, #28
0591c     F5 16 C2 FA | 	rdbyte	local07, result1
05920     0B EB 01 F6 | 	mov	result1, local07
05924     07 EA 4D F7 | 	zerox	result1, #7 wz
05928     04 0E 06 A6 |  if_e	mov	local03, #4
0592c                 | ' 			res = FR_NO_FILE; break;
0592c     70 01 90 AD |  if_e	jmp	#LR__0920
05930     1C 0A 06 F1 | 	add	local01, #28
05934     05 19 02 FB | 	rdlong	local08, local01
05938     0B 18 06 F1 | 	add	local08, #11
0593c     0C 1B C2 FA | 	rdbyte	local09, local08
05940     3F 1A 06 F5 | 	and	local09, #63
05944     16 0A 86 F1 | 	sub	local01, #22
05948     05 1B 42 FC | 	wrbyte	local09, local01
0594c     06 0A 86 F1 | 	sub	local01, #6
05950     0B EB E1 F8 | 	getbyte	result1, local07, #0
05954     E5 EA 0D F2 | 	cmp	result1, #229 wz
05958     0B 19 02 56 |  if_ne	mov	local08, local07
0595c     0C 19 E2 58 |  if_ne	getbyte	local08, local08, #0
05960     2E 18 0E 52 |  if_ne	cmp	local08, #46 wz
05964     1C 00 90 AD |  if_e	jmp	#LR__0911
05968     00 1C 06 F6 | 	mov	local10, #0
0596c     0D 19 E2 F8 | 	getbyte	local08, local09, #0
05970     20 18 26 F5 | 	andn	local08, #32
05974     08 18 0E F2 | 	cmp	local08, #8 wz
05978     01 1C 06 A6 |  if_e	mov	local10, #1
0597c     06 1D 0A F2 | 	cmp	local10, local02 wz
05980     08 00 90 AD |  if_e	jmp	#LR__0912
05984                 | LR__0911
05984     FF 12 06 F6 | 	mov	local05, #255
05988     00 01 90 FD | 	jmp	#LR__0919
0598c                 | LR__0912
0598c     0D 1B E2 F8 | 	getbyte	local09, local09, #0
05990     0F 1A 0E F2 | 	cmp	local09, #15 wz
05994     B4 00 90 5D |  if_ne	jmp	#LR__0916
05998     0B 1F E2 F8 | 	getbyte	local11, local07, #0
0599c     40 1E CE F7 | 	test	local11, #64 wz
059a0     30 00 90 AD |  if_e	jmp	#LR__0913
059a4     1C 0A 06 F1 | 	add	local01, #28
059a8     05 1F 02 FB | 	rdlong	local11, local01
059ac     0D 1E 06 F1 | 	add	local11, #13
059b0     0F 15 C2 FA | 	rdbyte	local06, local11
059b4     0B 17 E2 F8 | 	getbyte	local07, local07, #0
059b8     BF 16 06 F5 | 	and	local07, #191
059bc     0B 13 02 F6 | 	mov	local05, local07
059c0     0C 0A 86 F1 | 	sub	local01, #12
059c4     05 1F 02 FB | 	rdlong	local11, local01
059c8     1C 0A 06 F1 | 	add	local01, #28
059cc     05 1F 62 FC | 	wrlong	local11, local01
059d0     2C 0A 86 F1 | 	sub	local01, #44
059d4                 | LR__0913
059d4     0B 19 E2 F8 | 	getbyte	local08, local07, #0
059d8     09 1D E2 F8 | 	getbyte	local10, local05, #0
059dc     0E 19 0A F2 | 	cmp	local08, local10 wz
059e0     5C 00 90 5D |  if_ne	jmp	#LR__0914
059e4     0A 1D E2 F8 | 	getbyte	local10, local06, #0
059e8     1C 0A 06 F1 | 	add	local01, #28
059ec     05 1B 02 FB | 	rdlong	local09, local01
059f0     1C 0A 86 F1 | 	sub	local01, #28
059f4     0D 1A 06 F1 | 	add	local09, #13
059f8     0D 19 C2 FA | 	rdbyte	local08, local09
059fc     0C 1B E2 F8 | 	getbyte	local09, local08, #0
05a00     0D 1D 0A F2 | 	cmp	local10, local09 wz
05a04     38 00 90 5D |  if_ne	jmp	#LR__0914
05a08     0C 10 06 F1 | 	add	local04, #12
05a0c     08 01 02 FB | 	rdlong	arg01, local04
05a10     0C 10 86 F1 | 	sub	local04, #12
05a14     1C 0A 06 F1 | 	add	local01, #28
05a18     05 21 02 FB | 	rdlong	local12, local01
05a1c     1C 0A 86 F1 | 	sub	local01, #28
05a20     10 03 02 F6 | 	mov	arg02, local12
05a24     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
05a28     00 EA 4D F2 | 	cmps	result1, #0 wz
05a2c     09 21 02 56 |  if_ne	mov	local12, local05
05a30     10 21 E2 58 |  if_ne	getbyte	local12, local12, #0
05a34     01 20 86 51 |  if_ne	sub	local12, #1
05a38     10 1F 02 56 |  if_ne	mov	local11, local12
05a3c     04 00 90 5D |  if_ne	jmp	#LR__0915
05a40                 | LR__0914
05a40     FF 1E 06 F6 | 	mov	local11, #255
05a44                 | LR__0915
05a44     0F 13 02 F6 | 	mov	local05, local11
05a48     40 00 90 FD | 	jmp	#LR__0918
05a4c                 | LR__0916
05a4c     09 1F 02 F6 | 	mov	local11, local05
05a50     07 1E 4E F7 | 	zerox	local11, #7 wz
05a54     20 00 90 5D |  if_ne	jmp	#LR__0917
05a58     0A 15 E2 F8 | 	getbyte	local06, local06, #0
05a5c     1C 0A 06 F1 | 	add	local01, #28
05a60     05 01 02 FB | 	rdlong	arg01, local01
05a64     1C 0A 86 F1 | 	sub	local01, #28
05a68     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
05a6c     F5 EA E1 F8 | 	getbyte	result1, result1, #0
05a70     F5 14 0A F2 | 	cmp	local06, result1 wz
05a74     28 00 90 AD |  if_e	jmp	#LR__0920
05a78                 | LR__0917
05a78     2C 0A 06 F1 | 	add	local01, #44
05a7c     FF FF FF FF 
05a80     05 FF 6B FC | 	wrlong	##-1, local01
05a84     2C 0A 86 F1 | 	sub	local01, #44
05a88                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
05a88                 | ' 					}
05a88                 | ' 					break;
05a88     14 00 90 FD | 	jmp	#LR__0920
05a8c                 | LR__0918
05a8c                 | LR__0919
05a8c     05 01 02 F6 | 	mov	arg01, local01
05a90     00 02 06 F6 | 	mov	arg02, #0
05a94     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
05a98     F5 0E 0A F6 | 	mov	local03, result1 wz
05a9c     44 FE 9F AD |  if_e	jmp	#LR__0910
05aa0                 | LR__0920
05aa0     00 0E 0E F2 | 	cmp	local03, #0 wz
05aa4     18 0A 06 51 |  if_ne	add	local01, #24
05aa8     05 01 68 5C |  if_ne	wrlong	#0, local01
05aac                 | ' 	return res;
05aac     07 EB 01 F6 | 	mov	result1, local03
05ab0     A7 F0 03 F6 | 	mov	ptra, fp
05ab4     B2 00 A0 FD | 	call	#popregs_
05ab8                 | _fatfs_cc_dir_read_ret
05ab8     2D 00 64 FD | 	ret
05abc                 | 
05abc                 | _fatfs_cc_dir_find
05abc     0B 4A 05 F6 | 	mov	COUNT_, #11
05ac0     A8 00 A0 FD | 	call	#pushregs_
05ac4     00 0B 02 F6 | 	mov	local01, arg01
05ac8     05 0D 02 FB | 	rdlong	local02, local01
05acc     05 01 02 F6 | 	mov	arg01, local01
05ad0     00 02 06 F6 | 	mov	arg02, #0
05ad4     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
05ad8     00 EA 0D F2 | 	cmp	result1, #0 wz
05adc     18 02 90 5D |  if_ne	jmp	#LR__0942
05ae0     FF 0E 06 F6 | 	mov	local03, #255
05ae4     FF 10 06 F6 | 	mov	local04, #255
05ae8     2C 0A 06 F1 | 	add	local01, #44
05aec     FF FF FF FF 
05af0     05 FF 6B FC | 	wrlong	##-1, local01
05af4     2C 0A 86 F1 | 	sub	local01, #44
05af8                 | ' #line 2404 "ff.c"
05af8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
05af8                 | ' 
05af8                 | ' 	do {
05af8                 | LR__0930
05af8     18 0A 06 F1 | 	add	local01, #24
05afc     05 03 02 FB | 	rdlong	arg02, local01
05b00     18 0A 86 F1 | 	sub	local01, #24
05b04     06 01 02 F6 | 	mov	arg01, local02
05b08     A8 EB BF FD | 	call	#_fatfs_cc_move_window
05b0c     F5 12 0A F6 | 	mov	local05, result1 wz
05b10     E0 01 90 5D |  if_ne	jmp	#LR__0941
05b14     1C 0A 06 F1 | 	add	local01, #28
05b18     05 05 02 FB | 	rdlong	arg03, local01
05b1c     1C 0A 86 F1 | 	sub	local01, #28
05b20     02 15 C2 FA | 	rdbyte	local06, arg03
05b24     0A 05 02 F6 | 	mov	arg03, local06
05b28     07 04 4E F7 | 	zerox	arg03, #7 wz
05b2c     04 12 06 A6 |  if_e	mov	local05, #4
05b30     C0 01 90 AD |  if_e	jmp	#LR__0941
05b34     1C 0A 06 F1 | 	add	local01, #28
05b38     05 17 02 FB | 	rdlong	local07, local01
05b3c     0B 05 02 F6 | 	mov	arg03, local07
05b40     0B 04 06 F1 | 	add	arg03, #11
05b44     02 19 C2 FA | 	rdbyte	local08, arg03
05b48     3F 18 06 F5 | 	and	local08, #63
05b4c     16 0A 86 F1 | 	sub	local01, #22
05b50     05 19 42 FC | 	wrbyte	local08, local01
05b54     06 0A 86 F1 | 	sub	local01, #6
05b58     0A 05 E2 F8 | 	getbyte	arg03, local06, #0
05b5c     E5 04 0E F2 | 	cmp	arg03, #229 wz
05b60     18 00 90 AD |  if_e	jmp	#LR__0931
05b64     0C 05 E2 F8 | 	getbyte	arg03, local08, #0
05b68     08 04 CE F7 | 	test	arg03, #8 wz
05b6c     0C 17 02 56 |  if_ne	mov	local07, local08
05b70     0B 17 E2 58 |  if_ne	getbyte	local07, local07, #0
05b74     0F 16 0E 52 |  if_ne	cmp	local07, #15 wz
05b78     18 00 90 AD |  if_e	jmp	#LR__0932
05b7c                 | LR__0931
05b7c     FF 10 06 F6 | 	mov	local04, #255
05b80     2C 0A 06 F1 | 	add	local01, #44
05b84     FF FF FF FF 
05b88     05 FF 6B FC | 	wrlong	##-1, local01
05b8c     2C 0A 86 F1 | 	sub	local01, #44
05b90     4C 01 90 FD | 	jmp	#LR__0940
05b94                 | LR__0932
05b94     0C 19 E2 F8 | 	getbyte	local08, local08, #0
05b98     0F 18 0E F2 | 	cmp	local08, #15 wz
05b9c     C8 00 90 5D |  if_ne	jmp	#LR__0936
05ba0     2B 0A 06 F1 | 	add	local01, #43
05ba4     05 19 C2 FA | 	rdbyte	local08, local01
05ba8     2B 0A 86 F1 | 	sub	local01, #43
05bac     40 18 CE F7 | 	test	local08, #64 wz
05bb0     2C 01 90 5D |  if_ne	jmp	#LR__0939
05bb4     0A 1B E2 F8 | 	getbyte	local09, local06, #0
05bb8     40 1A CE F7 | 	test	local09, #64 wz
05bbc     30 00 90 AD |  if_e	jmp	#LR__0933
05bc0     1C 0A 06 F1 | 	add	local01, #28
05bc4     05 1B 02 FB | 	rdlong	local09, local01
05bc8     0D 1A 06 F1 | 	add	local09, #13
05bcc     0D 0F C2 FA | 	rdbyte	local03, local09
05bd0     0A 15 E2 F8 | 	getbyte	local06, local06, #0
05bd4     BF 14 06 F5 | 	and	local06, #191
05bd8     0A 11 02 F6 | 	mov	local04, local06
05bdc     0C 0A 86 F1 | 	sub	local01, #12
05be0     05 1B 02 FB | 	rdlong	local09, local01
05be4     1C 0A 06 F1 | 	add	local01, #28
05be8     05 1B 62 FC | 	wrlong	local09, local01
05bec     2C 0A 86 F1 | 	sub	local01, #44
05bf0                 | LR__0933
05bf0     0A 1D E2 F8 | 	getbyte	local10, local06, #0
05bf4     08 17 E2 F8 | 	getbyte	local07, local04, #0
05bf8     0B 1D 0A F2 | 	cmp	local10, local07 wz
05bfc     5C 00 90 5D |  if_ne	jmp	#LR__0934
05c00     07 19 E2 F8 | 	getbyte	local08, local03, #0
05c04     1C 0A 06 F1 | 	add	local01, #28
05c08     05 17 02 FB | 	rdlong	local07, local01
05c0c     1C 0A 86 F1 | 	sub	local01, #28
05c10     0D 16 06 F1 | 	add	local07, #13
05c14     0B 15 C2 FA | 	rdbyte	local06, local07
05c18     0A 17 E2 F8 | 	getbyte	local07, local06, #0
05c1c     0B 19 0A F2 | 	cmp	local08, local07 wz
05c20     38 00 90 5D |  if_ne	jmp	#LR__0934
05c24     0C 0C 06 F1 | 	add	local02, #12
05c28     06 01 02 FB | 	rdlong	arg01, local02
05c2c     0C 0C 86 F1 | 	sub	local02, #12
05c30     1C 0A 06 F1 | 	add	local01, #28
05c34     05 1F 02 FB | 	rdlong	local11, local01
05c38     1C 0A 86 F1 | 	sub	local01, #28
05c3c     0F 03 02 F6 | 	mov	arg02, local11
05c40     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
05c44     00 EA 4D F2 | 	cmps	result1, #0 wz
05c48     08 1F 02 56 |  if_ne	mov	local11, local04
05c4c     0F 1F E2 58 |  if_ne	getbyte	local11, local11, #0
05c50     01 1E 86 51 |  if_ne	sub	local11, #1
05c54     0F 1B 02 56 |  if_ne	mov	local09, local11
05c58     04 00 90 5D |  if_ne	jmp	#LR__0935
05c5c                 | LR__0934
05c5c     FF 1A 06 F6 | 	mov	local09, #255
05c60                 | LR__0935
05c60     0D 11 02 F6 | 	mov	local04, local09
05c64     78 00 90 FD | 	jmp	#LR__0939
05c68                 | LR__0936
05c68     08 1B 02 F6 | 	mov	local09, local04
05c6c     07 1A 4E F7 | 	zerox	local09, #7 wz
05c70     20 00 90 5D |  if_ne	jmp	#LR__0937
05c74     07 1D E2 F8 | 	getbyte	local10, local03, #0
05c78     1C 0A 06 F1 | 	add	local01, #28
05c7c     05 01 02 FB | 	rdlong	arg01, local01
05c80     1C 0A 86 F1 | 	sub	local01, #28
05c84     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
05c88     F5 EA E1 F8 | 	getbyte	result1, result1, #0
05c8c     F5 1C 0A F2 | 	cmp	local10, result1 wz
05c90     60 00 90 AD |  if_e	jmp	#LR__0941
05c94                 | LR__0937
05c94     2B 0A 06 F1 | 	add	local01, #43
05c98     05 1B C2 FA | 	rdbyte	local09, local01
05c9c     2B 0A 86 F1 | 	sub	local01, #43
05ca0     01 1A CE F7 | 	test	local09, #1 wz
05ca4     24 00 90 5D |  if_ne	jmp	#LR__0938
05ca8     1C 0A 06 F1 | 	add	local01, #28
05cac     05 01 02 FB | 	rdlong	arg01, local01
05cb0     04 0A 06 F1 | 	add	local01, #4
05cb4     05 03 02 F6 | 	mov	arg02, local01
05cb8     20 0A 86 F1 | 	sub	local01, #32
05cbc     0B 04 06 F6 | 	mov	arg03, #11
05cc0     88 DA BF FD | 	call	#_fatfs_cc_memcmp
05cc4     00 EA 0D F2 | 	cmp	result1, #0 wz
05cc8     28 00 90 AD |  if_e	jmp	#LR__0941
05ccc                 | LR__0938
05ccc     FF 10 06 F6 | 	mov	local04, #255
05cd0     2C 0A 06 F1 | 	add	local01, #44
05cd4     FF FF FF FF 
05cd8     05 FF 6B FC | 	wrlong	##-1, local01
05cdc     2C 0A 86 F1 | 	sub	local01, #44
05ce0                 | LR__0939
05ce0                 | LR__0940
05ce0     05 01 02 F6 | 	mov	arg01, local01
05ce4     00 02 06 F6 | 	mov	arg02, #0
05ce8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
05cec     F5 12 0A F6 | 	mov	local05, result1 wz
05cf0     04 FE 9F AD |  if_e	jmp	#LR__0930
05cf4                 | LR__0941
05cf4                 | ' 
05cf4                 | ' 	return res;
05cf4     09 EB 01 F6 | 	mov	result1, local05
05cf8                 | LR__0942
05cf8     A7 F0 03 F6 | 	mov	ptra, fp
05cfc     B2 00 A0 FD | 	call	#popregs_
05d00                 | _fatfs_cc_dir_find_ret
05d00     2D 00 64 FD | 	ret
05d04                 | 
05d04                 | _fatfs_cc_dir_register
05d04     0A 4A 05 F6 | 	mov	COUNT_, #10
05d08     A8 00 A0 FD | 	call	#pushregs_
05d0c     2C F0 07 F1 | 	add	ptra, #44
05d10     04 4E 05 F1 | 	add	fp, #4
05d14     A7 00 62 FC | 	wrlong	arg01, fp
05d18     00 0B 02 FB | 	rdlong	local01, arg01
05d1c     08 4E 05 F1 | 	add	fp, #8
05d20     A7 0A 62 FC | 	wrlong	local01, fp
05d24     08 4E 85 F1 | 	sub	fp, #8
05d28     A7 0C 02 FB | 	rdlong	local02, fp
05d2c     04 4E 85 F1 | 	sub	fp, #4
05d30     2B 0C 06 F1 | 	add	local02, #43
05d34     06 0D C2 FA | 	rdbyte	local02, local02
05d38     A0 0C CE F7 | 	test	local02, #160 wz
05d3c     06 EA 05 56 |  if_ne	mov	result1, #6
05d40     F8 03 90 5D |  if_ne	jmp	#LR__0965
05d44                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
05d44     14 4E 05 F1 | 	add	fp, #20
05d48     A7 00 68 FC | 	wrlong	#0, fp
05d4c     14 4E 85 F1 | 	sub	fp, #20
05d50     97 28 48 FB | 	callpa	#(@LR__0951-@LR__0950)>>2,fcache_load_ptr_
05d54                 | LR__0950
05d54     0C 4E 05 F1 | 	add	fp, #12
05d58     A7 0C 02 FB | 	rdlong	local02, fp
05d5c     0C 0C 06 F1 | 	add	local02, #12
05d60     06 0F 02 FB | 	rdlong	local03, local02
05d64     08 4E 05 F1 | 	add	fp, #8
05d68     A7 10 02 FB | 	rdlong	local04, fp
05d6c     14 4E 85 F1 | 	sub	fp, #20
05d70     01 10 66 F0 | 	shl	local04, #1
05d74     07 11 02 F1 | 	add	local04, local03
05d78     08 0D EA FA | 	rdword	local02, local04 wz
05d7c     24 00 90 AD |  if_e	jmp	#LR__0952
05d80     14 4E 05 F1 | 	add	fp, #20
05d84     A7 12 02 FB | 	rdlong	local05, fp
05d88     09 15 02 F6 | 	mov	local06, local05
05d8c     09 17 02 F6 | 	mov	local07, local05
05d90     0B 19 02 F6 | 	mov	local08, local07
05d94     01 18 06 F1 | 	add	local08, #1
05d98     A7 18 62 FC | 	wrlong	local08, fp
05d9c     14 4E 85 F1 | 	sub	fp, #20
05da0     B0 FF 9F FD | 	jmp	#LR__0950
05da4                 | LR__0951
05da4                 | LR__0952
05da4     1C 4E 05 F1 | 	add	fp, #28
05da8     A7 00 02 F6 | 	mov	arg01, fp
05dac     18 4E 85 F1 | 	sub	fp, #24
05db0     A7 02 02 FB | 	rdlong	arg02, fp
05db4     04 4E 85 F1 | 	sub	fp, #4
05db8     20 02 06 F1 | 	add	arg02, #32
05dbc     0C 04 06 F6 | 	mov	arg03, #12
05dc0     24 AF BF FD | 	call	#__system____builtin_memmove
05dc4     27 4E 05 F1 | 	add	fp, #39
05dc8     A7 1A C2 FA | 	rdbyte	local09, fp
05dcc     27 4E 85 F1 | 	sub	fp, #39
05dd0     01 1A CE F7 | 	test	local09, #1 wz
05dd4     F4 00 90 AD |  if_e	jmp	#LR__0955
05dd8     04 4E 05 F1 | 	add	fp, #4
05ddc     A7 1C 02 FB | 	rdlong	local10, fp
05de0     2B 1C 06 F1 | 	add	local10, #43
05de4     0E 81 48 FC | 	wrbyte	#64, local10
05de8                 | ' 		dp->fn[ 11 ] =  0x40 ;
05de8                 | ' 		for (n = 1; n < 100; n++) {
05de8     0C 4E 05 F1 | 	add	fp, #12
05dec     A7 02 68 FC | 	wrlong	#1, fp
05df0     10 4E 85 F1 | 	sub	fp, #16
05df4                 | LR__0953
05df4     10 4E 05 F1 | 	add	fp, #16
05df8     A7 0C 02 FB | 	rdlong	local02, fp
05dfc     10 4E 85 F1 | 	sub	fp, #16
05e00     64 0C 16 F2 | 	cmp	local02, #100 wc
05e04     70 00 90 3D |  if_ae	jmp	#LR__0954
05e08     04 4E 05 F1 | 	add	fp, #4
05e0c     A7 00 02 FB | 	rdlong	arg01, fp
05e10     20 00 06 F1 | 	add	arg01, #32
05e14     18 4E 05 F1 | 	add	fp, #24
05e18     A7 02 02 F6 | 	mov	arg02, fp
05e1c     10 4E 85 F1 | 	sub	fp, #16
05e20     A7 1C 02 FB | 	rdlong	local10, fp
05e24     0C 1C 06 F1 | 	add	local10, #12
05e28     0E 05 02 FB | 	rdlong	arg03, local10
05e2c     04 4E 05 F1 | 	add	fp, #4
05e30     A7 06 02 FB | 	rdlong	arg04, fp
05e34     10 4E 85 F1 | 	sub	fp, #16
05e38     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
05e3c     04 4E 05 F1 | 	add	fp, #4
05e40     A7 00 02 FB | 	rdlong	arg01, fp
05e44     04 4E 85 F1 | 	sub	fp, #4
05e48     70 FC BF FD | 	call	#_fatfs_cc_dir_find
05e4c     08 4E 05 F1 | 	add	fp, #8
05e50     A7 EA 61 FC | 	wrlong	result1, fp
05e54     00 EA 4D F2 | 	cmps	result1, #0 wz
05e58     08 4E 85 F1 | 	sub	fp, #8
05e5c     18 00 90 5D |  if_ne	jmp	#LR__0954
05e60     10 4E 05 F1 | 	add	fp, #16
05e64     A7 1C 02 FB | 	rdlong	local10, fp
05e68     01 1C 06 F1 | 	add	local10, #1
05e6c     A7 1C 62 FC | 	wrlong	local10, fp
05e70     10 4E 85 F1 | 	sub	fp, #16
05e74     7C FF 9F FD | 	jmp	#LR__0953
05e78                 | LR__0954
05e78     10 4E 05 F1 | 	add	fp, #16
05e7c     A7 1C 02 FB | 	rdlong	local10, fp
05e80     10 4E 85 F1 | 	sub	fp, #16
05e84     64 1C 0E F2 | 	cmp	local10, #100 wz
05e88     07 EA 05 A6 |  if_e	mov	result1, #7
05e8c     AC 02 90 AD |  if_e	jmp	#LR__0965
05e90     08 4E 05 F1 | 	add	fp, #8
05e94     A7 1C 02 FB | 	rdlong	local10, fp
05e98     08 4E 85 F1 | 	sub	fp, #8
05e9c     04 1C 0E F2 | 	cmp	local10, #4 wz
05ea0     08 4E 05 51 |  if_ne	add	fp, #8
05ea4     A7 EA 01 5B |  if_ne	rdlong	result1, fp
05ea8     08 4E 85 51 |  if_ne	sub	fp, #8
05eac     8C 02 90 5D |  if_ne	jmp	#LR__0965
05eb0     04 4E 05 F1 | 	add	fp, #4
05eb4     A7 1C 02 FB | 	rdlong	local10, fp
05eb8     23 4E 05 F1 | 	add	fp, #35
05ebc     A7 0A C2 FA | 	rdbyte	local01, fp
05ec0     27 4E 85 F1 | 	sub	fp, #39
05ec4     2B 1C 06 F1 | 	add	local10, #43
05ec8     0E 0B 42 FC | 	wrbyte	local01, local10
05ecc                 | LR__0955
05ecc     27 4E 05 F1 | 	add	fp, #39
05ed0     A7 0C C2 FA | 	rdbyte	local02, fp
05ed4     27 4E 85 F1 | 	sub	fp, #39
05ed8     02 0C CE F7 | 	test	local02, #2 wz
05edc     20 00 90 AD |  if_e	jmp	#LR__0956
05ee0     14 4E 05 F1 | 	add	fp, #20
05ee4     A7 1C 02 FB | 	rdlong	local10, fp
05ee8     0C 1C 06 F1 | 	add	local10, #12
05eec     0D 1C 16 FD | 	qdiv	local10, #13
05ef0     14 4E 85 F1 | 	sub	fp, #20
05ef4     18 1C 62 FD | 	getqx	local10
05ef8     01 1C 06 F1 | 	add	local10, #1
05efc     04 00 90 FD | 	jmp	#LR__0957
05f00                 | LR__0956
05f00     01 1C 06 F6 | 	mov	local10, #1
05f04                 | LR__0957
05f04     18 4E 05 F1 | 	add	fp, #24
05f08     A7 1C 62 FC | 	wrlong	local10, fp
05f0c     14 4E 85 F1 | 	sub	fp, #20
05f10     A7 00 02 FB | 	rdlong	arg01, fp
05f14     0E 03 02 F6 | 	mov	arg02, local10
05f18     04 4E 85 F1 | 	sub	fp, #4
05f1c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
05f20     08 4E 05 F1 | 	add	fp, #8
05f24     A7 EA 61 FC | 	wrlong	result1, fp
05f28     08 4E 85 F1 | 	sub	fp, #8
05f2c     00 EA 0D F2 | 	cmp	result1, #0 wz
05f30     38 01 90 5D |  if_ne	jmp	#LR__0962
05f34     18 4E 05 F1 | 	add	fp, #24
05f38     A7 1C 02 FB | 	rdlong	local10, fp
05f3c     01 1C 8E F1 | 	sub	local10, #1 wz
05f40     A7 1C 62 FC | 	wrlong	local10, fp
05f44     18 4E 85 F1 | 	sub	fp, #24
05f48     20 01 90 AD |  if_e	jmp	#LR__0962
05f4c     04 4E 05 F1 | 	add	fp, #4
05f50     A7 1C 02 FB | 	rdlong	local10, fp
05f54     0E 01 02 F6 | 	mov	arg01, local10
05f58     14 4E 05 F1 | 	add	fp, #20
05f5c     A7 06 02 FB | 	rdlong	arg04, fp
05f60     18 4E 85 F1 | 	sub	fp, #24
05f64     05 06 66 F0 | 	shl	arg04, #5
05f68     10 1C 06 F1 | 	add	local10, #16
05f6c     0E 03 02 FB | 	rdlong	arg02, local10
05f70     03 03 82 F1 | 	sub	arg02, arg04
05f74     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
05f78     08 4E 05 F1 | 	add	fp, #8
05f7c     A7 EA 61 FC | 	wrlong	result1, fp
05f80     08 4E 85 F1 | 	sub	fp, #8
05f84     00 EA 0D F2 | 	cmp	result1, #0 wz
05f88     E0 00 90 5D |  if_ne	jmp	#LR__0961
05f8c     04 4E 05 F1 | 	add	fp, #4
05f90     A7 00 02 FB | 	rdlong	arg01, fp
05f94     04 4E 85 F1 | 	sub	fp, #4
05f98     20 00 06 F1 | 	add	arg01, #32
05f9c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
05fa0     F5 1C 02 F6 | 	mov	local10, result1
05fa4     28 4E 05 F1 | 	add	fp, #40
05fa8     A7 1C 42 FC | 	wrbyte	local10, fp
05fac     28 4E 85 F1 | 	sub	fp, #40
05fb0                 | ' 			sum = sum_sfn(dp->fn);
05fb0                 | ' 			do {
05fb0                 | LR__0958
05fb0     0C 4E 05 F1 | 	add	fp, #12
05fb4     A7 00 02 FB | 	rdlong	arg01, fp
05fb8     08 4E 85 F1 | 	sub	fp, #8
05fbc     A7 0A 02 FB | 	rdlong	local01, fp
05fc0     04 4E 85 F1 | 	sub	fp, #4
05fc4     18 0A 06 F1 | 	add	local01, #24
05fc8     05 03 02 FB | 	rdlong	arg02, local01
05fcc     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
05fd0     08 4E 05 F1 | 	add	fp, #8
05fd4     A7 EA 61 FC | 	wrlong	result1, fp
05fd8     00 EA 4D F2 | 	cmps	result1, #0 wz
05fdc     08 4E 85 F1 | 	sub	fp, #8
05fe0     88 00 90 5D |  if_ne	jmp	#LR__0960
05fe4     0C 4E 05 F1 | 	add	fp, #12
05fe8     A7 0C 02 FB | 	rdlong	local02, fp
05fec     0C 0C 06 F1 | 	add	local02, #12
05ff0     06 01 02 FB | 	rdlong	arg01, local02
05ff4     08 4E 85 F1 | 	sub	fp, #8
05ff8     A7 0A 02 FB | 	rdlong	local01, fp
05ffc     1C 0A 06 F1 | 	add	local01, #28
06000     05 03 02 FB | 	rdlong	arg02, local01
06004     14 4E 05 F1 | 	add	fp, #20
06008     A7 04 02 FB | 	rdlong	arg03, fp
0600c     10 4E 05 F1 | 	add	fp, #16
06010     A7 06 C2 FA | 	rdbyte	arg04, fp
06014     28 4E 85 F1 | 	sub	fp, #40
06018     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
0601c     0C 4E 05 F1 | 	add	fp, #12
06020     A7 1C 02 FB | 	rdlong	local10, fp
06024     03 1C 06 F1 | 	add	local10, #3
06028     0E 03 48 FC | 	wrbyte	#1, local10
0602c     08 4E 85 F1 | 	sub	fp, #8
06030     A7 00 02 FB | 	rdlong	arg01, fp
06034     04 4E 85 F1 | 	sub	fp, #4
06038     00 02 06 F6 | 	mov	arg02, #0
0603c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
06040     08 4E 05 F1 | 	add	fp, #8
06044     A7 EA 61 FC | 	wrlong	result1, fp
06048     00 EA 4D F2 | 	cmps	result1, #0 wz
0604c     08 4E 85 F1 | 	sub	fp, #8
06050     18 00 90 5D |  if_ne	jmp	#LR__0959
06054     18 4E 05 F1 | 	add	fp, #24
06058     A7 1C 02 FB | 	rdlong	local10, fp
0605c     01 1C 8E F1 | 	sub	local10, #1 wz
06060     A7 1C 62 FC | 	wrlong	local10, fp
06064     18 4E 85 F1 | 	sub	fp, #24
06068     44 FF 9F 5D |  if_ne	jmp	#LR__0958
0606c                 | LR__0959
0606c                 | LR__0960
0606c                 | LR__0961
0606c                 | LR__0962
0606c     08 4E 05 F1 | 	add	fp, #8
06070     A7 1C 0A FB | 	rdlong	local10, fp wz
06074     08 4E 85 F1 | 	sub	fp, #8
06078     B4 00 90 5D |  if_ne	jmp	#LR__0964
0607c     0C 4E 05 F1 | 	add	fp, #12
06080     A7 00 02 FB | 	rdlong	arg01, fp
06084     08 4E 85 F1 | 	sub	fp, #8
06088     A7 0A 02 FB | 	rdlong	local01, fp
0608c     04 4E 85 F1 | 	sub	fp, #4
06090     18 0A 06 F1 | 	add	local01, #24
06094     05 03 02 FB | 	rdlong	arg02, local01
06098     18 E6 BF FD | 	call	#_fatfs_cc_move_window
0609c     08 4E 05 F1 | 	add	fp, #8
060a0     A7 EA 61 FC | 	wrlong	result1, fp
060a4     08 4E 85 F1 | 	sub	fp, #8
060a8     00 EA 0D F2 | 	cmp	result1, #0 wz
060ac     80 00 90 5D |  if_ne	jmp	#LR__0963
060b0     04 4E 05 F1 | 	add	fp, #4
060b4     A7 0C 02 FB | 	rdlong	local02, fp
060b8     04 4E 85 F1 | 	sub	fp, #4
060bc     1C 0C 06 F1 | 	add	local02, #28
060c0     06 01 02 FB | 	rdlong	arg01, local02
060c4     00 02 06 F6 | 	mov	arg02, #0
060c8     20 04 06 F6 | 	mov	arg03, #32
060cc     98 00 A0 FD | 	call	#\builtin_bytefill_
060d0     04 4E 05 F1 | 	add	fp, #4
060d4     A7 02 02 FB | 	rdlong	arg02, fp
060d8     01 0B 02 F6 | 	mov	local01, arg02
060dc     1C 0A 06 F1 | 	add	local01, #28
060e0     05 01 02 FB | 	rdlong	arg01, local01
060e4     04 4E 85 F1 | 	sub	fp, #4
060e8     20 02 06 F1 | 	add	arg02, #32
060ec     0B 04 06 F6 | 	mov	arg03, #11
060f0     F4 AB BF FD | 	call	#__system____builtin_memmove
060f4     04 4E 05 F1 | 	add	fp, #4
060f8     A7 1A 02 FB | 	rdlong	local09, fp
060fc     0D 1D 02 F6 | 	mov	local10, local09
06100     1C 1C 06 F1 | 	add	local10, #28
06104     0E 0B 02 FB | 	rdlong	local01, local10
06108     2B 1A 06 F1 | 	add	local09, #43
0610c     0D 1D C2 FA | 	rdbyte	local10, local09
06110     18 1C 06 F5 | 	and	local10, #24
06114     0C 0A 06 F1 | 	add	local01, #12
06118     05 1D 42 FC | 	wrbyte	local10, local01
0611c     08 4E 05 F1 | 	add	fp, #8
06120     A7 1C 02 FB | 	rdlong	local10, fp
06124     0C 4E 85 F1 | 	sub	fp, #12
06128     03 1C 06 F1 | 	add	local10, #3
0612c     0E 03 48 FC | 	wrbyte	#1, local10
06130                 | LR__0963
06130                 | LR__0964
06130                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
06130                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
06130                 | ' 
06130                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
06130                 | ' 
06130                 | ' 			fs->wflag = 1;
06130                 | ' 		}
06130                 | ' 	}
06130                 | ' 
06130                 | ' 	return res;
06130     08 4E 05 F1 | 	add	fp, #8
06134     A7 EA 01 FB | 	rdlong	result1, fp
06138     08 4E 85 F1 | 	sub	fp, #8
0613c                 | LR__0965
0613c     A7 F0 03 F6 | 	mov	ptra, fp
06140     B2 00 A0 FD | 	call	#popregs_
06144                 | _fatfs_cc_dir_register_ret
06144     2D 00 64 FD | 	ret
06148                 | 
06148                 | _fatfs_cc_dir_remove
06148     05 4A 05 F6 | 	mov	COUNT_, #5
0614c     A8 00 A0 FD | 	call	#pushregs_
06150     00 0B 02 F6 | 	mov	local01, arg01
06154     05 0D 02 FB | 	rdlong	local02, local01
06158     10 0A 06 F1 | 	add	local01, #16
0615c     05 0F 02 FB | 	rdlong	local03, local01
06160     1C 0A 06 F1 | 	add	local01, #28
06164     05 03 02 FB | 	rdlong	arg02, local01
06168     2C 0A 86 F1 | 	sub	local01, #44
0616c     FF FF 7F FF 
06170     FF 03 0E F2 | 	cmp	arg02, ##-1 wz
06174     00 10 06 A6 |  if_e	mov	local04, #0
06178     18 00 90 AD |  if_e	jmp	#LR__0970
0617c     05 01 02 F6 | 	mov	arg01, local01
06180     2C 0A 06 F1 | 	add	local01, #44
06184     05 03 02 FB | 	rdlong	arg02, local01
06188     2C 0A 86 F1 | 	sub	local01, #44
0618c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
06190     F5 10 02 F6 | 	mov	local04, result1
06194                 | LR__0970
06194     08 13 0A F6 | 	mov	local05, local04 wz
06198     64 00 90 5D |  if_ne	jmp	#LR__0973
0619c                 | ' 		do {
0619c                 | LR__0971
0619c     18 0A 06 F1 | 	add	local01, #24
061a0     05 03 02 FB | 	rdlong	arg02, local01
061a4     18 0A 86 F1 | 	sub	local01, #24
061a8     06 01 02 F6 | 	mov	arg01, local02
061ac     04 E5 BF FD | 	call	#_fatfs_cc_move_window
061b0     F5 12 0A F6 | 	mov	local05, result1 wz
061b4     40 00 90 5D |  if_ne	jmp	#LR__0972
061b8     1C 0A 06 F1 | 	add	local01, #28
061bc     05 11 02 FB | 	rdlong	local04, local01
061c0     08 CB 49 FC | 	wrbyte	#229, local04
061c4     03 0C 06 F1 | 	add	local02, #3
061c8     06 03 48 FC | 	wrbyte	#1, local02
061cc     03 0C 86 F1 | 	sub	local02, #3
061d0     0C 0A 86 F1 | 	sub	local01, #12
061d4     05 11 02 FB | 	rdlong	local04, local01
061d8     10 0A 86 F1 | 	sub	local01, #16
061dc     07 11 12 F2 | 	cmp	local04, local03 wc
061e0     14 00 90 3D |  if_ae	jmp	#LR__0972
061e4     05 01 02 F6 | 	mov	arg01, local01
061e8     00 02 06 F6 | 	mov	arg02, #0
061ec     90 EF BF FD | 	call	#_fatfs_cc_dir_next
061f0     F5 12 0A F6 | 	mov	local05, result1 wz
061f4     A4 FF 9F AD |  if_e	jmp	#LR__0971
061f8                 | LR__0972
061f8     04 12 0E F2 | 	cmp	local05, #4 wz
061fc     02 12 06 A6 |  if_e	mov	local05, #2
06200                 | LR__0973
06200                 | ' 	}
06200                 | ' #line 2590 "ff.c"
06200                 | ' 	return res;
06200     09 EB 01 F6 | 	mov	result1, local05
06204     A7 F0 03 F6 | 	mov	ptra, fp
06208     B2 00 A0 FD | 	call	#popregs_
0620c                 | _fatfs_cc_dir_remove_ret
0620c     2D 00 64 FD | 	ret
06210                 | 
06210                 | _fatfs_cc_get_fileinfo
06210     0F 4A 05 F6 | 	mov	COUNT_, #15
06214     A8 00 A0 FD | 	call	#pushregs_
06218     00 0B 02 F6 | 	mov	local01, arg01
0621c     01 0D 02 F6 | 	mov	local02, arg02
06220     05 0F 02 FB | 	rdlong	local03, local01
06224     1C 0C 06 F1 | 	add	local02, #28
06228     06 01 48 FC | 	wrbyte	#0, local02
0622c     1C 0C 86 F1 | 	sub	local02, #28
06230     18 0A 06 F1 | 	add	local01, #24
06234     05 11 0A FB | 	rdlong	local04, local01 wz
06238     18 0A 86 F1 | 	sub	local01, #24
0623c     90 03 90 AD |  if_e	jmp	#LR__0994
06240     2C 0A 06 F1 | 	add	local01, #44
06244     05 11 02 FB | 	rdlong	local04, local01
06248     2C 0A 86 F1 | 	sub	local01, #44
0624c     FF FF 7F FF 
06250     FF 11 0E F2 | 	cmp	local04, ##-1 wz
06254     D8 00 90 AD |  if_e	jmp	#LR__0983
06258     00 12 06 F6 | 	mov	local05, #0
0625c     00 14 06 F6 | 	mov	local06, #0
06260     00 16 06 F6 | 	mov	local07, #0
06264                 | ' 			si = di = 0;
06264                 | ' 			hs = 0;
06264                 | ' 			while (fs->lfnbuf[si] != 0) {
06264                 | LR__0980
06264     0C 0E 06 F1 | 	add	local03, #12
06268     07 11 02 FB | 	rdlong	local04, local03
0626c     0C 0E 86 F1 | 	sub	local03, #12
06270     0A 19 02 F6 | 	mov	local08, local06
06274     01 18 66 F0 | 	shl	local08, #1
06278     08 19 02 F1 | 	add	local08, local04
0627c     0C 11 EA FA | 	rdword	local04, local08 wz
06280     90 00 90 AD |  if_e	jmp	#LR__0982
06284     0C 0E 06 F1 | 	add	local03, #12
06288     07 1B 02 FB | 	rdlong	local09, local03
0628c     0C 0E 86 F1 | 	sub	local03, #12
06290     0A 1D 02 F6 | 	mov	local10, local06
06294     01 1C 66 F0 | 	shl	local10, #1
06298     0D 1D 02 F1 | 	add	local10, local09
0629c     0E 1F E2 FA | 	rdword	local11, local10
062a0     0B 11 02 F6 | 	mov	local04, local07
062a4     0F 10 4E F7 | 	zerox	local04, #15 wz
062a8     01 14 06 F1 | 	add	local06, #1
062ac     24 00 90 5D |  if_ne	jmp	#LR__0981
062b0     0F 21 32 F9 | 	getword	local12, local11, #0
062b4     6C 00 00 FF 
062b8     00 20 16 F2 | 	cmp	local12, ##55296 wc
062bc     14 00 90 CD |  if_b	jmp	#LR__0981
062c0     0F 23 32 F9 | 	getword	local13, local11, #0
062c4     70 00 00 FF 
062c8     00 22 16 F2 | 	cmp	local13, ##57344 wc
062cc     0F 17 02 C6 |  if_b	mov	local07, local11
062d0                 | ' 					hs = wc; continue;
062d0     90 FF 9F CD |  if_b	jmp	#LR__0980
062d4                 | LR__0981
062d4     0B 01 32 F9 | 	getword	arg01, local07, #0
062d8     10 00 66 F0 | 	shl	arg01, #16
062dc     0F 1F 32 F9 | 	getword	local11, local11, #0
062e0     0F 01 42 F5 | 	or	arg01, local11
062e4     09 03 02 F6 | 	mov	arg02, local05
062e8     1C 0C 06 F1 | 	add	local02, #28
062ec     06 03 02 F1 | 	add	arg02, local02
062f0     FF 04 06 F6 | 	mov	arg03, #255
062f4     09 05 82 F1 | 	sub	arg03, local05
062f8     1C 0C 86 F1 | 	sub	local02, #28
062fc     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
06300     F5 24 0A F6 | 	mov	local14, result1 wz
06304     00 12 06 A6 |  if_e	mov	local05, #0
06308     12 13 02 51 |  if_ne	add	local05, local14
0630c     00 16 06 56 |  if_ne	mov	local07, #0
06310     50 FF 9F 5D |  if_ne	jmp	#LR__0980
06314                 | LR__0982
06314     0B 11 02 F6 | 	mov	local04, local07
06318     0F 10 4E F7 | 	zerox	local04, #15 wz
0631c     00 12 06 56 |  if_ne	mov	local05, #0
06320     1C 0C 06 F1 | 	add	local02, #28
06324     06 13 02 F1 | 	add	local05, local02
06328     09 01 48 FC | 	wrbyte	#0, local05
0632c     1C 0C 86 F1 | 	sub	local02, #28
06330                 | LR__0983
06330     00 12 06 F6 | 	mov	local05, #0
06334     00 14 06 F6 | 	mov	local06, #0
06338                 | ' 			fno->fname[di] = 0;
06338                 | ' 		}
06338                 | ' 	}
06338                 | ' 
06338                 | ' 	si = di = 0;
06338                 | ' 	while (si < 11) {
06338                 | LR__0984
06338     0B 14 16 F2 | 	cmp	local06, #11 wc
0633c     20 01 90 3D |  if_ae	jmp	#LR__0987
06340     1C 0A 06 F1 | 	add	local01, #28
06344     05 1B 02 FB | 	rdlong	local09, local01
06348     1C 0A 86 F1 | 	sub	local01, #28
0634c     0A 1D 02 F6 | 	mov	local10, local06
06350     0D 1D 02 F1 | 	add	local10, local09
06354     0E 1F C2 FA | 	rdbyte	local11, local10
06358     0F 11 32 F9 | 	getword	local04, local11, #0
0635c     20 10 0E F2 | 	cmp	local04, #32 wz
06360     01 14 06 F1 | 	add	local06, #1
06364     D0 FF 9F AD |  if_e	jmp	#LR__0984
06368     0F 11 32 F9 | 	getword	local04, local11, #0
0636c     05 10 0E F2 | 	cmp	local04, #5 wz
06370     E5 1E 06 A6 |  if_e	mov	local11, #229
06374     09 14 0E F2 | 	cmp	local06, #9 wz
06378     20 00 90 5D |  if_ne	jmp	#LR__0985
0637c     0C 12 16 F2 | 	cmp	local05, #12 wc
06380     18 00 90 3D |  if_ae	jmp	#LR__0985
06384     09 23 02 F6 | 	mov	local13, local05
06388     0C 0C 06 F1 | 	add	local02, #12
0638c     06 23 02 F1 | 	add	local13, local02
06390     11 5D 48 FC | 	wrbyte	#46, local13
06394     01 12 06 F1 | 	add	local05, #1
06398     0C 0C 86 F1 | 	sub	local02, #12
0639c                 | LR__0985
0639c     0F 01 32 F9 | 	getword	arg01, local11, #0
063a0     07 00 4E F7 | 	zerox	arg01, #7 wz
063a4     00 EA 05 56 |  if_ne	mov	result1, #0
063a8                 | ' 
063a8                 | ' 	return 0;
063a8     00 EA 05 A6 |  if_e	mov	result1, #0
063ac     00 EA 0D F2 | 	cmp	result1, #0 wz
063b0     08 14 0E 52 |  if_ne	cmp	local06, #8 wz
063b4     0B 14 0E 52 |  if_ne	cmp	local06, #11 wz
063b8     50 00 90 AD |  if_e	jmp	#LR__0986
063bc     1C 0A 06 F1 | 	add	local01, #28
063c0     05 1D 02 FB | 	rdlong	local10, local01
063c4     1C 0A 86 F1 | 	sub	local01, #28
063c8     0A 19 02 F6 | 	mov	local08, local06
063cc     0E 19 02 F1 | 	add	local08, local10
063d0     0C 01 CA FA | 	rdbyte	arg01, local08 wz
063d4     00 EA 05 56 |  if_ne	mov	result1, #0
063d8                 | ' 
063d8                 | ' 	return 0;
063d8     00 EA 05 A6 |  if_e	mov	result1, #0
063dc     00 EA 0D F2 | 	cmp	result1, #0 wz
063e0     28 00 90 AD |  if_e	jmp	#LR__0986
063e4     0F 1F 32 F9 | 	getword	local11, local11, #0
063e8     08 1E 66 F0 | 	shl	local11, #8
063ec     1C 0A 06 F1 | 	add	local01, #28
063f0     05 25 02 FB | 	rdlong	local14, local01
063f4     1C 0A 86 F1 | 	sub	local01, #28
063f8     0A 1B 02 F6 | 	mov	local09, local06
063fc     12 1B 02 F1 | 	add	local09, local14
06400     0D 21 C2 FA | 	rdbyte	local12, local09
06404     10 1F 42 F5 | 	or	local11, local12
06408     01 14 06 F1 | 	add	local06, #1
0640c                 | LR__0986
0640c     0F 01 02 F6 | 	mov	arg01, local11
06410     01 00 00 FF 
06414     52 03 06 F6 | 	mov	arg02, ##850
06418     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
0641c     F5 1E 02 F6 | 	mov	local11, result1
06420     0F 11 02 F6 | 	mov	local04, local11
06424     0F 10 4E F7 | 	zerox	local04, #15 wz
06428     00 12 06 A6 |  if_e	mov	local05, #0
0642c     30 00 90 AD |  if_e	jmp	#LR__0987
06430     0F 01 32 F9 | 	getword	arg01, local11, #0
06434     09 03 02 F6 | 	mov	arg02, local05
06438     0C 0C 06 F1 | 	add	local02, #12
0643c     06 03 02 F1 | 	add	arg02, local02
06440     0C 04 06 F6 | 	mov	arg03, #12
06444     09 05 82 F1 | 	sub	arg03, local05
06448     0C 0C 86 F1 | 	sub	local02, #12
0644c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
06450     F5 24 0A F6 | 	mov	local14, result1 wz
06454     00 12 06 A6 |  if_e	mov	local05, #0
06458     12 13 02 51 |  if_ne	add	local05, local14
0645c     D8 FE 9F 5D |  if_ne	jmp	#LR__0984
06460                 | LR__0987
06460     09 11 02 F6 | 	mov	local04, local05
06464     0C 0C 06 F1 | 	add	local02, #12
06468     06 11 02 F1 | 	add	local04, local02
0646c     08 01 48 FC | 	wrbyte	#0, local04
06470     10 0C 06 F1 | 	add	local02, #16
06474     06 11 CA FA | 	rdbyte	local04, local02 wz
06478     1C 0C 86 F1 | 	sub	local02, #28
0647c     F8 00 90 5D |  if_ne	jmp	#LR__0993
06480     00 12 0E F2 | 	cmp	local05, #0 wz
06484     1C 00 90 5D |  if_ne	jmp	#LR__0988
06488     09 23 02 F6 | 	mov	local13, local05
0648c     1C 0C 06 F1 | 	add	local02, #28
06490     06 23 02 F1 | 	add	local13, local02
06494     11 7F 48 FC | 	wrbyte	#63, local13
06498     01 12 06 F1 | 	add	local05, #1
0649c     1C 0C 86 F1 | 	sub	local02, #28
064a0     A4 00 90 FD | 	jmp	#LR__0992
064a4                 | LR__0988
064a4                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
064a4     00 12 06 F6 | 	mov	local05, #0
064a8     00 14 06 F6 | 	mov	local06, #0
064ac     08 26 06 F6 | 	mov	local15, #8
064b0                 | LR__0989
064b0     0A 11 02 F6 | 	mov	local04, local06
064b4     0C 0C 06 F1 | 	add	local02, #12
064b8     06 11 02 F1 | 	add	local04, local02
064bc     08 23 CA FA | 	rdbyte	local13, local04 wz
064c0     0C 0C 86 F1 | 	sub	local02, #12
064c4     80 00 90 AD |  if_e	jmp	#LR__0991
064c8     0A 19 02 F6 | 	mov	local08, local06
064cc     0C 0C 06 F1 | 	add	local02, #12
064d0     06 19 02 F1 | 	add	local08, local02
064d4     0C 1F C2 FA | 	rdbyte	local11, local08
064d8     0F 25 32 F9 | 	getword	local14, local11, #0
064dc     2E 24 0E F2 | 	cmp	local14, #46 wz
064e0     0C 0C 86 F1 | 	sub	local02, #12
064e4     10 26 06 A6 |  if_e	mov	local15, #16
064e8     0F 25 32 F9 | 	getword	local14, local11, #0
064ec     41 24 16 F2 | 	cmp	local14, #65 wc
064f0     30 00 90 CD |  if_b	jmp	#LR__0990
064f4     0F 19 32 F9 | 	getword	local08, local11, #0
064f8     5B 18 16 F2 | 	cmp	local08, #91 wc
064fc     24 00 90 3D |  if_ae	jmp	#LR__0990
06500     1C 0A 06 F1 | 	add	local01, #28
06504     05 1B 02 FB | 	rdlong	local09, local01
06508     1C 0A 86 F1 | 	sub	local01, #28
0650c     0C 1A 06 F1 | 	add	local09, #12
06510     0D 1D C2 FA | 	rdbyte	local10, local09
06514     13 25 E2 F8 | 	getbyte	local14, local15, #0
06518     12 1D CA F7 | 	test	local10, local14 wz
0651c     0F 1F 32 59 |  if_ne	getword	local11, local11, #0
06520     20 1E 06 51 |  if_ne	add	local11, #32
06524                 | LR__0990
06524     09 25 02 F6 | 	mov	local14, local05
06528     1C 0C 06 F1 | 	add	local02, #28
0652c     06 25 02 F1 | 	add	local14, local02
06530     0F 1F 32 F9 | 	getword	local11, local11, #0
06534     12 1F 42 FC | 	wrbyte	local11, local14
06538     01 14 06 F1 | 	add	local06, #1
0653c     01 12 06 F1 | 	add	local05, #1
06540     1C 0C 86 F1 | 	sub	local02, #28
06544     68 FF 9F FD | 	jmp	#LR__0989
06548                 | LR__0991
06548                 | LR__0992
06548     1C 0C 06 F1 | 	add	local02, #28
0654c     06 13 02 F1 | 	add	local05, local02
06550     09 01 48 FC | 	wrbyte	#0, local05
06554     1C 0A 06 F1 | 	add	local01, #28
06558     05 11 02 FB | 	rdlong	local04, local01
0655c     1C 0A 86 F1 | 	sub	local01, #28
06560     0C 10 06 F1 | 	add	local04, #12
06564     08 23 CA FA | 	rdbyte	local13, local04 wz
06568     1C 0C 86 F1 | 	sub	local02, #28
0656c     0C 0C 06 A1 |  if_e	add	local02, #12
06570     06 01 48 AC |  if_e	wrbyte	#0, local02
06574     0C 0C 86 A1 |  if_e	sub	local02, #12
06578                 | LR__0993
06578     1C 0A 06 F1 | 	add	local01, #28
0657c     05 21 02 FB | 	rdlong	local12, local01
06580     0B 20 06 F1 | 	add	local12, #11
06584     10 11 C2 FA | 	rdbyte	local04, local12
06588     3F 10 06 F5 | 	and	local04, #63
0658c     08 0C 06 F1 | 	add	local02, #8
06590     06 11 42 FC | 	wrbyte	local04, local02
06594     08 0C 86 F1 | 	sub	local02, #8
06598     05 01 02 FB | 	rdlong	arg01, local01
0659c     1C 00 06 F1 | 	add	arg01, #28
065a0                 | ' {
065a0                 | ' 
065a0                 | ' 	return *((DWORD*)ptr);
065a0     00 EB 01 FB | 	rdlong	result1, arg01
065a4     06 EB 61 FC | 	wrlong	result1, local02
065a8     05 01 02 FB | 	rdlong	arg01, local01
065ac     16 00 06 F1 | 	add	arg01, #22
065b0                 | ' {
065b0                 | ' 
065b0                 | ' 	return *((WORD*)ptr);
065b0     00 EB E1 FA | 	rdword	result1, arg01
065b4     06 0C 06 F1 | 	add	local02, #6
065b8     06 EB 51 FC | 	wrword	result1, local02
065bc     05 01 02 FB | 	rdlong	arg01, local01
065c0     18 00 06 F1 | 	add	arg01, #24
065c4                 | ' {
065c4                 | ' 
065c4                 | ' 	return *((WORD*)ptr);
065c4     00 EB E1 FA | 	rdword	result1, arg01
065c8     02 0C 86 F1 | 	sub	local02, #2
065cc     06 EB 51 FC | 	wrword	result1, local02
065d0                 | LR__0994
065d0     A7 F0 03 F6 | 	mov	ptra, fp
065d4     B2 00 A0 FD | 	call	#popregs_
065d8                 | _fatfs_cc_get_fileinfo_ret
065d8     2D 00 64 FD | 	ret
065dc                 | 
065dc                 | _fatfs_cc_create_name
065dc     0D 4A 05 F6 | 	mov	COUNT_, #13
065e0     A8 00 A0 FD | 	call	#pushregs_
065e4     34 F0 07 F1 | 	add	ptra, #52
065e8     04 4E 05 F1 | 	add	fp, #4
065ec     A7 00 62 FC | 	wrlong	arg01, fp
065f0     04 4E 05 F1 | 	add	fp, #4
065f4     A7 02 62 FC | 	wrlong	arg02, fp
065f8     01 EB 01 FB | 	rdlong	result1, arg02
065fc     28 4E 05 F1 | 	add	fp, #40
06600     A7 EA 61 FC | 	wrlong	result1, fp
06604     2C 4E 85 F1 | 	sub	fp, #44
06608     A7 EA 01 FB | 	rdlong	result1, fp
0660c     F5 0A 02 FB | 	rdlong	local01, result1
06610     0C 0A 06 F1 | 	add	local01, #12
06614     05 0D 02 FB | 	rdlong	local02, local01
06618     14 4E 05 F1 | 	add	fp, #20
0661c     A7 0C 62 FC | 	wrlong	local02, fp
06620     14 4E 05 F1 | 	add	fp, #20
06624     A7 00 68 FC | 	wrlong	#0, fp
06628     2C 4E 85 F1 | 	sub	fp, #44
0662c                 | ' 
0662c                 | ' 
0662c                 | ' 
0662c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
0662c                 | ' 	for (;;) {
0662c                 | LR__1000
0662c     30 4E 05 F1 | 	add	fp, #48
06630     A7 00 02 F6 | 	mov	arg01, fp
06634     30 4E 85 F1 | 	sub	fp, #48
06638     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
0663c     1C 4E 05 F1 | 	add	fp, #28
06640     A7 EA 61 FC | 	wrlong	result1, fp
06644     1C 4E 85 F1 | 	sub	fp, #28
06648     FF FF 7F FF 
0664c     FF EB 0D F2 | 	cmp	result1, ##-1 wz
06650     06 EA 05 A6 |  if_e	mov	result1, #6
06654     74 08 90 AD |  if_e	jmp	#LR__1040
06658     1C 4E 05 F1 | 	add	fp, #28
0665c     A7 0A 02 FB | 	rdlong	local01, fp
06660     1C 4E 85 F1 | 	sub	fp, #28
06664     80 00 00 FF 
06668     00 0A 16 F2 | 	cmp	local01, ##65536 wc
0666c     3C 00 90 CD |  if_b	jmp	#LR__1001
06670     18 4E 05 F1 | 	add	fp, #24
06674     A7 0E 02 FB | 	rdlong	local03, fp
06678     14 4E 05 F1 | 	add	fp, #20
0667c     A7 0A 02 FB | 	rdlong	local01, fp
06680     05 11 02 F6 | 	mov	local04, local01
06684     01 10 06 F1 | 	add	local04, #1
06688     A7 10 62 FC | 	wrlong	local04, fp
0668c     01 0A 66 F0 | 	shl	local01, #1
06690     07 0B 02 F1 | 	add	local01, local03
06694     10 4E 85 F1 | 	sub	fp, #16
06698     A7 12 02 FB | 	rdlong	local05, fp
0669c     1C 4E 85 F1 | 	sub	fp, #28
066a0     09 15 02 F6 | 	mov	local06, local05
066a4     10 14 46 F0 | 	shr	local06, #16
066a8     05 15 52 FC | 	wrword	local06, local01
066ac                 | LR__1001
066ac     1C 4E 05 F1 | 	add	fp, #28
066b0     A7 0A 02 FB | 	rdlong	local01, fp
066b4     08 4E 85 F1 | 	sub	fp, #8
066b8     A7 0A 52 FC | 	wrword	local01, fp
066bc     A7 0A E2 FA | 	rdword	local01, fp
066c0     14 4E 85 F1 | 	sub	fp, #20
066c4     20 0A 16 F2 | 	cmp	local01, #32 wc
066c8     B0 00 90 CD |  if_b	jmp	#LR__1003
066cc     14 4E 05 F1 | 	add	fp, #20
066d0     A7 0A E2 FA | 	rdword	local01, fp
066d4     14 4E 85 F1 | 	sub	fp, #20
066d8     2F 0A 0E F2 | 	cmp	local01, #47 wz
066dc     14 4E 05 51 |  if_ne	add	fp, #20
066e0     A7 10 E2 5A |  if_ne	rdword	local04, fp
066e4     14 4E 85 51 |  if_ne	sub	fp, #20
066e8     5C 10 0E 52 |  if_ne	cmp	local04, #92 wz
066ec     8C 00 90 AD |  if_e	jmp	#LR__1003
066f0     14 4E 05 F1 | 	add	fp, #20
066f4     A7 00 E2 FA | 	rdword	arg01, fp
066f8     14 4E 85 F1 | 	sub	fp, #20
066fc     80 00 16 F2 | 	cmp	arg01, #128 wc
06700     24 00 90 3D |  if_ae	jmp	#LR__1002
06704     62 00 00 FF 
06708     C2 01 06 F6 | 	mov	arg01, ##@LR__1635
0670c     14 4E 05 F1 | 	add	fp, #20
06710     A7 02 E2 FA | 	rdword	arg02, fp
06714     14 4E 85 F1 | 	sub	fp, #20
06718     FC D0 BF FD | 	call	#_fatfs_cc_strchr
0671c     00 EA 0D F2 | 	cmp	result1, #0 wz
06720     06 EA 05 56 |  if_ne	mov	result1, #6
06724     A4 07 90 5D |  if_ne	jmp	#LR__1040
06728                 | LR__1002
06728     2C 4E 05 F1 | 	add	fp, #44
0672c     A7 14 02 FB | 	rdlong	local06, fp
06730     2C 4E 85 F1 | 	sub	fp, #44
06734     FF 14 16 F2 | 	cmp	local06, #255 wc
06738     06 EA 05 36 |  if_ae	mov	result1, #6
0673c     8C 07 90 3D |  if_ae	jmp	#LR__1040
06740     18 4E 05 F1 | 	add	fp, #24
06744     A7 0E 02 FB | 	rdlong	local03, fp
06748     14 4E 05 F1 | 	add	fp, #20
0674c     A7 0C 02 FB | 	rdlong	local02, fp
06750     06 11 02 F6 | 	mov	local04, local02
06754     01 10 06 F1 | 	add	local04, #1
06758     A7 10 62 FC | 	wrlong	local04, fp
0675c     06 0B 02 F6 | 	mov	local01, local02
06760     01 0A 66 F0 | 	shl	local01, #1
06764     07 0B 02 F1 | 	add	local01, local03
06768     18 4E 85 F1 | 	sub	fp, #24
0676c     A7 14 E2 FA | 	rdword	local06, fp
06770     14 4E 85 F1 | 	sub	fp, #20
06774     05 15 52 FC | 	wrword	local06, local01
06778     B0 FE 9F FD | 	jmp	#LR__1000
0677c                 | LR__1003
0677c     14 4E 05 F1 | 	add	fp, #20
06780     A7 16 E2 FA | 	rdword	local07, fp
06784     14 4E 85 F1 | 	sub	fp, #20
06788     20 16 16 F2 | 	cmp	local07, #32 wc
0678c     10 4E 05 C1 |  if_b	add	fp, #16
06790     A7 08 48 CC |  if_b	wrbyte	#4, fp
06794     10 4E 85 C1 |  if_b	sub	fp, #16
06798     74 00 90 CD |  if_b	jmp	#LR__1008
0679c     97 24 48 FB | 	callpa	#(@LR__1006-@LR__1004)>>2,fcache_load_ptr_
067a0                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
067a0                 | LR__1004
067a0     30 4E 05 F1 | 	add	fp, #48
067a4     A7 10 02 FB | 	rdlong	local04, fp
067a8     30 4E 85 F1 | 	sub	fp, #48
067ac     08 17 C2 FA | 	rdbyte	local07, local04
067b0     2F 16 0E F2 | 	cmp	local07, #47 wz
067b4     18 00 90 AD |  if_e	jmp	#LR__1005
067b8     30 4E 05 F1 | 	add	fp, #48
067bc     A7 10 02 FB | 	rdlong	local04, fp
067c0     30 4E 85 F1 | 	sub	fp, #48
067c4     08 0D C2 FA | 	rdbyte	local02, local04
067c8     5C 0C 0E F2 | 	cmp	local02, #92 wz
067cc     18 00 90 5D |  if_ne	jmp	#LR__1007
067d0                 | LR__1005
067d0     30 4E 05 F1 | 	add	fp, #48
067d4     A7 0A 02 FB | 	rdlong	local01, fp
067d8     01 0A 06 F1 | 	add	local01, #1
067dc     A7 0A 62 FC | 	wrlong	local01, fp
067e0     30 4E 85 F1 | 	sub	fp, #48
067e4     B8 FF 9F FD | 	jmp	#LR__1004
067e8                 | LR__1006
067e8                 | LR__1007
067e8     10 4E 05 F1 | 	add	fp, #16
067ec     A7 00 48 FC | 	wrbyte	#0, fp
067f0     20 4E 05 F1 | 	add	fp, #32
067f4     A7 14 02 FB | 	rdlong	local06, fp
067f8     30 4E 85 F1 | 	sub	fp, #48
067fc     0A 17 C2 FA | 	rdbyte	local07, local06
06800     20 16 16 F2 | 	cmp	local07, #32 wc
06804     10 4E 05 C1 |  if_b	add	fp, #16
06808     A7 08 48 CC |  if_b	wrbyte	#4, fp
0680c     10 4E 85 C1 |  if_b	sub	fp, #16
06810                 | LR__1008
06810     08 4E 05 F1 | 	add	fp, #8
06814     A7 16 02 FB | 	rdlong	local07, fp
06818     28 4E 05 F1 | 	add	fp, #40
0681c     A7 0A 02 FB | 	rdlong	local01, fp
06820     30 4E 85 F1 | 	sub	fp, #48
06824     0B 0B 62 FC | 	wrlong	local01, local07
06828     97 38 48 FB | 	callpa	#(@LR__1010-@LR__1009)>>2,fcache_load_ptr_
0682c                 | ' 	}
0682c                 | ' 	*path = p;
0682c                 | ' #line 2862 "ff.c"
0682c                 | ' 	while (di) {
0682c                 | LR__1009
0682c     2C 4E 05 F1 | 	add	fp, #44
06830     A7 16 0A FB | 	rdlong	local07, fp wz
06834     2C 4E 85 F1 | 	sub	fp, #44
06838     60 00 90 AD |  if_e	jmp	#LR__1011
0683c     18 4E 05 F1 | 	add	fp, #24
06840     A7 14 02 FB | 	rdlong	local06, fp
06844     14 4E 05 F1 | 	add	fp, #20
06848     A7 10 02 FB | 	rdlong	local04, fp
0684c     01 10 86 F1 | 	sub	local04, #1
06850     01 10 66 F0 | 	shl	local04, #1
06854     0A 11 02 F1 | 	add	local04, local06
06858     08 15 E2 FA | 	rdword	local06, local04
0685c     18 4E 85 F1 | 	sub	fp, #24
06860     A7 14 52 FC | 	wrword	local06, fp
06864     A7 16 E2 FA | 	rdword	local07, fp
06868     14 4E 85 F1 | 	sub	fp, #20
0686c     20 16 0E F2 | 	cmp	local07, #32 wz
06870     14 4E 05 51 |  if_ne	add	fp, #20
06874     A7 0A E2 5A |  if_ne	rdword	local01, fp
06878     14 4E 85 51 |  if_ne	sub	fp, #20
0687c     2E 0A 0E 52 |  if_ne	cmp	local01, #46 wz
06880     18 00 90 5D |  if_ne	jmp	#LR__1011
06884     2C 4E 05 F1 | 	add	fp, #44
06888     A7 0A 02 FB | 	rdlong	local01, fp
0688c     01 0A 86 F1 | 	sub	local01, #1
06890     A7 0A 62 FC | 	wrlong	local01, fp
06894     2C 4E 85 F1 | 	sub	fp, #44
06898     90 FF 9F FD | 	jmp	#LR__1009
0689c                 | LR__1010
0689c                 | LR__1011
0689c     18 4E 05 F1 | 	add	fp, #24
068a0     A7 18 02 FB | 	rdlong	local08, fp
068a4     14 4E 05 F1 | 	add	fp, #20
068a8     A7 10 02 FB | 	rdlong	local04, fp
068ac     01 10 66 F0 | 	shl	local04, #1
068b0     0C 11 02 F1 | 	add	local04, local08
068b4     08 01 58 FC | 	wrword	#0, local04
068b8     A7 16 0A FB | 	rdlong	local07, fp wz
068bc     2C 4E 85 F1 | 	sub	fp, #44
068c0     06 EA 05 A6 |  if_e	mov	result1, #6
068c4     04 06 90 AD |  if_e	jmp	#LR__1040
068c8                 | ' 
068c8                 | ' 
068c8                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
068c8     28 4E 05 F1 | 	add	fp, #40
068cc     A7 00 68 FC | 	wrlong	#0, fp
068d0     28 4E 85 F1 | 	sub	fp, #40
068d4     97 22 48 FB | 	callpa	#(@LR__1013-@LR__1012)>>2,fcache_load_ptr_
068d8                 | LR__1012
068d8     18 4E 05 F1 | 	add	fp, #24
068dc     A7 1A 02 FB | 	rdlong	local09, fp
068e0     10 4E 05 F1 | 	add	fp, #16
068e4     A7 1C 02 FB | 	rdlong	local10, fp
068e8     28 4E 85 F1 | 	sub	fp, #40
068ec     01 1C 66 F0 | 	shl	local10, #1
068f0     0D 1D 02 F1 | 	add	local10, local09
068f4     0E 1F E2 FA | 	rdword	local11, local10
068f8     20 1E 0E F2 | 	cmp	local11, #32 wz
068fc     1C 00 90 5D |  if_ne	jmp	#LR__1014
06900     28 4E 05 F1 | 	add	fp, #40
06904     A7 20 02 FB | 	rdlong	local12, fp
06908     10 13 02 F6 | 	mov	local05, local12
0690c     01 12 06 F1 | 	add	local05, #1
06910     A7 12 62 FC | 	wrlong	local05, fp
06914     28 4E 85 F1 | 	sub	fp, #40
06918     BC FF 9F FD | 	jmp	#LR__1012
0691c                 | LR__1013
0691c                 | LR__1014
0691c     28 4E 05 F1 | 	add	fp, #40
06920     A7 16 02 FB | 	rdlong	local07, fp
06924     28 4E 85 F1 | 	sub	fp, #40
06928     01 16 16 F2 | 	cmp	local07, #1 wc
0692c     28 00 90 3D |  if_ae	jmp	#LR__1015
06930     18 4E 05 F1 | 	add	fp, #24
06934     A7 0E 02 FB | 	rdlong	local03, fp
06938     10 4E 05 F1 | 	add	fp, #16
0693c     A7 1A 02 FB | 	rdlong	local09, fp
06940     28 4E 85 F1 | 	sub	fp, #40
06944     01 1A 66 F0 | 	shl	local09, #1
06948     07 1B 02 F1 | 	add	local09, local03
0694c     0D 0B E2 FA | 	rdword	local01, local09
06950     2E 0A 0E F2 | 	cmp	local01, #46 wz
06954     14 00 90 5D |  if_ne	jmp	#LR__1016
06958                 | LR__1015
06958     10 4E 05 F1 | 	add	fp, #16
0695c     A7 16 C2 FA | 	rdbyte	local07, fp
06960     03 16 46 F5 | 	or	local07, #3
06964     A7 16 42 FC | 	wrbyte	local07, fp
06968     10 4E 85 F1 | 	sub	fp, #16
0696c                 | LR__1016
0696c     97 2C 48 FB | 	callpa	#(@LR__1018-@LR__1017)>>2,fcache_load_ptr_
06970                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
06970                 | LR__1017
06970     2C 4E 05 F1 | 	add	fp, #44
06974     A7 16 02 FB | 	rdlong	local07, fp
06978     2C 4E 85 F1 | 	sub	fp, #44
0697c     01 16 16 F2 | 	cmp	local07, #1 wc
06980     44 00 90 CD |  if_b	jmp	#LR__1019
06984     18 4E 05 F1 | 	add	fp, #24
06988     A7 14 02 FB | 	rdlong	local06, fp
0698c     14 4E 05 F1 | 	add	fp, #20
06990     A7 0E 02 FB | 	rdlong	local03, fp
06994     2C 4E 85 F1 | 	sub	fp, #44
06998     01 0E 86 F1 | 	sub	local03, #1
0699c     01 0E 66 F0 | 	shl	local03, #1
069a0     0A 0F 02 F1 | 	add	local03, local06
069a4     07 0B E2 FA | 	rdword	local01, local03
069a8     2E 0A 0E F2 | 	cmp	local01, #46 wz
069ac     18 00 90 AD |  if_e	jmp	#LR__1019
069b0     2C 4E 05 F1 | 	add	fp, #44
069b4     A7 0A 02 FB | 	rdlong	local01, fp
069b8     01 0A 86 F1 | 	sub	local01, #1
069bc     A7 0A 62 FC | 	wrlong	local01, fp
069c0     2C 4E 85 F1 | 	sub	fp, #44
069c4     A8 FF 9F FD | 	jmp	#LR__1017
069c8                 | LR__1018
069c8                 | LR__1019
069c8     04 4E 05 F1 | 	add	fp, #4
069cc     A7 00 02 FB | 	rdlong	arg01, fp
069d0     04 4E 85 F1 | 	sub	fp, #4
069d4     20 00 06 F1 | 	add	arg01, #32
069d8     20 02 06 F6 | 	mov	arg02, #32
069dc     0B 04 06 F6 | 	mov	arg03, #11
069e0     00 23 02 F6 | 	mov	local13, arg01
069e4     98 00 A0 FD | 	call	#\builtin_bytefill_
069e8     11 EB 01 F6 | 	mov	result1, local13
069ec     0C 4E 05 F1 | 	add	fp, #12
069f0     A7 00 48 FC | 	wrbyte	#0, fp
069f4     A7 16 C2 FA | 	rdbyte	local07, fp
069f8     14 4E 05 F1 | 	add	fp, #20
069fc     A7 16 62 FC | 	wrlong	local07, fp
06a00     04 4E 05 F1 | 	add	fp, #4
06a04     A7 10 68 FC | 	wrlong	#8, fp
06a08     24 4E 85 F1 | 	sub	fp, #36
06a0c                 | ' 
06a0c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
06a0c                 | ' 	i = b = 0; ni = 8;
06a0c                 | ' 	for (;;) {
06a0c                 | LR__1020
06a0c     18 4E 05 F1 | 	add	fp, #24
06a10     A7 0E 02 FB | 	rdlong	local03, fp
06a14     10 4E 05 F1 | 	add	fp, #16
06a18     A7 1A 02 FB | 	rdlong	local09, fp
06a1c     0D 11 02 F6 | 	mov	local04, local09
06a20     01 10 06 F1 | 	add	local04, #1
06a24     A7 10 62 FC | 	wrlong	local04, fp
06a28     01 1A 66 F0 | 	shl	local09, #1
06a2c     07 1B 02 F1 | 	add	local09, local03
06a30     0D 15 E2 FA | 	rdword	local06, local09
06a34     14 4E 85 F1 | 	sub	fp, #20
06a38     A7 14 52 FC | 	wrword	local06, fp
06a3c     A7 16 EA FA | 	rdword	local07, fp wz
06a40     14 4E 85 F1 | 	sub	fp, #20
06a44     74 03 90 AD |  if_e	jmp	#LR__1036
06a48     14 4E 05 F1 | 	add	fp, #20
06a4c     A7 16 E2 FA | 	rdword	local07, fp
06a50     14 4E 85 F1 | 	sub	fp, #20
06a54     20 16 0E F2 | 	cmp	local07, #32 wz
06a58     30 00 90 AD |  if_e	jmp	#LR__1021
06a5c     14 4E 05 F1 | 	add	fp, #20
06a60     A7 0A E2 FA | 	rdword	local01, fp
06a64     14 4E 85 F1 | 	sub	fp, #20
06a68     2E 0A 0E F2 | 	cmp	local01, #46 wz
06a6c     34 00 90 5D |  if_ne	jmp	#LR__1022
06a70     28 4E 05 F1 | 	add	fp, #40
06a74     A7 10 02 FB | 	rdlong	local04, fp
06a78     04 4E 05 F1 | 	add	fp, #4
06a7c     A7 1C 02 FB | 	rdlong	local10, fp
06a80     2C 4E 85 F1 | 	sub	fp, #44
06a84     0E 11 0A F2 | 	cmp	local04, local10 wz
06a88     18 00 90 AD |  if_e	jmp	#LR__1022
06a8c                 | LR__1021
06a8c     10 4E 05 F1 | 	add	fp, #16
06a90     A7 16 C2 FA | 	rdbyte	local07, fp
06a94     03 16 46 F5 | 	or	local07, #3
06a98     A7 16 42 FC | 	wrbyte	local07, fp
06a9c     10 4E 85 F1 | 	sub	fp, #16
06aa0                 | ' 			cf |=  0x01  |  0x02 ;
06aa0                 | ' 			continue;
06aa0     68 FF 9F FD | 	jmp	#LR__1020
06aa4                 | LR__1022
06aa4     20 4E 05 F1 | 	add	fp, #32
06aa8     A7 16 02 FB | 	rdlong	local07, fp
06aac     04 4E 05 F1 | 	add	fp, #4
06ab0     A7 0A 02 FB | 	rdlong	local01, fp
06ab4     24 4E 85 F1 | 	sub	fp, #36
06ab8     05 17 12 F2 | 	cmp	local07, local01 wc
06abc     1C 00 90 3D |  if_ae	jmp	#LR__1023
06ac0     28 4E 05 F1 | 	add	fp, #40
06ac4     A7 18 02 FB | 	rdlong	local08, fp
06ac8     04 4E 05 F1 | 	add	fp, #4
06acc     A7 1C 02 FB | 	rdlong	local10, fp
06ad0     2C 4E 85 F1 | 	sub	fp, #44
06ad4     0E 19 0A F2 | 	cmp	local08, local10 wz
06ad8     B0 00 90 5D |  if_ne	jmp	#LR__1025
06adc                 | LR__1023
06adc     24 4E 05 F1 | 	add	fp, #36
06ae0     A7 16 02 FB | 	rdlong	local07, fp
06ae4     24 4E 85 F1 | 	sub	fp, #36
06ae8     0B 16 0E F2 | 	cmp	local07, #11 wz
06aec     18 00 90 5D |  if_ne	jmp	#LR__1024
06af0     10 4E 05 F1 | 	add	fp, #16
06af4     A7 16 C2 FA | 	rdbyte	local07, fp
06af8     03 16 46 F5 | 	or	local07, #3
06afc     A7 16 42 FC | 	wrbyte	local07, fp
06b00     10 4E 85 F1 | 	sub	fp, #16
06b04                 | ' 				cf |=  0x01  |  0x02 ;
06b04                 | ' 				break;
06b04     B4 02 90 FD | 	jmp	#LR__1036
06b08                 | LR__1024
06b08     28 4E 05 F1 | 	add	fp, #40
06b0c     A7 16 02 FB | 	rdlong	local07, fp
06b10     04 4E 05 F1 | 	add	fp, #4
06b14     A7 0A 02 FB | 	rdlong	local01, fp
06b18     2C 4E 85 F1 | 	sub	fp, #44
06b1c     05 17 0A F2 | 	cmp	local07, local01 wz
06b20     10 4E 05 51 |  if_ne	add	fp, #16
06b24     A7 16 C2 5A |  if_ne	rdbyte	local07, fp
06b28     03 16 46 55 |  if_ne	or	local07, #3
06b2c     A7 16 42 5C |  if_ne	wrbyte	local07, fp
06b30     10 4E 85 51 |  if_ne	sub	fp, #16
06b34     28 4E 05 F1 | 	add	fp, #40
06b38     A7 16 02 FB | 	rdlong	local07, fp
06b3c     04 4E 05 F1 | 	add	fp, #4
06b40     A7 0C 02 FB | 	rdlong	local02, fp
06b44     2C 4E 85 F1 | 	sub	fp, #44
06b48     06 17 1A F2 | 	cmp	local07, local02 wcz
06b4c     6C 02 90 1D |  if_a	jmp	#LR__1036
06b50     2C 4E 05 F1 | 	add	fp, #44
06b54     A7 16 02 FB | 	rdlong	local07, fp
06b58     04 4E 85 F1 | 	sub	fp, #4
06b5c     A7 16 62 FC | 	wrlong	local07, fp
06b60     08 4E 85 F1 | 	sub	fp, #8
06b64     A7 10 68 FC | 	wrlong	#8, fp
06b68     04 4E 05 F1 | 	add	fp, #4
06b6c     A7 16 68 FC | 	wrlong	#11, fp
06b70     18 4E 85 F1 | 	sub	fp, #24
06b74     A7 1E C2 FA | 	rdbyte	local11, fp
06b78     0F 17 E2 F8 | 	getbyte	local07, local11, #0
06b7c     02 16 66 F0 | 	shl	local07, #2
06b80     A7 16 42 FC | 	wrbyte	local07, fp
06b84     0C 4E 85 F1 | 	sub	fp, #12
06b88                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
06b88                 | ' 			continue;
06b88     80 FE 9F FD | 	jmp	#LR__1020
06b8c                 | LR__1025
06b8c     14 4E 05 F1 | 	add	fp, #20
06b90     A7 16 E2 FA | 	rdword	local07, fp
06b94     14 4E 85 F1 | 	sub	fp, #20
06b98     80 16 16 F2 | 	cmp	local07, #128 wc
06b9c     6C 00 90 CD |  if_b	jmp	#LR__1027
06ba0     10 4E 05 F1 | 	add	fp, #16
06ba4     A7 16 C2 FA | 	rdbyte	local07, fp
06ba8     02 16 46 F5 | 	or	local07, #2
06bac     A7 16 42 FC | 	wrbyte	local07, fp
06bb0     04 4E 05 F1 | 	add	fp, #4
06bb4     A7 00 E2 FA | 	rdword	arg01, fp
06bb8     14 4E 85 F1 | 	sub	fp, #20
06bbc     01 00 00 FF 
06bc0     52 03 06 F6 | 	mov	arg02, ##850
06bc4     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
06bc8     14 4E 05 F1 | 	add	fp, #20
06bcc     A7 EA 51 FC | 	wrword	result1, fp
06bd0     A7 16 E2 FA | 	rdword	local07, fp
06bd4     14 4E 85 F1 | 	sub	fp, #20
06bd8     80 16 CE F7 | 	test	local07, #128 wz
06bdc     2C 00 90 AD |  if_e	jmp	#LR__1026
06be0     14 4E 05 F1 | 	add	fp, #20
06be4     A7 0C E2 FA | 	rdword	local02, fp
06be8     7F 0C 06 F5 | 	and	local02, #127
06bec     01 00 00 FF 
06bf0     BB E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
06bf4     F3 0C 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
06bf8     06 17 C2 FA | 	rdbyte	local07, local02
06bfc     A7 16 52 FC | 	wrword	local07, fp
06c00     14 4E 85 F1 | 	sub	fp, #20
06c04     01 00 00 FF 
06c08     BB E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
06c0c                 | LR__1026
06c0c                 | LR__1027
06c0c     14 4E 05 F1 | 	add	fp, #20
06c10     A7 16 E2 FA | 	rdword	local07, fp
06c14     14 4E 85 F1 | 	sub	fp, #20
06c18     00 17 16 F2 | 	cmp	local07, #256 wc
06c1c     88 00 90 CD |  if_b	jmp	#LR__1029
06c20     24 4E 05 F1 | 	add	fp, #36
06c24     A7 16 02 FB | 	rdlong	local07, fp
06c28     01 16 86 F1 | 	sub	local07, #1
06c2c     04 4E 85 F1 | 	sub	fp, #4
06c30     A7 0C 02 FB | 	rdlong	local02, fp
06c34     20 4E 85 F1 | 	sub	fp, #32
06c38     0B 0D 12 F2 | 	cmp	local02, local07 wc
06c3c     2C 00 90 CD |  if_b	jmp	#LR__1028
06c40     10 4E 05 F1 | 	add	fp, #16
06c44     A7 1E C2 FA | 	rdbyte	local11, fp
06c48     0F 17 E2 F8 | 	getbyte	local07, local11, #0
06c4c     03 16 46 F5 | 	or	local07, #3
06c50     A7 16 42 FC | 	wrbyte	local07, fp
06c54     14 4E 05 F1 | 	add	fp, #20
06c58     A7 16 02 FB | 	rdlong	local07, fp
06c5c     04 4E 85 F1 | 	sub	fp, #4
06c60     A7 16 62 FC | 	wrlong	local07, fp
06c64     20 4E 85 F1 | 	sub	fp, #32
06c68                 | ' 				cf |=  0x01  |  0x02 ;
06c68                 | ' 				i = ni; continue;
06c68     A0 FD 9F FD | 	jmp	#LR__1020
06c6c                 | LR__1028
06c6c     04 4E 05 F1 | 	add	fp, #4
06c70     A7 1A 02 FB | 	rdlong	local09, fp
06c74     1C 4E 05 F1 | 	add	fp, #28
06c78     A7 1C 02 FB | 	rdlong	local10, fp
06c7c     0E 11 02 F6 | 	mov	local04, local10
06c80     01 10 06 F1 | 	add	local04, #1
06c84     A7 10 62 FC | 	wrlong	local04, fp
06c88     20 1A 06 F1 | 	add	local09, #32
06c8c     0D 1D 02 F1 | 	add	local10, local09
06c90     0C 4E 85 F1 | 	sub	fp, #12
06c94     A7 0E E2 FA | 	rdword	local03, fp
06c98     14 4E 85 F1 | 	sub	fp, #20
06c9c     08 0E 46 F0 | 	shr	local03, #8
06ca0     0E 0F 42 FC | 	wrbyte	local03, local10
06ca4     D4 00 90 FD | 	jmp	#LR__1035
06ca8                 | LR__1029
06ca8     14 4E 05 F1 | 	add	fp, #20
06cac     A7 16 EA FA | 	rdword	local07, fp wz
06cb0     14 4E 85 F1 | 	sub	fp, #20
06cb4     20 00 90 AD |  if_e	jmp	#LR__1030
06cb8     62 00 00 FF 
06cbc     CB 01 06 F6 | 	mov	arg01, ##@LR__1636
06cc0     14 4E 05 F1 | 	add	fp, #20
06cc4     A7 02 E2 FA | 	rdword	arg02, fp
06cc8     14 4E 85 F1 | 	sub	fp, #20
06ccc     48 CB BF FD | 	call	#_fatfs_cc_strchr
06cd0     00 EA 0D F2 | 	cmp	result1, #0 wz
06cd4     20 00 90 AD |  if_e	jmp	#LR__1031
06cd8                 | LR__1030
06cd8     14 4E 05 F1 | 	add	fp, #20
06cdc     A7 BE 58 FC | 	wrword	#95, fp
06ce0     04 4E 85 F1 | 	sub	fp, #4
06ce4     A7 16 C2 FA | 	rdbyte	local07, fp
06ce8     03 16 46 F5 | 	or	local07, #3
06cec     A7 16 42 FC | 	wrbyte	local07, fp
06cf0     10 4E 85 F1 | 	sub	fp, #16
06cf4     84 00 90 FD | 	jmp	#LR__1034
06cf8                 | LR__1031
06cf8     14 4E 05 F1 | 	add	fp, #20
06cfc     A7 16 E2 FA | 	rdword	local07, fp
06d00     14 4E 85 F1 | 	sub	fp, #20
06d04     41 16 16 F2 | 	cmp	local07, #65 wc
06d08     24 00 90 CD |  if_b	jmp	#LR__1032
06d0c     14 4E 05 F1 | 	add	fp, #20
06d10     A7 0A E2 FA | 	rdword	local01, fp
06d14     14 4E 85 F1 | 	sub	fp, #20
06d18     5B 0A 16 F2 | 	cmp	local01, #91 wc
06d1c     0C 4E 05 C1 |  if_b	add	fp, #12
06d20     A7 16 C2 CA |  if_b	rdbyte	local07, fp
06d24     02 16 46 C5 |  if_b	or	local07, #2
06d28     A7 16 42 CC |  if_b	wrbyte	local07, fp
06d2c     0C 4E 85 C1 |  if_b	sub	fp, #12
06d30                 | LR__1032
06d30     14 4E 05 F1 | 	add	fp, #20
06d34     A7 16 E2 FA | 	rdword	local07, fp
06d38     14 4E 85 F1 | 	sub	fp, #20
06d3c     61 16 16 F2 | 	cmp	local07, #97 wc
06d40     38 00 90 CD |  if_b	jmp	#LR__1033
06d44     14 4E 05 F1 | 	add	fp, #20
06d48     A7 0A E2 FA | 	rdword	local01, fp
06d4c     14 4E 85 F1 | 	sub	fp, #20
06d50     7B 0A 16 F2 | 	cmp	local01, #123 wc
06d54     24 00 90 3D |  if_ae	jmp	#LR__1033
06d58     0C 4E 05 F1 | 	add	fp, #12
06d5c     A7 16 C2 FA | 	rdbyte	local07, fp
06d60     01 16 46 F5 | 	or	local07, #1
06d64     A7 16 42 FC | 	wrbyte	local07, fp
06d68     08 4E 05 F1 | 	add	fp, #8
06d6c     A7 16 E2 FA | 	rdword	local07, fp
06d70     20 16 86 F1 | 	sub	local07, #32
06d74     A7 16 52 FC | 	wrword	local07, fp
06d78     14 4E 85 F1 | 	sub	fp, #20
06d7c                 | LR__1033
06d7c                 | LR__1034
06d7c                 | LR__1035
06d7c     04 4E 05 F1 | 	add	fp, #4
06d80     A7 1E 02 FB | 	rdlong	local11, fp
06d84     0F 1B 02 F6 | 	mov	local09, local11
06d88     1C 4E 05 F1 | 	add	fp, #28
06d8c     A7 0C 02 FB | 	rdlong	local02, fp
06d90     06 11 02 F6 | 	mov	local04, local02
06d94     01 10 06 F1 | 	add	local04, #1
06d98     A7 10 62 FC | 	wrlong	local04, fp
06d9c     06 1D 02 F6 | 	mov	local10, local02
06da0     20 1A 06 F1 | 	add	local09, #32
06da4     0D 1D 02 F1 | 	add	local10, local09
06da8     0C 4E 85 F1 | 	sub	fp, #12
06dac     A7 0E E2 FA | 	rdword	local03, fp
06db0     14 4E 85 F1 | 	sub	fp, #20
06db4     0E 0F 42 FC | 	wrbyte	local03, local10
06db8     50 FC 9F FD | 	jmp	#LR__1020
06dbc                 | LR__1036
06dbc     04 4E 05 F1 | 	add	fp, #4
06dc0     A7 1E 02 FB | 	rdlong	local11, fp
06dc4     04 4E 85 F1 | 	sub	fp, #4
06dc8     20 1E 06 F1 | 	add	local11, #32
06dcc     0F 17 C2 FA | 	rdbyte	local07, local11
06dd0     E5 16 0E F2 | 	cmp	local07, #229 wz
06dd4     04 4E 05 A1 |  if_e	add	fp, #4
06dd8     A7 16 02 AB |  if_e	rdlong	local07, fp
06ddc     04 4E 85 A1 |  if_e	sub	fp, #4
06de0     20 16 06 A1 |  if_e	add	local07, #32
06de4     0B 0B 48 AC |  if_e	wrbyte	#5, local07
06de8     24 4E 05 F1 | 	add	fp, #36
06dec     A7 16 02 FB | 	rdlong	local07, fp
06df0     24 4E 85 F1 | 	sub	fp, #36
06df4     08 16 0E F2 | 	cmp	local07, #8 wz
06df8     0C 4E 05 A1 |  if_e	add	fp, #12
06dfc     A7 16 C2 AA |  if_e	rdbyte	local07, fp
06e00     02 16 66 A0 |  if_e	shl	local07, #2
06e04     A7 16 42 AC |  if_e	wrbyte	local07, fp
06e08     0C 4E 85 A1 |  if_e	sub	fp, #12
06e0c     0C 4E 05 F1 | 	add	fp, #12
06e10     A7 16 C2 FA | 	rdbyte	local07, fp
06e14     0C 4E 85 F1 | 	sub	fp, #12
06e18     0C 16 06 F5 | 	and	local07, #12
06e1c     0C 16 0E F2 | 	cmp	local07, #12 wz
06e20     18 00 90 AD |  if_e	jmp	#LR__1037
06e24     0C 4E 05 F1 | 	add	fp, #12
06e28     A7 0A C2 FA | 	rdbyte	local01, fp
06e2c     0C 4E 85 F1 | 	sub	fp, #12
06e30     03 0A 06 F5 | 	and	local01, #3
06e34     03 0A 0E F2 | 	cmp	local01, #3 wz
06e38     14 00 90 5D |  if_ne	jmp	#LR__1038
06e3c                 | LR__1037
06e3c     10 4E 05 F1 | 	add	fp, #16
06e40     A7 16 C2 FA | 	rdbyte	local07, fp
06e44     02 16 46 F5 | 	or	local07, #2
06e48     A7 16 42 FC | 	wrbyte	local07, fp
06e4c     10 4E 85 F1 | 	sub	fp, #16
06e50                 | LR__1038
06e50     10 4E 05 F1 | 	add	fp, #16
06e54     A7 16 C2 FA | 	rdbyte	local07, fp
06e58     10 4E 85 F1 | 	sub	fp, #16
06e5c     02 16 CE F7 | 	test	local07, #2 wz
06e60     48 00 90 5D |  if_ne	jmp	#LR__1039
06e64     0C 4E 05 F1 | 	add	fp, #12
06e68     A7 16 C2 FA | 	rdbyte	local07, fp
06e6c     0C 4E 85 F1 | 	sub	fp, #12
06e70     01 16 CE F7 | 	test	local07, #1 wz
06e74     10 4E 05 51 |  if_ne	add	fp, #16
06e78     A7 16 C2 5A |  if_ne	rdbyte	local07, fp
06e7c     10 16 46 55 |  if_ne	or	local07, #16
06e80     A7 16 42 5C |  if_ne	wrbyte	local07, fp
06e84     10 4E 85 51 |  if_ne	sub	fp, #16
06e88     0C 4E 05 F1 | 	add	fp, #12
06e8c     A7 16 C2 FA | 	rdbyte	local07, fp
06e90     0C 4E 85 F1 | 	sub	fp, #12
06e94     04 16 CE F7 | 	test	local07, #4 wz
06e98     10 4E 05 51 |  if_ne	add	fp, #16
06e9c     A7 16 C2 5A |  if_ne	rdbyte	local07, fp
06ea0     08 16 46 55 |  if_ne	or	local07, #8
06ea4     A7 16 42 5C |  if_ne	wrbyte	local07, fp
06ea8     10 4E 85 51 |  if_ne	sub	fp, #16
06eac                 | LR__1039
06eac     04 4E 05 F1 | 	add	fp, #4
06eb0     A7 16 02 FB | 	rdlong	local07, fp
06eb4     0C 4E 05 F1 | 	add	fp, #12
06eb8     A7 0A C2 FA | 	rdbyte	local01, fp
06ebc     10 4E 85 F1 | 	sub	fp, #16
06ec0     2B 16 06 F1 | 	add	local07, #43
06ec4     0B 0B 42 FC | 	wrbyte	local01, local07
06ec8                 | ' 	}
06ec8                 | ' 
06ec8                 | ' 	dp->fn[ 11 ] = cf;
06ec8                 | ' 
06ec8                 | ' 	return FR_OK;
06ec8     00 EA 05 F6 | 	mov	result1, #0
06ecc                 | LR__1040
06ecc     A7 F0 03 F6 | 	mov	ptra, fp
06ed0     B2 00 A0 FD | 	call	#popregs_
06ed4                 | _fatfs_cc_create_name_ret
06ed4     2D 00 64 FD | 	ret
06ed8                 | 
06ed8                 | _fatfs_cc_follow_path
06ed8     02 4A 05 F6 | 	mov	COUNT_, #2
06edc     A8 00 A0 FD | 	call	#pushregs_
06ee0     18 F0 07 F1 | 	add	ptra, #24
06ee4     04 4E 05 F1 | 	add	fp, #4
06ee8     A7 00 62 FC | 	wrlong	arg01, fp
06eec     04 4E 05 F1 | 	add	fp, #4
06ef0     A7 02 62 FC | 	wrlong	arg02, fp
06ef4     04 4E 85 F1 | 	sub	fp, #4
06ef8     A7 EA 01 FB | 	rdlong	result1, fp
06efc     F5 0A 02 FB | 	rdlong	local01, result1
06f00     10 4E 05 F1 | 	add	fp, #16
06f04     A7 0A 62 FC | 	wrlong	local01, fp
06f08     14 4E 85 F1 | 	sub	fp, #20
06f0c     97 24 48 FB | 	callpa	#(@LR__1052-@LR__1050)>>2,fcache_load_ptr_
06f10                 | ' )
06f10                 | ' {
06f10                 | ' 	FRESULT res;
06f10                 | ' 	BYTE ns;
06f10                 | ' 	FATFS *fs = dp->obj.fs;
06f10                 | ' #line 3034 "ff.c"
06f10                 | ' 	{
06f10                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
06f10                 | LR__1050
06f10     08 4E 05 F1 | 	add	fp, #8
06f14     A7 0A 02 FB | 	rdlong	local01, fp
06f18     08 4E 85 F1 | 	sub	fp, #8
06f1c     05 0B C2 FA | 	rdbyte	local01, local01
06f20     2F 0A 0E F2 | 	cmp	local01, #47 wz
06f24     18 00 90 AD |  if_e	jmp	#LR__1051
06f28     08 4E 05 F1 | 	add	fp, #8
06f2c     A7 0A 02 FB | 	rdlong	local01, fp
06f30     08 4E 85 F1 | 	sub	fp, #8
06f34     05 0B C2 FA | 	rdbyte	local01, local01
06f38     5C 0A 0E F2 | 	cmp	local01, #92 wz
06f3c     18 00 90 5D |  if_ne	jmp	#LR__1053
06f40                 | LR__1051
06f40     08 4E 05 F1 | 	add	fp, #8
06f44     A7 0A 02 FB | 	rdlong	local01, fp
06f48     01 0A 06 F1 | 	add	local01, #1
06f4c     A7 0A 62 FC | 	wrlong	local01, fp
06f50     08 4E 85 F1 | 	sub	fp, #8
06f54     B8 FF 9F FD | 	jmp	#LR__1050
06f58                 | LR__1052
06f58                 | LR__1053
06f58     04 4E 05 F1 | 	add	fp, #4
06f5c     A7 0A 02 FB | 	rdlong	local01, fp
06f60     08 0A 06 F1 | 	add	local01, #8
06f64     05 01 68 FC | 	wrlong	#0, local01
06f68     04 4E 05 F1 | 	add	fp, #4
06f6c     A7 0A 02 FB | 	rdlong	local01, fp
06f70     08 4E 85 F1 | 	sub	fp, #8
06f74     05 0B C2 FA | 	rdbyte	local01, local01
06f78     20 0A 16 F2 | 	cmp	local01, #32 wc
06f7c     30 00 90 3D |  if_ae	jmp	#LR__1054
06f80     04 4E 05 F1 | 	add	fp, #4
06f84     A7 0A 02 FB | 	rdlong	local01, fp
06f88     2B 0A 06 F1 | 	add	local01, #43
06f8c     05 01 49 FC | 	wrbyte	#128, local01
06f90     A7 00 02 FB | 	rdlong	arg01, fp
06f94     04 4E 85 F1 | 	sub	fp, #4
06f98     00 02 06 F6 | 	mov	arg02, #0
06f9c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
06fa0     0C 4E 05 F1 | 	add	fp, #12
06fa4     A7 EA 61 FC | 	wrlong	result1, fp
06fa8     0C 4E 85 F1 | 	sub	fp, #12
06fac     1C 01 90 FD | 	jmp	#LR__1058
06fb0                 | LR__1054
06fb0                 | ' 		for (;;) {
06fb0                 | LR__1055
06fb0     04 4E 05 F1 | 	add	fp, #4
06fb4     A7 00 02 FB | 	rdlong	arg01, fp
06fb8     04 4E 05 F1 | 	add	fp, #4
06fbc     A7 02 02 F6 | 	mov	arg02, fp
06fc0     08 4E 85 F1 | 	sub	fp, #8
06fc4     14 F6 BF FD | 	call	#_fatfs_cc_create_name
06fc8     0C 4E 05 F1 | 	add	fp, #12
06fcc     A7 EA 61 FC | 	wrlong	result1, fp
06fd0     00 EA 4D F2 | 	cmps	result1, #0 wz
06fd4     0C 4E 85 F1 | 	sub	fp, #12
06fd8     F0 00 90 5D |  if_ne	jmp	#LR__1057
06fdc     04 4E 05 F1 | 	add	fp, #4
06fe0     A7 00 02 FB | 	rdlong	arg01, fp
06fe4     04 4E 85 F1 | 	sub	fp, #4
06fe8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
06fec     0C 4E 05 F1 | 	add	fp, #12
06ff0     A7 EA 61 FC | 	wrlong	result1, fp
06ff4     08 4E 85 F1 | 	sub	fp, #8
06ff8     A7 0A 02 FB | 	rdlong	local01, fp
06ffc     2B 0A 06 F1 | 	add	local01, #43
07000     05 0B C2 FA | 	rdbyte	local01, local01
07004     0C 4E 05 F1 | 	add	fp, #12
07008     A7 0A 42 FC | 	wrbyte	local01, fp
0700c     04 4E 85 F1 | 	sub	fp, #4
07010     A7 0A 0A FB | 	rdlong	local01, fp wz
07014     0C 4E 85 F1 | 	sub	fp, #12
07018     34 00 90 AD |  if_e	jmp	#LR__1056
0701c     0C 4E 05 F1 | 	add	fp, #12
07020     A7 0A 02 FB | 	rdlong	local01, fp
07024     0C 4E 85 F1 | 	sub	fp, #12
07028     04 0A 0E F2 | 	cmp	local01, #4 wz
0702c     9C 00 90 5D |  if_ne	jmp	#LR__1057
07030     10 4E 05 F1 | 	add	fp, #16
07034     A7 0A C2 FA | 	rdbyte	local01, fp
07038     10 4E 85 F1 | 	sub	fp, #16
0703c     04 0A CE F7 | 	test	local01, #4 wz
07040     0C 4E 05 A1 |  if_e	add	fp, #12
07044     A7 0A 68 AC |  if_e	wrlong	#5, fp
07048     0C 4E 85 A1 |  if_e	sub	fp, #12
0704c                 | ' 					}
0704c                 | ' 				}
0704c                 | ' 				break;
0704c     7C 00 90 FD | 	jmp	#LR__1057
07050                 | LR__1056
07050     10 4E 05 F1 | 	add	fp, #16
07054     A7 0A C2 FA | 	rdbyte	local01, fp
07058     10 4E 85 F1 | 	sub	fp, #16
0705c     04 0A CE F7 | 	test	local01, #4 wz
07060     68 00 90 5D |  if_ne	jmp	#LR__1057
07064     04 4E 05 F1 | 	add	fp, #4
07068     A7 0A 02 FB | 	rdlong	local01, fp
0706c     04 4E 85 F1 | 	sub	fp, #4
07070     06 0A 06 F1 | 	add	local01, #6
07074     05 0B C2 FA | 	rdbyte	local01, local01
07078     10 0A CE F7 | 	test	local01, #16 wz
0707c     0C 4E 05 A1 |  if_e	add	fp, #12
07080     A7 0A 68 AC |  if_e	wrlong	#5, fp
07084     0C 4E 85 A1 |  if_e	sub	fp, #12
07088                 | ' 				res = FR_NO_PATH; break;
07088     40 00 90 AD |  if_e	jmp	#LR__1057
0708c     04 4E 05 F1 | 	add	fp, #4
07090     A7 0C 02 FB | 	rdlong	local02, fp
07094     06 0B 02 F6 | 	mov	local01, local02
07098     10 4E 05 F1 | 	add	fp, #16
0709c     A7 02 02 FB | 	rdlong	arg02, fp
070a0     01 01 02 F6 | 	mov	arg01, arg02
070a4     34 02 06 F1 | 	add	arg02, #52
070a8     14 4E 85 F1 | 	sub	fp, #20
070ac     10 0C 06 F1 | 	add	local02, #16
070b0     06 0D 02 FB | 	rdlong	local02, local02
070b4     FF 0D 06 F5 | 	and	local02, #511
070b8     06 03 02 F1 | 	add	arg02, local02
070bc     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
070c0     08 0A 06 F1 | 	add	local01, #8
070c4     05 EB 61 FC | 	wrlong	result1, local01
070c8     E4 FE 9F FD | 	jmp	#LR__1055
070cc                 | LR__1057
070cc                 | LR__1058
070cc                 | ' 			}
070cc                 | ' #line 3090 "ff.c"
070cc                 | ' 			{
070cc                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
070cc                 | ' 			}
070cc                 | ' 		}
070cc                 | ' 	}
070cc                 | ' 
070cc                 | ' 	return res;
070cc     0C 4E 05 F1 | 	add	fp, #12
070d0     A7 EA 01 FB | 	rdlong	result1, fp
070d4     0C 4E 85 F1 | 	sub	fp, #12
070d8     A7 F0 03 F6 | 	mov	ptra, fp
070dc     B2 00 A0 FD | 	call	#popregs_
070e0                 | _fatfs_cc_follow_path_ret
070e0     2D 00 64 FD | 	ret
070e4                 | 
070e4                 | _fatfs_cc_get_ldnumber
070e4     01 EE 65 F6 | 	neg	_var01, #1
070e8     00 F1 09 FB | 	rdlong	_var02, arg01 wz
070ec     F8 F2 01 F6 | 	mov	_var03, _var02
070f0     01 EA 65 A6 |  if_e	neg	result1, #1
070f4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
070f8     97 10 48 FB | 	callpa	#(@LR__1061-@LR__1060)>>2,fcache_load_ptr_
070fc                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
070fc                 | LR__1060
070fc     F9 F4 C1 FA | 	rdbyte	_var04, _var03
07100     FA EA E1 F8 | 	getbyte	result1, _var04, #0
07104     20 EA 15 F2 | 	cmp	result1, #32 wc
07108     01 F2 05 F1 | 	add	_var03, #1
0710c     FA F6 01 36 |  if_ae	mov	_var05, _var04
07110     FB F6 E1 38 |  if_ae	getbyte	_var05, _var05, #0
07114     3A F6 0D 32 |  if_ae	cmp	_var05, #58 wz
07118     E0 FF 9F 1D |  if_a	jmp	#LR__1060
0711c                 | LR__1061
0711c     FA F4 E1 F8 | 	getbyte	_var04, _var04, #0
07120     3A F4 0D F2 | 	cmp	_var04, #58 wz
07124     40 00 90 5D |  if_ne	jmp	#LR__1063
07128     01 F8 05 F6 | 	mov	_var06, #1
0712c     F8 F6 C1 FA | 	rdbyte	_var05, _var02
07130     30 F6 15 F2 | 	cmp	_var05, #48 wc
07134     1C 00 90 CD |  if_b	jmp	#LR__1062
07138     F8 F6 C1 FA | 	rdbyte	_var05, _var02
0713c     3A F6 15 F2 | 	cmp	_var05, #58 wc
07140     F8 FA 01 C6 |  if_b	mov	_var07, _var02
07144     02 FA 05 C1 |  if_b	add	_var07, #2
07148     F9 FA 09 C2 |  if_b	cmp	_var07, _var03 wz
0714c     F8 F8 C1 8A |  if_c_and_z	rdbyte	_var06, _var02
07150     30 F8 85 81 |  if_c_and_z	sub	_var06, #48
07154                 | LR__1062
07154     01 F8 55 F2 | 	cmps	_var06, #1 wc
07158     FC EE 01 C6 |  if_b	mov	_var01, _var06
0715c     00 F3 61 CC |  if_b	wrlong	_var03, arg01
07160                 | ' 			vol = i;
07160                 | ' 			*path = tt;
07160                 | ' 		}
07160                 | ' 		return vol;
07160     F7 EA 01 F6 | 	mov	result1, _var01
07164     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
07168                 | LR__1063
07168                 | ' 	}
07168                 | ' #line 3170 "ff.c"
07168                 | ' 	vol = 0;
07168                 | ' 
07168                 | ' 	return vol;
07168     00 EA 05 F6 | 	mov	result1, #0
0716c                 | _fatfs_cc_get_ldnumber_ret
0716c     2D 00 64 FD | 	ret
07170                 | 
07170                 | _fatfs_cc_check_fs
07170     04 4A 05 F6 | 	mov	COUNT_, #4
07174     A8 00 A0 FD | 	call	#pushregs_
07178     00 0B 02 F6 | 	mov	local01, arg01
0717c     03 0A 06 F1 | 	add	local01, #3
07180     05 01 48 FC | 	wrbyte	#0, local01
07184     2D 0A 06 F1 | 	add	local01, #45
07188     FF FF FF FF 
0718c     05 FF 6B FC | 	wrlong	##-1, local01
07190     30 0A 86 F1 | 	sub	local01, #48
07194     05 01 02 F6 | 	mov	arg01, local01
07198     18 D5 BF FD | 	call	#_fatfs_cc_move_window
0719c     00 EA 0D F2 | 	cmp	result1, #0 wz
071a0     04 EA 05 56 |  if_ne	mov	result1, #4
071a4     94 01 90 5D |  if_ne	jmp	#LR__1074
071a8     34 0A 06 F1 | 	add	local01, #52
071ac     05 01 02 F6 | 	mov	arg01, local01
071b0     FE 01 06 F1 | 	add	arg01, #510
071b4                 | ' {
071b4                 | ' 
071b4                 | ' 	return *((WORD*)ptr);
071b4     00 0D E2 FA | 	rdword	local02, arg01
071b8     05 0F C2 FA | 	rdbyte	local03, local01
071bc     34 0A 86 F1 | 	sub	local01, #52
071c0     07 11 E2 F8 | 	getbyte	local04, local03, #0
071c4     EB 10 0E F2 | 	cmp	local04, #235 wz
071c8     07 05 02 56 |  if_ne	mov	arg03, local03
071cc     02 05 E2 58 |  if_ne	getbyte	arg03, arg03, #0
071d0     E9 04 0E 52 |  if_ne	cmp	arg03, #233 wz
071d4     07 0F E2 58 |  if_ne	getbyte	local03, local03, #0
071d8     E8 0E 0E 52 |  if_ne	cmp	local03, #232 wz
071dc     44 01 90 5D |  if_ne	jmp	#LR__1073
071e0     06 11 32 F9 | 	getword	local04, local02, #0
071e4     55 00 00 FF 
071e8     55 10 0E F2 | 	cmp	local04, ##43605 wz
071ec     2C 00 90 5D |  if_ne	jmp	#LR__1070
071f0     34 0A 06 F1 | 	add	local01, #52
071f4     05 01 02 F6 | 	mov	arg01, local01
071f8     34 0A 86 F1 | 	sub	local01, #52
071fc     52 00 06 F1 | 	add	arg01, #82
07200     62 00 00 FF 
07204     D2 03 06 F6 | 	mov	arg02, ##@LR__1637
07208     08 04 06 F6 | 	mov	arg03, #8
0720c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
07210     00 EA 0D F2 | 	cmp	result1, #0 wz
07214                 | ' 			return 0;
07214     00 EA 05 A6 |  if_e	mov	result1, #0
07218     20 01 90 AD |  if_e	jmp	#LR__1074
0721c                 | LR__1070
0721c     34 0A 06 F1 | 	add	local01, #52
07220     05 01 02 F6 | 	mov	arg01, local01
07224     0B 00 06 F1 | 	add	arg01, #11
07228                 | ' {
07228                 | ' 
07228                 | ' 	return *((WORD*)ptr);
07228     00 EB E1 FA | 	rdword	result1, arg01
0722c     0D 0A 06 F1 | 	add	local01, #13
07230     05 0F C2 FA | 	rdbyte	local03, local01
07234     41 0A 86 F1 | 	sub	local01, #65
07238     F5 10 32 F9 | 	getword	local04, result1, #0
0723c     F5 02 32 F9 | 	getword	arg02, result1, #0
07240     01 02 86 F1 | 	sub	arg02, #1
07244     01 11 CA F7 | 	test	local04, arg02 wz
07248     D8 00 90 5D |  if_ne	jmp	#LR__1072
0724c     F5 02 32 F9 | 	getword	arg02, result1, #0
07250     01 00 00 FF 
07254     00 02 16 F2 | 	cmp	arg02, ##512 wc
07258     C8 00 90 CD |  if_b	jmp	#LR__1072
0725c     F5 02 32 F9 | 	getword	arg02, result1, #0
07260     01 00 00 FF 
07264     01 02 16 F2 | 	cmp	arg02, ##513 wc
07268     B8 00 90 3D |  if_ae	jmp	#LR__1072
0726c     07 01 02 F6 | 	mov	arg01, local03
07270     07 00 4E F7 | 	zerox	arg01, #7 wz
07274     AC 00 90 AD |  if_e	jmp	#LR__1072
07278     07 01 E2 F8 | 	getbyte	arg01, local03, #0
0727c     07 0F E2 F8 | 	getbyte	local03, local03, #0
07280     01 0E 86 F1 | 	sub	local03, #1
07284     07 01 CA F7 | 	test	arg01, local03 wz
07288     98 00 90 5D |  if_ne	jmp	#LR__1072
0728c     34 0A 06 F1 | 	add	local01, #52
07290     05 01 02 F6 | 	mov	arg01, local01
07294     34 0A 86 F1 | 	sub	local01, #52
07298     0E 00 06 F1 | 	add	arg01, #14
0729c                 | ' {
0729c                 | ' 
0729c                 | ' 	return *((WORD*)ptr);
0729c     00 EB E9 FA | 	rdword	result1, arg01 wz
072a0     80 00 90 AD |  if_e	jmp	#LR__1072
072a4     44 0A 06 F1 | 	add	local01, #68
072a8     05 01 C2 FA | 	rdbyte	arg01, local01
072ac     44 0A 86 F1 | 	sub	local01, #68
072b0     01 00 86 F1 | 	sub	arg01, #1
072b4     02 00 16 F2 | 	cmp	arg01, #2 wc
072b8     68 00 90 3D |  if_ae	jmp	#LR__1072
072bc     34 0A 06 F1 | 	add	local01, #52
072c0     05 01 02 F6 | 	mov	arg01, local01
072c4     34 0A 86 F1 | 	sub	local01, #52
072c8     11 00 06 F1 | 	add	arg01, #17
072cc                 | ' {
072cc                 | ' 
072cc                 | ' 	return *((WORD*)ptr);
072cc     00 EB E9 FA | 	rdword	result1, arg01 wz
072d0     50 00 90 AD |  if_e	jmp	#LR__1072
072d4     34 0A 06 F1 | 	add	local01, #52
072d8     05 01 02 F6 | 	mov	arg01, local01
072dc     34 0A 86 F1 | 	sub	local01, #52
072e0     13 00 06 F1 | 	add	arg01, #19
072e4                 | ' {
072e4                 | ' 
072e4                 | ' 	return *((WORD*)ptr);
072e4     00 EB E1 FA | 	rdword	result1, arg01
072e8     F5 0E 32 F9 | 	getword	local03, result1, #0
072ec     80 0E 16 F2 | 	cmp	local03, #128 wc
072f0     20 00 90 3D |  if_ae	jmp	#LR__1071
072f4     34 0A 06 F1 | 	add	local01, #52
072f8     05 01 02 F6 | 	mov	arg01, local01
072fc     34 0A 86 F1 | 	sub	local01, #52
07300     20 00 06 F1 | 	add	arg01, #32
07304                 | ' {
07304                 | ' 
07304                 | ' 	return *((DWORD*)ptr);
07304     00 EB 01 FB | 	rdlong	result1, arg01
07308     80 00 00 FF 
0730c     00 EA 15 F2 | 	cmp	result1, ##65536 wc
07310     10 00 90 CD |  if_b	jmp	#LR__1072
07314                 | LR__1071
07314     4A 0A 06 F1 | 	add	local01, #74
07318                 | ' {
07318                 | ' 
07318                 | ' 	return *((WORD*)ptr);
07318     05 EB E9 FA | 	rdword	result1, local01 wz
0731c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
0731c                 | ' 			&& ld_word(fs->win +  14 ) != 0
0731c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
0731c                 | ' 			&& ld_word(fs->win +  17 ) != 0
0731c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
0731c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
0731c                 | ' 				return 0;
0731c     00 EA 05 56 |  if_ne	mov	result1, #0
07320     18 00 90 5D |  if_ne	jmp	#LR__1074
07324                 | LR__1072
07324                 | LR__1073
07324                 | ' 		}
07324                 | ' 	}
07324                 | ' 	return sign == 0xAA55 ? 2 : 3;
07324     06 0F 32 F9 | 	getword	local03, local02, #0
07328     55 00 00 FF 
0732c     55 0E 0E F2 | 	cmp	local03, ##43605 wz
07330     02 10 06 A6 |  if_e	mov	local04, #2
07334     03 10 06 56 |  if_ne	mov	local04, #3
07338     08 EB 01 F6 | 	mov	result1, local04
0733c                 | LR__1074
0733c     A7 F0 03 F6 | 	mov	ptra, fp
07340     B2 00 A0 FD | 	call	#popregs_
07344                 | _fatfs_cc_check_fs_ret
07344     2D 00 64 FD | 	ret
07348                 | 
07348                 | _fatfs_cc_find_volume
07348     05 4A 05 F6 | 	mov	COUNT_, #5
0734c     A8 00 A0 FD | 	call	#pushregs_
07350     24 F0 07 F1 | 	add	ptra, #36
07354     00 0B 02 F6 | 	mov	local01, arg01
07358     01 0D 02 F6 | 	mov	local02, arg02
0735c     05 01 02 F6 | 	mov	arg01, local01
07360     00 02 06 F6 | 	mov	arg02, #0
07364     08 FE BF FD | 	call	#_fatfs_cc_check_fs
07368     02 EA 0D F2 | 	cmp	result1, #2 wz
0736c     0C 00 90 AD |  if_e	jmp	#LR__1080
07370     03 EA 15 F2 | 	cmp	result1, #3 wc
07374     00 0C 0E C2 |  if_b	cmp	local02, #0 wz
07378     D0 00 90 BD |  if_nc_or_z	jmp	#LR__1088
0737c                 | LR__1080
0737c                 | ' 	for (i = 0; i < 4; i++) {
0737c     00 0E 06 F6 | 	mov	local03, #0
07380     97 26 48 FB | 	callpa	#(@LR__1082-@LR__1081)>>2,fcache_load_ptr_
07384                 | LR__1081
07384     04 0E 16 F2 | 	cmp	local03, #4 wc
07388     44 00 90 3D |  if_ae	jmp	#LR__1083
0738c     07 11 02 F6 | 	mov	local04, local03
07390     02 10 66 F0 | 	shl	local04, #2
07394     14 4E 05 F1 | 	add	fp, #20
07398     A7 10 02 F1 | 	add	local04, fp
0739c     34 0A 06 F1 | 	add	local01, #52
073a0     05 01 02 F6 | 	mov	arg01, local01
073a4     34 0A 86 F1 | 	sub	local01, #52
073a8     BE 01 06 F1 | 	add	arg01, #446
073ac     07 03 02 F6 | 	mov	arg02, local03
073b0     04 02 66 F0 | 	shl	arg02, #4
073b4     01 01 02 F1 | 	add	arg01, arg02
073b8     08 00 06 F1 | 	add	arg01, #8
073bc                 | ' {
073bc                 | ' 
073bc                 | ' 	return *((DWORD*)ptr);
073bc     00 EB 01 FB | 	rdlong	result1, arg01
073c0     14 4E 85 F1 | 	sub	fp, #20
073c4     08 EB 61 FC | 	wrlong	result1, local04
073c8     01 0E 06 F1 | 	add	local03, #1
073cc     B4 FF 9F FD | 	jmp	#LR__1081
073d0                 | LR__1082
073d0                 | LR__1083
073d0     00 0C 0E F2 | 	cmp	local02, #0 wz
073d4     06 11 02 56 |  if_ne	mov	local04, local02
073d8     01 10 86 51 |  if_ne	sub	local04, #1
073dc     00 10 06 A6 |  if_e	mov	local04, #0
073e0     08 0F 02 F6 | 	mov	local03, local04
073e4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
073e4                 | ' 	}
073e4                 | ' 	i = part ? part - 1 : 0;
073e4                 | ' 	do {
073e4                 | LR__1084
073e4     07 11 02 F6 | 	mov	local04, local03
073e8     02 10 66 F0 | 	shl	local04, #2
073ec     14 4E 05 F1 | 	add	fp, #20
073f0     A7 10 02 F1 | 	add	local04, fp
073f4     08 11 0A FB | 	rdlong	local04, local04 wz
073f8     14 4E 85 F1 | 	sub	fp, #20
073fc     28 00 90 AD |  if_e	jmp	#LR__1085
07400     07 11 02 F6 | 	mov	local04, local03
07404     02 10 66 F0 | 	shl	local04, #2
07408     14 4E 05 F1 | 	add	fp, #20
0740c     A7 10 02 F1 | 	add	local04, fp
07410     08 03 02 FB | 	rdlong	arg02, local04
07414     05 01 02 F6 | 	mov	arg01, local01
07418     14 4E 85 F1 | 	sub	fp, #20
0741c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
07420     F5 10 02 F6 | 	mov	local04, result1
07424     04 00 90 FD | 	jmp	#LR__1086
07428                 | LR__1085
07428     03 10 06 F6 | 	mov	local04, #3
0742c                 | LR__1086
0742c     08 13 02 F6 | 	mov	local05, local04
07430     00 0C 0E F2 | 	cmp	local02, #0 wz
07434     02 12 16 A2 |  if_e	cmp	local05, #2 wc
07438     0C 00 90 8D |  if_c_and_z	jmp	#LR__1087
0743c     01 0E 06 A1 |  if_e	add	local03, #1
07440     04 0E 16 A2 |  if_e	cmp	local03, #4 wc
07444     9C FF 9F 8D |  if_c_and_z	jmp	#LR__1084
07448                 | LR__1087
07448                 | ' 	return fmt;
07448     09 EB 01 F6 | 	mov	result1, local05
0744c                 | LR__1088
0744c     A7 F0 03 F6 | 	mov	ptra, fp
07450     B2 00 A0 FD | 	call	#popregs_
07454                 | _fatfs_cc_find_volume_ret
07454     2D 00 64 FD | 	ret
07458                 | 
07458                 | _fatfs_cc_mount_volume
07458     0B 4A 05 F6 | 	mov	COUNT_, #11
0745c     A8 00 A0 FD | 	call	#pushregs_
07460     01 0B 02 F6 | 	mov	local01, arg02
07464     02 0D 02 F6 | 	mov	local02, arg03
07468     05 01 68 FC | 	wrlong	#0, local01
0746c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
07470     F5 0E 02 F6 | 	mov	local03, result1
07474     00 0E 56 F2 | 	cmps	local03, #0 wc
07478     0B EA 05 C6 |  if_b	mov	result1, #11
0747c     3C 05 90 CD |  if_b	jmp	#LR__1100
07480     07 05 02 F6 | 	mov	arg03, local03
07484     02 04 66 F0 | 	shl	arg03, #2
07488     F1 04 02 F1 | 	add	arg03, objptr
0748c     02 11 0A FB | 	rdlong	local04, arg03 wz
07490     0C EA 05 A6 |  if_e	mov	result1, #12
07494     24 05 90 AD |  if_e	jmp	#LR__1100
07498     05 11 62 FC | 	wrlong	local04, local01
0749c     06 0D E2 F8 | 	getbyte	local02, local02, #0
074a0     FE 0C 06 F5 | 	and	local02, #254
074a4     08 05 CA FA | 	rdbyte	arg03, local04 wz
074a8     4C 00 90 AD |  if_e	jmp	#LR__1091
074ac     01 10 06 F1 | 	add	local04, #1
074b0     08 01 CA FA | 	rdbyte	arg01, local04 wz
074b4     01 10 86 F1 | 	sub	local04, #1
074b8     01 EA 05 56 |  if_ne	mov	result1, #1
074bc                 | ' 
074bc                 | ' 	return Stat;
074bc     01 00 00 AF 
074c0     20 E2 05 A1 |  if_e	add	objptr, ##544
074c4     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
074c8     01 00 00 AF 
074cc     20 E2 85 A1 |  if_e	sub	objptr, ##544
074d0     F5 04 E2 F8 | 	getbyte	arg03, result1, #0
074d4     01 04 CE F7 | 	test	arg03, #1 wz
074d8     1C 00 90 5D |  if_ne	jmp	#LR__1090
074dc     00 0C 0E F2 | 	cmp	local02, #0 wz
074e0     F5 EA E1 58 |  if_ne	getbyte	result1, result1, #0
074e4     04 EA CD 57 |  if_ne	test	result1, #4 wz
074e8                 | ' 				return FR_WRITE_PROTECTED;
074e8     0A EA 05 56 |  if_ne	mov	result1, #10
074ec     CC 04 90 5D |  if_ne	jmp	#LR__1100
074f0                 | ' 			}
074f0                 | ' 			return FR_OK;
074f0     00 EA 05 F6 | 	mov	result1, #0
074f4     C4 04 90 FD | 	jmp	#LR__1100
074f8                 | LR__1090
074f8                 | LR__1091
074f8     08 01 48 FC | 	wrbyte	#0, local04
074fc     01 10 06 F1 | 	add	local04, #1
07500     08 0F 42 FC | 	wrbyte	local03, local04
07504     08 01 C2 FA | 	rdbyte	arg01, local04
07508     01 10 86 F1 | 	sub	local04, #1
0750c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
07510     F5 04 02 F6 | 	mov	arg03, result1
07514     02 13 E2 F8 | 	getbyte	local05, arg03, #0
07518     01 12 CE F7 | 	test	local05, #1 wz
0751c                 | ' 		return FR_NOT_READY;
0751c     03 EA 05 56 |  if_ne	mov	result1, #3
07520     98 04 90 5D |  if_ne	jmp	#LR__1100
07524     00 0C 0E F2 | 	cmp	local02, #0 wz
07528     02 13 02 56 |  if_ne	mov	local05, arg03
0752c     09 13 E2 58 |  if_ne	getbyte	local05, local05, #0
07530     04 12 CE 57 |  if_ne	test	local05, #4 wz
07534                 | ' 		return FR_WRITE_PROTECTED;
07534     0A EA 05 56 |  if_ne	mov	result1, #10
07538     80 04 90 5D |  if_ne	jmp	#LR__1100
0753c     08 01 02 F6 | 	mov	arg01, local04
07540     00 02 06 F6 | 	mov	arg02, #0
07544     00 FE BF FD | 	call	#_fatfs_cc_find_volume
07548     F5 00 02 F6 | 	mov	arg01, result1
0754c     04 00 0E F2 | 	cmp	arg01, #4 wz
07550     01 EA 05 A6 |  if_e	mov	result1, #1
07554     64 04 90 AD |  if_e	jmp	#LR__1100
07558     02 00 16 F2 | 	cmp	arg01, #2 wc
0755c     0D EA 05 36 |  if_ae	mov	result1, #13
07560     58 04 90 3D |  if_ae	jmp	#LR__1100
07564     30 10 06 F1 | 	add	local04, #48
07568     08 15 02 FB | 	rdlong	local06, local04
0756c     04 10 06 F1 | 	add	local04, #4
07570     08 01 02 F6 | 	mov	arg01, local04
07574     34 10 86 F1 | 	sub	local04, #52
07578     0B 00 06 F1 | 	add	arg01, #11
0757c                 | ' {
0757c                 | ' 
0757c                 | ' 	return *((WORD*)ptr);
0757c     00 EB E1 FA | 	rdword	result1, arg01
07580     01 00 00 FF 
07584     00 EA 0D F2 | 	cmp	result1, ##512 wz
07588     0D EA 05 56 |  if_ne	mov	result1, #13
0758c     2C 04 90 5D |  if_ne	jmp	#LR__1100
07590     34 10 06 F1 | 	add	local04, #52
07594     08 01 02 F6 | 	mov	arg01, local04
07598     34 10 86 F1 | 	sub	local04, #52
0759c     16 00 06 F1 | 	add	arg01, #22
075a0                 | ' {
075a0                 | ' 
075a0                 | ' 	return *((WORD*)ptr);
075a0     00 EB E1 FA | 	rdword	result1, arg01
075a4     F5 16 0A F6 | 	mov	local07, result1 wz
075a8     18 00 90 5D |  if_ne	jmp	#LR__1092
075ac     34 10 06 F1 | 	add	local04, #52
075b0     08 01 02 F6 | 	mov	arg01, local04
075b4     34 10 86 F1 | 	sub	local04, #52
075b8     24 00 06 F1 | 	add	arg01, #36
075bc                 | ' {
075bc                 | ' 
075bc                 | ' 	return *((DWORD*)ptr);
075bc     00 EB 01 FB | 	rdlong	result1, arg01
075c0     F5 16 02 F6 | 	mov	local07, result1
075c4                 | LR__1092
075c4     1C 10 06 F1 | 	add	local04, #28
075c8     08 17 62 FC | 	wrlong	local07, local04
075cc     28 10 06 F1 | 	add	local04, #40
075d0     08 13 C2 FA | 	rdbyte	local05, local04
075d4     42 10 86 F1 | 	sub	local04, #66
075d8     08 13 42 FC | 	wrbyte	local05, local04
075dc     08 13 C2 FA | 	rdbyte	local05, local04
075e0     02 10 86 F1 | 	sub	local04, #2
075e4     01 12 0E F2 | 	cmp	local05, #1 wz
075e8     02 10 06 51 |  if_ne	add	local04, #2
075ec     08 13 C2 5A |  if_ne	rdbyte	local05, local04
075f0     02 10 86 51 |  if_ne	sub	local04, #2
075f4     02 12 0E 52 |  if_ne	cmp	local05, #2 wz
075f8     0D EA 05 56 |  if_ne	mov	result1, #13
075fc     BC 03 90 5D |  if_ne	jmp	#LR__1100
07600     02 10 06 F1 | 	add	local04, #2
07604     08 13 C2 FA | 	rdbyte	local05, local04
07608     09 17 02 FD | 	qmul	local07, local05
0760c     3F 10 06 F1 | 	add	local04, #63
07610     08 13 C2 FA | 	rdbyte	local05, local04
07614     37 10 86 F1 | 	sub	local04, #55
07618     08 13 52 FC | 	wrword	local05, local04
0761c     08 13 EA FA | 	rdword	local05, local04 wz
07620     0A 10 86 F1 | 	sub	local04, #10
07624     18 16 62 FD | 	getqx	local07
07628     20 00 90 AD |  if_e	jmp	#LR__1093
0762c     0A 10 06 F1 | 	add	local04, #10
07630     08 13 E2 FA | 	rdword	local05, local04
07634     09 0F 32 F9 | 	getword	local03, local05, #0
07638     0A 10 86 F1 | 	sub	local04, #10
0763c     09 13 32 F9 | 	getword	local05, local05, #0
07640     01 12 86 F1 | 	sub	local05, #1
07644     09 0F CA F7 | 	test	local03, local05 wz
07648     08 00 90 AD |  if_e	jmp	#LR__1094
0764c                 | LR__1093
0764c     0D EA 05 F6 | 	mov	result1, #13
07650     68 03 90 FD | 	jmp	#LR__1100
07654                 | LR__1094
07654     34 10 06 F1 | 	add	local04, #52
07658     08 01 02 F6 | 	mov	arg01, local04
0765c     11 00 06 F1 | 	add	arg01, #17
07660                 | ' {
07660                 | ' 
07660                 | ' 	return *((WORD*)ptr);
07660     00 EB E1 FA | 	rdword	result1, arg01
07664     2C 10 86 F1 | 	sub	local04, #44
07668     08 EB 51 FC | 	wrword	result1, local04
0766c     08 13 E2 FA | 	rdword	local05, local04
07670     08 10 86 F1 | 	sub	local04, #8
07674     09 01 52 F6 | 	abs	arg01, local05 wc
07678     00 01 42 F8 | 	getnib	arg01, arg01, #0
0767c     00 01 8A F6 | 	negc	arg01, arg01 wz
07680     0D EA 05 56 |  if_ne	mov	result1, #13
07684     34 03 90 5D |  if_ne	jmp	#LR__1100
07688     34 10 06 F1 | 	add	local04, #52
0768c     08 01 02 F6 | 	mov	arg01, local04
07690     34 10 86 F1 | 	sub	local04, #52
07694     13 00 06 F1 | 	add	arg01, #19
07698                 | ' {
07698                 | ' 
07698                 | ' 	return *((WORD*)ptr);
07698     00 EB E1 FA | 	rdword	result1, arg01
0769c     F5 18 0A F6 | 	mov	local08, result1 wz
076a0     34 10 06 A1 |  if_e	add	local04, #52
076a4     08 01 02 A6 |  if_e	mov	arg01, local04
076a8     34 10 86 A1 |  if_e	sub	local04, #52
076ac     20 00 06 A1 |  if_e	add	arg01, #32
076b0                 | ' {
076b0                 | ' 
076b0                 | ' 	return *((DWORD*)ptr);
076b0     00 19 02 AB |  if_e	rdlong	local08, arg01
076b4     34 10 06 F1 | 	add	local04, #52
076b8     08 01 02 F6 | 	mov	arg01, local04
076bc     34 10 86 F1 | 	sub	local04, #52
076c0     0E 00 06 F1 | 	add	arg01, #14
076c4                 | ' {
076c4                 | ' 
076c4                 | ' 	return *((WORD*)ptr);
076c4     00 EB E1 FA | 	rdword	result1, arg01
076c8     F5 00 02 F6 | 	mov	arg01, result1
076cc     00 13 02 F6 | 	mov	local05, arg01
076d0     0F 12 4E F7 | 	zerox	local05, #15 wz
076d4     0D EA 05 A6 |  if_e	mov	result1, #13
076d8     E0 02 90 AD |  if_e	jmp	#LR__1100
076dc     00 1B 32 F9 | 	getword	local09, arg01, #0
076e0     0B 1B 02 F1 | 	add	local09, local07
076e4     08 10 06 F1 | 	add	local04, #8
076e8     08 13 E2 FA | 	rdword	local05, local04
076ec     08 10 86 F1 | 	sub	local04, #8
076f0     09 13 52 F6 | 	abs	local05, local05 wc
076f4     04 12 46 F0 | 	shr	local05, #4
076f8     09 1B 82 F3 | 	sumc	local09, local05
076fc     0D 19 12 F2 | 	cmp	local08, local09 wc
07700     0D EA 05 C6 |  if_b	mov	result1, #13
07704     B4 02 90 CD |  if_b	jmp	#LR__1100
07708     0D 19 82 F1 | 	sub	local08, local09
0770c     0A 10 06 F1 | 	add	local04, #10
07710     08 13 E2 FA | 	rdword	local05, local04
07714     09 19 12 FD | 	qdiv	local08, local05
07718     0A 10 86 F1 | 	sub	local04, #10
0771c     18 12 62 FD | 	getqx	local05
07720     00 12 0E F2 | 	cmp	local05, #0 wz
07724     0D EA 05 A6 |  if_e	mov	result1, #13
07728     90 02 90 AD |  if_e	jmp	#LR__1100
0772c     00 1C 06 F6 | 	mov	local10, #0
07730     FF FF 07 FF 
07734     F6 13 16 F2 | 	cmp	local05, ##268435446 wc
07738     03 1C 06 C6 |  if_b	mov	local10, #3
0773c     7F 00 00 FF 
07740     F6 13 16 F2 | 	cmp	local05, ##65526 wc
07744     02 1C 06 C6 |  if_b	mov	local10, #2
07748     07 00 00 FF 
0774c     F6 13 16 F2 | 	cmp	local05, ##4086 wc
07750     01 1C 06 C6 |  if_b	mov	local10, #1
07754     00 1C 0E F2 | 	cmp	local10, #0 wz
07758     0D EA 05 A6 |  if_e	mov	result1, #13
0775c     5C 02 90 AD |  if_e	jmp	#LR__1100
07760     02 12 06 F1 | 	add	local05, #2
07764     18 10 06 F1 | 	add	local04, #24
07768     08 13 62 FC | 	wrlong	local05, local04
0776c     08 10 06 F1 | 	add	local04, #8
07770     08 15 62 FC | 	wrlong	local06, local04
07774     0A 13 02 F6 | 	mov	local05, local06
07778     00 01 32 F9 | 	getword	arg01, arg01, #0
0777c     00 13 02 F1 | 	add	local05, arg01
07780     04 10 06 F1 | 	add	local04, #4
07784     08 13 62 FC | 	wrlong	local05, local04
07788     0A 13 02 F6 | 	mov	local05, local06
0778c     0D 13 02 F1 | 	add	local05, local09
07790     08 10 06 F1 | 	add	local04, #8
07794     08 13 62 FC | 	wrlong	local05, local04
07798     2C 10 86 F1 | 	sub	local04, #44
0779c     03 1C 0E F2 | 	cmp	local10, #3 wz
077a0     5C 00 90 5D |  if_ne	jmp	#LR__1095
077a4     34 10 06 F1 | 	add	local04, #52
077a8     08 01 02 F6 | 	mov	arg01, local04
077ac     34 10 86 F1 | 	sub	local04, #52
077b0     2A 00 06 F1 | 	add	arg01, #42
077b4                 | ' {
077b4                 | ' 
077b4                 | ' 	return *((WORD*)ptr);
077b4     00 EB E9 FA | 	rdword	result1, arg01 wz
077b8     0D EA 05 56 |  if_ne	mov	result1, #13
077bc     FC 01 90 5D |  if_ne	jmp	#LR__1100
077c0     08 10 06 F1 | 	add	local04, #8
077c4     08 13 EA FA | 	rdword	local05, local04 wz
077c8     08 10 86 F1 | 	sub	local04, #8
077cc     0D EA 05 56 |  if_ne	mov	result1, #13
077d0     E8 01 90 5D |  if_ne	jmp	#LR__1100
077d4     34 10 06 F1 | 	add	local04, #52
077d8     08 01 02 F6 | 	mov	arg01, local04
077dc     2C 00 06 F1 | 	add	arg01, #44
077e0                 | ' {
077e0                 | ' 
077e0                 | ' 	return *((DWORD*)ptr);
077e0     00 EB 01 FB | 	rdlong	result1, arg01
077e4     0C 10 86 F1 | 	sub	local04, #12
077e8     08 EB 61 FC | 	wrlong	result1, local04
077ec     10 10 86 F1 | 	sub	local04, #16
077f0     08 1F 02 FB | 	rdlong	local11, local04
077f4     18 10 86 F1 | 	sub	local04, #24
077f8     02 1E 66 F0 | 	shl	local11, #2
077fc     6C 00 90 FD | 	jmp	#LR__1097
07800                 | LR__1095
07800     08 10 06 F1 | 	add	local04, #8
07804     08 13 EA FA | 	rdword	local05, local04 wz
07808     08 10 86 F1 | 	sub	local04, #8
0780c     0D EA 05 A6 |  if_e	mov	result1, #13
07810     A8 01 90 AD |  if_e	jmp	#LR__1100
07814     24 10 06 F1 | 	add	local04, #36
07818     08 13 02 FB | 	rdlong	local05, local04
0781c     0B 13 02 F1 | 	add	local05, local07
07820     04 10 06 F1 | 	add	local04, #4
07824     08 13 62 FC | 	wrlong	local05, local04
07828     28 10 86 F1 | 	sub	local04, #40
0782c     02 1C 0E F2 | 	cmp	local10, #2 wz
07830     18 10 06 A1 |  if_e	add	local04, #24
07834     08 13 02 AB |  if_e	rdlong	local05, local04
07838     18 10 86 A1 |  if_e	sub	local04, #24
0783c     01 12 66 A0 |  if_e	shl	local05, #1
07840     24 00 90 AD |  if_e	jmp	#LR__1096
07844     18 10 06 F1 | 	add	local04, #24
07848     08 1F 02 FB | 	rdlong	local11, local04
0784c     0F 13 02 F6 | 	mov	local05, local11
07850     01 12 66 F0 | 	shl	local05, #1
07854     0F 13 02 F1 | 	add	local05, local11
07858     01 12 46 F0 | 	shr	local05, #1
0785c     18 10 86 F1 | 	sub	local04, #24
07860     01 1E 06 F5 | 	and	local11, #1
07864     0F 13 02 F1 | 	add	local05, local11
07868                 | LR__1096
07868     09 1F 02 F6 | 	mov	local11, local05
0786c                 | LR__1097
0786c     FF 1F 06 F1 | 	add	local11, #511
07870     09 1E 46 F0 | 	shr	local11, #9
07874     1C 10 06 F1 | 	add	local04, #28
07878     08 05 02 FB | 	rdlong	arg03, local04
0787c     1C 10 86 F1 | 	sub	local04, #28
07880     0F 05 12 F2 | 	cmp	arg03, local11 wc
07884     0D EA 05 C6 |  if_b	mov	result1, #13
07888     30 01 90 CD |  if_b	jmp	#LR__1100
0788c     14 10 06 F1 | 	add	local04, #20
07890     FF FF FF FF 
07894     08 FF 6B FC | 	wrlong	##-1, local04
07898     04 10 86 F1 | 	sub	local04, #4
0789c     FF FF FF FF 
078a0     08 FF 6B FC | 	wrlong	##-1, local04
078a4     0C 10 86 F1 | 	sub	local04, #12
078a8     08 01 49 FC | 	wrbyte	#128, local04
078ac     04 10 86 F1 | 	sub	local04, #4
078b0     03 1C 0E F2 | 	cmp	local10, #3 wz
078b4     D0 00 90 5D |  if_ne	jmp	#LR__1099
078b8     34 10 06 F1 | 	add	local04, #52
078bc     08 01 02 F6 | 	mov	arg01, local04
078c0     34 10 86 F1 | 	sub	local04, #52
078c4     30 00 06 F1 | 	add	arg01, #48
078c8                 | ' {
078c8                 | ' 
078c8                 | ' 	return *((WORD*)ptr);
078c8     00 EB E1 FA | 	rdword	result1, arg01
078cc     F5 12 32 F9 | 	getword	local05, result1, #0
078d0     01 12 0E F2 | 	cmp	local05, #1 wz
078d4     B0 00 90 5D |  if_ne	jmp	#LR__1099
078d8     01 14 06 F1 | 	add	local06, #1
078dc     08 01 02 F6 | 	mov	arg01, local04
078e0     0A 03 02 F6 | 	mov	arg02, local06
078e4     CC CD BF FD | 	call	#_fatfs_cc_move_window
078e8     00 EA 0D F2 | 	cmp	result1, #0 wz
078ec     98 00 90 5D |  if_ne	jmp	#LR__1099
078f0     04 10 06 F1 | 	add	local04, #4
078f4     08 01 48 FC | 	wrbyte	#0, local04
078f8     30 10 06 F1 | 	add	local04, #48
078fc     08 01 02 F6 | 	mov	arg01, local04
07900     34 10 86 F1 | 	sub	local04, #52
07904     FE 01 06 F1 | 	add	arg01, #510
07908                 | ' {
07908                 | ' 
07908                 | ' 	return *((WORD*)ptr);
07908     00 EB E1 FA | 	rdword	result1, arg01
0790c     F5 12 32 F9 | 	getword	local05, result1, #0
07910     55 00 00 FF 
07914     55 12 0E F2 | 	cmp	local05, ##43605 wz
07918     34 10 06 A1 |  if_e	add	local04, #52
0791c     08 01 02 A6 |  if_e	mov	arg01, local04
07920     34 10 86 A1 |  if_e	sub	local04, #52
07924                 | ' {
07924                 | ' 
07924                 | ' 	return *((DWORD*)ptr);
07924     00 EB 01 AB |  if_e	rdlong	result1, arg01
07928     A9 B0 20 AF 
0792c     52 EA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
07930     54 00 90 5D |  if_ne	jmp	#LR__1098
07934     34 10 06 F1 | 	add	local04, #52
07938     08 01 02 F6 | 	mov	arg01, local04
0793c     34 10 86 F1 | 	sub	local04, #52
07940     E4 01 06 F1 | 	add	arg01, #484
07944                 | ' {
07944                 | ' 
07944                 | ' 	return *((DWORD*)ptr);
07944     00 EB 01 FB | 	rdlong	result1, arg01
07948     B9 A0 30 FF 
0794c     72 EA 0D F2 | 	cmp	result1, ##1631679090 wz
07950     34 00 90 5D |  if_ne	jmp	#LR__1098
07954     34 10 06 F1 | 	add	local04, #52
07958     08 01 02 F6 | 	mov	arg01, local04
0795c     E8 01 06 F1 | 	add	arg01, #488
07960                 | ' {
07960                 | ' 
07960                 | ' 	return *((DWORD*)ptr);
07960     00 EB 01 FB | 	rdlong	result1, arg01
07964     20 10 86 F1 | 	sub	local04, #32
07968     08 EB 61 FC | 	wrlong	result1, local04
0796c     20 10 06 F1 | 	add	local04, #32
07970     08 01 02 F6 | 	mov	arg01, local04
07974     EC 01 06 F1 | 	add	arg01, #492
07978                 | ' {
07978                 | ' 
07978                 | ' 	return *((DWORD*)ptr);
07978     00 EB 01 FB | 	rdlong	result1, arg01
0797c     24 10 86 F1 | 	sub	local04, #36
07980     08 EB 61 FC | 	wrlong	result1, local04
07984     10 10 86 F1 | 	sub	local04, #16
07988                 | LR__1098
07988                 | LR__1099
07988     08 1D 42 FC | 	wrbyte	local10, local04
0798c     04 E2 05 F1 | 	add	objptr, #4
07990     F1 12 E2 FA | 	rdword	local05, objptr
07994     01 12 06 F1 | 	add	local05, #1
07998     F1 12 52 FC | 	wrword	local05, objptr
0799c     F1 1E E2 FA | 	rdword	local11, objptr
079a0     06 10 06 F1 | 	add	local04, #6
079a4     08 1F 52 FC | 	wrword	local11, local04
079a8     04 E2 05 F1 | 	add	objptr, #4
079ac     06 10 06 F1 | 	add	local04, #6
079b0     08 E3 61 FC | 	wrlong	objptr, local04
079b4                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
079b4                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
079b4                 | ' 			{
079b4                 | ' 
079b4                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
079b4                 | ' 
079b4                 | ' 
079b4                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
079b4                 | ' 
079b4                 | ' 			}
079b4                 | ' 		}
079b4                 | ' 
079b4                 | ' 
079b4                 | ' 	}
079b4                 | ' 
079b4                 | ' 	fs->fs_type = (BYTE)fmt;
079b4                 | ' 	fs->id = ++Fsid;
079b4                 | ' 
079b4                 | ' 	fs->lfnbuf = LfnBuf;
079b4                 | ' #line 3567 "ff.c"
079b4                 | ' 	return FR_OK;
079b4     00 EA 05 F6 | 	mov	result1, #0
079b8     08 E2 85 F1 | 	sub	objptr, #8
079bc                 | LR__1100
079bc     A7 F0 03 F6 | 	mov	ptra, fp
079c0     B2 00 A0 FD | 	call	#popregs_
079c4                 | _fatfs_cc_mount_volume_ret
079c4     2D 00 64 FD | 	ret
079c8                 | 
079c8                 | _fatfs_cc_validate
079c8     00 EF 09 F6 | 	mov	_var01, arg01 wz
079cc     09 F0 05 F6 | 	mov	_var02, #9
079d0     F7 F2 09 5B |  if_ne	rdlong	_var03, _var01 wz
079d4     F9 F4 C9 5A |  if_ne	rdbyte	_var04, _var03 wz
079d8     50 00 90 AD |  if_e	jmp	#LR__1110
079dc     04 EE 05 F1 | 	add	_var01, #4
079e0     F7 F4 E1 FA | 	rdword	_var04, _var01
079e4     04 EE 85 F1 | 	sub	_var01, #4
079e8     F7 00 02 FB | 	rdlong	arg01, _var01
079ec     06 00 06 F1 | 	add	arg01, #6
079f0     00 EB E1 FA | 	rdword	result1, arg01
079f4     F5 F4 09 F2 | 	cmp	_var04, result1 wz
079f8     30 00 90 5D |  if_ne	jmp	#LR__1110
079fc     F7 F4 01 FB | 	rdlong	_var04, _var01
07a00     01 F4 05 F1 | 	add	_var04, #1
07a04     FA 00 CA FA | 	rdbyte	arg01, _var04 wz
07a08     01 EA 05 56 |  if_ne	mov	result1, #1
07a0c                 | ' 
07a0c                 | ' 	return Stat;
07a0c     01 00 00 AF 
07a10     20 E2 05 A1 |  if_e	add	objptr, ##544
07a14     F1 EA C1 AA |  if_e	rdbyte	result1, objptr
07a18     01 00 00 AF 
07a1c     20 E2 85 A1 |  if_e	sub	objptr, ##544
07a20     F5 F2 E1 F8 | 	getbyte	_var03, result1, #0
07a24     01 F2 CD F7 | 	test	_var03, #1 wz
07a28     00 F0 05 A6 |  if_e	mov	_var02, #0
07a2c                 | LR__1110
07a2c     00 F0 0D F2 | 	cmp	_var02, #0 wz
07a30     F7 F2 01 AB |  if_e	rdlong	_var03, _var01
07a34     00 F2 05 56 |  if_ne	mov	_var03, #0
07a38     01 F3 61 FC | 	wrlong	_var03, arg02
07a3c                 | ' 			res = FR_OK;
07a3c                 | ' 		}
07a3c                 | ' 
07a3c                 | ' 	}
07a3c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
07a3c                 | ' 	return res;
07a3c     F8 EA 01 F6 | 	mov	result1, _var02
07a40                 | _fatfs_cc_validate_ret
07a40     2D 00 64 FD | 	ret
07a44                 | 
07a44                 | _fatfs_cc_f_mount
07a44     01 4A 05 F6 | 	mov	COUNT_, #1
07a48     A8 00 A0 FD | 	call	#pushregs_
07a4c     20 F0 07 F1 | 	add	ptra, #32
07a50     04 4E 05 F1 | 	add	fp, #4
07a54     A7 00 62 FC | 	wrlong	arg01, fp
07a58     04 4E 05 F1 | 	add	fp, #4
07a5c     A7 02 62 FC | 	wrlong	arg02, fp
07a60     04 4E 05 F1 | 	add	fp, #4
07a64     A7 04 42 FC | 	wrbyte	arg03, fp
07a68     04 4E 85 F1 | 	sub	fp, #4
07a6c     A7 04 02 FB | 	rdlong	arg03, fp
07a70     14 4E 05 F1 | 	add	fp, #20
07a74     A7 04 62 FC | 	wrlong	arg03, fp
07a78     A7 00 02 F6 | 	mov	arg01, fp
07a7c     1C 4E 85 F1 | 	sub	fp, #28
07a80     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
07a84     14 4E 05 F1 | 	add	fp, #20
07a88     A7 EA 61 FC | 	wrlong	result1, fp
07a8c     14 4E 85 F1 | 	sub	fp, #20
07a90     00 EA 55 F2 | 	cmps	result1, #0 wc
07a94     0B EA 05 C6 |  if_b	mov	result1, #11
07a98     C0 00 90 CD |  if_b	jmp	#LR__1121
07a9c     14 4E 05 F1 | 	add	fp, #20
07aa0     A7 04 02 FB | 	rdlong	arg03, fp
07aa4     02 04 66 F0 | 	shl	arg03, #2
07aa8     F1 04 02 F1 | 	add	arg03, objptr
07aac     02 05 0A FB | 	rdlong	arg03, arg03 wz
07ab0     04 4E 85 F1 | 	sub	fp, #4
07ab4     A7 04 62 FC | 	wrlong	arg03, fp
07ab8     10 4E 85 F1 | 	sub	fp, #16
07abc     28 00 90 AD |  if_e	jmp	#LR__1120
07ac0     10 4E 05 F1 | 	add	fp, #16
07ac4     A7 04 02 FB | 	rdlong	arg03, fp
07ac8     10 4E 85 F1 | 	sub	fp, #16
07acc     01 04 06 F1 | 	add	arg03, #1
07ad0     02 01 C2 FA | 	rdbyte	arg01, arg03
07ad4     1C 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
07ad8     10 4E 05 F1 | 	add	fp, #16
07adc     A7 04 02 FB | 	rdlong	arg03, fp
07ae0     10 4E 85 F1 | 	sub	fp, #16
07ae4     02 01 48 FC | 	wrbyte	#0, arg03
07ae8                 | LR__1120
07ae8     04 4E 05 F1 | 	add	fp, #4
07aec     A7 0A 0A FB | 	rdlong	local01, fp wz
07af0     04 4E 85 F1 | 	sub	fp, #4
07af4     04 4E 05 51 |  if_ne	add	fp, #4
07af8     A7 0A 02 5B |  if_ne	rdlong	local01, fp
07afc     04 4E 85 51 |  if_ne	sub	fp, #4
07b00     05 01 48 5C |  if_ne	wrbyte	#0, local01
07b04     14 4E 05 F1 | 	add	fp, #20
07b08     A7 0A 02 FB | 	rdlong	local01, fp
07b0c     02 0A 66 F0 | 	shl	local01, #2
07b10     F1 0A 02 F1 | 	add	local01, objptr
07b14     10 4E 85 F1 | 	sub	fp, #16
07b18     A7 04 02 FB | 	rdlong	arg03, fp
07b1c     05 05 62 FC | 	wrlong	arg03, local01
07b20     08 4E 05 F1 | 	add	fp, #8
07b24     A7 0A CA FA | 	rdbyte	local01, fp wz
07b28     0C 4E 85 F1 | 	sub	fp, #12
07b2c     00 EA 05 A6 |  if_e	mov	result1, #0
07b30     28 00 90 AD |  if_e	jmp	#LR__1121
07b34     08 4E 05 F1 | 	add	fp, #8
07b38     A7 00 02 F6 | 	mov	arg01, fp
07b3c     04 4E 85 F1 | 	sub	fp, #4
07b40     A7 02 02 F6 | 	mov	arg02, fp
07b44     04 4E 85 F1 | 	sub	fp, #4
07b48     00 04 06 F6 | 	mov	arg03, #0
07b4c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
07b50     18 4E 05 F1 | 	add	fp, #24
07b54     A7 EA 61 FC | 	wrlong	result1, fp
07b58                 | ' 
07b58                 | ' 	res = mount_volume(&path, &fs, 0);
07b58                 | ' 	return res ;
07b58     18 4E 85 F1 | 	sub	fp, #24
07b5c                 | LR__1121
07b5c     A7 F0 03 F6 | 	mov	ptra, fp
07b60     B2 00 A0 FD | 	call	#popregs_
07b64                 | _fatfs_cc_f_mount_ret
07b64     2D 00 64 FD | 	ret
07b68                 | 
07b68                 | _fatfs_cc_f_open
07b68     02 4A 05 F6 | 	mov	COUNT_, #2
07b6c     A8 00 A0 FD | 	call	#pushregs_
07b70     60 F0 07 F1 | 	add	ptra, #96
07b74     04 4E 05 F1 | 	add	fp, #4
07b78     A7 00 62 FC | 	wrlong	arg01, fp
07b7c     04 4E 05 F1 | 	add	fp, #4
07b80     A7 02 62 FC | 	wrlong	arg02, fp
07b84     04 4E 05 F1 | 	add	fp, #4
07b88     A7 04 42 FC | 	wrbyte	arg03, fp
07b8c     08 4E 85 F1 | 	sub	fp, #8
07b90     A7 06 0A FB | 	rdlong	arg04, fp wz
07b94     04 4E 85 F1 | 	sub	fp, #4
07b98     09 EA 05 A6 |  if_e	mov	result1, #9
07b9c     98 06 90 AD |  if_e	jmp	#LR__1147
07ba0     0C 4E 05 F1 | 	add	fp, #12
07ba4     A7 06 C2 FA | 	rdbyte	arg04, fp
07ba8     3F 06 06 F5 | 	and	arg04, #63
07bac     A7 06 42 FC | 	wrbyte	arg04, fp
07bb0     04 4E 85 F1 | 	sub	fp, #4
07bb4     A7 00 02 F6 | 	mov	arg01, fp
07bb8     3C 4E 05 F1 | 	add	fp, #60
07bbc     A7 02 02 F6 | 	mov	arg02, fp
07bc0     38 4E 85 F1 | 	sub	fp, #56
07bc4     A7 04 C2 FA | 	rdbyte	arg03, fp
07bc8     0C 4E 85 F1 | 	sub	fp, #12
07bcc     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
07bd0     10 4E 05 F1 | 	add	fp, #16
07bd4     A7 EA 61 FC | 	wrlong	result1, fp
07bd8     10 4E 85 F1 | 	sub	fp, #16
07bdc     00 EA 0D F2 | 	cmp	result1, #0 wz
07be0     2C 06 90 5D |  if_ne	jmp	#LR__1146
07be4     44 4E 05 F1 | 	add	fp, #68
07be8     A7 06 02 FB | 	rdlong	arg04, fp
07bec     30 4E 85 F1 | 	sub	fp, #48
07bf0     A7 06 62 FC | 	wrlong	arg04, fp
07bf4     A7 00 02 F6 | 	mov	arg01, fp
07bf8     0C 4E 85 F1 | 	sub	fp, #12
07bfc     A7 0A 02 FB | 	rdlong	local01, fp
07c00     08 4E 85 F1 | 	sub	fp, #8
07c04     05 03 02 F6 | 	mov	arg02, local01
07c08     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
07c0c     10 4E 05 F1 | 	add	fp, #16
07c10     A7 EA 61 FC | 	wrlong	result1, fp
07c14     10 4E 85 F1 | 	sub	fp, #16
07c18     00 EA 0D F2 | 	cmp	result1, #0 wz
07c1c     1C 00 90 5D |  if_ne	jmp	#LR__1130
07c20     3F 4E 05 F1 | 	add	fp, #63
07c24     A7 06 C2 FA | 	rdbyte	arg04, fp
07c28     3F 4E 85 F1 | 	sub	fp, #63
07c2c     80 06 CE F7 | 	test	arg04, #128 wz
07c30     10 4E 05 51 |  if_ne	add	fp, #16
07c34     A7 0C 68 5C |  if_ne	wrlong	#6, fp
07c38     10 4E 85 51 |  if_ne	sub	fp, #16
07c3c                 | LR__1130
07c3c     0C 4E 05 F1 | 	add	fp, #12
07c40     A7 06 C2 FA | 	rdbyte	arg04, fp
07c44     0C 4E 85 F1 | 	sub	fp, #12
07c48     1C 06 CE F7 | 	test	arg04, #28 wz
07c4c     F0 01 90 AD |  if_e	jmp	#LR__1135
07c50     10 4E 05 F1 | 	add	fp, #16
07c54     A7 0A 0A FB | 	rdlong	local01, fp wz
07c58     10 4E 85 F1 | 	sub	fp, #16
07c5c     48 00 90 AD |  if_e	jmp	#LR__1132
07c60     10 4E 05 F1 | 	add	fp, #16
07c64     A7 06 02 FB | 	rdlong	arg04, fp
07c68     10 4E 85 F1 | 	sub	fp, #16
07c6c     04 06 0E F2 | 	cmp	arg04, #4 wz
07c70     1C 00 90 5D |  if_ne	jmp	#LR__1131
07c74     14 4E 05 F1 | 	add	fp, #20
07c78     A7 00 02 F6 | 	mov	arg01, fp
07c7c     14 4E 85 F1 | 	sub	fp, #20
07c80     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
07c84     10 4E 05 F1 | 	add	fp, #16
07c88     A7 EA 61 FC | 	wrlong	result1, fp
07c8c     10 4E 85 F1 | 	sub	fp, #16
07c90                 | LR__1131
07c90     0C 4E 05 F1 | 	add	fp, #12
07c94     A7 0A C2 FA | 	rdbyte	local01, fp
07c98     08 0A 46 F5 | 	or	local01, #8
07c9c     A7 0A 42 FC | 	wrbyte	local01, fp
07ca0     0C 4E 85 F1 | 	sub	fp, #12
07ca4     3C 00 90 FD | 	jmp	#LR__1134
07ca8                 | LR__1132
07ca8     1A 4E 05 F1 | 	add	fp, #26
07cac     A7 0A C2 FA | 	rdbyte	local01, fp
07cb0     1A 4E 85 F1 | 	sub	fp, #26
07cb4     11 0A CE F7 | 	test	local01, #17 wz
07cb8     10 4E 05 51 |  if_ne	add	fp, #16
07cbc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
07cc0     10 4E 85 51 |  if_ne	sub	fp, #16
07cc4     1C 00 90 5D |  if_ne	jmp	#LR__1133
07cc8     0C 4E 05 F1 | 	add	fp, #12
07ccc     A7 0A C2 FA | 	rdbyte	local01, fp
07cd0     0C 4E 85 F1 | 	sub	fp, #12
07cd4     04 0A CE F7 | 	test	local01, #4 wz
07cd8     10 4E 05 51 |  if_ne	add	fp, #16
07cdc     A7 10 68 5C |  if_ne	wrlong	#8, fp
07ce0     10 4E 85 51 |  if_ne	sub	fp, #16
07ce4                 | LR__1133
07ce4                 | LR__1134
07ce4     10 4E 05 F1 | 	add	fp, #16
07ce8     A7 0A 0A FB | 	rdlong	local01, fp wz
07cec     10 4E 85 F1 | 	sub	fp, #16
07cf0     A8 01 90 5D |  if_ne	jmp	#LR__1138
07cf4     0C 4E 05 F1 | 	add	fp, #12
07cf8     A7 0A C2 FA | 	rdbyte	local01, fp
07cfc     0C 4E 85 F1 | 	sub	fp, #12
07d00     08 0A CE F7 | 	test	local01, #8 wz
07d04     94 01 90 AD |  if_e	jmp	#LR__1138
07d08     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
07d0c     54 4E 05 F1 | 	add	fp, #84
07d10     A7 EA 61 FC | 	wrlong	result1, fp
07d14     24 4E 85 F1 | 	sub	fp, #36
07d18     A7 00 02 FB | 	rdlong	arg01, fp
07d1c     0E 00 06 F1 | 	add	arg01, #14
07d20     00 EB 61 FC | 	wrlong	result1, arg01
07d24     A7 00 02 FB | 	rdlong	arg01, fp
07d28     16 00 06 F1 | 	add	arg01, #22
07d2c     24 4E 05 F1 | 	add	fp, #36
07d30     A7 02 02 FB | 	rdlong	arg02, fp
07d34     00 03 62 FC | 	wrlong	arg02, arg01
07d38     10 4E 85 F1 | 	sub	fp, #16
07d3c     A7 00 02 FB | 	rdlong	arg01, fp
07d40     14 4E 85 F1 | 	sub	fp, #20
07d44     A7 02 02 FB | 	rdlong	arg02, fp
07d48     30 4E 85 F1 | 	sub	fp, #48
07d4c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
07d50     48 4E 05 F1 | 	add	fp, #72
07d54     A7 EA 61 FC | 	wrlong	result1, fp
07d58     18 4E 85 F1 | 	sub	fp, #24
07d5c     A7 0A 02 FB | 	rdlong	local01, fp
07d60     0B 0A 06 F1 | 	add	local01, #11
07d64     05 41 48 FC | 	wrbyte	#32, local01
07d68     14 4E 05 F1 | 	add	fp, #20
07d6c     A7 00 02 FB | 	rdlong	arg01, fp
07d70     14 4E 85 F1 | 	sub	fp, #20
07d74     A7 02 02 FB | 	rdlong	arg02, fp
07d78     30 4E 85 F1 | 	sub	fp, #48
07d7c     00 04 06 F6 | 	mov	arg03, #0
07d80     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
07d84     30 4E 05 F1 | 	add	fp, #48
07d88     A7 00 02 FB | 	rdlong	arg01, fp
07d8c     1C 00 06 F1 | 	add	arg01, #28
07d90     00 01 68 FC | 	wrlong	#0, arg01
07d94     14 4E 05 F1 | 	add	fp, #20
07d98     A7 0A 02 FB | 	rdlong	local01, fp
07d9c     03 0A 06 F1 | 	add	local01, #3
07da0     05 03 48 FC | 	wrbyte	#1, local01
07da4     04 4E 05 F1 | 	add	fp, #4
07da8     A7 0A 0A FB | 	rdlong	local01, fp wz
07dac     48 4E 85 F1 | 	sub	fp, #72
07db0     E8 00 90 AD |  if_e	jmp	#LR__1138
07db4     44 4E 05 F1 | 	add	fp, #68
07db8     A7 0A 02 FB | 	rdlong	local01, fp
07dbc     30 0A 06 F1 | 	add	local01, #48
07dc0     05 0B 02 FB | 	rdlong	local01, local01
07dc4     14 4E 05 F1 | 	add	fp, #20
07dc8     A7 0A 62 FC | 	wrlong	local01, fp
07dcc     44 4E 85 F1 | 	sub	fp, #68
07dd0     A7 00 02 F6 | 	mov	arg01, fp
07dd4     34 4E 05 F1 | 	add	fp, #52
07dd8     A7 02 02 FB | 	rdlong	arg02, fp
07ddc     48 4E 85 F1 | 	sub	fp, #72
07de0     00 04 06 F6 | 	mov	arg03, #0
07de4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
07de8     10 4E 05 F1 | 	add	fp, #16
07dec     A7 EA 61 FC | 	wrlong	result1, fp
07df0     10 4E 85 F1 | 	sub	fp, #16
07df4     00 EA 0D F2 | 	cmp	result1, #0 wz
07df8     A0 00 90 5D |  if_ne	jmp	#LR__1138
07dfc     44 4E 05 F1 | 	add	fp, #68
07e00     A7 00 02 FB | 	rdlong	arg01, fp
07e04     14 4E 05 F1 | 	add	fp, #20
07e08     A7 02 02 FB | 	rdlong	arg02, fp
07e0c     58 4E 85 F1 | 	sub	fp, #88
07e10     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
07e14     10 4E 05 F1 | 	add	fp, #16
07e18     A7 EA 61 FC | 	wrlong	result1, fp
07e1c     34 4E 05 F1 | 	add	fp, #52
07e20     A7 06 02 FB | 	rdlong	arg04, fp
07e24     04 4E 05 F1 | 	add	fp, #4
07e28     A7 0A 02 FB | 	rdlong	local01, fp
07e2c     48 4E 85 F1 | 	sub	fp, #72
07e30     01 0A 86 F1 | 	sub	local01, #1
07e34     10 06 06 F1 | 	add	arg04, #16
07e38     03 0B 62 FC | 	wrlong	local01, arg04
07e3c     5C 00 90 FD | 	jmp	#LR__1138
07e40                 | LR__1135
07e40     10 4E 05 F1 | 	add	fp, #16
07e44     A7 06 0A FB | 	rdlong	arg04, fp wz
07e48     10 4E 85 F1 | 	sub	fp, #16
07e4c     4C 00 90 5D |  if_ne	jmp	#LR__1137
07e50     1A 4E 05 F1 | 	add	fp, #26
07e54     A7 06 C2 FA | 	rdbyte	arg04, fp
07e58     1A 4E 85 F1 | 	sub	fp, #26
07e5c     10 06 CE F7 | 	test	arg04, #16 wz
07e60     10 4E 05 51 |  if_ne	add	fp, #16
07e64     A7 08 68 5C |  if_ne	wrlong	#4, fp
07e68     10 4E 85 51 |  if_ne	sub	fp, #16
07e6c     2C 00 90 5D |  if_ne	jmp	#LR__1136
07e70     0C 4E 05 F1 | 	add	fp, #12
07e74     A7 06 C2 FA | 	rdbyte	arg04, fp
07e78     0C 4E 85 F1 | 	sub	fp, #12
07e7c     02 06 CE F7 | 	test	arg04, #2 wz
07e80     1A 4E 05 51 |  if_ne	add	fp, #26
07e84     A7 0A C2 5A |  if_ne	rdbyte	local01, fp
07e88     1A 4E 85 51 |  if_ne	sub	fp, #26
07e8c     01 0A CE 57 |  if_ne	test	local01, #1 wz
07e90     10 4E 05 51 |  if_ne	add	fp, #16
07e94     A7 0E 68 5C |  if_ne	wrlong	#7, fp
07e98     10 4E 85 51 |  if_ne	sub	fp, #16
07e9c                 | LR__1136
07e9c                 | LR__1137
07e9c                 | LR__1138
07e9c     10 4E 05 F1 | 	add	fp, #16
07ea0     A7 0A 0A FB | 	rdlong	local01, fp wz
07ea4     10 4E 85 F1 | 	sub	fp, #16
07ea8     60 00 90 5D |  if_ne	jmp	#LR__1139
07eac     0C 4E 05 F1 | 	add	fp, #12
07eb0     A7 0C C2 FA | 	rdbyte	local02, fp
07eb4     0C 4E 85 F1 | 	sub	fp, #12
07eb8     08 0C CE F7 | 	test	local02, #8 wz
07ebc     0C 4E 05 51 |  if_ne	add	fp, #12
07ec0     A7 0C C2 5A |  if_ne	rdbyte	local02, fp
07ec4     40 0C 46 55 |  if_ne	or	local02, #64
07ec8     A7 0C 42 5C |  if_ne	wrbyte	local02, fp
07ecc     0C 4E 85 51 |  if_ne	sub	fp, #12
07ed0     04 4E 05 F1 | 	add	fp, #4
07ed4     A7 0C 02 FB | 	rdlong	local02, fp
07ed8     40 4E 05 F1 | 	add	fp, #64
07edc     A7 0A 02 FB | 	rdlong	local01, fp
07ee0     30 0A 06 F1 | 	add	local01, #48
07ee4     05 0B 02 FB | 	rdlong	local01, local01
07ee8     20 0C 06 F1 | 	add	local02, #32
07eec     06 0B 62 FC | 	wrlong	local01, local02
07ef0     40 4E 85 F1 | 	sub	fp, #64
07ef4     A7 0C 02 FB | 	rdlong	local02, fp
07ef8     2C 4E 05 F1 | 	add	fp, #44
07efc     A7 0A 02 FB | 	rdlong	local01, fp
07f00     30 4E 85 F1 | 	sub	fp, #48
07f04     24 0C 06 F1 | 	add	local02, #36
07f08     06 0B 62 FC | 	wrlong	local01, local02
07f0c                 | LR__1139
07f0c     10 4E 05 F1 | 	add	fp, #16
07f10     A7 0C 0A FB | 	rdlong	local02, fp wz
07f14     10 4E 85 F1 | 	sub	fp, #16
07f18     F4 02 90 5D |  if_ne	jmp	#LR__1145
07f1c     04 4E 05 F1 | 	add	fp, #4
07f20     A7 0C 02 FB | 	rdlong	local02, fp
07f24     40 4E 05 F1 | 	add	fp, #64
07f28     A7 00 02 FB | 	rdlong	arg01, fp
07f2c     14 4E 85 F1 | 	sub	fp, #20
07f30     A7 02 02 FB | 	rdlong	arg02, fp
07f34     30 4E 85 F1 | 	sub	fp, #48
07f38     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
07f3c     08 0C 06 F1 | 	add	local02, #8
07f40     06 EB 61 FC | 	wrlong	result1, local02
07f44     04 4E 05 F1 | 	add	fp, #4
07f48     A7 0C 02 FB | 	rdlong	local02, fp
07f4c     2C 4E 05 F1 | 	add	fp, #44
07f50     A7 00 02 FB | 	rdlong	arg01, fp
07f54     1C 00 06 F1 | 	add	arg01, #28
07f58                 | ' {
07f58                 | ' 
07f58                 | ' 	return *((DWORD*)ptr);
07f58     00 EB 01 FB | 	rdlong	result1, arg01
07f5c     0C 0C 06 F1 | 	add	local02, #12
07f60     06 EB 61 FC | 	wrlong	result1, local02
07f64     2C 4E 85 F1 | 	sub	fp, #44
07f68     A7 0C 02 FB | 	rdlong	local02, fp
07f6c     40 4E 05 F1 | 	add	fp, #64
07f70     A7 0A 02 FB | 	rdlong	local01, fp
07f74     06 0B 62 FC | 	wrlong	local01, local02
07f78     40 4E 85 F1 | 	sub	fp, #64
07f7c     A7 0C 02 FB | 	rdlong	local02, fp
07f80     40 4E 05 F1 | 	add	fp, #64
07f84     A7 0A 02 FB | 	rdlong	local01, fp
07f88     06 0A 06 F1 | 	add	local01, #6
07f8c     05 0B E2 FA | 	rdword	local01, local01
07f90     04 0C 06 F1 | 	add	local02, #4
07f94     06 0B 52 FC | 	wrword	local01, local02
07f98     40 4E 85 F1 | 	sub	fp, #64
07f9c     A7 0C 02 FB | 	rdlong	local02, fp
07fa0     08 4E 05 F1 | 	add	fp, #8
07fa4     A7 0A C2 FA | 	rdbyte	local01, fp
07fa8     10 0C 06 F1 | 	add	local02, #16
07fac     06 0B 42 FC | 	wrbyte	local01, local02
07fb0     08 4E 85 F1 | 	sub	fp, #8
07fb4     A7 0C 02 FB | 	rdlong	local02, fp
07fb8     11 0C 06 F1 | 	add	local02, #17
07fbc     06 01 48 FC | 	wrbyte	#0, local02
07fc0     A7 0C 02 FB | 	rdlong	local02, fp
07fc4     1C 0C 06 F1 | 	add	local02, #28
07fc8     06 01 68 FC | 	wrlong	#0, local02
07fcc     A7 0C 02 FB | 	rdlong	local02, fp
07fd0     14 0C 06 F1 | 	add	local02, #20
07fd4     06 01 68 FC | 	wrlong	#0, local02
07fd8     A7 00 02 FB | 	rdlong	arg01, fp
07fdc     04 4E 85 F1 | 	sub	fp, #4
07fe0     28 00 06 F1 | 	add	arg01, #40
07fe4     00 02 06 F6 | 	mov	arg02, #0
07fe8     09 04 C6 F9 | 	decod	arg03, #9
07fec     98 00 A0 FD | 	call	#\builtin_bytefill_
07ff0     0C 4E 05 F1 | 	add	fp, #12
07ff4     A7 0C C2 FA | 	rdbyte	local02, fp
07ff8     0C 4E 85 F1 | 	sub	fp, #12
07ffc     20 0C CE F7 | 	test	local02, #32 wz
08000     0C 02 90 AD |  if_e	jmp	#LR__1144
08004     04 4E 05 F1 | 	add	fp, #4
08008     A7 0A 02 FB | 	rdlong	local01, fp
0800c     04 4E 85 F1 | 	sub	fp, #4
08010     0C 0A 06 F1 | 	add	local01, #12
08014     05 0D 02 FB | 	rdlong	local02, local01
08018     01 0C 16 F2 | 	cmp	local02, #1 wc
0801c     F0 01 90 CD |  if_b	jmp	#LR__1144
08020     04 4E 05 F1 | 	add	fp, #4
08024     A7 0A 02 FB | 	rdlong	local01, fp
08028     05 0D 02 F6 | 	mov	local02, local01
0802c     0C 0A 06 F1 | 	add	local01, #12
08030     05 0B 02 FB | 	rdlong	local01, local01
08034     14 0C 06 F1 | 	add	local02, #20
08038     06 0B 62 FC | 	wrlong	local01, local02
0803c     40 4E 05 F1 | 	add	fp, #64
08040     A7 0C 02 FB | 	rdlong	local02, fp
08044     0A 0C 06 F1 | 	add	local02, #10
08048     06 0D E2 FA | 	rdword	local02, local02
0804c     09 0C 66 F0 | 	shl	local02, #9
08050     08 4E 05 F1 | 	add	fp, #8
08054     A7 0C 62 FC | 	wrlong	local02, fp
08058     48 4E 85 F1 | 	sub	fp, #72
0805c     A7 0C 02 FB | 	rdlong	local02, fp
08060     08 0C 06 F1 | 	add	local02, #8
08064     06 0B 02 FB | 	rdlong	local01, local02
08068     4C 4E 05 F1 | 	add	fp, #76
0806c     A7 0A 62 FC | 	wrlong	local01, fp
08070                 | ' 				fp->fptr = fp->obj.objsize;
08070                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
08070                 | ' 				clst = fp->obj.sclust;
08070                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
08070     4C 4E 85 F1 | 	sub	fp, #76
08074     A7 0C 02 FB | 	rdlong	local02, fp
08078     0C 0C 06 F1 | 	add	local02, #12
0807c     06 0B 02 FB | 	rdlong	local01, local02
08080     58 4E 05 F1 | 	add	fp, #88
08084     A7 0A 62 FC | 	wrlong	local01, fp
08088     5C 4E 85 F1 | 	sub	fp, #92
0808c                 | LR__1140
0808c     10 4E 05 F1 | 	add	fp, #16
08090     A7 0C 0A FB | 	rdlong	local02, fp wz
08094     10 4E 85 F1 | 	sub	fp, #16
08098     94 00 90 5D |  if_ne	jmp	#LR__1141
0809c     5C 4E 05 F1 | 	add	fp, #92
080a0     A7 0C 02 FB | 	rdlong	local02, fp
080a4     10 4E 85 F1 | 	sub	fp, #16
080a8     A7 0A 02 FB | 	rdlong	local01, fp
080ac     4C 4E 85 F1 | 	sub	fp, #76
080b0     05 0D 1A F2 | 	cmp	local02, local01 wcz
080b4     78 00 90 ED |  if_be	jmp	#LR__1141
080b8     04 4E 05 F1 | 	add	fp, #4
080bc     A7 00 02 FB | 	rdlong	arg01, fp
080c0     4C 4E 05 F1 | 	add	fp, #76
080c4     A7 02 02 FB | 	rdlong	arg02, fp
080c8     50 4E 85 F1 | 	sub	fp, #80
080cc     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
080d0     50 4E 05 F1 | 	add	fp, #80
080d4     A7 EA 61 FC | 	wrlong	result1, fp
080d8     50 4E 85 F1 | 	sub	fp, #80
080dc     02 EA 15 F2 | 	cmp	result1, #2 wc
080e0     10 4E 05 C1 |  if_b	add	fp, #16
080e4     A7 04 68 CC |  if_b	wrlong	#2, fp
080e8     10 4E 85 C1 |  if_b	sub	fp, #16
080ec     50 4E 05 F1 | 	add	fp, #80
080f0     A7 0C 02 FB | 	rdlong	local02, fp
080f4     50 4E 85 F1 | 	sub	fp, #80
080f8     FF FF 7F FF 
080fc     FF 0D 0E F2 | 	cmp	local02, ##-1 wz
08100     10 4E 05 A1 |  if_e	add	fp, #16
08104     A7 02 68 AC |  if_e	wrlong	#1, fp
08108     10 4E 85 A1 |  if_e	sub	fp, #16
0810c     5C 4E 05 F1 | 	add	fp, #92
08110     A7 0C 02 FB | 	rdlong	local02, fp
08114     10 4E 85 F1 | 	sub	fp, #16
08118     A7 0A 02 FB | 	rdlong	local01, fp
0811c     05 0D 82 F1 | 	sub	local02, local01
08120     10 4E 05 F1 | 	add	fp, #16
08124     A7 0C 62 FC | 	wrlong	local02, fp
08128     5C 4E 85 F1 | 	sub	fp, #92
0812c     5C FF 9F FD | 	jmp	#LR__1140
08130                 | LR__1141
08130     04 4E 05 F1 | 	add	fp, #4
08134     A7 0C 02 FB | 	rdlong	local02, fp
08138     4C 4E 05 F1 | 	add	fp, #76
0813c     A7 0A 02 FB | 	rdlong	local01, fp
08140     18 0C 06 F1 | 	add	local02, #24
08144     06 0B 62 FC | 	wrlong	local01, local02
08148     40 4E 85 F1 | 	sub	fp, #64
0814c     A7 0C 0A FB | 	rdlong	local02, fp wz
08150     10 4E 85 F1 | 	sub	fp, #16
08154     B8 00 90 5D |  if_ne	jmp	#LR__1143
08158     5C 4E 05 F1 | 	add	fp, #92
0815c     A7 0A 02 FB | 	rdlong	local01, fp
08160     5C 4E 85 F1 | 	sub	fp, #92
08164     FF 0B CE F7 | 	test	local01, #511 wz
08168     A4 00 90 AD |  if_e	jmp	#LR__1143
0816c     44 4E 05 F1 | 	add	fp, #68
08170     A7 00 02 FB | 	rdlong	arg01, fp
08174     0C 4E 05 F1 | 	add	fp, #12
08178     A7 02 02 FB | 	rdlong	arg02, fp
0817c     50 4E 85 F1 | 	sub	fp, #80
08180     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
08184     58 4E 05 F1 | 	add	fp, #88
08188     A7 EA 61 FC | 	wrlong	result1, fp
0818c     00 EA 4D F2 | 	cmps	result1, #0 wz
08190     58 4E 85 F1 | 	sub	fp, #88
08194     10 4E 05 A1 |  if_e	add	fp, #16
08198     A7 04 68 AC |  if_e	wrlong	#2, fp
0819c     10 4E 85 A1 |  if_e	sub	fp, #16
081a0     6C 00 90 AD |  if_e	jmp	#LR__1142
081a4     04 4E 05 F1 | 	add	fp, #4
081a8     A7 0C 02 FB | 	rdlong	local02, fp
081ac     54 4E 05 F1 | 	add	fp, #84
081b0     A7 0A 02 FB | 	rdlong	local01, fp
081b4     04 4E 05 F1 | 	add	fp, #4
081b8     A7 06 02 FB | 	rdlong	arg04, fp
081bc     09 06 46 F0 | 	shr	arg04, #9
081c0     03 0B 02 F1 | 	add	local01, arg04
081c4     1C 0C 06 F1 | 	add	local02, #28
081c8     06 0B 62 FC | 	wrlong	local01, local02
081cc     18 4E 85 F1 | 	sub	fp, #24
081d0     A7 0C 02 FB | 	rdlong	local02, fp
081d4     01 0C 06 F1 | 	add	local02, #1
081d8     06 01 C2 FA | 	rdbyte	arg01, local02
081dc     40 4E 85 F1 | 	sub	fp, #64
081e0     A7 0C 02 FB | 	rdlong	local02, fp
081e4     06 03 02 F6 | 	mov	arg02, local02
081e8     28 02 06 F1 | 	add	arg02, #40
081ec     04 4E 85 F1 | 	sub	fp, #4
081f0     1C 0C 06 F1 | 	add	local02, #28
081f4     06 05 02 FB | 	rdlong	arg03, local02
081f8     01 06 06 F6 | 	mov	arg04, #1
081fc     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
08200     00 EA 0D F2 | 	cmp	result1, #0 wz
08204     10 4E 05 51 |  if_ne	add	fp, #16
08208     A7 02 68 5C |  if_ne	wrlong	#1, fp
0820c     10 4E 85 51 |  if_ne	sub	fp, #16
08210                 | LR__1142
08210                 | LR__1143
08210                 | LR__1144
08210                 | LR__1145
08210                 | LR__1146
08210     10 4E 05 F1 | 	add	fp, #16
08214     A7 0C 0A FB | 	rdlong	local02, fp wz
08218     10 4E 85 F1 | 	sub	fp, #16
0821c     04 4E 05 51 |  if_ne	add	fp, #4
08220     A7 0C 02 5B |  if_ne	rdlong	local02, fp
08224     04 4E 85 51 |  if_ne	sub	fp, #4
08228     06 01 68 5C |  if_ne	wrlong	#0, local02
0822c                 | ' 
0822c                 | ' 	return res ;
0822c     10 4E 05 F1 | 	add	fp, #16
08230     A7 EA 01 FB | 	rdlong	result1, fp
08234     10 4E 85 F1 | 	sub	fp, #16
08238                 | LR__1147
08238     A7 F0 03 F6 | 	mov	ptra, fp
0823c     B2 00 A0 FD | 	call	#popregs_
08240                 | _fatfs_cc_f_open_ret
08240     2D 00 64 FD | 	ret
08244                 | 
08244                 | _fatfs_cc_f_read
08244     0E 4A 05 F6 | 	mov	COUNT_, #14
08248     A8 00 A0 FD | 	call	#pushregs_
0824c     38 F0 07 F1 | 	add	ptra, #56
08250     04 4E 05 F1 | 	add	fp, #4
08254     A7 00 62 FC | 	wrlong	arg01, fp
08258     04 4E 05 F1 | 	add	fp, #4
0825c     A7 02 62 FC | 	wrlong	arg02, fp
08260     04 4E 05 F1 | 	add	fp, #4
08264     A7 04 62 FC | 	wrlong	arg03, fp
08268     04 4E 05 F1 | 	add	fp, #4
0826c     A7 06 62 FC | 	wrlong	arg04, fp
08270     08 4E 85 F1 | 	sub	fp, #8
08274     A7 EA 01 FB | 	rdlong	result1, fp
08278     2C 4E 05 F1 | 	add	fp, #44
0827c     A7 EA 61 FC | 	wrlong	result1, fp
08280     24 4E 85 F1 | 	sub	fp, #36
08284     A7 EA 01 FB | 	rdlong	result1, fp
08288     F5 00 68 FC | 	wrlong	#0, result1
0828c     0C 4E 85 F1 | 	sub	fp, #12
08290     A7 00 02 FB | 	rdlong	arg01, fp
08294     14 4E 05 F1 | 	add	fp, #20
08298     A7 02 02 F6 | 	mov	arg02, fp
0829c     18 4E 85 F1 | 	sub	fp, #24
082a0     24 F7 BF FD | 	call	#_fatfs_cc_validate
082a4     14 4E 05 F1 | 	add	fp, #20
082a8     A7 EA 61 FC | 	wrlong	result1, fp
082ac     00 EA 4D F2 | 	cmps	result1, #0 wz
082b0     14 4E 85 F1 | 	sub	fp, #20
082b4     20 00 90 5D |  if_ne	jmp	#LR__1150
082b8     04 4E 05 F1 | 	add	fp, #4
082bc     A7 02 02 FB | 	rdlong	arg02, fp
082c0     11 02 06 F1 | 	add	arg02, #17
082c4     01 03 CA FA | 	rdbyte	arg02, arg02 wz
082c8     10 4E 05 F1 | 	add	fp, #16
082cc     A7 02 62 FC | 	wrlong	arg02, fp
082d0     14 4E 85 F1 | 	sub	fp, #20
082d4     10 00 90 AD |  if_e	jmp	#LR__1151
082d8                 | LR__1150
082d8     14 4E 05 F1 | 	add	fp, #20
082dc     A7 EA 01 FB | 	rdlong	result1, fp
082e0     14 4E 85 F1 | 	sub	fp, #20
082e4     EC 05 90 FD | 	jmp	#LR__1170
082e8                 | LR__1151
082e8     04 4E 05 F1 | 	add	fp, #4
082ec     A7 06 02 FB | 	rdlong	arg04, fp
082f0     04 4E 85 F1 | 	sub	fp, #4
082f4     10 06 06 F1 | 	add	arg04, #16
082f8     03 07 C2 FA | 	rdbyte	arg04, arg04
082fc     01 06 CE F7 | 	test	arg04, #1 wz
08300     07 EA 05 A6 |  if_e	mov	result1, #7
08304     CC 05 90 AD |  if_e	jmp	#LR__1170
08308     04 4E 05 F1 | 	add	fp, #4
0830c     A7 0A 02 FB | 	rdlong	local01, fp
08310     05 0D 02 F6 | 	mov	local02, local01
08314     0C 0C 06 F1 | 	add	local02, #12
08318     06 0F 02 FB | 	rdlong	local03, local02
0831c     14 0A 06 F1 | 	add	local01, #20
08320     05 0B 02 FB | 	rdlong	local01, local01
08324     05 0F 82 F1 | 	sub	local03, local01
08328     20 4E 05 F1 | 	add	fp, #32
0832c     A7 0E 62 FC | 	wrlong	local03, fp
08330     18 4E 85 F1 | 	sub	fp, #24
08334     A7 10 02 FB | 	rdlong	local04, fp
08338     0C 4E 85 F1 | 	sub	fp, #12
0833c     07 11 1A F2 | 	cmp	local04, local03 wcz
08340     24 4E 05 11 |  if_a	add	fp, #36
08344     A7 10 02 1B |  if_a	rdlong	local04, fp
08348     18 4E 85 11 |  if_a	sub	fp, #24
0834c     A7 10 62 1C |  if_a	wrlong	local04, fp
08350     0C 4E 85 11 |  if_a	sub	fp, #12
08354                 | ' 
08354                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
08354                 | LR__1152
08354     0C 4E 05 F1 | 	add	fp, #12
08358     A7 0C 02 FB | 	rdlong	local02, fp
0835c     0C 4E 85 F1 | 	sub	fp, #12
08360     06 11 02 F6 | 	mov	local04, local02
08364     01 10 16 F2 | 	cmp	local04, #1 wc
08368     64 05 90 CD |  if_b	jmp	#LR__1169
0836c     04 4E 05 F1 | 	add	fp, #4
08370     A7 0E 02 FB | 	rdlong	local03, fp
08374     04 4E 85 F1 | 	sub	fp, #4
08378     14 0E 06 F1 | 	add	local03, #20
0837c     07 0F 02 FB | 	rdlong	local03, local03
08380     FF 0F CE F7 | 	test	local03, #511 wz
08384     3C 04 90 5D |  if_ne	jmp	#LR__1167
08388     04 4E 05 F1 | 	add	fp, #4
0838c     A7 0A 02 FB | 	rdlong	local01, fp
08390     14 0A 06 F1 | 	add	local01, #20
08394     05 0F 02 FB | 	rdlong	local03, local01
08398     09 0E 46 F0 | 	shr	local03, #9
0839c     14 4E 05 F1 | 	add	fp, #20
083a0     A7 12 02 FB | 	rdlong	local05, fp
083a4     09 15 02 F6 | 	mov	local06, local05
083a8     0A 14 06 F1 | 	add	local06, #10
083ac     0A 17 E2 FA | 	rdword	local07, local06
083b0     0A 14 86 F1 | 	sub	local06, #10
083b4     0B 19 32 F9 | 	getword	local08, local07, #0
083b8     01 18 86 F1 | 	sub	local08, #1
083bc     0C 0F 0A F5 | 	and	local03, local08 wz
083c0     18 4E 05 F1 | 	add	fp, #24
083c4     A7 0E 62 FC | 	wrlong	local03, fp
083c8     30 4E 85 F1 | 	sub	fp, #48
083cc     E0 00 90 5D |  if_ne	jmp	#LR__1157
083d0     04 4E 05 F1 | 	add	fp, #4
083d4     A7 0E 02 FB | 	rdlong	local03, fp
083d8     04 4E 85 F1 | 	sub	fp, #4
083dc     14 0E 06 F1 | 	add	local03, #20
083e0     07 0F 0A FB | 	rdlong	local03, local03 wz
083e4     20 00 90 5D |  if_ne	jmp	#LR__1153
083e8     04 4E 05 F1 | 	add	fp, #4
083ec     A7 0E 02 FB | 	rdlong	local03, fp
083f0     08 0E 06 F1 | 	add	local03, #8
083f4     07 0F 02 FB | 	rdlong	local03, local03
083f8     18 4E 05 F1 | 	add	fp, #24
083fc     A7 0E 62 FC | 	wrlong	local03, fp
08400     1C 4E 85 F1 | 	sub	fp, #28
08404     28 00 90 FD | 	jmp	#LR__1154
08408                 | LR__1153
08408     04 4E 05 F1 | 	add	fp, #4
0840c     A7 18 02 FB | 	rdlong	local08, fp
08410     0C 01 02 F6 | 	mov	arg01, local08
08414     04 4E 85 F1 | 	sub	fp, #4
08418     18 18 06 F1 | 	add	local08, #24
0841c     0C 03 02 FB | 	rdlong	arg02, local08
08420     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
08424     1C 4E 05 F1 | 	add	fp, #28
08428     A7 EA 61 FC | 	wrlong	result1, fp
0842c     1C 4E 85 F1 | 	sub	fp, #28
08430                 | LR__1154
08430     1C 4E 05 F1 | 	add	fp, #28
08434     A7 0E 02 FB | 	rdlong	local03, fp
08438     1C 4E 85 F1 | 	sub	fp, #28
0843c     02 0E 16 F2 | 	cmp	local03, #2 wc
08440     1C 00 90 3D |  if_ae	jmp	#LR__1155
08444     04 4E 05 F1 | 	add	fp, #4
08448     A7 0E 02 FB | 	rdlong	local03, fp
0844c     04 4E 85 F1 | 	sub	fp, #4
08450     11 0E 06 F1 | 	add	local03, #17
08454     07 05 48 FC | 	wrbyte	#2, local03
08458     02 EA 05 F6 | 	mov	result1, #2
0845c     74 04 90 FD | 	jmp	#LR__1170
08460                 | LR__1155
08460     1C 4E 05 F1 | 	add	fp, #28
08464     A7 0E 02 FB | 	rdlong	local03, fp
08468     1C 4E 85 F1 | 	sub	fp, #28
0846c     FF FF 7F FF 
08470     FF 0F 0E F2 | 	cmp	local03, ##-1 wz
08474     1C 00 90 5D |  if_ne	jmp	#LR__1156
08478     04 4E 05 F1 | 	add	fp, #4
0847c     A7 0E 02 FB | 	rdlong	local03, fp
08480     04 4E 85 F1 | 	sub	fp, #4
08484     11 0E 06 F1 | 	add	local03, #17
08488     07 03 48 FC | 	wrbyte	#1, local03
0848c     01 EA 05 F6 | 	mov	result1, #1
08490     40 04 90 FD | 	jmp	#LR__1170
08494                 | LR__1156
08494     04 4E 05 F1 | 	add	fp, #4
08498     A7 0E 02 FB | 	rdlong	local03, fp
0849c     18 4E 05 F1 | 	add	fp, #24
084a0     A7 18 02 FB | 	rdlong	local08, fp
084a4     1C 4E 85 F1 | 	sub	fp, #28
084a8     18 0E 06 F1 | 	add	local03, #24
084ac     07 19 62 FC | 	wrlong	local08, local03
084b0                 | LR__1157
084b0     18 4E 05 F1 | 	add	fp, #24
084b4     A7 00 02 FB | 	rdlong	arg01, fp
084b8     14 4E 85 F1 | 	sub	fp, #20
084bc     A7 0E 02 FB | 	rdlong	local03, fp
084c0     04 4E 85 F1 | 	sub	fp, #4
084c4     18 0E 06 F1 | 	add	local03, #24
084c8     07 03 02 FB | 	rdlong	arg02, local03
084cc     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
084d0     20 4E 05 F1 | 	add	fp, #32
084d4     A7 EA 61 FC | 	wrlong	result1, fp
084d8     20 4E 85 F1 | 	sub	fp, #32
084dc     00 EA 0D F2 | 	cmp	result1, #0 wz
084e0     1C 00 90 5D |  if_ne	jmp	#LR__1158
084e4     04 4E 05 F1 | 	add	fp, #4
084e8     A7 0E 02 FB | 	rdlong	local03, fp
084ec     04 4E 85 F1 | 	sub	fp, #4
084f0     11 0E 06 F1 | 	add	local03, #17
084f4     07 05 48 FC | 	wrbyte	#2, local03
084f8     02 EA 05 F6 | 	mov	result1, #2
084fc     D4 03 90 FD | 	jmp	#LR__1170
08500                 | LR__1158
08500     20 4E 05 F1 | 	add	fp, #32
08504     A7 0E 02 FB | 	rdlong	local03, fp
08508     10 4E 05 F1 | 	add	fp, #16
0850c     A7 18 02 FB | 	rdlong	local08, fp
08510     0C 0F 02 F1 | 	add	local03, local08
08514     10 4E 85 F1 | 	sub	fp, #16
08518     A7 0E 62 FC | 	wrlong	local03, fp
0851c     14 4E 85 F1 | 	sub	fp, #20
08520     A7 0E 02 FB | 	rdlong	local03, fp
08524     09 0E 46 F0 | 	shr	local03, #9
08528     20 4E 05 F1 | 	add	fp, #32
0852c     A7 0E 62 FC | 	wrlong	local03, fp
08530     2C 4E 85 F1 | 	sub	fp, #44
08534     01 0E 16 F2 | 	cmp	local03, #1 wc
08538     5C 01 90 CD |  if_b	jmp	#LR__1162
0853c     30 4E 05 F1 | 	add	fp, #48
08540     A7 0E 02 FB | 	rdlong	local03, fp
08544     04 4E 85 F1 | 	sub	fp, #4
08548     A7 18 02 FB | 	rdlong	local08, fp
0854c     0C 0F 02 F1 | 	add	local03, local08
08550     14 4E 85 F1 | 	sub	fp, #20
08554     A7 18 02 FB | 	rdlong	local08, fp
08558     18 4E 85 F1 | 	sub	fp, #24
0855c     0A 18 06 F1 | 	add	local08, #10
08560     0C 19 E2 FA | 	rdword	local08, local08
08564     0C 0F 1A F2 | 	cmp	local03, local08 wcz
08568     28 00 90 ED |  if_be	jmp	#LR__1159
0856c     18 4E 05 F1 | 	add	fp, #24
08570     A7 0A 02 FB | 	rdlong	local01, fp
08574     0A 0A 06 F1 | 	add	local01, #10
08578     05 0F E2 FA | 	rdword	local03, local01
0857c     18 4E 05 F1 | 	add	fp, #24
08580     A7 18 02 FB | 	rdlong	local08, fp
08584     0C 0F 82 F1 | 	sub	local03, local08
08588     04 4E 85 F1 | 	sub	fp, #4
0858c     A7 0E 62 FC | 	wrlong	local03, fp
08590     2C 4E 85 F1 | 	sub	fp, #44
08594                 | LR__1159
08594     18 4E 05 F1 | 	add	fp, #24
08598     A7 0A 02 FB | 	rdlong	local01, fp
0859c     01 0A 06 F1 | 	add	local01, #1
085a0     05 01 C2 FA | 	rdbyte	arg01, local01
085a4     1C 4E 05 F1 | 	add	fp, #28
085a8     A7 02 02 FB | 	rdlong	arg02, fp
085ac     14 4E 85 F1 | 	sub	fp, #20
085b0     A7 04 02 FB | 	rdlong	arg03, fp
085b4     0C 4E 05 F1 | 	add	fp, #12
085b8     A7 06 02 FB | 	rdlong	arg04, fp
085bc     2C 4E 85 F1 | 	sub	fp, #44
085c0     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
085c4     00 EA 0D F2 | 	cmp	result1, #0 wz
085c8     1C 00 90 AD |  if_e	jmp	#LR__1160
085cc     04 4E 05 F1 | 	add	fp, #4
085d0     A7 0E 02 FB | 	rdlong	local03, fp
085d4     04 4E 85 F1 | 	sub	fp, #4
085d8     11 0E 06 F1 | 	add	local03, #17
085dc     07 03 48 FC | 	wrbyte	#1, local03
085e0     01 EA 05 F6 | 	mov	result1, #1
085e4     EC 02 90 FD | 	jmp	#LR__1170
085e8                 | LR__1160
085e8     04 4E 05 F1 | 	add	fp, #4
085ec     A7 0A 02 FB | 	rdlong	local01, fp
085f0     04 4E 85 F1 | 	sub	fp, #4
085f4     10 0A 06 F1 | 	add	local01, #16
085f8     05 0F C2 FA | 	rdbyte	local03, local01
085fc     80 0E CE F7 | 	test	local03, #128 wz
08600     78 00 90 AD |  if_e	jmp	#LR__1161
08604     04 4E 05 F1 | 	add	fp, #4
08608     A7 18 02 FB | 	rdlong	local08, fp
0860c     1C 18 06 F1 | 	add	local08, #28
08610     0C 19 02 FB | 	rdlong	local08, local08
08614     1C 4E 05 F1 | 	add	fp, #28
08618     A7 1A 02 FB | 	rdlong	local09, fp
0861c     0D 19 82 F1 | 	sub	local08, local09
08620     0C 4E 05 F1 | 	add	fp, #12
08624     A7 1C 02 FB | 	rdlong	local10, fp
08628     2C 4E 85 F1 | 	sub	fp, #44
0862c     0E 1F 02 F6 | 	mov	local11, local10
08630     0F 19 12 F2 | 	cmp	local08, local11 wc
08634     44 00 90 3D |  if_ae	jmp	#LR__1161
08638     34 4E 05 F1 | 	add	fp, #52
0863c     A7 00 02 FB | 	rdlong	arg01, fp
08640     30 4E 85 F1 | 	sub	fp, #48
08644     A7 02 02 FB | 	rdlong	arg02, fp
08648     01 1F 02 F6 | 	mov	local11, arg02
0864c     1C 1E 06 F1 | 	add	local11, #28
08650     0F 1B 02 FB | 	rdlong	local09, local11
08654     1C 4E 05 F1 | 	add	fp, #28
08658     A7 12 02 FB | 	rdlong	local05, fp
0865c     09 1B 82 F1 | 	sub	local09, local05
08660     09 1A 66 F0 | 	shl	local09, #9
08664     0D 1F 02 F6 | 	mov	local11, local09
08668     0D 01 02 F1 | 	add	arg01, local09
0866c     20 4E 85 F1 | 	sub	fp, #32
08670     28 02 06 F1 | 	add	arg02, #40
08674     09 04 C6 F9 | 	decod	arg03, #9
08678     6C 86 BF FD | 	call	#__system____builtin_memmove
0867c                 | LR__1161
0867c     2C 4E 05 F1 | 	add	fp, #44
08680     A7 0E 02 FB | 	rdlong	local03, fp
08684     09 0E 66 F0 | 	shl	local03, #9
08688     04 4E 85 F1 | 	sub	fp, #4
0868c     A7 0E 62 FC | 	wrlong	local03, fp
08690     28 4E 85 F1 | 	sub	fp, #40
08694                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
08694                 | ' 				}
08694                 | ' 
08694                 | ' 
08694                 | ' 				rcnt =  ((UINT) 512 )  * cc;
08694                 | ' 				continue;
08694     B4 01 90 FD | 	jmp	#LR__1168
08698                 | LR__1162
08698     04 4E 05 F1 | 	add	fp, #4
0869c     A7 0E 02 FB | 	rdlong	local03, fp
086a0     1C 0E 06 F1 | 	add	local03, #28
086a4     07 0F 02 FB | 	rdlong	local03, local03
086a8     1C 4E 05 F1 | 	add	fp, #28
086ac     A7 0A 02 FB | 	rdlong	local01, fp
086b0     20 4E 85 F1 | 	sub	fp, #32
086b4     05 0F 0A F2 | 	cmp	local03, local01 wz
086b8     EC 00 90 AD |  if_e	jmp	#LR__1166
086bc     04 4E 05 F1 | 	add	fp, #4
086c0     A7 0A 02 FB | 	rdlong	local01, fp
086c4     04 4E 85 F1 | 	sub	fp, #4
086c8     10 0A 06 F1 | 	add	local01, #16
086cc     05 0F C2 FA | 	rdbyte	local03, local01
086d0     80 0E CE F7 | 	test	local03, #128 wz
086d4     7C 00 90 AD |  if_e	jmp	#LR__1164
086d8     18 4E 05 F1 | 	add	fp, #24
086dc     A7 0A 02 FB | 	rdlong	local01, fp
086e0     01 0A 06 F1 | 	add	local01, #1
086e4     05 01 C2 FA | 	rdbyte	arg01, local01
086e8     14 4E 85 F1 | 	sub	fp, #20
086ec     A7 0E 02 FB | 	rdlong	local03, fp
086f0     07 03 02 F6 | 	mov	arg02, local03
086f4     28 02 06 F1 | 	add	arg02, #40
086f8     04 4E 85 F1 | 	sub	fp, #4
086fc     1C 0E 06 F1 | 	add	local03, #28
08700     07 05 02 FB | 	rdlong	arg03, local03
08704     01 06 06 F6 | 	mov	arg04, #1
08708     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
0870c     00 EA 0D F2 | 	cmp	result1, #0 wz
08710     1C 00 90 AD |  if_e	jmp	#LR__1163
08714     04 4E 05 F1 | 	add	fp, #4
08718     A7 0E 02 FB | 	rdlong	local03, fp
0871c     04 4E 85 F1 | 	sub	fp, #4
08720     11 0E 06 F1 | 	add	local03, #17
08724     07 03 48 FC | 	wrbyte	#1, local03
08728     01 EA 05 F6 | 	mov	result1, #1
0872c     A4 01 90 FD | 	jmp	#LR__1170
08730                 | LR__1163
08730     04 4E 05 F1 | 	add	fp, #4
08734     A7 1E 02 FB | 	rdlong	local11, fp
08738     0F 0F 02 F6 | 	mov	local03, local11
0873c     04 4E 85 F1 | 	sub	fp, #4
08740     10 1E 06 F1 | 	add	local11, #16
08744     0F 1F C2 FA | 	rdbyte	local11, local11
08748     7F 1E 06 F5 | 	and	local11, #127
0874c     10 0E 06 F1 | 	add	local03, #16
08750     07 1F 42 FC | 	wrbyte	local11, local03
08754                 | LR__1164
08754     18 4E 05 F1 | 	add	fp, #24
08758     A7 0A 02 FB | 	rdlong	local01, fp
0875c     01 0A 06 F1 | 	add	local01, #1
08760     05 01 C2 FA | 	rdbyte	arg01, local01
08764     14 4E 85 F1 | 	sub	fp, #20
08768     A7 02 02 FB | 	rdlong	arg02, fp
0876c     28 02 06 F1 | 	add	arg02, #40
08770     1C 4E 05 F1 | 	add	fp, #28
08774     A7 04 02 FB | 	rdlong	arg03, fp
08778     20 4E 85 F1 | 	sub	fp, #32
0877c     01 06 06 F6 | 	mov	arg04, #1
08780     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
08784     00 EA 0D F2 | 	cmp	result1, #0 wz
08788     1C 00 90 AD |  if_e	jmp	#LR__1165
0878c     04 4E 05 F1 | 	add	fp, #4
08790     A7 0E 02 FB | 	rdlong	local03, fp
08794     04 4E 85 F1 | 	sub	fp, #4
08798     11 0E 06 F1 | 	add	local03, #17
0879c     07 03 48 FC | 	wrbyte	#1, local03
087a0     01 EA 05 F6 | 	mov	result1, #1
087a4     2C 01 90 FD | 	jmp	#LR__1170
087a8                 | LR__1165
087a8                 | LR__1166
087a8     04 4E 05 F1 | 	add	fp, #4
087ac     A7 0E 02 FB | 	rdlong	local03, fp
087b0     1C 4E 05 F1 | 	add	fp, #28
087b4     A7 1E 02 FB | 	rdlong	local11, fp
087b8     20 4E 85 F1 | 	sub	fp, #32
087bc     1C 0E 06 F1 | 	add	local03, #28
087c0     07 1F 62 FC | 	wrlong	local11, local03
087c4                 | LR__1167
087c4     04 4E 05 F1 | 	add	fp, #4
087c8     A7 0A 02 FB | 	rdlong	local01, fp
087cc     14 0A 06 F1 | 	add	local01, #20
087d0     05 1F 02 FB | 	rdlong	local11, local01
087d4     FF 1F 06 F5 | 	and	local11, #511
087d8     09 0E C6 F9 | 	decod	local03, #9
087dc     0F 0F 82 F1 | 	sub	local03, local11
087e0     24 4E 05 F1 | 	add	fp, #36
087e4     A7 0E 62 FC | 	wrlong	local03, fp
087e8     1C 4E 85 F1 | 	sub	fp, #28
087ec     A7 1E 02 FB | 	rdlong	local11, fp
087f0     0C 4E 85 F1 | 	sub	fp, #12
087f4     0F 0F 1A F2 | 	cmp	local03, local11 wcz
087f8     0C 4E 05 11 |  if_a	add	fp, #12
087fc     A7 0E 02 1B |  if_a	rdlong	local03, fp
08800     1C 4E 05 11 |  if_a	add	fp, #28
08804     A7 0E 62 1C |  if_a	wrlong	local03, fp
08808     28 4E 85 11 |  if_a	sub	fp, #40
0880c     34 4E 05 F1 | 	add	fp, #52
08810     A7 00 02 FB | 	rdlong	arg01, fp
08814     30 4E 85 F1 | 	sub	fp, #48
08818     A7 14 02 FB | 	rdlong	local06, fp
0881c     0A 03 02 F6 | 	mov	arg02, local06
08820     28 02 06 F1 | 	add	arg02, #40
08824     14 14 06 F1 | 	add	local06, #20
08828     0A 1F 02 FB | 	rdlong	local11, local06
0882c     0F 1B 02 F6 | 	mov	local09, local11
08830     0D 1D 02 F6 | 	mov	local10, local09
08834     FF 1D 06 F5 | 	and	local10, #511
08838     0E 03 02 F1 | 	add	arg02, local10
0883c     24 4E 05 F1 | 	add	fp, #36
08840     A7 04 02 FB | 	rdlong	arg03, fp
08844     28 4E 85 F1 | 	sub	fp, #40
08848     9C 84 BF FD | 	call	#__system____builtin_memmove
0884c                 | LR__1168
0884c     0C 4E 05 F1 | 	add	fp, #12
08850     A7 0E 02 FB | 	rdlong	local03, fp
08854     1C 4E 05 F1 | 	add	fp, #28
08858     A7 18 02 FB | 	rdlong	local08, fp
0885c     0C 0F 82 F1 | 	sub	local03, local08
08860     1C 4E 85 F1 | 	sub	fp, #28
08864     A7 0E 62 FC | 	wrlong	local03, fp
08868     04 4E 05 F1 | 	add	fp, #4
0886c     A7 0A 02 FB | 	rdlong	local01, fp
08870     05 17 02 FB | 	rdlong	local07, local01
08874     18 4E 05 F1 | 	add	fp, #24
08878     A7 18 02 FB | 	rdlong	local08, fp
0887c     0C 17 02 F1 | 	add	local07, local08
08880     05 17 62 FC | 	wrlong	local07, local01
08884     0C 4E 05 F1 | 	add	fp, #12
08888     A7 0E 02 FB | 	rdlong	local03, fp
0888c     0C 4E 85 F1 | 	sub	fp, #12
08890     A7 20 02 FB | 	rdlong	local12, fp
08894     10 0F 02 F1 | 	add	local03, local12
08898     0C 4E 05 F1 | 	add	fp, #12
0889c     A7 0E 62 FC | 	wrlong	local03, fp
088a0     30 4E 85 F1 | 	sub	fp, #48
088a4     A7 22 02 FB | 	rdlong	local13, fp
088a8     11 0F 02 F6 | 	mov	local03, local13
088ac     14 22 06 F1 | 	add	local13, #20
088b0     11 25 02 FB | 	rdlong	local14, local13
088b4     24 4E 05 F1 | 	add	fp, #36
088b8     A7 14 02 FB | 	rdlong	local06, fp
088bc     28 4E 85 F1 | 	sub	fp, #40
088c0     0A 25 02 F1 | 	add	local14, local06
088c4     14 0E 06 F1 | 	add	local03, #20
088c8     07 25 62 FC | 	wrlong	local14, local03
088cc     84 FA 9F FD | 	jmp	#LR__1152
088d0                 | LR__1169
088d0                 | ' 
088d0                 | ' 
088d0                 | ' 
088d0                 | ' 
088d0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
088d0                 | ' 
088d0                 | ' 	}
088d0                 | ' 
088d0                 | ' 	return FR_OK ;
088d0     00 EA 05 F6 | 	mov	result1, #0
088d4                 | LR__1170
088d4     A7 F0 03 F6 | 	mov	ptra, fp
088d8     B2 00 A0 FD | 	call	#popregs_
088dc                 | _fatfs_cc_f_read_ret
088dc     2D 00 64 FD | 	ret
088e0                 | 
088e0                 | _fatfs_cc_f_write
088e0     15 4A 05 F6 | 	mov	COUNT_, #21
088e4     A8 00 A0 FD | 	call	#pushregs_
088e8     34 F0 07 F1 | 	add	ptra, #52
088ec     04 4E 05 F1 | 	add	fp, #4
088f0     A7 00 62 FC | 	wrlong	arg01, fp
088f4     04 4E 05 F1 | 	add	fp, #4
088f8     A7 02 62 FC | 	wrlong	arg02, fp
088fc     04 4E 05 F1 | 	add	fp, #4
08900     A7 04 62 FC | 	wrlong	arg03, fp
08904     04 4E 05 F1 | 	add	fp, #4
08908     A7 06 62 FC | 	wrlong	arg04, fp
0890c     08 4E 85 F1 | 	sub	fp, #8
08910     A7 EA 01 FB | 	rdlong	result1, fp
08914     28 4E 05 F1 | 	add	fp, #40
08918     A7 EA 61 FC | 	wrlong	result1, fp
0891c     20 4E 85 F1 | 	sub	fp, #32
08920     A7 EA 01 FB | 	rdlong	result1, fp
08924     F5 00 68 FC | 	wrlong	#0, result1
08928     0C 4E 85 F1 | 	sub	fp, #12
0892c     A7 00 02 FB | 	rdlong	arg01, fp
08930     14 4E 05 F1 | 	add	fp, #20
08934     A7 02 02 F6 | 	mov	arg02, fp
08938     18 4E 85 F1 | 	sub	fp, #24
0893c     88 F0 BF FD | 	call	#_fatfs_cc_validate
08940     14 4E 05 F1 | 	add	fp, #20
08944     A7 EA 61 FC | 	wrlong	result1, fp
08948     00 EA 4D F2 | 	cmps	result1, #0 wz
0894c     14 4E 85 F1 | 	sub	fp, #20
08950     20 00 90 5D |  if_ne	jmp	#LR__1180
08954     04 4E 05 F1 | 	add	fp, #4
08958     A7 02 02 FB | 	rdlong	arg02, fp
0895c     11 02 06 F1 | 	add	arg02, #17
08960     01 03 CA FA | 	rdbyte	arg02, arg02 wz
08964     10 4E 05 F1 | 	add	fp, #16
08968     A7 02 62 FC | 	wrlong	arg02, fp
0896c     14 4E 85 F1 | 	sub	fp, #20
08970     10 00 90 AD |  if_e	jmp	#LR__1181
08974                 | LR__1180
08974     14 4E 05 F1 | 	add	fp, #20
08978     A7 EA 01 FB | 	rdlong	result1, fp
0897c     14 4E 85 F1 | 	sub	fp, #20
08980     44 07 90 FD | 	jmp	#LR__1203
08984                 | LR__1181
08984     04 4E 05 F1 | 	add	fp, #4
08988     A7 02 02 FB | 	rdlong	arg02, fp
0898c     04 4E 85 F1 | 	sub	fp, #4
08990     10 02 06 F1 | 	add	arg02, #16
08994     01 03 C2 FA | 	rdbyte	arg02, arg02
08998     02 02 CE F7 | 	test	arg02, #2 wz
0899c     07 EA 05 A6 |  if_e	mov	result1, #7
089a0     24 07 90 AD |  if_e	jmp	#LR__1203
089a4     04 4E 05 F1 | 	add	fp, #4
089a8     A7 02 02 FB | 	rdlong	arg02, fp
089ac     01 01 02 F6 | 	mov	arg01, arg02
089b0     14 00 06 F1 | 	add	arg01, #20
089b4     00 01 02 FB | 	rdlong	arg01, arg01
089b8     08 4E 05 F1 | 	add	fp, #8
089bc     A7 EA 01 FB | 	rdlong	result1, fp
089c0     F5 00 02 F1 | 	add	arg01, result1
089c4     0C 4E 85 F1 | 	sub	fp, #12
089c8     14 02 06 F1 | 	add	arg02, #20
089cc     01 EB 01 FB | 	rdlong	result1, arg02
089d0     F5 00 12 F2 | 	cmp	arg01, result1 wc
089d4     24 00 90 3D |  if_ae	jmp	#LR__1182
089d8     04 4E 05 F1 | 	add	fp, #4
089dc     A7 02 02 FB | 	rdlong	arg02, fp
089e0     01 EA 65 F6 | 	neg	result1, #1
089e4     14 02 06 F1 | 	add	arg02, #20
089e8     01 03 02 FB | 	rdlong	arg02, arg02
089ec     01 EB 81 F1 | 	sub	result1, arg02
089f0     08 4E 05 F1 | 	add	fp, #8
089f4     A7 EA 61 FC | 	wrlong	result1, fp
089f8     0C 4E 85 F1 | 	sub	fp, #12
089fc                 | LR__1182
089fc                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
089fc                 | ' 	}
089fc                 | ' 
089fc                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
089fc                 | LR__1183
089fc     0C 4E 05 F1 | 	add	fp, #12
08a00     A7 EA 01 FB | 	rdlong	result1, fp
08a04     0C 4E 85 F1 | 	sub	fp, #12
08a08     01 EA 15 F2 | 	cmp	result1, #1 wc
08a0c     90 06 90 CD |  if_b	jmp	#LR__1202
08a10     04 4E 05 F1 | 	add	fp, #4
08a14     A7 EA 01 FB | 	rdlong	result1, fp
08a18     04 4E 85 F1 | 	sub	fp, #4
08a1c     14 EA 05 F1 | 	add	result1, #20
08a20     F5 EA 01 FB | 	rdlong	result1, result1
08a24     FF EB CD F7 | 	test	result1, #511 wz
08a28     D8 04 90 5D |  if_ne	jmp	#LR__1198
08a2c     04 4E 05 F1 | 	add	fp, #4
08a30     A7 EA 01 FB | 	rdlong	result1, fp
08a34     14 EA 05 F1 | 	add	result1, #20
08a38     F5 EA 01 FB | 	rdlong	result1, result1
08a3c     09 EA 45 F0 | 	shr	result1, #9
08a40     14 4E 05 F1 | 	add	fp, #20
08a44     A7 02 02 FB | 	rdlong	arg02, fp
08a48     0A 02 06 F1 | 	add	arg02, #10
08a4c     01 07 E2 FA | 	rdword	arg04, arg02
08a50     03 03 32 F9 | 	getword	arg02, arg04, #0
08a54     01 02 86 F1 | 	sub	arg02, #1
08a58     01 EB 09 F5 | 	and	result1, arg02 wz
08a5c     14 4E 05 F1 | 	add	fp, #20
08a60     A7 EA 61 FC | 	wrlong	result1, fp
08a64     2C 4E 85 F1 | 	sub	fp, #44
08a68     44 01 90 5D |  if_ne	jmp	#LR__1189
08a6c     04 4E 05 F1 | 	add	fp, #4
08a70     A7 EA 01 FB | 	rdlong	result1, fp
08a74     04 4E 85 F1 | 	sub	fp, #4
08a78     14 EA 05 F1 | 	add	result1, #20
08a7c     F5 02 0A FB | 	rdlong	arg02, result1 wz
08a80     44 00 90 5D |  if_ne	jmp	#LR__1184
08a84     04 4E 05 F1 | 	add	fp, #4
08a88     A7 02 02 FB | 	rdlong	arg02, fp
08a8c     08 02 06 F1 | 	add	arg02, #8
08a90     01 03 0A FB | 	rdlong	arg02, arg02 wz
08a94     18 4E 05 F1 | 	add	fp, #24
08a98     A7 02 62 FC | 	wrlong	arg02, fp
08a9c     1C 4E 85 F1 | 	sub	fp, #28
08aa0     4C 00 90 5D |  if_ne	jmp	#LR__1185
08aa4     04 4E 05 F1 | 	add	fp, #4
08aa8     A7 00 02 FB | 	rdlong	arg01, fp
08aac     04 4E 85 F1 | 	sub	fp, #4
08ab0     00 02 06 F6 | 	mov	arg02, #0
08ab4     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
08ab8     1C 4E 05 F1 | 	add	fp, #28
08abc     A7 EA 61 FC | 	wrlong	result1, fp
08ac0     1C 4E 85 F1 | 	sub	fp, #28
08ac4     28 00 90 FD | 	jmp	#LR__1185
08ac8                 | LR__1184
08ac8     04 4E 05 F1 | 	add	fp, #4
08acc     A7 06 02 FB | 	rdlong	arg04, fp
08ad0     03 01 02 F6 | 	mov	arg01, arg04
08ad4     04 4E 85 F1 | 	sub	fp, #4
08ad8     18 06 06 F1 | 	add	arg04, #24
08adc     03 03 02 FB | 	rdlong	arg02, arg04
08ae0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
08ae4     1C 4E 05 F1 | 	add	fp, #28
08ae8     A7 EA 61 FC | 	wrlong	result1, fp
08aec     1C 4E 85 F1 | 	sub	fp, #28
08af0                 | LR__1185
08af0     1C 4E 05 F1 | 	add	fp, #28
08af4     A7 EA 09 FB | 	rdlong	result1, fp wz
08af8     1C 4E 85 F1 | 	sub	fp, #28
08afc     A0 05 90 AD |  if_e	jmp	#LR__1202
08b00     1C 4E 05 F1 | 	add	fp, #28
08b04     A7 EA 01 FB | 	rdlong	result1, fp
08b08     1C 4E 85 F1 | 	sub	fp, #28
08b0c     01 EA 0D F2 | 	cmp	result1, #1 wz
08b10     1C 00 90 5D |  if_ne	jmp	#LR__1186
08b14     04 4E 05 F1 | 	add	fp, #4
08b18     A7 EA 01 FB | 	rdlong	result1, fp
08b1c     04 4E 85 F1 | 	sub	fp, #4
08b20     11 EA 05 F1 | 	add	result1, #17
08b24     F5 04 48 FC | 	wrbyte	#2, result1
08b28     02 EA 05 F6 | 	mov	result1, #2
08b2c     98 05 90 FD | 	jmp	#LR__1203
08b30                 | LR__1186
08b30     1C 4E 05 F1 | 	add	fp, #28
08b34     A7 EA 01 FB | 	rdlong	result1, fp
08b38     1C 4E 85 F1 | 	sub	fp, #28
08b3c     FF FF 7F FF 
08b40     FF EB 0D F2 | 	cmp	result1, ##-1 wz
08b44     1C 00 90 5D |  if_ne	jmp	#LR__1187
08b48     04 4E 05 F1 | 	add	fp, #4
08b4c     A7 EA 01 FB | 	rdlong	result1, fp
08b50     04 4E 85 F1 | 	sub	fp, #4
08b54     11 EA 05 F1 | 	add	result1, #17
08b58     F5 02 48 FC | 	wrbyte	#1, result1
08b5c     01 EA 05 F6 | 	mov	result1, #1
08b60     64 05 90 FD | 	jmp	#LR__1203
08b64                 | LR__1187
08b64     04 4E 05 F1 | 	add	fp, #4
08b68     A7 EA 01 FB | 	rdlong	result1, fp
08b6c     18 4E 05 F1 | 	add	fp, #24
08b70     A7 06 02 FB | 	rdlong	arg04, fp
08b74     18 EA 05 F1 | 	add	result1, #24
08b78     F5 06 62 FC | 	wrlong	arg04, result1
08b7c     18 4E 85 F1 | 	sub	fp, #24
08b80     A7 EA 01 FB | 	rdlong	result1, fp
08b84     04 4E 85 F1 | 	sub	fp, #4
08b88     08 EA 05 F1 | 	add	result1, #8
08b8c     F5 EA 09 FB | 	rdlong	result1, result1 wz
08b90     1C 00 90 5D |  if_ne	jmp	#LR__1188
08b94     04 4E 05 F1 | 	add	fp, #4
08b98     A7 06 02 FB | 	rdlong	arg04, fp
08b9c     18 4E 05 F1 | 	add	fp, #24
08ba0     A7 EA 01 FB | 	rdlong	result1, fp
08ba4     1C 4E 85 F1 | 	sub	fp, #28
08ba8     08 06 06 F1 | 	add	arg04, #8
08bac     03 EB 61 FC | 	wrlong	result1, arg04
08bb0                 | LR__1188
08bb0                 | LR__1189
08bb0     04 4E 05 F1 | 	add	fp, #4
08bb4     A7 06 02 FB | 	rdlong	arg04, fp
08bb8     04 4E 85 F1 | 	sub	fp, #4
08bbc     10 06 06 F1 | 	add	arg04, #16
08bc0     03 07 C2 FA | 	rdbyte	arg04, arg04
08bc4     80 06 CE F7 | 	test	arg04, #128 wz
08bc8     7C 00 90 AD |  if_e	jmp	#LR__1191
08bcc     18 4E 05 F1 | 	add	fp, #24
08bd0     A7 06 02 FB | 	rdlong	arg04, fp
08bd4     01 06 06 F1 | 	add	arg04, #1
08bd8     03 01 C2 FA | 	rdbyte	arg01, arg04
08bdc     14 4E 85 F1 | 	sub	fp, #20
08be0     A7 06 02 FB | 	rdlong	arg04, fp
08be4     03 03 02 F6 | 	mov	arg02, arg04
08be8     28 02 06 F1 | 	add	arg02, #40
08bec     04 4E 85 F1 | 	sub	fp, #4
08bf0     1C 06 06 F1 | 	add	arg04, #28
08bf4     03 05 02 FB | 	rdlong	arg03, arg04
08bf8     01 06 06 F6 | 	mov	arg04, #1
08bfc     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
08c00     00 EA 0D F2 | 	cmp	result1, #0 wz
08c04     1C 00 90 AD |  if_e	jmp	#LR__1190
08c08     04 4E 05 F1 | 	add	fp, #4
08c0c     A7 EA 01 FB | 	rdlong	result1, fp
08c10     04 4E 85 F1 | 	sub	fp, #4
08c14     11 EA 05 F1 | 	add	result1, #17
08c18     F5 02 48 FC | 	wrbyte	#1, result1
08c1c     01 EA 05 F6 | 	mov	result1, #1
08c20     A4 04 90 FD | 	jmp	#LR__1203
08c24                 | LR__1190
08c24     04 4E 05 F1 | 	add	fp, #4
08c28     A7 06 02 FB | 	rdlong	arg04, fp
08c2c     03 EB 01 F6 | 	mov	result1, arg04
08c30     04 4E 85 F1 | 	sub	fp, #4
08c34     10 06 06 F1 | 	add	arg04, #16
08c38     03 07 C2 FA | 	rdbyte	arg04, arg04
08c3c     7F 06 06 F5 | 	and	arg04, #127
08c40     10 EA 05 F1 | 	add	result1, #16
08c44     F5 06 42 FC | 	wrbyte	arg04, result1
08c48                 | LR__1191
08c48     18 4E 05 F1 | 	add	fp, #24
08c4c     A7 00 02 FB | 	rdlong	arg01, fp
08c50     14 4E 85 F1 | 	sub	fp, #20
08c54     A7 02 02 FB | 	rdlong	arg02, fp
08c58     04 4E 85 F1 | 	sub	fp, #4
08c5c     18 02 06 F1 | 	add	arg02, #24
08c60     01 03 02 FB | 	rdlong	arg02, arg02
08c64     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
08c68     20 4E 05 F1 | 	add	fp, #32
08c6c     A7 EA 61 FC | 	wrlong	result1, fp
08c70     20 4E 85 F1 | 	sub	fp, #32
08c74     00 EA 0D F2 | 	cmp	result1, #0 wz
08c78     1C 00 90 5D |  if_ne	jmp	#LR__1192
08c7c     04 4E 05 F1 | 	add	fp, #4
08c80     A7 EA 01 FB | 	rdlong	result1, fp
08c84     04 4E 85 F1 | 	sub	fp, #4
08c88     11 EA 05 F1 | 	add	result1, #17
08c8c     F5 04 48 FC | 	wrbyte	#2, result1
08c90     02 EA 05 F6 | 	mov	result1, #2
08c94     30 04 90 FD | 	jmp	#LR__1203
08c98                 | LR__1192
08c98     20 4E 05 F1 | 	add	fp, #32
08c9c     A7 EA 01 FB | 	rdlong	result1, fp
08ca0     0C 4E 05 F1 | 	add	fp, #12
08ca4     A7 0A 02 FB | 	rdlong	local01, fp
08ca8     05 EB 01 F1 | 	add	result1, local01
08cac     0C 4E 85 F1 | 	sub	fp, #12
08cb0     A7 EA 61 FC | 	wrlong	result1, fp
08cb4     14 4E 85 F1 | 	sub	fp, #20
08cb8     A7 EA 01 FB | 	rdlong	result1, fp
08cbc     09 EA 45 F0 | 	shr	result1, #9
08cc0     1C 4E 05 F1 | 	add	fp, #28
08cc4     A7 EA 61 FC | 	wrlong	result1, fp
08cc8     28 4E 85 F1 | 	sub	fp, #40
08ccc     01 EA 15 F2 | 	cmp	result1, #1 wc
08cd0     60 01 90 CD |  if_b	jmp	#LR__1196
08cd4     2C 4E 05 F1 | 	add	fp, #44
08cd8     A7 EA 01 FB | 	rdlong	result1, fp
08cdc     04 4E 85 F1 | 	sub	fp, #4
08ce0     A7 06 02 FB | 	rdlong	arg04, fp
08ce4     03 EB 01 F1 | 	add	result1, arg04
08ce8     10 4E 85 F1 | 	sub	fp, #16
08cec     A7 06 02 FB | 	rdlong	arg04, fp
08cf0     18 4E 85 F1 | 	sub	fp, #24
08cf4     0A 06 06 F1 | 	add	arg04, #10
08cf8     03 07 E2 FA | 	rdword	arg04, arg04
08cfc     03 EB 19 F2 | 	cmp	result1, arg04 wcz
08d00     28 00 90 ED |  if_be	jmp	#LR__1193
08d04     18 4E 05 F1 | 	add	fp, #24
08d08     A7 EA 01 FB | 	rdlong	result1, fp
08d0c     0A EA 05 F1 | 	add	result1, #10
08d10     F5 EA E1 FA | 	rdword	result1, result1
08d14     14 4E 05 F1 | 	add	fp, #20
08d18     A7 06 02 FB | 	rdlong	arg04, fp
08d1c     03 EB 81 F1 | 	sub	result1, arg04
08d20     04 4E 85 F1 | 	sub	fp, #4
08d24     A7 EA 61 FC | 	wrlong	result1, fp
08d28     28 4E 85 F1 | 	sub	fp, #40
08d2c                 | LR__1193
08d2c     18 4E 05 F1 | 	add	fp, #24
08d30     A7 06 02 FB | 	rdlong	arg04, fp
08d34     01 06 06 F1 | 	add	arg04, #1
08d38     03 01 C2 FA | 	rdbyte	arg01, arg04
08d3c     18 4E 05 F1 | 	add	fp, #24
08d40     A7 02 02 FB | 	rdlong	arg02, fp
08d44     10 4E 85 F1 | 	sub	fp, #16
08d48     A7 04 02 FB | 	rdlong	arg03, fp
08d4c     08 4E 05 F1 | 	add	fp, #8
08d50     A7 06 02 FB | 	rdlong	arg04, fp
08d54     28 4E 85 F1 | 	sub	fp, #40
08d58     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
08d5c     00 EA 0D F2 | 	cmp	result1, #0 wz
08d60     1C 00 90 AD |  if_e	jmp	#LR__1194
08d64     04 4E 05 F1 | 	add	fp, #4
08d68     A7 0A 02 FB | 	rdlong	local01, fp
08d6c     04 4E 85 F1 | 	sub	fp, #4
08d70     11 0A 06 F1 | 	add	local01, #17
08d74     05 03 48 FC | 	wrbyte	#1, local01
08d78     01 EA 05 F6 | 	mov	result1, #1
08d7c     48 03 90 FD | 	jmp	#LR__1203
08d80                 | LR__1194
08d80     04 4E 05 F1 | 	add	fp, #4
08d84     A7 EA 01 FB | 	rdlong	result1, fp
08d88     1C EA 05 F1 | 	add	result1, #28
08d8c     F5 EA 01 FB | 	rdlong	result1, result1
08d90     1C 4E 05 F1 | 	add	fp, #28
08d94     A7 0C 02 FB | 	rdlong	local02, fp
08d98     06 EB 81 F1 | 	sub	result1, local02
08d9c     08 4E 05 F1 | 	add	fp, #8
08da0     A7 06 02 FB | 	rdlong	arg04, fp
08da4     28 4E 85 F1 | 	sub	fp, #40
08da8     03 EB 11 F2 | 	cmp	result1, arg04 wc
08dac     68 00 90 3D |  if_ae	jmp	#LR__1195
08db0     04 4E 05 F1 | 	add	fp, #4
08db4     A7 00 02 FB | 	rdlong	arg01, fp
08db8     28 00 06 F1 | 	add	arg01, #40
08dbc     2C 4E 05 F1 | 	add	fp, #44
08dc0     A7 02 02 FB | 	rdlong	arg02, fp
08dc4     2C 4E 85 F1 | 	sub	fp, #44
08dc8     A7 EA 01 FB | 	rdlong	result1, fp
08dcc     1C EA 05 F1 | 	add	result1, #28
08dd0     F5 0E 02 FB | 	rdlong	local03, result1
08dd4     1C 4E 05 F1 | 	add	fp, #28
08dd8     A7 06 02 FB | 	rdlong	arg04, fp
08ddc     20 4E 85 F1 | 	sub	fp, #32
08de0     03 0F 82 F1 | 	sub	local03, arg04
08de4     09 0E 66 F0 | 	shl	local03, #9
08de8     07 03 02 F1 | 	add	arg02, local03
08dec     09 04 C6 F9 | 	decod	arg03, #9
08df0     F4 7E BF FD | 	call	#__system____builtin_memmove
08df4     04 4E 05 F1 | 	add	fp, #4
08df8     A7 06 02 FB | 	rdlong	arg04, fp
08dfc     03 EB 01 F6 | 	mov	result1, arg04
08e00     04 4E 85 F1 | 	sub	fp, #4
08e04     10 06 06 F1 | 	add	arg04, #16
08e08     03 07 C2 FA | 	rdbyte	arg04, arg04
08e0c     7F 06 06 F5 | 	and	arg04, #127
08e10     10 EA 05 F1 | 	add	result1, #16
08e14     F5 06 42 FC | 	wrbyte	arg04, result1
08e18                 | LR__1195
08e18     28 4E 05 F1 | 	add	fp, #40
08e1c     A7 EA 01 FB | 	rdlong	result1, fp
08e20     09 EA 65 F0 | 	shl	result1, #9
08e24     04 4E 85 F1 | 	sub	fp, #4
08e28     A7 EA 61 FC | 	wrlong	result1, fp
08e2c     24 4E 85 F1 | 	sub	fp, #36
08e30                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
08e30                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
08e30                 | ' 				}
08e30                 | ' 
08e30                 | ' 
08e30                 | ' 				wcnt =  ((UINT) 512 )  * cc;
08e30                 | ' 				continue;
08e30     74 01 90 FD | 	jmp	#LR__1199
08e34                 | LR__1196
08e34     04 4E 05 F1 | 	add	fp, #4
08e38     A7 0C 02 FB | 	rdlong	local02, fp
08e3c     1C 0C 06 F1 | 	add	local02, #28
08e40     06 EB 01 FB | 	rdlong	result1, local02
08e44     1C 4E 05 F1 | 	add	fp, #28
08e48     A7 0C 02 FB | 	rdlong	local02, fp
08e4c     20 4E 85 F1 | 	sub	fp, #32
08e50     06 EB 09 F2 | 	cmp	result1, local02 wz
08e54     90 00 90 AD |  if_e	jmp	#LR__1197
08e58     04 4E 05 F1 | 	add	fp, #4
08e5c     A7 EA 01 FB | 	rdlong	result1, fp
08e60     F5 0E 02 F6 | 	mov	local03, result1
08e64     04 4E 85 F1 | 	sub	fp, #4
08e68     14 0E 06 F1 | 	add	local03, #20
08e6c     07 0F 02 FB | 	rdlong	local03, local03
08e70     0C EA 05 F1 | 	add	result1, #12
08e74     F5 10 02 FB | 	rdlong	local04, result1
08e78     08 13 02 F6 | 	mov	local05, local04
08e7c     09 0F 12 F2 | 	cmp	local03, local05 wc
08e80     64 00 90 3D |  if_ae	jmp	#LR__1197
08e84     18 4E 05 F1 | 	add	fp, #24
08e88     A7 06 02 FB | 	rdlong	arg04, fp
08e8c     01 06 06 F1 | 	add	arg04, #1
08e90     03 01 C2 FA | 	rdbyte	arg01, arg04
08e94     14 4E 85 F1 | 	sub	fp, #20
08e98     A7 14 02 FB | 	rdlong	local06, fp
08e9c     28 14 06 F1 | 	add	local06, #40
08ea0     0A 17 02 F6 | 	mov	local07, local06
08ea4     1C 4E 05 F1 | 	add	fp, #28
08ea8     A7 18 02 FB | 	rdlong	local08, fp
08eac     20 4E 85 F1 | 	sub	fp, #32
08eb0     01 1A 06 F6 | 	mov	local09, #1
08eb4     0B 03 02 F6 | 	mov	arg02, local07
08eb8     0C 05 02 F6 | 	mov	arg03, local08
08ebc     01 06 06 F6 | 	mov	arg04, #1
08ec0     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
08ec4     F5 1C 0A F6 | 	mov	local10, result1 wz
08ec8     1C 00 90 AD |  if_e	jmp	#LR__1197
08ecc     04 4E 05 F1 | 	add	fp, #4
08ed0     A7 1C 02 FB | 	rdlong	local10, fp
08ed4     04 4E 85 F1 | 	sub	fp, #4
08ed8     11 1C 06 F1 | 	add	local10, #17
08edc     0E 03 48 FC | 	wrbyte	#1, local10
08ee0                 | ' 				fp->fptr < fp->obj.objsize &&
08ee0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
08ee0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
08ee0     01 EA 05 F6 | 	mov	result1, #1
08ee4     E0 01 90 FD | 	jmp	#LR__1203
08ee8                 | LR__1197
08ee8     04 4E 05 F1 | 	add	fp, #4
08eec     A7 06 02 FB | 	rdlong	arg04, fp
08ef0     1C 4E 05 F1 | 	add	fp, #28
08ef4     A7 EA 01 FB | 	rdlong	result1, fp
08ef8     20 4E 85 F1 | 	sub	fp, #32
08efc     1C 06 06 F1 | 	add	arg04, #28
08f00     03 EB 61 FC | 	wrlong	result1, arg04
08f04                 | LR__1198
08f04     04 4E 05 F1 | 	add	fp, #4
08f08     A7 EA 01 FB | 	rdlong	result1, fp
08f0c     14 EA 05 F1 | 	add	result1, #20
08f10     F5 EA 01 FB | 	rdlong	result1, result1
08f14     FF EB 05 F5 | 	and	result1, #511
08f18     09 1E C6 F9 | 	decod	local11, #9
08f1c     F5 1E 82 F1 | 	sub	local11, result1
08f20     20 4E 05 F1 | 	add	fp, #32
08f24     A7 1E 62 FC | 	wrlong	local11, fp
08f28     18 4E 85 F1 | 	sub	fp, #24
08f2c     A7 EA 01 FB | 	rdlong	result1, fp
08f30     0C 4E 85 F1 | 	sub	fp, #12
08f34     F5 1E 1A F2 | 	cmp	local11, result1 wcz
08f38     0C 4E 05 11 |  if_a	add	fp, #12
08f3c     A7 1E 02 1B |  if_a	rdlong	local11, fp
08f40     18 4E 05 11 |  if_a	add	fp, #24
08f44     A7 1E 62 1C |  if_a	wrlong	local11, fp
08f48     24 4E 85 11 |  if_a	sub	fp, #36
08f4c     04 4E 05 F1 | 	add	fp, #4
08f50     A7 1E 02 FB | 	rdlong	local11, fp
08f54     0F 01 02 F6 | 	mov	arg01, local11
08f58     28 00 06 F1 | 	add	arg01, #40
08f5c     14 1E 06 F1 | 	add	local11, #20
08f60     0F 1F 02 FB | 	rdlong	local11, local11
08f64     FF 1F 06 F5 | 	and	local11, #511
08f68     0F 01 02 F1 | 	add	arg01, local11
08f6c     2C 4E 05 F1 | 	add	fp, #44
08f70     A7 02 02 FB | 	rdlong	arg02, fp
08f74     0C 4E 85 F1 | 	sub	fp, #12
08f78     A7 04 02 FB | 	rdlong	arg03, fp
08f7c     24 4E 85 F1 | 	sub	fp, #36
08f80     64 7D BF FD | 	call	#__system____builtin_memmove
08f84     04 4E 05 F1 | 	add	fp, #4
08f88     A7 EA 01 FB | 	rdlong	result1, fp
08f8c     F5 1E 02 F6 | 	mov	local11, result1
08f90     04 4E 85 F1 | 	sub	fp, #4
08f94     10 EA 05 F1 | 	add	result1, #16
08f98     F5 EA C1 FA | 	rdbyte	result1, result1
08f9c     80 EA 45 F5 | 	or	result1, #128
08fa0     10 1E 06 F1 | 	add	local11, #16
08fa4     0F EB 41 FC | 	wrbyte	result1, local11
08fa8                 | LR__1199
08fa8     0C 4E 05 F1 | 	add	fp, #12
08fac     A7 1E 02 FB | 	rdlong	local11, fp
08fb0     18 4E 05 F1 | 	add	fp, #24
08fb4     A7 EA 01 FB | 	rdlong	result1, fp
08fb8     F5 1E 82 F1 | 	sub	local11, result1
08fbc     18 4E 85 F1 | 	sub	fp, #24
08fc0     A7 1E 62 FC | 	wrlong	local11, fp
08fc4     04 4E 05 F1 | 	add	fp, #4
08fc8     A7 20 02 FB | 	rdlong	local12, fp
08fcc     10 1F 02 FB | 	rdlong	local11, local12
08fd0     14 4E 05 F1 | 	add	fp, #20
08fd4     A7 22 02 FB | 	rdlong	local13, fp
08fd8     11 1F 02 F1 | 	add	local11, local13
08fdc     10 1F 62 FC | 	wrlong	local11, local12
08fe0     0C 4E 05 F1 | 	add	fp, #12
08fe4     A7 1E 02 FB | 	rdlong	local11, fp
08fe8     0C 4E 85 F1 | 	sub	fp, #12
08fec     A7 24 02 FB | 	rdlong	local14, fp
08ff0     12 1F 02 F1 | 	add	local11, local14
08ff4     0C 4E 05 F1 | 	add	fp, #12
08ff8     A7 1E 62 FC | 	wrlong	local11, fp
08ffc     2C 4E 85 F1 | 	sub	fp, #44
09000     A7 26 02 FB | 	rdlong	local15, fp
09004     13 1F 02 F6 | 	mov	local11, local15
09008     14 26 06 F1 | 	add	local15, #20
0900c     13 27 02 FB | 	rdlong	local15, local15
09010     20 4E 05 F1 | 	add	fp, #32
09014     A7 28 02 FB | 	rdlong	local16, fp
09018     14 27 02 F1 | 	add	local15, local16
0901c     14 1E 06 F1 | 	add	local11, #20
09020     0F 27 62 FC | 	wrlong	local15, local11
09024     20 4E 85 F1 | 	sub	fp, #32
09028     A7 2A 02 FB | 	rdlong	local17, fp
0902c     15 1F 02 F6 | 	mov	local11, local17
09030     15 2D 02 F6 | 	mov	local18, local17
09034     04 4E 85 F1 | 	sub	fp, #4
09038     14 2A 06 F1 | 	add	local17, #20
0903c     15 2F 02 FB | 	rdlong	local19, local17
09040     0C 2C 06 F1 | 	add	local18, #12
09044     16 31 02 FB | 	rdlong	local20, local18
09048     18 2F 1A F2 | 	cmp	local19, local20 wcz
0904c     24 00 90 ED |  if_be	jmp	#LR__1200
09050     04 4E 05 F1 | 	add	fp, #4
09054     A7 12 02 FB | 	rdlong	local05, fp
09058     04 4E 85 F1 | 	sub	fp, #4
0905c     09 0F 02 F6 | 	mov	local03, local05
09060     14 0E 06 F1 | 	add	local03, #20
09064     07 11 02 FB | 	rdlong	local04, local03
09068     14 0E 86 F1 | 	sub	local03, #20
0906c     08 33 02 F6 | 	mov	local21, local04
09070     20 00 90 FD | 	jmp	#LR__1201
09074                 | LR__1200
09074     04 4E 05 F1 | 	add	fp, #4
09078     A7 16 02 FB | 	rdlong	local07, fp
0907c     04 4E 85 F1 | 	sub	fp, #4
09080     0B 1D 02 F6 | 	mov	local10, local07
09084     0C 1C 06 F1 | 	add	local10, #12
09088     0E 19 02 FB | 	rdlong	local08, local10
0908c     0C 1C 86 F1 | 	sub	local10, #12
09090     0C 33 02 F6 | 	mov	local21, local08
09094                 | LR__1201
09094     0C 1E 06 F1 | 	add	local11, #12
09098     0F 33 62 FC | 	wrlong	local21, local11
0909c     5C F9 9F FD | 	jmp	#LR__1183
090a0                 | LR__1202
090a0     04 4E 05 F1 | 	add	fp, #4
090a4     A7 20 02 FB | 	rdlong	local12, fp
090a8     10 0B 02 F6 | 	mov	local01, local12
090ac     04 4E 85 F1 | 	sub	fp, #4
090b0     10 20 06 F1 | 	add	local12, #16
090b4     10 1F C2 FA | 	rdbyte	local11, local12
090b8     40 1E 46 F5 | 	or	local11, #64
090bc     10 0A 06 F1 | 	add	local01, #16
090c0     05 1F 42 FC | 	wrbyte	local11, local01
090c4                 | ' 
090c4                 | ' 
090c4                 | ' 
090c4                 | ' 
090c4                 | ' 
090c4                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
090c4                 | ' 		fp->flag |=  0x80 ;
090c4                 | ' 
090c4                 | ' 	}
090c4                 | ' 
090c4                 | ' 	fp->flag |=  0x40 ;
090c4                 | ' 
090c4                 | ' 	return FR_OK ;
090c4     00 EA 05 F6 | 	mov	result1, #0
090c8                 | LR__1203
090c8     A7 F0 03 F6 | 	mov	ptra, fp
090cc     B2 00 A0 FD | 	call	#popregs_
090d0                 | _fatfs_cc_f_write_ret
090d0     2D 00 64 FD | 	ret
090d4                 | 
090d4                 | _fatfs_cc_f_sync
090d4     00 4A 05 F6 | 	mov	COUNT_, #0
090d8     A8 00 A0 FD | 	call	#pushregs_
090dc     18 F0 07 F1 | 	add	ptra, #24
090e0     04 4E 05 F1 | 	add	fp, #4
090e4     A7 00 62 FC | 	wrlong	arg01, fp
090e8     08 4E 05 F1 | 	add	fp, #8
090ec     A7 02 02 F6 | 	mov	arg02, fp
090f0     0C 4E 85 F1 | 	sub	fp, #12
090f4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
090f8     08 4E 05 F1 | 	add	fp, #8
090fc     A7 EA 61 FC | 	wrlong	result1, fp
09100     08 4E 85 F1 | 	sub	fp, #8
09104     00 EA 0D F2 | 	cmp	result1, #0 wz
09108     C0 01 90 5D |  if_ne	jmp	#LR__1213
0910c     04 4E 05 F1 | 	add	fp, #4
09110     A7 06 02 FB | 	rdlong	arg04, fp
09114     04 4E 85 F1 | 	sub	fp, #4
09118     10 06 06 F1 | 	add	arg04, #16
0911c     03 07 C2 FA | 	rdbyte	arg04, arg04
09120     40 06 CE F7 | 	test	arg04, #64 wz
09124     A4 01 90 AD |  if_e	jmp	#LR__1212
09128     04 4E 05 F1 | 	add	fp, #4
0912c     A7 06 02 FB | 	rdlong	arg04, fp
09130     04 4E 85 F1 | 	sub	fp, #4
09134     10 06 06 F1 | 	add	arg04, #16
09138     03 07 C2 FA | 	rdbyte	arg04, arg04
0913c     80 06 CE F7 | 	test	arg04, #128 wz
09140     64 00 90 AD |  if_e	jmp	#LR__1210
09144     0C 4E 05 F1 | 	add	fp, #12
09148     A7 06 02 FB | 	rdlong	arg04, fp
0914c     01 06 06 F1 | 	add	arg04, #1
09150     03 01 C2 FA | 	rdbyte	arg01, arg04
09154     08 4E 85 F1 | 	sub	fp, #8
09158     A7 06 02 FB | 	rdlong	arg04, fp
0915c     03 03 02 F6 | 	mov	arg02, arg04
09160     28 02 06 F1 | 	add	arg02, #40
09164     04 4E 85 F1 | 	sub	fp, #4
09168     1C 06 06 F1 | 	add	arg04, #28
0916c     03 05 02 FB | 	rdlong	arg03, arg04
09170     01 06 06 F6 | 	mov	arg04, #1
09174     0C AE BF FD | 	call	#_fatfs_cc_disk_write
09178     00 EA 0D F2 | 	cmp	result1, #0 wz
0917c     01 EA 05 56 |  if_ne	mov	result1, #1
09180     54 01 90 5D |  if_ne	jmp	#LR__1214
09184     04 4E 05 F1 | 	add	fp, #4
09188     A7 06 02 FB | 	rdlong	arg04, fp
0918c     03 05 02 F6 | 	mov	arg03, arg04
09190     04 4E 85 F1 | 	sub	fp, #4
09194     10 06 06 F1 | 	add	arg04, #16
09198     03 07 C2 FA | 	rdbyte	arg04, arg04
0919c     7F 06 06 F5 | 	and	arg04, #127
091a0     10 04 06 F1 | 	add	arg03, #16
091a4     02 07 42 FC | 	wrbyte	arg04, arg03
091a8                 | LR__1210
091a8     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
091ac     10 4E 05 F1 | 	add	fp, #16
091b0     A7 EA 61 FC | 	wrlong	result1, fp
091b4     04 4E 85 F1 | 	sub	fp, #4
091b8     A7 00 02 FB | 	rdlong	arg01, fp
091bc     08 4E 85 F1 | 	sub	fp, #8
091c0     A7 06 02 FB | 	rdlong	arg04, fp
091c4     04 4E 85 F1 | 	sub	fp, #4
091c8     20 06 06 F1 | 	add	arg04, #32
091cc     03 03 02 FB | 	rdlong	arg02, arg04
091d0     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
091d4     08 4E 05 F1 | 	add	fp, #8
091d8     A7 EA 61 FC | 	wrlong	result1, fp
091dc     08 4E 85 F1 | 	sub	fp, #8
091e0     00 EA 0D F2 | 	cmp	result1, #0 wz
091e4     E4 00 90 5D |  if_ne	jmp	#LR__1211
091e8     04 4E 05 F1 | 	add	fp, #4
091ec     A7 06 02 FB | 	rdlong	arg04, fp
091f0     24 06 06 F1 | 	add	arg04, #36
091f4     03 07 02 FB | 	rdlong	arg04, arg04
091f8     10 4E 05 F1 | 	add	fp, #16
091fc     A7 06 62 FC | 	wrlong	arg04, fp
09200     03 05 02 F6 | 	mov	arg03, arg04
09204     0B 04 06 F1 | 	add	arg03, #11
09208     02 05 C2 FA | 	rdbyte	arg03, arg03
0920c     20 04 46 F5 | 	or	arg03, #32
09210     0B 06 06 F1 | 	add	arg04, #11
09214     03 05 42 FC | 	wrbyte	arg03, arg04
09218     10 4E 85 F1 | 	sub	fp, #16
0921c     A7 06 02 FB | 	rdlong	arg04, fp
09220     03 01 02 FB | 	rdlong	arg01, arg04
09224     10 4E 05 F1 | 	add	fp, #16
09228     A7 02 02 FB | 	rdlong	arg02, fp
0922c     14 4E 85 F1 | 	sub	fp, #20
09230     08 06 06 F1 | 	add	arg04, #8
09234     03 05 02 FB | 	rdlong	arg03, arg04
09238     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
0923c     14 4E 05 F1 | 	add	fp, #20
09240     A7 00 02 FB | 	rdlong	arg01, fp
09244     1C 00 06 F1 | 	add	arg01, #28
09248     10 4E 85 F1 | 	sub	fp, #16
0924c     A7 06 02 FB | 	rdlong	arg04, fp
09250     0C 06 06 F1 | 	add	arg04, #12
09254     03 03 02 FB | 	rdlong	arg02, arg04
09258     00 03 62 FC | 	wrlong	arg02, arg01
0925c     10 4E 05 F1 | 	add	fp, #16
09260     A7 00 02 FB | 	rdlong	arg01, fp
09264     16 00 06 F1 | 	add	arg01, #22
09268     04 4E 85 F1 | 	sub	fp, #4
0926c     A7 02 02 FB | 	rdlong	arg02, fp
09270     00 03 62 FC | 	wrlong	arg02, arg01
09274     04 4E 05 F1 | 	add	fp, #4
09278     A7 00 02 FB | 	rdlong	arg01, fp
0927c     12 00 06 F1 | 	add	arg01, #18
09280     00 01 58 FC | 	wrword	#0, arg01
09284     08 4E 85 F1 | 	sub	fp, #8
09288     A7 06 02 FB | 	rdlong	arg04, fp
0928c     03 06 06 F1 | 	add	arg04, #3
09290     03 03 48 FC | 	wrbyte	#1, arg04
09294     A7 00 02 FB | 	rdlong	arg01, fp
09298     0C 4E 85 F1 | 	sub	fp, #12
0929c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
092a0     08 4E 05 F1 | 	add	fp, #8
092a4     A7 EA 61 FC | 	wrlong	result1, fp
092a8     04 4E 85 F1 | 	sub	fp, #4
092ac     A7 06 02 FB | 	rdlong	arg04, fp
092b0     03 05 02 F6 | 	mov	arg03, arg04
092b4     04 4E 85 F1 | 	sub	fp, #4
092b8     10 06 06 F1 | 	add	arg04, #16
092bc     03 07 C2 FA | 	rdbyte	arg04, arg04
092c0     BF 06 06 F5 | 	and	arg04, #191
092c4     10 04 06 F1 | 	add	arg03, #16
092c8     02 07 42 FC | 	wrbyte	arg04, arg03
092cc                 | LR__1211
092cc                 | LR__1212
092cc                 | LR__1213
092cc                 | ' 					dir = fp->dir_ptr;
092cc                 | ' 					dir[ 11 ] |=  0x20 ;
092cc                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
092cc                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
092cc                 | ' 					st_dword(dir +  22 , tm);
092cc                 | ' 					st_word(dir +  18 , 0);
092cc                 | ' 					fs->wflag = 1;
092cc                 | ' 					res = sync_fs(fs);
092cc                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
092cc                 | ' 				}
092cc                 | ' 			}
092cc                 | ' 		}
092cc                 | ' 	}
092cc                 | ' 
092cc                 | ' 	return res ;
092cc     08 4E 05 F1 | 	add	fp, #8
092d0     A7 EA 01 FB | 	rdlong	result1, fp
092d4     08 4E 85 F1 | 	sub	fp, #8
092d8                 | LR__1214
092d8     A7 F0 03 F6 | 	mov	ptra, fp
092dc     B2 00 A0 FD | 	call	#popregs_
092e0                 | _fatfs_cc_f_sync_ret
092e0     2D 00 64 FD | 	ret
092e4                 | 
092e4                 | _fatfs_cc_f_close
092e4     01 4A 05 F6 | 	mov	COUNT_, #1
092e8     A8 00 A0 FD | 	call	#pushregs_
092ec     10 F0 07 F1 | 	add	ptra, #16
092f0     04 4E 05 F1 | 	add	fp, #4
092f4     A7 00 62 FC | 	wrlong	arg01, fp
092f8     04 4E 85 F1 | 	sub	fp, #4
092fc     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
09300     08 4E 05 F1 | 	add	fp, #8
09304     A7 EA 61 FC | 	wrlong	result1, fp
09308     08 4E 85 F1 | 	sub	fp, #8
0930c     00 EA 0D F2 | 	cmp	result1, #0 wz
09310     38 00 90 5D |  if_ne	jmp	#LR__1220
09314     04 4E 05 F1 | 	add	fp, #4
09318     A7 00 02 FB | 	rdlong	arg01, fp
0931c     08 4E 05 F1 | 	add	fp, #8
09320     A7 02 02 F6 | 	mov	arg02, fp
09324     0C 4E 85 F1 | 	sub	fp, #12
09328     9C E6 BF FD | 	call	#_fatfs_cc_validate
0932c     08 4E 05 F1 | 	add	fp, #8
09330     A7 EA 61 FC | 	wrlong	result1, fp
09334     08 4E 85 F1 | 	sub	fp, #8
09338     00 EA 0D F2 | 	cmp	result1, #0 wz
0933c     04 4E 05 A1 |  if_e	add	fp, #4
09340     A7 0A 02 AB |  if_e	rdlong	local01, fp
09344     04 4E 85 A1 |  if_e	sub	fp, #4
09348     05 01 68 AC |  if_e	wrlong	#0, local01
0934c                 | LR__1220
0934c                 | ' 
0934c                 | ' 
0934c                 | ' 
0934c                 | ' 
0934c                 | ' 			fp->obj.fs = 0;
0934c                 | ' #line 4192 "ff.c"
0934c                 | ' 		}
0934c                 | ' 	}
0934c                 | ' 	return res;
0934c     08 4E 05 F1 | 	add	fp, #8
09350     A7 EA 01 FB | 	rdlong	result1, fp
09354     08 4E 85 F1 | 	sub	fp, #8
09358     A7 F0 03 F6 | 	mov	ptra, fp
0935c     B2 00 A0 FD | 	call	#popregs_
09360                 | _fatfs_cc_f_close_ret
09360     2D 00 64 FD | 	ret
09364                 | 
09364                 | _fatfs_cc_f_lseek
09364     00 4A 05 F6 | 	mov	COUNT_, #0
09368     A8 00 A0 FD | 	call	#pushregs_
0936c     24 F0 07 F1 | 	add	ptra, #36
09370     04 4E 05 F1 | 	add	fp, #4
09374     A7 00 62 FC | 	wrlong	arg01, fp
09378     04 4E 05 F1 | 	add	fp, #4
0937c     A7 02 62 FC | 	wrlong	arg02, fp
09380     04 4E 85 F1 | 	sub	fp, #4
09384     A7 00 02 FB | 	rdlong	arg01, fp
09388     0C 4E 05 F1 | 	add	fp, #12
0938c     A7 02 02 F6 | 	mov	arg02, fp
09390     10 4E 85 F1 | 	sub	fp, #16
09394     30 E6 BF FD | 	call	#_fatfs_cc_validate
09398     0C 4E 05 F1 | 	add	fp, #12
0939c     A7 EA 61 FC | 	wrlong	result1, fp
093a0     0C 4E 85 F1 | 	sub	fp, #12
093a4     00 EA 0D F2 | 	cmp	result1, #0 wz
093a8     1C 00 90 5D |  if_ne	jmp	#LR__1230
093ac     04 4E 05 F1 | 	add	fp, #4
093b0     A7 06 02 FB | 	rdlong	arg04, fp
093b4     11 06 06 F1 | 	add	arg04, #17
093b8     03 07 C2 FA | 	rdbyte	arg04, arg04
093bc     08 4E 05 F1 | 	add	fp, #8
093c0     A7 06 62 FC | 	wrlong	arg04, fp
093c4     0C 4E 85 F1 | 	sub	fp, #12
093c8                 | LR__1230
093c8     0C 4E 05 F1 | 	add	fp, #12
093cc     A7 06 0A FB | 	rdlong	arg04, fp wz
093d0     0C 4E 85 F1 | 	sub	fp, #12
093d4     0C 4E 05 51 |  if_ne	add	fp, #12
093d8     A7 EA 01 5B |  if_ne	rdlong	result1, fp
093dc     0C 4E 85 51 |  if_ne	sub	fp, #12
093e0     40 06 90 5D |  if_ne	jmp	#LR__1253
093e4     04 4E 05 F1 | 	add	fp, #4
093e8     A7 06 02 FB | 	rdlong	arg04, fp
093ec     04 4E 05 F1 | 	add	fp, #4
093f0     A7 04 02 FB | 	rdlong	arg03, fp
093f4     08 4E 85 F1 | 	sub	fp, #8
093f8     0C 06 06 F1 | 	add	arg04, #12
093fc     03 07 02 FB | 	rdlong	arg04, arg04
09400     03 05 1A F2 | 	cmp	arg03, arg04 wcz
09404     3C 00 90 ED |  if_be	jmp	#LR__1231
09408     04 4E 05 F1 | 	add	fp, #4
0940c     A7 04 02 FB | 	rdlong	arg03, fp
09410     04 4E 85 F1 | 	sub	fp, #4
09414     10 04 06 F1 | 	add	arg03, #16
09418     02 05 C2 FA | 	rdbyte	arg03, arg03
0941c     02 05 E2 F8 | 	getbyte	arg03, arg03, #0
09420     02 04 CE F7 | 	test	arg03, #2 wz
09424     1C 00 90 5D |  if_ne	jmp	#LR__1231
09428     04 4E 05 F1 | 	add	fp, #4
0942c     A7 04 02 FB | 	rdlong	arg03, fp
09430     0C 04 06 F1 | 	add	arg03, #12
09434     02 05 02 FB | 	rdlong	arg03, arg03
09438     04 4E 05 F1 | 	add	fp, #4
0943c     A7 04 62 FC | 	wrlong	arg03, fp
09440     08 4E 85 F1 | 	sub	fp, #8
09444                 | LR__1231
09444     04 4E 05 F1 | 	add	fp, #4
09448     A7 04 02 FB | 	rdlong	arg03, fp
0944c     14 04 06 F1 | 	add	arg03, #20
09450     02 05 02 FB | 	rdlong	arg03, arg03
09454     1C 4E 05 F1 | 	add	fp, #28
09458     A7 04 62 FC | 	wrlong	arg03, fp
0945c     1C 4E 85 F1 | 	sub	fp, #28
09460     A7 04 02 FB | 	rdlong	arg03, fp
09464     18 4E 05 F1 | 	add	fp, #24
09468     A7 00 68 FC | 	wrlong	#0, fp
0946c     14 04 06 F1 | 	add	arg03, #20
09470     02 01 68 FC | 	wrlong	#0, arg03
09474     14 4E 85 F1 | 	sub	fp, #20
09478     A7 04 02 FB | 	rdlong	arg03, fp
0947c     08 4E 85 F1 | 	sub	fp, #8
09480     01 04 16 F2 | 	cmp	arg03, #1 wc
09484     E4 03 90 CD |  if_b	jmp	#LR__1247
09488     10 4E 05 F1 | 	add	fp, #16
0948c     A7 04 02 FB | 	rdlong	arg03, fp
09490     0A 04 06 F1 | 	add	arg03, #10
09494     02 07 E2 FA | 	rdword	arg04, arg03
09498     09 06 66 F0 | 	shl	arg04, #9
0949c     08 4E 05 F1 | 	add	fp, #8
094a0     A7 06 62 FC | 	wrlong	arg04, fp
094a4     08 4E 05 F1 | 	add	fp, #8
094a8     A7 06 02 FB | 	rdlong	arg04, fp
094ac     20 4E 85 F1 | 	sub	fp, #32
094b0     01 06 16 F2 | 	cmp	arg04, #1 wc
094b4     AC 00 90 CD |  if_b	jmp	#LR__1232
094b8     08 4E 05 F1 | 	add	fp, #8
094bc     A7 06 02 FB | 	rdlong	arg04, fp
094c0     01 06 86 F1 | 	sub	arg04, #1
094c4     10 4E 05 F1 | 	add	fp, #16
094c8     A7 04 02 FB | 	rdlong	arg03, fp
094cc     02 07 12 FD | 	qdiv	arg04, arg03
094d0     08 4E 05 F1 | 	add	fp, #8
094d4     A7 EA 01 FB | 	rdlong	result1, fp
094d8     01 EA 85 F1 | 	sub	result1, #1
094dc     18 06 62 FD | 	getqx	arg04
094e0     02 EB 11 FD | 	qdiv	result1, arg03
094e4     20 4E 85 F1 | 	sub	fp, #32
094e8     18 04 62 FD | 	getqx	arg03
094ec     02 07 12 F2 | 	cmp	arg04, arg03 wc
094f0     70 00 90 CD |  if_b	jmp	#LR__1232
094f4     04 4E 05 F1 | 	add	fp, #4
094f8     A7 04 02 FB | 	rdlong	arg03, fp
094fc     1C 4E 05 F1 | 	add	fp, #28
09500     A7 EA 01 FB | 	rdlong	result1, fp
09504     01 EA 85 F1 | 	sub	result1, #1
09508     08 4E 85 F1 | 	sub	fp, #8
0950c     A7 06 02 FB | 	rdlong	arg04, fp
09510     01 06 86 F1 | 	sub	arg04, #1
09514     03 EB 21 F5 | 	andn	result1, arg04
09518     14 04 06 F1 | 	add	arg03, #20
0951c     02 EB 61 FC | 	wrlong	result1, arg03
09520     10 4E 85 F1 | 	sub	fp, #16
09524     A7 04 02 FB | 	rdlong	arg03, fp
09528     04 4E 85 F1 | 	sub	fp, #4
0952c     A7 06 02 FB | 	rdlong	arg04, fp
09530     14 06 06 F1 | 	add	arg04, #20
09534     03 07 02 FB | 	rdlong	arg04, arg04
09538     03 05 82 F1 | 	sub	arg03, arg04
0953c     04 4E 05 F1 | 	add	fp, #4
09540     A7 04 62 FC | 	wrlong	arg03, fp
09544     04 4E 85 F1 | 	sub	fp, #4
09548     A7 04 02 FB | 	rdlong	arg03, fp
0954c     18 04 06 F1 | 	add	arg03, #24
09550     02 05 02 FB | 	rdlong	arg03, arg03
09554     10 4E 05 F1 | 	add	fp, #16
09558     A7 04 62 FC | 	wrlong	arg03, fp
0955c     14 4E 85 F1 | 	sub	fp, #20
09560     D0 00 90 FD | 	jmp	#LR__1236
09564                 | LR__1232
09564     04 4E 05 F1 | 	add	fp, #4
09568     A7 04 02 FB | 	rdlong	arg03, fp
0956c     08 04 06 F1 | 	add	arg03, #8
09570     02 05 0A FB | 	rdlong	arg03, arg03 wz
09574     10 4E 05 F1 | 	add	fp, #16
09578     A7 04 62 FC | 	wrlong	arg03, fp
0957c     14 4E 85 F1 | 	sub	fp, #20
09580     94 00 90 5D |  if_ne	jmp	#LR__1235
09584     04 4E 05 F1 | 	add	fp, #4
09588     A7 00 02 FB | 	rdlong	arg01, fp
0958c     04 4E 85 F1 | 	sub	fp, #4
09590     00 02 06 F6 | 	mov	arg02, #0
09594     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
09598     14 4E 05 F1 | 	add	fp, #20
0959c     A7 EA 61 FC | 	wrlong	result1, fp
095a0     14 4E 85 F1 | 	sub	fp, #20
095a4     01 EA 0D F2 | 	cmp	result1, #1 wz
095a8     1C 00 90 5D |  if_ne	jmp	#LR__1233
095ac     04 4E 05 F1 | 	add	fp, #4
095b0     A7 04 02 FB | 	rdlong	arg03, fp
095b4     04 4E 85 F1 | 	sub	fp, #4
095b8     11 04 06 F1 | 	add	arg03, #17
095bc     02 05 48 FC | 	wrbyte	#2, arg03
095c0     02 EA 05 F6 | 	mov	result1, #2
095c4     5C 04 90 FD | 	jmp	#LR__1253
095c8                 | LR__1233
095c8     14 4E 05 F1 | 	add	fp, #20
095cc     A7 EA 01 FB | 	rdlong	result1, fp
095d0     14 4E 85 F1 | 	sub	fp, #20
095d4     FF FF 7F FF 
095d8     FF EB 0D F2 | 	cmp	result1, ##-1 wz
095dc     1C 00 90 5D |  if_ne	jmp	#LR__1234
095e0     04 4E 05 F1 | 	add	fp, #4
095e4     A7 04 02 FB | 	rdlong	arg03, fp
095e8     04 4E 85 F1 | 	sub	fp, #4
095ec     11 04 06 F1 | 	add	arg03, #17
095f0     02 03 48 FC | 	wrbyte	#1, arg03
095f4     01 EA 05 F6 | 	mov	result1, #1
095f8     28 04 90 FD | 	jmp	#LR__1253
095fc                 | LR__1234
095fc     04 4E 05 F1 | 	add	fp, #4
09600     A7 04 02 FB | 	rdlong	arg03, fp
09604     10 4E 05 F1 | 	add	fp, #16
09608     A7 06 02 FB | 	rdlong	arg04, fp
0960c     14 4E 85 F1 | 	sub	fp, #20
09610     08 04 06 F1 | 	add	arg03, #8
09614     02 07 62 FC | 	wrlong	arg04, arg03
09618                 | LR__1235
09618     04 4E 05 F1 | 	add	fp, #4
0961c     A7 04 02 FB | 	rdlong	arg03, fp
09620     10 4E 05 F1 | 	add	fp, #16
09624     A7 06 02 FB | 	rdlong	arg04, fp
09628     14 4E 85 F1 | 	sub	fp, #20
0962c     18 04 06 F1 | 	add	arg03, #24
09630     02 07 62 FC | 	wrlong	arg04, arg03
09634                 | LR__1236
09634     14 4E 05 F1 | 	add	fp, #20
09638     A7 04 0A FB | 	rdlong	arg03, fp wz
0963c     14 4E 85 F1 | 	sub	fp, #20
09640     28 02 90 AD |  if_e	jmp	#LR__1246
09644                 | ' 				while (ofs > bcs) {
09644                 | LR__1237
09644     08 4E 05 F1 | 	add	fp, #8
09648     A7 06 02 FB | 	rdlong	arg04, fp
0964c     10 4E 05 F1 | 	add	fp, #16
09650     A7 04 02 FB | 	rdlong	arg03, fp
09654     18 4E 85 F1 | 	sub	fp, #24
09658     02 07 1A F2 | 	cmp	arg04, arg03 wcz
0965c     68 01 90 ED |  if_be	jmp	#LR__1243
09660     08 4E 05 F1 | 	add	fp, #8
09664     A7 06 02 FB | 	rdlong	arg04, fp
09668     10 4E 05 F1 | 	add	fp, #16
0966c     A7 04 02 FB | 	rdlong	arg03, fp
09670     02 07 82 F1 | 	sub	arg04, arg03
09674     10 4E 85 F1 | 	sub	fp, #16
09678     A7 06 62 FC | 	wrlong	arg04, fp
0967c     04 4E 85 F1 | 	sub	fp, #4
09680     A7 06 02 FB | 	rdlong	arg04, fp
09684     03 EB 01 F6 | 	mov	result1, arg04
09688     14 06 06 F1 | 	add	arg04, #20
0968c     03 07 02 FB | 	rdlong	arg04, arg04
09690     14 4E 05 F1 | 	add	fp, #20
09694     A7 04 02 FB | 	rdlong	arg03, fp
09698     02 07 02 F1 | 	add	arg04, arg03
0969c     14 EA 05 F1 | 	add	result1, #20
096a0     F5 06 62 FC | 	wrlong	arg04, result1
096a4     14 4E 85 F1 | 	sub	fp, #20
096a8     A7 04 02 FB | 	rdlong	arg03, fp
096ac     04 4E 85 F1 | 	sub	fp, #4
096b0     10 04 06 F1 | 	add	arg03, #16
096b4     02 05 C2 FA | 	rdbyte	arg03, arg03
096b8     02 04 CE F7 | 	test	arg03, #2 wz
096bc     3C 00 90 AD |  if_e	jmp	#LR__1238
096c0     04 4E 05 F1 | 	add	fp, #4
096c4     A7 00 02 FB | 	rdlong	arg01, fp
096c8     10 4E 05 F1 | 	add	fp, #16
096cc     A7 02 02 FB | 	rdlong	arg02, fp
096d0     14 4E 85 F1 | 	sub	fp, #20
096d4     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
096d8     14 4E 05 F1 | 	add	fp, #20
096dc     A7 EA 61 FC | 	wrlong	result1, fp
096e0     00 EA 4D F2 | 	cmps	result1, #0 wz
096e4     14 4E 85 F1 | 	sub	fp, #20
096e8     08 4E 05 A1 |  if_e	add	fp, #8
096ec     A7 00 68 AC |  if_e	wrlong	#0, fp
096f0     08 4E 85 A1 |  if_e	sub	fp, #8
096f4                 | ' 							ofs = 0; break;
096f4     D0 00 90 AD |  if_e	jmp	#LR__1243
096f8     24 00 90 FD | 	jmp	#LR__1239
096fc                 | LR__1238
096fc     04 4E 05 F1 | 	add	fp, #4
09700     A7 00 02 FB | 	rdlong	arg01, fp
09704     10 4E 05 F1 | 	add	fp, #16
09708     A7 02 02 FB | 	rdlong	arg02, fp
0970c     14 4E 85 F1 | 	sub	fp, #20
09710     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
09714     14 4E 05 F1 | 	add	fp, #20
09718     A7 EA 61 FC | 	wrlong	result1, fp
0971c     14 4E 85 F1 | 	sub	fp, #20
09720                 | LR__1239
09720     14 4E 05 F1 | 	add	fp, #20
09724     A7 04 02 FB | 	rdlong	arg03, fp
09728     14 4E 85 F1 | 	sub	fp, #20
0972c     FF FF 7F FF 
09730     FF 05 0E F2 | 	cmp	arg03, ##-1 wz
09734     1C 00 90 5D |  if_ne	jmp	#LR__1240
09738     04 4E 05 F1 | 	add	fp, #4
0973c     A7 04 02 FB | 	rdlong	arg03, fp
09740     04 4E 85 F1 | 	sub	fp, #4
09744     11 04 06 F1 | 	add	arg03, #17
09748     02 03 48 FC | 	wrbyte	#1, arg03
0974c     01 EA 05 F6 | 	mov	result1, #1
09750     D0 02 90 FD | 	jmp	#LR__1253
09754                 | LR__1240
09754     14 4E 05 F1 | 	add	fp, #20
09758     A7 04 02 FB | 	rdlong	arg03, fp
0975c     14 4E 85 F1 | 	sub	fp, #20
09760     02 04 16 F2 | 	cmp	arg03, #2 wc
09764     24 00 90 CD |  if_b	jmp	#LR__1241
09768     10 4E 05 F1 | 	add	fp, #16
0976c     A7 06 02 FB | 	rdlong	arg04, fp
09770     04 4E 05 F1 | 	add	fp, #4
09774     A7 04 02 FB | 	rdlong	arg03, fp
09778     14 4E 85 F1 | 	sub	fp, #20
0977c     18 06 06 F1 | 	add	arg04, #24
09780     03 07 02 FB | 	rdlong	arg04, arg04
09784     03 05 12 F2 | 	cmp	arg03, arg04 wc
09788     1C 00 90 CD |  if_b	jmp	#LR__1242
0978c                 | LR__1241
0978c     04 4E 05 F1 | 	add	fp, #4
09790     A7 04 02 FB | 	rdlong	arg03, fp
09794     04 4E 85 F1 | 	sub	fp, #4
09798     11 04 06 F1 | 	add	arg03, #17
0979c     02 05 48 FC | 	wrbyte	#2, arg03
097a0     02 EA 05 F6 | 	mov	result1, #2
097a4     7C 02 90 FD | 	jmp	#LR__1253
097a8                 | LR__1242
097a8     04 4E 05 F1 | 	add	fp, #4
097ac     A7 06 02 FB | 	rdlong	arg04, fp
097b0     10 4E 05 F1 | 	add	fp, #16
097b4     A7 04 02 FB | 	rdlong	arg03, fp
097b8     14 4E 85 F1 | 	sub	fp, #20
097bc     18 06 06 F1 | 	add	arg04, #24
097c0     03 05 62 FC | 	wrlong	arg03, arg04
097c4     7C FE 9F FD | 	jmp	#LR__1237
097c8                 | LR__1243
097c8     04 4E 05 F1 | 	add	fp, #4
097cc     A7 04 02 FB | 	rdlong	arg03, fp
097d0     02 01 02 F6 | 	mov	arg01, arg03
097d4     14 04 06 F1 | 	add	arg03, #20
097d8     02 03 02 FB | 	rdlong	arg02, arg03
097dc     04 4E 05 F1 | 	add	fp, #4
097e0     A7 04 02 FB | 	rdlong	arg03, fp
097e4     02 03 02 F1 | 	add	arg02, arg03
097e8     14 00 06 F1 | 	add	arg01, #20
097ec     00 03 62 FC | 	wrlong	arg02, arg01
097f0     A7 04 02 FB | 	rdlong	arg03, fp
097f4     08 4E 85 F1 | 	sub	fp, #8
097f8     FF 05 CE F7 | 	test	arg03, #511 wz
097fc     6C 00 90 AD |  if_e	jmp	#LR__1245
09800     10 4E 05 F1 | 	add	fp, #16
09804     A7 00 02 FB | 	rdlong	arg01, fp
09808     04 4E 05 F1 | 	add	fp, #4
0980c     A7 02 02 FB | 	rdlong	arg02, fp
09810     14 4E 85 F1 | 	sub	fp, #20
09814     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
09818     1C 4E 05 F1 | 	add	fp, #28
0981c     A7 EA 61 FC | 	wrlong	result1, fp
09820     1C 4E 85 F1 | 	sub	fp, #28
09824     00 EA 0D F2 | 	cmp	result1, #0 wz
09828     1C 00 90 5D |  if_ne	jmp	#LR__1244
0982c     04 4E 05 F1 | 	add	fp, #4
09830     A7 04 02 FB | 	rdlong	arg03, fp
09834     04 4E 85 F1 | 	sub	fp, #4
09838     11 04 06 F1 | 	add	arg03, #17
0983c     02 05 48 FC | 	wrbyte	#2, arg03
09840     02 EA 05 F6 | 	mov	result1, #2
09844     DC 01 90 FD | 	jmp	#LR__1253
09848                 | LR__1244
09848     1C 4E 05 F1 | 	add	fp, #28
0984c     A7 06 02 FB | 	rdlong	arg04, fp
09850     14 4E 85 F1 | 	sub	fp, #20
09854     A7 04 02 FB | 	rdlong	arg03, fp
09858     09 04 46 F0 | 	shr	arg03, #9
0985c     02 07 02 F1 | 	add	arg04, arg03
09860     14 4E 05 F1 | 	add	fp, #20
09864     A7 06 62 FC | 	wrlong	arg04, fp
09868     1C 4E 85 F1 | 	sub	fp, #28
0986c                 | LR__1245
0986c                 | LR__1246
0986c                 | LR__1247
0986c     04 4E 05 F1 | 	add	fp, #4
09870     A7 06 02 FB | 	rdlong	arg04, fp
09874     03 05 02 F6 | 	mov	arg03, arg04
09878     04 4E 85 F1 | 	sub	fp, #4
0987c     14 04 06 F1 | 	add	arg03, #20
09880     02 05 02 FB | 	rdlong	arg03, arg03
09884     0C 06 06 F1 | 	add	arg04, #12
09888     03 07 02 FB | 	rdlong	arg04, arg04
0988c     03 05 1A F2 | 	cmp	arg03, arg04 wcz
09890     3C 00 90 ED |  if_be	jmp	#LR__1248
09894     04 4E 05 F1 | 	add	fp, #4
09898     A7 06 02 FB | 	rdlong	arg04, fp
0989c     03 05 02 F6 | 	mov	arg03, arg04
098a0     14 06 06 F1 | 	add	arg04, #20
098a4     03 07 02 FB | 	rdlong	arg04, arg04
098a8     0C 04 06 F1 | 	add	arg03, #12
098ac     02 07 62 FC | 	wrlong	arg04, arg03
098b0     A7 06 02 FB | 	rdlong	arg04, fp
098b4     03 05 02 F6 | 	mov	arg03, arg04
098b8     04 4E 85 F1 | 	sub	fp, #4
098bc     10 06 06 F1 | 	add	arg04, #16
098c0     03 07 C2 FA | 	rdbyte	arg04, arg04
098c4     40 06 46 F5 | 	or	arg04, #64
098c8     10 04 06 F1 | 	add	arg03, #16
098cc     02 07 42 FC | 	wrbyte	arg04, arg03
098d0                 | LR__1248
098d0     04 4E 05 F1 | 	add	fp, #4
098d4     A7 04 02 FB | 	rdlong	arg03, fp
098d8     04 4E 85 F1 | 	sub	fp, #4
098dc     14 04 06 F1 | 	add	arg03, #20
098e0     02 05 02 FB | 	rdlong	arg03, arg03
098e4     FF 05 CE F7 | 	test	arg03, #511 wz
098e8     2C 01 90 AD |  if_e	jmp	#LR__1252
098ec     04 4E 05 F1 | 	add	fp, #4
098f0     A7 06 02 FB | 	rdlong	arg04, fp
098f4     18 4E 05 F1 | 	add	fp, #24
098f8     A7 04 02 FB | 	rdlong	arg03, fp
098fc     1C 4E 85 F1 | 	sub	fp, #28
09900     1C 06 06 F1 | 	add	arg04, #28
09904     03 07 02 FB | 	rdlong	arg04, arg04
09908     03 05 0A F2 | 	cmp	arg03, arg04 wz
0990c     08 01 90 AD |  if_e	jmp	#LR__1252
09910     04 4E 05 F1 | 	add	fp, #4
09914     A7 04 02 FB | 	rdlong	arg03, fp
09918     04 4E 85 F1 | 	sub	fp, #4
0991c     10 04 06 F1 | 	add	arg03, #16
09920     02 05 C2 FA | 	rdbyte	arg03, arg03
09924     80 04 CE F7 | 	test	arg03, #128 wz
09928     7C 00 90 AD |  if_e	jmp	#LR__1250
0992c     10 4E 05 F1 | 	add	fp, #16
09930     A7 04 02 FB | 	rdlong	arg03, fp
09934     01 04 06 F1 | 	add	arg03, #1
09938     02 01 C2 FA | 	rdbyte	arg01, arg03
0993c     0C 4E 85 F1 | 	sub	fp, #12
09940     A7 04 02 FB | 	rdlong	arg03, fp
09944     02 03 02 F6 | 	mov	arg02, arg03
09948     28 02 06 F1 | 	add	arg02, #40
0994c     04 4E 85 F1 | 	sub	fp, #4
09950     1C 04 06 F1 | 	add	arg03, #28
09954     02 05 02 FB | 	rdlong	arg03, arg03
09958     01 06 06 F6 | 	mov	arg04, #1
0995c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
09960     00 EA 0D F2 | 	cmp	result1, #0 wz
09964     1C 00 90 AD |  if_e	jmp	#LR__1249
09968     04 4E 05 F1 | 	add	fp, #4
0996c     A7 04 02 FB | 	rdlong	arg03, fp
09970     04 4E 85 F1 | 	sub	fp, #4
09974     11 04 06 F1 | 	add	arg03, #17
09978     02 03 48 FC | 	wrbyte	#1, arg03
0997c     01 EA 05 F6 | 	mov	result1, #1
09980     A0 00 90 FD | 	jmp	#LR__1253
09984                 | LR__1249
09984     04 4E 05 F1 | 	add	fp, #4
09988     A7 06 02 FB | 	rdlong	arg04, fp
0998c     03 05 02 F6 | 	mov	arg03, arg04
09990     04 4E 85 F1 | 	sub	fp, #4
09994     10 06 06 F1 | 	add	arg04, #16
09998     03 07 C2 FA | 	rdbyte	arg04, arg04
0999c     7F 06 06 F5 | 	and	arg04, #127
099a0     10 04 06 F1 | 	add	arg03, #16
099a4     02 07 42 FC | 	wrbyte	arg04, arg03
099a8                 | LR__1250
099a8     10 4E 05 F1 | 	add	fp, #16
099ac     A7 04 02 FB | 	rdlong	arg03, fp
099b0     01 04 06 F1 | 	add	arg03, #1
099b4     02 01 C2 FA | 	rdbyte	arg01, arg03
099b8     0C 4E 85 F1 | 	sub	fp, #12
099bc     A7 02 02 FB | 	rdlong	arg02, fp
099c0     28 02 06 F1 | 	add	arg02, #40
099c4     18 4E 05 F1 | 	add	fp, #24
099c8     A7 04 02 FB | 	rdlong	arg03, fp
099cc     1C 4E 85 F1 | 	sub	fp, #28
099d0     01 06 06 F6 | 	mov	arg04, #1
099d4     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
099d8     00 EA 0D F2 | 	cmp	result1, #0 wz
099dc     1C 00 90 AD |  if_e	jmp	#LR__1251
099e0     04 4E 05 F1 | 	add	fp, #4
099e4     A7 04 02 FB | 	rdlong	arg03, fp
099e8     04 4E 85 F1 | 	sub	fp, #4
099ec     11 04 06 F1 | 	add	arg03, #17
099f0     02 03 48 FC | 	wrbyte	#1, arg03
099f4     01 EA 05 F6 | 	mov	result1, #1
099f8     28 00 90 FD | 	jmp	#LR__1253
099fc                 | LR__1251
099fc     04 4E 05 F1 | 	add	fp, #4
09a00     A7 06 02 FB | 	rdlong	arg04, fp
09a04     18 4E 05 F1 | 	add	fp, #24
09a08     A7 04 02 FB | 	rdlong	arg03, fp
09a0c     1C 4E 85 F1 | 	sub	fp, #28
09a10     1C 06 06 F1 | 	add	arg04, #28
09a14     03 05 62 FC | 	wrlong	arg03, arg04
09a18                 | LR__1252
09a18                 | ' 
09a18                 | ' 			fp->sect = nsect;
09a18                 | ' 		}
09a18                 | ' 	}
09a18                 | ' 
09a18                 | ' 	return res ;
09a18     0C 4E 05 F1 | 	add	fp, #12
09a1c     A7 EA 01 FB | 	rdlong	result1, fp
09a20     0C 4E 85 F1 | 	sub	fp, #12
09a24                 | LR__1253
09a24     A7 F0 03 F6 | 	mov	ptra, fp
09a28     B2 00 A0 FD | 	call	#popregs_
09a2c                 | _fatfs_cc_f_lseek_ret
09a2c     2D 00 64 FD | 	ret
09a30                 | 
09a30                 | _fatfs_cc_f_opendir
09a30     01 4A 05 F6 | 	mov	COUNT_, #1
09a34     A8 00 A0 FD | 	call	#pushregs_
09a38     14 F0 07 F1 | 	add	ptra, #20
09a3c     04 4E 05 F1 | 	add	fp, #4
09a40     A7 00 62 FC | 	wrlong	arg01, fp
09a44     04 4E 05 F1 | 	add	fp, #4
09a48     A7 02 62 FC | 	wrlong	arg02, fp
09a4c     04 4E 85 F1 | 	sub	fp, #4
09a50     A7 04 0A FB | 	rdlong	arg03, fp wz
09a54     04 4E 85 F1 | 	sub	fp, #4
09a58     09 EA 05 A6 |  if_e	mov	result1, #9
09a5c     78 01 90 AD |  if_e	jmp	#LR__1266
09a60     08 4E 05 F1 | 	add	fp, #8
09a64     A7 00 02 F6 | 	mov	arg01, fp
09a68     08 4E 05 F1 | 	add	fp, #8
09a6c     A7 02 02 F6 | 	mov	arg02, fp
09a70     10 4E 85 F1 | 	sub	fp, #16
09a74     00 04 06 F6 | 	mov	arg03, #0
09a78     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
09a7c     0C 4E 05 F1 | 	add	fp, #12
09a80     A7 EA 61 FC | 	wrlong	result1, fp
09a84     0C 4E 85 F1 | 	sub	fp, #12
09a88     00 EA 0D F2 | 	cmp	result1, #0 wz
09a8c     20 01 90 5D |  if_ne	jmp	#LR__1265
09a90     04 4E 05 F1 | 	add	fp, #4
09a94     A7 04 02 FB | 	rdlong	arg03, fp
09a98     0C 4E 05 F1 | 	add	fp, #12
09a9c     A7 EA 01 FB | 	rdlong	result1, fp
09aa0     02 EB 61 FC | 	wrlong	result1, arg03
09aa4     0C 4E 85 F1 | 	sub	fp, #12
09aa8     A7 00 02 FB | 	rdlong	arg01, fp
09aac     04 4E 05 F1 | 	add	fp, #4
09ab0     A7 02 02 FB | 	rdlong	arg02, fp
09ab4     08 4E 85 F1 | 	sub	fp, #8
09ab8     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
09abc     0C 4E 05 F1 | 	add	fp, #12
09ac0     A7 EA 61 FC | 	wrlong	result1, fp
09ac4     0C 4E 85 F1 | 	sub	fp, #12
09ac8     00 EA 0D F2 | 	cmp	result1, #0 wz
09acc     C4 00 90 5D |  if_ne	jmp	#LR__1264
09ad0     04 4E 05 F1 | 	add	fp, #4
09ad4     A7 04 02 FB | 	rdlong	arg03, fp
09ad8     04 4E 85 F1 | 	sub	fp, #4
09adc     2B 04 06 F1 | 	add	arg03, #43
09ae0     02 05 C2 FA | 	rdbyte	arg03, arg03
09ae4     80 04 CE F7 | 	test	arg03, #128 wz
09ae8     58 00 90 5D |  if_ne	jmp	#LR__1262
09aec     04 4E 05 F1 | 	add	fp, #4
09af0     A7 04 02 FB | 	rdlong	arg03, fp
09af4     04 4E 85 F1 | 	sub	fp, #4
09af8     06 04 06 F1 | 	add	arg03, #6
09afc     02 05 C2 FA | 	rdbyte	arg03, arg03
09b00     10 04 CE F7 | 	test	arg03, #16 wz
09b04     30 00 90 AD |  if_e	jmp	#LR__1260
09b08     04 4E 05 F1 | 	add	fp, #4
09b0c     A7 04 02 FB | 	rdlong	arg03, fp
09b10     02 0B 02 F6 | 	mov	local01, arg03
09b14     0C 4E 05 F1 | 	add	fp, #12
09b18     A7 00 02 FB | 	rdlong	arg01, fp
09b1c     10 4E 85 F1 | 	sub	fp, #16
09b20     1C 04 06 F1 | 	add	arg03, #28
09b24     02 03 02 FB | 	rdlong	arg02, arg03
09b28     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
09b2c     08 0A 06 F1 | 	add	local01, #8
09b30     05 EB 61 FC | 	wrlong	result1, local01
09b34     0C 00 90 FD | 	jmp	#LR__1261
09b38                 | LR__1260
09b38     0C 4E 05 F1 | 	add	fp, #12
09b3c     A7 0A 68 FC | 	wrlong	#5, fp
09b40     0C 4E 85 F1 | 	sub	fp, #12
09b44                 | LR__1261
09b44                 | LR__1262
09b44     0C 4E 05 F1 | 	add	fp, #12
09b48     A7 0A 0A FB | 	rdlong	local01, fp wz
09b4c     0C 4E 85 F1 | 	sub	fp, #12
09b50     40 00 90 5D |  if_ne	jmp	#LR__1263
09b54     04 4E 05 F1 | 	add	fp, #4
09b58     A7 0A 02 FB | 	rdlong	local01, fp
09b5c     0C 4E 05 F1 | 	add	fp, #12
09b60     A7 04 02 FB | 	rdlong	arg03, fp
09b64     06 04 06 F1 | 	add	arg03, #6
09b68     02 05 E2 FA | 	rdword	arg03, arg03
09b6c     04 0A 06 F1 | 	add	local01, #4
09b70     05 05 52 FC | 	wrword	arg03, local01
09b74     0C 4E 85 F1 | 	sub	fp, #12
09b78     A7 00 02 FB | 	rdlong	arg01, fp
09b7c     04 4E 85 F1 | 	sub	fp, #4
09b80     00 02 06 F6 | 	mov	arg02, #0
09b84     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
09b88     0C 4E 05 F1 | 	add	fp, #12
09b8c     A7 EA 61 FC | 	wrlong	result1, fp
09b90     0C 4E 85 F1 | 	sub	fp, #12
09b94                 | LR__1263
09b94                 | LR__1264
09b94     0C 4E 05 F1 | 	add	fp, #12
09b98     A7 0A 02 FB | 	rdlong	local01, fp
09b9c     0C 4E 85 F1 | 	sub	fp, #12
09ba0     04 0A 0E F2 | 	cmp	local01, #4 wz
09ba4     0C 4E 05 A1 |  if_e	add	fp, #12
09ba8     A7 0A 68 AC |  if_e	wrlong	#5, fp
09bac     0C 4E 85 A1 |  if_e	sub	fp, #12
09bb0                 | LR__1265
09bb0     0C 4E 05 F1 | 	add	fp, #12
09bb4     A7 0A 0A FB | 	rdlong	local01, fp wz
09bb8     0C 4E 85 F1 | 	sub	fp, #12
09bbc     04 4E 05 51 |  if_ne	add	fp, #4
09bc0     A7 0A 02 5B |  if_ne	rdlong	local01, fp
09bc4     04 4E 85 51 |  if_ne	sub	fp, #4
09bc8     05 01 68 5C |  if_ne	wrlong	#0, local01
09bcc                 | ' 
09bcc                 | ' 	return res ;
09bcc     0C 4E 05 F1 | 	add	fp, #12
09bd0     A7 EA 01 FB | 	rdlong	result1, fp
09bd4     0C 4E 85 F1 | 	sub	fp, #12
09bd8                 | LR__1266
09bd8     A7 F0 03 F6 | 	mov	ptra, fp
09bdc     B2 00 A0 FD | 	call	#popregs_
09be0                 | _fatfs_cc_f_opendir_ret
09be0     2D 00 64 FD | 	ret
09be4                 | 
09be4                 | _fatfs_cc_f_closedir
09be4     00 4A 05 F6 | 	mov	COUNT_, #0
09be8     A8 00 A0 FD | 	call	#pushregs_
09bec     10 F0 07 F1 | 	add	ptra, #16
09bf0     04 4E 05 F1 | 	add	fp, #4
09bf4     A7 00 62 FC | 	wrlong	arg01, fp
09bf8     08 4E 05 F1 | 	add	fp, #8
09bfc     A7 02 02 F6 | 	mov	arg02, fp
09c00     0C 4E 85 F1 | 	sub	fp, #12
09c04     C0 DD BF FD | 	call	#_fatfs_cc_validate
09c08     08 4E 05 F1 | 	add	fp, #8
09c0c     A7 EA 61 FC | 	wrlong	result1, fp
09c10     08 4E 85 F1 | 	sub	fp, #8
09c14     00 EA 0D F2 | 	cmp	result1, #0 wz
09c18     04 4E 05 A1 |  if_e	add	fp, #4
09c1c     A7 EA 01 AB |  if_e	rdlong	result1, fp
09c20     04 4E 85 A1 |  if_e	sub	fp, #4
09c24     F5 00 68 AC |  if_e	wrlong	#0, result1
09c28                 | ' 
09c28                 | ' 
09c28                 | ' 
09c28                 | ' 
09c28                 | ' 		dp->obj.fs = 0;
09c28                 | ' #line 4633 "ff.c"
09c28                 | ' 	}
09c28                 | ' 	return res;
09c28     08 4E 05 F1 | 	add	fp, #8
09c2c     A7 EA 01 FB | 	rdlong	result1, fp
09c30     08 4E 85 F1 | 	sub	fp, #8
09c34     A7 F0 03 F6 | 	mov	ptra, fp
09c38     B2 00 A0 FD | 	call	#popregs_
09c3c                 | _fatfs_cc_f_closedir_ret
09c3c     2D 00 64 FD | 	ret
09c40                 | 
09c40                 | _fatfs_cc_f_readdir
09c40     00 4A 05 F6 | 	mov	COUNT_, #0
09c44     A8 00 A0 FD | 	call	#pushregs_
09c48     14 F0 07 F1 | 	add	ptra, #20
09c4c     04 4E 05 F1 | 	add	fp, #4
09c50     A7 00 62 FC | 	wrlong	arg01, fp
09c54     04 4E 05 F1 | 	add	fp, #4
09c58     A7 02 62 FC | 	wrlong	arg02, fp
09c5c     04 4E 85 F1 | 	sub	fp, #4
09c60     A7 00 02 FB | 	rdlong	arg01, fp
09c64     0C 4E 05 F1 | 	add	fp, #12
09c68     A7 02 02 F6 | 	mov	arg02, fp
09c6c     10 4E 85 F1 | 	sub	fp, #16
09c70     54 DD BF FD | 	call	#_fatfs_cc_validate
09c74     0C 4E 05 F1 | 	add	fp, #12
09c78     A7 EA 61 FC | 	wrlong	result1, fp
09c7c     0C 4E 85 F1 | 	sub	fp, #12
09c80     00 EA 0D F2 | 	cmp	result1, #0 wz
09c84     BC 00 90 5D |  if_ne	jmp	#LR__1273
09c88     08 4E 05 F1 | 	add	fp, #8
09c8c     A7 EA 09 FB | 	rdlong	result1, fp wz
09c90     08 4E 85 F1 | 	sub	fp, #8
09c94     24 00 90 5D |  if_ne	jmp	#LR__1270
09c98     04 4E 05 F1 | 	add	fp, #4
09c9c     A7 00 02 FB | 	rdlong	arg01, fp
09ca0     04 4E 85 F1 | 	sub	fp, #4
09ca4     00 02 06 F6 | 	mov	arg02, #0
09ca8     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
09cac     0C 4E 05 F1 | 	add	fp, #12
09cb0     A7 EA 61 FC | 	wrlong	result1, fp
09cb4     0C 4E 85 F1 | 	sub	fp, #12
09cb8     88 00 90 FD | 	jmp	#LR__1272
09cbc                 | LR__1270
09cbc     04 4E 05 F1 | 	add	fp, #4
09cc0     A7 00 02 FB | 	rdlong	arg01, fp
09cc4     04 4E 85 F1 | 	sub	fp, #4
09cc8     00 02 06 F6 | 	mov	arg02, #0
09ccc     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
09cd0     0C 4E 05 F1 | 	add	fp, #12
09cd4     A7 EA 61 FC | 	wrlong	result1, fp
09cd8     0C 4E 85 F1 | 	sub	fp, #12
09cdc     04 EA 0D F2 | 	cmp	result1, #4 wz
09ce0     0C 4E 05 A1 |  if_e	add	fp, #12
09ce4     A7 00 68 AC |  if_e	wrlong	#0, fp
09ce8     0C 4E 85 A1 |  if_e	sub	fp, #12
09cec     0C 4E 05 F1 | 	add	fp, #12
09cf0     A7 EA 09 FB | 	rdlong	result1, fp wz
09cf4     0C 4E 85 F1 | 	sub	fp, #12
09cf8     48 00 90 5D |  if_ne	jmp	#LR__1271
09cfc     04 4E 05 F1 | 	add	fp, #4
09d00     A7 00 02 FB | 	rdlong	arg01, fp
09d04     04 4E 05 F1 | 	add	fp, #4
09d08     A7 02 02 FB | 	rdlong	arg02, fp
09d0c     08 4E 85 F1 | 	sub	fp, #8
09d10     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
09d14     04 4E 05 F1 | 	add	fp, #4
09d18     A7 00 02 FB | 	rdlong	arg01, fp
09d1c     04 4E 85 F1 | 	sub	fp, #4
09d20     00 02 06 F6 | 	mov	arg02, #0
09d24     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
09d28     0C 4E 05 F1 | 	add	fp, #12
09d2c     A7 EA 61 FC | 	wrlong	result1, fp
09d30     0C 4E 85 F1 | 	sub	fp, #12
09d34     04 EA 0D F2 | 	cmp	result1, #4 wz
09d38     0C 4E 05 A1 |  if_e	add	fp, #12
09d3c     A7 00 68 AC |  if_e	wrlong	#0, fp
09d40     0C 4E 85 A1 |  if_e	sub	fp, #12
09d44                 | LR__1271
09d44                 | LR__1272
09d44                 | LR__1273
09d44                 | ' 			}
09d44                 | ' 			;
09d44                 | ' 		}
09d44                 | ' 	}
09d44                 | ' 	return res ;
09d44     0C 4E 05 F1 | 	add	fp, #12
09d48     A7 EA 01 FB | 	rdlong	result1, fp
09d4c     0C 4E 85 F1 | 	sub	fp, #12
09d50     A7 F0 03 F6 | 	mov	ptra, fp
09d54     B2 00 A0 FD | 	call	#popregs_
09d58                 | _fatfs_cc_f_readdir_ret
09d58     2D 00 64 FD | 	ret
09d5c                 | 
09d5c                 | _fatfs_cc_f_stat
09d5c     00 4A 05 F6 | 	mov	COUNT_, #0
09d60     A8 00 A0 FD | 	call	#pushregs_
09d64     40 F0 07 F1 | 	add	ptra, #64
09d68     04 4E 05 F1 | 	add	fp, #4
09d6c     A7 00 62 FC | 	wrlong	arg01, fp
09d70     04 4E 05 F1 | 	add	fp, #4
09d74     A7 02 62 FC | 	wrlong	arg02, fp
09d78     04 4E 85 F1 | 	sub	fp, #4
09d7c     A7 00 02 F6 | 	mov	arg01, fp
09d80     0C 4E 05 F1 | 	add	fp, #12
09d84     A7 02 02 F6 | 	mov	arg02, fp
09d88     10 4E 85 F1 | 	sub	fp, #16
09d8c     00 04 06 F6 | 	mov	arg03, #0
09d90     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
09d94     0C 4E 05 F1 | 	add	fp, #12
09d98     A7 EA 61 FC | 	wrlong	result1, fp
09d9c     0C 4E 85 F1 | 	sub	fp, #12
09da0     00 EA 0D F2 | 	cmp	result1, #0 wz
09da4     74 00 90 5D |  if_ne	jmp	#LR__1283
09da8     10 4E 05 F1 | 	add	fp, #16
09dac     A7 00 02 F6 | 	mov	arg01, fp
09db0     0C 4E 85 F1 | 	sub	fp, #12
09db4     A7 02 02 FB | 	rdlong	arg02, fp
09db8     04 4E 85 F1 | 	sub	fp, #4
09dbc     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
09dc0     0C 4E 05 F1 | 	add	fp, #12
09dc4     A7 EA 61 FC | 	wrlong	result1, fp
09dc8     0C 4E 85 F1 | 	sub	fp, #12
09dcc     00 EA 0D F2 | 	cmp	result1, #0 wz
09dd0     48 00 90 5D |  if_ne	jmp	#LR__1282
09dd4     3B 4E 05 F1 | 	add	fp, #59
09dd8     A7 EA C1 FA | 	rdbyte	result1, fp
09ddc     3B 4E 85 F1 | 	sub	fp, #59
09de0     80 EA CD F7 | 	test	result1, #128 wz
09de4     0C 4E 05 51 |  if_ne	add	fp, #12
09de8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
09dec     0C 4E 85 51 |  if_ne	sub	fp, #12
09df0     28 00 90 5D |  if_ne	jmp	#LR__1281
09df4     08 4E 05 F1 | 	add	fp, #8
09df8     A7 EA 09 FB | 	rdlong	result1, fp wz
09dfc     08 4E 85 F1 | 	sub	fp, #8
09e00     18 00 90 AD |  if_e	jmp	#LR__1280
09e04     10 4E 05 F1 | 	add	fp, #16
09e08     A7 00 02 F6 | 	mov	arg01, fp
09e0c     08 4E 85 F1 | 	sub	fp, #8
09e10     A7 02 02 FB | 	rdlong	arg02, fp
09e14     08 4E 85 F1 | 	sub	fp, #8
09e18     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
09e1c                 | LR__1280
09e1c                 | LR__1281
09e1c                 | LR__1282
09e1c                 | LR__1283
09e1c                 | ' 			}
09e1c                 | ' 		}
09e1c                 | ' 		;
09e1c                 | ' 	}
09e1c                 | ' 
09e1c                 | ' 	return res ;
09e1c     0C 4E 05 F1 | 	add	fp, #12
09e20     A7 EA 01 FB | 	rdlong	result1, fp
09e24     0C 4E 85 F1 | 	sub	fp, #12
09e28     A7 F0 03 F6 | 	mov	ptra, fp
09e2c     B2 00 A0 FD | 	call	#popregs_
09e30                 | _fatfs_cc_f_stat_ret
09e30     2D 00 64 FD | 	ret
09e34                 | 
09e34                 | _fatfs_cc_f_unlink
09e34     00 4A 05 F6 | 	mov	COUNT_, #0
09e38     A8 00 A0 FD | 	call	#pushregs_
09e3c     74 F0 07 F1 | 	add	ptra, #116
09e40     04 4E 05 F1 | 	add	fp, #4
09e44     A7 00 62 FC | 	wrlong	arg01, fp
09e48     68 4E 05 F1 | 	add	fp, #104
09e4c     A7 00 68 FC | 	wrlong	#0, fp
09e50     68 4E 85 F1 | 	sub	fp, #104
09e54     A7 00 02 F6 | 	mov	arg01, fp
09e58     6C 4E 05 F1 | 	add	fp, #108
09e5c     A7 02 02 F6 | 	mov	arg02, fp
09e60     70 4E 85 F1 | 	sub	fp, #112
09e64     02 04 06 F6 | 	mov	arg03, #2
09e68     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
09e6c     08 4E 05 F1 | 	add	fp, #8
09e70     A7 EA 61 FC | 	wrlong	result1, fp
09e74     08 4E 85 F1 | 	sub	fp, #8
09e78     00 EA 0D F2 | 	cmp	result1, #0 wz
09e7c     E4 01 90 5D |  if_ne	jmp	#LR__1298
09e80     70 4E 05 F1 | 	add	fp, #112
09e84     A7 04 02 FB | 	rdlong	arg03, fp
09e88     64 4E 85 F1 | 	sub	fp, #100
09e8c     A7 04 62 FC | 	wrlong	arg03, fp
09e90     A7 00 02 F6 | 	mov	arg01, fp
09e94     08 4E 85 F1 | 	sub	fp, #8
09e98     A7 02 02 FB | 	rdlong	arg02, fp
09e9c     04 4E 85 F1 | 	sub	fp, #4
09ea0     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
09ea4     08 4E 05 F1 | 	add	fp, #8
09ea8     A7 EA 61 FC | 	wrlong	result1, fp
09eac     00 EA 4D F2 | 	cmps	result1, #0 wz
09eb0     08 4E 85 F1 | 	sub	fp, #8
09eb4     AC 01 90 5D |  if_ne	jmp	#LR__1297
09eb8     37 4E 05 F1 | 	add	fp, #55
09ebc     A7 EA C1 FA | 	rdbyte	result1, fp
09ec0     37 4E 85 F1 | 	sub	fp, #55
09ec4     80 EA CD F7 | 	test	result1, #128 wz
09ec8     08 4E 05 51 |  if_ne	add	fp, #8
09ecc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
09ed0     08 4E 85 51 |  if_ne	sub	fp, #8
09ed4     1C 00 90 5D |  if_ne	jmp	#LR__1290
09ed8     12 4E 05 F1 | 	add	fp, #18
09edc     A7 EA C1 FA | 	rdbyte	result1, fp
09ee0     12 4E 85 F1 | 	sub	fp, #18
09ee4     01 EA CD F7 | 	test	result1, #1 wz
09ee8     08 4E 05 51 |  if_ne	add	fp, #8
09eec     A7 0E 68 5C |  if_ne	wrlong	#7, fp
09ef0     08 4E 85 51 |  if_ne	sub	fp, #8
09ef4                 | LR__1290
09ef4     08 4E 05 F1 | 	add	fp, #8
09ef8     A7 EA 09 FB | 	rdlong	result1, fp wz
09efc     08 4E 85 F1 | 	sub	fp, #8
09f00     C8 00 90 5D |  if_ne	jmp	#LR__1293
09f04     70 4E 05 F1 | 	add	fp, #112
09f08     A7 00 02 FB | 	rdlong	arg01, fp
09f0c     48 4E 85 F1 | 	sub	fp, #72
09f10     A7 02 02 FB | 	rdlong	arg02, fp
09f14     28 4E 85 F1 | 	sub	fp, #40
09f18     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
09f1c     6C 4E 05 F1 | 	add	fp, #108
09f20     A7 EA 61 FC | 	wrlong	result1, fp
09f24     5A 4E 85 F1 | 	sub	fp, #90
09f28     A7 EA C1 FA | 	rdbyte	result1, fp
09f2c     12 4E 85 F1 | 	sub	fp, #18
09f30     10 EA CD F7 | 	test	result1, #16 wz
09f34     94 00 90 AD |  if_e	jmp	#LR__1292
09f38     70 4E 05 F1 | 	add	fp, #112
09f3c     A7 EA 01 FB | 	rdlong	result1, fp
09f40     34 4E 85 F1 | 	sub	fp, #52
09f44     A7 EA 61 FC | 	wrlong	result1, fp
09f48     30 4E 05 F1 | 	add	fp, #48
09f4c     A7 04 02 FB | 	rdlong	arg03, fp
09f50     28 4E 85 F1 | 	sub	fp, #40
09f54     A7 04 62 FC | 	wrlong	arg03, fp
09f58     08 4E 85 F1 | 	sub	fp, #8
09f5c     A7 00 02 F6 | 	mov	arg01, fp
09f60     3C 4E 85 F1 | 	sub	fp, #60
09f64     00 02 06 F6 | 	mov	arg02, #0
09f68     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
09f6c     08 4E 05 F1 | 	add	fp, #8
09f70     A7 EA 61 FC | 	wrlong	result1, fp
09f74     08 4E 85 F1 | 	sub	fp, #8
09f78     00 EA 0D F2 | 	cmp	result1, #0 wz
09f7c     4C 00 90 5D |  if_ne	jmp	#LR__1291
09f80     3C 4E 05 F1 | 	add	fp, #60
09f84     A7 00 02 F6 | 	mov	arg01, fp
09f88     3C 4E 85 F1 | 	sub	fp, #60
09f8c     00 02 06 F6 | 	mov	arg02, #0
09f90     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
09f94     08 4E 05 F1 | 	add	fp, #8
09f98     A7 EA 61 FC | 	wrlong	result1, fp
09f9c     00 EA 4D F2 | 	cmps	result1, #0 wz
09fa0     08 4E 85 F1 | 	sub	fp, #8
09fa4     08 4E 05 A1 |  if_e	add	fp, #8
09fa8     A7 0E 68 AC |  if_e	wrlong	#7, fp
09fac     08 4E 85 A1 |  if_e	sub	fp, #8
09fb0     08 4E 05 F1 | 	add	fp, #8
09fb4     A7 EA 01 FB | 	rdlong	result1, fp
09fb8     08 4E 85 F1 | 	sub	fp, #8
09fbc     04 EA 0D F2 | 	cmp	result1, #4 wz
09fc0     08 4E 05 A1 |  if_e	add	fp, #8
09fc4     A7 00 68 AC |  if_e	wrlong	#0, fp
09fc8     08 4E 85 A1 |  if_e	sub	fp, #8
09fcc                 | LR__1291
09fcc                 | LR__1292
09fcc                 | LR__1293
09fcc     08 4E 05 F1 | 	add	fp, #8
09fd0     A7 EA 09 FB | 	rdlong	result1, fp wz
09fd4     08 4E 85 F1 | 	sub	fp, #8
09fd8     88 00 90 5D |  if_ne	jmp	#LR__1296
09fdc     0C 4E 05 F1 | 	add	fp, #12
09fe0     A7 00 02 F6 | 	mov	arg01, fp
09fe4     0C 4E 85 F1 | 	sub	fp, #12
09fe8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
09fec     08 4E 05 F1 | 	add	fp, #8
09ff0     A7 EA 61 FC | 	wrlong	result1, fp
09ff4     08 4E 85 F1 | 	sub	fp, #8
09ff8     00 EA 0D F2 | 	cmp	result1, #0 wz
09ffc     38 00 90 5D |  if_ne	jmp	#LR__1294
0a000     6C 4E 05 F1 | 	add	fp, #108
0a004     A7 EA 09 FB | 	rdlong	result1, fp wz
0a008     6C 4E 85 F1 | 	sub	fp, #108
0a00c     28 00 90 AD |  if_e	jmp	#LR__1294
0a010     0C 4E 05 F1 | 	add	fp, #12
0a014     A7 00 02 F6 | 	mov	arg01, fp
0a018     60 4E 05 F1 | 	add	fp, #96
0a01c     A7 02 02 FB | 	rdlong	arg02, fp
0a020     6C 4E 85 F1 | 	sub	fp, #108
0a024     00 04 06 F6 | 	mov	arg03, #0
0a028     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
0a02c     08 4E 05 F1 | 	add	fp, #8
0a030     A7 EA 61 FC | 	wrlong	result1, fp
0a034     08 4E 85 F1 | 	sub	fp, #8
0a038                 | LR__1294
0a038     08 4E 05 F1 | 	add	fp, #8
0a03c     A7 EA 09 FB | 	rdlong	result1, fp wz
0a040     08 4E 85 F1 | 	sub	fp, #8
0a044     1C 00 90 5D |  if_ne	jmp	#LR__1295
0a048     70 4E 05 F1 | 	add	fp, #112
0a04c     A7 00 02 FB | 	rdlong	arg01, fp
0a050     70 4E 85 F1 | 	sub	fp, #112
0a054     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
0a058     08 4E 05 F1 | 	add	fp, #8
0a05c     A7 EA 61 FC | 	wrlong	result1, fp
0a060     08 4E 85 F1 | 	sub	fp, #8
0a064                 | LR__1295
0a064                 | LR__1296
0a064                 | LR__1297
0a064                 | LR__1298
0a064                 | ' 			}
0a064                 | ' 		}
0a064                 | ' 		;
0a064                 | ' 	}
0a064                 | ' 
0a064                 | ' 	return res ;
0a064     08 4E 05 F1 | 	add	fp, #8
0a068     A7 EA 01 FB | 	rdlong	result1, fp
0a06c     08 4E 85 F1 | 	sub	fp, #8
0a070     A7 F0 03 F6 | 	mov	ptra, fp
0a074     B2 00 A0 FD | 	call	#popregs_
0a078                 | _fatfs_cc_f_unlink_ret
0a078     2D 00 64 FD | 	ret
0a07c                 | 
0a07c                 | _fatfs_cc_f_mkdir
0a07c     00 4A 05 F6 | 	mov	COUNT_, #0
0a080     A8 00 A0 FD | 	call	#pushregs_
0a084     5C F0 07 F1 | 	add	ptra, #92
0a088     04 4E 05 F1 | 	add	fp, #4
0a08c     A7 00 62 FC | 	wrlong	arg01, fp
0a090     A7 00 02 F6 | 	mov	arg01, fp
0a094     48 4E 05 F1 | 	add	fp, #72
0a098     A7 02 02 F6 | 	mov	arg02, fp
0a09c     4C 4E 85 F1 | 	sub	fp, #76
0a0a0     02 04 06 F6 | 	mov	arg03, #2
0a0a4     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
0a0a8     08 4E 05 F1 | 	add	fp, #8
0a0ac     A7 EA 61 FC | 	wrlong	result1, fp
0a0b0     08 4E 85 F1 | 	sub	fp, #8
0a0b4     00 EA 0D F2 | 	cmp	result1, #0 wz
0a0b8     C4 02 90 5D |  if_ne	jmp	#LR__1305
0a0bc     4C 4E 05 F1 | 	add	fp, #76
0a0c0     A7 04 02 FB | 	rdlong	arg03, fp
0a0c4     40 4E 85 F1 | 	sub	fp, #64
0a0c8     A7 04 62 FC | 	wrlong	arg03, fp
0a0cc     A7 00 02 F6 | 	mov	arg01, fp
0a0d0     08 4E 85 F1 | 	sub	fp, #8
0a0d4     A7 02 02 FB | 	rdlong	arg02, fp
0a0d8     04 4E 85 F1 | 	sub	fp, #4
0a0dc     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
0a0e0     08 4E 05 F1 | 	add	fp, #8
0a0e4     A7 EA 61 FC | 	wrlong	result1, fp
0a0e8     00 EA 4D F2 | 	cmps	result1, #0 wz
0a0ec     08 4E 85 F1 | 	sub	fp, #8
0a0f0     08 4E 05 A1 |  if_e	add	fp, #8
0a0f4     A7 10 68 AC |  if_e	wrlong	#8, fp
0a0f8     08 4E 85 A1 |  if_e	sub	fp, #8
0a0fc     08 4E 05 F1 | 	add	fp, #8
0a100     A7 EA 01 FB | 	rdlong	result1, fp
0a104     08 4E 85 F1 | 	sub	fp, #8
0a108     04 EA 0D F2 | 	cmp	result1, #4 wz
0a10c     70 02 90 5D |  if_ne	jmp	#LR__1304
0a110     4C 4E 05 F1 | 	add	fp, #76
0a114     A7 04 02 FB | 	rdlong	arg03, fp
0a118     10 4E 85 F1 | 	sub	fp, #16
0a11c     A7 04 62 FC | 	wrlong	arg03, fp
0a120     A7 00 02 F6 | 	mov	arg01, fp
0a124     3C 4E 85 F1 | 	sub	fp, #60
0a128     00 02 06 F6 | 	mov	arg02, #0
0a12c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
0a130     50 4E 05 F1 | 	add	fp, #80
0a134     A7 EA 61 FC | 	wrlong	result1, fp
0a138     48 4E 85 F1 | 	sub	fp, #72
0a13c     A7 00 68 FC | 	wrlong	#0, fp
0a140     48 4E 05 F1 | 	add	fp, #72
0a144     A7 EA 09 FB | 	rdlong	result1, fp wz
0a148     50 4E 85 F1 | 	sub	fp, #80
0a14c     08 4E 05 A1 |  if_e	add	fp, #8
0a150     A7 0E 68 AC |  if_e	wrlong	#7, fp
0a154     08 4E 85 A1 |  if_e	sub	fp, #8
0a158     50 4E 05 F1 | 	add	fp, #80
0a15c     A7 EA 01 FB | 	rdlong	result1, fp
0a160     50 4E 85 F1 | 	sub	fp, #80
0a164     01 EA 0D F2 | 	cmp	result1, #1 wz
0a168     08 4E 05 A1 |  if_e	add	fp, #8
0a16c     A7 04 68 AC |  if_e	wrlong	#2, fp
0a170     08 4E 85 A1 |  if_e	sub	fp, #8
0a174     50 4E 05 F1 | 	add	fp, #80
0a178     A7 04 02 FB | 	rdlong	arg03, fp
0a17c     50 4E 85 F1 | 	sub	fp, #80
0a180     FF FF 7F FF 
0a184     FF 05 0E F2 | 	cmp	arg03, ##-1 wz
0a188     08 4E 05 A1 |  if_e	add	fp, #8
0a18c     A7 02 68 AC |  if_e	wrlong	#1, fp
0a190     08 4E 85 A1 |  if_e	sub	fp, #8
0a194     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
0a198     58 4E 05 F1 | 	add	fp, #88
0a19c     A7 EA 61 FC | 	wrlong	result1, fp
0a1a0     50 4E 85 F1 | 	sub	fp, #80
0a1a4     A7 EA 09 FB | 	rdlong	result1, fp wz
0a1a8     08 4E 85 F1 | 	sub	fp, #8
0a1ac     1C 01 90 5D |  if_ne	jmp	#LR__1301
0a1b0     4C 4E 05 F1 | 	add	fp, #76
0a1b4     A7 00 02 FB | 	rdlong	arg01, fp
0a1b8     04 4E 05 F1 | 	add	fp, #4
0a1bc     A7 02 02 FB | 	rdlong	arg02, fp
0a1c0     50 4E 85 F1 | 	sub	fp, #80
0a1c4     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
0a1c8     08 4E 05 F1 | 	add	fp, #8
0a1cc     A7 EA 61 FC | 	wrlong	result1, fp
0a1d0     00 EA 4D F2 | 	cmps	result1, #0 wz
0a1d4     08 4E 85 F1 | 	sub	fp, #8
0a1d8     F0 00 90 5D |  if_ne	jmp	#LR__1300
0a1dc     4C 4E 05 F1 | 	add	fp, #76
0a1e0     A7 00 02 FB | 	rdlong	arg01, fp
0a1e4     4C 4E 85 F1 | 	sub	fp, #76
0a1e8     34 00 06 F1 | 	add	arg01, #52
0a1ec     20 02 06 F6 | 	mov	arg02, #32
0a1f0     0B 04 06 F6 | 	mov	arg03, #11
0a1f4     98 00 A0 FD | 	call	#\builtin_bytefill_
0a1f8     4C 4E 05 F1 | 	add	fp, #76
0a1fc     A7 EA 01 FB | 	rdlong	result1, fp
0a200     34 EA 05 F1 | 	add	result1, #52
0a204     F5 5C 48 FC | 	wrbyte	#46, result1
0a208     A7 04 02 FB | 	rdlong	arg03, fp
0a20c     3F 04 06 F1 | 	add	arg03, #63
0a210     02 21 48 FC | 	wrbyte	#16, arg03
0a214     A7 00 02 FB | 	rdlong	arg01, fp
0a218     4A 00 06 F1 | 	add	arg01, #74
0a21c     0C 4E 05 F1 | 	add	fp, #12
0a220     A7 02 02 FB | 	rdlong	arg02, fp
0a224     00 03 62 FC | 	wrlong	arg02, arg01
0a228     0C 4E 85 F1 | 	sub	fp, #12
0a22c     A7 02 02 FB | 	rdlong	arg02, fp
0a230     01 01 02 F6 | 	mov	arg01, arg02
0a234     34 02 06 F1 | 	add	arg02, #52
0a238     04 4E 05 F1 | 	add	fp, #4
0a23c     A7 04 02 FB | 	rdlong	arg03, fp
0a240     50 4E 85 F1 | 	sub	fp, #80
0a244     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
0a248     4C 4E 05 F1 | 	add	fp, #76
0a24c     A7 02 02 FB | 	rdlong	arg02, fp
0a250     01 01 02 F6 | 	mov	arg01, arg02
0a254     54 00 06 F1 | 	add	arg01, #84
0a258     4C 4E 85 F1 | 	sub	fp, #76
0a25c     34 02 06 F1 | 	add	arg02, #52
0a260     20 04 06 F6 | 	mov	arg03, #32
0a264     80 6A BF FD | 	call	#__system____builtin_memmove
0a268     4C 4E 05 F1 | 	add	fp, #76
0a26c     A7 04 02 FB | 	rdlong	arg03, fp
0a270     55 04 06 F1 | 	add	arg03, #85
0a274     02 5D 48 FC | 	wrbyte	#46, arg03
0a278     38 4E 85 F1 | 	sub	fp, #56
0a27c     A7 04 02 FB | 	rdlong	arg03, fp
0a280     40 4E 05 F1 | 	add	fp, #64
0a284     A7 04 62 FC | 	wrlong	arg03, fp
0a288     08 4E 85 F1 | 	sub	fp, #8
0a28c     A7 02 02 FB | 	rdlong	arg02, fp
0a290     01 01 02 F6 | 	mov	arg01, arg02
0a294     54 02 06 F1 | 	add	arg02, #84
0a298     4C 4E 85 F1 | 	sub	fp, #76
0a29c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
0a2a0     4C 4E 05 F1 | 	add	fp, #76
0a2a4     A7 04 02 FB | 	rdlong	arg03, fp
0a2a8     03 04 06 F1 | 	add	arg03, #3
0a2ac     02 03 48 FC | 	wrbyte	#1, arg03
0a2b0     40 4E 85 F1 | 	sub	fp, #64
0a2b4     A7 00 02 F6 | 	mov	arg01, fp
0a2b8     0C 4E 85 F1 | 	sub	fp, #12
0a2bc     44 BA BF FD | 	call	#_fatfs_cc_dir_register
0a2c0     08 4E 05 F1 | 	add	fp, #8
0a2c4     A7 EA 61 FC | 	wrlong	result1, fp
0a2c8     08 4E 85 F1 | 	sub	fp, #8
0a2cc                 | LR__1300
0a2cc                 | LR__1301
0a2cc     08 4E 05 F1 | 	add	fp, #8
0a2d0     A7 EA 09 FB | 	rdlong	result1, fp wz
0a2d4     08 4E 85 F1 | 	sub	fp, #8
0a2d8     88 00 90 5D |  if_ne	jmp	#LR__1302
0a2dc     28 4E 05 F1 | 	add	fp, #40
0a2e0     A7 00 02 FB | 	rdlong	arg01, fp
0a2e4     16 00 06 F1 | 	add	arg01, #22
0a2e8     30 4E 05 F1 | 	add	fp, #48
0a2ec     A7 02 02 FB | 	rdlong	arg02, fp
0a2f0     00 03 62 FC | 	wrlong	arg02, arg01
0a2f4     0C 4E 85 F1 | 	sub	fp, #12
0a2f8     A7 00 02 FB | 	rdlong	arg01, fp
0a2fc     24 4E 85 F1 | 	sub	fp, #36
0a300     A7 02 02 FB | 	rdlong	arg02, fp
0a304     28 4E 05 F1 | 	add	fp, #40
0a308     A7 04 02 FB | 	rdlong	arg03, fp
0a30c     50 4E 85 F1 | 	sub	fp, #80
0a310     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
0a314     28 4E 05 F1 | 	add	fp, #40
0a318     A7 EA 01 FB | 	rdlong	result1, fp
0a31c     0B EA 05 F1 | 	add	result1, #11
0a320     F5 20 48 FC | 	wrbyte	#16, result1
0a324     24 4E 05 F1 | 	add	fp, #36
0a328     A7 EA 01 FB | 	rdlong	result1, fp
0a32c     03 EA 05 F1 | 	add	result1, #3
0a330     F5 02 48 FC | 	wrbyte	#1, result1
0a334     44 4E 85 F1 | 	sub	fp, #68
0a338     A7 EA 09 FB | 	rdlong	result1, fp wz
0a33c     08 4E 85 F1 | 	sub	fp, #8
0a340     3C 00 90 5D |  if_ne	jmp	#LR__1303
0a344     4C 4E 05 F1 | 	add	fp, #76
0a348     A7 00 02 FB | 	rdlong	arg01, fp
0a34c     4C 4E 85 F1 | 	sub	fp, #76
0a350     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
0a354     08 4E 05 F1 | 	add	fp, #8
0a358     A7 EA 61 FC | 	wrlong	result1, fp
0a35c     08 4E 85 F1 | 	sub	fp, #8
0a360     1C 00 90 FD | 	jmp	#LR__1303
0a364                 | LR__1302
0a364     3C 4E 05 F1 | 	add	fp, #60
0a368     A7 00 02 F6 | 	mov	arg01, fp
0a36c     14 4E 05 F1 | 	add	fp, #20
0a370     A7 02 02 FB | 	rdlong	arg02, fp
0a374     50 4E 85 F1 | 	sub	fp, #80
0a378     00 04 06 F6 | 	mov	arg03, #0
0a37c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
0a380                 | LR__1303
0a380                 | LR__1304
0a380                 | LR__1305
0a380                 | ' 				remove_chain(&sobj, dcl, 0);
0a380                 | ' 			}
0a380                 | ' 		}
0a380                 | ' 		;
0a380                 | ' 	}
0a380                 | ' 
0a380                 | ' 	return res ;
0a380     08 4E 05 F1 | 	add	fp, #8
0a384     A7 EA 01 FB | 	rdlong	result1, fp
0a388     08 4E 85 F1 | 	sub	fp, #8
0a38c     A7 F0 03 F6 | 	mov	ptra, fp
0a390     B2 00 A0 FD | 	call	#popregs_
0a394                 | _fatfs_cc_f_mkdir_ret
0a394     2D 00 64 FD | 	ret
0a398                 | 
0a398                 | _fatfs_cc_f_rename
0a398     01 4A 05 F6 | 	mov	COUNT_, #1
0a39c     A8 00 A0 FD | 	call	#pushregs_
0a3a0     9C F0 07 F1 | 	add	ptra, #156
0a3a4     04 4E 05 F1 | 	add	fp, #4
0a3a8     A7 00 62 FC | 	wrlong	arg01, fp
0a3ac     04 4E 05 F1 | 	add	fp, #4
0a3b0     A7 02 62 FC | 	wrlong	arg02, fp
0a3b4     A7 00 02 F6 | 	mov	arg01, fp
0a3b8     08 4E 85 F1 | 	sub	fp, #8
0a3bc     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
0a3c0     04 4E 05 F1 | 	add	fp, #4
0a3c4     A7 00 02 F6 | 	mov	arg01, fp
0a3c8     6C 4E 05 F1 | 	add	fp, #108
0a3cc     A7 02 02 F6 | 	mov	arg02, fp
0a3d0     70 4E 85 F1 | 	sub	fp, #112
0a3d4     02 04 06 F6 | 	mov	arg03, #2
0a3d8     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
0a3dc     0C 4E 05 F1 | 	add	fp, #12
0a3e0     A7 EA 61 FC | 	wrlong	result1, fp
0a3e4     0C 4E 85 F1 | 	sub	fp, #12
0a3e8     00 EA 0D F2 | 	cmp	result1, #0 wz
0a3ec     44 03 90 5D |  if_ne	jmp	#LR__1323
0a3f0     70 4E 05 F1 | 	add	fp, #112
0a3f4     A7 04 02 FB | 	rdlong	arg03, fp
0a3f8     60 4E 85 F1 | 	sub	fp, #96
0a3fc     A7 04 62 FC | 	wrlong	arg03, fp
0a400     A7 00 02 F6 | 	mov	arg01, fp
0a404     0C 4E 85 F1 | 	sub	fp, #12
0a408     A7 02 02 FB | 	rdlong	arg02, fp
0a40c     04 4E 85 F1 | 	sub	fp, #4
0a410     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
0a414     0C 4E 05 F1 | 	add	fp, #12
0a418     A7 EA 61 FC | 	wrlong	result1, fp
0a41c     00 EA 4D F2 | 	cmps	result1, #0 wz
0a420     0C 4E 85 F1 | 	sub	fp, #12
0a424     1C 00 90 5D |  if_ne	jmp	#LR__1310
0a428     3B 4E 05 F1 | 	add	fp, #59
0a42c     A7 EA C1 FA | 	rdbyte	result1, fp
0a430     3B 4E 85 F1 | 	sub	fp, #59
0a434     A0 EA CD F7 | 	test	result1, #160 wz
0a438     0C 4E 05 51 |  if_ne	add	fp, #12
0a43c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
0a440     0C 4E 85 51 |  if_ne	sub	fp, #12
0a444                 | LR__1310
0a444     0C 4E 05 F1 | 	add	fp, #12
0a448     A7 0A 0A FB | 	rdlong	local01, fp wz
0a44c     0C 4E 85 F1 | 	sub	fp, #12
0a450     E0 02 90 5D |  if_ne	jmp	#LR__1322
0a454     74 4E 05 F1 | 	add	fp, #116
0a458     A7 00 02 F6 | 	mov	arg01, fp
0a45c     48 4E 85 F1 | 	sub	fp, #72
0a460     A7 02 02 FB | 	rdlong	arg02, fp
0a464     2C 4E 85 F1 | 	sub	fp, #44
0a468     20 04 06 F6 | 	mov	arg03, #32
0a46c     78 68 BF FD | 	call	#__system____builtin_memmove
0a470     40 4E 05 F1 | 	add	fp, #64
0a474     A7 00 02 F6 | 	mov	arg01, fp
0a478     30 4E 85 F1 | 	sub	fp, #48
0a47c     A7 02 02 F6 | 	mov	arg02, fp
0a480     10 4E 85 F1 | 	sub	fp, #16
0a484     30 04 06 F6 | 	mov	arg03, #48
0a488     5C 68 BF FD | 	call	#__system____builtin_memmove
0a48c     40 4E 05 F1 | 	add	fp, #64
0a490     A7 00 02 F6 | 	mov	arg01, fp
0a494     38 4E 85 F1 | 	sub	fp, #56
0a498     A7 02 02 FB | 	rdlong	arg02, fp
0a49c     08 4E 85 F1 | 	sub	fp, #8
0a4a0     34 CA BF FD | 	call	#_fatfs_cc_follow_path
0a4a4     0C 4E 05 F1 | 	add	fp, #12
0a4a8     A7 EA 61 FC | 	wrlong	result1, fp
0a4ac     0C 4E 85 F1 | 	sub	fp, #12
0a4b0     00 EA 0D F2 | 	cmp	result1, #0 wz
0a4b4     4C 00 90 5D |  if_ne	jmp	#LR__1313
0a4b8     48 4E 05 F1 | 	add	fp, #72
0a4bc     A7 EA 01 FB | 	rdlong	result1, fp
0a4c0     30 4E 85 F1 | 	sub	fp, #48
0a4c4     A7 04 02 FB | 	rdlong	arg03, fp
0a4c8     18 4E 85 F1 | 	sub	fp, #24
0a4cc     02 EB 09 F2 | 	cmp	result1, arg03 wz
0a4d0     20 00 90 5D |  if_ne	jmp	#LR__1311
0a4d4     50 4E 05 F1 | 	add	fp, #80
0a4d8     A7 EA 01 FB | 	rdlong	result1, fp
0a4dc     30 4E 85 F1 | 	sub	fp, #48
0a4e0     A7 04 02 FB | 	rdlong	arg03, fp
0a4e4     20 4E 85 F1 | 	sub	fp, #32
0a4e8     02 EB 09 F2 | 	cmp	result1, arg03 wz
0a4ec     04 0A 06 A6 |  if_e	mov	local01, #4
0a4f0     04 00 90 AD |  if_e	jmp	#LR__1312
0a4f4                 | LR__1311
0a4f4     08 0A 06 F6 | 	mov	local01, #8
0a4f8                 | LR__1312
0a4f8     0C 4E 05 F1 | 	add	fp, #12
0a4fc     A7 0A 62 FC | 	wrlong	local01, fp
0a500     0C 4E 85 F1 | 	sub	fp, #12
0a504                 | LR__1313
0a504     0C 4E 05 F1 | 	add	fp, #12
0a508     A7 0A 02 FB | 	rdlong	local01, fp
0a50c     0C 4E 85 F1 | 	sub	fp, #12
0a510     04 0A 0E F2 | 	cmp	local01, #4 wz
0a514     CC 01 90 5D |  if_ne	jmp	#LR__1319
0a518     40 4E 05 F1 | 	add	fp, #64
0a51c     A7 00 02 F6 | 	mov	arg01, fp
0a520     40 4E 85 F1 | 	sub	fp, #64
0a524     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
0a528     0C 4E 05 F1 | 	add	fp, #12
0a52c     A7 EA 61 FC | 	wrlong	result1, fp
0a530     0C 4E 85 F1 | 	sub	fp, #12
0a534     00 EA 0D F2 | 	cmp	result1, #0 wz
0a538     A8 01 90 5D |  if_ne	jmp	#LR__1318
0a53c     5C 4E 05 F1 | 	add	fp, #92
0a540     A7 00 02 FB | 	rdlong	arg01, fp
0a544     38 4E 05 F1 | 	add	fp, #56
0a548     A7 00 62 FC | 	wrlong	arg01, fp
0a54c     0D 00 06 F1 | 	add	arg01, #13
0a550     20 4E 85 F1 | 	sub	fp, #32
0a554     A7 02 02 F6 | 	mov	arg02, fp
0a558     74 4E 85 F1 | 	sub	fp, #116
0a55c     0D 02 06 F1 | 	add	arg02, #13
0a560     13 04 06 F6 | 	mov	arg03, #19
0a564     80 67 BF FD | 	call	#__system____builtin_memmove
0a568     94 4E 05 F1 | 	add	fp, #148
0a56c     A7 0A 02 FB | 	rdlong	local01, fp
0a570     15 4E 85 F1 | 	sub	fp, #21
0a574     A7 EA C1 FA | 	rdbyte	result1, fp
0a578     0B 0A 06 F1 | 	add	local01, #11
0a57c     05 EB 41 FC | 	wrbyte	result1, local01
0a580     15 4E 05 F1 | 	add	fp, #21
0a584     A7 0A 02 FB | 	rdlong	local01, fp
0a588     94 4E 85 F1 | 	sub	fp, #148
0a58c     0B 0A 06 F1 | 	add	local01, #11
0a590     05 0B C2 FA | 	rdbyte	local01, local01
0a594     10 0A CE F7 | 	test	local01, #16 wz
0a598     24 00 90 5D |  if_ne	jmp	#LR__1314
0a59c     94 4E 05 F1 | 	add	fp, #148
0a5a0     A7 EA 01 FB | 	rdlong	result1, fp
0a5a4     F5 0A 02 F6 | 	mov	local01, result1
0a5a8     94 4E 85 F1 | 	sub	fp, #148
0a5ac     0B EA 05 F1 | 	add	result1, #11
0a5b0     F5 EA C1 FA | 	rdbyte	result1, result1
0a5b4     20 EA 45 F5 | 	or	result1, #32
0a5b8     0B 0A 06 F1 | 	add	local01, #11
0a5bc     05 EB 41 FC | 	wrbyte	result1, local01
0a5c0                 | LR__1314
0a5c0     70 4E 05 F1 | 	add	fp, #112
0a5c4     A7 0A 02 FB | 	rdlong	local01, fp
0a5c8     03 0A 06 F1 | 	add	local01, #3
0a5cc     05 03 48 FC | 	wrbyte	#1, local01
0a5d0     24 4E 05 F1 | 	add	fp, #36
0a5d4     A7 0A 02 FB | 	rdlong	local01, fp
0a5d8     94 4E 85 F1 | 	sub	fp, #148
0a5dc     0B 0A 06 F1 | 	add	local01, #11
0a5e0     05 0B C2 FA | 	rdbyte	local01, local01
0a5e4     10 0A CE F7 | 	test	local01, #16 wz
0a5e8     F8 00 90 AD |  if_e	jmp	#LR__1317
0a5ec     18 4E 05 F1 | 	add	fp, #24
0a5f0     A7 04 02 FB | 	rdlong	arg03, fp
0a5f4     30 4E 05 F1 | 	add	fp, #48
0a5f8     A7 0A 02 FB | 	rdlong	local01, fp
0a5fc     48 4E 85 F1 | 	sub	fp, #72
0a600     05 05 0A F2 | 	cmp	arg03, local01 wz
0a604     DC 00 90 AD |  if_e	jmp	#LR__1317
0a608     70 4E 05 F1 | 	add	fp, #112
0a60c     A7 00 02 FB | 	rdlong	arg01, fp
0a610     00 0B 02 F6 | 	mov	local01, arg01
0a614     24 4E 05 F1 | 	add	fp, #36
0a618     A7 02 02 FB | 	rdlong	arg02, fp
0a61c     94 4E 85 F1 | 	sub	fp, #148
0a620     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
0a624     F5 02 02 F6 | 	mov	arg02, result1
0a628     05 01 02 F6 | 	mov	arg01, local01
0a62c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
0a630     98 4E 05 F1 | 	add	fp, #152
0a634     A7 EA 61 FC | 	wrlong	result1, fp
0a638     00 EA 4D F2 | 	cmps	result1, #0 wz
0a63c     98 4E 85 F1 | 	sub	fp, #152
0a640     0C 4E 05 A1 |  if_e	add	fp, #12
0a644     A7 04 68 AC |  if_e	wrlong	#2, fp
0a648     0C 4E 85 A1 |  if_e	sub	fp, #12
0a64c     94 00 90 AD |  if_e	jmp	#LR__1316
0a650     70 4E 05 F1 | 	add	fp, #112
0a654     A7 00 02 FB | 	rdlong	arg01, fp
0a658     28 4E 05 F1 | 	add	fp, #40
0a65c     A7 02 02 FB | 	rdlong	arg02, fp
0a660     98 4E 85 F1 | 	sub	fp, #152
0a664     4C A0 BF FD | 	call	#_fatfs_cc_move_window
0a668     0C 4E 05 F1 | 	add	fp, #12
0a66c     A7 EA 61 FC | 	wrlong	result1, fp
0a670     64 4E 05 F1 | 	add	fp, #100
0a674     A7 0A 02 FB | 	rdlong	local01, fp
0a678     54 0A 06 F1 | 	add	local01, #84
0a67c     24 4E 05 F1 | 	add	fp, #36
0a680     A7 0A 62 FC | 	wrlong	local01, fp
0a684     88 4E 85 F1 | 	sub	fp, #136
0a688     A7 0A 0A FB | 	rdlong	local01, fp wz
0a68c     0C 4E 85 F1 | 	sub	fp, #12
0a690     50 00 90 5D |  if_ne	jmp	#LR__1315
0a694     94 4E 05 F1 | 	add	fp, #148
0a698     A7 0A 02 FB | 	rdlong	local01, fp
0a69c     94 4E 85 F1 | 	sub	fp, #148
0a6a0     01 0A 06 F1 | 	add	local01, #1
0a6a4     05 0B C2 FA | 	rdbyte	local01, local01
0a6a8     2E 0A 0E F2 | 	cmp	local01, #46 wz
0a6ac     34 00 90 5D |  if_ne	jmp	#LR__1315
0a6b0     70 4E 05 F1 | 	add	fp, #112
0a6b4     A7 00 02 FB | 	rdlong	arg01, fp
0a6b8     24 4E 05 F1 | 	add	fp, #36
0a6bc     A7 02 02 FB | 	rdlong	arg02, fp
0a6c0     4C 4E 85 F1 | 	sub	fp, #76
0a6c4     A7 04 02 FB | 	rdlong	arg03, fp
0a6c8     48 4E 85 F1 | 	sub	fp, #72
0a6cc     50 AD BF FD | 	call	#_fatfs_cc_st_clust
0a6d0     70 4E 05 F1 | 	add	fp, #112
0a6d4     A7 0A 02 FB | 	rdlong	local01, fp
0a6d8     70 4E 85 F1 | 	sub	fp, #112
0a6dc     03 0A 06 F1 | 	add	local01, #3
0a6e0     05 03 48 FC | 	wrbyte	#1, local01
0a6e4                 | LR__1315
0a6e4                 | LR__1316
0a6e4                 | LR__1317
0a6e4                 | LR__1318
0a6e4                 | LR__1319
0a6e4     0C 4E 05 F1 | 	add	fp, #12
0a6e8     A7 0A 0A FB | 	rdlong	local01, fp wz
0a6ec     0C 4E 85 F1 | 	sub	fp, #12
0a6f0     40 00 90 5D |  if_ne	jmp	#LR__1321
0a6f4     10 4E 05 F1 | 	add	fp, #16
0a6f8     A7 00 02 F6 | 	mov	arg01, fp
0a6fc     10 4E 85 F1 | 	sub	fp, #16
0a700     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
0a704     0C 4E 05 F1 | 	add	fp, #12
0a708     A7 EA 61 FC | 	wrlong	result1, fp
0a70c     0C 4E 85 F1 | 	sub	fp, #12
0a710     00 EA 0D F2 | 	cmp	result1, #0 wz
0a714     1C 00 90 5D |  if_ne	jmp	#LR__1320
0a718     70 4E 05 F1 | 	add	fp, #112
0a71c     A7 00 02 FB | 	rdlong	arg01, fp
0a720     70 4E 85 F1 | 	sub	fp, #112
0a724     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
0a728     0C 4E 05 F1 | 	add	fp, #12
0a72c     A7 EA 61 FC | 	wrlong	result1, fp
0a730     0C 4E 85 F1 | 	sub	fp, #12
0a734                 | LR__1320
0a734                 | LR__1321
0a734                 | LR__1322
0a734                 | LR__1323
0a734                 | ' 					res = sync_fs(fs);
0a734                 | ' 				}
0a734                 | ' 			}
0a734                 | ' 
0a734                 | ' 		}
0a734                 | ' 		;
0a734                 | ' 	}
0a734                 | ' 
0a734                 | ' 	return res ;
0a734     0C 4E 05 F1 | 	add	fp, #12
0a738     A7 EA 01 FB | 	rdlong	result1, fp
0a73c     0C 4E 85 F1 | 	sub	fp, #12
0a740     A7 F0 03 F6 | 	mov	ptra, fp
0a744     B2 00 A0 FD | 	call	#popregs_
0a748                 | _fatfs_cc_f_rename_ret
0a748     2D 00 64 FD | 	ret
0a74c                 | 
0a74c                 | _fatfs_cc_time
0a74c     00 4A 05 F6 | 	mov	COUNT_, #0
0a750     A8 00 A0 FD | 	call	#pushregs_
0a754     14 F0 07 F1 | 	add	ptra, #20
0a758     04 4E 05 F1 | 	add	fp, #4
0a75c     A7 00 62 FC | 	wrlong	arg01, fp
0a760     04 4E 05 F1 | 	add	fp, #4
0a764     A7 00 02 F6 | 	mov	arg01, fp
0a768     08 4E 85 F1 | 	sub	fp, #8
0a76c     00 02 06 F6 | 	mov	arg02, #0
0a770     F8 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
0a774     08 4E 05 F1 | 	add	fp, #8
0a778     A7 EA 01 FB | 	rdlong	result1, fp
0a77c     08 4E 05 F1 | 	add	fp, #8
0a780     A7 EA 61 FC | 	wrlong	result1, fp
0a784     0C 4E 85 F1 | 	sub	fp, #12
0a788     A7 EA 09 FB | 	rdlong	result1, fp wz
0a78c     04 4E 85 F1 | 	sub	fp, #4
0a790     18 00 90 AD |  if_e	jmp	#LR__1330
0a794     04 4E 05 F1 | 	add	fp, #4
0a798     A7 EA 01 FB | 	rdlong	result1, fp
0a79c     0C 4E 05 F1 | 	add	fp, #12
0a7a0     A7 02 02 FB | 	rdlong	arg02, fp
0a7a4     10 4E 85 F1 | 	sub	fp, #16
0a7a8     F5 02 62 FC | 	wrlong	arg02, result1
0a7ac                 | LR__1330
0a7ac                 | '         *tp = now;
0a7ac                 | '     return now;
0a7ac     10 4E 05 F1 | 	add	fp, #16
0a7b0     A7 EA 01 FB | 	rdlong	result1, fp
0a7b4     10 4E 85 F1 | 	sub	fp, #16
0a7b8     A7 F0 03 F6 | 	mov	ptra, fp
0a7bc     B2 00 A0 FD | 	call	#popregs_
0a7c0                 | _fatfs_cc_time_ret
0a7c0     2D 00 64 FD | 	ret
0a7c4                 | 
0a7c4                 | _fatfs_cc_mktime
0a7c4     06 4A 05 F6 | 	mov	COUNT_, #6
0a7c8     A8 00 A0 FD | 	call	#pushregs_
0a7cc     00 0B 02 F6 | 	mov	local01, arg01
0a7d0     14 0A 06 F1 | 	add	local01, #20
0a7d4     05 01 02 FB | 	rdlong	arg01, local01
0a7d8     14 0A 86 F1 | 	sub	local01, #20
0a7dc     46 00 56 F2 | 	cmps	arg01, #70 wc
0a7e0                 | '                 return (time_t) -1;
0a7e0     01 EA 65 C6 |  if_b	neg	result1, #1
0a7e4     7C 01 90 CD |  if_b	jmp	#LR__1344
0a7e8     03 00 00 FF 
0a7ec     6C 0D 06 F6 | 	mov	local02, ##1900
0a7f0     14 0A 06 F1 | 	add	local01, #20
0a7f4     05 EB 01 FB | 	rdlong	result1, local01
0a7f8     F5 0C 02 F1 | 	add	local02, result1
0a7fc     08 0A 86 F1 | 	sub	local01, #8
0a800     05 0F 02 FB | 	rdlong	local03, local01
0a804     01 0E 86 F1 | 	sub	local03, #1
0a808     04 0A 06 F1 | 	add	local01, #4
0a80c     05 01 02 FB | 	rdlong	arg01, local01
0a810     10 0A 86 F1 | 	sub	local01, #16
0a814     02 00 66 F0 | 	shl	arg01, #2
0a818     02 00 00 FF 
0a81c     C8 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
0a820     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0a824     00 EB 01 FB | 	rdlong	result1, arg01
0a828     F5 0E 02 F1 | 	add	local03, result1
0a82c     06 01 02 F6 | 	mov	arg01, local02
0a830     02 00 00 FF 
0a834     C8 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
0a838     D8 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
0a83c     00 EA 0D F2 | 	cmp	result1, #0 wz
0a840     1C 00 90 AD |  if_e	jmp	#LR__1340
0a844     00 10 06 F6 | 	mov	local04, #0
0a848     10 0A 06 F1 | 	add	local01, #16
0a84c     05 EB 01 FB | 	rdlong	result1, local01
0a850     10 0A 86 F1 | 	sub	local01, #16
0a854     02 EA 55 F2 | 	cmps	result1, #2 wc
0a858     01 10 06 36 |  if_ae	mov	local04, #1
0a85c     04 00 90 FD | 	jmp	#LR__1341
0a860                 | LR__1340
0a860     00 10 06 F6 | 	mov	local04, #0
0a864                 | LR__1341
0a864     04 0A 06 F1 | 	add	local01, #4
0a868     05 EB 01 FB | 	rdlong	result1, local01
0a86c     04 0A 86 F1 | 	sub	local01, #4
0a870     05 13 02 FB | 	rdlong	local05, local01
0a874     08 0A 06 F1 | 	add	local01, #8
0a878     05 01 02 FB | 	rdlong	arg01, local01
0a87c     07 00 00 FF 
0a880     10 00 06 FD | 	qmul	arg01, ##3600
0a884     08 0F 02 F1 | 	add	local03, local04
0a888     F5 10 02 F6 | 	mov	local04, result1
0a88c     04 10 66 F0 | 	shl	local04, #4
0a890     F5 10 82 F1 | 	sub	local04, result1
0a894     02 10 66 F0 | 	shl	local04, #2
0a898     08 13 02 F1 | 	add	local05, local04
0a89c     08 0A 86 F1 | 	sub	local01, #8
0a8a0     18 10 62 FD | 	getqx	local04
0a8a4     A8 00 00 FF 
0a8a8     80 0F 06 FD | 	qmul	local03, ##86400
0a8ac     08 13 02 F1 | 	add	local05, local04
0a8b0     06 0F 02 F6 | 	mov	local03, local02
0a8b4     03 00 00 FF 
0a8b8     B2 0F 86 F1 | 	sub	local03, ##1970
0a8bc     18 10 62 FD | 	getqx	local04
0a8c0     99 F0 00 FF 
0a8c4     80 0F 06 FD | 	qmul	local03, ##31536000
0a8c8     08 13 02 F1 | 	add	local05, local04
0a8cc     06 0F 02 F6 | 	mov	local03, local02
0a8d0     03 00 00 FF 
0a8d4     B1 0F 86 F1 | 	sub	local03, ##1969
0a8d8     07 15 52 F6 | 	abs	local06, local03 wc
0a8dc     02 14 46 F0 | 	shr	local06, #2
0a8e0     0A 15 82 F6 | 	negc	local06, local06
0a8e4     03 00 00 FF 
0a8e8     D1 0D 56 F2 | 	cmps	local02, ##2001 wc
0a8ec     18 10 62 FD | 	getqx	local04
0a8f0     08 13 02 F1 | 	add	local05, local04
0a8f4     18 00 90 CD |  if_b	jmp	#LR__1342
0a8f8     03 00 00 FF 
0a8fc     D0 0D 86 F1 | 	sub	local02, ##2000
0a900     06 11 52 F6 | 	abs	local04, local02 wc
0a904     64 10 16 FD | 	qdiv	local04, #100
0a908     18 10 62 FD | 	getqx	local04
0a90c     08 15 A2 F3 | 	sumnc	local06, local04
0a910                 | LR__1342
0a910     A8 00 00 FF 
0a914     80 15 06 FD | 	qmul	local06, ##86400
0a918     18 14 62 FD | 	getqx	local06
0a91c     0A 13 02 F1 | 	add	local05, local06
0a920     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
0a924     02 00 00 FF 
0a928     94 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
0a92c     F3 14 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
0a930     0A 13 02 F1 | 	add	local05, local06
0a934     68 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
0a938     F3 0E 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
0a93c     02 00 00 FF 
0a940     FC E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
0a944     01 0E 0E F2 | 	cmp	local03, #1 wz
0a948     14 00 90 5D |  if_ne	jmp	#LR__1343
0a94c     05 01 02 F6 | 	mov	arg01, local01
0a950     C4 19 B0 FD | 	call	#_fatfs_cc___indst
0a954     00 EA 0D F2 | 	cmp	result1, #0 wz
0a958     07 00 00 5F 
0a95c     10 12 86 51 |  if_ne	sub	local05, ##3600
0a960                 | LR__1343
0a960                 | '                 s -=  (3600L) ;
0a960                 | ' 
0a960                 | '         return s;
0a960     09 EB 01 F6 | 	mov	result1, local05
0a964                 | LR__1344
0a964     A7 F0 03 F6 | 	mov	ptra, fp
0a968     B2 00 A0 FD | 	call	#popregs_
0a96c                 | _fatfs_cc_mktime_ret
0a96c     2D 00 64 FD | 	ret
0a970                 | 
0a970                 | _fatfs_cc__gmtime_r
0a970     03 4A 05 F6 | 	mov	COUNT_, #3
0a974     A8 00 A0 FD | 	call	#pushregs_
0a978     00 0B 02 FB | 	rdlong	local01, arg01
0a97c     A8 00 00 FF 
0a980     80 0B 16 FD | 	qdiv	local01, ##86400
0a984     18 EA 61 FD | 	getqx	result1
0a988     04 EA 05 F1 | 	add	result1, #4
0a98c     07 EA 15 FD | 	qdiv	result1, #7
0a990     18 02 06 F1 | 	add	arg02, #24
0a994     D1 7F 27 FF 
0a998     00 0A 16 F2 | 	cmp	local01, ##1325376000 wc
0a99c     D1 7F 27 3F 
0a9a0     00 0A 86 31 |  if_ae	sub	local01, ##1325376000
0a9a4     03 00 00 3F 
0a9a8     DC 0D 06 36 |  if_ae	mov	local02, ##2012
0a9ac     03 00 00 CF 
0a9b0     B2 0D 06 C6 |  if_b	mov	local02, ##1970
0a9b4                 | ' 	  year = 1970;
0a9b4                 | ' 	}
0a9b4                 | ' 
0a9b4                 | ' 	for(;;) {
0a9b4     19 EA 61 FD | 	getqy	result1
0a9b8     01 EB 61 FC | 	wrlong	result1, arg02
0a9bc     18 02 86 F1 | 	sub	arg02, #24
0a9c0                 | LR__1350
0a9c0     06 01 02 F6 | 	mov	arg01, local02
0a9c4     4C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
0a9c8     00 EA 0D F2 | 	cmp	result1, #0 wz
0a9cc     42 F1 00 5F 
0a9d0     00 0F 06 56 |  if_ne	mov	local03, ##31622400
0a9d4     99 F0 00 AF 
0a9d8     80 0F 06 A6 |  if_e	mov	local03, ##31536000
0a9dc     07 0B 12 F2 | 	cmp	local01, local03 wc
0a9e0                 | ' 	    break;
0a9e0     01 0C 06 31 |  if_ae	add	local02, #1
0a9e4     07 0B 82 31 |  if_ae	sub	local01, local03
0a9e8     D4 FF 9F 3D |  if_ae	jmp	#LR__1350
0a9ec     A8 00 00 FF 
0a9f0     80 0B 16 FD | 	qdiv	local01, ##86400
0a9f4     06 0F 02 F6 | 	mov	local03, local02
0a9f8     03 00 00 FF 
0a9fc     6C 0F 86 F1 | 	sub	local03, ##1900
0aa00     14 02 06 F1 | 	add	arg02, #20
0aa04     01 0F 62 FC | 	wrlong	local03, arg02
0aa08     08 02 06 F1 | 	add	arg02, #8
0aa0c     06 01 02 F6 | 	mov	arg01, local02
0aa10     18 0C 62 FD | 	getqx	local02
0aa14     01 0D 62 FC | 	wrlong	local02, arg02
0aa18     1C 02 86 F1 | 	sub	arg02, #28
0aa1c     F4 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
0aa20     00 EA 0D F2 | 	cmp	result1, #0 wz
0aa24     1D 0E 06 56 |  if_ne	mov	local03, #29
0aa28     1C 0E 06 A6 |  if_e	mov	local03, #28
0aa2c     02 00 00 FF 
0aa30     9C E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
0aa34     F3 0E 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
0aa38     02 00 00 FF 
0aa3c     9C E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
0aa40                 | ' 
0aa40                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
0aa40                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
0aa40     00 00 06 F6 | 	mov	arg01, #0
0aa44     97 2A 48 FB | 	callpa	#(@LR__1352-@LR__1351)>>2,fcache_load_ptr_
0aa48                 | LR__1351
0aa48     00 0F 02 F6 | 	mov	local03, arg01
0aa4c     02 0E 66 F0 | 	shl	local03, #2
0aa50     02 00 00 FF 
0aa54     98 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
0aa58     F3 0E 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
0aa5c     07 0F 02 FB | 	rdlong	local03, local03
0aa60     07 0D 52 F2 | 	cmps	local02, local03 wc
0aa64     02 00 00 FF 
0aa68     98 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
0aa6c     2C 00 90 CD |  if_b	jmp	#LR__1353
0aa70     00 0F 02 F6 | 	mov	local03, arg01
0aa74     02 0E 66 F0 | 	shl	local03, #2
0aa78     02 00 00 FF 
0aa7c     98 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
0aa80     F3 0E 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
0aa84     07 0F 02 FB | 	rdlong	local03, local03
0aa88     07 0D 82 F1 | 	sub	local02, local03
0aa8c     01 00 06 F1 | 	add	arg01, #1
0aa90     02 00 00 FF 
0aa94     98 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
0aa98     AC FF 9F FD | 	jmp	#LR__1351
0aa9c                 | LR__1352
0aa9c                 | LR__1353
0aa9c     A8 00 00 FF 
0aaa0     80 0B 16 FD | 	qdiv	local01, ##86400
0aaa4     10 02 06 F1 | 	add	arg02, #16
0aaa8     01 01 62 FC | 	wrlong	arg01, arg02
0aaac     01 0C 06 F1 | 	add	local02, #1
0aab0     04 02 86 F1 | 	sub	arg02, #4
0aab4     01 0D 62 FC | 	wrlong	local02, arg02
0aab8     19 0A 62 FD | 	getqy	local01
0aabc     07 00 00 FF 
0aac0     10 0A 16 FD | 	qdiv	local01, ##3600
0aac4     18 0E 62 FD | 	getqx	local03
0aac8     07 00 00 FF 
0aacc     10 0A 16 FD | 	qdiv	local01, ##3600
0aad0     04 02 86 F1 | 	sub	arg02, #4
0aad4     01 0F 62 FC | 	wrlong	local03, arg02
0aad8     19 0A 62 FD | 	getqy	local01
0aadc     3C 0A 16 FD | 	qdiv	local01, #60
0aae0     18 0E 62 FD | 	getqx	local03
0aae4     3C 0A 16 FD | 	qdiv	local01, #60
0aae8     04 02 86 F1 | 	sub	arg02, #4
0aaec     01 0F 62 FC | 	wrlong	local03, arg02
0aaf0     04 02 86 F1 | 	sub	arg02, #4
0aaf4                 | '         stm->tm_isdst = 0;
0aaf4                 | ' 
0aaf4                 | ' ;
0aaf4                 | '         return stm;
0aaf4     01 EB 01 F6 | 	mov	result1, arg02
0aaf8     19 0E 62 FD | 	getqy	local03
0aafc     01 0F 62 FC | 	wrlong	local03, arg02
0ab00     20 02 06 F1 | 	add	arg02, #32
0ab04     01 01 68 FC | 	wrlong	#0, arg02
0ab08     A7 F0 03 F6 | 	mov	ptra, fp
0ab0c     B2 00 A0 FD | 	call	#popregs_
0ab10                 | _fatfs_cc__gmtime_r_ret
0ab10     2D 00 64 FD | 	ret
0ab14                 | 
0ab14                 | _fatfs_cc__tzset
0ab14     62 00 00 FF 
0ab18     DB 01 06 F6 | 	mov	arg01, ##@LR__1638
0ab1c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
0ab20     F5 00 02 F6 | 	mov	arg01, result1
0ab24     02 00 00 FF 
0ab28     FC E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
0ab2c     F3 02 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
0ab30     02 00 00 FF 
0ab34     FC E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
0ab38     28 15 B0 FD | 	call	#_fatfs_cc___tzoffset
0ab3c     02 00 00 FF 
0ab40     94 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
0ab44     F3 EA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
0ab48     02 00 00 FF 
0ab4c     94 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
0ab50                 | _fatfs_cc__tzset_ret
0ab50     2D 00 64 FD | 	ret
0ab54                 | 
0ab54                 | _fatfs_cc_getenv
0ab54     06 4A 05 F6 | 	mov	COUNT_, #6
0ab58     A8 00 A0 FD | 	call	#pushregs_
0ab5c     00 0B 02 F6 | 	mov	local01, arg01
0ab60     00 0D 02 F6 | 	mov	local02, arg01
0ab64     97 06 48 FB | 	callpa	#(@LR__1361-@LR__1360)>>2,fcache_load_ptr_
0ab68                 | LR__1360
0ab68     06 EB C9 FA | 	rdbyte	result1, local02 wz
0ab6c     01 0C 06 51 |  if_ne	add	local02, #1
0ab70     F4 FF 9F 5D |  if_ne	jmp	#LR__1360
0ab74                 | LR__1361
0ab74     00 0D 82 F1 | 	sub	local02, arg01
0ab78     06 EB 01 F6 | 	mov	result1, local02
0ab7c     02 00 00 FF 
0ab80     4C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
0ab84     F3 04 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
0ab88     02 00 00 FF 
0ab8c     4C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
0ab90                 | '             return 0;
0ab90     00 EA 05 A6 |  if_e	mov	result1, #0
0ab94     5C 00 90 AD |  if_e	jmp	#LR__1364
0ab98                 | ' 
0ab98                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
0ab98     02 00 00 FF 
0ab9c     4C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
0aba0     F3 0E 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
0aba4     02 00 00 FF 
0aba8     4C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
0abac                 | LR__1362
0abac     07 11 0A FB | 	rdlong	local04, local03 wz
0abb0     3C 00 90 AD |  if_e	jmp	#LR__1363
0abb4     08 01 02 F6 | 	mov	arg01, local04
0abb8     05 03 02 F6 | 	mov	arg02, local01
0abbc     06 05 02 F6 | 	mov	arg03, local02
0abc0     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
0abc4     00 EA 0D F2 | 	cmp	result1, #0 wz
0abc8     06 13 02 A6 |  if_e	mov	local05, local02
0abcc     08 13 02 A1 |  if_e	add	local05, local04
0abd0     09 15 C2 AA |  if_e	rdbyte	local06, local05
0abd4     3D 14 0E A2 |  if_e	cmp	local06, #61 wz
0abd8                 | ' 			return name+len+1;
0abd8     06 11 02 A1 |  if_e	add	local04, local02
0abdc     01 10 06 A1 |  if_e	add	local04, #1
0abe0     08 EB 01 A6 |  if_e	mov	result1, local04
0abe4     0C 00 90 AD |  if_e	jmp	#LR__1364
0abe8     04 0E 06 F1 | 	add	local03, #4
0abec     BC FF 9F FD | 	jmp	#LR__1362
0abf0                 | LR__1363
0abf0                 | ' 	}
0abf0                 | ' 	return 0;
0abf0     00 EA 05 F6 | 	mov	result1, #0
0abf4                 | LR__1364
0abf4     A7 F0 03 F6 | 	mov	ptra, fp
0abf8     B2 00 A0 FD | 	call	#popregs_
0abfc                 | _fatfs_cc_getenv_ret
0abfc     2D 00 64 FD | 	ret
0ac00                 | 
0ac00                 | _fatfs_cc__get_fattime
0ac00     00 4A 05 F6 | 	mov	COUNT_, #0
0ac04     A8 00 A0 FD | 	call	#pushregs_
0ac08     34 F0 07 F1 | 	add	ptra, #52
0ac0c     00 00 06 F6 | 	mov	arg01, #0
0ac10     38 FB BF FD | 	call	#_fatfs_cc_time
0ac14     04 4E 05 F1 | 	add	fp, #4
0ac18     A7 EA 61 FC | 	wrlong	result1, fp
0ac1c     A7 00 02 F6 | 	mov	arg01, fp
0ac20     0C 4E 05 F1 | 	add	fp, #12
0ac24     A7 02 02 F6 | 	mov	arg02, fp
0ac28     10 4E 85 F1 | 	sub	fp, #16
0ac2c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
0ac30     24 4E 05 F1 | 	add	fp, #36
0ac34     A7 02 02 FB | 	rdlong	arg02, fp
0ac38     50 02 86 F1 | 	sub	arg02, #80
0ac3c     09 02 66 F0 | 	shl	arg02, #9
0ac40     04 4E 85 F1 | 	sub	fp, #4
0ac44     A7 EA 01 FB | 	rdlong	result1, fp
0ac48     01 EA 05 F1 | 	add	result1, #1
0ac4c     05 EA 65 F0 | 	shl	result1, #5
0ac50     F5 02 42 F5 | 	or	arg02, result1
0ac54     04 4E 85 F1 | 	sub	fp, #4
0ac58     A7 EA 01 FB | 	rdlong	result1, fp
0ac5c     F5 02 42 F5 | 	or	arg02, result1
0ac60     14 4E 85 F1 | 	sub	fp, #20
0ac64     A7 02 62 FC | 	wrlong	arg02, fp
0ac68     10 4E 05 F1 | 	add	fp, #16
0ac6c     A7 02 02 FB | 	rdlong	arg02, fp
0ac70     0B 02 66 F0 | 	shl	arg02, #11
0ac74     04 4E 85 F1 | 	sub	fp, #4
0ac78     A7 EA 01 FB | 	rdlong	result1, fp
0ac7c     05 EA 65 F0 | 	shl	result1, #5
0ac80     F5 02 42 F5 | 	or	arg02, result1
0ac84     04 4E 85 F1 | 	sub	fp, #4
0ac88     A7 EA 01 FB | 	rdlong	result1, fp
0ac8c     F5 02 42 F5 | 	or	arg02, result1
0ac90     04 4E 85 F1 | 	sub	fp, #4
0ac94     A7 02 62 FC | 	wrlong	arg02, fp
0ac98                 | ' 
0ac98                 | '     now = time(0);
0ac98                 | '     _gmtime_r (&now, &date);
0ac98                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
0ac98                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
0ac98                 | '     return (ffdate << 16) | fftime;
0ac98     04 4E 85 F1 | 	sub	fp, #4
0ac9c     A7 EA 01 FB | 	rdlong	result1, fp
0aca0     10 EA 65 F0 | 	shl	result1, #16
0aca4     08 4E 85 F1 | 	sub	fp, #8
0aca8     01 EB 41 F5 | 	or	result1, arg02
0acac     A7 F0 03 F6 | 	mov	ptra, fp
0acb0     B2 00 A0 FD | 	call	#popregs_
0acb4                 | _fatfs_cc__get_fattime_ret
0acb4     2D 00 64 FD | 	ret
0acb8                 | 
0acb8                 | _fatfs_cc_unixtime_0452
0acb8     00 4A 05 F6 | 	mov	COUNT_, #0
0acbc     A8 00 A0 FD | 	call	#pushregs_
0acc0     34 F0 07 F1 | 	add	ptra, #52
0acc4     04 4E 05 F1 | 	add	fp, #4
0acc8     A7 00 62 FC | 	wrlong	arg01, fp
0accc     04 4E 05 F1 | 	add	fp, #4
0acd0     A7 02 62 FC | 	wrlong	arg02, fp
0acd4     04 4E 85 F1 | 	sub	fp, #4
0acd8     A7 02 02 FB | 	rdlong	arg02, fp
0acdc     09 02 46 F0 | 	shr	arg02, #9
0ace0     7F 02 06 F5 | 	and	arg02, #127
0ace4     50 EA 05 F6 | 	mov	result1, #80
0ace8     01 EB 01 F1 | 	add	result1, arg02
0acec     20 4E 05 F1 | 	add	fp, #32
0acf0     A7 EA 61 FC | 	wrlong	result1, fp
0acf4     20 4E 85 F1 | 	sub	fp, #32
0acf8     A7 EA 01 FB | 	rdlong	result1, fp
0acfc     05 EA 45 F0 | 	shr	result1, #5
0ad00     F5 EA 41 F8 | 	getnib	result1, result1, #0
0ad04     01 EA 85 F1 | 	sub	result1, #1
0ad08     1C 4E 05 F1 | 	add	fp, #28
0ad0c     A7 EA 61 FC | 	wrlong	result1, fp
0ad10     1C 4E 85 F1 | 	sub	fp, #28
0ad14     A7 EA 01 FB | 	rdlong	result1, fp
0ad18     1F EA 05 F5 | 	and	result1, #31
0ad1c     18 4E 05 F1 | 	add	fp, #24
0ad20     A7 EA 61 FC | 	wrlong	result1, fp
0ad24     14 4E 85 F1 | 	sub	fp, #20
0ad28     A7 EA 01 FB | 	rdlong	result1, fp
0ad2c     0B EA 45 F0 | 	shr	result1, #11
0ad30     1F EA 05 F5 | 	and	result1, #31
0ad34     10 4E 05 F1 | 	add	fp, #16
0ad38     A7 EA 61 FC | 	wrlong	result1, fp
0ad3c     10 4E 85 F1 | 	sub	fp, #16
0ad40     A7 EA 01 FB | 	rdlong	result1, fp
0ad44     05 EA 45 F0 | 	shr	result1, #5
0ad48     3F EA 05 F5 | 	and	result1, #63
0ad4c     0C 4E 05 F1 | 	add	fp, #12
0ad50     A7 EA 61 FC | 	wrlong	result1, fp
0ad54     0C 4E 85 F1 | 	sub	fp, #12
0ad58     A7 02 02 FB | 	rdlong	arg02, fp
0ad5c     1F 02 06 F5 | 	and	arg02, #31
0ad60     01 02 66 F0 | 	shl	arg02, #1
0ad64     08 4E 05 F1 | 	add	fp, #8
0ad68     A7 02 62 FC | 	wrlong	arg02, fp
0ad6c     A7 00 02 F6 | 	mov	arg01, fp
0ad70     10 4E 85 F1 | 	sub	fp, #16
0ad74     4C FA BF FD | 	call	#_fatfs_cc_mktime
0ad78     0C 4E 05 F1 | 	add	fp, #12
0ad7c     A7 EA 61 FC | 	wrlong	result1, fp
0ad80                 | ' 
0ad80                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
0ad80                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
0ad80                 | '     date.tm_mday = (dosdate & 0x1f);
0ad80                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
0ad80                 | '     date.tm_min = (dostime >> 5) & 0x3f;
0ad80                 | '     date.tm_sec = (dostime & 0x1f) << 1;
0ad80                 | ' 
0ad80                 | '     t = mktime(&date);
0ad80                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0ad80                 | '     return t;
0ad80     0C 4E 85 F1 | 	sub	fp, #12
0ad84     A7 F0 03 F6 | 	mov	ptra, fp
0ad88     B2 00 A0 FD | 	call	#popregs_
0ad8c                 | _fatfs_cc_unixtime_0452_ret
0ad8c     2D 00 64 FD | 	ret
0ad90                 | 
0ad90                 | _fatfs_cc__set_dos_error_0454
0ad90     00 EF 01 F6 | 	mov	_var01, arg01
0ad94                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0ad94                 | '     switch (derr) {
0ad94     14 EE 25 F3 | 	fle	_var01, #20
0ad98     30 EE 61 FD | 	jmprel	_var01
0ad9c                 | LR__1370
0ad9c     50 00 90 FD | 	jmp	#LR__1371
0ada0     84 00 90 FD | 	jmp	#LR__1385
0ada4     80 00 90 FD | 	jmp	#LR__1386
0ada8     7C 00 90 FD | 	jmp	#LR__1387
0adac     48 00 90 FD | 	jmp	#LR__1372
0adb0     44 00 90 FD | 	jmp	#LR__1373
0adb4     40 00 90 FD | 	jmp	#LR__1374
0adb8     44 00 90 FD | 	jmp	#LR__1375
0adbc     48 00 90 FD | 	jmp	#LR__1377
0adc0     54 00 90 FD | 	jmp	#LR__1380
0adc4     38 00 90 FD | 	jmp	#LR__1376
0adc8     4C 00 90 FD | 	jmp	#LR__1381
0adcc     48 00 90 FD | 	jmp	#LR__1382
0add0     44 00 90 FD | 	jmp	#LR__1383
0add4     50 00 90 FD | 	jmp	#LR__1388
0add8     4C 00 90 FD | 	jmp	#LR__1388
0addc     48 00 90 FD | 	jmp	#LR__1388
0ade0     2C 00 90 FD | 	jmp	#LR__1378
0ade4     38 00 90 FD | 	jmp	#LR__1384
0ade8     2C 00 90 FD | 	jmp	#LR__1379
0adec     38 00 90 FD | 	jmp	#LR__1388
0adf0                 | LR__1371
0adf0     00 F0 05 F6 | 	mov	_var02, #0
0adf4                 | '         r = 0;
0adf4                 | '         break;
0adf4     34 00 90 FD | 	jmp	#LR__1389
0adf8                 | LR__1372
0adf8                 | LR__1373
0adf8                 | LR__1374
0adf8     04 F0 05 F6 | 	mov	_var02, #4
0adfc                 | '         r =  4 ;
0adfc                 | '         break;
0adfc     2C 00 90 FD | 	jmp	#LR__1389
0ae00                 | LR__1375
0ae00                 | LR__1376
0ae00     06 F0 05 F6 | 	mov	_var02, #6
0ae04                 | '         r =  6 ;
0ae04                 | '         break;
0ae04     24 00 90 FD | 	jmp	#LR__1389
0ae08                 | LR__1377
0ae08     09 F0 05 F6 | 	mov	_var02, #9
0ae0c                 | '         r =  9 ;
0ae0c                 | '         break;
0ae0c     1C 00 90 FD | 	jmp	#LR__1389
0ae10                 | LR__1378
0ae10     07 F0 05 F6 | 	mov	_var02, #7
0ae14                 | '         r =  7 ;
0ae14                 | '         break;
0ae14     14 00 90 FD | 	jmp	#LR__1389
0ae18                 | LR__1379
0ae18                 | LR__1380
0ae18                 | LR__1381
0ae18                 | LR__1382
0ae18                 | LR__1383
0ae18     0A F0 05 F6 | 	mov	_var02, #10
0ae1c                 | '         r =  10 ;
0ae1c                 | '         break;
0ae1c     0C 00 90 FD | 	jmp	#LR__1389
0ae20                 | LR__1384
0ae20     0B F0 05 F6 | 	mov	_var02, #11
0ae24                 | '         r =  11 ;
0ae24                 | '         break;
0ae24     04 00 90 FD | 	jmp	#LR__1389
0ae28                 | LR__1385
0ae28                 | LR__1386
0ae28                 | LR__1387
0ae28                 | LR__1388
0ae28     0C F0 05 F6 | 	mov	_var02, #12
0ae2c                 | '         r =  12 ;
0ae2c                 | '         break;
0ae2c                 | LR__1389
0ae2c                 | '     }
0ae2c                 | '     return _seterror(r);
0ae2c     00 F0 4D F2 | 	cmps	_var02, #0 wz
0ae30     20 E4 05 F1 | 	add	ptr___system__dat__, #32
0ae34     F2 F0 61 FC | 	wrlong	_var02, ptr___system__dat__
0ae38     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
0ae3c     01 EA 65 56 |  if_ne	neg	result1, #1
0ae40     00 EA 05 A6 |  if_e	mov	result1, #0
0ae44                 | _fatfs_cc__set_dos_error_0454_ret
0ae44     2D 00 64 FD | 	ret
0ae48                 | 
0ae48                 | _fatfs_cc_v_creat
0ae48     04 4A 05 F6 | 	mov	COUNT_, #4
0ae4c     A8 00 A0 FD | 	call	#pushregs_
0ae50     00 0B 02 F6 | 	mov	local01, arg01
0ae54     01 0D 02 F6 | 	mov	local02, arg02
0ae58     03 00 00 FF 
0ae5c     3C 00 06 F6 | 	mov	arg01, ##1596
0ae60                 | '     return _gc_alloc(size);
0ae60     10 02 06 F6 | 	mov	arg02, #16
0ae64     48 6F BF FD | 	call	#__system___gc_doalloc
0ae68     F5 0E 0A F6 | 	mov	local03, result1 wz
0ae6c                 | '       return _seterror( 7 );
0ae6c     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0ae70     F2 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
0ae74     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0ae78     01 EA 65 A6 |  if_e	neg	result1, #1
0ae7c     58 00 90 AD |  if_e	jmp	#LR__1391
0ae80     07 01 02 F6 | 	mov	arg01, local03
0ae84     00 02 06 F6 | 	mov	arg02, #0
0ae88     03 00 00 FF 
0ae8c     3C 04 06 F6 | 	mov	arg03, ##1596
0ae90     98 00 A0 FD | 	call	#\builtin_bytefill_
0ae94     02 00 00 FF 
0ae98     14 0E 06 F1 | 	add	local03, ##1044
0ae9c     07 01 02 F6 | 	mov	arg01, local03
0aea0     02 00 00 FF 
0aea4     14 0E 86 F1 | 	sub	local03, ##1044
0aea8     06 03 02 F6 | 	mov	arg02, local02
0aeac     07 04 06 F6 | 	mov	arg03, #7
0aeb0     B4 CC BF FD | 	call	#_fatfs_cc_f_open
0aeb4     F5 10 0A F6 | 	mov	local04, result1 wz
0aeb8     14 00 90 AD |  if_e	jmp	#LR__1390
0aebc     07 01 02 F6 | 	mov	arg01, local03
0aec0                 | '     return _gc_free(ptr);
0aec0     F8 6F BF FD | 	call	#__system___gc_free
0aec4                 | '     free(f);
0aec4                 | '     return _set_dos_error(r);
0aec4     08 01 02 F6 | 	mov	arg01, local04
0aec8     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0aecc     08 00 90 FD | 	jmp	#LR__1391
0aed0                 | LR__1390
0aed0     05 0F 62 FC | 	wrlong	local03, local01
0aed4                 | '   }
0aed4                 | '   fil->vfsdata = f;
0aed4                 | '   return 0;
0aed4     00 EA 05 F6 | 	mov	result1, #0
0aed8                 | LR__1391
0aed8     A7 F0 03 F6 | 	mov	ptra, fp
0aedc     B2 00 A0 FD | 	call	#popregs_
0aee0                 | _fatfs_cc_v_creat_ret
0aee0     2D 00 64 FD | 	ret
0aee4                 | 
0aee4                 | _fatfs_cc_v_close
0aee4     02 4A 05 F6 | 	mov	COUNT_, #2
0aee8     A8 00 A0 FD | 	call	#pushregs_
0aeec     00 0B 02 FB | 	rdlong	local01, arg01
0aef0     02 00 00 FF 
0aef4     14 0A 06 F1 | 	add	local01, ##1044
0aef8     05 01 02 F6 | 	mov	arg01, local01
0aefc     02 00 00 FF 
0af00     14 0A 86 F1 | 	sub	local01, ##1044
0af04     DC E3 BF FD | 	call	#_fatfs_cc_f_close
0af08     F5 0C 02 F6 | 	mov	local02, result1
0af0c     05 01 02 F6 | 	mov	arg01, local01
0af10                 | '     return _gc_free(ptr);
0af10     A8 6F BF FD | 	call	#__system___gc_free
0af14                 | '     FAT_FIL *f = fil->vfsdata;
0af14                 | '     r=f_close(&f->fil);
0af14                 | '     free(f);
0af14                 | '     return _set_dos_error(r);
0af14     06 01 02 F6 | 	mov	arg01, local02
0af18     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0af1c     A7 F0 03 F6 | 	mov	ptra, fp
0af20     B2 00 A0 FD | 	call	#popregs_
0af24                 | _fatfs_cc_v_close_ret
0af24     2D 00 64 FD | 	ret
0af28                 | 
0af28                 | _fatfs_cc_v_opendir
0af28     04 4A 05 F6 | 	mov	COUNT_, #4
0af2c     A8 00 A0 FD | 	call	#pushregs_
0af30     00 0B 02 F6 | 	mov	local01, arg01
0af34     01 0D 02 F6 | 	mov	local02, arg02
0af38     30 00 06 F6 | 	mov	arg01, #48
0af3c                 | '     return _gc_alloc(size);
0af3c     10 02 06 F6 | 	mov	arg02, #16
0af40     6C 6E BF FD | 	call	#__system___gc_doalloc
0af44     F5 0E 0A F6 | 	mov	local03, result1 wz
0af48                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0af48                 | '       return _seterror( 7 );
0af48     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0af4c     F2 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
0af50     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0af54     01 EA 65 A6 |  if_e	neg	result1, #1
0af58     34 00 90 AD |  if_e	jmp	#LR__1401
0af5c     06 03 02 F6 | 	mov	arg02, local02
0af60     07 01 02 F6 | 	mov	arg01, local03
0af64     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
0af68     F5 10 0A F6 | 	mov	local04, result1 wz
0af6c     14 00 90 AD |  if_e	jmp	#LR__1400
0af70     07 01 02 F6 | 	mov	arg01, local03
0af74                 | '     return _gc_free(ptr);
0af74     44 6F BF FD | 	call	#__system___gc_free
0af78                 | '         free(f);
0af78                 | '         return _set_dos_error(r);
0af78     08 01 02 F6 | 	mov	arg01, local04
0af7c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0af80     0C 00 90 FD | 	jmp	#LR__1401
0af84                 | LR__1400
0af84     04 0A 06 F1 | 	add	local01, #4
0af88     05 0F 62 FC | 	wrlong	local03, local01
0af8c                 | '     }
0af8c                 | '     dir->vfsdata = f;
0af8c                 | '     return 0;
0af8c     00 EA 05 F6 | 	mov	result1, #0
0af90                 | LR__1401
0af90     A7 F0 03 F6 | 	mov	ptra, fp
0af94     B2 00 A0 FD | 	call	#popregs_
0af98                 | _fatfs_cc_v_opendir_ret
0af98     2D 00 64 FD | 	ret
0af9c                 | 
0af9c                 | _fatfs_cc_v_closedir
0af9c     02 4A 05 F6 | 	mov	COUNT_, #2
0afa0     A8 00 A0 FD | 	call	#pushregs_
0afa4     04 00 06 F1 | 	add	arg01, #4
0afa8     00 0B 02 FB | 	rdlong	local01, arg01
0afac     05 01 02 F6 | 	mov	arg01, local01
0afb0     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
0afb4     F5 0C 02 F6 | 	mov	local02, result1
0afb8     05 01 02 F6 | 	mov	arg01, local01
0afbc                 | '     return _gc_free(ptr);
0afbc     FC 6E BF FD | 	call	#__system___gc_free
0afc0     00 0C 0E F2 | 	cmp	local02, #0 wz
0afc4     06 01 02 56 |  if_ne	mov	arg01, local02
0afc8     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0454
0afcc                 | '     return r;
0afcc     06 EB 01 F6 | 	mov	result1, local02
0afd0     A7 F0 03 F6 | 	mov	ptra, fp
0afd4     B2 00 A0 FD | 	call	#popregs_
0afd8                 | _fatfs_cc_v_closedir_ret
0afd8     2D 00 64 FD | 	ret
0afdc                 | 
0afdc                 | _fatfs_cc_v_readdir
0afdc     01 4A 05 F6 | 	mov	COUNT_, #1
0afe0     A8 00 A0 FD | 	call	#pushregs_
0afe4     2C F1 07 F1 | 	add	ptra, #300
0afe8     04 4E 05 F1 | 	add	fp, #4
0afec     A7 00 62 FC | 	wrlong	arg01, fp
0aff0     04 4E 05 F1 | 	add	fp, #4
0aff4     A7 02 62 FC | 	wrlong	arg02, fp
0aff8     04 4E 85 F1 | 	sub	fp, #4
0affc     A7 04 02 FB | 	rdlong	arg03, fp
0b000     04 04 06 F1 | 	add	arg03, #4
0b004     02 01 02 FB | 	rdlong	arg01, arg03
0b008     08 4E 05 F1 | 	add	fp, #8
0b00c     A7 02 02 F6 | 	mov	arg02, fp
0b010     0C 4E 85 F1 | 	sub	fp, #12
0b014     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
0b018     28 4F 05 F1 | 	add	fp, #296
0b01c     A7 EA 61 FC | 	wrlong	result1, fp
0b020     28 4F 85 F1 | 	sub	fp, #296
0b024     00 EA 0D F2 | 	cmp	result1, #0 wz
0b028     14 00 90 AD |  if_e	jmp	#LR__1410
0b02c                 | '         return _set_dos_error(r);
0b02c     28 4F 05 F1 | 	add	fp, #296
0b030     A7 00 02 FB | 	rdlong	arg01, fp
0b034     28 4F 85 F1 | 	sub	fp, #296
0b038     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b03c     C4 00 90 FD | 	jmp	#LR__1413
0b040                 | LR__1410
0b040     28 4E 05 F1 | 	add	fp, #40
0b044     A7 04 CA FA | 	rdbyte	arg03, fp wz
0b048     28 4E 85 F1 | 	sub	fp, #40
0b04c                 | '         return -1;
0b04c     01 EA 65 A6 |  if_e	neg	result1, #1
0b050     B0 00 90 AD |  if_e	jmp	#LR__1413
0b054     08 4E 05 F1 | 	add	fp, #8
0b058     A7 00 02 FB | 	rdlong	arg01, fp
0b05c     20 4E 05 F1 | 	add	fp, #32
0b060     A7 02 02 F6 | 	mov	arg02, fp
0b064     28 4E 85 F1 | 	sub	fp, #40
0b068     3F 04 06 F6 | 	mov	arg03, #63
0b06c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
0b070     08 4E 05 F1 | 	add	fp, #8
0b074     A7 04 02 FB | 	rdlong	arg03, fp
0b078     3F 04 06 F1 | 	add	arg03, #63
0b07c     02 01 48 FC | 	wrbyte	#0, arg03
0b080     0C 4E 05 F1 | 	add	fp, #12
0b084     A7 04 C2 FA | 	rdbyte	arg03, fp
0b088     14 4E 85 F1 | 	sub	fp, #20
0b08c     10 04 CE F7 | 	test	arg03, #16 wz
0b090     18 00 90 AD |  if_e	jmp	#LR__1411
0b094     08 4E 05 F1 | 	add	fp, #8
0b098     A7 04 02 FB | 	rdlong	arg03, fp
0b09c     08 4E 85 F1 | 	sub	fp, #8
0b0a0     50 04 06 F1 | 	add	arg03, #80
0b0a4     02 03 48 FC | 	wrbyte	#1, arg03
0b0a8     14 00 90 FD | 	jmp	#LR__1412
0b0ac                 | LR__1411
0b0ac     08 4E 05 F1 | 	add	fp, #8
0b0b0     A7 04 02 FB | 	rdlong	arg03, fp
0b0b4     08 4E 85 F1 | 	sub	fp, #8
0b0b8     50 04 06 F1 | 	add	arg03, #80
0b0bc     02 01 48 FC | 	wrbyte	#0, arg03
0b0c0                 | LR__1412
0b0c0     08 4E 05 F1 | 	add	fp, #8
0b0c4     A7 04 02 FB | 	rdlong	arg03, fp
0b0c8     04 4E 05 F1 | 	add	fp, #4
0b0cc     A7 02 02 FB | 	rdlong	arg02, fp
0b0d0     48 04 06 F1 | 	add	arg03, #72
0b0d4     02 03 62 FC | 	wrlong	arg02, arg03
0b0d8     04 4E 85 F1 | 	sub	fp, #4
0b0dc     A7 0A 02 FB | 	rdlong	local01, fp
0b0e0     08 4E 05 F1 | 	add	fp, #8
0b0e4     A7 00 E2 FA | 	rdword	arg01, fp
0b0e8     02 4E 05 F1 | 	add	fp, #2
0b0ec     A7 02 E2 FA | 	rdword	arg02, fp
0b0f0     12 4E 85 F1 | 	sub	fp, #18
0b0f4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0452
0b0f8     4C 0A 06 F1 | 	add	local01, #76
0b0fc     05 EB 61 FC | 	wrlong	result1, local01
0b100                 | '         ent->d_type =  (0) ;
0b100                 | '     }
0b100                 | '     ent->d_size = finfo.fsize;
0b100                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
0b100                 | '     return 0;
0b100     00 EA 05 F6 | 	mov	result1, #0
0b104                 | LR__1413
0b104     A7 F0 03 F6 | 	mov	ptra, fp
0b108     B2 00 A0 FD | 	call	#popregs_
0b10c                 | _fatfs_cc_v_readdir_ret
0b10c     2D 00 64 FD | 	ret
0b110                 | 
0b110                 | _fatfs_cc_v_stat
0b110     03 4A 05 F6 | 	mov	COUNT_, #3
0b114     A8 00 A0 FD | 	call	#pushregs_
0b118     30 F1 07 F1 | 	add	ptra, #304
0b11c     04 4E 05 F1 | 	add	fp, #4
0b120     A7 00 62 FC | 	wrlong	arg01, fp
0b124     04 4E 05 F1 | 	add	fp, #4
0b128     A7 02 62 FC | 	wrlong	arg02, fp
0b12c     08 4E 85 F1 | 	sub	fp, #8
0b130     01 01 02 F6 | 	mov	arg01, arg02
0b134     00 02 06 F6 | 	mov	arg02, #0
0b138     30 04 06 F6 | 	mov	arg03, #48
0b13c     98 00 A0 FD | 	call	#\builtin_bytefill_
0b140     04 4E 05 F1 | 	add	fp, #4
0b144     A7 EA 01 FB | 	rdlong	result1, fp
0b148     04 4E 85 F1 | 	sub	fp, #4
0b14c     F5 EA C9 FA | 	rdbyte	result1, result1 wz
0b150     2C 00 90 AD |  if_e	jmp	#LR__1420
0b154     04 4E 05 F1 | 	add	fp, #4
0b158     A7 EA 01 FB | 	rdlong	result1, fp
0b15c     04 4E 85 F1 | 	sub	fp, #4
0b160     F5 EA C1 FA | 	rdbyte	result1, result1
0b164     2E EA 0D F2 | 	cmp	result1, #46 wz
0b168     04 4E 05 A1 |  if_e	add	fp, #4
0b16c     A7 0A 02 AB |  if_e	rdlong	local01, fp
0b170     04 4E 85 A1 |  if_e	sub	fp, #4
0b174     01 0A 06 A1 |  if_e	add	local01, #1
0b178     05 0D CA AA |  if_e	rdbyte	local02, local01 wz
0b17c     18 00 90 5D |  if_ne	jmp	#LR__1421
0b180                 | LR__1420
0b180     18 4E 05 F1 | 	add	fp, #24
0b184     A7 20 48 FC | 	wrbyte	#16, fp
0b188     0C 4E 85 F1 | 	sub	fp, #12
0b18c     A7 00 68 FC | 	wrlong	#0, fp
0b190     0C 4E 85 F1 | 	sub	fp, #12
0b194     24 00 90 FD | 	jmp	#LR__1422
0b198                 | LR__1421
0b198     04 4E 05 F1 | 	add	fp, #4
0b19c     A7 00 02 FB | 	rdlong	arg01, fp
0b1a0     0C 4E 05 F1 | 	add	fp, #12
0b1a4     A7 02 02 F6 | 	mov	arg02, fp
0b1a8     10 4E 85 F1 | 	sub	fp, #16
0b1ac     AC EB BF FD | 	call	#_fatfs_cc_f_stat
0b1b0     0C 4E 05 F1 | 	add	fp, #12
0b1b4     A7 EA 61 FC | 	wrlong	result1, fp
0b1b8     0C 4E 85 F1 | 	sub	fp, #12
0b1bc                 | LR__1422
0b1bc     0C 4E 05 F1 | 	add	fp, #12
0b1c0     A7 0C 0A FB | 	rdlong	local02, fp wz
0b1c4     0C 4E 85 F1 | 	sub	fp, #12
0b1c8     14 00 90 AD |  if_e	jmp	#LR__1423
0b1cc                 | '         return _set_dos_error(r);
0b1cc     0C 4E 05 F1 | 	add	fp, #12
0b1d0     A7 00 02 FB | 	rdlong	arg01, fp
0b1d4     0C 4E 85 F1 | 	sub	fp, #12
0b1d8     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b1dc     14 01 90 FD | 	jmp	#LR__1424
0b1e0                 | LR__1423
0b1e0     2C 4F 05 F1 | 	add	fp, #300
0b1e4     A7 48 6A FC | 	wrlong	#292, fp
0b1e8     14 4F 85 F1 | 	sub	fp, #276
0b1ec     A7 0E C2 FA | 	rdbyte	local03, fp
0b1f0     18 4E 85 F1 | 	sub	fp, #24
0b1f4     01 0E CE F7 | 	test	local03, #1 wz
0b1f8     2C 4F 05 A1 |  if_e	add	fp, #300
0b1fc     A7 0E 02 AB |  if_e	rdlong	local03, fp
0b200     92 0E 46 A5 |  if_e	or	local03, #146
0b204     A7 0E 62 AC |  if_e	wrlong	local03, fp
0b208     2C 4F 85 A1 |  if_e	sub	fp, #300
0b20c     18 4E 05 F1 | 	add	fp, #24
0b210     A7 0E C2 FA | 	rdbyte	local03, fp
0b214     18 4E 85 F1 | 	sub	fp, #24
0b218     10 0E CE F7 | 	test	local03, #16 wz
0b21c     2C 4F 05 51 |  if_ne	add	fp, #300
0b220     A7 0E 02 5B |  if_ne	rdlong	local03, fp
0b224     08 00 00 5F 
0b228     49 0E 46 55 |  if_ne	or	local03, ##4169
0b22c     A7 0E 62 5C |  if_ne	wrlong	local03, fp
0b230     2C 4F 85 51 |  if_ne	sub	fp, #300
0b234     08 4E 05 F1 | 	add	fp, #8
0b238     A7 0E 02 FB | 	rdlong	local03, fp
0b23c     24 4F 05 F1 | 	add	fp, #292
0b240     A7 0C 02 FB | 	rdlong	local02, fp
0b244     08 0E 06 F1 | 	add	local03, #8
0b248     07 0D 62 FC | 	wrlong	local02, local03
0b24c     24 4F 85 F1 | 	sub	fp, #292
0b250     A7 0E 02 FB | 	rdlong	local03, fp
0b254     0C 0E 06 F1 | 	add	local03, #12
0b258     07 03 68 FC | 	wrlong	#1, local03
0b25c     A7 0E 02 FB | 	rdlong	local03, fp
0b260     08 4E 05 F1 | 	add	fp, #8
0b264     A7 0C 02 FB | 	rdlong	local02, fp
0b268     18 0E 06 F1 | 	add	local03, #24
0b26c     07 0D 62 FC | 	wrlong	local02, local03
0b270     08 4E 85 F1 | 	sub	fp, #8
0b274     A7 0E 02 FB | 	rdlong	local03, fp
0b278     1C 0E 06 F1 | 	add	local03, #28
0b27c     01 00 80 FF 
0b280     07 01 68 FC | 	wrlong	##512, local03
0b284     A7 0C 02 FB | 	rdlong	local02, fp
0b288     06 0F 02 F6 | 	mov	local03, local02
0b28c     18 0C 06 F1 | 	add	local02, #24
0b290     06 0D 02 FB | 	rdlong	local02, local02
0b294     FF 0D 06 F1 | 	add	local02, #511
0b298     06 0D 52 F6 | 	abs	local02, local02 wc
0b29c     09 0C 46 F0 | 	shr	local02, #9
0b2a0     06 0D 82 F6 | 	negc	local02, local02
0b2a4     20 0E 06 F1 | 	add	local03, #32
0b2a8     07 0D 62 FC | 	wrlong	local02, local03
0b2ac     A7 0C 02 FB | 	rdlong	local02, fp
0b2b0     06 0F 02 F6 | 	mov	local03, local02
0b2b4     06 0B 02 F6 | 	mov	local01, local02
0b2b8     0C 4E 05 F1 | 	add	fp, #12
0b2bc     A7 00 E2 FA | 	rdword	arg01, fp
0b2c0     02 4E 05 F1 | 	add	fp, #2
0b2c4     A7 02 E2 FA | 	rdword	arg02, fp
0b2c8     16 4E 85 F1 | 	sub	fp, #22
0b2cc     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0452
0b2d0     2C 0A 06 F1 | 	add	local01, #44
0b2d4     05 EB 61 FC | 	wrlong	result1, local01
0b2d8     28 0C 06 F1 | 	add	local02, #40
0b2dc     06 EB 61 FC | 	wrlong	result1, local02
0b2e0     24 0E 06 F1 | 	add	local03, #36
0b2e4     07 EB 61 FC | 	wrlong	result1, local03
0b2e8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
0b2e8                 | '     }
0b2e8                 | '     buf->st_mode = mode;
0b2e8                 | '     buf->st_nlink = 1;
0b2e8                 | '     buf->st_size = finfo.fsize;
0b2e8                 | '     buf->st_blksize = 512;
0b2e8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
0b2e8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
0b2e8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b2e8                 | '     return r;
0b2e8     0C 4E 05 F1 | 	add	fp, #12
0b2ec     A7 EA 01 FB | 	rdlong	result1, fp
0b2f0     0C 4E 85 F1 | 	sub	fp, #12
0b2f4                 | LR__1424
0b2f4     A7 F0 03 F6 | 	mov	ptra, fp
0b2f8     B2 00 A0 FD | 	call	#popregs_
0b2fc                 | _fatfs_cc_v_stat_ret
0b2fc     2D 00 64 FD | 	ret
0b300                 | 
0b300                 | _fatfs_cc_v_read
0b300     00 4A 05 F6 | 	mov	COUNT_, #0
0b304     A8 00 A0 FD | 	call	#pushregs_
0b308     1C F0 07 F1 | 	add	ptra, #28
0b30c     04 4E 05 F1 | 	add	fp, #4
0b310     A7 00 62 FC | 	wrlong	arg01, fp
0b314     04 4E 05 F1 | 	add	fp, #4
0b318     A7 02 62 FC | 	wrlong	arg02, fp
0b31c     04 4E 05 F1 | 	add	fp, #4
0b320     A7 04 62 FC | 	wrlong	arg03, fp
0b324     08 4E 85 F1 | 	sub	fp, #8
0b328     A7 00 02 FB | 	rdlong	arg01, fp
0b32c     00 01 0A FB | 	rdlong	arg01, arg01 wz
0b330     0C 4E 05 F1 | 	add	fp, #12
0b334     A7 00 62 FC | 	wrlong	arg01, fp
0b338     10 4E 85 F1 | 	sub	fp, #16
0b33c                 | '         return _seterror( 5 );
0b33c     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b340     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b344     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b348     01 EA 65 A6 |  if_e	neg	result1, #1
0b34c     B8 00 90 AD |  if_e	jmp	#LR__1432
0b350     10 4E 05 F1 | 	add	fp, #16
0b354     A7 00 02 FB | 	rdlong	arg01, fp
0b358     02 00 00 FF 
0b35c     14 00 06 F1 | 	add	arg01, ##1044
0b360     08 4E 85 F1 | 	sub	fp, #8
0b364     A7 02 02 FB | 	rdlong	arg02, fp
0b368     04 4E 05 F1 | 	add	fp, #4
0b36c     A7 04 02 FB | 	rdlong	arg03, fp
0b370     0C 4E 05 F1 | 	add	fp, #12
0b374     A7 06 02 F6 | 	mov	arg04, fp
0b378     18 4E 85 F1 | 	sub	fp, #24
0b37c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
0b380     14 4E 05 F1 | 	add	fp, #20
0b384     A7 EA 61 FC | 	wrlong	result1, fp
0b388     14 4E 85 F1 | 	sub	fp, #20
0b38c     00 EA 0D F2 | 	cmp	result1, #0 wz
0b390     34 00 90 AD |  if_e	jmp	#LR__1430
0b394     04 4E 05 F1 | 	add	fp, #4
0b398     A7 06 02 FB | 	rdlong	arg04, fp
0b39c     03 05 02 F6 | 	mov	arg03, arg04
0b3a0     08 06 06 F1 | 	add	arg04, #8
0b3a4     03 07 02 FB | 	rdlong	arg04, arg04
0b3a8     20 06 46 F5 | 	or	arg04, #32
0b3ac     08 04 06 F1 | 	add	arg03, #8
0b3b0     02 07 62 FC | 	wrlong	arg04, arg03
0b3b4                 | '         fil->state |=  (0x20) ;
0b3b4                 | '         return _set_dos_error(r);
0b3b4     10 4E 05 F1 | 	add	fp, #16
0b3b8     A7 00 02 FB | 	rdlong	arg01, fp
0b3bc     14 4E 85 F1 | 	sub	fp, #20
0b3c0     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b3c4     40 00 90 FD | 	jmp	#LR__1432
0b3c8                 | LR__1430
0b3c8     18 4E 05 F1 | 	add	fp, #24
0b3cc     A7 EA 09 FB | 	rdlong	result1, fp wz
0b3d0     18 4E 85 F1 | 	sub	fp, #24
0b3d4     24 00 90 5D |  if_ne	jmp	#LR__1431
0b3d8     04 4E 05 F1 | 	add	fp, #4
0b3dc     A7 EA 01 FB | 	rdlong	result1, fp
0b3e0     F5 06 02 F6 | 	mov	arg04, result1
0b3e4     04 4E 85 F1 | 	sub	fp, #4
0b3e8     08 EA 05 F1 | 	add	result1, #8
0b3ec     F5 EA 01 FB | 	rdlong	result1, result1
0b3f0     10 EA 45 F5 | 	or	result1, #16
0b3f4     08 06 06 F1 | 	add	arg04, #8
0b3f8     03 EB 61 FC | 	wrlong	result1, arg04
0b3fc                 | LR__1431
0b3fc                 | '         fil->state |=  (0x10) ;
0b3fc                 | '     }
0b3fc                 | '     return x;
0b3fc     18 4E 05 F1 | 	add	fp, #24
0b400     A7 EA 01 FB | 	rdlong	result1, fp
0b404     18 4E 85 F1 | 	sub	fp, #24
0b408                 | LR__1432
0b408     A7 F0 03 F6 | 	mov	ptra, fp
0b40c     B2 00 A0 FD | 	call	#popregs_
0b410                 | _fatfs_cc_v_read_ret
0b410     2D 00 64 FD | 	ret
0b414                 | 
0b414                 | _fatfs_cc_v_write
0b414     00 4A 05 F6 | 	mov	COUNT_, #0
0b418     A8 00 A0 FD | 	call	#pushregs_
0b41c     1C F0 07 F1 | 	add	ptra, #28
0b420     04 4E 05 F1 | 	add	fp, #4
0b424     A7 00 62 FC | 	wrlong	arg01, fp
0b428     04 4E 05 F1 | 	add	fp, #4
0b42c     A7 02 62 FC | 	wrlong	arg02, fp
0b430     04 4E 05 F1 | 	add	fp, #4
0b434     A7 04 62 FC | 	wrlong	arg03, fp
0b438     08 4E 85 F1 | 	sub	fp, #8
0b43c     A7 00 02 FB | 	rdlong	arg01, fp
0b440     00 01 0A FB | 	rdlong	arg01, arg01 wz
0b444     0C 4E 05 F1 | 	add	fp, #12
0b448     A7 00 62 FC | 	wrlong	arg01, fp
0b44c     10 4E 85 F1 | 	sub	fp, #16
0b450                 | '         return _seterror( 5 );
0b450     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b454     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b458     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b45c     01 EA 65 A6 |  if_e	neg	result1, #1
0b460     84 00 90 AD |  if_e	jmp	#LR__1441
0b464     10 4E 05 F1 | 	add	fp, #16
0b468     A7 00 02 FB | 	rdlong	arg01, fp
0b46c     02 00 00 FF 
0b470     14 00 06 F1 | 	add	arg01, ##1044
0b474     08 4E 85 F1 | 	sub	fp, #8
0b478     A7 02 02 FB | 	rdlong	arg02, fp
0b47c     04 4E 05 F1 | 	add	fp, #4
0b480     A7 04 02 FB | 	rdlong	arg03, fp
0b484     0C 4E 05 F1 | 	add	fp, #12
0b488     A7 06 02 F6 | 	mov	arg04, fp
0b48c     18 4E 85 F1 | 	sub	fp, #24
0b490     4C D4 BF FD | 	call	#_fatfs_cc_f_write
0b494     14 4E 05 F1 | 	add	fp, #20
0b498     A7 EA 61 FC | 	wrlong	result1, fp
0b49c     14 4E 85 F1 | 	sub	fp, #20
0b4a0     00 EA 0D F2 | 	cmp	result1, #0 wz
0b4a4     34 00 90 AD |  if_e	jmp	#LR__1440
0b4a8     04 4E 05 F1 | 	add	fp, #4
0b4ac     A7 06 02 FB | 	rdlong	arg04, fp
0b4b0     03 05 02 F6 | 	mov	arg03, arg04
0b4b4     08 06 06 F1 | 	add	arg04, #8
0b4b8     03 07 02 FB | 	rdlong	arg04, arg04
0b4bc     20 06 46 F5 | 	or	arg04, #32
0b4c0     08 04 06 F1 | 	add	arg03, #8
0b4c4     02 07 62 FC | 	wrlong	arg04, arg03
0b4c8                 | '         fil->state |=  (0x20) ;
0b4c8                 | '         return _set_dos_error(r);
0b4c8     10 4E 05 F1 | 	add	fp, #16
0b4cc     A7 00 02 FB | 	rdlong	arg01, fp
0b4d0     14 4E 85 F1 | 	sub	fp, #20
0b4d4     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b4d8     0C 00 90 FD | 	jmp	#LR__1441
0b4dc                 | LR__1440
0b4dc                 | '     }
0b4dc                 | '     return x;
0b4dc     18 4E 05 F1 | 	add	fp, #24
0b4e0     A7 EA 01 FB | 	rdlong	result1, fp
0b4e4     18 4E 85 F1 | 	sub	fp, #24
0b4e8                 | LR__1441
0b4e8     A7 F0 03 F6 | 	mov	ptra, fp
0b4ec     B2 00 A0 FD | 	call	#popregs_
0b4f0                 | _fatfs_cc_v_write_ret
0b4f0     2D 00 64 FD | 	ret
0b4f4                 | 
0b4f4                 | _fatfs_cc_v_lseek
0b4f4     04 4A 05 F6 | 	mov	COUNT_, #4
0b4f8     A8 00 A0 FD | 	call	#pushregs_
0b4fc     01 0B 02 F6 | 	mov	local01, arg02
0b500     02 0D 02 F6 | 	mov	local02, arg03
0b504     00 0F 02 FB | 	rdlong	local03, arg01
0b508     02 00 00 FF 
0b50c     14 0E 0E F1 | 	add	local03, ##1044 wz
0b510                 | '         return _seterror( 5 );
0b510     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b514     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b518     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b51c     01 EA 65 A6 |  if_e	neg	result1, #1
0b520     4C 00 90 AD |  if_e	jmp	#LR__1452
0b524     00 0C 0E F2 | 	cmp	local02, #0 wz
0b528     24 00 90 AD |  if_e	jmp	#LR__1450
0b52c     01 0C 0E F2 | 	cmp	local02, #1 wz
0b530     14 0E 06 A1 |  if_e	add	local03, #20
0b534     07 11 02 AB |  if_e	rdlong	local04, local03
0b538     14 0E 86 A1 |  if_e	sub	local03, #20
0b53c     08 0B 02 A1 |  if_e	add	local01, local04
0b540     0C 0E 06 51 |  if_ne	add	local03, #12
0b544     07 11 02 5B |  if_ne	rdlong	local04, local03
0b548     0C 0E 86 51 |  if_ne	sub	local03, #12
0b54c     08 0B 02 51 |  if_ne	add	local01, local04
0b550                 | LR__1450
0b550     05 03 02 F6 | 	mov	arg02, local01
0b554     07 01 02 F6 | 	mov	arg01, local03
0b558     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
0b55c     F5 00 0A F6 | 	mov	arg01, result1 wz
0b560     08 00 90 AD |  if_e	jmp	#LR__1451
0b564                 | '         return _set_dos_error(result);
0b564     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b568     04 00 90 FD | 	jmp	#LR__1452
0b56c                 | LR__1451
0b56c                 | '     }
0b56c                 | '     return offset;
0b56c     05 EB 01 F6 | 	mov	result1, local01
0b570                 | LR__1452
0b570     A7 F0 03 F6 | 	mov	ptra, fp
0b574     B2 00 A0 FD | 	call	#popregs_
0b578                 | _fatfs_cc_v_lseek_ret
0b578     2D 00 64 FD | 	ret
0b57c                 | 
0b57c                 | _fatfs_cc_v_ioctl
0b57c                 | ' {
0b57c                 | '     return _seterror( 10 );
0b57c     20 E4 05 F1 | 	add	ptr___system__dat__, #32
0b580     F2 14 68 FC | 	wrlong	#10, ptr___system__dat__
0b584     20 E4 85 F1 | 	sub	ptr___system__dat__, #32
0b588     01 EA 65 F6 | 	neg	result1, #1
0b58c                 | _fatfs_cc_v_ioctl_ret
0b58c     2D 00 64 FD | 	ret
0b590                 | 
0b590                 | _fatfs_cc_v_mkdir
0b590     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
0b594     F5 00 02 F6 | 	mov	arg01, result1
0b598                 | ' 
0b598                 | '     r = f_mkdir(name);
0b598                 | '     return _set_dos_error(r);
0b598     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b59c                 | _fatfs_cc_v_mkdir_ret
0b59c     2D 00 64 FD | 	ret
0b5a0                 | 
0b5a0                 | _fatfs_cc_v_remove
0b5a0     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
0b5a4     F5 00 02 F6 | 	mov	arg01, result1
0b5a8                 | ' 
0b5a8                 | '     r = f_unlink(name);
0b5a8                 | '     return _set_dos_error(r);
0b5a8     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b5ac                 | _fatfs_cc_v_remove_ret
0b5ac     2D 00 64 FD | 	ret
0b5b0                 | 
0b5b0                 | _fatfs_cc_v_rmdir
0b5b0     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
0b5b4     F5 00 02 F6 | 	mov	arg01, result1
0b5b8                 | ' 
0b5b8                 | '     r = f_unlink(name);
0b5b8                 | '     return _set_dos_error(r);
0b5b8     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b5bc                 | _fatfs_cc_v_rmdir_ret
0b5bc     2D 00 64 FD | 	ret
0b5c0                 | 
0b5c0                 | _fatfs_cc_v_rename
0b5c0     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
0b5c4     F5 00 02 F6 | 	mov	arg01, result1
0b5c8                 | '     return _set_dos_error(r);
0b5c8     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b5cc                 | _fatfs_cc_v_rename_ret
0b5cc     2D 00 64 FD | 	ret
0b5d0                 | 
0b5d0                 | _fatfs_cc_v_open
0b5d0     07 4A 05 F6 | 	mov	COUNT_, #7
0b5d4     A8 00 A0 FD | 	call	#pushregs_
0b5d8     00 0B 02 F6 | 	mov	local01, arg01
0b5dc     01 0D 02 F6 | 	mov	local02, arg02
0b5e0     02 0F 02 F6 | 	mov	local03, arg03
0b5e4     03 00 00 FF 
0b5e8     3C 00 06 F6 | 	mov	arg01, ##1596
0b5ec                 | '     return _gc_alloc(size);
0b5ec     10 02 06 F6 | 	mov	arg02, #16
0b5f0     BC 67 BF FD | 	call	#__system___gc_doalloc
0b5f4     F5 10 0A F6 | 	mov	local04, result1 wz
0b5f8                 | '       return _seterror( 7 );
0b5f8     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b5fc     F2 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
0b600     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b604     01 EA 65 A6 |  if_e	neg	result1, #1
0b608     98 00 90 AD |  if_e	jmp	#LR__1466
0b60c     08 01 02 F6 | 	mov	arg01, local04
0b610     00 02 06 F6 | 	mov	arg02, #0
0b614     03 00 00 FF 
0b618     3C 04 06 F6 | 	mov	arg03, ##1596
0b61c     98 00 A0 FD | 	call	#\builtin_bytefill_
0b620                 | '   switch (flags & 3) {
0b620     07 13 02 F6 | 	mov	local05, local03
0b624     03 12 0E F5 | 	and	local05, #3 wz
0b628     0C 00 90 AD |  if_e	jmp	#LR__1460
0b62c     01 12 0E F2 | 	cmp	local05, #1 wz
0b630     0C 00 90 AD |  if_e	jmp	#LR__1461
0b634     10 00 90 FD | 	jmp	#LR__1462
0b638                 | LR__1460
0b638     01 14 06 F6 | 	mov	local06, #1
0b63c                 | '       fs_flags =  0x01 ;
0b63c                 | '       break;
0b63c     0C 00 90 FD | 	jmp	#LR__1463
0b640                 | LR__1461
0b640     02 14 06 F6 | 	mov	local06, #2
0b644                 | '       fs_flags =  0x02 ;
0b644                 | '       break;
0b644     04 00 90 FD | 	jmp	#LR__1463
0b648                 | LR__1462
0b648     03 14 06 F6 | 	mov	local06, #3
0b64c                 | '       fs_flags =  0x01  |  0x02 ;
0b64c                 | '       break;
0b64c                 | LR__1463
0b64c     08 0E CE F7 | 	test	local03, #8 wz
0b650     18 14 46 55 |  if_ne	or	local06, #24
0b654     08 00 90 5D |  if_ne	jmp	#LR__1464
0b658     20 0E CE F7 | 	test	local03, #32 wz
0b65c     30 14 46 55 |  if_ne	or	local06, #48
0b660                 | LR__1464
0b660     02 00 00 FF 
0b664     14 10 06 F1 | 	add	local04, ##1044
0b668     08 01 02 F6 | 	mov	arg01, local04
0b66c     02 00 00 FF 
0b670     14 10 86 F1 | 	sub	local04, ##1044
0b674     06 03 02 F6 | 	mov	arg02, local02
0b678     0A 05 02 F6 | 	mov	arg03, local06
0b67c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
0b680     F5 16 0A F6 | 	mov	local07, result1 wz
0b684     14 00 90 AD |  if_e	jmp	#LR__1465
0b688     08 01 02 F6 | 	mov	arg01, local04
0b68c                 | '     return _gc_free(ptr);
0b68c     2C 68 BF FD | 	call	#__system___gc_free
0b690                 | '     free(f);
0b690                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b690                 | '     return _set_dos_error(r);
0b690     0B 01 02 F6 | 	mov	arg01, local07
0b694     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b698     08 00 90 FD | 	jmp	#LR__1466
0b69c                 | LR__1465
0b69c     05 11 62 FC | 	wrlong	local04, local01
0b6a0                 | '   }
0b6a0                 | '   fil->vfsdata = f;
0b6a0                 | '   return 0;
0b6a0     00 EA 05 F6 | 	mov	result1, #0
0b6a4                 | LR__1466
0b6a4     A7 F0 03 F6 | 	mov	ptra, fp
0b6a8     B2 00 A0 FD | 	call	#popregs_
0b6ac                 | _fatfs_cc_v_open_ret
0b6ac     2D 00 64 FD | 	ret
0b6b0                 | 
0b6b0                 | _fatfs_cc_v_flush
0b6b0     00 01 02 FB | 	rdlong	arg01, arg01
0b6b4     02 00 00 FF 
0b6b8     14 00 0E F1 | 	add	arg01, ##1044 wz
0b6bc                 | '         return _seterror( 5 );
0b6bc     20 E4 05 A1 |  if_e	add	ptr___system__dat__, #32
0b6c0     F2 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0b6c4     20 E4 85 A1 |  if_e	sub	ptr___system__dat__, #32
0b6c8     01 EA 65 A6 |  if_e	neg	result1, #1
0b6cc     0C 00 90 AD |  if_e	jmp	#LR__1470
0b6d0     00 DA BF FD | 	call	#_fatfs_cc_f_sync
0b6d4     F5 00 02 F6 | 	mov	arg01, result1
0b6d8                 | '     }
0b6d8                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b6d8                 | '     result = f_sync(f);
0b6d8                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b6d8                 | '     return _set_dos_error(result);
0b6d8     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0454
0b6dc                 | LR__1470
0b6dc                 | _fatfs_cc_v_flush_ret
0b6dc     2D 00 64 FD | 	ret
0b6e0                 | 
0b6e0                 | _fatfs_cc_v_init
0b6e0                 | ' {
0b6e0                 | '     return 0;
0b6e0     00 EA 05 F6 | 	mov	result1, #0
0b6e4                 | _fatfs_cc_v_init_ret
0b6e4     2D 00 64 FD | 	ret
0b6e8                 | 
0b6e8                 | _fatfs_cc_v_deinit
0b6e8     62 00 00 FF 
0b6ec     DE 03 06 F6 | 	mov	arg02, ##@LR__1639
0b6f0     00 00 06 F6 | 	mov	arg01, #0
0b6f4     00 04 06 F6 | 	mov	arg03, #0
0b6f8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
0b6fc     01 00 00 FF 
0b700     08 E2 05 F1 | 	add	objptr, ##520
0b704     F1 00 02 FB | 	rdlong	arg01, objptr
0b708     04 E2 05 F1 | 	add	objptr, #4
0b70c     F1 02 02 FB | 	rdlong	arg02, objptr
0b710     01 00 00 FF 
0b714     0C E2 85 F1 | 	sub	objptr, ##524
0b718     EC 63 BF FD | 	call	#__system___freepins
0b71c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
0b71c                 | '     _freepins(f_pinmask);
0b71c                 | '     return 0;
0b71c     00 EA 05 F6 | 	mov	result1, #0
0b720                 | _fatfs_cc_v_deinit_ret
0b720     2D 00 64 FD | 	ret
0b724                 | 
0b724                 | _fatfs_cc_get_vfs
0b724     01 4A 05 F6 | 	mov	COUNT_, #1
0b728     A8 00 A0 FD | 	call	#pushregs_
0b72c     00 0B 02 F6 | 	mov	local01, arg01
0b730     50 00 06 F6 | 	mov	arg01, #80
0b734     48 66 BF FD | 	call	#__system___gc_alloc_managed
0b738     F5 00 02 F6 | 	mov	arg01, result1
0b73c     F1 EA 01 F6 | 	mov	result1, objptr
0b740     36 EA 25 F4 | 	bith	result1, #54
0b744     00 EB 61 FC | 	wrlong	result1, arg01
0b748     F1 EA 01 F6 | 	mov	result1, objptr
0b74c     00 68 00 FF 
0b750     00 EA 45 F5 | 	or	result1, ##13631488
0b754     04 00 06 F1 | 	add	arg01, #4
0b758     00 EB 61 FC | 	wrlong	result1, arg01
0b75c     F1 EA 01 F6 | 	mov	result1, objptr
0b760     55 EA 25 F4 | 	bith	result1, #85
0b764     04 00 06 F1 | 	add	arg01, #4
0b768     00 EB 61 FC | 	wrlong	result1, arg01
0b76c     F1 EA 01 F6 | 	mov	result1, objptr
0b770     74 EA 25 F4 | 	bith	result1, #116
0b774     04 00 06 F1 | 	add	arg01, #4
0b778     00 EB 61 FC | 	wrlong	result1, arg01
0b77c     F1 EA 01 F6 | 	mov	result1, objptr
0b780     18 EA 25 F4 | 	bith	result1, #24
0b784     04 00 06 F1 | 	add	arg01, #4
0b788     00 EB 61 FC | 	wrlong	result1, arg01
0b78c     04 00 06 F1 | 	add	arg01, #4
0b790     00 01 68 FC | 	wrlong	#0, arg01
0b794     04 00 06 F1 | 	add	arg01, #4
0b798     00 0B 62 FC | 	wrlong	local01, arg01
0b79c     04 00 06 F1 | 	add	arg01, #4
0b7a0     00 01 68 FC | 	wrlong	#0, arg01
0b7a4     F1 EA 01 F6 | 	mov	result1, objptr
0b7a8     00 88 00 FF 
0b7ac     00 EA 45 F5 | 	or	result1, ##17825792
0b7b0     04 00 06 F1 | 	add	arg01, #4
0b7b4     00 EB 61 FC | 	wrlong	result1, arg01
0b7b8     F1 EA 01 F6 | 	mov	result1, objptr
0b7bc     00 90 00 FF 
0b7c0     00 EA 45 F5 | 	or	result1, ##18874368
0b7c4     04 00 06 F1 | 	add	arg01, #4
0b7c8     00 EB 61 FC | 	wrlong	result1, arg01
0b7cc     F1 EA 01 F6 | 	mov	result1, objptr
0b7d0     00 98 00 FF 
0b7d4     00 EA 45 F5 | 	or	result1, ##19922944
0b7d8     04 00 06 F1 | 	add	arg01, #4
0b7dc     00 EB 61 FC | 	wrlong	result1, arg01
0b7e0     F1 EA 01 F6 | 	mov	result1, objptr
0b7e4     00 A0 00 FF 
0b7e8     00 EA 45 F5 | 	or	result1, ##20971520
0b7ec     04 00 06 F1 | 	add	arg01, #4
0b7f0     00 EB 61 FC | 	wrlong	result1, arg01
0b7f4     F1 EA 01 F6 | 	mov	result1, objptr
0b7f8     00 A8 00 FF 
0b7fc     00 EA 45 F5 | 	or	result1, ##22020096
0b800     04 00 06 F1 | 	add	arg01, #4
0b804     00 EB 61 FC | 	wrlong	result1, arg01
0b808     F1 EA 01 F6 | 	mov	result1, objptr
0b80c     00 B0 00 FF 
0b810     00 EA 45 F5 | 	or	result1, ##23068672
0b814     04 00 06 F1 | 	add	arg01, #4
0b818     00 EB 61 FC | 	wrlong	result1, arg01
0b81c     F1 EA 01 F6 | 	mov	result1, objptr
0b820     00 B8 00 FF 
0b824     00 EA 45 F5 | 	or	result1, ##24117248
0b828     04 00 06 F1 | 	add	arg01, #4
0b82c     00 EB 61 FC | 	wrlong	result1, arg01
0b830     F1 EA 01 F6 | 	mov	result1, objptr
0b834     37 EA 25 F4 | 	bith	result1, #55
0b838     04 00 06 F1 | 	add	arg01, #4
0b83c     00 EB 61 FC | 	wrlong	result1, arg01
0b840     F1 EA 01 F6 | 	mov	result1, objptr
0b844     00 C8 00 FF 
0b848     00 EA 45 F5 | 	or	result1, ##26214400
0b84c     04 00 06 F1 | 	add	arg01, #4
0b850     00 EB 61 FC | 	wrlong	result1, arg01
0b854     F1 EA 01 F6 | 	mov	result1, objptr
0b858     00 D0 00 FF 
0b85c     00 EA 45 F5 | 	or	result1, ##27262976
0b860     04 00 06 F1 | 	add	arg01, #4
0b864     00 EB 61 FC | 	wrlong	result1, arg01
0b868     F1 EA 01 F6 | 	mov	result1, objptr
0b86c     00 D8 00 FF 
0b870     00 EA 45 F5 | 	or	result1, ##28311552
0b874     04 00 06 F1 | 	add	arg01, #4
0b878     00 EB 61 FC | 	wrlong	result1, arg01
0b87c     F1 EA 01 F6 | 	mov	result1, objptr
0b880     56 EA 25 F4 | 	bith	result1, #86
0b884     04 00 06 F1 | 	add	arg01, #4
0b888     00 EB 61 FC | 	wrlong	result1, arg01
0b88c     4C 00 86 F1 | 	sub	arg01, #76
0b890                 | ' 
0b890                 | '     v->close = &v_close;
0b890                 | '     v->read = &v_read;
0b890                 | '     v->write = &v_write;
0b890                 | '     v->lseek = &v_lseek;
0b890                 | '     v->ioctl = &v_ioctl;
0b890                 | '     v->flush = 0;
0b890                 | '     v->vfs_data = ptr;
0b890                 | '     v->reserved = 0;
0b890                 | ' 
0b890                 | '     v->open = &v_open;
0b890                 | '     v->creat = &v_creat;
0b890                 | '     v->opendir = &v_opendir;
0b890                 | '     v->closedir = &v_closedir;
0b890                 | '     v->readdir = &v_readdir;
0b890                 | '     v->stat = &v_stat;
0b890                 | ' 
0b890                 | '     v->mkdir = &v_mkdir;
0b890                 | '     v->rmdir = &v_rmdir;
0b890                 | ' 
0b890                 | '     v->remove = &v_remove;
0b890                 | '     v->rename = &v_rename;
0b890                 | ' 
0b890                 | '     v->init = &v_init;
0b890                 | '     v->deinit = &v_deinit;
0b890                 | ' 
0b890                 | '     return v;
0b890     00 EB 01 F6 | 	mov	result1, arg01
0b894     A7 F0 03 F6 | 	mov	ptra, fp
0b898     B2 00 A0 FD | 	call	#popregs_
0b89c                 | _fatfs_cc_get_vfs_ret
0b89c     2D 00 64 FD | 	ret
0b8a0                 | 
0b8a0                 | _fatfs_cc_xmit_mmc_0588
0b8a0     01 00 00 FF 
0b8a4     10 E2 05 F1 | 	add	objptr, ##528
0b8a8     F1 EE 01 FB | 	rdlong	_var01, objptr
0b8ac     08 E2 05 F1 | 	add	objptr, #8
0b8b0     F1 F0 01 FB | 	rdlong	_var02, objptr
0b8b4     01 00 00 FF 
0b8b8     18 E2 85 F1 | 	sub	objptr, ##536
0b8bc     40 F0 61 FD | 	dirl	_var02
0b8c0     28 02 64 FD | 	setq	#1
0b8c4     00 F3 01 FB | 	rdlong	_var03, arg01
0b8c8     69 F2 61 FD | 	rev	_var03
0b8cc     1B F2 FD F9 | 	movbyts	_var03, #27
0b8d0     F8 F2 21 FC | 	wypin	_var03, _var02
0b8d4     01 F3 01 F6 | 	mov	_var03, arg02
0b8d8     02 02 4E F0 | 	shr	arg02, #2 wz
0b8dc     03 F2 65 F0 | 	shl	_var03, #3
0b8e0     F7 F2 21 FC | 	wypin	_var03, _var01
0b8e4     41 F0 61 FD | 	dirh	_var02
0b8e8     08 00 06 F1 | 	add	arg01, #8
0b8ec     69 F4 61 FD | 	rev	_var04
0b8f0     1B F4 FD F9 | 	movbyts	_var04, #27
0b8f4                 | LR__1480
0b8f4     F8 F4 21 5C |  if_ne	wypin	_var04, _var02
0b8f8     00 F5 01 5B |  if_ne	rdlong	_var04, arg01
0b8fc     04 00 06 51 |  if_ne	add	arg01, #4
0b900     69 F4 61 5D |  if_ne	rev	_var04
0b904     1B F4 FD 59 |  if_ne	movbyts	_var04, #27
0b908                 | LR__1481
0b908     40 F0 71 5D |  if_ne	testp	_var02 wc
0b90c     F8 FF 9F 1D |  if_a	jmp	#LR__1481
0b910     F8 03 6E 5B |  if_ne	djnz	arg02, #LR__1480
0b914                 | LR__1482
0b914     40 EE 71 FD | 	testp	_var01 wc
0b918     F8 FF 9F 3D |  if_ae	jmp	#LR__1482
0b91c     40 F0 61 FD | 	dirl	_var02
0b920     FF FF FF FF 
0b924     F8 FE 2B FC | 	wypin	##-1, _var02
0b928     41 F0 61 FD | 	dirh	_var02
0b92c                 | _fatfs_cc_xmit_mmc_0588_ret
0b92c     2D 00 64 FD | 	ret
0b930                 | 
0b930                 | _fatfs_cc_rcvr_mmc_0595
0b930     01 00 00 FF 
0b934     10 E2 05 F1 | 	add	objptr, ##528
0b938     F1 EE 01 FB | 	rdlong	_var01, objptr
0b93c     0C E2 05 F1 | 	add	objptr, #12
0b940     F1 F0 01 FB | 	rdlong	_var02, objptr
0b944     01 00 00 FF 
0b948     1C E2 85 F1 | 	sub	objptr, ##540
0b94c     F8 02 08 FC | 	akpin	_var02
0b950     01 F3 09 F6 | 	mov	_var03, arg02 wz
0b954     02 F2 4D F0 | 	shr	_var03, #2 wz
0b958     30 00 90 AD |  if_e	jmp	#LR__1492
0b95c     F9 F4 01 F6 | 	mov	_var04, _var03
0b960     05 F4 65 F0 | 	shl	_var04, #5
0b964     F7 F4 21 FC | 	wypin	_var04, _var01
0b968     F8 7E 18 FC | 	wxpin	#63, _var02
0b96c                 | LR__1490
0b96c                 | LR__1491
0b96c     40 F0 71 FD | 	testp	_var02 wc
0b970     F8 FF 9F 3D |  if_ae	jmp	#LR__1491
0b974     F8 F4 89 FA | 	rdpin	_var04, _var02
0b978     69 F4 61 FD | 	rev	_var04
0b97c     1B F4 FD F9 | 	movbyts	_var04, #27
0b980     00 F5 61 FC | 	wrlong	_var04, arg01
0b984     04 00 06 F1 | 	add	arg01, #4
0b988     F8 F3 6D FB | 	djnz	_var03, #LR__1490
0b98c                 | LR__1492
0b98c     03 02 0E F5 | 	and	arg02, #3 wz
0b990     24 00 90 AD |  if_e	jmp	#LR__1495
0b994     F8 4E 18 FC | 	wxpin	#39, _var02
0b998                 | LR__1493
0b998     F7 10 28 FC | 	wypin	#8, _var01
0b99c                 | LR__1494
0b99c     40 F0 71 FD | 	testp	_var02 wc
0b9a0     F8 FF 9F 3D |  if_ae	jmp	#LR__1494
0b9a4     F8 F4 89 FA | 	rdpin	_var04, _var02
0b9a8     69 F4 61 FD | 	rev	_var04
0b9ac     00 F5 41 FC | 	wrbyte	_var04, arg01
0b9b0     01 00 06 F1 | 	add	arg01, #1
0b9b4     F8 03 6E FB | 	djnz	arg02, #LR__1493
0b9b8                 | LR__1495
0b9b8                 | _fatfs_cc_rcvr_mmc_0595_ret
0b9b8     2D 00 64 FD | 	ret
0b9bc                 | 
0b9bc                 | _fatfs_cc_wait_ready_0599
0b9bc     01 4A 05 F6 | 	mov	COUNT_, #1
0b9c0     A8 00 A0 FD | 	call	#pushregs_
0b9c4     10 F0 07 F1 | 	add	ptra, #16
0b9c8     1A EA 61 FD | 	getct	result1
0b9cc     08 4E 05 F1 | 	add	fp, #8
0b9d0     A7 EA 61 FC | 	wrlong	result1, fp
0b9d4     14 0A 06 FB | 	rdlong	local01, #20
0b9d8     01 0A 46 F0 | 	shr	local01, #1
0b9dc     04 4E 05 F1 | 	add	fp, #4
0b9e0     A7 0A 62 FC | 	wrlong	local01, fp
0b9e4     0C 4E 85 F1 | 	sub	fp, #12
0b9e8                 | ' {
0b9e8                 | ' 	BYTE d;
0b9e8                 | ' 	UINT tmr, tmout;
0b9e8                 | ' 
0b9e8                 | ' 	tmr = _cnt();
0b9e8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
0b9e8                 | ' 	for(;;) {
0b9e8                 | LR__1500
0b9e8     04 4E 05 F1 | 	add	fp, #4
0b9ec     A7 00 02 F6 | 	mov	arg01, fp
0b9f0     04 4E 85 F1 | 	sub	fp, #4
0b9f4     01 02 06 F6 | 	mov	arg02, #1
0b9f8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0b9fc     04 4E 05 F1 | 	add	fp, #4
0ba00     A7 0A C2 FA | 	rdbyte	local01, fp
0ba04     04 4E 85 F1 | 	sub	fp, #4
0ba08     FF 0A 0E F2 | 	cmp	local01, #255 wz
0ba0c     01 EA 05 A6 |  if_e	mov	result1, #1
0ba10     28 00 90 AD |  if_e	jmp	#LR__1501
0ba14     1A EA 61 FD | 	getct	result1
0ba18     08 4E 05 F1 | 	add	fp, #8
0ba1c     A7 0A 02 FB | 	rdlong	local01, fp
0ba20     05 EB 81 F1 | 	sub	result1, local01
0ba24     04 4E 05 F1 | 	add	fp, #4
0ba28     A7 0A 02 FB | 	rdlong	local01, fp
0ba2c     0C 4E 85 F1 | 	sub	fp, #12
0ba30     05 EB 11 F2 | 	cmp	result1, local01 wc
0ba34     00 EA 05 36 |  if_ae	mov	result1, #0
0ba38     AC FF 9F CD |  if_b	jmp	#LR__1500
0ba3c                 | LR__1501
0ba3c     A7 F0 03 F6 | 	mov	ptra, fp
0ba40     B2 00 A0 FD | 	call	#popregs_
0ba44                 | _fatfs_cc_wait_ready_0599_ret
0ba44     2D 00 64 FD | 	ret
0ba48                 | 
0ba48                 | _fatfs_cc_deselect_0605
0ba48     00 4A 05 F6 | 	mov	COUNT_, #0
0ba4c     A8 00 A0 FD | 	call	#pushregs_
0ba50     14 F0 07 F1 | 	add	ptra, #20
0ba54     01 00 00 FF 
0ba58     14 E2 05 F1 | 	add	objptr, ##532
0ba5c     F1 02 02 FB | 	rdlong	arg02, objptr
0ba60     04 4E 05 F1 | 	add	fp, #4
0ba64     A7 02 62 FC | 	wrlong	arg02, fp
0ba68     04 E2 85 F1 | 	sub	objptr, #4
0ba6c     F1 02 02 FB | 	rdlong	arg02, objptr
0ba70     04 4E 05 F1 | 	add	fp, #4
0ba74     A7 02 62 FC | 	wrlong	arg02, fp
0ba78     08 E2 05 F1 | 	add	objptr, #8
0ba7c     F1 02 02 FB | 	rdlong	arg02, objptr
0ba80     04 4E 05 F1 | 	add	fp, #4
0ba84     A7 02 62 FC | 	wrlong	arg02, fp
0ba88     04 E2 05 F1 | 	add	objptr, #4
0ba8c     F1 02 02 FB | 	rdlong	arg02, objptr
0ba90     01 00 00 FF 
0ba94     1C E2 85 F1 | 	sub	objptr, ##540
0ba98     04 4E 05 F1 | 	add	fp, #4
0ba9c     A7 02 62 FC | 	wrlong	arg02, fp
0baa0     0C 4E 85 F1 | 	sub	fp, #12
0baa4     A7 00 02 FB | 	rdlong	arg01, fp
0baa8     04 4E 85 F1 | 	sub	fp, #4
0baac     59 00 62 FD | 	drvh	arg01
0bab0     1F 20 64 FD | 	waitx	#16
0bab4     A7 00 02 F6 | 	mov	arg01, fp
0bab8     01 02 06 F6 | 	mov	arg02, #1
0babc     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bac0     A7 F0 03 F6 | 	mov	ptra, fp
0bac4     B2 00 A0 FD | 	call	#popregs_
0bac8                 | _fatfs_cc_deselect_0605_ret
0bac8     2D 00 64 FD | 	ret
0bacc                 | 
0bacc                 | _fatfs_cc_select_0609
0bacc     00 4A 05 F6 | 	mov	COUNT_, #0
0bad0     A8 00 A0 FD | 	call	#pushregs_
0bad4     10 F0 07 F1 | 	add	ptra, #16
0bad8     01 00 00 FF 
0badc     14 E2 05 F1 | 	add	objptr, ##532
0bae0     F1 02 02 FB | 	rdlong	arg02, objptr
0bae4     08 4E 05 F1 | 	add	fp, #8
0bae8     A7 02 62 FC | 	wrlong	arg02, fp
0baec     08 E2 05 F1 | 	add	objptr, #8
0baf0     F1 00 02 FB | 	rdlong	arg01, objptr
0baf4     01 00 00 FF 
0baf8     1C E2 85 F1 | 	sub	objptr, ##540
0bafc     04 4E 05 F1 | 	add	fp, #4
0bb00     A7 00 62 FC | 	wrlong	arg01, fp
0bb04     50 00 62 FD | 	fltl	arg01
0bb08     04 4E 85 F1 | 	sub	fp, #4
0bb0c     A7 00 02 FB | 	rdlong	arg01, fp
0bb10     58 00 62 FD | 	drvl	arg01
0bb14     1F 20 64 FD | 	waitx	#16
0bb18     04 4E 05 F1 | 	add	fp, #4
0bb1c     A7 00 02 FB | 	rdlong	arg01, fp
0bb20     41 00 62 FD | 	dirh	arg01
0bb24     08 4E 85 F1 | 	sub	fp, #8
0bb28     A7 00 02 F6 | 	mov	arg01, fp
0bb2c     04 4E 85 F1 | 	sub	fp, #4
0bb30     01 02 06 F6 | 	mov	arg02, #1
0bb34     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bb38     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0599
0bb3c     00 EA 0D F2 | 	cmp	result1, #0 wz
0bb40     01 EA 05 56 |  if_ne	mov	result1, #1
0bb44     08 00 90 5D |  if_ne	jmp	#LR__1510
0bb48     FC FE BF FD | 	call	#_fatfs_cc_deselect_0605
0bb4c                 | ' 
0bb4c                 | ' 	deselect();
0bb4c                 | ' 	return 0;
0bb4c     00 EA 05 F6 | 	mov	result1, #0
0bb50                 | LR__1510
0bb50     A7 F0 03 F6 | 	mov	ptra, fp
0bb54     B2 00 A0 FD | 	call	#popregs_
0bb58                 | _fatfs_cc_select_0609_ret
0bb58     2D 00 64 FD | 	ret
0bb5c                 | 
0bb5c                 | _fatfs_cc_rcvr_datablock_0613
0bb5c     01 4A 05 F6 | 	mov	COUNT_, #1
0bb60     A8 00 A0 FD | 	call	#pushregs_
0bb64     18 F0 07 F1 | 	add	ptra, #24
0bb68     04 4E 05 F1 | 	add	fp, #4
0bb6c     A7 00 62 FC | 	wrlong	arg01, fp
0bb70     04 4E 05 F1 | 	add	fp, #4
0bb74     A7 02 62 FC | 	wrlong	arg02, fp
0bb78     1A EA 61 FD | 	getct	result1
0bb7c     08 4E 05 F1 | 	add	fp, #8
0bb80     A7 EA 61 FC | 	wrlong	result1, fp
0bb84     14 0A 06 FB | 	rdlong	local01, #20
0bb88     03 0A 46 F0 | 	shr	local01, #3
0bb8c     04 4E 05 F1 | 	add	fp, #4
0bb90     A7 0A 62 FC | 	wrlong	local01, fp
0bb94     14 4E 85 F1 | 	sub	fp, #20
0bb98                 | ' 	BYTE *buff,
0bb98                 | ' 	UINT btr
0bb98                 | ' )
0bb98                 | ' {
0bb98                 | ' 	BYTE d[2];
0bb98                 | ' 	UINT tmr, tmout;
0bb98                 | ' 
0bb98                 | ' 	tmr = _cnt();
0bb98                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
0bb98                 | ' 	for(;;) {
0bb98                 | LR__1520
0bb98     0C 4E 05 F1 | 	add	fp, #12
0bb9c     A7 00 02 F6 | 	mov	arg01, fp
0bba0     0C 4E 85 F1 | 	sub	fp, #12
0bba4     01 02 06 F6 | 	mov	arg02, #1
0bba8     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bbac     0C 4E 05 F1 | 	add	fp, #12
0bbb0     A7 0A C2 FA | 	rdbyte	local01, fp
0bbb4     0C 4E 85 F1 | 	sub	fp, #12
0bbb8     FF 0A 0E F2 | 	cmp	local01, #255 wz
0bbbc     28 00 90 5D |  if_ne	jmp	#LR__1521
0bbc0     1A EA 61 FD | 	getct	result1
0bbc4     F5 0A 02 F6 | 	mov	local01, result1
0bbc8     10 4E 05 F1 | 	add	fp, #16
0bbcc     A7 02 02 FB | 	rdlong	arg02, fp
0bbd0     01 0B 82 F1 | 	sub	local01, arg02
0bbd4     04 4E 05 F1 | 	add	fp, #4
0bbd8     A7 02 02 FB | 	rdlong	arg02, fp
0bbdc     14 4E 85 F1 | 	sub	fp, #20
0bbe0     01 0B 12 F2 | 	cmp	local01, arg02 wc
0bbe4     B0 FF 9F CD |  if_b	jmp	#LR__1520
0bbe8                 | LR__1521
0bbe8     0C 4E 05 F1 | 	add	fp, #12
0bbec     A7 0A C2 FA | 	rdbyte	local01, fp
0bbf0     0C 4E 85 F1 | 	sub	fp, #12
0bbf4     FE 0A 0E F2 | 	cmp	local01, #254 wz
0bbf8     00 EA 05 56 |  if_ne	mov	result1, #0
0bbfc     30 00 90 5D |  if_ne	jmp	#LR__1522
0bc00     04 4E 05 F1 | 	add	fp, #4
0bc04     A7 00 02 FB | 	rdlong	arg01, fp
0bc08     04 4E 05 F1 | 	add	fp, #4
0bc0c     A7 02 02 FB | 	rdlong	arg02, fp
0bc10     08 4E 85 F1 | 	sub	fp, #8
0bc14     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bc18     0C 4E 05 F1 | 	add	fp, #12
0bc1c     A7 00 02 F6 | 	mov	arg01, fp
0bc20     0C 4E 85 F1 | 	sub	fp, #12
0bc24     02 02 06 F6 | 	mov	arg02, #2
0bc28     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bc2c                 | ' 
0bc2c                 | ' 	rcvr_mmc(buff, btr);
0bc2c                 | ' 	rcvr_mmc(d, 2);
0bc2c                 | ' 
0bc2c                 | ' 	return 1;
0bc2c     01 EA 05 F6 | 	mov	result1, #1
0bc30                 | LR__1522
0bc30     A7 F0 03 F6 | 	mov	ptra, fp
0bc34     B2 00 A0 FD | 	call	#popregs_
0bc38                 | _fatfs_cc_rcvr_datablock_0613_ret
0bc38     2D 00 64 FD | 	ret
0bc3c                 | 
0bc3c                 | _fatfs_cc_xmit_datablock_0615
0bc3c     00 4A 05 F6 | 	mov	COUNT_, #0
0bc40     A8 00 A0 FD | 	call	#pushregs_
0bc44     10 F0 07 F1 | 	add	ptra, #16
0bc48     04 4E 05 F1 | 	add	fp, #4
0bc4c     A7 00 62 FC | 	wrlong	arg01, fp
0bc50     04 4E 05 F1 | 	add	fp, #4
0bc54     A7 02 42 FC | 	wrbyte	arg02, fp
0bc58     08 4E 85 F1 | 	sub	fp, #8
0bc5c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0599
0bc60     00 EA 0D F2 | 	cmp	result1, #0 wz
0bc64     00 EA 05 A6 |  if_e	mov	result1, #0
0bc68     90 00 90 AD |  if_e	jmp	#LR__1531
0bc6c     08 4E 05 F1 | 	add	fp, #8
0bc70     A7 02 C2 FA | 	rdbyte	arg02, fp
0bc74     04 4E 05 F1 | 	add	fp, #4
0bc78     A7 02 42 FC | 	wrbyte	arg02, fp
0bc7c     A7 00 02 F6 | 	mov	arg01, fp
0bc80     0C 4E 85 F1 | 	sub	fp, #12
0bc84     01 02 06 F6 | 	mov	arg02, #1
0bc88     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0588
0bc8c     08 4E 05 F1 | 	add	fp, #8
0bc90     A7 02 C2 FA | 	rdbyte	arg02, fp
0bc94     08 4E 85 F1 | 	sub	fp, #8
0bc98     FD 02 0E F2 | 	cmp	arg02, #253 wz
0bc9c     58 00 90 AD |  if_e	jmp	#LR__1530
0bca0     04 4E 05 F1 | 	add	fp, #4
0bca4     A7 00 02 FB | 	rdlong	arg01, fp
0bca8     04 4E 85 F1 | 	sub	fp, #4
0bcac     09 02 C6 F9 | 	decod	arg02, #9
0bcb0     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0588
0bcb4     0C 4E 05 F1 | 	add	fp, #12
0bcb8     A7 00 02 F6 | 	mov	arg01, fp
0bcbc     0C 4E 85 F1 | 	sub	fp, #12
0bcc0     02 02 06 F6 | 	mov	arg02, #2
0bcc4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bcc8     0C 4E 05 F1 | 	add	fp, #12
0bccc     A7 00 02 F6 | 	mov	arg01, fp
0bcd0     0C 4E 85 F1 | 	sub	fp, #12
0bcd4     01 02 06 F6 | 	mov	arg02, #1
0bcd8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0bcdc     0C 4E 05 F1 | 	add	fp, #12
0bce0     A7 02 C2 FA | 	rdbyte	arg02, fp
0bce4     0C 4E 85 F1 | 	sub	fp, #12
0bce8     1F 02 06 F5 | 	and	arg02, #31
0bcec     05 02 0E F2 | 	cmp	arg02, #5 wz
0bcf0                 | ' 			return 0;
0bcf0     00 EA 05 56 |  if_ne	mov	result1, #0
0bcf4     04 00 90 5D |  if_ne	jmp	#LR__1531
0bcf8                 | LR__1530
0bcf8                 | ' 	}
0bcf8                 | ' 
0bcf8                 | ' 	return 1;
0bcf8     01 EA 05 F6 | 	mov	result1, #1
0bcfc                 | LR__1531
0bcfc     A7 F0 03 F6 | 	mov	ptra, fp
0bd00     B2 00 A0 FD | 	call	#popregs_
0bd04                 | _fatfs_cc_xmit_datablock_0615_ret
0bd04     2D 00 64 FD | 	ret
0bd08                 | 
0bd08                 | _fatfs_cc_send_cmd_0619
0bd08     01 4A 05 F6 | 	mov	COUNT_, #1
0bd0c     A8 00 A0 FD | 	call	#pushregs_
0bd10     1C F0 07 F1 | 	add	ptra, #28
0bd14                 | _fatfs_cc_send_cmd_0619_enter
0bd14     04 4E 05 F1 | 	add	fp, #4
0bd18     A7 00 42 FC | 	wrbyte	arg01, fp
0bd1c     04 4E 05 F1 | 	add	fp, #4
0bd20     A7 02 62 FC | 	wrlong	arg02, fp
0bd24     04 4E 85 F1 | 	sub	fp, #4
0bd28     A7 EA C1 FA | 	rdbyte	result1, fp
0bd2c     04 4E 85 F1 | 	sub	fp, #4
0bd30     80 EA CD F7 | 	test	result1, #128 wz
0bd34     44 00 90 AD |  if_e	jmp	#LR__1540
0bd38     04 4E 05 F1 | 	add	fp, #4
0bd3c     A7 02 C2 FA | 	rdbyte	arg02, fp
0bd40     7F 02 06 F5 | 	and	arg02, #127
0bd44     A7 02 42 FC | 	wrbyte	arg02, fp
0bd48     04 4E 85 F1 | 	sub	fp, #4
0bd4c     37 00 06 F6 | 	mov	arg01, #55
0bd50     00 02 06 F6 | 	mov	arg02, #0
0bd54     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0619
0bd58     0C 4E 05 F1 | 	add	fp, #12
0bd5c     A7 EA 41 FC | 	wrbyte	result1, fp
0bd60     A7 02 C2 FA | 	rdbyte	arg02, fp
0bd64     0C 4E 85 F1 | 	sub	fp, #12
0bd68     02 02 16 F2 | 	cmp	arg02, #2 wc
0bd6c     0C 4E 05 31 |  if_ae	add	fp, #12
0bd70     A7 EA C1 3A |  if_ae	rdbyte	result1, fp
0bd74     0C 4E 85 31 |  if_ae	sub	fp, #12
0bd78     6C 01 90 3D |  if_ae	jmp	#LR__1544
0bd7c                 | LR__1540
0bd7c     04 4E 05 F1 | 	add	fp, #4
0bd80     A7 02 C2 FA | 	rdbyte	arg02, fp
0bd84     04 4E 85 F1 | 	sub	fp, #4
0bd88     0C 02 0E F2 | 	cmp	arg02, #12 wz
0bd8c     14 00 90 AD |  if_e	jmp	#LR__1541
0bd90     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0605
0bd94     34 FD BF FD | 	call	#_fatfs_cc_select_0609
0bd98     00 EA 0D F2 | 	cmp	result1, #0 wz
0bd9c     FF EA 05 A6 |  if_e	mov	result1, #255
0bda0     44 01 90 AD |  if_e	jmp	#LR__1544
0bda4                 | LR__1541
0bda4     04 4E 05 F1 | 	add	fp, #4
0bda8     A7 02 C2 FA | 	rdbyte	arg02, fp
0bdac     40 EA 05 F6 | 	mov	result1, #64
0bdb0     01 EB 41 F5 | 	or	result1, arg02
0bdb4     10 4E 05 F1 | 	add	fp, #16
0bdb8     A7 EA 41 FC | 	wrbyte	result1, fp
0bdbc     0C 4E 85 F1 | 	sub	fp, #12
0bdc0     A7 EA 01 FB | 	rdlong	result1, fp
0bdc4     18 EA 45 F0 | 	shr	result1, #24
0bdc8     0D 4E 05 F1 | 	add	fp, #13
0bdcc     A7 EA 41 FC | 	wrbyte	result1, fp
0bdd0     0D 4E 85 F1 | 	sub	fp, #13
0bdd4     A7 EA 01 FB | 	rdlong	result1, fp
0bdd8     10 EA 45 F0 | 	shr	result1, #16
0bddc     0E 4E 05 F1 | 	add	fp, #14
0bde0     A7 EA 41 FC | 	wrbyte	result1, fp
0bde4     0E 4E 85 F1 | 	sub	fp, #14
0bde8     A7 EA 01 FB | 	rdlong	result1, fp
0bdec     08 EA 45 F0 | 	shr	result1, #8
0bdf0     0F 4E 05 F1 | 	add	fp, #15
0bdf4     A7 EA 41 FC | 	wrbyte	result1, fp
0bdf8     0F 4E 85 F1 | 	sub	fp, #15
0bdfc     A7 EA 01 FB | 	rdlong	result1, fp
0be00     10 4E 05 F1 | 	add	fp, #16
0be04     A7 EA 41 FC | 	wrbyte	result1, fp
0be08     0C 4E 85 F1 | 	sub	fp, #12
0be0c     A7 02 48 FC | 	wrbyte	#1, fp
0be10     08 4E 85 F1 | 	sub	fp, #8
0be14     A7 EA C9 FA | 	rdbyte	result1, fp wz
0be18     04 4E 85 F1 | 	sub	fp, #4
0be1c     0C 4E 05 A1 |  if_e	add	fp, #12
0be20     A7 2A 49 AC |  if_e	wrbyte	#149, fp
0be24     0C 4E 85 A1 |  if_e	sub	fp, #12
0be28     04 4E 05 F1 | 	add	fp, #4
0be2c     A7 EA C1 FA | 	rdbyte	result1, fp
0be30     04 4E 85 F1 | 	sub	fp, #4
0be34     08 EA 0D F2 | 	cmp	result1, #8 wz
0be38     0C 4E 05 A1 |  if_e	add	fp, #12
0be3c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
0be40     0C 4E 85 A1 |  if_e	sub	fp, #12
0be44     0C 4E 05 F1 | 	add	fp, #12
0be48     A7 02 C2 FA | 	rdbyte	arg02, fp
0be4c     0D 4E 05 F1 | 	add	fp, #13
0be50     A7 02 42 FC | 	wrbyte	arg02, fp
0be54     05 4E 85 F1 | 	sub	fp, #5
0be58     A7 00 02 F6 | 	mov	arg01, fp
0be5c     14 4E 85 F1 | 	sub	fp, #20
0be60     06 02 06 F6 | 	mov	arg02, #6
0be64     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0588
0be68     04 4E 05 F1 | 	add	fp, #4
0be6c     A7 0A C2 FA | 	rdbyte	local01, fp
0be70     04 4E 85 F1 | 	sub	fp, #4
0be74     0C 0A 0E F2 | 	cmp	local01, #12 wz
0be78     10 4E 05 A1 |  if_e	add	fp, #16
0be7c     A7 00 02 A6 |  if_e	mov	arg01, fp
0be80     10 4E 85 A1 |  if_e	sub	fp, #16
0be84     01 02 06 A6 |  if_e	mov	arg02, #1
0be88     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0595
0be8c     0C 4E 05 F1 | 	add	fp, #12
0be90     A7 14 48 FC | 	wrbyte	#10, fp
0be94     0C 4E 85 F1 | 	sub	fp, #12
0be98                 | ' 	n = 10;
0be98                 | ' 	do
0be98                 | LR__1542
0be98     10 4E 05 F1 | 	add	fp, #16
0be9c     A7 00 02 F6 | 	mov	arg01, fp
0bea0     10 4E 85 F1 | 	sub	fp, #16
0bea4     01 02 06 F6 | 	mov	arg02, #1
0bea8     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0595
0beac     10 4E 05 F1 | 	add	fp, #16
0beb0     A7 0A C2 FA | 	rdbyte	local01, fp
0beb4     10 4E 85 F1 | 	sub	fp, #16
0beb8     80 0A CE F7 | 	test	local01, #128 wz
0bebc     1C 00 90 AD |  if_e	jmp	#LR__1543
0bec0     0C 4E 05 F1 | 	add	fp, #12
0bec4     A7 0A C2 FA | 	rdbyte	local01, fp
0bec8     01 0A 86 F1 | 	sub	local01, #1
0becc     A7 0A 42 FC | 	wrbyte	local01, fp
0bed0     A7 0A CA FA | 	rdbyte	local01, fp wz
0bed4     0C 4E 85 F1 | 	sub	fp, #12
0bed8     BC FF 9F 5D |  if_ne	jmp	#LR__1542
0bedc                 | LR__1543
0bedc                 | ' 
0bedc                 | ' 	return d;
0bedc     10 4E 05 F1 | 	add	fp, #16
0bee0     A7 EA C1 FA | 	rdbyte	result1, fp
0bee4     10 4E 85 F1 | 	sub	fp, #16
0bee8                 | LR__1544
0bee8     A7 F0 03 F6 | 	mov	ptra, fp
0beec     B2 00 A0 FD | 	call	#popregs_
0bef0                 | _fatfs_cc_send_cmd_0619_ret
0bef0     2D 00 64 FD | 	ret
0bef4                 | 
0bef4                 | _fatfs_cc_disk_deinitialize
0bef4     03 4A 05 F6 | 	mov	COUNT_, #3
0bef8     A8 00 A0 FD | 	call	#pushregs_
0befc     00 00 4E F2 | 	cmps	arg01, #0 wz
0bf00     01 00 00 FF 
0bf04     14 E2 05 F1 | 	add	objptr, ##532
0bf08     F1 00 02 FB | 	rdlong	arg01, objptr
0bf0c     04 E2 85 F1 | 	sub	objptr, #4
0bf10     F1 0A 02 FB | 	rdlong	local01, objptr
0bf14     08 E2 05 F1 | 	add	objptr, #8
0bf18     F1 0C 02 FB | 	rdlong	local02, objptr
0bf1c     04 E2 05 F1 | 	add	objptr, #4
0bf20     F1 0E 02 FB | 	rdlong	local03, objptr
0bf24     01 00 00 FF 
0bf28     1C E2 85 F1 | 	sub	objptr, ##540
0bf2c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
0bf2c                 | '         return RES_NOTRDY;
0bf2c     03 EA 05 56 |  if_ne	mov	result1, #3
0bf30     2C 00 90 5D |  if_ne	jmp	#LR__1550
0bf34     50 00 62 FD | 	fltl	arg01
0bf38     00 01 08 FC | 	wrpin	#0, arg01
0bf3c     50 0A 62 FD | 	fltl	local01
0bf40     05 01 08 FC | 	wrpin	#0, local01
0bf44     50 0C 62 FD | 	fltl	local02
0bf48     06 01 08 FC | 	wrpin	#0, local02
0bf4c     50 0E 62 FD | 	fltl	local03
0bf50     07 01 08 FC | 	wrpin	#0, local03
0bf54     0A 00 06 F6 | 	mov	arg01, #10
0bf58     50 4F BF FD | 	call	#__system___waitms
0bf5c                 | '     }
0bf5c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
0bf5c                 | '     _pinclear(PIN_SS);
0bf5c                 | '     _pinclear(PIN_CLK);
0bf5c                 | '     _pinclear(PIN_DI);
0bf5c                 | '     _pinclear(PIN_DO);
0bf5c                 | ' 
0bf5c                 | '     _waitms(10);
0bf5c                 | ' 
0bf5c                 | '     return 0;
0bf5c     00 EA 05 F6 | 	mov	result1, #0
0bf60                 | LR__1550
0bf60     A7 F0 03 F6 | 	mov	ptra, fp
0bf64     B2 00 A0 FD | 	call	#popregs_
0bf68                 | _fatfs_cc_disk_deinitialize_ret
0bf68     2D 00 64 FD | 	ret
0bf6c                 | 
0bf6c                 | _fatfs_cc_gettimeofday
0bf6c     04 4A 05 F6 | 	mov	COUNT_, #4
0bf70     A8 00 A0 FD | 	call	#pushregs_
0bf74     00 0B 02 F6 | 	mov	local01, arg01
0bf78     1C 4D BF FD | 	call	#__system___getus
0bf7c     F5 00 02 F6 | 	mov	arg01, result1
0bf80     02 00 00 FF 
0bf84     58 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
0bf88     F3 0C 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
0bf8c     00 EB 01 F6 | 	mov	result1, arg01
0bf90     06 EB 81 F1 | 	sub	result1, local02
0bf94     A1 07 00 FF 
0bf98     40 EA 15 FD | 	qdiv	result1, ##1000000
0bf9c     02 00 00 FF 
0bfa0     58 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
0bfa4     18 0C 62 FD | 	getqx	local02
0bfa8     A1 07 00 FF 
0bfac     40 EA 15 FD | 	qdiv	result1, ##1000000
0bfb0     00 0C 0E F2 | 	cmp	local02, #0 wz
0bfb4     19 0E 62 FD | 	getqy	local03
0bfb8     28 00 90 AD |  if_e	jmp	#LR__1560
0bfbc     02 00 00 FF 
0bfc0     54 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
0bfc4     F3 10 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
0bfc8     06 11 02 F1 | 	add	local04, local02
0bfcc     F3 10 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
0bfd0     07 01 82 F1 | 	sub	arg01, local03
0bfd4     04 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
0bfd8     F3 00 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
0bfdc     02 00 00 FF 
0bfe0     58 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
0bfe4                 | LR__1560
0bfe4     02 00 00 FF 
0bfe8     54 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
0bfec     F3 10 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
0bff0     02 00 00 FF 
0bff4     54 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
0bff8     05 11 62 FC | 	wrlong	local04, local01
0bffc     04 0A 06 F1 | 	add	local01, #4
0c000     05 0F 62 FC | 	wrlong	local03, local01
0c004                 | '         lastsec += secs;
0c004                 | '         lastus = now - leftover;
0c004                 | '     }
0c004                 | '     tv->tv_sec = lastsec;
0c004                 | '     tv->tv_usec = leftover;
0c004                 | '     return 0;
0c004     00 EA 05 F6 | 	mov	result1, #0
0c008     A7 F0 03 F6 | 	mov	ptra, fp
0c00c     B2 00 A0 FD | 	call	#popregs_
0c010                 | _fatfs_cc_gettimeofday_ret
0c010     2D 00 64 FD | 	ret
0c014                 | 
0c014                 | _fatfs_cc__is_leap_year
0c014     00 EB 51 F6 | 	abs	result1, arg01 wc
0c018     03 EA 05 F5 | 	and	result1, #3
0c01c     F5 EA 89 F6 | 	negc	result1, result1 wz
0c020     38 00 90 5D |  if_ne	jmp	#LR__1571
0c024     00 EB 51 F6 | 	abs	result1, arg01 wc
0c028     64 EA 15 FD | 	qdiv	result1, #100
0c02c     19 EA 61 FD | 	getqy	result1
0c030     F5 EA 89 F6 | 	negc	result1, result1 wz
0c034     1C 00 90 5D |  if_ne	jmp	#LR__1570
0c038     00 EB 51 F6 | 	abs	result1, arg01 wc
0c03c     90 EB 15 FD | 	qdiv	result1, #400
0c040                 | '       return (0 == y % 400);
0c040     00 EA 05 F6 | 	mov	result1, #0
0c044     19 EE 61 FD | 	getqy	_var01
0c048     F7 EE 89 F6 | 	negc	_var01, _var01 wz
0c04c     01 EA 05 A6 |  if_e	mov	result1, #1
0c050     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
0c054                 | LR__1570
0c054                 | '     return 1;
0c054     01 EA 05 F6 | 	mov	result1, #1
0c058     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
0c05c                 | LR__1571
0c05c                 | '   }
0c05c                 | '   return 0;
0c05c     00 EA 05 F6 | 	mov	result1, #0
0c060                 | _fatfs_cc__is_leap_year_ret
0c060     2D 00 64 FD | 	ret
0c064                 | 
0c064                 | _fatfs_cc___tzoffset
0c064     00 EF 09 F6 | 	mov	_var01, arg01 wz
0c068     FF FF FF FF 
0c06c     01 FF 6B FC | 	wrlong	##-1, arg02
0c070     01 F0 05 F6 | 	mov	_var02, #1
0c074     F7 F2 C9 5A |  if_ne	rdbyte	_var03, _var01 wz
0c078                 | '                 return 0;
0c078     00 EA 05 A6 |  if_e	mov	result1, #0
0c07c     94 02 90 AD |  if_e	jmp	#LR__1597
0c080     01 01 68 FC | 	wrlong	#0, arg02
0c084     02 00 00 FF 
0c088     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c08c     F3 F4 01 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
0c090                 | ' 
0c090                 | '        *hasdst = 0;
0c090                 | ' 
0c090                 | ' 	n = stdname;
0c090                 | '         while (*s && isalpha(*s)) {
0c090     02 00 00 FF 
0c094     2C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
0c098     97 28 48 FB | 	callpa	#(@LR__1581-@LR__1580)>>2,fcache_load_ptr_
0c09c                 | LR__1580
0c09c     F7 F2 C9 FA | 	rdbyte	_var03, _var01 wz
0c0a0     48 00 90 AD |  if_e	jmp	#LR__1582
0c0a4     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c0a8                 | ' {
0c0a8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
0c0a8     80 00 36 F3 | 	fle	arg01, #128 wc
0c0ac                 | '     return __ctype[c];
0c0ac     02 00 00 FF 
0c0b0     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c0b4     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c0b8     00 EB C1 FA | 	rdbyte	result1, arg01
0c0bc     02 00 00 FF 
0c0c0     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c0c4     0C EA CD F7 | 	test	result1, #12 wz
0c0c8     20 00 90 AD |  if_e	jmp	#LR__1582
0c0cc     F7 F6 01 F6 | 	mov	_var05, _var01
0c0d0     F7 F8 01 F6 | 	mov	_var06, _var01
0c0d4     01 F8 05 F1 | 	add	_var06, #1
0c0d8     FB FA C1 FA | 	rdbyte	_var07, _var05
0c0dc     FC EE 01 F6 | 	mov	_var01, _var06
0c0e0     FA FA 41 FC | 	wrbyte	_var07, _var04
0c0e4     01 F4 05 F1 | 	add	_var04, #1
0c0e8     B0 FF 9F FD | 	jmp	#LR__1580
0c0ec                 | LR__1581
0c0ec                 | LR__1582
0c0ec     FA 00 48 FC | 	wrbyte	#0, _var04
0c0f0     00 FC 05 F6 | 	mov	_var08, #0
0c0f4     F7 F2 C1 FA | 	rdbyte	_var03, _var01
0c0f8     2D F2 0D F2 | 	cmp	_var03, #45 wz
0c0fc     01 F0 65 A6 |  if_e	neg	_var02, #1
0c100     01 EE 05 A1 |  if_e	add	_var01, #1
0c104     97 28 48 FB | 	callpa	#(@LR__1584-@LR__1583)>>2,fcache_load_ptr_
0c108                 | '                 sgn = -1;
0c108                 | '                 s++;
0c108                 | '         }
0c108                 | '         while (isdigit(*s)) {
0c108                 | LR__1583
0c108     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c10c                 | ' {
0c10c                 | '   return  (__ctype_get(c) & 0x02 ) ;
0c10c     80 00 36 F3 | 	fle	arg01, #128 wc
0c110                 | '     return __ctype[c];
0c110     02 00 00 FF 
0c114     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c118     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c11c     00 EB C1 FA | 	rdbyte	result1, arg01
0c120     02 00 00 FF 
0c124     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c128     02 EA CD F7 | 	test	result1, #2 wz
0c12c     28 00 90 AD |  if_e	jmp	#LR__1585
0c130     FE F2 01 F6 | 	mov	_var03, _var08
0c134     02 F2 65 F0 | 	shl	_var03, #2
0c138     FE F2 01 F1 | 	add	_var03, _var08
0c13c     01 F2 65 F0 | 	shl	_var03, #1
0c140     F7 F6 C1 FA | 	rdbyte	_var05, _var01
0c144     30 F6 85 F1 | 	sub	_var05, #48
0c148     FB F2 01 F1 | 	add	_var03, _var05
0c14c     F9 FC 01 F6 | 	mov	_var08, _var03
0c150     01 EE 05 F1 | 	add	_var01, #1
0c154     B0 FF 9F FD | 	jmp	#LR__1583
0c158                 | LR__1584
0c158                 | LR__1585
0c158     07 00 00 FF 
0c15c     10 FC 05 FD | 	qmul	_var08, ##3600
0c160     F7 F2 C1 FA | 	rdbyte	_var03, _var01
0c164     3A F2 0D F2 | 	cmp	_var03, #58 wz
0c168     18 FE 61 FD | 	getqx	_var09
0c16c     70 00 90 5D |  if_ne	jmp	#LR__1589
0c170     00 FC 05 F6 | 	mov	_var08, #0
0c174     01 EE 05 F1 | 	add	_var01, #1
0c178     97 28 48 FB | 	callpa	#(@LR__1587-@LR__1586)>>2,fcache_load_ptr_
0c17c                 | '                 x = 0;
0c17c                 | '                 s++;
0c17c                 | '                 while (isdigit(*s)) {
0c17c                 | LR__1586
0c17c     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c180                 | ' {
0c180                 | '   return  (__ctype_get(c) & 0x02 ) ;
0c180     80 00 36 F3 | 	fle	arg01, #128 wc
0c184                 | '     return __ctype[c];
0c184     02 00 00 FF 
0c188     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c18c     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c190     00 EB C1 FA | 	rdbyte	result1, arg01
0c194     02 00 00 FF 
0c198     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c19c     02 EA CD F7 | 	test	result1, #2 wz
0c1a0     28 00 90 AD |  if_e	jmp	#LR__1588
0c1a4     FE F2 01 F6 | 	mov	_var03, _var08
0c1a8     02 F2 65 F0 | 	shl	_var03, #2
0c1ac     FE F2 01 F1 | 	add	_var03, _var08
0c1b0     01 F2 65 F0 | 	shl	_var03, #1
0c1b4     F7 F6 C1 FA | 	rdbyte	_var05, _var01
0c1b8     30 F6 85 F1 | 	sub	_var05, #48
0c1bc     FB F2 01 F1 | 	add	_var03, _var05
0c1c0     F9 FC 01 F6 | 	mov	_var08, _var03
0c1c4     01 EE 05 F1 | 	add	_var01, #1
0c1c8     B0 FF 9F FD | 	jmp	#LR__1586
0c1cc                 | LR__1587
0c1cc                 | LR__1588
0c1cc     FE FA 01 F6 | 	mov	_var07, _var08
0c1d0     04 FA 65 F0 | 	shl	_var07, #4
0c1d4     FE FA 81 F1 | 	sub	_var07, _var08
0c1d8     02 FA 65 F0 | 	shl	_var07, #2
0c1dc     FD FE 01 F1 | 	add	_var09, _var07
0c1e0                 | LR__1589
0c1e0     02 00 00 FF 
0c1e4     35 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
0c1e8     F3 F4 01 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
0c1ec     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c1f0                 | ' {
0c1f0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
0c1f0     80 00 36 F3 | 	fle	arg01, #128 wc
0c1f4                 | '     return __ctype[c];
0c1f4     27 E6 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
0c1f8     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c1fc     00 EB C1 FA | 	rdbyte	result1, arg01
0c200     02 00 00 FF 
0c204     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c208     0C EA CD F7 | 	test	result1, #12 wz
0c20c     50 00 90 AD |  if_e	jmp	#LR__1592
0c210     01 03 68 FC | 	wrlong	#1, arg02
0c214                 | '                 *hasdst = 1;
0c214                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
0c214                 | LR__1590
0c214     F7 F2 C9 FA | 	rdbyte	_var03, _var01 wz
0c218     44 00 90 AD |  if_e	jmp	#LR__1591
0c21c     F7 00 C2 FA | 	rdbyte	arg01, _var01
0c220                 | ' {
0c220                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
0c220     80 00 36 F3 | 	fle	arg01, #128 wc
0c224                 | '     return __ctype[c];
0c224     02 00 00 FF 
0c228     5C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
0c22c     F3 00 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
0c230     00 EB C1 FA | 	rdbyte	result1, arg01
0c234     02 00 00 FF 
0c238     5C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
0c23c     0C EA CD F7 | 	test	result1, #12 wz
0c240     1C 00 90 AD |  if_e	jmp	#LR__1591
0c244     F7 F8 01 F6 | 	mov	_var06, _var01
0c248     01 F8 05 F1 | 	add	_var06, #1
0c24c     F7 FA C1 FA | 	rdbyte	_var07, _var01
0c250     FC EE 01 F6 | 	mov	_var01, _var06
0c254     FA FA 41 FC | 	wrbyte	_var07, _var04
0c258     01 F4 05 F1 | 	add	_var04, #1
0c25c     B4 FF 9F FD | 	jmp	#LR__1590
0c260                 | LR__1591
0c260                 | LR__1592
0c260     FA 00 48 FC | 	wrbyte	#0, _var04
0c264     02 00 00 FF 
0c268     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c26c     F3 F2 C9 FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
0c270     02 00 00 FF 
0c274     2C E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
0c278     20 00 90 AD |  if_e	jmp	#LR__1593
0c27c     02 00 00 FF 
0c280     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c284     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c288     08 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
0c28c     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c290     02 00 00 FF 
0c294     24 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
0c298     1C 00 90 FD | 	jmp	#LR__1594
0c29c                 | LR__1593
0c29c     02 00 00 FF 
0c2a0     3E E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
0c2a4     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c2a8     1A E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
0c2ac     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c2b0     02 00 00 FF 
0c2b4     24 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
0c2b8                 | LR__1594
0c2b8     02 00 00 FF 
0c2bc     35 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
0c2c0     F3 F2 C9 FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
0c2c4     02 00 00 FF 
0c2c8     35 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
0c2cc     20 00 90 AD |  if_e	jmp	#LR__1595
0c2d0     02 00 00 FF 
0c2d4     35 E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
0c2d8     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c2dc     0D E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
0c2e0     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c2e4     02 00 00 FF 
0c2e8     28 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
0c2ec     1C 00 90 FD | 	jmp	#LR__1596
0c2f0                 | LR__1595
0c2f0     02 00 00 FF 
0c2f4     2C E7 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
0c2f8     F3 F2 01 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
0c2fc     04 E6 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
0c300     F3 F2 61 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
0c304     02 00 00 FF 
0c308     28 E7 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
0c30c                 | LR__1596
0c30c     FF F0 01 FD | 	qmul	_var02, _var09
0c310                 | ' 		_tzname[1] = stdname;
0c310                 | ' 
0c310                 | '         return sgn * off;
0c310     18 EA 61 FD | 	getqx	result1
0c314                 | LR__1597
0c314                 | _fatfs_cc___tzoffset_ret
0c314     2D 00 64 FD | 	ret
0c318                 | 
0c318                 | _fatfs_cc___indst
0c318     10 00 06 F1 | 	add	arg01, #16
0c31c     00 EF 01 FB | 	rdlong	_var01, arg01
0c320     10 00 86 F1 | 	sub	arg01, #16
0c324     02 EE 0D F2 | 	cmp	_var01, #2 wz
0c328     30 00 90 5D |  if_ne	jmp	#LR__1600
0c32c     07 EE 05 F6 | 	mov	_var01, #7
0c330     18 00 06 F1 | 	add	arg01, #24
0c334     00 F1 01 FB | 	rdlong	_var02, arg01
0c338     F8 EE 01 F1 | 	add	_var01, _var02
0c33c     0C 00 86 F1 | 	sub	arg01, #12
0c340     00 F3 01 FB | 	rdlong	_var03, arg01
0c344     F9 EE 81 F1 | 	sub	_var01, _var03
0c348     00 EE 55 F2 | 	cmps	_var01, #0 wc
0c34c                 | '                         return 1;
0c34c     01 EA 05 C6 |  if_b	mov	result1, #1
0c350     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
0c354                 | '                 return 0;
0c354     00 EA 05 F6 | 	mov	result1, #0
0c358     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
0c35c                 | LR__1600
0c35c     10 00 06 F1 | 	add	arg01, #16
0c360     00 EF 01 FB | 	rdlong	_var01, arg01
0c364     10 00 86 F1 | 	sub	arg01, #16
0c368     0A EE 0D F2 | 	cmp	_var01, #10 wz
0c36c     28 00 90 5D |  if_ne	jmp	#LR__1601
0c370     18 00 06 F1 | 	add	arg01, #24
0c374     00 EF 01 FB | 	rdlong	_var01, arg01
0c378     0C 00 86 F1 | 	sub	arg01, #12
0c37c     00 F5 01 FB | 	rdlong	_var04, arg01
0c380     FA EE 81 F1 | 	sub	_var01, _var04
0c384     00 EE 55 F2 | 	cmps	_var01, #0 wc
0c388                 | '                         return 0;
0c388     00 EA 05 C6 |  if_b	mov	result1, #0
0c38c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
0c390                 | '                 return 1;
0c390     01 EA 05 F6 | 	mov	result1, #1
0c394     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
0c398                 | LR__1601
0c398                 | '         }
0c398                 | ' 
0c398                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
0c398     00 EE 05 F6 | 	mov	_var01, #0
0c39c     10 00 06 F1 | 	add	arg01, #16
0c3a0     00 F1 01 FB | 	rdlong	_var02, arg01
0c3a4     10 00 86 F1 | 	sub	arg01, #16
0c3a8     03 F0 55 F2 | 	cmps	_var02, #3 wc
0c3ac     10 00 90 CD |  if_b	jmp	#LR__1602
0c3b0     10 00 06 F1 | 	add	arg01, #16
0c3b4     00 F3 01 FB | 	rdlong	_var03, arg01
0c3b8     0A F2 55 F2 | 	cmps	_var03, #10 wc
0c3bc     01 EE 05 C6 |  if_b	mov	_var01, #1
0c3c0                 | LR__1602
0c3c0     F7 EA 01 F6 | 	mov	result1, _var01
0c3c4                 | _fatfs_cc___indst_ret
0c3c4     2D 00 64 FD | 	ret
0c3c8                 | 
0c3c8                 | __struct__s_vfs_file_t_putchar
0c3c8     04 4A 05 F6 | 	mov	COUNT_, #4
0c3cc     A8 00 A0 FD | 	call	#pushregs_
0c3d0     1C E2 05 F1 | 	add	objptr, #28
0c3d4     F1 0A 0A FB | 	rdlong	local01, objptr wz
0c3d8     1C E2 85 F1 | 	sub	objptr, #28
0c3dc     00 EA 05 A6 |  if_e	mov	result1, #0
0c3e0     48 00 90 AD |  if_e	jmp	#LR__1610
0c3e4     1C E2 05 F1 | 	add	objptr, #28
0c3e8     F1 0C 02 FB | 	rdlong	local02, objptr
0c3ec     06 0F 02 F6 | 	mov	local03, local02
0c3f0     1C E2 85 F1 | 	sub	objptr, #28
0c3f4     13 0E 46 F7 | 	zerox	local03, #19
0c3f8     14 0C 46 F0 | 	shr	local02, #20
0c3fc     02 0C 66 F0 | 	shl	local02, #2
0c400     ED 0C 02 F1 | 	add	local02, __methods__
0c404     06 0D 02 FB | 	rdlong	local02, local02
0c408     F1 02 02 F6 | 	mov	arg02, objptr
0c40c     F1 10 02 F6 | 	mov	local04, objptr
0c410     07 E3 01 F6 | 	mov	objptr, local03
0c414     2D 0C 62 FD | 	call	local02
0c418     08 E3 01 F6 | 	mov	objptr, local04
0c41c                 | '     return (i < 0) ? 0 : 1;
0c41c     00 EA 55 F2 | 	cmps	result1, #0 wc
0c420     00 0A 06 C6 |  if_b	mov	local01, #0
0c424     01 0A 06 36 |  if_ae	mov	local01, #1
0c428     05 EB 01 F6 | 	mov	result1, local01
0c42c                 | LR__1610
0c42c     A7 F0 03 F6 | 	mov	ptra, fp
0c430     B2 00 A0 FD | 	call	#popregs_
0c434                 | __struct__s_vfs_file_t_putchar_ret
0c434     2D 00 64 FD | 	ret
0c438                 | 
0c438                 | __struct__s_vfs_file_t_getchar
0c438     03 4A 05 F6 | 	mov	COUNT_, #3
0c43c     A8 00 A0 FD | 	call	#pushregs_
0c440     20 E2 05 F1 | 	add	objptr, #32
0c444     F1 00 0A FB | 	rdlong	arg01, objptr wz
0c448     20 E2 85 F1 | 	sub	objptr, #32
0c44c     01 EA 65 A6 |  if_e	neg	result1, #1
0c450     38 00 90 AD |  if_e	jmp	#LR__1620
0c454                 | '     return getcf(__this);
0c454     20 E2 05 F1 | 	add	objptr, #32
0c458     F1 0A 02 FB | 	rdlong	local01, objptr
0c45c     05 0D 02 F6 | 	mov	local02, local01
0c460     20 E2 85 F1 | 	sub	objptr, #32
0c464     13 0C 46 F7 | 	zerox	local02, #19
0c468     14 0A 46 F0 | 	shr	local01, #20
0c46c     02 0A 66 F0 | 	shl	local01, #2
0c470     ED 0A 02 F1 | 	add	local01, __methods__
0c474     05 0B 02 FB | 	rdlong	local01, local01
0c478     F1 00 02 F6 | 	mov	arg01, objptr
0c47c     F1 0E 02 F6 | 	mov	local03, objptr
0c480     06 E3 01 F6 | 	mov	objptr, local02
0c484     2D 0A 62 FD | 	call	local01
0c488     07 E3 01 F6 | 	mov	objptr, local03
0c48c                 | LR__1620
0c48c     A7 F0 03 F6 | 	mov	ptra, fp
0c490     B2 00 A0 FD | 	call	#popregs_
0c494                 | __struct__s_vfs_file_t_getchar_ret
0c494     2D 00 64 FD | 	ret
0c498                 | 
0c498                 | __struct___bas_wrap_sender_tx
0c498     03 4A 05 F6 | 	mov	COUNT_, #3
0c49c     A8 00 A0 FD | 	call	#pushregs_
0c4a0     F1 0A 02 FB | 	rdlong	local01, objptr
0c4a4     05 0D 02 F6 | 	mov	local02, local01
0c4a8     13 0A 46 F7 | 	zerox	local01, #19
0c4ac     14 0C 46 F0 | 	shr	local02, #20
0c4b0     02 0C 66 F0 | 	shl	local02, #2
0c4b4     ED 0C 02 F1 | 	add	local02, __methods__
0c4b8     06 0D 02 FB | 	rdlong	local02, local02
0c4bc     F1 0E 02 F6 | 	mov	local03, objptr
0c4c0     05 E3 01 F6 | 	mov	objptr, local01
0c4c4     2D 0C 62 FD | 	call	local02
0c4c8     07 E3 01 F6 | 	mov	objptr, local03
0c4cc     01 EA 05 F6 | 	mov	result1, #1
0c4d0     A7 F0 03 F6 | 	mov	ptra, fp
0c4d4     B2 00 A0 FD | 	call	#popregs_
0c4d8                 | __struct___bas_wrap_sender_tx_ret
0c4d8     2D 00 64 FD | 	ret
0c4dc                 | 
0c4dc                 | __struct___bas_wrap_sender_rx
0c4dc     03 4A 05 F6 | 	mov	COUNT_, #3
0c4e0     A8 00 A0 FD | 	call	#pushregs_
0c4e4     04 E2 05 F1 | 	add	objptr, #4
0c4e8     F1 0A 02 FB | 	rdlong	local01, objptr
0c4ec     05 0D 02 F6 | 	mov	local02, local01
0c4f0     04 E2 85 F1 | 	sub	objptr, #4
0c4f4     13 0C 46 F7 | 	zerox	local02, #19
0c4f8     14 0A 46 F0 | 	shr	local01, #20
0c4fc     02 0A 66 F0 | 	shl	local01, #2
0c500     ED 0A 02 F1 | 	add	local01, __methods__
0c504     05 0B 02 FB | 	rdlong	local01, local01
0c508     F1 0E 02 F6 | 	mov	local03, objptr
0c50c     06 E3 01 F6 | 	mov	objptr, local02
0c510     2D 0A 62 FD | 	call	local01
0c514     07 E3 01 F6 | 	mov	objptr, local03
0c518     A7 F0 03 F6 | 	mov	ptra, fp
0c51c     B2 00 A0 FD | 	call	#popregs_
0c520                 | __struct___bas_wrap_sender_rx_ret
0c520     2D 00 64 FD | 	ret
0c524                 | 
0c524                 | __struct___bas_wrap_sender_close
0c524     03 4A 05 F6 | 	mov	COUNT_, #3
0c528     A8 00 A0 FD | 	call	#pushregs_
0c52c     08 E2 05 F1 | 	add	objptr, #8
0c530     F1 0A 02 FB | 	rdlong	local01, objptr
0c534     05 0D 02 F6 | 	mov	local02, local01
0c538     08 E2 85 F1 | 	sub	objptr, #8
0c53c     13 0C 46 F7 | 	zerox	local02, #19
0c540     14 0A 46 F0 | 	shr	local01, #20
0c544     02 0A 66 F0 | 	shl	local01, #2
0c548     ED 0A 02 F1 | 	add	local01, __methods__
0c54c     05 0B 02 FB | 	rdlong	local01, local01
0c550     F1 0E 02 F6 | 	mov	local03, objptr
0c554     06 E3 01 F6 | 	mov	objptr, local02
0c558     2D 0A 62 FD | 	call	local01
0c55c     07 E3 01 F6 | 	mov	objptr, local03
0c560     A7 F0 03 F6 | 	mov	ptra, fp
0c564     B2 00 A0 FD | 	call	#popregs_
0c568                 | __struct___bas_wrap_sender_close_ret
0c568     2D 00 64 FD | 	ret
0c56c                 | 
0c56c                 | LR__1630
0c56c     2F          | 	byte	"/"
0c56d     00          | 	byte	0
0c56e                 | LR__1631
0c56e     20 21 21 21 
0c572     20 63 6F 72 
0c576     72 75 70 74 
0c57a     65 64 20 68 
0c57e     65 61 70 3F 
0c582     3F 3F 20 21 
0c586     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0c589     00          | 	byte	0
0c58a                 | LR__1632
0c58a     20 21 21 21 
0c58e     20 6F 75 74 
0c592     20 6F 66 20 
0c596     68 65 61 70 
0c59a     20 6D 65 6D 
0c59e     6F 72 79 20 
0c5a2     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
0c5a6     00          | 	byte	0
0c5a7                 | LR__1633
0c5a7     20 21 21 21 
0c5ab     20 63 6F 72 
0c5af     72 75 70 74 
0c5b3     65 64 20 68 
0c5b7     65 61 70 20 
0c5bb     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0c5bf     00          | 	byte	0
0c5c0                 | LR__1634
0c5c0     00          | 	byte	0
0c5c1     00          | 	byte	0
0c5c2                 | LR__1635
0c5c2     2A 3A 3C 3E 
0c5c6     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
0c5ca     00          | 	byte	0
0c5cb                 | LR__1636
0c5cb     2B 2C 3B 3D 
0c5cf     5B 5D       | 	byte	"+,;=[]"
0c5d1     00          | 	byte	0
0c5d2                 | LR__1637
0c5d2     46 41 54 33 
0c5d6     32 20 20 20 | 	byte	"FAT32   "
0c5da     00          | 	byte	0
0c5db                 | LR__1638
0c5db     54 5A       | 	byte	"TZ"
0c5dd     00          | 	byte	0
0c5de                 | LR__1639
0c5de     00          | 	byte	0
0c5df     00          | 	byte	0
0c5e0                 | LR__1640
0c5e0     2F 73 64    | 	byte	"/sd"
0c5e3     00          | 	byte	0
0c5e4                 | LR__1641
0c5e4     2F 73 64 2F 
0c5e8     62 61 73    | 	byte	"/sd/bas"
0c5eb     00          | 	byte	0
0c5ec                 | LR__1642
0c5ec     2F 73 64 2F 
0c5f0     62 61 73    | 	byte	"/sd/bas"
0c5f3     00          | 	byte	0
0c5f4                 | LR__1643
0c5f4     6E 6F 6E 65 
0c5f8     78 69 73 74 
0c5fc     69 6E 67 66 
0c600     69 6C 65    | 	byte	"nonexistingfile"
0c603     00          | 	byte	0
0c604                 | LR__1644
0c604     2F 6B 77 61 
0c608     73 73       | 	byte	"/kwass"
0c60a     00          | 	byte	0
0c60b                 | LR__1645
0c60b     2F 73 64 2F 
0c60f     62 61 73    | 	byte	"/sd/bas"
0c612     00          | 	byte	0
0c613                 | LR__1646
0c613     6D 6F 75 73 
0c617     65 74 68 65 
0c61b     72 65 6D 69 
0c61f     6E 2E 62 61 
0c623     73          | 	byte	"mousetheremin.bas"
0c624     00          | 	byte	0
0c625                 | LR__1647
0c625     2F 73 64    | 	byte	"/sd"
0c628     00          | 	byte	0
0c629     00 00 00    | 	alignl
0c62c                 | __system__dat_
0c62c     00 00 00 00 
0c630     00 00 00 00 | 	byte	$00[8]
0c634     03 00 00 00 
0c638     00 00 00 00 
0c63c     00 00 00 00 
0c640     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c644     00 00 00 00 
      ...             
0c8d0     00 00 00 00 
0c8d4     00 00 00 00 | 	byte	$00[660]
0c8d8     00 00 50 00 | 	long	(5 {__system____root_opendir})<<20
0c8dc     00 00 60 00 | 	long	(6 {__system____root_closedir})<<20
0c8e0     00 00 70 00 | 	long	(7 {__system____root_readdir})<<20
0c8e4     00 00 80 00 | 	long	(8 {__system____root_stat})<<20
0c8e8     00 00 00 00 
0c8ec     00 00 00 00 
0c8f0     00 00 00 00 
0c8f4     00 00 00 00 
0c8f8     00 00 00 00 
0c8fc     00 00 00 00 
0c900     00 00 00 00 | 	byte	$00[28]
0c904     6C C9 00 00 | 	long	@@@__system__dat_ + 832
0c908     6F C9 00 00 | 	long	@@@__system__dat_ + 835
0c90c     90 C9 00 00 | 	long	@@@__system__dat_ + 868
0c910     A9 C9 00 00 | 	long	@@@__system__dat_ + 893
0c914     C4 C9 00 00 | 	long	@@@__system__dat_ + 920
0c918     DE C9 00 00 | 	long	@@@__system__dat_ + 946
0c91c     EE C9 00 00 | 	long	@@@__system__dat_ + 962
0c920     00 CA 00 00 | 	long	@@@__system__dat_ + 980
0c924     12 CA 00 00 | 	long	@@@__system__dat_ + 998
0c928     24 CA 00 00 | 	long	@@@__system__dat_ + 1016
0c92c     30 CA 00 00 | 	long	@@@__system__dat_ + 1028
0c930     41 CA 00 00 | 	long	@@@__system__dat_ + 1045
0c934     55 CA 00 00 | 	long	@@@__system__dat_ + 1065
0c938     5F CA 00 00 | 	long	@@@__system__dat_ + 1075
0c93c     6F CA 00 00 | 	long	@@@__system__dat_ + 1091
0c940     7E CA 00 00 | 	long	@@@__system__dat_ + 1106
0c944     94 CA 00 00 | 	long	@@@__system__dat_ + 1128
0c948     AD CA 00 00 | 	long	@@@__system__dat_ + 1153
0c94c     C1 CA 00 00 | 	long	@@@__system__dat_ + 1173
0c950     CF CA 00 00 | 	long	@@@__system__dat_ + 1187
0c954     E3 CA 00 00 | 	long	@@@__system__dat_ + 1207
0c958     EF CA 00 00 | 	long	@@@__system__dat_ + 1219
0c95c     01 CB 00 00 | 	long	@@@__system__dat_ + 1237
0c960     19 CB 00 00 | 	long	@@@__system__dat_ + 1261
0c964     2B CB 00 00 | 	long	@@@__system__dat_ + 1279
0c968     3E CB 00 00 | 	long	@@@__system__dat_ + 1298
0c96c     4F 4B 00 4E 
0c970     75 6D 65 72 
0c974     69 63 61 6C 
0c978     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
0c97c     75 6D 65 6E 
0c980     74 20 6F 75 
0c984     74 20 6F 66 
0c988     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
0c98c     61 69 6E 00 
0c990     52 65 73 75 
0c994     6C 74 20 6E 
0c998     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
0c99c     65 70 72 65 
0c9a0     73 65 6E 74 
0c9a4     61 62 6C 65 
0c9a8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
0c9ac     65 67 61 6C 
0c9b0     20 6D 75 6C 
0c9b4     74 69 62 79 
0c9b8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
0c9bc     65 71 75 65 
0c9c0     6E 63 65 00 
0c9c4     4E 6F 20 73 
0c9c8     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
0c9cc     66 69 6C 65 
0c9d0     20 6F 72 20 
0c9d4     64 69 72 65 
0c9d8     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
0c9dc     79 00 42 61 
0c9e0     64 20 66 69 
0c9e4     6C 65 20 6E 
0c9e8     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
0c9ec     72 00 50 65 
0c9f0     72 6D 69 73 
0c9f4     73 69 6F 6E 
0c9f8     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
0c9fc     69 65 64 00 
0ca00     4E 6F 74 20 
0ca04     65 6E 6F 75 
0ca08     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
0ca0c     65 6D 6F 72 
0ca10     79 00 54 65 
0ca14     6D 70 6F 72 
0ca18     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
0ca1c     66 61 69 6C 
0ca20     75 72 65 00 
0ca24     46 69 6C 65 
0ca28     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
0ca2c     73 74 73 00 
0ca30     49 6E 76 61 
0ca34     6C 69 64 20 
0ca38     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
0ca3c     6D 65 6E 74 
0ca40     00 54 6F 6F 
0ca44     20 6D 61 6E 
0ca48     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
0ca4c     65 6E 20 66 
0ca50     69 6C 65 73 
0ca54     00 49 2F 4F 
0ca58     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
0ca5c     6F 72 00 4E 
0ca60     6F 74 20 61 
0ca64     20 64 69 72 
0ca68     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
0ca6c     72 79 00 49 
0ca70     73 20 61 20 
0ca74     64 69 72 65 
0ca78     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
0ca7c     79 00 52 65 
0ca80     61 64 20 6F 
0ca84     6E 6C 79 20 
0ca88     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
0ca8c     20 73 79 73 
0ca90     74 65 6D 00 
0ca94     46 75 6E 63 
0ca98     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
0ca9c     20 6E 6F 74 
0caa0     20 69 6D 70 
0caa4     6C 65 6D 65 
0caa8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
0caac     00 44 69 72 
0cab0     65 63 74 6F 
0cab4     72 79 20 6E 
0cab8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
0cabc     6D 70 74 79 
0cac0     00 4E 61 6D 
0cac4     65 20 74 6F 
0cac8     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
0cacc     6E 67 00 44 
0cad0     65 76 69 63 
0cad4     65 20 6E 6F 
0cad8     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
0cadc     65 6B 61 62 
0cae0     6C 65 00 42 
0cae4     61 64 20 61 
0cae8     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
0caec     73 73 00 42 
0caf0     72 6F 6B 65 
0caf4     6E 20 63 6F 
0caf8     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
0cafc     74 69 6F 6E 
0cb00     00 44 65 76 
0cb04     69 63 65 20 
0cb08     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
0cb0c     65 73 6F 75 
0cb10     72 63 65 20 
0cb14     62 75 73 79 
0cb18     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
0cb1c     73 73 20 64 
0cb20     65 76 69 63 
0cb24     65 20 6C 69 
0cb28     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
0cb2c     6F 20 73 70 
0cb30     61 63 65 20 
0cb34     6F 6E 20 64 
0cb38     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
0cb3c     65 00 55 6E 
0cb40     6B 6E 6F 77 
0cb44     6E 20 65 72 
0cb48     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
0cb4c     00 00 00 00 
0cb50     00 00 00 00 | 	byte	$00[8]
0cb54     05 00 00 00 
0cb58     00 00 00 00 
0cb5c     00 00 00 00 
0cb60     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb64     00 00 00 00 | 	byte	$00, $00, $00, $00
0cb68     00 00 D0 01 | 	long	(29 {__system___tx})<<20
0cb6c     00 00 E0 01 | 	long	(30 {__system___rx})<<20
0cb70     00 00 00 00 | 	byte	$00, $00, $00, $00
0cb74     00 00 F0 01 | 	long	(31 {__system___rxtxioctl_0188})<<20
0cb78     00 00 00 02 | 	long	(32 {__system____dummy_flush_0189})<<20
0cb7c     00 00 00 00 
0cb80     00 00 00 00 | 	byte	$00[8]
0cb84     01 00 00 00 
0cb88     06 00 00 00 
0cb8c     00 00 00 00 
0cb90     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb94     00 00 00 00 
0cb98     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
0cb9c     00 00 D0 01 | 	long	(29 {__system___tx})<<20
0cba0     00 00 E0 01 | 	long	(30 {__system___rx})<<20
0cba4     00 00 00 00 | 	byte	$00, $00, $00, $00
0cba8     00 00 F0 01 | 	long	(31 {__system___rxtxioctl_0188})<<20
0cbac     00 00 00 02 | 	long	(32 {__system____dummy_flush_0189})<<20
0cbb0     00 00 00 00 
0cbb4     00 00 00 00 | 	byte	$00[8]
0cbb8     01 00 00 00 
0cbbc     06 00 00 00 
0cbc0     00 00 00 00 
0cbc4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cbc8     00 00 00 00 
0cbcc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
0cbd0     00 00 D0 01 | 	long	(29 {__system___tx})<<20
0cbd4     00 00 E0 01 | 	long	(30 {__system___rx})<<20
0cbd8     00 00 00 00 | 	byte	$00, $00, $00, $00
0cbdc     00 00 F0 01 | 	long	(31 {__system___rxtxioctl_0188})<<20
0cbe0     00 00 00 02 | 	long	(32 {__system____dummy_flush_0189})<<20
0cbe4     00 00 00 00 
      ...             
0cd50     00 00 00 00 
0cd54     00 00 00 00 | 	byte	$00[372]
0cd58                 | 	alignl
0cd58                 | _fatfs_cc_dat_
0cd58     C7 00 FC 00 
0cd5c     E9 00 E2 00 
0cd60     E4 00 E0 00 
0cd64     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
0cd68     EA 00 EB 00 
0cd6c     E8 00 EF 00 
0cd70     EE 00 EC 00 
0cd74     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
0cd78     C9 00 E6 00 
0cd7c     C6 00 F4 00 
0cd80     F6 00 F2 00 
0cd84     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
0cd88     FF 00 D6 00 
0cd8c     DC 00 F8 00 
0cd90     A3 00 D8 00 
0cd94     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
0cd98     E1 00 ED 00 
0cd9c     F3 00 FA 00 
0cda0     F1 00 D1 00 
0cda4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
0cda8     BF 00 AE 00 
0cdac     AC 00 BD 00 
0cdb0     BC 00 A1 00 
0cdb4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
0cdb8     91 25 92 25 
0cdbc     93 25 02 25 
0cdc0     24 25 C1 00 
0cdc4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
0cdc8     A9 00 63 25 
0cdcc     51 25 57 25 
0cdd0     5D 25 A2 00 
0cdd4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
0cdd8     14 25 34 25 
0cddc     2C 25 1C 25 
0cde0     00 25 3C 25 
0cde4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
0cde8     5A 25 54 25 
0cdec     69 25 66 25 
0cdf0     60 25 50 25 
0cdf4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
0cdf8     F0 00 D0 00 
0cdfc     CA 00 CB 00 
0ce00     C8 00 31 01 
0ce04     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
0ce08     CF 00 18 25 
0ce0c     0C 25 88 25 
0ce10     84 25 A6 00 
0ce14     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
0ce18     D3 00 DF 00 
0ce1c     D4 00 D2 00 
0ce20     F5 00 D5 00 
0ce24     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
0ce28     DE 00 DA 00 
0ce2c     DB 00 D9 00 
0ce30     FD 00 DD 00 
0ce34     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
0ce38     AD 00 B1 00 
0ce3c     17 20 BE 00 
0ce40     B6 00 A7 00 
0ce44     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
0ce48     B0 00 A8 00 
0ce4c     B7 00 B9 00 
0ce50     B3 00 B2 00 
0ce54     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
0ce58     61 00 1A 03 
0ce5c     E0 00 17 03 
0ce60     F8 00 07 03 
0ce64     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
0ce68     78 01 00 01 
0ce6c     30 01 32 01 
0ce70     06 01 39 01 
0ce74     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
0ce78     2E 01 79 01 
0ce7c     06 01 80 01 
0ce80     4D 00 43 02 
0ce84     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
0ce88     82 01 84 01 
0ce8c     84 01 86 01 
0ce90     87 01 87 01 
0ce94     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
0ce98     8B 01 8B 01 
0ce9c     8D 01 8E 01 
0cea0     8F 01 90 01 
0cea4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
0cea8     93 01 94 01 
0ceac     F6 01 96 01 
0ceb0     97 01 98 01 
0ceb4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
0ceb8     9B 01 9C 01 
0cebc     9D 01 20 02 
0cec0     9F 01 A0 01 
0cec4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
0cec8     A2 01 A4 01 
0cecc     A4 01 A6 01 
0ced0     A7 01 A7 01 
0ced4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
0ced8     AB 01 AC 01 
0cedc     AC 01 AE 01 
0cee0     AF 01 AF 01 
0cee4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
0cee8     B3 01 B3 01 
0ceec     B5 01 B5 01 
0cef0     B7 01 B8 01 
0cef4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
0cef8     BB 01 BC 01 
0cefc     BC 01 BE 01 
0cf00     F7 01 C0 01 
0cf04     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
0cf08     C3 01 C4 01 
0cf0c     C5 01 C4 01 
0cf10     C7 01 C8 01 
0cf14     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
0cf18     CB 01 CA 01 
0cf1c     CD 01 10 01 
0cf20     DD 01 01 00 
0cf24     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
0cf28     12 01 F3 01 
0cf2c     03 00 F1 01 
0cf30     F4 01 F4 01 
0cf34     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
0cf38     22 02 12 01 
0cf3c     3A 02 09 00 
0cf40     65 2C 3B 02 
0cf44     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
0cf48     66 2C 3F 02 
0cf4c     40 02 41 02 
0cf50     41 02 46 02 
0cf54     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
0cf58     40 00 81 01 
0cf5c     86 01 55 02 
0cf60     89 01 8A 01 
0cf64     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
0cf68     5A 02 90 01 
0cf6c     5C 02 5D 02 
0cf70     5E 02 5F 02 
0cf74     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
0cf78     62 02 94 01 
0cf7c     64 02 65 02 
0cf80     66 02 67 02 
0cf84     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
0cf88     6A 02 62 2C 
0cf8c     6C 02 6D 02 
0cf90     6E 02 9C 01 
0cf94     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
0cf98     9D 01 73 02 
0cf9c     74 02 9F 01 
0cfa0     76 02 77 02 
0cfa4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
0cfa8     7A 02 7B 02 
0cfac     7C 02 64 2C 
0cfb0     7E 02 7F 02 
0cfb4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
0cfb8     82 02 A9 01 
0cfbc     84 02 85 02 
0cfc0     86 02 87 02 
0cfc4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
0cfc8     B1 01 B2 01 
0cfcc     45 02 8D 02 
0cfd0     8E 02 8F 02 
0cfd4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
0cfd8     B7 01 7B 03 
0cfdc     03 00 FD 03 
0cfe0     FE 03 FF 03 
0cfe4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
0cfe8     86 03 88 03 
0cfec     89 03 8A 03 
0cff0     B1 03 11 03 
0cff4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
0cff8     A3 03 A3 03 
0cffc     C4 03 08 03 
0d000     CC 03 03 00 
0d004     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
0d008     8F 03 D8 03 
0d00c     18 01 F2 03 
0d010     0A 00 F9 03 
0d014     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
0d018     F5 03 F6 03 
0d01c     F7 03 F7 03 
0d020     F9 03 FA 03 
0d024     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
0d028     20 03 50 04 
0d02c     10 07 60 04 
0d030     22 01 8A 04 
0d034     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
0d038     0E 01 CF 04 
0d03c     01 00 C0 04 
0d040     D0 04 44 01 
0d044     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
0d048     00 00 7D 1D 
0d04c     01 00 63 2C 
0d050     00 1E 96 01 
0d054     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
0d058     00 1F 08 06 
0d05c     10 1F 06 06 
0d060     20 1F 08 06 
0d064     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
0d068     40 1F 06 06 
0d06c     51 1F 07 00 
0d070     59 1F 52 1F 
0d074     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
0d078     5D 1F 56 1F 
0d07c     5F 1F 60 1F 
0d080     08 06 70 1F 
0d084     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
0d088     BB 1F C8 1F 
0d08c     C9 1F CA 1F 
0d090     CB 1F DA 1F 
0d094     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
0d098     F9 1F EA 1F 
0d09c     EB 1F FA 1F 
0d0a0     FB 1F 80 1F 
0d0a4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
0d0a8     08 06 A0 1F 
0d0ac     08 06 B0 1F 
0d0b0     04 00 B8 1F 
0d0b4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
0d0b8     BC 1F CC 1F 
0d0bc     01 00 C3 1F 
0d0c0     D0 1F 02 06 
0d0c4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
0d0c8     E5 1F 01 00 
0d0cc     EC 1F F3 1F 
0d0d0     01 00 FC 1F 
0d0d4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
0d0d8     32 21 70 21 
0d0dc     10 02 84 21 
0d0e0     01 00 83 21 
0d0e4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
0d0e8     30 2C 2F 04 
0d0ec     60 2C 02 01 
0d0f0     67 2C 06 01 
0d0f4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
0d0f8     80 2C 64 01 
0d0fc     00 2D 26 08 
0d100     41 FF 1A 03 
0d104     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
0d108     05 07 09 0E 
0d10c     10 12 14 16 
0d110     18 1C 1E 43 
0d114     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
0d118     41 41 43 45 
0d11c     45 45 49 49 
0d120     49 41 41 45 
0d124     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
0d128     4F 55 55 59 
0d12c     4F 55 4F 9C 
0d130     4F 9E 9F 41 
0d134     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
0d138     A5 A6 A7 A8 
0d13c     A9 AA AB AC 
0d140     AD AE AF B0 
0d144     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
0d148     41 41 41 B8 
0d14c     B9 BA BB BC 
0d150     BD BE BF C0 
0d154     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
0d158     C5 41 41 C8 
0d15c     C9 CA CB CC 
0d160     CD CE CF D1 
0d164     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
0d168     49 49 49 49 
0d16c     D9 DA DB DC 
0d170     DD 49 DF 4F 
0d174     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
0d178     4F E6 E8 E8 
0d17c     55 55 55 59 
0d180     59 EE EF F0 
0d184     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
0d188     F5 F6 F7 F8 
0d18c     F9 FA FB FC 
0d190     FD FE FF 00 
0d194     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
0d198     00 00 00 00 | 	byte	$00, $00, $00, $00
0d19c     00 00 C0 00 | 	long	(12 {_fatfs_cc_v_close})<<20
0d1a0     00 00 D0 00 | 	long	(13 {_fatfs_cc_v_read})<<20
0d1a4     00 00 E0 00 | 	long	(14 {_fatfs_cc_v_write})<<20
0d1a8     00 00 F0 00 | 	long	(15 {_fatfs_cc_v_lseek})<<20
0d1ac     00 00 00 01 | 	long	(16 {_fatfs_cc_v_ioctl})<<20
0d1b0     00 00 10 02 | 	long	(33 {_fatfs_cc_v_flush})<<20
0d1b4     00 00 00 00 
0d1b8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
0d1bc     00 00 10 01 | 	long	(17 {_fatfs_cc_v_open})<<20
0d1c0     00 00 20 01 | 	long	(18 {_fatfs_cc_v_creat})<<20
0d1c4     00 00 30 01 | 	long	(19 {_fatfs_cc_v_opendir})<<20
0d1c8     00 00 40 01 | 	long	(20 {_fatfs_cc_v_closedir})<<20
0d1cc     00 00 50 01 | 	long	(21 {_fatfs_cc_v_readdir})<<20
0d1d0     00 00 60 01 | 	long	(22 {_fatfs_cc_v_stat})<<20
0d1d4     00 00 70 01 | 	long	(23 {_fatfs_cc_v_mkdir})<<20
0d1d8     00 00 80 01 | 	long	(24 {_fatfs_cc_v_rmdir})<<20
0d1dc     00 00 90 01 | 	long	(25 {_fatfs_cc_v_remove})<<20
0d1e0     00 00 A0 01 | 	long	(26 {_fatfs_cc_v_rename})<<20
0d1e4     00 00 B0 01 | 	long	(27 {_fatfs_cc_v_init})<<20
0d1e8     00 00 C0 01 | 	long	(28 {_fatfs_cc_v_deinit})<<20
0d1ec     FF FF FF FF 
0d1f0     1F 00 00 00 
0d1f4     1C 00 00 00 
0d1f8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
0d1fc     1E 00 00 00 
0d200     1F 00 00 00 
0d204     1E 00 00 00 
0d208     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
0d20c     1F 00 00 00 
0d210     1E 00 00 00 
0d214     1F 00 00 00 
0d218     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
0d21c     1F 00 00 00 
0d220     00 00 00 00 
0d224     1F 00 00 00 
0d228     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
0d22c     5A 00 00 00 
0d230     78 00 00 00 
0d234     97 00 00 00 
0d238     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
0d23c     D4 00 00 00 
0d240     F3 00 00 00 
0d244     11 01 00 00 
0d248     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
0d24c     4E 01 00 00 
0d250     6D 01 00 00 
0d254     FF FF FF FF 
0d258     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
0d25c     00 00 00 00 
      ...             
0d274     00 00 00 00 
0d278     00 00 00 00 | 	byte	$00[32]
0d27c     9A D2 00 00 | 	long	@@@_fatfs_cc_dat_ + 1346
0d280     9E D2 00 00 | 	long	@@@_fatfs_cc_dat_ + 1350
0d284     00 00 00 00 
0d288     00 00 00 00 
0d28c     00 00 00 00 
0d290     00 00 00 00 
0d294     00 00       | 	byte	$00[18]
0d296     3F 3F 3F 00 
0d29a     55 43 54 00 
0d29e     55 43 54 00 
0d2a2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
0d2a6     00 00 00 00 
0d2aa     00 00 00    | 	byte	$00[7]
0d2ad     CA 9A 3B 00 
0d2b1     00 00 00 01 
0d2b5     01 01 01 01 
0d2b9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
0d2bd     91 11 11 11 
0d2c1     11 01 01 01 
0d2c5     01 01 01 01 
0d2c9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
0d2cd     01 01 01 01 
0d2d1     01 01 01    | 	byte	$01[7]
0d2d4     90 20 20 20 
0d2d8     20 20 20 20 
0d2dc     20 20 20 20 
0d2e0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
0d2e4     42 42 42 42 
0d2e8     42 42 42 42 
0d2ec     42 42       | 	byte	$42[10]
0d2ee     20 20 20 20 
0d2f2     20 20 20    | 	byte	$20[7]
0d2f5     44 44 44 44 
0d2f9     44 44       | 	byte	$44[6]
0d2fb     04 04 04 04 
0d2ff     04 04 04 04 
0d303     04 04 04 04 
0d307     04 04 04 04 
0d30b     04 04 04 04 | 	byte	$04[20]
0d30f     20 20 20 20 
0d313     20 20       | 	byte	$20[6]
0d315     48 48 48 48 
0d319     48 48       | 	byte	$48[6]
0d31b     08 08 08 08 
0d31f     08 08 08 08 
0d323     08 08 08 08 
0d327     08 08 08 08 
0d32b     08 08 08 08 | 	byte	$08[20]
0d32f     20 20 20 20 
0d333     01 00 00 00 
0d337     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
0d338                 | __methodtable__
0d338     98 C4 00 00 | 	long	@__struct___bas_wrap_sender_tx
0d33c     DC C4 00 00 | 	long	@__struct___bas_wrap_sender_rx
0d340     24 C5 00 00 | 	long	@__struct___bas_wrap_sender_close
0d344     C8 C3 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0d348     38 C4 00 00 | 	long	@__struct__s_vfs_file_t_getchar
0d34c     44 2F 00 00 | 	long	@__system____root_opendir
0d350     E0 2F 00 00 | 	long	@__system____root_closedir
0d354     5C 2F 00 00 | 	long	@__system____root_readdir
0d358     E8 2F 00 00 | 	long	@__system____root_stat
0d35c     9C 29 00 00 | 	long	@__system____default_putc
0d360     20 29 00 00 | 	long	@__system____default_getc
0d364     44 2A 00 00 | 	long	@__system____default_flush
0d368     E4 AE 00 00 | 	long	@_fatfs_cc_v_close
0d36c     00 B3 00 00 | 	long	@_fatfs_cc_v_read
0d370     14 B4 00 00 | 	long	@_fatfs_cc_v_write
0d374     F4 B4 00 00 | 	long	@_fatfs_cc_v_lseek
0d378     7C B5 00 00 | 	long	@_fatfs_cc_v_ioctl
0d37c     D0 B5 00 00 | 	long	@_fatfs_cc_v_open
0d380     48 AE 00 00 | 	long	@_fatfs_cc_v_creat
0d384     28 AF 00 00 | 	long	@_fatfs_cc_v_opendir
0d388     9C AF 00 00 | 	long	@_fatfs_cc_v_closedir
0d38c     DC AF 00 00 | 	long	@_fatfs_cc_v_readdir
0d390     10 B1 00 00 | 	long	@_fatfs_cc_v_stat
0d394     90 B5 00 00 | 	long	@_fatfs_cc_v_mkdir
0d398     B0 B5 00 00 | 	long	@_fatfs_cc_v_rmdir
0d39c     A0 B5 00 00 | 	long	@_fatfs_cc_v_remove
0d3a0     C0 B5 00 00 | 	long	@_fatfs_cc_v_rename
0d3a4     E0 B6 00 00 | 	long	@_fatfs_cc_v_init
0d3a8     E8 B6 00 00 | 	long	@_fatfs_cc_v_deinit
0d3ac     F0 0D 00 00 | 	long	@__system___tx
0d3b0     30 0E 00 00 | 	long	@__system___rx
0d3b4     9C 33 00 00 | 	long	@__system___rxtxioctl_0188
0d3b8     F4 33 00 00 | 	long	@__system____dummy_flush_0189
0d3bc     B0 B6 00 00 | 	long	@_fatfs_cc_v_flush
0d3c0                 | __heap_base
0d3c0     00 00 00 00 
      ...             
0eb30     00 00 00 00 
0eb34     00 00 00 00 | 	long	0[1502]
0eb38                 | objmem
0eb38     00 00 00 00 
0eb3c     00 00 00 00 | 	long	0[2]
0eb40                 | stackspace
0eb40     00 00 00 00 | 	long	0[1]
0eb44 0f7             | 	org	COG_BSS_START
0eb44 0f7             | _var01
0eb44 0f7             | 	res	1
0eb44 0f8             | _var02
0eb44 0f8             | 	res	1
0eb44 0f9             | _var03
0eb44 0f9             | 	res	1
0eb44 0fa             | _var04
0eb44 0fa             | 	res	1
0eb44 0fb             | _var05
0eb44 0fb             | 	res	1
0eb44 0fc             | _var06
0eb44 0fc             | 	res	1
0eb44 0fd             | _var07
0eb44 0fd             | 	res	1
0eb44 0fe             | _var08
0eb44 0fe             | 	res	1
0eb44 0ff             | _var09
0eb44 0ff             | 	res	1
0eb44 100             | arg01
0eb44 100             | 	res	1
0eb44 101             | arg02
0eb44 101             | 	res	1
0eb44 102             | arg03
0eb44 102             | 	res	1
0eb44 103             | arg04
0eb44 103             | 	res	1
0eb44 104             | arg05
0eb44 104             | 	res	1
0eb44 105             | local01
0eb44 105             | 	res	1
0eb44 106             | local02
0eb44 106             | 	res	1
0eb44 107             | local03
0eb44 107             | 	res	1
0eb44 108             | local04
0eb44 108             | 	res	1
0eb44 109             | local05
0eb44 109             | 	res	1
0eb44 10a             | local06
0eb44 10a             | 	res	1
0eb44 10b             | local07
0eb44 10b             | 	res	1
0eb44 10c             | local08
0eb44 10c             | 	res	1
0eb44 10d             | local09
0eb44 10d             | 	res	1
0eb44 10e             | local10
0eb44 10e             | 	res	1
0eb44 10f             | local11
0eb44 10f             | 	res	1
0eb44 110             | local12
0eb44 110             | 	res	1
0eb44 111             | local13
0eb44 111             | 	res	1
0eb44 112             | local14
0eb44 112             | 	res	1
0eb44 113             | local15
0eb44 113             | 	res	1
0eb44 114             | local16
0eb44 114             | 	res	1
0eb44 115             | local17
0eb44 115             | 	res	1
0eb44 116             | local18
0eb44 116             | 	res	1
0eb44 117             | local19
0eb44 117             | 	res	1
0eb44 118             | local20
0eb44 118             | 	res	1
0eb44 119             | local21
0eb44 119             | 	res	1
0eb44 11a             | muldiva_
0eb44 11a             | 	res	1
0eb44 11b             | muldivb_
0eb44 11b             | 	res	1
0eb44 11c             | 	fit	480
0eb44 11c             | 
