00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/triangle.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	pin = 0
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 6E 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 03 90 5D |  if_ne	jmp	#spininit
0040c 002 36 F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 02 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 02 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
006fc 0be 00 00 00 00 
00700 0bf 00 00 00 00 | 	orgf	192
00704 0c0             | skip_clock_set_
00704 0c0 A0 0B A0 FD | 	call	#_program
00708 0c1             | cogexit
00708 0c1 38 01 80 FF 
0070c 0c2 1F 00 66 FD | 	waitx	##160000
00710 0c3 01 84 62 FD | 	cogid	arg01
00714 0c4 03 84 62 FD | 	cogstop	arg01
00718 0c5             | spininit
00718 0c5 61 63 06 FB | 	rdlong	objptr, ptra++
0071c 0c6 61 6F 06 FB | 	rdlong	result1, ptra++
00720 0c7 28 06 64 FD | 	setq	#3
00724 0c8 00 85 06 FB | 	rdlong	arg01, ptra
00728 0c9 04 F0 87 F1 | 	sub	ptra, #4
0072c 0ca 2D 6E 62 FD | 	call	result1
00730 0cb D4 FF 9F FD | 	jmp	#cogexit
00734 0cc             | FCACHE_LOAD_
00734 0cc F9 AD 01 F6 |     mov	fcache_tmpb_,ptrb
00738 0cd 2B F2 63 FD |     pop	ptrb
0073c 0ce D5 EC 8B F9 |     altd	pa,ret_instr_
00740 0cf D5 00 00 F6 |     mov	 0-0, ret_instr_
00744 0d0 28 EC 63 FD |     setq	pa
00748 0d1 E1 01 04 FB |     rdlong	$0, ptrb++
0074c 0d2 2A F2 63 FD |     push	ptrb
00750 0d3 D6 F2 03 F6 |     mov ptrb,fcache_tmpb_
00754 0d4 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00758 0d5             | ret_instr_
00758 0d5 00 FE 07 02 |     _ret_ cmp inb,#0
0075c 0d6             | fcache_tmpb_
0075c 0d6 00 00 00 00 |     long 0
00760 0d7             | fcache_load_ptr_
00760 0d7 CC 00 00 00 |     long FCACHE_LOAD_
00764 0d8             | builtin_bytefill_
00764 0d8 01 88 56 F0 |         shr	arg03, #1 wc
00768 0d9 42 87 42 CC |  if_c   wrbyte	arg02, arg01
0076c 0da 01 84 06 C1 |  if_c   add	arg01, #1
00770 0db 00 86 FE F9 |         movbyts	arg02, #0
00774 0dc             | builtin_wordfill_
00774 0dc 01 88 56 F0 |         shr	arg03, #1 wc
00778 0dd 42 87 52 CC |  if_c   wrword	arg02, arg01
0077c 0de 02 84 06 C1 |  if_c   add	arg01, #2
00780 0df 43 87 2A F9 |         setword	arg02, arg02, #1
00784 0e0             | builtin_longfill_
00784 0e0 42 01 88 FC |         wrfast	#0,arg01
00788 0e1 00 88 0E F2 |         cmp	arg03, #0 wz
0078c 0e2 44 03 D8 5C |  if_nz  rep	#1, arg03
00790 0e3 17 86 62 5D |  if_nz  wflong	arg02
00794 0e4 2D 00 64 FD |         ret
00798 0e5             | COUNT_
00798 0e5 00 00 00 00 |     long 0
0079c 0e6             | RETADDR_
0079c 0e6 00 00 00 00 |     long 0
007a0 0e7             | fp
007a0 0e7 00 00 00 00 |     long 0
007a4 0e8             | pushregs_
007a4 0e8 2B EC 63 FD |     pop  pa
007a8 0e9 2B CC 61 FD |     pop  RETADDR_
007ac 0ea 03 CA 95 FB |     tjz  COUNT_, #pushregs_done_
007b0 0eb FF CB 8D F9 |     altd  COUNT_, #511
007b4 0ec 28 00 64 FD |     setq #0-0
007b8 0ed 61 91 66 FC |     wrlong local01, ptra++
007bc 0ee             | pushregs_done_
007bc 0ee 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
007c0 0ef 61 CB 65 FC |     wrlong COUNT_, ptra++
007c4 0f0 F8 CF 01 F6 |     mov    fp, ptra
007c8 0f1 2C EC 63 FD |     jmp  pa
007cc 0f2             |  popregs_
007cc 0f2 2B EC 63 FD |     pop    pa
007d0 0f3 28 04 64 FD |     setq   #2
007d4 0f4 5F CB 05 FB |     rdlong COUNT_, --ptra
007d8 0f5 02 CA 75 FB |     djf    COUNT_, #popregs__ret
007dc 0f6 28 CA 61 FD |     setq   COUNT_
007e0 0f7 5F 91 06 FB |     rdlong local01, --ptra
007e4 0f8             | popregs__ret
007e4 0f8 2A CC 61 FD |     push   RETADDR_
007e8 0f9 2C EC 63 FD |     jmp    pa
007ec 0fa             | 
007ec 0fa             | divide_
007ec 0fa 56 AD 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007f0 0fb 6C 60 62 FD |        wrc     itmp2_                         'store sign of y
007f4 0fc 55 AB 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007f8 0fd 56 AB 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
007fc 0fe 01 60 66 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00800 0ff 18 AC 62 FD |        getqx   muldivb_                       'get quotient
00804 100 19 AA 62 FD |        getqy   muldiva_                       'get remainder
00808 101 55 AB 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0080c 102 00 60 16 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00810 103 56 AD 82 06 |  _ret_ negc    muldivb_,muldivb_     
00814 104             | __pc long 0
00814 104 00 00 00 00 
00818 105             | __setjmp
00818 105 2B 08 62 FD |     pop __pc
0081c 106 00 6E 06 F6 |     mov result1, #0
00820 107 00 70 06 F6 |     mov result2, #0
00824 108 42 5D 02 F6 |     mov abortchain, arg01
00828 109 42 CF 61 FC |     wrlong fp, arg01
0082c 10a 04 84 06 F1 |     add arg01, #4
00830 10b 42 F1 63 FC |     wrlong ptra, arg01
00834 10c 04 84 06 F1 |     add arg01, #4
00838 10d 42 63 62 FC |     wrlong objptr, arg01
0083c 10e 04 84 06 F1 |     add arg01, #4
00840 10f 42 09 62 FC |     wrlong __pc, arg01
00844 110 2C 08 62 FD |     jmp __pc
00848 111             | __unwind_pc long 0
00848 111 00 00 00 00 
0084c 112             | __unwind_stack
0084c 112 2B 22 62 FD |    pop  __unwind_pc
00850 113             | __unwind_loop
00850 113 43 85 0A F2 |    cmp  arg01, arg02 wz
00854 114 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00858 115 42 F1 03 F6 |    mov   ptra, arg01
0085c 116 6C FF BF FD |    call  #popregs_
00860 117 E7 84 02 F6 |    mov   arg01, fp
00864 118 E8 FF 9F FD |    jmp   #__unwind_loop
00868 119             | __unwind_stack_ret
00868 119 2C 22 62 FD |    jmp  __unwind_pc
0086c 11a             | __longjmp
0086c 11a 2B 08 62 FD |     pop __pc
00870 11b 00 84 0E F2 |     cmp    arg01, #0 wz
00874 11c 30 00 90 AD |  if_z jmp #nocatch
00878 11d 43 6F 02 F6 |     mov result1, arg02
0087c 11e 01 70 06 F6 |     mov result2, #1
00880 11f 42 87 02 FB |     rdlong arg02, arg01
00884 120 04 84 06 F1 |     add arg01, #4
00888 121 42 F1 03 FB |     rdlong ptra, arg01
0088c 122 04 84 06 F1 |     add arg01, #4
00890 123 42 63 02 FB |     rdlong objptr, arg01
00894 124 04 84 06 F1 |     add arg01, #4
00898 125 42 09 02 FB |     rdlong __pc, arg01
0089c 126 E7 84 02 F6 |     mov arg01, fp
008a0 127 A8 FF BF FD |     call #__unwind_stack
008a4 128             | __longjmp_ret
008a4 128 2C 08 62 FD |     jmp  __pc
008a8 129             | nocatch
008a8 129 00 88 0E F2 |     cmp arg03, #0 wz
008ac 12a 58 FE 9F AD |  if_z jmp #cogexit
008b0 12b F0 FF 9F FD |     jmp #__longjmp_ret
008b4 12c             | 
008b4 12c             | __heap_ptr
008b4 12c E4 8C 00 00 | 	long	@__heap_base
008b8 12d             | __methods__
008b8 12d B0 8C 00 00 | 	long	@__methodtable__
008bc 12e             | abortchain
008bc 12e 00 00 00 00 | 	long	0
008c0 12f             | itmp1_
008c0 12f 00 00 00 00 | 	long	0
008c4 130             | itmp2_
008c4 130 00 00 00 00 | 	long	0
008c8 131             | objptr
008c8 131 5C A4 00 00 | 	long	@objmem
008cc 132             | ptr___system__dat__
008cc 132 80 8A 00 00 | 	long	@__system__dat_
008d0 133             | ptr__hg010b_spin2_dat__
008d0 133 40 3B 00 00 | 	long	@_hg010b_spin2_dat_
008d4 134             | ptr__psram16drv_spin2_dat__
008d4 134 F0 7A 00 00 | 	long	@_psram16drv_spin2_dat_
008d8 135             | ptr__psram_spin2_dat__
008d8 135 A8 78 00 00 | 	long	@_psram_spin2_dat_
008dc 136             | ptr_stackspace_
008dc 136 B4 E0 00 00 | 	long	@stackspace
008e0 137             | result1
008e0 137 00 00 00 00 | 	long	0
008e4 138             | result2
008e4 138 01 00 00 00 | 	long	1
008e8 139             | result3
008e8 139 02 00 00 00 | 	long	2
008ec 13a             | COG_BSS_START
008ec 13a             | 	fit	480
008ec                 | 	orgh
008ec                 | hubentry
008ec                 | 
008ec                 | ' 
008ec                 | ' 
008ec                 | ' triangle (1,2,3,4,5,6) 'abc acb bac bca cab cba
008ec                 | ' triangle (1,2,5,6,3,4) 'abc acb bac bca cab cba
008ec                 | ' triangle (3,4,1,2,5,6) 'abc acb bac bca cab cba
008ec                 | ' triangle (3,4,5,6,1,2) 'abc acb bac bca cab cba
008ec                 | ' triangle (5,6,1,2,3,4) 'abc acb bac bca cab cba
008ec                 | ' triangle (5,6,3,4,1,2) 'abc acb bac bca cab cba
008ec                 | ' waitms(5000)
008ec                 | ' testtriangle
008ec                 | ' 
008ec                 | ' sub triangle(x1,y1,x2,y2,x3,y3)
008ec                 | _triangle
008ec     06 CA 05 F6 | 	mov	COUNT_, #6
008f0     E8 00 A0 FD | 	call	#pushregs_
008f4     42 91 02 F6 | 	mov	local01, arg01
008f8     43 93 02 F6 | 	mov	local02, arg02
008fc     44 95 02 F6 | 	mov	local03, arg03
00900     45 97 02 F6 | 	mov	local04, arg04
00904     46 99 02 F6 | 	mov	local05, arg05
00908     47 9B 02 F6 | 	mov	local06, arg06
0090c                 | ' 
0090c                 | ' if y1>y2 then x2,x1=x1,x2 : y2,y1=y1,y2
0090c     4B 93 5A F2 | 	cmps	local02, local04 wcz
00910     18 00 90 ED |  if_be	jmp	#LR__0001
00914     4A 8F 02 F6 | 	mov	arg06, local03
00918     48 95 02 F6 | 	mov	local03, local01
0091c     47 91 02 F6 | 	mov	local01, arg06
00920     4B 8F 02 F6 | 	mov	arg06, local04
00924     49 97 02 F6 | 	mov	local04, local02
00928     47 93 02 F6 | 	mov	local02, arg06
0092c                 | LR__0001
0092c                 | ' if y1>y3 then x3,x1=x1,x3 : y3,y1=y1,y3
0092c     4D 93 5A F2 | 	cmps	local02, local06 wcz
00930     18 00 90 ED |  if_be	jmp	#LR__0002
00934     4C 8F 02 F6 | 	mov	arg06, local05
00938     48 99 02 F6 | 	mov	local05, local01
0093c     47 91 02 F6 | 	mov	local01, arg06
00940     4D 8F 02 F6 | 	mov	arg06, local06
00944     49 9B 02 F6 | 	mov	local06, local02
00948     47 93 02 F6 | 	mov	local02, arg06
0094c                 | LR__0002
0094c                 | ' if y2>y3 then x3,x2=x2,x3 : y3,y2=y2,y3
0094c     4D 97 5A F2 | 	cmps	local04, local06 wcz
00950     18 00 90 ED |  if_be	jmp	#LR__0003
00954     4C 8F 02 F6 | 	mov	arg06, local05
00958     4A 99 02 F6 | 	mov	local05, local03
0095c     47 95 02 F6 | 	mov	local03, arg06
00960     4D 8F 02 F6 | 	mov	arg06, local06
00964     4B 9B 02 F6 | 	mov	local06, local04
00968     47 97 02 F6 | 	mov	local04, arg06
0096c                 | LR__0003
0096c                 | ' 
0096c                 | ' print x1,y1,x2,y2,x3,y3
0096c     00 84 06 F6 | 	mov	arg01, #0
00970     14 2E B0 FD | 	call	#__system___getiolock_0093
00974     37 85 02 F6 | 	mov	arg01, result1
00978     74 1A B0 FD | 	call	#__system___lockmem
0097c     00 84 06 F6 | 	mov	arg01, #0
00980     48 87 02 F6 | 	mov	arg02, local01
00984     00 88 06 F6 | 	mov	arg03, #0
00988     0A 8A 06 F6 | 	mov	arg04, #10
0098c     0C 1E B0 FD | 	call	#__system___basic_print_integer
00990     00 84 06 F6 | 	mov	arg01, #0
00994     09 86 06 F6 | 	mov	arg02, #9
00998     00 88 06 F6 | 	mov	arg03, #0
0099c     60 1D B0 FD | 	call	#__system___basic_print_char
009a0     00 84 06 F6 | 	mov	arg01, #0
009a4     49 87 02 F6 | 	mov	arg02, local02
009a8     00 88 06 F6 | 	mov	arg03, #0
009ac     0A 8A 06 F6 | 	mov	arg04, #10
009b0     E8 1D B0 FD | 	call	#__system___basic_print_integer
009b4     00 84 06 F6 | 	mov	arg01, #0
009b8     09 86 06 F6 | 	mov	arg02, #9
009bc     00 88 06 F6 | 	mov	arg03, #0
009c0     3C 1D B0 FD | 	call	#__system___basic_print_char
009c4     00 84 06 F6 | 	mov	arg01, #0
009c8     4A 87 02 F6 | 	mov	arg02, local03
009cc     00 88 06 F6 | 	mov	arg03, #0
009d0     0A 8A 06 F6 | 	mov	arg04, #10
009d4     C4 1D B0 FD | 	call	#__system___basic_print_integer
009d8     00 84 06 F6 | 	mov	arg01, #0
009dc     09 86 06 F6 | 	mov	arg02, #9
009e0     00 88 06 F6 | 	mov	arg03, #0
009e4     18 1D B0 FD | 	call	#__system___basic_print_char
009e8     00 84 06 F6 | 	mov	arg01, #0
009ec     4B 87 02 F6 | 	mov	arg02, local04
009f0     00 88 06 F6 | 	mov	arg03, #0
009f4     0A 8A 06 F6 | 	mov	arg04, #10
009f8     A0 1D B0 FD | 	call	#__system___basic_print_integer
009fc     00 84 06 F6 | 	mov	arg01, #0
00a00     09 86 06 F6 | 	mov	arg02, #9
00a04     00 88 06 F6 | 	mov	arg03, #0
00a08     F4 1C B0 FD | 	call	#__system___basic_print_char
00a0c     00 84 06 F6 | 	mov	arg01, #0
00a10     4C 87 02 F6 | 	mov	arg02, local05
00a14     00 88 06 F6 | 	mov	arg03, #0
00a18     0A 8A 06 F6 | 	mov	arg04, #10
00a1c     7C 1D B0 FD | 	call	#__system___basic_print_integer
00a20     00 84 06 F6 | 	mov	arg01, #0
00a24     09 86 06 F6 | 	mov	arg02, #9
00a28     00 88 06 F6 | 	mov	arg03, #0
00a2c     D0 1C B0 FD | 	call	#__system___basic_print_char
00a30     00 84 06 F6 | 	mov	arg01, #0
00a34     4D 87 02 F6 | 	mov	arg02, local06
00a38     00 88 06 F6 | 	mov	arg03, #0
00a3c     0A 8A 06 F6 | 	mov	arg04, #10
00a40     58 1D B0 FD | 	call	#__system___basic_print_integer
00a44     00 84 06 F6 | 	mov	arg01, #0
00a48     0A 86 06 F6 | 	mov	arg02, #10
00a4c     00 88 06 F6 | 	mov	arg03, #0
00a50     AC 1C B0 FD | 	call	#__system___basic_print_char
00a54     00 84 06 F6 | 	mov	arg01, #0
00a58     2C 2D B0 FD | 	call	#__system___getiolock_0093
00a5c     37 01 68 FC | 	wrlong	#0, result1
00a60     E7 F0 03 F6 | 	mov	ptra, fp
00a64     F2 00 A0 FD | 	call	#popregs_
00a68                 | _triangle_ret
00a68     2D 00 64 FD | 	ret
00a6c                 | 
00a6c                 | ' 
00a6c                 | ' sub testtriangle
00a6c                 | _testtriangle
00a6c     02 CA 05 F6 | 	mov	COUNT_, #2
00a70     E8 00 A0 FD | 	call	#pushregs_
00a74                 | ' do
00a74                 | LR__0010
00a74                 | ' for j=0 to 255
00a74     00 90 06 F6 | 	mov	local01, #0
00a78                 | LR__0011
00a78                 | '   for i=0 to 511
00a78     00 92 06 F6 | 	mov	local02, #0
00a7c     D7 66 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
00a80                 | LR__0012
00a80     49 89 02 F6 | 	mov	arg03, local02
00a84     04 88 66 F0 | 	shl	arg03, #4
00a88     31 87 02 F6 | 	mov	arg02, objptr
00a8c     0B 00 00 FF 
00a90     D4 86 06 F1 | 	add	arg02, ##5844
00a94     43 89 02 F1 | 	add	arg03, arg02
00a98     00 00 60 FF 
00a9c     00 86 06 F6 | 	mov	arg02, ##-1073741824
00aa0     31 6F 02 FB | 	rdlong	result1, objptr
00aa4     37 87 02 F1 | 	add	arg02, result1
00aa8     49 85 02 F6 | 	mov	arg01, local02
00aac     0A 84 66 F0 | 	shl	arg01, #10
00ab0     42 87 02 F1 | 	add	arg02, arg01
00ab4     FF 85 06 F6 | 	mov	arg01, #511
00ab8     49 85 82 F1 | 	sub	arg01, local02
00abc     42 87 02 F1 | 	add	arg02, arg01
00ac0     44 87 62 FC | 	wrlong	arg02, arg03
00ac4     49 89 02 F6 | 	mov	arg03, local02
00ac8     02 88 66 F0 | 	shl	arg03, #2
00acc     01 88 06 F1 | 	add	arg03, #1
00ad0     02 88 66 F0 | 	shl	arg03, #2
00ad4     0B 00 00 FF 
00ad8     D4 62 06 F1 | 	add	objptr, ##5844
00adc     31 89 02 F1 | 	add	arg03, objptr
00ae0     44 91 62 FC | 	wrlong	local01, arg03
00ae4     49 89 02 F6 | 	mov	arg03, local02
00ae8     02 88 66 F0 | 	shl	arg03, #2
00aec     02 88 06 F1 | 	add	arg03, #2
00af0     02 88 66 F0 | 	shl	arg03, #2
00af4     31 89 02 F1 | 	add	arg03, objptr
00af8     49 87 02 F6 | 	mov	arg02, local02
00afc     01 86 06 F1 | 	add	arg02, #1
00b00     01 86 66 F0 | 	shl	arg02, #1
00b04     44 87 62 FC | 	wrlong	arg02, arg03
00b08     49 89 02 F6 | 	mov	arg03, local02
00b0c     02 88 66 F0 | 	shl	arg03, #2
00b10     03 88 06 F1 | 	add	arg03, #3
00b14     02 88 66 F0 | 	shl	arg03, #2
00b18     31 89 02 F1 | 	add	arg03, objptr
00b1c     49 6F 02 F6 | 	mov	result1, local02
00b20     02 6E 66 F0 | 	shl	result1, #2
00b24     04 6E 06 F1 | 	add	result1, #4
00b28     02 6E 66 F0 | 	shl	result1, #2
00b2c     31 6F 02 F1 | 	add	result1, objptr
00b30     0B 00 00 FF 
00b34     D4 62 86 F1 | 	sub	objptr, ##5844
00b38     44 6F 62 FC | 	wrlong	result1, arg03
00b3c     01 92 06 F1 | 	add	local02, #1
00b40     01 00 00 FF 
00b44     00 92 56 F2 | 	cmps	local02, ##512 wc
00b48     34 FF 9F CD |  if_b	jmp	#LR__0012
00b4c                 | LR__0013
00b4c     1E 00 00 FF 
00b50     50 62 06 F1 | 	add	objptr, ##15440
00b54     31 01 68 FC | 	wrlong	#0, objptr
00b58     12 00 00 FF 
00b5c     80 63 86 F1 | 	sub	objptr, ##9600
00b60     31 85 02 FB | 	rdlong	arg01, objptr
00b64     04 62 06 F1 | 	add	objptr, #4
00b68     31 87 02 F6 | 	mov	arg02, objptr
00b6c     0B 00 00 FF 
00b70     D4 62 86 F1 | 	sub	objptr, ##5844
00b74     00 88 06 F6 | 	mov	arg03, #0
00b78     D0 13 B0 FD | 	call	#_psram_spin2_execList
00b7c     01 84 06 F6 | 	mov	arg01, #1
00b80     B4 0A B0 FD | 	call	#_hg010b_spin2_waitvbl
00b84     01 90 06 F1 | 	add	local01, #1
00b88     00 91 56 F2 | 	cmps	local01, #256 wc
00b8c     E8 FE 9F CD |  if_b	jmp	#LR__0011
00b90     E0 FE 9F FD | 	jmp	#LR__0010
00b94     E7 F0 03 F6 | 	mov	ptra, fp
00b98     F2 00 A0 FD | 	call	#popregs_
00b9c                 | _testtriangle_ret
00b9c     2D 00 64 FD | 	ret
00ba0                 | 
00ba0                 | _program
00ba0     01 CA 05 F6 | 	mov	COUNT_, #1
00ba4     E8 00 A0 FD | 	call	#pushregs_
00ba8     00 84 06 F6 | 	mov	arg01, #0
00bac     0A 86 C6 F9 | 	decod	arg02, #10
00bb0     0B 88 06 F6 | 	mov	arg03, #11
00bb4     07 8A 06 F6 | 	mov	arg04, #7
00bb8     0B 00 00 FF 
00bbc     CC 62 06 F1 | 	add	objptr, ##5836
00bc0     1C 10 B0 FD | 	call	#_psram_spin2_startx
00bc4     31 6F 42 FC | 	wrbyte	result1, objptr
00bc8     00 84 06 F6 | 	mov	arg01, #0
00bcc                 | '     return $7FF00 + cog*12
00bcc     04 62 06 F1 | 	add	objptr, #4
00bd0     FF 03 80 FF 
00bd4     31 01 6A FC | 	wrlong	##524032, objptr
00bd8     FF 03 00 FF 
00bdc     00 87 06 F6 | 	mov	arg02, ##524032
00be0     0B 00 00 FF 
00be4     D0 62 86 F1 | 	sub	objptr, ##5840
00be8     7C 01 B0 FD | 	call	#_hg010b_spin2_start
00bec     0B 00 00 FF 
00bf0     CD 62 06 F1 | 	add	objptr, ##5837
00bf4     31 6F 42 FC | 	wrbyte	result1, objptr
00bf8                 | ' 
00bf8                 | ' pscog=psram.startx(0, 1024, 11, 7)
00bf8                 | ' mbox=psram.getMailbox(0)
00bf8                 | ' 
00bf8                 | ' videocog=v.start(pin,mbox)
00bf8                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
00bf8     00 90 06 F6 | 	mov	local01, #0
00bfc     01 62 86 F1 | 	sub	objptr, #1
00c00                 | LR__0020
00c00     48 85 02 F6 | 	mov	arg01, local01
00c04     00 28 00 FF 
00c08     00 86 06 F6 | 	mov	arg02, ##5242880
00c0c     88 14 B0 FD | 	call	#_psram_spin2_setQos
00c10     01 90 06 F1 | 	add	local01, #1
00c14     08 90 56 F2 | 	cmps	local01, #8 wc
00c18     E4 FF 9F CD |  if_b	jmp	#LR__0020
00c1c     01 62 06 F1 | 	add	objptr, #1
00c20     31 85 C2 FA | 	rdbyte	arg01, objptr
00c24     7A 00 02 FF 
00c28     00 86 06 F6 | 	mov	arg02, ##67171328
00c2c     01 62 86 F1 | 	sub	objptr, #1
00c30     64 14 B0 FD | 	call	#_psram_spin2_setQos
00c34     0B 00 00 FF 
00c38     CC 62 86 F1 | 	sub	objptr, ##5836
00c3c                 | ' psram.setQoS(videocog, $0400f400) 
00c3c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
00c3c     31 87 02 F6 | 	mov	arg02, objptr
00c40     00 88 06 F6 | 	mov	arg03, #0
00c44     00 8A 06 F6 | 	mov	arg04, #0
00c48     00 84 06 F6 | 	mov	arg01, #0
00c4c     5C 19 B0 FD | 	call	#__system___basic_open
00c50     64 84 06 F6 | 	mov	arg01, #100
00c54     7C 18 B0 FD | 	call	#__system___waitms
00c58     9A 84 06 F6 | 	mov	arg01, #154
00c5c     93 86 06 F6 | 	mov	arg02, #147
00c60     44 0A B0 FD | 	call	#_hg010b_spin2_cls
00c64                 | ' waitms(100)
00c64                 | ' v.cls(154,147)
00c64                 | ' print "Test ready"
00c64     00 84 06 F6 | 	mov	arg01, #0
00c68     1C 2B B0 FD | 	call	#__system___getiolock_0093
00c6c     37 85 02 F6 | 	mov	arg01, result1
00c70     7C 17 B0 FD | 	call	#__system___lockmem
00c74     1D 00 00 FF 
00c78     32 87 06 F6 | 	mov	arg02, ##@LR__0573
00c7c     00 84 06 F6 | 	mov	arg01, #0
00c80     00 88 06 F6 | 	mov	arg03, #0
00c84     D0 1A B0 FD | 	call	#__system___basic_print_string
00c88     00 84 06 F6 | 	mov	arg01, #0
00c8c     0A 86 06 F6 | 	mov	arg02, #10
00c90     00 88 06 F6 | 	mov	arg03, #0
00c94     68 1A B0 FD | 	call	#__system___basic_print_char
00c98     00 84 06 F6 | 	mov	arg01, #0
00c9c     E8 2A B0 FD | 	call	#__system___getiolock_0093
00ca0     37 01 68 FC | 	wrlong	#0, result1
00ca4     01 84 06 F6 | 	mov	arg01, #1
00ca8     02 86 06 F6 | 	mov	arg02, #2
00cac     03 88 06 F6 | 	mov	arg03, #3
00cb0     04 8A 06 F6 | 	mov	arg04, #4
00cb4     05 8C 06 F6 | 	mov	arg05, #5
00cb8     06 8E 06 F6 | 	mov	arg06, #6
00cbc     2C FC BF FD | 	call	#_triangle
00cc0     01 84 06 F6 | 	mov	arg01, #1
00cc4     02 86 06 F6 | 	mov	arg02, #2
00cc8     05 88 06 F6 | 	mov	arg03, #5
00ccc     06 8A 06 F6 | 	mov	arg04, #6
00cd0     03 8C 06 F6 | 	mov	arg05, #3
00cd4     04 8E 06 F6 | 	mov	arg06, #4
00cd8     10 FC BF FD | 	call	#_triangle
00cdc     03 84 06 F6 | 	mov	arg01, #3
00ce0     04 86 06 F6 | 	mov	arg02, #4
00ce4     01 88 06 F6 | 	mov	arg03, #1
00ce8     02 8A 06 F6 | 	mov	arg04, #2
00cec     05 8C 06 F6 | 	mov	arg05, #5
00cf0     06 8E 06 F6 | 	mov	arg06, #6
00cf4     F4 FB BF FD | 	call	#_triangle
00cf8     03 84 06 F6 | 	mov	arg01, #3
00cfc     04 86 06 F6 | 	mov	arg02, #4
00d00     05 88 06 F6 | 	mov	arg03, #5
00d04     06 8A 06 F6 | 	mov	arg04, #6
00d08     01 8C 06 F6 | 	mov	arg05, #1
00d0c     02 8E 06 F6 | 	mov	arg06, #2
00d10     D8 FB BF FD | 	call	#_triangle
00d14     05 84 06 F6 | 	mov	arg01, #5
00d18     06 86 06 F6 | 	mov	arg02, #6
00d1c     01 88 06 F6 | 	mov	arg03, #1
00d20     02 8A 06 F6 | 	mov	arg04, #2
00d24     03 8C 06 F6 | 	mov	arg05, #3
00d28     04 8E 06 F6 | 	mov	arg06, #4
00d2c     BC FB BF FD | 	call	#_triangle
00d30     05 84 06 F6 | 	mov	arg01, #5
00d34     06 86 06 F6 | 	mov	arg02, #6
00d38     03 88 06 F6 | 	mov	arg03, #3
00d3c     04 8A 06 F6 | 	mov	arg04, #4
00d40     01 8C 06 F6 | 	mov	arg05, #1
00d44     02 8E 06 F6 | 	mov	arg06, #2
00d48     A0 FB BF FD | 	call	#_triangle
00d4c     09 00 00 FF 
00d50     88 85 06 F6 | 	mov	arg01, ##5000
00d54     7C 17 B0 FD | 	call	#__system___waitms
00d58     10 FD BF FD | 	call	#_testtriangle
00d5c     E7 F0 03 F6 | 	mov	ptra, fp
00d60     F2 00 A0 FD | 	call	#popregs_
00d64                 | _program_ret
00d64     2D 00 64 FD | 	ret
00d68                 | 
00d68                 | ' '' this is not a main program.
00d68                 | ' 
00d68                 | ' '****************************************************************************************************************
00d68                 | ' '                                                                                                             	*
00d68                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
00d68                 | ' '                                                                                                            	*
00d68                 | ' ' base - HDMI base pin												*
00d68                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
00d68                 | ' '														*
00d68                 | ' '														*
00d68                 | ' '****************************************************************************************************************
00d68                 | ' 
00d68                 | ' pub start(base,mb):result |i
00d68                 | _hg010b_spin2_start
00d68                 | ' 
00d68                 | ' '--------------------------- initialize pointers and variables
00d68                 | ' 
00d68                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
00d68     34 62 06 F1 | 	add	objptr, #52
00d6c     31 6F 02 F6 | 	mov	result1, objptr
00d70     28 62 86 F1 | 	sub	objptr, #40
00d74     31 6F 62 FC | 	wrlong	result1, objptr
00d78                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
00d78                 | ' hdmibase:=base							' HDMI base pin, 8*n
00d78     18 62 06 F1 | 	add	objptr, #24
00d7c     31 85 62 FC | 	wrlong	arg01, objptr
00d80                 | ' mailbox_ptr:=mb		
00d80     04 62 06 F1 | 	add	objptr, #4
00d84     31 87 62 FC | 	wrlong	arg02, objptr
00d88                 | ' mailbox0:=mb				' PSRAM mailbox pointer
00d88     C1 63 06 F1 | 	add	objptr, #449
00d8c     31 87 62 FC | 	wrlong	arg02, objptr
00d90                 | ' sprite_ptr:=@spr1ptr
00d90     D8 62 86 F1 | 	sub	objptr, #216
00d94     31 6F 02 F6 | 	mov	result1, objptr
00d98     E5 62 86 F1 | 	sub	objptr, #229
00d9c     31 6F 62 FC | 	wrlong	result1, objptr
00da0                 | ' 
00da0                 | ' 		'
00da0                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
00da0     E5 62 06 F1 | 	add	objptr, #229
00da4     31 6F 02 FB | 	rdlong	result1, objptr
00da8     D0 6E 06 F1 | 	add	result1, #208
00dac     37 11 58 FC | 	wrword	#8, result1
00db0                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
00db0     31 89 02 FB | 	rdlong	arg03, objptr
00db4     D2 88 06 F1 | 	add	arg03, #210
00db8     44 21 58 FC | 	wrword	#16, arg03
00dbc                 | ' leading_spaces:=0				'
00dbc     A5 63 06 F1 | 	add	objptr, #421
00dc0     31 01 68 FC | 	wrlong	#0, objptr
00dc4                 | ' 
00dc4                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
00dc4     99 62 86 F1 | 	sub	objptr, #153
00dc8     00 00 A0 FF 
00dcc     31 0F 68 FC | 	wrlong	##1073741831, objptr
00dd0                 | ' emptydl[1]:=0
00dd0     04 62 06 F1 | 	add	objptr, #4
00dd4     31 01 68 FC | 	wrlong	#0, objptr
00dd8                 | ' 
00dd8                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
00dd8                 | ' 
00dd8                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
00dd8     28 63 86 F1 | 	sub	objptr, #296
00ddc     31 03 68 FC | 	wrlong	#1, objptr
00de0                 | ' if s_debug<>0
00de0                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
00de0     20 00 80 FF 
00de4     31 01 68 FC | 	wrlong	##16384, objptr
00de8     F9 62 86 F1 | 	sub	objptr, #249
00dec                 | ' setmode()							' set the mode, see below
00dec     30 02 B0 FD | 	call	#_hg010b_spin2_setmode
00df0                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
00df0     49 62 06 F1 | 	add	objptr, #73
00df4     31 6F 02 F6 | 	mov	result1, objptr
00df8     35 62 86 F1 | 	sub	objptr, #53
00dfc     31 6F 62 FC | 	wrlong	result1, objptr
00e00                 | ' cursor_ptr:=@cursor_x						
00e00     28 62 06 F1 | 	add	objptr, #40
00e04     31 89 02 F6 | 	mov	arg03, objptr
00e08     2C 62 86 F1 | 	sub	objptr, #44
00e0c     31 89 62 FC | 	wrlong	arg03, objptr
00e10                 | ' fontnum:=0  							' start with a PC type font 
00e10     55 62 06 F1 | 	add	objptr, #85
00e14     31 01 68 FC | 	wrlong	#0, objptr
00e18                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
00e18     1C 62 06 F1 | 	add	objptr, #28
00e1c     31 85 02 F6 | 	mov	arg01, objptr
00e20     81 62 86 F1 | 	sub	objptr, #129
00e24     33 87 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
00e28     1C 00 00 FF 
00e2c     80 86 06 F1 | 	add	arg02, ##14464
00e30     10 88 06 F6 | 	mov	arg03, #16
00e34     FC 14 B0 FD | 	call	#__system____builtin_memmove
00e38                 | ' leading_spaces:=0
00e38     01 00 00 FF 
00e3c     B6 62 06 F1 | 	add	objptr, ##694
00e40     31 01 68 FC | 	wrlong	#0, objptr
00e44     01 00 00 FF 
00e48     B6 62 86 F1 | 	sub	objptr, ##694
00e4c                 | ' '---------------------------- initialize a cursor (MSDOS type)
00e4c                 | ' 
00e4c                 | ' initcursor(154)
00e4c     9A 84 06 F6 | 	mov	arg01, #154
00e50     48 00 B0 FD | 	call	#_hg010b_spin2_initcursor
00e54                 | ' 
00e54                 | ' '---------------------------- start the cog
00e54                 | ' 
00e54                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
00e54     33 87 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
00e58     1C 00 00 FF 
00e5c     90 86 06 F1 | 	add	arg02, ##14480
00e60     31 89 02 F6 | 	mov	arg03, objptr
00e64     14 88 06 F1 | 	add	arg03, #20
00e68     10 6E 06 F6 | 	mov	result1, #16
00e6c     28 88 62 FD | 	setq	arg03
00e70     43 6F F2 FC | 	coginit	result1, arg02 wc
00e74     01 6E 66 C6 |  if_b	neg	result1, #1
00e78     30 62 06 F1 | 	add	objptr, #48
00e7c     31 6F 62 FC | 	wrlong	result1, objptr
00e80     30 62 86 F1 | 	sub	objptr, #48
00e84                 | ' waitms(40)							' wait for stabilize
00e84     28 84 06 F6 | 	mov	arg01, #40
00e88     48 16 B0 FD | 	call	#__system___waitms
00e8c                 | ' return cog							' return the driver's cog #
00e8c     30 62 06 F1 | 	add	objptr, #48
00e90     31 6F 02 FB | 	rdlong	result1, objptr
00e94     30 62 86 F1 | 	sub	objptr, #48
00e98                 | _hg010b_spin2_start_ret
00e98     2D 00 64 FD | 	ret
00e9c                 | 
00e9c                 | ' 
00e9c                 | ' '---------------------------- initialize a cursor (MSDOS type)
00e9c                 | ' pub initcursor(color) |i
00e9c                 | _hg010b_spin2_initcursor
00e9c     03 CA 05 F6 | 	mov	COUNT_, #3
00ea0     E8 00 A0 FD | 	call	#pushregs_
00ea4     42 91 02 F6 | 	mov	local01, arg01
00ea8                 | ' 
00ea8                 | ' cursor_x:=0							' place the cursor at 0:0
00ea8     3C 62 06 F1 | 	add	objptr, #60
00eac     31 01 58 FC | 	wrword	#0, objptr
00eb0                 | ' cursor_y:=0
00eb0     02 62 06 F1 | 	add	objptr, #2
00eb4     31 01 48 FC | 	wrbyte	#0, objptr
00eb8                 | ' repeat i from 0 to 111
00eb8     00 92 06 F6 | 	mov	local02, #0
00ebc     F8 63 06 F1 | 	add	objptr, #504
00ec0     D7 0C 48 FB | 	callpa	#(@LR__0031-@LR__0030)>>2,fcache_load_ptr_
00ec4                 | LR__0030
00ec4                 | '   cursor[i]:=0
00ec4     49 95 02 F6 | 	mov	local03, local02
00ec8     31 95 02 F1 | 	add	local03, objptr
00ecc     4A 01 48 FC | 	wrbyte	#0, local03
00ed0     01 92 06 F1 | 	add	local02, #1
00ed4     70 92 56 F2 | 	cmps	local02, #112 wc
00ed8     E8 FF 9F CD |  if_b	jmp	#LR__0030
00edc                 | LR__0031
00edc                 | ' repeat i from 112 to 127
00edc     70 92 06 F6 | 	mov	local02, #112
00ee0     D7 0C 48 FB | 	callpa	#(@LR__0033-@LR__0032)>>2,fcache_load_ptr_
00ee4                 | LR__0032
00ee4                 | '   cursor[i]:=color  
00ee4     49 95 02 F6 | 	mov	local03, local02
00ee8     31 95 02 F1 | 	add	local03, objptr
00eec     4A 91 42 FC | 	wrbyte	local01, local03
00ef0     01 92 06 F1 | 	add	local02, #1
00ef4     80 92 16 F2 | 	cmp	local02, #128 wc
00ef8     E8 FF 9F CD |  if_b	jmp	#LR__0032
00efc                 | LR__0033
00efc     01 00 00 FF 
00f00     36 62 86 F1 | 	sub	objptr, ##566
00f04                 | ' 'repeat i from 0 to 127
00f04                 | ' '  if ((i/8)//2)
00f04                 | ' '    cursor[i]:=15
00f04                 | ' '  else
00f04                 | ' '    cursor[i]:=0
00f04                 | ' '  if i>=120    
00f04                 | ' '    cursor[i]:=40
00f04                 | ' setspriteptr(17,@cursor)
00f04     31 87 02 F6 | 	mov	arg02, objptr
00f08     01 00 00 FF 
00f0c     36 86 06 F1 | 	add	arg02, ##566
00f10     11 84 06 F6 | 	mov	arg01, #17
00f14     10 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
00f18                 | ' setspritesize(17,8,16)
00f18     11 84 06 F6 | 	mov	arg01, #17
00f1c     08 86 06 F6 | 	mov	arg02, #8
00f20     10 88 06 F6 | 	mov	arg03, #16
00f24     8C 04 B0 FD | 	call	#_hg010b_spin2_setspritesize
00f28                 | ' setspritepos(17,0,0)
00f28     11 84 06 F6 | 	mov	arg01, #17
00f2c     00 86 06 F6 | 	mov	arg02, #0
00f30     00 88 06 F6 | 	mov	arg03, #0
00f34     14 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
00f38                 | ' cursorshape:=14
00f38     0B 00 00 FF 
00f3c     C6 62 06 F1 | 	add	objptr, ##5830
00f40     31 1D 68 FC | 	wrlong	#14, objptr
00f44                 | ' cursorcolor:=color
00f44     04 62 86 F1 | 	sub	objptr, #4
00f48     31 91 62 FC | 	wrlong	local01, objptr
00f4c     0B 00 00 FF 
00f50     C2 62 86 F1 | 	sub	objptr, ##5826
00f54     E7 F0 03 F6 | 	mov	ptra, fp
00f58     F2 00 A0 FD | 	call	#popregs_
00f5c                 | _hg010b_spin2_initcursor_ret
00f5c     2D 00 64 FD | 	ret
00f60                 | 
00f60                 | ' 
00f60                 | ' pub setcursorcolor(color) | i
00f60                 | _hg010b_spin2_setcursorcolor
00f60                 | ' 
00f60                 | ' cursorcolor:=color
00f60     0B 00 00 FF 
00f64     C2 62 06 F1 | 	add	objptr, ##5826
00f68     31 85 62 FC | 	wrlong	arg01, objptr
00f6c                 | ' repeat i from 0 to (8*cursorshape)-1
00f6c     00 84 06 F6 | 	mov	arg01, #0
00f70     04 62 06 F1 | 	add	objptr, #4
00f74     31 75 02 FB | 	rdlong	_var01, objptr
00f78     03 74 66 F0 | 	shl	_var01, #3
00f7c     01 74 86 F1 | 	sub	_var01, #1
00f80     00 74 56 F2 | 	cmps	_var01, #0 wc
00f84     01 76 86 F6 | 	negc	_var02, #1
00f88     3B 79 02 F6 | 	mov	_var03, _var02
00f8c     3B 75 02 F1 | 	add	_var01, _var02
00f90     0A 00 00 FF 
00f94     90 62 86 F1 | 	sub	objptr, ##5264
00f98     D7 0C 48 FB | 	callpa	#(@LR__0041-@LR__0040)>>2,fcache_load_ptr_
00f9c                 | LR__0040
00f9c                 | '   cursor[i]:=0
00f9c     42 77 02 F6 | 	mov	_var02, arg01
00fa0     31 77 02 F1 | 	add	_var02, objptr
00fa4     3B 01 48 FC | 	wrbyte	#0, _var02
00fa8     3C 85 02 F1 | 	add	arg01, _var03
00fac     3A 85 0A F2 | 	cmp	arg01, _var01 wz
00fb0     E8 FF 9F 5D |  if_ne	jmp	#LR__0040
00fb4                 | LR__0041
00fb4                 | ' repeat i from 8*cursorshape to 127
00fb4     0A 00 00 FF 
00fb8     90 62 06 F1 | 	add	objptr, ##5264
00fbc     31 79 02 FB | 	rdlong	_var03, objptr
00fc0     3C 85 02 F6 | 	mov	arg01, _var03
00fc4     03 84 66 F0 | 	shl	arg01, #3
00fc8     0B 00 00 FF 
00fcc     C6 62 86 F1 | 	sub	objptr, ##5830
00fd0     03 78 66 F0 | 	shl	_var03, #3
00fd4     80 78 56 F2 | 	cmps	_var03, #128 wc
00fd8     01 76 A6 F6 | 	negnc	_var02, #1
00fdc     7F 74 06 F6 | 	mov	_var01, #127
00fe0     3B 75 02 F1 | 	add	_var01, _var02
00fe4     D7 1A 48 FB | 	callpa	#(@LR__0043-@LR__0042)>>2,fcache_load_ptr_
00fe8                 | LR__0042
00fe8                 | '   cursor[i]:=cursorcolor
00fe8     42 79 02 F6 | 	mov	_var03, arg01
00fec     01 00 00 FF 
00ff0     36 62 06 F1 | 	add	objptr, ##566
00ff4     31 79 02 F1 | 	add	_var03, objptr
00ff8     0A 00 00 FF 
00ffc     8C 62 06 F1 | 	add	objptr, ##5260
01000     31 7B 02 FB | 	rdlong	_var04, objptr
01004     0B 00 00 FF 
01008     C2 62 86 F1 | 	sub	objptr, ##5826
0100c     3C 7B 42 FC | 	wrbyte	_var04, _var03
01010     3B 85 02 F1 | 	add	arg01, _var02
01014     3A 85 0A F2 | 	cmp	arg01, _var01 wz
01018     CC FF 9F 5D |  if_ne	jmp	#LR__0042
0101c                 | LR__0043
0101c                 | _hg010b_spin2_setcursorcolor_ret
0101c     2D 00 64 FD | 	ret
01020                 | 
01020                 | '   
01020                 | '   
01020                 | '   
01020                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
01020                 | _hg010b_spin2_setmode
01020     02 CA 05 F6 | 	mov	COUNT_, #2
01024     E8 00 A0 FD | 	call	#pushregs_
01028                 | ' 
01028                 | ' 
01028                 | ' dl_ptr:=@emptydl[0]
01028     01 00 00 FF 
0102c     1D 62 06 F1 | 	add	objptr, ##541
01030     31 8D 02 F6 | 	mov	arg05, objptr
01034     FD 63 86 F1 | 	sub	objptr, #509
01038     31 8D 62 FC | 	wrlong	arg05, objptr
0103c                 | ' 
0103c                 | ' if cog>0 
0103c     10 62 06 F1 | 	add	objptr, #16
01040     31 8D 02 FB | 	rdlong	arg05, objptr
01044     30 62 86 F1 | 	sub	objptr, #48
01048     01 8C 56 F2 | 	cmps	arg05, #1 wc
0104c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
0104c     01 84 06 36 |  if_ae	mov	arg01, #1
01050     E4 05 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
01054                 | ' xres:=1024
01054     01 00 00 FF 
01058     26 62 06 F1 | 	add	objptr, ##550
0105c     02 00 80 FF 
01060     31 01 68 FC | 	wrlong	##1024, objptr
01064                 | ' yres:=600
01064     04 62 06 F1 | 	add	objptr, #4
01068     01 00 80 FF 
0106c     31 B1 68 FC | 	wrlong	##600, objptr
01070                 | ' ppl:=(timings[3])
01070     1C 00 00 FF 
01074     4C 66 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
01078     33 8D 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
0107c     51 63 86 F1 | 	sub	objptr, #337
01080     31 8D 62 FC | 	wrlong	arg05, objptr
01084                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
01084     10 66 06 F1 | 	add	ptr__hg010b_spin2_dat__, #16
01088     33 91 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
0108c     01 90 66 F0 | 	shl	local01, #1
01090     80 62 86 F1 | 	sub	objptr, #128
01094     31 91 62 FC | 	wrlong	local01, objptr
01098                 | ' cpl1:=cpl '' todo remove
01098     04 62 06 F1 | 	add	objptr, #4
0109c     31 91 62 FC | 	wrlong	local01, objptr
010a0                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
010a0     04 00 00 FF 
010a4     1C 66 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
010a8     41 62 86 F1 | 	sub	objptr, #65
010ac     31 67 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
010b0                 | ' repeat i from 0 to 3
010b0     00 92 06 F6 | 	mov	local02, #0
010b4     04 00 00 FF 
010b8     00 66 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
010bc     08 62 06 F1 | 	add	objptr, #8
010c0     D7 20 48 FB | 	callpa	#(@LR__0051-@LR__0050)>>2,fcache_load_ptr_
010c4                 | LR__0050
010c4                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
010c4     49 91 02 F6 | 	mov	local01, local02
010c8     02 90 66 F0 | 	shl	local01, #2
010cc     33 91 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
010d0     31 8D 02 FB | 	rdlong	arg05, objptr
010d4     11 8C 66 F0 | 	shl	arg05, #17
010d8     48 91 02 FB | 	rdlong	local01, local01
010dc     46 91 02 F1 | 	add	local01, arg05
010e0     80 40 38 FF 
010e4     00 90 06 F1 | 	add	local01, ##1887502336
010e8     49 8D 02 F6 | 	mov	arg05, local02
010ec     02 8C 66 F0 | 	shl	arg05, #2
010f0     33 8D 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
010f4     46 91 62 FC | 	wrlong	local01, arg05
010f8     01 92 06 F1 | 	add	local02, #1
010fc     04 92 56 F2 | 	cmps	local02, #4 wc
01100     C0 FF 9F CD |  if_b	jmp	#LR__0050
01104                 | LR__0051
01104     24 62 86 F1 | 	sub	objptr, #36
01108     1C 00 00 FF 
0110c     40 66 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
01110                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
01110                 | ' 'hubset(timings[10])
01110                 | ' waitms(1)                                                   	' wait for stabilization
01110     01 84 06 F6 | 	mov	arg01, #1
01114     BC 13 B0 FD | 	call	#__system___waitms
01118     1C 00 00 FF 
0111c     6C 66 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
01120     33 93 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
01124     61 62 06 F1 | 	add	objptr, #97
01128     31 93 62 FC | 	wrlong	local02, objptr
0112c     49 91 52 F6 | 	abs	local01, local02 wc
01130     04 90 46 F0 | 	shr	local01, #4
01134     48 91 82 F6 | 	negc	local01, local01
01138     9C 62 06 F1 | 	add	objptr, #156
0113c     31 91 62 FC | 	wrlong	local01, objptr
01140     A4 62 86 F1 | 	sub	objptr, #164
01144     31 93 02 FB | 	rdlong	local02, objptr
01148     08 62 06 F1 | 	add	objptr, #8
0114c     31 91 02 FB | 	rdlong	local01, objptr
01150     48 93 02 FD | 	qmul	local02, local01
01154                 | ' lines:=timings[11]
01154                 | ' t_lines:=lines/16
01154                 | ' buflen:=cpl*lines						' framebuffer length in longs
01154     29 62 86 F1 | 	sub	objptr, #41
01158     19 90 C6 F9 | 	decod	local01, #25
0115c     10 66 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
01160     18 92 62 FD | 	getqx	local02
01164     31 93 62 FC | 	wrlong	local02, objptr
01168     38 62 86 F1 | 	sub	objptr, #56
0116c     02 92 66 F0 | 	shl	local02, #2
01170     49 91 82 F1 | 	sub	local01, local02
01174     31 91 62 FC | 	wrlong	local01, objptr
01178     FD 62 06 F1 | 	add	objptr, #253
0117c     31 93 02 FB | 	rdlong	local02, objptr
01180     33 8D 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
01184     46 93 02 FD | 	qmul	local02, arg05
01188                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
01188                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
01188     F9 62 86 F1 | 	sub	objptr, #249
0118c                 | ' mode_ptr:=@timings						' set pointers to timings
0118c     1C 66 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
01190                 | ' graphmode:=1024+512+192+48							' det global variable
01190                 | ' makedl(graphmode)							' make a DL for the mode
01190     03 00 00 FF 
01194     F0 84 06 F6 | 	mov	arg01, ##1776
01198     18 92 62 FD | 	getqx	local02
0119c     49 91 82 F1 | 	sub	local01, local02
011a0     31 91 62 FC | 	wrlong	local01, objptr
011a4     14 62 06 F1 | 	add	objptr, #20
011a8     31 67 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
011ac     79 62 06 F1 | 	add	objptr, #121
011b0     03 00 80 FF 
011b4     31 E1 69 FC | 	wrlong	##1776, objptr
011b8     91 62 86 F1 | 	sub	objptr, #145
011bc     1C 00 00 FF 
011c0     40 66 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
011c4     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
011c8                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
011c8     31 91 02 FB | 	rdlong	local01, objptr
011cc     DD 62 06 F1 | 	add	objptr, #221
011d0     31 91 62 FC | 	wrlong	local01, objptr
011d4                 | ' s_font_ptr:=font_ptr
011d4     D5 62 86 F1 | 	sub	objptr, #213
011d8     31 91 02 FB | 	rdlong	local01, objptr
011dc     D9 62 06 F1 | 	add	objptr, #217
011e0     31 91 62 FC | 	wrlong	local01, objptr
011e4                 | ' s_lines:=lines
011e4     80 62 86 F1 | 	sub	objptr, #128
011e8     31 91 02 FB | 	rdlong	local01, objptr
011ec     84 62 06 F1 | 	add	objptr, #132
011f0     31 91 62 FC | 	wrlong	local01, objptr
011f4                 | ' s_buflen:=buflen
011f4     AD 62 86 F1 | 	sub	objptr, #173
011f8     31 91 02 FB | 	rdlong	local01, objptr
011fc     B5 62 06 F1 | 	add	objptr, #181
01200     31 91 62 FC | 	wrlong	local01, objptr
01204                 | ' s_cpl:=cpl
01204     94 62 86 F1 | 	sub	objptr, #148
01208     31 91 02 FB | 	rdlong	local01, objptr
0120c     90 62 06 F1 | 	add	objptr, #144
01210     31 91 62 FC | 	wrlong	local01, objptr
01214                 | ' s_cpl1:=cpl
01214     90 62 86 F1 | 	sub	objptr, #144
01218     31 91 02 FB | 	rdlong	local01, objptr
0121c     98 62 06 F1 | 	add	objptr, #152
01220     31 91 62 FC | 	wrlong	local01, objptr
01224                 | ' st_lines:=t_lines
01224     0C 62 06 F1 | 	add	objptr, #12
01228     31 91 02 FB | 	rdlong	local01, objptr
0122c     04 62 06 F1 | 	add	objptr, #4
01230     31 91 62 FC | 	wrlong	local01, objptr
01234                 | ' ppl:=ppl/xzoom  
01234     28 62 86 F1 | 	sub	objptr, #40
01238     31 AB 02 FB | 	rdlong	muldiva_, objptr
0123c     2C 62 06 F1 | 	add	objptr, #44
01240     31 AD 02 FB | 	rdlong	muldivb_, objptr
01244     05 63 86 F1 | 	sub	objptr, #261
01248     FA 00 A0 FD | 	call	#divide_
0124c     D9 62 06 F1 | 	add	objptr, #217
01250     31 AD 62 FC | 	wrlong	muldivb_, objptr
01254                 | ' s_ppl:=ppl
01254     1C 62 06 F1 | 	add	objptr, #28
01258     31 AD 62 FC | 	wrlong	muldivb_, objptr
0125c     F5 62 86 F1 | 	sub	objptr, #245
01260                 | ' waitms(20)							' wait 
01260     14 84 06 F6 | 	mov	arg01, #20
01264     6C 12 B0 FD | 	call	#__system___waitms
01268                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
01268     04 62 06 F1 | 	add	objptr, #4
0126c     31 85 02 FB | 	rdlong	arg01, objptr
01270     04 62 86 F1 | 	sub	objptr, #4
01274     31 89 02 FB | 	rdlong	arg03, objptr
01278     42 89 82 F1 | 	sub	arg03, arg01
0127c     20 86 06 F6 | 	mov	arg02, #32
01280     00 8A 06 F6 | 	mov	arg04, #0
01284     01 8C 06 F6 | 	mov	arg05, #1
01288     0B 00 00 FF 
0128c     CC 62 06 F1 | 	add	objptr, ##5836
01290     10 0D B0 FD | 	call	#_psram_spin2_fill
01294     0B 00 00 FF 
01298     CC 62 86 F1 | 	sub	objptr, ##5836
0129c     E7 F0 03 F6 | 	mov	ptra, fp
012a0     F2 00 A0 FD | 	call	#popregs_
012a4                 | _hg010b_spin2_setmode_ret
012a4     2D 00 64 FD | 	ret
012a8                 | 
012a8                 | ' 
012a8                 | ' '****************************************************************************************************************
012a8                 | ' '                                                                                                             	*
012a8                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
012a8                 | ' '                                                                                                             	*
012a8                 | ' '****************************************************************************************************************
012a8                 | ' 
012a8                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
012a8                 | _hg010b_spin2_makedl
012a8                 | ' 
012a8                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
012a8                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
012a8                 | ' repeat i from 0 to 11                                                           ' clear DL
012a8     00 74 06 F6 | 	mov	_var01, #0
012ac     ED 63 06 F1 | 	add	objptr, #493
012b0     D7 0E 48 FB | 	callpa	#(@LR__0061-@LR__0060)>>2,fcache_load_ptr_
012b4                 | LR__0060
012b4                 | '   displaylist[i]:=0 
012b4     3A 77 02 F6 | 	mov	_var02, _var01
012b8     02 76 66 F0 | 	shl	_var02, #2
012bc     31 77 02 F1 | 	add	_var02, objptr
012c0     3B 01 68 FC | 	wrlong	#0, _var02
012c4     01 74 06 F1 | 	add	_var01, #1
012c8     0C 74 56 F2 | 	cmps	_var01, #12 wc
012cc     E4 FF 9F CD |  if_b	jmp	#LR__0060
012d0                 | LR__0061
012d0                 | '                         ' 
012d0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
012d0     8C 63 86 F1 | 	sub	objptr, #396
012d4     31 77 02 FB | 	rdlong	_var02, objptr
012d8     14 76 66 F0 | 	shl	_var02, #20
012dc     01 76 06 F1 | 	add	_var02, #1
012e0     04 62 86 F1 | 	sub	objptr, #4
012e4     31 75 02 FB | 	rdlong	_var01, objptr
012e8     06 74 66 F0 | 	shl	_var01, #6
012ec     3A 77 02 F1 | 	add	_var02, _var01
012f0     90 63 06 F1 | 	add	objptr, #400
012f4     31 77 62 FC | 	wrlong	_var02, objptr
012f8     ED 63 86 F1 | 	sub	objptr, #493
012fc                 | ' displaylist[1]:=buf_ptr<<4+%10  
012fc     31 77 02 FB | 	rdlong	_var02, objptr
01300     04 76 66 F0 | 	shl	_var02, #4
01304     02 76 06 F1 | 	add	_var02, #2
01308     F1 63 06 F1 | 	add	objptr, #497
0130c     31 77 62 FC | 	wrlong	_var02, objptr
01310                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
01310     04 62 86 F1 | 	sub	objptr, #4
01314     31 77 02 F6 | 	mov	_var02, objptr
01318     CD 63 86 F1 | 	sub	objptr, #461
0131c     31 77 62 FC | 	wrlong	_var02, objptr
01320     20 62 86 F1 | 	sub	objptr, #32
01324                 | _hg010b_spin2_makedl_ret
01324     2D 00 64 FD | 	ret
01328                 | 
01328                 | ' 
01328                 | ' 
01328                 | ' '****************************************************************************************************************
01328                 | ' '                                                                        					*
01328                 | ' '  Graphic primitives                                                    					*
01328                 | ' '                                                                        					*
01328                 | ' '****************************************************************************************************************
01328                 | ' 
01328                 | ' pub setspriteptr(num,ptr)
01328                 | _hg010b_spin2_setspriteptr
01328                 | ' long[@spr1ptr+12*num]:=ptr
01328     31 75 02 F6 | 	mov	_var01, objptr
0132c     11 75 06 F1 | 	add	_var01, #273
01330     42 77 02 F6 | 	mov	_var02, arg01
01334     01 76 66 F0 | 	shl	_var02, #1
01338     42 77 02 F1 | 	add	_var02, arg01
0133c     02 76 66 F0 | 	shl	_var02, #2
01340     3B 75 02 F1 | 	add	_var01, _var02
01344     3A 87 62 FC | 	wrlong	arg02, _var01
01348                 | _hg010b_spin2_setspriteptr_ret
01348     2D 00 64 FD | 	ret
0134c                 | 
0134c                 | ' 
0134c                 | ' pub setspritepos(num,x,y)
0134c                 | _hg010b_spin2_setspritepos
0134c                 | ' if y>601
0134c     01 00 00 FF 
01350     5A 88 56 F2 | 	cmps	arg03, ##602 wc
01354                 | '   y:=601
01354     01 00 00 3F 
01358     59 88 06 36 |  if_ae	mov	arg03, ##601
0135c                 | ' if x>1024
0135c     02 00 00 FF 
01360     01 86 56 F2 | 	cmps	arg02, ##1025 wc
01364                 | '   x:=1024
01364     0A 86 C6 39 |  if_ae	decod	arg02, #10
01368                 | ' word[@spr1ptr+12*num+4]:=x
01368     11 63 06 F1 | 	add	objptr, #273
0136c     31 75 02 F6 | 	mov	_var01, objptr
01370     42 77 02 F6 | 	mov	_var02, arg01
01374     01 76 66 F0 | 	shl	_var02, #1
01378     42 77 02 F1 | 	add	_var02, arg01
0137c     02 76 66 F0 | 	shl	_var02, #2
01380     3B 75 02 F1 | 	add	_var01, _var02
01384     04 74 06 F1 | 	add	_var01, #4
01388     3A 87 52 FC | 	wrword	arg02, _var01
0138c                 | ' word[@spr1ptr+12*num+6]:=y
0138c     31 75 02 F6 | 	mov	_var01, objptr
01390     42 77 02 F6 | 	mov	_var02, arg01
01394     01 76 66 F0 | 	shl	_var02, #1
01398     42 77 02 F1 | 	add	_var02, arg01
0139c     02 76 66 F0 | 	shl	_var02, #2
013a0     3B 75 02 F1 | 	add	_var01, _var02
013a4     06 74 06 F1 | 	add	_var01, #6
013a8     3A 89 52 FC | 	wrword	arg03, _var01
013ac     11 63 86 F1 | 	sub	objptr, #273
013b0                 | _hg010b_spin2_setspritepos_ret
013b0     2D 00 64 FD | 	ret
013b4                 | 
013b4                 | ' 
013b4                 | ' pub setspritesize(num,w,h)
013b4                 | _hg010b_spin2_setspritesize
013b4                 | ' word[@spr1ptr+12*num+8]:=w
013b4     11 63 06 F1 | 	add	objptr, #273
013b8     31 75 02 F6 | 	mov	_var01, objptr
013bc     42 77 02 F6 | 	mov	_var02, arg01
013c0     01 76 66 F0 | 	shl	_var02, #1
013c4     42 77 02 F1 | 	add	_var02, arg01
013c8     02 76 66 F0 | 	shl	_var02, #2
013cc     3B 75 02 F1 | 	add	_var01, _var02
013d0     08 74 06 F1 | 	add	_var01, #8
013d4     3A 87 52 FC | 	wrword	arg02, _var01
013d8                 | ' word[@spr1ptr+12*num+10]:=h
013d8     31 75 02 F6 | 	mov	_var01, objptr
013dc     42 77 02 F6 | 	mov	_var02, arg01
013e0     01 76 66 F0 | 	shl	_var02, #1
013e4     42 77 02 F1 | 	add	_var02, arg01
013e8     02 76 66 F0 | 	shl	_var02, #2
013ec     3B 75 02 F1 | 	add	_var01, _var02
013f0     0A 74 06 F1 | 	add	_var01, #10
013f4     3A 89 52 FC | 	wrword	arg03, _var01
013f8     11 63 86 F1 | 	sub	objptr, #273
013fc                 | _hg010b_spin2_setspritesize_ret
013fc     2D 00 64 FD | 	ret
01400                 | 
01400                 | '   
01400                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
01400                 | ' 
01400                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
01400                 | _hg010b_spin2_fastline
01400     02 CA 05 F6 | 	mov	COUNT_, #2
01404     E8 00 A0 FD | 	call	#pushregs_
01408     42 91 02 F6 | 	mov	local01, arg01
0140c     43 93 02 F6 | 	mov	local02, arg02
01410                 | ' 
01410                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
01410     00 88 56 F2 | 	cmps	arg03, #0 wc
01414     F4 00 90 CD |  if_b	jmp	#LR__0070
01418     01 00 00 FF 
0141c     2A 62 06 F1 | 	add	objptr, ##554
01420     31 8D 02 FB | 	rdlong	arg05, objptr
01424     01 00 00 FF 
01428     2A 62 86 F1 | 	sub	objptr, ##554
0142c     46 89 52 F2 | 	cmps	arg03, arg05 wc
01430     D8 00 90 3D |  if_ae	jmp	#LR__0070
01434     00 90 56 F2 | 	cmps	local01, #0 wc
01438     00 92 56 C2 |  if_b	cmps	local02, #0 wc
0143c     CC 00 90 CD |  if_b	jmp	#LR__0070
01440     01 00 00 FF 
01444     26 62 06 F1 | 	add	objptr, ##550
01448     31 8D 02 FB | 	rdlong	arg05, objptr
0144c     01 00 00 FF 
01450     26 62 86 F1 | 	sub	objptr, ##550
01454     46 91 5A F2 | 	cmps	local01, arg05 wcz
01458     01 00 00 1F 
0145c     26 62 06 11 |  if_a	add	objptr, ##550
01460     31 85 02 1B |  if_a	rdlong	arg01, objptr
01464     01 00 00 1F 
01468     26 62 86 11 |  if_a	sub	objptr, ##550
0146c     42 93 5A 12 |  if_a	cmps	local02, arg01 wcz
01470                 | '   return
01470     98 00 90 1D |  if_a	jmp	#LR__0070
01474     49 91 5A F2 | 	cmps	local01, local02 wcz
01478     48 8D 02 16 |  if_a	mov	arg05, local01
0147c     49 91 02 16 |  if_a	mov	local01, local02
01480     46 93 02 16 |  if_a	mov	local02, arg05
01484     00 90 56 F2 | 	cmps	local01, #0 wc
01488     00 90 06 C6 |  if_b	mov	local01, #0
0148c     01 00 00 FF 
01490     26 62 06 F1 | 	add	objptr, ##550
01494     31 8D 02 FB | 	rdlong	arg05, objptr
01498     01 00 00 FF 
0149c     26 62 86 F1 | 	sub	objptr, ##550
014a0     46 93 52 F2 | 	cmps	local02, arg05 wc
014a4     01 00 00 3F 
014a8     26 62 06 31 |  if_ae	add	objptr, ##550
014ac     31 93 02 3B |  if_ae	rdlong	local02, objptr
014b0     01 00 00 3F 
014b4     26 62 86 31 |  if_ae	sub	objptr, ##550
014b8     DD 62 06 F1 | 	add	objptr, #221
014bc     31 85 02 FB | 	rdlong	arg01, objptr
014c0     14 62 06 F1 | 	add	objptr, #20
014c4     31 8D 02 FB | 	rdlong	arg05, objptr
014c8     02 8C 66 F0 | 	shl	arg05, #2
014cc     44 8D 02 FD | 	qmul	arg05, arg03
014d0                 | ' if x1>x2
014d0                 | '   x1,x2:=x2,x1
014d0                 | ' if x1<0 
014d0                 | '   x1:=0
014d0                 | ' if x2>=xres
014d0                 | '   x2:=xres-1  
014d0     01 92 86 31 |  if_ae	sub	local02, #1
014d4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
014d4     01 88 06 F6 | 	mov	arg03, #1
014d8     49 89 02 F1 | 	add	arg03, local02
014dc     48 89 82 F1 | 	sub	arg03, local01
014e0     45 87 02 F6 | 	mov	arg02, arg04
014e4     00 8A 06 F6 | 	mov	arg04, #0
014e8     01 8C 06 F6 | 	mov	arg05, #1
014ec     0A 00 00 FF 
014f0     DB 63 06 F1 | 	add	objptr, ##5595
014f4     18 92 62 FD | 	getqx	local02
014f8     48 93 02 F1 | 	add	local02, local01
014fc     49 85 02 F1 | 	add	arg01, local02
01500     A0 0A B0 FD | 	call	#_psram_spin2_fill
01504     0B 00 00 FF 
01508     CC 62 86 F1 | 	sub	objptr, ##5836
0150c                 | LR__0070
0150c     E7 F0 03 F6 | 	mov	ptra, fp
01510     F2 00 A0 FD | 	call	#popregs_
01514                 | _hg010b_spin2_fastline_ret
01514     2D 00 64 FD | 	ret
01518                 | 
01518                 | '       
01518                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
01518                 | _hg010b_spin2_putcharxycgf
01518                 | ' 
01518                 | '  
01518                 | ' repeat yy from 0 to 15
01518     00 74 06 F6 | 	mov	_var01, #0
0151c     D7 8A 48 FB | 	callpa	#(@LR__0082-@LR__0080)>>2,fcache_load_ptr_
01520                 | LR__0080
01520                 | ' 
01520                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
01520     95 62 06 F1 | 	add	objptr, #149
01524     31 77 02 FB | 	rdlong	_var02, objptr
01528     0A 76 66 F0 | 	shl	_var02, #10
0152c     33 79 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
01530     3B 79 02 F1 | 	add	_var03, _var02
01534     44 77 02 F6 | 	mov	_var02, arg03
01538     04 76 66 F0 | 	shl	_var02, #4
0153c     3B 79 02 F1 | 	add	_var03, _var02
01540     3A 79 02 F1 | 	add	_var03, _var01
01544     3C 79 C2 FA | 	rdbyte	_var03, _var03
01548                 | '   asm
01548     00 78 0E F4 | 	testb	_var03, #0 wz
0154c     45 7B C2 A8 |  if_e	setbyte	_var04, arg04, #0
01550     46 7B C2 58 |  if_ne	setbyte	_var04, arg05, #0
01554     01 78 0E F4 | 	testb	_var03, #1 wz
01558     45 7B CA A8 |  if_e	setbyte	_var04, arg04, #1
0155c     46 7B CA 58 |  if_ne	setbyte	_var04, arg05, #1
01560     02 78 0E F4 | 	testb	_var03, #2 wz
01564     45 7B D2 A8 |  if_e	setbyte	_var04, arg04, #2
01568     46 7B D2 58 |  if_ne	setbyte	_var04, arg05, #2
0156c     03 78 0E F4 | 	testb	_var03, #3 wz
01570     45 7B DA A8 |  if_e	setbyte	_var04, arg04, #3
01574     46 7B DA 58 |  if_ne	setbyte	_var04, arg05, #3
01578     04 78 0E F4 | 	testb	_var03, #4 wz
0157c     45 7D C2 A8 |  if_e	setbyte	_var05, arg04, #0
01580     46 7D C2 58 |  if_ne	setbyte	_var05, arg05, #0
01584     05 78 0E F4 | 	testb	_var03, #5 wz
01588     45 7D CA A8 |  if_e	setbyte	_var05, arg04, #1
0158c     46 7D CA 58 |  if_ne	setbyte	_var05, arg05, #1
01590     06 78 0E F4 | 	testb	_var03, #6 wz
01594     45 7D D2 A8 |  if_e	setbyte	_var05, arg04, #2
01598     46 7D D2 58 |  if_ne	setbyte	_var05, arg05, #2
0159c     07 78 0E F4 | 	testb	_var03, #7 wz
015a0     45 7D DA A8 |  if_e	setbyte	_var05, arg04, #3
015a4     46 7D DA 58 |  if_ne	setbyte	_var05, arg05, #3
015a8                 | '   
015a8                 | '   ccc[0]:=c1
015a8     99 63 06 F1 | 	add	objptr, #409
015ac     31 7B 62 FC | 	wrlong	_var04, objptr
015b0                 | '   ccc[1]:=c2 
015b0     04 62 06 F1 | 	add	objptr, #4
015b4     31 7D 62 FC | 	wrlong	_var05, objptr
015b8                 | '   long[mailbox0][2]:=8
015b8     49 62 86 F1 | 	sub	objptr, #73
015bc     31 79 02 FB | 	rdlong	_var03, objptr
015c0     08 78 06 F1 | 	add	_var03, #8
015c4     3C 11 68 FC | 	wrlong	#8, _var03
015c8                 | '   long[mailbox0][1]:=@ccc
015c8     31 79 02 F6 | 	mov	_var03, objptr
015cc     45 78 06 F1 | 	add	_var03, #69
015d0     31 77 02 FB | 	rdlong	_var02, objptr
015d4     04 76 06 F1 | 	add	_var02, #4
015d8     3B 79 62 FC | 	wrlong	_var03, _var02
015dc                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
015dc     0C 63 86 F1 | 	sub	objptr, #268
015e0     31 79 02 FB | 	rdlong	_var03, objptr
015e4     43 77 02 F6 | 	mov	_var02, arg02
015e8     3A 77 02 F1 | 	add	_var02, _var01
015ec     0A 76 66 F0 | 	shl	_var02, #10
015f0     42 7F 02 F6 | 	mov	_var06, arg01
015f4     02 7E 66 F0 | 	shl	_var06, #2
015f8     3F 77 02 F1 | 	add	_var02, _var06
015fc     3B 79 02 F1 | 	add	_var03, _var02
01600     00 00 78 FF 
01604     00 78 06 F1 | 	add	_var03, ##-268435456
01608     0C 63 06 F1 | 	add	objptr, #268
0160c     31 7F 02 FB | 	rdlong	_var06, objptr
01610     3F 79 62 FC | 	wrlong	_var03, _var06
01614                 | '   repeat
01614                 | LR__0081
01614     31 79 02 FB | 	rdlong	_var03, objptr
01618     3C 77 02 FB | 	rdlong	_var02, _var03
0161c     00 76 56 F2 | 	cmps	_var02, #0 wc
01620     F0 FF 9F CD |  if_b	jmp	#LR__0081
01624     E9 63 86 F1 | 	sub	objptr, #489
01628     01 74 06 F1 | 	add	_var01, #1
0162c     10 74 56 F2 | 	cmps	_var01, #16 wc
01630     EC FE 9F CD |  if_b	jmp	#LR__0080
01634                 | LR__0082
01634                 | _hg010b_spin2_putcharxycgf_ret
01634     2D 00 64 FD | 	ret
01638                 | 
01638                 | ' 
01638                 | ' '*************************************************************************
01638                 | ' '                                                                        *
01638                 | ' '  VBlank functions                                                      *
01638                 | ' '                                                                        *
01638                 | ' '*************************************************************************
01638                 | ' 
01638                 | ' pub waitvbl(amount) | i
01638                 | _hg010b_spin2_waitvbl
01638     03 CA 05 F6 | 	mov	COUNT_, #3
0163c     E8 00 A0 FD | 	call	#pushregs_
01640     42 91 02 F6 | 	mov	local01, arg01
01644                 | ' 
01644                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01644                 | ' 
01644                 | ' repeat i from 1 to amount
01644     01 92 06 F6 | 	mov	local02, #1
01648     01 90 56 F2 | 	cmps	local01, #1 wc
0164c     01 94 86 F6 | 	negc	local03, #1
01650     4A 91 02 F1 | 	add	local01, local03
01654                 | LR__0090
01654                 | '   repeat until vblank==0
01654                 | LR__0091
01654     49 62 06 F1 | 	add	objptr, #73
01658     31 85 0A FB | 	rdlong	arg01, objptr wz
0165c     49 62 86 F1 | 	sub	objptr, #73
01660     0C 00 90 AD |  if_e	jmp	#LR__0092
01664                 | '     waitus(100)
01664     64 84 06 F6 | 	mov	arg01, #100
01668     D4 0E B0 FD | 	call	#__system___waitus
0166c     E4 FF 9F FD | 	jmp	#LR__0091
01670                 | LR__0092
01670                 | '   repeat until vblank==1
01670                 | LR__0093
01670     49 62 06 F1 | 	add	objptr, #73
01674     31 85 02 FB | 	rdlong	arg01, objptr
01678     49 62 86 F1 | 	sub	objptr, #73
0167c     01 84 0E F2 | 	cmp	arg01, #1 wz
01680     0C 00 90 AD |  if_e	jmp	#LR__0094
01684                 | '     waitus(100)
01684     64 84 06 F6 | 	mov	arg01, #100
01688     B4 0E B0 FD | 	call	#__system___waitus
0168c     E0 FF 9F FD | 	jmp	#LR__0093
01690                 | LR__0094
01690     4A 93 02 F1 | 	add	local02, local03
01694     48 93 0A F2 | 	cmp	local02, local01 wz
01698     B8 FF 9F 5D |  if_ne	jmp	#LR__0090
0169c     E7 F0 03 F6 | 	mov	ptra, fp
016a0     F2 00 A0 FD | 	call	#popregs_
016a4                 | _hg010b_spin2_waitvbl_ret
016a4     2D 00 64 FD | 	ret
016a8                 | 
016a8                 | ' 
016a8                 | ' 
016a8                 | ' pub cls(fc,bc)   :c,i
016a8                 | _hg010b_spin2_cls
016a8     02 CA 05 F6 | 	mov	COUNT_, #2
016ac     E8 00 A0 FD | 	call	#pushregs_
016b0     42 91 02 F6 | 	mov	local01, arg01
016b4     43 93 02 F6 | 	mov	local02, arg02
016b8                 | ' 
016b8                 | ' c:=bc
016b8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
016b8     DD 62 06 F1 | 	add	objptr, #221
016bc     31 85 02 FB | 	rdlong	arg01, objptr
016c0     A5 62 86 F1 | 	sub	objptr, #165
016c4     31 89 02 FB | 	rdlong	arg03, objptr
016c8     02 88 66 F0 | 	shl	arg03, #2
016cc     49 87 02 F6 | 	mov	arg02, local02
016d0     00 8A 06 F6 | 	mov	arg04, #0
016d4     01 8C 06 F6 | 	mov	arg05, #1
016d8     0B 00 00 FF 
016dc     94 62 06 F1 | 	add	objptr, ##5780
016e0     C0 08 B0 FD | 	call	#_psram_spin2_fill
016e4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
016e4     0B 00 00 FF 
016e8     C8 62 86 F1 | 	sub	objptr, ##5832
016ec     31 85 02 FB | 	rdlong	arg01, objptr
016f0     04 62 86 F1 | 	sub	objptr, #4
016f4     31 89 02 FB | 	rdlong	arg03, objptr
016f8     42 89 82 F1 | 	sub	arg03, arg01
016fc     20 86 06 F6 | 	mov	arg02, #32
01700     00 8A 06 F6 | 	mov	arg04, #0
01704     01 8C 06 F6 | 	mov	arg05, #1
01708     0B 00 00 FF 
0170c     CC 62 06 F1 | 	add	objptr, ##5836
01710     90 08 B0 FD | 	call	#_psram_spin2_fill
01714                 | ' setwritecolors(fc,bc)
01714                 | ' 
01714                 | ' write_color:=ff
01714     0B 00 00 FF 
01718     8B 62 86 F1 | 	sub	objptr, ##5771
0171c     31 91 62 FC | 	wrlong	local01, objptr
01720                 | ' write_background:=bb
01720     04 62 06 F1 | 	add	objptr, #4
01724     31 93 62 FC | 	wrlong	local02, objptr
01728                 | ' cursor_x:=0
01728     09 62 86 F1 | 	sub	objptr, #9
0172c     31 01 58 FC | 	wrword	#0, objptr
01730                 | ' cursor_y:=0
01730     02 62 06 F1 | 	add	objptr, #2
01734     31 01 48 FC | 	wrbyte	#0, objptr
01738                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
01738     02 62 86 F1 | 	sub	objptr, #2
0173c     31 87 E2 FA | 	rdword	arg02, objptr
01740     02 86 66 F0 | 	shl	arg02, #2
01744     3C 62 86 F1 | 	sub	objptr, #60
01748     04 88 06 F6 | 	mov	arg03, #4
0174c     11 84 06 F6 | 	mov	arg01, #17
01750     F8 FB BF FD | 	call	#_hg010b_spin2_setspritepos
01754                 | ' setcursorcolor(fc)
01754     48 85 02 F6 | 	mov	arg01, local01
01758     04 F8 BF FD | 	call	#_hg010b_spin2_setcursorcolor
0175c     49 6F 02 F6 | 	mov	result1, local02
01760     00 70 06 F6 | 	mov	result2, #0
01764     E7 F0 03 F6 | 	mov	ptra, fp
01768     F2 00 A0 FD | 	call	#popregs_
0176c                 | _hg010b_spin2_cls_ret
0176c     2D 00 64 FD | 	ret
01770                 | 
01770                 | ' 
01770                 | ' ''---------- Output a char at the cursor position, move the cursor 
01770                 | ' 
01770                 | ' pub putchar(achar) | c,x,y,l,newcpl
01770                 | _hg010b_spin2_putchar
01770     02 CA 05 F6 | 	mov	COUNT_, #2
01774     E8 00 A0 FD | 	call	#pushregs_
01778     42 91 02 F6 | 	mov	local01, arg01
0177c                 | ' 
0177c                 | ' if achar==10
0177c     0A 90 0E F2 | 	cmp	local01, #10 wz
01780                 | '   crlf()
01780     B8 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
01784                 | ' if achar==9
01784     09 90 0E F2 | 	cmp	local01, #9 wz
01788     18 00 90 5D |  if_ne	jmp	#LR__0100
0178c                 | '   cursor_x:=(cursor_x& %11110000)+16
0178c     3C 62 06 F1 | 	add	objptr, #60
01790     31 89 E2 FA | 	rdword	arg03, objptr
01794     F0 88 06 F5 | 	and	arg03, #240
01798     10 88 06 F1 | 	add	arg03, #16
0179c     31 89 52 FC | 	wrword	arg03, objptr
017a0     3C 62 86 F1 | 	sub	objptr, #60
017a4                 | LR__0100
017a4                 | '   
017a4                 | ' if (achar<>9) && (achar<>10) 
017a4     09 90 0E F2 | 	cmp	local01, #9 wz
017a8     0A 90 0E 52 |  if_ne	cmp	local01, #10 wz
017ac     A8 00 90 AD |  if_e	jmp	#LR__0101
017b0                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
017b0     3C 62 06 F1 | 	add	objptr, #60
017b4     31 85 E2 FA | 	rdword	arg01, objptr
017b8     02 62 06 F1 | 	add	objptr, #2
017bc     31 87 C2 FA | 	rdbyte	arg02, objptr
017c0     04 86 66 F0 | 	shl	arg02, #4
017c4     04 86 06 F1 | 	add	arg02, #4
017c8     03 62 06 F1 | 	add	objptr, #3
017cc     31 8B 02 FB | 	rdlong	arg04, objptr
017d0     04 62 06 F1 | 	add	objptr, #4
017d4     31 8D 02 FB | 	rdlong	arg05, objptr
017d8     45 62 86 F1 | 	sub	objptr, #69
017dc     48 89 02 F6 | 	mov	arg03, local01
017e0     34 FD BF FD | 	call	#_hg010b_spin2_putcharxycgf
017e4     04 62 06 F1 | 	add	objptr, #4
017e8     31 85 02 FB | 	rdlong	arg01, objptr
017ec     1C 00 00 FF 
017f0     5C 66 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
017f4     33 89 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
017f8     3A 62 06 F1 | 	add	objptr, #58
017fc     31 8D C2 FA | 	rdbyte	arg05, objptr
01800     46 89 02 FD | 	qmul	arg03, arg05
01804                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
01804     1C 00 00 FF 
01808     5C 66 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
0180c     02 62 86 F1 | 	sub	objptr, #2
01810     31 93 E2 FA | 	rdword	local02, objptr
01814     01 92 46 F0 | 	shr	local02, #1
01818     48 87 02 F6 | 	mov	arg02, local01
0181c     01 88 06 F6 | 	mov	arg03, #1
01820     00 8A 06 F6 | 	mov	arg04, #0
01824     01 8C 06 F6 | 	mov	arg05, #1
01828     0B 00 00 FF 
0182c     90 62 06 F1 | 	add	objptr, ##5776
01830     18 90 62 FD | 	getqx	local01
01834     49 91 02 F1 | 	add	local01, local02
01838     48 85 02 F1 | 	add	arg01, local01
0183c     64 07 B0 FD | 	call	#_psram_spin2_fill
01840                 | '   cursor_x+=2
01840     0B 00 00 FF 
01844     90 62 86 F1 | 	sub	objptr, ##5776
01848     31 93 E2 FA | 	rdword	local02, objptr
0184c     02 92 06 F1 | 	add	local02, #2
01850     31 93 52 FC | 	wrword	local02, objptr
01854     3C 62 86 F1 | 	sub	objptr, #60
01858                 | LR__0101
01858                 | ' 
01858                 | ' if cursor_x>=256
01858     3C 62 06 F1 | 	add	objptr, #60
0185c     31 93 E2 FA | 	rdword	local02, objptr
01860     3C 62 86 F1 | 	sub	objptr, #60
01864     00 93 56 F2 | 	cmps	local02, #256 wc
01868     64 00 90 CD |  if_b	jmp	#LR__0103
0186c                 | '   cursor_x:=0
0186c     3C 62 06 F1 | 	add	objptr, #60
01870     31 01 58 FC | 	wrword	#0, objptr
01874                 | '   cursor_y+=1
01874     02 62 06 F1 | 	add	objptr, #2
01878     31 93 C2 FA | 	rdbyte	local02, objptr
0187c     01 92 06 F1 | 	add	local02, #1
01880     31 93 42 FC | 	wrbyte	local02, objptr
01884                 | '   if cursor_y>st_lines-1
01884     C3 62 06 F1 | 	add	objptr, #195
01888     31 93 02 FB | 	rdlong	local02, objptr
0188c     01 92 86 F1 | 	sub	local02, #1
01890     C3 62 86 F1 | 	sub	objptr, #195
01894     31 89 C2 FA | 	rdbyte	arg03, objptr
01898     3E 62 86 F1 | 	sub	objptr, #62
0189c     49 89 5A F2 | 	cmps	arg03, local02 wcz
018a0     2C 00 90 ED |  if_be	jmp	#LR__0102
018a4                 | '     scrollup2()
018a4     00 84 06 F6 | 	mov	arg01, #0
018a8     01 00 00 FF 
018ac     58 86 06 F6 | 	mov	arg02, ##600
018b0     10 88 06 F6 | 	mov	arg03, #16
018b4     4C 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
018b8                 | '     cursor_y:=st_lines-1
018b8     01 63 06 F1 | 	add	objptr, #257
018bc     31 93 02 FB | 	rdlong	local02, objptr
018c0     01 92 86 F1 | 	sub	local02, #1
018c4     C3 62 86 F1 | 	sub	objptr, #195
018c8     31 93 42 FC | 	wrbyte	local02, objptr
018cc     3E 62 86 F1 | 	sub	objptr, #62
018d0                 | LR__0102
018d0                 | LR__0103
018d0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
018d0     3C 62 06 F1 | 	add	objptr, #60
018d4     31 87 E2 FA | 	rdword	arg02, objptr
018d8     02 86 66 F0 | 	shl	arg02, #2
018dc     02 62 06 F1 | 	add	objptr, #2
018e0     31 89 C2 FA | 	rdbyte	arg03, objptr
018e4     3E 62 86 F1 | 	sub	objptr, #62
018e8     04 88 66 F0 | 	shl	arg03, #4
018ec     04 88 06 F1 | 	add	arg03, #4
018f0     11 84 06 F6 | 	mov	arg01, #17
018f4     54 FA BF FD | 	call	#_hg010b_spin2_setspritepos
018f8     E7 F0 03 F6 | 	mov	ptra, fp
018fc     F2 00 A0 FD | 	call	#popregs_
01900                 | _hg010b_spin2_putchar_ret
01900     2D 00 64 FD | 	ret
01904                 | 
01904                 | '    
01904                 | ' ' a version for text scrolling in Basic shifted 4 lines down
01904                 | ' 
01904                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
01904                 | _hg010b_spin2_scrollup2
01904     03 CA 05 F6 | 	mov	COUNT_, #3
01908     E8 00 A0 FD | 	call	#pushregs_
0190c                 | ' 	
0190c                 | ' repeat i from 4 to 579 
0190c     04 90 06 F6 | 	mov	local01, #4
01910                 | LR__0110
01910     DD 62 06 F1 | 	add	objptr, #221
01914     31 87 02 FB | 	rdlong	arg02, objptr
01918     48 8D 02 F6 | 	mov	arg05, local01
0191c     10 8C 06 F1 | 	add	arg05, #16
01920     02 8C 66 F0 | 	shl	arg05, #2
01924     14 62 06 F1 | 	add	objptr, #20
01928     31 89 02 FB | 	rdlong	arg03, objptr
0192c     44 8D 02 FD | 	qmul	arg05, arg03
01930                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
01930     02 88 66 F0 | 	shl	arg03, #2
01934     F4 03 00 FF 
01938     00 84 06 F6 | 	mov	arg01, ##518144
0193c     0A 00 00 FF 
01940     DB 63 06 F1 | 	add	objptr, ##5595
01944     18 8C 62 FD | 	getqx	arg05
01948     46 87 02 F1 | 	add	arg02, arg05
0194c     C4 04 B0 FD | 	call	#_psram_spin2_read1
01950     0A 00 00 FF 
01954     EF 63 86 F1 | 	sub	objptr, ##5615
01958     31 87 02 FB | 	rdlong	arg02, objptr
0195c     48 8D 02 F6 | 	mov	arg05, local01
01960     02 8C 66 F0 | 	shl	arg05, #2
01964     14 62 06 F1 | 	add	objptr, #20
01968     31 89 02 FB | 	rdlong	arg03, objptr
0196c     44 8D 02 FD | 	qmul	arg05, arg03
01970                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
01970     02 88 66 F0 | 	shl	arg03, #2
01974     F4 03 00 FF 
01978     00 84 06 F6 | 	mov	arg01, ##518144
0197c     0A 00 00 FF 
01980     DB 63 06 F1 | 	add	objptr, ##5595
01984     18 8C 62 FD | 	getqx	arg05
01988     46 87 02 F1 | 	add	arg02, arg05
0198c     20 05 B0 FD | 	call	#_psram_spin2_write
01990     0B 00 00 FF 
01994     CC 62 86 F1 | 	sub	objptr, ##5836
01998     01 90 06 F1 | 	add	local01, #1
0199c     01 00 00 FF 
019a0     44 90 16 F2 | 	cmp	local01, ##580 wc
019a4     68 FF 9F CD |  if_b	jmp	#LR__0110
019a8                 | ' 
019a8                 | ' repeat i from 580 to 599
019a8     01 00 00 FF 
019ac     44 90 06 F6 | 	mov	local01, ##580
019b0                 | LR__0111
019b0                 | '    fastline(0,1023,i,write_background)   
019b0     45 62 06 F1 | 	add	objptr, #69
019b4     31 8B 02 FB | 	rdlong	arg04, objptr
019b8     45 62 86 F1 | 	sub	objptr, #69
019bc     00 84 06 F6 | 	mov	arg01, #0
019c0     09 86 CE F9 | 	bmask	arg02, #9
019c4     48 89 02 F6 | 	mov	arg03, local01
019c8     34 FA BF FD | 	call	#_hg010b_spin2_fastline
019cc     01 90 06 F1 | 	add	local01, #1
019d0     01 00 00 FF 
019d4     58 90 16 F2 | 	cmp	local01, ##600 wc
019d8     D4 FF 9F CD |  if_b	jmp	#LR__0111
019dc                 | ' repeat i from 0 to 3
019dc     00 90 06 F6 | 	mov	local01, #0
019e0                 | LR__0112
019e0                 | '    fastline(0,1023,i,write_background)      
019e0     45 62 06 F1 | 	add	objptr, #69
019e4     31 8B 02 FB | 	rdlong	arg04, objptr
019e8     45 62 86 F1 | 	sub	objptr, #69
019ec     00 84 06 F6 | 	mov	arg01, #0
019f0     09 86 CE F9 | 	bmask	arg02, #9
019f4     48 89 02 F6 | 	mov	arg03, local01
019f8     04 FA BF FD | 	call	#_hg010b_spin2_fastline
019fc     01 90 06 F1 | 	add	local01, #1
01a00     04 90 56 F2 | 	cmps	local01, #4 wc
01a04     D8 FF 9F CD |  if_b	jmp	#LR__0112
01a08                 | ' 
01a08                 | ' repeat i from 0 to 35
01a08     00 90 06 F6 | 	mov	local01, #0
01a0c                 | LR__0113
01a0c     48 8D 02 F6 | 	mov	arg05, local01
01a10     01 8C 06 F1 | 	add	arg05, #1
01a14     1C 00 00 FF 
01a18     5C 66 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
01a1c     33 89 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
01a20     44 8D 02 FD | 	qmul	arg05, arg03
01a24                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
01a24     04 62 06 F1 | 	add	objptr, #4
01a28     31 87 02 FB | 	rdlong	arg02, objptr
01a2c     1C 00 00 FF 
01a30     5C 66 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
01a34     F4 03 00 FF 
01a38     00 84 06 F6 | 	mov	arg01, ##518144
01a3c     0B 00 00 FF 
01a40     C8 62 06 F1 | 	add	objptr, ##5832
01a44     18 8C 62 FD | 	getqx	arg05
01a48     46 87 02 F1 | 	add	arg02, arg05
01a4c     C4 03 B0 FD | 	call	#_psram_spin2_read1
01a50     1C 00 00 FF 
01a54     5C 66 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
01a58     33 89 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
01a5c     44 91 02 FD | 	qmul	local01, arg03
01a60                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
01a60     0B 00 00 FF 
01a64     C8 62 86 F1 | 	sub	objptr, ##5832
01a68     31 87 02 FB | 	rdlong	arg02, objptr
01a6c     1C 00 00 FF 
01a70     5C 66 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
01a74     F4 03 00 FF 
01a78     00 84 06 F6 | 	mov	arg01, ##518144
01a7c     0B 00 00 FF 
01a80     C8 62 06 F1 | 	add	objptr, ##5832
01a84     18 8C 62 FD | 	getqx	arg05
01a88     46 87 02 F1 | 	add	arg02, arg05
01a8c     20 04 B0 FD | 	call	#_psram_spin2_write
01a90     0B 00 00 FF 
01a94     CC 62 86 F1 | 	sub	objptr, ##5836
01a98     01 90 06 F1 | 	add	local01, #1
01a9c     24 90 56 F2 | 	cmps	local01, #36 wc
01aa0     68 FF 9F CD |  if_b	jmp	#LR__0113
01aa4                 | ' repeat i from 0 to timings[7]-1
01aa4     00 90 06 F6 | 	mov	local01, #0
01aa8     1C 00 00 FF 
01aac     5C 66 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
01ab0     33 93 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
01ab4     1C 00 00 FF 
01ab8     5C 66 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
01abc     01 92 86 F1 | 	sub	local02, #1
01ac0     00 92 56 F2 | 	cmps	local02, #0 wc
01ac4     01 94 86 F6 | 	negc	local03, #1
01ac8     4A 93 02 F1 | 	add	local02, local03
01acc                 | LR__0114
01acc                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
01acc     04 62 06 F1 | 	add	objptr, #4
01ad0     31 85 02 FB | 	rdlong	arg01, objptr
01ad4     1C 00 00 FF 
01ad8     5C 66 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
01adc     33 8D 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
01ae0     1C 00 00 FF 
01ae4     5C 66 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
01ae8     46 8B 02 F6 | 	mov	arg04, arg05
01aec     03 8A 66 F0 | 	shl	arg04, #3
01af0     46 8B 02 F1 | 	add	arg04, arg05
01af4     02 8A 66 F0 | 	shl	arg04, #2
01af8     48 8B 02 F1 | 	add	arg04, local01
01afc     45 85 02 F1 | 	add	arg01, arg04
01b00     20 86 06 F6 | 	mov	arg02, #32
01b04     01 88 06 F6 | 	mov	arg03, #1
01b08     00 8A 06 F6 | 	mov	arg04, #0
01b0c     01 8C 06 F6 | 	mov	arg05, #1
01b10     0B 00 00 FF 
01b14     C8 62 06 F1 | 	add	objptr, ##5832
01b18     88 04 B0 FD | 	call	#_psram_spin2_fill
01b1c     0B 00 00 FF 
01b20     CC 62 86 F1 | 	sub	objptr, ##5836
01b24     4A 91 02 F1 | 	add	local01, local03
01b28     49 91 0A F2 | 	cmp	local01, local02 wz
01b2c     9C FF 9F 5D |  if_ne	jmp	#LR__0114
01b30     E7 F0 03 F6 | 	mov	ptra, fp
01b34     F2 00 A0 FD | 	call	#popregs_
01b38                 | _hg010b_spin2_scrollup2_ret
01b38     2D 00 64 FD | 	ret
01b3c                 | 
01b3c                 | ' 
01b3c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
01b3c                 | ' 
01b3c                 | ' pub crlf()
01b3c                 | _hg010b_spin2_crlf
01b3c                 | ' 
01b3c                 | ' cursor_x:=leading_spaces*2
01b3c     01 00 00 FF 
01b40     B6 62 06 F1 | 	add	objptr, ##694
01b44     31 89 02 FB | 	rdlong	arg03, objptr
01b48     01 88 66 F0 | 	shl	arg03, #1
01b4c     01 00 00 FF 
01b50     7A 62 86 F1 | 	sub	objptr, ##634
01b54     31 89 52 FC | 	wrword	arg03, objptr
01b58                 | ' cursor_y+=1
01b58     02 62 06 F1 | 	add	objptr, #2
01b5c     31 89 C2 FA | 	rdbyte	arg03, objptr
01b60     01 88 06 F1 | 	add	arg03, #1
01b64     31 89 42 FC | 	wrbyte	arg03, objptr
01b68                 | ' if cursor_y>st_lines-1
01b68     C3 62 06 F1 | 	add	objptr, #195
01b6c     31 89 02 FB | 	rdlong	arg03, objptr
01b70     01 88 86 F1 | 	sub	arg03, #1
01b74     C3 62 86 F1 | 	sub	objptr, #195
01b78     31 87 C2 FA | 	rdbyte	arg02, objptr
01b7c     3E 62 86 F1 | 	sub	objptr, #62
01b80     44 87 5A F2 | 	cmps	arg02, arg03 wcz
01b84     2C 00 90 ED |  if_be	jmp	#LR__0120
01b88                 | '   scrollup2()
01b88     00 84 06 F6 | 	mov	arg01, #0
01b8c     01 00 00 FF 
01b90     58 86 06 F6 | 	mov	arg02, ##600
01b94     10 88 06 F6 | 	mov	arg03, #16
01b98     68 FD BF FD | 	call	#_hg010b_spin2_scrollup2
01b9c                 | '   cursor_y:=st_lines-1
01b9c     01 63 06 F1 | 	add	objptr, #257
01ba0     31 89 02 FB | 	rdlong	arg03, objptr
01ba4     01 88 86 F1 | 	sub	arg03, #1
01ba8     C3 62 86 F1 | 	sub	objptr, #195
01bac     31 89 42 FC | 	wrbyte	arg03, objptr
01bb0     3E 62 86 F1 | 	sub	objptr, #62
01bb4                 | LR__0120
01bb4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
01bb4     3C 62 06 F1 | 	add	objptr, #60
01bb8     31 87 E2 FA | 	rdword	arg02, objptr
01bbc     02 86 66 F0 | 	shl	arg02, #2
01bc0     02 62 06 F1 | 	add	objptr, #2
01bc4     31 89 C2 FA | 	rdbyte	arg03, objptr
01bc8     3E 62 86 F1 | 	sub	objptr, #62
01bcc     04 88 66 F0 | 	shl	arg03, #4
01bd0     04 88 06 F1 | 	add	arg03, #4
01bd4     11 84 06 F6 | 	mov	arg01, #17
01bd8     70 F7 BF FD | 	call	#_hg010b_spin2_setspritepos
01bdc                 | _hg010b_spin2_crlf_ret
01bdc     2D 00 64 FD | 	ret
01be0                 | 
01be0                 | ' 
01be0                 | ' '..............................................................................
01be0                 | ' 
01be0                 | ' {{
01be0                 | ' }}
01be0                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
01be0                 | _psram_spin2_startx
01be0     04 CA 05 F6 | 	mov	COUNT_, #4
01be4     E8 00 A0 FD | 	call	#pushregs_
01be8     42 91 02 F6 | 	mov	local01, arg01
01bec     44 93 02 F6 | 	mov	local02, arg03
01bf0     45 95 02 F6 | 	mov	local03, arg04
01bf4                 | '     stop() ' restart driver if required
01bf4     5C 01 B0 FD | 	call	#_psram_spin2_stop
01bf8     00 90 0E F2 | 	cmp	local01, #0 wz
01bfc     14 90 06 AB |  if_e	rdlong	local01, #20
01c00     48 87 52 F6 | 	abs	arg02, local01 wc
01c04     A1 07 00 FF 
01c08     40 86 16 FD | 	qdiv	arg02, ##1000000
01c0c                 | ' 
01c0c                 | '     ' use current frequency if none specified
01c0c                 | ' 
01c0c                 | '     if freq == 0 
01c0c                 | '         freq := clkfreq 
01c0c                 | ' 
01c0c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
01c0c                 | ' 
01c0c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
01c0c                 | '     if burst < 0
01c0c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
01c0c     18 86 62 FD | 	getqx	arg02
01c10     43 8B 82 F6 | 	negc	arg04, arg02
01c14     03 8A 66 F0 | 	shl	arg04, #3
01c18     84 8A 86 F1 | 	sub	arg04, #132
01c1c     04 8A 46 F0 | 	shr	arg04, #4
01c20     04 8A 66 F0 | 	shl	arg04, #4
01c24     00 8A 56 F2 | 	cmps	arg04, #0 wc
01c28     0E 6E 66 C6 |  if_b	neg	result1, #14
01c2c     18 01 90 CD |  if_b	jmp	#LR__0134
01c30                 | ' 
01c30                 | '     ' compute the input delay
01c30                 | ' 
01c30                 | '     if delay <= 0
01c30     01 92 56 F2 | 	cmps	local02, #1 wc
01c34     10 00 90 3D |  if_ae	jmp	#LR__0130
01c38                 | '         delay := lookupDelay(freq)
01c38     48 85 02 F6 | 	mov	arg01, local01
01c3c     18 05 B0 FD | 	call	#_psram_spin2_lookupDelay
01c40     37 93 02 F6 | 	mov	local02, result1
01c44     04 00 90 FD | 	jmp	#LR__0131
01c48                 | LR__0130
01c48                 | '     else
01c48                 | '         delay <#= $f ' limit to 15
01c48     0F 92 66 F3 | 	fles	local02, #15
01c4c                 | LR__0131
01c4c                 | ' 
01c4c                 | '     ' create our lock
01c4c                 | ' 
01c4c                 | '     driverlock := LOCKNEW()  
01c4c     00 6E 06 F6 | 	mov	result1, #0
01c50     04 6E 62 FD | 	locknew	result1
01c54     04 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #260
01c58     35 6F 62 FC | 	wrlong	result1, ptr__psram_spin2_dat__
01c5c                 | '     if driverlock == -1
01c5c     04 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
01c60     FF FF 7F FF 
01c64     FF 6F 0E F2 | 	cmp	result1, ##-1 wz
01c68                 | '         return ERR_NO_LOCK
01c68     1A 6E 66 A6 |  if_e	neg	result1, #26
01c6c     D8 00 90 AD |  if_e	jmp	#LR__0134
01c70                 | ' 
01c70                 | '     ' patch in the proper data and HUB addresses to the startup structure
01c70                 | ' 
01c70                 | '     long[@startupData][0]:=clkfreq
01c70     14 90 06 FB | 	rdlong	local01, #20
01c74     28 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #296
01c78     35 91 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
01c7c                 | ' '    long[@startupData][1]:=$1000_0000
01c7c                 | '     long[@startupData][5]:=@deviceData
01c7c     35 91 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
01c80     20 90 06 F1 | 	add	local01, #32
01c84     35 87 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
01c88     14 86 06 F1 | 	add	arg02, #20
01c8c     43 91 62 FC | 	wrlong	local01, arg02
01c90                 | '     long[@startupData][6]:=@qosData
01c90     35 91 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
01c94     A0 90 06 F1 | 	add	local01, #160
01c98     35 87 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
01c9c     18 86 06 F1 | 	add	arg02, #24
01ca0     43 91 62 FC | 	wrlong	local01, arg02
01ca4                 | '     long[@startupData][7]:=$7FF00
01ca4     35 91 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
01ca8     1C 90 06 F1 | 	add	local01, #28
01cac     FF 03 80 FF 
01cb0     48 01 6A FC | 	wrlong	##524032, local01
01cb4                 | ' 
01cb4                 | '     ' setup some default bank and QoS parameter values
01cb4                 | ' 
01cb4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
01cb4     20 6A 06 F1 | 	add	ptr__psram_spin2_dat__, #32
01cb8     35 85 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
01cbc     48 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #328
01cc0     10 8A 66 F0 | 	shl	arg04, #16
01cc4     0C 92 66 F0 | 	shl	local02, #12
01cc8     49 8B 42 F5 | 	or	arg04, local02
01ccc     18 8A 46 F5 | 	or	arg04, #24
01cd0     45 87 02 F6 | 	mov	arg02, arg04
01cd4     02 88 06 F6 | 	mov	arg03, #2
01cd8     E0 00 A0 FD | 	call	#\builtin_longfill_
01cdc                 | '     longfill(@qosData, $FFFF0000, 8)
01cdc     35 85 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
01ce0     C8 85 06 F1 | 	add	arg01, #456
01ce4     07 88 06 F6 | 	mov	arg03, #7
01ce8     28 88 62 FD | 	setq	arg03
01cec     80 FF FF FF 
01cf0     42 01 68 FC | 	wrlong	##-65536, arg01
01cf4                 | ' 
01cf4                 | '     ' get the address of the PSRAM memory driver so we can start it
01cf4                 | ' 
01cf4                 | '     driverAddr:= driver.getDriverAddr()
01cf4                 | '     return @driver_start
01cf4     34 87 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
01cf8     20 86 06 F1 | 	add	arg02, #32
01cfc                 | ' 
01cfc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
01cfc                 | ' 
01cfc                 | '     if desiredcog < 0
01cfc     00 94 56 F2 | 	cmps	local03, #0 wc
01d00                 | '         desiredcog := NEWCOG
01d00     10 94 06 C6 |  if_b	mov	local03, #16
01d04                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
01d04     35 89 02 F6 | 	mov	arg03, ptr__psram_spin2_dat__
01d08     28 89 06 F1 | 	add	arg03, #296
01d0c     4A 97 02 F6 | 	mov	local04, local03
01d10     28 88 62 FD | 	setq	arg03
01d14     43 97 F2 FC | 	coginit	local04, arg02 wc
01d18     01 96 66 C6 |  if_b	neg	local04, #1
01d1c     00 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01d20     35 97 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
01d24     00 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01d28     D7 08 48 FB | 	callpa	#(@LR__0133-@LR__0132)>>2,fcache_load_ptr_
01d2c                 | '     repeat until long[@startupData] == 0 
01d2c                 | LR__0132
01d2c     35 97 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
01d30     28 97 06 F1 | 	add	local04, #296
01d34     4B 97 0A FB | 	rdlong	local04, local04 wz
01d38     F0 FF 9F 5D |  if_ne	jmp	#LR__0132
01d3c                 | LR__0133
01d3c                 | ' 
01d3c                 | '     return drivercog
01d3c     00 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01d40     35 6F 02 FB | 	rdlong	result1, ptr__psram_spin2_dat__
01d44     00 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01d48                 | LR__0134
01d48     E7 F0 03 F6 | 	mov	ptra, fp
01d4c     F2 00 A0 FD | 	call	#popregs_
01d50                 | _psram_spin2_startx_ret
01d50     2D 00 64 FD | 	ret
01d54                 | 
01d54                 | ' 
01d54                 | ' '..............................................................................
01d54                 | ' 
01d54                 | ' {{
01d54                 | ' }}
01d54                 | ' PUB stop() : i
01d54                 | _psram_spin2_stop
01d54     00 74 06 F6 | 	mov	_var01, #0
01d58                 | '     if drivercog <> -1
01d58     00 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01d5c     35 85 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
01d60     00 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01d64     FF FF 7F FF 
01d68     FF 85 0E F2 | 	cmp	arg01, ##-1 wz
01d6c     70 00 90 AD |  if_e	jmp	#LR__0143
01d70                 | '         cogstop(drivercog) ' a rather brutal stop
01d70     00 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01d74     35 85 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
01d78     00 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01d7c     03 84 62 FD | 	cogstop	arg01
01d80     D7 26 48 FB | 	callpa	#(@LR__0142-@LR__0140)>>2,fcache_load_ptr_
01d84                 | '         repeat i from 0 to 7
01d84                 | LR__0140
01d84                 | '             if long[$7FF00][i*3] < 0
01d84     3A 6F 02 F6 | 	mov	result1, _var01
01d88     01 6E 66 F0 | 	shl	result1, #1
01d8c     3A 6F 02 F1 | 	add	result1, _var01
01d90     02 6E 66 F0 | 	shl	result1, #2
01d94     FF 03 00 FF 
01d98     00 6F 06 F1 | 	add	result1, ##524032
01d9c     37 6F 02 FB | 	rdlong	result1, result1
01da0     00 6E 56 F2 | 	cmps	result1, #0 wc
01da4     1C 00 90 3D |  if_ae	jmp	#LR__0141
01da8                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
01da8     3A 6F 02 F6 | 	mov	result1, _var01
01dac     01 6E 66 F0 | 	shl	result1, #1
01db0     3A 6F 02 F1 | 	add	result1, _var01
01db4     02 6E 66 F0 | 	shl	result1, #2
01db8     FF 03 00 FF 
01dbc     00 6F 06 F1 | 	add	result1, ##524032
01dc0     37 21 68 FC | 	wrlong	#16, result1
01dc4                 | LR__0141
01dc4     01 74 06 F1 | 	add	_var01, #1
01dc8     08 74 56 F2 | 	cmps	_var01, #8 wc
01dcc     B4 FF 9F CD |  if_b	jmp	#LR__0140
01dd0                 | LR__0142
01dd0                 | '         drivercog := -1
01dd0     00 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01dd4     FF FF FF FF 
01dd8     35 FF 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
01ddc     00 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01de0                 | LR__0143
01de0                 | '     if driverlock <> -1
01de0     04 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #260
01de4     35 77 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
01de8     04 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
01dec     FF FF 7F FF 
01df0     FF 77 0E F2 | 	cmp	_var02, ##-1 wz
01df4                 | '         LOCKRET(driverlock)
01df4     04 6B 06 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
01df8     35 85 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
01dfc     05 84 62 5D |  if_ne	lockret	arg01
01e00                 | '         driverlock := -1
01e00     FF FF FF 5F 
01e04     35 FF 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
01e08     04 6B 86 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
01e0c     3A 6F 02 F6 | 	mov	result1, _var01
01e10                 | _psram_spin2_stop_ret
01e10     2D 00 64 FD | 	ret
01e14                 | 
01e14                 | ' 
01e14                 | ' '..............................................................................
01e14                 | ' 
01e14                 | ' {{
01e14                 | ' }}
01e14                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
01e14                 | _psram_spin2_read1
01e14                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
01e14                 | '     if drivercog == -1 ' driver must be running
01e14     00 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01e18     35 75 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
01e1c     00 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01e20     FF FF 7F FF 
01e24     FF 75 0E F2 | 	cmp	_var01, ##-1 wz
01e28                 | '         return ERR_INACTIVE
01e28     0F 6E 66 A6 |  if_e	neg	result1, #15
01e2c     7C 00 90 AD |  if_e	jmp	#LR__0151
01e30                 | '     if count == 0 ' don't even bother reading
01e30     00 88 0E F2 | 	cmp	arg03, #0 wz
01e34                 | '         return 0
01e34     00 6E 06 A6 |  if_e	mov	result1, #0
01e38     70 00 90 AD |  if_e	jmp	#LR__0151
01e3c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
01e3c     00 6E 06 F6 | 	mov	result1, #0
01e40     01 6E 62 FD | 	cogid	result1
01e44     37 75 02 F6 | 	mov	_var01, result1
01e48     01 74 66 F0 | 	shl	_var01, #1
01e4c     37 75 02 F1 | 	add	_var01, result1
01e50     02 74 66 F0 | 	shl	_var01, #2
01e54     FF 03 00 FF 
01e58     00 77 06 F6 | 	mov	_var02, ##524032
01e5c     3A 77 02 F1 | 	add	_var02, _var01
01e60                 | '     if long[mailbox] < 0
01e60     3B 75 02 FB | 	rdlong	_var01, _var02
01e64     00 74 56 F2 | 	cmps	_var01, #0 wc
01e68                 | '         return ERR_MAILBOX_BUSY
01e68     1C 6E 66 C6 |  if_b	neg	result1, #28
01e6c     3C 00 90 CD |  if_b	jmp	#LR__0151
01e70                 | '     long[mailbox][2] := count
01e70     08 76 06 F1 | 	add	_var02, #8
01e74     3B 89 62 FC | 	wrlong	arg03, _var02
01e78                 | '     long[mailbox][1] := dstHubAddr
01e78     04 76 86 F1 | 	sub	_var02, #4
01e7c     3B 85 62 FC | 	wrlong	arg01, _var02
01e80     04 76 86 F1 | 	sub	_var02, #4
01e84                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
01e84     43 79 02 F6 | 	mov	_var03, arg02
01e88     D9 78 06 F4 | 	bitl	_var03, #217
01e8c     00 00 58 FF 
01e90     00 74 06 F6 | 	mov	_var01, ##-1342177280
01e94     3C 75 02 F1 | 	add	_var01, _var03
01e98     3B 75 62 FC | 	wrlong	_var01, _var02
01e9c                 | '     repeat
01e9c                 | LR__0150
01e9c                 | '         result := long[mailbox]    
01e9c     3B 79 02 FB | 	rdlong	_var03, _var02
01ea0     00 78 56 F2 | 	cmps	_var03, #0 wc
01ea4     F4 FF 9F CD |  if_b	jmp	#LR__0150
01ea8                 | '     while result < 0   
01ea8                 | '     return -result                       'return success or error
01ea8     3C 6F 62 F6 | 	neg	result1, _var03
01eac                 | LR__0151
01eac                 | _psram_spin2_read1_ret
01eac     2D 00 64 FD | 	ret
01eb0                 | 
01eb0                 | ' 
01eb0                 | ' '..............................................................................
01eb0                 | ' 
01eb0                 | ' {{
01eb0                 | ' }}
01eb0                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
01eb0                 | _psram_spin2_write
01eb0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
01eb0                 | '     if drivercog == -1 ' driver must be running
01eb0     00 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01eb4     35 75 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
01eb8     00 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01ebc     FF FF 7F FF 
01ec0     FF 75 0E F2 | 	cmp	_var01, ##-1 wz
01ec4                 | '         return ERR_INACTIVE
01ec4     0F 6E 66 A6 |  if_e	neg	result1, #15
01ec8     7C 00 90 AD |  if_e	jmp	#LR__0161
01ecc                 | '     if count == 0 ' don't even bother writing
01ecc     00 88 0E F2 | 	cmp	arg03, #0 wz
01ed0                 | '         return 0
01ed0     00 6E 06 A6 |  if_e	mov	result1, #0
01ed4     70 00 90 AD |  if_e	jmp	#LR__0161
01ed8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
01ed8     00 6E 06 F6 | 	mov	result1, #0
01edc     01 6E 62 FD | 	cogid	result1
01ee0     37 75 02 F6 | 	mov	_var01, result1
01ee4     01 74 66 F0 | 	shl	_var01, #1
01ee8     37 75 02 F1 | 	add	_var01, result1
01eec     02 74 66 F0 | 	shl	_var01, #2
01ef0     FF 03 00 FF 
01ef4     00 77 06 F6 | 	mov	_var02, ##524032
01ef8     3A 77 02 F1 | 	add	_var02, _var01
01efc                 | '     if long[mailbox] < 0
01efc     3B 75 02 FB | 	rdlong	_var01, _var02
01f00     00 74 56 F2 | 	cmps	_var01, #0 wc
01f04                 | '         return ERR_MAILBOX_BUSY
01f04     1C 6E 66 C6 |  if_b	neg	result1, #28
01f08     3C 00 90 CD |  if_b	jmp	#LR__0161
01f0c                 | '     long[mailbox][2] := count
01f0c     08 76 06 F1 | 	add	_var02, #8
01f10     3B 89 62 FC | 	wrlong	arg03, _var02
01f14                 | '     long[mailbox][1] := srcHubAddr
01f14     04 76 86 F1 | 	sub	_var02, #4
01f18     3B 85 62 FC | 	wrlong	arg01, _var02
01f1c     04 76 86 F1 | 	sub	_var02, #4
01f20                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
01f20     43 79 02 F6 | 	mov	_var03, arg02
01f24     D9 78 06 F4 | 	bitl	_var03, #217
01f28     00 00 78 FF 
01f2c     00 74 06 F6 | 	mov	_var01, ##-268435456
01f30     3C 75 02 F1 | 	add	_var01, _var03
01f34     3B 75 62 FC | 	wrlong	_var01, _var02
01f38                 | '     repeat
01f38                 | LR__0160
01f38                 | '         result := long[mailbox]    
01f38     3B 79 02 FB | 	rdlong	_var03, _var02
01f3c     00 78 56 F2 | 	cmps	_var03, #0 wc
01f40     F4 FF 9F CD |  if_b	jmp	#LR__0160
01f44                 | '     while result < 0   
01f44                 | '     return -result                       'return success or error
01f44     3C 6F 62 F6 | 	neg	result1, _var03
01f48                 | LR__0161
01f48                 | _psram_spin2_write_ret
01f48     2D 00 64 FD | 	ret
01f4c                 | 
01f4c                 | ' 
01f4c                 | ' {{
01f4c                 | ' }}
01f4c                 | ' PUB execList(m, listptr, nonBlocking) : r 
01f4c                 | _psram_spin2_execList
01f4c                 | '     ' check if non blocking is desired and we already have a pending request active
01f4c                 | '     if nonBlocking and (long[m] & $80000000) 
01f4c     00 88 0E F2 | 	cmp	arg03, #0 wz
01f50     42 75 02 5B |  if_ne	rdlong	_var01, arg01
01f54     1F 74 2E 54 |  if_ne	testbn	_var01, #31 wz
01f58                 | '        return ERR_WOULD_BLOCK
01f58     18 6E 66 56 |  if_ne	neg	result1, #24
01f5c     40 00 90 5D |  if_ne	jmp	#_psram_spin2_execList_ret
01f60                 | ' 
01f60                 | '     ' special case - user has run a non-blocking list before this but it is still running 
01f60                 | '     ' so don't start the new list until the last one has ended
01f60                 | '     repeat until long[m] >= 0       
01f60                 | LR__0170
01f60     42 75 02 FB | 	rdlong	_var01, arg01
01f64     00 74 56 F2 | 	cmps	_var01, #0 wc
01f68     F4 FF 9F CD |  if_b	jmp	#LR__0170
01f6c                 | ' 
01f6c                 | '     ' setup the new list request address in HUB and trigger it to be executed
01f6c                 | '     long[m][1] := (listptr & $fffff) 
01f6c     74 87 06 F4 | 	bitl	arg02, #372
01f70     04 84 06 F1 | 	add	arg01, #4
01f74     42 87 62 FC | 	wrlong	arg02, arg01
01f78     04 84 86 F1 | 	sub	arg01, #4
01f7c                 | '     long[m] := -1 ' trigger
01f7c     FF FF FF FF 
01f80     42 FF 6B FC | 	wrlong	##-1, arg01
01f84                 | '     ' if non-blocking don't wait for the result, return immediately
01f84                 | '     if nonBlocking
01f84     00 88 0E F2 | 	cmp	arg03, #0 wz
01f88                 | '         return 0 
01f88     00 6E 06 56 |  if_ne	mov	result1, #0
01f8c     10 00 90 5D |  if_ne	jmp	#_psram_spin2_execList_ret
01f90                 | '     ' otherwise wait for the result
01f90                 | '     repeat
01f90                 | LR__0171
01f90                 | '         r := long[m]
01f90     42 75 02 FB | 	rdlong	_var01, arg01
01f94     00 74 56 F2 | 	cmps	_var01, #0 wc
01f98     F4 FF 9F CD |  if_b	jmp	#LR__0171
01f9c                 | '     while r < 0
01f9c                 | '     'send("got result", 13,10)
01f9c                 | '     return -r
01f9c     3A 6F 62 F6 | 	neg	result1, _var01
01fa0                 | _psram_spin2_execList_ret
01fa0     2D 00 64 FD | 	ret
01fa4                 | 
01fa4                 | ' 
01fa4                 | ' ' generalized fill
01fa4                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
01fa4                 | _psram_spin2_fill
01fa4     42 75 02 F6 | 	mov	_var01, arg01
01fa8     43 77 02 F6 | 	mov	_var02, arg02
01fac     44 79 02 F6 | 	mov	_var03, arg03
01fb0     46 7B 02 F6 | 	mov	_var04, arg05
01fb4                 | '     case datasize 
01fb4     01 7A 86 F1 | 	sub	_var04, #1
01fb8     04 7A 26 F3 | 	fle	_var04, #4
01fbc     30 7A 62 FD | 	jmprel	_var04
01fc0                 | LR__0180
01fc0     10 00 90 FD | 	jmp	#LR__0181
01fc4     18 00 90 FD | 	jmp	#LR__0182
01fc8     2C 00 90 FD | 	jmp	#LR__0184
01fcc     1C 00 90 FD | 	jmp	#LR__0183
01fd0     24 00 90 FD | 	jmp	#LR__0184
01fd4                 | LR__0181
01fd4                 | '         1: req := driver.R_WRITEBYTE
01fd4     00 00 60 FF 
01fd8     00 7C 06 F6 | 	mov	_var05, ##-1073741824
01fdc     20 00 90 FD | 	jmp	#LR__0185
01fe0                 | LR__0182
01fe0                 | '         2: req := driver.R_WRITEWORD
01fe0     00 00 68 FF 
01fe4     00 7C 06 F6 | 	mov	_var05, ##-805306368
01fe8     14 00 90 FD | 	jmp	#LR__0185
01fec                 | LR__0183
01fec                 | '         4: req := driver.R_WRITELONG
01fec     00 00 70 FF 
01ff0     00 7C 06 F6 | 	mov	_var05, ##-536870912
01ff4     08 00 90 FD | 	jmp	#LR__0185
01ff8                 | LR__0184
01ff8                 | '         other : return ERR_INVALID
01ff8     06 6E 66 F6 | 	neg	result1, #6
01ffc     94 00 90 FD | 	jmp	#LR__0187
02000                 | LR__0185
02000                 | '     if count == 0   ' nothing to do
02000     00 78 0E F2 | 	cmp	_var03, #0 wz
02004                 | '         return 0
02004     00 6E 06 A6 |  if_e	mov	result1, #0
02008     88 00 90 AD |  if_e	jmp	#LR__0187
0200c                 | '     if drivercog == -1
0200c     00 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #256
02010     35 7B 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
02014     00 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
02018     FF FF 7F FF 
0201c     FF 7B 0E F2 | 	cmp	_var04, ##-1 wz
02020                 | '         return ERR_INACTIVE
02020     0F 6E 66 A6 |  if_e	neg	result1, #15
02024     6C 00 90 AD |  if_e	jmp	#LR__0187
02028                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
02028     00 6E 06 F6 | 	mov	result1, #0
0202c     01 6E 62 FD | 	cogid	result1
02030     37 7B 02 F6 | 	mov	_var04, result1
02034     01 7A 66 F0 | 	shl	_var04, #1
02038     37 7B 02 F1 | 	add	_var04, result1
0203c     02 7A 66 F0 | 	shl	_var04, #2
02040     FF 03 00 FF 
02044     00 7F 06 F6 | 	mov	_var06, ##524032
02048     3D 7F 02 F1 | 	add	_var06, _var04
0204c                 | '     if long[mailbox] < 0
0204c     3F 7B 02 FB | 	rdlong	_var04, _var06
02050     00 7A 56 F2 | 	cmps	_var04, #0 wc
02054                 | '         return ERR_MAILBOX_BUSY
02054     1C 6E 66 C6 |  if_b	neg	result1, #28
02058     38 00 90 CD |  if_b	jmp	#LR__0187
0205c                 | '     long[mailbox][2] := count
0205c     08 7E 06 F1 | 	add	_var06, #8
02060     3F 79 62 FC | 	wrlong	_var03, _var06
02064                 | '     long[mailbox][1] := pattern
02064     04 7E 86 F1 | 	sub	_var06, #4
02068     3F 77 62 FC | 	wrlong	_var02, _var06
0206c     04 7E 86 F1 | 	sub	_var06, #4
02070                 | '     long[mailbox] := req + (addr & $1ffffff)
02070     3E 81 02 F6 | 	mov	_var07, _var05
02074     3A 83 02 F6 | 	mov	_var08, _var01
02078     D9 82 06 F4 | 	bitl	_var08, #217
0207c     41 81 02 F1 | 	add	_var07, _var08
02080     3F 81 62 FC | 	wrlong	_var07, _var06
02084                 | '     repeat
02084                 | LR__0186
02084                 | '         r := long[mailbox]
02084     3F 83 02 FB | 	rdlong	_var08, _var06
02088     00 82 56 F2 | 	cmps	_var08, #0 wc
0208c     F4 FF 9F CD |  if_b	jmp	#LR__0186
02090                 | '     while r < 0
02090                 | '     return -r                  ' return 0 for success or negated error code
02090     41 6F 62 F6 | 	neg	result1, _var08
02094                 | LR__0187
02094                 | _psram_spin2_fill_ret
02094     2D 00 64 FD | 	ret
02098                 | 
02098                 | ' 
02098                 | ' '..............................................................................
02098                 | ' 
02098                 | ' {{
02098                 | ' }}
02098                 | ' PUB setQos(cog, qos) : result | mailbox
02098                 | _psram_spin2_setQos
02098     42 75 02 F6 | 	mov	_var01, arg01
0209c                 | '     if drivercog == -1 ' driver must be running
0209c     00 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #256
020a0     35 77 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
020a4     00 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
020a8     FF FF 7F FF 
020ac     FF 77 0E F2 | 	cmp	_var02, ##-1 wz
020b0                 | '         return ERR_INACTIVE
020b0     0F 6E 66 A6 |  if_e	neg	result1, #15
020b4     9C 00 90 AD |  if_e	jmp	#LR__0194
020b8                 | '     if cog < 0 or cog > 7 ' enforce cog id range
020b8     00 74 56 F2 | 	cmps	_var01, #0 wc
020bc     08 00 90 CD |  if_b	jmp	#LR__0190
020c0     08 74 56 F2 | 	cmps	_var01, #8 wc
020c4     08 00 90 CD |  if_b	jmp	#LR__0191
020c8                 | LR__0190
020c8                 | '         return ERR_INVALID
020c8     06 6E 66 F6 | 	neg	result1, #6
020cc     84 00 90 FD | 	jmp	#LR__0194
020d0                 | LR__0191
020d0                 | '     long[@qosData][cog] := qos & !$1ff
020d0     FF 87 26 F5 | 	andn	arg02, #511
020d4     C8 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #456
020d8     02 74 66 F0 | 	shl	_var01, #2
020dc     35 75 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
020e0     3A 87 62 FC | 	wrlong	arg02, _var01
020e4                 | '     mailbox := $7FF00 + drivercog*12
020e4     C8 6A 86 F1 | 	sub	ptr__psram_spin2_dat__, #200
020e8     35 79 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
020ec     3C 7B 02 F6 | 	mov	_var04, _var03
020f0     01 7A 66 F0 | 	shl	_var04, #1
020f4     3C 7B 02 F1 | 	add	_var04, _var03
020f8     02 7A 66 F0 | 	shl	_var04, #2
020fc     FF 03 00 FF 
02100     00 7D 06 F6 | 	mov	_var05, ##524032
02104     3D 7D 02 F1 | 	add	_var05, _var04
02108                 | '     repeat until LOCKTRY(driverlock)
02108     04 6A 06 F1 | 	add	ptr__psram_spin2_dat__, #4
0210c                 | LR__0192
0210c     35 85 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
02110     06 84 72 FD | 	locktry	arg01 wc
02114     F4 FF 9F 3D |  if_ae	jmp	#LR__0192
02118     04 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
0211c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
0211c     00 7A 06 F6 | 	mov	_var04, #0
02120     01 7A 62 FD | 	cogid	_var04
02124     00 00 78 FF 
02128     00 76 06 F6 | 	mov	_var02, ##-268435456
0212c     3D 77 02 F1 | 	add	_var02, _var04
02130     3E 77 62 FC | 	wrlong	_var02, _var05
02134                 | '     repeat while long[mailbox] < 0
02134                 | LR__0193
02134     3E 77 02 FB | 	rdlong	_var02, _var05
02138     00 76 56 F2 | 	cmps	_var02, #0 wc
0213c     F4 FF 9F CD |  if_b	jmp	#LR__0193
02140                 | '     LOCKREL(driverlock)
02140     04 6B 06 F1 | 	add	ptr__psram_spin2_dat__, #260
02144     35 85 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
02148     04 6B 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
0214c     07 84 72 FD | 	lockrel	arg01 wc
02150     00 6E 06 F6 | 	mov	result1, #0
02154                 | LR__0194
02154                 | _psram_spin2_setQos_ret
02154     2D 00 64 FD | 	ret
02158                 | 
02158                 | ' 
02158                 | ' '..............................................................................
02158                 | ' 
02158                 | ' {{
02158                 | ' }}
02158                 | ' PRI lookupDelay(freq) : delay | profile
02158                 | _psram_spin2_lookupDelay
02158                 | '     profile := @delayTable
02158     35 75 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
0215c     08 75 06 F1 | 	add	_var01, #264
02160                 | '     delay := long[profile][0]
02160     3A 77 02 FB | 	rdlong	_var02, _var01
02164     D7 16 48 FB | 	callpa	#(@LR__0201-@LR__0200)>>2,fcache_load_ptr_
02168                 | '     repeat while long[profile][1] 
02168                 | LR__0200
02168     04 74 06 F1 | 	add	_var01, #4
0216c     3A 6F 0A FB | 	rdlong	result1, _var01 wz
02170     04 74 86 F1 | 	sub	_var01, #4
02174     1C 00 90 AD |  if_e	jmp	#LR__0202
02178                 | '         if freq +< long[profile][1] 
02178     04 74 06 F1 | 	add	_var01, #4
0217c     3A 6F 02 FB | 	rdlong	result1, _var01
02180     04 74 86 F1 | 	sub	_var01, #4
02184     37 85 12 F2 | 	cmp	arg01, result1 wc
02188                 | '             quit
02188                 | '         profile += 4
02188     04 74 06 31 |  if_ae	add	_var01, #4
0218c                 | '         delay++
0218c     01 76 06 31 |  if_ae	add	_var02, #1
02190     D4 FF 9F 3D |  if_ae	jmp	#LR__0200
02194                 | LR__0201
02194                 | LR__0202
02194     3B 6F 02 F6 | 	mov	result1, _var02
02198                 | _psram_spin2_lookupDelay_ret
02198     2D 00 64 FD | 	ret
0219c                 | hubexit
0219c     C1 00 80 FD | 	jmp	#cogexit
021a0                 | 
021a0                 | __system___setbaud
021a0     14 AA 06 FB | 	rdlong	muldiva_, #20
021a4     42 AD 02 F6 | 	mov	muldivb_, arg01
021a8     FA 00 A0 FD | 	call	#divide_
021ac     D7 06 48 FB | 	callpa	#(@LR__0211-@LR__0210)>>2,fcache_load_ptr_
021b0                 | LR__0210
021b0     3E 6E 9E FA | 	rdpin	result1, #62 wc
021b4     38 71 A2 F1 | 	subx	result2, result2
021b8     F4 FF 9F CD |  if_b	jmp	#LR__0210
021bc                 | LR__0211
021bc     40 7C 64 FD | 	dirl	#62
021c0     40 7E 64 FD | 	dirl	#63
021c4     32 AD 62 FC | 	wrlong	muldivb_, ptr___system__dat__
021c8     10 AC 66 F0 | 	shl	muldivb_, #16
021cc     07 86 06 F6 | 	mov	arg02, #7
021d0     56 87 02 F1 | 	add	arg02, muldivb_
021d4     3E F8 0C FC | 	wrpin	#124, #62
021d8     3E 86 16 FC | 	wxpin	arg02, #62
021dc     3F 7C 0C FC | 	wrpin	#62, #63
021e0     14 86 06 F1 | 	add	arg02, #20
021e4     3F 86 16 FC | 	wxpin	arg02, #63
021e8     41 7C 64 FD | 	dirh	#62
021ec     41 7E 64 FD | 	dirh	#63
021f0                 | __system___setbaud_ret
021f0     2D 00 64 FD | 	ret
021f4                 | 
021f4                 | __system___txraw
021f4     01 CA 05 F6 | 	mov	COUNT_, #1
021f8     E8 00 A0 FD | 	call	#pushregs_
021fc     42 91 02 F6 | 	mov	local01, arg01
02200     D7 06 48 FB | 	callpa	#(@LR__0221-@LR__0220)>>2,fcache_load_ptr_
02204                 | LR__0220
02204     3E 6E 9E FA | 	rdpin	result1, #62 wc
02208     38 71 A2 F1 | 	subx	result2, result2
0220c     F4 FF 9F CD |  if_b	jmp	#LR__0220
02210                 | LR__0221
02210     32 6F 0A FB | 	rdlong	result1, ptr___system__dat__ wz
02214     42 0F 00 AF 
02218     80 84 06 A6 |  if_e	mov	arg01, ##2000000
0221c     80 FF BF AD |  if_e	call	#__system___setbaud
02220     58 7C 64 FD | 	drvl	#62
02224     3E 90 26 FC | 	wypin	local01, #62
02228     01 6E 06 F6 | 	mov	result1, #1
0222c     E7 F0 03 F6 | 	mov	ptra, fp
02230     F2 00 A0 FD | 	call	#popregs_
02234                 | __system___txraw_ret
02234     2D 00 64 FD | 	ret
02238                 | 
02238                 | __system___rxraw
02238     0D CA 05 F6 | 	mov	COUNT_, #13
0223c     E8 00 A0 FD | 	call	#pushregs_
02240     42 91 02 F6 | 	mov	local01, arg01
02244     32 93 0A FB | 	rdlong	local02, ptr___system__dat__ wz
02248     42 0F 00 AF 
0224c     80 84 06 A6 |  if_e	mov	arg01, ##2000000
02250     4C FF BF AD |  if_e	call	#__system___setbaud
02254     00 90 0E F2 | 	cmp	local01, #0 wz
02258     20 00 90 AD |  if_e	jmp	#LR__0230
0225c     14 94 06 FB | 	rdlong	local03, #20
02260     0A 94 46 F0 | 	shr	local03, #10
02264     4A 91 02 FD | 	qmul	local01, local03
02268     1A 6E 62 FD | 	getct	result1
0226c     18 96 62 FD | 	getqx	local04
02270     4B 6F 02 F1 | 	add	result1, local04
02274     37 99 02 F6 | 	mov	local05, result1
02278     04 00 90 FD | 	jmp	#LR__0231
0227c                 | LR__0230
0227c     00 98 06 F6 | 	mov	local05, #0
02280                 | LR__0231
02280     01 9A 66 F6 | 	neg	local06, #1
02284     3F 9C 06 F6 | 	mov	local07, #63
02288     00 9E 06 F6 | 	mov	local08, #0
0228c     04 64 06 F1 | 	add	ptr___system__dat__, #4
02290     32 A1 02 FB | 	rdlong	local09, ptr___system__dat__
02294     04 64 86 F1 | 	sub	ptr___system__dat__, #4
02298                 | LR__0232
02298     08 A0 16 F4 | 	testb	local09, #8 wc
0229c     09 A0 76 F4 | 	testbn	local09, #9 andc
022a0     0A A0 46 F0 | 	shr	local09, #10
022a4     01 9E 06 C6 |  if_b	mov	local08, #1
022a8     40 7E 6C 3D |  if_ae	testp	#63 wz
022ac     01 9E 06 26 |  if_nc_and_z	mov	local08, #1
022b0     3F A0 8E 2A |  if_nc_and_z	rdpin	local09, #63
022b4     04 A0 46 20 |  if_nc_and_z	shr	local09, #4
022b8                 | LR__0233
022b8     00 92 06 F6 | 	mov	local02, #0
022bc     00 9E 0E F2 | 	cmp	local08, #0 wz
022c0     01 92 66 56 |  if_ne	neg	local02, #1
022c4     00 A2 06 F6 | 	mov	local10, #0
022c8     00 94 06 F6 | 	mov	local03, #0
022cc     00 90 0E F2 | 	cmp	local01, #0 wz
022d0     01 94 66 56 |  if_ne	neg	local03, #1
022d4     00 96 06 F6 | 	mov	local04, #0
022d8     00 A4 06 F6 | 	mov	local11, #0
022dc     4C A7 02 F6 | 	mov	local12, local05
022e0     1A 6E 62 FD | 	getct	result1
022e4     37 A9 02 F6 | 	mov	local13, result1
022e8     54 A7 82 F1 | 	sub	local12, local13
022ec     00 A6 56 F2 | 	cmps	local12, #0 wc
022f0     00 A4 26 C6 |  if_b	not	local11, #0
022f4     00 A4 0E F2 | 	cmp	local11, #0 wz
022f8     00 96 26 56 |  if_ne	not	local04, #0
022fc     4B 95 CA F7 | 	test	local03, local04 wz
02300     00 A2 26 56 |  if_ne	not	local10, #0
02304     51 93 4A F5 | 	or	local02, local10 wz
02308     8C FF 9F AD |  if_e	jmp	#LR__0232
0230c     00 9E 0E F2 | 	cmp	local08, #0 wz
02310     50 9B 02 56 |  if_ne	mov	local06, local09
02314     4D 9B E2 58 |  if_ne	getbyte	local06, local06, #0
02318     04 64 06 F1 | 	add	ptr___system__dat__, #4
0231c     32 A1 62 FC | 	wrlong	local09, ptr___system__dat__
02320     04 64 86 F1 | 	sub	ptr___system__dat__, #4
02324     4D 6F 02 F6 | 	mov	result1, local06
02328     E7 F0 03 F6 | 	mov	ptra, fp
0232c     F2 00 A0 FD | 	call	#popregs_
02330                 | __system___rxraw_ret
02330     2D 00 64 FD | 	ret
02334                 | 
02334                 | __system____builtin_memmove
02334     42 75 02 F6 | 	mov	_var01, arg01
02338     43 85 52 F2 | 	cmps	arg01, arg02 wc
0233c     10 00 90 CD |  if_b	jmp	#LR__0240
02340     43 77 02 F6 | 	mov	_var02, arg02
02344     44 77 02 F1 | 	add	_var02, arg03
02348     3B 85 52 F2 | 	cmps	arg01, _var02 wc
0234c     48 00 90 CD |  if_b	jmp	#LR__0246
02350                 | LR__0240
02350     44 79 02 F6 | 	mov	_var03, arg03
02354     02 78 4E F0 | 	shr	_var03, #2 wz
02358     18 00 90 AD |  if_e	jmp	#LR__0245
0235c     D7 0A 48 FB | 	callpa	#(@LR__0243-@LR__0241)>>2,fcache_load_ptr_
02360                 | LR__0241
02360     3C 09 D8 FC | 	rep	@LR__0244, _var03
02364                 | LR__0242
02364     43 79 02 FB | 	rdlong	_var03, arg02
02368     42 79 62 FC | 	wrlong	_var03, arg01
0236c     04 84 06 F1 | 	add	arg01, #4
02370     04 86 06 F1 | 	add	arg02, #4
02374                 | LR__0243
02374                 | LR__0244
02374                 | LR__0245
02374     02 88 CE F7 | 	test	arg03, #2 wz
02378     43 77 E2 5A |  if_ne	rdword	_var02, arg02
0237c     42 77 52 5C |  if_ne	wrword	_var02, arg01
02380     02 84 06 51 |  if_ne	add	arg01, #2
02384     02 86 06 51 |  if_ne	add	arg02, #2
02388     01 88 CE F7 | 	test	arg03, #1 wz
0238c     43 77 C2 5A |  if_ne	rdbyte	_var02, arg02
02390     42 77 42 5C |  if_ne	wrbyte	_var02, arg01
02394     28 00 90 FD | 	jmp	#LR__0252
02398                 | LR__0246
02398     44 85 02 F1 | 	add	arg01, arg03
0239c     44 87 02 F1 | 	add	arg02, arg03
023a0     44 7B 0A F6 | 	mov	_var04, arg03 wz
023a4     18 00 90 AD |  if_e	jmp	#LR__0251
023a8     D7 0A 48 FB | 	callpa	#(@LR__0249-@LR__0247)>>2,fcache_load_ptr_
023ac                 | LR__0247
023ac     3D 09 D8 FC | 	rep	@LR__0250, _var04
023b0                 | LR__0248
023b0     01 84 86 F1 | 	sub	arg01, #1
023b4     01 86 86 F1 | 	sub	arg02, #1
023b8     43 77 C2 FA | 	rdbyte	_var02, arg02
023bc     42 77 42 FC | 	wrbyte	_var02, arg01
023c0                 | LR__0249
023c0                 | LR__0250
023c0                 | LR__0251
023c0                 | LR__0252
023c0     3A 6F 02 F6 | 	mov	result1, _var01
023c4                 | __system____builtin_memmove_ret
023c4     2D 00 64 FD | 	ret
023c8                 | 
023c8                 | __system____topofstack
023c8     00 CA 05 F6 | 	mov	COUNT_, #0
023cc     E8 00 A0 FD | 	call	#pushregs_
023d0     08 F0 07 F1 | 	add	ptra, #8
023d4     04 CE 05 F1 | 	add	fp, #4
023d8     E7 84 62 FC | 	wrlong	arg01, fp
023dc     E7 6E 02 F6 | 	mov	result1, fp
023e0     04 CE 85 F1 | 	sub	fp, #4
023e4     E7 F0 03 F6 | 	mov	ptra, fp
023e8     F2 00 A0 FD | 	call	#popregs_
023ec                 | __system____topofstack_ret
023ec     2D 00 64 FD | 	ret
023f0                 | 
023f0                 | __system___lockmem
023f0     00 6E 06 F6 | 	mov	result1, #0
023f4     01 6E 62 FD | 	cogid	result1
023f8     00 6F 06 F1 | 	add	result1, #256
023fc                 | LR__0260
023fc     42 75 0A FB | 	rdlong	_var01, arg01 wz
02400     42 6F 62 AC |  if_e	wrlong	result1, arg01
02404     42 75 02 AB |  if_e	rdlong	_var01, arg01
02408     42 75 02 AB |  if_e	rdlong	_var01, arg01
0240c     37 75 0A F2 | 	cmp	_var01, result1 wz
02410     E8 FF 9F 5D |  if_ne	jmp	#LR__0260
02414                 | __system___lockmem_ret
02414     2D 00 64 FD | 	ret
02418                 | 
02418                 | __system___tx
02418     02 CA 05 F6 | 	mov	COUNT_, #2
0241c     E8 00 A0 FD | 	call	#pushregs_
02420     42 91 02 F6 | 	mov	local01, arg01
02424     0A 90 0E F2 | 	cmp	local01, #10 wz
02428     18 00 90 5D |  if_ne	jmp	#LR__0270
0242c     08 64 06 F1 | 	add	ptr___system__dat__, #8
02430     32 93 02 FB | 	rdlong	local02, ptr___system__dat__
02434     08 64 86 F1 | 	sub	ptr___system__dat__, #8
02438     02 92 CE F7 | 	test	local02, #2 wz
0243c     0D 84 06 56 |  if_ne	mov	arg01, #13
02440     B0 FD BF 5D |  if_ne	call	#__system___txraw
02444                 | LR__0270
02444     48 85 02 F6 | 	mov	arg01, local01
02448     A8 FD BF FD | 	call	#__system___txraw
0244c     E7 F0 03 F6 | 	mov	ptra, fp
02450     F2 00 A0 FD | 	call	#popregs_
02454                 | __system___tx_ret
02454     2D 00 64 FD | 	ret
02458                 | 
02458                 | __system___rx
02458     01 CA 05 F6 | 	mov	COUNT_, #1
0245c     E8 00 A0 FD | 	call	#pushregs_
02460                 | LR__0280
02460     00 84 06 F6 | 	mov	arg01, #0
02464     D0 FD BF FD | 	call	#__system___rxraw
02468     37 91 02 F6 | 	mov	local01, result1
0246c     FF FF 7F FF 
02470     FF 91 0E F2 | 	cmp	local01, ##-1 wz
02474     E8 FF 9F AD |  if_e	jmp	#LR__0280
02478     0D 90 0E F2 | 	cmp	local01, #13 wz
0247c     14 00 90 5D |  if_ne	jmp	#LR__0281
02480     08 64 06 F1 | 	add	ptr___system__dat__, #8
02484     32 6F 02 FB | 	rdlong	result1, ptr___system__dat__
02488     08 64 86 F1 | 	sub	ptr___system__dat__, #8
0248c     02 6E CE F7 | 	test	result1, #2 wz
02490     0A 90 06 56 |  if_ne	mov	local01, #10
02494                 | LR__0281
02494     08 64 06 F1 | 	add	ptr___system__dat__, #8
02498     32 85 02 FB | 	rdlong	arg01, ptr___system__dat__
0249c     08 64 86 F1 | 	sub	ptr___system__dat__, #8
024a0     01 84 CE F7 | 	test	arg01, #1 wz
024a4     1C 00 90 AD |  if_e	jmp	#LR__0284
024a8     7F 90 0E F2 | 	cmp	local01, #127 wz
024ac     0C 00 90 5D |  if_ne	jmp	#LR__0282
024b0     08 84 06 F6 | 	mov	arg01, #8
024b4     60 FF BF FD | 	call	#__system___tx
024b8     08 00 90 FD | 	jmp	#LR__0283
024bc                 | LR__0282
024bc     48 85 02 F6 | 	mov	arg01, local01
024c0     54 FF BF FD | 	call	#__system___tx
024c4                 | LR__0283
024c4                 | LR__0284
024c4     48 6F 02 F6 | 	mov	result1, local01
024c8     E7 F0 03 F6 | 	mov	ptra, fp
024cc     F2 00 A0 FD | 	call	#popregs_
024d0                 | __system___rx_ret
024d0     2D 00 64 FD | 	ret
024d4                 | 
024d4                 | __system___waitms
024d4     42 75 02 F6 | 	mov	_var01, arg01
024d8     1A 76 62 FD | 	getct	_var02
024dc     14 78 06 FB | 	rdlong	_var03, #20
024e0     D7 14 48 FB | 	callpa	#(@LR__0291-@LR__0290)>>2,fcache_load_ptr_
024e4                 | LR__0290
024e4     01 00 00 FF 
024e8     E8 75 56 F2 | 	cmps	_var01, ##1000 wc
024ec     1C 00 90 CD |  if_b	jmp	#LR__0292
024f0     3C 77 02 F1 | 	add	_var02, _var03
024f4     3B 85 02 F6 | 	mov	arg01, _var02
024f8     00 84 66 FA | 	addct1	arg01, #0
024fc     24 22 60 FD | 	waitct1
02500     01 00 00 FF 
02504     E8 75 86 F1 | 	sub	_var01, ##1000
02508     D8 FF 9F FD | 	jmp	#LR__0290
0250c                 | LR__0291
0250c                 | LR__0292
0250c     01 74 56 F2 | 	cmps	_var01, #1 wc
02510     28 00 90 CD |  if_b	jmp	#LR__0293
02514     3C 75 02 FD | 	qmul	_var01, _var03
02518     01 00 00 FF 
0251c     E8 89 06 F6 | 	mov	arg03, ##1000
02520     19 6E 62 FD | 	getqy	result1
02524     18 84 62 FD | 	getqx	arg01
02528     28 6E 62 FD | 	setq	result1
0252c     44 85 12 FD | 	qdiv	arg01, arg03
02530     18 84 62 FD | 	getqx	arg01
02534     3B 85 62 FA | 	addct1	arg01, _var02
02538     24 22 60 FD | 	waitct1
0253c                 | LR__0293
0253c                 | __system___waitms_ret
0253c     2D 00 64 FD | 	ret
02540                 | 
02540                 | __system___waitus
02540     42 75 02 F6 | 	mov	_var01, arg01
02544     1A 76 62 FD | 	getct	_var02
02548     14 78 06 FB | 	rdlong	_var03, #20
0254c     D7 14 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
02550                 | LR__0300
02550     A1 07 00 FF 
02554     40 74 56 F2 | 	cmps	_var01, ##1000000 wc
02558     1C 00 90 CD |  if_b	jmp	#LR__0302
0255c     3C 77 02 F1 | 	add	_var02, _var03
02560     3B 85 02 F6 | 	mov	arg01, _var02
02564     00 84 66 FA | 	addct1	arg01, #0
02568     24 22 60 FD | 	waitct1
0256c     A1 07 00 FF 
02570     40 74 86 F1 | 	sub	_var01, ##1000000
02574     D8 FF 9F FD | 	jmp	#LR__0300
02578                 | LR__0301
02578                 | LR__0302
02578     01 74 56 F2 | 	cmps	_var01, #1 wc
0257c     28 00 90 CD |  if_b	jmp	#LR__0303
02580     3C 75 02 FD | 	qmul	_var01, _var03
02584     A1 07 00 FF 
02588     40 88 06 F6 | 	mov	arg03, ##1000000
0258c     19 6E 62 FD | 	getqy	result1
02590     18 84 62 FD | 	getqx	arg01
02594     28 6E 62 FD | 	setq	result1
02598     44 85 12 FD | 	qdiv	arg01, arg03
0259c     18 6E 62 FD | 	getqx	result1
025a0     37 77 62 FA | 	addct1	_var02, result1
025a4     24 22 60 FD | 	waitct1
025a8                 | LR__0303
025a8                 | __system___waitus_ret
025a8     2D 00 64 FD | 	ret
025ac                 | 
025ac                 | __system___basic_open
025ac     05 CA 05 F6 | 	mov	COUNT_, #5
025b0     E8 00 A0 FD | 	call	#pushregs_
025b4     43 91 02 F6 | 	mov	local01, arg02
025b8     44 93 02 F6 | 	mov	local02, arg03
025bc     45 95 02 F6 | 	mov	local03, arg04
025c0     00 96 06 F6 | 	mov	local04, #0
025c4     18 10 B0 FD | 	call	#__system____getftab
025c8     37 99 0A F6 | 	mov	local05, result1 wz
025cc     18 00 90 5D |  if_ne	jmp	#LR__0310
025d0     2E 85 02 F6 | 	mov	arg01, abortchain
025d4     0C 86 06 F6 | 	mov	arg02, #12
025d8     01 88 06 F6 | 	mov	arg03, #1
025dc     1A 01 A0 FD | 	call	#__longjmp
025e0     01 6E 66 F6 | 	neg	result1, #1
025e4     0C 01 90 FD | 	jmp	#LR__0319
025e8                 | LR__0310
025e8     08 98 06 F1 | 	add	local05, #8
025ec     4C 6F 0A FB | 	rdlong	result1, local05 wz
025f0     08 98 86 F1 | 	sub	local05, #8
025f4     4C 85 02 56 |  if_ne	mov	arg01, local05
025f8     48 0C B0 5D |  if_ne	call	#__system___closeraw
025fc     00 90 0E F2 | 	cmp	local01, #0 wz
02600     00 92 0E A2 |  if_e	cmp	local02, #0 wz
02604     00 94 0E A2 |  if_e	cmp	local03, #0 wz
02608     3C 00 90 AD |  if_e	jmp	#LR__0312
0260c     0C 84 06 F6 | 	mov	arg01, #12
02610     6C 06 B0 FD | 	call	#__system___gc_alloc_managed
02614     37 97 0A F6 | 	mov	local04, result1 wz
02618     18 00 90 5D |  if_ne	jmp	#LR__0311
0261c     2E 85 02 F6 | 	mov	arg01, abortchain
02620     07 86 06 F6 | 	mov	arg02, #7
02624     01 88 06 F6 | 	mov	arg03, #1
02628     1A 01 A0 FD | 	call	#__longjmp
0262c     01 6E 66 F6 | 	neg	result1, #1
02630     C0 00 90 FD | 	jmp	#LR__0319
02634                 | LR__0311
02634     4B 01 68 FC | 	wrlong	#0, local04
02638     04 96 06 F1 | 	add	local04, #4
0263c     4B 01 68 FC | 	wrlong	#0, local04
02640     04 96 86 F1 | 	sub	local04, #4
02644     4C 97 62 FC | 	wrlong	local04, local05
02648                 | LR__0312
02648     00 90 0E F2 | 	cmp	local01, #0 wz
0264c     1C 00 90 AD |  if_e	jmp	#LR__0313
02650     4B 91 62 FC | 	wrlong	local01, local04
02654     4B 6F 02 F6 | 	mov	result1, local04
02658     14 6E 26 F4 | 	bith	result1, #20
0265c     1C 98 06 F1 | 	add	local05, #28
02660     4C 6F 62 FC | 	wrlong	result1, local05
02664     1C 98 86 F1 | 	sub	local05, #28
02668     0C 00 90 FD | 	jmp	#LR__0314
0266c                 | LR__0313
0266c     1C 98 06 F1 | 	add	local05, #28
02670     4C 01 68 FC | 	wrlong	#0, local05
02674     1C 98 86 F1 | 	sub	local05, #28
02678                 | LR__0314
02678     00 92 0E F2 | 	cmp	local02, #0 wz
0267c     24 00 90 AD |  if_e	jmp	#LR__0315
02680     04 96 06 F1 | 	add	local04, #4
02684     4B 93 62 FC | 	wrlong	local02, local04
02688     04 96 86 F1 | 	sub	local04, #4
0268c     4B 6F 02 F6 | 	mov	result1, local04
02690     15 6E 26 F4 | 	bith	result1, #21
02694     20 98 06 F1 | 	add	local05, #32
02698     4C 6F 62 FC | 	wrlong	result1, local05
0269c     20 98 86 F1 | 	sub	local05, #32
026a0     0C 00 90 FD | 	jmp	#LR__0316
026a4                 | LR__0315
026a4     20 98 06 F1 | 	add	local05, #32
026a8     4C 01 68 FC | 	wrlong	#0, local05
026ac     20 98 86 F1 | 	sub	local05, #32
026b0                 | LR__0316
026b0     00 94 0E F2 | 	cmp	local03, #0 wz
026b4     20 00 90 AD |  if_e	jmp	#LR__0317
026b8     08 96 06 F1 | 	add	local04, #8
026bc     4B 95 62 FC | 	wrlong	local03, local04
026c0     08 96 86 F1 | 	sub	local04, #8
026c4     34 96 26 F4 | 	bith	local04, #52
026c8     24 98 06 F1 | 	add	local05, #36
026cc     4C 97 62 FC | 	wrlong	local04, local05
026d0     24 98 86 F1 | 	sub	local05, #36
026d4     0C 00 90 FD | 	jmp	#LR__0318
026d8                 | LR__0317
026d8     24 98 06 F1 | 	add	local05, #36
026dc     4C 01 68 FC | 	wrlong	#0, local05
026e0     24 98 86 F1 | 	sub	local05, #36
026e4                 | LR__0318
026e4     08 98 06 F1 | 	add	local05, #8
026e8     40 00 80 FF 
026ec     4C 07 68 FC | 	wrlong	##32771, local05
026f0     00 6E 06 F6 | 	mov	result1, #0
026f4                 | LR__0319
026f4     E7 F0 03 F6 | 	mov	ptra, fp
026f8     F2 00 A0 FD | 	call	#popregs_
026fc                 | __system___basic_open_ret
026fc     2D 00 64 FD | 	ret
02700                 | 
02700                 | __system___basic_print_char
02700     03 CA 05 F6 | 	mov	COUNT_, #3
02704     E8 00 A0 FD | 	call	#pushregs_
02708     43 91 02 F6 | 	mov	local01, arg02
0270c     BC 10 B0 FD | 	call	#__system___gettxfunc
02710     37 93 0A F6 | 	mov	local02, result1 wz
02714     00 6E 06 A6 |  if_e	mov	result1, #0
02718     30 00 90 AD |  if_e	jmp	#LR__0320
0271c     49 95 02 F6 | 	mov	local03, local02
02720     13 92 46 F7 | 	zerox	local02, #19
02724     14 94 46 F0 | 	shr	local03, #20
02728     02 94 66 F0 | 	shl	local03, #2
0272c     2D 95 02 F1 | 	add	local03, __methods__
02730     4A 95 02 FB | 	rdlong	local03, local03
02734     48 85 02 F6 | 	mov	arg01, local01
02738     31 91 02 F6 | 	mov	local01, objptr
0273c     49 63 02 F6 | 	mov	objptr, local02
02740     2D 94 62 FD | 	call	local03
02744     48 63 02 F6 | 	mov	objptr, local01
02748     01 6E 06 F6 | 	mov	result1, #1
0274c                 | LR__0320
0274c     E7 F0 03 F6 | 	mov	ptra, fp
02750     F2 00 A0 FD | 	call	#popregs_
02754                 | __system___basic_print_char_ret
02754     2D 00 64 FD | 	ret
02758                 | 
02758                 | __system___basic_print_string
02758     03 CA 05 F6 | 	mov	COUNT_, #3
0275c     E8 00 A0 FD | 	call	#pushregs_
02760     43 91 02 F6 | 	mov	local01, arg02
02764     44 93 02 F6 | 	mov	local02, arg03
02768     60 10 B0 FD | 	call	#__system___gettxfunc
0276c     37 95 0A F6 | 	mov	local03, result1 wz
02770     00 6E 06 A6 |  if_e	mov	result1, #0
02774     18 00 90 AD |  if_e	jmp	#LR__0330
02778     00 90 0E F2 | 	cmp	local01, #0 wz
0277c     00 6E 06 A6 |  if_e	mov	result1, #0
02780     4A 85 02 56 |  if_ne	mov	arg01, local03
02784     49 87 02 56 |  if_ne	mov	arg02, local02
02788     48 89 02 56 |  if_ne	mov	arg03, local01
0278c     80 00 B0 5D |  if_ne	call	#__system___fmtstr
02790                 | LR__0330
02790     E7 F0 03 F6 | 	mov	ptra, fp
02794     F2 00 A0 FD | 	call	#popregs_
02798                 | __system___basic_print_string_ret
02798     2D 00 64 FD | 	ret
0279c                 | 
0279c                 | __system___basic_print_integer
0279c     04 CA 05 F6 | 	mov	COUNT_, #4
027a0     E8 00 A0 FD | 	call	#pushregs_
027a4     43 91 02 F6 | 	mov	local01, arg02
027a8     44 93 02 F6 | 	mov	local02, arg03
027ac     45 95 02 F6 | 	mov	local03, arg04
027b0     18 10 B0 FD | 	call	#__system___gettxfunc
027b4     37 97 0A F6 | 	mov	local04, result1 wz
027b8     00 6E 06 A6 |  if_e	mov	result1, #0
027bc     4B 85 02 56 |  if_ne	mov	arg01, local04
027c0     49 87 02 56 |  if_ne	mov	arg02, local02
027c4     48 89 02 56 |  if_ne	mov	arg03, local01
027c8     4A 8B 02 56 |  if_ne	mov	arg04, local03
027cc     2C 01 B0 5D |  if_ne	call	#__system___fmtnum
027d0     E7 F0 03 F6 | 	mov	ptra, fp
027d4     F2 00 A0 FD | 	call	#popregs_
027d8                 | __system___basic_print_integer_ret
027d8     2D 00 64 FD | 	ret
027dc                 | 
027dc                 | __system___fmtchar
027dc     00 CA 05 F6 | 	mov	COUNT_, #0
027e0     E8 00 A0 FD | 	call	#pushregs_
027e4     10 F0 07 F1 | 	add	ptra, #16
027e8     0C CE 05 F1 | 	add	fp, #12
027ec     E7 88 62 FC | 	wrlong	arg03, fp
027f0     44 89 E2 F8 | 	getbyte	arg03, arg03, #0
027f4     E7 88 62 FC | 	wrlong	arg03, fp
027f8     E7 88 02 F6 | 	mov	arg03, fp
027fc     0C CE 85 F1 | 	sub	fp, #12
02800     0C 00 B0 FD | 	call	#__system___fmtstr
02804     E7 F0 03 F6 | 	mov	ptra, fp
02808     F2 00 A0 FD | 	call	#popregs_
0280c                 | __system___fmtchar_ret
0280c     2D 00 64 FD | 	ret
02810                 | 
02810                 | __system___fmtstr
02810     09 CA 05 F6 | 	mov	COUNT_, #9
02814     E8 00 A0 FD | 	call	#pushregs_
02818     42 91 02 F6 | 	mov	local01, arg01
0281c     43 93 02 F6 | 	mov	local02, arg02
02820     44 95 02 F6 | 	mov	local03, arg03
02824     49 8B E2 F8 | 	getbyte	arg04, local02, #0
02828     4A 85 02 F6 | 	mov	arg01, local03
0282c     42 97 02 F6 | 	mov	local04, arg01
02830     D7 06 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
02834                 | LR__0340
02834     4B 6F CA FA | 	rdbyte	result1, local04 wz
02838     01 96 06 51 |  if_ne	add	local04, #1
0283c     F4 FF 9F 5D |  if_ne	jmp	#LR__0340
02840                 | LR__0341
02840     42 97 82 F1 | 	sub	local04, arg01
02844     00 8A 0E F2 | 	cmp	arg04, #0 wz
02848     45 97 7A 53 |  if_ne	fles	local04, arg04 wcz
0284c     49 87 02 F6 | 	mov	arg02, local02
02850     4B 89 02 F6 | 	mov	arg03, local04
02854     48 85 02 F6 | 	mov	arg01, local01
02858     02 8A 06 F6 | 	mov	arg04, #2
0285c     EC 0D B0 FD | 	call	#__system___fmtpad
02860     37 99 02 F6 | 	mov	local05, result1
02864     00 98 56 F2 | 	cmps	local05, #0 wc
02868     4C 6F 02 C6 |  if_b	mov	result1, local05
0286c     80 00 90 CD |  if_b	jmp	#LR__0344
02870     01 96 56 F2 | 	cmps	local04, #1 wc
02874     50 00 90 CD |  if_b	jmp	#LR__0343
02878     4B 9B 02 F6 | 	mov	local06, local04
0287c                 | LR__0342
0287c     48 9D 02 F6 | 	mov	local07, local01
02880     48 9F 02 F6 | 	mov	local08, local01
02884     13 9C 46 F7 | 	zerox	local07, #19
02888     14 9E 46 F0 | 	shr	local08, #20
0288c     02 9E 66 F0 | 	shl	local08, #2
02890     2D 9F 02 F1 | 	add	local08, __methods__
02894     4F 9F 02 FB | 	rdlong	local08, local08
02898     4A 85 C2 FA | 	rdbyte	arg01, local03
0289c     31 A1 02 F6 | 	mov	local09, objptr
028a0     4E 63 02 F6 | 	mov	objptr, local07
028a4     01 94 06 F1 | 	add	local03, #1
028a8     2D 9E 62 FD | 	call	local08
028ac     50 63 02 F6 | 	mov	objptr, local09
028b0     37 A1 02 F6 | 	mov	local09, result1
028b4     00 A0 56 F2 | 	cmps	local09, #0 wc
028b8     50 6F 02 C6 |  if_b	mov	result1, local09
028bc     30 00 90 CD |  if_b	jmp	#LR__0344
028c0     50 99 02 F1 | 	add	local05, local09
028c4     ED 9B 6E FB | 	djnz	local06, #LR__0342
028c8                 | LR__0343
028c8     49 87 02 F6 | 	mov	arg02, local02
028cc     4B 89 02 F6 | 	mov	arg03, local04
028d0     48 85 02 F6 | 	mov	arg01, local01
028d4     01 8A 06 F6 | 	mov	arg04, #1
028d8     70 0D B0 FD | 	call	#__system___fmtpad
028dc     37 A1 02 F6 | 	mov	local09, result1
028e0     00 A0 56 F2 | 	cmps	local09, #0 wc
028e4     50 6F 02 C6 |  if_b	mov	result1, local09
028e8     50 99 02 31 |  if_ae	add	local05, local09
028ec     4C 6F 02 36 |  if_ae	mov	result1, local05
028f0                 | LR__0344
028f0     E7 F0 03 F6 | 	mov	ptra, fp
028f4     F2 00 A0 FD | 	call	#popregs_
028f8                 | __system___fmtstr_ret
028f8     2D 00 64 FD | 	ret
028fc                 | 
028fc                 | __system___fmtnum
028fc     0B CA 05 F6 | 	mov	COUNT_, #11
02900     E8 00 A0 FD | 	call	#pushregs_
02904     42 91 02 F6 | 	mov	local01, arg01
02908     43 93 02 F6 | 	mov	local02, arg02
0290c     44 95 02 F6 | 	mov	local03, arg03
02910     45 97 02 F6 | 	mov	local04, arg04
02914     F8 99 02 F6 | 	mov	local05, ptra
02918     4C 9B 02 F6 | 	mov	local06, local05
0291c     00 9C 06 F6 | 	mov	local07, #0
02920     49 9F 02 F6 | 	mov	local08, local02
02924     10 9E 46 F0 | 	shr	local08, #16
02928     3F 9E 06 F5 | 	and	local08, #63
0292c     49 A1 E2 F8 | 	getbyte	local09, local02, #0
02930     49 A3 02 F6 | 	mov	local10, local02
02934     1A A2 46 F0 | 	shr	local10, #26
02938     03 A2 06 F5 | 	and	local10, #3
0293c     51 A5 02 F6 | 	mov	local11, local10
02940     01 9E 56 F2 | 	cmps	local08, #1 wc
02944     44 F0 07 F1 | 	add	ptra, #68
02948     01 9E 86 31 |  if_ae	sub	local08, #1
0294c     41 A0 56 F2 | 	cmps	local09, #65 wc
02950     00 A0 0E C2 |  if_b	cmp	local09, #0 wz
02954     40 A0 06 B6 |  if_nc_or_z	mov	local09, #64
02958     03 A4 0E F2 | 	cmp	local11, #3 wz
0295c     00 A4 06 A6 |  if_e	mov	local11, #0
02960     00 94 56 52 |  if_ne	cmps	local03, #0 wc
02964     04 A4 06 46 |  if_c_and_nz	mov	local11, #4
02968     4A 95 62 46 |  if_c_and_nz	neg	local03, local03
0296c     00 A4 0E F2 | 	cmp	local11, #0 wz
02970     4C 00 90 AD |  if_e	jmp	#LR__0353
02974     01 9C 06 F6 | 	mov	local07, #1
02978     50 9F 0A F2 | 	cmp	local08, local09 wz
0297c     18 00 90 5D |  if_ne	jmp	#LR__0351
02980     05 9E 6E FB | 	djnz	local08, #LR__0350
02984     48 85 02 F6 | 	mov	arg01, local01
02988     49 87 02 F6 | 	mov	arg02, local02
0298c     23 88 06 F6 | 	mov	arg03, #35
02990     48 FE BF FD | 	call	#__system___fmtchar
02994     8C 00 90 FD | 	jmp	#LR__0357
02998                 | LR__0350
02998                 | LR__0351
02998     02 A4 0E F2 | 	cmp	local11, #2 wz
0299c     4D A3 02 A6 |  if_e	mov	local10, local06
029a0     01 9A 06 A1 |  if_e	add	local06, #1
029a4     51 41 48 AC |  if_e	wrbyte	#32, local10
029a8     14 00 90 AD |  if_e	jmp	#LR__0352
029ac     04 A4 0E F2 | 	cmp	local11, #4 wz
029b0     4D 5B 48 AC |  if_e	wrbyte	#45, local06
029b4     01 9A 06 A1 |  if_e	add	local06, #1
029b8     4D 57 48 5C |  if_ne	wrbyte	#43, local06
029bc     01 9A 06 51 |  if_ne	add	local06, #1
029c0                 | LR__0352
029c0                 | LR__0353
029c0     4E A3 02 F6 | 	mov	local10, local07
029c4     4D 85 02 F6 | 	mov	arg01, local06
029c8     4A 87 02 F6 | 	mov	arg02, local03
029cc     4B 89 02 F6 | 	mov	arg03, local04
029d0     4F 8B 02 F6 | 	mov	arg04, local08
029d4     00 8C 06 F6 | 	mov	arg05, #0
029d8     1D 92 2E F4 | 	testbn	local02, #29 wz
029dc     01 8C 06 56 |  if_ne	mov	arg05, #1
029e0     30 0D B0 FD | 	call	#__system___uitoa
029e4     37 A3 02 F1 | 	add	local10, result1
029e8     50 A3 5A F2 | 	cmps	local10, local09 wcz
029ec     24 00 90 ED |  if_be	jmp	#LR__0356
029f0     D7 0E 48 FB | 	callpa	#(@LR__0355-@LR__0354)>>2,fcache_load_ptr_
029f4                 | LR__0354
029f4     50 A3 02 F6 | 	mov	local10, local09
029f8     01 A2 56 F2 | 	cmps	local10, #1 wc
029fc     01 A0 86 F1 | 	sub	local09, #1
02a00     4D A3 02 36 |  if_ae	mov	local10, local06
02a04     01 9A 06 31 |  if_ae	add	local06, #1
02a08     51 47 48 3C |  if_ae	wrbyte	#35, local10
02a0c     E4 FF 9F 3D |  if_ae	jmp	#LR__0354
02a10                 | LR__0355
02a10     4D 01 48 FC | 	wrbyte	#0, local06
02a14                 | LR__0356
02a14     48 85 02 F6 | 	mov	arg01, local01
02a18     49 87 02 F6 | 	mov	arg02, local02
02a1c     4C 89 02 F6 | 	mov	arg03, local05
02a20     EC FD BF FD | 	call	#__system___fmtstr
02a24                 | LR__0357
02a24     E7 F0 03 F6 | 	mov	ptra, fp
02a28     F2 00 A0 FD | 	call	#popregs_
02a2c                 | __system___fmtnum_ret
02a2c     2D 00 64 FD | 	ret
02a30                 | 
02a30                 | __system___gc_ptrs
02a30     2C 75 02 F6 | 	mov	_var01, __heap_ptr
02a34     3A 77 02 F6 | 	mov	_var02, _var01
02a38     0B 00 00 FF 
02a3c     68 77 06 F1 | 	add	_var02, ##5992
02a40     3A 71 0A FB | 	rdlong	result2, _var01 wz
02a44     74 00 90 5D |  if_ne	jmp	#LR__0360
02a48     3B 71 02 F6 | 	mov	result2, _var02
02a4c     3A 71 82 F1 | 	sub	result2, _var01
02a50     3A 03 58 FC | 	wrword	#1, _var01
02a54     3A 6F 02 F6 | 	mov	result1, _var01
02a58     02 6E 06 F1 | 	add	result1, #2
02a5c     36 00 80 FF 
02a60     37 21 59 FC | 	wrword	##27792, result1
02a64     3A 6F 02 F6 | 	mov	result1, _var01
02a68     04 6E 06 F1 | 	add	result1, #4
02a6c     37 01 58 FC | 	wrword	#0, result1
02a70     3A 6F 02 F6 | 	mov	result1, _var01
02a74     06 6E 06 F1 | 	add	result1, #6
02a78     37 03 58 FC | 	wrword	#1, result1
02a7c     10 74 06 F1 | 	add	_var01, #16
02a80     38 71 52 F6 | 	abs	result2, result2 wc
02a84     04 70 46 F0 | 	shr	result2, #4
02a88     38 71 82 F6 | 	negc	result2, result2
02a8c     3A 71 52 FC | 	wrword	result2, _var01
02a90     3A 71 02 F6 | 	mov	result2, _var01
02a94     02 70 06 F1 | 	add	result2, #2
02a98     36 00 80 FF 
02a9c     38 1F 59 FC | 	wrword	##27791, result2
02aa0     3A 71 02 F6 | 	mov	result2, _var01
02aa4     04 70 06 F1 | 	add	result2, #4
02aa8     38 01 58 FC | 	wrword	#0, result2
02aac     3A 71 02 F6 | 	mov	result2, _var01
02ab0     06 70 06 F1 | 	add	result2, #6
02ab4     38 01 58 FC | 	wrword	#0, result2
02ab8     10 74 86 F1 | 	sub	_var01, #16
02abc                 | LR__0360
02abc     3A 6F 02 F6 | 	mov	result1, _var01
02ac0     3B 71 02 F6 | 	mov	result2, _var02
02ac4                 | __system___gc_ptrs_ret
02ac4     2D 00 64 FD | 	ret
02ac8                 | 
02ac8                 | __system___gc_tryalloc
02ac8     0B CA 05 F6 | 	mov	COUNT_, #11
02acc     E8 00 A0 FD | 	call	#pushregs_
02ad0     42 91 02 F6 | 	mov	local01, arg01
02ad4     43 93 02 F6 | 	mov	local02, arg02
02ad8     54 FF BF FD | 	call	#__system___gc_ptrs
02adc     37 95 02 F6 | 	mov	local03, result1
02ae0     38 97 02 F6 | 	mov	local04, result2
02ae4     4A 99 02 F6 | 	mov	local05, local03
02ae8     00 9A 06 F6 | 	mov	local06, #0
02aec     D7 1E 48 FB | 	callpa	#(@LR__0371-@LR__0370)>>2,fcache_load_ptr_
02af0                 | LR__0370
02af0     4C 9D 02 F6 | 	mov	local07, local05
02af4     06 98 06 F1 | 	add	local05, #6
02af8     4C 87 EA FA | 	rdword	arg02, local05 wz
02afc     4A 85 02 F6 | 	mov	arg01, local03
02b00     00 6E 06 A6 |  if_e	mov	result1, #0
02b04     04 86 66 50 |  if_ne	shl	arg02, #4
02b08     43 85 02 51 |  if_ne	add	arg01, arg02
02b0c     42 6F 02 56 |  if_ne	mov	result1, arg01
02b10     37 99 0A F6 | 	mov	local05, result1 wz
02b14     4C 9B E2 5A |  if_ne	rdword	local06, local05
02b18     00 98 0E F2 | 	cmp	local05, #0 wz
02b1c     4B 99 52 52 |  if_ne	cmps	local05, local04 wc
02b20     08 00 90 1D |  if_a	jmp	#LR__0372
02b24     4D 91 5A 52 |  if_ne	cmps	local01, local06 wcz
02b28     C4 FF 9F 1D |  if_a	jmp	#LR__0370
02b2c                 | LR__0371
02b2c                 | LR__0372
02b2c     00 98 0E F2 | 	cmp	local05, #0 wz
02b30     4C 6F 02 A6 |  if_e	mov	result1, local05
02b34     3C 01 90 AD |  if_e	jmp	#LR__0375
02b38     4C 71 02 F6 | 	mov	result2, local05
02b3c     06 70 06 F1 | 	add	result2, #6
02b40     38 9F E2 FA | 	rdword	local08, result2
02b44     4D 91 52 F2 | 	cmps	local01, local06 wc
02b48     C0 00 90 3D |  if_ae	jmp	#LR__0374
02b4c     4C 91 52 FC | 	wrword	local01, local05
02b50     4C 85 02 F6 | 	mov	arg01, local05
02b54     48 9F 02 F6 | 	mov	local08, local01
02b58     04 9E 66 F0 | 	shl	local08, #4
02b5c     4F 85 02 F1 | 	add	arg01, local08
02b60     48 9B 82 F1 | 	sub	local06, local01
02b64     42 9B 52 FC | 	wrword	local06, arg01
02b68     42 9F 02 F6 | 	mov	local08, arg01
02b6c     02 9E 06 F1 | 	add	local08, #2
02b70     36 00 80 FF 
02b74     4F 1F 59 FC | 	wrword	##27791, local08
02b78     4C 87 0A F6 | 	mov	arg02, local05 wz
02b7c     00 6E 06 A6 |  if_e	mov	result1, #0
02b80     4A 87 82 51 |  if_ne	sub	arg02, local03
02b84     04 86 46 50 |  if_ne	shr	arg02, #4
02b88     43 6F 02 56 |  if_ne	mov	result1, arg02
02b8c     42 9F 02 F6 | 	mov	local08, arg01
02b90     04 9E 06 F1 | 	add	local08, #4
02b94     4F 6F 52 FC | 	wrword	result1, local08
02b98     4C 9F 02 F6 | 	mov	local08, local05
02b9c     06 9E 06 F1 | 	add	local08, #6
02ba0     42 87 02 F6 | 	mov	arg02, arg01
02ba4     4F 9F E2 FA | 	rdword	local08, local08
02ba8     06 86 06 F1 | 	add	arg02, #6
02bac     43 9F 52 FC | 	wrword	local08, arg02
02bb0     42 A1 02 F6 | 	mov	local09, arg01
02bb4     50 87 0A F6 | 	mov	arg02, local09 wz
02bb8     00 6E 06 A6 |  if_e	mov	result1, #0
02bbc     4A 87 82 51 |  if_ne	sub	arg02, local03
02bc0     04 86 46 50 |  if_ne	shr	arg02, #4
02bc4     43 6F 02 56 |  if_ne	mov	result1, arg02
02bc8     37 9F 02 F6 | 	mov	local08, result1
02bcc     42 A3 EA FA | 	rdword	local10, arg01 wz
02bd0     00 6E 06 A6 |  if_e	mov	result1, #0
02bd4     04 A2 66 50 |  if_ne	shl	local10, #4
02bd8     51 85 02 51 |  if_ne	add	arg01, local10
02bdc     42 6F 02 56 |  if_ne	mov	result1, arg01
02be0     37 A5 0A F6 | 	mov	local11, result1 wz
02be4     24 00 90 AD |  if_e	jmp	#LR__0373
02be8     4B A5 52 F2 | 	cmps	local11, local04 wc
02bec     1C 00 90 3D |  if_ae	jmp	#LR__0373
02bf0     50 87 0A F6 | 	mov	arg02, local09 wz
02bf4     00 6E 06 A6 |  if_e	mov	result1, #0
02bf8     4A 87 82 51 |  if_ne	sub	arg02, local03
02bfc     04 86 46 50 |  if_ne	shr	arg02, #4
02c00     43 6F 02 56 |  if_ne	mov	result1, arg02
02c04     04 A4 06 F1 | 	add	local11, #4
02c08     52 6F 52 FC | 	wrword	result1, local11
02c0c                 | LR__0373
02c0c                 | LR__0374
02c0c     06 9C 06 F1 | 	add	local07, #6
02c10     4E 9F 52 FC | 	wrword	local08, local07
02c14     36 00 00 FF 
02c18     80 A0 06 F6 | 	mov	local09, ##27776
02c1c     49 A1 42 F5 | 	or	local09, local02
02c20     00 6E 06 F6 | 	mov	result1, #0
02c24     01 6E 62 FD | 	cogid	result1
02c28     37 A1 42 F5 | 	or	local09, result1
02c2c     4C A5 02 F6 | 	mov	local11, local05
02c30     02 A4 06 F1 | 	add	local11, #2
02c34     52 A1 52 FC | 	wrword	local09, local11
02c38     4A A1 02 F6 | 	mov	local09, local03
02c3c     08 A0 06 F1 | 	add	local09, #8
02c40     4C A5 02 F6 | 	mov	local11, local05
02c44     50 A1 E2 FA | 	rdword	local09, local09
02c48     06 A4 06 F1 | 	add	local11, #6
02c4c     52 A1 52 FC | 	wrword	local09, local11
02c50     4C 87 0A F6 | 	mov	arg02, local05 wz
02c54     00 6E 06 A6 |  if_e	mov	result1, #0
02c58     4A 87 82 51 |  if_ne	sub	arg02, local03
02c5c     04 86 46 50 |  if_ne	shr	arg02, #4
02c60     43 6F 02 56 |  if_ne	mov	result1, arg02
02c64     08 94 06 F1 | 	add	local03, #8
02c68     4A 6F 52 FC | 	wrword	result1, local03
02c6c     08 98 06 F1 | 	add	local05, #8
02c70     4C 6F 02 F6 | 	mov	result1, local05
02c74                 | LR__0375
02c74     E7 F0 03 F6 | 	mov	ptra, fp
02c78     F2 00 A0 FD | 	call	#popregs_
02c7c                 | __system___gc_tryalloc_ret
02c7c     2D 00 64 FD | 	ret
02c80                 | 
02c80                 | __system___gc_alloc_managed
02c80     01 CA 05 F6 | 	mov	COUNT_, #1
02c84     E8 00 A0 FD | 	call	#pushregs_
02c88     42 91 02 F6 | 	mov	local01, arg01
02c8c     00 86 06 F6 | 	mov	arg02, #0
02c90     1C 00 B0 FD | 	call	#__system___gc_doalloc
02c94     37 87 0A F6 | 	mov	arg02, result1 wz
02c98     01 90 56 A2 |  if_e	cmps	local01, #1 wc
02c9c     00 6E 06 26 |  if_nc_and_z	mov	result1, #0
02ca0     43 6F 02 D6 |  if_c_or_nz	mov	result1, arg02
02ca4     E7 F0 03 F6 | 	mov	ptra, fp
02ca8     F2 00 A0 FD | 	call	#popregs_
02cac                 | __system___gc_alloc_managed_ret
02cac     2D 00 64 FD | 	ret
02cb0                 | 
02cb0                 | __system___gc_doalloc
02cb0     06 CA 05 F6 | 	mov	COUNT_, #6
02cb4     E8 00 A0 FD | 	call	#pushregs_
02cb8     42 91 0A F6 | 	mov	local01, arg01 wz
02cbc     43 93 02 F6 | 	mov	local02, arg02
02cc0     00 6E 06 A6 |  if_e	mov	result1, #0
02cc4     84 00 90 AD |  if_e	jmp	#LR__0387
02cc8     17 90 06 F1 | 	add	local01, #23
02ccc     0F 90 26 F5 | 	andn	local01, #15
02cd0     04 90 46 F0 | 	shr	local01, #4
02cd4     32 85 02 F6 | 	mov	arg01, ptr___system__dat__
02cd8     1C 84 06 F1 | 	add	arg01, #28
02cdc     10 F7 BF FD | 	call	#__system___lockmem
02ce0     48 85 02 F6 | 	mov	arg01, local01
02ce4     49 87 02 F6 | 	mov	arg02, local02
02ce8     DC FD BF FD | 	call	#__system___gc_tryalloc
02cec     37 95 0A F6 | 	mov	local03, result1 wz
02cf0     14 00 90 5D |  if_ne	jmp	#LR__0380
02cf4     24 03 B0 FD | 	call	#__system___gc_docollect
02cf8     48 85 02 F6 | 	mov	arg01, local01
02cfc     49 87 02 F6 | 	mov	arg02, local02
02d00     C4 FD BF FD | 	call	#__system___gc_tryalloc
02d04     37 95 02 F6 | 	mov	local03, result1
02d08                 | LR__0380
02d08     32 85 02 F6 | 	mov	arg01, ptr___system__dat__
02d0c     1C 84 06 F1 | 	add	arg01, #28
02d10     42 01 68 FC | 	wrlong	#0, arg01
02d14     00 94 0E F2 | 	cmp	local03, #0 wz
02d18     2C 00 90 AD |  if_e	jmp	#LR__0386
02d1c     04 90 66 F0 | 	shl	local01, #4
02d20     08 90 86 F1 | 	sub	local01, #8
02d24     48 97 52 F6 | 	abs	local04, local01 wc
02d28     02 96 46 F0 | 	shr	local04, #2
02d2c     4B 99 8A F6 | 	negc	local05, local04 wz
02d30     4A 9B 02 F6 | 	mov	local06, local03
02d34     10 00 90 AD |  if_e	jmp	#LR__0385
02d38     D7 06 48 FB | 	callpa	#(@LR__0383-@LR__0381)>>2,fcache_load_ptr_
02d3c                 | LR__0381
02d3c     4C 05 D8 FC | 	rep	@LR__0384, local05
02d40                 | LR__0382
02d40     4D 01 68 FC | 	wrlong	#0, local06
02d44     04 9A 06 F1 | 	add	local06, #4
02d48                 | LR__0383
02d48                 | LR__0384
02d48                 | LR__0385
02d48                 | LR__0386
02d48     4A 6F 02 F6 | 	mov	result1, local03
02d4c                 | LR__0387
02d4c     E7 F0 03 F6 | 	mov	ptra, fp
02d50     F2 00 A0 FD | 	call	#popregs_
02d54                 | __system___gc_doalloc_ret
02d54     2D 00 64 FD | 	ret
02d58                 | 
02d58                 | __system___gc_isvalidptr
02d58     F8 88 06 F4 | 	bitl	arg03, #248
02d5c     08 88 86 F1 | 	sub	arg03, #8
02d60     42 89 52 F2 | 	cmps	arg03, arg01 wc
02d64     08 00 90 CD |  if_b	jmp	#LR__0390
02d68     43 89 52 F2 | 	cmps	arg03, arg02 wc
02d6c     08 00 90 CD |  if_b	jmp	#LR__0391
02d70                 | LR__0390
02d70     00 6E 06 F6 | 	mov	result1, #0
02d74     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
02d78                 | LR__0391
02d78     44 75 02 F6 | 	mov	_var01, arg03
02d7c     42 75 62 F5 | 	xor	_var01, arg01
02d80     0F 74 CE F7 | 	test	_var01, #15 wz
02d84     00 6E 06 56 |  if_ne	mov	result1, #0
02d88     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
02d8c     44 75 02 F6 | 	mov	_var01, arg03
02d90     02 74 06 F1 | 	add	_var01, #2
02d94     3A 75 E2 FA | 	rdword	_var01, _var01
02d98     7F 00 00 FF 
02d9c     C0 75 06 F5 | 	and	_var01, ##65472
02da0     36 00 00 FF 
02da4     80 74 0E F2 | 	cmp	_var01, ##27776 wz
02da8     00 6E 06 56 |  if_ne	mov	result1, #0
02dac     44 6F 02 A6 |  if_e	mov	result1, arg03
02db0                 | __system___gc_isvalidptr_ret
02db0     2D 00 64 FD | 	ret
02db4                 | 
02db4                 | __system___gc_dofree
02db4     06 CA 05 F6 | 	mov	COUNT_, #6
02db8     E8 00 A0 FD | 	call	#pushregs_
02dbc     42 91 02 F6 | 	mov	local01, arg01
02dc0     6C FC BF FD | 	call	#__system___gc_ptrs
02dc4     37 93 02 F6 | 	mov	local02, result1
02dc8     38 95 02 F6 | 	mov	local03, result2
02dcc     48 87 02 F6 | 	mov	arg02, local01
02dd0     02 86 06 F1 | 	add	arg02, #2
02dd4     36 00 80 FF 
02dd8     43 1F 59 FC | 	wrword	##27791, arg02
02ddc     48 97 02 F6 | 	mov	local04, local01
02de0     48 85 02 F6 | 	mov	arg01, local01
02de4     42 99 EA FA | 	rdword	local05, arg01 wz
02de8     00 6E 06 A6 |  if_e	mov	result1, #0
02dec     04 98 66 50 |  if_ne	shl	local05, #4
02df0     4C 85 02 51 |  if_ne	add	arg01, local05
02df4     42 6F 02 56 |  if_ne	mov	result1, arg01
02df8     37 9B 02 F6 | 	mov	local06, result1
02dfc     D7 24 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
02e00                 | LR__0400
02e00     04 96 06 F1 | 	add	local04, #4
02e04     4B 87 EA FA | 	rdword	arg02, local04 wz
02e08     49 85 02 F6 | 	mov	arg01, local02
02e0c     00 6E 06 A6 |  if_e	mov	result1, #0
02e10     04 86 66 50 |  if_ne	shl	arg02, #4
02e14     43 85 02 51 |  if_ne	add	arg01, arg02
02e18     42 6F 02 56 |  if_ne	mov	result1, arg01
02e1c     37 97 0A F6 | 	mov	local04, result1 wz
02e20     24 00 90 AD |  if_e	jmp	#LR__0402
02e24     4B 85 02 F6 | 	mov	arg01, local04
02e28     00 6E 06 F6 | 	mov	result1, #0
02e2c     02 84 06 F1 | 	add	arg01, #2
02e30     42 85 E2 FA | 	rdword	arg01, arg01
02e34     36 00 00 FF 
02e38     8F 84 0E F2 | 	cmp	arg01, ##27791 wz
02e3c     01 6E 66 A6 |  if_e	neg	result1, #1
02e40     00 6E 0E F2 | 	cmp	result1, #0 wz
02e44     B8 FF 9F AD |  if_e	jmp	#LR__0400
02e48                 | LR__0401
02e48                 | LR__0402
02e48     00 96 0E F2 | 	cmp	local04, #0 wz
02e4c     49 97 02 A6 |  if_e	mov	local04, local02
02e50     4B 87 02 F6 | 	mov	arg02, local04
02e54     06 86 06 F1 | 	add	arg02, #6
02e58     48 85 02 F6 | 	mov	arg01, local01
02e5c     43 87 E2 FA | 	rdword	arg02, arg02
02e60     06 84 06 F1 | 	add	arg01, #6
02e64     42 87 52 FC | 	wrword	arg02, arg01
02e68     48 87 0A F6 | 	mov	arg02, local01 wz
02e6c     00 6E 06 A6 |  if_e	mov	result1, #0
02e70     49 87 82 51 |  if_ne	sub	arg02, local02
02e74     04 86 46 50 |  if_ne	shr	arg02, #4
02e78     43 6F 02 56 |  if_ne	mov	result1, arg02
02e7c     4B 87 02 F6 | 	mov	arg02, local04
02e80     06 86 06 F1 | 	add	arg02, #6
02e84     43 6F 52 FC | 	wrword	result1, arg02
02e88     49 97 0A F2 | 	cmp	local04, local02 wz
02e8c     A4 00 90 AD |  if_e	jmp	#LR__0405
02e90     4B 85 02 F6 | 	mov	arg01, local04
02e94     42 99 EA FA | 	rdword	local05, arg01 wz
02e98     00 6E 06 A6 |  if_e	mov	result1, #0
02e9c     04 98 66 50 |  if_ne	shl	local05, #4
02ea0     4C 85 02 51 |  if_ne	add	arg01, local05
02ea4     42 6F 02 56 |  if_ne	mov	result1, arg01
02ea8     48 6F 0A F2 | 	cmp	result1, local01 wz
02eac     84 00 90 5D |  if_ne	jmp	#LR__0404
02eb0     4B 9B E2 FA | 	rdword	local06, local04
02eb4     48 87 E2 FA | 	rdword	arg02, local01
02eb8     43 9B 02 F1 | 	add	local06, arg02
02ebc     4B 9B 52 FC | 	wrword	local06, local04
02ec0     48 9B 02 F6 | 	mov	local06, local01
02ec4     02 9A 06 F1 | 	add	local06, #2
02ec8     4D 01 58 FC | 	wrword	#0, local06
02ecc     48 85 02 F6 | 	mov	arg01, local01
02ed0     42 99 EA FA | 	rdword	local05, arg01 wz
02ed4     00 6E 06 A6 |  if_e	mov	result1, #0
02ed8     04 98 66 50 |  if_ne	shl	local05, #4
02edc     4C 85 02 51 |  if_ne	add	arg01, local05
02ee0     42 6F 02 56 |  if_ne	mov	result1, arg01
02ee4     37 9B 02 F6 | 	mov	local06, result1
02ee8     4A 9B 52 F2 | 	cmps	local06, local03 wc
02eec     20 00 90 3D |  if_ae	jmp	#LR__0403
02ef0     4B 87 0A F6 | 	mov	arg02, local04 wz
02ef4     00 6E 06 A6 |  if_e	mov	result1, #0
02ef8     49 87 82 51 |  if_ne	sub	arg02, local02
02efc     04 86 46 50 |  if_ne	shr	arg02, #4
02f00     43 6F 02 56 |  if_ne	mov	result1, arg02
02f04     4D 87 02 F6 | 	mov	arg02, local06
02f08     04 86 06 F1 | 	add	arg02, #4
02f0c     43 6F 52 FC | 	wrword	result1, arg02
02f10                 | LR__0403
02f10     48 87 02 F6 | 	mov	arg02, local01
02f14     06 86 06 F1 | 	add	arg02, #6
02f18     4B 71 02 F6 | 	mov	result2, local04
02f1c     43 87 E2 FA | 	rdword	arg02, arg02
02f20     06 70 06 F1 | 	add	result2, #6
02f24     38 87 52 FC | 	wrword	arg02, result2
02f28     06 90 06 F1 | 	add	local01, #6
02f2c     48 01 58 FC | 	wrword	#0, local01
02f30     4B 91 02 F6 | 	mov	local01, local04
02f34                 | LR__0404
02f34                 | LR__0405
02f34     48 85 02 F6 | 	mov	arg01, local01
02f38     42 99 EA FA | 	rdword	local05, arg01 wz
02f3c     00 6E 06 A6 |  if_e	mov	result1, #0
02f40     04 98 66 50 |  if_ne	shl	local05, #4
02f44     4C 85 02 51 |  if_ne	add	arg01, local05
02f48     42 6F 02 56 |  if_ne	mov	result1, arg01
02f4c     37 87 0A F6 | 	mov	arg02, result1 wz
02f50     B8 00 90 AD |  if_e	jmp	#LR__0407
02f54     4A 87 52 F2 | 	cmps	arg02, local03 wc
02f58     B0 00 90 3D |  if_ae	jmp	#LR__0407
02f5c     43 85 02 F6 | 	mov	arg01, arg02
02f60     00 6E 06 F6 | 	mov	result1, #0
02f64     02 84 06 F1 | 	add	arg01, #2
02f68     42 85 E2 FA | 	rdword	arg01, arg01
02f6c     36 00 00 FF 
02f70     8F 84 0E F2 | 	cmp	arg01, ##27791 wz
02f74     01 6E 66 A6 |  if_e	neg	result1, #1
02f78     00 6E 0E F2 | 	cmp	result1, #0 wz
02f7c     8C 00 90 AD |  if_e	jmp	#LR__0407
02f80     48 97 02 F6 | 	mov	local04, local01
02f84     4B 9B E2 FA | 	rdword	local06, local04
02f88     43 85 02 F6 | 	mov	arg01, arg02
02f8c     42 91 E2 FA | 	rdword	local01, arg01
02f90     48 9B 02 F1 | 	add	local06, local01
02f94     4B 9B 52 FC | 	wrword	local06, local04
02f98     42 9B 02 F6 | 	mov	local06, arg01
02f9c     06 9A 06 F1 | 	add	local06, #6
02fa0     4B 91 02 F6 | 	mov	local01, local04
02fa4     4D 9B E2 FA | 	rdword	local06, local06
02fa8     06 90 06 F1 | 	add	local01, #6
02fac     48 9B 52 FC | 	wrword	local06, local01
02fb0     42 9B 02 F6 | 	mov	local06, arg01
02fb4     02 9A 06 F1 | 	add	local06, #2
02fb8     4D 55 59 FC | 	wrword	#170, local06
02fbc     42 9B 02 F6 | 	mov	local06, arg01
02fc0     06 9A 06 F1 | 	add	local06, #6
02fc4     4D 01 58 FC | 	wrword	#0, local06
02fc8     42 99 EA FA | 	rdword	local05, arg01 wz
02fcc     00 6E 06 A6 |  if_e	mov	result1, #0
02fd0     04 98 66 50 |  if_ne	shl	local05, #4
02fd4     4C 85 02 51 |  if_ne	add	arg01, local05
02fd8     42 6F 02 56 |  if_ne	mov	result1, arg01
02fdc     37 9B 0A F6 | 	mov	local06, result1 wz
02fe0     28 00 90 AD |  if_e	jmp	#LR__0406
02fe4     4A 9B 52 F2 | 	cmps	local06, local03 wc
02fe8     20 00 90 3D |  if_ae	jmp	#LR__0406
02fec     4B 87 0A F6 | 	mov	arg02, local04 wz
02ff0     00 6E 06 A6 |  if_e	mov	result1, #0
02ff4     49 87 82 51 |  if_ne	sub	arg02, local02
02ff8     04 86 46 50 |  if_ne	shr	arg02, #4
02ffc     43 6F 02 56 |  if_ne	mov	result1, arg02
03000     4D 97 02 F6 | 	mov	local04, local06
03004     04 96 06 F1 | 	add	local04, #4
03008     4B 6F 52 FC | 	wrword	result1, local04
0300c                 | LR__0406
0300c                 | LR__0407
0300c     4D 6F 02 F6 | 	mov	result1, local06
03010     E7 F0 03 F6 | 	mov	ptra, fp
03014     F2 00 A0 FD | 	call	#popregs_
03018                 | __system___gc_dofree_ret
03018     2D 00 64 FD | 	ret
0301c                 | 
0301c                 | __system___gc_docollect
0301c     05 CA 05 F6 | 	mov	COUNT_, #5
03020     E8 00 A0 FD | 	call	#pushregs_
03024     08 FA BF FD | 	call	#__system___gc_ptrs
03028     38 91 02 F6 | 	mov	local01, result2
0302c     37 93 02 F6 | 	mov	local02, result1
03030     49 85 02 F6 | 	mov	arg01, local02
03034     42 95 EA FA | 	rdword	local03, arg01 wz
03038     00 6E 06 A6 |  if_e	mov	result1, #0
0303c     04 94 66 50 |  if_ne	shl	local03, #4
03040     4A 85 02 51 |  if_ne	add	arg01, local03
03044     42 6F 02 56 |  if_ne	mov	result1, arg01
03048     37 97 0A F6 | 	mov	local04, result1 wz
0304c     00 6E 06 F6 | 	mov	result1, #0
03050     01 6E 62 FD | 	cogid	result1
03054     37 99 02 F6 | 	mov	local05, result1
03058     48 00 90 AD |  if_e	jmp	#LR__0412
0305c     D7 22 48 FB | 	callpa	#(@LR__0411-@LR__0410)>>2,fcache_load_ptr_
03060                 | LR__0410
03060     48 97 52 F2 | 	cmps	local04, local01 wc
03064     3C 00 90 3D |  if_ae	jmp	#LR__0412
03068     4B 87 02 F6 | 	mov	arg02, local04
0306c     02 86 06 F1 | 	add	arg02, #2
03070     43 87 E2 FA | 	rdword	arg02, arg02
03074     20 86 26 F5 | 	andn	arg02, #32
03078     4B 85 02 F6 | 	mov	arg01, local04
0307c     02 84 06 F1 | 	add	arg01, #2
03080     42 87 52 FC | 	wrword	arg02, arg01
03084     4B 85 02 F6 | 	mov	arg01, local04
03088     42 95 EA FA | 	rdword	local03, arg01 wz
0308c     00 6E 06 A6 |  if_e	mov	result1, #0
03090     04 94 66 50 |  if_ne	shl	local03, #4
03094     4A 85 02 51 |  if_ne	add	arg01, local03
03098     42 6F 02 56 |  if_ne	mov	result1, arg01
0309c     37 97 0A F6 | 	mov	local04, result1 wz
030a0     BC FF 9F 5D |  if_ne	jmp	#LR__0410
030a4                 | LR__0411
030a4                 | LR__0412
030a4     00 94 06 F6 | 	mov	local03, #0
030a8     00 84 06 F6 | 	mov	arg01, #0
030ac     18 F3 BF FD | 	call	#__system____topofstack
030b0     37 87 02 F6 | 	mov	arg02, result1
030b4     4A 85 02 F6 | 	mov	arg01, local03
030b8     90 00 B0 FD | 	call	#__system___gc_markhub
030bc     1C 01 B0 FD | 	call	#__system___gc_markcog
030c0     49 85 02 F6 | 	mov	arg01, local02
030c4     42 95 EA FA | 	rdword	local03, arg01 wz
030c8     00 6E 06 A6 |  if_e	mov	result1, #0
030cc     04 94 66 50 |  if_ne	shl	local03, #4
030d0     4A 85 02 51 |  if_ne	add	arg01, local03
030d4     42 6F 02 56 |  if_ne	mov	result1, arg01
030d8     37 93 0A F6 | 	mov	local02, result1 wz
030dc     60 00 90 AD |  if_e	jmp	#LR__0416
030e0                 | LR__0413
030e0     49 97 02 F6 | 	mov	local04, local02
030e4     4B 85 02 F6 | 	mov	arg01, local04
030e8     42 95 EA FA | 	rdword	local03, arg01 wz
030ec     00 6E 06 A6 |  if_e	mov	result1, #0
030f0     04 94 66 50 |  if_ne	shl	local03, #4
030f4     4A 85 02 51 |  if_ne	add	arg01, local03
030f8     42 6F 02 56 |  if_ne	mov	result1, arg01
030fc     37 93 02 F6 | 	mov	local02, result1
03100     4B 87 02 F6 | 	mov	arg02, local04
03104     02 86 06 F1 | 	add	arg02, #2
03108     43 87 E2 FA | 	rdword	arg02, arg02
0310c     20 86 CE F7 | 	test	arg02, #32 wz
03110     10 86 CE A7 |  if_e	test	arg02, #16 wz
03114     1C 00 90 5D |  if_ne	jmp	#LR__0415
03118     43 87 42 F8 | 	getnib	arg02, arg02, #0
0311c     4C 87 0A F2 | 	cmp	arg02, local05 wz
03120     0E 86 0E 52 |  if_ne	cmp	arg02, #14 wz
03124     0C 00 90 5D |  if_ne	jmp	#LR__0414
03128     4B 85 02 F6 | 	mov	arg01, local04
0312c     84 FC BF FD | 	call	#__system___gc_dofree
03130     37 93 02 F6 | 	mov	local02, result1
03134                 | LR__0414
03134                 | LR__0415
03134     00 92 0E F2 | 	cmp	local02, #0 wz
03138     48 93 52 52 |  if_ne	cmps	local02, local01 wc
0313c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__0413
03140                 | LR__0416
03140     E7 F0 03 F6 | 	mov	ptra, fp
03144     F2 00 A0 FD | 	call	#popregs_
03148                 | __system___gc_docollect_ret
03148     2D 00 64 FD | 	ret
0314c                 | 
0314c                 | __system___gc_markhub
0314c     04 CA 05 F6 | 	mov	COUNT_, #4
03150     E8 00 A0 FD | 	call	#pushregs_
03154     42 91 02 F6 | 	mov	local01, arg01
03158     43 93 02 F6 | 	mov	local02, arg02
0315c     D0 F8 BF FD | 	call	#__system___gc_ptrs
03160     37 95 02 F6 | 	mov	local03, result1
03164     38 97 02 F6 | 	mov	local04, result2
03168                 | LR__0420
03168     49 91 52 F2 | 	cmps	local01, local02 wc
0316c     60 00 90 3D |  if_ae	jmp	#LR__0421
03170     48 89 02 FB | 	rdlong	arg03, local01
03174     04 90 06 F1 | 	add	local01, #4
03178     4B 87 02 F6 | 	mov	arg02, local04
0317c     4A 85 02 F6 | 	mov	arg01, local03
03180     D4 FB BF FD | 	call	#__system___gc_isvalidptr
03184     37 89 0A F6 | 	mov	arg03, result1 wz
03188     DC FF 9F AD |  if_e	jmp	#LR__0420
0318c     44 85 02 F6 | 	mov	arg01, arg03
03190     00 6E 06 F6 | 	mov	result1, #0
03194     02 84 06 F1 | 	add	arg01, #2
03198     42 85 E2 FA | 	rdword	arg01, arg01
0319c     36 00 00 FF 
031a0     8F 84 0E F2 | 	cmp	arg01, ##27791 wz
031a4     01 6E 66 A6 |  if_e	neg	result1, #1
031a8     00 6E 0E F2 | 	cmp	result1, #0 wz
031ac     B8 FF 9F 5D |  if_ne	jmp	#LR__0420
031b0     44 71 02 F6 | 	mov	result2, arg03
031b4     02 70 06 F1 | 	add	result2, #2
031b8     38 71 E2 FA | 	rdword	result2, result2
031bc     0F 70 26 F5 | 	andn	result2, #15
031c0     2E 70 46 F5 | 	or	result2, #46
031c4     02 88 06 F1 | 	add	arg03, #2
031c8     44 71 52 FC | 	wrword	result2, arg03
031cc     98 FF 9F FD | 	jmp	#LR__0420
031d0                 | LR__0421
031d0     E7 F0 03 F6 | 	mov	ptra, fp
031d4     F2 00 A0 FD | 	call	#popregs_
031d8                 | __system___gc_markhub_ret
031d8     2D 00 64 FD | 	ret
031dc                 | 
031dc                 | __system___gc_markcog
031dc     04 CA 05 F6 | 	mov	COUNT_, #4
031e0     E8 00 A0 FD | 	call	#pushregs_
031e4     48 F8 BF FD | 	call	#__system___gc_ptrs
031e8     37 91 02 F6 | 	mov	local01, result1
031ec     38 93 02 F6 | 	mov	local02, result2
031f0     EF 95 06 F6 | 	mov	local03, #495
031f4                 | LR__0430
031f4                 | 	'.live	local03
031f4     00 94 96 F9 | 	alts	local03, #0
031f8     4A 97 02 F6 | 	mov	local04, local03
031fc     48 85 02 F6 | 	mov	arg01, local01
03200     49 87 02 F6 | 	mov	arg02, local02
03204     4B 89 02 F6 | 	mov	arg03, local04
03208     4C FB BF FD | 	call	#__system___gc_isvalidptr
0320c     00 6E 0E F2 | 	cmp	result1, #0 wz
03210     18 00 90 AD |  if_e	jmp	#LR__0431
03214     37 97 02 F6 | 	mov	local04, result1
03218     02 96 06 F1 | 	add	local04, #2
0321c     4B 97 E2 FA | 	rdword	local04, local04
03220     20 96 46 F5 | 	or	local04, #32
03224     02 6E 06 F1 | 	add	result1, #2
03228     37 97 52 FC | 	wrword	local04, result1
0322c                 | LR__0431
0322c     01 94 86 F1 | 	sub	local03, #1
03230     00 94 56 F2 | 	cmps	local03, #0 wc
03234     BC FF 9F 3D |  if_ae	jmp	#LR__0430
03238     E7 F0 03 F6 | 	mov	ptra, fp
0323c     F2 00 A0 FD | 	call	#popregs_
03240                 | __system___gc_markcog_ret
03240     2D 00 64 FD | 	ret
03244                 | 
03244                 | __system___closeraw
03244     05 CA 05 F6 | 	mov	COUNT_, #5
03248     E8 00 A0 FD | 	call	#pushregs_
0324c     42 91 02 F6 | 	mov	local01, arg01
03250     00 92 06 F6 | 	mov	local02, #0
03254     08 90 06 F1 | 	add	local01, #8
03258     48 6F 0A FB | 	rdlong	result1, local01 wz
0325c     08 90 86 F1 | 	sub	local01, #8
03260     20 64 06 A1 |  if_e	add	ptr___system__dat__, #32
03264     32 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
03268     20 64 86 A1 |  if_e	sub	ptr___system__dat__, #32
0326c     01 6E 66 A6 |  if_e	neg	result1, #1
03270     A8 00 90 AD |  if_e	jmp	#LR__0442
03274     2C 90 06 F1 | 	add	local01, #44
03278     48 6F 0A FB | 	rdlong	result1, local01 wz
0327c     2C 90 86 F1 | 	sub	local01, #44
03280     38 00 90 AD |  if_e	jmp	#LR__0440
03284     2C 90 06 F1 | 	add	local01, #44
03288     48 95 02 FB | 	rdlong	local03, local01
0328c     4A 97 02 F6 | 	mov	local04, local03
03290     2C 90 86 F1 | 	sub	local01, #44
03294     13 96 46 F7 | 	zerox	local04, #19
03298     14 94 46 F0 | 	shr	local03, #20
0329c     02 94 66 F0 | 	shl	local03, #2
032a0     2D 95 02 F1 | 	add	local03, __methods__
032a4     4A 95 02 FB | 	rdlong	local03, local03
032a8     48 85 02 F6 | 	mov	arg01, local01
032ac     31 99 02 F6 | 	mov	local05, objptr
032b0     4B 63 02 F6 | 	mov	objptr, local04
032b4     2D 94 62 FD | 	call	local03
032b8     4C 63 02 F6 | 	mov	objptr, local05
032bc                 | LR__0440
032bc     24 90 06 F1 | 	add	local01, #36
032c0     48 99 0A FB | 	rdlong	local05, local01 wz
032c4     24 90 86 F1 | 	sub	local01, #36
032c8     3C 00 90 AD |  if_e	jmp	#LR__0441
032cc     24 90 06 F1 | 	add	local01, #36
032d0     48 95 02 FB | 	rdlong	local03, local01
032d4     4A 97 02 F6 | 	mov	local04, local03
032d8     24 90 86 F1 | 	sub	local01, #36
032dc     13 96 46 F7 | 	zerox	local04, #19
032e0     14 94 46 F0 | 	shr	local03, #20
032e4     02 94 66 F0 | 	shl	local03, #2
032e8     2D 95 02 F1 | 	add	local03, __methods__
032ec     4A 95 02 FB | 	rdlong	local03, local03
032f0     48 85 02 F6 | 	mov	arg01, local01
032f4     31 99 02 F6 | 	mov	local05, objptr
032f8     4B 63 02 F6 | 	mov	objptr, local04
032fc     2D 94 62 FD | 	call	local03
03300     4C 63 02 F6 | 	mov	objptr, local05
03304     37 93 02 F6 | 	mov	local02, result1
03308                 | LR__0441
03308     48 85 02 F6 | 	mov	arg01, local01
0330c     00 86 06 F6 | 	mov	arg02, #0
03310     34 88 06 F6 | 	mov	arg03, #52
03314     D8 00 A0 FD | 	call	#\builtin_bytefill_
03318     49 6F 02 F6 | 	mov	result1, local02
0331c                 | LR__0442
0331c     E7 F0 03 F6 | 	mov	ptra, fp
03320     F2 00 A0 FD | 	call	#popregs_
03324                 | __system___closeraw_ret
03324     2D 00 64 FD | 	ret
03328                 | 
03328                 | __system____default_getc
03328     03 CA 05 F6 | 	mov	COUNT_, #3
0332c     E8 00 A0 FD | 	call	#pushregs_
03330     42 91 02 F6 | 	mov	local01, arg01
03334     48 93 02 FB | 	rdlong	local02, local01
03338     08 90 06 F1 | 	add	local01, #8
0333c     48 95 02 FB | 	rdlong	local03, local01
03340     08 90 86 F1 | 	sub	local01, #8
03344     08 94 CE F7 | 	test	local03, #8 wz
03348     48 85 02 56 |  if_ne	mov	arg01, local01
0334c     08 01 B0 5D |  if_ne	call	#__system____default_flush
03350     08 90 06 F1 | 	add	local01, #8
03354     48 95 02 FB | 	rdlong	local03, local01
03358     04 94 46 F5 | 	or	local03, #4
0335c     48 95 62 FC | 	wrlong	local03, local01
03360     08 90 86 F1 | 	sub	local01, #8
03364     49 95 0A FB | 	rdlong	local03, local02 wz
03368     0C 00 90 5D |  if_ne	jmp	#LR__0450
0336c     48 85 02 F6 | 	mov	arg01, local01
03370     F8 04 B0 FD | 	call	#__system____default_filbuf
03374     37 95 02 F6 | 	mov	local03, result1
03378                 | LR__0450
03378     01 94 56 F2 | 	cmps	local03, #1 wc
0337c     01 6E 66 C6 |  if_b	neg	result1, #1
03380     1C 00 90 CD |  if_b	jmp	#LR__0451
03384     01 94 86 F1 | 	sub	local03, #1
03388     49 95 62 FC | 	wrlong	local03, local02
0338c     04 92 06 F1 | 	add	local02, #4
03390     49 95 02 FB | 	rdlong	local03, local02
03394     4A 6F C2 FA | 	rdbyte	result1, local03
03398     01 94 06 F1 | 	add	local03, #1
0339c     49 95 62 FC | 	wrlong	local03, local02
033a0                 | LR__0451
033a0     E7 F0 03 F6 | 	mov	ptra, fp
033a4     F2 00 A0 FD | 	call	#popregs_
033a8                 | __system____default_getc_ret
033a8     2D 00 64 FD | 	ret
033ac                 | 
033ac                 | __system____default_putc
033ac     06 CA 05 F6 | 	mov	COUNT_, #6
033b0     E8 00 A0 FD | 	call	#pushregs_
033b4     42 91 02 F6 | 	mov	local01, arg01
033b8     43 93 02 F6 | 	mov	local02, arg02
033bc     49 95 02 FB | 	rdlong	local03, local02
033c0     08 92 06 F1 | 	add	local02, #8
033c4     49 87 02 FB | 	rdlong	arg02, local02
033c8     08 92 86 F1 | 	sub	local02, #8
033cc     04 86 CE F7 | 	test	arg02, #4 wz
033d0     49 85 02 56 |  if_ne	mov	arg01, local02
033d4     80 00 B0 5D |  if_ne	call	#__system____default_flush
033d8     08 92 06 F1 | 	add	local02, #8
033dc     49 97 02 FB | 	rdlong	local04, local02
033e0     08 96 46 F5 | 	or	local04, #8
033e4     49 97 62 FC | 	wrlong	local04, local02
033e8     4A 99 02 FB | 	rdlong	local05, local03
033ec     0C 94 06 F1 | 	add	local03, #12
033f0     4A 87 02 FB | 	rdlong	arg02, local03
033f4     0C 94 86 F1 | 	sub	local03, #12
033f8     4C 6F 02 F6 | 	mov	result1, local05
033fc     43 6F 02 F1 | 	add	result1, arg02
03400     37 91 42 FC | 	wrbyte	local01, result1
03404     48 91 E2 F8 | 	getbyte	local01, local01, #0
03408     01 98 06 F1 | 	add	local05, #1
0340c     4A 99 62 FC | 	wrlong	local05, local03
03410     02 92 86 F1 | 	sub	local02, #2
03414     49 9B EA FA | 	rdword	local06, local02 wz
03418     06 92 86 F1 | 	sub	local02, #6
0341c     08 94 06 51 |  if_ne	add	local03, #8
03420     4A 97 02 5B |  if_ne	rdlong	local04, local03
03424     4B 99 0A 52 |  if_ne	cmp	local05, local04 wz
03428     0C 00 90 AD |  if_e	jmp	#LR__0460
0342c     0A 90 0E F2 | 	cmp	local01, #10 wz
03430     01 9A 0E A2 |  if_e	cmp	local06, #1 wz
03434     10 00 90 5D |  if_ne	jmp	#LR__0461
03438                 | LR__0460
03438     49 85 02 F6 | 	mov	arg01, local02
0343c     18 00 B0 FD | 	call	#__system____default_flush
03440     00 6E 0E F2 | 	cmp	result1, #0 wz
03444     01 90 66 56 |  if_ne	neg	local01, #1
03448                 | LR__0461
03448     48 6F 02 F6 | 	mov	result1, local01
0344c     E7 F0 03 F6 | 	mov	ptra, fp
03450     F2 00 A0 FD | 	call	#popregs_
03454                 | __system____default_putc_ret
03454     2D 00 64 FD | 	ret
03458                 | 
03458                 | __system____default_flush
03458     07 CA 05 F6 | 	mov	COUNT_, #7
0345c     E8 00 A0 FD | 	call	#pushregs_
03460     42 91 02 F6 | 	mov	local01, arg01
03464     48 93 02 FB | 	rdlong	local02, local01
03468     49 95 02 FB | 	rdlong	local03, local02
0346c     08 90 06 F1 | 	add	local01, #8
03470     48 71 02 FB | 	rdlong	result2, local01
03474     08 90 86 F1 | 	sub	local01, #8
03478     08 70 CE F7 | 	test	result2, #8 wz
0347c     D4 00 90 AD |  if_e	jmp	#LR__0472
03480     01 94 56 F2 | 	cmps	local03, #1 wc
03484     2C 01 90 CD |  if_b	jmp	#LR__0474
03488     08 90 06 F1 | 	add	local01, #8
0348c     48 71 02 FB | 	rdlong	result2, local01
03490     08 90 86 F1 | 	sub	local01, #8
03494     80 70 CE F7 | 	test	result2, #128 wz
03498     6C 00 90 AD |  if_e	jmp	#LR__0471
0349c     08 90 06 F1 | 	add	local01, #8
034a0     48 89 02 FB | 	rdlong	arg03, local01
034a4     08 90 86 F1 | 	sub	local01, #8
034a8     00 89 CE F7 | 	test	arg03, #256 wz
034ac     58 00 90 AD |  if_e	jmp	#LR__0470
034b0     30 90 06 F1 | 	add	local01, #48
034b4     48 97 02 FB | 	rdlong	local04, local01
034b8     4B 99 02 F6 | 	mov	local05, local04
034bc     30 90 86 F1 | 	sub	local01, #48
034c0     13 98 46 F7 | 	zerox	local05, #19
034c4     14 96 46 F0 | 	shr	local04, #20
034c8     02 96 66 F0 | 	shl	local04, #2
034cc     2D 97 02 F1 | 	add	local04, __methods__
034d0     4B 97 02 FB | 	rdlong	local04, local04
034d4     48 85 02 F6 | 	mov	arg01, local01
034d8     00 86 06 F6 | 	mov	arg02, #0
034dc     00 88 06 F6 | 	mov	arg03, #0
034e0     02 8A 06 F6 | 	mov	arg04, #2
034e4     31 9B 02 F6 | 	mov	local06, objptr
034e8     4C 63 02 F6 | 	mov	objptr, local05
034ec     2D 96 62 FD | 	call	local04
034f0     4D 63 02 F6 | 	mov	objptr, local06
034f4     08 90 06 F1 | 	add	local01, #8
034f8     48 9B 02 FB | 	rdlong	local06, local01
034fc     00 9B 26 F5 | 	andn	local06, #256
03500     48 9B 62 FC | 	wrlong	local06, local01
03504     08 90 86 F1 | 	sub	local01, #8
03508                 | LR__0470
03508                 | LR__0471
03508     18 90 06 F1 | 	add	local01, #24
0350c     48 97 02 FB | 	rdlong	local04, local01
03510     4B 99 02 F6 | 	mov	local05, local04
03514     18 90 86 F1 | 	sub	local01, #24
03518     13 98 46 F7 | 	zerox	local05, #19
0351c     14 96 46 F0 | 	shr	local04, #20
03520     02 96 66 F0 | 	shl	local04, #2
03524     2D 97 02 F1 | 	add	local04, __methods__
03528     4B 97 02 FB | 	rdlong	local04, local04
0352c     0C 92 06 F1 | 	add	local02, #12
03530     49 87 02 FB | 	rdlong	arg02, local02
03534     0C 92 86 F1 | 	sub	local02, #12
03538     48 85 02 F6 | 	mov	arg01, local01
0353c     4A 89 02 F6 | 	mov	arg03, local03
03540     31 9B 02 F6 | 	mov	local06, objptr
03544     4C 63 02 F6 | 	mov	objptr, local05
03548     2D 96 62 FD | 	call	local04
0354c     4D 63 02 F6 | 	mov	objptr, local06
03550     60 00 90 FD | 	jmp	#LR__0474
03554                 | LR__0472
03554     08 90 06 F1 | 	add	local01, #8
03558     48 9B 02 FB | 	rdlong	local06, local01
0355c     08 90 86 F1 | 	sub	local01, #8
03560     04 9A CE F7 | 	test	local06, #4 wz
03564     00 94 0E 52 |  if_ne	cmp	local03, #0 wz
03568     48 00 90 AD |  if_e	jmp	#LR__0473
0356c     4A 87 62 F6 | 	neg	arg02, local03
03570     43 89 02 F6 | 	mov	arg03, arg02
03574     1F 88 C6 F0 | 	sar	arg03, #31
03578     30 90 06 F1 | 	add	local01, #48
0357c     48 97 02 FB | 	rdlong	local04, local01
03580     4B 99 02 F6 | 	mov	local05, local04
03584     30 90 86 F1 | 	sub	local01, #48
03588     13 98 46 F7 | 	zerox	local05, #19
0358c     14 96 46 F0 | 	shr	local04, #20
03590     02 96 66 F0 | 	shl	local04, #2
03594     2D 97 02 F1 | 	add	local04, __methods__
03598     4B 97 02 FB | 	rdlong	local04, local04
0359c     48 85 02 F6 | 	mov	arg01, local01
035a0     01 8A 06 F6 | 	mov	arg04, #1
035a4     31 9B 02 F6 | 	mov	local06, objptr
035a8     4C 63 02 F6 | 	mov	objptr, local05
035ac     2D 96 62 FD | 	call	local04
035b0     4D 63 02 F6 | 	mov	objptr, local06
035b4                 | LR__0473
035b4                 | LR__0474
035b4     49 01 68 FC | 	wrlong	#0, local02
035b8     04 92 06 F1 | 	add	local02, #4
035bc     49 01 68 FC | 	wrlong	#0, local02
035c0     08 90 06 F1 | 	add	local01, #8
035c4     48 9D 02 FB | 	rdlong	local07, local01
035c8     0C 9C 26 F5 | 	andn	local07, #12
035cc     48 9D 62 FC | 	wrlong	local07, local01
035d0     00 6E 06 F6 | 	mov	result1, #0
035d4     E7 F0 03 F6 | 	mov	ptra, fp
035d8     F2 00 A0 FD | 	call	#popregs_
035dc                 | __system____default_flush_ret
035dc     2D 00 64 FD | 	ret
035e0                 | 
035e0                 | __system____getftab
035e0     0A 84 16 F2 | 	cmp	arg01, #10 wc
035e4     34 84 06 CD |  if_b	qmul	arg01, #52
035e8     00 6E 06 36 |  if_ae	mov	result1, #0
035ec     32 85 02 C6 |  if_b	mov	arg01, ptr___system__dat__
035f0     28 84 06 C1 |  if_b	add	arg01, #40
035f4     18 6E 62 CD |  if_b	getqx	result1
035f8     42 6F 02 C1 |  if_b	add	result1, arg01
035fc                 | __system____getftab_ret
035fc     2D 00 64 FD | 	ret
03600                 | 
03600                 | __system___strrev
03600     42 75 CA FA | 	rdbyte	_var01, arg01 wz
03604     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
03608     42 77 02 F6 | 	mov	_var02, arg01
0360c     D7 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
03610                 | LR__0480
03610     3B 75 CA FA | 	rdbyte	_var01, _var02 wz
03614     01 76 06 51 |  if_ne	add	_var02, #1
03618     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
0361c                 | LR__0481
0361c     01 76 86 F1 | 	sub	_var02, #1
03620     D7 12 48 FB | 	callpa	#(@LR__0483-@LR__0482)>>2,fcache_load_ptr_
03624                 | LR__0482
03624     42 77 5A F2 | 	cmps	_var02, arg01 wcz
03628     1C 00 90 ED |  if_be	jmp	#LR__0484
0362c     42 75 C2 FA | 	rdbyte	_var01, arg01
03630     3B 79 C2 FA | 	rdbyte	_var03, _var02
03634     42 79 42 FC | 	wrbyte	_var03, arg01
03638     3B 75 42 FC | 	wrbyte	_var01, _var02
0363c     01 84 06 F1 | 	add	arg01, #1
03640     01 76 86 F1 | 	sub	_var02, #1
03644     DC FF 9F FD | 	jmp	#LR__0482
03648                 | LR__0483
03648                 | LR__0484
03648                 | __system___strrev_ret
03648     2D 00 64 FD | 	ret
0364c                 | 
0364c                 | __system___fmtpad
0364c     06 CA 05 F6 | 	mov	COUNT_, #6
03650     E8 00 A0 FD | 	call	#pushregs_
03654     42 91 02 F6 | 	mov	local01, arg01
03658     43 93 02 F6 | 	mov	local02, arg02
0365c     44 95 02 F6 | 	mov	local03, arg03
03660     49 85 EA F8 | 	getbyte	arg01, local02, #1
03664     16 92 46 F0 | 	shr	local02, #22
03668     03 92 0E F5 | 	and	local02, #3 wz
0366c     00 96 06 F6 | 	mov	local04, #0
03670     01 92 06 A6 |  if_e	mov	local02, #1
03674     45 93 CA F7 | 	test	local02, arg04 wz
03678     00 6E 06 A6 |  if_e	mov	result1, #0
0367c     88 00 90 AD |  if_e	jmp	#LR__0493
03680     42 95 C2 F2 | 	subr	local03, arg01
03684     01 94 56 F2 | 	cmps	local03, #1 wc
03688     00 6E 06 C6 |  if_b	mov	result1, #0
0368c     78 00 90 CD |  if_b	jmp	#LR__0493
03690     03 92 0E F2 | 	cmp	local02, #3 wz
03694     18 00 90 5D |  if_ne	jmp	#LR__0490
03698     01 8A 0E F2 | 	cmp	arg04, #1 wz
0369c     6E 92 62 FD | 	wrz	local02
036a0     49 95 02 F1 | 	add	local03, local02
036a4     4A 95 52 F6 | 	abs	local03, local03 wc
036a8     01 94 46 F0 | 	shr	local03, #1
036ac     4A 95 82 F6 | 	negc	local03, local03
036b0                 | LR__0490
036b0     01 94 56 F2 | 	cmps	local03, #1 wc
036b4     4C 00 90 CD |  if_b	jmp	#LR__0492
036b8     4A 99 02 F6 | 	mov	local05, local03
036bc                 | LR__0491
036bc     48 93 02 F6 | 	mov	local02, local01
036c0     48 9B 02 F6 | 	mov	local06, local01
036c4     13 92 46 F7 | 	zerox	local02, #19
036c8     14 9A 46 F0 | 	shr	local06, #20
036cc     02 9A 66 F0 | 	shl	local06, #2
036d0     2D 9B 02 F1 | 	add	local06, __methods__
036d4     4D 9B 02 FB | 	rdlong	local06, local06
036d8     20 84 06 F6 | 	mov	arg01, #32
036dc     31 95 02 F6 | 	mov	local03, objptr
036e0     49 63 02 F6 | 	mov	objptr, local02
036e4     2D 9A 62 FD | 	call	local06
036e8     4A 63 02 F6 | 	mov	objptr, local03
036ec     37 9B 02 F6 | 	mov	local06, result1
036f0     00 9A 56 F2 | 	cmps	local06, #0 wc
036f4     4D 6F 02 C6 |  if_b	mov	result1, local06
036f8     0C 00 90 CD |  if_b	jmp	#LR__0493
036fc     4D 97 02 F1 | 	add	local04, local06
03700     EE 99 6E FB | 	djnz	local05, #LR__0491
03704                 | LR__0492
03704     4B 6F 02 F6 | 	mov	result1, local04
03708                 | LR__0493
03708     E7 F0 03 F6 | 	mov	ptra, fp
0370c     F2 00 A0 FD | 	call	#popregs_
03710                 | __system___fmtpad_ret
03710     2D 00 64 FD | 	ret
03714                 | 
03714                 | __system___uitoa
03714     04 CA 05 F6 | 	mov	COUNT_, #4
03718     E8 00 A0 FD | 	call	#pushregs_
0371c     42 91 02 F6 | 	mov	local01, arg01
03720     00 8C 4E F2 | 	cmps	arg05, #0 wz
03724     48 8D 02 F6 | 	mov	arg05, local01
03728     00 92 06 F6 | 	mov	local02, #0
0372c     37 94 06 56 |  if_ne	mov	local03, #55
03730     57 94 06 A6 |  if_e	mov	local03, #87
03734                 | LR__0500
03734     44 87 12 FD | 	qdiv	arg02, arg03
03738     19 96 62 FD | 	getqy	local04
0373c     44 87 12 FD | 	qdiv	arg02, arg03
03740     0A 96 16 F2 | 	cmp	local04, #10 wc
03744     30 96 06 C1 |  if_b	add	local04, #48
03748     4A 97 02 31 |  if_ae	add	local04, local03
0374c     46 97 42 FC | 	wrbyte	local04, arg05
03750     01 8C 06 F1 | 	add	arg05, #1
03754     01 92 06 F1 | 	add	local02, #1
03758     18 86 62 FD | 	getqx	arg02
0375c     00 86 0E F2 | 	cmp	arg02, #0 wz
03760     D0 FF 9F 5D |  if_ne	jmp	#LR__0500
03764     45 93 12 F2 | 	cmp	local02, arg04 wc
03768     C8 FF 9F CD |  if_b	jmp	#LR__0500
0376c     46 01 48 FC | 	wrbyte	#0, arg05
03770     48 85 02 F6 | 	mov	arg01, local01
03774     88 FE BF FD | 	call	#__system___strrev
03778     49 6F 02 F6 | 	mov	result1, local02
0377c     E7 F0 03 F6 | 	mov	ptra, fp
03780     F2 00 A0 FD | 	call	#popregs_
03784                 | __system___uitoa_ret
03784     2D 00 64 FD | 	ret
03788                 | 
03788                 | __system___getiolock_0093
03788     01 CA 05 F6 | 	mov	COUNT_, #1
0378c     E8 00 A0 FD | 	call	#pushregs_
03790     4C FE BF FD | 	call	#__system____getftab
03794     37 91 0A F6 | 	mov	local01, result1 wz
03798     10 00 90 AD |  if_e	jmp	#LR__0510
0379c     08 90 06 F1 | 	add	local01, #8
037a0     48 6F 0A FB | 	rdlong	result1, local01 wz
037a4     08 90 86 F1 | 	sub	local01, #8
037a8     0C 00 90 5D |  if_ne	jmp	#LR__0511
037ac                 | LR__0510
037ac     32 6F 02 F6 | 	mov	result1, ptr___system__dat__
037b0     24 6E 06 F1 | 	add	result1, #36
037b4     08 00 90 FD | 	jmp	#LR__0512
037b8                 | LR__0511
037b8     0C 90 06 F1 | 	add	local01, #12
037bc     48 6F 02 F6 | 	mov	result1, local01
037c0                 | LR__0512
037c0     E7 F0 03 F6 | 	mov	ptra, fp
037c4     F2 00 A0 FD | 	call	#popregs_
037c8                 | __system___getiolock_0093_ret
037c8     2D 00 64 FD | 	ret
037cc                 | 
037cc                 | __system___gettxfunc
037cc     01 CA 05 F6 | 	mov	COUNT_, #1
037d0     E8 00 A0 FD | 	call	#pushregs_
037d4     08 FE BF FD | 	call	#__system____getftab
037d8     37 91 0A F6 | 	mov	local01, result1 wz
037dc     10 00 90 AD |  if_e	jmp	#LR__0520
037e0     08 90 06 F1 | 	add	local01, #8
037e4     48 87 0A FB | 	rdlong	arg02, local01 wz
037e8     08 90 86 F1 | 	sub	local01, #8
037ec     08 00 90 5D |  if_ne	jmp	#LR__0521
037f0                 | LR__0520
037f0     00 6E 06 F6 | 	mov	result1, #0
037f4     08 00 90 FD | 	jmp	#LR__0522
037f8                 | LR__0521
037f8     16 90 26 F4 | 	bith	local01, #22
037fc     48 6F 02 F6 | 	mov	result1, local01
03800                 | LR__0522
03800     E7 F0 03 F6 | 	mov	ptra, fp
03804     F2 00 A0 FD | 	call	#popregs_
03808                 | __system___gettxfunc_ret
03808     2D 00 64 FD | 	ret
0380c                 | 
0380c                 | __system___rxtxioctl_0143
0380c     00 87 0E F2 | 	cmp	arg02, #256 wz
03810     0C 00 90 AD |  if_e	jmp	#LR__0530
03814     01 87 0E F2 | 	cmp	arg02, #257 wz
03818     1C 00 90 AD |  if_e	jmp	#LR__0531
0381c     30 00 90 FD | 	jmp	#LR__0532
03820                 | LR__0530
03820     08 64 06 F1 | 	add	ptr___system__dat__, #8
03824     32 6F 02 FB | 	rdlong	result1, ptr___system__dat__
03828     08 64 86 F1 | 	sub	ptr___system__dat__, #8
0382c     44 6F 62 FC | 	wrlong	result1, arg03
03830     00 6E 06 F6 | 	mov	result1, #0
03834     28 00 90 FD | 	jmp	#LR__0533
03838                 | LR__0531
03838     44 85 02 FB | 	rdlong	arg01, arg03
0383c     08 64 06 F1 | 	add	ptr___system__dat__, #8
03840     32 85 62 FC | 	wrlong	arg01, ptr___system__dat__
03844     08 64 86 F1 | 	sub	ptr___system__dat__, #8
03848     00 6E 06 F6 | 	mov	result1, #0
0384c     10 00 90 FD | 	jmp	#LR__0533
03850                 | LR__0532
03850     20 64 06 F1 | 	add	ptr___system__dat__, #32
03854     32 15 68 FC | 	wrlong	#10, ptr___system__dat__
03858     20 64 86 F1 | 	sub	ptr___system__dat__, #32
0385c     01 6E 66 F6 | 	neg	result1, #1
03860                 | LR__0533
03860                 | __system___rxtxioctl_0143_ret
03860     2D 00 64 FD | 	ret
03864                 | 
03864                 | __system____dummy_flush_0144
03864     00 6E 06 F6 | 	mov	result1, #0
03868                 | __system____dummy_flush_0144_ret
03868     2D 00 64 FD | 	ret
0386c                 | 
0386c                 | __system____default_filbuf
0386c     05 CA 05 F6 | 	mov	COUNT_, #5
03870     E8 00 A0 FD | 	call	#pushregs_
03874     42 91 02 F6 | 	mov	local01, arg01
03878     48 93 02 FB | 	rdlong	local02, local01
0387c     08 92 06 F1 | 	add	local02, #8
03880     49 6F 0A FB | 	rdlong	result1, local02 wz
03884     08 92 86 F1 | 	sub	local02, #8
03888     20 00 90 5D |  if_ne	jmp	#LR__0540
0388c     10 92 06 F1 | 	add	local02, #16
03890     49 6F 02 F6 | 	mov	result1, local02
03894     04 92 86 F1 | 	sub	local02, #4
03898     49 6F 62 FC | 	wrlong	result1, local02
0389c     04 92 86 F1 | 	sub	local02, #4
038a0     02 00 80 FF 
038a4     49 01 68 FC | 	wrlong	##1024, local02
038a8     08 92 86 F1 | 	sub	local02, #8
038ac                 | LR__0540
038ac     14 90 06 F1 | 	add	local01, #20
038b0     48 95 02 FB | 	rdlong	local03, local01
038b4     4A 97 02 F6 | 	mov	local04, local03
038b8     14 90 86 F1 | 	sub	local01, #20
038bc     13 96 46 F7 | 	zerox	local04, #19
038c0     14 94 46 F0 | 	shr	local03, #20
038c4     02 94 66 F0 | 	shl	local03, #2
038c8     2D 95 02 F1 | 	add	local03, __methods__
038cc     4A 95 02 FB | 	rdlong	local03, local03
038d0     48 85 02 F6 | 	mov	arg01, local01
038d4     0C 92 06 F1 | 	add	local02, #12
038d8     49 87 02 FB | 	rdlong	arg02, local02
038dc     04 92 86 F1 | 	sub	local02, #4
038e0     49 89 02 FB | 	rdlong	arg03, local02
038e4     08 92 86 F1 | 	sub	local02, #8
038e8     31 99 02 F6 | 	mov	local05, objptr
038ec     4B 63 02 F6 | 	mov	objptr, local04
038f0     2D 94 62 FD | 	call	local03
038f4     4C 63 02 F6 | 	mov	objptr, local05
038f8     37 99 02 F6 | 	mov	local05, result1
038fc     00 98 56 F2 | 	cmps	local05, #0 wc
03900     01 6E 66 C6 |  if_b	neg	result1, #1
03904     28 00 90 CD |  if_b	jmp	#LR__0541
03908     49 99 62 FC | 	wrlong	local05, local02
0390c     0C 92 06 F1 | 	add	local02, #12
03910     49 95 02 FB | 	rdlong	local03, local02
03914     08 92 86 F1 | 	sub	local02, #8
03918     49 95 62 FC | 	wrlong	local03, local02
0391c     08 90 06 F1 | 	add	local01, #8
03920     48 97 02 FB | 	rdlong	local04, local01
03924     04 96 46 F5 | 	or	local04, #4
03928     48 97 62 FC | 	wrlong	local04, local01
0392c     4C 6F 02 F6 | 	mov	result1, local05
03930                 | LR__0541
03930     E7 F0 03 F6 | 	mov	ptra, fp
03934     F2 00 A0 FD | 	call	#popregs_
03938                 | __system____default_filbuf_ret
03938     2D 00 64 FD | 	ret
0393c                 | 
0393c                 | __system___struct__s_vfs_file_t_putchar_
0393c     04 CA 05 F6 | 	mov	COUNT_, #4
03940     E8 00 A0 FD | 	call	#pushregs_
03944     1C 62 06 F1 | 	add	objptr, #28
03948     31 91 0A FB | 	rdlong	local01, objptr wz
0394c     1C 62 86 F1 | 	sub	objptr, #28
03950     00 6E 06 A6 |  if_e	mov	result1, #0
03954     48 00 90 AD |  if_e	jmp	#LR__0550
03958     1C 62 06 F1 | 	add	objptr, #28
0395c     31 93 02 FB | 	rdlong	local02, objptr
03960     49 95 02 F6 | 	mov	local03, local02
03964     1C 62 86 F1 | 	sub	objptr, #28
03968     13 94 46 F7 | 	zerox	local03, #19
0396c     14 92 46 F0 | 	shr	local02, #20
03970     02 92 66 F0 | 	shl	local02, #2
03974     2D 93 02 F1 | 	add	local02, __methods__
03978     49 93 02 FB | 	rdlong	local02, local02
0397c     31 87 02 F6 | 	mov	arg02, objptr
03980     31 97 02 F6 | 	mov	local04, objptr
03984     4A 63 02 F6 | 	mov	objptr, local03
03988     2D 92 62 FD | 	call	local02
0398c     4B 63 02 F6 | 	mov	objptr, local04
03990                 | '     return (i < 0) ? 0 : 1;
03990     00 6E 56 F2 | 	cmps	result1, #0 wc
03994     00 90 06 C6 |  if_b	mov	local01, #0
03998     01 90 06 36 |  if_ae	mov	local01, #1
0399c     48 6F 02 F6 | 	mov	result1, local01
039a0                 | LR__0550
039a0     E7 F0 03 F6 | 	mov	ptra, fp
039a4     F2 00 A0 FD | 	call	#popregs_
039a8                 | __system___struct__s_vfs_file_t_putchar__ret
039a8     2D 00 64 FD | 	ret
039ac                 | 
039ac                 | __system___struct__s_vfs_file_t_getchar_
039ac     03 CA 05 F6 | 	mov	COUNT_, #3
039b0     E8 00 A0 FD | 	call	#pushregs_
039b4     20 62 06 F1 | 	add	objptr, #32
039b8     31 85 0A FB | 	rdlong	arg01, objptr wz
039bc     20 62 86 F1 | 	sub	objptr, #32
039c0     01 6E 66 A6 |  if_e	neg	result1, #1
039c4     38 00 90 AD |  if_e	jmp	#LR__0560
039c8                 | '     return getcf(__this);
039c8     20 62 06 F1 | 	add	objptr, #32
039cc     31 91 02 FB | 	rdlong	local01, objptr
039d0     48 93 02 F6 | 	mov	local02, local01
039d4     20 62 86 F1 | 	sub	objptr, #32
039d8     13 92 46 F7 | 	zerox	local02, #19
039dc     14 90 46 F0 | 	shr	local01, #20
039e0     02 90 66 F0 | 	shl	local01, #2
039e4     2D 91 02 F1 | 	add	local01, __methods__
039e8     48 91 02 FB | 	rdlong	local01, local01
039ec     31 85 02 F6 | 	mov	arg01, objptr
039f0     31 95 02 F6 | 	mov	local03, objptr
039f4     49 63 02 F6 | 	mov	objptr, local02
039f8     2D 90 62 FD | 	call	local01
039fc     4A 63 02 F6 | 	mov	objptr, local03
03a00                 | LR__0560
03a00     E7 F0 03 F6 | 	mov	ptra, fp
03a04     F2 00 A0 FD | 	call	#popregs_
03a08                 | __system___struct__s_vfs_file_t_getchar__ret
03a08     2D 00 64 FD | 	ret
03a0c                 | 
03a0c                 | __system___struct___bas_wrap_sender_tx_
03a0c     03 CA 05 F6 | 	mov	COUNT_, #3
03a10     E8 00 A0 FD | 	call	#pushregs_
03a14     31 91 02 FB | 	rdlong	local01, objptr
03a18     48 93 02 F6 | 	mov	local02, local01
03a1c     13 90 46 F7 | 	zerox	local01, #19
03a20     14 92 46 F0 | 	shr	local02, #20
03a24     02 92 66 F0 | 	shl	local02, #2
03a28     2D 93 02 F1 | 	add	local02, __methods__
03a2c     49 93 02 FB | 	rdlong	local02, local02
03a30     31 95 02 F6 | 	mov	local03, objptr
03a34     48 63 02 F6 | 	mov	objptr, local01
03a38     2D 92 62 FD | 	call	local02
03a3c     4A 63 02 F6 | 	mov	objptr, local03
03a40     01 6E 06 F6 | 	mov	result1, #1
03a44     E7 F0 03 F6 | 	mov	ptra, fp
03a48     F2 00 A0 FD | 	call	#popregs_
03a4c                 | __system___struct___bas_wrap_sender_tx__ret
03a4c     2D 00 64 FD | 	ret
03a50                 | 
03a50                 | __system___struct___bas_wrap_sender_rx_
03a50     03 CA 05 F6 | 	mov	COUNT_, #3
03a54     E8 00 A0 FD | 	call	#pushregs_
03a58     04 62 06 F1 | 	add	objptr, #4
03a5c     31 91 02 FB | 	rdlong	local01, objptr
03a60     48 93 02 F6 | 	mov	local02, local01
03a64     04 62 86 F1 | 	sub	objptr, #4
03a68     13 92 46 F7 | 	zerox	local02, #19
03a6c     14 90 46 F0 | 	shr	local01, #20
03a70     02 90 66 F0 | 	shl	local01, #2
03a74     2D 91 02 F1 | 	add	local01, __methods__
03a78     48 91 02 FB | 	rdlong	local01, local01
03a7c     31 95 02 F6 | 	mov	local03, objptr
03a80     49 63 02 F6 | 	mov	objptr, local02
03a84     2D 90 62 FD | 	call	local01
03a88     4A 63 02 F6 | 	mov	objptr, local03
03a8c     E7 F0 03 F6 | 	mov	ptra, fp
03a90     F2 00 A0 FD | 	call	#popregs_
03a94                 | __system___struct___bas_wrap_sender_rx__ret
03a94     2D 00 64 FD | 	ret
03a98                 | 
03a98                 | __system___struct___bas_wrap_sender_close_
03a98     03 CA 05 F6 | 	mov	COUNT_, #3
03a9c     E8 00 A0 FD | 	call	#pushregs_
03aa0     08 62 06 F1 | 	add	objptr, #8
03aa4     31 91 02 FB | 	rdlong	local01, objptr
03aa8     48 93 02 F6 | 	mov	local02, local01
03aac     08 62 86 F1 | 	sub	objptr, #8
03ab0     13 92 46 F7 | 	zerox	local02, #19
03ab4     14 90 46 F0 | 	shr	local01, #20
03ab8     02 90 66 F0 | 	shl	local01, #2
03abc     2D 91 02 F1 | 	add	local01, __methods__
03ac0     48 91 02 FB | 	rdlong	local01, local01
03ac4     31 95 02 F6 | 	mov	local03, objptr
03ac8     49 63 02 F6 | 	mov	objptr, local02
03acc     2D 90 62 FD | 	call	local01
03ad0     4A 63 02 F6 | 	mov	objptr, local03
03ad4     E7 F0 03 F6 | 	mov	ptra, fp
03ad8     F2 00 A0 FD | 	call	#popregs_
03adc                 | __system___struct___bas_wrap_sender_close__ret
03adc     2D 00 64 FD | 	ret
03ae0                 | 
03ae0                 | LR__0570
03ae0     20 21 21 21 
03ae4     20 63 6F 72 
03ae8     72 75 70 74 
03aec     65 64 20 68 
03af0     65 61 70 3F 
03af4     3F 3F 20 21 
03af8     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
03afb     00          | 	byte	0
03afc                 | LR__0571
03afc     20 21 21 21 
03b00     20 6F 75 74 
03b04     20 6F 66 20 
03b08     68 65 61 70 
03b0c     20 6D 65 6D 
03b10     6F 72 79 20 
03b14     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
03b18     00          | 	byte	0
03b19                 | LR__0572
03b19     20 21 21 21 
03b1d     20 63 6F 72 
03b21     72 75 70 74 
03b25     65 64 20 68 
03b29     65 61 70 20 
03b2d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
03b31     00          | 	byte	0
03b32                 | LR__0573
03b32     54 65 73 74 
03b36     20 72 65 61 
03b3a     64 79       | 	byte	"Test ready"
03b3c     00          | 	byte	0
03b3d     00 00 00    | 	alignl
03b40                 | _hg010b_spin2_dat_
03b40                 | 
03b40     00 00 00 00 
03b44     00 00 00 00 
03b48     00 00 00 00 
03b4c     00 00 00 00 
03b50     00 00 00    | vga_font       file "vgafont.def"
03b53     7E 81 A5 81 
03b57     81 BD 99 81 
03b5b     81 7E 00 00 
03b5f     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
03b63     7E FF DB FF 
03b67     FF C3 E7 FF 
03b6b     FF 7E 00 00 
03b6f     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
03b73     00 36 7F 7F 
03b77     7F 7F 3E 1C 
03b7b     08 00 00 00 
03b7f     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
03b83     00 08 1C 3E 
03b87     7F 3E 1C 08 
03b8b     00 00 00 00 
03b8f     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
03b93     18 3C 3C E7 
03b97     E7 E7 18 18 
03b9b     3C 00 00 00 
03b9f     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
03ba3     18 3C 7E FF 
03ba7     FF 7E 18 18 
03bab     3C 00 00 00 
03baf     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
03bb3     00 00 00 18 
03bb7     3C 3C 18 00 
03bbb     00 00 00 00 
03bbf     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
03bc3     FF FF FF E7 
03bc7     C3 C3 E7 FF 
03bcb     FF FF FF FF 
03bcf     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
03bd3     00 00 3C 66 
03bd7     42 42 66 3C 
03bdb     00 00 00 00 
03bdf     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
03be3     FF FF C3 99 
03be7     BD BD 99 C3 
03beb     FF FF FF FF 
03bef     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
03bf3     78 70 58 4C 
03bf7     1E 33 33 33 
03bfb     33 1E 00 00 
03bff     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
03c03     3C 66 66 66 
03c07     66 3C 18 7E 
03c0b     18 18 00 00 
03c0f     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
03c13     FC CC FC 0C 
03c17     0C 0C 0C 0E 
03c1b     0F 07 00 00 
03c1f     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
03c23     FE C6 FE C6 
03c27     C6 C6 C6 E6 
03c2b     E7 67 03 00 
03c2f     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
03c33     18 18 DB 3C 
03c37     E7 3C DB 18 
03c3b     18 00 00 00 
03c3f     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
03c43     03 07 0F 1F 
03c47     7F 1F 0F 07 
03c4b     03 01 00 00 
03c4f     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
03c53     60 70 78 7C 
03c57     7F 7C 78 70 
03c5b     60 40 00 00 
03c5f     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
03c63     18 3C 7E 18 
03c67     18 18 7E 3C 
03c6b     18 00 00 00 
03c6f     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
03c73     66 66 66 66 
03c77     66 66 66    | 	byte	$66[7]
03c7a     00 66 66 00 
03c7e     00 00 00 00 
03c82     00 FE DB DB 
03c86     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
03c8a     D8 D8 D8 00 
03c8e     00 00 00 3E 
03c92     63 06 1C 36 
03c96     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
03c9a     30 63 3E 00 
03c9e     00 00 00 00 
03ca2     00 00 00 00 
03ca6     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03caa     7F 7F 7F 00 
03cae     00 00 00 00 
03cb2     00 18 3C 7E 
03cb6     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
03cba     3C 18 7E 00 
03cbe     00 00 00 00 
03cc2     00 18 3C 7E 
03cc6     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
03cca     18 18 18 00 
03cce     00 00 00 00 
03cd2     00 18 18 18 
03cd6     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
03cda     7E 3C 18 00 
03cde     00 00 00 00 
03ce2     00 00 00 18 
03ce6     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
03cea     00 00 00 00 
03cee     00 00 00 00 
03cf2     00 00 00    | 	byte	$00[11]
03cf5     0C 06 7F 06 
03cf9     0C 00 00 00 
03cfd     00 00 00 00 
03d01     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d05     00 03 03 03 
03d09     7F 00 00 00 
03d0d     00 00 00 00 
03d11     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d15     14 36 7F 36 
03d19     14 00 00 00 
03d1d     00 00 00 00 
03d21     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
03d25     1C 1C 3E 3E 
03d29     7F 7F 00 00 
03d2d     00 00 00 00 
03d31     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03d35     7F 3E 3E 1C 
03d39     1C 08 00 00 
03d3d     00 00 00 00 
03d41     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d45     00 00 00 00 
03d49     00 00 00 00 
03d4d     00 00 00 00 
03d51     00 00       | 	byte	$00[14]
03d53     18 3C 3C 3C 
03d57     18 18 18 00 
03d5b     18 18 00 00 
03d5f     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
03d63     66 24 00 00 
03d67     00 00 00 00 
03d6b     00 00 00 00 
03d6f     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d73     00 36 36 7F 
03d77     36 36 36 7F 
03d7b     36 36 00 00 
03d7f     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
03d83     3E 63 43 03 
03d87     3E 60 60 61 
03d8b     63 3E 18 18 
03d8f     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
03d93     00 00 43 63 
03d97     30 18 0C 06 
03d9b     63 61 00 00 
03d9f     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
03da3     1C 36 36 1C 
03da7     6E 3B 33 33 
03dab     33 6E 00 00 
03daf     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
03db3     0C 0C 0C 06 
03db7     00 00 00 00 
03dbb     00 00 00 00 
03dbf     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03dc3     30 18 0C 0C 
03dc7     0C 0C 0C 0C 
03dcb     18 30 00 00 
03dcf     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
03dd3     0C 18 30 30 
03dd7     30 30 30 30 
03ddb     18 0C 00 00 
03ddf     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
03de3     00 00 00 66 
03de7     3C FF 3C 66 
03deb     00 00 00 00 
03def     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
03df3     00 00 00 18 
03df7     18 7E 18 18 
03dfb     00 00 00 00 
03dff     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
03e03     00 00 00 00 
03e07     00 00 00 00 | 	byte	$00[8]
03e0b     18 18 18 0C 
03e0f     00 00 00 00 
03e13     00 00 00 00 
03e17     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
03e1b     00 00 00 00 
03e1f     00 00 00 00 
03e23     00 00 00 00 
03e27     00 00 00 00 | 	byte	$00[16]
03e2b     18 18 00 00 
03e2f     00 00 00 00 
03e33     00 00 40 60 
03e37     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
03e3b     03 01 00 00 
03e3f     00 00 00 00 
03e43     1C 36 63 63 
03e47     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
03e4b     36 1C 00 00 
03e4f     00 00 00 00 
03e53     18 1C 1E 18 
03e57     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
03e5b     18 7E 00 00 
03e5f     00 00 00 00 
03e63     3E 63 60 30 
03e67     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
03e6b     63 7F 00 00 
03e6f     00 00 00 00 
03e73     3E 63 60 60 
03e77     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
03e7b     63 3E 00 00 
03e7f     00 00 00 00 
03e83     30 38 3C 36 
03e87     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
03e8b     30 78 00 00 
03e8f     00 00 00 00 
03e93     7F 03 03 03 
03e97     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
03e9b     63 3E 00 00 
03e9f     00 00 00 00 
03ea3     1C 06 03 03 
03ea7     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
03eab     63 3E 00 00 
03eaf     00 00 00 00 
03eb3     7F 63 60 60 
03eb7     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
03ebb     0C 0C 00 00 
03ebf     00 00 00 00 
03ec3     3E 63 63 63 
03ec7     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
03ecb     63 3E 00 00 
03ecf     00 00 00 00 
03ed3     3E 63 63 63 
03ed7     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
03edb     30 1E 00 00 
03edf     00 00 00 00 
03ee3     00 00 00 18 
03ee7     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03eeb     18 18 00 00 
03eef     00 00 00 00 
03ef3     00 00 00 18 
03ef7     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03efb     18 18 0C 00 
03eff     00 00 00 00 
03f03     00 60 30 18 
03f07     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
03f0b     30 60 00 00 
03f0f     00 00 00 00 
03f13     00 00 00 7E 
03f17     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
03f1b     00 00 00 00 
03f1f     00 00 00 00 
03f23     00          | 	byte	$00[9]
03f24     06 0C 18 30 
03f28     60 30 18 0C 
03f2c     06 00 00 00 
03f30     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
03f34     63 63 30 18 
03f38     18 18 00 18 
03f3c     18 00 00 00 
03f40     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
03f44     3E 63 63 7B 
03f48     7B 7B 3B 03 
03f4c     3E 00 00 00 
03f50     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
03f54     1C 36 63 63 
03f58     7F 63 63 63 
03f5c     63 00 00 00 
03f60     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
03f64     66 66 66 3E 
03f68     66 66 66 66 
03f6c     3F 00 00 00 
03f70     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
03f74     66 43 03 03 
03f78     03 03 43 66 
03f7c     3C 00 00 00 
03f80     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
03f84     36 66 66 66 
03f88     66 66 66 36 
03f8c     1F 00 00 00 
03f90     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
03f94     66 46 16 1E 
03f98     16 06 46 66 
03f9c     7F 00 00 00 
03fa0     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
03fa4     66 46 16 1E 
03fa8     16 06 06 06 
03fac     0F 00 00 00 
03fb0     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
03fb4     66 43 03 03 
03fb8     7B 63 63 66 
03fbc     5C 00 00 00 
03fc0     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
03fc4     63 63 63 7F 
03fc8     63 63 63 63 
03fcc     63 00 00 00 
03fd0     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
03fd4     18 18 18 18 
03fd8     18 18 18 18 | 	byte	$18[8]
03fdc     3C 00 00 00 
03fe0     00 00 00 78 
03fe4     30 30 30 30 
03fe8     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
03fec     1E 00 00 00 
03ff0     00 00 00 67 
03ff4     66 66 36 1E 
03ff8     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
03ffc     67 00 00 00 
04000     00 00 00 0F 
04004     06 06 06 06 
04008     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
0400c     7F 00 00 00 
04010     00 00 00 63 
04014     77 7F 7F 6B 
04018     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
0401c     63 00 00 00 
04020     00 00 00 63 
04024     67 6F 7F 7B 
04028     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
0402c     63 00 00 00 
04030     00 00 00 3E 
04034     63 63 63 63 
04038     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0403c     3E 00 00 00 
04040     00 00 00 3F 
04044     66 66 66 3E 
04048     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
0404c     0F 00 00 00 
04050     00 00 00 3E 
04054     63 63 63 63 
04058     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
0405c     3E 30 70 00 
04060     00 00 00 3F 
04064     66 66 66 3E 
04068     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
0406c     67 00 00 00 
04070     00 00 00 3E 
04074     63 63 06 1C 
04078     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
0407c     3E 00 00 00 
04080     00 00 00 7E 
04084     7E 5A 18 18 
04088     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
0408c     3C 00 00 00 
04090     00 00 00 63 
04094     63 63 63 63 
04098     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
0409c     3E 00 00 00 
040a0     00 00 00 63 
040a4     63 63 63 63 
040a8     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
040ac     08 00 00 00 
040b0     00 00 00 63 
040b4     63 63 63 6B 
040b8     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
040bc     36 00 00 00 
040c0     00 00 00 63 
040c4     63 36 3E 1C 
040c8     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
040cc     63 00 00 00 
040d0     00 00 00 66 
040d4     66 66 66 3C 
040d8     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
040dc     3C 00 00 00 
040e0     00 00 00 7F 
040e4     63 61 30 18 
040e8     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
040ec     7F 00 00 00 
040f0     00 00 00 3C 
040f4     0C 0C 0C 0C 
040f8     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
040fc     3C 00 00 00 
04100     00 00 00 00 
04104     01 03 07 0E 
04108     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
0410c     40 00 00 00 
04110     00 00 00 3C 
04114     30 30 30 30 
04118     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
0411c     3C 00 00 00 
04120     1C 36 00 00 
04124     00 00 00 00 
04128     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0412c     00 00 00 00 
04130     00 00 00 00 
04134     00 00 00 00 
04138     00 00 00 00 
0413c     00          | 	byte	$00[17]
0413d     FF 00 00 0C 
04141     18 00 00 00 
04145     00 00 00 00 
04149     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0414d     00 00 00 00 
04151     00 00 00 00 
04155     00          | 	byte	$00[9]
04156     1E 30 3E 33 
0415a     33 33 6E 00 
0415e     00 00 00 00 
04162     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
04166     1E 36 66 66 
0416a     66 66 3E 00 
0416e     00 00 00 00 
04172     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
04176     3E 63 03 03 
0417a     03 63 3E 00 
0417e     00 00 00 00 
04182     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
04186     3C 36 33 33 
0418a     33 33 6E 00 
0418e     00 00 00 00 
04192     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
04196     3E 63 7F 03 
0419a     03 63 3E 00 
0419e     00 00 00 00 
041a2     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
041a6     0C 1E 0C 0C 
041aa     0C 0C 1E 00 
041ae     00 00 00 00 
041b2     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
041b6     6E 33 33 33 
041ba     33 33 3E 30 
041be     33 1E 00 00 
041c2     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
041c6     36 6E 66 66 
041ca     66 66 67 00 
041ce     00 00 00 00 
041d2     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
041d6     1C 18 18 18 
041da     18 18 3C 00 
041de     00 00 00 00 
041e2     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
041e6     70 60 60 60 
041ea     60 60 60 66 
041ee     66 3C 00 00 
041f2     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
041f6     66 36 1E 1E 
041fa     36 66 67 00 
041fe     00 00 00 00 
04202     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
04206     18 18 18 18 
0420a     18 18       | 	byte	$18[6]
0420c     3C 00 00 00 
04210     00 00 00 00 
04214     00 00 37 7F 
04218     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
0421c     63 00 00 00 
04220     00 00 00 00 
04224     00 00 3B 66 
04228     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
0422c     66 00 00 00 
04230     00 00 00 00 
04234     00 00 3E 63 
04238     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
0423c     3E 00 00 00 
04240     00 00 00 00 
04244     00 00 3B 66 
04248     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
0424c     3E 06 06 0F 
04250     00 00 00 00 
04254     00 00 6E 33 
04258     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
0425c     3E 30 30 78 
04260     00 00 00 00 
04264     00 00 3B 6E 
04268     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
0426c     0F 00 00 00 
04270     00 00 00 00 
04274     00 00 3E 63 
04278     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
0427c     3E 00 00 00 
04280     00 00 00 08 
04284     0C 0C 3F 0C 
04288     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
0428c     38 00 00 00 
04290     00 00 00 00 
04294     00 00 33 33 
04298     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
0429c     6E 00 00 00 
042a0     00 00 00 00 
042a4     00 00 63 63 
042a8     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
042ac     1C 00 00 00 
042b0     00 00 00 00 
042b4     00 00 63 63 
042b8     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
042bc     36 00 00 00 
042c0     00 00 00 00 
042c4     00 00 63 36 
042c8     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
042cc     63 00 00 00 
042d0     00 00 00 00 
042d4     00 00 63 63 
042d8     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
042dc     7E 60 30 1F 
042e0     00 00 00 00 
042e4     00 00 7F 33 
042e8     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
042ec     7F 00 00 00 
042f0     00 00 00 70 
042f4     18 18 18 0E 
042f8     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
042fc     70 00 00 00 
04300     00 00 00 18 
04304     18 18 18 18 
04308     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
0430c     18 00 00 00 
04310     00 00 00 0E 
04314     18 18 18 70 
04318     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
0431c     0E 00 00 00 
04320     6E 3B 00 00 
04324     00 00 00 00 
04328     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0432c     00 00 00 00 
04330     00 00 00 00 
04334     00 00       | 	byte	$00[10]
04336     08 1C 36 63 
0433a     63 63 7F 00 
0433e     00 00 00 00 
04342     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
04346     03 03 03 03 
0434a     43 66 3C 18 
0434e     30 1E 00 00 
04352     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
04356     33 33 33 33 
0435a     33 33       | 	byte	$33[6]
0435c     6E 00 00 00 
04360     00 00 60 30 
04364     18 00 3E 63 
04368     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
0436c     3E 00 00 00 
04370     00 00 08 1C 
04374     36 00 1E 30 
04378     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
0437c     6E 00 00 00 
04380     00 00 00 00 
04384     33 00 1E 30 
04388     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
0438c     6E 00 00 00 
04390     00 00 1C 36 
04394     1C 00 33 33 
04398     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
0439c     6E 00 00 00 
043a0     00 00 60 30 
043a4     18 00 3E 63 
043a8     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
043ac     3E 00 00 00 
043b0     00 00 00 00 
043b4     00 00 3E 63 
043b8     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
043bc     3E 18 30 1E 
043c0     00 00 00 1C 
043c4     58 78 38 18 
043c8     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
043cc     3C 00 00 00 
043d0     00 00 00 00 
043d4     63 00 3E 63 
043d8     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
043dc     3E 00 00 00 
043e0     66 33 00 3E 
043e4     63 63 63 63 
043e8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
043ec     3E 00 00 00 
043f0     00 00 CC 66 
043f4     33 00 3E 63 
043f8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
043fc     3E 00 00 00 
04400     00 00 18 3C 
04404     66 00 1C 18 
04408     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
0440c     3C 00 00 00 
04410     30 18 00 7F 
04414     63 61 30 18 
04418     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
0441c     7F 00 00 00 
04420     00 63 00 08 
04424     1C 36 63 63 
04428     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
0442c     63 00 00 00 
04430     30 18 00 3C 
04434     66 43 03 03 
04438     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
0443c     3C 00 00 00 
04440     30 18 00 7F 
04444     66 46 16 1E 
04448     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
0444c     7F 00 00 00 
04450     0C 06 00 0F 
04454     06 06 06 06 
04458     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
0445c     7F 00 00 00 
04460     30 18 00 1C 
04464     18 18 18 18 
04468     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
0446c     3C 00 00 00 
04470     00 00 08 1C 
04474     36 00 3E 63 
04478     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
0447c     3E 00 00 00 
04480     00 00 00 00 
04484     63 00 3E 63 
04488     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
0448c     3E 00 00 00 
04490     00 00 00 6F 
04494     46 26 06 06 
04498     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
0449c     7F 00 00 00 
044a0     00 00 00 6E 
044a4     4C 2C 0C 0C 
044a8     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
044ac     1E 00 00 00 
044b0     30 18 00 3E 
044b4     63 63 06 1C 
044b8     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
044bc     3E 00 00 00 
044c0     00 00 60 30 
044c4     18 00 3E 63 
044c8     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
044cc     3E 00 00 00 
044d0     00 63 00 3E 
044d4     63 63 63 63 
044d8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
044dc     3E 00 00 00 
044e0     00 63 00 63 
044e4     63 63 63 63 
044e8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
044ec     3E 00 00 00 
044f0     6C 38 00 7E 
044f4     7E 5A 18 18 
044f8     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
044fc     3C 00 00 00 
04500     00 00 60 48 
04504     2C 0C 3F 0C 
04508     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
0450c     38 00 00 00 
04510     00 00 00 0F 
04514     26 36 1E 0E 
04518     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
0451c     7F 00 00 00 
04520     00 00 00 00 
04524     00 63 36 1C 
04528     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
0452c     00 00 00 00 
04530     00 00       | 	byte	$00[6]
04532     36 1C 08 00 
04536     3E 63 03 03 
0453a     03 63 3E 00 
0453e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
04542     30 18 0C 00 
04546     1E 30 3E 33 
0454a     33 33 6E 00 
0454e     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
04552     60 30 18 00 
04556     1C 18 18 18 
0455a     18 18 3C 00 
0455e     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
04562     60 30 18 00 
04566     3E 63 63 63 
0456a     63 63 3E 00 
0456e     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
04572     30 18 0C 00 
04576     33 33 33 33 
0457a     33 33 6E 00 
0457e     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
04582     00 08 1C 36 
04586     63 63 7F 63 
0458a     63 63 63 18 
0458e     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
04592     00 00 00 00 
04596     1E 30 3E 33 
0459a     33 33 6E 18 
0459e     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
045a2     00 7F 63 61 
045a6     30 18 0C 06 
045aa     43 63 7F 00 
045ae     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
045b2     36 1C 08 00 
045b6     7F 33 18 0C 
045ba     06 63 7F 00 
045be     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
045c2     00 7F 66 46 
045c6     16 1E 16 06 
045ca     46 66 7F 18 
045ce     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
045d2     00 00 00 00 
045d6     3E 63 7F 03 
045da     03 63 3E 18 
045de     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
045e2     00 3C 66 03 
045e6     1F 03 0F 03 
045ea     03 66 3C 00 
045ee     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
045f2     60 30 18 00 
045f6     7F 33 18 0C 
045fa     06 63 7F 00 
045fe     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
04602     00 3C 66 43 
04606     03 03 03 03 
0460a     43 66 3C 00 
0460e     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
04612     00 00 00 00 
04616     3E 63 06 1C 
0461a     30 63 3E 18 
0461e     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
04622     00 00 00 00 
04626     00 00       | 	byte	$00[6]
04628     6C 36 1B 36 
0462c     6C 00 00 00 
04630     00 00 00 00 
04634     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04638     1B 36 6C 36 
0463c     1B 00 00 00 
04640     88 22 88 22 
04644     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
04648     88 22 88 22 
0464c     88 22 88 22 
04650     AA 55 AA 55 
04654     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
04658     AA 55 AA 55 
0465c     AA 55 AA 55 
04660     BB EE BB EE 
04664     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
04668     BB EE BB EE 
0466c     BB EE BB EE 
04670     18 18 18 18 
04674     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
04678     18 18 18 18 
0467c     18 18 18 18 
04680     18 18 18 18 
04684     18 18 18    | 	byte	$18[15]
04687     1F 18 18 18 
0468b     18 18 18 18 
0468f     18 30 18 00 
04693     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
04697     63 7F 63 63 
0469b     63 63 00 00 
0469f     00 1C 36 00 
046a3     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
046a7     63 7F 63 63 
046ab     63 63 00 00 
046af     00 36 1C 00 
046b3     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
046b7     1E 16 06 46 
046bb     66 7F 00 00 
046bf     00 00 00 00 
046c3     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
046c7     1C 30 60 63 
046cb     63 3E 18 30 
046cf     1E 6C 6C 6C 
046d3     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
046d7     6F 6C 6C 6C 
046db     6C 6C 6C 6C 
046df     6C 6C 6C 6C 
046e3     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
046e7     6C 6C 6C 6C 
046eb     6C 6C 6C 6C 
046ef     6C          | 	byte	$6c[9]
046f0     00 00 00 00 
046f4     00          | 	byte	$00[5]
046f5     7F 60 6F 6C 
046f9     6C 6C 6C 6C 
046fd     6C 6C 6C 6C 
04701     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04705     6F 60 7F 00 
04709     00 00 00 00 
0470d     00 00 00 18 
04711     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
04715     61 30 18 0C 
04719     06 43 63 7F 
0471d     00 00 00 00 
04721     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
04725     00 7F 33 18 
04729     0C 06 63 7F 
0472d     00 00 00 00 
04731     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
04735     00 00 1F 18 
04739     18 18 18 18 
0473d     18 18 18 18 
04741     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04745     18 18 F8 00 
04749     00 00 00 00 
0474d     00 00 00 18 
04751     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04755     18 18 FF 00 
04759     00 00 00 00 
0475d     00 00 00 00 
04761     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04765     00 00 FF 18 
04769     18 18 18 18 
0476d     18 18 18 18 
04771     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04775     18 18 F8 18 
04779     18 18 18 18 
0477d     18 18 18 00 
04781     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
04785     00 00 FF 00 
04789     00 00 00 00 
0478d     00 00 00 18 
04791     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04795     18 18 FF 18 
04799     18 18 18 18 
0479d     18 18 18 63 
047a1     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
047a5     36 63 63 7F 
047a9     63 63 63 63 
047ad     00 00 00 00 
047b1     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
047b5     00 1E 30 3E 
047b9     33 33 33 6E 
047bd     00 00 00 6C 
047c1     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
047c5     EC 0C FC 00 
047c9     00 00 00 00 
047cd     00 00 00 00 
047d1     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
047d5     FC 0C EC 6C 
047d9     6C 6C 6C 6C 
047dd     6C 6C 6C 6C 
047e1     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
047e5     EF 00 FF 00 
047e9     00 00 00 00 
047ed     00 00 00 00 
047f1     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
047f5     FF 00 EF 6C 
047f9     6C 6C 6C 6C 
047fd     6C 6C 6C 6C 
04801     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04805     EC 0C EC 6C 
04809     6C 6C 6C 6C 
0480d     6C 6C 6C 00 
04811     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04815     FF 00 FF 00 
04819     00 00 00 00 
0481d     00 00 00 6C 
04821     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04825     EF 00 EF 6C 
04829     6C 6C 6C 6C 
0482d     6C 6C 6C 00 
04831     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04835     63 3E 63 63 
04839     63 63 3E 63 
0483d     00 00 00 00 
04841     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
04845     30 3C 36 33 
04849     33 33 33 6E 
0484d     00 00 00 00 
04851     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
04855     66 66 6F 66 
04859     66 66 36 1F 
0485d     00 00 00 36 
04861     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
04865     66 66 66 66 
04869     66 66       | 	byte	$66[6]
0486b     36 1F 00 00 
0486f     00 00 63 00 
04873     7F 66 46 16 
04877     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
0487b     66 7F 00 00 
0487f     00 6C 38 00 
04883     38 30 30 3C 
04887     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
0488b     33 6E 00 00 
0488f     00 36 1C 00 
04893     63 67 6F 7F 
04897     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
0489b     63 63 00 00 
0489f     00 30 18 00 
048a3     3C 18 18 18 
048a7     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
048ab     18 3C 00 00 
048af     00 3C 66 00 
048b3     3C 18 18 18 
048b7     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
048bb     18 3C 00 00 
048bf     00 00 00 36 
048c3     1C 08 00 3E 
048c7     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
048cb     63 3E 00 00 
048cf     00 18 18 18 
048d3     18 18 18 18 
048d7     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
048db     00 00 00 00 
048df     00 00 00 00 
048e3     00 00 00 00 | 	byte	$00[12]
048e7     F8 18 18 18 
048eb     18 18 18 18 
048ef     18 FF FF FF 
048f3     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
048f7     FF FF FF FF 
048fb     FF FF FF FF 
048ff     FF          | 	byte	$ff[9]
04900     00 00 00 00 
04904     00 00 00    | 	byte	$00[7]
04907     FF FF FF FF 
0490b     FF FF FF FF 
0490f     FF          | 	byte	$ff[9]
04910     00 00 00 7E 
04914     7E 5A 18 18 
04918     18 18 18 18 
0491c     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
04920     1C 36 1C 63 
04924     63 63 63 63 
04928     63 63 63 63 
0492c     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04930     FF FF FF FF 
04934     FF FF FF    | 	byte	$ff[7]
04937     00 00 00 00 
0493b     00 00 00 00 
0493f     00          | 	byte	$00[9]
04940     30 18 00 3E 
04944     63 63 63 63 
04948     63 63 63 63 
0494c     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04950     00 00 00 1E 
04954     33 33 33 1B 
04958     33 63 63 63 
0495c     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
04960     1C 36 00 3E 
04964     63 63 63 63 
04968     63 63 63 63 
0496c     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04970     30 18 00 63 
04974     67 6F 7F 7B 
04978     73 63 63 63 
0497c     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
04980     00 00 60 30 
04984     18 00 3B 66 
04988     66 66 66 66 
0498c     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04990     00 00 36 1C 
04994     08 00 3B 66 
04998     66 66 66 66 
0499c     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
049a0     36 1C 00 3E 
049a4     63 63 06 1C 
049a8     30 60 63 63 
049ac     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
049b0     00 00 36 1C 
049b4     08 00 3E 63 
049b8     06 1C 30 63 
049bc     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
049c0     30 18 00 3F 
049c4     66 66 66 3E 
049c8     36 66 66 66 
049cc     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
049d0     30 18 00 63 
049d4     63 63 63 63 
049d8     63 63 63 63 
049dc     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
049e0     00 00 60 30 
049e4     18 00 3B 6E 
049e8     66 06 06 06 
049ec     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
049f0     66 33 00 63 
049f4     63 63 63 63 
049f8     63 63 63 63 
049fc     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04a00     00 00 60 30 
04a04     18 00 63 63 
04a08     63 63 63 63 
04a0c     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
04a10     30 18 00 66 
04a14     66 66 66 3C 
04a18     18 18 18 18 
04a1c     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
04a20     00 00 00 08 
04a24     0C 0C 3F 0C 
04a28     0C 0C 0C 6C 
04a2c     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
04a30     30 18 00 00 
04a34     00 00 00 00 
04a38     00 00 00 00 
04a3c     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04a40     00 00 00 00 
04a44     00 00 00 00 | 	byte	$00[8]
04a48     7F 00 00 00 
04a4c     00 00 00 00 
04a50     66 33 00 00 
04a54     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
04a58     00 00 00 00 
04a5c     00 00 00 00 
04a60     00 00 00 00 
04a64     00 00 00 00 
04a68     00 00 00 00 
04a6c     00          | 	byte	$00[21]
04a6d     0C 06 3C 36 
04a71     1C 00 00 00 
04a75     00 00 00 00 
04a79     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04a7d     00 00 00 63 
04a81     3E 00 00 00 
04a85     00 00 00 00 
04a89     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04a8d     00 00 00 00 
04a91     3E 63 06 1C 
04a95     36 63 63 36 
04a99     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
04a9d     00 00 00 00 
04aa1     00 00 00 00 | 	byte	$00[8]
04aa5     18 00 7E 00 
04aa9     18 00 00 00 
04aad     00 00 00 00 
04ab1     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04ab5     00 00 00 00 
04ab9     00 00 00 00 | 	byte	$00[8]
04abd     18 30 1E 00 
04ac1     00 00 1C 36 
04ac5     36 1C 00 00 
04ac9     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
04acd     00 00 00 00 
04ad1     63 00 00 00 
04ad5     00 00 00 00 
04ad9     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04add     00 00 00 18 
04ae1     18 00 00 00 
04ae5     00 00 00 00 
04ae9     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04aed     00 00 00 00 
04af1     00          | 	byte	$00[5]
04af2     CC 66 33 00 
04af6     33 33 33 33 
04afa     33 33 6E 00 
04afe     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
04b02     00 3F 66 66 
04b06     66 3E 36 66 
04b0a     66 66 6F 00 
04b0e     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
04b12     36 1C 08 00 
04b16     3B 6E 66 06 
04b1a     06 06 0F 00 
04b1e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
04b22     00 00 00 7E 
04b26     7E 7E 7E 7E 
04b2a     7E 7E 00 00 
04b2e     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
04b32     00 00 00 00 
04b36     00 00 00 00 
04b3a     00 00 00 00 
04b3e     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04b40     00 00 00 00 
      ...             
04b70     00 00 00 00 
04b74     00 00 00    | st_font        file "st4font.def"
04b77     FF FF 00 00 
04b7b     00 00 00 00 
04b7f     00 18 18 18 
04b83     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04b87     18 18 18 18 
04b8b     18 18 18 18 
04b8f     18          | 	byte	$18[9]
04b90     00 00 00 00 
04b94     00 00 00    | 	byte	$00[7]
04b97     FF FF 18 18 
04b9b     18 18 18 18 
04b9f     18 18 18 18 
04ba3     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04ba7     FF FF 00 00 
04bab     00 00 00 00 
04baf     00 18 18 18 
04bb3     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04bb7     1F 1F 18 18 
04bbb     18 18 18 18 
04bbf     18 18 18 18 
04bc3     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04bc7     F8 F8 18 18 
04bcb     18 18 18 18 
04bcf     18 00 00 00 
04bd3     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04bd7     1F 1F 18 18 
04bdb     18 18 18 18 
04bdf     18 00 00 00 
04be3     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04be7     F8 F8 18 18 
04beb     18 18 18 18 
04bef     18 18 18 18 
04bf3     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04bf7     1F 1F 00 00 
04bfb     00 00 00 00 
04bff     00 18 18 18 
04c03     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04c07     F8 F8 00 00 
04c0b     00 00 00 00 
04c0f     00 18 18 18 
04c13     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04c17     FF FF 18 18 
04c1b     18 18 18 18 
04c1f     18 00 00 18 
04c23     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
04c27     66 7E 7E 66 
04c2b     66 66 66 30 
04c2f     18 00 00 7E 
04c33     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
04c37     3E 06 06 06 
04c3b     06 7E 7E 18 
04c3f     0C 30 18 3C 
04c43     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
04c47     06 06 06 66 
04c4b     66 7E 3C 00 
04c4f     00 30 18 66 
04c53     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
04c57     7E 7E 76 76 
04c5b     66 66 66 00 
04c5f     00 30 18 7C 
04c63     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
04c67     1C 38 70 60 
04c6b     60 7E 3E 00 
04c6f     00 30 18 7E 
04c73     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
04c77     18 0C 0C 06 
04c7b     06 7E 7E 00 
04c7f     00 18 18 00 
04c83     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
04c87     18 18 0C 0C 
04c8b     06 7E 7E 00 
04c8f     00 30 18 3C 
04c93     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
04c97     66 66 66 66 
04c9b     66          | 	byte	$66[5]
04c9c     7E 3C 00 00 
04ca0     00 00 06 06 
04ca4     06 06 16 1E 
04ca8     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
04cac     7E 7E 00 00 
04cb0     00 00 00 00 
04cb4     00 3C 7C 60 
04cb8     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
04cbc     7E 7C 30 18 
04cc0     00 00 00 00 
04cc4     00 3C 7E 66 
04cc8     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
04ccc     7E 7C 18 0C 
04cd0     00 00 30 18 
04cd4     00 3C 3E 06 
04cd8     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
04cdc     7E 7C 00 00 
04ce0     00 00 30 18 
04ce4     00 3E 7E 66 
04ce8     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
04cec     66 66 00 00 
04cf0     00 00 30 18 
04cf4     00 7C 7E 06 
04cf8     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
04cfc     7E 3E 00 00 
04d00     00 00 30 18 
04d04     00 7E 7E 30 
04d08     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04d0c     7E 7E 00 00 
04d10     00 00 18 18 
04d14     00 7E 7E 30 
04d18     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04d1c     7E 7E 00 00 
04d20     00 00 30 18 
04d24     00 3C 7E 66 
04d28     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
04d2c     7E 3C 00 00 
04d30     00 00 1C 1C 
04d34     18 18 38 3C 
04d38     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
04d3c     3C 3C 00 00 
04d40     00 00 00 00 
04d44     00 00 00 00 
04d48     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04d4c     00 00 00 00 
04d50     00 00       | 	byte	$00[6]
04d52     18 18 18 18 
04d56     18 18 18 18 | 	byte	$18[8]
04d5a     00 00 18 18 
04d5e     00 00 00 00 
04d62     66 66 66 66 
04d66     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
04d6a     00 00 00 00 
04d6e     00 00 00 00 
04d72     00          | 	byte	$00[9]
04d73     66 66 FF FF 
04d77     66 66 FF FF 
04d7b     66 66 00 00 
04d7f     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
04d83     7C 7E 06 06 
04d87     3E 7C 60 60 
04d8b     7E 3E 18 18 
04d8f     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
04d93     66 30 30 18 
04d97     18 0C 0C 66 
04d9b     66 00 00 00 
04d9f     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
04da3     66 66 3C 1C 
04da7     1C FC FE 66 
04dab     66 FE FC 00 
04daf     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
04db3     18 18 18 18 
04db7     00 00 00 00 
04dbb     00 00 00 00 
04dbf     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
04dc3     18 1C 0C 0C 
04dc7     0C 0C 0C 0C 
04dcb     1C 18 30 00 
04dcf     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
04dd3     18 38 30 30 
04dd7     30 30 30 30 
04ddb     38 18 0C 00 
04ddf     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
04de3     66 66 3C 3C 
04de7     FF FF 3C 3C 
04deb     66 66 00 00 
04def     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
04df3     00 18 18 18 
04df7     7E 7E 18 18 
04dfb     18 00 00 00 
04dff     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04e03     00 00 00 00 
04e07     00 00       | 	byte	$00[6]
04e09     18 18 18 18 
04e0d     18          | 	byte	$18[5]
04e0e     0C 04 00 00 
04e12     00 00 00 00 
04e16     7E 7E 00 00 
04e1a     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
04e1e     00 00 00 00 
04e22     00 00 00 00 
04e26     00 00 00 00 
04e2a     00          | 	byte	$00[13]
04e2b     18 18 18 00 
04e2f     00 00 00 60 
04e33     60 60 30 30 
04e37     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
04e3b     06 06 06 00 
04e3f     00 00 00 3C 
04e43     7E 66 66 66 
04e47     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
04e4b     66 7E 3C 00 
04e4f     00 00 00 18 
04e53     18 1C 1C 18 
04e57     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
04e5b     18 7E 7E 00 
04e5f     00 00 00 3C 
04e63     7E 66 66 30 
04e67     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
04e6b     0C 7E 7E 00 
04e6f     00 00 00 7E 
04e73     7E 30 30 18 
04e77     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
04e7b     66 7E 3C 00 
04e7f     00 00 00 30 
04e83     30 38 38 3C 
04e87     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
04e8b     7E 30 30 00 
04e8f     00 00 00 7E 
04e93     7E 06 06 3E 
04e97     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
04e9b     66 7E 3C 00 
04e9f     00 00 00 38 
04ea3     3C 0E 06 06 
04ea7     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
04eab     66 7E 3C 00 
04eaf     00 00 00 7E 
04eb3     7E 60 60 30 
04eb7     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
04ebb     0C 0C 0C 00 
04ebf     00 00 00 3C 
04ec3     7E 66 66 3C 
04ec7     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
04ecb     66 7E 3C 00 
04ecf     00 00 00 3C 
04ed3     7E 66 66 7E 
04ed7     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
04edb     70 3C 1C 00 
04edf     00 00 00 00 
04ee3     00 00 18 18 
04ee7     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
04eeb     18 18 18 00 
04eef     00 00 00 00 
04ef3     00 00 18 18 
04ef7     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
04efb     18 18 18 0C 
04eff     04 00 00 00 
04f03     70 38 1C 0E 
04f07     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
04f0b     70 00 00 00 
04f0f     00 00 00 00 
04f13     00 00 7E 7E 
04f17     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
04f1b     00 00 00 00 
04f1f     00 00 00 00 | 	byte	$00[8]
04f23     0E 1C 38 70 
04f27     E0 70 38 1C 
04f2b     0E 00 00 00 
04f2f     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
04f33     7E 66 66 30 
04f37     30 18 18 18 
04f3b     00 18 18 00 
04f3f     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
04f43     7E 66 66 66 
04f47     66 36 06 66 
04f4b     66 7E 3C 00 
04f4f     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
04f53     3C 7E 66 66 
04f57     66 7E 7E 66 
04f5b     66 66 66 00 
04f5f     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
04f63     7E 66 66 7E 
04f67     3E 66 66 66 
04f6b     66 7E 3E 00 
04f6f     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
04f73     7E 66 66 06 
04f77     06 06 06 66 
04f7b     66 7E 3C 00 
04f7f     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
04f83     7E 66 66 66 
04f87     66 66 66 66 
04f8b     66 7E 3E 00 
04f8f     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
04f93     7E 06 06 3E 
04f97     3E 06 06 06 
04f9b     06 7E 7E 00 
04f9f     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
04fa3     7E 06 06 3E 
04fa7     3E 06 06 06 
04fab     06 06 06 00 
04faf     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
04fb3     7E 06 06 76 
04fb7     76 66 66 66 
04fbb     66 7E 3C 00 
04fbf     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
04fc3     66 66 66 7E 
04fc7     7E 66 66 66 
04fcb     66 66 66 00 
04fcf     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
04fd3     7E 18 18 18 
04fd7     18 18 18 18 
04fdb     18 7E 7E 00 
04fdf     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
04fe3     60 60 60 60 
04fe7     60 60 60    | 	byte	$60[7]
04fea     66 66 7E 3C 
04fee     00 00 00 00 
04ff2     66 66 36 36 
04ff6     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
04ffa     66 66 C6 C6 
04ffe     00 00 00 00 
05002     06 06 06 06 
05006     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
0500a     06 06 7E 7E 
0500e     00 00 00 00 
05012     C6 C6 EE EE 
05016     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
0501a     C6 C6 C6 C6 
0501e     00 00 00 00 
05022     66 66 66 6E 
05026     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
0502a     76 66 66 66 
0502e     00 00 00 00 
05032     3C 7E 66 66 
05036     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0503a     66 66 7E 3C 
0503e     00 00 00 00 
05042     3E 7E 66 66 
05046     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
0504a     06 06 06 06 
0504e     00 00 00 00 
05052     3C 7E 66 66 
05056     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0505a     66 56 3E 6C 
0505e     00 00 00 00 
05062     3E 7E 66 66 
05066     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
0506a     66 66 C6 C6 
0506e     00 00 00 00 
05072     7C 7E 06 06 
05076     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
0507a     60 60 7E 3E 
0507e     00 00 00 00 
05082     7E 7E 18 18 
05086     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
0508a     18 18 18 18 
0508e     00 00 00 00 
05092     66 66 66 66 
05096     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
0509a     66 66 7E 3C 
0509e     00 00 00 00 
050a2     66 66 66 66 
050a6     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
050aa     3C 3C 18 18 
050ae     00 00 00 00 
050b2     C6 C6 C6 C6 
050b6     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
050ba     FE EE C6 82 
050be     00 00 00 00 
050c2     66 66 66 3C 
050c6     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
050ca     3C 66 66 66 
050ce     00 00 00 00 
050d2     66 66 66 66 
050d6     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
050da     18 18 18 18 
050de     00 00 00 00 
050e2     7E 7E 30 30 
050e6     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
050ea     06 06 7E 7E 
050ee     00 00 00 00 
050f2     3C 3C 0C 0C 
050f6     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
050fa     0C 0C 3C 3C 
050fe     00 00 00 00 
05102     06 06 0C 0C 
05106     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
0510a     60 60 C0 C0 
0510e     00 00 00 00 
05112     3C 3C 30 30 
05116     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
0511a     30 30 3C 3C 
0511e     00 00 00 00 
05122     18 18 3C 3C 
05126     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
0512a     00 00 00 00 
0512e     00 00 00 00 
05132     00 00 00 00 
05136     00 00 00 00 
0513a     00 00       | 	byte	$00[18]
0513c     FE FE 00 00 
05140     00 00 0C 0C 
05144     18 18 00 00 
05148     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
0514c     00 00 00 00 
05150     00 00 00 00 
05154     00          | 	byte	$00[9]
05155     3C 7C 60 7C 
05159     7E 66 66 7E 
0515d     7C 00 00 00 
05161     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
05165     3E 7E 66 66 
05169     66 66 66 7E 
0516d     3E 00 00 00 
05171     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
05175     3C 3E 06 06 
05179     06 06 06 7E 
0517d     7C 00 00 00 
05181     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
05185     7C 7E 66 66 
05189     66 66 66 7E 
0518d     7C 00 00 00 
05191     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
05195     3C 7E 66 66 
05199     7E 06 06 7E 
0519d     7C 00 00 00 
051a1     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
051a5     18 7E 7E 18 
051a9     18 18 18 18 
051ad     18 00 00 00 
051b1     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
051b5     7C 7E 66 66 
051b9     66 66 7E 7C 
051bd     60 7E 3E 00 
051c1     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
051c5     3E 7E 66 66 
051c9     66 66 66 66 
051cd     66 00 00 00 
051d1     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
051d5     1C 1C 18 18 
051d9     18 18 18 3C 
051dd     3C 00 00 00 
051e1     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
051e5     30 30 30 30 
051e9     30 30 30 30 
051ed     30          | 	byte	$30[9]
051ee     3E 1E 00 00 
051f2     06 06 06 36 
051f6     36 1E 1E 1E 
051fa     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
051fe     00 00 00 00 
05202     1C 1C 18 18 
05206     18 18 18 18 
0520a     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
0520e     00 00 00 00 
05212     00 00 00    | 	byte	$00[7]
05215     6C FE FE D6 
05219     D6 C6 C6 C6 
0521d     C6 00 00 00 
05221     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
05225     3E 7E 66 66 
05229     66 66 66 66 
0522d     66 00 00 00 
05231     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
05235     3C 7E 66 66 
05239     66 66 66 7E 
0523d     3C 00 00 00 
05241     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
05245     3E 7E 66 66 
05249     66 66 66 7E 
0524d     3E 06 06 00 
05251     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
05255     7C 7E 66 66 
05259     66 66 66 7E 
0525d     7C 60 60 00 
05261     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
05265     3E 7E 66 06 
05269     06 06 06 06 
0526d     06 00 00 00 
05271     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
05275     7C 7E 06 0E 
05279     3C 70 60 7E 
0527d     3E 00 00 00 
05281     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
05285     7E 7E 18 18 
05289     18 18 18 78 
0528d     70 00 00 00 
05291     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
05295     66 66 66 66 
05299     66 66 66    | 	byte	$66[7]
0529c     7E 7C 00 00 
052a0     00 00 00 00 
052a4     00 66 66 66 
052a8     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
052ac     18 18 00 00 
052b0     00 00 00 00 
052b4     00 C6 C6 D6 
052b8     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
052bc     C6 82 00 00 
052c0     00 00 00 00 
052c4     00 66 66 3C 
052c8     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
052cc     66 66 00 00 
052d0     00 00 00 00 
052d4     00 66 66 66 
052d8     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
052dc     7C 60 7E 3E 
052e0     00 00 00 00 
052e4     00 7E 7E 30 
052e8     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
052ec     7E 7E 00 00 
052f0     00 00 30 18 
052f4     18 18 18 0C 
052f8     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
052fc     18 30 00 00 
05300     00 00 18 18 
05304     18 18 18 18 
05308     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0530c     18 18 00 00 
05310     00 00 0C 18 
05314     18 18 18 30 
05318     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
0531c     18 0C 00 00 
05320     00 00 6C 7E 
05324     36 00 00 00 
05328     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
0532c     00 00 00 00 
05330     00 00 00 00 
05334     00          | 	byte	$00[9]
05335     18 18 18 18 
05339     18 18 00 00 
0533d     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
05340     00 6C FE FE 
05344     7C 38 10 00 
05348     18 18 18 F8 
0534c     F8 18 18 18 | a8_font        file "atari8.fnt"
05350     C0 C0 C0 C0 
05354     C0 C0 C0 C0 | 	byte	$c0[8]
05358     18 18 18 1F 
0535c     1F 00 00 00 
05360     18 18 18 1F 
05364     1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
05368     00 00 00 1F 
0536c     1F 18 18 18 
05370     C0 E0 70 38 
05374     1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
05378     03 07 0E 1C 
0537c     38 70 E0 C0 
05380     80 C0 E0 F0 
05384     F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
05388     00 00 00 00 
0538c     F0 F0 F0 F0 
05390     01 03 07 0F 
05394     1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
05398     F0 F0 F0 F0 
0539c     00 00 00 00 
053a0     0F 0F 0F 0F 
053a4     00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
053a8     FF FF 00 00 
053ac     00 00 00 00 
053b0     00 00 00 00 
053b4     00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
053b8     00 00 00 00 
053bc     0F 0F 0F 0F 
053c0     00 38 38 EE 
053c4     EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
053c8     00 00 00 F8 
053cc     F8 18 18 18 
053d0     00 00 00 FF 
053d4     FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
053d8     18 18 18 FF 
053dc     FF 18 18 18 
053e0     00 00 3C 7E 
053e4     7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
053e8     00 00 00 00 
053ec     FF FF FF FF 
053f0     03 03 03 03 
053f4     03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
053f8     00 00 00 FF 
053fc     FF 18 18 18 
05400     18 18 18 FF 
05404     FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
05408     0F 0F 0F 0F 
0540c     0F 0F 0F 0F | 	byte	$0f[8]
05410     18 18 18 F8 
05414     F8 00 00 00 
05418     1E 06 1E 06 
0541c     7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
05420     00 18 3C 7E 
05424     18 18 18 00 
05428     00 18 18 18 
0542c     7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
05430     00 18 0C 7E 
05434     0C 18 00 00 
05438     00 18 30 7E 
0543c     30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
05440     00 00 00 00 
05444     00 00 00 00 
05448     00          | 	byte	$00[9]
05449     18 18 18 18 
0544d     00 18 00 00 
05451     66 66 66 00 
05455     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
05459     66 FF 66 66 
0545d     FF 66 00 18 
05461     7C 06 3C 60 
05465     3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
05469     66 36 18 0C 
0546d     66 62 00 38 
05471     6C 38 1C F6 
05475     66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
05479     18 18 18 00 
0547d     00 00 00 00 
05481     70 38 18 18 
05485     38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
05489     0E 1C 18 18 
0548d     1C 0E 00 00 
05491     66 3C FF 3C 
05495     66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
05499     18 18 7E 18 
0549d     18 00 00 00 
054a1     00 00 00 00 
054a5     18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
054a9     00 00 7E 00 
054ad     00 00 00 00 
054b1     00 00 00 00 
054b5     18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
054b9     60 30 18 0C 
054bd     06 02 00 00 
054c1     3C 66 76 6E 
054c5     66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
054c9     18 1C 18 18 
054cd     18 7E 00 00 
054d1     3C 66 30 18 
054d5     0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
054d9     7E 30 18 30 
054dd     66 3C 00 00 
054e1     30 38 3C 36 
054e5     7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
054e9     7E 06 3E 60 
054ed     66 3C 00 00 
054f1     3C 06 3E 66 
054f5     66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
054f9     7E 60 30 18 
054fd     0C 0C 00 00 
05501     3C 66 3C 66 
05505     66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
05509     3C 66 7C 60 
0550d     30 1C 00 00 
05511     00 18 18 00 
05515     18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
05519     00 18 18 00 
0551d     18 18 0C 60 
05521     30 18 0C 18 
05525     30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
05529     00 7E 00 00 
0552d     7E 00 00 06 
05531     0C 18 30 18 
05535     0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
05539     3C 66 30 18 
0553d     00 18 00 00 
05541     3C 66 76 76 
05545     06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
05549     18 3C 66 66 
0554d     7E 66 00 00 
05551     3E 66 3E 66 
05555     66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
05559     3C 66 06 06 
0555d     66 3C 00 00 
05561     1E 36 66 66 
05565     36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
05569     7E 06 3E 06 
0556d     06 7E 00 00 
05571     7E 06 3E 06 
05575     06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
05579     7C 06 06 76 
0557d     66 7C 00 00 
05581     66 66 7E 66 
05585     66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
05589     7E 18 18 18 
0558d     18 7E 00 00 
05591     60 60 60 60 
05595     66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
05599     66 36 1E 1E 
0559d     36 66 00 00 
055a1     06 06 06 06 
055a5     06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
055a9     C6 EE FE D6 
055ad     C6 C6 00 00 
055b1     66 6E 7E 7E 
055b5     76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
055b9     3C 66 66 66 
055bd     66 3C 00 00 
055c1     3E 66 66 3E 
055c5     06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
055c9     3C 66 66 66 
055cd     36 6C 00 00 
055d1     3E 66 66 3E 
055d5     36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
055d9     3C 06 3C 60 
055dd     60 3C 00 00 
055e1     7E 18 18 18 
055e5     18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
055e9     66 66 66 66 
055ed     66          | 	byte	$66[5]
055ee     7E 00 00 66 
055f2     66 66 66 3C 
055f6     18 00 00 C6 
055fa     C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
055fe     C6 00 00 66 
05602     66 3C 3C 66 
05606     66 00 00 66 
0560a     66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
0560e     18 00 00 7E 
05612     30 18 0C 06 
05616     7E 00 00 78 
0561a     18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
0561e     78 00 00 02 
05622     06 0C 18 30 
05626     60 00 00 1E 
0562a     18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
0562e     1E 00 00 10 
05632     38 6C C6 00 
05636     00 00 00 00 
0563a     00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
0563e     FF 00 00 18 
05642     3C 7E 7E 3C 
05646     18 00 00 00 
0564a     3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
0564e     7C 00 00 06 
05652     06 3E 66 66 
05656     3E 00 00 00 
0565a     3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
0565e     3C 00 00 60 
05662     60 7C 66 66 
05666     7C 00 00 00 
0566a     3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
0566e     3C 00 00 70 
05672     18 7C 18 18 
05676     18 00 00 00 
0567a     7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
0567e     60 3E 00 06 
05682     06 3E 66 66 
05686     66 00 00 18 
0568a     00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
0568e     3C 00 00 60 
05692     00 60 60 60 
05696     60 3C 00 06 
0569a     06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
0569e     66 00 00 1C 
056a2     18 18 18 18 
056a6     3C 00 00 00 
056aa     66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
056ae     C6 00 00 00 
056b2     3E 66 66 66 
056b6     66 00 00 00 
056ba     3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
056be     3C 00 00 00 
056c2     3E 66 66 3E 
056c6     06 06 00 00 
056ca     7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
056ce     60 60 00 00 
056d2     3E 66 06 06 
056d6     06 00 00 00 
056da     7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
056de     3E 00 00 18 
056e2     7E 18 18 18 
056e6     70 00 00 00 
056ea     66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
056ee     7C 00 00 00 
056f2     66 66 66 3C 
056f6     18 00 00 00 
056fa     C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
056fe     6C 00 00 00 
05702     66 3C 18 3C 
05706     66 00 00 00 
0570a     66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
0570e     30 1E 00 00 
05712     7E 30 18 0C 
05716     7E 00 00 18 
0571a     3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
0571e     3C 00 18 18 
05722     18 18 18 18 
05726     18 18 00 7E 
0572a     1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
0572e     60 00 10 18 
05732     1C 1E 1C 18 
05736     10 00 08 18 
0573a     38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
0573e     08 00       | 	byte	$08, $00
05740     00 6C FE FE 
05744     7C 38 10 00 
05748     18 18 18 F8 
0574c     F8 18 18 18 | a8_font2       file "atari8.fnt"
05750     C0 C0 C0 C0 
05754     C0 C0 C0 C0 | 	byte	$c0[8]
05758     18 18 18 1F 
0575c     1F 00 00 00 
05760     18 18 18 1F 
05764     1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
05768     00 00 00 1F 
0576c     1F 18 18 18 
05770     C0 E0 70 38 
05774     1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
05778     03 07 0E 1C 
0577c     38 70 E0 C0 
05780     80 C0 E0 F0 
05784     F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
05788     00 00 00 00 
0578c     F0 F0 F0 F0 
05790     01 03 07 0F 
05794     1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
05798     F0 F0 F0 F0 
0579c     00 00 00 00 
057a0     0F 0F 0F 0F 
057a4     00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
057a8     FF FF 00 00 
057ac     00 00 00 00 
057b0     00 00 00 00 
057b4     00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
057b8     00 00 00 00 
057bc     0F 0F 0F 0F 
057c0     00 38 38 EE 
057c4     EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
057c8     00 00 00 F8 
057cc     F8 18 18 18 
057d0     00 00 00 FF 
057d4     FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
057d8     18 18 18 FF 
057dc     FF 18 18 18 
057e0     00 00 3C 7E 
057e4     7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
057e8     00 00 00 00 
057ec     FF FF FF FF 
057f0     03 03 03 03 
057f4     03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
057f8     00 00 00 FF 
057fc     FF 18 18 18 
05800     18 18 18 FF 
05804     FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
05808     0F 0F 0F 0F 
0580c     0F 0F 0F 0F | 	byte	$0f[8]
05810     18 18 18 F8 
05814     F8 00 00 00 
05818     1E 06 1E 06 
0581c     7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
05820     00 18 3C 7E 
05824     18 18 18 00 
05828     00 18 18 18 
0582c     7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
05830     00 18 0C 7E 
05834     0C 18 00 00 
05838     00 18 30 7E 
0583c     30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
05840     00 00 00 00 
05844     00 00 00 00 
05848     00          | 	byte	$00[9]
05849     18 18 18 18 
0584d     00 18 00 00 
05851     66 66 66 00 
05855     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
05859     66 FF 66 66 
0585d     FF 66 00 18 
05861     7C 06 3C 60 
05865     3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
05869     66 36 18 0C 
0586d     66 62 00 38 
05871     6C 38 1C F6 
05875     66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
05879     18 18 18 00 
0587d     00 00 00 00 
05881     70 38 18 18 
05885     38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
05889     0E 1C 18 18 
0588d     1C 0E 00 00 
05891     66 3C FF 3C 
05895     66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
05899     18 18 7E 18 
0589d     18 00 00 00 
058a1     00 00 00 00 
058a5     18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
058a9     00 00 7E 00 
058ad     00 00 00 00 
058b1     00 00 00 00 
058b5     18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
058b9     60 30 18 0C 
058bd     06 02 00 00 
058c1     3C 66 76 6E 
058c5     66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
058c9     18 1C 18 18 
058cd     18 7E 00 00 
058d1     3C 66 30 18 
058d5     0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
058d9     7E 30 18 30 
058dd     66 3C 00 00 
058e1     30 38 3C 36 
058e5     7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
058e9     7E 06 3E 60 
058ed     66 3C 00 00 
058f1     3C 06 3E 66 
058f5     66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
058f9     7E 60 30 18 
058fd     0C 0C 00 00 
05901     3C 66 3C 66 
05905     66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
05909     3C 66 7C 60 
0590d     30 1C 00 00 
05911     00 18 18 00 
05915     18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
05919     00 18 18 00 
0591d     18 18 0C 60 
05921     30 18 0C 18 
05925     30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
05929     00 7E 00 00 
0592d     7E 00 00 06 
05931     0C 18 30 18 
05935     0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
05939     3C 66 30 18 
0593d     00 18 00 00 
05941     3C 66 76 76 
05945     06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
05949     18 3C 66 66 
0594d     7E 66 00 00 
05951     3E 66 3E 66 
05955     66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
05959     3C 66 06 06 
0595d     66 3C 00 00 
05961     1E 36 66 66 
05965     36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
05969     7E 06 3E 06 
0596d     06 7E 00 00 
05971     7E 06 3E 06 
05975     06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
05979     7C 06 06 76 
0597d     66 7C 00 00 
05981     66 66 7E 66 
05985     66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
05989     7E 18 18 18 
0598d     18 7E 00 00 
05991     60 60 60 60 
05995     66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
05999     66 36 1E 1E 
0599d     36 66 00 00 
059a1     06 06 06 06 
059a5     06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
059a9     C6 EE FE D6 
059ad     C6 C6 00 00 
059b1     66 6E 7E 7E 
059b5     76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
059b9     3C 66 66 66 
059bd     66 3C 00 00 
059c1     3E 66 66 3E 
059c5     06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
059c9     3C 66 66 66 
059cd     36 6C 00 00 
059d1     3E 66 66 3E 
059d5     36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
059d9     3C 06 3C 60 
059dd     60 3C 00 00 
059e1     7E 18 18 18 
059e5     18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
059e9     66 66 66 66 
059ed     66          | 	byte	$66[5]
059ee     7E 00 00 66 
059f2     66 66 66 3C 
059f6     18 00 00 C6 
059fa     C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
059fe     C6 00 00 66 
05a02     66 3C 3C 66 
05a06     66 00 00 66 
05a0a     66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
05a0e     18 00 00 7E 
05a12     30 18 0C 06 
05a16     7E 00 00 78 
05a1a     18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
05a1e     78 00 00 02 
05a22     06 0C 18 30 
05a26     60 00 00 1E 
05a2a     18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
05a2e     1E 00 00 10 
05a32     38 6C C6 00 
05a36     00 00 00 00 
05a3a     00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
05a3e     FF 00 00 18 
05a42     3C 7E 7E 3C 
05a46     18 00 00 00 
05a4a     3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
05a4e     7C 00 00 06 
05a52     06 3E 66 66 
05a56     3E 00 00 00 
05a5a     3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
05a5e     3C 00 00 60 
05a62     60 7C 66 66 
05a66     7C 00 00 00 
05a6a     3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
05a6e     3C 00 00 70 
05a72     18 7C 18 18 
05a76     18 00 00 00 
05a7a     7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
05a7e     60 3E 00 06 
05a82     06 3E 66 66 
05a86     66 00 00 18 
05a8a     00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
05a8e     3C 00 00 60 
05a92     00 60 60 60 
05a96     60 3C 00 06 
05a9a     06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
05a9e     66 00 00 1C 
05aa2     18 18 18 18 
05aa6     3C 00 00 00 
05aaa     66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
05aae     C6 00 00 00 
05ab2     3E 66 66 66 
05ab6     66 00 00 00 
05aba     3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
05abe     3C 00 00 00 
05ac2     3E 66 66 3E 
05ac6     06 06 00 00 
05aca     7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
05ace     60 60 00 00 
05ad2     3E 66 06 06 
05ad6     06 00 00 00 
05ada     7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
05ade     3E 00 00 18 
05ae2     7E 18 18 18 
05ae6     70 00 00 00 
05aea     66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
05aee     7C 00 00 00 
05af2     66 66 66 3C 
05af6     18 00 00 00 
05afa     C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
05afe     6C 00 00 00 
05b02     66 3C 18 3C 
05b06     66 00 00 00 
05b0a     66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
05b0e     30 1E 00 00 
05b12     7E 30 18 0C 
05b16     7E 00 00 18 
05b1a     3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
05b1e     3C 00 18 18 
05b22     18 18 18 18 
05b26     18 18 00 7E 
05b2a     1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
05b2e     60 00 10 18 
05b32     1C 1E 1C 18 
05b36     10 00 08 18 
05b3a     38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
05b3e     08 00       | 	byte	$08, $00
05b40     00 00 00 00 
      ...             
05d4c     00 00 00 00 
05d50     00 00       | amiga_font     file "amigafont.def"
05d52     18 18 18 18 
05d56     18 18       | 	byte	$18[6]
05d58     00 18 18 00 
05d5c     00 00 00 00 
05d60     00 00 66 66 
05d64     66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
05d68     00 00 00 00 
05d6c     00 00 00 00 
05d70     00 00       | 	byte	$00[10]
05d72     36 36 7F 36 
05d76     36 36 7F 36 
05d7a     36 00 00 00 
05d7e     00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
05d82     18 7C 06 06 
05d86     3C 60 60 3E 
05d8a     18 00 00 00 
05d8e     00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
05d92     00 00 C6 69 
05d96     36 18 6C 96 
05d9a     63 00 00 00 
05d9e     00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
05da2     1C 36 36 1E 
05da6     6E 3B 33 73 
05daa     DE 00 00 00 
05dae     00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
05db2     18 18 0C 00 
05db6     00 00 00 00 
05dba     00 00 00 00 
05dbe     00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05dc2     30 18 0C 0C 
05dc6     0C 0C 0C 18 
05dca     30 00 00 00 
05dce     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
05dd2     0C 18 30 30 
05dd6     30 30 30 18 
05dda     0C 00 00 00 
05dde     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
05de2     00 66 66 3C 
05de6     FF 3C 66 66 
05dea     00 00 00 00 
05dee     00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
05df2     00 18 18 18 
05df6     7E 18 18 18 
05dfa     00 00 00 00 
05dfe     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
05e02     00 00 00 00 
05e06     00 00 00    | 	byte	$00[7]
05e09     18 18 0C 00 
05e0d     00 00 00 00 
05e11     00 00 00 00 
05e15     00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
05e19     00 00 00 00 
05e1d     00 00 00 00 
05e21     00 00 00 00 
05e25     00 00 00 00 | 	byte	$00[16]
05e29     18 18 00 00 
05e2d     00 00 00 00 
05e31     00 00 C0 60 
05e35     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
05e39     03 00 00 00 
05e3d     00 00 00 00 
05e41     00 3C 66 66 
05e45     76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
05e49     66 3C 00 00 
05e4d     00 00 00 00 
05e51     00 18 1C 1E 
05e55     18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
05e59     18 18 00 00 
05e5d     00 00 00 00 
05e61     00 3C 66 60 
05e65     60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
05e69     06 7E 00 00 
05e6d     00 00 00 00 
05e71     00 3C 66 60 
05e75     60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
05e79     66 3C 00 00 
05e7d     00 00 00 00 
05e81     00 30 38 3C 
05e85     36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
05e89     30 30 00 00 
05e8d     00 00 00 00 
05e91     00 7E 06 06 
05e95     3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
05e99     66 3C 00 00 
05e9d     00 00 00 00 
05ea1     00 38 0C 06 
05ea5     06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
05ea9     66 3C 00 00 
05ead     00 00 00 00 
05eb1     00 7E 60 60 
05eb5     60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
05eb9     18 18 00 00 
05ebd     00 00 00 00 
05ec1     00 3C 66 66 
05ec5     66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
05ec9     66 3C 00 00 
05ecd     00 00 00 00 
05ed1     00 3C 66 66 
05ed5     66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
05ed9     30 1C 00 00 
05edd     00 00 00 00 
05ee1     00 00 00 18 
05ee5     18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
05ee9     18 00 00 00 
05eed     00 00 00 00 
05ef1     00 00 00 18 
05ef5     18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
05ef9     18 18 0C 00 
05efd     00 00 00 00 
05f01     00 00 00 60 
05f05     18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
05f09     00 00 00 00 
05f0d     00 00 00 00 
05f11     00 00 00 00 | 	byte	$00[12]
05f15     7E 00 7E 00 
05f19     00 00 00 00 
05f1d     00 00 00 00 
05f21     00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
05f25     18 60 18 06 
05f29     00 00 00 00 
05f2d     00 00 00 00 
05f31     00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
05f35     60 30 18 00 
05f39     18 18 00 00 
05f3d     00 00 00 00 
05f41     00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
05f45     7B 6B 7B 03 
05f49     03 1E 00 00 
05f4d     00 00 00 00 
05f51     00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
05f55     63 7F 63 63 
05f59     63 63 00 00 
05f5d     00 00 00 00 
05f61     00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
05f65     66 3E 66 66 
05f69     66 3E 00 00 
05f6d     00 00 00 00 
05f71     00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
05f75     06 06 06 06 
05f79     0C 78 00 00 
05f7d     00 00 00 00 
05f81     00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
05f85     63 63 63 63 
05f89     33 1F 00 00 
05f8d     00 00 00 00 
05f91     00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
05f95     06 1E 06 06 
05f99     06 7E 00 00 
05f9d     00 00 00 00 
05fa1     00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
05fa5     06 1E 06 06 
05fa9     06 06 00 00 
05fad     00 00 00 00 
05fb1     00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
05fb5     06 76 66 66 
05fb9     66 7C 00 00 
05fbd     00 00 00 00 
05fc1     00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
05fc5     63 7F 63 63 
05fc9     63 63 00 00 
05fcd     00 00 00 00 
05fd1     00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
05fd5     18 18 18 18 
05fd9     18          | 	byte	$18[5]
05fda     3C 00 00 00 
05fde     00 00 00 00 
05fe2     60 60 60 60 
05fe6     60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
05fea     3E 00 00 00 
05fee     00 00 00 00 
05ff2     C3 63 33 1B 
05ff6     0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
05ffa     C3 00 00 00 
05ffe     00 00 00 00 
06002     03 03 03 03 
06006     03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
0600a     7F 00 00 00 
0600e     00 00 00 00 
06012     63 77 7F 6B 
06016     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
0601a     63 00 00 00 
0601e     00 00 00 00 
06022     63 67 6F 7B 
06026     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
0602a     63 00 00 00 
0602e     00 00 00 00 
06032     3E 63 63 63 
06036     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
0603a     3E 00 00 00 
0603e     00 00 00 00 
06042     3E 66 66 66 
06046     3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
0604a     06 00 00 00 
0604e     00 00 00 00 
06052     3E 63 63 63 
06056     63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
0605a     FE 00 00 00 
0605e     00 00 00 00 
06062     1F 33 33 33 
06066     1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
0606a     63 00 00 00 
0606e     00 00 00 00 
06072     3C 66 06 0C 
06076     18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
0607a     3C 00 00 00 
0607e     00 00 00 00 
06082     7E 18 18 18 
06086     18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
0608a     18 00 00 00 
0608e     00 00 00 00 
06092     63 63 63 63 
06096     63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
0609a     3E 00 00 00 
0609e     00 00 00 00 
060a2     63 63 63 63 
060a6     63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
060aa     08 00 00 00 
060ae     00 00 00 00 
060b2     C3 C3 C3 C3 
060b6     C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
060ba     C3 00 00 00 
060be     00 00 00 00 
060c2     C3 C3 66 3C 
060c6     18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
060ca     C3 00 00 00 
060ce     00 00 00 00 
060d2     C3 C3 66 3C 
060d6     18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
060da     18 00 00 00 
060de     00 00 00 00 
060e2     7F 60 60 30 
060e6     18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
060ea     7F 00 00 00 
060ee     00 00 00 00 
060f2     3C 0C 0C 0C 
060f6     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
060fa     3C 00 00 00 
060fe     00 00 00 00 
06102     00 03 06 0C 
06106     18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
0610a     00 00 00 00 
0610e     00 00 00 00 | 	byte	$00[8]
06112     3C 30 30 30 
06116     30 30 30 30 
0611a     3C 00 00 00 
0611e     00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
06122     08 1C 36 63 
06126     00 00 00 00 
0612a     00 00 00 00 
0612e     00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06132     00 00 00 00 
06136     00 00 00 00 
0613a     00          | 	byte	$00[9]
0613b     7F 00 00 00 
0613f     00 00 00 18 
06143     18 30 00 00 
06147     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
0614b     00 00 00 00 
0614f     00 00 00 00 
06153     00 00       | 	byte	$00[10]
06155     3C 60 7C 66 
06159     66 7C 00 00 
0615d     00 00 00 00 
06161     00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
06165     3E 66 66 66 
06169     66 3E 00 00 
0616d     00 00 00 00 
06171     00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06175     3C 06 06 06 
06179     06 3C 00 00 
0617d     00 00 00 00 
06181     00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
06185     7C 66 66 66 
06189     66 7C 00 00 
0618d     00 00 00 00 
06191     00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06195     3C 66 7E 06 
06199     06 3C 00 00 
0619d     00 00 00 00 
061a1     00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
061a5     3E 0C 0C 0C 
061a9     0C 0C 00 00 
061ad     00 00 00 00 
061b1     00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
061b5     7C 66 66 66 
061b9     7C 60 60 3C 
061bd     00 00 00 00 
061c1     00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
061c5     3E 66 66 66 
061c9     66 66 00 00 
061cd     00 00 00 00 
061d1     00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
061d5     18 18 18 18 
061d9     18          | 	byte	$18[5]
061da     30 00 00 00 
061de     00 00 00 00 
061e2     00 30 00 30 
061e6     30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
061ea     30 30 1E 00 
061ee     00 00 00 00 
061f2     03 03 03 33 
061f6     1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
061fa     63 00 00 00 
061fe     00 00 00 00 
06202     18 18 18 18 
06206     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
0620a     30 00 00 00 
0620e     00 00 00 00 
06212     00 00 00 37 
06216     7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
0621a     63 00 00 00 
0621e     00 00 00 00 
06222     00 00 00 3E 
06226     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
0622a     66 00 00 00 
0622e     00 00 00 00 
06232     00 00 00 3C 
06236     66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
0623a     3C 00 00 00 
0623e     00 00 00 00 
06242     00 00 00 3E 
06246     66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
0624a     06 06 06 00 
0624e     00 00 00 00 
06252     00 00 00 7C 
06256     66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
0625a     60 60 60 00 
0625e     00 00 00 00 
06262     00 00 00 3E 
06266     66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
0626a     06 00 00 00 
0626e     00 00 00 00 
06272     00 00 00 3C 
06276     06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
0627a     3E 00 00 00 
0627e     00 00 00 00 
06282     00 0C 0C 3E 
06286     0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
0628a     38 00 00 00 
0628e     00 00 00 00 
06292     00 00 00 66 
06296     66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
0629a     7C 00 00 00 
0629e     00 00 00 00 
062a2     00 00 00 66 
062a6     66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
062aa     18 00 00 00 
062ae     00 00 00 00 
062b2     00 00 00 63 
062b6     63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
062ba     36 00 00 00 
062be     00 00 00 00 
062c2     00 00 00 63 
062c6     36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
062ca     63 00 00 00 
062ce     00 00 00 00 
062d2     00 00 00 66 
062d6     66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
062da     18 0C 06 00 
062de     00 00 00 00 
062e2     00 00 00 7E 
062e6     30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
062ea     7E 00 00 00 
062ee     00 00 00 00 
062f2     70 18 18 18 
062f6     0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
062fa     70 00 00 00 
062fe     00 00 00 00 
06302     18 18 18 18 
06306     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
0630a     18 00 00 00 
0630e     00 00 00 00 
06312     0E 18 18 18 
06316     70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
0631a     0E 00 00 00 
0631e     00 00 00 00 
06322     46 5D 31 00 
06326     00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
0632a     00 00 00 00 
0632e     00 00 00 00 | 	byte	$00[8]
06332     C0 F0 3C 0F 
06336     C3 F0 3C 0F 
0633a     03 00 00 00 
0633e     00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
06342     18 18 00 18 
06346     18 18 18 18 
0634a     18 00 00 00 
0634e     00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06352     18 18 7E 1B 
06356     1B 7E 18 18 
0635a     00 00 00 00 
0635e     00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
06362     78 CC 0C 0C 
06366     1E 0C 0C 06 
0636a     7F 00 00 00 
0636e     00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
06372     66 3C 66 66 
06376     3C 66 00 00 
0637a     00 00 00 00 
0637e     00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06382     C3 C3 66 3C 
06386     18 7E 18 18 
0638a     18 00 00 00 
0638e     00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06392     18 18 18 18 
06396     00 18 18 18 
0639a     18 00 00 00 
0639e     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
063a2     3C 06 06 3C 
063a6     66 66 66 3C 
063aa     60 60 3C 00 
063ae     00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
063b2     66 66 00 00 
063b6     00 00 00 00 
063ba     00 00 00 00 
063be     00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
063c2     7E 81 B9 85 
063c6     85 B9 81 7E 
063ca     00 00 00 00 
063ce     00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
063d2     3C 33 33 7E 
063d6     00 7F 00 00 
063da     00 00 00 00 
063de     00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
063e2     00 00 CC 66 
063e6     33 66 CC 00 
063ea     00 00 00 00 
063ee     00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
063f2     7E 60 60 00 
063f6     00 00 00 00 
063fa     00 00 00 00 
063fe     00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06402     7E 81 9D A5 
06406     9D A5 81 7E 
0640a     00 00 00 00 
0640e     00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
06412     7E 00 00 00 
06416     00 00 00 00 
0641a     00 00 00 00 
0641e     00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06422     3C 66 66 3C 
06426     00 00 00 00 
0642a     00 00 00 00 
0642e     00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06432     18 18 18 7E 
06436     18 18 18 00 
0643a     7E 00 00 00 
0643e     00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
06442     1E 30 30 18 
06446     0C 06 3E 00 
0644a     00 00 00 00 
0644e     00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
06452     1E 30 30 1C 
06456     30 30 1E 00 
0645a     00 00 00 00 
0645e     00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
06462     30 18 0C 06 
06466     00 00 00 00 
0646a     00 00 00 00 
0646e     00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06472     00 00 00 66 
06476     66 66 66 66 
0647a     FE 06 06 00 
0647e     00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
06482     7C 5E 5E 5E 
06486     5C 50 50 50 
0648a     50 50 00 00 
0648e     00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
06492     00 00 00 18 
06496     18 00 00 00 
0649a     00 00 00 00 
0649e     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
064a2     00 00 00 00 
064a6     00 00 00 00 
064aa     00          | 	byte	$00[9]
064ab     30 18 00 00 
064af     00 00 00 18 
064b3     1C 18 18 18 
064b7     18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
064bb     00 00 00 00 
064bf     00 00 00    | 	byte	$00[7]
064c2     3C 66 66 3C 
064c6     00 7E 00 00 
064ca     00 00 00 00 
064ce     00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
064d2     00 00 33 66 
064d6     CC 66 33 00 
064da     00 00 00 00 
064de     00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
064e2     02 63 32 1A 
064e6     4E 66 F3 40 
064ea     40 00 00 00 
064ee     00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
064f2     04 C6 64 34 
064f6     7C 8C 46 23 
064fa     F0 00 00 00 
064fe     00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
06502     03 C4 66 34 
06506     5B 6C F6 43 
0650a     40 00 00 00 
0650e     00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
06512     18 18 00 18 
06516     0C 06 06 66 
0651a     3C 00 00 00 
0651e     00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06522     06 0C 3E 63 
06526     63 7F 63 63 
0652a     63 00 00 00 
0652e     00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
06532     30 18 3E 63 
06536     63 7F 63 63 
0653a     63 00 00 00 
0653e     00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
06542     0C 33 3E 63 
06546     63 63 7F 63 
0654a     63 00 00 00 
0654e     00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
06552     4E 39 3E 63 
06556     63 7F 63 63 
0655a     63 00 00 00 
0655e     00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
06562     63 00 3E 63 
06566     63 7F 63 63 
0656a     63 00 00 00 
0656e     00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
06572     1C 22 1C 36 
06576     63 63 7F 63 
0657a     63 00 00 00 
0657e     00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
06582     F8 3C 3C 36 
06586     F6 3F 33 33 
0658a     F3 00 00 00 
0658e     00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
06592     78 0C 06 06 
06596     06 06 06 0C 
0659a     78 30 18 00 
0659e     00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
065a2     0C 18 7E 06 
065a6     06 3E 06 06 
065aa     7E 00 00 00 
065ae     00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
065b2     30 18 7E 06 
065b6     06 3E 06 06 
065ba     7E 00 00 00 
065be     00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
065c2     18 66 7E 06 
065c6     06 3E 06 06 
065ca     7E 00 00 00 
065ce     00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
065d2     66 00 7E 06 
065d6     06 3E 06 06 
065da     7E 00 00 00 
065de     00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
065e2     0C 18 3C 18 
065e6     18 18 18 18 
065ea     3C 00 00 00 
065ee     00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
065f2     30 18 3C 18 
065f6     18 18 18 18 
065fa     3C 00 00 00 
065fe     00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
06602     18 66 3C 18 
06606     18 18 18 18 
0660a     3C 00 00 00 
0660e     00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
06612     66 00 3C 18 
06616     18 18 18 18 
0661a     3C 00 00 00 
0661e     00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
06622     1E 36 66 66 
06626     6F 66 66 36 
0662a     1E 00 00 00 
0662e     00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
06632     8E 73 67 6F 
06636     7B 73 63 63 
0663a     63 00 00 00 
0663e     00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
06642     06 0C 3E 63 
06646     63 63 63 63 
0664a     3E 00 00 00 
0664e     00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
06652     30 18 3E 63 
06656     63 63 63 63 
0665a     3E 00 00 00 
0665e     00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
06662     0C 33 3E 63 
06666     63 63 63 63 
0666a     3E 00 00 00 
0666e     00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
06672     8E 71 3E 63 
06676     63 63 63 63 
0667a     3E 00 00 00 
0667e     00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
06682     63 00 3E 63 
06686     63 63 63 63 
0668a     3E 00 00 00 
0668e     00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
06692     00 00 63 36 
06696     1C 1C 36 63 
0669a     00 00 00 00 
0669e     00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
066a2     BE 63 73 7B 
066a6     6B 6F 67 63 
066aa     3F 00 00 00 
066ae     00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
066b2     0C 18 63 63 
066b6     63 63 63 63 
066ba     3E 00 00 00 
066be     00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
066c2     18 0C 63 63 
066c6     63 63 63 63 
066ca     3E 00 00 00 
066ce     00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
066d2     08 36 63 63 
066d6     63 63 63 63 
066da     3E 00 00 00 
066de     00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
066e2     63 00 63 63 
066e6     63 63 63 63 
066ea     3E 00 00 00 
066ee     00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
066f2     30 18 C3 66 
066f6     3C 18 18 18 
066fa     18 00 00 00 
066fe     00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06702     03 03 3F 63 
06706     63 3F 03 03 
0670a     03 00 00 00 
0670e     00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
06712     3C 66 66 66 
06716     36 66 66 66 
0671a     36 06 06 00 
0671e     00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
06722     06 0C 00 3C 
06726     60 7C 66 66 
0672a     7C 00 00 00 
0672e     00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06732     60 30 00 3C 
06736     60 7C 66 66 
0673a     7C 00 00 00 
0673e     00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06742     18 66 00 3C 
06746     60 7C 66 66 
0674a     7C 00 00 00 
0674e     00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06752     8E 71 00 3C 
06756     60 7C 66 66 
0675a     7C 00 00 00 
0675e     00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06762     00 66 00 3C 
06766     60 7C 66 66 
0676a     7C 00 00 00 
0676e     00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06772     18 24 18 3C 
06776     60 7C 66 66 
0677a     7C 00 00 00 
0677e     00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06782     00 00 00 7E 
06786     D8 FE 1B 1B 
0678a     EE 00 00 00 
0678e     00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
06792     00 00 00 3C 
06796     06 06 06 06 
0679a     3C 18 0C 00 
0679e     00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
067a2     06 0C 00 3C 
067a6     66 7E 06 06 
067aa     3C 00 00 00 
067ae     00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
067b2     60 30 00 3C 
067b6     66 7E 06 06 
067ba     3C 00 00 00 
067be     00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
067c2     18 66 00 3C 
067c6     66 7E 06 06 
067ca     3C 00 00 00 
067ce     00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
067d2     00 66 00 3C 
067d6     66 7E 06 06 
067da     3C 00 00 00 
067de     00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
067e2     0C 18 00 18 
067e6     18 18 18 18 
067ea     30 00 00 00 
067ee     00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
067f2     18 0C 00 0C 
067f6     0C 0C 0C 0C 
067fa     18 00 00 00 
067fe     00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
06802     18 66 00 18 
06806     18 18 18 18 
0680a     30 00 00 00 
0680e     00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
06812     00 66 00 18 
06816     18 18 18 18 
0681a     30 00 00 00 
0681e     00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
06822     03 06 3F 18 
06826     3C 66 66 66 
0682a     3C 00 00 00 
0682e     00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06832     8E 71 00 3E 
06836     66 66 66 66 
0683a     66 00 00 00 
0683e     00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
06842     06 0C 00 3C 
06846     66 66 66 66 
0684a     3C 00 00 00 
0684e     00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06852     60 30 00 3C 
06856     66 66 66 66 
0685a     3C 00 00 00 
0685e     00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06862     18 66 00 3C 
06866     66 66 66 66 
0686a     3C 00 00 00 
0686e     00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06872     8E 71 00 3C 
06876     66 66 66 66 
0687a     3C 00 00 00 
0687e     00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06882     00 66 00 3C 
06886     66 66 66 66 
0688a     3C 00 00 00 
0688e     00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06892     00 18 18 00 
06896     7E 00 18 18 
0689a     00 00 00 00 
0689e     00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
068a2     00 00 00 7E 
068a6     73 7B 6F 67 
068aa     3F 00 00 00 
068ae     00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
068b2     0C 18 00 66 
068b6     66 66 66 66 
068ba     7C 00 00 00 
068be     00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
068c2     30 18 00 66 
068c6     66 66 66 66 
068ca     7C 00 00 00 
068ce     00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
068d2     18 66 00 66 
068d6     66 66 66 66 
068da     7C 00 00 00 
068de     00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
068e2     00 66 00 66 
068e6     66 66 66 66 
068ea     7C 00 00 00 
068ee     00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
068f2     30 18 00 66 
068f6     66 66 66 3C 
068fa     18 0C 06 00 
068fe     00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
06902     06 06 06 3E 
06906     66 66 66 3E 
0690a     06 06 06 00 
0690e     00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
06912     00 66 00 66 
06916     66 66 66 3C 
0691a     18 0C 06 00 
0691e     00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
06922     00 7E 66 66 
06926     66 66 66 66 
0692a     66 7E 00 00 
0692e     00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
06932     00 00 00 00 
      ...             
06b3a     00 00 00 00 
06b3e     00 00       | 	byte	$00[526]
06b40     00 00 00 00 
06b44     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
06b45     80 00 00 00 
06b49     00 80 00 00 
06b4d     80 80 00 00 
06b51     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
06b55     80 00 80 00 
06b59     00 40 80 00 
06b5d     AA AA AA 00 
06b61     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
06b65     FF 00 00 00 
06b69     00 FF 00 00 
06b6d     FF FF 00 00 
06b71     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
06b75     FF 00 FF 00 
06b79     00 FF FF 00 
06b7d     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
06b80     00 00 00 00 
06b84     00          | ataripalette   file "ataripalettep2.def"
06b85     11 11 11 00 
06b89     22 22 22 00 
06b8d     33 33 33 00 
06b91     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
06b95     55 55 55 00 
06b99     66 66 66 00 
06b9d     77 77 77 00 
06ba1     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
06ba5     99 99 99 00 
06ba9     AA AA AA 00 
06bad     BB BB BB 00 
06bb1     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
06bb5     DD DD DD 00 
06bb9     EE EE EE 00 
06bbd     FF FF FF 00 
06bc1     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
06bc5     00 14 40 00 
06bc9     00 1E 60 00 
06bcd     00 28 80 00 
06bd1     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
06bd5     00 3C BF 00 
06bd9     00 46 DF 00 
06bdd     00 50 FF 00 
06be1     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
06be5     39 77 FF 00 
06be9     55 8A FF 00 
06bed     71 9E FF 00 
06bf1     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
06bf5     AA C5 FF 00 
06bf9     C6 D8 FF 00 
06bfd     E3 EC FF 00 
06c01     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
06c05     00 00 40 00 
06c09     00 00 60 00 
06c0d     00 00 80 00 
06c11     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
06c15     00 00 BF 00 
06c19     00 00 DF 00 
06c1d     00 00 FF 00 
06c21     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
06c25     39 39 FF 00 
06c29     55 55 FF 00 
06c2d     71 71 FF 00 
06c31     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
06c35     AA AA FF 00 
06c39     C6 C6 FF 00 
06c3d     E3 E3 FF 00 
06c41     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
06c45     20 00 40 00 
06c49     30 00 60 00 
06c4d     40 00 80 00 
06c51     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
06c55     60 00 BF 00 
06c59     70 00 DF 00 
06c5d     80 00 FF 00 
06c61     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
06c65     9C 39 FF 00 
06c69     AA 55 FF 00 
06c6d     B8 71 FF 00 
06c71     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
06c75     D5 AA FF 00 
06c79     E3 C6 FF 00 
06c7d     F1 E3 FF 00 
06c81     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
06c85     40 00 40 00 
06c89     60 00 60 00 
06c8d     80 00 80 00 
06c91     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
06c95     BF 00 BF 00 
06c99     DF 00 DF 00 
06c9d     FF 00 FF 00 
06ca1     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
06ca5     FF 39 FF 00 
06ca9     FF 55 FF 00 
06cad     FF 71 FF 00 
06cb1     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
06cb5     FF AA FF 00 
06cb9     FF C6 FF 00 
06cbd     FF E3 FF 00 
06cc1     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
06cc5     40 00 20 00 
06cc9     60 00 30 00 
06ccd     80 00 40 00 
06cd1     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
06cd5     BF 00 60 00 
06cd9     DF 00 70 00 
06cdd     FF 00 80 00 
06ce1     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
06ce5     FF 39 9C 00 
06ce9     FF 55 AA 00 
06ced     FF 71 B8 00 
06cf1     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
06cf5     FF AA D5 00 
06cf9     FF C6 E3 00 
06cfd     FF E3 F1 00 
06d01     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
06d05     40 00 00 00 
06d09     60 00 00 00 
06d0d     80 00 00 00 
06d11     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
06d15     BF 00 00 00 
06d19     DF 00 00 00 
06d1d     FF 00 00 00 
06d21     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
06d25     FF 39 39 00 
06d29     FF 55 55 00 
06d2d     FF 71 71 00 
06d31     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
06d35     FF AA AA 00 
06d39     FF C6 C6 00 
06d3d     FF E3 E3 00 
06d41     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
06d45     40 10 00 00 
06d49     60 18 00 00 
06d4d     80 20 00 00 
06d51     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
06d55     BF 30 00 00 
06d59     DF 38 00 00 
06d5d     FF 40 00 00 
06d61     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
06d65     FF 6A 39 00 
06d69     FF 80 55 00 
06d6d     FF 95 71 00 
06d71     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
06d75     FF BF AA 00 
06d79     FF D5 C6 00 
06d7d     FF EA E3 00 
06d81     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
06d85     40 20 00 00 
06d89     60 30 00 00 
06d8d     80 40 00 00 
06d91     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
06d95     BF 60 00 00 
06d99     DF 70 00 00 
06d9d     FF 80 00 00 
06da1     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
06da5     FF 9C 39 00 
06da9     FF AA 55 00 
06dad     FF B8 71 00 
06db1     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
06db5     FF D5 AA 00 
06db9     FF E3 C6 00 
06dbd     FF F1 E3 00 
06dc1     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
06dc5     40 30 00 00 
06dc9     60 48 00 00 
06dcd     80 60 00 00 
06dd1     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
06dd5     BF 90 00 00 
06dd9     DF A8 00 00 
06ddd     FF C0 00 00 
06de1     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
06de5     FF CE 39 00 
06de9     FF D5 55 00 
06ded     FF DC 71 00 
06df1     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
06df5     FF EA AA 00 
06df9     FF F1 C6 00 
06dfd     FF F8 E3 00 
06e01     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
06e05     30 40 00 00 
06e09     48 60 00 00 
06e0d     60 80 00 00 
06e11     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
06e15     90 BF 00 00 
06e19     A8 DF 00 00 
06e1d     C0 FF 00 00 
06e21     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
06e25     CE FF 39 00 
06e29     D5 FF 55 00 
06e2d     DC FF 71 00 
06e31     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
06e35     EA FF AA 00 
06e39     F1 FF C6 00 
06e3d     F8 FF E3 00 
06e41     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
06e45     00 40 00 00 
06e49     00 60 00 00 
06e4d     00 80 00 00 
06e51     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
06e55     00 BF 00 00 
06e59     00 DF 00 00 
06e5d     00 FF 00 00 
06e61     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
06e65     39 FF 39 00 
06e69     55 FF 55 00 
06e6d     71 FF 71 00 
06e71     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
06e75     AA FF AA 00 
06e79     C6 FF C6 00 
06e7d     E3 FF E3 00 
06e81     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
06e85     00 40 14 00 
06e89     00 60 1E 00 
06e8d     00 80 28 00 
06e91     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
06e95     00 BF 3C 00 
06e99     00 DF 46 00 
06e9d     00 FF 50 00 
06ea1     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
06ea5     39 FF 77 00 
06ea9     55 FF 8A 00 
06ead     71 FF 9E 00 
06eb1     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
06eb5     AA FF C5 00 
06eb9     C6 FF D8 00 
06ebd     E3 FF EC 00 
06ec1     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
06ec5     00 40 28 00 
06ec9     00 60 3C 00 
06ecd     00 80 50 00 
06ed1     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
06ed5     00 BF 78 00 
06ed9     00 DF 8C 00 
06edd     00 FF A0 00 
06ee1     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
06ee5     39 FF B5 00 
06ee9     55 FF C0 00 
06eed     71 FF CA 00 
06ef1     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
06ef5     AA FF DF 00 
06ef9     C6 FF EA 00 
06efd     E3 FF F4 00 
06f01     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
06f05     00 40 40 00 
06f09     00 60 60 00 
06f0d     00 80 80 00 
06f11     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
06f15     00 BF BF 00 
06f19     00 DF DF 00 
06f1d     00 FF FF 00 
06f21     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
06f25     39 FF FF 00 
06f29     55 FF FF 00 
06f2d     71 FF FF 00 
06f31     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
06f35     AA FF FF 00 
06f39     C6 FF FF 00 
06f3d     E3 FF FF 00 
06f41     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
06f45     00 28 40 00 
06f49     00 3C 60 00 
06f4d     00 50 80 00 
06f51     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
06f55     00 78 BF 00 
06f59     00 8C DF 00 
06f5d     00 A0 FF 00 
06f61     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
06f65     39 B5 FF 00 
06f69     55 C0 FF 00 
06f6d     71 CA FF 00 
06f71     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
06f75     AA DF FF 00 
06f79     C6 EA FF 00 
06f7d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
06f80     00 00 00 00 
06f84     00          | ataripalette2  file "ataripalettep2.def"
06f85     11 11 11 00 
06f89     22 22 22 00 
06f8d     33 33 33 00 
06f91     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
06f95     55 55 55 00 
06f99     66 66 66 00 
06f9d     77 77 77 00 
06fa1     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
06fa5     99 99 99 00 
06fa9     AA AA AA 00 
06fad     BB BB BB 00 
06fb1     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
06fb5     DD DD DD 00 
06fb9     EE EE EE 00 
06fbd     FF FF FF 00 
06fc1     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
06fc5     00 14 40 00 
06fc9     00 1E 60 00 
06fcd     00 28 80 00 
06fd1     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
06fd5     00 3C BF 00 
06fd9     00 46 DF 00 
06fdd     00 50 FF 00 
06fe1     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
06fe5     39 77 FF 00 
06fe9     55 8A FF 00 
06fed     71 9E FF 00 
06ff1     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
06ff5     AA C5 FF 00 
06ff9     C6 D8 FF 00 
06ffd     E3 EC FF 00 
07001     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
07005     00 00 40 00 
07009     00 00 60 00 
0700d     00 00 80 00 
07011     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
07015     00 00 BF 00 
07019     00 00 DF 00 
0701d     00 00 FF 00 
07021     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
07025     39 39 FF 00 
07029     55 55 FF 00 
0702d     71 71 FF 00 
07031     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
07035     AA AA FF 00 
07039     C6 C6 FF 00 
0703d     E3 E3 FF 00 
07041     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
07045     20 00 40 00 
07049     30 00 60 00 
0704d     40 00 80 00 
07051     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
07055     60 00 BF 00 
07059     70 00 DF 00 
0705d     80 00 FF 00 
07061     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
07065     9C 39 FF 00 
07069     AA 55 FF 00 
0706d     B8 71 FF 00 
07071     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
07075     D5 AA FF 00 
07079     E3 C6 FF 00 
0707d     F1 E3 FF 00 
07081     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
07085     40 00 40 00 
07089     60 00 60 00 
0708d     80 00 80 00 
07091     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
07095     BF 00 BF 00 
07099     DF 00 DF 00 
0709d     FF 00 FF 00 
070a1     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
070a5     FF 39 FF 00 
070a9     FF 55 FF 00 
070ad     FF 71 FF 00 
070b1     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
070b5     FF AA FF 00 
070b9     FF C6 FF 00 
070bd     FF E3 FF 00 
070c1     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
070c5     40 00 20 00 
070c9     60 00 30 00 
070cd     80 00 40 00 
070d1     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
070d5     BF 00 60 00 
070d9     DF 00 70 00 
070dd     FF 00 80 00 
070e1     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
070e5     FF 39 9C 00 
070e9     FF 55 AA 00 
070ed     FF 71 B8 00 
070f1     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
070f5     FF AA D5 00 
070f9     FF C6 E3 00 
070fd     FF E3 F1 00 
07101     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
07105     40 00 00 00 
07109     60 00 00 00 
0710d     80 00 00 00 
07111     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
07115     BF 00 00 00 
07119     DF 00 00 00 
0711d     FF 00 00 00 
07121     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
07125     FF 39 39 00 
07129     FF 55 55 00 
0712d     FF 71 71 00 
07131     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
07135     FF AA AA 00 
07139     FF C6 C6 00 
0713d     FF E3 E3 00 
07141     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
07145     40 10 00 00 
07149     60 18 00 00 
0714d     80 20 00 00 
07151     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
07155     BF 30 00 00 
07159     DF 38 00 00 
0715d     FF 40 00 00 
07161     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
07165     FF 6A 39 00 
07169     FF 80 55 00 
0716d     FF 95 71 00 
07171     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
07175     FF BF AA 00 
07179     FF D5 C6 00 
0717d     FF EA E3 00 
07181     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
07185     40 20 00 00 
07189     60 30 00 00 
0718d     80 40 00 00 
07191     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
07195     BF 60 00 00 
07199     DF 70 00 00 
0719d     FF 80 00 00 
071a1     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
071a5     FF 9C 39 00 
071a9     FF AA 55 00 
071ad     FF B8 71 00 
071b1     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
071b5     FF D5 AA 00 
071b9     FF E3 C6 00 
071bd     FF F1 E3 00 
071c1     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
071c5     40 30 00 00 
071c9     60 48 00 00 
071cd     80 60 00 00 
071d1     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
071d5     BF 90 00 00 
071d9     DF A8 00 00 
071dd     FF C0 00 00 
071e1     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
071e5     FF CE 39 00 
071e9     FF D5 55 00 
071ed     FF DC 71 00 
071f1     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
071f5     FF EA AA 00 
071f9     FF F1 C6 00 
071fd     FF F8 E3 00 
07201     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
07205     30 40 00 00 
07209     48 60 00 00 
0720d     60 80 00 00 
07211     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
07215     90 BF 00 00 
07219     A8 DF 00 00 
0721d     C0 FF 00 00 
07221     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
07225     CE FF 39 00 
07229     D5 FF 55 00 
0722d     DC FF 71 00 
07231     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
07235     EA FF AA 00 
07239     F1 FF C6 00 
0723d     F8 FF E3 00 
07241     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
07245     00 40 00 00 
07249     00 60 00 00 
0724d     00 80 00 00 
07251     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
07255     00 BF 00 00 
07259     00 DF 00 00 
0725d     00 FF 00 00 
07261     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
07265     39 FF 39 00 
07269     55 FF 55 00 
0726d     71 FF 71 00 
07271     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
07275     AA FF AA 00 
07279     C6 FF C6 00 
0727d     E3 FF E3 00 
07281     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
07285     00 40 14 00 
07289     00 60 1E 00 
0728d     00 80 28 00 
07291     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
07295     00 BF 3C 00 
07299     00 DF 46 00 
0729d     00 FF 50 00 
072a1     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
072a5     39 FF 77 00 
072a9     55 FF 8A 00 
072ad     71 FF 9E 00 
072b1     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
072b5     AA FF C5 00 
072b9     C6 FF D8 00 
072bd     E3 FF EC 00 
072c1     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
072c5     00 40 28 00 
072c9     00 60 3C 00 
072cd     00 80 50 00 
072d1     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
072d5     00 BF 78 00 
072d9     00 DF 8C 00 
072dd     00 FF A0 00 
072e1     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
072e5     39 FF B5 00 
072e9     55 FF C0 00 
072ed     71 FF CA 00 
072f1     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
072f5     AA FF DF 00 
072f9     C6 FF EA 00 
072fd     E3 FF F4 00 
07301     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
07305     00 40 40 00 
07309     00 60 60 00 
0730d     00 80 80 00 
07311     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
07315     00 BF BF 00 
07319     00 DF DF 00 
0731d     00 FF FF 00 
07321     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
07325     39 FF FF 00 
07329     55 FF FF 00 
0732d     71 FF FF 00 
07331     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
07335     AA FF FF 00 
07339     C6 FF FF 00 
0733d     E3 FF FF 00 
07341     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
07345     00 28 40 00 
07349     00 3C 60 00 
0734d     00 50 80 00 
07351     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
07355     00 78 BF 00 
07359     00 8C DF 00 
0735d     00 A0 FF 00 
07361     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
07365     39 B5 FF 00 
07369     55 C0 FF 00 
0736d     71 CA FF 00 
07371     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
07375     AA DF FF 00 
07379     C6 EA FF 00 
0737d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
07380                 | 
07380                 | '**********************************************************************************
07380                 | '
07380                 | '        Timings and colors definitions
07380                 | '
07380                 | '**********************************************************************************
07380                 | 
07380                 | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
07380     08 00 00 00 
07384     3C 00 00 00 
07388     08 00 00 00 
0738c     00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
07390     07 00 00 00 
07394     04 00 00 00 
07398     01 00 00 00 
0739c     80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
073a0     58 02 00 00 
073a4     20 9E 4B 14 
073a8     FB A8 9E 01 
073ac     58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
073b0     00 00 00 00 
073b4     C0 00 00 00 
073b8     00 00 00 00 
073bc     00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
073c0                 | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
073c0     00 75 C7 97 
073c4     27 47 F6 0A 
073c8     05 79 CB 9B 
073cc     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
073d0                 | 
073d0                 | ''--------  Initialization  ----------------------------------------------------------------
073d0                 | 
073d0     28 0C 64 FD | hdmi            setq    #6
073d4     00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
073d8     28 10 64 FD |                 setq    #8
073dc     D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
073e0                 | 
073e0     1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
073e4     3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
073e8     C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
073ec     D6 C6 01 F1 |                 add     t1,hbase
073f0     58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
073f4     E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
073f8     7B 0B 80 5F 
073fc     E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
07400     66 66 86 FF 
07404     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
07408                 | '
07408     D6 C6 01 F6 |                 mov 	t1,hbase			   '
0740c     11 C6 65 F0 |                 shl 	t1,#17                             '
07410     E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
07414     02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
07418                 | 
07418     01 C6 61 FD |                 cogid   t1              		   ' get a cogid
0741c     0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
07420     E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
07424                 | 
07424                 | ''--------  frame rendering main loop  ---------------------------------------------------
07424                 | 
07424     28 06 64 FD | p101            setq 	#3
07428     00 A5 05 FB | 		rdlong  vblankptr,ptra
0742c     28 6A 64 FD |                 setq    #47+6				   ' read sprite data
07430     D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
07434     00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
07438     00 A0 05 F6 |                 mov     dlinum, #0
0743c     01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
07440     D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
07444                 | 
07444                 | 
07444     00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
07448     00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
0744c     ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
07450                 |                 
07450                 | 
07450                 | 
07450                 | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
07450                 |   
07450     1F A8 15 F4 |                 testb   paletteptr,#31 wc
07454     29 FE 65 3D |          if_nc  setq2   #255
07458     D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
0745c                 | 
0745c                 | '' -----   up porch (before the picture)
0745c                 | 
0745c     C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
07460     C1 C4 01 F6 |                 mov     hsync1,sync_001	
07464     40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
07468     D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
0746c                 |  
0746c                 |    
0746c                 |  
0746c     E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
07470     E2 8C B1 FC |                 xzero   m_sn,hsync1
07474     60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
07478     E1 8E C1 FC |                 xcont   m_bv,hsync0     
0747c     E1 90 C1 FC |                 xcont   m_vi,hsync0
07480     DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
07484                 | 
07484     E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
07488     E2 8C B1 FC |                 xzero   m_sn,hsync1
0748c     48 00 B0 FD | 		call    #dli
07490     E1 8E C1 FC |                 xcont   m_bv,hsync0     
07494     E1 90 C1 FC |                 xcont   m_vi,hsync0
07498     20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
0749c                 |                 	
0749c                 |                 
0749c                 | 
0749c                 |  
0749c                 | '' ------- the main screen drawing starts here
0749c                 | 
0749c     E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
074a0     E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
074a4     30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
074a8     E1 8E C1 FC |                 xcont   m_bv,hsync0
074ac     00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
074b0     01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
074b4     04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
074b8                 |               
074b8                 | 
074b8     CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
074bc     DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
074c0                 | 
074c0                 | ' ---------------- All visible lines displayed now, start vblank  
074c0                 | 
074c0     D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
074c4     28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
074c8     C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
074cc     C3 C4 01 F6 |                 mov     hsync1,sync_223
074d0     25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
074d4     4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
074d8                 | 
074d8                 | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
074d8                 | 
074d8                 | '' --------------- Display list interpreter ---------------------------------------------------------------------------
074d8                 | 
074d8     00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
074dc                 | 
074dc     DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
074e0     04 B8 05 A1 |     if_z        add     dlptr2,#4
074e4     14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
074e8                 | 
074e8     01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
074ec     EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
074f0     E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
074f4     EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
074f8     DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
074fc                 | 
074fc     DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
07500     DD C6 41 F8 |                 getnib  t1,dl,#0
07504     02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
07508     70 00 90 AD |     if_z        jmp     #preload
0750c     00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
07510     94 00 90 AD |     if_z        jmp     #preload2
07514     01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
07518     0C 00 90 AD |     if_z        jmp     #p390
0751c     03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
07520     28 00 90 AD |     if_z        jmp     #p391  
07524                 | 
07524     2D 00 64 FD | p308            ret
07528                 |    
07528     DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
0752c     E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
07530     04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
07534     ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
07538     E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
0753c     E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
07540     04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
07544     04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
07548     8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
0754c                 |  
0754c                 | '' --------  Reload palette. To do 
0754c                 | 
0754c     E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
07550     04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
07554     0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
07558     29 1E 64 FD |          	setq2   #15				   ' load 16 entries
0755c     00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
07560     E0 00 00 FB |         	rdlong  $000, framebuf2         	
07564     70 FF 9F FD |         	jmp     #dli                
07568                 |       
07568                 | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
07568                 | 
07568                 | 
07568                 | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
07568                 | 
07568     E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
0756c     E2 8C B1 FC |                 xzero   m_sn,hsync1
07570     E1 8E C1 FC |                 xcont   m_bv,hsync0     
07574     E1 90 C1 FC |                 xcont   m_vi,hsync0
07578     FB ED 6F 0B |         _ret_   djnz    pa,#blank
0757c                 |         
0757c                 | '' -------------- Preload a line from PSRAM        
0757c                 |         
0757c     D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
07580     0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
07584     DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
07588     DE B4 01 F6 |                 mov     buf1,buf1c
0758c     03 A0 05 F7 |                 incmod  dlinum,#3
07590                 | 
07590     04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
07594     32 B7 01 F6 |                 mov     buf2,a1024
07598     E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
0759c     0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
075a0     28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
075a4     D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
075a8                 |  
075a8                 |  
075a8                 | preload2      '  incmod  dlinum,#3
075a8     04 C0 45 F0 |                 shr 	framebuf2,#4
075ac     ED B2 01 F6 |                 mov 	cmd,affffffff
075b0     E0 B4 01 F6 |                 mov 	buf1,framebuf2
075b4     28 02 64 FD |                 setq	#1
075b8     D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
075bc                 |                 
075bc                 | 
075bc                 | '' -------------- Draw sprites
075bc                 | 
075bc     CF 5C 02 F6 | sprite          mov t8,frames
075c0     10 5C 0E F5 | 		and t8,#16 wz
075c4     11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
075c8     10 48 06 A6 | 	if_z    mov spritenum, #16	
075cc                 | 		
075cc                 | 
075cc     24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
075d0     03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
075d4     EF 56 96 F9 |                 alts    t5,#sprite1xy
075d8     00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
075dc     0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
075e0     EF 56 96 F9 |                 alts    t5,#sprite1xy
075e4     00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
075e8     0F 4C 66 F7 |                 signx	sprite_x,#15
075ec     F0 56 96 F9 |                 alts    t5,#sprite1wh
075f0     00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
075f4     01 52 86 F1 |                 sub     sprite_h,#1
075f8     F0 56 96 F9 |                 alts    t5,#sprite1wh
075fc     00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
07600                 | 
07600                 | 
07600     32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
07604     BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
07608     00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
0760c     B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
07610     00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
07614     AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
07618     00 5E 06 F6 |                 mov 	t9,#0
0761c     28 5F 82 F1 |                 sub 	t9,sprite_w                      	
07620     2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
07624     9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
07628                 |      
07628     CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
0762c     27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
07630     90 00 90 CD |      if_c       jmp     #p801				' if not, go out
07634     29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
07638     88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
0763c                 |                 
0763c     25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
07640     0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
07644     DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
07648                 |   		
07648     1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
0764c     26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
07650                 | 
07650     28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
07654     26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
07658     26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
0765c                 |  
0765c     EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
07660     00 C8 01 F1 |                 add     t2,0-0				' then add the offset
07664     10 00 90 CD |      if_c 	jmp     #p899		
07668                 | 	
07668                 | 	
07668     26 CD 01 F6 | 		mov 	t4,sprite_x	'
0766c     28 CD 01 F1 | 		add	t4,sprite_w
07670     32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
07674                 | 
07674     E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
07678                 | 
07678     28 59 02 F6 | p899		mov 	t6,sprite_w
0767c     01 58 86 F1 | 	 	sub     t6,#1
07680     02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
07684                 | 
07684     28 58 62 FD |                 setq   	t6
07688     E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
0768c     28 5D 02 F6 |                 mov t8,sprite_w
07690     03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
07694     24 00 90 AD |         if_z    jmp #p898
07698                 |          
07698                 |         
07698     70 5F 06 F6 |                 mov  t9,#368
0769c     2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
076a0                 | 
076a0     04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
076a4     08 5C 06 FA |                 mul t8,#8				' bits to shr
076a8     FF FF 7F FF 
076ac     FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
076b0     2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
076b4     00 5E 8E F9 |                 altd t9,#0				' and mask 
076b8     2D 01 00 F5 |                 and 0-0, t7
076bc                 |                
076bc                 | 
076bc     28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
076c0     E5 E0 7A FA |                 wmlong 368,t3				
076c4                 |                 
076c4     C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
076c8     03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
076cc     2D 00 64 FD |                 ret
076d0                 | 	
076d0                 | 	
076d0                 |                
076d0                 |  
076d0                 | '' -------------- Graphics line ------------------------------------------------------------
076d0                 |  
076d0                 | 
076d0                 | '' consts and vars
076d0                 | 
076d0     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
076d4     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
076d8     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
076dc     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
076e0                 | 
076e0     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
076e4                 | 
076e4                 | '------ these longs will be set by setmode function
076e4                 | 
076e4     00 00 00 00 | m_bs            long    0        'blanks before sync
076e8     00 00 00 00 | m_sn            long    0        'sync
076ec     00 00 00 00 | m_bv            long    0        'blanks before visible
076f0     00 00 00 00 | m_vi            long    0        'visible pixels #
076f4                 | 'm_border        long    0        'left/right borders
076f4     00 00 00 00 | i_upporch       long    0        'up porch lines
076f8     00 00 00 00 | i_vsync         long    0        'vsync lines
076fc     00 00 00 00 | i_downporch     long    0        'down porch lines
07700     00 00 00 00 | i_cpl           long    0        'chars/longs per line
07704     00 00 00 00 | i_totalvis      long    0
07708                 | 
07708                 | '-------------------------------------
07708                 |  
07708     00 00 00 00 | linenum         long    0
0770c     00 00 00 00 | frames          long    0
07710     00 00 00 00 | dlinum long 0
07714     00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
07718                 | 
07718     00 00 00 00 | vblankptr       long    0
0771c     00 00 00 00 | modeptr         long    0
07720     00 00 00 00 | paletteptr      long    0
07724     00 00 00 00 | dlptr           long    0
07728     01 00 00 00 | hbase           long    1
0772c     00 00 00 00 | mailbox         long    0
07730     00 00 00 00 | spriteptr          long 0
07734                 | 
07734     00 00 00 00 | cmd             long    0
07738     00 EC 07 00 | buf1            long    $80000-1024-4096
0773c     00 04 00 00 | buf2            long    1024
07740     01 00 00 00 | dlptr2          long    1
07744     01 00 00 00 | dl              long    1
07748                 | 
07748     00 00 00 00 | buf1c long 0
0774c     00 EC 07 00 | buf1d            long    $80000-1024-4096
07750     01 00 00 00 | framebuf2       long    1
07754     01 00 00 00 | hsync0          long    1
07758     01 00 00 00 | hsync1          long    1
0775c                 | 
0775c     01 00 00 00 | t1              long    1
07760     00 00 00 00 | t2 long 0
07764     00 00 00 00 | t3 long 0
07768     00 00 00 00 | t4 long 0
0776c                 | 
0776c     00 00 00 00 | rcnt            long    0  'dl repeat count
07770     00 00 00 00 | rcnt2           long    0
07774     00 00 00 00 | rcnt2a          long    0
07778     00 00 00 00 | roffset         long    0
0777c     00 00 00 00 | rdl             long    0  'dl repeat line
07780     00 00 00 00 | dlc             long    0  'dl command
07784                 | 
07784     FF FF FF FF | affffffff       long    $ffffffff
07788     00 00 00 00 | sprite1pointer long 0
0778c     00 00 00 00 | sprite1xy      long 0
07790     00 00 00 00 | sprite1wh      long 0
07794     00 00 00 00 | sprite2pointer long 0
07798     00 00 00 00 | sprite2xy      long 0
0779c     00 00 00 00 | sprite2wh      long 0
077a0     00 00 00 00 | sprite3pointer long 0
077a4     00 00 00 00 | sprite3xy      long 0
077a8     00 00 00 00 | sprite3wh      long 0
077ac     00 00 00 00 | sprite4pointer long 0
077b0     00 00 00 00 | sprite4xy      long 0
077b4     00 00 00 00 | sprite4wh      long 0
077b8     00 00 00 00 | sprite5pointer long 0
077bc     00 00 00 00 | sprite5xy      long 0
077c0     00 00 00 00 | sprite5wh      long 0
077c4     00 00 00 00 | sprite6pointer long 0
077c8     00 00 00 00 | sprite6xy      long 0
077cc     00 00 00 00 | sprite6wh      long 0
077d0     00 00 00 00 | sprite7pointer long 0
077d4     00 00 00 00 | sprite7xy      long 0
077d8     00 00 00 00 | sprite7wh      long 0
077dc     00 00 00 00 | sprite8pointer long 0
077e0     00 00 00 00 | sprite8xy      long 0
077e4     00 00 00 00 | sprite8wh      long 0
077e8     00 00 00 00 | sprite9pointer long 0
077ec     00 00 00 00 | sprite9xy      long 0
077f0     00 00 00 00 | sprite9wh      long 0
077f4     00 00 00 00 | sprite10pointer long 0
077f8     00 00 00 00 | sprite10xy      long 0
077fc     00 00 00 00 | sprite10wh      long 0
07800     00 00 00 00 | sprite11pointer long 0
07804     00 00 00 00 | sprite11xy      long 0
07808     00 00 00 00 | sprite11wh      long 0
0780c     00 00 00 00 | sprite12pointer long 0
07810     00 00 00 00 | sprite12xy      long 0
07814     00 00 00 00 | sprite12wh      long 0
07818     00 00 00 00 | sprite13pointer long 0
0781c     00 00 00 00 | sprite13xy      long 0
07820     00 00 00 00 | sprite13wh      long 0
07824     00 00 00 00 | sprite14pointer long 0
07828     00 00 00 00 | sprite14xy      long 0
0782c     00 00 00 00 | sprite14wh      long 0
07830     00 00 00 00 | sprite15pointer long 0
07834     00 00 00 00 | sprite15xy      long 0
07838     00 00 00 00 | sprite15wh      long 0
0783c     00 00 00 00 | sprite16pointer long 0
07840     00 00 00 00 | sprite16xy      long 0
07844     00 00 00 00 | sprite16wh      long 0
07848     00 00 00 00 | sprite17pointer long 0
0784c     00 00 00 00 | sprite17xy      long 0
07850     00 00 00 00 | sprite17wh      long 0
07854     00 00 00 00 | sprite18pointer long 0
07858     00 00 00 00 | sprite18xy      long 0
0785c     00 00 00 00 | sprite18wh      long 0
07860     00 00 00 00 | spritenum long 0
07864                 | 
07864     00 00 00 00 | spriteline long 0
07868     84 03 00 00 | sprite_x long 900
0786c     00 00 00 00 | sprite_y long 0
07870     10 00 00 00 | sprite_w long 16
07874     40 00 00 00 | sprite_h long 64
07878     00 00 00 00 | l2 long 0
0787c     00 00 00 00 | t5 long 0
07880     00 00 00 00 | t6 long 0
07884     00 00 00 00 | t7 long 0
07888     00 00 00 00 | t8 long 0
0788c     00 00 00 00 | t9 long 0
07890     00 00 00 00 | preloadaddr long 0
07894     00 00 00 00 | preloadlineaddr long 0
07898     00 04 00 00 | a1024 long 1024
0789c                 | 
0789c     E0 03 00 00 | aa long 992
078a0     FF 03 00 00 | a1023 long 1023
078a4     00 10 00 00 | a4096 long 4096
078a8                 |  fit 368
078a8                 |  fit 368
078a8                 | _psram_spin2_dat_
078a8     00 00 00 00 
      ...             
079a0     00 00 00 00 
079a4     00 00 00 00 |     listdata long 0[8*8]
079a8                 |             orgh
079a8                 | 
079a8                 | ' driver state
079a8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
079ac     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
079b0                 | 
079b0                 | ' delay profile
079b0     07 00 00 00 
079b4     00 CF 7B 05 
079b8     80 D1 F0 08 
079bc     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
079c0     80 C4 60 0F 
079c4     80 39 7A 12 
079c8     40 2D D9 13 
079cc     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
079d0                 | 
079d0                 | ' data to be passed to driver when starting it
079d0                 | startupData
079d0     00 00 00 00 |     long    0           ' current frequency
079d4     00 00 00 00 |     long    FLAGS       ' optional flags for driver
079d8     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
079dc     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
079e0     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
079e4     F0 79 00 00 |     long    deviceData  ' address of devices data structure in HUBRAM
079e8     70 7A 00 00 |     long    qosData     ' address of QoS data structure in HUBRAM
079ec     90 7A 00 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
079f0                 | 
079f0                 | ' data for memory
079f0                 | deviceData
079f0                 |     ' 16 bank parameters follow (16MB per bank)
079f0     00 00 00 00 
      ...             
07a28     00 00 00 00 
07a2c     00 00 00 00 |     long    0[16]                               ' banks 0-15
07a30                 |     ' 16 banks of pin parameters follow
07a30     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
07a34     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
07a38     FF FF FF FF 
      ...             
07a68     FF FF FF FF 
07a6c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
07a70                 | 
07a70                 | ' data for COG polling
07a70                 | qosData 
07a70     00 00 FF FF 
07a74     00 00 FF FF 
07a78     00 00 FF FF 
07a7c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
07a80     00 00 FF FF 
07a84     00 00 FF FF 
07a88     00 00 FF FF 
07a8c     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
07a90                 |     
07a90                 | ' mailbox storage
07a90                 | 
07a90                 | mailboxes
07a90     00 00 00 00 
      ...             
07ae8     00 00 00 00 
07aec     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
07af0                 | 	alignl
07af0                 | _psram16drv_spin2_dat_
07af0                 |                             orgh
07af0     00 00 00 00 
      ...             
07b08     00 00 00 00 
07b0c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
07b10                 | 
07b10                 | driver_start
07b10                 |                             org
07b10 000             | '..................................................................................................
07b10 000             | ' Memory layout for COG RAM once operational:
07b10 000             | '
07b10 000             | '  COG RAM address      Usage
07b10 000             | '  ---------------      ----
07b10 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
07b10 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
07b10 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
07b10 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
07b10 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
07b10 000             | '  ~$198-$1F3           State and register variables
07b10 000             | '
07b10 000             | ' Also during driver COG startup:
07b10 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
07b10 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
07b10 000             | '..................................................................................................
07b10 000             |                             
07b10 000             | ' Mailbox storage after vector initialization
07b10 000             | 
07b10 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
07b14 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
07b18 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
07b1c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
07b20 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
07b24 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
07b28 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
07b2c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
07b30 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
07b34 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
07b38 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
07b3c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
07b40 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
07b44 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
07b48 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
07b4c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
07b50 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
07b54 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
07b58 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
07b5c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
07b60 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
07b64 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
07b68 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
07b6c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
07b70 018             | 
07b70 018             | ' Mailbox parameter addresses per COG once patched
07b70 018             |                             
07b70 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
07b74 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
07b78 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
07b7c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
07b80 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
07b84 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
07b88 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
07b8c 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
07b90 020             | 
07b90 020             | '..................................................................................................
07b90 020             | ' Per COG request and state setup and service branching
07b90 020             |         
07b90 020             | cog0                 
07b90 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
07b94 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
07b98 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
07b9c 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
07ba0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07ba4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07ba8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
07bac 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
07bb0 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
07bb4 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07bb8 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07bbc 02b 33 CA 63 FD |                             execf   request-0               'jump to service
07bc0 02c             | cog1                        
07bc0 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
07bc4 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
07bc8 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
07bcc 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
07bd0 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07bd4 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07bd8 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
07bdc 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
07be0 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
07be4 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07be8 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07bec 037 33 CA 63 FD |                             execf   request-0               'jump to service
07bf0 038             | cog2                         
07bf0 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
07bf4 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
07bf8 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
07bfc 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
07c00 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07c04 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07c08 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
07c0c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
07c10 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
07c14 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07c18 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07c1c 043 33 CA 63 FD |                             execf   request-0               'jump to service
07c20 044             | cog3                        
07c20 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
07c24 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
07c28 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
07c2c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
07c30 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07c34 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07c38 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
07c3c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
07c40 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
07c44 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07c48 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07c4c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
07c50 050             | cog4                        
07c50 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
07c54 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
07c58 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
07c5c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
07c60 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07c64 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07c68 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
07c6c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
07c70 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
07c74 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07c78 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07c7c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
07c80 05c             | cog5                        
07c80 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
07c84 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
07c88 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
07c8c 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
07c90 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07c94 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07c98 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
07c9c 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
07ca0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
07ca4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07ca8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07cac 067 33 CA 63 FD |                             execf   request-0               'jump to service
07cb0 068             | cog6                        
07cb0 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
07cb4 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
07cb8 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
07cbc 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
07cc0 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07cc4 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07cc8 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
07ccc 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
07cd0 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
07cd4 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07cd8 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07cdc 073 33 CA 63 FD |                             execf   request-0               'jump to service
07ce0 074             | cog7                        
07ce0 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
07ce4 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
07ce8 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
07cec 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
07cf0 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07cf4 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07cf8 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
07cfc 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
07d00 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
07d04 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07d08 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07d0c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
07d10 080             | 
07d10 080             |                             fit     128
07d10 080             |                             fit     128
07d10 080             | pad                         long    0[128-$]                'align init code to $80
07d10 080             | 
07d10 080             | '..................................................................................................
07d10 080             | 
07d10 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
07d10 080             | 
07d10 080             | init                        
07d10 080             |                             ' get driver scratch long address in hub
07d10 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
07d14 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
07d18 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
07d1c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
07d20 084             |                     
07d20 084             |                             ' read in the additional LUT RAM code
07d20 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
07d24 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
07d28 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
07d2c 087             | 
07d2c 087             |                             ' read the startup parameters
07d2c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
07d30 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
07d34 089             | 
07d34 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
07d34 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
07d38 08a             | 
07d38 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
07d3c 08b 01 00 00 5F 
07d40 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
07d44 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
07d48 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
07d4c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
07d50 090             | 
07d50 090             |                             ' setup data pin modes and data bus pin group in streamer commands
07d50 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
07d54 091 01 00 00 FF 
07d58 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
07d5c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
07d60 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
07d64 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
07d68 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
07d6c 097 08 DE 47 F5 |                             or      a, #8
07d70 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
07d74 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
07d78 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
07d7c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
07d80 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
07d84 09d 01 DE 07 F1 |                             add     a, #1
07d88 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
07d8c 09f             |  
07d8c 09f             |                             ' setup device control pin states
07d8c 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
07d90 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
07d94 0a1 01 00 00 FF 
07d98 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
07d9c 0a3             | 
07d9c 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
07da0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
07da4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
07da8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
07dac 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
07db0 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
07db4 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
07db8 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
07dbc 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
07dc0 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
07dc4 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
07dc8 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
07dcc 0af             | pinloop
07dcc 0af             |                             ' generate minimum CE high time before access
07dcc 0af A1 07 00 FF 
07dd0 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
07dd4 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
07dd8 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
07ddc 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
07de0 0b4 1F DE 63 FD |                             waitx   a                       'delay
07de4 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
07de8 0b6             | 
07de8 0b6             |                             ' setup the COG mailboxes and addresses 
07de8 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
07dec 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
07df0 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
07df4 0b9             | 
07df4 0b9 28 2E 64 FD |                             setq    #24-1
07df8 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
07dfc 0bb             | 
07dfc 0bb             |                             ' setup the polling loop for active COGs 
07dfc 0bb 01 C2 63 FD |                             cogid   id
07e00 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
07e04 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
07e08 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
07e0c 0bf 0A F0 07 F6 |                             mov     ptra, #10
07e10 0c0 E1 F1 03 FA |                             mul     ptra, id
07e14 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
07e18 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
07e1c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
07e20 0c4 03 C2 07 FA |                             mul     id, #3
07e24 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
07e28 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
07e2c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
07e30 0c8 D8 01 B0 FD |                             call    #reloadcogs
07e34 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
07e38 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
07e3c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
07e3c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
07e40 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
07e44 0cd 08 04 DC FC |                             rep     #2, #8
07e48 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
07e4c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
07e50 0d0             | 
07e50 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
07e50 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
07e50 0d0 01 C2 63 FD |                             cogid   id
07e54 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
07e58 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
07e5c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
07e60 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
07e64 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
07e68 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
07e6c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
07e70 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
07e74 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
07e78 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
07e7c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
07e80 0dc 00 00 00 F6 |                             mov     0-0, 0-0
07e84 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
07e88 0de A5 E5 03 F1 |                             add     d, const512
07e8c 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
07e90 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
07e94 0e1 00 00 00 F6 |                             mov     0-0, 0-0
07e98 0e2             |                             
07e98 0e2             |                             ' setup register values for control vector loop setup after we return
07e98 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
07e9c 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
07ea0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
07ea4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
07ea8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
07eac 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
07eb0 0e8 D0 C3 8F F9 |                             altd    id, #id0
07eb4 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
07eb8 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
07ebc 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
07ec0 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
07ec4 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
07ec8 0ee             |  
07ec8 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
07ecc 0ef 07 CA 07 F5 |                             and     request, #7
07ed0 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
07ed4 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
07ed8 0f2             | 
07ed8 0f2             |                             fit     $100                    'ensure all init code fits this space
07ed8 0f2             |                             fit     $100                    'ensure all init code fits this space
07ed8 0f2             | 
07ed8 0f2 00 00 00 00 
      ...             
07f08 0fe 00 00 00 00 
07f0c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
07f10 100             | 
07f10 100             | '..................................................................................................
07f10 100             | ' Error result handling and COG notification of request completion
07f10 100             | 
07f10 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
07f14 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
07f18 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
07f1c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
07f20 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
07f24 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
07f28 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
07f2c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
07f30 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
07f34 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
07f38 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
07f3c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
07f40 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
07f44 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
07f48 10e             | ' Poller re-starts here after a COG is serviced
07f48 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
07f4c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
07f50 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
07f54 111             | ' Main dynamic polling loop repeats until a request arrives
07f54 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
07f58 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
07f5c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
07f60 114             | 
07f60 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
07f64 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
07f68 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
07f6c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
07f70 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
07f74 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
07f78 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
07f7c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
07f80 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
07f84 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
07f88 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
07f8c 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
07f90 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
07f94 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
07f98 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
07f9c 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
07fa0 124             | 
07fa0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
07fa4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
07fa8 126             |  
07fa8 126             | '..................................................................................................
07fa8 126             | ' List handler                               
07fa8 126             | 
07fa8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
07fac 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
07fb0 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
07fb4 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
07fb8 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
07fbc 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
07fc0 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
07fc4 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
07fc8 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
07fcc 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
07fd0 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
07fd4 131 33 00 60 FD |                             execf   0-0                     'process the request 
07fd8 132             | 
07fd8 132             | '..................................................................................................
07fd8 132             | ' Restoring per COG state and resuming where we left off
07fd8 132             | 
07fd8 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
07fdc 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
07fe0 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
07fe4 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
07fe8 136 D8 CB FB F8 |                             getbyte request, addr1, #3
07fec 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
07ff0 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
07ff4 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
07ff8 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
07ffc 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
08000 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
08004 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
08008 13e             |                    
08008 13e             | '..................................................................................................
08008 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
08008 13e             | 
08008 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
0800c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
08010 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
08014 141 D0 DF B7 F9 |                             setd    a, #id0
08018 142 D8 DF BF F9 |                             sets    a, #addr1
0801c 143 FE FF FF FF 
08020 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
08024 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
08028 146 3F DE A7 F9 |                             alti    a, #%111_111 
0802c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
08030 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
08034 149 01 E2 63 FD |                             cogid   c
08038 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
0803c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
08040 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
08044 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
08048 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
0804c 14f 00 E0 03 F6 |                             mov     b, 0-0
08050 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
08054 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
08058 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
0805c 153 0C 00 90 AD |             if_z            jmp     #excluded               
08060 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
08064 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
08068 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
0806c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
08070 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
08074 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
08078 15a             | 
08078 15a             | 'determine priority cogs and build instructions for the polling sequence
08078 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
0807c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
08080 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
08084 15d             | 
08084 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
08088 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
0808c 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
08090 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
08094 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
08098 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
0809c 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
080a0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
080a4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
080a8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
080ac 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
080b0 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
080b4 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
080b8 16a             | endprioloop
080b8 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
080bc 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
080c0 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
080c4 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
080c8 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
080cc 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
080d0 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
080d4 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
080d8 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
080dc 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
080e0 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
080e4 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
080e8 176             | 
080e8 176             | ' populate the round robin COG polling instructions
080e8 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
080ec 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
080f0 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
080f4 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
080f8 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
080fc 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
08100 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
08104 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
08108 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
0810c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
08110 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
08114 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
08118 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
0811c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
08120 184             | '..................................................................................................
08120 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
08120 184             | 
08120 184             | set_latency                                                 '            (a) set latency
08120 184             | get_latency                                                 '            (b) get latency
08120 184             | set_burst                                                   '            (c) set burst size of bank
08120 184             | get_burst                                                   '            (d) get burst size of bank
08120 184             |                                                             '            (e) dump state
08120 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
08124 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
08128 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
0812c 187             |                                                             ' | | | | e  account for following AUGS
0812c 187 04 00 00 FF 
08130 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
08134 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
08138 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
0813c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
08140 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
08144 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
08148 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
0814c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
08150 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
08154 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
08158 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
0815c 193             | 
0815c 193             | '..................................................................................................
0815c 193             | ' Misc EXECF code
0815c 193             | 
0815c 193 33 72 63 FD | start_read_exec             execf   newburstr
08160 194 33 7C 63 FD | start_write_exec            execf   resumewrites
08164 195 33 78 63 FD | continue_read_exec          execf   lockedreads
08168 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
0816c 197             | 
0816c 197             | '..................................................................................................
0816c 197             | ' Variables
0816c 197             | 
0816c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
08170 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
08174 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
08178 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
0817c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
08180 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
08184 19d             | 
08184 19d 00 00 00 80 | xfreq1          long    $80000000
08188 19e 00 00 00 40 | xfreq2          long    $40000000
0818c 19f 03 00 00 00 | delay           long    3
08190 1a0             | 
08190 1a0             | lutcodeaddr                 
08190 1a0             | startupparams
08190 1a0             | excludedcogs                                    'careful: shared register use!
08190 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
08194 1a1 00 00 00 00 | flags           long    0
08198 1a2             | mask                                            'careful: shared register use!
08198 1a2 00 00 00 00 | resetmaskA      long    0
0819c 1a3             | limit                                           'careful: shared register use!
0819c 1a3 00 00 00 00 | resetmaskB      long    0
081a0 1a4 00 00 00 00 | datapins        long    0
081a4 1a5             | const512                                        'careful: shared register use!
081a4 1a5 00 00 00 00 | devicelist      long    0
081a8 1a6 00 00 00 00 | coglist         long    0
081ac 1a7 00 00 00 00 | mbox            long    0 
081b0 1a8             | 
081b0 1a8             | clkpin                                          'shared with code patched during init
081b0 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
081b4 1a9             | cspin                                           'shared with code patched during init
081b4 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
081b8 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
081bc 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
081c0 1ac 01 00 00 00 | clkdelay        long    1
081c4 1ad 00 00 00 00 | regdatabus      long    0
081c8 1ae             | 
081c8 1ae 10 00 00 00 | deviceaddr      long    $10
081cc 1af             | rrcounter
081cc 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
081d0 1b0             | 
081d0 1b0             | ' jump addresses for the per COG handlers
081d0 1b0 20 00 00 00 | cog0_handler    long    cog0
081d4 1b1 2C 00 00 00 | cog1_handler    long    cog1
081d8 1b2 38 00 00 00 | cog2_handler    long    cog2
081dc 1b3 44 00 00 00 | cog3_handler    long    cog3
081e0 1b4 50 00 00 00 | cog4_handler    long    cog4
081e4 1b5 5C 00 00 00 | cog5_handler    long    cog5
081e8 1b6 68 00 00 00 | cog6_handler    long    cog6
081ec 1b7 74 00 00 00 | cog7_handler    long    cog7
081f0 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
081f4 1b9             | 
081f4 1b9             | ' EXECF sequences
081f4 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
081f8 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
081fc 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
08200 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
08204 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
08208 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
0820c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
08210 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
08210 1c0             | 
08210 1c0             | 
08210 1c0             | ' SKIPF sequences
08210 1c0             | skiptable
08210 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
08214 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
08218 1c2 00 00 00 00 |                 long    0                      ' read modify write long
0821c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
08220 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
08224 1c5 00 00 00 00 | pattern2        long    0
08228 1c6 00 00 00 00 | pattern3        long    0
0822c 1c7 77 02 00 00 | singlelong      long    %1001110111  
08230 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
08234 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
08238 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
0823c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
08240 1cc             | 
08240 1cc             | ' LUT RAM address values
08240 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
08244 1cd DD 02 00 00 | continue_read   long    continue_read_lut
08248 1ce DB 02 00 00 | continue_write  long    continue_write_lut
0824c 1cf F6 02 00 00 | noread          long    noread_lut
08250 1d0             | 
08250 1d0 00 00 00 00 | id0             long    0
08254 1d1 01 00 00 00 | id1             long    1
08258 1d2 02 00 00 00 | id2             long    2
0825c 1d3 03 00 00 00 | id3             long    3
08260 1d4 04 00 00 00 | id4             long    4
08264 1d5 05 00 00 00 | id5             long    5
08268 1d6 06 00 00 00 | id6             long    6
0826c 1d7 07 00 00 00 | id7             long    7
08270 1d8             | 
08270 1d8             | 'These next 10 request registers below are also temporarily reused during init 
08270 1d8             | 'and COG updates and need to follow immediately after id0-id7
08270 1d8 00 00 00 00 | addr1           long    0
08274 1d9 00 00 00 00 | hubdata         long    0
08278 1da 00 00 00 00 | count           long    0
0827c 1db 00 00 00 00 | addr2           long    0
08280 1dc 00 00 00 00 | total           long    0
08284 1dd 00 00 00 00 | offset1         long    0
08288 1de 00 00 00 00 | offset2         long    0
0828c 1df 00 00 00 00 | link            long    0
08290 1e0             | 
08290 1e0             | burstwrite                                      'note shared register use during init
08290 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
08294 1e1 00 00 00 00 | id              long    0
08298 1e2             | 
08298 1e2 00 00 00 00 | header          long    0
0829c 1e3 00 00 00 00 | trailer         long    0
082a0 1e4 00 00 00 00 | cmdaddr         long    0
082a4 1e5 00 00 00 00 | request         long    0
082a8 1e6 00 00 00 00 | rrlimit         long    0
082ac 1e7 00 00 00 00 | pinconfig       long    0
082b0 1e8 00 00 00 00 | clks            long    0
082b4 1e9 00 00 00 00 | resume          long    0
082b8 1ea 00 00 00 00 | orighubsize     long    0
082bc 1eb 00 00 00 00 | wrclks          long    0
082c0 1ec             | 
082c0 1ec 00 00 00 00 | pattern         long    0
082c4 1ed 00 00 00 00 | hubscratch      long    0
082c8 1ee 00 10 00 00 | val4k           long    4096
082cc 1ef             | 
082cc 1ef             | ' temporary general purpose regs
082cc 1ef 00 00 00 00 | a               long    0
082d0 1f0 00 00 00 00 | b               long    0
082d4 1f1 00 00 00 00 | c               long    0
082d8 1f2 00 00 00 00 | d               long    0
082dc 1f3             | 
082dc 1f3             |                 fit     502
082dc 1f3             |                 fit     502
082dc 1f3             | 
082dc 1f3             | '..................................................................................................
082dc 1f3             | 
082dc 1f3             |             orgh
082dc                 | 
082dc                 | lut_code
082dc                 | 'HW init code up to 80 longs
082dc                 | 
082dc                 | '..................................................................................................
082dc                 | ' Memory layout for LUT RAM once operational:
082dc                 | '
082dc                 | '  LUT RAM address      Usage
082dc                 | '  ---------------      ----
082dc                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
082dc                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
082dc                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
082dc                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
082dc                 | '
082dc                 | ' Also during driver COG startup:
082dc                 | ' $230-$24F is used for HW init setup
082dc                 | ' $250-$26F is used as temporary vector storage 
082dc                 | '..................................................................................................
082dc                 | 
082dc                 |                 org $230    
082dc 230             | 
082dc 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
082dc 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
082e0 231 24 16 60 FD |                             pollxfi
082e4 232 FF AA 2A FF 
082e8 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
082ec 234 28 00 B0 FD |                             call    #sendqspi
082f0 235 07 F8 07 FF 
082f4 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
082f8 237 28 00 B0 FD |                             call    #sendspi
082fc 238 F8 07 78 FF 
08300 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
08304 23a 1C 00 B0 FD |                             call    #sendspi
08308 23b 7F 78 78 FF 
0830c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
08310 23d 10 00 B0 FD |                             call    #sendspi 
08314 23e 2D 00 64 FD |                             ret
08318 23f             | 
08318 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
0831c 240 32 0C 64 FD |                             skipf   #%110
08320 241 9C EF 03 F6 |                             mov     pb, xsendimm
08324 242             | 
08324 242 10 D0 07 F6 | sendspi                     mov     clks, #16
08328 243 97 EF 03 F6 |                             mov     pb, ximm8lut
0832c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
08330 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
08334 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
08338 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
0833c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
08340 249 50 48 63 FD |                             fltl    datapins                'float data bus
08344 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
08348 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
0834c 24c             | 
0834c 24c 00 00 00 00 
08350 24d 00 00 00 00 
08354 24e 00 00 00 00 
08358 24f 00 00 00 00 |                 long    0[$270-32-$]
0835c 250             |     
0835c 250             |                 fit     $270-32  ' keep room for 32 vector longs
0835c 250             |                 fit     $270-32  ' keep room for 32 vector longs
0835c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
0835c 250             | rw_vect ' PSRAM jump vectors
0835c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
08360 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
08364 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
08368 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
0836c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
08370 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
08374 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
08378 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
0837c 258             | ro_vect ' R/O PSRAM jump vectors
0837c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
08380 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
08384 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
08388 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
0838c 25c 00 01 00 00 |                 long    unsupported
08390 25d 00 01 00 00 |                 long    unsupported
08394 25e 00 01 00 00 |                 long    unsupported
08398 25f 00 01 00 00 |                 long    unsupported
0839c 260             | ctrl_vect ' Control jump vectors
0839c 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
083a0 261 00 01 00 00 |                 long    unsupported
083a4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
083a8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
083ac 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
083b0 265 00 01 00 00 |                 long    unsupported
083b4 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
083b8 267 3E 01 00 00 |                 long    reconfig 
083bc 268             | no_vect ' Invalid bank jump vectors
083bc 268 01 01 00 00 |                 long    invalidbank
083c0 269 01 01 00 00 |                 long    invalidbank
083c4 26a 01 01 00 00 |                 long    invalidbank
083c8 26b 01 01 00 00 |                 long    invalidbank
083cc 26c 01 01 00 00 |                 long    invalidbank
083d0 26d 01 01 00 00 |                 long    invalidbank
083d4 26e 01 01 00 00 |                 long    invalidbank
083d8 26f 01 01 00 00 |                 long    invalidbank
083dc 270             | 
083dc 270             |                 fit     $270
083dc 270             |                 fit     $270
083dc 270             | '..................................................................................................
083dc 270             | ' PSRAM READS
083dc 270             |                                                             ' a b c d e f
083dc 270             |                                                             ' B W L B R L  (a) byte read
083dc 270             |                                                             ' Y O O U E O  (b) word read
083dc 270             |                                                             ' T R N R S C  (c) long read
083dc 270             |                                                             ' E D G S U K  (d) new burst read
083dc 270             |                                                             '       T M E  (e) resumed sub-burst
083dc 270             |                                                             '         E D  (f) locked sub-burst
083dc 270             | 
083dc 270             | 
083dc 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
083e0 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
083e4 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
083e8 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
083ec 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
083f0 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
083f4 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
083f8 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
083fc 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
08400 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
08404 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
08408 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
0840c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
08410 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
08414 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
08418 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
0841c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
08420 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
08424 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
08428 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
0842c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
08430 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
08434 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
08438 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
0843c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
08440 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
08444 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
08448 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
0844c 28c             | 
0844c 28c             |                             ' fall through to read bursts
0844c 28c             |                         
0844c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
0844c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
08450 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
08454 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
08458 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
0845c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
08460 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
08464 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
08468 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
0846c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
08470 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
08474 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
08478 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
0847c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
08480 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
08484 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
08488 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
0848c 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
08490 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
08494 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
08498 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
0849c 2a0 E8 D1 03 F1 |                             add     clks, clks
084a0 2a1             | readcommon
084a0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
084a4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
084a8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
084ac 2a4             | 
084ac 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
084b0 2a5 69 C8 63 FD |                             rev     cmdaddr
084b4 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
084b8 2a7 61 C8 63 FD |                             mergeb  cmdaddr
084bc 2a8             | 
084bc 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
084c0 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
084c4 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
084c4 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
084c8 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
084cc 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
084d0 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
084d4 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
084d4 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
084d8 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
084dc 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
084e0 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
084e4 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
084e8 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
084ec 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
084ec 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
084f0 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
084f4 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
084f8 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
084fc 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
08500 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
08504 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
08508 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
0850c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
08510 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
08514 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
08518 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
0851c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
08520 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
08524 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
08524 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
08528 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
0852c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
08530 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
08534 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
08538 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
0853c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
08540 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
08544 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
08548 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
0854c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
08550 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
08554 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
08558 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
0855c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
08560 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
08564 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
08568 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
0856c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
08570 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
08574 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
08578 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
0857c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
08580 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
08584 2da 10 03 90 FD |                             jmp     #writecommon
08588 2db             | 
08588 2db             | '..................................................................................................
08588 2db             | ' Burst continuation testing
08588 2db             | 
08588 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
0858c 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
08590 2dd             | continue_read_lut          
08590 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
08594 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
08598 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
0859c 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
085a0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
085a4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
085a8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
085ac 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
085b0 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
085b4 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
085b8 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
085bc 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
085c0 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
085c4 2ea             | 
085c4 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
085c8 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
085cc 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
085d0 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
085d4 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
085d8 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
085dc 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
085e0 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
085e4 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
085e8 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
085ec 2f4 2A 1C 66 0D |             _ret_           push    #poller
085f0 2f5             | 
085f0 2f5             | 
085f0 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
085f4 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
085f4 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
085f8 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
085fc 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
08600 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
08604 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
08608 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
0860c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
08610 2fd 2D 00 64 FD |                             ret                             ' | continue processing
08614 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
08618 2ff             | '..................................................................................................
08618 2ff             | ' Completion of requests
08618 2ff             | 
08618 2ff             | complete_rw_lut             
08618 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
0861c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
08620 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
08624 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
08628 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
0862c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
08630 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
08634 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
08638 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
0863c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
08640 309 32 62 64 AD |             if_z            skipf   #%110001
08644 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
08648 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
0864c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
08650 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
08654 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
08658 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
0865c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
08660 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
08664 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
08668 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
0866c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
08670 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
08674 316             |                                                             ' skipcase (a) gfx copy to/from hub
08674 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
08674 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
08674 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
08678 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
0867c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
08680 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
08684 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
08688 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
0868c 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
08690 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
08694 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
08698 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
0869c 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
086a0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
086a4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
086a8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
086ac 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
086b0 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
086b4 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
086b8 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
086bc 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
086c0 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
086c4 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
086c8 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
086cc 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
086d0 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
086d4 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
086d8 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
086dc 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
086e0 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
086e4 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
086e8 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
086ec 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
086f0 335 DF B7 03 A6 |             if_z            mov     addr2, link
086f4 336 34 FF 9F AD |             if_z            jmp     #checknext
086f8 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
086fc 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
08700 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
08704 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
08708 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
0870c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
08710 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
08714 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
08718 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
0871c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
08720 341             | 
08720 341             | '..................................................................................................
08720 341             | ' PSRAM WRITES
08720 341             |                                                             '  a b c d e f g h
08720 341             | 
08720 341             |                                                             '  B W L F B R L L (a) byte write(s)
08720 341             |                                                             '  Y O O I U E O O (b) word write(s)
08720 341             |                                                             '  T R N L R S C C (c) long write(s)
08720 341             |                                                             '  E D G L S U K K (d) resumed fill
08720 341             |                                                             '          T M E E (e) new burst write
08720 341             |                                                             '            E D D (f) resumed burst
08720 341             |                                                             '              F B (g) locked fill
08720 341             |                                                             '              I U (h) locked burst write
08720 341             |                                                             '              L R 
08720 341             |                                                             '              L S 
08720 341             |                                                             '                T 
08720 341             | 
08720 341             | w_single                   
08720 341             | w_fill_cont           
08720 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
08724 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
08728 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
0872c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
08730 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
08734 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
08738 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
0873c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
08740 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
08744 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
08748 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
0874c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
08750 34d             |                ' disable call to r_resume_burst for single longs when z=0
08750 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
08754 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
08758 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
0875c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
08760 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
08764 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
08768 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
0876c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
08770 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
08774 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
08778 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
0877c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
08780 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
08784 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
08788 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
0878c 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
08790 35d             |         
08790 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
08790 35d             |             '
08790 35d             |             '  At least one of these 3 optional components will be sent
08790 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
08790 35d             |             '     body - N x full longs of data
08790 35d             |             '     trailer - last partial long of data
08790 35d             |             '
08790 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
08790 35d             |             '
08790 35d             |             'Case    Type                           Sends
08790 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
08790 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
08790 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
08790 35d             |             ' 4)     Multiple long fill             body only
08790 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
08790 35d             | 
08790 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
08790 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
08794 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
08798 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
0879c 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
087a0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
087a4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
087a8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
087ac 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
087b0 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
087b4 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
087b8 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
087bc 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
087c0 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
087c4 36a             |                             
087c4 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
087c8 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
087cc 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
087d0 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
087d4 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
087d8 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
087dc 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
087e0 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
087e4 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
087e8 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
087ec 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
087f0 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
087f4 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
087f8 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
087fc 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
08800 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
08804 37a             | 
08804 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
08808 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
0880c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
08810 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
08814 37e             |                  
08814 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
08818 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
0881c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
08820 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
08824 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
08828 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
0882c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
08830 385             | 
08830 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
08834 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
08838 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
0883c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
08840 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
08844 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
08848 38b             | 
08848 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
08848 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
0884c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
08850 38d 2A B0 63 FD |                             push    addr1                   'save address
08854 38e             | 
08854 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
08854 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
08858 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
0885c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
08860 391             |             
08860 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
08864 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
08868 393 2B B0 63 FD |                             pop     addr1                   'restore address
0886c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
08870 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
08874 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
08878 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
0887c 398             | 
0887c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
08880 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
08884 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
08888 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
0888c 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
08890 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
08894 39e             | 
08894 39e             |                             'trailer is done
08894 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
08898 39f             | 
08898 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
0889c 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
088a0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
088a4 3a2             | 
088a4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
088a8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
088ac 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
088b0 3a5 61 C8 63 FD |                             mergeb  cmdaddr
088b4 3a6             |                             
088b4 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
088b8 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
088bc 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
088c0 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
088c4 3aa             |                                                          
088c4 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
088c8 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
088cc 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
088d0 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
088d4 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
088d8 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
088dc 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
088e0 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
088e4 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
088e8 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
088ec 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
088f0 3b5             |  
088f0 3b5 59 52 63 FD |                             drvh    cspin
088f4 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
088f8 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
088fc 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
08900 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
08904 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
08908 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
0890c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
08910 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
08914 3be EA E5 03 F6 |                             mov     d, orighubsize
08918 3bf EF E5 63 F0 |                             shl     d, a
0891c 3c0 F2 E3 83 F1 |                             sub     c, d
08920 3c1 DD E3 03 F1 |                             add     c, offset1
08924 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
08928 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
0892c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
08930 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
08934 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
08938 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
0893c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
08940 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
08944 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
08948 3cb BB D3 03 F6 |                             mov     resume, restorefill
0894c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
08950 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
08954 3ce 6C FC BF CD |             if_c            call    #yield
08958 3cf 2D 00 64 FD |                             ret
0895c 3d0             |                            
0895c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
0895c 3d0             |                       '     rczl    pa                      'rotate left into address offset
0895c 3d0             |                       '     rczl    c wcz                   'restore count and flags
0895c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
08960 3d1 02 EC 67 F0 |                             shl     pa, #2
08964 3d2 28 06 64 AD |             if_z            setq    #3
08968 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
0896c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
08970 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
08974 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
08978 3d7             | 
08978 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
0897c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
08980 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
08984 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
08988 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
0898c 3dc             |         
0898c 3dc             | 
0898c 3dc             | '..................................................................................................
0898c 3dc             | 
0898c 3dc             |                 fit 1024-32
0898c 3dc             |                 fit 1024-32
0898c 3dc 00 00 00 00 
08990 3dd 00 00 00 00 
08994 3de 00 00 00 00 
08998 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
0899c 3e0             |                 org 1024-32
0899c 000             | 
0899c 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
0899c 000 00 00 00 00 |                 long $0000
089a0 001 11 11 00 00 |                 long $1111
089a4 002 22 22 00 00 |                 long $2222
089a8 003 33 33 00 00 |                 long $3333
089ac 004 44 44 00 00 |                 long $4444
089b0 005 55 55 00 00 |                 long $5555
089b4 006 66 66 00 00 |                 long $6666
089b8 007 77 77 00 00 |                 long $7777
089bc 008 88 88 00 00 |                 long $8888
089c0 009 99 99 00 00 |                 long $9999
089c4 00a AA AA 00 00 |                 long $aaaa
089c8 00b BB BB 00 00 |                 long $bbbb
089cc 00c CC CC 00 00 |                 long $cccc
089d0 00d DD DD 00 00 |                 long $dddd
089d4 00e EE EE 00 00 |                 long $eeee
089d8 00f FF FF 00 00 |                 long $ffff
089dc 010             | 
089dc 010             | 'masks
089dc 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
089e0 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
089e4 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
089e8 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
089ec 014             | 
089ec 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
089f0 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
089f4 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
089f8 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
089fc 018             | 
089fc 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
08a00 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
08a04 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
08a08 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
08a0c 01c             | 
08a0c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
08a10 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
08a14 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
08a18 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
08a1c 020             | 
08a1c 020             |         fit 1024
08a1c 020             |         fit 1024
08a1c 020             | 
08a1c 020             | '--------------------------------------------------------------------------------------------------
08a1c 020             |         orgh
08a1c                 | 
08a1c                 | gfxexpansion
08a1c                 |                             'simple line drawing graphics expansion of memory driver
08a1c                 |                             'jmp     #donerepeats                'just return for now
08a1c                 | 
08a1c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
08a20     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
08a24     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
08a28     DD E1 03 F6 |                             mov     b, offset1              'get error term
08a2c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
08a30     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
08a34     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
08a38     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
08a3c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
08a40     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
08a44     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
08a48     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
08a4c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
08a50     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
08a54     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
08a58     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
08a5c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
08a60     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
08a64     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
08a68     DC E5 33 F9 |                             getword d, total, #0            'get line width
08a6c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
08a70     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
08a74     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
08a78     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
08a7c     C3 03 80 FD |                             jmp     #readmask               'continue filling
08a80                 | 	alignl
08a80                 | __system__dat_
08a80     00 00 00 00 
08a84     00 00 00 00 | 	byte	$00[8]
08a88     03 00 00 00 
08a8c     00 00 00 00 
08a90     00 00 00 00 
08a94     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a98     00 00 00 00 
08a9c     00 00 00 00 
08aa0     00 00 00 00 
08aa4     00 00 00 00 
08aa8     00 00 00 00 
08aac     00 00 00 00 | 	byte	$00[24]
08ab0     01 80 00 00 
08ab4     00 00 00 00 
08ab8     00 00 00 00 
08abc     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ac0     00 00 00 00 | 	byte	$00, $00, $00, $00
08ac4     00 00 90 00 | 	long	(9 {__system___tx})<<20
08ac8     00 00 A0 00 | 	long	(10 {__system___rx})<<20
08acc     00 00 00 00 | 	byte	$00, $00, $00, $00
08ad0     00 00 B0 00 | 	long	(11 {__system___rxtxioctl_0143})<<20
08ad4     00 00 C0 00 | 	long	(12 {__system____dummy_flush_0144})<<20
08ad8     00 00 00 00 
08adc     00 00 00 00 | 	byte	$00[8]
08ae0     01 00 00 00 
08ae4     02 80 00 00 
08ae8     00 00 00 00 
08aec     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08af0     00 00 00 00 
08af4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
08af8     00 00 90 00 | 	long	(9 {__system___tx})<<20
08afc     00 00 A0 00 | 	long	(10 {__system___rx})<<20
08b00     00 00 00 00 | 	byte	$00, $00, $00, $00
08b04     00 00 B0 00 | 	long	(11 {__system___rxtxioctl_0143})<<20
08b08     00 00 C0 00 | 	long	(12 {__system____dummy_flush_0144})<<20
08b0c     00 00 00 00 
08b10     00 00 00 00 | 	byte	$00[8]
08b14     01 00 00 00 
08b18     02 80 00 00 
08b1c     00 00 00 00 
08b20     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b24     00 00 00 00 
08b28     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
08b2c     00 00 90 00 | 	long	(9 {__system___tx})<<20
08b30     00 00 A0 00 | 	long	(10 {__system___rx})<<20
08b34     00 00 00 00 | 	byte	$00, $00, $00, $00
08b38     00 00 B0 00 | 	long	(11 {__system___rxtxioctl_0143})<<20
08b3c     00 00 C0 00 | 	long	(12 {__system____dummy_flush_0144})<<20
08b40     00 00 00 00 
      ...             
08ca8     00 00 00 00 
08cac     00 00 00 00 | 	byte	$00[368]
08cb0                 | __methodtable__
08cb0     70 17 00 00 | 	long	@_hg010b_spin2_putchar
08cb4     0C 3A 00 00 | 	long	@__system___struct___bas_wrap_sender_tx_
08cb8     50 3A 00 00 | 	long	@__system___struct___bas_wrap_sender_rx_
08cbc     98 3A 00 00 | 	long	@__system___struct___bas_wrap_sender_close_
08cc0     3C 39 00 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
08cc4     AC 39 00 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
08cc8     AC 33 00 00 | 	long	@__system____default_putc
08ccc     28 33 00 00 | 	long	@__system____default_getc
08cd0     58 34 00 00 | 	long	@__system____default_flush
08cd4     18 24 00 00 | 	long	@__system___tx
08cd8     58 24 00 00 | 	long	@__system___rx
08cdc     0C 38 00 00 | 	long	@__system___rxtxioctl_0143
08ce0     64 38 00 00 | 	long	@__system____dummy_flush_0144
08ce4                 | __heap_base
08ce4     00 00 00 00 
      ...             
0a454     00 00 00 00 
0a458     00 00 00 00 | 	long	0[1502]
0a45c                 | objmem
0a45c     00 00 00 00 
      ...             
0e0ac     00 00 00 00 
0e0b0     00 00 00 00 | 	long	0[3862]
0e0b4                 | stackspace
0e0b4     00 00 00 00 | 	long	0[1]
0e0b8 13a             | 	org	COG_BSS_START
0e0b8 13a             | _var01
0e0b8 13a             | 	res	1
0e0b8 13b             | _var02
0e0b8 13b             | 	res	1
0e0b8 13c             | _var03
0e0b8 13c             | 	res	1
0e0b8 13d             | _var04
0e0b8 13d             | 	res	1
0e0b8 13e             | _var05
0e0b8 13e             | 	res	1
0e0b8 13f             | _var06
0e0b8 13f             | 	res	1
0e0b8 140             | _var07
0e0b8 140             | 	res	1
0e0b8 141             | _var08
0e0b8 141             | 	res	1
0e0b8 142             | arg01
0e0b8 142             | 	res	1
0e0b8 143             | arg02
0e0b8 143             | 	res	1
0e0b8 144             | arg03
0e0b8 144             | 	res	1
0e0b8 145             | arg04
0e0b8 145             | 	res	1
0e0b8 146             | arg05
0e0b8 146             | 	res	1
0e0b8 147             | arg06
0e0b8 147             | 	res	1
0e0b8 148             | local01
0e0b8 148             | 	res	1
0e0b8 149             | local02
0e0b8 149             | 	res	1
0e0b8 14a             | local03
0e0b8 14a             | 	res	1
0e0b8 14b             | local04
0e0b8 14b             | 	res	1
0e0b8 14c             | local05
0e0b8 14c             | 	res	1
0e0b8 14d             | local06
0e0b8 14d             | 	res	1
0e0b8 14e             | local07
0e0b8 14e             | 	res	1
0e0b8 14f             | local08
0e0b8 14f             | 	res	1
0e0b8 150             | local09
0e0b8 150             | 	res	1
0e0b8 151             | local10
0e0b8 151             | 	res	1
0e0b8 152             | local11
0e0b8 152             | 	res	1
0e0b8 153             | local12
0e0b8 153             | 	res	1
0e0b8 154             | local13
0e0b8 154             | 	res	1
0e0b8 155             | muldiva_
0e0b8 155             | 	res	1
0e0b8 156             | muldivb_
0e0b8 156             | 	res	1
0e0b8 157             | 	fit	480
0e0b8 157             | 
