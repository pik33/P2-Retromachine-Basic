00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/triangle.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	pin = 0
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 72 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 03 90 5D |  if_ne	jmp	#spininit
0040c 002 38 F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 02 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 02 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
006fc 0be 00 00 00 00 
00700 0bf 00 00 00 00 | 	orgf	192
00704 0c0             | skip_clock_set_
00704 0c0 F4 08 A0 FD | 	call	#_program
00708 0c1             | cogexit
00708 0c1 38 01 80 FF 
0070c 0c2 1F 00 66 FD | 	waitx	##160000
00710 0c3 01 88 62 FD | 	cogid	arg01
00714 0c4 03 88 62 FD | 	cogstop	arg01
00718 0c5             | spininit
00718 0c5 61 67 06 FB | 	rdlong	objptr, ptra++
0071c 0c6 61 73 06 FB | 	rdlong	result1, ptra++
00720 0c7 28 06 64 FD | 	setq	#3
00724 0c8 00 89 06 FB | 	rdlong	arg01, ptra
00728 0c9 04 F0 87 F1 | 	sub	ptra, #4
0072c 0ca 2D 72 62 FD | 	call	result1
00730 0cb D4 FF 9F FD | 	jmp	#cogexit
00734 0cc             | FCACHE_LOAD_
00734 0cc F9 AD 01 F6 |     mov	fcache_tmpb_,ptrb
00738 0cd 2B F2 63 FD |     pop	ptrb
0073c 0ce D5 EC 8B F9 |     altd	pa,ret_instr_
00740 0cf D5 00 00 F6 |     mov	 0-0, ret_instr_
00744 0d0 28 EC 63 FD |     setq	pa
00748 0d1 E1 01 04 FB |     rdlong	$0, ptrb++
0074c 0d2 2A F2 63 FD |     push	ptrb
00750 0d3 D6 F2 03 F6 |     mov ptrb,fcache_tmpb_
00754 0d4 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00758 0d5             | ret_instr_
00758 0d5 00 FE 07 02 |     _ret_ cmp inb,#0
0075c 0d6             | fcache_tmpb_
0075c 0d6 00 00 00 00 |     long 0
00760 0d7             | fcache_load_ptr_
00760 0d7 CC 00 00 00 |     long FCACHE_LOAD_
00764 0d8             | builtin_bytefill_
00764 0d8 01 8C 56 F0 |         shr	arg03, #1 wc
00768 0d9 44 8B 42 CC |  if_c   wrbyte	arg02, arg01
0076c 0da 01 88 06 C1 |  if_c   add	arg01, #1
00770 0db 00 8A FE F9 |         movbyts	arg02, #0
00774 0dc             | builtin_wordfill_
00774 0dc 01 8C 56 F0 |         shr	arg03, #1 wc
00778 0dd 44 8B 52 CC |  if_c   wrword	arg02, arg01
0077c 0de 02 88 06 C1 |  if_c   add	arg01, #2
00780 0df 45 8B 2A F9 |         setword	arg02, arg02, #1
00784 0e0             | builtin_longfill_
00784 0e0 44 01 88 FC |         wrfast	#0,arg01
00788 0e1 00 8C 0E F2 |         cmp	arg03, #0 wz
0078c 0e2 46 03 D8 5C |  if_nz  rep	#1, arg03
00790 0e3 17 8A 62 5D |  if_nz  wflong	arg02
00794 0e4 2D 00 64 FD |         ret
00798 0e5             | COUNT_
00798 0e5 00 00 00 00 |     long 0
0079c 0e6             | RETADDR_
0079c 0e6 00 00 00 00 |     long 0
007a0 0e7             | fp
007a0 0e7 00 00 00 00 |     long 0
007a4 0e8             | pushregs_
007a4 0e8 2B EC 63 FD |     pop  pa
007a8 0e9 2B CC 61 FD |     pop  RETADDR_
007ac 0ea 03 CA 95 FB |     tjz  COUNT_, #pushregs_done_
007b0 0eb FF CB 8D F9 |     altd  COUNT_, #511
007b4 0ec 28 00 64 FD |     setq #0-0
007b8 0ed 61 93 66 FC |     wrlong local01, ptra++
007bc 0ee             | pushregs_done_
007bc 0ee 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
007c0 0ef 61 CB 65 FC |     wrlong COUNT_, ptra++
007c4 0f0 F8 CF 01 F6 |     mov    fp, ptra
007c8 0f1 2C EC 63 FD |     jmp  pa
007cc 0f2             |  popregs_
007cc 0f2 2B EC 63 FD |     pop    pa
007d0 0f3 28 04 64 FD |     setq   #2
007d4 0f4 5F CB 05 FB |     rdlong COUNT_, --ptra
007d8 0f5 02 CA 75 FB |     djf    COUNT_, #popregs__ret
007dc 0f6 28 CA 61 FD |     setq   COUNT_
007e0 0f7 5F 93 06 FB |     rdlong local01, --ptra
007e4 0f8             | popregs__ret
007e4 0f8 2A CC 61 FD |     push   RETADDR_
007e8 0f9 2C EC 63 FD |     jmp    pa
007ec 0fa             | 
007ec 0fa             | divide_
007ec 0fa 57 AF 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007f0 0fb 6C 64 62 FD |        wrc     itmp2_                         'store sign of y
007f4 0fc 56 AD 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007f8 0fd 57 AD 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
007fc 0fe 01 64 66 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00800 0ff 18 AE 62 FD |        getqx   muldivb_                       'get quotient
00804 100 19 AC 62 FD |        getqy   muldiva_                       'get remainder
00808 101 56 AD 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0080c 102 00 64 16 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00810 103 57 AF 82 06 |  _ret_ negc    muldivb_,muldivb_     
00814 104             | __pc long 0
00814 104 00 00 00 00 
00818 105             | __setjmp
00818 105 2B 08 62 FD |     pop __pc
0081c 106 00 72 06 F6 |     mov result1, #0
00820 107 00 74 06 F6 |     mov result2, #0
00824 108 44 61 02 F6 |     mov abortchain, arg01
00828 109 44 CF 61 FC |     wrlong fp, arg01
0082c 10a 04 88 06 F1 |     add arg01, #4
00830 10b 44 F1 63 FC |     wrlong ptra, arg01
00834 10c 04 88 06 F1 |     add arg01, #4
00838 10d 44 67 62 FC |     wrlong objptr, arg01
0083c 10e 04 88 06 F1 |     add arg01, #4
00840 10f 44 09 62 FC |     wrlong __pc, arg01
00844 110 2C 08 62 FD |     jmp __pc
00848 111             | __unwind_pc long 0
00848 111 00 00 00 00 
0084c 112             | __unwind_stack
0084c 112 2B 22 62 FD |    pop  __unwind_pc
00850 113             | __unwind_loop
00850 113 45 89 0A F2 |    cmp  arg01, arg02 wz
00854 114 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00858 115 44 F1 03 F6 |    mov   ptra, arg01
0085c 116 6C FF BF FD |    call  #popregs_
00860 117 E7 88 02 F6 |    mov   arg01, fp
00864 118 E8 FF 9F FD |    jmp   #__unwind_loop
00868 119             | __unwind_stack_ret
00868 119 2C 22 62 FD |    jmp  __unwind_pc
0086c 11a             | __longjmp
0086c 11a 2B 08 62 FD |     pop __pc
00870 11b 00 88 0E F2 |     cmp    arg01, #0 wz
00874 11c 30 00 90 AD |  if_z jmp #nocatch
00878 11d 45 73 02 F6 |     mov result1, arg02
0087c 11e 01 74 06 F6 |     mov result2, #1
00880 11f 44 8B 02 FB |     rdlong arg02, arg01
00884 120 04 88 06 F1 |     add arg01, #4
00888 121 44 F1 03 FB |     rdlong ptra, arg01
0088c 122 04 88 06 F1 |     add arg01, #4
00890 123 44 67 02 FB |     rdlong objptr, arg01
00894 124 04 88 06 F1 |     add arg01, #4
00898 125 44 09 02 FB |     rdlong __pc, arg01
0089c 126 E7 88 02 F6 |     mov arg01, fp
008a0 127 A8 FF BF FD |     call #__unwind_stack
008a4 128             | __longjmp_ret
008a4 128 2C 08 62 FD |     jmp  __pc
008a8 129             | nocatch
008a8 129 00 8C 0E F2 |     cmp arg03, #0 wz
008ac 12a 58 FE 9F AD |  if_z jmp #cogexit
008b0 12b F0 FF 9F FD |     jmp #__longjmp_ret
008b4 12c             | 
008b4 12c             | __heap_ptr
008b4 12c E8 8C 00 00 | 	long	@__heap_base
008b8 12d             | __methods__
008b8 12d B4 8C 00 00 | 	long	@__methodtable__
008bc 12e             | __recvreg
008bc 12e 00 00 00 00 | 	long	0
008c0 12f             | __sendreg
008c0 12f 00 00 00 00 | 	long	0
008c4 130             | abortchain
008c4 130 00 00 00 00 | 	long	0
008c8 131             | itmp1_
008c8 131 00 00 00 00 | 	long	0
008cc 132             | itmp2_
008cc 132 00 00 00 00 | 	long	0
008d0 133             | objptr
008d0 133 60 A4 00 00 | 	long	@objmem
008d4 134             | ptr___system__dat__
008d4 134 84 8A 00 00 | 	long	@__system__dat_
008d8 135             | ptr__hg010b_spin2_dat__
008d8 135 44 3B 00 00 | 	long	@_hg010b_spin2_dat_
008dc 136             | ptr__psram16drv_spin2_dat__
008dc 136 F4 7A 00 00 | 	long	@_psram16drv_spin2_dat_
008e0 137             | ptr__psram_spin2_dat__
008e0 137 AC 78 00 00 | 	long	@_psram_spin2_dat_
008e4 138             | ptr_stackspace_
008e4 138 B8 60 01 00 | 	long	@stackspace
008e8 139             | result1
008e8 139 00 00 00 00 | 	long	0
008ec 13a             | result2
008ec 13a 01 00 00 00 | 	long	1
008f0 13b             | result3
008f0 13b 02 00 00 00 | 	long	2
008f4 13c             | COG_BSS_START
008f4 13c             | 	fit	480
008f4                 | 	orgh
008f4                 | hubentry
008f4                 | 
008f4                 | _program
008f4     01 CA 05 F6 | 	mov	COUNT_, #1
008f8     E8 00 A0 FD | 	call	#pushregs_
008fc     00 88 06 F6 | 	mov	arg01, #0
00900     0A 8A C6 F9 | 	decod	arg02, #10
00904     0B 8C 06 F6 | 	mov	arg03, #11
00908     07 8E 06 F6 | 	mov	arg04, #7
0090c     0B 00 00 FF 
00910     CC 66 06 F1 | 	add	objptr, ##5836
00914     90 0F B0 FD | 	call	#_psram_spin2_startx
00918     40 00 00 FF 
0091c     00 66 06 F1 | 	add	objptr, ##32768
00920     33 73 42 FC | 	wrbyte	result1, objptr
00924     00 88 06 F6 | 	mov	arg01, #0
00928                 | '     return $7FF00 + cog*12
00928     04 66 06 F1 | 	add	objptr, #4
0092c     FF 03 80 FF 
00930     33 01 6A FC | 	wrlong	##524032, objptr
00934     FF 03 00 FF 
00938     00 8B 06 F6 | 	mov	arg02, ##524032
0093c     4B 00 00 FF 
00940     D0 66 86 F1 | 	sub	objptr, ##38608
00944     E8 00 B0 FD | 	call	#_hg010b_spin2_start
00948     4B 00 00 FF 
0094c     CD 66 06 F1 | 	add	objptr, ##38605
00950     33 73 42 FC | 	wrbyte	result1, objptr
00954                 | ' 
00954                 | ' pscog=psram.startx(0, 1024, 11, 7)
00954                 | ' mbox=psram.getMailbox(0)
00954                 | ' 
00954                 | ' videocog=v.start(pin,mbox)
00954                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
00954     00 92 06 F6 | 	mov	local01, #0
00958     40 00 00 FF 
0095c     01 66 86 F1 | 	sub	objptr, ##32769
00960                 | LR__0001
00960     49 89 02 F6 | 	mov	arg01, local01
00964     00 28 00 FF 
00968     00 8A 06 F6 | 	mov	arg02, ##5242880
0096c     98 13 B0 FD | 	call	#_psram_spin2_setQos
00970     01 92 06 F1 | 	add	local01, #1
00974     08 92 56 F2 | 	cmps	local01, #8 wc
00978     E4 FF 9F CD |  if_b	jmp	#LR__0001
0097c     40 00 00 FF 
00980     01 66 06 F1 | 	add	objptr, ##32769
00984     33 89 C2 FA | 	rdbyte	arg01, objptr
00988     7A 00 02 FF 
0098c     00 8A 06 F6 | 	mov	arg02, ##67171328
00990     40 00 00 FF 
00994     01 66 86 F1 | 	sub	objptr, ##32769
00998     6C 13 B0 FD | 	call	#_psram_spin2_setQos
0099c     0B 00 00 FF 
009a0     CC 66 86 F1 | 	sub	objptr, ##5836
009a4                 | ' psram.setQoS(videocog, $0400f400) 
009a4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
009a4     33 8B 02 F6 | 	mov	arg02, objptr
009a8     15 8A 26 F4 | 	bith	arg02, #21
009ac     00 8C 06 F6 | 	mov	arg03, #0
009b0     00 8E 06 F6 | 	mov	arg04, #0
009b4     00 88 06 F6 | 	mov	arg01, #0
009b8     58 1E B0 FD | 	call	#__system___basic_open
009bc     64 88 06 F6 | 	mov	arg01, #100
009c0     78 1D B0 FD | 	call	#__system___waitms
009c4     9A 88 06 F6 | 	mov	arg01, #154
009c8     93 8A 06 F6 | 	mov	arg02, #147
009cc     A0 09 B0 FD | 	call	#_hg010b_spin2_cls
009d0                 | ' waitms(100)
009d0                 | ' v.cls(154,147)
009d0                 | ' print "Test ready"
009d0     00 88 06 F6 | 	mov	arg01, #0
009d4     B4 2D B0 FD | 	call	#__system___getiolock_0094
009d8     39 89 02 F6 | 	mov	arg01, result1
009dc     54 1C B0 FD | 	call	#__system___lockmem
009e0     1D 00 00 FF 
009e4     36 8B 06 F6 | 	mov	arg02, ##@LR__0523
009e8     00 88 06 F6 | 	mov	arg01, #0
009ec     00 8C 06 F6 | 	mov	arg03, #0
009f0     D0 1F B0 FD | 	call	#__system___basic_print_string
009f4     00 88 06 F6 | 	mov	arg01, #0
009f8     0A 8A 06 F6 | 	mov	arg02, #10
009fc     00 8C 06 F6 | 	mov	arg03, #0
00a00     68 1F B0 FD | 	call	#__system___basic_print_char
00a04     00 88 06 F6 | 	mov	arg01, #0
00a08     80 2D B0 FD | 	call	#__system___getiolock_0094
00a0c     39 01 68 FC | 	wrlong	#0, result1
00a10     0B 00 00 FF 
00a14     CC 66 06 F1 | 	add	objptr, ##5836
00a18     F0 13 B0 FD | 	call	#_hello_b_program
00a1c     0B 00 00 FF 
00a20     CC 66 86 F1 | 	sub	objptr, ##5836
00a24     E7 F0 03 F6 | 	mov	ptra, fp
00a28     F2 00 A0 FD | 	call	#popregs_
00a2c                 | _program_ret
00a2c     2D 00 64 FD | 	ret
00a30                 | 
00a30                 | ' '' this is not a main program.
00a30                 | ' 
00a30                 | ' '****************************************************************************************************************
00a30                 | ' '                                                                                                             	*
00a30                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
00a30                 | ' '                                                                                                            	*
00a30                 | ' ' base - HDMI base pin												*
00a30                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
00a30                 | ' '														*
00a30                 | ' '														*
00a30                 | ' '****************************************************************************************************************
00a30                 | ' 
00a30                 | ' pub start(base,mb):result |i
00a30                 | _hg010b_spin2_start
00a30                 | ' 
00a30                 | ' '--------------------------- initialize pointers and variables
00a30                 | ' 
00a30                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
00a30     34 66 06 F1 | 	add	objptr, #52
00a34     33 73 02 F6 | 	mov	result1, objptr
00a38     28 66 86 F1 | 	sub	objptr, #40
00a3c     33 73 62 FC | 	wrlong	result1, objptr
00a40                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
00a40                 | ' hdmibase:=base							' HDMI base pin, 8*n
00a40     18 66 06 F1 | 	add	objptr, #24
00a44     33 89 62 FC | 	wrlong	arg01, objptr
00a48                 | ' mailbox_ptr:=mb		
00a48     04 66 06 F1 | 	add	objptr, #4
00a4c     33 8B 62 FC | 	wrlong	arg02, objptr
00a50                 | ' mailbox0:=mb				' PSRAM mailbox pointer
00a50     C1 67 06 F1 | 	add	objptr, #449
00a54     33 8B 62 FC | 	wrlong	arg02, objptr
00a58                 | ' sprite_ptr:=@spr1ptr
00a58     D8 66 86 F1 | 	sub	objptr, #216
00a5c     33 73 02 F6 | 	mov	result1, objptr
00a60     E5 66 86 F1 | 	sub	objptr, #229
00a64     33 73 62 FC | 	wrlong	result1, objptr
00a68                 | ' 
00a68                 | ' 		'
00a68                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
00a68     E5 66 06 F1 | 	add	objptr, #229
00a6c     33 73 02 FB | 	rdlong	result1, objptr
00a70     D0 72 06 F1 | 	add	result1, #208
00a74     39 11 58 FC | 	wrword	#8, result1
00a78                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
00a78     33 8D 02 FB | 	rdlong	arg03, objptr
00a7c     D2 8C 06 F1 | 	add	arg03, #210
00a80     46 21 58 FC | 	wrword	#16, arg03
00a84                 | ' leading_spaces:=0				'
00a84     A5 67 06 F1 | 	add	objptr, #421
00a88     33 01 68 FC | 	wrlong	#0, objptr
00a8c                 | ' 
00a8c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
00a8c     99 66 86 F1 | 	sub	objptr, #153
00a90     00 00 A0 FF 
00a94     33 0F 68 FC | 	wrlong	##1073741831, objptr
00a98                 | ' emptydl[1]:=0
00a98     04 66 06 F1 | 	add	objptr, #4
00a9c     33 01 68 FC | 	wrlong	#0, objptr
00aa0                 | ' 
00aa0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
00aa0                 | ' 
00aa0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
00aa0     28 67 86 F1 | 	sub	objptr, #296
00aa4     33 03 68 FC | 	wrlong	#1, objptr
00aa8                 | ' if s_debug<>0
00aa8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
00aa8     20 00 80 FF 
00aac     33 01 68 FC | 	wrlong	##16384, objptr
00ab0     F9 66 86 F1 | 	sub	objptr, #249
00ab4                 | ' setmode()							' set the mode, see below
00ab4     30 02 B0 FD | 	call	#_hg010b_spin2_setmode
00ab8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
00ab8     49 66 06 F1 | 	add	objptr, #73
00abc     33 73 02 F6 | 	mov	result1, objptr
00ac0     35 66 86 F1 | 	sub	objptr, #53
00ac4     33 73 62 FC | 	wrlong	result1, objptr
00ac8                 | ' cursor_ptr:=@cursor_x						
00ac8     28 66 06 F1 | 	add	objptr, #40
00acc     33 8D 02 F6 | 	mov	arg03, objptr
00ad0     2C 66 86 F1 | 	sub	objptr, #44
00ad4     33 8D 62 FC | 	wrlong	arg03, objptr
00ad8                 | ' fontnum:=0  							' start with a PC type font 
00ad8     55 66 06 F1 | 	add	objptr, #85
00adc     33 01 68 FC | 	wrlong	#0, objptr
00ae0                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
00ae0     1C 66 06 F1 | 	add	objptr, #28
00ae4     33 89 02 F6 | 	mov	arg01, objptr
00ae8     81 66 86 F1 | 	sub	objptr, #129
00aec     35 8B 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
00af0     1C 00 00 FF 
00af4     80 8A 06 F1 | 	add	arg02, ##14464
00af8     10 8C 06 F6 | 	mov	arg03, #16
00afc     78 1A B0 FD | 	call	#__system____builtin_memmove
00b00                 | ' leading_spaces:=0
00b00     01 00 00 FF 
00b04     B6 66 06 F1 | 	add	objptr, ##694
00b08     33 01 68 FC | 	wrlong	#0, objptr
00b0c     01 00 00 FF 
00b10     B6 66 86 F1 | 	sub	objptr, ##694
00b14                 | ' '---------------------------- initialize a cursor (MSDOS type)
00b14                 | ' 
00b14                 | ' initcursor(154)
00b14     9A 88 06 F6 | 	mov	arg01, #154
00b18     48 00 B0 FD | 	call	#_hg010b_spin2_initcursor
00b1c                 | ' 
00b1c                 | ' '---------------------------- start the cog
00b1c                 | ' 
00b1c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
00b1c     35 8B 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
00b20     1C 00 00 FF 
00b24     90 8A 06 F1 | 	add	arg02, ##14480
00b28     33 8D 02 F6 | 	mov	arg03, objptr
00b2c     14 8C 06 F1 | 	add	arg03, #20
00b30     10 72 06 F6 | 	mov	result1, #16
00b34     28 8C 62 FD | 	setq	arg03
00b38     45 73 F2 FC | 	coginit	result1, arg02 wc
00b3c     01 72 66 C6 |  if_b	neg	result1, #1
00b40     30 66 06 F1 | 	add	objptr, #48
00b44     33 73 62 FC | 	wrlong	result1, objptr
00b48     30 66 86 F1 | 	sub	objptr, #48
00b4c                 | ' waitms(40)							' wait for stabilize
00b4c     28 88 06 F6 | 	mov	arg01, #40
00b50     E8 1B B0 FD | 	call	#__system___waitms
00b54                 | ' return cog							' return the driver's cog #
00b54     30 66 06 F1 | 	add	objptr, #48
00b58     33 73 02 FB | 	rdlong	result1, objptr
00b5c     30 66 86 F1 | 	sub	objptr, #48
00b60                 | _hg010b_spin2_start_ret
00b60     2D 00 64 FD | 	ret
00b64                 | 
00b64                 | ' 
00b64                 | ' '---------------------------- initialize a cursor (MSDOS type)
00b64                 | ' pub initcursor(color) |i
00b64                 | _hg010b_spin2_initcursor
00b64     03 CA 05 F6 | 	mov	COUNT_, #3
00b68     E8 00 A0 FD | 	call	#pushregs_
00b6c     44 93 02 F6 | 	mov	local01, arg01
00b70                 | ' 
00b70                 | ' cursor_x:=0							' place the cursor at 0:0
00b70     3C 66 06 F1 | 	add	objptr, #60
00b74     33 01 58 FC | 	wrword	#0, objptr
00b78                 | ' cursor_y:=0
00b78     02 66 06 F1 | 	add	objptr, #2
00b7c     33 01 48 FC | 	wrbyte	#0, objptr
00b80                 | ' repeat i from 0 to 111
00b80     00 94 06 F6 | 	mov	local02, #0
00b84     F8 67 06 F1 | 	add	objptr, #504
00b88     D7 0C 48 FB | 	callpa	#(@LR__0011-@LR__0010)>>2,fcache_load_ptr_
00b8c                 | LR__0010
00b8c                 | '   cursor[i]:=0
00b8c     4A 97 02 F6 | 	mov	local03, local02
00b90     33 97 02 F1 | 	add	local03, objptr
00b94     4B 01 48 FC | 	wrbyte	#0, local03
00b98     01 94 06 F1 | 	add	local02, #1
00b9c     70 94 56 F2 | 	cmps	local02, #112 wc
00ba0     E8 FF 9F CD |  if_b	jmp	#LR__0010
00ba4                 | LR__0011
00ba4                 | ' repeat i from 112 to 127
00ba4     70 94 06 F6 | 	mov	local02, #112
00ba8     D7 0C 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
00bac                 | LR__0012
00bac                 | '   cursor[i]:=color  
00bac     4A 97 02 F6 | 	mov	local03, local02
00bb0     33 97 02 F1 | 	add	local03, objptr
00bb4     4B 93 42 FC | 	wrbyte	local01, local03
00bb8     01 94 06 F1 | 	add	local02, #1
00bbc     80 94 16 F2 | 	cmp	local02, #128 wc
00bc0     E8 FF 9F CD |  if_b	jmp	#LR__0012
00bc4                 | LR__0013
00bc4     01 00 00 FF 
00bc8     36 66 86 F1 | 	sub	objptr, ##566
00bcc                 | ' 'repeat i from 0 to 127
00bcc                 | ' '  if ((i/8)//2)
00bcc                 | ' '    cursor[i]:=15
00bcc                 | ' '  else
00bcc                 | ' '    cursor[i]:=0
00bcc                 | ' '  if i>=120    
00bcc                 | ' '    cursor[i]:=40
00bcc                 | ' setspriteptr(17,@cursor)
00bcc     33 8B 02 F6 | 	mov	arg02, objptr
00bd0     01 00 00 FF 
00bd4     36 8A 06 F1 | 	add	arg02, ##566
00bd8     11 88 06 F6 | 	mov	arg01, #17
00bdc     10 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
00be0                 | ' setspritesize(17,8,16)
00be0     11 88 06 F6 | 	mov	arg01, #17
00be4     08 8A 06 F6 | 	mov	arg02, #8
00be8     10 8C 06 F6 | 	mov	arg03, #16
00bec     8C 04 B0 FD | 	call	#_hg010b_spin2_setspritesize
00bf0                 | ' setspritepos(17,0,0)
00bf0     11 88 06 F6 | 	mov	arg01, #17
00bf4     00 8A 06 F6 | 	mov	arg02, #0
00bf8     00 8C 06 F6 | 	mov	arg03, #0
00bfc     14 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
00c00                 | ' cursorshape:=14
00c00     0B 00 00 FF 
00c04     C6 66 06 F1 | 	add	objptr, ##5830
00c08     33 1D 68 FC | 	wrlong	#14, objptr
00c0c                 | ' cursorcolor:=color
00c0c     04 66 86 F1 | 	sub	objptr, #4
00c10     33 93 62 FC | 	wrlong	local01, objptr
00c14     0B 00 00 FF 
00c18     C2 66 86 F1 | 	sub	objptr, ##5826
00c1c     E7 F0 03 F6 | 	mov	ptra, fp
00c20     F2 00 A0 FD | 	call	#popregs_
00c24                 | _hg010b_spin2_initcursor_ret
00c24     2D 00 64 FD | 	ret
00c28                 | 
00c28                 | ' 
00c28                 | ' pub setcursorcolor(color) | i
00c28                 | _hg010b_spin2_setcursorcolor
00c28                 | ' 
00c28                 | ' cursorcolor:=color
00c28     0B 00 00 FF 
00c2c     C2 66 06 F1 | 	add	objptr, ##5826
00c30     33 89 62 FC | 	wrlong	arg01, objptr
00c34                 | ' repeat i from 0 to (8*cursorshape)-1
00c34     00 88 06 F6 | 	mov	arg01, #0
00c38     04 66 06 F1 | 	add	objptr, #4
00c3c     33 79 02 FB | 	rdlong	_var01, objptr
00c40     03 78 66 F0 | 	shl	_var01, #3
00c44     01 78 86 F1 | 	sub	_var01, #1
00c48     00 78 56 F2 | 	cmps	_var01, #0 wc
00c4c     01 7A 86 F6 | 	negc	_var02, #1
00c50     3D 7D 02 F6 | 	mov	_var03, _var02
00c54     3D 79 02 F1 | 	add	_var01, _var02
00c58     0A 00 00 FF 
00c5c     90 66 86 F1 | 	sub	objptr, ##5264
00c60     D7 0C 48 FB | 	callpa	#(@LR__0021-@LR__0020)>>2,fcache_load_ptr_
00c64                 | LR__0020
00c64                 | '   cursor[i]:=0
00c64     44 7B 02 F6 | 	mov	_var02, arg01
00c68     33 7B 02 F1 | 	add	_var02, objptr
00c6c     3D 01 48 FC | 	wrbyte	#0, _var02
00c70     3E 89 02 F1 | 	add	arg01, _var03
00c74     3C 89 0A F2 | 	cmp	arg01, _var01 wz
00c78     E8 FF 9F 5D |  if_ne	jmp	#LR__0020
00c7c                 | LR__0021
00c7c                 | ' repeat i from 8*cursorshape to 127
00c7c     0A 00 00 FF 
00c80     90 66 06 F1 | 	add	objptr, ##5264
00c84     33 7D 02 FB | 	rdlong	_var03, objptr
00c88     3E 89 02 F6 | 	mov	arg01, _var03
00c8c     03 88 66 F0 | 	shl	arg01, #3
00c90     0B 00 00 FF 
00c94     C6 66 86 F1 | 	sub	objptr, ##5830
00c98     03 7C 66 F0 | 	shl	_var03, #3
00c9c     80 7C 56 F2 | 	cmps	_var03, #128 wc
00ca0     01 7A A6 F6 | 	negnc	_var02, #1
00ca4     7F 78 06 F6 | 	mov	_var01, #127
00ca8     3D 79 02 F1 | 	add	_var01, _var02
00cac     D7 1A 48 FB | 	callpa	#(@LR__0023-@LR__0022)>>2,fcache_load_ptr_
00cb0                 | LR__0022
00cb0                 | '   cursor[i]:=cursorcolor
00cb0     44 7D 02 F6 | 	mov	_var03, arg01
00cb4     01 00 00 FF 
00cb8     36 66 06 F1 | 	add	objptr, ##566
00cbc     33 7D 02 F1 | 	add	_var03, objptr
00cc0     0A 00 00 FF 
00cc4     8C 66 06 F1 | 	add	objptr, ##5260
00cc8     33 7F 02 FB | 	rdlong	_var04, objptr
00ccc     0B 00 00 FF 
00cd0     C2 66 86 F1 | 	sub	objptr, ##5826
00cd4     3E 7F 42 FC | 	wrbyte	_var04, _var03
00cd8     3D 89 02 F1 | 	add	arg01, _var02
00cdc     3C 89 0A F2 | 	cmp	arg01, _var01 wz
00ce0     CC FF 9F 5D |  if_ne	jmp	#LR__0022
00ce4                 | LR__0023
00ce4                 | _hg010b_spin2_setcursorcolor_ret
00ce4     2D 00 64 FD | 	ret
00ce8                 | 
00ce8                 | '   
00ce8                 | '   
00ce8                 | '   
00ce8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
00ce8                 | _hg010b_spin2_setmode
00ce8     02 CA 05 F6 | 	mov	COUNT_, #2
00cec     E8 00 A0 FD | 	call	#pushregs_
00cf0                 | ' 
00cf0                 | ' 
00cf0                 | ' dl_ptr:=@emptydl[0]
00cf0     01 00 00 FF 
00cf4     1D 66 06 F1 | 	add	objptr, ##541
00cf8     33 91 02 F6 | 	mov	arg05, objptr
00cfc     FD 67 86 F1 | 	sub	objptr, #509
00d00     33 91 62 FC | 	wrlong	arg05, objptr
00d04                 | ' 
00d04                 | ' if cog>0 
00d04     10 66 06 F1 | 	add	objptr, #16
00d08     33 91 02 FB | 	rdlong	arg05, objptr
00d0c     30 66 86 F1 | 	sub	objptr, #48
00d10     01 90 56 F2 | 	cmps	arg05, #1 wc
00d14                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
00d14     01 88 06 36 |  if_ae	mov	arg01, #1
00d18     E4 05 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
00d1c                 | ' xres:=1024
00d1c     01 00 00 FF 
00d20     26 66 06 F1 | 	add	objptr, ##550
00d24     02 00 80 FF 
00d28     33 01 68 FC | 	wrlong	##1024, objptr
00d2c                 | ' yres:=600
00d2c     04 66 06 F1 | 	add	objptr, #4
00d30     01 00 80 FF 
00d34     33 B1 68 FC | 	wrlong	##600, objptr
00d38                 | ' ppl:=(timings[3])
00d38     1C 00 00 FF 
00d3c     4C 6A 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
00d40     35 91 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
00d44     51 67 86 F1 | 	sub	objptr, #337
00d48     33 91 62 FC | 	wrlong	arg05, objptr
00d4c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
00d4c     10 6A 06 F1 | 	add	ptr__hg010b_spin2_dat__, #16
00d50     35 93 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
00d54     01 92 66 F0 | 	shl	local01, #1
00d58     80 66 86 F1 | 	sub	objptr, #128
00d5c     33 93 62 FC | 	wrlong	local01, objptr
00d60                 | ' cpl1:=cpl '' todo remove
00d60     04 66 06 F1 | 	add	objptr, #4
00d64     33 93 62 FC | 	wrlong	local01, objptr
00d68                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
00d68     04 00 00 FF 
00d6c     1C 6A 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
00d70     41 66 86 F1 | 	sub	objptr, #65
00d74     33 6B 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
00d78                 | ' repeat i from 0 to 3
00d78     00 94 06 F6 | 	mov	local02, #0
00d7c     04 00 00 FF 
00d80     00 6A 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
00d84     08 66 06 F1 | 	add	objptr, #8
00d88     D7 20 48 FB | 	callpa	#(@LR__0031-@LR__0030)>>2,fcache_load_ptr_
00d8c                 | LR__0030
00d8c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
00d8c     4A 93 02 F6 | 	mov	local01, local02
00d90     02 92 66 F0 | 	shl	local01, #2
00d94     35 93 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
00d98     33 91 02 FB | 	rdlong	arg05, objptr
00d9c     11 90 66 F0 | 	shl	arg05, #17
00da0     49 93 02 FB | 	rdlong	local01, local01
00da4     48 93 02 F1 | 	add	local01, arg05
00da8     80 40 38 FF 
00dac     00 92 06 F1 | 	add	local01, ##1887502336
00db0     4A 91 02 F6 | 	mov	arg05, local02
00db4     02 90 66 F0 | 	shl	arg05, #2
00db8     35 91 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
00dbc     48 93 62 FC | 	wrlong	local01, arg05
00dc0     01 94 06 F1 | 	add	local02, #1
00dc4     04 94 56 F2 | 	cmps	local02, #4 wc
00dc8     C0 FF 9F CD |  if_b	jmp	#LR__0030
00dcc                 | LR__0031
00dcc     24 66 86 F1 | 	sub	objptr, #36
00dd0     1C 00 00 FF 
00dd4     40 6A 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
00dd8                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
00dd8                 | ' 'hubset(timings[10])
00dd8                 | ' waitms(1)                                                   	' wait for stabilization
00dd8     01 88 06 F6 | 	mov	arg01, #1
00ddc     5C 19 B0 FD | 	call	#__system___waitms
00de0     1C 00 00 FF 
00de4     6C 6A 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
00de8     35 95 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
00dec     61 66 06 F1 | 	add	objptr, #97
00df0     33 95 62 FC | 	wrlong	local02, objptr
00df4     4A 93 52 F6 | 	abs	local01, local02 wc
00df8     04 92 46 F0 | 	shr	local01, #4
00dfc     49 93 82 F6 | 	negc	local01, local01
00e00     9C 66 06 F1 | 	add	objptr, #156
00e04     33 93 62 FC | 	wrlong	local01, objptr
00e08     A4 66 86 F1 | 	sub	objptr, #164
00e0c     33 95 02 FB | 	rdlong	local02, objptr
00e10     08 66 06 F1 | 	add	objptr, #8
00e14     33 93 02 FB | 	rdlong	local01, objptr
00e18     49 95 02 FD | 	qmul	local02, local01
00e1c                 | ' lines:=timings[11]
00e1c                 | ' t_lines:=lines/16
00e1c                 | ' buflen:=cpl*lines						' framebuffer length in longs
00e1c     29 66 86 F1 | 	sub	objptr, #41
00e20     19 92 C6 F9 | 	decod	local01, #25
00e24     10 6A 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
00e28     18 94 62 FD | 	getqx	local02
00e2c     33 95 62 FC | 	wrlong	local02, objptr
00e30     38 66 86 F1 | 	sub	objptr, #56
00e34     02 94 66 F0 | 	shl	local02, #2
00e38     4A 93 82 F1 | 	sub	local01, local02
00e3c     33 93 62 FC | 	wrlong	local01, objptr
00e40     FD 66 06 F1 | 	add	objptr, #253
00e44     33 95 02 FB | 	rdlong	local02, objptr
00e48     35 91 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
00e4c     48 95 02 FD | 	qmul	local02, arg05
00e50                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
00e50                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
00e50     F9 66 86 F1 | 	sub	objptr, #249
00e54                 | ' mode_ptr:=@timings						' set pointers to timings
00e54     1C 6A 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
00e58                 | ' graphmode:=1024+512+192+48							' det global variable
00e58                 | ' makedl(graphmode)							' make a DL for the mode
00e58     03 00 00 FF 
00e5c     F0 88 06 F6 | 	mov	arg01, ##1776
00e60     18 94 62 FD | 	getqx	local02
00e64     4A 93 82 F1 | 	sub	local01, local02
00e68     33 93 62 FC | 	wrlong	local01, objptr
00e6c     14 66 06 F1 | 	add	objptr, #20
00e70     33 6B 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
00e74     79 66 06 F1 | 	add	objptr, #121
00e78     03 00 80 FF 
00e7c     33 E1 69 FC | 	wrlong	##1776, objptr
00e80     91 66 86 F1 | 	sub	objptr, #145
00e84     1C 00 00 FF 
00e88     40 6A 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
00e8c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
00e90                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
00e90     33 93 02 FB | 	rdlong	local01, objptr
00e94     DD 66 06 F1 | 	add	objptr, #221
00e98     33 93 62 FC | 	wrlong	local01, objptr
00e9c                 | ' s_font_ptr:=font_ptr
00e9c     D5 66 86 F1 | 	sub	objptr, #213
00ea0     33 93 02 FB | 	rdlong	local01, objptr
00ea4     D9 66 06 F1 | 	add	objptr, #217
00ea8     33 93 62 FC | 	wrlong	local01, objptr
00eac                 | ' s_lines:=lines
00eac     80 66 86 F1 | 	sub	objptr, #128
00eb0     33 93 02 FB | 	rdlong	local01, objptr
00eb4     84 66 06 F1 | 	add	objptr, #132
00eb8     33 93 62 FC | 	wrlong	local01, objptr
00ebc                 | ' s_buflen:=buflen
00ebc     AD 66 86 F1 | 	sub	objptr, #173
00ec0     33 93 02 FB | 	rdlong	local01, objptr
00ec4     B5 66 06 F1 | 	add	objptr, #181
00ec8     33 93 62 FC | 	wrlong	local01, objptr
00ecc                 | ' s_cpl:=cpl
00ecc     94 66 86 F1 | 	sub	objptr, #148
00ed0     33 93 02 FB | 	rdlong	local01, objptr
00ed4     90 66 06 F1 | 	add	objptr, #144
00ed8     33 93 62 FC | 	wrlong	local01, objptr
00edc                 | ' s_cpl1:=cpl
00edc     90 66 86 F1 | 	sub	objptr, #144
00ee0     33 93 02 FB | 	rdlong	local01, objptr
00ee4     98 66 06 F1 | 	add	objptr, #152
00ee8     33 93 62 FC | 	wrlong	local01, objptr
00eec                 | ' st_lines:=t_lines
00eec     0C 66 06 F1 | 	add	objptr, #12
00ef0     33 93 02 FB | 	rdlong	local01, objptr
00ef4     04 66 06 F1 | 	add	objptr, #4
00ef8     33 93 62 FC | 	wrlong	local01, objptr
00efc                 | ' ppl:=ppl/xzoom  
00efc     28 66 86 F1 | 	sub	objptr, #40
00f00     33 AD 02 FB | 	rdlong	muldiva_, objptr
00f04     2C 66 06 F1 | 	add	objptr, #44
00f08     33 AF 02 FB | 	rdlong	muldivb_, objptr
00f0c     05 67 86 F1 | 	sub	objptr, #261
00f10     FA 00 A0 FD | 	call	#divide_
00f14     D9 66 06 F1 | 	add	objptr, #217
00f18     33 AF 62 FC | 	wrlong	muldivb_, objptr
00f1c                 | ' s_ppl:=ppl
00f1c     1C 66 06 F1 | 	add	objptr, #28
00f20     33 AF 62 FC | 	wrlong	muldivb_, objptr
00f24     F5 66 86 F1 | 	sub	objptr, #245
00f28                 | ' waitms(20)							' wait 
00f28     14 88 06 F6 | 	mov	arg01, #20
00f2c     0C 18 B0 FD | 	call	#__system___waitms
00f30                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
00f30     04 66 06 F1 | 	add	objptr, #4
00f34     33 89 02 FB | 	rdlong	arg01, objptr
00f38     04 66 86 F1 | 	sub	objptr, #4
00f3c     33 8D 02 FB | 	rdlong	arg03, objptr
00f40     44 8D 82 F1 | 	sub	arg03, arg01
00f44     20 8A 06 F6 | 	mov	arg02, #32
00f48     00 8E 06 F6 | 	mov	arg04, #0
00f4c     01 90 06 F6 | 	mov	arg05, #1
00f50     0B 00 00 FF 
00f54     CC 66 06 F1 | 	add	objptr, ##5836
00f58     B8 0C B0 FD | 	call	#_psram_spin2_fill
00f5c     0B 00 00 FF 
00f60     CC 66 86 F1 | 	sub	objptr, ##5836
00f64     E7 F0 03 F6 | 	mov	ptra, fp
00f68     F2 00 A0 FD | 	call	#popregs_
00f6c                 | _hg010b_spin2_setmode_ret
00f6c     2D 00 64 FD | 	ret
00f70                 | 
00f70                 | ' 
00f70                 | ' '****************************************************************************************************************
00f70                 | ' '                                                                                                             	*
00f70                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
00f70                 | ' '                                                                                                             	*
00f70                 | ' '****************************************************************************************************************
00f70                 | ' 
00f70                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
00f70                 | _hg010b_spin2_makedl
00f70                 | ' 
00f70                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
00f70                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
00f70                 | ' repeat i from 0 to 11                                                           ' clear DL
00f70     00 78 06 F6 | 	mov	_var01, #0
00f74     ED 67 06 F1 | 	add	objptr, #493
00f78     D7 0E 48 FB | 	callpa	#(@LR__0041-@LR__0040)>>2,fcache_load_ptr_
00f7c                 | LR__0040
00f7c                 | '   displaylist[i]:=0 
00f7c     3C 7B 02 F6 | 	mov	_var02, _var01
00f80     02 7A 66 F0 | 	shl	_var02, #2
00f84     33 7B 02 F1 | 	add	_var02, objptr
00f88     3D 01 68 FC | 	wrlong	#0, _var02
00f8c     01 78 06 F1 | 	add	_var01, #1
00f90     0C 78 56 F2 | 	cmps	_var01, #12 wc
00f94     E4 FF 9F CD |  if_b	jmp	#LR__0040
00f98                 | LR__0041
00f98                 | '                         ' 
00f98                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
00f98     8C 67 86 F1 | 	sub	objptr, #396
00f9c     33 7B 02 FB | 	rdlong	_var02, objptr
00fa0     14 7A 66 F0 | 	shl	_var02, #20
00fa4     01 7A 06 F1 | 	add	_var02, #1
00fa8     04 66 86 F1 | 	sub	objptr, #4
00fac     33 79 02 FB | 	rdlong	_var01, objptr
00fb0     06 78 66 F0 | 	shl	_var01, #6
00fb4     3C 7B 02 F1 | 	add	_var02, _var01
00fb8     90 67 06 F1 | 	add	objptr, #400
00fbc     33 7B 62 FC | 	wrlong	_var02, objptr
00fc0     ED 67 86 F1 | 	sub	objptr, #493
00fc4                 | ' displaylist[1]:=buf_ptr<<4+%10  
00fc4     33 7B 02 FB | 	rdlong	_var02, objptr
00fc8     04 7A 66 F0 | 	shl	_var02, #4
00fcc     02 7A 06 F1 | 	add	_var02, #2
00fd0     F1 67 06 F1 | 	add	objptr, #497
00fd4     33 7B 62 FC | 	wrlong	_var02, objptr
00fd8                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
00fd8     04 66 86 F1 | 	sub	objptr, #4
00fdc     33 7B 02 F6 | 	mov	_var02, objptr
00fe0     CD 67 86 F1 | 	sub	objptr, #461
00fe4     33 7B 62 FC | 	wrlong	_var02, objptr
00fe8     20 66 86 F1 | 	sub	objptr, #32
00fec                 | _hg010b_spin2_makedl_ret
00fec     2D 00 64 FD | 	ret
00ff0                 | 
00ff0                 | ' 
00ff0                 | ' 
00ff0                 | ' '****************************************************************************************************************
00ff0                 | ' '                                                                        					*
00ff0                 | ' '  Graphic primitives                                                    					*
00ff0                 | ' '                                                                        					*
00ff0                 | ' '****************************************************************************************************************
00ff0                 | ' 
00ff0                 | ' pub setspriteptr(num,ptr)
00ff0                 | _hg010b_spin2_setspriteptr
00ff0                 | ' long[@spr1ptr+12*num]:=ptr
00ff0     33 79 02 F6 | 	mov	_var01, objptr
00ff4     11 79 06 F1 | 	add	_var01, #273
00ff8     44 7B 02 F6 | 	mov	_var02, arg01
00ffc     01 7A 66 F0 | 	shl	_var02, #1
01000     44 7B 02 F1 | 	add	_var02, arg01
01004     02 7A 66 F0 | 	shl	_var02, #2
01008     3D 79 02 F1 | 	add	_var01, _var02
0100c     3C 8B 62 FC | 	wrlong	arg02, _var01
01010                 | _hg010b_spin2_setspriteptr_ret
01010     2D 00 64 FD | 	ret
01014                 | 
01014                 | ' 
01014                 | ' pub setspritepos(num,x,y)
01014                 | _hg010b_spin2_setspritepos
01014                 | ' if y>601
01014     01 00 00 FF 
01018     5A 8C 56 F2 | 	cmps	arg03, ##602 wc
0101c                 | '   y:=601
0101c     01 00 00 3F 
01020     59 8C 06 36 |  if_ae	mov	arg03, ##601
01024                 | ' if x>1024
01024     02 00 00 FF 
01028     01 8A 56 F2 | 	cmps	arg02, ##1025 wc
0102c                 | '   x:=1024
0102c     0A 8A C6 39 |  if_ae	decod	arg02, #10
01030                 | ' word[@spr1ptr+12*num+4]:=x
01030     11 67 06 F1 | 	add	objptr, #273
01034     33 79 02 F6 | 	mov	_var01, objptr
01038     44 7B 02 F6 | 	mov	_var02, arg01
0103c     01 7A 66 F0 | 	shl	_var02, #1
01040     44 7B 02 F1 | 	add	_var02, arg01
01044     02 7A 66 F0 | 	shl	_var02, #2
01048     3D 79 02 F1 | 	add	_var01, _var02
0104c     04 78 06 F1 | 	add	_var01, #4
01050     3C 8B 52 FC | 	wrword	arg02, _var01
01054                 | ' word[@spr1ptr+12*num+6]:=y
01054     33 79 02 F6 | 	mov	_var01, objptr
01058     44 7B 02 F6 | 	mov	_var02, arg01
0105c     01 7A 66 F0 | 	shl	_var02, #1
01060     44 7B 02 F1 | 	add	_var02, arg01
01064     02 7A 66 F0 | 	shl	_var02, #2
01068     3D 79 02 F1 | 	add	_var01, _var02
0106c     06 78 06 F1 | 	add	_var01, #6
01070     3C 8D 52 FC | 	wrword	arg03, _var01
01074     11 67 86 F1 | 	sub	objptr, #273
01078                 | _hg010b_spin2_setspritepos_ret
01078     2D 00 64 FD | 	ret
0107c                 | 
0107c                 | ' 
0107c                 | ' pub setspritesize(num,w,h)
0107c                 | _hg010b_spin2_setspritesize
0107c                 | ' word[@spr1ptr+12*num+8]:=w
0107c     11 67 06 F1 | 	add	objptr, #273
01080     33 79 02 F6 | 	mov	_var01, objptr
01084     44 7B 02 F6 | 	mov	_var02, arg01
01088     01 7A 66 F0 | 	shl	_var02, #1
0108c     44 7B 02 F1 | 	add	_var02, arg01
01090     02 7A 66 F0 | 	shl	_var02, #2
01094     3D 79 02 F1 | 	add	_var01, _var02
01098     08 78 06 F1 | 	add	_var01, #8
0109c     3C 8B 52 FC | 	wrword	arg02, _var01
010a0                 | ' word[@spr1ptr+12*num+10]:=h
010a0     33 79 02 F6 | 	mov	_var01, objptr
010a4     44 7B 02 F6 | 	mov	_var02, arg01
010a8     01 7A 66 F0 | 	shl	_var02, #1
010ac     44 7B 02 F1 | 	add	_var02, arg01
010b0     02 7A 66 F0 | 	shl	_var02, #2
010b4     3D 79 02 F1 | 	add	_var01, _var02
010b8     0A 78 06 F1 | 	add	_var01, #10
010bc     3C 8D 52 FC | 	wrword	arg03, _var01
010c0     11 67 86 F1 | 	sub	objptr, #273
010c4                 | _hg010b_spin2_setspritesize_ret
010c4     2D 00 64 FD | 	ret
010c8                 | 
010c8                 | '   
010c8                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
010c8                 | ' 
010c8                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
010c8                 | _hg010b_spin2_fastline
010c8     02 CA 05 F6 | 	mov	COUNT_, #2
010cc     E8 00 A0 FD | 	call	#pushregs_
010d0     44 93 02 F6 | 	mov	local01, arg01
010d4     45 95 02 F6 | 	mov	local02, arg02
010d8                 | ' 
010d8                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
010d8     00 8C 56 F2 | 	cmps	arg03, #0 wc
010dc     F4 00 90 CD |  if_b	jmp	#LR__0050
010e0     01 00 00 FF 
010e4     2A 66 06 F1 | 	add	objptr, ##554
010e8     33 91 02 FB | 	rdlong	arg05, objptr
010ec     01 00 00 FF 
010f0     2A 66 86 F1 | 	sub	objptr, ##554
010f4     48 8D 52 F2 | 	cmps	arg03, arg05 wc
010f8     D8 00 90 3D |  if_ae	jmp	#LR__0050
010fc     00 92 56 F2 | 	cmps	local01, #0 wc
01100     00 94 56 C2 |  if_b	cmps	local02, #0 wc
01104     CC 00 90 CD |  if_b	jmp	#LR__0050
01108     01 00 00 FF 
0110c     26 66 06 F1 | 	add	objptr, ##550
01110     33 91 02 FB | 	rdlong	arg05, objptr
01114     01 00 00 FF 
01118     26 66 86 F1 | 	sub	objptr, ##550
0111c     48 93 5A F2 | 	cmps	local01, arg05 wcz
01120     01 00 00 1F 
01124     26 66 06 11 |  if_a	add	objptr, ##550
01128     33 89 02 1B |  if_a	rdlong	arg01, objptr
0112c     01 00 00 1F 
01130     26 66 86 11 |  if_a	sub	objptr, ##550
01134     44 95 5A 12 |  if_a	cmps	local02, arg01 wcz
01138                 | '   return
01138     98 00 90 1D |  if_a	jmp	#LR__0050
0113c     4A 93 5A F2 | 	cmps	local01, local02 wcz
01140     49 91 02 16 |  if_a	mov	arg05, local01
01144     4A 93 02 16 |  if_a	mov	local01, local02
01148     48 95 02 16 |  if_a	mov	local02, arg05
0114c     00 92 56 F2 | 	cmps	local01, #0 wc
01150     00 92 06 C6 |  if_b	mov	local01, #0
01154     01 00 00 FF 
01158     26 66 06 F1 | 	add	objptr, ##550
0115c     33 91 02 FB | 	rdlong	arg05, objptr
01160     01 00 00 FF 
01164     26 66 86 F1 | 	sub	objptr, ##550
01168     48 95 52 F2 | 	cmps	local02, arg05 wc
0116c     01 00 00 3F 
01170     26 66 06 31 |  if_ae	add	objptr, ##550
01174     33 95 02 3B |  if_ae	rdlong	local02, objptr
01178     01 00 00 3F 
0117c     26 66 86 31 |  if_ae	sub	objptr, ##550
01180     DD 66 06 F1 | 	add	objptr, #221
01184     33 89 02 FB | 	rdlong	arg01, objptr
01188     14 66 06 F1 | 	add	objptr, #20
0118c     33 91 02 FB | 	rdlong	arg05, objptr
01190     02 90 66 F0 | 	shl	arg05, #2
01194     46 91 02 FD | 	qmul	arg05, arg03
01198                 | ' if x1>x2
01198                 | '   x1,x2:=x2,x1
01198                 | ' if x1<0 
01198                 | '   x1:=0
01198                 | ' if x2>=xres
01198                 | '   x2:=xres-1  
01198     01 94 86 31 |  if_ae	sub	local02, #1
0119c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
0119c     01 8C 06 F6 | 	mov	arg03, #1
011a0     4A 8D 02 F1 | 	add	arg03, local02
011a4     49 8D 82 F1 | 	sub	arg03, local01
011a8     47 8B 02 F6 | 	mov	arg02, arg04
011ac     00 8E 06 F6 | 	mov	arg04, #0
011b0     01 90 06 F6 | 	mov	arg05, #1
011b4     0A 00 00 FF 
011b8     DB 67 06 F1 | 	add	objptr, ##5595
011bc     18 94 62 FD | 	getqx	local02
011c0     49 95 02 F1 | 	add	local02, local01
011c4     4A 89 02 F1 | 	add	arg01, local02
011c8     48 0A B0 FD | 	call	#_psram_spin2_fill
011cc     0B 00 00 FF 
011d0     CC 66 86 F1 | 	sub	objptr, ##5836
011d4                 | LR__0050
011d4     E7 F0 03 F6 | 	mov	ptra, fp
011d8     F2 00 A0 FD | 	call	#popregs_
011dc                 | _hg010b_spin2_fastline_ret
011dc     2D 00 64 FD | 	ret
011e0                 | 
011e0                 | '       
011e0                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
011e0                 | _hg010b_spin2_putcharxycgf
011e0                 | ' 
011e0                 | '  
011e0                 | ' repeat yy from 0 to 15
011e0     00 78 06 F6 | 	mov	_var01, #0
011e4     D7 8A 48 FB | 	callpa	#(@LR__0062-@LR__0060)>>2,fcache_load_ptr_
011e8                 | LR__0060
011e8                 | ' 
011e8                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
011e8     95 66 06 F1 | 	add	objptr, #149
011ec     33 7B 02 FB | 	rdlong	_var02, objptr
011f0     0A 7A 66 F0 | 	shl	_var02, #10
011f4     35 7D 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
011f8     3D 7D 02 F1 | 	add	_var03, _var02
011fc     46 7B 02 F6 | 	mov	_var02, arg03
01200     04 7A 66 F0 | 	shl	_var02, #4
01204     3D 7D 02 F1 | 	add	_var03, _var02
01208     3C 7D 02 F1 | 	add	_var03, _var01
0120c     3E 7D C2 FA | 	rdbyte	_var03, _var03
01210                 | '   asm
01210     00 7C 0E F4 | 	testb	_var03, #0 wz
01214     47 7F C2 A8 |  if_e	setbyte	_var04, arg04, #0
01218     48 7F C2 58 |  if_ne	setbyte	_var04, arg05, #0
0121c     01 7C 0E F4 | 	testb	_var03, #1 wz
01220     47 7F CA A8 |  if_e	setbyte	_var04, arg04, #1
01224     48 7F CA 58 |  if_ne	setbyte	_var04, arg05, #1
01228     02 7C 0E F4 | 	testb	_var03, #2 wz
0122c     47 7F D2 A8 |  if_e	setbyte	_var04, arg04, #2
01230     48 7F D2 58 |  if_ne	setbyte	_var04, arg05, #2
01234     03 7C 0E F4 | 	testb	_var03, #3 wz
01238     47 7F DA A8 |  if_e	setbyte	_var04, arg04, #3
0123c     48 7F DA 58 |  if_ne	setbyte	_var04, arg05, #3
01240     04 7C 0E F4 | 	testb	_var03, #4 wz
01244     47 81 C2 A8 |  if_e	setbyte	_var05, arg04, #0
01248     48 81 C2 58 |  if_ne	setbyte	_var05, arg05, #0
0124c     05 7C 0E F4 | 	testb	_var03, #5 wz
01250     47 81 CA A8 |  if_e	setbyte	_var05, arg04, #1
01254     48 81 CA 58 |  if_ne	setbyte	_var05, arg05, #1
01258     06 7C 0E F4 | 	testb	_var03, #6 wz
0125c     47 81 D2 A8 |  if_e	setbyte	_var05, arg04, #2
01260     48 81 D2 58 |  if_ne	setbyte	_var05, arg05, #2
01264     07 7C 0E F4 | 	testb	_var03, #7 wz
01268     47 81 DA A8 |  if_e	setbyte	_var05, arg04, #3
0126c     48 81 DA 58 |  if_ne	setbyte	_var05, arg05, #3
01270                 | '   
01270                 | '   ccc[0]:=c1
01270     99 67 06 F1 | 	add	objptr, #409
01274     33 7F 62 FC | 	wrlong	_var04, objptr
01278                 | '   ccc[1]:=c2 
01278     04 66 06 F1 | 	add	objptr, #4
0127c     33 81 62 FC | 	wrlong	_var05, objptr
01280                 | '   long[mailbox0][2]:=8
01280     49 66 86 F1 | 	sub	objptr, #73
01284     33 7D 02 FB | 	rdlong	_var03, objptr
01288     08 7C 06 F1 | 	add	_var03, #8
0128c     3E 11 68 FC | 	wrlong	#8, _var03
01290                 | '   long[mailbox0][1]:=@ccc
01290     33 7D 02 F6 | 	mov	_var03, objptr
01294     45 7C 06 F1 | 	add	_var03, #69
01298     33 7B 02 FB | 	rdlong	_var02, objptr
0129c     04 7A 06 F1 | 	add	_var02, #4
012a0     3D 7D 62 FC | 	wrlong	_var03, _var02
012a4                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
012a4     0C 67 86 F1 | 	sub	objptr, #268
012a8     33 7D 02 FB | 	rdlong	_var03, objptr
012ac     45 7B 02 F6 | 	mov	_var02, arg02
012b0     3C 7B 02 F1 | 	add	_var02, _var01
012b4     0A 7A 66 F0 | 	shl	_var02, #10
012b8     44 83 02 F6 | 	mov	_var06, arg01
012bc     02 82 66 F0 | 	shl	_var06, #2
012c0     41 7B 02 F1 | 	add	_var02, _var06
012c4     3D 7D 02 F1 | 	add	_var03, _var02
012c8     00 00 78 FF 
012cc     00 7C 06 F1 | 	add	_var03, ##-268435456
012d0     0C 67 06 F1 | 	add	objptr, #268
012d4     33 83 02 FB | 	rdlong	_var06, objptr
012d8     41 7D 62 FC | 	wrlong	_var03, _var06
012dc                 | '   repeat
012dc                 | LR__0061
012dc     33 7D 02 FB | 	rdlong	_var03, objptr
012e0     3E 7B 02 FB | 	rdlong	_var02, _var03
012e4     00 7A 56 F2 | 	cmps	_var02, #0 wc
012e8     F0 FF 9F CD |  if_b	jmp	#LR__0061
012ec     E9 67 86 F1 | 	sub	objptr, #489
012f0     01 78 06 F1 | 	add	_var01, #1
012f4     10 78 56 F2 | 	cmps	_var01, #16 wc
012f8     EC FE 9F CD |  if_b	jmp	#LR__0060
012fc                 | LR__0062
012fc                 | _hg010b_spin2_putcharxycgf_ret
012fc     2D 00 64 FD | 	ret
01300                 | 
01300                 | ' 
01300                 | ' '*************************************************************************
01300                 | ' '                                                                        *
01300                 | ' '  VBlank functions                                                      *
01300                 | ' '                                                                        *
01300                 | ' '*************************************************************************
01300                 | ' 
01300                 | ' pub waitvbl(amount) | i
01300                 | _hg010b_spin2_waitvbl
01300     03 CA 05 F6 | 	mov	COUNT_, #3
01304     E8 00 A0 FD | 	call	#pushregs_
01308     44 93 02 F6 | 	mov	local01, arg01
0130c                 | ' 
0130c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
0130c                 | ' 
0130c                 | ' repeat i from 1 to amount
0130c     01 94 06 F6 | 	mov	local02, #1
01310     01 92 56 F2 | 	cmps	local01, #1 wc
01314     01 96 86 F6 | 	negc	local03, #1
01318     4B 93 02 F1 | 	add	local01, local03
0131c                 | LR__0070
0131c                 | '   repeat until vblank==0
0131c                 | LR__0071
0131c     49 66 06 F1 | 	add	objptr, #73
01320     33 89 0A FB | 	rdlong	arg01, objptr wz
01324     49 66 86 F1 | 	sub	objptr, #73
01328     0C 00 90 AD |  if_e	jmp	#LR__0072
0132c                 | '     waitus(100)
0132c     64 88 06 F6 | 	mov	arg01, #100
01330     74 14 B0 FD | 	call	#__system___waitus
01334     E4 FF 9F FD | 	jmp	#LR__0071
01338                 | LR__0072
01338                 | '   repeat until vblank==1
01338                 | LR__0073
01338     49 66 06 F1 | 	add	objptr, #73
0133c     33 89 02 FB | 	rdlong	arg01, objptr
01340     49 66 86 F1 | 	sub	objptr, #73
01344     01 88 0E F2 | 	cmp	arg01, #1 wz
01348     0C 00 90 AD |  if_e	jmp	#LR__0074
0134c                 | '     waitus(100)
0134c     64 88 06 F6 | 	mov	arg01, #100
01350     54 14 B0 FD | 	call	#__system___waitus
01354     E0 FF 9F FD | 	jmp	#LR__0073
01358                 | LR__0074
01358     4B 95 02 F1 | 	add	local02, local03
0135c     49 95 0A F2 | 	cmp	local02, local01 wz
01360     B8 FF 9F 5D |  if_ne	jmp	#LR__0070
01364     E7 F0 03 F6 | 	mov	ptra, fp
01368     F2 00 A0 FD | 	call	#popregs_
0136c                 | _hg010b_spin2_waitvbl_ret
0136c     2D 00 64 FD | 	ret
01370                 | 
01370                 | ' 
01370                 | ' 
01370                 | ' pub cls(fc,bc)   :c,i
01370                 | _hg010b_spin2_cls
01370     02 CA 05 F6 | 	mov	COUNT_, #2
01374     E8 00 A0 FD | 	call	#pushregs_
01378     44 93 02 F6 | 	mov	local01, arg01
0137c     45 95 02 F6 | 	mov	local02, arg02
01380                 | ' 
01380                 | ' c:=bc
01380                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
01380     DD 66 06 F1 | 	add	objptr, #221
01384     33 89 02 FB | 	rdlong	arg01, objptr
01388     A5 66 86 F1 | 	sub	objptr, #165
0138c     33 8D 02 FB | 	rdlong	arg03, objptr
01390     02 8C 66 F0 | 	shl	arg03, #2
01394     4A 8B 02 F6 | 	mov	arg02, local02
01398     00 8E 06 F6 | 	mov	arg04, #0
0139c     01 90 06 F6 | 	mov	arg05, #1
013a0     0B 00 00 FF 
013a4     94 66 06 F1 | 	add	objptr, ##5780
013a8     68 08 B0 FD | 	call	#_psram_spin2_fill
013ac                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
013ac     0B 00 00 FF 
013b0     C8 66 86 F1 | 	sub	objptr, ##5832
013b4     33 89 02 FB | 	rdlong	arg01, objptr
013b8     04 66 86 F1 | 	sub	objptr, #4
013bc     33 8D 02 FB | 	rdlong	arg03, objptr
013c0     44 8D 82 F1 | 	sub	arg03, arg01
013c4     20 8A 06 F6 | 	mov	arg02, #32
013c8     00 8E 06 F6 | 	mov	arg04, #0
013cc     01 90 06 F6 | 	mov	arg05, #1
013d0     0B 00 00 FF 
013d4     CC 66 06 F1 | 	add	objptr, ##5836
013d8     38 08 B0 FD | 	call	#_psram_spin2_fill
013dc                 | ' setwritecolors(fc,bc)
013dc                 | ' 
013dc                 | ' write_color:=ff
013dc     0B 00 00 FF 
013e0     8B 66 86 F1 | 	sub	objptr, ##5771
013e4     33 93 62 FC | 	wrlong	local01, objptr
013e8                 | ' write_background:=bb
013e8     04 66 06 F1 | 	add	objptr, #4
013ec     33 95 62 FC | 	wrlong	local02, objptr
013f0                 | ' cursor_x:=0
013f0     09 66 86 F1 | 	sub	objptr, #9
013f4     33 01 58 FC | 	wrword	#0, objptr
013f8                 | ' cursor_y:=0
013f8     02 66 06 F1 | 	add	objptr, #2
013fc     33 01 48 FC | 	wrbyte	#0, objptr
01400                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
01400     02 66 86 F1 | 	sub	objptr, #2
01404     33 8B E2 FA | 	rdword	arg02, objptr
01408     02 8A 66 F0 | 	shl	arg02, #2
0140c     3C 66 86 F1 | 	sub	objptr, #60
01410     04 8C 06 F6 | 	mov	arg03, #4
01414     11 88 06 F6 | 	mov	arg01, #17
01418     F8 FB BF FD | 	call	#_hg010b_spin2_setspritepos
0141c                 | ' setcursorcolor(fc)
0141c     49 89 02 F6 | 	mov	arg01, local01
01420     04 F8 BF FD | 	call	#_hg010b_spin2_setcursorcolor
01424     4A 73 02 F6 | 	mov	result1, local02
01428     00 74 06 F6 | 	mov	result2, #0
0142c     E7 F0 03 F6 | 	mov	ptra, fp
01430     F2 00 A0 FD | 	call	#popregs_
01434                 | _hg010b_spin2_cls_ret
01434     2D 00 64 FD | 	ret
01438                 | 
01438                 | ' 
01438                 | ' ''---------- Output a char at the cursor position, move the cursor 
01438                 | ' 
01438                 | ' pub putchar(achar) | c,x,y,l,newcpl
01438                 | _hg010b_spin2_putchar
01438     02 CA 05 F6 | 	mov	COUNT_, #2
0143c     E8 00 A0 FD | 	call	#pushregs_
01440     44 93 02 F6 | 	mov	local01, arg01
01444                 | ' 
01444                 | ' if achar==10
01444     0A 92 0E F2 | 	cmp	local01, #10 wz
01448                 | '   crlf()
01448     B8 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
0144c                 | ' if achar==9
0144c     09 92 0E F2 | 	cmp	local01, #9 wz
01450     18 00 90 5D |  if_ne	jmp	#LR__0080
01454                 | '   cursor_x:=(cursor_x& %11110000)+16
01454     3C 66 06 F1 | 	add	objptr, #60
01458     33 8D E2 FA | 	rdword	arg03, objptr
0145c     F0 8C 06 F5 | 	and	arg03, #240
01460     10 8C 06 F1 | 	add	arg03, #16
01464     33 8D 52 FC | 	wrword	arg03, objptr
01468     3C 66 86 F1 | 	sub	objptr, #60
0146c                 | LR__0080
0146c                 | '   
0146c                 | ' if (achar<>9) && (achar<>10) 
0146c     09 92 0E F2 | 	cmp	local01, #9 wz
01470     0A 92 0E 52 |  if_ne	cmp	local01, #10 wz
01474     A8 00 90 AD |  if_e	jmp	#LR__0081
01478                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
01478     3C 66 06 F1 | 	add	objptr, #60
0147c     33 89 E2 FA | 	rdword	arg01, objptr
01480     02 66 06 F1 | 	add	objptr, #2
01484     33 8B C2 FA | 	rdbyte	arg02, objptr
01488     04 8A 66 F0 | 	shl	arg02, #4
0148c     04 8A 06 F1 | 	add	arg02, #4
01490     03 66 06 F1 | 	add	objptr, #3
01494     33 8F 02 FB | 	rdlong	arg04, objptr
01498     04 66 06 F1 | 	add	objptr, #4
0149c     33 91 02 FB | 	rdlong	arg05, objptr
014a0     45 66 86 F1 | 	sub	objptr, #69
014a4     49 8D 02 F6 | 	mov	arg03, local01
014a8     34 FD BF FD | 	call	#_hg010b_spin2_putcharxycgf
014ac     04 66 06 F1 | 	add	objptr, #4
014b0     33 89 02 FB | 	rdlong	arg01, objptr
014b4     1C 00 00 FF 
014b8     5C 6A 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
014bc     35 8D 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
014c0     3A 66 06 F1 | 	add	objptr, #58
014c4     33 91 C2 FA | 	rdbyte	arg05, objptr
014c8     48 8D 02 FD | 	qmul	arg03, arg05
014cc                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
014cc     1C 00 00 FF 
014d0     5C 6A 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
014d4     02 66 86 F1 | 	sub	objptr, #2
014d8     33 95 E2 FA | 	rdword	local02, objptr
014dc     01 94 46 F0 | 	shr	local02, #1
014e0     49 8B 02 F6 | 	mov	arg02, local01
014e4     01 8C 06 F6 | 	mov	arg03, #1
014e8     00 8E 06 F6 | 	mov	arg04, #0
014ec     01 90 06 F6 | 	mov	arg05, #1
014f0     0B 00 00 FF 
014f4     90 66 06 F1 | 	add	objptr, ##5776
014f8     18 92 62 FD | 	getqx	local01
014fc     4A 93 02 F1 | 	add	local01, local02
01500     49 89 02 F1 | 	add	arg01, local01
01504     0C 07 B0 FD | 	call	#_psram_spin2_fill
01508                 | '   cursor_x+=2
01508     0B 00 00 FF 
0150c     90 66 86 F1 | 	sub	objptr, ##5776
01510     33 95 E2 FA | 	rdword	local02, objptr
01514     02 94 06 F1 | 	add	local02, #2
01518     33 95 52 FC | 	wrword	local02, objptr
0151c     3C 66 86 F1 | 	sub	objptr, #60
01520                 | LR__0081
01520                 | ' 
01520                 | ' if cursor_x>=256
01520     3C 66 06 F1 | 	add	objptr, #60
01524     33 95 E2 FA | 	rdword	local02, objptr
01528     3C 66 86 F1 | 	sub	objptr, #60
0152c     00 95 56 F2 | 	cmps	local02, #256 wc
01530     64 00 90 CD |  if_b	jmp	#LR__0083
01534                 | '   cursor_x:=0
01534     3C 66 06 F1 | 	add	objptr, #60
01538     33 01 58 FC | 	wrword	#0, objptr
0153c                 | '   cursor_y+=1
0153c     02 66 06 F1 | 	add	objptr, #2
01540     33 95 C2 FA | 	rdbyte	local02, objptr
01544     01 94 06 F1 | 	add	local02, #1
01548     33 95 42 FC | 	wrbyte	local02, objptr
0154c                 | '   if cursor_y>st_lines-1
0154c     C3 66 06 F1 | 	add	objptr, #195
01550     33 95 02 FB | 	rdlong	local02, objptr
01554     01 94 86 F1 | 	sub	local02, #1
01558     C3 66 86 F1 | 	sub	objptr, #195
0155c     33 8D C2 FA | 	rdbyte	arg03, objptr
01560     3E 66 86 F1 | 	sub	objptr, #62
01564     4A 8D 5A F2 | 	cmps	arg03, local02 wcz
01568     2C 00 90 ED |  if_be	jmp	#LR__0082
0156c                 | '     scrollup2()
0156c     00 88 06 F6 | 	mov	arg01, #0
01570     01 00 00 FF 
01574     58 8A 06 F6 | 	mov	arg02, ##600
01578     10 8C 06 F6 | 	mov	arg03, #16
0157c     4C 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
01580                 | '     cursor_y:=st_lines-1
01580     01 67 06 F1 | 	add	objptr, #257
01584     33 95 02 FB | 	rdlong	local02, objptr
01588     01 94 86 F1 | 	sub	local02, #1
0158c     C3 66 86 F1 | 	sub	objptr, #195
01590     33 95 42 FC | 	wrbyte	local02, objptr
01594     3E 66 86 F1 | 	sub	objptr, #62
01598                 | LR__0082
01598                 | LR__0083
01598                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
01598     3C 66 06 F1 | 	add	objptr, #60
0159c     33 8B E2 FA | 	rdword	arg02, objptr
015a0     02 8A 66 F0 | 	shl	arg02, #2
015a4     02 66 06 F1 | 	add	objptr, #2
015a8     33 8D C2 FA | 	rdbyte	arg03, objptr
015ac     3E 66 86 F1 | 	sub	objptr, #62
015b0     04 8C 66 F0 | 	shl	arg03, #4
015b4     04 8C 06 F1 | 	add	arg03, #4
015b8     11 88 06 F6 | 	mov	arg01, #17
015bc     54 FA BF FD | 	call	#_hg010b_spin2_setspritepos
015c0     E7 F0 03 F6 | 	mov	ptra, fp
015c4     F2 00 A0 FD | 	call	#popregs_
015c8                 | _hg010b_spin2_putchar_ret
015c8     2D 00 64 FD | 	ret
015cc                 | 
015cc                 | '    
015cc                 | ' ' a version for text scrolling in Basic shifted 4 lines down
015cc                 | ' 
015cc                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
015cc                 | _hg010b_spin2_scrollup2
015cc     03 CA 05 F6 | 	mov	COUNT_, #3
015d0     E8 00 A0 FD | 	call	#pushregs_
015d4                 | ' 	
015d4                 | ' repeat i from 4 to 579 
015d4     04 92 06 F6 | 	mov	local01, #4
015d8                 | LR__0090
015d8     DD 66 06 F1 | 	add	objptr, #221
015dc     33 8B 02 FB | 	rdlong	arg02, objptr
015e0     49 91 02 F6 | 	mov	arg05, local01
015e4     10 90 06 F1 | 	add	arg05, #16
015e8     02 90 66 F0 | 	shl	arg05, #2
015ec     14 66 06 F1 | 	add	objptr, #20
015f0     33 8D 02 FB | 	rdlong	arg03, objptr
015f4     46 91 02 FD | 	qmul	arg05, arg03
015f8                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
015f8     02 8C 66 F0 | 	shl	arg03, #2
015fc     F4 03 00 FF 
01600     00 88 06 F6 | 	mov	arg01, ##518144
01604     0A 00 00 FF 
01608     DB 67 06 F1 | 	add	objptr, ##5595
0160c     18 90 62 FD | 	getqx	arg05
01610     48 8B 02 F1 | 	add	arg02, arg05
01614     C4 04 B0 FD | 	call	#_psram_spin2_read1
01618     0A 00 00 FF 
0161c     EF 67 86 F1 | 	sub	objptr, ##5615
01620     33 8B 02 FB | 	rdlong	arg02, objptr
01624     49 91 02 F6 | 	mov	arg05, local01
01628     02 90 66 F0 | 	shl	arg05, #2
0162c     14 66 06 F1 | 	add	objptr, #20
01630     33 8D 02 FB | 	rdlong	arg03, objptr
01634     46 91 02 FD | 	qmul	arg05, arg03
01638                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
01638     02 8C 66 F0 | 	shl	arg03, #2
0163c     F4 03 00 FF 
01640     00 88 06 F6 | 	mov	arg01, ##518144
01644     0A 00 00 FF 
01648     DB 67 06 F1 | 	add	objptr, ##5595
0164c     18 90 62 FD | 	getqx	arg05
01650     48 8B 02 F1 | 	add	arg02, arg05
01654     20 05 B0 FD | 	call	#_psram_spin2_write
01658     0B 00 00 FF 
0165c     CC 66 86 F1 | 	sub	objptr, ##5836
01660     01 92 06 F1 | 	add	local01, #1
01664     01 00 00 FF 
01668     44 92 16 F2 | 	cmp	local01, ##580 wc
0166c     68 FF 9F CD |  if_b	jmp	#LR__0090
01670                 | ' 
01670                 | ' repeat i from 580 to 599
01670     01 00 00 FF 
01674     44 92 06 F6 | 	mov	local01, ##580
01678                 | LR__0091
01678                 | '    fastline(0,1023,i,write_background)   
01678     45 66 06 F1 | 	add	objptr, #69
0167c     33 8F 02 FB | 	rdlong	arg04, objptr
01680     45 66 86 F1 | 	sub	objptr, #69
01684     00 88 06 F6 | 	mov	arg01, #0
01688     09 8A CE F9 | 	bmask	arg02, #9
0168c     49 8D 02 F6 | 	mov	arg03, local01
01690     34 FA BF FD | 	call	#_hg010b_spin2_fastline
01694     01 92 06 F1 | 	add	local01, #1
01698     01 00 00 FF 
0169c     58 92 16 F2 | 	cmp	local01, ##600 wc
016a0     D4 FF 9F CD |  if_b	jmp	#LR__0091
016a4                 | ' repeat i from 0 to 3
016a4     00 92 06 F6 | 	mov	local01, #0
016a8                 | LR__0092
016a8                 | '    fastline(0,1023,i,write_background)      
016a8     45 66 06 F1 | 	add	objptr, #69
016ac     33 8F 02 FB | 	rdlong	arg04, objptr
016b0     45 66 86 F1 | 	sub	objptr, #69
016b4     00 88 06 F6 | 	mov	arg01, #0
016b8     09 8A CE F9 | 	bmask	arg02, #9
016bc     49 8D 02 F6 | 	mov	arg03, local01
016c0     04 FA BF FD | 	call	#_hg010b_spin2_fastline
016c4     01 92 06 F1 | 	add	local01, #1
016c8     04 92 56 F2 | 	cmps	local01, #4 wc
016cc     D8 FF 9F CD |  if_b	jmp	#LR__0092
016d0                 | ' 
016d0                 | ' repeat i from 0 to 35
016d0     00 92 06 F6 | 	mov	local01, #0
016d4                 | LR__0093
016d4     49 91 02 F6 | 	mov	arg05, local01
016d8     01 90 06 F1 | 	add	arg05, #1
016dc     1C 00 00 FF 
016e0     5C 6A 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
016e4     35 8D 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
016e8     46 91 02 FD | 	qmul	arg05, arg03
016ec                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
016ec     04 66 06 F1 | 	add	objptr, #4
016f0     33 8B 02 FB | 	rdlong	arg02, objptr
016f4     1C 00 00 FF 
016f8     5C 6A 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
016fc     F4 03 00 FF 
01700     00 88 06 F6 | 	mov	arg01, ##518144
01704     0B 00 00 FF 
01708     C8 66 06 F1 | 	add	objptr, ##5832
0170c     18 90 62 FD | 	getqx	arg05
01710     48 8B 02 F1 | 	add	arg02, arg05
01714     C4 03 B0 FD | 	call	#_psram_spin2_read1
01718     1C 00 00 FF 
0171c     5C 6A 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
01720     35 8D 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
01724     46 93 02 FD | 	qmul	local01, arg03
01728                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
01728     0B 00 00 FF 
0172c     C8 66 86 F1 | 	sub	objptr, ##5832
01730     33 8B 02 FB | 	rdlong	arg02, objptr
01734     1C 00 00 FF 
01738     5C 6A 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
0173c     F4 03 00 FF 
01740     00 88 06 F6 | 	mov	arg01, ##518144
01744     0B 00 00 FF 
01748     C8 66 06 F1 | 	add	objptr, ##5832
0174c     18 90 62 FD | 	getqx	arg05
01750     48 8B 02 F1 | 	add	arg02, arg05
01754     20 04 B0 FD | 	call	#_psram_spin2_write
01758     0B 00 00 FF 
0175c     CC 66 86 F1 | 	sub	objptr, ##5836
01760     01 92 06 F1 | 	add	local01, #1
01764     24 92 56 F2 | 	cmps	local01, #36 wc
01768     68 FF 9F CD |  if_b	jmp	#LR__0093
0176c                 | ' repeat i from 0 to timings[7]-1
0176c     00 92 06 F6 | 	mov	local01, #0
01770     1C 00 00 FF 
01774     5C 6A 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
01778     35 95 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
0177c     1C 00 00 FF 
01780     5C 6A 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
01784     01 94 86 F1 | 	sub	local02, #1
01788     00 94 56 F2 | 	cmps	local02, #0 wc
0178c     01 96 86 F6 | 	negc	local03, #1
01790     4B 95 02 F1 | 	add	local02, local03
01794                 | LR__0094
01794                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
01794     04 66 06 F1 | 	add	objptr, #4
01798     33 89 02 FB | 	rdlong	arg01, objptr
0179c     1C 00 00 FF 
017a0     5C 6A 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
017a4     35 91 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
017a8     1C 00 00 FF 
017ac     5C 6A 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
017b0     48 8F 02 F6 | 	mov	arg04, arg05
017b4     03 8E 66 F0 | 	shl	arg04, #3
017b8     48 8F 02 F1 | 	add	arg04, arg05
017bc     02 8E 66 F0 | 	shl	arg04, #2
017c0     49 8F 02 F1 | 	add	arg04, local01
017c4     47 89 02 F1 | 	add	arg01, arg04
017c8     20 8A 06 F6 | 	mov	arg02, #32
017cc     01 8C 06 F6 | 	mov	arg03, #1
017d0     00 8E 06 F6 | 	mov	arg04, #0
017d4     01 90 06 F6 | 	mov	arg05, #1
017d8     0B 00 00 FF 
017dc     C8 66 06 F1 | 	add	objptr, ##5832
017e0     30 04 B0 FD | 	call	#_psram_spin2_fill
017e4     0B 00 00 FF 
017e8     CC 66 86 F1 | 	sub	objptr, ##5836
017ec     4B 93 02 F1 | 	add	local01, local03
017f0     4A 93 0A F2 | 	cmp	local01, local02 wz
017f4     9C FF 9F 5D |  if_ne	jmp	#LR__0094
017f8     E7 F0 03 F6 | 	mov	ptra, fp
017fc     F2 00 A0 FD | 	call	#popregs_
01800                 | _hg010b_spin2_scrollup2_ret
01800     2D 00 64 FD | 	ret
01804                 | 
01804                 | ' 
01804                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
01804                 | ' 
01804                 | ' pub crlf()
01804                 | _hg010b_spin2_crlf
01804                 | ' 
01804                 | ' cursor_x:=leading_spaces*2
01804     01 00 00 FF 
01808     B6 66 06 F1 | 	add	objptr, ##694
0180c     33 8D 02 FB | 	rdlong	arg03, objptr
01810     01 8C 66 F0 | 	shl	arg03, #1
01814     01 00 00 FF 
01818     7A 66 86 F1 | 	sub	objptr, ##634
0181c     33 8D 52 FC | 	wrword	arg03, objptr
01820                 | ' cursor_y+=1
01820     02 66 06 F1 | 	add	objptr, #2
01824     33 8D C2 FA | 	rdbyte	arg03, objptr
01828     01 8C 06 F1 | 	add	arg03, #1
0182c     33 8D 42 FC | 	wrbyte	arg03, objptr
01830                 | ' if cursor_y>st_lines-1
01830     C3 66 06 F1 | 	add	objptr, #195
01834     33 8D 02 FB | 	rdlong	arg03, objptr
01838     01 8C 86 F1 | 	sub	arg03, #1
0183c     C3 66 86 F1 | 	sub	objptr, #195
01840     33 8B C2 FA | 	rdbyte	arg02, objptr
01844     3E 66 86 F1 | 	sub	objptr, #62
01848     46 8B 5A F2 | 	cmps	arg02, arg03 wcz
0184c     2C 00 90 ED |  if_be	jmp	#LR__0100
01850                 | '   scrollup2()
01850     00 88 06 F6 | 	mov	arg01, #0
01854     01 00 00 FF 
01858     58 8A 06 F6 | 	mov	arg02, ##600
0185c     10 8C 06 F6 | 	mov	arg03, #16
01860     68 FD BF FD | 	call	#_hg010b_spin2_scrollup2
01864                 | '   cursor_y:=st_lines-1
01864     01 67 06 F1 | 	add	objptr, #257
01868     33 8D 02 FB | 	rdlong	arg03, objptr
0186c     01 8C 86 F1 | 	sub	arg03, #1
01870     C3 66 86 F1 | 	sub	objptr, #195
01874     33 8D 42 FC | 	wrbyte	arg03, objptr
01878     3E 66 86 F1 | 	sub	objptr, #62
0187c                 | LR__0100
0187c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
0187c     3C 66 06 F1 | 	add	objptr, #60
01880     33 8B E2 FA | 	rdword	arg02, objptr
01884     02 8A 66 F0 | 	shl	arg02, #2
01888     02 66 06 F1 | 	add	objptr, #2
0188c     33 8D C2 FA | 	rdbyte	arg03, objptr
01890     3E 66 86 F1 | 	sub	objptr, #62
01894     04 8C 66 F0 | 	shl	arg03, #4
01898     04 8C 06 F1 | 	add	arg03, #4
0189c     11 88 06 F6 | 	mov	arg01, #17
018a0     70 F7 BF FD | 	call	#_hg010b_spin2_setspritepos
018a4                 | _hg010b_spin2_crlf_ret
018a4     2D 00 64 FD | 	ret
018a8                 | 
018a8                 | ' 
018a8                 | ' '..............................................................................
018a8                 | ' 
018a8                 | ' {{
018a8                 | ' }}
018a8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
018a8                 | _psram_spin2_startx
018a8     04 CA 05 F6 | 	mov	COUNT_, #4
018ac     E8 00 A0 FD | 	call	#pushregs_
018b0     44 93 02 F6 | 	mov	local01, arg01
018b4     46 95 02 F6 | 	mov	local02, arg03
018b8     47 97 02 F6 | 	mov	local03, arg04
018bc                 | '     stop() ' restart driver if required
018bc     5C 01 B0 FD | 	call	#_psram_spin2_stop
018c0     00 92 0E F2 | 	cmp	local01, #0 wz
018c4     14 92 06 AB |  if_e	rdlong	local01, #20
018c8     49 8B 52 F6 | 	abs	arg02, local01 wc
018cc     A1 07 00 FF 
018d0     40 8A 16 FD | 	qdiv	arg02, ##1000000
018d4                 | ' 
018d4                 | '     ' use current frequency if none specified
018d4                 | ' 
018d4                 | '     if freq == 0 
018d4                 | '         freq := clkfreq 
018d4                 | ' 
018d4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
018d4                 | ' 
018d4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
018d4                 | '     if burst < 0
018d4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
018d4     18 8A 62 FD | 	getqx	arg02
018d8     45 8F 82 F6 | 	negc	arg04, arg02
018dc     03 8E 66 F0 | 	shl	arg04, #3
018e0     84 8E 86 F1 | 	sub	arg04, #132
018e4     04 8E 46 F0 | 	shr	arg04, #4
018e8     04 8E 66 F0 | 	shl	arg04, #4
018ec     00 8E 56 F2 | 	cmps	arg04, #0 wc
018f0     0E 72 66 C6 |  if_b	neg	result1, #14
018f4     18 01 90 CD |  if_b	jmp	#LR__0114
018f8                 | ' 
018f8                 | '     ' compute the input delay
018f8                 | ' 
018f8                 | '     if delay <= 0
018f8     01 94 56 F2 | 	cmps	local02, #1 wc
018fc     10 00 90 3D |  if_ae	jmp	#LR__0110
01900                 | '         delay := lookupDelay(freq)
01900     49 89 02 F6 | 	mov	arg01, local01
01904     C0 04 B0 FD | 	call	#_psram_spin2_lookupDelay
01908     39 95 02 F6 | 	mov	local02, result1
0190c     04 00 90 FD | 	jmp	#LR__0111
01910                 | LR__0110
01910                 | '     else
01910                 | '         delay <#= $f ' limit to 15
01910     0F 94 66 F3 | 	fles	local02, #15
01914                 | LR__0111
01914                 | ' 
01914                 | '     ' create our lock
01914                 | ' 
01914                 | '     driverlock := LOCKNEW()  
01914     00 72 06 F6 | 	mov	result1, #0
01918     04 72 62 FD | 	locknew	result1
0191c     04 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #260
01920     37 73 62 FC | 	wrlong	result1, ptr__psram_spin2_dat__
01924                 | '     if driverlock == -1
01924     04 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
01928     FF FF 7F FF 
0192c     FF 73 0E F2 | 	cmp	result1, ##-1 wz
01930                 | '         return ERR_NO_LOCK
01930     1A 72 66 A6 |  if_e	neg	result1, #26
01934     D8 00 90 AD |  if_e	jmp	#LR__0114
01938                 | ' 
01938                 | '     ' patch in the proper data and HUB addresses to the startup structure
01938                 | ' 
01938                 | '     long[@startupData][0]:=clkfreq
01938     14 92 06 FB | 	rdlong	local01, #20
0193c     28 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #296
01940     37 93 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
01944                 | ' '    long[@startupData][1]:=$1000_0000
01944                 | '     long[@startupData][5]:=@deviceData
01944     37 93 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
01948     20 92 06 F1 | 	add	local01, #32
0194c     37 8B 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
01950     14 8A 06 F1 | 	add	arg02, #20
01954     45 93 62 FC | 	wrlong	local01, arg02
01958                 | '     long[@startupData][6]:=@qosData
01958     37 93 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
0195c     A0 92 06 F1 | 	add	local01, #160
01960     37 8B 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
01964     18 8A 06 F1 | 	add	arg02, #24
01968     45 93 62 FC | 	wrlong	local01, arg02
0196c                 | '     long[@startupData][7]:=$7FF00
0196c     37 93 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
01970     1C 92 06 F1 | 	add	local01, #28
01974     FF 03 80 FF 
01978     49 01 6A FC | 	wrlong	##524032, local01
0197c                 | ' 
0197c                 | '     ' setup some default bank and QoS parameter values
0197c                 | ' 
0197c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
0197c     20 6E 06 F1 | 	add	ptr__psram_spin2_dat__, #32
01980     37 89 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
01984     48 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #328
01988     10 8E 66 F0 | 	shl	arg04, #16
0198c     0C 94 66 F0 | 	shl	local02, #12
01990     4A 8F 42 F5 | 	or	arg04, local02
01994     18 8E 46 F5 | 	or	arg04, #24
01998     47 8B 02 F6 | 	mov	arg02, arg04
0199c     02 8C 06 F6 | 	mov	arg03, #2
019a0     E0 00 A0 FD | 	call	#\builtin_longfill_
019a4                 | '     longfill(@qosData, $FFFF0000, 8)
019a4     37 89 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
019a8     C8 89 06 F1 | 	add	arg01, #456
019ac     07 8C 06 F6 | 	mov	arg03, #7
019b0     28 8C 62 FD | 	setq	arg03
019b4     80 FF FF FF 
019b8     44 01 68 FC | 	wrlong	##-65536, arg01
019bc                 | ' 
019bc                 | '     ' get the address of the PSRAM memory driver so we can start it
019bc                 | ' 
019bc                 | '     driverAddr:= driver.getDriverAddr()
019bc                 | '     return @driver_start
019bc     36 8B 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
019c0     20 8A 06 F1 | 	add	arg02, #32
019c4                 | ' 
019c4                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
019c4                 | ' 
019c4                 | '     if desiredcog < 0
019c4     00 96 56 F2 | 	cmps	local03, #0 wc
019c8                 | '         desiredcog := NEWCOG
019c8     10 96 06 C6 |  if_b	mov	local03, #16
019cc                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
019cc     37 8D 02 F6 | 	mov	arg03, ptr__psram_spin2_dat__
019d0     28 8D 06 F1 | 	add	arg03, #296
019d4     4B 99 02 F6 | 	mov	local04, local03
019d8     28 8C 62 FD | 	setq	arg03
019dc     45 99 F2 FC | 	coginit	local04, arg02 wc
019e0     01 98 66 C6 |  if_b	neg	local04, #1
019e4     00 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #256
019e8     37 99 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
019ec     00 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
019f0     D7 08 48 FB | 	callpa	#(@LR__0113-@LR__0112)>>2,fcache_load_ptr_
019f4                 | '     repeat until long[@startupData] == 0 
019f4                 | LR__0112
019f4     37 99 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
019f8     28 99 06 F1 | 	add	local04, #296
019fc     4C 99 0A FB | 	rdlong	local04, local04 wz
01a00     F0 FF 9F 5D |  if_ne	jmp	#LR__0112
01a04                 | LR__0113
01a04                 | ' 
01a04                 | '     return drivercog
01a04     00 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01a08     37 73 02 FB | 	rdlong	result1, ptr__psram_spin2_dat__
01a0c     00 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01a10                 | LR__0114
01a10     E7 F0 03 F6 | 	mov	ptra, fp
01a14     F2 00 A0 FD | 	call	#popregs_
01a18                 | _psram_spin2_startx_ret
01a18     2D 00 64 FD | 	ret
01a1c                 | 
01a1c                 | ' 
01a1c                 | ' '..............................................................................
01a1c                 | ' 
01a1c                 | ' {{
01a1c                 | ' }}
01a1c                 | ' PUB stop() : i
01a1c                 | _psram_spin2_stop
01a1c     00 78 06 F6 | 	mov	_var01, #0
01a20                 | '     if drivercog <> -1
01a20     00 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01a24     37 89 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
01a28     00 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01a2c     FF FF 7F FF 
01a30     FF 89 0E F2 | 	cmp	arg01, ##-1 wz
01a34     70 00 90 AD |  if_e	jmp	#LR__0123
01a38                 | '         cogstop(drivercog) ' a rather brutal stop
01a38     00 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01a3c     37 89 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
01a40     00 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01a44     03 88 62 FD | 	cogstop	arg01
01a48     D7 26 48 FB | 	callpa	#(@LR__0122-@LR__0120)>>2,fcache_load_ptr_
01a4c                 | '         repeat i from 0 to 7
01a4c                 | LR__0120
01a4c                 | '             if long[$7FF00][i*3] < 0
01a4c     3C 73 02 F6 | 	mov	result1, _var01
01a50     01 72 66 F0 | 	shl	result1, #1
01a54     3C 73 02 F1 | 	add	result1, _var01
01a58     02 72 66 F0 | 	shl	result1, #2
01a5c     FF 03 00 FF 
01a60     00 73 06 F1 | 	add	result1, ##524032
01a64     39 73 02 FB | 	rdlong	result1, result1
01a68     00 72 56 F2 | 	cmps	result1, #0 wc
01a6c     1C 00 90 3D |  if_ae	jmp	#LR__0121
01a70                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
01a70     3C 73 02 F6 | 	mov	result1, _var01
01a74     01 72 66 F0 | 	shl	result1, #1
01a78     3C 73 02 F1 | 	add	result1, _var01
01a7c     02 72 66 F0 | 	shl	result1, #2
01a80     FF 03 00 FF 
01a84     00 73 06 F1 | 	add	result1, ##524032
01a88     39 21 68 FC | 	wrlong	#16, result1
01a8c                 | LR__0121
01a8c     01 78 06 F1 | 	add	_var01, #1
01a90     08 78 56 F2 | 	cmps	_var01, #8 wc
01a94     B4 FF 9F CD |  if_b	jmp	#LR__0120
01a98                 | LR__0122
01a98                 | '         drivercog := -1
01a98     00 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01a9c     FF FF FF FF 
01aa0     37 FF 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
01aa4     00 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01aa8                 | LR__0123
01aa8                 | '     if driverlock <> -1
01aa8     04 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #260
01aac     37 7B 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
01ab0     04 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
01ab4     FF FF 7F FF 
01ab8     FF 7B 0E F2 | 	cmp	_var02, ##-1 wz
01abc                 | '         LOCKRET(driverlock)
01abc     04 6F 06 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
01ac0     37 89 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
01ac4     05 88 62 5D |  if_ne	lockret	arg01
01ac8                 | '         driverlock := -1
01ac8     FF FF FF 5F 
01acc     37 FF 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
01ad0     04 6F 86 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
01ad4     3C 73 02 F6 | 	mov	result1, _var01
01ad8                 | _psram_spin2_stop_ret
01ad8     2D 00 64 FD | 	ret
01adc                 | 
01adc                 | ' 
01adc                 | ' '..............................................................................
01adc                 | ' 
01adc                 | ' {{
01adc                 | ' }}
01adc                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
01adc                 | _psram_spin2_read1
01adc                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
01adc                 | '     if drivercog == -1 ' driver must be running
01adc     00 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01ae0     37 79 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
01ae4     00 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01ae8     FF FF 7F FF 
01aec     FF 79 0E F2 | 	cmp	_var01, ##-1 wz
01af0                 | '         return ERR_INACTIVE
01af0     0F 72 66 A6 |  if_e	neg	result1, #15
01af4     7C 00 90 AD |  if_e	jmp	#LR__0131
01af8                 | '     if count == 0 ' don't even bother reading
01af8     00 8C 0E F2 | 	cmp	arg03, #0 wz
01afc                 | '         return 0
01afc     00 72 06 A6 |  if_e	mov	result1, #0
01b00     70 00 90 AD |  if_e	jmp	#LR__0131
01b04                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
01b04     00 72 06 F6 | 	mov	result1, #0
01b08     01 72 62 FD | 	cogid	result1
01b0c     39 79 02 F6 | 	mov	_var01, result1
01b10     01 78 66 F0 | 	shl	_var01, #1
01b14     39 79 02 F1 | 	add	_var01, result1
01b18     02 78 66 F0 | 	shl	_var01, #2
01b1c     FF 03 00 FF 
01b20     00 7B 06 F6 | 	mov	_var02, ##524032
01b24     3C 7B 02 F1 | 	add	_var02, _var01
01b28                 | '     if long[mailbox] < 0
01b28     3D 79 02 FB | 	rdlong	_var01, _var02
01b2c     00 78 56 F2 | 	cmps	_var01, #0 wc
01b30                 | '         return ERR_MAILBOX_BUSY
01b30     1C 72 66 C6 |  if_b	neg	result1, #28
01b34     3C 00 90 CD |  if_b	jmp	#LR__0131
01b38                 | '     long[mailbox][2] := count
01b38     08 7A 06 F1 | 	add	_var02, #8
01b3c     3D 8D 62 FC | 	wrlong	arg03, _var02
01b40                 | '     long[mailbox][1] := dstHubAddr
01b40     04 7A 86 F1 | 	sub	_var02, #4
01b44     3D 89 62 FC | 	wrlong	arg01, _var02
01b48     04 7A 86 F1 | 	sub	_var02, #4
01b4c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
01b4c     45 7D 02 F6 | 	mov	_var03, arg02
01b50     D9 7C 06 F4 | 	bitl	_var03, #217
01b54     00 00 58 FF 
01b58     00 78 06 F6 | 	mov	_var01, ##-1342177280
01b5c     3E 79 02 F1 | 	add	_var01, _var03
01b60     3D 79 62 FC | 	wrlong	_var01, _var02
01b64                 | '     repeat
01b64                 | LR__0130
01b64                 | '         result := long[mailbox]    
01b64     3D 7D 02 FB | 	rdlong	_var03, _var02
01b68     00 7C 56 F2 | 	cmps	_var03, #0 wc
01b6c     F4 FF 9F CD |  if_b	jmp	#LR__0130
01b70                 | '     while result < 0   
01b70                 | '     return -result                       'return success or error
01b70     3E 73 62 F6 | 	neg	result1, _var03
01b74                 | LR__0131
01b74                 | _psram_spin2_read1_ret
01b74     2D 00 64 FD | 	ret
01b78                 | 
01b78                 | ' 
01b78                 | ' '..............................................................................
01b78                 | ' 
01b78                 | ' {{
01b78                 | ' }}
01b78                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
01b78                 | _psram_spin2_write
01b78                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
01b78                 | '     if drivercog == -1 ' driver must be running
01b78     00 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01b7c     37 79 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
01b80     00 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01b84     FF FF 7F FF 
01b88     FF 79 0E F2 | 	cmp	_var01, ##-1 wz
01b8c                 | '         return ERR_INACTIVE
01b8c     0F 72 66 A6 |  if_e	neg	result1, #15
01b90     7C 00 90 AD |  if_e	jmp	#LR__0141
01b94                 | '     if count == 0 ' don't even bother writing
01b94     00 8C 0E F2 | 	cmp	arg03, #0 wz
01b98                 | '         return 0
01b98     00 72 06 A6 |  if_e	mov	result1, #0
01b9c     70 00 90 AD |  if_e	jmp	#LR__0141
01ba0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
01ba0     00 72 06 F6 | 	mov	result1, #0
01ba4     01 72 62 FD | 	cogid	result1
01ba8     39 79 02 F6 | 	mov	_var01, result1
01bac     01 78 66 F0 | 	shl	_var01, #1
01bb0     39 79 02 F1 | 	add	_var01, result1
01bb4     02 78 66 F0 | 	shl	_var01, #2
01bb8     FF 03 00 FF 
01bbc     00 7B 06 F6 | 	mov	_var02, ##524032
01bc0     3C 7B 02 F1 | 	add	_var02, _var01
01bc4                 | '     if long[mailbox] < 0
01bc4     3D 79 02 FB | 	rdlong	_var01, _var02
01bc8     00 78 56 F2 | 	cmps	_var01, #0 wc
01bcc                 | '         return ERR_MAILBOX_BUSY
01bcc     1C 72 66 C6 |  if_b	neg	result1, #28
01bd0     3C 00 90 CD |  if_b	jmp	#LR__0141
01bd4                 | '     long[mailbox][2] := count
01bd4     08 7A 06 F1 | 	add	_var02, #8
01bd8     3D 8D 62 FC | 	wrlong	arg03, _var02
01bdc                 | '     long[mailbox][1] := srcHubAddr
01bdc     04 7A 86 F1 | 	sub	_var02, #4
01be0     3D 89 62 FC | 	wrlong	arg01, _var02
01be4     04 7A 86 F1 | 	sub	_var02, #4
01be8                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
01be8     45 7D 02 F6 | 	mov	_var03, arg02
01bec     D9 7C 06 F4 | 	bitl	_var03, #217
01bf0     00 00 78 FF 
01bf4     00 78 06 F6 | 	mov	_var01, ##-268435456
01bf8     3E 79 02 F1 | 	add	_var01, _var03
01bfc     3D 79 62 FC | 	wrlong	_var01, _var02
01c00                 | '     repeat
01c00                 | LR__0140
01c00                 | '         result := long[mailbox]    
01c00     3D 7D 02 FB | 	rdlong	_var03, _var02
01c04     00 7C 56 F2 | 	cmps	_var03, #0 wc
01c08     F4 FF 9F CD |  if_b	jmp	#LR__0140
01c0c                 | '     while result < 0   
01c0c                 | '     return -result                       'return success or error
01c0c     3E 73 62 F6 | 	neg	result1, _var03
01c10                 | LR__0141
01c10                 | _psram_spin2_write_ret
01c10     2D 00 64 FD | 	ret
01c14                 | 
01c14                 | ' 
01c14                 | ' ' generalized fill
01c14                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
01c14                 | _psram_spin2_fill
01c14     44 79 02 F6 | 	mov	_var01, arg01
01c18     45 7B 02 F6 | 	mov	_var02, arg02
01c1c     46 7D 02 F6 | 	mov	_var03, arg03
01c20     48 7F 02 F6 | 	mov	_var04, arg05
01c24                 | '     case datasize 
01c24     01 7E 86 F1 | 	sub	_var04, #1
01c28     04 7E 26 F3 | 	fle	_var04, #4
01c2c     30 7E 62 FD | 	jmprel	_var04
01c30                 | LR__0150
01c30     10 00 90 FD | 	jmp	#LR__0151
01c34     18 00 90 FD | 	jmp	#LR__0152
01c38     2C 00 90 FD | 	jmp	#LR__0154
01c3c     1C 00 90 FD | 	jmp	#LR__0153
01c40     24 00 90 FD | 	jmp	#LR__0154
01c44                 | LR__0151
01c44                 | '         1: req := driver.R_WRITEBYTE
01c44     00 00 60 FF 
01c48     00 80 06 F6 | 	mov	_var05, ##-1073741824
01c4c     20 00 90 FD | 	jmp	#LR__0155
01c50                 | LR__0152
01c50                 | '         2: req := driver.R_WRITEWORD
01c50     00 00 68 FF 
01c54     00 80 06 F6 | 	mov	_var05, ##-805306368
01c58     14 00 90 FD | 	jmp	#LR__0155
01c5c                 | LR__0153
01c5c                 | '         4: req := driver.R_WRITELONG
01c5c     00 00 70 FF 
01c60     00 80 06 F6 | 	mov	_var05, ##-536870912
01c64     08 00 90 FD | 	jmp	#LR__0155
01c68                 | LR__0154
01c68                 | '         other : return ERR_INVALID
01c68     06 72 66 F6 | 	neg	result1, #6
01c6c     94 00 90 FD | 	jmp	#LR__0157
01c70                 | LR__0155
01c70                 | '     if count == 0   ' nothing to do
01c70     00 7C 0E F2 | 	cmp	_var03, #0 wz
01c74                 | '         return 0
01c74     00 72 06 A6 |  if_e	mov	result1, #0
01c78     88 00 90 AD |  if_e	jmp	#LR__0157
01c7c                 | '     if drivercog == -1
01c7c     00 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01c80     37 7F 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
01c84     00 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01c88     FF FF 7F FF 
01c8c     FF 7F 0E F2 | 	cmp	_var04, ##-1 wz
01c90                 | '         return ERR_INACTIVE
01c90     0F 72 66 A6 |  if_e	neg	result1, #15
01c94     6C 00 90 AD |  if_e	jmp	#LR__0157
01c98                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
01c98     00 72 06 F6 | 	mov	result1, #0
01c9c     01 72 62 FD | 	cogid	result1
01ca0     39 7F 02 F6 | 	mov	_var04, result1
01ca4     01 7E 66 F0 | 	shl	_var04, #1
01ca8     39 7F 02 F1 | 	add	_var04, result1
01cac     02 7E 66 F0 | 	shl	_var04, #2
01cb0     FF 03 00 FF 
01cb4     00 83 06 F6 | 	mov	_var06, ##524032
01cb8     3F 83 02 F1 | 	add	_var06, _var04
01cbc                 | '     if long[mailbox] < 0
01cbc     41 7F 02 FB | 	rdlong	_var04, _var06
01cc0     00 7E 56 F2 | 	cmps	_var04, #0 wc
01cc4                 | '         return ERR_MAILBOX_BUSY
01cc4     1C 72 66 C6 |  if_b	neg	result1, #28
01cc8     38 00 90 CD |  if_b	jmp	#LR__0157
01ccc                 | '     long[mailbox][2] := count
01ccc     08 82 06 F1 | 	add	_var06, #8
01cd0     41 7D 62 FC | 	wrlong	_var03, _var06
01cd4                 | '     long[mailbox][1] := pattern
01cd4     04 82 86 F1 | 	sub	_var06, #4
01cd8     41 7B 62 FC | 	wrlong	_var02, _var06
01cdc     04 82 86 F1 | 	sub	_var06, #4
01ce0                 | '     long[mailbox] := req + (addr & $1ffffff)
01ce0     40 85 02 F6 | 	mov	_var07, _var05
01ce4     3C 87 02 F6 | 	mov	_var08, _var01
01ce8     D9 86 06 F4 | 	bitl	_var08, #217
01cec     43 85 02 F1 | 	add	_var07, _var08
01cf0     41 85 62 FC | 	wrlong	_var07, _var06
01cf4                 | '     repeat
01cf4                 | LR__0156
01cf4                 | '         r := long[mailbox]
01cf4     41 87 02 FB | 	rdlong	_var08, _var06
01cf8     00 86 56 F2 | 	cmps	_var08, #0 wc
01cfc     F4 FF 9F CD |  if_b	jmp	#LR__0156
01d00                 | '     while r < 0
01d00                 | '     return -r                  ' return 0 for success or negated error code
01d00     43 73 62 F6 | 	neg	result1, _var08
01d04                 | LR__0157
01d04                 | _psram_spin2_fill_ret
01d04     2D 00 64 FD | 	ret
01d08                 | 
01d08                 | ' 
01d08                 | ' '..............................................................................
01d08                 | ' 
01d08                 | ' {{
01d08                 | ' }}
01d08                 | ' PUB setQos(cog, qos) : result | mailbox
01d08                 | _psram_spin2_setQos
01d08     44 79 02 F6 | 	mov	_var01, arg01
01d0c                 | '     if drivercog == -1 ' driver must be running
01d0c     00 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01d10     37 7B 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
01d14     00 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01d18     FF FF 7F FF 
01d1c     FF 7B 0E F2 | 	cmp	_var02, ##-1 wz
01d20                 | '         return ERR_INACTIVE
01d20     0F 72 66 A6 |  if_e	neg	result1, #15
01d24     9C 00 90 AD |  if_e	jmp	#LR__0164
01d28                 | '     if cog < 0 or cog > 7 ' enforce cog id range
01d28     00 78 56 F2 | 	cmps	_var01, #0 wc
01d2c     08 00 90 CD |  if_b	jmp	#LR__0160
01d30     08 78 56 F2 | 	cmps	_var01, #8 wc
01d34     08 00 90 CD |  if_b	jmp	#LR__0161
01d38                 | LR__0160
01d38                 | '         return ERR_INVALID
01d38     06 72 66 F6 | 	neg	result1, #6
01d3c     84 00 90 FD | 	jmp	#LR__0164
01d40                 | LR__0161
01d40                 | '     long[@qosData][cog] := qos & !$1ff
01d40     FF 8B 26 F5 | 	andn	arg02, #511
01d44     C8 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #456
01d48     02 78 66 F0 | 	shl	_var01, #2
01d4c     37 79 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
01d50     3C 8B 62 FC | 	wrlong	arg02, _var01
01d54                 | '     mailbox := $7FF00 + drivercog*12
01d54     C8 6E 86 F1 | 	sub	ptr__psram_spin2_dat__, #200
01d58     37 7D 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
01d5c     3E 7F 02 F6 | 	mov	_var04, _var03
01d60     01 7E 66 F0 | 	shl	_var04, #1
01d64     3E 7F 02 F1 | 	add	_var04, _var03
01d68     02 7E 66 F0 | 	shl	_var04, #2
01d6c     FF 03 00 FF 
01d70     00 81 06 F6 | 	mov	_var05, ##524032
01d74     3F 81 02 F1 | 	add	_var05, _var04
01d78                 | '     repeat until LOCKTRY(driverlock)
01d78     04 6E 06 F1 | 	add	ptr__psram_spin2_dat__, #4
01d7c                 | LR__0162
01d7c     37 89 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
01d80     06 88 72 FD | 	locktry	arg01 wc
01d84     F4 FF 9F 3D |  if_ae	jmp	#LR__0162
01d88     04 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
01d8c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
01d8c     00 7E 06 F6 | 	mov	_var04, #0
01d90     01 7E 62 FD | 	cogid	_var04
01d94     00 00 78 FF 
01d98     00 7A 06 F6 | 	mov	_var02, ##-268435456
01d9c     3F 7B 02 F1 | 	add	_var02, _var04
01da0     40 7B 62 FC | 	wrlong	_var02, _var05
01da4                 | '     repeat while long[mailbox] < 0
01da4                 | LR__0163
01da4     40 7B 02 FB | 	rdlong	_var02, _var05
01da8     00 7A 56 F2 | 	cmps	_var02, #0 wc
01dac     F4 FF 9F CD |  if_b	jmp	#LR__0163
01db0                 | '     LOCKREL(driverlock)
01db0     04 6F 06 F1 | 	add	ptr__psram_spin2_dat__, #260
01db4     37 89 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
01db8     04 6F 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
01dbc     07 88 72 FD | 	lockrel	arg01 wc
01dc0     00 72 06 F6 | 	mov	result1, #0
01dc4                 | LR__0164
01dc4                 | _psram_spin2_setQos_ret
01dc4     2D 00 64 FD | 	ret
01dc8                 | 
01dc8                 | ' 
01dc8                 | ' '..............................................................................
01dc8                 | ' 
01dc8                 | ' {{
01dc8                 | ' }}
01dc8                 | ' PRI lookupDelay(freq) : delay | profile
01dc8                 | _psram_spin2_lookupDelay
01dc8                 | '     profile := @delayTable
01dc8     37 79 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
01dcc     08 79 06 F1 | 	add	_var01, #264
01dd0                 | '     delay := long[profile][0]
01dd0     3C 7B 02 FB | 	rdlong	_var02, _var01
01dd4     D7 16 48 FB | 	callpa	#(@LR__0171-@LR__0170)>>2,fcache_load_ptr_
01dd8                 | '     repeat while long[profile][1] 
01dd8                 | LR__0170
01dd8     04 78 06 F1 | 	add	_var01, #4
01ddc     3C 73 0A FB | 	rdlong	result1, _var01 wz
01de0     04 78 86 F1 | 	sub	_var01, #4
01de4     1C 00 90 AD |  if_e	jmp	#LR__0172
01de8                 | '         if freq +< long[profile][1] 
01de8     04 78 06 F1 | 	add	_var01, #4
01dec     3C 73 02 FB | 	rdlong	result1, _var01
01df0     04 78 86 F1 | 	sub	_var01, #4
01df4     39 89 12 F2 | 	cmp	arg01, result1 wc
01df8                 | '             quit
01df8                 | '         profile += 4
01df8     04 78 06 31 |  if_ae	add	_var01, #4
01dfc                 | '         delay++
01dfc     01 7A 06 31 |  if_ae	add	_var02, #1
01e00     D4 FF 9F 3D |  if_ae	jmp	#LR__0170
01e04                 | LR__0171
01e04                 | LR__0172
01e04     3D 73 02 F6 | 	mov	result1, _var02
01e08                 | _psram_spin2_lookupDelay_ret
01e08     2D 00 64 FD | 	ret
01e0c                 | 
01e0c                 | _hello_b_program
01e0c     06 CA 05 F6 | 	mov	COUNT_, #6
01e10     E8 00 A0 FD | 	call	#pushregs_
01e14     00 92 06 F6 | 	mov	local01, #0
01e18     2F 89 02 F6 | 	mov	arg01, __sendreg
01e1c     00 8A 06 F6 | 	mov	arg02, #0
01e20     38 08 B0 FD | 	call	#__system___funcptr_cmp
01e24     00 72 0E F2 | 	cmp	result1, #0 wz
01e28     33 5F 02 A6 |  if_e	mov	__sendreg, objptr
01e2c     2E 89 02 F6 | 	mov	arg01, __recvreg
01e30     00 8A 06 F6 | 	mov	arg02, #0
01e34     24 08 B0 FD | 	call	#__system___funcptr_cmp
01e38     00 72 0E F2 | 	cmp	result1, #0 wz
01e3c     33 5D 02 A6 |  if_e	mov	__recvreg, objptr
01e40     14 8A C6 A9 |  if_e	decod	arg02, #20
01e44     14 5C 26 A4 |  if_e	bith	__recvreg, #20
01e48     49 95 02 F6 | 	mov	local02, local01
01e4c     33 95 02 F1 | 	add	local02, objptr
01e50     49 97 02 F6 | 	mov	local03, local01
01e54     33 97 02 F1 | 	add	local03, objptr
01e58     4B 99 C2 FA | 	rdbyte	local04, local03
01e5c     08 98 06 F1 | 	add	local04, #8
01e60     4A 99 42 FC | 	wrbyte	local04, local02
01e64     49 9B 02 F6 | 	mov	local05, local01
01e68     33 9B 02 F1 | 	add	local05, objptr
01e6c     4D 9D CA FA | 	rdbyte	local06, local05 wz
01e70     E8 01 90 AD |  if_e	jmp	#LR__0186
01e74     D7 F2 48 FB | 	callpa	#(@LR__0185-@LR__0180)>>2,fcache_load_ptr_
01e78                 | LR__0180
01e78     01 92 06 F1 | 	add	local01, #1
01e7c     0E 92 46 F7 | 	zerox	local01, #14
01e80     49 95 02 F6 | 	mov	local02, local01
01e84     33 95 02 F1 | 	add	local02, objptr
01e88     49 97 02 F6 | 	mov	local03, local01
01e8c     33 97 02 F1 | 	add	local03, objptr
01e90     4B 99 C2 FA | 	rdbyte	local04, local03
01e94     04 98 06 F1 | 	add	local04, #4
01e98     4A 99 42 FC | 	wrbyte	local04, local02
01e9c     49 9B 02 F6 | 	mov	local05, local01
01ea0     33 9B 02 F1 | 	add	local05, objptr
01ea4     4D 9D CA FA | 	rdbyte	local06, local05 wz
01ea8     C4 00 90 AD |  if_e	jmp	#LR__0182
01eac                 | LR__0181
01eac     01 92 06 F1 | 	add	local01, #1
01eb0     0E 92 46 F7 | 	zerox	local01, #14
01eb4     49 95 02 F6 | 	mov	local02, local01
01eb8     33 95 02 F1 | 	add	local02, objptr
01ebc     49 97 02 F6 | 	mov	local03, local01
01ec0     33 97 02 F1 | 	add	local03, objptr
01ec4     4B 99 C2 FA | 	rdbyte	local04, local03
01ec8     02 98 06 F1 | 	add	local04, #2
01ecc     4A 99 42 FC | 	wrbyte	local04, local02
01ed0     01 92 06 F1 | 	add	local01, #1
01ed4     0E 92 46 F7 | 	zerox	local01, #14
01ed8     49 95 02 F6 | 	mov	local02, local01
01edc     33 95 02 F1 | 	add	local02, objptr
01ee0     49 97 02 F6 | 	mov	local03, local01
01ee4     33 97 02 F1 | 	add	local03, objptr
01ee8     4B 99 C2 FA | 	rdbyte	local04, local03
01eec     03 98 06 F1 | 	add	local04, #3
01ef0     4A 99 42 FC | 	wrbyte	local04, local02
01ef4     01 92 06 F1 | 	add	local01, #1
01ef8     0E 92 46 F7 | 	zerox	local01, #14
01efc     49 95 02 F6 | 	mov	local02, local01
01f00     33 95 02 F1 | 	add	local02, objptr
01f04     49 97 02 F6 | 	mov	local03, local01
01f08     33 97 02 F1 | 	add	local03, objptr
01f0c     4B 99 C2 FA | 	rdbyte	local04, local03
01f10     03 98 06 F1 | 	add	local04, #3
01f14     4A 99 42 FC | 	wrbyte	local04, local02
01f18     01 92 06 F1 | 	add	local01, #1
01f1c     0E 92 46 F7 | 	zerox	local01, #14
01f20     49 95 02 F6 | 	mov	local02, local01
01f24     33 95 02 F1 | 	add	local02, objptr
01f28     49 97 02 F6 | 	mov	local03, local01
01f2c     33 97 02 F1 | 	add	local03, objptr
01f30     4B 99 C2 FA | 	rdbyte	local04, local03
01f34     01 98 06 F1 | 	add	local04, #1
01f38     4A 99 42 FC | 	wrbyte	local04, local02
01f3c     04 92 86 F1 | 	sub	local01, #4
01f40     0E 92 46 F7 | 	zerox	local01, #14
01f44     49 95 02 F6 | 	mov	local02, local01
01f48     33 95 02 F1 | 	add	local02, objptr
01f4c     49 97 02 F6 | 	mov	local03, local01
01f50     33 97 02 F1 | 	add	local03, objptr
01f54     4B 99 C2 FA | 	rdbyte	local04, local03
01f58     01 98 86 F1 | 	sub	local04, #1
01f5c     4A 99 42 FC | 	wrbyte	local04, local02
01f60     49 9B 02 F6 | 	mov	local05, local01
01f64     33 9B 02 F1 | 	add	local05, objptr
01f68     4D 9D CA FA | 	rdbyte	local06, local05 wz
01f6c     3C FF 9F 5D |  if_ne	jmp	#LR__0181
01f70                 | LR__0182
01f70     01 92 06 F1 | 	add	local01, #1
01f74     0E 92 46 F7 | 	zerox	local01, #14
01f78     49 95 02 F6 | 	mov	local02, local01
01f7c     33 95 02 F1 | 	add	local02, objptr
01f80     49 97 02 F6 | 	mov	local03, local01
01f84     33 97 02 F1 | 	add	local03, objptr
01f88     4B 99 C2 FA | 	rdbyte	local04, local03
01f8c     01 98 06 F1 | 	add	local04, #1
01f90     4A 99 42 FC | 	wrbyte	local04, local02
01f94     01 92 06 F1 | 	add	local01, #1
01f98     0E 92 46 F7 | 	zerox	local01, #14
01f9c     49 95 02 F6 | 	mov	local02, local01
01fa0     33 95 02 F1 | 	add	local02, objptr
01fa4     49 97 02 F6 | 	mov	local03, local01
01fa8     33 97 02 F1 | 	add	local03, objptr
01fac     4B 99 C2 FA | 	rdbyte	local04, local03
01fb0     01 98 06 F1 | 	add	local04, #1
01fb4     4A 99 42 FC | 	wrbyte	local04, local02
01fb8     01 92 06 F1 | 	add	local01, #1
01fbc     0E 92 46 F7 | 	zerox	local01, #14
01fc0     49 95 02 F6 | 	mov	local02, local01
01fc4     33 95 02 F1 | 	add	local02, objptr
01fc8     49 97 02 F6 | 	mov	local03, local01
01fcc     33 97 02 F1 | 	add	local03, objptr
01fd0     4B 99 C2 FA | 	rdbyte	local04, local03
01fd4     01 98 86 F1 | 	sub	local04, #1
01fd8     4A 99 42 FC | 	wrbyte	local04, local02
01fdc     02 92 06 F1 | 	add	local01, #2
01fe0     0E 92 46 F7 | 	zerox	local01, #14
01fe4     49 95 02 F6 | 	mov	local02, local01
01fe8     33 95 02 F1 | 	add	local02, objptr
01fec     49 97 02 F6 | 	mov	local03, local01
01ff0     33 97 02 F1 | 	add	local03, objptr
01ff4     4B 99 C2 FA | 	rdbyte	local04, local03
01ff8     01 98 06 F1 | 	add	local04, #1
01ffc     4A 99 42 FC | 	wrbyte	local04, local02
02000     49 9B 02 F6 | 	mov	local05, local01
02004     33 9B 02 F1 | 	add	local05, objptr
02008     4D 9D CA FA | 	rdbyte	local06, local05 wz
0200c     18 00 90 AD |  if_e	jmp	#LR__0184
02010                 | LR__0183
02010     01 92 86 F1 | 	sub	local01, #1
02014     0E 92 46 F7 | 	zerox	local01, #14
02018     49 9B 02 F6 | 	mov	local05, local01
0201c     33 9B 02 F1 | 	add	local05, objptr
02020     4D 9D CA FA | 	rdbyte	local06, local05 wz
02024     E8 FF 9F 5D |  if_ne	jmp	#LR__0183
02028                 | LR__0184
02028     01 92 86 F1 | 	sub	local01, #1
0202c     0E 92 46 F7 | 	zerox	local01, #14
02030     49 95 02 F6 | 	mov	local02, local01
02034     33 95 02 F1 | 	add	local02, objptr
02038     49 97 02 F6 | 	mov	local03, local01
0203c     33 97 02 F1 | 	add	local03, objptr
02040     4B 99 C2 FA | 	rdbyte	local04, local03
02044     01 98 86 F1 | 	sub	local04, #1
02048     4A 99 42 FC | 	wrbyte	local04, local02
0204c     49 9B 02 F6 | 	mov	local05, local01
02050     33 9B 02 F1 | 	add	local05, objptr
02054     4D 9D CA FA | 	rdbyte	local06, local05 wz
02058     1C FE 9F 5D |  if_ne	jmp	#LR__0180
0205c                 | LR__0185
0205c                 | LR__0186
0205c     02 92 06 F1 | 	add	local01, #2
02060     0E 92 46 F7 | 	zerox	local01, #14
02064     2F 95 02 F6 | 	mov	local02, __sendreg
02068     2F 9B 02 F6 | 	mov	local05, __sendreg
0206c     13 94 46 F7 | 	zerox	local02, #19
02070     14 9A 46 F0 | 	shr	local05, #20
02074     02 9A 66 F0 | 	shl	local05, #2
02078     2D 9B 02 F1 | 	add	local05, __methods__
0207c     4D 9B 02 FB | 	rdlong	local05, local05
02080     49 9D 02 F6 | 	mov	local06, local01
02084     33 9D 02 F1 | 	add	local06, objptr
02088     4E 89 C2 FA | 	rdbyte	arg01, local06
0208c     33 9D 02 F6 | 	mov	local06, objptr
02090     4A 67 02 F6 | 	mov	objptr, local02
02094     2D 9A 62 FD | 	call	local05
02098     01 92 06 F1 | 	add	local01, #1
0209c     0E 92 46 F7 | 	zerox	local01, #14
020a0     49 95 02 F6 | 	mov	local02, local01
020a4     4E 95 02 F1 | 	add	local02, local06
020a8     49 97 02 F6 | 	mov	local03, local01
020ac     4E 97 02 F1 | 	add	local03, local06
020b0     4B 99 C2 FA | 	rdbyte	local04, local03
020b4     03 98 86 F1 | 	sub	local04, #3
020b8     4A 99 42 FC | 	wrbyte	local04, local02
020bc     2F 67 02 F6 | 	mov	objptr, __sendreg
020c0     2F 9B 02 F6 | 	mov	local05, __sendreg
020c4     13 66 46 F7 | 	zerox	objptr, #19
020c8     14 9A 46 F0 | 	shr	local05, #20
020cc     02 9A 66 F0 | 	shl	local05, #2
020d0     2D 9B 02 F1 | 	add	local05, __methods__
020d4     4D 9B 02 FB | 	rdlong	local05, local05
020d8     49 99 02 F6 | 	mov	local04, local01
020dc     4E 99 02 F1 | 	add	local04, local06
020e0     4C 89 C2 FA | 	rdbyte	arg01, local04
020e4     2D 9A 62 FD | 	call	local05
020e8     49 95 02 F6 | 	mov	local02, local01
020ec     4E 95 02 F1 | 	add	local02, local06
020f0     49 97 02 F6 | 	mov	local03, local01
020f4     4E 97 02 F1 | 	add	local03, local06
020f8     4B 99 C2 FA | 	rdbyte	local04, local03
020fc     07 98 06 F1 | 	add	local04, #7
02100     4A 99 42 FC | 	wrbyte	local04, local02
02104     2F 67 02 F6 | 	mov	objptr, __sendreg
02108     2F 9B 02 F6 | 	mov	local05, __sendreg
0210c     13 66 46 F7 | 	zerox	objptr, #19
02110     14 9A 46 F0 | 	shr	local05, #20
02114     02 9A 66 F0 | 	shl	local05, #2
02118     2D 9B 02 F1 | 	add	local05, __methods__
0211c     4D 9B 02 FB | 	rdlong	local05, local05
02120     49 99 02 F6 | 	mov	local04, local01
02124     4E 99 02 F1 | 	add	local04, local06
02128     4C 89 C2 FA | 	rdbyte	arg01, local04
0212c     2D 9A 62 FD | 	call	local05
02130     2F 67 02 F6 | 	mov	objptr, __sendreg
02134     2F 9B 02 F6 | 	mov	local05, __sendreg
02138     13 66 46 F7 | 	zerox	objptr, #19
0213c     14 9A 46 F0 | 	shr	local05, #20
02140     02 9A 66 F0 | 	shl	local05, #2
02144     2D 9B 02 F1 | 	add	local05, __methods__
02148     4D 9B 02 FB | 	rdlong	local05, local05
0214c     49 99 02 F6 | 	mov	local04, local01
02150     4E 99 02 F1 | 	add	local04, local06
02154     4C 89 C2 FA | 	rdbyte	arg01, local04
02158     2D 9A 62 FD | 	call	local05
0215c     49 95 02 F6 | 	mov	local02, local01
02160     4E 95 02 F1 | 	add	local02, local06
02164     49 97 02 F6 | 	mov	local03, local01
02168     4E 97 02 F1 | 	add	local03, local06
0216c     4B 99 C2 FA | 	rdbyte	local04, local03
02170     03 98 06 F1 | 	add	local04, #3
02174     4A 99 42 FC | 	wrbyte	local04, local02
02178     2F 67 02 F6 | 	mov	objptr, __sendreg
0217c     2F 9B 02 F6 | 	mov	local05, __sendreg
02180     13 66 46 F7 | 	zerox	objptr, #19
02184     14 9A 46 F0 | 	shr	local05, #20
02188     02 9A 66 F0 | 	shl	local05, #2
0218c     2D 9B 02 F1 | 	add	local05, __methods__
02190     4D 9B 02 FB | 	rdlong	local05, local05
02194     49 99 02 F6 | 	mov	local04, local01
02198     4E 99 02 F1 | 	add	local04, local06
0219c     4C 89 C2 FA | 	rdbyte	arg01, local04
021a0     2D 9A 62 FD | 	call	local05
021a4     02 92 06 F1 | 	add	local01, #2
021a8     0E 92 46 F7 | 	zerox	local01, #14
021ac     2F 67 02 F6 | 	mov	objptr, __sendreg
021b0     2F 9B 02 F6 | 	mov	local05, __sendreg
021b4     13 66 46 F7 | 	zerox	objptr, #19
021b8     14 9A 46 F0 | 	shr	local05, #20
021bc     02 9A 66 F0 | 	shl	local05, #2
021c0     2D 9B 02 F1 | 	add	local05, __methods__
021c4     4D 9B 02 FB | 	rdlong	local05, local05
021c8     49 99 02 F6 | 	mov	local04, local01
021cc     4E 99 02 F1 | 	add	local04, local06
021d0     4C 89 C2 FA | 	rdbyte	arg01, local04
021d4     2D 9A 62 FD | 	call	local05
021d8     01 92 86 F1 | 	sub	local01, #1
021dc     0E 92 46 F7 | 	zerox	local01, #14
021e0     49 95 02 F6 | 	mov	local02, local01
021e4     4E 95 02 F1 | 	add	local02, local06
021e8     49 97 02 F6 | 	mov	local03, local01
021ec     4E 97 02 F1 | 	add	local03, local06
021f0     4B 99 C2 FA | 	rdbyte	local04, local03
021f4     01 98 86 F1 | 	sub	local04, #1
021f8     4A 99 42 FC | 	wrbyte	local04, local02
021fc     2F 67 02 F6 | 	mov	objptr, __sendreg
02200     2F 9B 02 F6 | 	mov	local05, __sendreg
02204     13 66 46 F7 | 	zerox	objptr, #19
02208     14 9A 46 F0 | 	shr	local05, #20
0220c     02 9A 66 F0 | 	shl	local05, #2
02210     2D 9B 02 F1 | 	add	local05, __methods__
02214     4D 9B 02 FB | 	rdlong	local05, local05
02218     49 99 02 F6 | 	mov	local04, local01
0221c     4E 99 02 F1 | 	add	local04, local06
02220     4C 89 C2 FA | 	rdbyte	arg01, local04
02224     2D 9A 62 FD | 	call	local05
02228     01 92 86 F1 | 	sub	local01, #1
0222c     0E 92 46 F7 | 	zerox	local01, #14
02230     2F 67 02 F6 | 	mov	objptr, __sendreg
02234     2F 9B 02 F6 | 	mov	local05, __sendreg
02238     13 66 46 F7 | 	zerox	objptr, #19
0223c     14 9A 46 F0 | 	shr	local05, #20
02240     02 9A 66 F0 | 	shl	local05, #2
02244     2D 9B 02 F1 | 	add	local05, __methods__
02248     4D 9B 02 FB | 	rdlong	local05, local05
0224c     49 99 02 F6 | 	mov	local04, local01
02250     4E 99 02 F1 | 	add	local04, local06
02254     4C 89 C2 FA | 	rdbyte	arg01, local04
02258     2D 9A 62 FD | 	call	local05
0225c     49 95 02 F6 | 	mov	local02, local01
02260     4E 95 02 F1 | 	add	local02, local06
02264     49 97 02 F6 | 	mov	local03, local01
02268     4E 97 02 F1 | 	add	local03, local06
0226c     4B 99 C2 FA | 	rdbyte	local04, local03
02270     03 98 06 F1 | 	add	local04, #3
02274     4A 99 42 FC | 	wrbyte	local04, local02
02278     2F 67 02 F6 | 	mov	objptr, __sendreg
0227c     2F 9B 02 F6 | 	mov	local05, __sendreg
02280     13 66 46 F7 | 	zerox	objptr, #19
02284     14 9A 46 F0 | 	shr	local05, #20
02288     02 9A 66 F0 | 	shl	local05, #2
0228c     2D 9B 02 F1 | 	add	local05, __methods__
02290     4D 9B 02 FB | 	rdlong	local05, local05
02294     49 99 02 F6 | 	mov	local04, local01
02298     4E 99 02 F1 | 	add	local04, local06
0229c     4C 89 C2 FA | 	rdbyte	arg01, local04
022a0     2D 9A 62 FD | 	call	local05
022a4     49 95 02 F6 | 	mov	local02, local01
022a8     4E 95 02 F1 | 	add	local02, local06
022ac     49 97 02 F6 | 	mov	local03, local01
022b0     4E 97 02 F1 | 	add	local03, local06
022b4     4B 99 C2 FA | 	rdbyte	local04, local03
022b8     06 98 86 F1 | 	sub	local04, #6
022bc     4A 99 42 FC | 	wrbyte	local04, local02
022c0     2F 67 02 F6 | 	mov	objptr, __sendreg
022c4     2F 9B 02 F6 | 	mov	local05, __sendreg
022c8     13 66 46 F7 | 	zerox	objptr, #19
022cc     14 9A 46 F0 | 	shr	local05, #20
022d0     02 9A 66 F0 | 	shl	local05, #2
022d4     2D 9B 02 F1 | 	add	local05, __methods__
022d8     4D 9B 02 FB | 	rdlong	local05, local05
022dc     49 99 02 F6 | 	mov	local04, local01
022e0     4E 99 02 F1 | 	add	local04, local06
022e4     4C 89 C2 FA | 	rdbyte	arg01, local04
022e8     2D 9A 62 FD | 	call	local05
022ec     49 95 02 F6 | 	mov	local02, local01
022f0     4E 95 02 F1 | 	add	local02, local06
022f4     49 97 02 F6 | 	mov	local03, local01
022f8     4E 97 02 F1 | 	add	local03, local06
022fc     4B 99 C2 FA | 	rdbyte	local04, local03
02300     08 98 86 F1 | 	sub	local04, #8
02304     4A 99 42 FC | 	wrbyte	local04, local02
02308     2F 67 02 F6 | 	mov	objptr, __sendreg
0230c     2F 9B 02 F6 | 	mov	local05, __sendreg
02310     13 66 46 F7 | 	zerox	objptr, #19
02314     14 9A 46 F0 | 	shr	local05, #20
02318     02 9A 66 F0 | 	shl	local05, #2
0231c     2D 9B 02 F1 | 	add	local05, __methods__
02320     4D 9B 02 FB | 	rdlong	local05, local05
02324     49 99 02 F6 | 	mov	local04, local01
02328     4E 99 02 F1 | 	add	local04, local06
0232c     4C 89 C2 FA | 	rdbyte	arg01, local04
02330     2D 9A 62 FD | 	call	local05
02334     02 92 06 F1 | 	add	local01, #2
02338     0E 92 46 F7 | 	zerox	local01, #14
0233c     49 95 02 F6 | 	mov	local02, local01
02340     4E 95 02 F1 | 	add	local02, local06
02344     49 97 02 F6 | 	mov	local03, local01
02348     4E 97 02 F1 | 	add	local03, local06
0234c     4B 99 C2 FA | 	rdbyte	local04, local03
02350     01 98 06 F1 | 	add	local04, #1
02354     4A 99 42 FC | 	wrbyte	local04, local02
02358     2F 67 02 F6 | 	mov	objptr, __sendreg
0235c     2F 9B 02 F6 | 	mov	local05, __sendreg
02360     13 66 46 F7 | 	zerox	objptr, #19
02364     14 9A 46 F0 | 	shr	local05, #20
02368     02 9A 66 F0 | 	shl	local05, #2
0236c     2D 9B 02 F1 | 	add	local05, __methods__
02370     4D 9B 02 FB | 	rdlong	local05, local05
02374     49 99 02 F6 | 	mov	local04, local01
02378     4E 99 02 F1 | 	add	local04, local06
0237c     4C 89 C2 FA | 	rdbyte	arg01, local04
02380     2D 9A 62 FD | 	call	local05
02384     01 92 06 F1 | 	add	local01, #1
02388     0E 92 46 F7 | 	zerox	local01, #14
0238c     49 95 02 F6 | 	mov	local02, local01
02390     4E 95 02 F1 | 	add	local02, local06
02394     49 97 02 F6 | 	mov	local03, local01
02398     4E 97 02 F1 | 	add	local03, local06
0239c     4B 99 C2 FA | 	rdbyte	local04, local03
023a0     02 98 06 F1 | 	add	local04, #2
023a4     4A 99 42 FC | 	wrbyte	local04, local02
023a8     2F 67 02 F6 | 	mov	objptr, __sendreg
023ac     2F 9B 02 F6 | 	mov	local05, __sendreg
023b0     13 66 46 F7 | 	zerox	objptr, #19
023b4     14 9A 46 F0 | 	shr	local05, #20
023b8     02 9A 66 F0 | 	shl	local05, #2
023bc     2D 9B 02 F1 | 	add	local05, __methods__
023c0     4D 9B 02 FB | 	rdlong	local05, local05
023c4     4E 93 02 F1 | 	add	local01, local06
023c8     49 89 C2 FA | 	rdbyte	arg01, local01
023cc     2D 9A 62 FD | 	call	local05
023d0     4E 67 02 F6 | 	mov	objptr, local06
023d4     E7 F0 03 F6 | 	mov	ptra, fp
023d8     F2 00 A0 FD | 	call	#popregs_
023dc                 | _hello_b_program_ret
023dc     2D 00 64 FD | 	ret
023e0                 | hubexit
023e0     C1 00 80 FD | 	jmp	#cogexit
023e4                 | 
023e4                 | __system___setbaud
023e4     14 AC 06 FB | 	rdlong	muldiva_, #20
023e8     44 AF 02 F6 | 	mov	muldivb_, arg01
023ec     FA 00 A0 FD | 	call	#divide_
023f0     D7 06 48 FB | 	callpa	#(@LR__0191-@LR__0190)>>2,fcache_load_ptr_
023f4                 | LR__0190
023f4     3E 72 9E FA | 	rdpin	result1, #62 wc
023f8     3A 75 A2 F1 | 	subx	result2, result2
023fc     F4 FF 9F CD |  if_b	jmp	#LR__0190
02400                 | LR__0191
02400     40 7C 64 FD | 	dirl	#62
02404     40 7E 64 FD | 	dirl	#63
02408     34 AF 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0240c     10 AE 66 F0 | 	shl	muldivb_, #16
02410     07 8A 06 F6 | 	mov	arg02, #7
02414     57 8B 02 F1 | 	add	arg02, muldivb_
02418     3E F8 0C FC | 	wrpin	#124, #62
0241c     3E 8A 16 FC | 	wxpin	arg02, #62
02420     3F 7C 0C FC | 	wrpin	#62, #63
02424     14 8A 06 F1 | 	add	arg02, #20
02428     3F 8A 16 FC | 	wxpin	arg02, #63
0242c     41 7C 64 FD | 	dirh	#62
02430     41 7E 64 FD | 	dirh	#63
02434                 | __system___setbaud_ret
02434     2D 00 64 FD | 	ret
02438                 | 
02438                 | __system___txraw
02438     01 CA 05 F6 | 	mov	COUNT_, #1
0243c     E8 00 A0 FD | 	call	#pushregs_
02440     44 93 02 F6 | 	mov	local01, arg01
02444     D7 06 48 FB | 	callpa	#(@LR__0201-@LR__0200)>>2,fcache_load_ptr_
02448                 | LR__0200
02448     3E 72 9E FA | 	rdpin	result1, #62 wc
0244c     3A 75 A2 F1 | 	subx	result2, result2
02450     F4 FF 9F CD |  if_b	jmp	#LR__0200
02454                 | LR__0201
02454     34 73 0A FB | 	rdlong	result1, ptr___system__dat__ wz
02458     42 0F 00 AF 
0245c     80 88 06 A6 |  if_e	mov	arg01, ##2000000
02460     80 FF BF AD |  if_e	call	#__system___setbaud
02464     58 7C 64 FD | 	drvl	#62
02468     3E 92 26 FC | 	wypin	local01, #62
0246c     01 72 06 F6 | 	mov	result1, #1
02470     E7 F0 03 F6 | 	mov	ptra, fp
02474     F2 00 A0 FD | 	call	#popregs_
02478                 | __system___txraw_ret
02478     2D 00 64 FD | 	ret
0247c                 | 
0247c                 | __system___rxraw
0247c     0D CA 05 F6 | 	mov	COUNT_, #13
02480     E8 00 A0 FD | 	call	#pushregs_
02484     44 93 02 F6 | 	mov	local01, arg01
02488     34 95 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0248c     42 0F 00 AF 
02490     80 88 06 A6 |  if_e	mov	arg01, ##2000000
02494     4C FF BF AD |  if_e	call	#__system___setbaud
02498     00 92 0E F2 | 	cmp	local01, #0 wz
0249c     20 00 90 AD |  if_e	jmp	#LR__0210
024a0     14 96 06 FB | 	rdlong	local03, #20
024a4     0A 96 46 F0 | 	shr	local03, #10
024a8     4B 93 02 FD | 	qmul	local01, local03
024ac     1A 72 62 FD | 	getct	result1
024b0     18 98 62 FD | 	getqx	local04
024b4     4C 73 02 F1 | 	add	result1, local04
024b8     39 9B 02 F6 | 	mov	local05, result1
024bc     04 00 90 FD | 	jmp	#LR__0211
024c0                 | LR__0210
024c0     00 9A 06 F6 | 	mov	local05, #0
024c4                 | LR__0211
024c4     01 9C 66 F6 | 	neg	local06, #1
024c8     3F 9E 06 F6 | 	mov	local07, #63
024cc     00 A0 06 F6 | 	mov	local08, #0
024d0     04 68 06 F1 | 	add	ptr___system__dat__, #4
024d4     34 A3 02 FB | 	rdlong	local09, ptr___system__dat__
024d8     04 68 86 F1 | 	sub	ptr___system__dat__, #4
024dc                 | LR__0212
024dc     08 A2 16 F4 | 	testb	local09, #8 wc
024e0     09 A2 76 F4 | 	testbn	local09, #9 andc
024e4     0A A2 46 F0 | 	shr	local09, #10
024e8     01 A0 06 C6 |  if_b	mov	local08, #1
024ec     40 7E 6C 3D |  if_ae	testp	#63 wz
024f0     01 A0 06 26 |  if_nc_and_z	mov	local08, #1
024f4     3F A2 8E 2A |  if_nc_and_z	rdpin	local09, #63
024f8     04 A2 46 20 |  if_nc_and_z	shr	local09, #4
024fc                 | LR__0213
024fc     00 94 06 F6 | 	mov	local02, #0
02500     00 A0 0E F2 | 	cmp	local08, #0 wz
02504     01 94 66 56 |  if_ne	neg	local02, #1
02508     00 A4 06 F6 | 	mov	local10, #0
0250c     00 96 06 F6 | 	mov	local03, #0
02510     00 92 0E F2 | 	cmp	local01, #0 wz
02514     01 96 66 56 |  if_ne	neg	local03, #1
02518     00 98 06 F6 | 	mov	local04, #0
0251c     00 A6 06 F6 | 	mov	local11, #0
02520     4D A9 02 F6 | 	mov	local12, local05
02524     1A 72 62 FD | 	getct	result1
02528     39 AB 02 F6 | 	mov	local13, result1
0252c     55 A9 82 F1 | 	sub	local12, local13
02530     00 A8 56 F2 | 	cmps	local12, #0 wc
02534     00 A6 26 C6 |  if_b	not	local11, #0
02538     00 A6 0E F2 | 	cmp	local11, #0 wz
0253c     00 98 26 56 |  if_ne	not	local04, #0
02540     4C 97 CA F7 | 	test	local03, local04 wz
02544     00 A4 26 56 |  if_ne	not	local10, #0
02548     52 95 4A F5 | 	or	local02, local10 wz
0254c     8C FF 9F AD |  if_e	jmp	#LR__0212
02550     00 A0 0E F2 | 	cmp	local08, #0 wz
02554     51 9D 02 56 |  if_ne	mov	local06, local09
02558     4E 9D E2 58 |  if_ne	getbyte	local06, local06, #0
0255c     04 68 06 F1 | 	add	ptr___system__dat__, #4
02560     34 A3 62 FC | 	wrlong	local09, ptr___system__dat__
02564     04 68 86 F1 | 	sub	ptr___system__dat__, #4
02568     4E 73 02 F6 | 	mov	result1, local06
0256c     E7 F0 03 F6 | 	mov	ptra, fp
02570     F2 00 A0 FD | 	call	#popregs_
02574                 | __system___rxraw_ret
02574     2D 00 64 FD | 	ret
02578                 | 
02578                 | __system____builtin_memmove
02578     44 79 02 F6 | 	mov	_var01, arg01
0257c     45 89 52 F2 | 	cmps	arg01, arg02 wc
02580     10 00 90 CD |  if_b	jmp	#LR__0220
02584     45 7B 02 F6 | 	mov	_var02, arg02
02588     46 7B 02 F1 | 	add	_var02, arg03
0258c     3D 89 52 F2 | 	cmps	arg01, _var02 wc
02590     48 00 90 CD |  if_b	jmp	#LR__0226
02594                 | LR__0220
02594     46 7D 02 F6 | 	mov	_var03, arg03
02598     02 7C 4E F0 | 	shr	_var03, #2 wz
0259c     18 00 90 AD |  if_e	jmp	#LR__0225
025a0     D7 0A 48 FB | 	callpa	#(@LR__0223-@LR__0221)>>2,fcache_load_ptr_
025a4                 | LR__0221
025a4     3E 09 D8 FC | 	rep	@LR__0224, _var03
025a8                 | LR__0222
025a8     45 7D 02 FB | 	rdlong	_var03, arg02
025ac     44 7D 62 FC | 	wrlong	_var03, arg01
025b0     04 88 06 F1 | 	add	arg01, #4
025b4     04 8A 06 F1 | 	add	arg02, #4
025b8                 | LR__0223
025b8                 | LR__0224
025b8                 | LR__0225
025b8     02 8C CE F7 | 	test	arg03, #2 wz
025bc     45 7B E2 5A |  if_ne	rdword	_var02, arg02
025c0     44 7B 52 5C |  if_ne	wrword	_var02, arg01
025c4     02 88 06 51 |  if_ne	add	arg01, #2
025c8     02 8A 06 51 |  if_ne	add	arg02, #2
025cc     01 8C CE F7 | 	test	arg03, #1 wz
025d0     45 7B C2 5A |  if_ne	rdbyte	_var02, arg02
025d4     44 7B 42 5C |  if_ne	wrbyte	_var02, arg01
025d8     28 00 90 FD | 	jmp	#LR__0232
025dc                 | LR__0226
025dc     46 89 02 F1 | 	add	arg01, arg03
025e0     46 8B 02 F1 | 	add	arg02, arg03
025e4     46 7F 0A F6 | 	mov	_var04, arg03 wz
025e8     18 00 90 AD |  if_e	jmp	#LR__0231
025ec     D7 0A 48 FB | 	callpa	#(@LR__0229-@LR__0227)>>2,fcache_load_ptr_
025f0                 | LR__0227
025f0     3F 09 D8 FC | 	rep	@LR__0230, _var04
025f4                 | LR__0228
025f4     01 88 86 F1 | 	sub	arg01, #1
025f8     01 8A 86 F1 | 	sub	arg02, #1
025fc     45 7B C2 FA | 	rdbyte	_var02, arg02
02600     44 7B 42 FC | 	wrbyte	_var02, arg01
02604                 | LR__0229
02604                 | LR__0230
02604                 | LR__0231
02604                 | LR__0232
02604     3C 73 02 F6 | 	mov	result1, _var01
02608                 | __system____builtin_memmove_ret
02608     2D 00 64 FD | 	ret
0260c                 | 
0260c                 | __system____topofstack
0260c     00 CA 05 F6 | 	mov	COUNT_, #0
02610     E8 00 A0 FD | 	call	#pushregs_
02614     08 F0 07 F1 | 	add	ptra, #8
02618     04 CE 05 F1 | 	add	fp, #4
0261c     E7 88 62 FC | 	wrlong	arg01, fp
02620     E7 72 02 F6 | 	mov	result1, fp
02624     04 CE 85 F1 | 	sub	fp, #4
02628     E7 F0 03 F6 | 	mov	ptra, fp
0262c     F2 00 A0 FD | 	call	#popregs_
02630                 | __system____topofstack_ret
02630     2D 00 64 FD | 	ret
02634                 | 
02634                 | __system___lockmem
02634     00 72 06 F6 | 	mov	result1, #0
02638     01 72 62 FD | 	cogid	result1
0263c     00 73 06 F1 | 	add	result1, #256
02640                 | LR__0240
02640     44 79 0A FB | 	rdlong	_var01, arg01 wz
02644     44 73 62 AC |  if_e	wrlong	result1, arg01
02648     44 79 02 AB |  if_e	rdlong	_var01, arg01
0264c     44 79 02 AB |  if_e	rdlong	_var01, arg01
02650     39 79 0A F2 | 	cmp	_var01, result1 wz
02654     E8 FF 9F 5D |  if_ne	jmp	#LR__0240
02658                 | __system___lockmem_ret
02658     2D 00 64 FD | 	ret
0265c                 | 
0265c                 | __system___funcptr_cmp
0265c     44 73 02 FB | 	rdlong	result1, arg01
02660     45 79 02 FB | 	rdlong	_var01, arg02
02664     3C 73 8A F1 | 	sub	result1, _var01 wz
02668     04 88 06 A1 |  if_e	add	arg01, #4
0266c     44 73 02 AB |  if_e	rdlong	result1, arg01
02670     04 8A 06 A1 |  if_e	add	arg02, #4
02674     45 79 02 AB |  if_e	rdlong	_var01, arg02
02678     3C 73 82 A1 |  if_e	sub	result1, _var01
0267c                 | __system___funcptr_cmp_ret
0267c     2D 00 64 FD | 	ret
02680                 | 
02680                 | __system___tx
02680     02 CA 05 F6 | 	mov	COUNT_, #2
02684     E8 00 A0 FD | 	call	#pushregs_
02688     44 93 02 F6 | 	mov	local01, arg01
0268c     0A 92 0E F2 | 	cmp	local01, #10 wz
02690     18 00 90 5D |  if_ne	jmp	#LR__0250
02694     08 68 06 F1 | 	add	ptr___system__dat__, #8
02698     34 95 02 FB | 	rdlong	local02, ptr___system__dat__
0269c     08 68 86 F1 | 	sub	ptr___system__dat__, #8
026a0     02 94 CE F7 | 	test	local02, #2 wz
026a4     0D 88 06 56 |  if_ne	mov	arg01, #13
026a8     8C FD BF 5D |  if_ne	call	#__system___txraw
026ac                 | LR__0250
026ac     49 89 02 F6 | 	mov	arg01, local01
026b0     84 FD BF FD | 	call	#__system___txraw
026b4     E7 F0 03 F6 | 	mov	ptra, fp
026b8     F2 00 A0 FD | 	call	#popregs_
026bc                 | __system___tx_ret
026bc     2D 00 64 FD | 	ret
026c0                 | 
026c0                 | __system___rx
026c0     01 CA 05 F6 | 	mov	COUNT_, #1
026c4     E8 00 A0 FD | 	call	#pushregs_
026c8                 | LR__0260
026c8     00 88 06 F6 | 	mov	arg01, #0
026cc     AC FD BF FD | 	call	#__system___rxraw
026d0     39 93 02 F6 | 	mov	local01, result1
026d4     FF FF 7F FF 
026d8     FF 93 0E F2 | 	cmp	local01, ##-1 wz
026dc     E8 FF 9F AD |  if_e	jmp	#LR__0260
026e0     0D 92 0E F2 | 	cmp	local01, #13 wz
026e4     14 00 90 5D |  if_ne	jmp	#LR__0261
026e8     08 68 06 F1 | 	add	ptr___system__dat__, #8
026ec     34 73 02 FB | 	rdlong	result1, ptr___system__dat__
026f0     08 68 86 F1 | 	sub	ptr___system__dat__, #8
026f4     02 72 CE F7 | 	test	result1, #2 wz
026f8     0A 92 06 56 |  if_ne	mov	local01, #10
026fc                 | LR__0261
026fc     08 68 06 F1 | 	add	ptr___system__dat__, #8
02700     34 89 02 FB | 	rdlong	arg01, ptr___system__dat__
02704     08 68 86 F1 | 	sub	ptr___system__dat__, #8
02708     01 88 CE F7 | 	test	arg01, #1 wz
0270c     1C 00 90 AD |  if_e	jmp	#LR__0264
02710     7F 92 0E F2 | 	cmp	local01, #127 wz
02714     0C 00 90 5D |  if_ne	jmp	#LR__0262
02718     08 88 06 F6 | 	mov	arg01, #8
0271c     60 FF BF FD | 	call	#__system___tx
02720     08 00 90 FD | 	jmp	#LR__0263
02724                 | LR__0262
02724     49 89 02 F6 | 	mov	arg01, local01
02728     54 FF BF FD | 	call	#__system___tx
0272c                 | LR__0263
0272c                 | LR__0264
0272c     49 73 02 F6 | 	mov	result1, local01
02730     E7 F0 03 F6 | 	mov	ptra, fp
02734     F2 00 A0 FD | 	call	#popregs_
02738                 | __system___rx_ret
02738     2D 00 64 FD | 	ret
0273c                 | 
0273c                 | __system___waitms
0273c     44 79 02 F6 | 	mov	_var01, arg01
02740     1A 7A 62 FD | 	getct	_var02
02744     14 7C 06 FB | 	rdlong	_var03, #20
02748     D7 14 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
0274c                 | LR__0270
0274c     01 00 00 FF 
02750     E8 79 56 F2 | 	cmps	_var01, ##1000 wc
02754     1C 00 90 CD |  if_b	jmp	#LR__0272
02758     3E 7B 02 F1 | 	add	_var02, _var03
0275c     3D 89 02 F6 | 	mov	arg01, _var02
02760     00 88 66 FA | 	addct1	arg01, #0
02764     24 22 60 FD | 	waitct1
02768     01 00 00 FF 
0276c     E8 79 86 F1 | 	sub	_var01, ##1000
02770     D8 FF 9F FD | 	jmp	#LR__0270
02774                 | LR__0271
02774                 | LR__0272
02774     01 78 56 F2 | 	cmps	_var01, #1 wc
02778     28 00 90 CD |  if_b	jmp	#LR__0273
0277c     3E 79 02 FD | 	qmul	_var01, _var03
02780     01 00 00 FF 
02784     E8 8D 06 F6 | 	mov	arg03, ##1000
02788     19 72 62 FD | 	getqy	result1
0278c     18 88 62 FD | 	getqx	arg01
02790     28 72 62 FD | 	setq	result1
02794     46 89 12 FD | 	qdiv	arg01, arg03
02798     18 88 62 FD | 	getqx	arg01
0279c     3D 89 62 FA | 	addct1	arg01, _var02
027a0     24 22 60 FD | 	waitct1
027a4                 | LR__0273
027a4                 | __system___waitms_ret
027a4     2D 00 64 FD | 	ret
027a8                 | 
027a8                 | __system___waitus
027a8     44 79 02 F6 | 	mov	_var01, arg01
027ac     1A 7A 62 FD | 	getct	_var02
027b0     14 7C 06 FB | 	rdlong	_var03, #20
027b4     D7 14 48 FB | 	callpa	#(@LR__0281-@LR__0280)>>2,fcache_load_ptr_
027b8                 | LR__0280
027b8     A1 07 00 FF 
027bc     40 78 56 F2 | 	cmps	_var01, ##1000000 wc
027c0     1C 00 90 CD |  if_b	jmp	#LR__0282
027c4     3E 7B 02 F1 | 	add	_var02, _var03
027c8     3D 89 02 F6 | 	mov	arg01, _var02
027cc     00 88 66 FA | 	addct1	arg01, #0
027d0     24 22 60 FD | 	waitct1
027d4     A1 07 00 FF 
027d8     40 78 86 F1 | 	sub	_var01, ##1000000
027dc     D8 FF 9F FD | 	jmp	#LR__0280
027e0                 | LR__0281
027e0                 | LR__0282
027e0     01 78 56 F2 | 	cmps	_var01, #1 wc
027e4     28 00 90 CD |  if_b	jmp	#LR__0283
027e8     3E 79 02 FD | 	qmul	_var01, _var03
027ec     A1 07 00 FF 
027f0     40 8C 06 F6 | 	mov	arg03, ##1000000
027f4     19 72 62 FD | 	getqy	result1
027f8     18 88 62 FD | 	getqx	arg01
027fc     28 72 62 FD | 	setq	result1
02800     46 89 12 FD | 	qdiv	arg01, arg03
02804     18 72 62 FD | 	getqx	result1
02808     39 7B 62 FA | 	addct1	_var02, result1
0280c     24 22 60 FD | 	waitct1
02810                 | LR__0283
02810                 | __system___waitus_ret
02810     2D 00 64 FD | 	ret
02814                 | 
02814                 | __system___basic_open
02814     05 CA 05 F6 | 	mov	COUNT_, #5
02818     E8 00 A0 FD | 	call	#pushregs_
0281c     45 93 02 F6 | 	mov	local01, arg02
02820     46 95 02 F6 | 	mov	local02, arg03
02824     47 97 02 F6 | 	mov	local03, arg04
02828     00 98 06 F6 | 	mov	local04, #0
0282c     74 0E B0 FD | 	call	#__system____getftab
02830     39 9B 0A F6 | 	mov	local05, result1 wz
02834     18 00 90 5D |  if_ne	jmp	#LR__0290
02838     30 89 02 F6 | 	mov	arg01, abortchain
0283c     0C 8A 06 F6 | 	mov	arg02, #12
02840     01 8C 06 F6 | 	mov	arg03, #1
02844     1A 01 A0 FD | 	call	#__longjmp
02848     01 72 66 F6 | 	neg	result1, #1
0284c     10 01 90 FD | 	jmp	#LR__0299
02850                 | LR__0290
02850     08 9A 06 F1 | 	add	local05, #8
02854     4D 73 0A FB | 	rdlong	result1, local05 wz
02858     08 9A 86 F1 | 	sub	local05, #8
0285c     4D 89 02 56 |  if_ne	mov	arg01, local05
02860     A4 0A B0 5D |  if_ne	call	#__system___closeraw
02864     00 92 0E F2 | 	cmp	local01, #0 wz
02868     00 94 0E A2 |  if_e	cmp	local02, #0 wz
0286c     00 96 0E A2 |  if_e	cmp	local03, #0 wz
02870     3C 00 90 AD |  if_e	jmp	#LR__0292
02874     0C 88 06 F6 | 	mov	arg01, #12
02878     C8 04 B0 FD | 	call	#__system___gc_alloc_managed
0287c     39 99 0A F6 | 	mov	local04, result1 wz
02880     18 00 90 5D |  if_ne	jmp	#LR__0291
02884     30 89 02 F6 | 	mov	arg01, abortchain
02888     07 8A 06 F6 | 	mov	arg02, #7
0288c     01 8C 06 F6 | 	mov	arg03, #1
02890     1A 01 A0 FD | 	call	#__longjmp
02894     01 72 66 F6 | 	neg	result1, #1
02898     C4 00 90 FD | 	jmp	#LR__0299
0289c                 | LR__0291
0289c     4C 01 68 FC | 	wrlong	#0, local04
028a0     04 98 06 F1 | 	add	local04, #4
028a4     4C 01 68 FC | 	wrlong	#0, local04
028a8     04 98 86 F1 | 	sub	local04, #4
028ac     4D 99 62 FC | 	wrlong	local04, local05
028b0                 | LR__0292
028b0     00 92 0E F2 | 	cmp	local01, #0 wz
028b4     1C 00 90 AD |  if_e	jmp	#LR__0293
028b8     4C 93 62 FC | 	wrlong	local01, local04
028bc     4C 73 02 F6 | 	mov	result1, local04
028c0     34 72 26 F4 | 	bith	result1, #52
028c4     1C 9A 06 F1 | 	add	local05, #28
028c8     4D 73 62 FC | 	wrlong	result1, local05
028cc     1C 9A 86 F1 | 	sub	local05, #28
028d0     0C 00 90 FD | 	jmp	#LR__0294
028d4                 | LR__0293
028d4     1C 9A 06 F1 | 	add	local05, #28
028d8     4D 01 68 FC | 	wrlong	#0, local05
028dc     1C 9A 86 F1 | 	sub	local05, #28
028e0                 | LR__0294
028e0     00 94 0E F2 | 	cmp	local02, #0 wz
028e4     24 00 90 AD |  if_e	jmp	#LR__0295
028e8     04 98 06 F1 | 	add	local04, #4
028ec     4C 95 62 FC | 	wrlong	local02, local04
028f0     04 98 86 F1 | 	sub	local04, #4
028f4     4C 73 02 F6 | 	mov	result1, local04
028f8     16 72 26 F4 | 	bith	result1, #22
028fc     20 9A 06 F1 | 	add	local05, #32
02900     4D 73 62 FC | 	wrlong	result1, local05
02904     20 9A 86 F1 | 	sub	local05, #32
02908     0C 00 90 FD | 	jmp	#LR__0296
0290c                 | LR__0295
0290c     20 9A 06 F1 | 	add	local05, #32
02910     4D 01 68 FC | 	wrlong	#0, local05
02914     20 9A 86 F1 | 	sub	local05, #32
02918                 | LR__0296
02918     00 96 0E F2 | 	cmp	local03, #0 wz
0291c     24 00 90 AD |  if_e	jmp	#LR__0297
02920     08 98 06 F1 | 	add	local04, #8
02924     4C 97 62 FC | 	wrlong	local03, local04
02928     08 98 86 F1 | 	sub	local04, #8
0292c     00 28 00 FF 
02930     00 98 46 F5 | 	or	local04, ##5242880
02934     24 9A 06 F1 | 	add	local05, #36
02938     4D 99 62 FC | 	wrlong	local04, local05
0293c     24 9A 86 F1 | 	sub	local05, #36
02940     0C 00 90 FD | 	jmp	#LR__0298
02944                 | LR__0297
02944     24 9A 06 F1 | 	add	local05, #36
02948     4D 01 68 FC | 	wrlong	#0, local05
0294c     24 9A 86 F1 | 	sub	local05, #36
02950                 | LR__0298
02950     08 9A 06 F1 | 	add	local05, #8
02954     40 00 80 FF 
02958     4D 07 68 FC | 	wrlong	##32771, local05
0295c     00 72 06 F6 | 	mov	result1, #0
02960                 | LR__0299
02960     E7 F0 03 F6 | 	mov	ptra, fp
02964     F2 00 A0 FD | 	call	#popregs_
02968                 | __system___basic_open_ret
02968     2D 00 64 FD | 	ret
0296c                 | 
0296c                 | __system___basic_print_char
0296c     03 CA 05 F6 | 	mov	COUNT_, #3
02970     E8 00 A0 FD | 	call	#pushregs_
02974     45 93 02 F6 | 	mov	local01, arg02
02978     54 0E B0 FD | 	call	#__system___gettxfunc
0297c     39 95 0A F6 | 	mov	local02, result1 wz
02980     00 72 06 A6 |  if_e	mov	result1, #0
02984     30 00 90 AD |  if_e	jmp	#LR__0300
02988     4A 97 02 F6 | 	mov	local03, local02
0298c     13 94 46 F7 | 	zerox	local02, #19
02990     14 96 46 F0 | 	shr	local03, #20
02994     02 96 66 F0 | 	shl	local03, #2
02998     2D 97 02 F1 | 	add	local03, __methods__
0299c     4B 97 02 FB | 	rdlong	local03, local03
029a0     49 89 02 F6 | 	mov	arg01, local01
029a4     33 93 02 F6 | 	mov	local01, objptr
029a8     4A 67 02 F6 | 	mov	objptr, local02
029ac     2D 96 62 FD | 	call	local03
029b0     49 67 02 F6 | 	mov	objptr, local01
029b4     01 72 06 F6 | 	mov	result1, #1
029b8                 | LR__0300
029b8     E7 F0 03 F6 | 	mov	ptra, fp
029bc     F2 00 A0 FD | 	call	#popregs_
029c0                 | __system___basic_print_char_ret
029c0     2D 00 64 FD | 	ret
029c4                 | 
029c4                 | __system___basic_print_string
029c4     03 CA 05 F6 | 	mov	COUNT_, #3
029c8     E8 00 A0 FD | 	call	#pushregs_
029cc     45 93 02 F6 | 	mov	local01, arg02
029d0     46 95 02 F6 | 	mov	local02, arg03
029d4     F8 0D B0 FD | 	call	#__system___gettxfunc
029d8     39 97 0A F6 | 	mov	local03, result1 wz
029dc     00 72 06 A6 |  if_e	mov	result1, #0
029e0     18 00 90 AD |  if_e	jmp	#LR__0310
029e4     00 92 0E F2 | 	cmp	local01, #0 wz
029e8     00 72 06 A6 |  if_e	mov	result1, #0
029ec     4B 89 02 56 |  if_ne	mov	arg01, local03
029f0     4A 8B 02 56 |  if_ne	mov	arg02, local02
029f4     49 8D 02 56 |  if_ne	mov	arg03, local01
029f8     0C 00 B0 5D |  if_ne	call	#__system___fmtstr
029fc                 | LR__0310
029fc     E7 F0 03 F6 | 	mov	ptra, fp
02a00     F2 00 A0 FD | 	call	#popregs_
02a04                 | __system___basic_print_string_ret
02a04     2D 00 64 FD | 	ret
02a08                 | 
02a08                 | __system___fmtstr
02a08     09 CA 05 F6 | 	mov	COUNT_, #9
02a0c     E8 00 A0 FD | 	call	#pushregs_
02a10     44 93 02 F6 | 	mov	local01, arg01
02a14     45 95 02 F6 | 	mov	local02, arg02
02a18     46 97 02 F6 | 	mov	local03, arg03
02a1c     4A 8F E2 F8 | 	getbyte	arg04, local02, #0
02a20     4B 89 02 F6 | 	mov	arg01, local03
02a24     44 99 02 F6 | 	mov	local04, arg01
02a28     D7 06 48 FB | 	callpa	#(@LR__0321-@LR__0320)>>2,fcache_load_ptr_
02a2c                 | LR__0320
02a2c     4C 73 CA FA | 	rdbyte	result1, local04 wz
02a30     01 98 06 51 |  if_ne	add	local04, #1
02a34     F4 FF 9F 5D |  if_ne	jmp	#LR__0320
02a38                 | LR__0321
02a38     44 99 82 F1 | 	sub	local04, arg01
02a3c     00 8E 0E F2 | 	cmp	arg04, #0 wz
02a40     47 99 7A 53 |  if_ne	fles	local04, arg04 wcz
02a44     4A 8B 02 F6 | 	mov	arg02, local02
02a48     4C 8D 02 F6 | 	mov	arg03, local04
02a4c     49 89 02 F6 | 	mov	arg01, local01
02a50     02 8E 06 F6 | 	mov	arg04, #2
02a54     6C 0C B0 FD | 	call	#__system___fmtpad
02a58     39 9B 02 F6 | 	mov	local05, result1
02a5c     00 9A 56 F2 | 	cmps	local05, #0 wc
02a60     4D 73 02 C6 |  if_b	mov	result1, local05
02a64     80 00 90 CD |  if_b	jmp	#LR__0324
02a68     01 98 56 F2 | 	cmps	local04, #1 wc
02a6c     50 00 90 CD |  if_b	jmp	#LR__0323
02a70     4C 9D 02 F6 | 	mov	local06, local04
02a74                 | LR__0322
02a74     49 9F 02 F6 | 	mov	local07, local01
02a78     49 A1 02 F6 | 	mov	local08, local01
02a7c     13 9E 46 F7 | 	zerox	local07, #19
02a80     14 A0 46 F0 | 	shr	local08, #20
02a84     02 A0 66 F0 | 	shl	local08, #2
02a88     2D A1 02 F1 | 	add	local08, __methods__
02a8c     50 A1 02 FB | 	rdlong	local08, local08
02a90     4B 89 C2 FA | 	rdbyte	arg01, local03
02a94     33 A3 02 F6 | 	mov	local09, objptr
02a98     4F 67 02 F6 | 	mov	objptr, local07
02a9c     01 96 06 F1 | 	add	local03, #1
02aa0     2D A0 62 FD | 	call	local08
02aa4     51 67 02 F6 | 	mov	objptr, local09
02aa8     39 A3 02 F6 | 	mov	local09, result1
02aac     00 A2 56 F2 | 	cmps	local09, #0 wc
02ab0     51 73 02 C6 |  if_b	mov	result1, local09
02ab4     30 00 90 CD |  if_b	jmp	#LR__0324
02ab8     51 9B 02 F1 | 	add	local05, local09
02abc     ED 9D 6E FB | 	djnz	local06, #LR__0322
02ac0                 | LR__0323
02ac0     4A 8B 02 F6 | 	mov	arg02, local02
02ac4     4C 8D 02 F6 | 	mov	arg03, local04
02ac8     49 89 02 F6 | 	mov	arg01, local01
02acc     01 8E 06 F6 | 	mov	arg04, #1
02ad0     F0 0B B0 FD | 	call	#__system___fmtpad
02ad4     39 A3 02 F6 | 	mov	local09, result1
02ad8     00 A2 56 F2 | 	cmps	local09, #0 wc
02adc     51 73 02 C6 |  if_b	mov	result1, local09
02ae0     51 9B 02 31 |  if_ae	add	local05, local09
02ae4     4D 73 02 36 |  if_ae	mov	result1, local05
02ae8                 | LR__0324
02ae8     E7 F0 03 F6 | 	mov	ptra, fp
02aec     F2 00 A0 FD | 	call	#popregs_
02af0                 | __system___fmtstr_ret
02af0     2D 00 64 FD | 	ret
02af4                 | 
02af4                 | __system___gc_ptrs
02af4     2C 79 02 F6 | 	mov	_var01, __heap_ptr
02af8     3C 7B 02 F6 | 	mov	_var02, _var01
02afc     0B 00 00 FF 
02b00     68 7B 06 F1 | 	add	_var02, ##5992
02b04     3C 75 0A FB | 	rdlong	result2, _var01 wz
02b08     74 00 90 5D |  if_ne	jmp	#LR__0330
02b0c     3D 75 02 F6 | 	mov	result2, _var02
02b10     3C 75 82 F1 | 	sub	result2, _var01
02b14     3C 03 58 FC | 	wrword	#1, _var01
02b18     3C 73 02 F6 | 	mov	result1, _var01
02b1c     02 72 06 F1 | 	add	result1, #2
02b20     36 00 80 FF 
02b24     39 21 59 FC | 	wrword	##27792, result1
02b28     3C 73 02 F6 | 	mov	result1, _var01
02b2c     04 72 06 F1 | 	add	result1, #4
02b30     39 01 58 FC | 	wrword	#0, result1
02b34     3C 73 02 F6 | 	mov	result1, _var01
02b38     06 72 06 F1 | 	add	result1, #6
02b3c     39 03 58 FC | 	wrword	#1, result1
02b40     10 78 06 F1 | 	add	_var01, #16
02b44     3A 75 52 F6 | 	abs	result2, result2 wc
02b48     04 74 46 F0 | 	shr	result2, #4
02b4c     3A 75 82 F6 | 	negc	result2, result2
02b50     3C 75 52 FC | 	wrword	result2, _var01
02b54     3C 75 02 F6 | 	mov	result2, _var01
02b58     02 74 06 F1 | 	add	result2, #2
02b5c     36 00 80 FF 
02b60     3A 1F 59 FC | 	wrword	##27791, result2
02b64     3C 75 02 F6 | 	mov	result2, _var01
02b68     04 74 06 F1 | 	add	result2, #4
02b6c     3A 01 58 FC | 	wrword	#0, result2
02b70     3C 75 02 F6 | 	mov	result2, _var01
02b74     06 74 06 F1 | 	add	result2, #6
02b78     3A 01 58 FC | 	wrword	#0, result2
02b7c     10 78 86 F1 | 	sub	_var01, #16
02b80                 | LR__0330
02b80     3C 73 02 F6 | 	mov	result1, _var01
02b84     3D 75 02 F6 | 	mov	result2, _var02
02b88                 | __system___gc_ptrs_ret
02b88     2D 00 64 FD | 	ret
02b8c                 | 
02b8c                 | __system___gc_tryalloc
02b8c     0B CA 05 F6 | 	mov	COUNT_, #11
02b90     E8 00 A0 FD | 	call	#pushregs_
02b94     44 93 02 F6 | 	mov	local01, arg01
02b98     45 95 02 F6 | 	mov	local02, arg02
02b9c     54 FF BF FD | 	call	#__system___gc_ptrs
02ba0     39 97 02 F6 | 	mov	local03, result1
02ba4     3A 99 02 F6 | 	mov	local04, result2
02ba8     4B 9B 02 F6 | 	mov	local05, local03
02bac     00 9C 06 F6 | 	mov	local06, #0
02bb0     D7 1E 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
02bb4                 | LR__0340
02bb4     4D 9F 02 F6 | 	mov	local07, local05
02bb8     06 9A 06 F1 | 	add	local05, #6
02bbc     4D 8B EA FA | 	rdword	arg02, local05 wz
02bc0     4B 89 02 F6 | 	mov	arg01, local03
02bc4     00 72 06 A6 |  if_e	mov	result1, #0
02bc8     04 8A 66 50 |  if_ne	shl	arg02, #4
02bcc     45 89 02 51 |  if_ne	add	arg01, arg02
02bd0     44 73 02 56 |  if_ne	mov	result1, arg01
02bd4     39 9B 0A F6 | 	mov	local05, result1 wz
02bd8     4D 9D E2 5A |  if_ne	rdword	local06, local05
02bdc     00 9A 0E F2 | 	cmp	local05, #0 wz
02be0     4C 9B 52 52 |  if_ne	cmps	local05, local04 wc
02be4     08 00 90 1D |  if_a	jmp	#LR__0342
02be8     4E 93 5A 52 |  if_ne	cmps	local01, local06 wcz
02bec     C4 FF 9F 1D |  if_a	jmp	#LR__0340
02bf0                 | LR__0341
02bf0                 | LR__0342
02bf0     00 9A 0E F2 | 	cmp	local05, #0 wz
02bf4     4D 73 02 A6 |  if_e	mov	result1, local05
02bf8     3C 01 90 AD |  if_e	jmp	#LR__0345
02bfc     4D 75 02 F6 | 	mov	result2, local05
02c00     06 74 06 F1 | 	add	result2, #6
02c04     3A A1 E2 FA | 	rdword	local08, result2
02c08     4E 93 52 F2 | 	cmps	local01, local06 wc
02c0c     C0 00 90 3D |  if_ae	jmp	#LR__0344
02c10     4D 93 52 FC | 	wrword	local01, local05
02c14     4D 89 02 F6 | 	mov	arg01, local05
02c18     49 A1 02 F6 | 	mov	local08, local01
02c1c     04 A0 66 F0 | 	shl	local08, #4
02c20     50 89 02 F1 | 	add	arg01, local08
02c24     49 9D 82 F1 | 	sub	local06, local01
02c28     44 9D 52 FC | 	wrword	local06, arg01
02c2c     44 A1 02 F6 | 	mov	local08, arg01
02c30     02 A0 06 F1 | 	add	local08, #2
02c34     36 00 80 FF 
02c38     50 1F 59 FC | 	wrword	##27791, local08
02c3c     4D 8B 0A F6 | 	mov	arg02, local05 wz
02c40     00 72 06 A6 |  if_e	mov	result1, #0
02c44     4B 8B 82 51 |  if_ne	sub	arg02, local03
02c48     04 8A 46 50 |  if_ne	shr	arg02, #4
02c4c     45 73 02 56 |  if_ne	mov	result1, arg02
02c50     44 A1 02 F6 | 	mov	local08, arg01
02c54     04 A0 06 F1 | 	add	local08, #4
02c58     50 73 52 FC | 	wrword	result1, local08
02c5c     4D A1 02 F6 | 	mov	local08, local05
02c60     06 A0 06 F1 | 	add	local08, #6
02c64     44 8B 02 F6 | 	mov	arg02, arg01
02c68     50 A1 E2 FA | 	rdword	local08, local08
02c6c     06 8A 06 F1 | 	add	arg02, #6
02c70     45 A1 52 FC | 	wrword	local08, arg02
02c74     44 A3 02 F6 | 	mov	local09, arg01
02c78     51 8B 0A F6 | 	mov	arg02, local09 wz
02c7c     00 72 06 A6 |  if_e	mov	result1, #0
02c80     4B 8B 82 51 |  if_ne	sub	arg02, local03
02c84     04 8A 46 50 |  if_ne	shr	arg02, #4
02c88     45 73 02 56 |  if_ne	mov	result1, arg02
02c8c     39 A1 02 F6 | 	mov	local08, result1
02c90     44 A5 EA FA | 	rdword	local10, arg01 wz
02c94     00 72 06 A6 |  if_e	mov	result1, #0
02c98     04 A4 66 50 |  if_ne	shl	local10, #4
02c9c     52 89 02 51 |  if_ne	add	arg01, local10
02ca0     44 73 02 56 |  if_ne	mov	result1, arg01
02ca4     39 A7 0A F6 | 	mov	local11, result1 wz
02ca8     24 00 90 AD |  if_e	jmp	#LR__0343
02cac     4C A7 52 F2 | 	cmps	local11, local04 wc
02cb0     1C 00 90 3D |  if_ae	jmp	#LR__0343
02cb4     51 8B 0A F6 | 	mov	arg02, local09 wz
02cb8     00 72 06 A6 |  if_e	mov	result1, #0
02cbc     4B 8B 82 51 |  if_ne	sub	arg02, local03
02cc0     04 8A 46 50 |  if_ne	shr	arg02, #4
02cc4     45 73 02 56 |  if_ne	mov	result1, arg02
02cc8     04 A6 06 F1 | 	add	local11, #4
02ccc     53 73 52 FC | 	wrword	result1, local11
02cd0                 | LR__0343
02cd0                 | LR__0344
02cd0     06 9E 06 F1 | 	add	local07, #6
02cd4     4F A1 52 FC | 	wrword	local08, local07
02cd8     36 00 00 FF 
02cdc     80 A2 06 F6 | 	mov	local09, ##27776
02ce0     4A A3 42 F5 | 	or	local09, local02
02ce4     00 72 06 F6 | 	mov	result1, #0
02ce8     01 72 62 FD | 	cogid	result1
02cec     39 A3 42 F5 | 	or	local09, result1
02cf0     4D A7 02 F6 | 	mov	local11, local05
02cf4     02 A6 06 F1 | 	add	local11, #2
02cf8     53 A3 52 FC | 	wrword	local09, local11
02cfc     4B A3 02 F6 | 	mov	local09, local03
02d00     08 A2 06 F1 | 	add	local09, #8
02d04     4D A7 02 F6 | 	mov	local11, local05
02d08     51 A3 E2 FA | 	rdword	local09, local09
02d0c     06 A6 06 F1 | 	add	local11, #6
02d10     53 A3 52 FC | 	wrword	local09, local11
02d14     4D 8B 0A F6 | 	mov	arg02, local05 wz
02d18     00 72 06 A6 |  if_e	mov	result1, #0
02d1c     4B 8B 82 51 |  if_ne	sub	arg02, local03
02d20     04 8A 46 50 |  if_ne	shr	arg02, #4
02d24     45 73 02 56 |  if_ne	mov	result1, arg02
02d28     08 96 06 F1 | 	add	local03, #8
02d2c     4B 73 52 FC | 	wrword	result1, local03
02d30     08 9A 06 F1 | 	add	local05, #8
02d34     4D 73 02 F6 | 	mov	result1, local05
02d38                 | LR__0345
02d38     E7 F0 03 F6 | 	mov	ptra, fp
02d3c     F2 00 A0 FD | 	call	#popregs_
02d40                 | __system___gc_tryalloc_ret
02d40     2D 00 64 FD | 	ret
02d44                 | 
02d44                 | __system___gc_alloc_managed
02d44     01 CA 05 F6 | 	mov	COUNT_, #1
02d48     E8 00 A0 FD | 	call	#pushregs_
02d4c     44 93 02 F6 | 	mov	local01, arg01
02d50     00 8A 06 F6 | 	mov	arg02, #0
02d54     1C 00 B0 FD | 	call	#__system___gc_doalloc
02d58     39 8B 0A F6 | 	mov	arg02, result1 wz
02d5c     01 92 56 A2 |  if_e	cmps	local01, #1 wc
02d60     00 72 06 26 |  if_nc_and_z	mov	result1, #0
02d64     45 73 02 D6 |  if_c_or_nz	mov	result1, arg02
02d68     E7 F0 03 F6 | 	mov	ptra, fp
02d6c     F2 00 A0 FD | 	call	#popregs_
02d70                 | __system___gc_alloc_managed_ret
02d70     2D 00 64 FD | 	ret
02d74                 | 
02d74                 | __system___gc_doalloc
02d74     06 CA 05 F6 | 	mov	COUNT_, #6
02d78     E8 00 A0 FD | 	call	#pushregs_
02d7c     44 93 0A F6 | 	mov	local01, arg01 wz
02d80     45 95 02 F6 | 	mov	local02, arg02
02d84     00 72 06 A6 |  if_e	mov	result1, #0
02d88     84 00 90 AD |  if_e	jmp	#LR__0357
02d8c     17 92 06 F1 | 	add	local01, #23
02d90     0F 92 26 F5 | 	andn	local01, #15
02d94     04 92 46 F0 | 	shr	local01, #4
02d98     34 89 02 F6 | 	mov	arg01, ptr___system__dat__
02d9c     1C 88 06 F1 | 	add	arg01, #28
02da0     90 F8 BF FD | 	call	#__system___lockmem
02da4     49 89 02 F6 | 	mov	arg01, local01
02da8     4A 8B 02 F6 | 	mov	arg02, local02
02dac     DC FD BF FD | 	call	#__system___gc_tryalloc
02db0     39 97 0A F6 | 	mov	local03, result1 wz
02db4     14 00 90 5D |  if_ne	jmp	#LR__0350
02db8     24 03 B0 FD | 	call	#__system___gc_docollect
02dbc     49 89 02 F6 | 	mov	arg01, local01
02dc0     4A 8B 02 F6 | 	mov	arg02, local02
02dc4     C4 FD BF FD | 	call	#__system___gc_tryalloc
02dc8     39 97 02 F6 | 	mov	local03, result1
02dcc                 | LR__0350
02dcc     34 89 02 F6 | 	mov	arg01, ptr___system__dat__
02dd0     1C 88 06 F1 | 	add	arg01, #28
02dd4     44 01 68 FC | 	wrlong	#0, arg01
02dd8     00 96 0E F2 | 	cmp	local03, #0 wz
02ddc     2C 00 90 AD |  if_e	jmp	#LR__0356
02de0     04 92 66 F0 | 	shl	local01, #4
02de4     08 92 86 F1 | 	sub	local01, #8
02de8     49 99 52 F6 | 	abs	local04, local01 wc
02dec     02 98 46 F0 | 	shr	local04, #2
02df0     4C 9B 8A F6 | 	negc	local05, local04 wz
02df4     4B 9D 02 F6 | 	mov	local06, local03
02df8     10 00 90 AD |  if_e	jmp	#LR__0355
02dfc     D7 06 48 FB | 	callpa	#(@LR__0353-@LR__0351)>>2,fcache_load_ptr_
02e00                 | LR__0351
02e00     4D 05 D8 FC | 	rep	@LR__0354, local05
02e04                 | LR__0352
02e04     4E 01 68 FC | 	wrlong	#0, local06
02e08     04 9C 06 F1 | 	add	local06, #4
02e0c                 | LR__0353
02e0c                 | LR__0354
02e0c                 | LR__0355
02e0c                 | LR__0356
02e0c     4B 73 02 F6 | 	mov	result1, local03
02e10                 | LR__0357
02e10     E7 F0 03 F6 | 	mov	ptra, fp
02e14     F2 00 A0 FD | 	call	#popregs_
02e18                 | __system___gc_doalloc_ret
02e18     2D 00 64 FD | 	ret
02e1c                 | 
02e1c                 | __system___gc_isvalidptr
02e1c     F8 8C 06 F4 | 	bitl	arg03, #248
02e20     08 8C 86 F1 | 	sub	arg03, #8
02e24     44 8D 52 F2 | 	cmps	arg03, arg01 wc
02e28     08 00 90 CD |  if_b	jmp	#LR__0360
02e2c     45 8D 52 F2 | 	cmps	arg03, arg02 wc
02e30     08 00 90 CD |  if_b	jmp	#LR__0361
02e34                 | LR__0360
02e34     00 72 06 F6 | 	mov	result1, #0
02e38     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
02e3c                 | LR__0361
02e3c     46 79 02 F6 | 	mov	_var01, arg03
02e40     44 79 62 F5 | 	xor	_var01, arg01
02e44     0F 78 CE F7 | 	test	_var01, #15 wz
02e48     00 72 06 56 |  if_ne	mov	result1, #0
02e4c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
02e50     46 79 02 F6 | 	mov	_var01, arg03
02e54     02 78 06 F1 | 	add	_var01, #2
02e58     3C 79 E2 FA | 	rdword	_var01, _var01
02e5c     7F 00 00 FF 
02e60     C0 79 06 F5 | 	and	_var01, ##65472
02e64     36 00 00 FF 
02e68     80 78 0E F2 | 	cmp	_var01, ##27776 wz
02e6c     00 72 06 56 |  if_ne	mov	result1, #0
02e70     46 73 02 A6 |  if_e	mov	result1, arg03
02e74                 | __system___gc_isvalidptr_ret
02e74     2D 00 64 FD | 	ret
02e78                 | 
02e78                 | __system___gc_dofree
02e78     06 CA 05 F6 | 	mov	COUNT_, #6
02e7c     E8 00 A0 FD | 	call	#pushregs_
02e80     44 93 02 F6 | 	mov	local01, arg01
02e84     6C FC BF FD | 	call	#__system___gc_ptrs
02e88     39 95 02 F6 | 	mov	local02, result1
02e8c     3A 97 02 F6 | 	mov	local03, result2
02e90     49 8B 02 F6 | 	mov	arg02, local01
02e94     02 8A 06 F1 | 	add	arg02, #2
02e98     36 00 80 FF 
02e9c     45 1F 59 FC | 	wrword	##27791, arg02
02ea0     49 99 02 F6 | 	mov	local04, local01
02ea4     49 89 02 F6 | 	mov	arg01, local01
02ea8     44 9B EA FA | 	rdword	local05, arg01 wz
02eac     00 72 06 A6 |  if_e	mov	result1, #0
02eb0     04 9A 66 50 |  if_ne	shl	local05, #4
02eb4     4D 89 02 51 |  if_ne	add	arg01, local05
02eb8     44 73 02 56 |  if_ne	mov	result1, arg01
02ebc     39 9D 02 F6 | 	mov	local06, result1
02ec0     D7 24 48 FB | 	callpa	#(@LR__0371-@LR__0370)>>2,fcache_load_ptr_
02ec4                 | LR__0370
02ec4     04 98 06 F1 | 	add	local04, #4
02ec8     4C 8B EA FA | 	rdword	arg02, local04 wz
02ecc     4A 89 02 F6 | 	mov	arg01, local02
02ed0     00 72 06 A6 |  if_e	mov	result1, #0
02ed4     04 8A 66 50 |  if_ne	shl	arg02, #4
02ed8     45 89 02 51 |  if_ne	add	arg01, arg02
02edc     44 73 02 56 |  if_ne	mov	result1, arg01
02ee0     39 99 0A F6 | 	mov	local04, result1 wz
02ee4     24 00 90 AD |  if_e	jmp	#LR__0372
02ee8     4C 89 02 F6 | 	mov	arg01, local04
02eec     00 72 06 F6 | 	mov	result1, #0
02ef0     02 88 06 F1 | 	add	arg01, #2
02ef4     44 89 E2 FA | 	rdword	arg01, arg01
02ef8     36 00 00 FF 
02efc     8F 88 0E F2 | 	cmp	arg01, ##27791 wz
02f00     01 72 66 A6 |  if_e	neg	result1, #1
02f04     00 72 0E F2 | 	cmp	result1, #0 wz
02f08     B8 FF 9F AD |  if_e	jmp	#LR__0370
02f0c                 | LR__0371
02f0c                 | LR__0372
02f0c     00 98 0E F2 | 	cmp	local04, #0 wz
02f10     4A 99 02 A6 |  if_e	mov	local04, local02
02f14     4C 8B 02 F6 | 	mov	arg02, local04
02f18     06 8A 06 F1 | 	add	arg02, #6
02f1c     49 89 02 F6 | 	mov	arg01, local01
02f20     45 8B E2 FA | 	rdword	arg02, arg02
02f24     06 88 06 F1 | 	add	arg01, #6
02f28     44 8B 52 FC | 	wrword	arg02, arg01
02f2c     49 8B 0A F6 | 	mov	arg02, local01 wz
02f30     00 72 06 A6 |  if_e	mov	result1, #0
02f34     4A 8B 82 51 |  if_ne	sub	arg02, local02
02f38     04 8A 46 50 |  if_ne	shr	arg02, #4
02f3c     45 73 02 56 |  if_ne	mov	result1, arg02
02f40     4C 8B 02 F6 | 	mov	arg02, local04
02f44     06 8A 06 F1 | 	add	arg02, #6
02f48     45 73 52 FC | 	wrword	result1, arg02
02f4c     4A 99 0A F2 | 	cmp	local04, local02 wz
02f50     A4 00 90 AD |  if_e	jmp	#LR__0375
02f54     4C 89 02 F6 | 	mov	arg01, local04
02f58     44 9B EA FA | 	rdword	local05, arg01 wz
02f5c     00 72 06 A6 |  if_e	mov	result1, #0
02f60     04 9A 66 50 |  if_ne	shl	local05, #4
02f64     4D 89 02 51 |  if_ne	add	arg01, local05
02f68     44 73 02 56 |  if_ne	mov	result1, arg01
02f6c     49 73 0A F2 | 	cmp	result1, local01 wz
02f70     84 00 90 5D |  if_ne	jmp	#LR__0374
02f74     4C 9D E2 FA | 	rdword	local06, local04
02f78     49 8B E2 FA | 	rdword	arg02, local01
02f7c     45 9D 02 F1 | 	add	local06, arg02
02f80     4C 9D 52 FC | 	wrword	local06, local04
02f84     49 9D 02 F6 | 	mov	local06, local01
02f88     02 9C 06 F1 | 	add	local06, #2
02f8c     4E 01 58 FC | 	wrword	#0, local06
02f90     49 89 02 F6 | 	mov	arg01, local01
02f94     44 9B EA FA | 	rdword	local05, arg01 wz
02f98     00 72 06 A6 |  if_e	mov	result1, #0
02f9c     04 9A 66 50 |  if_ne	shl	local05, #4
02fa0     4D 89 02 51 |  if_ne	add	arg01, local05
02fa4     44 73 02 56 |  if_ne	mov	result1, arg01
02fa8     39 9D 02 F6 | 	mov	local06, result1
02fac     4B 9D 52 F2 | 	cmps	local06, local03 wc
02fb0     20 00 90 3D |  if_ae	jmp	#LR__0373
02fb4     4C 8B 0A F6 | 	mov	arg02, local04 wz
02fb8     00 72 06 A6 |  if_e	mov	result1, #0
02fbc     4A 8B 82 51 |  if_ne	sub	arg02, local02
02fc0     04 8A 46 50 |  if_ne	shr	arg02, #4
02fc4     45 73 02 56 |  if_ne	mov	result1, arg02
02fc8     4E 8B 02 F6 | 	mov	arg02, local06
02fcc     04 8A 06 F1 | 	add	arg02, #4
02fd0     45 73 52 FC | 	wrword	result1, arg02
02fd4                 | LR__0373
02fd4     49 8B 02 F6 | 	mov	arg02, local01
02fd8     06 8A 06 F1 | 	add	arg02, #6
02fdc     4C 75 02 F6 | 	mov	result2, local04
02fe0     45 8B E2 FA | 	rdword	arg02, arg02
02fe4     06 74 06 F1 | 	add	result2, #6
02fe8     3A 8B 52 FC | 	wrword	arg02, result2
02fec     06 92 06 F1 | 	add	local01, #6
02ff0     49 01 58 FC | 	wrword	#0, local01
02ff4     4C 93 02 F6 | 	mov	local01, local04
02ff8                 | LR__0374
02ff8                 | LR__0375
02ff8     49 89 02 F6 | 	mov	arg01, local01
02ffc     44 9B EA FA | 	rdword	local05, arg01 wz
03000     00 72 06 A6 |  if_e	mov	result1, #0
03004     04 9A 66 50 |  if_ne	shl	local05, #4
03008     4D 89 02 51 |  if_ne	add	arg01, local05
0300c     44 73 02 56 |  if_ne	mov	result1, arg01
03010     39 8B 0A F6 | 	mov	arg02, result1 wz
03014     B8 00 90 AD |  if_e	jmp	#LR__0377
03018     4B 8B 52 F2 | 	cmps	arg02, local03 wc
0301c     B0 00 90 3D |  if_ae	jmp	#LR__0377
03020     45 89 02 F6 | 	mov	arg01, arg02
03024     00 72 06 F6 | 	mov	result1, #0
03028     02 88 06 F1 | 	add	arg01, #2
0302c     44 89 E2 FA | 	rdword	arg01, arg01
03030     36 00 00 FF 
03034     8F 88 0E F2 | 	cmp	arg01, ##27791 wz
03038     01 72 66 A6 |  if_e	neg	result1, #1
0303c     00 72 0E F2 | 	cmp	result1, #0 wz
03040     8C 00 90 AD |  if_e	jmp	#LR__0377
03044     49 99 02 F6 | 	mov	local04, local01
03048     4C 9D E2 FA | 	rdword	local06, local04
0304c     45 89 02 F6 | 	mov	arg01, arg02
03050     44 93 E2 FA | 	rdword	local01, arg01
03054     49 9D 02 F1 | 	add	local06, local01
03058     4C 9D 52 FC | 	wrword	local06, local04
0305c     44 9D 02 F6 | 	mov	local06, arg01
03060     06 9C 06 F1 | 	add	local06, #6
03064     4C 93 02 F6 | 	mov	local01, local04
03068     4E 9D E2 FA | 	rdword	local06, local06
0306c     06 92 06 F1 | 	add	local01, #6
03070     49 9D 52 FC | 	wrword	local06, local01
03074     44 9D 02 F6 | 	mov	local06, arg01
03078     02 9C 06 F1 | 	add	local06, #2
0307c     4E 55 59 FC | 	wrword	#170, local06
03080     44 9D 02 F6 | 	mov	local06, arg01
03084     06 9C 06 F1 | 	add	local06, #6
03088     4E 01 58 FC | 	wrword	#0, local06
0308c     44 9B EA FA | 	rdword	local05, arg01 wz
03090     00 72 06 A6 |  if_e	mov	result1, #0
03094     04 9A 66 50 |  if_ne	shl	local05, #4
03098     4D 89 02 51 |  if_ne	add	arg01, local05
0309c     44 73 02 56 |  if_ne	mov	result1, arg01
030a0     39 9D 0A F6 | 	mov	local06, result1 wz
030a4     28 00 90 AD |  if_e	jmp	#LR__0376
030a8     4B 9D 52 F2 | 	cmps	local06, local03 wc
030ac     20 00 90 3D |  if_ae	jmp	#LR__0376
030b0     4C 8B 0A F6 | 	mov	arg02, local04 wz
030b4     00 72 06 A6 |  if_e	mov	result1, #0
030b8     4A 8B 82 51 |  if_ne	sub	arg02, local02
030bc     04 8A 46 50 |  if_ne	shr	arg02, #4
030c0     45 73 02 56 |  if_ne	mov	result1, arg02
030c4     4E 99 02 F6 | 	mov	local04, local06
030c8     04 98 06 F1 | 	add	local04, #4
030cc     4C 73 52 FC | 	wrword	result1, local04
030d0                 | LR__0376
030d0                 | LR__0377
030d0     4E 73 02 F6 | 	mov	result1, local06
030d4     E7 F0 03 F6 | 	mov	ptra, fp
030d8     F2 00 A0 FD | 	call	#popregs_
030dc                 | __system___gc_dofree_ret
030dc     2D 00 64 FD | 	ret
030e0                 | 
030e0                 | __system___gc_docollect
030e0     05 CA 05 F6 | 	mov	COUNT_, #5
030e4     E8 00 A0 FD | 	call	#pushregs_
030e8     08 FA BF FD | 	call	#__system___gc_ptrs
030ec     3A 93 02 F6 | 	mov	local01, result2
030f0     39 95 02 F6 | 	mov	local02, result1
030f4     4A 89 02 F6 | 	mov	arg01, local02
030f8     44 97 EA FA | 	rdword	local03, arg01 wz
030fc     00 72 06 A6 |  if_e	mov	result1, #0
03100     04 96 66 50 |  if_ne	shl	local03, #4
03104     4B 89 02 51 |  if_ne	add	arg01, local03
03108     44 73 02 56 |  if_ne	mov	result1, arg01
0310c     39 99 0A F6 | 	mov	local04, result1 wz
03110     00 72 06 F6 | 	mov	result1, #0
03114     01 72 62 FD | 	cogid	result1
03118     39 9B 02 F6 | 	mov	local05, result1
0311c     48 00 90 AD |  if_e	jmp	#LR__0382
03120     D7 22 48 FB | 	callpa	#(@LR__0381-@LR__0380)>>2,fcache_load_ptr_
03124                 | LR__0380
03124     49 99 52 F2 | 	cmps	local04, local01 wc
03128     3C 00 90 3D |  if_ae	jmp	#LR__0382
0312c     4C 8B 02 F6 | 	mov	arg02, local04
03130     02 8A 06 F1 | 	add	arg02, #2
03134     45 8B E2 FA | 	rdword	arg02, arg02
03138     20 8A 26 F5 | 	andn	arg02, #32
0313c     4C 89 02 F6 | 	mov	arg01, local04
03140     02 88 06 F1 | 	add	arg01, #2
03144     44 8B 52 FC | 	wrword	arg02, arg01
03148     4C 89 02 F6 | 	mov	arg01, local04
0314c     44 97 EA FA | 	rdword	local03, arg01 wz
03150     00 72 06 A6 |  if_e	mov	result1, #0
03154     04 96 66 50 |  if_ne	shl	local03, #4
03158     4B 89 02 51 |  if_ne	add	arg01, local03
0315c     44 73 02 56 |  if_ne	mov	result1, arg01
03160     39 99 0A F6 | 	mov	local04, result1 wz
03164     BC FF 9F 5D |  if_ne	jmp	#LR__0380
03168                 | LR__0381
03168                 | LR__0382
03168     00 96 06 F6 | 	mov	local03, #0
0316c     00 88 06 F6 | 	mov	arg01, #0
03170     98 F4 BF FD | 	call	#__system____topofstack
03174     39 8B 02 F6 | 	mov	arg02, result1
03178     4B 89 02 F6 | 	mov	arg01, local03
0317c     90 00 B0 FD | 	call	#__system___gc_markhub
03180     1C 01 B0 FD | 	call	#__system___gc_markcog
03184     4A 89 02 F6 | 	mov	arg01, local02
03188     44 97 EA FA | 	rdword	local03, arg01 wz
0318c     00 72 06 A6 |  if_e	mov	result1, #0
03190     04 96 66 50 |  if_ne	shl	local03, #4
03194     4B 89 02 51 |  if_ne	add	arg01, local03
03198     44 73 02 56 |  if_ne	mov	result1, arg01
0319c     39 95 0A F6 | 	mov	local02, result1 wz
031a0     60 00 90 AD |  if_e	jmp	#LR__0386
031a4                 | LR__0383
031a4     4A 99 02 F6 | 	mov	local04, local02
031a8     4C 89 02 F6 | 	mov	arg01, local04
031ac     44 97 EA FA | 	rdword	local03, arg01 wz
031b0     00 72 06 A6 |  if_e	mov	result1, #0
031b4     04 96 66 50 |  if_ne	shl	local03, #4
031b8     4B 89 02 51 |  if_ne	add	arg01, local03
031bc     44 73 02 56 |  if_ne	mov	result1, arg01
031c0     39 95 02 F6 | 	mov	local02, result1
031c4     4C 8B 02 F6 | 	mov	arg02, local04
031c8     02 8A 06 F1 | 	add	arg02, #2
031cc     45 8B E2 FA | 	rdword	arg02, arg02
031d0     20 8A CE F7 | 	test	arg02, #32 wz
031d4     10 8A CE A7 |  if_e	test	arg02, #16 wz
031d8     1C 00 90 5D |  if_ne	jmp	#LR__0385
031dc     45 8B 42 F8 | 	getnib	arg02, arg02, #0
031e0     4D 8B 0A F2 | 	cmp	arg02, local05 wz
031e4     0E 8A 0E 52 |  if_ne	cmp	arg02, #14 wz
031e8     0C 00 90 5D |  if_ne	jmp	#LR__0384
031ec     4C 89 02 F6 | 	mov	arg01, local04
031f0     84 FC BF FD | 	call	#__system___gc_dofree
031f4     39 95 02 F6 | 	mov	local02, result1
031f8                 | LR__0384
031f8                 | LR__0385
031f8     00 94 0E F2 | 	cmp	local02, #0 wz
031fc     49 95 52 52 |  if_ne	cmps	local02, local01 wc
03200     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__0383
03204                 | LR__0386
03204     E7 F0 03 F6 | 	mov	ptra, fp
03208     F2 00 A0 FD | 	call	#popregs_
0320c                 | __system___gc_docollect_ret
0320c     2D 00 64 FD | 	ret
03210                 | 
03210                 | __system___gc_markhub
03210     04 CA 05 F6 | 	mov	COUNT_, #4
03214     E8 00 A0 FD | 	call	#pushregs_
03218     44 93 02 F6 | 	mov	local01, arg01
0321c     45 95 02 F6 | 	mov	local02, arg02
03220     D0 F8 BF FD | 	call	#__system___gc_ptrs
03224     39 97 02 F6 | 	mov	local03, result1
03228     3A 99 02 F6 | 	mov	local04, result2
0322c                 | LR__0390
0322c     4A 93 52 F2 | 	cmps	local01, local02 wc
03230     60 00 90 3D |  if_ae	jmp	#LR__0391
03234     49 8D 02 FB | 	rdlong	arg03, local01
03238     04 92 06 F1 | 	add	local01, #4
0323c     4C 8B 02 F6 | 	mov	arg02, local04
03240     4B 89 02 F6 | 	mov	arg01, local03
03244     D4 FB BF FD | 	call	#__system___gc_isvalidptr
03248     39 8D 0A F6 | 	mov	arg03, result1 wz
0324c     DC FF 9F AD |  if_e	jmp	#LR__0390
03250     46 89 02 F6 | 	mov	arg01, arg03
03254     00 72 06 F6 | 	mov	result1, #0
03258     02 88 06 F1 | 	add	arg01, #2
0325c     44 89 E2 FA | 	rdword	arg01, arg01
03260     36 00 00 FF 
03264     8F 88 0E F2 | 	cmp	arg01, ##27791 wz
03268     01 72 66 A6 |  if_e	neg	result1, #1
0326c     00 72 0E F2 | 	cmp	result1, #0 wz
03270     B8 FF 9F 5D |  if_ne	jmp	#LR__0390
03274     46 75 02 F6 | 	mov	result2, arg03
03278     02 74 06 F1 | 	add	result2, #2
0327c     3A 75 E2 FA | 	rdword	result2, result2
03280     0F 74 26 F5 | 	andn	result2, #15
03284     2E 74 46 F5 | 	or	result2, #46
03288     02 8C 06 F1 | 	add	arg03, #2
0328c     46 75 52 FC | 	wrword	result2, arg03
03290     98 FF 9F FD | 	jmp	#LR__0390
03294                 | LR__0391
03294     E7 F0 03 F6 | 	mov	ptra, fp
03298     F2 00 A0 FD | 	call	#popregs_
0329c                 | __system___gc_markhub_ret
0329c     2D 00 64 FD | 	ret
032a0                 | 
032a0                 | __system___gc_markcog
032a0     04 CA 05 F6 | 	mov	COUNT_, #4
032a4     E8 00 A0 FD | 	call	#pushregs_
032a8     48 F8 BF FD | 	call	#__system___gc_ptrs
032ac     39 93 02 F6 | 	mov	local01, result1
032b0     3A 95 02 F6 | 	mov	local02, result2
032b4     EF 97 06 F6 | 	mov	local03, #495
032b8                 | LR__0400
032b8                 | 	'.live	local03
032b8     00 96 96 F9 | 	alts	local03, #0
032bc     4B 99 02 F6 | 	mov	local04, local03
032c0     49 89 02 F6 | 	mov	arg01, local01
032c4     4A 8B 02 F6 | 	mov	arg02, local02
032c8     4C 8D 02 F6 | 	mov	arg03, local04
032cc     4C FB BF FD | 	call	#__system___gc_isvalidptr
032d0     00 72 0E F2 | 	cmp	result1, #0 wz
032d4     18 00 90 AD |  if_e	jmp	#LR__0401
032d8     39 99 02 F6 | 	mov	local04, result1
032dc     02 98 06 F1 | 	add	local04, #2
032e0     4C 99 E2 FA | 	rdword	local04, local04
032e4     20 98 46 F5 | 	or	local04, #32
032e8     02 72 06 F1 | 	add	result1, #2
032ec     39 99 52 FC | 	wrword	local04, result1
032f0                 | LR__0401
032f0     01 96 86 F1 | 	sub	local03, #1
032f4     00 96 56 F2 | 	cmps	local03, #0 wc
032f8     BC FF 9F 3D |  if_ae	jmp	#LR__0400
032fc     E7 F0 03 F6 | 	mov	ptra, fp
03300     F2 00 A0 FD | 	call	#popregs_
03304                 | __system___gc_markcog_ret
03304     2D 00 64 FD | 	ret
03308                 | 
03308                 | __system___closeraw
03308     05 CA 05 F6 | 	mov	COUNT_, #5
0330c     E8 00 A0 FD | 	call	#pushregs_
03310     44 93 02 F6 | 	mov	local01, arg01
03314     00 94 06 F6 | 	mov	local02, #0
03318     08 92 06 F1 | 	add	local01, #8
0331c     49 73 0A FB | 	rdlong	result1, local01 wz
03320     08 92 86 F1 | 	sub	local01, #8
03324     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
03328     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0332c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
03330     01 72 66 A6 |  if_e	neg	result1, #1
03334     A8 00 90 AD |  if_e	jmp	#LR__0412
03338     2C 92 06 F1 | 	add	local01, #44
0333c     49 73 0A FB | 	rdlong	result1, local01 wz
03340     2C 92 86 F1 | 	sub	local01, #44
03344     38 00 90 AD |  if_e	jmp	#LR__0410
03348     2C 92 06 F1 | 	add	local01, #44
0334c     49 97 02 FB | 	rdlong	local03, local01
03350     4B 99 02 F6 | 	mov	local04, local03
03354     2C 92 86 F1 | 	sub	local01, #44
03358     13 98 46 F7 | 	zerox	local04, #19
0335c     14 96 46 F0 | 	shr	local03, #20
03360     02 96 66 F0 | 	shl	local03, #2
03364     2D 97 02 F1 | 	add	local03, __methods__
03368     4B 97 02 FB | 	rdlong	local03, local03
0336c     49 89 02 F6 | 	mov	arg01, local01
03370     33 9B 02 F6 | 	mov	local05, objptr
03374     4C 67 02 F6 | 	mov	objptr, local04
03378     2D 96 62 FD | 	call	local03
0337c     4D 67 02 F6 | 	mov	objptr, local05
03380                 | LR__0410
03380     24 92 06 F1 | 	add	local01, #36
03384     49 9B 0A FB | 	rdlong	local05, local01 wz
03388     24 92 86 F1 | 	sub	local01, #36
0338c     3C 00 90 AD |  if_e	jmp	#LR__0411
03390     24 92 06 F1 | 	add	local01, #36
03394     49 97 02 FB | 	rdlong	local03, local01
03398     4B 99 02 F6 | 	mov	local04, local03
0339c     24 92 86 F1 | 	sub	local01, #36
033a0     13 98 46 F7 | 	zerox	local04, #19
033a4     14 96 46 F0 | 	shr	local03, #20
033a8     02 96 66 F0 | 	shl	local03, #2
033ac     2D 97 02 F1 | 	add	local03, __methods__
033b0     4B 97 02 FB | 	rdlong	local03, local03
033b4     49 89 02 F6 | 	mov	arg01, local01
033b8     33 9B 02 F6 | 	mov	local05, objptr
033bc     4C 67 02 F6 | 	mov	objptr, local04
033c0     2D 96 62 FD | 	call	local03
033c4     4D 67 02 F6 | 	mov	objptr, local05
033c8     39 95 02 F6 | 	mov	local02, result1
033cc                 | LR__0411
033cc     49 89 02 F6 | 	mov	arg01, local01
033d0     00 8A 06 F6 | 	mov	arg02, #0
033d4     34 8C 06 F6 | 	mov	arg03, #52
033d8     D8 00 A0 FD | 	call	#\builtin_bytefill_
033dc     4A 73 02 F6 | 	mov	result1, local02
033e0                 | LR__0412
033e0     E7 F0 03 F6 | 	mov	ptra, fp
033e4     F2 00 A0 FD | 	call	#popregs_
033e8                 | __system___closeraw_ret
033e8     2D 00 64 FD | 	ret
033ec                 | 
033ec                 | __system____default_getc
033ec     03 CA 05 F6 | 	mov	COUNT_, #3
033f0     E8 00 A0 FD | 	call	#pushregs_
033f4     44 93 02 F6 | 	mov	local01, arg01
033f8     49 95 02 FB | 	rdlong	local02, local01
033fc     08 92 06 F1 | 	add	local01, #8
03400     49 97 02 FB | 	rdlong	local03, local01
03404     08 92 86 F1 | 	sub	local01, #8
03408     08 96 CE F7 | 	test	local03, #8 wz
0340c     49 89 02 56 |  if_ne	mov	arg01, local01
03410     08 01 B0 5D |  if_ne	call	#__system____default_flush
03414     08 92 06 F1 | 	add	local01, #8
03418     49 97 02 FB | 	rdlong	local03, local01
0341c     04 96 46 F5 | 	or	local03, #4
03420     49 97 62 FC | 	wrlong	local03, local01
03424     08 92 86 F1 | 	sub	local01, #8
03428     4A 97 0A FB | 	rdlong	local03, local02 wz
0342c     0C 00 90 5D |  if_ne	jmp	#LR__0420
03430     49 89 02 F6 | 	mov	arg01, local01
03434     38 04 B0 FD | 	call	#__system____default_filbuf
03438     39 97 02 F6 | 	mov	local03, result1
0343c                 | LR__0420
0343c     01 96 56 F2 | 	cmps	local03, #1 wc
03440     01 72 66 C6 |  if_b	neg	result1, #1
03444     1C 00 90 CD |  if_b	jmp	#LR__0421
03448     01 96 86 F1 | 	sub	local03, #1
0344c     4A 97 62 FC | 	wrlong	local03, local02
03450     04 94 06 F1 | 	add	local02, #4
03454     4A 97 02 FB | 	rdlong	local03, local02
03458     4B 73 C2 FA | 	rdbyte	result1, local03
0345c     01 96 06 F1 | 	add	local03, #1
03460     4A 97 62 FC | 	wrlong	local03, local02
03464                 | LR__0421
03464     E7 F0 03 F6 | 	mov	ptra, fp
03468     F2 00 A0 FD | 	call	#popregs_
0346c                 | __system____default_getc_ret
0346c     2D 00 64 FD | 	ret
03470                 | 
03470                 | __system____default_putc
03470     06 CA 05 F6 | 	mov	COUNT_, #6
03474     E8 00 A0 FD | 	call	#pushregs_
03478     44 93 02 F6 | 	mov	local01, arg01
0347c     45 95 02 F6 | 	mov	local02, arg02
03480     4A 97 02 FB | 	rdlong	local03, local02
03484     08 94 06 F1 | 	add	local02, #8
03488     4A 8B 02 FB | 	rdlong	arg02, local02
0348c     08 94 86 F1 | 	sub	local02, #8
03490     04 8A CE F7 | 	test	arg02, #4 wz
03494     4A 89 02 56 |  if_ne	mov	arg01, local02
03498     80 00 B0 5D |  if_ne	call	#__system____default_flush
0349c     08 94 06 F1 | 	add	local02, #8
034a0     4A 99 02 FB | 	rdlong	local04, local02
034a4     08 98 46 F5 | 	or	local04, #8
034a8     4A 99 62 FC | 	wrlong	local04, local02
034ac     4B 9B 02 FB | 	rdlong	local05, local03
034b0     0C 96 06 F1 | 	add	local03, #12
034b4     4B 8B 02 FB | 	rdlong	arg02, local03
034b8     0C 96 86 F1 | 	sub	local03, #12
034bc     4D 73 02 F6 | 	mov	result1, local05
034c0     45 73 02 F1 | 	add	result1, arg02
034c4     39 93 42 FC | 	wrbyte	local01, result1
034c8     49 93 E2 F8 | 	getbyte	local01, local01, #0
034cc     01 9A 06 F1 | 	add	local05, #1
034d0     4B 9B 62 FC | 	wrlong	local05, local03
034d4     02 94 86 F1 | 	sub	local02, #2
034d8     4A 9D EA FA | 	rdword	local06, local02 wz
034dc     06 94 86 F1 | 	sub	local02, #6
034e0     08 96 06 51 |  if_ne	add	local03, #8
034e4     4B 99 02 5B |  if_ne	rdlong	local04, local03
034e8     4C 9B 0A 52 |  if_ne	cmp	local05, local04 wz
034ec     0C 00 90 AD |  if_e	jmp	#LR__0430
034f0     0A 92 0E F2 | 	cmp	local01, #10 wz
034f4     01 9C 0E A2 |  if_e	cmp	local06, #1 wz
034f8     10 00 90 5D |  if_ne	jmp	#LR__0431
034fc                 | LR__0430
034fc     4A 89 02 F6 | 	mov	arg01, local02
03500     18 00 B0 FD | 	call	#__system____default_flush
03504     00 72 0E F2 | 	cmp	result1, #0 wz
03508     01 92 66 56 |  if_ne	neg	local01, #1
0350c                 | LR__0431
0350c     49 73 02 F6 | 	mov	result1, local01
03510     E7 F0 03 F6 | 	mov	ptra, fp
03514     F2 00 A0 FD | 	call	#popregs_
03518                 | __system____default_putc_ret
03518     2D 00 64 FD | 	ret
0351c                 | 
0351c                 | __system____default_flush
0351c     07 CA 05 F6 | 	mov	COUNT_, #7
03520     E8 00 A0 FD | 	call	#pushregs_
03524     44 93 02 F6 | 	mov	local01, arg01
03528     49 95 02 FB | 	rdlong	local02, local01
0352c     4A 97 02 FB | 	rdlong	local03, local02
03530     08 92 06 F1 | 	add	local01, #8
03534     49 75 02 FB | 	rdlong	result2, local01
03538     08 92 86 F1 | 	sub	local01, #8
0353c     08 74 CE F7 | 	test	result2, #8 wz
03540     D4 00 90 AD |  if_e	jmp	#LR__0442
03544     01 96 56 F2 | 	cmps	local03, #1 wc
03548     2C 01 90 CD |  if_b	jmp	#LR__0444
0354c     08 92 06 F1 | 	add	local01, #8
03550     49 75 02 FB | 	rdlong	result2, local01
03554     08 92 86 F1 | 	sub	local01, #8
03558     80 74 CE F7 | 	test	result2, #128 wz
0355c     6C 00 90 AD |  if_e	jmp	#LR__0441
03560     08 92 06 F1 | 	add	local01, #8
03564     49 8D 02 FB | 	rdlong	arg03, local01
03568     08 92 86 F1 | 	sub	local01, #8
0356c     00 8D CE F7 | 	test	arg03, #256 wz
03570     58 00 90 AD |  if_e	jmp	#LR__0440
03574     30 92 06 F1 | 	add	local01, #48
03578     49 99 02 FB | 	rdlong	local04, local01
0357c     4C 9B 02 F6 | 	mov	local05, local04
03580     30 92 86 F1 | 	sub	local01, #48
03584     13 9A 46 F7 | 	zerox	local05, #19
03588     14 98 46 F0 | 	shr	local04, #20
0358c     02 98 66 F0 | 	shl	local04, #2
03590     2D 99 02 F1 | 	add	local04, __methods__
03594     4C 99 02 FB | 	rdlong	local04, local04
03598     49 89 02 F6 | 	mov	arg01, local01
0359c     00 8A 06 F6 | 	mov	arg02, #0
035a0     00 8C 06 F6 | 	mov	arg03, #0
035a4     02 8E 06 F6 | 	mov	arg04, #2
035a8     33 9D 02 F6 | 	mov	local06, objptr
035ac     4D 67 02 F6 | 	mov	objptr, local05
035b0     2D 98 62 FD | 	call	local04
035b4     4E 67 02 F6 | 	mov	objptr, local06
035b8     08 92 06 F1 | 	add	local01, #8
035bc     49 9D 02 FB | 	rdlong	local06, local01
035c0     00 9D 26 F5 | 	andn	local06, #256
035c4     49 9D 62 FC | 	wrlong	local06, local01
035c8     08 92 86 F1 | 	sub	local01, #8
035cc                 | LR__0440
035cc                 | LR__0441
035cc     18 92 06 F1 | 	add	local01, #24
035d0     49 99 02 FB | 	rdlong	local04, local01
035d4     4C 9B 02 F6 | 	mov	local05, local04
035d8     18 92 86 F1 | 	sub	local01, #24
035dc     13 9A 46 F7 | 	zerox	local05, #19
035e0     14 98 46 F0 | 	shr	local04, #20
035e4     02 98 66 F0 | 	shl	local04, #2
035e8     2D 99 02 F1 | 	add	local04, __methods__
035ec     4C 99 02 FB | 	rdlong	local04, local04
035f0     0C 94 06 F1 | 	add	local02, #12
035f4     4A 8B 02 FB | 	rdlong	arg02, local02
035f8     0C 94 86 F1 | 	sub	local02, #12
035fc     49 89 02 F6 | 	mov	arg01, local01
03600     4B 8D 02 F6 | 	mov	arg03, local03
03604     33 9D 02 F6 | 	mov	local06, objptr
03608     4D 67 02 F6 | 	mov	objptr, local05
0360c     2D 98 62 FD | 	call	local04
03610     4E 67 02 F6 | 	mov	objptr, local06
03614     60 00 90 FD | 	jmp	#LR__0444
03618                 | LR__0442
03618     08 92 06 F1 | 	add	local01, #8
0361c     49 9D 02 FB | 	rdlong	local06, local01
03620     08 92 86 F1 | 	sub	local01, #8
03624     04 9C CE F7 | 	test	local06, #4 wz
03628     00 96 0E 52 |  if_ne	cmp	local03, #0 wz
0362c     48 00 90 AD |  if_e	jmp	#LR__0443
03630     4B 8B 62 F6 | 	neg	arg02, local03
03634     45 8D 02 F6 | 	mov	arg03, arg02
03638     1F 8C C6 F0 | 	sar	arg03, #31
0363c     30 92 06 F1 | 	add	local01, #48
03640     49 99 02 FB | 	rdlong	local04, local01
03644     4C 9B 02 F6 | 	mov	local05, local04
03648     30 92 86 F1 | 	sub	local01, #48
0364c     13 9A 46 F7 | 	zerox	local05, #19
03650     14 98 46 F0 | 	shr	local04, #20
03654     02 98 66 F0 | 	shl	local04, #2
03658     2D 99 02 F1 | 	add	local04, __methods__
0365c     4C 99 02 FB | 	rdlong	local04, local04
03660     49 89 02 F6 | 	mov	arg01, local01
03664     01 8E 06 F6 | 	mov	arg04, #1
03668     33 9D 02 F6 | 	mov	local06, objptr
0366c     4D 67 02 F6 | 	mov	objptr, local05
03670     2D 98 62 FD | 	call	local04
03674     4E 67 02 F6 | 	mov	objptr, local06
03678                 | LR__0443
03678                 | LR__0444
03678     4A 01 68 FC | 	wrlong	#0, local02
0367c     04 94 06 F1 | 	add	local02, #4
03680     4A 01 68 FC | 	wrlong	#0, local02
03684     08 92 06 F1 | 	add	local01, #8
03688     49 9F 02 FB | 	rdlong	local07, local01
0368c     0C 9E 26 F5 | 	andn	local07, #12
03690     49 9F 62 FC | 	wrlong	local07, local01
03694     00 72 06 F6 | 	mov	result1, #0
03698     E7 F0 03 F6 | 	mov	ptra, fp
0369c     F2 00 A0 FD | 	call	#popregs_
036a0                 | __system____default_flush_ret
036a0     2D 00 64 FD | 	ret
036a4                 | 
036a4                 | __system____getftab
036a4     0A 88 16 F2 | 	cmp	arg01, #10 wc
036a8     34 88 06 CD |  if_b	qmul	arg01, #52
036ac     00 72 06 36 |  if_ae	mov	result1, #0
036b0     34 89 02 C6 |  if_b	mov	arg01, ptr___system__dat__
036b4     28 88 06 C1 |  if_b	add	arg01, #40
036b8     18 72 62 CD |  if_b	getqx	result1
036bc     44 73 02 C1 |  if_b	add	result1, arg01
036c0                 | __system____getftab_ret
036c0     2D 00 64 FD | 	ret
036c4                 | 
036c4                 | __system___fmtpad
036c4     06 CA 05 F6 | 	mov	COUNT_, #6
036c8     E8 00 A0 FD | 	call	#pushregs_
036cc     44 93 02 F6 | 	mov	local01, arg01
036d0     45 95 02 F6 | 	mov	local02, arg02
036d4     46 97 02 F6 | 	mov	local03, arg03
036d8     4A 89 EA F8 | 	getbyte	arg01, local02, #1
036dc     16 94 46 F0 | 	shr	local02, #22
036e0     03 94 0E F5 | 	and	local02, #3 wz
036e4     00 98 06 F6 | 	mov	local04, #0
036e8     01 94 06 A6 |  if_e	mov	local02, #1
036ec     47 95 CA F7 | 	test	local02, arg04 wz
036f0     00 72 06 A6 |  if_e	mov	result1, #0
036f4     88 00 90 AD |  if_e	jmp	#LR__0453
036f8     44 97 C2 F2 | 	subr	local03, arg01
036fc     01 96 56 F2 | 	cmps	local03, #1 wc
03700     00 72 06 C6 |  if_b	mov	result1, #0
03704     78 00 90 CD |  if_b	jmp	#LR__0453
03708     03 94 0E F2 | 	cmp	local02, #3 wz
0370c     18 00 90 5D |  if_ne	jmp	#LR__0450
03710     01 8E 0E F2 | 	cmp	arg04, #1 wz
03714     6E 94 62 FD | 	wrz	local02
03718     4A 97 02 F1 | 	add	local03, local02
0371c     4B 97 52 F6 | 	abs	local03, local03 wc
03720     01 96 46 F0 | 	shr	local03, #1
03724     4B 97 82 F6 | 	negc	local03, local03
03728                 | LR__0450
03728     01 96 56 F2 | 	cmps	local03, #1 wc
0372c     4C 00 90 CD |  if_b	jmp	#LR__0452
03730     4B 9B 02 F6 | 	mov	local05, local03
03734                 | LR__0451
03734     49 95 02 F6 | 	mov	local02, local01
03738     49 9D 02 F6 | 	mov	local06, local01
0373c     13 94 46 F7 | 	zerox	local02, #19
03740     14 9C 46 F0 | 	shr	local06, #20
03744     02 9C 66 F0 | 	shl	local06, #2
03748     2D 9D 02 F1 | 	add	local06, __methods__
0374c     4E 9D 02 FB | 	rdlong	local06, local06
03750     20 88 06 F6 | 	mov	arg01, #32
03754     33 97 02 F6 | 	mov	local03, objptr
03758     4A 67 02 F6 | 	mov	objptr, local02
0375c     2D 9C 62 FD | 	call	local06
03760     4B 67 02 F6 | 	mov	objptr, local03
03764     39 9D 02 F6 | 	mov	local06, result1
03768     00 9C 56 F2 | 	cmps	local06, #0 wc
0376c     4E 73 02 C6 |  if_b	mov	result1, local06
03770     0C 00 90 CD |  if_b	jmp	#LR__0453
03774     4E 99 02 F1 | 	add	local04, local06
03778     EE 9B 6E FB | 	djnz	local05, #LR__0451
0377c                 | LR__0452
0377c     4C 73 02 F6 | 	mov	result1, local04
03780                 | LR__0453
03780     E7 F0 03 F6 | 	mov	ptra, fp
03784     F2 00 A0 FD | 	call	#popregs_
03788                 | __system___fmtpad_ret
03788     2D 00 64 FD | 	ret
0378c                 | 
0378c                 | __system___getiolock_0094
0378c     01 CA 05 F6 | 	mov	COUNT_, #1
03790     E8 00 A0 FD | 	call	#pushregs_
03794     0C FF BF FD | 	call	#__system____getftab
03798     39 93 0A F6 | 	mov	local01, result1 wz
0379c     10 00 90 AD |  if_e	jmp	#LR__0460
037a0     08 92 06 F1 | 	add	local01, #8
037a4     49 73 0A FB | 	rdlong	result1, local01 wz
037a8     08 92 86 F1 | 	sub	local01, #8
037ac     0C 00 90 5D |  if_ne	jmp	#LR__0461
037b0                 | LR__0460
037b0     34 73 02 F6 | 	mov	result1, ptr___system__dat__
037b4     24 72 06 F1 | 	add	result1, #36
037b8     08 00 90 FD | 	jmp	#LR__0462
037bc                 | LR__0461
037bc     0C 92 06 F1 | 	add	local01, #12
037c0     49 73 02 F6 | 	mov	result1, local01
037c4                 | LR__0462
037c4     E7 F0 03 F6 | 	mov	ptra, fp
037c8     F2 00 A0 FD | 	call	#popregs_
037cc                 | __system___getiolock_0094_ret
037cc     2D 00 64 FD | 	ret
037d0                 | 
037d0                 | __system___gettxfunc
037d0     01 CA 05 F6 | 	mov	COUNT_, #1
037d4     E8 00 A0 FD | 	call	#pushregs_
037d8     C8 FE BF FD | 	call	#__system____getftab
037dc     39 93 0A F6 | 	mov	local01, result1 wz
037e0     10 00 90 AD |  if_e	jmp	#LR__0470
037e4     08 92 06 F1 | 	add	local01, #8
037e8     49 8B 0A FB | 	rdlong	arg02, local01 wz
037ec     08 92 86 F1 | 	sub	local01, #8
037f0     08 00 90 5D |  if_ne	jmp	#LR__0471
037f4                 | LR__0470
037f4     00 72 06 F6 | 	mov	result1, #0
037f8     08 00 90 FD | 	jmp	#LR__0472
037fc                 | LR__0471
037fc     35 92 26 F4 | 	bith	local01, #53
03800     49 73 02 F6 | 	mov	result1, local01
03804                 | LR__0472
03804     E7 F0 03 F6 | 	mov	ptra, fp
03808     F2 00 A0 FD | 	call	#popregs_
0380c                 | __system___gettxfunc_ret
0380c     2D 00 64 FD | 	ret
03810                 | 
03810                 | __system___rxtxioctl_0144
03810     00 8B 0E F2 | 	cmp	arg02, #256 wz
03814     0C 00 90 AD |  if_e	jmp	#LR__0480
03818     01 8B 0E F2 | 	cmp	arg02, #257 wz
0381c     1C 00 90 AD |  if_e	jmp	#LR__0481
03820     30 00 90 FD | 	jmp	#LR__0482
03824                 | LR__0480
03824     08 68 06 F1 | 	add	ptr___system__dat__, #8
03828     34 73 02 FB | 	rdlong	result1, ptr___system__dat__
0382c     08 68 86 F1 | 	sub	ptr___system__dat__, #8
03830     46 73 62 FC | 	wrlong	result1, arg03
03834     00 72 06 F6 | 	mov	result1, #0
03838     28 00 90 FD | 	jmp	#LR__0483
0383c                 | LR__0481
0383c     46 89 02 FB | 	rdlong	arg01, arg03
03840     08 68 06 F1 | 	add	ptr___system__dat__, #8
03844     34 89 62 FC | 	wrlong	arg01, ptr___system__dat__
03848     08 68 86 F1 | 	sub	ptr___system__dat__, #8
0384c     00 72 06 F6 | 	mov	result1, #0
03850     10 00 90 FD | 	jmp	#LR__0483
03854                 | LR__0482
03854     20 68 06 F1 | 	add	ptr___system__dat__, #32
03858     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
0385c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
03860     01 72 66 F6 | 	neg	result1, #1
03864                 | LR__0483
03864                 | __system___rxtxioctl_0144_ret
03864     2D 00 64 FD | 	ret
03868                 | 
03868                 | __system____dummy_flush_0145
03868     00 72 06 F6 | 	mov	result1, #0
0386c                 | __system____dummy_flush_0145_ret
0386c     2D 00 64 FD | 	ret
03870                 | 
03870                 | __system____default_filbuf
03870     05 CA 05 F6 | 	mov	COUNT_, #5
03874     E8 00 A0 FD | 	call	#pushregs_
03878     44 93 02 F6 | 	mov	local01, arg01
0387c     49 95 02 FB | 	rdlong	local02, local01
03880     08 94 06 F1 | 	add	local02, #8
03884     4A 73 0A FB | 	rdlong	result1, local02 wz
03888     08 94 86 F1 | 	sub	local02, #8
0388c     20 00 90 5D |  if_ne	jmp	#LR__0490
03890     10 94 06 F1 | 	add	local02, #16
03894     4A 73 02 F6 | 	mov	result1, local02
03898     04 94 86 F1 | 	sub	local02, #4
0389c     4A 73 62 FC | 	wrlong	result1, local02
038a0     04 94 86 F1 | 	sub	local02, #4
038a4     02 00 80 FF 
038a8     4A 01 68 FC | 	wrlong	##1024, local02
038ac     08 94 86 F1 | 	sub	local02, #8
038b0                 | LR__0490
038b0     14 92 06 F1 | 	add	local01, #20
038b4     49 97 02 FB | 	rdlong	local03, local01
038b8     4B 99 02 F6 | 	mov	local04, local03
038bc     14 92 86 F1 | 	sub	local01, #20
038c0     13 98 46 F7 | 	zerox	local04, #19
038c4     14 96 46 F0 | 	shr	local03, #20
038c8     02 96 66 F0 | 	shl	local03, #2
038cc     2D 97 02 F1 | 	add	local03, __methods__
038d0     4B 97 02 FB | 	rdlong	local03, local03
038d4     49 89 02 F6 | 	mov	arg01, local01
038d8     0C 94 06 F1 | 	add	local02, #12
038dc     4A 8B 02 FB | 	rdlong	arg02, local02
038e0     04 94 86 F1 | 	sub	local02, #4
038e4     4A 8D 02 FB | 	rdlong	arg03, local02
038e8     08 94 86 F1 | 	sub	local02, #8
038ec     33 9B 02 F6 | 	mov	local05, objptr
038f0     4C 67 02 F6 | 	mov	objptr, local04
038f4     2D 96 62 FD | 	call	local03
038f8     4D 67 02 F6 | 	mov	objptr, local05
038fc     39 9B 02 F6 | 	mov	local05, result1
03900     00 9A 56 F2 | 	cmps	local05, #0 wc
03904     01 72 66 C6 |  if_b	neg	result1, #1
03908     28 00 90 CD |  if_b	jmp	#LR__0491
0390c     4A 9B 62 FC | 	wrlong	local05, local02
03910     0C 94 06 F1 | 	add	local02, #12
03914     4A 97 02 FB | 	rdlong	local03, local02
03918     08 94 86 F1 | 	sub	local02, #8
0391c     4A 97 62 FC | 	wrlong	local03, local02
03920     08 92 06 F1 | 	add	local01, #8
03924     49 99 02 FB | 	rdlong	local04, local01
03928     04 98 46 F5 | 	or	local04, #4
0392c     49 99 62 FC | 	wrlong	local04, local01
03930     4D 73 02 F6 | 	mov	result1, local05
03934                 | LR__0491
03934     E7 F0 03 F6 | 	mov	ptra, fp
03938     F2 00 A0 FD | 	call	#popregs_
0393c                 | __system____default_filbuf_ret
0393c     2D 00 64 FD | 	ret
03940                 | 
03940                 | __system___struct__s_vfs_file_t_putchar_
03940     04 CA 05 F6 | 	mov	COUNT_, #4
03944     E8 00 A0 FD | 	call	#pushregs_
03948     1C 66 06 F1 | 	add	objptr, #28
0394c     33 93 0A FB | 	rdlong	local01, objptr wz
03950     1C 66 86 F1 | 	sub	objptr, #28
03954     00 72 06 A6 |  if_e	mov	result1, #0
03958     48 00 90 AD |  if_e	jmp	#LR__0500
0395c     1C 66 06 F1 | 	add	objptr, #28
03960     33 95 02 FB | 	rdlong	local02, objptr
03964     4A 97 02 F6 | 	mov	local03, local02
03968     1C 66 86 F1 | 	sub	objptr, #28
0396c     13 96 46 F7 | 	zerox	local03, #19
03970     14 94 46 F0 | 	shr	local02, #20
03974     02 94 66 F0 | 	shl	local02, #2
03978     2D 95 02 F1 | 	add	local02, __methods__
0397c     4A 95 02 FB | 	rdlong	local02, local02
03980     33 8B 02 F6 | 	mov	arg02, objptr
03984     33 99 02 F6 | 	mov	local04, objptr
03988     4B 67 02 F6 | 	mov	objptr, local03
0398c     2D 94 62 FD | 	call	local02
03990     4C 67 02 F6 | 	mov	objptr, local04
03994                 | '     return (i < 0) ? 0 : 1;
03994     00 72 56 F2 | 	cmps	result1, #0 wc
03998     00 92 06 C6 |  if_b	mov	local01, #0
0399c     01 92 06 36 |  if_ae	mov	local01, #1
039a0     49 73 02 F6 | 	mov	result1, local01
039a4                 | LR__0500
039a4     E7 F0 03 F6 | 	mov	ptra, fp
039a8     F2 00 A0 FD | 	call	#popregs_
039ac                 | __system___struct__s_vfs_file_t_putchar__ret
039ac     2D 00 64 FD | 	ret
039b0                 | 
039b0                 | __system___struct__s_vfs_file_t_getchar_
039b0     03 CA 05 F6 | 	mov	COUNT_, #3
039b4     E8 00 A0 FD | 	call	#pushregs_
039b8     20 66 06 F1 | 	add	objptr, #32
039bc     33 89 0A FB | 	rdlong	arg01, objptr wz
039c0     20 66 86 F1 | 	sub	objptr, #32
039c4     01 72 66 A6 |  if_e	neg	result1, #1
039c8     38 00 90 AD |  if_e	jmp	#LR__0510
039cc                 | '     return getcf(__this);
039cc     20 66 06 F1 | 	add	objptr, #32
039d0     33 93 02 FB | 	rdlong	local01, objptr
039d4     49 95 02 F6 | 	mov	local02, local01
039d8     20 66 86 F1 | 	sub	objptr, #32
039dc     13 94 46 F7 | 	zerox	local02, #19
039e0     14 92 46 F0 | 	shr	local01, #20
039e4     02 92 66 F0 | 	shl	local01, #2
039e8     2D 93 02 F1 | 	add	local01, __methods__
039ec     49 93 02 FB | 	rdlong	local01, local01
039f0     33 89 02 F6 | 	mov	arg01, objptr
039f4     33 97 02 F6 | 	mov	local03, objptr
039f8     4A 67 02 F6 | 	mov	objptr, local02
039fc     2D 92 62 FD | 	call	local01
03a00     4B 67 02 F6 | 	mov	objptr, local03
03a04                 | LR__0510
03a04     E7 F0 03 F6 | 	mov	ptra, fp
03a08     F2 00 A0 FD | 	call	#popregs_
03a0c                 | __system___struct__s_vfs_file_t_getchar__ret
03a0c     2D 00 64 FD | 	ret
03a10                 | 
03a10                 | __system___struct___bas_wrap_sender_tx_
03a10     03 CA 05 F6 | 	mov	COUNT_, #3
03a14     E8 00 A0 FD | 	call	#pushregs_
03a18     33 93 02 FB | 	rdlong	local01, objptr
03a1c     49 95 02 F6 | 	mov	local02, local01
03a20     13 92 46 F7 | 	zerox	local01, #19
03a24     14 94 46 F0 | 	shr	local02, #20
03a28     02 94 66 F0 | 	shl	local02, #2
03a2c     2D 95 02 F1 | 	add	local02, __methods__
03a30     4A 95 02 FB | 	rdlong	local02, local02
03a34     33 97 02 F6 | 	mov	local03, objptr
03a38     49 67 02 F6 | 	mov	objptr, local01
03a3c     2D 94 62 FD | 	call	local02
03a40     4B 67 02 F6 | 	mov	objptr, local03
03a44     01 72 06 F6 | 	mov	result1, #1
03a48     E7 F0 03 F6 | 	mov	ptra, fp
03a4c     F2 00 A0 FD | 	call	#popregs_
03a50                 | __system___struct___bas_wrap_sender_tx__ret
03a50     2D 00 64 FD | 	ret
03a54                 | 
03a54                 | __system___struct___bas_wrap_sender_rx_
03a54     03 CA 05 F6 | 	mov	COUNT_, #3
03a58     E8 00 A0 FD | 	call	#pushregs_
03a5c     04 66 06 F1 | 	add	objptr, #4
03a60     33 93 02 FB | 	rdlong	local01, objptr
03a64     49 95 02 F6 | 	mov	local02, local01
03a68     04 66 86 F1 | 	sub	objptr, #4
03a6c     13 94 46 F7 | 	zerox	local02, #19
03a70     14 92 46 F0 | 	shr	local01, #20
03a74     02 92 66 F0 | 	shl	local01, #2
03a78     2D 93 02 F1 | 	add	local01, __methods__
03a7c     49 93 02 FB | 	rdlong	local01, local01
03a80     33 97 02 F6 | 	mov	local03, objptr
03a84     4A 67 02 F6 | 	mov	objptr, local02
03a88     2D 92 62 FD | 	call	local01
03a8c     4B 67 02 F6 | 	mov	objptr, local03
03a90     E7 F0 03 F6 | 	mov	ptra, fp
03a94     F2 00 A0 FD | 	call	#popregs_
03a98                 | __system___struct___bas_wrap_sender_rx__ret
03a98     2D 00 64 FD | 	ret
03a9c                 | 
03a9c                 | __system___struct___bas_wrap_sender_close_
03a9c     03 CA 05 F6 | 	mov	COUNT_, #3
03aa0     E8 00 A0 FD | 	call	#pushregs_
03aa4     08 66 06 F1 | 	add	objptr, #8
03aa8     33 93 02 FB | 	rdlong	local01, objptr
03aac     49 95 02 F6 | 	mov	local02, local01
03ab0     08 66 86 F1 | 	sub	objptr, #8
03ab4     13 94 46 F7 | 	zerox	local02, #19
03ab8     14 92 46 F0 | 	shr	local01, #20
03abc     02 92 66 F0 | 	shl	local01, #2
03ac0     2D 93 02 F1 | 	add	local01, __methods__
03ac4     49 93 02 FB | 	rdlong	local01, local01
03ac8     33 97 02 F6 | 	mov	local03, objptr
03acc     4A 67 02 F6 | 	mov	objptr, local02
03ad0     2D 92 62 FD | 	call	local01
03ad4     4B 67 02 F6 | 	mov	objptr, local03
03ad8     E7 F0 03 F6 | 	mov	ptra, fp
03adc     F2 00 A0 FD | 	call	#popregs_
03ae0                 | __system___struct___bas_wrap_sender_close__ret
03ae0     2D 00 64 FD | 	ret
03ae4                 | 
03ae4                 | LR__0520
03ae4     20 21 21 21 
03ae8     20 63 6F 72 
03aec     72 75 70 74 
03af0     65 64 20 68 
03af4     65 61 70 3F 
03af8     3F 3F 20 21 
03afc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
03aff     00          | 	byte	0
03b00                 | LR__0521
03b00     20 21 21 21 
03b04     20 6F 75 74 
03b08     20 6F 66 20 
03b0c     68 65 61 70 
03b10     20 6D 65 6D 
03b14     6F 72 79 20 
03b18     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
03b1c     00          | 	byte	0
03b1d                 | LR__0522
03b1d     20 21 21 21 
03b21     20 63 6F 72 
03b25     72 75 70 74 
03b29     65 64 20 68 
03b2d     65 61 70 20 
03b31     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
03b35     00          | 	byte	0
03b36                 | LR__0523
03b36     54 65 73 74 
03b3a     20 72 65 61 
03b3e     64 79       | 	byte	"Test ready"
03b40     00          | 	byte	0
03b41     00 00 00    | 	alignl
03b44                 | _hg010b_spin2_dat_
03b44                 | 
03b44     00 00 00 00 
03b48     00 00 00 00 
03b4c     00 00 00 00 
03b50     00 00 00 00 
03b54     00 00 00    | vga_font       file "vgafont.def"
03b57     7E 81 A5 81 
03b5b     81 BD 99 81 
03b5f     81 7E 00 00 
03b63     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
03b67     7E FF DB FF 
03b6b     FF C3 E7 FF 
03b6f     FF 7E 00 00 
03b73     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
03b77     00 36 7F 7F 
03b7b     7F 7F 3E 1C 
03b7f     08 00 00 00 
03b83     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
03b87     00 08 1C 3E 
03b8b     7F 3E 1C 08 
03b8f     00 00 00 00 
03b93     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
03b97     18 3C 3C E7 
03b9b     E7 E7 18 18 
03b9f     3C 00 00 00 
03ba3     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
03ba7     18 3C 7E FF 
03bab     FF 7E 18 18 
03baf     3C 00 00 00 
03bb3     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
03bb7     00 00 00 18 
03bbb     3C 3C 18 00 
03bbf     00 00 00 00 
03bc3     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
03bc7     FF FF FF E7 
03bcb     C3 C3 E7 FF 
03bcf     FF FF FF FF 
03bd3     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
03bd7     00 00 3C 66 
03bdb     42 42 66 3C 
03bdf     00 00 00 00 
03be3     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
03be7     FF FF C3 99 
03beb     BD BD 99 C3 
03bef     FF FF FF FF 
03bf3     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
03bf7     78 70 58 4C 
03bfb     1E 33 33 33 
03bff     33 1E 00 00 
03c03     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
03c07     3C 66 66 66 
03c0b     66 3C 18 7E 
03c0f     18 18 00 00 
03c13     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
03c17     FC CC FC 0C 
03c1b     0C 0C 0C 0E 
03c1f     0F 07 00 00 
03c23     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
03c27     FE C6 FE C6 
03c2b     C6 C6 C6 E6 
03c2f     E7 67 03 00 
03c33     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
03c37     18 18 DB 3C 
03c3b     E7 3C DB 18 
03c3f     18 00 00 00 
03c43     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
03c47     03 07 0F 1F 
03c4b     7F 1F 0F 07 
03c4f     03 01 00 00 
03c53     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
03c57     60 70 78 7C 
03c5b     7F 7C 78 70 
03c5f     60 40 00 00 
03c63     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
03c67     18 3C 7E 18 
03c6b     18 18 7E 3C 
03c6f     18 00 00 00 
03c73     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
03c77     66 66 66 66 
03c7b     66 66 66    | 	byte	$66[7]
03c7e     00 66 66 00 
03c82     00 00 00 00 
03c86     00 FE DB DB 
03c8a     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
03c8e     D8 D8 D8 00 
03c92     00 00 00 3E 
03c96     63 06 1C 36 
03c9a     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
03c9e     30 63 3E 00 
03ca2     00 00 00 00 
03ca6     00 00 00 00 
03caa     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03cae     7F 7F 7F 00 
03cb2     00 00 00 00 
03cb6     00 18 3C 7E 
03cba     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
03cbe     3C 18 7E 00 
03cc2     00 00 00 00 
03cc6     00 18 3C 7E 
03cca     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
03cce     18 18 18 00 
03cd2     00 00 00 00 
03cd6     00 18 18 18 
03cda     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
03cde     7E 3C 18 00 
03ce2     00 00 00 00 
03ce6     00 00 00 18 
03cea     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
03cee     00 00 00 00 
03cf2     00 00 00 00 
03cf6     00 00 00    | 	byte	$00[11]
03cf9     0C 06 7F 06 
03cfd     0C 00 00 00 
03d01     00 00 00 00 
03d05     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d09     00 03 03 03 
03d0d     7F 00 00 00 
03d11     00 00 00 00 
03d15     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d19     14 36 7F 36 
03d1d     14 00 00 00 
03d21     00 00 00 00 
03d25     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
03d29     1C 1C 3E 3E 
03d2d     7F 7F 00 00 
03d31     00 00 00 00 
03d35     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03d39     7F 3E 3E 1C 
03d3d     1C 08 00 00 
03d41     00 00 00 00 
03d45     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d49     00 00 00 00 
03d4d     00 00 00 00 
03d51     00 00 00 00 
03d55     00 00       | 	byte	$00[14]
03d57     18 3C 3C 3C 
03d5b     18 18 18 00 
03d5f     18 18 00 00 
03d63     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
03d67     66 24 00 00 
03d6b     00 00 00 00 
03d6f     00 00 00 00 
03d73     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d77     00 36 36 7F 
03d7b     36 36 36 7F 
03d7f     36 36 00 00 
03d83     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
03d87     3E 63 43 03 
03d8b     3E 60 60 61 
03d8f     63 3E 18 18 
03d93     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
03d97     00 00 43 63 
03d9b     30 18 0C 06 
03d9f     63 61 00 00 
03da3     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
03da7     1C 36 36 1C 
03dab     6E 3B 33 33 
03daf     33 6E 00 00 
03db3     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
03db7     0C 0C 0C 06 
03dbb     00 00 00 00 
03dbf     00 00 00 00 
03dc3     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03dc7     30 18 0C 0C 
03dcb     0C 0C 0C 0C 
03dcf     18 30 00 00 
03dd3     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
03dd7     0C 18 30 30 
03ddb     30 30 30 30 
03ddf     18 0C 00 00 
03de3     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
03de7     00 00 00 66 
03deb     3C FF 3C 66 
03def     00 00 00 00 
03df3     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
03df7     00 00 00 18 
03dfb     18 7E 18 18 
03dff     00 00 00 00 
03e03     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
03e07     00 00 00 00 
03e0b     00 00 00 00 | 	byte	$00[8]
03e0f     18 18 18 0C 
03e13     00 00 00 00 
03e17     00 00 00 00 
03e1b     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
03e1f     00 00 00 00 
03e23     00 00 00 00 
03e27     00 00 00 00 
03e2b     00 00 00 00 | 	byte	$00[16]
03e2f     18 18 00 00 
03e33     00 00 00 00 
03e37     00 00 40 60 
03e3b     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
03e3f     03 01 00 00 
03e43     00 00 00 00 
03e47     1C 36 63 63 
03e4b     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
03e4f     36 1C 00 00 
03e53     00 00 00 00 
03e57     18 1C 1E 18 
03e5b     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
03e5f     18 7E 00 00 
03e63     00 00 00 00 
03e67     3E 63 60 30 
03e6b     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
03e6f     63 7F 00 00 
03e73     00 00 00 00 
03e77     3E 63 60 60 
03e7b     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
03e7f     63 3E 00 00 
03e83     00 00 00 00 
03e87     30 38 3C 36 
03e8b     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
03e8f     30 78 00 00 
03e93     00 00 00 00 
03e97     7F 03 03 03 
03e9b     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
03e9f     63 3E 00 00 
03ea3     00 00 00 00 
03ea7     1C 06 03 03 
03eab     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
03eaf     63 3E 00 00 
03eb3     00 00 00 00 
03eb7     7F 63 60 60 
03ebb     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
03ebf     0C 0C 00 00 
03ec3     00 00 00 00 
03ec7     3E 63 63 63 
03ecb     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
03ecf     63 3E 00 00 
03ed3     00 00 00 00 
03ed7     3E 63 63 63 
03edb     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
03edf     30 1E 00 00 
03ee3     00 00 00 00 
03ee7     00 00 00 18 
03eeb     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03eef     18 18 00 00 
03ef3     00 00 00 00 
03ef7     00 00 00 18 
03efb     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03eff     18 18 0C 00 
03f03     00 00 00 00 
03f07     00 60 30 18 
03f0b     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
03f0f     30 60 00 00 
03f13     00 00 00 00 
03f17     00 00 00 7E 
03f1b     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
03f1f     00 00 00 00 
03f23     00 00 00 00 
03f27     00          | 	byte	$00[9]
03f28     06 0C 18 30 
03f2c     60 30 18 0C 
03f30     06 00 00 00 
03f34     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
03f38     63 63 30 18 
03f3c     18 18 00 18 
03f40     18 00 00 00 
03f44     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
03f48     3E 63 63 7B 
03f4c     7B 7B 3B 03 
03f50     3E 00 00 00 
03f54     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
03f58     1C 36 63 63 
03f5c     7F 63 63 63 
03f60     63 00 00 00 
03f64     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
03f68     66 66 66 3E 
03f6c     66 66 66 66 
03f70     3F 00 00 00 
03f74     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
03f78     66 43 03 03 
03f7c     03 03 43 66 
03f80     3C 00 00 00 
03f84     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
03f88     36 66 66 66 
03f8c     66 66 66 36 
03f90     1F 00 00 00 
03f94     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
03f98     66 46 16 1E 
03f9c     16 06 46 66 
03fa0     7F 00 00 00 
03fa4     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
03fa8     66 46 16 1E 
03fac     16 06 06 06 
03fb0     0F 00 00 00 
03fb4     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
03fb8     66 43 03 03 
03fbc     7B 63 63 66 
03fc0     5C 00 00 00 
03fc4     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
03fc8     63 63 63 7F 
03fcc     63 63 63 63 
03fd0     63 00 00 00 
03fd4     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
03fd8     18 18 18 18 
03fdc     18 18 18 18 | 	byte	$18[8]
03fe0     3C 00 00 00 
03fe4     00 00 00 78 
03fe8     30 30 30 30 
03fec     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
03ff0     1E 00 00 00 
03ff4     00 00 00 67 
03ff8     66 66 36 1E 
03ffc     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
04000     67 00 00 00 
04004     00 00 00 0F 
04008     06 06 06 06 
0400c     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
04010     7F 00 00 00 
04014     00 00 00 63 
04018     77 7F 7F 6B 
0401c     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
04020     63 00 00 00 
04024     00 00 00 63 
04028     67 6F 7F 7B 
0402c     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
04030     63 00 00 00 
04034     00 00 00 3E 
04038     63 63 63 63 
0403c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04040     3E 00 00 00 
04044     00 00 00 3F 
04048     66 66 66 3E 
0404c     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
04050     0F 00 00 00 
04054     00 00 00 3E 
04058     63 63 63 63 
0405c     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
04060     3E 30 70 00 
04064     00 00 00 3F 
04068     66 66 66 3E 
0406c     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
04070     67 00 00 00 
04074     00 00 00 3E 
04078     63 63 06 1C 
0407c     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
04080     3E 00 00 00 
04084     00 00 00 7E 
04088     7E 5A 18 18 
0408c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04090     3C 00 00 00 
04094     00 00 00 63 
04098     63 63 63 63 
0409c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
040a0     3E 00 00 00 
040a4     00 00 00 63 
040a8     63 63 63 63 
040ac     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
040b0     08 00 00 00 
040b4     00 00 00 63 
040b8     63 63 63 6B 
040bc     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
040c0     36 00 00 00 
040c4     00 00 00 63 
040c8     63 36 3E 1C 
040cc     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
040d0     63 00 00 00 
040d4     00 00 00 66 
040d8     66 66 66 3C 
040dc     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
040e0     3C 00 00 00 
040e4     00 00 00 7F 
040e8     63 61 30 18 
040ec     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
040f0     7F 00 00 00 
040f4     00 00 00 3C 
040f8     0C 0C 0C 0C 
040fc     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
04100     3C 00 00 00 
04104     00 00 00 00 
04108     01 03 07 0E 
0410c     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
04110     40 00 00 00 
04114     00 00 00 3C 
04118     30 30 30 30 
0411c     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
04120     3C 00 00 00 
04124     1C 36 00 00 
04128     00 00 00 00 
0412c     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04130     00 00 00 00 
04134     00 00 00 00 
04138     00 00 00 00 
0413c     00 00 00 00 
04140     00          | 	byte	$00[17]
04141     FF 00 00 0C 
04145     18 00 00 00 
04149     00 00 00 00 
0414d     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04151     00 00 00 00 
04155     00 00 00 00 
04159     00          | 	byte	$00[9]
0415a     1E 30 3E 33 
0415e     33 33 6E 00 
04162     00 00 00 00 
04166     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
0416a     1E 36 66 66 
0416e     66 66 3E 00 
04172     00 00 00 00 
04176     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0417a     3E 63 03 03 
0417e     03 63 3E 00 
04182     00 00 00 00 
04186     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
0418a     3C 36 33 33 
0418e     33 33 6E 00 
04192     00 00 00 00 
04196     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0419a     3E 63 7F 03 
0419e     03 63 3E 00 
041a2     00 00 00 00 
041a6     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
041aa     0C 1E 0C 0C 
041ae     0C 0C 1E 00 
041b2     00 00 00 00 
041b6     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
041ba     6E 33 33 33 
041be     33 33 3E 30 
041c2     33 1E 00 00 
041c6     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
041ca     36 6E 66 66 
041ce     66 66 67 00 
041d2     00 00 00 00 
041d6     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
041da     1C 18 18 18 
041de     18 18 3C 00 
041e2     00 00 00 00 
041e6     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
041ea     70 60 60 60 
041ee     60 60 60 66 
041f2     66 3C 00 00 
041f6     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
041fa     66 36 1E 1E 
041fe     36 66 67 00 
04202     00 00 00 00 
04206     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
0420a     18 18 18 18 
0420e     18 18       | 	byte	$18[6]
04210     3C 00 00 00 
04214     00 00 00 00 
04218     00 00 37 7F 
0421c     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
04220     63 00 00 00 
04224     00 00 00 00 
04228     00 00 3B 66 
0422c     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
04230     66 00 00 00 
04234     00 00 00 00 
04238     00 00 3E 63 
0423c     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
04240     3E 00 00 00 
04244     00 00 00 00 
04248     00 00 3B 66 
0424c     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
04250     3E 06 06 0F 
04254     00 00 00 00 
04258     00 00 6E 33 
0425c     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
04260     3E 30 30 78 
04264     00 00 00 00 
04268     00 00 3B 6E 
0426c     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
04270     0F 00 00 00 
04274     00 00 00 00 
04278     00 00 3E 63 
0427c     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
04280     3E 00 00 00 
04284     00 00 00 08 
04288     0C 0C 3F 0C 
0428c     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04290     38 00 00 00 
04294     00 00 00 00 
04298     00 00 33 33 
0429c     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
042a0     6E 00 00 00 
042a4     00 00 00 00 
042a8     00 00 63 63 
042ac     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
042b0     1C 00 00 00 
042b4     00 00 00 00 
042b8     00 00 63 63 
042bc     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
042c0     36 00 00 00 
042c4     00 00 00 00 
042c8     00 00 63 36 
042cc     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
042d0     63 00 00 00 
042d4     00 00 00 00 
042d8     00 00 63 63 
042dc     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
042e0     7E 60 30 1F 
042e4     00 00 00 00 
042e8     00 00 7F 33 
042ec     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
042f0     7F 00 00 00 
042f4     00 00 00 70 
042f8     18 18 18 0E 
042fc     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
04300     70 00 00 00 
04304     00 00 00 18 
04308     18 18 18 18 
0430c     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
04310     18 00 00 00 
04314     00 00 00 0E 
04318     18 18 18 70 
0431c     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
04320     0E 00 00 00 
04324     6E 3B 00 00 
04328     00 00 00 00 
0432c     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04330     00 00 00 00 
04334     00 00 00 00 
04338     00 00       | 	byte	$00[10]
0433a     08 1C 36 63 
0433e     63 63 7F 00 
04342     00 00 00 00 
04346     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
0434a     03 03 03 03 
0434e     43 66 3C 18 
04352     30 1E 00 00 
04356     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
0435a     33 33 33 33 
0435e     33 33       | 	byte	$33[6]
04360     6E 00 00 00 
04364     00 00 60 30 
04368     18 00 3E 63 
0436c     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
04370     3E 00 00 00 
04374     00 00 08 1C 
04378     36 00 1E 30 
0437c     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
04380     6E 00 00 00 
04384     00 00 00 00 
04388     33 00 1E 30 
0438c     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
04390     6E 00 00 00 
04394     00 00 1C 36 
04398     1C 00 33 33 
0439c     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
043a0     6E 00 00 00 
043a4     00 00 60 30 
043a8     18 00 3E 63 
043ac     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
043b0     3E 00 00 00 
043b4     00 00 00 00 
043b8     00 00 3E 63 
043bc     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
043c0     3E 18 30 1E 
043c4     00 00 00 1C 
043c8     58 78 38 18 
043cc     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
043d0     3C 00 00 00 
043d4     00 00 00 00 
043d8     63 00 3E 63 
043dc     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
043e0     3E 00 00 00 
043e4     66 33 00 3E 
043e8     63 63 63 63 
043ec     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
043f0     3E 00 00 00 
043f4     00 00 CC 66 
043f8     33 00 3E 63 
043fc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
04400     3E 00 00 00 
04404     00 00 18 3C 
04408     66 00 1C 18 
0440c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
04410     3C 00 00 00 
04414     30 18 00 7F 
04418     63 61 30 18 
0441c     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
04420     7F 00 00 00 
04424     00 63 00 08 
04428     1C 36 63 63 
0442c     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
04430     63 00 00 00 
04434     30 18 00 3C 
04438     66 43 03 03 
0443c     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
04440     3C 00 00 00 
04444     30 18 00 7F 
04448     66 46 16 1E 
0444c     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
04450     7F 00 00 00 
04454     0C 06 00 0F 
04458     06 06 06 06 
0445c     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
04460     7F 00 00 00 
04464     30 18 00 1C 
04468     18 18 18 18 
0446c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
04470     3C 00 00 00 
04474     00 00 08 1C 
04478     36 00 3E 63 
0447c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
04480     3E 00 00 00 
04484     00 00 00 00 
04488     63 00 3E 63 
0448c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
04490     3E 00 00 00 
04494     00 00 00 6F 
04498     46 26 06 06 
0449c     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
044a0     7F 00 00 00 
044a4     00 00 00 6E 
044a8     4C 2C 0C 0C 
044ac     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
044b0     1E 00 00 00 
044b4     30 18 00 3E 
044b8     63 63 06 1C 
044bc     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
044c0     3E 00 00 00 
044c4     00 00 60 30 
044c8     18 00 3E 63 
044cc     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
044d0     3E 00 00 00 
044d4     00 63 00 3E 
044d8     63 63 63 63 
044dc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
044e0     3E 00 00 00 
044e4     00 63 00 63 
044e8     63 63 63 63 
044ec     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
044f0     3E 00 00 00 
044f4     6C 38 00 7E 
044f8     7E 5A 18 18 
044fc     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04500     3C 00 00 00 
04504     00 00 60 48 
04508     2C 0C 3F 0C 
0450c     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04510     38 00 00 00 
04514     00 00 00 0F 
04518     26 36 1E 0E 
0451c     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
04520     7F 00 00 00 
04524     00 00 00 00 
04528     00 63 36 1C 
0452c     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
04530     00 00 00 00 
04534     00 00       | 	byte	$00[6]
04536     36 1C 08 00 
0453a     3E 63 03 03 
0453e     03 63 3E 00 
04542     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
04546     30 18 0C 00 
0454a     1E 30 3E 33 
0454e     33 33 6E 00 
04552     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
04556     60 30 18 00 
0455a     1C 18 18 18 
0455e     18 18 3C 00 
04562     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
04566     60 30 18 00 
0456a     3E 63 63 63 
0456e     63 63 3E 00 
04572     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
04576     30 18 0C 00 
0457a     33 33 33 33 
0457e     33 33 6E 00 
04582     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
04586     00 08 1C 36 
0458a     63 63 7F 63 
0458e     63 63 63 18 
04592     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
04596     00 00 00 00 
0459a     1E 30 3E 33 
0459e     33 33 6E 18 
045a2     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
045a6     00 7F 63 61 
045aa     30 18 0C 06 
045ae     43 63 7F 00 
045b2     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
045b6     36 1C 08 00 
045ba     7F 33 18 0C 
045be     06 63 7F 00 
045c2     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
045c6     00 7F 66 46 
045ca     16 1E 16 06 
045ce     46 66 7F 18 
045d2     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
045d6     00 00 00 00 
045da     3E 63 7F 03 
045de     03 63 3E 18 
045e2     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
045e6     00 3C 66 03 
045ea     1F 03 0F 03 
045ee     03 66 3C 00 
045f2     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
045f6     60 30 18 00 
045fa     7F 33 18 0C 
045fe     06 63 7F 00 
04602     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
04606     00 3C 66 43 
0460a     03 03 03 03 
0460e     43 66 3C 00 
04612     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
04616     00 00 00 00 
0461a     3E 63 06 1C 
0461e     30 63 3E 18 
04622     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
04626     00 00 00 00 
0462a     00 00       | 	byte	$00[6]
0462c     6C 36 1B 36 
04630     6C 00 00 00 
04634     00 00 00 00 
04638     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0463c     1B 36 6C 36 
04640     1B 00 00 00 
04644     88 22 88 22 
04648     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
0464c     88 22 88 22 
04650     88 22 88 22 
04654     AA 55 AA 55 
04658     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
0465c     AA 55 AA 55 
04660     AA 55 AA 55 
04664     BB EE BB EE 
04668     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
0466c     BB EE BB EE 
04670     BB EE BB EE 
04674     18 18 18 18 
04678     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
0467c     18 18 18 18 
04680     18 18 18 18 
04684     18 18 18 18 
04688     18 18 18    | 	byte	$18[15]
0468b     1F 18 18 18 
0468f     18 18 18 18 
04693     18 30 18 00 
04697     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
0469b     63 7F 63 63 
0469f     63 63 00 00 
046a3     00 1C 36 00 
046a7     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
046ab     63 7F 63 63 
046af     63 63 00 00 
046b3     00 36 1C 00 
046b7     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
046bb     1E 16 06 46 
046bf     66 7F 00 00 
046c3     00 00 00 00 
046c7     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
046cb     1C 30 60 63 
046cf     63 3E 18 30 
046d3     1E 6C 6C 6C 
046d7     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
046db     6F 6C 6C 6C 
046df     6C 6C 6C 6C 
046e3     6C 6C 6C 6C 
046e7     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
046eb     6C 6C 6C 6C 
046ef     6C 6C 6C 6C 
046f3     6C          | 	byte	$6c[9]
046f4     00 00 00 00 
046f8     00          | 	byte	$00[5]
046f9     7F 60 6F 6C 
046fd     6C 6C 6C 6C 
04701     6C 6C 6C 6C 
04705     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04709     6F 60 7F 00 
0470d     00 00 00 00 
04711     00 00 00 18 
04715     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
04719     61 30 18 0C 
0471d     06 43 63 7F 
04721     00 00 00 00 
04725     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
04729     00 7F 33 18 
0472d     0C 06 63 7F 
04731     00 00 00 00 
04735     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
04739     00 00 1F 18 
0473d     18 18 18 18 
04741     18 18 18 18 
04745     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04749     18 18 F8 00 
0474d     00 00 00 00 
04751     00 00 00 18 
04755     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04759     18 18 FF 00 
0475d     00 00 00 00 
04761     00 00 00 00 
04765     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04769     00 00 FF 18 
0476d     18 18 18 18 
04771     18 18 18 18 
04775     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04779     18 18 F8 18 
0477d     18 18 18 18 
04781     18 18 18 00 
04785     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
04789     00 00 FF 00 
0478d     00 00 00 00 
04791     00 00 00 18 
04795     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04799     18 18 FF 18 
0479d     18 18 18 18 
047a1     18 18 18 63 
047a5     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
047a9     36 63 63 7F 
047ad     63 63 63 63 
047b1     00 00 00 00 
047b5     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
047b9     00 1E 30 3E 
047bd     33 33 33 6E 
047c1     00 00 00 6C 
047c5     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
047c9     EC 0C FC 00 
047cd     00 00 00 00 
047d1     00 00 00 00 
047d5     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
047d9     FC 0C EC 6C 
047dd     6C 6C 6C 6C 
047e1     6C 6C 6C 6C 
047e5     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
047e9     EF 00 FF 00 
047ed     00 00 00 00 
047f1     00 00 00 00 
047f5     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
047f9     FF 00 EF 6C 
047fd     6C 6C 6C 6C 
04801     6C 6C 6C 6C 
04805     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04809     EC 0C EC 6C 
0480d     6C 6C 6C 6C 
04811     6C 6C 6C 00 
04815     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04819     FF 00 FF 00 
0481d     00 00 00 00 
04821     00 00 00 6C 
04825     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04829     EF 00 EF 6C 
0482d     6C 6C 6C 6C 
04831     6C 6C 6C 00 
04835     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04839     63 3E 63 63 
0483d     63 63 3E 63 
04841     00 00 00 00 
04845     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
04849     30 3C 36 33 
0484d     33 33 33 6E 
04851     00 00 00 00 
04855     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
04859     66 66 6F 66 
0485d     66 66 36 1F 
04861     00 00 00 36 
04865     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
04869     66 66 66 66 
0486d     66 66       | 	byte	$66[6]
0486f     36 1F 00 00 
04873     00 00 63 00 
04877     7F 66 46 16 
0487b     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
0487f     66 7F 00 00 
04883     00 6C 38 00 
04887     38 30 30 3C 
0488b     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
0488f     33 6E 00 00 
04893     00 36 1C 00 
04897     63 67 6F 7F 
0489b     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
0489f     63 63 00 00 
048a3     00 30 18 00 
048a7     3C 18 18 18 
048ab     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
048af     18 3C 00 00 
048b3     00 3C 66 00 
048b7     3C 18 18 18 
048bb     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
048bf     18 3C 00 00 
048c3     00 00 00 36 
048c7     1C 08 00 3E 
048cb     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
048cf     63 3E 00 00 
048d3     00 18 18 18 
048d7     18 18 18 18 
048db     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
048df     00 00 00 00 
048e3     00 00 00 00 
048e7     00 00 00 00 | 	byte	$00[12]
048eb     F8 18 18 18 
048ef     18 18 18 18 
048f3     18 FF FF FF 
048f7     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
048fb     FF FF FF FF 
048ff     FF FF FF FF 
04903     FF          | 	byte	$ff[9]
04904     00 00 00 00 
04908     00 00 00    | 	byte	$00[7]
0490b     FF FF FF FF 
0490f     FF FF FF FF 
04913     FF          | 	byte	$ff[9]
04914     00 00 00 7E 
04918     7E 5A 18 18 
0491c     18 18 18 18 
04920     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
04924     1C 36 1C 63 
04928     63 63 63 63 
0492c     63 63 63 63 
04930     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04934     FF FF FF FF 
04938     FF FF FF    | 	byte	$ff[7]
0493b     00 00 00 00 
0493f     00 00 00 00 
04943     00          | 	byte	$00[9]
04944     30 18 00 3E 
04948     63 63 63 63 
0494c     63 63 63 63 
04950     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04954     00 00 00 1E 
04958     33 33 33 1B 
0495c     33 63 63 63 
04960     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
04964     1C 36 00 3E 
04968     63 63 63 63 
0496c     63 63 63 63 
04970     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04974     30 18 00 63 
04978     67 6F 7F 7B 
0497c     73 63 63 63 
04980     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
04984     00 00 60 30 
04988     18 00 3B 66 
0498c     66 66 66 66 
04990     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04994     00 00 36 1C 
04998     08 00 3B 66 
0499c     66 66 66 66 
049a0     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
049a4     36 1C 00 3E 
049a8     63 63 06 1C 
049ac     30 60 63 63 
049b0     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
049b4     00 00 36 1C 
049b8     08 00 3E 63 
049bc     06 1C 30 63 
049c0     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
049c4     30 18 00 3F 
049c8     66 66 66 3E 
049cc     36 66 66 66 
049d0     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
049d4     30 18 00 63 
049d8     63 63 63 63 
049dc     63 63 63 63 
049e0     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
049e4     00 00 60 30 
049e8     18 00 3B 6E 
049ec     66 06 06 06 
049f0     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
049f4     66 33 00 63 
049f8     63 63 63 63 
049fc     63 63 63 63 
04a00     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04a04     00 00 60 30 
04a08     18 00 63 63 
04a0c     63 63 63 63 
04a10     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
04a14     30 18 00 66 
04a18     66 66 66 3C 
04a1c     18 18 18 18 
04a20     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
04a24     00 00 00 08 
04a28     0C 0C 3F 0C 
04a2c     0C 0C 0C 6C 
04a30     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
04a34     30 18 00 00 
04a38     00 00 00 00 
04a3c     00 00 00 00 
04a40     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04a44     00 00 00 00 
04a48     00 00 00 00 | 	byte	$00[8]
04a4c     7F 00 00 00 
04a50     00 00 00 00 
04a54     66 33 00 00 
04a58     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
04a5c     00 00 00 00 
04a60     00 00 00 00 
04a64     00 00 00 00 
04a68     00 00 00 00 
04a6c     00 00 00 00 
04a70     00          | 	byte	$00[21]
04a71     0C 06 3C 36 
04a75     1C 00 00 00 
04a79     00 00 00 00 
04a7d     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04a81     00 00 00 63 
04a85     3E 00 00 00 
04a89     00 00 00 00 
04a8d     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04a91     00 00 00 00 
04a95     3E 63 06 1C 
04a99     36 63 63 36 
04a9d     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
04aa1     00 00 00 00 
04aa5     00 00 00 00 | 	byte	$00[8]
04aa9     18 00 7E 00 
04aad     18 00 00 00 
04ab1     00 00 00 00 
04ab5     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04ab9     00 00 00 00 
04abd     00 00 00 00 | 	byte	$00[8]
04ac1     18 30 1E 00 
04ac5     00 00 1C 36 
04ac9     36 1C 00 00 
04acd     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
04ad1     00 00 00 00 
04ad5     63 00 00 00 
04ad9     00 00 00 00 
04add     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04ae1     00 00 00 18 
04ae5     18 00 00 00 
04ae9     00 00 00 00 
04aed     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04af1     00 00 00 00 
04af5     00          | 	byte	$00[5]
04af6     CC 66 33 00 
04afa     33 33 33 33 
04afe     33 33 6E 00 
04b02     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
04b06     00 3F 66 66 
04b0a     66 3E 36 66 
04b0e     66 66 6F 00 
04b12     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
04b16     36 1C 08 00 
04b1a     3B 6E 66 06 
04b1e     06 06 0F 00 
04b22     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
04b26     00 00 00 7E 
04b2a     7E 7E 7E 7E 
04b2e     7E 7E 00 00 
04b32     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
04b36     00 00 00 00 
04b3a     00 00 00 00 
04b3e     00 00 00 00 
04b42     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04b44     00 00 00 00 
      ...             
04b74     00 00 00 00 
04b78     00 00 00    | st_font        file "st4font.def"
04b7b     FF FF 00 00 
04b7f     00 00 00 00 
04b83     00 18 18 18 
04b87     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04b8b     18 18 18 18 
04b8f     18 18 18 18 
04b93     18          | 	byte	$18[9]
04b94     00 00 00 00 
04b98     00 00 00    | 	byte	$00[7]
04b9b     FF FF 18 18 
04b9f     18 18 18 18 
04ba3     18 18 18 18 
04ba7     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04bab     FF FF 00 00 
04baf     00 00 00 00 
04bb3     00 18 18 18 
04bb7     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04bbb     1F 1F 18 18 
04bbf     18 18 18 18 
04bc3     18 18 18 18 
04bc7     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04bcb     F8 F8 18 18 
04bcf     18 18 18 18 
04bd3     18 00 00 00 
04bd7     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04bdb     1F 1F 18 18 
04bdf     18 18 18 18 
04be3     18 00 00 00 
04be7     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04beb     F8 F8 18 18 
04bef     18 18 18 18 
04bf3     18 18 18 18 
04bf7     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04bfb     1F 1F 00 00 
04bff     00 00 00 00 
04c03     00 18 18 18 
04c07     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04c0b     F8 F8 00 00 
04c0f     00 00 00 00 
04c13     00 18 18 18 
04c17     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04c1b     FF FF 18 18 
04c1f     18 18 18 18 
04c23     18 00 00 18 
04c27     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
04c2b     66 7E 7E 66 
04c2f     66 66 66 30 
04c33     18 00 00 7E 
04c37     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
04c3b     3E 06 06 06 
04c3f     06 7E 7E 18 
04c43     0C 30 18 3C 
04c47     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
04c4b     06 06 06 66 
04c4f     66 7E 3C 00 
04c53     00 30 18 66 
04c57     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
04c5b     7E 7E 76 76 
04c5f     66 66 66 00 
04c63     00 30 18 7C 
04c67     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
04c6b     1C 38 70 60 
04c6f     60 7E 3E 00 
04c73     00 30 18 7E 
04c77     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
04c7b     18 0C 0C 06 
04c7f     06 7E 7E 00 
04c83     00 18 18 00 
04c87     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
04c8b     18 18 0C 0C 
04c8f     06 7E 7E 00 
04c93     00 30 18 3C 
04c97     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
04c9b     66 66 66 66 
04c9f     66          | 	byte	$66[5]
04ca0     7E 3C 00 00 
04ca4     00 00 06 06 
04ca8     06 06 16 1E 
04cac     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
04cb0     7E 7E 00 00 
04cb4     00 00 00 00 
04cb8     00 3C 7C 60 
04cbc     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
04cc0     7E 7C 30 18 
04cc4     00 00 00 00 
04cc8     00 3C 7E 66 
04ccc     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
04cd0     7E 7C 18 0C 
04cd4     00 00 30 18 
04cd8     00 3C 3E 06 
04cdc     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
04ce0     7E 7C 00 00 
04ce4     00 00 30 18 
04ce8     00 3E 7E 66 
04cec     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
04cf0     66 66 00 00 
04cf4     00 00 30 18 
04cf8     00 7C 7E 06 
04cfc     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
04d00     7E 3E 00 00 
04d04     00 00 30 18 
04d08     00 7E 7E 30 
04d0c     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04d10     7E 7E 00 00 
04d14     00 00 18 18 
04d18     00 7E 7E 30 
04d1c     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04d20     7E 7E 00 00 
04d24     00 00 30 18 
04d28     00 3C 7E 66 
04d2c     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
04d30     7E 3C 00 00 
04d34     00 00 1C 1C 
04d38     18 18 38 3C 
04d3c     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
04d40     3C 3C 00 00 
04d44     00 00 00 00 
04d48     00 00 00 00 
04d4c     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04d50     00 00 00 00 
04d54     00 00       | 	byte	$00[6]
04d56     18 18 18 18 
04d5a     18 18 18 18 | 	byte	$18[8]
04d5e     00 00 18 18 
04d62     00 00 00 00 
04d66     66 66 66 66 
04d6a     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
04d6e     00 00 00 00 
04d72     00 00 00 00 
04d76     00          | 	byte	$00[9]
04d77     66 66 FF FF 
04d7b     66 66 FF FF 
04d7f     66 66 00 00 
04d83     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
04d87     7C 7E 06 06 
04d8b     3E 7C 60 60 
04d8f     7E 3E 18 18 
04d93     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
04d97     66 30 30 18 
04d9b     18 0C 0C 66 
04d9f     66 00 00 00 
04da3     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
04da7     66 66 3C 1C 
04dab     1C FC FE 66 
04daf     66 FE FC 00 
04db3     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
04db7     18 18 18 18 
04dbb     00 00 00 00 
04dbf     00 00 00 00 
04dc3     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
04dc7     18 1C 0C 0C 
04dcb     0C 0C 0C 0C 
04dcf     1C 18 30 00 
04dd3     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
04dd7     18 38 30 30 
04ddb     30 30 30 30 
04ddf     38 18 0C 00 
04de3     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
04de7     66 66 3C 3C 
04deb     FF FF 3C 3C 
04def     66 66 00 00 
04df3     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
04df7     00 18 18 18 
04dfb     7E 7E 18 18 
04dff     18 00 00 00 
04e03     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04e07     00 00 00 00 
04e0b     00 00       | 	byte	$00[6]
04e0d     18 18 18 18 
04e11     18          | 	byte	$18[5]
04e12     0C 04 00 00 
04e16     00 00 00 00 
04e1a     7E 7E 00 00 
04e1e     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
04e22     00 00 00 00 
04e26     00 00 00 00 
04e2a     00 00 00 00 
04e2e     00          | 	byte	$00[13]
04e2f     18 18 18 00 
04e33     00 00 00 60 
04e37     60 60 30 30 
04e3b     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
04e3f     06 06 06 00 
04e43     00 00 00 3C 
04e47     7E 66 66 66 
04e4b     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
04e4f     66 7E 3C 00 
04e53     00 00 00 18 
04e57     18 1C 1C 18 
04e5b     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
04e5f     18 7E 7E 00 
04e63     00 00 00 3C 
04e67     7E 66 66 30 
04e6b     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
04e6f     0C 7E 7E 00 
04e73     00 00 00 7E 
04e77     7E 30 30 18 
04e7b     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
04e7f     66 7E 3C 00 
04e83     00 00 00 30 
04e87     30 38 38 3C 
04e8b     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
04e8f     7E 30 30 00 
04e93     00 00 00 7E 
04e97     7E 06 06 3E 
04e9b     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
04e9f     66 7E 3C 00 
04ea3     00 00 00 38 
04ea7     3C 0E 06 06 
04eab     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
04eaf     66 7E 3C 00 
04eb3     00 00 00 7E 
04eb7     7E 60 60 30 
04ebb     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
04ebf     0C 0C 0C 00 
04ec3     00 00 00 3C 
04ec7     7E 66 66 3C 
04ecb     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
04ecf     66 7E 3C 00 
04ed3     00 00 00 3C 
04ed7     7E 66 66 7E 
04edb     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
04edf     70 3C 1C 00 
04ee3     00 00 00 00 
04ee7     00 00 18 18 
04eeb     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
04eef     18 18 18 00 
04ef3     00 00 00 00 
04ef7     00 00 18 18 
04efb     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
04eff     18 18 18 0C 
04f03     04 00 00 00 
04f07     70 38 1C 0E 
04f0b     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
04f0f     70 00 00 00 
04f13     00 00 00 00 
04f17     00 00 7E 7E 
04f1b     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
04f1f     00 00 00 00 
04f23     00 00 00 00 | 	byte	$00[8]
04f27     0E 1C 38 70 
04f2b     E0 70 38 1C 
04f2f     0E 00 00 00 
04f33     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
04f37     7E 66 66 30 
04f3b     30 18 18 18 
04f3f     00 18 18 00 
04f43     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
04f47     7E 66 66 66 
04f4b     66 36 06 66 
04f4f     66 7E 3C 00 
04f53     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
04f57     3C 7E 66 66 
04f5b     66 7E 7E 66 
04f5f     66 66 66 00 
04f63     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
04f67     7E 66 66 7E 
04f6b     3E 66 66 66 
04f6f     66 7E 3E 00 
04f73     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
04f77     7E 66 66 06 
04f7b     06 06 06 66 
04f7f     66 7E 3C 00 
04f83     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
04f87     7E 66 66 66 
04f8b     66 66 66 66 
04f8f     66 7E 3E 00 
04f93     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
04f97     7E 06 06 3E 
04f9b     3E 06 06 06 
04f9f     06 7E 7E 00 
04fa3     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
04fa7     7E 06 06 3E 
04fab     3E 06 06 06 
04faf     06 06 06 00 
04fb3     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
04fb7     7E 06 06 76 
04fbb     76 66 66 66 
04fbf     66 7E 3C 00 
04fc3     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
04fc7     66 66 66 7E 
04fcb     7E 66 66 66 
04fcf     66 66 66 00 
04fd3     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
04fd7     7E 18 18 18 
04fdb     18 18 18 18 
04fdf     18 7E 7E 00 
04fe3     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
04fe7     60 60 60 60 
04feb     60 60 60    | 	byte	$60[7]
04fee     66 66 7E 3C 
04ff2     00 00 00 00 
04ff6     66 66 36 36 
04ffa     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
04ffe     66 66 C6 C6 
05002     00 00 00 00 
05006     06 06 06 06 
0500a     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
0500e     06 06 7E 7E 
05012     00 00 00 00 
05016     C6 C6 EE EE 
0501a     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
0501e     C6 C6 C6 C6 
05022     00 00 00 00 
05026     66 66 66 6E 
0502a     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
0502e     76 66 66 66 
05032     00 00 00 00 
05036     3C 7E 66 66 
0503a     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0503e     66 66 7E 3C 
05042     00 00 00 00 
05046     3E 7E 66 66 
0504a     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
0504e     06 06 06 06 
05052     00 00 00 00 
05056     3C 7E 66 66 
0505a     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0505e     66 56 3E 6C 
05062     00 00 00 00 
05066     3E 7E 66 66 
0506a     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
0506e     66 66 C6 C6 
05072     00 00 00 00 
05076     7C 7E 06 06 
0507a     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
0507e     60 60 7E 3E 
05082     00 00 00 00 
05086     7E 7E 18 18 
0508a     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
0508e     18 18 18 18 
05092     00 00 00 00 
05096     66 66 66 66 
0509a     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
0509e     66 66 7E 3C 
050a2     00 00 00 00 
050a6     66 66 66 66 
050aa     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
050ae     3C 3C 18 18 
050b2     00 00 00 00 
050b6     C6 C6 C6 C6 
050ba     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
050be     FE EE C6 82 
050c2     00 00 00 00 
050c6     66 66 66 3C 
050ca     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
050ce     3C 66 66 66 
050d2     00 00 00 00 
050d6     66 66 66 66 
050da     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
050de     18 18 18 18 
050e2     00 00 00 00 
050e6     7E 7E 30 30 
050ea     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
050ee     06 06 7E 7E 
050f2     00 00 00 00 
050f6     3C 3C 0C 0C 
050fa     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
050fe     0C 0C 3C 3C 
05102     00 00 00 00 
05106     06 06 0C 0C 
0510a     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
0510e     60 60 C0 C0 
05112     00 00 00 00 
05116     3C 3C 30 30 
0511a     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
0511e     30 30 3C 3C 
05122     00 00 00 00 
05126     18 18 3C 3C 
0512a     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
0512e     00 00 00 00 
05132     00 00 00 00 
05136     00 00 00 00 
0513a     00 00 00 00 
0513e     00 00       | 	byte	$00[18]
05140     FE FE 00 00 
05144     00 00 0C 0C 
05148     18 18 00 00 
0514c     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
05150     00 00 00 00 
05154     00 00 00 00 
05158     00          | 	byte	$00[9]
05159     3C 7C 60 7C 
0515d     7E 66 66 7E 
05161     7C 00 00 00 
05165     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
05169     3E 7E 66 66 
0516d     66 66 66 7E 
05171     3E 00 00 00 
05175     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
05179     3C 3E 06 06 
0517d     06 06 06 7E 
05181     7C 00 00 00 
05185     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
05189     7C 7E 66 66 
0518d     66 66 66 7E 
05191     7C 00 00 00 
05195     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
05199     3C 7E 66 66 
0519d     7E 06 06 7E 
051a1     7C 00 00 00 
051a5     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
051a9     18 7E 7E 18 
051ad     18 18 18 18 
051b1     18 00 00 00 
051b5     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
051b9     7C 7E 66 66 
051bd     66 66 7E 7C 
051c1     60 7E 3E 00 
051c5     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
051c9     3E 7E 66 66 
051cd     66 66 66 66 
051d1     66 00 00 00 
051d5     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
051d9     1C 1C 18 18 
051dd     18 18 18 3C 
051e1     3C 00 00 00 
051e5     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
051e9     30 30 30 30 
051ed     30 30 30 30 
051f1     30          | 	byte	$30[9]
051f2     3E 1E 00 00 
051f6     06 06 06 36 
051fa     36 1E 1E 1E 
051fe     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
05202     00 00 00 00 
05206     1C 1C 18 18 
0520a     18 18 18 18 
0520e     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
05212     00 00 00 00 
05216     00 00 00    | 	byte	$00[7]
05219     6C FE FE D6 
0521d     D6 C6 C6 C6 
05221     C6 00 00 00 
05225     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
05229     3E 7E 66 66 
0522d     66 66 66 66 
05231     66 00 00 00 
05235     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
05239     3C 7E 66 66 
0523d     66 66 66 7E 
05241     3C 00 00 00 
05245     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
05249     3E 7E 66 66 
0524d     66 66 66 7E 
05251     3E 06 06 00 
05255     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
05259     7C 7E 66 66 
0525d     66 66 66 7E 
05261     7C 60 60 00 
05265     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
05269     3E 7E 66 06 
0526d     06 06 06 06 
05271     06 00 00 00 
05275     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
05279     7C 7E 06 0E 
0527d     3C 70 60 7E 
05281     3E 00 00 00 
05285     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
05289     7E 7E 18 18 
0528d     18 18 18 78 
05291     70 00 00 00 
05295     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
05299     66 66 66 66 
0529d     66 66 66    | 	byte	$66[7]
052a0     7E 7C 00 00 
052a4     00 00 00 00 
052a8     00 66 66 66 
052ac     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
052b0     18 18 00 00 
052b4     00 00 00 00 
052b8     00 C6 C6 D6 
052bc     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
052c0     C6 82 00 00 
052c4     00 00 00 00 
052c8     00 66 66 3C 
052cc     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
052d0     66 66 00 00 
052d4     00 00 00 00 
052d8     00 66 66 66 
052dc     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
052e0     7C 60 7E 3E 
052e4     00 00 00 00 
052e8     00 7E 7E 30 
052ec     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
052f0     7E 7E 00 00 
052f4     00 00 30 18 
052f8     18 18 18 0C 
052fc     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
05300     18 30 00 00 
05304     00 00 18 18 
05308     18 18 18 18 
0530c     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
05310     18 18 00 00 
05314     00 00 0C 18 
05318     18 18 18 30 
0531c     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
05320     18 0C 00 00 
05324     00 00 6C 7E 
05328     36 00 00 00 
0532c     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
05330     00 00 00 00 
05334     00 00 00 00 
05338     00          | 	byte	$00[9]
05339     18 18 18 18 
0533d     18 18 00 00 
05341     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
05344     00 6C FE FE 
05348     7C 38 10 00 
0534c     18 18 18 F8 
05350     F8 18 18 18 | a8_font        file "atari8.fnt"
05354     C0 C0 C0 C0 
05358     C0 C0 C0 C0 | 	byte	$c0[8]
0535c     18 18 18 1F 
05360     1F 00 00 00 
05364     18 18 18 1F 
05368     1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
0536c     00 00 00 1F 
05370     1F 18 18 18 
05374     C0 E0 70 38 
05378     1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
0537c     03 07 0E 1C 
05380     38 70 E0 C0 
05384     80 C0 E0 F0 
05388     F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
0538c     00 00 00 00 
05390     F0 F0 F0 F0 
05394     01 03 07 0F 
05398     1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
0539c     F0 F0 F0 F0 
053a0     00 00 00 00 
053a4     0F 0F 0F 0F 
053a8     00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
053ac     FF FF 00 00 
053b0     00 00 00 00 
053b4     00 00 00 00 
053b8     00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
053bc     00 00 00 00 
053c0     0F 0F 0F 0F 
053c4     00 38 38 EE 
053c8     EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
053cc     00 00 00 F8 
053d0     F8 18 18 18 
053d4     00 00 00 FF 
053d8     FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
053dc     18 18 18 FF 
053e0     FF 18 18 18 
053e4     00 00 3C 7E 
053e8     7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
053ec     00 00 00 00 
053f0     FF FF FF FF 
053f4     03 03 03 03 
053f8     03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
053fc     00 00 00 FF 
05400     FF 18 18 18 
05404     18 18 18 FF 
05408     FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
0540c     0F 0F 0F 0F 
05410     0F 0F 0F 0F | 	byte	$0f[8]
05414     18 18 18 F8 
05418     F8 00 00 00 
0541c     1E 06 1E 06 
05420     7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
05424     00 18 3C 7E 
05428     18 18 18 00 
0542c     00 18 18 18 
05430     7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
05434     00 18 0C 7E 
05438     0C 18 00 00 
0543c     00 18 30 7E 
05440     30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
05444     00 00 00 00 
05448     00 00 00 00 
0544c     00          | 	byte	$00[9]
0544d     18 18 18 18 
05451     00 18 00 00 
05455     66 66 66 00 
05459     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
0545d     66 FF 66 66 
05461     FF 66 00 18 
05465     7C 06 3C 60 
05469     3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
0546d     66 36 18 0C 
05471     66 62 00 38 
05475     6C 38 1C F6 
05479     66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
0547d     18 18 18 00 
05481     00 00 00 00 
05485     70 38 18 18 
05489     38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
0548d     0E 1C 18 18 
05491     1C 0E 00 00 
05495     66 3C FF 3C 
05499     66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
0549d     18 18 7E 18 
054a1     18 00 00 00 
054a5     00 00 00 00 
054a9     18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
054ad     00 00 7E 00 
054b1     00 00 00 00 
054b5     00 00 00 00 
054b9     18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
054bd     60 30 18 0C 
054c1     06 02 00 00 
054c5     3C 66 76 6E 
054c9     66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
054cd     18 1C 18 18 
054d1     18 7E 00 00 
054d5     3C 66 30 18 
054d9     0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
054dd     7E 30 18 30 
054e1     66 3C 00 00 
054e5     30 38 3C 36 
054e9     7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
054ed     7E 06 3E 60 
054f1     66 3C 00 00 
054f5     3C 06 3E 66 
054f9     66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
054fd     7E 60 30 18 
05501     0C 0C 00 00 
05505     3C 66 3C 66 
05509     66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
0550d     3C 66 7C 60 
05511     30 1C 00 00 
05515     00 18 18 00 
05519     18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
0551d     00 18 18 00 
05521     18 18 0C 60 
05525     30 18 0C 18 
05529     30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
0552d     00 7E 00 00 
05531     7E 00 00 06 
05535     0C 18 30 18 
05539     0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
0553d     3C 66 30 18 
05541     00 18 00 00 
05545     3C 66 76 76 
05549     06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
0554d     18 3C 66 66 
05551     7E 66 00 00 
05555     3E 66 3E 66 
05559     66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
0555d     3C 66 06 06 
05561     66 3C 00 00 
05565     1E 36 66 66 
05569     36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
0556d     7E 06 3E 06 
05571     06 7E 00 00 
05575     7E 06 3E 06 
05579     06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
0557d     7C 06 06 76 
05581     66 7C 00 00 
05585     66 66 7E 66 
05589     66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
0558d     7E 18 18 18 
05591     18 7E 00 00 
05595     60 60 60 60 
05599     66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
0559d     66 36 1E 1E 
055a1     36 66 00 00 
055a5     06 06 06 06 
055a9     06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
055ad     C6 EE FE D6 
055b1     C6 C6 00 00 
055b5     66 6E 7E 7E 
055b9     76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
055bd     3C 66 66 66 
055c1     66 3C 00 00 
055c5     3E 66 66 3E 
055c9     06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
055cd     3C 66 66 66 
055d1     36 6C 00 00 
055d5     3E 66 66 3E 
055d9     36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
055dd     3C 06 3C 60 
055e1     60 3C 00 00 
055e5     7E 18 18 18 
055e9     18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
055ed     66 66 66 66 
055f1     66          | 	byte	$66[5]
055f2     7E 00 00 66 
055f6     66 66 66 3C 
055fa     18 00 00 C6 
055fe     C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
05602     C6 00 00 66 
05606     66 3C 3C 66 
0560a     66 00 00 66 
0560e     66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
05612     18 00 00 7E 
05616     30 18 0C 06 
0561a     7E 00 00 78 
0561e     18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
05622     78 00 00 02 
05626     06 0C 18 30 
0562a     60 00 00 1E 
0562e     18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
05632     1E 00 00 10 
05636     38 6C C6 00 
0563a     00 00 00 00 
0563e     00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
05642     FF 00 00 18 
05646     3C 7E 7E 3C 
0564a     18 00 00 00 
0564e     3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
05652     7C 00 00 06 
05656     06 3E 66 66 
0565a     3E 00 00 00 
0565e     3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
05662     3C 00 00 60 
05666     60 7C 66 66 
0566a     7C 00 00 00 
0566e     3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
05672     3C 00 00 70 
05676     18 7C 18 18 
0567a     18 00 00 00 
0567e     7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
05682     60 3E 00 06 
05686     06 3E 66 66 
0568a     66 00 00 18 
0568e     00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
05692     3C 00 00 60 
05696     00 60 60 60 
0569a     60 3C 00 06 
0569e     06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
056a2     66 00 00 1C 
056a6     18 18 18 18 
056aa     3C 00 00 00 
056ae     66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
056b2     C6 00 00 00 
056b6     3E 66 66 66 
056ba     66 00 00 00 
056be     3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
056c2     3C 00 00 00 
056c6     3E 66 66 3E 
056ca     06 06 00 00 
056ce     7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
056d2     60 60 00 00 
056d6     3E 66 06 06 
056da     06 00 00 00 
056de     7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
056e2     3E 00 00 18 
056e6     7E 18 18 18 
056ea     70 00 00 00 
056ee     66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
056f2     7C 00 00 00 
056f6     66 66 66 3C 
056fa     18 00 00 00 
056fe     C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
05702     6C 00 00 00 
05706     66 3C 18 3C 
0570a     66 00 00 00 
0570e     66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
05712     30 1E 00 00 
05716     7E 30 18 0C 
0571a     7E 00 00 18 
0571e     3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
05722     3C 00 18 18 
05726     18 18 18 18 
0572a     18 18 00 7E 
0572e     1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
05732     60 00 10 18 
05736     1C 1E 1C 18 
0573a     10 00 08 18 
0573e     38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
05742     08 00       | 	byte	$08, $00
05744     00 6C FE FE 
05748     7C 38 10 00 
0574c     18 18 18 F8 
05750     F8 18 18 18 | a8_font2       file "atari8.fnt"
05754     C0 C0 C0 C0 
05758     C0 C0 C0 C0 | 	byte	$c0[8]
0575c     18 18 18 1F 
05760     1F 00 00 00 
05764     18 18 18 1F 
05768     1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
0576c     00 00 00 1F 
05770     1F 18 18 18 
05774     C0 E0 70 38 
05778     1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
0577c     03 07 0E 1C 
05780     38 70 E0 C0 
05784     80 C0 E0 F0 
05788     F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
0578c     00 00 00 00 
05790     F0 F0 F0 F0 
05794     01 03 07 0F 
05798     1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
0579c     F0 F0 F0 F0 
057a0     00 00 00 00 
057a4     0F 0F 0F 0F 
057a8     00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
057ac     FF FF 00 00 
057b0     00 00 00 00 
057b4     00 00 00 00 
057b8     00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
057bc     00 00 00 00 
057c0     0F 0F 0F 0F 
057c4     00 38 38 EE 
057c8     EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
057cc     00 00 00 F8 
057d0     F8 18 18 18 
057d4     00 00 00 FF 
057d8     FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
057dc     18 18 18 FF 
057e0     FF 18 18 18 
057e4     00 00 3C 7E 
057e8     7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
057ec     00 00 00 00 
057f0     FF FF FF FF 
057f4     03 03 03 03 
057f8     03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
057fc     00 00 00 FF 
05800     FF 18 18 18 
05804     18 18 18 FF 
05808     FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
0580c     0F 0F 0F 0F 
05810     0F 0F 0F 0F | 	byte	$0f[8]
05814     18 18 18 F8 
05818     F8 00 00 00 
0581c     1E 06 1E 06 
05820     7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
05824     00 18 3C 7E 
05828     18 18 18 00 
0582c     00 18 18 18 
05830     7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
05834     00 18 0C 7E 
05838     0C 18 00 00 
0583c     00 18 30 7E 
05840     30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
05844     00 00 00 00 
05848     00 00 00 00 
0584c     00          | 	byte	$00[9]
0584d     18 18 18 18 
05851     00 18 00 00 
05855     66 66 66 00 
05859     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
0585d     66 FF 66 66 
05861     FF 66 00 18 
05865     7C 06 3C 60 
05869     3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
0586d     66 36 18 0C 
05871     66 62 00 38 
05875     6C 38 1C F6 
05879     66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
0587d     18 18 18 00 
05881     00 00 00 00 
05885     70 38 18 18 
05889     38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
0588d     0E 1C 18 18 
05891     1C 0E 00 00 
05895     66 3C FF 3C 
05899     66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
0589d     18 18 7E 18 
058a1     18 00 00 00 
058a5     00 00 00 00 
058a9     18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
058ad     00 00 7E 00 
058b1     00 00 00 00 
058b5     00 00 00 00 
058b9     18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
058bd     60 30 18 0C 
058c1     06 02 00 00 
058c5     3C 66 76 6E 
058c9     66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
058cd     18 1C 18 18 
058d1     18 7E 00 00 
058d5     3C 66 30 18 
058d9     0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
058dd     7E 30 18 30 
058e1     66 3C 00 00 
058e5     30 38 3C 36 
058e9     7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
058ed     7E 06 3E 60 
058f1     66 3C 00 00 
058f5     3C 06 3E 66 
058f9     66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
058fd     7E 60 30 18 
05901     0C 0C 00 00 
05905     3C 66 3C 66 
05909     66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
0590d     3C 66 7C 60 
05911     30 1C 00 00 
05915     00 18 18 00 
05919     18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
0591d     00 18 18 00 
05921     18 18 0C 60 
05925     30 18 0C 18 
05929     30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
0592d     00 7E 00 00 
05931     7E 00 00 06 
05935     0C 18 30 18 
05939     0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
0593d     3C 66 30 18 
05941     00 18 00 00 
05945     3C 66 76 76 
05949     06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
0594d     18 3C 66 66 
05951     7E 66 00 00 
05955     3E 66 3E 66 
05959     66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
0595d     3C 66 06 06 
05961     66 3C 00 00 
05965     1E 36 66 66 
05969     36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
0596d     7E 06 3E 06 
05971     06 7E 00 00 
05975     7E 06 3E 06 
05979     06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
0597d     7C 06 06 76 
05981     66 7C 00 00 
05985     66 66 7E 66 
05989     66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
0598d     7E 18 18 18 
05991     18 7E 00 00 
05995     60 60 60 60 
05999     66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
0599d     66 36 1E 1E 
059a1     36 66 00 00 
059a5     06 06 06 06 
059a9     06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
059ad     C6 EE FE D6 
059b1     C6 C6 00 00 
059b5     66 6E 7E 7E 
059b9     76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
059bd     3C 66 66 66 
059c1     66 3C 00 00 
059c5     3E 66 66 3E 
059c9     06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
059cd     3C 66 66 66 
059d1     36 6C 00 00 
059d5     3E 66 66 3E 
059d9     36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
059dd     3C 06 3C 60 
059e1     60 3C 00 00 
059e5     7E 18 18 18 
059e9     18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
059ed     66 66 66 66 
059f1     66          | 	byte	$66[5]
059f2     7E 00 00 66 
059f6     66 66 66 3C 
059fa     18 00 00 C6 
059fe     C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
05a02     C6 00 00 66 
05a06     66 3C 3C 66 
05a0a     66 00 00 66 
05a0e     66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
05a12     18 00 00 7E 
05a16     30 18 0C 06 
05a1a     7E 00 00 78 
05a1e     18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
05a22     78 00 00 02 
05a26     06 0C 18 30 
05a2a     60 00 00 1E 
05a2e     18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
05a32     1E 00 00 10 
05a36     38 6C C6 00 
05a3a     00 00 00 00 
05a3e     00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
05a42     FF 00 00 18 
05a46     3C 7E 7E 3C 
05a4a     18 00 00 00 
05a4e     3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
05a52     7C 00 00 06 
05a56     06 3E 66 66 
05a5a     3E 00 00 00 
05a5e     3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
05a62     3C 00 00 60 
05a66     60 7C 66 66 
05a6a     7C 00 00 00 
05a6e     3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
05a72     3C 00 00 70 
05a76     18 7C 18 18 
05a7a     18 00 00 00 
05a7e     7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
05a82     60 3E 00 06 
05a86     06 3E 66 66 
05a8a     66 00 00 18 
05a8e     00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
05a92     3C 00 00 60 
05a96     00 60 60 60 
05a9a     60 3C 00 06 
05a9e     06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
05aa2     66 00 00 1C 
05aa6     18 18 18 18 
05aaa     3C 00 00 00 
05aae     66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
05ab2     C6 00 00 00 
05ab6     3E 66 66 66 
05aba     66 00 00 00 
05abe     3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
05ac2     3C 00 00 00 
05ac6     3E 66 66 3E 
05aca     06 06 00 00 
05ace     7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
05ad2     60 60 00 00 
05ad6     3E 66 06 06 
05ada     06 00 00 00 
05ade     7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
05ae2     3E 00 00 18 
05ae6     7E 18 18 18 
05aea     70 00 00 00 
05aee     66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
05af2     7C 00 00 00 
05af6     66 66 66 3C 
05afa     18 00 00 00 
05afe     C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
05b02     6C 00 00 00 
05b06     66 3C 18 3C 
05b0a     66 00 00 00 
05b0e     66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
05b12     30 1E 00 00 
05b16     7E 30 18 0C 
05b1a     7E 00 00 18 
05b1e     3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
05b22     3C 00 18 18 
05b26     18 18 18 18 
05b2a     18 18 00 7E 
05b2e     1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
05b32     60 00 10 18 
05b36     1C 1E 1C 18 
05b3a     10 00 08 18 
05b3e     38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
05b42     08 00       | 	byte	$08, $00
05b44     00 00 00 00 
      ...             
05d50     00 00 00 00 
05d54     00 00       | amiga_font     file "amigafont.def"
05d56     18 18 18 18 
05d5a     18 18       | 	byte	$18[6]
05d5c     00 18 18 00 
05d60     00 00 00 00 
05d64     00 00 66 66 
05d68     66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
05d6c     00 00 00 00 
05d70     00 00 00 00 
05d74     00 00       | 	byte	$00[10]
05d76     36 36 7F 36 
05d7a     36 36 7F 36 
05d7e     36 00 00 00 
05d82     00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
05d86     18 7C 06 06 
05d8a     3C 60 60 3E 
05d8e     18 00 00 00 
05d92     00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
05d96     00 00 C6 69 
05d9a     36 18 6C 96 
05d9e     63 00 00 00 
05da2     00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
05da6     1C 36 36 1E 
05daa     6E 3B 33 73 
05dae     DE 00 00 00 
05db2     00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
05db6     18 18 0C 00 
05dba     00 00 00 00 
05dbe     00 00 00 00 
05dc2     00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05dc6     30 18 0C 0C 
05dca     0C 0C 0C 18 
05dce     30 00 00 00 
05dd2     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
05dd6     0C 18 30 30 
05dda     30 30 30 18 
05dde     0C 00 00 00 
05de2     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
05de6     00 66 66 3C 
05dea     FF 3C 66 66 
05dee     00 00 00 00 
05df2     00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
05df6     00 18 18 18 
05dfa     7E 18 18 18 
05dfe     00 00 00 00 
05e02     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
05e06     00 00 00 00 
05e0a     00 00 00    | 	byte	$00[7]
05e0d     18 18 0C 00 
05e11     00 00 00 00 
05e15     00 00 00 00 
05e19     00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
05e1d     00 00 00 00 
05e21     00 00 00 00 
05e25     00 00 00 00 
05e29     00 00 00 00 | 	byte	$00[16]
05e2d     18 18 00 00 
05e31     00 00 00 00 
05e35     00 00 C0 60 
05e39     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
05e3d     03 00 00 00 
05e41     00 00 00 00 
05e45     00 3C 66 66 
05e49     76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
05e4d     66 3C 00 00 
05e51     00 00 00 00 
05e55     00 18 1C 1E 
05e59     18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
05e5d     18 18 00 00 
05e61     00 00 00 00 
05e65     00 3C 66 60 
05e69     60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
05e6d     06 7E 00 00 
05e71     00 00 00 00 
05e75     00 3C 66 60 
05e79     60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
05e7d     66 3C 00 00 
05e81     00 00 00 00 
05e85     00 30 38 3C 
05e89     36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
05e8d     30 30 00 00 
05e91     00 00 00 00 
05e95     00 7E 06 06 
05e99     3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
05e9d     66 3C 00 00 
05ea1     00 00 00 00 
05ea5     00 38 0C 06 
05ea9     06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
05ead     66 3C 00 00 
05eb1     00 00 00 00 
05eb5     00 7E 60 60 
05eb9     60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
05ebd     18 18 00 00 
05ec1     00 00 00 00 
05ec5     00 3C 66 66 
05ec9     66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
05ecd     66 3C 00 00 
05ed1     00 00 00 00 
05ed5     00 3C 66 66 
05ed9     66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
05edd     30 1C 00 00 
05ee1     00 00 00 00 
05ee5     00 00 00 18 
05ee9     18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
05eed     18 00 00 00 
05ef1     00 00 00 00 
05ef5     00 00 00 18 
05ef9     18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
05efd     18 18 0C 00 
05f01     00 00 00 00 
05f05     00 00 00 60 
05f09     18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
05f0d     00 00 00 00 
05f11     00 00 00 00 
05f15     00 00 00 00 | 	byte	$00[12]
05f19     7E 00 7E 00 
05f1d     00 00 00 00 
05f21     00 00 00 00 
05f25     00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
05f29     18 60 18 06 
05f2d     00 00 00 00 
05f31     00 00 00 00 
05f35     00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
05f39     60 30 18 00 
05f3d     18 18 00 00 
05f41     00 00 00 00 
05f45     00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
05f49     7B 6B 7B 03 
05f4d     03 1E 00 00 
05f51     00 00 00 00 
05f55     00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
05f59     63 7F 63 63 
05f5d     63 63 00 00 
05f61     00 00 00 00 
05f65     00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
05f69     66 3E 66 66 
05f6d     66 3E 00 00 
05f71     00 00 00 00 
05f75     00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
05f79     06 06 06 06 
05f7d     0C 78 00 00 
05f81     00 00 00 00 
05f85     00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
05f89     63 63 63 63 
05f8d     33 1F 00 00 
05f91     00 00 00 00 
05f95     00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
05f99     06 1E 06 06 
05f9d     06 7E 00 00 
05fa1     00 00 00 00 
05fa5     00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
05fa9     06 1E 06 06 
05fad     06 06 00 00 
05fb1     00 00 00 00 
05fb5     00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
05fb9     06 76 66 66 
05fbd     66 7C 00 00 
05fc1     00 00 00 00 
05fc5     00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
05fc9     63 7F 63 63 
05fcd     63 63 00 00 
05fd1     00 00 00 00 
05fd5     00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
05fd9     18 18 18 18 
05fdd     18          | 	byte	$18[5]
05fde     3C 00 00 00 
05fe2     00 00 00 00 
05fe6     60 60 60 60 
05fea     60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
05fee     3E 00 00 00 
05ff2     00 00 00 00 
05ff6     C3 63 33 1B 
05ffa     0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
05ffe     C3 00 00 00 
06002     00 00 00 00 
06006     03 03 03 03 
0600a     03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
0600e     7F 00 00 00 
06012     00 00 00 00 
06016     63 77 7F 6B 
0601a     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
0601e     63 00 00 00 
06022     00 00 00 00 
06026     63 67 6F 7B 
0602a     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
0602e     63 00 00 00 
06032     00 00 00 00 
06036     3E 63 63 63 
0603a     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
0603e     3E 00 00 00 
06042     00 00 00 00 
06046     3E 66 66 66 
0604a     3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
0604e     06 00 00 00 
06052     00 00 00 00 
06056     3E 63 63 63 
0605a     63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
0605e     FE 00 00 00 
06062     00 00 00 00 
06066     1F 33 33 33 
0606a     1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
0606e     63 00 00 00 
06072     00 00 00 00 
06076     3C 66 06 0C 
0607a     18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
0607e     3C 00 00 00 
06082     00 00 00 00 
06086     7E 18 18 18 
0608a     18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
0608e     18 00 00 00 
06092     00 00 00 00 
06096     63 63 63 63 
0609a     63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
0609e     3E 00 00 00 
060a2     00 00 00 00 
060a6     63 63 63 63 
060aa     63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
060ae     08 00 00 00 
060b2     00 00 00 00 
060b6     C3 C3 C3 C3 
060ba     C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
060be     C3 00 00 00 
060c2     00 00 00 00 
060c6     C3 C3 66 3C 
060ca     18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
060ce     C3 00 00 00 
060d2     00 00 00 00 
060d6     C3 C3 66 3C 
060da     18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
060de     18 00 00 00 
060e2     00 00 00 00 
060e6     7F 60 60 30 
060ea     18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
060ee     7F 00 00 00 
060f2     00 00 00 00 
060f6     3C 0C 0C 0C 
060fa     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
060fe     3C 00 00 00 
06102     00 00 00 00 
06106     00 03 06 0C 
0610a     18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
0610e     00 00 00 00 
06112     00 00 00 00 | 	byte	$00[8]
06116     3C 30 30 30 
0611a     30 30 30 30 
0611e     3C 00 00 00 
06122     00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
06126     08 1C 36 63 
0612a     00 00 00 00 
0612e     00 00 00 00 
06132     00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06136     00 00 00 00 
0613a     00 00 00 00 
0613e     00          | 	byte	$00[9]
0613f     7F 00 00 00 
06143     00 00 00 18 
06147     18 30 00 00 
0614b     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
0614f     00 00 00 00 
06153     00 00 00 00 
06157     00 00       | 	byte	$00[10]
06159     3C 60 7C 66 
0615d     66 7C 00 00 
06161     00 00 00 00 
06165     00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
06169     3E 66 66 66 
0616d     66 3E 00 00 
06171     00 00 00 00 
06175     00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06179     3C 06 06 06 
0617d     06 3C 00 00 
06181     00 00 00 00 
06185     00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
06189     7C 66 66 66 
0618d     66 7C 00 00 
06191     00 00 00 00 
06195     00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06199     3C 66 7E 06 
0619d     06 3C 00 00 
061a1     00 00 00 00 
061a5     00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
061a9     3E 0C 0C 0C 
061ad     0C 0C 00 00 
061b1     00 00 00 00 
061b5     00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
061b9     7C 66 66 66 
061bd     7C 60 60 3C 
061c1     00 00 00 00 
061c5     00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
061c9     3E 66 66 66 
061cd     66 66 00 00 
061d1     00 00 00 00 
061d5     00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
061d9     18 18 18 18 
061dd     18          | 	byte	$18[5]
061de     30 00 00 00 
061e2     00 00 00 00 
061e6     00 30 00 30 
061ea     30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
061ee     30 30 1E 00 
061f2     00 00 00 00 
061f6     03 03 03 33 
061fa     1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
061fe     63 00 00 00 
06202     00 00 00 00 
06206     18 18 18 18 
0620a     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
0620e     30 00 00 00 
06212     00 00 00 00 
06216     00 00 00 37 
0621a     7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
0621e     63 00 00 00 
06222     00 00 00 00 
06226     00 00 00 3E 
0622a     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
0622e     66 00 00 00 
06232     00 00 00 00 
06236     00 00 00 3C 
0623a     66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
0623e     3C 00 00 00 
06242     00 00 00 00 
06246     00 00 00 3E 
0624a     66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
0624e     06 06 06 00 
06252     00 00 00 00 
06256     00 00 00 7C 
0625a     66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
0625e     60 60 60 00 
06262     00 00 00 00 
06266     00 00 00 3E 
0626a     66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
0626e     06 00 00 00 
06272     00 00 00 00 
06276     00 00 00 3C 
0627a     06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
0627e     3E 00 00 00 
06282     00 00 00 00 
06286     00 0C 0C 3E 
0628a     0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
0628e     38 00 00 00 
06292     00 00 00 00 
06296     00 00 00 66 
0629a     66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
0629e     7C 00 00 00 
062a2     00 00 00 00 
062a6     00 00 00 66 
062aa     66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
062ae     18 00 00 00 
062b2     00 00 00 00 
062b6     00 00 00 63 
062ba     63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
062be     36 00 00 00 
062c2     00 00 00 00 
062c6     00 00 00 63 
062ca     36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
062ce     63 00 00 00 
062d2     00 00 00 00 
062d6     00 00 00 66 
062da     66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
062de     18 0C 06 00 
062e2     00 00 00 00 
062e6     00 00 00 7E 
062ea     30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
062ee     7E 00 00 00 
062f2     00 00 00 00 
062f6     70 18 18 18 
062fa     0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
062fe     70 00 00 00 
06302     00 00 00 00 
06306     18 18 18 18 
0630a     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
0630e     18 00 00 00 
06312     00 00 00 00 
06316     0E 18 18 18 
0631a     70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
0631e     0E 00 00 00 
06322     00 00 00 00 
06326     46 5D 31 00 
0632a     00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
0632e     00 00 00 00 
06332     00 00 00 00 | 	byte	$00[8]
06336     C0 F0 3C 0F 
0633a     C3 F0 3C 0F 
0633e     03 00 00 00 
06342     00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
06346     18 18 00 18 
0634a     18 18 18 18 
0634e     18 00 00 00 
06352     00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06356     18 18 7E 1B 
0635a     1B 7E 18 18 
0635e     00 00 00 00 
06362     00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
06366     78 CC 0C 0C 
0636a     1E 0C 0C 06 
0636e     7F 00 00 00 
06372     00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
06376     66 3C 66 66 
0637a     3C 66 00 00 
0637e     00 00 00 00 
06382     00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06386     C3 C3 66 3C 
0638a     18 7E 18 18 
0638e     18 00 00 00 
06392     00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06396     18 18 18 18 
0639a     00 18 18 18 
0639e     18 00 00 00 
063a2     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
063a6     3C 06 06 3C 
063aa     66 66 66 3C 
063ae     60 60 3C 00 
063b2     00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
063b6     66 66 00 00 
063ba     00 00 00 00 
063be     00 00 00 00 
063c2     00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
063c6     7E 81 B9 85 
063ca     85 B9 81 7E 
063ce     00 00 00 00 
063d2     00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
063d6     3C 33 33 7E 
063da     00 7F 00 00 
063de     00 00 00 00 
063e2     00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
063e6     00 00 CC 66 
063ea     33 66 CC 00 
063ee     00 00 00 00 
063f2     00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
063f6     7E 60 60 00 
063fa     00 00 00 00 
063fe     00 00 00 00 
06402     00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06406     7E 81 9D A5 
0640a     9D A5 81 7E 
0640e     00 00 00 00 
06412     00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
06416     7E 00 00 00 
0641a     00 00 00 00 
0641e     00 00 00 00 
06422     00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06426     3C 66 66 3C 
0642a     00 00 00 00 
0642e     00 00 00 00 
06432     00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06436     18 18 18 7E 
0643a     18 18 18 00 
0643e     7E 00 00 00 
06442     00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
06446     1E 30 30 18 
0644a     0C 06 3E 00 
0644e     00 00 00 00 
06452     00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
06456     1E 30 30 1C 
0645a     30 30 1E 00 
0645e     00 00 00 00 
06462     00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
06466     30 18 0C 06 
0646a     00 00 00 00 
0646e     00 00 00 00 
06472     00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06476     00 00 00 66 
0647a     66 66 66 66 
0647e     FE 06 06 00 
06482     00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
06486     7C 5E 5E 5E 
0648a     5C 50 50 50 
0648e     50 50 00 00 
06492     00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
06496     00 00 00 18 
0649a     18 00 00 00 
0649e     00 00 00 00 
064a2     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
064a6     00 00 00 00 
064aa     00 00 00 00 
064ae     00          | 	byte	$00[9]
064af     30 18 00 00 
064b3     00 00 00 18 
064b7     1C 18 18 18 
064bb     18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
064bf     00 00 00 00 
064c3     00 00 00    | 	byte	$00[7]
064c6     3C 66 66 3C 
064ca     00 7E 00 00 
064ce     00 00 00 00 
064d2     00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
064d6     00 00 33 66 
064da     CC 66 33 00 
064de     00 00 00 00 
064e2     00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
064e6     02 63 32 1A 
064ea     4E 66 F3 40 
064ee     40 00 00 00 
064f2     00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
064f6     04 C6 64 34 
064fa     7C 8C 46 23 
064fe     F0 00 00 00 
06502     00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
06506     03 C4 66 34 
0650a     5B 6C F6 43 
0650e     40 00 00 00 
06512     00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
06516     18 18 00 18 
0651a     0C 06 06 66 
0651e     3C 00 00 00 
06522     00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06526     06 0C 3E 63 
0652a     63 7F 63 63 
0652e     63 00 00 00 
06532     00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
06536     30 18 3E 63 
0653a     63 7F 63 63 
0653e     63 00 00 00 
06542     00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
06546     0C 33 3E 63 
0654a     63 63 7F 63 
0654e     63 00 00 00 
06552     00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
06556     4E 39 3E 63 
0655a     63 7F 63 63 
0655e     63 00 00 00 
06562     00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
06566     63 00 3E 63 
0656a     63 7F 63 63 
0656e     63 00 00 00 
06572     00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
06576     1C 22 1C 36 
0657a     63 63 7F 63 
0657e     63 00 00 00 
06582     00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
06586     F8 3C 3C 36 
0658a     F6 3F 33 33 
0658e     F3 00 00 00 
06592     00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
06596     78 0C 06 06 
0659a     06 06 06 0C 
0659e     78 30 18 00 
065a2     00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
065a6     0C 18 7E 06 
065aa     06 3E 06 06 
065ae     7E 00 00 00 
065b2     00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
065b6     30 18 7E 06 
065ba     06 3E 06 06 
065be     7E 00 00 00 
065c2     00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
065c6     18 66 7E 06 
065ca     06 3E 06 06 
065ce     7E 00 00 00 
065d2     00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
065d6     66 00 7E 06 
065da     06 3E 06 06 
065de     7E 00 00 00 
065e2     00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
065e6     0C 18 3C 18 
065ea     18 18 18 18 
065ee     3C 00 00 00 
065f2     00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
065f6     30 18 3C 18 
065fa     18 18 18 18 
065fe     3C 00 00 00 
06602     00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
06606     18 66 3C 18 
0660a     18 18 18 18 
0660e     3C 00 00 00 
06612     00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
06616     66 00 3C 18 
0661a     18 18 18 18 
0661e     3C 00 00 00 
06622     00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
06626     1E 36 66 66 
0662a     6F 66 66 36 
0662e     1E 00 00 00 
06632     00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
06636     8E 73 67 6F 
0663a     7B 73 63 63 
0663e     63 00 00 00 
06642     00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
06646     06 0C 3E 63 
0664a     63 63 63 63 
0664e     3E 00 00 00 
06652     00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
06656     30 18 3E 63 
0665a     63 63 63 63 
0665e     3E 00 00 00 
06662     00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
06666     0C 33 3E 63 
0666a     63 63 63 63 
0666e     3E 00 00 00 
06672     00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
06676     8E 71 3E 63 
0667a     63 63 63 63 
0667e     3E 00 00 00 
06682     00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
06686     63 00 3E 63 
0668a     63 63 63 63 
0668e     3E 00 00 00 
06692     00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
06696     00 00 63 36 
0669a     1C 1C 36 63 
0669e     00 00 00 00 
066a2     00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
066a6     BE 63 73 7B 
066aa     6B 6F 67 63 
066ae     3F 00 00 00 
066b2     00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
066b6     0C 18 63 63 
066ba     63 63 63 63 
066be     3E 00 00 00 
066c2     00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
066c6     18 0C 63 63 
066ca     63 63 63 63 
066ce     3E 00 00 00 
066d2     00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
066d6     08 36 63 63 
066da     63 63 63 63 
066de     3E 00 00 00 
066e2     00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
066e6     63 00 63 63 
066ea     63 63 63 63 
066ee     3E 00 00 00 
066f2     00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
066f6     30 18 C3 66 
066fa     3C 18 18 18 
066fe     18 00 00 00 
06702     00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06706     03 03 3F 63 
0670a     63 3F 03 03 
0670e     03 00 00 00 
06712     00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
06716     3C 66 66 66 
0671a     36 66 66 66 
0671e     36 06 06 00 
06722     00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
06726     06 0C 00 3C 
0672a     60 7C 66 66 
0672e     7C 00 00 00 
06732     00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06736     60 30 00 3C 
0673a     60 7C 66 66 
0673e     7C 00 00 00 
06742     00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06746     18 66 00 3C 
0674a     60 7C 66 66 
0674e     7C 00 00 00 
06752     00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06756     8E 71 00 3C 
0675a     60 7C 66 66 
0675e     7C 00 00 00 
06762     00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06766     00 66 00 3C 
0676a     60 7C 66 66 
0676e     7C 00 00 00 
06772     00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06776     18 24 18 3C 
0677a     60 7C 66 66 
0677e     7C 00 00 00 
06782     00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
06786     00 00 00 7E 
0678a     D8 FE 1B 1B 
0678e     EE 00 00 00 
06792     00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
06796     00 00 00 3C 
0679a     06 06 06 06 
0679e     3C 18 0C 00 
067a2     00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
067a6     06 0C 00 3C 
067aa     66 7E 06 06 
067ae     3C 00 00 00 
067b2     00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
067b6     60 30 00 3C 
067ba     66 7E 06 06 
067be     3C 00 00 00 
067c2     00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
067c6     18 66 00 3C 
067ca     66 7E 06 06 
067ce     3C 00 00 00 
067d2     00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
067d6     00 66 00 3C 
067da     66 7E 06 06 
067de     3C 00 00 00 
067e2     00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
067e6     0C 18 00 18 
067ea     18 18 18 18 
067ee     30 00 00 00 
067f2     00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
067f6     18 0C 00 0C 
067fa     0C 0C 0C 0C 
067fe     18 00 00 00 
06802     00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
06806     18 66 00 18 
0680a     18 18 18 18 
0680e     30 00 00 00 
06812     00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
06816     00 66 00 18 
0681a     18 18 18 18 
0681e     30 00 00 00 
06822     00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
06826     03 06 3F 18 
0682a     3C 66 66 66 
0682e     3C 00 00 00 
06832     00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06836     8E 71 00 3E 
0683a     66 66 66 66 
0683e     66 00 00 00 
06842     00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
06846     06 0C 00 3C 
0684a     66 66 66 66 
0684e     3C 00 00 00 
06852     00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06856     60 30 00 3C 
0685a     66 66 66 66 
0685e     3C 00 00 00 
06862     00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06866     18 66 00 3C 
0686a     66 66 66 66 
0686e     3C 00 00 00 
06872     00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06876     8E 71 00 3C 
0687a     66 66 66 66 
0687e     3C 00 00 00 
06882     00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06886     00 66 00 3C 
0688a     66 66 66 66 
0688e     3C 00 00 00 
06892     00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
06896     00 18 18 00 
0689a     7E 00 18 18 
0689e     00 00 00 00 
068a2     00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
068a6     00 00 00 7E 
068aa     73 7B 6F 67 
068ae     3F 00 00 00 
068b2     00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
068b6     0C 18 00 66 
068ba     66 66 66 66 
068be     7C 00 00 00 
068c2     00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
068c6     30 18 00 66 
068ca     66 66 66 66 
068ce     7C 00 00 00 
068d2     00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
068d6     18 66 00 66 
068da     66 66 66 66 
068de     7C 00 00 00 
068e2     00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
068e6     00 66 00 66 
068ea     66 66 66 66 
068ee     7C 00 00 00 
068f2     00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
068f6     30 18 00 66 
068fa     66 66 66 3C 
068fe     18 0C 06 00 
06902     00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
06906     06 06 06 3E 
0690a     66 66 66 3E 
0690e     06 06 06 00 
06912     00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
06916     00 66 00 66 
0691a     66 66 66 3C 
0691e     18 0C 06 00 
06922     00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
06926     00 7E 66 66 
0692a     66 66 66 66 
0692e     66 7E 00 00 
06932     00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
06936     00 00 00 00 
      ...             
06b3e     00 00 00 00 
06b42     00 00       | 	byte	$00[526]
06b44     00 00 00 00 
06b48     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
06b49     80 00 00 00 
06b4d     00 80 00 00 
06b51     80 80 00 00 
06b55     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
06b59     80 00 80 00 
06b5d     00 40 80 00 
06b61     AA AA AA 00 
06b65     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
06b69     FF 00 00 00 
06b6d     00 FF 00 00 
06b71     FF FF 00 00 
06b75     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
06b79     FF 00 FF 00 
06b7d     00 FF FF 00 
06b81     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
06b84     00 00 00 00 
06b88     00          | ataripalette   file "ataripalettep2.def"
06b89     11 11 11 00 
06b8d     22 22 22 00 
06b91     33 33 33 00 
06b95     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
06b99     55 55 55 00 
06b9d     66 66 66 00 
06ba1     77 77 77 00 
06ba5     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
06ba9     99 99 99 00 
06bad     AA AA AA 00 
06bb1     BB BB BB 00 
06bb5     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
06bb9     DD DD DD 00 
06bbd     EE EE EE 00 
06bc1     FF FF FF 00 
06bc5     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
06bc9     00 14 40 00 
06bcd     00 1E 60 00 
06bd1     00 28 80 00 
06bd5     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
06bd9     00 3C BF 00 
06bdd     00 46 DF 00 
06be1     00 50 FF 00 
06be5     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
06be9     39 77 FF 00 
06bed     55 8A FF 00 
06bf1     71 9E FF 00 
06bf5     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
06bf9     AA C5 FF 00 
06bfd     C6 D8 FF 00 
06c01     E3 EC FF 00 
06c05     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
06c09     00 00 40 00 
06c0d     00 00 60 00 
06c11     00 00 80 00 
06c15     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
06c19     00 00 BF 00 
06c1d     00 00 DF 00 
06c21     00 00 FF 00 
06c25     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
06c29     39 39 FF 00 
06c2d     55 55 FF 00 
06c31     71 71 FF 00 
06c35     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
06c39     AA AA FF 00 
06c3d     C6 C6 FF 00 
06c41     E3 E3 FF 00 
06c45     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
06c49     20 00 40 00 
06c4d     30 00 60 00 
06c51     40 00 80 00 
06c55     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
06c59     60 00 BF 00 
06c5d     70 00 DF 00 
06c61     80 00 FF 00 
06c65     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
06c69     9C 39 FF 00 
06c6d     AA 55 FF 00 
06c71     B8 71 FF 00 
06c75     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
06c79     D5 AA FF 00 
06c7d     E3 C6 FF 00 
06c81     F1 E3 FF 00 
06c85     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
06c89     40 00 40 00 
06c8d     60 00 60 00 
06c91     80 00 80 00 
06c95     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
06c99     BF 00 BF 00 
06c9d     DF 00 DF 00 
06ca1     FF 00 FF 00 
06ca5     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
06ca9     FF 39 FF 00 
06cad     FF 55 FF 00 
06cb1     FF 71 FF 00 
06cb5     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
06cb9     FF AA FF 00 
06cbd     FF C6 FF 00 
06cc1     FF E3 FF 00 
06cc5     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
06cc9     40 00 20 00 
06ccd     60 00 30 00 
06cd1     80 00 40 00 
06cd5     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
06cd9     BF 00 60 00 
06cdd     DF 00 70 00 
06ce1     FF 00 80 00 
06ce5     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
06ce9     FF 39 9C 00 
06ced     FF 55 AA 00 
06cf1     FF 71 B8 00 
06cf5     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
06cf9     FF AA D5 00 
06cfd     FF C6 E3 00 
06d01     FF E3 F1 00 
06d05     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
06d09     40 00 00 00 
06d0d     60 00 00 00 
06d11     80 00 00 00 
06d15     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
06d19     BF 00 00 00 
06d1d     DF 00 00 00 
06d21     FF 00 00 00 
06d25     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
06d29     FF 39 39 00 
06d2d     FF 55 55 00 
06d31     FF 71 71 00 
06d35     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
06d39     FF AA AA 00 
06d3d     FF C6 C6 00 
06d41     FF E3 E3 00 
06d45     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
06d49     40 10 00 00 
06d4d     60 18 00 00 
06d51     80 20 00 00 
06d55     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
06d59     BF 30 00 00 
06d5d     DF 38 00 00 
06d61     FF 40 00 00 
06d65     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
06d69     FF 6A 39 00 
06d6d     FF 80 55 00 
06d71     FF 95 71 00 
06d75     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
06d79     FF BF AA 00 
06d7d     FF D5 C6 00 
06d81     FF EA E3 00 
06d85     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
06d89     40 20 00 00 
06d8d     60 30 00 00 
06d91     80 40 00 00 
06d95     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
06d99     BF 60 00 00 
06d9d     DF 70 00 00 
06da1     FF 80 00 00 
06da5     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
06da9     FF 9C 39 00 
06dad     FF AA 55 00 
06db1     FF B8 71 00 
06db5     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
06db9     FF D5 AA 00 
06dbd     FF E3 C6 00 
06dc1     FF F1 E3 00 
06dc5     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
06dc9     40 30 00 00 
06dcd     60 48 00 00 
06dd1     80 60 00 00 
06dd5     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
06dd9     BF 90 00 00 
06ddd     DF A8 00 00 
06de1     FF C0 00 00 
06de5     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
06de9     FF CE 39 00 
06ded     FF D5 55 00 
06df1     FF DC 71 00 
06df5     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
06df9     FF EA AA 00 
06dfd     FF F1 C6 00 
06e01     FF F8 E3 00 
06e05     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
06e09     30 40 00 00 
06e0d     48 60 00 00 
06e11     60 80 00 00 
06e15     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
06e19     90 BF 00 00 
06e1d     A8 DF 00 00 
06e21     C0 FF 00 00 
06e25     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
06e29     CE FF 39 00 
06e2d     D5 FF 55 00 
06e31     DC FF 71 00 
06e35     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
06e39     EA FF AA 00 
06e3d     F1 FF C6 00 
06e41     F8 FF E3 00 
06e45     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
06e49     00 40 00 00 
06e4d     00 60 00 00 
06e51     00 80 00 00 
06e55     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
06e59     00 BF 00 00 
06e5d     00 DF 00 00 
06e61     00 FF 00 00 
06e65     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
06e69     39 FF 39 00 
06e6d     55 FF 55 00 
06e71     71 FF 71 00 
06e75     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
06e79     AA FF AA 00 
06e7d     C6 FF C6 00 
06e81     E3 FF E3 00 
06e85     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
06e89     00 40 14 00 
06e8d     00 60 1E 00 
06e91     00 80 28 00 
06e95     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
06e99     00 BF 3C 00 
06e9d     00 DF 46 00 
06ea1     00 FF 50 00 
06ea5     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
06ea9     39 FF 77 00 
06ead     55 FF 8A 00 
06eb1     71 FF 9E 00 
06eb5     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
06eb9     AA FF C5 00 
06ebd     C6 FF D8 00 
06ec1     E3 FF EC 00 
06ec5     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
06ec9     00 40 28 00 
06ecd     00 60 3C 00 
06ed1     00 80 50 00 
06ed5     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
06ed9     00 BF 78 00 
06edd     00 DF 8C 00 
06ee1     00 FF A0 00 
06ee5     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
06ee9     39 FF B5 00 
06eed     55 FF C0 00 
06ef1     71 FF CA 00 
06ef5     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
06ef9     AA FF DF 00 
06efd     C6 FF EA 00 
06f01     E3 FF F4 00 
06f05     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
06f09     00 40 40 00 
06f0d     00 60 60 00 
06f11     00 80 80 00 
06f15     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
06f19     00 BF BF 00 
06f1d     00 DF DF 00 
06f21     00 FF FF 00 
06f25     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
06f29     39 FF FF 00 
06f2d     55 FF FF 00 
06f31     71 FF FF 00 
06f35     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
06f39     AA FF FF 00 
06f3d     C6 FF FF 00 
06f41     E3 FF FF 00 
06f45     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
06f49     00 28 40 00 
06f4d     00 3C 60 00 
06f51     00 50 80 00 
06f55     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
06f59     00 78 BF 00 
06f5d     00 8C DF 00 
06f61     00 A0 FF 00 
06f65     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
06f69     39 B5 FF 00 
06f6d     55 C0 FF 00 
06f71     71 CA FF 00 
06f75     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
06f79     AA DF FF 00 
06f7d     C6 EA FF 00 
06f81     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
06f84     00 00 00 00 
06f88     00          | ataripalette2  file "ataripalettep2.def"
06f89     11 11 11 00 
06f8d     22 22 22 00 
06f91     33 33 33 00 
06f95     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
06f99     55 55 55 00 
06f9d     66 66 66 00 
06fa1     77 77 77 00 
06fa5     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
06fa9     99 99 99 00 
06fad     AA AA AA 00 
06fb1     BB BB BB 00 
06fb5     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
06fb9     DD DD DD 00 
06fbd     EE EE EE 00 
06fc1     FF FF FF 00 
06fc5     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
06fc9     00 14 40 00 
06fcd     00 1E 60 00 
06fd1     00 28 80 00 
06fd5     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
06fd9     00 3C BF 00 
06fdd     00 46 DF 00 
06fe1     00 50 FF 00 
06fe5     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
06fe9     39 77 FF 00 
06fed     55 8A FF 00 
06ff1     71 9E FF 00 
06ff5     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
06ff9     AA C5 FF 00 
06ffd     C6 D8 FF 00 
07001     E3 EC FF 00 
07005     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
07009     00 00 40 00 
0700d     00 00 60 00 
07011     00 00 80 00 
07015     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
07019     00 00 BF 00 
0701d     00 00 DF 00 
07021     00 00 FF 00 
07025     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
07029     39 39 FF 00 
0702d     55 55 FF 00 
07031     71 71 FF 00 
07035     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
07039     AA AA FF 00 
0703d     C6 C6 FF 00 
07041     E3 E3 FF 00 
07045     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
07049     20 00 40 00 
0704d     30 00 60 00 
07051     40 00 80 00 
07055     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
07059     60 00 BF 00 
0705d     70 00 DF 00 
07061     80 00 FF 00 
07065     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
07069     9C 39 FF 00 
0706d     AA 55 FF 00 
07071     B8 71 FF 00 
07075     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
07079     D5 AA FF 00 
0707d     E3 C6 FF 00 
07081     F1 E3 FF 00 
07085     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
07089     40 00 40 00 
0708d     60 00 60 00 
07091     80 00 80 00 
07095     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
07099     BF 00 BF 00 
0709d     DF 00 DF 00 
070a1     FF 00 FF 00 
070a5     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
070a9     FF 39 FF 00 
070ad     FF 55 FF 00 
070b1     FF 71 FF 00 
070b5     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
070b9     FF AA FF 00 
070bd     FF C6 FF 00 
070c1     FF E3 FF 00 
070c5     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
070c9     40 00 20 00 
070cd     60 00 30 00 
070d1     80 00 40 00 
070d5     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
070d9     BF 00 60 00 
070dd     DF 00 70 00 
070e1     FF 00 80 00 
070e5     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
070e9     FF 39 9C 00 
070ed     FF 55 AA 00 
070f1     FF 71 B8 00 
070f5     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
070f9     FF AA D5 00 
070fd     FF C6 E3 00 
07101     FF E3 F1 00 
07105     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
07109     40 00 00 00 
0710d     60 00 00 00 
07111     80 00 00 00 
07115     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
07119     BF 00 00 00 
0711d     DF 00 00 00 
07121     FF 00 00 00 
07125     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
07129     FF 39 39 00 
0712d     FF 55 55 00 
07131     FF 71 71 00 
07135     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
07139     FF AA AA 00 
0713d     FF C6 C6 00 
07141     FF E3 E3 00 
07145     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
07149     40 10 00 00 
0714d     60 18 00 00 
07151     80 20 00 00 
07155     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
07159     BF 30 00 00 
0715d     DF 38 00 00 
07161     FF 40 00 00 
07165     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
07169     FF 6A 39 00 
0716d     FF 80 55 00 
07171     FF 95 71 00 
07175     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
07179     FF BF AA 00 
0717d     FF D5 C6 00 
07181     FF EA E3 00 
07185     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
07189     40 20 00 00 
0718d     60 30 00 00 
07191     80 40 00 00 
07195     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
07199     BF 60 00 00 
0719d     DF 70 00 00 
071a1     FF 80 00 00 
071a5     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
071a9     FF 9C 39 00 
071ad     FF AA 55 00 
071b1     FF B8 71 00 
071b5     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
071b9     FF D5 AA 00 
071bd     FF E3 C6 00 
071c1     FF F1 E3 00 
071c5     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
071c9     40 30 00 00 
071cd     60 48 00 00 
071d1     80 60 00 00 
071d5     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
071d9     BF 90 00 00 
071dd     DF A8 00 00 
071e1     FF C0 00 00 
071e5     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
071e9     FF CE 39 00 
071ed     FF D5 55 00 
071f1     FF DC 71 00 
071f5     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
071f9     FF EA AA 00 
071fd     FF F1 C6 00 
07201     FF F8 E3 00 
07205     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
07209     30 40 00 00 
0720d     48 60 00 00 
07211     60 80 00 00 
07215     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
07219     90 BF 00 00 
0721d     A8 DF 00 00 
07221     C0 FF 00 00 
07225     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
07229     CE FF 39 00 
0722d     D5 FF 55 00 
07231     DC FF 71 00 
07235     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
07239     EA FF AA 00 
0723d     F1 FF C6 00 
07241     F8 FF E3 00 
07245     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
07249     00 40 00 00 
0724d     00 60 00 00 
07251     00 80 00 00 
07255     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
07259     00 BF 00 00 
0725d     00 DF 00 00 
07261     00 FF 00 00 
07265     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
07269     39 FF 39 00 
0726d     55 FF 55 00 
07271     71 FF 71 00 
07275     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
07279     AA FF AA 00 
0727d     C6 FF C6 00 
07281     E3 FF E3 00 
07285     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
07289     00 40 14 00 
0728d     00 60 1E 00 
07291     00 80 28 00 
07295     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
07299     00 BF 3C 00 
0729d     00 DF 46 00 
072a1     00 FF 50 00 
072a5     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
072a9     39 FF 77 00 
072ad     55 FF 8A 00 
072b1     71 FF 9E 00 
072b5     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
072b9     AA FF C5 00 
072bd     C6 FF D8 00 
072c1     E3 FF EC 00 
072c5     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
072c9     00 40 28 00 
072cd     00 60 3C 00 
072d1     00 80 50 00 
072d5     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
072d9     00 BF 78 00 
072dd     00 DF 8C 00 
072e1     00 FF A0 00 
072e5     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
072e9     39 FF B5 00 
072ed     55 FF C0 00 
072f1     71 FF CA 00 
072f5     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
072f9     AA FF DF 00 
072fd     C6 FF EA 00 
07301     E3 FF F4 00 
07305     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
07309     00 40 40 00 
0730d     00 60 60 00 
07311     00 80 80 00 
07315     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
07319     00 BF BF 00 
0731d     00 DF DF 00 
07321     00 FF FF 00 
07325     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
07329     39 FF FF 00 
0732d     55 FF FF 00 
07331     71 FF FF 00 
07335     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
07339     AA FF FF 00 
0733d     C6 FF FF 00 
07341     E3 FF FF 00 
07345     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
07349     00 28 40 00 
0734d     00 3C 60 00 
07351     00 50 80 00 
07355     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
07359     00 78 BF 00 
0735d     00 8C DF 00 
07361     00 A0 FF 00 
07365     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
07369     39 B5 FF 00 
0736d     55 C0 FF 00 
07371     71 CA FF 00 
07375     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
07379     AA DF FF 00 
0737d     C6 EA FF 00 
07381     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
07384                 | 
07384                 | '**********************************************************************************
07384                 | '
07384                 | '        Timings and colors definitions
07384                 | '
07384                 | '**********************************************************************************
07384                 | 
07384                 | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
07384     08 00 00 00 
07388     3C 00 00 00 
0738c     08 00 00 00 
07390     00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
07394     07 00 00 00 
07398     04 00 00 00 
0739c     01 00 00 00 
073a0     80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
073a4     58 02 00 00 
073a8     20 9E 4B 14 
073ac     FB A8 9E 01 
073b0     58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
073b4     00 00 00 00 
073b8     C0 00 00 00 
073bc     00 00 00 00 
073c0     00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
073c4                 | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
073c4     00 75 C7 97 
073c8     27 47 F6 0A 
073cc     05 79 CB 9B 
073d0     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
073d4                 | 
073d4                 | ''--------  Initialization  ----------------------------------------------------------------
073d4                 | 
073d4     28 0C 64 FD | hdmi            setq    #6
073d8     00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
073dc     28 10 64 FD |                 setq    #8
073e0     D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
073e4                 | 
073e4     1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
073e8     3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
073ec     C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
073f0     D6 C6 01 F1 |                 add     t1,hbase
073f4     58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
073f8     E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
073fc     7B 0B 80 5F 
07400     E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
07404     66 66 86 FF 
07408     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
0740c                 | '
0740c     D6 C6 01 F6 |                 mov 	t1,hbase			   '
07410     11 C6 65 F0 |                 shl 	t1,#17                             '
07414     E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
07418     02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
0741c                 | 
0741c     01 C6 61 FD |                 cogid   t1              		   ' get a cogid
07420     0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
07424     E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
07428                 | 
07428                 | ''--------  frame rendering main loop  ---------------------------------------------------
07428                 | 
07428     28 06 64 FD | p101            setq 	#3
0742c     00 A5 05 FB | 		rdlong  vblankptr,ptra
07430     28 6A 64 FD |                 setq    #47+6				   ' read sprite data
07434     D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
07438     00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
0743c     00 A0 05 F6 |                 mov     dlinum, #0
07440     01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
07444     D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
07448                 | 
07448                 | 
07448     00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
0744c     00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
07450     ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
07454                 |                 
07454                 | 
07454                 | 
07454                 | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
07454                 |   
07454     1F A8 15 F4 |                 testb   paletteptr,#31 wc
07458     29 FE 65 3D |          if_nc  setq2   #255
0745c     D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
07460                 | 
07460                 | '' -----   up porch (before the picture)
07460                 | 
07460     C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
07464     C1 C4 01 F6 |                 mov     hsync1,sync_001	
07468     40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
0746c     D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
07470                 |  
07470                 |    
07470                 |  
07470     E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
07474     E2 8C B1 FC |                 xzero   m_sn,hsync1
07478     60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
0747c     E1 8E C1 FC |                 xcont   m_bv,hsync0     
07480     E1 90 C1 FC |                 xcont   m_vi,hsync0
07484     DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
07488                 | 
07488     E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
0748c     E2 8C B1 FC |                 xzero   m_sn,hsync1
07490     48 00 B0 FD | 		call    #dli
07494     E1 8E C1 FC |                 xcont   m_bv,hsync0     
07498     E1 90 C1 FC |                 xcont   m_vi,hsync0
0749c     20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
074a0                 |                 	
074a0                 |                 
074a0                 | 
074a0                 |  
074a0                 | '' ------- the main screen drawing starts here
074a0                 | 
074a0     E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
074a4     E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
074a8     30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
074ac     E1 8E C1 FC |                 xcont   m_bv,hsync0
074b0     00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
074b4     01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
074b8     04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
074bc                 |               
074bc                 | 
074bc     CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
074c0     DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
074c4                 | 
074c4                 | ' ---------------- All visible lines displayed now, start vblank  
074c4                 | 
074c4     D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
074c8     28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
074cc     C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
074d0     C3 C4 01 F6 |                 mov     hsync1,sync_223
074d4     25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
074d8     4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
074dc                 | 
074dc                 | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
074dc                 | 
074dc                 | '' --------------- Display list interpreter ---------------------------------------------------------------------------
074dc                 | 
074dc     00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
074e0                 | 
074e0     DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
074e4     04 B8 05 A1 |     if_z        add     dlptr2,#4
074e8     14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
074ec                 | 
074ec     01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
074f0     EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
074f4     E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
074f8     EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
074fc     DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
07500                 | 
07500     DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
07504     DD C6 41 F8 |                 getnib  t1,dl,#0
07508     02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
0750c     70 00 90 AD |     if_z        jmp     #preload
07510     00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
07514     94 00 90 AD |     if_z        jmp     #preload2
07518     01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
0751c     0C 00 90 AD |     if_z        jmp     #p390
07520     03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
07524     28 00 90 AD |     if_z        jmp     #p391  
07528                 | 
07528     2D 00 64 FD | p308            ret
0752c                 |    
0752c     DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
07530     E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
07534     04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
07538     ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
0753c     E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
07540     E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
07544     04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
07548     04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
0754c     8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
07550                 |  
07550                 | '' --------  Reload palette. To do 
07550                 | 
07550     E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
07554     04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
07558     0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
0755c     29 1E 64 FD |          	setq2   #15				   ' load 16 entries
07560     00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
07564     E0 00 00 FB |         	rdlong  $000, framebuf2         	
07568     70 FF 9F FD |         	jmp     #dli                
0756c                 |       
0756c                 | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
0756c                 | 
0756c                 | 
0756c                 | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
0756c                 | 
0756c     E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
07570     E2 8C B1 FC |                 xzero   m_sn,hsync1
07574     E1 8E C1 FC |                 xcont   m_bv,hsync0     
07578     E1 90 C1 FC |                 xcont   m_vi,hsync0
0757c     FB ED 6F 0B |         _ret_   djnz    pa,#blank
07580                 |         
07580                 | '' -------------- Preload a line from PSRAM        
07580                 |         
07580     D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
07584     0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
07588     DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
0758c     DE B4 01 F6 |                 mov     buf1,buf1c
07590     03 A0 05 F7 |                 incmod  dlinum,#3
07594                 | 
07594     04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
07598     32 B7 01 F6 |                 mov     buf2,a1024
0759c     E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
075a0     0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
075a4     28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
075a8     D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
075ac                 |  
075ac                 |  
075ac                 | preload2      '  incmod  dlinum,#3
075ac     04 C0 45 F0 |                 shr 	framebuf2,#4
075b0     ED B2 01 F6 |                 mov 	cmd,affffffff
075b4     E0 B4 01 F6 |                 mov 	buf1,framebuf2
075b8     28 02 64 FD |                 setq	#1
075bc     D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
075c0                 |                 
075c0                 | 
075c0                 | '' -------------- Draw sprites
075c0                 | 
075c0     CF 5C 02 F6 | sprite          mov t8,frames
075c4     10 5C 0E F5 | 		and t8,#16 wz
075c8     11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
075cc     10 48 06 A6 | 	if_z    mov spritenum, #16	
075d0                 | 		
075d0                 | 
075d0     24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
075d4     03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
075d8     EF 56 96 F9 |                 alts    t5,#sprite1xy
075dc     00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
075e0     0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
075e4     EF 56 96 F9 |                 alts    t5,#sprite1xy
075e8     00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
075ec     0F 4C 66 F7 |                 signx	sprite_x,#15
075f0     F0 56 96 F9 |                 alts    t5,#sprite1wh
075f4     00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
075f8     01 52 86 F1 |                 sub     sprite_h,#1
075fc     F0 56 96 F9 |                 alts    t5,#sprite1wh
07600     00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
07604                 | 
07604                 | 
07604     32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
07608     BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
0760c     00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
07610     B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
07614     00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
07618     AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
0761c     00 5E 06 F6 |                 mov 	t9,#0
07620     28 5F 82 F1 |                 sub 	t9,sprite_w                      	
07624     2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
07628     9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
0762c                 |      
0762c     CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
07630     27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
07634     90 00 90 CD |      if_c       jmp     #p801				' if not, go out
07638     29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
0763c     88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
07640                 |                 
07640     25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
07644     0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
07648     DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
0764c                 |   		
0764c     1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
07650     26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
07654                 | 
07654     28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
07658     26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
0765c     26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
07660                 |  
07660     EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
07664     00 C8 01 F1 |                 add     t2,0-0				' then add the offset
07668     10 00 90 CD |      if_c 	jmp     #p899		
0766c                 | 	
0766c                 | 	
0766c     26 CD 01 F6 | 		mov 	t4,sprite_x	'
07670     28 CD 01 F1 | 		add	t4,sprite_w
07674     32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
07678                 | 
07678     E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
0767c                 | 
0767c     28 59 02 F6 | p899		mov 	t6,sprite_w
07680     01 58 86 F1 | 	 	sub     t6,#1
07684     02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
07688                 | 
07688     28 58 62 FD |                 setq   	t6
0768c     E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
07690     28 5D 02 F6 |                 mov t8,sprite_w
07694     03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
07698     24 00 90 AD |         if_z    jmp #p898
0769c                 |          
0769c                 |         
0769c     70 5F 06 F6 |                 mov  t9,#368
076a0     2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
076a4                 | 
076a4     04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
076a8     08 5C 06 FA |                 mul t8,#8				' bits to shr
076ac     FF FF 7F FF 
076b0     FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
076b4     2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
076b8     00 5E 8E F9 |                 altd t9,#0				' and mask 
076bc     2D 01 00 F5 |                 and 0-0, t7
076c0                 |                
076c0                 | 
076c0     28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
076c4     E5 E0 7A FA |                 wmlong 368,t3				
076c8                 |                 
076c8     C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
076cc     03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
076d0     2D 00 64 FD |                 ret
076d4                 | 	
076d4                 | 	
076d4                 |                
076d4                 |  
076d4                 | '' -------------- Graphics line ------------------------------------------------------------
076d4                 |  
076d4                 | 
076d4                 | '' consts and vars
076d4                 | 
076d4     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
076d8     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
076dc     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
076e0     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
076e4                 | 
076e4     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
076e8                 | 
076e8                 | '------ these longs will be set by setmode function
076e8                 | 
076e8     00 00 00 00 | m_bs            long    0        'blanks before sync
076ec     00 00 00 00 | m_sn            long    0        'sync
076f0     00 00 00 00 | m_bv            long    0        'blanks before visible
076f4     00 00 00 00 | m_vi            long    0        'visible pixels #
076f8                 | 'm_border        long    0        'left/right borders
076f8     00 00 00 00 | i_upporch       long    0        'up porch lines
076fc     00 00 00 00 | i_vsync         long    0        'vsync lines
07700     00 00 00 00 | i_downporch     long    0        'down porch lines
07704     00 00 00 00 | i_cpl           long    0        'chars/longs per line
07708     00 00 00 00 | i_totalvis      long    0
0770c                 | 
0770c                 | '-------------------------------------
0770c                 |  
0770c     00 00 00 00 | linenum         long    0
07710     00 00 00 00 | frames          long    0
07714     00 00 00 00 | dlinum long 0
07718     00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
0771c                 | 
0771c     00 00 00 00 | vblankptr       long    0
07720     00 00 00 00 | modeptr         long    0
07724     00 00 00 00 | paletteptr      long    0
07728     00 00 00 00 | dlptr           long    0
0772c     01 00 00 00 | hbase           long    1
07730     00 00 00 00 | mailbox         long    0
07734     00 00 00 00 | spriteptr          long 0
07738                 | 
07738     00 00 00 00 | cmd             long    0
0773c     00 EC 07 00 | buf1            long    $80000-1024-4096
07740     00 04 00 00 | buf2            long    1024
07744     01 00 00 00 | dlptr2          long    1
07748     01 00 00 00 | dl              long    1
0774c                 | 
0774c     00 00 00 00 | buf1c long 0
07750     00 EC 07 00 | buf1d            long    $80000-1024-4096
07754     01 00 00 00 | framebuf2       long    1
07758     01 00 00 00 | hsync0          long    1
0775c     01 00 00 00 | hsync1          long    1
07760                 | 
07760     01 00 00 00 | t1              long    1
07764     00 00 00 00 | t2 long 0
07768     00 00 00 00 | t3 long 0
0776c     00 00 00 00 | t4 long 0
07770                 | 
07770     00 00 00 00 | rcnt            long    0  'dl repeat count
07774     00 00 00 00 | rcnt2           long    0
07778     00 00 00 00 | rcnt2a          long    0
0777c     00 00 00 00 | roffset         long    0
07780     00 00 00 00 | rdl             long    0  'dl repeat line
07784     00 00 00 00 | dlc             long    0  'dl command
07788                 | 
07788     FF FF FF FF | affffffff       long    $ffffffff
0778c     00 00 00 00 | sprite1pointer long 0
07790     00 00 00 00 | sprite1xy      long 0
07794     00 00 00 00 | sprite1wh      long 0
07798     00 00 00 00 | sprite2pointer long 0
0779c     00 00 00 00 | sprite2xy      long 0
077a0     00 00 00 00 | sprite2wh      long 0
077a4     00 00 00 00 | sprite3pointer long 0
077a8     00 00 00 00 | sprite3xy      long 0
077ac     00 00 00 00 | sprite3wh      long 0
077b0     00 00 00 00 | sprite4pointer long 0
077b4     00 00 00 00 | sprite4xy      long 0
077b8     00 00 00 00 | sprite4wh      long 0
077bc     00 00 00 00 | sprite5pointer long 0
077c0     00 00 00 00 | sprite5xy      long 0
077c4     00 00 00 00 | sprite5wh      long 0
077c8     00 00 00 00 | sprite6pointer long 0
077cc     00 00 00 00 | sprite6xy      long 0
077d0     00 00 00 00 | sprite6wh      long 0
077d4     00 00 00 00 | sprite7pointer long 0
077d8     00 00 00 00 | sprite7xy      long 0
077dc     00 00 00 00 | sprite7wh      long 0
077e0     00 00 00 00 | sprite8pointer long 0
077e4     00 00 00 00 | sprite8xy      long 0
077e8     00 00 00 00 | sprite8wh      long 0
077ec     00 00 00 00 | sprite9pointer long 0
077f0     00 00 00 00 | sprite9xy      long 0
077f4     00 00 00 00 | sprite9wh      long 0
077f8     00 00 00 00 | sprite10pointer long 0
077fc     00 00 00 00 | sprite10xy      long 0
07800     00 00 00 00 | sprite10wh      long 0
07804     00 00 00 00 | sprite11pointer long 0
07808     00 00 00 00 | sprite11xy      long 0
0780c     00 00 00 00 | sprite11wh      long 0
07810     00 00 00 00 | sprite12pointer long 0
07814     00 00 00 00 | sprite12xy      long 0
07818     00 00 00 00 | sprite12wh      long 0
0781c     00 00 00 00 | sprite13pointer long 0
07820     00 00 00 00 | sprite13xy      long 0
07824     00 00 00 00 | sprite13wh      long 0
07828     00 00 00 00 | sprite14pointer long 0
0782c     00 00 00 00 | sprite14xy      long 0
07830     00 00 00 00 | sprite14wh      long 0
07834     00 00 00 00 | sprite15pointer long 0
07838     00 00 00 00 | sprite15xy      long 0
0783c     00 00 00 00 | sprite15wh      long 0
07840     00 00 00 00 | sprite16pointer long 0
07844     00 00 00 00 | sprite16xy      long 0
07848     00 00 00 00 | sprite16wh      long 0
0784c     00 00 00 00 | sprite17pointer long 0
07850     00 00 00 00 | sprite17xy      long 0
07854     00 00 00 00 | sprite17wh      long 0
07858     00 00 00 00 | sprite18pointer long 0
0785c     00 00 00 00 | sprite18xy      long 0
07860     00 00 00 00 | sprite18wh      long 0
07864     00 00 00 00 | spritenum long 0
07868                 | 
07868     00 00 00 00 | spriteline long 0
0786c     84 03 00 00 | sprite_x long 900
07870     00 00 00 00 | sprite_y long 0
07874     10 00 00 00 | sprite_w long 16
07878     40 00 00 00 | sprite_h long 64
0787c     00 00 00 00 | l2 long 0
07880     00 00 00 00 | t5 long 0
07884     00 00 00 00 | t6 long 0
07888     00 00 00 00 | t7 long 0
0788c     00 00 00 00 | t8 long 0
07890     00 00 00 00 | t9 long 0
07894     00 00 00 00 | preloadaddr long 0
07898     00 00 00 00 | preloadlineaddr long 0
0789c     00 04 00 00 | a1024 long 1024
078a0                 | 
078a0     E0 03 00 00 | aa long 992
078a4     FF 03 00 00 | a1023 long 1023
078a8     00 10 00 00 | a4096 long 4096
078ac                 |  fit 368
078ac                 |  fit 368
078ac                 | _psram_spin2_dat_
078ac     00 00 00 00 
      ...             
079a4     00 00 00 00 
079a8     00 00 00 00 |     listdata long 0[8*8]
079ac                 |             orgh
079ac                 | 
079ac                 | ' driver state
079ac     FF FF FF FF | drivercog   long    -1  ' COG id of driver
079b0     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
079b4                 | 
079b4                 | ' delay profile
079b4     07 00 00 00 
079b8     00 CF 7B 05 
079bc     80 D1 F0 08 
079c0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
079c4     80 C4 60 0F 
079c8     80 39 7A 12 
079cc     40 2D D9 13 
079d0     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
079d4                 | 
079d4                 | ' data to be passed to driver when starting it
079d4                 | startupData
079d4     00 00 00 00 |     long    0           ' current frequency
079d8     00 00 00 00 |     long    FLAGS       ' optional flags for driver
079dc     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
079e0     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
079e4     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
079e8     F4 79 00 00 |     long    deviceData  ' address of devices data structure in HUBRAM
079ec     74 7A 00 00 |     long    qosData     ' address of QoS data structure in HUBRAM
079f0     94 7A 00 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
079f4                 | 
079f4                 | ' data for memory
079f4                 | deviceData
079f4                 |     ' 16 bank parameters follow (16MB per bank)
079f4     00 00 00 00 
      ...             
07a2c     00 00 00 00 
07a30     00 00 00 00 |     long    0[16]                               ' banks 0-15
07a34                 |     ' 16 banks of pin parameters follow
07a34     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
07a38     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
07a3c     FF FF FF FF 
      ...             
07a6c     FF FF FF FF 
07a70     FF FF FF FF |     long    -1[14]                              ' banks 2-15
07a74                 | 
07a74                 | ' data for COG polling
07a74                 | qosData 
07a74     00 00 FF FF 
07a78     00 00 FF FF 
07a7c     00 00 FF FF 
07a80     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
07a84     00 00 FF FF 
07a88     00 00 FF FF 
07a8c     00 00 FF FF 
07a90     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
07a94                 |     
07a94                 | ' mailbox storage
07a94                 | 
07a94                 | mailboxes
07a94     00 00 00 00 
      ...             
07aec     00 00 00 00 
07af0     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
07af4                 | 	alignl
07af4                 | _psram16drv_spin2_dat_
07af4                 |                             orgh
07af4     00 00 00 00 
      ...             
07b0c     00 00 00 00 
07b10     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
07b14                 | 
07b14                 | driver_start
07b14                 |                             org
07b14 000             | '..................................................................................................
07b14 000             | ' Memory layout for COG RAM once operational:
07b14 000             | '
07b14 000             | '  COG RAM address      Usage
07b14 000             | '  ---------------      ----
07b14 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
07b14 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
07b14 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
07b14 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
07b14 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
07b14 000             | '  ~$198-$1F3           State and register variables
07b14 000             | '
07b14 000             | ' Also during driver COG startup:
07b14 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
07b14 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
07b14 000             | '..................................................................................................
07b14 000             |                             
07b14 000             | ' Mailbox storage after vector initialization
07b14 000             | 
07b14 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
07b18 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
07b1c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
07b20 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
07b24 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
07b28 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
07b2c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
07b30 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
07b34 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
07b38 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
07b3c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
07b40 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
07b44 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
07b48 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
07b4c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
07b50 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
07b54 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
07b58 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
07b5c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
07b60 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
07b64 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
07b68 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
07b6c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
07b70 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
07b74 018             | 
07b74 018             | ' Mailbox parameter addresses per COG once patched
07b74 018             |                             
07b74 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
07b78 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
07b7c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
07b80 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
07b84 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
07b88 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
07b8c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
07b90 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
07b94 020             | 
07b94 020             | '..................................................................................................
07b94 020             | ' Per COG request and state setup and service branching
07b94 020             |         
07b94 020             | cog0                 
07b94 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
07b98 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
07b9c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
07ba0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
07ba4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07ba8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07bac 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
07bb0 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
07bb4 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
07bb8 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07bbc 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07bc0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
07bc4 02c             | cog1                        
07bc4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
07bc8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
07bcc 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
07bd0 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
07bd4 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07bd8 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07bdc 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
07be0 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
07be4 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
07be8 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07bec 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07bf0 037 33 CA 63 FD |                             execf   request-0               'jump to service
07bf4 038             | cog2                         
07bf4 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
07bf8 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
07bfc 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
07c00 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
07c04 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07c08 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07c0c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
07c10 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
07c14 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
07c18 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07c1c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07c20 043 33 CA 63 FD |                             execf   request-0               'jump to service
07c24 044             | cog3                        
07c24 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
07c28 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
07c2c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
07c30 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
07c34 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07c38 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07c3c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
07c40 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
07c44 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
07c48 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07c4c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07c50 04f 33 CA 63 FD |                             execf   request-0               'jump to service
07c54 050             | cog4                        
07c54 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
07c58 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
07c5c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
07c60 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
07c64 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07c68 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07c6c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
07c70 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
07c74 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
07c78 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07c7c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07c80 05b 33 CA 63 FD |                             execf   request-0               'jump to service
07c84 05c             | cog5                        
07c84 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
07c88 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
07c8c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
07c90 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
07c94 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07c98 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07c9c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
07ca0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
07ca4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
07ca8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07cac 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07cb0 067 33 CA 63 FD |                             execf   request-0               'jump to service
07cb4 068             | cog6                        
07cb4 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
07cb8 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
07cbc 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
07cc0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
07cc4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07cc8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07ccc 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
07cd0 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
07cd4 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
07cd8 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07cdc 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07ce0 073 33 CA 63 FD |                             execf   request-0               'jump to service
07ce4 074             | cog7                        
07ce4 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
07ce8 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
07cec 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
07cf0 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
07cf4 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
07cf8 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
07cfc 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
07d00 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
07d04 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
07d08 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
07d0c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
07d10 07f 33 CA 63 FD |                             execf   request-0               'jump to service
07d14 080             | 
07d14 080             |                             fit     128
07d14 080             |                             fit     128
07d14 080             | pad                         long    0[128-$]                'align init code to $80
07d14 080             | 
07d14 080             | '..................................................................................................
07d14 080             | 
07d14 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
07d14 080             | 
07d14 080             | init                        
07d14 080             |                             ' get driver scratch long address in hub
07d14 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
07d18 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
07d1c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
07d20 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
07d24 084             |                     
07d24 084             |                             ' read in the additional LUT RAM code
07d24 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
07d28 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
07d2c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
07d30 087             | 
07d30 087             |                             ' read the startup parameters
07d30 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
07d34 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
07d38 089             | 
07d38 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
07d38 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
07d3c 08a             | 
07d3c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
07d40 08b 01 00 00 5F 
07d44 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
07d48 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
07d4c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
07d50 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
07d54 090             | 
07d54 090             |                             ' setup data pin modes and data bus pin group in streamer commands
07d54 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
07d58 091 01 00 00 FF 
07d5c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
07d60 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
07d64 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
07d68 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
07d6c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
07d70 097 08 DE 47 F5 |                             or      a, #8
07d74 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
07d78 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
07d7c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
07d80 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
07d84 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
07d88 09d 01 DE 07 F1 |                             add     a, #1
07d8c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
07d90 09f             |  
07d90 09f             |                             ' setup device control pin states
07d90 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
07d94 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
07d98 0a1 01 00 00 FF 
07d9c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
07da0 0a3             | 
07da0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
07da4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
07da8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
07dac 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
07db0 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
07db4 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
07db8 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
07dbc 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
07dc0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
07dc4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
07dc8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
07dcc 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
07dd0 0af             | pinloop
07dd0 0af             |                             ' generate minimum CE high time before access
07dd0 0af A1 07 00 FF 
07dd4 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
07dd8 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
07ddc 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
07de0 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
07de4 0b4 1F DE 63 FD |                             waitx   a                       'delay
07de8 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
07dec 0b6             | 
07dec 0b6             |                             ' setup the COG mailboxes and addresses 
07dec 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
07df0 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
07df4 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
07df8 0b9             | 
07df8 0b9 28 2E 64 FD |                             setq    #24-1
07dfc 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
07e00 0bb             | 
07e00 0bb             |                             ' setup the polling loop for active COGs 
07e00 0bb 01 C2 63 FD |                             cogid   id
07e04 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
07e08 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
07e0c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
07e10 0bf 0A F0 07 F6 |                             mov     ptra, #10
07e14 0c0 E1 F1 03 FA |                             mul     ptra, id
07e18 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
07e1c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
07e20 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
07e24 0c4 03 C2 07 FA |                             mul     id, #3
07e28 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
07e2c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
07e30 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
07e34 0c8 D8 01 B0 FD |                             call    #reloadcogs
07e38 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
07e3c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
07e40 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
07e40 0cb D8 E5 B7 F9 |                             setd    d, #addr1
07e44 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
07e48 0cd 08 04 DC FC |                             rep     #2, #8
07e4c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
07e50 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
07e54 0d0             | 
07e54 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
07e54 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
07e54 0d0 01 C2 63 FD |                             cogid   id
07e58 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
07e5c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
07e60 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
07e64 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
07e68 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
07e6c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
07e70 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
07e74 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
07e78 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
07e7c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
07e80 0db 3F E4 A7 F9 |                             alti    d, #%111_111
07e84 0dc 00 00 00 F6 |                             mov     0-0, 0-0
07e88 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
07e8c 0de A5 E5 03 F1 |                             add     d, const512
07e90 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
07e94 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
07e98 0e1 00 00 00 F6 |                             mov     0-0, 0-0
07e9c 0e2             |                             
07e9c 0e2             |                             ' setup register values for control vector loop setup after we return
07e9c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
07ea0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
07ea4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
07ea8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
07eac 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
07eb0 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
07eb4 0e8 D0 C3 8F F9 |                             altd    id, #id0
07eb8 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
07ebc 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
07ec0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
07ec4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
07ec8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
07ecc 0ee             |  
07ecc 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
07ed0 0ef 07 CA 07 F5 |                             and     request, #7
07ed4 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
07ed8 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
07edc 0f2             | 
07edc 0f2             |                             fit     $100                    'ensure all init code fits this space
07edc 0f2             |                             fit     $100                    'ensure all init code fits this space
07edc 0f2             | 
07edc 0f2 00 00 00 00 
      ...             
07f0c 0fe 00 00 00 00 
07f10 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
07f14 100             | 
07f14 100             | '..................................................................................................
07f14 100             | ' Error result handling and COG notification of request completion
07f14 100             | 
07f14 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
07f18 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
07f1c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
07f20 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
07f24 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
07f28 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
07f2c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
07f30 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
07f34 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
07f38 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
07f3c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
07f40 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
07f44 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
07f48 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
07f4c 10e             | ' Poller re-starts here after a COG is serviced
07f4c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
07f50 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
07f54 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
07f58 111             | ' Main dynamic polling loop repeats until a request arrives
07f58 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
07f5c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
07f60 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
07f64 114             | 
07f64 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
07f68 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
07f6c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
07f70 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
07f74 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
07f78 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
07f7c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
07f80 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
07f84 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
07f88 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
07f8c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
07f90 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
07f94 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
07f98 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
07f9c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
07fa0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
07fa4 124             | 
07fa4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
07fa8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
07fac 126             |  
07fac 126             | '..................................................................................................
07fac 126             | ' List handler                               
07fac 126             | 
07fac 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
07fb0 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
07fb4 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
07fb8 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
07fbc 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
07fc0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
07fc4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
07fc8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
07fcc 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
07fd0 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
07fd4 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
07fd8 131 33 00 60 FD |                             execf   0-0                     'process the request 
07fdc 132             | 
07fdc 132             | '..................................................................................................
07fdc 132             | ' Restoring per COG state and resuming where we left off
07fdc 132             | 
07fdc 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
07fe0 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
07fe4 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
07fe8 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
07fec 136 D8 CB FB F8 |                             getbyte request, addr1, #3
07ff0 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
07ff4 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
07ff8 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
07ffc 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
08000 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
08004 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
08008 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
0800c 13e             |                    
0800c 13e             | '..................................................................................................
0800c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
0800c 13e             | 
0800c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
08010 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
08014 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
08018 141 D0 DF B7 F9 |                             setd    a, #id0
0801c 142 D8 DF BF F9 |                             sets    a, #addr1
08020 143 FE FF FF FF 
08024 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
08028 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
0802c 146 3F DE A7 F9 |                             alti    a, #%111_111 
08030 147 00 00 F0 F9 |                             muxq    0-0, 0-0
08034 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
08038 149 01 E2 63 FD |                             cogid   c
0803c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
08040 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
08044 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
08048 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
0804c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
08050 14f 00 E0 03 F6 |                             mov     b, 0-0
08054 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
08058 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
0805c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
08060 153 0C 00 90 AD |             if_z            jmp     #excluded               
08064 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
08068 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
0806c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
08070 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
08074 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
08078 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
0807c 15a             | 
0807c 15a             | 'determine priority cogs and build instructions for the polling sequence
0807c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
08080 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
08084 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
08088 15d             | 
08088 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
0808c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
08090 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
08094 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
08098 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
0809c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
080a0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
080a4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
080a8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
080ac 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
080b0 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
080b4 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
080b8 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
080bc 16a             | endprioloop
080bc 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
080c0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
080c4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
080c8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
080cc 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
080d0 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
080d4 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
080d8 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
080dc 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
080e0 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
080e4 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
080e8 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
080ec 176             | 
080ec 176             | ' populate the round robin COG polling instructions
080ec 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
080f0 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
080f4 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
080f8 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
080fc 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
08100 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
08104 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
08108 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
0810c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
08110 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
08114 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
08118 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
0811c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
08120 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
08124 184             | '..................................................................................................
08124 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
08124 184             | 
08124 184             | set_latency                                                 '            (a) set latency
08124 184             | get_latency                                                 '            (b) get latency
08124 184             | set_burst                                                   '            (c) set burst size of bank
08124 184             | get_burst                                                   '            (d) get burst size of bank
08124 184             |                                                             '            (e) dump state
08124 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
08128 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
0812c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
08130 187             |                                                             ' | | | | e  account for following AUGS
08130 187 04 00 00 FF 
08134 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
08138 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
0813c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
08140 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
08144 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
08148 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
0814c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
08150 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
08154 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
08158 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
0815c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
08160 193             | 
08160 193             | '..................................................................................................
08160 193             | ' Misc EXECF code
08160 193             | 
08160 193 33 72 63 FD | start_read_exec             execf   newburstr
08164 194 33 7C 63 FD | start_write_exec            execf   resumewrites
08168 195 33 78 63 FD | continue_read_exec          execf   lockedreads
0816c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
08170 197             | 
08170 197             | '..................................................................................................
08170 197             | ' Variables
08170 197             | 
08170 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
08174 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
08178 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
0817c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
08180 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
08184 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
08188 19d             | 
08188 19d 00 00 00 80 | xfreq1          long    $80000000
0818c 19e 00 00 00 40 | xfreq2          long    $40000000
08190 19f 03 00 00 00 | delay           long    3
08194 1a0             | 
08194 1a0             | lutcodeaddr                 
08194 1a0             | startupparams
08194 1a0             | excludedcogs                                    'careful: shared register use!
08194 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
08198 1a1 00 00 00 00 | flags           long    0
0819c 1a2             | mask                                            'careful: shared register use!
0819c 1a2 00 00 00 00 | resetmaskA      long    0
081a0 1a3             | limit                                           'careful: shared register use!
081a0 1a3 00 00 00 00 | resetmaskB      long    0
081a4 1a4 00 00 00 00 | datapins        long    0
081a8 1a5             | const512                                        'careful: shared register use!
081a8 1a5 00 00 00 00 | devicelist      long    0
081ac 1a6 00 00 00 00 | coglist         long    0
081b0 1a7 00 00 00 00 | mbox            long    0 
081b4 1a8             | 
081b4 1a8             | clkpin                                          'shared with code patched during init
081b4 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
081b8 1a9             | cspin                                           'shared with code patched during init
081b8 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
081bc 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
081c0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
081c4 1ac 01 00 00 00 | clkdelay        long    1
081c8 1ad 00 00 00 00 | regdatabus      long    0
081cc 1ae             | 
081cc 1ae 10 00 00 00 | deviceaddr      long    $10
081d0 1af             | rrcounter
081d0 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
081d4 1b0             | 
081d4 1b0             | ' jump addresses for the per COG handlers
081d4 1b0 20 00 00 00 | cog0_handler    long    cog0
081d8 1b1 2C 00 00 00 | cog1_handler    long    cog1
081dc 1b2 38 00 00 00 | cog2_handler    long    cog2
081e0 1b3 44 00 00 00 | cog3_handler    long    cog3
081e4 1b4 50 00 00 00 | cog4_handler    long    cog4
081e8 1b5 5C 00 00 00 | cog5_handler    long    cog5
081ec 1b6 68 00 00 00 | cog6_handler    long    cog6
081f0 1b7 74 00 00 00 | cog7_handler    long    cog7
081f4 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
081f8 1b9             | 
081f8 1b9             | ' EXECF sequences
081f8 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
081fc 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
08200 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
08204 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
08208 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
0820c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
08210 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
08214 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
08214 1c0             | 
08214 1c0             | 
08214 1c0             | ' SKIPF sequences
08214 1c0             | skiptable
08214 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
08218 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
0821c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
08220 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
08224 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
08228 1c5 00 00 00 00 | pattern2        long    0
0822c 1c6 00 00 00 00 | pattern3        long    0
08230 1c7 77 02 00 00 | singlelong      long    %1001110111  
08234 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
08238 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
0823c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
08240 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
08244 1cc             | 
08244 1cc             | ' LUT RAM address values
08244 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
08248 1cd DD 02 00 00 | continue_read   long    continue_read_lut
0824c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
08250 1cf F6 02 00 00 | noread          long    noread_lut
08254 1d0             | 
08254 1d0 00 00 00 00 | id0             long    0
08258 1d1 01 00 00 00 | id1             long    1
0825c 1d2 02 00 00 00 | id2             long    2
08260 1d3 03 00 00 00 | id3             long    3
08264 1d4 04 00 00 00 | id4             long    4
08268 1d5 05 00 00 00 | id5             long    5
0826c 1d6 06 00 00 00 | id6             long    6
08270 1d7 07 00 00 00 | id7             long    7
08274 1d8             | 
08274 1d8             | 'These next 10 request registers below are also temporarily reused during init 
08274 1d8             | 'and COG updates and need to follow immediately after id0-id7
08274 1d8 00 00 00 00 | addr1           long    0
08278 1d9 00 00 00 00 | hubdata         long    0
0827c 1da 00 00 00 00 | count           long    0
08280 1db 00 00 00 00 | addr2           long    0
08284 1dc 00 00 00 00 | total           long    0
08288 1dd 00 00 00 00 | offset1         long    0
0828c 1de 00 00 00 00 | offset2         long    0
08290 1df 00 00 00 00 | link            long    0
08294 1e0             | 
08294 1e0             | burstwrite                                      'note shared register use during init
08294 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
08298 1e1 00 00 00 00 | id              long    0
0829c 1e2             | 
0829c 1e2 00 00 00 00 | header          long    0
082a0 1e3 00 00 00 00 | trailer         long    0
082a4 1e4 00 00 00 00 | cmdaddr         long    0
082a8 1e5 00 00 00 00 | request         long    0
082ac 1e6 00 00 00 00 | rrlimit         long    0
082b0 1e7 00 00 00 00 | pinconfig       long    0
082b4 1e8 00 00 00 00 | clks            long    0
082b8 1e9 00 00 00 00 | resume          long    0
082bc 1ea 00 00 00 00 | orighubsize     long    0
082c0 1eb 00 00 00 00 | wrclks          long    0
082c4 1ec             | 
082c4 1ec 00 00 00 00 | pattern         long    0
082c8 1ed 00 00 00 00 | hubscratch      long    0
082cc 1ee 00 10 00 00 | val4k           long    4096
082d0 1ef             | 
082d0 1ef             | ' temporary general purpose regs
082d0 1ef 00 00 00 00 | a               long    0
082d4 1f0 00 00 00 00 | b               long    0
082d8 1f1 00 00 00 00 | c               long    0
082dc 1f2 00 00 00 00 | d               long    0
082e0 1f3             | 
082e0 1f3             |                 fit     502
082e0 1f3             |                 fit     502
082e0 1f3             | 
082e0 1f3             | '..................................................................................................
082e0 1f3             | 
082e0 1f3             |             orgh
082e0                 | 
082e0                 | lut_code
082e0                 | 'HW init code up to 80 longs
082e0                 | 
082e0                 | '..................................................................................................
082e0                 | ' Memory layout for LUT RAM once operational:
082e0                 | '
082e0                 | '  LUT RAM address      Usage
082e0                 | '  ---------------      ----
082e0                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
082e0                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
082e0                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
082e0                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
082e0                 | '
082e0                 | ' Also during driver COG startup:
082e0                 | ' $230-$24F is used for HW init setup
082e0                 | ' $250-$26F is used as temporary vector storage 
082e0                 | '..................................................................................................
082e0                 | 
082e0                 |                 org $230    
082e0 230             | 
082e0 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
082e0 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
082e4 231 24 16 60 FD |                             pollxfi
082e8 232 FF AA 2A FF 
082ec 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
082f0 234 28 00 B0 FD |                             call    #sendqspi
082f4 235 07 F8 07 FF 
082f8 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
082fc 237 28 00 B0 FD |                             call    #sendspi
08300 238 F8 07 78 FF 
08304 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
08308 23a 1C 00 B0 FD |                             call    #sendspi
0830c 23b 7F 78 78 FF 
08310 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
08314 23d 10 00 B0 FD |                             call    #sendspi 
08318 23e 2D 00 64 FD |                             ret
0831c 23f             | 
0831c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
08320 240 32 0C 64 FD |                             skipf   #%110
08324 241 9C EF 03 F6 |                             mov     pb, xsendimm
08328 242             | 
08328 242 10 D0 07 F6 | sendspi                     mov     clks, #16
0832c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
08330 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
08334 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
08338 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
0833c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
08340 248 24 36 60 FD |                             waitxfi                         'wait for the completion
08344 249 50 48 63 FD |                             fltl    datapins                'float data bus
08348 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
0834c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
08350 24c             | 
08350 24c 00 00 00 00 
08354 24d 00 00 00 00 
08358 24e 00 00 00 00 
0835c 24f 00 00 00 00 |                 long    0[$270-32-$]
08360 250             |     
08360 250             |                 fit     $270-32  ' keep room for 32 vector longs
08360 250             |                 fit     $270-32  ' keep room for 32 vector longs
08360 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
08360 250             | rw_vect ' PSRAM jump vectors
08360 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
08364 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
08368 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
0836c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
08370 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
08374 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
08378 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
0837c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
08380 258             | ro_vect ' R/O PSRAM jump vectors
08380 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
08384 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
08388 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
0838c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
08390 25c 00 01 00 00 |                 long    unsupported
08394 25d 00 01 00 00 |                 long    unsupported
08398 25e 00 01 00 00 |                 long    unsupported
0839c 25f 00 01 00 00 |                 long    unsupported
083a0 260             | ctrl_vect ' Control jump vectors
083a0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
083a4 261 00 01 00 00 |                 long    unsupported
083a8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
083ac 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
083b0 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
083b4 265 00 01 00 00 |                 long    unsupported
083b8 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
083bc 267 3E 01 00 00 |                 long    reconfig 
083c0 268             | no_vect ' Invalid bank jump vectors
083c0 268 01 01 00 00 |                 long    invalidbank
083c4 269 01 01 00 00 |                 long    invalidbank
083c8 26a 01 01 00 00 |                 long    invalidbank
083cc 26b 01 01 00 00 |                 long    invalidbank
083d0 26c 01 01 00 00 |                 long    invalidbank
083d4 26d 01 01 00 00 |                 long    invalidbank
083d8 26e 01 01 00 00 |                 long    invalidbank
083dc 26f 01 01 00 00 |                 long    invalidbank
083e0 270             | 
083e0 270             |                 fit     $270
083e0 270             |                 fit     $270
083e0 270             | '..................................................................................................
083e0 270             | ' PSRAM READS
083e0 270             |                                                             ' a b c d e f
083e0 270             |                                                             ' B W L B R L  (a) byte read
083e0 270             |                                                             ' Y O O U E O  (b) word read
083e0 270             |                                                             ' T R N R S C  (c) long read
083e0 270             |                                                             ' E D G S U K  (d) new burst read
083e0 270             |                                                             '       T M E  (e) resumed sub-burst
083e0 270             |                                                             '         E D  (f) locked sub-burst
083e0 270             | 
083e0 270             | 
083e0 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
083e4 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
083e8 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
083ec 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
083f0 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
083f4 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
083f8 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
083fc 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
08400 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
08404 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
08408 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
0840c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
08410 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
08414 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
08418 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
0841c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
08420 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
08424 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
08428 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
0842c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
08430 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
08434 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
08438 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
0843c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
08440 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
08444 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
08448 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
0844c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
08450 28c             | 
08450 28c             |                             ' fall through to read bursts
08450 28c             |                         
08450 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
08450 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
08454 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
08458 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
0845c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
08460 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
08464 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
08468 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
0846c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
08470 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
08474 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
08478 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
0847c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
08480 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
08484 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
08488 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
0848c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
08490 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
08494 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
08498 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
0849c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
084a0 2a0 E8 D1 03 F1 |                             add     clks, clks
084a4 2a1             | readcommon
084a4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
084a8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
084ac 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
084b0 2a4             | 
084b0 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
084b4 2a5 69 C8 63 FD |                             rev     cmdaddr
084b8 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
084bc 2a7 61 C8 63 FD |                             mergeb  cmdaddr
084c0 2a8             | 
084c0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
084c4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
084c8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
084c8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
084cc 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
084d0 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
084d4 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
084d8 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
084d8 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
084dc 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
084e0 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
084e4 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
084e8 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
084ec 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
084f0 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
084f0 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
084f4 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
084f8 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
084fc 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
08500 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
08504 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
08508 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
0850c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
08510 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
08514 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
08518 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
0851c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
08520 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
08524 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
08528 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
08528 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
0852c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
08530 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
08534 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
08538 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
0853c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
08540 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
08544 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
08548 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
0854c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
08550 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
08554 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
08558 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
0855c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
08560 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
08564 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
08568 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
0856c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
08570 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
08574 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
08578 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
0857c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
08580 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
08584 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
08588 2da 10 03 90 FD |                             jmp     #writecommon
0858c 2db             | 
0858c 2db             | '..................................................................................................
0858c 2db             | ' Burst continuation testing
0858c 2db             | 
0858c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
08590 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
08594 2dd             | continue_read_lut          
08594 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
08598 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
0859c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
085a0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
085a4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
085a8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
085ac 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
085b0 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
085b4 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
085b8 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
085bc 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
085c0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
085c4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
085c8 2ea             | 
085c8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
085cc 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
085d0 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
085d4 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
085d8 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
085dc 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
085e0 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
085e4 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
085e8 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
085ec 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
085f0 2f4 2A 1C 66 0D |             _ret_           push    #poller
085f4 2f5             | 
085f4 2f5             | 
085f4 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
085f8 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
085f8 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
085fc 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
08600 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
08604 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
08608 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
0860c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
08610 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
08614 2fd 2D 00 64 FD |                             ret                             ' | continue processing
08618 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
0861c 2ff             | '..................................................................................................
0861c 2ff             | ' Completion of requests
0861c 2ff             | 
0861c 2ff             | complete_rw_lut             
0861c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
08620 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
08624 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
08628 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
0862c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
08630 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
08634 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
08638 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
0863c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
08640 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
08644 309 32 62 64 AD |             if_z            skipf   #%110001
08648 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
0864c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
08650 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
08654 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
08658 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
0865c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
08660 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
08664 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
08668 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
0866c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
08670 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
08674 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
08678 316             |                                                             ' skipcase (a) gfx copy to/from hub
08678 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
08678 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
08678 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
0867c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
08680 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
08684 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
08688 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
0868c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
08690 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
08694 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
08698 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
0869c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
086a0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
086a4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
086a8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
086ac 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
086b0 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
086b4 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
086b8 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
086bc 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
086c0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
086c4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
086c8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
086cc 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
086d0 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
086d4 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
086d8 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
086dc 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
086e0 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
086e4 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
086e8 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
086ec 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
086f0 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
086f4 335 DF B7 03 A6 |             if_z            mov     addr2, link
086f8 336 34 FF 9F AD |             if_z            jmp     #checknext
086fc 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
08700 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
08704 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
08708 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
0870c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
08710 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
08714 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
08718 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
0871c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
08720 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
08724 341             | 
08724 341             | '..................................................................................................
08724 341             | ' PSRAM WRITES
08724 341             |                                                             '  a b c d e f g h
08724 341             | 
08724 341             |                                                             '  B W L F B R L L (a) byte write(s)
08724 341             |                                                             '  Y O O I U E O O (b) word write(s)
08724 341             |                                                             '  T R N L R S C C (c) long write(s)
08724 341             |                                                             '  E D G L S U K K (d) resumed fill
08724 341             |                                                             '          T M E E (e) new burst write
08724 341             |                                                             '            E D D (f) resumed burst
08724 341             |                                                             '              F B (g) locked fill
08724 341             |                                                             '              I U (h) locked burst write
08724 341             |                                                             '              L R 
08724 341             |                                                             '              L S 
08724 341             |                                                             '                T 
08724 341             | 
08724 341             | w_single                   
08724 341             | w_fill_cont           
08724 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
08728 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
0872c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
08730 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
08734 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
08738 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
0873c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
08740 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
08744 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
08748 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
0874c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
08750 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
08754 34d             |                ' disable call to r_resume_burst for single longs when z=0
08754 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
08758 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
0875c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
08760 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
08764 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
08768 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
0876c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
08770 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
08774 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
08778 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
0877c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
08780 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
08784 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
08788 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
0878c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
08790 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
08794 35d             |         
08794 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
08794 35d             |             '
08794 35d             |             '  At least one of these 3 optional components will be sent
08794 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
08794 35d             |             '     body - N x full longs of data
08794 35d             |             '     trailer - last partial long of data
08794 35d             |             '
08794 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
08794 35d             |             '
08794 35d             |             'Case    Type                           Sends
08794 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
08794 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
08794 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
08794 35d             |             ' 4)     Multiple long fill             body only
08794 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
08794 35d             | 
08794 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
08794 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
08798 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
0879c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
087a0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
087a4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
087a8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
087ac 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
087b0 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
087b4 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
087b8 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
087bc 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
087c0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
087c4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
087c8 36a             |                             
087c8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
087cc 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
087d0 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
087d4 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
087d8 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
087dc 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
087e0 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
087e4 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
087e8 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
087ec 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
087f0 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
087f4 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
087f8 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
087fc 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
08800 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
08804 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
08808 37a             | 
08808 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
0880c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
08810 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
08814 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
08818 37e             |                  
08818 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
0881c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
08820 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
08824 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
08828 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
0882c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
08830 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
08834 385             | 
08834 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
08838 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
0883c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
08840 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
08844 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
08848 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
0884c 38b             | 
0884c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
0884c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
08850 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
08854 38d 2A B0 63 FD |                             push    addr1                   'save address
08858 38e             | 
08858 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
08858 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
0885c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
08860 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
08864 391             |             
08864 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
08868 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
0886c 393 2B B0 63 FD |                             pop     addr1                   'restore address
08870 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
08874 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
08878 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
0887c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
08880 398             | 
08880 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
08884 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
08888 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
0888c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
08890 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
08894 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
08898 39e             | 
08898 39e             |                             'trailer is done
08898 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
0889c 39f             | 
0889c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
088a0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
088a4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
088a8 3a2             | 
088a8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
088ac 3a3 69 C8 63 FD |                             rev     cmdaddr                 
088b0 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
088b4 3a5 61 C8 63 FD |                             mergeb  cmdaddr
088b8 3a6             |                             
088b8 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
088bc 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
088c0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
088c4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
088c8 3aa             |                                                          
088c8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
088cc 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
088d0 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
088d4 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
088d8 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
088dc 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
088e0 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
088e4 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
088e8 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
088ec 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
088f0 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
088f4 3b5             |  
088f4 3b5 59 52 63 FD |                             drvh    cspin
088f8 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
088fc 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
08900 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
08904 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
08908 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
0890c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
08910 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
08914 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
08918 3be EA E5 03 F6 |                             mov     d, orighubsize
0891c 3bf EF E5 63 F0 |                             shl     d, a
08920 3c0 F2 E3 83 F1 |                             sub     c, d
08924 3c1 DD E3 03 F1 |                             add     c, offset1
08928 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
0892c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
08930 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
08934 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
08938 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
0893c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
08940 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
08944 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
08948 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
0894c 3cb BB D3 03 F6 |                             mov     resume, restorefill
08950 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
08954 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
08958 3ce 6C FC BF CD |             if_c            call    #yield
0895c 3cf 2D 00 64 FD |                             ret
08960 3d0             |                            
08960 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
08960 3d0             |                       '     rczl    pa                      'rotate left into address offset
08960 3d0             |                       '     rczl    c wcz                   'restore count and flags
08960 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
08964 3d1 02 EC 67 F0 |                             shl     pa, #2
08968 3d2 28 06 64 AD |             if_z            setq    #3
0896c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
08970 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
08974 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
08978 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
0897c 3d7             | 
0897c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
08980 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
08984 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
08988 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
0898c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
08990 3dc             |         
08990 3dc             | 
08990 3dc             | '..................................................................................................
08990 3dc             | 
08990 3dc             |                 fit 1024-32
08990 3dc             |                 fit 1024-32
08990 3dc 00 00 00 00 
08994 3dd 00 00 00 00 
08998 3de 00 00 00 00 
0899c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
089a0 3e0             |                 org 1024-32
089a0 000             | 
089a0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
089a0 000 00 00 00 00 |                 long $0000
089a4 001 11 11 00 00 |                 long $1111
089a8 002 22 22 00 00 |                 long $2222
089ac 003 33 33 00 00 |                 long $3333
089b0 004 44 44 00 00 |                 long $4444
089b4 005 55 55 00 00 |                 long $5555
089b8 006 66 66 00 00 |                 long $6666
089bc 007 77 77 00 00 |                 long $7777
089c0 008 88 88 00 00 |                 long $8888
089c4 009 99 99 00 00 |                 long $9999
089c8 00a AA AA 00 00 |                 long $aaaa
089cc 00b BB BB 00 00 |                 long $bbbb
089d0 00c CC CC 00 00 |                 long $cccc
089d4 00d DD DD 00 00 |                 long $dddd
089d8 00e EE EE 00 00 |                 long $eeee
089dc 00f FF FF 00 00 |                 long $ffff
089e0 010             | 
089e0 010             | 'masks
089e0 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
089e4 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
089e8 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
089ec 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
089f0 014             | 
089f0 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
089f4 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
089f8 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
089fc 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
08a00 018             | 
08a00 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
08a04 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
08a08 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
08a0c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
08a10 01c             | 
08a10 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
08a14 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
08a18 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
08a1c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
08a20 020             | 
08a20 020             |         fit 1024
08a20 020             |         fit 1024
08a20 020             | 
08a20 020             | '--------------------------------------------------------------------------------------------------
08a20 020             |         orgh
08a20                 | 
08a20                 | gfxexpansion
08a20                 |                             'simple line drawing graphics expansion of memory driver
08a20                 |                             'jmp     #donerepeats                'just return for now
08a20                 | 
08a20     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
08a24     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
08a28     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
08a2c     DD E1 03 F6 |                             mov     b, offset1              'get error term
08a30     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
08a34     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
08a38     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
08a3c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
08a40     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
08a44     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
08a48     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
08a4c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
08a50     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
08a54     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
08a58     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
08a5c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
08a60     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
08a64     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
08a68     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
08a6c     DC E5 33 F9 |                             getword d, total, #0            'get line width
08a70     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
08a74     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
08a78     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
08a7c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
08a80     C3 03 80 FD |                             jmp     #readmask               'continue filling
08a84                 | 	alignl
08a84                 | __system__dat_
08a84     00 00 00 00 
08a88     00 00 00 00 | 	byte	$00[8]
08a8c     03 00 00 00 
08a90     00 00 00 00 
08a94     00 00 00 00 
08a98     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a9c     00 00 00 00 
08aa0     00 00 00 00 
08aa4     00 00 00 00 
08aa8     00 00 00 00 
08aac     00 00 00 00 
08ab0     00 00 00 00 | 	byte	$00[24]
08ab4     01 80 00 00 
08ab8     00 00 00 00 
08abc     00 00 00 00 
08ac0     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ac4     00 00 00 00 | 	byte	$00, $00, $00, $00
08ac8     00 00 00 00 | 	long	(0 {__system___tx})<<20
08acc     00 00 10 00 | 	long	(1 {__system___rx})<<20
08ad0     00 00 00 00 | 	byte	$00, $00, $00, $00
08ad4     00 00 B0 00 | 	long	(11 {__system___rxtxioctl_0144})<<20
08ad8     00 00 C0 00 | 	long	(12 {__system____dummy_flush_0145})<<20
08adc     00 00 00 00 
08ae0     00 00 00 00 | 	byte	$00[8]
08ae4     01 00 00 00 
08ae8     02 80 00 00 
08aec     00 00 00 00 
08af0     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08af4     00 00 00 00 
08af8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
08afc     00 00 00 00 | 	long	(0 {__system___tx})<<20
08b00     00 00 10 00 | 	long	(1 {__system___rx})<<20
08b04     00 00 00 00 | 	byte	$00, $00, $00, $00
08b08     00 00 B0 00 | 	long	(11 {__system___rxtxioctl_0144})<<20
08b0c     00 00 C0 00 | 	long	(12 {__system____dummy_flush_0145})<<20
08b10     00 00 00 00 
08b14     00 00 00 00 | 	byte	$00[8]
08b18     01 00 00 00 
08b1c     02 80 00 00 
08b20     00 00 00 00 
08b24     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b28     00 00 00 00 
08b2c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
08b30     00 00 00 00 | 	long	(0 {__system___tx})<<20
08b34     00 00 10 00 | 	long	(1 {__system___rx})<<20
08b38     00 00 00 00 | 	byte	$00, $00, $00, $00
08b3c     00 00 B0 00 | 	long	(11 {__system___rxtxioctl_0144})<<20
08b40     00 00 C0 00 | 	long	(12 {__system____dummy_flush_0145})<<20
08b44     00 00 00 00 
      ...             
08cac     00 00 00 00 
08cb0     00 00 00 00 | 	byte	$00[368]
08cb4                 | __methodtable__
08cb4     80 26 00 00 | 	long	@__system___tx
08cb8     C0 26 00 00 | 	long	@__system___rx
08cbc     38 14 00 00 | 	long	@_hg010b_spin2_putchar
08cc0     10 3A 00 00 | 	long	@__system___struct___bas_wrap_sender_tx_
08cc4     54 3A 00 00 | 	long	@__system___struct___bas_wrap_sender_rx_
08cc8     9C 3A 00 00 | 	long	@__system___struct___bas_wrap_sender_close_
08ccc     40 39 00 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
08cd0     B0 39 00 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
08cd4     70 34 00 00 | 	long	@__system____default_putc
08cd8     EC 33 00 00 | 	long	@__system____default_getc
08cdc     1C 35 00 00 | 	long	@__system____default_flush
08ce0     10 38 00 00 | 	long	@__system___rxtxioctl_0144
08ce4     68 38 00 00 | 	long	@__system____dummy_flush_0145
08ce8                 | __heap_base
08ce8     00 00 00 00 
      ...             
0a458     00 00 00 00 
0a45c     00 00 00 00 | 	long	0[1502]
0a460                 | objmem
0a460     00 00 00 00 
      ...             
160b0     00 00 00 00 
160b4     00 00 00 00 | 	long	0[12054]
160b8                 | stackspace
160b8     00 00 00 00 | 	long	0[1]
160bc 13c             | 	org	COG_BSS_START
160bc 13c             | _var01
160bc 13c             | 	res	1
160bc 13d             | _var02
160bc 13d             | 	res	1
160bc 13e             | _var03
160bc 13e             | 	res	1
160bc 13f             | _var04
160bc 13f             | 	res	1
160bc 140             | _var05
160bc 140             | 	res	1
160bc 141             | _var06
160bc 141             | 	res	1
160bc 142             | _var07
160bc 142             | 	res	1
160bc 143             | _var08
160bc 143             | 	res	1
160bc 144             | arg01
160bc 144             | 	res	1
160bc 145             | arg02
160bc 145             | 	res	1
160bc 146             | arg03
160bc 146             | 	res	1
160bc 147             | arg04
160bc 147             | 	res	1
160bc 148             | arg05
160bc 148             | 	res	1
160bc 149             | local01
160bc 149             | 	res	1
160bc 14a             | local02
160bc 14a             | 	res	1
160bc 14b             | local03
160bc 14b             | 	res	1
160bc 14c             | local04
160bc 14c             | 	res	1
160bc 14d             | local05
160bc 14d             | 	res	1
160bc 14e             | local06
160bc 14e             | 	res	1
160bc 14f             | local07
160bc 14f             | 	res	1
160bc 150             | local08
160bc 150             | 	res	1
160bc 151             | local09
160bc 151             | 	res	1
160bc 152             | local10
160bc 152             | 	res	1
160bc 153             | local11
160bc 153             | 	res	1
160bc 154             | local12
160bc 154             | 	res	1
160bc 155             | local13
160bc 155             | 	res	1
160bc 156             | muldiva_
160bc 156             | 	res	1
160bc 157             | muldivb_
160bc 157             | 	res	1
160bc 158             | 	fit	480
160bc 158             | 
