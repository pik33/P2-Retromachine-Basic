00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic023.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 23
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 B8 28 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 30 61 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 2F 5F 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 30 5F 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 60 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 5E 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 2F 5F 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 30 61 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec B4 DF 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed F8 DD 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 BC CD 05 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 F8 CC 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 D8 D0 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 5C 57 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 18 D8 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 6C 6B 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 1C 93 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa D4 90 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb AC A2 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 7C C2 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     03 E4 05 F1 | 	add	objptr, ##62467
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     48 E4 85 F1 | 	sub	objptr, ##62536
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     1C 56 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     48 E4 05 F1 | 	add	objptr, ##62536
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     48 E4 85 F1 | 	sub	objptr, ##62536
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     F4 55 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     48 E4 05 F1 | 	add	objptr, ##62536
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     48 E4 85 F1 | 	sub	objptr, ##62536
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     CC 55 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     48 E4 05 F1 | 	add	objptr, ##62536
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     48 E4 85 F1 | 	sub	objptr, ##62536
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     79 00 00 FF 
008d4     C0 E5 05 F1 | 	add	objptr, ##62400
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     79 00 00 FF 
00914     C8 E5 85 F1 | 	sub	objptr, ##62408
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     DC 4B B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     2C 4C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     1C 4C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     79 00 00 FF 
00980     D0 E5 05 F1 | 	add	objptr, ##62416
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     79 00 00 FF 
009ac     EC E5 85 F1 | 	sub	objptr, ##62444
009b0     80 4B B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     79 00 00 FF 
009e0     D0 E5 05 F1 | 	add	objptr, ##62416
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     79 00 00 FF 
00a08     EC E5 85 F1 | 	sub	objptr, ##62444
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     20 4A 05 F6 | 	mov	COUNT_, #32
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     44 F0 07 F1 | 	add	ptra, ##580
00a2c     55 00 00 FF 
00a30     F0 E5 05 F1 | 	add	objptr, ##44016
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     69 00 00 FF 
00a60     50 E4 85 F1 | 	sub	objptr, ##53840
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     53 00 00 FF 
00a9c     E0 E5 05 F1 | 	add	objptr, ##42976
00aa0     97 12 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 29 02 F6 | 	mov	local06, local04
00aa8     03 28 66 F0 | 	shl	local06, #3
00aac     F2 28 02 F1 | 	add	local06, objptr
00ab0     26 01 00 FF 
00ab4     C2 2B 06 F6 | 	mov	local07, ##@LR__4137
00ab8     14 2B 62 FC | 	wrlong	local07, local06
00abc     01 24 06 F1 | 	add	local04, #1
00ac0     7E 24 56 F2 | 	cmps	local04, #126 wc
00ac4     DC FF 9F CD |  if_b	jmp	#LR__0023
00ac8                 | LR__0024
00ac8     02 00 00 FF 
00acc     10 E4 05 F1 | 	add	objptr, ##1040
00ad0     F2 12 02 FB | 	rdlong	arg01, objptr
00ad4     55 00 00 FF 
00ad8     F0 E5 85 F1 | 	sub	objptr, ##44016
00adc     C8 74 B1 FD | 	call	#__system__RTrim_S
00ae0     FD 12 02 F6 | 	mov	arg01, result1
00ae4     00 74 B1 FD | 	call	#__system__LTrim_S
00ae8     55 00 00 FF 
00aec     F0 E5 05 F1 | 	add	objptr, ##44016
00af0     F2 FA 61 FC | 	wrlong	result1, objptr
00af4     26 01 00 FF 
00af8     C3 1F 06 F6 | 	mov	local01, ##@LR__4138
00afc     24 00 00 FF 
00b00     7C E4 05 F1 | 	add	objptr, ##18556
00b04     F2 1E 62 FC | 	wrlong	local01, objptr
00b08     24 00 00 FF 
00b0c     7C E4 85 F1 | 	sub	objptr, ##18556
00b10     F2 12 02 FB | 	rdlong	arg01, objptr
00b14     55 00 00 FF 
00b18     F0 E5 85 F1 | 	sub	objptr, ##44016
00b1c     09 2D 02 F6 | 	mov	local08, arg01
00b20     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b24                 | LR__0025
00b24     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b28     01 2C 06 51 |  if_ne	add	local08, #1
00b2c     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b30                 | LR__0026
00b30     09 2D 82 F1 | 	sub	local08, arg01
00b34     16 FB 09 F6 | 	mov	result1, local08 wz
00b38     7A 00 00 FF 
00b3c     70 E4 05 F1 | 	add	objptr, ##62576
00b40     F2 FA 61 FC | 	wrlong	result1, objptr
00b44                 | ' if l=0 then goto 101
00b44     7A 00 00 FF 
00b48     70 E4 85 F1 | 	sub	objptr, ##62576
00b4c     34 1C 90 AD |  if_e	jmp	#LR__0119
00b50     55 00 00 FF 
00b54     F0 E5 05 F1 | 	add	objptr, ##44016
00b58     F2 14 02 FB | 	rdlong	arg02, objptr
00b5c     55 00 00 FF 
00b60     F0 E5 85 F1 | 	sub	objptr, ##44016
00b64     26 01 00 FF 
00b68     C4 17 06 F6 | 	mov	arg03, ##@LR__4139
00b6c     01 12 06 F6 | 	mov	arg01, #1
00b70     EC 74 B1 FD | 	call	#__system__Instr
00b74     7A 00 00 FF 
00b78     74 E4 05 F1 | 	add	objptr, ##62580
00b7c     F2 FA 61 FC | 	wrlong	result1, objptr
00b80     FD 1E 02 F6 | 	mov	local01, result1
00b84     7A 00 00 FF 
00b88     74 E4 85 F1 | 	sub	objptr, ##62580
00b8c     01 1E 56 F2 | 	cmps	local01, #1 wc
00b90     0C 01 90 CD |  if_b	jmp	#LR__0031
00b94     55 00 00 FF 
00b98     F0 E5 05 F1 | 	add	objptr, ##44016
00b9c     F2 12 02 FB | 	rdlong	arg01, objptr
00ba0     55 00 00 FF 
00ba4     F0 E5 85 F1 | 	sub	objptr, ##44016
00ba8     09 2D 02 F6 | 	mov	local08, arg01
00bac     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb0                 | LR__0027
00bb0     16 FB C9 FA | 	rdbyte	result1, local08 wz
00bb4     01 2C 06 51 |  if_ne	add	local08, #1
00bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bbc                 | LR__0028
00bbc     09 2D 82 F1 | 	sub	local08, arg01
00bc0     16 29 02 F6 | 	mov	local06, local08
00bc4     7A 00 00 FF 
00bc8     74 E4 05 F1 | 	add	objptr, ##62580
00bcc     F2 2A 02 FB | 	rdlong	local07, objptr
00bd0     7A 00 00 FF 
00bd4     74 E4 85 F1 | 	sub	objptr, ##62580
00bd8     14 2B 52 F2 | 	cmps	local07, local06 wc
00bdc     C0 00 90 3D |  if_ae	jmp	#LR__0031
00be0     55 00 00 FF 
00be4     F0 E5 05 F1 | 	add	objptr, ##44016
00be8     F2 12 02 FB | 	rdlong	arg01, objptr
00bec     09 1F 02 F6 | 	mov	local01, arg01
00bf0     55 00 00 FF 
00bf4     F0 E5 85 F1 | 	sub	objptr, ##44016
00bf8     09 2D 02 F6 | 	mov	local08, arg01
00bfc     97 06 48 FB | 	callpa	#(@LR__0030-@LR__0029)>>2,fcache_load_ptr_
00c00                 | LR__0029
00c00     16 FB C9 FA | 	rdbyte	result1, local08 wz
00c04     01 2C 06 51 |  if_ne	add	local08, #1
00c08     F4 FF 9F 5D |  if_ne	jmp	#LR__0029
00c0c                 | LR__0030
00c0c     09 2D 82 F1 | 	sub	local08, arg01
00c10     16 15 02 F6 | 	mov	arg02, local08
00c14     7A 00 00 FF 
00c18     74 E4 05 F1 | 	add	objptr, ##62580
00c1c     F2 2E 02 FB | 	rdlong	local09, objptr
00c20     7A 00 00 FF 
00c24     74 E4 85 F1 | 	sub	objptr, ##62580
00c28     17 15 82 F1 | 	sub	arg02, local09
00c2c     0F 13 02 F6 | 	mov	arg01, local01
00c30     C8 6F B1 FD | 	call	#__system__Right_S
00c34     FD 12 02 F6 | 	mov	arg01, result1
00c38     6C 73 B1 FD | 	call	#__system__RTrim_S
00c3c     FD 12 02 F6 | 	mov	arg01, result1
00c40     A4 72 B1 FD | 	call	#__system__LTrim_S
00c44     7A 00 00 FF 
00c48     78 E4 05 F1 | 	add	objptr, ##62584
00c4c     F2 FA 61 FC | 	wrlong	result1, objptr
00c50     24 00 00 FF 
00c54     88 E4 85 F1 | 	sub	objptr, ##18568
00c58     F2 12 02 FB | 	rdlong	arg01, objptr
00c5c     24 00 00 FF 
00c60     84 E4 05 F1 | 	add	objptr, ##18564
00c64     F2 14 02 FB | 	rdlong	arg02, objptr
00c68     7A 00 00 FF 
00c6c     74 E4 85 F1 | 	sub	objptr, ##62580
00c70     01 14 86 F1 | 	sub	arg02, #1
00c74     FC 6E B1 FD | 	call	#__system__Left_S
00c78     FD 12 02 F6 | 	mov	arg01, result1
00c7c     28 73 B1 FD | 	call	#__system__RTrim_S
00c80     FD 12 02 F6 | 	mov	arg01, result1
00c84     60 72 B1 FD | 	call	#__system__LTrim_S
00c88     55 00 00 FF 
00c8c     F0 E5 05 F1 | 	add	objptr, ##44016
00c90     F2 FA 61 FC | 	wrlong	result1, objptr
00c94     55 00 00 FF 
00c98     F0 E5 85 F1 | 	sub	objptr, ##44016
00c9c     1C 00 90 FD | 	jmp	#LR__0032
00ca0                 | LR__0031
00ca0     26 01 00 FF 
00ca4     C6 1F 06 F6 | 	mov	local01, ##@LR__4140
00ca8     7A 00 00 FF 
00cac     78 E4 05 F1 | 	add	objptr, ##62584
00cb0     F2 1E 62 FC | 	wrlong	local01, objptr
00cb4     7A 00 00 FF 
00cb8     78 E4 85 F1 | 	sub	objptr, ##62584
00cbc                 | LR__0032
00cbc                 | ' 
00cbc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00cbc     55 00 00 FF 
00cc0     F8 E5 05 F1 | 	add	objptr, ##44024
00cc4     F2 1E 02 FB | 	rdlong	local01, objptr
00cc8     55 00 00 FF 
00ccc     F8 E5 85 F1 | 	sub	objptr, ##44024
00cd0     FF FF 7F FF 
00cd4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00cd8     3C 00 90 5D |  if_ne	jmp	#LR__0033
00cdc     7A 00 00 FF 
00ce0     78 E4 05 F1 | 	add	objptr, ##62584
00ce4     F2 12 02 FB | 	rdlong	arg01, objptr
00ce8     7A 00 00 FF 
00cec     78 E4 85 F1 | 	sub	objptr, ##62584
00cf0     26 01 00 FF 
00cf4     C7 15 06 F6 | 	mov	arg02, ##@LR__4141
00cf8     90 4E B1 FD | 	call	#__system___string_cmp
00cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
00d00     55 00 00 5F 
00d04     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00d08     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00d0c     55 00 00 5F 
00d10     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00d14     08 01 90 5D |  if_ne	jmp	#LR__0037
00d18                 | LR__0033
00d18                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00d18     55 00 00 FF 
00d1c     F8 E5 05 F1 | 	add	objptr, ##44024
00d20     F2 1E 02 FB | 	rdlong	local01, objptr
00d24     55 00 00 FF 
00d28     F8 E5 85 F1 | 	sub	objptr, ##44024
00d2c     FF FF 7F FF 
00d30     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00d34     3C 00 90 5D |  if_ne	jmp	#LR__0034
00d38     7A 00 00 FF 
00d3c     78 E4 05 F1 | 	add	objptr, ##62584
00d40     F2 12 02 FB | 	rdlong	arg01, objptr
00d44     7A 00 00 FF 
00d48     78 E4 85 F1 | 	sub	objptr, ##62584
00d4c     26 01 00 FF 
00d50     C8 15 06 F6 | 	mov	arg02, ##@LR__4142
00d54     34 4E B1 FD | 	call	#__system___string_cmp
00d58     00 FA 0D F2 | 	cmp	result1, #0 wz
00d5c     55 00 00 AF 
00d60     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00d64     F2 06 68 AC |  if_e	wrlong	#3, objptr
00d68     55 00 00 AF 
00d6c     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00d70     AC 00 90 AD |  if_e	jmp	#LR__0037
00d74                 | LR__0034
00d74                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00d74     55 00 00 FF 
00d78     F8 E5 05 F1 | 	add	objptr, ##44024
00d7c     F2 1E 02 FB | 	rdlong	local01, objptr
00d80     55 00 00 FF 
00d84     F8 E5 85 F1 | 	sub	objptr, ##44024
00d88     04 1E 0E F2 | 	cmp	local01, #4 wz
00d8c     3C 00 90 5D |  if_ne	jmp	#LR__0035
00d90     7A 00 00 FF 
00d94     78 E4 05 F1 | 	add	objptr, ##62584
00d98     F2 12 02 FB | 	rdlong	arg01, objptr
00d9c     7A 00 00 FF 
00da0     78 E4 85 F1 | 	sub	objptr, ##62584
00da4     26 01 00 FF 
00da8     C9 15 06 F6 | 	mov	arg02, ##@LR__4143
00dac     DC 4D B1 FD | 	call	#__system___string_cmp
00db0     00 FA 0D F2 | 	cmp	result1, #0 wz
00db4     55 00 00 5F 
00db8     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00dbc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00dc0     55 00 00 5F 
00dc4     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00dc8     54 00 90 5D |  if_ne	jmp	#LR__0037
00dcc                 | LR__0035
00dcc                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00dcc     55 00 00 FF 
00dd0     F8 E5 05 F1 | 	add	objptr, ##44024
00dd4     F2 1E 02 FB | 	rdlong	local01, objptr
00dd8     55 00 00 FF 
00ddc     F8 E5 85 F1 | 	sub	objptr, ##44024
00de0     04 1E 0E F2 | 	cmp	local01, #4 wz
00de4     38 00 90 5D |  if_ne	jmp	#LR__0036
00de8     7A 00 00 FF 
00dec     78 E4 05 F1 | 	add	objptr, ##62584
00df0     F2 12 02 FB | 	rdlong	arg01, objptr
00df4     7A 00 00 FF 
00df8     78 E4 85 F1 | 	sub	objptr, ##62584
00dfc     26 01 00 FF 
00e00     CA 15 06 F6 | 	mov	arg02, ##@LR__4144
00e04     84 4D B1 FD | 	call	#__system___string_cmp
00e08     00 FA 0D F2 | 	cmp	result1, #0 wz
00e0c     55 00 00 AF 
00e10     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00e14     F2 04 68 AC |  if_e	wrlong	#2, objptr
00e18     55 00 00 AF 
00e1c     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00e20                 | LR__0036
00e20                 | LR__0037
00e20     20 4E 05 F1 | 	add	fp, #32
00e24     A7 00 68 FC | 	wrlong	#0, fp
00e28     20 4E 85 F1 | 	sub	fp, #32
00e2c     00 24 06 F6 | 	mov	local04, #0
00e30     01 30 06 F6 | 	mov	local10, #1
00e34                 | ' 
00e34                 | ' ' 1b: find separators
00e34                 | ' 
00e34                 | ' 107
00e34                 | ' separators(0)=0
00e34                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00e34                 | LR__0038
00e34     01 24 06 F1 | 	add	local04, #1
00e38     55 00 00 FF 
00e3c     F0 E5 05 F1 | 	add	objptr, ##44016
00e40     F2 12 02 FB | 	rdlong	arg01, objptr
00e44     55 00 00 FF 
00e48     F0 E5 85 F1 | 	sub	objptr, ##44016
00e4c     12 15 02 F6 | 	mov	arg02, local04
00e50     01 16 06 F6 | 	mov	arg03, #1
00e54     34 6E B1 FD | 	call	#__system__Mid_S
00e58     7A 00 00 FF 
00e5c     7C E4 05 F1 | 	add	objptr, ##62588
00e60     F2 FA 61 FC | 	wrlong	result1, objptr
00e64                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00e64     FD 12 02 F6 | 	mov	arg01, result1
00e68     7A 00 00 FF 
00e6c     7C E4 85 F1 | 	sub	objptr, ##62588
00e70     1C 1C B0 FD | 	call	#_isseparator
00e74     00 FA 0D F2 | 	cmp	result1, #0 wz
00e78     1C 00 90 AD |  if_e	jmp	#LR__0039
00e7c     18 27 02 F6 | 	mov	local05, local10
00e80     02 26 66 F0 | 	shl	local05, #2
00e84     20 4E 05 F1 | 	add	fp, #32
00e88     A7 26 02 F1 | 	add	local05, fp
00e8c     13 25 62 FC | 	wrlong	local04, local05
00e90     01 30 06 F1 | 	add	local10, #1
00e94     20 4E 85 F1 | 	sub	fp, #32
00e98                 | LR__0039
00e98     7A 00 00 FF 
00e9c     70 E4 05 F1 | 	add	objptr, ##62576
00ea0     F2 1E 02 FB | 	rdlong	local01, objptr
00ea4     7A 00 00 FF 
00ea8     70 E4 85 F1 | 	sub	objptr, ##62576
00eac     0F 25 5A F2 | 	cmps	local04, local01 wcz
00eb0     80 FF 9F ED |  if_be	jmp	#LR__0038
00eb4     18 27 02 F6 | 	mov	local05, local10
00eb8     02 26 66 F0 | 	shl	local05, #2
00ebc     20 4E 05 F1 | 	add	fp, #32
00ec0     A7 26 02 F1 | 	add	local05, fp
00ec4     13 25 62 FC | 	wrlong	local04, local05
00ec8     00 32 06 F6 | 	mov	local11, #0
00ecc                 | ' for i=0 to j-1 
00ecc     00 24 06 F6 | 	mov	local04, #0
00ed0     18 35 02 F6 | 	mov	local12, local10
00ed4     20 4E 85 F1 | 	sub	fp, #32
00ed8                 | LR__0040
00ed8     1A 25 52 F2 | 	cmps	local04, local12 wc
00edc     88 01 90 3D |  if_ae	jmp	#LR__0044
00ee0     12 27 02 F6 | 	mov	local05, local04
00ee4     02 26 66 F0 | 	shl	local05, #2
00ee8     20 4E 05 F1 | 	add	fp, #32
00eec     A7 26 02 F1 | 	add	local05, fp
00ef0     13 2F 02 FB | 	rdlong	local09, local05
00ef4     7A 00 00 FF 
00ef8     84 E4 05 F1 | 	add	objptr, ##62596
00efc     F2 2E 62 FC | 	wrlong	local09, objptr
00f00     12 27 02 F6 | 	mov	local05, local04
00f04     01 26 06 F1 | 	add	local05, #1
00f08     02 26 66 F0 | 	shl	local05, #2
00f0c     A7 28 02 F6 | 	mov	local06, fp
00f10     A7 26 02 F1 | 	add	local05, fp
00f14     13 1F 02 FB | 	rdlong	local01, local05
00f18     04 E4 05 F1 | 	add	objptr, #4
00f1c     F2 1E 62 FC | 	wrlong	local01, objptr
00f20                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
00f20     04 E4 85 F1 | 	sub	objptr, #4
00f24     F2 1E 02 FB | 	rdlong	local01, objptr
00f28     7A 00 00 FF 
00f2c     84 E4 85 F1 | 	sub	objptr, ##62596
00f30     01 1E 56 F2 | 	cmps	local01, #1 wc
00f34     20 4E 85 F1 | 	sub	fp, #32
00f38     84 00 90 CD |  if_b	jmp	#LR__0042
00f3c     55 00 00 FF 
00f40     F0 E5 05 F1 | 	add	objptr, ##44016
00f44     F2 12 02 FB | 	rdlong	arg01, objptr
00f48     24 00 00 FF 
00f4c     94 E4 05 F1 | 	add	objptr, ##18580
00f50     F2 14 02 FB | 	rdlong	arg02, objptr
00f54     7A 00 00 FF 
00f58     84 E4 85 F1 | 	sub	objptr, ##62596
00f5c     01 16 06 F6 | 	mov	arg03, #1
00f60     28 6D B1 FD | 	call	#__system__Mid_S
00f64     7A 00 00 FF 
00f68     8C E4 05 F1 | 	add	objptr, ##62604
00f6c     F2 FA 61 FC | 	wrlong	result1, objptr
00f70     7A 00 00 FF 
00f74     8C E4 85 F1 | 	sub	objptr, ##62604
00f78     FD 12 02 F6 | 	mov	arg01, result1
00f7c     26 01 00 FF 
00f80     CB 15 06 F6 | 	mov	arg02, ##@LR__4145
00f84     04 4C B1 FD | 	call	#__system___string_cmp
00f88     00 FA 0D F2 | 	cmp	result1, #0 wz
00f8c     30 00 90 AD |  if_e	jmp	#LR__0041
00f90     19 29 02 F6 | 	mov	local06, local11
00f94     03 28 66 F0 | 	shl	local06, #3
00f98     53 00 00 FF 
00f9c     E0 E5 05 F1 | 	add	objptr, ##42976
00fa0     F2 28 02 F1 | 	add	local06, objptr
00fa4     26 00 00 FF 
00fa8     AC E4 05 F1 | 	add	objptr, ##19628
00fac     F2 2A 02 FB | 	rdlong	local07, objptr
00fb0     7A 00 00 FF 
00fb4     8C E4 85 F1 | 	sub	objptr, ##62604
00fb8     14 2B 62 FC | 	wrlong	local07, local06
00fbc     01 32 06 F1 | 	add	local11, #1
00fc0                 | LR__0041
00fc0                 | LR__0042
00fc0     55 00 00 FF 
00fc4     F0 E5 05 F1 | 	add	objptr, ##44016
00fc8     F2 12 02 FB | 	rdlong	arg01, objptr
00fcc     24 00 00 FF 
00fd0     94 E4 05 F1 | 	add	objptr, ##18580
00fd4     F2 14 02 FB | 	rdlong	arg02, objptr
00fd8     01 14 06 F1 | 	add	arg02, #1
00fdc     04 E4 05 F1 | 	add	objptr, #4
00fe0     F2 16 02 FB | 	rdlong	arg03, objptr
00fe4     04 E4 85 F1 | 	sub	objptr, #4
00fe8     F2 36 02 FB | 	rdlong	local13, objptr
00fec     7A 00 00 FF 
00ff0     84 E4 85 F1 | 	sub	objptr, ##62596
00ff4     1B 2F 02 F6 | 	mov	local09, local13
00ff8     17 17 82 F1 | 	sub	arg03, local09
00ffc     01 16 86 F1 | 	sub	arg03, #1
01000     88 6C B1 FD | 	call	#__system__Mid_S
01004     7A 00 00 FF 
01008     8C E4 05 F1 | 	add	objptr, ##62604
0100c     F2 FA 61 FC | 	wrlong	result1, objptr
01010     7A 00 00 FF 
01014     8C E4 85 F1 | 	sub	objptr, ##62604
01018     FD 12 02 F6 | 	mov	arg01, result1
0101c     26 01 00 FF 
01020     CC 15 06 F6 | 	mov	arg02, ##@LR__4146
01024     64 4B B1 FD | 	call	#__system___string_cmp
01028     00 FA 0D F2 | 	cmp	result1, #0 wz
0102c     30 00 90 AD |  if_e	jmp	#LR__0043
01030     19 29 02 F6 | 	mov	local06, local11
01034     03 28 66 F0 | 	shl	local06, #3
01038     53 00 00 FF 
0103c     E0 E5 05 F1 | 	add	objptr, ##42976
01040     F2 28 02 F1 | 	add	local06, objptr
01044     26 00 00 FF 
01048     AC E4 05 F1 | 	add	objptr, ##19628
0104c     F2 2A 02 FB | 	rdlong	local07, objptr
01050     7A 00 00 FF 
01054     8C E4 85 F1 | 	sub	objptr, ##62604
01058     14 2B 62 FC | 	wrlong	local07, local06
0105c     01 32 06 F1 | 	add	local11, #1
01060                 | LR__0043
01060     01 24 06 F1 | 	add	local04, #1
01064     70 FE 9F FD | 	jmp	#LR__0040
01068                 | LR__0044
01068     00 24 06 F6 | 	mov	local04, #0
0106c                 | ' 
0106c                 | ' ' 1d : find strings
0106c                 | ' 
0106c                 | ' i=0
0106c                 | ' do
0106c                 | LR__0045
0106c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
0106c     12 15 02 F6 | 	mov	arg02, local04
01070     03 14 66 F0 | 	shl	arg02, #3
01074     53 00 00 FF 
01078     E0 E5 05 F1 | 	add	objptr, ##42976
0107c     F2 14 02 F1 | 	add	arg02, objptr
01080     0A 13 02 FB | 	rdlong	arg01, arg02
01084     26 01 00 FF 
01088     CD 15 06 F6 | 	mov	arg02, ##@LR__4147
0108c     53 00 00 FF 
01090     E0 E5 85 F1 | 	sub	objptr, ##42976
01094     F4 4A B1 FD | 	call	#__system___string_cmp
01098     00 FA 0D F2 | 	cmp	result1, #0 wz
0109c     01 24 06 51 |  if_ne	add	local04, #1
010a0     50 01 90 5D |  if_ne	jmp	#LR__0050
010a4     12 39 02 F6 | 	mov	local14, local04
010a8                 | LR__0046
010a8     12 29 02 F6 | 	mov	local06, local04
010ac     01 28 06 F1 | 	add	local06, #1
010b0     03 28 66 F0 | 	shl	local06, #3
010b4     53 00 00 FF 
010b8     E0 E5 05 F1 | 	add	objptr, ##42976
010bc     F2 28 02 F1 | 	add	local06, objptr
010c0     14 37 02 FB | 	rdlong	local13, local06
010c4     26 00 00 FF 
010c8     AC E4 05 F1 | 	add	objptr, ##19628
010cc     F2 36 62 FC | 	wrlong	local13, objptr
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     03 28 66 F0 | 	shl	local06, #3
010d8     26 00 00 FF 
010dc     AC E4 85 F1 | 	sub	objptr, ##19628
010e0     F2 28 02 F1 | 	add	local06, objptr
010e4     1C 31 02 F6 | 	mov	local10, local14
010e8     03 30 66 F0 | 	shl	local10, #3
010ec     F2 30 02 F1 | 	add	local10, objptr
010f0     18 13 02 FB | 	rdlong	arg01, local10
010f4     53 00 00 FF 
010f8     E0 E5 85 F1 | 	sub	objptr, ##42976
010fc     1B 2F 02 F6 | 	mov	local09, local13
01100     17 15 02 F6 | 	mov	arg02, local09
01104     B8 4A B1 FD | 	call	#__system___string_concat
01108     14 FB 61 FC | 	wrlong	result1, local06
0110c     12 31 02 F6 | 	mov	local10, local04
01110     01 30 06 F1 | 	add	local10, #1
01114     19 3B 02 F6 | 	mov	local15, local11
01118     01 3A 06 F1 | 	add	local15, #1
0111c     97 3C 48 FB | 	callpa	#(@LR__0048-@LR__0047)>>2,fcache_load_ptr_
01120                 | LR__0047
01120     1D 31 52 F2 | 	cmps	local10, local15 wc
01124     70 00 90 3D |  if_ae	jmp	#LR__0049
01128     18 37 02 F6 | 	mov	local13, local10
0112c     01 36 06 F1 | 	add	local13, #1
01130     03 36 66 F0 | 	shl	local13, #3
01134     53 00 00 FF 
01138     E0 E5 05 F1 | 	add	objptr, ##42976
0113c     F2 36 02 F1 | 	add	local13, objptr
01140     1B 1F 02 FB | 	rdlong	local01, local13
01144     18 2B 02 F6 | 	mov	local07, local10
01148     01 2A 06 F1 | 	add	local07, #1
0114c     03 2A 66 F0 | 	shl	local07, #3
01150     F2 2A 02 F1 | 	add	local07, objptr
01154     04 2A 06 F1 | 	add	local07, #4
01158     15 27 02 FB | 	rdlong	local05, local07
0115c     18 2B 02 F6 | 	mov	local07, local10
01160     03 2A 66 F0 | 	shl	local07, #3
01164     F2 2E 02 F6 | 	mov	local09, objptr
01168     F2 2A 02 F1 | 	add	local07, objptr
0116c     15 1F 62 FC | 	wrlong	local01, local07
01170     18 37 02 F6 | 	mov	local13, local10
01174     1B 2B 02 F6 | 	mov	local07, local13
01178     03 2A 66 F0 | 	shl	local07, #3
0117c     F2 2A 02 F1 | 	add	local07, objptr
01180     04 2A 06 F1 | 	add	local07, #4
01184     15 27 62 FC | 	wrlong	local05, local07
01188     01 30 06 F1 | 	add	local10, #1
0118c     53 00 00 FF 
01190     E0 E5 85 F1 | 	sub	objptr, ##42976
01194     88 FF 9F FD | 	jmp	#LR__0047
01198                 | LR__0048
01198                 | LR__0049
01198     01 32 86 F1 | 	sub	local11, #1
0119c     7A 00 00 FF 
011a0     8C E4 05 F1 | 	add	objptr, ##62604
011a4     F2 12 02 FB | 	rdlong	arg01, objptr
011a8     7A 00 00 FF 
011ac     8C E4 85 F1 | 	sub	objptr, ##62604
011b0     26 01 00 FF 
011b4     CF 15 06 F6 | 	mov	arg02, ##@LR__4148
011b8     D0 49 B1 FD | 	call	#__system___string_cmp
011bc     00 FA 0D F2 | 	cmp	result1, #0 wz
011c0     19 25 52 52 |  if_ne	cmps	local04, local11 wc
011c4     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0046
011c8                 | '   if p$<>"""" then k+=1:i+=1
011c8     7A 00 00 FF 
011cc     8C E4 05 F1 | 	add	objptr, ##62604
011d0     F2 12 02 FB | 	rdlong	arg01, objptr
011d4     7A 00 00 FF 
011d8     8C E4 85 F1 | 	sub	objptr, ##62604
011dc     26 01 00 FF 
011e0     D1 15 06 F6 | 	mov	arg02, ##@LR__4149
011e4     A4 49 B1 FD | 	call	#__system___string_cmp
011e8     00 FA 0D F2 | 	cmp	result1, #0 wz
011ec     01 32 06 51 |  if_ne	add	local11, #1
011f0     01 24 06 51 |  if_ne	add	local04, #1
011f4                 | LR__0050
011f4     19 25 52 F2 | 	cmps	local04, local11 wc
011f8     70 FE 9F CD |  if_b	jmp	#LR__0045
011fc     00 24 06 F6 | 	mov	local04, #0
01200                 | ' 
01200                 | ' ' 1e : concatenate strings if "" detected between
01200                 | '  
01200                 | ' i=0 : do
01200                 | LR__0051
01200                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01200     12 3D 02 F6 | 	mov	local16, local04
01204     03 3C 66 F0 | 	shl	local16, #3
01208     53 00 00 FF 
0120c     E0 E5 05 F1 | 	add	objptr, ##42976
01210     F2 3C 02 F1 | 	add	local16, objptr
01214     1E 13 02 FB | 	rdlong	arg01, local16
01218     01 14 06 F6 | 	mov	arg02, #1
0121c     53 00 00 FF 
01220     E0 E5 85 F1 | 	sub	objptr, ##42976
01224     D4 69 B1 FD | 	call	#__system__Right_S
01228     FD 12 02 F6 | 	mov	arg01, result1
0122c     26 01 00 FF 
01230     D3 15 06 F6 | 	mov	arg02, ##@LR__4150
01234     54 49 B1 FD | 	call	#__system___string_cmp
01238     00 FA 0D F2 | 	cmp	result1, #0 wz
0123c     78 01 90 5D |  if_ne	jmp	#LR__0057
01240     12 2B 02 F6 | 	mov	local07, local04
01244     01 2A 06 F1 | 	add	local07, #1
01248     03 2A 66 F0 | 	shl	local07, #3
0124c     53 00 00 FF 
01250     E0 E5 05 F1 | 	add	objptr, ##42976
01254     F2 2E 02 F6 | 	mov	local09, objptr
01258     F2 2A 02 F1 | 	add	local07, objptr
0125c     15 13 02 FB | 	rdlong	arg01, local07
01260     01 14 06 F6 | 	mov	arg02, #1
01264     53 00 00 FF 
01268     E0 E5 85 F1 | 	sub	objptr, ##42976
0126c     04 69 B1 FD | 	call	#__system__Left_S
01270     FD 12 02 F6 | 	mov	arg01, result1
01274     26 01 00 FF 
01278     D5 15 06 F6 | 	mov	arg02, ##@LR__4151
0127c     0C 49 B1 FD | 	call	#__system___string_cmp
01280     00 FA 0D F2 | 	cmp	result1, #0 wz
01284     30 01 90 5D |  if_ne	jmp	#LR__0057
01288     12 29 02 F6 | 	mov	local06, local04
0128c     03 28 66 F0 | 	shl	local06, #3
01290     53 00 00 FF 
01294     E0 E5 05 F1 | 	add	objptr, ##42976
01298     F2 28 02 F1 | 	add	local06, objptr
0129c     12 37 02 F6 | 	mov	local13, local04
012a0     03 36 66 F0 | 	shl	local13, #3
012a4     F2 36 02 F1 | 	add	local13, objptr
012a8     1B 2B 02 FB | 	rdlong	local07, local13
012ac     12 37 02 F6 | 	mov	local13, local04
012b0     01 36 06 F1 | 	add	local13, #1
012b4     03 36 66 F0 | 	shl	local13, #3
012b8     F2 36 02 F1 | 	add	local13, objptr
012bc     1B 2F 02 FB | 	rdlong	local09, local13
012c0     12 3F 02 F6 | 	mov	local17, local04
012c4     01 3E 06 F1 | 	add	local17, #1
012c8     1F 41 02 F6 | 	mov	local18, local17
012cc     03 40 66 F0 | 	shl	local18, #3
012d0     F2 42 02 F6 | 	mov	local19, objptr
012d4     F2 40 02 F1 | 	add	local18, objptr
012d8     20 13 02 FB | 	rdlong	arg01, local18
012dc     53 00 00 FF 
012e0     E0 E5 85 F1 | 	sub	objptr, ##42976
012e4     09 2D 02 F6 | 	mov	local08, arg01
012e8     97 06 48 FB | 	callpa	#(@LR__0053-@LR__0052)>>2,fcache_load_ptr_
012ec                 | LR__0052
012ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
012f0     01 2C 06 51 |  if_ne	add	local08, #1
012f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0052
012f8                 | LR__0053
012f8     09 2D 82 F1 | 	sub	local08, arg01
012fc     16 37 02 F6 | 	mov	local13, local08
01300     01 36 86 F1 | 	sub	local13, #1
01304     17 13 02 F6 | 	mov	arg01, local09
01308     1B 15 02 F6 | 	mov	arg02, local13
0130c     EC 68 B1 FD | 	call	#__system__Right_S
01310     FD 2E 02 F6 | 	mov	local09, result1
01314     15 13 02 F6 | 	mov	arg01, local07
01318     17 15 02 F6 | 	mov	arg02, local09
0131c     A0 48 B1 FD | 	call	#__system___string_concat
01320     14 FB 61 FC | 	wrlong	result1, local06
01324                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01324     12 31 02 F6 | 	mov	local10, local04
01328     01 30 06 F1 | 	add	local10, #1
0132c     19 45 02 F6 | 	mov	local20, local11
01330     01 44 06 F1 | 	add	local20, #1
01334     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01338                 | LR__0054
01338     22 31 52 F2 | 	cmps	local10, local20 wc
0133c     70 00 90 3D |  if_ae	jmp	#LR__0056
01340     18 3D 02 F6 | 	mov	local16, local10
01344     01 3C 06 F1 | 	add	local16, #1
01348     03 3C 66 F0 | 	shl	local16, #3
0134c     53 00 00 FF 
01350     E0 E5 05 F1 | 	add	objptr, ##42976
01354     F2 3C 02 F1 | 	add	local16, objptr
01358     1E 1F 02 FB | 	rdlong	local01, local16
0135c     18 2B 02 F6 | 	mov	local07, local10
01360     01 2A 06 F1 | 	add	local07, #1
01364     03 2A 66 F0 | 	shl	local07, #3
01368     F2 2A 02 F1 | 	add	local07, objptr
0136c     04 2A 06 F1 | 	add	local07, #4
01370     15 27 02 FB | 	rdlong	local05, local07
01374     18 2B 02 F6 | 	mov	local07, local10
01378     03 2A 66 F0 | 	shl	local07, #3
0137c     F2 2E 02 F6 | 	mov	local09, objptr
01380     F2 2A 02 F1 | 	add	local07, objptr
01384     15 1F 62 FC | 	wrlong	local01, local07
01388     18 37 02 F6 | 	mov	local13, local10
0138c     1B 2B 02 F6 | 	mov	local07, local13
01390     03 2A 66 F0 | 	shl	local07, #3
01394     F2 2A 02 F1 | 	add	local07, objptr
01398     04 2A 06 F1 | 	add	local07, #4
0139c     15 27 62 FC | 	wrlong	local05, local07
013a0     01 30 06 F1 | 	add	local10, #1
013a4     53 00 00 FF 
013a8     E0 E5 85 F1 | 	sub	objptr, ##42976
013ac     88 FF 9F FD | 	jmp	#LR__0054
013b0                 | LR__0055
013b0                 | LR__0056
013b0     01 24 86 F1 | 	sub	local04, #1
013b4     01 32 86 F1 | 	sub	local11, #1
013b8                 | LR__0057
013b8     01 24 06 F1 | 	add	local04, #1
013bc     19 25 52 F2 | 	cmps	local04, local11 wc
013c0     3C FE 9F CD |  if_b	jmp	#LR__0051
013c4     00 24 06 F6 | 	mov	local04, #0
013c8                 | '  
013c8                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
013c8                 | '  
013c8                 | ' i=0 : do
013c8                 | LR__0058
013c8     12 29 02 F6 | 	mov	local06, local04
013cc     03 28 66 F0 | 	shl	local06, #3
013d0     53 00 00 FF 
013d4     E0 E5 05 F1 | 	add	objptr, ##42976
013d8     F2 28 02 F1 | 	add	local06, objptr
013dc     14 2B 02 FB | 	rdlong	local07, local06
013e0     26 00 00 FF 
013e4     B4 E4 05 F1 | 	add	objptr, ##19636
013e8     F2 2A 62 FC | 	wrlong	local07, objptr
013ec     12 29 02 F6 | 	mov	local06, local04
013f0     01 28 06 F1 | 	add	local06, #1
013f4     03 28 66 F0 | 	shl	local06, #3
013f8     26 00 00 FF 
013fc     B4 E4 85 F1 | 	sub	objptr, ##19636
01400     F2 28 02 F1 | 	add	local06, objptr
01404     14 2B 02 FB | 	rdlong	local07, local06
01408     26 00 00 FF 
0140c     B8 E4 05 F1 | 	add	objptr, ##19640
01410     F2 2A 62 FC | 	wrlong	local07, objptr
01414                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01414     04 E4 85 F1 | 	sub	objptr, #4
01418     F2 12 02 FB | 	rdlong	arg01, objptr
0141c     7A 00 00 FF 
01420     94 E4 85 F1 | 	sub	objptr, ##62612
01424     26 01 00 FF 
01428     D7 15 06 F6 | 	mov	arg02, ##@LR__4152
0142c     5C 47 B1 FD | 	call	#__system___string_cmp
01430     00 FA 0D F2 | 	cmp	result1, #0 wz
01434     04 01 90 AD |  if_e	jmp	#LR__0059
01438     7A 00 00 FF 
0143c     94 E4 05 F1 | 	add	objptr, ##62612
01440     F2 12 02 FB | 	rdlong	arg01, objptr
01444     7A 00 00 FF 
01448     94 E4 85 F1 | 	sub	objptr, ##62612
0144c     26 01 00 FF 
01450     D9 15 06 F6 | 	mov	arg02, ##@LR__4153
01454     34 47 B1 FD | 	call	#__system___string_cmp
01458     FD 26 0A F6 | 	mov	local05, result1 wz
0145c     DC 00 90 AD |  if_e	jmp	#LR__0059
01460     7A 00 00 FF 
01464     94 E4 05 F1 | 	add	objptr, ##62612
01468     F2 12 02 FB | 	rdlong	arg01, objptr
0146c     7A 00 00 FF 
01470     94 E4 85 F1 | 	sub	objptr, ##62612
01474     26 01 00 FF 
01478     DB 15 06 F6 | 	mov	arg02, ##@LR__4154
0147c     0C 47 B1 FD | 	call	#__system___string_cmp
01480     00 FA 0D F2 | 	cmp	result1, #0 wz
01484     B4 00 90 AD |  if_e	jmp	#LR__0059
01488     7A 00 00 FF 
0148c     94 E4 05 F1 | 	add	objptr, ##62612
01490     F2 12 02 FB | 	rdlong	arg01, objptr
01494     7A 00 00 FF 
01498     94 E4 85 F1 | 	sub	objptr, ##62612
0149c     26 01 00 FF 
014a0     DD 2F 06 F6 | 	mov	local09, ##@LR__4155
014a4     17 15 02 F6 | 	mov	arg02, local09
014a8     E0 46 B1 FD | 	call	#__system___string_cmp
014ac     00 FA 0D F2 | 	cmp	result1, #0 wz
014b0     88 00 90 AD |  if_e	jmp	#LR__0059
014b4     7A 00 00 FF 
014b8     94 E4 05 F1 | 	add	objptr, ##62612
014bc     F2 12 02 FB | 	rdlong	arg01, objptr
014c0     7A 00 00 FF 
014c4     94 E4 85 F1 | 	sub	objptr, ##62612
014c8     26 01 00 FF 
014cc     DF 37 06 F6 | 	mov	local13, ##@LR__4156
014d0     1B 2F 02 F6 | 	mov	local09, local13
014d4     17 15 02 F6 | 	mov	arg02, local09
014d8     B0 46 B1 FD | 	call	#__system___string_cmp
014dc     00 FA 0D F2 | 	cmp	result1, #0 wz
014e0     58 00 90 AD |  if_e	jmp	#LR__0059
014e4     7A 00 00 FF 
014e8     94 E4 05 F1 | 	add	objptr, ##62612
014ec     F2 12 02 FB | 	rdlong	arg01, objptr
014f0     7A 00 00 FF 
014f4     94 E4 85 F1 | 	sub	objptr, ##62612
014f8     26 01 00 FF 
014fc     E1 37 06 F6 | 	mov	local13, ##@LR__4157
01500     1B 15 02 F6 | 	mov	arg02, local13
01504     84 46 B1 FD | 	call	#__system___string_cmp
01508     FD 2E 0A F6 | 	mov	local09, result1 wz
0150c     2C 00 90 AD |  if_e	jmp	#LR__0059
01510     7A 00 00 FF 
01514     94 E4 05 F1 | 	add	objptr, ##62612
01518     F2 12 02 FB | 	rdlong	arg01, objptr
0151c     7A 00 00 FF 
01520     94 E4 85 F1 | 	sub	objptr, ##62612
01524     26 01 00 FF 
01528     E3 47 06 F6 | 	mov	local21, ##@LR__4158
0152c     23 15 02 F6 | 	mov	arg02, local21
01530     58 46 B1 FD | 	call	#__system___string_cmp
01534     FD 36 0A F6 | 	mov	local13, result1 wz
01538     30 00 90 5D |  if_ne	jmp	#LR__0060
0153c                 | LR__0059
0153c     7A 00 00 FF 
01540     98 E4 05 F1 | 	add	objptr, ##62616
01544     F2 12 02 FB | 	rdlong	arg01, objptr
01548     7A 00 00 FF 
0154c     98 E4 85 F1 | 	sub	objptr, ##62616
01550     26 01 00 FF 
01554     E5 49 06 F6 | 	mov	local22, ##@LR__4159
01558     24 4B 02 F6 | 	mov	local23, local22
0155c     25 15 02 F6 | 	mov	arg02, local23
01560     28 46 B1 FD | 	call	#__system___string_cmp
01564     FD 46 0A F6 | 	mov	local21, result1 wz
01568     18 01 90 AD |  if_e	jmp	#LR__0063
0156c                 | LR__0060
0156c     7A 00 00 FF 
01570     94 E4 05 F1 | 	add	objptr, ##62612
01574     F2 12 02 FB | 	rdlong	arg01, objptr
01578     7A 00 00 FF 
0157c     94 E4 85 F1 | 	sub	objptr, ##62612
01580     26 01 00 FF 
01584     E7 49 06 F6 | 	mov	local22, ##@LR__4160
01588     24 15 02 F6 | 	mov	arg02, local22
0158c     FC 45 B1 FD | 	call	#__system___string_cmp
01590     FD 4A 0A F6 | 	mov	local23, result1 wz
01594     30 00 90 5D |  if_ne	jmp	#LR__0061
01598     7A 00 00 FF 
0159c     98 E4 05 F1 | 	add	objptr, ##62616
015a0     F2 12 02 FB | 	rdlong	arg01, objptr
015a4     7A 00 00 FF 
015a8     98 E4 85 F1 | 	sub	objptr, ##62616
015ac     26 01 00 FF 
015b0     E9 41 06 F6 | 	mov	local18, ##@LR__4161
015b4     20 3F 02 F6 | 	mov	local17, local18
015b8     1F 15 02 F6 | 	mov	arg02, local17
015bc     CC 45 B1 FD | 	call	#__system___string_cmp
015c0     FD 48 0A F6 | 	mov	local22, result1 wz
015c4     BC 00 90 AD |  if_e	jmp	#LR__0063
015c8                 | LR__0061
015c8     7A 00 00 FF 
015cc     94 E4 05 F1 | 	add	objptr, ##62612
015d0     F2 12 02 FB | 	rdlong	arg01, objptr
015d4     7A 00 00 FF 
015d8     94 E4 85 F1 | 	sub	objptr, ##62612
015dc     26 01 00 FF 
015e0     EB 41 06 F6 | 	mov	local18, ##@LR__4162
015e4     20 15 02 F6 | 	mov	arg02, local18
015e8     A0 45 B1 FD | 	call	#__system___string_cmp
015ec     FD 3E 0A F6 | 	mov	local17, result1 wz
015f0     30 00 90 5D |  if_ne	jmp	#LR__0062
015f4     7A 00 00 FF 
015f8     98 E4 05 F1 | 	add	objptr, ##62616
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     7A 00 00 FF 
01604     98 E4 85 F1 | 	sub	objptr, ##62616
01608     26 01 00 FF 
0160c     ED 4D 06 F6 | 	mov	local24, ##@LR__4163
01610     26 43 02 F6 | 	mov	local19, local24
01614     21 15 02 F6 | 	mov	arg02, local19
01618     70 45 B1 FD | 	call	#__system___string_cmp
0161c     FD 40 0A F6 | 	mov	local18, result1 wz
01620     60 00 90 AD |  if_e	jmp	#LR__0063
01624                 | LR__0062
01624     7A 00 00 FF 
01628     94 E4 05 F1 | 	add	objptr, ##62612
0162c     F2 12 02 FB | 	rdlong	arg01, objptr
01630     7A 00 00 FF 
01634     94 E4 85 F1 | 	sub	objptr, ##62612
01638     26 01 00 FF 
0163c     EF 4F 06 F6 | 	mov	local25, ##@LR__4164
01640     27 4D 02 F6 | 	mov	local24, local25
01644     26 15 02 F6 | 	mov	arg02, local24
01648     40 45 B1 FD | 	call	#__system___string_cmp
0164c     FD 42 0A F6 | 	mov	local19, result1 wz
01650     10 01 90 5D |  if_ne	jmp	#LR__0067
01654     7A 00 00 FF 
01658     98 E4 05 F1 | 	add	objptr, ##62616
0165c     F2 12 02 FB | 	rdlong	arg01, objptr
01660     7A 00 00 FF 
01664     98 E4 85 F1 | 	sub	objptr, ##62616
01668     26 01 00 FF 
0166c     F1 51 06 F6 | 	mov	local26, ##@LR__4165
01670     28 4F 02 F6 | 	mov	local25, local26
01674     27 15 02 F6 | 	mov	arg02, local25
01678     10 45 B1 FD | 	call	#__system___string_cmp
0167c     FD 4C 0A F6 | 	mov	local24, result1 wz
01680     E0 00 90 5D |  if_ne	jmp	#LR__0067
01684                 | LR__0063
01684     12 29 02 F6 | 	mov	local06, local04
01688     03 28 66 F0 | 	shl	local06, #3
0168c     53 00 00 FF 
01690     E0 E5 05 F1 | 	add	objptr, ##42976
01694     F2 28 02 F1 | 	add	local06, objptr
01698     26 00 00 FF 
0169c     B4 E4 05 F1 | 	add	objptr, ##19636
016a0     F2 12 02 FB | 	rdlong	arg01, objptr
016a4     04 E4 05 F1 | 	add	objptr, #4
016a8     F2 36 02 FB | 	rdlong	local13, objptr
016ac     7A 00 00 FF 
016b0     98 E4 85 F1 | 	sub	objptr, ##62616
016b4     1B 2F 02 F6 | 	mov	local09, local13
016b8     17 15 02 F6 | 	mov	arg02, local09
016bc     00 45 B1 FD | 	call	#__system___string_concat
016c0     14 FB 61 FC | 	wrlong	result1, local06
016c4                 | '     lparts(i).part$=s1$+s2$
016c4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
016c4     12 31 02 F6 | 	mov	local10, local04
016c8     01 30 06 F1 | 	add	local10, #1
016cc     19 53 02 F6 | 	mov	local27, local11
016d0     01 52 06 F1 | 	add	local27, #1
016d4     97 42 48 FB | 	callpa	#(@LR__0065-@LR__0064)>>2,fcache_load_ptr_
016d8                 | LR__0064
016d8     29 31 52 F2 | 	cmps	local10, local27 wc
016dc     7C 00 90 3D |  if_ae	jmp	#LR__0066
016e0     18 3D 02 F6 | 	mov	local16, local10
016e4     01 3C 06 F1 | 	add	local16, #1
016e8     03 3C 66 F0 | 	shl	local16, #3
016ec     53 00 00 FF 
016f0     E0 E5 05 F1 | 	add	objptr, ##42976
016f4     F2 3C 02 F1 | 	add	local16, objptr
016f8     1E 1F 02 FB | 	rdlong	local01, local16
016fc     18 2B 02 F6 | 	mov	local07, local10
01700     01 2A 06 F1 | 	add	local07, #1
01704     03 2A 66 F0 | 	shl	local07, #3
01708     F2 2A 02 F1 | 	add	local07, objptr
0170c     04 2A 06 F1 | 	add	local07, #4
01710     15 27 02 FB | 	rdlong	local05, local07
01714     18 2B 02 F6 | 	mov	local07, local10
01718     03 2A 66 F0 | 	shl	local07, #3
0171c     F2 2E 02 F6 | 	mov	local09, objptr
01720     F2 2A 02 F1 | 	add	local07, objptr
01724     15 1F 62 FC | 	wrlong	local01, local07
01728     18 37 02 F6 | 	mov	local13, local10
0172c     1B 47 02 F6 | 	mov	local21, local13
01730     23 4B 02 F6 | 	mov	local23, local21
01734     03 4A 66 F0 | 	shl	local23, #3
01738     F2 48 02 F6 | 	mov	local22, objptr
0173c     F2 4A 02 F1 | 	add	local23, objptr
01740     04 4A 06 F1 | 	add	local23, #4
01744     25 27 62 FC | 	wrlong	local05, local23
01748     04 4A 86 F1 | 	sub	local23, #4
0174c     01 30 06 F1 | 	add	local10, #1
01750     53 00 00 FF 
01754     E0 E5 85 F1 | 	sub	objptr, ##42976
01758     7C FF 9F FD | 	jmp	#LR__0064
0175c                 | LR__0065
0175c                 | LR__0066
0175c     01 24 86 F1 | 	sub	local04, #1
01760     01 32 86 F1 | 	sub	local11, #1
01764                 | LR__0067
01764     01 24 06 F1 | 	add	local04, #1
01768     19 25 52 F2 | 	cmps	local04, local11 wc
0176c     58 FC 9F CD |  if_b	jmp	#LR__0058
01770                 | '  
01770                 | ' ' 1f : now remove parts that are spaces
01770                 | ' 
01770                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
01770     00 24 06 F6 | 	mov	local04, #0
01774     19 55 02 F6 | 	mov	local28, local11
01778     01 54 06 F1 | 	add	local28, #1
0177c                 | LR__0068
0177c     2A 25 52 F2 | 	cmps	local04, local28 wc
01780     50 00 90 3D |  if_ae	jmp	#LR__0069
01784     12 29 02 F6 | 	mov	local06, local04
01788     03 28 66 F0 | 	shl	local06, #3
0178c     53 00 00 FF 
01790     E0 E5 05 F1 | 	add	objptr, ##42976
01794     F2 28 02 F1 | 	add	local06, objptr
01798     12 2F 02 F6 | 	mov	local09, local04
0179c     17 37 02 F6 | 	mov	local13, local09
017a0     1B 47 02 F6 | 	mov	local21, local13
017a4     03 46 66 F0 | 	shl	local21, #3
017a8     F2 4A 02 F6 | 	mov	local23, objptr
017ac     F2 46 02 F1 | 	add	local21, objptr
017b0     23 13 02 FB | 	rdlong	arg01, local21
017b4     53 00 00 FF 
017b8     E0 E5 85 F1 | 	sub	objptr, ##42976
017bc     E8 67 B1 FD | 	call	#__system__RTrim_S
017c0     FD 12 02 F6 | 	mov	arg01, result1
017c4     20 67 B1 FD | 	call	#__system__LTrim_S
017c8     14 FB 61 FC | 	wrlong	result1, local06
017cc     01 24 06 F1 | 	add	local04, #1
017d0     A8 FF 9F FD | 	jmp	#LR__0068
017d4                 | LR__0069
017d4     00 24 06 F6 | 	mov	local04, #0
017d8     97 8A 48 FB | 	callpa	#(@LR__0076-@LR__0070)>>2,fcache_load_ptr_
017dc                 | ' 
017dc                 | ' i=0
017dc                 | ' do 
017dc                 | LR__0070
017dc                 | '   if len(lparts(i).part$)=0 then 
017dc     12 3D 02 F6 | 	mov	local16, local04
017e0     03 3C 66 F0 | 	shl	local16, #3
017e4     53 00 00 FF 
017e8     E0 E5 05 F1 | 	add	objptr, ##42976
017ec     F2 2A 02 F6 | 	mov	local07, objptr
017f0     F2 3C 02 F1 | 	add	local16, objptr
017f4     1E 13 02 FB | 	rdlong	arg01, local16
017f8     53 00 00 FF 
017fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01800     09 2D 02 F6 | 	mov	local08, arg01
01804                 | LR__0071
01804     16 FB C9 FA | 	rdbyte	result1, local08 wz
01808     01 2C 06 51 |  if_ne	add	local08, #1
0180c     F4 FF 9F 5D |  if_ne	jmp	#LR__0071
01810     09 2D 8A F1 | 	sub	local08, arg01 wz
01814     C4 00 90 5D |  if_ne	jmp	#LR__0075
01818                 | '     if i=k-1 then k-=1  :  exit
01818     19 1F 02 F6 | 	mov	local01, local11
0181c     01 1E 86 F1 | 	sub	local01, #1
01820     0F 25 0A F2 | 	cmp	local04, local01 wz
01824     01 32 86 A1 |  if_e	sub	local11, #1
01828     C4 00 90 AD |  if_e	jmp	#LR__0077
0182c                 | '     if i<k-1 then 
0182c     19 1F 02 F6 | 	mov	local01, local11
01830     01 1E 86 F1 | 	sub	local01, #1
01834     0F 25 52 F2 | 	cmps	local04, local01 wc
01838     A0 00 90 3D |  if_ae	jmp	#LR__0074
0183c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0183c     12 31 02 F6 | 	mov	local10, local04
01840     19 57 02 F6 | 	mov	local29, local11
01844     01 56 86 F1 | 	sub	local29, #1
01848                 | LR__0072
01848     2B 31 52 F2 | 	cmps	local10, local29 wc
0184c     80 00 90 3D |  if_ae	jmp	#LR__0073
01850     18 3D 02 F6 | 	mov	local16, local10
01854     01 3C 06 F1 | 	add	local16, #1
01858     03 3C 66 F0 | 	shl	local16, #3
0185c     53 00 00 FF 
01860     E0 E5 05 F1 | 	add	objptr, ##42976
01864     F2 3C 02 F1 | 	add	local16, objptr
01868     1E 1F 02 FB | 	rdlong	local01, local16
0186c     18 2B 02 F6 | 	mov	local07, local10
01870     01 2A 06 F1 | 	add	local07, #1
01874     03 2A 66 F0 | 	shl	local07, #3
01878     F2 2A 02 F1 | 	add	local07, objptr
0187c     04 2A 06 F1 | 	add	local07, #4
01880     15 27 02 FB | 	rdlong	local05, local07
01884     18 29 02 F6 | 	mov	local06, local10
01888     14 2B 02 F6 | 	mov	local07, local06
0188c     03 2A 66 F0 | 	shl	local07, #3
01890     F2 2E 02 F6 | 	mov	local09, objptr
01894     F2 2A 02 F1 | 	add	local07, objptr
01898     15 1F 62 FC | 	wrlong	local01, local07
0189c     18 37 02 F6 | 	mov	local13, local10
018a0     1B 47 02 F6 | 	mov	local21, local13
018a4     23 4B 02 F6 | 	mov	local23, local21
018a8     03 4A 66 F0 | 	shl	local23, #3
018ac     F2 48 02 F6 | 	mov	local22, objptr
018b0     F2 4A 02 F1 | 	add	local23, objptr
018b4     04 4A 06 F1 | 	add	local23, #4
018b8     25 27 62 FC | 	wrlong	local05, local23
018bc     04 4A 86 F1 | 	sub	local23, #4
018c0     01 30 06 F1 | 	add	local10, #1
018c4     53 00 00 FF 
018c8     E0 E5 85 F1 | 	sub	objptr, ##42976
018cc     78 FF 9F FD | 	jmp	#LR__0072
018d0                 | LR__0073
018d0     01 32 86 F1 | 	sub	local11, #1
018d4                 | '       if i>0 then i-=1 
018d4     01 24 56 F2 | 	cmps	local04, #1 wc
018d8     01 24 86 31 |  if_ae	sub	local04, #1
018dc                 | LR__0074
018dc                 | LR__0075
018dc     01 24 06 F1 | 	add	local04, #1
018e0     19 1F 02 F6 | 	mov	local01, local11
018e4     01 1E 86 F1 | 	sub	local01, #1
018e8     0F 25 5A F2 | 	cmps	local04, local01 wcz
018ec     EC FE 9F ED |  if_be	jmp	#LR__0070
018f0                 | LR__0076
018f0                 | LR__0077
018f0                 | ' 
018f0                 | ' ' 1g: lowercase all that is not a string
018f0                 | ' 
018f0                 | ' for j=0 to k-1
018f0     00 30 06 F6 | 	mov	local10, #0
018f4     19 59 02 F6 | 	mov	local30, local11
018f8                 | LR__0078
018f8     2C 31 52 F2 | 	cmps	local10, local30 wc
018fc     D0 00 90 3D |  if_ae	jmp	#LR__0081
01900                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01900     18 3D 02 F6 | 	mov	local16, local10
01904     03 3C 66 F0 | 	shl	local16, #3
01908     53 00 00 FF 
0190c     E0 E5 05 F1 | 	add	objptr, ##42976
01910     F2 2A 02 F6 | 	mov	local07, objptr
01914     F2 3C 02 F1 | 	add	local16, objptr
01918     1E 13 02 FB | 	rdlong	arg01, local16
0191c     01 14 06 F6 | 	mov	arg02, #1
01920     53 00 00 FF 
01924     E0 E5 85 F1 | 	sub	objptr, ##42976
01928     48 62 B1 FD | 	call	#__system__Left_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     26 01 00 FF 
01934     F3 15 06 F6 | 	mov	arg02, ##@LR__4166
01938     50 42 B1 FD | 	call	#__system___string_cmp
0193c     00 FA 0D F2 | 	cmp	result1, #0 wz
01940     44 00 90 5D |  if_ne	jmp	#LR__0079
01944     18 2B 02 F6 | 	mov	local07, local10
01948     03 2A 66 F0 | 	shl	local07, #3
0194c     53 00 00 FF 
01950     E0 E5 05 F1 | 	add	objptr, ##42976
01954     F2 2E 02 F6 | 	mov	local09, objptr
01958     F2 2A 02 F1 | 	add	local07, objptr
0195c     15 13 02 FB | 	rdlong	arg01, local07
01960     01 14 06 F6 | 	mov	arg02, #1
01964     53 00 00 FF 
01968     E0 E5 85 F1 | 	sub	objptr, ##42976
0196c     8C 62 B1 FD | 	call	#__system__Right_S
01970     FD 12 02 F6 | 	mov	arg01, result1
01974     26 01 00 FF 
01978     F5 15 06 F6 | 	mov	arg02, ##@LR__4167
0197c     0C 42 B1 FD | 	call	#__system___string_cmp
01980     00 FA 0D F2 | 	cmp	result1, #0 wz
01984     40 00 90 AD |  if_e	jmp	#LR__0080
01988                 | LR__0079
01988     18 29 02 F6 | 	mov	local06, local10
0198c     03 28 66 F0 | 	shl	local06, #3
01990     53 00 00 FF 
01994     E0 E5 05 F1 | 	add	objptr, ##42976
01998     F2 28 02 F1 | 	add	local06, objptr
0199c     18 2F 02 F6 | 	mov	local09, local10
019a0     17 37 02 F6 | 	mov	local13, local09
019a4     1B 47 02 F6 | 	mov	local21, local13
019a8     03 46 66 F0 | 	shl	local21, #3
019ac     F2 4A 02 F6 | 	mov	local23, objptr
019b0     F2 46 02 F1 | 	add	local21, objptr
019b4     23 13 02 FB | 	rdlong	arg01, local21
019b8     53 00 00 FF 
019bc     E0 E5 85 F1 | 	sub	objptr, ##42976
019c0     64 64 B1 FD | 	call	#__system__LCase_S
019c4     14 FB 61 FC | 	wrlong	result1, local06
019c8                 | LR__0080
019c8     01 30 06 F1 | 	add	local10, #1
019cc     28 FF 9F FD | 	jmp	#LR__0078
019d0                 | LR__0081
019d0                 | ' 
019d0                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
019d0                 | ' 
019d0                 | ' for i=0 to k: lparts(i).token=-1: next i
019d0     00 24 06 F6 | 	mov	local04, #0
019d4     19 5B 02 F6 | 	mov	local31, local11
019d8     01 5A 06 F1 | 	add	local31, #1
019dc     97 1C 48 FB | 	callpa	#(@LR__0083-@LR__0082)>>2,fcache_load_ptr_
019e0                 | LR__0082
019e0     2D 25 52 F2 | 	cmps	local04, local31 wc
019e4     30 00 90 3D |  if_ae	jmp	#LR__0084
019e8     12 29 02 F6 | 	mov	local06, local04
019ec     03 28 66 F0 | 	shl	local06, #3
019f0     53 00 00 FF 
019f4     E0 E5 05 F1 | 	add	objptr, ##42976
019f8     F2 28 02 F1 | 	add	local06, objptr
019fc     04 28 06 F1 | 	add	local06, #4
01a00     FF FF FF FF 
01a04     14 FF 6B FC | 	wrlong	##-1, local06
01a08     01 24 06 F1 | 	add	local04, #1
01a0c     53 00 00 FF 
01a10     E0 E5 85 F1 | 	sub	objptr, ##42976
01a14     C8 FF 9F FD | 	jmp	#LR__0082
01a18                 | LR__0083
01a18                 | LR__0084
01a18                 | ' 
01a18                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01a18                 | ' 
01a18                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01a18     53 00 00 FF 
01a1c     E0 E5 05 F1 | 	add	objptr, ##42976
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     53 00 00 FF 
01a28     E0 E5 85 F1 | 	sub	objptr, ##42976
01a2c     09 2D 02 F6 | 	mov	local08, arg01
01a30     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a34                 | LR__0085
01a34     16 FB C9 FA | 	rdbyte	result1, local08 wz
01a38     01 2C 06 51 |  if_ne	add	local08, #1
01a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a40                 | LR__0086
01a40     09 2D 8A F1 | 	sub	local08, arg01 wz
01a44     3C 0D 90 AD |  if_e	jmp	#LR__0119
01a48                 | ' 
01a48                 | ' ' 2a find part types 
01a48                 | ' 
01a48                 | ' for i=0 to k-1
01a48     00 24 06 F6 | 	mov	local04, #0
01a4c     19 5D 02 F6 | 	mov	local32, local11
01a50                 | LR__0087
01a50     2E 25 52 F2 | 	cmps	local04, local32 wc
01a54     9C 05 90 3D |  if_ae	jmp	#LR__0096
01a58     12 29 02 F6 | 	mov	local06, local04
01a5c     03 28 66 F0 | 	shl	local06, #3
01a60     53 00 00 FF 
01a64     E0 E5 05 F1 | 	add	objptr, ##42976
01a68     F2 28 02 F1 | 	add	local06, objptr
01a6c     12 37 02 F6 | 	mov	local13, local04
01a70     1B 47 02 F6 | 	mov	local21, local13
01a74     23 4B 02 F6 | 	mov	local23, local21
01a78     03 4A 66 F0 | 	shl	local23, #3
01a7c     F2 48 02 F6 | 	mov	local22, objptr
01a80     F2 4A 02 F1 | 	add	local23, objptr
01a84     25 13 02 FB | 	rdlong	arg01, local23
01a88     53 00 00 FF 
01a8c     E0 E5 85 F1 | 	sub	objptr, ##42976
01a90     FC 0F B0 FD | 	call	#_isseparator
01a94     FD FA E1 F8 | 	getbyte	result1, result1, #0
01a98     04 28 06 F1 | 	add	local06, #4
01a9c     14 FB 61 FC | 	wrlong	result1, local06
01aa0                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01aa0     12 29 02 F6 | 	mov	local06, local04
01aa4     03 28 66 F0 | 	shl	local06, #3
01aa8     53 00 00 FF 
01aac     E0 E5 05 F1 | 	add	objptr, ##42976
01ab0     F2 28 02 F1 | 	add	local06, objptr
01ab4     04 28 06 F1 | 	add	local06, #4
01ab8     14 2F 02 FB | 	rdlong	local09, local06
01abc     01 2E 56 F2 | 	cmps	local09, #1 wc
01ac0     53 00 00 FF 
01ac4     E0 E5 85 F1 | 	sub	objptr, ##42976
01ac8     20 05 90 3D |  if_ae	jmp	#LR__0095
01acc     12 29 02 F6 | 	mov	local06, local04
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     53 00 00 FF 
01ad8     E0 E5 05 F1 | 	add	objptr, ##42976
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     12 37 02 F6 | 	mov	local13, local04
01ae4     1B 47 02 F6 | 	mov	local21, local13
01ae8     23 4B 02 F6 | 	mov	local23, local21
01aec     03 4A 66 F0 | 	shl	local23, #3
01af0     F2 48 02 F6 | 	mov	local22, objptr
01af4     F2 4A 02 F1 | 	add	local23, objptr
01af8     25 13 02 FB | 	rdlong	arg01, local23
01afc     53 00 00 FF 
01b00     E0 E5 85 F1 | 	sub	objptr, ##42976
01b04     A8 0C B0 FD | 	call	#_isoperator
01b08     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b0c     04 28 06 F1 | 	add	local06, #4
01b10     14 FB 61 FC | 	wrlong	result1, local06
01b14                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01b14     12 29 02 F6 | 	mov	local06, local04
01b18     03 28 66 F0 | 	shl	local06, #3
01b1c     53 00 00 FF 
01b20     E0 E5 05 F1 | 	add	objptr, ##42976
01b24     F2 28 02 F1 | 	add	local06, objptr
01b28     04 28 06 F1 | 	add	local06, #4
01b2c     14 2F 02 FB | 	rdlong	local09, local06
01b30     01 2E 56 F2 | 	cmps	local09, #1 wc
01b34     53 00 00 FF 
01b38     E0 E5 85 F1 | 	sub	objptr, ##42976
01b3c     AC 04 90 3D |  if_ae	jmp	#LR__0095
01b40     12 29 02 F6 | 	mov	local06, local04
01b44     03 28 66 F0 | 	shl	local06, #3
01b48     53 00 00 FF 
01b4c     E0 E5 05 F1 | 	add	objptr, ##42976
01b50     F2 28 02 F1 | 	add	local06, objptr
01b54     12 37 02 F6 | 	mov	local13, local04
01b58     1B 47 02 F6 | 	mov	local21, local13
01b5c     23 4B 02 F6 | 	mov	local23, local21
01b60     03 4A 66 F0 | 	shl	local23, #3
01b64     F2 48 02 F6 | 	mov	local22, objptr
01b68     F2 4A 02 F1 | 	add	local23, objptr
01b6c     25 13 02 FB | 	rdlong	arg01, local23
01b70     53 00 00 FF 
01b74     E0 E5 85 F1 | 	sub	objptr, ##42976
01b78                 | ' 
01b78                 | ' select case s
01b78     27 01 00 FF 
01b7c     BE 14 06 F6 | 	mov	arg02, ##@LR__4224
01b80     08 40 B1 FD | 	call	#__system___string_cmp
01b84     00 FA 0D F2 | 	cmp	result1, #0 wz
01b88     1B FA 05 A6 |  if_e	mov	result1, #27
01b8c     00 FA 05 56 |  if_ne	mov	result1, #0
01b90     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b94     04 28 06 F1 | 	add	local06, #4
01b98     14 FB 61 FC | 	wrlong	result1, local06
01b9c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01b9c     12 29 02 F6 | 	mov	local06, local04
01ba0     03 28 66 F0 | 	shl	local06, #3
01ba4     53 00 00 FF 
01ba8     E0 E5 05 F1 | 	add	objptr, ##42976
01bac     F2 28 02 F1 | 	add	local06, objptr
01bb0     04 28 06 F1 | 	add	local06, #4
01bb4     14 2F 02 FB | 	rdlong	local09, local06
01bb8     01 2E 56 F2 | 	cmps	local09, #1 wc
01bbc     53 00 00 FF 
01bc0     E0 E5 85 F1 | 	sub	objptr, ##42976
01bc4     24 04 90 3D |  if_ae	jmp	#LR__0095
01bc8     12 29 02 F6 | 	mov	local06, local04
01bcc     03 28 66 F0 | 	shl	local06, #3
01bd0     53 00 00 FF 
01bd4     E0 E5 05 F1 | 	add	objptr, ##42976
01bd8     F2 28 02 F1 | 	add	local06, objptr
01bdc     12 37 02 F6 | 	mov	local13, local04
01be0     1B 47 02 F6 | 	mov	local21, local13
01be4     23 4B 02 F6 | 	mov	local23, local21
01be8     03 4A 66 F0 | 	shl	local23, #3
01bec     F2 48 02 F6 | 	mov	local22, objptr
01bf0     F2 4A 02 F1 | 	add	local23, objptr
01bf4     25 13 02 FB | 	rdlong	arg01, local23
01bf8     53 00 00 FF 
01bfc     E0 E5 85 F1 | 	sub	objptr, ##42976
01c00     8C 10 B0 FD | 	call	#_iscommand
01c04     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c08     04 28 06 F1 | 	add	local06, #4
01c0c     14 FB 61 FC | 	wrlong	result1, local06
01c10                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01c10     12 29 02 F6 | 	mov	local06, local04
01c14     03 28 66 F0 | 	shl	local06, #3
01c18     53 00 00 FF 
01c1c     E0 E5 05 F1 | 	add	objptr, ##42976
01c20     F2 28 02 F1 | 	add	local06, objptr
01c24     04 28 06 F1 | 	add	local06, #4
01c28     14 2F 02 FB | 	rdlong	local09, local06
01c2c     01 2E 56 F2 | 	cmps	local09, #1 wc
01c30     53 00 00 FF 
01c34     E0 E5 85 F1 | 	sub	objptr, ##42976
01c38     B0 03 90 3D |  if_ae	jmp	#LR__0095
01c3c     12 29 02 F6 | 	mov	local06, local04
01c40     03 28 66 F0 | 	shl	local06, #3
01c44     53 00 00 FF 
01c48     E0 E5 05 F1 | 	add	objptr, ##42976
01c4c     F2 28 02 F1 | 	add	local06, objptr
01c50     12 37 02 F6 | 	mov	local13, local04
01c54     1B 47 02 F6 | 	mov	local21, local13
01c58     23 4B 02 F6 | 	mov	local23, local21
01c5c     03 4A 66 F0 | 	shl	local23, #3
01c60     F2 48 02 F6 | 	mov	local22, objptr
01c64     F2 4A 02 F1 | 	add	local23, objptr
01c68     25 13 02 FB | 	rdlong	arg01, local23
01c6c     53 00 00 FF 
01c70     E0 E5 85 F1 | 	sub	objptr, ##42976
01c74     98 15 B0 FD | 	call	#_isfunction
01c78     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c7c     04 28 06 F1 | 	add	local06, #4
01c80     14 FB 61 FC | 	wrlong	result1, local06
01c84                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01c84     12 29 02 F6 | 	mov	local06, local04
01c88     03 28 66 F0 | 	shl	local06, #3
01c8c     53 00 00 FF 
01c90     E0 E5 05 F1 | 	add	objptr, ##42976
01c94     F2 28 02 F1 | 	add	local06, objptr
01c98     04 28 06 F1 | 	add	local06, #4
01c9c     14 2F 02 FB | 	rdlong	local09, local06
01ca0     01 2E 56 F2 | 	cmps	local09, #1 wc
01ca4     53 00 00 FF 
01ca8     E0 E5 85 F1 | 	sub	objptr, ##42976
01cac     3C 03 90 3D |  if_ae	jmp	#LR__0095
01cb0     12 3D 02 F6 | 	mov	local16, local04
01cb4     03 3C 66 F0 | 	shl	local16, #3
01cb8     53 00 00 FF 
01cbc     E0 E5 05 F1 | 	add	objptr, ##42976
01cc0     F2 3C 02 F1 | 	add	local16, objptr
01cc4     1E 13 02 FB | 	rdlong	arg01, local16
01cc8     53 00 00 FF 
01ccc     E0 E5 85 F1 | 	sub	objptr, ##42976
01cd0     10 19 B0 FD | 	call	#_isnum
01cd4     FD 1E 02 F6 | 	mov	local01, result1
01cd8     7A 00 00 FF 
01cdc     9C E4 05 F1 | 	add	objptr, ##62620
01ce0     F2 1E 62 FC | 	wrlong	local01, objptr
01ce4     12 3D 02 F6 | 	mov	local16, local04
01ce8     03 3C 66 F0 | 	shl	local16, #3
01cec     26 00 00 FF 
01cf0     BC E4 85 F1 | 	sub	objptr, ##19644
01cf4     F2 3C 02 F1 | 	add	local16, objptr
01cf8     1E 13 02 FB | 	rdlong	arg01, local16
01cfc     53 00 00 FF 
01d00     E0 E5 85 F1 | 	sub	objptr, ##42976
01d04     B4 1B B0 FD | 	call	#_isint
01d08     FD 1E 02 F6 | 	mov	local01, result1
01d0c     7A 00 00 FF 
01d10     A0 E4 05 F1 | 	add	objptr, ##62624
01d14     F2 1E 62 FC | 	wrlong	local01, objptr
01d18     12 3D 02 F6 | 	mov	local16, local04
01d1c     03 3C 66 F0 | 	shl	local16, #3
01d20     26 00 00 FF 
01d24     C0 E4 85 F1 | 	sub	objptr, ##19648
01d28     F2 2A 02 F6 | 	mov	local07, objptr
01d2c     F2 3C 02 F1 | 	add	local16, objptr
01d30     1E 13 02 FB | 	rdlong	arg01, local16
01d34     53 00 00 FF 
01d38     E0 E5 85 F1 | 	sub	objptr, ##42976
01d3c     D4 1C B0 FD | 	call	#_isdec
01d40     7A 00 00 FF 
01d44     A4 E4 05 F1 | 	add	objptr, ##62628
01d48     F2 FA 61 FC | 	wrlong	result1, objptr
01d4c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01d4c     08 E4 85 F1 | 	sub	objptr, #8
01d50     F2 1E 0A FB | 	rdlong	local01, objptr wz
01d54     7A 00 00 FF 
01d58     9C E4 85 F1 | 	sub	objptr, ##62620
01d5c     60 00 90 AD |  if_e	jmp	#LR__0088
01d60     7A 00 00 FF 
01d64     A0 E4 05 F1 | 	add	objptr, ##62624
01d68     F2 28 0A FB | 	rdlong	local06, objptr wz
01d6c     7A 00 00 FF 
01d70     A0 E4 85 F1 | 	sub	objptr, ##62624
01d74     48 00 90 AD |  if_e	jmp	#LR__0088
01d78     7A 00 00 FF 
01d7c     A4 E4 05 F1 | 	add	objptr, ##62628
01d80     F2 2E 0A FB | 	rdlong	local09, objptr wz
01d84     7A 00 00 FF 
01d88     A4 E4 85 F1 | 	sub	objptr, ##62628
01d8c     30 00 90 AD |  if_e	jmp	#LR__0088
01d90     12 27 02 F6 | 	mov	local05, local04
01d94     13 29 02 F6 | 	mov	local06, local05
01d98     03 28 66 F0 | 	shl	local06, #3
01d9c     53 00 00 FF 
01da0     E0 E5 05 F1 | 	add	objptr, ##42976
01da4     F2 28 02 F1 | 	add	local06, objptr
01da8     04 28 06 F1 | 	add	local06, #4
01dac     01 00 80 FF 
01db0     14 01 68 FC | 	wrlong	##512, local06
01db4     53 00 00 FF 
01db8     E0 E5 85 F1 | 	sub	objptr, ##42976
01dbc     2C 02 90 FD | 	jmp	#LR__0095
01dc0                 | LR__0088
01dc0                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01dc0     7A 00 00 FF 
01dc4     9C E4 05 F1 | 	add	objptr, ##62620
01dc8     F2 1E 0A FB | 	rdlong	local01, objptr wz
01dcc     7A 00 00 FF 
01dd0     9C E4 85 F1 | 	sub	objptr, ##62620
01dd4     64 00 90 AD |  if_e	jmp	#LR__0089
01dd8     7A 00 00 FF 
01ddc     A0 E4 05 F1 | 	add	objptr, ##62624
01de0     F2 28 0A FB | 	rdlong	local06, objptr wz
01de4     7A 00 00 FF 
01de8     A0 E4 85 F1 | 	sub	objptr, ##62624
01dec     7A 00 00 5F 
01df0     A4 E4 05 51 |  if_ne	add	objptr, ##62628
01df4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01df8     7A 00 00 5F 
01dfc     A4 E4 85 51 |  if_ne	sub	objptr, ##62628
01e00     17 2B 22 56 |  if_ne	not	local07, local09
01e04     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e08     30 00 90 AD |  if_e	jmp	#LR__0089
01e0c     12 27 02 F6 | 	mov	local05, local04
01e10     13 29 02 F6 | 	mov	local06, local05
01e14     03 28 66 F0 | 	shl	local06, #3
01e18     53 00 00 FF 
01e1c     E0 E5 05 F1 | 	add	objptr, ##42976
01e20     F2 28 02 F1 | 	add	local06, objptr
01e24     04 28 06 F1 | 	add	local06, #4
01e28     01 00 80 FF 
01e2c     14 03 68 FC | 	wrlong	##513, local06
01e30     53 00 00 FF 
01e34     E0 E5 85 F1 | 	sub	objptr, ##42976
01e38     B0 01 90 FD | 	jmp	#LR__0095
01e3c                 | LR__0089
01e3c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01e3c     7A 00 00 FF 
01e40     9C E4 05 F1 | 	add	objptr, ##62620
01e44     F2 1E 0A FB | 	rdlong	local01, objptr wz
01e48     7A 00 00 FF 
01e4c     9C E4 85 F1 | 	sub	objptr, ##62620
01e50     7A 00 00 5F 
01e54     A0 E4 05 51 |  if_ne	add	objptr, ##62624
01e58     F2 28 02 5B |  if_ne	rdlong	local06, objptr
01e5c     7A 00 00 5F 
01e60     A0 E4 85 51 |  if_ne	sub	objptr, ##62624
01e64     14 29 22 56 |  if_ne	not	local06, local06
01e68     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
01e6c     7A 00 00 5F 
01e70     A4 E4 05 51 |  if_ne	add	objptr, ##62628
01e74     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01e78     7A 00 00 5F 
01e7c     A4 E4 85 51 |  if_ne	sub	objptr, ##62628
01e80     17 2B 22 56 |  if_ne	not	local07, local09
01e84     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e88     30 00 90 AD |  if_e	jmp	#LR__0090
01e8c     12 27 02 F6 | 	mov	local05, local04
01e90     13 29 02 F6 | 	mov	local06, local05
01e94     03 28 66 F0 | 	shl	local06, #3
01e98     53 00 00 FF 
01e9c     E0 E5 05 F1 | 	add	objptr, ##42976
01ea0     F2 28 02 F1 | 	add	local06, objptr
01ea4     04 28 06 F1 | 	add	local06, #4
01ea8     01 00 80 FF 
01eac     14 05 68 FC | 	wrlong	##514, local06
01eb0     53 00 00 FF 
01eb4     E0 E5 85 F1 | 	sub	objptr, ##42976
01eb8     30 01 90 FD | 	jmp	#LR__0095
01ebc                 | LR__0090
01ebc                 | ' 
01ebc                 | ' if isstring(lparts(i).part$) then 
01ebc     12 3D 02 F6 | 	mov	local16, local04
01ec0     03 3C 66 F0 | 	shl	local16, #3
01ec4     53 00 00 FF 
01ec8     E0 E5 05 F1 | 	add	objptr, ##42976
01ecc     F2 3C 02 F1 | 	add	local16, objptr
01ed0     1E 13 02 FB | 	rdlong	arg01, local16
01ed4     53 00 00 FF 
01ed8     E0 E5 85 F1 | 	sub	objptr, ##42976
01edc     F4 1B B0 FD | 	call	#_isstring
01ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ee4     A8 00 90 AD |  if_e	jmp	#LR__0093
01ee8     12 29 02 F6 | 	mov	local06, local04
01eec     03 28 66 F0 | 	shl	local06, #3
01ef0     53 00 00 FF 
01ef4     E0 E5 05 F1 | 	add	objptr, ##42976
01ef8     F2 28 02 F1 | 	add	local06, objptr
01efc     04 28 06 F1 | 	add	local06, #4
01f00     01 00 80 FF 
01f04     14 07 68 FC | 	wrlong	##515, local06
01f08     12 27 02 F6 | 	mov	local05, local04
01f0c     13 29 02 F6 | 	mov	local06, local05
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     12 47 02 F6 | 	mov	local21, local04
01f1c     03 46 66 F0 | 	shl	local21, #3
01f20     F2 46 02 F1 | 	add	local21, objptr
01f24     23 2B 02 FB | 	rdlong	local07, local21
01f28     02 2E 06 F6 | 	mov	local09, #2
01f2c     12 49 02 F6 | 	mov	local22, local04
01f30     24 3F 02 F6 | 	mov	local17, local22
01f34     1F 41 02 F6 | 	mov	local18, local17
01f38     03 40 66 F0 | 	shl	local18, #3
01f3c     F2 42 02 F6 | 	mov	local19, objptr
01f40     F2 40 02 F1 | 	add	local18, objptr
01f44     20 13 02 FB | 	rdlong	arg01, local18
01f48     53 00 00 FF 
01f4c     E0 E5 85 F1 | 	sub	objptr, ##42976
01f50     09 2D 02 F6 | 	mov	local08, arg01
01f54     97 06 48 FB | 	callpa	#(@LR__0092-@LR__0091)>>2,fcache_load_ptr_
01f58                 | LR__0091
01f58     16 FB C9 FA | 	rdbyte	result1, local08 wz
01f5c     01 2C 06 51 |  if_ne	add	local08, #1
01f60     F4 FF 9F 5D |  if_ne	jmp	#LR__0091
01f64                 | LR__0092
01f64     09 2D 82 F1 | 	sub	local08, arg01
01f68     16 4B 02 F6 | 	mov	local23, local08
01f6c     25 47 02 F6 | 	mov	local21, local23
01f70     02 46 86 F1 | 	sub	local21, #2
01f74     23 37 02 F6 | 	mov	local13, local21
01f78     15 13 02 F6 | 	mov	arg01, local07
01f7c     17 15 02 F6 | 	mov	arg02, local09
01f80     1B 17 02 F6 | 	mov	arg03, local13
01f84     04 5D B1 FD | 	call	#__system__Mid_S
01f88     14 FB 61 FC | 	wrlong	result1, local06
01f8c     5C 00 90 FD | 	jmp	#LR__0095
01f90                 | LR__0093
01f90                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
01f90     12 27 02 F6 | 	mov	local05, local04
01f94     13 3D 02 F6 | 	mov	local16, local05
01f98     03 3C 66 F0 | 	shl	local16, #3
01f9c     53 00 00 FF 
01fa0     E0 E5 05 F1 | 	add	objptr, ##42976
01fa4     F2 3C 02 F1 | 	add	local16, objptr
01fa8     1E 13 02 FB | 	rdlong	arg01, local16
01fac     53 00 00 FF 
01fb0     E0 E5 85 F1 | 	sub	objptr, ##42976
01fb4     B8 13 B0 FD | 	call	#_isname
01fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
01fbc     2C 00 90 AD |  if_e	jmp	#LR__0094
01fc0     12 27 02 F6 | 	mov	local05, local04
01fc4     13 29 02 F6 | 	mov	local06, local05
01fc8     03 28 66 F0 | 	shl	local06, #3
01fcc     53 00 00 FF 
01fd0     E0 E5 05 F1 | 	add	objptr, ##42976
01fd4     F2 28 02 F1 | 	add	local06, objptr
01fd8     04 28 06 F1 | 	add	local06, #4
01fdc     01 00 80 FF 
01fe0     14 09 68 FC | 	wrlong	##516, local06
01fe4     53 00 00 FF 
01fe8     E0 E5 85 F1 | 	sub	objptr, ##42976
01fec                 | LR__0094
01fec                 | LR__0095
01fec     01 24 06 F1 | 	add	local04, #1
01ff0     5C FA 9F FD | 	jmp	#LR__0087
01ff4                 | LR__0096
01ff4     19 29 02 F6 | 	mov	local06, local11
01ff8     03 28 66 F0 | 	shl	local06, #3
01ffc     53 00 00 FF 
02000     E0 E5 05 F1 | 	add	objptr, ##42976
02004     F2 28 02 F1 | 	add	local06, objptr
02008     04 28 06 F1 | 	add	local06, #4
0200c     14 FD 6B FC | 	wrlong	#510, local06
02010     19 29 02 F6 | 	mov	local06, local11
02014     03 28 66 F0 | 	shl	local06, #3
02018     F2 28 02 F1 | 	add	local06, objptr
0201c     26 01 00 FF 
02020     F7 2B 06 F6 | 	mov	local07, ##@LR__4168
02024     14 2B 62 FC | 	wrlong	local07, local06
02028     10 00 00 FF 
0202c     54 E4 05 F1 | 	add	objptr, ##8276
02030     F2 32 62 FC | 	wrlong	local11, objptr
02034                 | ' 
02034                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02034                 | ' 
02034                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02034                 | ' 
02034                 | ' ' process the case when simple load or save is called without ""
02034                 | ' 
02034                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
02034     10 00 00 FF 
02038     54 E4 85 F1 | 	sub	objptr, ##8276
0203c     F2 12 02 FB | 	rdlong	arg01, objptr
02040     53 00 00 FF 
02044     E0 E5 85 F1 | 	sub	objptr, ##42976
02048     26 01 00 FF 
0204c     F8 15 06 F6 | 	mov	arg02, ##@LR__4169
02050     38 3B B1 FD | 	call	#__system___string_cmp
02054     00 FA 0D F2 | 	cmp	result1, #0 wz
02058     50 00 90 AD |  if_e	jmp	#LR__0097
0205c     53 00 00 FF 
02060     E0 E5 05 F1 | 	add	objptr, ##42976
02064     F2 12 02 FB | 	rdlong	arg01, objptr
02068     53 00 00 FF 
0206c     E0 E5 85 F1 | 	sub	objptr, ##42976
02070     26 01 00 FF 
02074     FD 15 06 F6 | 	mov	arg02, ##@LR__4170
02078     10 3B B1 FD | 	call	#__system___string_cmp
0207c     00 FA 0D F2 | 	cmp	result1, #0 wz
02080     28 00 90 AD |  if_e	jmp	#LR__0097
02084     53 00 00 FF 
02088     E0 E5 05 F1 | 	add	objptr, ##42976
0208c     F2 12 02 FB | 	rdlong	arg01, objptr
02090     53 00 00 FF 
02094     E0 E5 85 F1 | 	sub	objptr, ##42976
02098     27 01 00 FF 
0209c     02 14 06 F6 | 	mov	arg02, ##@LR__4171
020a0     E8 3A B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     50 00 90 5D |  if_ne	jmp	#LR__0098
020ac                 | LR__0097
020ac     53 00 00 FF 
020b0     EC E5 05 F1 | 	add	objptr, ##42988
020b4     F2 3C 02 FB | 	rdlong	local16, objptr
020b8     53 00 00 FF 
020bc     EC E5 85 F1 | 	sub	objptr, ##42988
020c0     01 00 00 FF 
020c4     04 3C 0E F2 | 	cmp	local16, ##516 wz
020c8     53 00 00 AF 
020cc     F4 E5 05 A1 |  if_e	add	objptr, ##42996
020d0     F2 36 02 AB |  if_e	rdlong	local13, objptr
020d4     53 00 00 AF 
020d8     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
020dc     1B 2F 02 A6 |  if_e	mov	local09, local13
020e0     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
020e4     53 00 00 AF 
020e8     EC E5 05 A1 |  if_e	add	objptr, ##42988
020ec     01 00 80 AF 
020f0     F2 06 68 AC |  if_e	wrlong	##515, objptr
020f4     53 00 00 AF 
020f8     EC E5 85 A1 |  if_e	sub	objptr, ##42988
020fc                 | LR__0098
020fc                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
020fc     53 00 00 FF 
02100     E0 E5 05 F1 | 	add	objptr, ##42976
02104     F2 12 02 FB | 	rdlong	arg01, objptr
02108     53 00 00 FF 
0210c     E0 E5 85 F1 | 	sub	objptr, ##42976
02110     27 01 00 FF 
02114     07 28 06 F6 | 	mov	local06, ##@LR__4172
02118     14 15 02 F6 | 	mov	arg02, local06
0211c     6C 3A B1 FD | 	call	#__system___string_cmp
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     5C 00 90 AD |  if_e	jmp	#LR__0099
02128     53 00 00 FF 
0212c     E0 E5 05 F1 | 	add	objptr, ##42976
02130     F2 12 02 FB | 	rdlong	arg01, objptr
02134     53 00 00 FF 
02138     E0 E5 85 F1 | 	sub	objptr, ##42976
0213c     27 01 00 FF 
02140     0D 28 06 F6 | 	mov	local06, ##@LR__4173
02144     14 15 02 F6 | 	mov	arg02, local06
02148     40 3A B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     30 00 90 AD |  if_e	jmp	#LR__0099
02154     53 00 00 FF 
02158     E0 E5 05 F1 | 	add	objptr, ##42976
0215c     F2 12 02 FB | 	rdlong	arg01, objptr
02160     53 00 00 FF 
02164     E0 E5 85 F1 | 	sub	objptr, ##42976
02168     27 01 00 FF 
0216c     14 2A 06 F6 | 	mov	local07, ##@LR__4174
02170     15 3D 02 F6 | 	mov	local16, local07
02174     1E 15 02 F6 | 	mov	arg02, local16
02178     10 3A B1 FD | 	call	#__system___string_cmp
0217c     FD 28 0A F6 | 	mov	local06, result1 wz
02180     E4 00 90 5D |  if_ne	jmp	#LR__0102
02184                 | LR__0099
02184     53 00 00 FF 
02188     EC E5 05 F1 | 	add	objptr, ##42988
0218c     F2 2A 02 FB | 	rdlong	local07, objptr
02190     53 00 00 FF 
02194     EC E5 85 F1 | 	sub	objptr, ##42988
02198     15 3D 02 F6 | 	mov	local16, local07
0219c     01 00 00 FF 
021a0     04 3C 0E F2 | 	cmp	local16, ##516 wz
021a4     53 00 00 AF 
021a8     F4 E5 05 A1 |  if_e	add	objptr, ##42996
021ac     F2 36 02 AB |  if_e	rdlong	local13, objptr
021b0     53 00 00 AF 
021b4     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
021b8     1B 2F 02 A6 |  if_e	mov	local09, local13
021bc     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
021c0     A4 00 90 5D |  if_ne	jmp	#LR__0102
021c4                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
021c4     53 00 00 FF 
021c8     E8 E5 05 F1 | 	add	objptr, ##42984
021cc     F2 12 02 FB | 	rdlong	arg01, objptr
021d0     53 00 00 FF 
021d4     E8 E5 85 F1 | 	sub	objptr, ##42984
021d8     27 01 00 FF 
021dc     1A 14 06 F6 | 	mov	arg02, ##@LR__4175
021e0     A8 39 B1 FD | 	call	#__system___string_cmp
021e4     00 FA 0D F2 | 	cmp	result1, #0 wz
021e8     28 00 90 5D |  if_ne	jmp	#LR__0100
021ec     27 01 00 FF 
021f0     1D 1E 06 F6 | 	mov	local01, ##@LR__4176
021f4     53 00 00 FF 
021f8     E8 E5 05 F1 | 	add	objptr, ##42984
021fc     F2 1E 62 FC | 	wrlong	local01, objptr
02200     04 E4 05 F1 | 	add	objptr, #4
02204     01 00 80 FF 
02208     F2 00 68 FC | 	wrlong	##512, objptr
0220c     53 00 00 FF 
02210     EC E5 85 F1 | 	sub	objptr, ##42988
02214                 | LR__0100
02214                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02214     53 00 00 FF 
02218     E8 E5 05 F1 | 	add	objptr, ##42984
0221c     F2 12 02 FB | 	rdlong	arg01, objptr
02220     53 00 00 FF 
02224     E8 E5 85 F1 | 	sub	objptr, ##42984
02228     27 01 00 FF 
0222c     1F 28 06 F6 | 	mov	local06, ##@LR__4177
02230     14 15 02 F6 | 	mov	arg02, local06
02234     54 39 B1 FD | 	call	#__system___string_cmp
02238     00 FA 0D F2 | 	cmp	result1, #0 wz
0223c     28 00 90 5D |  if_ne	jmp	#LR__0101
02240     27 01 00 FF 
02244     23 1E 06 F6 | 	mov	local01, ##@LR__4178
02248     53 00 00 FF 
0224c     E8 E5 05 F1 | 	add	objptr, ##42984
02250     F2 1E 62 FC | 	wrlong	local01, objptr
02254     04 E4 05 F1 | 	add	objptr, #4
02258     01 00 80 FF 
0225c     F2 00 68 FC | 	wrlong	##512, objptr
02260     53 00 00 FF 
02264     EC E5 85 F1 | 	sub	objptr, ##42988
02268                 | LR__0101
02268                 | LR__0102
02268                 | ' 
02268                 | ' '2b determine a type of the line
02268                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02268     53 00 00 FF 
0226c     E0 E5 05 F1 | 	add	objptr, ##42976
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     53 00 00 FF 
02278     E0 E5 85 F1 | 	sub	objptr, ##42976
0227c     94 17 B0 FD | 	call	#_isdec
02280     00 FA 0D F2 | 	cmp	result1, #0 wz
02284     20 00 90 AD |  if_e	jmp	#LR__0103
02288     53 00 00 FF 
0228c     E0 E5 05 F1 | 	add	objptr, ##42976
02290     F2 12 02 FB | 	rdlong	arg01, objptr
02294     53 00 00 FF 
02298     E0 E5 85 F1 | 	sub	objptr, ##42976
0229c     00 14 06 F6 | 	mov	arg02, #0
022a0     4C 69 B1 FD | 	call	#__system____builtin_atoi
022a4     FD 20 02 F6 | 	mov	local02, result1
022a8                 | LR__0103
022a8                 | ' 
022a8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
022a8     01 20 16 F2 | 	cmp	local02, #1 wc
022ac     2C 00 90 CD |  if_b	jmp	#LR__0104
022b0     01 32 0E F2 | 	cmp	local11, #1 wz
022b4     55 00 00 AF 
022b8     F8 E5 05 A1 |  if_e	add	objptr, ##44024
022bc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
022c0     55 00 00 AF 
022c4     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
022c8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
022cc     0C 00 90 5D |  if_ne	jmp	#LR__0104
022d0     10 13 02 F6 | 	mov	arg01, local02
022d4     60 18 B0 FD | 	call	#_deleteline
022d8     C8 04 90 FD | 	jmp	#LR__0120
022dc                 | LR__0104
022dc                 | ' 
022dc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
022dc     01 20 16 F2 | 	cmp	local02, #1 wc
022e0     E0 00 90 CD |  if_b	jmp	#LR__0107
022e4     55 00 00 FF 
022e8     F8 E5 05 F1 | 	add	objptr, ##44024
022ec     F2 1E 0A FB | 	rdlong	local01, objptr wz
022f0     55 00 00 FF 
022f4     F8 E5 85 F1 | 	sub	objptr, ##44024
022f8     20 00 90 AD |  if_e	jmp	#LR__0105
022fc     55 00 00 FF 
02300     F8 E5 05 F1 | 	add	objptr, ##44024
02304     F2 3C 02 FB | 	rdlong	local16, objptr
02308     55 00 00 FF 
0230c     F8 E5 85 F1 | 	sub	objptr, ##44024
02310     1E 29 02 F6 | 	mov	local06, local16
02314     03 28 0E F2 | 	cmp	local06, #3 wz
02318     A8 00 90 5D |  if_ne	jmp	#LR__0107
0231c                 | LR__0105
0231c     53 00 00 FF 
02320     F4 E5 05 F1 | 	add	objptr, ##42996
02324     F2 2E 02 FB | 	rdlong	local09, objptr
02328     53 00 00 FF 
0232c     F4 E5 85 F1 | 	sub	objptr, ##42996
02330     17 2B 02 F6 | 	mov	local07, local09
02334     1B 2A 0E F2 | 	cmp	local07, #27 wz
02338     88 00 90 AD |  if_e	jmp	#LR__0107
0233c     55 00 00 FF 
02340     F8 E5 05 F1 | 	add	objptr, ##44024
02344     F2 16 02 FB | 	rdlong	arg03, objptr
02348     55 00 00 FF 
0234c     F8 E5 85 F1 | 	sub	objptr, ##44024
02350     10 13 02 F6 | 	mov	arg01, local02
02354     00 14 06 F6 | 	mov	arg02, #0
02358     8C 2B B0 FD | 	call	#_compile
0235c     FD 22 0A F6 | 	mov	local03, result1 wz
02360                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02360                 | '   if err<>0 then printerror(err): goto 104
02360     0C 00 90 AD |  if_e	jmp	#LR__0106
02364     11 13 02 F6 | 	mov	arg01, local03
02368     94 02 B1 FD | 	call	#_printerror
0236c     34 04 90 FD | 	jmp	#LR__0120
02370                 | LR__0106
02370                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02370     7A 00 00 FF 
02374     78 E4 05 F1 | 	add	objptr, ##62584
02378     F2 12 02 FB | 	rdlong	arg01, objptr
0237c     7A 00 00 FF 
02380     78 E4 85 F1 | 	sub	objptr, ##62584
02384     27 01 00 FF 
02388     25 14 06 F6 | 	mov	arg02, ##@LR__4179
0238c     FC 37 B1 FD | 	call	#__system___string_cmp
02390     00 FA 0D F2 | 	cmp	result1, #0 wz
02394     0C 04 90 AD |  if_e	jmp	#LR__0120
02398     7A 00 00 FF 
0239c     78 E4 05 F1 | 	add	objptr, ##62584
023a0     F2 1E 02 FB | 	rdlong	local01, objptr
023a4     24 00 00 FF 
023a8     88 E4 85 F1 | 	sub	objptr, ##18568
023ac     F2 1E 62 FC | 	wrlong	local01, objptr
023b0     08 E4 05 F1 | 	add	objptr, #8
023b4     F2 08 68 FC | 	wrlong	#4, objptr
023b8     55 00 00 FF 
023bc     F8 E5 85 F1 | 	sub	objptr, ##44024
023c0     A4 E6 9F FD | 	jmp	#LR__0020
023c4                 | LR__0107
023c4                 | '       							
023c4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
023c4     01 20 16 F2 | 	cmp	local02, #1 wc
023c8     E4 00 90 CD |  if_b	jmp	#LR__0110
023cc     55 00 00 FF 
023d0     F8 E5 05 F1 | 	add	objptr, ##44024
023d4     F2 1E 02 FB | 	rdlong	local01, objptr
023d8     55 00 00 FF 
023dc     F8 E5 85 F1 | 	sub	objptr, ##44024
023e0     01 1E 0E F2 | 	cmp	local01, #1 wz
023e4     20 00 90 AD |  if_e	jmp	#LR__0108
023e8     55 00 00 FF 
023ec     F8 E5 05 F1 | 	add	objptr, ##44024
023f0     F2 3C 02 FB | 	rdlong	local16, objptr
023f4     55 00 00 FF 
023f8     F8 E5 85 F1 | 	sub	objptr, ##44024
023fc     1E 29 02 F6 | 	mov	local06, local16
02400     02 28 0E F2 | 	cmp	local06, #2 wz
02404     A8 00 90 5D |  if_ne	jmp	#LR__0110
02408                 | LR__0108
02408     53 00 00 FF 
0240c     EC E5 05 F1 | 	add	objptr, ##42988
02410     F2 2E 02 FB | 	rdlong	local09, objptr
02414     53 00 00 FF 
02418     EC E5 85 F1 | 	sub	objptr, ##42988
0241c     17 2B 02 F6 | 	mov	local07, local09
02420     1B 2A 0E F2 | 	cmp	local07, #27 wz
02424     88 00 90 AD |  if_e	jmp	#LR__0110
02428     55 00 00 FF 
0242c     F8 E5 05 F1 | 	add	objptr, ##44024
02430     F2 16 02 FB | 	rdlong	arg03, objptr
02434     55 00 00 FF 
02438     F8 E5 85 F1 | 	sub	objptr, ##44024
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     00 14 06 F6 | 	mov	arg02, #0
02444     A0 2A B0 FD | 	call	#_compile
02448     FD 22 0A F6 | 	mov	local03, result1 wz
0244c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
0244c                 | '   if err<>0 then printerror(err): goto 104
0244c     0C 00 90 AD |  if_e	jmp	#LR__0109
02450     11 13 02 F6 | 	mov	arg01, local03
02454     A8 01 B1 FD | 	call	#_printerror
02458     48 03 90 FD | 	jmp	#LR__0120
0245c                 | LR__0109
0245c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
0245c     7A 00 00 FF 
02460     78 E4 05 F1 | 	add	objptr, ##62584
02464     F2 12 02 FB | 	rdlong	arg01, objptr
02468     7A 00 00 FF 
0246c     78 E4 85 F1 | 	sub	objptr, ##62584
02470     27 01 00 FF 
02474     26 14 06 F6 | 	mov	arg02, ##@LR__4180
02478     10 37 B1 FD | 	call	#__system___string_cmp
0247c     00 FA 0D F2 | 	cmp	result1, #0 wz
02480     20 03 90 AD |  if_e	jmp	#LR__0120
02484     7A 00 00 FF 
02488     78 E4 05 F1 | 	add	objptr, ##62584
0248c     F2 1E 02 FB | 	rdlong	local01, objptr
02490     24 00 00 FF 
02494     88 E4 85 F1 | 	sub	objptr, ##18568
02498     F2 1E 62 FC | 	wrlong	local01, objptr
0249c     08 E4 05 F1 | 	add	objptr, #8
024a0     F2 08 68 FC | 	wrlong	#4, objptr
024a4     55 00 00 FF 
024a8     F8 E5 85 F1 | 	sub	objptr, ##44024
024ac     B8 E5 9F FD | 	jmp	#LR__0020
024b0                 | LR__0110
024b0                 | ' 							 
024b0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
024b0     01 20 16 F2 | 	cmp	local02, #1 wc
024b4     C0 00 90 CD |  if_b	jmp	#LR__0111
024b8     55 00 00 FF 
024bc     F8 E5 05 F1 | 	add	objptr, ##44024
024c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
024c4     55 00 00 FF 
024c8     F8 E5 85 F1 | 	sub	objptr, ##44024
024cc     55 00 00 5F 
024d0     F8 E5 05 51 |  if_ne	add	objptr, ##44024
024d4     F2 3C 02 5B |  if_ne	rdlong	local16, objptr
024d8     55 00 00 5F 
024dc     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
024e0     03 3C 0E 52 |  if_ne	cmp	local16, #3 wz
024e4     53 00 00 AF 
024e8     F4 E5 05 A1 |  if_e	add	objptr, ##42996
024ec     F2 2E 02 AB |  if_e	rdlong	local09, objptr
024f0     53 00 00 AF 
024f4     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
024f8     17 2B 02 A6 |  if_e	mov	local07, local09
024fc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02500     74 00 90 5D |  if_ne	jmp	#LR__0111
02504     55 00 00 FF 
02508     F8 E5 05 F1 | 	add	objptr, ##44024
0250c     F2 16 02 FB | 	rdlong	arg03, objptr
02510     55 00 00 FF 
02514     F8 E5 85 F1 | 	sub	objptr, ##44024
02518     10 13 02 F6 | 	mov	arg01, local02
0251c     00 14 06 F6 | 	mov	arg02, #0
02520     94 2A B0 FD | 	call	#_compile_assign
02524                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02524                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02524     7A 00 00 FF 
02528     78 E4 05 F1 | 	add	objptr, ##62584
0252c     F2 12 02 FB | 	rdlong	arg01, objptr
02530     7A 00 00 FF 
02534     78 E4 85 F1 | 	sub	objptr, ##62584
02538     27 01 00 FF 
0253c     27 14 06 F6 | 	mov	arg02, ##@LR__4181
02540     48 36 B1 FD | 	call	#__system___string_cmp
02544     00 FA 0D F2 | 	cmp	result1, #0 wz
02548     58 02 90 AD |  if_e	jmp	#LR__0120
0254c     7A 00 00 FF 
02550     78 E4 05 F1 | 	add	objptr, ##62584
02554     F2 1E 02 FB | 	rdlong	local01, objptr
02558     24 00 00 FF 
0255c     88 E4 85 F1 | 	sub	objptr, ##18568
02560     F2 1E 62 FC | 	wrlong	local01, objptr
02564     08 E4 05 F1 | 	add	objptr, #8
02568     F2 08 68 FC | 	wrlong	#4, objptr
0256c     55 00 00 FF 
02570     F8 E5 85 F1 | 	sub	objptr, ##44024
02574     F0 E4 9F FD | 	jmp	#LR__0020
02578                 | LR__0111
02578                 | '     							 
02578                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02578     01 20 16 F2 | 	cmp	local02, #1 wc
0257c     C0 00 90 CD |  if_b	jmp	#LR__0112
02580     55 00 00 FF 
02584     F8 E5 05 F1 | 	add	objptr, ##44024
02588     F2 1E 02 FB | 	rdlong	local01, objptr
0258c     55 00 00 FF 
02590     F8 E5 85 F1 | 	sub	objptr, ##44024
02594     01 1E 0E F2 | 	cmp	local01, #1 wz
02598     55 00 00 5F 
0259c     F8 E5 05 51 |  if_ne	add	objptr, ##44024
025a0     F2 28 02 5B |  if_ne	rdlong	local06, objptr
025a4     55 00 00 5F 
025a8     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
025ac     02 28 0E 52 |  if_ne	cmp	local06, #2 wz
025b0     53 00 00 AF 
025b4     EC E5 05 A1 |  if_e	add	objptr, ##42988
025b8     F2 2E 02 AB |  if_e	rdlong	local09, objptr
025bc     53 00 00 AF 
025c0     EC E5 85 A1 |  if_e	sub	objptr, ##42988
025c4     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
025c8     74 00 90 5D |  if_ne	jmp	#LR__0112
025cc     55 00 00 FF 
025d0     F8 E5 05 F1 | 	add	objptr, ##44024
025d4     F2 16 02 FB | 	rdlong	arg03, objptr
025d8     55 00 00 FF 
025dc     F8 E5 85 F1 | 	sub	objptr, ##44024
025e0     10 13 02 F6 | 	mov	arg01, local02
025e4     00 14 06 F6 | 	mov	arg02, #0
025e8     CC 29 B0 FD | 	call	#_compile_assign
025ec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
025ec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
025ec     7A 00 00 FF 
025f0     78 E4 05 F1 | 	add	objptr, ##62584
025f4     F2 12 02 FB | 	rdlong	arg01, objptr
025f8     7A 00 00 FF 
025fc     78 E4 85 F1 | 	sub	objptr, ##62584
02600     27 01 00 FF 
02604     28 14 06 F6 | 	mov	arg02, ##@LR__4182
02608     80 35 B1 FD | 	call	#__system___string_cmp
0260c     00 FA 0D F2 | 	cmp	result1, #0 wz
02610     90 01 90 AD |  if_e	jmp	#LR__0120
02614     7A 00 00 FF 
02618     78 E4 05 F1 | 	add	objptr, ##62584
0261c     F2 1E 02 FB | 	rdlong	local01, objptr
02620     24 00 00 FF 
02624     88 E4 85 F1 | 	sub	objptr, ##18568
02628     F2 1E 62 FC | 	wrlong	local01, objptr
0262c     08 E4 05 F1 | 	add	objptr, #8
02630     F2 08 68 FC | 	wrlong	#4, objptr
02634     55 00 00 FF 
02638     F8 E5 85 F1 | 	sub	objptr, ##44024
0263c     28 E4 9F FD | 	jmp	#LR__0020
02640                 | LR__0112
02640                 | ' 
02640                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02640     53 00 00 FF 
02644     E4 E5 05 F1 | 	add	objptr, ##42980
02648     F2 1E 02 FB | 	rdlong	local01, objptr
0264c     53 00 00 FF 
02650     E4 E5 85 F1 | 	sub	objptr, ##42980
02654     01 00 00 FF 
02658     04 1E 0E F2 | 	cmp	local01, ##516 wz
0265c     53 00 00 AF 
02660     EC E5 05 A1 |  if_e	add	objptr, ##42988
02664     F2 28 02 AB |  if_e	rdlong	local06, objptr
02668     53 00 00 AF 
0266c     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02670     1B 28 0E A2 |  if_e	cmp	local06, #27 wz
02674     14 00 90 5D |  if_ne	jmp	#LR__0113
02678     00 12 06 F6 | 	mov	arg01, #0
0267c     00 14 06 F6 | 	mov	arg02, #0
02680     00 16 06 F6 | 	mov	arg03, #0
02684     30 29 B0 FD | 	call	#_compile_assign
02688     90 00 90 FD | 	jmp	#LR__0115
0268c                 | LR__0113
0268c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0268c     53 00 00 FF 
02690     E4 E5 05 F1 | 	add	objptr, ##42980
02694     F2 1E 02 FB | 	rdlong	local01, objptr
02698     53 00 00 FF 
0269c     E4 E5 85 F1 | 	sub	objptr, ##42980
026a0     01 00 00 FF 
026a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
026a8     53 00 00 AF 
026ac     EC E5 05 A1 |  if_e	add	objptr, ##42988
026b0     F2 28 02 AB |  if_e	rdlong	local06, objptr
026b4     53 00 00 AF 
026b8     EC E5 85 A1 |  if_e	sub	objptr, ##42988
026bc     14 28 0E A2 |  if_e	cmp	local06, #20 wz
026c0     44 00 90 5D |  if_ne	jmp	#LR__0114
026c4     00 12 06 F6 | 	mov	arg01, #0
026c8     4C 8A B1 FD | 	call	#__system___getiolock_0362
026cc     FD 12 02 F6 | 	mov	arg01, result1
026d0     90 34 B1 FD | 	call	#__system___lockmem
026d4     27 01 00 FF 
026d8     29 14 06 F6 | 	mov	arg02, ##@LR__4183
026dc     00 12 06 F6 | 	mov	arg01, #0
026e0     00 16 06 F6 | 	mov	arg03, #0
026e4     70 41 B1 FD | 	call	#__system___basic_print_string
026e8     00 12 06 F6 | 	mov	arg01, #0
026ec     0A 14 06 F6 | 	mov	arg02, #10
026f0     00 16 06 F6 | 	mov	arg03, #0
026f4     08 41 B1 FD | 	call	#__system___basic_print_char
026f8     00 12 06 F6 | 	mov	arg01, #0
026fc     18 8A B1 FD | 	call	#__system___getiolock_0362
02700     FD 00 68 FC | 	wrlong	#0, result1
02704     7C 00 90 FD | 	jmp	#LR__0119
02708                 | LR__0114
02708     00 12 06 F6 | 	mov	arg01, #0
0270c     00 14 06 F6 | 	mov	arg02, #0
02710     00 16 06 F6 | 	mov	arg03, #0
02714     D0 27 B0 FD | 	call	#_compile
02718     FD 22 02 F6 | 	mov	local03, result1
0271c                 | LR__0115
0271c                 | ' 
0271c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0271c                 | ' 
0271c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0271c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0271c                 | ' if err=0 then execute_line() else printerror(err)
0271c     00 22 0E F2 | 	cmp	local03, #0 wz
02720     0C 00 90 5D |  if_ne	jmp	#LR__0116
02724     00 12 06 F6 | 	mov	arg01, #0
02728     7C 61 B0 FD | 	call	#_execute_line
0272c     08 00 90 FD | 	jmp	#LR__0117
02730                 | LR__0116
02730     11 13 02 F6 | 	mov	arg01, local03
02734     C8 FE B0 FD | 	call	#_printerror
02738                 | LR__0117
02738                 | ' if rest$<>"" then line$=rest$:  goto 108 
02738     7A 00 00 FF 
0273c     78 E4 05 F1 | 	add	objptr, ##62584
02740     F2 12 02 FB | 	rdlong	arg01, objptr
02744     7A 00 00 FF 
02748     78 E4 85 F1 | 	sub	objptr, ##62584
0274c     27 01 00 FF 
02750     58 14 06 F6 | 	mov	arg02, ##@LR__4184
02754     34 34 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     24 00 90 AD |  if_e	jmp	#LR__0118
02760     7A 00 00 FF 
02764     78 E4 05 F1 | 	add	objptr, ##62584
02768     F2 1E 02 FB | 	rdlong	local01, objptr
0276c     24 00 00 FF 
02770     88 E4 85 F1 | 	sub	objptr, ##18568
02774     F2 1E 62 FC | 	wrlong	local01, objptr
02778     55 00 00 FF 
0277c     F0 E5 85 F1 | 	sub	objptr, ##44016
02780     E4 E2 9F FD | 	jmp	#LR__0020
02784                 | LR__0118
02784                 | LR__0119
02784     27 01 00 FF 
02788     59 12 06 F6 | 	mov	arg01, ##@LR__4185
0278c                 | ' 
0278c                 | ' write(text)
0278c     B0 23 B1 FD | 	call	#_hg010b_spin2_write
02790                 | ' crlf
02790     0C 25 B1 FD | 	call	#_hg010b_spin2_crlf
02794     27 01 00 FF 
02798     5A 12 06 F6 | 	mov	arg01, ##@LR__4186
0279c                 | ' 
0279c                 | ' write(text)
0279c     A0 23 B1 FD | 	call	#_hg010b_spin2_write
027a0                 | ' crlf
027a0     FC 24 B1 FD | 	call	#_hg010b_spin2_crlf
027a4                 | LR__0120
027a4     A7 F0 03 F6 | 	mov	ptra, fp
027a8     B2 00 A0 FD | 	call	#popregs_
027ac                 | _interpret_ret
027ac     2D 00 64 FD | 	ret
027b0                 | 
027b0                 | ' 
027b0                 | ' 
027b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
027b0                 | ' 
027b0                 | ' function isoperator(s as string) as ubyte
027b0                 | _isoperator
027b0     01 4A 05 F6 | 	mov	COUNT_, #1
027b4     A8 00 A0 FD | 	call	#pushregs_
027b8                 | ' 
027b8                 | ' select case s
027b8     09 1F 02 F6 | 	mov	local01, arg01
027bc     27 01 00 FF 
027c0     60 14 06 F6 | 	mov	arg02, ##@LR__4187
027c4     0F 13 02 F6 | 	mov	arg01, local01
027c8     C0 33 B1 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     FC 01 90 AD |  if_e	jmp	#LR__0130
027d4     27 01 00 FF 
027d8     62 14 06 F6 | 	mov	arg02, ##@LR__4188
027dc     0F 13 02 F6 | 	mov	arg01, local01
027e0     A8 33 B1 FD | 	call	#__system___string_cmp
027e4     00 FA 0D F2 | 	cmp	result1, #0 wz
027e8     EC 01 90 AD |  if_e	jmp	#LR__0131
027ec     27 01 00 FF 
027f0     64 14 06 F6 | 	mov	arg02, ##@LR__4189
027f4     0F 13 02 F6 | 	mov	arg01, local01
027f8     90 33 B1 FD | 	call	#__system___string_cmp
027fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02800     DC 01 90 AD |  if_e	jmp	#LR__0132
02804     27 01 00 FF 
02808     67 14 06 F6 | 	mov	arg02, ##@LR__4190
0280c     0F 13 02 F6 | 	mov	arg01, local01
02810     78 33 B1 FD | 	call	#__system___string_cmp
02814     00 FA 0D F2 | 	cmp	result1, #0 wz
02818     CC 01 90 AD |  if_e	jmp	#LR__0133
0281c     27 01 00 FF 
02820     6B 14 06 F6 | 	mov	arg02, ##@LR__4191
02824     0F 13 02 F6 | 	mov	arg01, local01
02828     60 33 B1 FD | 	call	#__system___string_cmp
0282c     00 FA 0D F2 | 	cmp	result1, #0 wz
02830     BC 01 90 AD |  if_e	jmp	#LR__0134
02834     27 01 00 FF 
02838     6D 14 06 F6 | 	mov	arg02, ##@LR__4192
0283c     0F 13 02 F6 | 	mov	arg01, local01
02840     48 33 B1 FD | 	call	#__system___string_cmp
02844     00 FA 0D F2 | 	cmp	result1, #0 wz
02848     AC 01 90 AD |  if_e	jmp	#LR__0135
0284c     27 01 00 FF 
02850     6F 14 06 F6 | 	mov	arg02, ##@LR__4193
02854     0F 13 02 F6 | 	mov	arg01, local01
02858     30 33 B1 FD | 	call	#__system___string_cmp
0285c     00 FA 0D F2 | 	cmp	result1, #0 wz
02860     9C 01 90 AD |  if_e	jmp	#LR__0136
02864     27 01 00 FF 
02868     73 14 06 F6 | 	mov	arg02, ##@LR__4194
0286c     0F 13 02 F6 | 	mov	arg01, local01
02870     18 33 B1 FD | 	call	#__system___string_cmp
02874     00 FA 0D F2 | 	cmp	result1, #0 wz
02878     8C 01 90 AD |  if_e	jmp	#LR__0137
0287c     27 01 00 FF 
02880     77 14 06 F6 | 	mov	arg02, ##@LR__4195
02884     0F 13 02 F6 | 	mov	arg01, local01
02888     00 33 B1 FD | 	call	#__system___string_cmp
0288c     00 FA 0D F2 | 	cmp	result1, #0 wz
02890     7C 01 90 AD |  if_e	jmp	#LR__0138
02894     27 01 00 FF 
02898     7B 14 06 F6 | 	mov	arg02, ##@LR__4196
0289c     0F 13 02 F6 | 	mov	arg01, local01
028a0     E8 32 B1 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     6C 01 90 AD |  if_e	jmp	#LR__0139
028ac     27 01 00 FF 
028b0     7F 14 06 F6 | 	mov	arg02, ##@LR__4197
028b4     0F 13 02 F6 | 	mov	arg01, local01
028b8     D0 32 B1 FD | 	call	#__system___string_cmp
028bc     00 FA 0D F2 | 	cmp	result1, #0 wz
028c0     5C 01 90 AD |  if_e	jmp	#LR__0140
028c4     27 01 00 FF 
028c8     83 14 06 F6 | 	mov	arg02, ##@LR__4198
028cc     0F 13 02 F6 | 	mov	arg01, local01
028d0     B8 32 B1 FD | 	call	#__system___string_cmp
028d4     00 FA 0D F2 | 	cmp	result1, #0 wz
028d8     4C 01 90 AD |  if_e	jmp	#LR__0141
028dc     27 01 00 FF 
028e0     85 14 06 F6 | 	mov	arg02, ##@LR__4199
028e4     0F 13 02 F6 | 	mov	arg01, local01
028e8     A0 32 B1 FD | 	call	#__system___string_cmp
028ec     00 FA 0D F2 | 	cmp	result1, #0 wz
028f0     3C 01 90 AD |  if_e	jmp	#LR__0142
028f4     27 01 00 FF 
028f8     89 14 06 F6 | 	mov	arg02, ##@LR__4200
028fc     0F 13 02 F6 | 	mov	arg01, local01
02900     88 32 B1 FD | 	call	#__system___string_cmp
02904     00 FA 0D F2 | 	cmp	result1, #0 wz
02908     2C 01 90 AD |  if_e	jmp	#LR__0143
0290c     27 01 00 FF 
02910     8B 14 06 F6 | 	mov	arg02, ##@LR__4201
02914     0F 13 02 F6 | 	mov	arg01, local01
02918     70 32 B1 FD | 	call	#__system___string_cmp
0291c     00 FA 0D F2 | 	cmp	result1, #0 wz
02920     1C 01 90 AD |  if_e	jmp	#LR__0144
02924     27 01 00 FF 
02928     8D 14 06 F6 | 	mov	arg02, ##@LR__4202
0292c     0F 13 02 F6 | 	mov	arg01, local01
02930     58 32 B1 FD | 	call	#__system___string_cmp
02934     00 FA 0D F2 | 	cmp	result1, #0 wz
02938     0C 01 90 AD |  if_e	jmp	#LR__0145
0293c     27 01 00 FF 
02940     90 14 06 F6 | 	mov	arg02, ##@LR__4203
02944     0F 13 02 F6 | 	mov	arg01, local01
02948     40 32 B1 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     FC 00 90 AD |  if_e	jmp	#LR__0146
02954     27 01 00 FF 
02958     93 14 06 F6 | 	mov	arg02, ##@LR__4204
0295c     0F 13 02 F6 | 	mov	arg01, local01
02960     28 32 B1 FD | 	call	#__system___string_cmp
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     EC 00 90 AD |  if_e	jmp	#LR__0147
0296c     27 01 00 FF 
02970     95 14 06 F6 | 	mov	arg02, ##@LR__4205
02974     0F 13 02 F6 | 	mov	arg01, local01
02978     10 32 B1 FD | 	call	#__system___string_cmp
0297c     00 FA 0D F2 | 	cmp	result1, #0 wz
02980     DC 00 90 AD |  if_e	jmp	#LR__0148
02984     27 01 00 FF 
02988     97 14 06 F6 | 	mov	arg02, ##@LR__4206
0298c     0F 13 02 F6 | 	mov	arg01, local01
02990     F8 31 B1 FD | 	call	#__system___string_cmp
02994     00 FA 0D F2 | 	cmp	result1, #0 wz
02998     CC 00 90 AD |  if_e	jmp	#LR__0149
0299c     27 01 00 FF 
029a0     9A 14 06 F6 | 	mov	arg02, ##@LR__4207
029a4     0F 13 02 F6 | 	mov	arg01, local01
029a8     E0 31 B1 FD | 	call	#__system___string_cmp
029ac     00 FA 0D F2 | 	cmp	result1, #0 wz
029b0     BC 00 90 AD |  if_e	jmp	#LR__0150
029b4     27 01 00 FF 
029b8     9D 14 06 F6 | 	mov	arg02, ##@LR__4208
029bc     0F 13 02 F6 | 	mov	arg01, local01
029c0     C8 31 B1 FD | 	call	#__system___string_cmp
029c4     00 FA 0D F2 | 	cmp	result1, #0 wz
029c8     AC 00 90 AD |  if_e	jmp	#LR__0151
029cc     B0 00 90 FD | 	jmp	#LR__0152
029d0                 | LR__0130
029d0     01 FA 05 F6 | 	mov	result1, #1
029d4     AC 00 90 FD | 	jmp	#LR__0153
029d8                 | LR__0131
029d8     02 FA 05 F6 | 	mov	result1, #2
029dc     A4 00 90 FD | 	jmp	#LR__0153
029e0                 | LR__0132
029e0     03 FA 05 F6 | 	mov	result1, #3
029e4     9C 00 90 FD | 	jmp	#LR__0153
029e8                 | LR__0133
029e8     04 FA 05 F6 | 	mov	result1, #4
029ec     94 00 90 FD | 	jmp	#LR__0153
029f0                 | LR__0134
029f0     05 FA 05 F6 | 	mov	result1, #5
029f4     8C 00 90 FD | 	jmp	#LR__0153
029f8                 | LR__0135
029f8     06 FA 05 F6 | 	mov	result1, #6
029fc     84 00 90 FD | 	jmp	#LR__0153
02a00                 | LR__0136
02a00     07 FA 05 F6 | 	mov	result1, #7
02a04     7C 00 90 FD | 	jmp	#LR__0153
02a08                 | LR__0137
02a08     08 FA 05 F6 | 	mov	result1, #8
02a0c     74 00 90 FD | 	jmp	#LR__0153
02a10                 | LR__0138
02a10     09 FA 05 F6 | 	mov	result1, #9
02a14     6C 00 90 FD | 	jmp	#LR__0153
02a18                 | LR__0139
02a18     0A FA 05 F6 | 	mov	result1, #10
02a1c     64 00 90 FD | 	jmp	#LR__0153
02a20                 | LR__0140
02a20     0B FA 05 F6 | 	mov	result1, #11
02a24     5C 00 90 FD | 	jmp	#LR__0153
02a28                 | LR__0141
02a28     0C FA 05 F6 | 	mov	result1, #12
02a2c     54 00 90 FD | 	jmp	#LR__0153
02a30                 | LR__0142
02a30     0D FA 05 F6 | 	mov	result1, #13
02a34     4C 00 90 FD | 	jmp	#LR__0153
02a38                 | LR__0143
02a38     0E FA 05 F6 | 	mov	result1, #14
02a3c     44 00 90 FD | 	jmp	#LR__0153
02a40                 | LR__0144
02a40     1B FA 05 F6 | 	mov	result1, #27
02a44     3C 00 90 FD | 	jmp	#LR__0153
02a48                 | LR__0145
02a48     27 FA 05 F6 | 	mov	result1, #39
02a4c     34 00 90 FD | 	jmp	#LR__0153
02a50                 | LR__0146
02a50     26 FA 05 F6 | 	mov	result1, #38
02a54     2C 00 90 FD | 	jmp	#LR__0153
02a58                 | LR__0147
02a58     10 FA 05 F6 | 	mov	result1, #16
02a5c     24 00 90 FD | 	jmp	#LR__0153
02a60                 | LR__0148
02a60     0F FA 05 F6 | 	mov	result1, #15
02a64     1C 00 90 FD | 	jmp	#LR__0153
02a68                 | LR__0149
02a68     2A FA 05 F6 | 	mov	result1, #42
02a6c     14 00 90 FD | 	jmp	#LR__0153
02a70                 | LR__0150
02a70     28 FA 05 F6 | 	mov	result1, #40
02a74     0C 00 90 FD | 	jmp	#LR__0153
02a78                 | LR__0151
02a78     29 FA 05 F6 | 	mov	result1, #41
02a7c     04 00 90 FD | 	jmp	#LR__0153
02a80                 | LR__0152
02a80     00 FA 05 F6 | 	mov	result1, #0
02a84                 | LR__0153
02a84     A7 F0 03 F6 | 	mov	ptra, fp
02a88     B2 00 A0 FD | 	call	#popregs_
02a8c                 | _isoperator_ret
02a8c     2D 00 64 FD | 	ret
02a90                 | 
02a90                 | ' 
02a90                 | ' function isseparator(s as string) as ubyte
02a90                 | _isseparator
02a90     01 4A 05 F6 | 	mov	COUNT_, #1
02a94     A8 00 A0 FD | 	call	#pushregs_
02a98                 | ' 
02a98                 | ' select case s
02a98     09 1F 02 F6 | 	mov	local01, arg01
02a9c     27 01 00 FF 
02aa0     A0 14 06 F6 | 	mov	arg02, ##@LR__4209
02aa4     0F 13 02 F6 | 	mov	arg01, local01
02aa8     E0 30 B1 FD | 	call	#__system___string_cmp
02aac     00 FA 0D F2 | 	cmp	result1, #0 wz
02ab0     54 01 90 AD |  if_e	jmp	#LR__0160
02ab4     27 01 00 FF 
02ab8     A2 14 06 F6 | 	mov	arg02, ##@LR__4210
02abc     0F 13 02 F6 | 	mov	arg01, local01
02ac0     C8 30 B1 FD | 	call	#__system___string_cmp
02ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ac8     44 01 90 AD |  if_e	jmp	#LR__0161
02acc     27 01 00 FF 
02ad0     A4 14 06 F6 | 	mov	arg02, ##@LR__4211
02ad4     0F 13 02 F6 | 	mov	arg01, local01
02ad8     B0 30 B1 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     34 01 90 AD |  if_e	jmp	#LR__0162
02ae4     27 01 00 FF 
02ae8     A6 14 06 F6 | 	mov	arg02, ##@LR__4212
02aec     0F 13 02 F6 | 	mov	arg01, local01
02af0     98 30 B1 FD | 	call	#__system___string_cmp
02af4     00 FA 0D F2 | 	cmp	result1, #0 wz
02af8     24 01 90 AD |  if_e	jmp	#LR__0163
02afc     27 01 00 FF 
02b00     A8 14 06 F6 | 	mov	arg02, ##@LR__4213
02b04     0F 13 02 F6 | 	mov	arg01, local01
02b08     80 30 B1 FD | 	call	#__system___string_cmp
02b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b10     14 01 90 AD |  if_e	jmp	#LR__0164
02b14     27 01 00 FF 
02b18     AA 14 06 F6 | 	mov	arg02, ##@LR__4214
02b1c     0F 13 02 F6 | 	mov	arg01, local01
02b20     68 30 B1 FD | 	call	#__system___string_cmp
02b24     00 FA 0D F2 | 	cmp	result1, #0 wz
02b28     04 01 90 AD |  if_e	jmp	#LR__0165
02b2c     27 01 00 FF 
02b30     AC 14 06 F6 | 	mov	arg02, ##@LR__4215
02b34     0F 13 02 F6 | 	mov	arg01, local01
02b38     50 30 B1 FD | 	call	#__system___string_cmp
02b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b40     F4 00 90 AD |  if_e	jmp	#LR__0166
02b44     27 01 00 FF 
02b48     AE 14 06 F6 | 	mov	arg02, ##@LR__4216
02b4c     0F 13 02 F6 | 	mov	arg01, local01
02b50     38 30 B1 FD | 	call	#__system___string_cmp
02b54     00 FA 0D F2 | 	cmp	result1, #0 wz
02b58     E4 00 90 AD |  if_e	jmp	#LR__0167
02b5c     27 01 00 FF 
02b60     B0 14 06 F6 | 	mov	arg02, ##@LR__4217
02b64     0F 13 02 F6 | 	mov	arg01, local01
02b68     20 30 B1 FD | 	call	#__system___string_cmp
02b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b70     D4 00 90 AD |  if_e	jmp	#LR__0168
02b74     27 01 00 FF 
02b78     B2 14 06 F6 | 	mov	arg02, ##@LR__4218
02b7c     0F 13 02 F6 | 	mov	arg01, local01
02b80     08 30 B1 FD | 	call	#__system___string_cmp
02b84     00 FA 0D F2 | 	cmp	result1, #0 wz
02b88     C4 00 90 AD |  if_e	jmp	#LR__0169
02b8c     27 01 00 FF 
02b90     B4 14 06 F6 | 	mov	arg02, ##@LR__4219
02b94     0F 13 02 F6 | 	mov	arg01, local01
02b98     F0 2F B1 FD | 	call	#__system___string_cmp
02b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02ba0     B4 00 90 AD |  if_e	jmp	#LR__0170
02ba4     27 01 00 FF 
02ba8     B6 14 06 F6 | 	mov	arg02, ##@LR__4220
02bac     0F 13 02 F6 | 	mov	arg01, local01
02bb0     D8 2F B1 FD | 	call	#__system___string_cmp
02bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb8     A4 00 90 AD |  if_e	jmp	#LR__0171
02bbc     27 01 00 FF 
02bc0     B8 14 06 F6 | 	mov	arg02, ##@LR__4221
02bc4     0F 13 02 F6 | 	mov	arg01, local01
02bc8     C0 2F B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     94 00 90 AD |  if_e	jmp	#LR__0172
02bd4     27 01 00 FF 
02bd8     BA 14 06 F6 | 	mov	arg02, ##@LR__4222
02bdc     0F 13 02 F6 | 	mov	arg01, local01
02be0     A8 2F B1 FD | 	call	#__system___string_cmp
02be4     00 FA 0D F2 | 	cmp	result1, #0 wz
02be8     84 00 90 AD |  if_e	jmp	#LR__0173
02bec     27 01 00 FF 
02bf0     BC 14 06 F6 | 	mov	arg02, ##@LR__4223
02bf4     0F 13 02 F6 | 	mov	arg01, local01
02bf8     90 2F B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     74 00 90 AD |  if_e	jmp	#LR__0174
02c04     78 00 90 FD | 	jmp	#LR__0175
02c08                 | LR__0160
02c08     01 FA 05 F6 | 	mov	result1, #1
02c0c     74 00 90 FD | 	jmp	#LR__0176
02c10                 | LR__0161
02c10     02 FA 05 F6 | 	mov	result1, #2
02c14     6C 00 90 FD | 	jmp	#LR__0176
02c18                 | LR__0162
02c18     1B FA 05 F6 | 	mov	result1, #27
02c1c     64 00 90 FD | 	jmp	#LR__0176
02c20                 | LR__0163
02c20     11 FA 05 F6 | 	mov	result1, #17
02c24     5C 00 90 FD | 	jmp	#LR__0176
02c28                 | LR__0164
02c28     05 FA 05 F6 | 	mov	result1, #5
02c2c     54 00 90 FD | 	jmp	#LR__0176
02c30                 | LR__0165
02c30     06 FA 05 F6 | 	mov	result1, #6
02c34     4C 00 90 FD | 	jmp	#LR__0176
02c38                 | LR__0166
02c38     12 FA 05 F6 | 	mov	result1, #18
02c3c     44 00 90 FD | 	jmp	#LR__0176
02c40                 | LR__0167
02c40     13 FA 05 F6 | 	mov	result1, #19
02c44     3C 00 90 FD | 	jmp	#LR__0176
02c48                 | LR__0168
02c48     0C FA 05 F6 | 	mov	result1, #12
02c4c     34 00 90 FD | 	jmp	#LR__0176
02c50                 | LR__0169
02c50     14 FA 05 F6 | 	mov	result1, #20
02c54     2C 00 90 FD | 	jmp	#LR__0176
02c58                 | LR__0170
02c58     15 FA 05 F6 | 	mov	result1, #21
02c5c     24 00 90 FD | 	jmp	#LR__0176
02c60                 | LR__0171
02c60     16 FA 05 F6 | 	mov	result1, #22
02c64     1C 00 90 FD | 	jmp	#LR__0176
02c68                 | LR__0172
02c68     FF FB 05 F6 | 	mov	result1, #511
02c6c     14 00 90 FD | 	jmp	#LR__0176
02c70                 | LR__0173
02c70     0F FA 05 F6 | 	mov	result1, #15
02c74     0C 00 90 FD | 	jmp	#LR__0176
02c78                 | LR__0174
02c78     10 FA 05 F6 | 	mov	result1, #16
02c7c     04 00 90 FD | 	jmp	#LR__0176
02c80                 | LR__0175
02c80     00 FA 05 F6 | 	mov	result1, #0
02c84                 | LR__0176
02c84     A7 F0 03 F6 | 	mov	ptra, fp
02c88     B2 00 A0 FD | 	call	#popregs_
02c8c                 | _isseparator_ret
02c8c     2D 00 64 FD | 	ret
02c90                 | 
02c90                 | ' 
02c90                 | ' 
02c90                 | ' function iscommand(s as string) as ubyte
02c90                 | _iscommand
02c90     01 4A 05 F6 | 	mov	COUNT_, #1
02c94     A8 00 A0 FD | 	call	#pushregs_
02c98                 | ' 
02c98                 | ' select case s
02c98     09 1F 02 F6 | 	mov	local01, arg01
02c9c     27 01 00 FF 
02ca0     C0 14 06 F6 | 	mov	arg02, ##@LR__4225
02ca4     0F 13 02 F6 | 	mov	arg01, local01
02ca8     E0 2E B1 FD | 	call	#__system___string_cmp
02cac     00 FA 0D F2 | 	cmp	result1, #0 wz
02cb0     F4 03 90 AD |  if_e	jmp	#LR__0180
02cb4     27 01 00 FF 
02cb8     C4 14 06 F6 | 	mov	arg02, ##@LR__4226
02cbc     0F 13 02 F6 | 	mov	arg01, local01
02cc0     C8 2E B1 FD | 	call	#__system___string_cmp
02cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc8     E4 03 90 AD |  if_e	jmp	#LR__0181
02ccc     27 01 00 FF 
02cd0     C8 14 06 F6 | 	mov	arg02, ##@LR__4227
02cd4     0F 13 02 F6 | 	mov	arg01, local01
02cd8     B0 2E B1 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     D4 03 90 AD |  if_e	jmp	#LR__0182
02ce4     27 01 00 FF 
02ce8     CD 14 06 F6 | 	mov	arg02, ##@LR__4228
02cec     0F 13 02 F6 | 	mov	arg01, local01
02cf0     98 2E B1 FD | 	call	#__system___string_cmp
02cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf8     C4 03 90 AD |  if_e	jmp	#LR__0183
02cfc     27 01 00 FF 
02d00     D2 14 06 F6 | 	mov	arg02, ##@LR__4229
02d04     0F 13 02 F6 | 	mov	arg01, local01
02d08     80 2E B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     B4 03 90 AD |  if_e	jmp	#LR__0184
02d14     27 01 00 FF 
02d18     D8 14 06 F6 | 	mov	arg02, ##@LR__4230
02d1c     0F 13 02 F6 | 	mov	arg01, local01
02d20     68 2E B1 FD | 	call	#__system___string_cmp
02d24     00 FA 0D F2 | 	cmp	result1, #0 wz
02d28     A4 03 90 AD |  if_e	jmp	#LR__0185
02d2c     27 01 00 FF 
02d30     DF 14 06 F6 | 	mov	arg02, ##@LR__4231
02d34     0F 13 02 F6 | 	mov	arg01, local01
02d38     50 2E B1 FD | 	call	#__system___string_cmp
02d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d40     94 03 90 AD |  if_e	jmp	#LR__0186
02d44     27 01 00 FF 
02d48     E7 14 06 F6 | 	mov	arg02, ##@LR__4232
02d4c     0F 13 02 F6 | 	mov	arg01, local01
02d50     38 2E B1 FD | 	call	#__system___string_cmp
02d54     00 FA 0D F2 | 	cmp	result1, #0 wz
02d58     84 03 90 AD |  if_e	jmp	#LR__0187
02d5c     27 01 00 FF 
02d60     EB 14 06 F6 | 	mov	arg02, ##@LR__4233
02d64     0F 13 02 F6 | 	mov	arg01, local01
02d68     20 2E B1 FD | 	call	#__system___string_cmp
02d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d70     74 03 90 AD |  if_e	jmp	#LR__0188
02d74     27 01 00 FF 
02d78     F1 14 06 F6 | 	mov	arg02, ##@LR__4234
02d7c     0F 13 02 F6 | 	mov	arg01, local01
02d80     08 2E B1 FD | 	call	#__system___string_cmp
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     64 03 90 AD |  if_e	jmp	#LR__0189
02d8c     27 01 00 FF 
02d90     F7 14 06 F6 | 	mov	arg02, ##@LR__4235
02d94     0F 13 02 F6 | 	mov	arg01, local01
02d98     F0 2D B1 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     54 03 90 AD |  if_e	jmp	#LR__0190
02da4     27 01 00 FF 
02da8     FD 14 06 F6 | 	mov	arg02, ##@LR__4236
02dac     0F 13 02 F6 | 	mov	arg01, local01
02db0     D8 2D B1 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     44 03 90 AD |  if_e	jmp	#LR__0191
02dbc     27 01 00 FF 
02dc0     02 15 06 F6 | 	mov	arg02, ##@LR__4237
02dc4     0F 13 02 F6 | 	mov	arg01, local01
02dc8     C0 2D B1 FD | 	call	#__system___string_cmp
02dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd0     34 03 90 AD |  if_e	jmp	#LR__0192
02dd4     27 01 00 FF 
02dd8     06 15 06 F6 | 	mov	arg02, ##@LR__4238
02ddc     0F 13 02 F6 | 	mov	arg01, local01
02de0     A8 2D B1 FD | 	call	#__system___string_cmp
02de4     00 FA 0D F2 | 	cmp	result1, #0 wz
02de8     24 03 90 AD |  if_e	jmp	#LR__0193
02dec     27 01 00 FF 
02df0     0B 15 06 F6 | 	mov	arg02, ##@LR__4239
02df4     0F 13 02 F6 | 	mov	arg01, local01
02df8     90 2D B1 FD | 	call	#__system___string_cmp
02dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02e00     14 03 90 AD |  if_e	jmp	#LR__0194
02e04     27 01 00 FF 
02e08     11 15 06 F6 | 	mov	arg02, ##@LR__4240
02e0c     0F 13 02 F6 | 	mov	arg01, local01
02e10     78 2D B1 FD | 	call	#__system___string_cmp
02e14     00 FA 0D F2 | 	cmp	result1, #0 wz
02e18     04 03 90 AD |  if_e	jmp	#LR__0195
02e1c     27 01 00 FF 
02e20     16 15 06 F6 | 	mov	arg02, ##@LR__4241
02e24     0F 13 02 F6 | 	mov	arg01, local01
02e28     60 2D B1 FD | 	call	#__system___string_cmp
02e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e30     F4 02 90 AD |  if_e	jmp	#LR__0196
02e34     27 01 00 FF 
02e38     1B 15 06 F6 | 	mov	arg02, ##@LR__4242
02e3c     0F 13 02 F6 | 	mov	arg01, local01
02e40     48 2D B1 FD | 	call	#__system___string_cmp
02e44     00 FA 0D F2 | 	cmp	result1, #0 wz
02e48     E4 02 90 AD |  if_e	jmp	#LR__0197
02e4c     27 01 00 FF 
02e50     20 15 06 F6 | 	mov	arg02, ##@LR__4243
02e54     0F 13 02 F6 | 	mov	arg01, local01
02e58     30 2D B1 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     D4 02 90 AD |  if_e	jmp	#LR__0198
02e64     27 01 00 FF 
02e68     29 15 06 F6 | 	mov	arg02, ##@LR__4244
02e6c     0F 13 02 F6 | 	mov	arg01, local01
02e70     18 2D B1 FD | 	call	#__system___string_cmp
02e74     00 FA 0D F2 | 	cmp	result1, #0 wz
02e78     C4 02 90 AD |  if_e	jmp	#LR__0199
02e7c     27 01 00 FF 
02e80     30 15 06 F6 | 	mov	arg02, ##@LR__4245
02e84     0F 13 02 F6 | 	mov	arg01, local01
02e88     00 2D B1 FD | 	call	#__system___string_cmp
02e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e90     B4 02 90 AD |  if_e	jmp	#LR__0200
02e94     27 01 00 FF 
02e98     38 15 06 F6 | 	mov	arg02, ##@LR__4246
02e9c     0F 13 02 F6 | 	mov	arg01, local01
02ea0     E8 2C B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     A4 02 90 AD |  if_e	jmp	#LR__0201
02eac     27 01 00 FF 
02eb0     3B 15 06 F6 | 	mov	arg02, ##@LR__4247
02eb4     0F 13 02 F6 | 	mov	arg01, local01
02eb8     D0 2C B1 FD | 	call	#__system___string_cmp
02ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec0     94 02 90 AD |  if_e	jmp	#LR__0202
02ec4     27 01 00 FF 
02ec8     40 15 06 F6 | 	mov	arg02, ##@LR__4248
02ecc     0F 13 02 F6 | 	mov	arg01, local01
02ed0     B8 2C B1 FD | 	call	#__system___string_cmp
02ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ed8     84 02 90 AD |  if_e	jmp	#LR__0203
02edc     27 01 00 FF 
02ee0     45 15 06 F6 | 	mov	arg02, ##@LR__4249
02ee4     0F 13 02 F6 | 	mov	arg01, local01
02ee8     A0 2C B1 FD | 	call	#__system___string_cmp
02eec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef0     74 02 90 AD |  if_e	jmp	#LR__0204
02ef4     27 01 00 FF 
02ef8     4A 15 06 F6 | 	mov	arg02, ##@LR__4250
02efc     0F 13 02 F6 | 	mov	arg01, local01
02f00     88 2C B1 FD | 	call	#__system___string_cmp
02f04     00 FA 0D F2 | 	cmp	result1, #0 wz
02f08     64 02 90 AD |  if_e	jmp	#LR__0205
02f0c     27 01 00 FF 
02f10     4E 15 06 F6 | 	mov	arg02, ##@LR__4251
02f14     0F 13 02 F6 | 	mov	arg01, local01
02f18     70 2C B1 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     54 02 90 AD |  if_e	jmp	#LR__0206
02f24     27 01 00 FF 
02f28     52 15 06 F6 | 	mov	arg02, ##@LR__4252
02f2c     0F 13 02 F6 | 	mov	arg01, local01
02f30     58 2C B1 FD | 	call	#__system___string_cmp
02f34     00 FA 0D F2 | 	cmp	result1, #0 wz
02f38     44 02 90 AD |  if_e	jmp	#LR__0207
02f3c     27 01 00 FF 
02f40     57 15 06 F6 | 	mov	arg02, ##@LR__4253
02f44     0F 13 02 F6 | 	mov	arg01, local01
02f48     40 2C B1 FD | 	call	#__system___string_cmp
02f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f50     34 02 90 AD |  if_e	jmp	#LR__0208
02f54     27 01 00 FF 
02f58     5D 15 06 F6 | 	mov	arg02, ##@LR__4254
02f5c     0F 13 02 F6 | 	mov	arg01, local01
02f60     28 2C B1 FD | 	call	#__system___string_cmp
02f64     00 FA 0D F2 | 	cmp	result1, #0 wz
02f68     24 02 90 AD |  if_e	jmp	#LR__0209
02f6c     27 01 00 FF 
02f70     61 15 06 F6 | 	mov	arg02, ##@LR__4255
02f74     0F 13 02 F6 | 	mov	arg01, local01
02f78     10 2C B1 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     14 02 90 AD |  if_e	jmp	#LR__0210
02f84     27 01 00 FF 
02f88     66 15 06 F6 | 	mov	arg02, ##@LR__4256
02f8c     0F 13 02 F6 | 	mov	arg01, local01
02f90     F8 2B B1 FD | 	call	#__system___string_cmp
02f94     00 FA 0D F2 | 	cmp	result1, #0 wz
02f98     04 02 90 AD |  if_e	jmp	#LR__0211
02f9c     27 01 00 FF 
02fa0     6B 15 06 F6 | 	mov	arg02, ##@LR__4257
02fa4     0F 13 02 F6 | 	mov	arg01, local01
02fa8     E0 2B B1 FD | 	call	#__system___string_cmp
02fac     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb0     F4 01 90 AD |  if_e	jmp	#LR__0212
02fb4     27 01 00 FF 
02fb8     71 15 06 F6 | 	mov	arg02, ##@LR__4258
02fbc     0F 13 02 F6 | 	mov	arg01, local01
02fc0     C8 2B B1 FD | 	call	#__system___string_cmp
02fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fc8     E4 01 90 AD |  if_e	jmp	#LR__0213
02fcc     27 01 00 FF 
02fd0     78 15 06 F6 | 	mov	arg02, ##@LR__4259
02fd4     0F 13 02 F6 | 	mov	arg01, local01
02fd8     B0 2B B1 FD | 	call	#__system___string_cmp
02fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe0     D4 01 90 AD |  if_e	jmp	#LR__0214
02fe4     27 01 00 FF 
02fe8     7E 15 06 F6 | 	mov	arg02, ##@LR__4260
02fec     0F 13 02 F6 | 	mov	arg01, local01
02ff0     98 2B B1 FD | 	call	#__system___string_cmp
02ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff8     C4 01 90 AD |  if_e	jmp	#LR__0215
02ffc     27 01 00 FF 
03000     88 15 06 F6 | 	mov	arg02, ##@LR__4261
03004     0F 13 02 F6 | 	mov	arg01, local01
03008     80 2B B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     B4 01 90 AD |  if_e	jmp	#LR__0216
03014     27 01 00 FF 
03018     8F 15 06 F6 | 	mov	arg02, ##@LR__4262
0301c     0F 13 02 F6 | 	mov	arg01, local01
03020     68 2B B1 FD | 	call	#__system___string_cmp
03024     00 FA 0D F2 | 	cmp	result1, #0 wz
03028     A4 01 90 AD |  if_e	jmp	#LR__0217
0302c     27 01 00 FF 
03030     99 15 06 F6 | 	mov	arg02, ##@LR__4263
03034     0F 13 02 F6 | 	mov	arg01, local01
03038     50 2B B1 FD | 	call	#__system___string_cmp
0303c     00 FA 0D F2 | 	cmp	result1, #0 wz
03040     94 01 90 AD |  if_e	jmp	#LR__0218
03044     27 01 00 FF 
03048     9E 15 06 F6 | 	mov	arg02, ##@LR__4264
0304c     0F 13 02 F6 | 	mov	arg01, local01
03050     38 2B B1 FD | 	call	#__system___string_cmp
03054     00 FA 0D F2 | 	cmp	result1, #0 wz
03058     84 01 90 AD |  if_e	jmp	#LR__0219
0305c     27 01 00 FF 
03060     A2 15 06 F6 | 	mov	arg02, ##@LR__4265
03064     0F 13 02 F6 | 	mov	arg01, local01
03068     20 2B B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     74 01 90 AD |  if_e	jmp	#LR__0220
03074     27 01 00 FF 
03078     A9 15 06 F6 | 	mov	arg02, ##@LR__4266
0307c     0F 13 02 F6 | 	mov	arg01, local01
03080     08 2B B1 FD | 	call	#__system___string_cmp
03084     00 FA 0D F2 | 	cmp	result1, #0 wz
03088     64 01 90 AD |  if_e	jmp	#LR__0221
0308c     27 01 00 FF 
03090     B0 15 06 F6 | 	mov	arg02, ##@LR__4267
03094     0F 13 02 F6 | 	mov	arg01, local01
03098     F0 2A B1 FD | 	call	#__system___string_cmp
0309c     00 FA 0D F2 | 	cmp	result1, #0 wz
030a0     54 01 90 AD |  if_e	jmp	#LR__0222
030a4     58 01 90 FD | 	jmp	#LR__0223
030a8                 | LR__0180
030a8     40 FA 05 F6 | 	mov	result1, #64
030ac     54 01 90 FD | 	jmp	#LR__0224
030b0                 | LR__0181
030b0     41 FA 05 F6 | 	mov	result1, #65
030b4     4C 01 90 FD | 	jmp	#LR__0224
030b8                 | LR__0182
030b8     42 FA 05 F6 | 	mov	result1, #66
030bc     44 01 90 FD | 	jmp	#LR__0224
030c0                 | LR__0183
030c0     43 FA 05 F6 | 	mov	result1, #67
030c4     3C 01 90 FD | 	jmp	#LR__0224
030c8                 | LR__0184
030c8     44 FA 05 F6 | 	mov	result1, #68
030cc     34 01 90 FD | 	jmp	#LR__0224
030d0                 | LR__0185
030d0     45 FA 05 F6 | 	mov	result1, #69
030d4     2C 01 90 FD | 	jmp	#LR__0224
030d8                 | LR__0186
030d8     46 FA 05 F6 | 	mov	result1, #70
030dc     24 01 90 FD | 	jmp	#LR__0224
030e0                 | LR__0187
030e0     47 FA 05 F6 | 	mov	result1, #71
030e4     1C 01 90 FD | 	jmp	#LR__0224
030e8                 | LR__0188
030e8     48 FA 05 F6 | 	mov	result1, #72
030ec     14 01 90 FD | 	jmp	#LR__0224
030f0                 | LR__0189
030f0     49 FA 05 F6 | 	mov	result1, #73
030f4     0C 01 90 FD | 	jmp	#LR__0224
030f8                 | LR__0190
030f8     44 FA 05 F6 | 	mov	result1, #68
030fc     04 01 90 FD | 	jmp	#LR__0224
03100                 | LR__0191
03100     4C FA 05 F6 | 	mov	result1, #76
03104     FC 00 90 FD | 	jmp	#LR__0224
03108                 | LR__0192
03108     4D FA 05 F6 | 	mov	result1, #77
0310c     F4 00 90 FD | 	jmp	#LR__0224
03110                 | LR__0193
03110     4E FA 05 F6 | 	mov	result1, #78
03114     EC 00 90 FD | 	jmp	#LR__0224
03118                 | LR__0194
03118     50 FA 05 F6 | 	mov	result1, #80
0311c     E4 00 90 FD | 	jmp	#LR__0224
03120                 | LR__0195
03120     51 FA 05 F6 | 	mov	result1, #81
03124     DC 00 90 FD | 	jmp	#LR__0224
03128                 | LR__0196
03128     52 FA 05 F6 | 	mov	result1, #82
0312c     D4 00 90 FD | 	jmp	#LR__0224
03130                 | LR__0197
03130     59 FA 05 F6 | 	mov	result1, #89
03134     CC 00 90 FD | 	jmp	#LR__0224
03138                 | LR__0198
03138     55 FA 05 F6 | 	mov	result1, #85
0313c     C4 00 90 FD | 	jmp	#LR__0224
03140                 | LR__0199
03140     56 FA 05 F6 | 	mov	result1, #86
03144     BC 00 90 FD | 	jmp	#LR__0224
03148                 | LR__0200
03148     57 FA 05 F6 | 	mov	result1, #87
0314c     B4 00 90 FD | 	jmp	#LR__0224
03150                 | LR__0201
03150     58 FA 05 F6 | 	mov	result1, #88
03154     AC 00 90 FD | 	jmp	#LR__0224
03158                 | LR__0202
03158     5A FA 05 F6 | 	mov	result1, #90
0315c     A4 00 90 FD | 	jmp	#LR__0224
03160                 | LR__0203
03160     5B FA 05 F6 | 	mov	result1, #91
03164     9C 00 90 FD | 	jmp	#LR__0224
03168                 | LR__0204
03168     5C FA 05 F6 | 	mov	result1, #92
0316c     94 00 90 FD | 	jmp	#LR__0224
03170                 | LR__0205
03170     5D FA 05 F6 | 	mov	result1, #93
03174     8C 00 90 FD | 	jmp	#LR__0224
03178                 | LR__0206
03178     4A FA 05 F6 | 	mov	result1, #74
0317c     84 00 90 FD | 	jmp	#LR__0224
03180                 | LR__0207
03180     4B FA 05 F6 | 	mov	result1, #75
03184     7C 00 90 FD | 	jmp	#LR__0224
03188                 | LR__0208
03188     5E FA 05 F6 | 	mov	result1, #94
0318c     74 00 90 FD | 	jmp	#LR__0224
03190                 | LR__0209
03190     5F FA 05 F6 | 	mov	result1, #95
03194     6C 00 90 FD | 	jmp	#LR__0224
03198                 | LR__0210
03198     60 FA 05 F6 | 	mov	result1, #96
0319c     64 00 90 FD | 	jmp	#LR__0224
031a0                 | LR__0211
031a0     61 FA 05 F6 | 	mov	result1, #97
031a4     5C 00 90 FD | 	jmp	#LR__0224
031a8                 | LR__0212
031a8     63 FA 05 F6 | 	mov	result1, #99
031ac     54 00 90 FD | 	jmp	#LR__0224
031b0                 | LR__0213
031b0     68 FA 05 F6 | 	mov	result1, #104
031b4     4C 00 90 FD | 	jmp	#LR__0224
031b8                 | LR__0214
031b8     69 FA 05 F6 | 	mov	result1, #105
031bc     44 00 90 FD | 	jmp	#LR__0224
031c0                 | LR__0215
031c0     6C FA 05 F6 | 	mov	result1, #108
031c4     3C 00 90 FD | 	jmp	#LR__0224
031c8                 | LR__0216
031c8     6D FA 05 F6 | 	mov	result1, #109
031cc     34 00 90 FD | 	jmp	#LR__0224
031d0                 | LR__0217
031d0     70 FA 05 F6 | 	mov	result1, #112
031d4     2C 00 90 FD | 	jmp	#LR__0224
031d8                 | LR__0218
031d8     71 FA 05 F6 | 	mov	result1, #113
031dc     24 00 90 FD | 	jmp	#LR__0224
031e0                 | LR__0219
031e0     72 FA 05 F6 | 	mov	result1, #114
031e4     1C 00 90 FD | 	jmp	#LR__0224
031e8                 | LR__0220
031e8     73 FA 05 F6 | 	mov	result1, #115
031ec     14 00 90 FD | 	jmp	#LR__0224
031f0                 | LR__0221
031f0     74 FA 05 F6 | 	mov	result1, #116
031f4     0C 00 90 FD | 	jmp	#LR__0224
031f8                 | LR__0222
031f8     75 FA 05 F6 | 	mov	result1, #117
031fc     04 00 90 FD | 	jmp	#LR__0224
03200                 | LR__0223
03200     00 FA 05 F6 | 	mov	result1, #0
03204                 | LR__0224
03204     A7 F0 03 F6 | 	mov	ptra, fp
03208     B2 00 A0 FD | 	call	#popregs_
0320c                 | _iscommand_ret
0320c     2D 00 64 FD | 	ret
03210                 | 
03210                 | ' 
03210                 | ' function isfunction(s as string) as ubyte
03210                 | _isfunction
03210     01 4A 05 F6 | 	mov	COUNT_, #1
03214     A8 00 A0 FD | 	call	#pushregs_
03218                 | ' 
03218                 | ' select case s
03218     09 1F 02 F6 | 	mov	local01, arg01
0321c     27 01 00 FF 
03220     B5 15 06 F6 | 	mov	arg02, ##@LR__4268
03224     0F 13 02 F6 | 	mov	arg01, local01
03228     60 29 B1 FD | 	call	#__system___string_cmp
0322c     00 FA 0D F2 | 	cmp	result1, #0 wz
03230     DC 00 90 AD |  if_e	jmp	#LR__0230
03234     27 01 00 FF 
03238     B9 15 06 F6 | 	mov	arg02, ##@LR__4269
0323c     0F 13 02 F6 | 	mov	arg01, local01
03240     48 29 B1 FD | 	call	#__system___string_cmp
03244     00 FA 0D F2 | 	cmp	result1, #0 wz
03248     CC 00 90 AD |  if_e	jmp	#LR__0231
0324c     27 01 00 FF 
03250     C0 15 06 F6 | 	mov	arg02, ##@LR__4270
03254     0F 13 02 F6 | 	mov	arg01, local01
03258     30 29 B1 FD | 	call	#__system___string_cmp
0325c     00 FA 0D F2 | 	cmp	result1, #0 wz
03260     BC 00 90 AD |  if_e	jmp	#LR__0232
03264     27 01 00 FF 
03268     C7 15 06 F6 | 	mov	arg02, ##@LR__4271
0326c     0F 13 02 F6 | 	mov	arg01, local01
03270     18 29 B1 FD | 	call	#__system___string_cmp
03274     00 FA 0D F2 | 	cmp	result1, #0 wz
03278     AC 00 90 AD |  if_e	jmp	#LR__0233
0327c     27 01 00 FF 
03280     CE 15 06 F6 | 	mov	arg02, ##@LR__4272
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     00 29 B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     9C 00 90 AD |  if_e	jmp	#LR__0234
03294     27 01 00 FF 
03298     D5 15 06 F6 | 	mov	arg02, ##@LR__4273
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     E8 28 B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     8C 00 90 AD |  if_e	jmp	#LR__0235
032ac     27 01 00 FF 
032b0     DD 15 06 F6 | 	mov	arg02, ##@LR__4274
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     D0 28 B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     7C 00 90 AD |  if_e	jmp	#LR__0236
032c4     27 01 00 FF 
032c8     E1 15 06 F6 | 	mov	arg02, ##@LR__4275
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     B8 28 B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     6C 00 90 AD |  if_e	jmp	#LR__0237
032dc     27 01 00 FF 
032e0     E7 15 06 F6 | 	mov	arg02, ##@LR__4276
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     A0 28 B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     5C 00 90 AD |  if_e	jmp	#LR__0238
032f4     27 01 00 FF 
032f8     ED 15 06 F6 | 	mov	arg02, ##@LR__4277
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     88 28 B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     4C 00 90 AD |  if_e	jmp	#LR__0239
0330c     50 00 90 FD | 	jmp	#LR__0240
03310                 | LR__0230
03310     54 FA 05 F6 | 	mov	result1, #84
03314     4C 00 90 FD | 	jmp	#LR__0241
03318                 | LR__0231
03318     64 FA 05 F6 | 	mov	result1, #100
0331c     44 00 90 FD | 	jmp	#LR__0241
03320                 | LR__0232
03320     65 FA 05 F6 | 	mov	result1, #101
03324     3C 00 90 FD | 	jmp	#LR__0241
03328                 | LR__0233
03328     66 FA 05 F6 | 	mov	result1, #102
0332c     34 00 90 FD | 	jmp	#LR__0241
03330                 | LR__0234
03330     67 FA 05 F6 | 	mov	result1, #103
03334     2C 00 90 FD | 	jmp	#LR__0241
03338                 | LR__0235
03338     62 FA 05 F6 | 	mov	result1, #98
0333c     24 00 90 FD | 	jmp	#LR__0241
03340                 | LR__0236
03340     6B FA 05 F6 | 	mov	result1, #107
03344     1C 00 90 FD | 	jmp	#LR__0241
03348                 | LR__0237
03348     6A FA 05 F6 | 	mov	result1, #106
0334c     14 00 90 FD | 	jmp	#LR__0241
03350                 | LR__0238
03350     6E FA 05 F6 | 	mov	result1, #110
03354     0C 00 90 FD | 	jmp	#LR__0241
03358                 | LR__0239
03358     6F FA 05 F6 | 	mov	result1, #111
0335c     04 00 90 FD | 	jmp	#LR__0241
03360                 | LR__0240
03360     00 FA 05 F6 | 	mov	result1, #0
03364                 | LR__0241
03364     A7 F0 03 F6 | 	mov	ptra, fp
03368     B2 00 A0 FD | 	call	#popregs_
0336c                 | _isfunction_ret
0336c     2D 00 64 FD | 	ret
03370                 | 
03370                 | ' 
03370                 | ' function isname(s as string) as boolean
03370                 | _isname
03370     0D 4A 05 F6 | 	mov	COUNT_, #13
03374     A8 00 A0 FD | 	call	#pushregs_
03378     09 1F 02 F6 | 	mov	local01, arg01
0337c     09 21 02 F6 | 	mov	local02, arg01
03380     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
03384                 | LR__0250
03384     10 FB C9 FA | 	rdbyte	result1, local02 wz
03388     01 20 06 51 |  if_ne	add	local02, #1
0338c     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
03390                 | LR__0251
03390     09 21 82 F1 | 	sub	local02, arg01
03394     10 FB 01 F6 | 	mov	result1, local02
03398     FD 22 0A F6 | 	mov	local03, result1 wz
0339c     00 FA 05 A6 |  if_e	mov	result1, #0
033a0     34 02 90 AD |  if_e	jmp	#LR__0263
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     01 14 06 F6 | 	mov	arg02, #1
033ac     01 16 06 F6 | 	mov	arg03, #1
033b0     D8 48 B1 FD | 	call	#__system__Mid_S
033b4     FD 24 02 F6 | 	mov	local04, result1
033b8                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
033b8     27 01 00 FF 
033bc     F6 15 06 F6 | 	mov	arg02, ##@LR__4278
033c0     12 13 02 F6 | 	mov	arg01, local04
033c4     C4 27 B1 FD | 	call	#__system___string_cmp
033c8     00 FA 55 F2 | 	cmps	result1, #0 wc
033cc     18 00 90 CD |  if_b	jmp	#LR__0252
033d0     27 01 00 FF 
033d4     F8 15 06 F6 | 	mov	arg02, ##@LR__4279
033d8     12 13 02 F6 | 	mov	arg01, local04
033dc     AC 27 B1 FD | 	call	#__system___string_cmp
033e0     01 FA 55 F2 | 	cmps	result1, #1 wc
033e4     1C 00 90 CD |  if_b	jmp	#LR__0253
033e8                 | LR__0252
033e8     27 01 00 FF 
033ec     FA 15 06 F6 | 	mov	arg02, ##@LR__4280
033f0     12 13 02 F6 | 	mov	arg01, local04
033f4     94 27 B1 FD | 	call	#__system___string_cmp
033f8     00 FA 0D F2 | 	cmp	result1, #0 wz
033fc     00 FA 05 56 |  if_ne	mov	result1, #0
03400     D4 01 90 5D |  if_ne	jmp	#LR__0263
03404                 | LR__0253
03404                 | ' if l>2 then 
03404     03 22 56 F2 | 	cmps	local03, #3 wc
03408     C8 01 90 CD |  if_b	jmp	#LR__0262
0340c                 | '   for i=2 to l
0340c     02 26 06 F6 | 	mov	local05, #2
03410     11 29 02 F6 | 	mov	local06, local03
03414     01 28 06 F1 | 	add	local06, #1
03418                 | LR__0254
03418     14 27 52 F2 | 	cmps	local05, local06 wc
0341c     B4 01 90 3D |  if_ae	jmp	#LR__0261
03420     0F 13 02 F6 | 	mov	arg01, local01
03424     13 15 02 F6 | 	mov	arg02, local05
03428     01 16 06 F6 | 	mov	arg03, #1
0342c     5C 48 B1 FD | 	call	#__system__Mid_S
03430     FD 24 02 F6 | 	mov	local04, result1
03434                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
03434     11 27 52 F2 | 	cmps	local05, local03 wc
03438     9C 00 90 3D |  if_ae	jmp	#LR__0257
0343c     27 01 00 FF 
03440     FC 15 06 F6 | 	mov	arg02, ##@LR__4281
03444     12 13 02 F6 | 	mov	arg01, local04
03448     40 27 B1 FD | 	call	#__system___string_cmp
0344c     00 FA 55 F2 | 	cmps	result1, #0 wc
03450     18 00 90 CD |  if_b	jmp	#LR__0255
03454     27 01 00 FF 
03458     FE 15 06 F6 | 	mov	arg02, ##@LR__4282
0345c     12 13 02 F6 | 	mov	arg01, local04
03460     28 27 B1 FD | 	call	#__system___string_cmp
03464     01 FA 55 F2 | 	cmps	result1, #1 wc
03468     6C 00 90 CD |  if_b	jmp	#LR__0257
0346c                 | LR__0255
0346c     28 01 00 FF 
03470     00 14 06 F6 | 	mov	arg02, ##@LR__4283
03474     12 13 02 F6 | 	mov	arg01, local04
03478     10 27 B1 FD | 	call	#__system___string_cmp
0347c     00 FA 55 F2 | 	cmps	result1, #0 wc
03480     18 00 90 CD |  if_b	jmp	#LR__0256
03484     28 01 00 FF 
03488     02 14 06 F6 | 	mov	arg02, ##@LR__4284
0348c     12 13 02 F6 | 	mov	arg01, local04
03490     F8 26 B1 FD | 	call	#__system___string_cmp
03494     01 FA 55 F2 | 	cmps	result1, #1 wc
03498     3C 00 90 CD |  if_b	jmp	#LR__0257
0349c                 | LR__0256
0349c     28 01 00 FF 
034a0     04 2A 06 F6 | 	mov	local07, ##@LR__4285
034a4     12 13 02 F6 | 	mov	arg01, local04
034a8     15 15 02 F6 | 	mov	arg02, local07
034ac     DC 26 B1 FD | 	call	#__system___string_cmp
034b0     00 FA 0D F2 | 	cmp	result1, #0 wz
034b4     20 00 90 AD |  if_e	jmp	#LR__0257
034b8     28 01 00 FF 
034bc     06 2C 06 F6 | 	mov	local08, ##@LR__4286
034c0     12 13 02 F6 | 	mov	arg01, local04
034c4     16 15 02 F6 | 	mov	arg02, local08
034c8     C0 26 B1 FD | 	call	#__system___string_cmp
034cc     FD 2E 0A F6 | 	mov	local09, result1 wz
034d0     00 FA 05 56 |  if_ne	mov	result1, #0
034d4     00 01 90 5D |  if_ne	jmp	#LR__0263
034d8                 | LR__0257
034d8                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
034d8     11 27 0A F2 | 	cmp	local05, local03 wz
034dc     EC 00 90 5D |  if_ne	jmp	#LR__0260
034e0     28 01 00 FF 
034e4     08 30 06 F6 | 	mov	local10, ##@LR__4287
034e8     12 13 02 F6 | 	mov	arg01, local04
034ec     18 15 02 F6 | 	mov	arg02, local10
034f0     98 26 B1 FD | 	call	#__system___string_cmp
034f4     FD 32 02 F6 | 	mov	local11, result1
034f8     00 32 56 F2 | 	cmps	local11, #0 wc
034fc     1C 00 90 CD |  if_b	jmp	#LR__0258
03500     28 01 00 FF 
03504     0A 14 06 F6 | 	mov	arg02, ##@LR__4288
03508     12 13 02 F6 | 	mov	arg01, local04
0350c     7C 26 B1 FD | 	call	#__system___string_cmp
03510     FD 30 02 F6 | 	mov	local10, result1
03514     01 30 56 F2 | 	cmps	local10, #1 wc
03518     B0 00 90 CD |  if_b	jmp	#LR__0260
0351c                 | LR__0258
0351c     28 01 00 FF 
03520     0C 14 06 F6 | 	mov	arg02, ##@LR__4289
03524     12 13 02 F6 | 	mov	arg01, local04
03528     60 26 B1 FD | 	call	#__system___string_cmp
0352c     00 FA 55 F2 | 	cmps	result1, #0 wc
03530     1C 00 90 CD |  if_b	jmp	#LR__0259
03534     28 01 00 FF 
03538     0E 2E 06 F6 | 	mov	local09, ##@LR__4290
0353c     12 13 02 F6 | 	mov	arg01, local04
03540     17 15 02 F6 | 	mov	arg02, local09
03544     44 26 B1 FD | 	call	#__system___string_cmp
03548     01 FA 55 F2 | 	cmps	result1, #1 wc
0354c     7C 00 90 CD |  if_b	jmp	#LR__0260
03550                 | LR__0259
03550     28 01 00 FF 
03554     10 2E 06 F6 | 	mov	local09, ##@LR__4291
03558     12 13 02 F6 | 	mov	arg01, local04
0355c     17 15 02 F6 | 	mov	arg02, local09
03560     28 26 B1 FD | 	call	#__system___string_cmp
03564     00 FA 4D F2 | 	cmps	result1, #0 wz
03568     60 00 90 AD |  if_e	jmp	#LR__0260
0356c     28 01 00 FF 
03570     12 2C 06 F6 | 	mov	local08, ##@LR__4292
03574     12 13 02 F6 | 	mov	arg01, local04
03578     16 15 02 F6 | 	mov	arg02, local08
0357c     0C 26 B1 FD | 	call	#__system___string_cmp
03580     FD 2E 0A F6 | 	mov	local09, result1 wz
03584     44 00 90 AD |  if_e	jmp	#LR__0260
03588     28 01 00 FF 
0358c     14 34 06 F6 | 	mov	local12, ##@LR__4293
03590     1A 2D 02 F6 | 	mov	local08, local12
03594     12 13 02 F6 | 	mov	arg01, local04
03598     16 15 02 F6 | 	mov	arg02, local08
0359c     EC 25 B1 FD | 	call	#__system___string_cmp
035a0     FD 2A 0A F6 | 	mov	local07, result1 wz
035a4     24 00 90 AD |  if_e	jmp	#LR__0260
035a8     28 01 00 FF 
035ac     16 36 06 F6 | 	mov	local13, ##@LR__4294
035b0     1B 35 02 F6 | 	mov	local12, local13
035b4     12 13 02 F6 | 	mov	arg01, local04
035b8     1A 15 02 F6 | 	mov	arg02, local12
035bc     CC 25 B1 FD | 	call	#__system___string_cmp
035c0     FD 2C 0A F6 | 	mov	local08, result1 wz
035c4     00 FA 05 56 |  if_ne	mov	result1, #0
035c8     0C 00 90 5D |  if_ne	jmp	#LR__0263
035cc                 | LR__0260
035cc     01 26 06 F1 | 	add	local05, #1
035d0     44 FE 9F FD | 	jmp	#LR__0254
035d4                 | LR__0261
035d4                 | LR__0262
035d4                 | ' return true
035d4     01 FA 65 F6 | 	neg	result1, #1
035d8                 | LR__0263
035d8     A7 F0 03 F6 | 	mov	ptra, fp
035dc     B2 00 A0 FD | 	call	#popregs_
035e0                 | _isname_ret
035e0     2D 00 64 FD | 	ret
035e4                 | 
035e4                 | ' 
035e4                 | ' function isnum(s as string) as boolean
035e4                 | _isnum
035e4     0D 4A 05 F6 | 	mov	COUNT_, #13
035e8     A8 00 A0 FD | 	call	#pushregs_
035ec     09 1F 02 F6 | 	mov	local01, arg01
035f0     00 20 06 F6 | 	mov	local02, #0
035f4     00 22 06 F6 | 	mov	local03, #0
035f8     0F 13 02 F6 | 	mov	arg01, local01
035fc     09 25 02 F6 | 	mov	local04, arg01
03600     97 06 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
03604                 | LR__0270
03604     12 FB C9 FA | 	rdbyte	result1, local04 wz
03608     01 24 06 51 |  if_ne	add	local04, #1
0360c     F4 FF 9F 5D |  if_ne	jmp	#LR__0270
03610                 | LR__0271
03610     09 25 82 F1 | 	sub	local04, arg01
03614     12 FB 01 F6 | 	mov	result1, local04
03618     FD 26 0A F6 | 	mov	local05, result1 wz
0361c     00 FA 05 A6 |  if_e	mov	result1, #0
03620     8C 02 90 AD |  if_e	jmp	#LR__0282
03624     0F 13 02 F6 | 	mov	arg01, local01
03628     01 14 06 F6 | 	mov	arg02, #1
0362c     01 16 06 F6 | 	mov	arg03, #1
03630     58 46 B1 FD | 	call	#__system__Mid_S
03634     FD 28 02 F6 | 	mov	local06, result1
03638                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03638     28 01 00 FF 
0363c     18 14 06 F6 | 	mov	arg02, ##@LR__4295
03640     14 13 02 F6 | 	mov	arg01, local06
03644     44 25 B1 FD | 	call	#__system___string_cmp
03648     00 FA 55 F2 | 	cmps	result1, #0 wc
0364c     18 00 90 CD |  if_b	jmp	#LR__0272
03650     28 01 00 FF 
03654     1A 14 06 F6 | 	mov	arg02, ##@LR__4296
03658     14 13 02 F6 | 	mov	arg01, local06
0365c     2C 25 B1 FD | 	call	#__system___string_cmp
03660     01 FA 55 F2 | 	cmps	result1, #1 wc
03664     78 00 90 CD |  if_b	jmp	#LR__0273
03668                 | LR__0272
03668     28 01 00 FF 
0366c     1C 14 06 F6 | 	mov	arg02, ##@LR__4297
03670     14 13 02 F6 | 	mov	arg01, local06
03674     14 25 B1 FD | 	call	#__system___string_cmp
03678     00 FA 0D F2 | 	cmp	result1, #0 wz
0367c     60 00 90 AD |  if_e	jmp	#LR__0273
03680     28 01 00 FF 
03684     1E 2A 06 F6 | 	mov	local07, ##@LR__4298
03688     14 13 02 F6 | 	mov	arg01, local06
0368c     15 15 02 F6 | 	mov	arg02, local07
03690     F8 24 B1 FD | 	call	#__system___string_cmp
03694     00 FA 0D F2 | 	cmp	result1, #0 wz
03698     44 00 90 AD |  if_e	jmp	#LR__0273
0369c     28 01 00 FF 
036a0     20 2C 06 F6 | 	mov	local08, ##@LR__4299
036a4     16 2B 02 F6 | 	mov	local07, local08
036a8     14 13 02 F6 | 	mov	arg01, local06
036ac     15 15 02 F6 | 	mov	arg02, local07
036b0     D8 24 B1 FD | 	call	#__system___string_cmp
036b4     00 FA 4D F2 | 	cmps	result1, #0 wz
036b8     24 00 90 AD |  if_e	jmp	#LR__0273
036bc     28 01 00 FF 
036c0     22 2E 06 F6 | 	mov	local09, ##@LR__4300
036c4     17 2D 02 F6 | 	mov	local08, local09
036c8     14 13 02 F6 | 	mov	arg01, local06
036cc     16 15 02 F6 | 	mov	arg02, local08
036d0     B8 24 B1 FD | 	call	#__system___string_cmp
036d4     FD 2A 0A F6 | 	mov	local07, result1 wz
036d8     00 FA 05 56 |  if_ne	mov	result1, #0
036dc     D0 01 90 5D |  if_ne	jmp	#LR__0282
036e0                 | LR__0273
036e0                 | ' if m$="." then ds=1
036e0     28 01 00 FF 
036e4     24 14 06 F6 | 	mov	arg02, ##@LR__4301
036e8     14 13 02 F6 | 	mov	arg01, local06
036ec     9C 24 B1 FD | 	call	#__system___string_cmp
036f0     00 FA 0D F2 | 	cmp	result1, #0 wz
036f4     01 20 06 A6 |  if_e	mov	local02, #1
036f8                 | ' if l>1 then 
036f8     02 26 56 F2 | 	cmps	local05, #2 wc
036fc     AC 01 90 CD |  if_b	jmp	#LR__0281
03700                 | '   for i=2 to l
03700     02 30 06 F6 | 	mov	local10, #2
03704     13 33 02 F6 | 	mov	local11, local05
03708     01 32 06 F1 | 	add	local11, #1
0370c                 | LR__0274
0370c     19 31 52 F2 | 	cmps	local10, local11 wc
03710     98 01 90 3D |  if_ae	jmp	#LR__0280
03714     0F 13 02 F6 | 	mov	arg01, local01
03718     18 15 02 F6 | 	mov	arg02, local10
0371c     01 16 06 F6 | 	mov	arg03, #1
03720     68 45 B1 FD | 	call	#__system__Mid_S
03724     FD 28 02 F6 | 	mov	local06, result1
03728                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
03728     28 01 00 FF 
0372c     26 14 06 F6 | 	mov	arg02, ##@LR__4302
03730     14 13 02 F6 | 	mov	arg01, local06
03734     54 24 B1 FD | 	call	#__system___string_cmp
03738     00 FA 55 F2 | 	cmps	result1, #0 wc
0373c     18 00 90 CD |  if_b	jmp	#LR__0275
03740     28 01 00 FF 
03744     28 14 06 F6 | 	mov	arg02, ##@LR__4303
03748     14 13 02 F6 | 	mov	arg01, local06
0374c     3C 24 B1 FD | 	call	#__system___string_cmp
03750     01 FA 55 F2 | 	cmps	result1, #1 wc
03754     98 00 90 CD |  if_b	jmp	#LR__0276
03758                 | LR__0275
03758     28 01 00 FF 
0375c     2A 14 06 F6 | 	mov	arg02, ##@LR__4304
03760     14 13 02 F6 | 	mov	arg01, local06
03764     24 24 B1 FD | 	call	#__system___string_cmp
03768     00 FA 0D F2 | 	cmp	result1, #0 wz
0376c     80 00 90 AD |  if_e	jmp	#LR__0276
03770     28 01 00 FF 
03774     2C 2A 06 F6 | 	mov	local07, ##@LR__4305
03778     14 13 02 F6 | 	mov	arg01, local06
0377c     15 15 02 F6 | 	mov	arg02, local07
03780     08 24 B1 FD | 	call	#__system___string_cmp
03784     00 FA 4D F2 | 	cmps	result1, #0 wz
03788     64 00 90 AD |  if_e	jmp	#LR__0276
0378c     28 01 00 FF 
03790     2E 2C 06 F6 | 	mov	local08, ##@LR__4306
03794     16 2B 02 F6 | 	mov	local07, local08
03798     14 13 02 F6 | 	mov	arg01, local06
0379c     15 15 02 F6 | 	mov	arg02, local07
037a0     E8 23 B1 FD | 	call	#__system___string_cmp
037a4     FD 34 0A F6 | 	mov	local12, result1 wz
037a8     44 00 90 AD |  if_e	jmp	#LR__0276
037ac     28 01 00 FF 
037b0     30 2E 06 F6 | 	mov	local09, ##@LR__4307
037b4     17 2D 02 F6 | 	mov	local08, local09
037b8     14 13 02 F6 | 	mov	arg01, local06
037bc     16 15 02 F6 | 	mov	arg02, local08
037c0     C8 23 B1 FD | 	call	#__system___string_cmp
037c4     FD 2A 0A F6 | 	mov	local07, result1 wz
037c8     24 00 90 AD |  if_e	jmp	#LR__0276
037cc     28 01 00 FF 
037d0     32 36 06 F6 | 	mov	local13, ##@LR__4308
037d4     1B 2F 02 F6 | 	mov	local09, local13
037d8     14 13 02 F6 | 	mov	arg01, local06
037dc     17 15 02 F6 | 	mov	arg02, local09
037e0     A8 23 B1 FD | 	call	#__system___string_cmp
037e4     FD 2C 0A F6 | 	mov	local08, result1 wz
037e8     00 FA 05 56 |  if_ne	mov	result1, #0
037ec     C0 00 90 5D |  if_ne	jmp	#LR__0282
037f0                 | LR__0276
037f0                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
037f0     28 01 00 FF 
037f4     34 14 06 F6 | 	mov	arg02, ##@LR__4309
037f8     14 13 02 F6 | 	mov	arg01, local06
037fc     8C 23 B1 FD | 	call	#__system___string_cmp
03800     00 FA 0D F2 | 	cmp	result1, #0 wz
03804     38 00 90 5D |  if_ne	jmp	#LR__0277
03808     18 15 02 F6 | 	mov	arg02, local10
0380c     01 14 86 F1 | 	sub	arg02, #1
03810     0F 13 02 F6 | 	mov	arg01, local01
03814     01 16 06 F6 | 	mov	arg03, #1
03818     70 44 B1 FD | 	call	#__system__Mid_S
0381c     FD 12 02 F6 | 	mov	arg01, result1
03820     04 46 B1 FD | 	call	#__system__LCase_S
03824     FD 12 02 F6 | 	mov	arg01, result1
03828     28 01 00 FF 
0382c     36 14 06 F6 | 	mov	arg02, ##@LR__4310
03830     58 23 B1 FD | 	call	#__system___string_cmp
03834     00 FA 0D F2 | 	cmp	result1, #0 wz
03838     00 FA 05 56 |  if_ne	mov	result1, #0
0383c     70 00 90 5D |  if_ne	jmp	#LR__0282
03840                 | LR__0277
03840                 | '     if m$="." then ds+=1: if ds>1 then return false
03840     28 01 00 FF 
03844     38 14 06 F6 | 	mov	arg02, ##@LR__4311
03848     14 13 02 F6 | 	mov	arg01, local06
0384c     3C 23 B1 FD | 	call	#__system___string_cmp
03850     00 FA 0D F2 | 	cmp	result1, #0 wz
03854     01 20 06 A1 |  if_e	add	local02, #1
03858     02 20 56 A2 |  if_e	cmps	local02, #2 wc
0385c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03860     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0282
03864                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03864     28 01 00 FF 
03868     3A 14 06 F6 | 	mov	arg02, ##@LR__4312
0386c     14 13 02 F6 | 	mov	arg01, local06
03870     18 23 B1 FD | 	call	#__system___string_cmp
03874     00 FA 4D F2 | 	cmps	result1, #0 wz
03878     18 00 90 AD |  if_e	jmp	#LR__0278
0387c     28 01 00 FF 
03880     3C 14 06 F6 | 	mov	arg02, ##@LR__4313
03884     14 13 02 F6 | 	mov	arg01, local06
03888     00 23 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 4D F2 | 	cmps	result1, #0 wz
03890     10 00 90 5D |  if_ne	jmp	#LR__0279
03894                 | LR__0278
03894     01 22 06 F1 | 	add	local03, #1
03898     02 22 56 F2 | 	cmps	local03, #2 wc
0389c     00 FA 05 36 |  if_ae	mov	result1, #0
038a0     0C 00 90 3D |  if_ae	jmp	#LR__0282
038a4                 | LR__0279
038a4     01 30 06 F1 | 	add	local10, #1
038a8     60 FE 9F FD | 	jmp	#LR__0274
038ac                 | LR__0280
038ac                 | LR__0281
038ac                 | ' return true
038ac     01 FA 65 F6 | 	neg	result1, #1
038b0                 | LR__0282
038b0     A7 F0 03 F6 | 	mov	ptra, fp
038b4     B2 00 A0 FD | 	call	#popregs_
038b8                 | _isnum_ret
038b8     2D 00 64 FD | 	ret
038bc                 | 
038bc                 | '   
038bc                 | ' function isint(s as string) as boolean
038bc                 | _isint
038bc     05 4A 05 F6 | 	mov	COUNT_, #5
038c0     A8 00 A0 FD | 	call	#pushregs_
038c4     09 1F 02 F6 | 	mov	local01, arg01
038c8     09 21 02 F6 | 	mov	local02, arg01
038cc     97 06 48 FB | 	callpa	#(@LR__0291-@LR__0290)>>2,fcache_load_ptr_
038d0                 | LR__0290
038d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
038d4     01 20 06 51 |  if_ne	add	local02, #1
038d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0290
038dc                 | LR__0291
038dc     09 21 82 F1 | 	sub	local02, arg01
038e0     10 FB 01 F6 | 	mov	result1, local02
038e4     FD 20 0A F6 | 	mov	local02, result1 wz
038e8     00 FA 05 A6 |  if_e	mov	result1, #0
038ec     18 01 90 AD |  if_e	jmp	#LR__0299
038f0     0F 13 02 F6 | 	mov	arg01, local01
038f4     01 14 06 F6 | 	mov	arg02, #1
038f8     01 16 06 F6 | 	mov	arg03, #1
038fc     8C 43 B1 FD | 	call	#__system__Mid_S
03900     FD 22 02 F6 | 	mov	local03, result1
03904                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03904     28 01 00 FF 
03908     3E 14 06 F6 | 	mov	arg02, ##@LR__4314
0390c     11 13 02 F6 | 	mov	arg01, local03
03910     78 22 B1 FD | 	call	#__system___string_cmp
03914     00 FA 55 F2 | 	cmps	result1, #0 wc
03918     18 00 90 CD |  if_b	jmp	#LR__0292
0391c     28 01 00 FF 
03920     40 14 06 F6 | 	mov	arg02, ##@LR__4315
03924     11 13 02 F6 | 	mov	arg01, local03
03928     60 22 B1 FD | 	call	#__system___string_cmp
0392c     01 FA 55 F2 | 	cmps	result1, #1 wc
03930     4C 00 90 CD |  if_b	jmp	#LR__0293
03934                 | LR__0292
03934     28 01 00 FF 
03938     42 14 06 F6 | 	mov	arg02, ##@LR__4316
0393c     11 13 02 F6 | 	mov	arg01, local03
03940     48 22 B1 FD | 	call	#__system___string_cmp
03944     00 FA 0D F2 | 	cmp	result1, #0 wz
03948     34 00 90 AD |  if_e	jmp	#LR__0293
0394c     28 01 00 FF 
03950     44 14 06 F6 | 	mov	arg02, ##@LR__4317
03954     11 13 02 F6 | 	mov	arg01, local03
03958     30 22 B1 FD | 	call	#__system___string_cmp
0395c     00 FA 0D F2 | 	cmp	result1, #0 wz
03960     1C 00 90 AD |  if_e	jmp	#LR__0293
03964     28 01 00 FF 
03968     46 14 06 F6 | 	mov	arg02, ##@LR__4318
0396c     11 13 02 F6 | 	mov	arg01, local03
03970     18 22 B1 FD | 	call	#__system___string_cmp
03974     00 FA 0D F2 | 	cmp	result1, #0 wz
03978     00 FA 05 56 |  if_ne	mov	result1, #0
0397c     88 00 90 5D |  if_ne	jmp	#LR__0299
03980                 | LR__0293
03980                 | ' 
03980                 | ' if l>1 then 
03980     02 20 56 F2 | 	cmps	local02, #2 wc
03984     7C 00 90 CD |  if_b	jmp	#LR__0298
03988                 | '   for i=2 to l
03988     02 24 06 F6 | 	mov	local04, #2
0398c     10 27 02 F6 | 	mov	local05, local02
03990     01 26 06 F1 | 	add	local05, #1
03994                 | LR__0294
03994     13 25 52 F2 | 	cmps	local04, local05 wc
03998     68 00 90 3D |  if_ae	jmp	#LR__0297
0399c     0F 13 02 F6 | 	mov	arg01, local01
039a0     12 15 02 F6 | 	mov	arg02, local04
039a4     01 16 06 F6 | 	mov	arg03, #1
039a8     E0 42 B1 FD | 	call	#__system__Mid_S
039ac     FD 22 02 F6 | 	mov	local03, result1
039b0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
039b0     28 01 00 FF 
039b4     48 14 06 F6 | 	mov	arg02, ##@LR__4319
039b8     11 13 02 F6 | 	mov	arg01, local03
039bc     CC 21 B1 FD | 	call	#__system___string_cmp
039c0     00 FA 55 F2 | 	cmps	result1, #0 wc
039c4     18 00 90 CD |  if_b	jmp	#LR__0295
039c8     28 01 00 FF 
039cc     4A 14 06 F6 | 	mov	arg02, ##@LR__4320
039d0     11 13 02 F6 | 	mov	arg01, local03
039d4     B4 21 B1 FD | 	call	#__system___string_cmp
039d8     01 FA 55 F2 | 	cmps	result1, #1 wc
039dc     1C 00 90 CD |  if_b	jmp	#LR__0296
039e0                 | LR__0295
039e0     28 01 00 FF 
039e4     4C 14 06 F6 | 	mov	arg02, ##@LR__4321
039e8     11 13 02 F6 | 	mov	arg01, local03
039ec     9C 21 B1 FD | 	call	#__system___string_cmp
039f0     00 FA 0D F2 | 	cmp	result1, #0 wz
039f4     00 FA 05 56 |  if_ne	mov	result1, #0
039f8     0C 00 90 5D |  if_ne	jmp	#LR__0299
039fc                 | LR__0296
039fc     01 24 06 F1 | 	add	local04, #1
03a00     90 FF 9F FD | 	jmp	#LR__0294
03a04                 | LR__0297
03a04                 | LR__0298
03a04                 | ' return true
03a04     01 FA 65 F6 | 	neg	result1, #1
03a08                 | LR__0299
03a08     A7 F0 03 F6 | 	mov	ptra, fp
03a0c     B2 00 A0 FD | 	call	#popregs_
03a10                 | _isint_ret
03a10     2D 00 64 FD | 	ret
03a14                 | 
03a14                 | ' 
03a14                 | ' function isdec(s as string) as boolean
03a14                 | _isdec
03a14     05 4A 05 F6 | 	mov	COUNT_, #5
03a18     A8 00 A0 FD | 	call	#pushregs_
03a1c     09 1F 02 F6 | 	mov	local01, arg01
03a20     09 21 02 F6 | 	mov	local02, arg01
03a24     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
03a28                 | LR__0300
03a28     10 FB C9 FA | 	rdbyte	result1, local02 wz
03a2c     01 20 06 51 |  if_ne	add	local02, #1
03a30     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
03a34                 | LR__0301
03a34     09 21 82 F1 | 	sub	local02, arg01
03a38     10 FB 01 F6 | 	mov	result1, local02
03a3c     FD 20 0A F6 | 	mov	local02, result1 wz
03a40     00 FA 05 A6 |  if_e	mov	result1, #0
03a44     80 00 90 AD |  if_e	jmp	#LR__0306
03a48                 | ' for i=1 to l
03a48     01 22 06 F6 | 	mov	local03, #1
03a4c     10 25 02 F6 | 	mov	local04, local02
03a50     01 24 06 F1 | 	add	local04, #1
03a54                 | LR__0302
03a54     12 23 52 F2 | 	cmps	local03, local04 wc
03a58     68 00 90 3D |  if_ae	jmp	#LR__0305
03a5c     0F 13 02 F6 | 	mov	arg01, local01
03a60     11 15 02 F6 | 	mov	arg02, local03
03a64     01 16 06 F6 | 	mov	arg03, #1
03a68     20 42 B1 FD | 	call	#__system__Mid_S
03a6c     FD 26 02 F6 | 	mov	local05, result1
03a70                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03a70     28 01 00 FF 
03a74     4E 14 06 F6 | 	mov	arg02, ##@LR__4322
03a78     13 13 02 F6 | 	mov	arg01, local05
03a7c     0C 21 B1 FD | 	call	#__system___string_cmp
03a80     00 FA 55 F2 | 	cmps	result1, #0 wc
03a84     18 00 90 CD |  if_b	jmp	#LR__0303
03a88     28 01 00 FF 
03a8c     50 14 06 F6 | 	mov	arg02, ##@LR__4323
03a90     13 13 02 F6 | 	mov	arg01, local05
03a94     F4 20 B1 FD | 	call	#__system___string_cmp
03a98     01 FA 55 F2 | 	cmps	result1, #1 wc
03a9c     1C 00 90 CD |  if_b	jmp	#LR__0304
03aa0                 | LR__0303
03aa0     28 01 00 FF 
03aa4     52 14 06 F6 | 	mov	arg02, ##@LR__4324
03aa8     13 13 02 F6 | 	mov	arg01, local05
03aac     DC 20 B1 FD | 	call	#__system___string_cmp
03ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab4     00 FA 05 56 |  if_ne	mov	result1, #0
03ab8     0C 00 90 5D |  if_ne	jmp	#LR__0306
03abc                 | LR__0304
03abc     01 22 06 F1 | 	add	local03, #1
03ac0     90 FF 9F FD | 	jmp	#LR__0302
03ac4                 | LR__0305
03ac4                 | ' return true
03ac4     01 FA 65 F6 | 	neg	result1, #1
03ac8                 | LR__0306
03ac8     A7 F0 03 F6 | 	mov	ptra, fp
03acc     B2 00 A0 FD | 	call	#popregs_
03ad0                 | _isdec_ret
03ad0     2D 00 64 FD | 	ret
03ad4                 | 
03ad4                 | ' 
03ad4                 | ' function isstring(s as string) as boolean
03ad4                 | _isstring
03ad4     01 4A 05 F6 | 	mov	COUNT_, #1
03ad8     A8 00 A0 FD | 	call	#pushregs_
03adc                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03adc     09 1F 02 F6 | 	mov	local01, arg01
03ae0     01 14 06 F6 | 	mov	arg02, #1
03ae4     8C 40 B1 FD | 	call	#__system__Left_S
03ae8     FD 12 02 F6 | 	mov	arg01, result1
03aec     28 01 00 FF 
03af0     54 14 06 F6 | 	mov	arg02, ##@LR__4325
03af4     94 20 B1 FD | 	call	#__system___string_cmp
03af8     00 FA 4D F2 | 	cmps	result1, #0 wz
03afc     28 00 90 5D |  if_ne	jmp	#LR__0310
03b00     0F 13 02 F6 | 	mov	arg01, local01
03b04     01 14 06 F6 | 	mov	arg02, #1
03b08     F0 40 B1 FD | 	call	#__system__Right_S
03b0c     FD 12 02 F6 | 	mov	arg01, result1
03b10     28 01 00 FF 
03b14     56 14 06 F6 | 	mov	arg02, ##@LR__4326
03b18     70 20 B1 FD | 	call	#__system___string_cmp
03b1c     00 FA 4D F2 | 	cmps	result1, #0 wz
03b20     01 FA 65 A6 |  if_e	neg	result1, #1
03b24     04 00 90 AD |  if_e	jmp	#LR__0311
03b28                 | LR__0310
03b28     00 FA 05 F6 | 	mov	result1, #0
03b2c                 | LR__0311
03b2c     A7 F0 03 F6 | 	mov	ptra, fp
03b30     B2 00 A0 FD | 	call	#popregs_
03b34                 | _isstring_ret
03b34     2D 00 64 FD | 	ret
03b38                 | 
03b38                 | ' 
03b38                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03b38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03b38                 | ' 
03b38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03b38                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03b38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03b38                 | ' 
03b38                 | ' '----- delete a line from a program
03b38                 | ' 
03b38                 | ' function deleteline(aline as ulong) as integer
03b38                 | _deleteline
03b38     03 4A 05 F6 | 	mov	COUNT_, #3
03b3c     A8 00 A0 FD | 	call	#pushregs_
03b40     2C F0 07 F1 | 	add	ptra, #44
03b44     04 4E 05 F1 | 	add	fp, #4
03b48     A7 12 62 FC | 	wrlong	arg01, fp
03b4c     69 00 00 FF 
03b50     58 E4 05 F1 | 	add	objptr, ##53848
03b54     F2 1E 02 FB | 	rdlong	local01, objptr
03b58     0C 4E 05 F1 | 	add	fp, #12
03b5c     A7 1E 62 FC | 	wrlong	local01, fp
03b60     10 4E 85 F1 | 	sub	fp, #16
03b64                 | ' 
03b64                 | ' 
03b64                 | ' searchptr=programstart
03b64                 | ' 
03b64                 | ' do
03b64     5D 00 00 FF 
03b68     98 E5 85 F1 | 	sub	objptr, ##48024
03b6c                 | LR__0320
03b6c     14 4E 05 F1 | 	add	fp, #20
03b70     A7 12 02 F6 | 	mov	arg01, fp
03b74     04 4E 85 F1 | 	sub	fp, #4
03b78     A7 14 02 FB | 	rdlong	arg02, fp
03b7c     10 4E 85 F1 | 	sub	fp, #16
03b80     18 16 06 F6 | 	mov	arg03, #24
03b84     F0 14 B1 FD | 	call	#_psram_spin2_read1
03b88     10 4E 05 F1 | 	add	fp, #16
03b8c     A7 1E 02 FB | 	rdlong	local01, fp
03b90     08 4E 85 F1 | 	sub	fp, #8
03b94     A7 1E 62 FC | 	wrlong	local01, fp
03b98     20 4E 05 F1 | 	add	fp, #32
03b9c     A7 1E 02 FB | 	rdlong	local01, fp
03ba0     18 4E 85 F1 | 	sub	fp, #24
03ba4     A7 1E 62 FC | 	wrlong	local01, fp
03ba8     04 4E 05 F1 | 	add	fp, #4
03bac     A7 1E 02 FB | 	rdlong	local01, fp
03bb0     10 4E 85 F1 | 	sub	fp, #16
03bb4     A7 16 02 FB | 	rdlong	arg03, fp
03bb8     04 4E 85 F1 | 	sub	fp, #4
03bbc     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03bc0     28 4E 05 C1 |  if_b	add	fp, #40
03bc4     A7 20 02 CB |  if_b	rdlong	local02, fp
03bc8     28 4E 85 C1 |  if_b	sub	fp, #40
03bcc     FF FF 3F CF 
03bd0     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03bd4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0320
03bd8     0B 00 00 FF 
03bdc     C0 E4 85 F1 | 	sub	objptr, ##5824
03be0                 | ' 
03be0                 | ' 
03be0                 | ' if header(0)<>aline then return -1
03be0     14 4E 05 F1 | 	add	fp, #20
03be4     A7 1E 02 FB | 	rdlong	local01, fp
03be8     10 4E 85 F1 | 	sub	fp, #16
03bec     A7 22 02 FB | 	rdlong	local03, fp
03bf0     04 4E 85 F1 | 	sub	fp, #4
03bf4     11 1F 0A F2 | 	cmp	local01, local03 wz
03bf8     01 FA 65 56 |  if_ne	neg	result1, #1
03bfc     4C 03 90 5D |  if_ne	jmp	#LR__0326
03c00     08 4E 05 F1 | 	add	fp, #8
03c04     A7 12 02 FB | 	rdlong	arg01, fp
03c08     08 4E 85 F1 | 	sub	fp, #8
03c0c     01 14 66 F6 | 	neg	arg02, #1
03c10     01 16 06 F6 | 	mov	arg03, #1
03c14     00 18 06 F6 | 	mov	arg04, #0
03c18     0B 00 00 FF 
03c1c     C0 E4 05 F1 | 	add	objptr, ##5824
03c20                 | '     return fill(addr, pattern, count, listPtr, 4)
03c20     04 1A 06 F6 | 	mov	arg05, #4
03c24     88 15 B1 FD | 	call	#_psram_spin2_fill
03c28     0B 00 00 FF 
03c2c     C0 E4 85 F1 | 	sub	objptr, ##5824
03c30                 | ' 
03c30                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03c30                 | ' 
03c30                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03c30     28 4E 05 F1 | 	add	fp, #40
03c34     A7 1E 02 FB | 	rdlong	local01, fp
03c38     28 4E 85 F1 | 	sub	fp, #40
03c3c     FF FF 3F FF 
03c40     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03c44     24 4E 05 A1 |  if_e	add	fp, #36
03c48     A7 22 02 AB |  if_e	rdlong	local03, fp
03c4c     24 4E 85 A1 |  if_e	sub	fp, #36
03c50     FF FF 7F AF 
03c54     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03c58     90 00 90 5D |  if_ne	jmp	#LR__0321
03c5c     69 00 00 FF 
03c60     58 E4 05 F1 | 	add	objptr, ##53848
03c64     F2 00 68 FC | 	wrlong	#0, objptr
03c68     07 00 00 FF 
03c6c     28 E4 85 F1 | 	sub	objptr, ##3624
03c70     F2 00 68 FC | 	wrlong	#0, objptr
03c74     07 00 00 FF 
03c78     2C E4 05 F1 | 	add	objptr, ##3628
03c7c     F2 00 68 FC | 	wrlong	#0, objptr
03c80     04 E4 05 F1 | 	add	objptr, #4
03c84     FF FF FF FF 
03c88     F2 FE 6B FC | 	wrlong	##-1, objptr
03c8c     00 12 06 F6 | 	mov	arg01, #0
03c90     10 E4 85 F1 | 	sub	objptr, #16
03c94     F2 00 68 FC | 	wrlong	#0, objptr
03c98     01 14 66 F6 | 	neg	arg02, #1
03c9c     01 16 06 F6 | 	mov	arg03, #1
03ca0     00 18 06 F6 | 	mov	arg04, #0
03ca4     5D 00 00 FF 
03ca8     90 E5 85 F1 | 	sub	objptr, ##48016
03cac                 | '     return fill(addr, pattern, count, listPtr, 4)
03cac     04 1A 06 F6 | 	mov	arg05, #4
03cb0     FC 14 B1 FD | 	call	#_psram_spin2_fill
03cb4     10 12 06 F6 | 	mov	arg01, #16
03cb8     01 14 66 F6 | 	neg	arg02, #1
03cbc     01 16 06 F6 | 	mov	arg03, #1
03cc0     00 18 06 F6 | 	mov	arg04, #0
03cc4                 | '     return fill(addr, pattern, count, listPtr, 4)
03cc4     04 1A 06 F6 | 	mov	arg05, #4
03cc8     E4 14 B1 FD | 	call	#_psram_spin2_fill
03ccc     14 12 06 F6 | 	mov	arg01, #20
03cd0     1E 14 CE F9 | 	bmask	arg02, #30
03cd4     01 16 06 F6 | 	mov	arg03, #1
03cd8     00 18 06 F6 | 	mov	arg04, #0
03cdc                 | '     return fill(addr, pattern, count, listPtr, 4)
03cdc     04 1A 06 F6 | 	mov	arg05, #4
03ce0     CC 14 B1 FD | 	call	#_psram_spin2_fill
03ce4     0B 00 00 FF 
03ce8     C0 E4 85 F1 | 	sub	objptr, ##5824
03cec                 | LR__0321
03cec                 | ' 
03cec                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03cec     28 4E 05 F1 | 	add	fp, #40
03cf0     A7 1E 02 FB | 	rdlong	local01, fp
03cf4     28 4E 85 F1 | 	sub	fp, #40
03cf8     FF FF 3F FF 
03cfc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03d00     88 00 90 5D |  if_ne	jmp	#LR__0322
03d04     24 4E 05 F1 | 	add	fp, #36
03d08     A7 22 02 FB | 	rdlong	local03, fp
03d0c     24 4E 85 F1 | 	sub	fp, #36
03d10     FF FF 7F FF 
03d14     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03d18     70 00 90 AD |  if_e	jmp	#LR__0322
03d1c     24 4E 05 F1 | 	add	fp, #36
03d20     A7 12 02 FB | 	rdlong	arg01, fp
03d24     24 4E 85 F1 | 	sub	fp, #36
03d28     14 12 06 F1 | 	add	arg01, #20
03d2c     1E 14 CE F9 | 	bmask	arg02, #30
03d30     01 16 06 F6 | 	mov	arg03, #1
03d34     00 18 06 F6 | 	mov	arg04, #0
03d38     0B 00 00 FF 
03d3c     C0 E4 05 F1 | 	add	objptr, ##5824
03d40                 | '     return fill(addr, pattern, count, listPtr, 4)
03d40     04 1A 06 F6 | 	mov	arg05, #4
03d44     68 14 B1 FD | 	call	#_psram_spin2_fill
03d48     24 4E 05 F1 | 	add	fp, #36
03d4c     A7 1E 02 FB | 	rdlong	local01, fp
03d50     5D 00 00 FF 
03d54     A0 E5 05 F1 | 	add	objptr, ##48032
03d58     F2 1E 62 FC | 	wrlong	local01, objptr
03d5c     69 00 00 FF 
03d60     60 E4 85 F1 | 	sub	objptr, ##53856
03d64     A7 12 02 FB | 	rdlong	arg01, fp
03d68     24 4E 85 F1 | 	sub	fp, #36
03d6c     4C EA B0 FD | 	call	#_pslpeek
03d70     69 00 00 FF 
03d74     5C E4 05 F1 | 	add	objptr, ##53852
03d78     F2 FA 61 FC | 	wrlong	result1, objptr
03d7c     69 00 00 FF 
03d80     5C E4 85 F1 | 	sub	objptr, ##53852
03d84                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
03d84                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
03d84                 | '   lastline=pslpeek(header(4))
03d84                 | '   return 0
03d84     00 FA 05 F6 | 	mov	result1, #0
03d88     C0 01 90 FD | 	jmp	#LR__0326
03d8c                 | LR__0322
03d8c                 | ' 
03d8c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
03d8c     28 4E 05 F1 | 	add	fp, #40
03d90     A7 1E 02 FB | 	rdlong	local01, fp
03d94     28 4E 85 F1 | 	sub	fp, #40
03d98     FF FF 3F FF 
03d9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03da0     6C 00 90 AD |  if_e	jmp	#LR__0323
03da4     24 4E 05 F1 | 	add	fp, #36
03da8     A7 22 02 FB | 	rdlong	local03, fp
03dac     24 4E 85 F1 | 	sub	fp, #36
03db0     FF FF 7F FF 
03db4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03db8     54 00 90 5D |  if_ne	jmp	#LR__0323
03dbc     28 4E 05 F1 | 	add	fp, #40
03dc0     A7 12 02 FB | 	rdlong	arg01, fp
03dc4     28 4E 85 F1 | 	sub	fp, #40
03dc8     10 12 06 F1 | 	add	arg01, #16
03dcc     01 14 66 F6 | 	neg	arg02, #1
03dd0     01 16 06 F6 | 	mov	arg03, #1
03dd4     00 18 06 F6 | 	mov	arg04, #0
03dd8     0B 00 00 FF 
03ddc     C0 E4 05 F1 | 	add	objptr, ##5824
03de0                 | '     return fill(addr, pattern, count, listPtr, 4)
03de0     04 1A 06 F6 | 	mov	arg05, #4
03de4     C8 13 B1 FD | 	call	#_psram_spin2_fill
03de8     28 4E 05 F1 | 	add	fp, #40
03dec     A7 1E 02 FB | 	rdlong	local01, fp
03df0     28 4E 85 F1 | 	sub	fp, #40
03df4     5D 00 00 FF 
03df8     98 E5 05 F1 | 	add	objptr, ##48024
03dfc     F2 1E 62 FC | 	wrlong	local01, objptr
03e00     69 00 00 FF 
03e04     58 E4 85 F1 | 	sub	objptr, ##53848
03e08                 | ' '   print "deleted first line"
03e08                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
03e08                 | '   programstart=header(5) ' adjust the program start to point on the first new line
03e08                 | '   return 0
03e08     00 FA 05 F6 | 	mov	result1, #0
03e0c     3C 01 90 FD | 	jmp	#LR__0326
03e10                 | LR__0323
03e10                 | ' 
03e10                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
03e10     28 4E 05 F1 | 	add	fp, #40
03e14     A7 1E 02 FB | 	rdlong	local01, fp
03e18     28 4E 85 F1 | 	sub	fp, #40
03e1c     FF FF 3F FF 
03e20     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03e24     24 4E 05 51 |  if_ne	add	fp, #36
03e28     A7 22 02 5B |  if_ne	rdlong	local03, fp
03e2c     24 4E 85 51 |  if_ne	sub	fp, #36
03e30     FF FF 7F 5F 
03e34     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
03e38     68 00 90 AD |  if_e	jmp	#LR__0324
03e3c     28 4E 05 F1 | 	add	fp, #40
03e40     A7 12 02 FB | 	rdlong	arg01, fp
03e44     10 12 06 F1 | 	add	arg01, #16
03e48     04 4E 85 F1 | 	sub	fp, #4
03e4c     A7 14 02 FB | 	rdlong	arg02, fp
03e50     24 4E 85 F1 | 	sub	fp, #36
03e54     01 16 06 F6 | 	mov	arg03, #1
03e58     00 18 06 F6 | 	mov	arg04, #0
03e5c     0B 00 00 FF 
03e60     C0 E4 05 F1 | 	add	objptr, ##5824
03e64                 | '     return fill(addr, pattern, count, listPtr, 4)
03e64     04 1A 06 F6 | 	mov	arg05, #4
03e68     44 13 B1 FD | 	call	#_psram_spin2_fill
03e6c     24 4E 05 F1 | 	add	fp, #36
03e70     A7 12 02 FB | 	rdlong	arg01, fp
03e74     14 12 06 F1 | 	add	arg01, #20
03e78     04 4E 05 F1 | 	add	fp, #4
03e7c     A7 14 02 FB | 	rdlong	arg02, fp
03e80     28 4E 85 F1 | 	sub	fp, #40
03e84     01 16 06 F6 | 	mov	arg03, #1
03e88     00 18 06 F6 | 	mov	arg04, #0
03e8c                 | '     return fill(addr, pattern, count, listPtr, 4)
03e8c     04 1A 06 F6 | 	mov	arg05, #4
03e90     1C 13 B1 FD | 	call	#_psram_spin2_fill
03e94     0B 00 00 FF 
03e98     C0 E4 85 F1 | 	sub	objptr, ##5824
03e9c                 | '    pslpoke(header(5)+16,header(4))  
03e9c                 | '    pslpoke(header(4)+20, header(5))
03e9c                 | '    return 0
03e9c     00 FA 05 F6 | 	mov	result1, #0
03ea0     A8 00 90 FD | 	jmp	#LR__0326
03ea4                 | LR__0324
03ea4     10 4E 05 F1 | 	add	fp, #16
03ea8     A7 1E 02 FB | 	rdlong	local01, fp
03eac     08 4E 85 F1 | 	sub	fp, #8
03eb0     A7 1E 62 FC | 	wrlong	local01, fp
03eb4     69 00 00 FF 
03eb8     58 E4 05 F1 | 	add	objptr, ##53848
03ebc     F2 1E 02 FB | 	rdlong	local01, objptr
03ec0     08 4E 05 F1 | 	add	fp, #8
03ec4     A7 1E 62 FC | 	wrlong	local01, fp
03ec8     10 4E 85 F1 | 	sub	fp, #16
03ecc                 | ' 
03ecc                 | ' 
03ecc                 | ' 
03ecc                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
03ecc                 | ' 
03ecc                 | ' lineptr2=searchptr
03ecc                 | ' searchptr=programstart
03ecc                 | ' 
03ecc                 | ' do
03ecc     5D 00 00 FF 
03ed0     98 E5 85 F1 | 	sub	objptr, ##48024
03ed4                 | LR__0325
03ed4     14 4E 05 F1 | 	add	fp, #20
03ed8     A7 12 02 F6 | 	mov	arg01, fp
03edc     04 4E 85 F1 | 	sub	fp, #4
03ee0     A7 14 02 FB | 	rdlong	arg02, fp
03ee4     10 4E 85 F1 | 	sub	fp, #16
03ee8     18 16 06 F6 | 	mov	arg03, #24
03eec     88 11 B1 FD | 	call	#_psram_spin2_read1
03ef0     10 4E 05 F1 | 	add	fp, #16
03ef4     A7 1E 02 FB | 	rdlong	local01, fp
03ef8     08 4E 85 F1 | 	sub	fp, #8
03efc     A7 1E 62 FC | 	wrlong	local01, fp
03f00     20 4E 05 F1 | 	add	fp, #32
03f04     A7 1E 02 FB | 	rdlong	local01, fp
03f08     18 4E 85 F1 | 	sub	fp, #24
03f0c     A7 1E 62 FC | 	wrlong	local01, fp
03f10     04 4E 05 F1 | 	add	fp, #4
03f14     A7 1E 02 FB | 	rdlong	local01, fp
03f18     10 4E 85 F1 | 	sub	fp, #16
03f1c     A7 22 02 FB | 	rdlong	local03, fp
03f20     04 4E 85 F1 | 	sub	fp, #4
03f24     11 1F 12 F2 | 	cmp	local01, local03 wc
03f28     28 4E 05 C1 |  if_b	add	fp, #40
03f2c     A7 20 02 CB |  if_b	rdlong	local02, fp
03f30     28 4E 85 C1 |  if_b	sub	fp, #40
03f34     FF FF 3F CF 
03f38     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03f3c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0325
03f40     0B 00 00 FF 
03f44     C0 E4 85 F1 | 	sub	objptr, ##5824
03f48     00 FA 05 F6 | 	mov	result1, #0
03f4c                 | LR__0326
03f4c     A7 F0 03 F6 | 	mov	ptra, fp
03f50     B2 00 A0 FD | 	call	#popregs_
03f54                 | _deleteline_ret
03f54     2D 00 64 FD | 	ret
03f58                 | 
03f58                 | ' 
03f58                 | ' sub save_line
03f58                 | _save_line
03f58     03 4A 05 F6 | 	mov	COUNT_, #3
03f5c     A8 00 A0 FD | 	call	#pushregs_
03f60     69 00 00 FF 
03f64     50 E4 05 F1 | 	add	objptr, ##53840
03f68     F2 16 02 FB | 	rdlong	arg03, objptr
03f6c     01 16 06 F1 | 	add	arg03, #1
03f70     05 00 00 FF 
03f74     18 E4 85 F1 | 	sub	objptr, ##2584
03f78     F2 14 02 FB | 	rdlong	arg02, objptr
03f7c     0B 15 02 FD | 	qmul	arg02, arg03
03f80     0E 00 00 FF 
03f84     44 E4 85 F1 | 	sub	objptr, ##7236
03f88     F2 12 02 FB | 	rdlong	arg01, objptr
03f8c     55 00 00 FF 
03f90     F4 E5 85 F1 | 	sub	objptr, ##44020
03f94     09 1F 02 F6 | 	mov	local01, arg01
03f98     18 20 62 FD | 	getqx	local02
03f9c     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
03fa0                 | LR__0330
03fa0     0F FB C9 FA | 	rdbyte	result1, local01 wz
03fa4     01 1E 06 51 |  if_ne	add	local01, #1
03fa8     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
03fac                 | LR__0331
03fac     09 1F 82 F1 | 	sub	local01, arg01
03fb0     03 1E CE F7 | 	test	local01, #3 wz
03fb4     02 1E 46 50 |  if_ne	shr	local01, #2
03fb8     01 1E 06 51 |  if_ne	add	local01, #1
03fbc     02 1E 66 50 |  if_ne	shl	local01, #2
03fc0     10 23 02 F6 | 	mov	local03, local02
03fc4     0F 23 02 F1 | 	add	local03, local01
03fc8     62 00 00 FF 
03fcc     30 E4 05 F1 | 	add	objptr, ##50224
03fd0     F2 16 02 FB | 	rdlong	arg03, objptr
03fd4     10 17 02 F1 | 	add	arg03, local02
03fd8     04 00 00 FF 
03fdc     28 E4 05 F1 | 	add	objptr, ##2088
03fe0     F2 16 62 FC | 	wrlong	arg03, objptr
03fe4     04 E4 05 F1 | 	add	objptr, #4
03fe8     F2 1E 62 FC | 	wrlong	local01, objptr
03fec     0C E4 85 F1 | 	sub	objptr, #12
03ff0     F2 12 02 F6 | 	mov	arg01, objptr
03ff4     04 00 00 FF 
03ff8     20 E4 85 F1 | 	sub	objptr, ##2080
03ffc     F2 14 02 FB | 	rdlong	arg02, objptr
04000     10 17 02 F6 | 	mov	arg03, local02
04004     56 00 00 FF 
04008     70 E5 85 F1 | 	sub	objptr, ##44400
0400c     04 11 B1 FD | 	call	#_psram_spin2_write
04010     4A 00 00 FF 
04014     34 E5 05 F1 | 	add	objptr, ##38196
04018     F2 12 02 FB | 	rdlong	arg01, objptr
0401c     0C 00 00 FF 
04020     3C E4 05 F1 | 	add	objptr, ##6204
04024     F2 14 02 FB | 	rdlong	arg02, objptr
04028     10 15 02 F1 | 	add	arg02, local02
0402c     0F 17 02 F6 | 	mov	arg03, local01
04030     56 00 00 FF 
04034     70 E5 85 F1 | 	sub	objptr, ##44400
04038     D8 10 B1 FD | 	call	#_psram_spin2_write
0403c     56 00 00 FF 
04040     70 E5 05 F1 | 	add	objptr, ##44400
04044     F2 1E 02 FB | 	rdlong	local01, objptr
04048     11 1F 02 F1 | 	add	local01, local03
0404c     F2 1E 62 FC | 	wrlong	local01, objptr
04050     62 00 00 FF 
04054     30 E4 85 F1 | 	sub	objptr, ##50224
04058     A7 F0 03 F6 | 	mov	ptra, fp
0405c     B2 00 A0 FD | 	call	#popregs_
04060                 | _save_line_ret
04060     2D 00 64 FD | 	ret
04064                 | 
04064                 | ' 
04064                 | ' 
04064                 | ' function insertline(aline as ulong) as integer
04064                 | _insertline
04064     02 4A 05 F6 | 	mov	COUNT_, #2
04068     A8 00 A0 FD | 	call	#pushregs_
0406c     28 F0 07 F1 | 	add	ptra, #40
04070     04 4E 05 F1 | 	add	fp, #4
04074     A7 12 62 FC | 	wrlong	arg01, fp
04078     69 00 00 FF 
0407c     58 E4 05 F1 | 	add	objptr, ##53848
04080     F2 1E 02 FB | 	rdlong	local01, objptr
04084     04 4E 05 F1 | 	add	fp, #4
04088     A7 1E 62 FC | 	wrlong	local01, fp
0408c     08 4E 85 F1 | 	sub	fp, #8
04090                 | ' 
04090                 | ' do
04090     5D 00 00 FF 
04094     98 E5 85 F1 | 	sub	objptr, ##48024
04098                 | LR__0340
04098     10 4E 05 F1 | 	add	fp, #16
0409c     A7 12 02 F6 | 	mov	arg01, fp
040a0     08 4E 85 F1 | 	sub	fp, #8
040a4     A7 14 02 FB | 	rdlong	arg02, fp
040a8     08 4E 85 F1 | 	sub	fp, #8
040ac     18 16 06 F6 | 	mov	arg03, #24
040b0     C4 0F B1 FD | 	call	#_psram_spin2_read1
040b4     08 4E 05 F1 | 	add	fp, #8
040b8     A7 1E 02 FB | 	rdlong	local01, fp
040bc     04 4E 05 F1 | 	add	fp, #4
040c0     A7 1E 62 FC | 	wrlong	local01, fp
040c4     18 4E 05 F1 | 	add	fp, #24
040c8     A7 1E 02 FB | 	rdlong	local01, fp
040cc     1C 4E 85 F1 | 	sub	fp, #28
040d0     A7 1E 62 FC | 	wrlong	local01, fp
040d4     08 4E 05 F1 | 	add	fp, #8
040d8     A7 1E 02 FB | 	rdlong	local01, fp
040dc     0C 4E 85 F1 | 	sub	fp, #12
040e0     A7 16 02 FB | 	rdlong	arg03, fp
040e4     04 4E 85 F1 | 	sub	fp, #4
040e8     0B 1F 12 F2 | 	cmp	local01, arg03 wc
040ec     24 4E 05 C1 |  if_b	add	fp, #36
040f0     A7 20 02 CB |  if_b	rdlong	local02, fp
040f4     24 4E 85 C1 |  if_b	sub	fp, #36
040f8     FF FF 3F CF 
040fc     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04100     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0340
04104     0B 00 00 FF 
04108     C0 E4 85 F1 | 	sub	objptr, ##5824
0410c                 | ' 
0410c                 | ' if header(0)=aline then return -1 ' delete it first
0410c     10 4E 05 F1 | 	add	fp, #16
04110     A7 1E 02 FB | 	rdlong	local01, fp
04114     0C 4E 85 F1 | 	sub	fp, #12
04118     A7 20 02 FB | 	rdlong	local02, fp
0411c     04 4E 85 F1 | 	sub	fp, #4
04120     10 1F 0A F2 | 	cmp	local01, local02 wz
04124     01 FA 65 A6 |  if_e	neg	result1, #1
04128     74 01 90 AD |  if_e	jmp	#LR__0343
0412c                 | ' if header(0)<aline then return -2 ' end of program reached
0412c     10 4E 05 F1 | 	add	fp, #16
04130     A7 1E 02 FB | 	rdlong	local01, fp
04134     0C 4E 85 F1 | 	sub	fp, #12
04138     A7 16 02 FB | 	rdlong	arg03, fp
0413c     04 4E 85 F1 | 	sub	fp, #4
04140     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04144     02 FA 65 C6 |  if_b	neg	result1, #2
04148     54 01 90 CD |  if_b	jmp	#LR__0343
0414c                 | ' 
0414c                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
0414c     20 4E 05 F1 | 	add	fp, #32
04150     A7 1E 02 FB | 	rdlong	local01, fp
04154     20 4E 85 F1 | 	sub	fp, #32
04158     FF FF 7F FF 
0415c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04160     84 00 90 5D |  if_ne	jmp	#LR__0341
04164     62 00 00 FF 
04168     30 E4 05 F1 | 	add	objptr, ##50224
0416c     F2 1E 02 FB | 	rdlong	local01, objptr
04170     07 00 00 FF 
04174     28 E4 05 F1 | 	add	objptr, ##3624
04178     F2 1E 62 FC | 	wrlong	local01, objptr
0417c     0C 4E 05 F1 | 	add	fp, #12
04180     A7 12 02 FB | 	rdlong	arg01, fp
04184     0C 4E 85 F1 | 	sub	fp, #12
04188     10 12 06 F1 | 	add	arg01, #16
0418c     07 00 00 FF 
04190     28 E4 85 F1 | 	sub	objptr, ##3624
04194     F2 14 02 FB | 	rdlong	arg02, objptr
04198     01 16 06 F6 | 	mov	arg03, #1
0419c     00 18 06 F6 | 	mov	arg04, #0
041a0     56 00 00 FF 
041a4     70 E5 85 F1 | 	sub	objptr, ##44400
041a8                 | '     return fill(addr, pattern, count, listPtr, 4)
041a8     04 1A 06 F6 | 	mov	arg05, #4
041ac     00 10 B1 FD | 	call	#_psram_spin2_fill
041b0     5A 00 00 FF 
041b4     A0 E5 05 F1 | 	add	objptr, ##46496
041b8     FF FF FF FF 
041bc     F2 FE 6B FC | 	wrlong	##-1, objptr
041c0     0C 4E 05 F1 | 	add	fp, #12
041c4     A7 1E 02 FB | 	rdlong	local01, fp
041c8     0C 4E 85 F1 | 	sub	fp, #12
041cc     04 E4 05 F1 | 	add	objptr, #4
041d0     F2 1E 62 FC | 	wrlong	local01, objptr
041d4     66 00 00 FF 
041d8     64 E4 85 F1 | 	sub	objptr, ##52324
041dc     78 FD BF FD | 	call	#_save_line
041e0                 | '   programstart=programptr
041e0                 | '   pslpoke(lineptr2+16,programptr)
041e0                 | '   ucompiledline(4)=$FFFF_FFFF
041e0                 | '   ucompiledline(5)=lineptr2
041e0                 | '   save_line
041e0                 | '   return 0
041e0     00 FA 05 F6 | 	mov	result1, #0
041e4     B8 00 90 FD | 	jmp	#LR__0343
041e8                 | LR__0341
041e8                 | ' 
041e8                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
041e8     20 4E 05 F1 | 	add	fp, #32
041ec     A7 1E 02 FB | 	rdlong	local01, fp
041f0     20 4E 85 F1 | 	sub	fp, #32
041f4     FF FF 7F FF 
041f8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
041fc     9C 00 90 AD |  if_e	jmp	#LR__0342
04200     20 4E 05 F1 | 	add	fp, #32
04204     A7 1E 02 FB | 	rdlong	local01, fp
04208     66 00 00 FF 
0420c     60 E4 05 F1 | 	add	objptr, ##52320
04210     F2 1E 62 FC | 	wrlong	local01, objptr
04214     14 4E 85 F1 | 	sub	fp, #20
04218     A7 1E 02 FB | 	rdlong	local01, fp
0421c     04 E4 05 F1 | 	add	objptr, #4
04220     F2 1E 62 FC | 	wrlong	local01, objptr
04224     A7 12 02 FB | 	rdlong	arg01, fp
04228     0C 4E 85 F1 | 	sub	fp, #12
0422c     10 12 06 F1 | 	add	arg01, #16
04230     04 00 00 FF 
04234     34 E4 85 F1 | 	sub	objptr, ##2100
04238     F2 14 02 FB | 	rdlong	arg02, objptr
0423c     01 16 06 F6 | 	mov	arg03, #1
04240     00 18 06 F6 | 	mov	arg04, #0
04244     56 00 00 FF 
04248     70 E5 85 F1 | 	sub	objptr, ##44400
0424c                 | '     return fill(addr, pattern, count, listPtr, 4)
0424c     04 1A 06 F6 | 	mov	arg05, #4
04250     5C 0F B1 FD | 	call	#_psram_spin2_fill
04254     20 4E 05 F1 | 	add	fp, #32
04258     A7 12 02 FB | 	rdlong	arg01, fp
0425c     20 4E 85 F1 | 	sub	fp, #32
04260     14 12 06 F1 | 	add	arg01, #20
04264     56 00 00 FF 
04268     70 E5 05 F1 | 	add	objptr, ##44400
0426c     F2 14 02 FB | 	rdlong	arg02, objptr
04270     01 16 06 F6 | 	mov	arg03, #1
04274     00 18 06 F6 | 	mov	arg04, #0
04278     56 00 00 FF 
0427c     70 E5 85 F1 | 	sub	objptr, ##44400
04280                 | '     return fill(addr, pattern, count, listPtr, 4)
04280     04 1A 06 F6 | 	mov	arg05, #4
04284     28 0F B1 FD | 	call	#_psram_spin2_fill
04288     0B 00 00 FF 
0428c     C0 E4 85 F1 | 	sub	objptr, ##5824
04290     C4 FC BF FD | 	call	#_save_line
04294                 | '   ucompiledline(4)=header(4)
04294                 | '   ucompiledline(5)=lineptr2
04294                 | '   pslpoke(lineptr2+16,programptr)
04294                 | '   pslpoke(header(4)+20,programptr)
04294                 | '   save_line
04294                 | '   return 0
04294     00 FA 05 F6 | 	mov	result1, #0
04298     04 00 90 FD | 	jmp	#LR__0343
0429c                 | LR__0342
0429c     00 FA 05 F6 | 	mov	result1, #0
042a0                 | LR__0343
042a0     A7 F0 03 F6 | 	mov	ptra, fp
042a4     B2 00 A0 FD | 	call	#popregs_
042a8                 | _insertline_ret
042a8     2D 00 64 FD | 	ret
042ac                 | 
042ac                 | ' 
042ac                 | ' sub add_line_at_end(aline) 
042ac                 | _add_line_at_end
042ac     69 00 00 FF 
042b0     5C E4 05 F1 | 	add	objptr, ##53852
042b4     F2 12 62 FC | 	wrlong	arg01, objptr
042b8     04 E4 05 F1 | 	add	objptr, #4
042bc     F2 14 02 FB | 	rdlong	arg02, objptr
042c0     03 00 00 FF 
042c4     00 E4 85 F1 | 	sub	objptr, ##1536
042c8     F2 14 62 FC | 	wrlong	arg02, objptr
042cc     03 00 00 FF 
042d0     00 E4 05 F1 | 	add	objptr, ##1536
042d4     F2 12 02 FB | 	rdlong	arg01, objptr
042d8     14 12 06 F1 | 	add	arg01, #20
042dc     07 00 00 FF 
042e0     30 E4 85 F1 | 	sub	objptr, ##3632
042e4     F2 14 02 FB | 	rdlong	arg02, objptr
042e8     01 16 06 F6 | 	mov	arg03, #1
042ec     00 18 06 F6 | 	mov	arg04, #0
042f0     56 00 00 FF 
042f4     70 E5 85 F1 | 	sub	objptr, ##44400
042f8                 | '     return fill(addr, pattern, count, listPtr, 4)
042f8     04 1A 06 F6 | 	mov	arg05, #4
042fc     B0 0E B1 FD | 	call	#_psram_spin2_fill
04300     56 00 00 FF 
04304     70 E5 05 F1 | 	add	objptr, ##44400
04308     F2 14 02 FB | 	rdlong	arg02, objptr
0430c     07 00 00 FF 
04310     30 E4 05 F1 | 	add	objptr, ##3632
04314     F2 14 62 FC | 	wrlong	arg02, objptr
04318     02 00 00 FF 
0431c     FC E5 85 F1 | 	sub	objptr, ##1532
04320     FF FF BF FF 
04324     F2 FE 6B FC | 	wrlong	##2147483647, objptr
04328                 | ' 
04328                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
04328                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
04328     04 00 00 FF 
0432c     34 E4 85 F1 | 	sub	objptr, ##2100
04330     F2 14 0A FB | 	rdlong	arg02, objptr wz
04334     62 00 00 FF 
04338     30 E4 85 F1 | 	sub	objptr, ##50224
0433c     66 00 00 AF 
04340     60 E4 05 A1 |  if_e	add	objptr, ##52320
04344     FF FF FF AF 
04348     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
0434c     66 00 00 AF 
04350     60 E4 85 A1 |  if_e	sub	objptr, ##52320
04354     00 FC BF FD | 	call	#_save_line
04358     62 00 00 FF 
0435c     30 E4 05 F1 | 	add	objptr, ##50224
04360     F2 12 02 FB | 	rdlong	arg01, objptr
04364     01 14 66 F6 | 	neg	arg02, #1
04368     01 16 06 F6 | 	mov	arg03, #1
0436c     00 18 06 F6 | 	mov	arg04, #0
04370     56 00 00 FF 
04374     70 E5 85 F1 | 	sub	objptr, ##44400
04378                 | '     return fill(addr, pattern, count, listPtr, 4)
04378     04 1A 06 F6 | 	mov	arg05, #4
0437c     30 0E B1 FD | 	call	#_psram_spin2_fill
04380     0B 00 00 FF 
04384     C0 E4 85 F1 | 	sub	objptr, ##5824
04388                 | _add_line_at_end_ret
04388     2D 00 64 FD | 	ret
0438c                 | 
0438c                 | ' 
0438c                 | ' function compile_immediate(linetype as ulong) as integer
0438c                 | _compile_immediate
0438c     09 4A 05 F6 | 	mov	COUNT_, #9
04390     A8 00 A0 FD | 	call	#pushregs_
04394                 | _compile_immediate_enter
04394     09 25 0A F6 | 	mov	local04, arg01 wz
04398     00 26 06 F6 | 	mov	local05, #0
0439c     00 28 06 F6 | 	mov	local06, #0
043a0                 | ' 
043a0                 | ' ' linetype=cont+1, linetype=0 immediate
043a0                 | ' '  : 1: this is the first part of the line that will continue
043a0                 | ' ' 2 - this is the continuation of the line
043a0                 | ' ' 3 - this is the last continued line
043a0                 | ' ' 4 - this is the one and only part
043a0                 | ' 
043a0                 | ' err=0
043a0                 | ' cmd=0
043a0                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
043a0     30 00 90 5D |  if_ne	jmp	#LR__0350
043a4     53 00 00 FF 
043a8     E4 E5 05 F1 | 	add	objptr, ##42980
043ac     F2 28 02 FB | 	rdlong	local06, objptr
043b0     02 00 00 FF 
043b4     34 E4 05 F1 | 	add	objptr, ##1076
043b8     F2 02 68 FC | 	wrlong	#1, objptr
043bc     00 2A 06 F6 | 	mov	local07, #0
043c0     13 00 00 FF 
043c4     38 E4 05 F1 | 	add	objptr, ##9784
043c8     F2 00 68 FC | 	wrlong	#0, objptr
043cc     69 00 00 FF 
043d0     50 E4 85 F1 | 	sub	objptr, ##53840
043d4                 | LR__0350
043d4                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
043d4     02 24 0E F2 | 	cmp	local04, #2 wz
043d8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
043dc     24 00 90 5D |  if_ne	jmp	#LR__0351
043e0     53 00 00 FF 
043e4     E4 E5 05 F1 | 	add	objptr, ##42980
043e8     F2 28 02 FB | 	rdlong	local06, objptr
043ec     01 2A 06 F6 | 	mov	local07, #1
043f0     02 00 00 FF 
043f4     34 E4 05 F1 | 	add	objptr, ##1076
043f8     F2 02 68 FC | 	wrlong	#1, objptr
043fc     56 00 00 FF 
04400     18 E4 85 F1 | 	sub	objptr, ##44056
04404                 | LR__0351
04404                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
04404     04 24 0E F2 | 	cmp	local04, #4 wz
04408     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
0440c     30 00 90 5D |  if_ne	jmp	#LR__0352
04410     53 00 00 FF 
04414     EC E5 05 F1 | 	add	objptr, ##42988
04418     F2 28 02 FB | 	rdlong	local06, objptr
0441c     02 2A 06 F6 | 	mov	local07, #2
04420     02 00 00 FF 
04424     2C E4 05 F1 | 	add	objptr, ##1068
04428     F2 04 68 FC | 	wrlong	#2, objptr
0442c     13 00 00 FF 
04430     38 E4 05 F1 | 	add	objptr, ##9784
04434     F2 04 68 FC | 	wrlong	#2, objptr
04438     69 00 00 FF 
0443c     50 E4 85 F1 | 	sub	objptr, ##53840
04440                 | LR__0352
04440                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
04440     05 24 0E F2 | 	cmp	local04, #5 wz
04444     40 00 90 5D |  if_ne	jmp	#LR__0353
04448     56 00 00 FF 
0444c     18 E4 05 F1 | 	add	objptr, ##44056
04450     F2 2A 02 FB | 	rdlong	local07, objptr
04454     15 29 02 F6 | 	mov	local06, local07
04458     03 28 66 F0 | 	shl	local06, #3
0445c     02 00 00 FF 
04460     38 E4 85 F1 | 	sub	objptr, ##1080
04464     F2 28 02 F1 | 	add	local06, objptr
04468     04 28 06 F1 | 	add	local06, #4
0446c     14 29 02 FB | 	rdlong	local06, local06
04470     01 2A 06 F1 | 	add	local07, #1
04474     02 00 00 FF 
04478     38 E4 05 F1 | 	add	objptr, ##1080
0447c     F2 2A 62 FC | 	wrlong	local07, objptr
04480     56 00 00 FF 
04484     18 E4 85 F1 | 	sub	objptr, ##44056
04488                 | LR__0353
04488     00 2C 06 F6 | 	mov	local08, #0
0448c                 | ' vars=0
0448c                 | ' 'print  "In compile_immediate cmd=:", cmd
0448c                 | ' 451 select case cmd
0448c     40 28 0E F2 | 	cmp	local06, #64 wz
04490     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
04494     B4 02 90 AD |  if_e	jmp	#LR__0392
04498     4C 28 0E F2 | 	cmp	local06, #76 wz
0449c     3C 01 90 AD |  if_e	jmp	#LR__0354
044a0     73 28 0E F2 | 	cmp	local06, #115 wz
044a4     40 01 90 AD |  if_e	jmp	#LR__0355
044a8     74 28 0E F2 | 	cmp	local06, #116 wz
044ac     44 01 90 AD |  if_e	jmp	#LR__0356
044b0     75 28 0E F2 | 	cmp	local06, #117 wz
044b4     48 01 90 AD |  if_e	jmp	#LR__0357
044b8     4D 28 0E F2 | 	cmp	local06, #77 wz
044bc     8C 02 90 AD |  if_e	jmp	#LR__0392
044c0     42 28 0E F2 | 	cmp	local06, #66 wz
044c4     44 01 90 AD |  if_e	jmp	#LR__0358
044c8     43 28 0E F2 | 	cmp	local06, #67 wz
044cc     48 01 90 AD |  if_e	jmp	#LR__0359
044d0     45 28 0E F2 | 	cmp	local06, #69 wz
044d4     4C 01 90 AD |  if_e	jmp	#LR__0360
044d8     46 28 0E F2 | 	cmp	local06, #70 wz
044dc     50 01 90 AD |  if_e	jmp	#LR__0361
044e0     47 28 0E F2 | 	cmp	local06, #71 wz
044e4     54 01 90 AD |  if_e	jmp	#LR__0362
044e8     48 28 0E F2 | 	cmp	local06, #72 wz
044ec     58 01 90 AD |  if_e	jmp	#LR__0363
044f0     49 28 0E F2 | 	cmp	local06, #73 wz
044f4     5C 01 90 AD |  if_e	jmp	#LR__0364
044f8     44 28 0E F2 | 	cmp	local06, #68 wz
044fc     60 01 90 AD |  if_e	jmp	#LR__0365
04500     4E 28 0E F2 | 	cmp	local06, #78 wz
04504     64 01 90 AD |  if_e	jmp	#LR__0366
04508     50 28 0E F2 | 	cmp	local06, #80 wz
0450c     78 01 90 AD |  if_e	jmp	#LR__0368
04510     51 28 0E F2 | 	cmp	local06, #81 wz
04514     78 01 90 AD |  if_e	jmp	#LR__0369
04518     52 28 0E F2 | 	cmp	local06, #82 wz
0451c     78 01 90 AD |  if_e	jmp	#LR__0370
04520     59 28 0E F2 | 	cmp	local06, #89 wz
04524     78 01 90 AD |  if_e	jmp	#LR__0371
04528     55 28 0E F2 | 	cmp	local06, #85 wz
0452c     78 01 90 AD |  if_e	jmp	#LR__0372
04530     56 28 0E F2 | 	cmp	local06, #86 wz
04534     78 01 90 AD |  if_e	jmp	#LR__0373
04538     57 28 0E F2 | 	cmp	local06, #87 wz
0453c     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
04540     08 02 90 AD |  if_e	jmp	#LR__0392
04544     58 28 0E F2 | 	cmp	local06, #88 wz
04548     6C 01 90 AD |  if_e	jmp	#LR__0374
0454c     4A 28 0E F2 | 	cmp	local06, #74 wz
04550     6C 01 90 AD |  if_e	jmp	#LR__0375
04554     4B 28 0E F2 | 	cmp	local06, #75 wz
04558     6C 01 90 AD |  if_e	jmp	#LR__0376
0455c     5A 28 0E F2 | 	cmp	local06, #90 wz
04560     6C 01 90 AD |  if_e	jmp	#LR__0377
04564     5C 28 0E F2 | 	cmp	local06, #92 wz
04568     6C 01 90 AD |  if_e	jmp	#LR__0378
0456c     5D 28 0E F2 | 	cmp	local06, #93 wz
04570     D8 01 90 AD |  if_e	jmp	#LR__0392
04574     5E 28 0E F2 | 	cmp	local06, #94 wz
04578     68 01 90 AD |  if_e	jmp	#LR__0379
0457c     5F 28 0E F2 | 	cmp	local06, #95 wz
04580     68 01 90 AD |  if_e	jmp	#LR__0380
04584     60 28 0E F2 | 	cmp	local06, #96 wz
04588     68 01 90 AD |  if_e	jmp	#LR__0381
0458c     61 28 0E F2 | 	cmp	local06, #97 wz
04590     68 01 90 AD |  if_e	jmp	#LR__0382
04594     63 28 0E F2 | 	cmp	local06, #99 wz
04598     68 01 90 AD |  if_e	jmp	#LR__0383
0459c     68 28 0E F2 | 	cmp	local06, #104 wz
045a0     68 01 90 AD |  if_e	jmp	#LR__0384
045a4     69 28 0E F2 | 	cmp	local06, #105 wz
045a8     68 01 90 AD |  if_e	jmp	#LR__0385
045ac     6D 28 0E F2 | 	cmp	local06, #109 wz
045b0     68 01 90 AD |  if_e	jmp	#LR__0386
045b4     6C 28 0E F2 | 	cmp	local06, #108 wz
045b8     68 01 90 AD |  if_e	jmp	#LR__0387
045bc     71 28 0E F2 | 	cmp	local06, #113 wz
045c0     68 01 90 AD |  if_e	jmp	#LR__0388
045c4     72 28 0E F2 | 	cmp	local06, #114 wz
045c8     68 01 90 AD |  if_e	jmp	#LR__0389
045cc     01 00 00 FF 
045d0     04 28 0E F2 | 	cmp	local06, ##516 wz
045d4     64 01 90 AD |  if_e	jmp	#LR__0390
045d8     68 01 90 FD | 	jmp	#LR__0391
045dc                 | LR__0354
045dc     D8 10 B0 FD | 	call	#_compile_fun_varp
045e0     FD 2C 02 F6 | 	mov	local08, result1
045e4     64 01 90 FD | 	jmp	#LR__0392
045e8                 | LR__0355
045e8     CC 10 B0 FD | 	call	#_compile_fun_varp
045ec     FD 2C 02 F6 | 	mov	local08, result1
045f0     58 01 90 FD | 	jmp	#LR__0392
045f4                 | LR__0356
045f4     C0 10 B0 FD | 	call	#_compile_fun_varp
045f8     FD 2C 02 F6 | 	mov	local08, result1
045fc     4C 01 90 FD | 	jmp	#LR__0392
04600                 | LR__0357
04600     B4 10 B0 FD | 	call	#_compile_fun_varp
04604     FD 2C 02 F6 | 	mov	local08, result1
04608     40 01 90 FD | 	jmp	#LR__0392
0460c                 | LR__0358
0460c     C8 0C B0 FD | 	call	#_compile_fun_2p
04610     FD 26 02 F6 | 	mov	local05, result1
04614     34 01 90 FD | 	jmp	#LR__0392
04618                 | LR__0359
04618     BC 0C B0 FD | 	call	#_compile_fun_2p
0461c     FD 26 02 F6 | 	mov	local05, result1
04620     28 01 90 FD | 	jmp	#LR__0392
04624                 | LR__0360
04624     24 0D B0 FD | 	call	#_compile_fun_3p
04628     FD 26 02 F6 | 	mov	local05, result1
0462c     1C 01 90 FD | 	jmp	#LR__0392
04630                 | LR__0361
04630     18 0D B0 FD | 	call	#_compile_fun_3p
04634     FD 26 02 F6 | 	mov	local05, result1
04638     10 01 90 FD | 	jmp	#LR__0392
0463c                 | LR__0362
0463c     D8 0D B0 FD | 	call	#_compile_fun_4p
04640     FD 26 02 F6 | 	mov	local05, result1
04644     04 01 90 FD | 	jmp	#LR__0392
04648                 | LR__0363
04648     CC 0D B0 FD | 	call	#_compile_fun_4p
0464c     FD 26 02 F6 | 	mov	local05, result1
04650     F8 00 90 FD | 	jmp	#LR__0392
04654                 | LR__0364
04654     A4 2E B0 FD | 	call	#_expr
04658                 | ' 
04658                 | ' 
04658                 | ' expr()
04658                 | ' return 0
04658     00 26 06 F6 | 	mov	local05, #0
0465c     EC 00 90 FD | 	jmp	#LR__0392
04660                 | LR__0365
04660     80 11 B0 FD | 	call	#_compile_print
04664     FD 26 02 F6 | 	mov	local05, result1
04668     9C 01 90 FD | 	jmp	#LR__0393
0466c                 | LR__0366
0466c     01 24 16 F2 | 	cmp	local04, #1 wc
04670     08 00 90 CD |  if_b	jmp	#LR__0367
04674     24 2B B0 FD | 	call	#_compile_goto
04678     8C 01 90 FD | 	jmp	#LR__0393
0467c                 | LR__0367
0467c     19 12 06 F6 | 	mov	arg01, #25
04680     7C DF B0 FD | 	call	#_printerror
04684     80 01 90 FD | 	jmp	#LR__0393
04688                 | LR__0368
04688     70 2E B0 FD | 	call	#_expr
0468c                 | ' 
0468c                 | ' 
0468c                 | ' expr()
0468c                 | ' return 0
0468c     BC 00 90 FD | 	jmp	#LR__0392
04690                 | LR__0369
04690     68 2E B0 FD | 	call	#_expr
04694                 | ' 
04694                 | ' 
04694                 | ' expr()
04694                 | ' return 0
04694     B4 00 90 FD | 	jmp	#LR__0392
04698                 | LR__0370
04698     60 2E B0 FD | 	call	#_expr
0469c                 | ' 
0469c                 | ' 
0469c                 | ' expr()
0469c                 | ' return 0
0469c     AC 00 90 FD | 	jmp	#LR__0392
046a0                 | LR__0371
046a0     58 2E B0 FD | 	call	#_expr
046a4                 | ' 
046a4                 | ' 
046a4                 | ' expr()
046a4                 | ' return 0
046a4     A4 00 90 FD | 	jmp	#LR__0392
046a8                 | LR__0372
046a8     B8 10 B0 FD | 	call	#_compile_int_fun_2p
046ac     9C 00 90 FD | 	jmp	#LR__0392
046b0                 | LR__0373
046b0     3C 0B B0 FD | 	call	#_compile_converttoint
046b4                 | ' return err
046b4     94 00 90 FD | 	jmp	#LR__0392
046b8                 | LR__0374
046b8     00 18 B0 FD | 	call	#_compile_if
046bc     48 01 90 FD | 	jmp	#LR__0393
046c0                 | LR__0375
046c0     3C 21 B0 FD | 	call	#_compile_for
046c4     40 01 90 FD | 	jmp	#LR__0393
046c8                 | LR__0376
046c8     20 29 B0 FD | 	call	#_compile_next
046cc     38 01 90 FD | 	jmp	#LR__0393
046d0                 | LR__0377
046d0     28 19 B0 FD | 	call	#_compile_else
046d4     30 01 90 FD | 	jmp	#LR__0393
046d8                 | LR__0378
046d8     FC 0B B0 FD | 	call	#_compile_fun_2p
046dc     FD 26 02 F6 | 	mov	local05, result1
046e0     68 00 90 FD | 	jmp	#LR__0392
046e4                 | LR__0379
046e4     14 2E B0 FD | 	call	#_expr
046e8                 | ' 
046e8                 | ' 
046e8                 | ' expr()
046e8                 | ' return 0
046e8     60 00 90 FD | 	jmp	#LR__0392
046ec                 | LR__0380
046ec     0C 2E B0 FD | 	call	#_expr
046f0                 | ' 
046f0                 | ' 
046f0                 | ' expr()
046f0                 | ' return 0
046f0     58 00 90 FD | 	jmp	#LR__0392
046f4                 | LR__0381
046f4     04 2E B0 FD | 	call	#_expr
046f8                 | ' 
046f8                 | ' 
046f8                 | ' expr()
046f8                 | ' return 0
046f8     50 00 90 FD | 	jmp	#LR__0392
046fc                 | LR__0382
046fc     FC 2D B0 FD | 	call	#_expr
04700                 | ' 
04700                 | ' 
04700                 | ' expr()
04700                 | ' return 0
04700     48 00 90 FD | 	jmp	#LR__0392
04704                 | LR__0383
04704     F4 2D B0 FD | 	call	#_expr
04708                 | ' 
04708                 | ' 
04708                 | ' expr()
04708                 | ' return 0
04708     40 00 90 FD | 	jmp	#LR__0392
0470c                 | LR__0384
0470c     EC 2D B0 FD | 	call	#_expr
04710                 | ' 
04710                 | ' 
04710                 | ' expr()
04710                 | ' return 0
04710     38 00 90 FD | 	jmp	#LR__0392
04714                 | LR__0385
04714     E4 2D B0 FD | 	call	#_expr
04718                 | ' 
04718                 | ' 
04718                 | ' expr()
04718                 | ' return 0
04718     30 00 90 FD | 	jmp	#LR__0392
0471c                 | LR__0386
0471c     2C 0C B0 FD | 	call	#_compile_fun_3p
04720     28 00 90 FD | 	jmp	#LR__0392
04724                 | LR__0387
04724     14 0E B0 FD | 	call	#_compile_fun_5p
04728     20 00 90 FD | 	jmp	#LR__0392
0472c                 | LR__0388
0472c     E8 0C B0 FD | 	call	#_compile_fun_4p
04730     18 00 90 FD | 	jmp	#LR__0392
04734                 | LR__0389
04734     EC 19 B0 FD | 	call	#_compile_dim
04738     CC 00 90 FD | 	jmp	#LR__0393
0473c                 | LR__0390
0473c     8C 02 B0 FD | 	call	#_compile_array_assign
04740     C4 00 90 FD | 	jmp	#LR__0393
04744                 | LR__0391
04744     EC 09 B0 FD | 	call	#_compile_unknown
04748     BC 00 90 FD | 	jmp	#LR__0393
0474c                 | LR__0392
0474c     14 23 02 F6 | 	mov	local03, local06
04750     16 1F 02 F6 | 	mov	local01, local08
04754     0F 2B 02 F6 | 	mov	local07, local01
04758     10 2F 02 F6 | 	mov	local09, local02
0475c     11 1F 02 F6 | 	mov	local01, local03
04760     69 00 00 FF 
04764     50 E4 05 F1 | 	add	objptr, ##53840
04768     F2 2C 02 FB | 	rdlong	local08, objptr
0476c     16 29 02 F6 | 	mov	local06, local08
04770     01 28 66 F0 | 	shl	local06, #1
04774     16 29 02 F1 | 	add	local06, local08
04778     02 28 66 F0 | 	shl	local06, #2
0477c     03 00 00 FF 
04780     00 E4 85 F1 | 	sub	objptr, ##1536
04784     F2 28 02 F1 | 	add	local06, objptr
04788     14 2B 62 FC | 	wrlong	local07, local06
0478c     03 00 00 FF 
04790     00 E4 05 F1 | 	add	objptr, ##1536
04794     F2 2C 02 FB | 	rdlong	local08, objptr
04798     16 2B 02 F6 | 	mov	local07, local08
0479c     01 2A 66 F0 | 	shl	local07, #1
047a0     16 2B 02 F1 | 	add	local07, local08
047a4     02 2A 66 F0 | 	shl	local07, #2
047a8     03 00 00 FF 
047ac     00 E4 85 F1 | 	sub	objptr, ##1536
047b0     F2 2A 02 F1 | 	add	local07, objptr
047b4     04 2A 06 F1 | 	add	local07, #4
047b8     15 2F 62 FC | 	wrlong	local09, local07
047bc     03 00 00 FF 
047c0     00 E4 05 F1 | 	add	objptr, ##1536
047c4     F2 2E 02 FB | 	rdlong	local09, objptr
047c8     17 2D 02 F6 | 	mov	local08, local09
047cc     01 2C 66 F0 | 	shl	local08, #1
047d0     17 2D 02 F1 | 	add	local08, local09
047d4     02 2C 66 F0 | 	shl	local08, #2
047d8     03 00 00 FF 
047dc     00 E4 85 F1 | 	sub	objptr, ##1536
047e0     F2 2C 02 F1 | 	add	local08, objptr
047e4     08 2C 06 F1 | 	add	local08, #8
047e8     16 1F 62 FC | 	wrlong	local01, local08
047ec     03 00 00 FF 
047f0     00 E4 05 F1 | 	add	objptr, ##1536
047f4     F2 2A 02 FB | 	rdlong	local07, objptr
047f8     01 2A 06 F1 | 	add	local07, #1
047fc     F2 2A 62 FC | 	wrlong	local07, objptr
04800     69 00 00 FF 
04804     50 E4 85 F1 | 	sub	objptr, ##53840
04808                 | LR__0393
04808                 | ' 
04808                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
04808                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
04808     00 24 0E F2 | 	cmp	local04, #0 wz
0480c     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04810     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04814     38 00 90 5D |  if_ne	jmp	#LR__0394
04818     69 00 00 FF 
0481c     50 E4 05 F1 | 	add	objptr, ##53840
04820     F2 2E 02 FB | 	rdlong	local09, objptr
04824     17 1F 02 F6 | 	mov	local01, local09
04828     01 1E 66 F0 | 	shl	local01, #1
0482c     17 1F 02 F1 | 	add	local01, local09
04830     02 1E 66 F0 | 	shl	local01, #2
04834     03 00 00 FF 
04838     00 E4 85 F1 | 	sub	objptr, ##1536
0483c     F2 1E 02 F1 | 	add	local01, objptr
04840     08 1E 06 F1 | 	add	local01, #8
04844     0F FD 6B FC | 	wrlong	#510, local01
04848     66 00 00 FF 
0484c     50 E4 85 F1 | 	sub	objptr, ##52304
04850                 | LR__0394
04850                 | ' 
04850                 | ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
04850     00 12 06 F6 | 	mov	arg01, #0
04854     C0 68 B1 FD | 	call	#__system___getiolock_0362
04858     FD 12 02 F6 | 	mov	arg01, result1
0485c     04 13 B1 FD | 	call	#__system___lockmem
04860     28 01 00 FF 
04864     58 14 06 F6 | 	mov	arg02, ##@LR__4327
04868     00 12 06 F6 | 	mov	arg01, #0
0486c     00 16 06 F6 | 	mov	arg03, #0
04870     E4 1F B1 FD | 	call	#__system___basic_print_string
04874     00 12 06 F6 | 	mov	arg01, #0
04878     0A 14 06 F6 | 	mov	arg02, #10
0487c     00 16 06 F6 | 	mov	arg03, #0
04880     7C 1F B1 FD | 	call	#__system___basic_print_char
04884     00 12 06 F6 | 	mov	arg01, #0
04888     8C 68 B1 FD | 	call	#__system___getiolock_0362
0488c     FD 00 68 FC | 	wrlong	#0, result1
04890     00 2E 06 F6 | 	mov	local09, #0
04894     69 00 00 FF 
04898     50 E4 05 F1 | 	add	objptr, ##53840
0489c     F2 1E 02 FB | 	rdlong	local01, objptr
048a0     69 00 00 FF 
048a4     50 E4 85 F1 | 	sub	objptr, ##53840
048a8     01 1E 06 F1 | 	add	local01, #1
048ac                 | LR__0395
048ac     0F 2F 52 F2 | 	cmps	local09, local01 wc
048b0     08 01 90 3D |  if_ae	jmp	#LR__0396
048b4     00 12 06 F6 | 	mov	arg01, #0
048b8     5C 68 B1 FD | 	call	#__system___getiolock_0362
048bc     FD 12 02 F6 | 	mov	arg01, result1
048c0     A0 12 B1 FD | 	call	#__system___lockmem
048c4     17 2D 02 F6 | 	mov	local08, local09
048c8     01 2C 66 F0 | 	shl	local08, #1
048cc     17 2D 02 F1 | 	add	local08, local09
048d0     02 2C 66 F0 | 	shl	local08, #2
048d4     66 00 00 FF 
048d8     50 E4 05 F1 | 	add	objptr, ##52304
048dc     F2 2C 02 F1 | 	add	local08, objptr
048e0     08 2C 06 F1 | 	add	local08, #8
048e4     16 15 02 FB | 	rdlong	arg02, local08
048e8     00 12 06 F6 | 	mov	arg01, #0
048ec     00 16 06 F6 | 	mov	arg03, #0
048f0     0A 18 06 F6 | 	mov	arg04, #10
048f4     66 00 00 FF 
048f8     50 E4 85 F1 | 	sub	objptr, ##52304
048fc     DC 1F B1 FD | 	call	#__system___basic_print_unsigned
04900     28 01 00 FF 
04904     6E 14 06 F6 | 	mov	arg02, ##@LR__4328
04908     00 12 06 F6 | 	mov	arg01, #0
0490c     00 16 06 F6 | 	mov	arg03, #0
04910     44 1F B1 FD | 	call	#__system___basic_print_string
04914     17 2D 02 F6 | 	mov	local08, local09
04918     01 2C 66 F0 | 	shl	local08, #1
0491c     17 2D 02 F1 | 	add	local08, local09
04920     02 2C 66 F0 | 	shl	local08, #2
04924     66 00 00 FF 
04928     50 E4 05 F1 | 	add	objptr, ##52304
0492c     F2 2C 02 F1 | 	add	local08, objptr
04930     16 15 02 FB | 	rdlong	arg02, local08
04934     00 12 06 F6 | 	mov	arg01, #0
04938     00 16 06 F6 | 	mov	arg03, #0
0493c     0A 18 06 F6 | 	mov	arg04, #10
04940     66 00 00 FF 
04944     50 E4 85 F1 | 	sub	objptr, ##52304
04948     90 1F B1 FD | 	call	#__system___basic_print_unsigned
0494c     00 12 06 F6 | 	mov	arg01, #0
04950     09 14 06 F6 | 	mov	arg02, #9
04954     00 16 06 F6 | 	mov	arg03, #0
04958     A4 1E B1 FD | 	call	#__system___basic_print_char
0495c     17 2D 02 F6 | 	mov	local08, local09
04960     01 2C 66 F0 | 	shl	local08, #1
04964     17 2D 02 F1 | 	add	local08, local09
04968     02 2C 66 F0 | 	shl	local08, #2
0496c     66 00 00 FF 
04970     50 E4 05 F1 | 	add	objptr, ##52304
04974     F2 2C 02 F1 | 	add	local08, objptr
04978     04 2C 06 F1 | 	add	local08, #4
0497c     16 15 02 FB | 	rdlong	arg02, local08
04980     00 12 06 F6 | 	mov	arg01, #0
04984     00 16 06 F6 | 	mov	arg03, #0
04988     0A 18 06 F6 | 	mov	arg04, #10
0498c     66 00 00 FF 
04990     50 E4 85 F1 | 	sub	objptr, ##52304
04994     44 1F B1 FD | 	call	#__system___basic_print_unsigned
04998     00 12 06 F6 | 	mov	arg01, #0
0499c     0A 14 06 F6 | 	mov	arg02, #10
049a0     00 16 06 F6 | 	mov	arg03, #0
049a4     58 1E B1 FD | 	call	#__system___basic_print_char
049a8     00 12 06 F6 | 	mov	arg01, #0
049ac     68 67 B1 FD | 	call	#__system___getiolock_0362
049b0     FD 00 68 FC | 	wrlong	#0, result1
049b4     01 2E 06 F1 | 	add	local09, #1
049b8     F0 FE 9F FD | 	jmp	#LR__0395
049bc                 | LR__0396
049bc                 | ' return err
049bc     13 FB 01 F6 | 	mov	result1, local05
049c0     A7 F0 03 F6 | 	mov	ptra, fp
049c4     B2 00 A0 FD | 	call	#popregs_
049c8                 | _compile_immediate_ret
049c8     2D 00 64 FD | 	ret
049cc                 | 
049cc                 | ' 
049cc                 | ' sub compile_array_assign
049cc                 | _compile_array_assign
049cc     0A 4A 05 F6 | 	mov	COUNT_, #10
049d0     A8 00 A0 FD | 	call	#pushregs_
049d4     00 24 06 F6 | 	mov	local04, #0
049d8     56 00 00 FF 
049dc     18 E4 05 F1 | 	add	objptr, ##44056
049e0     F2 26 02 FB | 	rdlong	local05, objptr
049e4     13 FB 01 F6 | 	mov	result1, local05
049e8     01 FA 85 F1 | 	sub	result1, #1
049ec     03 FA 65 F0 | 	shl	result1, #3
049f0     02 00 00 FF 
049f4     38 E4 85 F1 | 	sub	objptr, ##1080
049f8     F2 FA 01 F1 | 	add	result1, objptr
049fc     FD 28 02 FB | 	rdlong	local06, result1
04a00                 | ' numpar=0
04a00                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
04a00                 | ' ' todo here: recognize params and t1.result.twowords=numpar
04a00                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
04a00                 | ' if lparts(ct).token=token_lpar then
04a00     03 26 66 F0 | 	shl	local05, #3
04a04     F2 26 02 F1 | 	add	local05, objptr
04a08     04 26 06 F1 | 	add	local05, #4
04a0c     13 27 02 FB | 	rdlong	local05, local05
04a10     15 26 0E F2 | 	cmp	local05, #21 wz
04a14     53 00 00 FF 
04a18     E0 E5 85 F1 | 	sub	objptr, ##42976
04a1c     D4 01 90 5D |  if_ne	jmp	#LR__0404
04a20     56 00 00 FF 
04a24     18 E4 05 F1 | 	add	objptr, ##44056
04a28     F2 2A 02 FB | 	rdlong	local07, objptr
04a2c     01 2A 06 F1 | 	add	local07, #1
04a30     F2 2A 62 FC | 	wrlong	local07, objptr
04a34     56 00 00 FF 
04a38     18 E4 85 F1 | 	sub	objptr, ##44056
04a3c                 | '   ct+=1 											' omit this lpar, this is for expr list
04a3c                 | '   do
04a3c                 | LR__0400
04a3c     BC 2A B0 FD | 	call	#_expr
04a40     56 00 00 FF 
04a44     18 E4 05 F1 | 	add	objptr, ##44056
04a48     F2 26 02 FB | 	rdlong	local05, objptr
04a4c     01 26 06 F1 | 	add	local05, #1
04a50     F2 26 62 FC | 	wrlong	local05, objptr
04a54     01 24 06 F1 | 	add	local04, #1
04a58     01 26 86 F1 | 	sub	local05, #1
04a5c     03 26 66 F0 | 	shl	local05, #3
04a60     02 00 00 FF 
04a64     38 E4 85 F1 | 	sub	objptr, ##1080
04a68     F2 26 02 F1 | 	add	local05, objptr
04a6c     04 26 06 F1 | 	add	local05, #4
04a70     13 2B 02 FB | 	rdlong	local07, local05
04a74     14 2A 0E F2 | 	cmp	local07, #20 wz
04a78     53 00 00 FF 
04a7c     E0 E5 85 F1 | 	sub	objptr, ##42976
04a80     34 00 90 AD |  if_e	jmp	#LR__0401
04a84     56 00 00 FF 
04a88     18 E4 05 F1 | 	add	objptr, ##44056
04a8c     F2 2A 02 FB | 	rdlong	local07, objptr
04a90     03 2A 66 F0 | 	shl	local07, #3
04a94     02 00 00 FF 
04a98     38 E4 85 F1 | 	sub	objptr, ##1080
04a9c     F2 2A 02 F1 | 	add	local07, objptr
04aa0     04 2A 06 F1 | 	add	local07, #4
04aa4     15 2B 02 FB | 	rdlong	local07, local07
04aa8     FE 2B 0E F2 | 	cmp	local07, #510 wz
04aac     53 00 00 FF 
04ab0     E0 E5 85 F1 | 	sub	objptr, ##42976
04ab4     84 FF 9F 5D |  if_ne	jmp	#LR__0400
04ab8                 | LR__0401
04ab8     56 00 00 FF 
04abc     18 E4 05 F1 | 	add	objptr, ##44056
04ac0     F2 2A 02 FB | 	rdlong	local07, objptr
04ac4     01 2A 06 F1 | 	add	local07, #1
04ac8     F2 2A 62 FC | 	wrlong	local07, objptr
04acc     56 00 00 FF 
04ad0     18 E4 85 F1 | 	sub	objptr, ##44056
04ad4     24 2A B0 FD | 	call	#_expr
04ad8     01 2C 66 F6 | 	neg	local08, #1
04adc     00 2E 06 F6 | 	mov	local09, #0
04ae0                 | ' '   print "in array_assign, rpar found, numpar=",numpar
04ae0                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
04ae0                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
04ae0                 | ' ct+=1 : expr()
04ae0                 | ' ' now find the vae
04ae0                 | ' 
04ae0                 | ' j=-1 : i=0 : do : 
04ae0                 | LR__0402
04ae0                 | '   if variables(i).name=varname$ then j=i: exit loop
04ae0     17 27 02 F6 | 	mov	local05, local09
04ae4     04 26 66 F0 | 	shl	local05, #4
04ae8     33 00 00 FF 
04aec     DC E5 05 F1 | 	add	objptr, ##26588
04af0     F2 26 02 F1 | 	add	local05, objptr
04af4     13 13 02 FB | 	rdlong	arg01, local05
04af8     14 15 02 F6 | 	mov	arg02, local06
04afc     33 00 00 FF 
04b00     DC E5 85 F1 | 	sub	objptr, ##26588
04b04     84 10 B1 FD | 	call	#__system___string_cmp
04b08     00 FA 0D F2 | 	cmp	result1, #0 wz
04b0c     17 2D 02 A6 |  if_e	mov	local08, local09
04b10     20 00 90 AD |  if_e	jmp	#LR__0403
04b14     01 2E 06 F1 | 	add	local09, #1
04b18     53 00 00 FF 
04b1c     DC E5 05 F1 | 	add	objptr, ##42972
04b20     F2 2A 02 FB | 	rdlong	local07, objptr
04b24     53 00 00 FF 
04b28     DC E5 85 F1 | 	sub	objptr, ##42972
04b2c     15 2F 5A F2 | 	cmps	local09, local07 wcz
04b30     AC FF 9F ED |  if_be	jmp	#LR__0402
04b34                 | LR__0403
04b34     16 1F 02 F6 | 	mov	local01, local08
04b38     12 21 02 F6 | 	mov	local02, local04
04b3c     17 22 06 F6 | 	mov	local03, #23
04b40     0F 2B 02 F6 | 	mov	local07, local01
04b44     10 31 02 F6 | 	mov	local10, local02
04b48     11 2D 02 F6 | 	mov	local08, local03
04b4c     69 00 00 FF 
04b50     50 E4 05 F1 | 	add	objptr, ##53840
04b54     F2 1E 02 FB | 	rdlong	local01, objptr
04b58     0F 2F 02 F6 | 	mov	local09, local01
04b5c     01 2E 66 F0 | 	shl	local09, #1
04b60     0F 2F 02 F1 | 	add	local09, local01
04b64     02 2E 66 F0 | 	shl	local09, #2
04b68     03 00 00 FF 
04b6c     00 E4 85 F1 | 	sub	objptr, ##1536
04b70     F2 2E 02 F1 | 	add	local09, objptr
04b74     17 2B 62 FC | 	wrlong	local07, local09
04b78     03 00 00 FF 
04b7c     00 E4 05 F1 | 	add	objptr, ##1536
04b80     F2 1E 02 FB | 	rdlong	local01, objptr
04b84     0F 2F 02 F6 | 	mov	local09, local01
04b88     01 2E 66 F0 | 	shl	local09, #1
04b8c     0F 2F 02 F1 | 	add	local09, local01
04b90     02 2E 66 F0 | 	shl	local09, #2
04b94     03 00 00 FF 
04b98     00 E4 85 F1 | 	sub	objptr, ##1536
04b9c     F2 2E 02 F1 | 	add	local09, objptr
04ba0     04 2E 06 F1 | 	add	local09, #4
04ba4     17 31 62 FC | 	wrlong	local10, local09
04ba8     03 00 00 FF 
04bac     00 E4 05 F1 | 	add	objptr, ##1536
04bb0     F2 30 02 FB | 	rdlong	local10, objptr
04bb4     18 1F 02 F6 | 	mov	local01, local10
04bb8     01 1E 66 F0 | 	shl	local01, #1
04bbc     18 1F 02 F1 | 	add	local01, local10
04bc0     02 1E 66 F0 | 	shl	local01, #2
04bc4     03 00 00 FF 
04bc8     00 E4 85 F1 | 	sub	objptr, ##1536
04bcc     F2 1E 02 F1 | 	add	local01, objptr
04bd0     08 1E 06 F1 | 	add	local01, #8
04bd4     0F 2D 62 FC | 	wrlong	local08, local01
04bd8     03 00 00 FF 
04bdc     00 E4 05 F1 | 	add	objptr, ##1536
04be0     F2 2A 02 FB | 	rdlong	local07, objptr
04be4     01 2A 06 F1 | 	add	local07, #1
04be8     F2 2A 62 FC | 	wrlong	local07, objptr
04bec     69 00 00 FF 
04bf0     50 E4 85 F1 | 	sub	objptr, ##53840
04bf4                 | LR__0404
04bf4     A7 F0 03 F6 | 	mov	ptra, fp
04bf8     B2 00 A0 FD | 	call	#popregs_
04bfc                 | _compile_array_assign_ret
04bfc     2D 00 64 FD | 	ret
04c00                 | 
04c00                 | ' 
04c00                 | ' 
04c00                 | ' sub compile_immediate_assign(linetype as ulong)
04c00                 | _compile_immediate_assign
04c00     09 4A 05 F6 | 	mov	COUNT_, #9
04c04     A8 00 A0 FD | 	call	#pushregs_
04c08     09 25 0A F6 | 	mov	local04, arg01 wz
04c0c     FF 22 06 F6 | 	mov	local03, #255
04c10     01 26 66 F6 | 	neg	local05, #1
04c14                 | ' 
04c14                 | ' t1.result_type=result_error : t1.result.uresult=0
04c14                 | ' i=-1: j=-1
04c14                 | ' 
04c14                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
04c14     2C 00 90 5D |  if_ne	jmp	#LR__0410
04c18     53 00 00 FF 
04c1c     E0 E5 05 F1 | 	add	objptr, ##42976
04c20     F2 28 02 FB | 	rdlong	local06, objptr
04c24     02 00 00 FF 
04c28     38 E4 05 F1 | 	add	objptr, ##1080
04c2c     F2 04 68 FC | 	wrlong	#2, objptr
04c30     13 00 00 FF 
04c34     38 E4 05 F1 | 	add	objptr, ##9784
04c38     F2 00 68 FC | 	wrlong	#0, objptr
04c3c     69 00 00 FF 
04c40     50 E4 85 F1 | 	sub	objptr, ##53840
04c44                 | LR__0410
04c44                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
04c44     02 24 0E F2 | 	cmp	local04, #2 wz
04c48     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04c4c     53 00 00 AF 
04c50     E0 E5 05 A1 |  if_e	add	objptr, ##42976
04c54     F2 28 02 AB |  if_e	rdlong	local06, objptr
04c58     02 00 00 AF 
04c5c     38 E4 05 A1 |  if_e	add	objptr, ##1080
04c60     F2 04 68 AC |  if_e	wrlong	#2, objptr
04c64     56 00 00 AF 
04c68     18 E4 85 A1 |  if_e	sub	objptr, ##44056
04c6c                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
04c6c     04 24 0E F2 | 	cmp	local04, #4 wz
04c70     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04c74     2C 00 90 5D |  if_ne	jmp	#LR__0411
04c78     53 00 00 FF 
04c7c     E8 E5 05 F1 | 	add	objptr, ##42984
04c80     F2 28 02 FB | 	rdlong	local06, objptr
04c84     02 00 00 FF 
04c88     30 E4 05 F1 | 	add	objptr, ##1072
04c8c     F2 06 68 FC | 	wrlong	#3, objptr
04c90     13 00 00 FF 
04c94     38 E4 05 F1 | 	add	objptr, ##9784
04c98     F2 04 68 FC | 	wrlong	#2, objptr
04c9c     69 00 00 FF 
04ca0     50 E4 85 F1 | 	sub	objptr, ##53840
04ca4                 | LR__0411
04ca4                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
04ca4     05 24 0E F2 | 	cmp	local04, #5 wz
04ca8     3C 00 90 5D |  if_ne	jmp	#LR__0412
04cac     56 00 00 FF 
04cb0     18 E4 05 F1 | 	add	objptr, ##44056
04cb4     F2 FA 01 FB | 	rdlong	result1, objptr
04cb8     FD 28 02 F6 | 	mov	local06, result1
04cbc     03 28 66 F0 | 	shl	local06, #3
04cc0     02 00 00 FF 
04cc4     38 E4 85 F1 | 	sub	objptr, ##1080
04cc8     F2 28 02 F1 | 	add	local06, objptr
04ccc     14 29 02 FB | 	rdlong	local06, local06
04cd0     02 FA 05 F1 | 	add	result1, #2
04cd4     02 00 00 FF 
04cd8     38 E4 05 F1 | 	add	objptr, ##1080
04cdc     F2 FA 61 FC | 	wrlong	result1, objptr
04ce0     56 00 00 FF 
04ce4     18 E4 85 F1 | 	sub	objptr, ##44056
04ce8                 | LR__0412
04ce8     14 13 02 F6 | 	mov	arg01, local06
04cec     01 14 06 F6 | 	mov	arg02, #1
04cf0     08 2F B1 FD | 	call	#__system__Right_S
04cf4     04 28 B0 FD | 	call	#_expr
04cf8                 | '  
04cf8                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04cf8                 | ' 
04cf8                 | ' suffix2$=right$(varname2$,1)
04cf8                 | ' expr()
04cf8                 | ' 
04cf8                 | ' 
04cf8                 | ' if varnum>0 then
04cf8     53 00 00 FF 
04cfc     DC E5 05 F1 | 	add	objptr, ##42972
04d00     F2 2A 02 FB | 	rdlong	local07, objptr
04d04     53 00 00 FF 
04d08     DC E5 85 F1 | 	sub	objptr, ##42972
04d0c     01 2A 56 F2 | 	cmps	local07, #1 wc
04d10     58 00 90 CD |  if_b	jmp	#LR__0415
04d14                 | '   for i=0 to varnum-1
04d14     00 2C 06 F6 | 	mov	local08, #0
04d18     53 00 00 FF 
04d1c     DC E5 05 F1 | 	add	objptr, ##42972
04d20     F2 2E 02 FB | 	rdlong	local09, objptr
04d24     53 00 00 FF 
04d28     DC E5 85 F1 | 	sub	objptr, ##42972
04d2c                 | LR__0413
04d2c     17 2D 52 F2 | 	cmps	local08, local09 wc
04d30     38 00 90 3D |  if_ae	jmp	#LR__0414
04d34                 | '     if variables(i).name=varname2$ then j=i : exit
04d34     16 2B 02 F6 | 	mov	local07, local08
04d38     04 2A 66 F0 | 	shl	local07, #4
04d3c     33 00 00 FF 
04d40     DC E5 05 F1 | 	add	objptr, ##26588
04d44     F2 2A 02 F1 | 	add	local07, objptr
04d48     15 13 02 FB | 	rdlong	arg01, local07
04d4c     14 15 02 F6 | 	mov	arg02, local06
04d50     33 00 00 FF 
04d54     DC E5 85 F1 | 	sub	objptr, ##26588
04d58     30 0E B1 FD | 	call	#__system___string_cmp
04d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d60     16 27 02 A6 |  if_e	mov	local05, local08
04d64     01 2C 06 51 |  if_ne	add	local08, #1
04d68     C0 FF 9F 5D |  if_ne	jmp	#LR__0413
04d6c                 | LR__0414
04d6c                 | LR__0415
04d6c                 | ' if  j=-1 andalso varnum<maxvars then   
04d6c     FF FF 7F FF 
04d70     FF 27 0E F2 | 	cmp	local05, ##-1 wz
04d74     60 00 90 5D |  if_ne	jmp	#LR__0416
04d78     53 00 00 FF 
04d7c     DC E5 05 F1 | 	add	objptr, ##42972
04d80     F2 2A 02 FB | 	rdlong	local07, objptr
04d84     53 00 00 FF 
04d88     DC E5 85 F1 | 	sub	objptr, ##42972
04d8c     01 00 00 FF 
04d90     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
04d94     40 00 90 3D |  if_ae	jmp	#LR__0416
04d98     53 00 00 FF 
04d9c     DC E5 05 F1 | 	add	objptr, ##42972
04da0     F2 2E 02 FB | 	rdlong	local09, objptr
04da4     04 2E 66 F0 | 	shl	local09, #4
04da8     20 00 00 FF 
04dac     00 E4 85 F1 | 	sub	objptr, ##16384
04db0     F2 2E 02 F1 | 	add	local09, objptr
04db4     17 29 62 FC | 	wrlong	local06, local09
04db8     20 00 00 FF 
04dbc     00 E4 05 F1 | 	add	objptr, ##16384
04dc0     F2 2A 02 FB | 	rdlong	local07, objptr
04dc4     15 27 02 F6 | 	mov	local05, local07
04dc8     01 2A 06 F1 | 	add	local07, #1
04dcc     F2 2A 62 FC | 	wrlong	local07, objptr
04dd0     53 00 00 FF 
04dd4     DC E5 85 F1 | 	sub	objptr, ##42972
04dd8                 | LR__0416
04dd8     13 1F 02 F6 | 	mov	local01, local05
04ddc     17 22 06 F6 | 	mov	local03, #23
04de0     0F 2B 02 F6 | 	mov	local07, local01
04de4     10 2F 02 F6 | 	mov	local09, local02
04de8     11 1F 02 F6 | 	mov	local01, local03
04dec     69 00 00 FF 
04df0     50 E4 05 F1 | 	add	objptr, ##53840
04df4     F2 2C 02 FB | 	rdlong	local08, objptr
04df8     16 29 02 F6 | 	mov	local06, local08
04dfc     01 28 66 F0 | 	shl	local06, #1
04e00     16 29 02 F1 | 	add	local06, local08
04e04     02 28 66 F0 | 	shl	local06, #2
04e08     03 00 00 FF 
04e0c     00 E4 85 F1 | 	sub	objptr, ##1536
04e10     F2 28 02 F1 | 	add	local06, objptr
04e14     14 2B 62 FC | 	wrlong	local07, local06
04e18     03 00 00 FF 
04e1c     00 E4 05 F1 | 	add	objptr, ##1536
04e20     F2 2C 02 FB | 	rdlong	local08, objptr
04e24     16 2B 02 F6 | 	mov	local07, local08
04e28     01 2A 66 F0 | 	shl	local07, #1
04e2c     16 2B 02 F1 | 	add	local07, local08
04e30     02 2A 66 F0 | 	shl	local07, #2
04e34     03 00 00 FF 
04e38     00 E4 85 F1 | 	sub	objptr, ##1536
04e3c     F2 2A 02 F1 | 	add	local07, objptr
04e40     04 2A 06 F1 | 	add	local07, #4
04e44     15 2F 62 FC | 	wrlong	local09, local07
04e48     03 00 00 FF 
04e4c     00 E4 05 F1 | 	add	objptr, ##1536
04e50     F2 2E 02 FB | 	rdlong	local09, objptr
04e54     17 2D 02 F6 | 	mov	local08, local09
04e58     01 2C 66 F0 | 	shl	local08, #1
04e5c     17 2D 02 F1 | 	add	local08, local09
04e60     02 2C 66 F0 | 	shl	local08, #2
04e64     03 00 00 FF 
04e68     00 E4 85 F1 | 	sub	objptr, ##1536
04e6c     F2 2C 02 F1 | 	add	local08, objptr
04e70     08 2C 06 F1 | 	add	local08, #8
04e74     16 1F 62 FC | 	wrlong	local01, local08
04e78     03 00 00 FF 
04e7c     00 E4 05 F1 | 	add	objptr, ##1536
04e80     F2 2A 02 FB | 	rdlong	local07, objptr
04e84     01 2A 06 F1 | 	add	local07, #1
04e88     F2 2A 62 FC | 	wrlong	local07, objptr
04e8c     69 00 00 FF 
04e90     50 E4 85 F1 | 	sub	objptr, ##53840
04e94                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
04e94                 | ' 
04e94                 | ' 
04e94                 | ' 
04e94                 | ' 
04e94                 | ' 
04e94                 | ' 
04e94                 | ' compiledline(lineptr)=t1:  lineptr+=1 
04e94                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
04e94     00 24 0E F2 | 	cmp	local04, #0 wz
04e98     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04e9c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04ea0     38 00 90 5D |  if_ne	jmp	#LR__0417
04ea4     69 00 00 FF 
04ea8     50 E4 05 F1 | 	add	objptr, ##53840
04eac     F2 1E 02 FB | 	rdlong	local01, objptr
04eb0     0F 2F 02 F6 | 	mov	local09, local01
04eb4     01 2E 66 F0 | 	shl	local09, #1
04eb8     0F 2F 02 F1 | 	add	local09, local01
04ebc     02 2E 66 F0 | 	shl	local09, #2
04ec0     03 00 00 FF 
04ec4     00 E4 85 F1 | 	sub	objptr, ##1536
04ec8     F2 2E 02 F1 | 	add	local09, objptr
04ecc     08 2E 06 F1 | 	add	local09, #8
04ed0     17 FD 6B FC | 	wrlong	#510, local09
04ed4     66 00 00 FF 
04ed8     50 E4 85 F1 | 	sub	objptr, ##52304
04edc                 | LR__0417
04edc     A7 F0 03 F6 | 	mov	ptra, fp
04ee0     B2 00 A0 FD | 	call	#popregs_
04ee4                 | _compile_immediate_assign_ret
04ee4     2D 00 64 FD | 	ret
04ee8                 | 
04ee8                 | ' 
04ee8                 | ' ' ------------------ compile the line that is calling a command 
04ee8                 | ' 
04ee8                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
04ee8                 | _compile
04ee8     04 4A 05 F6 | 	mov	COUNT_, #4
04eec     A8 00 A0 FD | 	call	#pushregs_
04ef0     09 1F 0A F6 | 	mov	local01, arg01 wz
04ef4     0A 21 02 F6 | 	mov	local02, arg02
04ef8     0B 23 02 F6 | 	mov	local03, arg03
04efc                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
04efc                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
04efc                 | '  
04efc                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
04efc                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
04efc     0C 00 90 5D |  if_ne	jmp	#LR__0420
04f00     00 12 06 F6 | 	mov	arg01, #0
04f04     84 F4 BF FD | 	call	#_compile_immediate
04f08     A0 00 90 FD | 	jmp	#LR__0427
04f0c                 | LR__0420
04f0c     66 00 00 FF 
04f10     50 E4 05 F1 | 	add	objptr, ##52304
04f14     F2 1E 62 FC | 	wrlong	local01, objptr
04f18     04 E4 05 F1 | 	add	objptr, #4
04f1c     F2 20 62 FC | 	wrlong	local02, objptr
04f20     66 00 00 FF 
04f24     54 E4 85 F1 | 	sub	objptr, ##52308
04f28     11 13 02 F6 | 	mov	arg01, local03
04f2c     01 12 06 F1 | 	add	arg01, #1
04f30     58 F4 BF FD | 	call	#_compile_immediate
04f34     FD 24 0A F6 | 	mov	local04, result1 wz
04f38                 | ' 
04f38                 | ' ucompiledline(0)=alinemajor
04f38                 | ' ucompiledline(1)=alineminor
04f38                 | ' 
04f38                 | ' 
04f38                 | ' ' cont: 0: this is the first part of the line that will continue
04f38                 | ' ' 1 - this is the continuation of the line
04f38                 | ' ' 2 - this is the last continued line
04f38                 | ' ' 3 - this is the ome and only part
04f38                 | ' 
04f38                 | ' 
04f38                 | ' err=compile_immediate(cont+1) 
04f38                 | ' if err=0 then
04f38     6C 00 90 5D |  if_ne	jmp	#LR__0426
04f3c                 | '   if cont=3 orelse cont=2 then 
04f3c     03 22 0E F2 | 	cmp	local03, #3 wz
04f40     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04f44     60 00 90 5D |  if_ne	jmp	#LR__0425
04f48                 | '     if alinemajor >lastline then 
04f48     69 00 00 FF 
04f4c     5C E4 05 F1 | 	add	objptr, ##53852
04f50     F2 16 02 FB | 	rdlong	arg03, objptr
04f54     69 00 00 FF 
04f58     5C E4 85 F1 | 	sub	objptr, ##53852
04f5c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04f60     0C 00 90 ED |  if_be	jmp	#LR__0421
04f64     0F 13 02 F6 | 	mov	arg01, local01
04f68     40 F3 BF FD | 	call	#_add_line_at_end
04f6c     38 00 90 FD | 	jmp	#LR__0424
04f70                 | LR__0421
04f70     0F 13 02 F6 | 	mov	arg01, local01
04f74     C0 EB BF FD | 	call	#_deleteline
04f78                 | '       deleteline(alinemajor)  
04f78                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
04f78     69 00 00 FF 
04f7c     5C E4 05 F1 | 	add	objptr, ##53852
04f80     F2 16 02 FB | 	rdlong	arg03, objptr
04f84     69 00 00 FF 
04f88     5C E4 85 F1 | 	sub	objptr, ##53852
04f8c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04f90     0C 00 90 ED |  if_be	jmp	#LR__0422
04f94     0F 13 02 F6 | 	mov	arg01, local01
04f98     10 F3 BF FD | 	call	#_add_line_at_end
04f9c     08 00 90 FD | 	jmp	#LR__0423
04fa0                 | LR__0422
04fa0     0F 13 02 F6 | 	mov	arg01, local01
04fa4     BC F0 BF FD | 	call	#_insertline
04fa8                 | LR__0423
04fa8                 | LR__0424
04fa8                 | LR__0425
04fa8                 | LR__0426
04fa8                 | ' return err
04fa8     12 FB 01 F6 | 	mov	result1, local04
04fac                 | LR__0427
04fac     A7 F0 03 F6 | 	mov	ptra, fp
04fb0     B2 00 A0 FD | 	call	#popregs_
04fb4                 | _compile_ret
04fb4     2D 00 64 FD | 	ret
04fb8                 | 
04fb8                 | ' 
04fb8                 | ' ' ------------------ compile the line that is assigning to a variable
04fb8                 | ' 
04fb8                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
04fb8                 | _compile_assign
04fb8     03 4A 05 F6 | 	mov	COUNT_, #3
04fbc     A8 00 A0 FD | 	call	#pushregs_
04fc0     09 1F 0A F6 | 	mov	local01, arg01 wz
04fc4     0A 21 02 F6 | 	mov	local02, arg02
04fc8     0B 23 02 F6 | 	mov	local03, arg03
04fcc                 | ' 
04fcc                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
04fcc                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
04fcc     0C 00 90 5D |  if_ne	jmp	#LR__0430
04fd0     00 12 06 F6 | 	mov	arg01, #0
04fd4     28 FC BF FD | 	call	#_compile_immediate_assign
04fd8     94 00 90 FD | 	jmp	#LR__0436
04fdc                 | LR__0430
04fdc     66 00 00 FF 
04fe0     50 E4 05 F1 | 	add	objptr, ##52304
04fe4     F2 1E 62 FC | 	wrlong	local01, objptr
04fe8     04 E4 05 F1 | 	add	objptr, #4
04fec     F2 20 62 FC | 	wrlong	local02, objptr
04ff0     66 00 00 FF 
04ff4     54 E4 85 F1 | 	sub	objptr, ##52308
04ff8     11 13 02 F6 | 	mov	arg01, local03
04ffc     01 12 06 F1 | 	add	arg01, #1
05000     FC FB BF FD | 	call	#_compile_immediate_assign
05004                 | ' 
05004                 | ' ucompiledline(0)=alinemajor
05004                 | ' ucompiledline(1)=alineminor
05004                 | ' 
05004                 | ' compile_immediate_assign(cont+1) 
05004                 | ' 
05004                 | ' if cont=3 orelse cont=2 then 
05004     03 22 0E F2 | 	cmp	local03, #3 wz
05008     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
0500c     60 00 90 5D |  if_ne	jmp	#LR__0435
05010                 | '   if alinemajor >lastline then 
05010     69 00 00 FF 
05014     5C E4 05 F1 | 	add	objptr, ##53852
05018     F2 16 02 FB | 	rdlong	arg03, objptr
0501c     69 00 00 FF 
05020     5C E4 85 F1 | 	sub	objptr, ##53852
05024     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05028     0C 00 90 ED |  if_be	jmp	#LR__0431
0502c     0F 13 02 F6 | 	mov	arg01, local01
05030     78 F2 BF FD | 	call	#_add_line_at_end
05034     38 00 90 FD | 	jmp	#LR__0434
05038                 | LR__0431
05038     0F 13 02 F6 | 	mov	arg01, local01
0503c     F8 EA BF FD | 	call	#_deleteline
05040                 | '     deleteline(alinemajor)  
05040                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
05040     69 00 00 FF 
05044     5C E4 05 F1 | 	add	objptr, ##53852
05048     F2 16 02 FB | 	rdlong	arg03, objptr
0504c     69 00 00 FF 
05050     5C E4 85 F1 | 	sub	objptr, ##53852
05054     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05058     0C 00 90 ED |  if_be	jmp	#LR__0432
0505c     0F 13 02 F6 | 	mov	arg01, local01
05060     48 F2 BF FD | 	call	#_add_line_at_end
05064     08 00 90 FD | 	jmp	#LR__0433
05068                 | LR__0432
05068     0F 13 02 F6 | 	mov	arg01, local01
0506c     F4 EF BF FD | 	call	#_insertline
05070                 | LR__0433
05070                 | LR__0434
05070                 | LR__0435
05070                 | LR__0436
05070     A7 F0 03 F6 | 	mov	ptra, fp
05074     B2 00 A0 FD | 	call	#popregs_
05078                 | _compile_assign_ret
05078     2D 00 64 FD | 	ret
0507c                 | 
0507c                 | ' 
0507c                 | ' sub compile_error(errno)
0507c                 | _compile_error
0507c     FF 04 06 F6 | 	mov	_var03, #255
05080     01 07 02 F6 | 	mov	_var04, _var02
05084     02 09 02 F6 | 	mov	_var05, _var03
05088     69 00 00 FF 
0508c     50 E4 05 F1 | 	add	objptr, ##53840
05090     F2 0A 02 FB | 	rdlong	_var06, objptr
05094     05 0D 02 F6 | 	mov	_var07, _var06
05098     01 0C 66 F0 | 	shl	_var07, #1
0509c     05 0D 02 F1 | 	add	_var07, _var06
050a0     02 0C 66 F0 | 	shl	_var07, #2
050a4     03 00 00 FF 
050a8     00 E4 85 F1 | 	sub	objptr, ##1536
050ac     F2 0C 02 F1 | 	add	_var07, objptr
050b0     06 13 62 FC | 	wrlong	arg01, _var07
050b4     03 00 00 FF 
050b8     00 E4 05 F1 | 	add	objptr, ##1536
050bc     F2 0C 02 FB | 	rdlong	_var07, objptr
050c0     06 0B 02 F6 | 	mov	_var06, _var07
050c4     01 0A 66 F0 | 	shl	_var06, #1
050c8     06 0B 02 F1 | 	add	_var06, _var07
050cc     02 0A 66 F0 | 	shl	_var06, #2
050d0     03 00 00 FF 
050d4     00 E4 85 F1 | 	sub	objptr, ##1536
050d8     F2 0A 02 F1 | 	add	_var06, objptr
050dc     04 0A 06 F1 | 	add	_var06, #4
050e0     05 07 62 FC | 	wrlong	_var04, _var06
050e4     03 00 00 FF 
050e8     00 E4 05 F1 | 	add	objptr, ##1536
050ec     F2 0C 02 FB | 	rdlong	_var07, objptr
050f0     06 0B 02 F6 | 	mov	_var06, _var07
050f4     01 0A 66 F0 | 	shl	_var06, #1
050f8     06 0B 02 F1 | 	add	_var06, _var07
050fc     02 0A 66 F0 | 	shl	_var06, #2
05100     03 00 00 FF 
05104     00 E4 85 F1 | 	sub	objptr, ##1536
05108     F2 0A 02 F1 | 	add	_var06, objptr
0510c     08 0A 06 F1 | 	add	_var06, #8
05110     05 09 62 FC | 	wrlong	_var05, _var06
05114     03 00 00 FF 
05118     00 E4 05 F1 | 	add	objptr, ##1536
0511c     F2 12 02 FB | 	rdlong	arg01, objptr
05120     01 12 06 F1 | 	add	arg01, #1
05124     F2 12 62 FC | 	wrlong	arg01, objptr
05128     69 00 00 FF 
0512c     50 E4 85 F1 | 	sub	objptr, ##53840
05130                 | _compile_error_ret
05130     2D 00 64 FD | 	ret
05134                 | 
05134                 | ' 
05134                 | ' 
05134                 | ' sub compile_unknown() 
05134                 | _compile_unknown
05134     FF 04 06 F6 | 	mov	_var03, #255
05138     17 00 06 F6 | 	mov	_var01, #23
0513c     01 07 02 F6 | 	mov	_var04, _var02
05140     02 01 02 F6 | 	mov	_var01, _var03
05144     69 00 00 FF 
05148     50 E4 05 F1 | 	add	objptr, ##53840
0514c     F2 08 02 FB | 	rdlong	_var05, objptr
05150     04 0B 02 F6 | 	mov	_var06, _var05
05154     01 0A 66 F0 | 	shl	_var06, #1
05158     04 0B 02 F1 | 	add	_var06, _var05
0515c     02 0A 66 F0 | 	shl	_var06, #2
05160     03 00 00 FF 
05164     00 E4 85 F1 | 	sub	objptr, ##1536
05168     F2 0A 02 F1 | 	add	_var06, objptr
0516c     05 2F 68 FC | 	wrlong	#23, _var06
05170     03 00 00 FF 
05174     00 E4 05 F1 | 	add	objptr, ##1536
05178     F2 0A 02 FB | 	rdlong	_var06, objptr
0517c     05 09 02 F6 | 	mov	_var05, _var06
05180     01 08 66 F0 | 	shl	_var05, #1
05184     05 09 02 F1 | 	add	_var05, _var06
05188     02 08 66 F0 | 	shl	_var05, #2
0518c     03 00 00 FF 
05190     00 E4 85 F1 | 	sub	objptr, ##1536
05194     F2 08 02 F1 | 	add	_var05, objptr
05198     04 08 06 F1 | 	add	_var05, #4
0519c     04 07 62 FC | 	wrlong	_var04, _var05
051a0     03 00 00 FF 
051a4     00 E4 05 F1 | 	add	objptr, ##1536
051a8     F2 0A 02 FB | 	rdlong	_var06, objptr
051ac     05 09 02 F6 | 	mov	_var05, _var06
051b0     01 08 66 F0 | 	shl	_var05, #1
051b4     05 09 02 F1 | 	add	_var05, _var06
051b8     02 08 66 F0 | 	shl	_var05, #2
051bc     03 00 00 FF 
051c0     00 E4 85 F1 | 	sub	objptr, ##1536
051c4     F2 08 02 F1 | 	add	_var05, objptr
051c8     08 08 06 F1 | 	add	_var05, #8
051cc     04 01 62 FC | 	wrlong	_var01, _var05
051d0     03 00 00 FF 
051d4     00 E4 05 F1 | 	add	objptr, ##1536
051d8     F2 0A 02 FB | 	rdlong	_var06, objptr
051dc     01 0A 06 F1 | 	add	_var06, #1
051e0     F2 0A 62 FC | 	wrlong	_var06, objptr
051e4     69 00 00 FF 
051e8     50 E4 85 F1 | 	sub	objptr, ##53840
051ec                 | _compile_unknown_ret
051ec     2D 00 64 FD | 	ret
051f0                 | 
051f0                 | ' 
051f0                 | ' function compile_converttoint() as integer
051f0                 | _compile_converttoint
051f0     06 4A 05 F6 | 	mov	COUNT_, #6
051f4     A8 00 A0 FD | 	call	#pushregs_
051f8     00 1E 06 F6 | 	mov	local01, #0
051fc     FC 22 B0 FD | 	call	#_expr
05200     FD 24 0A F6 | 	mov	local04, result1 wz
05204                 | ' err=0
05204                 | ' t1.result.uresult=0
05204                 | ' err=expr()
05204                 | ' if err=0 then
05204     C0 00 90 5D |  if_ne	jmp	#LR__0440
05208     16 22 06 F6 | 	mov	local03, #22
0520c     0F 27 02 F6 | 	mov	local05, local01
05210     10 29 02 F6 | 	mov	local06, local02
05214     11 25 02 F6 | 	mov	local04, local03
05218     69 00 00 FF 
0521c     50 E4 05 F1 | 	add	objptr, ##53840
05220     F2 1E 02 FB | 	rdlong	local01, objptr
05224     0F FB 01 F6 | 	mov	result1, local01
05228     01 FA 65 F0 | 	shl	result1, #1
0522c     0F FB 01 F1 | 	add	result1, local01
05230     02 FA 65 F0 | 	shl	result1, #2
05234     03 00 00 FF 
05238     00 E4 85 F1 | 	sub	objptr, ##1536
0523c     F2 FA 01 F1 | 	add	result1, objptr
05240     FD 26 62 FC | 	wrlong	local05, result1
05244     03 00 00 FF 
05248     00 E4 05 F1 | 	add	objptr, ##1536
0524c     F2 26 02 FB | 	rdlong	local05, objptr
05250     13 1F 02 F6 | 	mov	local01, local05
05254     01 1E 66 F0 | 	shl	local01, #1
05258     13 1F 02 F1 | 	add	local01, local05
0525c     02 1E 66 F0 | 	shl	local01, #2
05260     03 00 00 FF 
05264     00 E4 85 F1 | 	sub	objptr, ##1536
05268     F2 1E 02 F1 | 	add	local01, objptr
0526c     04 1E 06 F1 | 	add	local01, #4
05270     0F 29 62 FC | 	wrlong	local06, local01
05274     03 00 00 FF 
05278     00 E4 05 F1 | 	add	objptr, ##1536
0527c     F2 28 02 FB | 	rdlong	local06, objptr
05280     14 27 02 F6 | 	mov	local05, local06
05284     01 26 66 F0 | 	shl	local05, #1
05288     14 27 02 F1 | 	add	local05, local06
0528c     02 26 66 F0 | 	shl	local05, #2
05290     03 00 00 FF 
05294     00 E4 85 F1 | 	sub	objptr, ##1536
05298     F2 26 02 F1 | 	add	local05, objptr
0529c     08 26 06 F1 | 	add	local05, #8
052a0     13 25 62 FC | 	wrlong	local04, local05
052a4     03 00 00 FF 
052a8     00 E4 05 F1 | 	add	objptr, ##1536
052ac     F2 26 02 FB | 	rdlong	local05, objptr
052b0     01 26 06 F1 | 	add	local05, #1
052b4     F2 26 62 FC | 	wrlong	local05, objptr
052b8     69 00 00 FF 
052bc     50 E4 85 F1 | 	sub	objptr, ##53840
052c0                 | '   t1.result_type=fun_converttoint
052c0                 | '   compiledline(lineptr)=t1: lineptr+=1 
052c0                 | '   return 0
052c0     00 FA 05 F6 | 	mov	result1, #0
052c4     04 00 90 FD | 	jmp	#LR__0441
052c8                 | LR__0440
052c8                 | '   return err
052c8     12 FB 01 F6 | 	mov	result1, local04
052cc                 | LR__0441
052cc     A7 F0 03 F6 | 	mov	ptra, fp
052d0     B2 00 A0 FD | 	call	#popregs_
052d4                 | _compile_converttoint_ret
052d4     2D 00 64 FD | 	ret
052d8                 | 
052d8                 | ' 
052d8                 | ' 
052d8                 | ' function compile_fun_2p() as ulong
052d8                 | _compile_fun_2p
052d8     01 4A 05 F6 | 	mov	COUNT_, #1
052dc     A8 00 A0 FD | 	call	#pushregs_
052e0     18 22 B0 FD | 	call	#_expr
052e4                 | ' 
052e4                 | ' expr()
052e4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
052e4     56 00 00 FF 
052e8     18 E4 05 F1 | 	add	objptr, ##44056
052ec     F2 1E 02 FB | 	rdlong	local01, objptr
052f0     03 1E 66 F0 | 	shl	local01, #3
052f4     02 00 00 FF 
052f8     38 E4 85 F1 | 	sub	objptr, ##1080
052fc     F2 1E 02 F1 | 	add	local01, objptr
05300     04 1E 06 F1 | 	add	local01, #4
05304     0F 1F 02 FB | 	rdlong	local01, local01
05308     11 1E 0E F2 | 	cmp	local01, #17 wz
0530c     53 00 00 FF 
05310     E0 E5 85 F1 | 	sub	objptr, ##42976
05314     15 FA 05 56 |  if_ne	mov	result1, #21
05318     24 00 90 5D |  if_ne	jmp	#LR__0450
0531c     56 00 00 FF 
05320     18 E4 05 F1 | 	add	objptr, ##44056
05324     F2 1E 02 FB | 	rdlong	local01, objptr
05328     01 1E 06 F1 | 	add	local01, #1
0532c     F2 1E 62 FC | 	wrlong	local01, objptr
05330     56 00 00 FF 
05334     18 E4 85 F1 | 	sub	objptr, ##44056
05338     C0 21 B0 FD | 	call	#_expr
0533c     00 FA 05 F6 | 	mov	result1, #0
05340                 | LR__0450
05340     A7 F0 03 F6 | 	mov	ptra, fp
05344     B2 00 A0 FD | 	call	#popregs_
05348                 | _compile_fun_2p_ret
05348     2D 00 64 FD | 	ret
0534c                 | 
0534c                 | ' 
0534c                 | ' function compile_fun_3p() as ulong
0534c                 | _compile_fun_3p
0534c     01 4A 05 F6 | 	mov	COUNT_, #1
05350     A8 00 A0 FD | 	call	#pushregs_
05354     A4 21 B0 FD | 	call	#_expr
05358                 | ' 
05358                 | ' expr()
05358                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05358     56 00 00 FF 
0535c     18 E4 05 F1 | 	add	objptr, ##44056
05360     F2 1E 02 FB | 	rdlong	local01, objptr
05364     03 1E 66 F0 | 	shl	local01, #3
05368     02 00 00 FF 
0536c     38 E4 85 F1 | 	sub	objptr, ##1080
05370     F2 1E 02 F1 | 	add	local01, objptr
05374     04 1E 06 F1 | 	add	local01, #4
05378     0F 1F 02 FB | 	rdlong	local01, local01
0537c     11 1E 0E F2 | 	cmp	local01, #17 wz
05380     53 00 00 FF 
05384     E0 E5 85 F1 | 	sub	objptr, ##42976
05388     15 FA 05 56 |  if_ne	mov	result1, #21
0538c     7C 00 90 5D |  if_ne	jmp	#LR__0460
05390     56 00 00 FF 
05394     18 E4 05 F1 | 	add	objptr, ##44056
05398     F2 1E 02 FB | 	rdlong	local01, objptr
0539c     01 1E 06 F1 | 	add	local01, #1
053a0     F2 1E 62 FC | 	wrlong	local01, objptr
053a4     56 00 00 FF 
053a8     18 E4 85 F1 | 	sub	objptr, ##44056
053ac     4C 21 B0 FD | 	call	#_expr
053b0                 | ' expr()
053b0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
053b0     56 00 00 FF 
053b4     18 E4 05 F1 | 	add	objptr, ##44056
053b8     F2 1E 02 FB | 	rdlong	local01, objptr
053bc     03 1E 66 F0 | 	shl	local01, #3
053c0     02 00 00 FF 
053c4     38 E4 85 F1 | 	sub	objptr, ##1080
053c8     F2 1E 02 F1 | 	add	local01, objptr
053cc     04 1E 06 F1 | 	add	local01, #4
053d0     0F 1F 02 FB | 	rdlong	local01, local01
053d4     11 1E 0E F2 | 	cmp	local01, #17 wz
053d8     53 00 00 FF 
053dc     E0 E5 85 F1 | 	sub	objptr, ##42976
053e0     15 FA 05 56 |  if_ne	mov	result1, #21
053e4     24 00 90 5D |  if_ne	jmp	#LR__0460
053e8     56 00 00 FF 
053ec     18 E4 05 F1 | 	add	objptr, ##44056
053f0     F2 1E 02 FB | 	rdlong	local01, objptr
053f4     01 1E 06 F1 | 	add	local01, #1
053f8     F2 1E 62 FC | 	wrlong	local01, objptr
053fc     56 00 00 FF 
05400     18 E4 85 F1 | 	sub	objptr, ##44056
05404     F4 20 B0 FD | 	call	#_expr
05408     00 FA 05 F6 | 	mov	result1, #0
0540c                 | LR__0460
0540c     A7 F0 03 F6 | 	mov	ptra, fp
05410     B2 00 A0 FD | 	call	#popregs_
05414                 | _compile_fun_3p_ret
05414     2D 00 64 FD | 	ret
05418                 | 
05418                 | ' 
05418                 | ' function compile_fun_4p() as ulong
05418                 | _compile_fun_4p
05418     01 4A 05 F6 | 	mov	COUNT_, #1
0541c     A8 00 A0 FD | 	call	#pushregs_
05420     D8 20 B0 FD | 	call	#_expr
05424                 | ' 
05424                 | ' expr()
05424                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05424     56 00 00 FF 
05428     18 E4 05 F1 | 	add	objptr, ##44056
0542c     F2 1E 02 FB | 	rdlong	local01, objptr
05430     03 1E 66 F0 | 	shl	local01, #3
05434     02 00 00 FF 
05438     38 E4 85 F1 | 	sub	objptr, ##1080
0543c     F2 1E 02 F1 | 	add	local01, objptr
05440     04 1E 06 F1 | 	add	local01, #4
05444     0F 1F 02 FB | 	rdlong	local01, local01
05448     11 1E 0E F2 | 	cmp	local01, #17 wz
0544c     53 00 00 FF 
05450     E0 E5 85 F1 | 	sub	objptr, ##42976
05454     15 FA 05 56 |  if_ne	mov	result1, #21
05458     D4 00 90 5D |  if_ne	jmp	#LR__0470
0545c     56 00 00 FF 
05460     18 E4 05 F1 | 	add	objptr, ##44056
05464     F2 1E 02 FB | 	rdlong	local01, objptr
05468     01 1E 06 F1 | 	add	local01, #1
0546c     F2 1E 62 FC | 	wrlong	local01, objptr
05470     56 00 00 FF 
05474     18 E4 85 F1 | 	sub	objptr, ##44056
05478     80 20 B0 FD | 	call	#_expr
0547c                 | ' expr()
0547c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0547c     56 00 00 FF 
05480     18 E4 05 F1 | 	add	objptr, ##44056
05484     F2 1E 02 FB | 	rdlong	local01, objptr
05488     03 1E 66 F0 | 	shl	local01, #3
0548c     02 00 00 FF 
05490     38 E4 85 F1 | 	sub	objptr, ##1080
05494     F2 1E 02 F1 | 	add	local01, objptr
05498     04 1E 06 F1 | 	add	local01, #4
0549c     0F 1F 02 FB | 	rdlong	local01, local01
054a0     11 1E 0E F2 | 	cmp	local01, #17 wz
054a4     53 00 00 FF 
054a8     E0 E5 85 F1 | 	sub	objptr, ##42976
054ac     15 FA 05 56 |  if_ne	mov	result1, #21
054b0     7C 00 90 5D |  if_ne	jmp	#LR__0470
054b4     56 00 00 FF 
054b8     18 E4 05 F1 | 	add	objptr, ##44056
054bc     F2 1E 02 FB | 	rdlong	local01, objptr
054c0     01 1E 06 F1 | 	add	local01, #1
054c4     F2 1E 62 FC | 	wrlong	local01, objptr
054c8     56 00 00 FF 
054cc     18 E4 85 F1 | 	sub	objptr, ##44056
054d0     28 20 B0 FD | 	call	#_expr
054d4                 | ' expr()
054d4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
054d4     56 00 00 FF 
054d8     18 E4 05 F1 | 	add	objptr, ##44056
054dc     F2 1E 02 FB | 	rdlong	local01, objptr
054e0     03 1E 66 F0 | 	shl	local01, #3
054e4     02 00 00 FF 
054e8     38 E4 85 F1 | 	sub	objptr, ##1080
054ec     F2 1E 02 F1 | 	add	local01, objptr
054f0     04 1E 06 F1 | 	add	local01, #4
054f4     0F 1F 02 FB | 	rdlong	local01, local01
054f8     11 1E 0E F2 | 	cmp	local01, #17 wz
054fc     53 00 00 FF 
05500     E0 E5 85 F1 | 	sub	objptr, ##42976
05504     15 FA 05 56 |  if_ne	mov	result1, #21
05508     24 00 90 5D |  if_ne	jmp	#LR__0470
0550c     56 00 00 FF 
05510     18 E4 05 F1 | 	add	objptr, ##44056
05514     F2 1E 02 FB | 	rdlong	local01, objptr
05518     01 1E 06 F1 | 	add	local01, #1
0551c     F2 1E 62 FC | 	wrlong	local01, objptr
05520     56 00 00 FF 
05524     18 E4 85 F1 | 	sub	objptr, ##44056
05528     D0 1F B0 FD | 	call	#_expr
0552c     00 FA 05 F6 | 	mov	result1, #0
05530                 | LR__0470
05530     A7 F0 03 F6 | 	mov	ptra, fp
05534     B2 00 A0 FD | 	call	#popregs_
05538                 | _compile_fun_4p_ret
05538     2D 00 64 FD | 	ret
0553c                 | 
0553c                 | ' 
0553c                 | ' 
0553c                 | ' function compile_fun_5p() as ulong
0553c                 | _compile_fun_5p
0553c     01 4A 05 F6 | 	mov	COUNT_, #1
05540     A8 00 A0 FD | 	call	#pushregs_
05544     B4 1F B0 FD | 	call	#_expr
05548                 | ' 
05548                 | ' expr()
05548                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05548     56 00 00 FF 
0554c     18 E4 05 F1 | 	add	objptr, ##44056
05550     F2 1E 02 FB | 	rdlong	local01, objptr
05554     03 1E 66 F0 | 	shl	local01, #3
05558     02 00 00 FF 
0555c     38 E4 85 F1 | 	sub	objptr, ##1080
05560     F2 1E 02 F1 | 	add	local01, objptr
05564     04 1E 06 F1 | 	add	local01, #4
05568     0F 1F 02 FB | 	rdlong	local01, local01
0556c     11 1E 0E F2 | 	cmp	local01, #17 wz
05570     53 00 00 FF 
05574     E0 E5 85 F1 | 	sub	objptr, ##42976
05578     15 FA 05 56 |  if_ne	mov	result1, #21
0557c     2C 01 90 5D |  if_ne	jmp	#LR__0480
05580     56 00 00 FF 
05584     18 E4 05 F1 | 	add	objptr, ##44056
05588     F2 1E 02 FB | 	rdlong	local01, objptr
0558c     01 1E 06 F1 | 	add	local01, #1
05590     F2 1E 62 FC | 	wrlong	local01, objptr
05594     56 00 00 FF 
05598     18 E4 85 F1 | 	sub	objptr, ##44056
0559c     5C 1F B0 FD | 	call	#_expr
055a0                 | ' expr()
055a0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
055a0     56 00 00 FF 
055a4     18 E4 05 F1 | 	add	objptr, ##44056
055a8     F2 1E 02 FB | 	rdlong	local01, objptr
055ac     03 1E 66 F0 | 	shl	local01, #3
055b0     02 00 00 FF 
055b4     38 E4 85 F1 | 	sub	objptr, ##1080
055b8     F2 1E 02 F1 | 	add	local01, objptr
055bc     04 1E 06 F1 | 	add	local01, #4
055c0     0F 1F 02 FB | 	rdlong	local01, local01
055c4     11 1E 0E F2 | 	cmp	local01, #17 wz
055c8     53 00 00 FF 
055cc     E0 E5 85 F1 | 	sub	objptr, ##42976
055d0     15 FA 05 56 |  if_ne	mov	result1, #21
055d4     D4 00 90 5D |  if_ne	jmp	#LR__0480
055d8     56 00 00 FF 
055dc     18 E4 05 F1 | 	add	objptr, ##44056
055e0     F2 1E 02 FB | 	rdlong	local01, objptr
055e4     01 1E 06 F1 | 	add	local01, #1
055e8     F2 1E 62 FC | 	wrlong	local01, objptr
055ec     56 00 00 FF 
055f0     18 E4 85 F1 | 	sub	objptr, ##44056
055f4     04 1F B0 FD | 	call	#_expr
055f8                 | ' expr()
055f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
055f8     56 00 00 FF 
055fc     18 E4 05 F1 | 	add	objptr, ##44056
05600     F2 1E 02 FB | 	rdlong	local01, objptr
05604     03 1E 66 F0 | 	shl	local01, #3
05608     02 00 00 FF 
0560c     38 E4 85 F1 | 	sub	objptr, ##1080
05610     F2 1E 02 F1 | 	add	local01, objptr
05614     04 1E 06 F1 | 	add	local01, #4
05618     0F 1F 02 FB | 	rdlong	local01, local01
0561c     11 1E 0E F2 | 	cmp	local01, #17 wz
05620     53 00 00 FF 
05624     E0 E5 85 F1 | 	sub	objptr, ##42976
05628     15 FA 05 56 |  if_ne	mov	result1, #21
0562c     7C 00 90 5D |  if_ne	jmp	#LR__0480
05630     56 00 00 FF 
05634     18 E4 05 F1 | 	add	objptr, ##44056
05638     F2 1E 02 FB | 	rdlong	local01, objptr
0563c     01 1E 06 F1 | 	add	local01, #1
05640     F2 1E 62 FC | 	wrlong	local01, objptr
05644     56 00 00 FF 
05648     18 E4 85 F1 | 	sub	objptr, ##44056
0564c     AC 1E B0 FD | 	call	#_expr
05650                 | ' expr()
05650                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05650     56 00 00 FF 
05654     18 E4 05 F1 | 	add	objptr, ##44056
05658     F2 1E 02 FB | 	rdlong	local01, objptr
0565c     03 1E 66 F0 | 	shl	local01, #3
05660     02 00 00 FF 
05664     38 E4 85 F1 | 	sub	objptr, ##1080
05668     F2 1E 02 F1 | 	add	local01, objptr
0566c     04 1E 06 F1 | 	add	local01, #4
05670     0F 1F 02 FB | 	rdlong	local01, local01
05674     11 1E 0E F2 | 	cmp	local01, #17 wz
05678     53 00 00 FF 
0567c     E0 E5 85 F1 | 	sub	objptr, ##42976
05680     15 FA 05 56 |  if_ne	mov	result1, #21
05684     24 00 90 5D |  if_ne	jmp	#LR__0480
05688     56 00 00 FF 
0568c     18 E4 05 F1 | 	add	objptr, ##44056
05690     F2 1E 02 FB | 	rdlong	local01, objptr
05694     01 1E 06 F1 | 	add	local01, #1
05698     F2 1E 62 FC | 	wrlong	local01, objptr
0569c     56 00 00 FF 
056a0     18 E4 85 F1 | 	sub	objptr, ##44056
056a4     54 1E B0 FD | 	call	#_expr
056a8     00 FA 05 F6 | 	mov	result1, #0
056ac                 | LR__0480
056ac     A7 F0 03 F6 | 	mov	ptra, fp
056b0     B2 00 A0 FD | 	call	#popregs_
056b4                 | _compile_fun_5p_ret
056b4     2D 00 64 FD | 	ret
056b8                 | 
056b8                 | ' 
056b8                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
056b8                 | _compile_fun_varp
056b8     02 4A 05 F6 | 	mov	COUNT_, #2
056bc     A8 00 A0 FD | 	call	#pushregs_
056c0     00 1E 06 F6 | 	mov	local01, #0
056c4                 | ' i=0
056c4                 | ' if lparts(ct).token<>token_end then
056c4     56 00 00 FF 
056c8     18 E4 05 F1 | 	add	objptr, ##44056
056cc     F2 20 02 FB | 	rdlong	local02, objptr
056d0     03 20 66 F0 | 	shl	local02, #3
056d4     02 00 00 FF 
056d8     38 E4 85 F1 | 	sub	objptr, ##1080
056dc     F2 20 02 F1 | 	add	local02, objptr
056e0     04 20 06 F1 | 	add	local02, #4
056e4     10 21 02 FB | 	rdlong	local02, local02
056e8     FE 21 0E F2 | 	cmp	local02, #510 wz
056ec     53 00 00 FF 
056f0     E0 E5 85 F1 | 	sub	objptr, ##42976
056f4     5C 00 90 AD |  if_e	jmp	#LR__0492
056f8                 | '   do
056f8                 | LR__0490
056f8     00 1E B0 FD | 	call	#_expr
056fc     01 1E 06 F1 | 	add	local01, #1
05700                 | '   expr()
05700                 | '    i+=1
05700                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
05700     56 00 00 FF 
05704     18 E4 05 F1 | 	add	objptr, ##44056
05708     F2 20 02 FB | 	rdlong	local02, objptr
0570c     03 20 66 F0 | 	shl	local02, #3
05710     02 00 00 FF 
05714     38 E4 85 F1 | 	sub	objptr, ##1080
05718     F2 20 02 F1 | 	add	local02, objptr
0571c     04 20 06 F1 | 	add	local02, #4
05720     10 21 02 FB | 	rdlong	local02, local02
05724     11 20 0E F2 | 	cmp	local02, #17 wz
05728     53 00 00 FF 
0572c     E0 E5 85 F1 | 	sub	objptr, ##42976
05730     20 00 90 5D |  if_ne	jmp	#LR__0491
05734     56 00 00 FF 
05738     18 E4 05 F1 | 	add	objptr, ##44056
0573c     F2 20 02 FB | 	rdlong	local02, objptr
05740     01 20 06 F1 | 	add	local02, #1
05744     F2 20 62 FC | 	wrlong	local02, objptr
05748     56 00 00 FF 
0574c     18 E4 85 F1 | 	sub	objptr, ##44056
05750     A4 FF 9F FD | 	jmp	#LR__0490
05754                 | LR__0491
05754                 | LR__0492
05754                 | ' return i
05754     0F FB 01 F6 | 	mov	result1, local01
05758     A7 F0 03 F6 | 	mov	ptra, fp
0575c     B2 00 A0 FD | 	call	#popregs_
05760                 | _compile_fun_varp_ret
05760     2D 00 64 FD | 	ret
05764                 | 
05764                 | ' 
05764                 | ' 
05764                 | ' function compile_int_fun_2p() as ulong
05764                 | _compile_int_fun_2p
05764     01 4A 05 F6 | 	mov	COUNT_, #1
05768     A8 00 A0 FD | 	call	#pushregs_
0576c     80 FA BF FD | 	call	#_compile_converttoint
05770     FD 1E 02 F6 | 	mov	local01, result1
05774                 | ' err=compile_converttoint() : if err>0 then return err
05774     01 1E 56 F2 | 	cmps	local01, #1 wc
05778     0F FB 01 36 |  if_ae	mov	result1, local01
0577c     58 00 90 3D |  if_ae	jmp	#LR__0500
05780                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05780     56 00 00 FF 
05784     18 E4 05 F1 | 	add	objptr, ##44056
05788     F2 1E 02 FB | 	rdlong	local01, objptr
0578c     03 1E 66 F0 | 	shl	local01, #3
05790     02 00 00 FF 
05794     38 E4 85 F1 | 	sub	objptr, ##1080
05798     F2 1E 02 F1 | 	add	local01, objptr
0579c     04 1E 06 F1 | 	add	local01, #4
057a0     0F 1F 02 FB | 	rdlong	local01, local01
057a4     11 1E 0E F2 | 	cmp	local01, #17 wz
057a8     53 00 00 FF 
057ac     E0 E5 85 F1 | 	sub	objptr, ##42976
057b0     15 FA 05 56 |  if_ne	mov	result1, #21
057b4     20 00 90 5D |  if_ne	jmp	#LR__0500
057b8     56 00 00 FF 
057bc     18 E4 05 F1 | 	add	objptr, ##44056
057c0     F2 1E 02 FB | 	rdlong	local01, objptr
057c4     01 1E 06 F1 | 	add	local01, #1
057c8     F2 1E 62 FC | 	wrlong	local01, objptr
057cc     56 00 00 FF 
057d0     18 E4 85 F1 | 	sub	objptr, ##44056
057d4     18 FA BF FD | 	call	#_compile_converttoint
057d8                 | ' err=compile_converttoint() 
057d8                 | ' return err
057d8                 | LR__0500
057d8     A7 F0 03 F6 | 	mov	ptra, fp
057dc     B2 00 A0 FD | 	call	#popregs_
057e0                 | _compile_int_fun_2p_ret
057e0     2D 00 64 FD | 	ret
057e4                 | 
057e4                 | ' 
057e4                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
057e4                 | _compile_print
057e4     0B 4A 05 F6 | 	mov	COUNT_, #11
057e8     A8 00 A0 FD | 	call	#pushregs_
057ec     00 1E 06 F6 | 	mov	local01, #0
057f0     1D 22 06 F6 | 	mov	local03, #29
057f4                 | ' t1.result.uresult=0 : t1.result_type=result_uint
057f4                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
057f4     56 00 00 FF 
057f8     18 E4 05 F1 | 	add	objptr, ##44056
057fc     F2 24 02 FB | 	rdlong	local04, objptr
05800     03 24 66 F0 | 	shl	local04, #3
05804     02 00 00 FF 
05808     38 E4 85 F1 | 	sub	objptr, ##1080
0580c     F2 24 02 F1 | 	add	local04, objptr
05810     04 24 06 F1 | 	add	local04, #4
05814     12 25 02 FB | 	rdlong	local04, local04
05818     FE 25 0E F2 | 	cmp	local04, #510 wz
0581c     53 00 00 FF 
05820     E0 E5 85 F1 | 	sub	objptr, ##42976
05824     68 01 90 5D |  if_ne	jmp	#LR__0510
05828     20 22 06 F6 | 	mov	local03, #32
0582c     0F 27 02 F6 | 	mov	local05, local01
05830     10 29 02 F6 | 	mov	local06, local02
05834     11 2B 02 F6 | 	mov	local07, local03
05838     69 00 00 FF 
0583c     50 E4 05 F1 | 	add	objptr, ##53840
05840     F2 2C 02 FB | 	rdlong	local08, objptr
05844     16 2F 02 F6 | 	mov	local09, local08
05848     01 2E 66 F0 | 	shl	local09, #1
0584c     16 2F 02 F1 | 	add	local09, local08
05850     02 2E 66 F0 | 	shl	local09, #2
05854     03 00 00 FF 
05858     00 E4 85 F1 | 	sub	objptr, ##1536
0585c     F2 2E 02 F1 | 	add	local09, objptr
05860     17 27 62 FC | 	wrlong	local05, local09
05864     03 00 00 FF 
05868     00 E4 05 F1 | 	add	objptr, ##1536
0586c     F2 26 02 FB | 	rdlong	local05, objptr
05870     13 31 02 F6 | 	mov	local10, local05
05874     01 30 66 F0 | 	shl	local10, #1
05878     13 31 02 F1 | 	add	local10, local05
0587c     02 30 66 F0 | 	shl	local10, #2
05880     03 00 00 FF 
05884     00 E4 85 F1 | 	sub	objptr, ##1536
05888     F2 30 02 F1 | 	add	local10, objptr
0588c     04 30 06 F1 | 	add	local10, #4
05890     18 29 62 FC | 	wrlong	local06, local10
05894     03 00 00 FF 
05898     00 E4 05 F1 | 	add	objptr, ##1536
0589c     F2 26 02 FB | 	rdlong	local05, objptr
058a0     13 33 02 F6 | 	mov	local11, local05
058a4     01 32 66 F0 | 	shl	local11, #1
058a8     13 33 02 F1 | 	add	local11, local05
058ac     02 32 66 F0 | 	shl	local11, #2
058b0     03 00 00 FF 
058b4     00 E4 85 F1 | 	sub	objptr, ##1536
058b8     F2 32 02 F1 | 	add	local11, objptr
058bc     08 32 06 F1 | 	add	local11, #8
058c0     19 2B 62 FC | 	wrlong	local07, local11
058c4     03 00 00 FF 
058c8     00 E4 05 F1 | 	add	objptr, ##1536
058cc     F2 26 02 FB | 	rdlong	local05, objptr
058d0     01 26 06 F1 | 	add	local05, #1
058d4     F2 26 62 FC | 	wrlong	local05, objptr
058d8     44 22 06 F6 | 	mov	local03, #68
058dc     0F 27 02 F6 | 	mov	local05, local01
058e0     10 29 02 F6 | 	mov	local06, local02
058e4     11 2B 02 F6 | 	mov	local07, local03
058e8     F2 2C 02 FB | 	rdlong	local08, objptr
058ec     16 2F 02 F6 | 	mov	local09, local08
058f0     01 2E 66 F0 | 	shl	local09, #1
058f4     16 2F 02 F1 | 	add	local09, local08
058f8     02 2E 66 F0 | 	shl	local09, #2
058fc     03 00 00 FF 
05900     00 E4 85 F1 | 	sub	objptr, ##1536
05904     F2 2E 02 F1 | 	add	local09, objptr
05908     17 27 62 FC | 	wrlong	local05, local09
0590c     03 00 00 FF 
05910     00 E4 05 F1 | 	add	objptr, ##1536
05914     F2 32 02 FB | 	rdlong	local11, objptr
05918     19 31 02 F6 | 	mov	local10, local11
0591c     01 30 66 F0 | 	shl	local10, #1
05920     19 31 02 F1 | 	add	local10, local11
05924     02 30 66 F0 | 	shl	local10, #2
05928     03 00 00 FF 
0592c     00 E4 85 F1 | 	sub	objptr, ##1536
05930     F2 30 02 F1 | 	add	local10, objptr
05934     04 30 06 F1 | 	add	local10, #4
05938     18 29 62 FC | 	wrlong	local06, local10
0593c     03 00 00 FF 
05940     00 E4 05 F1 | 	add	objptr, ##1536
05944     F2 30 02 FB | 	rdlong	local10, objptr
05948     18 33 02 F6 | 	mov	local11, local10
0594c     01 32 66 F0 | 	shl	local11, #1
05950     18 33 02 F1 | 	add	local11, local10
05954     02 32 66 F0 | 	shl	local11, #2
05958     03 00 00 FF 
0595c     00 E4 85 F1 | 	sub	objptr, ##1536
05960     F2 32 02 F1 | 	add	local11, objptr
05964     08 32 06 F1 | 	add	local11, #8
05968     19 2B 62 FC | 	wrlong	local07, local11
0596c     03 00 00 FF 
05970     00 E4 05 F1 | 	add	objptr, ##1536
05974     F2 26 02 FB | 	rdlong	local05, objptr
05978     01 26 06 F1 | 	add	local05, #1
0597c     F2 26 62 FC | 	wrlong	local05, objptr
05980     69 00 00 FF 
05984     50 E4 85 F1 | 	sub	objptr, ##53840
05988     00 FA 05 F6 | 	mov	result1, #0
0598c     20 05 90 FD | 	jmp	#LR__0517
05990                 | LR__0510
05990                 | ' do
05990                 | LR__0511
05990     68 1B B0 FD | 	call	#_expr
05994                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
05994                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05994     56 00 00 FF 
05998     18 E4 05 F1 | 	add	objptr, ##44056
0599c     F2 24 02 FB | 	rdlong	local04, objptr
059a0     03 24 66 F0 | 	shl	local04, #3
059a4     02 00 00 FF 
059a8     38 E4 85 F1 | 	sub	objptr, ##1080
059ac     F2 24 02 F1 | 	add	local04, objptr
059b0     04 24 06 F1 | 	add	local04, #4
059b4     12 2D 02 FB | 	rdlong	local08, local04
059b8     11 2C 0E F2 | 	cmp	local08, #17 wz
059bc     53 00 00 FF 
059c0     E0 E5 85 F1 | 	sub	objptr, ##42976
059c4     60 01 90 5D |  if_ne	jmp	#LR__0512
059c8     21 22 06 F6 | 	mov	local03, #33
059cc     0F 27 02 F6 | 	mov	local05, local01
059d0     10 29 02 F6 | 	mov	local06, local02
059d4     11 2B 02 F6 | 	mov	local07, local03
059d8     69 00 00 FF 
059dc     50 E4 05 F1 | 	add	objptr, ##53840
059e0     F2 2C 02 FB | 	rdlong	local08, objptr
059e4     16 2F 02 F6 | 	mov	local09, local08
059e8     01 2E 66 F0 | 	shl	local09, #1
059ec     16 2F 02 F1 | 	add	local09, local08
059f0     02 2E 66 F0 | 	shl	local09, #2
059f4     03 00 00 FF 
059f8     00 E4 85 F1 | 	sub	objptr, ##1536
059fc     F2 2E 02 F1 | 	add	local09, objptr
05a00     17 27 62 FC | 	wrlong	local05, local09
05a04     03 00 00 FF 
05a08     00 E4 05 F1 | 	add	objptr, ##1536
05a0c     F2 32 02 FB | 	rdlong	local11, objptr
05a10     19 31 02 F6 | 	mov	local10, local11
05a14     01 30 66 F0 | 	shl	local10, #1
05a18     19 31 02 F1 | 	add	local10, local11
05a1c     02 30 66 F0 | 	shl	local10, #2
05a20     03 00 00 FF 
05a24     00 E4 85 F1 | 	sub	objptr, ##1536
05a28     F2 30 02 F1 | 	add	local10, objptr
05a2c     04 30 06 F1 | 	add	local10, #4
05a30     18 29 62 FC | 	wrlong	local06, local10
05a34     03 00 00 FF 
05a38     00 E4 05 F1 | 	add	objptr, ##1536
05a3c     F2 26 02 FB | 	rdlong	local05, objptr
05a40     13 33 02 F6 | 	mov	local11, local05
05a44     01 32 66 F0 | 	shl	local11, #1
05a48     13 33 02 F1 | 	add	local11, local05
05a4c     02 32 66 F0 | 	shl	local11, #2
05a50     03 00 00 FF 
05a54     00 E4 85 F1 | 	sub	objptr, ##1536
05a58     F2 32 02 F1 | 	add	local11, objptr
05a5c     08 32 06 F1 | 	add	local11, #8
05a60     19 2B 62 FC | 	wrlong	local07, local11
05a64     03 00 00 FF 
05a68     00 E4 05 F1 | 	add	objptr, ##1536
05a6c     F2 26 02 FB | 	rdlong	local05, objptr
05a70     01 26 06 F1 | 	add	local05, #1
05a74     F2 26 62 FC | 	wrlong	local05, objptr
05a78     44 22 06 F6 | 	mov	local03, #68
05a7c     0F 27 02 F6 | 	mov	local05, local01
05a80     10 29 02 F6 | 	mov	local06, local02
05a84     11 2B 02 F6 | 	mov	local07, local03
05a88     F2 2C 02 FB | 	rdlong	local08, objptr
05a8c     16 2F 02 F6 | 	mov	local09, local08
05a90     01 2E 66 F0 | 	shl	local09, #1
05a94     16 2F 02 F1 | 	add	local09, local08
05a98     02 2E 66 F0 | 	shl	local09, #2
05a9c     03 00 00 FF 
05aa0     00 E4 85 F1 | 	sub	objptr, ##1536
05aa4     F2 2E 02 F1 | 	add	local09, objptr
05aa8     17 27 62 FC | 	wrlong	local05, local09
05aac     03 00 00 FF 
05ab0     00 E4 05 F1 | 	add	objptr, ##1536
05ab4     F2 32 02 FB | 	rdlong	local11, objptr
05ab8     19 31 02 F6 | 	mov	local10, local11
05abc     01 30 66 F0 | 	shl	local10, #1
05ac0     19 31 02 F1 | 	add	local10, local11
05ac4     02 30 66 F0 | 	shl	local10, #2
05ac8     03 00 00 FF 
05acc     00 E4 85 F1 | 	sub	objptr, ##1536
05ad0     F2 30 02 F1 | 	add	local10, objptr
05ad4     04 30 06 F1 | 	add	local10, #4
05ad8     18 29 62 FC | 	wrlong	local06, local10
05adc     03 00 00 FF 
05ae0     00 E4 05 F1 | 	add	objptr, ##1536
05ae4     F2 30 02 FB | 	rdlong	local10, objptr
05ae8     18 33 02 F6 | 	mov	local11, local10
05aec     01 32 66 F0 | 	shl	local11, #1
05af0     18 33 02 F1 | 	add	local11, local10
05af4     02 32 66 F0 | 	shl	local11, #2
05af8     03 00 00 FF 
05afc     00 E4 85 F1 | 	sub	objptr, ##1536
05b00     F2 32 02 F1 | 	add	local11, objptr
05b04     08 32 06 F1 | 	add	local11, #8
05b08     19 2B 62 FC | 	wrlong	local07, local11
05b0c     03 00 00 FF 
05b10     00 E4 05 F1 | 	add	objptr, ##1536
05b14     F2 26 02 FB | 	rdlong	local05, objptr
05b18     01 26 06 F1 | 	add	local05, #1
05b1c     F2 26 62 FC | 	wrlong	local05, objptr
05b20     69 00 00 FF 
05b24     50 E4 85 F1 | 	sub	objptr, ##53840
05b28                 | LR__0512
05b28                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05b28     56 00 00 FF 
05b2c     18 E4 05 F1 | 	add	objptr, ##44056
05b30     F2 24 02 FB | 	rdlong	local04, objptr
05b34     03 24 66 F0 | 	shl	local04, #3
05b38     02 00 00 FF 
05b3c     38 E4 85 F1 | 	sub	objptr, ##1080
05b40     F2 24 02 F1 | 	add	local04, objptr
05b44     04 24 06 F1 | 	add	local04, #4
05b48     12 2D 02 FB | 	rdlong	local08, local04
05b4c     12 2C 0E F2 | 	cmp	local08, #18 wz
05b50     53 00 00 FF 
05b54     E0 E5 85 F1 | 	sub	objptr, ##42976
05b58     60 01 90 5D |  if_ne	jmp	#LR__0513
05b5c     22 22 06 F6 | 	mov	local03, #34
05b60     0F 27 02 F6 | 	mov	local05, local01
05b64     10 29 02 F6 | 	mov	local06, local02
05b68     11 2B 02 F6 | 	mov	local07, local03
05b6c     69 00 00 FF 
05b70     50 E4 05 F1 | 	add	objptr, ##53840
05b74     F2 2C 02 FB | 	rdlong	local08, objptr
05b78     16 2F 02 F6 | 	mov	local09, local08
05b7c     01 2E 66 F0 | 	shl	local09, #1
05b80     16 2F 02 F1 | 	add	local09, local08
05b84     02 2E 66 F0 | 	shl	local09, #2
05b88     03 00 00 FF 
05b8c     00 E4 85 F1 | 	sub	objptr, ##1536
05b90     F2 2E 02 F1 | 	add	local09, objptr
05b94     17 27 62 FC | 	wrlong	local05, local09
05b98     03 00 00 FF 
05b9c     00 E4 05 F1 | 	add	objptr, ##1536
05ba0     F2 32 02 FB | 	rdlong	local11, objptr
05ba4     19 31 02 F6 | 	mov	local10, local11
05ba8     01 30 66 F0 | 	shl	local10, #1
05bac     19 31 02 F1 | 	add	local10, local11
05bb0     02 30 66 F0 | 	shl	local10, #2
05bb4     03 00 00 FF 
05bb8     00 E4 85 F1 | 	sub	objptr, ##1536
05bbc     F2 30 02 F1 | 	add	local10, objptr
05bc0     04 30 06 F1 | 	add	local10, #4
05bc4     18 29 62 FC | 	wrlong	local06, local10
05bc8     03 00 00 FF 
05bcc     00 E4 05 F1 | 	add	objptr, ##1536
05bd0     F2 26 02 FB | 	rdlong	local05, objptr
05bd4     13 33 02 F6 | 	mov	local11, local05
05bd8     01 32 66 F0 | 	shl	local11, #1
05bdc     13 33 02 F1 | 	add	local11, local05
05be0     02 32 66 F0 | 	shl	local11, #2
05be4     03 00 00 FF 
05be8     00 E4 85 F1 | 	sub	objptr, ##1536
05bec     F2 32 02 F1 | 	add	local11, objptr
05bf0     08 32 06 F1 | 	add	local11, #8
05bf4     19 2B 62 FC | 	wrlong	local07, local11
05bf8     03 00 00 FF 
05bfc     00 E4 05 F1 | 	add	objptr, ##1536
05c00     F2 26 02 FB | 	rdlong	local05, objptr
05c04     01 26 06 F1 | 	add	local05, #1
05c08     F2 26 62 FC | 	wrlong	local05, objptr
05c0c     44 22 06 F6 | 	mov	local03, #68
05c10     0F 27 02 F6 | 	mov	local05, local01
05c14     10 29 02 F6 | 	mov	local06, local02
05c18     11 2B 02 F6 | 	mov	local07, local03
05c1c     F2 2C 02 FB | 	rdlong	local08, objptr
05c20     16 2F 02 F6 | 	mov	local09, local08
05c24     01 2E 66 F0 | 	shl	local09, #1
05c28     16 2F 02 F1 | 	add	local09, local08
05c2c     02 2E 66 F0 | 	shl	local09, #2
05c30     03 00 00 FF 
05c34     00 E4 85 F1 | 	sub	objptr, ##1536
05c38     F2 2E 02 F1 | 	add	local09, objptr
05c3c     17 27 62 FC | 	wrlong	local05, local09
05c40     03 00 00 FF 
05c44     00 E4 05 F1 | 	add	objptr, ##1536
05c48     F2 32 02 FB | 	rdlong	local11, objptr
05c4c     19 31 02 F6 | 	mov	local10, local11
05c50     01 30 66 F0 | 	shl	local10, #1
05c54     19 31 02 F1 | 	add	local10, local11
05c58     02 30 66 F0 | 	shl	local10, #2
05c5c     03 00 00 FF 
05c60     00 E4 85 F1 | 	sub	objptr, ##1536
05c64     F2 30 02 F1 | 	add	local10, objptr
05c68     04 30 06 F1 | 	add	local10, #4
05c6c     18 29 62 FC | 	wrlong	local06, local10
05c70     03 00 00 FF 
05c74     00 E4 05 F1 | 	add	objptr, ##1536
05c78     F2 30 02 FB | 	rdlong	local10, objptr
05c7c     18 33 02 F6 | 	mov	local11, local10
05c80     01 32 66 F0 | 	shl	local11, #1
05c84     18 33 02 F1 | 	add	local11, local10
05c88     02 32 66 F0 | 	shl	local11, #2
05c8c     03 00 00 FF 
05c90     00 E4 85 F1 | 	sub	objptr, ##1536
05c94     F2 32 02 F1 | 	add	local11, objptr
05c98     08 32 06 F1 | 	add	local11, #8
05c9c     19 2B 62 FC | 	wrlong	local07, local11
05ca0     03 00 00 FF 
05ca4     00 E4 05 F1 | 	add	objptr, ##1536
05ca8     F2 26 02 FB | 	rdlong	local05, objptr
05cac     01 26 06 F1 | 	add	local05, #1
05cb0     F2 26 62 FC | 	wrlong	local05, objptr
05cb4     69 00 00 FF 
05cb8     50 E4 85 F1 | 	sub	objptr, ##53840
05cbc                 | LR__0513
05cbc                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05cbc     56 00 00 FF 
05cc0     18 E4 05 F1 | 	add	objptr, ##44056
05cc4     F2 24 02 FB | 	rdlong	local04, objptr
05cc8     03 24 66 F0 | 	shl	local04, #3
05ccc     02 00 00 FF 
05cd0     38 E4 85 F1 | 	sub	objptr, ##1080
05cd4     F2 24 02 F1 | 	add	local04, objptr
05cd8     04 24 06 F1 | 	add	local04, #4
05cdc     12 2D 02 FB | 	rdlong	local08, local04
05ce0     FE 2D 0E F2 | 	cmp	local08, #510 wz
05ce4     53 00 00 FF 
05ce8     E0 E5 85 F1 | 	sub	objptr, ##42976
05cec     B8 00 90 5D |  if_ne	jmp	#LR__0514
05cf0     44 22 06 F6 | 	mov	local03, #68
05cf4     0F 27 02 F6 | 	mov	local05, local01
05cf8     10 29 02 F6 | 	mov	local06, local02
05cfc     11 2B 02 F6 | 	mov	local07, local03
05d00     69 00 00 FF 
05d04     50 E4 05 F1 | 	add	objptr, ##53840
05d08     F2 2C 02 FB | 	rdlong	local08, objptr
05d0c     16 2F 02 F6 | 	mov	local09, local08
05d10     01 2E 66 F0 | 	shl	local09, #1
05d14     16 2F 02 F1 | 	add	local09, local08
05d18     02 2E 66 F0 | 	shl	local09, #2
05d1c     03 00 00 FF 
05d20     00 E4 85 F1 | 	sub	objptr, ##1536
05d24     F2 2E 02 F1 | 	add	local09, objptr
05d28     17 27 62 FC | 	wrlong	local05, local09
05d2c     03 00 00 FF 
05d30     00 E4 05 F1 | 	add	objptr, ##1536
05d34     F2 32 02 FB | 	rdlong	local11, objptr
05d38     19 31 02 F6 | 	mov	local10, local11
05d3c     01 30 66 F0 | 	shl	local10, #1
05d40     19 31 02 F1 | 	add	local10, local11
05d44     02 30 66 F0 | 	shl	local10, #2
05d48     03 00 00 FF 
05d4c     00 E4 85 F1 | 	sub	objptr, ##1536
05d50     F2 30 02 F1 | 	add	local10, objptr
05d54     04 30 06 F1 | 	add	local10, #4
05d58     18 29 62 FC | 	wrlong	local06, local10
05d5c     03 00 00 FF 
05d60     00 E4 05 F1 | 	add	objptr, ##1536
05d64     F2 30 02 FB | 	rdlong	local10, objptr
05d68     18 33 02 F6 | 	mov	local11, local10
05d6c     01 32 66 F0 | 	shl	local11, #1
05d70     18 33 02 F1 | 	add	local11, local10
05d74     02 32 66 F0 | 	shl	local11, #2
05d78     03 00 00 FF 
05d7c     00 E4 85 F1 | 	sub	objptr, ##1536
05d80     F2 32 02 F1 | 	add	local11, objptr
05d84     08 32 06 F1 | 	add	local11, #8
05d88     19 2B 62 FC | 	wrlong	local07, local11
05d8c     03 00 00 FF 
05d90     00 E4 05 F1 | 	add	objptr, ##1536
05d94     F2 26 02 FB | 	rdlong	local05, objptr
05d98     01 26 06 F1 | 	add	local05, #1
05d9c     F2 26 62 FC | 	wrlong	local05, objptr
05da0     69 00 00 FF 
05da4     50 E4 85 F1 | 	sub	objptr, ##53840
05da8                 | LR__0514
05da8                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05da8     56 00 00 FF 
05dac     18 E4 05 F1 | 	add	objptr, ##44056
05db0     F2 24 02 FB | 	rdlong	local04, objptr
05db4     03 24 66 F0 | 	shl	local04, #3
05db8     02 00 00 FF 
05dbc     38 E4 85 F1 | 	sub	objptr, ##1080
05dc0     F2 24 02 F1 | 	add	local04, objptr
05dc4     04 24 06 F1 | 	add	local04, #4
05dc8     12 2D 02 FB | 	rdlong	local08, local04
05dcc     11 2C 0E F2 | 	cmp	local08, #17 wz
05dd0     53 00 00 FF 
05dd4     E0 E5 85 F1 | 	sub	objptr, ##42976
05dd8     6C 00 90 AD |  if_e	jmp	#LR__0515
05ddc     56 00 00 FF 
05de0     18 E4 05 F1 | 	add	objptr, ##44056
05de4     F2 2C 02 FB | 	rdlong	local08, objptr
05de8     03 2C 66 F0 | 	shl	local08, #3
05dec     02 00 00 FF 
05df0     38 E4 85 F1 | 	sub	objptr, ##1080
05df4     F2 2C 02 F1 | 	add	local08, objptr
05df8     04 2C 06 F1 | 	add	local08, #4
05dfc     16 2D 02 FB | 	rdlong	local08, local08
05e00     12 2C 0E F2 | 	cmp	local08, #18 wz
05e04     53 00 00 FF 
05e08     E0 E5 85 F1 | 	sub	objptr, ##42976
05e0c     38 00 90 AD |  if_e	jmp	#LR__0515
05e10     56 00 00 FF 
05e14     18 E4 05 F1 | 	add	objptr, ##44056
05e18     F2 32 02 FB | 	rdlong	local11, objptr
05e1c     03 32 66 F0 | 	shl	local11, #3
05e20     02 00 00 FF 
05e24     38 E4 85 F1 | 	sub	objptr, ##1080
05e28     F2 32 02 F1 | 	add	local11, objptr
05e2c     04 32 06 F1 | 	add	local11, #4
05e30     19 33 02 FB | 	rdlong	local11, local11
05e34     FE 33 0E F2 | 	cmp	local11, #510 wz
05e38     53 00 00 FF 
05e3c     E0 E5 85 F1 | 	sub	objptr, ##42976
05e40     16 FA 05 56 |  if_ne	mov	result1, #22
05e44     68 00 90 5D |  if_ne	jmp	#LR__0517
05e48                 | LR__0515
05e48     56 00 00 FF 
05e4c     18 E4 05 F1 | 	add	objptr, ##44056
05e50     F2 24 02 FB | 	rdlong	local04, objptr
05e54     01 24 06 F1 | 	add	local04, #1
05e58     F2 24 62 FC | 	wrlong	local04, objptr
05e5c     03 24 66 F0 | 	shl	local04, #3
05e60     02 00 00 FF 
05e64     38 E4 85 F1 | 	sub	objptr, ##1080
05e68     F2 24 02 F1 | 	add	local04, objptr
05e6c     04 24 06 F1 | 	add	local04, #4
05e70     12 2D 02 FB | 	rdlong	local08, local04
05e74     FE 2D 0E F2 | 	cmp	local08, #510 wz
05e78     53 00 00 FF 
05e7c     E0 E5 85 F1 | 	sub	objptr, ##42976
05e80     28 00 90 AD |  if_e	jmp	#LR__0516
05e84     56 00 00 FF 
05e88     18 E4 05 F1 | 	add	objptr, ##44056
05e8c     F2 32 02 FB | 	rdlong	local11, objptr
05e90     0E 00 00 FF 
05e94     1C E4 05 F1 | 	add	objptr, ##7196
05e98     F2 30 02 FB | 	rdlong	local10, objptr
05e9c     64 00 00 FF 
05ea0     34 E4 85 F1 | 	sub	objptr, ##51252
05ea4     18 33 52 F2 | 	cmps	local11, local10 wc
05ea8     E4 FA 9F CD |  if_b	jmp	#LR__0511
05eac                 | LR__0516
05eac                 | ' return 0
05eac     00 FA 05 F6 | 	mov	result1, #0
05eb0                 | LR__0517
05eb0     A7 F0 03 F6 | 	mov	ptra, fp
05eb4     B2 00 A0 FD | 	call	#popregs_
05eb8                 | _compile_print_ret
05eb8     2D 00 64 FD | 	ret
05ebc                 | 
05ebc                 | ' 
05ebc                 | ' function compile_if() as ulong  
05ebc                 | _compile_if
05ebc     05 4A 05 F6 | 	mov	COUNT_, #5
05ec0     A8 00 A0 FD | 	call	#pushregs_
05ec4                 | _compile_if_enter
05ec4     28 F3 BF FD | 	call	#_compile_converttoint
05ec8                 | ' return err
05ec8     56 00 00 FF 
05ecc     18 E4 05 F1 | 	add	objptr, ##44056
05ed0     F2 FA 01 FB | 	rdlong	result1, objptr
05ed4     01 FA 05 F1 | 	add	result1, #1
05ed8     F2 FA 61 FC | 	wrlong	result1, objptr
05edc     58 22 06 F6 | 	mov	local03, #88
05ee0     0F 25 02 F6 | 	mov	local04, local01
05ee4     10 27 02 F6 | 	mov	local05, local02
05ee8     11 1F 02 F6 | 	mov	local01, local03
05eec     13 00 00 FF 
05ef0     38 E4 05 F1 | 	add	objptr, ##9784
05ef4     F2 12 02 FB | 	rdlong	arg01, objptr
05ef8     09 FB 01 F6 | 	mov	result1, arg01
05efc     01 FA 65 F0 | 	shl	result1, #1
05f00     09 FB 01 F1 | 	add	result1, arg01
05f04     02 FA 65 F0 | 	shl	result1, #2
05f08     03 00 00 FF 
05f0c     00 E4 85 F1 | 	sub	objptr, ##1536
05f10     F2 FA 01 F1 | 	add	result1, objptr
05f14     FD 24 62 FC | 	wrlong	local04, result1
05f18     03 00 00 FF 
05f1c     00 E4 05 F1 | 	add	objptr, ##1536
05f20     F2 12 02 FB | 	rdlong	arg01, objptr
05f24     09 25 02 F6 | 	mov	local04, arg01
05f28     01 24 66 F0 | 	shl	local04, #1
05f2c     09 25 02 F1 | 	add	local04, arg01
05f30     02 24 66 F0 | 	shl	local04, #2
05f34     03 00 00 FF 
05f38     00 E4 85 F1 | 	sub	objptr, ##1536
05f3c     F2 24 02 F1 | 	add	local04, objptr
05f40     04 24 06 F1 | 	add	local04, #4
05f44     12 27 62 FC | 	wrlong	local05, local04
05f48     03 00 00 FF 
05f4c     00 E4 05 F1 | 	add	objptr, ##1536
05f50     F2 24 02 FB | 	rdlong	local04, objptr
05f54     12 27 02 F6 | 	mov	local05, local04
05f58     01 26 66 F0 | 	shl	local05, #1
05f5c     12 27 02 F1 | 	add	local05, local04
05f60     02 26 66 F0 | 	shl	local05, #2
05f64     03 00 00 FF 
05f68     00 E4 85 F1 | 	sub	objptr, ##1536
05f6c     F2 26 02 F1 | 	add	local05, objptr
05f70     08 26 06 F1 | 	add	local05, #8
05f74     13 1F 62 FC | 	wrlong	local01, local05
05f78     03 00 00 FF 
05f7c     00 E4 05 F1 | 	add	objptr, ##1536
05f80     F2 24 02 FB | 	rdlong	local04, objptr
05f84     01 24 06 F1 | 	add	local04, #1
05f88     F2 24 62 FC | 	wrlong	local04, objptr
05f8c                 | ' 
05f8c                 | ' 'print "In compile_if"
05f8c                 | ' compile_int_fun_1p()
05f8c                 | ' cmd=lparts(ct).token : ct+=1
05f8c                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
05f8c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
05f8c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05f8c     13 00 00 FF 
05f90     38 E4 85 F1 | 	sub	objptr, ##9784
05f94     F2 26 02 FB | 	rdlong	local05, objptr
05f98     01 26 06 F1 | 	add	local05, #1
05f9c     03 26 66 F0 | 	shl	local05, #3
05fa0     02 00 00 FF 
05fa4     38 E4 85 F1 | 	sub	objptr, ##1080
05fa8     F2 26 02 F1 | 	add	local05, objptr
05fac     13 13 02 FB | 	rdlong	arg01, local05
05fb0     53 00 00 FF 
05fb4     E0 E5 85 F1 | 	sub	objptr, ##42976
05fb8                 | ' 
05fb8                 | ' select case s
05fb8     27 01 00 FF 
05fbc     BE 14 06 F6 | 	mov	arg02, ##@LR__4224
05fc0     C8 FB B0 FD | 	call	#__system___string_cmp
05fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc8     1B FA 05 A6 |  if_e	mov	result1, #27
05fcc     00 FA 05 56 |  if_ne	mov	result1, #0
05fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05fd4     0C 00 90 AD |  if_e	jmp	#LR__0520
05fd8     05 12 06 F6 | 	mov	arg01, #5
05fdc     20 EC BF FD | 	call	#_compile_immediate_assign
05fe0     08 00 90 FD | 	jmp	#LR__0521
05fe4                 | LR__0520
05fe4     05 12 06 F6 | 	mov	arg01, #5
05fe8     A0 E3 BF FD | 	call	#_compile_immediate
05fec                 | LR__0521
05fec                 | ' 
05fec                 | ' 
05fec                 | ' return 0
05fec     00 FA 05 F6 | 	mov	result1, #0
05ff0     A7 F0 03 F6 | 	mov	ptra, fp
05ff4     B2 00 A0 FD | 	call	#popregs_
05ff8                 | _compile_if_ret
05ff8     2D 00 64 FD | 	ret
05ffc                 | 
05ffc                 | ' 
05ffc                 | ' function compile_else() as ulong  
05ffc                 | _compile_else
05ffc     05 4A 05 F6 | 	mov	COUNT_, #5
06000     A8 00 A0 FD | 	call	#pushregs_
06004                 | _compile_else_enter
06004     5A 22 06 F6 | 	mov	local03, #90
06008     0F 25 02 F6 | 	mov	local04, local01
0600c     10 27 02 F6 | 	mov	local05, local02
06010     11 1F 02 F6 | 	mov	local01, local03
06014     69 00 00 FF 
06018     50 E4 05 F1 | 	add	objptr, ##53840
0601c     F2 12 02 FB | 	rdlong	arg01, objptr
06020     09 FB 01 F6 | 	mov	result1, arg01
06024     01 FA 65 F0 | 	shl	result1, #1
06028     09 FB 01 F1 | 	add	result1, arg01
0602c     02 FA 65 F0 | 	shl	result1, #2
06030     03 00 00 FF 
06034     00 E4 85 F1 | 	sub	objptr, ##1536
06038     F2 FA 01 F1 | 	add	result1, objptr
0603c     FD 24 62 FC | 	wrlong	local04, result1
06040     03 00 00 FF 
06044     00 E4 05 F1 | 	add	objptr, ##1536
06048     F2 FA 01 FB | 	rdlong	result1, objptr
0604c     FD 24 02 F6 | 	mov	local04, result1
06050     01 24 66 F0 | 	shl	local04, #1
06054     FD 24 02 F1 | 	add	local04, result1
06058     02 24 66 F0 | 	shl	local04, #2
0605c     03 00 00 FF 
06060     00 E4 85 F1 | 	sub	objptr, ##1536
06064     F2 24 02 F1 | 	add	local04, objptr
06068     04 24 06 F1 | 	add	local04, #4
0606c     12 27 62 FC | 	wrlong	local05, local04
06070     03 00 00 FF 
06074     00 E4 05 F1 | 	add	objptr, ##1536
06078     F2 24 02 FB | 	rdlong	local04, objptr
0607c     12 27 02 F6 | 	mov	local05, local04
06080     01 26 66 F0 | 	shl	local05, #1
06084     12 27 02 F1 | 	add	local05, local04
06088     02 26 66 F0 | 	shl	local05, #2
0608c     03 00 00 FF 
06090     00 E4 85 F1 | 	sub	objptr, ##1536
06094     F2 26 02 F1 | 	add	local05, objptr
06098     08 26 06 F1 | 	add	local05, #8
0609c     13 1F 62 FC | 	wrlong	local01, local05
060a0     03 00 00 FF 
060a4     00 E4 05 F1 | 	add	objptr, ##1536
060a8     F2 24 02 FB | 	rdlong	local04, objptr
060ac     01 24 06 F1 | 	add	local04, #1
060b0     F2 24 62 FC | 	wrlong	local04, objptr
060b4                 | ' 
060b4                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
060b4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
060b4     13 00 00 FF 
060b8     38 E4 85 F1 | 	sub	objptr, ##9784
060bc     F2 26 02 FB | 	rdlong	local05, objptr
060c0     01 26 06 F1 | 	add	local05, #1
060c4     03 26 66 F0 | 	shl	local05, #3
060c8     02 00 00 FF 
060cc     38 E4 85 F1 | 	sub	objptr, ##1080
060d0     F2 26 02 F1 | 	add	local05, objptr
060d4     13 13 02 FB | 	rdlong	arg01, local05
060d8     53 00 00 FF 
060dc     E0 E5 85 F1 | 	sub	objptr, ##42976
060e0                 | ' 
060e0                 | ' select case s
060e0     27 01 00 FF 
060e4     BE 14 06 F6 | 	mov	arg02, ##@LR__4224
060e8     A0 FA B0 FD | 	call	#__system___string_cmp
060ec     00 FA 0D F2 | 	cmp	result1, #0 wz
060f0     1B FA 05 A6 |  if_e	mov	result1, #27
060f4     00 FA 05 56 |  if_ne	mov	result1, #0
060f8     00 FA 0D F2 | 	cmp	result1, #0 wz
060fc     0C 00 90 AD |  if_e	jmp	#LR__0530
06100     05 12 06 F6 | 	mov	arg01, #5
06104     F8 EA BF FD | 	call	#_compile_immediate_assign
06108     08 00 90 FD | 	jmp	#LR__0531
0610c                 | LR__0530
0610c     05 12 06 F6 | 	mov	arg01, #5
06110     78 E2 BF FD | 	call	#_compile_immediate
06114                 | LR__0531
06114                 | ' 
06114                 | ' 
06114                 | ' return 0
06114     00 FA 05 F6 | 	mov	result1, #0
06118     A7 F0 03 F6 | 	mov	ptra, fp
0611c     B2 00 A0 FD | 	call	#popregs_
06120                 | _compile_else_ret
06120     2D 00 64 FD | 	ret
06124                 | 
06124                 | ' 
06124                 | ' 
06124                 | ' function compile_dim() as ulong  
06124                 | _compile_dim
06124     11 4A 05 F6 | 	mov	COUNT_, #17
06128     A8 00 A0 FD | 	call	#pushregs_
0612c     01 1E 06 F6 | 	mov	local01, #1
06130     01 20 06 F6 | 	mov	local02, #1
06134     01 22 06 F6 | 	mov	local03, #1
06138                 | ' 
06138                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06138                 | ' 
06138                 | ' if isname(lparts(ct).part$) then 
06138     56 00 00 FF 
0613c     18 E4 05 F1 | 	add	objptr, ##44056
06140     F2 14 02 FB | 	rdlong	arg02, objptr
06144     03 14 66 F0 | 	shl	arg02, #3
06148     02 00 00 FF 
0614c     38 E4 85 F1 | 	sub	objptr, ##1080
06150     F2 14 02 F1 | 	add	arg02, objptr
06154     0A 13 02 FB | 	rdlong	arg01, arg02
06158     53 00 00 FF 
0615c     E0 E5 85 F1 | 	sub	objptr, ##42976
06160     0C D2 BF FD | 	call	#_isname
06164     00 FA 0D F2 | 	cmp	result1, #0 wz
06168     30 05 90 AD |  if_e	jmp	#LR__0564
0616c     56 00 00 FF 
06170     18 E4 05 F1 | 	add	objptr, ##44056
06174     F2 24 02 FB | 	rdlong	local04, objptr
06178     03 24 66 F0 | 	shl	local04, #3
0617c     02 00 00 FF 
06180     38 E4 85 F1 | 	sub	objptr, ##1080
06184     F2 24 02 F1 | 	add	local04, objptr
06188     12 27 02 FB | 	rdlong	local05, local04
0618c     01 28 66 F6 | 	neg	local06, #1
06190                 | '   varname2$=lparts(ct).part$ 
06190                 | '   j=-1
06190                 | '   if varnum>0 then
06190     04 E4 85 F1 | 	sub	objptr, #4
06194     F2 2A 02 FB | 	rdlong	local07, objptr
06198     53 00 00 FF 
0619c     DC E5 85 F1 | 	sub	objptr, ##42972
061a0     01 2A 56 F2 | 	cmps	local07, #1 wc
061a4     58 00 90 CD |  if_b	jmp	#LR__0542
061a8                 | '  '   print "in dim, varnum=";varnum
061a8                 | '     for i=0 to varnum-1
061a8     00 2C 06 F6 | 	mov	local08, #0
061ac     53 00 00 FF 
061b0     DC E5 05 F1 | 	add	objptr, ##42972
061b4     F2 2E 02 FB | 	rdlong	local09, objptr
061b8     53 00 00 FF 
061bc     DC E5 85 F1 | 	sub	objptr, ##42972
061c0                 | LR__0540
061c0     17 2D 52 F2 | 	cmps	local08, local09 wc
061c4     38 00 90 3D |  if_ae	jmp	#LR__0541
061c8                 | '       if variables(i).name=varname2$ then j=i : exit
061c8     16 25 02 F6 | 	mov	local04, local08
061cc     04 24 66 F0 | 	shl	local04, #4
061d0     33 00 00 FF 
061d4     DC E5 05 F1 | 	add	objptr, ##26588
061d8     F2 24 02 F1 | 	add	local04, objptr
061dc     12 13 02 FB | 	rdlong	arg01, local04
061e0     13 15 02 F6 | 	mov	arg02, local05
061e4     33 00 00 FF 
061e8     DC E5 85 F1 | 	sub	objptr, ##26588
061ec     9C F9 B0 FD | 	call	#__system___string_cmp
061f0     00 FA 0D F2 | 	cmp	result1, #0 wz
061f4     16 29 02 A6 |  if_e	mov	local06, local08
061f8     01 2C 06 51 |  if_ne	add	local08, #1
061fc     C0 FF 9F 5D |  if_ne	jmp	#LR__0540
06200                 | LR__0541
06200                 | LR__0542
06200                 | '   if j<>-1 then printerror (42) : return 42
06200     FF FF 7F FF 
06204     FF 29 0E F2 | 	cmp	local06, ##-1 wz
06208     10 00 90 AD |  if_e	jmp	#LR__0543
0620c     2A 12 06 F6 | 	mov	arg01, #42
06210     EC C3 B0 FD | 	call	#_printerror
06214     2A FA 05 F6 | 	mov	result1, #42
06218     D8 05 90 FD | 	jmp	#LR__0566
0621c                 | LR__0543
0621c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
0621c     56 00 00 FF 
06220     18 E4 05 F1 | 	add	objptr, ##44056
06224     F2 14 02 FB | 	rdlong	arg02, objptr
06228     01 14 06 F1 | 	add	arg02, #1
0622c     03 14 66 F0 | 	shl	arg02, #3
06230     02 00 00 FF 
06234     38 E4 85 F1 | 	sub	objptr, ##1080
06238     F2 14 02 F1 | 	add	arg02, objptr
0623c     0A 13 02 FB | 	rdlong	arg01, arg02
06240     28 01 00 FF 
06244     70 14 06 F6 | 	mov	arg02, ##@LR__4329
06248     53 00 00 FF 
0624c     E0 E5 85 F1 | 	sub	objptr, ##42976
06250     38 F9 B0 FD | 	call	#__system___string_cmp
06254     00 FA 0D F2 | 	cmp	result1, #0 wz
06258     50 00 90 AD |  if_e	jmp	#LR__0544
0625c     56 00 00 FF 
06260     18 E4 05 F1 | 	add	objptr, ##44056
06264     F2 2E 02 FB | 	rdlong	local09, objptr
06268     01 2E 06 F1 | 	add	local09, #1
0626c     03 2E 66 F0 | 	shl	local09, #3
06270     02 00 00 FF 
06274     38 E4 85 F1 | 	sub	objptr, ##1080
06278     F2 2E 02 F1 | 	add	local09, objptr
0627c     17 13 02 FB | 	rdlong	arg01, local09
06280     28 01 00 FF 
06284     72 14 06 F6 | 	mov	arg02, ##@LR__4330
06288     53 00 00 FF 
0628c     E0 E5 85 F1 | 	sub	objptr, ##42976
06290     F8 F8 B0 FD | 	call	#__system___string_cmp
06294     00 FA 0D F2 | 	cmp	result1, #0 wz
06298     10 00 90 AD |  if_e	jmp	#LR__0544
0629c     2B 12 06 F6 | 	mov	arg01, #43
062a0     5C C3 B0 FD | 	call	#_printerror
062a4     2B FA 05 F6 | 	mov	result1, #43
062a8     48 05 90 FD | 	jmp	#LR__0566
062ac                 | LR__0544
062ac                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
062ac     56 00 00 FF 
062b0     18 E4 05 F1 | 	add	objptr, ##44056
062b4     F2 14 02 FB | 	rdlong	arg02, objptr
062b8     01 14 06 F1 | 	add	arg02, #1
062bc     03 14 66 F0 | 	shl	arg02, #3
062c0     02 00 00 FF 
062c4     38 E4 85 F1 | 	sub	objptr, ##1080
062c8     F2 14 02 F1 | 	add	arg02, objptr
062cc     0A 13 02 FB | 	rdlong	arg01, arg02
062d0     28 01 00 FF 
062d4     75 14 06 F6 | 	mov	arg02, ##@LR__4331
062d8     53 00 00 FF 
062dc     E0 E5 85 F1 | 	sub	objptr, ##42976
062e0     A8 F8 B0 FD | 	call	#__system___string_cmp
062e4     00 FA 0D F2 | 	cmp	result1, #0 wz
062e8     56 00 00 AF 
062ec     18 E4 05 A1 |  if_e	add	objptr, ##44056
062f0     F2 30 02 AB |  if_e	rdlong	local10, objptr
062f4     56 00 00 AF 
062f8     18 E4 85 A1 |  if_e	sub	objptr, ##44056
062fc     01 30 06 A1 |  if_e	add	local10, #1
06300     7C 01 90 AD |  if_e	jmp	#LR__0550
06304     56 00 00 FF 
06308     18 E4 05 F1 | 	add	objptr, ##44056
0630c     F2 30 02 FB | 	rdlong	local10, objptr
06310     56 00 00 FF 
06314     18 E4 85 F1 | 	sub	objptr, ##44056
06318     02 30 06 F1 | 	add	local10, #2
0631c     00 32 06 F6 | 	mov	local11, #0
06320                 | '   l=ct+2 : m=0 : do
06320                 | LR__0545
06320                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
06320                 | '     if isdec(lparts(l).part$) then 
06320     18 25 02 F6 | 	mov	local04, local10
06324     03 24 66 F0 | 	shl	local04, #3
06328     53 00 00 FF 
0632c     E0 E5 05 F1 | 	add	objptr, ##42976
06330     F2 24 02 F1 | 	add	local04, objptr
06334     12 13 02 FB | 	rdlong	arg01, local04
06338     53 00 00 FF 
0633c     E0 E5 85 F1 | 	sub	objptr, ##42976
06340     D0 D6 BF FD | 	call	#_isdec
06344     00 FA 0D F2 | 	cmp	result1, #0 wz
06348     44 00 90 AD |  if_e	jmp	#LR__0546
0634c     19 35 02 F6 | 	mov	local12, local11
06350     0F 35 06 F1 | 	add	local12, #local01
06354     18 2F 02 F6 | 	mov	local09, local10
06358     03 2E 66 F0 | 	shl	local09, #3
0635c     53 00 00 FF 
06360     E0 E5 05 F1 | 	add	objptr, ##42976
06364     F2 2E 02 F1 | 	add	local09, objptr
06368     17 13 02 FB | 	rdlong	arg01, local09
0636c     00 14 06 F6 | 	mov	arg02, #0
06370     53 00 00 FF 
06374     E0 E5 85 F1 | 	sub	objptr, ##42976
06378     74 28 B1 FD | 	call	#__system____builtin_atoi
0637c     FD 36 02 F6 | 	mov	local13, result1
06380                 | 	'.live	local13
06380                 | 	'.live	local12
06380     00 34 8E F9 | 	altd	local12, #0
06384     1B 35 02 F6 | 	mov	local12, local13
06388     01 32 06 F1 | 	add	local11, #1
0638c     10 00 90 FD | 	jmp	#LR__0547
06390                 | LR__0546
06390     11 12 06 F6 | 	mov	arg01, #17
06394     68 C2 B0 FD | 	call	#_printerror
06398                 | '       printerror (17)  : return(17)
06398     11 FA 05 F6 | 	mov	result1, #17
0639c     54 04 90 FD | 	jmp	#LR__0566
063a0                 | LR__0547
063a0                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
063a0     18 25 02 F6 | 	mov	local04, local10
063a4     01 24 06 F1 | 	add	local04, #1
063a8     03 24 66 F0 | 	shl	local04, #3
063ac     53 00 00 FF 
063b0     E0 E5 05 F1 | 	add	objptr, ##42976
063b4     F2 24 02 F1 | 	add	local04, objptr
063b8     12 13 02 FB | 	rdlong	arg01, local04
063bc     28 01 00 FF 
063c0     78 14 06 F6 | 	mov	arg02, ##@LR__4332
063c4     53 00 00 FF 
063c8     E0 E5 85 F1 | 	sub	objptr, ##42976
063cc     BC F7 B0 FD | 	call	#__system___string_cmp
063d0     00 FA 0D F2 | 	cmp	result1, #0 wz
063d4     48 00 90 AD |  if_e	jmp	#LR__0548
063d8     18 37 02 F6 | 	mov	local13, local10
063dc     01 36 06 F1 | 	add	local13, #1
063e0     03 36 66 F0 | 	shl	local13, #3
063e4     53 00 00 FF 
063e8     E0 E5 05 F1 | 	add	objptr, ##42976
063ec     F2 36 02 F1 | 	add	local13, objptr
063f0     1B 13 02 FB | 	rdlong	arg01, local13
063f4     28 01 00 FF 
063f8     7A 14 06 F6 | 	mov	arg02, ##@LR__4333
063fc     53 00 00 FF 
06400     E0 E5 85 F1 | 	sub	objptr, ##42976
06404     84 F7 B0 FD | 	call	#__system___string_cmp
06408     00 FA 0D F2 | 	cmp	result1, #0 wz
0640c     10 00 90 AD |  if_e	jmp	#LR__0548
06410     2C 12 06 F6 | 	mov	arg01, #44
06414     E8 C1 B0 FD | 	call	#_printerror
06418     2C FA 05 F6 | 	mov	result1, #44
0641c     D4 03 90 FD | 	jmp	#LR__0566
06420                 | LR__0548
06420     02 30 06 F1 | 	add	local10, #2
06424     18 25 02 F6 | 	mov	local04, local10
06428     01 24 86 F1 | 	sub	local04, #1
0642c     03 24 66 F0 | 	shl	local04, #3
06430     53 00 00 FF 
06434     E0 E5 05 F1 | 	add	objptr, ##42976
06438     F2 24 02 F1 | 	add	local04, objptr
0643c     12 13 02 FB | 	rdlong	arg01, local04
06440     28 01 00 FF 
06444     7C 14 06 F6 | 	mov	arg02, ##@LR__4334
06448     53 00 00 FF 
0644c     E0 E5 85 F1 | 	sub	objptr, ##42976
06450     38 F7 B0 FD | 	call	#__system___string_cmp
06454     00 FA 0D F2 | 	cmp	result1, #0 wz
06458     03 32 56 52 |  if_ne	cmps	local11, #3 wc
0645c     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0545
06460                 | '   if m>3 then printerror(45): return(45)
06460     04 32 56 F2 | 	cmps	local11, #4 wc
06464     10 00 90 CD |  if_b	jmp	#LR__0549
06468     2D 12 06 F6 | 	mov	arg01, #45
0646c     90 C1 B0 FD | 	call	#_printerror
06470     2D FA 05 F6 | 	mov	result1, #45
06474     7C 03 90 FD | 	jmp	#LR__0566
06478                 | LR__0549
06478     00 39 06 F6 | 	mov	local14, #256
0647c     0C 3A 06 F6 | 	mov	local15, #12
06480                 | LR__0550
06480                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
06480                 | '   arraytype=array_no_type : esize=12
06480                 | ' 1350 
06480                 | '   if lparts(l).part$="as" then
06480     18 25 02 F6 | 	mov	local04, local10
06484     03 24 66 F0 | 	shl	local04, #3
06488     53 00 00 FF 
0648c     E0 E5 05 F1 | 	add	objptr, ##42976
06490     F2 24 02 F1 | 	add	local04, objptr
06494     12 13 02 FB | 	rdlong	arg01, local04
06498     28 01 00 FF 
0649c     7E 14 06 F6 | 	mov	arg02, ##@LR__4335
064a0     53 00 00 FF 
064a4     E0 E5 85 F1 | 	sub	objptr, ##42976
064a8     E0 F6 B0 FD | 	call	#__system___string_cmp
064ac     00 FA 0D F2 | 	cmp	result1, #0 wz
064b0     F8 01 90 5D |  if_ne	jmp	#LR__0565
064b4                 | '     select case lparts(l+1).part$
064b4     18 35 02 F6 | 	mov	local12, local10
064b8     01 34 06 F1 | 	add	local12, #1
064bc     03 34 66 F0 | 	shl	local12, #3
064c0     53 00 00 FF 
064c4     E0 E5 05 F1 | 	add	objptr, ##42976
064c8     F2 34 02 F1 | 	add	local12, objptr
064cc     1A 3D 02 FB | 	rdlong	local16, local12
064d0     28 01 00 FF 
064d4     81 14 06 F6 | 	mov	arg02, ##@LR__4336
064d8     1E 13 02 F6 | 	mov	arg01, local16
064dc     53 00 00 FF 
064e0     E0 E5 85 F1 | 	sub	objptr, ##42976
064e4     A4 F6 B0 FD | 	call	#__system___string_cmp
064e8     00 FA 0D F2 | 	cmp	result1, #0 wz
064ec     0C 01 90 AD |  if_e	jmp	#LR__0551
064f0     28 01 00 FF 
064f4     86 14 06 F6 | 	mov	arg02, ##@LR__4337
064f8     1E 13 02 F6 | 	mov	arg01, local16
064fc     8C F6 B0 FD | 	call	#__system___string_cmp
06500     00 FA 0D F2 | 	cmp	result1, #0 wz
06504     00 01 90 AD |  if_e	jmp	#LR__0552
06508     28 01 00 FF 
0650c     8C 14 06 F6 | 	mov	arg02, ##@LR__4338
06510     1E 13 02 F6 | 	mov	arg01, local16
06514     74 F6 B0 FD | 	call	#__system___string_cmp
06518     00 FA 0D F2 | 	cmp	result1, #0 wz
0651c     F4 00 90 AD |  if_e	jmp	#LR__0553
06520     28 01 00 FF 
06524     92 14 06 F6 | 	mov	arg02, ##@LR__4339
06528     1E 13 02 F6 | 	mov	arg01, local16
0652c     5C F6 B0 FD | 	call	#__system___string_cmp
06530     00 FA 0D F2 | 	cmp	result1, #0 wz
06534     E8 00 90 AD |  if_e	jmp	#LR__0554
06538     28 01 00 FF 
0653c     99 14 06 F6 | 	mov	arg02, ##@LR__4340
06540     1E 13 02 F6 | 	mov	arg01, local16
06544     44 F6 B0 FD | 	call	#__system___string_cmp
06548     00 FA 0D F2 | 	cmp	result1, #0 wz
0654c     DC 00 90 AD |  if_e	jmp	#LR__0555
06550     28 01 00 FF 
06554     9E 14 06 F6 | 	mov	arg02, ##@LR__4341
06558     1E 13 02 F6 | 	mov	arg01, local16
0655c     2C F6 B0 FD | 	call	#__system___string_cmp
06560     00 FA 0D F2 | 	cmp	result1, #0 wz
06564     D0 00 90 AD |  if_e	jmp	#LR__0556
06568     28 01 00 FF 
0656c     A6 14 06 F6 | 	mov	arg02, ##@LR__4342
06570     1E 13 02 F6 | 	mov	arg01, local16
06574     14 F6 B0 FD | 	call	#__system___string_cmp
06578     00 FA 0D F2 | 	cmp	result1, #0 wz
0657c     C4 00 90 AD |  if_e	jmp	#LR__0557
06580     28 01 00 FF 
06584     AC 14 06 F6 | 	mov	arg02, ##@LR__4343
06588     1E 13 02 F6 | 	mov	arg01, local16
0658c     FC F5 B0 FD | 	call	#__system___string_cmp
06590     00 FA 0D F2 | 	cmp	result1, #0 wz
06594     B8 00 90 AD |  if_e	jmp	#LR__0558
06598     28 01 00 FF 
0659c     B2 14 06 F6 | 	mov	arg02, ##@LR__4344
065a0     1E 13 02 F6 | 	mov	arg01, local16
065a4     E4 F5 B0 FD | 	call	#__system___string_cmp
065a8     00 FA 0D F2 | 	cmp	result1, #0 wz
065ac     AC 00 90 AD |  if_e	jmp	#LR__0559
065b0     28 01 00 FF 
065b4     B9 14 06 F6 | 	mov	arg02, ##@LR__4345
065b8     1E 13 02 F6 | 	mov	arg01, local16
065bc     CC F5 B0 FD | 	call	#__system___string_cmp
065c0     00 FA 0D F2 | 	cmp	result1, #0 wz
065c4     A0 00 90 AD |  if_e	jmp	#LR__0560
065c8     28 01 00 FF 
065cc     C0 14 06 F6 | 	mov	arg02, ##@LR__4346
065d0     1E 13 02 F6 | 	mov	arg01, local16
065d4     B4 F5 B0 FD | 	call	#__system___string_cmp
065d8     00 FA 0D F2 | 	cmp	result1, #0 wz
065dc     94 00 90 AD |  if_e	jmp	#LR__0561
065e0     28 01 00 FF 
065e4     C7 14 06 F6 | 	mov	arg02, ##@LR__4347
065e8     1E 13 02 F6 | 	mov	arg01, local16
065ec     9C F5 B0 FD | 	call	#__system___string_cmp
065f0     00 FA 0D F2 | 	cmp	result1, #0 wz
065f4     88 00 90 AD |  if_e	jmp	#LR__0562
065f8     90 00 90 FD | 	jmp	#LR__0563
065fc                 | LR__0551
065fc     01 39 06 F6 | 	mov	local14, #257
06600     01 3A 06 F6 | 	mov	local15, #1
06604     A4 00 90 FD | 	jmp	#LR__0565
06608                 | LR__0552
06608     02 39 06 F6 | 	mov	local14, #258
0660c     01 3A 06 F6 | 	mov	local15, #1
06610     98 00 90 FD | 	jmp	#LR__0565
06614                 | LR__0553
06614     03 39 06 F6 | 	mov	local14, #259
06618     02 3A 06 F6 | 	mov	local15, #2
0661c     8C 00 90 FD | 	jmp	#LR__0565
06620                 | LR__0554
06620     04 39 06 F6 | 	mov	local14, #260
06624     02 3A 06 F6 | 	mov	local15, #2
06628     80 00 90 FD | 	jmp	#LR__0565
0662c                 | LR__0555
0662c     05 39 06 F6 | 	mov	local14, #261
06630     04 3A 06 F6 | 	mov	local15, #4
06634     74 00 90 FD | 	jmp	#LR__0565
06638                 | LR__0556
06638     05 39 06 F6 | 	mov	local14, #261
0663c     04 3A 06 F6 | 	mov	local15, #4
06640     68 00 90 FD | 	jmp	#LR__0565
06644                 | LR__0557
06644     06 39 06 F6 | 	mov	local14, #262
06648     04 3A 06 F6 | 	mov	local15, #4
0664c     5C 00 90 FD | 	jmp	#LR__0565
06650                 | LR__0558
06650     07 39 06 F6 | 	mov	local14, #263
06654     08 3A 06 F6 | 	mov	local15, #8
06658     50 00 90 FD | 	jmp	#LR__0565
0665c                 | LR__0559
0665c     08 39 06 F6 | 	mov	local14, #264
06660     08 3A 06 F6 | 	mov	local15, #8
06664     44 00 90 FD | 	jmp	#LR__0565
06668                 | LR__0560
06668     09 39 06 F6 | 	mov	local14, #265
0666c     04 3A 06 F6 | 	mov	local15, #4
06670     38 00 90 FD | 	jmp	#LR__0565
06674                 | LR__0561
06674     0A 39 06 F6 | 	mov	local14, #266
06678     08 3A 06 F6 | 	mov	local15, #8
0667c     2C 00 90 FD | 	jmp	#LR__0565
06680                 | LR__0562
06680     0B 39 06 F6 | 	mov	local14, #267
06684     04 3A 06 F6 | 	mov	local15, #4
06688     20 00 90 FD | 	jmp	#LR__0565
0668c                 | LR__0563
0668c     2F 12 06 F6 | 	mov	arg01, #47
06690     6C BF B0 FD | 	call	#_printerror
06694     2F FA 05 F6 | 	mov	result1, #47
06698     58 01 90 FD | 	jmp	#LR__0566
0669c                 | LR__0564
0669c     2E 12 06 F6 | 	mov	arg01, #46
066a0     5C BF B0 FD | 	call	#_printerror
066a4                 | '   printerror(46): return 46
066a4     2E FA 05 F6 | 	mov	result1, #46
066a8     48 01 90 FD | 	jmp	#LR__0566
066ac                 | LR__0565
066ac     0F 3B 02 FD | 	qmul	local15, local01
066b0     18 2A 62 FD | 	getqx	local07
066b4     10 2B 02 FD | 	qmul	local07, local02
066b8     18 3C 62 FD | 	getqx	local16
066bc     11 3D 02 FD | 	qmul	local16, local03
066c0     7A 00 00 FF 
066c4     4C E4 05 F1 | 	add	objptr, ##62540
066c8     F2 3E 02 FB | 	rdlong	local17, objptr
066cc     1C 15 02 F6 | 	mov	arg02, local14
066d0     01 16 06 F6 | 	mov	arg03, #1
066d4     00 18 06 F6 | 	mov	arg04, #0
066d8                 | '     return fill(addr, pattern, count, listPtr, 4)
066d8     04 1A 06 F6 | 	mov	arg05, #4
066dc     18 3C 62 FD | 	getqx	local16
066e0     1E 3F 82 F1 | 	sub	local17, local16
066e4     10 3E 86 F1 | 	sub	local17, #16
066e8     F2 3E 62 FC | 	wrlong	local17, objptr
066ec     1F 13 02 F6 | 	mov	arg01, local17
066f0     6E 00 00 FF 
066f4     8C E5 85 F1 | 	sub	objptr, ##56716
066f8     B4 EA B0 FD | 	call	#_psram_spin2_fill
066fc     1F 13 02 F6 | 	mov	arg01, local17
06700     02 12 06 F1 | 	add	arg01, #2
06704     1D 15 02 F6 | 	mov	arg02, local15
06708     01 16 06 F6 | 	mov	arg03, #1
0670c     00 18 06 F6 | 	mov	arg04, #0
06710                 | '     return fill(addr, pattern, count, listPtr, 1)
06710     01 1A 06 F6 | 	mov	arg05, #1
06714     98 EA B0 FD | 	call	#_psram_spin2_fill
06718     1F 13 02 F6 | 	mov	arg01, local17
0671c     04 12 06 F1 | 	add	arg01, #4
06720     0F 15 02 F6 | 	mov	arg02, local01
06724     01 16 06 F6 | 	mov	arg03, #1
06728     00 18 06 F6 | 	mov	arg04, #0
0672c                 | '     return fill(addr, pattern, count, listPtr, 4)
0672c     04 1A 06 F6 | 	mov	arg05, #4
06730     7C EA B0 FD | 	call	#_psram_spin2_fill
06734     1F 13 02 F6 | 	mov	arg01, local17
06738     08 12 06 F1 | 	add	arg01, #8
0673c     10 15 02 F6 | 	mov	arg02, local02
06740     01 16 06 F6 | 	mov	arg03, #1
06744     00 18 06 F6 | 	mov	arg04, #0
06748                 | '     return fill(addr, pattern, count, listPtr, 4)
06748     04 1A 06 F6 | 	mov	arg05, #4
0674c     60 EA B0 FD | 	call	#_psram_spin2_fill
06750     1F 13 02 F6 | 	mov	arg01, local17
06754     0C 12 06 F1 | 	add	arg01, #12
06758     11 15 02 F6 | 	mov	arg02, local03
0675c     01 16 06 F6 | 	mov	arg03, #1
06760     00 18 06 F6 | 	mov	arg04, #0
06764                 | '     return fill(addr, pattern, count, listPtr, 4)
06764     04 1A 06 F6 | 	mov	arg05, #4
06768     44 EA B0 FD | 	call	#_psram_spin2_fill
0676c     48 00 00 FF 
06770     1C E5 05 F1 | 	add	objptr, ##37148
06774     F2 24 02 FB | 	rdlong	local04, objptr
06778     04 24 66 F0 | 	shl	local04, #4
0677c     20 00 00 FF 
06780     00 E4 85 F1 | 	sub	objptr, ##16384
06784     F2 24 02 F1 | 	add	local04, objptr
06788     12 27 62 FC | 	wrlong	local05, local04
0678c     20 00 00 FF 
06790     00 E4 05 F1 | 	add	objptr, ##16384
06794     F2 24 02 FB | 	rdlong	local04, objptr
06798     04 24 66 F0 | 	shl	local04, #4
0679c     20 00 00 FF 
067a0     00 E4 85 F1 | 	sub	objptr, ##16384
067a4     F2 24 02 F1 | 	add	local04, objptr
067a8     04 24 06 F1 | 	add	local04, #4
067ac     12 3F 62 FC | 	wrlong	local17, local04
067b0     20 00 00 FF 
067b4     00 E4 05 F1 | 	add	objptr, ##16384
067b8     F2 24 02 FB | 	rdlong	local04, objptr
067bc     04 24 66 F0 | 	shl	local04, #4
067c0     20 00 00 FF 
067c4     00 E4 85 F1 | 	sub	objptr, ##16384
067c8     F2 24 02 F1 | 	add	local04, objptr
067cc     0C 24 06 F1 | 	add	local04, #12
067d0     12 39 62 FC | 	wrlong	local14, local04
067d4     20 00 00 FF 
067d8     00 E4 05 F1 | 	add	objptr, ##16384
067dc     F2 2A 02 FB | 	rdlong	local07, objptr
067e0     01 2A 06 F1 | 	add	local07, #1
067e4     F2 2A 62 FC | 	wrlong	local07, objptr
067e8     53 00 00 FF 
067ec     DC E5 85 F1 | 	sub	objptr, ##42972
067f0                 | ' 'print dims(0),dims(1),dims(2),arraytype
067f0                 | ' 
067f0                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
067f0                 | ' arrayptr=memtop-arraysize-16
067f0                 | ' memtop=arrayptr
067f0                 | ' 
067f0                 | ' pslpoke arrayptr,arraytype
067f0                 | ' pspoke arrayptr+2,esize
067f0                 | ' pslpoke arrayptr+4,dims(0)
067f0                 | ' pslpoke arrayptr+8,dims(1)
067f0                 | ' pslpoke arrayptr+12,dims(2)
067f0                 | ' 
067f0                 | ' variables(varnum).name=varname2$
067f0                 | ' variables(varnum).value.uresult=arrayptr
067f0                 | ' variables(varnum).vartype=arraytype
067f0                 | ' varnum+=1
067f0                 | ' 
067f0                 | ' return 0
067f0     00 FA 05 F6 | 	mov	result1, #0
067f4                 | LR__0566
067f4     A7 F0 03 F6 | 	mov	ptra, fp
067f8     B2 00 A0 FD | 	call	#popregs_
067fc                 | _compile_dim_ret
067fc     2D 00 64 FD | 	ret
06800                 | 
06800                 | ' 
06800                 | ' 
06800                 | ' function compile_for() as ulong  
06800                 | _compile_for
06800     07 4A 05 F6 | 	mov	COUNT_, #7
06804     A8 00 A0 FD | 	call	#pushregs_
06808                 | ' 
06808                 | ' 
06808                 | ' 
06808                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
06808     56 00 00 FF 
0680c     18 E4 05 F1 | 	add	objptr, ##44056
06810     F2 14 02 FB | 	rdlong	arg02, objptr
06814     01 14 06 F1 | 	add	arg02, #1
06818     03 14 66 F0 | 	shl	arg02, #3
0681c     02 00 00 FF 
06820     38 E4 85 F1 | 	sub	objptr, ##1080
06824     F2 14 02 F1 | 	add	arg02, objptr
06828     0A 13 02 FB | 	rdlong	arg01, arg02
0682c     53 00 00 FF 
06830     E0 E5 85 F1 | 	sub	objptr, ##42976
06834                 | ' 
06834                 | ' select case s
06834     27 01 00 FF 
06838     BE 14 06 F6 | 	mov	arg02, ##@LR__4224
0683c     4C F3 B0 FD | 	call	#__system___string_cmp
06840     00 FA 0D F2 | 	cmp	result1, #0 wz
06844     1B FA 05 A6 |  if_e	mov	result1, #27
06848     00 FA 05 56 |  if_ne	mov	result1, #0
0684c     00 FA 0D F2 | 	cmp	result1, #0 wz
06850     0C 00 90 AD |  if_e	jmp	#LR__0570
06854     05 12 06 F6 | 	mov	arg01, #5
06858     A4 E3 BF FD | 	call	#_compile_immediate_assign
0685c     10 00 90 FD | 	jmp	#LR__0571
06860                 | LR__0570
06860     20 12 06 F6 | 	mov	arg01, #32
06864     14 E8 BF FD | 	call	#_compile_error
06868     20 FA 05 F6 | 	mov	result1, #32
0686c     AC 02 90 FD | 	jmp	#LR__0576
06870                 | LR__0571
06870     69 00 00 FF 
06874     50 E4 05 F1 | 	add	objptr, ##53840
06878     F2 12 02 FB | 	rdlong	arg01, objptr
0687c     09 25 02 F6 | 	mov	local04, arg01
06880     01 24 86 F1 | 	sub	local04, #1
06884     12 15 02 F6 | 	mov	arg02, local04
06888     01 14 66 F0 | 	shl	arg02, #1
0688c     12 15 02 F1 | 	add	arg02, local04
06890     02 14 66 F0 | 	shl	arg02, #2
06894     03 00 00 FF 
06898     00 E4 85 F1 | 	sub	objptr, ##1536
0689c     F2 14 02 F1 | 	add	arg02, objptr
068a0     0A 1F 02 FB | 	rdlong	local01, arg02
068a4     04 14 06 F1 | 	add	arg02, #4
068a8     0A 27 02 FB | 	rdlong	local05, arg02
068ac     01 12 86 F1 | 	sub	arg01, #1
068b0     09 29 02 F6 | 	mov	local06, arg01
068b4     01 28 66 F0 | 	shl	local06, #1
068b8     09 29 02 F1 | 	add	local06, arg01
068bc     02 28 66 F0 | 	shl	local06, #2
068c0     F2 28 02 F1 | 	add	local06, objptr
068c4     08 28 06 F1 | 	add	local06, #8
068c8     14 13 02 FB | 	rdlong	arg01, local06
068cc     13 21 02 F6 | 	mov	local02, local05
068d0     09 23 02 F6 | 	mov	local03, arg01
068d4                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
068d4                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
068d4     17 22 0E F2 | 	cmp	local03, #23 wz
068d8     66 00 00 FF 
068dc     50 E4 85 F1 | 	sub	objptr, ##52304
068e0     10 00 90 AD |  if_e	jmp	#LR__0572
068e4     22 12 06 F6 | 	mov	arg01, #34
068e8     90 E7 BF FD | 	call	#_compile_error
068ec     22 FA 05 F6 | 	mov	result1, #34
068f0     28 02 90 FD | 	jmp	#LR__0576
068f4                 | LR__0572
068f4     0F 2B 02 F6 | 	mov	local07, local01
068f8                 | ' varnum=t1.result.uresult
068f8                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
068f8     56 00 00 FF 
068fc     18 E4 05 F1 | 	add	objptr, ##44056
06900     F2 24 02 FB | 	rdlong	local04, objptr
06904     03 24 66 F0 | 	shl	local04, #3
06908     02 00 00 FF 
0690c     38 E4 85 F1 | 	sub	objptr, ##1080
06910     F2 24 02 F1 | 	add	local04, objptr
06914     12 13 02 FB | 	rdlong	arg01, local04
06918     28 01 00 FF 
0691c     CE 14 06 F6 | 	mov	arg02, ##@LR__4348
06920     53 00 00 FF 
06924     E0 E5 85 F1 | 	sub	objptr, ##42976
06928     60 F2 B0 FD | 	call	#__system___string_cmp
0692c     00 FA 0D F2 | 	cmp	result1, #0 wz
06930     10 00 90 AD |  if_e	jmp	#LR__0573
06934     21 12 06 F6 | 	mov	arg01, #33
06938     40 E7 BF FD | 	call	#_compile_error
0693c     21 FA 05 F6 | 	mov	result1, #33
06940     D8 01 90 FD | 	jmp	#LR__0576
06944                 | LR__0573
06944     56 00 00 FF 
06948     18 E4 05 F1 | 	add	objptr, ##44056
0694c     F2 28 02 FB | 	rdlong	local06, objptr
06950     01 28 06 F1 | 	add	local06, #1
06954     F2 28 62 FC | 	wrlong	local06, objptr
06958     56 00 00 FF 
0695c     18 E4 85 F1 | 	sub	objptr, ##44056
06960     98 0B B0 FD | 	call	#_expr
06964                 | ' ct+=1
06964                 | ' expr()  ' there is "to" value pushed on the stack
06964                 | ' if lparts(ct).part$="step" then 
06964     56 00 00 FF 
06968     18 E4 05 F1 | 	add	objptr, ##44056
0696c     F2 24 02 FB | 	rdlong	local04, objptr
06970     03 24 66 F0 | 	shl	local04, #3
06974     02 00 00 FF 
06978     38 E4 85 F1 | 	sub	objptr, ##1080
0697c     F2 24 02 F1 | 	add	local04, objptr
06980     12 13 02 FB | 	rdlong	arg01, local04
06984     28 01 00 FF 
06988     D1 14 06 F6 | 	mov	arg02, ##@LR__4349
0698c     53 00 00 FF 
06990     E0 E5 85 F1 | 	sub	objptr, ##42976
06994     F4 F1 B0 FD | 	call	#__system___string_cmp
06998     00 FA 0D F2 | 	cmp	result1, #0 wz
0699c     24 00 90 5D |  if_ne	jmp	#LR__0574
069a0     56 00 00 FF 
069a4     18 E4 05 F1 | 	add	objptr, ##44056
069a8     F2 28 02 FB | 	rdlong	local06, objptr
069ac     01 28 06 F1 | 	add	local06, #1
069b0     F2 28 62 FC | 	wrlong	local06, objptr
069b4     56 00 00 FF 
069b8     18 E4 85 F1 | 	sub	objptr, ##44056
069bc     3C 0B B0 FD | 	call	#_expr
069c0     78 00 90 FD | 	jmp	#LR__0575
069c4                 | LR__0574
069c4     69 00 00 FF 
069c8     50 E4 05 F1 | 	add	objptr, ##53840
069cc     F2 28 02 FB | 	rdlong	local06, objptr
069d0     14 27 02 F6 | 	mov	local05, local06
069d4     01 26 66 F0 | 	shl	local05, #1
069d8     14 27 02 F1 | 	add	local05, local06
069dc     02 26 66 F0 | 	shl	local05, #2
069e0     03 00 00 FF 
069e4     00 E4 85 F1 | 	sub	objptr, ##1536
069e8     F2 26 02 F1 | 	add	local05, objptr
069ec     08 26 06 F1 | 	add	local05, #8
069f0     13 39 68 FC | 	wrlong	#28, local05
069f4     03 00 00 FF 
069f8     00 E4 05 F1 | 	add	objptr, ##1536
069fc     F2 28 02 FB | 	rdlong	local06, objptr
06a00     14 27 02 F6 | 	mov	local05, local06
06a04     01 26 66 F0 | 	shl	local05, #1
06a08     14 27 02 F1 | 	add	local05, local06
06a0c     02 26 66 F0 | 	shl	local05, #2
06a10     03 00 00 FF 
06a14     00 E4 85 F1 | 	sub	objptr, ##1536
06a18     F2 26 02 F1 | 	add	local05, objptr
06a1c     13 03 68 FC | 	wrlong	#1, local05
06a20     03 00 00 FF 
06a24     00 E4 05 F1 | 	add	objptr, ##1536
06a28     F2 28 02 FB | 	rdlong	local06, objptr
06a2c     01 28 06 F1 | 	add	local06, #1
06a30     F2 28 62 FC | 	wrlong	local06, objptr
06a34     69 00 00 FF 
06a38     50 E4 85 F1 | 	sub	objptr, ##53840
06a3c                 | LR__0575
06a3c     69 00 00 FF 
06a40     50 E4 05 F1 | 	add	objptr, ##53840
06a44     F2 28 02 FB | 	rdlong	local06, objptr
06a48     14 27 02 F6 | 	mov	local05, local06
06a4c     01 26 66 F0 | 	shl	local05, #1
06a50     14 27 02 F1 | 	add	local05, local06
06a54     02 26 66 F0 | 	shl	local05, #2
06a58     03 00 00 FF 
06a5c     00 E4 85 F1 | 	sub	objptr, ##1536
06a60     F2 26 02 F1 | 	add	local05, objptr
06a64     08 26 06 F1 | 	add	local05, #8
06a68     13 39 68 FC | 	wrlong	#28, local05
06a6c     03 00 00 FF 
06a70     00 E4 05 F1 | 	add	objptr, ##1536
06a74     F2 28 02 FB | 	rdlong	local06, objptr
06a78     14 27 02 F6 | 	mov	local05, local06
06a7c     01 26 66 F0 | 	shl	local05, #1
06a80     14 27 02 F1 | 	add	local05, local06
06a84     02 26 66 F0 | 	shl	local05, #2
06a88     03 00 00 FF 
06a8c     00 E4 85 F1 | 	sub	objptr, ##1536
06a90     F2 26 02 F1 | 	add	local05, objptr
06a94     13 2B 62 FC | 	wrlong	local07, local05
06a98     03 00 00 FF 
06a9c     00 E4 05 F1 | 	add	objptr, ##1536
06aa0     F2 2A 02 FB | 	rdlong	local07, objptr
06aa4     01 2A 06 F1 | 	add	local07, #1
06aa8     F2 2A 62 FC | 	wrlong	local07, objptr
06aac     15 29 02 F6 | 	mov	local06, local07
06ab0     01 28 66 F0 | 	shl	local06, #1
06ab4     15 29 02 F1 | 	add	local06, local07
06ab8     02 28 66 F0 | 	shl	local06, #2
06abc     03 00 00 FF 
06ac0     00 E4 85 F1 | 	sub	objptr, ##1536
06ac4     F2 28 02 F1 | 	add	local06, objptr
06ac8     08 28 06 F1 | 	add	local06, #8
06acc     14 95 68 FC | 	wrlong	#74, local06
06ad0     03 00 00 FF 
06ad4     00 E4 05 F1 | 	add	objptr, ##1536
06ad8     F2 2A 02 FB | 	rdlong	local07, objptr
06adc     15 29 02 F6 | 	mov	local06, local07
06ae0     01 28 66 F0 | 	shl	local06, #1
06ae4     15 29 02 F1 | 	add	local06, local07
06ae8     02 28 66 F0 | 	shl	local06, #2
06aec     03 00 00 FF 
06af0     00 E4 85 F1 | 	sub	objptr, ##1536
06af4     F2 28 02 F1 | 	add	local06, objptr
06af8     14 01 68 FC | 	wrlong	#0, local06
06afc     03 00 00 FF 
06b00     00 E4 05 F1 | 	add	objptr, ##1536
06b04     F2 2A 02 FB | 	rdlong	local07, objptr
06b08     01 2A 06 F1 | 	add	local07, #1
06b0c     F2 2A 62 FC | 	wrlong	local07, objptr
06b10     69 00 00 FF 
06b14     50 E4 85 F1 | 	sub	objptr, ##53840
06b18                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
06b18                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
06b18                 | ' 
06b18                 | ' 
06b18                 | ' return 0
06b18     00 FA 05 F6 | 	mov	result1, #0
06b1c                 | LR__0576
06b1c     A7 F0 03 F6 | 	mov	ptra, fp
06b20     B2 00 A0 FD | 	call	#popregs_
06b24                 | _compile_for_ret
06b24     2D 00 64 FD | 	ret
06b28                 | 
06b28                 | ' 
06b28                 | ' 
06b28                 | ' sub do_for()
06b28                 | _do_for
06b28     05 4A 05 F6 | 	mov	COUNT_, #5
06b2c     A8 00 A0 FD | 	call	#pushregs_
06b30     78 00 00 FF 
06b34     AC E5 05 F1 | 	add	objptr, ##61868
06b38     F2 24 02 FB | 	rdlong	local04, objptr
06b3c     01 24 06 F1 | 	add	local04, #1
06b40     F2 24 62 FC | 	wrlong	local04, objptr
06b44     78 00 00 FF 
06b48     AC E5 85 F1 | 	sub	objptr, ##61868
06b4c     5C 1E B0 FD | 	call	#_pop
06b50     FD 1E 02 F6 | 	mov	local01, result1
06b54     FE 20 02 F6 | 	mov	local02, result2
06b58     FF 22 02 F6 | 	mov	local03, result3
06b5c     78 00 00 FF 
06b60     AC E5 05 F1 | 	add	objptr, ##61868
06b64     F2 24 02 FB | 	rdlong	local04, objptr
06b68     12 27 02 F6 | 	mov	local05, local04
06b6c     02 26 66 F0 | 	shl	local05, #2
06b70     12 27 02 F1 | 	add	local05, local04
06b74     02 26 66 F0 | 	shl	local05, #2
06b78     07 00 00 FF 
06b7c     40 E5 85 F1 | 	sub	objptr, ##3904
06b80     F2 26 02 F1 | 	add	local05, objptr
06b84     08 26 06 F1 | 	add	local05, #8
06b88     13 1F 62 FC | 	wrlong	local01, local05
06b8c     71 00 00 FF 
06b90     6C E4 85 F1 | 	sub	objptr, ##57964
06b94     14 1E B0 FD | 	call	#_pop
06b98     FD 1E 02 F6 | 	mov	local01, result1
06b9c     FE 20 02 F6 | 	mov	local02, result2
06ba0     FF 22 02 F6 | 	mov	local03, result3
06ba4     78 00 00 FF 
06ba8     AC E5 05 F1 | 	add	objptr, ##61868
06bac     F2 24 02 FB | 	rdlong	local04, objptr
06bb0     12 27 02 F6 | 	mov	local05, local04
06bb4     02 26 66 F0 | 	shl	local05, #2
06bb8     12 27 02 F1 | 	add	local05, local04
06bbc     02 26 66 F0 | 	shl	local05, #2
06bc0     07 00 00 FF 
06bc4     40 E5 85 F1 | 	sub	objptr, ##3904
06bc8     F2 26 02 F1 | 	add	local05, objptr
06bcc     0C 26 06 F1 | 	add	local05, #12
06bd0     13 1F 62 FC | 	wrlong	local01, local05
06bd4     71 00 00 FF 
06bd8     6C E4 85 F1 | 	sub	objptr, ##57964
06bdc     CC 1D B0 FD | 	call	#_pop
06be0     FD 1E 02 F6 | 	mov	local01, result1
06be4     FE 20 02 F6 | 	mov	local02, result2
06be8     FF 22 02 F6 | 	mov	local03, result3
06bec     78 00 00 FF 
06bf0     AC E5 05 F1 | 	add	objptr, ##61868
06bf4     F2 24 02 FB | 	rdlong	local04, objptr
06bf8     12 27 02 F6 | 	mov	local05, local04
06bfc     02 26 66 F0 | 	shl	local05, #2
06c00     12 27 02 F1 | 	add	local05, local04
06c04     02 26 66 F0 | 	shl	local05, #2
06c08     07 00 00 FF 
06c0c     40 E5 85 F1 | 	sub	objptr, ##3904
06c10     F2 26 02 F1 | 	add	local05, objptr
06c14     10 26 06 F1 | 	add	local05, #16
06c18     13 1F 62 FC | 	wrlong	local01, local05
06c1c                 | ' fortop+=1
06c1c                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
06c1c                 | ' 'if i> maxfor then printerror(36) : return
06c1c                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
06c1c                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
06c1c                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
06c1c                 | ' if compiledline(lineptr_e).result_type=token_end then
06c1c     08 00 00 FF 
06c20     18 E4 85 F1 | 	sub	objptr, ##4120
06c24     F2 1E 02 FB | 	rdlong	local01, objptr
06c28     0F 27 02 F6 | 	mov	local05, local01
06c2c     01 26 66 F0 | 	shl	local05, #1
06c30     0F 27 02 F1 | 	add	local05, local01
06c34     02 26 66 F0 | 	shl	local05, #2
06c38     03 00 00 FF 
06c3c     04 E4 85 F1 | 	sub	objptr, ##1540
06c40     F2 26 02 F1 | 	add	local05, objptr
06c44     08 26 06 F1 | 	add	local05, #8
06c48     13 27 02 FB | 	rdlong	local05, local05
06c4c     FE 27 0E F2 | 	cmp	local05, #510 wz
06c50     66 00 00 FF 
06c54     50 E4 85 F1 | 	sub	objptr, ##52304
06c58     70 00 90 5D |  if_ne	jmp	#LR__0580
06c5c     78 00 00 FF 
06c60     AC E5 05 F1 | 	add	objptr, ##61868
06c64     F2 1E 02 FB | 	rdlong	local01, objptr
06c68     0F 27 02 F6 | 	mov	local05, local01
06c6c     02 26 66 F0 | 	shl	local05, #2
06c70     0F 27 02 F1 | 	add	local05, local01
06c74     02 26 66 F0 | 	shl	local05, #2
06c78     07 00 00 FF 
06c7c     40 E5 85 F1 | 	sub	objptr, ##3904
06c80     F2 26 02 F1 | 	add	local05, objptr
06c84     07 00 00 FF 
06c88     18 E5 05 F1 | 	add	objptr, ##3864
06c8c     F2 1E 02 FB | 	rdlong	local01, objptr
06c90     13 1F 62 FC | 	wrlong	local01, local05
06c94     28 E4 05 F1 | 	add	objptr, #40
06c98     F2 1E 02 FB | 	rdlong	local01, objptr
06c9c     0F 27 02 F6 | 	mov	local05, local01
06ca0     02 26 66 F0 | 	shl	local05, #2
06ca4     0F 27 02 F1 | 	add	local05, local01
06ca8     02 26 66 F0 | 	shl	local05, #2
06cac     07 00 00 FF 
06cb0     40 E5 85 F1 | 	sub	objptr, ##3904
06cb4     F2 26 02 F1 | 	add	local05, objptr
06cb8     04 26 06 F1 | 	add	local05, #4
06cbc     13 01 68 FC | 	wrlong	#0, local05
06cc0     71 00 00 FF 
06cc4     6C E4 85 F1 | 	sub	objptr, ##57964
06cc8     7C 00 90 FD | 	jmp	#LR__0581
06ccc                 | LR__0580
06ccc     78 00 00 FF 
06cd0     AC E5 05 F1 | 	add	objptr, ##61868
06cd4     F2 1E 02 FB | 	rdlong	local01, objptr
06cd8     0F 27 02 F6 | 	mov	local05, local01
06cdc     02 26 66 F0 | 	shl	local05, #2
06ce0     0F 27 02 F1 | 	add	local05, local01
06ce4     02 26 66 F0 | 	shl	local05, #2
06ce8     07 00 00 FF 
06cec     40 E5 85 F1 | 	sub	objptr, ##3904
06cf0     F2 26 02 F1 | 	add	local05, objptr
06cf4     07 00 00 FF 
06cf8     20 E5 05 F1 | 	add	objptr, ##3872
06cfc     F2 1E 02 FB | 	rdlong	local01, objptr
06d00     13 1F 62 FC | 	wrlong	local01, local05
06d04     20 E4 05 F1 | 	add	objptr, #32
06d08     F2 1E 02 FB | 	rdlong	local01, objptr
06d0c     0F 27 02 F6 | 	mov	local05, local01
06d10     02 26 66 F0 | 	shl	local05, #2
06d14     0F 27 02 F1 | 	add	local05, local01
06d18     02 26 66 F0 | 	shl	local05, #2
06d1c     07 00 00 FF 
06d20     40 E5 85 F1 | 	sub	objptr, ##3904
06d24     F2 26 02 F1 | 	add	local05, objptr
06d28     08 00 00 FF 
06d2c     18 E4 85 F1 | 	sub	objptr, ##4120
06d30     F2 1E 02 FB | 	rdlong	local01, objptr
06d34     69 00 00 FF 
06d38     54 E4 85 F1 | 	sub	objptr, ##53844
06d3c     01 1E 06 F1 | 	add	local01, #1
06d40     04 26 06 F1 | 	add	local05, #4
06d44     13 1F 62 FC | 	wrlong	local01, local05
06d48                 | LR__0581
06d48     A7 F0 03 F6 | 	mov	ptra, fp
06d4c     B2 00 A0 FD | 	call	#popregs_
06d50                 | _do_for_ret
06d50     2D 00 64 FD | 	ret
06d54                 | 
06d54                 | ' 
06d54                 | ' ' now do_next todo
06d54                 | ' 
06d54                 | ' sub do_next()
06d54                 | _do_next
06d54     04 4A 05 F6 | 	mov	COUNT_, #4
06d58     A8 00 A0 FD | 	call	#pushregs_
06d5c     4C 1C B0 FD | 	call	#_pop
06d60     FD 1E 02 F6 | 	mov	local01, result1
06d64     FE 20 02 F6 | 	mov	local02, result2
06d68     FF 22 02 F6 | 	mov	local03, result3
06d6c                 | ' 
06d6c                 | ' t1=pop() :varnum=t1.result.uresult
06d6c                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06d6c     78 00 00 FF 
06d70     AC E5 05 F1 | 	add	objptr, ##61868
06d74     F2 12 02 FB | 	rdlong	arg01, objptr
06d78     09 25 02 F6 | 	mov	local04, arg01
06d7c     02 24 66 F0 | 	shl	local04, #2
06d80     09 25 02 F1 | 	add	local04, arg01
06d84     02 24 66 F0 | 	shl	local04, #2
06d88     07 00 00 FF 
06d8c     40 E5 85 F1 | 	sub	objptr, ##3904
06d90     F2 24 02 F1 | 	add	local04, objptr
06d94     08 24 06 F1 | 	add	local04, #8
06d98     12 25 02 FB | 	rdlong	local04, local04
06d9c     0F 25 0A F2 | 	cmp	local04, local01 wz
06da0     71 00 00 FF 
06da4     6C E4 85 F1 | 	sub	objptr, ##57964
06da8     0C 00 90 AD |  if_e	jmp	#LR__0590
06dac     25 12 06 F6 | 	mov	arg01, #37
06db0     4C B8 B0 FD | 	call	#_printerror
06db4     28 02 90 FD | 	jmp	#LR__0594
06db8                 | LR__0590
06db8     78 00 00 FF 
06dbc     AC E5 05 F1 | 	add	objptr, ##61868
06dc0     F2 12 02 FB | 	rdlong	arg01, objptr
06dc4     09 25 02 F6 | 	mov	local04, arg01
06dc8     02 24 66 F0 | 	shl	local04, #2
06dcc     09 25 02 F1 | 	add	local04, arg01
06dd0     02 24 66 F0 | 	shl	local04, #2
06dd4     07 00 00 FF 
06dd8     40 E5 85 F1 | 	sub	objptr, ##3904
06ddc     F2 24 02 F1 | 	add	local04, objptr
06de0     0C 24 06 F1 | 	add	local04, #12
06de4     12 25 02 FB | 	rdlong	local04, local04
06de8     0F 13 02 F6 | 	mov	arg01, local01
06dec     04 12 66 F0 | 	shl	arg01, #4
06df0     3D 00 00 FF 
06df4     90 E4 85 F1 | 	sub	objptr, ##31376
06df8     F2 12 02 F1 | 	add	arg01, objptr
06dfc     0F FF 01 F6 | 	mov	result3, local01
06e00     04 FE 65 F0 | 	shl	result3, #4
06e04     F2 FE 01 F1 | 	add	result3, objptr
06e08     04 FE 05 F1 | 	add	result3, #4
06e0c     FF FE 01 FB | 	rdlong	result3, result3
06e10     12 FF 01 F1 | 	add	result3, local04
06e14     04 12 06 F1 | 	add	arg01, #4
06e18     09 FF 61 FC | 	wrlong	result3, arg01
06e1c                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
06e1c                 | ' if fortable(fortop).stepval>0 then
06e1c     44 00 00 FF 
06e20     D0 E5 05 F1 | 	add	objptr, ##35280
06e24     F2 12 02 FB | 	rdlong	arg01, objptr
06e28     09 25 02 F6 | 	mov	local04, arg01
06e2c     02 24 66 F0 | 	shl	local04, #2
06e30     09 25 02 F1 | 	add	local04, arg01
06e34     02 24 66 F0 | 	shl	local04, #2
06e38     07 00 00 FF 
06e3c     40 E5 85 F1 | 	sub	objptr, ##3904
06e40     F2 24 02 F1 | 	add	local04, objptr
06e44     0C 24 06 F1 | 	add	local04, #12
06e48     12 25 02 FB | 	rdlong	local04, local04
06e4c     01 24 56 F2 | 	cmps	local04, #1 wc
06e50     71 00 00 FF 
06e54     6C E4 85 F1 | 	sub	objptr, ##57964
06e58     78 00 90 CD |  if_b	jmp	#LR__0591
06e5c                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
06e5c     04 1E 66 F0 | 	shl	local01, #4
06e60     33 00 00 FF 
06e64     DC E5 05 F1 | 	add	objptr, ##26588
06e68     F2 1E 02 F1 | 	add	local01, objptr
06e6c     44 00 00 FF 
06e70     D0 E5 05 F1 | 	add	objptr, ##35280
06e74     F2 24 02 FB | 	rdlong	local04, objptr
06e78     12 13 02 F6 | 	mov	arg01, local04
06e7c     02 12 66 F0 | 	shl	arg01, #2
06e80     12 13 02 F1 | 	add	arg01, local04
06e84     02 12 66 F0 | 	shl	arg01, #2
06e88     07 00 00 FF 
06e8c     40 E5 85 F1 | 	sub	objptr, ##3904
06e90     F2 12 02 F1 | 	add	arg01, objptr
06e94     04 1E 06 F1 | 	add	local01, #4
06e98     0F 25 02 FB | 	rdlong	local04, local01
06e9c     10 12 06 F1 | 	add	arg01, #16
06ea0     09 13 02 FB | 	rdlong	arg01, arg01
06ea4     09 25 5A F2 | 	cmps	local04, arg01 wcz
06ea8     71 00 00 FF 
06eac     6C E4 85 F1 | 	sub	objptr, ##57964
06eb0     9C 00 90 ED |  if_be	jmp	#LR__0593
06eb4     78 00 00 FF 
06eb8     AC E5 05 F1 | 	add	objptr, ##61868
06ebc     F2 24 02 FB | 	rdlong	local04, objptr
06ec0     01 24 86 F1 | 	sub	local04, #1
06ec4     F2 24 62 FC | 	wrlong	local04, objptr
06ec8     78 00 00 FF 
06ecc     AC E5 85 F1 | 	sub	objptr, ##61868
06ed0     0C 01 90 FD | 	jmp	#LR__0594
06ed4                 | LR__0591
06ed4                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
06ed4     0F 13 02 F6 | 	mov	arg01, local01
06ed8     04 12 66 F0 | 	shl	arg01, #4
06edc     33 00 00 FF 
06ee0     DC E5 05 F1 | 	add	objptr, ##26588
06ee4     F2 12 02 F1 | 	add	arg01, objptr
06ee8     44 00 00 FF 
06eec     D0 E5 05 F1 | 	add	objptr, ##35280
06ef0     F2 24 02 FB | 	rdlong	local04, objptr
06ef4     12 1F 02 F6 | 	mov	local01, local04
06ef8     02 1E 66 F0 | 	shl	local01, #2
06efc     12 1F 02 F1 | 	add	local01, local04
06f00     02 1E 66 F0 | 	shl	local01, #2
06f04     07 00 00 FF 
06f08     40 E5 85 F1 | 	sub	objptr, ##3904
06f0c     F2 1E 02 F1 | 	add	local01, objptr
06f10     04 12 06 F1 | 	add	arg01, #4
06f14     09 13 02 FB | 	rdlong	arg01, arg01
06f18     10 1E 06 F1 | 	add	local01, #16
06f1c     0F 1F 02 FB | 	rdlong	local01, local01
06f20     0F 13 52 F2 | 	cmps	arg01, local01 wc
06f24     71 00 00 FF 
06f28     6C E4 85 F1 | 	sub	objptr, ##57964
06f2c     20 00 90 3D |  if_ae	jmp	#LR__0592
06f30     78 00 00 FF 
06f34     AC E5 05 F1 | 	add	objptr, ##61868
06f38     F2 24 02 FB | 	rdlong	local04, objptr
06f3c     01 24 86 F1 | 	sub	local04, #1
06f40     F2 24 62 FC | 	wrlong	local04, objptr
06f44     78 00 00 FF 
06f48     AC E5 85 F1 | 	sub	objptr, ##61868
06f4c     90 00 90 FD | 	jmp	#LR__0594
06f50                 | LR__0592
06f50                 | LR__0593
06f50     78 00 00 FF 
06f54     AC E5 05 F1 | 	add	objptr, ##61868
06f58     F2 1E 02 FB | 	rdlong	local01, objptr
06f5c     0F 25 02 F6 | 	mov	local04, local01
06f60     02 24 66 F0 | 	shl	local04, #2
06f64     0F 25 02 F1 | 	add	local04, local01
06f68     02 24 66 F0 | 	shl	local04, #2
06f6c     07 00 00 FF 
06f70     40 E5 85 F1 | 	sub	objptr, ##3904
06f74     F2 24 02 F1 | 	add	local04, objptr
06f78     12 25 02 FB | 	rdlong	local04, local04
06f7c     07 00 00 FF 
06f80     18 E5 05 F1 | 	add	objptr, ##3864
06f84     F2 24 62 FC | 	wrlong	local04, objptr
06f88     28 E4 05 F1 | 	add	objptr, #40
06f8c     F2 1E 02 FB | 	rdlong	local01, objptr
06f90     0F 25 02 F6 | 	mov	local04, local01
06f94     02 24 66 F0 | 	shl	local04, #2
06f98     0F 25 02 F1 | 	add	local04, local01
06f9c     02 24 66 F0 | 	shl	local04, #2
06fa0     07 00 00 FF 
06fa4     40 E5 85 F1 | 	sub	objptr, ##3904
06fa8     F2 24 02 F1 | 	add	local04, objptr
06fac     04 24 06 F1 | 	add	local04, #4
06fb0     12 25 02 FB | 	rdlong	local04, local04
06fb4     07 00 00 FF 
06fb8     1C E5 05 F1 | 	add	objptr, ##3868
06fbc     F2 24 62 FC | 	wrlong	local04, objptr
06fc0     0F 00 00 FF 
06fc4     38 E5 85 F1 | 	sub	objptr, ##7992
06fc8     F2 24 02 FB | 	rdlong	local04, objptr
06fcc     01 24 86 F1 | 	sub	local04, #1
06fd0     04 E4 05 F1 | 	add	objptr, #4
06fd4     F2 24 62 FC | 	wrlong	local04, objptr
06fd8     69 00 00 FF 
06fdc     54 E4 85 F1 | 	sub	objptr, ##53844
06fe0                 | LR__0594
06fe0     A7 F0 03 F6 | 	mov	ptra, fp
06fe4     B2 00 A0 FD | 	call	#popregs_
06fe8                 | _do_next_ret
06fe8     2D 00 64 FD | 	ret
06fec                 | 
06fec                 | ' 
06fec                 | ' 
06fec                 | ' function compile_next() as ulong
06fec                 | _compile_next
06fec     04 4A 05 F6 | 	mov	COUNT_, #4
06ff0     A8 00 A0 FD | 	call	#pushregs_
06ff4     56 00 00 FF 
06ff8     18 E4 05 F1 | 	add	objptr, ##44056
06ffc     F2 12 02 FB | 	rdlong	arg01, objptr
07000     03 12 66 F0 | 	shl	arg01, #3
07004     02 00 00 FF 
07008     38 E4 85 F1 | 	sub	objptr, ##1080
0700c     F2 12 02 F1 | 	add	arg01, objptr
07010     09 1F 02 FB | 	rdlong	local01, arg01
07014                 | ' 
07014                 | ' varname$=lparts(ct).part$ 
07014                 | ' 'suffix$=right$(varname$,1)
07014                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07014                 | ' if varnum=0 then compile_error(35)  : return 35
07014     04 E4 85 F1 | 	sub	objptr, #4
07018     F2 14 0A FB | 	rdlong	arg02, objptr wz
0701c     53 00 00 FF 
07020     DC E5 85 F1 | 	sub	objptr, ##42972
07024     10 00 90 5D |  if_ne	jmp	#LR__0600
07028     23 12 06 F6 | 	mov	arg01, #35
0702c     4C E0 BF FD | 	call	#_compile_error
07030     23 FA 05 F6 | 	mov	result1, #35
07034     58 01 90 FD | 	jmp	#LR__0604
07038                 | LR__0600
07038     01 20 66 F6 | 	neg	local02, #1
0703c                 | ' j=-1
0703c                 | ' for i=0 to varnum-1
0703c     00 22 06 F6 | 	mov	local03, #0
07040     53 00 00 FF 
07044     DC E5 05 F1 | 	add	objptr, ##42972
07048     F2 24 02 FB | 	rdlong	local04, objptr
0704c     53 00 00 FF 
07050     DC E5 85 F1 | 	sub	objptr, ##42972
07054                 | LR__0601
07054     12 23 12 F2 | 	cmp	local03, local04 wc
07058     38 00 90 3D |  if_ae	jmp	#LR__0602
0705c                 | '   if variables(i).name=varname$ then j=i : exit
0705c     11 15 02 F6 | 	mov	arg02, local03
07060     04 14 66 F0 | 	shl	arg02, #4
07064     33 00 00 FF 
07068     DC E5 05 F1 | 	add	objptr, ##26588
0706c     F2 14 02 F1 | 	add	arg02, objptr
07070     0A 13 02 FB | 	rdlong	arg01, arg02
07074     0F 15 02 F6 | 	mov	arg02, local01
07078     33 00 00 FF 
0707c     DC E5 85 F1 | 	sub	objptr, ##26588
07080     08 EB B0 FD | 	call	#__system___string_cmp
07084     00 FA 0D F2 | 	cmp	result1, #0 wz
07088     11 21 02 A6 |  if_e	mov	local02, local03
0708c     01 22 06 51 |  if_ne	add	local03, #1
07090     C0 FF 9F 5D |  if_ne	jmp	#LR__0601
07094                 | LR__0602
07094                 | ' if j=-1 then compile_error(35) : return 35
07094     FF FF 7F FF 
07098     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0709c     10 00 90 5D |  if_ne	jmp	#LR__0603
070a0     23 12 06 F6 | 	mov	arg01, #35
070a4     D4 DF BF FD | 	call	#_compile_error
070a8     23 FA 05 F6 | 	mov	result1, #35
070ac     E0 00 90 FD | 	jmp	#LR__0604
070b0                 | LR__0603
070b0     69 00 00 FF 
070b4     50 E4 05 F1 | 	add	objptr, ##53840
070b8     F2 24 02 FB | 	rdlong	local04, objptr
070bc     12 23 02 F6 | 	mov	local03, local04
070c0     01 22 66 F0 | 	shl	local03, #1
070c4     12 23 02 F1 | 	add	local03, local04
070c8     02 22 66 F0 | 	shl	local03, #2
070cc     03 00 00 FF 
070d0     00 E4 85 F1 | 	sub	objptr, ##1536
070d4     F2 22 02 F1 | 	add	local03, objptr
070d8     08 22 06 F1 | 	add	local03, #8
070dc     11 39 68 FC | 	wrlong	#28, local03
070e0     03 00 00 FF 
070e4     00 E4 05 F1 | 	add	objptr, ##1536
070e8     F2 24 02 FB | 	rdlong	local04, objptr
070ec     12 23 02 F6 | 	mov	local03, local04
070f0     01 22 66 F0 | 	shl	local03, #1
070f4     12 23 02 F1 | 	add	local03, local04
070f8     02 22 66 F0 | 	shl	local03, #2
070fc     03 00 00 FF 
07100     00 E4 85 F1 | 	sub	objptr, ##1536
07104     F2 22 02 F1 | 	add	local03, objptr
07108     11 21 62 FC | 	wrlong	local02, local03
0710c     03 00 00 FF 
07110     00 E4 05 F1 | 	add	objptr, ##1536
07114     F2 24 02 FB | 	rdlong	local04, objptr
07118     01 24 06 F1 | 	add	local04, #1
0711c     F2 24 62 FC | 	wrlong	local04, objptr
07120     12 23 02 F6 | 	mov	local03, local04
07124     01 22 66 F0 | 	shl	local03, #1
07128     12 23 02 F1 | 	add	local03, local04
0712c     02 22 66 F0 | 	shl	local03, #2
07130     03 00 00 FF 
07134     00 E4 85 F1 | 	sub	objptr, ##1536
07138     F2 22 02 F1 | 	add	local03, objptr
0713c     08 22 06 F1 | 	add	local03, #8
07140     11 97 68 FC | 	wrlong	#75, local03
07144     03 00 00 FF 
07148     00 E4 05 F1 | 	add	objptr, ##1536
0714c     F2 24 02 FB | 	rdlong	local04, objptr
07150     12 23 02 F6 | 	mov	local03, local04
07154     01 22 66 F0 | 	shl	local03, #1
07158     12 23 02 F1 | 	add	local03, local04
0715c     02 22 66 F0 | 	shl	local03, #2
07160     03 00 00 FF 
07164     00 E4 85 F1 | 	sub	objptr, ##1536
07168     F2 22 02 F1 | 	add	local03, objptr
0716c     11 01 68 FC | 	wrlong	#0, local03
07170     03 00 00 FF 
07174     00 E4 05 F1 | 	add	objptr, ##1536
07178     F2 24 02 FB | 	rdlong	local04, objptr
0717c     01 24 06 F1 | 	add	local04, #1
07180     F2 24 62 FC | 	wrlong	local04, objptr
07184     69 00 00 FF 
07188     50 E4 85 F1 | 	sub	objptr, ##53840
0718c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0718c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0718c                 | ' return 0
0718c     00 FA 05 F6 | 	mov	result1, #0
07190                 | LR__0604
07190     A7 F0 03 F6 | 	mov	ptra, fp
07194     B2 00 A0 FD | 	call	#popregs_
07198                 | _compile_next_ret
07198     2D 00 64 FD | 	ret
0719c                 | 
0719c                 | ' 
0719c                 | ' 
0719c                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
0719c                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
0719c                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
0719c                 | ' 
0719c                 | ' 
0719c                 | ' function compile_goto( ) as ulong
0719c                 | _compile_goto
0719c     03 4A 05 F6 | 	mov	COUNT_, #3
071a0     A8 00 A0 FD | 	call	#pushregs_
071a4     28 F0 07 F1 | 	add	ptra, #40
071a8                 | ' 
071a8                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
071a8     56 00 00 FF 
071ac     18 E4 05 F1 | 	add	objptr, ##44056
071b0     F2 16 02 FB | 	rdlong	arg03, objptr
071b4     03 16 66 F0 | 	shl	arg03, #3
071b8     02 00 00 FF 
071bc     38 E4 85 F1 | 	sub	objptr, ##1080
071c0     F2 16 02 F1 | 	add	arg03, objptr
071c4     04 16 06 F1 | 	add	arg03, #4
071c8     0B 17 02 FB | 	rdlong	arg03, arg03
071cc     01 00 00 FF 
071d0     00 16 0E F2 | 	cmp	arg03, ##512 wz
071d4     53 00 00 FF 
071d8     E0 E5 85 F1 | 	sub	objptr, ##42976
071dc     CC 02 90 5D |  if_ne	jmp	#LR__0615
071e0     56 00 00 FF 
071e4     18 E4 05 F1 | 	add	objptr, ##44056
071e8     F2 16 02 FB | 	rdlong	arg03, objptr
071ec     01 16 06 F1 | 	add	arg03, #1
071f0     03 16 66 F0 | 	shl	arg03, #3
071f4     02 00 00 FF 
071f8     38 E4 85 F1 | 	sub	objptr, ##1080
071fc     F2 16 02 F1 | 	add	arg03, objptr
07200     04 16 06 F1 | 	add	arg03, #4
07204     0B 17 02 FB | 	rdlong	arg03, arg03
07208     FE 17 0E F2 | 	cmp	arg03, #510 wz
0720c     53 00 00 FF 
07210     E0 E5 85 F1 | 	sub	objptr, ##42976
07214     94 02 90 5D |  if_ne	jmp	#LR__0615
07218     56 00 00 FF 
0721c     18 E4 05 F1 | 	add	objptr, ##44056
07220     F2 16 02 FB | 	rdlong	arg03, objptr
07224     03 16 66 F0 | 	shl	arg03, #3
07228     02 00 00 FF 
0722c     38 E4 85 F1 | 	sub	objptr, ##1080
07230     F2 16 02 F1 | 	add	arg03, objptr
07234     0B 13 02 FB | 	rdlong	arg01, arg03
07238     00 14 06 F6 | 	mov	arg02, #0
0723c     53 00 00 FF 
07240     E0 E5 85 F1 | 	sub	objptr, ##42976
07244     A8 19 B1 FD | 	call	#__system____builtin_atoi
07248     04 4E 05 F1 | 	add	fp, #4
0724c     A7 FA 61 FC | 	wrlong	result1, fp
07250     69 00 00 FF 
07254     50 E4 05 F1 | 	add	objptr, ##53840
07258     F2 1E 02 FB | 	rdlong	local01, objptr
0725c     0F 21 02 F6 | 	mov	local02, local01
07260     01 20 66 F0 | 	shl	local02, #1
07264     0F 21 02 F1 | 	add	local02, local01
07268     02 20 66 F0 | 	shl	local02, #2
0726c     03 00 00 FF 
07270     00 E4 85 F1 | 	sub	objptr, ##1536
07274     F2 20 02 F1 | 	add	local02, objptr
07278     08 20 06 F1 | 	add	local02, #8
0727c     10 9D 68 FC | 	wrlong	#78, local02
07280     03 00 00 FF 
07284     08 E4 05 F1 | 	add	objptr, ##1544
07288     F2 22 02 FB | 	rdlong	local03, objptr
0728c     69 00 00 FF 
07290     58 E4 85 F1 | 	sub	objptr, ##53848
07294     04 4E 05 F1 | 	add	fp, #4
07298     A7 22 62 FC | 	wrlong	local03, fp
0729c     08 4E 85 F1 | 	sub	fp, #8
072a0                 | ' 
072a0                 | '   gotoline=val%(lparts(ct).part$) 
072a0                 | '   compiledline(lineptr).result_type=token_fast_goto
072a0                 | ' ' now find a pointer to goto
072a0                 | '   gotoptr=programstart
072a0                 | '   do
072a0                 | LR__0610
072a0     10 4E 05 F1 | 	add	fp, #16
072a4     A7 12 02 F6 | 	mov	arg01, fp
072a8     08 4E 85 F1 | 	sub	fp, #8
072ac     A7 14 02 FB | 	rdlong	arg02, fp
072b0     08 4E 85 F1 | 	sub	fp, #8
072b4     18 16 06 F6 | 	mov	arg03, #24
072b8     0B 00 00 FF 
072bc     C0 E4 05 F1 | 	add	objptr, ##5824
072c0     B4 DD B0 FD | 	call	#_psram_spin2_read1
072c4     0B 00 00 FF 
072c8     C0 E4 85 F1 | 	sub	objptr, ##5824
072cc                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
072cc                 | '     if gotoheader(0)<>$FFFFFFFF then
072cc     10 4E 05 F1 | 	add	fp, #16
072d0     A7 22 02 FB | 	rdlong	local03, fp
072d4     10 4E 85 F1 | 	sub	fp, #16
072d8     FF FF 7F FF 
072dc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
072e0     24 00 90 AD |  if_e	jmp	#LR__0611
072e4     08 4E 05 F1 | 	add	fp, #8
072e8     A7 22 02 FB | 	rdlong	local03, fp
072ec     04 4E 05 F1 | 	add	fp, #4
072f0     A7 22 62 FC | 	wrlong	local03, fp
072f4     18 4E 05 F1 | 	add	fp, #24
072f8     A7 22 02 FB | 	rdlong	local03, fp
072fc     1C 4E 85 F1 | 	sub	fp, #28
07300     A7 22 62 FC | 	wrlong	local03, fp
07304     08 4E 85 F1 | 	sub	fp, #8
07308                 | LR__0611
07308     24 4E 05 F1 | 	add	fp, #36
0730c     A7 22 02 FB | 	rdlong	local03, fp
07310     24 4E 85 F1 | 	sub	fp, #36
07314     FF FF 3F FF 
07318     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0731c     10 4E 05 51 |  if_ne	add	fp, #16
07320     A7 1E 02 5B |  if_ne	rdlong	local01, fp
07324     10 4E 85 51 |  if_ne	sub	fp, #16
07328     FF FF 7F 5F 
0732c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
07330     1C 00 90 AD |  if_e	jmp	#LR__0612
07334     10 4E 05 F1 | 	add	fp, #16
07338     A7 22 02 FB | 	rdlong	local03, fp
0733c     0C 4E 85 F1 | 	sub	fp, #12
07340     A7 20 02 FB | 	rdlong	local02, fp
07344     04 4E 85 F1 | 	sub	fp, #4
07348     10 23 0A F2 | 	cmp	local03, local02 wz
0734c     50 FF 9F 5D |  if_ne	jmp	#LR__0610
07350                 | LR__0612
07350                 | '   if gotoheader(0)=gotoline then
07350     10 4E 05 F1 | 	add	fp, #16
07354     A7 22 02 FB | 	rdlong	local03, fp
07358     0C 4E 85 F1 | 	sub	fp, #12
0735c     A7 1E 02 FB | 	rdlong	local01, fp
07360     04 4E 85 F1 | 	sub	fp, #4
07364     0F 23 0A F2 | 	cmp	local03, local01 wz
07368     7C 00 90 5D |  if_ne	jmp	#LR__0613
0736c     69 00 00 FF 
07370     50 E4 05 F1 | 	add	objptr, ##53840
07374     F2 1E 02 FB | 	rdlong	local01, objptr
07378     0F 21 02 F6 | 	mov	local02, local01
0737c     01 20 66 F0 | 	shl	local02, #1
07380     0F 21 02 F1 | 	add	local02, local01
07384     02 20 66 F0 | 	shl	local02, #2
07388     03 00 00 FF 
0738c     00 E4 85 F1 | 	sub	objptr, ##1536
07390     F2 20 02 F1 | 	add	local02, objptr
07394     0C 4E 05 F1 | 	add	fp, #12
07398     A7 22 02 FB | 	rdlong	local03, fp
0739c     10 23 62 FC | 	wrlong	local03, local02
073a0     03 00 00 FF 
073a4     00 E4 05 F1 | 	add	objptr, ##1536
073a8     F2 1E 02 FB | 	rdlong	local01, objptr
073ac     0F 21 02 F6 | 	mov	local02, local01
073b0     01 20 66 F0 | 	shl	local02, #1
073b4     0F 21 02 F1 | 	add	local02, local01
073b8     02 20 66 F0 | 	shl	local02, #2
073bc     03 00 00 FF 
073c0     00 E4 85 F1 | 	sub	objptr, ##1536
073c4     F2 20 02 F1 | 	add	local02, objptr
073c8     08 4E 85 F1 | 	sub	fp, #8
073cc     A7 22 02 FB | 	rdlong	local03, fp
073d0     04 4E 85 F1 | 	sub	fp, #4
073d4     04 20 06 F1 | 	add	local02, #4
073d8     10 23 62 FC | 	wrlong	local03, local02
073dc     66 00 00 FF 
073e0     50 E4 85 F1 | 	sub	objptr, ##52304
073e4     A4 00 90 FD | 	jmp	#LR__0614
073e8                 | LR__0613
073e8     69 00 00 FF 
073ec     50 E4 05 F1 | 	add	objptr, ##53840
073f0     F2 1E 02 FB | 	rdlong	local01, objptr
073f4     0F 21 02 F6 | 	mov	local02, local01
073f8     01 20 66 F0 | 	shl	local02, #1
073fc     0F 21 02 F1 | 	add	local02, local01
07400     02 20 66 F0 | 	shl	local02, #2
07404     03 00 00 FF 
07408     00 E4 85 F1 | 	sub	objptr, ##1536
0740c     F2 20 02 F1 | 	add	local02, objptr
07410     00 00 C0 FF 
07414     10 01 68 FC | 	wrlong	##-2147483648, local02
07418     03 00 00 FF 
0741c     00 E4 05 F1 | 	add	objptr, ##1536
07420     F2 1E 02 FB | 	rdlong	local01, objptr
07424     0F 21 02 F6 | 	mov	local02, local01
07428     01 20 66 F0 | 	shl	local02, #1
0742c     0F 21 02 F1 | 	add	local02, local01
07430     02 20 66 F0 | 	shl	local02, #2
07434     03 00 00 FF 
07438     00 E4 85 F1 | 	sub	objptr, ##1536
0743c     F2 20 02 F1 | 	add	local02, objptr
07440     04 4E 05 F1 | 	add	fp, #4
07444     A7 22 02 FB | 	rdlong	local03, fp
07448     04 4E 85 F1 | 	sub	fp, #4
0744c     04 20 06 F1 | 	add	local02, #4
07450     10 23 62 FC | 	wrlong	local03, local02
07454     03 00 00 FF 
07458     00 E4 05 F1 | 	add	objptr, ##1536
0745c     F2 1E 02 FB | 	rdlong	local01, objptr
07460     0F 21 02 F6 | 	mov	local02, local01
07464     01 20 66 F0 | 	shl	local02, #1
07468     0F 21 02 F1 | 	add	local02, local01
0746c     02 20 66 F0 | 	shl	local02, #2
07470     03 00 00 FF 
07474     00 E4 85 F1 | 	sub	objptr, ##1536
07478     F2 20 02 F1 | 	add	local02, objptr
0747c     08 20 06 F1 | 	add	local02, #8
07480     10 A7 68 FC | 	wrlong	#83, local02
07484     66 00 00 FF 
07488     50 E4 85 F1 | 	sub	objptr, ##52304
0748c                 | LR__0614
0748c     69 00 00 FF 
07490     50 E4 05 F1 | 	add	objptr, ##53840
07494     F2 22 02 FB | 	rdlong	local03, objptr
07498     01 22 06 F1 | 	add	local03, #1
0749c     F2 22 62 FC | 	wrlong	local03, objptr
074a0     69 00 00 FF 
074a4     50 E4 85 F1 | 	sub	objptr, ##53840
074a8     40 00 90 FD | 	jmp	#LR__0616
074ac                 | LR__0615
074ac                 | '    print "We have a slow goto, todo  "
074ac     00 12 06 F6 | 	mov	arg01, #0
074b0     64 3C B1 FD | 	call	#__system___getiolock_0362
074b4     FD 12 02 F6 | 	mov	arg01, result1
074b8     A8 E6 B0 FD | 	call	#__system___lockmem
074bc     28 01 00 FF 
074c0     D6 14 06 F6 | 	mov	arg02, ##@LR__4350
074c4     00 12 06 F6 | 	mov	arg01, #0
074c8     00 16 06 F6 | 	mov	arg03, #0
074cc     88 F3 B0 FD | 	call	#__system___basic_print_string
074d0     00 12 06 F6 | 	mov	arg01, #0
074d4     0A 14 06 F6 | 	mov	arg02, #10
074d8     00 16 06 F6 | 	mov	arg03, #0
074dc     20 F3 B0 FD | 	call	#__system___basic_print_char
074e0     00 12 06 F6 | 	mov	arg01, #0
074e4     30 3C B1 FD | 	call	#__system___getiolock_0362
074e8     FD 00 68 FC | 	wrlong	#0, result1
074ec                 | LR__0616
074ec                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
074ec                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
074ec                 | ' return 0
074ec     00 FA 05 F6 | 	mov	result1, #0
074f0     A7 F0 03 F6 | 	mov	ptra, fp
074f4     B2 00 A0 FD | 	call	#popregs_
074f8                 | _compile_goto_ret
074f8     2D 00 64 FD | 	ret
074fc                 | 
074fc                 | ' 
074fc                 | ' 
074fc                 | ' 
074fc                 | ' 
074fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074fc                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
074fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074fc                 | ' 
074fc                 | ' 
074fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074fc                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
074fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074fc                 | ' 
074fc                 | ' 
074fc                 | ' function expr() as integer 
074fc                 | _expr
074fc     07 4A 05 F6 | 	mov	COUNT_, #7
07500     A8 00 A0 FD | 	call	#pushregs_
07504                 | _expr_enter
07504     56 00 00 FF 
07508     18 E4 05 F1 | 	add	objptr, ##44056
0750c     F2 24 02 FB | 	rdlong	local04, objptr
07510     03 24 66 F0 | 	shl	local04, #3
07514     02 00 00 FF 
07518     38 E4 85 F1 | 	sub	objptr, ##1080
0751c     F2 24 02 F1 | 	add	local04, objptr
07520     04 24 06 F1 | 	add	local04, #4
07524     12 27 02 FB | 	rdlong	local05, local04
07528                 | ' 
07528                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
07528     FE 27 0E F2 | 	cmp	local05, #510 wz
0752c     53 00 00 FF 
07530     E0 E5 85 F1 | 	sub	objptr, ##42976
07534     C4 00 90 5D |  if_ne	jmp	#LR__0620
07538     1D 1E 06 F6 | 	mov	local01, #29
0753c     FF 22 06 F6 | 	mov	local03, #255
07540     0F 29 02 F6 | 	mov	local06, local01
07544     10 2B 02 F6 | 	mov	local07, local02
07548     11 1F 02 F6 | 	mov	local01, local03
0754c     69 00 00 FF 
07550     50 E4 05 F1 | 	add	objptr, ##53840
07554     F2 26 02 FB | 	rdlong	local05, objptr
07558     13 25 02 F6 | 	mov	local04, local05
0755c     01 24 66 F0 | 	shl	local04, #1
07560     13 25 02 F1 | 	add	local04, local05
07564     02 24 66 F0 | 	shl	local04, #2
07568     03 00 00 FF 
0756c     00 E4 85 F1 | 	sub	objptr, ##1536
07570     F2 24 02 F1 | 	add	local04, objptr
07574     12 29 62 FC | 	wrlong	local06, local04
07578     03 00 00 FF 
0757c     00 E4 05 F1 | 	add	objptr, ##1536
07580     F2 28 02 FB | 	rdlong	local06, objptr
07584     14 27 02 F6 | 	mov	local05, local06
07588     01 26 66 F0 | 	shl	local05, #1
0758c     14 27 02 F1 | 	add	local05, local06
07590     02 26 66 F0 | 	shl	local05, #2
07594     03 00 00 FF 
07598     00 E4 85 F1 | 	sub	objptr, ##1536
0759c     F2 26 02 F1 | 	add	local05, objptr
075a0     04 26 06 F1 | 	add	local05, #4
075a4     13 2B 62 FC | 	wrlong	local07, local05
075a8     03 00 00 FF 
075ac     00 E4 05 F1 | 	add	objptr, ##1536
075b0     F2 2A 02 FB | 	rdlong	local07, objptr
075b4     15 29 02 F6 | 	mov	local06, local07
075b8     01 28 66 F0 | 	shl	local06, #1
075bc     15 29 02 F1 | 	add	local06, local07
075c0     02 28 66 F0 | 	shl	local06, #2
075c4     03 00 00 FF 
075c8     00 E4 85 F1 | 	sub	objptr, ##1536
075cc     F2 28 02 F1 | 	add	local06, objptr
075d0     08 28 06 F1 | 	add	local06, #8
075d4     14 1F 62 FC | 	wrlong	local01, local06
075d8     03 00 00 FF 
075dc     00 E4 05 F1 | 	add	objptr, ##1536
075e0     F2 28 02 FB | 	rdlong	local06, objptr
075e4     01 28 06 F1 | 	add	local06, #1
075e8     F2 28 62 FC | 	wrlong	local06, objptr
075ec     69 00 00 FF 
075f0     50 E4 85 F1 | 	sub	objptr, ##53840
075f4     1D FA 05 F6 | 	mov	result1, #29
075f8     54 01 90 FD | 	jmp	#LR__0623
075fc                 | LR__0620
075fc     00 1E 06 F6 | 	mov	local01, #0
07600     58 01 B0 FD | 	call	#_addsub
07604     56 00 00 FF 
07608     18 E4 05 F1 | 	add	objptr, ##44056
0760c     F2 24 02 FB | 	rdlong	local04, objptr
07610     03 24 66 F0 | 	shl	local04, #3
07614     02 00 00 FF 
07618     38 E4 85 F1 | 	sub	objptr, ##1080
0761c     F2 24 02 F1 | 	add	local04, objptr
07620     04 24 06 F1 | 	add	local04, #4
07624     12 27 02 FB | 	rdlong	local05, local04
07628                 | ' t3.result.uresult=0
07628                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07628                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07628                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
07628     53 00 00 FF 
0762c     E0 E5 85 F1 | 	sub	objptr, ##42976
07630                 | LR__0621
07630     1B 26 0E F2 | 	cmp	local05, #27 wz
07634     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
07638     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0763c     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
07640     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
07644     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
07648     00 01 90 5D |  if_ne	jmp	#LR__0622
0764c     56 00 00 FF 
07650     18 E4 05 F1 | 	add	objptr, ##44056
07654     F2 28 02 FB | 	rdlong	local06, objptr
07658     01 28 06 F1 | 	add	local06, #1
0765c     F2 28 62 FC | 	wrlong	local06, objptr
07660     56 00 00 FF 
07664     18 E4 85 F1 | 	sub	objptr, ##44056
07668     F0 00 B0 FD | 	call	#_addsub
0766c     13 23 02 F6 | 	mov	local03, local05
07670     0F 29 02 F6 | 	mov	local06, local01
07674     10 2B 02 F6 | 	mov	local07, local02
07678     11 27 02 F6 | 	mov	local05, local03
0767c     69 00 00 FF 
07680     50 E4 05 F1 | 	add	objptr, ##53840
07684     F2 24 02 FB | 	rdlong	local04, objptr
07688     12 FB 01 F6 | 	mov	result1, local04
0768c     01 FA 65 F0 | 	shl	result1, #1
07690     12 FB 01 F1 | 	add	result1, local04
07694     02 FA 65 F0 | 	shl	result1, #2
07698     03 00 00 FF 
0769c     00 E4 85 F1 | 	sub	objptr, ##1536
076a0     F2 FA 01 F1 | 	add	result1, objptr
076a4     FD 28 62 FC | 	wrlong	local06, result1
076a8     03 00 00 FF 
076ac     00 E4 05 F1 | 	add	objptr, ##1536
076b0     F2 28 02 FB | 	rdlong	local06, objptr
076b4     14 25 02 F6 | 	mov	local04, local06
076b8     01 24 66 F0 | 	shl	local04, #1
076bc     14 25 02 F1 | 	add	local04, local06
076c0     02 24 66 F0 | 	shl	local04, #2
076c4     03 00 00 FF 
076c8     00 E4 85 F1 | 	sub	objptr, ##1536
076cc     F2 24 02 F1 | 	add	local04, objptr
076d0     04 24 06 F1 | 	add	local04, #4
076d4     12 2B 62 FC | 	wrlong	local07, local04
076d8     03 00 00 FF 
076dc     00 E4 05 F1 | 	add	objptr, ##1536
076e0     F2 2A 02 FB | 	rdlong	local07, objptr
076e4     15 29 02 F6 | 	mov	local06, local07
076e8     01 28 66 F0 | 	shl	local06, #1
076ec     15 29 02 F1 | 	add	local06, local07
076f0     02 28 66 F0 | 	shl	local06, #2
076f4     03 00 00 FF 
076f8     00 E4 85 F1 | 	sub	objptr, ##1536
076fc     F2 28 02 F1 | 	add	local06, objptr
07700     08 28 06 F1 | 	add	local06, #8
07704     14 27 62 FC | 	wrlong	local05, local06
07708     03 00 00 FF 
0770c     00 E4 05 F1 | 	add	objptr, ##1536
07710     F2 28 02 FB | 	rdlong	local06, objptr
07714     01 28 06 F1 | 	add	local06, #1
07718     F2 28 62 FC | 	wrlong	local06, objptr
0771c     13 00 00 FF 
07720     38 E4 85 F1 | 	sub	objptr, ##9784
07724     F2 24 02 FB | 	rdlong	local04, objptr
07728     03 24 66 F0 | 	shl	local04, #3
0772c     02 00 00 FF 
07730     38 E4 85 F1 | 	sub	objptr, ##1080
07734     F2 24 02 F1 | 	add	local04, objptr
07738     04 24 06 F1 | 	add	local04, #4
0773c     12 27 02 FB | 	rdlong	local05, local04
07740     53 00 00 FF 
07744     E0 E5 85 F1 | 	sub	objptr, ##42976
07748     E4 FE 9F FD | 	jmp	#LR__0621
0774c                 | LR__0622
0774c                 | ' return 0  
0774c     00 FA 05 F6 | 	mov	result1, #0
07750                 | LR__0623
07750     A7 F0 03 F6 | 	mov	ptra, fp
07754     B2 00 A0 FD | 	call	#popregs_
07758                 | _expr_ret
07758     2D 00 64 FD | 	ret
0775c                 | 
0775c                 | ' 
0775c                 | ' 
0775c                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
0775c                 | ' 
0775c                 | ' function addsub() as integer 
0775c                 | _addsub
0775c     07 4A 05 F6 | 	mov	COUNT_, #7
07760     A8 00 A0 FD | 	call	#pushregs_
07764                 | _addsub_enter
07764     00 1E 06 F6 | 	mov	local01, #0
07768     50 01 B0 FD | 	call	#_muldiv
0776c     56 00 00 FF 
07770     18 E4 05 F1 | 	add	objptr, ##44056
07774     F2 24 02 FB | 	rdlong	local04, objptr
07778     03 24 66 F0 | 	shl	local04, #3
0777c     02 00 00 FF 
07780     38 E4 85 F1 | 	sub	objptr, ##1080
07784     F2 24 02 F1 | 	add	local04, objptr
07788     04 24 06 F1 | 	add	local04, #4
0778c     12 27 02 FB | 	rdlong	local05, local04
07790                 | ' t3.result.uresult=0
07790                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07790                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07790                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
07790     53 00 00 FF 
07794     E0 E5 85 F1 | 	sub	objptr, ##42976
07798                 | LR__0630
07798     01 26 0E F2 | 	cmp	local05, #1 wz
0779c     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
077a0     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
077a4     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
077a8     00 01 90 5D |  if_ne	jmp	#LR__0631
077ac     56 00 00 FF 
077b0     18 E4 05 F1 | 	add	objptr, ##44056
077b4     F2 24 02 FB | 	rdlong	local04, objptr
077b8     01 24 06 F1 | 	add	local04, #1
077bc     F2 24 62 FC | 	wrlong	local04, objptr
077c0     56 00 00 FF 
077c4     18 E4 85 F1 | 	sub	objptr, ##44056
077c8     F0 00 B0 FD | 	call	#_muldiv
077cc     13 23 02 F6 | 	mov	local03, local05
077d0     0F 29 02 F6 | 	mov	local06, local01
077d4     10 2B 02 F6 | 	mov	local07, local02
077d8     11 27 02 F6 | 	mov	local05, local03
077dc     69 00 00 FF 
077e0     50 E4 05 F1 | 	add	objptr, ##53840
077e4     F2 24 02 FB | 	rdlong	local04, objptr
077e8     12 FB 01 F6 | 	mov	result1, local04
077ec     01 FA 65 F0 | 	shl	result1, #1
077f0     12 FB 01 F1 | 	add	result1, local04
077f4     02 FA 65 F0 | 	shl	result1, #2
077f8     03 00 00 FF 
077fc     00 E4 85 F1 | 	sub	objptr, ##1536
07800     F2 FA 01 F1 | 	add	result1, objptr
07804     FD 28 62 FC | 	wrlong	local06, result1
07808     03 00 00 FF 
0780c     00 E4 05 F1 | 	add	objptr, ##1536
07810     F2 28 02 FB | 	rdlong	local06, objptr
07814     14 25 02 F6 | 	mov	local04, local06
07818     01 24 66 F0 | 	shl	local04, #1
0781c     14 25 02 F1 | 	add	local04, local06
07820     02 24 66 F0 | 	shl	local04, #2
07824     03 00 00 FF 
07828     00 E4 85 F1 | 	sub	objptr, ##1536
0782c     F2 24 02 F1 | 	add	local04, objptr
07830     04 24 06 F1 | 	add	local04, #4
07834     12 2B 62 FC | 	wrlong	local07, local04
07838     03 00 00 FF 
0783c     00 E4 05 F1 | 	add	objptr, ##1536
07840     F2 2A 02 FB | 	rdlong	local07, objptr
07844     15 29 02 F6 | 	mov	local06, local07
07848     01 28 66 F0 | 	shl	local06, #1
0784c     15 29 02 F1 | 	add	local06, local07
07850     02 28 66 F0 | 	shl	local06, #2
07854     03 00 00 FF 
07858     00 E4 85 F1 | 	sub	objptr, ##1536
0785c     F2 28 02 F1 | 	add	local06, objptr
07860     08 28 06 F1 | 	add	local06, #8
07864     14 27 62 FC | 	wrlong	local05, local06
07868     03 00 00 FF 
0786c     00 E4 05 F1 | 	add	objptr, ##1536
07870     F2 28 02 FB | 	rdlong	local06, objptr
07874     01 28 06 F1 | 	add	local06, #1
07878     F2 28 62 FC | 	wrlong	local06, objptr
0787c     13 00 00 FF 
07880     38 E4 85 F1 | 	sub	objptr, ##9784
07884     F2 24 02 FB | 	rdlong	local04, objptr
07888     03 24 66 F0 | 	shl	local04, #3
0788c     02 00 00 FF 
07890     38 E4 85 F1 | 	sub	objptr, ##1080
07894     F2 24 02 F1 | 	add	local04, objptr
07898     04 24 06 F1 | 	add	local04, #4
0789c     12 27 02 FB | 	rdlong	local05, local04
078a0     53 00 00 FF 
078a4     E0 E5 85 F1 | 	sub	objptr, ##42976
078a8     EC FE 9F FD | 	jmp	#LR__0630
078ac                 | LR__0631
078ac                 | '   return 0
078ac     00 FA 05 F6 | 	mov	result1, #0
078b0     A7 F0 03 F6 | 	mov	ptra, fp
078b4     B2 00 A0 FD | 	call	#popregs_
078b8                 | _addsub_ret
078b8     2D 00 64 FD | 	ret
078bc                 | 
078bc                 | ' 
078bc                 | ' sub muldiv()
078bc                 | _muldiv
078bc     08 4A 05 F6 | 	mov	COUNT_, #8
078c0     A8 00 A0 FD | 	call	#pushregs_
078c4                 | _muldiv_enter
078c4     00 1E 06 F6 | 	mov	local01, #0
078c8     58 01 B0 FD | 	call	#_getvalue
078cc     56 00 00 FF 
078d0     18 E4 05 F1 | 	add	objptr, ##44056
078d4     F2 24 02 FB | 	rdlong	local04, objptr
078d8     03 24 66 F0 | 	shl	local04, #3
078dc     02 00 00 FF 
078e0     38 E4 85 F1 | 	sub	objptr, ##1080
078e4     F2 24 02 F1 | 	add	local04, objptr
078e8     04 24 06 F1 | 	add	local04, #4
078ec     12 27 02 FB | 	rdlong	local05, local04
078f0                 | ' t3.result.uresult=0
078f0                 | ' getvalue()    
078f0                 | ' op = lparts(ct).token
078f0                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
078f0     53 00 00 FF 
078f4     E0 E5 85 F1 | 	sub	objptr, ##42976
078f8                 | LR__0640
078f8     05 26 0E F2 | 	cmp	local05, #5 wz
078fc     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
07900     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
07904     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
07908     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0790c     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
07910     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
07914     00 01 90 5D |  if_ne	jmp	#LR__0641
07918     56 00 00 FF 
0791c     18 E4 05 F1 | 	add	objptr, ##44056
07920     F2 24 02 FB | 	rdlong	local04, objptr
07924     01 24 06 F1 | 	add	local04, #1
07928     F2 24 62 FC | 	wrlong	local04, objptr
0792c     56 00 00 FF 
07930     18 E4 85 F1 | 	sub	objptr, ##44056
07934     EC 00 B0 FD | 	call	#_getvalue
07938     13 23 02 F6 | 	mov	local03, local05
0793c     0F 29 02 F6 | 	mov	local06, local01
07940     10 2B 02 F6 | 	mov	local07, local02
07944     11 27 02 F6 | 	mov	local05, local03
07948     69 00 00 FF 
0794c     50 E4 05 F1 | 	add	objptr, ##53840
07950     F2 24 02 FB | 	rdlong	local04, objptr
07954     12 2D 02 F6 | 	mov	local08, local04
07958     01 2C 66 F0 | 	shl	local08, #1
0795c     12 2D 02 F1 | 	add	local08, local04
07960     02 2C 66 F0 | 	shl	local08, #2
07964     03 00 00 FF 
07968     00 E4 85 F1 | 	sub	objptr, ##1536
0796c     F2 2C 02 F1 | 	add	local08, objptr
07970     16 29 62 FC | 	wrlong	local06, local08
07974     03 00 00 FF 
07978     00 E4 05 F1 | 	add	objptr, ##1536
0797c     F2 2C 02 FB | 	rdlong	local08, objptr
07980     16 29 02 F6 | 	mov	local06, local08
07984     01 28 66 F0 | 	shl	local06, #1
07988     16 29 02 F1 | 	add	local06, local08
0798c     02 28 66 F0 | 	shl	local06, #2
07990     03 00 00 FF 
07994     00 E4 85 F1 | 	sub	objptr, ##1536
07998     F2 28 02 F1 | 	add	local06, objptr
0799c     04 28 06 F1 | 	add	local06, #4
079a0     14 2B 62 FC | 	wrlong	local07, local06
079a4     03 00 00 FF 
079a8     00 E4 05 F1 | 	add	objptr, ##1536
079ac     F2 2C 02 FB | 	rdlong	local08, objptr
079b0     16 2B 02 F6 | 	mov	local07, local08
079b4     01 2A 66 F0 | 	shl	local07, #1
079b8     16 2B 02 F1 | 	add	local07, local08
079bc     02 2A 66 F0 | 	shl	local07, #2
079c0     03 00 00 FF 
079c4     00 E4 85 F1 | 	sub	objptr, ##1536
079c8     F2 2A 02 F1 | 	add	local07, objptr
079cc     08 2A 06 F1 | 	add	local07, #8
079d0     15 27 62 FC | 	wrlong	local05, local07
079d4     03 00 00 FF 
079d8     00 E4 05 F1 | 	add	objptr, ##1536
079dc     F2 28 02 FB | 	rdlong	local06, objptr
079e0     01 28 06 F1 | 	add	local06, #1
079e4     F2 28 62 FC | 	wrlong	local06, objptr
079e8     13 00 00 FF 
079ec     38 E4 85 F1 | 	sub	objptr, ##9784
079f0     F2 24 02 FB | 	rdlong	local04, objptr
079f4     03 24 66 F0 | 	shl	local04, #3
079f8     02 00 00 FF 
079fc     38 E4 85 F1 | 	sub	objptr, ##1080
07a00     F2 24 02 F1 | 	add	local04, objptr
07a04     04 24 06 F1 | 	add	local04, #4
07a08     12 27 02 FB | 	rdlong	local05, local04
07a0c     53 00 00 FF 
07a10     E0 E5 85 F1 | 	sub	objptr, ##42976
07a14     E0 FE 9F FD | 	jmp	#LR__0640
07a18                 | LR__0641
07a18     A7 F0 03 F6 | 	mov	ptra, fp
07a1c     B2 00 A0 FD | 	call	#popregs_
07a20                 | _muldiv_ret
07a20     2D 00 64 FD | 	ret
07a24                 | 
07a24                 | ' 
07a24                 | ' sub getvalue() 
07a24                 | _getvalue
07a24     0B 4A 05 F6 | 	mov	COUNT_, #11
07a28     A8 00 A0 FD | 	call	#pushregs_
07a2c                 | _getvalue_enter
07a2c     01 24 06 F6 | 	mov	local04, #1
07a30     00 1E 06 F6 | 	mov	local01, #0
07a34     1D 22 06 F6 | 	mov	local03, #29
07a38     56 00 00 FF 
07a3c     18 E4 05 F1 | 	add	objptr, ##44056
07a40     F2 16 02 FB | 	rdlong	arg03, objptr
07a44     03 16 66 F0 | 	shl	arg03, #3
07a48     02 00 00 FF 
07a4c     38 E4 85 F1 | 	sub	objptr, ##1080
07a50     F2 16 02 F1 | 	add	arg03, objptr
07a54     04 16 06 F1 | 	add	arg03, #4
07a58     0B 27 02 FB | 	rdlong	local05, arg03
07a5c                 | ' m=1
07a5c                 | ' t1.result.uresult=0: t1.result_type=result_uint
07a5c                 | ' op=lparts(ct).token
07a5c                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07a5c     02 26 0E F2 | 	cmp	local05, #2 wz
07a60     53 00 00 FF 
07a64     E0 E5 85 F1 | 	sub	objptr, ##42976
07a68     38 00 90 5D |  if_ne	jmp	#LR__0650
07a6c     01 24 66 F6 | 	neg	local04, #1
07a70     56 00 00 FF 
07a74     18 E4 05 F1 | 	add	objptr, ##44056
07a78     F2 26 02 FB | 	rdlong	local05, objptr
07a7c     01 26 06 F1 | 	add	local05, #1
07a80     F2 26 62 FC | 	wrlong	local05, objptr
07a84     03 26 66 F0 | 	shl	local05, #3
07a88     02 00 00 FF 
07a8c     38 E4 85 F1 | 	sub	objptr, ##1080
07a90     F2 26 02 F1 | 	add	local05, objptr
07a94     04 26 06 F1 | 	add	local05, #4
07a98     13 27 02 FB | 	rdlong	local05, local05
07a9c     53 00 00 FF 
07aa0     E0 E5 85 F1 | 	sub	objptr, ##42976
07aa4                 | LR__0650
07aa4                 | ' select case op
07aa4     01 00 00 FF 
07aa8     00 26 0E F2 | 	cmp	local05, ##512 wz
07aac     3C 00 90 AD |  if_e	jmp	#LR__0651
07ab0     01 00 00 FF 
07ab4     01 26 0E F2 | 	cmp	local05, ##513 wz
07ab8     88 01 90 AD |  if_e	jmp	#LR__0654
07abc     01 00 00 FF 
07ac0     02 26 0E F2 | 	cmp	local05, ##514 wz
07ac4     84 02 90 AD |  if_e	jmp	#LR__0655
07ac8     01 00 00 FF 
07acc     03 26 0E F2 | 	cmp	local05, ##515 wz
07ad0     E8 03 90 AD |  if_e	jmp	#LR__0658
07ad4     01 00 00 FF 
07ad8     04 26 0E F2 | 	cmp	local05, ##516 wz
07adc     E0 05 90 AD |  if_e	jmp	#LR__0663
07ae0     15 26 0E F2 | 	cmp	local05, #21 wz
07ae4     00 06 90 AD |  if_e	jmp	#LR__0664
07ae8     70 06 90 FD | 	jmp	#LR__0665
07aec                 | LR__0651
07aec                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
07aec     01 24 0E F2 | 	cmp	local04, #1 wz
07af0     3C 00 90 5D |  if_ne	jmp	#LR__0652
07af4     56 00 00 FF 
07af8     18 E4 05 F1 | 	add	objptr, ##44056
07afc     F2 26 02 FB | 	rdlong	local05, objptr
07b00     03 26 66 F0 | 	shl	local05, #3
07b04     02 00 00 FF 
07b08     38 E4 85 F1 | 	sub	objptr, ##1080
07b0c     F2 26 02 F1 | 	add	local05, objptr
07b10     13 13 02 FB | 	rdlong	arg01, local05
07b14     00 14 06 F6 | 	mov	arg02, #0
07b18     53 00 00 FF 
07b1c     E0 E5 85 F1 | 	sub	objptr, ##42976
07b20     CC 10 B1 FD | 	call	#__system____builtin_atoi
07b24     FD 24 02 FD | 	qmul	local04, result1
07b28     18 1E 62 FD | 	getqx	local01
07b2c     1D 22 06 F6 | 	mov	local03, #29
07b30                 | LR__0652
07b30                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
07b30     FF FF 7F FF 
07b34     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07b38     3C 00 90 5D |  if_ne	jmp	#LR__0653
07b3c     56 00 00 FF 
07b40     18 E4 05 F1 | 	add	objptr, ##44056
07b44     F2 26 02 FB | 	rdlong	local05, objptr
07b48     03 26 66 F0 | 	shl	local05, #3
07b4c     02 00 00 FF 
07b50     38 E4 85 F1 | 	sub	objptr, ##1080
07b54     F2 26 02 F1 | 	add	local05, objptr
07b58     13 13 02 FB | 	rdlong	arg01, local05
07b5c     00 14 06 F6 | 	mov	arg02, #0
07b60     53 00 00 FF 
07b64     E0 E5 85 F1 | 	sub	objptr, ##42976
07b68     84 10 B1 FD | 	call	#__system____builtin_atoi
07b6c     FD 24 02 FD | 	qmul	local04, result1
07b70     18 1E 62 FD | 	getqx	local01
07b74     1C 22 06 F6 | 	mov	local03, #28
07b78                 | LR__0653
07b78     0F 29 02 F6 | 	mov	local06, local01
07b7c     10 2B 02 F6 | 	mov	local07, local02
07b80     11 27 02 F6 | 	mov	local05, local03
07b84     69 00 00 FF 
07b88     50 E4 05 F1 | 	add	objptr, ##53840
07b8c     F2 1E 02 FB | 	rdlong	local01, objptr
07b90     0F 25 02 F6 | 	mov	local04, local01
07b94     01 24 66 F0 | 	shl	local04, #1
07b98     0F 25 02 F1 | 	add	local04, local01
07b9c     02 24 66 F0 | 	shl	local04, #2
07ba0     03 00 00 FF 
07ba4     00 E4 85 F1 | 	sub	objptr, ##1536
07ba8     F2 24 02 F1 | 	add	local04, objptr
07bac     12 29 62 FC | 	wrlong	local06, local04
07bb0     03 00 00 FF 
07bb4     00 E4 05 F1 | 	add	objptr, ##1536
07bb8     F2 28 02 FB | 	rdlong	local06, objptr
07bbc     14 1F 02 F6 | 	mov	local01, local06
07bc0     01 1E 66 F0 | 	shl	local01, #1
07bc4     14 1F 02 F1 | 	add	local01, local06
07bc8     02 1E 66 F0 | 	shl	local01, #2
07bcc     03 00 00 FF 
07bd0     00 E4 85 F1 | 	sub	objptr, ##1536
07bd4     F2 1E 02 F1 | 	add	local01, objptr
07bd8     04 1E 06 F1 | 	add	local01, #4
07bdc     0F 2B 62 FC | 	wrlong	local07, local01
07be0     03 00 00 FF 
07be4     00 E4 05 F1 | 	add	objptr, ##1536
07be8     F2 2A 02 FB | 	rdlong	local07, objptr
07bec     15 29 02 F6 | 	mov	local06, local07
07bf0     01 28 66 F0 | 	shl	local06, #1
07bf4     15 29 02 F1 | 	add	local06, local07
07bf8     02 28 66 F0 | 	shl	local06, #2
07bfc     03 00 00 FF 
07c00     00 E4 85 F1 | 	sub	objptr, ##1536
07c04     F2 28 02 F1 | 	add	local06, objptr
07c08     08 28 06 F1 | 	add	local06, #8
07c0c     14 27 62 FC | 	wrlong	local05, local06
07c10     03 00 00 FF 
07c14     00 E4 05 F1 | 	add	objptr, ##1536
07c18     F2 28 02 FB | 	rdlong	local06, objptr
07c1c     01 28 06 F1 | 	add	local06, #1
07c20     F2 28 62 FC | 	wrlong	local06, objptr
07c24     13 00 00 FF 
07c28     38 E4 85 F1 | 	sub	objptr, ##9784
07c2c     F2 28 02 FB | 	rdlong	local06, objptr
07c30     01 28 06 F1 | 	add	local06, #1
07c34     F2 28 62 FC | 	wrlong	local06, objptr
07c38     56 00 00 FF 
07c3c     18 E4 85 F1 | 	sub	objptr, ##44056
07c40     3C 05 90 FD | 	jmp	#LR__0666
07c44                 | LR__0654
07c44     56 00 00 FF 
07c48     18 E4 05 F1 | 	add	objptr, ##44056
07c4c     F2 28 02 FB | 	rdlong	local06, objptr
07c50     03 28 66 F0 | 	shl	local06, #3
07c54     02 00 00 FF 
07c58     38 E4 85 F1 | 	sub	objptr, ##1080
07c5c     F2 28 02 F1 | 	add	local06, objptr
07c60     14 13 02 FB | 	rdlong	arg01, local06
07c64     00 14 06 F6 | 	mov	arg02, #0
07c68     53 00 00 FF 
07c6c     E0 E5 85 F1 | 	sub	objptr, ##42976
07c70     7C 0F B1 FD | 	call	#__system____builtin_atoi
07c74     FD 24 02 FD | 	qmul	local04, result1
07c78     69 00 00 FF 
07c7c     50 E4 05 F1 | 	add	objptr, ##53840
07c80     F2 28 02 FB | 	rdlong	local06, objptr
07c84     14 2D 02 F6 | 	mov	local08, local06
07c88     01 2C 66 F0 | 	shl	local08, #1
07c8c     14 2D 02 F1 | 	add	local08, local06
07c90     02 2C 66 F0 | 	shl	local08, #2
07c94     03 00 00 FF 
07c98     00 E4 85 F1 | 	sub	objptr, ##1536
07c9c     F2 2C 02 F1 | 	add	local08, objptr
07ca0     03 00 00 FF 
07ca4     00 E4 05 F1 | 	add	objptr, ##1536
07ca8     18 1E 62 FD | 	getqx	local01
07cac     1C 22 06 F6 | 	mov	local03, #28
07cb0     0F 29 02 F6 | 	mov	local06, local01
07cb4     10 2B 02 F6 | 	mov	local07, local02
07cb8     16 29 62 FC | 	wrlong	local06, local08
07cbc     11 2D 02 F6 | 	mov	local08, local03
07cc0     F2 28 02 FB | 	rdlong	local06, objptr
07cc4     14 27 02 F6 | 	mov	local05, local06
07cc8     01 26 66 F0 | 	shl	local05, #1
07ccc     14 27 02 F1 | 	add	local05, local06
07cd0     02 26 66 F0 | 	shl	local05, #2
07cd4     03 00 00 FF 
07cd8     00 E4 85 F1 | 	sub	objptr, ##1536
07cdc     F2 26 02 F1 | 	add	local05, objptr
07ce0     04 26 06 F1 | 	add	local05, #4
07ce4     13 2B 62 FC | 	wrlong	local07, local05
07ce8     03 00 00 FF 
07cec     00 E4 05 F1 | 	add	objptr, ##1536
07cf0     F2 2A 02 FB | 	rdlong	local07, objptr
07cf4     15 29 02 F6 | 	mov	local06, local07
07cf8     01 28 66 F0 | 	shl	local06, #1
07cfc     15 29 02 F1 | 	add	local06, local07
07d00     02 28 66 F0 | 	shl	local06, #2
07d04     03 00 00 FF 
07d08     00 E4 85 F1 | 	sub	objptr, ##1536
07d0c     F2 28 02 F1 | 	add	local06, objptr
07d10     08 28 06 F1 | 	add	local06, #8
07d14     14 2D 62 FC | 	wrlong	local08, local06
07d18     03 00 00 FF 
07d1c     00 E4 05 F1 | 	add	objptr, ##1536
07d20     F2 28 02 FB | 	rdlong	local06, objptr
07d24     01 28 06 F1 | 	add	local06, #1
07d28     F2 28 62 FC | 	wrlong	local06, objptr
07d2c     13 00 00 FF 
07d30     38 E4 85 F1 | 	sub	objptr, ##9784
07d34     F2 28 02 FB | 	rdlong	local06, objptr
07d38     01 28 06 F1 | 	add	local06, #1
07d3c     F2 28 62 FC | 	wrlong	local06, objptr
07d40     56 00 00 FF 
07d44     18 E4 85 F1 | 	sub	objptr, ##44056
07d48     34 04 90 FD | 	jmp	#LR__0666
07d4c                 | LR__0655
07d4c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07d4c     01 24 0E F2 | 	cmp	local04, #1 wz
07d50     48 00 90 5D |  if_ne	jmp	#LR__0656
07d54     00 C0 1F FF 
07d58     00 28 06 F6 | 	mov	local06, ##1065353216
07d5c     56 00 00 FF 
07d60     18 E4 05 F1 | 	add	objptr, ##44056
07d64     F2 2C 02 FB | 	rdlong	local08, objptr
07d68     03 2C 66 F0 | 	shl	local08, #3
07d6c     02 00 00 FF 
07d70     38 E4 85 F1 | 	sub	objptr, ##1080
07d74     F2 2C 02 F1 | 	add	local08, objptr
07d78     16 13 02 FB | 	rdlong	arg01, local08
07d7c     53 00 00 FF 
07d80     E0 E5 85 F1 | 	sub	objptr, ##42976
07d84     D8 0F B1 FD | 	call	#__system____builtin_atof
07d88     FD 14 02 F6 | 	mov	arg02, result1
07d8c     14 13 02 F6 | 	mov	arg01, local06
07d90     E4 07 B1 FD | 	call	#__system___float_mul
07d94     FD 1E 02 F6 | 	mov	local01, result1
07d98     1E 22 06 F6 | 	mov	local03, #30
07d9c                 | LR__0656
07d9c                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07d9c     FF FF 7F FF 
07da0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07da4     48 00 90 5D |  if_ne	jmp	#LR__0657
07da8     00 C0 5F FF 
07dac     00 28 06 F6 | 	mov	local06, ##-1082130432
07db0     56 00 00 FF 
07db4     18 E4 05 F1 | 	add	objptr, ##44056
07db8     F2 2C 02 FB | 	rdlong	local08, objptr
07dbc     03 2C 66 F0 | 	shl	local08, #3
07dc0     02 00 00 FF 
07dc4     38 E4 85 F1 | 	sub	objptr, ##1080
07dc8     F2 2C 02 F1 | 	add	local08, objptr
07dcc     16 13 02 FB | 	rdlong	arg01, local08
07dd0     53 00 00 FF 
07dd4     E0 E5 85 F1 | 	sub	objptr, ##42976
07dd8     84 0F B1 FD | 	call	#__system____builtin_atof
07ddc     FD 14 02 F6 | 	mov	arg02, result1
07de0     14 13 02 F6 | 	mov	arg01, local06
07de4     90 07 B1 FD | 	call	#__system___float_mul
07de8     FD 1E 02 F6 | 	mov	local01, result1
07dec     1E 22 06 F6 | 	mov	local03, #30
07df0                 | LR__0657
07df0     0F 29 02 F6 | 	mov	local06, local01
07df4     10 2B 02 F6 | 	mov	local07, local02
07df8     11 27 02 F6 | 	mov	local05, local03
07dfc     69 00 00 FF 
07e00     50 E4 05 F1 | 	add	objptr, ##53840
07e04     F2 1E 02 FB | 	rdlong	local01, objptr
07e08     0F 2D 02 F6 | 	mov	local08, local01
07e0c     01 2C 66 F0 | 	shl	local08, #1
07e10     0F 2D 02 F1 | 	add	local08, local01
07e14     02 2C 66 F0 | 	shl	local08, #2
07e18     03 00 00 FF 
07e1c     00 E4 85 F1 | 	sub	objptr, ##1536
07e20     F2 2C 02 F1 | 	add	local08, objptr
07e24     16 29 62 FC | 	wrlong	local06, local08
07e28     03 00 00 FF 
07e2c     00 E4 05 F1 | 	add	objptr, ##1536
07e30     F2 2C 02 FB | 	rdlong	local08, objptr
07e34     16 29 02 F6 | 	mov	local06, local08
07e38     01 28 66 F0 | 	shl	local06, #1
07e3c     16 29 02 F1 | 	add	local06, local08
07e40     02 28 66 F0 | 	shl	local06, #2
07e44     03 00 00 FF 
07e48     00 E4 85 F1 | 	sub	objptr, ##1536
07e4c     F2 28 02 F1 | 	add	local06, objptr
07e50     04 28 06 F1 | 	add	local06, #4
07e54     14 2B 62 FC | 	wrlong	local07, local06
07e58     03 00 00 FF 
07e5c     00 E4 05 F1 | 	add	objptr, ##1536
07e60     F2 2C 02 FB | 	rdlong	local08, objptr
07e64     16 2B 02 F6 | 	mov	local07, local08
07e68     01 2A 66 F0 | 	shl	local07, #1
07e6c     16 2B 02 F1 | 	add	local07, local08
07e70     02 2A 66 F0 | 	shl	local07, #2
07e74     03 00 00 FF 
07e78     00 E4 85 F1 | 	sub	objptr, ##1536
07e7c     F2 2A 02 F1 | 	add	local07, objptr
07e80     08 2A 06 F1 | 	add	local07, #8
07e84     15 27 62 FC | 	wrlong	local05, local07
07e88     03 00 00 FF 
07e8c     00 E4 05 F1 | 	add	objptr, ##1536
07e90     F2 28 02 FB | 	rdlong	local06, objptr
07e94     01 28 06 F1 | 	add	local06, #1
07e98     F2 28 62 FC | 	wrlong	local06, objptr
07e9c     13 00 00 FF 
07ea0     38 E4 85 F1 | 	sub	objptr, ##9784
07ea4     F2 28 02 FB | 	rdlong	local06, objptr
07ea8     01 28 06 F1 | 	add	local06, #1
07eac     F2 28 62 FC | 	wrlong	local06, objptr
07eb0     56 00 00 FF 
07eb4     18 E4 85 F1 | 	sub	objptr, ##44056
07eb8     C4 02 90 FD | 	jmp	#LR__0666
07ebc                 | LR__0658
07ebc     1F 22 06 F6 | 	mov	local03, #31
07ec0     56 00 00 FF 
07ec4     18 E4 05 F1 | 	add	objptr, ##44056
07ec8     F2 16 02 FB | 	rdlong	arg03, objptr
07ecc     03 16 66 F0 | 	shl	arg03, #3
07ed0     02 00 00 FF 
07ed4     38 E4 85 F1 | 	sub	objptr, ##1080
07ed8     F2 16 02 F1 | 	add	arg03, objptr
07edc     0B 13 02 FB | 	rdlong	arg01, arg03
07ee0     53 00 00 FF 
07ee4     E0 E5 85 F1 | 	sub	objptr, ##42976
07ee8     09 2F 02 F6 | 	mov	local09, arg01
07eec     97 06 48 FB | 	callpa	#(@LR__0660-@LR__0659)>>2,fcache_load_ptr_
07ef0                 | LR__0659
07ef0     17 FB C9 FA | 	rdbyte	result1, local09 wz
07ef4     01 2E 06 51 |  if_ne	add	local09, #1
07ef8     F4 FF 9F 5D |  if_ne	jmp	#LR__0659
07efc                 | LR__0660
07efc     09 2F 82 F1 | 	sub	local09, arg01
07f00     17 FB 01 F6 | 	mov	result1, local09
07f04     7A 00 00 FF 
07f08     70 E4 05 F1 | 	add	objptr, ##62576
07f0c     F2 FA 61 FC | 	wrlong	result1, objptr
07f10     24 E4 85 F1 | 	sub	objptr, #36
07f14     F2 12 02 FB | 	rdlong	arg01, objptr
07f18     FD 12 82 F1 | 	sub	arg01, result1
07f1c     04 12 86 F1 | 	sub	arg01, #4
07f20     03 12 26 F5 | 	andn	arg01, #3
07f24     F2 12 62 FC | 	wrlong	arg01, objptr
07f28     24 E4 05 F1 | 	add	objptr, #36
07f2c     F2 14 02 FB | 	rdlong	arg02, objptr
07f30     01 16 06 F6 | 	mov	arg03, #1
07f34     00 18 06 F6 | 	mov	arg04, #0
07f38     6E 00 00 FF 
07f3c     B0 E5 85 F1 | 	sub	objptr, ##56752
07f40                 | '     return fill(addr, pattern, count, listPtr, 4)
07f40     04 1A 06 F6 | 	mov	arg05, #4
07f44     68 D2 B0 FD | 	call	#_psram_spin2_fill
07f48                 | '     pslpoke memtop,l
07f48                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
07f48     01 30 06 F6 | 	mov	local10, #1
07f4c     6E 00 00 FF 
07f50     B0 E5 05 F1 | 	add	objptr, ##56752
07f54     F2 32 02 FB | 	rdlong	local11, objptr
07f58     7A 00 00 FF 
07f5c     70 E4 85 F1 | 	sub	objptr, ##62576
07f60     01 32 06 F1 | 	add	local11, #1
07f64                 | LR__0661
07f64     19 31 52 F2 | 	cmps	local10, local11 wc
07f68     78 00 90 3D |  if_ae	jmp	#LR__0662
07f6c     7A 00 00 FF 
07f70     4C E4 05 F1 | 	add	objptr, ##62540
07f74     F2 2A 02 FB | 	rdlong	local07, objptr
07f78     03 2A 06 F1 | 	add	local07, #3
07f7c     18 2B 02 F1 | 	add	local07, local10
07f80     24 00 00 FF 
07f84     34 E4 85 F1 | 	sub	objptr, ##18484
07f88     F2 2C 02 FB | 	rdlong	local08, objptr
07f8c     03 2C 66 F0 | 	shl	local08, #3
07f90     02 00 00 FF 
07f94     38 E4 85 F1 | 	sub	objptr, ##1080
07f98     F2 2C 02 F1 | 	add	local08, objptr
07f9c     16 13 02 FB | 	rdlong	arg01, local08
07fa0     18 15 02 F6 | 	mov	arg02, local10
07fa4     01 16 06 F6 | 	mov	arg03, #1
07fa8     53 00 00 FF 
07fac     E0 E5 85 F1 | 	sub	objptr, ##42976
07fb0     D8 FC B0 FD | 	call	#__system__Mid_S
07fb4     FD 14 C2 FA | 	rdbyte	arg02, result1
07fb8     15 13 02 F6 | 	mov	arg01, local07
07fbc     01 16 06 F6 | 	mov	arg03, #1
07fc0     00 18 06 F6 | 	mov	arg04, #0
07fc4     0B 00 00 FF 
07fc8     C0 E4 05 F1 | 	add	objptr, ##5824
07fcc                 | '     return fill(addr, pattern, count, listPtr, 1)
07fcc     01 1A 06 F6 | 	mov	arg05, #1
07fd0     DC D1 B0 FD | 	call	#_psram_spin2_fill
07fd4     0B 00 00 FF 
07fd8     C0 E4 85 F1 | 	sub	objptr, ##5824
07fdc     01 30 06 F1 | 	add	local10, #1
07fe0     80 FF 9F FD | 	jmp	#LR__0661
07fe4                 | LR__0662
07fe4     7A 00 00 FF 
07fe8     4C E4 05 F1 | 	add	objptr, ##62540
07fec     F2 1E 02 FB | 	rdlong	local01, objptr
07ff0     2B 22 06 F6 | 	mov	local03, #43
07ff4     0F 29 02 F6 | 	mov	local06, local01
07ff8     10 2B 02 F6 | 	mov	local07, local02
07ffc     11 33 02 F6 | 	mov	local11, local03
08000     10 00 00 FF 
08004     FC E5 85 F1 | 	sub	objptr, ##8700
08008     F2 30 02 FB | 	rdlong	local10, objptr
0800c     18 2D 02 F6 | 	mov	local08, local10
08010     01 2C 66 F0 | 	shl	local08, #1
08014     18 2D 02 F1 | 	add	local08, local10
08018     02 2C 66 F0 | 	shl	local08, #2
0801c     03 00 00 FF 
08020     00 E4 85 F1 | 	sub	objptr, ##1536
08024     F2 2C 02 F1 | 	add	local08, objptr
08028     16 29 62 FC | 	wrlong	local06, local08
0802c     03 00 00 FF 
08030     00 E4 05 F1 | 	add	objptr, ##1536
08034     F2 30 02 FB | 	rdlong	local10, objptr
08038     18 2D 02 F6 | 	mov	local08, local10
0803c     01 2C 66 F0 | 	shl	local08, #1
08040     18 2D 02 F1 | 	add	local08, local10
08044     02 2C 66 F0 | 	shl	local08, #2
08048     03 00 00 FF 
0804c     00 E4 85 F1 | 	sub	objptr, ##1536
08050     F2 2C 02 F1 | 	add	local08, objptr
08054     04 2C 06 F1 | 	add	local08, #4
08058     16 2B 62 FC | 	wrlong	local07, local08
0805c     03 00 00 FF 
08060     00 E4 05 F1 | 	add	objptr, ##1536
08064     F2 30 02 FB | 	rdlong	local10, objptr
08068     18 2D 02 F6 | 	mov	local08, local10
0806c     01 2C 66 F0 | 	shl	local08, #1
08070     18 2D 02 F1 | 	add	local08, local10
08074     02 2C 66 F0 | 	shl	local08, #2
08078     03 00 00 FF 
0807c     00 E4 85 F1 | 	sub	objptr, ##1536
08080     F2 2C 02 F1 | 	add	local08, objptr
08084     08 2C 06 F1 | 	add	local08, #8
08088     16 33 62 FC | 	wrlong	local11, local08
0808c     03 00 00 FF 
08090     00 E4 05 F1 | 	add	objptr, ##1536
08094     F2 28 02 FB | 	rdlong	local06, objptr
08098     01 28 06 F1 | 	add	local06, #1
0809c     F2 28 62 FC | 	wrlong	local06, objptr
080a0     13 00 00 FF 
080a4     38 E4 85 F1 | 	sub	objptr, ##9784
080a8     F2 28 02 FB | 	rdlong	local06, objptr
080ac     01 28 06 F1 | 	add	local06, #1
080b0     F2 28 62 FC | 	wrlong	local06, objptr
080b4     56 00 00 FF 
080b8     18 E4 85 F1 | 	sub	objptr, ##44056
080bc     C0 00 90 FD | 	jmp	#LR__0666
080c0                 | LR__0663
080c0     12 13 02 F6 | 	mov	arg01, local04
080c4     B8 03 B0 FD | 	call	#_getvar
080c8     56 00 00 FF 
080cc     18 E4 05 F1 | 	add	objptr, ##44056
080d0     F2 28 02 FB | 	rdlong	local06, objptr
080d4     01 28 06 F1 | 	add	local06, #1
080d8     F2 28 62 FC | 	wrlong	local06, objptr
080dc     56 00 00 FF 
080e0     18 E4 85 F1 | 	sub	objptr, ##44056
080e4     98 00 90 FD | 	jmp	#LR__0666
080e8                 | LR__0664
080e8     56 00 00 FF 
080ec     18 E4 05 F1 | 	add	objptr, ##44056
080f0     F2 28 02 FB | 	rdlong	local06, objptr
080f4     01 28 06 F1 | 	add	local06, #1
080f8     F2 28 62 FC | 	wrlong	local06, objptr
080fc     56 00 00 FF 
08100     18 E4 85 F1 | 	sub	objptr, ##44056
08104     F4 F3 BF FD | 	call	#_expr
08108                 | '     ct+=1
08108                 | '     expr() 
08108                 | '     if lparts(ct).token=token_rpar then ct+=1
08108     56 00 00 FF 
0810c     18 E4 05 F1 | 	add	objptr, ##44056
08110     F2 32 02 FB | 	rdlong	local11, objptr
08114     03 32 66 F0 | 	shl	local11, #3
08118     02 00 00 FF 
0811c     38 E4 85 F1 | 	sub	objptr, ##1080
08120     F2 32 02 F1 | 	add	local11, objptr
08124     04 32 06 F1 | 	add	local11, #4
08128     19 33 02 FB | 	rdlong	local11, local11
0812c     14 32 0E F2 | 	cmp	local11, #20 wz
08130     53 00 00 FF 
08134     E0 E5 85 F1 | 	sub	objptr, ##42976
08138     44 00 90 5D |  if_ne	jmp	#LR__0666
0813c     56 00 00 FF 
08140     18 E4 05 F1 | 	add	objptr, ##44056
08144     F2 28 02 FB | 	rdlong	local06, objptr
08148     01 28 06 F1 | 	add	local06, #1
0814c     F2 28 62 FC | 	wrlong	local06, objptr
08150     56 00 00 FF 
08154     18 E4 85 F1 | 	sub	objptr, ##44056
08158     24 00 90 FD | 	jmp	#LR__0666
0815c                 | LR__0665
0815c     12 13 02 F6 | 	mov	arg01, local04
08160     28 00 B0 FD | 	call	#_getfun
08164     56 00 00 FF 
08168     18 E4 05 F1 | 	add	objptr, ##44056
0816c     F2 28 02 FB | 	rdlong	local06, objptr
08170     01 28 06 F1 | 	add	local06, #1
08174     F2 28 62 FC | 	wrlong	local06, objptr
08178     56 00 00 FF 
0817c     18 E4 85 F1 | 	sub	objptr, ##44056
08180                 | LR__0666
08180     A7 F0 03 F6 | 	mov	ptra, fp
08184     B2 00 A0 FD | 	call	#popregs_
08188                 | _getvalue_ret
08188     2D 00 64 FD | 	ret
0818c                 | 
0818c                 | ' 
0818c                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0818c                 | _getfun
0818c     0A 4A 05 F6 | 	mov	COUNT_, #10
08190     A8 00 A0 FD | 	call	#pushregs_
08194                 | _getfun_enter
08194     09 25 02 F6 | 	mov	local04, arg01
08198     56 00 00 FF 
0819c     18 E4 05 F1 | 	add	objptr, ##44056
081a0     F2 26 02 FB | 	rdlong	local05, objptr
081a4     13 29 02 F6 | 	mov	local06, local05
081a8     00 2A 06 F6 | 	mov	local07, #0
081ac                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
081ac                 | ' oldct=ct
081ac                 | ' numpar=0
081ac                 | '   
081ac                 | ' if lparts(ct+1).token=token_lpar then
081ac     01 26 06 F1 | 	add	local05, #1
081b0     03 26 66 F0 | 	shl	local05, #3
081b4     02 00 00 FF 
081b8     38 E4 85 F1 | 	sub	objptr, ##1080
081bc     F2 26 02 F1 | 	add	local05, objptr
081c0     04 26 06 F1 | 	add	local05, #4
081c4     13 27 02 FB | 	rdlong	local05, local05
081c8     15 26 0E F2 | 	cmp	local05, #21 wz
081cc     53 00 00 FF 
081d0     E0 E5 85 F1 | 	sub	objptr, ##42976
081d4     08 01 90 5D |  if_ne	jmp	#LR__0674
081d8     56 00 00 FF 
081dc     18 E4 05 F1 | 	add	objptr, ##44056
081e0     F2 2C 02 FB | 	rdlong	local08, objptr
081e4     01 2C 06 F1 | 	add	local08, #1
081e8     F2 2C 62 FC | 	wrlong	local08, objptr
081ec     56 00 00 FF 
081f0     18 E4 85 F1 | 	sub	objptr, ##44056
081f4                 | '   ct+=1 											' omit this lpar, this is for expr list
081f4                 | '   do
081f4                 | LR__0670
081f4     56 00 00 FF 
081f8     18 E4 05 F1 | 	add	objptr, ##44056
081fc     F2 26 02 FB | 	rdlong	local05, objptr
08200     01 26 06 F1 | 	add	local05, #1
08204     F2 26 62 FC | 	wrlong	local05, objptr
08208                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08208                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08208     03 26 66 F0 | 	shl	local05, #3
0820c     02 00 00 FF 
08210     38 E4 85 F1 | 	sub	objptr, ##1080
08214     F2 26 02 F1 | 	add	local05, objptr
08218     04 26 06 F1 | 	add	local05, #4
0821c     13 2D 02 FB | 	rdlong	local08, local05
08220     15 2C 0E F2 | 	cmp	local08, #21 wz
08224     53 00 00 FF 
08228     E0 E5 85 F1 | 	sub	objptr, ##42976
0822c     40 00 90 5D |  if_ne	jmp	#LR__0671
08230     56 00 00 FF 
08234     18 E4 05 F1 | 	add	objptr, ##44056
08238     F2 2C 02 FB | 	rdlong	local08, objptr
0823c     01 2C 06 F1 | 	add	local08, #1
08240     F2 2C 62 FC | 	wrlong	local08, objptr
08244     56 00 00 FF 
08248     18 E4 85 F1 | 	sub	objptr, ##44056
0824c     AC F2 BF FD | 	call	#_expr
08250     56 00 00 FF 
08254     18 E4 05 F1 | 	add	objptr, ##44056
08258     F2 2C 02 FB | 	rdlong	local08, objptr
0825c     01 2C 06 F1 | 	add	local08, #1
08260     F2 2C 62 FC | 	wrlong	local08, objptr
08264     56 00 00 FF 
08268     18 E4 85 F1 | 	sub	objptr, ##44056
0826c     04 00 90 FD | 	jmp	#LR__0672
08270                 | LR__0671
08270     88 F2 BF FD | 	call	#_expr
08274                 | LR__0672
08274     01 2A 06 F1 | 	add	local07, #1
08278     56 00 00 FF 
0827c     18 E4 05 F1 | 	add	objptr, ##44056
08280     F2 26 02 FB | 	rdlong	local05, objptr
08284     03 26 66 F0 | 	shl	local05, #3
08288     02 00 00 FF 
0828c     38 E4 85 F1 | 	sub	objptr, ##1080
08290     F2 26 02 F1 | 	add	local05, objptr
08294     04 26 06 F1 | 	add	local05, #4
08298     13 2D 02 FB | 	rdlong	local08, local05
0829c     14 2C 0E F2 | 	cmp	local08, #20 wz
082a0     53 00 00 FF 
082a4     E0 E5 85 F1 | 	sub	objptr, ##42976
082a8     34 00 90 AD |  if_e	jmp	#LR__0673
082ac     56 00 00 FF 
082b0     18 E4 05 F1 | 	add	objptr, ##44056
082b4     F2 2C 02 FB | 	rdlong	local08, objptr
082b8     03 2C 66 F0 | 	shl	local08, #3
082bc     02 00 00 FF 
082c0     38 E4 85 F1 | 	sub	objptr, ##1080
082c4     F2 2C 02 F1 | 	add	local08, objptr
082c8     04 2C 06 F1 | 	add	local08, #4
082cc     16 2D 02 FB | 	rdlong	local08, local08
082d0     FE 2D 0E F2 | 	cmp	local08, #510 wz
082d4     53 00 00 FF 
082d8     E0 E5 85 F1 | 	sub	objptr, ##42976
082dc     14 FF 9F 5D |  if_ne	jmp	#LR__0670
082e0                 | LR__0673
082e0                 | LR__0674
082e0     15 1F 02 F6 | 	mov	local01, local07
082e4     03 28 66 F0 | 	shl	local06, #3
082e8     53 00 00 FF 
082ec     E0 E5 05 F1 | 	add	objptr, ##42976
082f0     F2 28 02 F1 | 	add	local06, objptr
082f4     04 28 06 F1 | 	add	local06, #4
082f8     14 23 02 FB | 	rdlong	local03, local06
082fc     0F 2D 02 F6 | 	mov	local08, local01
08300     10 2B 02 F6 | 	mov	local07, local02
08304     11 29 02 F6 | 	mov	local06, local03
08308     15 00 00 FF 
0830c     70 E4 05 F1 | 	add	objptr, ##10864
08310     F2 26 02 FB | 	rdlong	local05, objptr
08314     13 13 02 F6 | 	mov	arg01, local05
08318     01 12 66 F0 | 	shl	arg01, #1
0831c     13 13 02 F1 | 	add	arg01, local05
08320     02 12 66 F0 | 	shl	arg01, #2
08324     03 00 00 FF 
08328     00 E4 85 F1 | 	sub	objptr, ##1536
0832c     F2 12 02 F1 | 	add	arg01, objptr
08330     09 2D 62 FC | 	wrlong	local08, arg01
08334     03 00 00 FF 
08338     00 E4 05 F1 | 	add	objptr, ##1536
0833c     F2 2C 02 FB | 	rdlong	local08, objptr
08340     16 2F 02 F6 | 	mov	local09, local08
08344     01 2E 66 F0 | 	shl	local09, #1
08348     16 2F 02 F1 | 	add	local09, local08
0834c     02 2E 66 F0 | 	shl	local09, #2
08350     03 00 00 FF 
08354     00 E4 85 F1 | 	sub	objptr, ##1536
08358     F2 2E 02 F1 | 	add	local09, objptr
0835c     04 2E 06 F1 | 	add	local09, #4
08360     17 2B 62 FC | 	wrlong	local07, local09
08364     03 00 00 FF 
08368     00 E4 05 F1 | 	add	objptr, ##1536
0836c     F2 2C 02 FB | 	rdlong	local08, objptr
08370     16 31 02 F6 | 	mov	local10, local08
08374     01 30 66 F0 | 	shl	local10, #1
08378     16 31 02 F1 | 	add	local10, local08
0837c     02 30 66 F0 | 	shl	local10, #2
08380     03 00 00 FF 
08384     00 E4 85 F1 | 	sub	objptr, ##1536
08388     F2 30 02 F1 | 	add	local10, objptr
0838c     08 30 06 F1 | 	add	local10, #8
08390     18 29 62 FC | 	wrlong	local06, local10
08394     03 00 00 FF 
08398     00 E4 05 F1 | 	add	objptr, ##1536
0839c     F2 2C 02 FB | 	rdlong	local08, objptr
083a0     01 2C 06 F1 | 	add	local08, #1
083a4     F2 2C 62 FC | 	wrlong	local08, objptr
083a8     69 00 00 FF 
083ac     50 E4 85 F1 | 	sub	objptr, ##53840
083b0                 | ' 
083b0                 | ' t2.result.uresult=numpar
083b0                 | ' 
083b0                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
083b0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
083b0                 | ' 
083b0                 | '   
083b0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
083b0     FF FF 7F FF 
083b4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
083b8     B8 00 90 5D |  if_ne	jmp	#LR__0675
083bc     15 22 06 F6 | 	mov	local03, #21
083c0     0F 2D 02 F6 | 	mov	local08, local01
083c4     10 2B 02 F6 | 	mov	local07, local02
083c8     11 29 02 F6 | 	mov	local06, local03
083cc     69 00 00 FF 
083d0     50 E4 05 F1 | 	add	objptr, ##53840
083d4     F2 26 02 FB | 	rdlong	local05, objptr
083d8     13 13 02 F6 | 	mov	arg01, local05
083dc     01 12 66 F0 | 	shl	arg01, #1
083e0     13 13 02 F1 | 	add	arg01, local05
083e4     02 12 66 F0 | 	shl	arg01, #2
083e8     03 00 00 FF 
083ec     00 E4 85 F1 | 	sub	objptr, ##1536
083f0     F2 12 02 F1 | 	add	arg01, objptr
083f4     09 2D 62 FC | 	wrlong	local08, arg01
083f8     03 00 00 FF 
083fc     00 E4 05 F1 | 	add	objptr, ##1536
08400     F2 30 02 FB | 	rdlong	local10, objptr
08404     18 2F 02 F6 | 	mov	local09, local10
08408     01 2E 66 F0 | 	shl	local09, #1
0840c     18 2F 02 F1 | 	add	local09, local10
08410     02 2E 66 F0 | 	shl	local09, #2
08414     03 00 00 FF 
08418     00 E4 85 F1 | 	sub	objptr, ##1536
0841c     F2 2E 02 F1 | 	add	local09, objptr
08420     04 2E 06 F1 | 	add	local09, #4
08424     17 2B 62 FC | 	wrlong	local07, local09
08428     03 00 00 FF 
0842c     00 E4 05 F1 | 	add	objptr, ##1536
08430     F2 2E 02 FB | 	rdlong	local09, objptr
08434     17 31 02 F6 | 	mov	local10, local09
08438     01 30 66 F0 | 	shl	local10, #1
0843c     17 31 02 F1 | 	add	local10, local09
08440     02 30 66 F0 | 	shl	local10, #2
08444     03 00 00 FF 
08448     00 E4 85 F1 | 	sub	objptr, ##1536
0844c     F2 30 02 F1 | 	add	local10, objptr
08450     08 30 06 F1 | 	add	local10, #8
08454     18 29 62 FC | 	wrlong	local06, local10
08458     03 00 00 FF 
0845c     00 E4 05 F1 | 	add	objptr, ##1536
08460     F2 2C 02 FB | 	rdlong	local08, objptr
08464     01 2C 06 F1 | 	add	local08, #1
08468     F2 2C 62 FC | 	wrlong	local08, objptr
0846c     69 00 00 FF 
08470     50 E4 85 F1 | 	sub	objptr, ##53840
08474                 | LR__0675
08474     A7 F0 03 F6 | 	mov	ptra, fp
08478     B2 00 A0 FD | 	call	#popregs_
0847c                 | _getfun_ret
0847c     2D 00 64 FD | 	ret
08480                 | 
08480                 | '   
08480                 | '   
08480                 | ' sub getvar(m as integer) 
08480                 | _getvar
08480     0A 4A 05 F6 | 	mov	COUNT_, #10
08484     A8 00 A0 FD | 	call	#pushregs_
08488                 | _getvar_enter
08488     09 25 02 F6 | 	mov	local04, arg01
0848c     56 00 00 FF 
08490     18 E4 05 F1 | 	add	objptr, ##44056
08494     F2 14 02 FB | 	rdlong	arg02, objptr
08498     03 14 66 F0 | 	shl	arg02, #3
0849c     02 00 00 FF 
084a0     38 E4 85 F1 | 	sub	objptr, ##1080
084a4     F2 14 02 F1 | 	add	arg02, objptr
084a8     0A 27 02 FB | 	rdlong	local05, arg02
084ac     13 13 02 F6 | 	mov	arg01, local05
084b0     01 14 06 F6 | 	mov	arg02, #1
084b4     53 00 00 FF 
084b8     E0 E5 85 F1 | 	sub	objptr, ##42976
084bc     3C F7 B0 FD | 	call	#__system__Right_S
084c0     FD 28 02 F6 | 	mov	local06, result1
084c4     01 2A 66 F6 | 	neg	local07, #1
084c8                 | ' 
084c8                 | ' varname$=lparts(ct).part$
084c8                 | ' suffix$=right$(varname$,1)
084c8                 | ' j=-1
084c8                 | ' 
084c8                 | ' for i=0 to varnum-1
084c8     00 2C 06 F6 | 	mov	local08, #0
084cc     53 00 00 FF 
084d0     DC E5 05 F1 | 	add	objptr, ##42972
084d4     F2 2E 02 FB | 	rdlong	local09, objptr
084d8     53 00 00 FF 
084dc     DC E5 85 F1 | 	sub	objptr, ##42972
084e0                 | LR__0680
084e0     17 2D 52 F2 | 	cmps	local08, local09 wc
084e4     38 00 90 3D |  if_ae	jmp	#LR__0681
084e8                 | '   if variables(i).name=varname$ then j=i : exit
084e8     16 15 02 F6 | 	mov	arg02, local08
084ec     04 14 66 F0 | 	shl	arg02, #4
084f0     33 00 00 FF 
084f4     DC E5 05 F1 | 	add	objptr, ##26588
084f8     F2 14 02 F1 | 	add	arg02, objptr
084fc     0A 13 02 FB | 	rdlong	arg01, arg02
08500     13 15 02 F6 | 	mov	arg02, local05
08504     33 00 00 FF 
08508     DC E5 85 F1 | 	sub	objptr, ##26588
0850c     7C D6 B0 FD | 	call	#__system___string_cmp
08510     00 FA 0D F2 | 	cmp	result1, #0 wz
08514     16 2B 02 A6 |  if_e	mov	local07, local08
08518     01 2C 06 51 |  if_ne	add	local08, #1
0851c     C0 FF 9F 5D |  if_ne	jmp	#LR__0680
08520                 | LR__0681
08520                 | ' if  j=-1 andalso varnum<maxvars then   
08520     FF FF 7F FF 
08524     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
08528     A8 00 90 5D |  if_ne	jmp	#LR__0682
0852c     53 00 00 FF 
08530     DC E5 05 F1 | 	add	objptr, ##42972
08534     F2 2E 02 FB | 	rdlong	local09, objptr
08538     53 00 00 FF 
0853c     DC E5 85 F1 | 	sub	objptr, ##42972
08540     01 00 00 FF 
08544     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
08548     88 00 90 3D |  if_ae	jmp	#LR__0682
0854c     53 00 00 FF 
08550     DC E5 05 F1 | 	add	objptr, ##42972
08554     F2 2E 02 FB | 	rdlong	local09, objptr
08558     04 2E 66 F0 | 	shl	local09, #4
0855c     20 00 00 FF 
08560     00 E4 85 F1 | 	sub	objptr, ##16384
08564     F2 2E 02 F1 | 	add	local09, objptr
08568     17 27 62 FC | 	wrlong	local05, local09
0856c     20 00 00 FF 
08570     00 E4 05 F1 | 	add	objptr, ##16384
08574     F2 2E 02 FB | 	rdlong	local09, objptr
08578     04 2E 66 F0 | 	shl	local09, #4
0857c     20 00 00 FF 
08580     00 E4 85 F1 | 	sub	objptr, ##16384
08584     F2 2E 02 F1 | 	add	local09, objptr
08588     04 2E 06 F1 | 	add	local09, #4
0858c     17 01 68 FC | 	wrlong	#0, local09
08590     20 00 00 FF 
08594     00 E4 05 F1 | 	add	objptr, ##16384
08598     F2 2E 02 FB | 	rdlong	local09, objptr
0859c     04 2E 66 F0 | 	shl	local09, #4
085a0     20 00 00 FF 
085a4     00 E4 85 F1 | 	sub	objptr, ##16384
085a8     F2 2E 02 F1 | 	add	local09, objptr
085ac     0C 2E 06 F1 | 	add	local09, #12
085b0     17 39 68 FC | 	wrlong	#28, local09
085b4     20 00 00 FF 
085b8     00 E4 05 F1 | 	add	objptr, ##16384
085bc     F2 2E 02 FB | 	rdlong	local09, objptr
085c0     17 2B 02 F6 | 	mov	local07, local09
085c4     01 2E 06 F1 | 	add	local09, #1
085c8     F2 2E 62 FC | 	wrlong	local09, objptr
085cc     53 00 00 FF 
085d0     DC E5 85 F1 | 	sub	objptr, ##42972
085d4                 | LR__0682
085d4     00 2E 06 F6 | 	mov	local09, #0
085d8                 | ' numpar=0
085d8                 | ' ' check if it is an array
085d8                 | ' 
085d8                 | ' if lparts(ct+1).token=token_lpar then
085d8     56 00 00 FF 
085dc     18 E4 05 F1 | 	add	objptr, ##44056
085e0     F2 2C 02 FB | 	rdlong	local08, objptr
085e4     01 2C 06 F1 | 	add	local08, #1
085e8     03 2C 66 F0 | 	shl	local08, #3
085ec     02 00 00 FF 
085f0     38 E4 85 F1 | 	sub	objptr, ##1080
085f4     F2 2C 02 F1 | 	add	local08, objptr
085f8     04 2C 06 F1 | 	add	local08, #4
085fc     16 2D 02 FB | 	rdlong	local08, local08
08600     15 2C 0E F2 | 	cmp	local08, #21 wz
08604     53 00 00 FF 
08608     E0 E5 85 F1 | 	sub	objptr, ##42976
0860c     08 01 90 5D |  if_ne	jmp	#LR__0687
08610     56 00 00 FF 
08614     18 E4 05 F1 | 	add	objptr, ##44056
08618     F2 30 02 FB | 	rdlong	local10, objptr
0861c     01 30 06 F1 | 	add	local10, #1
08620     F2 30 62 FC | 	wrlong	local10, objptr
08624     56 00 00 FF 
08628     18 E4 85 F1 | 	sub	objptr, ##44056
0862c                 | '   ct+=1 											' omit this lpar, this is for expr list
0862c                 | '   do
0862c                 | LR__0683
0862c     56 00 00 FF 
08630     18 E4 05 F1 | 	add	objptr, ##44056
08634     F2 2C 02 FB | 	rdlong	local08, objptr
08638     01 2C 06 F1 | 	add	local08, #1
0863c     F2 2C 62 FC | 	wrlong	local08, objptr
08640                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08640                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08640     03 2C 66 F0 | 	shl	local08, #3
08644     02 00 00 FF 
08648     38 E4 85 F1 | 	sub	objptr, ##1080
0864c     F2 2C 02 F1 | 	add	local08, objptr
08650     04 2C 06 F1 | 	add	local08, #4
08654     16 31 02 FB | 	rdlong	local10, local08
08658     15 30 0E F2 | 	cmp	local10, #21 wz
0865c     53 00 00 FF 
08660     E0 E5 85 F1 | 	sub	objptr, ##42976
08664     40 00 90 5D |  if_ne	jmp	#LR__0684
08668     56 00 00 FF 
0866c     18 E4 05 F1 | 	add	objptr, ##44056
08670     F2 30 02 FB | 	rdlong	local10, objptr
08674     01 30 06 F1 | 	add	local10, #1
08678     F2 30 62 FC | 	wrlong	local10, objptr
0867c     56 00 00 FF 
08680     18 E4 85 F1 | 	sub	objptr, ##44056
08684     74 EE BF FD | 	call	#_expr
08688     56 00 00 FF 
0868c     18 E4 05 F1 | 	add	objptr, ##44056
08690     F2 30 02 FB | 	rdlong	local10, objptr
08694     01 30 06 F1 | 	add	local10, #1
08698     F2 30 62 FC | 	wrlong	local10, objptr
0869c     56 00 00 FF 
086a0     18 E4 85 F1 | 	sub	objptr, ##44056
086a4     04 00 90 FD | 	jmp	#LR__0685
086a8                 | LR__0684
086a8     50 EE BF FD | 	call	#_expr
086ac                 | LR__0685
086ac     01 2E 06 F1 | 	add	local09, #1
086b0     56 00 00 FF 
086b4     18 E4 05 F1 | 	add	objptr, ##44056
086b8     F2 2C 02 FB | 	rdlong	local08, objptr
086bc     03 2C 66 F0 | 	shl	local08, #3
086c0     02 00 00 FF 
086c4     38 E4 85 F1 | 	sub	objptr, ##1080
086c8     F2 2C 02 F1 | 	add	local08, objptr
086cc     04 2C 06 F1 | 	add	local08, #4
086d0     16 31 02 FB | 	rdlong	local10, local08
086d4     14 30 0E F2 | 	cmp	local10, #20 wz
086d8     53 00 00 FF 
086dc     E0 E5 85 F1 | 	sub	objptr, ##42976
086e0     34 00 90 AD |  if_e	jmp	#LR__0686
086e4     56 00 00 FF 
086e8     18 E4 05 F1 | 	add	objptr, ##44056
086ec     F2 30 02 FB | 	rdlong	local10, objptr
086f0     03 30 66 F0 | 	shl	local10, #3
086f4     02 00 00 FF 
086f8     38 E4 85 F1 | 	sub	objptr, ##1080
086fc     F2 30 02 F1 | 	add	local10, objptr
08700     04 30 06 F1 | 	add	local10, #4
08704     18 31 02 FB | 	rdlong	local10, local10
08708     FE 31 0E F2 | 	cmp	local10, #510 wz
0870c     53 00 00 FF 
08710     E0 E5 85 F1 | 	sub	objptr, ##42976
08714     14 FF 9F 5D |  if_ne	jmp	#LR__0683
08718                 | LR__0686
08718                 | LR__0687
08718     17 21 02 F6 | 	mov	local02, local09
0871c     11 22 06 F6 | 	mov	local03, #17
08720     15 1F 02 F6 | 	mov	local01, local07
08724     0F 31 02 F6 | 	mov	local10, local01
08728     10 2F 02 F6 | 	mov	local09, local02
0872c     11 2D 02 F6 | 	mov	local08, local03
08730     69 00 00 FF 
08734     50 E4 05 F1 | 	add	objptr, ##53840
08738     F2 2A 02 FB | 	rdlong	local07, objptr
0873c     15 29 02 F6 | 	mov	local06, local07
08740     01 28 66 F0 | 	shl	local06, #1
08744     15 29 02 F1 | 	add	local06, local07
08748     02 28 66 F0 | 	shl	local06, #2
0874c     03 00 00 FF 
08750     00 E4 85 F1 | 	sub	objptr, ##1536
08754     F2 28 02 F1 | 	add	local06, objptr
08758     14 31 62 FC | 	wrlong	local10, local06
0875c     03 00 00 FF 
08760     00 E4 05 F1 | 	add	objptr, ##1536
08764     F2 30 02 FB | 	rdlong	local10, objptr
08768     18 27 02 F6 | 	mov	local05, local10
0876c     01 26 66 F0 | 	shl	local05, #1
08770     18 27 02 F1 | 	add	local05, local10
08774     02 26 66 F0 | 	shl	local05, #2
08778     03 00 00 FF 
0877c     00 E4 85 F1 | 	sub	objptr, ##1536
08780     F2 26 02 F1 | 	add	local05, objptr
08784     04 26 06 F1 | 	add	local05, #4
08788     13 2F 62 FC | 	wrlong	local09, local05
0878c     03 00 00 FF 
08790     00 E4 05 F1 | 	add	objptr, ##1536
08794     F2 30 02 FB | 	rdlong	local10, objptr
08798     18 FB 01 F6 | 	mov	result1, local10
0879c     01 FA 65 F0 | 	shl	result1, #1
087a0     18 FB 01 F1 | 	add	result1, local10
087a4     02 FA 65 F0 | 	shl	result1, #2
087a8     03 00 00 FF 
087ac     00 E4 85 F1 | 	sub	objptr, ##1536
087b0     F2 FA 01 F1 | 	add	result1, objptr
087b4     08 FA 05 F1 | 	add	result1, #8
087b8     FD 2C 62 FC | 	wrlong	local08, result1
087bc     03 00 00 FF 
087c0     00 E4 05 F1 | 	add	objptr, ##1536
087c4     F2 30 02 FB | 	rdlong	local10, objptr
087c8     01 30 06 F1 | 	add	local10, #1
087cc     F2 30 62 FC | 	wrlong	local10, objptr
087d0     69 00 00 FF 
087d4     50 E4 85 F1 | 	sub	objptr, ##53840
087d8                 | ' 
087d8                 | ' t2.result.twowords(1)=numpar
087d8                 | ' 
087d8                 | ' 
087d8                 | ' 
087d8                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
087d8                 | ' 
087d8                 | ' 
087d8                 | '  
087d8                 | ' 
087d8                 | ' 701 
087d8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
087d8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
087d8     FF FF 7F FF 
087dc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
087e0     B8 00 90 5D |  if_ne	jmp	#LR__0688
087e4     15 22 06 F6 | 	mov	local03, #21
087e8     0F 31 02 F6 | 	mov	local10, local01
087ec     10 2F 02 F6 | 	mov	local09, local02
087f0     11 2D 02 F6 | 	mov	local08, local03
087f4     69 00 00 FF 
087f8     50 E4 05 F1 | 	add	objptr, ##53840
087fc     F2 2A 02 FB | 	rdlong	local07, objptr
08800     15 29 02 F6 | 	mov	local06, local07
08804     01 28 66 F0 | 	shl	local06, #1
08808     15 29 02 F1 | 	add	local06, local07
0880c     02 28 66 F0 | 	shl	local06, #2
08810     03 00 00 FF 
08814     00 E4 85 F1 | 	sub	objptr, ##1536
08818     F2 28 02 F1 | 	add	local06, objptr
0881c     14 31 62 FC | 	wrlong	local10, local06
08820     03 00 00 FF 
08824     00 E4 05 F1 | 	add	objptr, ##1536
08828     F2 1E 02 FB | 	rdlong	local01, objptr
0882c     0F 27 02 F6 | 	mov	local05, local01
08830     01 26 66 F0 | 	shl	local05, #1
08834     0F 27 02 F1 | 	add	local05, local01
08838     02 26 66 F0 | 	shl	local05, #2
0883c     03 00 00 FF 
08840     00 E4 85 F1 | 	sub	objptr, ##1536
08844     F2 26 02 F1 | 	add	local05, objptr
08848     04 26 06 F1 | 	add	local05, #4
0884c     13 2F 62 FC | 	wrlong	local09, local05
08850     03 00 00 FF 
08854     00 E4 05 F1 | 	add	objptr, ##1536
08858     F2 1E 02 FB | 	rdlong	local01, objptr
0885c     0F FB 01 F6 | 	mov	result1, local01
08860     01 FA 65 F0 | 	shl	result1, #1
08864     0F FB 01 F1 | 	add	result1, local01
08868     02 FA 65 F0 | 	shl	result1, #2
0886c     03 00 00 FF 
08870     00 E4 85 F1 | 	sub	objptr, ##1536
08874     F2 FA 01 F1 | 	add	result1, objptr
08878     08 FA 05 F1 | 	add	result1, #8
0887c     FD 2C 62 FC | 	wrlong	local08, result1
08880     03 00 00 FF 
08884     00 E4 05 F1 | 	add	objptr, ##1536
08888     F2 30 02 FB | 	rdlong	local10, objptr
0888c     01 30 06 F1 | 	add	local10, #1
08890     F2 30 62 FC | 	wrlong	local10, objptr
08894     69 00 00 FF 
08898     50 E4 85 F1 | 	sub	objptr, ##53840
0889c                 | LR__0688
0889c     A7 F0 03 F6 | 	mov	ptra, fp
088a0     B2 00 A0 FD | 	call	#popregs_
088a4                 | _getvar_ret
088a4     2D 00 64 FD | 	ret
088a8                 | 
088a8                 | ' 
088a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
088a8                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
088a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
088a8                 | ' 
088a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
088a8                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
088a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
088a8                 | ' 
088a8                 | ' function execute_line (astart=0 as integer) as integer
088a8                 | _execute_line
088a8     04 4A 05 F6 | 	mov	COUNT_, #4
088ac     A8 00 A0 FD | 	call	#pushregs_
088b0     78 00 00 FF 
088b4     88 E5 05 F1 | 	add	objptr, ##61832
088b8     F2 00 68 FC | 	wrlong	#0, objptr
088bc                 | ' runptr2=0
088bc                 | ' for lineptr_e=astart to lineptr-1
088bc     0F 00 00 FF 
088c0     34 E5 85 F1 | 	sub	objptr, ##7988
088c4     F2 12 62 FC | 	wrlong	arg01, objptr
088c8     04 E4 85 F1 | 	sub	objptr, #4
088cc     F2 1E 02 FB | 	rdlong	local01, objptr
088d0     69 00 00 FF 
088d4     50 E4 85 F1 | 	sub	objptr, ##53840
088d8                 | LR__0690
088d8     69 00 00 FF 
088dc     54 E4 05 F1 | 	add	objptr, ##53844
088e0     F2 FA 01 FB | 	rdlong	result1, objptr
088e4     69 00 00 FF 
088e8     54 E4 85 F1 | 	sub	objptr, ##53844
088ec     0F FB 51 F2 | 	cmps	result1, local01 wc
088f0     98 00 90 3D |  if_ae	jmp	#LR__0691
088f4     69 00 00 FF 
088f8     54 E4 05 F1 | 	add	objptr, ##53844
088fc     F2 FA 01 FB | 	rdlong	result1, objptr
08900     FD 20 02 F6 | 	mov	local02, result1
08904     01 20 66 F0 | 	shl	local02, #1
08908     FD 20 02 F1 | 	add	local02, result1
0890c     02 20 66 F0 | 	shl	local02, #2
08910     03 00 00 FF 
08914     04 E4 85 F1 | 	sub	objptr, ##1540
08918     F2 20 02 F1 | 	add	local02, objptr
0891c     08 20 06 F1 | 	add	local02, #8
08920     10 21 02 FB | 	rdlong	local02, local02
08924     10 21 E2 F8 | 	getbyte	local02, local02, #0
08928     02 20 66 F0 | 	shl	local02, #2
0892c     04 00 00 FF 
08930     1C E4 85 F1 | 	sub	objptr, ##2076
08934     F2 20 02 F1 | 	add	local02, objptr
08938     10 21 02 FB | 	rdlong	local02, local02
0893c     10 23 02 F6 | 	mov	local03, local02
08940     13 20 46 F7 | 	zerox	local02, #19
08944     14 22 46 F0 | 	shr	local03, #20
08948     02 22 66 F0 | 	shl	local03, #2
0894c     ED 22 02 F1 | 	add	local03, __methods__
08950     11 23 02 FB | 	rdlong	local03, local03
08954     62 00 00 FF 
08958     34 E4 85 F1 | 	sub	objptr, ##50228
0895c     F2 24 02 F6 | 	mov	local04, objptr
08960     10 E5 01 F6 | 	mov	objptr, local02
08964     2D 22 62 FD | 	call	local03
08968     12 E5 01 F6 | 	mov	objptr, local04
0896c     69 00 00 FF 
08970     54 E4 05 F1 | 	add	objptr, ##53844
08974     F2 24 02 FB | 	rdlong	local04, objptr
08978     01 24 06 F1 | 	add	local04, #1
0897c     F2 24 62 FC | 	wrlong	local04, objptr
08980     69 00 00 FF 
08984     54 E4 85 F1 | 	sub	objptr, ##53844
08988     4C FF 9F FD | 	jmp	#LR__0690
0898c                 | LR__0691
0898c                 | ' return runptr2
0898c     78 00 00 FF 
08990     88 E5 05 F1 | 	add	objptr, ##61832
08994     F2 FA 01 FB | 	rdlong	result1, objptr
08998     78 00 00 FF 
0899c     88 E5 85 F1 | 	sub	objptr, ##61832
089a0     A7 F0 03 F6 | 	mov	ptra, fp
089a4     B2 00 A0 FD | 	call	#popregs_
089a8                 | _execute_line_ret
089a8     2D 00 64 FD | 	ret
089ac                 | 
089ac                 | ' 
089ac                 | ' 
089ac                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
089ac                 | ' 
089ac                 | ' function pop() as expr_result
089ac                 | _pop
089ac                 | ' 
089ac                 | ' if stackpointer=0 then
089ac     62 00 00 FF 
089b0     2C E4 05 F1 | 	add	objptr, ##50220
089b4     F2 FA 09 FB | 	rdlong	result1, objptr wz
089b8     62 00 00 FF 
089bc     2C E4 85 F1 | 	sub	objptr, ##50220
089c0     FF 04 06 A6 |  if_e	mov	_var03, #255
089c4     18 00 06 A6 |  if_e	mov	_var01, #24
089c8     68 00 90 AD |  if_e	jmp	#LR__0700
089cc     62 00 00 FF 
089d0     2C E4 05 F1 | 	add	objptr, ##50220
089d4     F2 FA 01 FB | 	rdlong	result1, objptr
089d8     01 FA 85 F1 | 	sub	result1, #1
089dc     F2 FA 61 FC | 	wrlong	result1, objptr
089e0     FD FE 01 F6 | 	mov	result3, result1
089e4     01 FE 65 F0 | 	shl	result3, #1
089e8     FD FE 01 F1 | 	add	result3, result1
089ec     02 FE 65 F0 | 	shl	result3, #2
089f0     0C 00 00 FF 
089f4     0C E4 85 F1 | 	sub	objptr, ##6156
089f8     F2 FE 01 F1 | 	add	result3, objptr
089fc     FF 00 02 FB | 	rdlong	_var01, result3
08a00     04 FE 05 F1 | 	add	result3, #4
08a04     FF FE 01 FB | 	rdlong	result3, result3
08a08     FD FC 01 F6 | 	mov	result2, result1
08a0c     01 FC 65 F0 | 	shl	result2, #1
08a10     FD FC 01 F1 | 	add	result2, result1
08a14     02 FC 65 F0 | 	shl	result2, #2
08a18     F2 FC 01 F1 | 	add	result2, objptr
08a1c     08 FC 05 F1 | 	add	result2, #8
08a20     FE FA 01 FB | 	rdlong	result1, result2
08a24     FF 02 02 F6 | 	mov	_var02, result3
08a28     FD 04 02 F6 | 	mov	_var03, result1
08a2c     56 00 00 FF 
08a30     20 E4 85 F1 | 	sub	objptr, ##44064
08a34                 | LR__0700
08a34                 | ' return t1
08a34     01 FD 01 F6 | 	mov	result2, _var02
08a38     02 FF 01 F6 | 	mov	result3, _var03
08a3c     00 FB 01 F6 | 	mov	result1, _var01
08a40                 | _pop_ret
08a40     2D 00 64 FD | 	ret
08a44                 | 
08a44                 | ' 
08a44                 | ' sub push(t1 as expr_result )
08a44                 | _push
08a44                 | ' 
08a44                 | ' 'print "In push: "; t1.result_type
08a44                 | ' 'print "In push: "; t1.result.uresult
08a44                 | ' 
08a44                 | ' if stackpointer<maxstack then 
08a44     62 00 00 FF 
08a48     2C E4 05 F1 | 	add	objptr, ##50220
08a4c     F2 00 02 FB | 	rdlong	_var01, objptr
08a50     62 00 00 FF 
08a54     2C E4 85 F1 | 	sub	objptr, ##50220
08a58     01 00 00 FF 
08a5c     00 00 56 F2 | 	cmps	_var01, ##512 wc
08a60     BC 00 90 3D |  if_ae	jmp	#LR__0710
08a64     09 01 02 FB | 	rdlong	_var01, arg01
08a68     04 12 06 F1 | 	add	arg01, #4
08a6c     09 03 02 FB | 	rdlong	_var02, arg01
08a70     04 12 06 F1 | 	add	arg01, #4
08a74     09 13 02 FB | 	rdlong	arg01, arg01
08a78     62 00 00 FF 
08a7c     2C E4 05 F1 | 	add	objptr, ##50220
08a80     F2 04 02 FB | 	rdlong	_var03, objptr
08a84     02 07 02 F6 | 	mov	_var04, _var03
08a88     01 06 66 F0 | 	shl	_var04, #1
08a8c     02 07 02 F1 | 	add	_var04, _var03
08a90     02 06 66 F0 | 	shl	_var04, #2
08a94     0C 00 00 FF 
08a98     0C E4 85 F1 | 	sub	objptr, ##6156
08a9c     F2 06 02 F1 | 	add	_var04, objptr
08aa0     03 01 62 FC | 	wrlong	_var01, _var04
08aa4     0C 00 00 FF 
08aa8     0C E4 05 F1 | 	add	objptr, ##6156
08aac     F2 06 02 FB | 	rdlong	_var04, objptr
08ab0     03 05 02 F6 | 	mov	_var03, _var04
08ab4     01 04 66 F0 | 	shl	_var03, #1
08ab8     03 05 02 F1 | 	add	_var03, _var04
08abc     02 04 66 F0 | 	shl	_var03, #2
08ac0     0C 00 00 FF 
08ac4     0C E4 85 F1 | 	sub	objptr, ##6156
08ac8     F2 04 02 F1 | 	add	_var03, objptr
08acc     04 04 06 F1 | 	add	_var03, #4
08ad0     02 03 62 FC | 	wrlong	_var02, _var03
08ad4     0C 00 00 FF 
08ad8     0C E4 05 F1 | 	add	objptr, ##6156
08adc     F2 06 02 FB | 	rdlong	_var04, objptr
08ae0     03 05 02 F6 | 	mov	_var03, _var04
08ae4     01 04 66 F0 | 	shl	_var03, #1
08ae8     03 05 02 F1 | 	add	_var03, _var04
08aec     02 04 66 F0 | 	shl	_var03, #2
08af0     0C 00 00 FF 
08af4     0C E4 85 F1 | 	sub	objptr, ##6156
08af8     F2 04 02 F1 | 	add	_var03, objptr
08afc     08 04 06 F1 | 	add	_var03, #8
08b00     02 13 62 FC | 	wrlong	arg01, _var03
08b04     0C 00 00 FF 
08b08     0C E4 05 F1 | 	add	objptr, ##6156
08b0c     F2 00 02 FB | 	rdlong	_var01, objptr
08b10     01 00 06 F1 | 	add	_var01, #1
08b14     F2 00 62 FC | 	wrlong	_var01, objptr
08b18     62 00 00 FF 
08b1c     2C E4 85 F1 | 	sub	objptr, ##50220
08b20                 | LR__0710
08b20                 | _push_ret
08b20     2D 00 64 FD | 	ret
08b24                 | 
08b24                 | ' 
08b24                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
08b24                 | ' 
08b24                 | ' sub do_push
08b24                 | _do_push
08b24                 | ' if stackpointer<maxstack then 
08b24     62 00 00 FF 
08b28     2C E4 05 F1 | 	add	objptr, ##50220
08b2c     F2 00 02 FB | 	rdlong	_var01, objptr
08b30     62 00 00 FF 
08b34     2C E4 85 F1 | 	sub	objptr, ##50220
08b38     01 00 00 FF 
08b3c     00 00 56 F2 | 	cmps	_var01, ##512 wc
08b40     F8 00 90 3D |  if_ae	jmp	#LR__0720
08b44     69 00 00 FF 
08b48     54 E4 05 F1 | 	add	objptr, ##53844
08b4c     F2 02 02 FB | 	rdlong	_var02, objptr
08b50     01 05 02 F6 | 	mov	_var03, _var02
08b54     01 04 66 F0 | 	shl	_var03, #1
08b58     01 05 02 F1 | 	add	_var03, _var02
08b5c     02 04 66 F0 | 	shl	_var03, #2
08b60     03 00 00 FF 
08b64     04 E4 85 F1 | 	sub	objptr, ##1540
08b68     F2 04 02 F1 | 	add	_var03, objptr
08b6c     02 01 02 FB | 	rdlong	_var01, _var03
08b70     04 04 06 F1 | 	add	_var03, #4
08b74     02 07 02 FB | 	rdlong	_var04, _var03
08b78     01 05 02 F6 | 	mov	_var03, _var02
08b7c     01 04 66 F0 | 	shl	_var03, #1
08b80     01 05 02 F1 | 	add	_var03, _var02
08b84     02 04 66 F0 | 	shl	_var03, #2
08b88     F2 04 02 F1 | 	add	_var03, objptr
08b8c     08 04 06 F1 | 	add	_var03, #8
08b90     02 03 02 FB | 	rdlong	_var02, _var03
08b94     04 00 00 FF 
08b98     24 E4 85 F1 | 	sub	objptr, ##2084
08b9c     F2 04 02 FB | 	rdlong	_var03, objptr
08ba0     02 09 02 F6 | 	mov	_var05, _var03
08ba4     01 08 66 F0 | 	shl	_var05, #1
08ba8     02 09 02 F1 | 	add	_var05, _var03
08bac     02 08 66 F0 | 	shl	_var05, #2
08bb0     0C 00 00 FF 
08bb4     0C E4 85 F1 | 	sub	objptr, ##6156
08bb8     F2 08 02 F1 | 	add	_var05, objptr
08bbc     04 01 62 FC | 	wrlong	_var01, _var05
08bc0     0C 00 00 FF 
08bc4     0C E4 05 F1 | 	add	objptr, ##6156
08bc8     F2 08 02 FB | 	rdlong	_var05, objptr
08bcc     04 05 02 F6 | 	mov	_var03, _var05
08bd0     01 04 66 F0 | 	shl	_var03, #1
08bd4     04 05 02 F1 | 	add	_var03, _var05
08bd8     02 04 66 F0 | 	shl	_var03, #2
08bdc     0C 00 00 FF 
08be0     0C E4 85 F1 | 	sub	objptr, ##6156
08be4     F2 04 02 F1 | 	add	_var03, objptr
08be8     04 04 06 F1 | 	add	_var03, #4
08bec     02 07 62 FC | 	wrlong	_var04, _var03
08bf0     0C 00 00 FF 
08bf4     0C E4 05 F1 | 	add	objptr, ##6156
08bf8     F2 08 02 FB | 	rdlong	_var05, objptr
08bfc     04 07 02 F6 | 	mov	_var04, _var05
08c00     01 06 66 F0 | 	shl	_var04, #1
08c04     04 07 02 F1 | 	add	_var04, _var05
08c08     02 06 66 F0 | 	shl	_var04, #2
08c0c     0C 00 00 FF 
08c10     0C E4 85 F1 | 	sub	objptr, ##6156
08c14     F2 06 02 F1 | 	add	_var04, objptr
08c18     08 06 06 F1 | 	add	_var04, #8
08c1c     03 03 62 FC | 	wrlong	_var02, _var04
08c20     0C 00 00 FF 
08c24     0C E4 05 F1 | 	add	objptr, ##6156
08c28     F2 00 02 FB | 	rdlong	_var01, objptr
08c2c     01 00 06 F1 | 	add	_var01, #1
08c30     F2 00 62 FC | 	wrlong	_var01, objptr
08c34     62 00 00 FF 
08c38     2C E4 85 F1 | 	sub	objptr, ##50220
08c3c                 | LR__0720
08c3c                 | _do_push_ret
08c3c     2D 00 64 FD | 	ret
08c40                 | 
08c40                 | ' 
08c40                 | '   
08c40                 | ' sub csave_block(address as ulong)
08c40                 | _csave_block
08c40     09 01 02 F6 | 	mov	_var01, arg01
08c44                 | ' 
08c44                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
08c44                 | ' ' we enter it at the state of playing 1 kHz header tone
08c44                 | ' 
08c44                 | ' for i=0 to 63 step 2
08c44     00 02 06 F6 | 	mov	_var02, #0
08c48                 | LR__0730
08c48                 | '   do: loop until lpeek(base+32*7)>32768
08c48     55 00 00 FF 
08c4c     E4 E5 05 F1 | 	add	objptr, ##44004
08c50     97 0C 48 FB | 	callpa	#(@LR__0732-@LR__0731)>>2,fcache_load_ptr_
08c54                 | LR__0731
08c54     F2 12 02 FB | 	rdlong	arg01, objptr
08c58     E0 12 06 F1 | 	add	arg01, #224
08c5c     09 FB 01 FB | 	rdlong	result1, arg01
08c60     40 00 00 FF 
08c64     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08c68     E8 FF 9F CD |  if_b	jmp	#LR__0731
08c6c                 | LR__0732
08c6c     00 13 02 F6 | 	mov	arg01, _var01
08c70     01 05 02 F6 | 	mov	_var03, _var02
08c74     02 04 66 F0 | 	shl	_var03, #2
08c78     02 13 02 F1 | 	add	arg01, _var03
08c7c     09 07 02 FB | 	rdlong	_var04, arg01
08c80     24 00 00 FF 
08c84     AC E4 05 F1 | 	add	objptr, ##18604
08c88     F2 06 62 FC | 	wrlong	_var04, objptr
08c8c     7A 00 00 FF 
08c90     90 E4 85 F1 | 	sub	objptr, ##62608
08c94                 | '   q=lpeek(address+4*i)
08c94                 | '      for bit=0 to 31
08c94     00 08 06 F6 | 	mov	_var05, #0
08c98     97 84 48 FB | 	callpa	#(@LR__0737-@LR__0733)>>2,fcache_load_ptr_
08c9c                 | LR__0733
08c9c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08c9c     7A 00 00 FF 
08ca0     90 E4 05 F1 | 	add	objptr, ##62608
08ca4     F2 06 02 FB | 	rdlong	_var04, objptr
08ca8     7A 00 00 FF 
08cac     90 E4 85 F1 | 	sub	objptr, ##62608
08cb0     04 05 C2 F9 | 	decod	_var03, _var05
08cb4     02 07 CA F7 | 	test	_var04, _var03 wz
08cb8     60 00 90 AD |  if_e	jmp	#LR__0734
08cbc     04 05 02 F6 | 	mov	_var03, _var05
08cc0     02 04 66 F0 | 	shl	_var03, #2
08cc4     76 00 00 FF 
08cc8     80 E4 05 F1 | 	add	objptr, ##60544
08ccc     F2 04 02 F1 | 	add	_var03, objptr
08cd0     02 FF 48 FC | 	wrbyte	#127, _var03
08cd4     04 05 02 F6 | 	mov	_var03, _var05
08cd8     02 04 66 F0 | 	shl	_var03, #2
08cdc     01 04 06 F1 | 	add	_var03, #1
08ce0     F2 04 02 F1 | 	add	_var03, objptr
08ce4     02 01 49 FC | 	wrbyte	#128, _var03
08ce8     04 05 02 F6 | 	mov	_var03, _var05
08cec     02 04 66 F0 | 	shl	_var03, #2
08cf0     02 04 06 F1 | 	add	_var03, #2
08cf4     F2 04 02 F1 | 	add	_var03, objptr
08cf8     02 FF 48 FC | 	wrbyte	#127, _var03
08cfc     04 05 02 F6 | 	mov	_var03, _var05
08d00     02 04 66 F0 | 	shl	_var03, #2
08d04     03 04 06 F1 | 	add	_var03, #3
08d08     F2 04 02 F1 | 	add	_var03, objptr
08d0c     02 01 49 FC | 	wrbyte	#128, _var03
08d10     76 00 00 FF 
08d14     80 E4 85 F1 | 	sub	objptr, ##60544
08d18     5C 00 90 FD | 	jmp	#LR__0735
08d1c                 | LR__0734
08d1c     04 05 02 F6 | 	mov	_var03, _var05
08d20     02 04 66 F0 | 	shl	_var03, #2
08d24     76 00 00 FF 
08d28     80 E4 05 F1 | 	add	objptr, ##60544
08d2c     F2 04 02 F1 | 	add	_var03, objptr
08d30     02 01 49 FC | 	wrbyte	#128, _var03
08d34     04 05 02 F6 | 	mov	_var03, _var05
08d38     02 04 66 F0 | 	shl	_var03, #2
08d3c     01 04 06 F1 | 	add	_var03, #1
08d40     F2 04 02 F1 | 	add	_var03, objptr
08d44     02 01 49 FC | 	wrbyte	#128, _var03
08d48     04 05 02 F6 | 	mov	_var03, _var05
08d4c     02 04 66 F0 | 	shl	_var03, #2
08d50     02 04 06 F1 | 	add	_var03, #2
08d54     F2 04 02 F1 | 	add	_var03, objptr
08d58     02 FF 48 FC | 	wrbyte	#127, _var03
08d5c     04 05 02 F6 | 	mov	_var03, _var05
08d60     02 04 66 F0 | 	shl	_var03, #2
08d64     03 04 06 F1 | 	add	_var03, #3
08d68     F2 04 02 F1 | 	add	_var03, objptr
08d6c     02 FF 48 FC | 	wrbyte	#127, _var03
08d70     76 00 00 FF 
08d74     80 E4 85 F1 | 	sub	objptr, ##60544
08d78                 | LR__0735
08d78     01 08 06 F1 | 	add	_var05, #1
08d7c     20 08 56 F2 | 	cmps	_var05, #32 wc
08d80     18 FF 9F CD |  if_b	jmp	#LR__0733
08d84                 | '   do: loop until lpeek(base+32*7)<32768
08d84     55 00 00 FF 
08d88     E4 E5 05 F1 | 	add	objptr, ##44004
08d8c                 | LR__0736
08d8c     F2 12 02 FB | 	rdlong	arg01, objptr
08d90     E0 12 06 F1 | 	add	arg01, #224
08d94     09 FB 01 FB | 	rdlong	result1, arg01
08d98     40 00 00 FF 
08d9c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08da0     E8 FF 9F 3D |  if_ae	jmp	#LR__0736
08da4                 | LR__0737
08da4     00 13 02 F6 | 	mov	arg01, _var01
08da8     04 12 06 F1 | 	add	arg01, #4
08dac     01 05 02 F6 | 	mov	_var03, _var02
08db0     02 04 66 F0 | 	shl	_var03, #2
08db4     02 13 02 F1 | 	add	arg01, _var03
08db8     09 07 02 FB | 	rdlong	_var04, arg01
08dbc     24 00 00 FF 
08dc0     AC E4 05 F1 | 	add	objptr, ##18604
08dc4     F2 06 62 FC | 	wrlong	_var04, objptr
08dc8     7A 00 00 FF 
08dcc     90 E4 85 F1 | 	sub	objptr, ##62608
08dd0                 | '   q=lpeek(address+4+4*i)
08dd0                 | '      for bit=0 to 31
08dd0     00 08 06 F6 | 	mov	_var05, #0
08dd4     97 94 48 FB | 	callpa	#(@LR__0741-@LR__0738)>>2,fcache_load_ptr_
08dd8                 | LR__0738
08dd8                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
08dd8     7A 00 00 FF 
08ddc     90 E4 05 F1 | 	add	objptr, ##62608
08de0     F2 06 02 FB | 	rdlong	_var04, objptr
08de4     7A 00 00 FF 
08de8     90 E4 85 F1 | 	sub	objptr, ##62608
08dec     04 05 C2 F9 | 	decod	_var03, _var05
08df0     02 07 CA F7 | 	test	_var04, _var03 wz
08df4     80 00 90 AD |  if_e	jmp	#LR__0739
08df8     04 0B 02 F6 | 	mov	_var06, _var05
08dfc     02 0A 66 F0 | 	shl	_var06, #2
08e00     80 04 06 F6 | 	mov	_var03, #128
08e04     05 05 02 F1 | 	add	_var03, _var06
08e08     76 00 00 FF 
08e0c     80 E4 05 F1 | 	add	objptr, ##60544
08e10     F2 04 02 F1 | 	add	_var03, objptr
08e14     02 FF 48 FC | 	wrbyte	#127, _var03
08e18     04 0B 02 F6 | 	mov	_var06, _var05
08e1c     02 0A 66 F0 | 	shl	_var06, #2
08e20     80 04 06 F6 | 	mov	_var03, #128
08e24     05 05 02 F1 | 	add	_var03, _var06
08e28     01 04 06 F1 | 	add	_var03, #1
08e2c     F2 04 02 F1 | 	add	_var03, objptr
08e30     02 01 49 FC | 	wrbyte	#128, _var03
08e34     04 0B 02 F6 | 	mov	_var06, _var05
08e38     02 0A 66 F0 | 	shl	_var06, #2
08e3c     80 04 06 F6 | 	mov	_var03, #128
08e40     05 05 02 F1 | 	add	_var03, _var06
08e44     02 04 06 F1 | 	add	_var03, #2
08e48     F2 04 02 F1 | 	add	_var03, objptr
08e4c     02 FF 48 FC | 	wrbyte	#127, _var03
08e50     04 0B 02 F6 | 	mov	_var06, _var05
08e54     02 0A 66 F0 | 	shl	_var06, #2
08e58     80 04 06 F6 | 	mov	_var03, #128
08e5c     05 05 02 F1 | 	add	_var03, _var06
08e60     03 04 06 F1 | 	add	_var03, #3
08e64     F2 04 02 F1 | 	add	_var03, objptr
08e68     02 01 49 FC | 	wrbyte	#128, _var03
08e6c     76 00 00 FF 
08e70     80 E4 85 F1 | 	sub	objptr, ##60544
08e74     7C 00 90 FD | 	jmp	#LR__0740
08e78                 | LR__0739
08e78     04 0B 02 F6 | 	mov	_var06, _var05
08e7c     02 0A 66 F0 | 	shl	_var06, #2
08e80     80 04 06 F6 | 	mov	_var03, #128
08e84     05 05 02 F1 | 	add	_var03, _var06
08e88     76 00 00 FF 
08e8c     80 E4 05 F1 | 	add	objptr, ##60544
08e90     F2 04 02 F1 | 	add	_var03, objptr
08e94     02 01 49 FC | 	wrbyte	#128, _var03
08e98     04 0B 02 F6 | 	mov	_var06, _var05
08e9c     02 0A 66 F0 | 	shl	_var06, #2
08ea0     80 04 06 F6 | 	mov	_var03, #128
08ea4     05 05 02 F1 | 	add	_var03, _var06
08ea8     01 04 06 F1 | 	add	_var03, #1
08eac     F2 04 02 F1 | 	add	_var03, objptr
08eb0     02 01 49 FC | 	wrbyte	#128, _var03
08eb4     04 0B 02 F6 | 	mov	_var06, _var05
08eb8     02 0A 66 F0 | 	shl	_var06, #2
08ebc     80 04 06 F6 | 	mov	_var03, #128
08ec0     05 05 02 F1 | 	add	_var03, _var06
08ec4     02 04 06 F1 | 	add	_var03, #2
08ec8     F2 04 02 F1 | 	add	_var03, objptr
08ecc     02 FF 48 FC | 	wrbyte	#127, _var03
08ed0     04 0B 02 F6 | 	mov	_var06, _var05
08ed4     02 0A 66 F0 | 	shl	_var06, #2
08ed8     80 04 06 F6 | 	mov	_var03, #128
08edc     05 05 02 F1 | 	add	_var03, _var06
08ee0     03 04 06 F1 | 	add	_var03, #3
08ee4     F2 04 02 F1 | 	add	_var03, objptr
08ee8     02 FF 48 FC | 	wrbyte	#127, _var03
08eec     76 00 00 FF 
08ef0     80 E4 85 F1 | 	sub	objptr, ##60544
08ef4                 | LR__0740
08ef4     01 08 06 F1 | 	add	_var05, #1
08ef8     20 08 56 F2 | 	cmps	_var05, #32 wc
08efc     D8 FE 9F CD |  if_b	jmp	#LR__0738
08f00                 | LR__0741
08f00     02 02 06 F1 | 	add	_var02, #2
08f04     40 02 56 F2 | 	cmps	_var02, #64 wc
08f08     3C FD 9F CD |  if_b	jmp	#LR__0730
08f0c                 | ' do: loop until lpeek(base+32*7)>32768
08f0c     55 00 00 FF 
08f10     E4 E5 05 F1 | 	add	objptr, ##44004
08f14     97 84 48 FB | 	callpa	#(@LR__0750-@LR__0742)>>2,fcache_load_ptr_
08f18                 | LR__0742
08f18     F2 12 02 FB | 	rdlong	arg01, objptr
08f1c     E0 12 06 F1 | 	add	arg01, #224
08f20     09 FB 01 FB | 	rdlong	result1, arg01
08f24     40 00 00 FF 
08f28     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08f2c     E8 FF 9F CD |  if_b	jmp	#LR__0742
08f30     55 00 00 FF 
08f34     E4 E5 85 F1 | 	sub	objptr, ##44004
08f38                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08f38     00 02 06 F6 | 	mov	_var02, #0
08f3c                 | LR__0743
08f3c     01 07 52 F6 | 	abs	_var04, _var02 wc
08f40     07 06 06 F5 | 	and	_var04, #7
08f44     03 07 82 F6 | 	negc	_var04, _var04
08f48     04 06 56 F2 | 	cmps	_var04, #4 wc
08f4c     20 00 90 3D |  if_ae	jmp	#LR__0744
08f50     01 0B 02 F6 | 	mov	_var06, _var02
08f54     76 00 00 FF 
08f58     80 E4 05 F1 | 	add	objptr, ##60544
08f5c     F2 0A 02 F1 | 	add	_var06, objptr
08f60     05 FF 48 FC | 	wrbyte	#127, _var06
08f64     76 00 00 FF 
08f68     80 E4 85 F1 | 	sub	objptr, ##60544
08f6c     1C 00 90 FD | 	jmp	#LR__0745
08f70                 | LR__0744
08f70     01 0B 02 F6 | 	mov	_var06, _var02
08f74     76 00 00 FF 
08f78     80 E4 05 F1 | 	add	objptr, ##60544
08f7c     F2 0A 02 F1 | 	add	_var06, objptr
08f80     05 01 49 FC | 	wrbyte	#128, _var06
08f84     76 00 00 FF 
08f88     80 E4 85 F1 | 	sub	objptr, ##60544
08f8c                 | LR__0745
08f8c     01 02 06 F1 | 	add	_var02, #1
08f90     80 02 56 F2 | 	cmps	_var02, #128 wc
08f94     A4 FF 9F CD |  if_b	jmp	#LR__0743
08f98                 | ' 
08f98                 | ' do: loop until lpeek(base+32*7)<32768
08f98     55 00 00 FF 
08f9c     E4 E5 05 F1 | 	add	objptr, ##44004
08fa0                 | LR__0746
08fa0     F2 12 02 FB | 	rdlong	arg01, objptr
08fa4     E0 12 06 F1 | 	add	arg01, #224
08fa8     09 FB 01 FB | 	rdlong	result1, arg01
08fac     40 00 00 FF 
08fb0     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08fb4     E8 FF 9F 3D |  if_ae	jmp	#LR__0746
08fb8     55 00 00 FF 
08fbc     E4 E5 85 F1 | 	sub	objptr, ##44004
08fc0                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08fc0     80 02 06 F6 | 	mov	_var02, #128
08fc4                 | LR__0747
08fc4     01 07 52 F6 | 	abs	_var04, _var02 wc
08fc8     07 06 06 F5 | 	and	_var04, #7
08fcc     03 07 82 F6 | 	negc	_var04, _var04
08fd0     04 06 56 F2 | 	cmps	_var04, #4 wc
08fd4     20 00 90 3D |  if_ae	jmp	#LR__0748
08fd8     01 0B 02 F6 | 	mov	_var06, _var02
08fdc     76 00 00 FF 
08fe0     80 E4 05 F1 | 	add	objptr, ##60544
08fe4     F2 0A 02 F1 | 	add	_var06, objptr
08fe8     05 FF 48 FC | 	wrbyte	#127, _var06
08fec     76 00 00 FF 
08ff0     80 E4 85 F1 | 	sub	objptr, ##60544
08ff4     1C 00 90 FD | 	jmp	#LR__0749
08ff8                 | LR__0748
08ff8     01 0B 02 F6 | 	mov	_var06, _var02
08ffc     76 00 00 FF 
09000     80 E4 05 F1 | 	add	objptr, ##60544
09004     F2 0A 02 F1 | 	add	_var06, objptr
09008     05 01 49 FC | 	wrbyte	#128, _var06
0900c     76 00 00 FF 
09010     80 E4 85 F1 | 	sub	objptr, ##60544
09014                 | LR__0749
09014     01 02 06 F1 | 	add	_var02, #1
09018     00 03 16 F2 | 	cmp	_var02, #256 wc
0901c     A4 FF 9F CD |  if_b	jmp	#LR__0747
09020                 | LR__0750
09020                 | _csave_block_ret
09020     2D 00 64 FD | 	ret
09024                 | 
09024                 | ' 
09024                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09024                 | _csave_addtoblock
09024     04 4A 05 F6 | 	mov	COUNT_, #4
09028     A8 00 A0 FD | 	call	#pushregs_
0902c     09 1F 02 F6 | 	mov	local01, arg01
09030                 | ' 
09030                 | ' 
09030                 | ' if force=0 then
09030     07 14 4E F7 | 	zerox	arg02, #7 wz
09034     78 00 90 5D |  if_ne	jmp	#LR__0760
09038     78 00 00 FF 
0903c     80 E5 05 F1 | 	add	objptr, ##61824
09040     F2 14 02 FB | 	rdlong	arg02, objptr
09044     02 00 00 FF 
09048     00 E4 85 F1 | 	sub	objptr, ##1024
0904c     F2 14 02 F1 | 	add	arg02, objptr
09050     0A 1F 42 FC | 	wrbyte	local01, arg02
09054     02 00 00 FF 
09058     00 E4 05 F1 | 	add	objptr, ##1024
0905c     F2 1E 02 FB | 	rdlong	local01, objptr
09060     01 1E 06 F1 | 	add	local01, #1
09064     F2 1E 62 FC | 	wrlong	local01, objptr
09068                 | '   block(blockptr)=d
09068                 | '   blockptr+=1
09068                 | '   if blockptr>=255 then
09068     78 00 00 FF 
0906c     80 E5 85 F1 | 	sub	objptr, ##61824
09070     FF 1E 16 F2 | 	cmp	local01, #255 wc
09074     E4 00 90 CD |  if_b	jmp	#LR__0764
09078     76 00 00 FF 
0907c     80 E5 05 F1 | 	add	objptr, ##60800
09080     F2 12 02 F6 | 	mov	arg01, objptr
09084     76 00 00 FF 
09088     80 E5 85 F1 | 	sub	objptr, ##60800
0908c     B0 FB BF FD | 	call	#_csave_block
09090     78 00 00 FF 
09094     80 E5 05 F1 | 	add	objptr, ##61824
09098     F2 00 68 FC | 	wrlong	#0, objptr
0909c     78 00 00 FF 
090a0     80 E5 85 F1 | 	sub	objptr, ##61824
090a4     2C 13 06 F6 | 	mov	arg01, #300
090a8     AC CD B0 FD | 	call	#__system___waitms
090ac     AC 00 90 FD | 	jmp	#LR__0764
090b0                 | LR__0760
090b0     78 00 00 FF 
090b4     80 E5 05 F1 | 	add	objptr, ##61824
090b8     F2 20 02 FB | 	rdlong	local02, objptr
090bc     02 00 00 FF 
090c0     00 E4 85 F1 | 	sub	objptr, ##1024
090c4     F2 20 02 F1 | 	add	local02, objptr
090c8     10 1F 42 FC | 	wrbyte	local01, local02
090cc                 | '   block(blockptr)=d
090cc                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
090cc     02 00 00 FF 
090d0     00 E4 05 F1 | 	add	objptr, ##1024
090d4     F2 22 02 FB | 	rdlong	local03, objptr
090d8     78 00 00 FF 
090dc     80 E5 85 F1 | 	sub	objptr, ##61824
090e0     FF 22 16 F2 | 	cmp	local03, #255 wc
090e4     40 00 90 3D |  if_ae	jmp	#LR__0763
090e8     78 00 00 FF 
090ec     80 E5 05 F1 | 	add	objptr, ##61824
090f0     F2 24 02 FB | 	rdlong	local04, objptr
090f4     78 00 00 FF 
090f8     80 E5 85 F1 | 	sub	objptr, ##61824
090fc                 | LR__0761
090fc     00 25 56 F2 | 	cmps	local04, #256 wc
09100     24 00 90 3D |  if_ae	jmp	#LR__0762
09104     12 21 02 F6 | 	mov	local02, local04
09108     76 00 00 FF 
0910c     80 E5 05 F1 | 	add	objptr, ##60800
09110     F2 20 02 F1 | 	add	local02, objptr
09114     10 01 48 FC | 	wrbyte	#0, local02
09118     01 24 06 F1 | 	add	local04, #1
0911c     76 00 00 FF 
09120     80 E5 85 F1 | 	sub	objptr, ##60800
09124     D4 FF 9F FD | 	jmp	#LR__0761
09128                 | LR__0762
09128                 | LR__0763
09128     76 00 00 FF 
0912c     80 E5 05 F1 | 	add	objptr, ##60800
09130     F2 12 02 F6 | 	mov	arg01, objptr
09134     76 00 00 FF 
09138     80 E5 85 F1 | 	sub	objptr, ##60800
0913c     00 FB BF FD | 	call	#_csave_block
09140     78 00 00 FF 
09144     80 E5 05 F1 | 	add	objptr, ##61824
09148     F2 00 68 FC | 	wrlong	#0, objptr
0914c     78 00 00 FF 
09150     80 E5 85 F1 | 	sub	objptr, ##61824
09154     2C 13 06 F6 | 	mov	arg01, #300
09158     FC CC B0 FD | 	call	#__system___waitms
0915c                 | LR__0764
0915c     A7 F0 03 F6 | 	mov	ptra, fp
09160     B2 00 A0 FD | 	call	#popregs_
09164                 | _csave_addtoblock_ret
09164     2D 00 64 FD | 	ret
09168                 | 
09168                 | ' 
09168                 | ' sub test_csave
09168                 | _test_csave
09168     04 4A 05 F6 | 	mov	COUNT_, #4
0916c     A8 00 A0 FD | 	call	#pushregs_
09170     C0 F0 07 F1 | 	add	ptra, #192
09174                 | ' 'dim fileheader,savestart, saveptr as ulong
09174                 | ' 
09174                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
09174     69 00 00 FF 
09178     58 E4 05 F1 | 	add	objptr, ##53848
0917c     F2 12 02 FB | 	rdlong	arg01, objptr
09180     69 00 00 FF 
09184     58 E4 85 F1 | 	sub	objptr, ##53848
09188     30 96 B0 FD | 	call	#_pslpeek
0918c     FF FF 7F FF 
09190     FF FB 0D F2 | 	cmp	result1, ##-1 wz
09194     0C 00 90 5D |  if_ne	jmp	#LR__0770
09198     1B 12 06 F6 | 	mov	arg01, #27
0919c     60 94 B0 FD | 	call	#_printerror
091a0     0C 03 90 FD | 	jmp	#LR__0782
091a4                 | LR__0770
091a4     04 F8 BF FD | 	call	#_pop
091a8     FF 1E 02 F6 | 	mov	local01, result3
091ac     90 4E 05 F1 | 	add	fp, #144
091b0     A7 FA 61 FC | 	wrlong	result1, fp
091b4     04 4E 05 F1 | 	add	fp, #4
091b8     A7 FC 61 FC | 	wrlong	result2, fp
091bc     04 4E 05 F1 | 	add	fp, #4
091c0     A7 1E 62 FC | 	wrlong	local01, fp
091c4                 | ' t1=pop()
091c4                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
091c4     98 4E 85 F1 | 	sub	fp, #152
091c8     1F 1E 0E F2 | 	cmp	local01, #31 wz
091cc     28 01 00 5F 
091d0     F2 1E 06 56 |  if_ne	mov	local01, ##@LR__4351
091d4     8C 4E 05 51 |  if_ne	add	fp, #140
091d8     A7 1E 62 5C |  if_ne	wrlong	local01, fp
091dc     8C 4E 85 51 |  if_ne	sub	fp, #140
091e0     90 4E 05 A1 |  if_e	add	fp, #144
091e4     A7 1E 02 AB |  if_e	rdlong	local01, fp
091e8     04 4E 85 A1 |  if_e	sub	fp, #4
091ec     A7 1E 62 AC |  if_e	wrlong	local01, fp
091f0     8C 4E 85 A1 |  if_e	sub	fp, #140
091f4                 | ' 
091f4                 | ' ' prepare 1 kHz header wave
091f4                 | ' 
091f4                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
091f4     A7 00 68 FC | 	wrlong	#0, fp
091f8     97 34 48 FB | 	callpa	#(@LR__0774-@LR__0771)>>2,fcache_load_ptr_
091fc                 | LR__0771
091fc     A7 1E 02 FB | 	rdlong	local01, fp
09200     0F 1F 52 F6 | 	abs	local01, local01 wc
09204     07 1E 06 F5 | 	and	local01, #7
09208     0F 1F 82 F6 | 	negc	local01, local01
0920c     04 1E 56 F2 | 	cmps	local01, #4 wc
09210     20 00 90 3D |  if_ae	jmp	#LR__0772
09214     A7 1E 02 FB | 	rdlong	local01, fp
09218     76 00 00 FF 
0921c     80 E4 05 F1 | 	add	objptr, ##60544
09220     F2 1E 02 F1 | 	add	local01, objptr
09224     0F FF 48 FC | 	wrbyte	#127, local01
09228     76 00 00 FF 
0922c     80 E4 85 F1 | 	sub	objptr, ##60544
09230     1C 00 90 FD | 	jmp	#LR__0773
09234                 | LR__0772
09234     A7 1E 02 FB | 	rdlong	local01, fp
09238     76 00 00 FF 
0923c     80 E4 05 F1 | 	add	objptr, ##60544
09240     F2 1E 02 F1 | 	add	local01, objptr
09244     0F 01 49 FC | 	wrbyte	#128, local01
09248     76 00 00 FF 
0924c     80 E4 85 F1 | 	sub	objptr, ##60544
09250                 | LR__0773
09250     A7 1E 02 FB | 	rdlong	local01, fp
09254     01 1E 06 F1 | 	add	local01, #1
09258     A7 1E 62 FC | 	wrlong	local01, fp
0925c     00 1F 56 F2 | 	cmps	local01, #256 wc
09260     98 FF 9F CD |  if_b	jmp	#LR__0771
09264                 | LR__0774
09264     76 00 00 FF 
09268     80 E4 05 F1 | 	add	objptr, ##60544
0926c     F2 14 02 F6 | 	mov	arg02, objptr
09270     07 12 06 F6 | 	mov	arg01, #7
09274     0F 00 00 FF 
09278     40 17 06 F6 | 	mov	arg03, ##8000
0927c     0E 18 C6 F9 | 	decod	arg04, #14
09280     00 1B 06 F6 | 	mov	arg05, #256
09284     00 1C 06 F6 | 	mov	arg06, #0
09288     6A 00 00 FF 
0928c     C0 E5 85 F1 | 	sub	objptr, ##54720
09290     38 C5 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
09294     0B 00 00 FF 
09298     C0 E4 85 F1 | 	sub	objptr, ##5824
0929c     05 00 00 FF 
092a0     B8 13 06 F6 | 	mov	arg01, ##3000
092a4     B0 CB B0 FD | 	call	#__system___waitms
092a8     78 00 00 FF 
092ac     80 E5 05 F1 | 	add	objptr, ##61824
092b0     F2 00 68 FC | 	wrlong	#0, objptr
092b4     78 00 00 FF 
092b8     80 E5 85 F1 | 	sub	objptr, ##61824
092bc     72 12 06 F6 | 	mov	arg01, #114
092c0     00 14 06 F6 | 	mov	arg02, #0
092c4     5C FD BF FD | 	call	#_csave_addtoblock
092c8     62 12 06 F6 | 	mov	arg01, #98
092cc     00 14 06 F6 | 	mov	arg02, #0
092d0     50 FD BF FD | 	call	#_csave_addtoblock
092d4     61 12 06 F6 | 	mov	arg01, #97
092d8     00 14 06 F6 | 	mov	arg02, #0
092dc     44 FD BF FD | 	call	#_csave_addtoblock
092e0     0D 12 06 F6 | 	mov	arg01, #13
092e4     00 14 06 F6 | 	mov	arg02, #0
092e8     38 FD BF FD | 	call	#_csave_addtoblock
092ec                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
092ec                 | ' waitms 3000 
092ec                 | ' 
092ec                 | ' blockptr=0
092ec                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
092ec                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
092ec     A7 02 68 FC | 	wrlong	#1, fp
092f0     8C 4E 05 F1 | 	add	fp, #140
092f4     A7 12 02 FB | 	rdlong	arg01, fp
092f8     8C 4E 85 F1 | 	sub	fp, #140
092fc     09 21 02 F6 | 	mov	local02, arg01
09300     97 06 48 FB | 	callpa	#(@LR__0776-@LR__0775)>>2,fcache_load_ptr_
09304                 | LR__0775
09304     10 FB C9 FA | 	rdbyte	result1, local02 wz
09308     01 20 06 51 |  if_ne	add	local02, #1
0930c     F4 FF 9F 5D |  if_ne	jmp	#LR__0775
09310                 | LR__0776
09310     09 21 82 F1 | 	sub	local02, arg01
09314     10 23 02 F6 | 	mov	local03, local02
09318     01 22 06 F1 | 	add	local03, #1
0931c                 | LR__0777
0931c     A7 1E 02 FB | 	rdlong	local01, fp
09320     11 1F 52 F2 | 	cmps	local01, local03 wc
09324     34 00 90 3D |  if_ae	jmp	#LR__0778
09328     8C 4E 05 F1 | 	add	fp, #140
0932c     A7 12 02 FB | 	rdlong	arg01, fp
09330     8C 4E 85 F1 | 	sub	fp, #140
09334     A7 14 02 FB | 	rdlong	arg02, fp
09338     01 16 06 F6 | 	mov	arg03, #1
0933c     4C E9 B0 FD | 	call	#__system__Mid_S
09340     FD 12 C2 FA | 	rdbyte	arg01, result1
09344     00 14 06 F6 | 	mov	arg02, #0
09348     D8 FC BF FD | 	call	#_csave_addtoblock
0934c     A7 1E 02 FB | 	rdlong	local01, fp
09350     01 1E 06 F1 | 	add	local01, #1
09354     A7 1E 62 FC | 	wrlong	local01, fp
09358     C0 FF 9F FD | 	jmp	#LR__0777
0935c                 | LR__0778
0935c     00 12 06 F6 | 	mov	arg01, #0
09360     00 14 06 F6 | 	mov	arg02, #0
09364     BC FC BF FD | 	call	#_csave_addtoblock
09368     72 12 06 F6 | 	mov	arg01, #114
0936c     00 14 06 F6 | 	mov	arg02, #0
09370     B0 FC BF FD | 	call	#_csave_addtoblock
09374     62 12 06 F6 | 	mov	arg01, #98
09378     00 14 06 F6 | 	mov	arg02, #0
0937c     A4 FC BF FD | 	call	#_csave_addtoblock
09380     73 12 06 F6 | 	mov	arg01, #115
09384     00 14 06 F6 | 	mov	arg02, #0
09388     98 FC BF FD | 	call	#_csave_addtoblock
0938c     0D 12 06 F6 | 	mov	arg01, #13
09390     00 14 06 F6 | 	mov	arg02, #0
09394     8C FC BF FD | 	call	#_csave_addtoblock
09398     69 00 00 FF 
0939c     58 E4 05 F1 | 	add	objptr, ##53848
093a0     F2 1E 02 FB | 	rdlong	local01, objptr
093a4     69 00 00 FF 
093a8     58 E4 85 F1 | 	sub	objptr, ##53848
093ac     9C 4E 05 F1 | 	add	fp, #156
093b0     A7 1E 62 FC | 	wrlong	local01, fp
093b4     9C 4E 85 F1 | 	sub	fp, #156
093b8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
093b8                 | ' 
093b8                 | ' saveptr=programstart
093b8                 | ' do
093b8                 | LR__0779
093b8     A0 4E 05 F1 | 	add	fp, #160
093bc     A7 12 02 F6 | 	mov	arg01, fp
093c0     04 4E 85 F1 | 	sub	fp, #4
093c4     A7 14 02 FB | 	rdlong	arg02, fp
093c8     9C 4E 85 F1 | 	sub	fp, #156
093cc     18 16 06 F6 | 	mov	arg03, #24
093d0     0B 00 00 FF 
093d4     C0 E4 05 F1 | 	add	objptr, ##5824
093d8     9C BC B0 FD | 	call	#_psram_spin2_read1
093dc     0C 4E 05 F1 | 	add	fp, #12
093e0     A7 12 02 F6 | 	mov	arg01, fp
093e4     9C 4E 05 F1 | 	add	fp, #156
093e8     A7 14 02 FB | 	rdlong	arg02, fp
093ec     04 4E 05 F1 | 	add	fp, #4
093f0     A7 16 02 FB | 	rdlong	arg03, fp
093f4     AC 4E 85 F1 | 	sub	fp, #172
093f8     7C BC B0 FD | 	call	#_psram_spin2_read1
093fc     0B 00 00 FF 
09400     C0 E4 85 F1 | 	sub	objptr, ##5824
09404     AC 4E 05 F1 | 	add	fp, #172
09408     A7 12 02 FB | 	rdlong	arg01, fp
0940c     AC 4E 85 F1 | 	sub	fp, #172
09410     00 14 06 F6 | 	mov	arg02, #0
09414     0C FC BF FD | 	call	#_csave_addtoblock
09418                 | '   psram.read1(varptr(header(0)),saveptr,24)
09418                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
09418                 | '   csave_addtoblock(header(3),0) ' that's always <255
09418                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
09418     A7 00 68 FC | 	wrlong	#0, fp
0941c     AC 4E 05 F1 | 	add	fp, #172
09420     A7 24 02 FB | 	rdlong	local04, fp
09424     AC 4E 85 F1 | 	sub	fp, #172
09428                 | LR__0780
09428     A7 1E 02 FB | 	rdlong	local01, fp
0942c     12 1F 52 F2 | 	cmps	local01, local04 wc
09430     2C 00 90 3D |  if_ae	jmp	#LR__0781
09434     A7 22 02 FB | 	rdlong	local03, fp
09438     0C 4E 05 F1 | 	add	fp, #12
0943c     A7 22 02 F1 | 	add	local03, fp
09440     11 13 C2 FA | 	rdbyte	arg01, local03
09444     00 14 06 F6 | 	mov	arg02, #0
09448     0C 4E 85 F1 | 	sub	fp, #12
0944c     D4 FB BF FD | 	call	#_csave_addtoblock
09450     A7 22 02 FB | 	rdlong	local03, fp
09454     01 22 06 F1 | 	add	local03, #1
09458     A7 22 62 FC | 	wrlong	local03, fp
0945c     C8 FF 9F FD | 	jmp	#LR__0780
09460                 | LR__0781
09460     B4 4E 05 F1 | 	add	fp, #180
09464     A7 1E 02 FB | 	rdlong	local01, fp
09468     18 4E 85 F1 | 	sub	fp, #24
0946c     A7 1E 62 FC | 	wrlong	local01, fp
09470     18 4E 05 F1 | 	add	fp, #24
09474     A7 1E 02 FB | 	rdlong	local01, fp
09478     B4 4E 85 F1 | 	sub	fp, #180
0947c     FF FF 3F FF 
09480     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09484     30 FF 9F 5D |  if_ne	jmp	#LR__0779
09488     00 12 06 F6 | 	mov	arg01, #0
0948c     01 14 06 F6 | 	mov	arg02, #1
09490     90 FB BF FD | 	call	#_csave_addtoblock
09494     55 00 00 FF 
09498     E4 E5 05 F1 | 	add	objptr, ##44004
0949c     F2 12 02 FB | 	rdlong	arg01, objptr
094a0     55 00 00 FF 
094a4     E4 E5 85 F1 | 	sub	objptr, ##44004
094a8     F4 12 06 F1 | 	add	arg01, #244
094ac     09 01 58 FC | 	wrword	#0, arg01
094b0                 | LR__0782
094b0     A7 F0 03 F6 | 	mov	ptra, fp
094b4     B2 00 A0 FD | 	call	#popregs_
094b8                 | _test_csave_ret
094b8     2D 00 64 FD | 	ret
094bc                 | 
094bc                 | ' 
094bc                 | ' ' ----------------- Save the program
094bc                 | ' 
094bc                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
094bc                 | _do_save
094bc     02 4A 05 F6 | 	mov	COUNT_, #2
094c0     A8 00 A0 FD | 	call	#pushregs_
094c4     01 00 00 FF 
094c8     BC F0 07 F1 | 	add	ptra, ##700
094cc     01 00 00 FF 
094d0     10 4E 05 F1 | 	add	fp, ##528
094d4     B1 B0 86 FF 
094d8     A7 E4 68 FC | 	wrlong	##224486002, fp
094dc     01 00 00 FF 
094e0     10 4E 85 F1 | 	sub	fp, ##528
094e4     C4 F4 BF FD | 	call	#_pop
094e8     FF 16 02 F6 | 	mov	arg03, result3
094ec     A7 FA 61 FC | 	wrlong	result1, fp
094f0     04 4E 05 F1 | 	add	fp, #4
094f4     A7 FC 61 FC | 	wrlong	result2, fp
094f8     04 4E 05 F1 | 	add	fp, #4
094fc     A7 16 62 FC | 	wrlong	arg03, fp
09500     08 4E 85 F1 | 	sub	fp, #8
09504                 | ' 
09504                 | ' fileheader=$0D616272' rba+ver'
09504                 | ' 
09504                 | ' t1=pop() 
09504                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
09504     69 00 00 FF 
09508     58 E4 05 F1 | 	add	objptr, ##53848
0950c     F2 12 02 FB | 	rdlong	arg01, objptr
09510     69 00 00 FF 
09514     58 E4 85 F1 | 	sub	objptr, ##53848
09518     A0 92 B0 FD | 	call	#_pslpeek
0951c     FF FF 7F FF 
09520     FF FB 0D F2 | 	cmp	result1, ##-1 wz
09524     0C 00 90 5D |  if_ne	jmp	#LR__0790
09528     1B 12 06 F6 | 	mov	arg01, #27
0952c     D0 90 B0 FD | 	call	#_printerror
09530     68 02 90 FD | 	jmp	#LR__0796
09534                 | LR__0790
09534                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string
09534     08 4E 05 F1 | 	add	fp, #8
09538     A7 16 02 FB | 	rdlong	arg03, fp
0953c     08 4E 85 F1 | 	sub	fp, #8
09540     2B 16 0E F2 | 	cmp	arg03, #43 wz
09544     18 00 90 5D |  if_ne	jmp	#LR__0791
09548     A7 12 02 FB | 	rdlong	arg01, fp
0954c     74 1A B0 FD | 	call	#_do_convertstring
09550     A7 FA 61 FC | 	wrlong	result1, fp
09554     08 4E 05 F1 | 	add	fp, #8
09558     A7 3E 68 FC | 	wrlong	#31, fp
0955c     08 4E 85 F1 | 	sub	fp, #8
09560                 | LR__0791
09560                 | ' if t1.result_type=result_string then
09560     08 4E 05 F1 | 	add	fp, #8
09564     A7 1E 02 FB | 	rdlong	local01, fp
09568     08 4E 85 F1 | 	sub	fp, #8
0956c     1F 1E 0E F2 | 	cmp	local01, #31 wz
09570     28 02 90 5D |  if_ne	jmp	#LR__0795
09574                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
09574     A7 12 02 FB | 	rdlong	arg01, fp
09578     28 01 00 FF 
0957c     FD 14 06 F6 | 	mov	arg02, ##@LR__4352
09580     08 C6 B0 FD | 	call	#__system___string_cmp
09584     00 FA 0D F2 | 	cmp	result1, #0 wz
09588     28 01 00 AF 
0958c     FE 1E 06 A6 |  if_e	mov	local01, ##@LR__4353
09590     A7 1E 62 AC |  if_e	wrlong	local01, fp
09594                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
09594     09 12 06 F6 | 	mov	arg01, #9
09598     AC 11 B1 FD | 	call	#__system__close
0959c     09 1E 06 F6 | 	mov	local01, #9
095a0     71 00 00 FF 
095a4     68 E4 05 F1 | 	add	objptr, ##57960
095a8     F2 12 02 FB | 	rdlong	arg01, objptr
095ac     71 00 00 FF 
095b0     68 E4 85 F1 | 	sub	objptr, ##57960
095b4     28 01 00 FF 
095b8     09 15 06 F6 | 	mov	arg02, ##@LR__4354
095bc     00 C6 B0 FD | 	call	#__system___string_concat
095c0     FD 12 02 F6 | 	mov	arg01, result1
095c4     A7 14 02 FB | 	rdlong	arg02, fp
095c8     F4 C5 B0 FD | 	call	#__system___string_concat
095cc     FD 14 02 F6 | 	mov	arg02, result1
095d0     0F 13 02 F6 | 	mov	arg01, local01
095d4     0D 16 06 F6 | 	mov	arg03, #13
095d8     8C D1 B0 FD | 	call	#__system___basic_open_string
095dc     01 00 00 FF 
095e0     0C 4E 05 F1 | 	add	fp, ##524
095e4     A7 0A 68 FC | 	wrlong	#5, fp
095e8     69 00 00 FF 
095ec     58 E4 05 F1 | 	add	objptr, ##53848
095f0     F2 1E 02 FB | 	rdlong	local01, objptr
095f4     69 00 00 FF 
095f8     58 E4 85 F1 | 	sub	objptr, ##53848
095fc     0C 4E 05 F1 | 	add	fp, #12
09600     A7 1E 62 FC | 	wrlong	local01, fp
09604     01 00 00 FF 
09608     18 4E 85 F1 | 	sub	fp, ##536
0960c                 | ' '  put #9,1,fileheader,1
0960c                 | '   i=5
0960c                 | '   saveptr=programstart
0960c                 | '   do
0960c                 | LR__0792
0960c     01 00 00 FF 
09610     1C 4E 05 F1 | 	add	fp, ##540
09614     A7 12 02 F6 | 	mov	arg01, fp
09618     04 4E 85 F1 | 	sub	fp, #4
0961c     A7 14 02 FB | 	rdlong	arg02, fp
09620     01 00 00 FF 
09624     18 4E 85 F1 | 	sub	fp, ##536
09628     18 16 06 F6 | 	mov	arg03, #24
0962c     0B 00 00 FF 
09630     C0 E4 05 F1 | 	add	objptr, ##5824
09634     40 BA B0 FD | 	call	#_psram_spin2_read1
09638     01 00 00 FF 
0963c     34 4E 05 F1 | 	add	fp, ##564
09640     A7 12 02 F6 | 	mov	arg01, fp
09644     10 4E 85 F1 | 	sub	fp, #16
09648     A7 14 02 FB | 	rdlong	arg02, fp
0964c     04 4E 05 F1 | 	add	fp, #4
09650     A7 16 02 FB | 	rdlong	arg03, fp
09654     01 00 00 FF 
09658     28 4E 85 F1 | 	sub	fp, ##552
0965c     18 BA B0 FD | 	call	#_psram_spin2_read1
09660     0B 00 00 FF 
09664     C0 E4 85 F1 | 	sub	objptr, ##5824
09668     28 01 00 FF 
0966c     0B 1F 06 F6 | 	mov	local01, ##@LR__4355
09670     01 00 00 FF 
09674     B4 4E 05 F1 | 	add	fp, ##692
09678     A7 1E 62 FC | 	wrlong	local01, fp
0967c                 | '     psram.read1(varptr(header(0)),saveptr,24)
0967c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0967c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0967c     A8 4E 85 F1 | 	sub	fp, #168
09680     A7 02 68 FC | 	wrlong	#1, fp
09684     1C 4E 05 F1 | 	add	fp, #28
09688     A7 20 02 FB | 	rdlong	local02, fp
0968c     01 00 00 FF 
09690     28 4E 85 F1 | 	sub	fp, ##552
09694     01 20 06 F1 | 	add	local02, #1
09698                 | LR__0793
09698     01 00 00 FF 
0969c     0C 4E 05 F1 | 	add	fp, ##524
096a0     A7 1E 02 FB | 	rdlong	local01, fp
096a4     01 00 00 FF 
096a8     0C 4E 85 F1 | 	sub	fp, ##524
096ac     10 1F 52 F2 | 	cmps	local01, local02 wc
096b0     64 00 90 3D |  if_ae	jmp	#LR__0794
096b4     01 00 00 FF 
096b8     B4 4E 05 F1 | 	add	fp, ##692
096bc     A7 1E 02 FB | 	rdlong	local01, fp
096c0     A8 4E 85 F1 | 	sub	fp, #168
096c4     A7 16 02 FB | 	rdlong	arg03, fp
096c8     01 16 86 F1 | 	sub	arg03, #1
096cc     28 4E 05 F1 | 	add	fp, #40
096d0     A7 16 02 F1 | 	add	arg03, fp
096d4     0B 13 C2 FA | 	rdbyte	arg01, arg03
096d8     01 00 00 FF 
096dc     34 4E 85 F1 | 	sub	fp, ##564
096e0     54 E6 B0 FD | 	call	#__system__Chr_S
096e4     FD 14 02 F6 | 	mov	arg02, result1
096e8     0F 13 02 F6 | 	mov	arg01, local01
096ec     D0 C4 B0 FD | 	call	#__system___string_concat
096f0     01 00 00 FF 
096f4     B4 4E 05 F1 | 	add	fp, ##692
096f8     A7 FA 61 FC | 	wrlong	result1, fp
096fc     A8 4E 85 F1 | 	sub	fp, #168
09700     A7 1E 02 FB | 	rdlong	local01, fp
09704     01 1E 06 F1 | 	add	local01, #1
09708     A7 1E 62 FC | 	wrlong	local01, fp
0970c     01 00 00 FF 
09710     0C 4E 85 F1 | 	sub	fp, ##524
09714     80 FF 9F FD | 	jmp	#LR__0793
09718                 | LR__0794
09718                 | '  '   put #9,i,header(3),1 : i+=4
09718                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
09718                 | '      print #9, saveline$
09718     09 12 06 F6 | 	mov	arg01, #9
0971c     F8 19 B1 FD | 	call	#__system___getiolock_0362
09720     FD 12 02 F6 | 	mov	arg01, result1
09724     3C C4 B0 FD | 	call	#__system___lockmem
09728     01 00 00 FF 
0972c     B4 4E 05 F1 | 	add	fp, ##692
09730     A7 14 02 FB | 	rdlong	arg02, fp
09734     01 00 00 FF 
09738     B4 4E 85 F1 | 	sub	fp, ##692
0973c     09 12 06 F6 | 	mov	arg01, #9
09740     00 16 06 F6 | 	mov	arg03, #0
09744     10 D1 B0 FD | 	call	#__system___basic_print_string
09748     09 12 06 F6 | 	mov	arg01, #9
0974c     0A 14 06 F6 | 	mov	arg02, #10
09750     00 16 06 F6 | 	mov	arg03, #0
09754     A8 D0 B0 FD | 	call	#__system___basic_print_char
09758     09 12 06 F6 | 	mov	arg01, #9
0975c     B8 19 B1 FD | 	call	#__system___getiolock_0362
09760     FD 00 68 FC | 	wrlong	#0, result1
09764     01 00 00 FF 
09768     30 4E 05 F1 | 	add	fp, ##560
0976c     A7 1E 02 FB | 	rdlong	local01, fp
09770     18 4E 85 F1 | 	sub	fp, #24
09774     A7 1E 62 FC | 	wrlong	local01, fp
09778     18 4E 05 F1 | 	add	fp, #24
0977c     A7 1E 02 FB | 	rdlong	local01, fp
09780     01 00 00 FF 
09784     30 4E 85 F1 | 	sub	fp, ##560
09788     FF FF 3F FF 
0978c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09790     78 FE 9F 5D |  if_ne	jmp	#LR__0792
09794                 | '   close #9  
09794     09 12 06 F6 | 	mov	arg01, #9
09798     AC 0F B1 FD | 	call	#__system__close
0979c                 | LR__0795
0979c                 | LR__0796
0979c     A7 F0 03 F6 | 	mov	ptra, fp
097a0     B2 00 A0 FD | 	call	#popregs_
097a4                 | _do_save_ret
097a4     2D 00 64 FD | 	ret
097a8                 | 
097a8                 | ' 
097a8                 | ' '----------------- Load the program
097a8                 | ' 'lo todo: errors while loading
097a8                 | ' sub do_load
097a8                 | _do_load
097a8     01 4A 05 F6 | 	mov	COUNT_, #1
097ac     A8 00 A0 FD | 	call	#pushregs_
097b0     A4 F0 07 F1 | 	add	ptra, #164
097b4     A0 4E 05 F1 | 	add	fp, #160
097b8     A7 12 02 F6 | 	mov	arg01, fp
097bc     80 4E 85 F1 | 	sub	fp, #128
097c0     A7 14 02 F6 | 	mov	arg02, fp
097c4     20 4E 85 F1 | 	sub	fp, #32
097c8     09 15 62 FC | 	wrlong	arg02, arg01
097cc     DC F1 BF FD | 	call	#_pop
097d0     FF 1A 02 F6 | 	mov	arg05, result3
097d4     A7 FA 61 FC | 	wrlong	result1, fp
097d8     04 4E 05 F1 | 	add	fp, #4
097dc     A7 FC 61 FC | 	wrlong	result2, fp
097e0     04 4E 05 F1 | 	add	fp, #4
097e4     A7 1A 62 FC | 	wrlong	arg05, fp
097e8                 | ' 
097e8                 | ' lpoke varptr(line2$),varptr(line2)
097e8                 | ' t1=pop() 
097e8                 | ' 'print "popped "; t1.result.uresult, t1.result_type
097e8                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
097e8     08 4E 85 F1 | 	sub	fp, #8
097ec     2B 1A 0E F2 | 	cmp	arg05, #43 wz
097f0     18 00 90 5D |  if_ne	jmp	#LR__0800
097f4     A7 12 02 FB | 	rdlong	arg01, fp
097f8     C8 17 B0 FD | 	call	#_do_convertstring
097fc     A7 FA 61 FC | 	wrlong	result1, fp
09800     08 4E 05 F1 | 	add	fp, #8
09804     A7 3E 68 FC | 	wrlong	#31, fp
09808     08 4E 85 F1 | 	sub	fp, #8
0980c                 | LR__0800
0980c                 | ' if t1.result_type=result_string then
0980c     08 4E 05 F1 | 	add	fp, #8
09810     A7 1E 02 FB | 	rdlong	local01, fp
09814     08 4E 85 F1 | 	sub	fp, #8
09818     1F 1E 0E F2 | 	cmp	local01, #31 wz
0981c     40 03 90 5D |  if_ne	jmp	#LR__0807
09820     3C 12 B0 FD | 	call	#_do_new
09824                 | '   do_new
09824                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
09824     A7 12 02 FB | 	rdlong	arg01, fp
09828     28 01 00 FF 
0982c     0C 15 06 F6 | 	mov	arg02, ##@LR__4356
09830     58 C3 B0 FD | 	call	#__system___string_cmp
09834     00 FA 0D F2 | 	cmp	result1, #0 wz
09838     28 01 00 AF 
0983c     0D 1F 06 A6 |  if_e	mov	local01, ##@LR__4357
09840     A7 1E 62 AC |  if_e	wrlong	local01, fp
09844                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
09844     09 12 06 F6 | 	mov	arg01, #9
09848     FC 0E B1 FD | 	call	#__system__close
0984c     09 1E 06 F6 | 	mov	local01, #9
09850     71 00 00 FF 
09854     68 E4 05 F1 | 	add	objptr, ##57960
09858     F2 12 02 FB | 	rdlong	arg01, objptr
0985c     71 00 00 FF 
09860     68 E4 85 F1 | 	sub	objptr, ##57960
09864     28 01 00 FF 
09868     18 15 06 F6 | 	mov	arg02, ##@LR__4358
0986c     50 C3 B0 FD | 	call	#__system___string_concat
09870     FD 12 02 F6 | 	mov	arg01, result1
09874     A7 14 02 FB | 	rdlong	arg02, fp
09878     44 C3 B0 FD | 	call	#__system___string_concat
0987c     FD 14 02 F6 | 	mov	arg02, result1
09880     0F 13 02 F6 | 	mov	arg01, local01
09884     00 16 06 F6 | 	mov	arg03, #0
09888     DC CE B0 FD | 	call	#__system___basic_open_string
0988c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
09890     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
09894     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
09898     10 4E 05 F1 | 	add	fp, #16
0989c     A7 FA 61 FC | 	wrlong	result1, fp
098a0                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
098a0     10 4E 85 F1 | 	sub	fp, #16
098a4     9C 00 90 AD |  if_e	jmp	#LR__0801
098a8     00 12 06 F6 | 	mov	arg01, #0
098ac     68 18 B1 FD | 	call	#__system___getiolock_0362
098b0     FD 12 02 F6 | 	mov	arg01, result1
098b4     AC C2 B0 FD | 	call	#__system___lockmem
098b8     28 01 00 FF 
098bc     1A 15 06 F6 | 	mov	arg02, ##@LR__4359
098c0     00 12 06 F6 | 	mov	arg01, #0
098c4     00 16 06 F6 | 	mov	arg03, #0
098c8     8C CF B0 FD | 	call	#__system___basic_print_string
098cc     10 4E 05 F1 | 	add	fp, #16
098d0     A7 14 02 FB | 	rdlong	arg02, fp
098d4     10 4E 85 F1 | 	sub	fp, #16
098d8     00 12 06 F6 | 	mov	arg01, #0
098dc     00 16 06 F6 | 	mov	arg03, #0
098e0     0A 18 06 F6 | 	mov	arg04, #10
098e4     B4 CF B0 FD | 	call	#__system___basic_print_integer
098e8     28 01 00 FF 
098ec     28 15 06 F6 | 	mov	arg02, ##@LR__4360
098f0     00 12 06 F6 | 	mov	arg01, #0
098f4     00 16 06 F6 | 	mov	arg03, #0
098f8     5C CF B0 FD | 	call	#__system___basic_print_string
098fc     10 4E 05 F1 | 	add	fp, #16
09900     A7 12 02 FB | 	rdlong	arg01, fp
09904     10 4E 85 F1 | 	sub	fp, #16
09908     58 E8 B0 FD | 	call	#__system___strerror
0990c     FD 14 02 F6 | 	mov	arg02, result1
09910     00 12 06 F6 | 	mov	arg01, #0
09914     00 16 06 F6 | 	mov	arg03, #0
09918     3C CF B0 FD | 	call	#__system___basic_print_string
0991c     00 12 06 F6 | 	mov	arg01, #0
09920     0A 14 06 F6 | 	mov	arg02, #10
09924     00 16 06 F6 | 	mov	arg03, #0
09928     D4 CE B0 FD | 	call	#__system___basic_print_char
0992c     00 12 06 F6 | 	mov	arg01, #0
09930     E4 17 B1 FD | 	call	#__system___getiolock_0362
09934     FD 00 68 FC | 	wrlong	#0, result1
09938     09 12 06 F6 | 	mov	arg01, #9
0993c     08 0E B1 FD | 	call	#__system__close
09940     24 02 90 FD | 	jmp	#LR__0809
09944                 | LR__0801
09944     0C 4E 05 F1 | 	add	fp, #12
09948     A7 0A 68 FC | 	wrlong	#5, fp
0994c                 | '   i=5
0994c                 | '   get #9,1,header,1
0994c     0C 4E 05 F1 | 	add	fp, #12
09950     A7 16 02 F6 | 	mov	arg03, fp
09954     18 4E 85 F1 | 	sub	fp, #24
09958     09 12 06 F6 | 	mov	arg01, #9
0995c     01 14 06 F6 | 	mov	arg02, #1
09960     01 18 06 F6 | 	mov	arg04, #1
09964     04 1A 06 F6 | 	mov	arg05, #4
09968     FC CF B0 FD | 	call	#__system___basic_get
0996c                 | '   
0996c                 | '   if header<>$0D616272 then 
0996c     18 4E 05 F1 | 	add	fp, #24
09970     A7 1E 02 FB | 	rdlong	local01, fp
09974     18 4E 85 F1 | 	sub	fp, #24
09978     B1 B0 06 FF 
0997c     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
09980     F0 00 90 AD |  if_e	jmp	#LR__0804
09984                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
09984     09 12 06 F6 | 	mov	arg01, #9
09988     BC 0D B1 FD | 	call	#__system__close
0998c     09 1E 06 F6 | 	mov	local01, #9
09990     71 00 00 FF 
09994     68 E4 05 F1 | 	add	objptr, ##57960
09998     F2 12 02 FB | 	rdlong	arg01, objptr
0999c     71 00 00 FF 
099a0     68 E4 85 F1 | 	sub	objptr, ##57960
099a4     28 01 00 FF 
099a8     2B 15 06 F6 | 	mov	arg02, ##@LR__4361
099ac     10 C2 B0 FD | 	call	#__system___string_concat
099b0     FD 12 02 F6 | 	mov	arg01, result1
099b4     A7 14 02 FB | 	rdlong	arg02, fp
099b8     04 C2 B0 FD | 	call	#__system___string_concat
099bc     FD 14 02 F6 | 	mov	arg02, result1
099c0     0F 13 02 F6 | 	mov	arg01, local01
099c4     00 16 06 F6 | 	mov	arg03, #0
099c8     9C CD B0 FD | 	call	#__system___basic_open_string
099cc                 | '     do
099cc                 | LR__0802
099cc     09 12 06 F6 | 	mov	arg01, #9
099d0     9C C3 B0 FD | 	call	#__system___basic_read_line
099d4     55 00 00 FF 
099d8     F0 E5 05 F1 | 	add	objptr, ##44016
099dc     F2 FA 61 FC | 	wrlong	result1, objptr
099e0                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
099e0     55 00 00 FF 
099e4     F0 E5 85 F1 | 	sub	objptr, ##44016
099e8     FD 12 02 F6 | 	mov	arg01, result1
099ec     01 14 06 F6 | 	mov	arg02, #1
099f0     80 E1 B0 FD | 	call	#__system__Left_S
099f4     FD 12 02 F6 | 	mov	arg01, result1
099f8     28 01 00 FF 
099fc     2D 15 06 F6 | 	mov	arg02, ##@LR__4362
09a00     88 C1 B0 FD | 	call	#__system___string_cmp
09a04     00 FA 55 F2 | 	cmps	result1, #0 wc
09a08     34 00 90 CD |  if_b	jmp	#LR__0803
09a0c     55 00 00 FF 
09a10     F0 E5 05 F1 | 	add	objptr, ##44016
09a14     F2 12 02 FB | 	rdlong	arg01, objptr
09a18     55 00 00 FF 
09a1c     F0 E5 85 F1 | 	sub	objptr, ##44016
09a20     01 14 06 F6 | 	mov	arg02, #1
09a24     4C E1 B0 FD | 	call	#__system__Left_S
09a28     FD 12 02 F6 | 	mov	arg01, result1
09a2c     28 01 00 FF 
09a30     2F 15 06 F6 | 	mov	arg02, ##@LR__4363
09a34     54 C1 B0 FD | 	call	#__system___string_cmp
09a38     01 FA 55 F2 | 	cmps	result1, #1 wc
09a3c     DC 6F BF CD |  if_b	call	#_interpret
09a40                 | LR__0803
09a40     55 00 00 FF 
09a44     F0 E5 05 F1 | 	add	objptr, ##44016
09a48     F2 12 02 FB | 	rdlong	arg01, objptr
09a4c     55 00 00 FF 
09a50     F0 E5 85 F1 | 	sub	objptr, ##44016
09a54     28 01 00 FF 
09a58     31 15 06 F6 | 	mov	arg02, ##@LR__4364
09a5c     2C C1 B0 FD | 	call	#__system___string_cmp
09a60     00 FA 0D F2 | 	cmp	result1, #0 wz
09a64     64 FF 9F 5D |  if_ne	jmp	#LR__0802
09a68                 | '     close #9
09a68     09 12 06 F6 | 	mov	arg01, #9
09a6c     D8 0C B1 FD | 	call	#__system__close
09a70     F4 00 90 FD | 	jmp	#LR__0808
09a74                 | LR__0804
09a74                 | '   'printerror(26) : close #9 : return
09a74                 | '     do
09a74                 | LR__0805
09a74                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
09a74     0C 4E 05 F1 | 	add	fp, #12
09a78     A7 14 02 FB | 	rdlong	arg02, fp
09a7c     10 4E 05 F1 | 	add	fp, #16
09a80     A7 16 02 F6 | 	mov	arg03, fp
09a84     1C 4E 85 F1 | 	sub	fp, #28
09a88     09 12 06 F6 | 	mov	arg01, #9
09a8c     01 18 06 F6 | 	mov	arg04, #1
09a90     04 1A 06 F6 | 	mov	arg05, #4
09a94     D0 CE B0 FD | 	call	#__system___basic_get
09a98     14 4E 05 F1 | 	add	fp, #20
09a9c     A7 FA 61 FC | 	wrlong	result1, fp
09aa0     08 4E 85 F1 | 	sub	fp, #8
09aa4     A7 1E 02 FB | 	rdlong	local01, fp
09aa8     04 1E 06 F1 | 	add	local01, #4
09aac     A7 1E 62 FC | 	wrlong	local01, fp
09ab0     10 4E 05 F1 | 	add	fp, #16
09ab4     A7 1E 02 FB | 	rdlong	local01, fp
09ab8     04 4E 05 F1 | 	add	fp, #4
09abc     A7 1E 02 F1 | 	add	local01, fp
09ac0     0F 01 48 FC | 	wrbyte	#0, local01
09ac4                 | '       if amount=1 then  
09ac4     0C 4E 85 F1 | 	sub	fp, #12
09ac8     A7 1E 02 FB | 	rdlong	local01, fp
09acc     14 4E 85 F1 | 	sub	fp, #20
09ad0     01 1E 0E F2 | 	cmp	local01, #1 wz
09ad4     68 00 90 5D |  if_ne	jmp	#LR__0806
09ad8                 | '         get #9,i,line2(0),linelength : i+=linelength
09ad8     0C 4E 05 F1 | 	add	fp, #12
09adc     A7 14 02 FB | 	rdlong	arg02, fp
09ae0     14 4E 05 F1 | 	add	fp, #20
09ae4     A7 16 02 F6 | 	mov	arg03, fp
09ae8     04 4E 85 F1 | 	sub	fp, #4
09aec     A7 18 02 FB | 	rdlong	arg04, fp
09af0     1C 4E 85 F1 | 	sub	fp, #28
09af4     09 12 06 F6 | 	mov	arg01, #9
09af8     01 1A 06 F6 | 	mov	arg05, #1
09afc     68 CE B0 FD | 	call	#__system___basic_get
09b00     0C 4E 05 F1 | 	add	fp, #12
09b04     A7 1E 02 FB | 	rdlong	local01, fp
09b08     10 4E 05 F1 | 	add	fp, #16
09b0c     A7 1A 02 FB | 	rdlong	arg05, fp
09b10     0D 1F 02 F1 | 	add	local01, arg05
09b14     10 4E 85 F1 | 	sub	fp, #16
09b18     A7 1E 62 FC | 	wrlong	local01, fp
09b1c     94 4E 05 F1 | 	add	fp, #148
09b20     A7 1E 02 FB | 	rdlong	local01, fp
09b24     A0 4E 85 F1 | 	sub	fp, #160
09b28     55 00 00 FF 
09b2c     F0 E5 05 F1 | 	add	objptr, ##44016
09b30     F2 1E 62 FC | 	wrlong	local01, objptr
09b34     55 00 00 FF 
09b38     F0 E5 85 F1 | 	sub	objptr, ##44016
09b3c     DC 6E BF FD | 	call	#_interpret
09b40                 | LR__0806
09b40     14 4E 05 F1 | 	add	fp, #20
09b44     A7 1E 02 FB | 	rdlong	local01, fp
09b48     14 4E 85 F1 | 	sub	fp, #20
09b4c     01 1E 56 F2 | 	cmps	local01, #1 wc
09b50     20 FF 9F 3D |  if_ae	jmp	#LR__0805
09b54                 | '     close #9 
09b54     09 12 06 F6 | 	mov	arg01, #9
09b58     EC 0B B1 FD | 	call	#__system__close
09b5c     08 00 90 FD | 	jmp	#LR__0808
09b60                 | LR__0807
09b60     1E 12 06 F6 | 	mov	arg01, #30
09b64     98 8A B0 FD | 	call	#_printerror
09b68                 | LR__0808
09b68                 | LR__0809
09b68     A7 F0 03 F6 | 	mov	ptra, fp
09b6c     B2 00 A0 FD | 	call	#popregs_
09b70                 | _do_load_ret
09b70     2D 00 64 FD | 	ret
09b74                 | 
09b74                 | ' 
09b74                 | ' '----------------- Run the program 
09b74                 | ' 
09b74                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
09b74                 | ' 
09b74                 | ' sub do_run
09b74                 | _do_run
09b74     01 4A 05 F6 | 	mov	COUNT_, #1
09b78     A8 00 A0 FD | 	call	#pushregs_
09b7c     69 00 00 FF 
09b80     58 E4 05 F1 | 	add	objptr, ##53848
09b84     F2 1C 02 FB | 	rdlong	arg06, objptr
09b88     0F 00 00 FF 
09b8c     2C E5 05 F1 | 	add	objptr, ##7980
09b90     F2 1C 62 FC | 	wrlong	arg06, objptr
09b94     04 E4 05 F1 | 	add	objptr, #4
09b98     F2 00 68 FC | 	wrlong	#0, objptr
09b9c     04 E4 05 F1 | 	add	objptr, #4
09ba0     FF FF FF FF 
09ba4     F2 FE 6B FC | 	wrlong	##-1, objptr
09ba8                 | ' if inrun>0 then 
09ba8     04 E4 05 F1 | 	add	objptr, #4
09bac     F2 1C 02 FB | 	rdlong	arg06, objptr
09bb0     78 00 00 FF 
09bb4     90 E5 85 F1 | 	sub	objptr, ##61840
09bb8     01 1C 16 F2 | 	cmp	arg06, #1 wc
09bbc     30 00 90 CD |  if_b	jmp	#LR__0810
09bc0     78 00 00 FF 
09bc4     94 E5 05 F1 | 	add	objptr, ##61844
09bc8     F2 12 02 F6 | 	mov	arg01, objptr
09bcc     10 E4 85 F1 | 	sub	objptr, #16
09bd0     F2 14 02 FB | 	rdlong	arg02, objptr
09bd4     18 16 06 F6 | 	mov	arg03, #24
09bd8     6D 00 00 FF 
09bdc     C4 E4 85 F1 | 	sub	objptr, ##56004
09be0     94 B4 B0 FD | 	call	#_psram_spin2_read1
09be4     0B 00 00 FF 
09be8     C0 E4 85 F1 | 	sub	objptr, ##5824
09bec                 | '   psram.read1(varptr(runheader),runptr,24)  
09bec                 | '   return
09bec     A4 02 90 FD | 	jmp	#LR__0816
09bf0                 | LR__0810
09bf0     78 00 00 FF 
09bf4     90 E5 05 F1 | 	add	objptr, ##61840
09bf8     F2 02 68 FC | 	wrlong	#1, objptr
09bfc     04 E4 05 F1 | 	add	objptr, #4
09c00     F2 12 02 F6 | 	mov	arg01, objptr
09c04     10 E4 85 F1 | 	sub	objptr, #16
09c08     F2 14 02 FB | 	rdlong	arg02, objptr
09c0c     18 16 06 F6 | 	mov	arg03, #24
09c10     6D 00 00 FF 
09c14     C4 E4 85 F1 | 	sub	objptr, ##56004
09c18     5C B4 B0 FD | 	call	#_psram_spin2_read1
09c1c                 | ' inrun=1
09c1c                 | ' psram.read1(varptr(runheader),runptr,24) 
09c1c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
09c1c     6D 00 00 FF 
09c20     D4 E4 05 F1 | 	add	objptr, ##56020
09c24     F2 1E 02 FB | 	rdlong	local01, objptr
09c28     78 00 00 FF 
09c2c     94 E5 85 F1 | 	sub	objptr, ##61844
09c30     FF FF 7F FF 
09c34     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
09c38     78 00 00 AF 
09c3c     90 E5 05 A1 |  if_e	add	objptr, ##61840
09c40     F2 00 68 AC |  if_e	wrlong	#0, objptr
09c44     78 00 00 AF 
09c48     90 E5 85 A1 |  if_e	sub	objptr, ##61840
09c4c     44 02 90 AD |  if_e	jmp	#LR__0816
09c50                 | ' do 
09c50                 | LR__0811
09c50                 | '   if runptr<>oldrunptr then
09c50     78 00 00 FF 
09c54     84 E5 05 F1 | 	add	objptr, ##61828
09c58     F2 1E 02 FB | 	rdlong	local01, objptr
09c5c     08 E4 05 F1 | 	add	objptr, #8
09c60     F2 1C 02 FB | 	rdlong	arg06, objptr
09c64     78 00 00 FF 
09c68     8C E5 85 F1 | 	sub	objptr, ##61836
09c6c     0E 1F 0A F2 | 	cmp	local01, arg06 wz
09c70     CC 00 90 AD |  if_e	jmp	#LR__0812
09c74     78 00 00 FF 
09c78     94 E5 05 F1 | 	add	objptr, ##61844
09c7c     F2 12 02 F6 | 	mov	arg01, objptr
09c80     10 E4 85 F1 | 	sub	objptr, #16
09c84     F2 14 02 FB | 	rdlong	arg02, objptr
09c88     18 16 06 F6 | 	mov	arg03, #24
09c8c     6D 00 00 FF 
09c90     C4 E4 85 F1 | 	sub	objptr, ##56004
09c94     E0 B3 B0 FD | 	call	#_psram_spin2_read1
09c98     5A 00 00 FF 
09c9c     90 E5 05 F1 | 	add	objptr, ##46480
09ca0     F2 12 02 F6 | 	mov	arg01, objptr
09ca4     12 00 00 FF 
09ca8     34 E5 05 F1 | 	add	objptr, ##9524
09cac     F2 14 02 FB | 	rdlong	arg02, objptr
09cb0     14 00 00 FF 
09cb4     4C E5 85 F1 | 	sub	objptr, ##10572
09cb8     F2 1E 02 FB | 	rdlong	local01, objptr
09cbc     01 1E 66 F0 | 	shl	local01, #1
09cc0     0F 15 02 F1 | 	add	arg02, local01
09cc4     14 00 00 FF 
09cc8     64 E5 05 F1 | 	add	objptr, ##10596
09ccc     F2 16 02 FB | 	rdlong	arg03, objptr
09cd0     18 E4 85 F1 | 	sub	objptr, #24
09cd4     F2 1E 02 FB | 	rdlong	local01, objptr
09cd8     0F 17 82 F1 | 	sub	arg03, local01
09cdc     6D 00 00 FF 
09ce0     C4 E4 85 F1 | 	sub	objptr, ##56004
09ce4     90 B3 B0 FD | 	call	#_psram_spin2_read1
09ce8     6D 00 00 FF 
09cec     DC E4 05 F1 | 	add	objptr, ##56028
09cf0     F2 1E 02 FB | 	rdlong	local01, objptr
09cf4     18 E4 85 F1 | 	sub	objptr, #24
09cf8     F2 1C 02 FB | 	rdlong	arg06, objptr
09cfc     0E 1F 82 F1 | 	sub	local01, arg06
09d00     14 00 00 FF 
09d04     4C E5 85 F1 | 	sub	objptr, ##10572
09d08     F2 1C 02 FB | 	rdlong	arg06, objptr
09d0c     0E 1F 12 FD | 	qdiv	local01, arg06
09d10     05 00 00 FF 
09d14     18 E4 05 F1 | 	add	objptr, ##2584
09d18     18 1E 62 FD | 	getqx	local01
09d1c     03 1E 86 F1 | 	sub	local01, #3
09d20     F2 1E 62 FC | 	wrlong	local01, objptr
09d24     0F 00 00 FF 
09d28     34 E5 05 F1 | 	add	objptr, ##7988
09d2c     F2 1E 02 FB | 	rdlong	local01, objptr
09d30     08 E4 05 F1 | 	add	objptr, #8
09d34     F2 1E 62 FC | 	wrlong	local01, objptr
09d38     78 00 00 FF 
09d3c     8C E5 85 F1 | 	sub	objptr, ##61836
09d40                 | LR__0812
09d40     78 00 00 FF 
09d44     A8 E5 05 F1 | 	add	objptr, ##61864
09d48     F2 1E 02 FB | 	rdlong	local01, objptr
09d4c     24 E4 85 F1 | 	sub	objptr, #36
09d50     F2 1E 62 FC | 	wrlong	local01, objptr
09d54     04 E4 05 F1 | 	add	objptr, #4
09d58     F2 12 02 FB | 	rdlong	arg01, objptr
09d5c     78 00 00 FF 
09d60     88 E5 85 F1 | 	sub	objptr, ##61832
09d64     40 EB BF FD | 	call	#_execute_line
09d68     78 00 00 FF 
09d6c     88 E5 05 F1 | 	add	objptr, ##61832
09d70     F2 FA 61 FC | 	wrlong	result1, objptr
09d74     04 E4 85 F1 | 	sub	objptr, #4
09d78     F2 1E 02 FB | 	rdlong	local01, objptr
09d7c     78 00 00 FF 
09d80     84 E5 85 F1 | 	sub	objptr, ##61828
09d84     FF FF 3F FF 
09d88     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09d8c     0C 00 90 AD |  if_e	jmp	#LR__0813
09d90     74 B6 B0 FD | 	call	#_usbnew_spin2_get_key
09d94     06 FB 0D F2 | 	cmp	result1, #262 wz
09d98     B4 FE 9F 5D |  if_ne	jmp	#LR__0811
09d9c                 | LR__0813
09d9c                 | ' if runheader(5)<>$7FFF_FFFF then 
09d9c     78 00 00 FF 
09da0     A8 E5 05 F1 | 	add	objptr, ##61864
09da4     F2 1E 02 FB | 	rdlong	local01, objptr
09da8     78 00 00 FF 
09dac     A8 E5 85 F1 | 	sub	objptr, ##61864
09db0     FF FF 3F FF 
09db4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09db8     C4 00 90 AD |  if_e	jmp	#LR__0815
09dbc                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684)  
09dbc     78 00 00 FF 
09dc0     B4 E5 05 F1 | 	add	objptr, ##61876
09dc4     F2 1E 02 FB | 	rdlong	local01, objptr
09dc8     78 00 00 FF 
09dcc     B4 E5 85 F1 | 	sub	objptr, ##61876
09dd0     01 1E 0E F2 | 	cmp	local01, #1 wz
09dd4     44 00 90 5D |  if_ne	jmp	#LR__0814
09dd8     01 00 00 FF 
09ddc     00 EA 05 F1 | 	add	ptr__dat__, ##512
09de0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
09de4     01 00 00 FF 
09de8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
09dec     07 12 06 F6 | 	mov	arg01, #7
09df0     56 00 00 FF 
09df4     44 16 06 F6 | 	mov	arg03, ##44100
09df8     0E 18 C6 F9 | 	decod	arg04, #14
09dfc     03 00 00 FF 
09e00     94 1A 06 F6 | 	mov	arg05, ##1684
09e04     01 1C 66 F6 | 	neg	arg06, #1
09e08     0B 00 00 FF 
09e0c     C0 E4 05 F1 | 	add	objptr, ##5824
09e10     1C B9 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
09e14     0B 00 00 FF 
09e18     C0 E4 85 F1 | 	sub	objptr, ##5824
09e1c                 | LR__0814
09e1c                 | '   print "Stopped at line ";runheader(0)
09e1c     00 12 06 F6 | 	mov	arg01, #0
09e20     F4 12 B1 FD | 	call	#__system___getiolock_0362
09e24     FD 12 02 F6 | 	mov	arg01, result1
09e28     38 BD B0 FD | 	call	#__system___lockmem
09e2c     28 01 00 FF 
09e30     32 15 06 F6 | 	mov	arg02, ##@LR__4365
09e34     00 12 06 F6 | 	mov	arg01, #0
09e38     00 16 06 F6 | 	mov	arg03, #0
09e3c     18 CA B0 FD | 	call	#__system___basic_print_string
09e40     78 00 00 FF 
09e44     94 E5 05 F1 | 	add	objptr, ##61844
09e48     F2 14 02 FB | 	rdlong	arg02, objptr
09e4c     78 00 00 FF 
09e50     94 E5 85 F1 | 	sub	objptr, ##61844
09e54     00 12 06 F6 | 	mov	arg01, #0
09e58     00 16 06 F6 | 	mov	arg03, #0
09e5c     0A 18 06 F6 | 	mov	arg04, #10
09e60     78 CA B0 FD | 	call	#__system___basic_print_unsigned
09e64     00 12 06 F6 | 	mov	arg01, #0
09e68     0A 14 06 F6 | 	mov	arg02, #10
09e6c     00 16 06 F6 | 	mov	arg03, #0
09e70     8C C9 B0 FD | 	call	#__system___basic_print_char
09e74     00 12 06 F6 | 	mov	arg01, #0
09e78     9C 12 B1 FD | 	call	#__system___getiolock_0362
09e7c     FD 00 68 FC | 	wrlong	#0, result1
09e80                 | LR__0815
09e80     78 00 00 FF 
09e84     90 E5 05 F1 | 	add	objptr, ##61840
09e88     F2 00 68 FC | 	wrlong	#0, objptr
09e8c     78 00 00 FF 
09e90     90 E5 85 F1 | 	sub	objptr, ##61840
09e94                 | LR__0816
09e94     A7 F0 03 F6 | 	mov	ptra, fp
09e98     B2 00 A0 FD | 	call	#popregs_
09e9c                 | _do_run_ret
09e9c     2D 00 64 FD | 	ret
09ea0                 | 
09ea0                 | ' 
09ea0                 | ' 
09ea0                 | ' sub do_defsnd
09ea0                 | _do_defsnd
09ea0     05 4A 05 F6 | 	mov	COUNT_, #5
09ea4     A8 00 A0 FD | 	call	#pushregs_
09ea8     80 F0 07 F1 | 	add	ptra, #128
09eac     69 00 00 FF 
09eb0     54 E4 05 F1 | 	add	objptr, ##53844
09eb4     F2 1A 02 FB | 	rdlong	arg05, objptr
09eb8     0D 19 02 F6 | 	mov	arg04, arg05
09ebc     01 18 66 F0 | 	shl	arg04, #1
09ec0     0D 19 02 F1 | 	add	arg04, arg05
09ec4     02 18 66 F0 | 	shl	arg04, #2
09ec8     03 00 00 FF 
09ecc     04 E4 85 F1 | 	sub	objptr, ##1540
09ed0     F2 18 02 F1 | 	add	arg04, objptr
09ed4     0C 1B 0A FB | 	rdlong	arg05, arg04 wz
09ed8     A7 1A 62 FC | 	wrlong	arg05, fp
09edc                 | ' 
09edc                 | ' numpar=compiledline(lineptr_e).result.uresult
09edc                 | ' 
09edc                 | ' 
09edc                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
09edc                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
09edc                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
09edc                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
09edc                 | '  
09edc                 | ' if numpar=0 then return
09edc     66 00 00 FF 
09ee0     50 E4 85 F1 | 	sub	objptr, ##52304
09ee4     D0 08 90 AD |  if_e	jmp	#LR__0845
09ee8     C0 EA BF FD | 	call	#_pop
09eec     FF 1A 02 F6 | 	mov	arg05, result3
09ef0     24 4E 05 F1 | 	add	fp, #36
09ef4     A7 FA 61 FC | 	wrlong	result1, fp
09ef8     04 4E 05 F1 | 	add	fp, #4
09efc     A7 FC 61 FC | 	wrlong	result2, fp
09f00     04 4E 05 F1 | 	add	fp, #4
09f04     A7 1A 62 FC | 	wrlong	arg05, fp
09f08     08 4E 85 F1 | 	sub	fp, #8
09f0c     A7 12 02 F6 | 	mov	arg01, fp
09f10     24 4E 85 F1 | 	sub	fp, #36
09f14     48 4C B0 FD | 	call	#_converttoint
09f18     10 4E 05 F1 | 	add	fp, #16
09f1c     A7 FA 61 FC | 	wrlong	result1, fp
09f20     10 4E 85 F1 | 	sub	fp, #16
09f24                 | ' t1=pop()
09f24                 | ' channel=converttoint(t1)
09f24                 | '  
09f24                 | ' if numpar=1 then
09f24     A7 1A 02 FB | 	rdlong	arg05, fp
09f28     01 1A 0E F2 | 	cmp	arg05, #1 wz
09f2c     CC 02 90 5D |  if_ne	jmp	#LR__0827
09f30     78 EA BF FD | 	call	#_pop
09f34     FF 1A 02 F6 | 	mov	arg05, result3
09f38     24 4E 05 F1 | 	add	fp, #36
09f3c     A7 FA 61 FC | 	wrlong	result1, fp
09f40     04 4E 05 F1 | 	add	fp, #4
09f44     A7 FC 61 FC | 	wrlong	result2, fp
09f48     04 4E 05 F1 | 	add	fp, #4
09f4c     A7 1A 62 FC | 	wrlong	arg05, fp
09f50                 | '   t1=pop()
09f50                 | '   if t1.result_type=result_string2 then 
09f50     2C 4E 85 F1 | 	sub	fp, #44
09f54     2B 1A 0E F2 | 	cmp	arg05, #43 wz
09f58     20 00 90 5D |  if_ne	jmp	#LR__0820
09f5c     24 4E 05 F1 | 	add	fp, #36
09f60     A7 12 02 FB | 	rdlong	arg01, fp
09f64     24 4E 85 F1 | 	sub	fp, #36
09f68     58 10 B0 FD | 	call	#_do_convertstring
09f6c     30 4E 05 F1 | 	add	fp, #48
09f70     A7 FA 61 FC | 	wrlong	result1, fp
09f74     30 4E 85 F1 | 	sub	fp, #48
09f78     40 00 90 FD | 	jmp	#LR__0823
09f7c                 | LR__0820
09f7c     2C 4E 05 F1 | 	add	fp, #44
09f80     A7 1A 02 FB | 	rdlong	arg05, fp
09f84     2C 4E 85 F1 | 	sub	fp, #44
09f88     1F 1A 0E F2 | 	cmp	arg05, #31 wz
09f8c     18 00 90 5D |  if_ne	jmp	#LR__0821
09f90     24 4E 05 F1 | 	add	fp, #36
09f94     A7 1A 02 FB | 	rdlong	arg05, fp
09f98     0C 4E 05 F1 | 	add	fp, #12
09f9c     A7 1A 62 FC | 	wrlong	arg05, fp
09fa0     30 4E 85 F1 | 	sub	fp, #48
09fa4     14 00 90 FD | 	jmp	#LR__0822
09fa8                 | LR__0821
09fa8     28 01 00 FF 
09fac     43 1B 06 F6 | 	mov	arg05, ##@LR__4366
09fb0     30 4E 05 F1 | 	add	fp, #48
09fb4     A7 1A 62 FC | 	wrlong	arg05, fp
09fb8     30 4E 85 F1 | 	sub	fp, #48
09fbc                 | LR__0822
09fbc                 | LR__0823
09fbc                 | ' 
09fbc                 | '     
09fbc                 | '   if s<>"" then 
09fbc     30 4E 05 F1 | 	add	fp, #48
09fc0     A7 12 02 FB | 	rdlong	arg01, fp
09fc4     30 4E 85 F1 | 	sub	fp, #48
09fc8     28 01 00 FF 
09fcc     44 15 06 F6 | 	mov	arg02, ##@LR__4367
09fd0     B8 BB B0 FD | 	call	#__system___string_cmp
09fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
09fd8     4C 01 90 AD |  if_e	jmp	#LR__0825
09fdc                 | '     close #9 : open "/sd/media/s/"+s for input as #9
09fdc     09 12 06 F6 | 	mov	arg01, #9
09fe0     64 07 B1 FD | 	call	#__system__close
09fe4     09 1E 06 F6 | 	mov	local01, #9
09fe8     28 01 00 FF 
09fec     45 13 06 F6 | 	mov	arg01, ##@LR__4368
09ff0     30 4E 05 F1 | 	add	fp, #48
09ff4     A7 14 02 FB | 	rdlong	arg02, fp
09ff8     30 4E 85 F1 | 	sub	fp, #48
09ffc     C0 BB B0 FD | 	call	#__system___string_concat
0a000     FD 14 02 F6 | 	mov	arg02, result1
0a004     0F 13 02 F6 | 	mov	arg01, local01
0a008     00 16 06 F6 | 	mov	arg03, #0
0a00c     58 C7 B0 FD | 	call	#__system___basic_open_string
0a010     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a014     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a018     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a01c     7A 00 00 FF 
0a020     B4 E4 05 F1 | 	add	objptr, ##62644
0a024     F2 FA 61 FC | 	wrlong	result1, objptr
0a028                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0a028     7A 00 00 FF 
0a02c     B4 E4 85 F1 | 	sub	objptr, ##62644
0a030     B0 00 90 AD |  if_e	jmp	#LR__0824
0a034     00 12 06 F6 | 	mov	arg01, #0
0a038     DC 10 B1 FD | 	call	#__system___getiolock_0362
0a03c     FD 12 02 F6 | 	mov	arg01, result1
0a040     20 BB B0 FD | 	call	#__system___lockmem
0a044     28 01 00 FF 
0a048     52 15 06 F6 | 	mov	arg02, ##@LR__4369
0a04c     00 12 06 F6 | 	mov	arg01, #0
0a050     00 16 06 F6 | 	mov	arg03, #0
0a054     00 C8 B0 FD | 	call	#__system___basic_print_string
0a058     7A 00 00 FF 
0a05c     B4 E4 05 F1 | 	add	objptr, ##62644
0a060     F2 14 02 FB | 	rdlong	arg02, objptr
0a064     7A 00 00 FF 
0a068     B4 E4 85 F1 | 	sub	objptr, ##62644
0a06c     00 12 06 F6 | 	mov	arg01, #0
0a070     00 16 06 F6 | 	mov	arg03, #0
0a074     0A 18 06 F6 | 	mov	arg04, #10
0a078     20 C8 B0 FD | 	call	#__system___basic_print_integer
0a07c     28 01 00 FF 
0a080     60 15 06 F6 | 	mov	arg02, ##@LR__4370
0a084     00 12 06 F6 | 	mov	arg01, #0
0a088     00 16 06 F6 | 	mov	arg03, #0
0a08c     C8 C7 B0 FD | 	call	#__system___basic_print_string
0a090     00 1E 06 F6 | 	mov	local01, #0
0a094     7A 00 00 FF 
0a098     B4 E4 05 F1 | 	add	objptr, ##62644
0a09c     F2 12 02 FB | 	rdlong	arg01, objptr
0a0a0     7A 00 00 FF 
0a0a4     B4 E4 85 F1 | 	sub	objptr, ##62644
0a0a8     B8 E0 B0 FD | 	call	#__system___strerror
0a0ac     FD 14 02 F6 | 	mov	arg02, result1
0a0b0     0F 13 02 F6 | 	mov	arg01, local01
0a0b4     00 16 06 F6 | 	mov	arg03, #0
0a0b8     9C C7 B0 FD | 	call	#__system___basic_print_string
0a0bc     00 12 06 F6 | 	mov	arg01, #0
0a0c0     0A 14 06 F6 | 	mov	arg02, #10
0a0c4     00 16 06 F6 | 	mov	arg03, #0
0a0c8     34 C7 B0 FD | 	call	#__system___basic_print_char
0a0cc     00 12 06 F6 | 	mov	arg01, #0
0a0d0     44 10 B1 FD | 	call	#__system___getiolock_0362
0a0d4     FD 00 68 FC | 	wrlong	#0, result1
0a0d8     09 12 06 F6 | 	mov	arg01, #9
0a0dc     68 06 B1 FD | 	call	#__system__close
0a0e0     D4 06 90 FD | 	jmp	#LR__0845
0a0e4                 | LR__0824
0a0e4                 | '     get #9,17,samplebuf(channel,0),1024
0a0e4     10 4E 05 F1 | 	add	fp, #16
0a0e8     A7 16 02 FB | 	rdlong	arg03, fp
0a0ec     10 4E 85 F1 | 	sub	fp, #16
0a0f0     0B 16 66 F0 | 	shl	arg03, #11
0a0f4     0B 00 00 FF 
0a0f8     CC E5 05 F1 | 	add	objptr, ##6092
0a0fc     F2 16 02 F1 | 	add	arg03, objptr
0a100     09 12 06 F6 | 	mov	arg01, #9
0a104     11 14 06 F6 | 	mov	arg02, #17
0a108     0A 18 C6 F9 | 	decod	arg04, #10
0a10c     02 1A 06 F6 | 	mov	arg05, #2
0a110     0B 00 00 FF 
0a114     CC E5 85 F1 | 	sub	objptr, ##6092
0a118     4C C8 B0 FD | 	call	#__system___basic_get
0a11c                 | '     close #9
0a11c     09 12 06 F6 | 	mov	arg01, #9
0a120     24 06 B1 FD | 	call	#__system__close
0a124                 | '     return
0a124     90 06 90 FD | 	jmp	#LR__0845
0a128                 | LR__0825
0a128     24 4E 05 F1 | 	add	fp, #36
0a12c     A7 12 02 F6 | 	mov	arg01, fp
0a130     24 4E 85 F1 | 	sub	fp, #36
0a134     28 4A B0 FD | 	call	#_converttoint
0a138     0C 4E 05 F1 | 	add	fp, #12
0a13c     A7 FA 61 FC | 	wrlong	result1, fp
0a140                 | '  
0a140                 | '   par=converttoint(t1)
0a140                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1/512*3.14159265359*i)) : next i
0a140     00 FA 4D F2 | 	cmps	result1, #0 wz
0a144     0C 4E 85 F1 | 	sub	fp, #12
0a148     6C 06 90 5D |  if_ne	jmp	#LR__0845
0a14c     04 4E 05 F1 | 	add	fp, #4
0a150     A7 00 68 FC | 	wrlong	#0, fp
0a154     04 4E 85 F1 | 	sub	fp, #4
0a158                 | LR__0826
0a158     10 4E 05 F1 | 	add	fp, #16
0a15c     A7 1E 02 FB | 	rdlong	local01, fp
0a160     0B 1E 66 F0 | 	shl	local01, #11
0a164     0B 00 00 FF 
0a168     CC E5 05 F1 | 	add	objptr, ##6092
0a16c     F2 1E 02 F1 | 	add	local01, objptr
0a170     0C 4E 85 F1 | 	sub	fp, #12
0a174     A7 12 02 FB | 	rdlong	arg01, fp
0a178     09 21 02 F6 | 	mov	local02, arg01
0a17c     01 20 66 F0 | 	shl	local02, #1
0a180     0F 21 02 F1 | 	add	local02, local01
0a184     04 4E 85 F1 | 	sub	fp, #4
0a188     0B 00 00 FF 
0a18c     CC E5 85 F1 | 	sub	objptr, ##6092
0a190     09 13 52 F6 | 	abs	arg01, arg01 wc
0a194     1F 22 C6 C9 |  if_b	decod	local03, #31
0a198     00 22 06 36 |  if_ae	mov	local03, #0
0a19c     AC E0 B0 FD | 	call	#__system___float_fromuns
0a1a0     11 FB 61 F5 | 	xor	result1, local03
0a1a4     FD 14 02 F6 | 	mov	arg02, result1
0a1a8     00 12 06 F6 | 	mov	arg01, #0
0a1ac     C8 E3 B0 FD | 	call	#__system___float_mul
0a1b0     FD 12 02 F6 | 	mov	arg01, result1
0a1b4     FC EC B0 FD | 	call	#__system____builtin_sinf
0a1b8     FD 14 02 F6 | 	mov	arg02, result1
0a1bc     58 7F 23 FF 
0a1c0     00 12 06 F6 | 	mov	arg01, ##1191096320
0a1c4     B0 E3 B0 FD | 	call	#__system___float_mul
0a1c8     FD 12 02 F6 | 	mov	arg01, result1
0a1cc     01 14 06 F6 | 	mov	arg02, #1
0a1d0     6C E8 B0 FD | 	call	#__system___float_tointeger
0a1d4     10 FB 51 FC | 	wrword	result1, local02
0a1d8     04 4E 05 F1 | 	add	fp, #4
0a1dc     A7 20 02 FB | 	rdlong	local02, fp
0a1e0     01 20 06 F1 | 	add	local02, #1
0a1e4     A7 20 62 FC | 	wrlong	local02, fp
0a1e8     04 4E 85 F1 | 	sub	fp, #4
0a1ec     02 00 00 FF 
0a1f0     00 20 56 F2 | 	cmps	local02, ##1024 wc
0a1f4     60 FF 9F CD |  if_b	jmp	#LR__0826
0a1f8                 | '   return
0a1f8     BC 05 90 FD | 	jmp	#LR__0845
0a1fc                 | LR__0827
0a1fc                 | ' for i=0 to 15 : harm(i)=0: next i  
0a1fc     04 4E 05 F1 | 	add	fp, #4
0a200     A7 00 68 FC | 	wrlong	#0, fp
0a204     97 16 48 FB | 	callpa	#(@LR__0829-@LR__0828)>>2,fcache_load_ptr_
0a208                 | LR__0828
0a208     A7 1E 02 FB | 	rdlong	local01, fp
0a20c     02 1E 66 F0 | 	shl	local01, #2
0a210     30 4E 05 F1 | 	add	fp, #48
0a214     A7 1E 02 F1 | 	add	local01, fp
0a218     0F 01 68 FC | 	wrlong	#0, local01
0a21c     30 4E 85 F1 | 	sub	fp, #48
0a220     A7 1E 02 FB | 	rdlong	local01, fp
0a224     01 1E 06 F1 | 	add	local01, #1
0a228     A7 1E 62 FC | 	wrlong	local01, fp
0a22c     10 1E 56 F2 | 	cmps	local01, #16 wc
0a230     D4 FF 9F CD |  if_b	jmp	#LR__0828
0a234                 | LR__0829
0a234     04 4E 85 F1 | 	sub	fp, #4
0a238                 | ' for i=numpar to 2 step -1 
0a238     A7 1E 02 FB | 	rdlong	local01, fp
0a23c     04 4E 05 F1 | 	add	fp, #4
0a240     A7 1E 62 FC | 	wrlong	local01, fp
0a244     04 4E 85 F1 | 	sub	fp, #4
0a248                 | LR__0830
0a248     60 E7 BF FD | 	call	#_pop
0a24c     24 4E 05 F1 | 	add	fp, #36
0a250     A7 FA 61 FC | 	wrlong	result1, fp
0a254     04 4E 05 F1 | 	add	fp, #4
0a258     A7 FC 61 FC | 	wrlong	result2, fp
0a25c     04 4E 05 F1 | 	add	fp, #4
0a260     A7 FE 61 FC | 	wrlong	result3, fp
0a264     28 4E 85 F1 | 	sub	fp, #40
0a268     A7 24 02 FB | 	rdlong	local04, fp
0a26c     02 24 86 F1 | 	sub	local04, #2
0a270     02 24 66 F0 | 	shl	local04, #2
0a274     30 4E 05 F1 | 	add	fp, #48
0a278     A7 24 02 F1 | 	add	local04, fp
0a27c     10 4E 85 F1 | 	sub	fp, #16
0a280     A7 12 02 F6 | 	mov	arg01, fp
0a284     24 4E 85 F1 | 	sub	fp, #36
0a288     54 49 B0 FD | 	call	#_converttofloat
0a28c     12 FB 61 FC | 	wrlong	result1, local04
0a290     04 4E 05 F1 | 	add	fp, #4
0a294     A7 26 02 FB | 	rdlong	local05, fp
0a298     01 26 86 F1 | 	sub	local05, #1
0a29c     A7 26 62 FC | 	wrlong	local05, fp
0a2a0     04 4E 85 F1 | 	sub	fp, #4
0a2a4     02 26 56 F2 | 	cmps	local05, #2 wc
0a2a8     9C FF 9F 3D |  if_ae	jmp	#LR__0830
0a2ac                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0a2ac     08 4E 05 F1 | 	add	fp, #8
0a2b0     02 00 80 FF 
0a2b4     A7 00 68 FC | 	wrlong	##1024, fp
0a2b8     08 4E 85 F1 | 	sub	fp, #8
0a2bc     0B 00 00 FF 
0a2c0     CC E5 05 F1 | 	add	objptr, ##6092
0a2c4     97 18 48 FB | 	callpa	#(@LR__0833-@LR__0831)>>2,fcache_load_ptr_
0a2c8                 | LR__0831
0a2c8     02 00 00 FF 
0a2cc     00 14 DC FC | 	rep	@LR__0834, ##1024
0a2d0                 | LR__0832
0a2d0     10 4E 05 F1 | 	add	fp, #16
0a2d4     A7 20 02 FB | 	rdlong	local02, fp
0a2d8     0B 20 66 F0 | 	shl	local02, #11
0a2dc     F2 20 02 F1 | 	add	local02, objptr
0a2e0     0C 4E 85 F1 | 	sub	fp, #12
0a2e4     A7 26 02 FB | 	rdlong	local05, fp
0a2e8     04 4E 85 F1 | 	sub	fp, #4
0a2ec     01 26 66 F0 | 	shl	local05, #1
0a2f0     10 27 02 F1 | 	add	local05, local02
0a2f4     13 01 58 FC | 	wrword	#0, local05
0a2f8                 | LR__0833
0a2f8                 | LR__0834
0a2f8     0B 00 00 FF 
0a2fc     CC E5 85 F1 | 	sub	objptr, ##6092
0a300     1C 4E 05 F1 | 	add	fp, #28
0a304     A7 00 68 FC | 	wrlong	#0, fp
0a308                 | ' max=0
0a308                 | ' if harm(0)<0 then
0a308     18 4E 05 F1 | 	add	fp, #24
0a30c     A7 12 02 FB | 	rdlong	arg01, fp
0a310     34 4E 85 F1 | 	sub	fp, #52
0a314     00 14 06 F6 | 	mov	arg02, #0
0a318     01 16 06 F6 | 	mov	arg03, #1
0a31c     8C E6 B0 FD | 	call	#__system___float_cmp
0a320     00 FA 55 F2 | 	cmps	result1, #0 wc
0a324     04 01 90 3D |  if_ae	jmp	#LR__0837
0a328     34 4E 05 F1 | 	add	fp, #52
0a32c     A7 FA 01 FB | 	rdlong	result1, fp
0a330     1F FA 05 F4 | 	bitl	result1, #31
0a334     20 4E 85 F1 | 	sub	fp, #32
0a338     A7 FA 61 FC | 	wrlong	result1, fp
0a33c     24 4E 05 F1 | 	add	fp, #36
0a340     A7 FA 01 FB | 	rdlong	result1, fp
0a344     1F FA 05 F4 | 	bitl	result1, #31
0a348     20 4E 85 F1 | 	sub	fp, #32
0a34c     A7 FA 61 FC | 	wrlong	result1, fp
0a350     1C 4E 05 F1 | 	add	fp, #28
0a354     00 C0 9F FF 
0a358     A7 00 68 FC | 	wrlong	##1065353216, fp
0a35c     20 4E 85 F1 | 	sub	fp, #32
0a360     A7 1E 02 FB | 	rdlong	local01, fp
0a364     24 4E 05 F1 | 	add	fp, #36
0a368     A7 1E 62 FC | 	wrlong	local01, fp
0a36c     20 4E 85 F1 | 	sub	fp, #32
0a370     A7 1E 02 FB | 	rdlong	local01, fp
0a374     24 4E 05 F1 | 	add	fp, #36
0a378     A7 1E 62 FC | 	wrlong	local01, fp
0a37c                 | '   harm(0)=1
0a37c                 | '   harm(1)=even
0a37c                 | '   harm(2)=odd
0a37c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0a37c     38 4E 85 F1 | 	sub	fp, #56
0a380     A7 06 68 FC | 	wrlong	#3, fp
0a384                 | LR__0835
0a384     A7 26 02 FB | 	rdlong	local05, fp
0a388     13 25 02 F6 | 	mov	local04, local05
0a38c     02 24 66 F0 | 	shl	local04, #2
0a390     30 4E 05 F1 | 	add	fp, #48
0a394     A7 24 02 F1 | 	add	local04, fp
0a398     02 26 86 F1 | 	sub	local05, #2
0a39c     02 26 66 F0 | 	shl	local05, #2
0a3a0     A7 26 02 F1 | 	add	local05, fp
0a3a4     13 13 02 FB | 	rdlong	arg01, local05
0a3a8     20 4E 85 F1 | 	sub	fp, #32
0a3ac     A7 14 02 FB | 	rdlong	arg02, fp
0a3b0     14 4E 85 F1 | 	sub	fp, #20
0a3b4     C0 E1 B0 FD | 	call	#__system___float_mul
0a3b8     12 FB 61 FC | 	wrlong	result1, local04
0a3bc     04 4E 05 F1 | 	add	fp, #4
0a3c0     A7 26 02 FB | 	rdlong	local05, fp
0a3c4     02 26 06 F1 | 	add	local05, #2
0a3c8     A7 26 62 FC | 	wrlong	local05, fp
0a3cc     10 26 56 F2 | 	cmps	local05, #16 wc
0a3d0     B0 FF 9F CD |  if_b	jmp	#LR__0835
0a3d4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0a3d4     A7 08 68 FC | 	wrlong	#4, fp
0a3d8                 | LR__0836
0a3d8     A7 26 02 FB | 	rdlong	local05, fp
0a3dc     13 25 02 F6 | 	mov	local04, local05
0a3e0     02 24 66 F0 | 	shl	local04, #2
0a3e4     30 4E 05 F1 | 	add	fp, #48
0a3e8     A7 24 02 F1 | 	add	local04, fp
0a3ec     02 26 86 F1 | 	sub	local05, #2
0a3f0     02 26 66 F0 | 	shl	local05, #2
0a3f4     A7 26 02 F1 | 	add	local05, fp
0a3f8     13 13 02 FB | 	rdlong	arg01, local05
0a3fc     1C 4E 85 F1 | 	sub	fp, #28
0a400     A7 14 02 FB | 	rdlong	arg02, fp
0a404     18 4E 85 F1 | 	sub	fp, #24
0a408     6C E1 B0 FD | 	call	#__system___float_mul
0a40c     12 FB 61 FC | 	wrlong	result1, local04
0a410     04 4E 05 F1 | 	add	fp, #4
0a414     A7 26 02 FB | 	rdlong	local05, fp
0a418     02 26 06 F1 | 	add	local05, #2
0a41c     A7 26 62 FC | 	wrlong	local05, fp
0a420     0F 26 56 F2 | 	cmps	local05, #15 wc
0a424     B0 FF 9F CD |  if_b	jmp	#LR__0836
0a428     04 4E 85 F1 | 	sub	fp, #4
0a42c                 | LR__0837
0a42c                 | ' if harm(0)>0 then ' synthesize with harmonics
0a42c     34 4E 05 F1 | 	add	fp, #52
0a430     A7 12 02 FB | 	rdlong	arg01, fp
0a434     34 4E 85 F1 | 	sub	fp, #52
0a438     00 14 06 F6 | 	mov	arg02, #0
0a43c     01 16 66 F6 | 	neg	arg03, #1
0a440     68 E5 B0 FD | 	call	#__system___float_cmp
0a444     01 FA 55 F2 | 	cmps	result1, #1 wc
0a448     CC 02 90 CD |  if_b	jmp	#LR__0843
0a44c                 | '   for i=0 to 10
0a44c     04 4E 05 F1 | 	add	fp, #4
0a450     A7 00 68 FC | 	wrlong	#0, fp
0a454     04 4E 85 F1 | 	sub	fp, #4
0a458                 | LR__0838
0a458     20 4E 05 F1 | 	add	fp, #32
0a45c     A7 00 68 FC | 	wrlong	#0, fp
0a460                 | '     spl=0
0a460                 | '     for j=0 to 15: spl+=harm(j)*sin((1/512)*3.14159265359*i*(j+1)) :next j :  print spl
0a460     18 4E 85 F1 | 	sub	fp, #24
0a464     A7 00 68 FC | 	wrlong	#0, fp
0a468                 | LR__0839
0a468     A7 24 02 FB | 	rdlong	local04, fp
0a46c     02 24 66 F0 | 	shl	local04, #2
0a470     2C 4E 05 F1 | 	add	fp, #44
0a474     A7 24 02 F1 | 	add	local04, fp
0a478     12 27 02 FB | 	rdlong	local05, local04
0a47c     00 24 06 F6 | 	mov	local04, #0
0a480     30 4E 85 F1 | 	sub	fp, #48
0a484     A7 12 02 FB | 	rdlong	arg01, fp
0a488     04 4E 85 F1 | 	sub	fp, #4
0a48c     09 13 52 F6 | 	abs	arg01, arg01 wc
0a490     1F 22 C6 C9 |  if_b	decod	local03, #31
0a494     00 22 06 36 |  if_ae	mov	local03, #0
0a498     B0 DD B0 FD | 	call	#__system___float_fromuns
0a49c     11 FB 61 F5 | 	xor	result1, local03
0a4a0     FD 14 02 F6 | 	mov	arg02, result1
0a4a4     12 13 02 F6 | 	mov	arg01, local04
0a4a8     CC E0 B0 FD | 	call	#__system___float_mul
0a4ac     FD 24 02 F6 | 	mov	local04, result1
0a4b0     08 4E 05 F1 | 	add	fp, #8
0a4b4     A7 12 02 FB | 	rdlong	arg01, fp
0a4b8     08 4E 85 F1 | 	sub	fp, #8
0a4bc     01 12 06 F1 | 	add	arg01, #1
0a4c0     09 13 52 F6 | 	abs	arg01, arg01 wc
0a4c4     1F 22 C6 C9 |  if_b	decod	local03, #31
0a4c8     00 22 06 36 |  if_ae	mov	local03, #0
0a4cc     7C DD B0 FD | 	call	#__system___float_fromuns
0a4d0     11 FB 61 F5 | 	xor	result1, local03
0a4d4     FD 14 02 F6 | 	mov	arg02, result1
0a4d8     12 13 02 F6 | 	mov	arg01, local04
0a4dc     98 E0 B0 FD | 	call	#__system___float_mul
0a4e0     FD 12 02 F6 | 	mov	arg01, result1
0a4e4     CC E9 B0 FD | 	call	#__system____builtin_sinf
0a4e8     FD 14 02 F6 | 	mov	arg02, result1
0a4ec     13 13 02 F6 | 	mov	arg01, local05
0a4f0     84 E0 B0 FD | 	call	#__system___float_mul
0a4f4     FD 14 02 F6 | 	mov	arg02, result1
0a4f8     20 4E 05 F1 | 	add	fp, #32
0a4fc     A7 12 02 FB | 	rdlong	arg01, fp
0a500     20 4E 85 F1 | 	sub	fp, #32
0a504     78 DD B0 FD | 	call	#__system___float_add
0a508     20 4E 05 F1 | 	add	fp, #32
0a50c     A7 FA 61 FC | 	wrlong	result1, fp
0a510     18 4E 85 F1 | 	sub	fp, #24
0a514     A7 1A 02 FB | 	rdlong	arg05, fp
0a518     01 1A 06 F1 | 	add	arg05, #1
0a51c     A7 1A 62 FC | 	wrlong	arg05, fp
0a520     10 1A 56 F2 | 	cmps	arg05, #16 wc
0a524     40 FF 9F CD |  if_b	jmp	#LR__0839
0a528     08 4E 85 F1 | 	sub	fp, #8
0a52c     00 12 06 F6 | 	mov	arg01, #0
0a530     E4 0B B1 FD | 	call	#__system___getiolock_0362
0a534     FD 12 02 F6 | 	mov	arg01, result1
0a538     28 B6 B0 FD | 	call	#__system___lockmem
0a53c     20 4E 05 F1 | 	add	fp, #32
0a540     A7 14 02 FB | 	rdlong	arg02, fp
0a544     20 4E 85 F1 | 	sub	fp, #32
0a548     00 12 06 F6 | 	mov	arg01, #0
0a54c     00 16 06 F6 | 	mov	arg03, #0
0a550     23 18 06 F6 | 	mov	arg04, #35
0a554     38 E6 B0 FD | 	call	#__system___basic_print_float
0a558     00 12 06 F6 | 	mov	arg01, #0
0a55c     0A 14 06 F6 | 	mov	arg02, #10
0a560     00 16 06 F6 | 	mov	arg03, #0
0a564     98 C2 B0 FD | 	call	#__system___basic_print_char
0a568     00 12 06 F6 | 	mov	arg01, #0
0a56c     A8 0B B1 FD | 	call	#__system___getiolock_0362
0a570     FD 00 68 FC | 	wrlong	#0, result1
0a574                 | '     if abs(spl)>max then max=abs(spl)  
0a574     20 4E 05 F1 | 	add	fp, #32
0a578     A7 12 02 FB | 	rdlong	arg01, fp
0a57c     1F 12 06 F4 | 	bitl	arg01, #31
0a580     04 4E 85 F1 | 	sub	fp, #4
0a584     A7 14 02 FB | 	rdlong	arg02, fp
0a588     1C 4E 85 F1 | 	sub	fp, #28
0a58c     01 16 66 F6 | 	neg	arg03, #1
0a590     18 E4 B0 FD | 	call	#__system___float_cmp
0a594     01 FA 55 F2 | 	cmps	result1, #1 wc
0a598     18 00 90 CD |  if_b	jmp	#LR__0840
0a59c     20 4E 05 F1 | 	add	fp, #32
0a5a0     A7 FA 01 FB | 	rdlong	result1, fp
0a5a4     1F FA 05 F4 | 	bitl	result1, #31
0a5a8     04 4E 85 F1 | 	sub	fp, #4
0a5ac     A7 FA 61 FC | 	wrlong	result1, fp
0a5b0     1C 4E 85 F1 | 	sub	fp, #28
0a5b4                 | LR__0840
0a5b4     04 4E 05 F1 | 	add	fp, #4
0a5b8     A7 26 02 FB | 	rdlong	local05, fp
0a5bc     01 26 06 F1 | 	add	local05, #1
0a5c0     A7 26 62 FC | 	wrlong	local05, fp
0a5c4     04 4E 85 F1 | 	sub	fp, #4
0a5c8     0B 26 56 F2 | 	cmps	local05, #11 wc
0a5cc     88 FE 9F CD |  if_b	jmp	#LR__0838
0a5d0                 | '   for i=0 to 1023
0a5d0     04 4E 05 F1 | 	add	fp, #4
0a5d4     A7 00 68 FC | 	wrlong	#0, fp
0a5d8     04 4E 85 F1 | 	sub	fp, #4
0a5dc                 | LR__0841
0a5dc     20 4E 05 F1 | 	add	fp, #32
0a5e0     A7 00 68 FC | 	wrlong	#0, fp
0a5e4                 | '     spl=0
0a5e4                 | '     for j=0 to 15: spl+=harm(i)*(32600/max)*sin(1/512*3.14159265359*(j+1)) :next j 
0a5e4     18 4E 85 F1 | 	sub	fp, #24
0a5e8     A7 00 68 FC | 	wrlong	#0, fp
0a5ec     08 4E 85 F1 | 	sub	fp, #8
0a5f0                 | LR__0842
0a5f0     04 4E 05 F1 | 	add	fp, #4
0a5f4     A7 26 02 FB | 	rdlong	local05, fp
0a5f8     02 26 66 F0 | 	shl	local05, #2
0a5fc     30 4E 05 F1 | 	add	fp, #48
0a600     A7 26 02 F1 | 	add	local05, fp
0a604     13 27 02 FB | 	rdlong	local05, local05
0a608     18 4E 85 F1 | 	sub	fp, #24
0a60c     A7 14 02 FB | 	rdlong	arg02, fp
0a610     1C 4E 85 F1 | 	sub	fp, #28
0a614     58 7F 23 FF 
0a618     00 12 06 F6 | 	mov	arg01, ##1191096320
0a61c     5C E1 B0 FD | 	call	#__system___float_div
0a620     FD 14 02 F6 | 	mov	arg02, result1
0a624     13 13 02 F6 | 	mov	arg01, local05
0a628     4C DF B0 FD | 	call	#__system___float_mul
0a62c     FD 26 02 F6 | 	mov	local05, result1
0a630     00 24 06 F6 | 	mov	local04, #0
0a634     08 4E 05 F1 | 	add	fp, #8
0a638     A7 12 02 FB | 	rdlong	arg01, fp
0a63c     08 4E 85 F1 | 	sub	fp, #8
0a640     01 12 06 F1 | 	add	arg01, #1
0a644     09 13 52 F6 | 	abs	arg01, arg01 wc
0a648     1F 22 C6 C9 |  if_b	decod	local03, #31
0a64c     00 22 06 36 |  if_ae	mov	local03, #0
0a650     F8 DB B0 FD | 	call	#__system___float_fromuns
0a654     11 FB 61 F5 | 	xor	result1, local03
0a658     FD 14 02 F6 | 	mov	arg02, result1
0a65c     12 13 02 F6 | 	mov	arg01, local04
0a660     14 DF B0 FD | 	call	#__system___float_mul
0a664     FD 12 02 F6 | 	mov	arg01, result1
0a668     48 E8 B0 FD | 	call	#__system____builtin_sinf
0a66c     FD 14 02 F6 | 	mov	arg02, result1
0a670     13 13 02 F6 | 	mov	arg01, local05
0a674     00 DF B0 FD | 	call	#__system___float_mul
0a678     FD 14 02 F6 | 	mov	arg02, result1
0a67c     20 4E 05 F1 | 	add	fp, #32
0a680     A7 12 02 FB | 	rdlong	arg01, fp
0a684     20 4E 85 F1 | 	sub	fp, #32
0a688     F4 DB B0 FD | 	call	#__system___float_add
0a68c     20 4E 05 F1 | 	add	fp, #32
0a690     A7 FA 61 FC | 	wrlong	result1, fp
0a694     18 4E 85 F1 | 	sub	fp, #24
0a698     A7 26 02 FB | 	rdlong	local05, fp
0a69c     01 26 06 F1 | 	add	local05, #1
0a6a0     A7 26 62 FC | 	wrlong	local05, fp
0a6a4     08 4E 85 F1 | 	sub	fp, #8
0a6a8     10 26 56 F2 | 	cmps	local05, #16 wc
0a6ac     40 FF 9F CD |  if_b	jmp	#LR__0842
0a6b0     10 4E 05 F1 | 	add	fp, #16
0a6b4     A7 26 02 FB | 	rdlong	local05, fp
0a6b8     0B 26 66 F0 | 	shl	local05, #11
0a6bc     0B 00 00 FF 
0a6c0     CC E5 05 F1 | 	add	objptr, ##6092
0a6c4     F2 26 02 F1 | 	add	local05, objptr
0a6c8     0C 4E 85 F1 | 	sub	fp, #12
0a6cc     A7 20 02 FB | 	rdlong	local02, fp
0a6d0     01 20 66 F0 | 	shl	local02, #1
0a6d4     13 21 02 F1 | 	add	local02, local05
0a6d8     1C 4E 05 F1 | 	add	fp, #28
0a6dc     A7 12 02 FB | 	rdlong	arg01, fp
0a6e0     20 4E 85 F1 | 	sub	fp, #32
0a6e4     0B 00 00 FF 
0a6e8     CC E5 85 F1 | 	sub	objptr, ##6092
0a6ec     01 14 06 F6 | 	mov	arg02, #1
0a6f0     4C E3 B0 FD | 	call	#__system___float_tointeger
0a6f4     10 FB 51 FC | 	wrword	result1, local02
0a6f8     04 4E 05 F1 | 	add	fp, #4
0a6fc     A7 26 02 FB | 	rdlong	local05, fp
0a700     01 26 06 F1 | 	add	local05, #1
0a704     A7 26 62 FC | 	wrlong	local05, fp
0a708     04 4E 85 F1 | 	sub	fp, #4
0a70c     02 00 00 FF 
0a710     00 26 56 F2 | 	cmps	local05, ##1024 wc
0a714     C4 FE 9F CD |  if_b	jmp	#LR__0841
0a718                 | LR__0843
0a718                 | ' for i=0 to 10 : print samplebuf(channel,i),: next i
0a718     04 4E 05 F1 | 	add	fp, #4
0a71c     A7 00 68 FC | 	wrlong	#0, fp
0a720     04 4E 85 F1 | 	sub	fp, #4
0a724                 | LR__0844
0a724     00 12 06 F6 | 	mov	arg01, #0
0a728     EC 09 B1 FD | 	call	#__system___getiolock_0362
0a72c     FD 12 02 F6 | 	mov	arg01, result1
0a730     30 B4 B0 FD | 	call	#__system___lockmem
0a734     10 4E 05 F1 | 	add	fp, #16
0a738     A7 26 02 FB | 	rdlong	local05, fp
0a73c     0B 26 66 F0 | 	shl	local05, #11
0a740     0B 00 00 FF 
0a744     CC E5 05 F1 | 	add	objptr, ##6092
0a748     F2 26 02 F1 | 	add	local05, objptr
0a74c     0C 4E 85 F1 | 	sub	fp, #12
0a750     A7 24 02 FB | 	rdlong	local04, fp
0a754     04 4E 85 F1 | 	sub	fp, #4
0a758     01 24 66 F0 | 	shl	local04, #1
0a75c     13 25 02 F1 | 	add	local04, local05
0a760     12 15 E2 FA | 	rdword	arg02, local04
0a764     0F 14 66 F7 | 	signx	arg02, #15
0a768     00 12 06 F6 | 	mov	arg01, #0
0a76c     00 16 06 F6 | 	mov	arg03, #0
0a770     0A 18 06 F6 | 	mov	arg04, #10
0a774     0B 00 00 FF 
0a778     CC E5 85 F1 | 	sub	objptr, ##6092
0a77c     1C C1 B0 FD | 	call	#__system___basic_print_integer
0a780     00 12 06 F6 | 	mov	arg01, #0
0a784     09 14 06 F6 | 	mov	arg02, #9
0a788     00 16 06 F6 | 	mov	arg03, #0
0a78c     70 C0 B0 FD | 	call	#__system___basic_print_char
0a790     00 12 06 F6 | 	mov	arg01, #0
0a794     80 09 B1 FD | 	call	#__system___getiolock_0362
0a798     FD 00 68 FC | 	wrlong	#0, result1
0a79c     04 4E 05 F1 | 	add	fp, #4
0a7a0     A7 26 02 FB | 	rdlong	local05, fp
0a7a4     01 26 06 F1 | 	add	local05, #1
0a7a8     A7 26 62 FC | 	wrlong	local05, fp
0a7ac     04 4E 85 F1 | 	sub	fp, #4
0a7b0     0B 26 56 F2 | 	cmps	local05, #11 wc
0a7b4     6C FF 9F CD |  if_b	jmp	#LR__0844
0a7b8                 | LR__0845
0a7b8     A7 F0 03 F6 | 	mov	ptra, fp
0a7bc     B2 00 A0 FD | 	call	#popregs_
0a7c0                 | _do_defsnd_ret
0a7c0     2D 00 64 FD | 	ret
0a7c4                 | 
0a7c4                 | ' 
0a7c4                 | ' ' ---------------  List the program. 
0a7c4                 | ' 
0a7c4                 | ' sub do_list
0a7c4                 | _do_list
0a7c4     02 4A 05 F6 | 	mov	COUNT_, #2
0a7c8     A8 00 A0 FD | 	call	#pushregs_
0a7cc     B8 F0 07 F1 | 	add	ptra, #184
0a7d0     04 4E 05 F1 | 	add	fp, #4
0a7d4     A7 00 68 FC | 	wrlong	#0, fp
0a7d8     04 4E 05 F1 | 	add	fp, #4
0a7dc     FF FF BF FF 
0a7e0     A7 FE 6B FC | 	wrlong	##2147483647, fp
0a7e4     08 4E 85 F1 | 	sub	fp, #8
0a7e8     69 00 00 FF 
0a7ec     54 E4 05 F1 | 	add	objptr, ##53844
0a7f0     F2 1E 02 FB | 	rdlong	local01, objptr
0a7f4     0F 17 02 F6 | 	mov	arg03, local01
0a7f8     01 16 66 F0 | 	shl	arg03, #1
0a7fc     0F 17 02 F1 | 	add	arg03, local01
0a800     02 16 66 F0 | 	shl	arg03, #2
0a804     03 00 00 FF 
0a808     04 E4 85 F1 | 	sub	objptr, ##1540
0a80c     F2 16 02 F1 | 	add	arg03, objptr
0a810     0B 17 02 FB | 	rdlong	arg03, arg03
0a814     A7 16 62 FC | 	wrlong	arg03, fp
0a818                 | ' 
0a818                 | ' startline=0 : endline=$7FFFFFFF
0a818                 | ' numpar=compiledline(lineptr_e).result.uresult
0a818                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0a818     01 16 0E F2 | 	cmp	arg03, #1 wz
0a81c     66 00 00 FF 
0a820     50 E4 85 F1 | 	sub	objptr, ##52304
0a824     3C 00 90 5D |  if_ne	jmp	#LR__0850
0a828     80 E1 BF FD | 	call	#_pop
0a82c     FF 1E 02 F6 | 	mov	local01, result3
0a830     0C 4E 05 F1 | 	add	fp, #12
0a834     A7 FA 61 FC | 	wrlong	result1, fp
0a838     04 4E 05 F1 | 	add	fp, #4
0a83c     A7 FC 61 FC | 	wrlong	result2, fp
0a840     04 4E 05 F1 | 	add	fp, #4
0a844     A7 1E 62 FC | 	wrlong	local01, fp
0a848     08 4E 85 F1 | 	sub	fp, #8
0a84c     A7 12 02 F6 | 	mov	arg01, fp
0a850     0C 4E 85 F1 | 	sub	fp, #12
0a854     08 43 B0 FD | 	call	#_converttoint
0a858     04 4E 05 F1 | 	add	fp, #4
0a85c     A7 FA 61 FC | 	wrlong	result1, fp
0a860     04 4E 85 F1 | 	sub	fp, #4
0a864                 | LR__0850
0a864                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0a864     A7 16 02 FB | 	rdlong	arg03, fp
0a868     02 16 0E F2 | 	cmp	arg03, #2 wz
0a86c     7C 00 90 5D |  if_ne	jmp	#LR__0851
0a870     38 E1 BF FD | 	call	#_pop
0a874     FF 1E 02 F6 | 	mov	local01, result3
0a878     0C 4E 05 F1 | 	add	fp, #12
0a87c     A7 FA 61 FC | 	wrlong	result1, fp
0a880     04 4E 05 F1 | 	add	fp, #4
0a884     A7 FC 61 FC | 	wrlong	result2, fp
0a888     04 4E 05 F1 | 	add	fp, #4
0a88c     A7 1E 62 FC | 	wrlong	local01, fp
0a890     08 4E 85 F1 | 	sub	fp, #8
0a894     A7 12 02 F6 | 	mov	arg01, fp
0a898     0C 4E 85 F1 | 	sub	fp, #12
0a89c     C0 42 B0 FD | 	call	#_converttoint
0a8a0     FD 1E 02 F6 | 	mov	local01, result1
0a8a4     08 4E 05 F1 | 	add	fp, #8
0a8a8     A7 1E 62 FC | 	wrlong	local01, fp
0a8ac     08 4E 85 F1 | 	sub	fp, #8
0a8b0     F8 E0 BF FD | 	call	#_pop
0a8b4     FF 1E 02 F6 | 	mov	local01, result3
0a8b8     0C 4E 05 F1 | 	add	fp, #12
0a8bc     A7 FA 61 FC | 	wrlong	result1, fp
0a8c0     04 4E 05 F1 | 	add	fp, #4
0a8c4     A7 FC 61 FC | 	wrlong	result2, fp
0a8c8     04 4E 05 F1 | 	add	fp, #4
0a8cc     A7 1E 62 FC | 	wrlong	local01, fp
0a8d0     08 4E 85 F1 | 	sub	fp, #8
0a8d4     A7 12 02 F6 | 	mov	arg01, fp
0a8d8     0C 4E 85 F1 | 	sub	fp, #12
0a8dc     80 42 B0 FD | 	call	#_converttoint
0a8e0     04 4E 05 F1 | 	add	fp, #4
0a8e4     A7 FA 61 FC | 	wrlong	result1, fp
0a8e8     04 4E 85 F1 | 	sub	fp, #4
0a8ec                 | LR__0851
0a8ec                 | ' 
0a8ec                 | ' 
0a8ec                 | ' print
0a8ec     00 12 06 F6 | 	mov	arg01, #0
0a8f0     24 08 B1 FD | 	call	#__system___getiolock_0362
0a8f4     FD 12 02 F6 | 	mov	arg01, result1
0a8f8     68 B2 B0 FD | 	call	#__system___lockmem
0a8fc     00 12 06 F6 | 	mov	arg01, #0
0a900     0A 14 06 F6 | 	mov	arg02, #10
0a904     00 16 06 F6 | 	mov	arg03, #0
0a908     F4 BE B0 FD | 	call	#__system___basic_print_char
0a90c     00 12 06 F6 | 	mov	arg01, #0
0a910     04 08 B1 FD | 	call	#__system___getiolock_0362
0a914     FD 00 68 FC | 	wrlong	#0, result1
0a918     69 00 00 FF 
0a91c     58 E4 05 F1 | 	add	objptr, ##53848
0a920     F2 20 02 FB | 	rdlong	local02, objptr
0a924     11 00 00 FF 
0a928     54 E4 05 F1 | 	add	objptr, ##8788
0a92c     F2 20 62 FC | 	wrlong	local02, objptr
0a930     7A 00 00 FF 
0a934     AC E4 85 F1 | 	sub	objptr, ##62636
0a938                 | ' do 
0a938                 | LR__0852
0a938     20 4E 05 F1 | 	add	fp, #32
0a93c     A7 12 02 F6 | 	mov	arg01, fp
0a940     20 4E 85 F1 | 	sub	fp, #32
0a944     7A 00 00 FF 
0a948     AC E4 05 F1 | 	add	objptr, ##62636
0a94c     F2 14 02 FB | 	rdlong	arg02, objptr
0a950     18 16 06 F6 | 	mov	arg03, #24
0a954     6E 00 00 FF 
0a958     EC E5 85 F1 | 	sub	objptr, ##56812
0a95c     18 A7 B0 FD | 	call	#_psram_spin2_read1
0a960     0B 00 00 FF 
0a964     C0 E4 85 F1 | 	sub	objptr, ##5824
0a968                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0a968                 | '   if header(0)<> $FFFFFFFF then
0a968     20 4E 05 F1 | 	add	fp, #32
0a96c     A7 20 02 FB | 	rdlong	local02, fp
0a970     20 4E 85 F1 | 	sub	fp, #32
0a974     FF FF 7F FF 
0a978     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0a97c     A8 00 90 AD |  if_e	jmp	#LR__0854
0a980     38 4E 05 F1 | 	add	fp, #56
0a984     3F 16 06 F6 | 	mov	arg03, #63
0a988     28 16 62 FD | 	setq	arg03
0a98c     A7 00 68 FC | 	wrlong	#0, fp
0a990     A7 12 02 F6 | 	mov	arg01, fp
0a994     10 4E 85 F1 | 	sub	fp, #16
0a998     A7 14 02 FB | 	rdlong	arg02, fp
0a99c     04 4E 05 F1 | 	add	fp, #4
0a9a0     A7 16 02 FB | 	rdlong	arg03, fp
0a9a4     2C 4E 85 F1 | 	sub	fp, #44
0a9a8     0B 00 00 FF 
0a9ac     C0 E4 05 F1 | 	add	objptr, ##5824
0a9b0     C4 A6 B0 FD | 	call	#_psram_spin2_read1
0a9b4     0B 00 00 FF 
0a9b8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a9bc                 | '     longfill(linebuf,0,64)
0a9bc                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0a9bc                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0a9bc     20 4E 05 F1 | 	add	fp, #32
0a9c0     A7 20 02 FB | 	rdlong	local02, fp
0a9c4     1C 4E 85 F1 | 	sub	fp, #28
0a9c8     A7 1E 02 FB | 	rdlong	local01, fp
0a9cc     04 4E 85 F1 | 	sub	fp, #4
0a9d0     0F 21 52 F2 | 	cmps	local02, local01 wc
0a9d4     30 00 90 CD |  if_b	jmp	#LR__0853
0a9d8     20 4E 05 F1 | 	add	fp, #32
0a9dc     A7 20 02 FB | 	rdlong	local02, fp
0a9e0     18 4E 85 F1 | 	sub	fp, #24
0a9e4     A7 16 02 FB | 	rdlong	arg03, fp
0a9e8     08 4E 85 F1 | 	sub	fp, #8
0a9ec     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0a9f0     14 00 90 1D |  if_a	jmp	#LR__0853
0a9f4     38 4E 05 F1 | 	add	fp, #56
0a9f8     A7 12 02 F6 | 	mov	arg01, fp
0a9fc     38 4E 85 F1 | 	sub	fp, #56
0aa00                 | ' 
0aa00                 | ' write(text)
0aa00     3C A1 B0 FD | 	call	#_hg010b_spin2_write
0aa04                 | ' crlf
0aa04     98 A2 B0 FD | 	call	#_hg010b_spin2_crlf
0aa08                 | LR__0853
0aa08     34 4E 05 F1 | 	add	fp, #52
0aa0c     A7 20 02 FB | 	rdlong	local02, fp
0aa10     34 4E 85 F1 | 	sub	fp, #52
0aa14     7A 00 00 FF 
0aa18     AC E4 05 F1 | 	add	objptr, ##62636
0aa1c     F2 20 62 FC | 	wrlong	local02, objptr
0aa20     7A 00 00 FF 
0aa24     AC E4 85 F1 | 	sub	objptr, ##62636
0aa28                 | LR__0854
0aa28     34 4E 05 F1 | 	add	fp, #52
0aa2c     A7 20 02 FB | 	rdlong	local02, fp
0aa30     34 4E 85 F1 | 	sub	fp, #52
0aa34     FF FF 3F FF 
0aa38     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0aa3c     20 4E 05 51 |  if_ne	add	fp, #32
0aa40     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0aa44     20 4E 85 51 |  if_ne	sub	fp, #32
0aa48     FF FF 7F 5F 
0aa4c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0aa50     E4 FE 9F 5D |  if_ne	jmp	#LR__0852
0aa54     A7 F0 03 F6 | 	mov	ptra, fp
0aa58     B2 00 A0 FD | 	call	#popregs_
0aa5c                 | _do_list_ret
0aa5c     2D 00 64 FD | 	ret
0aa60                 | 
0aa60                 | ' 
0aa60                 | ' '---------------- Clear the program
0aa60                 | ' 
0aa60                 | ' sub do_new
0aa60                 | _do_new
0aa60     03 4A 05 F6 | 	mov	COUNT_, #3
0aa64     A8 00 A0 FD | 	call	#pushregs_
0aa68     00 12 06 F6 | 	mov	arg01, #0
0aa6c     01 14 66 F6 | 	neg	arg02, #1
0aa70     01 16 06 F6 | 	mov	arg03, #1
0aa74     00 18 06 F6 | 	mov	arg04, #0
0aa78     0B 00 00 FF 
0aa7c     C0 E4 05 F1 | 	add	objptr, ##5824
0aa80                 | '     return fill(addr, pattern, count, listPtr, 4)
0aa80     04 1A 06 F6 | 	mov	arg05, #4
0aa84     28 A7 B0 FD | 	call	#_psram_spin2_fill
0aa88     48 00 00 FF 
0aa8c     1C E5 05 F1 | 	add	objptr, ##37148
0aa90     F2 00 68 FC | 	wrlong	#0, objptr
0aa94     15 00 00 FF 
0aa98     7C E4 05 F1 | 	add	objptr, ##10876
0aa9c     F2 00 68 FC | 	wrlong	#0, objptr
0aaa0     0F 00 00 FF 
0aaa4     2C E5 05 F1 | 	add	objptr, ##7980
0aaa8     F2 00 68 FC | 	wrlong	#0, objptr
0aaac     04 E4 05 F1 | 	add	objptr, #4
0aab0     F2 00 68 FC | 	wrlong	#0, objptr
0aab4     16 00 00 FF 
0aab8     5C E5 85 F1 | 	sub	objptr, ##11612
0aabc     F2 00 68 FC | 	wrlong	#0, objptr
0aac0     07 00 00 FF 
0aac4     24 E4 05 F1 | 	add	objptr, ##3620
0aac8     F2 00 68 FC | 	wrlong	#0, objptr
0aacc     07 00 00 FF 
0aad0     20 E4 85 F1 | 	sub	objptr, ##3616
0aad4     F2 00 68 FC | 	wrlong	#0, objptr
0aad8     0F 00 00 FF 
0aadc     34 E4 05 F1 | 	add	objptr, ##7732
0aae0     F2 00 68 FC | 	wrlong	#0, objptr
0aae4     08 00 00 FF 
0aae8     08 E4 85 F1 | 	sub	objptr, ##4104
0aaec     F2 00 68 FC | 	wrlong	#0, objptr
0aaf0     04 E4 05 F1 | 	add	objptr, #4
0aaf4     FF FF FF FF 
0aaf8     F2 FE 6B FC | 	wrlong	##-1, objptr
0aafc     0F 00 00 FF 
0ab00     4C E5 05 F1 | 	add	objptr, ##8012
0ab04     F2 00 68 FC | 	wrlong	#0, objptr
0ab08                 | ' 
0ab08                 | ' pslpoke(0,$FFFFFFFF)
0ab08                 | ' varnum=0
0ab08                 | ' programstart=0 :runptr=0 : runptr2=0
0ab08                 | ' stackpointer=0
0ab08                 | ' lineptr=0 
0ab08                 | ' programptr=0 : stringptr=0
0ab08                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0ab08                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0ab08     00 1E 06 F6 | 	mov	local01, #0
0ab0c     07 00 00 FF 
0ab10     40 E5 85 F1 | 	sub	objptr, ##3904
0ab14     97 16 48 FB | 	callpa	#(@LR__0861-@LR__0860)>>2,fcache_load_ptr_
0ab18                 | LR__0860
0ab18     0F 21 02 F6 | 	mov	local02, local01
0ab1c     02 20 66 F0 | 	shl	local02, #2
0ab20     0F 21 02 F1 | 	add	local02, local01
0ab24     02 20 66 F0 | 	shl	local02, #2
0ab28     F2 20 02 F1 | 	add	local02, objptr
0ab2c     08 20 06 F1 | 	add	local02, #8
0ab30     FF FF FF FF 
0ab34     10 FF 6B FC | 	wrlong	##-1, local02
0ab38     01 1E 06 F1 | 	add	local01, #1
0ab3c     81 1E 56 F2 | 	cmps	local01, #129 wc
0ab40     D4 FF 9F CD |  if_b	jmp	#LR__0860
0ab44                 | LR__0861
0ab44     71 00 00 FF 
0ab48     6C E4 85 F1 | 	sub	objptr, ##57964
0ab4c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0ab4c     00 1E 06 F6 | 	mov	local01, #0
0ab50                 | LR__0862
0ab50     0F 21 02 F6 | 	mov	local02, local01
0ab54     02 20 66 F0 | 	shl	local02, #2
0ab58     7A 00 00 FF 
0ab5c     08 E4 05 F1 | 	add	objptr, ##62472
0ab60     F2 20 02 F1 | 	add	local02, objptr
0ab64     10 21 0A FB | 	rdlong	local02, local02 wz
0ab68     7A 00 00 FF 
0ab6c     08 E4 85 F1 | 	sub	objptr, ##62472
0ab70     34 00 90 AD |  if_e	jmp	#LR__0863
0ab74     0F 13 02 F6 | 	mov	arg01, local01
0ab78     00 14 06 F6 | 	mov	arg02, #0
0ab7c     00 16 06 F6 | 	mov	arg03, #0
0ab80     3C 90 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ab84     0F 21 02 F6 | 	mov	local02, local01
0ab88     02 20 66 F0 | 	shl	local02, #2
0ab8c     7A 00 00 FF 
0ab90     08 E4 05 F1 | 	add	objptr, ##62472
0ab94     F2 20 02 F1 | 	add	local02, objptr
0ab98     10 13 02 FB | 	rdlong	arg01, local02
0ab9c     7A 00 00 FF 
0aba0     08 E4 85 F1 | 	sub	objptr, ##62472
0aba4     60 EB B0 FD | 	call	#__system___gc_free
0aba8                 | LR__0863
0aba8     F2 22 02 FB | 	rdlong	local03, objptr
0abac     7A 00 00 FF 
0abb0     4C E4 05 F1 | 	add	objptr, ##62540
0abb4     F2 22 62 FC | 	wrlong	local03, objptr
0abb8     7A 00 00 FF 
0abbc     4C E4 85 F1 | 	sub	objptr, ##62540
0abc0     11 12 06 F6 | 	mov	arg01, #17
0abc4     08 14 06 F6 | 	mov	arg02, #8
0abc8     10 16 06 F6 | 	mov	arg03, #16
0abcc     F0 8F B0 FD | 	call	#_hg010b_spin2_setspritesize
0abd0     01 1E 06 F1 | 	add	local01, #1
0abd4     10 1E 56 F2 | 	cmps	local01, #16 wc
0abd8     74 FF 9F CD |  if_b	jmp	#LR__0862
0abdc     A7 F0 03 F6 | 	mov	ptra, fp
0abe0     B2 00 A0 FD | 	call	#popregs_
0abe4                 | _do_new_ret
0abe4     2D 00 64 FD | 	ret
0abe8                 | 
0abe8                 | ' 
0abe8                 | ' '----------------------- goto
0abe8                 | ' sub do_fast_goto
0abe8                 | _do_fast_goto
0abe8     02 4A 05 F6 | 	mov	COUNT_, #2
0abec     A8 00 A0 FD | 	call	#pushregs_
0abf0                 | _do_fast_goto_enter
0abf0     69 00 00 FF 
0abf4     54 E4 05 F1 | 	add	objptr, ##53844
0abf8     F2 12 02 FB | 	rdlong	arg01, objptr
0abfc     09 1F 02 F6 | 	mov	local01, arg01
0ac00     01 1E 66 F0 | 	shl	local01, #1
0ac04     09 1F 02 F1 | 	add	local01, arg01
0ac08     02 1E 66 F0 | 	shl	local01, #2
0ac0c     03 00 00 FF 
0ac10     04 E4 85 F1 | 	sub	objptr, ##1540
0ac14     F2 1E 02 F1 | 	add	local01, objptr
0ac18     0F 21 02 FB | 	rdlong	local02, local01
0ac1c     10 13 02 F6 | 	mov	arg01, local02
0ac20     66 00 00 FF 
0ac24     50 E4 85 F1 | 	sub	objptr, ##52304
0ac28     90 7B B0 FD | 	call	#_pslpeek
0ac2c     FD 12 02 F6 | 	mov	arg01, result1
0ac30                 | ' 
0ac30                 | ' testptr=compiledline(lineptr_e).result.uresult
0ac30                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0ac30                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0ac30     69 00 00 FF 
0ac34     54 E4 05 F1 | 	add	objptr, ##53844
0ac38     F2 FA 01 FB | 	rdlong	result1, objptr
0ac3c     FD 1E 02 F6 | 	mov	local01, result1
0ac40     01 1E 66 F0 | 	shl	local01, #1
0ac44     FD 1E 02 F1 | 	add	local01, result1
0ac48     02 1E 66 F0 | 	shl	local01, #2
0ac4c     03 00 00 FF 
0ac50     04 E4 85 F1 | 	sub	objptr, ##1540
0ac54     F2 1E 02 F1 | 	add	local01, objptr
0ac58     04 1E 06 F1 | 	add	local01, #4
0ac5c     0F 1F 02 FB | 	rdlong	local01, local01
0ac60     0F 13 0A F2 | 	cmp	arg01, local01 wz
0ac64     66 00 00 FF 
0ac68     50 E4 85 F1 | 	sub	objptr, ##52304
0ac6c     58 00 90 5D |  if_ne	jmp	#LR__0870
0ac70     78 00 00 FF 
0ac74     84 E5 05 F1 | 	add	objptr, ##61828
0ac78     F2 20 62 FC | 	wrlong	local02, objptr
0ac7c     0F 00 00 FF 
0ac80     34 E5 85 F1 | 	sub	objptr, ##7988
0ac84     F2 20 02 FB | 	rdlong	local02, objptr
0ac88     01 20 86 F1 | 	sub	local02, #1
0ac8c     04 E4 05 F1 | 	add	objptr, #4
0ac90     F2 20 62 FC | 	wrlong	local02, objptr
0ac94                 | '   runptr=testptr
0ac94                 | '   lineptr_e=lineptr-1
0ac94                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0ac94     0F 00 00 FF 
0ac98     54 E5 05 F1 | 	add	objptr, ##8020
0ac9c     F2 20 02 FB | 	rdlong	local02, objptr
0aca0     78 00 00 FF 
0aca4     A8 E5 85 F1 | 	sub	objptr, ##61864
0aca8     FF FF 3F FF 
0acac     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0acb0     78 00 00 AF 
0acb4     A8 E5 05 A1 |  if_e	add	objptr, ##61864
0acb8     F2 00 68 AC |  if_e	wrlong	#0, objptr
0acbc     78 00 00 AF 
0acc0     A8 E5 85 A1 |  if_e	sub	objptr, ##61864
0acc4     04 00 90 FD | 	jmp	#LR__0871
0acc8                 | LR__0870
0acc8     0C 00 B0 FD | 	call	#_do_find_goto
0accc                 | LR__0871
0accc     A7 F0 03 F6 | 	mov	ptra, fp
0acd0     B2 00 A0 FD | 	call	#popregs_
0acd4                 | _do_fast_goto_ret
0acd4     2D 00 64 FD | 	ret
0acd8                 | 
0acd8                 | ' 
0acd8                 | ' 
0acd8                 | ' 
0acd8                 | ' 
0acd8                 | ' sub do_find_goto
0acd8                 | _do_find_goto
0acd8     03 4A 05 F6 | 	mov	COUNT_, #3
0acdc     A8 00 A0 FD | 	call	#pushregs_
0ace0     24 F0 07 F1 | 	add	ptra, #36
0ace4                 | _do_find_goto_enter
0ace4     69 00 00 FF 
0ace8     54 E4 05 F1 | 	add	objptr, ##53844
0acec     F2 1E 02 FB | 	rdlong	local01, objptr
0acf0     0F 21 02 F6 | 	mov	local02, local01
0acf4     01 20 66 F0 | 	shl	local02, #1
0acf8     0F 21 02 F1 | 	add	local02, local01
0acfc     02 20 66 F0 | 	shl	local02, #2
0ad00     03 00 00 FF 
0ad04     04 E4 85 F1 | 	sub	objptr, ##1540
0ad08     F2 20 02 F1 | 	add	local02, objptr
0ad0c     04 20 06 F1 | 	add	local02, #4
0ad10     10 21 02 FB | 	rdlong	local02, local02
0ad14     A7 20 62 FC | 	wrlong	local02, fp
0ad18     03 00 00 FF 
0ad1c     08 E4 05 F1 | 	add	objptr, ##1544
0ad20     F2 22 02 FB | 	rdlong	local03, objptr
0ad24     69 00 00 FF 
0ad28     58 E4 85 F1 | 	sub	objptr, ##53848
0ad2c     04 4E 05 F1 | 	add	fp, #4
0ad30     A7 22 62 FC | 	wrlong	local03, fp
0ad34     04 4E 85 F1 | 	sub	fp, #4
0ad38                 | ' 
0ad38                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0ad38                 | '  ' print "find goto"                                                                     'print gotoline 
0ad38                 | ' gotoptr=programstart
0ad38                 | ' do
0ad38                 | LR__0880
0ad38     0C 4E 05 F1 | 	add	fp, #12
0ad3c     A7 12 02 F6 | 	mov	arg01, fp
0ad40     08 4E 85 F1 | 	sub	fp, #8
0ad44     A7 14 02 FB | 	rdlong	arg02, fp
0ad48     04 4E 85 F1 | 	sub	fp, #4
0ad4c     18 16 06 F6 | 	mov	arg03, #24
0ad50     0B 00 00 FF 
0ad54     C0 E4 05 F1 | 	add	objptr, ##5824
0ad58     1C A3 B0 FD | 	call	#_psram_spin2_read1
0ad5c     0B 00 00 FF 
0ad60     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad64                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0ad64                 | '   if gotoheader(0)<>$FFFFFFFF then
0ad64     0C 4E 05 F1 | 	add	fp, #12
0ad68     A7 22 02 FB | 	rdlong	local03, fp
0ad6c     0C 4E 85 F1 | 	sub	fp, #12
0ad70     FF FF 7F FF 
0ad74     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0ad78     24 00 90 AD |  if_e	jmp	#LR__0881
0ad7c     04 4E 05 F1 | 	add	fp, #4
0ad80     A7 22 02 FB | 	rdlong	local03, fp
0ad84     04 4E 05 F1 | 	add	fp, #4
0ad88     A7 22 62 FC | 	wrlong	local03, fp
0ad8c     18 4E 05 F1 | 	add	fp, #24
0ad90     A7 22 02 FB | 	rdlong	local03, fp
0ad94     1C 4E 85 F1 | 	sub	fp, #28
0ad98     A7 22 62 FC | 	wrlong	local03, fp
0ad9c     04 4E 85 F1 | 	sub	fp, #4
0ada0                 | LR__0881
0ada0     20 4E 05 F1 | 	add	fp, #32
0ada4     A7 22 02 FB | 	rdlong	local03, fp
0ada8     20 4E 85 F1 | 	sub	fp, #32
0adac     FF FF 3F FF 
0adb0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0adb4     0C 4E 05 51 |  if_ne	add	fp, #12
0adb8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0adbc     0C 4E 85 51 |  if_ne	sub	fp, #12
0adc0     FF FF 7F 5F 
0adc4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0adc8     18 00 90 AD |  if_e	jmp	#LR__0882
0adcc     0C 4E 05 F1 | 	add	fp, #12
0add0     A7 22 02 FB | 	rdlong	local03, fp
0add4     0C 4E 85 F1 | 	sub	fp, #12
0add8     A7 20 02 FB | 	rdlong	local02, fp
0addc     10 23 0A F2 | 	cmp	local03, local02 wz
0ade0     54 FF 9F 5D |  if_ne	jmp	#LR__0880
0ade4                 | LR__0882
0ade4                 | ' 
0ade4                 | ' if gotoheader(0)=gotoline then
0ade4     0C 4E 05 F1 | 	add	fp, #12
0ade8     A7 22 02 FB | 	rdlong	local03, fp
0adec     0C 4E 85 F1 | 	sub	fp, #12
0adf0     A7 1E 02 FB | 	rdlong	local01, fp
0adf4     0F 23 0A F2 | 	cmp	local03, local01 wz
0adf8     D8 00 90 5D |  if_ne	jmp	#LR__0883
0adfc     69 00 00 FF 
0ae00     54 E4 05 F1 | 	add	objptr, ##53844
0ae04     F2 1E 02 FB | 	rdlong	local01, objptr
0ae08     0F 21 02 F6 | 	mov	local02, local01
0ae0c     01 20 66 F0 | 	shl	local02, #1
0ae10     0F 21 02 F1 | 	add	local02, local01
0ae14     02 20 66 F0 | 	shl	local02, #2
0ae18     03 00 00 FF 
0ae1c     04 E4 85 F1 | 	sub	objptr, ##1540
0ae20     F2 20 02 F1 | 	add	local02, objptr
0ae24     08 4E 05 F1 | 	add	fp, #8
0ae28     A7 22 02 FB | 	rdlong	local03, fp
0ae2c     10 23 62 FC | 	wrlong	local03, local02
0ae30     03 00 00 FF 
0ae34     04 E4 05 F1 | 	add	objptr, ##1540
0ae38     F2 1E 02 FB | 	rdlong	local01, objptr
0ae3c     0F 21 02 F6 | 	mov	local02, local01
0ae40     01 20 66 F0 | 	shl	local02, #1
0ae44     0F 21 02 F1 | 	add	local02, local01
0ae48     02 20 66 F0 | 	shl	local02, #2
0ae4c     03 00 00 FF 
0ae50     04 E4 85 F1 | 	sub	objptr, ##1540
0ae54     F2 20 02 F1 | 	add	local02, objptr
0ae58     08 20 06 F1 | 	add	local02, #8
0ae5c     10 9D 68 FC | 	wrlong	#78, local02
0ae60     03 00 00 FF 
0ae64     04 E4 05 F1 | 	add	objptr, ##1540
0ae68     F2 20 02 FB | 	rdlong	local02, objptr
0ae6c     10 13 02 F6 | 	mov	arg01, local02
0ae70     01 12 66 F0 | 	shl	arg01, #1
0ae74     10 13 02 F1 | 	add	arg01, local02
0ae78     02 12 66 F0 | 	shl	arg01, #2
0ae7c     03 00 00 FF 
0ae80     04 E4 85 F1 | 	sub	objptr, ##1540
0ae84     F2 12 02 F1 | 	add	arg01, objptr
0ae88     12 00 00 FF 
0ae8c     3C E5 05 F1 | 	add	objptr, ##9532
0ae90     F2 14 02 FB | 	rdlong	arg02, objptr
0ae94     02 22 06 F6 | 	mov	local03, #2
0ae98     10 23 02 F1 | 	add	local03, local02
0ae9c     14 00 00 FF 
0aea0     54 E5 85 F1 | 	sub	objptr, ##10580
0aea4     F2 16 02 FB | 	rdlong	arg03, objptr
0aea8     0B 23 02 FD | 	qmul	local03, arg03
0aeac     08 4E 85 F1 | 	sub	fp, #8
0aeb0     58 00 00 FF 
0aeb4     78 E5 85 F1 | 	sub	objptr, ##45432
0aeb8     18 22 62 FD | 	getqx	local03
0aebc     11 15 02 F1 | 	add	arg02, local03
0aec0     50 A2 B0 FD | 	call	#_psram_spin2_write
0aec4     0B 00 00 FF 
0aec8     C0 E4 85 F1 | 	sub	objptr, ##5824
0aecc     18 FD BF FD | 	call	#_do_fast_goto
0aed0     08 00 90 FD | 	jmp	#LR__0884
0aed4                 | LR__0883
0aed4     26 12 06 F6 | 	mov	arg01, #38
0aed8     24 77 B0 FD | 	call	#_printerror
0aedc                 | LR__0884
0aedc     A7 F0 03 F6 | 	mov	ptra, fp
0aee0     B2 00 A0 FD | 	call	#popregs_
0aee4                 | _do_find_goto_ret
0aee4     2D 00 64 FD | 	ret
0aee8                 | 
0aee8                 | ' 
0aee8                 | ' sub do_slow_goto
0aee8                 | _do_slow_goto
0aee8                 | _do_slow_goto_ret
0aee8     2D 00 64 FD | 	ret
0aeec                 | 
0aeec                 | ' 
0aeec                 | ' '----------------------- Error processing
0aeec                 | ' 
0aeec                 | ' sub do_error
0aeec                 | _do_error
0aeec     01 4A 05 F6 | 	mov	COUNT_, #1
0aef0     A8 00 A0 FD | 	call	#pushregs_
0aef4     69 00 00 FF 
0aef8     54 E4 05 F1 | 	add	objptr, ##53844
0aefc     F2 18 02 FB | 	rdlong	arg04, objptr
0af00     0C 17 02 F6 | 	mov	arg03, arg04
0af04     01 16 66 F0 | 	shl	arg03, #1
0af08     0C 17 02 F1 | 	add	arg03, arg04
0af0c     02 16 66 F0 | 	shl	arg03, #2
0af10     03 00 00 FF 
0af14     04 E4 85 F1 | 	sub	objptr, ##1540
0af18     F2 16 02 F1 | 	add	arg03, objptr
0af1c     0B 1F 02 FB | 	rdlong	local01, arg03
0af20                 | ' r=compiledline(lineptr_e).result.uresult
0af20                 | ' print "Error ";r;": ";errors$(r)
0af20     00 12 06 F6 | 	mov	arg01, #0
0af24     66 00 00 FF 
0af28     50 E4 85 F1 | 	sub	objptr, ##52304
0af2c     E8 01 B1 FD | 	call	#__system___getiolock_0362
0af30     FD 12 02 F6 | 	mov	arg01, result1
0af34     2C AC B0 FD | 	call	#__system___lockmem
0af38     28 01 00 FF 
0af3c     63 15 06 F6 | 	mov	arg02, ##@LR__4371
0af40     00 12 06 F6 | 	mov	arg01, #0
0af44     00 16 06 F6 | 	mov	arg03, #0
0af48     0C B9 B0 FD | 	call	#__system___basic_print_string
0af4c     00 12 06 F6 | 	mov	arg01, #0
0af50     0F 15 02 F6 | 	mov	arg02, local01
0af54     00 16 06 F6 | 	mov	arg03, #0
0af58     0A 18 06 F6 | 	mov	arg04, #10
0af5c     7C B9 B0 FD | 	call	#__system___basic_print_unsigned
0af60     28 01 00 FF 
0af64     6A 15 06 F6 | 	mov	arg02, ##@LR__4372
0af68     00 12 06 F6 | 	mov	arg01, #0
0af6c     00 16 06 F6 | 	mov	arg03, #0
0af70     E4 B8 B0 FD | 	call	#__system___basic_print_string
0af74     02 1E 66 F0 | 	shl	local01, #2
0af78     64 00 00 FF 
0af7c     50 E4 05 F1 | 	add	objptr, ##51280
0af80     F2 1E 02 F1 | 	add	local01, objptr
0af84     0F 15 02 FB | 	rdlong	arg02, local01
0af88     00 12 06 F6 | 	mov	arg01, #0
0af8c     00 16 06 F6 | 	mov	arg03, #0
0af90     64 00 00 FF 
0af94     50 E4 85 F1 | 	sub	objptr, ##51280
0af98     BC B8 B0 FD | 	call	#__system___basic_print_string
0af9c     00 12 06 F6 | 	mov	arg01, #0
0afa0     0A 14 06 F6 | 	mov	arg02, #10
0afa4     00 16 06 F6 | 	mov	arg03, #0
0afa8     54 B8 B0 FD | 	call	#__system___basic_print_char
0afac     00 12 06 F6 | 	mov	arg01, #0
0afb0     64 01 B1 FD | 	call	#__system___getiolock_0362
0afb4     FD 00 68 FC | 	wrlong	#0, result1
0afb8     A7 F0 03 F6 | 	mov	ptra, fp
0afbc     B2 00 A0 FD | 	call	#popregs_
0afc0                 | _do_error_ret
0afc0     2D 00 64 FD | 	ret
0afc4                 | 
0afc4                 | ' 
0afc4                 | ' 
0afc4                 | ' '------------------ Assigning to a variable  
0afc4                 | ' 
0afc4                 | ' function  do_convertstring(psaddr as ulong) as string
0afc4                 | _do_convertstring
0afc4     04 4A 05 F6 | 	mov	COUNT_, #4
0afc8     A8 00 A0 FD | 	call	#pushregs_
0afcc     09 1F 02 F6 | 	mov	local01, arg01
0afd0     E8 77 B0 FD | 	call	#_pslpeek
0afd4     FD 20 02 F6 | 	mov	local02, result1
0afd8     28 01 00 FF 
0afdc     6D 23 06 F6 | 	mov	local03, ##@LR__4373
0afe0                 | ' 'print "in do_convertstring: psaddr=";psaddr
0afe0                 | ' l=pslpeek(psaddr)
0afe0                 | ' 'print "in do_convertstring: len=";l
0afe0                 | ' s="" 
0afe0                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0afe0     01 24 06 F6 | 	mov	local04, #1
0afe4     01 20 06 F1 | 	add	local02, #1
0afe8                 | LR__0890
0afe8     10 25 52 F2 | 	cmps	local04, local02 wc
0afec     30 00 90 3D |  if_ae	jmp	#LR__0891
0aff0     0F 13 02 F6 | 	mov	arg01, local01
0aff4     03 12 06 F1 | 	add	arg01, #3
0aff8     12 13 02 F1 | 	add	arg01, local04
0affc     64 77 B0 FD | 	call	#_pspeek
0b000     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0b004     30 CD B0 FD | 	call	#__system__Chr_S
0b008     FD 14 02 F6 | 	mov	arg02, result1
0b00c     11 13 02 F6 | 	mov	arg01, local03
0b010     AC AB B0 FD | 	call	#__system___string_concat
0b014     FD 22 02 F6 | 	mov	local03, result1
0b018     01 24 06 F1 | 	add	local04, #1
0b01c     C8 FF 9F FD | 	jmp	#LR__0890
0b020                 | LR__0891
0b020                 | ' 'print "in do_convertstring: str=";s
0b020                 | ' return s
0b020     11 FB 01 F6 | 	mov	result1, local03
0b024     A7 F0 03 F6 | 	mov	ptra, fp
0b028     B2 00 A0 FD | 	call	#popregs_
0b02c                 | _do_convertstring_ret
0b02c     2D 00 64 FD | 	ret
0b030                 | 
0b030                 | ' 
0b030                 | ' sub do_assign
0b030                 | _do_assign
0b030     05 4A 05 F6 | 	mov	COUNT_, #5
0b034     A8 00 A0 FD | 	call	#pushregs_
0b038     44 F0 07 F1 | 	add	ptra, #68
0b03c     69 00 00 FF 
0b040     54 E4 05 F1 | 	add	objptr, ##53844
0b044     F2 16 02 FB | 	rdlong	arg03, objptr
0b048     0B 15 02 F6 | 	mov	arg02, arg03
0b04c     01 14 66 F0 | 	shl	arg02, #1
0b050     0B 15 02 F1 | 	add	arg02, arg03
0b054     02 14 66 F0 | 	shl	arg02, #2
0b058     03 00 00 FF 
0b05c     04 E4 85 F1 | 	sub	objptr, ##1540
0b060     F2 14 02 F1 | 	add	arg02, objptr
0b064     0A 15 02 FB | 	rdlong	arg02, arg02
0b068     18 4E 05 F1 | 	add	fp, #24
0b06c     A7 14 62 FC | 	wrlong	arg02, fp
0b070                 | ' 
0b070                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0b070                 | ' 
0b070                 | ' if variables(varnum).vartype<array_no_type then 
0b070     18 4E 85 F1 | 	sub	fp, #24
0b074     04 14 66 F0 | 	shl	arg02, #4
0b078     32 00 00 FF 
0b07c     74 E4 85 F1 | 	sub	objptr, ##25716
0b080     F2 14 02 F1 | 	add	arg02, objptr
0b084     0C 14 06 F1 | 	add	arg02, #12
0b088     0A 17 02 FB | 	rdlong	arg03, arg02
0b08c     00 17 16 F2 | 	cmp	arg03, #256 wc
0b090     33 00 00 FF 
0b094     DC E5 85 F1 | 	sub	objptr, ##26588
0b098     18 01 90 3D |  if_ae	jmp	#LR__0900
0b09c     0C D9 BF FD | 	call	#_pop
0b0a0     A7 FA 61 FC | 	wrlong	result1, fp
0b0a4     04 4E 05 F1 | 	add	fp, #4
0b0a8     A7 FC 61 FC | 	wrlong	result2, fp
0b0ac     04 4E 05 F1 | 	add	fp, #4
0b0b0     A7 FE 61 FC | 	wrlong	result3, fp
0b0b4     08 4E 85 F1 | 	sub	fp, #8
0b0b8     A7 16 02 FB | 	rdlong	arg03, fp
0b0bc     04 4E 05 F1 | 	add	fp, #4
0b0c0     A7 14 02 FB | 	rdlong	arg02, fp
0b0c4     14 4E 05 F1 | 	add	fp, #20
0b0c8     A7 12 02 FB | 	rdlong	arg01, fp
0b0cc     04 12 66 F0 | 	shl	arg01, #4
0b0d0     33 00 00 FF 
0b0d4     DC E5 05 F1 | 	add	objptr, ##26588
0b0d8     F2 12 02 F1 | 	add	arg01, objptr
0b0dc     04 12 06 F1 | 	add	arg01, #4
0b0e0     09 17 62 FC | 	wrlong	arg03, arg01
0b0e4     A7 16 02 FB | 	rdlong	arg03, fp
0b0e8     04 16 66 F0 | 	shl	arg03, #4
0b0ec     F2 16 02 F1 | 	add	arg03, objptr
0b0f0     08 16 06 F1 | 	add	arg03, #8
0b0f4     0B 15 62 FC | 	wrlong	arg02, arg03
0b0f8     A7 16 02 FB | 	rdlong	arg03, fp
0b0fc     04 16 66 F0 | 	shl	arg03, #4
0b100     F2 16 02 F1 | 	add	arg03, objptr
0b104     10 4E 85 F1 | 	sub	fp, #16
0b108     A7 14 02 FB | 	rdlong	arg02, fp
0b10c     0C 16 06 F1 | 	add	arg03, #12
0b110     0B 15 62 FC | 	wrlong	arg02, arg03
0b114                 | '   t1=pop() : variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0b114                 | '   if variables(varnum).vartype<>result_string2 then return
0b114     10 4E 05 F1 | 	add	fp, #16
0b118     A7 16 02 FB | 	rdlong	arg03, fp
0b11c     18 4E 85 F1 | 	sub	fp, #24
0b120     04 16 66 F0 | 	shl	arg03, #4
0b124     F2 16 02 F1 | 	add	arg03, objptr
0b128     0C 16 06 F1 | 	add	arg03, #12
0b12c     0B 17 02 FB | 	rdlong	arg03, arg03
0b130     2B 16 0E F2 | 	cmp	arg03, #43 wz
0b134     33 00 00 FF 
0b138     DC E5 85 F1 | 	sub	objptr, ##26588
0b13c     9C 05 90 5D |  if_ne	jmp	#LR__0921
0b140     18 4E 05 F1 | 	add	fp, #24
0b144     A7 16 02 FB | 	rdlong	arg03, fp
0b148     0B 1F 02 F6 | 	mov	local01, arg03
0b14c     04 1E 66 F0 | 	shl	local01, #4
0b150     33 00 00 FF 
0b154     DC E5 05 F1 | 	add	objptr, ##26588
0b158     F2 1E 02 F1 | 	add	local01, objptr
0b15c     18 4E 85 F1 | 	sub	fp, #24
0b160     04 16 66 F0 | 	shl	arg03, #4
0b164     F2 16 02 F1 | 	add	arg03, objptr
0b168     04 16 06 F1 | 	add	arg03, #4
0b16c     0B 13 02 FB | 	rdlong	arg01, arg03
0b170     33 00 00 FF 
0b174     DC E5 85 F1 | 	sub	objptr, ##26588
0b178     48 FE BF FD | 	call	#_do_convertstring
0b17c     04 1E 06 F1 | 	add	local01, #4
0b180     0F FB 61 FC | 	wrlong	result1, local01
0b184     18 4E 05 F1 | 	add	fp, #24
0b188     A7 1E 02 FB | 	rdlong	local01, fp
0b18c     18 4E 85 F1 | 	sub	fp, #24
0b190     04 1E 66 F0 | 	shl	local01, #4
0b194     33 00 00 FF 
0b198     DC E5 05 F1 | 	add	objptr, ##26588
0b19c     F2 1E 02 F1 | 	add	local01, objptr
0b1a0     0C 1E 06 F1 | 	add	local01, #12
0b1a4     0F 3F 68 FC | 	wrlong	#31, local01
0b1a8                 | '   variables(varnum).value.sresult=do_convertstring(variables(varnum).value.uresult)
0b1a8                 | '   variables(varnum).vartype=result_string
0b1a8                 | '   return
0b1a8     33 00 00 FF 
0b1ac     DC E5 85 F1 | 	sub	objptr, ##26588
0b1b0     28 05 90 FD | 	jmp	#LR__0921
0b1b4                 | LR__0900
0b1b4                 | ' for i=0 to 2 : arrid(i)=0 : next i
0b1b4     1C 4E 05 F1 | 	add	fp, #28
0b1b8     A7 00 68 FC | 	wrlong	#0, fp
0b1bc     97 16 48 FB | 	callpa	#(@LR__0902-@LR__0901)>>2,fcache_load_ptr_
0b1c0                 | LR__0901
0b1c0     A7 1E 02 FB | 	rdlong	local01, fp
0b1c4     02 1E 66 F0 | 	shl	local01, #2
0b1c8     18 4E 05 F1 | 	add	fp, #24
0b1cc     A7 1E 02 F1 | 	add	local01, fp
0b1d0     0F 01 68 FC | 	wrlong	#0, local01
0b1d4     18 4E 85 F1 | 	sub	fp, #24
0b1d8     A7 1E 02 FB | 	rdlong	local01, fp
0b1dc     01 1E 06 F1 | 	add	local01, #1
0b1e0     A7 1E 62 FC | 	wrlong	local01, fp
0b1e4     03 1E 16 F2 | 	cmp	local01, #3 wc
0b1e8     D4 FF 9F CD |  if_b	jmp	#LR__0901
0b1ec                 | LR__0902
0b1ec     69 00 00 FF 
0b1f0     54 E4 05 F1 | 	add	objptr, ##53844
0b1f4     F2 16 02 FB | 	rdlong	arg03, objptr
0b1f8     0B 1F 02 F6 | 	mov	local01, arg03
0b1fc     01 1E 66 F0 | 	shl	local01, #1
0b200     0B 1F 02 F1 | 	add	local01, arg03
0b204     02 1E 66 F0 | 	shl	local01, #2
0b208     03 00 00 FF 
0b20c     04 E4 85 F1 | 	sub	objptr, ##1540
0b210     F2 1E 02 F1 | 	add	local01, objptr
0b214     04 1E 06 F1 | 	add	local01, #4
0b218     0F 21 02 FB | 	rdlong	local02, local01
0b21c     04 4E 05 F1 | 	add	fp, #4
0b220     A7 20 62 FC | 	wrlong	local02, fp
0b224     20 4E 85 F1 | 	sub	fp, #32
0b228     66 00 00 FF 
0b22c     50 E4 85 F1 | 	sub	objptr, ##52304
0b230     78 D7 BF FD | 	call	#_pop
0b234     A7 FA 61 FC | 	wrlong	result1, fp
0b238     04 4E 05 F1 | 	add	fp, #4
0b23c     A7 FC 61 FC | 	wrlong	result2, fp
0b240     04 4E 05 F1 | 	add	fp, #4
0b244     A7 FE 61 FC | 	wrlong	result3, fp
0b248                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0b248                 | ' t1=pop() ' var value
0b248                 | ' if numpar>0 then
0b248     18 4E 05 F1 | 	add	fp, #24
0b24c     A7 22 02 FB | 	rdlong	local03, fp
0b250     20 4E 85 F1 | 	sub	fp, #32
0b254     01 22 16 F2 | 	cmp	local03, #1 wc
0b258     70 00 90 CD |  if_b	jmp	#LR__0905
0b25c                 | '   for i=numpar to 1 step -1
0b25c     20 4E 05 F1 | 	add	fp, #32
0b260     A7 24 0A FB | 	rdlong	local04, fp wz
0b264     04 4E 85 F1 | 	sub	fp, #4
0b268     A7 24 62 FC | 	wrlong	local04, fp
0b26c     1C 4E 85 F1 | 	sub	fp, #28
0b270     58 00 90 AD |  if_e	jmp	#LR__0904
0b274                 | LR__0903
0b274     34 D7 BF FD | 	call	#_pop
0b278     0C 4E 05 F1 | 	add	fp, #12
0b27c     A7 FA 61 FC | 	wrlong	result1, fp
0b280     04 4E 05 F1 | 	add	fp, #4
0b284     A7 FC 61 FC | 	wrlong	result2, fp
0b288     04 4E 05 F1 | 	add	fp, #4
0b28c     A7 FE 61 FC | 	wrlong	result3, fp
0b290     08 4E 05 F1 | 	add	fp, #8
0b294     A7 22 02 FB | 	rdlong	local03, fp
0b298     01 22 86 F1 | 	sub	local03, #1
0b29c     02 22 66 F0 | 	shl	local03, #2
0b2a0     18 4E 05 F1 | 	add	fp, #24
0b2a4     A7 22 02 F1 | 	add	local03, fp
0b2a8     28 4E 85 F1 | 	sub	fp, #40
0b2ac     A7 24 02 FB | 	rdlong	local04, fp
0b2b0     11 25 62 FC | 	wrlong	local04, local03
0b2b4     10 4E 05 F1 | 	add	fp, #16
0b2b8     A7 24 02 FB | 	rdlong	local04, fp
0b2bc     01 24 8E F1 | 	sub	local04, #1 wz
0b2c0     A7 24 62 FC | 	wrlong	local04, fp
0b2c4     1C 4E 85 F1 | 	sub	fp, #28
0b2c8     A8 FF 9F 5D |  if_ne	jmp	#LR__0903
0b2cc                 | LR__0904
0b2cc                 | LR__0905
0b2cc     18 4E 05 F1 | 	add	fp, #24
0b2d0     A7 1E 02 FB | 	rdlong	local01, fp
0b2d4     04 1E 66 F0 | 	shl	local01, #4
0b2d8     33 00 00 FF 
0b2dc     DC E5 05 F1 | 	add	objptr, ##26588
0b2e0     F2 1E 02 F1 | 	add	local01, objptr
0b2e4     04 1E 06 F1 | 	add	local01, #4
0b2e8     0F 13 02 FB | 	rdlong	arg01, local01
0b2ec     0C 4E 05 F1 | 	add	fp, #12
0b2f0     A7 12 62 FC | 	wrlong	arg01, fp
0b2f4     24 4E 85 F1 | 	sub	fp, #36
0b2f8     33 00 00 FF 
0b2fc     DC E5 85 F1 | 	sub	objptr, ##26588
0b300     B8 74 B0 FD | 	call	#_pslpeek
0b304     FD 24 32 F9 | 	getword	local04, result1, #0
0b308     28 4E 05 F1 | 	add	fp, #40
0b30c     A7 24 62 FC | 	wrlong	local04, fp
0b310     04 4E 85 F1 | 	sub	fp, #4
0b314     A7 12 02 FB | 	rdlong	arg01, fp
0b318     24 4E 85 F1 | 	sub	fp, #36
0b31c     02 12 06 F1 | 	add	arg01, #2
0b320     40 74 B0 FD | 	call	#_pspeek
0b324     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b328     2C 4E 05 F1 | 	add	fp, #44
0b32c     A7 FA 61 FC | 	wrlong	result1, fp
0b330     08 4E 85 F1 | 	sub	fp, #8
0b334     A7 12 02 FB | 	rdlong	arg01, fp
0b338     09 25 02 F6 | 	mov	local04, arg01
0b33c     10 24 06 F1 | 	add	local04, #16
0b340     24 4E 85 F1 | 	sub	fp, #36
0b344     04 12 06 F1 | 	add	arg01, #4
0b348     70 74 B0 FD | 	call	#_pslpeek
0b34c     FD 1E 02 F6 | 	mov	local01, result1
0b350     38 4E 05 F1 | 	add	fp, #56
0b354     A7 20 02 FB | 	rdlong	local02, fp
0b358     10 1F 02 FD | 	qmul	local01, local02
0b35c     04 4E 85 F1 | 	sub	fp, #4
0b360     A7 22 02 FB | 	rdlong	local03, fp
0b364     10 4E 85 F1 | 	sub	fp, #16
0b368     A7 12 02 FB | 	rdlong	arg01, fp
0b36c     24 4E 85 F1 | 	sub	fp, #36
0b370     08 12 06 F1 | 	add	arg01, #8
0b374     18 20 62 FD | 	getqx	local02
0b378     10 23 02 F1 | 	add	local03, local02
0b37c     3C 74 B0 FD | 	call	#_pslpeek
0b380     FD 20 02 F6 | 	mov	local02, result1
0b384     24 4E 05 F1 | 	add	fp, #36
0b388     A7 12 02 FB | 	rdlong	arg01, fp
0b38c     24 4E 85 F1 | 	sub	fp, #36
0b390     04 12 06 F1 | 	add	arg01, #4
0b394     24 74 B0 FD | 	call	#_pslpeek
0b398     FD 20 02 FD | 	qmul	local02, result1
0b39c     3C 4E 05 F1 | 	add	fp, #60
0b3a0     A7 20 02 FB | 	rdlong	local02, fp
0b3a4     18 1E 62 FD | 	getqx	local01
0b3a8     10 1F 02 FD | 	qmul	local01, local02
0b3ac     10 4E 85 F1 | 	sub	fp, #16
0b3b0     A7 20 02 FB | 	rdlong	local02, fp
0b3b4     18 1E 62 FD | 	getqx	local01
0b3b8     0F 23 02 F1 | 	add	local03, local01
0b3bc     11 21 02 FD | 	qmul	local02, local03
0b3c0     04 4E 05 F1 | 	add	fp, #4
0b3c4                 | ' esize=pspeek(arrptr+2)
0b3c4                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0b3c4                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0b3c4                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0b3c4                 | ' 
0b3c4                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0b3c4                 | ' select case arrtype
0b3c4     18 22 62 FD | 	getqx	local03
0b3c8     11 25 02 F1 | 	add	local04, local03
0b3cc     A7 24 62 FC | 	wrlong	local04, fp
0b3d0     08 4E 85 F1 | 	sub	fp, #8
0b3d4     A7 26 02 FB | 	rdlong	local05, fp
0b3d8     28 4E 85 F1 | 	sub	fp, #40
0b3dc     00 27 86 F1 | 	sub	local05, #256
0b3e0     0C 26 26 F3 | 	fle	local05, #12
0b3e4     30 26 62 FD | 	jmprel	local05
0b3e8                 | LR__0906
0b3e8     30 00 90 FD | 	jmp	#LR__0907
0b3ec     58 00 90 FD | 	jmp	#LR__0908
0b3f0     88 00 90 FD | 	jmp	#LR__0909
0b3f4     B8 00 90 FD | 	jmp	#LR__0910
0b3f8     10 01 90 FD | 	jmp	#LR__0911
0b3fc     68 01 90 FD | 	jmp	#LR__0912
0b400     98 01 90 FD | 	jmp	#LR__0913
0b404     C8 01 90 FD | 	jmp	#LR__0914
0b408     F8 01 90 FD | 	jmp	#LR__0915
0b40c     28 02 90 FD | 	jmp	#LR__0916
0b410     58 02 90 FD | 	jmp	#LR__0917
0b414     88 02 90 FD | 	jmp	#LR__0918
0b418     B8 02 90 FD | 	jmp	#LR__0919
0b41c                 | LR__0907
0b41c     A7 12 02 F6 | 	mov	arg01, fp
0b420     30 4E 05 F1 | 	add	fp, #48
0b424     A7 14 02 FB | 	rdlong	arg02, fp
0b428     30 4E 85 F1 | 	sub	fp, #48
0b42c     0C 16 06 F6 | 	mov	arg03, #12
0b430     0B 00 00 FF 
0b434     C0 E4 05 F1 | 	add	objptr, ##5824
0b438     D8 9C B0 FD | 	call	#_psram_spin2_write
0b43c     0B 00 00 FF 
0b440     C0 E4 85 F1 | 	sub	objptr, ##5824
0b444     94 02 90 FD | 	jmp	#LR__0920
0b448                 | LR__0908
0b448     30 4E 05 F1 | 	add	fp, #48
0b44c     A7 12 02 FB | 	rdlong	arg01, fp
0b450     30 4E 85 F1 | 	sub	fp, #48
0b454     A7 14 02 FB | 	rdlong	arg02, fp
0b458     01 16 06 F6 | 	mov	arg03, #1
0b45c     00 18 06 F6 | 	mov	arg04, #0
0b460     0B 00 00 FF 
0b464     C0 E4 05 F1 | 	add	objptr, ##5824
0b468                 | '     return fill(addr, pattern, count, listPtr, 1)
0b468     01 1A 06 F6 | 	mov	arg05, #1
0b46c     40 9D B0 FD | 	call	#_psram_spin2_fill
0b470     0B 00 00 FF 
0b474     C0 E4 85 F1 | 	sub	objptr, ##5824
0b478     60 02 90 FD | 	jmp	#LR__0920
0b47c                 | LR__0909
0b47c     30 4E 05 F1 | 	add	fp, #48
0b480     A7 12 02 FB | 	rdlong	arg01, fp
0b484     30 4E 85 F1 | 	sub	fp, #48
0b488     A7 14 02 FB | 	rdlong	arg02, fp
0b48c     01 16 06 F6 | 	mov	arg03, #1
0b490     00 18 06 F6 | 	mov	arg04, #0
0b494     0B 00 00 FF 
0b498     C0 E4 05 F1 | 	add	objptr, ##5824
0b49c                 | '     return fill(addr, pattern, count, listPtr, 1)
0b49c     01 1A 06 F6 | 	mov	arg05, #1
0b4a0     0C 9D B0 FD | 	call	#_psram_spin2_fill
0b4a4     0B 00 00 FF 
0b4a8     C0 E4 85 F1 | 	sub	objptr, ##5824
0b4ac     2C 02 90 FD | 	jmp	#LR__0920
0b4b0                 | LR__0910
0b4b0     30 4E 05 F1 | 	add	fp, #48
0b4b4     A7 12 02 FB | 	rdlong	arg01, fp
0b4b8     30 4E 85 F1 | 	sub	fp, #48
0b4bc     A7 14 02 FB | 	rdlong	arg02, fp
0b4c0     01 16 06 F6 | 	mov	arg03, #1
0b4c4     00 18 06 F6 | 	mov	arg04, #0
0b4c8     0B 00 00 FF 
0b4cc     C0 E4 05 F1 | 	add	objptr, ##5824
0b4d0                 | '     return fill(addr, pattern, count, listPtr, 1)
0b4d0     01 1A 06 F6 | 	mov	arg05, #1
0b4d4     D8 9C B0 FD | 	call	#_psram_spin2_fill
0b4d8     30 4E 05 F1 | 	add	fp, #48
0b4dc     A7 12 02 FB | 	rdlong	arg01, fp
0b4e0     30 4E 85 F1 | 	sub	fp, #48
0b4e4     01 12 06 F1 | 	add	arg01, #1
0b4e8     A7 14 02 FB | 	rdlong	arg02, fp
0b4ec     08 14 46 F0 | 	shr	arg02, #8
0b4f0     01 16 06 F6 | 	mov	arg03, #1
0b4f4     00 18 06 F6 | 	mov	arg04, #0
0b4f8                 | '     return fill(addr, pattern, count, listPtr, 1)
0b4f8     01 1A 06 F6 | 	mov	arg05, #1
0b4fc     B0 9C B0 FD | 	call	#_psram_spin2_fill
0b500     0B 00 00 FF 
0b504     C0 E4 85 F1 | 	sub	objptr, ##5824
0b508     D0 01 90 FD | 	jmp	#LR__0920
0b50c                 | LR__0911
0b50c     30 4E 05 F1 | 	add	fp, #48
0b510     A7 12 02 FB | 	rdlong	arg01, fp
0b514     30 4E 85 F1 | 	sub	fp, #48
0b518     A7 14 02 FB | 	rdlong	arg02, fp
0b51c     01 16 06 F6 | 	mov	arg03, #1
0b520     00 18 06 F6 | 	mov	arg04, #0
0b524     0B 00 00 FF 
0b528     C0 E4 05 F1 | 	add	objptr, ##5824
0b52c                 | '     return fill(addr, pattern, count, listPtr, 1)
0b52c     01 1A 06 F6 | 	mov	arg05, #1
0b530     7C 9C B0 FD | 	call	#_psram_spin2_fill
0b534     30 4E 05 F1 | 	add	fp, #48
0b538     A7 12 02 FB | 	rdlong	arg01, fp
0b53c     30 4E 85 F1 | 	sub	fp, #48
0b540     01 12 06 F1 | 	add	arg01, #1
0b544     A7 14 02 FB | 	rdlong	arg02, fp
0b548     08 14 46 F0 | 	shr	arg02, #8
0b54c     01 16 06 F6 | 	mov	arg03, #1
0b550     00 18 06 F6 | 	mov	arg04, #0
0b554                 | '     return fill(addr, pattern, count, listPtr, 1)
0b554     01 1A 06 F6 | 	mov	arg05, #1
0b558     54 9C B0 FD | 	call	#_psram_spin2_fill
0b55c     0B 00 00 FF 
0b560     C0 E4 85 F1 | 	sub	objptr, ##5824
0b564     74 01 90 FD | 	jmp	#LR__0920
0b568                 | LR__0912
0b568     30 4E 05 F1 | 	add	fp, #48
0b56c     A7 12 02 FB | 	rdlong	arg01, fp
0b570     30 4E 85 F1 | 	sub	fp, #48
0b574     A7 14 02 FB | 	rdlong	arg02, fp
0b578     01 16 06 F6 | 	mov	arg03, #1
0b57c     00 18 06 F6 | 	mov	arg04, #0
0b580     0B 00 00 FF 
0b584     C0 E4 05 F1 | 	add	objptr, ##5824
0b588                 | '     return fill(addr, pattern, count, listPtr, 4)
0b588     04 1A 06 F6 | 	mov	arg05, #4
0b58c     20 9C B0 FD | 	call	#_psram_spin2_fill
0b590     0B 00 00 FF 
0b594     C0 E4 85 F1 | 	sub	objptr, ##5824
0b598     40 01 90 FD | 	jmp	#LR__0920
0b59c                 | LR__0913
0b59c     30 4E 05 F1 | 	add	fp, #48
0b5a0     A7 12 02 FB | 	rdlong	arg01, fp
0b5a4     30 4E 85 F1 | 	sub	fp, #48
0b5a8     A7 14 02 FB | 	rdlong	arg02, fp
0b5ac     01 16 06 F6 | 	mov	arg03, #1
0b5b0     00 18 06 F6 | 	mov	arg04, #0
0b5b4     0B 00 00 FF 
0b5b8     C0 E4 05 F1 | 	add	objptr, ##5824
0b5bc                 | '     return fill(addr, pattern, count, listPtr, 4)
0b5bc     04 1A 06 F6 | 	mov	arg05, #4
0b5c0     EC 9B B0 FD | 	call	#_psram_spin2_fill
0b5c4     0B 00 00 FF 
0b5c8     C0 E4 85 F1 | 	sub	objptr, ##5824
0b5cc     0C 01 90 FD | 	jmp	#LR__0920
0b5d0                 | LR__0914
0b5d0     30 4E 05 F1 | 	add	fp, #48
0b5d4     A7 12 02 FB | 	rdlong	arg01, fp
0b5d8     30 4E 85 F1 | 	sub	fp, #48
0b5dc     A7 14 02 FB | 	rdlong	arg02, fp
0b5e0     01 16 06 F6 | 	mov	arg03, #1
0b5e4     00 18 06 F6 | 	mov	arg04, #0
0b5e8     0B 00 00 FF 
0b5ec     C0 E4 05 F1 | 	add	objptr, ##5824
0b5f0                 | '     return fill(addr, pattern, count, listPtr, 4)
0b5f0     04 1A 06 F6 | 	mov	arg05, #4
0b5f4     B8 9B B0 FD | 	call	#_psram_spin2_fill
0b5f8     0B 00 00 FF 
0b5fc     C0 E4 85 F1 | 	sub	objptr, ##5824
0b600     D8 00 90 FD | 	jmp	#LR__0920
0b604                 | LR__0915
0b604     30 4E 05 F1 | 	add	fp, #48
0b608     A7 12 02 FB | 	rdlong	arg01, fp
0b60c     30 4E 85 F1 | 	sub	fp, #48
0b610     A7 14 02 FB | 	rdlong	arg02, fp
0b614     01 16 06 F6 | 	mov	arg03, #1
0b618     00 18 06 F6 | 	mov	arg04, #0
0b61c     0B 00 00 FF 
0b620     C0 E4 05 F1 | 	add	objptr, ##5824
0b624                 | '     return fill(addr, pattern, count, listPtr, 4)
0b624     04 1A 06 F6 | 	mov	arg05, #4
0b628     84 9B B0 FD | 	call	#_psram_spin2_fill
0b62c     0B 00 00 FF 
0b630     C0 E4 85 F1 | 	sub	objptr, ##5824
0b634     A4 00 90 FD | 	jmp	#LR__0920
0b638                 | LR__0916
0b638     30 4E 05 F1 | 	add	fp, #48
0b63c     A7 12 02 FB | 	rdlong	arg01, fp
0b640     30 4E 85 F1 | 	sub	fp, #48
0b644     A7 14 02 FB | 	rdlong	arg02, fp
0b648     01 16 06 F6 | 	mov	arg03, #1
0b64c     00 18 06 F6 | 	mov	arg04, #0
0b650     0B 00 00 FF 
0b654     C0 E4 05 F1 | 	add	objptr, ##5824
0b658                 | '     return fill(addr, pattern, count, listPtr, 4)
0b658     04 1A 06 F6 | 	mov	arg05, #4
0b65c     50 9B B0 FD | 	call	#_psram_spin2_fill
0b660     0B 00 00 FF 
0b664     C0 E4 85 F1 | 	sub	objptr, ##5824
0b668     70 00 90 FD | 	jmp	#LR__0920
0b66c                 | LR__0917
0b66c     30 4E 05 F1 | 	add	fp, #48
0b670     A7 12 02 FB | 	rdlong	arg01, fp
0b674     30 4E 85 F1 | 	sub	fp, #48
0b678     A7 14 02 FB | 	rdlong	arg02, fp
0b67c     01 16 06 F6 | 	mov	arg03, #1
0b680     00 18 06 F6 | 	mov	arg04, #0
0b684     0B 00 00 FF 
0b688     C0 E4 05 F1 | 	add	objptr, ##5824
0b68c                 | '     return fill(addr, pattern, count, listPtr, 4)
0b68c     04 1A 06 F6 | 	mov	arg05, #4
0b690     1C 9B B0 FD | 	call	#_psram_spin2_fill
0b694     0B 00 00 FF 
0b698     C0 E4 85 F1 | 	sub	objptr, ##5824
0b69c     3C 00 90 FD | 	jmp	#LR__0920
0b6a0                 | LR__0918
0b6a0     30 4E 05 F1 | 	add	fp, #48
0b6a4     A7 12 02 FB | 	rdlong	arg01, fp
0b6a8     30 4E 85 F1 | 	sub	fp, #48
0b6ac     A7 14 02 FB | 	rdlong	arg02, fp
0b6b0     01 16 06 F6 | 	mov	arg03, #1
0b6b4     00 18 06 F6 | 	mov	arg04, #0
0b6b8     0B 00 00 FF 
0b6bc     C0 E4 05 F1 | 	add	objptr, ##5824
0b6c0                 | '     return fill(addr, pattern, count, listPtr, 4)
0b6c0     04 1A 06 F6 | 	mov	arg05, #4
0b6c4     E8 9A B0 FD | 	call	#_psram_spin2_fill
0b6c8     0B 00 00 FF 
0b6cc     C0 E4 85 F1 | 	sub	objptr, ##5824
0b6d0     08 00 90 FD | 	jmp	#LR__0920
0b6d4                 | LR__0919
0b6d4     2F 12 06 F6 | 	mov	arg01, #47
0b6d8     24 6F B0 FD | 	call	#_printerror
0b6dc                 | LR__0920
0b6dc                 | LR__0921
0b6dc     A7 F0 03 F6 | 	mov	ptra, fp
0b6e0     B2 00 A0 FD | 	call	#popregs_
0b6e4                 | _do_assign_ret
0b6e4     2D 00 64 FD | 	ret
0b6e8                 | 
0b6e8                 | ' 
0b6e8                 | ' 
0b6e8                 | ' ' --------------------- Read a variable and push to the stack
0b6e8                 | ' 
0b6e8                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0b6e8                 | ' 
0b6e8                 | ' sub do_getvar
0b6e8                 | _do_getvar
0b6e8     04 4A 05 F6 | 	mov	COUNT_, #4
0b6ec     A8 00 A0 FD | 	call	#pushregs_
0b6f0     3C F0 07 F1 | 	add	ptra, #60
0b6f4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0b6f4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0b6f4     69 00 00 FF 
0b6f8     54 E4 05 F1 | 	add	objptr, ##53844
0b6fc     F2 1E 02 FB | 	rdlong	local01, objptr
0b700     0F 17 02 F6 | 	mov	arg03, local01
0b704     01 16 66 F0 | 	shl	arg03, #1
0b708     0F 17 02 F1 | 	add	arg03, local01
0b70c     02 16 66 F0 | 	shl	arg03, #2
0b710     03 00 00 FF 
0b714     04 E4 85 F1 | 	sub	objptr, ##1540
0b718     F2 16 02 F1 | 	add	arg03, objptr
0b71c     04 16 06 F1 | 	add	arg03, #4
0b720     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0b724     66 00 00 FF 
0b728     50 E4 85 F1 | 	sub	objptr, ##52304
0b72c     C4 00 90 5D |  if_ne	jmp	#LR__0931
0b730     69 00 00 FF 
0b734     54 E4 05 F1 | 	add	objptr, ##53844
0b738     F2 1E 02 FB | 	rdlong	local01, objptr
0b73c     0F 13 02 F6 | 	mov	arg01, local01
0b740     01 12 66 F0 | 	shl	arg01, #1
0b744     0F 13 02 F1 | 	add	arg01, local01
0b748     02 12 66 F0 | 	shl	arg01, #2
0b74c     03 00 00 FF 
0b750     04 E4 85 F1 | 	sub	objptr, ##1540
0b754     F2 12 02 F1 | 	add	arg01, objptr
0b758     09 1F 02 FB | 	rdlong	local01, arg01
0b75c     04 1E 66 F0 | 	shl	local01, #4
0b760     32 00 00 FF 
0b764     74 E4 85 F1 | 	sub	objptr, ##25716
0b768     F2 1E 02 F1 | 	add	local01, objptr
0b76c     04 1E 06 F1 | 	add	local01, #4
0b770     0F 13 02 FB | 	rdlong	arg01, local01
0b774     04 1E 06 F1 | 	add	local01, #4
0b778     0F 1F 02 FB | 	rdlong	local01, local01
0b77c     A7 12 62 FC | 	wrlong	arg01, fp
0b780     04 4E 05 F1 | 	add	fp, #4
0b784     A7 1E 62 FC | 	wrlong	local01, fp
0b788     35 00 00 FF 
0b78c     78 E4 05 F1 | 	add	objptr, ##27256
0b790     F2 1E 02 FB | 	rdlong	local01, objptr
0b794     0F 13 02 F6 | 	mov	arg01, local01
0b798     01 12 66 F0 | 	shl	arg01, #1
0b79c     0F 13 02 F1 | 	add	arg01, local01
0b7a0     02 12 66 F0 | 	shl	arg01, #2
0b7a4     03 00 00 FF 
0b7a8     04 E4 85 F1 | 	sub	objptr, ##1540
0b7ac     F2 12 02 F1 | 	add	arg01, objptr
0b7b0     09 1F 02 FB | 	rdlong	local01, arg01
0b7b4     04 1E 66 F0 | 	shl	local01, #4
0b7b8     32 00 00 FF 
0b7bc     74 E4 85 F1 | 	sub	objptr, ##25716
0b7c0     F2 1E 02 F1 | 	add	local01, objptr
0b7c4     0C 1E 06 F1 | 	add	local01, #12
0b7c8     0F 1F 02 FB | 	rdlong	local01, local01
0b7cc     04 4E 05 F1 | 	add	fp, #4
0b7d0     A7 1E 62 FC | 	wrlong	local01, fp
0b7d4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0b7d4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0b7d4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0b7d4     08 4E 85 F1 | 	sub	fp, #8
0b7d8     00 1F 16 F2 | 	cmp	local01, #256 wc
0b7dc     33 00 00 FF 
0b7e0     DC E5 85 F1 | 	sub	objptr, ##26588
0b7e4     0C 00 90 3D |  if_ae	jmp	#LR__0930
0b7e8     A7 12 02 F6 | 	mov	arg01, fp
0b7ec     54 D2 BF FD | 	call	#_push
0b7f0     74 04 90 FD | 	jmp	#LR__0952
0b7f4                 | LR__0930
0b7f4                 | LR__0931
0b7f4     69 00 00 FF 
0b7f8     54 E4 05 F1 | 	add	objptr, ##53844
0b7fc     F2 16 02 FB | 	rdlong	arg03, objptr
0b800     0B 15 02 F6 | 	mov	arg02, arg03
0b804     01 14 66 F0 | 	shl	arg02, #1
0b808     0B 15 02 F1 | 	add	arg02, arg03
0b80c     02 14 66 F0 | 	shl	arg02, #2
0b810     03 00 00 FF 
0b814     04 E4 85 F1 | 	sub	objptr, ##1540
0b818     F2 14 02 F1 | 	add	arg02, objptr
0b81c     0A 17 02 FB | 	rdlong	arg03, arg02
0b820     04 16 66 F0 | 	shl	arg03, #4
0b824     32 00 00 FF 
0b828     74 E4 85 F1 | 	sub	objptr, ##25716
0b82c     F2 16 02 F1 | 	add	arg03, objptr
0b830     04 16 06 F1 | 	add	arg03, #4
0b834     0B 13 02 FB | 	rdlong	arg01, arg03
0b838     0C 4E 05 F1 | 	add	fp, #12
0b83c     A7 12 62 FC | 	wrlong	arg01, fp
0b840     0C 4E 85 F1 | 	sub	fp, #12
0b844     33 00 00 FF 
0b848     DC E5 85 F1 | 	sub	objptr, ##26588
0b84c     6C 6F B0 FD | 	call	#_pslpeek
0b850     FD FA 31 F9 | 	getword	result1, result1, #0
0b854     10 4E 05 F1 | 	add	fp, #16
0b858     A7 FA 61 FC | 	wrlong	result1, fp
0b85c     69 00 00 FF 
0b860     54 E4 05 F1 | 	add	objptr, ##53844
0b864     F2 16 02 FB | 	rdlong	arg03, objptr
0b868     0B 15 02 F6 | 	mov	arg02, arg03
0b86c     01 14 66 F0 | 	shl	arg02, #1
0b870     0B 15 02 F1 | 	add	arg02, arg03
0b874     02 14 66 F0 | 	shl	arg02, #2
0b878     03 00 00 FF 
0b87c     04 E4 85 F1 | 	sub	objptr, ##1540
0b880     F2 14 02 F1 | 	add	arg02, objptr
0b884     04 14 06 F1 | 	add	arg02, #4
0b888     0A 17 02 FB | 	rdlong	arg03, arg02
0b88c     04 4E 05 F1 | 	add	fp, #4
0b890     A7 16 62 FC | 	wrlong	arg03, fp
0b894     08 4E 85 F1 | 	sub	fp, #8
0b898     A7 12 02 FB | 	rdlong	arg01, fp
0b89c     0C 4E 85 F1 | 	sub	fp, #12
0b8a0     02 12 06 F1 | 	add	arg01, #2
0b8a4     66 00 00 FF 
0b8a8     50 E4 85 F1 | 	sub	objptr, ##52304
0b8ac     B4 6E B0 FD | 	call	#_pspeek
0b8b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b8b4     18 4E 05 F1 | 	add	fp, #24
0b8b8     A7 FA 61 FC | 	wrlong	result1, fp
0b8bc     0C 4E 85 F1 | 	sub	fp, #12
0b8c0     A7 12 02 FB | 	rdlong	arg01, fp
0b8c4     0C 4E 85 F1 | 	sub	fp, #12
0b8c8     04 12 06 F1 | 	add	arg01, #4
0b8cc     EC 6E B0 FD | 	call	#_pslpeek
0b8d0     1C 4E 05 F1 | 	add	fp, #28
0b8d4     A7 FA 61 FC | 	wrlong	result1, fp
0b8d8     10 4E 85 F1 | 	sub	fp, #16
0b8dc     A7 12 02 FB | 	rdlong	arg01, fp
0b8e0     0C 4E 85 F1 | 	sub	fp, #12
0b8e4     08 12 06 F1 | 	add	arg01, #8
0b8e8     D0 6E B0 FD | 	call	#_pslpeek
0b8ec     20 4E 05 F1 | 	add	fp, #32
0b8f0     A7 FA 61 FC | 	wrlong	result1, fp
0b8f4     14 4E 85 F1 | 	sub	fp, #20
0b8f8     A7 12 02 FB | 	rdlong	arg01, fp
0b8fc     0C 4E 85 F1 | 	sub	fp, #12
0b900     0C 12 06 F1 | 	add	arg01, #12
0b904     B4 6E B0 FD | 	call	#_pslpeek
0b908     24 4E 05 F1 | 	add	fp, #36
0b90c     A7 FA 61 FC | 	wrlong	result1, fp
0b910                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0b910                 | ' esize=pspeek(arrptr+2)
0b910                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0b910                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0b910                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0b910                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult   else i3=0 
0b910     10 4E 85 F1 | 	sub	fp, #16
0b914     A7 16 02 FB | 	rdlong	arg03, fp
0b918     14 4E 85 F1 | 	sub	fp, #20
0b91c     03 16 16 F2 | 	cmp	arg03, #3 wc
0b920     30 00 90 CD |  if_b	jmp	#LR__0932
0b924     84 D0 BF FD | 	call	#_pop
0b928     A7 FA 61 FC | 	wrlong	result1, fp
0b92c     04 4E 05 F1 | 	add	fp, #4
0b930     A7 FC 61 FC | 	wrlong	result2, fp
0b934     04 4E 05 F1 | 	add	fp, #4
0b938     A7 FE 61 FC | 	wrlong	result3, fp
0b93c     08 4E 85 F1 | 	sub	fp, #8
0b940     A7 16 02 FB | 	rdlong	arg03, fp
0b944     30 4E 05 F1 | 	add	fp, #48
0b948     A7 16 62 FC | 	wrlong	arg03, fp
0b94c     30 4E 85 F1 | 	sub	fp, #48
0b950     0C 00 90 FD | 	jmp	#LR__0933
0b954                 | LR__0932
0b954     30 4E 05 F1 | 	add	fp, #48
0b958     A7 00 68 FC | 	wrlong	#0, fp
0b95c     30 4E 85 F1 | 	sub	fp, #48
0b960                 | LR__0933
0b960                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult   else i2=0 
0b960     14 4E 05 F1 | 	add	fp, #20
0b964     A7 16 02 FB | 	rdlong	arg03, fp
0b968     14 4E 85 F1 | 	sub	fp, #20
0b96c     02 16 16 F2 | 	cmp	arg03, #2 wc
0b970     30 00 90 CD |  if_b	jmp	#LR__0934
0b974     34 D0 BF FD | 	call	#_pop
0b978     A7 FA 61 FC | 	wrlong	result1, fp
0b97c     04 4E 05 F1 | 	add	fp, #4
0b980     A7 FC 61 FC | 	wrlong	result2, fp
0b984     04 4E 05 F1 | 	add	fp, #4
0b988     A7 FE 61 FC | 	wrlong	result3, fp
0b98c     08 4E 85 F1 | 	sub	fp, #8
0b990     A7 16 02 FB | 	rdlong	arg03, fp
0b994     2C 4E 05 F1 | 	add	fp, #44
0b998     A7 16 62 FC | 	wrlong	arg03, fp
0b99c     2C 4E 85 F1 | 	sub	fp, #44
0b9a0     0C 00 90 FD | 	jmp	#LR__0935
0b9a4                 | LR__0934
0b9a4     2C 4E 05 F1 | 	add	fp, #44
0b9a8     A7 00 68 FC | 	wrlong	#0, fp
0b9ac     2C 4E 85 F1 | 	sub	fp, #44
0b9b0                 | LR__0935
0b9b0                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult   else i1=0 
0b9b0     14 4E 05 F1 | 	add	fp, #20
0b9b4     A7 16 02 FB | 	rdlong	arg03, fp
0b9b8     14 4E 85 F1 | 	sub	fp, #20
0b9bc     01 16 16 F2 | 	cmp	arg03, #1 wc
0b9c0     30 00 90 CD |  if_b	jmp	#LR__0936
0b9c4     E4 CF BF FD | 	call	#_pop
0b9c8     A7 FA 61 FC | 	wrlong	result1, fp
0b9cc     04 4E 05 F1 | 	add	fp, #4
0b9d0     A7 FC 61 FC | 	wrlong	result2, fp
0b9d4     04 4E 05 F1 | 	add	fp, #4
0b9d8     A7 FE 61 FC | 	wrlong	result3, fp
0b9dc     08 4E 85 F1 | 	sub	fp, #8
0b9e0     A7 16 02 FB | 	rdlong	arg03, fp
0b9e4     28 4E 05 F1 | 	add	fp, #40
0b9e8     A7 16 62 FC | 	wrlong	arg03, fp
0b9ec     28 4E 85 F1 | 	sub	fp, #40
0b9f0     0C 00 90 FD | 	jmp	#LR__0937
0b9f4                 | LR__0936
0b9f4     28 4E 05 F1 | 	add	fp, #40
0b9f8     A7 00 68 FC | 	wrlong	#0, fp
0b9fc     28 4E 85 F1 | 	sub	fp, #40
0ba00                 | LR__0937
0ba00     0C 4E 05 F1 | 	add	fp, #12
0ba04     A7 20 02 FB | 	rdlong	local02, fp
0ba08     1C 4E 05 F1 | 	add	fp, #28
0ba0c     A7 22 02 FB | 	rdlong	local03, fp
0ba10     04 4E 05 F1 | 	add	fp, #4
0ba14     A7 FE 01 FB | 	rdlong	result3, fp
0ba18     10 4E 85 F1 | 	sub	fp, #16
0ba1c     A7 FC 01 FB | 	rdlong	result2, fp
0ba20     FE FE 01 FD | 	qmul	result3, result2
0ba24     10 20 06 F1 | 	add	local02, #16
0ba28     14 4E 05 F1 | 	add	fp, #20
0ba2c     A7 FE 01 FB | 	rdlong	result3, fp
0ba30     18 FA 61 FD | 	getqx	result1
0ba34     FE FE 01 FD | 	qmul	result3, result2
0ba38     FD 22 02 F1 | 	add	local03, result1
0ba3c     10 4E 85 F1 | 	sub	fp, #16
0ba40     A7 FC 01 FB | 	rdlong	result2, fp
0ba44     18 FE 61 FD | 	getqx	result3
0ba48     FE FE 01 FD | 	qmul	result3, result2
0ba4c     08 4E 85 F1 | 	sub	fp, #8
0ba50     A7 FC 01 FB | 	rdlong	result2, fp
0ba54     18 FE 61 FD | 	getqx	result3
0ba58     FF 22 02 F1 | 	add	local03, result3
0ba5c     FE 22 02 FD | 	qmul	local03, result2
0ba60     1C 4E 05 F1 | 	add	fp, #28
0ba64                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ba64                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0ba64                 | ' 
0ba64                 | ' select case vartype
0ba64     18 FE 61 FD | 	getqx	result3
0ba68     FF 20 02 F1 | 	add	local02, result3
0ba6c     A7 20 62 FC | 	wrlong	local02, fp
0ba70     24 4E 85 F1 | 	sub	fp, #36
0ba74     A7 24 02 FB | 	rdlong	local04, fp
0ba78     10 4E 85 F1 | 	sub	fp, #16
0ba7c     00 25 86 F1 | 	sub	local04, #256
0ba80     0C 24 26 F3 | 	fle	local04, #12
0ba84     30 24 62 FD | 	jmprel	local04
0ba88                 | LR__0938
0ba88     30 00 90 FD | 	jmp	#LR__0939
0ba8c     58 00 90 FD | 	jmp	#LR__0940
0ba90     8C 00 90 FD | 	jmp	#LR__0941
0ba94     AC 00 90 FD | 	jmp	#LR__0942
0ba98     E8 00 90 FD | 	jmp	#LR__0943
0ba9c     08 01 90 FD | 	jmp	#LR__0944
0baa0     24 01 90 FD | 	jmp	#LR__0945
0baa4     40 01 90 FD | 	jmp	#LR__0946
0baa8     50 01 90 FD | 	jmp	#LR__0947
0baac     60 01 90 FD | 	jmp	#LR__0948
0bab0     7C 01 90 FD | 	jmp	#LR__0949
0bab4     8C 01 90 FD | 	jmp	#LR__0950
0bab8     A4 01 90 FD | 	jmp	#LR__0951
0babc                 | LR__0939
0babc     A7 12 02 F6 | 	mov	arg01, fp
0bac0     34 4E 05 F1 | 	add	fp, #52
0bac4     A7 14 02 FB | 	rdlong	arg02, fp
0bac8     34 4E 85 F1 | 	sub	fp, #52
0bacc     0C 16 06 F6 | 	mov	arg03, #12
0bad0     0B 00 00 FF 
0bad4     C0 E4 05 F1 | 	add	objptr, ##5824
0bad8     9C 95 B0 FD | 	call	#_psram_spin2_read1
0badc     0B 00 00 FF 
0bae0     C0 E4 85 F1 | 	sub	objptr, ##5824
0bae4     78 01 90 FD | 	jmp	#LR__0951
0bae8                 | LR__0940
0bae8     08 4E 05 F1 | 	add	fp, #8
0baec     A7 38 68 FC | 	wrlong	#28, fp
0baf0     2C 4E 05 F1 | 	add	fp, #44
0baf4     A7 12 02 FB | 	rdlong	arg01, fp
0baf8     34 4E 85 F1 | 	sub	fp, #52
0bafc     64 6C B0 FD | 	call	#_pspeek
0bb00     FD FA E1 F8 | 	getbyte	result1, result1, #0
0bb04     A7 FA 61 FC | 	wrlong	result1, fp
0bb08     80 FA 15 F2 | 	cmp	result1, #128 wc
0bb0c     00 1F 66 36 |  if_ae	neg	local01, #256
0bb10     A7 22 02 3B |  if_ae	rdlong	local03, fp
0bb14     11 1F 42 35 |  if_ae	or	local01, local03
0bb18     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0bb1c     40 01 90 FD | 	jmp	#LR__0951
0bb20                 | LR__0941
0bb20     08 4E 05 F1 | 	add	fp, #8
0bb24     A7 3A 68 FC | 	wrlong	#29, fp
0bb28     2C 4E 05 F1 | 	add	fp, #44
0bb2c     A7 12 02 FB | 	rdlong	arg01, fp
0bb30     34 4E 85 F1 | 	sub	fp, #52
0bb34     2C 6C B0 FD | 	call	#_pspeek
0bb38     FD FA E1 F8 | 	getbyte	result1, result1, #0
0bb3c     A7 FA 61 FC | 	wrlong	result1, fp
0bb40     1C 01 90 FD | 	jmp	#LR__0951
0bb44                 | LR__0942
0bb44     08 4E 05 F1 | 	add	fp, #8
0bb48     A7 38 68 FC | 	wrlong	#28, fp
0bb4c     2C 4E 05 F1 | 	add	fp, #44
0bb50     A7 12 02 FB | 	rdlong	arg01, fp
0bb54     34 4E 85 F1 | 	sub	fp, #52
0bb58     60 6C B0 FD | 	call	#_pslpeek
0bb5c     FD FA 31 F9 | 	getword	result1, result1, #0
0bb60     A7 FA 61 FC | 	wrlong	result1, fp
0bb64     40 00 00 FF 
0bb68     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0bb6c     FF 7F 00 3F 
0bb70     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0bb74     A7 22 02 3B |  if_ae	rdlong	local03, fp
0bb78     11 1F 42 35 |  if_ae	or	local01, local03
0bb7c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0bb80     DC 00 90 FD | 	jmp	#LR__0951
0bb84                 | LR__0943
0bb84     08 4E 05 F1 | 	add	fp, #8
0bb88     A7 3A 68 FC | 	wrlong	#29, fp
0bb8c     2C 4E 05 F1 | 	add	fp, #44
0bb90     A7 12 02 FB | 	rdlong	arg01, fp
0bb94     34 4E 85 F1 | 	sub	fp, #52
0bb98     20 6C B0 FD | 	call	#_pslpeek
0bb9c     FD FA 31 F9 | 	getword	result1, result1, #0
0bba0     A7 FA 61 FC | 	wrlong	result1, fp
0bba4     B8 00 90 FD | 	jmp	#LR__0951
0bba8                 | LR__0944
0bba8     08 4E 05 F1 | 	add	fp, #8
0bbac     A7 38 68 FC | 	wrlong	#28, fp
0bbb0     2C 4E 05 F1 | 	add	fp, #44
0bbb4     A7 12 02 FB | 	rdlong	arg01, fp
0bbb8     34 4E 85 F1 | 	sub	fp, #52
0bbbc     FC 6B B0 FD | 	call	#_pslpeek
0bbc0     A7 FA 61 FC | 	wrlong	result1, fp
0bbc4     98 00 90 FD | 	jmp	#LR__0951
0bbc8                 | LR__0945
0bbc8     08 4E 05 F1 | 	add	fp, #8
0bbcc     A7 3A 68 FC | 	wrlong	#29, fp
0bbd0     2C 4E 05 F1 | 	add	fp, #44
0bbd4     A7 12 02 FB | 	rdlong	arg01, fp
0bbd8     34 4E 85 F1 | 	sub	fp, #52
0bbdc     DC 6B B0 FD | 	call	#_pslpeek
0bbe0     A7 FA 61 FC | 	wrlong	result1, fp
0bbe4     78 00 90 FD | 	jmp	#LR__0951
0bbe8                 | LR__0946
0bbe8     08 4E 05 F1 | 	add	fp, #8
0bbec     A7 FE 69 FC | 	wrlong	#255, fp
0bbf0     08 4E 85 F1 | 	sub	fp, #8
0bbf4     A7 60 68 FC | 	wrlong	#48, fp
0bbf8     64 00 90 FD | 	jmp	#LR__0951
0bbfc                 | LR__0947
0bbfc     08 4E 05 F1 | 	add	fp, #8
0bc00     A7 FE 69 FC | 	wrlong	#255, fp
0bc04     08 4E 85 F1 | 	sub	fp, #8
0bc08     A7 60 68 FC | 	wrlong	#48, fp
0bc0c     50 00 90 FD | 	jmp	#LR__0951
0bc10                 | LR__0948
0bc10     08 4E 05 F1 | 	add	fp, #8
0bc14     A7 3C 68 FC | 	wrlong	#30, fp
0bc18     2C 4E 05 F1 | 	add	fp, #44
0bc1c     A7 12 02 FB | 	rdlong	arg01, fp
0bc20     34 4E 85 F1 | 	sub	fp, #52
0bc24     94 6B B0 FD | 	call	#_pslpeek
0bc28     A7 FA 61 FC | 	wrlong	result1, fp
0bc2c     30 00 90 FD | 	jmp	#LR__0951
0bc30                 | LR__0949
0bc30     08 4E 05 F1 | 	add	fp, #8
0bc34     A7 FE 69 FC | 	wrlong	#255, fp
0bc38     08 4E 85 F1 | 	sub	fp, #8
0bc3c     A7 60 68 FC | 	wrlong	#48, fp
0bc40     1C 00 90 FD | 	jmp	#LR__0951
0bc44                 | LR__0950
0bc44     08 4E 05 F1 | 	add	fp, #8
0bc48     A7 3E 68 FC | 	wrlong	#31, fp
0bc4c     2C 4E 05 F1 | 	add	fp, #44
0bc50     A7 12 02 FB | 	rdlong	arg01, fp
0bc54     34 4E 85 F1 | 	sub	fp, #52
0bc58     60 6B B0 FD | 	call	#_pslpeek
0bc5c     A7 FA 61 FC | 	wrlong	result1, fp
0bc60                 | LR__0951
0bc60     A7 12 02 F6 | 	mov	arg01, fp
0bc64     DC CD BF FD | 	call	#_push
0bc68                 | LR__0952
0bc68     A7 F0 03 F6 | 	mov	ptra, fp
0bc6c     B2 00 A0 FD | 	call	#popregs_
0bc70                 | _do_getvar_ret
0bc70     2D 00 64 FD | 	ret
0bc74                 | 
0bc74                 | ' 
0bc74                 | ' '------------------------ Operators 
0bc74                 | ' 
0bc74                 | ' sub do_plus 
0bc74                 | _do_plus
0bc74     05 4A 05 F6 | 	mov	COUNT_, #5
0bc78     A8 00 A0 FD | 	call	#pushregs_
0bc7c     18 F0 07 F1 | 	add	ptra, #24
0bc80     28 CD BF FD | 	call	#_pop
0bc84     FD 1E 02 F6 | 	mov	local01, result1
0bc88     FE 20 02 F6 | 	mov	local02, result2
0bc8c     FF 22 02 F6 | 	mov	local03, result3
0bc90     0C 4E 05 F1 | 	add	fp, #12
0bc94     A7 1E 62 FC | 	wrlong	local01, fp
0bc98     04 4E 05 F1 | 	add	fp, #4
0bc9c     A7 20 62 FC | 	wrlong	local02, fp
0bca0     04 4E 05 F1 | 	add	fp, #4
0bca4     A7 22 62 FC | 	wrlong	local03, fp
0bca8     14 4E 85 F1 | 	sub	fp, #20
0bcac     FC CC BF FD | 	call	#_pop
0bcb0     FF 22 02 F6 | 	mov	local03, result3
0bcb4     A7 FA 61 FC | 	wrlong	result1, fp
0bcb8     04 4E 05 F1 | 	add	fp, #4
0bcbc     A7 FC 61 FC | 	wrlong	result2, fp
0bcc0     04 4E 05 F1 | 	add	fp, #4
0bcc4     A7 22 62 FC | 	wrlong	local03, fp
0bcc8                 | ' 
0bcc8                 | ' t2=pop()
0bcc8                 | ' t1=pop()
0bcc8                 | ' 
0bcc8                 | ' 
0bcc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0bcc8     08 4E 85 F1 | 	sub	fp, #8
0bccc     1D 22 0E F2 | 	cmp	local03, #29 wz
0bcd0     14 4E 05 A1 |  if_e	add	fp, #20
0bcd4     A7 24 02 AB |  if_e	rdlong	local04, fp
0bcd8     14 4E 85 A1 |  if_e	sub	fp, #20
0bcdc     12 23 02 A6 |  if_e	mov	local03, local04
0bce0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bce4     1C 00 90 5D |  if_ne	jmp	#LR__0960
0bce8     A7 1E 02 FB | 	rdlong	local01, fp
0bcec     0C 4E 05 F1 | 	add	fp, #12
0bcf0     A7 20 02 FB | 	rdlong	local02, fp
0bcf4     0C 4E 85 F1 | 	sub	fp, #12
0bcf8     10 1F 02 F1 | 	add	local01, local02
0bcfc     A7 1E 62 FC | 	wrlong	local01, fp
0bd00     3C 03 90 FD | 	jmp	#LR__0972
0bd04                 | LR__0960
0bd04                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0bd04     08 4E 05 F1 | 	add	fp, #8
0bd08     A7 1E 02 FB | 	rdlong	local01, fp
0bd0c     08 4E 85 F1 | 	sub	fp, #8
0bd10     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bd14     14 4E 05 A1 |  if_e	add	fp, #20
0bd18     A7 24 02 AB |  if_e	rdlong	local04, fp
0bd1c     14 4E 85 A1 |  if_e	sub	fp, #20
0bd20     12 23 02 A6 |  if_e	mov	local03, local04
0bd24     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bd28     28 00 90 5D |  if_ne	jmp	#LR__0961
0bd2c     A7 1E 02 FB | 	rdlong	local01, fp
0bd30     0C 4E 05 F1 | 	add	fp, #12
0bd34     A7 20 02 FB | 	rdlong	local02, fp
0bd38     0C 4E 85 F1 | 	sub	fp, #12
0bd3c     10 1F 02 F1 | 	add	local01, local02
0bd40     A7 1E 62 FC | 	wrlong	local01, fp
0bd44     08 4E 05 F1 | 	add	fp, #8
0bd48     A7 38 68 FC | 	wrlong	#28, fp
0bd4c     08 4E 85 F1 | 	sub	fp, #8
0bd50     EC 02 90 FD | 	jmp	#LR__0972
0bd54                 | LR__0961
0bd54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0bd54     08 4E 05 F1 | 	add	fp, #8
0bd58     A7 1E 02 FB | 	rdlong	local01, fp
0bd5c     08 4E 85 F1 | 	sub	fp, #8
0bd60     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bd64     14 4E 05 A1 |  if_e	add	fp, #20
0bd68     A7 24 02 AB |  if_e	rdlong	local04, fp
0bd6c     14 4E 85 A1 |  if_e	sub	fp, #20
0bd70     12 23 02 A6 |  if_e	mov	local03, local04
0bd74     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bd78     30 00 90 5D |  if_ne	jmp	#LR__0962
0bd7c     A7 12 02 FB | 	rdlong	arg01, fp
0bd80     C8 C4 B0 FD | 	call	#__system___float_fromuns
0bd84     FD 12 02 F6 | 	mov	arg01, result1
0bd88     0C 4E 05 F1 | 	add	fp, #12
0bd8c     A7 14 02 FB | 	rdlong	arg02, fp
0bd90     0C 4E 85 F1 | 	sub	fp, #12
0bd94     E8 C4 B0 FD | 	call	#__system___float_add
0bd98     A7 FA 61 FC | 	wrlong	result1, fp
0bd9c     08 4E 05 F1 | 	add	fp, #8
0bda0     A7 3C 68 FC | 	wrlong	#30, fp
0bda4     08 4E 85 F1 | 	sub	fp, #8
0bda8     94 02 90 FD | 	jmp	#LR__0972
0bdac                 | LR__0962
0bdac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0bdac     08 4E 05 F1 | 	add	fp, #8
0bdb0     A7 1E 02 FB | 	rdlong	local01, fp
0bdb4     08 4E 85 F1 | 	sub	fp, #8
0bdb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bdbc     14 4E 05 A1 |  if_e	add	fp, #20
0bdc0     A7 24 02 AB |  if_e	rdlong	local04, fp
0bdc4     14 4E 85 A1 |  if_e	sub	fp, #20
0bdc8     12 23 02 A6 |  if_e	mov	local03, local04
0bdcc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bdd0     1C 00 90 5D |  if_ne	jmp	#LR__0963
0bdd4     A7 1E 02 FB | 	rdlong	local01, fp
0bdd8     0C 4E 05 F1 | 	add	fp, #12
0bddc     A7 20 02 FB | 	rdlong	local02, fp
0bde0     0C 4E 85 F1 | 	sub	fp, #12
0bde4     10 1F 02 F1 | 	add	local01, local02
0bde8     A7 1E 62 FC | 	wrlong	local01, fp
0bdec     50 02 90 FD | 	jmp	#LR__0972
0bdf0                 | LR__0963
0bdf0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0bdf0     08 4E 05 F1 | 	add	fp, #8
0bdf4     A7 1E 02 FB | 	rdlong	local01, fp
0bdf8     08 4E 85 F1 | 	sub	fp, #8
0bdfc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0be00     14 4E 05 A1 |  if_e	add	fp, #20
0be04     A7 24 02 AB |  if_e	rdlong	local04, fp
0be08     14 4E 85 A1 |  if_e	sub	fp, #20
0be0c     12 23 02 A6 |  if_e	mov	local03, local04
0be10     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0be14     1C 00 90 5D |  if_ne	jmp	#LR__0964
0be18     A7 1E 02 FB | 	rdlong	local01, fp
0be1c     0C 4E 05 F1 | 	add	fp, #12
0be20     A7 20 02 FB | 	rdlong	local02, fp
0be24     0C 4E 85 F1 | 	sub	fp, #12
0be28     10 1F 02 F1 | 	add	local01, local02
0be2c     A7 1E 62 FC | 	wrlong	local01, fp
0be30     0C 02 90 FD | 	jmp	#LR__0972
0be34                 | LR__0964
0be34                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0be34     08 4E 05 F1 | 	add	fp, #8
0be38     A7 1E 02 FB | 	rdlong	local01, fp
0be3c     08 4E 85 F1 | 	sub	fp, #8
0be40     1C 1E 0E F2 | 	cmp	local01, #28 wz
0be44     14 4E 05 A1 |  if_e	add	fp, #20
0be48     A7 24 02 AB |  if_e	rdlong	local04, fp
0be4c     14 4E 85 A1 |  if_e	sub	fp, #20
0be50     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0be54     40 00 90 5D |  if_ne	jmp	#LR__0965
0be58     A7 12 02 FB | 	rdlong	arg01, fp
0be5c     09 13 52 F6 | 	abs	arg01, arg01 wc
0be60     1F 26 C6 C9 |  if_b	decod	local05, #31
0be64     00 26 06 36 |  if_ae	mov	local05, #0
0be68     E0 C3 B0 FD | 	call	#__system___float_fromuns
0be6c     13 FB 61 F5 | 	xor	result1, local05
0be70     FD 12 02 F6 | 	mov	arg01, result1
0be74     0C 4E 05 F1 | 	add	fp, #12
0be78     A7 14 02 FB | 	rdlong	arg02, fp
0be7c     0C 4E 85 F1 | 	sub	fp, #12
0be80     FC C3 B0 FD | 	call	#__system___float_add
0be84     A7 FA 61 FC | 	wrlong	result1, fp
0be88     08 4E 05 F1 | 	add	fp, #8
0be8c     A7 3C 68 FC | 	wrlong	#30, fp
0be90     08 4E 85 F1 | 	sub	fp, #8
0be94     A8 01 90 FD | 	jmp	#LR__0972
0be98                 | LR__0965
0be98                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0be98     08 4E 05 F1 | 	add	fp, #8
0be9c     A7 1E 02 FB | 	rdlong	local01, fp
0bea0     08 4E 85 F1 | 	sub	fp, #8
0bea4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bea8     14 4E 05 A1 |  if_e	add	fp, #20
0beac     A7 22 02 AB |  if_e	rdlong	local03, fp
0beb0     14 4E 85 A1 |  if_e	sub	fp, #20
0beb4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0beb8     28 00 90 5D |  if_ne	jmp	#LR__0966
0bebc     A7 1E 02 FB | 	rdlong	local01, fp
0bec0     0C 4E 05 F1 | 	add	fp, #12
0bec4     A7 12 02 FB | 	rdlong	arg01, fp
0bec8     0C 4E 85 F1 | 	sub	fp, #12
0becc     7C C3 B0 FD | 	call	#__system___float_fromuns
0bed0     FD 14 02 F6 | 	mov	arg02, result1
0bed4     0F 13 02 F6 | 	mov	arg01, local01
0bed8     A4 C3 B0 FD | 	call	#__system___float_add
0bedc     A7 FA 61 FC | 	wrlong	result1, fp
0bee0     5C 01 90 FD | 	jmp	#LR__0972
0bee4                 | LR__0966
0bee4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0bee4     08 4E 05 F1 | 	add	fp, #8
0bee8     A7 1E 02 FB | 	rdlong	local01, fp
0beec     08 4E 85 F1 | 	sub	fp, #8
0bef0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bef4     14 4E 05 A1 |  if_e	add	fp, #20
0bef8     A7 22 02 AB |  if_e	rdlong	local03, fp
0befc     14 4E 85 A1 |  if_e	sub	fp, #20
0bf00     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bf04     38 00 90 5D |  if_ne	jmp	#LR__0967
0bf08     A7 1E 02 FB | 	rdlong	local01, fp
0bf0c     0C 4E 05 F1 | 	add	fp, #12
0bf10     A7 12 02 FB | 	rdlong	arg01, fp
0bf14     0C 4E 85 F1 | 	sub	fp, #12
0bf18     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf1c     1F 26 C6 C9 |  if_b	decod	local05, #31
0bf20     00 26 06 36 |  if_ae	mov	local05, #0
0bf24     24 C3 B0 FD | 	call	#__system___float_fromuns
0bf28     13 FB 61 F5 | 	xor	result1, local05
0bf2c     FD 14 02 F6 | 	mov	arg02, result1
0bf30     0F 13 02 F6 | 	mov	arg01, local01
0bf34     48 C3 B0 FD | 	call	#__system___float_add
0bf38     A7 FA 61 FC | 	wrlong	result1, fp
0bf3c     00 01 90 FD | 	jmp	#LR__0972
0bf40                 | LR__0967
0bf40                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0bf40     08 4E 05 F1 | 	add	fp, #8
0bf44     A7 1E 02 FB | 	rdlong	local01, fp
0bf48     08 4E 85 F1 | 	sub	fp, #8
0bf4c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bf50     14 4E 05 A1 |  if_e	add	fp, #20
0bf54     A7 22 02 AB |  if_e	rdlong	local03, fp
0bf58     14 4E 85 A1 |  if_e	sub	fp, #20
0bf5c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bf60     1C 00 90 5D |  if_ne	jmp	#LR__0968
0bf64     A7 12 02 FB | 	rdlong	arg01, fp
0bf68     0C 4E 05 F1 | 	add	fp, #12
0bf6c     A7 14 02 FB | 	rdlong	arg02, fp
0bf70     0C 4E 85 F1 | 	sub	fp, #12
0bf74     08 C3 B0 FD | 	call	#__system___float_add
0bf78     A7 FA 61 FC | 	wrlong	result1, fp
0bf7c     C0 00 90 FD | 	jmp	#LR__0972
0bf80                 | LR__0968
0bf80                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0bf80     08 4E 05 F1 | 	add	fp, #8
0bf84     A7 1E 02 FB | 	rdlong	local01, fp
0bf88     08 4E 85 F1 | 	sub	fp, #8
0bf8c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0bf90     24 00 90 5D |  if_ne	jmp	#LR__0969
0bf94     14 4E 05 F1 | 	add	fp, #20
0bf98     A7 22 02 FB | 	rdlong	local03, fp
0bf9c     14 4E 85 F1 | 	sub	fp, #20
0bfa0     1F 22 0E F2 | 	cmp	local03, #31 wz
0bfa4     A7 04 68 5C |  if_ne	wrlong	#2, fp
0bfa8     08 4E 05 51 |  if_ne	add	fp, #8
0bfac     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0bfb0     08 4E 85 51 |  if_ne	sub	fp, #8
0bfb4     88 00 90 5D |  if_ne	jmp	#LR__0972
0bfb8                 | LR__0969
0bfb8                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0bfb8     14 4E 05 F1 | 	add	fp, #20
0bfbc     A7 1E 02 FB | 	rdlong	local01, fp
0bfc0     14 4E 85 F1 | 	sub	fp, #20
0bfc4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0bfc8     24 00 90 5D |  if_ne	jmp	#LR__0970
0bfcc     08 4E 05 F1 | 	add	fp, #8
0bfd0     A7 22 02 FB | 	rdlong	local03, fp
0bfd4     08 4E 85 F1 | 	sub	fp, #8
0bfd8     1F 22 0E F2 | 	cmp	local03, #31 wz
0bfdc     A7 04 68 5C |  if_ne	wrlong	#2, fp
0bfe0     08 4E 05 51 |  if_ne	add	fp, #8
0bfe4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0bfe8     08 4E 85 51 |  if_ne	sub	fp, #8
0bfec     50 00 90 5D |  if_ne	jmp	#LR__0972
0bff0                 | LR__0970
0bff0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0bff0     08 4E 05 F1 | 	add	fp, #8
0bff4     A7 1E 02 FB | 	rdlong	local01, fp
0bff8     08 4E 85 F1 | 	sub	fp, #8
0bffc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c000     14 4E 05 A1 |  if_e	add	fp, #20
0c004     A7 22 02 AB |  if_e	rdlong	local03, fp
0c008     14 4E 85 A1 |  if_e	sub	fp, #20
0c00c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0c010     1C 00 90 5D |  if_ne	jmp	#LR__0971
0c014     A7 12 02 FB | 	rdlong	arg01, fp
0c018     0C 4E 05 F1 | 	add	fp, #12
0c01c     A7 14 02 FB | 	rdlong	arg02, fp
0c020     0C 4E 85 F1 | 	sub	fp, #12
0c024     98 9B B0 FD | 	call	#__system___string_concat
0c028     A7 FA 61 FC | 	wrlong	result1, fp
0c02c     10 00 90 FD | 	jmp	#LR__0972
0c030                 | LR__0971
0c030     A7 08 68 FC | 	wrlong	#4, fp
0c034     08 4E 05 F1 | 	add	fp, #8
0c038     A7 FE 69 FC | 	wrlong	#255, fp
0c03c     08 4E 85 F1 | 	sub	fp, #8
0c040                 | LR__0972
0c040     A7 12 02 F6 | 	mov	arg01, fp
0c044     FC C9 BF FD | 	call	#_push
0c048     A7 F0 03 F6 | 	mov	ptra, fp
0c04c     B2 00 A0 FD | 	call	#popregs_
0c050                 | _do_plus_ret
0c050     2D 00 64 FD | 	ret
0c054                 | 
0c054                 | ' 
0c054                 | ' sub do_minus
0c054                 | _do_minus
0c054     05 4A 05 F6 | 	mov	COUNT_, #5
0c058     A8 00 A0 FD | 	call	#pushregs_
0c05c     18 F0 07 F1 | 	add	ptra, #24
0c060     48 C9 BF FD | 	call	#_pop
0c064     FD 1E 02 F6 | 	mov	local01, result1
0c068     FE 20 02 F6 | 	mov	local02, result2
0c06c     FF 22 02 F6 | 	mov	local03, result3
0c070     0C 4E 05 F1 | 	add	fp, #12
0c074     A7 1E 62 FC | 	wrlong	local01, fp
0c078     04 4E 05 F1 | 	add	fp, #4
0c07c     A7 20 62 FC | 	wrlong	local02, fp
0c080     04 4E 05 F1 | 	add	fp, #4
0c084     A7 22 62 FC | 	wrlong	local03, fp
0c088     14 4E 85 F1 | 	sub	fp, #20
0c08c     1C C9 BF FD | 	call	#_pop
0c090     FF 22 02 F6 | 	mov	local03, result3
0c094     A7 FA 61 FC | 	wrlong	result1, fp
0c098     04 4E 05 F1 | 	add	fp, #4
0c09c     A7 FC 61 FC | 	wrlong	result2, fp
0c0a0     04 4E 05 F1 | 	add	fp, #4
0c0a4     A7 22 62 FC | 	wrlong	local03, fp
0c0a8                 | ' 
0c0a8                 | ' t2=pop()
0c0a8                 | ' t1=pop()
0c0a8                 | ' 
0c0a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0c0a8     08 4E 85 F1 | 	sub	fp, #8
0c0ac     1D 22 0E F2 | 	cmp	local03, #29 wz
0c0b0     14 4E 05 A1 |  if_e	add	fp, #20
0c0b4     A7 24 02 AB |  if_e	rdlong	local04, fp
0c0b8     14 4E 85 A1 |  if_e	sub	fp, #20
0c0bc     12 23 02 A6 |  if_e	mov	local03, local04
0c0c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c0c4     5C 00 90 5D |  if_ne	jmp	#LR__0981
0c0c8                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0c0c8     0C 4E 05 F1 | 	add	fp, #12
0c0cc     A7 1E 02 FB | 	rdlong	local01, fp
0c0d0     0C 4E 85 F1 | 	sub	fp, #12
0c0d4     A7 22 02 FB | 	rdlong	local03, fp
0c0d8     11 1F 12 F2 | 	cmp	local01, local03 wc
0c0dc     1C 00 90 3D |  if_ae	jmp	#LR__0980
0c0e0     A7 1E 02 FB | 	rdlong	local01, fp
0c0e4     0C 4E 05 F1 | 	add	fp, #12
0c0e8     A7 20 02 FB | 	rdlong	local02, fp
0c0ec     0C 4E 85 F1 | 	sub	fp, #12
0c0f0     10 1F 82 F1 | 	sub	local01, local02
0c0f4     A7 1E 62 FC | 	wrlong	local01, fp
0c0f8     F4 02 90 FD | 	jmp	#LR__0990
0c0fc                 | LR__0980
0c0fc     A7 1E 02 FB | 	rdlong	local01, fp
0c100     0C 4E 05 F1 | 	add	fp, #12
0c104     A7 20 02 FB | 	rdlong	local02, fp
0c108     0C 4E 85 F1 | 	sub	fp, #12
0c10c     10 1F 82 F1 | 	sub	local01, local02
0c110     A7 1E 62 FC | 	wrlong	local01, fp
0c114     08 4E 05 F1 | 	add	fp, #8
0c118     A7 38 68 FC | 	wrlong	#28, fp
0c11c     08 4E 85 F1 | 	sub	fp, #8
0c120     CC 02 90 FD | 	jmp	#LR__0990
0c124                 | LR__0981
0c124                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0c124     08 4E 05 F1 | 	add	fp, #8
0c128     A7 1E 02 FB | 	rdlong	local01, fp
0c12c     08 4E 85 F1 | 	sub	fp, #8
0c130     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c134     14 4E 05 A1 |  if_e	add	fp, #20
0c138     A7 24 02 AB |  if_e	rdlong	local04, fp
0c13c     14 4E 85 A1 |  if_e	sub	fp, #20
0c140     12 23 02 A6 |  if_e	mov	local03, local04
0c144     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c148     28 00 90 5D |  if_ne	jmp	#LR__0982
0c14c     A7 1E 02 FB | 	rdlong	local01, fp
0c150     0C 4E 05 F1 | 	add	fp, #12
0c154     A7 20 02 FB | 	rdlong	local02, fp
0c158     0C 4E 85 F1 | 	sub	fp, #12
0c15c     10 1F 82 F1 | 	sub	local01, local02
0c160     A7 1E 62 FC | 	wrlong	local01, fp
0c164     08 4E 05 F1 | 	add	fp, #8
0c168     A7 38 68 FC | 	wrlong	#28, fp
0c16c     08 4E 85 F1 | 	sub	fp, #8
0c170     7C 02 90 FD | 	jmp	#LR__0990
0c174                 | LR__0982
0c174                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0c174     08 4E 05 F1 | 	add	fp, #8
0c178     A7 1E 02 FB | 	rdlong	local01, fp
0c17c     08 4E 85 F1 | 	sub	fp, #8
0c180     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c184     14 4E 05 A1 |  if_e	add	fp, #20
0c188     A7 24 02 AB |  if_e	rdlong	local04, fp
0c18c     14 4E 85 A1 |  if_e	sub	fp, #20
0c190     12 23 02 A6 |  if_e	mov	local03, local04
0c194     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c198     34 00 90 5D |  if_ne	jmp	#LR__0983
0c19c     A7 12 02 FB | 	rdlong	arg01, fp
0c1a0     A8 C0 B0 FD | 	call	#__system___float_fromuns
0c1a4     FD 12 02 F6 | 	mov	arg01, result1
0c1a8     0C 4E 05 F1 | 	add	fp, #12
0c1ac     A7 14 02 FB | 	rdlong	arg02, fp
0c1b0     0C 4E 85 F1 | 	sub	fp, #12
0c1b4     1F 14 E6 F4 | 	bitnot	arg02, #31
0c1b8     C4 C0 B0 FD | 	call	#__system___float_add
0c1bc     A7 FA 61 FC | 	wrlong	result1, fp
0c1c0     08 4E 05 F1 | 	add	fp, #8
0c1c4     A7 3C 68 FC | 	wrlong	#30, fp
0c1c8     08 4E 85 F1 | 	sub	fp, #8
0c1cc     20 02 90 FD | 	jmp	#LR__0990
0c1d0                 | LR__0983
0c1d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0c1d0     08 4E 05 F1 | 	add	fp, #8
0c1d4     A7 1E 02 FB | 	rdlong	local01, fp
0c1d8     08 4E 85 F1 | 	sub	fp, #8
0c1dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c1e0     14 4E 05 A1 |  if_e	add	fp, #20
0c1e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0c1e8     14 4E 85 A1 |  if_e	sub	fp, #20
0c1ec     12 23 02 A6 |  if_e	mov	local03, local04
0c1f0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c1f4     1C 00 90 5D |  if_ne	jmp	#LR__0984
0c1f8     A7 1E 02 FB | 	rdlong	local01, fp
0c1fc     0C 4E 05 F1 | 	add	fp, #12
0c200     A7 20 02 FB | 	rdlong	local02, fp
0c204     0C 4E 85 F1 | 	sub	fp, #12
0c208     10 1F 82 F1 | 	sub	local01, local02
0c20c     A7 1E 62 FC | 	wrlong	local01, fp
0c210     DC 01 90 FD | 	jmp	#LR__0990
0c214                 | LR__0984
0c214                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0c214     08 4E 05 F1 | 	add	fp, #8
0c218     A7 1E 02 FB | 	rdlong	local01, fp
0c21c     08 4E 85 F1 | 	sub	fp, #8
0c220     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c224     14 4E 05 A1 |  if_e	add	fp, #20
0c228     A7 24 02 AB |  if_e	rdlong	local04, fp
0c22c     14 4E 85 A1 |  if_e	sub	fp, #20
0c230     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0c234     1C 00 90 5D |  if_ne	jmp	#LR__0985
0c238     A7 1E 02 FB | 	rdlong	local01, fp
0c23c     0C 4E 05 F1 | 	add	fp, #12
0c240     A7 20 02 FB | 	rdlong	local02, fp
0c244     0C 4E 85 F1 | 	sub	fp, #12
0c248     10 1F 82 F1 | 	sub	local01, local02
0c24c     A7 1E 62 FC | 	wrlong	local01, fp
0c250     9C 01 90 FD | 	jmp	#LR__0990
0c254                 | LR__0985
0c254                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0c254     08 4E 05 F1 | 	add	fp, #8
0c258     A7 1E 02 FB | 	rdlong	local01, fp
0c25c     08 4E 85 F1 | 	sub	fp, #8
0c260     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c264     14 4E 05 A1 |  if_e	add	fp, #20
0c268     A7 22 02 AB |  if_e	rdlong	local03, fp
0c26c     14 4E 85 A1 |  if_e	sub	fp, #20
0c270     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c274     44 00 90 5D |  if_ne	jmp	#LR__0986
0c278     A7 12 02 FB | 	rdlong	arg01, fp
0c27c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c280     1F 26 C6 C9 |  if_b	decod	local05, #31
0c284     00 26 06 36 |  if_ae	mov	local05, #0
0c288     C0 BF B0 FD | 	call	#__system___float_fromuns
0c28c     13 FB 61 F5 | 	xor	result1, local05
0c290     FD 12 02 F6 | 	mov	arg01, result1
0c294     0C 4E 05 F1 | 	add	fp, #12
0c298     A7 14 02 FB | 	rdlong	arg02, fp
0c29c     0C 4E 85 F1 | 	sub	fp, #12
0c2a0     1F 14 E6 F4 | 	bitnot	arg02, #31
0c2a4     D8 BF B0 FD | 	call	#__system___float_add
0c2a8     A7 FA 61 FC | 	wrlong	result1, fp
0c2ac     08 4E 05 F1 | 	add	fp, #8
0c2b0     A7 3C 68 FC | 	wrlong	#30, fp
0c2b4     08 4E 85 F1 | 	sub	fp, #8
0c2b8     34 01 90 FD | 	jmp	#LR__0990
0c2bc                 | LR__0986
0c2bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0c2bc     08 4E 05 F1 | 	add	fp, #8
0c2c0     A7 1E 02 FB | 	rdlong	local01, fp
0c2c4     08 4E 85 F1 | 	sub	fp, #8
0c2c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c2cc     14 4E 05 A1 |  if_e	add	fp, #20
0c2d0     A7 22 02 AB |  if_e	rdlong	local03, fp
0c2d4     14 4E 85 A1 |  if_e	sub	fp, #20
0c2d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c2dc     2C 00 90 5D |  if_ne	jmp	#LR__0987
0c2e0     A7 1E 02 FB | 	rdlong	local01, fp
0c2e4     0C 4E 05 F1 | 	add	fp, #12
0c2e8     A7 12 02 FB | 	rdlong	arg01, fp
0c2ec     0C 4E 85 F1 | 	sub	fp, #12
0c2f0     58 BF B0 FD | 	call	#__system___float_fromuns
0c2f4     FD 14 02 F6 | 	mov	arg02, result1
0c2f8     0F 13 02 F6 | 	mov	arg01, local01
0c2fc     1F 14 E6 F4 | 	bitnot	arg02, #31
0c300     7C BF B0 FD | 	call	#__system___float_add
0c304     A7 FA 61 FC | 	wrlong	result1, fp
0c308     E4 00 90 FD | 	jmp	#LR__0990
0c30c                 | LR__0987
0c30c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0c30c     08 4E 05 F1 | 	add	fp, #8
0c310     A7 1E 02 FB | 	rdlong	local01, fp
0c314     08 4E 85 F1 | 	sub	fp, #8
0c318     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c31c     14 4E 05 A1 |  if_e	add	fp, #20
0c320     A7 22 02 AB |  if_e	rdlong	local03, fp
0c324     14 4E 85 A1 |  if_e	sub	fp, #20
0c328     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c32c     3C 00 90 5D |  if_ne	jmp	#LR__0988
0c330     A7 1E 02 FB | 	rdlong	local01, fp
0c334     0C 4E 05 F1 | 	add	fp, #12
0c338     A7 12 02 FB | 	rdlong	arg01, fp
0c33c     0C 4E 85 F1 | 	sub	fp, #12
0c340     09 13 52 F6 | 	abs	arg01, arg01 wc
0c344     1F 26 C6 C9 |  if_b	decod	local05, #31
0c348     00 26 06 36 |  if_ae	mov	local05, #0
0c34c     FC BE B0 FD | 	call	#__system___float_fromuns
0c350     13 FB 61 F5 | 	xor	result1, local05
0c354     FD 14 02 F6 | 	mov	arg02, result1
0c358     0F 13 02 F6 | 	mov	arg01, local01
0c35c     1F 14 E6 F4 | 	bitnot	arg02, #31
0c360     1C BF B0 FD | 	call	#__system___float_add
0c364     A7 FA 61 FC | 	wrlong	result1, fp
0c368     84 00 90 FD | 	jmp	#LR__0990
0c36c                 | LR__0988
0c36c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0c36c     08 4E 05 F1 | 	add	fp, #8
0c370     A7 1E 02 FB | 	rdlong	local01, fp
0c374     08 4E 85 F1 | 	sub	fp, #8
0c378     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c37c     14 4E 05 A1 |  if_e	add	fp, #20
0c380     A7 22 02 AB |  if_e	rdlong	local03, fp
0c384     14 4E 85 A1 |  if_e	sub	fp, #20
0c388     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c38c     20 00 90 5D |  if_ne	jmp	#LR__0989
0c390     A7 12 02 FB | 	rdlong	arg01, fp
0c394     0C 4E 05 F1 | 	add	fp, #12
0c398     A7 14 02 FB | 	rdlong	arg02, fp
0c39c     0C 4E 85 F1 | 	sub	fp, #12
0c3a0     1F 14 E6 F4 | 	bitnot	arg02, #31
0c3a4     D8 BE B0 FD | 	call	#__system___float_add
0c3a8     A7 FA 61 FC | 	wrlong	result1, fp
0c3ac     40 00 90 FD | 	jmp	#LR__0990
0c3b0                 | LR__0989
0c3b0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0c3b0     08 4E 05 F1 | 	add	fp, #8
0c3b4     A7 1E 02 FB | 	rdlong	local01, fp
0c3b8     08 4E 85 F1 | 	sub	fp, #8
0c3bc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c3c0     14 4E 05 51 |  if_ne	add	fp, #20
0c3c4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c3c8     14 4E 85 51 |  if_ne	sub	fp, #20
0c3cc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0c3d0     A7 06 68 AC |  if_e	wrlong	#3, fp
0c3d4     08 4E 05 A1 |  if_e	add	fp, #8
0c3d8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c3dc     08 4E 85 A1 |  if_e	sub	fp, #8
0c3e0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0c3e4     08 4E 05 51 |  if_ne	add	fp, #8
0c3e8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c3ec     08 4E 85 51 |  if_ne	sub	fp, #8
0c3f0                 | LR__0990
0c3f0     A7 12 02 F6 | 	mov	arg01, fp
0c3f4     4C C6 BF FD | 	call	#_push
0c3f8     A7 F0 03 F6 | 	mov	ptra, fp
0c3fc     B2 00 A0 FD | 	call	#popregs_
0c400                 | _do_minus_ret
0c400     2D 00 64 FD | 	ret
0c404                 | 
0c404                 | ' 
0c404                 | ' sub do_and 
0c404                 | _do_and
0c404     03 4A 05 F6 | 	mov	COUNT_, #3
0c408     A8 00 A0 FD | 	call	#pushregs_
0c40c     18 F0 07 F1 | 	add	ptra, #24
0c410     98 C5 BF FD | 	call	#_pop
0c414     FD 12 02 F6 | 	mov	arg01, result1
0c418     FE 1E 02 F6 | 	mov	local01, result2
0c41c     FF 20 02 F6 | 	mov	local02, result3
0c420     0C 4E 05 F1 | 	add	fp, #12
0c424     A7 12 62 FC | 	wrlong	arg01, fp
0c428     04 4E 05 F1 | 	add	fp, #4
0c42c     A7 1E 62 FC | 	wrlong	local01, fp
0c430     04 4E 05 F1 | 	add	fp, #4
0c434     A7 20 62 FC | 	wrlong	local02, fp
0c438     14 4E 85 F1 | 	sub	fp, #20
0c43c     6C C5 BF FD | 	call	#_pop
0c440     FF 22 02 F6 | 	mov	local03, result3
0c444     A7 FA 61 FC | 	wrlong	result1, fp
0c448     04 4E 05 F1 | 	add	fp, #4
0c44c     A7 FC 61 FC | 	wrlong	result2, fp
0c450     04 4E 05 F1 | 	add	fp, #4
0c454     A7 22 62 FC | 	wrlong	local03, fp
0c458                 | ' 
0c458                 | ' t2=pop()
0c458                 | ' t1=pop()
0c458                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c458     08 4E 85 F1 | 	sub	fp, #8
0c45c     1C 22 0E F2 | 	cmp	local03, #28 wz
0c460     A7 22 02 AB |  if_e	rdlong	local03, fp
0c464     A7 22 62 AC |  if_e	wrlong	local03, fp
0c468     08 4E 05 A1 |  if_e	add	fp, #8
0c46c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c470     08 4E 85 A1 |  if_e	sub	fp, #8
0c474                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c474     14 4E 05 F1 | 	add	fp, #20
0c478     A7 22 02 FB | 	rdlong	local03, fp
0c47c     14 4E 85 F1 | 	sub	fp, #20
0c480     1C 22 0E F2 | 	cmp	local03, #28 wz
0c484     18 00 90 5D |  if_ne	jmp	#LR__1000
0c488     0C 4E 05 F1 | 	add	fp, #12
0c48c     A7 22 02 FB | 	rdlong	local03, fp
0c490     A7 22 62 FC | 	wrlong	local03, fp
0c494     08 4E 05 F1 | 	add	fp, #8
0c498     A7 3A 68 FC | 	wrlong	#29, fp
0c49c     14 4E 85 F1 | 	sub	fp, #20
0c4a0                 | LR__1000
0c4a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0c4a0     08 4E 05 F1 | 	add	fp, #8
0c4a4     A7 22 02 FB | 	rdlong	local03, fp
0c4a8     08 4E 85 F1 | 	sub	fp, #8
0c4ac     1F 22 0E F2 | 	cmp	local03, #31 wz
0c4b0     14 4E 05 51 |  if_ne	add	fp, #20
0c4b4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c4b8     14 4E 85 51 |  if_ne	sub	fp, #20
0c4bc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c4c0     08 4E 05 51 |  if_ne	add	fp, #8
0c4c4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c4c8     08 4E 85 51 |  if_ne	sub	fp, #8
0c4cc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c4d0     14 4E 05 51 |  if_ne	add	fp, #20
0c4d4     14 4E 85 51 |  if_ne	sub	fp, #20
0c4d8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c4dc     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c4e0     08 4E 05 A1 |  if_e	add	fp, #8
0c4e4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c4e8     08 4E 85 A1 |  if_e	sub	fp, #8
0c4ec     18 00 90 AD |  if_e	jmp	#LR__1001
0c4f0     A7 22 02 FB | 	rdlong	local03, fp
0c4f4     0C 4E 05 F1 | 	add	fp, #12
0c4f8     A7 1E 02 FB | 	rdlong	local01, fp
0c4fc     0C 4E 85 F1 | 	sub	fp, #12
0c500     0F 23 02 F5 | 	and	local03, local01
0c504     A7 22 62 FC | 	wrlong	local03, fp
0c508                 | LR__1001
0c508     A7 12 02 F6 | 	mov	arg01, fp
0c50c     34 C5 BF FD | 	call	#_push
0c510     A7 F0 03 F6 | 	mov	ptra, fp
0c514     B2 00 A0 FD | 	call	#popregs_
0c518                 | _do_and_ret
0c518     2D 00 64 FD | 	ret
0c51c                 | 
0c51c                 | ' 
0c51c                 | ' sub do_or 
0c51c                 | _do_or
0c51c     03 4A 05 F6 | 	mov	COUNT_, #3
0c520     A8 00 A0 FD | 	call	#pushregs_
0c524     18 F0 07 F1 | 	add	ptra, #24
0c528     80 C4 BF FD | 	call	#_pop
0c52c     FD 12 02 F6 | 	mov	arg01, result1
0c530     FE 1E 02 F6 | 	mov	local01, result2
0c534     FF 20 02 F6 | 	mov	local02, result3
0c538     0C 4E 05 F1 | 	add	fp, #12
0c53c     A7 12 62 FC | 	wrlong	arg01, fp
0c540     04 4E 05 F1 | 	add	fp, #4
0c544     A7 1E 62 FC | 	wrlong	local01, fp
0c548     04 4E 05 F1 | 	add	fp, #4
0c54c     A7 20 62 FC | 	wrlong	local02, fp
0c550     14 4E 85 F1 | 	sub	fp, #20
0c554     54 C4 BF FD | 	call	#_pop
0c558     FF 22 02 F6 | 	mov	local03, result3
0c55c     A7 FA 61 FC | 	wrlong	result1, fp
0c560     04 4E 05 F1 | 	add	fp, #4
0c564     A7 FC 61 FC | 	wrlong	result2, fp
0c568     04 4E 05 F1 | 	add	fp, #4
0c56c     A7 22 62 FC | 	wrlong	local03, fp
0c570                 | ' 
0c570                 | ' t2=pop()
0c570                 | ' t1=pop()
0c570                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c570     08 4E 85 F1 | 	sub	fp, #8
0c574     1C 22 0E F2 | 	cmp	local03, #28 wz
0c578     A7 22 02 AB |  if_e	rdlong	local03, fp
0c57c     A7 22 62 AC |  if_e	wrlong	local03, fp
0c580     08 4E 05 A1 |  if_e	add	fp, #8
0c584     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c588     08 4E 85 A1 |  if_e	sub	fp, #8
0c58c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c58c     14 4E 05 F1 | 	add	fp, #20
0c590     A7 22 02 FB | 	rdlong	local03, fp
0c594     14 4E 85 F1 | 	sub	fp, #20
0c598     1C 22 0E F2 | 	cmp	local03, #28 wz
0c59c     18 00 90 5D |  if_ne	jmp	#LR__1010
0c5a0     0C 4E 05 F1 | 	add	fp, #12
0c5a4     A7 22 02 FB | 	rdlong	local03, fp
0c5a8     A7 22 62 FC | 	wrlong	local03, fp
0c5ac     08 4E 05 F1 | 	add	fp, #8
0c5b0     A7 3A 68 FC | 	wrlong	#29, fp
0c5b4     14 4E 85 F1 | 	sub	fp, #20
0c5b8                 | LR__1010
0c5b8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0c5b8     08 4E 05 F1 | 	add	fp, #8
0c5bc     A7 22 02 FB | 	rdlong	local03, fp
0c5c0     08 4E 85 F1 | 	sub	fp, #8
0c5c4     1F 22 0E F2 | 	cmp	local03, #31 wz
0c5c8     14 4E 05 51 |  if_ne	add	fp, #20
0c5cc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c5d0     14 4E 85 51 |  if_ne	sub	fp, #20
0c5d4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c5d8     08 4E 05 51 |  if_ne	add	fp, #8
0c5dc     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c5e0     08 4E 85 51 |  if_ne	sub	fp, #8
0c5e4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c5e8     14 4E 05 51 |  if_ne	add	fp, #20
0c5ec     14 4E 85 51 |  if_ne	sub	fp, #20
0c5f0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c5f4     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c5f8     08 4E 05 A1 |  if_e	add	fp, #8
0c5fc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c600     08 4E 85 A1 |  if_e	sub	fp, #8
0c604     18 00 90 AD |  if_e	jmp	#LR__1011
0c608     A7 22 02 FB | 	rdlong	local03, fp
0c60c     0C 4E 05 F1 | 	add	fp, #12
0c610     A7 1E 02 FB | 	rdlong	local01, fp
0c614     0C 4E 85 F1 | 	sub	fp, #12
0c618     0F 23 42 F5 | 	or	local03, local01
0c61c     A7 22 62 FC | 	wrlong	local03, fp
0c620                 | LR__1011
0c620     A7 12 02 F6 | 	mov	arg01, fp
0c624     1C C4 BF FD | 	call	#_push
0c628     A7 F0 03 F6 | 	mov	ptra, fp
0c62c     B2 00 A0 FD | 	call	#popregs_
0c630                 | _do_or_ret
0c630     2D 00 64 FD | 	ret
0c634                 | 
0c634                 | ' 
0c634                 | ' sub do_mul
0c634                 | _do_mul
0c634     05 4A 05 F6 | 	mov	COUNT_, #5
0c638     A8 00 A0 FD | 	call	#pushregs_
0c63c     18 F0 07 F1 | 	add	ptra, #24
0c640     68 C3 BF FD | 	call	#_pop
0c644     FD 1E 02 F6 | 	mov	local01, result1
0c648     FE 20 02 F6 | 	mov	local02, result2
0c64c     FF 22 02 F6 | 	mov	local03, result3
0c650     0C 4E 05 F1 | 	add	fp, #12
0c654     A7 1E 62 FC | 	wrlong	local01, fp
0c658     04 4E 05 F1 | 	add	fp, #4
0c65c     A7 20 62 FC | 	wrlong	local02, fp
0c660     04 4E 05 F1 | 	add	fp, #4
0c664     A7 22 62 FC | 	wrlong	local03, fp
0c668     14 4E 85 F1 | 	sub	fp, #20
0c66c     3C C3 BF FD | 	call	#_pop
0c670     FF 22 02 F6 | 	mov	local03, result3
0c674     A7 FA 61 FC | 	wrlong	result1, fp
0c678     04 4E 05 F1 | 	add	fp, #4
0c67c     A7 FC 61 FC | 	wrlong	result2, fp
0c680     04 4E 05 F1 | 	add	fp, #4
0c684     A7 22 62 FC | 	wrlong	local03, fp
0c688                 | ' 
0c688                 | ' t2=pop()
0c688                 | ' t1=pop()
0c688                 | ' 
0c688                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0c688     08 4E 85 F1 | 	sub	fp, #8
0c68c     1D 22 0E F2 | 	cmp	local03, #29 wz
0c690     14 4E 05 A1 |  if_e	add	fp, #20
0c694     A7 24 02 AB |  if_e	rdlong	local04, fp
0c698     14 4E 85 A1 |  if_e	sub	fp, #20
0c69c     12 23 02 A6 |  if_e	mov	local03, local04
0c6a0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c6a4     20 00 90 5D |  if_ne	jmp	#LR__1020
0c6a8     A7 20 02 FB | 	rdlong	local02, fp
0c6ac     0C 4E 05 F1 | 	add	fp, #12
0c6b0     A7 22 02 FB | 	rdlong	local03, fp
0c6b4     11 21 02 FD | 	qmul	local02, local03
0c6b8     0C 4E 85 F1 | 	sub	fp, #12
0c6bc     18 1E 62 FD | 	getqx	local01
0c6c0     A7 1E 62 FC | 	wrlong	local01, fp
0c6c4     C4 02 90 FD | 	jmp	#LR__1029
0c6c8                 | LR__1020
0c6c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0c6c8     08 4E 05 F1 | 	add	fp, #8
0c6cc     A7 1E 02 FB | 	rdlong	local01, fp
0c6d0     08 4E 85 F1 | 	sub	fp, #8
0c6d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c6d8     14 4E 05 A1 |  if_e	add	fp, #20
0c6dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0c6e0     14 4E 85 A1 |  if_e	sub	fp, #20
0c6e4     12 23 02 A6 |  if_e	mov	local03, local04
0c6e8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c6ec     2C 00 90 5D |  if_ne	jmp	#LR__1021
0c6f0     A7 20 02 FB | 	rdlong	local02, fp
0c6f4     0C 4E 05 F1 | 	add	fp, #12
0c6f8     A7 22 02 FB | 	rdlong	local03, fp
0c6fc     11 21 02 FD | 	qmul	local02, local03
0c700     0C 4E 85 F1 | 	sub	fp, #12
0c704     18 1E 62 FD | 	getqx	local01
0c708     A7 1E 62 FC | 	wrlong	local01, fp
0c70c     08 4E 05 F1 | 	add	fp, #8
0c710     A7 38 68 FC | 	wrlong	#28, fp
0c714     08 4E 85 F1 | 	sub	fp, #8
0c718     70 02 90 FD | 	jmp	#LR__1029
0c71c                 | LR__1021
0c71c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0c71c     08 4E 05 F1 | 	add	fp, #8
0c720     A7 1E 02 FB | 	rdlong	local01, fp
0c724     08 4E 85 F1 | 	sub	fp, #8
0c728     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c72c     14 4E 05 A1 |  if_e	add	fp, #20
0c730     A7 24 02 AB |  if_e	rdlong	local04, fp
0c734     14 4E 85 A1 |  if_e	sub	fp, #20
0c738     12 23 02 A6 |  if_e	mov	local03, local04
0c73c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c740     30 00 90 5D |  if_ne	jmp	#LR__1022
0c744     A7 12 02 FB | 	rdlong	arg01, fp
0c748     00 BB B0 FD | 	call	#__system___float_fromuns
0c74c     FD 12 02 F6 | 	mov	arg01, result1
0c750     0C 4E 05 F1 | 	add	fp, #12
0c754     A7 14 02 FB | 	rdlong	arg02, fp
0c758     0C 4E 85 F1 | 	sub	fp, #12
0c75c     18 BE B0 FD | 	call	#__system___float_mul
0c760     A7 FA 61 FC | 	wrlong	result1, fp
0c764     08 4E 05 F1 | 	add	fp, #8
0c768     A7 3C 68 FC | 	wrlong	#30, fp
0c76c     08 4E 85 F1 | 	sub	fp, #8
0c770     18 02 90 FD | 	jmp	#LR__1029
0c774                 | LR__1022
0c774                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0c774     08 4E 05 F1 | 	add	fp, #8
0c778     A7 1E 02 FB | 	rdlong	local01, fp
0c77c     08 4E 85 F1 | 	sub	fp, #8
0c780     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c784     14 4E 05 A1 |  if_e	add	fp, #20
0c788     A7 24 02 AB |  if_e	rdlong	local04, fp
0c78c     14 4E 85 A1 |  if_e	sub	fp, #20
0c790     12 23 02 A6 |  if_e	mov	local03, local04
0c794     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c798     20 00 90 5D |  if_ne	jmp	#LR__1023
0c79c     A7 20 02 FB | 	rdlong	local02, fp
0c7a0     0C 4E 05 F1 | 	add	fp, #12
0c7a4     A7 22 02 FB | 	rdlong	local03, fp
0c7a8     11 21 02 FD | 	qmul	local02, local03
0c7ac     0C 4E 85 F1 | 	sub	fp, #12
0c7b0     18 1E 62 FD | 	getqx	local01
0c7b4     A7 1E 62 FC | 	wrlong	local01, fp
0c7b8     D0 01 90 FD | 	jmp	#LR__1029
0c7bc                 | LR__1023
0c7bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0c7bc     08 4E 05 F1 | 	add	fp, #8
0c7c0     A7 1E 02 FB | 	rdlong	local01, fp
0c7c4     08 4E 85 F1 | 	sub	fp, #8
0c7c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c7cc     14 4E 05 A1 |  if_e	add	fp, #20
0c7d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0c7d4     14 4E 85 A1 |  if_e	sub	fp, #20
0c7d8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0c7dc     20 00 90 5D |  if_ne	jmp	#LR__1024
0c7e0     A7 20 02 FB | 	rdlong	local02, fp
0c7e4     0C 4E 05 F1 | 	add	fp, #12
0c7e8     A7 22 02 FB | 	rdlong	local03, fp
0c7ec     11 21 02 FD | 	qmul	local02, local03
0c7f0     0C 4E 85 F1 | 	sub	fp, #12
0c7f4     18 1E 62 FD | 	getqx	local01
0c7f8     A7 1E 62 FC | 	wrlong	local01, fp
0c7fc     8C 01 90 FD | 	jmp	#LR__1029
0c800                 | LR__1024
0c800                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0c800     08 4E 05 F1 | 	add	fp, #8
0c804     A7 1E 02 FB | 	rdlong	local01, fp
0c808     08 4E 85 F1 | 	sub	fp, #8
0c80c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c810     14 4E 05 A1 |  if_e	add	fp, #20
0c814     A7 22 02 AB |  if_e	rdlong	local03, fp
0c818     14 4E 85 A1 |  if_e	sub	fp, #20
0c81c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c820     40 00 90 5D |  if_ne	jmp	#LR__1025
0c824     A7 12 02 FB | 	rdlong	arg01, fp
0c828     09 13 52 F6 | 	abs	arg01, arg01 wc
0c82c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c830     00 26 06 36 |  if_ae	mov	local05, #0
0c834     14 BA B0 FD | 	call	#__system___float_fromuns
0c838     13 FB 61 F5 | 	xor	result1, local05
0c83c     FD 12 02 F6 | 	mov	arg01, result1
0c840     0C 4E 05 F1 | 	add	fp, #12
0c844     A7 14 02 FB | 	rdlong	arg02, fp
0c848     0C 4E 85 F1 | 	sub	fp, #12
0c84c     28 BD B0 FD | 	call	#__system___float_mul
0c850     A7 FA 61 FC | 	wrlong	result1, fp
0c854     08 4E 05 F1 | 	add	fp, #8
0c858     A7 3C 68 FC | 	wrlong	#30, fp
0c85c     08 4E 85 F1 | 	sub	fp, #8
0c860     28 01 90 FD | 	jmp	#LR__1029
0c864                 | LR__1025
0c864                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0c864     08 4E 05 F1 | 	add	fp, #8
0c868     A7 1E 02 FB | 	rdlong	local01, fp
0c86c     08 4E 85 F1 | 	sub	fp, #8
0c870     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c874     14 4E 05 A1 |  if_e	add	fp, #20
0c878     A7 22 02 AB |  if_e	rdlong	local03, fp
0c87c     14 4E 85 A1 |  if_e	sub	fp, #20
0c880     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c884     28 00 90 5D |  if_ne	jmp	#LR__1026
0c888     A7 1E 02 FB | 	rdlong	local01, fp
0c88c     0C 4E 05 F1 | 	add	fp, #12
0c890     A7 12 02 FB | 	rdlong	arg01, fp
0c894     0C 4E 85 F1 | 	sub	fp, #12
0c898     B0 B9 B0 FD | 	call	#__system___float_fromuns
0c89c     FD 14 02 F6 | 	mov	arg02, result1
0c8a0     0F 13 02 F6 | 	mov	arg01, local01
0c8a4     D0 BC B0 FD | 	call	#__system___float_mul
0c8a8     A7 FA 61 FC | 	wrlong	result1, fp
0c8ac     DC 00 90 FD | 	jmp	#LR__1029
0c8b0                 | LR__1026
0c8b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0c8b0     08 4E 05 F1 | 	add	fp, #8
0c8b4     A7 1E 02 FB | 	rdlong	local01, fp
0c8b8     08 4E 85 F1 | 	sub	fp, #8
0c8bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c8c0     14 4E 05 A1 |  if_e	add	fp, #20
0c8c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0c8c8     14 4E 85 A1 |  if_e	sub	fp, #20
0c8cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c8d0     38 00 90 5D |  if_ne	jmp	#LR__1027
0c8d4     A7 1E 02 FB | 	rdlong	local01, fp
0c8d8     0C 4E 05 F1 | 	add	fp, #12
0c8dc     A7 12 02 FB | 	rdlong	arg01, fp
0c8e0     0C 4E 85 F1 | 	sub	fp, #12
0c8e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c8e8     1F 26 C6 C9 |  if_b	decod	local05, #31
0c8ec     00 26 06 36 |  if_ae	mov	local05, #0
0c8f0     58 B9 B0 FD | 	call	#__system___float_fromuns
0c8f4     13 FB 61 F5 | 	xor	result1, local05
0c8f8     FD 14 02 F6 | 	mov	arg02, result1
0c8fc     0F 13 02 F6 | 	mov	arg01, local01
0c900     74 BC B0 FD | 	call	#__system___float_mul
0c904     A7 FA 61 FC | 	wrlong	result1, fp
0c908     80 00 90 FD | 	jmp	#LR__1029
0c90c                 | LR__1027
0c90c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0c90c     08 4E 05 F1 | 	add	fp, #8
0c910     A7 1E 02 FB | 	rdlong	local01, fp
0c914     08 4E 85 F1 | 	sub	fp, #8
0c918     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c91c     14 4E 05 A1 |  if_e	add	fp, #20
0c920     A7 22 02 AB |  if_e	rdlong	local03, fp
0c924     14 4E 85 A1 |  if_e	sub	fp, #20
0c928     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c92c     1C 00 90 5D |  if_ne	jmp	#LR__1028
0c930     A7 12 02 FB | 	rdlong	arg01, fp
0c934     0C 4E 05 F1 | 	add	fp, #12
0c938     A7 14 02 FB | 	rdlong	arg02, fp
0c93c     0C 4E 85 F1 | 	sub	fp, #12
0c940     34 BC B0 FD | 	call	#__system___float_mul
0c944     A7 FA 61 FC | 	wrlong	result1, fp
0c948     40 00 90 FD | 	jmp	#LR__1029
0c94c                 | LR__1028
0c94c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0c94c     08 4E 05 F1 | 	add	fp, #8
0c950     A7 1E 02 FB | 	rdlong	local01, fp
0c954     08 4E 85 F1 | 	sub	fp, #8
0c958     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c95c     14 4E 05 51 |  if_ne	add	fp, #20
0c960     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c964     14 4E 85 51 |  if_ne	sub	fp, #20
0c968     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0c96c     A7 10 68 AC |  if_e	wrlong	#8, fp
0c970     08 4E 05 A1 |  if_e	add	fp, #8
0c974     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c978     08 4E 85 A1 |  if_e	sub	fp, #8
0c97c     A7 12 68 5C |  if_ne	wrlong	#9, fp
0c980     08 4E 05 51 |  if_ne	add	fp, #8
0c984     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c988     08 4E 85 51 |  if_ne	sub	fp, #8
0c98c                 | LR__1029
0c98c     A7 12 02 F6 | 	mov	arg01, fp
0c990     B0 C0 BF FD | 	call	#_push
0c994     A7 F0 03 F6 | 	mov	ptra, fp
0c998     B2 00 A0 FD | 	call	#popregs_
0c99c                 | _do_mul_ret
0c99c     2D 00 64 FD | 	ret
0c9a0                 | 
0c9a0                 | ' 
0c9a0                 | ' sub do_div 
0c9a0                 | _do_div
0c9a0     01 4A 05 F6 | 	mov	COUNT_, #1
0c9a4     A8 00 A0 FD | 	call	#pushregs_
0c9a8     18 F0 07 F1 | 	add	ptra, #24
0c9ac     FC BF BF FD | 	call	#_pop
0c9b0     FD 60 02 F6 | 	mov	muldivb_, result1
0c9b4     FE 5E 02 F6 | 	mov	muldiva_, result2
0c9b8     FF 1E 02 F6 | 	mov	local01, result3
0c9bc     0C 4E 05 F1 | 	add	fp, #12
0c9c0     A7 60 62 FC | 	wrlong	muldivb_, fp
0c9c4     04 4E 05 F1 | 	add	fp, #4
0c9c8     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c9cc     04 4E 05 F1 | 	add	fp, #4
0c9d0     A7 1E 62 FC | 	wrlong	local01, fp
0c9d4     14 4E 85 F1 | 	sub	fp, #20
0c9d8     D0 BF BF FD | 	call	#_pop
0c9dc     A7 FA 61 FC | 	wrlong	result1, fp
0c9e0     04 4E 05 F1 | 	add	fp, #4
0c9e4     A7 FC 61 FC | 	wrlong	result2, fp
0c9e8     04 4E 05 F1 | 	add	fp, #4
0c9ec     A7 FE 61 FC | 	wrlong	result3, fp
0c9f0                 | ' 
0c9f0                 | ' t2=pop()
0c9f0                 | ' t1=pop()
0c9f0                 | ' 
0c9f0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0c9f0     08 4E 85 F1 | 	sub	fp, #8
0c9f4     1F FE 0D F2 | 	cmp	result3, #31 wz
0c9f8     14 4E 05 51 |  if_ne	add	fp, #20
0c9fc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0ca00     14 4E 85 51 |  if_ne	sub	fp, #20
0ca04     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0ca08     A7 14 68 AC |  if_e	wrlong	#10, fp
0ca0c     08 4E 05 A1 |  if_e	add	fp, #8
0ca10     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ca14     08 4E 85 A1 |  if_e	sub	fp, #8
0ca18     90 01 90 AD |  if_e	jmp	#LR__1036
0ca1c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0ca1c     08 4E 05 F1 | 	add	fp, #8
0ca20     A7 60 02 FB | 	rdlong	muldivb_, fp
0ca24     08 4E 85 F1 | 	sub	fp, #8
0ca28     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0ca2c     1C 00 90 5D |  if_ne	jmp	#LR__1030
0ca30     08 4E 05 F1 | 	add	fp, #8
0ca34     A7 38 68 FC | 	wrlong	#28, fp
0ca38     08 4E 85 F1 | 	sub	fp, #8
0ca3c     A7 12 02 FB | 	rdlong	arg01, fp
0ca40     00 14 06 F6 | 	mov	arg02, #0
0ca44     F8 BF B0 FD | 	call	#__system___float_tointeger
0ca48     A7 FA 61 FC | 	wrlong	result1, fp
0ca4c                 | LR__1030
0ca4c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0ca4c     14 4E 05 F1 | 	add	fp, #20
0ca50     A7 60 02 FB | 	rdlong	muldivb_, fp
0ca54     14 4E 85 F1 | 	sub	fp, #20
0ca58     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0ca5c     28 00 90 5D |  if_ne	jmp	#LR__1031
0ca60     14 4E 05 F1 | 	add	fp, #20
0ca64     A7 38 68 FC | 	wrlong	#28, fp
0ca68     08 4E 85 F1 | 	sub	fp, #8
0ca6c     A7 12 02 FB | 	rdlong	arg01, fp
0ca70     0C 4E 85 F1 | 	sub	fp, #12
0ca74     00 14 06 F6 | 	mov	arg02, #0
0ca78     C4 BF B0 FD | 	call	#__system___float_tointeger
0ca7c     0C 4E 05 F1 | 	add	fp, #12
0ca80     A7 FA 61 FC | 	wrlong	result1, fp
0ca84     0C 4E 85 F1 | 	sub	fp, #12
0ca88                 | LR__1031
0ca88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0ca88     08 4E 05 F1 | 	add	fp, #8
0ca8c     A7 60 02 FB | 	rdlong	muldivb_, fp
0ca90     08 4E 85 F1 | 	sub	fp, #8
0ca94     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0ca98     14 4E 05 A1 |  if_e	add	fp, #20
0ca9c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0caa0     14 4E 85 A1 |  if_e	sub	fp, #20
0caa4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0caa8     20 00 90 5D |  if_ne	jmp	#LR__1032
0caac     0C 4E 05 F1 | 	add	fp, #12
0cab0     A7 1E 02 FB | 	rdlong	local01, fp
0cab4     0C 4E 85 F1 | 	sub	fp, #12
0cab8     A7 60 02 FB | 	rdlong	muldivb_, fp
0cabc     0F 61 12 FD | 	qdiv	muldivb_, local01
0cac0     18 1E 62 FD | 	getqx	local01
0cac4     A7 1E 62 FC | 	wrlong	local01, fp
0cac8     E0 00 90 FD | 	jmp	#LR__1036
0cacc                 | LR__1032
0cacc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0cacc     08 4E 05 F1 | 	add	fp, #8
0cad0     A7 60 02 FB | 	rdlong	muldivb_, fp
0cad4     08 4E 85 F1 | 	sub	fp, #8
0cad8     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0cadc     14 4E 05 A1 |  if_e	add	fp, #20
0cae0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0cae4     14 4E 85 A1 |  if_e	sub	fp, #20
0cae8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0caec     2C 00 90 5D |  if_ne	jmp	#LR__1033
0caf0     0C 4E 05 F1 | 	add	fp, #12
0caf4     A7 1E 02 FB | 	rdlong	local01, fp
0caf8     0C 4E 85 F1 | 	sub	fp, #12
0cafc     A7 60 02 FB | 	rdlong	muldivb_, fp
0cb00     0F 61 12 FD | 	qdiv	muldivb_, local01
0cb04     18 1E 62 FD | 	getqx	local01
0cb08     A7 1E 62 FC | 	wrlong	local01, fp
0cb0c     08 4E 05 F1 | 	add	fp, #8
0cb10     A7 38 68 FC | 	wrlong	#28, fp
0cb14     08 4E 85 F1 | 	sub	fp, #8
0cb18     90 00 90 FD | 	jmp	#LR__1036
0cb1c                 | LR__1033
0cb1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0cb1c     08 4E 05 F1 | 	add	fp, #8
0cb20     A7 60 02 FB | 	rdlong	muldivb_, fp
0cb24     08 4E 85 F1 | 	sub	fp, #8
0cb28     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0cb2c     14 4E 05 A1 |  if_e	add	fp, #20
0cb30     A7 1E 02 AB |  if_e	rdlong	local01, fp
0cb34     14 4E 85 A1 |  if_e	sub	fp, #20
0cb38     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0cb3c     1C 00 90 5D |  if_ne	jmp	#LR__1034
0cb40     A7 5E 02 FB | 	rdlong	muldiva_, fp
0cb44     0C 4E 05 F1 | 	add	fp, #12
0cb48     A7 60 02 FB | 	rdlong	muldivb_, fp
0cb4c     0C 4E 85 F1 | 	sub	fp, #12
0cb50     BA 00 A0 FD | 	call	#divide_
0cb54     A7 60 62 FC | 	wrlong	muldivb_, fp
0cb58     50 00 90 FD | 	jmp	#LR__1036
0cb5c                 | LR__1034
0cb5c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0cb5c     08 4E 05 F1 | 	add	fp, #8
0cb60     A7 60 02 FB | 	rdlong	muldivb_, fp
0cb64     08 4E 85 F1 | 	sub	fp, #8
0cb68     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0cb6c     14 4E 05 A1 |  if_e	add	fp, #20
0cb70     A7 1E 02 AB |  if_e	rdlong	local01, fp
0cb74     14 4E 85 A1 |  if_e	sub	fp, #20
0cb78     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0cb7c     1C 00 90 5D |  if_ne	jmp	#LR__1035
0cb80     A7 5E 02 FB | 	rdlong	muldiva_, fp
0cb84     0C 4E 05 F1 | 	add	fp, #12
0cb88     A7 60 02 FB | 	rdlong	muldivb_, fp
0cb8c     0C 4E 85 F1 | 	sub	fp, #12
0cb90     BA 00 A0 FD | 	call	#divide_
0cb94     A7 60 62 FC | 	wrlong	muldivb_, fp
0cb98     10 00 90 FD | 	jmp	#LR__1036
0cb9c                 | LR__1035
0cb9c     A7 16 68 FC | 	wrlong	#11, fp
0cba0     08 4E 05 F1 | 	add	fp, #8
0cba4     A7 FE 69 FC | 	wrlong	#255, fp
0cba8     08 4E 85 F1 | 	sub	fp, #8
0cbac                 | LR__1036
0cbac     A7 12 02 F6 | 	mov	arg01, fp
0cbb0     90 BE BF FD | 	call	#_push
0cbb4     A7 F0 03 F6 | 	mov	ptra, fp
0cbb8     B2 00 A0 FD | 	call	#popregs_
0cbbc                 | _do_div_ret
0cbbc     2D 00 64 FD | 	ret
0cbc0                 | 
0cbc0                 | ' 
0cbc0                 | ' sub do_fdiv 
0cbc0                 | _do_fdiv
0cbc0     02 4A 05 F6 | 	mov	COUNT_, #2
0cbc4     A8 00 A0 FD | 	call	#pushregs_
0cbc8     18 F0 07 F1 | 	add	ptra, #24
0cbcc     DC BD BF FD | 	call	#_pop
0cbd0     FD 14 02 F6 | 	mov	arg02, result1
0cbd4     FE 12 02 F6 | 	mov	arg01, result2
0cbd8     FF 1E 02 F6 | 	mov	local01, result3
0cbdc     0C 4E 05 F1 | 	add	fp, #12
0cbe0     A7 14 62 FC | 	wrlong	arg02, fp
0cbe4     04 4E 05 F1 | 	add	fp, #4
0cbe8     A7 12 62 FC | 	wrlong	arg01, fp
0cbec     04 4E 05 F1 | 	add	fp, #4
0cbf0     A7 1E 62 FC | 	wrlong	local01, fp
0cbf4     14 4E 85 F1 | 	sub	fp, #20
0cbf8     B0 BD BF FD | 	call	#_pop
0cbfc     A7 FA 61 FC | 	wrlong	result1, fp
0cc00     04 4E 05 F1 | 	add	fp, #4
0cc04     A7 FC 61 FC | 	wrlong	result2, fp
0cc08     04 4E 05 F1 | 	add	fp, #4
0cc0c     A7 FE 61 FC | 	wrlong	result3, fp
0cc10                 | ' 
0cc10                 | ' t2=pop()
0cc10                 | ' t1=pop()
0cc10                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0cc10     08 4E 85 F1 | 	sub	fp, #8
0cc14     1F FE 0D F2 | 	cmp	result3, #31 wz
0cc18     14 4E 05 51 |  if_ne	add	fp, #20
0cc1c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0cc20     14 4E 85 51 |  if_ne	sub	fp, #20
0cc24     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0cc28     A7 14 68 AC |  if_e	wrlong	#10, fp
0cc2c     08 4E 05 A1 |  if_e	add	fp, #8
0cc30     A7 FE 69 AC |  if_e	wrlong	#255, fp
0cc34     08 4E 85 A1 |  if_e	sub	fp, #8
0cc38     38 01 90 AD |  if_e	jmp	#LR__1045
0cc3c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0cc3c     08 4E 05 F1 | 	add	fp, #8
0cc40     A7 14 02 FB | 	rdlong	arg02, fp
0cc44     08 4E 85 F1 | 	sub	fp, #8
0cc48     1C 14 0E F2 | 	cmp	arg02, #28 wz
0cc4c     28 00 90 5D |  if_ne	jmp	#LR__1040
0cc50     08 4E 05 F1 | 	add	fp, #8
0cc54     A7 3C 68 FC | 	wrlong	#30, fp
0cc58     08 4E 85 F1 | 	sub	fp, #8
0cc5c     A7 12 02 FB | 	rdlong	arg01, fp
0cc60     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc64     1F 20 C6 C9 |  if_b	decod	local02, #31
0cc68     00 20 06 36 |  if_ae	mov	local02, #0
0cc6c     DC B5 B0 FD | 	call	#__system___float_fromuns
0cc70     10 FB 61 F5 | 	xor	result1, local02
0cc74     A7 FA 61 FC | 	wrlong	result1, fp
0cc78                 | LR__1040
0cc78                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0cc78     08 4E 05 F1 | 	add	fp, #8
0cc7c     A7 14 02 FB | 	rdlong	arg02, fp
0cc80     08 4E 85 F1 | 	sub	fp, #8
0cc84     1D 14 0E F2 | 	cmp	arg02, #29 wz
0cc88     18 00 90 5D |  if_ne	jmp	#LR__1041
0cc8c     08 4E 05 F1 | 	add	fp, #8
0cc90     A7 3C 68 FC | 	wrlong	#30, fp
0cc94     08 4E 85 F1 | 	sub	fp, #8
0cc98     A7 12 02 FB | 	rdlong	arg01, fp
0cc9c     AC B5 B0 FD | 	call	#__system___float_fromuns
0cca0     A7 FA 61 FC | 	wrlong	result1, fp
0cca4                 | LR__1041
0cca4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0cca4     14 4E 05 F1 | 	add	fp, #20
0cca8     A7 14 02 FB | 	rdlong	arg02, fp
0ccac     14 4E 85 F1 | 	sub	fp, #20
0ccb0     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ccb4     34 00 90 5D |  if_ne	jmp	#LR__1042
0ccb8     14 4E 05 F1 | 	add	fp, #20
0ccbc     A7 3C 68 FC | 	wrlong	#30, fp
0ccc0     08 4E 85 F1 | 	sub	fp, #8
0ccc4     A7 12 02 FB | 	rdlong	arg01, fp
0ccc8     0C 4E 85 F1 | 	sub	fp, #12
0cccc     09 13 52 F6 | 	abs	arg01, arg01 wc
0ccd0     1F 20 C6 C9 |  if_b	decod	local02, #31
0ccd4     00 20 06 36 |  if_ae	mov	local02, #0
0ccd8     70 B5 B0 FD | 	call	#__system___float_fromuns
0ccdc     10 FB 61 F5 | 	xor	result1, local02
0cce0     0C 4E 05 F1 | 	add	fp, #12
0cce4     A7 FA 61 FC | 	wrlong	result1, fp
0cce8     0C 4E 85 F1 | 	sub	fp, #12
0ccec                 | LR__1042
0ccec                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ccec     14 4E 05 F1 | 	add	fp, #20
0ccf0     A7 14 02 FB | 	rdlong	arg02, fp
0ccf4     14 4E 85 F1 | 	sub	fp, #20
0ccf8     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ccfc     24 00 90 5D |  if_ne	jmp	#LR__1043
0cd00     14 4E 05 F1 | 	add	fp, #20
0cd04     A7 3C 68 FC | 	wrlong	#30, fp
0cd08     08 4E 85 F1 | 	sub	fp, #8
0cd0c     A7 12 02 FB | 	rdlong	arg01, fp
0cd10     0C 4E 85 F1 | 	sub	fp, #12
0cd14     34 B5 B0 FD | 	call	#__system___float_fromuns
0cd18     0C 4E 05 F1 | 	add	fp, #12
0cd1c     A7 FA 61 FC | 	wrlong	result1, fp
0cd20     0C 4E 85 F1 | 	sub	fp, #12
0cd24                 | LR__1043
0cd24                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0cd24     08 4E 05 F1 | 	add	fp, #8
0cd28     A7 14 02 FB | 	rdlong	arg02, fp
0cd2c     08 4E 85 F1 | 	sub	fp, #8
0cd30     1E 14 0E F2 | 	cmp	arg02, #30 wz
0cd34     14 4E 05 A1 |  if_e	add	fp, #20
0cd38     A7 1E 02 AB |  if_e	rdlong	local01, fp
0cd3c     14 4E 85 A1 |  if_e	sub	fp, #20
0cd40     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0cd44     1C 00 90 5D |  if_ne	jmp	#LR__1044
0cd48     A7 12 02 FB | 	rdlong	arg01, fp
0cd4c     0C 4E 05 F1 | 	add	fp, #12
0cd50     A7 14 02 FB | 	rdlong	arg02, fp
0cd54     0C 4E 85 F1 | 	sub	fp, #12
0cd58     20 BA B0 FD | 	call	#__system___float_div
0cd5c     A7 FA 61 FC | 	wrlong	result1, fp
0cd60     10 00 90 FD | 	jmp	#LR__1045
0cd64                 | LR__1044
0cd64     A7 16 68 FC | 	wrlong	#11, fp
0cd68     08 4E 05 F1 | 	add	fp, #8
0cd6c     A7 FE 69 FC | 	wrlong	#255, fp
0cd70     08 4E 85 F1 | 	sub	fp, #8
0cd74                 | LR__1045
0cd74     A7 12 02 F6 | 	mov	arg01, fp
0cd78     C8 BC BF FD | 	call	#_push
0cd7c     A7 F0 03 F6 | 	mov	ptra, fp
0cd80     B2 00 A0 FD | 	call	#popregs_
0cd84                 | _do_fdiv_ret
0cd84     2D 00 64 FD | 	ret
0cd88                 | 
0cd88                 | ' 
0cd88                 | ' 
0cd88                 | ' sub do_mod 
0cd88                 | _do_mod
0cd88     01 4A 05 F6 | 	mov	COUNT_, #1
0cd8c     A8 00 A0 FD | 	call	#pushregs_
0cd90     18 F0 07 F1 | 	add	ptra, #24
0cd94     14 BC BF FD | 	call	#_pop
0cd98     FD 60 02 F6 | 	mov	muldivb_, result1
0cd9c     FE 5E 02 F6 | 	mov	muldiva_, result2
0cda0     FF 1E 02 F6 | 	mov	local01, result3
0cda4     0C 4E 05 F1 | 	add	fp, #12
0cda8     A7 60 62 FC | 	wrlong	muldivb_, fp
0cdac     04 4E 05 F1 | 	add	fp, #4
0cdb0     A7 5E 62 FC | 	wrlong	muldiva_, fp
0cdb4     04 4E 05 F1 | 	add	fp, #4
0cdb8     A7 1E 62 FC | 	wrlong	local01, fp
0cdbc     14 4E 85 F1 | 	sub	fp, #20
0cdc0     E8 BB BF FD | 	call	#_pop
0cdc4     A7 FA 61 FC | 	wrlong	result1, fp
0cdc8     04 4E 05 F1 | 	add	fp, #4
0cdcc     A7 FC 61 FC | 	wrlong	result2, fp
0cdd0     04 4E 05 F1 | 	add	fp, #4
0cdd4     A7 FE 61 FC | 	wrlong	result3, fp
0cdd8                 | ' 
0cdd8                 | ' t2=pop()
0cdd8                 | ' t1=pop()
0cdd8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0cdd8     08 4E 85 F1 | 	sub	fp, #8
0cddc     1F FE 0D F2 | 	cmp	result3, #31 wz
0cde0     14 4E 05 51 |  if_ne	add	fp, #20
0cde4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0cde8     14 4E 85 51 |  if_ne	sub	fp, #20
0cdec     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0cdf0     A7 14 68 AC |  if_e	wrlong	#10, fp
0cdf4     08 4E 05 A1 |  if_e	add	fp, #8
0cdf8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0cdfc     08 4E 85 A1 |  if_e	sub	fp, #8
0ce00     90 01 90 AD |  if_e	jmp	#LR__1056
0ce04                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0ce04     08 4E 05 F1 | 	add	fp, #8
0ce08     A7 60 02 FB | 	rdlong	muldivb_, fp
0ce0c     08 4E 85 F1 | 	sub	fp, #8
0ce10     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0ce14     1C 00 90 5D |  if_ne	jmp	#LR__1050
0ce18     08 4E 05 F1 | 	add	fp, #8
0ce1c     A7 38 68 FC | 	wrlong	#28, fp
0ce20     08 4E 85 F1 | 	sub	fp, #8
0ce24     A7 12 02 FB | 	rdlong	arg01, fp
0ce28     00 14 06 F6 | 	mov	arg02, #0
0ce2c     10 BC B0 FD | 	call	#__system___float_tointeger
0ce30     A7 FA 61 FC | 	wrlong	result1, fp
0ce34                 | LR__1050
0ce34                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0ce34     14 4E 05 F1 | 	add	fp, #20
0ce38     A7 60 02 FB | 	rdlong	muldivb_, fp
0ce3c     14 4E 85 F1 | 	sub	fp, #20
0ce40     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0ce44     28 00 90 5D |  if_ne	jmp	#LR__1051
0ce48     14 4E 05 F1 | 	add	fp, #20
0ce4c     A7 38 68 FC | 	wrlong	#28, fp
0ce50     08 4E 85 F1 | 	sub	fp, #8
0ce54     A7 12 02 FB | 	rdlong	arg01, fp
0ce58     0C 4E 85 F1 | 	sub	fp, #12
0ce5c     00 14 06 F6 | 	mov	arg02, #0
0ce60     DC BB B0 FD | 	call	#__system___float_tointeger
0ce64     0C 4E 05 F1 | 	add	fp, #12
0ce68     A7 FA 61 FC | 	wrlong	result1, fp
0ce6c     0C 4E 85 F1 | 	sub	fp, #12
0ce70                 | LR__1051
0ce70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0ce70     08 4E 05 F1 | 	add	fp, #8
0ce74     A7 60 02 FB | 	rdlong	muldivb_, fp
0ce78     08 4E 85 F1 | 	sub	fp, #8
0ce7c     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0ce80     14 4E 05 A1 |  if_e	add	fp, #20
0ce84     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ce88     14 4E 85 A1 |  if_e	sub	fp, #20
0ce8c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ce90     20 00 90 5D |  if_ne	jmp	#LR__1052
0ce94     0C 4E 05 F1 | 	add	fp, #12
0ce98     A7 1E 02 FB | 	rdlong	local01, fp
0ce9c     0C 4E 85 F1 | 	sub	fp, #12
0cea0     A7 60 02 FB | 	rdlong	muldivb_, fp
0cea4     0F 61 12 FD | 	qdiv	muldivb_, local01
0cea8     19 1E 62 FD | 	getqy	local01
0ceac     A7 1E 62 FC | 	wrlong	local01, fp
0ceb0     E0 00 90 FD | 	jmp	#LR__1056
0ceb4                 | LR__1052
0ceb4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0ceb4     08 4E 05 F1 | 	add	fp, #8
0ceb8     A7 60 02 FB | 	rdlong	muldivb_, fp
0cebc     08 4E 85 F1 | 	sub	fp, #8
0cec0     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0cec4     14 4E 05 A1 |  if_e	add	fp, #20
0cec8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0cecc     14 4E 85 A1 |  if_e	sub	fp, #20
0ced0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ced4     2C 00 90 5D |  if_ne	jmp	#LR__1053
0ced8     0C 4E 05 F1 | 	add	fp, #12
0cedc     A7 1E 02 FB | 	rdlong	local01, fp
0cee0     0C 4E 85 F1 | 	sub	fp, #12
0cee4     A7 60 02 FB | 	rdlong	muldivb_, fp
0cee8     0F 61 12 FD | 	qdiv	muldivb_, local01
0ceec     19 1E 62 FD | 	getqy	local01
0cef0     A7 1E 62 FC | 	wrlong	local01, fp
0cef4     08 4E 05 F1 | 	add	fp, #8
0cef8     A7 38 68 FC | 	wrlong	#28, fp
0cefc     08 4E 85 F1 | 	sub	fp, #8
0cf00     90 00 90 FD | 	jmp	#LR__1056
0cf04                 | LR__1053
0cf04                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0cf04     08 4E 05 F1 | 	add	fp, #8
0cf08     A7 60 02 FB | 	rdlong	muldivb_, fp
0cf0c     08 4E 85 F1 | 	sub	fp, #8
0cf10     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0cf14     14 4E 05 A1 |  if_e	add	fp, #20
0cf18     A7 1E 02 AB |  if_e	rdlong	local01, fp
0cf1c     14 4E 85 A1 |  if_e	sub	fp, #20
0cf20     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0cf24     1C 00 90 5D |  if_ne	jmp	#LR__1054
0cf28     A7 5E 02 FB | 	rdlong	muldiva_, fp
0cf2c     0C 4E 05 F1 | 	add	fp, #12
0cf30     A7 60 02 FB | 	rdlong	muldivb_, fp
0cf34     0C 4E 85 F1 | 	sub	fp, #12
0cf38     BA 00 A0 FD | 	call	#divide_
0cf3c     A7 5E 62 FC | 	wrlong	muldiva_, fp
0cf40     50 00 90 FD | 	jmp	#LR__1056
0cf44                 | LR__1054
0cf44                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0cf44     08 4E 05 F1 | 	add	fp, #8
0cf48     A7 60 02 FB | 	rdlong	muldivb_, fp
0cf4c     08 4E 85 F1 | 	sub	fp, #8
0cf50     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0cf54     14 4E 05 A1 |  if_e	add	fp, #20
0cf58     A7 1E 02 AB |  if_e	rdlong	local01, fp
0cf5c     14 4E 85 A1 |  if_e	sub	fp, #20
0cf60     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0cf64     1C 00 90 5D |  if_ne	jmp	#LR__1055
0cf68     A7 5E 02 FB | 	rdlong	muldiva_, fp
0cf6c     0C 4E 05 F1 | 	add	fp, #12
0cf70     A7 60 02 FB | 	rdlong	muldivb_, fp
0cf74     0C 4E 85 F1 | 	sub	fp, #12
0cf78     BA 00 A0 FD | 	call	#divide_
0cf7c     A7 5E 62 FC | 	wrlong	muldiva_, fp
0cf80     10 00 90 FD | 	jmp	#LR__1056
0cf84                 | LR__1055
0cf84     A7 16 68 FC | 	wrlong	#11, fp
0cf88     08 4E 05 F1 | 	add	fp, #8
0cf8c     A7 FE 69 FC | 	wrlong	#255, fp
0cf90     08 4E 85 F1 | 	sub	fp, #8
0cf94                 | LR__1056
0cf94     A7 12 02 F6 | 	mov	arg01, fp
0cf98     A8 BA BF FD | 	call	#_push
0cf9c     A7 F0 03 F6 | 	mov	ptra, fp
0cfa0     B2 00 A0 FD | 	call	#popregs_
0cfa4                 | _do_mod_ret
0cfa4     2D 00 64 FD | 	ret
0cfa8                 | 
0cfa8                 | ' 
0cfa8                 | ' sub do_shl 
0cfa8                 | _do_shl
0cfa8     03 4A 05 F6 | 	mov	COUNT_, #3
0cfac     A8 00 A0 FD | 	call	#pushregs_
0cfb0     18 F0 07 F1 | 	add	ptra, #24
0cfb4     F4 B9 BF FD | 	call	#_pop
0cfb8     FD 12 02 F6 | 	mov	arg01, result1
0cfbc     FE 1E 02 F6 | 	mov	local01, result2
0cfc0     FF 20 02 F6 | 	mov	local02, result3
0cfc4     0C 4E 05 F1 | 	add	fp, #12
0cfc8     A7 12 62 FC | 	wrlong	arg01, fp
0cfcc     04 4E 05 F1 | 	add	fp, #4
0cfd0     A7 1E 62 FC | 	wrlong	local01, fp
0cfd4     04 4E 05 F1 | 	add	fp, #4
0cfd8     A7 20 62 FC | 	wrlong	local02, fp
0cfdc     14 4E 85 F1 | 	sub	fp, #20
0cfe0     C8 B9 BF FD | 	call	#_pop
0cfe4     FF 22 02 F6 | 	mov	local03, result3
0cfe8     A7 FA 61 FC | 	wrlong	result1, fp
0cfec     04 4E 05 F1 | 	add	fp, #4
0cff0     A7 FC 61 FC | 	wrlong	result2, fp
0cff4     04 4E 05 F1 | 	add	fp, #4
0cff8     A7 22 62 FC | 	wrlong	local03, fp
0cffc                 | ' 
0cffc                 | ' t2=pop()
0cffc                 | ' t1=pop()
0cffc                 | ' 
0cffc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0cffc     08 4E 85 F1 | 	sub	fp, #8
0d000     1C 22 0E F2 | 	cmp	local03, #28 wz
0d004     A7 22 02 AB |  if_e	rdlong	local03, fp
0d008     A7 22 62 AC |  if_e	wrlong	local03, fp
0d00c     08 4E 05 A1 |  if_e	add	fp, #8
0d010     A7 3A 68 AC |  if_e	wrlong	#29, fp
0d014     08 4E 85 A1 |  if_e	sub	fp, #8
0d018                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0d018     14 4E 05 F1 | 	add	fp, #20
0d01c     A7 22 02 FB | 	rdlong	local03, fp
0d020     14 4E 85 F1 | 	sub	fp, #20
0d024     1C 22 0E F2 | 	cmp	local03, #28 wz
0d028     18 00 90 5D |  if_ne	jmp	#LR__1060
0d02c     0C 4E 05 F1 | 	add	fp, #12
0d030     A7 22 02 FB | 	rdlong	local03, fp
0d034     A7 22 62 FC | 	wrlong	local03, fp
0d038     08 4E 05 F1 | 	add	fp, #8
0d03c     A7 3A 68 FC | 	wrlong	#29, fp
0d040     14 4E 85 F1 | 	sub	fp, #20
0d044                 | LR__1060
0d044                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0d044     08 4E 05 F1 | 	add	fp, #8
0d048     A7 22 02 FB | 	rdlong	local03, fp
0d04c     08 4E 85 F1 | 	sub	fp, #8
0d050     1F 22 0E F2 | 	cmp	local03, #31 wz
0d054     14 4E 05 51 |  if_ne	add	fp, #20
0d058     A7 20 02 5B |  if_ne	rdlong	local02, fp
0d05c     14 4E 85 51 |  if_ne	sub	fp, #20
0d060     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0d064     08 4E 05 51 |  if_ne	add	fp, #8
0d068     A7 22 02 5B |  if_ne	rdlong	local03, fp
0d06c     08 4E 85 51 |  if_ne	sub	fp, #8
0d070     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0d074     14 4E 05 51 |  if_ne	add	fp, #20
0d078     14 4E 85 51 |  if_ne	sub	fp, #20
0d07c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0d080     A7 0C 68 AC |  if_e	wrlong	#6, fp
0d084     08 4E 05 A1 |  if_e	add	fp, #8
0d088     A7 FE 69 AC |  if_e	wrlong	#255, fp
0d08c     08 4E 85 A1 |  if_e	sub	fp, #8
0d090     18 00 90 AD |  if_e	jmp	#LR__1061
0d094     A7 22 02 FB | 	rdlong	local03, fp
0d098     0C 4E 05 F1 | 	add	fp, #12
0d09c     A7 1E 02 FB | 	rdlong	local01, fp
0d0a0     0C 4E 85 F1 | 	sub	fp, #12
0d0a4     0F 23 62 F0 | 	shl	local03, local01
0d0a8     A7 22 62 FC | 	wrlong	local03, fp
0d0ac                 | LR__1061
0d0ac     A7 12 02 F6 | 	mov	arg01, fp
0d0b0     90 B9 BF FD | 	call	#_push
0d0b4     A7 F0 03 F6 | 	mov	ptra, fp
0d0b8     B2 00 A0 FD | 	call	#popregs_
0d0bc                 | _do_shl_ret
0d0bc     2D 00 64 FD | 	ret
0d0c0                 | 
0d0c0                 | ' 
0d0c0                 | ' sub do_shr 
0d0c0                 | _do_shr
0d0c0     03 4A 05 F6 | 	mov	COUNT_, #3
0d0c4     A8 00 A0 FD | 	call	#pushregs_
0d0c8     18 F0 07 F1 | 	add	ptra, #24
0d0cc     DC B8 BF FD | 	call	#_pop
0d0d0     FD 12 02 F6 | 	mov	arg01, result1
0d0d4     FE 1E 02 F6 | 	mov	local01, result2
0d0d8     FF 20 02 F6 | 	mov	local02, result3
0d0dc     0C 4E 05 F1 | 	add	fp, #12
0d0e0     A7 12 62 FC | 	wrlong	arg01, fp
0d0e4     04 4E 05 F1 | 	add	fp, #4
0d0e8     A7 1E 62 FC | 	wrlong	local01, fp
0d0ec     04 4E 05 F1 | 	add	fp, #4
0d0f0     A7 20 62 FC | 	wrlong	local02, fp
0d0f4     14 4E 85 F1 | 	sub	fp, #20
0d0f8     B0 B8 BF FD | 	call	#_pop
0d0fc     FF 22 02 F6 | 	mov	local03, result3
0d100     A7 FA 61 FC | 	wrlong	result1, fp
0d104     04 4E 05 F1 | 	add	fp, #4
0d108     A7 FC 61 FC | 	wrlong	result2, fp
0d10c     04 4E 05 F1 | 	add	fp, #4
0d110     A7 22 62 FC | 	wrlong	local03, fp
0d114                 | ' t2=pop()
0d114                 | ' t1=pop()
0d114                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0d114     08 4E 85 F1 | 	sub	fp, #8
0d118     1C 22 0E F2 | 	cmp	local03, #28 wz
0d11c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d120     A7 22 62 AC |  if_e	wrlong	local03, fp
0d124     08 4E 05 A1 |  if_e	add	fp, #8
0d128     A7 3A 68 AC |  if_e	wrlong	#29, fp
0d12c     08 4E 85 A1 |  if_e	sub	fp, #8
0d130                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0d130     14 4E 05 F1 | 	add	fp, #20
0d134     A7 22 02 FB | 	rdlong	local03, fp
0d138     14 4E 85 F1 | 	sub	fp, #20
0d13c     1C 22 0E F2 | 	cmp	local03, #28 wz
0d140     18 00 90 5D |  if_ne	jmp	#LR__1070
0d144     0C 4E 05 F1 | 	add	fp, #12
0d148     A7 22 02 FB | 	rdlong	local03, fp
0d14c     A7 22 62 FC | 	wrlong	local03, fp
0d150     08 4E 05 F1 | 	add	fp, #8
0d154     A7 3A 68 FC | 	wrlong	#29, fp
0d158     14 4E 85 F1 | 	sub	fp, #20
0d15c                 | LR__1070
0d15c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0d15c     08 4E 05 F1 | 	add	fp, #8
0d160     A7 22 02 FB | 	rdlong	local03, fp
0d164     08 4E 85 F1 | 	sub	fp, #8
0d168     1F 22 0E F2 | 	cmp	local03, #31 wz
0d16c     14 4E 05 51 |  if_ne	add	fp, #20
0d170     A7 20 02 5B |  if_ne	rdlong	local02, fp
0d174     14 4E 85 51 |  if_ne	sub	fp, #20
0d178     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0d17c     08 4E 05 51 |  if_ne	add	fp, #8
0d180     A7 22 02 5B |  if_ne	rdlong	local03, fp
0d184     08 4E 85 51 |  if_ne	sub	fp, #8
0d188     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0d18c     14 4E 05 51 |  if_ne	add	fp, #20
0d190     14 4E 85 51 |  if_ne	sub	fp, #20
0d194     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0d198     A7 0C 68 AC |  if_e	wrlong	#6, fp
0d19c     08 4E 05 A1 |  if_e	add	fp, #8
0d1a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0d1a4     08 4E 85 A1 |  if_e	sub	fp, #8
0d1a8     18 00 90 AD |  if_e	jmp	#LR__1071
0d1ac     A7 22 02 FB | 	rdlong	local03, fp
0d1b0     0C 4E 05 F1 | 	add	fp, #12
0d1b4     A7 1E 02 FB | 	rdlong	local01, fp
0d1b8     0C 4E 85 F1 | 	sub	fp, #12
0d1bc     0F 23 42 F0 | 	shr	local03, local01
0d1c0     A7 22 62 FC | 	wrlong	local03, fp
0d1c4                 | LR__1071
0d1c4     A7 12 02 F6 | 	mov	arg01, fp
0d1c8     78 B8 BF FD | 	call	#_push
0d1cc     A7 F0 03 F6 | 	mov	ptra, fp
0d1d0     B2 00 A0 FD | 	call	#popregs_
0d1d4                 | _do_shr_ret
0d1d4     2D 00 64 FD | 	ret
0d1d8                 | 
0d1d8                 | ' 
0d1d8                 | ' sub do_power 
0d1d8                 | _do_power
0d1d8     02 4A 05 F6 | 	mov	COUNT_, #2
0d1dc     A8 00 A0 FD | 	call	#pushregs_
0d1e0     18 F0 07 F1 | 	add	ptra, #24
0d1e4     C4 B7 BF FD | 	call	#_pop
0d1e8     FD 14 02 F6 | 	mov	arg02, result1
0d1ec     FE 12 02 F6 | 	mov	arg01, result2
0d1f0     FF 1E 02 F6 | 	mov	local01, result3
0d1f4     0C 4E 05 F1 | 	add	fp, #12
0d1f8     A7 14 62 FC | 	wrlong	arg02, fp
0d1fc     04 4E 05 F1 | 	add	fp, #4
0d200     A7 12 62 FC | 	wrlong	arg01, fp
0d204     04 4E 05 F1 | 	add	fp, #4
0d208     A7 1E 62 FC | 	wrlong	local01, fp
0d20c     14 4E 85 F1 | 	sub	fp, #20
0d210     98 B7 BF FD | 	call	#_pop
0d214     A7 FA 61 FC | 	wrlong	result1, fp
0d218     04 4E 05 F1 | 	add	fp, #4
0d21c     A7 FC 61 FC | 	wrlong	result2, fp
0d220     04 4E 05 F1 | 	add	fp, #4
0d224     A7 FE 61 FC | 	wrlong	result3, fp
0d228                 | ' t2=pop()
0d228                 | ' t1=pop()
0d228                 | ' 
0d228                 | ' 
0d228                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0d228     08 4E 85 F1 | 	sub	fp, #8
0d22c     1F FE 0D F2 | 	cmp	result3, #31 wz
0d230     14 4E 05 51 |  if_ne	add	fp, #20
0d234     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d238     14 4E 85 51 |  if_ne	sub	fp, #20
0d23c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0d240     A7 18 68 AC |  if_e	wrlong	#12, fp
0d244     08 4E 05 A1 |  if_e	add	fp, #8
0d248     A7 FE 69 AC |  if_e	wrlong	#255, fp
0d24c     08 4E 85 A1 |  if_e	sub	fp, #8
0d250     38 01 90 AD |  if_e	jmp	#LR__1085
0d254                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0d254     08 4E 05 F1 | 	add	fp, #8
0d258     A7 14 02 FB | 	rdlong	arg02, fp
0d25c     08 4E 85 F1 | 	sub	fp, #8
0d260     1C 14 0E F2 | 	cmp	arg02, #28 wz
0d264     28 00 90 5D |  if_ne	jmp	#LR__1080
0d268     08 4E 05 F1 | 	add	fp, #8
0d26c     A7 3C 68 FC | 	wrlong	#30, fp
0d270     08 4E 85 F1 | 	sub	fp, #8
0d274     A7 12 02 FB | 	rdlong	arg01, fp
0d278     09 13 52 F6 | 	abs	arg01, arg01 wc
0d27c     1F 20 C6 C9 |  if_b	decod	local02, #31
0d280     00 20 06 36 |  if_ae	mov	local02, #0
0d284     C4 AF B0 FD | 	call	#__system___float_fromuns
0d288     10 FB 61 F5 | 	xor	result1, local02
0d28c     A7 FA 61 FC | 	wrlong	result1, fp
0d290                 | LR__1080
0d290                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0d290     08 4E 05 F1 | 	add	fp, #8
0d294     A7 14 02 FB | 	rdlong	arg02, fp
0d298     08 4E 85 F1 | 	sub	fp, #8
0d29c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0d2a0     18 00 90 5D |  if_ne	jmp	#LR__1081
0d2a4     08 4E 05 F1 | 	add	fp, #8
0d2a8     A7 3C 68 FC | 	wrlong	#30, fp
0d2ac     08 4E 85 F1 | 	sub	fp, #8
0d2b0     A7 12 02 FB | 	rdlong	arg01, fp
0d2b4     94 AF B0 FD | 	call	#__system___float_fromuns
0d2b8     A7 FA 61 FC | 	wrlong	result1, fp
0d2bc                 | LR__1081
0d2bc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0d2bc     14 4E 05 F1 | 	add	fp, #20
0d2c0     A7 14 02 FB | 	rdlong	arg02, fp
0d2c4     14 4E 85 F1 | 	sub	fp, #20
0d2c8     1C 14 0E F2 | 	cmp	arg02, #28 wz
0d2cc     34 00 90 5D |  if_ne	jmp	#LR__1082
0d2d0     14 4E 05 F1 | 	add	fp, #20
0d2d4     A7 3C 68 FC | 	wrlong	#30, fp
0d2d8     08 4E 85 F1 | 	sub	fp, #8
0d2dc     A7 12 02 FB | 	rdlong	arg01, fp
0d2e0     0C 4E 85 F1 | 	sub	fp, #12
0d2e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d2e8     1F 20 C6 C9 |  if_b	decod	local02, #31
0d2ec     00 20 06 36 |  if_ae	mov	local02, #0
0d2f0     58 AF B0 FD | 	call	#__system___float_fromuns
0d2f4     10 FB 61 F5 | 	xor	result1, local02
0d2f8     0C 4E 05 F1 | 	add	fp, #12
0d2fc     A7 FA 61 FC | 	wrlong	result1, fp
0d300     0C 4E 85 F1 | 	sub	fp, #12
0d304                 | LR__1082
0d304                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0d304     14 4E 05 F1 | 	add	fp, #20
0d308     A7 14 02 FB | 	rdlong	arg02, fp
0d30c     14 4E 85 F1 | 	sub	fp, #20
0d310     1D 14 0E F2 | 	cmp	arg02, #29 wz
0d314     24 00 90 5D |  if_ne	jmp	#LR__1083
0d318     14 4E 05 F1 | 	add	fp, #20
0d31c     A7 3C 68 FC | 	wrlong	#30, fp
0d320     08 4E 85 F1 | 	sub	fp, #8
0d324     A7 12 02 FB | 	rdlong	arg01, fp
0d328     0C 4E 85 F1 | 	sub	fp, #12
0d32c     1C AF B0 FD | 	call	#__system___float_fromuns
0d330     0C 4E 05 F1 | 	add	fp, #12
0d334     A7 FA 61 FC | 	wrlong	result1, fp
0d338     0C 4E 85 F1 | 	sub	fp, #12
0d33c                 | LR__1083
0d33c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0d33c     08 4E 05 F1 | 	add	fp, #8
0d340     A7 14 02 FB | 	rdlong	arg02, fp
0d344     08 4E 85 F1 | 	sub	fp, #8
0d348     1E 14 0E F2 | 	cmp	arg02, #30 wz
0d34c     14 4E 05 A1 |  if_e	add	fp, #20
0d350     A7 1E 02 AB |  if_e	rdlong	local01, fp
0d354     14 4E 85 A1 |  if_e	sub	fp, #20
0d358     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0d35c     1C 00 90 5D |  if_ne	jmp	#LR__1084
0d360     A7 12 02 FB | 	rdlong	arg01, fp
0d364     0C 4E 05 F1 | 	add	fp, #12
0d368     A7 14 02 FB | 	rdlong	arg02, fp
0d36c     0C 4E 85 F1 | 	sub	fp, #12
0d370     70 BE B0 FD | 	call	#__system____builtin_powf
0d374     A7 FA 61 FC | 	wrlong	result1, fp
0d378     10 00 90 FD | 	jmp	#LR__1085
0d37c                 | LR__1084
0d37c     A7 1A 68 FC | 	wrlong	#13, fp
0d380     08 4E 05 F1 | 	add	fp, #8
0d384     A7 FE 69 FC | 	wrlong	#255, fp
0d388     08 4E 85 F1 | 	sub	fp, #8
0d38c                 | LR__1085
0d38c     A7 12 02 F6 | 	mov	arg01, fp
0d390     B0 B6 BF FD | 	call	#_push
0d394     A7 F0 03 F6 | 	mov	ptra, fp
0d398     B2 00 A0 FD | 	call	#popregs_
0d39c                 | _do_power_ret
0d39c     2D 00 64 FD | 	ret
0d3a0                 | 
0d3a0                 | ' 
0d3a0                 | ' 
0d3a0                 | ' sub do_eq
0d3a0                 | _do_eq
0d3a0     05 4A 05 F6 | 	mov	COUNT_, #5
0d3a4     A8 00 A0 FD | 	call	#pushregs_
0d3a8     18 F0 07 F1 | 	add	ptra, #24
0d3ac     FC B5 BF FD | 	call	#_pop
0d3b0     FD 1E 02 F6 | 	mov	local01, result1
0d3b4     FE 20 02 F6 | 	mov	local02, result2
0d3b8     FF 22 02 F6 | 	mov	local03, result3
0d3bc     0C 4E 05 F1 | 	add	fp, #12
0d3c0     A7 1E 62 FC | 	wrlong	local01, fp
0d3c4     04 4E 05 F1 | 	add	fp, #4
0d3c8     A7 20 62 FC | 	wrlong	local02, fp
0d3cc     04 4E 05 F1 | 	add	fp, #4
0d3d0     A7 22 62 FC | 	wrlong	local03, fp
0d3d4     14 4E 85 F1 | 	sub	fp, #20
0d3d8     D0 B5 BF FD | 	call	#_pop
0d3dc     FF 22 02 F6 | 	mov	local03, result3
0d3e0     A7 FA 61 FC | 	wrlong	result1, fp
0d3e4     04 4E 05 F1 | 	add	fp, #4
0d3e8     A7 FC 61 FC | 	wrlong	result2, fp
0d3ec     04 4E 05 F1 | 	add	fp, #4
0d3f0     A7 22 62 FC | 	wrlong	local03, fp
0d3f4                 | ' t2=pop()
0d3f4                 | ' t1=pop()
0d3f4                 | ' 
0d3f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0d3f4     08 4E 85 F1 | 	sub	fp, #8
0d3f8     1F 22 0E F2 | 	cmp	local03, #31 wz
0d3fc     14 4E 05 A1 |  if_e	add	fp, #20
0d400     A7 24 02 AB |  if_e	rdlong	local04, fp
0d404     14 4E 85 A1 |  if_e	sub	fp, #20
0d408     12 23 02 A6 |  if_e	mov	local03, local04
0d40c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d410     28 00 90 5D |  if_ne	jmp	#LR__1090
0d414     00 1E 06 F6 | 	mov	local01, #0
0d418     A7 12 02 FB | 	rdlong	arg01, fp
0d41c     0C 4E 05 F1 | 	add	fp, #12
0d420     A7 14 02 FB | 	rdlong	arg02, fp
0d424     0C 4E 85 F1 | 	sub	fp, #12
0d428     60 87 B0 FD | 	call	#__system___string_cmp
0d42c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d430     00 1E 26 A6 |  if_e	not	local01, #0
0d434     A7 1E 62 FC | 	wrlong	local01, fp
0d438     04 03 90 FD | 	jmp	#LR__1100
0d43c                 | LR__1090
0d43c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0d43c     08 4E 05 F1 | 	add	fp, #8
0d440     A7 1E 02 FB | 	rdlong	local01, fp
0d444     08 4E 85 F1 | 	sub	fp, #8
0d448     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d44c     14 4E 05 A1 |  if_e	add	fp, #20
0d450     A7 24 02 AB |  if_e	rdlong	local04, fp
0d454     14 4E 85 A1 |  if_e	sub	fp, #20
0d458     12 23 02 A6 |  if_e	mov	local03, local04
0d45c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d460     2C 00 90 5D |  if_ne	jmp	#LR__1091
0d464     00 1E 06 F6 | 	mov	local01, #0
0d468     A7 12 02 FB | 	rdlong	arg01, fp
0d46c     0C 4E 05 F1 | 	add	fp, #12
0d470     A7 14 02 FB | 	rdlong	arg02, fp
0d474     0C 4E 85 F1 | 	sub	fp, #12
0d478     01 16 06 F6 | 	mov	arg03, #1
0d47c     2C B5 B0 FD | 	call	#__system___float_cmp
0d480     00 FA 0D F2 | 	cmp	result1, #0 wz
0d484     00 1E 26 A6 |  if_e	not	local01, #0
0d488     A7 1E 62 FC | 	wrlong	local01, fp
0d48c     B0 02 90 FD | 	jmp	#LR__1100
0d490                 | LR__1091
0d490                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0d490     08 4E 05 F1 | 	add	fp, #8
0d494     A7 1E 02 FB | 	rdlong	local01, fp
0d498     08 4E 85 F1 | 	sub	fp, #8
0d49c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d4a0     14 4E 05 A1 |  if_e	add	fp, #20
0d4a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d4a8     14 4E 85 A1 |  if_e	sub	fp, #20
0d4ac     12 23 02 A6 |  if_e	mov	local03, local04
0d4b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d4b4     48 00 90 5D |  if_ne	jmp	#LR__1092
0d4b8     00 1E 06 F6 | 	mov	local01, #0
0d4bc     A7 20 02 FB | 	rdlong	local02, fp
0d4c0     0C 4E 05 F1 | 	add	fp, #12
0d4c4     A7 12 02 FB | 	rdlong	arg01, fp
0d4c8     0C 4E 85 F1 | 	sub	fp, #12
0d4cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0d4d0     1F 26 C6 C9 |  if_b	decod	local05, #31
0d4d4     00 26 06 36 |  if_ae	mov	local05, #0
0d4d8     70 AD B0 FD | 	call	#__system___float_fromuns
0d4dc     13 FB 61 F5 | 	xor	result1, local05
0d4e0     FD 14 02 F6 | 	mov	arg02, result1
0d4e4     10 13 02 F6 | 	mov	arg01, local02
0d4e8     01 16 06 F6 | 	mov	arg03, #1
0d4ec     BC B4 B0 FD | 	call	#__system___float_cmp
0d4f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0d4f4     00 1E 26 A6 |  if_e	not	local01, #0
0d4f8     A7 1E 62 FC | 	wrlong	local01, fp
0d4fc     40 02 90 FD | 	jmp	#LR__1100
0d500                 | LR__1092
0d500                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0d500     08 4E 05 F1 | 	add	fp, #8
0d504     A7 1E 02 FB | 	rdlong	local01, fp
0d508     08 4E 85 F1 | 	sub	fp, #8
0d50c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d510     14 4E 05 A1 |  if_e	add	fp, #20
0d514     A7 24 02 AB |  if_e	rdlong	local04, fp
0d518     14 4E 85 A1 |  if_e	sub	fp, #20
0d51c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d520     38 00 90 5D |  if_ne	jmp	#LR__1093
0d524     00 1E 06 F6 | 	mov	local01, #0
0d528     A7 20 02 FB | 	rdlong	local02, fp
0d52c     0C 4E 05 F1 | 	add	fp, #12
0d530     A7 12 02 FB | 	rdlong	arg01, fp
0d534     0C 4E 85 F1 | 	sub	fp, #12
0d538     10 AD B0 FD | 	call	#__system___float_fromuns
0d53c     FD 14 02 F6 | 	mov	arg02, result1
0d540     10 13 02 F6 | 	mov	arg01, local02
0d544     01 16 06 F6 | 	mov	arg03, #1
0d548     60 B4 B0 FD | 	call	#__system___float_cmp
0d54c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d550     00 1E 26 A6 |  if_e	not	local01, #0
0d554     A7 1E 62 FC | 	wrlong	local01, fp
0d558     E4 01 90 FD | 	jmp	#LR__1100
0d55c                 | LR__1093
0d55c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0d55c     08 4E 05 F1 | 	add	fp, #8
0d560     A7 1E 02 FB | 	rdlong	local01, fp
0d564     08 4E 85 F1 | 	sub	fp, #8
0d568     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d56c     14 4E 05 A1 |  if_e	add	fp, #20
0d570     A7 22 02 AB |  if_e	rdlong	local03, fp
0d574     14 4E 85 A1 |  if_e	sub	fp, #20
0d578     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d57c     44 00 90 5D |  if_ne	jmp	#LR__1094
0d580     00 1E 06 F6 | 	mov	local01, #0
0d584     A7 12 02 FB | 	rdlong	arg01, fp
0d588     09 13 52 F6 | 	abs	arg01, arg01 wc
0d58c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d590     00 26 06 36 |  if_ae	mov	local05, #0
0d594     B4 AC B0 FD | 	call	#__system___float_fromuns
0d598     13 FB 61 F5 | 	xor	result1, local05
0d59c     FD 12 02 F6 | 	mov	arg01, result1
0d5a0     0C 4E 05 F1 | 	add	fp, #12
0d5a4     A7 14 02 FB | 	rdlong	arg02, fp
0d5a8     0C 4E 85 F1 | 	sub	fp, #12
0d5ac     01 16 06 F6 | 	mov	arg03, #1
0d5b0     F8 B3 B0 FD | 	call	#__system___float_cmp
0d5b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0d5b8     00 1E 26 A6 |  if_e	not	local01, #0
0d5bc     A7 1E 62 FC | 	wrlong	local01, fp
0d5c0     7C 01 90 FD | 	jmp	#LR__1100
0d5c4                 | LR__1094
0d5c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0d5c4     08 4E 05 F1 | 	add	fp, #8
0d5c8     A7 1E 02 FB | 	rdlong	local01, fp
0d5cc     08 4E 85 F1 | 	sub	fp, #8
0d5d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d5d4     14 4E 05 A1 |  if_e	add	fp, #20
0d5d8     A7 22 02 AB |  if_e	rdlong	local03, fp
0d5dc     14 4E 85 A1 |  if_e	sub	fp, #20
0d5e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d5e4     24 00 90 5D |  if_ne	jmp	#LR__1095
0d5e8     00 1E 06 F6 | 	mov	local01, #0
0d5ec     A7 20 02 FB | 	rdlong	local02, fp
0d5f0     0C 4E 05 F1 | 	add	fp, #12
0d5f4     A7 22 02 FB | 	rdlong	local03, fp
0d5f8     0C 4E 85 F1 | 	sub	fp, #12
0d5fc     11 21 0A F2 | 	cmp	local02, local03 wz
0d600     01 1E 66 A6 |  if_e	neg	local01, #1
0d604     A7 1E 62 FC | 	wrlong	local01, fp
0d608     34 01 90 FD | 	jmp	#LR__1100
0d60c                 | LR__1095
0d60c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0d60c     08 4E 05 F1 | 	add	fp, #8
0d610     A7 1E 02 FB | 	rdlong	local01, fp
0d614     08 4E 85 F1 | 	sub	fp, #8
0d618     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d61c     14 4E 05 A1 |  if_e	add	fp, #20
0d620     A7 22 02 AB |  if_e	rdlong	local03, fp
0d624     14 4E 85 A1 |  if_e	sub	fp, #20
0d628     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d62c     24 00 90 5D |  if_ne	jmp	#LR__1096
0d630     00 1E 06 F6 | 	mov	local01, #0
0d634     A7 20 02 FB | 	rdlong	local02, fp
0d638     0C 4E 05 F1 | 	add	fp, #12
0d63c     A7 22 02 FB | 	rdlong	local03, fp
0d640     0C 4E 85 F1 | 	sub	fp, #12
0d644     11 21 0A F2 | 	cmp	local02, local03 wz
0d648     01 1E 66 A6 |  if_e	neg	local01, #1
0d64c     A7 1E 62 FC | 	wrlong	local01, fp
0d650     EC 00 90 FD | 	jmp	#LR__1100
0d654                 | LR__1096
0d654                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0d654     08 4E 05 F1 | 	add	fp, #8
0d658     A7 1E 02 FB | 	rdlong	local01, fp
0d65c     08 4E 85 F1 | 	sub	fp, #8
0d660     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d664     14 4E 05 A1 |  if_e	add	fp, #20
0d668     A7 22 02 AB |  if_e	rdlong	local03, fp
0d66c     14 4E 85 A1 |  if_e	sub	fp, #20
0d670     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d674     34 00 90 5D |  if_ne	jmp	#LR__1097
0d678     00 1E 06 F6 | 	mov	local01, #0
0d67c     A7 12 02 FB | 	rdlong	arg01, fp
0d680     C8 AB B0 FD | 	call	#__system___float_fromuns
0d684     FD 12 02 F6 | 	mov	arg01, result1
0d688     0C 4E 05 F1 | 	add	fp, #12
0d68c     A7 14 02 FB | 	rdlong	arg02, fp
0d690     0C 4E 85 F1 | 	sub	fp, #12
0d694     01 16 06 F6 | 	mov	arg03, #1
0d698     10 B3 B0 FD | 	call	#__system___float_cmp
0d69c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d6a0     00 1E 26 A6 |  if_e	not	local01, #0
0d6a4     A7 1E 62 FC | 	wrlong	local01, fp
0d6a8     94 00 90 FD | 	jmp	#LR__1100
0d6ac                 | LR__1097
0d6ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0d6ac     08 4E 05 F1 | 	add	fp, #8
0d6b0     A7 1E 02 FB | 	rdlong	local01, fp
0d6b4     08 4E 85 F1 | 	sub	fp, #8
0d6b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d6bc     14 4E 05 A1 |  if_e	add	fp, #20
0d6c0     A7 22 02 AB |  if_e	rdlong	local03, fp
0d6c4     14 4E 85 A1 |  if_e	sub	fp, #20
0d6c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d6cc     24 00 90 5D |  if_ne	jmp	#LR__1098
0d6d0     00 1E 06 F6 | 	mov	local01, #0
0d6d4     A7 20 02 FB | 	rdlong	local02, fp
0d6d8     0C 4E 05 F1 | 	add	fp, #12
0d6dc     A7 22 02 FB | 	rdlong	local03, fp
0d6e0     0C 4E 85 F1 | 	sub	fp, #12
0d6e4     11 21 0A F2 | 	cmp	local02, local03 wz
0d6e8     01 1E 66 A6 |  if_e	neg	local01, #1
0d6ec     A7 1E 62 FC | 	wrlong	local01, fp
0d6f0     4C 00 90 FD | 	jmp	#LR__1100
0d6f4                 | LR__1098
0d6f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0d6f4     08 4E 05 F1 | 	add	fp, #8
0d6f8     A7 1E 02 FB | 	rdlong	local01, fp
0d6fc     08 4E 85 F1 | 	sub	fp, #8
0d700     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d704     14 4E 05 A1 |  if_e	add	fp, #20
0d708     A7 22 02 AB |  if_e	rdlong	local03, fp
0d70c     14 4E 85 A1 |  if_e	sub	fp, #20
0d710     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d714     24 00 90 5D |  if_ne	jmp	#LR__1099
0d718     00 1E 06 F6 | 	mov	local01, #0
0d71c     A7 20 02 FB | 	rdlong	local02, fp
0d720     0C 4E 05 F1 | 	add	fp, #12
0d724     A7 22 02 FB | 	rdlong	local03, fp
0d728     0C 4E 85 F1 | 	sub	fp, #12
0d72c     11 21 0A F2 | 	cmp	local02, local03 wz
0d730     01 1E 66 A6 |  if_e	neg	local01, #1
0d734     A7 1E 62 FC | 	wrlong	local01, fp
0d738     04 00 90 FD | 	jmp	#LR__1100
0d73c                 | LR__1099
0d73c     A7 00 68 FC | 	wrlong	#0, fp
0d740                 | LR__1100
0d740     08 4E 05 F1 | 	add	fp, #8
0d744     A7 38 68 FC | 	wrlong	#28, fp
0d748     08 4E 85 F1 | 	sub	fp, #8
0d74c     A7 12 02 F6 | 	mov	arg01, fp
0d750     F0 B2 BF FD | 	call	#_push
0d754     A7 F0 03 F6 | 	mov	ptra, fp
0d758     B2 00 A0 FD | 	call	#popregs_
0d75c                 | _do_eq_ret
0d75c     2D 00 64 FD | 	ret
0d760                 | 
0d760                 | ' 
0d760                 | ' sub do_gt
0d760                 | _do_gt
0d760     05 4A 05 F6 | 	mov	COUNT_, #5
0d764     A8 00 A0 FD | 	call	#pushregs_
0d768     18 F0 07 F1 | 	add	ptra, #24
0d76c     3C B2 BF FD | 	call	#_pop
0d770     FD 1E 02 F6 | 	mov	local01, result1
0d774     FE 20 02 F6 | 	mov	local02, result2
0d778     FF 22 02 F6 | 	mov	local03, result3
0d77c     0C 4E 05 F1 | 	add	fp, #12
0d780     A7 1E 62 FC | 	wrlong	local01, fp
0d784     04 4E 05 F1 | 	add	fp, #4
0d788     A7 20 62 FC | 	wrlong	local02, fp
0d78c     04 4E 05 F1 | 	add	fp, #4
0d790     A7 22 62 FC | 	wrlong	local03, fp
0d794     14 4E 85 F1 | 	sub	fp, #20
0d798     10 B2 BF FD | 	call	#_pop
0d79c     FF 22 02 F6 | 	mov	local03, result3
0d7a0     A7 FA 61 FC | 	wrlong	result1, fp
0d7a4     04 4E 05 F1 | 	add	fp, #4
0d7a8     A7 FC 61 FC | 	wrlong	result2, fp
0d7ac     04 4E 05 F1 | 	add	fp, #4
0d7b0     A7 22 62 FC | 	wrlong	local03, fp
0d7b4                 | ' t2=pop()
0d7b4                 | ' t1=pop()
0d7b4                 | ' 
0d7b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0d7b4     08 4E 85 F1 | 	sub	fp, #8
0d7b8     1F 22 0E F2 | 	cmp	local03, #31 wz
0d7bc     14 4E 05 A1 |  if_e	add	fp, #20
0d7c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d7c4     14 4E 85 A1 |  if_e	sub	fp, #20
0d7c8     12 23 02 A6 |  if_e	mov	local03, local04
0d7cc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d7d0     28 00 90 5D |  if_ne	jmp	#LR__1110
0d7d4     00 1E 06 F6 | 	mov	local01, #0
0d7d8     A7 12 02 FB | 	rdlong	arg01, fp
0d7dc     0C 4E 05 F1 | 	add	fp, #12
0d7e0     A7 14 02 FB | 	rdlong	arg02, fp
0d7e4     0C 4E 85 F1 | 	sub	fp, #12
0d7e8     A0 83 B0 FD | 	call	#__system___string_cmp
0d7ec     01 FA 55 F2 | 	cmps	result1, #1 wc
0d7f0     00 1E 26 36 |  if_ae	not	local01, #0
0d7f4     A7 1E 62 FC | 	wrlong	local01, fp
0d7f8     04 03 90 FD | 	jmp	#LR__1120
0d7fc                 | LR__1110
0d7fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0d7fc     08 4E 05 F1 | 	add	fp, #8
0d800     A7 1E 02 FB | 	rdlong	local01, fp
0d804     08 4E 85 F1 | 	sub	fp, #8
0d808     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d80c     14 4E 05 A1 |  if_e	add	fp, #20
0d810     A7 24 02 AB |  if_e	rdlong	local04, fp
0d814     14 4E 85 A1 |  if_e	sub	fp, #20
0d818     12 23 02 A6 |  if_e	mov	local03, local04
0d81c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d820     2C 00 90 5D |  if_ne	jmp	#LR__1111
0d824     00 1E 06 F6 | 	mov	local01, #0
0d828     A7 12 02 FB | 	rdlong	arg01, fp
0d82c     0C 4E 05 F1 | 	add	fp, #12
0d830     A7 14 02 FB | 	rdlong	arg02, fp
0d834     0C 4E 85 F1 | 	sub	fp, #12
0d838     01 16 66 F6 | 	neg	arg03, #1
0d83c     6C B1 B0 FD | 	call	#__system___float_cmp
0d840     01 FA 55 F2 | 	cmps	result1, #1 wc
0d844     00 1E 26 36 |  if_ae	not	local01, #0
0d848     A7 1E 62 FC | 	wrlong	local01, fp
0d84c     B0 02 90 FD | 	jmp	#LR__1120
0d850                 | LR__1111
0d850                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0d850     08 4E 05 F1 | 	add	fp, #8
0d854     A7 1E 02 FB | 	rdlong	local01, fp
0d858     08 4E 85 F1 | 	sub	fp, #8
0d85c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d860     14 4E 05 A1 |  if_e	add	fp, #20
0d864     A7 24 02 AB |  if_e	rdlong	local04, fp
0d868     14 4E 85 A1 |  if_e	sub	fp, #20
0d86c     12 23 02 A6 |  if_e	mov	local03, local04
0d870     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d874     48 00 90 5D |  if_ne	jmp	#LR__1112
0d878     00 1E 06 F6 | 	mov	local01, #0
0d87c     A7 20 02 FB | 	rdlong	local02, fp
0d880     0C 4E 05 F1 | 	add	fp, #12
0d884     A7 12 02 FB | 	rdlong	arg01, fp
0d888     0C 4E 85 F1 | 	sub	fp, #12
0d88c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d890     1F 26 C6 C9 |  if_b	decod	local05, #31
0d894     00 26 06 36 |  if_ae	mov	local05, #0
0d898     B0 A9 B0 FD | 	call	#__system___float_fromuns
0d89c     13 FB 61 F5 | 	xor	result1, local05
0d8a0     FD 14 02 F6 | 	mov	arg02, result1
0d8a4     10 13 02 F6 | 	mov	arg01, local02
0d8a8     01 16 66 F6 | 	neg	arg03, #1
0d8ac     FC B0 B0 FD | 	call	#__system___float_cmp
0d8b0     01 FA 55 F2 | 	cmps	result1, #1 wc
0d8b4     00 1E 26 36 |  if_ae	not	local01, #0
0d8b8     A7 1E 62 FC | 	wrlong	local01, fp
0d8bc     40 02 90 FD | 	jmp	#LR__1120
0d8c0                 | LR__1112
0d8c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0d8c0     08 4E 05 F1 | 	add	fp, #8
0d8c4     A7 1E 02 FB | 	rdlong	local01, fp
0d8c8     08 4E 85 F1 | 	sub	fp, #8
0d8cc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d8d0     14 4E 05 A1 |  if_e	add	fp, #20
0d8d4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8d8     14 4E 85 A1 |  if_e	sub	fp, #20
0d8dc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d8e0     38 00 90 5D |  if_ne	jmp	#LR__1113
0d8e4     00 1E 06 F6 | 	mov	local01, #0
0d8e8     A7 20 02 FB | 	rdlong	local02, fp
0d8ec     0C 4E 05 F1 | 	add	fp, #12
0d8f0     A7 12 02 FB | 	rdlong	arg01, fp
0d8f4     0C 4E 85 F1 | 	sub	fp, #12
0d8f8     50 A9 B0 FD | 	call	#__system___float_fromuns
0d8fc     FD 14 02 F6 | 	mov	arg02, result1
0d900     10 13 02 F6 | 	mov	arg01, local02
0d904     01 16 66 F6 | 	neg	arg03, #1
0d908     A0 B0 B0 FD | 	call	#__system___float_cmp
0d90c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d910     00 1E 26 36 |  if_ae	not	local01, #0
0d914     A7 1E 62 FC | 	wrlong	local01, fp
0d918     E4 01 90 FD | 	jmp	#LR__1120
0d91c                 | LR__1113
0d91c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0d91c     08 4E 05 F1 | 	add	fp, #8
0d920     A7 1E 02 FB | 	rdlong	local01, fp
0d924     08 4E 85 F1 | 	sub	fp, #8
0d928     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d92c     14 4E 05 A1 |  if_e	add	fp, #20
0d930     A7 22 02 AB |  if_e	rdlong	local03, fp
0d934     14 4E 85 A1 |  if_e	sub	fp, #20
0d938     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d93c     44 00 90 5D |  if_ne	jmp	#LR__1114
0d940     00 1E 06 F6 | 	mov	local01, #0
0d944     A7 12 02 FB | 	rdlong	arg01, fp
0d948     09 13 52 F6 | 	abs	arg01, arg01 wc
0d94c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d950     00 26 06 36 |  if_ae	mov	local05, #0
0d954     F4 A8 B0 FD | 	call	#__system___float_fromuns
0d958     13 FB 61 F5 | 	xor	result1, local05
0d95c     FD 12 02 F6 | 	mov	arg01, result1
0d960     0C 4E 05 F1 | 	add	fp, #12
0d964     A7 14 02 FB | 	rdlong	arg02, fp
0d968     0C 4E 85 F1 | 	sub	fp, #12
0d96c     01 16 66 F6 | 	neg	arg03, #1
0d970     38 B0 B0 FD | 	call	#__system___float_cmp
0d974     01 FA 55 F2 | 	cmps	result1, #1 wc
0d978     00 1E 26 36 |  if_ae	not	local01, #0
0d97c     A7 1E 62 FC | 	wrlong	local01, fp
0d980     7C 01 90 FD | 	jmp	#LR__1120
0d984                 | LR__1114
0d984                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0d984     08 4E 05 F1 | 	add	fp, #8
0d988     A7 1E 02 FB | 	rdlong	local01, fp
0d98c     08 4E 85 F1 | 	sub	fp, #8
0d990     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d994     14 4E 05 A1 |  if_e	add	fp, #20
0d998     A7 22 02 AB |  if_e	rdlong	local03, fp
0d99c     14 4E 85 A1 |  if_e	sub	fp, #20
0d9a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d9a4     24 00 90 5D |  if_ne	jmp	#LR__1115
0d9a8     00 1E 06 F6 | 	mov	local01, #0
0d9ac     A7 20 02 FB | 	rdlong	local02, fp
0d9b0     0C 4E 05 F1 | 	add	fp, #12
0d9b4     A7 22 02 FB | 	rdlong	local03, fp
0d9b8     0C 4E 85 F1 | 	sub	fp, #12
0d9bc     11 21 5A F2 | 	cmps	local02, local03 wcz
0d9c0     01 1E 66 16 |  if_a	neg	local01, #1
0d9c4     A7 1E 62 FC | 	wrlong	local01, fp
0d9c8     34 01 90 FD | 	jmp	#LR__1120
0d9cc                 | LR__1115
0d9cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0d9cc     08 4E 05 F1 | 	add	fp, #8
0d9d0     A7 1E 02 FB | 	rdlong	local01, fp
0d9d4     08 4E 85 F1 | 	sub	fp, #8
0d9d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d9dc     14 4E 05 A1 |  if_e	add	fp, #20
0d9e0     A7 22 02 AB |  if_e	rdlong	local03, fp
0d9e4     14 4E 85 A1 |  if_e	sub	fp, #20
0d9e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d9ec     24 00 90 5D |  if_ne	jmp	#LR__1116
0d9f0     00 1E 06 F6 | 	mov	local01, #0
0d9f4     A7 20 02 FB | 	rdlong	local02, fp
0d9f8     0C 4E 05 F1 | 	add	fp, #12
0d9fc     A7 22 02 FB | 	rdlong	local03, fp
0da00     0C 4E 85 F1 | 	sub	fp, #12
0da04     11 21 5A F2 | 	cmps	local02, local03 wcz
0da08     01 1E 66 16 |  if_a	neg	local01, #1
0da0c     A7 1E 62 FC | 	wrlong	local01, fp
0da10     EC 00 90 FD | 	jmp	#LR__1120
0da14                 | LR__1116
0da14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0da14     08 4E 05 F1 | 	add	fp, #8
0da18     A7 1E 02 FB | 	rdlong	local01, fp
0da1c     08 4E 85 F1 | 	sub	fp, #8
0da20     1D 1E 0E F2 | 	cmp	local01, #29 wz
0da24     14 4E 05 A1 |  if_e	add	fp, #20
0da28     A7 22 02 AB |  if_e	rdlong	local03, fp
0da2c     14 4E 85 A1 |  if_e	sub	fp, #20
0da30     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0da34     34 00 90 5D |  if_ne	jmp	#LR__1117
0da38     00 1E 06 F6 | 	mov	local01, #0
0da3c     A7 12 02 FB | 	rdlong	arg01, fp
0da40     08 A8 B0 FD | 	call	#__system___float_fromuns
0da44     FD 12 02 F6 | 	mov	arg01, result1
0da48     0C 4E 05 F1 | 	add	fp, #12
0da4c     A7 14 02 FB | 	rdlong	arg02, fp
0da50     0C 4E 85 F1 | 	sub	fp, #12
0da54     01 16 66 F6 | 	neg	arg03, #1
0da58     50 AF B0 FD | 	call	#__system___float_cmp
0da5c     01 FA 55 F2 | 	cmps	result1, #1 wc
0da60     00 1E 26 36 |  if_ae	not	local01, #0
0da64     A7 1E 62 FC | 	wrlong	local01, fp
0da68     94 00 90 FD | 	jmp	#LR__1120
0da6c                 | LR__1117
0da6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0da6c     08 4E 05 F1 | 	add	fp, #8
0da70     A7 1E 02 FB | 	rdlong	local01, fp
0da74     08 4E 85 F1 | 	sub	fp, #8
0da78     1D 1E 0E F2 | 	cmp	local01, #29 wz
0da7c     14 4E 05 A1 |  if_e	add	fp, #20
0da80     A7 22 02 AB |  if_e	rdlong	local03, fp
0da84     14 4E 85 A1 |  if_e	sub	fp, #20
0da88     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0da8c     24 00 90 5D |  if_ne	jmp	#LR__1118
0da90     00 1E 06 F6 | 	mov	local01, #0
0da94     A7 20 02 FB | 	rdlong	local02, fp
0da98     0C 4E 05 F1 | 	add	fp, #12
0da9c     A7 22 02 FB | 	rdlong	local03, fp
0daa0     0C 4E 85 F1 | 	sub	fp, #12
0daa4     11 21 5A F2 | 	cmps	local02, local03 wcz
0daa8     01 1E 66 16 |  if_a	neg	local01, #1
0daac     A7 1E 62 FC | 	wrlong	local01, fp
0dab0     4C 00 90 FD | 	jmp	#LR__1120
0dab4                 | LR__1118
0dab4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0dab4     08 4E 05 F1 | 	add	fp, #8
0dab8     A7 1E 02 FB | 	rdlong	local01, fp
0dabc     08 4E 85 F1 | 	sub	fp, #8
0dac0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dac4     14 4E 05 A1 |  if_e	add	fp, #20
0dac8     A7 22 02 AB |  if_e	rdlong	local03, fp
0dacc     14 4E 85 A1 |  if_e	sub	fp, #20
0dad0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dad4     24 00 90 5D |  if_ne	jmp	#LR__1119
0dad8     00 1E 06 F6 | 	mov	local01, #0
0dadc     A7 20 02 FB | 	rdlong	local02, fp
0dae0     0C 4E 05 F1 | 	add	fp, #12
0dae4     A7 22 02 FB | 	rdlong	local03, fp
0dae8     0C 4E 85 F1 | 	sub	fp, #12
0daec     11 21 1A F2 | 	cmp	local02, local03 wcz
0daf0     01 1E 66 16 |  if_a	neg	local01, #1
0daf4     A7 1E 62 FC | 	wrlong	local01, fp
0daf8     04 00 90 FD | 	jmp	#LR__1120
0dafc                 | LR__1119
0dafc     A7 00 68 FC | 	wrlong	#0, fp
0db00                 | LR__1120
0db00     08 4E 05 F1 | 	add	fp, #8
0db04     A7 38 68 FC | 	wrlong	#28, fp
0db08     08 4E 85 F1 | 	sub	fp, #8
0db0c     A7 12 02 F6 | 	mov	arg01, fp
0db10     30 AF BF FD | 	call	#_push
0db14     A7 F0 03 F6 | 	mov	ptra, fp
0db18     B2 00 A0 FD | 	call	#popregs_
0db1c                 | _do_gt_ret
0db1c     2D 00 64 FD | 	ret
0db20                 | 
0db20                 | ' 
0db20                 | ' sub do_lt
0db20                 | _do_lt
0db20     05 4A 05 F6 | 	mov	COUNT_, #5
0db24     A8 00 A0 FD | 	call	#pushregs_
0db28     18 F0 07 F1 | 	add	ptra, #24
0db2c     7C AE BF FD | 	call	#_pop
0db30     FD 1E 02 F6 | 	mov	local01, result1
0db34     FE 20 02 F6 | 	mov	local02, result2
0db38     FF 22 02 F6 | 	mov	local03, result3
0db3c     0C 4E 05 F1 | 	add	fp, #12
0db40     A7 1E 62 FC | 	wrlong	local01, fp
0db44     04 4E 05 F1 | 	add	fp, #4
0db48     A7 20 62 FC | 	wrlong	local02, fp
0db4c     04 4E 05 F1 | 	add	fp, #4
0db50     A7 22 62 FC | 	wrlong	local03, fp
0db54     14 4E 85 F1 | 	sub	fp, #20
0db58     50 AE BF FD | 	call	#_pop
0db5c     FF 22 02 F6 | 	mov	local03, result3
0db60     A7 FA 61 FC | 	wrlong	result1, fp
0db64     04 4E 05 F1 | 	add	fp, #4
0db68     A7 FC 61 FC | 	wrlong	result2, fp
0db6c     04 4E 05 F1 | 	add	fp, #4
0db70     A7 22 62 FC | 	wrlong	local03, fp
0db74                 | ' t2=pop()
0db74                 | ' t1=pop()
0db74                 | ' 
0db74                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0db74     08 4E 85 F1 | 	sub	fp, #8
0db78     1F 22 0E F2 | 	cmp	local03, #31 wz
0db7c     14 4E 05 A1 |  if_e	add	fp, #20
0db80     A7 24 02 AB |  if_e	rdlong	local04, fp
0db84     14 4E 85 A1 |  if_e	sub	fp, #20
0db88     12 23 02 A6 |  if_e	mov	local03, local04
0db8c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0db90     28 00 90 5D |  if_ne	jmp	#LR__1130
0db94     00 1E 06 F6 | 	mov	local01, #0
0db98     A7 12 02 FB | 	rdlong	arg01, fp
0db9c     0C 4E 05 F1 | 	add	fp, #12
0dba0     A7 14 02 FB | 	rdlong	arg02, fp
0dba4     0C 4E 85 F1 | 	sub	fp, #12
0dba8     E0 7F B0 FD | 	call	#__system___string_cmp
0dbac     00 FA 55 F2 | 	cmps	result1, #0 wc
0dbb0     00 1E 26 C6 |  if_b	not	local01, #0
0dbb4     A7 1E 62 FC | 	wrlong	local01, fp
0dbb8     F4 02 90 FD | 	jmp	#LR__1140
0dbbc                 | LR__1130
0dbbc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0dbbc     08 4E 05 F1 | 	add	fp, #8
0dbc0     A7 1E 02 FB | 	rdlong	local01, fp
0dbc4     08 4E 85 F1 | 	sub	fp, #8
0dbc8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dbcc     14 4E 05 A1 |  if_e	add	fp, #20
0dbd0     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbd4     14 4E 85 A1 |  if_e	sub	fp, #20
0dbd8     12 23 02 A6 |  if_e	mov	local03, local04
0dbdc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dbe0     2C 00 90 5D |  if_ne	jmp	#LR__1131
0dbe4     00 1E 06 F6 | 	mov	local01, #0
0dbe8     A7 12 02 FB | 	rdlong	arg01, fp
0dbec     0C 4E 05 F1 | 	add	fp, #12
0dbf0     A7 14 02 FB | 	rdlong	arg02, fp
0dbf4     0C 4E 85 F1 | 	sub	fp, #12
0dbf8     01 16 06 F6 | 	mov	arg03, #1
0dbfc     AC AD B0 FD | 	call	#__system___float_cmp
0dc00     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc04     00 1E 26 C6 |  if_b	not	local01, #0
0dc08     A7 1E 62 FC | 	wrlong	local01, fp
0dc0c     A0 02 90 FD | 	jmp	#LR__1140
0dc10                 | LR__1131
0dc10                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0dc10     08 4E 05 F1 | 	add	fp, #8
0dc14     A7 1E 02 FB | 	rdlong	local01, fp
0dc18     08 4E 85 F1 | 	sub	fp, #8
0dc1c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc20     14 4E 05 A1 |  if_e	add	fp, #20
0dc24     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc28     14 4E 85 A1 |  if_e	sub	fp, #20
0dc2c     12 23 02 A6 |  if_e	mov	local03, local04
0dc30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dc34     48 00 90 5D |  if_ne	jmp	#LR__1132
0dc38     00 1E 06 F6 | 	mov	local01, #0
0dc3c     A7 20 02 FB | 	rdlong	local02, fp
0dc40     0C 4E 05 F1 | 	add	fp, #12
0dc44     A7 12 02 FB | 	rdlong	arg01, fp
0dc48     0C 4E 85 F1 | 	sub	fp, #12
0dc4c     09 13 52 F6 | 	abs	arg01, arg01 wc
0dc50     1F 26 C6 C9 |  if_b	decod	local05, #31
0dc54     00 26 06 36 |  if_ae	mov	local05, #0
0dc58     F0 A5 B0 FD | 	call	#__system___float_fromuns
0dc5c     13 FB 61 F5 | 	xor	result1, local05
0dc60     FD 14 02 F6 | 	mov	arg02, result1
0dc64     10 13 02 F6 | 	mov	arg01, local02
0dc68     01 16 06 F6 | 	mov	arg03, #1
0dc6c     3C AD B0 FD | 	call	#__system___float_cmp
0dc70     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc74     00 1E 26 C6 |  if_b	not	local01, #0
0dc78     A7 1E 62 FC | 	wrlong	local01, fp
0dc7c     30 02 90 FD | 	jmp	#LR__1140
0dc80                 | LR__1132
0dc80                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0dc80     08 4E 05 F1 | 	add	fp, #8
0dc84     A7 1E 02 FB | 	rdlong	local01, fp
0dc88     08 4E 85 F1 | 	sub	fp, #8
0dc8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc90     14 4E 05 A1 |  if_e	add	fp, #20
0dc94     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc98     14 4E 85 A1 |  if_e	sub	fp, #20
0dc9c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0dca0     38 00 90 5D |  if_ne	jmp	#LR__1133
0dca4     00 1E 06 F6 | 	mov	local01, #0
0dca8     A7 20 02 FB | 	rdlong	local02, fp
0dcac     0C 4E 05 F1 | 	add	fp, #12
0dcb0     A7 12 02 FB | 	rdlong	arg01, fp
0dcb4     0C 4E 85 F1 | 	sub	fp, #12
0dcb8     90 A5 B0 FD | 	call	#__system___float_fromuns
0dcbc     FD 14 02 F6 | 	mov	arg02, result1
0dcc0     10 13 02 F6 | 	mov	arg01, local02
0dcc4     01 16 06 F6 | 	mov	arg03, #1
0dcc8     E0 AC B0 FD | 	call	#__system___float_cmp
0dccc     00 FA 55 F2 | 	cmps	result1, #0 wc
0dcd0     00 1E 26 C6 |  if_b	not	local01, #0
0dcd4     A7 1E 62 FC | 	wrlong	local01, fp
0dcd8     D4 01 90 FD | 	jmp	#LR__1140
0dcdc                 | LR__1133
0dcdc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0dcdc     08 4E 05 F1 | 	add	fp, #8
0dce0     A7 1E 02 FB | 	rdlong	local01, fp
0dce4     08 4E 85 F1 | 	sub	fp, #8
0dce8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dcec     14 4E 05 A1 |  if_e	add	fp, #20
0dcf0     A7 22 02 AB |  if_e	rdlong	local03, fp
0dcf4     14 4E 85 A1 |  if_e	sub	fp, #20
0dcf8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dcfc     44 00 90 5D |  if_ne	jmp	#LR__1134
0dd00     00 1E 06 F6 | 	mov	local01, #0
0dd04     A7 12 02 FB | 	rdlong	arg01, fp
0dd08     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd0c     1F 26 C6 C9 |  if_b	decod	local05, #31
0dd10     00 26 06 36 |  if_ae	mov	local05, #0
0dd14     34 A5 B0 FD | 	call	#__system___float_fromuns
0dd18     13 FB 61 F5 | 	xor	result1, local05
0dd1c     FD 12 02 F6 | 	mov	arg01, result1
0dd20     0C 4E 05 F1 | 	add	fp, #12
0dd24     A7 14 02 FB | 	rdlong	arg02, fp
0dd28     0C 4E 85 F1 | 	sub	fp, #12
0dd2c     01 16 06 F6 | 	mov	arg03, #1
0dd30     78 AC B0 FD | 	call	#__system___float_cmp
0dd34     00 FA 55 F2 | 	cmps	result1, #0 wc
0dd38     00 1E 26 C6 |  if_b	not	local01, #0
0dd3c     A7 1E 62 FC | 	wrlong	local01, fp
0dd40     6C 01 90 FD | 	jmp	#LR__1140
0dd44                 | LR__1134
0dd44                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0dd44     08 4E 05 F1 | 	add	fp, #8
0dd48     A7 1E 02 FB | 	rdlong	local01, fp
0dd4c     08 4E 85 F1 | 	sub	fp, #8
0dd50     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd54     14 4E 05 A1 |  if_e	add	fp, #20
0dd58     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd5c     14 4E 85 A1 |  if_e	sub	fp, #20
0dd60     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dd64     20 00 90 5D |  if_ne	jmp	#LR__1135
0dd68     A7 20 02 FB | 	rdlong	local02, fp
0dd6c     0C 4E 05 F1 | 	add	fp, #12
0dd70     A7 22 02 FB | 	rdlong	local03, fp
0dd74     0C 4E 85 F1 | 	sub	fp, #12
0dd78     11 21 52 F2 | 	cmps	local02, local03 wc
0dd7c     0F 1F A2 F1 | 	subx	local01, local01
0dd80     A7 1E 62 FC | 	wrlong	local01, fp
0dd84     28 01 90 FD | 	jmp	#LR__1140
0dd88                 | LR__1135
0dd88                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0dd88     08 4E 05 F1 | 	add	fp, #8
0dd8c     A7 1E 02 FB | 	rdlong	local01, fp
0dd90     08 4E 85 F1 | 	sub	fp, #8
0dd94     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd98     14 4E 05 A1 |  if_e	add	fp, #20
0dd9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dda0     14 4E 85 A1 |  if_e	sub	fp, #20
0dda4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dda8     20 00 90 5D |  if_ne	jmp	#LR__1136
0ddac     A7 20 02 FB | 	rdlong	local02, fp
0ddb0     0C 4E 05 F1 | 	add	fp, #12
0ddb4     A7 22 02 FB | 	rdlong	local03, fp
0ddb8     0C 4E 85 F1 | 	sub	fp, #12
0ddbc     11 21 52 F2 | 	cmps	local02, local03 wc
0ddc0     0F 1F A2 F1 | 	subx	local01, local01
0ddc4     A7 1E 62 FC | 	wrlong	local01, fp
0ddc8     E4 00 90 FD | 	jmp	#LR__1140
0ddcc                 | LR__1136
0ddcc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0ddcc     08 4E 05 F1 | 	add	fp, #8
0ddd0     A7 1E 02 FB | 	rdlong	local01, fp
0ddd4     08 4E 85 F1 | 	sub	fp, #8
0ddd8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dddc     14 4E 05 A1 |  if_e	add	fp, #20
0dde0     A7 22 02 AB |  if_e	rdlong	local03, fp
0dde4     14 4E 85 A1 |  if_e	sub	fp, #20
0dde8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ddec     34 00 90 5D |  if_ne	jmp	#LR__1137
0ddf0     00 1E 06 F6 | 	mov	local01, #0
0ddf4     A7 12 02 FB | 	rdlong	arg01, fp
0ddf8     50 A4 B0 FD | 	call	#__system___float_fromuns
0ddfc     FD 12 02 F6 | 	mov	arg01, result1
0de00     0C 4E 05 F1 | 	add	fp, #12
0de04     A7 14 02 FB | 	rdlong	arg02, fp
0de08     0C 4E 85 F1 | 	sub	fp, #12
0de0c     01 16 06 F6 | 	mov	arg03, #1
0de10     98 AB B0 FD | 	call	#__system___float_cmp
0de14     00 FA 55 F2 | 	cmps	result1, #0 wc
0de18     00 1E 26 C6 |  if_b	not	local01, #0
0de1c     A7 1E 62 FC | 	wrlong	local01, fp
0de20     8C 00 90 FD | 	jmp	#LR__1140
0de24                 | LR__1137
0de24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0de24     08 4E 05 F1 | 	add	fp, #8
0de28     A7 1E 02 FB | 	rdlong	local01, fp
0de2c     08 4E 85 F1 | 	sub	fp, #8
0de30     1D 1E 0E F2 | 	cmp	local01, #29 wz
0de34     14 4E 05 A1 |  if_e	add	fp, #20
0de38     A7 22 02 AB |  if_e	rdlong	local03, fp
0de3c     14 4E 85 A1 |  if_e	sub	fp, #20
0de40     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0de44     20 00 90 5D |  if_ne	jmp	#LR__1138
0de48     A7 20 02 FB | 	rdlong	local02, fp
0de4c     0C 4E 05 F1 | 	add	fp, #12
0de50     A7 22 02 FB | 	rdlong	local03, fp
0de54     0C 4E 85 F1 | 	sub	fp, #12
0de58     11 21 52 F2 | 	cmps	local02, local03 wc
0de5c     0F 1F A2 F1 | 	subx	local01, local01
0de60     A7 1E 62 FC | 	wrlong	local01, fp
0de64     48 00 90 FD | 	jmp	#LR__1140
0de68                 | LR__1138
0de68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0de68     08 4E 05 F1 | 	add	fp, #8
0de6c     A7 1E 02 FB | 	rdlong	local01, fp
0de70     08 4E 85 F1 | 	sub	fp, #8
0de74     1D 1E 0E F2 | 	cmp	local01, #29 wz
0de78     14 4E 05 A1 |  if_e	add	fp, #20
0de7c     A7 22 02 AB |  if_e	rdlong	local03, fp
0de80     14 4E 85 A1 |  if_e	sub	fp, #20
0de84     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0de88     20 00 90 5D |  if_ne	jmp	#LR__1139
0de8c     A7 20 02 FB | 	rdlong	local02, fp
0de90     0C 4E 05 F1 | 	add	fp, #12
0de94     A7 22 02 FB | 	rdlong	local03, fp
0de98     0C 4E 85 F1 | 	sub	fp, #12
0de9c     11 21 12 F2 | 	cmp	local02, local03 wc
0dea0     0F 1F A2 F1 | 	subx	local01, local01
0dea4     A7 1E 62 FC | 	wrlong	local01, fp
0dea8     04 00 90 FD | 	jmp	#LR__1140
0deac                 | LR__1139
0deac     A7 00 68 FC | 	wrlong	#0, fp
0deb0                 | LR__1140
0deb0     08 4E 05 F1 | 	add	fp, #8
0deb4     A7 38 68 FC | 	wrlong	#28, fp
0deb8     08 4E 85 F1 | 	sub	fp, #8
0debc     A7 12 02 F6 | 	mov	arg01, fp
0dec0     80 AB BF FD | 	call	#_push
0dec4     A7 F0 03 F6 | 	mov	ptra, fp
0dec8     B2 00 A0 FD | 	call	#popregs_
0decc                 | _do_lt_ret
0decc     2D 00 64 FD | 	ret
0ded0                 | 
0ded0                 | ' 
0ded0                 | ' sub do_ge
0ded0                 | _do_ge
0ded0     05 4A 05 F6 | 	mov	COUNT_, #5
0ded4     A8 00 A0 FD | 	call	#pushregs_
0ded8     18 F0 07 F1 | 	add	ptra, #24
0dedc     CC AA BF FD | 	call	#_pop
0dee0     FD 1E 02 F6 | 	mov	local01, result1
0dee4     FE 20 02 F6 | 	mov	local02, result2
0dee8     FF 22 02 F6 | 	mov	local03, result3
0deec     0C 4E 05 F1 | 	add	fp, #12
0def0     A7 1E 62 FC | 	wrlong	local01, fp
0def4     04 4E 05 F1 | 	add	fp, #4
0def8     A7 20 62 FC | 	wrlong	local02, fp
0defc     04 4E 05 F1 | 	add	fp, #4
0df00     A7 22 62 FC | 	wrlong	local03, fp
0df04     14 4E 85 F1 | 	sub	fp, #20
0df08     A0 AA BF FD | 	call	#_pop
0df0c     FF 22 02 F6 | 	mov	local03, result3
0df10     A7 FA 61 FC | 	wrlong	result1, fp
0df14     04 4E 05 F1 | 	add	fp, #4
0df18     A7 FC 61 FC | 	wrlong	result2, fp
0df1c     04 4E 05 F1 | 	add	fp, #4
0df20     A7 22 62 FC | 	wrlong	local03, fp
0df24                 | ' t2=pop()
0df24                 | ' t1=pop()
0df24                 | ' 
0df24                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0df24     08 4E 85 F1 | 	sub	fp, #8
0df28     1F 22 0E F2 | 	cmp	local03, #31 wz
0df2c     14 4E 05 A1 |  if_e	add	fp, #20
0df30     A7 24 02 AB |  if_e	rdlong	local04, fp
0df34     14 4E 85 A1 |  if_e	sub	fp, #20
0df38     12 23 02 A6 |  if_e	mov	local03, local04
0df3c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0df40     28 00 90 5D |  if_ne	jmp	#LR__1150
0df44     00 1E 06 F6 | 	mov	local01, #0
0df48     A7 12 02 FB | 	rdlong	arg01, fp
0df4c     0C 4E 05 F1 | 	add	fp, #12
0df50     A7 14 02 FB | 	rdlong	arg02, fp
0df54     0C 4E 85 F1 | 	sub	fp, #12
0df58     30 7C B0 FD | 	call	#__system___string_cmp
0df5c     00 FA 55 F2 | 	cmps	result1, #0 wc
0df60     00 1E 26 36 |  if_ae	not	local01, #0
0df64     A7 1E 62 FC | 	wrlong	local01, fp
0df68     04 03 90 FD | 	jmp	#LR__1160
0df6c                 | LR__1150
0df6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0df6c     08 4E 05 F1 | 	add	fp, #8
0df70     A7 1E 02 FB | 	rdlong	local01, fp
0df74     08 4E 85 F1 | 	sub	fp, #8
0df78     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df7c     14 4E 05 A1 |  if_e	add	fp, #20
0df80     A7 24 02 AB |  if_e	rdlong	local04, fp
0df84     14 4E 85 A1 |  if_e	sub	fp, #20
0df88     12 23 02 A6 |  if_e	mov	local03, local04
0df8c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0df90     2C 00 90 5D |  if_ne	jmp	#LR__1151
0df94     00 1E 06 F6 | 	mov	local01, #0
0df98     A7 12 02 FB | 	rdlong	arg01, fp
0df9c     0C 4E 05 F1 | 	add	fp, #12
0dfa0     A7 14 02 FB | 	rdlong	arg02, fp
0dfa4     0C 4E 85 F1 | 	sub	fp, #12
0dfa8     01 16 66 F6 | 	neg	arg03, #1
0dfac     FC A9 B0 FD | 	call	#__system___float_cmp
0dfb0     00 FA 55 F2 | 	cmps	result1, #0 wc
0dfb4     00 1E 26 36 |  if_ae	not	local01, #0
0dfb8     A7 1E 62 FC | 	wrlong	local01, fp
0dfbc     B0 02 90 FD | 	jmp	#LR__1160
0dfc0                 | LR__1151
0dfc0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0dfc0     08 4E 05 F1 | 	add	fp, #8
0dfc4     A7 1E 02 FB | 	rdlong	local01, fp
0dfc8     08 4E 85 F1 | 	sub	fp, #8
0dfcc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dfd0     14 4E 05 A1 |  if_e	add	fp, #20
0dfd4     A7 24 02 AB |  if_e	rdlong	local04, fp
0dfd8     14 4E 85 A1 |  if_e	sub	fp, #20
0dfdc     12 23 02 A6 |  if_e	mov	local03, local04
0dfe0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dfe4     48 00 90 5D |  if_ne	jmp	#LR__1152
0dfe8     00 1E 06 F6 | 	mov	local01, #0
0dfec     A7 20 02 FB | 	rdlong	local02, fp
0dff0     0C 4E 05 F1 | 	add	fp, #12
0dff4     A7 12 02 FB | 	rdlong	arg01, fp
0dff8     0C 4E 85 F1 | 	sub	fp, #12
0dffc     09 13 52 F6 | 	abs	arg01, arg01 wc
0e000     1F 26 C6 C9 |  if_b	decod	local05, #31
0e004     00 26 06 36 |  if_ae	mov	local05, #0
0e008     40 A2 B0 FD | 	call	#__system___float_fromuns
0e00c     13 FB 61 F5 | 	xor	result1, local05
0e010     FD 14 02 F6 | 	mov	arg02, result1
0e014     10 13 02 F6 | 	mov	arg01, local02
0e018     01 16 66 F6 | 	neg	arg03, #1
0e01c     8C A9 B0 FD | 	call	#__system___float_cmp
0e020     00 FA 55 F2 | 	cmps	result1, #0 wc
0e024     00 1E 26 36 |  if_ae	not	local01, #0
0e028     A7 1E 62 FC | 	wrlong	local01, fp
0e02c     40 02 90 FD | 	jmp	#LR__1160
0e030                 | LR__1152
0e030                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0e030     08 4E 05 F1 | 	add	fp, #8
0e034     A7 1E 02 FB | 	rdlong	local01, fp
0e038     08 4E 85 F1 | 	sub	fp, #8
0e03c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e040     14 4E 05 A1 |  if_e	add	fp, #20
0e044     A7 24 02 AB |  if_e	rdlong	local04, fp
0e048     14 4E 85 A1 |  if_e	sub	fp, #20
0e04c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0e050     38 00 90 5D |  if_ne	jmp	#LR__1153
0e054     00 1E 06 F6 | 	mov	local01, #0
0e058     A7 20 02 FB | 	rdlong	local02, fp
0e05c     0C 4E 05 F1 | 	add	fp, #12
0e060     A7 12 02 FB | 	rdlong	arg01, fp
0e064     0C 4E 85 F1 | 	sub	fp, #12
0e068     E0 A1 B0 FD | 	call	#__system___float_fromuns
0e06c     FD 14 02 F6 | 	mov	arg02, result1
0e070     10 13 02 F6 | 	mov	arg01, local02
0e074     01 16 66 F6 | 	neg	arg03, #1
0e078     30 A9 B0 FD | 	call	#__system___float_cmp
0e07c     00 FA 55 F2 | 	cmps	result1, #0 wc
0e080     00 1E 26 36 |  if_ae	not	local01, #0
0e084     A7 1E 62 FC | 	wrlong	local01, fp
0e088     E4 01 90 FD | 	jmp	#LR__1160
0e08c                 | LR__1153
0e08c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0e08c     08 4E 05 F1 | 	add	fp, #8
0e090     A7 1E 02 FB | 	rdlong	local01, fp
0e094     08 4E 85 F1 | 	sub	fp, #8
0e098     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e09c     14 4E 05 A1 |  if_e	add	fp, #20
0e0a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e0a4     14 4E 85 A1 |  if_e	sub	fp, #20
0e0a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e0ac     44 00 90 5D |  if_ne	jmp	#LR__1154
0e0b0     00 1E 06 F6 | 	mov	local01, #0
0e0b4     A7 12 02 FB | 	rdlong	arg01, fp
0e0b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0bc     1F 26 C6 C9 |  if_b	decod	local05, #31
0e0c0     00 26 06 36 |  if_ae	mov	local05, #0
0e0c4     84 A1 B0 FD | 	call	#__system___float_fromuns
0e0c8     13 FB 61 F5 | 	xor	result1, local05
0e0cc     FD 12 02 F6 | 	mov	arg01, result1
0e0d0     0C 4E 05 F1 | 	add	fp, #12
0e0d4     A7 14 02 FB | 	rdlong	arg02, fp
0e0d8     0C 4E 85 F1 | 	sub	fp, #12
0e0dc     01 16 66 F6 | 	neg	arg03, #1
0e0e0     C8 A8 B0 FD | 	call	#__system___float_cmp
0e0e4     00 FA 55 F2 | 	cmps	result1, #0 wc
0e0e8     00 1E 26 36 |  if_ae	not	local01, #0
0e0ec     A7 1E 62 FC | 	wrlong	local01, fp
0e0f0     7C 01 90 FD | 	jmp	#LR__1160
0e0f4                 | LR__1154
0e0f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0e0f4     08 4E 05 F1 | 	add	fp, #8
0e0f8     A7 1E 02 FB | 	rdlong	local01, fp
0e0fc     08 4E 85 F1 | 	sub	fp, #8
0e100     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e104     14 4E 05 A1 |  if_e	add	fp, #20
0e108     A7 22 02 AB |  if_e	rdlong	local03, fp
0e10c     14 4E 85 A1 |  if_e	sub	fp, #20
0e110     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e114     24 00 90 5D |  if_ne	jmp	#LR__1155
0e118     00 1E 06 F6 | 	mov	local01, #0
0e11c     A7 20 02 FB | 	rdlong	local02, fp
0e120     0C 4E 05 F1 | 	add	fp, #12
0e124     A7 22 02 FB | 	rdlong	local03, fp
0e128     0C 4E 85 F1 | 	sub	fp, #12
0e12c     11 21 52 F2 | 	cmps	local02, local03 wc
0e130     01 1E 66 36 |  if_ae	neg	local01, #1
0e134     A7 1E 62 FC | 	wrlong	local01, fp
0e138     34 01 90 FD | 	jmp	#LR__1160
0e13c                 | LR__1155
0e13c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0e13c     08 4E 05 F1 | 	add	fp, #8
0e140     A7 1E 02 FB | 	rdlong	local01, fp
0e144     08 4E 85 F1 | 	sub	fp, #8
0e148     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e14c     14 4E 05 A1 |  if_e	add	fp, #20
0e150     A7 22 02 AB |  if_e	rdlong	local03, fp
0e154     14 4E 85 A1 |  if_e	sub	fp, #20
0e158     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e15c     24 00 90 5D |  if_ne	jmp	#LR__1156
0e160     00 1E 06 F6 | 	mov	local01, #0
0e164     A7 20 02 FB | 	rdlong	local02, fp
0e168     0C 4E 05 F1 | 	add	fp, #12
0e16c     A7 22 02 FB | 	rdlong	local03, fp
0e170     0C 4E 85 F1 | 	sub	fp, #12
0e174     11 21 52 F2 | 	cmps	local02, local03 wc
0e178     01 1E 66 36 |  if_ae	neg	local01, #1
0e17c     A7 1E 62 FC | 	wrlong	local01, fp
0e180     EC 00 90 FD | 	jmp	#LR__1160
0e184                 | LR__1156
0e184                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0e184     08 4E 05 F1 | 	add	fp, #8
0e188     A7 1E 02 FB | 	rdlong	local01, fp
0e18c     08 4E 85 F1 | 	sub	fp, #8
0e190     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e194     14 4E 05 A1 |  if_e	add	fp, #20
0e198     A7 22 02 AB |  if_e	rdlong	local03, fp
0e19c     14 4E 85 A1 |  if_e	sub	fp, #20
0e1a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e1a4     34 00 90 5D |  if_ne	jmp	#LR__1157
0e1a8     00 1E 06 F6 | 	mov	local01, #0
0e1ac     A7 12 02 FB | 	rdlong	arg01, fp
0e1b0     98 A0 B0 FD | 	call	#__system___float_fromuns
0e1b4     FD 12 02 F6 | 	mov	arg01, result1
0e1b8     0C 4E 05 F1 | 	add	fp, #12
0e1bc     A7 14 02 FB | 	rdlong	arg02, fp
0e1c0     0C 4E 85 F1 | 	sub	fp, #12
0e1c4     01 16 66 F6 | 	neg	arg03, #1
0e1c8     E0 A7 B0 FD | 	call	#__system___float_cmp
0e1cc     00 FA 55 F2 | 	cmps	result1, #0 wc
0e1d0     00 1E 26 36 |  if_ae	not	local01, #0
0e1d4     A7 1E 62 FC | 	wrlong	local01, fp
0e1d8     94 00 90 FD | 	jmp	#LR__1160
0e1dc                 | LR__1157
0e1dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0e1dc     08 4E 05 F1 | 	add	fp, #8
0e1e0     A7 1E 02 FB | 	rdlong	local01, fp
0e1e4     08 4E 85 F1 | 	sub	fp, #8
0e1e8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e1ec     14 4E 05 A1 |  if_e	add	fp, #20
0e1f0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e1f4     14 4E 85 A1 |  if_e	sub	fp, #20
0e1f8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e1fc     24 00 90 5D |  if_ne	jmp	#LR__1158
0e200     00 1E 06 F6 | 	mov	local01, #0
0e204     A7 20 02 FB | 	rdlong	local02, fp
0e208     0C 4E 05 F1 | 	add	fp, #12
0e20c     A7 22 02 FB | 	rdlong	local03, fp
0e210     0C 4E 85 F1 | 	sub	fp, #12
0e214     11 21 52 F2 | 	cmps	local02, local03 wc
0e218     01 1E 66 36 |  if_ae	neg	local01, #1
0e21c     A7 1E 62 FC | 	wrlong	local01, fp
0e220     4C 00 90 FD | 	jmp	#LR__1160
0e224                 | LR__1158
0e224                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0e224     08 4E 05 F1 | 	add	fp, #8
0e228     A7 1E 02 FB | 	rdlong	local01, fp
0e22c     08 4E 85 F1 | 	sub	fp, #8
0e230     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e234     14 4E 05 A1 |  if_e	add	fp, #20
0e238     A7 22 02 AB |  if_e	rdlong	local03, fp
0e23c     14 4E 85 A1 |  if_e	sub	fp, #20
0e240     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e244     24 00 90 5D |  if_ne	jmp	#LR__1159
0e248     00 1E 06 F6 | 	mov	local01, #0
0e24c     A7 20 02 FB | 	rdlong	local02, fp
0e250     0C 4E 05 F1 | 	add	fp, #12
0e254     A7 22 02 FB | 	rdlong	local03, fp
0e258     0C 4E 85 F1 | 	sub	fp, #12
0e25c     11 21 12 F2 | 	cmp	local02, local03 wc
0e260     01 1E 66 36 |  if_ae	neg	local01, #1
0e264     A7 1E 62 FC | 	wrlong	local01, fp
0e268     04 00 90 FD | 	jmp	#LR__1160
0e26c                 | LR__1159
0e26c     A7 00 68 FC | 	wrlong	#0, fp
0e270                 | LR__1160
0e270     08 4E 05 F1 | 	add	fp, #8
0e274     A7 38 68 FC | 	wrlong	#28, fp
0e278     08 4E 85 F1 | 	sub	fp, #8
0e27c     A7 12 02 F6 | 	mov	arg01, fp
0e280     C0 A7 BF FD | 	call	#_push
0e284     A7 F0 03 F6 | 	mov	ptra, fp
0e288     B2 00 A0 FD | 	call	#popregs_
0e28c                 | _do_ge_ret
0e28c     2D 00 64 FD | 	ret
0e290                 | 
0e290                 | ' 
0e290                 | ' sub do_le
0e290                 | _do_le
0e290     05 4A 05 F6 | 	mov	COUNT_, #5
0e294     A8 00 A0 FD | 	call	#pushregs_
0e298     18 F0 07 F1 | 	add	ptra, #24
0e29c     0C A7 BF FD | 	call	#_pop
0e2a0     FD 1E 02 F6 | 	mov	local01, result1
0e2a4     FE 20 02 F6 | 	mov	local02, result2
0e2a8     FF 22 02 F6 | 	mov	local03, result3
0e2ac     0C 4E 05 F1 | 	add	fp, #12
0e2b0     A7 1E 62 FC | 	wrlong	local01, fp
0e2b4     04 4E 05 F1 | 	add	fp, #4
0e2b8     A7 20 62 FC | 	wrlong	local02, fp
0e2bc     04 4E 05 F1 | 	add	fp, #4
0e2c0     A7 22 62 FC | 	wrlong	local03, fp
0e2c4     14 4E 85 F1 | 	sub	fp, #20
0e2c8     E0 A6 BF FD | 	call	#_pop
0e2cc     FF 22 02 F6 | 	mov	local03, result3
0e2d0     A7 FA 61 FC | 	wrlong	result1, fp
0e2d4     04 4E 05 F1 | 	add	fp, #4
0e2d8     A7 FC 61 FC | 	wrlong	result2, fp
0e2dc     04 4E 05 F1 | 	add	fp, #4
0e2e0     A7 22 62 FC | 	wrlong	local03, fp
0e2e4                 | ' t2=pop()
0e2e4                 | ' t1=pop()
0e2e4                 | ' 
0e2e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0e2e4     08 4E 85 F1 | 	sub	fp, #8
0e2e8     1F 22 0E F2 | 	cmp	local03, #31 wz
0e2ec     14 4E 05 A1 |  if_e	add	fp, #20
0e2f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e2f4     14 4E 85 A1 |  if_e	sub	fp, #20
0e2f8     12 23 02 A6 |  if_e	mov	local03, local04
0e2fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e300     28 00 90 5D |  if_ne	jmp	#LR__1170
0e304     00 1E 06 F6 | 	mov	local01, #0
0e308     A7 12 02 FB | 	rdlong	arg01, fp
0e30c     0C 4E 05 F1 | 	add	fp, #12
0e310     A7 14 02 FB | 	rdlong	arg02, fp
0e314     0C 4E 85 F1 | 	sub	fp, #12
0e318     70 78 B0 FD | 	call	#__system___string_cmp
0e31c     01 FA 55 F2 | 	cmps	result1, #1 wc
0e320     00 1E 26 C6 |  if_b	not	local01, #0
0e324     A7 1E 62 FC | 	wrlong	local01, fp
0e328     04 03 90 FD | 	jmp	#LR__1180
0e32c                 | LR__1170
0e32c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0e32c     08 4E 05 F1 | 	add	fp, #8
0e330     A7 1E 02 FB | 	rdlong	local01, fp
0e334     08 4E 85 F1 | 	sub	fp, #8
0e338     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e33c     14 4E 05 A1 |  if_e	add	fp, #20
0e340     A7 24 02 AB |  if_e	rdlong	local04, fp
0e344     14 4E 85 A1 |  if_e	sub	fp, #20
0e348     12 23 02 A6 |  if_e	mov	local03, local04
0e34c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e350     2C 00 90 5D |  if_ne	jmp	#LR__1171
0e354     00 1E 06 F6 | 	mov	local01, #0
0e358     A7 12 02 FB | 	rdlong	arg01, fp
0e35c     0C 4E 05 F1 | 	add	fp, #12
0e360     A7 14 02 FB | 	rdlong	arg02, fp
0e364     0C 4E 85 F1 | 	sub	fp, #12
0e368     01 16 06 F6 | 	mov	arg03, #1
0e36c     3C A6 B0 FD | 	call	#__system___float_cmp
0e370     01 FA 55 F2 | 	cmps	result1, #1 wc
0e374     00 1E 26 C6 |  if_b	not	local01, #0
0e378     A7 1E 62 FC | 	wrlong	local01, fp
0e37c     B0 02 90 FD | 	jmp	#LR__1180
0e380                 | LR__1171
0e380                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0e380     08 4E 05 F1 | 	add	fp, #8
0e384     A7 1E 02 FB | 	rdlong	local01, fp
0e388     08 4E 85 F1 | 	sub	fp, #8
0e38c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e390     14 4E 05 A1 |  if_e	add	fp, #20
0e394     A7 24 02 AB |  if_e	rdlong	local04, fp
0e398     14 4E 85 A1 |  if_e	sub	fp, #20
0e39c     12 23 02 A6 |  if_e	mov	local03, local04
0e3a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e3a4     48 00 90 5D |  if_ne	jmp	#LR__1172
0e3a8     00 1E 06 F6 | 	mov	local01, #0
0e3ac     A7 20 02 FB | 	rdlong	local02, fp
0e3b0     0C 4E 05 F1 | 	add	fp, #12
0e3b4     A7 12 02 FB | 	rdlong	arg01, fp
0e3b8     0C 4E 85 F1 | 	sub	fp, #12
0e3bc     09 13 52 F6 | 	abs	arg01, arg01 wc
0e3c0     1F 26 C6 C9 |  if_b	decod	local05, #31
0e3c4     00 26 06 36 |  if_ae	mov	local05, #0
0e3c8     80 9E B0 FD | 	call	#__system___float_fromuns
0e3cc     13 FB 61 F5 | 	xor	result1, local05
0e3d0     FD 14 02 F6 | 	mov	arg02, result1
0e3d4     10 13 02 F6 | 	mov	arg01, local02
0e3d8     01 16 06 F6 | 	mov	arg03, #1
0e3dc     CC A5 B0 FD | 	call	#__system___float_cmp
0e3e0     01 FA 55 F2 | 	cmps	result1, #1 wc
0e3e4     00 1E 26 C6 |  if_b	not	local01, #0
0e3e8     A7 1E 62 FC | 	wrlong	local01, fp
0e3ec     40 02 90 FD | 	jmp	#LR__1180
0e3f0                 | LR__1172
0e3f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0e3f0     08 4E 05 F1 | 	add	fp, #8
0e3f4     A7 1E 02 FB | 	rdlong	local01, fp
0e3f8     08 4E 85 F1 | 	sub	fp, #8
0e3fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e400     14 4E 05 A1 |  if_e	add	fp, #20
0e404     A7 24 02 AB |  if_e	rdlong	local04, fp
0e408     14 4E 85 A1 |  if_e	sub	fp, #20
0e40c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0e410     38 00 90 5D |  if_ne	jmp	#LR__1173
0e414     00 1E 06 F6 | 	mov	local01, #0
0e418     A7 20 02 FB | 	rdlong	local02, fp
0e41c     0C 4E 05 F1 | 	add	fp, #12
0e420     A7 12 02 FB | 	rdlong	arg01, fp
0e424     0C 4E 85 F1 | 	sub	fp, #12
0e428     20 9E B0 FD | 	call	#__system___float_fromuns
0e42c     FD 14 02 F6 | 	mov	arg02, result1
0e430     10 13 02 F6 | 	mov	arg01, local02
0e434     01 16 06 F6 | 	mov	arg03, #1
0e438     70 A5 B0 FD | 	call	#__system___float_cmp
0e43c     01 FA 55 F2 | 	cmps	result1, #1 wc
0e440     00 1E 26 C6 |  if_b	not	local01, #0
0e444     A7 1E 62 FC | 	wrlong	local01, fp
0e448     E4 01 90 FD | 	jmp	#LR__1180
0e44c                 | LR__1173
0e44c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0e44c     08 4E 05 F1 | 	add	fp, #8
0e450     A7 1E 02 FB | 	rdlong	local01, fp
0e454     08 4E 85 F1 | 	sub	fp, #8
0e458     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e45c     14 4E 05 A1 |  if_e	add	fp, #20
0e460     A7 22 02 AB |  if_e	rdlong	local03, fp
0e464     14 4E 85 A1 |  if_e	sub	fp, #20
0e468     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e46c     44 00 90 5D |  if_ne	jmp	#LR__1174
0e470     00 1E 06 F6 | 	mov	local01, #0
0e474     A7 12 02 FB | 	rdlong	arg01, fp
0e478     09 13 52 F6 | 	abs	arg01, arg01 wc
0e47c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e480     00 26 06 36 |  if_ae	mov	local05, #0
0e484     C4 9D B0 FD | 	call	#__system___float_fromuns
0e488     13 FB 61 F5 | 	xor	result1, local05
0e48c     FD 12 02 F6 | 	mov	arg01, result1
0e490     0C 4E 05 F1 | 	add	fp, #12
0e494     A7 14 02 FB | 	rdlong	arg02, fp
0e498     0C 4E 85 F1 | 	sub	fp, #12
0e49c     01 16 06 F6 | 	mov	arg03, #1
0e4a0     08 A5 B0 FD | 	call	#__system___float_cmp
0e4a4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e4a8     00 1E 26 C6 |  if_b	not	local01, #0
0e4ac     A7 1E 62 FC | 	wrlong	local01, fp
0e4b0     7C 01 90 FD | 	jmp	#LR__1180
0e4b4                 | LR__1174
0e4b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0e4b4     08 4E 05 F1 | 	add	fp, #8
0e4b8     A7 1E 02 FB | 	rdlong	local01, fp
0e4bc     08 4E 85 F1 | 	sub	fp, #8
0e4c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e4c4     14 4E 05 A1 |  if_e	add	fp, #20
0e4c8     A7 22 02 AB |  if_e	rdlong	local03, fp
0e4cc     14 4E 85 A1 |  if_e	sub	fp, #20
0e4d0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e4d4     24 00 90 5D |  if_ne	jmp	#LR__1175
0e4d8     00 1E 06 F6 | 	mov	local01, #0
0e4dc     A7 20 02 FB | 	rdlong	local02, fp
0e4e0     0C 4E 05 F1 | 	add	fp, #12
0e4e4     A7 22 02 FB | 	rdlong	local03, fp
0e4e8     0C 4E 85 F1 | 	sub	fp, #12
0e4ec     11 21 5A F2 | 	cmps	local02, local03 wcz
0e4f0     01 1E 66 E6 |  if_be	neg	local01, #1
0e4f4     A7 1E 62 FC | 	wrlong	local01, fp
0e4f8     34 01 90 FD | 	jmp	#LR__1180
0e4fc                 | LR__1175
0e4fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0e4fc     08 4E 05 F1 | 	add	fp, #8
0e500     A7 1E 02 FB | 	rdlong	local01, fp
0e504     08 4E 85 F1 | 	sub	fp, #8
0e508     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e50c     14 4E 05 A1 |  if_e	add	fp, #20
0e510     A7 22 02 AB |  if_e	rdlong	local03, fp
0e514     14 4E 85 A1 |  if_e	sub	fp, #20
0e518     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e51c     24 00 90 5D |  if_ne	jmp	#LR__1176
0e520     00 1E 06 F6 | 	mov	local01, #0
0e524     A7 20 02 FB | 	rdlong	local02, fp
0e528     0C 4E 05 F1 | 	add	fp, #12
0e52c     A7 22 02 FB | 	rdlong	local03, fp
0e530     0C 4E 85 F1 | 	sub	fp, #12
0e534     11 21 5A F2 | 	cmps	local02, local03 wcz
0e538     01 1E 66 E6 |  if_be	neg	local01, #1
0e53c     A7 1E 62 FC | 	wrlong	local01, fp
0e540     EC 00 90 FD | 	jmp	#LR__1180
0e544                 | LR__1176
0e544                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0e544     08 4E 05 F1 | 	add	fp, #8
0e548     A7 1E 02 FB | 	rdlong	local01, fp
0e54c     08 4E 85 F1 | 	sub	fp, #8
0e550     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e554     14 4E 05 A1 |  if_e	add	fp, #20
0e558     A7 22 02 AB |  if_e	rdlong	local03, fp
0e55c     14 4E 85 A1 |  if_e	sub	fp, #20
0e560     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e564     34 00 90 5D |  if_ne	jmp	#LR__1177
0e568     00 1E 06 F6 | 	mov	local01, #0
0e56c     A7 12 02 FB | 	rdlong	arg01, fp
0e570     D8 9C B0 FD | 	call	#__system___float_fromuns
0e574     FD 12 02 F6 | 	mov	arg01, result1
0e578     0C 4E 05 F1 | 	add	fp, #12
0e57c     A7 14 02 FB | 	rdlong	arg02, fp
0e580     0C 4E 85 F1 | 	sub	fp, #12
0e584     01 16 06 F6 | 	mov	arg03, #1
0e588     20 A4 B0 FD | 	call	#__system___float_cmp
0e58c     01 FA 55 F2 | 	cmps	result1, #1 wc
0e590     00 1E 26 C6 |  if_b	not	local01, #0
0e594     A7 1E 62 FC | 	wrlong	local01, fp
0e598     94 00 90 FD | 	jmp	#LR__1180
0e59c                 | LR__1177
0e59c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0e59c     08 4E 05 F1 | 	add	fp, #8
0e5a0     A7 1E 02 FB | 	rdlong	local01, fp
0e5a4     08 4E 85 F1 | 	sub	fp, #8
0e5a8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e5ac     14 4E 05 A1 |  if_e	add	fp, #20
0e5b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e5b4     14 4E 85 A1 |  if_e	sub	fp, #20
0e5b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e5bc     24 00 90 5D |  if_ne	jmp	#LR__1178
0e5c0     00 1E 06 F6 | 	mov	local01, #0
0e5c4     A7 20 02 FB | 	rdlong	local02, fp
0e5c8     0C 4E 05 F1 | 	add	fp, #12
0e5cc     A7 22 02 FB | 	rdlong	local03, fp
0e5d0     0C 4E 85 F1 | 	sub	fp, #12
0e5d4     11 21 5A F2 | 	cmps	local02, local03 wcz
0e5d8     01 1E 66 E6 |  if_be	neg	local01, #1
0e5dc     A7 1E 62 FC | 	wrlong	local01, fp
0e5e0     4C 00 90 FD | 	jmp	#LR__1180
0e5e4                 | LR__1178
0e5e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0e5e4     08 4E 05 F1 | 	add	fp, #8
0e5e8     A7 1E 02 FB | 	rdlong	local01, fp
0e5ec     08 4E 85 F1 | 	sub	fp, #8
0e5f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e5f4     14 4E 05 A1 |  if_e	add	fp, #20
0e5f8     A7 22 02 AB |  if_e	rdlong	local03, fp
0e5fc     14 4E 85 A1 |  if_e	sub	fp, #20
0e600     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e604     24 00 90 5D |  if_ne	jmp	#LR__1179
0e608     00 1E 06 F6 | 	mov	local01, #0
0e60c     A7 20 02 FB | 	rdlong	local02, fp
0e610     0C 4E 05 F1 | 	add	fp, #12
0e614     A7 22 02 FB | 	rdlong	local03, fp
0e618     0C 4E 85 F1 | 	sub	fp, #12
0e61c     11 21 1A F2 | 	cmp	local02, local03 wcz
0e620     01 1E 66 E6 |  if_be	neg	local01, #1
0e624     A7 1E 62 FC | 	wrlong	local01, fp
0e628     04 00 90 FD | 	jmp	#LR__1180
0e62c                 | LR__1179
0e62c     A7 00 68 FC | 	wrlong	#0, fp
0e630                 | LR__1180
0e630     08 4E 05 F1 | 	add	fp, #8
0e634     A7 38 68 FC | 	wrlong	#28, fp
0e638     08 4E 85 F1 | 	sub	fp, #8
0e63c     A7 12 02 F6 | 	mov	arg01, fp
0e640     00 A4 BF FD | 	call	#_push
0e644     A7 F0 03 F6 | 	mov	ptra, fp
0e648     B2 00 A0 FD | 	call	#popregs_
0e64c                 | _do_le_ret
0e64c     2D 00 64 FD | 	ret
0e650                 | 
0e650                 | ' 
0e650                 | ' 
0e650                 | ' sub do_ne
0e650                 | _do_ne
0e650     05 4A 05 F6 | 	mov	COUNT_, #5
0e654     A8 00 A0 FD | 	call	#pushregs_
0e658     18 F0 07 F1 | 	add	ptra, #24
0e65c     4C A3 BF FD | 	call	#_pop
0e660     FD 1E 02 F6 | 	mov	local01, result1
0e664     FE 20 02 F6 | 	mov	local02, result2
0e668     FF 22 02 F6 | 	mov	local03, result3
0e66c     0C 4E 05 F1 | 	add	fp, #12
0e670     A7 1E 62 FC | 	wrlong	local01, fp
0e674     04 4E 05 F1 | 	add	fp, #4
0e678     A7 20 62 FC | 	wrlong	local02, fp
0e67c     04 4E 05 F1 | 	add	fp, #4
0e680     A7 22 62 FC | 	wrlong	local03, fp
0e684     14 4E 85 F1 | 	sub	fp, #20
0e688     20 A3 BF FD | 	call	#_pop
0e68c     FF 22 02 F6 | 	mov	local03, result3
0e690     A7 FA 61 FC | 	wrlong	result1, fp
0e694     04 4E 05 F1 | 	add	fp, #4
0e698     A7 FC 61 FC | 	wrlong	result2, fp
0e69c     04 4E 05 F1 | 	add	fp, #4
0e6a0     A7 22 62 FC | 	wrlong	local03, fp
0e6a4                 | ' t2=pop()
0e6a4                 | ' t1=pop()
0e6a4                 | ' 
0e6a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0e6a4     08 4E 85 F1 | 	sub	fp, #8
0e6a8     1F 22 0E F2 | 	cmp	local03, #31 wz
0e6ac     14 4E 05 A1 |  if_e	add	fp, #20
0e6b0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e6b4     14 4E 85 A1 |  if_e	sub	fp, #20
0e6b8     12 23 02 A6 |  if_e	mov	local03, local04
0e6bc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e6c0     28 00 90 5D |  if_ne	jmp	#LR__1190
0e6c4     00 1E 06 F6 | 	mov	local01, #0
0e6c8     A7 12 02 FB | 	rdlong	arg01, fp
0e6cc     0C 4E 05 F1 | 	add	fp, #12
0e6d0     A7 14 02 FB | 	rdlong	arg02, fp
0e6d4     0C 4E 85 F1 | 	sub	fp, #12
0e6d8     B0 74 B0 FD | 	call	#__system___string_cmp
0e6dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0e6e0     00 1E 26 56 |  if_ne	not	local01, #0
0e6e4     A7 1E 62 FC | 	wrlong	local01, fp
0e6e8     04 03 90 FD | 	jmp	#LR__1200
0e6ec                 | LR__1190
0e6ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0e6ec     08 4E 05 F1 | 	add	fp, #8
0e6f0     A7 1E 02 FB | 	rdlong	local01, fp
0e6f4     08 4E 85 F1 | 	sub	fp, #8
0e6f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e6fc     14 4E 05 A1 |  if_e	add	fp, #20
0e700     A7 24 02 AB |  if_e	rdlong	local04, fp
0e704     14 4E 85 A1 |  if_e	sub	fp, #20
0e708     12 23 02 A6 |  if_e	mov	local03, local04
0e70c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e710     2C 00 90 5D |  if_ne	jmp	#LR__1191
0e714     00 1E 06 F6 | 	mov	local01, #0
0e718     A7 12 02 FB | 	rdlong	arg01, fp
0e71c     0C 4E 05 F1 | 	add	fp, #12
0e720     A7 14 02 FB | 	rdlong	arg02, fp
0e724     0C 4E 85 F1 | 	sub	fp, #12
0e728     01 16 06 F6 | 	mov	arg03, #1
0e72c     7C A2 B0 FD | 	call	#__system___float_cmp
0e730     00 FA 0D F2 | 	cmp	result1, #0 wz
0e734     00 1E 26 56 |  if_ne	not	local01, #0
0e738     A7 1E 62 FC | 	wrlong	local01, fp
0e73c     B0 02 90 FD | 	jmp	#LR__1200
0e740                 | LR__1191
0e740                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0e740     08 4E 05 F1 | 	add	fp, #8
0e744     A7 1E 02 FB | 	rdlong	local01, fp
0e748     08 4E 85 F1 | 	sub	fp, #8
0e74c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e750     14 4E 05 A1 |  if_e	add	fp, #20
0e754     A7 24 02 AB |  if_e	rdlong	local04, fp
0e758     14 4E 85 A1 |  if_e	sub	fp, #20
0e75c     12 23 02 A6 |  if_e	mov	local03, local04
0e760     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e764     48 00 90 5D |  if_ne	jmp	#LR__1192
0e768     00 1E 06 F6 | 	mov	local01, #0
0e76c     A7 20 02 FB | 	rdlong	local02, fp
0e770     0C 4E 05 F1 | 	add	fp, #12
0e774     A7 12 02 FB | 	rdlong	arg01, fp
0e778     0C 4E 85 F1 | 	sub	fp, #12
0e77c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e780     1F 26 C6 C9 |  if_b	decod	local05, #31
0e784     00 26 06 36 |  if_ae	mov	local05, #0
0e788     C0 9A B0 FD | 	call	#__system___float_fromuns
0e78c     13 FB 61 F5 | 	xor	result1, local05
0e790     FD 14 02 F6 | 	mov	arg02, result1
0e794     10 13 02 F6 | 	mov	arg01, local02
0e798     01 16 06 F6 | 	mov	arg03, #1
0e79c     0C A2 B0 FD | 	call	#__system___float_cmp
0e7a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0e7a4     00 1E 26 56 |  if_ne	not	local01, #0
0e7a8     A7 1E 62 FC | 	wrlong	local01, fp
0e7ac     40 02 90 FD | 	jmp	#LR__1200
0e7b0                 | LR__1192
0e7b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0e7b0     08 4E 05 F1 | 	add	fp, #8
0e7b4     A7 1E 02 FB | 	rdlong	local01, fp
0e7b8     08 4E 85 F1 | 	sub	fp, #8
0e7bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e7c0     14 4E 05 A1 |  if_e	add	fp, #20
0e7c4     A7 24 02 AB |  if_e	rdlong	local04, fp
0e7c8     14 4E 85 A1 |  if_e	sub	fp, #20
0e7cc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0e7d0     38 00 90 5D |  if_ne	jmp	#LR__1193
0e7d4     00 1E 06 F6 | 	mov	local01, #0
0e7d8     A7 20 02 FB | 	rdlong	local02, fp
0e7dc     0C 4E 05 F1 | 	add	fp, #12
0e7e0     A7 12 02 FB | 	rdlong	arg01, fp
0e7e4     0C 4E 85 F1 | 	sub	fp, #12
0e7e8     60 9A B0 FD | 	call	#__system___float_fromuns
0e7ec     FD 14 02 F6 | 	mov	arg02, result1
0e7f0     10 13 02 F6 | 	mov	arg01, local02
0e7f4     01 16 06 F6 | 	mov	arg03, #1
0e7f8     B0 A1 B0 FD | 	call	#__system___float_cmp
0e7fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0e800     00 1E 26 56 |  if_ne	not	local01, #0
0e804     A7 1E 62 FC | 	wrlong	local01, fp
0e808     E4 01 90 FD | 	jmp	#LR__1200
0e80c                 | LR__1193
0e80c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0e80c     08 4E 05 F1 | 	add	fp, #8
0e810     A7 1E 02 FB | 	rdlong	local01, fp
0e814     08 4E 85 F1 | 	sub	fp, #8
0e818     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e81c     14 4E 05 A1 |  if_e	add	fp, #20
0e820     A7 22 02 AB |  if_e	rdlong	local03, fp
0e824     14 4E 85 A1 |  if_e	sub	fp, #20
0e828     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e82c     44 00 90 5D |  if_ne	jmp	#LR__1194
0e830     00 1E 06 F6 | 	mov	local01, #0
0e834     A7 12 02 FB | 	rdlong	arg01, fp
0e838     09 13 52 F6 | 	abs	arg01, arg01 wc
0e83c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e840     00 26 06 36 |  if_ae	mov	local05, #0
0e844     04 9A B0 FD | 	call	#__system___float_fromuns
0e848     13 FB 61 F5 | 	xor	result1, local05
0e84c     FD 12 02 F6 | 	mov	arg01, result1
0e850     0C 4E 05 F1 | 	add	fp, #12
0e854     A7 14 02 FB | 	rdlong	arg02, fp
0e858     0C 4E 85 F1 | 	sub	fp, #12
0e85c     01 16 06 F6 | 	mov	arg03, #1
0e860     48 A1 B0 FD | 	call	#__system___float_cmp
0e864     00 FA 0D F2 | 	cmp	result1, #0 wz
0e868     00 1E 26 56 |  if_ne	not	local01, #0
0e86c     A7 1E 62 FC | 	wrlong	local01, fp
0e870     7C 01 90 FD | 	jmp	#LR__1200
0e874                 | LR__1194
0e874                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0e874     08 4E 05 F1 | 	add	fp, #8
0e878     A7 1E 02 FB | 	rdlong	local01, fp
0e87c     08 4E 85 F1 | 	sub	fp, #8
0e880     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e884     14 4E 05 A1 |  if_e	add	fp, #20
0e888     A7 22 02 AB |  if_e	rdlong	local03, fp
0e88c     14 4E 85 A1 |  if_e	sub	fp, #20
0e890     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e894     24 00 90 5D |  if_ne	jmp	#LR__1195
0e898     00 1E 06 F6 | 	mov	local01, #0
0e89c     A7 20 02 FB | 	rdlong	local02, fp
0e8a0     0C 4E 05 F1 | 	add	fp, #12
0e8a4     A7 22 02 FB | 	rdlong	local03, fp
0e8a8     0C 4E 85 F1 | 	sub	fp, #12
0e8ac     11 21 0A F2 | 	cmp	local02, local03 wz
0e8b0     01 1E 66 56 |  if_ne	neg	local01, #1
0e8b4     A7 1E 62 FC | 	wrlong	local01, fp
0e8b8     34 01 90 FD | 	jmp	#LR__1200
0e8bc                 | LR__1195
0e8bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0e8bc     08 4E 05 F1 | 	add	fp, #8
0e8c0     A7 1E 02 FB | 	rdlong	local01, fp
0e8c4     08 4E 85 F1 | 	sub	fp, #8
0e8c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e8cc     14 4E 05 A1 |  if_e	add	fp, #20
0e8d0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e8d4     14 4E 85 A1 |  if_e	sub	fp, #20
0e8d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e8dc     24 00 90 5D |  if_ne	jmp	#LR__1196
0e8e0     00 1E 06 F6 | 	mov	local01, #0
0e8e4     A7 20 02 FB | 	rdlong	local02, fp
0e8e8     0C 4E 05 F1 | 	add	fp, #12
0e8ec     A7 22 02 FB | 	rdlong	local03, fp
0e8f0     0C 4E 85 F1 | 	sub	fp, #12
0e8f4     11 21 0A F2 | 	cmp	local02, local03 wz
0e8f8     01 1E 66 56 |  if_ne	neg	local01, #1
0e8fc     A7 1E 62 FC | 	wrlong	local01, fp
0e900     EC 00 90 FD | 	jmp	#LR__1200
0e904                 | LR__1196
0e904                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0e904     08 4E 05 F1 | 	add	fp, #8
0e908     A7 1E 02 FB | 	rdlong	local01, fp
0e90c     08 4E 85 F1 | 	sub	fp, #8
0e910     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e914     14 4E 05 A1 |  if_e	add	fp, #20
0e918     A7 22 02 AB |  if_e	rdlong	local03, fp
0e91c     14 4E 85 A1 |  if_e	sub	fp, #20
0e920     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e924     34 00 90 5D |  if_ne	jmp	#LR__1197
0e928     00 1E 06 F6 | 	mov	local01, #0
0e92c     A7 12 02 FB | 	rdlong	arg01, fp
0e930     18 99 B0 FD | 	call	#__system___float_fromuns
0e934     FD 12 02 F6 | 	mov	arg01, result1
0e938     0C 4E 05 F1 | 	add	fp, #12
0e93c     A7 14 02 FB | 	rdlong	arg02, fp
0e940     0C 4E 85 F1 | 	sub	fp, #12
0e944     01 16 06 F6 | 	mov	arg03, #1
0e948     60 A0 B0 FD | 	call	#__system___float_cmp
0e94c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e950     00 1E 26 56 |  if_ne	not	local01, #0
0e954     A7 1E 62 FC | 	wrlong	local01, fp
0e958     94 00 90 FD | 	jmp	#LR__1200
0e95c                 | LR__1197
0e95c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0e95c     08 4E 05 F1 | 	add	fp, #8
0e960     A7 1E 02 FB | 	rdlong	local01, fp
0e964     08 4E 85 F1 | 	sub	fp, #8
0e968     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e96c     14 4E 05 A1 |  if_e	add	fp, #20
0e970     A7 22 02 AB |  if_e	rdlong	local03, fp
0e974     14 4E 85 A1 |  if_e	sub	fp, #20
0e978     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e97c     24 00 90 5D |  if_ne	jmp	#LR__1198
0e980     00 1E 06 F6 | 	mov	local01, #0
0e984     A7 20 02 FB | 	rdlong	local02, fp
0e988     0C 4E 05 F1 | 	add	fp, #12
0e98c     A7 22 02 FB | 	rdlong	local03, fp
0e990     0C 4E 85 F1 | 	sub	fp, #12
0e994     11 21 0A F2 | 	cmp	local02, local03 wz
0e998     01 1E 66 56 |  if_ne	neg	local01, #1
0e99c     A7 1E 62 FC | 	wrlong	local01, fp
0e9a0     4C 00 90 FD | 	jmp	#LR__1200
0e9a4                 | LR__1198
0e9a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0e9a4     08 4E 05 F1 | 	add	fp, #8
0e9a8     A7 1E 02 FB | 	rdlong	local01, fp
0e9ac     08 4E 85 F1 | 	sub	fp, #8
0e9b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e9b4     14 4E 05 A1 |  if_e	add	fp, #20
0e9b8     A7 22 02 AB |  if_e	rdlong	local03, fp
0e9bc     14 4E 85 A1 |  if_e	sub	fp, #20
0e9c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e9c4     24 00 90 5D |  if_ne	jmp	#LR__1199
0e9c8     00 1E 06 F6 | 	mov	local01, #0
0e9cc     A7 20 02 FB | 	rdlong	local02, fp
0e9d0     0C 4E 05 F1 | 	add	fp, #12
0e9d4     A7 22 02 FB | 	rdlong	local03, fp
0e9d8     0C 4E 85 F1 | 	sub	fp, #12
0e9dc     11 21 0A F2 | 	cmp	local02, local03 wz
0e9e0     01 1E 66 56 |  if_ne	neg	local01, #1
0e9e4     A7 1E 62 FC | 	wrlong	local01, fp
0e9e8     04 00 90 FD | 	jmp	#LR__1200
0e9ec                 | LR__1199
0e9ec     A7 00 68 FC | 	wrlong	#0, fp
0e9f0                 | LR__1200
0e9f0     08 4E 05 F1 | 	add	fp, #8
0e9f4     A7 38 68 FC | 	wrlong	#28, fp
0e9f8     08 4E 85 F1 | 	sub	fp, #8
0e9fc     A7 12 02 F6 | 	mov	arg01, fp
0ea00     40 A0 BF FD | 	call	#_push
0ea04     A7 F0 03 F6 | 	mov	ptra, fp
0ea08     B2 00 A0 FD | 	call	#popregs_
0ea0c                 | _do_ne_ret
0ea0c     2D 00 64 FD | 	ret
0ea10                 | 
0ea10                 | ' 
0ea10                 | ' 
0ea10                 | ' 
0ea10                 | ' ' -------------------   convert a variable on the top of stack to integer
0ea10                 | ' 
0ea10                 | ' sub do_converttoint
0ea10                 | _do_converttoint
0ea10     02 4A 05 F6 | 	mov	COUNT_, #2
0ea14     A8 00 A0 FD | 	call	#pushregs_
0ea18     18 F0 07 F1 | 	add	ptra, #24
0ea1c     8C 9F BF FD | 	call	#_pop
0ea20     FE 1E 02 F6 | 	mov	local01, result2
0ea24     FF 20 02 F6 | 	mov	local02, result3
0ea28     A7 FA 61 FC | 	wrlong	result1, fp
0ea2c     04 4E 05 F1 | 	add	fp, #4
0ea30     A7 1E 62 FC | 	wrlong	local01, fp
0ea34     04 4E 05 F1 | 	add	fp, #4
0ea38     A7 20 62 FC | 	wrlong	local02, fp
0ea3c                 | ' t1=pop() 
0ea3c                 | ' select case t1.result_type
0ea3c     08 4E 85 F1 | 	sub	fp, #8
0ea40     1C 20 0E F2 | 	cmp	local02, #28 wz
0ea44     24 00 90 AD |  if_e	jmp	#LR__1210
0ea48     1D 20 0E F2 | 	cmp	local02, #29 wz
0ea4c     38 00 90 AD |  if_e	jmp	#LR__1211
0ea50     1E 20 0E F2 | 	cmp	local02, #30 wz
0ea54     4C 00 90 AD |  if_e	jmp	#LR__1212
0ea58     1F 20 0E F2 | 	cmp	local02, #31 wz
0ea5c     68 00 90 AD |  if_e	jmp	#LR__1213
0ea60     FF 20 0E F2 | 	cmp	local02, #255 wz
0ea64     8C 00 90 AD |  if_e	jmp	#LR__1214
0ea68     A8 00 90 FD | 	jmp	#LR__1215
0ea6c                 | LR__1210
0ea6c     A7 20 02 FB | 	rdlong	local02, fp
0ea70     0C 4E 05 F1 | 	add	fp, #12
0ea74     A7 20 62 FC | 	wrlong	local02, fp
0ea78     04 4E 05 F1 | 	add	fp, #4
0ea7c     A7 38 68 FC | 	wrlong	#28, fp
0ea80     10 4E 85 F1 | 	sub	fp, #16
0ea84     A0 00 90 FD | 	jmp	#LR__1216
0ea88                 | LR__1211
0ea88     A7 20 02 FB | 	rdlong	local02, fp
0ea8c     0C 4E 05 F1 | 	add	fp, #12
0ea90     A7 20 62 FC | 	wrlong	local02, fp
0ea94     04 4E 05 F1 | 	add	fp, #4
0ea98     A7 38 68 FC | 	wrlong	#28, fp
0ea9c     10 4E 85 F1 | 	sub	fp, #16
0eaa0     84 00 90 FD | 	jmp	#LR__1216
0eaa4                 | LR__1212
0eaa4     A7 12 02 FB | 	rdlong	arg01, fp
0eaa8     01 14 06 F6 | 	mov	arg02, #1
0eaac     90 9F B0 FD | 	call	#__system___float_tointeger
0eab0     0C 4E 05 F1 | 	add	fp, #12
0eab4     A7 FA 61 FC | 	wrlong	result1, fp
0eab8     04 4E 05 F1 | 	add	fp, #4
0eabc     A7 38 68 FC | 	wrlong	#28, fp
0eac0     10 4E 85 F1 | 	sub	fp, #16
0eac4     60 00 90 FD | 	jmp	#LR__1216
0eac8                 | LR__1213
0eac8     A7 12 02 FB | 	rdlong	arg01, fp
0eacc     90 A2 B0 FD | 	call	#__system____builtin_atof
0ead0     FD 12 02 F6 | 	mov	arg01, result1
0ead4     00 14 06 F6 | 	mov	arg02, #0
0ead8     64 9F B0 FD | 	call	#__system___float_tointeger
0eadc     0C 4E 05 F1 | 	add	fp, #12
0eae0     A7 FA 61 FC | 	wrlong	result1, fp
0eae4     04 4E 05 F1 | 	add	fp, #4
0eae8     A7 38 68 FC | 	wrlong	#28, fp
0eaec     10 4E 85 F1 | 	sub	fp, #16
0eaf0     34 00 90 FD | 	jmp	#LR__1216
0eaf4                 | LR__1214
0eaf4     0C 4E 05 F1 | 	add	fp, #12
0eaf8     A7 00 68 FC | 	wrlong	#0, fp
0eafc     0C 4E 85 F1 | 	sub	fp, #12
0eb00     A7 20 02 FB | 	rdlong	local02, fp
0eb04     10 4E 05 F1 | 	add	fp, #16
0eb08     A7 20 62 FC | 	wrlong	local02, fp
0eb0c     10 4E 85 F1 | 	sub	fp, #16
0eb10     14 00 90 FD | 	jmp	#LR__1216
0eb14                 | LR__1215
0eb14     0C 4E 05 F1 | 	add	fp, #12
0eb18     A7 00 68 FC | 	wrlong	#0, fp
0eb1c     04 4E 05 F1 | 	add	fp, #4
0eb20     A7 02 68 FC | 	wrlong	#1, fp
0eb24     10 4E 85 F1 | 	sub	fp, #16
0eb28                 | LR__1216
0eb28     0C 4E 05 F1 | 	add	fp, #12
0eb2c     A7 20 02 FB | 	rdlong	local02, fp
0eb30     0C 4E 85 F1 | 	sub	fp, #12
0eb34     A7 20 62 FC | 	wrlong	local02, fp
0eb38     10 4E 05 F1 | 	add	fp, #16
0eb3c     A7 20 02 FB | 	rdlong	local02, fp
0eb40     08 4E 85 F1 | 	sub	fp, #8
0eb44     A7 20 62 FC | 	wrlong	local02, fp
0eb48     08 4E 85 F1 | 	sub	fp, #8
0eb4c     A7 12 02 F6 | 	mov	arg01, fp
0eb50     F0 9E BF FD | 	call	#_push
0eb54     A7 F0 03 F6 | 	mov	ptra, fp
0eb58     B2 00 A0 FD | 	call	#popregs_
0eb5c                 | _do_converttoint_ret
0eb5c     2D 00 64 FD | 	ret
0eb60                 | 
0eb60                 | ' 
0eb60                 | ' function converttoint (t1 as expr_result) as integer
0eb60                 | _converttoint
0eb60     02 4A 05 F6 | 	mov	COUNT_, #2
0eb64     A8 00 A0 FD | 	call	#pushregs_
0eb68     09 1F 02 F6 | 	mov	local01, arg01
0eb6c                 | ' 
0eb6c                 | ' select case t1.result_type
0eb6c     08 1E 06 F1 | 	add	local01, #8
0eb70     0F 21 02 FB | 	rdlong	local02, local01
0eb74     08 1E 86 F1 | 	sub	local01, #8
0eb78     1C 20 86 F1 | 	sub	local02, #28
0eb7c     04 20 26 F3 | 	fle	local02, #4
0eb80     30 20 62 FD | 	jmprel	local02
0eb84                 | LR__1220
0eb84     10 00 90 FD | 	jmp	#LR__1221
0eb88     14 00 90 FD | 	jmp	#LR__1222
0eb8c     18 00 90 FD | 	jmp	#LR__1223
0eb90     24 00 90 FD | 	jmp	#LR__1224
0eb94     38 00 90 FD | 	jmp	#LR__1225
0eb98                 | LR__1221
0eb98     0F FB 01 FB | 	rdlong	result1, local01
0eb9c     34 00 90 FD | 	jmp	#LR__1226
0eba0                 | LR__1222
0eba0     0F FB 01 FB | 	rdlong	result1, local01
0eba4     2C 00 90 FD | 	jmp	#LR__1226
0eba8                 | LR__1223
0eba8     0F 13 02 FB | 	rdlong	arg01, local01
0ebac     01 14 06 F6 | 	mov	arg02, #1
0ebb0     8C 9E B0 FD | 	call	#__system___float_tointeger
0ebb4     1C 00 90 FD | 	jmp	#LR__1226
0ebb8                 | LR__1224
0ebb8     0F 13 02 FB | 	rdlong	arg01, local01
0ebbc     A0 A1 B0 FD | 	call	#__system____builtin_atof
0ebc0     FD 12 02 F6 | 	mov	arg01, result1
0ebc4     00 14 06 F6 | 	mov	arg02, #0
0ebc8     74 9E B0 FD | 	call	#__system___float_tointeger
0ebcc     04 00 90 FD | 	jmp	#LR__1226
0ebd0                 | LR__1225
0ebd0     00 FA 05 F6 | 	mov	result1, #0
0ebd4                 | LR__1226
0ebd4     A7 F0 03 F6 | 	mov	ptra, fp
0ebd8     B2 00 A0 FD | 	call	#popregs_
0ebdc                 | _converttoint_ret
0ebdc     2D 00 64 FD | 	ret
0ebe0                 | 
0ebe0                 | ' 
0ebe0                 | ' function converttofloat (t1 as expr_result) as single
0ebe0                 | _converttofloat
0ebe0     03 4A 05 F6 | 	mov	COUNT_, #3
0ebe4     A8 00 A0 FD | 	call	#pushregs_
0ebe8     09 1F 02 F6 | 	mov	local01, arg01
0ebec                 | ' 
0ebec                 | ' select case t1.result_type
0ebec     08 1E 06 F1 | 	add	local01, #8
0ebf0     0F 21 02 FB | 	rdlong	local02, local01
0ebf4     08 1E 86 F1 | 	sub	local01, #8
0ebf8     1C 20 86 F1 | 	sub	local02, #28
0ebfc     04 20 26 F3 | 	fle	local02, #4
0ec00     30 20 62 FD | 	jmprel	local02
0ec04                 | LR__1230
0ec04     10 00 90 FD | 	jmp	#LR__1231
0ec08     28 00 90 FD | 	jmp	#LR__1232
0ec0c     30 00 90 FD | 	jmp	#LR__1233
0ec10     34 00 90 FD | 	jmp	#LR__1234
0ec14     3C 00 90 FD | 	jmp	#LR__1235
0ec18                 | LR__1231
0ec18     0F 13 02 FB | 	rdlong	arg01, local01
0ec1c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec20     1F 22 C6 C9 |  if_b	decod	local03, #31
0ec24     00 22 06 36 |  if_ae	mov	local03, #0
0ec28     20 96 B0 FD | 	call	#__system___float_fromuns
0ec2c     11 FB 61 F5 | 	xor	result1, local03
0ec30     24 00 90 FD | 	jmp	#LR__1236
0ec34                 | LR__1232
0ec34     0F 13 02 FB | 	rdlong	arg01, local01
0ec38     10 96 B0 FD | 	call	#__system___float_fromuns
0ec3c     18 00 90 FD | 	jmp	#LR__1236
0ec40                 | LR__1233
0ec40     0F FB 01 FB | 	rdlong	result1, local01
0ec44     10 00 90 FD | 	jmp	#LR__1236
0ec48                 | LR__1234
0ec48     0F 13 02 FB | 	rdlong	arg01, local01
0ec4c     10 A1 B0 FD | 	call	#__system____builtin_atof
0ec50     04 00 90 FD | 	jmp	#LR__1236
0ec54                 | LR__1235
0ec54     00 FA 05 F6 | 	mov	result1, #0
0ec58                 | LR__1236
0ec58     A7 F0 03 F6 | 	mov	ptra, fp
0ec5c     B2 00 A0 FD | 	call	#popregs_
0ec60                 | _converttofloat_ret
0ec60     2D 00 64 FD | 	ret
0ec64                 | 
0ec64                 | ' 
0ec64                 | ' sub do_rnd
0ec64                 | _do_rnd
0ec64     01 4A 05 F6 | 	mov	COUNT_, #1
0ec68     A8 00 A0 FD | 	call	#pushregs_
0ec6c     10 F0 07 F1 | 	add	ptra, #16
0ec70     69 00 00 FF 
0ec74     54 E4 05 F1 | 	add	objptr, ##53844
0ec78     F2 1E 02 FB | 	rdlong	local01, objptr
0ec7c     0F 17 02 F6 | 	mov	arg03, local01
0ec80     01 16 66 F0 | 	shl	arg03, #1
0ec84     0F 17 02 F1 | 	add	arg03, local01
0ec88     02 16 66 F0 | 	shl	arg03, #2
0ec8c     03 00 00 FF 
0ec90     04 E4 85 F1 | 	sub	objptr, ##1540
0ec94     F2 16 02 F1 | 	add	arg03, objptr
0ec98     0B 17 02 FB | 	rdlong	arg03, arg03
0ec9c     0C 4E 05 F1 | 	add	fp, #12
0eca0     A7 16 62 FC | 	wrlong	arg03, fp
0eca4                 | ' 
0eca4                 | ' numpar=compiledline(lineptr_e).result.uresult
0eca4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0eca4     0C 4E 85 F1 | 	sub	fp, #12
0eca8     02 16 16 F2 | 	cmp	arg03, #2 wc
0ecac     66 00 00 FF 
0ecb0     50 E4 85 F1 | 	sub	objptr, ##52304
0ecb4     3C 00 90 CD |  if_b	jmp	#LR__1240
0ecb8     00 12 06 F6 | 	mov	arg01, #0
0ecbc     58 C4 B0 FD | 	call	#__system___getiolock_0362
0ecc0     FD 12 02 F6 | 	mov	arg01, result1
0ecc4     9C 6E B0 FD | 	call	#__system___lockmem
0ecc8     28 01 00 FF 
0eccc     6E 15 06 F6 | 	mov	arg02, ##@LR__4374
0ecd0     00 12 06 F6 | 	mov	arg01, #0
0ecd4     00 16 06 F6 | 	mov	arg03, #0
0ecd8     7C 7B B0 FD | 	call	#__system___basic_print_string
0ecdc     00 12 06 F6 | 	mov	arg01, #0
0ece0     34 C4 B0 FD | 	call	#__system___getiolock_0362
0ece4     FD 00 68 FC | 	wrlong	#0, result1
0ece8     27 12 06 F6 | 	mov	arg01, #39
0ecec     10 39 B0 FD | 	call	#_printerror
0ecf0     2C 01 90 FD | 	jmp	#LR__1247
0ecf4                 | LR__1240
0ecf4                 | ' if numpar=0 then
0ecf4     0C 4E 05 F1 | 	add	fp, #12
0ecf8     A7 FE 09 FB | 	rdlong	result3, fp wz
0ecfc     0C 4E 85 F1 | 	sub	fp, #12
0ed00     20 00 90 5D |  if_ne	jmp	#LR__1241
0ed04     08 4E 05 F1 | 	add	fp, #8
0ed08     A7 3A 68 FC | 	wrlong	#29, fp
0ed0c     08 4E 85 F1 | 	sub	fp, #8
0ed10     1B FA 61 FD | 	getrnd	result1
0ed14     A7 FA 61 FC | 	wrlong	result1, fp
0ed18     A7 12 02 F6 | 	mov	arg01, fp
0ed1c     24 9D BF FD | 	call	#_push
0ed20     FC 00 90 FD | 	jmp	#LR__1246
0ed24                 | LR__1241
0ed24     84 9C BF FD | 	call	#_pop
0ed28     A7 FA 61 FC | 	wrlong	result1, fp
0ed2c     04 4E 05 F1 | 	add	fp, #4
0ed30     A7 FC 61 FC | 	wrlong	result2, fp
0ed34     04 4E 05 F1 | 	add	fp, #4
0ed38     A7 FE 61 FC | 	wrlong	result3, fp
0ed3c                 | '   t1=pop()
0ed3c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0ed3c     08 4E 85 F1 | 	sub	fp, #8
0ed40     1C FE 0D F2 | 	cmp	result3, #28 wz
0ed44     08 4E 05 51 |  if_ne	add	fp, #8
0ed48     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ed4c     08 4E 85 51 |  if_ne	sub	fp, #8
0ed50     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0ed54     2C 00 90 5D |  if_ne	jmp	#LR__1242
0ed58     1B FA 61 FD | 	getrnd	result1
0ed5c     A7 1E 02 FB | 	rdlong	local01, fp
0ed60     0F FB 11 FD | 	qdiv	result1, local01
0ed64     A7 12 02 F6 | 	mov	arg01, fp
0ed68     19 1E 62 FD | 	getqy	local01
0ed6c     A7 1E 62 FC | 	wrlong	local01, fp
0ed70     08 4E 05 F1 | 	add	fp, #8
0ed74     A7 3A 68 FC | 	wrlong	#29, fp
0ed78     08 4E 85 F1 | 	sub	fp, #8
0ed7c     C4 9C BF FD | 	call	#_push
0ed80     9C 00 90 FD | 	jmp	#LR__1245
0ed84                 | LR__1242
0ed84     08 4E 05 F1 | 	add	fp, #8
0ed88     A7 1E 02 FB | 	rdlong	local01, fp
0ed8c     08 4E 85 F1 | 	sub	fp, #8
0ed90     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ed94     48 00 90 5D |  if_ne	jmp	#LR__1243
0ed98     A7 12 02 FB | 	rdlong	arg01, fp
0ed9c     00 C0 24 FF 
0eda0     00 14 06 F6 | 	mov	arg02, ##1233125376
0eda4     D4 99 B0 FD | 	call	#__system___float_div
0eda8     FD 1E 02 F6 | 	mov	local01, result1
0edac     1B 12 62 FD | 	getrnd	arg01
0edb0     74 13 06 F4 | 	bitl	arg01, #372
0edb4     94 94 B0 FD | 	call	#__system___float_fromuns
0edb8     FD 14 02 F6 | 	mov	arg02, result1
0edbc     0F 13 02 F6 | 	mov	arg01, local01
0edc0     B4 97 B0 FD | 	call	#__system___float_mul
0edc4     A7 FA 61 FC | 	wrlong	result1, fp
0edc8     08 4E 05 F1 | 	add	fp, #8
0edcc     A7 3C 68 FC | 	wrlong	#30, fp
0edd0     08 4E 85 F1 | 	sub	fp, #8
0edd4     A7 12 02 F6 | 	mov	arg01, fp
0edd8     68 9C BF FD | 	call	#_push
0eddc     40 00 90 FD | 	jmp	#LR__1244
0ede0                 | LR__1243
0ede0                 | '     print "rnd: "; : printerror(40) 
0ede0     00 12 06 F6 | 	mov	arg01, #0
0ede4     30 C3 B0 FD | 	call	#__system___getiolock_0362
0ede8     FD 12 02 F6 | 	mov	arg01, result1
0edec     74 6D B0 FD | 	call	#__system___lockmem
0edf0     28 01 00 FF 
0edf4     74 15 06 F6 | 	mov	arg02, ##@LR__4375
0edf8     00 12 06 F6 | 	mov	arg01, #0
0edfc     00 16 06 F6 | 	mov	arg03, #0
0ee00     54 7A B0 FD | 	call	#__system___basic_print_string
0ee04     00 12 06 F6 | 	mov	arg01, #0
0ee08     0C C3 B0 FD | 	call	#__system___getiolock_0362
0ee0c     FD 00 68 FC | 	wrlong	#0, result1
0ee10     28 12 06 F6 | 	mov	arg01, #40
0ee14     E8 37 B0 FD | 	call	#_printerror
0ee18     A7 12 02 F6 | 	mov	arg01, fp
0ee1c     24 9C BF FD | 	call	#_push
0ee20                 | LR__1244
0ee20                 | LR__1245
0ee20                 | LR__1246
0ee20                 | LR__1247
0ee20     A7 F0 03 F6 | 	mov	ptra, fp
0ee24     B2 00 A0 FD | 	call	#popregs_
0ee28                 | _do_rnd_ret
0ee28     2D 00 64 FD | 	ret
0ee2c                 | 
0ee2c                 | ' 
0ee2c                 | ' sub do_sin
0ee2c                 | _do_sin
0ee2c     03 4A 05 F6 | 	mov	COUNT_, #3
0ee30     A8 00 A0 FD | 	call	#pushregs_
0ee34     10 F0 07 F1 | 	add	ptra, #16
0ee38     69 00 00 FF 
0ee3c     54 E4 05 F1 | 	add	objptr, ##53844
0ee40     F2 1E 02 FB | 	rdlong	local01, objptr
0ee44     0F 17 02 F6 | 	mov	arg03, local01
0ee48     01 16 66 F0 | 	shl	arg03, #1
0ee4c     0F 17 02 F1 | 	add	arg03, local01
0ee50     02 16 66 F0 | 	shl	arg03, #2
0ee54     03 00 00 FF 
0ee58     04 E4 85 F1 | 	sub	objptr, ##1540
0ee5c     F2 16 02 F1 | 	add	arg03, objptr
0ee60     0B 17 02 FB | 	rdlong	arg03, arg03
0ee64     0C 4E 05 F1 | 	add	fp, #12
0ee68     A7 16 62 FC | 	wrlong	arg03, fp
0ee6c                 | ' 
0ee6c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ee6c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0ee6c     0C 4E 85 F1 | 	sub	fp, #12
0ee70     02 16 16 F2 | 	cmp	arg03, #2 wc
0ee74     66 00 00 FF 
0ee78     50 E4 85 F1 | 	sub	objptr, ##52304
0ee7c     0C 4E 05 C1 |  if_b	add	fp, #12
0ee80     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0ee84     0C 4E 85 C1 |  if_b	sub	fp, #12
0ee88     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1250
0ee8c     00 12 06 F6 | 	mov	arg01, #0
0ee90     84 C2 B0 FD | 	call	#__system___getiolock_0362
0ee94     FD 12 02 F6 | 	mov	arg01, result1
0ee98     C8 6C B0 FD | 	call	#__system___lockmem
0ee9c     28 01 00 FF 
0eea0     7A 15 06 F6 | 	mov	arg02, ##@LR__4376
0eea4     00 12 06 F6 | 	mov	arg01, #0
0eea8     00 16 06 F6 | 	mov	arg03, #0
0eeac     A8 79 B0 FD | 	call	#__system___basic_print_string
0eeb0     00 12 06 F6 | 	mov	arg01, #0
0eeb4     60 C2 B0 FD | 	call	#__system___getiolock_0362
0eeb8     FD 00 68 FC | 	wrlong	#0, result1
0eebc     27 12 06 F6 | 	mov	arg01, #39
0eec0     3C 37 B0 FD | 	call	#_printerror
0eec4     40 01 90 FD | 	jmp	#LR__1255
0eec8                 | LR__1250
0eec8     E0 9A BF FD | 	call	#_pop
0eecc     A7 FA 61 FC | 	wrlong	result1, fp
0eed0     04 4E 05 F1 | 	add	fp, #4
0eed4     A7 FC 61 FC | 	wrlong	result2, fp
0eed8     04 4E 05 F1 | 	add	fp, #4
0eedc     A7 FE 61 FC | 	wrlong	result3, fp
0eee0                 | ' t1=pop()
0eee0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0eee0     08 4E 85 F1 | 	sub	fp, #8
0eee4     1C FE 0D F2 | 	cmp	result3, #28 wz
0eee8     08 4E 05 51 |  if_ne	add	fp, #8
0eeec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0eef0     08 4E 85 51 |  if_ne	sub	fp, #8
0eef4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0eef8     70 00 90 5D |  if_ne	jmp	#LR__1251
0eefc     A7 1E 02 FB | 	rdlong	local01, fp
0ef00     0F 1F 52 F6 | 	abs	local01, local01 wc
0ef04     68 1F 16 FD | 	qdiv	local01, #360
0ef08     87 24 20 FF 
0ef0c     DB 21 06 F6 | 	mov	local02, ##1078530011
0ef10     19 1E 62 FD | 	getqy	local01
0ef14     0F 13 82 F6 | 	negc	arg01, local01
0ef18     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef1c     1F 22 C6 C9 |  if_b	decod	local03, #31
0ef20     00 22 06 36 |  if_ae	mov	local03, #0
0ef24     24 93 B0 FD | 	call	#__system___float_fromuns
0ef28     11 FB 61 F5 | 	xor	result1, local03
0ef2c     FD 12 02 F6 | 	mov	arg01, result1
0ef30     00 9A 21 FF 
0ef34     00 14 06 F6 | 	mov	arg02, ##1127481344
0ef38     40 98 B0 FD | 	call	#__system___float_div
0ef3c     FD 14 02 F6 | 	mov	arg02, result1
0ef40     10 13 02 F6 | 	mov	arg01, local02
0ef44     30 96 B0 FD | 	call	#__system___float_mul
0ef48     FD 12 02 F6 | 	mov	arg01, result1
0ef4c     64 9F B0 FD | 	call	#__system____builtin_sinf
0ef50     A7 FA 61 FC | 	wrlong	result1, fp
0ef54     08 4E 05 F1 | 	add	fp, #8
0ef58     A7 3C 68 FC | 	wrlong	#30, fp
0ef5c     08 4E 85 F1 | 	sub	fp, #8
0ef60     A7 12 02 F6 | 	mov	arg01, fp
0ef64     DC 9A BF FD | 	call	#_push
0ef68     9C 00 90 FD | 	jmp	#LR__1254
0ef6c                 | LR__1251
0ef6c     08 4E 05 F1 | 	add	fp, #8
0ef70     A7 20 02 FB | 	rdlong	local02, fp
0ef74     08 4E 85 F1 | 	sub	fp, #8
0ef78     1E 20 0E F2 | 	cmp	local02, #30 wz
0ef7c     48 00 90 5D |  if_ne	jmp	#LR__1252
0ef80     87 24 20 FF 
0ef84     DB 21 06 F6 | 	mov	local02, ##1078530011
0ef88     A7 12 02 FB | 	rdlong	arg01, fp
0ef8c     00 9A 21 FF 
0ef90     00 14 06 F6 | 	mov	arg02, ##1127481344
0ef94     E4 97 B0 FD | 	call	#__system___float_div
0ef98     FD 14 02 F6 | 	mov	arg02, result1
0ef9c     10 13 02 F6 | 	mov	arg01, local02
0efa0     D4 95 B0 FD | 	call	#__system___float_mul
0efa4     FD 12 02 F6 | 	mov	arg01, result1
0efa8     08 9F B0 FD | 	call	#__system____builtin_sinf
0efac     A7 FA 61 FC | 	wrlong	result1, fp
0efb0     08 4E 05 F1 | 	add	fp, #8
0efb4     A7 3C 68 FC | 	wrlong	#30, fp
0efb8     08 4E 85 F1 | 	sub	fp, #8
0efbc     A7 12 02 F6 | 	mov	arg01, fp
0efc0     80 9A BF FD | 	call	#_push
0efc4     40 00 90 FD | 	jmp	#LR__1253
0efc8                 | LR__1252
0efc8                 | '   print "sin: "; : printerror(40) 
0efc8     00 12 06 F6 | 	mov	arg01, #0
0efcc     48 C1 B0 FD | 	call	#__system___getiolock_0362
0efd0     FD 12 02 F6 | 	mov	arg01, result1
0efd4     8C 6B B0 FD | 	call	#__system___lockmem
0efd8     28 01 00 FF 
0efdc     80 15 06 F6 | 	mov	arg02, ##@LR__4377
0efe0     00 12 06 F6 | 	mov	arg01, #0
0efe4     00 16 06 F6 | 	mov	arg03, #0
0efe8     6C 78 B0 FD | 	call	#__system___basic_print_string
0efec     00 12 06 F6 | 	mov	arg01, #0
0eff0     24 C1 B0 FD | 	call	#__system___getiolock_0362
0eff4     FD 00 68 FC | 	wrlong	#0, result1
0eff8     28 12 06 F6 | 	mov	arg01, #40
0effc     00 36 B0 FD | 	call	#_printerror
0f000     A7 12 02 F6 | 	mov	arg01, fp
0f004     3C 9A BF FD | 	call	#_push
0f008                 | LR__1253
0f008                 | LR__1254
0f008                 | LR__1255
0f008     A7 F0 03 F6 | 	mov	ptra, fp
0f00c     B2 00 A0 FD | 	call	#popregs_
0f010                 | _do_sin_ret
0f010     2D 00 64 FD | 	ret
0f014                 | 
0f014                 | ' 
0f014                 | ' sub do_stick
0f014                 | _do_stick
0f014     01 4A 05 F6 | 	mov	COUNT_, #1
0f018     A8 00 A0 FD | 	call	#pushregs_
0f01c     10 F0 07 F1 | 	add	ptra, #16
0f020     69 00 00 FF 
0f024     54 E4 05 F1 | 	add	objptr, ##53844
0f028     F2 1E 02 FB | 	rdlong	local01, objptr
0f02c     0F 17 02 F6 | 	mov	arg03, local01
0f030     01 16 66 F0 | 	shl	arg03, #1
0f034     0F 17 02 F1 | 	add	arg03, local01
0f038     02 16 66 F0 | 	shl	arg03, #2
0f03c     03 00 00 FF 
0f040     04 E4 85 F1 | 	sub	objptr, ##1540
0f044     F2 16 02 F1 | 	add	arg03, objptr
0f048     0B 17 02 FB | 	rdlong	arg03, arg03
0f04c     0C 4E 05 F1 | 	add	fp, #12
0f050     A7 16 62 FC | 	wrlong	arg03, fp
0f054                 | ' 
0f054                 | ' numpar=compiledline(lineptr_e).result.uresult
0f054                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0f054     0C 4E 85 F1 | 	sub	fp, #12
0f058     02 16 16 F2 | 	cmp	arg03, #2 wc
0f05c     66 00 00 FF 
0f060     50 E4 85 F1 | 	sub	objptr, ##52304
0f064     3C 00 90 CD |  if_b	jmp	#LR__1260
0f068     00 12 06 F6 | 	mov	arg01, #0
0f06c     A8 C0 B0 FD | 	call	#__system___getiolock_0362
0f070     FD 12 02 F6 | 	mov	arg01, result1
0f074     EC 6A B0 FD | 	call	#__system___lockmem
0f078     28 01 00 FF 
0f07c     86 15 06 F6 | 	mov	arg02, ##@LR__4378
0f080     00 12 06 F6 | 	mov	arg01, #0
0f084     00 16 06 F6 | 	mov	arg03, #0
0f088     CC 77 B0 FD | 	call	#__system___basic_print_string
0f08c     00 12 06 F6 | 	mov	arg01, #0
0f090     84 C0 B0 FD | 	call	#__system___getiolock_0362
0f094     FD 00 68 FC | 	wrlong	#0, result1
0f098     27 12 06 F6 | 	mov	arg01, #39
0f09c     60 35 B0 FD | 	call	#_printerror
0f0a0     E8 00 90 FD | 	jmp	#LR__1264
0f0a4                 | LR__1260
0f0a4                 | ' 
0f0a4                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0f0a4     0C 4E 05 F1 | 	add	fp, #12
0f0a8     A7 FE 09 FB | 	rdlong	result3, fp wz
0f0ac     0C 4E 85 F1 | 	sub	fp, #12
0f0b0     30 00 90 5D |  if_ne	jmp	#LR__1261
0f0b4     79 00 00 FF 
0f0b8     D0 E5 05 F1 | 	add	objptr, ##62416
0f0bc     F2 1E 02 FB | 	rdlong	local01, objptr
0f0c0     79 00 00 FF 
0f0c4     D0 E5 85 F1 | 	sub	objptr, ##62416
0f0c8     A7 1E 62 FC | 	wrlong	local01, fp
0f0cc     08 4E 05 F1 | 	add	fp, #8
0f0d0     A7 3A 68 FC | 	wrlong	#29, fp
0f0d4     08 4E 85 F1 | 	sub	fp, #8
0f0d8     A7 12 02 F6 | 	mov	arg01, fp
0f0dc     64 99 BF FD | 	call	#_push
0f0e0     A8 00 90 FD | 	jmp	#LR__1264
0f0e4                 | LR__1261
0f0e4     C4 98 BF FD | 	call	#_pop
0f0e8     A7 FA 61 FC | 	wrlong	result1, fp
0f0ec     04 4E 05 F1 | 	add	fp, #4
0f0f0     A7 FC 61 FC | 	wrlong	result2, fp
0f0f4     04 4E 05 F1 | 	add	fp, #4
0f0f8     A7 FE 61 FC | 	wrlong	result3, fp
0f0fc                 | ' 
0f0fc                 | ' t1=pop()
0f0fc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0f0fc     08 4E 85 F1 | 	sub	fp, #8
0f100     1C FE 0D F2 | 	cmp	result3, #28 wz
0f104     08 4E 05 51 |  if_ne	add	fp, #8
0f108     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f10c     08 4E 85 51 |  if_ne	sub	fp, #8
0f110     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f114     6C 00 90 5D |  if_ne	jmp	#LR__1263
0f118     A7 1E 02 FB | 	rdlong	local01, fp
0f11c     7A 00 00 FF 
0f120     90 E4 05 F1 | 	add	objptr, ##62608
0f124     F2 1E 62 FC | 	wrlong	local01, objptr
0f128                 | '   q=t1.result.uresult
0f128                 | '   if q<7 then 
0f128     7A 00 00 FF 
0f12c     90 E4 85 F1 | 	sub	objptr, ##62608
0f130     07 1E 56 F2 | 	cmps	local01, #7 wc
0f134     40 00 90 3D |  if_ae	jmp	#LR__1262
0f138     7A 00 00 FF 
0f13c     90 E4 05 F1 | 	add	objptr, ##62608
0f140     F2 1E 02 FB | 	rdlong	local01, objptr
0f144     02 1E 66 F0 | 	shl	local01, #2
0f148     C0 E4 85 F1 | 	sub	objptr, #192
0f14c     F2 1E 02 F1 | 	add	local01, objptr
0f150     0F 1F 02 FB | 	rdlong	local01, local01
0f154     A7 1E 62 FC | 	wrlong	local01, fp
0f158     08 4E 05 F1 | 	add	fp, #8
0f15c     A7 3A 68 FC | 	wrlong	#29, fp
0f160     08 4E 85 F1 | 	sub	fp, #8
0f164     A7 12 02 F6 | 	mov	arg01, fp
0f168     79 00 00 FF 
0f16c     D0 E5 85 F1 | 	sub	objptr, ##62416
0f170     D0 98 BF FD | 	call	#_push
0f174                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0f174     14 00 90 FD | 	jmp	#LR__1264
0f178                 | LR__1262
0f178     29 12 06 F6 | 	mov	arg01, #41
0f17c     80 34 B0 FD | 	call	#_printerror
0f180                 | '      printerror(41) : return
0f180     08 00 90 FD | 	jmp	#LR__1264
0f184                 | LR__1263
0f184     29 12 06 F6 | 	mov	arg01, #41
0f188     74 34 B0 FD | 	call	#_printerror
0f18c                 | LR__1264
0f18c     A7 F0 03 F6 | 	mov	ptra, fp
0f190     B2 00 A0 FD | 	call	#popregs_
0f194                 | _do_stick_ret
0f194     2D 00 64 FD | 	ret
0f198                 | 
0f198                 | ' 
0f198                 | ' sub do_strig
0f198                 | _do_strig
0f198     01 4A 05 F6 | 	mov	COUNT_, #1
0f19c     A8 00 A0 FD | 	call	#pushregs_
0f1a0     10 F0 07 F1 | 	add	ptra, #16
0f1a4     69 00 00 FF 
0f1a8     54 E4 05 F1 | 	add	objptr, ##53844
0f1ac     F2 1E 02 FB | 	rdlong	local01, objptr
0f1b0     0F 17 02 F6 | 	mov	arg03, local01
0f1b4     01 16 66 F0 | 	shl	arg03, #1
0f1b8     0F 17 02 F1 | 	add	arg03, local01
0f1bc     02 16 66 F0 | 	shl	arg03, #2
0f1c0     03 00 00 FF 
0f1c4     04 E4 85 F1 | 	sub	objptr, ##1540
0f1c8     F2 16 02 F1 | 	add	arg03, objptr
0f1cc     0B 17 02 FB | 	rdlong	arg03, arg03
0f1d0     0C 4E 05 F1 | 	add	fp, #12
0f1d4     A7 16 62 FC | 	wrlong	arg03, fp
0f1d8                 | ' 
0f1d8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f1d8                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0f1d8     0C 4E 85 F1 | 	sub	fp, #12
0f1dc     02 16 16 F2 | 	cmp	arg03, #2 wc
0f1e0     66 00 00 FF 
0f1e4     50 E4 85 F1 | 	sub	objptr, ##52304
0f1e8     3C 00 90 CD |  if_b	jmp	#LR__1270
0f1ec     00 12 06 F6 | 	mov	arg01, #0
0f1f0     24 BF B0 FD | 	call	#__system___getiolock_0362
0f1f4     FD 12 02 F6 | 	mov	arg01, result1
0f1f8     68 69 B0 FD | 	call	#__system___lockmem
0f1fc     28 01 00 FF 
0f200     8E 15 06 F6 | 	mov	arg02, ##@LR__4379
0f204     00 12 06 F6 | 	mov	arg01, #0
0f208     00 16 06 F6 | 	mov	arg03, #0
0f20c     48 76 B0 FD | 	call	#__system___basic_print_string
0f210     00 12 06 F6 | 	mov	arg01, #0
0f214     00 BF B0 FD | 	call	#__system___getiolock_0362
0f218     FD 00 68 FC | 	wrlong	#0, result1
0f21c     27 12 06 F6 | 	mov	arg01, #39
0f220     DC 33 B0 FD | 	call	#_printerror
0f224     E8 00 90 FD | 	jmp	#LR__1274
0f228                 | LR__1270
0f228                 | ' 
0f228                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0f228     0C 4E 05 F1 | 	add	fp, #12
0f22c     A7 FE 09 FB | 	rdlong	result3, fp wz
0f230     0C 4E 85 F1 | 	sub	fp, #12
0f234     30 00 90 5D |  if_ne	jmp	#LR__1271
0f238     79 00 00 FF 
0f23c     EC E5 05 F1 | 	add	objptr, ##62444
0f240     F2 1E 02 FB | 	rdlong	local01, objptr
0f244     79 00 00 FF 
0f248     EC E5 85 F1 | 	sub	objptr, ##62444
0f24c     A7 1E 62 FC | 	wrlong	local01, fp
0f250     08 4E 05 F1 | 	add	fp, #8
0f254     A7 3A 68 FC | 	wrlong	#29, fp
0f258     08 4E 85 F1 | 	sub	fp, #8
0f25c     A7 12 02 F6 | 	mov	arg01, fp
0f260     E0 97 BF FD | 	call	#_push
0f264     A8 00 90 FD | 	jmp	#LR__1274
0f268                 | LR__1271
0f268     40 97 BF FD | 	call	#_pop
0f26c     A7 FA 61 FC | 	wrlong	result1, fp
0f270     04 4E 05 F1 | 	add	fp, #4
0f274     A7 FC 61 FC | 	wrlong	result2, fp
0f278     04 4E 05 F1 | 	add	fp, #4
0f27c     A7 FE 61 FC | 	wrlong	result3, fp
0f280                 | ' 
0f280                 | ' t1=pop()
0f280                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0f280     08 4E 85 F1 | 	sub	fp, #8
0f284     1C FE 0D F2 | 	cmp	result3, #28 wz
0f288     08 4E 05 51 |  if_ne	add	fp, #8
0f28c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f290     08 4E 85 51 |  if_ne	sub	fp, #8
0f294     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f298     6C 00 90 5D |  if_ne	jmp	#LR__1273
0f29c     A7 1E 02 FB | 	rdlong	local01, fp
0f2a0     7A 00 00 FF 
0f2a4     90 E4 05 F1 | 	add	objptr, ##62608
0f2a8     F2 1E 62 FC | 	wrlong	local01, objptr
0f2ac                 | '   q=t1.result.uresult
0f2ac                 | '   if q<7 then 
0f2ac     7A 00 00 FF 
0f2b0     90 E4 85 F1 | 	sub	objptr, ##62608
0f2b4     07 1E 56 F2 | 	cmps	local01, #7 wc
0f2b8     40 00 90 3D |  if_ae	jmp	#LR__1272
0f2bc     7A 00 00 FF 
0f2c0     90 E4 05 F1 | 	add	objptr, ##62608
0f2c4     F2 1E 02 FB | 	rdlong	local01, objptr
0f2c8     02 1E 66 F0 | 	shl	local01, #2
0f2cc     A4 E4 85 F1 | 	sub	objptr, #164
0f2d0     F2 1E 02 F1 | 	add	local01, objptr
0f2d4     0F 1F 02 FB | 	rdlong	local01, local01
0f2d8     A7 1E 62 FC | 	wrlong	local01, fp
0f2dc     08 4E 05 F1 | 	add	fp, #8
0f2e0     A7 3A 68 FC | 	wrlong	#29, fp
0f2e4     08 4E 85 F1 | 	sub	fp, #8
0f2e8     A7 12 02 F6 | 	mov	arg01, fp
0f2ec     79 00 00 FF 
0f2f0     EC E5 85 F1 | 	sub	objptr, ##62444
0f2f4     4C 97 BF FD | 	call	#_push
0f2f8                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0f2f8     14 00 90 FD | 	jmp	#LR__1274
0f2fc                 | LR__1272
0f2fc     29 12 06 F6 | 	mov	arg01, #41
0f300     FC 32 B0 FD | 	call	#_printerror
0f304                 | '      printerror(41) : return
0f304     08 00 90 FD | 	jmp	#LR__1274
0f308                 | LR__1273
0f308     29 12 06 F6 | 	mov	arg01, #41
0f30c     F0 32 B0 FD | 	call	#_printerror
0f310                 | LR__1274
0f310     A7 F0 03 F6 | 	mov	ptra, fp
0f314     B2 00 A0 FD | 	call	#popregs_
0f318                 | _do_strig_ret
0f318     2D 00 64 FD | 	ret
0f31c                 | 
0f31c                 | ' 
0f31c                 | ' sub do_getpixel
0f31c                 | _do_getpixel
0f31c     00 4A 05 F6 | 	mov	COUNT_, #0
0f320     A8 00 A0 FD | 	call	#pushregs_
0f324     24 F0 07 F1 | 	add	ptra, #36
0f328     69 00 00 FF 
0f32c     54 E4 05 F1 | 	add	objptr, ##53844
0f330     F2 16 02 FB | 	rdlong	arg03, objptr
0f334     0B 15 02 F6 | 	mov	arg02, arg03
0f338     01 14 66 F0 | 	shl	arg02, #1
0f33c     0B 15 02 F1 | 	add	arg02, arg03
0f340     02 14 66 F0 | 	shl	arg02, #2
0f344     03 00 00 FF 
0f348     04 E4 85 F1 | 	sub	objptr, ##1540
0f34c     F2 14 02 F1 | 	add	arg02, objptr
0f350     0A 17 02 FB | 	rdlong	arg03, arg02
0f354     18 4E 05 F1 | 	add	fp, #24
0f358     A7 16 62 FC | 	wrlong	arg03, fp
0f35c                 | ' 
0f35c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f35c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0f35c     18 4E 85 F1 | 	sub	fp, #24
0f360     02 16 0E F2 | 	cmp	arg03, #2 wz
0f364     66 00 00 FF 
0f368     50 E4 85 F1 | 	sub	objptr, ##52304
0f36c     3C 00 90 AD |  if_e	jmp	#LR__1280
0f370     00 12 06 F6 | 	mov	arg01, #0
0f374     A0 BD B0 FD | 	call	#__system___getiolock_0362
0f378     FD 12 02 F6 | 	mov	arg01, result1
0f37c     E4 67 B0 FD | 	call	#__system___lockmem
0f380     28 01 00 FF 
0f384     96 15 06 F6 | 	mov	arg02, ##@LR__4380
0f388     00 12 06 F6 | 	mov	arg01, #0
0f38c     00 16 06 F6 | 	mov	arg03, #0
0f390     C4 74 B0 FD | 	call	#__system___basic_print_string
0f394     00 12 06 F6 | 	mov	arg01, #0
0f398     7C BD B0 FD | 	call	#__system___getiolock_0362
0f39c     FD 00 68 FC | 	wrlong	#0, result1
0f3a0     27 12 06 F6 | 	mov	arg01, #39
0f3a4     58 32 B0 FD | 	call	#_printerror
0f3a8     B4 00 90 FD | 	jmp	#LR__1281
0f3ac                 | LR__1280
0f3ac     FC 95 BF FD | 	call	#_pop
0f3b0     FD 16 02 F6 | 	mov	arg03, result1
0f3b4     FE 14 02 F6 | 	mov	arg02, result2
0f3b8     FF 12 02 F6 | 	mov	arg01, result3
0f3bc     0C 4E 05 F1 | 	add	fp, #12
0f3c0     A7 16 62 FC | 	wrlong	arg03, fp
0f3c4     04 4E 05 F1 | 	add	fp, #4
0f3c8     A7 14 62 FC | 	wrlong	arg02, fp
0f3cc     04 4E 05 F1 | 	add	fp, #4
0f3d0     A7 12 62 FC | 	wrlong	arg01, fp
0f3d4     14 4E 85 F1 | 	sub	fp, #20
0f3d8     D0 95 BF FD | 	call	#_pop
0f3dc     FF 16 02 F6 | 	mov	arg03, result3
0f3e0     A7 FA 61 FC | 	wrlong	result1, fp
0f3e4     04 4E 05 F1 | 	add	fp, #4
0f3e8     A7 FC 61 FC | 	wrlong	result2, fp
0f3ec     04 4E 05 F1 | 	add	fp, #4
0f3f0     A7 16 62 FC | 	wrlong	arg03, fp
0f3f4     08 4E 85 F1 | 	sub	fp, #8
0f3f8     A7 12 02 F6 | 	mov	arg01, fp
0f3fc     60 F7 BF FD | 	call	#_converttoint
0f400     1C 4E 05 F1 | 	add	fp, #28
0f404     A7 FA 61 FC | 	wrlong	result1, fp
0f408     10 4E 85 F1 | 	sub	fp, #16
0f40c     A7 12 02 F6 | 	mov	arg01, fp
0f410     0C 4E 85 F1 | 	sub	fp, #12
0f414     48 F7 BF FD | 	call	#_converttoint
0f418     FD 16 02 F6 | 	mov	arg03, result1
0f41c     20 4E 05 F1 | 	add	fp, #32
0f420     A7 16 62 FC | 	wrlong	arg03, fp
0f424     F2 12 02 FB | 	rdlong	arg01, objptr
0f428     04 4E 85 F1 | 	sub	fp, #4
0f42c     A7 FE 01 FB | 	rdlong	result3, fp
0f430     FF 12 02 F1 | 	add	arg01, result3
0f434     1C 4E 85 F1 | 	sub	fp, #28
0f438     0A 16 66 F0 | 	shl	arg03, #10
0f43c     0B 13 02 F1 | 	add	arg01, arg03
0f440     20 33 B0 FD | 	call	#_pspeek
0f444     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f448     A7 FA 61 FC | 	wrlong	result1, fp
0f44c     08 4E 05 F1 | 	add	fp, #8
0f450     A7 3A 68 FC | 	wrlong	#29, fp
0f454     08 4E 85 F1 | 	sub	fp, #8
0f458     A7 12 02 F6 | 	mov	arg01, fp
0f45c     E4 95 BF FD | 	call	#_push
0f460                 | LR__1281
0f460     A7 F0 03 F6 | 	mov	ptra, fp
0f464     B2 00 A0 FD | 	call	#popregs_
0f468                 | _do_getpixel_ret
0f468     2D 00 64 FD | 	ret
0f46c                 | 
0f46c                 | ' 
0f46c                 | ' 
0f46c                 | ' 
0f46c                 | ' sub do_defsprite
0f46c                 | _do_defsprite
0f46c     07 4A 05 F6 | 	mov	COUNT_, #7
0f470     A8 00 A0 FD | 	call	#pushregs_
0f474     5C F0 07 F1 | 	add	ptra, #92
0f478     30 95 BF FD | 	call	#_pop
0f47c     FD 16 02 F6 | 	mov	arg03, result1
0f480     FE 14 02 F6 | 	mov	arg02, result2
0f484     FF 12 02 F6 | 	mov	arg01, result3
0f488     30 4E 05 F1 | 	add	fp, #48
0f48c     A7 16 62 FC | 	wrlong	arg03, fp
0f490     04 4E 05 F1 | 	add	fp, #4
0f494     A7 14 62 FC | 	wrlong	arg02, fp
0f498     04 4E 05 F1 | 	add	fp, #4
0f49c     A7 12 62 FC | 	wrlong	arg01, fp
0f4a0     38 4E 85 F1 | 	sub	fp, #56
0f4a4     04 95 BF FD | 	call	#_pop
0f4a8     FD 16 02 F6 | 	mov	arg03, result1
0f4ac     FE 14 02 F6 | 	mov	arg02, result2
0f4b0     FF 12 02 F6 | 	mov	arg01, result3
0f4b4     24 4E 05 F1 | 	add	fp, #36
0f4b8     A7 16 62 FC | 	wrlong	arg03, fp
0f4bc     04 4E 05 F1 | 	add	fp, #4
0f4c0     A7 14 62 FC | 	wrlong	arg02, fp
0f4c4     04 4E 05 F1 | 	add	fp, #4
0f4c8     A7 12 62 FC | 	wrlong	arg01, fp
0f4cc     2C 4E 85 F1 | 	sub	fp, #44
0f4d0     D8 94 BF FD | 	call	#_pop
0f4d4     FD 16 02 F6 | 	mov	arg03, result1
0f4d8     FE 14 02 F6 | 	mov	arg02, result2
0f4dc     FF 12 02 F6 | 	mov	arg01, result3
0f4e0     18 4E 05 F1 | 	add	fp, #24
0f4e4     A7 16 62 FC | 	wrlong	arg03, fp
0f4e8     04 4E 05 F1 | 	add	fp, #4
0f4ec     A7 14 62 FC | 	wrlong	arg02, fp
0f4f0     04 4E 05 F1 | 	add	fp, #4
0f4f4     A7 12 62 FC | 	wrlong	arg01, fp
0f4f8     20 4E 85 F1 | 	sub	fp, #32
0f4fc     AC 94 BF FD | 	call	#_pop
0f500     FD 16 02 F6 | 	mov	arg03, result1
0f504     FE 14 02 F6 | 	mov	arg02, result2
0f508     FF 12 02 F6 | 	mov	arg01, result3
0f50c     0C 4E 05 F1 | 	add	fp, #12
0f510     A7 16 62 FC | 	wrlong	arg03, fp
0f514     04 4E 05 F1 | 	add	fp, #4
0f518     A7 14 62 FC | 	wrlong	arg02, fp
0f51c     04 4E 05 F1 | 	add	fp, #4
0f520     A7 12 62 FC | 	wrlong	arg01, fp
0f524     14 4E 85 F1 | 	sub	fp, #20
0f528     80 94 BF FD | 	call	#_pop
0f52c     FF 16 02 F6 | 	mov	arg03, result3
0f530     A7 FA 61 FC | 	wrlong	result1, fp
0f534     04 4E 05 F1 | 	add	fp, #4
0f538     A7 FC 61 FC | 	wrlong	result2, fp
0f53c     04 4E 05 F1 | 	add	fp, #4
0f540     A7 16 62 FC | 	wrlong	arg03, fp
0f544     08 4E 85 F1 | 	sub	fp, #8
0f548     A7 12 02 F6 | 	mov	arg01, fp
0f54c     10 F6 BF FD | 	call	#_converttoint
0f550     3C 4E 05 F1 | 	add	fp, #60
0f554     A7 FA 61 FC | 	wrlong	result1, fp
0f558     30 4E 85 F1 | 	sub	fp, #48
0f55c     A7 12 02 F6 | 	mov	arg01, fp
0f560     0C 4E 85 F1 | 	sub	fp, #12
0f564     F8 F5 BF FD | 	call	#_converttoint
0f568     40 4E 05 F1 | 	add	fp, #64
0f56c     A7 FA 61 FC | 	wrlong	result1, fp
0f570     28 4E 85 F1 | 	sub	fp, #40
0f574     A7 12 02 F6 | 	mov	arg01, fp
0f578     18 4E 85 F1 | 	sub	fp, #24
0f57c     E0 F5 BF FD | 	call	#_converttoint
0f580     44 4E 05 F1 | 	add	fp, #68
0f584     A7 FA 61 FC | 	wrlong	result1, fp
0f588     20 4E 85 F1 | 	sub	fp, #32
0f58c     A7 12 02 F6 | 	mov	arg01, fp
0f590     24 4E 85 F1 | 	sub	fp, #36
0f594     C8 F5 BF FD | 	call	#_converttoint
0f598     48 4E 05 F1 | 	add	fp, #72
0f59c     A7 FA 61 FC | 	wrlong	result1, fp
0f5a0     18 4E 85 F1 | 	sub	fp, #24
0f5a4     A7 12 02 F6 | 	mov	arg01, fp
0f5a8     30 4E 85 F1 | 	sub	fp, #48
0f5ac     B0 F5 BF FD | 	call	#_converttoint
0f5b0     4C 4E 05 F1 | 	add	fp, #76
0f5b4     A7 FA 61 FC | 	wrlong	result1, fp
0f5b8                 | ' 
0f5b8                 | ' t5=pop()
0f5b8                 | ' t4=pop()
0f5b8                 | ' t3=pop()
0f5b8                 | ' t2=pop()
0f5b8                 | ' t1=pop()
0f5b8                 | ' 
0f5b8                 | ' ' do convert, defsprite is not a racing command
0f5b8                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0f5b8                 | '  
0f5b8                 | ' ' todo: check parameters for linits
0f5b8                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0f5b8     10 4E 85 F1 | 	sub	fp, #16
0f5bc     A7 16 02 FB | 	rdlong	arg03, fp
0f5c0     3C 4E 85 F1 | 	sub	fp, #60
0f5c4     02 16 66 F0 | 	shl	arg03, #2
0f5c8     7A 00 00 FF 
0f5cc     08 E4 05 F1 | 	add	objptr, ##62472
0f5d0     F2 16 02 F1 | 	add	arg03, objptr
0f5d4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f5d8     7A 00 00 FF 
0f5dc     08 E4 85 F1 | 	sub	objptr, ##62472
0f5e0     2C 00 90 AD |  if_e	jmp	#LR__1290
0f5e4     3C 4E 05 F1 | 	add	fp, #60
0f5e8     A7 16 02 FB | 	rdlong	arg03, fp
0f5ec     3C 4E 85 F1 | 	sub	fp, #60
0f5f0     02 16 66 F0 | 	shl	arg03, #2
0f5f4     7A 00 00 FF 
0f5f8     08 E4 05 F1 | 	add	objptr, ##62472
0f5fc     F2 16 02 F1 | 	add	arg03, objptr
0f600     0B 13 02 FB | 	rdlong	arg01, arg03
0f604     7A 00 00 FF 
0f608     08 E4 85 F1 | 	sub	objptr, ##62472
0f60c     F8 A0 B0 FD | 	call	#__system___gc_free
0f610                 | LR__1290
0f610     3C 4E 05 F1 | 	add	fp, #60
0f614     A7 1E 02 FB | 	rdlong	local01, fp
0f618     0C 4E 05 F1 | 	add	fp, #12
0f61c     A7 16 02 FB | 	rdlong	arg03, fp
0f620     04 4E 05 F1 | 	add	fp, #4
0f624     A7 14 02 FB | 	rdlong	arg02, fp
0f628     0A 17 02 FD | 	qmul	arg03, arg02
0f62c     02 1E 66 F0 | 	shl	local01, #2
0f630     7A 00 00 FF 
0f634     08 E4 05 F1 | 	add	objptr, ##62472
0f638     F2 1E 02 F1 | 	add	local01, objptr
0f63c     4C 4E 85 F1 | 	sub	fp, #76
0f640     7A 00 00 FF 
0f644     08 E4 85 F1 | 	sub	objptr, ##62472
0f648     18 12 62 FD | 	getqx	arg01
0f64c     7C 9F B0 FD | 	call	#__system___gc_alloc_managed
0f650     0F FB 61 FC | 	wrlong	result1, local01
0f654                 | ' for y=a3 to a3+a5-1
0f654     44 4E 05 F1 | 	add	fp, #68
0f658     A7 20 02 FB | 	rdlong	local02, fp
0f65c     0C 4E 05 F1 | 	add	fp, #12
0f660     A7 20 62 FC | 	wrlong	local02, fp
0f664     0C 4E 85 F1 | 	sub	fp, #12
0f668     A7 22 02 FB | 	rdlong	local03, fp
0f66c     08 4E 05 F1 | 	add	fp, #8
0f670     A7 24 02 FB | 	rdlong	local04, fp
0f674     4C 4E 85 F1 | 	sub	fp, #76
0f678     12 23 02 F1 | 	add	local03, local04
0f67c                 | LR__1291
0f67c     50 4E 05 F1 | 	add	fp, #80
0f680     A7 20 02 FB | 	rdlong	local02, fp
0f684     50 4E 85 F1 | 	sub	fp, #80
0f688     11 21 52 F2 | 	cmps	local02, local03 wc
0f68c     10 01 90 3D |  if_ae	jmp	#LR__1294
0f690                 | '   for x=a2 to a4+a2-1
0f690     40 4E 05 F1 | 	add	fp, #64
0f694     A7 1E 02 FB | 	rdlong	local01, fp
0f698     7A 00 00 FF 
0f69c     64 E4 05 F1 | 	add	objptr, ##62564
0f6a0     F2 1E 62 FC | 	wrlong	local01, objptr
0f6a4     7A 00 00 FF 
0f6a8     64 E4 85 F1 | 	sub	objptr, ##62564
0f6ac     08 4E 05 F1 | 	add	fp, #8
0f6b0     A7 26 02 FB | 	rdlong	local05, fp
0f6b4     08 4E 85 F1 | 	sub	fp, #8
0f6b8     A7 28 02 FB | 	rdlong	local06, fp
0f6bc     40 4E 85 F1 | 	sub	fp, #64
0f6c0     14 27 02 F1 | 	add	local05, local06
0f6c4                 | LR__1292
0f6c4     7A 00 00 FF 
0f6c8     64 E4 05 F1 | 	add	objptr, ##62564
0f6cc     F2 1E 02 FB | 	rdlong	local01, objptr
0f6d0     7A 00 00 FF 
0f6d4     64 E4 85 F1 | 	sub	objptr, ##62564
0f6d8     13 1F 52 F2 | 	cmps	local01, local05 wc
0f6dc     A8 00 90 3D |  if_ae	jmp	#LR__1293
0f6e0     3C 4E 05 F1 | 	add	fp, #60
0f6e4     A7 28 02 FB | 	rdlong	local06, fp
0f6e8     04 4E 05 F1 | 	add	fp, #4
0f6ec     A7 24 02 FB | 	rdlong	local04, fp
0f6f0     10 4E 05 F1 | 	add	fp, #16
0f6f4     A7 20 02 FB | 	rdlong	local02, fp
0f6f8     10 1F 02 F6 | 	mov	local01, local02
0f6fc     0C 4E 85 F1 | 	sub	fp, #12
0f700     A7 16 02 FB | 	rdlong	arg03, fp
0f704     0B 1F 82 F1 | 	sub	local01, arg03
0f708     04 4E 05 F1 | 	add	fp, #4
0f70c     A7 16 02 FB | 	rdlong	arg03, fp
0f710     0B 1F 02 FD | 	qmul	local01, arg03
0f714     02 28 66 F0 | 	shl	local06, #2
0f718     7A 00 00 FF 
0f71c     08 E4 05 F1 | 	add	objptr, ##62472
0f720     F2 28 02 F1 | 	add	local06, objptr
0f724     14 29 02 FB | 	rdlong	local06, local06
0f728     5C E4 05 F1 | 	add	objptr, #92
0f72c     F2 1E 02 FB | 	rdlong	local01, objptr
0f730     7A 00 00 FF 
0f734     64 E4 85 F1 | 	sub	objptr, ##62564
0f738     0F 2B 02 F6 | 	mov	local07, local01
0f73c     12 2B 82 F1 | 	sub	local07, local04
0f740     F2 12 02 FB | 	rdlong	arg01, objptr
0f744     0F 13 02 F1 | 	add	arg01, local01
0f748     48 4E 85 F1 | 	sub	fp, #72
0f74c     0A 20 66 F0 | 	shl	local02, #10
0f750     10 13 02 F1 | 	add	arg01, local02
0f754     18 24 62 FD | 	getqx	local04
0f758     12 2B 02 F1 | 	add	local07, local04
0f75c     14 2B 02 F1 | 	add	local07, local06
0f760     00 30 B0 FD | 	call	#_pspeek
0f764     15 FB 41 FC | 	wrbyte	result1, local07
0f768     7A 00 00 FF 
0f76c     64 E4 05 F1 | 	add	objptr, ##62564
0f770     F2 2A 02 FB | 	rdlong	local07, objptr
0f774     01 2A 06 F1 | 	add	local07, #1
0f778     F2 2A 62 FC | 	wrlong	local07, objptr
0f77c     7A 00 00 FF 
0f780     64 E4 85 F1 | 	sub	objptr, ##62564
0f784     3C FF 9F FD | 	jmp	#LR__1292
0f788                 | LR__1293
0f788     50 4E 05 F1 | 	add	fp, #80
0f78c     A7 2A 02 FB | 	rdlong	local07, fp
0f790     01 2A 06 F1 | 	add	local07, #1
0f794     A7 2A 62 FC | 	wrlong	local07, fp
0f798     50 4E 85 F1 | 	sub	fp, #80
0f79c     DC FE 9F FD | 	jmp	#LR__1291
0f7a0                 | LR__1294
0f7a0     3C 4E 05 F1 | 	add	fp, #60
0f7a4     A7 2A 02 FB | 	rdlong	local07, fp
0f7a8     15 13 02 F6 | 	mov	arg01, local07
0f7ac     3C 4E 85 F1 | 	sub	fp, #60
0f7b0     02 2A 66 F0 | 	shl	local07, #2
0f7b4     7A 00 00 FF 
0f7b8     08 E4 05 F1 | 	add	objptr, ##62472
0f7bc     F2 2A 02 F1 | 	add	local07, objptr
0f7c0     15 15 02 FB | 	rdlong	arg02, local07
0f7c4     7A 00 00 FF 
0f7c8     08 E4 85 F1 | 	sub	objptr, ##62472
0f7cc     7C 43 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0f7d0     3C 4E 05 F1 | 	add	fp, #60
0f7d4     A7 12 02 FB | 	rdlong	arg01, fp
0f7d8     0C 4E 05 F1 | 	add	fp, #12
0f7dc     A7 14 02 FB | 	rdlong	arg02, fp
0f7e0     04 4E 05 F1 | 	add	fp, #4
0f7e4     A7 16 02 FB | 	rdlong	arg03, fp
0f7e8     4C 4E 85 F1 | 	sub	fp, #76
0f7ec     D0 43 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f7f0     A7 F0 03 F6 | 	mov	ptra, fp
0f7f4     B2 00 A0 FD | 	call	#popregs_
0f7f8                 | _do_defsprite_ret
0f7f8     2D 00 64 FD | 	ret
0f7fc                 | 
0f7fc                 | ' 
0f7fc                 | ' sub do_sprite
0f7fc                 | _do_sprite
0f7fc     00 4A 05 F6 | 	mov	COUNT_, #0
0f800     A8 00 A0 FD | 	call	#pushregs_
0f804     30 F0 07 F1 | 	add	ptra, #48
0f808     A0 91 BF FD | 	call	#_pop
0f80c     FD 16 02 F6 | 	mov	arg03, result1
0f810     FE 14 02 F6 | 	mov	arg02, result2
0f814     FF 12 02 F6 | 	mov	arg01, result3
0f818     18 4E 05 F1 | 	add	fp, #24
0f81c     A7 16 62 FC | 	wrlong	arg03, fp
0f820     04 4E 05 F1 | 	add	fp, #4
0f824     A7 14 62 FC | 	wrlong	arg02, fp
0f828     04 4E 05 F1 | 	add	fp, #4
0f82c     A7 12 62 FC | 	wrlong	arg01, fp
0f830     20 4E 85 F1 | 	sub	fp, #32
0f834     74 91 BF FD | 	call	#_pop
0f838     FD 16 02 F6 | 	mov	arg03, result1
0f83c     FE 14 02 F6 | 	mov	arg02, result2
0f840     FF 12 02 F6 | 	mov	arg01, result3
0f844     0C 4E 05 F1 | 	add	fp, #12
0f848     A7 16 62 FC | 	wrlong	arg03, fp
0f84c     04 4E 05 F1 | 	add	fp, #4
0f850     A7 14 62 FC | 	wrlong	arg02, fp
0f854     04 4E 05 F1 | 	add	fp, #4
0f858     A7 12 62 FC | 	wrlong	arg01, fp
0f85c     14 4E 85 F1 | 	sub	fp, #20
0f860     48 91 BF FD | 	call	#_pop
0f864     FF 16 02 F6 | 	mov	arg03, result3
0f868     A7 FA 61 FC | 	wrlong	result1, fp
0f86c     04 4E 05 F1 | 	add	fp, #4
0f870     A7 FC 61 FC | 	wrlong	result2, fp
0f874     04 4E 05 F1 | 	add	fp, #4
0f878     A7 16 62 FC | 	wrlong	arg03, fp
0f87c     08 4E 85 F1 | 	sub	fp, #8
0f880     A7 12 02 F6 | 	mov	arg01, fp
0f884     D8 F2 BF FD | 	call	#_converttoint
0f888     24 4E 05 F1 | 	add	fp, #36
0f88c     A7 FA 61 FC | 	wrlong	result1, fp
0f890     18 4E 85 F1 | 	sub	fp, #24
0f894     A7 12 02 F6 | 	mov	arg01, fp
0f898     0C 4E 85 F1 | 	sub	fp, #12
0f89c     C0 F2 BF FD | 	call	#_converttoint
0f8a0     28 4E 05 F1 | 	add	fp, #40
0f8a4     A7 FA 61 FC | 	wrlong	result1, fp
0f8a8     10 4E 85 F1 | 	sub	fp, #16
0f8ac     A7 12 02 F6 | 	mov	arg01, fp
0f8b0     18 4E 85 F1 | 	sub	fp, #24
0f8b4     A8 F2 BF FD | 	call	#_converttoint
0f8b8     2C 4E 05 F1 | 	add	fp, #44
0f8bc     A7 FA 61 FC | 	wrlong	result1, fp
0f8c0     08 4E 85 F1 | 	sub	fp, #8
0f8c4     A7 12 02 FB | 	rdlong	arg01, fp
0f8c8     04 4E 05 F1 | 	add	fp, #4
0f8cc     A7 14 02 FB | 	rdlong	arg02, fp
0f8d0     FD 16 02 F6 | 	mov	arg03, result1
0f8d4     28 4E 85 F1 | 	sub	fp, #40
0f8d8     98 42 B0 FD | 	call	#_hg010b_spin2_setspritepos
0f8dc     A7 F0 03 F6 | 	mov	ptra, fp
0f8e0     B2 00 A0 FD | 	call	#popregs_
0f8e4                 | _do_sprite_ret
0f8e4     2D 00 64 FD | 	ret
0f8e8                 | 
0f8e8                 | ' 
0f8e8                 | ' sub do_mousex
0f8e8                 | _do_mousex
0f8e8     00 4A 05 F6 | 	mov	COUNT_, #0
0f8ec     A8 00 A0 FD | 	call	#pushregs_
0f8f0     0C F0 07 F1 | 	add	ptra, #12
0f8f4     08 4E 05 F1 | 	add	fp, #8
0f8f8     A7 3A 68 FC | 	wrlong	#29, fp
0f8fc     08 4E 85 F1 | 	sub	fp, #8
0f900     79 00 00 FF 
0f904     C0 E5 05 F1 | 	add	objptr, ##62400
0f908     F2 12 02 FB | 	rdlong	arg01, objptr
0f90c     79 00 00 FF 
0f910     C0 E5 85 F1 | 	sub	objptr, ##62400
0f914     A7 12 62 FC | 	wrlong	arg01, fp
0f918     A7 12 02 F6 | 	mov	arg01, fp
0f91c     24 91 BF FD | 	call	#_push
0f920     A7 F0 03 F6 | 	mov	ptra, fp
0f924     B2 00 A0 FD | 	call	#popregs_
0f928                 | _do_mousex_ret
0f928     2D 00 64 FD | 	ret
0f92c                 | 
0f92c                 | ' 
0f92c                 | ' sub do_mousey
0f92c                 | _do_mousey
0f92c     00 4A 05 F6 | 	mov	COUNT_, #0
0f930     A8 00 A0 FD | 	call	#pushregs_
0f934     0C F0 07 F1 | 	add	ptra, #12
0f938     08 4E 05 F1 | 	add	fp, #8
0f93c     A7 3A 68 FC | 	wrlong	#29, fp
0f940     08 4E 85 F1 | 	sub	fp, #8
0f944     79 00 00 FF 
0f948     C4 E5 05 F1 | 	add	objptr, ##62404
0f94c     F2 12 02 FB | 	rdlong	arg01, objptr
0f950     79 00 00 FF 
0f954     C4 E5 85 F1 | 	sub	objptr, ##62404
0f958     A7 12 62 FC | 	wrlong	arg01, fp
0f95c     A7 12 02 F6 | 	mov	arg01, fp
0f960     E0 90 BF FD | 	call	#_push
0f964     A7 F0 03 F6 | 	mov	ptra, fp
0f968     B2 00 A0 FD | 	call	#popregs_
0f96c                 | _do_mousey_ret
0f96c     2D 00 64 FD | 	ret
0f970                 | 
0f970                 | ' 
0f970                 | ' sub do_mousew
0f970                 | _do_mousew
0f970     00 4A 05 F6 | 	mov	COUNT_, #0
0f974     A8 00 A0 FD | 	call	#pushregs_
0f978     0C F0 07 F1 | 	add	ptra, #12
0f97c     08 4E 05 F1 | 	add	fp, #8
0f980     A7 38 68 FC | 	wrlong	#28, fp
0f984     08 4E 85 F1 | 	sub	fp, #8
0f988     79 00 00 FF 
0f98c     CC E5 05 F1 | 	add	objptr, ##62412
0f990     F2 12 02 FB | 	rdlong	arg01, objptr
0f994     79 00 00 FF 
0f998     CC E5 85 F1 | 	sub	objptr, ##62412
0f99c     A7 12 62 FC | 	wrlong	arg01, fp
0f9a0     A7 12 02 F6 | 	mov	arg01, fp
0f9a4     9C 90 BF FD | 	call	#_push
0f9a8     A7 F0 03 F6 | 	mov	ptra, fp
0f9ac     B2 00 A0 FD | 	call	#popregs_
0f9b0                 | _do_mousew_ret
0f9b0     2D 00 64 FD | 	ret
0f9b4                 | 
0f9b4                 | ' 
0f9b4                 | ' sub do_mousek
0f9b4                 | _do_mousek
0f9b4     00 4A 05 F6 | 	mov	COUNT_, #0
0f9b8     A8 00 A0 FD | 	call	#pushregs_
0f9bc     0C F0 07 F1 | 	add	ptra, #12
0f9c0     08 4E 05 F1 | 	add	fp, #8
0f9c4     A7 3A 68 FC | 	wrlong	#29, fp
0f9c8     08 4E 85 F1 | 	sub	fp, #8
0f9cc     79 00 00 FF 
0f9d0     C8 E5 05 F1 | 	add	objptr, ##62408
0f9d4     F2 12 02 FB | 	rdlong	arg01, objptr
0f9d8     79 00 00 FF 
0f9dc     C8 E5 85 F1 | 	sub	objptr, ##62408
0f9e0     A7 12 62 FC | 	wrlong	arg01, fp
0f9e4     A7 12 02 F6 | 	mov	arg01, fp
0f9e8     58 90 BF FD | 	call	#_push
0f9ec     A7 F0 03 F6 | 	mov	ptra, fp
0f9f0     B2 00 A0 FD | 	call	#popregs_
0f9f4                 | _do_mousek_ret
0f9f4     2D 00 64 FD | 	ret
0f9f8                 | 
0f9f8                 | ' sub do_gettime
0f9f8                 | _do_gettime
0f9f8     02 4A 05 F6 | 	mov	COUNT_, #2
0f9fc     A8 00 A0 FD | 	call	#pushregs_
0fa00     14 F0 07 F1 | 	add	ptra, #20
0fa04                 | ' 
0fa04                 | ' const asm 
0fa04     1A 1E 72 FD | 	getct	local01 wc
0fa08     1A 20 62 FD | 	getct	local02
0fa0c                 | ' 
0fa0c                 | ' return hi1, lo1
0fa0c     10 FD 01 F6 | 	mov	result2, local02
0fa10     A7 1E 62 FC | 	wrlong	local01, fp
0fa14     04 4E 05 F1 | 	add	fp, #4
0fa18     A7 FC 61 FC | 	wrlong	result2, fp
0fa1c     0C 4E 05 F1 | 	add	fp, #12
0fa20     A7 3A 68 FC | 	wrlong	#29, fp
0fa24     0C 4E 85 F1 | 	sub	fp, #12
0fa28     A7 12 02 FB | 	rdlong	arg01, fp
0fa2c     04 4E 05 F1 | 	add	fp, #4
0fa30     A7 12 62 FC | 	wrlong	arg01, fp
0fa34     08 4E 85 F1 | 	sub	fp, #8
0fa38     A7 12 02 FB | 	rdlong	arg01, fp
0fa3c     0C 4E 05 F1 | 	add	fp, #12
0fa40     A7 12 62 FC | 	wrlong	arg01, fp
0fa44     04 4E 85 F1 | 	sub	fp, #4
0fa48     A7 12 02 F6 | 	mov	arg01, fp
0fa4c     08 4E 85 F1 | 	sub	fp, #8
0fa50     F0 8F BF FD | 	call	#_push
0fa54     A7 F0 03 F6 | 	mov	ptra, fp
0fa58     B2 00 A0 FD | 	call	#popregs_
0fa5c                 | _do_gettime_ret
0fa5c     2D 00 64 FD | 	ret
0fa60                 | 
0fa60                 | '    
0fa60                 | ' 
0fa60                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0fa60                 | ' 
0fa60                 | ' '' ----------------------------- Clear the screen
0fa60                 | ' 
0fa60                 | ' sub do_cls
0fa60                 | _do_cls
0fa60     56 00 00 FF 
0fa64     10 E4 05 F1 | 	add	objptr, ##44048
0fa68     F2 12 02 FB | 	rdlong	arg01, objptr
0fa6c     04 E4 85 F1 | 	sub	objptr, #4
0fa70     F2 14 02 FB | 	rdlong	arg02, objptr
0fa74     56 00 00 FF 
0fa78     0C E4 85 F1 | 	sub	objptr, ##44044
0fa7c     04 4E B0 FD | 	call	#_hg010b_spin2_cls
0fa80     56 00 00 FF 
0fa84     10 E4 05 F1 | 	add	objptr, ##44048
0fa88     F2 14 02 FB | 	rdlong	arg02, objptr
0fa8c     14 E4 85 F1 | 	sub	objptr, #20
0fa90     F2 14 62 FC | 	wrlong	arg02, objptr
0fa94     55 00 00 FF 
0fa98     FC E5 85 F1 | 	sub	objptr, ##44028
0fa9c                 | ' cls(ink,paper): plot_color=ink: print
0fa9c     00 12 06 F6 | 	mov	arg01, #0
0faa0     74 B6 B0 FD | 	call	#__system___getiolock_0362
0faa4     FD 12 02 F6 | 	mov	arg01, result1
0faa8     B8 60 B0 FD | 	call	#__system___lockmem
0faac     00 12 06 F6 | 	mov	arg01, #0
0fab0     0A 14 06 F6 | 	mov	arg02, #10
0fab4     00 16 06 F6 | 	mov	arg03, #0
0fab8     44 6D B0 FD | 	call	#__system___basic_print_char
0fabc     00 12 06 F6 | 	mov	arg01, #0
0fac0     54 B6 B0 FD | 	call	#__system___getiolock_0362
0fac4     FD 00 68 FC | 	wrlong	#0, result1
0fac8                 | _do_cls_ret
0fac8     2D 00 64 FD | 	ret
0facc                 | 
0facc                 | ' 
0facc                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0facc                 | ' 
0facc                 | ' sub do_color
0facc                 | _do_color
0facc     03 4A 05 F6 | 	mov	COUNT_, #3
0fad0     A8 00 A0 FD | 	call	#pushregs_
0fad4     D4 8E BF FD | 	call	#_pop
0fad8     FD 1E 02 F6 | 	mov	local01, result1
0fadc     FE 20 02 F6 | 	mov	local02, result2
0fae0     FF 22 02 F6 | 	mov	local03, result3
0fae4     55 00 00 FF 
0fae8     FC E5 05 F1 | 	add	objptr, ##44028
0faec     F2 1E 62 FC | 	wrlong	local01, objptr
0faf0     55 00 00 FF 
0faf4     FC E5 85 F1 | 	sub	objptr, ##44028
0faf8     A7 F0 03 F6 | 	mov	ptra, fp
0fafc     B2 00 A0 FD | 	call	#popregs_
0fb00                 | _do_color_ret
0fb00     2D 00 64 FD | 	ret
0fb04                 | 
0fb04                 | ' 
0fb04                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0fb04                 | ' 
0fb04                 | ' sub do_plot
0fb04                 | _do_plot
0fb04     08 4A 05 F6 | 	mov	COUNT_, #8
0fb08     A8 00 A0 FD | 	call	#pushregs_
0fb0c     9C 8E BF FD | 	call	#_pop
0fb10     FD 1E 02 F6 | 	mov	local01, result1
0fb14     FE 14 02 F6 | 	mov	arg02, result2
0fb18     FF 16 02 F6 | 	mov	arg03, result3
0fb1c     0A 21 02 F6 | 	mov	local02, arg02
0fb20     0B 23 02 F6 | 	mov	local03, arg03
0fb24     84 8E BF FD | 	call	#_pop
0fb28     FD 24 02 F6 | 	mov	local04, result1
0fb2c     FE 26 02 F6 | 	mov	local05, result2
0fb30     FF 28 02 F6 | 	mov	local06, result3
0fb34     12 2B 02 F6 | 	mov	local07, local04
0fb38     0F 2D 02 F6 | 	mov	local08, local01
0fb3c                 | ' t2=pop() 					 
0fb3c                 | ' t1=pop()
0fb3c                 | ' 
0fb3c                 | ' x=t1.result.iresult
0fb3c                 | ' y=t2.result.iresult	
0fb3c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0fb3c     1C 28 0E F2 | 	cmp	local06, #28 wz
0fb40     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0fb44     44 00 90 5D |  if_ne	jmp	#LR__1300
0fb48     1C 22 0E F2 | 	cmp	local03, #28 wz
0fb4c     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0fb50     38 00 90 5D |  if_ne	jmp	#LR__1300
0fb54     56 00 00 FF 
0fb58     00 E4 05 F1 | 	add	objptr, ##44032
0fb5c     F2 2A 62 FC | 	wrlong	local07, objptr
0fb60     04 E4 05 F1 | 	add	objptr, #4
0fb64     F2 2C 62 FC | 	wrlong	local08, objptr
0fb68     04 E4 85 F1 | 	sub	objptr, #4
0fb6c     F2 12 02 FB | 	rdlong	arg01, objptr
0fb70     04 E4 85 F1 | 	sub	objptr, #4
0fb74     F2 16 02 FB | 	rdlong	arg03, objptr
0fb78     55 00 00 FF 
0fb7c     FC E5 85 F1 | 	sub	objptr, ##44028
0fb80     16 15 02 F6 | 	mov	arg02, local08
0fb84     84 40 B0 FD | 	call	#_hg010b_spin2_putpixel
0fb88     A4 00 90 FD | 	jmp	#LR__1305
0fb8c                 | LR__1300
0fb8c                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0fb8c     1E 28 0E F2 | 	cmp	local06, #30 wz
0fb90     10 00 90 5D |  if_ne	jmp	#LR__1301
0fb94     12 13 02 F6 | 	mov	arg01, local04
0fb98     01 14 06 F6 | 	mov	arg02, #1
0fb9c     A0 8E B0 FD | 	call	#__system___float_tointeger
0fba0     FD 2A 02 F6 | 	mov	local07, result1
0fba4                 | LR__1301
0fba4                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0fba4     1E 22 0E F2 | 	cmp	local03, #30 wz
0fba8     10 00 90 5D |  if_ne	jmp	#LR__1302
0fbac     0F 13 02 F6 | 	mov	arg01, local01
0fbb0     01 14 06 F6 | 	mov	arg02, #1
0fbb4     88 8E B0 FD | 	call	#__system___float_tointeger
0fbb8     FD 2C 02 F6 | 	mov	local08, result1
0fbbc                 | LR__1302
0fbbc                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0fbbc     1F 28 0E F2 | 	cmp	local06, #31 wz
0fbc0     18 00 90 5D |  if_ne	jmp	#LR__1303
0fbc4     12 13 02 F6 | 	mov	arg01, local04
0fbc8     94 91 B0 FD | 	call	#__system____builtin_atof
0fbcc     FD 12 02 F6 | 	mov	arg01, result1
0fbd0     00 14 06 F6 | 	mov	arg02, #0
0fbd4     68 8E B0 FD | 	call	#__system___float_tointeger
0fbd8     FD 2A 02 F6 | 	mov	local07, result1
0fbdc                 | LR__1303
0fbdc                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0fbdc     1F 22 0E F2 | 	cmp	local03, #31 wz
0fbe0     18 00 90 5D |  if_ne	jmp	#LR__1304
0fbe4     0F 13 02 F6 | 	mov	arg01, local01
0fbe8     74 91 B0 FD | 	call	#__system____builtin_atof
0fbec     FD 12 02 F6 | 	mov	arg01, result1
0fbf0     00 14 06 F6 | 	mov	arg02, #0
0fbf4     48 8E B0 FD | 	call	#__system___float_tointeger
0fbf8     FD 2C 02 F6 | 	mov	local08, result1
0fbfc                 | LR__1304
0fbfc     56 00 00 FF 
0fc00     00 E4 05 F1 | 	add	objptr, ##44032
0fc04     F2 2A 62 FC | 	wrlong	local07, objptr
0fc08     04 E4 05 F1 | 	add	objptr, #4
0fc0c     F2 2C 62 FC | 	wrlong	local08, objptr
0fc10     04 E4 85 F1 | 	sub	objptr, #4
0fc14     F2 12 02 FB | 	rdlong	arg01, objptr
0fc18     04 E4 85 F1 | 	sub	objptr, #4
0fc1c     F2 16 02 FB | 	rdlong	arg03, objptr
0fc20     55 00 00 FF 
0fc24     FC E5 85 F1 | 	sub	objptr, ##44028
0fc28     16 15 02 F6 | 	mov	arg02, local08
0fc2c     DC 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0fc30                 | LR__1305
0fc30     A7 F0 03 F6 | 	mov	ptra, fp
0fc34     B2 00 A0 FD | 	call	#popregs_
0fc38                 | _do_plot_ret
0fc38     2D 00 64 FD | 	ret
0fc3c                 | 
0fc3c                 | ' 
0fc3c                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0fc3c                 | ' 
0fc3c                 | ' sub do_draw
0fc3c                 | _do_draw
0fc3c     08 4A 05 F6 | 	mov	COUNT_, #8
0fc40     A8 00 A0 FD | 	call	#pushregs_
0fc44     64 8D BF FD | 	call	#_pop
0fc48     FD 1E 02 F6 | 	mov	local01, result1
0fc4c     FE 18 02 F6 | 	mov	arg04, result2
0fc50     FF 16 02 F6 | 	mov	arg03, result3
0fc54     0C 21 02 F6 | 	mov	local02, arg04
0fc58     0B 23 02 F6 | 	mov	local03, arg03
0fc5c     4C 8D BF FD | 	call	#_pop
0fc60     FD 24 02 F6 | 	mov	local04, result1
0fc64     FE 26 02 F6 | 	mov	local05, result2
0fc68     FF 28 02 F6 | 	mov	local06, result3
0fc6c     12 2B 02 F6 | 	mov	local07, local04
0fc70     0F 2D 02 F6 | 	mov	local08, local01
0fc74                 | ' 
0fc74                 | ' t2=pop()
0fc74                 | ' t1=pop()
0fc74                 | ' x=t1.result.iresult
0fc74                 | ' y=t2.result.iresult
0fc74                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0fc74     1C 28 0E F2 | 	cmp	local06, #28 wz
0fc78     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0fc7c     5C 00 90 5D |  if_ne	jmp	#LR__1310
0fc80     1C 22 0E F2 | 	cmp	local03, #28 wz
0fc84     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0fc88     50 00 90 5D |  if_ne	jmp	#LR__1310
0fc8c     56 00 00 FF 
0fc90     00 E4 05 F1 | 	add	objptr, ##44032
0fc94     F2 12 02 FB | 	rdlong	arg01, objptr
0fc98     04 E4 05 F1 | 	add	objptr, #4
0fc9c     F2 14 02 FB | 	rdlong	arg02, objptr
0fca0     08 E4 85 F1 | 	sub	objptr, #8
0fca4     F2 1A 02 FB | 	rdlong	arg05, objptr
0fca8     55 00 00 FF 
0fcac     FC E5 85 F1 | 	sub	objptr, ##44028
0fcb0     15 17 02 F6 | 	mov	arg03, local07
0fcb4     16 19 02 F6 | 	mov	arg04, local08
0fcb8     00 42 B0 FD | 	call	#_hg010b_spin2_draw
0fcbc     56 00 00 FF 
0fcc0     00 E4 05 F1 | 	add	objptr, ##44032
0fcc4     F2 2A 62 FC | 	wrlong	local07, objptr
0fcc8     04 E4 05 F1 | 	add	objptr, #4
0fccc     F2 2C 62 FC | 	wrlong	local08, objptr
0fcd0     56 00 00 FF 
0fcd4     04 E4 85 F1 | 	sub	objptr, ##44036
0fcd8     BC 00 90 FD | 	jmp	#LR__1315
0fcdc                 | LR__1310
0fcdc                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0fcdc     1E 28 0E F2 | 	cmp	local06, #30 wz
0fce0     10 00 90 5D |  if_ne	jmp	#LR__1311
0fce4     12 13 02 F6 | 	mov	arg01, local04
0fce8     01 14 06 F6 | 	mov	arg02, #1
0fcec     50 8D B0 FD | 	call	#__system___float_tointeger
0fcf0     FD 2A 02 F6 | 	mov	local07, result1
0fcf4                 | LR__1311
0fcf4                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0fcf4     1E 22 0E F2 | 	cmp	local03, #30 wz
0fcf8     10 00 90 5D |  if_ne	jmp	#LR__1312
0fcfc     0F 13 02 F6 | 	mov	arg01, local01
0fd00     01 14 06 F6 | 	mov	arg02, #1
0fd04     38 8D B0 FD | 	call	#__system___float_tointeger
0fd08     FD 2C 02 F6 | 	mov	local08, result1
0fd0c                 | LR__1312
0fd0c                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0fd0c     1F 28 0E F2 | 	cmp	local06, #31 wz
0fd10     18 00 90 5D |  if_ne	jmp	#LR__1313
0fd14     12 13 02 F6 | 	mov	arg01, local04
0fd18     44 90 B0 FD | 	call	#__system____builtin_atof
0fd1c     FD 12 02 F6 | 	mov	arg01, result1
0fd20     00 14 06 F6 | 	mov	arg02, #0
0fd24     18 8D B0 FD | 	call	#__system___float_tointeger
0fd28     FD 2A 02 F6 | 	mov	local07, result1
0fd2c                 | LR__1313
0fd2c                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0fd2c     1F 22 0E F2 | 	cmp	local03, #31 wz
0fd30     18 00 90 5D |  if_ne	jmp	#LR__1314
0fd34     0F 13 02 F6 | 	mov	arg01, local01
0fd38     24 90 B0 FD | 	call	#__system____builtin_atof
0fd3c     FD 12 02 F6 | 	mov	arg01, result1
0fd40     00 14 06 F6 | 	mov	arg02, #0
0fd44     F8 8C B0 FD | 	call	#__system___float_tointeger
0fd48     FD 2C 02 F6 | 	mov	local08, result1
0fd4c                 | LR__1314
0fd4c     56 00 00 FF 
0fd50     00 E4 05 F1 | 	add	objptr, ##44032
0fd54     F2 12 02 FB | 	rdlong	arg01, objptr
0fd58     04 E4 05 F1 | 	add	objptr, #4
0fd5c     F2 14 02 FB | 	rdlong	arg02, objptr
0fd60     08 E4 85 F1 | 	sub	objptr, #8
0fd64     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd68     55 00 00 FF 
0fd6c     FC E5 85 F1 | 	sub	objptr, ##44028
0fd70     15 17 02 F6 | 	mov	arg03, local07
0fd74     16 19 02 F6 | 	mov	arg04, local08
0fd78     40 41 B0 FD | 	call	#_hg010b_spin2_draw
0fd7c     56 00 00 FF 
0fd80     00 E4 05 F1 | 	add	objptr, ##44032
0fd84     F2 2A 62 FC | 	wrlong	local07, objptr
0fd88     04 E4 05 F1 | 	add	objptr, #4
0fd8c     F2 2C 62 FC | 	wrlong	local08, objptr
0fd90     56 00 00 FF 
0fd94     04 E4 85 F1 | 	sub	objptr, ##44036
0fd98                 | LR__1315
0fd98     A7 F0 03 F6 | 	mov	ptra, fp
0fd9c     B2 00 A0 FD | 	call	#popregs_
0fda0                 | _do_draw_ret
0fda0     2D 00 64 FD | 	ret
0fda4                 | 
0fda4                 | ' 
0fda4                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0fda4                 | ' 
0fda4                 | ' sub do_fcircle
0fda4                 | _do_fcircle
0fda4     02 4A 05 F6 | 	mov	COUNT_, #2
0fda8     A8 00 A0 FD | 	call	#pushregs_
0fdac     24 F0 07 F1 | 	add	ptra, #36
0fdb0     F8 8B BF FD | 	call	#_pop
0fdb4     FD 18 02 F6 | 	mov	arg04, result1
0fdb8     FE 16 02 F6 | 	mov	arg03, result2
0fdbc     FF 14 02 F6 | 	mov	arg02, result3
0fdc0     18 4E 05 F1 | 	add	fp, #24
0fdc4     A7 18 62 FC | 	wrlong	arg04, fp
0fdc8     04 4E 05 F1 | 	add	fp, #4
0fdcc     A7 16 62 FC | 	wrlong	arg03, fp
0fdd0     04 4E 05 F1 | 	add	fp, #4
0fdd4     A7 14 62 FC | 	wrlong	arg02, fp
0fdd8     20 4E 85 F1 | 	sub	fp, #32
0fddc     CC 8B BF FD | 	call	#_pop
0fde0     FD 18 02 F6 | 	mov	arg04, result1
0fde4     FE 16 02 F6 | 	mov	arg03, result2
0fde8     FF 1E 02 F6 | 	mov	local01, result3
0fdec     0C 4E 05 F1 | 	add	fp, #12
0fdf0     A7 18 62 FC | 	wrlong	arg04, fp
0fdf4     04 4E 05 F1 | 	add	fp, #4
0fdf8     A7 16 62 FC | 	wrlong	arg03, fp
0fdfc     04 4E 05 F1 | 	add	fp, #4
0fe00     A7 1E 62 FC | 	wrlong	local01, fp
0fe04     14 4E 85 F1 | 	sub	fp, #20
0fe08     A0 8B BF FD | 	call	#_pop
0fe0c     A7 FA 61 FC | 	wrlong	result1, fp
0fe10     04 4E 05 F1 | 	add	fp, #4
0fe14     A7 FC 61 FC | 	wrlong	result2, fp
0fe18     04 4E 05 F1 | 	add	fp, #4
0fe1c     A7 FE 61 FC | 	wrlong	result3, fp
0fe20                 | ' 
0fe20                 | ' t3=pop()
0fe20                 | ' t2=pop()
0fe20                 | ' t1=pop()
0fe20                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0fe20     FF 18 02 F6 | 	mov	arg04, result3
0fe24     08 4E 85 F1 | 	sub	fp, #8
0fe28     1C 18 0E F2 | 	cmp	arg04, #28 wz
0fe2c     08 4E 05 51 |  if_ne	add	fp, #8
0fe30     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fe34     08 4E 85 51 |  if_ne	sub	fp, #8
0fe38     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fe3c     7C 00 90 5D |  if_ne	jmp	#LR__1320
0fe40     14 4E 05 F1 | 	add	fp, #20
0fe44     A7 1E 02 FB | 	rdlong	local01, fp
0fe48     14 4E 85 F1 | 	sub	fp, #20
0fe4c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe50     14 4E 05 51 |  if_ne	add	fp, #20
0fe54     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fe58     14 4E 85 51 |  if_ne	sub	fp, #20
0fe5c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fe60     58 00 90 5D |  if_ne	jmp	#LR__1320
0fe64     20 4E 05 F1 | 	add	fp, #32
0fe68     A7 1E 02 FB | 	rdlong	local01, fp
0fe6c     20 4E 85 F1 | 	sub	fp, #32
0fe70     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe74     20 4E 05 51 |  if_ne	add	fp, #32
0fe78     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fe7c     20 4E 85 51 |  if_ne	sub	fp, #32
0fe80     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fe84     34 00 90 5D |  if_ne	jmp	#LR__1320
0fe88     A7 12 02 FB | 	rdlong	arg01, fp
0fe8c     0C 4E 05 F1 | 	add	fp, #12
0fe90     A7 14 02 FB | 	rdlong	arg02, fp
0fe94     0C 4E 05 F1 | 	add	fp, #12
0fe98     A7 16 02 FB | 	rdlong	arg03, fp
0fe9c     18 4E 85 F1 | 	sub	fp, #24
0fea0     55 00 00 FF 
0fea4     FC E5 05 F1 | 	add	objptr, ##44028
0fea8     F2 18 02 FB | 	rdlong	arg04, objptr
0feac     55 00 00 FF 
0feb0     FC E5 85 F1 | 	sub	objptr, ##44028
0feb4     94 44 B0 FD | 	call	#_hg010b_spin2_fcircle
0feb8                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0feb8     54 00 90 FD | 	jmp	#LR__1321
0febc                 | LR__1320
0febc     A7 12 02 F6 | 	mov	arg01, fp
0fec0     9C EC BF FD | 	call	#_converttoint
0fec4     FD 1E 02 F6 | 	mov	local01, result1
0fec8     0C 4E 05 F1 | 	add	fp, #12
0fecc     A7 12 02 F6 | 	mov	arg01, fp
0fed0     0C 4E 85 F1 | 	sub	fp, #12
0fed4     88 EC BF FD | 	call	#_converttoint
0fed8     FD 20 02 F6 | 	mov	local02, result1
0fedc     18 4E 05 F1 | 	add	fp, #24
0fee0     A7 12 02 F6 | 	mov	arg01, fp
0fee4     18 4E 85 F1 | 	sub	fp, #24
0fee8     74 EC BF FD | 	call	#_converttoint
0feec     FD 16 02 F6 | 	mov	arg03, result1
0fef0     55 00 00 FF 
0fef4     FC E5 05 F1 | 	add	objptr, ##44028
0fef8     F2 18 02 FB | 	rdlong	arg04, objptr
0fefc     55 00 00 FF 
0ff00     FC E5 85 F1 | 	sub	objptr, ##44028
0ff04     0F 13 02 F6 | 	mov	arg01, local01
0ff08     10 15 02 F6 | 	mov	arg02, local02
0ff0c     3C 44 B0 FD | 	call	#_hg010b_spin2_fcircle
0ff10                 | LR__1321
0ff10     A7 F0 03 F6 | 	mov	ptra, fp
0ff14     B2 00 A0 FD | 	call	#popregs_
0ff18                 | _do_fcircle_ret
0ff18     2D 00 64 FD | 	ret
0ff1c                 | 
0ff1c                 | ' 
0ff1c                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0ff1c                 | ' 
0ff1c                 | ' sub do_circle
0ff1c                 | _do_circle
0ff1c     02 4A 05 F6 | 	mov	COUNT_, #2
0ff20     A8 00 A0 FD | 	call	#pushregs_
0ff24     24 F0 07 F1 | 	add	ptra, #36
0ff28     80 8A BF FD | 	call	#_pop
0ff2c     FD 18 02 F6 | 	mov	arg04, result1
0ff30     FE 16 02 F6 | 	mov	arg03, result2
0ff34     FF 14 02 F6 | 	mov	arg02, result3
0ff38     18 4E 05 F1 | 	add	fp, #24
0ff3c     A7 18 62 FC | 	wrlong	arg04, fp
0ff40     04 4E 05 F1 | 	add	fp, #4
0ff44     A7 16 62 FC | 	wrlong	arg03, fp
0ff48     04 4E 05 F1 | 	add	fp, #4
0ff4c     A7 14 62 FC | 	wrlong	arg02, fp
0ff50     20 4E 85 F1 | 	sub	fp, #32
0ff54     54 8A BF FD | 	call	#_pop
0ff58     FD 18 02 F6 | 	mov	arg04, result1
0ff5c     FE 16 02 F6 | 	mov	arg03, result2
0ff60     FF 1E 02 F6 | 	mov	local01, result3
0ff64     0C 4E 05 F1 | 	add	fp, #12
0ff68     A7 18 62 FC | 	wrlong	arg04, fp
0ff6c     04 4E 05 F1 | 	add	fp, #4
0ff70     A7 16 62 FC | 	wrlong	arg03, fp
0ff74     04 4E 05 F1 | 	add	fp, #4
0ff78     A7 1E 62 FC | 	wrlong	local01, fp
0ff7c     14 4E 85 F1 | 	sub	fp, #20
0ff80     28 8A BF FD | 	call	#_pop
0ff84     A7 FA 61 FC | 	wrlong	result1, fp
0ff88     04 4E 05 F1 | 	add	fp, #4
0ff8c     A7 FC 61 FC | 	wrlong	result2, fp
0ff90     04 4E 05 F1 | 	add	fp, #4
0ff94     A7 FE 61 FC | 	wrlong	result3, fp
0ff98                 | ' 
0ff98                 | ' t3=pop()
0ff98                 | ' t2=pop()
0ff98                 | ' t1=pop()
0ff98                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0ff98     FF 18 02 F6 | 	mov	arg04, result3
0ff9c     08 4E 85 F1 | 	sub	fp, #8
0ffa0     1C 18 0E F2 | 	cmp	arg04, #28 wz
0ffa4     08 4E 05 51 |  if_ne	add	fp, #8
0ffa8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ffac     08 4E 85 51 |  if_ne	sub	fp, #8
0ffb0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0ffb4     7C 00 90 5D |  if_ne	jmp	#LR__1330
0ffb8     14 4E 05 F1 | 	add	fp, #20
0ffbc     A7 1E 02 FB | 	rdlong	local01, fp
0ffc0     14 4E 85 F1 | 	sub	fp, #20
0ffc4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ffc8     14 4E 05 51 |  if_ne	add	fp, #20
0ffcc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0ffd0     14 4E 85 51 |  if_ne	sub	fp, #20
0ffd4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0ffd8     58 00 90 5D |  if_ne	jmp	#LR__1330
0ffdc     20 4E 05 F1 | 	add	fp, #32
0ffe0     A7 1E 02 FB | 	rdlong	local01, fp
0ffe4     20 4E 85 F1 | 	sub	fp, #32
0ffe8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ffec     20 4E 05 51 |  if_ne	add	fp, #32
0fff0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fff4     20 4E 85 51 |  if_ne	sub	fp, #32
0fff8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fffc     34 00 90 5D |  if_ne	jmp	#LR__1330
10000     A7 12 02 FB | 	rdlong	arg01, fp
10004     0C 4E 05 F1 | 	add	fp, #12
10008     A7 14 02 FB | 	rdlong	arg02, fp
1000c     0C 4E 05 F1 | 	add	fp, #12
10010     A7 16 02 FB | 	rdlong	arg03, fp
10014     18 4E 85 F1 | 	sub	fp, #24
10018     55 00 00 FF 
1001c     FC E5 05 F1 | 	add	objptr, ##44028
10020     F2 18 02 FB | 	rdlong	arg04, objptr
10024     55 00 00 FF 
10028     FC E5 85 F1 | 	sub	objptr, ##44028
1002c     28 44 B0 FD | 	call	#_hg010b_spin2_circle
10030                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
10030     54 00 90 FD | 	jmp	#LR__1331
10034                 | LR__1330
10034     A7 12 02 F6 | 	mov	arg01, fp
10038     24 EB BF FD | 	call	#_converttoint
1003c     FD 1E 02 F6 | 	mov	local01, result1
10040     0C 4E 05 F1 | 	add	fp, #12
10044     A7 12 02 F6 | 	mov	arg01, fp
10048     0C 4E 85 F1 | 	sub	fp, #12
1004c     10 EB BF FD | 	call	#_converttoint
10050     FD 20 02 F6 | 	mov	local02, result1
10054     18 4E 05 F1 | 	add	fp, #24
10058     A7 12 02 F6 | 	mov	arg01, fp
1005c     18 4E 85 F1 | 	sub	fp, #24
10060     FC EA BF FD | 	call	#_converttoint
10064     FD 16 02 F6 | 	mov	arg03, result1
10068     55 00 00 FF 
1006c     FC E5 05 F1 | 	add	objptr, ##44028
10070     F2 18 02 FB | 	rdlong	arg04, objptr
10074     55 00 00 FF 
10078     FC E5 85 F1 | 	sub	objptr, ##44028
1007c     0F 13 02 F6 | 	mov	arg01, local01
10080     10 15 02 F6 | 	mov	arg02, local02
10084     D0 43 B0 FD | 	call	#_hg010b_spin2_circle
10088                 | LR__1331
10088     A7 F0 03 F6 | 	mov	ptra, fp
1008c     B2 00 A0 FD | 	call	#popregs_
10090                 | _do_circle_ret
10090     2D 00 64 FD | 	ret
10094                 | 
10094                 | ' 
10094                 | ' ' -------------------------- Draw a rectangle
10094                 | ' 
10094                 | ' sub do_box
10094                 | _do_box
10094     03 4A 05 F6 | 	mov	COUNT_, #3
10098     A8 00 A0 FD | 	call	#pushregs_
1009c     30 F0 07 F1 | 	add	ptra, #48
100a0     08 89 BF FD | 	call	#_pop
100a4     FD 1A 02 F6 | 	mov	arg05, result1
100a8     FE 18 02 F6 | 	mov	arg04, result2
100ac     FF 16 02 F6 | 	mov	arg03, result3
100b0     24 4E 05 F1 | 	add	fp, #36
100b4     A7 1A 62 FC | 	wrlong	arg05, fp
100b8     04 4E 05 F1 | 	add	fp, #4
100bc     A7 18 62 FC | 	wrlong	arg04, fp
100c0     04 4E 05 F1 | 	add	fp, #4
100c4     A7 16 62 FC | 	wrlong	arg03, fp
100c8     2C 4E 85 F1 | 	sub	fp, #44
100cc     DC 88 BF FD | 	call	#_pop
100d0     FD 1A 02 F6 | 	mov	arg05, result1
100d4     FE 18 02 F6 | 	mov	arg04, result2
100d8     FF 16 02 F6 | 	mov	arg03, result3
100dc     18 4E 05 F1 | 	add	fp, #24
100e0     A7 1A 62 FC | 	wrlong	arg05, fp
100e4     04 4E 05 F1 | 	add	fp, #4
100e8     A7 18 62 FC | 	wrlong	arg04, fp
100ec     04 4E 05 F1 | 	add	fp, #4
100f0     A7 16 62 FC | 	wrlong	arg03, fp
100f4     20 4E 85 F1 | 	sub	fp, #32
100f8     B0 88 BF FD | 	call	#_pop
100fc     FD 1A 02 F6 | 	mov	arg05, result1
10100     FE 18 02 F6 | 	mov	arg04, result2
10104     FF 1E 02 F6 | 	mov	local01, result3
10108     0C 4E 05 F1 | 	add	fp, #12
1010c     A7 1A 62 FC | 	wrlong	arg05, fp
10110     04 4E 05 F1 | 	add	fp, #4
10114     A7 18 62 FC | 	wrlong	arg04, fp
10118     04 4E 05 F1 | 	add	fp, #4
1011c     A7 1E 62 FC | 	wrlong	local01, fp
10120     14 4E 85 F1 | 	sub	fp, #20
10124     84 88 BF FD | 	call	#_pop
10128     A7 FA 61 FC | 	wrlong	result1, fp
1012c     04 4E 05 F1 | 	add	fp, #4
10130     A7 FC 61 FC | 	wrlong	result2, fp
10134     04 4E 05 F1 | 	add	fp, #4
10138     A7 FE 61 FC | 	wrlong	result3, fp
1013c                 | ' 
1013c                 | ' t4=pop()
1013c                 | ' t3=pop()
1013c                 | ' t2=pop()
1013c                 | ' t1=pop()
1013c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
1013c     FF 1A 02 F6 | 	mov	arg05, result3
10140     08 4E 85 F1 | 	sub	fp, #8
10144     1C 1A 0E F2 | 	cmp	arg05, #28 wz
10148     08 4E 05 51 |  if_ne	add	fp, #8
1014c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10150     08 4E 85 51 |  if_ne	sub	fp, #8
10154     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10158     A8 00 90 5D |  if_ne	jmp	#LR__1340
1015c     14 4E 05 F1 | 	add	fp, #20
10160     A7 1E 02 FB | 	rdlong	local01, fp
10164     14 4E 85 F1 | 	sub	fp, #20
10168     1C 1E 0E F2 | 	cmp	local01, #28 wz
1016c     14 4E 05 51 |  if_ne	add	fp, #20
10170     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
10174     14 4E 85 51 |  if_ne	sub	fp, #20
10178     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1017c     84 00 90 5D |  if_ne	jmp	#LR__1340
10180     20 4E 05 F1 | 	add	fp, #32
10184     A7 1E 02 FB | 	rdlong	local01, fp
10188     20 4E 85 F1 | 	sub	fp, #32
1018c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10190     20 4E 05 51 |  if_ne	add	fp, #32
10194     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
10198     20 4E 85 51 |  if_ne	sub	fp, #32
1019c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
101a0     60 00 90 5D |  if_ne	jmp	#LR__1340
101a4     2C 4E 05 F1 | 	add	fp, #44
101a8     A7 1E 02 FB | 	rdlong	local01, fp
101ac     2C 4E 85 F1 | 	sub	fp, #44
101b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
101b4     2C 4E 05 51 |  if_ne	add	fp, #44
101b8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
101bc     2C 4E 85 51 |  if_ne	sub	fp, #44
101c0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
101c4     3C 00 90 5D |  if_ne	jmp	#LR__1340
101c8     A7 12 02 FB | 	rdlong	arg01, fp
101cc     0C 4E 05 F1 | 	add	fp, #12
101d0     A7 14 02 FB | 	rdlong	arg02, fp
101d4     0C 4E 05 F1 | 	add	fp, #12
101d8     A7 16 02 FB | 	rdlong	arg03, fp
101dc     0C 4E 05 F1 | 	add	fp, #12
101e0     A7 18 02 FB | 	rdlong	arg04, fp
101e4     24 4E 85 F1 | 	sub	fp, #36
101e8     55 00 00 FF 
101ec     FC E5 05 F1 | 	add	objptr, ##44028
101f0     F2 1A 02 FB | 	rdlong	arg05, objptr
101f4     55 00 00 FF 
101f8     FC E5 85 F1 | 	sub	objptr, ##44028
101fc     24 44 B0 FD | 	call	#_hg010b_spin2_box
10200                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
10200     6C 00 90 FD | 	jmp	#LR__1341
10204                 | LR__1340
10204     A7 12 02 F6 | 	mov	arg01, fp
10208     54 E9 BF FD | 	call	#_converttoint
1020c     FD 20 02 F6 | 	mov	local02, result1
10210     0C 4E 05 F1 | 	add	fp, #12
10214     A7 12 02 F6 | 	mov	arg01, fp
10218     0C 4E 85 F1 | 	sub	fp, #12
1021c     40 E9 BF FD | 	call	#_converttoint
10220     FD 22 02 F6 | 	mov	local03, result1
10224     18 4E 05 F1 | 	add	fp, #24
10228     A7 12 02 F6 | 	mov	arg01, fp
1022c     18 4E 85 F1 | 	sub	fp, #24
10230     2C E9 BF FD | 	call	#_converttoint
10234     FD 1E 02 F6 | 	mov	local01, result1
10238     24 4E 05 F1 | 	add	fp, #36
1023c     A7 12 02 F6 | 	mov	arg01, fp
10240     24 4E 85 F1 | 	sub	fp, #36
10244     18 E9 BF FD | 	call	#_converttoint
10248     FD 18 02 F6 | 	mov	arg04, result1
1024c     55 00 00 FF 
10250     FC E5 05 F1 | 	add	objptr, ##44028
10254     F2 1A 02 FB | 	rdlong	arg05, objptr
10258     55 00 00 FF 
1025c     FC E5 85 F1 | 	sub	objptr, ##44028
10260     10 13 02 F6 | 	mov	arg01, local02
10264     11 15 02 F6 | 	mov	arg02, local03
10268     0F 17 02 F6 | 	mov	arg03, local01
1026c     B4 43 B0 FD | 	call	#_hg010b_spin2_box
10270                 | LR__1341
10270     A7 F0 03 F6 | 	mov	ptra, fp
10274     B2 00 A0 FD | 	call	#popregs_
10278                 | _do_box_ret
10278     2D 00 64 FD | 	ret
1027c                 | 
1027c                 | ' 
1027c                 | ' sub do_fill
1027c                 | _do_fill
1027c     03 4A 05 F6 | 	mov	COUNT_, #3
10280     A8 00 A0 FD | 	call	#pushregs_
10284     30 F0 07 F1 | 	add	ptra, #48
10288     20 87 BF FD | 	call	#_pop
1028c     FD 18 02 F6 | 	mov	arg04, result1
10290     FE 16 02 F6 | 	mov	arg03, result2
10294     FF 14 02 F6 | 	mov	arg02, result3
10298     24 4E 05 F1 | 	add	fp, #36
1029c     A7 18 62 FC | 	wrlong	arg04, fp
102a0     04 4E 05 F1 | 	add	fp, #4
102a4     A7 16 62 FC | 	wrlong	arg03, fp
102a8     04 4E 05 F1 | 	add	fp, #4
102ac     A7 14 62 FC | 	wrlong	arg02, fp
102b0     2C 4E 85 F1 | 	sub	fp, #44
102b4     F4 86 BF FD | 	call	#_pop
102b8     FD 18 02 F6 | 	mov	arg04, result1
102bc     FE 16 02 F6 | 	mov	arg03, result2
102c0     FF 14 02 F6 | 	mov	arg02, result3
102c4     18 4E 05 F1 | 	add	fp, #24
102c8     A7 18 62 FC | 	wrlong	arg04, fp
102cc     04 4E 05 F1 | 	add	fp, #4
102d0     A7 16 62 FC | 	wrlong	arg03, fp
102d4     04 4E 05 F1 | 	add	fp, #4
102d8     A7 14 62 FC | 	wrlong	arg02, fp
102dc     20 4E 85 F1 | 	sub	fp, #32
102e0     C8 86 BF FD | 	call	#_pop
102e4     FD 18 02 F6 | 	mov	arg04, result1
102e8     FE 16 02 F6 | 	mov	arg03, result2
102ec     FF 1E 02 F6 | 	mov	local01, result3
102f0     0C 4E 05 F1 | 	add	fp, #12
102f4     A7 18 62 FC | 	wrlong	arg04, fp
102f8     04 4E 05 F1 | 	add	fp, #4
102fc     A7 16 62 FC | 	wrlong	arg03, fp
10300     04 4E 05 F1 | 	add	fp, #4
10304     A7 1E 62 FC | 	wrlong	local01, fp
10308     14 4E 85 F1 | 	sub	fp, #20
1030c     9C 86 BF FD | 	call	#_pop
10310     A7 FA 61 FC | 	wrlong	result1, fp
10314     04 4E 05 F1 | 	add	fp, #4
10318     A7 FC 61 FC | 	wrlong	result2, fp
1031c     04 4E 05 F1 | 	add	fp, #4
10320     A7 FE 61 FC | 	wrlong	result3, fp
10324                 | ' 
10324                 | ' t4=pop()
10324                 | ' t3=pop()
10324                 | ' t2=pop()
10324                 | ' t1=pop()
10324                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
10324     FF 18 02 F6 | 	mov	arg04, result3
10328     08 4E 85 F1 | 	sub	fp, #8
1032c     1C 18 0E F2 | 	cmp	arg04, #28 wz
10330     08 4E 05 51 |  if_ne	add	fp, #8
10334     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10338     08 4E 85 51 |  if_ne	sub	fp, #8
1033c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10340     94 00 90 5D |  if_ne	jmp	#LR__1350
10344     14 4E 05 F1 | 	add	fp, #20
10348     A7 1E 02 FB | 	rdlong	local01, fp
1034c     14 4E 85 F1 | 	sub	fp, #20
10350     1C 1E 0E F2 | 	cmp	local01, #28 wz
10354     14 4E 05 51 |  if_ne	add	fp, #20
10358     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1035c     14 4E 85 51 |  if_ne	sub	fp, #20
10360     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
10364     70 00 90 5D |  if_ne	jmp	#LR__1350
10368     20 4E 05 F1 | 	add	fp, #32
1036c     A7 1E 02 FB | 	rdlong	local01, fp
10370     20 4E 85 F1 | 	sub	fp, #32
10374     1C 1E 0E F2 | 	cmp	local01, #28 wz
10378     20 4E 05 51 |  if_ne	add	fp, #32
1037c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
10380     20 4E 85 51 |  if_ne	sub	fp, #32
10384     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
10388     4C 00 90 5D |  if_ne	jmp	#LR__1350
1038c     2C 4E 05 F1 | 	add	fp, #44
10390     A7 1E 02 FB | 	rdlong	local01, fp
10394     2C 4E 85 F1 | 	sub	fp, #44
10398     1C 1E 0E F2 | 	cmp	local01, #28 wz
1039c     2C 4E 05 51 |  if_ne	add	fp, #44
103a0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
103a4     2C 4E 85 51 |  if_ne	sub	fp, #44
103a8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
103ac     28 00 90 5D |  if_ne	jmp	#LR__1350
103b0     A7 12 02 FB | 	rdlong	arg01, fp
103b4     0C 4E 05 F1 | 	add	fp, #12
103b8     A7 14 02 FB | 	rdlong	arg02, fp
103bc     0C 4E 05 F1 | 	add	fp, #12
103c0     A7 16 02 FB | 	rdlong	arg03, fp
103c4     0C 4E 05 F1 | 	add	fp, #12
103c8     A7 18 02 FB | 	rdlong	arg04, fp
103cc     24 4E 85 F1 | 	sub	fp, #36
103d0     D8 3C B0 FD | 	call	#_hg010b_spin2_fill
103d4                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
103d4     58 00 90 FD | 	jmp	#LR__1351
103d8                 | LR__1350
103d8     A7 12 02 F6 | 	mov	arg01, fp
103dc     80 E7 BF FD | 	call	#_converttoint
103e0     FD 20 02 F6 | 	mov	local02, result1
103e4     0C 4E 05 F1 | 	add	fp, #12
103e8     A7 12 02 F6 | 	mov	arg01, fp
103ec     0C 4E 85 F1 | 	sub	fp, #12
103f0     6C E7 BF FD | 	call	#_converttoint
103f4     FD 22 02 F6 | 	mov	local03, result1
103f8     18 4E 05 F1 | 	add	fp, #24
103fc     A7 12 02 F6 | 	mov	arg01, fp
10400     18 4E 85 F1 | 	sub	fp, #24
10404     58 E7 BF FD | 	call	#_converttoint
10408     FD 1E 02 F6 | 	mov	local01, result1
1040c     24 4E 05 F1 | 	add	fp, #36
10410     A7 12 02 F6 | 	mov	arg01, fp
10414     24 4E 85 F1 | 	sub	fp, #36
10418     44 E7 BF FD | 	call	#_converttoint
1041c     FD 18 02 F6 | 	mov	arg04, result1
10420     10 13 02 F6 | 	mov	arg01, local02
10424     11 15 02 F6 | 	mov	arg02, local03
10428     0F 17 02 F6 | 	mov	arg03, local01
1042c     7C 3C B0 FD | 	call	#_hg010b_spin2_fill
10430                 | LR__1351
10430     A7 F0 03 F6 | 	mov	ptra, fp
10434     B2 00 A0 FD | 	call	#popregs_
10438                 | _do_fill_ret
10438     2D 00 64 FD | 	ret
1043c                 | 
1043c                 | ' 
1043c                 | ' ' -------------------------- Draw a frane
1043c                 | ' 
1043c                 | ' sub do_frame
1043c                 | _do_frame
1043c     03 4A 05 F6 | 	mov	COUNT_, #3
10440     A8 00 A0 FD | 	call	#pushregs_
10444     30 F0 07 F1 | 	add	ptra, #48
10448     60 85 BF FD | 	call	#_pop
1044c     FD 1A 02 F6 | 	mov	arg05, result1
10450     FE 18 02 F6 | 	mov	arg04, result2
10454     FF 16 02 F6 | 	mov	arg03, result3
10458     24 4E 05 F1 | 	add	fp, #36
1045c     A7 1A 62 FC | 	wrlong	arg05, fp
10460     04 4E 05 F1 | 	add	fp, #4
10464     A7 18 62 FC | 	wrlong	arg04, fp
10468     04 4E 05 F1 | 	add	fp, #4
1046c     A7 16 62 FC | 	wrlong	arg03, fp
10470     2C 4E 85 F1 | 	sub	fp, #44
10474     34 85 BF FD | 	call	#_pop
10478     FD 1A 02 F6 | 	mov	arg05, result1
1047c     FE 18 02 F6 | 	mov	arg04, result2
10480     FF 16 02 F6 | 	mov	arg03, result3
10484     18 4E 05 F1 | 	add	fp, #24
10488     A7 1A 62 FC | 	wrlong	arg05, fp
1048c     04 4E 05 F1 | 	add	fp, #4
10490     A7 18 62 FC | 	wrlong	arg04, fp
10494     04 4E 05 F1 | 	add	fp, #4
10498     A7 16 62 FC | 	wrlong	arg03, fp
1049c     20 4E 85 F1 | 	sub	fp, #32
104a0     08 85 BF FD | 	call	#_pop
104a4     FD 1A 02 F6 | 	mov	arg05, result1
104a8     FE 18 02 F6 | 	mov	arg04, result2
104ac     FF 1E 02 F6 | 	mov	local01, result3
104b0     0C 4E 05 F1 | 	add	fp, #12
104b4     A7 1A 62 FC | 	wrlong	arg05, fp
104b8     04 4E 05 F1 | 	add	fp, #4
104bc     A7 18 62 FC | 	wrlong	arg04, fp
104c0     04 4E 05 F1 | 	add	fp, #4
104c4     A7 1E 62 FC | 	wrlong	local01, fp
104c8     14 4E 85 F1 | 	sub	fp, #20
104cc     DC 84 BF FD | 	call	#_pop
104d0     A7 FA 61 FC | 	wrlong	result1, fp
104d4     04 4E 05 F1 | 	add	fp, #4
104d8     A7 FC 61 FC | 	wrlong	result2, fp
104dc     04 4E 05 F1 | 	add	fp, #4
104e0     A7 FE 61 FC | 	wrlong	result3, fp
104e4                 | ' 
104e4                 | ' t4=pop()
104e4                 | ' t3=pop()
104e4                 | ' t2=pop()
104e4                 | ' t1=pop()
104e4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
104e4     FF 1A 02 F6 | 	mov	arg05, result3
104e8     08 4E 85 F1 | 	sub	fp, #8
104ec     1C 1A 0E F2 | 	cmp	arg05, #28 wz
104f0     08 4E 05 51 |  if_ne	add	fp, #8
104f4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
104f8     08 4E 85 51 |  if_ne	sub	fp, #8
104fc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10500     A8 00 90 5D |  if_ne	jmp	#LR__1360
10504     14 4E 05 F1 | 	add	fp, #20
10508     A7 1E 02 FB | 	rdlong	local01, fp
1050c     14 4E 85 F1 | 	sub	fp, #20
10510     1C 1E 0E F2 | 	cmp	local01, #28 wz
10514     14 4E 05 51 |  if_ne	add	fp, #20
10518     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1051c     14 4E 85 51 |  if_ne	sub	fp, #20
10520     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
10524     84 00 90 5D |  if_ne	jmp	#LR__1360
10528     20 4E 05 F1 | 	add	fp, #32
1052c     A7 1E 02 FB | 	rdlong	local01, fp
10530     20 4E 85 F1 | 	sub	fp, #32
10534     1C 1E 0E F2 | 	cmp	local01, #28 wz
10538     20 4E 05 51 |  if_ne	add	fp, #32
1053c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
10540     20 4E 85 51 |  if_ne	sub	fp, #32
10544     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
10548     60 00 90 5D |  if_ne	jmp	#LR__1360
1054c     2C 4E 05 F1 | 	add	fp, #44
10550     A7 1E 02 FB | 	rdlong	local01, fp
10554     2C 4E 85 F1 | 	sub	fp, #44
10558     1C 1E 0E F2 | 	cmp	local01, #28 wz
1055c     2C 4E 05 51 |  if_ne	add	fp, #44
10560     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
10564     2C 4E 85 51 |  if_ne	sub	fp, #44
10568     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1056c     3C 00 90 5D |  if_ne	jmp	#LR__1360
10570     A7 12 02 FB | 	rdlong	arg01, fp
10574     0C 4E 05 F1 | 	add	fp, #12
10578     A7 14 02 FB | 	rdlong	arg02, fp
1057c     0C 4E 05 F1 | 	add	fp, #12
10580     A7 16 02 FB | 	rdlong	arg03, fp
10584     0C 4E 05 F1 | 	add	fp, #12
10588     A7 18 02 FB | 	rdlong	arg04, fp
1058c     24 4E 85 F1 | 	sub	fp, #36
10590     55 00 00 FF 
10594     FC E5 05 F1 | 	add	objptr, ##44028
10598     F2 1A 02 FB | 	rdlong	arg05, objptr
1059c     55 00 00 FF 
105a0     FC E5 85 F1 | 	sub	objptr, ##44028
105a4     FC 3F B0 FD | 	call	#_hg010b_spin2_frame
105a8                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
105a8     6C 00 90 FD | 	jmp	#LR__1361
105ac                 | LR__1360
105ac     A7 12 02 F6 | 	mov	arg01, fp
105b0     AC E5 BF FD | 	call	#_converttoint
105b4     FD 20 02 F6 | 	mov	local02, result1
105b8     0C 4E 05 F1 | 	add	fp, #12
105bc     A7 12 02 F6 | 	mov	arg01, fp
105c0     0C 4E 85 F1 | 	sub	fp, #12
105c4     98 E5 BF FD | 	call	#_converttoint
105c8     FD 22 02 F6 | 	mov	local03, result1
105cc     18 4E 05 F1 | 	add	fp, #24
105d0     A7 12 02 F6 | 	mov	arg01, fp
105d4     18 4E 85 F1 | 	sub	fp, #24
105d8     84 E5 BF FD | 	call	#_converttoint
105dc     FD 1E 02 F6 | 	mov	local01, result1
105e0     24 4E 05 F1 | 	add	fp, #36
105e4     A7 12 02 F6 | 	mov	arg01, fp
105e8     24 4E 85 F1 | 	sub	fp, #36
105ec     70 E5 BF FD | 	call	#_converttoint
105f0     FD 18 02 F6 | 	mov	arg04, result1
105f4     55 00 00 FF 
105f8     FC E5 05 F1 | 	add	objptr, ##44028
105fc     F2 1A 02 FB | 	rdlong	arg05, objptr
10600     55 00 00 FF 
10604     FC E5 85 F1 | 	sub	objptr, ##44028
10608     10 13 02 F6 | 	mov	arg01, local02
1060c     11 15 02 F6 | 	mov	arg02, local03
10610     0F 17 02 F6 | 	mov	arg03, local01
10614     8C 3F B0 FD | 	call	#_hg010b_spin2_frame
10618                 | LR__1361
10618     A7 F0 03 F6 | 	mov	ptra, fp
1061c     B2 00 A0 FD | 	call	#popregs_
10620                 | _do_frame_ret
10620     2D 00 64 FD | 	ret
10624                 | 
10624                 | ' 
10624                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
10624                 | ' 
10624                 | ' ' ------------------------- Print to the screem
10624                 | ' 
10624                 | ' sub do_print  
10624                 | _do_print
10624     0A 4A 05 F6 | 	mov	COUNT_, #10
10628     A8 00 A0 FD | 	call	#pushregs_
1062c     00 24 06 F6 | 	mov	local04, #0
10630     78 83 BF FD | 	call	#_pop
10634     FD 26 02 F6 | 	mov	local05, result1
10638     FE 28 02 F6 | 	mov	local06, result2
1063c     FF 2A 02 F6 | 	mov	local07, result3
10640     13 1F 02 F6 | 	mov	local01, local05
10644     14 21 02 F6 | 	mov	local02, local06
10648     15 23 02 F6 | 	mov	local03, local07
1064c                 | '  
1064c                 | ' r=0
1064c                 | ' t1=pop() 
1064c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
1064c     21 22 0E F2 | 	cmp	local03, #33 wz
10650     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
10654     20 00 90 5D |  if_ne	jmp	#LR__1370
10658     11 25 02 F6 | 	mov	local04, local03
1065c     4C 83 BF FD | 	call	#_pop
10660     FD 26 02 F6 | 	mov	local05, result1
10664     FE 28 02 F6 | 	mov	local06, result2
10668     FF 2A 02 F6 | 	mov	local07, result3
1066c     13 1F 02 F6 | 	mov	local01, local05
10670     14 21 02 F6 | 	mov	local02, local06
10674     15 23 02 F6 | 	mov	local03, local07
10678                 | LR__1370
10678                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
10678     20 22 0E F2 | 	cmp	local03, #32 wz
1067c     11 25 02 A6 |  if_e	mov	local04, local03
10680                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
10680     FF 22 0E F2 | 	cmp	local03, #255 wz
10684     0C 00 90 5D |  if_ne	jmp	#LR__1371
10688     0F 13 02 F6 | 	mov	arg01, local01
1068c     70 1F B0 FD | 	call	#_printerror
10690     30 04 90 FD | 	jmp	#LR__1388
10694                 | LR__1371
10694                 | ' 
10694                 | ' if r=print_mod_comma  then
10694     21 24 0E F2 | 	cmp	local04, #33 wz
10698     AC 01 90 5D |  if_ne	jmp	#LR__1376
1069c                 | '   if t1.result_type=result_int then print t1.result.iresult,
1069c     1C 22 0E F2 | 	cmp	local03, #28 wz
106a0     64 00 90 5D |  if_ne	jmp	#LR__1372
106a4     00 12 06 F6 | 	mov	arg01, #0
106a8     6C AA B0 FD | 	call	#__system___getiolock_0362
106ac     FD 12 02 F6 | 	mov	arg01, result1
106b0     B0 54 B0 FD | 	call	#__system___lockmem
106b4     00 28 06 F6 | 	mov	local06, #0
106b8     00 12 06 F6 | 	mov	arg01, #0
106bc     0F 15 02 F6 | 	mov	arg02, local01
106c0     00 16 06 F6 | 	mov	arg03, #0
106c4     0A 18 06 F6 | 	mov	arg04, #10
106c8     D0 61 B0 FD | 	call	#__system___basic_print_integer
106cc     FD 2A 02 F6 | 	mov	local07, result1
106d0     14 27 02 F6 | 	mov	local05, local06
106d4     15 27 02 F1 | 	add	local05, local07
106d8     00 2C 06 F6 | 	mov	local08, #0
106dc     00 12 06 F6 | 	mov	arg01, #0
106e0     09 14 06 F6 | 	mov	arg02, #9
106e4     00 16 06 F6 | 	mov	arg03, #0
106e8     14 61 B0 FD | 	call	#__system___basic_print_char
106ec     FD 2E 02 F6 | 	mov	local09, result1
106f0     FD 26 02 F1 | 	add	local05, result1
106f4     00 12 06 F6 | 	mov	arg01, #0
106f8     1C AA B0 FD | 	call	#__system___getiolock_0362
106fc     FD 00 68 FC | 	wrlong	#0, result1
10700     00 FA 05 F6 | 	mov	result1, #0
10704     00 30 06 F6 | 	mov	local10, #0
10708                 | LR__1372
10708                 | '   if t1.result_type=result_uint then print t1.result.uresult,
10708     1D 22 0E F2 | 	cmp	local03, #29 wz
1070c     64 00 90 5D |  if_ne	jmp	#LR__1373
10710     00 12 06 F6 | 	mov	arg01, #0
10714     00 AA B0 FD | 	call	#__system___getiolock_0362
10718     FD 12 02 F6 | 	mov	arg01, result1
1071c     44 54 B0 FD | 	call	#__system___lockmem
10720     00 28 06 F6 | 	mov	local06, #0
10724     00 12 06 F6 | 	mov	arg01, #0
10728     0F 15 02 F6 | 	mov	arg02, local01
1072c     00 16 06 F6 | 	mov	arg03, #0
10730     0A 18 06 F6 | 	mov	arg04, #10
10734     A4 61 B0 FD | 	call	#__system___basic_print_unsigned
10738     FD 2A 02 F6 | 	mov	local07, result1
1073c     14 27 02 F6 | 	mov	local05, local06
10740     15 27 02 F1 | 	add	local05, local07
10744     00 2C 06 F6 | 	mov	local08, #0
10748     00 12 06 F6 | 	mov	arg01, #0
1074c     09 14 06 F6 | 	mov	arg02, #9
10750     00 16 06 F6 | 	mov	arg03, #0
10754     A8 60 B0 FD | 	call	#__system___basic_print_char
10758     FD 2E 02 F6 | 	mov	local09, result1
1075c     FD 26 02 F1 | 	add	local05, result1
10760     00 12 06 F6 | 	mov	arg01, #0
10764     B0 A9 B0 FD | 	call	#__system___getiolock_0362
10768     FD 00 68 FC | 	wrlong	#0, result1
1076c     00 FA 05 F6 | 	mov	result1, #0
10770     00 30 06 F6 | 	mov	local10, #0
10774                 | LR__1373
10774                 | '   if t1.result_type=result_float then print t1.result.fresult,
10774     1E 22 0E F2 | 	cmp	local03, #30 wz
10778     64 00 90 5D |  if_ne	jmp	#LR__1374
1077c     00 12 06 F6 | 	mov	arg01, #0
10780     94 A9 B0 FD | 	call	#__system___getiolock_0362
10784     FD 12 02 F6 | 	mov	arg01, result1
10788     D8 53 B0 FD | 	call	#__system___lockmem
1078c     00 28 06 F6 | 	mov	local06, #0
10790     00 12 06 F6 | 	mov	arg01, #0
10794     0F 15 02 F6 | 	mov	arg02, local01
10798     00 16 06 F6 | 	mov	arg03, #0
1079c     23 18 06 F6 | 	mov	arg04, #35
107a0     EC 83 B0 FD | 	call	#__system___basic_print_float
107a4     FD 2A 02 F6 | 	mov	local07, result1
107a8     14 27 02 F6 | 	mov	local05, local06
107ac     15 27 02 F1 | 	add	local05, local07
107b0     00 2C 06 F6 | 	mov	local08, #0
107b4     00 12 06 F6 | 	mov	arg01, #0
107b8     09 14 06 F6 | 	mov	arg02, #9
107bc     00 16 06 F6 | 	mov	arg03, #0
107c0     3C 60 B0 FD | 	call	#__system___basic_print_char
107c4     FD 2E 02 F6 | 	mov	local09, result1
107c8     FD 26 02 F1 | 	add	local05, result1
107cc     00 12 06 F6 | 	mov	arg01, #0
107d0     44 A9 B0 FD | 	call	#__system___getiolock_0362
107d4     FD 00 68 FC | 	wrlong	#0, result1
107d8     00 FA 05 F6 | 	mov	result1, #0
107dc     00 30 06 F6 | 	mov	local10, #0
107e0                 | LR__1374
107e0                 | '   if t1.result_type=result_string then print t1.result.sresult,
107e0     1F 22 0E F2 | 	cmp	local03, #31 wz
107e4     60 00 90 5D |  if_ne	jmp	#LR__1375
107e8     00 12 06 F6 | 	mov	arg01, #0
107ec     28 A9 B0 FD | 	call	#__system___getiolock_0362
107f0     FD 12 02 F6 | 	mov	arg01, result1
107f4     6C 53 B0 FD | 	call	#__system___lockmem
107f8     00 28 06 F6 | 	mov	local06, #0
107fc     00 12 06 F6 | 	mov	arg01, #0
10800     0F 15 02 F6 | 	mov	arg02, local01
10804     00 16 06 F6 | 	mov	arg03, #0
10808     4C 60 B0 FD | 	call	#__system___basic_print_string
1080c     FD 2A 02 F6 | 	mov	local07, result1
10810     14 27 02 F6 | 	mov	local05, local06
10814     15 27 02 F1 | 	add	local05, local07
10818     00 2C 06 F6 | 	mov	local08, #0
1081c     00 12 06 F6 | 	mov	arg01, #0
10820     09 14 06 F6 | 	mov	arg02, #9
10824     00 16 06 F6 | 	mov	arg03, #0
10828     D4 5F B0 FD | 	call	#__system___basic_print_char
1082c     FD 2E 02 F6 | 	mov	local09, result1
10830     FD 26 02 F1 | 	add	local05, result1
10834     00 12 06 F6 | 	mov	arg01, #0
10838     DC A8 B0 FD | 	call	#__system___getiolock_0362
1083c     FD 00 68 FC | 	wrlong	#0, result1
10840     00 FA 05 F6 | 	mov	result1, #0
10844     00 30 06 F6 | 	mov	local10, #0
10848                 | LR__1375
10848                 | LR__1376
10848                 | ' if r=print_mod_semicolon then 
10848     22 24 0E F2 | 	cmp	local04, #34 wz
1084c     1C 01 90 5D |  if_ne	jmp	#LR__1381
10850                 | '   if t1.result_type=result_int then print t1.result.iresult;
10850     1C 22 0E F2 | 	cmp	local03, #28 wz
10854     50 00 90 5D |  if_ne	jmp	#LR__1377
10858     00 12 06 F6 | 	mov	arg01, #0
1085c     B8 A8 B0 FD | 	call	#__system___getiolock_0362
10860     FD 12 02 F6 | 	mov	arg01, result1
10864     FC 52 B0 FD | 	call	#__system___lockmem
10868     00 28 06 F6 | 	mov	local06, #0
1086c     00 30 06 F6 | 	mov	local10, #0
10870     0A 2C 06 F6 | 	mov	local08, #10
10874     00 12 06 F6 | 	mov	arg01, #0
10878     0F 15 02 F6 | 	mov	arg02, local01
1087c     00 16 06 F6 | 	mov	arg03, #0
10880     0A 18 06 F6 | 	mov	arg04, #10
10884     14 60 B0 FD | 	call	#__system___basic_print_integer
10888     FD 2A 02 F6 | 	mov	local07, result1
1088c     14 27 02 F6 | 	mov	local05, local06
10890     15 27 02 F1 | 	add	local05, local07
10894     00 12 06 F6 | 	mov	arg01, #0
10898     7C A8 B0 FD | 	call	#__system___getiolock_0362
1089c     FD 00 68 FC | 	wrlong	#0, result1
108a0     00 FA 05 F6 | 	mov	result1, #0
108a4     00 2E 06 F6 | 	mov	local09, #0
108a8                 | LR__1377
108a8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
108a8     1D 22 0E F2 | 	cmp	local03, #29 wz
108ac     50 00 90 5D |  if_ne	jmp	#LR__1378
108b0     00 12 06 F6 | 	mov	arg01, #0
108b4     60 A8 B0 FD | 	call	#__system___getiolock_0362
108b8     FD 12 02 F6 | 	mov	arg01, result1
108bc     A4 52 B0 FD | 	call	#__system___lockmem
108c0     00 28 06 F6 | 	mov	local06, #0
108c4     00 30 06 F6 | 	mov	local10, #0
108c8     0A 2C 06 F6 | 	mov	local08, #10
108cc     00 12 06 F6 | 	mov	arg01, #0
108d0     0F 15 02 F6 | 	mov	arg02, local01
108d4     00 16 06 F6 | 	mov	arg03, #0
108d8     0A 18 06 F6 | 	mov	arg04, #10
108dc     FC 5F B0 FD | 	call	#__system___basic_print_unsigned
108e0     FD 2A 02 F6 | 	mov	local07, result1
108e4     14 27 02 F6 | 	mov	local05, local06
108e8     15 27 02 F1 | 	add	local05, local07
108ec     00 12 06 F6 | 	mov	arg01, #0
108f0     24 A8 B0 FD | 	call	#__system___getiolock_0362
108f4     FD 00 68 FC | 	wrlong	#0, result1
108f8     00 FA 05 F6 | 	mov	result1, #0
108fc     00 2E 06 F6 | 	mov	local09, #0
10900                 | LR__1378
10900                 | '   if t1.result_type=result_float then print t1.result.fresult;
10900     1E 22 0E F2 | 	cmp	local03, #30 wz
10904     30 00 90 5D |  if_ne	jmp	#LR__1379
10908     00 12 06 F6 | 	mov	arg01, #0
1090c     08 A8 B0 FD | 	call	#__system___getiolock_0362
10910     FD 12 02 F6 | 	mov	arg01, result1
10914     4C 52 B0 FD | 	call	#__system___lockmem
10918     00 12 06 F6 | 	mov	arg01, #0
1091c     0F 15 02 F6 | 	mov	arg02, local01
10920     00 16 06 F6 | 	mov	arg03, #0
10924     23 18 06 F6 | 	mov	arg04, #35
10928     64 82 B0 FD | 	call	#__system___basic_print_float
1092c     00 12 06 F6 | 	mov	arg01, #0
10930     E4 A7 B0 FD | 	call	#__system___getiolock_0362
10934     FD 00 68 FC | 	wrlong	#0, result1
10938                 | LR__1379
10938                 | '   if t1.result_type=result_string then print t1.result.sresult;
10938     1F 22 0E F2 | 	cmp	local03, #31 wz
1093c     2C 00 90 5D |  if_ne	jmp	#LR__1380
10940     00 12 06 F6 | 	mov	arg01, #0
10944     D0 A7 B0 FD | 	call	#__system___getiolock_0362
10948     FD 12 02 F6 | 	mov	arg01, result1
1094c     14 52 B0 FD | 	call	#__system___lockmem
10950     00 12 06 F6 | 	mov	arg01, #0
10954     0F 15 02 F6 | 	mov	arg02, local01
10958     00 16 06 F6 | 	mov	arg03, #0
1095c     F8 5E B0 FD | 	call	#__system___basic_print_string
10960     00 12 06 F6 | 	mov	arg01, #0
10964     B0 A7 B0 FD | 	call	#__system___getiolock_0362
10968     FD 00 68 FC | 	wrlong	#0, result1
1096c                 | LR__1380
1096c                 | LR__1381
1096c                 | ' if r=0 then 
1096c     00 24 0E F2 | 	cmp	local04, #0 wz
10970     1C 01 90 5D |  if_ne	jmp	#LR__1386
10974                 | '   if t1.result_type=result_int then print t1.result.iresult
10974     1C 22 0E F2 | 	cmp	local03, #28 wz
10978     40 00 90 5D |  if_ne	jmp	#LR__1382
1097c     00 12 06 F6 | 	mov	arg01, #0
10980     94 A7 B0 FD | 	call	#__system___getiolock_0362
10984     FD 12 02 F6 | 	mov	arg01, result1
10988     D8 51 B0 FD | 	call	#__system___lockmem
1098c     00 12 06 F6 | 	mov	arg01, #0
10990     0F 15 02 F6 | 	mov	arg02, local01
10994     00 16 06 F6 | 	mov	arg03, #0
10998     0A 18 06 F6 | 	mov	arg04, #10
1099c     FC 5E B0 FD | 	call	#__system___basic_print_integer
109a0     00 12 06 F6 | 	mov	arg01, #0
109a4     0A 14 06 F6 | 	mov	arg02, #10
109a8     00 16 06 F6 | 	mov	arg03, #0
109ac     50 5E B0 FD | 	call	#__system___basic_print_char
109b0     00 12 06 F6 | 	mov	arg01, #0
109b4     60 A7 B0 FD | 	call	#__system___getiolock_0362
109b8     FD 00 68 FC | 	wrlong	#0, result1
109bc                 | LR__1382
109bc                 | '   if t1.result_type=result_uint then print t1.result.uresult
109bc     1D 22 0E F2 | 	cmp	local03, #29 wz
109c0     40 00 90 5D |  if_ne	jmp	#LR__1383
109c4     00 12 06 F6 | 	mov	arg01, #0
109c8     4C A7 B0 FD | 	call	#__system___getiolock_0362
109cc     FD 12 02 F6 | 	mov	arg01, result1
109d0     90 51 B0 FD | 	call	#__system___lockmem
109d4     00 12 06 F6 | 	mov	arg01, #0
109d8     0F 15 02 F6 | 	mov	arg02, local01
109dc     00 16 06 F6 | 	mov	arg03, #0
109e0     0A 18 06 F6 | 	mov	arg04, #10
109e4     F4 5E B0 FD | 	call	#__system___basic_print_unsigned
109e8     00 12 06 F6 | 	mov	arg01, #0
109ec     0A 14 06 F6 | 	mov	arg02, #10
109f0     00 16 06 F6 | 	mov	arg03, #0
109f4     08 5E B0 FD | 	call	#__system___basic_print_char
109f8     00 12 06 F6 | 	mov	arg01, #0
109fc     18 A7 B0 FD | 	call	#__system___getiolock_0362
10a00     FD 00 68 FC | 	wrlong	#0, result1
10a04                 | LR__1383
10a04                 | '   if t1.result_type=result_float then print t1.result.fresult
10a04     1E 22 0E F2 | 	cmp	local03, #30 wz
10a08     40 00 90 5D |  if_ne	jmp	#LR__1384
10a0c     00 12 06 F6 | 	mov	arg01, #0
10a10     04 A7 B0 FD | 	call	#__system___getiolock_0362
10a14     FD 12 02 F6 | 	mov	arg01, result1
10a18     48 51 B0 FD | 	call	#__system___lockmem
10a1c     00 12 06 F6 | 	mov	arg01, #0
10a20     0F 15 02 F6 | 	mov	arg02, local01
10a24     00 16 06 F6 | 	mov	arg03, #0
10a28     23 18 06 F6 | 	mov	arg04, #35
10a2c     60 81 B0 FD | 	call	#__system___basic_print_float
10a30     00 12 06 F6 | 	mov	arg01, #0
10a34     0A 14 06 F6 | 	mov	arg02, #10
10a38     00 16 06 F6 | 	mov	arg03, #0
10a3c     C0 5D B0 FD | 	call	#__system___basic_print_char
10a40     00 12 06 F6 | 	mov	arg01, #0
10a44     D0 A6 B0 FD | 	call	#__system___getiolock_0362
10a48     FD 00 68 FC | 	wrlong	#0, result1
10a4c                 | LR__1384
10a4c                 | '   if t1.result_type=result_string then print t1.result.sresult
10a4c     1F 22 0E F2 | 	cmp	local03, #31 wz
10a50     3C 00 90 5D |  if_ne	jmp	#LR__1385
10a54     00 12 06 F6 | 	mov	arg01, #0
10a58     BC A6 B0 FD | 	call	#__system___getiolock_0362
10a5c     FD 12 02 F6 | 	mov	arg01, result1
10a60     00 51 B0 FD | 	call	#__system___lockmem
10a64     00 12 06 F6 | 	mov	arg01, #0
10a68     0F 15 02 F6 | 	mov	arg02, local01
10a6c     00 16 06 F6 | 	mov	arg03, #0
10a70     E4 5D B0 FD | 	call	#__system___basic_print_string
10a74     00 12 06 F6 | 	mov	arg01, #0
10a78     0A 14 06 F6 | 	mov	arg02, #10
10a7c     00 16 06 F6 | 	mov	arg03, #0
10a80     7C 5D B0 FD | 	call	#__system___basic_print_char
10a84     00 12 06 F6 | 	mov	arg01, #0
10a88     8C A6 B0 FD | 	call	#__system___getiolock_0362
10a8c     FD 00 68 FC | 	wrlong	#0, result1
10a90                 | LR__1385
10a90                 | LR__1386
10a90                 | ' if r=print_mod_empty then print
10a90     20 24 0E F2 | 	cmp	local04, #32 wz
10a94     2C 00 90 5D |  if_ne	jmp	#LR__1387
10a98     00 12 06 F6 | 	mov	arg01, #0
10a9c     78 A6 B0 FD | 	call	#__system___getiolock_0362
10aa0     FD 12 02 F6 | 	mov	arg01, result1
10aa4     BC 50 B0 FD | 	call	#__system___lockmem
10aa8     00 12 06 F6 | 	mov	arg01, #0
10aac     0A 14 06 F6 | 	mov	arg02, #10
10ab0     00 16 06 F6 | 	mov	arg03, #0
10ab4     48 5D B0 FD | 	call	#__system___basic_print_char
10ab8     00 12 06 F6 | 	mov	arg01, #0
10abc     58 A6 B0 FD | 	call	#__system___getiolock_0362
10ac0     FD 00 68 FC | 	wrlong	#0, result1
10ac4                 | LR__1387
10ac4                 | LR__1388
10ac4     A7 F0 03 F6 | 	mov	ptra, fp
10ac8     B2 00 A0 FD | 	call	#popregs_
10acc                 | _do_print_ret
10acc     2D 00 64 FD | 	ret
10ad0                 | 
10ad0                 | ' 
10ad0                 | ' 
10ad0                 | ' sub do_paper
10ad0                 | _do_paper
10ad0     03 4A 05 F6 | 	mov	COUNT_, #3
10ad4     A8 00 A0 FD | 	call	#pushregs_
10ad8     D0 7E BF FD | 	call	#_pop
10adc     FD 1E 02 F6 | 	mov	local01, result1
10ae0     FE 20 02 F6 | 	mov	local02, result2
10ae4     FF 22 02 F6 | 	mov	local03, result3
10ae8                 | ' t1=pop() 
10ae8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10ae8     1E 22 0E F2 | 	cmp	local03, #30 wz
10aec     10 00 90 5D |  if_ne	jmp	#LR__1390
10af0     0F 13 02 F6 | 	mov	arg01, local01
10af4     00 14 06 F6 | 	mov	arg02, #0
10af8     44 7F B0 FD | 	call	#__system___float_tointeger
10afc     FD 1E 02 F6 | 	mov	local01, result1
10b00                 | LR__1390
10b00                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10b00     1F 22 0E F2 | 	cmp	local03, #31 wz
10b04     18 00 90 5D |  if_ne	jmp	#LR__1391
10b08     0F 13 02 F6 | 	mov	arg01, local01
10b0c     50 82 B0 FD | 	call	#__system____builtin_atof
10b10     FD 12 02 F6 | 	mov	arg01, result1
10b14     00 14 06 F6 | 	mov	arg02, #0
10b18     24 7F B0 FD | 	call	#__system___float_tointeger
10b1c     FD 1E 02 F6 | 	mov	local01, result1
10b20                 | LR__1391
10b20     56 00 00 FF 
10b24     0C E4 05 F1 | 	add	objptr, ##44044
10b28     F2 1E 62 FC | 	wrlong	local01, objptr
10b2c     04 E4 05 F1 | 	add	objptr, #4
10b30     F2 12 02 FB | 	rdlong	arg01, objptr
10b34                 | ' 
10b34                 | ' write_color:=ff
10b34     55 00 00 FF 
10b38     D3 E5 85 F1 | 	sub	objptr, ##43987
10b3c     F2 12 62 FC | 	wrlong	arg01, objptr
10b40                 | ' write_background:=bb
10b40     04 E4 05 F1 | 	add	objptr, #4
10b44     F2 1E 62 FC | 	wrlong	local01, objptr
10b48     41 E4 85 F1 | 	sub	objptr, #65
10b4c     A7 F0 03 F6 | 	mov	ptra, fp
10b50     B2 00 A0 FD | 	call	#popregs_
10b54                 | _do_paper_ret
10b54     2D 00 64 FD | 	ret
10b58                 | 
10b58                 | ' 
10b58                 | ' sub do_ink
10b58                 | _do_ink
10b58     03 4A 05 F6 | 	mov	COUNT_, #3
10b5c     A8 00 A0 FD | 	call	#pushregs_
10b60     48 7E BF FD | 	call	#_pop
10b64     FD 1E 02 F6 | 	mov	local01, result1
10b68     FE 20 02 F6 | 	mov	local02, result2
10b6c     FF 22 02 F6 | 	mov	local03, result3
10b70                 | ' t1=pop() 
10b70                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10b70     1E 22 0E F2 | 	cmp	local03, #30 wz
10b74     10 00 90 5D |  if_ne	jmp	#LR__1400
10b78     0F 13 02 F6 | 	mov	arg01, local01
10b7c     00 14 06 F6 | 	mov	arg02, #0
10b80     BC 7E B0 FD | 	call	#__system___float_tointeger
10b84     FD 1E 02 F6 | 	mov	local01, result1
10b88                 | LR__1400
10b88                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10b88     1F 22 0E F2 | 	cmp	local03, #31 wz
10b8c     18 00 90 5D |  if_ne	jmp	#LR__1401
10b90     0F 13 02 F6 | 	mov	arg01, local01
10b94     C8 81 B0 FD | 	call	#__system____builtin_atof
10b98     FD 12 02 F6 | 	mov	arg01, result1
10b9c     00 14 06 F6 | 	mov	arg02, #0
10ba0     9C 7E B0 FD | 	call	#__system___float_tointeger
10ba4     FD 1E 02 F6 | 	mov	local01, result1
10ba8                 | LR__1401
10ba8     56 00 00 FF 
10bac     10 E4 05 F1 | 	add	objptr, ##44048
10bb0     F2 1E 62 FC | 	wrlong	local01, objptr
10bb4     04 E4 85 F1 | 	sub	objptr, #4
10bb8     F2 14 02 FB | 	rdlong	arg02, objptr
10bbc                 | ' 
10bbc                 | ' write_color:=ff
10bbc     55 00 00 FF 
10bc0     CF E5 85 F1 | 	sub	objptr, ##43983
10bc4     F2 1E 62 FC | 	wrlong	local01, objptr
10bc8                 | ' write_background:=bb
10bc8     04 E4 05 F1 | 	add	objptr, #4
10bcc     F2 14 62 FC | 	wrlong	arg02, objptr
10bd0     55 00 00 FF 
10bd4     CF E5 05 F1 | 	add	objptr, ##43983
10bd8     F2 12 02 FB | 	rdlong	arg01, objptr
10bdc     56 00 00 FF 
10be0     10 E4 85 F1 | 	sub	objptr, ##44048
10be4     48 2C B0 FD | 	call	#_hg010b_spin2_setcursorcolor
10be8     A7 F0 03 F6 | 	mov	ptra, fp
10bec     B2 00 A0 FD | 	call	#popregs_
10bf0                 | _do_ink_ret
10bf0     2D 00 64 FD | 	ret
10bf4                 | 
10bf4                 | ' 
10bf4                 | ' 
10bf4                 | ' sub do_font
10bf4                 | _do_font
10bf4     03 4A 05 F6 | 	mov	COUNT_, #3
10bf8     A8 00 A0 FD | 	call	#pushregs_
10bfc     AC 7D BF FD | 	call	#_pop
10c00     FD 1E 02 F6 | 	mov	local01, result1
10c04     FE 20 02 F6 | 	mov	local02, result2
10c08     FF 22 02 F6 | 	mov	local03, result3
10c0c                 | ' t1=pop() 
10c0c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10c0c     1E 22 0E F2 | 	cmp	local03, #30 wz
10c10     10 00 90 5D |  if_ne	jmp	#LR__1410
10c14     0F 13 02 F6 | 	mov	arg01, local01
10c18     00 14 06 F6 | 	mov	arg02, #0
10c1c     20 7E B0 FD | 	call	#__system___float_tointeger
10c20     FD 1E 02 F6 | 	mov	local01, result1
10c24                 | LR__1410
10c24                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10c24     1F 22 0E F2 | 	cmp	local03, #31 wz
10c28     18 00 90 5D |  if_ne	jmp	#LR__1411
10c2c     0F 13 02 F6 | 	mov	arg01, local01
10c30     2C 81 B0 FD | 	call	#__system____builtin_atof
10c34     FD 12 02 F6 | 	mov	arg01, result1
10c38     00 14 06 F6 | 	mov	arg02, #0
10c3c     00 7E B0 FD | 	call	#__system___float_tointeger
10c40     FD 1E 02 F6 | 	mov	local01, result1
10c44                 | LR__1411
10c44     56 00 00 FF 
10c48     14 E4 05 F1 | 	add	objptr, ##44052
10c4c     F2 1E 62 FC | 	wrlong	local01, objptr
10c50     56 00 00 FF 
10c54     14 E4 85 F1 | 	sub	objptr, ##44052
10c58     02 1E 66 F0 | 	shl	local01, #2
10c5c     0F 13 02 F6 | 	mov	arg01, local01
10c60     38 3B B0 FD | 	call	#_hg010b_spin2_setfontfamily
10c64     A7 F0 03 F6 | 	mov	ptra, fp
10c68     B2 00 A0 FD | 	call	#popregs_
10c6c                 | _do_font_ret
10c6c     2D 00 64 FD | 	ret
10c70                 | 
10c70                 | ' 
10c70                 | ' sub do_mode
10c70                 | _do_mode
10c70     04 4A 05 F6 | 	mov	COUNT_, #4
10c74     A8 00 A0 FD | 	call	#pushregs_
10c78     30 7D BF FD | 	call	#_pop
10c7c     FD 1E 02 F6 | 	mov	local01, result1
10c80     FE 20 02 F6 | 	mov	local02, result2
10c84     FF 22 02 F6 | 	mov	local03, result3
10c88                 | ' t1=pop() 
10c88                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10c88     1E 22 0E F2 | 	cmp	local03, #30 wz
10c8c     10 00 90 5D |  if_ne	jmp	#LR__1420
10c90     0F 13 02 F6 | 	mov	arg01, local01
10c94     00 14 06 F6 | 	mov	arg02, #0
10c98     A4 7D B0 FD | 	call	#__system___float_tointeger
10c9c     FD 1E 02 F6 | 	mov	local01, result1
10ca0                 | LR__1420
10ca0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10ca0     1F 22 0E F2 | 	cmp	local03, #31 wz
10ca4     18 00 90 5D |  if_ne	jmp	#LR__1421
10ca8     0F 13 02 F6 | 	mov	arg01, local01
10cac     B0 80 B0 FD | 	call	#__system____builtin_atof
10cb0     FD 12 02 F6 | 	mov	arg01, result1
10cb4     00 14 06 F6 | 	mov	arg02, #0
10cb8     84 7D B0 FD | 	call	#__system___float_tointeger
10cbc     FD 1E 02 F6 | 	mov	local01, result1
10cc0                 | LR__1421
10cc0                 | ' select case t1.result.iresult
10cc0     0F 25 02 F6 | 	mov	local04, local01
10cc4     04 24 26 F3 | 	fle	local04, #4
10cc8     30 24 62 FD | 	jmprel	local04
10ccc                 | LR__1422
10ccc     10 00 90 FD | 	jmp	#LR__1423
10cd0     68 00 90 FD | 	jmp	#LR__1424
10cd4     C0 00 90 FD | 	jmp	#LR__1425
10cd8     18 01 90 FD | 	jmp	#LR__1426
10cdc     6C 01 90 FD | 	jmp	#LR__1427
10ce0                 | LR__1423
10ce0     56 00 00 FF 
10ce4     14 E4 05 F1 | 	add	objptr, ##44052
10ce8     F2 02 68 FC | 	wrlong	#1, objptr
10cec     04 E4 85 F1 | 	sub	objptr, #4
10cf0     F2 34 69 FC | 	wrlong	#154, objptr
10cf4     04 E4 85 F1 | 	sub	objptr, #4
10cf8     F2 26 69 FC | 	wrlong	#147, objptr
10cfc     56 00 00 FF 
10d00     0C E4 85 F1 | 	sub	objptr, ##44044
10d04     04 12 06 F6 | 	mov	arg01, #4
10d08     90 3A B0 FD | 	call	#_hg010b_spin2_setfontfamily
10d0c     56 00 00 FF 
10d10     10 E4 05 F1 | 	add	objptr, ##44048
10d14     F2 12 02 FB | 	rdlong	arg01, objptr
10d18     04 E4 85 F1 | 	sub	objptr, #4
10d1c     F2 14 02 FB | 	rdlong	arg02, objptr
10d20                 | ' 
10d20                 | ' write_color:=ff
10d20     55 00 00 FF 
10d24     CF E5 85 F1 | 	sub	objptr, ##43983
10d28     F2 12 62 FC | 	wrlong	arg01, objptr
10d2c                 | ' write_background:=bb
10d2c     04 E4 05 F1 | 	add	objptr, #4
10d30     F2 14 62 FC | 	wrlong	arg02, objptr
10d34     41 E4 85 F1 | 	sub	objptr, #65
10d38     10 01 90 FD | 	jmp	#LR__1427
10d3c                 | LR__1424
10d3c     56 00 00 FF 
10d40     14 E4 05 F1 | 	add	objptr, ##44052
10d44     F2 00 68 FC | 	wrlong	#0, objptr
10d48     04 E4 85 F1 | 	sub	objptr, #4
10d4c     F2 2E 68 FC | 	wrlong	#23, objptr
10d50     00 12 06 F6 | 	mov	arg01, #0
10d54     04 E4 85 F1 | 	sub	objptr, #4
10d58     F2 00 68 FC | 	wrlong	#0, objptr
10d5c     56 00 00 FF 
10d60     0C E4 85 F1 | 	sub	objptr, ##44044
10d64     34 3A B0 FD | 	call	#_hg010b_spin2_setfontfamily
10d68     56 00 00 FF 
10d6c     10 E4 05 F1 | 	add	objptr, ##44048
10d70     F2 12 02 FB | 	rdlong	arg01, objptr
10d74     04 E4 85 F1 | 	sub	objptr, #4
10d78     F2 14 02 FB | 	rdlong	arg02, objptr
10d7c                 | ' 
10d7c                 | ' write_color:=ff
10d7c     55 00 00 FF 
10d80     CF E5 85 F1 | 	sub	objptr, ##43983
10d84     F2 12 62 FC | 	wrlong	arg01, objptr
10d88                 | ' write_background:=bb
10d88     04 E4 05 F1 | 	add	objptr, #4
10d8c     F2 14 62 FC | 	wrlong	arg02, objptr
10d90     41 E4 85 F1 | 	sub	objptr, #65
10d94     B4 00 90 FD | 	jmp	#LR__1427
10d98                 | LR__1425
10d98     56 00 00 FF 
10d9c     14 E4 05 F1 | 	add	objptr, ##44052
10da0     F2 00 68 FC | 	wrlong	#0, objptr
10da4     04 E4 85 F1 | 	sub	objptr, #4
10da8     F2 6A 69 FC | 	wrlong	#181, objptr
10dac     00 12 06 F6 | 	mov	arg01, #0
10db0     04 E4 85 F1 | 	sub	objptr, #4
10db4     F2 00 68 FC | 	wrlong	#0, objptr
10db8     56 00 00 FF 
10dbc     0C E4 85 F1 | 	sub	objptr, ##44044
10dc0     D8 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10dc4     56 00 00 FF 
10dc8     10 E4 05 F1 | 	add	objptr, ##44048
10dcc     F2 12 02 FB | 	rdlong	arg01, objptr
10dd0     04 E4 85 F1 | 	sub	objptr, #4
10dd4     F2 14 02 FB | 	rdlong	arg02, objptr
10dd8                 | ' 
10dd8                 | ' write_color:=ff
10dd8     55 00 00 FF 
10ddc     CF E5 85 F1 | 	sub	objptr, ##43983
10de0     F2 12 62 FC | 	wrlong	arg01, objptr
10de4                 | ' write_background:=bb
10de4     04 E4 05 F1 | 	add	objptr, #4
10de8     F2 14 62 FC | 	wrlong	arg02, objptr
10dec     41 E4 85 F1 | 	sub	objptr, #65
10df0     58 00 90 FD | 	jmp	#LR__1427
10df4                 | LR__1426
10df4     56 00 00 FF 
10df8     14 E4 05 F1 | 	add	objptr, ##44052
10dfc     F2 00 68 FC | 	wrlong	#0, objptr
10e00     04 E4 85 F1 | 	sub	objptr, #4
10e04     F2 1E 68 FC | 	wrlong	#15, objptr
10e08     00 12 06 F6 | 	mov	arg01, #0
10e0c     04 E4 85 F1 | 	sub	objptr, #4
10e10     F2 00 68 FC | 	wrlong	#0, objptr
10e14     56 00 00 FF 
10e18     0C E4 85 F1 | 	sub	objptr, ##44044
10e1c     7C 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10e20     56 00 00 FF 
10e24     10 E4 05 F1 | 	add	objptr, ##44048
10e28     F2 12 02 FB | 	rdlong	arg01, objptr
10e2c     04 E4 85 F1 | 	sub	objptr, #4
10e30     F2 14 02 FB | 	rdlong	arg02, objptr
10e34                 | ' 
10e34                 | ' write_color:=ff
10e34     55 00 00 FF 
10e38     CF E5 85 F1 | 	sub	objptr, ##43983
10e3c     F2 12 62 FC | 	wrlong	arg01, objptr
10e40                 | ' write_background:=bb
10e40     04 E4 05 F1 | 	add	objptr, #4
10e44     F2 14 62 FC | 	wrlong	arg02, objptr
10e48     41 E4 85 F1 | 	sub	objptr, #65
10e4c                 | LR__1427
10e4c     56 00 00 FF 
10e50     10 E4 05 F1 | 	add	objptr, ##44048
10e54     F2 12 02 FB | 	rdlong	arg01, objptr
10e58     04 E4 85 F1 | 	sub	objptr, #4
10e5c     F2 14 02 FB | 	rdlong	arg02, objptr
10e60     56 00 00 FF 
10e64     0C E4 85 F1 | 	sub	objptr, ##44044
10e68     18 3A B0 FD | 	call	#_hg010b_spin2_cls
10e6c     28 01 00 FF 
10e70     A1 13 06 F6 | 	mov	arg01, ##@LR__4381
10e74                 | ' 
10e74                 | ' write(text)
10e74     C8 3C B0 FD | 	call	#_hg010b_spin2_write
10e78                 | ' crlf
10e78     24 3E B0 FD | 	call	#_hg010b_spin2_crlf
10e7c     09 00 00 FF 
10e80     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
10e84     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
10e88     09 00 00 FF 
10e8c     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
10e90                 | ' 
10e90                 | ' write(text)
10e90     AC 3C B0 FD | 	call	#_hg010b_spin2_write
10e94                 | ' crlf
10e94     08 3E B0 FD | 	call	#_hg010b_spin2_crlf
10e98     78 00 00 FF 
10e9c     B0 E5 05 F1 | 	add	objptr, ##61872
10ea0     F2 12 02 FB | 	rdlong	arg01, objptr
10ea4     78 00 00 FF 
10ea8     B0 E5 85 F1 | 	sub	objptr, ##61872
10eac                 | ' 
10eac                 | ' write(text)
10eac     90 3C B0 FD | 	call	#_hg010b_spin2_write
10eb0                 | ' crlf
10eb0     EC 3D B0 FD | 	call	#_hg010b_spin2_crlf
10eb4     A7 F0 03 F6 | 	mov	ptra, fp
10eb8     B2 00 A0 FD | 	call	#popregs_
10ebc                 | _do_mode_ret
10ebc     2D 00 64 FD | 	ret
10ec0                 | 
10ec0                 | ' 
10ec0                 | ' 
10ec0                 | ' 
10ec0                 | ' sub do_pinwrite
10ec0                 | _do_pinwrite
10ec0     E8 7A BF FD | 	call	#_pop
10ec4     FD 14 02 F6 | 	mov	arg02, result1
10ec8     E0 7A BF FD | 	call	#_pop
10ecc     FD 12 02 F6 | 	mov	arg01, result1
10ed0     44 4E B0 FD | 	call	#__system___pinwrite
10ed4                 | _do_pinwrite_ret
10ed4     2D 00 64 FD | 	ret
10ed8                 | 
10ed8                 | ' 
10ed8                 | ' sub do_waitms
10ed8                 | _do_waitms
10ed8     01 4A 05 F6 | 	mov	COUNT_, #1
10edc     A8 00 A0 FD | 	call	#pushregs_
10ee0     18 F0 07 F1 | 	add	ptra, #24
10ee4     C4 7A BF FD | 	call	#_pop
10ee8     A7 FA 61 FC | 	wrlong	result1, fp
10eec     04 4E 05 F1 | 	add	fp, #4
10ef0     A7 FC 61 FC | 	wrlong	result2, fp
10ef4     04 4E 05 F1 | 	add	fp, #4
10ef8     A7 FE 61 FC | 	wrlong	result3, fp
10efc                 | ' 
10efc                 | ' t1=pop() 'value
10efc                 | ' 
10efc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
10efc     08 4E 85 F1 | 	sub	fp, #8
10f00     1C FE 0D F2 | 	cmp	result3, #28 wz
10f04     08 4E 05 51 |  if_ne	add	fp, #8
10f08     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10f0c     08 4E 85 51 |  if_ne	sub	fp, #8
10f10     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
10f14     A7 12 02 AB |  if_e	rdlong	arg01, fp
10f18     0C 4E 05 A1 |  if_e	add	fp, #12
10f1c     A7 12 62 AC |  if_e	wrlong	arg01, fp
10f20     0C 4E 85 A1 |  if_e	sub	fp, #12
10f24     14 00 90 AD |  if_e	jmp	#LR__1430
10f28     A7 12 02 F6 | 	mov	arg01, fp
10f2c     30 DC BF FD | 	call	#_converttoint
10f30     0C 4E 05 F1 | 	add	fp, #12
10f34     A7 FA 61 FC | 	wrlong	result1, fp
10f38     0C 4E 85 F1 | 	sub	fp, #12
10f3c                 | LR__1430
10f3c                 | ' if t<0 then return
10f3c     0C 4E 05 F1 | 	add	fp, #12
10f40     A7 12 02 FB | 	rdlong	arg01, fp
10f44     0C 4E 85 F1 | 	sub	fp, #12
10f48     00 12 56 F2 | 	cmps	arg01, #0 wc
10f4c     B8 00 90 CD |  if_b	jmp	#LR__1435
10f50                 | ' if t < 5000 then 
10f50     0C 4E 05 F1 | 	add	fp, #12
10f54     A7 12 02 FB | 	rdlong	arg01, fp
10f58     0C 4E 85 F1 | 	sub	fp, #12
10f5c     09 00 00 FF 
10f60     88 13 56 F2 | 	cmps	arg01, ##5000 wc
10f64     14 00 90 3D |  if_ae	jmp	#LR__1431
10f68     0C 4E 05 F1 | 	add	fp, #12
10f6c     A7 12 02 FB | 	rdlong	arg01, fp
10f70     0C 4E 85 F1 | 	sub	fp, #12
10f74     E0 4E B0 FD | 	call	#__system___waitms
10f78     8C 00 90 FD | 	jmp	#LR__1434
10f7c                 | LR__1431
10f7c     10 4E 05 F1 | 	add	fp, #16
10f80     A7 02 68 FC | 	wrlong	#1, fp
10f84     04 4E 85 F1 | 	sub	fp, #4
10f88     A7 12 02 FB | 	rdlong	arg01, fp
10f8c     09 13 52 F6 | 	abs	arg01, arg01 wc
10f90     09 00 00 FF 
10f94     88 13 16 FD | 	qdiv	arg01, ##5000
10f98                 | '   for i=1 to t/5000
10f98     0C 4E 85 F1 | 	sub	fp, #12
10f9c     18 1E 62 FD | 	getqx	local01
10fa0     0F 1F 82 F6 | 	negc	local01, local01
10fa4     01 1E 06 F1 | 	add	local01, #1
10fa8                 | LR__1432
10fa8     10 4E 05 F1 | 	add	fp, #16
10fac     A7 12 02 FB | 	rdlong	arg01, fp
10fb0     10 4E 85 F1 | 	sub	fp, #16
10fb4     0F 13 52 F2 | 	cmps	arg01, local01 wc
10fb8     28 00 90 3D |  if_ae	jmp	#LR__1433
10fbc     0C 4E 05 F1 | 	add	fp, #12
10fc0     A7 12 02 FB | 	rdlong	arg01, fp
10fc4     0C 4E 85 F1 | 	sub	fp, #12
10fc8     8C 4E B0 FD | 	call	#__system___waitms
10fcc     10 4E 05 F1 | 	add	fp, #16
10fd0     A7 12 02 FB | 	rdlong	arg01, fp
10fd4     01 12 06 F1 | 	add	arg01, #1
10fd8     A7 12 62 FC | 	wrlong	arg01, fp
10fdc     10 4E 85 F1 | 	sub	fp, #16
10fe0     C4 FF 9F FD | 	jmp	#LR__1432
10fe4                 | LR__1433
10fe4     0C 4E 05 F1 | 	add	fp, #12
10fe8     A7 1E 02 FB | 	rdlong	local01, fp
10fec     0F 1F 52 F6 | 	abs	local01, local01 wc
10ff0     09 00 00 FF 
10ff4     88 1F 16 FD | 	qdiv	local01, ##5000
10ff8     0C 4E 85 F1 | 	sub	fp, #12
10ffc     19 1E 62 FD | 	getqy	local01
11000     0F 13 82 F6 | 	negc	arg01, local01
11004     50 4E B0 FD | 	call	#__system___waitms
11008                 | LR__1434
11008                 | LR__1435
11008     A7 F0 03 F6 | 	mov	ptra, fp
1100c     B2 00 A0 FD | 	call	#popregs_
11010                 | _do_waitms_ret
11010     2D 00 64 FD | 	ret
11014                 | 
11014                 | ' 
11014                 | ' sub do_waitvbl
11014                 | _do_waitvbl
11014     01 12 06 F6 | 	mov	arg01, #1
11018     F8 37 B0 FD | 	call	#_hg010b_spin2_waitvbl
1101c                 | _do_waitvbl_ret
1101c     2D 00 64 FD | 	ret
11020                 | 
11020                 | ' 
11020                 | ' sub do_waitclock
11020                 | _do_waitclock
11020     7A 00 00 FF 
11024     48 E4 05 F1 | 	add	objptr, ##62536
11028     F2 00 02 FB | 	rdlong	_var01, objptr
1102c                 | ' c=hkcnt
1102c                 | ' do: loop until hkcnt<>c
1102c                 | LR__1440
1102c     F2 02 02 FB | 	rdlong	_var02, objptr
11030     00 03 0A F2 | 	cmp	_var02, _var01 wz
11034     F4 FF 9F AD |  if_e	jmp	#LR__1440
11038     7A 00 00 FF 
1103c     48 E4 85 F1 | 	sub	objptr, ##62536
11040                 | _do_waitclock_ret
11040     2D 00 64 FD | 	ret
11044                 | 
11044                 | ' 
11044                 | ' sub do_dir
11044                 | _do_dir
11044     03 4A 05 F6 | 	mov	COUNT_, #3
11048     A8 00 A0 FD | 	call	#pushregs_
1104c     28 01 00 FF 
11050     A2 13 06 F6 | 	mov	arg01, ##@LR__4382
11054     98 51 B0 FD | 	call	#__system___chdir
11058                 | ' chdir("/sd/bas")       ' set working directory
11058                 | ' print "Working directory: "; currentdir$ 
11058     00 12 06 F6 | 	mov	arg01, #0
1105c     B8 A0 B0 FD | 	call	#__system___getiolock_0362
11060     FD 12 02 F6 | 	mov	arg01, result1
11064     FC 4A B0 FD | 	call	#__system___lockmem
11068     28 01 00 FF 
1106c     AA 15 06 F6 | 	mov	arg02, ##@LR__4383
11070     00 12 06 F6 | 	mov	arg01, #0
11074     00 16 06 F6 | 	mov	arg03, #0
11078     DC 57 B0 FD | 	call	#__system___basic_print_string
1107c     71 00 00 FF 
11080     68 E4 05 F1 | 	add	objptr, ##57960
11084     F2 14 02 FB | 	rdlong	arg02, objptr
11088     71 00 00 FF 
1108c     68 E4 85 F1 | 	sub	objptr, ##57960
11090     00 12 06 F6 | 	mov	arg01, #0
11094     00 16 06 F6 | 	mov	arg03, #0
11098     BC 57 B0 FD | 	call	#__system___basic_print_string
1109c     00 12 06 F6 | 	mov	arg01, #0
110a0     0A 14 06 F6 | 	mov	arg02, #10
110a4     00 16 06 F6 | 	mov	arg03, #0
110a8     54 57 B0 FD | 	call	#__system___basic_print_char
110ac     00 12 06 F6 | 	mov	arg01, #0
110b0     64 A0 B0 FD | 	call	#__system___getiolock_0362
110b4     FD 00 68 FC | 	wrlong	#0, result1
110b8     28 01 00 FF 
110bc     BE 13 06 F6 | 	mov	arg01, ##@LR__4384
110c0     10 14 06 F6 | 	mov	arg02, #16
110c4     88 A1 B0 FD | 	call	#__system___basic_dir
110c8     FD 1E 02 F6 | 	mov	local01, result1
110cc                 | ' 
110cc                 | ' filename=dir$("*", fbDirectory)
110cc                 | ' while filename <> "" and filename <> nil
110cc                 | LR__1450
110cc     00 20 06 F6 | 	mov	local02, #0
110d0     28 01 00 FF 
110d4     C0 15 06 F6 | 	mov	arg02, ##@LR__4385
110d8     0F 13 02 F6 | 	mov	arg01, local01
110dc     AC 4A B0 FD | 	call	#__system___string_cmp
110e0     00 FA 0D F2 | 	cmp	result1, #0 wz
110e4     00 20 26 56 |  if_ne	not	local02, #0
110e8     00 22 06 F6 | 	mov	local03, #0
110ec     0F 13 02 F6 | 	mov	arg01, local01
110f0     00 14 06 F6 | 	mov	arg02, #0
110f4     94 4A B0 FD | 	call	#__system___string_cmp
110f8     00 FA 0D F2 | 	cmp	result1, #0 wz
110fc     00 22 26 56 |  if_ne	not	local03, #0
11100     11 21 CA F7 | 	test	local02, local03 wz
11104     64 00 90 AD |  if_e	jmp	#LR__1451
11108                 | '   print "[dir] ";filename
11108     00 12 06 F6 | 	mov	arg01, #0
1110c     08 A0 B0 FD | 	call	#__system___getiolock_0362
11110     FD 12 02 F6 | 	mov	arg01, result1
11114     4C 4A B0 FD | 	call	#__system___lockmem
11118     28 01 00 FF 
1111c     C1 15 06 F6 | 	mov	arg02, ##@LR__4386
11120     00 12 06 F6 | 	mov	arg01, #0
11124     00 16 06 F6 | 	mov	arg03, #0
11128     2C 57 B0 FD | 	call	#__system___basic_print_string
1112c     00 12 06 F6 | 	mov	arg01, #0
11130     0F 15 02 F6 | 	mov	arg02, local01
11134     00 16 06 F6 | 	mov	arg03, #0
11138     1C 57 B0 FD | 	call	#__system___basic_print_string
1113c     00 12 06 F6 | 	mov	arg01, #0
11140     0A 14 06 F6 | 	mov	arg02, #10
11144     00 16 06 F6 | 	mov	arg03, #0
11148     B4 56 B0 FD | 	call	#__system___basic_print_char
1114c     00 12 06 F6 | 	mov	arg01, #0
11150     C4 9F B0 FD | 	call	#__system___getiolock_0362
11154     FD 00 68 FC | 	wrlong	#0, result1
11158     00 12 06 F6 | 	mov	arg01, #0
1115c     00 14 06 F6 | 	mov	arg02, #0
11160     EC A0 B0 FD | 	call	#__system___basic_dir
11164     FD 1E 02 F6 | 	mov	local01, result1
11168     60 FF 9F FD | 	jmp	#LR__1450
1116c                 | LR__1451
1116c     28 01 00 FF 
11170     C8 13 06 F6 | 	mov	arg01, ##@LR__4387
11174     21 14 06 F6 | 	mov	arg02, #33
11178     D4 A0 B0 FD | 	call	#__system___basic_dir
1117c     FD 1E 02 F6 | 	mov	local01, result1
11180                 | ' 
11180                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
11180                 | ' do while filename <> "" and filename <> nil
11180                 | LR__1452
11180     00 20 06 F6 | 	mov	local02, #0
11184     28 01 00 FF 
11188     CA 15 06 F6 | 	mov	arg02, ##@LR__4388
1118c     0F 13 02 F6 | 	mov	arg01, local01
11190     F8 49 B0 FD | 	call	#__system___string_cmp
11194     00 FA 0D F2 | 	cmp	result1, #0 wz
11198     00 20 26 56 |  if_ne	not	local02, #0
1119c     00 22 06 F6 | 	mov	local03, #0
111a0     0F 13 02 F6 | 	mov	arg01, local01
111a4     00 14 06 F6 | 	mov	arg02, #0
111a8     E0 49 B0 FD | 	call	#__system___string_cmp
111ac     00 FA 0D F2 | 	cmp	result1, #0 wz
111b0     00 22 26 56 |  if_ne	not	local03, #0
111b4     11 21 CA F7 | 	test	local02, local03 wz
111b8     54 01 90 AD |  if_e	jmp	#LR__1456
111bc                 | '   print filename
111bc     00 12 06 F6 | 	mov	arg01, #0
111c0     54 9F B0 FD | 	call	#__system___getiolock_0362
111c4     FD 12 02 F6 | 	mov	arg01, result1
111c8     98 49 B0 FD | 	call	#__system___lockmem
111cc     00 12 06 F6 | 	mov	arg01, #0
111d0     0F 15 02 F6 | 	mov	arg02, local01
111d4     00 16 06 F6 | 	mov	arg03, #0
111d8     7C 56 B0 FD | 	call	#__system___basic_print_string
111dc     00 12 06 F6 | 	mov	arg01, #0
111e0     0A 14 06 F6 | 	mov	arg02, #10
111e4     00 16 06 F6 | 	mov	arg03, #0
111e8     14 56 B0 FD | 	call	#__system___basic_print_char
111ec     00 12 06 F6 | 	mov	arg01, #0
111f0     24 9F B0 FD | 	call	#__system___getiolock_0362
111f4     FD 00 68 FC | 	wrlong	#0, result1
111f8     00 12 06 F6 | 	mov	arg01, #0
111fc     00 14 06 F6 | 	mov	arg02, #0
11200     4C A0 B0 FD | 	call	#__system___basic_dir
11204     FD 1E 02 F6 | 	mov	local01, result1
11208                 | '   filename = dir$()      ' continue scan
11208                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
11208                 | ' return cursor_y
11208     3A E4 05 F1 | 	add	objptr, #58
1120c     F2 FA C1 FA | 	rdbyte	result1, objptr
11210     3A E4 85 F1 | 	sub	objptr, #58
11214     22 FA 0D F2 | 	cmp	result1, #34 wz
11218     64 FF 9F 5D |  if_ne	jmp	#LR__1452
1121c                 | '     print "-----more, press any key";
1121c     00 12 06 F6 | 	mov	arg01, #0
11220     F4 9E B0 FD | 	call	#__system___getiolock_0362
11224     FD 12 02 F6 | 	mov	arg01, result1
11228     38 49 B0 FD | 	call	#__system___lockmem
1122c     28 01 00 FF 
11230     CB 15 06 F6 | 	mov	arg02, ##@LR__4389
11234     00 12 06 F6 | 	mov	arg01, #0
11238     00 16 06 F6 | 	mov	arg03, #0
1123c     18 56 B0 FD | 	call	#__system___basic_print_string
11240     00 12 06 F6 | 	mov	arg01, #0
11244     D0 9E B0 FD | 	call	#__system___getiolock_0362
11248     FD 00 68 FC | 	wrlong	#0, result1
1124c                 | '     do 
1124c                 | LR__1453
1124c     B8 41 B0 FD | 	call	#_usbnew_spin2_get_key
11250     00 FA 0D F2 | 	cmp	result1, #0 wz
11254     F4 FF 9F 5D |  if_ne	jmp	#LR__1453
11258                 | '     do
11258                 | LR__1454
11258     AC 41 B0 FD | 	call	#_usbnew_spin2_get_key
1125c     00 FA 0D F2 | 	cmp	result1, #0 wz
11260     F4 FF 9F AD |  if_e	jmp	#LR__1454
11264                 | '       if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
11264     78 00 00 FF 
11268     B4 E5 05 F1 | 	add	objptr, ##61876
1126c     F2 20 02 FB | 	rdlong	local02, objptr
11270     78 00 00 FF 
11274     B4 E5 85 F1 | 	sub	objptr, ##61876
11278     01 20 0E F2 | 	cmp	local02, #1 wz
1127c     44 00 90 5D |  if_ne	jmp	#LR__1455
11280     01 00 00 FF 
11284     00 EA 05 F1 | 	add	ptr__dat__, ##512
11288     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1128c     01 00 00 FF 
11290     00 EA 85 F1 | 	sub	ptr__dat__, ##512
11294     07 12 06 F6 | 	mov	arg01, #7
11298     56 00 00 FF 
1129c     44 16 06 F6 | 	mov	arg03, ##44100
112a0     0E 18 C6 F9 | 	decod	arg04, #14
112a4     03 00 00 FF 
112a8     94 1A 06 F6 | 	mov	arg05, ##1684
112ac     01 1C 66 F6 | 	neg	arg06, #1
112b0     0B 00 00 FF 
112b4     C0 E4 05 F1 | 	add	objptr, ##5824
112b8     74 44 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
112bc     0B 00 00 FF 
112c0     C0 E4 85 F1 | 	sub	objptr, ##5824
112c4                 | LR__1455
112c4     00 12 06 F6 | 	mov	arg01, #0
112c8     23 14 06 F6 | 	mov	arg02, #35
112cc     0C 35 B0 FD | 	call	#_hg010b_spin2_setcursorpos
112d0                 | '     position 0,35: print "                             ";: position 4,35  
112d0     00 12 06 F6 | 	mov	arg01, #0
112d4     40 9E B0 FD | 	call	#__system___getiolock_0362
112d8     FD 12 02 F6 | 	mov	arg01, result1
112dc     84 48 B0 FD | 	call	#__system___lockmem
112e0     28 01 00 FF 
112e4     E4 15 06 F6 | 	mov	arg02, ##@LR__4390
112e8     00 12 06 F6 | 	mov	arg01, #0
112ec     00 16 06 F6 | 	mov	arg03, #0
112f0     64 55 B0 FD | 	call	#__system___basic_print_string
112f4     00 12 06 F6 | 	mov	arg01, #0
112f8     1C 9E B0 FD | 	call	#__system___getiolock_0362
112fc     FD 00 68 FC | 	wrlong	#0, result1
11300     04 12 06 F6 | 	mov	arg01, #4
11304     23 14 06 F6 | 	mov	arg02, #35
11308     D0 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1130c     70 FE 9F FD | 	jmp	#LR__1452
11310                 | LR__1456
11310     A7 F0 03 F6 | 	mov	ptra, fp
11314     B2 00 A0 FD | 	call	#popregs_
11318                 | _do_dir_ret
11318     2D 00 64 FD | 	ret
1131c                 | 
1131c                 | ' 
1131c                 | ' sub do_if
1131c                 | _do_if
1131c     05 4A 05 F6 | 	mov	COUNT_, #5
11320     A8 00 A0 FD | 	call	#pushregs_
11324     84 76 BF FD | 	call	#_pop
11328     FD 1E 0A F6 | 	mov	local01, result1 wz
1132c     FE 20 02 F6 | 	mov	local02, result2
11330     FF 22 02 F6 | 	mov	local03, result3
11334                 | ' t1=pop()
11334                 | ' ' if uresult=0, jump over else
11334                 | ' if t1.result.uresult = 0 then 
11334     BC 00 90 5D |  if_ne	jmp	#LR__1462
11338                 | '   for i=lineptr_e to lineptr-1
11338     69 00 00 FF 
1133c     54 E4 05 F1 | 	add	objptr, ##53844
11340     F2 24 02 FB | 	rdlong	local04, objptr
11344     04 E4 85 F1 | 	sub	objptr, #4
11348     F2 26 02 FB | 	rdlong	local05, objptr
1134c     69 00 00 FF 
11350     50 E4 85 F1 | 	sub	objptr, ##53840
11354                 | LR__1460
11354     13 25 52 F2 | 	cmps	local04, local05 wc
11358     78 00 90 3D |  if_ae	jmp	#LR__1461
1135c     12 FF 01 F6 | 	mov	result3, local04
11360     01 FE 65 F0 | 	shl	result3, #1
11364     12 FF 01 F1 | 	add	result3, local04
11368     02 FE 65 F0 | 	shl	result3, #2
1136c     66 00 00 FF 
11370     50 E4 05 F1 | 	add	objptr, ##52304
11374     F2 FE 01 F1 | 	add	result3, objptr
11378     FF 1E 02 FB | 	rdlong	local01, result3
1137c     04 FE 05 F1 | 	add	result3, #4
11380     FF FC 01 FB | 	rdlong	result2, result3
11384     12 FF 01 F6 | 	mov	result3, local04
11388     01 FE 65 F0 | 	shl	result3, #1
1138c     12 FF 01 F1 | 	add	result3, local04
11390     02 FE 65 F0 | 	shl	result3, #2
11394     F2 FE 01 F1 | 	add	result3, objptr
11398     08 FE 05 F1 | 	add	result3, #8
1139c     FF FE 01 FB | 	rdlong	result3, result3
113a0     FE 20 02 F6 | 	mov	local02, result2
113a4     FF 22 02 F6 | 	mov	local03, result3
113a8                 | '     t1=compiledline(i)
113a8                 | '     if t1.result_type=token_else then lineptr_e=i : return
113a8     5A 22 0E F2 | 	cmp	local03, #90 wz
113ac     66 00 00 FF 
113b0     50 E4 85 F1 | 	sub	objptr, ##52304
113b4     69 00 00 AF 
113b8     54 E4 05 A1 |  if_e	add	objptr, ##53844
113bc     F2 24 62 AC |  if_e	wrlong	local04, objptr
113c0     69 00 00 AF 
113c4     54 E4 85 A1 |  if_e	sub	objptr, ##53844
113c8     28 00 90 AD |  if_e	jmp	#LR__1463
113cc     01 24 06 F1 | 	add	local04, #1
113d0     80 FF 9F FD | 	jmp	#LR__1460
113d4                 | LR__1461
113d4     69 00 00 FF 
113d8     50 E4 05 F1 | 	add	objptr, ##53840
113dc     F2 26 02 FB | 	rdlong	local05, objptr
113e0     01 26 86 F1 | 	sub	local05, #1
113e4     04 E4 05 F1 | 	add	objptr, #4
113e8     F2 26 62 FC | 	wrlong	local05, objptr
113ec     69 00 00 FF 
113f0     54 E4 85 F1 | 	sub	objptr, ##53844
113f4                 | LR__1462
113f4                 | LR__1463
113f4     A7 F0 03 F6 | 	mov	ptra, fp
113f8     B2 00 A0 FD | 	call	#popregs_
113fc                 | _do_if_ret
113fc     2D 00 64 FD | 	ret
11400                 | 
11400                 | ' 
11400                 | ' sub do_else
11400                 | _do_else
11400     69 00 00 FF 
11404     50 E4 05 F1 | 	add	objptr, ##53840
11408     F2 00 02 FB | 	rdlong	_var01, objptr
1140c     01 00 86 F1 | 	sub	_var01, #1
11410     04 E4 05 F1 | 	add	objptr, #4
11414     F2 00 62 FC | 	wrlong	_var01, objptr
11418     69 00 00 FF 
1141c     54 E4 85 F1 | 	sub	objptr, ##53844
11420                 | _do_else_ret
11420     2D 00 64 FD | 	ret
11424                 | 
11424                 | ' 
11424                 | ' 
11424                 | ' 
11424                 | ' sub do_nothing
11424                 | _do_nothing
11424                 | _do_nothing_ret
11424     2D 00 64 FD | 	ret
11428                 | 
11428                 | ' 
11428                 | ' sub do_brun
11428                 | _do_brun
11428     08 4A 05 F6 | 	mov	COUNT_, #8
1142c     A8 00 A0 FD | 	call	#pushregs_
11430     78 75 BF FD | 	call	#_pop
11434     FE 1A 02 F6 | 	mov	arg05, result2
11438     FF 18 02 F6 | 	mov	arg04, result3
1143c     FD 1E 02 F6 | 	mov	local01, result1
11440     0D 21 02 F6 | 	mov	local02, arg05
11444     0C 23 02 F6 | 	mov	local03, arg04
11448                 | ' 
11448                 | ' t1=pop() 
11448                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string
11448     2B 22 0E F2 | 	cmp	local03, #43 wz
1144c     10 00 90 5D |  if_ne	jmp	#LR__1470
11450     0F 13 02 F6 | 	mov	arg01, local01
11454     6C 9B BF FD | 	call	#_do_convertstring
11458     FD 1E 02 F6 | 	mov	local01, result1
1145c     1F 22 06 F6 | 	mov	local03, #31
11460                 | LR__1470
11460                 | ' if t1.result_type=result_string then
11460     1F 22 0E F2 | 	cmp	local03, #31 wz
11464     EC 01 90 5D |  if_ne	jmp	#LR__1474
11468     0F 25 02 F6 | 	mov	local04, local01
1146c                 | '   filename=t1.result.sresult
1146c                 | '   if left$(filename,1)="/" then 
1146c     12 13 02 F6 | 	mov	arg01, local04
11470     01 14 06 F6 | 	mov	arg02, #1
11474     FC 66 B0 FD | 	call	#__system__Left_S
11478     FD 12 02 F6 | 	mov	arg01, result1
1147c     29 01 00 FF 
11480     02 14 06 F6 | 	mov	arg02, ##@LR__4391
11484     04 47 B0 FD | 	call	#__system___string_cmp
11488     00 FA 0D F2 | 	cmp	result1, #0 wz
1148c     12 27 02 A6 |  if_e	mov	local05, local04
11490     14 00 90 AD |  if_e	jmp	#LR__1471
11494     29 01 00 FF 
11498     04 12 06 F6 | 	mov	arg01, ##@LR__4392
1149c     12 15 02 F6 | 	mov	arg02, local04
114a0     1C 47 B0 FD | 	call	#__system___string_concat
114a4     FD 26 02 F6 | 	mov	local05, result1
114a8                 | LR__1471
114a8                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
114a8                 | '   open fullfilename for input as #9
114a8     09 12 06 F6 | 	mov	arg01, #9
114ac     13 15 02 F6 | 	mov	arg02, local05
114b0     00 16 06 F6 | 	mov	arg03, #0
114b4     B0 52 B0 FD | 	call	#__system___basic_open_string
114b8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
114bc     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
114c0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
114c4     FD 28 0A F6 | 	mov	local06, result1 wz
114c8                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
114c8     8C 00 90 AD |  if_e	jmp	#LR__1472
114cc     00 12 06 F6 | 	mov	arg01, #0
114d0     44 9C B0 FD | 	call	#__system___getiolock_0362
114d4     FD 12 02 F6 | 	mov	arg01, result1
114d8     88 46 B0 FD | 	call	#__system___lockmem
114dc     29 01 00 FF 
114e0     0D 14 06 F6 | 	mov	arg02, ##@LR__4393
114e4     00 12 06 F6 | 	mov	arg01, #0
114e8     00 16 06 F6 | 	mov	arg03, #0
114ec     68 53 B0 FD | 	call	#__system___basic_print_string
114f0     00 12 06 F6 | 	mov	arg01, #0
114f4     14 15 02 F6 | 	mov	arg02, local06
114f8     00 16 06 F6 | 	mov	arg03, #0
114fc     0A 18 06 F6 | 	mov	arg04, #10
11500     98 53 B0 FD | 	call	#__system___basic_print_integer
11504     29 01 00 FF 
11508     1B 14 06 F6 | 	mov	arg02, ##@LR__4394
1150c     00 12 06 F6 | 	mov	arg01, #0
11510     00 16 06 F6 | 	mov	arg03, #0
11514     40 53 B0 FD | 	call	#__system___basic_print_string
11518     14 13 02 F6 | 	mov	arg01, local06
1151c     44 6C B0 FD | 	call	#__system___strerror
11520     FD 14 02 F6 | 	mov	arg02, result1
11524     00 12 06 F6 | 	mov	arg01, #0
11528     00 16 06 F6 | 	mov	arg03, #0
1152c     28 53 B0 FD | 	call	#__system___basic_print_string
11530     00 12 06 F6 | 	mov	arg01, #0
11534     0A 14 06 F6 | 	mov	arg02, #10
11538     00 16 06 F6 | 	mov	arg03, #0
1153c     C0 52 B0 FD | 	call	#__system___basic_print_char
11540     00 12 06 F6 | 	mov	arg01, #0
11544     D0 9B B0 FD | 	call	#__system___getiolock_0362
11548     FD 00 68 FC | 	wrlong	#0, result1
1154c     09 12 06 F6 | 	mov	arg01, #9
11550     F4 91 B0 FD | 	call	#__system__close
11554     FC 00 90 FD | 	jmp	#LR__1475
11558                 | LR__1472
11558     01 2A 06 F6 | 	mov	local07, #1
1155c     00 2C 06 F6 | 	mov	local08, #0
11560                 | '   do
11560                 | LR__1473
11560                 | '     get #9,pos,block(0),1024,r : pos+=r	
11560     76 00 00 FF 
11564     80 E5 05 F1 | 	add	objptr, ##60800
11568     F2 16 02 F6 | 	mov	arg03, objptr
1156c     76 00 00 FF 
11570     80 E5 85 F1 | 	sub	objptr, ##60800
11574     09 12 06 F6 | 	mov	arg01, #9
11578     15 15 02 F6 | 	mov	arg02, local07
1157c     0A 18 C6 F9 | 	decod	arg04, #10
11580     01 1A 06 F6 | 	mov	arg05, #1
11584     E0 53 B0 FD | 	call	#__system___basic_get
11588     FD 28 02 F6 | 	mov	local06, result1
1158c     FD 2A 02 F1 | 	add	local07, result1
11590     76 00 00 FF 
11594     80 E5 05 F1 | 	add	objptr, ##60800
11598     F2 12 02 F6 | 	mov	arg01, objptr
1159c     16 15 02 F6 | 	mov	arg02, local08
115a0     0A 16 C6 F9 | 	decod	arg03, #10
115a4     6B 00 00 FF 
115a8     C0 E4 85 F1 | 	sub	objptr, ##54976
115ac     64 3B B0 FD | 	call	#_psram_spin2_write
115b0     0B 00 00 FF 
115b4     C0 E4 85 F1 | 	sub	objptr, ##5824
115b8     14 2D 02 F1 | 	add	local08, local06
115bc     02 00 00 FF 
115c0     00 28 0E F2 | 	cmp	local06, ##1024 wz
115c4     E0 03 00 AF 
115c8     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
115cc     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1473
115d0     55 00 00 FF 
115d4     D0 E5 05 F1 | 	add	objptr, ##43984
115d8     F2 12 02 FB | 	rdlong	arg01, objptr
115dc     03 12 62 FD | 	cogstop	arg01
115e0     04 E4 05 F1 | 	add	objptr, #4
115e4     F2 12 02 FB | 	rdlong	arg01, objptr
115e8     03 12 62 FD | 	cogstop	arg01
115ec     04 E4 05 F1 | 	add	objptr, #4
115f0     F2 12 02 FB | 	rdlong	arg01, objptr
115f4     03 12 62 FD | 	cogstop	arg01
115f8     22 00 00 FF 
115fc     E0 E5 05 F1 | 	add	objptr, ##17888
11600     F2 12 02 FB | 	rdlong	arg01, objptr
11604     03 12 62 FD | 	cogstop	arg01
11608     09 00 00 FF 
1160c     74 EB 05 F1 | 	add	ptr__dat__, ##4980
11610     F5 14 02 F6 | 	mov	arg02, ptr__dat__
11614     09 00 00 FF 
11618     74 EB 85 F1 | 	sub	ptr__dat__, ##4980
1161c     22 00 00 FF 
11620     D8 E5 85 F1 | 	sub	objptr, ##17880
11624     1E 2C 06 F6 | 	mov	local08, #30
11628     28 E4 61 FD | 	setq	objptr
1162c     0A 2D F2 FC | 	coginit	local08, arg02 wc
11630     01 2C 66 C6 |  if_b	neg	local08, #1
11634     24 00 00 FF 
11638     DC E4 05 F1 | 	add	objptr, ##18652
1163c     F2 2C 62 FC | 	wrlong	local08, objptr
11640     7A 00 00 FF 
11644     BC E4 85 F1 | 	sub	objptr, ##62652
11648     00 12 06 F6 | 	mov	arg01, #0
1164c     01 12 62 FD | 	cogid	arg01
11650     03 12 62 FD | 	cogstop	arg01
11654                 | LR__1474
11654                 | LR__1475
11654     A7 F0 03 F6 | 	mov	ptra, fp
11658     B2 00 A0 FD | 	call	#popregs_
1165c                 | _do_brun_ret
1165c     2D 00 64 FD | 	ret
11660                 | 
11660                 | ' 
11660                 | ' 
11660                 | ' sub do_mouse
11660                 | _do_mouse
11660     48 73 BF FD | 	call	#_pop
11664     00 FA 4D F2 | 	cmps	result1, #0 wz
11668                 | ' 
11668                 | ' t1=pop()
11668                 | ' 
11668                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
11668     14 00 90 5D |  if_ne	jmp	#LR__1480
1166c     10 12 06 F6 | 	mov	arg01, #16
11670     00 14 06 F6 | 	mov	arg02, #0
11674     00 16 06 F6 | 	mov	arg03, #0
11678     44 25 B0 FD | 	call	#_hg010b_spin2_setspritesize
1167c     10 00 90 FD | 	jmp	#LR__1481
11680                 | LR__1480
11680     10 12 06 F6 | 	mov	arg01, #16
11684     20 14 06 F6 | 	mov	arg02, #32
11688     20 16 06 F6 | 	mov	arg03, #32
1168c     30 25 B0 FD | 	call	#_hg010b_spin2_setspritesize
11690                 | LR__1481
11690                 | _do_mouse_ret
11690     2D 00 64 FD | 	ret
11694                 | 
11694                 | ' 
11694                 | ' sub do_cursor
11694                 | _do_cursor
11694     14 73 BF FD | 	call	#_pop
11698     00 FA 4D F2 | 	cmps	result1, #0 wz
1169c                 | ' 
1169c                 | ' t1=pop()
1169c                 | ' 
1169c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1169c     14 00 90 5D |  if_ne	jmp	#LR__1490
116a0     11 12 06 F6 | 	mov	arg01, #17
116a4     00 14 06 F6 | 	mov	arg02, #0
116a8     00 16 06 F6 | 	mov	arg03, #0
116ac     10 25 B0 FD | 	call	#_hg010b_spin2_setspritesize
116b0     10 00 90 FD | 	jmp	#LR__1491
116b4                 | LR__1490
116b4     11 12 06 F6 | 	mov	arg01, #17
116b8     08 14 06 F6 | 	mov	arg02, #8
116bc     10 16 06 F6 | 	mov	arg03, #16
116c0     FC 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
116c4                 | LR__1491
116c4                 | _do_cursor_ret
116c4     2D 00 64 FD | 	ret
116c8                 | 
116c8                 | ' 
116c8                 | ' 
116c8                 | ' sub do_click
116c8                 | _do_click
116c8     E0 72 BF FD | 	call	#_pop
116cc     00 FA 4D F2 | 	cmps	result1, #0 wz
116d0                 | ' 
116d0                 | ' t1=pop()
116d0                 | ' 
116d0                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
116d0     78 00 00 AF 
116d4     B4 E5 05 A1 |  if_e	add	objptr, ##61876
116d8     F2 00 68 AC |  if_e	wrlong	#0, objptr
116dc     78 00 00 FF 
116e0     B4 E5 C5 F3 | 	sumz	objptr, ##61876
116e4     F2 02 68 5C |  if_ne	wrlong	#1, objptr
116e8     78 00 00 5F 
116ec     B4 E5 85 51 |  if_ne	sub	objptr, ##61876
116f0                 | _do_click_ret
116f0     2D 00 64 FD | 	ret
116f4                 | 
116f4                 | ' 
116f4                 | ' 
116f4                 | ' sub do_beep
116f4                 | _do_beep
116f4     02 4A 05 F6 | 	mov	COUNT_, #2
116f8     A8 00 A0 FD | 	call	#pushregs_
116fc     20 F0 07 F1 | 	add	ptra, #32
11700     A8 72 BF FD | 	call	#_pop
11704     FD 1E 02 F6 | 	mov	local01, result1
11708     FE 1C 02 F6 | 	mov	arg06, result2
1170c     FF 20 02 F6 | 	mov	local02, result3
11710     0C 4E 05 F1 | 	add	fp, #12
11714     A7 1E 62 FC | 	wrlong	local01, fp
11718     04 4E 05 F1 | 	add	fp, #4
1171c     A7 1C 62 FC | 	wrlong	arg06, fp
11720     04 4E 05 F1 | 	add	fp, #4
11724     A7 20 62 FC | 	wrlong	local02, fp
11728     14 4E 85 F1 | 	sub	fp, #20
1172c     7C 72 BF FD | 	call	#_pop
11730     A7 FA 61 FC | 	wrlong	result1, fp
11734     04 4E 05 F1 | 	add	fp, #4
11738     A7 FC 61 FC | 	wrlong	result2, fp
1173c     04 4E 05 F1 | 	add	fp, #4
11740     A7 FE 61 FC | 	wrlong	result3, fp
11744                 | ' 
11744                 | ' 
11744                 | ' 
11744                 | ' t2=pop()
11744                 | ' t1=pop()
11744                 | ' 
11744                 | ' 
11744                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
11744     08 4E 85 F1 | 	sub	fp, #8
11748     1C FE 0D F2 | 	cmp	result3, #28 wz
1174c     08 4E 05 51 |  if_ne	add	fp, #8
11750     A7 20 02 5B |  if_ne	rdlong	local02, fp
11754     08 4E 85 51 |  if_ne	sub	fp, #8
11758     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1175c     A7 1E 02 AB |  if_e	rdlong	local01, fp
11760     18 4E 05 A1 |  if_e	add	fp, #24
11764     A7 1E 62 AC |  if_e	wrlong	local01, fp
11768     18 4E 85 A1 |  if_e	sub	fp, #24
1176c     14 00 90 AD |  if_e	jmp	#LR__1500
11770     A7 12 02 F6 | 	mov	arg01, fp
11774     E8 D3 BF FD | 	call	#_converttoint
11778     18 4E 05 F1 | 	add	fp, #24
1177c     A7 FA 61 FC | 	wrlong	result1, fp
11780     18 4E 85 F1 | 	sub	fp, #24
11784                 | LR__1500
11784     1C 4E 05 F1 | 	add	fp, #28
11788     A7 FE 48 FC | 	wrbyte	#127, fp
1178c     01 4E 05 F1 | 	add	fp, #1
11790     A7 00 49 FC | 	wrbyte	#128, fp
11794     01 4E 85 F1 | 	sub	fp, #1
11798     A7 14 02 F6 | 	mov	arg02, fp
1179c     04 4E 85 F1 | 	sub	fp, #4
117a0     A7 16 02 FB | 	rdlong	arg03, fp
117a4     18 4E 85 F1 | 	sub	fp, #24
117a8     01 16 66 F0 | 	shl	arg03, #1
117ac     07 12 06 F6 | 	mov	arg01, #7
117b0     0E 18 C6 F9 | 	decod	arg04, #14
117b4     02 1A 06 F6 | 	mov	arg05, #2
117b8     00 1C 06 F6 | 	mov	arg06, #0
117bc     0B 00 00 FF 
117c0     C0 E4 05 F1 | 	add	objptr, ##5824
117c4     04 40 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
117c8     0B 00 00 FF 
117cc     C0 E4 85 F1 | 	sub	objptr, ##5824
117d0     0C 4E 05 F1 | 	add	fp, #12
117d4     A7 12 02 F6 | 	mov	arg01, fp
117d8     0C 4E 85 F1 | 	sub	fp, #12
117dc     64 72 BF FD | 	call	#_push
117e0     F4 F6 BF FD | 	call	#_do_waitms
117e4     07 12 06 F6 | 	mov	arg01, #7
117e8     0B 00 00 FF 
117ec     C0 E4 05 F1 | 	add	objptr, ##5824
117f0     8C 40 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
117f4     0B 00 00 FF 
117f8     C0 E4 85 F1 | 	sub	objptr, ##5824
117fc     A7 F0 03 F6 | 	mov	ptra, fp
11800     B2 00 A0 FD | 	call	#popregs_
11804                 | _do_beep_ret
11804     2D 00 64 FD | 	ret
11808                 | 
11808                 | ' 
11808                 | ' sub do_no_command
11808                 | _do_no_command
11808     17 12 06 F6 | 	mov	arg01, #23
1180c     F0 0D B0 FD | 	call	#_printerror
11810                 | _do_no_command_ret
11810     2D 00 64 FD | 	ret
11814                 | 
11814                 | ' 
11814                 | ' sub do_negative
11814                 | _do_negative
11814     02 4A 05 F6 | 	mov	COUNT_, #2
11818     A8 00 A0 FD | 	call	#pushregs_
1181c     0C F0 07 F1 | 	add	ptra, #12
11820     88 71 BF FD | 	call	#_pop
11824     FF 1E 02 F6 | 	mov	local01, result3
11828     A7 FA 61 FC | 	wrlong	result1, fp
1182c     04 4E 05 F1 | 	add	fp, #4
11830     A7 FC 61 FC | 	wrlong	result2, fp
11834     04 4E 05 F1 | 	add	fp, #4
11838     A7 1E 62 FC | 	wrlong	local01, fp
1183c                 | ' t1=pop()
1183c                 | ' if t1.result_type=result_int then 
1183c     08 4E 85 F1 | 	sub	fp, #8
11840     1C 1E 0E F2 | 	cmp	local01, #28 wz
11844     A7 20 02 AB |  if_e	rdlong	local02, fp
11848     10 1F 62 A6 |  if_e	neg	local01, local02
1184c     A7 1E 62 AC |  if_e	wrlong	local01, fp
11850     5C 00 90 AD |  if_e	jmp	#LR__1512
11854     08 4E 05 F1 | 	add	fp, #8
11858     A7 1E 02 FB | 	rdlong	local01, fp
1185c     08 4E 85 F1 | 	sub	fp, #8
11860     1D 1E 0E F2 | 	cmp	local01, #29 wz
11864     1C 00 90 5D |  if_ne	jmp	#LR__1510
11868     A7 20 02 FB | 	rdlong	local02, fp
1186c     10 1F 62 F6 | 	neg	local01, local02
11870     A7 1E 62 FC | 	wrlong	local01, fp
11874     08 4E 05 F1 | 	add	fp, #8
11878     A7 38 68 FC | 	wrlong	#28, fp
1187c     08 4E 85 F1 | 	sub	fp, #8
11880     2C 00 90 FD | 	jmp	#LR__1511
11884                 | LR__1510
11884     08 4E 05 F1 | 	add	fp, #8
11888     A7 1E 02 FB | 	rdlong	local01, fp
1188c     08 4E 85 F1 | 	sub	fp, #8
11890     1E 1E 0E F2 | 	cmp	local01, #30 wz
11894     A7 FA 01 AB |  if_e	rdlong	result1, fp
11898     1F FA E5 A4 |  if_e	bitnot	result1, #31
1189c     A7 FA 61 AC |  if_e	wrlong	result1, fp
118a0     08 4E 05 51 |  if_ne	add	fp, #8
118a4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
118a8     08 4E 85 51 |  if_ne	sub	fp, #8
118ac     A7 50 68 5C |  if_ne	wrlong	#40, fp
118b0                 | LR__1511
118b0                 | LR__1512
118b0     A7 12 02 F6 | 	mov	arg01, fp
118b4     8C 71 BF FD | 	call	#_push
118b8     A7 F0 03 F6 | 	mov	ptra, fp
118bc     B2 00 A0 FD | 	call	#popregs_
118c0                 | _do_negative_ret
118c0     2D 00 64 FD | 	ret
118c4                 | 
118c4                 | ' 
118c4                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
118c4                 | ' 
118c4                 | ' ''----------------------------------------------------------------------------------------------------
118c4                 | ' ''------------------ Initialization procedures -------------------------------------------------------
118c4                 | ' ''----------------------------------------------------------------------------------------------------
118c4                 | ' 
118c4                 | ' ''--------------------------- Command function pointers
118c4                 | ' 
118c4                 | ' sub init_commands
118c4                 | _init_commands
118c4                 | ' 
118c4                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
118c4     00 00 06 F6 | 	mov	_var01, #0
118c8     97 16 48 FB | 	callpa	#(@LR__1521-@LR__1520)>>2,fcache_load_ptr_
118cc                 | LR__1520
118cc     00 FB 01 F6 | 	mov	result1, _var01
118d0     02 FA 65 F0 | 	shl	result1, #2
118d4     62 00 00 FF 
118d8     34 E4 05 F1 | 	add	objptr, ##50228
118dc     F2 FA 01 F1 | 	add	result1, objptr
118e0     62 00 00 FF 
118e4     34 E4 85 F1 | 	sub	objptr, ##50228
118e8     FD E4 61 FC | 	wrlong	objptr, result1
118ec     01 00 06 F1 | 	add	_var01, #1
118f0     00 01 56 F2 | 	cmps	_var01, #256 wc
118f4     D4 FF 9F CD |  if_b	jmp	#LR__1520
118f8                 | LR__1521
118f8     F2 FA 01 F6 | 	mov	result1, objptr
118fc     14 FA 25 F4 | 	bith	result1, #20
11900     62 00 00 FF 
11904     38 E4 05 F1 | 	add	objptr, ##50232
11908     F2 FA 61 FC | 	wrlong	result1, objptr
1190c     62 00 00 FF 
11910     38 E4 85 F1 | 	sub	objptr, ##50232
11914     F2 FA 01 F6 | 	mov	result1, objptr
11918     15 FA 25 F4 | 	bith	result1, #21
1191c     62 00 00 FF 
11920     3C E4 05 F1 | 	add	objptr, ##50236
11924     F2 FA 61 FC | 	wrlong	result1, objptr
11928     62 00 00 FF 
1192c     3C E4 85 F1 | 	sub	objptr, ##50236
11930     F2 FA 01 F6 | 	mov	result1, objptr
11934     34 FA 25 F4 | 	bith	result1, #52
11938     62 00 00 FF 
1193c     40 E4 05 F1 | 	add	objptr, ##50240
11940     F2 FA 61 FC | 	wrlong	result1, objptr
11944     62 00 00 FF 
11948     40 E4 85 F1 | 	sub	objptr, ##50240
1194c     F2 FA 01 F6 | 	mov	result1, objptr
11950     16 FA 25 F4 | 	bith	result1, #22
11954     62 00 00 FF 
11958     48 E4 05 F1 | 	add	objptr, ##50248
1195c     F2 FA 61 FC | 	wrlong	result1, objptr
11960     62 00 00 FF 
11964     48 E4 85 F1 | 	sub	objptr, ##50248
11968     F2 FA 01 F6 | 	mov	result1, objptr
1196c     00 28 00 FF 
11970     00 FA 45 F5 | 	or	result1, ##5242880
11974     62 00 00 FF 
11978     4C E4 05 F1 | 	add	objptr, ##50252
1197c     F2 FA 61 FC | 	wrlong	result1, objptr
11980     62 00 00 FF 
11984     4C E4 85 F1 | 	sub	objptr, ##50252
11988     F2 FA 01 F6 | 	mov	result1, objptr
1198c     35 FA 25 F4 | 	bith	result1, #53
11990     62 00 00 FF 
11994     50 E4 05 F1 | 	add	objptr, ##50256
11998     F2 FA 61 FC | 	wrlong	result1, objptr
1199c     62 00 00 FF 
119a0     50 E4 85 F1 | 	sub	objptr, ##50256
119a4     F2 FA 01 F6 | 	mov	result1, objptr
119a8     54 FA 25 F4 | 	bith	result1, #84
119ac     62 00 00 FF 
119b0     54 E4 05 F1 | 	add	objptr, ##50260
119b4     F2 FA 61 FC | 	wrlong	result1, objptr
119b8     62 00 00 FF 
119bc     54 E4 85 F1 | 	sub	objptr, ##50260
119c0     F2 FA 01 F6 | 	mov	result1, objptr
119c4     17 FA 25 F4 | 	bith	result1, #23
119c8     62 00 00 FF 
119cc     58 E4 05 F1 | 	add	objptr, ##50264
119d0     F2 FA 61 FC | 	wrlong	result1, objptr
119d4     62 00 00 FF 
119d8     58 E4 85 F1 | 	sub	objptr, ##50264
119dc     F2 FA 01 F6 | 	mov	result1, objptr
119e0     00 48 00 FF 
119e4     00 FA 45 F5 | 	or	result1, ##9437184
119e8     62 00 00 FF 
119ec     5C E4 05 F1 | 	add	objptr, ##50268
119f0     F2 FA 61 FC | 	wrlong	result1, objptr
119f4     62 00 00 FF 
119f8     5C E4 85 F1 | 	sub	objptr, ##50268
119fc     F2 FA 01 F6 | 	mov	result1, objptr
11a00     00 50 00 FF 
11a04     00 FA 45 F5 | 	or	result1, ##10485760
11a08     62 00 00 FF 
11a0c     60 E4 05 F1 | 	add	objptr, ##50272
11a10     F2 FA 61 FC | 	wrlong	result1, objptr
11a14     62 00 00 FF 
11a18     60 E4 85 F1 | 	sub	objptr, ##50272
11a1c     F2 FA 01 F6 | 	mov	result1, objptr
11a20     00 58 00 FF 
11a24     00 FA 45 F5 | 	or	result1, ##11534336
11a28     62 00 00 FF 
11a2c     64 E4 05 F1 | 	add	objptr, ##50276
11a30     F2 FA 61 FC | 	wrlong	result1, objptr
11a34     62 00 00 FF 
11a38     64 E4 85 F1 | 	sub	objptr, ##50276
11a3c     F2 FA 01 F6 | 	mov	result1, objptr
11a40     36 FA 25 F4 | 	bith	result1, #54
11a44     62 00 00 FF 
11a48     78 E4 05 F1 | 	add	objptr, ##50296
11a4c     F2 FA 61 FC | 	wrlong	result1, objptr
11a50     62 00 00 FF 
11a54     78 E4 85 F1 | 	sub	objptr, ##50296
11a58     F2 FA 01 F6 | 	mov	result1, objptr
11a5c     00 68 00 FF 
11a60     00 FA 45 F5 | 	or	result1, ##13631488
11a64     62 00 00 FF 
11a68     A8 E4 05 F1 | 	add	objptr, ##50344
11a6c     F2 FA 61 FC | 	wrlong	result1, objptr
11a70     62 00 00 FF 
11a74     A8 E4 85 F1 | 	sub	objptr, ##50344
11a78     F2 FA 01 F6 | 	mov	result1, objptr
11a7c     00 68 00 FF 
11a80     00 FA 45 F5 | 	or	result1, ##13631488
11a84     62 00 00 FF 
11a88     A4 E4 05 F1 | 	add	objptr, ##50340
11a8c     F2 FA 61 FC | 	wrlong	result1, objptr
11a90     62 00 00 FF 
11a94     A4 E4 85 F1 | 	sub	objptr, ##50340
11a98     F2 FA 01 F6 | 	mov	result1, objptr
11a9c     00 68 00 FF 
11aa0     00 FA 45 F5 | 	or	result1, ##13631488
11aa4     62 00 00 FF 
11aa8     AC E4 05 F1 | 	add	objptr, ##50348
11aac     F2 FA 61 FC | 	wrlong	result1, objptr
11ab0     62 00 00 FF 
11ab4     AC E4 85 F1 | 	sub	objptr, ##50348
11ab8     F2 FA 01 F6 | 	mov	result1, objptr
11abc     00 68 00 FF 
11ac0     00 FA 45 F5 | 	or	result1, ##13631488
11ac4     62 00 00 FF 
11ac8     B0 E4 05 F1 | 	add	objptr, ##50352
11acc     F2 FA 61 FC | 	wrlong	result1, objptr
11ad0     62 00 00 FF 
11ad4     B0 E4 85 F1 | 	sub	objptr, ##50352
11ad8     F2 FA 01 F6 | 	mov	result1, objptr
11adc     00 68 00 FF 
11ae0     00 FA 45 F5 | 	or	result1, ##13631488
11ae4     62 00 00 FF 
11ae8     E0 E4 05 F1 | 	add	objptr, ##50400
11aec     F2 FA 61 FC | 	wrlong	result1, objptr
11af0     62 00 00 FF 
11af4     E0 E4 85 F1 | 	sub	objptr, ##50400
11af8     F2 FA 01 F6 | 	mov	result1, objptr
11afc     55 FA 25 F4 | 	bith	result1, #85
11b00     62 00 00 FF 
11b04     90 E4 05 F1 | 	add	objptr, ##50320
11b08     F2 FA 61 FC | 	wrlong	result1, objptr
11b0c     62 00 00 FF 
11b10     90 E4 85 F1 | 	sub	objptr, ##50320
11b14     F2 FA 01 F6 | 	mov	result1, objptr
11b18     00 68 00 FF 
11b1c     00 FA 45 F5 | 	or	result1, ##13631488
11b20     62 00 00 FF 
11b24     B4 E4 05 F1 | 	add	objptr, ##50356
11b28     F2 FA 61 FC | 	wrlong	result1, objptr
11b2c     62 00 00 FF 
11b30     B4 E4 85 F1 | 	sub	objptr, ##50356
11b34     F2 FA 01 F6 | 	mov	result1, objptr
11b38     00 68 00 FF 
11b3c     00 FA 45 F5 | 	or	result1, ##13631488
11b40     62 00 00 FF 
11b44     B8 E4 05 F1 | 	add	objptr, ##50360
11b48     F2 FA 61 FC | 	wrlong	result1, objptr
11b4c     62 00 00 FF 
11b50     B8 E4 85 F1 | 	sub	objptr, ##50360
11b54     F2 FA 01 F6 | 	mov	result1, objptr
11b58     00 68 00 FF 
11b5c     00 FA 45 F5 | 	or	result1, ##13631488
11b60     62 00 00 FF 
11b64     BC E4 05 F1 | 	add	objptr, ##50364
11b68     F2 FA 61 FC | 	wrlong	result1, objptr
11b6c     62 00 00 FF 
11b70     BC E4 85 F1 | 	sub	objptr, ##50364
11b74     F2 FA 01 F6 | 	mov	result1, objptr
11b78     74 FA 25 F4 | 	bith	result1, #116
11b7c     62 00 00 FF 
11b80     34 E5 05 F1 | 	add	objptr, ##50484
11b84     F2 FA 61 FC | 	wrlong	result1, objptr
11b88     62 00 00 FF 
11b8c     34 E5 85 F1 | 	sub	objptr, ##50484
11b90     F2 FA 01 F6 | 	mov	result1, objptr
11b94     18 FA 25 F4 | 	bith	result1, #24
11b98     62 00 00 FF 
11b9c     38 E5 05 F1 | 	add	objptr, ##50488
11ba0     F2 FA 61 FC | 	wrlong	result1, objptr
11ba4     62 00 00 FF 
11ba8     38 E5 85 F1 | 	sub	objptr, ##50488
11bac     F2 FA 01 F6 | 	mov	result1, objptr
11bb0     00 88 00 FF 
11bb4     00 FA 45 F5 | 	or	result1, ##17825792
11bb8     62 00 00 FF 
11bbc     3C E5 05 F1 | 	add	objptr, ##50492
11bc0     F2 FA 61 FC | 	wrlong	result1, objptr
11bc4     62 00 00 FF 
11bc8     3C E5 85 F1 | 	sub	objptr, ##50492
11bcc     F2 FA 01 F6 | 	mov	result1, objptr
11bd0     00 90 00 FF 
11bd4     00 FA 45 F5 | 	or	result1, ##18874368
11bd8     62 00 00 FF 
11bdc     40 E5 05 F1 | 	add	objptr, ##50496
11be0     F2 FA 61 FC | 	wrlong	result1, objptr
11be4     62 00 00 FF 
11be8     40 E5 85 F1 | 	sub	objptr, ##50496
11bec     F2 FA 01 F6 | 	mov	result1, objptr
11bf0     00 98 00 FF 
11bf4     00 FA 45 F5 | 	or	result1, ##19922944
11bf8     62 00 00 FF 
11bfc     44 E5 05 F1 | 	add	objptr, ##50500
11c00     F2 FA 61 FC | 	wrlong	result1, objptr
11c04     62 00 00 FF 
11c08     44 E5 85 F1 | 	sub	objptr, ##50500
11c0c     F2 FA 01 F6 | 	mov	result1, objptr
11c10     00 A0 00 FF 
11c14     00 FA 45 F5 | 	or	result1, ##20971520
11c18     62 00 00 FF 
11c1c     48 E5 05 F1 | 	add	objptr, ##50504
11c20     F2 FA 61 FC | 	wrlong	result1, objptr
11c24     62 00 00 FF 
11c28     48 E5 85 F1 | 	sub	objptr, ##50504
11c2c     F2 FA 01 F6 | 	mov	result1, objptr
11c30     00 A8 00 FF 
11c34     00 FA 45 F5 | 	or	result1, ##22020096
11c38     62 00 00 FF 
11c3c     4C E5 05 F1 | 	add	objptr, ##50508
11c40     F2 FA 61 FC | 	wrlong	result1, objptr
11c44     62 00 00 FF 
11c48     4C E5 85 F1 | 	sub	objptr, ##50508
11c4c     F2 FA 01 F6 | 	mov	result1, objptr
11c50     00 B0 00 FF 
11c54     00 FA 45 F5 | 	or	result1, ##23068672
11c58     62 00 00 FF 
11c5c     50 E5 05 F1 | 	add	objptr, ##50512
11c60     F2 FA 61 FC | 	wrlong	result1, objptr
11c64     62 00 00 FF 
11c68     50 E5 85 F1 | 	sub	objptr, ##50512
11c6c     F2 FA 01 F6 | 	mov	result1, objptr
11c70     00 B8 00 FF 
11c74     00 FA 45 F5 | 	or	result1, ##24117248
11c78     62 00 00 FF 
11c7c     54 E5 05 F1 | 	add	objptr, ##50516
11c80     F2 FA 61 FC | 	wrlong	result1, objptr
11c84     62 00 00 FF 
11c88     54 E5 85 F1 | 	sub	objptr, ##50516
11c8c     F2 FA 01 F6 | 	mov	result1, objptr
11c90     37 FA 25 F4 | 	bith	result1, #55
11c94     62 00 00 FF 
11c98     58 E5 05 F1 | 	add	objptr, ##50520
11c9c     F2 FA 61 FC | 	wrlong	result1, objptr
11ca0     62 00 00 FF 
11ca4     58 E5 85 F1 | 	sub	objptr, ##50520
11ca8     F2 FA 01 F6 | 	mov	result1, objptr
11cac     00 C8 00 FF 
11cb0     00 FA 45 F5 | 	or	result1, ##26214400
11cb4     62 00 00 FF 
11cb8     5C E5 05 F1 | 	add	objptr, ##50524
11cbc     F2 FA 61 FC | 	wrlong	result1, objptr
11cc0     62 00 00 FF 
11cc4     5C E5 85 F1 | 	sub	objptr, ##50524
11cc8     F2 FA 01 F6 | 	mov	result1, objptr
11ccc     00 D0 00 FF 
11cd0     00 FA 45 F5 | 	or	result1, ##27262976
11cd4     62 00 00 FF 
11cd8     60 E5 05 F1 | 	add	objptr, ##50528
11cdc     F2 FA 61 FC | 	wrlong	result1, objptr
11ce0     62 00 00 FF 
11ce4     60 E5 85 F1 | 	sub	objptr, ##50528
11ce8     F2 FA 01 F6 | 	mov	result1, objptr
11cec     00 D8 00 FF 
11cf0     00 FA 45 F5 | 	or	result1, ##28311552
11cf4     62 00 00 FF 
11cf8     64 E5 05 F1 | 	add	objptr, ##50532
11cfc     F2 FA 61 FC | 	wrlong	result1, objptr
11d00     62 00 00 FF 
11d04     64 E5 85 F1 | 	sub	objptr, ##50532
11d08     F2 FA 01 F6 | 	mov	result1, objptr
11d0c     56 FA 25 F4 | 	bith	result1, #86
11d10     62 00 00 FF 
11d14     68 E5 05 F1 | 	add	objptr, ##50536
11d18     F2 FA 61 FC | 	wrlong	result1, objptr
11d1c     62 00 00 FF 
11d20     68 E5 85 F1 | 	sub	objptr, ##50536
11d24     F2 FA 01 F6 | 	mov	result1, objptr
11d28     00 E8 00 FF 
11d2c     00 FA 45 F5 | 	or	result1, ##30408704
11d30     64 00 00 FF 
11d34     30 E4 05 F1 | 	add	objptr, ##51248
11d38     F2 FA 61 FC | 	wrlong	result1, objptr
11d3c     64 00 00 FF 
11d40     30 E4 85 F1 | 	sub	objptr, ##51248
11d44     F2 FA 01 F6 | 	mov	result1, objptr
11d48     75 FA 25 F4 | 	bith	result1, #117
11d4c     62 00 00 FF 
11d50     6C E5 05 F1 | 	add	objptr, ##50540
11d54     F2 FA 61 FC | 	wrlong	result1, objptr
11d58     62 00 00 FF 
11d5c     6C E5 85 F1 | 	sub	objptr, ##50540
11d60     F2 FA 01 F6 | 	mov	result1, objptr
11d64     94 FA 25 F4 | 	bith	result1, #148
11d68     62 00 00 FF 
11d6c     80 E5 05 F1 | 	add	objptr, ##50560
11d70     F2 FA 61 FC | 	wrlong	result1, objptr
11d74     62 00 00 FF 
11d78     80 E5 85 F1 | 	sub	objptr, ##50560
11d7c     F2 FA 01 F6 | 	mov	result1, objptr
11d80     19 FA 25 F4 | 	bith	result1, #25
11d84     62 00 00 FF 
11d88     70 E5 05 F1 | 	add	objptr, ##50544
11d8c     F2 FA 61 FC | 	wrlong	result1, objptr
11d90     62 00 00 FF 
11d94     70 E5 85 F1 | 	sub	objptr, ##50544
11d98     F2 FA 01 F6 | 	mov	result1, objptr
11d9c     00 08 01 FF 
11da0     00 FA 45 F5 | 	or	result1, ##34603008
11da4     62 00 00 FF 
11da8     8C E4 05 F1 | 	add	objptr, ##50316
11dac     F2 FA 61 FC | 	wrlong	result1, objptr
11db0     62 00 00 FF 
11db4     8C E4 85 F1 | 	sub	objptr, ##50316
11db8     F2 FA 01 F6 | 	mov	result1, objptr
11dbc     00 10 01 FF 
11dc0     00 FA 45 F5 | 	or	result1, ##35651584
11dc4     62 00 00 FF 
11dc8     74 E5 05 F1 | 	add	objptr, ##50548
11dcc     F2 FA 61 FC | 	wrlong	result1, objptr
11dd0     62 00 00 FF 
11dd4     74 E5 85 F1 | 	sub	objptr, ##50548
11dd8     F2 FA 01 F6 | 	mov	result1, objptr
11ddc     00 18 01 FF 
11de0     00 FA 45 F5 | 	or	result1, ##36700160
11de4     62 00 00 FF 
11de8     78 E5 05 F1 | 	add	objptr, ##50552
11dec     F2 FA 61 FC | 	wrlong	result1, objptr
11df0     62 00 00 FF 
11df4     78 E5 85 F1 | 	sub	objptr, ##50552
11df8     F2 FA 01 F6 | 	mov	result1, objptr
11dfc     00 20 01 FF 
11e00     00 FA 45 F5 | 	or	result1, ##37748736
11e04     62 00 00 FF 
11e08     7C E5 05 F1 | 	add	objptr, ##50556
11e0c     F2 FA 61 FC | 	wrlong	result1, objptr
11e10     62 00 00 FF 
11e14     7C E5 85 F1 | 	sub	objptr, ##50556
11e18     F2 FA 01 F6 | 	mov	result1, objptr
11e1c     00 28 01 FF 
11e20     00 FA 45 F5 | 	or	result1, ##38797312
11e24     62 00 00 FF 
11e28     88 E5 05 F1 | 	add	objptr, ##50568
11e2c     F2 FA 61 FC | 	wrlong	result1, objptr
11e30     62 00 00 FF 
11e34     88 E5 85 F1 | 	sub	objptr, ##50568
11e38     F2 FA 01 F6 | 	mov	result1, objptr
11e3c     00 30 01 FF 
11e40     00 FA 45 F5 | 	or	result1, ##39845888
11e44     62 00 00 FF 
11e48     8C E5 05 F1 | 	add	objptr, ##50572
11e4c     F2 FA 61 FC | 	wrlong	result1, objptr
11e50     62 00 00 FF 
11e54     8C E5 85 F1 | 	sub	objptr, ##50572
11e58     F2 FA 01 F6 | 	mov	result1, objptr
11e5c     00 38 01 FF 
11e60     00 FA 45 F5 | 	or	result1, ##40894464
11e64     62 00 00 FF 
11e68     90 E5 05 F1 | 	add	objptr, ##50576
11e6c     F2 FA 61 FC | 	wrlong	result1, objptr
11e70     62 00 00 FF 
11e74     90 E5 85 F1 | 	sub	objptr, ##50576
11e78     F2 FA 01 F6 | 	mov	result1, objptr
11e7c     00 40 01 FF 
11e80     00 FA 45 F5 | 	or	result1, ##41943040
11e84     62 00 00 FF 
11e88     94 E5 05 F1 | 	add	objptr, ##50580
11e8c     F2 FA 61 FC | 	wrlong	result1, objptr
11e90     62 00 00 FF 
11e94     94 E5 85 F1 | 	sub	objptr, ##50580
11e98     F2 FA 01 F6 | 	mov	result1, objptr
11e9c     00 48 01 FF 
11ea0     00 FA 45 F5 | 	or	result1, ##42991616
11ea4     62 00 00 FF 
11ea8     9C E5 05 F1 | 	add	objptr, ##50588
11eac     F2 FA 61 FC | 	wrlong	result1, objptr
11eb0     62 00 00 FF 
11eb4     9C E5 85 F1 | 	sub	objptr, ##50588
11eb8     F2 FA 01 F6 | 	mov	result1, objptr
11ebc     00 50 01 FF 
11ec0     00 FA 45 F5 | 	or	result1, ##44040192
11ec4     62 00 00 FF 
11ec8     A0 E5 05 F1 | 	add	objptr, ##50592
11ecc     F2 FA 61 FC | 	wrlong	result1, objptr
11ed0     62 00 00 FF 
11ed4     A0 E5 85 F1 | 	sub	objptr, ##50592
11ed8     F2 FA 01 F6 | 	mov	result1, objptr
11edc     00 58 01 FF 
11ee0     00 FA 45 F5 | 	or	result1, ##45088768
11ee4     62 00 00 FF 
11ee8     A0 E4 05 F1 | 	add	objptr, ##50336
11eec     F2 FA 61 FC | 	wrlong	result1, objptr
11ef0     62 00 00 FF 
11ef4     A0 E4 85 F1 | 	sub	objptr, ##50336
11ef8     F2 FA 01 F6 | 	mov	result1, objptr
11efc     00 60 01 FF 
11f00     00 FA 45 F5 | 	or	result1, ##46137344
11f04     62 00 00 FF 
11f08     D0 E4 05 F1 | 	add	objptr, ##50384
11f0c     F2 FA 61 FC | 	wrlong	result1, objptr
11f10     62 00 00 FF 
11f14     D0 E4 85 F1 | 	sub	objptr, ##50384
11f18     F2 FA 01 F6 | 	mov	result1, objptr
11f1c     00 68 01 FF 
11f20     00 FA 45 F5 | 	or	result1, ##47185920
11f24     62 00 00 FF 
11f28     CC E4 05 F1 | 	add	objptr, ##50380
11f2c     F2 FA 61 FC | 	wrlong	result1, objptr
11f30     62 00 00 FF 
11f34     CC E4 85 F1 | 	sub	objptr, ##50380
11f38     F2 FA 01 F6 | 	mov	result1, objptr
11f3c     00 70 01 FF 
11f40     00 FA 45 F5 | 	or	result1, ##48234496
11f44     62 00 00 FF 
11f48     70 E4 05 F1 | 	add	objptr, ##50288
11f4c     F2 FA 61 FC | 	wrlong	result1, objptr
11f50     62 00 00 FF 
11f54     70 E4 85 F1 | 	sub	objptr, ##50288
11f58     F2 FA 01 F6 | 	mov	result1, objptr
11f5c     00 78 01 FF 
11f60     00 FA 45 F5 | 	or	result1, ##49283072
11f64     62 00 00 FF 
11f68     74 E4 05 F1 | 	add	objptr, ##50292
11f6c     F2 FA 61 FC | 	wrlong	result1, objptr
11f70     62 00 00 FF 
11f74     74 E4 85 F1 | 	sub	objptr, ##50292
11f78     F2 FA 01 F6 | 	mov	result1, objptr
11f7c     38 FA 25 F4 | 	bith	result1, #56
11f80     62 00 00 FF 
11f84     DC E4 05 F1 | 	add	objptr, ##50396
11f88     F2 FA 61 FC | 	wrlong	result1, objptr
11f8c     62 00 00 FF 
11f90     DC E4 85 F1 | 	sub	objptr, ##50396
11f94     F2 FA 01 F6 | 	mov	result1, objptr
11f98     00 88 01 FF 
11f9c     00 FA 45 F5 | 	or	result1, ##51380224
11fa0     62 00 00 FF 
11fa4     84 E5 05 F1 | 	add	objptr, ##50564
11fa8     F2 FA 61 FC | 	wrlong	result1, objptr
11fac     62 00 00 FF 
11fb0     84 E5 85 F1 | 	sub	objptr, ##50564
11fb4     F2 FA 01 F6 | 	mov	result1, objptr
11fb8     00 90 01 FF 
11fbc     00 FA 45 F5 | 	or	result1, ##52428800
11fc0     62 00 00 FF 
11fc4     98 E5 05 F1 | 	add	objptr, ##50584
11fc8     F2 FA 61 FC | 	wrlong	result1, objptr
11fcc     62 00 00 FF 
11fd0     98 E5 85 F1 | 	sub	objptr, ##50584
11fd4     F2 FA 01 F6 | 	mov	result1, objptr
11fd8     00 98 01 FF 
11fdc     00 FA 45 F5 | 	or	result1, ##53477376
11fe0     62 00 00 FF 
11fe4     A4 E5 05 F1 | 	add	objptr, ##50596
11fe8     F2 FA 61 FC | 	wrlong	result1, objptr
11fec     62 00 00 FF 
11ff0     A4 E5 85 F1 | 	sub	objptr, ##50596
11ff4     F2 FA 01 F6 | 	mov	result1, objptr
11ff8     00 A0 01 FF 
11ffc     00 FA 45 F5 | 	or	result1, ##54525952
12000     62 00 00 FF 
12004     A8 E5 05 F1 | 	add	objptr, ##50600
12008     F2 FA 61 FC | 	wrlong	result1, objptr
1200c     62 00 00 FF 
12010     A8 E5 85 F1 | 	sub	objptr, ##50600
12014     F2 FA 01 F6 | 	mov	result1, objptr
12018     00 A8 01 FF 
1201c     00 FA 45 F5 | 	or	result1, ##55574528
12020     62 00 00 FF 
12024     AC E5 05 F1 | 	add	objptr, ##50604
12028     F2 FA 61 FC | 	wrlong	result1, objptr
1202c     62 00 00 FF 
12030     AC E5 85 F1 | 	sub	objptr, ##50604
12034     F2 FA 01 F6 | 	mov	result1, objptr
12038     00 B0 01 FF 
1203c     00 FA 45 F5 | 	or	result1, ##56623104
12040     62 00 00 FF 
12044     B0 E5 05 F1 | 	add	objptr, ##50608
12048     F2 FA 61 FC | 	wrlong	result1, objptr
1204c     62 00 00 FF 
12050     B0 E5 85 F1 | 	sub	objptr, ##50608
12054     F2 FA 01 F6 | 	mov	result1, objptr
12058     00 B8 01 FF 
1205c     00 FA 45 F5 | 	or	result1, ##57671680
12060     62 00 00 FF 
12064     B4 E5 05 F1 | 	add	objptr, ##50612
12068     F2 FA 61 FC | 	wrlong	result1, objptr
1206c     62 00 00 FF 
12070     B4 E5 85 F1 | 	sub	objptr, ##50612
12074     F2 FA 01 F6 | 	mov	result1, objptr
12078     57 FA 25 F4 | 	bith	result1, #87
1207c     62 00 00 FF 
12080     B8 E5 05 F1 | 	add	objptr, ##50616
12084     F2 FA 61 FC | 	wrlong	result1, objptr
12088     62 00 00 FF 
1208c     B8 E5 85 F1 | 	sub	objptr, ##50616
12090     F2 FA 01 F6 | 	mov	result1, objptr
12094     94 FA 25 F4 | 	bith	result1, #148
12098     62 00 00 FF 
1209c     80 E5 05 F1 | 	add	objptr, ##50560
120a0     F2 FA 61 FC | 	wrlong	result1, objptr
120a4     62 00 00 FF 
120a8     80 E5 85 F1 | 	sub	objptr, ##50560
120ac     F2 FA 01 F6 | 	mov	result1, objptr
120b0     00 C8 01 FF 
120b4     00 FA 45 F5 | 	or	result1, ##59768832
120b8     62 00 00 FF 
120bc     C0 E5 05 F1 | 	add	objptr, ##50624
120c0     F2 FA 61 FC | 	wrlong	result1, objptr
120c4     62 00 00 FF 
120c8     C0 E5 85 F1 | 	sub	objptr, ##50624
120cc     F2 FA 01 F6 | 	mov	result1, objptr
120d0     00 D0 01 FF 
120d4     00 FA 45 F5 | 	or	result1, ##60817408
120d8     62 00 00 FF 
120dc     BC E5 05 F1 | 	add	objptr, ##50620
120e0     F2 FA 61 FC | 	wrlong	result1, objptr
120e4     62 00 00 FF 
120e8     BC E5 85 F1 | 	sub	objptr, ##50620
120ec     F2 FA 01 F6 | 	mov	result1, objptr
120f0     00 D8 01 FF 
120f4     00 FA 45 F5 | 	or	result1, ##61865984
120f8     62 00 00 FF 
120fc     D4 E5 05 F1 | 	add	objptr, ##50644
12100     F2 FA 61 FC | 	wrlong	result1, objptr
12104     62 00 00 FF 
12108     D4 E5 85 F1 | 	sub	objptr, ##50644
1210c     F2 FA 01 F6 | 	mov	result1, objptr
12110     76 FA 25 F4 | 	bith	result1, #118
12114     62 00 00 FF 
12118     D8 E5 05 F1 | 	add	objptr, ##50648
1211c     F2 FA 61 FC | 	wrlong	result1, objptr
12120     62 00 00 FF 
12124     D8 E5 85 F1 | 	sub	objptr, ##50648
12128     F2 FA 01 F6 | 	mov	result1, objptr
1212c     00 E8 01 FF 
12130     00 FA 45 F5 | 	or	result1, ##63963136
12134     62 00 00 FF 
12138     C4 E5 05 F1 | 	add	objptr, ##50628
1213c     F2 FA 61 FC | 	wrlong	result1, objptr
12140     62 00 00 FF 
12144     C4 E5 85 F1 | 	sub	objptr, ##50628
12148     F2 FA 01 F6 | 	mov	result1, objptr
1214c     95 FA 25 F4 | 	bith	result1, #149
12150     62 00 00 FF 
12154     C8 E5 05 F1 | 	add	objptr, ##50632
12158     F2 FA 61 FC | 	wrlong	result1, objptr
1215c     62 00 00 FF 
12160     C8 E5 85 F1 | 	sub	objptr, ##50632
12164     F2 FA 01 F6 | 	mov	result1, objptr
12168     B4 FA 25 F4 | 	bith	result1, #180
1216c     62 00 00 FF 
12170     CC E5 05 F1 | 	add	objptr, ##50636
12174     F2 FA 61 FC | 	wrlong	result1, objptr
12178     62 00 00 FF 
1217c     CC E5 85 F1 | 	sub	objptr, ##50636
12180     F2 FA 01 F6 | 	mov	result1, objptr
12184     1A FA 25 F4 | 	bith	result1, #26
12188     62 00 00 FF 
1218c     D0 E5 05 F1 | 	add	objptr, ##50640
12190     F2 FA 61 FC | 	wrlong	result1, objptr
12194     62 00 00 FF 
12198     D0 E5 85 F1 | 	sub	objptr, ##50640
1219c     F2 FA 01 F6 | 	mov	result1, objptr
121a0     00 08 02 FF 
121a4     00 FA 45 F5 | 	or	result1, ##68157440
121a8     62 00 00 FF 
121ac     E0 E5 05 F1 | 	add	objptr, ##50656
121b0     F2 FA 61 FC | 	wrlong	result1, objptr
121b4     62 00 00 FF 
121b8     E0 E5 85 F1 | 	sub	objptr, ##50656
121bc     F2 FA 01 F6 | 	mov	result1, objptr
121c0     00 10 02 FF 
121c4     00 FA 45 F5 | 	or	result1, ##69206016
121c8     62 00 00 FF 
121cc     DC E5 05 F1 | 	add	objptr, ##50652
121d0     F2 FA 61 FC | 	wrlong	result1, objptr
121d4     62 00 00 FF 
121d8     DC E5 85 F1 | 	sub	objptr, ##50652
121dc     F2 FA 01 F6 | 	mov	result1, objptr
121e0     00 18 02 FF 
121e4     00 FA 45 F5 | 	or	result1, ##70254592
121e8     62 00 00 FF 
121ec     EC E5 05 F1 | 	add	objptr, ##50668
121f0     F2 FA 61 FC | 	wrlong	result1, objptr
121f4     62 00 00 FF 
121f8     EC E5 85 F1 | 	sub	objptr, ##50668
121fc     F2 FA 01 F6 | 	mov	result1, objptr
12200     00 20 02 FF 
12204     00 FA 45 F5 | 	or	result1, ##71303168
12208     62 00 00 FF 
1220c     E8 E5 05 F1 | 	add	objptr, ##50664
12210     F2 FA 61 FC | 	wrlong	result1, objptr
12214     62 00 00 FF 
12218     E8 E5 85 F1 | 	sub	objptr, ##50664
1221c     F2 FA 01 F6 | 	mov	result1, objptr
12220     00 28 02 FF 
12224     00 FA 45 F5 | 	or	result1, ##72351744
12228     62 00 00 FF 
1222c     E4 E5 05 F1 | 	add	objptr, ##50660
12230     F2 FA 61 FC | 	wrlong	result1, objptr
12234     62 00 00 FF 
12238     E4 E5 85 F1 | 	sub	objptr, ##50660
1223c     F2 FA 01 F6 | 	mov	result1, objptr
12240     00 30 02 FF 
12244     00 FA 45 F5 | 	or	result1, ##73400320
12248     62 00 00 FF 
1224c     F0 E5 05 F1 | 	add	objptr, ##50672
12250     F2 FA 61 FC | 	wrlong	result1, objptr
12254     62 00 00 FF 
12258     F0 E5 85 F1 | 	sub	objptr, ##50672
1225c     F2 FA 01 F6 | 	mov	result1, objptr
12260     00 38 02 FF 
12264     00 FA 45 F5 | 	or	result1, ##74448896
12268     62 00 00 FF 
1226c     F4 E5 05 F1 | 	add	objptr, ##50676
12270     F2 FA 61 FC | 	wrlong	result1, objptr
12274     62 00 00 FF 
12278     F4 E5 85 F1 | 	sub	objptr, ##50676
1227c     F2 FA 01 F6 | 	mov	result1, objptr
12280     00 40 02 FF 
12284     00 FA 45 F5 | 	or	result1, ##75497472
12288     62 00 00 FF 
1228c     88 E4 05 F1 | 	add	objptr, ##50312
12290     F2 FA 61 FC | 	wrlong	result1, objptr
12294     62 00 00 FF 
12298     88 E4 85 F1 | 	sub	objptr, ##50312
1229c     F2 FA 01 F6 | 	mov	result1, objptr
122a0     00 48 02 FF 
122a4     00 FA 45 F5 | 	or	result1, ##76546048
122a8     62 00 00 FF 
122ac     F8 E5 05 F1 | 	add	objptr, ##50680
122b0     F2 FA 61 FC | 	wrlong	result1, objptr
122b4     62 00 00 FF 
122b8     F8 E5 85 F1 | 	sub	objptr, ##50680
122bc     F2 FA 01 F6 | 	mov	result1, objptr
122c0     00 50 02 FF 
122c4     00 FA 45 F5 | 	or	result1, ##77594624
122c8     63 00 00 FF 
122cc     00 E4 05 F1 | 	add	objptr, ##50688
122d0     F2 FA 61 FC | 	wrlong	result1, objptr
122d4     63 00 00 FF 
122d8     00 E4 85 F1 | 	sub	objptr, ##50688
122dc                 | _init_commands_ret
122dc     2D 00 64 FD | 	ret
122e0                 | 
122e0                 | ' 
122e0                 | ' ''--------------------------------Error strings -------------------------------------
122e0                 | ' 
122e0                 | ' sub init_error_strings
122e0                 | _init_error_strings
122e0     29 01 00 FF 
122e4     1E 00 06 F6 | 	mov	_var01, ##@LR__4395
122e8     64 00 00 FF 
122ec     50 E4 05 F1 | 	add	objptr, ##51280
122f0     F2 00 62 FC | 	wrlong	_var01, objptr
122f4     29 01 00 FF 
122f8     1F 00 06 F6 | 	mov	_var01, ##@LR__4396
122fc     04 E4 05 F1 | 	add	objptr, #4
12300     F2 00 62 FC | 	wrlong	_var01, objptr
12304     29 01 00 FF 
12308     44 00 06 F6 | 	mov	_var01, ##@LR__4397
1230c     04 E4 05 F1 | 	add	objptr, #4
12310     F2 00 62 FC | 	wrlong	_var01, objptr
12314     29 01 00 FF 
12318     65 00 06 F6 | 	mov	_var01, ##@LR__4398
1231c     04 E4 05 F1 | 	add	objptr, #4
12320     F2 00 62 FC | 	wrlong	_var01, objptr
12324     29 01 00 FF 
12328     7F 00 06 F6 | 	mov	_var01, ##@LR__4399
1232c     04 E4 05 F1 | 	add	objptr, #4
12330     F2 00 62 FC | 	wrlong	_var01, objptr
12334     29 01 00 FF 
12338     9B 00 06 F6 | 	mov	_var01, ##@LR__4400
1233c     04 E4 05 F1 | 	add	objptr, #4
12340     F2 00 62 FC | 	wrlong	_var01, objptr
12344     29 01 00 FF 
12348     BD 00 06 F6 | 	mov	_var01, ##@LR__4401
1234c     04 E4 05 F1 | 	add	objptr, #4
12350     F2 00 62 FC | 	wrlong	_var01, objptr
12354     29 01 00 FF 
12358     EB 00 06 F6 | 	mov	_var01, ##@LR__4402
1235c     04 E4 05 F1 | 	add	objptr, #4
12360     F2 00 62 FC | 	wrlong	_var01, objptr
12364     29 01 00 FF 
12368     16 01 06 F6 | 	mov	_var01, ##@LR__4403
1236c     04 E4 05 F1 | 	add	objptr, #4
12370     F2 00 62 FC | 	wrlong	_var01, objptr
12374     29 01 00 FF 
12378     2F 01 06 F6 | 	mov	_var01, ##@LR__4404
1237c     04 E4 05 F1 | 	add	objptr, #4
12380     F2 00 62 FC | 	wrlong	_var01, objptr
12384     29 01 00 FF 
12388     50 01 06 F6 | 	mov	_var01, ##@LR__4405
1238c     04 E4 05 F1 | 	add	objptr, #4
12390     F2 00 62 FC | 	wrlong	_var01, objptr
12394     29 01 00 FF 
12398     67 01 06 F6 | 	mov	_var01, ##@LR__4406
1239c     04 E4 05 F1 | 	add	objptr, #4
123a0     F2 00 62 FC | 	wrlong	_var01, objptr
123a4     29 01 00 FF 
123a8     85 01 06 F6 | 	mov	_var01, ##@LR__4407
123ac     04 E4 05 F1 | 	add	objptr, #4
123b0     F2 00 62 FC | 	wrlong	_var01, objptr
123b4     29 01 00 FF 
123b8     A9 01 06 F6 | 	mov	_var01, ##@LR__4408
123bc     04 E4 05 F1 | 	add	objptr, #4
123c0     F2 00 62 FC | 	wrlong	_var01, objptr
123c4     29 01 00 FF 
123c8     D0 01 06 F6 | 	mov	_var01, ##@LR__4409
123cc     04 E4 05 F1 | 	add	objptr, #4
123d0     F2 00 62 FC | 	wrlong	_var01, objptr
123d4     29 01 00 FF 
123d8     EC 01 06 F6 | 	mov	_var01, ##@LR__4410
123dc     04 E4 05 F1 | 	add	objptr, #4
123e0     F2 00 62 FC | 	wrlong	_var01, objptr
123e4     29 01 00 FF 
123e8     FD 01 06 F6 | 	mov	_var01, ##@LR__4411
123ec     04 E4 05 F1 | 	add	objptr, #4
123f0     F2 00 62 FC | 	wrlong	_var01, objptr
123f4     2A 01 00 FF 
123f8     0D 00 06 F6 | 	mov	_var01, ##@LR__4412
123fc     04 E4 05 F1 | 	add	objptr, #4
12400     F2 00 62 FC | 	wrlong	_var01, objptr
12404     2A 01 00 FF 
12408     28 00 06 F6 | 	mov	_var01, ##@LR__4413
1240c     04 E4 05 F1 | 	add	objptr, #4
12410     F2 00 62 FC | 	wrlong	_var01, objptr
12414     2A 01 00 FF 
12418     3A 00 06 F6 | 	mov	_var01, ##@LR__4414
1241c     04 E4 05 F1 | 	add	objptr, #4
12420     F2 00 62 FC | 	wrlong	_var01, objptr
12424     2A 01 00 FF 
12428     52 00 06 F6 | 	mov	_var01, ##@LR__4415
1242c     04 E4 05 F1 | 	add	objptr, #4
12430     F2 00 62 FC | 	wrlong	_var01, objptr
12434     2A 01 00 FF 
12438     66 00 06 F6 | 	mov	_var01, ##@LR__4416
1243c     04 E4 05 F1 | 	add	objptr, #4
12440     F2 00 62 FC | 	wrlong	_var01, objptr
12444     2A 01 00 FF 
12448     76 00 06 F6 | 	mov	_var01, ##@LR__4417
1244c     04 E4 05 F1 | 	add	objptr, #4
12450     F2 00 62 FC | 	wrlong	_var01, objptr
12454     2A 01 00 FF 
12458     93 00 06 F6 | 	mov	_var01, ##@LR__4418
1245c     04 E4 05 F1 | 	add	objptr, #4
12460     F2 00 62 FC | 	wrlong	_var01, objptr
12464     2A 01 00 FF 
12468     A4 00 06 F6 | 	mov	_var01, ##@LR__4419
1246c     04 E4 05 F1 | 	add	objptr, #4
12470     F2 00 62 FC | 	wrlong	_var01, objptr
12474     2A 01 00 FF 
12478     B5 00 06 F6 | 	mov	_var01, ##@LR__4420
1247c     04 E4 05 F1 | 	add	objptr, #4
12480     F2 00 62 FC | 	wrlong	_var01, objptr
12484     2A 01 00 FF 
12488     E0 00 06 F6 | 	mov	_var01, ##@LR__4421
1248c     04 E4 05 F1 | 	add	objptr, #4
12490     F2 00 62 FC | 	wrlong	_var01, objptr
12494     2A 01 00 FF 
12498     FC 00 06 F6 | 	mov	_var01, ##@LR__4422
1249c     04 E4 05 F1 | 	add	objptr, #4
124a0     F2 00 62 FC | 	wrlong	_var01, objptr
124a4     2A 01 00 FF 
124a8     12 01 06 F6 | 	mov	_var01, ##@LR__4423
124ac     04 E4 05 F1 | 	add	objptr, #4
124b0     F2 00 62 FC | 	wrlong	_var01, objptr
124b4     2A 01 00 FF 
124b8     1F 01 06 F6 | 	mov	_var01, ##@LR__4424
124bc     04 E4 05 F1 | 	add	objptr, #4
124c0     F2 00 62 FC | 	wrlong	_var01, objptr
124c4     2A 01 00 FF 
124c8     31 01 06 F6 | 	mov	_var01, ##@LR__4425
124cc     04 E4 05 F1 | 	add	objptr, #4
124d0     F2 00 62 FC | 	wrlong	_var01, objptr
124d4     2A 01 00 FF 
124d8     42 01 06 F6 | 	mov	_var01, ##@LR__4426
124dc     04 E4 05 F1 | 	add	objptr, #4
124e0     F2 00 62 FC | 	wrlong	_var01, objptr
124e4     2A 01 00 FF 
124e8     5E 01 06 F6 | 	mov	_var01, ##@LR__4427
124ec     04 E4 05 F1 | 	add	objptr, #4
124f0     F2 00 62 FC | 	wrlong	_var01, objptr
124f4     2A 01 00 FF 
124f8     6F 01 06 F6 | 	mov	_var01, ##@LR__4428
124fc     04 E4 05 F1 | 	add	objptr, #4
12500     F2 00 62 FC | 	wrlong	_var01, objptr
12504     2A 01 00 FF 
12508     7E 01 06 F6 | 	mov	_var01, ##@LR__4429
1250c     04 E4 05 F1 | 	add	objptr, #4
12510     F2 00 62 FC | 	wrlong	_var01, objptr
12514     2A 01 00 FF 
12518     99 01 06 F6 | 	mov	_var01, ##@LR__4430
1251c     04 E4 05 F1 | 	add	objptr, #4
12520     F2 00 62 FC | 	wrlong	_var01, objptr
12524     2A 01 00 FF 
12528     CD 01 06 F6 | 	mov	_var01, ##@LR__4431
1252c     04 E4 05 F1 | 	add	objptr, #4
12530     F2 00 62 FC | 	wrlong	_var01, objptr
12534     2A 01 00 FF 
12538     E6 01 06 F6 | 	mov	_var01, ##@LR__4432
1253c     04 E4 05 F1 | 	add	objptr, #4
12540     F2 00 62 FC | 	wrlong	_var01, objptr
12544     2B 01 00 FF 
12548     02 00 06 F6 | 	mov	_var01, ##@LR__4433
1254c     04 E4 05 F1 | 	add	objptr, #4
12550     F2 00 62 FC | 	wrlong	_var01, objptr
12554     2B 01 00 FF 
12558     20 00 06 F6 | 	mov	_var01, ##@LR__4434
1255c     04 E4 05 F1 | 	add	objptr, #4
12560     F2 00 62 FC | 	wrlong	_var01, objptr
12564     2B 01 00 FF 
12568     39 00 06 F6 | 	mov	_var01, ##@LR__4435
1256c     04 E4 05 F1 | 	add	objptr, #4
12570     F2 00 62 FC | 	wrlong	_var01, objptr
12574     2B 01 00 FF 
12578     58 00 06 F6 | 	mov	_var01, ##@LR__4436
1257c     04 E4 05 F1 | 	add	objptr, #4
12580     F2 00 62 FC | 	wrlong	_var01, objptr
12584     2B 01 00 FF 
12588     67 00 06 F6 | 	mov	_var01, ##@LR__4437
1258c     04 E4 05 F1 | 	add	objptr, #4
12590     F2 00 62 FC | 	wrlong	_var01, objptr
12594     2B 01 00 FF 
12598     95 00 06 F6 | 	mov	_var01, ##@LR__4438
1259c     04 E4 05 F1 | 	add	objptr, #4
125a0     F2 00 62 FC | 	wrlong	_var01, objptr
125a4     2B 01 00 FF 
125a8     A3 00 06 F6 | 	mov	_var01, ##@LR__4439
125ac     04 E4 05 F1 | 	add	objptr, #4
125b0     F2 00 62 FC | 	wrlong	_var01, objptr
125b4     2B 01 00 FF 
125b8     B8 00 06 F6 | 	mov	_var01, ##@LR__4440
125bc     04 E4 05 F1 | 	add	objptr, #4
125c0     F2 00 62 FC | 	wrlong	_var01, objptr
125c4     2B 01 00 FF 
125c8     DC 00 06 F6 | 	mov	_var01, ##@LR__4441
125cc     04 E4 05 F1 | 	add	objptr, #4
125d0     F2 00 62 FC | 	wrlong	_var01, objptr
125d4     2B 01 00 FF 
125d8     F3 00 06 F6 | 	mov	_var01, ##@LR__4442
125dc     04 E4 05 F1 | 	add	objptr, #4
125e0     F2 00 62 FC | 	wrlong	_var01, objptr
125e4     2B 01 00 FF 
125e8     06 01 06 F6 | 	mov	_var01, ##@LR__4443
125ec     04 E4 05 F1 | 	add	objptr, #4
125f0     F2 00 62 FC | 	wrlong	_var01, objptr
125f4     64 00 00 FF 
125f8     10 E5 85 F1 | 	sub	objptr, ##51472
125fc                 | _init_error_strings_ret
125fc     2D 00 64 FD | 	ret
12600                 | 
12600                 | '         
12600                 | ' sub printerror(err as integer)
12600                 | _printerror
12600     01 4A 05 F6 | 	mov	COUNT_, #1
12604     A8 00 A0 FD | 	call	#pushregs_
12608     09 1F 02 F6 | 	mov	local01, arg01
1260c     2B 01 00 FF 
12610     1D 13 06 F6 | 	mov	arg01, ##@LR__4444
12614     28 25 B0 FD | 	call	#_hg010b_spin2_write
12618     0F 13 02 F6 | 	mov	arg01, local01
1261c     20 27 B0 FD | 	call	#_hg010b_spin2_inttostr
12620     FD 12 02 F6 | 	mov	arg01, result1
12624     18 25 B0 FD | 	call	#_hg010b_spin2_write
12628     2B 01 00 FF 
1262c     24 13 06 F6 | 	mov	arg01, ##@LR__4445
12630     0C 25 B0 FD | 	call	#_hg010b_spin2_write
12634     02 1E 66 F0 | 	shl	local01, #2
12638     64 00 00 FF 
1263c     50 E4 05 F1 | 	add	objptr, ##51280
12640     F2 1E 02 F1 | 	add	local01, objptr
12644     0F 13 02 FB | 	rdlong	arg01, local01
12648     64 00 00 FF 
1264c     50 E4 85 F1 | 	sub	objptr, ##51280
12650                 | ' 
12650                 | ' write(text)
12650     EC 24 B0 FD | 	call	#_hg010b_spin2_write
12654                 | ' crlf
12654     48 26 B0 FD | 	call	#_hg010b_spin2_crlf
12658     A7 F0 03 F6 | 	mov	ptra, fp
1265c     B2 00 A0 FD | 	call	#popregs_
12660                 | _printerror_ret
12660     2D 00 64 FD | 	ret
12664                 | 
12664                 | ' 
12664                 | ' '' ------------------------------- Hardware start/stop/initialization 
12664                 | ' 
12664                 | ' sub startpsram
12664                 | _startpsram
12664     00 12 06 F6 | 	mov	arg01, #0
12668     0A 14 C6 F9 | 	decod	arg02, #10
1266c     0B 16 06 F6 | 	mov	arg03, #11
12670     07 18 06 F6 | 	mov	arg04, #7
12674     0B 00 00 FF 
12678     C0 E4 05 F1 | 	add	objptr, ##5824
1267c     CC 27 B0 FD | 	call	#_psram_spin2_startx
12680     4A 00 00 FF 
12684     1C E5 05 F1 | 	add	objptr, ##38172
12688     F2 FA 61 FC | 	wrlong	result1, objptr
1268c                 | '     return $7FF00 + cog*12
1268c     0C E4 05 F1 | 	add	objptr, #12
12690     FF 03 80 FF 
12694     F2 00 6A FC | 	wrlong	##524032, objptr
12698     55 00 00 FF 
1269c     E8 E5 85 F1 | 	sub	objptr, ##44008
126a0                 | _startpsram_ret
126a0     2D 00 64 FD | 	ret
126a4                 | 
126a4                 | ' 
126a4                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
126a4                 | _startvideo
126a4     01 4A 05 F6 | 	mov	COUNT_, #1
126a8     A8 00 A0 FD | 	call	#pushregs_
126ac     55 00 00 FF 
126b0     E8 E5 05 F1 | 	add	objptr, ##44008
126b4     F2 18 02 FB | 	rdlong	arg04, objptr
126b8     55 00 00 FF 
126bc     E8 E5 85 F1 | 	sub	objptr, ##44008
126c0     0A 13 02 F6 | 	mov	arg01, arg02
126c4     0C 15 02 F6 | 	mov	arg02, arg04
126c8     88 0F B0 FD | 	call	#_hg010b_spin2_start
126cc     55 00 00 FF 
126d0     D4 E5 05 F1 | 	add	objptr, ##43988
126d4     F2 FA 61 FC | 	wrlong	result1, objptr
126d8                 | ' 
126d8                 | ' videocog=v.start(pin,mbox)
126d8                 | ' 
126d8                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
126d8     00 1E 06 F6 | 	mov	local01, #0
126dc     4A 00 00 FF 
126e0     14 E5 85 F1 | 	sub	objptr, ##38164
126e4                 | LR__1530
126e4     0F 13 02 F6 | 	mov	arg01, local01
126e8     00 28 00 FF 
126ec     00 14 06 F6 | 	mov	arg02, ##5242880
126f0     B0 2B B0 FD | 	call	#_psram_spin2_setQos
126f4     01 1E 06 F1 | 	add	local01, #1
126f8     08 1E 56 F2 | 	cmps	local01, #8 wc
126fc     E4 FF 9F CD |  if_b	jmp	#LR__1530
12700     4A 00 00 FF 
12704     14 E5 05 F1 | 	add	objptr, ##38164
12708     F2 12 02 FB | 	rdlong	arg01, objptr
1270c     7A 00 02 FF 
12710     00 14 06 F6 | 	mov	arg02, ##67171328
12714     4A 00 00 FF 
12718     14 E5 85 F1 | 	sub	objptr, ##38164
1271c     84 2B B0 FD | 	call	#_psram_spin2_setQos
12720     0B 00 00 FF 
12724     C0 E4 85 F1 | 	sub	objptr, ##5824
12728                 | ' psram.setQoS(videocog, $0400f400) 
12728                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
12728     F2 14 02 F6 | 	mov	arg02, objptr
1272c     00 58 02 FF 
12730     00 14 46 F5 | 	or	arg02, ##78643200
12734     00 16 06 F6 | 	mov	arg03, #0
12738     00 18 06 F6 | 	mov	arg04, #0
1273c     00 12 06 F6 | 	mov	arg01, #0
12740     C8 3E B0 FD | 	call	#__system___basic_open
12744                 | ' return videocog
12744     55 00 00 FF 
12748     D4 E5 05 F1 | 	add	objptr, ##43988
1274c     F2 FA 01 FB | 	rdlong	result1, objptr
12750     55 00 00 FF 
12754     D4 E5 85 F1 | 	sub	objptr, ##43988
12758     A7 F0 03 F6 | 	mov	ptra, fp
1275c     B2 00 A0 FD | 	call	#popregs_
12760                 | _startvideo_ret
12760     2D 00 64 FD | 	ret
12764                 | 
12764                 | ' 
12764                 | ' function pspeek(adr as ulong) as ubyte
12764                 | _pspeek
12764     00 4A 05 F6 | 	mov	COUNT_, #0
12768     A8 00 A0 FD | 	call	#pushregs_
1276c     0C F0 07 F1 | 	add	ptra, #12
12770     04 4E 05 F1 | 	add	fp, #4
12774     A7 12 62 FC | 	wrlong	arg01, fp
12778     04 4E 05 F1 | 	add	fp, #4
1277c     A7 12 02 F6 | 	mov	arg01, fp
12780     04 4E 85 F1 | 	sub	fp, #4
12784     A7 14 02 FB | 	rdlong	arg02, fp
12788     04 4E 85 F1 | 	sub	fp, #4
1278c     01 16 06 F6 | 	mov	arg03, #1
12790     0B 00 00 FF 
12794     C0 E4 05 F1 | 	add	objptr, ##5824
12798     DC 28 B0 FD | 	call	#_psram_spin2_read1
1279c     0B 00 00 FF 
127a0     C0 E4 85 F1 | 	sub	objptr, ##5824
127a4                 | ' psram.read1(varptr(res),adr,1)
127a4                 | ' return res
127a4     08 4E 05 F1 | 	add	fp, #8
127a8     A7 FA C1 FA | 	rdbyte	result1, fp
127ac     08 4E 85 F1 | 	sub	fp, #8
127b0     A7 F0 03 F6 | 	mov	ptra, fp
127b4     B2 00 A0 FD | 	call	#popregs_
127b8                 | _pspeek_ret
127b8     2D 00 64 FD | 	ret
127bc                 | 
127bc                 | ' 
127bc                 | ' function pslpeek(adr as ulong) as ulong
127bc                 | _pslpeek
127bc     00 4A 05 F6 | 	mov	COUNT_, #0
127c0     A8 00 A0 FD | 	call	#pushregs_
127c4     0C F0 07 F1 | 	add	ptra, #12
127c8     04 4E 05 F1 | 	add	fp, #4
127cc     A7 12 62 FC | 	wrlong	arg01, fp
127d0     04 4E 05 F1 | 	add	fp, #4
127d4     A7 12 02 F6 | 	mov	arg01, fp
127d8     04 4E 85 F1 | 	sub	fp, #4
127dc     A7 14 02 FB | 	rdlong	arg02, fp
127e0     04 4E 85 F1 | 	sub	fp, #4
127e4     04 16 06 F6 | 	mov	arg03, #4
127e8     0B 00 00 FF 
127ec     C0 E4 05 F1 | 	add	objptr, ##5824
127f0     84 28 B0 FD | 	call	#_psram_spin2_read1
127f4     0B 00 00 FF 
127f8     C0 E4 85 F1 | 	sub	objptr, ##5824
127fc                 | ' psram.read1(varptr(res),adr,4)
127fc                 | ' return res
127fc     08 4E 05 F1 | 	add	fp, #8
12800     A7 FA 01 FB | 	rdlong	result1, fp
12804     08 4E 85 F1 | 	sub	fp, #8
12808     A7 F0 03 F6 | 	mov	ptra, fp
1280c     B2 00 A0 FD | 	call	#popregs_
12810                 | _pslpeek_ret
12810     2D 00 64 FD | 	ret
12814                 | 
12814                 | ' 
12814                 | ' '' ------------------------------- USB keyboard scan to char translator
12814                 | ' 
12814                 | ' function scantochar(key)
12814                 | _scantochar
12814                 | ' 
12814                 | ' select case (key shr 8) and 255
12814     09 01 02 F6 | 	mov	_var01, arg01
12818     08 00 C6 F0 | 	sar	_var01, #8
1281c     FF 00 0E F5 | 	and	_var01, #255 wz
12820     24 00 90 AD |  if_e	jmp	#LR__1540
12824     02 00 0E F2 | 	cmp	_var01, #2 wz
12828     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1282c     30 00 90 AD |  if_e	jmp	#LR__1541
12830     40 00 0E F2 | 	cmp	_var01, #64 wz
12834     44 00 90 AD |  if_e	jmp	#LR__1542
12838     42 00 0E F2 | 	cmp	_var01, #66 wz
1283c     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
12840     70 00 90 5D |  if_ne	jmp	#LR__1544
12844     50 00 90 FD | 	jmp	#LR__1543
12848                 | LR__1540
12848     09 FB 01 F6 | 	mov	result1, arg01
1284c     7F FA 05 F5 | 	and	result1, #127
12850     02 FA 65 F0 | 	shl	result1, #2
12854     F5 FA 01 F1 | 	add	result1, ptr__dat__
12858     FD FA C1 FA | 	rdbyte	result1, result1
1285c     54 00 90 FD | 	jmp	#_scantochar_ret
12860                 | LR__1541
12860     09 FB 01 F6 | 	mov	result1, arg01
12864     7F FA 05 F5 | 	and	result1, #127
12868     02 FA 65 F0 | 	shl	result1, #2
1286c     01 FA 05 F1 | 	add	result1, #1
12870     F5 FA 01 F1 | 	add	result1, ptr__dat__
12874     FD FA C1 FA | 	rdbyte	result1, result1
12878     38 00 90 FD | 	jmp	#_scantochar_ret
1287c                 | LR__1542
1287c     09 FB 01 F6 | 	mov	result1, arg01
12880     7F FA 05 F5 | 	and	result1, #127
12884     02 FA 65 F0 | 	shl	result1, #2
12888     02 FA 05 F1 | 	add	result1, #2
1288c     F5 FA 01 F1 | 	add	result1, ptr__dat__
12890     FD FA C1 FA | 	rdbyte	result1, result1
12894     1C 00 90 FD | 	jmp	#_scantochar_ret
12898                 | LR__1543
12898     09 FB 01 F6 | 	mov	result1, arg01
1289c     7F FA 05 F5 | 	and	result1, #127
128a0     02 FA 65 F0 | 	shl	result1, #2
128a4     03 FA 05 F1 | 	add	result1, #3
128a8     F5 FA 01 F1 | 	add	result1, ptr__dat__
128ac     FD FA C1 FA | 	rdbyte	result1, result1
128b0     00 00 90 FD | 	jmp	#_scantochar_ret
128b4                 | LR__1544
128b4                 | _scantochar_ret
128b4     2D 00 64 FD | 	ret
128b8                 | 
128b8                 | _program
128b8     0C 4A 05 F6 | 	mov	COUNT_, #12
128bc     A8 00 A0 FD | 	call	#pushregs_
128c0     A0 FD BF FD | 	call	#_startpsram
128c4     40 12 06 F6 | 	mov	arg01, #64
128c8     00 14 06 F6 | 	mov	arg02, #0
128cc     00 16 06 F6 | 	mov	arg03, #0
128d0     D0 FD BF FD | 	call	#_startvideo
128d4     00 12 06 F6 | 	mov	arg01, #0
128d8     00 14 06 F6 | 	mov	arg02, #0
128dc     00 16 06 F6 | 	mov	arg03, #0
128e0     0B 00 00 FF 
128e4     C0 E4 05 F1 | 	add	objptr, ##5824
128e8     CC 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
128ec     FE 1C 02 F6 | 	mov	arg06, result2
128f0     4A 00 00 FF 
128f4     10 E5 05 F1 | 	add	objptr, ##38160
128f8     F2 FA 61 FC | 	wrlong	result1, objptr
128fc     14 E4 05 F1 | 	add	objptr, #20
12900     F2 1C 62 FC | 	wrlong	arg06, objptr
12904     55 00 00 FF 
12908     E4 E5 85 F1 | 	sub	objptr, ##44004
1290c     32 12 06 F6 | 	mov	arg01, #50
12910     44 35 B0 FD | 	call	#__system___waitms
12914     55 00 00 FF 
12918     E4 E5 05 F1 | 	add	objptr, ##44004
1291c     F2 12 02 FB | 	rdlong	arg01, objptr
12920     55 00 00 FF 
12924     E4 E5 85 F1 | 	sub	objptr, ##44004
12928     14 12 06 F1 | 	add	arg01, #20
1292c     20 00 80 FF 
12930     09 01 58 FC | 	wrword	##16384, arg01
12934     74 2A B0 FD | 	call	#_usbnew_spin2_start
12938     55 00 00 FF 
1293c     D8 E5 05 F1 | 	add	objptr, ##43992
12940     F2 FA 61 FC | 	wrlong	result1, objptr
12944                 | '   mouse_limits[0] := xlim
12944     0F 00 00 FF 
12948     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1294c     01 00 80 FF 
12950     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
12954                 | '   mouse_limits[1] := ylim
12954     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
12958     01 00 80 FF 
1295c     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
12960     55 00 00 FF 
12964     CB E4 85 F1 | 	sub	objptr, ##43723
12968     F2 12 02 F6 | 	mov	arg01, objptr
1296c     0D E5 85 F1 | 	sub	objptr, #269
12970     C4 12 06 F1 | 	add	arg01, #196
12974                 | '   mouse_outptr := ptr
12974     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
12978     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1297c     0F 00 00 FF 
12980     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
12984     07 00 00 FF 
12988     72 EB 05 F1 | 	add	ptr__dat__, ##3954
1298c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12990     07 00 00 FF 
12994     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
12998     10 12 06 F6 | 	mov	arg01, #16
1299c     AC 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
129a0     10 12 06 F6 | 	mov	arg01, #16
129a4     20 14 06 F6 | 	mov	arg02, #32
129a8     20 16 06 F6 | 	mov	arg03, #32
129ac     10 12 B0 FD | 	call	#_hg010b_spin2_setspritesize
129b0     09 12 C6 F9 | 	decod	arg01, #9
129b4     20 15 06 F6 | 	mov	arg02, #288
129b8     AC 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
129bc     F2 1C 02 F6 | 	mov	arg06, objptr
129c0     78 00 00 FF 
129c4     BC E5 05 F1 | 	add	objptr, ##61884
129c8     F2 1A 02 F6 | 	mov	arg05, objptr
129cc     0D 1D 62 FC | 	wrlong	arg06, arg05
129d0     04 1A 06 F1 | 	add	arg05, #4
129d4     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
129d8     EF 14 02 F6 | 	mov	arg02, entryptr__
129dc     1E FA 05 F6 | 	mov	result1, #30
129e0     28 E4 61 FD | 	setq	objptr
129e4     0A FB F1 FC | 	coginit	result1, arg02 wc
129e8     01 FA 65 C6 |  if_b	neg	result1, #1
129ec     04 E4 85 F1 | 	sub	objptr, #4
129f0     F2 FA 61 FC | 	wrlong	result1, objptr
129f4     01 00 00 FF 
129f8     90 E4 05 F1 | 	add	objptr, ##656
129fc     F2 00 68 FC | 	wrlong	#0, objptr
12a00     24 00 00 FF 
12a04     40 E4 85 F1 | 	sub	objptr, ##18496
12a08     F2 04 68 FC | 	wrlong	#2, objptr
12a0c     04 E4 05 F1 | 	add	objptr, #4
12a10     F2 26 69 FC | 	wrlong	#147, objptr
12a14     04 E4 05 F1 | 	add	objptr, #4
12a18     F2 34 69 FC | 	wrlong	#154, objptr
12a1c     04 E4 05 F1 | 	add	objptr, #4
12a20     F2 08 68 FC | 	wrlong	#4, objptr
12a24     04 E4 85 F1 | 	sub	objptr, #4
12a28     F2 1C 02 FB | 	rdlong	arg06, objptr
12a2c     14 E4 85 F1 | 	sub	objptr, #20
12a30     F2 1C 62 FC | 	wrlong	arg06, objptr
12a34     04 E4 05 F1 | 	add	objptr, #4
12a38     F2 00 68 FC | 	wrlong	#0, objptr
12a3c     04 E4 05 F1 | 	add	objptr, #4
12a40     F2 00 68 FC | 	wrlong	#0, objptr
12a44     22 00 00 FF 
12a48     B0 E5 05 F1 | 	add	objptr, ##17840
12a4c     F2 02 68 FC | 	wrlong	#1, objptr
12a50     14 00 00 FF 
12a54     7C E5 85 F1 | 	sub	objptr, ##10620
12a58     F2 18 68 FC | 	wrlong	#12, objptr
12a5c     64 00 00 FF 
12a60     38 E4 85 F1 | 	sub	objptr, ##51256
12a64     5C EE BF FD | 	call	#_init_commands
12a68     74 F8 BF FD | 	call	#_init_error_strings
12a6c     F0 7F BF FD | 	call	#_do_new
12a70     56 00 00 FF 
12a74     10 E4 05 F1 | 	add	objptr, ##44048
12a78     F2 12 02 FB | 	rdlong	arg01, objptr
12a7c     04 E4 85 F1 | 	sub	objptr, #4
12a80     F2 14 02 FB | 	rdlong	arg02, objptr
12a84     56 00 00 FF 
12a88     0C E4 85 F1 | 	sub	objptr, ##44044
12a8c     F4 1D B0 FD | 	call	#_hg010b_spin2_cls
12a90     56 00 00 FF 
12a94     14 E4 05 F1 | 	add	objptr, ##44052
12a98     F2 12 02 FB | 	rdlong	arg01, objptr
12a9c     56 00 00 FF 
12aa0     14 E4 85 F1 | 	sub	objptr, ##44052
12aa4     F4 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
12aa8                 | ' 
12aa8                 | ' leading_spaces:=amount
12aa8     01 00 00 FF 
12aac     B2 E4 05 F1 | 	add	objptr, ##690
12ab0     F2 04 68 FC | 	wrlong	#2, objptr
12ab4     01 00 00 FF 
12ab8     B2 E4 85 F1 | 	sub	objptr, ##690
12abc     2B 01 00 FF 
12ac0     27 1F 06 F6 | 	mov	local01, ##@LR__4446
12ac4     3D 12 06 F6 | 	mov	arg01, #61
12ac8     3C 14 06 F6 | 	mov	arg02, #60
12acc     3B 16 06 F6 | 	mov	arg03, #59
12ad0     3A 18 06 F6 | 	mov	arg04, #58
12ad4     D8 76 B0 FD | 	call	#__system___vfs_open_sdcardx
12ad8     FD 14 02 F6 | 	mov	arg02, result1
12adc     0F 13 02 F6 | 	mov	arg01, local01
12ae0     4C 34 B0 FD | 	call	#__system___mount
12ae4     2B 01 00 FF 
12ae8     2B 13 06 F6 | 	mov	arg01, ##@LR__4447
12aec     00 37 B0 FD | 	call	#__system___chdir
12af0     2B 01 00 FF 
12af4     33 1F 06 F6 | 	mov	local01, ##@LR__4448
12af8     71 00 00 FF 
12afc     68 E4 05 F1 | 	add	objptr, ##57960
12b00     F2 1E 62 FC | 	wrlong	local01, objptr
12b04     1B 00 00 FF 
12b08     60 E4 85 F1 | 	sub	objptr, ##13920
12b0c     F2 12 02 FB | 	rdlong	arg01, objptr
12b10     56 00 00 FF 
12b14     08 E4 85 F1 | 	sub	objptr, ##44040
12b18     01 12 66 F0 | 	shl	arg01, #1
12b1c     01 14 06 F6 | 	mov	arg02, #1
12b20     B8 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
12b24                 | ' 
12b24                 | ' init_commands
12b24                 | ' init_error_strings
12b24                 | ' do_new
12b24                 | ' 
12b24                 | ' 
12b24                 | ' cls(ink, paper)
12b24                 | ' 'v.setfontfamily(4) 				' use ST Mono font
12b24                 | ' v.setfontfamily(font) 				' use ST Mono font
12b24                 | ' v.setleadingspaces(2)
12b24                 | ' mount "/sd", _vfs_open_sdcard()
12b24                 | ' chdir "/sd/bas"
12b24                 | ' 
12b24                 | ' currentdir$="/sd/bas"
12b24                 | ' 
12b24                 | ' position 2*editor_spaces,1 : print ver$
12b24     00 12 06 F6 | 	mov	arg01, #0
12b28     EC 85 B0 FD | 	call	#__system___getiolock_0362
12b2c     FD 12 02 F6 | 	mov	arg01, result1
12b30     30 30 B0 FD | 	call	#__system___lockmem
12b34     09 00 00 FF 
12b38     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
12b3c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
12b40     09 00 00 FF 
12b44     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
12b48     00 12 06 F6 | 	mov	arg01, #0
12b4c     00 16 06 F6 | 	mov	arg03, #0
12b50     04 3D B0 FD | 	call	#__system___basic_print_string
12b54     00 12 06 F6 | 	mov	arg01, #0
12b58     0A 14 06 F6 | 	mov	arg02, #10
12b5c     00 16 06 F6 | 	mov	arg03, #0
12b60     9C 3C B0 FD | 	call	#__system___basic_print_char
12b64     00 12 06 F6 | 	mov	arg01, #0
12b68     AC 85 B0 FD | 	call	#__system___getiolock_0362
12b6c     FD 00 68 FC | 	wrlong	#0, result1
12b70     F2 12 02 FB | 	rdlong	arg01, objptr
12b74     00 14 06 F6 | 	mov	arg02, #0
12b78     0A 16 06 F6 | 	mov	arg03, #10
12b7c     EC 51 B0 FD | 	call	#__system__Number_S
12b80     FD 12 02 F6 | 	mov	arg01, result1
12b84     2B 01 00 FF 
12b88     3B 15 06 F6 | 	mov	arg02, ##@LR__4449
12b8c     30 30 B0 FD | 	call	#__system___string_concat
12b90     FD 1E 02 F6 | 	mov	local01, result1
12b94     78 00 00 FF 
12b98     B0 E5 05 F1 | 	add	objptr, ##61872
12b9c     F2 1E 62 FC | 	wrlong	local01, objptr
12ba0     78 00 00 FF 
12ba4     B0 E5 85 F1 | 	sub	objptr, ##61872
12ba8                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
12ba8     00 12 06 F6 | 	mov	arg01, #0
12bac     68 85 B0 FD | 	call	#__system___getiolock_0362
12bb0     FD 12 02 F6 | 	mov	arg01, result1
12bb4     AC 2F B0 FD | 	call	#__system___lockmem
12bb8     78 00 00 FF 
12bbc     B0 E5 05 F1 | 	add	objptr, ##61872
12bc0     F2 14 02 FB | 	rdlong	arg02, objptr
12bc4     78 00 00 FF 
12bc8     B0 E5 85 F1 | 	sub	objptr, ##61872
12bcc     00 12 06 F6 | 	mov	arg01, #0
12bd0     00 16 06 F6 | 	mov	arg03, #0
12bd4     80 3C B0 FD | 	call	#__system___basic_print_string
12bd8     00 12 06 F6 | 	mov	arg01, #0
12bdc     0A 14 06 F6 | 	mov	arg02, #10
12be0     00 16 06 F6 | 	mov	arg03, #0
12be4     18 3C B0 FD | 	call	#__system___basic_print_char
12be8     00 12 06 F6 | 	mov	arg01, #0
12bec     28 85 B0 FD | 	call	#__system___getiolock_0362
12bf0     FD 00 68 FC | 	wrlong	#0, result1
12bf4     56 00 00 FF 
12bf8     08 E4 05 F1 | 	add	objptr, ##44040
12bfc     F2 12 02 FB | 	rdlong	arg01, objptr
12c00     56 00 00 FF 
12c04     08 E4 85 F1 | 	sub	objptr, ##44040
12c08     01 12 66 F0 | 	shl	arg01, #1
12c0c     04 14 06 F6 | 	mov	arg02, #4
12c10     C8 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
12c14                 | ' position 2*editor_spaces,4 : print "Ready"
12c14     00 12 06 F6 | 	mov	arg01, #0
12c18     FC 84 B0 FD | 	call	#__system___getiolock_0362
12c1c     FD 12 02 F6 | 	mov	arg01, result1
12c20     40 2F B0 FD | 	call	#__system___lockmem
12c24     2B 01 00 FF 
12c28     4D 15 06 F6 | 	mov	arg02, ##@LR__4450
12c2c     00 12 06 F6 | 	mov	arg01, #0
12c30     00 16 06 F6 | 	mov	arg03, #0
12c34     20 3C B0 FD | 	call	#__system___basic_print_string
12c38     00 12 06 F6 | 	mov	arg01, #0
12c3c     0A 14 06 F6 | 	mov	arg02, #10
12c40     00 16 06 F6 | 	mov	arg03, #0
12c44     B8 3B B0 FD | 	call	#__system___basic_print_char
12c48     00 12 06 F6 | 	mov	arg01, #0
12c4c     C8 84 B0 FD | 	call	#__system___getiolock_0362
12c50     FD 00 68 FC | 	wrlong	#0, result1
12c54                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
12c54                 | ' 
12c54                 | ' for i=0 to 20: print sin(i) : next i
12c54     00 20 06 F6 | 	mov	local02, #0
12c58                 | LR__1550
12c58     00 12 06 F6 | 	mov	arg01, #0
12c5c     B8 84 B0 FD | 	call	#__system___getiolock_0362
12c60     FD 12 02 F6 | 	mov	arg01, result1
12c64     FC 2E B0 FD | 	call	#__system___lockmem
12c68     00 1E 06 F6 | 	mov	local01, #0
12c6c     10 13 52 F6 | 	abs	arg01, local02 wc
12c70     1F 22 C6 C9 |  if_b	decod	local03, #31
12c74     00 22 06 36 |  if_ae	mov	local03, #0
12c78     D0 55 B0 FD | 	call	#__system___float_fromuns
12c7c     11 FB 61 F5 | 	xor	result1, local03
12c80     FD 12 02 F6 | 	mov	arg01, result1
12c84     2C 62 B0 FD | 	call	#__system____builtin_sinf
12c88     FD 14 02 F6 | 	mov	arg02, result1
12c8c     23 24 06 F6 | 	mov	local04, #35
12c90     0F 13 02 F6 | 	mov	arg01, local01
12c94     00 16 06 F6 | 	mov	arg03, #0
12c98     23 18 06 F6 | 	mov	arg04, #35
12c9c     F0 5E B0 FD | 	call	#__system___basic_print_float
12ca0     FD 26 02 F6 | 	mov	local05, result1
12ca4     00 12 06 F6 | 	mov	arg01, #0
12ca8     0A 14 06 F6 | 	mov	arg02, #10
12cac     00 16 06 F6 | 	mov	arg03, #0
12cb0     4C 3B B0 FD | 	call	#__system___basic_print_char
12cb4     01 28 06 F6 | 	mov	local06, #1
12cb8     00 12 06 F6 | 	mov	arg01, #0
12cbc     58 84 B0 FD | 	call	#__system___getiolock_0362
12cc0     FD 00 68 FC | 	wrlong	#0, result1
12cc4     00 2A 06 F6 | 	mov	local07, #0
12cc8     01 20 06 F1 | 	add	local02, #1
12ccc     15 20 56 F2 | 	cmps	local02, #21 wc
12cd0     84 FF 9F CD |  if_b	jmp	#LR__1550
12cd4                 | ' '-------------------------------------------------------------------------------------------------------- 
12cd4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
12cd4                 | ' '--------------------------------------------------------------------------------------------------------
12cd4                 | ' 
12cd4                 | ' do
12cd4                 | LR__1551
12cd4     01 12 06 F6 | 	mov	arg01, #1
12cd8     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
12cdc     28 27 B0 FD | 	call	#_usbnew_spin2_get_key
12ce0     64 00 00 FF 
12ce4     48 E4 05 F1 | 	add	objptr, ##51272
12ce8     F2 FA 61 FC | 	wrlong	result1, objptr
12cec                 | '   return hkbd_led_rep
12cec     13 00 00 FF 
12cf0     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
12cf4     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
12cf8     13 00 00 FF 
12cfc     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
12d00     16 00 00 FF 
12d04     08 E4 05 F1 | 	add	objptr, ##11272
12d08     F2 FA 61 FC | 	wrlong	result1, objptr
12d0c                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
12d0c     16 00 00 FF 
12d10     08 E4 85 F1 | 	sub	objptr, ##11272
12d14     F2 1E 02 FB | 	rdlong	local01, objptr
12d18     64 00 00 FF 
12d1c     48 E4 85 F1 | 	sub	objptr, ##51272
12d20     01 1E 16 F2 | 	cmp	local01, #1 wc
12d24     BC 00 90 CD |  if_b	jmp	#LR__1552
12d28     64 00 00 FF 
12d2c     48 E4 05 F1 | 	add	objptr, ##51272
12d30     F2 28 02 FB | 	rdlong	local06, objptr
12d34     64 00 00 FF 
12d38     48 E4 85 F1 | 	sub	objptr, ##51272
12d3c     14 27 02 F6 | 	mov	local05, local06
12d40     04 26 16 F2 | 	cmp	local05, #4 wc
12d44     9C 00 90 3D |  if_ae	jmp	#LR__1552
12d48     78 00 00 FF 
12d4c     B4 E5 05 F1 | 	add	objptr, ##61876
12d50     F2 24 02 FB | 	rdlong	local04, objptr
12d54     78 00 00 FF 
12d58     B4 E5 85 F1 | 	sub	objptr, ##61876
12d5c     12 2B 02 F6 | 	mov	local07, local04
12d60     01 2A 0E F2 | 	cmp	local07, #1 wz
12d64     7C 00 90 5D |  if_ne	jmp	#LR__1552
12d68     04 00 00 FF 
12d6c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12d70     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12d74     04 00 00 FF 
12d78     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
12d7c     56 00 00 FF 
12d80     44 26 06 F6 | 	mov	local05, ##44100
12d84     0E 28 C6 F9 | 	decod	local06, #14
12d88     00 2A 06 F6 | 	mov	local07, #0
12d8c     03 00 00 FF 
12d90     DE 24 06 F6 | 	mov	local04, ##1758
12d94     07 12 06 F6 | 	mov	arg01, #7
12d98     56 00 00 FF 
12d9c     44 16 06 F6 | 	mov	arg03, ##44100
12da0     0E 18 C6 F9 | 	decod	arg04, #14
12da4     00 1A 06 F6 | 	mov	arg05, #0
12da8     03 00 00 FF 
12dac     DE 1C 06 F6 | 	mov	arg06, ##1758
12db0     0B 00 00 FF 
12db4     C0 E4 05 F1 | 	add	objptr, ##5824
12db8     74 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12dbc     0B 00 00 FF 
12dc0     C0 E4 85 F1 | 	sub	objptr, ##5824
12dc4     0A 12 06 F6 | 	mov	arg01, #10
12dc8     8C 30 B0 FD | 	call	#__system___waitms
12dcc     07 12 06 F6 | 	mov	arg01, #7
12dd0     0B 00 00 FF 
12dd4     C0 E4 05 F1 | 	add	objptr, ##5824
12dd8     A4 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12ddc     0B 00 00 FF 
12de0     C0 E4 85 F1 | 	sub	objptr, ##5824
12de4                 | LR__1552
12de4                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
12de4     64 00 00 FF 
12de8     48 E4 05 F1 | 	add	objptr, ##51272
12dec     F2 1E 02 FB | 	rdlong	local01, objptr
12df0     64 00 00 FF 
12df4     48 E4 85 F1 | 	sub	objptr, ##51272
12df8     04 1E 16 F2 | 	cmp	local01, #4 wc
12dfc     80 00 90 CD |  if_b	jmp	#LR__1553
12e00     64 00 00 FF 
12e04     48 E4 05 F1 | 	add	objptr, ##51272
12e08     F2 28 02 FB | 	rdlong	local06, objptr
12e0c     64 00 00 FF 
12e10     48 E4 85 F1 | 	sub	objptr, ##51272
12e14     14 27 02 F6 | 	mov	local05, local06
12e18     00 00 40 FF 
12e1c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
12e20     64 00 00 CF 
12e24     48 E4 05 C1 |  if_b	add	objptr, ##51272
12e28     F2 24 02 CB |  if_b	rdlong	local04, objptr
12e2c     64 00 00 CF 
12e30     48 E4 85 C1 |  if_b	sub	objptr, ##51272
12e34     12 2B E2 C8 |  if_b	getbyte	local07, local04, #0
12e38     E0 2A 16 C2 |  if_b	cmp	local07, #224 wc
12e3c     40 00 90 3D |  if_ae	jmp	#LR__1553
12e40     64 00 00 FF 
12e44     48 E4 05 F1 | 	add	objptr, ##51272
12e48     F2 1E 02 FB | 	rdlong	local01, objptr
12e4c     04 E4 05 F1 | 	add	objptr, #4
12e50     F2 1E 62 FC | 	wrlong	local01, objptr
12e54     16 00 00 FF 
12e58     08 E4 05 F1 | 	add	objptr, ##11272
12e5c     F2 02 68 FC | 	wrlong	#1, objptr
12e60     16 00 00 FF 
12e64     08 E4 85 F1 | 	sub	objptr, ##11272
12e68     F2 1E 02 FB | 	rdlong	local01, objptr
12e6c     16 00 00 FF 
12e70     0C E4 05 F1 | 	add	objptr, ##11276
12e74     F2 1E 62 FC | 	wrlong	local01, objptr
12e78     7A 00 00 FF 
12e7c     58 E4 85 F1 | 	sub	objptr, ##62552
12e80                 | LR__1553
12e80                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
12e80     64 00 00 FF 
12e84     48 E4 05 F1 | 	add	objptr, ##51272
12e88     F2 1E 02 FB | 	rdlong	local01, objptr
12e8c     64 00 00 FF 
12e90     48 E4 85 F1 | 	sub	objptr, ##51272
12e94     00 00 40 FF 
12e98     01 1E 16 F2 | 	cmp	local01, ##-2147483647 wc
12e9c     7A 00 00 3F 
12ea0     5C E4 05 31 |  if_ae	add	objptr, ##62556
12ea4     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12ea8     08 E4 85 31 |  if_ae	sub	objptr, #8
12eac     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12eb0     7A 00 00 3F 
12eb4     54 E4 85 31 |  if_ae	sub	objptr, ##62548
12eb8                 | ' if key=0 andalso rpt=1 then rptcnt+=1
12eb8     64 00 00 FF 
12ebc     48 E4 05 F1 | 	add	objptr, ##51272
12ec0     F2 1E 0A FB | 	rdlong	local01, objptr wz
12ec4     64 00 00 FF 
12ec8     48 E4 85 F1 | 	sub	objptr, ##51272
12ecc     7A 00 00 AF 
12ed0     54 E4 05 A1 |  if_e	add	objptr, ##62548
12ed4     F2 28 02 AB |  if_e	rdlong	local06, objptr
12ed8     7A 00 00 AF 
12edc     54 E4 85 A1 |  if_e	sub	objptr, ##62548
12ee0     14 27 02 A6 |  if_e	mov	local05, local06
12ee4     01 26 0E A2 |  if_e	cmp	local05, #1 wz
12ee8     7A 00 00 AF 
12eec     5C E4 05 A1 |  if_e	add	objptr, ##62556
12ef0     F2 1E 02 AB |  if_e	rdlong	local01, objptr
12ef4     01 1E 06 A1 |  if_e	add	local01, #1
12ef8     F2 1E 62 AC |  if_e	wrlong	local01, objptr
12efc     7A 00 00 AF 
12f00     5C E4 85 A1 |  if_e	sub	objptr, ##62556
12f04                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
12f04     64 00 00 FF 
12f08     48 E4 05 F1 | 	add	objptr, ##51272
12f0c     F2 1E 02 FB | 	rdlong	local01, objptr
12f10     64 00 00 FF 
12f14     48 E4 85 F1 | 	sub	objptr, ##51272
12f18     00 00 40 FF 
12f1c     00 1E 16 F2 | 	cmp	local01, ##-2147483648 wc
12f20     44 00 90 3D |  if_ae	jmp	#LR__1555
12f24     7A 00 00 FF 
12f28     5C E4 05 F1 | 	add	objptr, ##62556
12f2c     F2 1E 02 FB | 	rdlong	local01, objptr
12f30     7A 00 00 FF 
12f34     5C E4 85 F1 | 	sub	objptr, ##62556
12f38     19 1E 0E F2 | 	cmp	local01, #25 wz
12f3c     28 00 90 5D |  if_ne	jmp	#LR__1554
12f40     64 00 00 FF 
12f44     4C E4 05 F1 | 	add	objptr, ##51276
12f48     F2 1E 02 FB | 	rdlong	local01, objptr
12f4c     16 00 00 FF 
12f50     0C E4 05 F1 | 	add	objptr, ##11276
12f54     F2 1E 62 FC | 	wrlong	local01, objptr
12f58     04 E4 05 F1 | 	add	objptr, #4
12f5c     F2 2A 68 FC | 	wrlong	#21, objptr
12f60     7A 00 00 FF 
12f64     5C E4 85 F1 | 	sub	objptr, ##62556
12f68                 | LR__1554
12f68                 | LR__1555
12f68                 | ' 
12f68                 | ' 
12f68                 | ' if key3<>0 then
12f68     7A 00 00 FF 
12f6c     58 E4 05 F1 | 	add	objptr, ##62552
12f70     F2 2C 0A FB | 	rdlong	local08, objptr wz
12f74     7A 00 00 FF 
12f78     58 E4 85 F1 | 	sub	objptr, ##62552
12f7c     54 FD 9F AD |  if_e	jmp	#LR__1551
12f80                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
12f80     78 00 00 FF 
12f84     B4 E5 05 F1 | 	add	objptr, ##61876
12f88     F2 1E 02 FB | 	rdlong	local01, objptr
12f8c     78 00 00 FF 
12f90     B4 E5 85 F1 | 	sub	objptr, ##61876
12f94     01 1E 0E F2 | 	cmp	local01, #1 wz
12f98     5C 00 90 5D |  if_ne	jmp	#LR__1556
12f9c     01 00 00 FF 
12fa0     00 EA 05 F1 | 	add	ptr__dat__, ##512
12fa4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12fa8     01 00 00 FF 
12fac     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12fb0     56 00 00 FF 
12fb4     44 26 06 F6 | 	mov	local05, ##44100
12fb8     0E 28 C6 F9 | 	decod	local06, #14
12fbc     03 00 00 FF 
12fc0     94 2A 06 F6 | 	mov	local07, ##1684
12fc4     01 24 66 F6 | 	neg	local04, #1
12fc8     07 12 06 F6 | 	mov	arg01, #7
12fcc     56 00 00 FF 
12fd0     44 16 06 F6 | 	mov	arg03, ##44100
12fd4     0E 18 C6 F9 | 	decod	arg04, #14
12fd8     03 00 00 FF 
12fdc     94 1A 06 F6 | 	mov	arg05, ##1684
12fe0     01 1C 66 F6 | 	neg	arg06, #1
12fe4     0B 00 00 FF 
12fe8     C0 E4 05 F1 | 	add	objptr, ##5824
12fec     40 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12ff0     0B 00 00 FF 
12ff4     C0 E4 85 F1 | 	sub	objptr, ##5824
12ff8                 | LR__1556
12ff8     7A 00 00 FF 
12ffc     58 E4 05 F1 | 	add	objptr, ##62552
13000     F2 12 02 FB | 	rdlong	arg01, objptr
13004     7A 00 00 FF 
13008     58 E4 85 F1 | 	sub	objptr, ##62552
1300c     04 F8 BF FD | 	call	#_scantochar
13010     7A 00 00 FF 
13014     60 E4 05 F1 | 	add	objptr, ##62560
13018     F2 FA 61 FC | 	wrlong	result1, objptr
1301c                 | '   if leds and 2 = 2 then 
1301c     10 E4 85 F1 | 	sub	objptr, #16
13020     F2 1E 0A FB | 	rdlong	local01, objptr wz
13024     7A 00 00 FF 
13028     50 E4 85 F1 | 	sub	objptr, ##62544
1302c     68 01 90 AD |  if_e	jmp	#LR__1564
13030                 | '     if key4>96 andalso key4<123 then
13030     7A 00 00 FF 
13034     60 E4 05 F1 | 	add	objptr, ##62560
13038     F2 1E 02 FB | 	rdlong	local01, objptr
1303c     7A 00 00 FF 
13040     60 E4 85 F1 | 	sub	objptr, ##62560
13044     61 1E 56 F2 | 	cmps	local01, #97 wc
13048     40 00 90 CD |  if_b	jmp	#LR__1557
1304c     7A 00 00 FF 
13050     60 E4 05 F1 | 	add	objptr, ##62560
13054     F2 28 02 FB | 	rdlong	local06, objptr
13058     7A 00 00 FF 
1305c     60 E4 85 F1 | 	sub	objptr, ##62560
13060     14 27 02 F6 | 	mov	local05, local06
13064     7B 26 56 F2 | 	cmps	local05, #123 wc
13068     20 00 90 3D |  if_ae	jmp	#LR__1557
1306c     7A 00 00 FF 
13070     60 E4 05 F1 | 	add	objptr, ##62560
13074     F2 1E 02 FB | 	rdlong	local01, objptr
13078     20 1E 86 F1 | 	sub	local01, #32
1307c     F2 1E 62 FC | 	wrlong	local01, objptr
13080     7A 00 00 FF 
13084     60 E4 85 F1 | 	sub	objptr, ##62560
13088     0C 01 90 FD | 	jmp	#LR__1563
1308c                 | LR__1557
1308c     7A 00 00 FF 
13090     60 E4 05 F1 | 	add	objptr, ##62560
13094     F2 1E 02 FB | 	rdlong	local01, objptr
13098     7A 00 00 FF 
1309c     60 E4 85 F1 | 	sub	objptr, ##62560
130a0     41 1E 56 F2 | 	cmps	local01, #65 wc
130a4     40 00 90 CD |  if_b	jmp	#LR__1558
130a8     7A 00 00 FF 
130ac     60 E4 05 F1 | 	add	objptr, ##62560
130b0     F2 28 02 FB | 	rdlong	local06, objptr
130b4     7A 00 00 FF 
130b8     60 E4 85 F1 | 	sub	objptr, ##62560
130bc     14 27 02 F6 | 	mov	local05, local06
130c0     5B 26 56 F2 | 	cmps	local05, #91 wc
130c4     20 00 90 3D |  if_ae	jmp	#LR__1558
130c8     7A 00 00 FF 
130cc     60 E4 05 F1 | 	add	objptr, ##62560
130d0     F2 1E 02 FB | 	rdlong	local01, objptr
130d4     20 1E 06 F1 | 	add	local01, #32
130d8     F2 1E 62 FC | 	wrlong	local01, objptr
130dc     7A 00 00 FF 
130e0     60 E4 85 F1 | 	sub	objptr, ##62560
130e4     B0 00 90 FD | 	jmp	#LR__1562
130e8                 | LR__1558
130e8     7A 00 00 FF 
130ec     60 E4 05 F1 | 	add	objptr, ##62560
130f0     F2 1E 02 FB | 	rdlong	local01, objptr
130f4     7A 00 00 FF 
130f8     60 E4 85 F1 | 	sub	objptr, ##62560
130fc     17 1E 56 F2 | 	cmps	local01, #23 wc
13100     40 00 90 CD |  if_b	jmp	#LR__1559
13104     7A 00 00 FF 
13108     60 E4 05 F1 | 	add	objptr, ##62560
1310c     F2 28 02 FB | 	rdlong	local06, objptr
13110     7A 00 00 FF 
13114     60 E4 85 F1 | 	sub	objptr, ##62560
13118     14 27 02 F6 | 	mov	local05, local06
1311c     20 26 56 F2 | 	cmps	local05, #32 wc
13120     20 00 90 3D |  if_ae	jmp	#LR__1559
13124     7A 00 00 FF 
13128     60 E4 05 F1 | 	add	objptr, ##62560
1312c     F2 1E 02 FB | 	rdlong	local01, objptr
13130     09 1E 86 F1 | 	sub	local01, #9
13134     F2 1E 62 FC | 	wrlong	local01, objptr
13138     7A 00 00 FF 
1313c     60 E4 85 F1 | 	sub	objptr, ##62560
13140     54 00 90 FD | 	jmp	#LR__1561
13144                 | LR__1559
13144     7A 00 00 FF 
13148     60 E4 05 F1 | 	add	objptr, ##62560
1314c     F2 1E 02 FB | 	rdlong	local01, objptr
13150     7A 00 00 FF 
13154     60 E4 85 F1 | 	sub	objptr, ##62560
13158     0E 1E 56 F2 | 	cmps	local01, #14 wc
1315c     38 00 90 CD |  if_b	jmp	#LR__1560
13160     7A 00 00 FF 
13164     60 E4 05 F1 | 	add	objptr, ##62560
13168     F2 28 02 FB | 	rdlong	local06, objptr
1316c     7A 00 00 FF 
13170     60 E4 85 F1 | 	sub	objptr, ##62560
13174     14 27 02 F6 | 	mov	local05, local06
13178     17 26 56 F2 | 	cmps	local05, #23 wc
1317c     7A 00 00 CF 
13180     60 E4 05 C1 |  if_b	add	objptr, ##62560
13184     F2 1E 02 CB |  if_b	rdlong	local01, objptr
13188     27 1E 06 C1 |  if_b	add	local01, #39
1318c     F2 1E 62 CC |  if_b	wrlong	local01, objptr
13190     7A 00 00 CF 
13194     60 E4 85 C1 |  if_b	sub	objptr, ##62560
13198                 | LR__1560
13198                 | LR__1561
13198                 | LR__1562
13198                 | LR__1563
13198                 | LR__1564
13198                 | '  
13198                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
13198     7A 00 00 FF 
1319c     60 E4 05 F1 | 	add	objptr, ##62560
131a0     F2 1E 02 FB | 	rdlong	local01, objptr
131a4     7A 00 00 FF 
131a8     60 E4 85 F1 | 	sub	objptr, ##62560
131ac     01 1E 56 F2 | 	cmps	local01, #1 wc
131b0     90 00 90 CD |  if_b	jmp	#LR__1565
131b4     7A 00 00 FF 
131b8     60 E4 05 F1 | 	add	objptr, ##62560
131bc     F2 28 02 FB | 	rdlong	local06, objptr
131c0     7A 00 00 FF 
131c4     60 E4 85 F1 | 	sub	objptr, ##62560
131c8     14 27 02 F6 | 	mov	local05, local06
131cc     7F 26 56 F2 | 	cmps	local05, #127 wc
131d0     38 E4 05 C1 |  if_b	add	objptr, #56
131d4     F2 24 E2 CA |  if_b	rdword	local04, objptr
131d8     38 E4 85 C1 |  if_b	sub	objptr, #56
131dc     12 2B 32 C9 |  if_b	getword	local07, local04, #0
131e0     FE 2A 16 C2 |  if_b	cmp	local07, #254 wc
131e4     5C 00 90 3D |  if_ae	jmp	#LR__1565
131e8     7A 00 00 FF 
131ec     60 E4 05 F1 | 	add	objptr, ##62560
131f0     F2 12 02 FB | 	rdlong	arg01, objptr
131f4     7A 00 00 FF 
131f8     60 E4 85 F1 | 	sub	objptr, ##62560
131fc     38 4B B0 FD | 	call	#__system__Chr_S
13200     FD 2E 02 F6 | 	mov	local09, result1
13204     55 00 00 FF 
13208     F0 E5 05 F1 | 	add	objptr, ##44016
1320c     F2 12 02 FB | 	rdlong	arg01, objptr
13210     55 00 00 FF 
13214     F0 E5 85 F1 | 	sub	objptr, ##44016
13218     17 15 02 F6 | 	mov	arg02, local09
1321c     A0 29 B0 FD | 	call	#__system___string_concat
13220     55 00 00 FF 
13224     F0 E5 05 F1 | 	add	objptr, ##44016
13228     F2 FA 61 FC | 	wrlong	result1, objptr
1322c     24 00 00 FF 
13230     70 E4 05 F1 | 	add	objptr, ##18544
13234     F2 12 02 FB | 	rdlong	arg01, objptr
13238     7A 00 00 FF 
1323c     60 E4 85 F1 | 	sub	objptr, ##62560
13240     E0 16 B0 FD | 	call	#_hg010b_spin2_putchar
13244                 | LR__1565
13244                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0) 'end of line reached
13244     7A 00 00 FF 
13248     60 E4 05 F1 | 	add	objptr, ##62560
1324c     F2 1E 02 FB | 	rdlong	local01, objptr
13250     7A 00 00 FF 
13254     60 E4 85 F1 | 	sub	objptr, ##62560
13258     01 1E 56 F2 | 	cmps	local01, #1 wc
1325c     D0 00 90 CD |  if_b	jmp	#LR__1566
13260     7A 00 00 FF 
13264     60 E4 05 F1 | 	add	objptr, ##62560
13268     F2 28 02 FB | 	rdlong	local06, objptr
1326c     7A 00 00 FF 
13270     60 E4 85 F1 | 	sub	objptr, ##62560
13274     14 27 02 F6 | 	mov	local05, local06
13278     7F 26 56 F2 | 	cmps	local05, #127 wc
1327c     B0 00 90 3D |  if_ae	jmp	#LR__1566
13280     38 E4 05 F1 | 	add	objptr, #56
13284     F2 24 E2 FA | 	rdword	local04, objptr
13288     38 E4 85 F1 | 	sub	objptr, #56
1328c     12 2B 32 F9 | 	getword	local07, local04, #0
13290     FE 2A 0E F2 | 	cmp	local07, #254 wz
13294     78 00 00 AF 
13298     B4 E5 05 A1 |  if_e	add	objptr, ##61876
1329c     F2 30 02 AB |  if_e	rdlong	local10, objptr
132a0     78 00 00 AF 
132a4     B4 E5 85 A1 |  if_e	sub	objptr, ##61876
132a8     18 33 02 A6 |  if_e	mov	local11, local10
132ac     01 32 0E A2 |  if_e	cmp	local11, #1 wz
132b0     7C 00 90 5D |  if_ne	jmp	#LR__1566
132b4     04 00 00 FF 
132b8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
132bc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
132c0     04 00 00 FF 
132c4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
132c8     56 00 00 FF 
132cc     44 26 06 F6 | 	mov	local05, ##44100
132d0     0E 28 C6 F9 | 	decod	local06, #14
132d4     00 2A 06 F6 | 	mov	local07, #0
132d8     03 00 00 FF 
132dc     DE 24 06 F6 | 	mov	local04, ##1758
132e0     07 12 06 F6 | 	mov	arg01, #7
132e4     56 00 00 FF 
132e8     44 16 06 F6 | 	mov	arg03, ##44100
132ec     0E 18 C6 F9 | 	decod	arg04, #14
132f0     00 1A 06 F6 | 	mov	arg05, #0
132f4     03 00 00 FF 
132f8     DE 1C 06 F6 | 	mov	arg06, ##1758
132fc     0B 00 00 FF 
13300     C0 E4 05 F1 | 	add	objptr, ##5824
13304     28 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
13308     0B 00 00 FF 
1330c     C0 E4 85 F1 | 	sub	objptr, ##5824
13310     2C 13 06 F6 | 	mov	arg01, #300
13314     40 2B B0 FD | 	call	#__system___waitms
13318     00 12 06 F6 | 	mov	arg01, #0
1331c     0B 00 00 FF 
13320     C0 E4 05 F1 | 	add	objptr, ##5824
13324     58 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
13328     0B 00 00 FF 
1332c     C0 E4 85 F1 | 	sub	objptr, ##5824
13330                 | LR__1566
13330                 | '  
13330                 | '   'tab
13330                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
13330     7A 00 00 FF 
13334     58 E4 05 F1 | 	add	objptr, ##62552
13338     F2 1E 02 FB | 	rdlong	local01, objptr
1333c     7A 00 00 FF 
13340     58 E4 85 F1 | 	sub	objptr, ##62552
13344     0F 1F E2 F8 | 	getbyte	local01, local01, #0
13348     2B 1E 0E F2 | 	cmp	local01, #43 wz
1334c     B4 00 90 5D |  if_ne	jmp	#LR__1567
13350     38 E4 05 F1 | 	add	objptr, #56
13354     F2 28 E2 FA | 	rdword	local06, objptr
13358     38 E4 85 F1 | 	sub	objptr, #56
1335c     14 27 32 F9 | 	getword	local05, local06, #0
13360     F0 26 16 F2 | 	cmp	local05, #240 wc
13364     9C 00 90 CD |  if_b	jmp	#LR__1567
13368     78 00 00 FF 
1336c     B4 E5 05 F1 | 	add	objptr, ##61876
13370     F2 24 02 FB | 	rdlong	local04, objptr
13374     78 00 00 FF 
13378     B4 E5 85 F1 | 	sub	objptr, ##61876
1337c     12 2B 02 F6 | 	mov	local07, local04
13380     01 2A 0E F2 | 	cmp	local07, #1 wz
13384     7C 00 90 5D |  if_ne	jmp	#LR__1567
13388     04 00 00 FF 
1338c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
13390     F5 14 02 F6 | 	mov	arg02, ptr__dat__
13394     04 00 00 FF 
13398     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
1339c     56 00 00 FF 
133a0     44 26 06 F6 | 	mov	local05, ##44100
133a4     0E 28 C6 F9 | 	decod	local06, #14
133a8     00 2A 06 F6 | 	mov	local07, #0
133ac     03 00 00 FF 
133b0     DE 24 06 F6 | 	mov	local04, ##1758
133b4     00 12 06 F6 | 	mov	arg01, #0
133b8     56 00 00 FF 
133bc     44 16 06 F6 | 	mov	arg03, ##44100
133c0     0E 18 C6 F9 | 	decod	arg04, #14
133c4     00 1A 06 F6 | 	mov	arg05, #0
133c8     03 00 00 FF 
133cc     DE 1C 06 F6 | 	mov	arg06, ##1758
133d0     0B 00 00 FF 
133d4     C0 E4 05 F1 | 	add	objptr, ##5824
133d8     54 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
133dc     0B 00 00 FF 
133e0     C0 E4 85 F1 | 	sub	objptr, ##5824
133e4     2C 13 06 F6 | 	mov	arg01, #300
133e8     6C 2A B0 FD | 	call	#__system___waitms
133ec     00 12 06 F6 | 	mov	arg01, #0
133f0     0B 00 00 FF 
133f4     C0 E4 05 F1 | 	add	objptr, ##5824
133f8     84 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
133fc     0B 00 00 FF 
13400     C0 E4 85 F1 | 	sub	objptr, ##5824
13404                 | LR__1567
13404                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
13404     7A 00 00 FF 
13408     58 E4 05 F1 | 	add	objptr, ##62552
1340c     F2 1E 02 FB | 	rdlong	local01, objptr
13410     7A 00 00 FF 
13414     58 E4 85 F1 | 	sub	objptr, ##62552
13418     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1341c     2B 1E 0E F2 | 	cmp	local01, #43 wz
13420     AC 00 90 5D |  if_ne	jmp	#LR__1570
13424     38 E4 05 F1 | 	add	objptr, #56
13428     F2 28 E2 FA | 	rdword	local06, objptr
1342c     38 E4 85 F1 | 	sub	objptr, #56
13430     14 27 32 F9 | 	getword	local05, local06, #0
13434     F0 26 16 F2 | 	cmp	local05, #240 wc
13438     94 00 90 3D |  if_ae	jmp	#LR__1570
1343c     38 E4 05 F1 | 	add	objptr, #56
13440     F2 1E E2 FA | 	rdword	local01, objptr
13444     0F 27 52 F6 | 	abs	local05, local01 wc
13448     13 27 42 F8 | 	getnib	local05, local05, #0
1344c     13 27 82 F6 | 	negc	local05, local05
13450     13 29 52 F6 | 	abs	local06, local05 wc
13454     01 28 46 F0 | 	shr	local06, #1
13458     14 29 82 F6 | 	negc	local06, local06
1345c     7A 00 00 FF 
13460     2C E4 05 F1 | 	add	objptr, ##62508
13464     F2 28 62 FC | 	wrlong	local06, objptr
13468     14 21 02 F6 | 	mov	local02, local06
1346c     7A 00 00 FF 
13470     64 E4 85 F1 | 	sub	objptr, ##62564
13474                 | LR__1568
13474     08 20 56 F2 | 	cmps	local02, #8 wc
13478     54 00 90 3D |  if_ae	jmp	#LR__1569
1347c     55 00 00 FF 
13480     F0 E5 05 F1 | 	add	objptr, ##44016
13484     F2 12 02 FB | 	rdlong	arg01, objptr
13488     55 00 00 FF 
1348c     F0 E5 85 F1 | 	sub	objptr, ##44016
13490     2B 01 00 FF 
13494     53 29 06 F6 | 	mov	local06, ##@LR__4451
13498     14 15 02 F6 | 	mov	arg02, local06
1349c     20 27 B0 FD | 	call	#__system___string_concat
134a0     55 00 00 FF 
134a4     F0 E5 05 F1 | 	add	objptr, ##44016
134a8     F2 FA 61 FC | 	wrlong	result1, objptr
134ac     55 00 00 FF 
134b0     F0 E5 85 F1 | 	sub	objptr, ##44016
134b4     2B 01 00 FF 
134b8     55 13 06 F6 | 	mov	arg01, ##@LR__4452
134bc     80 16 B0 FD | 	call	#_hg010b_spin2_write
134c0     10 27 02 F6 | 	mov	local05, local02
134c4     01 26 06 F1 | 	add	local05, #1
134c8     13 21 02 F6 | 	mov	local02, local05
134cc     A4 FF 9F FD | 	jmp	#LR__1568
134d0                 | LR__1569
134d0                 | LR__1570
134d0                 | '  
134d0                 | '   'backspace
134d0                 | '   if (key3 and 255) = 42 then 
134d0     7A 00 00 FF 
134d4     58 E4 05 F1 | 	add	objptr, ##62552
134d8     F2 1E 02 FB | 	rdlong	local01, objptr
134dc     7A 00 00 FF 
134e0     58 E4 85 F1 | 	sub	objptr, ##62552
134e4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
134e8     2A 1E 0E F2 | 	cmp	local01, #42 wz
134ec     D4 00 90 5D |  if_ne	jmp	#LR__1575
134f0                 | '       if v.cursor_x>4 then 
134f0     38 E4 05 F1 | 	add	objptr, #56
134f4     F2 1E E2 FA | 	rdword	local01, objptr
134f8     38 E4 85 F1 | 	sub	objptr, #56
134fc     05 1E 16 F2 | 	cmp	local01, #5 wc
13500     9C 00 90 CD |  if_b	jmp	#LR__1573
13504     55 00 00 FF 
13508     F0 E5 05 F1 | 	add	objptr, ##44016
1350c     F2 2A 02 FB | 	rdlong	local07, objptr
13510     55 00 00 FF 
13514     F0 E5 85 F1 | 	sub	objptr, ##44016
13518     15 13 02 F6 | 	mov	arg01, local07
1351c     09 35 02 F6 | 	mov	local12, arg01
13520     97 06 48 FB | 	callpa	#(@LR__1572-@LR__1571)>>2,fcache_load_ptr_
13524                 | LR__1571
13524     1A FB C9 FA | 	rdbyte	result1, local12 wz
13528     01 34 06 51 |  if_ne	add	local12, #1
1352c     F4 FF 9F 5D |  if_ne	jmp	#LR__1571
13530                 | LR__1572
13530     09 35 82 F1 | 	sub	local12, arg01
13534     1A 15 02 F6 | 	mov	arg02, local12
13538     01 14 86 F1 | 	sub	arg02, #1
1353c     15 13 02 F6 | 	mov	arg01, local07
13540     30 46 B0 FD | 	call	#__system__Left_S
13544     55 00 00 FF 
13548     F0 E5 05 F1 | 	add	objptr, ##44016
1354c     F2 FA 61 FC | 	wrlong	result1, objptr
13550     55 00 00 FF 
13554     B8 E5 85 F1 | 	sub	objptr, ##43960
13558     F2 12 E2 FA | 	rdword	arg01, objptr
1355c     02 12 86 F1 | 	sub	arg01, #2
13560     02 E4 05 F1 | 	add	objptr, #2
13564     F2 14 C2 FA | 	rdbyte	arg02, objptr
13568     3A E4 85 F1 | 	sub	objptr, #58
1356c     6C 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13570     20 12 06 F6 | 	mov	arg01, #32
13574     AC 13 B0 FD | 	call	#_hg010b_spin2_putchar
13578     38 E4 05 F1 | 	add	objptr, #56
1357c     F2 12 E2 FA | 	rdword	arg01, objptr
13580     02 12 86 F1 | 	sub	arg01, #2
13584     02 E4 05 F1 | 	add	objptr, #2
13588     F2 28 C2 FA | 	rdbyte	local06, objptr
1358c     3A E4 85 F1 | 	sub	objptr, #58
13590     14 27 E2 F8 | 	getbyte	local05, local06, #0
13594     13 15 02 F6 | 	mov	arg02, local05
13598     40 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1359c     24 00 90 FD | 	jmp	#LR__1574
135a0                 | LR__1573
135a0     2B 01 00 FF 
135a4     57 1F 06 F6 | 	mov	local01, ##@LR__4453
135a8     55 00 00 FF 
135ac     F0 E5 05 F1 | 	add	objptr, ##44016
135b0     F2 1E 62 FC | 	wrlong	local01, objptr
135b4     55 00 00 FF 
135b8     B8 E5 85 F1 | 	sub	objptr, ##43960
135bc     F2 08 58 FC | 	wrword	#4, objptr
135c0     38 E4 85 F1 | 	sub	objptr, #56
135c4                 | LR__1574
135c4                 | LR__1575
135c4                 | '    
135c4                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
135c4                 | '  
135c4                 | '   if key4=key_enter then 
135c4     7A 00 00 FF 
135c8     60 E4 05 F1 | 	add	objptr, ##62560
135cc     F2 2C 02 FB | 	rdlong	local08, objptr
135d0     7A 00 00 FF 
135d4     60 E4 85 F1 | 	sub	objptr, ##62560
135d8     8D 2C 0E F2 | 	cmp	local08, #141 wz
135dc     50 00 90 5D |  if_ne	jmp	#LR__1576
135e0     BC 16 B0 FD | 	call	#_hg010b_spin2_crlf
135e4     34 D4 BE FD | 	call	#_interpret
135e8     2B 01 00 FF 
135ec     58 1F 06 F6 | 	mov	local01, ##@LR__4454
135f0     55 00 00 FF 
135f4     F0 E5 05 F1 | 	add	objptr, ##44016
135f8     F2 1E 62 FC | 	wrlong	local01, objptr
135fc     1A FA 61 FD | 	getct	result1
13600     24 00 00 FF 
13604     78 E4 05 F1 | 	add	objptr, ##18552
13608     F2 28 02 FB | 	rdlong	local06, objptr
1360c     14 27 02 F6 | 	mov	local05, local06
13610     13 FB 81 F1 | 	sub	result1, local05
13614     F2 FA 61 FC | 	wrlong	result1, objptr
13618     14 E4 85 F1 | 	sub	objptr, #20
1361c     F2 00 68 FC | 	wrlong	#0, objptr
13620     08 E4 05 F1 | 	add	objptr, #8
13624     F2 00 68 FC | 	wrlong	#0, objptr
13628     7A 00 00 FF 
1362c     5C E4 85 F1 | 	sub	objptr, ##62556
13630                 | LR__1576
13630     7A 00 00 FF 
13634     58 E4 05 F1 | 	add	objptr, ##62552
13638     F2 00 68 FC | 	wrlong	#0, objptr
1363c     7A 00 00 FF 
13640     58 E4 85 F1 | 	sub	objptr, ##62552
13644     8C F6 9F FD | 	jmp	#LR__1551
13648     A7 F0 03 F6 | 	mov	ptra, fp
1364c     B2 00 A0 FD | 	call	#popregs_
13650                 | _program_ret
13650     2D 00 64 FD | 	ret
13654                 | 
13654                 | ' '' this is not a main program.
13654                 | ' 
13654                 | ' '****************************************************************************************************************
13654                 | ' '                                                                                                             	*
13654                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
13654                 | ' '                                                                                                            	*
13654                 | ' ' mode - mode #, see below											*
13654                 | ' ' base - HDMI base pin												*
13654                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
13654                 | ' '														*
13654                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
13654                 | ' '' set bit #15 for custom timings														*
13654                 | ' '' p - 1 - psram, 0 - hub											*
13654                 | ' '' t - 1 - graphics, 0 - text											*
13654                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
13654                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
13654                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
13654                 | ' '														*
13654                 | ' '****************************************************************************************************************
13654                 | ' 
13654                 | ' pub start(base,mb):result |i
13654                 | _hg010b_spin2_start
13654                 | ' 
13654                 | ' '--------------------------- initialize pointers and variables
13654                 | ' 
13654                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
13654     30 E4 05 F1 | 	add	objptr, #48
13658     F2 FA 01 F6 | 	mov	result1, objptr
1365c     28 E4 85 F1 | 	sub	objptr, #40
13660     F2 FA 61 FC | 	wrlong	result1, objptr
13664                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
13664                 | ' hdmibase:=base							' HDMI base pin, 8*n
13664     18 E4 05 F1 | 	add	objptr, #24
13668     F2 12 62 FC | 	wrlong	arg01, objptr
1366c                 | ' mailbox_ptr:=mb		
1366c     04 E4 05 F1 | 	add	objptr, #4
13670     F2 14 62 FC | 	wrlong	arg02, objptr
13674                 | ' mailbox0:=mb				' PSRAM mailbox pointer
13674     C1 E5 05 F1 | 	add	objptr, #449
13678     F2 14 62 FC | 	wrlong	arg02, objptr
1367c                 | ' sprite_ptr:=@spr1ptr
1367c     D8 E4 85 F1 | 	sub	objptr, #216
13680     F2 FA 01 F6 | 	mov	result1, objptr
13684     E5 E4 85 F1 | 	sub	objptr, #229
13688     F2 FA 61 FC | 	wrlong	result1, objptr
1368c                 | ' 
1368c                 | ' 		'
1368c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1368c     E5 E4 05 F1 | 	add	objptr, #229
13690     F2 FA 01 FB | 	rdlong	result1, objptr
13694     D0 FA 05 F1 | 	add	result1, #208
13698     FD 10 58 FC | 	wrword	#8, result1
1369c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1369c     F2 16 02 FB | 	rdlong	arg03, objptr
136a0     D2 16 06 F1 | 	add	arg03, #210
136a4     0B 21 58 FC | 	wrword	#16, arg03
136a8                 | ' leading_spaces:=0				'
136a8     A5 E5 05 F1 | 	add	objptr, #421
136ac     F2 00 68 FC | 	wrlong	#0, objptr
136b0                 | ' 
136b0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
136b0     99 E4 85 F1 | 	sub	objptr, #153
136b4     00 00 A0 FF 
136b8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
136bc                 | ' emptydl[1]:=0
136bc     04 E4 05 F1 | 	add	objptr, #4
136c0     F2 00 68 FC | 	wrlong	#0, objptr
136c4                 | ' 
136c4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
136c4                 | ' 
136c4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
136c4     28 E5 85 F1 | 	sub	objptr, #296
136c8     F2 02 68 FC | 	wrlong	#1, objptr
136cc                 | ' if s_debug<>0
136cc                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
136cc     20 00 80 FF 
136d0     F2 00 68 FC | 	wrlong	##16384, objptr
136d4     F5 E4 85 F1 | 	sub	objptr, #245
136d8                 | ' setmode()							' set the mode, see below
136d8     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
136dc                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
136dc     45 E4 05 F1 | 	add	objptr, #69
136e0     F2 FA 01 F6 | 	mov	result1, objptr
136e4     35 E4 85 F1 | 	sub	objptr, #53
136e8     F2 FA 61 FC | 	wrlong	result1, objptr
136ec                 | ' cursor_ptr:=@cursor_x						
136ec     28 E4 05 F1 | 	add	objptr, #40
136f0     F2 16 02 F6 | 	mov	arg03, objptr
136f4     2C E4 85 F1 | 	sub	objptr, #44
136f8     F2 16 62 FC | 	wrlong	arg03, objptr
136fc                 | ' fontnum:=0  							' start with a PC type font 
136fc     55 E4 05 F1 | 	add	objptr, #85
13700     F2 00 68 FC | 	wrlong	#0, objptr
13704                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
13704     1C E4 05 F1 | 	add	objptr, #28
13708     F2 12 02 F6 | 	mov	arg01, objptr
1370c     7D E4 85 F1 | 	sub	objptr, #125
13710     10 00 00 FF 
13714     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
13718     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1371c     10 00 00 FF 
13720     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
13724     10 16 06 F6 | 	mov	arg03, #16
13728     58 23 B0 FD | 	call	#__system____builtin_memmove
1372c                 | ' leading_spaces:=0
1372c     01 00 00 FF 
13730     B2 E4 05 F1 | 	add	objptr, ##690
13734     F2 00 68 FC | 	wrlong	#0, objptr
13738     01 00 00 FF 
1373c     B2 E4 85 F1 | 	sub	objptr, ##690
13740                 | ' '---------------------------- initialize a cursor (MSDOS type)
13740                 | ' 
13740                 | ' initcursor(154)
13740     9A 12 06 F6 | 	mov	arg01, #154
13744     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
13748                 | ' 
13748                 | ' '---------------------------- start the cog
13748                 | ' 
13748                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
13748     10 00 00 FF 
1374c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
13750     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
13754     10 00 00 FF 
13758     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1375c     10 E4 05 F1 | 	add	objptr, #16
13760     10 FA 05 F6 | 	mov	result1, #16
13764     28 E4 61 FD | 	setq	objptr
13768     0A FB F1 FC | 	coginit	result1, arg02 wc
1376c     01 FA 65 C6 |  if_b	neg	result1, #1
13770     1C E4 05 F1 | 	add	objptr, #28
13774     F2 FA 61 FC | 	wrlong	result1, objptr
13778     2C E4 85 F1 | 	sub	objptr, #44
1377c                 | ' waitms(40)							' wait for stabilize
1377c     28 12 06 F6 | 	mov	arg01, #40
13780     D4 26 B0 FD | 	call	#__system___waitms
13784                 | ' return cog							' return the driver's cog #
13784     2C E4 05 F1 | 	add	objptr, #44
13788     F2 FA 01 FB | 	rdlong	result1, objptr
1378c     2C E4 85 F1 | 	sub	objptr, #44
13790                 | _hg010b_spin2_start_ret
13790     2D 00 64 FD | 	ret
13794                 | 
13794                 | ' 
13794                 | ' 
13794                 | ' '**************************************************************************************************************** 
13794                 | ' '                                                                                                             	*
13794                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
13794                 | ' '  Mode number - see start() above or bits below								*
13794                 | ' '                                                                                                             	*
13794                 | ' '****************************************************************************************************************
13794                 | ' 
13794                 | ' '---------------------------- initialize a cursor (MSDOS type)
13794                 | ' pub initcursor(color) |i
13794                 | _hg010b_spin2_initcursor
13794     03 4A 05 F6 | 	mov	COUNT_, #3
13798     A8 00 A0 FD | 	call	#pushregs_
1379c     09 1F 02 F6 | 	mov	local01, arg01
137a0                 | ' 
137a0                 | ' cursor_x:=0							' place the cursor at 0:0
137a0     38 E4 05 F1 | 	add	objptr, #56
137a4     F2 00 58 FC | 	wrword	#0, objptr
137a8                 | ' cursor_y:=0
137a8     02 E4 05 F1 | 	add	objptr, #2
137ac     F2 00 48 FC | 	wrbyte	#0, objptr
137b0                 | ' repeat i from 0 to 111
137b0     00 20 06 F6 | 	mov	local02, #0
137b4     F8 E5 05 F1 | 	add	objptr, #504
137b8     97 1A 48 FB | 	callpa	#(@LR__1582-@LR__1580)>>2,fcache_load_ptr_
137bc                 | LR__1580
137bc                 | '   cursor[i]:=0
137bc     10 23 02 F6 | 	mov	local03, local02
137c0     F2 22 02 F1 | 	add	local03, objptr
137c4     11 01 48 FC | 	wrbyte	#0, local03
137c8     01 20 06 F1 | 	add	local02, #1
137cc     70 20 56 F2 | 	cmps	local02, #112 wc
137d0     E8 FF 9F CD |  if_b	jmp	#LR__1580
137d4                 | ' repeat i from 112 to 127
137d4     70 20 06 F6 | 	mov	local02, #112
137d8                 | LR__1581
137d8                 | '   cursor[i]:=color  
137d8     10 23 02 F6 | 	mov	local03, local02
137dc     F2 22 02 F1 | 	add	local03, objptr
137e0     11 1F 42 FC | 	wrbyte	local01, local03
137e4     01 20 06 F1 | 	add	local02, #1
137e8     80 20 16 F2 | 	cmp	local02, #128 wc
137ec     E8 FF 9F CD |  if_b	jmp	#LR__1581
137f0                 | LR__1582
137f0                 | ' 'repeat i from 0 to 127
137f0                 | ' '  if ((i/8)//2)
137f0                 | ' '    cursor[i]:=15
137f0                 | ' '  else
137f0                 | ' '    cursor[i]:=0
137f0                 | ' '  if i>=120    
137f0                 | ' '    cursor[i]:=40
137f0                 | ' setspriteptr(17,@cursor)
137f0     F2 14 02 F6 | 	mov	arg02, objptr
137f4     01 00 00 FF 
137f8     32 E4 85 F1 | 	sub	objptr, ##562
137fc     11 12 06 F6 | 	mov	arg01, #17
13800     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
13804                 | ' setspritesize(17,8,16)
13804     11 12 06 F6 | 	mov	arg01, #17
13808     08 14 06 F6 | 	mov	arg02, #8
1380c     10 16 06 F6 | 	mov	arg03, #16
13810     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
13814                 | ' setspritepos(17,0,0)
13814     11 12 06 F6 | 	mov	arg01, #17
13818     00 14 06 F6 | 	mov	arg02, #0
1381c     00 16 06 F6 | 	mov	arg03, #0
13820     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
13824     A7 F0 03 F6 | 	mov	ptra, fp
13828     B2 00 A0 FD | 	call	#popregs_
1382c                 | _hg010b_spin2_initcursor_ret
1382c     2D 00 64 FD | 	ret
13830                 | 
13830                 | ' 
13830                 | '  
13830                 | ' pub setcursorcolor(color) |i
13830                 | _hg010b_spin2_setcursorcolor
13830                 | ' 
13830                 | ' 
13830                 | ' repeat i from 0 to 111
13830     00 00 06 F6 | 	mov	_var01, #0
13834     01 00 00 FF 
13838     32 E4 05 F1 | 	add	objptr, ##562
1383c     97 1A 48 FB | 	callpa	#(@LR__1592-@LR__1590)>>2,fcache_load_ptr_
13840                 | LR__1590
13840                 | '   cursor[i]:=0
13840     00 03 02 F6 | 	mov	_var02, _var01
13844     F2 02 02 F1 | 	add	_var02, objptr
13848     01 01 48 FC | 	wrbyte	#0, _var02
1384c     01 00 06 F1 | 	add	_var01, #1
13850     70 00 56 F2 | 	cmps	_var01, #112 wc
13854     E8 FF 9F CD |  if_b	jmp	#LR__1590
13858                 | ' repeat i from 112 to 127
13858     70 00 06 F6 | 	mov	_var01, #112
1385c                 | LR__1591
1385c                 | '   cursor[i]:=color  
1385c     00 03 02 F6 | 	mov	_var02, _var01
13860     F2 02 02 F1 | 	add	_var02, objptr
13864     01 13 42 FC | 	wrbyte	arg01, _var02
13868     01 00 06 F1 | 	add	_var01, #1
1386c     80 00 16 F2 | 	cmp	_var01, #128 wc
13870     E8 FF 9F CD |  if_b	jmp	#LR__1591
13874                 | LR__1592
13874     01 00 00 FF 
13878     32 E4 85 F1 | 	sub	objptr, ##562
1387c                 | _hg010b_spin2_setcursorcolor_ret
1387c     2D 00 64 FD | 	ret
13880                 | 
13880                 | '  
13880                 | ' 
13880                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
13880                 | _hg010b_spin2_setmode
13880     02 4A 05 F6 | 	mov	COUNT_, #2
13884     A8 00 A0 FD | 	call	#pushregs_
13888                 | ' 
13888                 | ' 
13888                 | ' dl_ptr:=@emptydl[0]
13888     01 00 00 FF 
1388c     19 E4 05 F1 | 	add	objptr, ##537
13890     F2 60 02 F6 | 	mov	muldivb_, objptr
13894     FD E5 85 F1 | 	sub	objptr, #509
13898     F2 60 62 FC | 	wrlong	muldivb_, objptr
1389c                 | ' 
1389c                 | ' if cog>0 
1389c     10 E4 05 F1 | 	add	objptr, #16
138a0     F2 60 02 FB | 	rdlong	muldivb_, objptr
138a4     2C E4 85 F1 | 	sub	objptr, #44
138a8     01 60 56 F2 | 	cmps	muldivb_, #1 wc
138ac                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
138ac     01 12 06 36 |  if_ae	mov	arg01, #1
138b0     60 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
138b4                 | ' xres:=1024
138b4     01 00 00 FF 
138b8     22 E4 05 F1 | 	add	objptr, ##546
138bc     02 00 80 FF 
138c0     F2 00 68 FC | 	wrlong	##1024, objptr
138c4                 | ' yres:=576  
138c4     04 E4 05 F1 | 	add	objptr, #4
138c8     01 00 80 FF 
138cc     F2 80 68 FC | 	wrlong	##576, objptr
138d0                 | ' ppl:=(timings[3])
138d0     10 00 00 FF 
138d4     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
138d8     F7 60 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
138dc     51 E5 85 F1 | 	sub	objptr, #337
138e0     F2 60 62 FC | 	wrlong	muldivb_, objptr
138e4                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
138e4     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
138e8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
138ec     01 1E 66 F0 | 	shl	local01, #1
138f0     80 E4 85 F1 | 	sub	objptr, #128
138f4     F2 1E 62 FC | 	wrlong	local01, objptr
138f8                 | ' cpl1:=cpl '' todo remove
138f8     04 E4 05 F1 | 	add	objptr, #4
138fc     F2 1E 62 FC | 	wrlong	local01, objptr
13900                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
13900     02 00 00 FF 
13904     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
13908     41 E4 85 F1 | 	sub	objptr, #65
1390c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
13910                 | ' repeat i from 0 to 3
13910     00 20 06 F6 | 	mov	local02, #0
13914     02 00 00 FF 
13918     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1391c     08 E4 05 F1 | 	add	objptr, #8
13920     97 20 48 FB | 	callpa	#(@LR__1601-@LR__1600)>>2,fcache_load_ptr_
13924                 | LR__1600
13924                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
13924     10 1F 02 F6 | 	mov	local01, local02
13928     02 1E 66 F0 | 	shl	local01, #2
1392c     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
13930     F2 60 02 FB | 	rdlong	muldivb_, objptr
13934     11 60 66 F0 | 	shl	muldivb_, #17
13938     0F 1F 02 FB | 	rdlong	local01, local01
1393c     30 1F 02 F1 | 	add	local01, muldivb_
13940     80 40 38 FF 
13944     00 1E 06 F1 | 	add	local01, ##1887502336
13948     10 61 02 F6 | 	mov	muldivb_, local02
1394c     02 60 66 F0 | 	shl	muldivb_, #2
13950     F7 60 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
13954     30 1F 62 FC | 	wrlong	local01, muldivb_
13958     01 20 06 F1 | 	add	local02, #1
1395c     04 20 56 F2 | 	cmps	local02, #4 wc
13960     C0 FF 9F CD |  if_b	jmp	#LR__1600
13964                 | LR__1601
13964     20 E4 85 F1 | 	sub	objptr, #32
13968                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
13968     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1396c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
13970     14 1E 66 FC | 	wrlong	local01, #20
13974                 | ' hubset(timings[10])
13974     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
13978     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1397c     10 00 00 FF 
13980     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
13984     00 12 62 FD | 	hubset	arg01
13988                 | ' waitms(1)                                                   	' wait for stabilization
13988     01 12 06 F6 | 	mov	arg01, #1
1398c     C8 24 B0 FD | 	call	#__system___waitms
13990     10 00 00 FF 
13994     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
13998     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1399c     5D E4 05 F1 | 	add	objptr, #93
139a0     F2 20 62 FC | 	wrlong	local02, objptr
139a4     10 1F 52 F6 | 	abs	local01, local02 wc
139a8     04 1E 46 F0 | 	shr	local01, #4
139ac     0F 1F 82 F6 | 	negc	local01, local01
139b0     9C E4 05 F1 | 	add	objptr, #156
139b4     F2 1E 62 FC | 	wrlong	local01, objptr
139b8     A4 E4 85 F1 | 	sub	objptr, #164
139bc     F2 20 02 FB | 	rdlong	local02, objptr
139c0     08 E4 05 F1 | 	add	objptr, #8
139c4     F2 1E 02 FB | 	rdlong	local01, objptr
139c8     0F 21 02 FD | 	qmul	local02, local01
139cc                 | ' lines:=timings[11]
139cc                 | ' t_lines:=lines/16
139cc                 | ' buflen:=cpl*lines						' framebuffer length in longs
139cc     29 E4 85 F1 | 	sub	objptr, #41
139d0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
139d0     19 1E C6 F9 | 	decod	local01, #25
139d4                 | ' mode_ptr:=@timings						' set pointers to timings
139d4     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
139d8                 | ' graphmode:=1024+512+192+48							' det global variable
139d8                 | ' makedl(graphmode)							' make a DL for the mode
139d8     03 00 00 FF 
139dc     F0 12 06 F6 | 	mov	arg01, ##1776
139e0     18 20 62 FD | 	getqx	local02
139e4     F2 20 62 FC | 	wrlong	local02, objptr
139e8     34 E4 85 F1 | 	sub	objptr, #52
139ec     02 20 66 F0 | 	shl	local02, #2
139f0     10 1F 82 F1 | 	sub	local01, local02
139f4     F2 1E 62 FC | 	wrlong	local01, objptr
139f8     14 E4 05 F1 | 	add	objptr, #20
139fc     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
13a00     79 E4 05 F1 | 	add	objptr, #121
13a04     03 00 80 FF 
13a08     F2 E0 69 FC | 	wrlong	##1776, objptr
13a0c     8D E4 85 F1 | 	sub	objptr, #141
13a10     10 00 00 FF 
13a14     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
13a18     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
13a1c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
13a1c     F2 1E 02 FB | 	rdlong	local01, objptr
13a20     D9 E4 05 F1 | 	add	objptr, #217
13a24     F2 1E 62 FC | 	wrlong	local01, objptr
13a28                 | ' s_font_ptr:=font_ptr
13a28     D5 E4 85 F1 | 	sub	objptr, #213
13a2c     F2 1E 02 FB | 	rdlong	local01, objptr
13a30     D9 E4 05 F1 | 	add	objptr, #217
13a34     F2 1E 62 FC | 	wrlong	local01, objptr
13a38                 | ' s_lines:=lines
13a38     80 E4 85 F1 | 	sub	objptr, #128
13a3c     F2 1E 02 FB | 	rdlong	local01, objptr
13a40     84 E4 05 F1 | 	add	objptr, #132
13a44     F2 1E 62 FC | 	wrlong	local01, objptr
13a48                 | ' s_buflen:=buflen
13a48     AD E4 85 F1 | 	sub	objptr, #173
13a4c     F2 1E 02 FB | 	rdlong	local01, objptr
13a50     B5 E4 05 F1 | 	add	objptr, #181
13a54     F2 1E 62 FC | 	wrlong	local01, objptr
13a58                 | ' s_cpl:=cpl
13a58     94 E4 85 F1 | 	sub	objptr, #148
13a5c     F2 1E 02 FB | 	rdlong	local01, objptr
13a60     90 E4 05 F1 | 	add	objptr, #144
13a64     F2 1E 62 FC | 	wrlong	local01, objptr
13a68                 | ' s_cpl1:=cpl
13a68     90 E4 85 F1 | 	sub	objptr, #144
13a6c     F2 1E 02 FB | 	rdlong	local01, objptr
13a70     98 E4 05 F1 | 	add	objptr, #152
13a74     F2 1E 62 FC | 	wrlong	local01, objptr
13a78                 | ' st_lines:=t_lines
13a78     0C E4 05 F1 | 	add	objptr, #12
13a7c     F2 1E 02 FB | 	rdlong	local01, objptr
13a80     04 E4 05 F1 | 	add	objptr, #4
13a84     F2 1E 62 FC | 	wrlong	local01, objptr
13a88                 | ' ppl:=ppl/xzoom  
13a88     28 E4 85 F1 | 	sub	objptr, #40
13a8c     F2 5E 02 FB | 	rdlong	muldiva_, objptr
13a90     2C E4 05 F1 | 	add	objptr, #44
13a94     F2 60 02 FB | 	rdlong	muldivb_, objptr
13a98     01 E5 85 F1 | 	sub	objptr, #257
13a9c     BA 00 A0 FD | 	call	#divide_
13aa0     D5 E4 05 F1 | 	add	objptr, #213
13aa4     F2 60 62 FC | 	wrlong	muldivb_, objptr
13aa8                 | ' s_ppl:=ppl
13aa8     1C E4 05 F1 | 	add	objptr, #28
13aac     F2 60 62 FC | 	wrlong	muldivb_, objptr
13ab0     F1 E4 85 F1 | 	sub	objptr, #241
13ab4                 | ' waitms(20)							' wait 
13ab4     14 12 06 F6 | 	mov	arg01, #20
13ab8     9C 23 B0 FD | 	call	#__system___waitms
13abc     A7 F0 03 F6 | 	mov	ptra, fp
13ac0     B2 00 A0 FD | 	call	#popregs_
13ac4                 | _hg010b_spin2_setmode_ret
13ac4     2D 00 64 FD | 	ret
13ac8                 | 
13ac8                 | ' 
13ac8                 | ' 
13ac8                 | ' '****************************************************************************************************************
13ac8                 | ' '                                                                                                             	*
13ac8                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
13ac8                 | ' '                                                                                                             	*
13ac8                 | ' '****************************************************************************************************************
13ac8                 | ' 
13ac8                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
13ac8                 | _hg010b_spin2_makedl
13ac8                 | ' 
13ac8                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
13ac8                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
13ac8                 | ' repeat i from 0 to 11                                                           ' clear DL
13ac8     00 00 06 F6 | 	mov	_var01, #0
13acc     E9 E5 05 F1 | 	add	objptr, #489
13ad0     97 0E 48 FB | 	callpa	#(@LR__1611-@LR__1610)>>2,fcache_load_ptr_
13ad4                 | LR__1610
13ad4                 | '   displaylist[i]:=0 
13ad4     00 03 02 F6 | 	mov	_var02, _var01
13ad8     02 02 66 F0 | 	shl	_var02, #2
13adc     F2 02 02 F1 | 	add	_var02, objptr
13ae0     01 01 68 FC | 	wrlong	#0, _var02
13ae4     01 00 06 F1 | 	add	_var01, #1
13ae8     0C 00 56 F2 | 	cmps	_var01, #12 wc
13aec     E4 FF 9F CD |  if_b	jmp	#LR__1610
13af0                 | LR__1611
13af0                 | '                         ' 
13af0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
13af0     8C E5 85 F1 | 	sub	objptr, #396
13af4     F2 02 02 FB | 	rdlong	_var02, objptr
13af8     14 02 66 F0 | 	shl	_var02, #20
13afc     01 02 06 F1 | 	add	_var02, #1
13b00     04 E4 85 F1 | 	sub	objptr, #4
13b04     F2 00 02 FB | 	rdlong	_var01, objptr
13b08     02 00 66 F0 | 	shl	_var01, #2
13b0c     04 00 66 F0 | 	shl	_var01, #4
13b10     00 03 02 F1 | 	add	_var02, _var01
13b14     90 E5 05 F1 | 	add	objptr, #400
13b18     F2 02 62 FC | 	wrlong	_var02, objptr
13b1c     E9 E5 85 F1 | 	sub	objptr, #489
13b20                 | ' displaylist[1]:=buf_ptr<<4+%10  
13b20     F2 02 02 FB | 	rdlong	_var02, objptr
13b24     04 02 66 F0 | 	shl	_var02, #4
13b28     02 02 06 F1 | 	add	_var02, #2
13b2c     ED E5 05 F1 | 	add	objptr, #493
13b30     F2 02 62 FC | 	wrlong	_var02, objptr
13b34                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
13b34     04 E4 85 F1 | 	sub	objptr, #4
13b38     F2 02 02 F6 | 	mov	_var02, objptr
13b3c     CD E5 85 F1 | 	sub	objptr, #461
13b40     F2 02 62 FC | 	wrlong	_var02, objptr
13b44     1C E4 85 F1 | 	sub	objptr, #28
13b48                 | _hg010b_spin2_makedl_ret
13b48     2D 00 64 FD | 	ret
13b4c                 | 
13b4c                 | ' 
13b4c                 | ' 
13b4c                 | ' '****************************************************************************************************************
13b4c                 | ' '                                                                        					*
13b4c                 | ' '  Graphic primitives                                                    					*
13b4c                 | ' '                                                                        					*
13b4c                 | ' '****************************************************************************************************************
13b4c                 | ' 
13b4c                 | ' pub setspriteptr(num,ptr)
13b4c                 | _hg010b_spin2_setspriteptr
13b4c                 | ' long[@spr1ptr+12*num]:=ptr
13b4c     0D E5 05 F1 | 	add	objptr, #269
13b50     F2 00 02 F6 | 	mov	_var01, objptr
13b54     09 03 02 F6 | 	mov	_var02, arg01
13b58     01 02 66 F0 | 	shl	_var02, #1
13b5c     09 03 02 F1 | 	add	_var02, arg01
13b60     02 02 66 F0 | 	shl	_var02, #2
13b64     01 01 02 F1 | 	add	_var01, _var02
13b68     00 15 62 FC | 	wrlong	arg02, _var01
13b6c     0D E5 85 F1 | 	sub	objptr, #269
13b70                 | _hg010b_spin2_setspriteptr_ret
13b70     2D 00 64 FD | 	ret
13b74                 | 
13b74                 | ' 
13b74                 | ' pub setspritepos(num,x,y)
13b74                 | _hg010b_spin2_setspritepos
13b74                 | ' word[@spr1ptr+12*num+4]:=x
13b74     0D E5 05 F1 | 	add	objptr, #269
13b78     F2 00 02 F6 | 	mov	_var01, objptr
13b7c     09 03 02 F6 | 	mov	_var02, arg01
13b80     01 02 66 F0 | 	shl	_var02, #1
13b84     09 03 02 F1 | 	add	_var02, arg01
13b88     02 02 66 F0 | 	shl	_var02, #2
13b8c     01 01 02 F1 | 	add	_var01, _var02
13b90     04 00 06 F1 | 	add	_var01, #4
13b94     00 15 52 FC | 	wrword	arg02, _var01
13b98                 | ' word[@spr1ptr+12*num+6]:=y
13b98     F2 00 02 F6 | 	mov	_var01, objptr
13b9c     09 03 02 F6 | 	mov	_var02, arg01
13ba0     01 02 66 F0 | 	shl	_var02, #1
13ba4     09 03 02 F1 | 	add	_var02, arg01
13ba8     02 02 66 F0 | 	shl	_var02, #2
13bac     01 01 02 F1 | 	add	_var01, _var02
13bb0     06 00 06 F1 | 	add	_var01, #6
13bb4     00 17 52 FC | 	wrword	arg03, _var01
13bb8     0D E5 85 F1 | 	sub	objptr, #269
13bbc                 | _hg010b_spin2_setspritepos_ret
13bbc     2D 00 64 FD | 	ret
13bc0                 | 
13bc0                 | ' 
13bc0                 | ' pub setspritesize(num,w,h)
13bc0                 | _hg010b_spin2_setspritesize
13bc0                 | ' word[@spr1ptr+12*num+8]:=w
13bc0     0D E5 05 F1 | 	add	objptr, #269
13bc4     F2 00 02 F6 | 	mov	_var01, objptr
13bc8     09 03 02 F6 | 	mov	_var02, arg01
13bcc     01 02 66 F0 | 	shl	_var02, #1
13bd0     09 03 02 F1 | 	add	_var02, arg01
13bd4     02 02 66 F0 | 	shl	_var02, #2
13bd8     01 01 02 F1 | 	add	_var01, _var02
13bdc     08 00 06 F1 | 	add	_var01, #8
13be0     00 15 52 FC | 	wrword	arg02, _var01
13be4                 | ' word[@spr1ptr+12*num+10]:=h
13be4     F2 00 02 F6 | 	mov	_var01, objptr
13be8     09 03 02 F6 | 	mov	_var02, arg01
13bec     01 02 66 F0 | 	shl	_var02, #1
13bf0     09 03 02 F1 | 	add	_var02, arg01
13bf4     02 02 66 F0 | 	shl	_var02, #2
13bf8     01 01 02 F1 | 	add	_var01, _var02
13bfc     0A 00 06 F1 | 	add	_var01, #10
13c00     00 17 52 FC | 	wrword	arg03, _var01
13c04     0D E5 85 F1 | 	sub	objptr, #269
13c08                 | _hg010b_spin2_setspritesize_ret
13c08     2D 00 64 FD | 	ret
13c0c                 | 
13c0c                 | ' 
13c0c                 | ' 
13c0c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
13c0c                 | ' 
13c0c                 | ' 
13c0c                 | ' pub putpixel(x,y,c)
13c0c                 | _hg010b_spin2_putpixel
13c0c     04 4A 05 F6 | 	mov	COUNT_, #4
13c10     A8 00 A0 FD | 	call	#pushregs_
13c14     09 1F 02 F6 | 	mov	local01, arg01
13c18                 | ' 
13c18                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
13c18     00 20 06 F6 | 	mov	local02, #0
13c1c     00 1E 56 F2 | 	cmps	local01, #0 wc
13c20     01 20 66 36 |  if_ae	neg	local02, #1
13c24     E5 E4 05 F1 | 	add	objptr, #229
13c28     F2 1A 02 FB | 	rdlong	arg05, objptr
13c2c     02 1A 66 F0 | 	shl	arg05, #2
13c30     0D 1F 52 F2 | 	cmps	local01, arg05 wc
13c34     11 23 A2 F1 | 	subx	local03, local03
13c38     11 21 02 F5 | 	and	local02, local03
13c3c     00 22 06 F6 | 	mov	local03, #0
13c40     00 14 56 F2 | 	cmps	arg02, #0 wc
13c44     01 22 66 36 |  if_ae	neg	local03, #1
13c48     11 21 02 F5 | 	and	local02, local03
13c4c     04 E4 85 F1 | 	sub	objptr, #4
13c50     F2 22 02 FB | 	rdlong	local03, objptr
13c54     E1 E4 85 F1 | 	sub	objptr, #225
13c58     11 15 52 F2 | 	cmps	arg02, local03 wc
13c5c     12 25 A2 F1 | 	subx	local04, local04
13c60     12 21 CA F7 | 	test	local02, local04 wz
13c64     48 00 90 AD |  if_e	jmp	#LR__1620
13c68     D9 E4 05 F1 | 	add	objptr, #217
13c6c     F2 12 02 FB | 	rdlong	arg01, objptr
13c70     14 E4 05 F1 | 	add	objptr, #20
13c74     F2 24 02 FB | 	rdlong	local04, objptr
13c78     02 24 66 F0 | 	shl	local04, #2
13c7c     0A 25 02 FD | 	qmul	local04, arg02
13c80                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
13c80     0B 15 02 F6 | 	mov	arg02, arg03
13c84     01 16 06 F6 | 	mov	arg03, #1
13c88     00 18 06 F6 | 	mov	arg04, #0
13c8c     01 1A 06 F6 | 	mov	arg05, #1
13c90     0A 00 00 FF 
13c94     D3 E5 05 F1 | 	add	objptr, ##5587
13c98     18 24 62 FD | 	getqx	local04
13c9c     0F 25 02 F1 | 	add	local04, local01
13ca0     12 13 02 F1 | 	add	arg01, local04
13ca4     08 15 B0 FD | 	call	#_psram_spin2_fill
13ca8     0B 00 00 FF 
13cac     C0 E4 85 F1 | 	sub	objptr, ##5824
13cb0                 | LR__1620
13cb0     A7 F0 03 F6 | 	mov	ptra, fp
13cb4     B2 00 A0 FD | 	call	#popregs_
13cb8                 | _hg010b_spin2_putpixel_ret
13cb8     2D 00 64 FD | 	ret
13cbc                 | 
13cbc                 | ' 
13cbc                 | ' pub putpixel2(x,y,c)
13cbc                 | _hg010b_spin2_putpixel2
13cbc     02 4A 05 F6 | 	mov	COUNT_, #2
13cc0     A8 00 A0 FD | 	call	#pushregs_
13cc4     D9 E4 05 F1 | 	add	objptr, #217
13cc8     F2 1E 02 FB | 	rdlong	local01, objptr
13ccc     14 E4 05 F1 | 	add	objptr, #20
13cd0     F2 1A 02 FB | 	rdlong	arg05, objptr
13cd4     02 1A 66 F0 | 	shl	arg05, #2
13cd8     0A 1B 02 FD | 	qmul	arg05, arg02
13cdc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
13cdc     0B 15 02 F6 | 	mov	arg02, arg03
13ce0     01 16 06 F6 | 	mov	arg03, #1
13ce4     00 18 06 F6 | 	mov	arg04, #0
13ce8     01 1A 06 F6 | 	mov	arg05, #1
13cec     0A 00 00 FF 
13cf0     D3 E5 05 F1 | 	add	objptr, ##5587
13cf4     18 20 62 FD | 	getqx	local02
13cf8     09 21 02 F1 | 	add	local02, arg01
13cfc     10 1F 02 F1 | 	add	local01, local02
13d00     0F 13 02 F6 | 	mov	arg01, local01
13d04     A8 14 B0 FD | 	call	#_psram_spin2_fill
13d08     0B 00 00 FF 
13d0c     C0 E4 85 F1 | 	sub	objptr, ##5824
13d10     A7 F0 03 F6 | 	mov	ptra, fp
13d14     B2 00 A0 FD | 	call	#popregs_
13d18                 | _hg010b_spin2_putpixel2_ret
13d18     2D 00 64 FD | 	ret
13d1c                 | 
13d1c                 | ' 
13d1c                 | ' pub getpixel2(x,y): c 
13d1c                 | _hg010b_spin2_getpixel2
13d1c     02 4A 05 F6 | 	mov	COUNT_, #2
13d20     A8 00 A0 FD | 	call	#pushregs_
13d24     0C F0 07 F1 | 	add	ptra, #12
13d28     04 4E 05 F1 | 	add	fp, #4
13d2c     A7 12 62 FC | 	wrlong	arg01, fp
13d30     04 4E 05 F1 | 	add	fp, #4
13d34     A7 14 62 FC | 	wrlong	arg02, fp
13d38     08 4E 85 F1 | 	sub	fp, #8
13d3c     A7 00 68 FC | 	wrlong	#0, fp
13d40     A7 12 02 F6 | 	mov	arg01, fp
13d44     D9 E4 05 F1 | 	add	objptr, #217
13d48     F2 14 02 FB | 	rdlong	arg02, objptr
13d4c     14 E4 05 F1 | 	add	objptr, #20
13d50     F2 16 02 FB | 	rdlong	arg03, objptr
13d54     02 16 66 F0 | 	shl	arg03, #2
13d58     08 4E 05 F1 | 	add	fp, #8
13d5c     A7 FA 01 FB | 	rdlong	result1, fp
13d60     FD 16 02 FD | 	qmul	arg03, result1
13d64                 | ' 
13d64                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
13d64     04 4E 85 F1 | 	sub	fp, #4
13d68     A7 1E 02 FB | 	rdlong	local01, fp
13d6c     04 4E 85 F1 | 	sub	fp, #4
13d70     01 16 06 F6 | 	mov	arg03, #1
13d74     0A 00 00 FF 
13d78     D3 E5 05 F1 | 	add	objptr, ##5587
13d7c     18 20 62 FD | 	getqx	local02
13d80     0F 21 02 F1 | 	add	local02, local01
13d84     10 15 02 F1 | 	add	arg02, local02
13d88     EC 12 B0 FD | 	call	#_psram_spin2_read1
13d8c     0B 00 00 FF 
13d90     C0 E4 85 F1 | 	sub	objptr, ##5824
13d94                 | ' return c
13d94     A7 FA 01 FB | 	rdlong	result1, fp
13d98     A7 F0 03 F6 | 	mov	ptra, fp
13d9c     B2 00 A0 FD | 	call	#popregs_
13da0                 | _hg010b_spin2_getpixel2_ret
13da0     2D 00 64 FD | 	ret
13da4                 | 
13da4                 | '   
13da4                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
13da4                 | ' 
13da4                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
13da4                 | _hg010b_spin2_fastline
13da4     02 4A 05 F6 | 	mov	COUNT_, #2
13da8     A8 00 A0 FD | 	call	#pushregs_
13dac     09 1F 02 F6 | 	mov	local01, arg01
13db0     0A 21 02 F6 | 	mov	local02, arg02
13db4                 | ' 
13db4                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
13db4     00 16 56 F2 | 	cmps	arg03, #0 wc
13db8     F4 00 90 CD |  if_b	jmp	#LR__1630
13dbc     01 00 00 FF 
13dc0     26 E4 05 F1 | 	add	objptr, ##550
13dc4     F2 1A 02 FB | 	rdlong	arg05, objptr
13dc8     01 00 00 FF 
13dcc     26 E4 85 F1 | 	sub	objptr, ##550
13dd0     0D 17 52 F2 | 	cmps	arg03, arg05 wc
13dd4     D8 00 90 3D |  if_ae	jmp	#LR__1630
13dd8     00 1E 56 F2 | 	cmps	local01, #0 wc
13ddc     00 20 56 C2 |  if_b	cmps	local02, #0 wc
13de0     CC 00 90 CD |  if_b	jmp	#LR__1630
13de4     01 00 00 FF 
13de8     22 E4 05 F1 | 	add	objptr, ##546
13dec     F2 1A 02 FB | 	rdlong	arg05, objptr
13df0     01 00 00 FF 
13df4     22 E4 85 F1 | 	sub	objptr, ##546
13df8     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
13dfc     01 00 00 1F 
13e00     22 E4 05 11 |  if_a	add	objptr, ##546
13e04     F2 12 02 1B |  if_a	rdlong	arg01, objptr
13e08     01 00 00 1F 
13e0c     22 E4 85 11 |  if_a	sub	objptr, ##546
13e10     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
13e14                 | '   return
13e14     98 00 90 1D |  if_a	jmp	#LR__1630
13e18     10 1F 5A F2 | 	cmps	local01, local02 wcz
13e1c     0F 1B 02 16 |  if_a	mov	arg05, local01
13e20     10 1F 02 16 |  if_a	mov	local01, local02
13e24     0D 21 02 16 |  if_a	mov	local02, arg05
13e28     00 1E 56 F2 | 	cmps	local01, #0 wc
13e2c     00 1E 06 C6 |  if_b	mov	local01, #0
13e30     01 00 00 FF 
13e34     22 E4 05 F1 | 	add	objptr, ##546
13e38     F2 1A 02 FB | 	rdlong	arg05, objptr
13e3c     01 00 00 FF 
13e40     22 E4 85 F1 | 	sub	objptr, ##546
13e44     0D 21 52 F2 | 	cmps	local02, arg05 wc
13e48     01 00 00 3F 
13e4c     22 E4 05 31 |  if_ae	add	objptr, ##546
13e50     F2 20 02 3B |  if_ae	rdlong	local02, objptr
13e54     01 00 00 3F 
13e58     22 E4 85 31 |  if_ae	sub	objptr, ##546
13e5c     D9 E4 05 F1 | 	add	objptr, #217
13e60     F2 12 02 FB | 	rdlong	arg01, objptr
13e64     14 E4 05 F1 | 	add	objptr, #20
13e68     F2 1A 02 FB | 	rdlong	arg05, objptr
13e6c     02 1A 66 F0 | 	shl	arg05, #2
13e70     0B 1B 02 FD | 	qmul	arg05, arg03
13e74                 | ' if x1>x2
13e74                 | '   x1,x2:=x2,x1
13e74                 | ' if x1<0 
13e74                 | '   x1:=0
13e74                 | ' if x2>=xres
13e74                 | '   x2:=xres-1  
13e74     01 20 86 31 |  if_ae	sub	local02, #1
13e78                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
13e78     01 16 06 F6 | 	mov	arg03, #1
13e7c     10 17 02 F1 | 	add	arg03, local02
13e80     0F 17 82 F1 | 	sub	arg03, local01
13e84     0C 15 02 F6 | 	mov	arg02, arg04
13e88     00 18 06 F6 | 	mov	arg04, #0
13e8c     01 1A 06 F6 | 	mov	arg05, #1
13e90     0A 00 00 FF 
13e94     D3 E5 05 F1 | 	add	objptr, ##5587
13e98     18 20 62 FD | 	getqx	local02
13e9c     0F 21 02 F1 | 	add	local02, local01
13ea0     10 13 02 F1 | 	add	arg01, local02
13ea4     08 13 B0 FD | 	call	#_psram_spin2_fill
13ea8     0B 00 00 FF 
13eac     C0 E4 85 F1 | 	sub	objptr, ##5824
13eb0                 | LR__1630
13eb0     A7 F0 03 F6 | 	mov	ptra, fp
13eb4     B2 00 A0 FD | 	call	#popregs_
13eb8                 | _hg010b_spin2_fastline_ret
13eb8     2D 00 64 FD | 	ret
13ebc                 | 
13ebc                 | ' 
13ebc                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
13ebc                 | _hg010b_spin2_draw
13ebc     0E 4A 05 F6 | 	mov	COUNT_, #14
13ec0     A8 00 A0 FD | 	call	#pushregs_
13ec4     09 1F 02 F6 | 	mov	local01, arg01
13ec8     0A 21 02 F6 | 	mov	local02, arg02
13ecc     0B 23 02 F6 | 	mov	local03, arg03
13ed0     0C 25 02 F6 | 	mov	local04, arg04
13ed4     0D 27 02 F6 | 	mov	local05, arg05
13ed8                 | ' 
13ed8                 | ' if (y1==y2)
13ed8     12 21 0A F2 | 	cmp	local02, local04 wz
13edc     18 00 90 5D |  if_ne	jmp	#LR__1640
13ee0                 | '   fastline(x1,x2,y1,c)
13ee0     0F 13 02 F6 | 	mov	arg01, local01
13ee4     11 15 02 F6 | 	mov	arg02, local03
13ee8     10 17 02 F6 | 	mov	arg03, local02
13eec     13 19 02 F6 | 	mov	arg04, local05
13ef0     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
13ef4     F8 00 90 FD | 	jmp	#LR__1646
13ef8                 | LR__1640
13ef8                 | ' else  
13ef8                 | '   x:=x1
13ef8     0F 29 02 F6 | 	mov	local06, local01
13efc                 | '   y:=y1
13efc     10 2B 02 F6 | 	mov	local07, local02
13f00                 | ' 
13f00                 | '   if (x1<x2) 
13f00     11 1F 52 F2 | 	cmps	local01, local03 wc
13f04                 | '     xi:=1
13f04     01 2C 06 C6 |  if_b	mov	local08, #1
13f08                 | '     dx:=x2-x1
13f08     11 2F 02 C6 |  if_b	mov	local09, local03
13f0c     0F 2F 82 C1 |  if_b	sub	local09, local01
13f10                 | '   else
13f10                 | '     xi:=-1
13f10     01 2C 66 36 |  if_ae	neg	local08, #1
13f14                 | '     dx:=x1-x2
13f14     11 1F 82 31 |  if_ae	sub	local01, local03
13f18     0F 2F 02 36 |  if_ae	mov	local09, local01
13f1c                 | '   
13f1c                 | '   if (y1<y2) 
13f1c     12 21 52 F2 | 	cmps	local02, local04 wc
13f20                 | '     yi:=1
13f20     01 30 06 C6 |  if_b	mov	local10, #1
13f24                 | '     dy:=y2-y1
13f24     12 33 02 C6 |  if_b	mov	local11, local04
13f28     10 33 82 C1 |  if_b	sub	local11, local02
13f2c                 | '   else
13f2c                 | '     yi:=-1
13f2c     01 30 66 36 |  if_ae	neg	local10, #1
13f30                 | '     dy:=y1-y2
13f30     12 21 82 31 |  if_ae	sub	local02, local04
13f34     10 33 02 36 |  if_ae	mov	local11, local02
13f38                 | ' 
13f38                 | '   putpixel(x,y,c)
13f38     13 17 02 F6 | 	mov	arg03, local05
13f3c     14 13 02 F6 | 	mov	arg01, local06
13f40     15 15 02 F6 | 	mov	arg02, local07
13f44     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
13f48                 | ' 
13f48                 | '   if (dx>dy)
13f48     19 2F 5A F2 | 	cmps	local09, local11 wcz
13f4c     50 00 90 ED |  if_be	jmp	#LR__1642
13f50                 | '     ai:=(dy-dx)*2
13f50     19 35 02 F6 | 	mov	local12, local11
13f54     17 35 82 F1 | 	sub	local12, local09
13f58     01 34 66 F0 | 	shl	local12, #1
13f5c                 | '     bi:=dy*2
13f5c     01 32 66 F0 | 	shl	local11, #1
13f60     19 37 02 F6 | 	mov	local13, local11
13f64                 | '     d:= bi-dx
13f64     1B 39 02 F6 | 	mov	local14, local13
13f68     17 39 82 F1 | 	sub	local14, local09
13f6c                 | '     repeat while (x<>x2) 
13f6c                 | LR__1641
13f6c     11 29 0A F2 | 	cmp	local06, local03 wz
13f70     7C 00 90 AD |  if_e	jmp	#LR__1645
13f74                 | '       if (d>=0) 
13f74     00 38 56 F2 | 	cmps	local14, #0 wc
13f78                 | '         x+=xi
13f78     16 29 02 31 |  if_ae	add	local06, local08
13f7c                 | '         y+=yi
13f7c     18 2B 02 31 |  if_ae	add	local07, local10
13f80                 | '         d+=ai
13f80     1A 39 02 31 |  if_ae	add	local14, local12
13f84                 | '       else
13f84                 | '         d+=bi
13f84     1B 39 02 C1 |  if_b	add	local14, local13
13f88                 | '         x+=xi
13f88     16 29 02 C1 |  if_b	add	local06, local08
13f8c                 | '       putpixel(x,y,c)
13f8c     14 13 02 F6 | 	mov	arg01, local06
13f90     15 15 02 F6 | 	mov	arg02, local07
13f94     13 17 02 F6 | 	mov	arg03, local05
13f98     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
13f9c     CC FF 9F FD | 	jmp	#LR__1641
13fa0                 | LR__1642
13fa0                 | '   else
13fa0                 | '     ai:=(dx-dy)*2
13fa0     17 35 02 F6 | 	mov	local12, local09
13fa4     19 35 82 F1 | 	sub	local12, local11
13fa8     01 34 66 F0 | 	shl	local12, #1
13fac                 | '     bi:=dx*2
13fac     01 2E 66 F0 | 	shl	local09, #1
13fb0     17 37 02 F6 | 	mov	local13, local09
13fb4                 | '     d:=bi-dy
13fb4     1B 39 02 F6 | 	mov	local14, local13
13fb8     19 39 82 F1 | 	sub	local14, local11
13fbc                 | '     repeat while (y<>y2)
13fbc                 | LR__1643
13fbc     12 2B 0A F2 | 	cmp	local07, local04 wz
13fc0     2C 00 90 AD |  if_e	jmp	#LR__1644
13fc4                 | '       if (d>=0)
13fc4     00 38 56 F2 | 	cmps	local14, #0 wc
13fc8                 | '         x+=xi
13fc8     16 29 02 31 |  if_ae	add	local06, local08
13fcc                 | '         y+=yi
13fcc     18 2B 02 31 |  if_ae	add	local07, local10
13fd0                 | '         d+=ai
13fd0     1A 39 02 31 |  if_ae	add	local14, local12
13fd4                 | '       else
13fd4                 | '         d+=bi
13fd4     1B 39 02 C1 |  if_b	add	local14, local13
13fd8                 | '         y+=yi
13fd8     18 2B 02 C1 |  if_b	add	local07, local10
13fdc                 | '       putpixel(x, y,c)
13fdc     14 13 02 F6 | 	mov	arg01, local06
13fe0     15 15 02 F6 | 	mov	arg02, local07
13fe4     13 17 02 F6 | 	mov	arg03, local05
13fe8     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
13fec     CC FF 9F FD | 	jmp	#LR__1643
13ff0                 | LR__1644
13ff0                 | LR__1645
13ff0                 | LR__1646
13ff0     A7 F0 03 F6 | 	mov	ptra, fp
13ff4     B2 00 A0 FD | 	call	#popregs_
13ff8                 | _hg010b_spin2_draw_ret
13ff8     2D 00 64 FD | 	ret
13ffc                 | 
13ffc                 | '  
13ffc                 | ' pub fillpush(val) 
13ffc                 | _hg010b_spin2_fillpush
13ffc                 | ' fillstack[fillptr]:=val
13ffc     0B 00 00 FF 
14000     B6 E4 05 F1 | 	add	objptr, ##5814
14004     F2 00 02 FB | 	rdlong	_var01, objptr
14008     02 00 66 F0 | 	shl	_var01, #2
1400c     0A 00 00 FF 
14010     00 E4 85 F1 | 	sub	objptr, ##5120
14014     F2 00 02 F1 | 	add	_var01, objptr
14018     00 13 62 FC | 	wrlong	arg01, _var01
1401c                 | ' fillptr+=1   
1401c     0A 00 00 FF 
14020     00 E4 05 F1 | 	add	objptr, ##5120
14024     F2 00 02 FB | 	rdlong	_var01, objptr
14028     01 00 06 F1 | 	add	_var01, #1
1402c     F2 00 62 FC | 	wrlong	_var01, objptr
14030     0B 00 00 FF 
14034     B6 E4 85 F1 | 	sub	objptr, ##5814
14038                 | _hg010b_spin2_fillpush_ret
14038     2D 00 64 FD | 	ret
1403c                 | 
1403c                 | ' 
1403c                 | '     
1403c                 | ' pub fillpop() : val
1403c                 | _hg010b_spin2_fillpop
1403c                 | ' 
1403c                 | ' fillptr-=1
1403c     0B 00 00 FF 
14040     B6 E4 05 F1 | 	add	objptr, ##5814
14044     F2 FA 01 FB | 	rdlong	result1, objptr
14048     01 FA 85 F1 | 	sub	result1, #1
1404c     F2 FA 61 FC | 	wrlong	result1, objptr
14050                 | ' if fillptr<0
14050     0B 00 00 FF 
14054     B6 E4 85 F1 | 	sub	objptr, ##5814
14058     00 FA 55 F2 | 	cmps	result1, #0 wc
1405c                 | '   fillptr:=0
1405c     0B 00 00 CF 
14060     B6 E4 05 C1 |  if_b	add	objptr, ##5814
14064     F2 00 68 CC |  if_b	wrlong	#0, objptr
14068     0B 00 00 CF 
1406c     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
14070                 | '   val:=-12345
14070     E7 FF 7F CF 
14074     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
14078     28 00 90 CD |  if_b	jmp	#LR__1650
1407c                 | ' else 
1407c                 | '   val:=fillstack[fillptr]
1407c     0B 00 00 FF 
14080     B6 E4 05 F1 | 	add	objptr, ##5814
14084     F2 00 02 FB | 	rdlong	_var01, objptr
14088     02 00 66 F0 | 	shl	_var01, #2
1408c     0A 00 00 FF 
14090     00 E4 85 F1 | 	sub	objptr, ##5120
14094     F2 00 02 F1 | 	add	_var01, objptr
14098     00 01 02 FB | 	rdlong	_var01, _var01
1409c     01 00 00 FF 
140a0     B6 E4 85 F1 | 	sub	objptr, ##694
140a4                 | LR__1650
140a4                 | ' return val
140a4     00 FB 01 F6 | 	mov	result1, _var01
140a8                 | _hg010b_spin2_fillpop_ret
140a8     2D 00 64 FD | 	ret
140ac                 | 
140ac                 | ' 
140ac                 | '       
140ac                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
140ac                 | _hg010b_spin2_fill
140ac     0B 4A 05 F6 | 	mov	COUNT_, #11
140b0     A8 00 A0 FD | 	call	#pushregs_
140b4                 | ' 
140b4                 | ' newcolor:=newcolor & 255
140b4     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
140b8                 | ' oldcolor:=oldcolor & 255
140b8     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
140bc                 | ' 
140bc                 | ' if (oldcolor == newcolor) 
140bc     0F 21 0A F2 | 	cmp	local02, local01 wz
140c0                 | '   return
140c0     7C 02 90 AD |  if_e	jmp	#LR__1669
140c4                 | ' 
140c4                 | ' fillptr:=0
140c4     0B 00 00 FF 
140c8     B6 E4 05 F1 | 	add	objptr, ##5814
140cc     F2 00 68 FC | 	wrlong	#0, objptr
140d0                 | ' fillmax:=0
140d0     04 E4 05 F1 | 	add	objptr, #4
140d4     F2 00 68 FC | 	wrlong	#0, objptr
140d8     0B 00 00 FF 
140dc     BA E4 85 F1 | 	sub	objptr, ##5818
140e0                 | ' fillpush(x)
140e0     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
140e4                 | ' fillpush(y)
140e4     0A 13 02 F6 | 	mov	arg01, arg02
140e8     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
140ec                 | ' y:=fillpop()
140ec     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
140f0     FD 22 02 F6 | 	mov	local03, result1
140f4                 | ' x:=fillpop()
140f4     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
140f8     FD 24 02 F6 | 	mov	local04, result1
140fc                 | ' pinhigh(38)
140fc     59 4C 64 FD | 	drvh	#38
14100                 | ' repeat while (x>-1)       
14100                 | LR__1660
14100     00 24 56 F2 | 	cmps	local04, #0 wc
14104     34 02 90 CD |  if_b	jmp	#LR__1668
14108                 | '   pintoggle(39)
14108     5F 4E 64 FD | 	drvnot	#39
1410c                 | '   x1 := x
1410c     12 27 02 F6 | 	mov	local05, local04
14110                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
14110                 | LR__1661
14110     00 28 06 F6 | 	mov	local06, #0
14114     00 2A 06 F6 | 	mov	local07, #0
14118     00 26 56 F2 | 	cmps	local05, #0 wc
1411c     01 2A 66 36 |  if_ae	neg	local07, #1
14120     00 2A 0E F2 | 	cmp	local07, #0 wz
14124     00 28 26 56 |  if_ne	not	local06, #0
14128     00 2C 06 F6 | 	mov	local08, #0
1412c     00 2E 06 F6 | 	mov	local09, #0
14130     11 15 02 F6 | 	mov	arg02, local03
14134     13 13 02 F6 | 	mov	arg01, local05
14138     E0 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1413c     10 FB 09 F2 | 	cmp	result1, local02 wz
14140     00 2E 26 A6 |  if_e	not	local09, #0
14144     00 2E 0E F2 | 	cmp	local09, #0 wz
14148     00 2C 26 56 |  if_ne	not	local08, #0
1414c     16 29 CA F7 | 	test	local06, local08 wz
14150                 | '     x1--
14150     01 26 86 51 |  if_ne	sub	local05, #1
14154     B8 FF 9F 5D |  if_ne	jmp	#LR__1661
14158                 | '   x1++
14158     01 26 06 F1 | 	add	local05, #1
1415c                 | '   spanabove := 0
1415c     00 30 06 F6 | 	mov	local10, #0
14160                 | '   spanbelow := 0
14160     00 32 06 F6 | 	mov	local11, #0
14164                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
14164                 | LR__1662
14164     00 28 06 F6 | 	mov	local06, #0
14168     02 00 00 FF 
1416c     00 26 56 F2 | 	cmps	local05, ##1024 wc
14170     00 28 26 C6 |  if_b	not	local06, #0
14174     00 2C 06 F6 | 	mov	local08, #0
14178     00 2E 06 F6 | 	mov	local09, #0
1417c     11 15 02 F6 | 	mov	arg02, local03
14180     13 13 02 F6 | 	mov	arg01, local05
14184     94 FB BF FD | 	call	#_hg010b_spin2_getpixel2
14188     10 FB 09 F2 | 	cmp	result1, local02 wz
1418c     00 2E 26 A6 |  if_e	not	local09, #0
14190     00 2E 0E F2 | 	cmp	local09, #0 wz
14194     00 2C 26 56 |  if_ne	not	local08, #0
14198     16 29 CA F7 | 	test	local06, local08 wz
1419c     88 01 90 AD |  if_e	jmp	#LR__1667
141a0                 | '     putpixel2 (x1,y, newcolor & 255)
141a0     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
141a4     13 13 02 F6 | 	mov	arg01, local05
141a8     11 15 02 F6 | 	mov	arg02, local03
141ac     0C FB BF FD | 	call	#_hg010b_spin2_putpixel2
141b0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
141b0     00 28 06 F6 | 	mov	local06, #0
141b4     00 2A 06 F6 | 	mov	local07, #0
141b8     00 30 0E F2 | 	cmp	local10, #0 wz
141bc     01 22 56 A2 |  if_e	cmps	local03, #1 wc
141c0     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
141c4     00 2A 0E F2 | 	cmp	local07, #0 wz
141c8     00 28 26 56 |  if_ne	not	local06, #0
141cc     00 2C 06 F6 | 	mov	local08, #0
141d0     00 2E 06 F6 | 	mov	local09, #0
141d4     11 15 02 F6 | 	mov	arg02, local03
141d8     01 14 86 F1 | 	sub	arg02, #1
141dc     13 13 02 F6 | 	mov	arg01, local05
141e0     38 FB BF FD | 	call	#_hg010b_spin2_getpixel2
141e4     10 FB 09 F2 | 	cmp	result1, local02 wz
141e8     00 2E 26 A6 |  if_e	not	local09, #0
141ec     00 2E 0E F2 | 	cmp	local09, #0 wz
141f0     00 2C 26 56 |  if_ne	not	local08, #0
141f4     16 29 CA F7 | 	test	local06, local08 wz
141f8     1C 00 90 AD |  if_e	jmp	#LR__1663
141fc                 | '       fillpush(x1)
141fc     13 13 02 F6 | 	mov	arg01, local05
14200     F8 FD BF FD | 	call	#_hg010b_spin2_fillpush
14204                 | '       fillpush(y-1)
14204     11 13 02 F6 | 	mov	arg01, local03
14208     01 12 86 F1 | 	sub	arg01, #1
1420c     EC FD BF FD | 	call	#_hg010b_spin2_fillpush
14210                 | '       spanAbove := 1 
14210     01 30 06 F6 | 	mov	local10, #1
14214     4C 00 90 FD | 	jmp	#LR__1664
14218                 | LR__1663
14218                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
14218     00 28 06 F6 | 	mov	local06, #0
1421c     00 2A 06 F6 | 	mov	local07, #0
14220     00 30 0E F2 | 	cmp	local10, #0 wz
14224     01 22 56 52 |  if_ne	cmps	local03, #1 wc
14228     01 2A 66 16 |  if_a	neg	local07, #1
1422c     00 2A 0E F2 | 	cmp	local07, #0 wz
14230     00 28 26 56 |  if_ne	not	local06, #0
14234     00 2C 06 F6 | 	mov	local08, #0
14238     00 2E 06 F6 | 	mov	local09, #0
1423c     11 15 02 F6 | 	mov	arg02, local03
14240     01 14 86 F1 | 	sub	arg02, #1
14244     13 13 02 F6 | 	mov	arg01, local05
14248     D0 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1424c     10 FB 09 F2 | 	cmp	result1, local02 wz
14250     00 2E 26 56 |  if_ne	not	local09, #0
14254     00 2E 0E F2 | 	cmp	local09, #0 wz
14258     00 2C 26 56 |  if_ne	not	local08, #0
1425c     16 29 CA F7 | 	test	local06, local08 wz
14260                 | '       spanAbove := 0 
14260     00 30 06 56 |  if_ne	mov	local10, #0
14264                 | LR__1664
14264                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
14264     00 28 06 F6 | 	mov	local06, #0
14268     00 2A 06 F6 | 	mov	local07, #0
1426c     00 32 0E F2 | 	cmp	local11, #0 wz
14270     01 00 00 AF 
14274     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
14278     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1427c     00 2A 0E F2 | 	cmp	local07, #0 wz
14280     00 28 26 56 |  if_ne	not	local06, #0
14284     00 2C 06 F6 | 	mov	local08, #0
14288     00 2E 06 F6 | 	mov	local09, #0
1428c     11 15 02 F6 | 	mov	arg02, local03
14290     01 14 06 F1 | 	add	arg02, #1
14294     13 13 02 F6 | 	mov	arg01, local05
14298     80 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1429c     10 FB 09 F2 | 	cmp	result1, local02 wz
142a0     00 2E 26 A6 |  if_e	not	local09, #0
142a4     00 2E 0E F2 | 	cmp	local09, #0 wz
142a8     00 2C 26 56 |  if_ne	not	local08, #0
142ac     16 29 CA F7 | 	test	local06, local08 wz
142b0     1C 00 90 AD |  if_e	jmp	#LR__1665
142b4                 | '       fillpush(x1)
142b4     13 13 02 F6 | 	mov	arg01, local05
142b8     40 FD BF FD | 	call	#_hg010b_spin2_fillpush
142bc                 | '       fillpush(y + 1)
142bc     11 13 02 F6 | 	mov	arg01, local03
142c0     01 12 06 F1 | 	add	arg01, #1
142c4     34 FD BF FD | 	call	#_hg010b_spin2_fillpush
142c8                 | '       spanBelow := 1
142c8     01 32 06 F6 | 	mov	local11, #1
142cc     50 00 90 FD | 	jmp	#LR__1666
142d0                 | LR__1665
142d0                 | '     elseif((spanBelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
142d0     00 28 06 F6 | 	mov	local06, #0
142d4     00 2A 06 F6 | 	mov	local07, #0
142d8     00 32 0E F2 | 	cmp	local11, #0 wz
142dc     01 00 00 5F 
142e0     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
142e4     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
142e8     00 2A 0E F2 | 	cmp	local07, #0 wz
142ec     00 28 26 56 |  if_ne	not	local06, #0
142f0     00 2C 06 F6 | 	mov	local08, #0
142f4     00 2E 06 F6 | 	mov	local09, #0
142f8     11 15 02 F6 | 	mov	arg02, local03
142fc     01 14 06 F1 | 	add	arg02, #1
14300     13 13 02 F6 | 	mov	arg01, local05
14304     14 FA BF FD | 	call	#_hg010b_spin2_getpixel2
14308     10 FB 09 F2 | 	cmp	result1, local02 wz
1430c     00 2E 26 56 |  if_ne	not	local09, #0
14310     00 2E 0E F2 | 	cmp	local09, #0 wz
14314     00 2C 26 56 |  if_ne	not	local08, #0
14318     16 29 CA F7 | 	test	local06, local08 wz
1431c                 | '       spanBelow := 0
1431c     00 32 06 56 |  if_ne	mov	local11, #0
14320                 | LR__1666
14320                 | '     x1++
14320     01 26 06 F1 | 	add	local05, #1
14324     3C FE 9F FD | 	jmp	#LR__1662
14328                 | LR__1667
14328                 | '   y:=fillpop()
14328     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1432c     FD 22 02 F6 | 	mov	local03, result1
14330                 | '   x:=fillpop()
14330     08 FD BF FD | 	call	#_hg010b_spin2_fillpop
14334     FD 24 02 F6 | 	mov	local04, result1
14338     C4 FD 9F FD | 	jmp	#LR__1660
1433c                 | LR__1668
1433c                 | ' pinlow(38)    
1433c     58 4C 64 FD | 	drvl	#38
14340                 | LR__1669
14340     A7 F0 03 F6 | 	mov	ptra, fp
14344     B2 00 A0 FD | 	call	#popregs_
14348                 | _hg010b_spin2_fill_ret
14348     2D 00 64 FD | 	ret
1434c                 | 
1434c                 | ' 
1434c                 | ' '-- A filled circle -----------------------------------------------------
1434c                 | ' 
1434c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1434c                 | _hg010b_spin2_fcircle
1434c     08 4A 05 F6 | 	mov	COUNT_, #8
14350     A8 00 A0 FD | 	call	#pushregs_
14354     0B 1F 02 F6 | 	mov	local01, arg03
14358     FF FF 7F FF 
1435c     FE 1F 06 FD | 	qmul	local01, ##-2
14360     09 21 02 F6 | 	mov	local02, arg01
14364     0A 23 02 F6 | 	mov	local03, arg02
14368     0C 25 02 F6 | 	mov	local04, arg04
1436c                 | ' 
1436c                 | ' d:=5-4*r
1436c     0F 19 02 F6 | 	mov	arg04, local01
14370     02 18 66 F0 | 	shl	arg04, #2
14374     05 26 06 F6 | 	mov	local05, #5
14378     0C 27 82 F1 | 	sub	local05, arg04
1437c                 | ' x:=0
1437c     00 28 06 F6 | 	mov	local06, #0
14380                 | ' y:=r
14380                 | ' da:=(-2*r+5)*4
14380                 | ' db:=3*4
14380     0C 2A 06 F6 | 	mov	local07, #12
14384                 | ' repeat while (x<=y) 
14384     18 2C 62 FD | 	getqx	local08
14388     05 2C 06 F1 | 	add	local08, #5
1438c     02 2C 66 F0 | 	shl	local08, #2
14390                 | LR__1670
14390     0F 29 5A F2 | 	cmps	local06, local01 wcz
14394     B4 00 90 1D |  if_a	jmp	#LR__1672
14398                 | '   fastline(x0-x,x0+x,y0-y,c)
14398     10 13 02 F6 | 	mov	arg01, local02
1439c     14 13 82 F1 | 	sub	arg01, local06
143a0     10 15 02 F6 | 	mov	arg02, local02
143a4     14 15 02 F1 | 	add	arg02, local06
143a8     11 17 02 F6 | 	mov	arg03, local03
143ac     0F 17 82 F1 | 	sub	arg03, local01
143b0     12 19 02 F6 | 	mov	arg04, local04
143b4     EC F9 BF FD | 	call	#_hg010b_spin2_fastline
143b8                 | '   fastline(x0-x,x0+x,y0+y,c)
143b8     10 13 02 F6 | 	mov	arg01, local02
143bc     14 13 82 F1 | 	sub	arg01, local06
143c0     10 15 02 F6 | 	mov	arg02, local02
143c4     14 15 02 F1 | 	add	arg02, local06
143c8     11 17 02 F6 | 	mov	arg03, local03
143cc     0F 17 02 F1 | 	add	arg03, local01
143d0     12 19 02 F6 | 	mov	arg04, local04
143d4     CC F9 BF FD | 	call	#_hg010b_spin2_fastline
143d8                 | '   fastline(x0-y,x0+y,y0-x,c)
143d8     10 13 02 F6 | 	mov	arg01, local02
143dc     0F 13 82 F1 | 	sub	arg01, local01
143e0     10 15 02 F6 | 	mov	arg02, local02
143e4     0F 15 02 F1 | 	add	arg02, local01
143e8     11 17 02 F6 | 	mov	arg03, local03
143ec     14 17 82 F1 | 	sub	arg03, local06
143f0     12 19 02 F6 | 	mov	arg04, local04
143f4     AC F9 BF FD | 	call	#_hg010b_spin2_fastline
143f8                 | '   fastline(x0-y,x0+y,y0+x,c)
143f8     10 13 02 F6 | 	mov	arg01, local02
143fc     0F 13 82 F1 | 	sub	arg01, local01
14400     10 15 02 F6 | 	mov	arg02, local02
14404     0F 15 02 F1 | 	add	arg02, local01
14408     11 17 02 F6 | 	mov	arg03, local03
1440c     14 17 02 F1 | 	add	arg03, local06
14410     12 19 02 F6 | 	mov	arg04, local04
14414     8C F9 BF FD | 	call	#_hg010b_spin2_fastline
14418                 | '   if d>0 
14418     01 26 56 F2 | 	cmps	local05, #1 wc
1441c     18 00 90 CD |  if_b	jmp	#LR__1671
14420                 | '     d+=da
14420     16 27 02 F1 | 	add	local05, local08
14424                 | '     y-=1
14424     01 1E 86 F1 | 	sub	local01, #1
14428                 | '     x+=1
14428     01 28 06 F1 | 	add	local06, #1
1442c                 | '     da+=4*4
1442c     10 2C 06 F1 | 	add	local08, #16
14430                 | '     db+=2*4
14430     08 2A 06 F1 | 	add	local07, #8
14434     58 FF 9F FD | 	jmp	#LR__1670
14438                 | LR__1671
14438                 | '   else
14438                 | '     d+=db
14438     15 27 02 F1 | 	add	local05, local07
1443c                 | '     x+=1
1443c     01 28 06 F1 | 	add	local06, #1
14440                 | '     da+=2*4
14440     08 2C 06 F1 | 	add	local08, #8
14444                 | '     db+=2*4
14444     08 2A 06 F1 | 	add	local07, #8
14448     44 FF 9F FD | 	jmp	#LR__1670
1444c                 | LR__1672
1444c     A7 F0 03 F6 | 	mov	ptra, fp
14450     B2 00 A0 FD | 	call	#popregs_
14454                 | _hg010b_spin2_fcircle_ret
14454     2D 00 64 FD | 	ret
14458                 | 
14458                 | '  
14458                 | ' '-- A circle ------------------------------------------------------------ 
14458                 | '  
14458                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
14458                 | _hg010b_spin2_circle
14458     08 4A 05 F6 | 	mov	COUNT_, #8
1445c     A8 00 A0 FD | 	call	#pushregs_
14460     0B 1F 02 F6 | 	mov	local01, arg03
14464     FF FF 7F FF 
14468     FE 1F 06 FD | 	qmul	local01, ##-2
1446c     09 21 02 F6 | 	mov	local02, arg01
14470     0A 23 02 F6 | 	mov	local03, arg02
14474     0C 25 02 F6 | 	mov	local04, arg04
14478                 | ' 
14478                 | '  
14478                 | ' d:=5-4*r
14478     0F 19 02 F6 | 	mov	arg04, local01
1447c     02 18 66 F0 | 	shl	arg04, #2
14480     05 26 06 F6 | 	mov	local05, #5
14484     0C 27 82 F1 | 	sub	local05, arg04
14488                 | ' x:=0
14488     00 28 06 F6 | 	mov	local06, #0
1448c                 | ' y:=r
1448c                 | ' da:=(-2*r+5)*4
1448c                 | ' db:=3*4
1448c     0C 2A 06 F6 | 	mov	local07, #12
14490                 | ' repeat while (x<=y) 
14490     18 2C 62 FD | 	getqx	local08
14494     05 2C 06 F1 | 	add	local08, #5
14498     02 2C 66 F0 | 	shl	local08, #2
1449c                 | LR__1680
1449c     0F 29 5A F2 | 	cmps	local06, local01 wcz
144a0     F4 00 90 1D |  if_a	jmp	#LR__1682
144a4                 | '   putpixel(x0-x,y0-y,c)
144a4     10 13 02 F6 | 	mov	arg01, local02
144a8     14 13 82 F1 | 	sub	arg01, local06
144ac     11 15 02 F6 | 	mov	arg02, local03
144b0     0F 15 82 F1 | 	sub	arg02, local01
144b4     12 17 02 F6 | 	mov	arg03, local04
144b8     50 F7 BF FD | 	call	#_hg010b_spin2_putpixel
144bc                 | '   putpixel(x0-x,y0+y,c)
144bc     10 13 02 F6 | 	mov	arg01, local02
144c0     14 13 82 F1 | 	sub	arg01, local06
144c4     11 15 02 F6 | 	mov	arg02, local03
144c8     0F 15 02 F1 | 	add	arg02, local01
144cc     12 17 02 F6 | 	mov	arg03, local04
144d0     38 F7 BF FD | 	call	#_hg010b_spin2_putpixel
144d4                 | '   putpixel(x0+x,y0-y,c)
144d4     10 13 02 F6 | 	mov	arg01, local02
144d8     14 13 02 F1 | 	add	arg01, local06
144dc     11 15 02 F6 | 	mov	arg02, local03
144e0     0F 15 82 F1 | 	sub	arg02, local01
144e4     12 17 02 F6 | 	mov	arg03, local04
144e8     20 F7 BF FD | 	call	#_hg010b_spin2_putpixel
144ec                 | '   putpixel(x0+x,y0+y,c)
144ec     10 13 02 F6 | 	mov	arg01, local02
144f0     14 13 02 F1 | 	add	arg01, local06
144f4     11 15 02 F6 | 	mov	arg02, local03
144f8     0F 15 02 F1 | 	add	arg02, local01
144fc     12 17 02 F6 | 	mov	arg03, local04
14500     08 F7 BF FD | 	call	#_hg010b_spin2_putpixel
14504                 | '   putpixel(x0-y,y0-x,c)
14504     10 13 02 F6 | 	mov	arg01, local02
14508     0F 13 82 F1 | 	sub	arg01, local01
1450c     11 15 02 F6 | 	mov	arg02, local03
14510     14 15 82 F1 | 	sub	arg02, local06
14514     12 17 02 F6 | 	mov	arg03, local04
14518     F0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1451c                 | '   putpixel(x0-y,y0+x,c)
1451c     10 13 02 F6 | 	mov	arg01, local02
14520     0F 13 82 F1 | 	sub	arg01, local01
14524     11 15 02 F6 | 	mov	arg02, local03
14528     14 15 02 F1 | 	add	arg02, local06
1452c     12 17 02 F6 | 	mov	arg03, local04
14530     D8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
14534                 | '   putpixel(x0+y,y0-x,c)
14534     10 13 02 F6 | 	mov	arg01, local02
14538     0F 13 02 F1 | 	add	arg01, local01
1453c     11 15 02 F6 | 	mov	arg02, local03
14540     14 15 82 F1 | 	sub	arg02, local06
14544     12 17 02 F6 | 	mov	arg03, local04
14548     C0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1454c                 | '   putpixel(x0+y,y0+x,c)
1454c     10 13 02 F6 | 	mov	arg01, local02
14550     0F 13 02 F1 | 	add	arg01, local01
14554     11 15 02 F6 | 	mov	arg02, local03
14558     14 15 02 F1 | 	add	arg02, local06
1455c     12 17 02 F6 | 	mov	arg03, local04
14560     A8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
14564                 | '   if d>0 
14564     01 26 56 F2 | 	cmps	local05, #1 wc
14568     18 00 90 CD |  if_b	jmp	#LR__1681
1456c                 | '     d+=da
1456c     16 27 02 F1 | 	add	local05, local08
14570                 | '     y-=1
14570     01 1E 86 F1 | 	sub	local01, #1
14574                 | '     x+=1
14574     01 28 06 F1 | 	add	local06, #1
14578                 | '     da+=4*4
14578     10 2C 06 F1 | 	add	local08, #16
1457c                 | '     db+=2*4
1457c     08 2A 06 F1 | 	add	local07, #8
14580     18 FF 9F FD | 	jmp	#LR__1680
14584                 | LR__1681
14584                 | '   else
14584                 | '     d+=db
14584     15 27 02 F1 | 	add	local05, local07
14588                 | '     x+=1
14588     01 28 06 F1 | 	add	local06, #1
1458c                 | '     da+=2*4
1458c     08 2C 06 F1 | 	add	local08, #8
14590                 | '     db+=2*4
14590     08 2A 06 F1 | 	add	local07, #8
14594     04 FF 9F FD | 	jmp	#LR__1680
14598                 | LR__1682
14598     A7 F0 03 F6 | 	mov	ptra, fp
1459c     B2 00 A0 FD | 	call	#popregs_
145a0                 | _hg010b_spin2_circle_ret
145a0     2D 00 64 FD | 	ret
145a4                 | 
145a4                 | '     
145a4                 | ' '-- A frame (an empty rectangle) ---------------------------------------
145a4                 | ' 
145a4                 | ' pub frame(x1,y1,x2,y2,c)
145a4                 | _hg010b_spin2_frame
145a4     05 4A 05 F6 | 	mov	COUNT_, #5
145a8     A8 00 A0 FD | 	call	#pushregs_
145ac     09 1F 02 F6 | 	mov	local01, arg01
145b0     0A 21 02 F6 | 	mov	local02, arg02
145b4     0B 23 02 F6 | 	mov	local03, arg03
145b8     0C 25 02 F6 | 	mov	local04, arg04
145bc     0D 27 02 F6 | 	mov	local05, arg05
145c0                 | ' 
145c0                 | ' fastline(x1,x2,y1,c)
145c0     0F 13 02 F6 | 	mov	arg01, local01
145c4     11 15 02 F6 | 	mov	arg02, local03
145c8     10 17 02 F6 | 	mov	arg03, local02
145cc     13 19 02 F6 | 	mov	arg04, local05
145d0     D0 F7 BF FD | 	call	#_hg010b_spin2_fastline
145d4                 | ' fastline(x1,x2,y2,c)
145d4     0F 13 02 F6 | 	mov	arg01, local01
145d8     11 15 02 F6 | 	mov	arg02, local03
145dc     12 17 02 F6 | 	mov	arg03, local04
145e0     13 19 02 F6 | 	mov	arg04, local05
145e4     BC F7 BF FD | 	call	#_hg010b_spin2_fastline
145e8                 | ' line(x1,y1,x1,y2,c)
145e8     0F 13 02 F6 | 	mov	arg01, local01
145ec     10 15 02 F6 | 	mov	arg02, local02
145f0     0F 17 02 F6 | 	mov	arg03, local01
145f4     12 19 02 F6 | 	mov	arg04, local04
145f8     13 1B 02 F6 | 	mov	arg05, local05
145fc                 | ' draw(x1,y1,x2,y2,c)
145fc     BC F8 BF FD | 	call	#_hg010b_spin2_draw
14600                 | ' line(x2,y1,x2,y2,c)
14600     11 13 02 F6 | 	mov	arg01, local03
14604     10 15 02 F6 | 	mov	arg02, local02
14608     11 17 02 F6 | 	mov	arg03, local03
1460c     12 19 02 F6 | 	mov	arg04, local04
14610     13 1B 02 F6 | 	mov	arg05, local05
14614                 | ' draw(x1,y1,x2,y2,c)
14614     A4 F8 BF FD | 	call	#_hg010b_spin2_draw
14618     A7 F0 03 F6 | 	mov	ptra, fp
1461c     B2 00 A0 FD | 	call	#popregs_
14620                 | _hg010b_spin2_frame_ret
14620     2D 00 64 FD | 	ret
14624                 | 
14624                 | ' 
14624                 | ' '-- A box (a filled rectangle) ----------------------------------------
14624                 | ' 
14624                 | ' pub box(x1,y1,x2,y2,c) |yy
14624                 | _hg010b_spin2_box
14624     06 4A 05 F6 | 	mov	COUNT_, #6
14628     A8 00 A0 FD | 	call	#pushregs_
1462c     09 1F 02 F6 | 	mov	local01, arg01
14630     0A 21 02 F6 | 	mov	local02, arg02
14634     0B 23 02 F6 | 	mov	local03, arg03
14638     0C 25 02 F6 | 	mov	local04, arg04
1463c     0D 27 02 F6 | 	mov	local05, arg05
14640                 | ' 
14640                 | ' repeat yy from y1 to y2
14640     10 25 52 F2 | 	cmps	local04, local02 wc
14644     01 28 86 F6 | 	negc	local06, #1
14648     14 25 02 F1 | 	add	local04, local06
1464c                 | LR__1690
1464c                 | '   fastline(x1,x2,yy,c)
1464c     0F 13 02 F6 | 	mov	arg01, local01
14650     11 15 02 F6 | 	mov	arg02, local03
14654     13 19 02 F6 | 	mov	arg04, local05
14658     10 17 02 F6 | 	mov	arg03, local02
1465c     44 F7 BF FD | 	call	#_hg010b_spin2_fastline
14660     14 21 02 F1 | 	add	local02, local06
14664     12 21 0A F2 | 	cmp	local02, local04 wz
14668     E0 FF 9F 5D |  if_ne	jmp	#LR__1690
1466c     A7 F0 03 F6 | 	mov	ptra, fp
14670     B2 00 A0 FD | 	call	#popregs_
14674                 | _hg010b_spin2_box_ret
14674     2D 00 64 FD | 	ret
14678                 | 
14678                 | '       
14678                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
14678                 | _hg010b_spin2_putcharxycgf
14678                 | ' 
14678                 | '  
14678                 | ' repeat yy from 0 to 15
14678     00 00 06 F6 | 	mov	_var01, #0
1467c     97 8C 48 FB | 	callpa	#(@LR__1702-@LR__1700)>>2,fcache_load_ptr_
14680                 | LR__1700
14680                 | ' 
14680                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
14680     91 E4 05 F1 | 	add	objptr, #145
14684     F2 02 02 FB | 	rdlong	_var02, objptr
14688     0A 02 66 F0 | 	shl	_var02, #10
1468c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
14690     01 05 02 F1 | 	add	_var03, _var02
14694     0B 03 02 F6 | 	mov	_var02, arg03
14698     04 02 66 F0 | 	shl	_var02, #4
1469c     01 05 02 F1 | 	add	_var03, _var02
146a0     00 05 02 F1 | 	add	_var03, _var01
146a4     02 05 C2 FA | 	rdbyte	_var03, _var03
146a8                 | '   asm
146a8     00 04 0E F4 | 	testb	_var03, #0 wz
146ac     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
146b0     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
146b4     01 04 0E F4 | 	testb	_var03, #1 wz
146b8     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
146bc     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
146c0     02 04 0E F4 | 	testb	_var03, #2 wz
146c4     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
146c8     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
146cc     03 04 0E F4 | 	testb	_var03, #3 wz
146d0     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
146d4     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
146d8     04 04 0E F4 | 	testb	_var03, #4 wz
146dc     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
146e0     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
146e4     05 04 0E F4 | 	testb	_var03, #5 wz
146e8     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
146ec     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
146f0     06 04 0E F4 | 	testb	_var03, #6 wz
146f4     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
146f8     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
146fc     07 04 0E F4 | 	testb	_var03, #7 wz
14700     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
14704     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
14708                 | '   
14708                 | '   ccc[0]:=c1
14708     99 E5 05 F1 | 	add	objptr, #409
1470c     F2 06 62 FC | 	wrlong	_var04, objptr
14710                 | '   ccc[1]:=c2 
14710     04 E4 05 F1 | 	add	objptr, #4
14714     F2 08 62 FC | 	wrlong	_var05, objptr
14718                 | '   long[mailbox0][2]:=8
14718     49 E4 85 F1 | 	sub	objptr, #73
1471c     F2 04 02 FB | 	rdlong	_var03, objptr
14720     08 04 06 F1 | 	add	_var03, #8
14724     02 11 68 FC | 	wrlong	#8, _var03
14728                 | '   long[mailbox0][1]:=@ccc
14728     45 E4 05 F1 | 	add	objptr, #69
1472c     F2 04 02 F6 | 	mov	_var03, objptr
14730     45 E4 85 F1 | 	sub	objptr, #69
14734     F2 02 02 FB | 	rdlong	_var02, objptr
14738     04 02 06 F1 | 	add	_var02, #4
1473c     01 05 62 FC | 	wrlong	_var03, _var02
14740                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
14740     0C E5 85 F1 | 	sub	objptr, #268
14744     F2 04 02 FB | 	rdlong	_var03, objptr
14748     0A 03 02 F6 | 	mov	_var02, arg02
1474c     00 03 02 F1 | 	add	_var02, _var01
14750     0A 02 66 F0 | 	shl	_var02, #10
14754     09 0B 02 F6 | 	mov	_var06, arg01
14758     02 0A 66 F0 | 	shl	_var06, #2
1475c     05 03 02 F1 | 	add	_var02, _var06
14760     01 05 02 F1 | 	add	_var03, _var02
14764     00 00 78 FF 
14768     00 04 06 F1 | 	add	_var03, ##-268435456
1476c     0C E5 05 F1 | 	add	objptr, #268
14770     F2 0A 02 FB | 	rdlong	_var06, objptr
14774     05 05 62 FC | 	wrlong	_var03, _var06
14778                 | '   repeat
14778                 | LR__1701
14778     F2 04 02 FB | 	rdlong	_var03, objptr
1477c     02 03 02 FB | 	rdlong	_var02, _var03
14780     00 02 56 F2 | 	cmps	_var02, #0 wc
14784     F0 FF 9F CD |  if_b	jmp	#LR__1701
14788     E5 E5 85 F1 | 	sub	objptr, #485
1478c     01 00 06 F1 | 	add	_var01, #1
14790     10 00 56 F2 | 	cmps	_var01, #16 wc
14794     E8 FE 9F CD |  if_b	jmp	#LR__1700
14798                 | LR__1702
14798                 | _hg010b_spin2_putcharxycgf_ret
14798     2D 00 64 FD | 	ret
1479c                 | 
1479c                 | ' 
1479c                 | ' 
1479c                 | ' '**********************************************************************r***
1479c                 | ' '                                                                        *
1479c                 | ' ' Font related functions                                                 *
1479c                 | ' '                                                                        *
1479c                 | ' '*************************************************************************
1479c                 | ' 
1479c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1479c                 | ' 
1479c                 | ' pub setfontfamily(afontnum)
1479c                 | _hg010b_spin2_setfontfamily
1479c                 | ' 
1479c                 | ' font_family:=afontnum
1479c     91 E4 05 F1 | 	add	objptr, #145
147a0     F2 12 62 FC | 	wrlong	arg01, objptr
147a4     91 E4 85 F1 | 	sub	objptr, #145
147a8                 | ' 'if afontnum==8
147a8                 | ' '  font_ptr:=@amiga_font
147a8                 | ' 
147a8                 | ' if afontnum==4
147a8     04 12 0E F2 | 	cmp	arg01, #4 wz
147ac                 | '   font_ptr:=@st_font
147ac     08 00 00 AF 
147b0     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
147b4     04 E4 05 A1 |  if_e	add	objptr, #4
147b8     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
147bc     04 E4 85 A1 |  if_e	sub	objptr, #4
147c0     08 00 00 AF 
147c4     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
147c8                 | ' if afontnum==0
147c8     00 12 0E F2 | 	cmp	arg01, #0 wz
147cc                 | '   font_ptr:=@vga_font
147cc     04 E4 05 A1 |  if_e	add	objptr, #4
147d0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
147d4     04 E4 85 A1 |  if_e	sub	objptr, #4
147d8                 | _hg010b_spin2_setfontfamily_ret
147d8     2D 00 64 FD | 	ret
147dc                 | 
147dc                 | ' 
147dc                 | ' '*************************************************************************
147dc                 | ' '                                                                        *
147dc                 | ' '  Cursor functions                                                      *
147dc                 | ' '                                                                        *
147dc                 | ' '*************************************************************************
147dc                 | ' 
147dc                 | ' 
147dc                 | ' pub setcursorpos(x,y)
147dc                 | _hg010b_spin2_setcursorpos
147dc                 | ' 
147dc                 | ' ''---------- Set the (x,y) position of cursor
147dc                 | ' 
147dc                 | ' cursor_x:=x
147dc     38 E4 05 F1 | 	add	objptr, #56
147e0     F2 12 52 FC | 	wrword	arg01, objptr
147e4                 | ' cursor_y:=y
147e4     02 E4 05 F1 | 	add	objptr, #2
147e8     F2 14 42 FC | 	wrbyte	arg02, objptr
147ec                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
147ec     02 E4 85 F1 | 	sub	objptr, #2
147f0     F2 14 E2 FA | 	rdword	arg02, objptr
147f4     02 14 66 F0 | 	shl	arg02, #2
147f8     02 E4 05 F1 | 	add	objptr, #2
147fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
14800     3A E4 85 F1 | 	sub	objptr, #58
14804     04 16 66 F0 | 	shl	arg03, #4
14808     11 12 06 F6 | 	mov	arg01, #17
1480c     64 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
14810                 | _hg010b_spin2_setcursorpos_ret
14810     2D 00 64 FD | 	ret
14814                 | 
14814                 | ' 
14814                 | ' '*************************************************************************
14814                 | ' '                                                                        *
14814                 | ' '  VBlank functions                                                      *
14814                 | ' '                                                                        *
14814                 | ' '*************************************************************************
14814                 | ' 
14814                 | ' pub waitvbl(amount) | i
14814                 | _hg010b_spin2_waitvbl
14814     03 4A 05 F6 | 	mov	COUNT_, #3
14818     A8 00 A0 FD | 	call	#pushregs_
1481c     09 1F 02 F6 | 	mov	local01, arg01
14820                 | ' 
14820                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
14820                 | ' 
14820                 | ' repeat i from 1 to amount
14820     01 20 06 F6 | 	mov	local02, #1
14824     01 1E 56 F2 | 	cmps	local01, #1 wc
14828     01 22 86 F6 | 	negc	local03, #1
1482c     11 1F 02 F1 | 	add	local01, local03
14830                 | LR__1710
14830                 | '   repeat until vblank==0
14830                 | LR__1711
14830     45 E4 05 F1 | 	add	objptr, #69
14834     F2 12 0A FB | 	rdlong	arg01, objptr wz
14838     45 E4 85 F1 | 	sub	objptr, #69
1483c     0C 00 90 AD |  if_e	jmp	#LR__1712
14840                 | '     waitus(100)
14840     64 12 06 F6 | 	mov	arg01, #100
14844     7C 16 B0 FD | 	call	#__system___waitus
14848     E4 FF 9F FD | 	jmp	#LR__1711
1484c                 | LR__1712
1484c                 | '   repeat until vblank==1
1484c                 | LR__1713
1484c     45 E4 05 F1 | 	add	objptr, #69
14850     F2 12 02 FB | 	rdlong	arg01, objptr
14854     45 E4 85 F1 | 	sub	objptr, #69
14858     01 12 0E F2 | 	cmp	arg01, #1 wz
1485c     0C 00 90 AD |  if_e	jmp	#LR__1714
14860                 | '     waitus(100)
14860     64 12 06 F6 | 	mov	arg01, #100
14864     5C 16 B0 FD | 	call	#__system___waitus
14868     E0 FF 9F FD | 	jmp	#LR__1713
1486c                 | LR__1714
1486c     11 21 02 F1 | 	add	local02, local03
14870     0F 21 0A F2 | 	cmp	local02, local01 wz
14874     B8 FF 9F 5D |  if_ne	jmp	#LR__1710
14878     A7 F0 03 F6 | 	mov	ptra, fp
1487c     B2 00 A0 FD | 	call	#popregs_
14880                 | _hg010b_spin2_waitvbl_ret
14880     2D 00 64 FD | 	ret
14884                 | 
14884                 | ' 
14884                 | ' 
14884                 | ' pub cls(fc,bc)   :c,i
14884                 | _hg010b_spin2_cls
14884     02 4A 05 F6 | 	mov	COUNT_, #2
14888     A8 00 A0 FD | 	call	#pushregs_
1488c     09 1F 02 F6 | 	mov	local01, arg01
14890     0A 21 02 F6 | 	mov	local02, arg02
14894                 | ' 
14894                 | ' c:=bc
14894                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
14894     D9 E4 05 F1 | 	add	objptr, #217
14898     F2 12 02 FB | 	rdlong	arg01, objptr
1489c     A5 E4 85 F1 | 	sub	objptr, #165
148a0     F2 16 02 FB | 	rdlong	arg03, objptr
148a4     02 16 66 F0 | 	shl	arg03, #2
148a8     10 15 02 F6 | 	mov	arg02, local02
148ac     00 18 06 F6 | 	mov	arg04, #0
148b0     01 1A 06 F6 | 	mov	arg05, #1
148b4     0B 00 00 FF 
148b8     8C E4 05 F1 | 	add	objptr, ##5772
148bc     F0 08 B0 FD | 	call	#_psram_spin2_fill
148c0                 | ' setwritecolors(fc,bc)
148c0                 | ' 
148c0                 | ' write_color:=ff
148c0     0B 00 00 FF 
148c4     83 E4 85 F1 | 	sub	objptr, ##5763
148c8     F2 1E 62 FC | 	wrlong	local01, objptr
148cc                 | ' write_background:=bb
148cc     04 E4 05 F1 | 	add	objptr, #4
148d0     F2 20 62 FC | 	wrlong	local02, objptr
148d4                 | ' cursor_x:=0
148d4     09 E4 85 F1 | 	sub	objptr, #9
148d8     F2 00 58 FC | 	wrword	#0, objptr
148dc                 | ' cursor_y:=0
148dc     02 E4 05 F1 | 	add	objptr, #2
148e0     F2 00 48 FC | 	wrbyte	#0, objptr
148e4                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
148e4     02 E4 85 F1 | 	sub	objptr, #2
148e8     F2 14 E2 FA | 	rdword	arg02, objptr
148ec     02 14 66 F0 | 	shl	arg02, #2
148f0     02 E4 05 F1 | 	add	objptr, #2
148f4     F2 16 C2 FA | 	rdbyte	arg03, objptr
148f8     3A E4 85 F1 | 	sub	objptr, #58
148fc     04 16 66 F0 | 	shl	arg03, #4
14900     11 12 06 F6 | 	mov	arg01, #17
14904     6C F2 BF FD | 	call	#_hg010b_spin2_setspritepos
14908                 | ' setcursorcolor(fc)
14908     0F 13 02 F6 | 	mov	arg01, local01
1490c     20 EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
14910     10 FB 01 F6 | 	mov	result1, local02
14914     00 FC 05 F6 | 	mov	result2, #0
14918     A7 F0 03 F6 | 	mov	ptra, fp
1491c     B2 00 A0 FD | 	call	#popregs_
14920                 | _hg010b_spin2_cls_ret
14920     2D 00 64 FD | 	ret
14924                 | 
14924                 | ' 
14924                 | ' ''---------- Output a char at the cursor position, move the cursor 
14924                 | ' 
14924                 | ' pub putchar(achar) | c,x,y,l,newcpl
14924                 | _hg010b_spin2_putchar
14924     01 4A 05 F6 | 	mov	COUNT_, #1
14928     A8 00 A0 FD | 	call	#pushregs_
1492c     09 1F 02 F6 | 	mov	local01, arg01
14930                 | ' 
14930                 | ' if achar==10
14930     0A 1E 0E F2 | 	cmp	local01, #10 wz
14934                 | '   crlf()
14934     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
14938                 | ' if achar==9
14938     09 1E 0E F2 | 	cmp	local01, #9 wz
1493c     18 00 90 5D |  if_ne	jmp	#LR__1720
14940                 | '   cursor_x:=(cursor_x& %11110000)+16
14940     38 E4 05 F1 | 	add	objptr, #56
14944     F2 16 E2 FA | 	rdword	arg03, objptr
14948     F0 16 06 F5 | 	and	arg03, #240
1494c     10 16 06 F1 | 	add	arg03, #16
14950     F2 16 52 FC | 	wrword	arg03, objptr
14954     38 E4 85 F1 | 	sub	objptr, #56
14958                 | LR__1720
14958                 | '   
14958                 | ' if (achar<>9) && (achar<>10) 
14958     09 1E 0E F2 | 	cmp	local01, #9 wz
1495c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
14960     44 00 90 AD |  if_e	jmp	#LR__1721
14964                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
14964     38 E4 05 F1 | 	add	objptr, #56
14968     F2 12 E2 FA | 	rdword	arg01, objptr
1496c     02 E4 05 F1 | 	add	objptr, #2
14970     F2 14 C2 FA | 	rdbyte	arg02, objptr
14974     04 14 66 F0 | 	shl	arg02, #4
14978     03 E4 05 F1 | 	add	objptr, #3
1497c     F2 18 02 FB | 	rdlong	arg04, objptr
14980     04 E4 05 F1 | 	add	objptr, #4
14984     F2 1A 02 FB | 	rdlong	arg05, objptr
14988     41 E4 85 F1 | 	sub	objptr, #65
1498c     0F 17 02 F6 | 	mov	arg03, local01
14990     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
14994                 | '   cursor_x+=2
14994     38 E4 05 F1 | 	add	objptr, #56
14998     F2 1E E2 FA | 	rdword	local01, objptr
1499c     02 1E 06 F1 | 	add	local01, #2
149a0     F2 1E 52 FC | 	wrword	local01, objptr
149a4     38 E4 85 F1 | 	sub	objptr, #56
149a8                 | LR__1721
149a8                 | ' 
149a8                 | ' if cursor_x>=256
149a8     38 E4 05 F1 | 	add	objptr, #56
149ac     F2 1E E2 FA | 	rdword	local01, objptr
149b0     38 E4 85 F1 | 	sub	objptr, #56
149b4     00 1F 56 F2 | 	cmps	local01, #256 wc
149b8     64 00 90 CD |  if_b	jmp	#LR__1723
149bc                 | '   cursor_x:=0
149bc     38 E4 05 F1 | 	add	objptr, #56
149c0     F2 00 58 FC | 	wrword	#0, objptr
149c4                 | '   cursor_y+=1
149c4     02 E4 05 F1 | 	add	objptr, #2
149c8     F2 1E C2 FA | 	rdbyte	local01, objptr
149cc     01 1E 06 F1 | 	add	local01, #1
149d0     F2 1E 42 FC | 	wrbyte	local01, objptr
149d4                 | '   if cursor_y>st_lines-1
149d4     C3 E4 05 F1 | 	add	objptr, #195
149d8     F2 1E 02 FB | 	rdlong	local01, objptr
149dc     01 1E 86 F1 | 	sub	local01, #1
149e0     C3 E4 85 F1 | 	sub	objptr, #195
149e4     F2 16 C2 FA | 	rdbyte	arg03, objptr
149e8     3A E4 85 F1 | 	sub	objptr, #58
149ec     0F 17 5A F2 | 	cmps	arg03, local01 wcz
149f0     2C 00 90 ED |  if_be	jmp	#LR__1722
149f4                 | '     scrollup()
149f4     00 12 06 F6 | 	mov	arg01, #0
149f8     01 00 00 FF 
149fc     40 14 06 F6 | 	mov	arg02, ##576
14a00     10 16 06 F6 | 	mov	arg03, #16
14a04     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
14a08                 | '     cursor_y:=st_lines-1
14a08     FD E4 05 F1 | 	add	objptr, #253
14a0c     F2 1E 02 FB | 	rdlong	local01, objptr
14a10     01 1E 86 F1 | 	sub	local01, #1
14a14     C3 E4 85 F1 | 	sub	objptr, #195
14a18     F2 1E 42 FC | 	wrbyte	local01, objptr
14a1c     3A E4 85 F1 | 	sub	objptr, #58
14a20                 | LR__1722
14a20                 | LR__1723
14a20                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
14a20     38 E4 05 F1 | 	add	objptr, #56
14a24     F2 14 E2 FA | 	rdword	arg02, objptr
14a28     02 14 66 F0 | 	shl	arg02, #2
14a2c     02 E4 05 F1 | 	add	objptr, #2
14a30     F2 16 C2 FA | 	rdbyte	arg03, objptr
14a34     3A E4 85 F1 | 	sub	objptr, #58
14a38     04 16 66 F0 | 	shl	arg03, #4
14a3c     11 12 06 F6 | 	mov	arg01, #17
14a40     30 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
14a44     A7 F0 03 F6 | 	mov	ptra, fp
14a48     B2 00 A0 FD | 	call	#popregs_
14a4c                 | _hg010b_spin2_putchar_ret
14a4c     2D 00 64 FD | 	ret
14a50                 | 
14a50                 | '     
14a50                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
14a50                 | ' 
14a50                 | ' pub putchar2(achar) | c,x,y,l,newcpl
14a50                 | _hg010b_spin2_putchar2
14a50     01 4A 05 F6 | 	mov	COUNT_, #1
14a54     A8 00 A0 FD | 	call	#pushregs_
14a58                 | ' 
14a58                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
14a58     38 E4 05 F1 | 	add	objptr, #56
14a5c     F2 1E E2 FA | 	rdword	local01, objptr
14a60     02 E4 05 F1 | 	add	objptr, #2
14a64     F2 14 C2 FA | 	rdbyte	arg02, objptr
14a68     04 14 66 F0 | 	shl	arg02, #4
14a6c     09 17 02 F6 | 	mov	arg03, arg01
14a70     03 E4 05 F1 | 	add	objptr, #3
14a74     F2 18 02 FB | 	rdlong	arg04, objptr
14a78     04 E4 05 F1 | 	add	objptr, #4
14a7c     F2 1A 02 FB | 	rdlong	arg05, objptr
14a80     41 E4 85 F1 | 	sub	objptr, #65
14a84     0F 13 02 F6 | 	mov	arg01, local01
14a88     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
14a8c                 | ' cursor_x+=2
14a8c     38 E4 05 F1 | 	add	objptr, #56
14a90     F2 1E E2 FA | 	rdword	local01, objptr
14a94     02 1E 06 F1 | 	add	local01, #2
14a98     F2 1E 52 FC | 	wrword	local01, objptr
14a9c                 | ' if cursor_x>=256
14a9c     F2 1E E2 FA | 	rdword	local01, objptr
14aa0     38 E4 85 F1 | 	sub	objptr, #56
14aa4     00 1F 56 F2 | 	cmps	local01, #256 wc
14aa8     64 00 90 CD |  if_b	jmp	#LR__1731
14aac                 | '   cursor_x:=0
14aac     38 E4 05 F1 | 	add	objptr, #56
14ab0     F2 00 58 FC | 	wrword	#0, objptr
14ab4                 | '   cursor_y+=1
14ab4     02 E4 05 F1 | 	add	objptr, #2
14ab8     F2 1E C2 FA | 	rdbyte	local01, objptr
14abc     01 1E 06 F1 | 	add	local01, #1
14ac0     F2 1E 42 FC | 	wrbyte	local01, objptr
14ac4                 | '   if cursor_y>st_lines-1
14ac4     C3 E4 05 F1 | 	add	objptr, #195
14ac8     F2 1E 02 FB | 	rdlong	local01, objptr
14acc     01 1E 86 F1 | 	sub	local01, #1
14ad0     C3 E4 85 F1 | 	sub	objptr, #195
14ad4     F2 1A C2 FA | 	rdbyte	arg05, objptr
14ad8     3A E4 85 F1 | 	sub	objptr, #58
14adc     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
14ae0     2C 00 90 ED |  if_be	jmp	#LR__1730
14ae4                 | '     scrollup()
14ae4     00 12 06 F6 | 	mov	arg01, #0
14ae8     01 00 00 FF 
14aec     40 14 06 F6 | 	mov	arg02, ##576
14af0     10 16 06 F6 | 	mov	arg03, #16
14af4     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
14af8                 | '     cursor_y:=st_lines-1
14af8     FD E4 05 F1 | 	add	objptr, #253
14afc     F2 1E 02 FB | 	rdlong	local01, objptr
14b00     01 1E 86 F1 | 	sub	local01, #1
14b04     C3 E4 85 F1 | 	sub	objptr, #195
14b08     F2 1E 42 FC | 	wrbyte	local01, objptr
14b0c     3A E4 85 F1 | 	sub	objptr, #58
14b10                 | LR__1730
14b10                 | LR__1731
14b10                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
14b10     38 E4 05 F1 | 	add	objptr, #56
14b14     F2 14 E2 FA | 	rdword	arg02, objptr
14b18     02 14 66 F0 | 	shl	arg02, #2
14b1c     02 E4 05 F1 | 	add	objptr, #2
14b20     F2 16 C2 FA | 	rdbyte	arg03, objptr
14b24     3A E4 85 F1 | 	sub	objptr, #58
14b28     04 16 66 F0 | 	shl	arg03, #4
14b2c     11 12 06 F6 | 	mov	arg01, #17
14b30     40 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
14b34     A7 F0 03 F6 | 	mov	ptra, fp
14b38     B2 00 A0 FD | 	call	#popregs_
14b3c                 | _hg010b_spin2_putchar2_ret
14b3c     2D 00 64 FD | 	ret
14b40                 | 
14b40                 | ' ''--------- Output a string at the cursor position, move the cursor  
14b40                 | ' 
14b40                 | ' pub write(text) | iii,c,ncx,ncy
14b40                 | _hg010b_spin2_write
14b40     04 4A 05 F6 | 	mov	COUNT_, #4
14b44     A8 00 A0 FD | 	call	#pushregs_
14b48     09 1F 02 F6 | 	mov	local01, arg01
14b4c                 | ' 
14b4c                 | ' repeat iii from 0 to strsize(text)-1
14b4c     00 20 06 F6 | 	mov	local02, #0
14b50     0F 13 02 F6 | 	mov	arg01, local01
14b54     09 23 02 F6 | 	mov	local03, arg01
14b58     97 06 48 FB | 	callpa	#(@LR__1741-@LR__1740)>>2,fcache_load_ptr_
14b5c                 | LR__1740
14b5c     11 FB C9 FA | 	rdbyte	result1, local03 wz
14b60     01 22 06 51 |  if_ne	add	local03, #1
14b64     F4 FF 9F 5D |  if_ne	jmp	#LR__1740
14b68                 | LR__1741
14b68     09 23 82 F1 | 	sub	local03, arg01
14b6c     01 22 86 F1 | 	sub	local03, #1
14b70     00 22 56 F2 | 	cmps	local03, #0 wc
14b74     01 24 86 F6 | 	negc	local04, #1
14b78     12 23 02 F1 | 	add	local03, local04
14b7c                 | LR__1742
14b7c                 | '   putchar2(byte[text+iii])
14b7c     0F 13 02 F6 | 	mov	arg01, local01
14b80     10 13 02 F1 | 	add	arg01, local02
14b84     09 13 C2 FA | 	rdbyte	arg01, arg01
14b88     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
14b8c     12 21 02 F1 | 	add	local02, local04
14b90     11 21 0A F2 | 	cmp	local02, local03 wz
14b94     E4 FF 9F 5D |  if_ne	jmp	#LR__1742
14b98     A7 F0 03 F6 | 	mov	ptra, fp
14b9c     B2 00 A0 FD | 	call	#popregs_
14ba0                 | _hg010b_spin2_write_ret
14ba0     2D 00 64 FD | 	ret
14ba4                 | 
14ba4                 | ' 
14ba4                 | ' ''-----------  Scroll the screen one line up
14ba4                 | ' 
14ba4                 | ' pub scrollup(start=0, end=576 , amount=16) | i
14ba4                 | _hg010b_spin2_scrollup
14ba4     01 4A 05 F6 | 	mov	COUNT_, #1
14ba8     A8 00 A0 FD | 	call	#pushregs_
14bac                 | ' 	
14bac                 | ' repeat i from 0 to 559 
14bac     00 1E 06 F6 | 	mov	local01, #0
14bb0                 | LR__1750
14bb0     F5 E4 05 F1 | 	add	objptr, #245
14bb4     F2 18 02 FB | 	rdlong	arg04, objptr
14bb8     1C E4 85 F1 | 	sub	objptr, #28
14bbc     F2 14 02 FB | 	rdlong	arg02, objptr
14bc0     0F 13 02 F6 | 	mov	arg01, local01
14bc4     10 12 06 F1 | 	add	arg01, #16
14bc8     02 12 66 F0 | 	shl	arg01, #2
14bcc     14 E4 05 F1 | 	add	objptr, #20
14bd0     F2 16 02 FB | 	rdlong	arg03, objptr
14bd4     0B 13 02 FD | 	qmul	arg01, arg03
14bd8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
14bd8     F6 03 00 FF 
14bdc     00 12 06 F6 | 	mov	arg01, ##519168
14be0     0C 13 82 F1 | 	sub	arg01, arg04
14be4     02 16 66 F0 | 	shl	arg03, #2
14be8     0A 00 00 FF 
14bec     D3 E5 05 F1 | 	add	objptr, ##5587
14bf0     18 18 62 FD | 	getqx	arg04
14bf4     0C 15 02 F1 | 	add	arg02, arg04
14bf8     7C 04 B0 FD | 	call	#_psram_spin2_read1
14bfc     0A 00 00 FF 
14c00     CB E5 85 F1 | 	sub	objptr, ##5579
14c04     F2 18 02 FB | 	rdlong	arg04, objptr
14c08     1C E4 85 F1 | 	sub	objptr, #28
14c0c     F2 14 02 FB | 	rdlong	arg02, objptr
14c10     0F 13 02 F6 | 	mov	arg01, local01
14c14     02 12 66 F0 | 	shl	arg01, #2
14c18     14 E4 05 F1 | 	add	objptr, #20
14c1c     F2 16 02 FB | 	rdlong	arg03, objptr
14c20     0B 13 02 FD | 	qmul	arg01, arg03
14c24                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
14c24     F6 03 00 FF 
14c28     00 12 06 F6 | 	mov	arg01, ##519168
14c2c     0C 13 82 F1 | 	sub	arg01, arg04
14c30     02 16 66 F0 | 	shl	arg03, #2
14c34     0A 00 00 FF 
14c38     D3 E5 05 F1 | 	add	objptr, ##5587
14c3c     18 18 62 FD | 	getqx	arg04
14c40     0C 15 02 F1 | 	add	arg02, arg04
14c44     CC 04 B0 FD | 	call	#_psram_spin2_write
14c48     0B 00 00 FF 
14c4c     C0 E4 85 F1 | 	sub	objptr, ##5824
14c50     01 1E 06 F1 | 	add	local01, #1
14c54     01 00 00 FF 
14c58     30 1E 56 F2 | 	cmps	local01, ##560 wc
14c5c     50 FF 9F CD |  if_b	jmp	#LR__1750
14c60                 | ' 
14c60                 | ' repeat i from 560 to 575
14c60     01 00 00 FF 
14c64     30 1E 06 F6 | 	mov	local01, ##560
14c68                 | LR__1751
14c68                 | '    fastline(0,1023,i,write_background)   
14c68     41 E4 05 F1 | 	add	objptr, #65
14c6c     F2 18 02 FB | 	rdlong	arg04, objptr
14c70     41 E4 85 F1 | 	sub	objptr, #65
14c74     00 12 06 F6 | 	mov	arg01, #0
14c78     09 14 CE F9 | 	bmask	arg02, #9
14c7c     0F 17 02 F6 | 	mov	arg03, local01
14c80     20 F1 BF FD | 	call	#_hg010b_spin2_fastline
14c84     01 1E 06 F1 | 	add	local01, #1
14c88     01 00 00 FF 
14c8c     40 1E 16 F2 | 	cmp	local01, ##576 wc
14c90     D4 FF 9F CD |  if_b	jmp	#LR__1751
14c94     A7 F0 03 F6 | 	mov	ptra, fp
14c98     B2 00 A0 FD | 	call	#popregs_
14c9c                 | _hg010b_spin2_scrollup_ret
14c9c     2D 00 64 FD | 	ret
14ca0                 | 
14ca0                 | ' 
14ca0                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
14ca0                 | ' 
14ca0                 | ' pub crlf()
14ca0                 | _hg010b_spin2_crlf
14ca0                 | ' 
14ca0                 | ' cursor_x:=leading_spaces*2
14ca0     01 00 00 FF 
14ca4     B2 E4 05 F1 | 	add	objptr, ##690
14ca8     F2 16 02 FB | 	rdlong	arg03, objptr
14cac     01 16 66 F0 | 	shl	arg03, #1
14cb0     01 00 00 FF 
14cb4     7A E4 85 F1 | 	sub	objptr, ##634
14cb8     F2 16 52 FC | 	wrword	arg03, objptr
14cbc                 | ' cursor_y+=1
14cbc     02 E4 05 F1 | 	add	objptr, #2
14cc0     F2 16 C2 FA | 	rdbyte	arg03, objptr
14cc4     01 16 06 F1 | 	add	arg03, #1
14cc8     F2 16 42 FC | 	wrbyte	arg03, objptr
14ccc                 | ' if cursor_y>st_lines-1
14ccc     C3 E4 05 F1 | 	add	objptr, #195
14cd0     F2 16 02 FB | 	rdlong	arg03, objptr
14cd4     01 16 86 F1 | 	sub	arg03, #1
14cd8     C3 E4 85 F1 | 	sub	objptr, #195
14cdc     F2 14 C2 FA | 	rdbyte	arg02, objptr
14ce0     3A E4 85 F1 | 	sub	objptr, #58
14ce4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
14ce8     2C 00 90 ED |  if_be	jmp	#LR__1760
14cec                 | '   scrollup()
14cec     00 12 06 F6 | 	mov	arg01, #0
14cf0     01 00 00 FF 
14cf4     40 14 06 F6 | 	mov	arg02, ##576
14cf8     10 16 06 F6 | 	mov	arg03, #16
14cfc     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
14d00                 | '   cursor_y:=st_lines-1
14d00     FD E4 05 F1 | 	add	objptr, #253
14d04     F2 16 02 FB | 	rdlong	arg03, objptr
14d08     01 16 86 F1 | 	sub	arg03, #1
14d0c     C3 E4 85 F1 | 	sub	objptr, #195
14d10     F2 16 42 FC | 	wrbyte	arg03, objptr
14d14     3A E4 85 F1 | 	sub	objptr, #58
14d18                 | LR__1760
14d18                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
14d18     38 E4 05 F1 | 	add	objptr, #56
14d1c     F2 14 E2 FA | 	rdword	arg02, objptr
14d20     02 14 66 F0 | 	shl	arg02, #2
14d24     02 E4 05 F1 | 	add	objptr, #2
14d28     F2 16 C2 FA | 	rdbyte	arg03, objptr
14d2c     3A E4 85 F1 | 	sub	objptr, #58
14d30     04 16 66 F0 | 	shl	arg03, #4
14d34     11 12 06 F6 | 	mov	arg01, #17
14d38     38 EE BF FD | 	call	#_hg010b_spin2_setspritepos
14d3c                 | _hg010b_spin2_crlf_ret
14d3c     2D 00 64 FD | 	ret
14d40                 | 
14d40                 | ' 
14d40                 | ' 
14d40                 | ' '*************************************************************************
14d40                 | ' '                                                                        *
14d40                 | ' '  Conversions                                                           *
14d40                 | ' '                                                                        *
14d40                 | ' '*************************************************************************
14d40                 | ' 
14d40                 | ' ''---------- Convert a integer to dec string, return a pointer
14d40                 | ' 
14d40                 | ' pub inttostr(i):result |q,pos,k,j
14d40                 | _hg010b_spin2_inttostr
14d40     03 4A 05 F6 | 	mov	COUNT_, #3
14d44     A8 00 A0 FD | 	call	#pushregs_
14d48     09 1F 0A F6 | 	mov	local01, arg01 wz
14d4c                 | ' 
14d4c                 | ' j:=i
14d4c                 | ' pos:=10
14d4c     0A 20 06 F6 | 	mov	local02, #10
14d50                 | ' k:=0
14d50     00 22 06 F6 | 	mov	local03, #0
14d54                 | ' 
14d54                 | ' if (j==0)
14d54     18 00 90 5D |  if_ne	jmp	#LR__1770
14d58                 | '   n_string[0]:=48
14d58     49 E4 05 F1 | 	add	objptr, #73
14d5c     F2 60 48 FC | 	wrbyte	#48, objptr
14d60                 | '   n_string[1]:=0
14d60     01 E4 05 F1 | 	add	objptr, #1
14d64     F2 00 48 FC | 	wrbyte	#0, objptr
14d68     4A E4 85 F1 | 	sub	objptr, #74
14d6c     C4 00 90 FD | 	jmp	#LR__1777
14d70                 | LR__1770
14d70                 | ' 
14d70                 | ' else
14d70                 | '   if (j<0)
14d70     0F 1F 52 F6 | 	abs	local01, local01 wc
14d74                 | '     j:=0-j
14d74                 | '     k:=45
14d74     2D 22 06 C6 |  if_b	mov	local03, #45
14d78                 | ' 
14d78                 | '   n_string[11]:=0
14d78     54 E4 05 F1 | 	add	objptr, #84
14d7c     F2 00 48 FC | 	wrbyte	#0, objptr
14d80     54 E4 85 F1 | 	sub	objptr, #84
14d84     97 24 48 FB | 	callpa	#(@LR__1772-@LR__1771)>>2,fcache_load_ptr_
14d88                 | '   repeat while (pos>-1)
14d88                 | LR__1771
14d88     00 20 56 F2 | 	cmps	local02, #0 wc
14d8c     40 00 90 CD |  if_b	jmp	#LR__1773
14d90     0F FB 51 F6 | 	abs	result1, local01 wc
14d94     0A FA 15 FD | 	qdiv	result1, #10
14d98                 | '     q:=j//10
14d98     19 FA 61 FD | 	getqy	result1
14d9c     FD FA 81 F6 | 	negc	result1, result1
14da0     0F 1F 52 F6 | 	abs	local01, local01 wc
14da4     0A 1E 16 FD | 	qdiv	local01, #10
14da8                 | '     q:=48+q
14da8     30 FA 05 F1 | 	add	result1, #48
14dac                 | '     n_string[pos]:=q
14dac     10 1F 02 F6 | 	mov	local01, local02
14db0     49 E4 05 F1 | 	add	objptr, #73
14db4     F2 1E 02 F1 | 	add	local01, objptr
14db8     0F FB 41 FC | 	wrbyte	result1, local01
14dbc                 | '     j:=j/10
14dbc     49 E4 85 F1 | 	sub	objptr, #73
14dc0                 | '     pos-=1
14dc0     01 20 86 F1 | 	sub	local02, #1
14dc4     18 1E 62 FD | 	getqx	local01
14dc8     0F 1F 82 F6 | 	negc	local01, local01
14dcc     B8 FF 9F FD | 	jmp	#LR__1771
14dd0                 | LR__1772
14dd0                 | LR__1773
14dd0                 | '   repeat while n_string[0]==48
14dd0                 | LR__1774
14dd0     49 E4 05 F1 | 	add	objptr, #73
14dd4     F2 16 C2 FA | 	rdbyte	arg03, objptr
14dd8     49 E4 85 F1 | 	sub	objptr, #73
14ddc     30 16 0E F2 | 	cmp	arg03, #48 wz
14de0     20 00 90 5D |  if_ne	jmp	#LR__1775
14de4                 | '     bytemove(@n_string,@n_string+1,12)
14de4     49 E4 05 F1 | 	add	objptr, #73
14de8     F2 12 02 F6 | 	mov	arg01, objptr
14dec     F2 14 02 F6 | 	mov	arg02, objptr
14df0     49 E4 85 F1 | 	sub	objptr, #73
14df4     01 14 06 F1 | 	add	arg02, #1
14df8     0C 16 06 F6 | 	mov	arg03, #12
14dfc     84 0C B0 FD | 	call	#__system____builtin_memmove
14e00     CC FF 9F FD | 	jmp	#LR__1774
14e04                 | LR__1775
14e04                 | ' 
14e04                 | '   if k==45
14e04     2D 22 0E F2 | 	cmp	local03, #45 wz
14e08     28 00 90 5D |  if_ne	jmp	#LR__1776
14e0c                 | '      bytemove(@n_string+1,@n_string,12)
14e0c     49 E4 05 F1 | 	add	objptr, #73
14e10     F2 12 02 F6 | 	mov	arg01, objptr
14e14     01 12 06 F1 | 	add	arg01, #1
14e18     F2 14 02 F6 | 	mov	arg02, objptr
14e1c     49 E4 85 F1 | 	sub	objptr, #73
14e20     0C 16 06 F6 | 	mov	arg03, #12
14e24     5C 0C B0 FD | 	call	#__system____builtin_memmove
14e28                 | '      n_string[0]:=k
14e28     49 E4 05 F1 | 	add	objptr, #73
14e2c     F2 22 42 FC | 	wrbyte	local03, objptr
14e30     49 E4 85 F1 | 	sub	objptr, #73
14e34                 | LR__1776
14e34                 | LR__1777
14e34                 | ' 
14e34                 | ' q:=@n_string
14e34     49 E4 05 F1 | 	add	objptr, #73
14e38     F2 FA 01 F6 | 	mov	result1, objptr
14e3c     49 E4 85 F1 | 	sub	objptr, #73
14e40                 | ' return q
14e40     A7 F0 03 F6 | 	mov	ptra, fp
14e44     B2 00 A0 FD | 	call	#popregs_
14e48                 | _hg010b_spin2_inttostr_ret
14e48     2D 00 64 FD | 	ret
14e4c                 | 
14e4c                 | ' 
14e4c                 | ' '..............................................................................
14e4c                 | ' 
14e4c                 | ' {{
14e4c                 | ' }}
14e4c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
14e4c                 | _psram_spin2_startx
14e4c     04 4A 05 F6 | 	mov	COUNT_, #4
14e50     A8 00 A0 FD | 	call	#pushregs_
14e54     09 1F 02 F6 | 	mov	local01, arg01
14e58     0B 21 02 F6 | 	mov	local02, arg03
14e5c     0C 23 02 F6 | 	mov	local03, arg04
14e60                 | '     stop() ' restart driver if required
14e60     54 01 B0 FD | 	call	#_psram_spin2_stop
14e64     00 1E 0E F2 | 	cmp	local01, #0 wz
14e68     14 1E 06 AB |  if_e	rdlong	local01, #20
14e6c     0F 15 52 F6 | 	abs	arg02, local01 wc
14e70     A1 07 00 FF 
14e74     40 14 16 FD | 	qdiv	arg02, ##1000000
14e78                 | ' 
14e78                 | '     ' use current frequency if none specified
14e78                 | ' 
14e78                 | '     if freq == 0 
14e78                 | '         freq := clkfreq 
14e78                 | ' 
14e78                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
14e78                 | ' 
14e78                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
14e78                 | '     if burst < 0
14e78                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
14e78     18 14 62 FD | 	getqx	arg02
14e7c     0A 19 82 F6 | 	negc	arg04, arg02
14e80     03 18 66 F0 | 	shl	arg04, #3
14e84     84 18 86 F1 | 	sub	arg04, #132
14e88     04 18 46 F0 | 	shr	arg04, #4
14e8c     04 18 66 F0 | 	shl	arg04, #4
14e90     00 18 56 F2 | 	cmps	arg04, #0 wc
14e94     0E FA 65 C6 |  if_b	neg	result1, #14
14e98     10 01 90 CD |  if_b	jmp	#LR__1783
14e9c                 | ' 
14e9c                 | '     ' compute the input delay
14e9c                 | ' 
14e9c                 | '     if delay <= 0
14e9c     01 20 56 F2 | 	cmps	local02, #1 wc
14ea0     10 00 90 3D |  if_ae	jmp	#LR__1780
14ea4                 | '         delay := lookupDelay(freq)
14ea4     0F 13 02 F6 | 	mov	arg01, local01
14ea8     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
14eac     FD 20 02 F6 | 	mov	local02, result1
14eb0     04 00 90 FD | 	jmp	#LR__1781
14eb4                 | LR__1780
14eb4                 | '     else
14eb4                 | '         delay <#= $f ' limit to 15
14eb4     0F 20 66 F3 | 	fles	local02, #15
14eb8                 | LR__1781
14eb8                 | ' 
14eb8                 | '     ' create our lock
14eb8                 | ' 
14eb8                 | '     driverlock := LOCKNEW()  
14eb8     00 FA 05 F6 | 	mov	result1, #0
14ebc     04 FA 61 FD | 	locknew	result1
14ec0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14ec4     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
14ec8                 | '     if driverlock == -1
14ec8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14ecc     FF FF 7F FF 
14ed0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
14ed4                 | '         return ERR_NO_LOCK
14ed4     1A FA 65 A6 |  if_e	neg	result1, #26
14ed8     D0 00 90 AD |  if_e	jmp	#LR__1783
14edc                 | ' 
14edc                 | '     ' patch in the proper data and HUB addresses to the startup structure
14edc                 | ' 
14edc                 | '     long[@startupData][0]:=clkfreq
14edc     14 1E 06 FB | 	rdlong	local01, #20
14ee0     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
14ee4     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
14ee8                 | ' '    long[@startupData][1]:=$1000_0000
14ee8                 | '     long[@startupData][5]:=@deviceData
14ee8     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14eec     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14ef0     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
14ef4     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
14ef8     14 14 06 F1 | 	add	arg02, #20
14efc     0A 1F 62 FC | 	wrlong	local01, arg02
14f00                 | '     long[@startupData][6]:=@qosData
14f00     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
14f04     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14f08     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
14f0c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
14f10     18 14 06 F1 | 	add	arg02, #24
14f14     0A 1F 62 FC | 	wrlong	local01, arg02
14f18                 | '     long[@startupData][7]:=$7FF00
14f18     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14f1c     1C 1E 06 F1 | 	add	local01, #28
14f20     FF 03 80 FF 
14f24     0F 01 6A FC | 	wrlong	##524032, local01
14f28                 | ' 
14f28                 | '     ' setup some default bank and QoS parameter values
14f28                 | ' 
14f28                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
14f28     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14f2c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
14f30     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
14f34     10 18 66 F0 | 	shl	arg04, #16
14f38     0C 20 66 F0 | 	shl	local02, #12
14f3c     10 19 42 F5 | 	or	arg04, local02
14f40     18 18 46 F5 | 	or	arg04, #24
14f44     0C 15 02 F6 | 	mov	arg02, arg04
14f48     02 16 06 F6 | 	mov	arg03, #2
14f4c     A0 00 A0 FD | 	call	#\builtin_longfill_
14f50                 | '     longfill(@qosData, $FFFF0000, 8)
14f50     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14f54     07 16 06 F6 | 	mov	arg03, #7
14f58     28 16 62 FD | 	setq	arg03
14f5c     80 FF FF FF 
14f60     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
14f64                 | ' 
14f64                 | '     ' get the address of the PSRAM memory driver so we can start it
14f64                 | ' 
14f64                 | '     driverAddr:= driver.getDriverAddr()
14f64                 | '     return @driver_start
14f64     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
14f68     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
14f6c     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
14f70                 | ' 
14f70                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
14f70                 | ' 
14f70                 | '     if desiredcog < 0
14f70     00 22 56 F2 | 	cmps	local03, #0 wc
14f74                 | '         desiredcog := NEWCOG
14f74     10 22 06 C6 |  if_b	mov	local03, #16
14f78                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
14f78     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
14f7c     11 25 02 F6 | 	mov	local04, local03
14f80     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
14f84     0A 25 F2 FC | 	coginit	local04, arg02 wc
14f88     01 24 66 C6 |  if_b	neg	local04, #1
14f8c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14f90     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
14f94                 | '     repeat until long[@startupData] == 0 
14f94     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
14f98                 | LR__1782
14f98     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
14f9c     F8 FF 9F 5D |  if_ne	jmp	#LR__1782
14fa0                 | ' 
14fa0                 | '     return drivercog
14fa0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14fa4     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
14fa8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14fac                 | LR__1783
14fac     A7 F0 03 F6 | 	mov	ptra, fp
14fb0     B2 00 A0 FD | 	call	#popregs_
14fb4                 | _psram_spin2_startx_ret
14fb4     2D 00 64 FD | 	ret
14fb8                 | 
14fb8                 | ' 
14fb8                 | ' '..............................................................................
14fb8                 | ' 
14fb8                 | ' {{
14fb8                 | ' }}
14fb8                 | ' PUB stop() : i
14fb8                 | _psram_spin2_stop
14fb8     00 00 06 F6 | 	mov	_var01, #0
14fbc                 | '     if drivercog <> -1
14fbc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14fc0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14fc4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14fc8     FF FF 7F FF 
14fcc     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
14fd0     70 00 90 AD |  if_e	jmp	#LR__1793
14fd4                 | '         cogstop(drivercog) ' a rather brutal stop
14fd4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14fd8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14fdc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14fe0     03 12 62 FD | 	cogstop	arg01
14fe4     97 26 48 FB | 	callpa	#(@LR__1792-@LR__1790)>>2,fcache_load_ptr_
14fe8                 | '         repeat i from 0 to 7
14fe8                 | LR__1790
14fe8                 | '             if long[$7FF00][i*3] < 0
14fe8     00 FB 01 F6 | 	mov	result1, _var01
14fec     01 FA 65 F0 | 	shl	result1, #1
14ff0     00 FB 01 F1 | 	add	result1, _var01
14ff4     02 FA 65 F0 | 	shl	result1, #2
14ff8     FF 03 00 FF 
14ffc     00 FB 05 F1 | 	add	result1, ##524032
15000     FD FA 01 FB | 	rdlong	result1, result1
15004     00 FA 55 F2 | 	cmps	result1, #0 wc
15008     1C 00 90 3D |  if_ae	jmp	#LR__1791
1500c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1500c     00 FB 01 F6 | 	mov	result1, _var01
15010     01 FA 65 F0 | 	shl	result1, #1
15014     00 FB 01 F1 | 	add	result1, _var01
15018     02 FA 65 F0 | 	shl	result1, #2
1501c     FF 03 00 FF 
15020     00 FB 05 F1 | 	add	result1, ##524032
15024     FD 20 68 FC | 	wrlong	#16, result1
15028                 | LR__1791
15028     01 00 06 F1 | 	add	_var01, #1
1502c     08 00 56 F2 | 	cmps	_var01, #8 wc
15030     B4 FF 9F CD |  if_b	jmp	#LR__1790
15034                 | LR__1792
15034                 | '         drivercog := -1
15034     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
15038     FF FF FF FF 
1503c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
15040     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15044                 | LR__1793
15044                 | '     if driverlock <> -1
15044     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
15048     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1504c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
15050     FF FF 7F FF 
15054     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
15058                 | '         LOCKRET(driverlock)
15058     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1505c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
15060     05 12 62 5D |  if_ne	lockret	arg01
15064                 | '         driverlock := -1
15064     FF FF FF 5F 
15068     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1506c     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
15070     00 FB 01 F6 | 	mov	result1, _var01
15074                 | _psram_spin2_stop_ret
15074     2D 00 64 FD | 	ret
15078                 | 
15078                 | ' 
15078                 | ' '..............................................................................
15078                 | ' 
15078                 | ' {{
15078                 | ' }}
15078                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
15078                 | _psram_spin2_read1
15078                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
15078                 | '     if drivercog == -1 ' driver must be running
15078     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1507c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
15080     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15084     FF FF 7F FF 
15088     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1508c                 | '         return ERR_INACTIVE
1508c     0F FA 65 A6 |  if_e	neg	result1, #15
15090     7C 00 90 AD |  if_e	jmp	#LR__1801
15094                 | '     if count == 0 ' don't even bother reading
15094     00 16 0E F2 | 	cmp	arg03, #0 wz
15098                 | '         return 0
15098     00 FA 05 A6 |  if_e	mov	result1, #0
1509c     70 00 90 AD |  if_e	jmp	#LR__1801
150a0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
150a0     00 FA 05 F6 | 	mov	result1, #0
150a4     01 FA 61 FD | 	cogid	result1
150a8     FD 00 02 F6 | 	mov	_var01, result1
150ac     01 00 66 F0 | 	shl	_var01, #1
150b0     FD 00 02 F1 | 	add	_var01, result1
150b4     02 00 66 F0 | 	shl	_var01, #2
150b8     FF 03 00 FF 
150bc     00 03 06 F6 | 	mov	_var02, ##524032
150c0     00 03 02 F1 | 	add	_var02, _var01
150c4                 | '     if long[mailbox] < 0
150c4     01 01 02 FB | 	rdlong	_var01, _var02
150c8     00 00 56 F2 | 	cmps	_var01, #0 wc
150cc                 | '         return ERR_MAILBOX_BUSY
150cc     1C FA 65 C6 |  if_b	neg	result1, #28
150d0     3C 00 90 CD |  if_b	jmp	#LR__1801
150d4                 | '     long[mailbox][2] := count
150d4     08 02 06 F1 | 	add	_var02, #8
150d8     01 17 62 FC | 	wrlong	arg03, _var02
150dc                 | '     long[mailbox][1] := dstHubAddr
150dc     04 02 86 F1 | 	sub	_var02, #4
150e0     01 13 62 FC | 	wrlong	arg01, _var02
150e4     04 02 86 F1 | 	sub	_var02, #4
150e8                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
150e8     0A 05 02 F6 | 	mov	_var03, arg02
150ec     D9 04 06 F4 | 	bitl	_var03, #217
150f0     00 00 58 FF 
150f4     00 00 06 F6 | 	mov	_var01, ##-1342177280
150f8     02 01 02 F1 | 	add	_var01, _var03
150fc     01 01 62 FC | 	wrlong	_var01, _var02
15100                 | '     repeat
15100                 | LR__1800
15100                 | '         result := long[mailbox]    
15100     01 05 02 FB | 	rdlong	_var03, _var02
15104     00 04 56 F2 | 	cmps	_var03, #0 wc
15108     F4 FF 9F CD |  if_b	jmp	#LR__1800
1510c                 | '     while result < 0   
1510c                 | '     return -result                       'return success or error
1510c     02 FB 61 F6 | 	neg	result1, _var03
15110                 | LR__1801
15110                 | _psram_spin2_read1_ret
15110     2D 00 64 FD | 	ret
15114                 | 
15114                 | ' 
15114                 | ' '..............................................................................
15114                 | ' 
15114                 | ' {{
15114                 | ' }}
15114                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
15114                 | _psram_spin2_write
15114                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
15114                 | '     if drivercog == -1 ' driver must be running
15114     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
15118     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1511c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15120     FF FF 7F FF 
15124     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
15128                 | '         return ERR_INACTIVE
15128     0F FA 65 A6 |  if_e	neg	result1, #15
1512c     7C 00 90 AD |  if_e	jmp	#LR__1811
15130                 | '     if count == 0 ' don't even bother writing
15130     00 16 0E F2 | 	cmp	arg03, #0 wz
15134                 | '         return 0
15134     00 FA 05 A6 |  if_e	mov	result1, #0
15138     70 00 90 AD |  if_e	jmp	#LR__1811
1513c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1513c     00 FA 05 F6 | 	mov	result1, #0
15140     01 FA 61 FD | 	cogid	result1
15144     FD 00 02 F6 | 	mov	_var01, result1
15148     01 00 66 F0 | 	shl	_var01, #1
1514c     FD 00 02 F1 | 	add	_var01, result1
15150     02 00 66 F0 | 	shl	_var01, #2
15154     FF 03 00 FF 
15158     00 03 06 F6 | 	mov	_var02, ##524032
1515c     00 03 02 F1 | 	add	_var02, _var01
15160                 | '     if long[mailbox] < 0
15160     01 01 02 FB | 	rdlong	_var01, _var02
15164     00 00 56 F2 | 	cmps	_var01, #0 wc
15168                 | '         return ERR_MAILBOX_BUSY
15168     1C FA 65 C6 |  if_b	neg	result1, #28
1516c     3C 00 90 CD |  if_b	jmp	#LR__1811
15170                 | '     long[mailbox][2] := count
15170     08 02 06 F1 | 	add	_var02, #8
15174     01 17 62 FC | 	wrlong	arg03, _var02
15178                 | '     long[mailbox][1] := srcHubAddr
15178     04 02 86 F1 | 	sub	_var02, #4
1517c     01 13 62 FC | 	wrlong	arg01, _var02
15180     04 02 86 F1 | 	sub	_var02, #4
15184                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
15184     0A 05 02 F6 | 	mov	_var03, arg02
15188     D9 04 06 F4 | 	bitl	_var03, #217
1518c     00 00 78 FF 
15190     00 00 06 F6 | 	mov	_var01, ##-268435456
15194     02 01 02 F1 | 	add	_var01, _var03
15198     01 01 62 FC | 	wrlong	_var01, _var02
1519c                 | '     repeat
1519c                 | LR__1810
1519c                 | '         result := long[mailbox]    
1519c     01 05 02 FB | 	rdlong	_var03, _var02
151a0     00 04 56 F2 | 	cmps	_var03, #0 wc
151a4     F4 FF 9F CD |  if_b	jmp	#LR__1810
151a8                 | '     while result < 0   
151a8                 | '     return -result                       'return success or error
151a8     02 FB 61 F6 | 	neg	result1, _var03
151ac                 | LR__1811
151ac                 | _psram_spin2_write_ret
151ac     2D 00 64 FD | 	ret
151b0                 | 
151b0                 | ' 
151b0                 | ' ' generalized fill
151b0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
151b0                 | _psram_spin2_fill
151b0     09 01 02 F6 | 	mov	_var01, arg01
151b4     0A 03 02 F6 | 	mov	_var02, arg02
151b8     0B 05 02 F6 | 	mov	_var03, arg03
151bc     0D 07 02 F6 | 	mov	_var04, arg05
151c0                 | '     case datasize 
151c0     01 06 86 F1 | 	sub	_var04, #1
151c4     04 06 26 F3 | 	fle	_var04, #4
151c8     30 06 62 FD | 	jmprel	_var04
151cc                 | LR__1820
151cc     10 00 90 FD | 	jmp	#LR__1821
151d0     18 00 90 FD | 	jmp	#LR__1822
151d4     2C 00 90 FD | 	jmp	#LR__1824
151d8     1C 00 90 FD | 	jmp	#LR__1823
151dc     24 00 90 FD | 	jmp	#LR__1824
151e0                 | LR__1821
151e0                 | '         1: req := driver.R_WRITEBYTE
151e0     00 00 60 FF 
151e4     00 08 06 F6 | 	mov	_var05, ##-1073741824
151e8     20 00 90 FD | 	jmp	#LR__1825
151ec                 | LR__1822
151ec                 | '         2: req := driver.R_WRITEWORD
151ec     00 00 68 FF 
151f0     00 08 06 F6 | 	mov	_var05, ##-805306368
151f4     14 00 90 FD | 	jmp	#LR__1825
151f8                 | LR__1823
151f8                 | '         4: req := driver.R_WRITELONG
151f8     00 00 70 FF 
151fc     00 08 06 F6 | 	mov	_var05, ##-536870912
15200     08 00 90 FD | 	jmp	#LR__1825
15204                 | LR__1824
15204                 | '         other : return ERR_INVALID
15204     06 FA 65 F6 | 	neg	result1, #6
15208     94 00 90 FD | 	jmp	#LR__1827
1520c                 | LR__1825
1520c                 | '     if count == 0   ' nothing to do
1520c     00 04 0E F2 | 	cmp	_var03, #0 wz
15210                 | '         return 0
15210     00 FA 05 A6 |  if_e	mov	result1, #0
15214     88 00 90 AD |  if_e	jmp	#LR__1827
15218                 | '     if drivercog == -1
15218     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1521c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
15220     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15224     FF FF 7F FF 
15228     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1522c                 | '         return ERR_INACTIVE
1522c     0F FA 65 A6 |  if_e	neg	result1, #15
15230     6C 00 90 AD |  if_e	jmp	#LR__1827
15234                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
15234     00 FA 05 F6 | 	mov	result1, #0
15238     01 FA 61 FD | 	cogid	result1
1523c     FD 06 02 F6 | 	mov	_var04, result1
15240     01 06 66 F0 | 	shl	_var04, #1
15244     FD 06 02 F1 | 	add	_var04, result1
15248     02 06 66 F0 | 	shl	_var04, #2
1524c     FF 03 00 FF 
15250     00 0B 06 F6 | 	mov	_var06, ##524032
15254     03 0B 02 F1 | 	add	_var06, _var04
15258                 | '     if long[mailbox] < 0
15258     05 07 02 FB | 	rdlong	_var04, _var06
1525c     00 06 56 F2 | 	cmps	_var04, #0 wc
15260                 | '         return ERR_MAILBOX_BUSY
15260     1C FA 65 C6 |  if_b	neg	result1, #28
15264     38 00 90 CD |  if_b	jmp	#LR__1827
15268                 | '     long[mailbox][2] := count
15268     08 0A 06 F1 | 	add	_var06, #8
1526c     05 05 62 FC | 	wrlong	_var03, _var06
15270                 | '     long[mailbox][1] := pattern
15270     04 0A 86 F1 | 	sub	_var06, #4
15274     05 03 62 FC | 	wrlong	_var02, _var06
15278     04 0A 86 F1 | 	sub	_var06, #4
1527c                 | '     long[mailbox] := req + (addr & $fffffff)
1527c     04 0D 02 F6 | 	mov	_var07, _var05
15280     00 0F 02 F6 | 	mov	_var08, _var01
15284     7C 0E 06 F4 | 	bitl	_var08, #124
15288     07 0D 02 F1 | 	add	_var07, _var08
1528c     05 0D 62 FC | 	wrlong	_var07, _var06
15290                 | '     repeat
15290                 | LR__1826
15290                 | '         r := long[mailbox]
15290     05 0F 02 FB | 	rdlong	_var08, _var06
15294     00 0E 56 F2 | 	cmps	_var08, #0 wc
15298     F4 FF 9F CD |  if_b	jmp	#LR__1826
1529c                 | '     while r < 0
1529c                 | '     return -r                  ' return 0 for success or negated error code
1529c     07 FB 61 F6 | 	neg	result1, _var08
152a0                 | LR__1827
152a0                 | _psram_spin2_fill_ret
152a0     2D 00 64 FD | 	ret
152a4                 | 
152a4                 | ' 
152a4                 | ' '..............................................................................
152a4                 | ' 
152a4                 | ' {{
152a4                 | ' }}
152a4                 | ' PUB setQos(cog, qos) : result | mailbox
152a4                 | _psram_spin2_setQos
152a4     09 01 02 F6 | 	mov	_var01, arg01
152a8                 | '     if drivercog == -1 ' driver must be running
152a8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
152ac     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
152b0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
152b4     FF FF 7F FF 
152b8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
152bc                 | '         return ERR_INACTIVE
152bc     0F FA 65 A6 |  if_e	neg	result1, #15
152c0     9C 00 90 AD |  if_e	jmp	#LR__1834
152c4                 | '     if cog < 0 or cog > 7 ' enforce cog id range
152c4     00 00 56 F2 | 	cmps	_var01, #0 wc
152c8     08 00 90 CD |  if_b	jmp	#LR__1830
152cc     08 00 56 F2 | 	cmps	_var01, #8 wc
152d0     08 00 90 CD |  if_b	jmp	#LR__1831
152d4                 | LR__1830
152d4                 | '         return ERR_INVALID
152d4     06 FA 65 F6 | 	neg	result1, #6
152d8     84 00 90 FD | 	jmp	#LR__1834
152dc                 | LR__1831
152dc                 | '     long[@qosData][cog] := qos & !$1ff
152dc     FF 15 26 F5 | 	andn	arg02, #511
152e0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
152e4     02 00 66 F0 | 	shl	_var01, #2
152e8     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
152ec     00 15 62 FC | 	wrlong	arg02, _var01
152f0                 | '     mailbox := $7FF00 + drivercog*12
152f0     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
152f4     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
152f8     02 07 02 F6 | 	mov	_var04, _var03
152fc     01 06 66 F0 | 	shl	_var04, #1
15300     02 07 02 F1 | 	add	_var04, _var03
15304     02 06 66 F0 | 	shl	_var04, #2
15308     FF 03 00 FF 
1530c     00 09 06 F6 | 	mov	_var05, ##524032
15310     03 09 02 F1 | 	add	_var05, _var04
15314                 | '     repeat until LOCKTRY(driverlock)
15314     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
15318                 | LR__1832
15318     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1531c     06 12 72 FD | 	locktry	arg01 wc
15320     F4 FF 9F 3D |  if_ae	jmp	#LR__1832
15324     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
15328                 | '     long[mailbox] := driver.R_CONFIG + cogid()
15328     00 06 06 F6 | 	mov	_var04, #0
1532c     01 06 62 FD | 	cogid	_var04
15330     00 00 78 FF 
15334     00 02 06 F6 | 	mov	_var02, ##-268435456
15338     03 03 02 F1 | 	add	_var02, _var04
1533c     04 03 62 FC | 	wrlong	_var02, _var05
15340                 | '     repeat while long[mailbox] < 0
15340                 | LR__1833
15340     04 03 02 FB | 	rdlong	_var02, _var05
15344     00 02 56 F2 | 	cmps	_var02, #0 wc
15348     F4 FF 9F CD |  if_b	jmp	#LR__1833
1534c                 | '     LOCKREL(driverlock)
1534c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
15350     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
15354     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
15358     07 12 72 FD | 	lockrel	arg01 wc
1535c     00 FA 05 F6 | 	mov	result1, #0
15360                 | LR__1834
15360                 | _psram_spin2_setQos_ret
15360     2D 00 64 FD | 	ret
15364                 | 
15364                 | ' 
15364                 | ' '..............................................................................
15364                 | ' 
15364                 | ' {{
15364                 | ' }}
15364                 | ' PRI lookupDelay(freq) : delay | profile
15364                 | _psram_spin2_lookupDelay
15364                 | '     profile := @delayTable
15364     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
15368     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1536c                 | '     delay := long[profile][0]
1536c     00 03 02 FB | 	rdlong	_var02, _var01
15370                 | '     repeat while long[profile][1] 
15370     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
15374     97 16 48 FB | 	callpa	#(@LR__1841-@LR__1840)>>2,fcache_load_ptr_
15378                 | LR__1840
15378     04 00 06 F1 | 	add	_var01, #4
1537c     00 FB 09 FB | 	rdlong	result1, _var01 wz
15380     04 00 86 F1 | 	sub	_var01, #4
15384     1C 00 90 AD |  if_e	jmp	#LR__1842
15388                 | '         if freq +< long[profile][1] 
15388     04 00 06 F1 | 	add	_var01, #4
1538c     00 FB 01 FB | 	rdlong	result1, _var01
15390     04 00 86 F1 | 	sub	_var01, #4
15394     FD 12 12 F2 | 	cmp	arg01, result1 wc
15398                 | '             quit
15398                 | '         profile += 4
15398     04 00 06 31 |  if_ae	add	_var01, #4
1539c                 | '         delay++
1539c     01 02 06 31 |  if_ae	add	_var02, #1
153a0     D4 FF 9F 3D |  if_ae	jmp	#LR__1840
153a4                 | LR__1841
153a4                 | LR__1842
153a4     01 FB 01 F6 | 	mov	result1, _var02
153a8                 | _psram_spin2_lookupDelay_ret
153a8     2D 00 64 FD | 	ret
153ac                 | 
153ac                 | ' 
153ac                 | ' PUB start() : r
153ac                 | _usbnew_spin2_start
153ac     00 00 06 F6 | 	mov	_var01, #0
153b0                 | '   ifnot driver_cog
153b0     15 00 00 FF 
153b4     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
153b8     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
153bc     15 00 00 FF 
153c0     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
153c4     38 00 90 5D |  if_ne	jmp	#LR__1850
153c8                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
153c8     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
153cc     10 00 06 F6 | 	mov	_var01, #16
153d0     00 16 06 F6 | 	mov	arg03, #0
153d4     28 16 62 FD | 	setq	arg03
153d8     0A 01 F2 FC | 	coginit	_var01, arg02 wc
153dc     01 00 66 C6 |  if_b	neg	_var01, #1
153e0                 | '     if r >= 0
153e0     00 00 56 F2 | 	cmps	_var01, #0 wc
153e4                 | '       driver_cog := r+1
153e4     00 03 02 36 |  if_ae	mov	_var02, _var01
153e8     01 02 06 31 |  if_ae	add	_var02, #1
153ec     15 00 00 3F 
153f0     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
153f4     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
153f8     15 00 00 3F 
153fc     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
15400                 | LR__1850
15400     00 FB 01 F6 | 	mov	result1, _var01
15404                 | _usbnew_spin2_start_ret
15404     2D 00 64 FD | 	ret
15408                 | 
15408                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
15408                 | ' 
15408                 | ' '' Return key event from buffer if there is one
15408                 | ' PUB get_key() : r | tail
15408                 | _usbnew_spin2_get_key
15408                 | '   tail := keyq_tail
15408     0F 00 00 FF 
1540c     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
15410     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
15414                 | '   if keyq_head == tail
15414     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
15418     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1541c     0F 00 00 FF 
15420     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
15424     00 03 0A F2 | 	cmp	_var02, _var01 wz
15428                 | '     return 0 ' No event
15428     00 FA 05 A6 |  if_e	mov	result1, #0
1542c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
15430                 | '   r := keyq_data[tail]
15430     00 03 02 F6 | 	mov	_var02, _var01
15434     02 02 66 F0 | 	shl	_var02, #2
15438     0F 00 00 FF 
1543c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
15440     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
15444     01 FB 01 FB | 	rdlong	result1, _var02
15448                 | '   if ++tail == KEYQUEUE_SIZE
15448     01 00 06 F1 | 	add	_var01, #1
1544c     80 00 0E F2 | 	cmp	_var01, #128 wz
15450                 | '     tail := 0
15450     00 00 06 A6 |  if_e	mov	_var01, #0
15454                 | '   keyq_tail := tail
15454     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
15458     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1545c     0F 00 00 FF 
15460     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
15464                 | _usbnew_spin2_get_key_ret
15464     2D 00 64 FD | 	ret
15468                 | 
15468                 | ' 
15468                 | ' '' Emulate mouse movement
15468                 | ' PUB mouse_move(x,y)
15468                 | _usbnew_spin2_mouse_move
15468     02 4A 05 F6 | 	mov	COUNT_, #2
1546c     A8 00 A0 FD | 	call	#pushregs_
15470     09 1F 02 F6 | 	mov	local01, arg01
15474     0A 21 02 F6 | 	mov	local02, arg02
15478                 | '   mouse_lock := 1
15478     14 00 00 FF 
1547c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
15480     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
15484     14 00 00 FF 
15488     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1548c                 | '   waitus(2) ' hope driver is now done
1548c     02 12 06 F6 | 	mov	arg01, #2
15490     30 0A B0 FD | 	call	#__system___waitus
15494                 | '   mouse_xacc := x
15494     14 00 00 FF 
15498     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1549c     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
154a0                 | '   mouse_yacc := y
154a0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
154a4     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
154a8                 | '   if mouse_outptr
154a8     04 00 00 FF 
154ac     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
154b0     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
154b4     0F 00 00 FF 
154b8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
154bc     24 00 90 AD |  if_e	jmp	#LR__1860
154c0                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
154c0     10 20 66 F0 | 	shl	local02, #16
154c4     0F 1F 32 F9 | 	getword	local01, local01, #0
154c8     0F 21 42 F5 | 	or	local02, local01
154cc     0F 00 00 FF 
154d0     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
154d4     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
154d8     0F 00 00 FF 
154dc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
154e0     0F 21 62 FC | 	wrlong	local02, local01
154e4                 | LR__1860
154e4                 | '   mouse_lock := 0
154e4     14 00 00 FF 
154e8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
154ec     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
154f0     14 00 00 FF 
154f4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
154f8     A7 F0 03 F6 | 	mov	ptra, fp
154fc     B2 00 A0 FD | 	call	#popregs_
15500                 | _usbnew_spin2_mouse_move_ret
15500     2D 00 64 FD | 	ret
15504                 | 
15504                 | '     '' Set HAVE_HIDPAD to enable.
15504                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
15504                 | ' 
15504                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
15504                 | ' PUB hidpad_id(dev) : r
15504                 | _usbnew_spin2_hidpad_id
15504                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
15504     13 00 00 FF 
15508     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1550c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
15510     09 01 02 F6 | 	mov	_var01, arg01
15514     03 00 66 F0 | 	shl	_var01, #3
15518     09 01 82 F1 | 	sub	_var01, arg01
1551c     02 00 66 F0 | 	shl	_var01, #2
15520     00 FB 01 F1 | 	add	result1, _var01
15524     FD FA 01 FB | 	rdlong	result1, result1
15528     13 00 00 FF 
1552c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
15530                 | _usbnew_spin2_hidpad_id_ret
15530     2D 00 64 FD | 	ret
15534                 | 
15534                 | ' 
15534                 | ' '' Get all button states for a device
15534                 | ' PUB hidpad_buttons(dev) : r 
15534                 | _usbnew_spin2_hidpad_buttons
15534                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
15534     13 00 00 FF 
15538     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1553c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
15540     09 01 02 F6 | 	mov	_var01, arg01
15544     03 00 66 F0 | 	shl	_var01, #3
15548     09 01 82 F1 | 	sub	_var01, arg01
1554c     02 00 66 F0 | 	shl	_var01, #2
15550     00 FB 01 F1 | 	add	result1, _var01
15554     14 FA 05 F1 | 	add	result1, #20
15558     FD FA 01 FB | 	rdlong	result1, result1
1555c     13 00 00 FF 
15560     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
15564                 | _usbnew_spin2_hidpad_buttons_ret
15564     2D 00 64 FD | 	ret
15568                 | 
15568                 | ' 
15568                 | ' '' Get state of an axis (normalized between -32768 and 32767)
15568                 | ' PUB hidpad_axis(dev,axnum) : r
15568                 | _usbnew_spin2_hidpad_axis
15568                 | '   if axnum +>= 6
15568     06 14 16 F2 | 	cmp	arg02, #6 wc
1556c                 | '     return 0
1556c     00 FA 05 36 |  if_ae	mov	result1, #0
15570     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
15574                 | '   else 
15574                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
15574     13 00 00 FF 
15578     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1557c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
15580     09 01 02 F6 | 	mov	_var01, arg01
15584     03 00 66 F0 | 	shl	_var01, #3
15588     09 01 82 F1 | 	sub	_var01, arg01
1558c     02 00 66 F0 | 	shl	_var01, #2
15590     00 FB 01 F1 | 	add	result1, _var01
15594     04 00 06 F6 | 	mov	_var01, #4
15598     0A 01 02 F1 | 	add	_var01, arg02
1559c     01 00 66 F0 | 	shl	_var01, #1
155a0     FD 00 02 F1 | 	add	_var01, result1
155a4     00 FB E1 FA | 	rdword	result1, _var01
155a8     0F FA 65 F7 | 	signx	result1, #15
155ac     13 00 00 FF 
155b0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
155b4                 | _usbnew_spin2_hidpad_axis_ret
155b4     2D 00 64 FD | 	ret
155b8                 | 
155b8                 | ' 
155b8                 | ' 
155b8                 | ' '--------------------------------------------------------------
155b8                 | ' '---------- Init the variables, start the cog. ----------------
155b8                 | ' '--------------------------------------------------------------
155b8                 | ' 
155b8                 | ' pub start(mbox,scope,cache) :cog,base | iii
155b8                 | _Audio093b_8_sc_spin2_start
155b8     04 4A 05 F6 | 	mov	COUNT_, #4
155bc     A8 00 A0 FD | 	call	#pushregs_
155c0     09 1F 02 F6 | 	mov	local01, arg01
155c4                 | ' 
155c4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
155c4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
155c4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
155c4                 | ' 
155c4                 | ' mailboxaddr:=mbox 
155c4     F2 1E 62 FC | 	wrlong	local01, objptr
155c8                 | ' scope_ptr:=scope
155c8     04 E4 05 F1 | 	add	objptr, #4
155cc     F2 14 62 FC | 	wrlong	arg02, objptr
155d0                 | ' cache_ptr:=cache
155d0     04 E4 05 F1 | 	add	objptr, #4
155d4     F2 16 62 FC | 	wrlong	arg03, objptr
155d8                 | ' base:=@channel1[0]
155d8     04 E4 05 F1 | 	add	objptr, #4
155dc     F2 20 02 F6 | 	mov	local02, objptr
155e0                 | ' 
155e0                 | ' repeat iii from 0 to 7
155e0     00 22 06 F6 | 	mov	local03, #0
155e4     01 00 00 FF 
155e8     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
155ec     0C E4 85 F1 | 	sub	objptr, #12
155f0     97 80 48 FB | 	callpa	#(@LR__1871-@LR__1870)>>2,fcache_load_ptr_
155f4                 | LR__1870
155f4                 | '   long[base+32*iii]:=0
155f4     10 1F 02 F6 | 	mov	local01, local02
155f8     11 FD 01 F6 | 	mov	result2, local03
155fc     05 FC 65 F0 | 	shl	result2, #5
15600     FE 1E 02 F1 | 	add	local01, result2
15604     0F 01 68 FC | 	wrlong	#0, local01
15608                 | '   long[base+32*iii+4]:=0
15608     10 1F 02 F6 | 	mov	local01, local02
1560c     11 FD 01 F6 | 	mov	result2, local03
15610     05 FC 65 F0 | 	shl	result2, #5
15614     FE 1E 02 F1 | 	add	local01, result2
15618     04 1E 06 F1 | 	add	local01, #4
1561c     0F 01 68 FC | 	wrlong	#0, local01
15620                 | '   long[base+32*iii+12]:=0
15620     10 25 02 F6 | 	mov	local04, local02
15624     11 1F 02 F6 | 	mov	local01, local03
15628     05 1E 66 F0 | 	shl	local01, #5
1562c     0F 25 02 F1 | 	add	local04, local01
15630     0C 24 06 F1 | 	add	local04, #12
15634     12 01 68 FC | 	wrlong	#0, local04
15638                 | '   long[base+32*iii+16]:=2 
15638     10 25 02 F6 | 	mov	local04, local02
1563c     11 1F 02 F6 | 	mov	local01, local03
15640     05 1E 66 F0 | 	shl	local01, #5
15644     0F 25 02 F1 | 	add	local04, local01
15648     10 24 06 F1 | 	add	local04, #16
1564c     12 05 68 FC | 	wrlong	#2, local04
15650                 | '   word[base+32*iii+20]:=0
15650     10 25 02 F6 | 	mov	local04, local02
15654     11 1F 02 F6 | 	mov	local01, local03
15658     05 1E 66 F0 | 	shl	local01, #5
1565c     0F 25 02 F1 | 	add	local04, local01
15660     14 24 06 F1 | 	add	local04, #20
15664     12 01 58 FC | 	wrword	#0, local04
15668                 | '   word[base+32*iii+22]:=8192
15668     10 25 02 F6 | 	mov	local04, local02
1566c     11 1F 02 F6 | 	mov	local01, local03
15670     05 1E 66 F0 | 	shl	local01, #5
15674     0F 25 02 F1 | 	add	local04, local01
15678     16 24 06 F1 | 	add	local04, #22
1567c     10 00 80 FF 
15680     12 01 58 FC | 	wrword	##8192, local04
15684                 | '   word[base+32*iii+24]:=4000+2*iii
15684     11 25 02 F6 | 	mov	local04, local03
15688     01 24 66 F0 | 	shl	local04, #1
1568c     07 00 00 FF 
15690     A0 1F 06 F6 | 	mov	local01, ##4000
15694     12 1F 02 F1 | 	add	local01, local04
15698     10 25 02 F6 | 	mov	local04, local02
1569c     11 FD 01 F6 | 	mov	result2, local03
156a0     05 FC 65 F0 | 	shl	result2, #5
156a4     FE 24 02 F1 | 	add	local04, result2
156a8     18 24 06 F1 | 	add	local04, #24
156ac     12 1F 52 FC | 	wrword	local01, local04
156b0                 | '   word[base+32*iii+26]:=2
156b0     10 25 02 F6 | 	mov	local04, local02
156b4     11 1F 02 F6 | 	mov	local01, local03
156b8     05 1E 66 F0 | 	shl	local01, #5
156bc     0F 25 02 F1 | 	add	local04, local01
156c0     1A 24 06 F1 | 	add	local04, #26
156c4     12 05 58 FC | 	wrword	#2, local04
156c8                 | '   long [base+32*iii+8]:=@null | $C0000000
156c8     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
156cc     3E 1E 26 F4 | 	bith	local01, #62
156d0     10 25 02 F6 | 	mov	local04, local02
156d4     11 17 02 F6 | 	mov	arg03, local03
156d8     05 16 66 F0 | 	shl	arg03, #5
156dc     0B 25 02 F1 | 	add	local04, arg03
156e0     08 24 06 F1 | 	add	local04, #8
156e4     12 1F 62 FC | 	wrlong	local01, local04
156e8     01 22 06 F1 | 	add	local03, #1
156ec     08 22 56 F2 | 	cmps	local03, #8 wc
156f0     00 FF 9F CD |  if_b	jmp	#LR__1870
156f4                 | LR__1871
156f4     01 00 00 FF 
156f8     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
156fc                 | '   
156fc                 | ' cog:=coginit(16,@audio,@mailboxaddr)
156fc     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
15700     F2 16 02 F6 | 	mov	arg03, objptr
15704     10 24 06 F6 | 	mov	local04, #16
15708     28 16 62 FD | 	setq	arg03
1570c     0A 25 F2 FC | 	coginit	local04, arg02 wc
15710     01 24 66 C6 |  if_b	neg	local04, #1
15714                 | ' waitms(100)
15714     64 12 06 F6 | 	mov	arg01, #100
15718     3C 07 B0 FD | 	call	#__system___waitms
1571c                 | ' return cog,base
1571c     10 FD 01 F6 | 	mov	result2, local02
15720     12 FB 01 F6 | 	mov	result1, local04
15724     A7 F0 03 F6 | 	mov	ptra, fp
15728     B2 00 A0 FD | 	call	#popregs_
1572c                 | _Audio093b_8_sc_spin2_start_ret
1572c     2D 00 64 FD | 	ret
15730                 | 
15730                 | ' 
15730                 | ' ' a simple play procedure to not poke everything. 
15730                 | ' 
15730                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
15730                 | _Audio093b_8_sc_spin2_play
15730     0C E4 05 F1 | 	add	objptr, #12
15734     F2 00 02 F6 | 	mov	_var01, objptr
15738     05 12 66 F0 | 	shl	arg01, #5
1573c     09 01 02 F1 | 	add	_var01, arg01
15740     00 00 60 FF 
15744     00 14 06 F1 | 	add	arg02, ##-1073741824
15748     00 13 02 F6 | 	mov	arg01, _var01
1574c     08 12 06 F1 | 	add	arg01, #8
15750     09 15 62 FC | 	wrlong	arg02, arg01
15754     00 15 02 F6 | 	mov	arg02, _var01
15758     0C 14 06 F1 | 	add	arg02, #12
1575c     0A 1B 62 FC | 	wrlong	arg05, arg02
15760     00 1C 56 F2 | 	cmps	arg06, #0 wc
15764     00 15 02 36 |  if_ae	mov	arg02, _var01
15768     10 14 06 31 |  if_ae	add	arg02, #16
1576c     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
15770     02 1A 06 C1 |  if_b	add	arg05, #2
15774     00 13 02 C6 |  if_b	mov	arg01, _var01
15778     10 12 06 C1 |  if_b	add	arg01, #16
1577c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
15780     0B 15 52 F6 | 	abs	arg02, arg03 wc
15784     0F 1B 80 FF 
15788     0A 3F 1A FD | 	qdiv	##3546911, arg02
1578c                 | ' 
1578c                 | ' base2:=@channel1[0]+32*channel
1578c                 | ' long[base2+8]:=sample+$C0000000 
1578c                 | ' long[base2+12]:= len
1578c                 | ' if loop >=0 
1578c                 | '   long[base2+16]:= loop
1578c     0C E4 85 F1 | 	sub	objptr, #12
15790                 | ' else
15790                 | '   long[base2+16]:= len+2
15790                 | ' word[base2+20]:=vol
15790     00 15 02 F6 | 	mov	arg02, _var01
15794     14 14 06 F1 | 	add	arg02, #20
15798     0A 19 52 FC | 	wrword	arg04, arg02
1579c                 | ' word[base2+24]:= 3546911/splfreq 
1579c     00 13 02 F6 | 	mov	arg01, _var01
157a0     18 12 06 F1 | 	add	arg01, #24
157a4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
157a4                 | ' long[base2+28]:=$40000000
157a4     18 14 62 FD | 	getqx	arg02
157a8     0A 15 82 F6 | 	negc	arg02, arg02
157ac     09 15 52 FC | 	wrword	arg02, arg01
157b0     00 15 02 F6 | 	mov	arg02, _var01
157b4     1A 14 06 F1 | 	add	arg02, #26
157b8     0A 01 5A FC | 	wrword	#256, arg02
157bc     1C 00 06 F1 | 	add	_var01, #28
157c0     00 00 A0 FF 
157c4     00 01 68 FC | 	wrlong	##1073741824, _var01
157c8                 | _Audio093b_8_sc_spin2_play_ret
157c8     2D 00 64 FD | 	ret
157cc                 | 
157cc                 | ' until (i >>8) >=len
157cc                 | ' 
157cc                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
157cc                 | _Audio093b_8_sc_spin2_play8
157cc                 | ' 
157cc                 | ' base2:=@channel1[0]+32*channel
157cc     0C E4 05 F1 | 	add	objptr, #12
157d0     F2 00 02 F6 | 	mov	_var01, objptr
157d4     05 12 66 F0 | 	shl	arg01, #5
157d8     09 01 02 F1 | 	add	_var01, arg01
157dc                 | ' long[base2]:=0
157dc     00 01 68 FC | 	wrlong	#0, _var01
157e0                 | ' long[base2+8]:=sample+$40000000 
157e0     00 00 20 FF 
157e4     00 14 06 F1 | 	add	arg02, ##1073741824
157e8     00 13 02 F6 | 	mov	arg01, _var01
157ec     08 12 06 F1 | 	add	arg01, #8
157f0     09 15 62 FC | 	wrlong	arg02, arg01
157f4                 | ' if loop>=0
157f4     00 1C 56 F2 | 	cmps	arg06, #0 wc
157f8     0C E4 85 F1 | 	sub	objptr, #12
157fc     1C 00 90 CD |  if_b	jmp	#LR__1880
15800                 | '   long[base2+12]:=loop
15800     00 15 02 F6 | 	mov	arg02, _var01
15804     0C 14 06 F1 | 	add	arg02, #12
15808     0A 1D 62 FC | 	wrlong	arg06, arg02
1580c                 | '   long[base2+16]:= len
1580c     00 1D 02 F6 | 	mov	arg06, _var01
15810     10 1C 06 F1 | 	add	arg06, #16
15814     0E 1B 62 FC | 	wrlong	arg05, arg06
15818     1C 00 90 FD | 	jmp	#LR__1881
1581c                 | LR__1880
1581c                 | ' else
1581c                 | '   long[base2+12]:= len
1581c     00 1D 02 F6 | 	mov	arg06, _var01
15820     0C 1C 06 F1 | 	add	arg06, #12
15824     0E 1B 62 FC | 	wrlong	arg05, arg06
15828                 | '   long[base2+16]:= len+1
15828     01 1A 06 F1 | 	add	arg05, #1
1582c     00 13 02 F6 | 	mov	arg01, _var01
15830     10 12 06 F1 | 	add	arg01, #16
15834     09 1B 62 FC | 	wrlong	arg05, arg01
15838                 | LR__1881
15838     0B 17 52 F6 | 	abs	arg03, arg03 wc
1583c     0F 1B 80 FF 
15840     0B 3F 1A FD | 	qdiv	##3546911, arg03
15844                 | ' word[base2+20]:=vol
15844     00 17 02 F6 | 	mov	arg03, _var01
15848     14 16 06 F1 | 	add	arg03, #20
1584c     0B 19 52 FC | 	wrword	arg04, arg03
15850                 | ' word[base2+24]:= 3546911/splfreq 
15850     00 13 02 F6 | 	mov	arg01, _var01
15854     18 12 06 F1 | 	add	arg01, #24
15858                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
15858                 | ' long[base2+28]:=$40000000
15858     18 18 62 FD | 	getqx	arg04
1585c     0C 19 82 F6 | 	negc	arg04, arg04
15860     09 19 52 FC | 	wrword	arg04, arg01
15864     00 19 02 F6 | 	mov	arg04, _var01
15868     1A 18 06 F1 | 	add	arg04, #26
1586c     0C 01 5A FC | 	wrword	#256, arg04
15870     1C 00 06 F1 | 	add	_var01, #28
15874     00 00 A0 FF 
15878     00 01 68 FC | 	wrlong	##1073741824, _var01
1587c                 | _Audio093b_8_sc_spin2_play8_ret
1587c     2D 00 64 FD | 	ret
15880                 | 
15880                 | ' 
15880                 | '     
15880                 | ' pub stop(channel) 'silence it
15880                 | _Audio093b_8_sc_spin2_stop
15880                 | ' 
15880                 | ' word[@channel1[0]+32*channel+20]:=0
15880     0C E4 05 F1 | 	add	objptr, #12
15884     F2 00 02 F6 | 	mov	_var01, objptr
15888     05 12 66 F0 | 	shl	arg01, #5
1588c     09 01 02 F1 | 	add	_var01, arg01
15890     14 00 06 F1 | 	add	_var01, #20
15894     00 01 58 FC | 	wrword	#0, _var01
15898     0C E4 85 F1 | 	sub	objptr, #12
1589c                 | _Audio093b_8_sc_spin2_stop_ret
1589c     2D 00 64 FD | 	ret
158a0                 | hubexit
158a0     81 00 80 FD | 	jmp	#cogexit
158a4                 | 
158a4                 | __system___setbaud
158a4     14 5E 06 FB | 	rdlong	muldiva_, #20
158a8     09 61 02 F6 | 	mov	muldivb_, arg01
158ac     BA 00 A0 FD | 	call	#divide_
158b0     97 06 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
158b4                 | LR__1890
158b4     3E FA 9D FA | 	rdpin	result1, #62 wc
158b8     FE FC A1 F1 | 	subx	result2, result2
158bc     F4 FF 9F CD |  if_b	jmp	#LR__1890
158c0                 | LR__1891
158c0     40 7C 64 FD | 	dirl	#62
158c4     40 7E 64 FD | 	dirl	#63
158c8     F4 60 62 FC | 	wrlong	muldivb_, ptr___system__dat__
158cc     10 60 66 F0 | 	shl	muldivb_, #16
158d0     07 14 06 F6 | 	mov	arg02, #7
158d4     30 15 02 F1 | 	add	arg02, muldivb_
158d8     3E F8 0C FC | 	wrpin	#124, #62
158dc     3E 14 16 FC | 	wxpin	arg02, #62
158e0     3F 7C 0C FC | 	wrpin	#62, #63
158e4     14 14 06 F1 | 	add	arg02, #20
158e8     3F 14 16 FC | 	wxpin	arg02, #63
158ec     41 7C 64 FD | 	dirh	#62
158f0     41 7E 64 FD | 	dirh	#63
158f4                 | __system___setbaud_ret
158f4     2D 00 64 FD | 	ret
158f8                 | 
158f8                 | __system___txraw
158f8     01 4A 05 F6 | 	mov	COUNT_, #1
158fc     A8 00 A0 FD | 	call	#pushregs_
15900     09 1F 02 F6 | 	mov	local01, arg01
15904     97 06 48 FB | 	callpa	#(@LR__1901-@LR__1900)>>2,fcache_load_ptr_
15908                 | LR__1900
15908     3E FA 9D FA | 	rdpin	result1, #62 wc
1590c     FE FC A1 F1 | 	subx	result2, result2
15910     F4 FF 9F CD |  if_b	jmp	#LR__1900
15914                 | LR__1901
15914     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15918     C2 01 00 AF 
1591c     00 12 06 A6 |  if_e	mov	arg01, ##230400
15920     80 FF BF AD |  if_e	call	#__system___setbaud
15924     3E 1E 26 FC | 	wypin	local01, #62
15928     01 FA 05 F6 | 	mov	result1, #1
1592c     A7 F0 03 F6 | 	mov	ptra, fp
15930     B2 00 A0 FD | 	call	#popregs_
15934                 | __system___txraw_ret
15934     2D 00 64 FD | 	ret
15938                 | 
15938                 | __system___rxraw
15938     0D 4A 05 F6 | 	mov	COUNT_, #13
1593c     A8 00 A0 FD | 	call	#pushregs_
15940     09 1F 02 F6 | 	mov	local01, arg01
15944     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
15948     C2 01 00 AF 
1594c     00 12 06 A6 |  if_e	mov	arg01, ##230400
15950     50 FF BF AD |  if_e	call	#__system___setbaud
15954     00 1E 0E F2 | 	cmp	local01, #0 wz
15958     20 00 90 AD |  if_e	jmp	#LR__1910
1595c     14 22 06 FB | 	rdlong	local03, #20
15960     0A 22 46 F0 | 	shr	local03, #10
15964     11 1F 02 FD | 	qmul	local01, local03
15968     1A FA 61 FD | 	getct	result1
1596c     18 24 62 FD | 	getqx	local04
15970     12 FB 01 F1 | 	add	result1, local04
15974     FD 26 02 F6 | 	mov	local05, result1
15978     04 00 90 FD | 	jmp	#LR__1911
1597c                 | LR__1910
1597c     00 26 06 F6 | 	mov	local05, #0
15980                 | LR__1911
15980     01 28 66 F6 | 	neg	local06, #1
15984     3F 2A 06 F6 | 	mov	local07, #63
15988     00 2C 06 F6 | 	mov	local08, #0
1598c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
15990     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
15994     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
15998                 | LR__1912
15998     08 2E 16 F4 | 	testb	local09, #8 wc
1599c     09 2E 76 F4 | 	testbn	local09, #9 andc
159a0     0A 2E 46 F0 | 	shr	local09, #10
159a4     01 2C 06 C6 |  if_b	mov	local08, #1
159a8     40 7E 6C 3D |  if_ae	testp	#63 wz
159ac     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
159b0     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
159b4     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
159b8                 | LR__1913
159b8     00 20 06 F6 | 	mov	local02, #0
159bc     00 2C 0E F2 | 	cmp	local08, #0 wz
159c0     01 20 66 56 |  if_ne	neg	local02, #1
159c4     00 30 06 F6 | 	mov	local10, #0
159c8     00 22 06 F6 | 	mov	local03, #0
159cc     00 1E 0E F2 | 	cmp	local01, #0 wz
159d0     01 22 66 56 |  if_ne	neg	local03, #1
159d4     00 24 06 F6 | 	mov	local04, #0
159d8     00 32 06 F6 | 	mov	local11, #0
159dc     1A FA 61 FD | 	getct	result1
159e0     FD 34 02 F6 | 	mov	local12, result1
159e4     1A 37 02 F6 | 	mov	local13, local12
159e8     13 37 82 F1 | 	sub	local13, local05
159ec     00 36 56 F2 | 	cmps	local13, #0 wc
159f0     00 32 26 C6 |  if_b	not	local11, #0
159f4     00 32 0E F2 | 	cmp	local11, #0 wz
159f8     00 24 26 56 |  if_ne	not	local04, #0
159fc     12 23 CA F7 | 	test	local03, local04 wz
15a00     00 30 26 56 |  if_ne	not	local10, #0
15a04     18 21 4A F5 | 	or	local02, local10 wz
15a08     8C FF 9F AD |  if_e	jmp	#LR__1912
15a0c     00 2C 0E F2 | 	cmp	local08, #0 wz
15a10     17 29 02 56 |  if_ne	mov	local06, local09
15a14     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
15a18     04 E8 05 F1 | 	add	ptr___system__dat__, #4
15a1c     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
15a20     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
15a24     14 FB 01 F6 | 	mov	result1, local06
15a28     A7 F0 03 F6 | 	mov	ptra, fp
15a2c     B2 00 A0 FD | 	call	#popregs_
15a30                 | __system___rxraw_ret
15a30     2D 00 64 FD | 	ret
15a34                 | 
15a34                 | __system___getus
15a34     1A FC 71 FD | 	getct	result2 wc
15a38     1A 00 62 FD | 	getct	_var01
15a3c     10 E8 05 F1 | 	add	ptr___system__dat__, #16
15a40     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
15a44     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15a48     20 00 90 5D |  if_ne	jmp	#LR__1920
15a4c     14 02 06 FB | 	rdlong	_var02, #20
15a50     A1 07 00 FF 
15a54     40 02 16 FD | 	qdiv	_var02, ##1000000
15a58     10 E8 05 F1 | 	add	ptr___system__dat__, #16
15a5c     18 FA 61 FD | 	getqx	result1
15a60     FD 02 02 F6 | 	mov	_var02, result1
15a64     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
15a68     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15a6c                 | LR__1920
15a6c     01 FD 11 FD | 	qdiv	result2, _var02
15a70     19 FC 61 FD | 	getqy	result2
15a74     28 FC 61 FD | 	setq	result2
15a78     01 01 12 FD | 	qdiv	_var01, _var02
15a7c     18 FA 61 FD | 	getqx	result1
15a80                 | __system___getus_ret
15a80     2D 00 64 FD | 	ret
15a84                 | 
15a84                 | __system____builtin_memmove
15a84     09 01 02 F6 | 	mov	_var01, arg01
15a88     0A 13 52 F2 | 	cmps	arg01, arg02 wc
15a8c     10 00 90 CD |  if_b	jmp	#LR__1930
15a90     0A 03 02 F6 | 	mov	_var02, arg02
15a94     0B 03 02 F1 | 	add	_var02, arg03
15a98     01 13 52 F2 | 	cmps	arg01, _var02 wc
15a9c     48 00 90 CD |  if_b	jmp	#LR__1936
15aa0                 | LR__1930
15aa0     0B 05 02 F6 | 	mov	_var03, arg03
15aa4     02 04 4E F0 | 	shr	_var03, #2 wz
15aa8     18 00 90 AD |  if_e	jmp	#LR__1935
15aac     97 0A 48 FB | 	callpa	#(@LR__1933-@LR__1931)>>2,fcache_load_ptr_
15ab0                 | LR__1931
15ab0     02 09 D8 FC | 	rep	@LR__1934, _var03
15ab4                 | LR__1932
15ab4     0A 05 02 FB | 	rdlong	_var03, arg02
15ab8     09 05 62 FC | 	wrlong	_var03, arg01
15abc     04 12 06 F1 | 	add	arg01, #4
15ac0     04 14 06 F1 | 	add	arg02, #4
15ac4                 | LR__1933
15ac4                 | LR__1934
15ac4                 | LR__1935
15ac4     02 16 CE F7 | 	test	arg03, #2 wz
15ac8     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
15acc     09 03 52 5C |  if_ne	wrword	_var02, arg01
15ad0     02 12 06 51 |  if_ne	add	arg01, #2
15ad4     02 14 06 51 |  if_ne	add	arg02, #2
15ad8     01 16 CE F7 | 	test	arg03, #1 wz
15adc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
15ae0     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
15ae4     28 00 90 FD | 	jmp	#LR__1942
15ae8                 | LR__1936
15ae8     0B 13 02 F1 | 	add	arg01, arg03
15aec     0B 15 02 F1 | 	add	arg02, arg03
15af0     0B 07 0A F6 | 	mov	_var04, arg03 wz
15af4     18 00 90 AD |  if_e	jmp	#LR__1941
15af8     97 0A 48 FB | 	callpa	#(@LR__1939-@LR__1937)>>2,fcache_load_ptr_
15afc                 | LR__1937
15afc     03 09 D8 FC | 	rep	@LR__1940, _var04
15b00                 | LR__1938
15b00     01 12 86 F1 | 	sub	arg01, #1
15b04     01 14 86 F1 | 	sub	arg02, #1
15b08     0A 03 C2 FA | 	rdbyte	_var02, arg02
15b0c     09 03 42 FC | 	wrbyte	_var02, arg01
15b10                 | LR__1939
15b10                 | LR__1940
15b10                 | LR__1941
15b10                 | LR__1942
15b10     00 FB 01 F6 | 	mov	result1, _var01
15b14                 | __system____builtin_memmove_ret
15b14     2D 00 64 FD | 	ret
15b18                 | 
15b18                 | __system____builtin_strcpy
15b18     09 01 02 F6 | 	mov	_var01, arg01
15b1c     97 0A 48 FB | 	callpa	#(@LR__1951-@LR__1950)>>2,fcache_load_ptr_
15b20                 | LR__1950
15b20     0A FB C9 FA | 	rdbyte	result1, arg02 wz
15b24     09 FB 41 FC | 	wrbyte	result1, arg01
15b28     01 14 06 F1 | 	add	arg02, #1
15b2c     01 12 06 F1 | 	add	arg01, #1
15b30     EC FF 9F 5D |  if_ne	jmp	#LR__1950
15b34                 | LR__1951
15b34     00 FB 01 F6 | 	mov	result1, _var01
15b38                 | __system____builtin_strcpy_ret
15b38     2D 00 64 FD | 	ret
15b3c                 | 
15b3c                 | __system____topofstack
15b3c     00 4A 05 F6 | 	mov	COUNT_, #0
15b40     A8 00 A0 FD | 	call	#pushregs_
15b44     08 F0 07 F1 | 	add	ptra, #8
15b48     04 4E 05 F1 | 	add	fp, #4
15b4c     A7 12 62 FC | 	wrlong	arg01, fp
15b50     A7 FA 01 F6 | 	mov	result1, fp
15b54     04 4E 85 F1 | 	sub	fp, #4
15b58     A7 F0 03 F6 | 	mov	ptra, fp
15b5c     B2 00 A0 FD | 	call	#popregs_
15b60                 | __system____topofstack_ret
15b60     2D 00 64 FD | 	ret
15b64                 | 
15b64                 | __system___lockmem
15b64     00 FA 05 F6 | 	mov	result1, #0
15b68     01 FA 61 FD | 	cogid	result1
15b6c     00 FB 05 F1 | 	add	result1, #256
15b70                 | LR__1960
15b70     09 01 0A FB | 	rdlong	_var01, arg01 wz
15b74     09 FB 61 AC |  if_e	wrlong	result1, arg01
15b78     09 01 02 AB |  if_e	rdlong	_var01, arg01
15b7c     09 01 02 AB |  if_e	rdlong	_var01, arg01
15b80     FD 00 0A F2 | 	cmp	_var01, result1 wz
15b84     E8 FF 9F 5D |  if_ne	jmp	#LR__1960
15b88                 | __system___lockmem_ret
15b88     2D 00 64 FD | 	ret
15b8c                 | 
15b8c                 | __system___string_cmp
15b8c     97 14 48 FB | 	callpa	#(@LR__1971-@LR__1970)>>2,fcache_load_ptr_
15b90                 | LR__1970
15b90     09 01 C2 FA | 	rdbyte	_var01, arg01
15b94     0A 03 C2 FA | 	rdbyte	_var02, arg02
15b98     00 05 02 F6 | 	mov	_var03, _var01
15b9c     01 05 8A F1 | 	sub	_var03, _var02 wz
15ba0     01 12 06 F1 | 	add	arg01, #1
15ba4     01 14 06 F1 | 	add	arg02, #1
15ba8     0C 00 90 5D |  if_ne	jmp	#LR__1972
15bac     00 00 0E F2 | 	cmp	_var01, #0 wz
15bb0     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
15bb4     D8 FF 9F 5D |  if_ne	jmp	#LR__1970
15bb8                 | LR__1971
15bb8                 | LR__1972
15bb8     02 FB 01 F6 | 	mov	result1, _var03
15bbc                 | __system___string_cmp_ret
15bbc     2D 00 64 FD | 	ret
15bc0                 | 
15bc0                 | __system___string_concat
15bc0     05 4A 05 F6 | 	mov	COUNT_, #5
15bc4     A8 00 A0 FD | 	call	#pushregs_
15bc8     09 1F 02 F6 | 	mov	local01, arg01
15bcc     0A 21 02 F6 | 	mov	local02, arg02
15bd0     0F 13 02 F6 | 	mov	arg01, local01
15bd4     09 23 02 F6 | 	mov	local03, arg01
15bd8     97 06 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
15bdc                 | LR__1980
15bdc     11 FB C9 FA | 	rdbyte	result1, local03 wz
15be0     01 22 06 51 |  if_ne	add	local03, #1
15be4     F4 FF 9F 5D |  if_ne	jmp	#LR__1980
15be8                 | LR__1981
15be8     09 23 82 F1 | 	sub	local03, arg01
15bec     11 25 02 F6 | 	mov	local04, local03
15bf0     10 13 02 F6 | 	mov	arg01, local02
15bf4     09 23 02 F6 | 	mov	local03, arg01
15bf8     97 06 48 FB | 	callpa	#(@LR__1983-@LR__1982)>>2,fcache_load_ptr_
15bfc                 | LR__1982
15bfc     11 FB C9 FA | 	rdbyte	result1, local03 wz
15c00     01 22 06 51 |  if_ne	add	local03, #1
15c04     F4 FF 9F 5D |  if_ne	jmp	#LR__1982
15c08                 | LR__1983
15c08     09 23 82 F1 | 	sub	local03, arg01
15c0c     12 13 02 F6 | 	mov	arg01, local04
15c10     11 13 02 F1 | 	add	arg01, local03
15c14     01 12 06 F1 | 	add	arg01, #1
15c18     B0 39 B0 FD | 	call	#__system___gc_alloc_managed
15c1c     FD 26 0A F6 | 	mov	local05, result1 wz
15c20     28 00 90 AD |  if_e	jmp	#LR__1984
15c24     13 13 02 F6 | 	mov	arg01, local05
15c28     0F 15 02 F6 | 	mov	arg02, local01
15c2c     12 17 02 F6 | 	mov	arg03, local04
15c30     50 FE BF FD | 	call	#__system____builtin_memmove
15c34     13 13 02 F6 | 	mov	arg01, local05
15c38     12 13 02 F1 | 	add	arg01, local04
15c3c     01 22 06 F1 | 	add	local03, #1
15c40     10 15 02 F6 | 	mov	arg02, local02
15c44     11 17 02 F6 | 	mov	arg03, local03
15c48     38 FE BF FD | 	call	#__system____builtin_memmove
15c4c                 | LR__1984
15c4c     13 FB 01 F6 | 	mov	result1, local05
15c50     A7 F0 03 F6 | 	mov	ptra, fp
15c54     B2 00 A0 FD | 	call	#popregs_
15c58                 | __system___string_concat_ret
15c58     2D 00 64 FD | 	ret
15c5c                 | 
15c5c                 | __system___tx
15c5c     02 4A 05 F6 | 	mov	COUNT_, #2
15c60     A8 00 A0 FD | 	call	#pushregs_
15c64     09 1F 02 F6 | 	mov	local01, arg01
15c68     0A 1E 0E F2 | 	cmp	local01, #10 wz
15c6c     18 00 90 5D |  if_ne	jmp	#LR__1990
15c70     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15c74     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
15c78     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15c7c     02 20 CE F7 | 	test	local02, #2 wz
15c80     0D 12 06 56 |  if_ne	mov	arg01, #13
15c84     70 FC BF 5D |  if_ne	call	#__system___txraw
15c88                 | LR__1990
15c88     0F 13 02 F6 | 	mov	arg01, local01
15c8c     68 FC BF FD | 	call	#__system___txraw
15c90     A7 F0 03 F6 | 	mov	ptra, fp
15c94     B2 00 A0 FD | 	call	#popregs_
15c98                 | __system___tx_ret
15c98     2D 00 64 FD | 	ret
15c9c                 | 
15c9c                 | __system___rx
15c9c     01 4A 05 F6 | 	mov	COUNT_, #1
15ca0     A8 00 A0 FD | 	call	#pushregs_
15ca4                 | LR__2000
15ca4     00 12 06 F6 | 	mov	arg01, #0
15ca8     8C FC BF FD | 	call	#__system___rxraw
15cac     FD 1E 02 F6 | 	mov	local01, result1
15cb0     FF FF 7F FF 
15cb4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
15cb8     E8 FF 9F AD |  if_e	jmp	#LR__2000
15cbc     0D 1E 0E F2 | 	cmp	local01, #13 wz
15cc0     14 00 90 5D |  if_ne	jmp	#LR__2001
15cc4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15cc8     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
15ccc     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15cd0     02 FA CD F7 | 	test	result1, #2 wz
15cd4     0A 1E 06 56 |  if_ne	mov	local01, #10
15cd8                 | LR__2001
15cd8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15cdc     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
15ce0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15ce4     01 12 CE F7 | 	test	arg01, #1 wz
15ce8     1C 00 90 AD |  if_e	jmp	#LR__2004
15cec     7F 1E 0E F2 | 	cmp	local01, #127 wz
15cf0     0C 00 90 5D |  if_ne	jmp	#LR__2002
15cf4     08 12 06 F6 | 	mov	arg01, #8
15cf8     60 FF BF FD | 	call	#__system___tx
15cfc     08 00 90 FD | 	jmp	#LR__2003
15d00                 | LR__2002
15d00     0F 13 02 F6 | 	mov	arg01, local01
15d04     54 FF BF FD | 	call	#__system___tx
15d08                 | LR__2003
15d08                 | LR__2004
15d08     0F FB 01 F6 | 	mov	result1, local01
15d0c     A7 F0 03 F6 | 	mov	ptra, fp
15d10     B2 00 A0 FD | 	call	#popregs_
15d14                 | __system___rx_ret
15d14     2D 00 64 FD | 	ret
15d18                 | 
15d18                 | __system___pinwrite
15d18     09 01 02 F6 | 	mov	_var01, arg01
15d1c     1F 00 06 F5 | 	and	_var01, #31
15d20     20 12 CE F7 | 	test	arg01, #32 wz
15d24     06 12 46 F0 | 	shr	arg01, #6
15d28     09 13 CA F9 | 	bmask	arg01, arg01
15d2c     00 13 62 F0 | 	shl	arg01, _var01
15d30     00 15 62 F0 | 	shl	arg02, _var01
15d34     1C 00 90 AD |  if_e	jmp	#LR__2010
15d38     09 F7 43 F5 | 	or	dirb, arg01
15d3c     FD 01 02 F6 | 	mov	_var01, outb
15d40     09 01 22 F5 | 	andn	_var01, arg01
15d44     09 15 02 F5 | 	and	arg02, arg01
15d48     0A 01 42 F5 | 	or	_var01, arg02
15d4c     00 FB 03 F6 | 	mov	outb, _var01
15d50     18 00 90 FD | 	jmp	#LR__2011
15d54                 | LR__2010
15d54     09 F5 43 F5 | 	or	dira, arg01
15d58     FC 01 02 F6 | 	mov	_var01, outa
15d5c     09 01 22 F5 | 	andn	_var01, arg01
15d60     09 15 02 F5 | 	and	arg02, arg01
15d64     0A 01 42 F5 | 	or	_var01, arg02
15d68     00 F9 03 F6 | 	mov	outa, _var01
15d6c                 | LR__2011
15d6c                 | __system___pinwrite_ret
15d6c     2D 00 64 FD | 	ret
15d70                 | 
15d70                 | __system___basic_read_line
15d70     06 4A 05 F6 | 	mov	COUNT_, #6
15d74     A8 00 A0 FD | 	call	#pushregs_
15d78     09 1F 02 F6 | 	mov	local01, arg01
15d7c     00 20 06 F6 | 	mov	local02, #0
15d80     18 22 06 F6 | 	mov	local03, #24
15d84     00 24 06 F6 | 	mov	local04, #0
15d88     18 12 06 F6 | 	mov	arg01, #24
15d8c     3C 38 B0 FD | 	call	#__system___gc_alloc_managed
15d90     FD 26 0A F6 | 	mov	local05, result1 wz
15d94     13 FB 01 A6 |  if_e	mov	result1, local05
15d98     B0 00 90 AD |  if_e	jmp	#LR__2023
15d9c                 | LR__2020
15d9c     0F 13 02 F6 | 	mov	arg01, local01
15da0     78 0B B0 FD | 	call	#__system___basic_get_char
15da4     FD 28 02 F6 | 	mov	local06, result1
15da8     01 28 56 F2 | 	cmps	local06, #1 wc
15dac     8C 00 90 CD |  if_b	jmp	#LR__2022
15db0     0A 28 0E F2 | 	cmp	local06, #10 wz
15db4     10 00 90 5D |  if_ne	jmp	#LR__2021
15db8     00 24 0E F2 | 	cmp	local04, #0 wz
15dbc     01 20 56 52 |  if_ne	cmps	local02, #1 wc
15dc0     01 20 86 11 |  if_a	sub	local02, #1
15dc4     74 00 90 FD | 	jmp	#LR__2022
15dc8                 | LR__2021
15dc8     0D 28 0E F2 | 	cmp	local06, #13 wz
15dcc     01 24 06 A6 |  if_e	mov	local04, #1
15dd0     00 24 06 56 |  if_ne	mov	local04, #0
15dd4     08 28 0E F2 | 	cmp	local06, #8 wz
15dd8     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
15ddc     01 20 56 A2 |  if_e	cmps	local02, #1 wc
15de0     01 20 86 21 |  if_nc_and_z	sub	local02, #1
15de4     B4 FF 9F AD |  if_e	jmp	#LR__2020
15de8     13 17 02 F6 | 	mov	arg03, local05
15dec     10 17 02 F1 | 	add	arg03, local02
15df0     0B 29 42 FC | 	wrbyte	local06, arg03
15df4     01 20 06 F1 | 	add	local02, #1
15df8     11 21 0A F2 | 	cmp	local02, local03 wz
15dfc     9C FF 9F 5D |  if_ne	jmp	#LR__2020
15e00     11 13 02 F6 | 	mov	arg01, local03
15e04     20 12 06 F1 | 	add	arg01, #32
15e08     C0 37 B0 FD | 	call	#__system___gc_alloc_managed
15e0c     FD 28 0A F6 | 	mov	local06, result1 wz
15e10     14 FB 01 A6 |  if_e	mov	result1, local06
15e14     34 00 90 AD |  if_e	jmp	#LR__2023
15e18     14 13 02 F6 | 	mov	arg01, local06
15e1c     13 15 02 F6 | 	mov	arg02, local05
15e20     11 17 02 F6 | 	mov	arg03, local03
15e24     5C FC BF FD | 	call	#__system____builtin_memmove
15e28     20 22 06 F1 | 	add	local03, #32
15e2c     13 13 02 F6 | 	mov	arg01, local05
15e30     D4 38 B0 FD | 	call	#__system___gc_free
15e34     14 27 02 F6 | 	mov	local05, local06
15e38     60 FF 9F FD | 	jmp	#LR__2020
15e3c                 | LR__2022
15e3c     13 29 02 F6 | 	mov	local06, local05
15e40     10 29 02 F1 | 	add	local06, local02
15e44     14 01 48 FC | 	wrbyte	#0, local06
15e48     13 FB 01 F6 | 	mov	result1, local05
15e4c                 | LR__2023
15e4c     A7 F0 03 F6 | 	mov	ptra, fp
15e50     B2 00 A0 FD | 	call	#popregs_
15e54                 | __system___basic_read_line_ret
15e54     2D 00 64 FD | 	ret
15e58                 | 
15e58                 | __system___waitms
15e58     09 01 02 F6 | 	mov	_var01, arg01
15e5c     1A 02 62 FD | 	getct	_var02
15e60     14 04 06 FB | 	rdlong	_var03, #20
15e64     97 14 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
15e68                 | LR__2030
15e68     01 00 00 FF 
15e6c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
15e70     1C 00 90 CD |  if_b	jmp	#LR__2032
15e74     02 03 02 F1 | 	add	_var02, _var03
15e78     01 13 02 F6 | 	mov	arg01, _var02
15e7c     00 12 66 FA | 	addct1	arg01, #0
15e80     24 22 60 FD | 	waitct1
15e84     01 00 00 FF 
15e88     E8 01 86 F1 | 	sub	_var01, ##1000
15e8c     D8 FF 9F FD | 	jmp	#LR__2030
15e90                 | LR__2031
15e90                 | LR__2032
15e90     01 00 56 F2 | 	cmps	_var01, #1 wc
15e94     28 00 90 CD |  if_b	jmp	#LR__2033
15e98     02 01 02 FD | 	qmul	_var01, _var03
15e9c     01 00 00 FF 
15ea0     E8 17 06 F6 | 	mov	arg03, ##1000
15ea4     19 FA 61 FD | 	getqy	result1
15ea8     18 12 62 FD | 	getqx	arg01
15eac     28 FA 61 FD | 	setq	result1
15eb0     0B 13 12 FD | 	qdiv	arg01, arg03
15eb4     18 12 62 FD | 	getqx	arg01
15eb8     01 13 62 FA | 	addct1	arg01, _var02
15ebc     24 22 60 FD | 	waitct1
15ec0                 | LR__2033
15ec0                 | __system___waitms_ret
15ec0     2D 00 64 FD | 	ret
15ec4                 | 
15ec4                 | __system___waitus
15ec4     09 01 02 F6 | 	mov	_var01, arg01
15ec8     1A 02 62 FD | 	getct	_var02
15ecc     14 04 06 FB | 	rdlong	_var03, #20
15ed0     97 14 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
15ed4                 | LR__2040
15ed4     A1 07 00 FF 
15ed8     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
15edc     1C 00 90 CD |  if_b	jmp	#LR__2042
15ee0     02 03 02 F1 | 	add	_var02, _var03
15ee4     01 13 02 F6 | 	mov	arg01, _var02
15ee8     00 12 66 FA | 	addct1	arg01, #0
15eec     24 22 60 FD | 	waitct1
15ef0     A1 07 00 FF 
15ef4     40 00 86 F1 | 	sub	_var01, ##1000000
15ef8     D8 FF 9F FD | 	jmp	#LR__2040
15efc                 | LR__2041
15efc                 | LR__2042
15efc     01 00 56 F2 | 	cmps	_var01, #1 wc
15f00     28 00 90 CD |  if_b	jmp	#LR__2043
15f04     02 01 02 FD | 	qmul	_var01, _var03
15f08     A1 07 00 FF 
15f0c     40 16 06 F6 | 	mov	arg03, ##1000000
15f10     19 FA 61 FD | 	getqy	result1
15f14     18 12 62 FD | 	getqx	arg01
15f18     28 FA 61 FD | 	setq	result1
15f1c     0B 13 12 FD | 	qdiv	arg01, arg03
15f20     18 FA 61 FD | 	getqx	result1
15f24     FD 02 62 FA | 	addct1	_var02, result1
15f28     24 22 60 FD | 	waitct1
15f2c                 | LR__2043
15f2c                 | __system___waitus_ret
15f2c     2D 00 64 FD | 	ret
15f30                 | 
15f30                 | __system___mount
15f30     0B 4A 05 F6 | 	mov	COUNT_, #11
15f34     A8 00 A0 FD | 	call	#pushregs_
15f38     09 1F 02 F6 | 	mov	local01, arg01
15f3c     0A 21 0A F6 | 	mov	local02, arg02 wz
15f40     01 22 66 F6 | 	neg	local03, #1
15f44     01 FA 65 A6 |  if_e	neg	result1, #1
15f48     98 02 90 AD |  if_e	jmp	#LR__2065
15f4c     0F FB C1 FA | 	rdbyte	result1, local01
15f50     2F FA 0D F2 | 	cmp	result1, #47 wz
15f54     28 00 90 5D |  if_ne	jmp	#LR__2052
15f58     0F 13 02 F6 | 	mov	arg01, local01
15f5c     09 25 02 F6 | 	mov	local04, arg01
15f60     97 06 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
15f64                 | LR__2050
15f64     12 FB C9 FA | 	rdbyte	result1, local04 wz
15f68     01 24 06 51 |  if_ne	add	local04, #1
15f6c     F4 FF 9F 5D |  if_ne	jmp	#LR__2050
15f70                 | LR__2051
15f70     09 25 82 F1 | 	sub	local04, arg01
15f74     12 FB 01 F6 | 	mov	result1, local04
15f78     10 FA 55 F2 | 	cmps	result1, #16 wc
15f7c     14 00 90 CD |  if_b	jmp	#LR__2053
15f80                 | LR__2052
15f80     20 E8 05 F1 | 	add	ptr___system__dat__, #32
15f84     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
15f88     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15f8c     01 FA 65 F6 | 	neg	result1, #1
15f90     50 02 90 FD | 	jmp	#LR__2065
15f94                 | LR__2053
15f94     00 26 06 F6 | 	mov	local05, #0
15f98                 | LR__2054
15f98     04 26 56 F2 | 	cmps	local05, #4 wc
15f9c     B0 00 90 3D |  if_ae	jmp	#LR__2059
15fa0     13 13 02 F6 | 	mov	arg01, local05
15fa4     02 12 66 F0 | 	shl	arg01, #2
15fa8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15fac     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15fb0     09 FB 09 FB | 	rdlong	result1, arg01 wz
15fb4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15fb8     00 22 56 A2 |  if_e	cmps	local03, #0 wc
15fbc     13 23 02 86 |  if_c_and_z	mov	local03, local05
15fc0     84 00 90 8D |  if_c_and_z	jmp	#LR__2058
15fc4     13 13 02 F6 | 	mov	arg01, local05
15fc8     02 12 66 F0 | 	shl	arg01, #2
15fcc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15fd0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15fd4     09 13 02 FB | 	rdlong	arg01, arg01
15fd8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15fdc     09 25 02 F6 | 	mov	local04, arg01
15fe0     97 06 48 FB | 	callpa	#(@LR__2056-@LR__2055)>>2,fcache_load_ptr_
15fe4                 | LR__2055
15fe4     12 FB C9 FA | 	rdbyte	result1, local04 wz
15fe8     01 24 06 51 |  if_ne	add	local04, #1
15fec     F4 FF 9F 5D |  if_ne	jmp	#LR__2055
15ff0                 | LR__2056
15ff0     09 25 82 F1 | 	sub	local04, arg01
15ff4     12 29 02 F6 | 	mov	local06, local04
15ff8     14 13 02 F6 | 	mov	arg01, local06
15ffc     0F 13 02 F1 | 	add	arg01, local01
16000     09 FB C1 FA | 	rdbyte	result1, arg01
16004     2F FA 0D F2 | 	cmp	result1, #47 wz
16008     14 2B 02 56 |  if_ne	mov	local07, local06
1600c     0F 2B 02 51 |  if_ne	add	local07, local01
16010     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
16014     30 00 90 5D |  if_ne	jmp	#LR__2057
16018     13 17 02 F6 | 	mov	arg03, local05
1601c     02 16 66 F0 | 	shl	arg03, #2
16020     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16024     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
16028     0B 15 02 FB | 	rdlong	arg02, arg03
1602c     0F 13 02 F6 | 	mov	arg01, local01
16030     14 17 02 F6 | 	mov	arg03, local06
16034     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16038     D4 49 B0 FD | 	call	#__system__strncmp
1603c     00 FA 0D F2 | 	cmp	result1, #0 wz
16040     13 23 02 A6 |  if_e	mov	local03, local05
16044     08 00 90 AD |  if_e	jmp	#LR__2059
16048                 | LR__2057
16048                 | LR__2058
16048     01 26 06 F1 | 	add	local05, #1
1604c     48 FF 9F FD | 	jmp	#LR__2054
16050                 | LR__2059
16050     FF FF 7F FF 
16054     FF 23 0E F2 | 	cmp	local03, ##-1 wz
16058     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1605c     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
16060     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
16064     01 FA 65 A6 |  if_e	neg	result1, #1
16068     78 01 90 AD |  if_e	jmp	#LR__2065
1606c     11 27 02 F6 | 	mov	local05, local03
16070     13 2B 02 F6 | 	mov	local07, local05
16074     02 2A 66 F0 | 	shl	local07, #2
16078     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1607c     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
16080     15 29 0A FB | 	rdlong	local06, local07 wz
16084     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
16088     58 00 90 AD |  if_e	jmp	#LR__2060
1608c     4C 28 06 F1 | 	add	local06, #76
16090     14 2B 0A FB | 	rdlong	local07, local06 wz
16094     4C 28 86 F1 | 	sub	local06, #76
16098     48 00 90 AD |  if_e	jmp	#LR__2060
1609c     4C 28 06 F1 | 	add	local06, #76
160a0     14 2B 02 FB | 	rdlong	local07, local06
160a4     15 23 02 F6 | 	mov	local03, local07
160a8     13 2A 46 F7 | 	zerox	local07, #19
160ac     14 22 46 F0 | 	shr	local03, #20
160b0     02 22 66 F0 | 	shl	local03, #2
160b4     ED 22 02 F1 | 	add	local03, __methods__
160b8     11 23 02 FB | 	rdlong	local03, local03
160bc     13 29 02 F6 | 	mov	local06, local05
160c0     02 28 66 F0 | 	shl	local06, #2
160c4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
160c8     F4 28 02 F1 | 	add	local06, ptr___system__dat__
160cc     14 13 02 FB | 	rdlong	arg01, local06
160d0     F2 28 02 F6 | 	mov	local06, objptr
160d4     15 E5 01 F6 | 	mov	objptr, local07
160d8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
160dc     2D 22 62 FD | 	call	local03
160e0     14 E5 01 F6 | 	mov	objptr, local06
160e4                 | LR__2060
160e4     13 2D 02 F6 | 	mov	local08, local05
160e8     02 2C 66 F0 | 	shl	local08, #2
160ec     74 E8 05 F1 | 	add	ptr___system__dat__, #116
160f0     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
160f4     16 21 62 FC | 	wrlong	local02, local08
160f8     00 20 0E F2 | 	cmp	local02, #0 wz
160fc     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
16100     18 00 90 5D |  if_ne	jmp	#LR__2061
16104     02 26 66 F0 | 	shl	local05, #2
16108     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1610c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
16110     13 01 68 FC | 	wrlong	#0, local05
16114     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16118     C4 00 90 FD | 	jmp	#LR__2064
1611c                 | LR__2061
1611c     13 2F 02 F6 | 	mov	local09, local05
16120     04 2E 66 F0 | 	shl	local09, #4
16124     24 E8 05 F1 | 	add	ptr___system__dat__, #36
16128     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
1612c     17 13 02 F6 | 	mov	arg01, local09
16130     0F 15 02 F6 | 	mov	arg02, local01
16134     10 16 06 F6 | 	mov	arg03, #16
16138     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
1613c     24 48 B0 FD | 	call	#__system__strncpy
16140     48 20 06 F1 | 	add	local02, #72
16144     10 2D 0A FB | 	rdlong	local08, local02 wz
16148     48 20 86 F1 | 	sub	local02, #72
1614c     7C 00 90 AD |  if_e	jmp	#LR__2063
16150     48 20 06 F1 | 	add	local02, #72
16154     10 2D 02 FB | 	rdlong	local08, local02
16158     16 31 02 F6 | 	mov	local10, local08
1615c     13 2C 46 F7 | 	zerox	local08, #19
16160     14 30 46 F0 | 	shr	local10, #20
16164     02 30 66 F0 | 	shl	local10, #2
16168     ED 30 02 F1 | 	add	local10, __methods__
1616c     18 31 02 FB | 	rdlong	local10, local10
16170     17 13 02 F6 | 	mov	arg01, local09
16174     F2 32 02 F6 | 	mov	local11, objptr
16178     16 E5 01 F6 | 	mov	objptr, local08
1617c     2D 30 62 FD | 	call	local10
16180     19 E5 01 F6 | 	mov	objptr, local11
16184     FD 12 0A F6 | 	mov	arg01, result1 wz
16188     40 00 90 AD |  if_e	jmp	#LR__2062
1618c     13 2D 02 F6 | 	mov	local08, local05
16190     02 2C 66 F0 | 	shl	local08, #2
16194     74 E8 05 F1 | 	add	ptr___system__dat__, #116
16198     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
1619c     16 01 68 FC | 	wrlong	#0, local08
161a0     02 26 66 F0 | 	shl	local05, #2
161a4     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
161a8     F4 26 02 F1 | 	add	local05, ptr___system__dat__
161ac     13 01 68 FC | 	wrlong	#0, local05
161b0     09 13 6A F6 | 	neg	arg01, arg01 wz
161b4     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
161b8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
161bc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
161c0     01 FA 65 56 |  if_ne	neg	result1, #1
161c4     00 FA 05 A6 |  if_e	mov	result1, #0
161c8     18 00 90 FD | 	jmp	#LR__2065
161cc                 | LR__2062
161cc                 | LR__2063
161cc     02 26 66 F0 | 	shl	local05, #2
161d0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
161d4     F4 26 02 F1 | 	add	local05, ptr___system__dat__
161d8     13 2F 62 FC | 	wrlong	local09, local05
161dc     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
161e0                 | LR__2064
161e0     00 FA 05 F6 | 	mov	result1, #0
161e4                 | LR__2065
161e4     A7 F0 03 F6 | 	mov	ptra, fp
161e8     B2 00 A0 FD | 	call	#popregs_
161ec                 | __system___mount_ret
161ec     2D 00 64 FD | 	ret
161f0                 | 
161f0                 | __system___chdir
161f0     00 4A 05 F6 | 	mov	COUNT_, #0
161f4     A8 00 A0 FD | 	call	#pushregs_
161f8     40 F0 07 F1 | 	add	ptra, #64
161fc     04 4E 05 F1 | 	add	fp, #4
16200     A7 12 62 FC | 	wrlong	arg01, fp
16204     04 4E 05 F1 | 	add	fp, #4
16208     A7 14 02 F6 | 	mov	arg02, fp
1620c     08 4E 85 F1 | 	sub	fp, #8
16210     30 44 B0 FD | 	call	#__system__stat
16214     3C 4E 05 F1 | 	add	fp, #60
16218     A7 FA 61 FC | 	wrlong	result1, fp
1621c     3C 4E 85 F1 | 	sub	fp, #60
16220     00 FA 0D F2 | 	cmp	result1, #0 wz
16224     3C 4E 05 51 |  if_ne	add	fp, #60
16228     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1622c     3C 4E 85 51 |  if_ne	sub	fp, #60
16230     BC 00 90 5D |  if_ne	jmp	#LR__2072
16234     10 4E 05 F1 | 	add	fp, #16
16238     A7 12 02 FB | 	rdlong	arg01, fp
1623c     10 4E 85 F1 | 	sub	fp, #16
16240     78 00 00 FF 
16244     00 12 06 F5 | 	and	arg01, ##61440
16248     08 00 00 FF 
1624c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
16250     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
16254     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
16258     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
1625c     01 FA 65 56 |  if_ne	neg	result1, #1
16260     8C 00 90 5D |  if_ne	jmp	#LR__2072
16264     04 4E 05 F1 | 	add	fp, #4
16268     A7 16 02 FB | 	rdlong	arg03, fp
1626c     04 4E 85 F1 | 	sub	fp, #4
16270     0B 17 C2 FA | 	rdbyte	arg03, arg03
16274     2F 16 0E F2 | 	cmp	arg03, #47 wz
16278     24 00 90 5D |  if_ne	jmp	#LR__2070
1627c     84 E8 05 F1 | 	add	ptr___system__dat__, #132
16280     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
16284     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
16288     04 4E 05 F1 | 	add	fp, #4
1628c     A7 14 02 FB | 	rdlong	arg02, fp
16290     04 4E 85 F1 | 	sub	fp, #4
16294     00 17 06 F6 | 	mov	arg03, #256
16298     C8 46 B0 FD | 	call	#__system__strncpy
1629c     4C 00 90 FD | 	jmp	#LR__2071
162a0                 | LR__2070
162a0     84 E9 05 F1 | 	add	ptr___system__dat__, #388
162a4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
162a8     38 4E 05 F1 | 	add	fp, #56
162ac     A7 12 62 FC | 	wrlong	arg01, fp
162b0     38 4E 85 F1 | 	sub	fp, #56
162b4     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
162b8     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
162bc     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
162c0     00 17 06 F6 | 	mov	arg03, #256
162c4     9C 46 B0 FD | 	call	#__system__strncpy
162c8     38 4E 05 F1 | 	add	fp, #56
162cc     A7 12 02 FB | 	rdlong	arg01, fp
162d0     34 4E 85 F1 | 	sub	fp, #52
162d4     A7 14 02 FB | 	rdlong	arg02, fp
162d8     04 4E 85 F1 | 	sub	fp, #4
162dc     84 E8 05 F1 | 	add	ptr___system__dat__, #132
162e0     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
162e4     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
162e8     10 00 B0 FD | 	call	#__system____getvfsforfile
162ec                 | LR__2071
162ec     00 FA 05 F6 | 	mov	result1, #0
162f0                 | LR__2072
162f0     A7 F0 03 F6 | 	mov	ptra, fp
162f4     B2 00 A0 FD | 	call	#popregs_
162f8                 | __system___chdir_ret
162f8     2D 00 64 FD | 	ret
162fc                 | 
162fc                 | __system____getvfsforfile
162fc     0E 4A 05 F6 | 	mov	COUNT_, #14
16300     A8 00 A0 FD | 	call	#pushregs_
16304     09 1F 02 F6 | 	mov	local01, arg01
16308     0A 21 02 F6 | 	mov	local02, arg02
1630c     0B 23 02 F6 | 	mov	local03, arg03
16310     97 10 48 FB | 	callpa	#(@LR__2081-@LR__2080)>>2,fcache_load_ptr_
16314                 | LR__2080
16314     10 FB C1 FA | 	rdbyte	result1, local02
16318     2F FA 0D F2 | 	cmp	result1, #47 wz
1631c     01 20 06 A1 |  if_e	add	local02, #1
16320     10 25 C2 AA |  if_e	rdbyte	local04, local02
16324     01 20 86 A1 |  if_e	sub	local02, #1
16328     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1632c     01 20 06 A1 |  if_e	add	local02, #1
16330     E0 FF 9F AD |  if_e	jmp	#LR__2080
16334                 | LR__2081
16334     10 25 C2 FA | 	rdbyte	local04, local02
16338     2F 24 0E F2 | 	cmp	local04, #47 wz
1633c     14 00 90 5D |  if_ne	jmp	#LR__2082
16340     0F 13 02 F6 | 	mov	arg01, local01
16344     10 15 02 F6 | 	mov	arg02, local02
16348     00 17 06 F6 | 	mov	arg03, #256
1634c     14 46 B0 FD | 	call	#__system__strncpy
16350     7C 00 90 FD | 	jmp	#LR__2084
16354                 | LR__2082
16354     84 E8 05 F1 | 	add	ptr___system__dat__, #132
16358     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
1635c     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
16360     0F 13 02 F6 | 	mov	arg01, local01
16364     00 17 06 F6 | 	mov	arg03, #256
16368     F8 45 B0 FD | 	call	#__system__strncpy
1636c     10 25 CA FA | 	rdbyte	local04, local02 wz
16370     5C 00 90 AD |  if_e	jmp	#LR__2083
16374     10 25 C2 FA | 	rdbyte	local04, local02
16378     2E 24 0E F2 | 	cmp	local04, #46 wz
1637c     01 20 06 A1 |  if_e	add	local02, #1
16380     10 27 C2 AA |  if_e	rdbyte	local05, local02
16384     01 20 86 A1 |  if_e	sub	local02, #1
16388     13 29 02 A6 |  if_e	mov	local06, local05
1638c     07 28 4E A7 |  if_e	zerox	local06, #7 wz
16390     3C 00 90 AD |  if_e	jmp	#LR__2083
16394     0F 27 C2 FA | 	rdbyte	local05, local01
16398     2F 26 0E F2 | 	cmp	local05, #47 wz
1639c     01 1E 06 A1 |  if_e	add	local01, #1
163a0     0F 25 C2 AA |  if_e	rdbyte	local04, local01
163a4     01 1E 86 A1 |  if_e	sub	local01, #1
163a8     00 24 4E A2 |  if_e	cmps	local04, #0 wz
163ac     26 01 00 5F 
163b0     30 15 06 56 |  if_ne	mov	arg02, ##@LR__4110
163b4     0F 13 02 56 |  if_ne	mov	arg01, local01
163b8     00 17 06 56 |  if_ne	mov	arg03, #256
163bc     F0 45 B0 5D |  if_ne	call	#__system__strncat
163c0     0F 13 02 F6 | 	mov	arg01, local01
163c4     10 15 02 F6 | 	mov	arg02, local02
163c8     00 17 06 F6 | 	mov	arg03, #256
163cc     E0 45 B0 FD | 	call	#__system__strncat
163d0                 | LR__2083
163d0                 | LR__2084
163d0     0F 13 02 F6 | 	mov	arg01, local01
163d4     98 47 B0 FD | 	call	#__system___normalizeName
163d8     0F 25 CA FA | 	rdbyte	local04, local01 wz
163dc     1C 00 90 AD |  if_e	jmp	#LR__2085
163e0     0F 25 C2 FA | 	rdbyte	local04, local01
163e4     2F 24 0E F2 | 	cmp	local04, #47 wz
163e8     01 1E 06 A1 |  if_e	add	local01, #1
163ec     0F 29 C2 AA |  if_e	rdbyte	local06, local01
163f0     01 1E 86 A1 |  if_e	sub	local01, #1
163f4     00 28 4E A2 |  if_e	cmps	local06, #0 wz
163f8     18 00 90 5D |  if_ne	jmp	#LR__2086
163fc                 | LR__2085
163fc     01 00 00 FF 
16400     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
16404     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
16408     01 00 00 FF 
1640c     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
16410     EC 01 90 FD | 	jmp	#LR__2100
16414                 | LR__2086
16414     00 2A 06 F6 | 	mov	local07, #0
16418                 | LR__2087
16418     04 2A 56 F2 | 	cmps	local07, #4 wc
1641c     CC 01 90 3D |  if_ae	jmp	#LR__2099
16420     15 29 02 F6 | 	mov	local06, local07
16424     02 28 66 F0 | 	shl	local06, #2
16428     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1642c     F4 28 02 F1 | 	add	local06, ptr___system__dat__
16430     14 29 0A FB | 	rdlong	local06, local06 wz
16434     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16438     A8 01 90 AD |  if_e	jmp	#LR__2098
1643c     15 25 02 F6 | 	mov	local04, local07
16440     02 24 66 F0 | 	shl	local04, #2
16444     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16448     F4 24 02 F1 | 	add	local04, ptr___system__dat__
1644c     12 13 02 FB | 	rdlong	arg01, local04
16450     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16454     09 2D 02 F6 | 	mov	local08, arg01
16458     97 06 48 FB | 	callpa	#(@LR__2089-@LR__2088)>>2,fcache_load_ptr_
1645c                 | LR__2088
1645c     16 FB C9 FA | 	rdbyte	result1, local08 wz
16460     01 2C 06 51 |  if_ne	add	local08, #1
16464     F4 FF 9F 5D |  if_ne	jmp	#LR__2088
16468                 | LR__2089
16468     09 2D 82 F1 | 	sub	local08, arg01
1646c     16 2F 02 F6 | 	mov	local09, local08
16470     17 25 02 F6 | 	mov	local04, local09
16474     0F 25 02 F1 | 	add	local04, local01
16478     12 29 C2 FA | 	rdbyte	local06, local04
1647c     2F 28 0E F2 | 	cmp	local06, #47 wz
16480     17 31 02 56 |  if_ne	mov	local10, local09
16484     0F 31 02 51 |  if_ne	add	local10, local01
16488     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1648c     54 01 90 5D |  if_ne	jmp	#LR__2097
16490     15 17 02 F6 | 	mov	arg03, local07
16494     02 16 66 F0 | 	shl	arg03, #2
16498     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1649c     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
164a0     0B 15 02 FB | 	rdlong	arg02, arg03
164a4     17 17 02 F6 | 	mov	arg03, local09
164a8     0F 13 02 F6 | 	mov	arg01, local01
164ac     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
164b0     5C 45 B0 FD | 	call	#__system__strncmp
164b4     00 FA 4D F2 | 	cmps	result1, #0 wz
164b8     28 01 90 5D |  if_ne	jmp	#LR__2097
164bc     15 33 02 F6 | 	mov	local11, local07
164c0     02 32 66 F0 | 	shl	local11, #2
164c4     74 E8 05 F1 | 	add	ptr___system__dat__, #116
164c8     F4 32 02 F1 | 	add	local11, ptr___system__dat__
164cc     19 35 02 FB | 	rdlong	local12, local11
164d0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
164d4     97 22 48 FB | 	callpa	#(@LR__2091-@LR__2090)>>2,fcache_load_ptr_
164d8                 | LR__2090
164d8     17 29 02 F6 | 	mov	local06, local09
164dc     01 28 06 F1 | 	add	local06, #1
164e0     0F 29 02 F1 | 	add	local06, local01
164e4     14 33 C2 FA | 	rdbyte	local11, local06
164e8     2E 32 0E F2 | 	cmp	local11, #46 wz
164ec     2C 00 90 5D |  if_ne	jmp	#LR__2092
164f0     17 33 02 F6 | 	mov	local11, local09
164f4     02 32 06 F1 | 	add	local11, #2
164f8     0F 33 02 F1 | 	add	local11, local01
164fc     19 31 C2 FA | 	rdbyte	local10, local11
16500     2F 30 0E F2 | 	cmp	local10, #47 wz
16504     17 37 02 56 |  if_ne	mov	local13, local09
16508     02 36 06 51 |  if_ne	add	local13, #2
1650c     0F 37 02 51 |  if_ne	add	local13, local01
16510     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
16514     01 2E 06 A1 |  if_e	add	local09, #1
16518     BC FF 9F AD |  if_e	jmp	#LR__2090
1651c                 | LR__2091
1651c                 | LR__2092
1651c     00 22 0E F2 | 	cmp	local03, #0 wz
16520     11 13 02 56 |  if_ne	mov	arg01, local03
16524     0F 15 02 56 |  if_ne	mov	arg02, local01
16528     00 17 06 56 |  if_ne	mov	arg03, #256
1652c     34 44 B0 5D |  if_ne	call	#__system__strncpy
16530     0F 15 02 F6 | 	mov	arg02, local01
16534     17 15 02 F1 | 	add	arg02, local09
16538     01 14 06 F1 | 	add	arg02, #1
1653c     0F 13 02 F6 | 	mov	arg01, local01
16540     D4 F5 BF FD | 	call	#__system____builtin_strcpy
16544     0F 13 02 F6 | 	mov	arg01, local01
16548     09 2D 02 F6 | 	mov	local08, arg01
1654c     97 06 48 FB | 	callpa	#(@LR__2094-@LR__2093)>>2,fcache_load_ptr_
16550                 | LR__2093
16550     16 FB C9 FA | 	rdbyte	result1, local08 wz
16554     01 2C 06 51 |  if_ne	add	local08, #1
16558     F4 FF 9F 5D |  if_ne	jmp	#LR__2093
1655c                 | LR__2094
1655c     09 2D 82 F1 | 	sub	local08, arg01
16560     16 2F 02 F6 | 	mov	local09, local08
16564                 | LR__2095
16564     01 2E 56 F2 | 	cmps	local09, #1 wc
16568     70 00 90 CD |  if_b	jmp	#LR__2096
1656c     17 25 02 F6 | 	mov	local04, local09
16570     0F 25 02 F1 | 	add	local04, local01
16574     12 33 C2 FA | 	rdbyte	local11, local04
16578     2F 32 0E F2 | 	cmp	local11, #47 wz
1657c     17 33 02 A6 |  if_e	mov	local11, local09
16580     0F 33 02 A1 |  if_e	add	local11, local01
16584     19 01 48 AC |  if_e	wrbyte	#0, local11
16588     01 2E 86 A1 |  if_e	sub	local09, #1
1658c     D4 FF 9F AD |  if_e	jmp	#LR__2095
16590     17 25 02 F6 | 	mov	local04, local09
16594     0F 25 02 F1 | 	add	local04, local01
16598     12 33 C2 FA | 	rdbyte	local11, local04
1659c     2E 32 0E F2 | 	cmp	local11, #46 wz
165a0     38 00 90 5D |  if_ne	jmp	#LR__2096
165a4     02 2E 56 F2 | 	cmps	local09, #2 wc
165a8     30 00 90 CD |  if_b	jmp	#LR__2096
165ac     17 39 02 F6 | 	mov	local14, local09
165b0     01 38 86 F1 | 	sub	local14, #1
165b4     0F 39 02 F1 | 	add	local14, local01
165b8     1C 27 C2 FA | 	rdbyte	local05, local14
165bc     2F 26 0E F2 | 	cmp	local05, #47 wz
165c0     18 00 90 5D |  if_ne	jmp	#LR__2096
165c4     17 25 02 F6 | 	mov	local04, local09
165c8     01 24 86 F1 | 	sub	local04, #1
165cc     0F 25 02 F1 | 	add	local04, local01
165d0     12 01 48 FC | 	wrbyte	#0, local04
165d4     02 2E 86 F1 | 	sub	local09, #2
165d8     88 FF 9F FD | 	jmp	#LR__2095
165dc                 | LR__2096
165dc     1A FB 01 F6 | 	mov	result1, local12
165e0     1C 00 90 FD | 	jmp	#LR__2100
165e4                 | LR__2097
165e4                 | LR__2098
165e4     01 2A 06 F1 | 	add	local07, #1
165e8     2C FE 9F FD | 	jmp	#LR__2087
165ec                 | LR__2099
165ec     03 00 00 FF 
165f0     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
165f4     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
165f8     03 00 00 FF 
165fc     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
16600                 | LR__2100
16600     A7 F0 03 F6 | 	mov	ptra, fp
16604     B2 00 A0 FD | 	call	#popregs_
16608                 | __system____getvfsforfile_ret
16608     2D 00 64 FD | 	ret
1660c                 | 
1660c                 | __system___basic_open
1660c     05 4A 05 F6 | 	mov	COUNT_, #5
16610     A8 00 A0 FD | 	call	#pushregs_
16614     0A 1F 02 F6 | 	mov	local01, arg02
16618     0B 21 02 F6 | 	mov	local02, arg03
1661c     0C 23 02 F6 | 	mov	local03, arg04
16620     00 24 06 F6 | 	mov	local04, #0
16624     14 43 B0 FD | 	call	#__system____getftab
16628     FD 26 0A F6 | 	mov	local05, result1 wz
1662c     18 00 90 5D |  if_ne	jmp	#LR__2110
16630     EE 12 02 F6 | 	mov	arg01, abortchain
16634     0C 14 06 F6 | 	mov	arg02, #12
16638     01 16 06 F6 | 	mov	arg03, #1
1663c     DA 00 A0 FD | 	call	#__longjmp
16640     01 FA 65 F6 | 	neg	result1, #1
16644     14 01 90 FD | 	jmp	#LR__2119
16648                 | LR__2110
16648     08 26 06 F1 | 	add	local05, #8
1664c     13 FB 09 FB | 	rdlong	result1, local05 wz
16650     08 26 86 F1 | 	sub	local05, #8
16654     13 13 02 56 |  if_ne	mov	arg01, local05
16658     70 3A B0 5D |  if_ne	call	#__system___closeraw
1665c     00 1E 0E F2 | 	cmp	local01, #0 wz
16660     00 20 0E A2 |  if_e	cmp	local02, #0 wz
16664     00 22 0E A2 |  if_e	cmp	local03, #0 wz
16668     3C 00 90 AD |  if_e	jmp	#LR__2112
1666c     0C 12 06 F6 | 	mov	arg01, #12
16670     58 2F B0 FD | 	call	#__system___gc_alloc_managed
16674     FD 24 0A F6 | 	mov	local04, result1 wz
16678     18 00 90 5D |  if_ne	jmp	#LR__2111
1667c     EE 12 02 F6 | 	mov	arg01, abortchain
16680     07 14 06 F6 | 	mov	arg02, #7
16684     01 16 06 F6 | 	mov	arg03, #1
16688     DA 00 A0 FD | 	call	#__longjmp
1668c     01 FA 65 F6 | 	neg	result1, #1
16690     C8 00 90 FD | 	jmp	#LR__2119
16694                 | LR__2111
16694     12 01 68 FC | 	wrlong	#0, local04
16698     04 24 06 F1 | 	add	local04, #4
1669c     12 01 68 FC | 	wrlong	#0, local04
166a0     04 24 86 F1 | 	sub	local04, #4
166a4     13 25 62 FC | 	wrlong	local04, local05
166a8                 | LR__2112
166a8     00 1E 0E F2 | 	cmp	local01, #0 wz
166ac     20 00 90 AD |  if_e	jmp	#LR__2113
166b0     12 1F 62 FC | 	wrlong	local01, local04
166b4     12 FB 01 F6 | 	mov	result1, local04
166b8     00 60 02 FF 
166bc     00 FA 45 F5 | 	or	result1, ##79691776
166c0     1C 26 06 F1 | 	add	local05, #28
166c4     13 FB 61 FC | 	wrlong	result1, local05
166c8     1C 26 86 F1 | 	sub	local05, #28
166cc     0C 00 90 FD | 	jmp	#LR__2114
166d0                 | LR__2113
166d0     1C 26 06 F1 | 	add	local05, #28
166d4     13 01 68 FC | 	wrlong	#0, local05
166d8     1C 26 86 F1 | 	sub	local05, #28
166dc                 | LR__2114
166dc     00 20 0E F2 | 	cmp	local02, #0 wz
166e0     28 00 90 AD |  if_e	jmp	#LR__2115
166e4     04 24 06 F1 | 	add	local04, #4
166e8     12 21 62 FC | 	wrlong	local02, local04
166ec     04 24 86 F1 | 	sub	local04, #4
166f0     12 FB 01 F6 | 	mov	result1, local04
166f4     00 68 02 FF 
166f8     00 FA 45 F5 | 	or	result1, ##80740352
166fc     20 26 06 F1 | 	add	local05, #32
16700     13 FB 61 FC | 	wrlong	result1, local05
16704     20 26 86 F1 | 	sub	local05, #32
16708     0C 00 90 FD | 	jmp	#LR__2116
1670c                 | LR__2115
1670c     20 26 06 F1 | 	add	local05, #32
16710     13 01 68 FC | 	wrlong	#0, local05
16714     20 26 86 F1 | 	sub	local05, #32
16718                 | LR__2116
16718     00 22 0E F2 | 	cmp	local03, #0 wz
1671c     24 00 90 AD |  if_e	jmp	#LR__2117
16720     08 24 06 F1 | 	add	local04, #8
16724     12 23 62 FC | 	wrlong	local03, local04
16728     08 24 86 F1 | 	sub	local04, #8
1672c     00 70 02 FF 
16730     00 24 46 F5 | 	or	local04, ##81788928
16734     24 26 06 F1 | 	add	local05, #36
16738     13 25 62 FC | 	wrlong	local04, local05
1673c     24 26 86 F1 | 	sub	local05, #36
16740     0C 00 90 FD | 	jmp	#LR__2118
16744                 | LR__2117
16744     24 26 06 F1 | 	add	local05, #36
16748     13 01 68 FC | 	wrlong	#0, local05
1674c     24 26 86 F1 | 	sub	local05, #36
16750                 | LR__2118
16750     08 26 06 F1 | 	add	local05, #8
16754     13 0F 68 FC | 	wrlong	#7, local05
16758     00 FA 05 F6 | 	mov	result1, #0
1675c                 | LR__2119
1675c     A7 F0 03 F6 | 	mov	ptra, fp
16760     B2 00 A0 FD | 	call	#popregs_
16764                 | __system___basic_open_ret
16764     2D 00 64 FD | 	ret
16768                 | 
16768                 | __system___basic_open_string
16768     04 4A 05 F6 | 	mov	COUNT_, #4
1676c     A8 00 A0 FD | 	call	#pushregs_
16770     0A 1F 02 F6 | 	mov	local01, arg02
16774     0B 21 02 F6 | 	mov	local02, arg03
16778     C0 41 B0 FD | 	call	#__system____getftab
1677c     FD 22 0A F6 | 	mov	local03, result1 wz
16780     18 00 90 5D |  if_ne	jmp	#LR__2120
16784     EE 12 02 F6 | 	mov	arg01, abortchain
16788     0C 14 06 F6 | 	mov	arg02, #12
1678c     01 16 06 F6 | 	mov	arg03, #1
16790     DA 00 A0 FD | 	call	#__longjmp
16794     01 FA 65 F6 | 	neg	result1, #1
16798     58 00 90 FD | 	jmp	#LR__2122
1679c                 | LR__2120
1679c     08 22 06 F1 | 	add	local03, #8
167a0     11 19 0A FB | 	rdlong	arg04, local03 wz
167a4     08 22 86 F1 | 	sub	local03, #8
167a8     11 13 02 56 |  if_ne	mov	arg01, local03
167ac     1C 39 B0 5D |  if_ne	call	#__system___closeraw
167b0     0F 15 02 F6 | 	mov	arg02, local01
167b4     10 17 02 F6 | 	mov	arg03, local02
167b8     11 13 02 F6 | 	mov	arg01, local03
167bc     B6 19 06 F6 | 	mov	arg04, #438
167c0     04 36 B0 FD | 	call	#__system___openraw
167c4     FD 24 02 F6 | 	mov	local04, result1
167c8     00 24 56 F2 | 	cmps	local04, #0 wc
167cc     20 00 90 3D |  if_ae	jmp	#LR__2121
167d0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
167d4     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
167d8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
167dc     EE 12 02 F6 | 	mov	arg01, abortchain
167e0     01 16 06 F6 | 	mov	arg03, #1
167e4     DA 00 A0 FD | 	call	#__longjmp
167e8     01 FA 65 F6 | 	neg	result1, #1
167ec     04 00 90 FD | 	jmp	#LR__2122
167f0                 | LR__2121
167f0     12 FB 01 F6 | 	mov	result1, local04
167f4                 | LR__2122
167f4     A7 F0 03 F6 | 	mov	ptra, fp
167f8     B2 00 A0 FD | 	call	#popregs_
167fc                 | __system___basic_open_string_ret
167fc     2D 00 64 FD | 	ret
16800                 | 
16800                 | __system___basic_print_char
16800     03 4A 05 F6 | 	mov	COUNT_, #3
16804     A8 00 A0 FD | 	call	#pushregs_
16808     0A 1F 02 F6 | 	mov	local01, arg02
1680c     80 48 B0 FD | 	call	#__system___gettxfunc
16810     FD 20 0A F6 | 	mov	local02, result1 wz
16814     00 FA 05 A6 |  if_e	mov	result1, #0
16818     30 00 90 AD |  if_e	jmp	#LR__2130
1681c     10 23 02 F6 | 	mov	local03, local02
16820     13 20 46 F7 | 	zerox	local02, #19
16824     14 22 46 F0 | 	shr	local03, #20
16828     02 22 66 F0 | 	shl	local03, #2
1682c     ED 22 02 F1 | 	add	local03, __methods__
16830     11 23 02 FB | 	rdlong	local03, local03
16834     0F 13 02 F6 | 	mov	arg01, local01
16838     F2 1E 02 F6 | 	mov	local01, objptr
1683c     10 E5 01 F6 | 	mov	objptr, local02
16840     2D 22 62 FD | 	call	local03
16844     0F E5 01 F6 | 	mov	objptr, local01
16848     01 FA 05 F6 | 	mov	result1, #1
1684c                 | LR__2130
1684c     A7 F0 03 F6 | 	mov	ptra, fp
16850     B2 00 A0 FD | 	call	#popregs_
16854                 | __system___basic_print_char_ret
16854     2D 00 64 FD | 	ret
16858                 | 
16858                 | __system___basic_print_string
16858     03 4A 05 F6 | 	mov	COUNT_, #3
1685c     A8 00 A0 FD | 	call	#pushregs_
16860     0A 1F 02 F6 | 	mov	local01, arg02
16864     0B 21 02 F6 | 	mov	local02, arg03
16868     24 48 B0 FD | 	call	#__system___gettxfunc
1686c     FD 22 0A F6 | 	mov	local03, result1 wz
16870     00 FA 05 A6 |  if_e	mov	result1, #0
16874     18 00 90 AD |  if_e	jmp	#LR__2140
16878     00 1E 0E F2 | 	cmp	local01, #0 wz
1687c     00 FA 05 A6 |  if_e	mov	result1, #0
16880     11 13 02 56 |  if_ne	mov	arg01, local03
16884     10 15 02 56 |  if_ne	mov	arg02, local02
16888     0F 17 02 56 |  if_ne	mov	arg03, local01
1688c     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
16890                 | LR__2140
16890     A7 F0 03 F6 | 	mov	ptra, fp
16894     B2 00 A0 FD | 	call	#popregs_
16898                 | __system___basic_print_string_ret
16898     2D 00 64 FD | 	ret
1689c                 | 
1689c                 | __system___basic_print_integer
1689c     04 4A 05 F6 | 	mov	COUNT_, #4
168a0     A8 00 A0 FD | 	call	#pushregs_
168a4     0A 1F 02 F6 | 	mov	local01, arg02
168a8     0B 21 02 F6 | 	mov	local02, arg03
168ac     0C 23 02 F6 | 	mov	local03, arg04
168b0     DC 47 B0 FD | 	call	#__system___gettxfunc
168b4     FD 24 0A F6 | 	mov	local04, result1 wz
168b8     00 FA 05 A6 |  if_e	mov	result1, #0
168bc     12 13 02 56 |  if_ne	mov	arg01, local04
168c0     10 15 02 56 |  if_ne	mov	arg02, local02
168c4     0F 17 02 56 |  if_ne	mov	arg03, local01
168c8     11 19 02 56 |  if_ne	mov	arg04, local03
168cc     48 02 B0 5D |  if_ne	call	#__system___fmtnum
168d0     A7 F0 03 F6 | 	mov	ptra, fp
168d4     B2 00 A0 FD | 	call	#popregs_
168d8                 | __system___basic_print_integer_ret
168d8     2D 00 64 FD | 	ret
168dc                 | 
168dc                 | __system___basic_print_unsigned
168dc     03 4A 05 F6 | 	mov	COUNT_, #3
168e0     A8 00 A0 FD | 	call	#pushregs_
168e4     0A 1F 02 F6 | 	mov	local01, arg02
168e8     0B 21 02 F6 | 	mov	local02, arg03
168ec     0C 23 02 F6 | 	mov	local03, arg04
168f0     9C 47 B0 FD | 	call	#__system___gettxfunc
168f4     FD 12 0A F6 | 	mov	arg01, result1 wz
168f8     00 FA 05 A6 |  if_e	mov	result1, #0
168fc     3A 20 26 54 |  if_ne	bith	local02, #58
16900     10 15 02 56 |  if_ne	mov	arg02, local02
16904     0F 17 02 56 |  if_ne	mov	arg03, local01
16908     11 19 02 56 |  if_ne	mov	arg04, local03
1690c     08 02 B0 5D |  if_ne	call	#__system___fmtnum
16910     A7 F0 03 F6 | 	mov	ptra, fp
16914     B2 00 A0 FD | 	call	#popregs_
16918                 | __system___basic_print_unsigned_ret
16918     2D 00 64 FD | 	ret
1691c                 | 
1691c                 | __system___basic_get_char
1691c     03 4A 05 F6 | 	mov	COUNT_, #3
16920     A8 00 A0 FD | 	call	#pushregs_
16924     AC 47 B0 FD | 	call	#__system___getrxfunc
16928     FD 1E 0A F6 | 	mov	local01, result1 wz
1692c     01 FA 65 A6 |  if_e	neg	result1, #1
16930     28 00 90 AD |  if_e	jmp	#LR__2150
16934     0F 21 02 F6 | 	mov	local02, local01
16938     13 1E 46 F7 | 	zerox	local01, #19
1693c     14 20 46 F0 | 	shr	local02, #20
16940     02 20 66 F0 | 	shl	local02, #2
16944     ED 20 02 F1 | 	add	local02, __methods__
16948     10 21 02 FB | 	rdlong	local02, local02
1694c     F2 22 02 F6 | 	mov	local03, objptr
16950     0F E5 01 F6 | 	mov	objptr, local01
16954     2D 20 62 FD | 	call	local02
16958     11 E5 01 F6 | 	mov	objptr, local03
1695c                 | LR__2150
1695c     A7 F0 03 F6 | 	mov	ptra, fp
16960     B2 00 A0 FD | 	call	#popregs_
16964                 | __system___basic_get_char_ret
16964     2D 00 64 FD | 	ret
16968                 | 
16968                 | __system___basic_get
16968     04 4A 05 F6 | 	mov	COUNT_, #4
1696c     A8 00 A0 FD | 	call	#pushregs_
16970     0D 1F 02 F6 | 	mov	local01, arg05
16974     0F 19 02 FD | 	qmul	arg04, local01
16978     09 21 02 F6 | 	mov	local02, arg01
1697c     0B 23 02 F6 | 	mov	local03, arg03
16980     00 14 0E F2 | 	cmp	arg02, #0 wz
16984     01 14 86 51 |  if_ne	sub	arg02, #1
16988     10 13 02 56 |  if_ne	mov	arg01, local02
1698c     00 16 06 56 |  if_ne	mov	arg03, #0
16990     18 24 62 FD | 	getqx	local04
16994     EC 3D B0 5D |  if_ne	call	#__system__lseek
16998     11 15 02 F6 | 	mov	arg02, local03
1699c     12 17 02 F6 | 	mov	arg03, local04
169a0     10 13 02 F6 | 	mov	arg01, local02
169a4     64 3D B0 FD | 	call	#__system__read
169a8     FD 24 02 F6 | 	mov	local04, result1
169ac     01 24 56 F2 | 	cmps	local04, #1 wc
169b0     10 00 90 CD |  if_b	jmp	#LR__2160
169b4     12 5F 02 F6 | 	mov	muldiva_, local04
169b8     0F 61 02 F6 | 	mov	muldivb_, local01
169bc     BA 00 A0 FD | 	call	#divide_
169c0     30 25 02 F6 | 	mov	local04, muldivb_
169c4                 | LR__2160
169c4     12 FB 01 F6 | 	mov	result1, local04
169c8     A7 F0 03 F6 | 	mov	ptra, fp
169cc     B2 00 A0 FD | 	call	#popregs_
169d0                 | __system___basic_get_ret
169d0     2D 00 64 FD | 	ret
169d4                 | 
169d4                 | __system___fmtchar
169d4     00 4A 05 F6 | 	mov	COUNT_, #0
169d8     A8 00 A0 FD | 	call	#pushregs_
169dc     10 F0 07 F1 | 	add	ptra, #16
169e0     04 4E 05 F1 | 	add	fp, #4
169e4     A7 12 62 FC | 	wrlong	arg01, fp
169e8     04 4E 05 F1 | 	add	fp, #4
169ec     A7 14 62 FC | 	wrlong	arg02, fp
169f0     04 4E 05 F1 | 	add	fp, #4
169f4     A7 16 62 FC | 	wrlong	arg03, fp
169f8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
169fc     A7 16 62 FC | 	wrlong	arg03, fp
16a00     08 4E 85 F1 | 	sub	fp, #8
16a04     A7 12 02 FB | 	rdlong	arg01, fp
16a08     04 4E 05 F1 | 	add	fp, #4
16a0c     A7 14 02 FB | 	rdlong	arg02, fp
16a10     04 4E 05 F1 | 	add	fp, #4
16a14     A7 16 02 F6 | 	mov	arg03, fp
16a18     0C 4E 85 F1 | 	sub	fp, #12
16a1c     0C 00 B0 FD | 	call	#__system___fmtstr
16a20     A7 F0 03 F6 | 	mov	ptra, fp
16a24     B2 00 A0 FD | 	call	#popregs_
16a28                 | __system___fmtchar_ret
16a28     2D 00 64 FD | 	ret
16a2c                 | 
16a2c                 | __system___fmtstr
16a2c     09 4A 05 F6 | 	mov	COUNT_, #9
16a30     A8 00 A0 FD | 	call	#pushregs_
16a34     09 1F 02 F6 | 	mov	local01, arg01
16a38     0A 21 02 F6 | 	mov	local02, arg02
16a3c     0B 23 02 F6 | 	mov	local03, arg03
16a40     10 19 E2 F8 | 	getbyte	arg04, local02, #0
16a44     11 13 02 F6 | 	mov	arg01, local03
16a48     09 25 02 F6 | 	mov	local04, arg01
16a4c     97 06 48 FB | 	callpa	#(@LR__2171-@LR__2170)>>2,fcache_load_ptr_
16a50                 | LR__2170
16a50     12 FB C9 FA | 	rdbyte	result1, local04 wz
16a54     01 24 06 51 |  if_ne	add	local04, #1
16a58     F4 FF 9F 5D |  if_ne	jmp	#LR__2170
16a5c                 | LR__2171
16a5c     09 25 82 F1 | 	sub	local04, arg01
16a60     00 18 0E F2 | 	cmp	arg04, #0 wz
16a64     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
16a68     10 15 02 F6 | 	mov	arg02, local02
16a6c     12 17 02 F6 | 	mov	arg03, local04
16a70     0F 13 02 F6 | 	mov	arg01, local01
16a74     02 18 06 F6 | 	mov	arg04, #2
16a78     B4 42 B0 FD | 	call	#__system___fmtpad
16a7c     FD 26 02 F6 | 	mov	local05, result1
16a80     00 26 56 F2 | 	cmps	local05, #0 wc
16a84     13 FB 01 C6 |  if_b	mov	result1, local05
16a88     80 00 90 CD |  if_b	jmp	#LR__2174
16a8c     01 24 56 F2 | 	cmps	local04, #1 wc
16a90     50 00 90 CD |  if_b	jmp	#LR__2173
16a94     12 29 02 F6 | 	mov	local06, local04
16a98                 | LR__2172
16a98     0F 2B 02 F6 | 	mov	local07, local01
16a9c     0F 2D 02 F6 | 	mov	local08, local01
16aa0     13 2A 46 F7 | 	zerox	local07, #19
16aa4     14 2C 46 F0 | 	shr	local08, #20
16aa8     02 2C 66 F0 | 	shl	local08, #2
16aac     ED 2C 02 F1 | 	add	local08, __methods__
16ab0     16 2D 02 FB | 	rdlong	local08, local08
16ab4     11 13 C2 FA | 	rdbyte	arg01, local03
16ab8     F2 2E 02 F6 | 	mov	local09, objptr
16abc     15 E5 01 F6 | 	mov	objptr, local07
16ac0     01 22 06 F1 | 	add	local03, #1
16ac4     2D 2C 62 FD | 	call	local08
16ac8     17 E5 01 F6 | 	mov	objptr, local09
16acc     FD 2E 02 F6 | 	mov	local09, result1
16ad0     00 2E 56 F2 | 	cmps	local09, #0 wc
16ad4     17 FB 01 C6 |  if_b	mov	result1, local09
16ad8     30 00 90 CD |  if_b	jmp	#LR__2174
16adc     17 27 02 F1 | 	add	local05, local09
16ae0     ED 29 6E FB | 	djnz	local06, #LR__2172
16ae4                 | LR__2173
16ae4     10 15 02 F6 | 	mov	arg02, local02
16ae8     12 17 02 F6 | 	mov	arg03, local04
16aec     0F 13 02 F6 | 	mov	arg01, local01
16af0     01 18 06 F6 | 	mov	arg04, #1
16af4     38 42 B0 FD | 	call	#__system___fmtpad
16af8     FD 2E 02 F6 | 	mov	local09, result1
16afc     00 2E 56 F2 | 	cmps	local09, #0 wc
16b00     17 FB 01 C6 |  if_b	mov	result1, local09
16b04     17 27 02 31 |  if_ae	add	local05, local09
16b08     13 FB 01 36 |  if_ae	mov	result1, local05
16b0c                 | LR__2174
16b0c     A7 F0 03 F6 | 	mov	ptra, fp
16b10     B2 00 A0 FD | 	call	#popregs_
16b14                 | __system___fmtstr_ret
16b14     2D 00 64 FD | 	ret
16b18                 | 
16b18                 | __system___fmtnum
16b18     0B 4A 05 F6 | 	mov	COUNT_, #11
16b1c     A8 00 A0 FD | 	call	#pushregs_
16b20     09 1F 02 F6 | 	mov	local01, arg01
16b24     0A 21 02 F6 | 	mov	local02, arg02
16b28     0B 23 02 F6 | 	mov	local03, arg03
16b2c     0C 25 02 F6 | 	mov	local04, arg04
16b30     F8 27 02 F6 | 	mov	local05, ptra
16b34     13 29 02 F6 | 	mov	local06, local05
16b38     00 2A 06 F6 | 	mov	local07, #0
16b3c     10 2D 02 F6 | 	mov	local08, local02
16b40     10 2C 46 F0 | 	shr	local08, #16
16b44     3F 2C 06 F5 | 	and	local08, #63
16b48     10 2F E2 F8 | 	getbyte	local09, local02, #0
16b4c     10 31 02 F6 | 	mov	local10, local02
16b50     1A 30 46 F0 | 	shr	local10, #26
16b54     03 30 06 F5 | 	and	local10, #3
16b58     18 33 02 F6 | 	mov	local11, local10
16b5c     01 2C 56 F2 | 	cmps	local08, #1 wc
16b60     44 F0 07 F1 | 	add	ptra, #68
16b64     01 2C 86 31 |  if_ae	sub	local08, #1
16b68     41 2E 56 F2 | 	cmps	local09, #65 wc
16b6c     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
16b70     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
16b74     03 32 0E F2 | 	cmp	local11, #3 wz
16b78     00 32 06 A6 |  if_e	mov	local11, #0
16b7c     00 22 56 52 |  if_ne	cmps	local03, #0 wc
16b80     04 32 06 46 |  if_c_and_nz	mov	local11, #4
16b84     11 23 62 46 |  if_c_and_nz	neg	local03, local03
16b88     00 32 0E F2 | 	cmp	local11, #0 wz
16b8c     4C 00 90 AD |  if_e	jmp	#LR__2183
16b90     01 2A 06 F6 | 	mov	local07, #1
16b94     17 2D 0A F2 | 	cmp	local08, local09 wz
16b98     18 00 90 5D |  if_ne	jmp	#LR__2181
16b9c     05 2C 6E FB | 	djnz	local08, #LR__2180
16ba0     0F 13 02 F6 | 	mov	arg01, local01
16ba4     10 15 02 F6 | 	mov	arg02, local02
16ba8     23 16 06 F6 | 	mov	arg03, #35
16bac     24 FE BF FD | 	call	#__system___fmtchar
16bb0     88 00 90 FD | 	jmp	#LR__2187
16bb4                 | LR__2180
16bb4                 | LR__2181
16bb4     02 32 0E F2 | 	cmp	local11, #2 wz
16bb8     14 31 02 A6 |  if_e	mov	local10, local06
16bbc     01 28 06 A1 |  if_e	add	local06, #1
16bc0     18 41 48 AC |  if_e	wrbyte	#32, local10
16bc4     14 00 90 AD |  if_e	jmp	#LR__2182
16bc8     04 32 0E F2 | 	cmp	local11, #4 wz
16bcc     14 5B 48 AC |  if_e	wrbyte	#45, local06
16bd0     01 28 06 A1 |  if_e	add	local06, #1
16bd4     14 57 48 5C |  if_ne	wrbyte	#43, local06
16bd8     01 28 06 51 |  if_ne	add	local06, #1
16bdc                 | LR__2182
16bdc                 | LR__2183
16bdc     14 13 02 F6 | 	mov	arg01, local06
16be0     11 15 02 F6 | 	mov	arg02, local03
16be4     12 17 02 F6 | 	mov	arg03, local04
16be8     16 19 02 F6 | 	mov	arg04, local08
16bec     00 1A 06 F6 | 	mov	arg05, #0
16bf0     1D 20 2E F4 | 	testbn	local02, #29 wz
16bf4     01 1A 06 56 |  if_ne	mov	arg05, #1
16bf8     FC 41 B0 FD | 	call	#__system___uitoa
16bfc     FD 2A 02 F1 | 	add	local07, result1
16c00     17 2B 5A F2 | 	cmps	local07, local09 wcz
16c04     24 00 90 ED |  if_be	jmp	#LR__2186
16c08     97 0E 48 FB | 	callpa	#(@LR__2185-@LR__2184)>>2,fcache_load_ptr_
16c0c                 | LR__2184
16c0c     17 31 02 F6 | 	mov	local10, local09
16c10     01 30 56 F2 | 	cmps	local10, #1 wc
16c14     01 2E 86 F1 | 	sub	local09, #1
16c18     14 31 02 36 |  if_ae	mov	local10, local06
16c1c     01 28 06 31 |  if_ae	add	local06, #1
16c20     18 47 48 3C |  if_ae	wrbyte	#35, local10
16c24     E4 FF 9F 3D |  if_ae	jmp	#LR__2184
16c28                 | LR__2185
16c28     14 01 48 FC | 	wrbyte	#0, local06
16c2c                 | LR__2186
16c2c     0F 13 02 F6 | 	mov	arg01, local01
16c30     10 15 02 F6 | 	mov	arg02, local02
16c34     13 17 02 F6 | 	mov	arg03, local05
16c38     F0 FD BF FD | 	call	#__system___fmtstr
16c3c                 | LR__2187
16c3c     A7 F0 03 F6 | 	mov	ptra, fp
16c40     B2 00 A0 FD | 	call	#popregs_
16c44                 | __system___fmtnum_ret
16c44     2D 00 64 FD | 	ret
16c48                 | 
16c48                 | __system___fmtfloat
16c48     10 4A 05 F6 | 	mov	COUNT_, #16
16c4c     A8 00 A0 FD | 	call	#pushregs_
16c50     24 F1 07 F1 | 	add	ptra, #292
16c54     04 4E 05 F1 | 	add	fp, #4
16c58     A7 12 62 FC | 	wrlong	arg01, fp
16c5c     04 4E 05 F1 | 	add	fp, #4
16c60     A7 14 62 FC | 	wrlong	arg02, fp
16c64     04 4E 05 F1 | 	add	fp, #4
16c68     A7 16 62 FC | 	wrlong	arg03, fp
16c6c     04 4E 05 F1 | 	add	fp, #4
16c70     A7 18 62 FC | 	wrlong	arg04, fp
16c74     0C 4E 05 F1 | 	add	fp, #12
16c78     A7 14 68 FC | 	wrlong	#10, fp
16c7c     08 4E 05 F1 | 	add	fp, #8
16c80     A7 00 68 FC | 	wrlong	#0, fp
16c84     08 4E 05 F1 | 	add	fp, #8
16c88     A7 00 68 FC | 	wrlong	#0, fp
16c8c     08 4E 05 F1 | 	add	fp, #8
16c90     A7 00 68 FC | 	wrlong	#0, fp
16c94     04 4E 05 F1 | 	add	fp, #4
16c98     A7 04 68 FC | 	wrlong	#2, fp
16c9c     04 4E 05 F1 | 	add	fp, #4
16ca0     A7 00 68 FC | 	wrlong	#0, fp
16ca4     04 4E 05 F1 | 	add	fp, #4
16ca8     A7 00 68 FC | 	wrlong	#0, fp
16cac     04 4E 05 F1 | 	add	fp, #4
16cb0     A7 00 68 FC | 	wrlong	#0, fp
16cb4     04 4E 05 F1 | 	add	fp, #4
16cb8     A7 00 68 FC | 	wrlong	#0, fp
16cbc     18 4E 05 F1 | 	add	fp, #24
16cc0     A7 00 68 FC | 	wrlong	#0, fp
16cc4     68 4E 05 F1 | 	add	fp, #104
16cc8     A7 1E 02 F6 | 	mov	local01, fp
16ccc     08 4E 85 F1 | 	sub	fp, #8
16cd0     A7 1E 62 FC | 	wrlong	local01, fp
16cd4     04 4E 05 F1 | 	add	fp, #4
16cd8     A7 1E 62 FC | 	wrlong	local01, fp
16cdc     BC 4E 85 F1 | 	sub	fp, #188
16ce0     A7 1E 02 FB | 	rdlong	local01, fp
16ce4     10 1E 46 F0 | 	shr	local01, #16
16ce8     3F 1E 06 F5 | 	and	local01, #63
16cec     B0 4E 05 F1 | 	add	fp, #176
16cf0     A7 1E 62 FC | 	wrlong	local01, fp
16cf4     B0 4E 85 F1 | 	sub	fp, #176
16cf8     A7 1E 02 FB | 	rdlong	local01, fp
16cfc     1C 1E 46 F0 | 	shr	local01, #28
16d00     01 1E 06 F5 | 	and	local01, #1
16d04     08 4F 05 F1 | 	add	fp, #264
16d08     A7 1E 62 FC | 	wrlong	local01, fp
16d0c     58 4E 85 F1 | 	sub	fp, #88
16d10     A7 1E 0A FB | 	rdlong	local01, fp wz
16d14     B8 4E 85 F1 | 	sub	fp, #184
16d18     3C 00 90 5D |  if_ne	jmp	#LR__2191
16d1c     10 4E 05 F1 | 	add	fp, #16
16d20     A7 1E 02 FB | 	rdlong	local01, fp
16d24     10 4E 85 F1 | 	sub	fp, #16
16d28     61 1E 0E F2 | 	cmp	local01, #97 wz
16d2c     18 00 90 5D |  if_ne	jmp	#LR__2190
16d30     B8 4E 05 F1 | 	add	fp, #184
16d34     A7 1A 68 FC | 	wrlong	#13, fp
16d38     84 4E 85 F1 | 	sub	fp, #132
16d3c     A7 02 68 FC | 	wrlong	#1, fp
16d40     34 4E 85 F1 | 	sub	fp, #52
16d44     24 00 90 FD | 	jmp	#LR__2192
16d48                 | LR__2190
16d48     B8 4E 05 F1 | 	add	fp, #184
16d4c     A7 0C 68 FC | 	wrlong	#6, fp
16d50     B8 4E 85 F1 | 	sub	fp, #184
16d54     14 00 90 FD | 	jmp	#LR__2192
16d58                 | LR__2191
16d58     B8 4E 05 F1 | 	add	fp, #184
16d5c     A7 1E 02 FB | 	rdlong	local01, fp
16d60     01 1E 86 F1 | 	sub	local01, #1
16d64     A7 1E 62 FC | 	wrlong	local01, fp
16d68     B8 4E 85 F1 | 	sub	fp, #184
16d6c                 | LR__2192
16d6c     08 4E 05 F1 | 	add	fp, #8
16d70     A7 1E 02 FB | 	rdlong	local01, fp
16d74     16 1E 46 F0 | 	shr	local01, #22
16d78     03 1E 06 F5 | 	and	local01, #3
16d7c     04 4F 05 F1 | 	add	fp, #260
16d80     A7 1E 62 FC | 	wrlong	local01, fp
16d84     04 4F 85 F1 | 	sub	fp, #260
16d88     A7 1E 02 FB | 	rdlong	local01, fp
16d8c     1D 1E 46 F0 | 	shr	local01, #29
16d90     01 1E 06 F5 | 	and	local01, #1
16d94     B4 4E 05 F1 | 	add	fp, #180
16d98     A7 1E 62 FC | 	wrlong	local01, fp
16d9c     B4 4E 85 F1 | 	sub	fp, #180
16da0     A7 1E 02 FB | 	rdlong	local01, fp
16da4     0F 1F EA F8 | 	getbyte	local01, local01, #1
16da8     60 4E 05 F1 | 	add	fp, #96
16dac     A7 1E 62 FC | 	wrlong	local01, fp
16db0     60 4E 85 F1 | 	sub	fp, #96
16db4     A7 1E 02 FB | 	rdlong	local01, fp
16db8     0F 1F E2 F8 | 	getbyte	local01, local01, #0
16dbc     64 4E 05 F1 | 	add	fp, #100
16dc0     A7 1E 62 FC | 	wrlong	local01, fp
16dc4     00 1E 06 F6 | 	mov	local01, #0
16dc8     5C 4E 85 F1 | 	sub	fp, #92
16dcc     A7 1A 02 FB | 	rdlong	arg05, fp
16dd0     65 1A 0E F2 | 	cmp	arg05, #101 wz
16dd4     01 1E 06 A6 |  if_e	mov	local01, #1
16dd8     14 4E 05 F1 | 	add	fp, #20
16ddc     A7 1E 62 FC | 	wrlong	local01, fp
16de0     98 4E 05 F1 | 	add	fp, #152
16de4     A7 20 0A FB | 	rdlong	local02, fp wz
16de8     45 1E 06 56 |  if_ne	mov	local01, #69
16dec     65 1E 06 A6 |  if_e	mov	local01, #101
16df0     8C 4E 85 F1 | 	sub	fp, #140
16df4     A7 1E 62 FC | 	wrlong	local01, fp
16df8     20 4E 85 F1 | 	sub	fp, #32
16dfc     A7 1E 02 FB | 	rdlong	local01, fp
16e00     10 4E 85 F1 | 	sub	fp, #16
16e04     61 1E 0E F2 | 	cmp	local01, #97 wz
16e08     4C 00 90 5D |  if_ne	jmp	#LR__2193
16e0c     24 4E 05 F1 | 	add	fp, #36
16e10     A7 02 68 FC | 	wrlong	#1, fp
16e14     98 4E 05 F1 | 	add	fp, #152
16e18     A7 20 0A FB | 	rdlong	local02, fp wz
16e1c     50 1E 06 56 |  if_ne	mov	local01, #80
16e20     70 1E 06 A6 |  if_e	mov	local01, #112
16e24     8C 4E 85 F1 | 	sub	fp, #140
16e28     A7 1E 62 FC | 	wrlong	local01, fp
16e2c     14 4E 85 F1 | 	sub	fp, #20
16e30     A7 04 68 FC | 	wrlong	#2, fp
16e34     1C 4E 05 F1 | 	add	fp, #28
16e38     A7 02 68 FC | 	wrlong	#1, fp
16e3c     84 4E 05 F1 | 	add	fp, #132
16e40     A7 20 0A FB | 	rdlong	local02, fp wz
16e44     58 1E 06 56 |  if_ne	mov	local01, #88
16e48     78 1E 06 A6 |  if_e	mov	local01, #120
16e4c     7C 4E 85 F1 | 	sub	fp, #124
16e50     A7 1E 62 FC | 	wrlong	local01, fp
16e54     40 4E 85 F1 | 	sub	fp, #64
16e58                 | LR__2193
16e58     10 4E 05 F1 | 	add	fp, #16
16e5c     A7 1E 02 FB | 	rdlong	local01, fp
16e60     10 4E 85 F1 | 	sub	fp, #16
16e64     23 1E 0E F2 | 	cmp	local01, #35 wz
16e68     3C 00 90 5D |  if_ne	jmp	#LR__2196
16e6c     48 4E 05 F1 | 	add	fp, #72
16e70     A7 02 68 FC | 	wrlong	#1, fp
16e74     C8 4E 05 F1 | 	add	fp, #200
16e78     A7 1E 0A FB | 	rdlong	local01, fp wz
16e7c     10 4F 85 F1 | 	sub	fp, #272
16e80     18 00 90 AD |  if_e	jmp	#LR__2194
16e84     10 4E 05 F1 | 	add	fp, #16
16e88     A7 CC 68 FC | 	wrlong	#102, fp
16e8c     00 4F 05 F1 | 	add	fp, #256
16e90     A7 00 68 FC | 	wrlong	#0, fp
16e94     10 4F 85 F1 | 	sub	fp, #272
16e98     0C 00 90 FD | 	jmp	#LR__2195
16e9c                 | LR__2194
16e9c     10 4F 05 F1 | 	add	fp, #272
16ea0     A7 02 68 FC | 	wrlong	#1, fp
16ea4     10 4F 85 F1 | 	sub	fp, #272
16ea8                 | LR__2195
16ea8                 | LR__2196
16ea8     08 4E 05 F1 | 	add	fp, #8
16eac     A7 1E 02 FB | 	rdlong	local01, fp
16eb0     1A 1E 46 F0 | 	shr	local01, #26
16eb4     03 1E 06 F5 | 	and	local01, #3
16eb8     5C 4E 05 F1 | 	add	fp, #92
16ebc     A7 1E 62 FC | 	wrlong	local01, fp
16ec0     58 4E 85 F1 | 	sub	fp, #88
16ec4     A7 FA 01 FB | 	rdlong	result1, fp
16ec8     0C 4E 85 F1 | 	sub	fp, #12
16ecc     1F FA 4D F0 | 	shr	result1, #31 wz
16ed0     20 00 90 AD |  if_e	jmp	#LR__2197
16ed4     2C 4E 05 F1 | 	add	fp, #44
16ed8     A7 5A 68 FC | 	wrlong	#45, fp
16edc     20 4E 85 F1 | 	sub	fp, #32
16ee0     A7 FA 01 FB | 	rdlong	result1, fp
16ee4     1F FA E5 F4 | 	bitnot	result1, #31
16ee8     A7 FA 61 FC | 	wrlong	result1, fp
16eec     0C 4E 85 F1 | 	sub	fp, #12
16ef0     3C 00 90 FD | 	jmp	#LR__2199
16ef4                 | LR__2197
16ef4     64 4E 05 F1 | 	add	fp, #100
16ef8     A7 1E 02 FB | 	rdlong	local01, fp
16efc     64 4E 85 F1 | 	sub	fp, #100
16f00     01 1E 0E F2 | 	cmp	local01, #1 wz
16f04     2C 4E 05 A1 |  if_e	add	fp, #44
16f08     A7 56 68 AC |  if_e	wrlong	#43, fp
16f0c     2C 4E 85 A1 |  if_e	sub	fp, #44
16f10     1C 00 90 AD |  if_e	jmp	#LR__2198
16f14     64 4E 05 F1 | 	add	fp, #100
16f18     A7 1E 02 FB | 	rdlong	local01, fp
16f1c     64 4E 85 F1 | 	sub	fp, #100
16f20     02 1E 0E F2 | 	cmp	local01, #2 wz
16f24     2C 4E 05 A1 |  if_e	add	fp, #44
16f28     A7 40 68 AC |  if_e	wrlong	#32, fp
16f2c     2C 4E 85 A1 |  if_e	sub	fp, #44
16f30                 | LR__2198
16f30                 | LR__2199
16f30     08 4E 05 F1 | 	add	fp, #8
16f34     A7 1E 02 FB | 	rdlong	local01, fp
16f38     18 1E 46 F0 | 	shr	local01, #24
16f3c     03 1E 06 F5 | 	and	local01, #3
16f40     3C 4E 05 F1 | 	add	fp, #60
16f44     A7 1E 62 FC | 	wrlong	local01, fp
16f48     00 1E 06 F6 | 	mov	local01, #0
16f4c     18 4E 85 F1 | 	sub	fp, #24
16f50     A7 22 0A FB | 	rdlong	local03, fp wz
16f54     2C 4E 85 F1 | 	sub	fp, #44
16f58     18 00 90 5D |  if_ne	jmp	#LR__2200
16f5c     1C 4E 05 F1 | 	add	fp, #28
16f60     A7 24 02 FB | 	rdlong	local04, fp
16f64     1C 4E 85 F1 | 	sub	fp, #28
16f68     12 27 02 F6 | 	mov	local05, local04
16f6c     0A 26 0E F2 | 	cmp	local05, #10 wz
16f70     04 00 90 AD |  if_e	jmp	#LR__2201
16f74                 | LR__2200
16f74     01 1E 66 F5 | 	xor	local01, #1
16f78                 | LR__2201
16f78     3C 4E 05 F1 | 	add	fp, #60
16f7c     A7 1E 62 FC | 	wrlong	local01, fp
16f80     3C 4E 85 F1 | 	sub	fp, #60
16f84     00 1E 0E F2 | 	cmp	local01, #0 wz
16f88     0C 01 90 AD |  if_e	jmp	#LR__2203
16f8c     44 4E 05 F1 | 	add	fp, #68
16f90     A7 26 02 FB | 	rdlong	local05, fp
16f94     44 4E 85 F1 | 	sub	fp, #68
16f98     13 23 02 F6 | 	mov	local03, local05
16f9c     02 22 0E F2 | 	cmp	local03, #2 wz
16fa0     F4 00 90 5D |  if_ne	jmp	#LR__2203
16fa4     0C 4F 05 F1 | 	add	fp, #268
16fa8     A7 28 02 FB | 	rdlong	local06, fp
16fac     0C 4F 85 F1 | 	sub	fp, #268
16fb0     14 25 02 F6 | 	mov	local04, local06
16fb4     02 24 0E F2 | 	cmp	local04, #2 wz
16fb8     DC 00 90 AD |  if_e	jmp	#LR__2203
16fbc     C0 4E 05 F1 | 	add	fp, #192
16fc0     A7 12 02 FB | 	rdlong	arg01, fp
16fc4     94 4E 85 F1 | 	sub	fp, #148
16fc8     A7 14 02 FB | 	rdlong	arg02, fp
16fcc     14 4E 05 F1 | 	add	fp, #20
16fd0     A7 16 02 FB | 	rdlong	arg03, fp
16fd4     40 4E 85 F1 | 	sub	fp, #64
16fd8     84 40 B0 FD | 	call	#__system__emitsign_0322
16fdc     14 4F 05 F1 | 	add	fp, #276
16fe0     A7 FA 61 FC | 	wrlong	result1, fp
16fe4     14 4F 85 F1 | 	sub	fp, #276
16fe8     00 FA 55 F2 | 	cmps	result1, #0 wc
16fec     14 4F 05 C1 |  if_b	add	fp, #276
16ff0     A7 FA 01 CB |  if_b	rdlong	result1, fp
16ff4     14 4F 85 C1 |  if_b	sub	fp, #276
16ff8     6C 0B 90 CD |  if_b	jmp	#LR__2253
16ffc     C0 4E 05 F1 | 	add	fp, #192
17000     A7 1E 02 FB | 	rdlong	local01, fp
17004     54 4E 05 F1 | 	add	fp, #84
17008     A7 26 02 FB | 	rdlong	local05, fp
1700c     13 23 02 F6 | 	mov	local03, local05
17010     13 1F 02 F1 | 	add	local01, local05
17014     54 4E 85 F1 | 	sub	fp, #84
17018     A7 1E 62 FC | 	wrlong	local01, fp
1701c     58 4E 85 F1 | 	sub	fp, #88
17020     A7 1E 0A FB | 	rdlong	local01, fp wz
17024     68 4E 85 F1 | 	sub	fp, #104
17028     60 00 90 AD |  if_e	jmp	#LR__2202
1702c     68 4E 05 F1 | 	add	fp, #104
17030     A7 1E 02 FB | 	rdlong	local01, fp
17034     AC 4E 05 F1 | 	add	fp, #172
17038     A7 22 02 FB | 	rdlong	local03, fp
1703c     11 1F 82 F1 | 	sub	local01, local03
17040     AC 4E 85 F1 | 	sub	fp, #172
17044     A7 1E 62 FC | 	wrlong	local01, fp
17048     68 4E 85 F1 | 	sub	fp, #104
1704c     00 1E 56 F2 | 	cmps	local01, #0 wc
17050     68 4E 05 C1 |  if_b	add	fp, #104
17054     A7 00 68 CC |  if_b	wrlong	#0, fp
17058     68 4E 85 C1 |  if_b	sub	fp, #104
1705c     08 4E 05 F1 | 	add	fp, #8
17060     A7 1E 02 FB | 	rdlong	local01, fp
17064     E8 1E 06 F4 | 	bitl	local01, #232
17068     A7 1E 62 FC | 	wrlong	local01, fp
1706c     60 4E 05 F1 | 	add	fp, #96
17070     A7 26 02 FB | 	rdlong	local05, fp
17074     13 23 02 F6 | 	mov	local03, local05
17078     08 22 66 F0 | 	shl	local03, #8
1707c     11 1F 42 F5 | 	or	local01, local03
17080     60 4E 85 F1 | 	sub	fp, #96
17084     A7 1E 62 FC | 	wrlong	local01, fp
17088     08 4E 85 F1 | 	sub	fp, #8
1708c                 | LR__2202
1708c     3C 4E 05 F1 | 	add	fp, #60
17090     A7 00 68 FC | 	wrlong	#0, fp
17094     3C 4E 85 F1 | 	sub	fp, #60
17098                 | LR__2203
17098     0C 4E 05 F1 | 	add	fp, #12
1709c     A7 12 02 FB | 	rdlong	arg01, fp
170a0     0C 4E 85 F1 | 	sub	fp, #12
170a4     D0 1D B0 FD | 	call	#__system____builtin_ilogb
170a8     FF FF 3F FF 
170ac     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
170b0     50 00 90 5D |  if_ne	jmp	#LR__2205
170b4     2C 4E 05 F1 | 	add	fp, #44
170b8     A7 1E 0A FB | 	rdlong	local01, fp wz
170bc     2C 4E 85 F1 | 	sub	fp, #44
170c0     24 00 90 AD |  if_e	jmp	#LR__2204
170c4     C0 4E 05 F1 | 	add	fp, #192
170c8     A7 20 02 FB | 	rdlong	local02, fp
170cc     10 23 02 F6 | 	mov	local03, local02
170d0     01 22 06 F1 | 	add	local03, #1
170d4     A7 22 62 FC | 	wrlong	local03, fp
170d8     94 4E 85 F1 | 	sub	fp, #148
170dc     A7 24 02 FB | 	rdlong	local04, fp
170e0     2C 4E 85 F1 | 	sub	fp, #44
170e4     10 25 42 FC | 	wrbyte	local04, local02
170e8                 | LR__2204
170e8     C0 4E 05 F1 | 	add	fp, #192
170ec     A7 12 02 FB | 	rdlong	arg01, fp
170f0     C0 4E 85 F1 | 	sub	fp, #192
170f4     26 01 00 FF 
170f8     32 15 06 F6 | 	mov	arg02, ##@LR__4111
170fc     18 EA BF FD | 	call	#__system____builtin_strcpy
17100     A4 08 90 FD | 	jmp	#LR__2241
17104                 | LR__2205
17104     0C 4E 05 F1 | 	add	fp, #12
17108     A7 20 02 FB | 	rdlong	local02, fp
1710c     0C 4E 85 F1 | 	sub	fp, #12
17110     10 13 02 F6 | 	mov	arg01, local02
17114     60 1D B0 FD | 	call	#__system____builtin_ilogb
17118     00 00 40 FF 
1711c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
17120     50 00 90 5D |  if_ne	jmp	#LR__2207
17124     2C 4E 05 F1 | 	add	fp, #44
17128     A7 1E 0A FB | 	rdlong	local01, fp wz
1712c     2C 4E 85 F1 | 	sub	fp, #44
17130     24 00 90 AD |  if_e	jmp	#LR__2206
17134     C0 4E 05 F1 | 	add	fp, #192
17138     A7 20 02 FB | 	rdlong	local02, fp
1713c     10 23 02 F6 | 	mov	local03, local02
17140     01 22 06 F1 | 	add	local03, #1
17144     A7 22 62 FC | 	wrlong	local03, fp
17148     94 4E 85 F1 | 	sub	fp, #148
1714c     A7 24 02 FB | 	rdlong	local04, fp
17150     2C 4E 85 F1 | 	sub	fp, #44
17154     10 25 42 FC | 	wrbyte	local04, local02
17158                 | LR__2206
17158     C0 4E 05 F1 | 	add	fp, #192
1715c     A7 12 02 FB | 	rdlong	arg01, fp
17160     C0 4E 85 F1 | 	sub	fp, #192
17164     26 01 00 FF 
17168     36 15 06 F6 | 	mov	arg02, ##@LR__4112
1716c     A8 E9 BF FD | 	call	#__system____builtin_strcpy
17170     34 08 90 FD | 	jmp	#LR__2241
17174                 | LR__2207
17174     10 4E 05 F1 | 	add	fp, #16
17178     A7 1E 02 FB | 	rdlong	local01, fp
1717c     10 4E 85 F1 | 	sub	fp, #16
17180     67 1E 0E F2 | 	cmp	local01, #103 wz
17184     10 4E 05 51 |  if_ne	add	fp, #16
17188     A7 22 02 5B |  if_ne	rdlong	local03, fp
1718c     10 4E 85 51 |  if_ne	sub	fp, #16
17190     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
17194     94 01 90 5D |  if_ne	jmp	#LR__2212
17198     0C 4E 05 F1 | 	add	fp, #12
1719c     A7 12 02 FB | 	rdlong	arg01, fp
171a0     08 4E 05 F1 | 	add	fp, #8
171a4     A7 14 02 F6 | 	mov	arg02, fp
171a8     0C 4E 05 F1 | 	add	fp, #12
171ac     A7 16 02 F6 | 	mov	arg03, fp
171b0     98 4E 05 F1 | 	add	fp, #152
171b4     A7 18 02 FB | 	rdlong	arg04, fp
171b8     9C 4E 85 F1 | 	sub	fp, #156
171bc     A7 1A 02 FB | 	rdlong	arg05, fp
171c0     1C 4E 85 F1 | 	sub	fp, #28
171c4     A4 3C B0 FD | 	call	#__system__disassemble_0320
171c8     10 4E 05 F1 | 	add	fp, #16
171cc     A7 1E 02 FB | 	rdlong	local01, fp
171d0     10 4E 85 F1 | 	sub	fp, #16
171d4     23 1E 0E F2 | 	cmp	local01, #35 wz
171d8     A0 00 90 5D |  if_ne	jmp	#LR__2209
171dc     20 4E 05 F1 | 	add	fp, #32
171e0     A7 1E 02 FB | 	rdlong	local01, fp
171e4     98 4E 05 F1 | 	add	fp, #152
171e8     A7 22 02 FB | 	rdlong	local03, fp
171ec     B8 4E 85 F1 | 	sub	fp, #184
171f0     11 1F 5A F2 | 	cmps	local01, local03 wcz
171f4     24 4E 05 11 |  if_a	add	fp, #36
171f8     A7 02 68 1C |  if_a	wrlong	#1, fp
171fc     24 4E 85 11 |  if_a	sub	fp, #36
17200     A4 01 90 1D |  if_a	jmp	#LR__2215
17204     20 4E 05 F1 | 	add	fp, #32
17208     A7 1E 02 FB | 	rdlong	local01, fp
1720c     20 4E 85 F1 | 	sub	fp, #32
17210     00 1E 56 F2 | 	cmps	local01, #0 wc
17214     2C 00 90 3D |  if_ae	jmp	#LR__2208
17218     B8 4E 05 F1 | 	add	fp, #184
1721c     A7 1E 02 FB | 	rdlong	local01, fp
17220     0F 1F 62 F6 | 	neg	local01, local01
17224     98 4E 85 F1 | 	sub	fp, #152
17228     A7 22 02 FB | 	rdlong	local03, fp
1722c     20 4E 85 F1 | 	sub	fp, #32
17230     0F 23 5A F2 | 	cmps	local03, local01 wcz
17234     24 4E 05 E1 |  if_be	add	fp, #36
17238     A7 02 68 EC |  if_be	wrlong	#1, fp
1723c     24 4E 85 E1 |  if_be	sub	fp, #36
17240     64 01 90 FD | 	jmp	#LR__2215
17244                 | LR__2208
17244     20 4E 05 F1 | 	add	fp, #32
17248     A7 1E 02 FB | 	rdlong	local01, fp
1724c     20 4E 85 F1 | 	sub	fp, #32
17250     01 1E 56 F2 | 	cmps	local01, #1 wc
17254     50 01 90 CD |  if_b	jmp	#LR__2215
17258     B8 4E 05 F1 | 	add	fp, #184
1725c     A7 1E 02 FB | 	rdlong	local01, fp
17260     98 4E 85 F1 | 	sub	fp, #152
17264     A7 22 02 FB | 	rdlong	local03, fp
17268     11 1F 82 F1 | 	sub	local01, local03
1726c     98 4E 05 F1 | 	add	fp, #152
17270     A7 1E 62 FC | 	wrlong	local01, fp
17274     B8 4E 85 F1 | 	sub	fp, #184
17278     2C 01 90 FD | 	jmp	#LR__2215
1727c                 | LR__2209
1727c     00 1E 06 F6 | 	mov	local01, #0
17280     08 4E 05 F1 | 	add	fp, #8
17284     A7 20 02 FB | 	rdlong	local02, fp
17288     1C 20 46 F0 | 	shr	local02, #28
1728c     01 20 0E F5 | 	and	local02, #1 wz
17290     01 1E 06 A6 |  if_e	mov	local01, #1
17294     2C 4E 05 F1 | 	add	fp, #44
17298     A7 1E 62 FC | 	wrlong	local01, fp
1729c     14 4E 85 F1 | 	sub	fp, #20
172a0     A7 1E 02 FB | 	rdlong	local01, fp
172a4     98 4E 05 F1 | 	add	fp, #152
172a8     A7 22 02 FB | 	rdlong	local03, fp
172ac     B8 4E 85 F1 | 	sub	fp, #184
172b0     11 1F 52 F2 | 	cmps	local01, local03 wc
172b4     18 00 90 3D |  if_ae	jmp	#LR__2210
172b8     20 4E 05 F1 | 	add	fp, #32
172bc     A7 24 02 FB | 	rdlong	local04, fp
172c0     20 4E 85 F1 | 	sub	fp, #32
172c4     FF FF 7F FF 
172c8     FC 25 56 F2 | 	cmps	local04, ##-4 wc
172cc     10 00 90 3D |  if_ae	jmp	#LR__2211
172d0                 | LR__2210
172d0     24 4E 05 F1 | 	add	fp, #36
172d4     A7 02 68 FC | 	wrlong	#1, fp
172d8     24 4E 85 F1 | 	sub	fp, #36
172dc     C8 00 90 FD | 	jmp	#LR__2215
172e0                 | LR__2211
172e0     B8 4E 05 F1 | 	add	fp, #184
172e4     A7 24 02 FB | 	rdlong	local04, fp
172e8     98 4E 85 F1 | 	sub	fp, #152
172ec     A7 22 02 FB | 	rdlong	local03, fp
172f0     11 25 82 F1 | 	sub	local04, local03
172f4     98 4E 05 F1 | 	add	fp, #152
172f8     A7 24 62 FC | 	wrlong	local04, fp
172fc     AC 4E 85 F1 | 	sub	fp, #172
17300     A7 12 02 FB | 	rdlong	arg01, fp
17304     08 4E 05 F1 | 	add	fp, #8
17308     A7 14 02 F6 | 	mov	arg02, fp
1730c     0C 4E 05 F1 | 	add	fp, #12
17310     A7 16 02 F6 | 	mov	arg03, fp
17314     12 19 62 F6 | 	neg	arg04, local04
17318     04 4E 85 F1 | 	sub	fp, #4
1731c     A7 1A 02 FB | 	rdlong	arg05, fp
17320     1C 4E 85 F1 | 	sub	fp, #28
17324     44 3B B0 FD | 	call	#__system__disassemble_0320
17328     7C 00 90 FD | 	jmp	#LR__2215
1732c                 | LR__2212
1732c     24 4E 05 F1 | 	add	fp, #36
17330     A7 1E 0A FB | 	rdlong	local01, fp wz
17334     24 4E 85 F1 | 	sub	fp, #36
17338     34 00 90 AD |  if_e	jmp	#LR__2213
1733c     0C 4E 05 F1 | 	add	fp, #12
17340     A7 12 02 FB | 	rdlong	arg01, fp
17344     08 4E 05 F1 | 	add	fp, #8
17348     A7 14 02 F6 | 	mov	arg02, fp
1734c     0C 4E 05 F1 | 	add	fp, #12
17350     A7 16 02 F6 | 	mov	arg03, fp
17354     98 4E 05 F1 | 	add	fp, #152
17358     A7 18 02 FB | 	rdlong	arg04, fp
1735c     9C 4E 85 F1 | 	sub	fp, #156
17360     A7 1A 02 FB | 	rdlong	arg05, fp
17364     1C 4E 85 F1 | 	sub	fp, #28
17368     00 3B B0 FD | 	call	#__system__disassemble_0320
1736c     38 00 90 FD | 	jmp	#LR__2214
17370                 | LR__2213
17370     0C 4E 05 F1 | 	add	fp, #12
17374     A7 12 02 FB | 	rdlong	arg01, fp
17378     08 4E 05 F1 | 	add	fp, #8
1737c     A7 14 02 F6 | 	mov	arg02, fp
17380     0C 4E 05 F1 | 	add	fp, #12
17384     A7 16 02 F6 | 	mov	arg03, fp
17388     98 4E 05 F1 | 	add	fp, #152
1738c     A7 24 02 FB | 	rdlong	local04, fp
17390     01 24 06 F1 | 	add	local04, #1
17394     12 19 62 F6 | 	neg	arg04, local04
17398     9C 4E 85 F1 | 	sub	fp, #156
1739c     A7 1A 02 FB | 	rdlong	arg05, fp
173a0     1C 4E 85 F1 | 	sub	fp, #28
173a4     C4 3A B0 FD | 	call	#__system__disassemble_0320
173a8                 | LR__2214
173a8                 | LR__2215
173a8     1C 4E 05 F1 | 	add	fp, #28
173ac     A7 1E 02 FB | 	rdlong	local01, fp
173b0     1C 4E 85 F1 | 	sub	fp, #28
173b4     02 1E 0E F2 | 	cmp	local01, #2 wz
173b8     4C 00 90 5D |  if_ne	jmp	#LR__2218
173bc     1C 4E 05 F1 | 	add	fp, #28
173c0     A7 20 68 FC | 	wrlong	#16, fp
173c4     1C 4E 85 F1 | 	sub	fp, #28
173c8                 | LR__2216
173c8     14 4E 05 F1 | 	add	fp, #20
173cc     A7 1E 0A FB | 	rdlong	local01, fp wz
173d0     14 4E 85 F1 | 	sub	fp, #20
173d4     30 00 90 AD |  if_e	jmp	#LR__2217
173d8     14 4E 05 F1 | 	add	fp, #20
173dc     A7 22 02 FB | 	rdlong	local03, fp
173e0     14 4E 85 F1 | 	sub	fp, #20
173e4     00 80 00 FF 
173e8     00 22 16 F2 | 	cmp	local03, ##16777216 wc
173ec     18 00 90 3D |  if_ae	jmp	#LR__2217
173f0     14 4E 05 F1 | 	add	fp, #20
173f4     A7 1E 02 FB | 	rdlong	local01, fp
173f8     01 1E 66 F0 | 	shl	local01, #1
173fc     A7 1E 62 FC | 	wrlong	local01, fp
17400     14 4E 85 F1 | 	sub	fp, #20
17404     C0 FF 9F FD | 	jmp	#LR__2216
17408                 | LR__2217
17408                 | LR__2218
17408     70 4E 05 F1 | 	add	fp, #112
1740c     A7 12 02 F6 | 	mov	arg01, fp
17410     5C 4E 85 F1 | 	sub	fp, #92
17414     A7 14 02 FB | 	rdlong	arg02, fp
17418     08 4E 05 F1 | 	add	fp, #8
1741c     A7 16 02 FB | 	rdlong	arg03, fp
17420     A0 4E 05 F1 | 	add	fp, #160
17424     A7 1A 02 FB | 	rdlong	arg05, fp
17428     BC 4E 85 F1 | 	sub	fp, #188
1742c     01 18 06 F6 | 	mov	arg04, #1
17430     C4 39 B0 FD | 	call	#__system___uitoa
17434     58 4E 05 F1 | 	add	fp, #88
17438     A7 FA 61 FC | 	wrlong	result1, fp
1743c     38 4E 85 F1 | 	sub	fp, #56
17440     A7 1E 02 FB | 	rdlong	local01, fp
17444     20 4E 85 F1 | 	sub	fp, #32
17448     00 1E 56 F2 | 	cmps	local01, #0 wc
1744c     50 00 90 3D |  if_ae	jmp	#LR__2219
17450     60 4E 05 F1 | 	add	fp, #96
17454     A7 5A 68 FC | 	wrlong	#45, fp
17458     50 4E 05 F1 | 	add	fp, #80
1745c     A7 12 02 F6 | 	mov	arg01, fp
17460     90 4E 85 F1 | 	sub	fp, #144
17464     A7 22 02 FB | 	rdlong	local03, fp
17468     11 15 62 F6 | 	neg	arg02, local03
1746c     18 4E 05 F1 | 	add	fp, #24
17470     A7 18 02 FB | 	rdlong	arg04, fp
17474     84 4E 05 F1 | 	add	fp, #132
17478     A7 28 02 FB | 	rdlong	local06, fp
1747c     BC 4E 85 F1 | 	sub	fp, #188
17480     14 25 02 F6 | 	mov	local04, local06
17484     0A 16 06 F6 | 	mov	arg03, #10
17488     12 1B 02 F6 | 	mov	arg05, local04
1748c     68 39 B0 FD | 	call	#__system___uitoa
17490     5C 4E 05 F1 | 	add	fp, #92
17494     A7 FA 61 FC | 	wrlong	result1, fp
17498     5C 4E 85 F1 | 	sub	fp, #92
1749c     48 00 90 FD | 	jmp	#LR__2220
174a0                 | LR__2219
174a0     60 4E 05 F1 | 	add	fp, #96
174a4     A7 56 68 FC | 	wrlong	#43, fp
174a8     50 4E 05 F1 | 	add	fp, #80
174ac     A7 12 02 F6 | 	mov	arg01, fp
174b0     90 4E 85 F1 | 	sub	fp, #144
174b4     A7 14 02 FB | 	rdlong	arg02, fp
174b8     18 4E 05 F1 | 	add	fp, #24
174bc     A7 18 02 FB | 	rdlong	arg04, fp
174c0     84 4E 05 F1 | 	add	fp, #132
174c4     A7 28 02 FB | 	rdlong	local06, fp
174c8     BC 4E 85 F1 | 	sub	fp, #188
174cc     14 25 02 F6 | 	mov	local04, local06
174d0     0A 16 06 F6 | 	mov	arg03, #10
174d4     12 1B 02 F6 | 	mov	arg05, local04
174d8     1C 39 B0 FD | 	call	#__system___uitoa
174dc     5C 4E 05 F1 | 	add	fp, #92
174e0     A7 FA 61 FC | 	wrlong	result1, fp
174e4     5C 4E 85 F1 | 	sub	fp, #92
174e8                 | LR__2220
174e8     24 4E 05 F1 | 	add	fp, #36
174ec     A7 1E 0A FB | 	rdlong	local01, fp wz
174f0     24 4E 85 F1 | 	sub	fp, #36
174f4     2C 00 90 AD |  if_e	jmp	#LR__2221
174f8     50 4E 05 F1 | 	add	fp, #80
174fc     A7 00 68 FC | 	wrlong	#0, fp
17500     04 4E 85 F1 | 	sub	fp, #4
17504     A7 00 68 FC | 	wrlong	#0, fp
17508     6C 4E 05 F1 | 	add	fp, #108
1750c     A7 1E 02 FB | 	rdlong	local01, fp
17510     01 1E 06 F1 | 	add	local01, #1
17514     64 4E 85 F1 | 	sub	fp, #100
17518     A7 1E 62 FC | 	wrlong	local01, fp
1751c     54 4E 85 F1 | 	sub	fp, #84
17520     88 00 90 FD | 	jmp	#LR__2224
17524                 | LR__2221
17524     20 4E 05 F1 | 	add	fp, #32
17528     A7 1E 02 FB | 	rdlong	local01, fp
1752c     20 4E 85 F1 | 	sub	fp, #32
17530     00 1E 56 F2 | 	cmps	local01, #0 wc
17534     40 00 90 3D |  if_ae	jmp	#LR__2222
17538     20 4E 05 F1 | 	add	fp, #32
1753c     A7 20 02 FB | 	rdlong	local02, fp
17540     30 4E 05 F1 | 	add	fp, #48
17544     A7 20 62 FC | 	wrlong	local02, fp
17548     04 4E 85 F1 | 	sub	fp, #4
1754c     A7 20 62 FC | 	wrlong	local02, fp
17550     2C 4E 85 F1 | 	sub	fp, #44
17554     A7 1E 02 FB | 	rdlong	local01, fp
17558     98 4E 05 F1 | 	add	fp, #152
1755c     A7 22 02 FB | 	rdlong	local03, fp
17560     11 1F 02 F1 | 	add	local01, local03
17564     01 1E 06 F1 | 	add	local01, #1
17568     64 4E 85 F1 | 	sub	fp, #100
1756c     A7 1E 62 FC | 	wrlong	local01, fp
17570     54 4E 85 F1 | 	sub	fp, #84
17574     34 00 90 FD | 	jmp	#LR__2223
17578                 | LR__2222
17578     4C 4E 05 F1 | 	add	fp, #76
1757c     A7 00 68 FC | 	wrlong	#0, fp
17580     2C 4E 85 F1 | 	sub	fp, #44
17584     A7 1E 02 FB | 	rdlong	local01, fp
17588     30 4E 05 F1 | 	add	fp, #48
1758c     A7 1E 62 FC | 	wrlong	local01, fp
17590     68 4E 05 F1 | 	add	fp, #104
17594     A7 22 02 FB | 	rdlong	local03, fp
17598     11 1F 02 F1 | 	add	local01, local03
1759c     01 1E 06 F1 | 	add	local01, #1
175a0     64 4E 85 F1 | 	sub	fp, #100
175a4     A7 1E 62 FC | 	wrlong	local01, fp
175a8     54 4E 85 F1 | 	sub	fp, #84
175ac                 | LR__2223
175ac                 | LR__2224
175ac     54 4E 05 F1 | 	add	fp, #84
175b0     A7 1E 02 FB | 	rdlong	local01, fp
175b4     08 4E 85 F1 | 	sub	fp, #8
175b8     A7 22 02 FB | 	rdlong	local03, fp
175bc     11 1F 82 F1 | 	sub	local01, local03
175c0     01 1E 06 F1 | 	add	local01, #1
175c4     24 4E 85 F1 | 	sub	fp, #36
175c8     A7 1E 62 FC | 	wrlong	local01, fp
175cc     04 4E 05 F1 | 	add	fp, #4
175d0     A7 1E 0A FB | 	rdlong	local01, fp wz
175d4     2C 4E 85 F1 | 	sub	fp, #44
175d8     28 4E 05 51 |  if_ne	add	fp, #40
175dc     A7 22 02 5B |  if_ne	rdlong	local03, fp
175e0     01 22 06 51 |  if_ne	add	local03, #1
175e4     A7 22 62 5C |  if_ne	wrlong	local03, fp
175e8     28 4E 85 51 |  if_ne	sub	fp, #40
175ec     1C 4E 05 F1 | 	add	fp, #28
175f0     A7 1E 02 FB | 	rdlong	local01, fp
175f4     1C 4E 85 F1 | 	sub	fp, #28
175f8     10 1E 0E F2 | 	cmp	local01, #16 wz
175fc     28 4E 05 A1 |  if_e	add	fp, #40
17600     A7 1E 02 AB |  if_e	rdlong	local01, fp
17604     02 1E 06 A1 |  if_e	add	local01, #2
17608     A7 1E 62 AC |  if_e	wrlong	local01, fp
1760c     28 4E 85 A1 |  if_e	sub	fp, #40
17610     24 4E 05 F1 | 	add	fp, #36
17614     A7 1E 0A FB | 	rdlong	local01, fp wz
17618     24 4E 85 F1 | 	sub	fp, #36
1761c     28 00 90 AD |  if_e	jmp	#LR__2225
17620     28 4E 05 F1 | 	add	fp, #40
17624     A7 1E 02 FB | 	rdlong	local01, fp
17628     02 22 06 F6 | 	mov	local03, #2
1762c     34 4E 05 F1 | 	add	fp, #52
17630     A7 26 02 FB | 	rdlong	local05, fp
17634     13 23 02 F1 | 	add	local03, local05
17638     11 1F 02 F1 | 	add	local01, local03
1763c     34 4E 85 F1 | 	sub	fp, #52
17640     A7 1E 62 FC | 	wrlong	local01, fp
17644     28 4E 85 F1 | 	sub	fp, #40
17648                 | LR__2225
17648     28 4E 05 F1 | 	add	fp, #40
1764c     A7 1E 02 FB | 	rdlong	local01, fp
17650     28 4E 85 F1 | 	sub	fp, #40
17654     41 1E 56 F2 | 	cmps	local01, #65 wc
17658     01 FA 65 36 |  if_ae	neg	result1, #1
1765c     08 05 90 3D |  if_ae	jmp	#LR__2253
17660     3C 4E 05 F1 | 	add	fp, #60
17664     A7 1E 0A FB | 	rdlong	local01, fp wz
17668     3C 4E 85 F1 | 	sub	fp, #60
1766c     60 00 90 AD |  if_e	jmp	#LR__2226
17670     C0 4E 05 F1 | 	add	fp, #192
17674     A7 12 02 FB | 	rdlong	arg01, fp
17678     94 4E 85 F1 | 	sub	fp, #148
1767c     A7 14 02 FB | 	rdlong	arg02, fp
17680     14 4E 05 F1 | 	add	fp, #20
17684     A7 16 02 FB | 	rdlong	arg03, fp
17688     40 4E 85 F1 | 	sub	fp, #64
1768c     D0 39 B0 FD | 	call	#__system__emitsign_0322
17690     18 4F 05 F1 | 	add	fp, #280
17694     A7 FA 61 FC | 	wrlong	result1, fp
17698     18 4F 85 F1 | 	sub	fp, #280
1769c     00 FA 55 F2 | 	cmps	result1, #0 wc
176a0     18 4F 05 C1 |  if_b	add	fp, #280
176a4     A7 FA 01 CB |  if_b	rdlong	result1, fp
176a8     18 4F 85 C1 |  if_b	sub	fp, #280
176ac     B8 04 90 CD |  if_b	jmp	#LR__2253
176b0     C0 4E 05 F1 | 	add	fp, #192
176b4     A7 1E 02 FB | 	rdlong	local01, fp
176b8     58 4E 05 F1 | 	add	fp, #88
176bc     A7 22 02 FB | 	rdlong	local03, fp
176c0     11 1F 02 F1 | 	add	local01, local03
176c4     58 4E 85 F1 | 	sub	fp, #88
176c8     A7 1E 62 FC | 	wrlong	local01, fp
176cc     C0 4E 85 F1 | 	sub	fp, #192
176d0                 | LR__2226
176d0     4C 4E 05 F1 | 	add	fp, #76
176d4     A7 1E 02 FB | 	rdlong	local01, fp
176d8     34 4E 85 F1 | 	sub	fp, #52
176dc     A7 1E 62 FC | 	wrlong	local01, fp
176e0     18 4E 85 F1 | 	sub	fp, #24
176e4     97 9E 48 FB | 	callpa	#(@LR__2232-@LR__2227)>>2,fcache_load_ptr_
176e8                 | LR__2227
176e8     18 4E 05 F1 | 	add	fp, #24
176ec     A7 20 02 FB | 	rdlong	local02, fp
176f0     3C 4E 05 F1 | 	add	fp, #60
176f4     A7 26 02 FB | 	rdlong	local05, fp
176f8     54 4E 85 F1 | 	sub	fp, #84
176fc     13 21 52 F2 | 	cmps	local02, local05 wc
17700     20 01 90 3D |  if_ae	jmp	#LR__2233
17704     18 4E 05 F1 | 	add	fp, #24
17708     A7 28 02 FB | 	rdlong	local06, fp
1770c     18 4E 85 F1 | 	sub	fp, #24
17710     00 28 56 F2 | 	cmps	local06, #0 wc
17714     58 00 90 CD |  if_b	jmp	#LR__2228
17718     18 4E 05 F1 | 	add	fp, #24
1771c     A7 28 02 FB | 	rdlong	local06, fp
17720     40 4E 05 F1 | 	add	fp, #64
17724     A7 2A 02 FB | 	rdlong	local07, fp
17728     58 4E 85 F1 | 	sub	fp, #88
1772c     15 29 52 F2 | 	cmps	local06, local07 wc
17730     3C 00 90 3D |  if_ae	jmp	#LR__2228
17734     C0 4E 05 F1 | 	add	fp, #192
17738     A7 2C 02 FB | 	rdlong	local08, fp
1773c     16 2B 02 F6 | 	mov	local07, local08
17740     01 2A 06 F1 | 	add	local07, #1
17744     A7 2A 62 FC | 	wrlong	local07, fp
17748     A8 4E 85 F1 | 	sub	fp, #168
1774c     A7 2A 02 FB | 	rdlong	local07, fp
17750     15 2F 02 F6 | 	mov	local09, local07
17754     58 4E 05 F1 | 	add	fp, #88
17758     A7 30 02 F6 | 	mov	local10, fp
1775c     A7 2E 02 F1 | 	add	local09, fp
17760     17 33 C2 FA | 	rdbyte	local11, local09
17764     16 33 42 FC | 	wrbyte	local11, local08
17768     70 4E 85 F1 | 	sub	fp, #112
1776c     20 00 90 FD | 	jmp	#LR__2229
17770                 | LR__2228
17770     C0 4E 05 F1 | 	add	fp, #192
17774     A7 2C 02 FB | 	rdlong	local08, fp
17778     16 2F 02 F6 | 	mov	local09, local08
1777c     01 2E 06 F1 | 	add	local09, #1
17780     A7 2E 62 FC | 	wrlong	local09, fp
17784     C0 4E 85 F1 | 	sub	fp, #192
17788     30 2E 06 F6 | 	mov	local09, #48
1778c     16 61 48 FC | 	wrbyte	#48, local08
17790                 | LR__2229
17790     18 4E 05 F1 | 	add	fp, #24
17794     A7 28 02 FB | 	rdlong	local06, fp
17798     38 4E 05 F1 | 	add	fp, #56
1779c     A7 34 02 FB | 	rdlong	local12, fp
177a0     50 4E 85 F1 | 	sub	fp, #80
177a4     1A 29 0A F2 | 	cmp	local06, local12 wz
177a8     5C 00 90 5D |  if_ne	jmp	#LR__2231
177ac     10 4F 05 F1 | 	add	fp, #272
177b0     A7 2A 02 FB | 	rdlong	local07, fp
177b4     10 4F 85 F1 | 	sub	fp, #272
177b8     15 2F 0A F6 | 	mov	local09, local07 wz
177bc     28 00 90 5D |  if_ne	jmp	#LR__2230
177c0     54 4E 05 F1 | 	add	fp, #84
177c4     A7 32 02 FB | 	rdlong	local11, fp
177c8     19 31 02 F6 | 	mov	local10, local11
177cc     01 30 86 F1 | 	sub	local10, #1
177d0     3C 4E 85 F1 | 	sub	fp, #60
177d4     A7 36 02 FB | 	rdlong	local13, fp
177d8     18 4E 85 F1 | 	sub	fp, #24
177dc     1B 39 02 F6 | 	mov	local14, local13
177e0     18 39 52 F2 | 	cmps	local14, local10 wc
177e4     20 00 90 3D |  if_ae	jmp	#LR__2231
177e8                 | LR__2230
177e8     C0 4E 05 F1 | 	add	fp, #192
177ec     A7 2C 02 FB | 	rdlong	local08, fp
177f0     16 35 02 F6 | 	mov	local12, local08
177f4     01 34 06 F1 | 	add	local12, #1
177f8     A7 34 62 FC | 	wrlong	local12, fp
177fc     C0 4E 85 F1 | 	sub	fp, #192
17800     2E 2E 06 F6 | 	mov	local09, #46
17804     16 5D 48 FC | 	wrbyte	#46, local08
17808                 | LR__2231
17808     18 4E 05 F1 | 	add	fp, #24
1780c     A7 3A 02 FB | 	rdlong	local15, fp
17810     1D 35 02 F6 | 	mov	local12, local15
17814     01 34 06 F1 | 	add	local12, #1
17818     A7 34 62 FC | 	wrlong	local12, fp
1781c     18 4E 85 F1 | 	sub	fp, #24
17820     C4 FE 9F FD | 	jmp	#LR__2227
17824                 | LR__2232
17824                 | LR__2233
17824     34 4E 05 F1 | 	add	fp, #52
17828     A7 1E 0A FB | 	rdlong	local01, fp wz
1782c     34 4E 85 F1 | 	sub	fp, #52
17830     A0 00 90 AD |  if_e	jmp	#LR__2237
17834     C0 4E 05 F1 | 	add	fp, #192
17838     A7 1E 02 FB | 	rdlong	local01, fp
1783c     01 1E 86 F1 | 	sub	local01, #1
17840     A7 1E 62 FC | 	wrlong	local01, fp
17844     C0 4E 85 F1 | 	sub	fp, #192
17848     97 26 48 FB | 	callpa	#(@LR__2235-@LR__2234)>>2,fcache_load_ptr_
1784c                 | LR__2234
1784c     C0 4E 05 F1 | 	add	fp, #192
17850     A7 1E 02 FB | 	rdlong	local01, fp
17854     04 4E 05 F1 | 	add	fp, #4
17858     A7 22 02 FB | 	rdlong	local03, fp
1785c     C4 4E 85 F1 | 	sub	fp, #196
17860     11 1F 5A F2 | 	cmps	local01, local03 wcz
17864     30 00 90 ED |  if_be	jmp	#LR__2236
17868     C0 4E 05 F1 | 	add	fp, #192
1786c     A7 28 02 FB | 	rdlong	local06, fp
17870     C0 4E 85 F1 | 	sub	fp, #192
17874     14 25 C2 FA | 	rdbyte	local04, local06
17878     30 24 0E F2 | 	cmp	local04, #48 wz
1787c     18 00 90 5D |  if_ne	jmp	#LR__2236
17880     C0 4E 05 F1 | 	add	fp, #192
17884     A7 1E 02 FB | 	rdlong	local01, fp
17888     01 1E 86 F1 | 	sub	local01, #1
1788c     A7 1E 62 FC | 	wrlong	local01, fp
17890     C0 4E 85 F1 | 	sub	fp, #192
17894     B4 FF 9F FD | 	jmp	#LR__2234
17898                 | LR__2235
17898                 | LR__2236
17898     C0 4E 05 F1 | 	add	fp, #192
1789c     A7 20 02 FB | 	rdlong	local02, fp
178a0     C0 4E 85 F1 | 	sub	fp, #192
178a4     10 1F C2 FA | 	rdbyte	local01, local02
178a8     2E 1E 0E F2 | 	cmp	local01, #46 wz
178ac     C0 4E 05 A1 |  if_e	add	fp, #192
178b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
178b4     01 1E 86 A1 |  if_e	sub	local01, #1
178b8     A7 1E 62 AC |  if_e	wrlong	local01, fp
178bc     C0 4E 85 A1 |  if_e	sub	fp, #192
178c0     C0 4E 05 F1 | 	add	fp, #192
178c4     A7 22 02 FB | 	rdlong	local03, fp
178c8     01 22 06 F1 | 	add	local03, #1
178cc     A7 22 62 FC | 	wrlong	local03, fp
178d0     C0 4E 85 F1 | 	sub	fp, #192
178d4                 | LR__2237
178d4     24 4E 05 F1 | 	add	fp, #36
178d8     A7 1E 0A FB | 	rdlong	local01, fp wz
178dc     24 4E 85 F1 | 	sub	fp, #36
178e0     B4 00 90 AD |  if_e	jmp	#LR__2240
178e4     C0 4E 05 F1 | 	add	fp, #192
178e8     A7 20 02 FB | 	rdlong	local02, fp
178ec     10 23 02 F6 | 	mov	local03, local02
178f0     01 22 06 F1 | 	add	local03, #1
178f4     A7 22 62 FC | 	wrlong	local03, fp
178f8     90 4E 85 F1 | 	sub	fp, #144
178fc     A7 24 02 FB | 	rdlong	local04, fp
17900     10 25 42 FC | 	wrbyte	local04, local02
17904     90 4E 05 F1 | 	add	fp, #144
17908     A7 20 02 FB | 	rdlong	local02, fp
1790c     10 23 02 F6 | 	mov	local03, local02
17910     01 22 06 F1 | 	add	local03, #1
17914     A7 22 62 FC | 	wrlong	local03, fp
17918     60 4E 85 F1 | 	sub	fp, #96
1791c     A7 24 02 FB | 	rdlong	local04, fp
17920     10 25 42 FC | 	wrbyte	local04, local02
17924     48 4E 85 F1 | 	sub	fp, #72
17928     A7 00 68 FC | 	wrlong	#0, fp
1792c     18 4E 85 F1 | 	sub	fp, #24
17930                 | LR__2238
17930     18 4E 05 F1 | 	add	fp, #24
17934     A7 20 02 FB | 	rdlong	local02, fp
17938     44 4E 05 F1 | 	add	fp, #68
1793c     A7 26 02 FB | 	rdlong	local05, fp
17940     5C 4E 85 F1 | 	sub	fp, #92
17944     13 21 52 F2 | 	cmps	local02, local05 wc
17948     4C 00 90 3D |  if_ae	jmp	#LR__2239
1794c     C0 4E 05 F1 | 	add	fp, #192
17950     A7 2C 02 FB | 	rdlong	local08, fp
17954     16 35 02 F6 | 	mov	local12, local08
17958     01 34 06 F1 | 	add	local12, #1
1795c     A7 34 62 FC | 	wrlong	local12, fp
17960     A8 4E 85 F1 | 	sub	fp, #168
17964     A7 2A 02 FB | 	rdlong	local07, fp
17968     15 2F 02 F6 | 	mov	local09, local07
1796c     98 4E 05 F1 | 	add	fp, #152
17970     A7 30 02 F6 | 	mov	local10, fp
17974     A7 2E 02 F1 | 	add	local09, fp
17978     17 33 C2 FA | 	rdbyte	local11, local09
1797c     16 33 42 FC | 	wrbyte	local11, local08
17980     98 4E 85 F1 | 	sub	fp, #152
17984     A7 34 02 FB | 	rdlong	local12, fp
17988     01 34 06 F1 | 	add	local12, #1
1798c     A7 34 62 FC | 	wrlong	local12, fp
17990     18 4E 85 F1 | 	sub	fp, #24
17994     98 FF 9F FD | 	jmp	#LR__2238
17998                 | LR__2239
17998                 | LR__2240
17998     C0 4E 05 F1 | 	add	fp, #192
1799c     A7 1E 02 FB | 	rdlong	local01, fp
179a0     C0 4E 85 F1 | 	sub	fp, #192
179a4     0F 01 48 FC | 	wrbyte	#0, local01
179a8                 | LR__2241
179a8     6C 4E 05 F1 | 	add	fp, #108
179ac     A7 1E 0A FB | 	rdlong	local01, fp wz
179b0     6C 4E 85 F1 | 	sub	fp, #108
179b4     90 01 90 AD |  if_e	jmp	#LR__2252
179b8     48 4E 05 F1 | 	add	fp, #72
179bc     A7 22 0A FB | 	rdlong	local03, fp wz
179c0     48 4E 85 F1 | 	sub	fp, #72
179c4     80 01 90 AD |  if_e	jmp	#LR__2252
179c8     C4 4E 05 F1 | 	add	fp, #196
179cc     A7 12 02 FB | 	rdlong	arg01, fp
179d0     C4 4E 85 F1 | 	sub	fp, #196
179d4     09 3D 02 F6 | 	mov	local16, arg01
179d8     97 06 48 FB | 	callpa	#(@LR__2243-@LR__2242)>>2,fcache_load_ptr_
179dc                 | LR__2242
179dc     1E FB C9 FA | 	rdbyte	result1, local16 wz
179e0     01 3C 06 51 |  if_ne	add	local16, #1
179e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2242
179e8                 | LR__2243
179e8     09 3D 82 F1 | 	sub	local16, arg01
179ec     1E 25 02 F6 | 	mov	local04, local16
179f0     6C 4E 05 F1 | 	add	fp, #108
179f4     A7 28 02 FB | 	rdlong	local06, fp
179f8     6C 4E 85 F1 | 	sub	fp, #108
179fc     14 25 5A F2 | 	cmps	local04, local06 wcz
17a00     44 01 90 ED |  if_be	jmp	#LR__2252
17a04     C4 4E 05 F1 | 	add	fp, #196
17a08     A7 1E 02 FB | 	rdlong	local01, fp
17a0c     5C 4E 05 F1 | 	add	fp, #92
17a10     A7 1E 62 FC | 	wrlong	local01, fp
17a14     FC 4E 85 F1 | 	sub	fp, #252
17a18     A7 1E 0A FB | 	rdlong	local01, fp wz
17a1c     24 4E 85 F1 | 	sub	fp, #36
17a20     20 00 90 AD |  if_e	jmp	#LR__2244
17a24     B8 4E 05 F1 | 	add	fp, #184
17a28     A7 00 68 FC | 	wrlong	#0, fp
17a2c     4C 4E 85 F1 | 	sub	fp, #76
17a30     A7 1E 02 FB | 	rdlong	local01, fp
17a34     B0 4E 05 F1 | 	add	fp, #176
17a38     A7 1E 62 FC | 	wrlong	local01, fp
17a3c     1C 4F 85 F1 | 	sub	fp, #284
17a40     24 00 90 FD | 	jmp	#LR__2245
17a44                 | LR__2244
17a44     6C 4E 05 F1 | 	add	fp, #108
17a48     A7 1E 02 FB | 	rdlong	local01, fp
17a4c     01 1E 86 F1 | 	sub	local01, #1
17a50     4C 4E 05 F1 | 	add	fp, #76
17a54     A7 22 02 FB | 	rdlong	local03, fp
17a58     11 1F 82 F1 | 	sub	local01, local03
17a5c     64 4E 05 F1 | 	add	fp, #100
17a60     A7 1E 62 FC | 	wrlong	local01, fp
17a64     1C 4F 85 F1 | 	sub	fp, #284
17a68                 | LR__2245
17a68     97 20 48 FB | 	callpa	#(@LR__2247-@LR__2246)>>2,fcache_load_ptr_
17a6c                 | LR__2246
17a6c     1C 4F 05 F1 | 	add	fp, #284
17a70     A7 1E 0A FB | 	rdlong	local01, fp wz
17a74     1C 4F 85 F1 | 	sub	fp, #284
17a78     30 00 90 AD |  if_e	jmp	#LR__2248
17a7c     20 4F 05 F1 | 	add	fp, #288
17a80     A7 20 02 FB | 	rdlong	local02, fp
17a84     10 23 02 F6 | 	mov	local03, local02
17a88     01 22 06 F1 | 	add	local03, #1
17a8c     A7 22 62 FC | 	wrlong	local03, fp
17a90     10 55 48 FC | 	wrbyte	#42, local02
17a94     04 4E 85 F1 | 	sub	fp, #4
17a98     A7 1E 02 FB | 	rdlong	local01, fp
17a9c     01 1E 86 F1 | 	sub	local01, #1
17aa0     A7 1E 62 FC | 	wrlong	local01, fp
17aa4     1C 4F 85 F1 | 	sub	fp, #284
17aa8     C0 FF 9F FD | 	jmp	#LR__2246
17aac                 | LR__2247
17aac                 | LR__2248
17aac     B8 4E 05 F1 | 	add	fp, #184
17ab0     A7 1E 0A FB | 	rdlong	local01, fp wz
17ab4     B8 4E 85 F1 | 	sub	fp, #184
17ab8     70 00 90 AD |  if_e	jmp	#LR__2251
17abc     20 4F 05 F1 | 	add	fp, #288
17ac0     A7 20 02 FB | 	rdlong	local02, fp
17ac4     10 23 02 F6 | 	mov	local03, local02
17ac8     01 22 06 F1 | 	add	local03, #1
17acc     A7 22 62 FC | 	wrlong	local03, fp
17ad0     10 5D 48 FC | 	wrbyte	#46, local02
17ad4     04 4E 85 F1 | 	sub	fp, #4
17ad8     A7 00 68 FC | 	wrlong	#0, fp
17adc     1C 4F 85 F1 | 	sub	fp, #284
17ae0                 | LR__2249
17ae0     1C 4F 05 F1 | 	add	fp, #284
17ae4     A7 20 02 FB | 	rdlong	local02, fp
17ae8     64 4E 85 F1 | 	sub	fp, #100
17aec     A7 26 02 FB | 	rdlong	local05, fp
17af0     B8 4E 85 F1 | 	sub	fp, #184
17af4     13 21 52 F2 | 	cmps	local02, local05 wc
17af8     30 00 90 3D |  if_ae	jmp	#LR__2250
17afc     20 4F 05 F1 | 	add	fp, #288
17b00     A7 2C 02 FB | 	rdlong	local08, fp
17b04     16 35 02 F6 | 	mov	local12, local08
17b08     01 34 06 F1 | 	add	local12, #1
17b0c     A7 34 62 FC | 	wrlong	local12, fp
17b10     16 55 48 FC | 	wrbyte	#42, local08
17b14     04 4E 85 F1 | 	sub	fp, #4
17b18     A7 34 02 FB | 	rdlong	local12, fp
17b1c     01 34 06 F1 | 	add	local12, #1
17b20     A7 34 62 FC | 	wrlong	local12, fp
17b24     1C 4F 85 F1 | 	sub	fp, #284
17b28     B4 FF 9F FD | 	jmp	#LR__2249
17b2c                 | LR__2250
17b2c                 | LR__2251
17b2c     20 4F 05 F1 | 	add	fp, #288
17b30     A7 20 02 FB | 	rdlong	local02, fp
17b34     10 23 02 F6 | 	mov	local03, local02
17b38     01 22 06 F1 | 	add	local03, #1
17b3c     A7 22 62 FC | 	wrlong	local03, fp
17b40     20 4F 85 F1 | 	sub	fp, #288
17b44     10 01 48 FC | 	wrbyte	#0, local02
17b48                 | LR__2252
17b48     04 4E 05 F1 | 	add	fp, #4
17b4c     A7 12 02 FB | 	rdlong	arg01, fp
17b50     04 4E 05 F1 | 	add	fp, #4
17b54     A7 14 02 FB | 	rdlong	arg02, fp
17b58     BC 4E 05 F1 | 	add	fp, #188
17b5c     A7 16 02 FB | 	rdlong	arg03, fp
17b60     C4 4E 85 F1 | 	sub	fp, #196
17b64     C4 EE BF FD | 	call	#__system___fmtstr
17b68                 | LR__2253
17b68     A7 F0 03 F6 | 	mov	ptra, fp
17b6c     B2 00 A0 FD | 	call	#popregs_
17b70                 | __system___fmtfloat_ret
17b70     2D 00 64 FD | 	ret
17b74                 | 
17b74                 | __system__Left_S
17b74     04 4A 05 F6 | 	mov	COUNT_, #4
17b78     A8 00 A0 FD | 	call	#pushregs_
17b7c     09 1F 02 F6 | 	mov	local01, arg01
17b80     0A 21 02 F6 | 	mov	local02, arg02
17b84     01 20 56 F2 | 	cmps	local02, #1 wc
17b88     26 01 00 CF 
17b8c     3A FB 05 C6 |  if_b	mov	result1, ##@LR__4113
17b90     5C 00 90 CD |  if_b	jmp	#LR__2263
17b94     0F 13 02 F6 | 	mov	arg01, local01
17b98     09 23 02 F6 | 	mov	local03, arg01
17b9c     97 06 48 FB | 	callpa	#(@LR__2261-@LR__2260)>>2,fcache_load_ptr_
17ba0                 | LR__2260
17ba0     11 FB C9 FA | 	rdbyte	result1, local03 wz
17ba4     01 22 06 51 |  if_ne	add	local03, #1
17ba8     F4 FF 9F 5D |  if_ne	jmp	#LR__2260
17bac                 | LR__2261
17bac     09 23 82 F1 | 	sub	local03, arg01
17bb0     11 FB 01 F6 | 	mov	result1, local03
17bb4     10 FB 59 F2 | 	cmps	result1, local02 wcz
17bb8     0F FB 01 E6 |  if_be	mov	result1, local01
17bbc     30 00 90 ED |  if_be	jmp	#LR__2263
17bc0     10 13 02 F6 | 	mov	arg01, local02
17bc4     02 12 06 F1 | 	add	arg01, #2
17bc8     00 1A B0 FD | 	call	#__system___gc_alloc_managed
17bcc     FD 24 0A F6 | 	mov	local04, result1 wz
17bd0     18 00 90 AD |  if_e	jmp	#LR__2262
17bd4     12 13 02 F6 | 	mov	arg01, local04
17bd8     0F 15 02 F6 | 	mov	arg02, local01
17bdc     10 17 02 F6 | 	mov	arg03, local02
17be0     A0 DE BF FD | 	call	#__system____builtin_memmove
17be4     12 21 02 F1 | 	add	local02, local04
17be8     10 01 48 FC | 	wrbyte	#0, local02
17bec                 | LR__2262
17bec     12 FB 01 F6 | 	mov	result1, local04
17bf0                 | LR__2263
17bf0     A7 F0 03 F6 | 	mov	ptra, fp
17bf4     B2 00 A0 FD | 	call	#popregs_
17bf8                 | __system__Left_S_ret
17bf8     2D 00 64 FD | 	ret
17bfc                 | 
17bfc                 | __system__Right_S
17bfc     05 4A 05 F6 | 	mov	COUNT_, #5
17c00     A8 00 A0 FD | 	call	#pushregs_
17c04     09 1F 02 F6 | 	mov	local01, arg01
17c08     0A 21 02 F6 | 	mov	local02, arg02
17c0c     01 20 56 F2 | 	cmps	local02, #1 wc
17c10     26 01 00 CF 
17c14     3B FB 05 C6 |  if_b	mov	result1, ##@LR__4114
17c18     64 00 90 CD |  if_b	jmp	#LR__2273
17c1c     0F 13 02 F6 | 	mov	arg01, local01
17c20     09 23 02 F6 | 	mov	local03, arg01
17c24     97 06 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
17c28                 | LR__2270
17c28     11 FB C9 FA | 	rdbyte	result1, local03 wz
17c2c     01 22 06 51 |  if_ne	add	local03, #1
17c30     F4 FF 9F 5D |  if_ne	jmp	#LR__2270
17c34                 | LR__2271
17c34     09 23 82 F1 | 	sub	local03, arg01
17c38     11 FB 01 F6 | 	mov	result1, local03
17c3c     FD 24 02 F6 | 	mov	local04, result1
17c40     10 25 5A F2 | 	cmps	local04, local02 wcz
17c44     0F FB 01 E6 |  if_be	mov	result1, local01
17c48     34 00 90 ED |  if_be	jmp	#LR__2273
17c4c     10 13 02 F6 | 	mov	arg01, local02
17c50     02 12 06 F1 | 	add	arg01, #2
17c54     74 19 B0 FD | 	call	#__system___gc_alloc_managed
17c58     FD 26 0A F6 | 	mov	local05, result1 wz
17c5c     1C 00 90 AD |  if_e	jmp	#LR__2272
17c60     10 25 82 F1 | 	sub	local04, local02
17c64     0F 25 02 F1 | 	add	local04, local01
17c68     01 20 06 F1 | 	add	local02, #1
17c6c     13 13 02 F6 | 	mov	arg01, local05
17c70     12 15 02 F6 | 	mov	arg02, local04
17c74     10 17 02 F6 | 	mov	arg03, local02
17c78     08 DE BF FD | 	call	#__system____builtin_memmove
17c7c                 | LR__2272
17c7c     13 FB 01 F6 | 	mov	result1, local05
17c80                 | LR__2273
17c80     A7 F0 03 F6 | 	mov	ptra, fp
17c84     B2 00 A0 FD | 	call	#popregs_
17c88                 | __system__Right_S_ret
17c88     2D 00 64 FD | 	ret
17c8c                 | 
17c8c                 | __system__Mid_S
17c8c     05 4A 05 F6 | 	mov	COUNT_, #5
17c90     A8 00 A0 FD | 	call	#pushregs_
17c94     09 1F 02 F6 | 	mov	local01, arg01
17c98     0A 21 02 F6 | 	mov	local02, arg02
17c9c     01 16 56 F2 | 	cmps	arg03, #1 wc
17ca0     26 01 00 CF 
17ca4     3C FB 05 C6 |  if_b	mov	result1, ##@LR__4115
17ca8     80 00 90 CD |  if_b	jmp	#LR__2283
17cac     01 20 86 F1 | 	sub	local02, #1
17cb0     00 20 56 F3 | 	fges	local02, #0 wc
17cb4     0F 13 02 F6 | 	mov	arg01, local01
17cb8     09 23 02 F6 | 	mov	local03, arg01
17cbc     97 06 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
17cc0                 | LR__2280
17cc0     11 FB C9 FA | 	rdbyte	result1, local03 wz
17cc4     01 22 06 51 |  if_ne	add	local03, #1
17cc8     F4 FF 9F 5D |  if_ne	jmp	#LR__2280
17ccc                 | LR__2281
17ccc     09 23 82 F1 | 	sub	local03, arg01
17cd0     11 FB 01 F6 | 	mov	result1, local03
17cd4     FD 14 02 F6 | 	mov	arg02, result1
17cd8     10 15 52 F2 | 	cmps	arg02, local02 wc
17cdc     26 01 00 CF 
17ce0     3D FB 05 C6 |  if_b	mov	result1, ##@LR__4116
17ce4     44 00 90 CD |  if_b	jmp	#LR__2283
17ce8     0A 25 02 F6 | 	mov	local04, arg02
17cec     10 25 82 F1 | 	sub	local04, local02
17cf0     0B 25 5A F2 | 	cmps	local04, arg03 wcz
17cf4     0B 25 02 16 |  if_a	mov	local04, arg03
17cf8     12 13 02 F6 | 	mov	arg01, local04
17cfc     02 12 06 F1 | 	add	arg01, #2
17d00     C8 18 B0 FD | 	call	#__system___gc_alloc_managed
17d04     FD 26 0A F6 | 	mov	local05, result1 wz
17d08     1C 00 90 AD |  if_e	jmp	#LR__2282
17d0c     0F 21 02 F1 | 	add	local02, local01
17d10     13 13 02 F6 | 	mov	arg01, local05
17d14     10 15 02 F6 | 	mov	arg02, local02
17d18     12 17 02 F6 | 	mov	arg03, local04
17d1c     64 DD BF FD | 	call	#__system____builtin_memmove
17d20     13 25 02 F1 | 	add	local04, local05
17d24     12 01 48 FC | 	wrbyte	#0, local04
17d28                 | LR__2282
17d28     13 FB 01 F6 | 	mov	result1, local05
17d2c                 | LR__2283
17d2c     A7 F0 03 F6 | 	mov	ptra, fp
17d30     B2 00 A0 FD | 	call	#popregs_
17d34                 | __system__Mid_S_ret
17d34     2D 00 64 FD | 	ret
17d38                 | 
17d38                 | __system__Chr_S
17d38     01 4A 05 F6 | 	mov	COUNT_, #1
17d3c     A8 00 A0 FD | 	call	#pushregs_
17d40     09 1F 02 F6 | 	mov	local01, arg01
17d44     03 12 06 F6 | 	mov	arg01, #3
17d48     80 18 B0 FD | 	call	#__system___gc_alloc_managed
17d4c     00 FA 4D F2 | 	cmps	result1, #0 wz
17d50     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
17d54     01 FA 05 51 |  if_ne	add	result1, #1
17d58     FD 00 48 5C |  if_ne	wrbyte	#0, result1
17d5c     01 FA 85 51 |  if_ne	sub	result1, #1
17d60     A7 F0 03 F6 | 	mov	ptra, fp
17d64     B2 00 A0 FD | 	call	#popregs_
17d68                 | __system__Chr_S_ret
17d68     2D 00 64 FD | 	ret
17d6c                 | 
17d6c                 | __system__Number_S
17d6c     08 4A 05 F6 | 	mov	COUNT_, #8
17d70     A8 00 A0 FD | 	call	#pushregs_
17d74     09 1F 02 F6 | 	mov	local01, arg01
17d78     0A 21 0A F6 | 	mov	local02, arg02 wz
17d7c     0B 23 02 F6 | 	mov	local03, arg03
17d80     3C 00 90 5D |  if_ne	jmp	#LR__2292
17d84     01 20 06 F6 | 	mov	local02, #1
17d88     11 25 02 F6 | 	mov	local04, local03
17d8c     01 26 06 F6 | 	mov	local05, #1
17d90     97 16 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
17d94                 | LR__2290
17d94     00 28 06 F6 | 	mov	local06, #0
17d98     0F 25 1A F2 | 	cmp	local04, local01 wcz
17d9c     01 28 66 E6 |  if_be	neg	local06, #1
17da0     12 27 12 F2 | 	cmp	local05, local04 wc
17da4     15 2B A2 F1 | 	subx	local07, local07
17da8     15 29 CA F7 | 	test	local06, local07 wz
17dac     11 25 02 5D |  if_ne	qmul	local04, local03
17db0     12 27 02 56 |  if_ne	mov	local05, local04
17db4     01 20 06 51 |  if_ne	add	local02, #1
17db8     18 24 62 5D |  if_ne	getqx	local04
17dbc     D4 FF 9F 5D |  if_ne	jmp	#LR__2290
17dc0                 | LR__2291
17dc0                 | LR__2292
17dc0     20 20 36 F3 | 	fle	local02, #32 wc
17dc4     10 13 02 F6 | 	mov	arg01, local02
17dc8     02 12 06 F1 | 	add	arg01, #2
17dcc     FC 17 B0 FD | 	call	#__system___gc_alloc_managed
17dd0     FD 28 02 F6 | 	mov	local06, result1
17dd4     10 2B 02 F6 | 	mov	local07, local02
17dd8     14 2B 02 F1 | 	add	local07, local06
17ddc     15 01 48 FC | 	wrbyte	#0, local07
17de0     97 1A 48 FB | 	callpa	#(@LR__2294-@LR__2293)>>2,fcache_load_ptr_
17de4                 | LR__2293
17de4     01 20 16 F2 | 	cmp	local02, #1 wc
17de8     2C 00 90 CD |  if_b	jmp	#LR__2295
17dec     11 1F 12 FD | 	qdiv	local01, local03
17df0     01 20 86 F1 | 	sub	local02, #1
17df4     10 2B 02 F6 | 	mov	local07, local02
17df8     14 2B 02 F1 | 	add	local07, local06
17dfc     19 2C 62 FD | 	getqy	local08
17e00     0A 2C 16 F2 | 	cmp	local08, #10 wc
17e04     30 2C 06 C1 |  if_b	add	local08, #48
17e08     37 2C 06 31 |  if_ae	add	local08, #55
17e0c     15 2D 42 FC | 	wrbyte	local08, local07
17e10     18 1E 62 FD | 	getqx	local01
17e14     CC FF 9F FD | 	jmp	#LR__2293
17e18                 | LR__2294
17e18                 | LR__2295
17e18     14 FB 01 F6 | 	mov	result1, local06
17e1c     A7 F0 03 F6 | 	mov	ptra, fp
17e20     B2 00 A0 FD | 	call	#popregs_
17e24                 | __system__Number_S_ret
17e24     2D 00 64 FD | 	ret
17e28                 | 
17e28                 | __system__LCase_S
17e28     07 4A 05 F6 | 	mov	COUNT_, #7
17e2c     A8 00 A0 FD | 	call	#pushregs_
17e30     09 1F 02 F6 | 	mov	local01, arg01
17e34     09 21 02 F6 | 	mov	local02, arg01
17e38     97 06 48 FB | 	callpa	#(@LR__2301-@LR__2300)>>2,fcache_load_ptr_
17e3c                 | LR__2300
17e3c     10 FB C9 FA | 	rdbyte	result1, local02 wz
17e40     01 20 06 51 |  if_ne	add	local02, #1
17e44     F4 FF 9F 5D |  if_ne	jmp	#LR__2300
17e48                 | LR__2301
17e48     09 21 82 F1 | 	sub	local02, arg01
17e4c     10 FB 01 F6 | 	mov	result1, local02
17e50     FD 20 0A F6 | 	mov	local02, result1 wz
17e54     26 01 00 AF 
17e58     3E FB 05 A6 |  if_e	mov	result1, ##@LR__4117
17e5c     7C 00 90 AD |  if_e	jmp	#LR__2307
17e60     10 13 02 F6 | 	mov	arg01, local02
17e64     02 12 06 F1 | 	add	arg01, #2
17e68     60 17 B0 FD | 	call	#__system___gc_alloc_managed
17e6c     FD 22 0A F6 | 	mov	local03, result1 wz
17e70     64 00 90 AD |  if_e	jmp	#LR__2306
17e74     01 24 66 F6 | 	neg	local04, #1
17e78     97 26 48 FB | 	callpa	#(@LR__2305-@LR__2302)>>2,fcache_load_ptr_
17e7c                 | LR__2302
17e7c     01 24 06 F1 | 	add	local04, #1
17e80     12 27 02 F6 | 	mov	local05, local04
17e84     0F 27 02 F1 | 	add	local05, local01
17e88     13 29 C2 FA | 	rdbyte	local06, local05
17e8c     41 28 56 F2 | 	cmps	local06, #65 wc
17e90     18 00 90 CD |  if_b	jmp	#LR__2303
17e94     5B 28 56 F2 | 	cmps	local06, #91 wc
17e98     12 2B 02 C6 |  if_b	mov	local07, local04
17e9c     11 2B 02 C1 |  if_b	add	local07, local03
17ea0     20 28 06 C1 |  if_b	add	local06, #32
17ea4     15 29 42 CC |  if_b	wrbyte	local06, local07
17ea8     0C 00 90 CD |  if_b	jmp	#LR__2304
17eac                 | LR__2303
17eac     12 2B 02 F6 | 	mov	local07, local04
17eb0     11 2B 02 F1 | 	add	local07, local03
17eb4     15 29 42 FC | 	wrbyte	local06, local07
17eb8                 | LR__2304
17eb8     10 29 02 F6 | 	mov	local06, local02
17ebc     01 28 86 F1 | 	sub	local06, #1
17ec0     14 25 0A F2 | 	cmp	local04, local06 wz
17ec4     B4 FF 9F 5D |  if_ne	jmp	#LR__2302
17ec8                 | LR__2305
17ec8     11 21 02 F1 | 	add	local02, local03
17ecc     10 01 48 FC | 	wrbyte	#0, local02
17ed0     11 FB 01 F6 | 	mov	result1, local03
17ed4     04 00 90 FD | 	jmp	#LR__2307
17ed8                 | LR__2306
17ed8     11 FB 01 F6 | 	mov	result1, local03
17edc                 | LR__2307
17edc     A7 F0 03 F6 | 	mov	ptra, fp
17ee0     B2 00 A0 FD | 	call	#popregs_
17ee4                 | __system__LCase_S_ret
17ee4     2D 00 64 FD | 	ret
17ee8                 | 
17ee8                 | __system__LTrim_S
17ee8     05 4A 05 F6 | 	mov	COUNT_, #5
17eec     A8 00 A0 FD | 	call	#pushregs_
17ef0     09 1F 02 F6 | 	mov	local01, arg01
17ef4     09 21 02 F6 | 	mov	local02, arg01
17ef8     97 06 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
17efc                 | LR__2310
17efc     10 FB C9 FA | 	rdbyte	result1, local02 wz
17f00     01 20 06 51 |  if_ne	add	local02, #1
17f04     F4 FF 9F 5D |  if_ne	jmp	#LR__2310
17f08                 | LR__2311
17f08     09 21 82 F1 | 	sub	local02, arg01
17f0c     10 FB 01 F6 | 	mov	result1, local02
17f10     FD 20 0A F6 | 	mov	local02, result1 wz
17f14     26 01 00 AF 
17f18     3F FB 05 A6 |  if_e	mov	result1, ##@LR__4118
17f1c     7C 00 90 AD |  if_e	jmp	#LR__2316
17f20     00 22 06 F6 | 	mov	local03, #0
17f24     10 25 02 F6 | 	mov	local04, local02
17f28                 | LR__2312
17f28     12 23 52 F2 | 	cmps	local03, local04 wc
17f2c     68 00 90 3D |  if_ae	jmp	#LR__2315
17f30     11 17 02 F6 | 	mov	arg03, local03
17f34     0F 17 02 F1 | 	add	arg03, local01
17f38     0B 17 C2 FA | 	rdbyte	arg03, arg03
17f3c     20 16 0E F2 | 	cmp	arg03, #32 wz
17f40     4C 00 90 AD |  if_e	jmp	#LR__2314
17f44     10 13 02 F6 | 	mov	arg01, local02
17f48     11 13 82 F1 | 	sub	arg01, local03
17f4c     02 12 06 F1 | 	add	arg01, #2
17f50     78 16 B0 FD | 	call	#__system___gc_alloc_managed
17f54     FD 26 0A F6 | 	mov	local05, result1 wz
17f58     2C 00 90 AD |  if_e	jmp	#LR__2313
17f5c     11 15 02 F6 | 	mov	arg02, local03
17f60     0F 15 02 F1 | 	add	arg02, local01
17f64     10 17 02 F6 | 	mov	arg03, local02
17f68     11 17 82 F1 | 	sub	arg03, local03
17f6c     13 13 02 F6 | 	mov	arg01, local05
17f70     10 DB BF FD | 	call	#__system____builtin_memmove
17f74     11 21 82 F1 | 	sub	local02, local03
17f78     13 21 02 F1 | 	add	local02, local05
17f7c     10 01 48 FC | 	wrbyte	#0, local02
17f80     13 FB 01 F6 | 	mov	result1, local05
17f84     14 00 90 FD | 	jmp	#LR__2316
17f88                 | LR__2313
17f88     13 FB 01 F6 | 	mov	result1, local05
17f8c     0C 00 90 FD | 	jmp	#LR__2316
17f90                 | LR__2314
17f90     01 22 06 F1 | 	add	local03, #1
17f94     90 FF 9F FD | 	jmp	#LR__2312
17f98                 | LR__2315
17f98     0F FB 01 F6 | 	mov	result1, local01
17f9c                 | LR__2316
17f9c     A7 F0 03 F6 | 	mov	ptra, fp
17fa0     B2 00 A0 FD | 	call	#popregs_
17fa4                 | __system__LTrim_S_ret
17fa4     2D 00 64 FD | 	ret
17fa8                 | 
17fa8                 | __system__RTrim_S
17fa8     04 4A 05 F6 | 	mov	COUNT_, #4
17fac     A8 00 A0 FD | 	call	#pushregs_
17fb0     09 1F 02 F6 | 	mov	local01, arg01
17fb4     09 21 02 F6 | 	mov	local02, arg01
17fb8     97 06 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
17fbc                 | LR__2320
17fbc     10 FB C9 FA | 	rdbyte	result1, local02 wz
17fc0     01 20 06 51 |  if_ne	add	local02, #1
17fc4     F4 FF 9F 5D |  if_ne	jmp	#LR__2320
17fc8                 | LR__2321
17fc8     09 21 82 F1 | 	sub	local02, arg01
17fcc     10 FB 01 F6 | 	mov	result1, local02
17fd0     FD 20 0A F6 | 	mov	local02, result1 wz
17fd4     26 01 00 AF 
17fd8     40 FB 05 A6 |  if_e	mov	result1, ##@LR__4119
17fdc     74 00 90 AD |  if_e	jmp	#LR__2325
17fe0     10 23 02 F6 | 	mov	local03, local02
17fe4     01 22 86 F1 | 	sub	local03, #1
17fe8                 | LR__2322
17fe8     11 15 02 F6 | 	mov	arg02, local03
17fec     0F 15 02 F1 | 	add	arg02, local01
17ff0     0A 21 C2 FA | 	rdbyte	local02, arg02
17ff4     20 20 0E F2 | 	cmp	local02, #32 wz
17ff8     44 00 90 AD |  if_e	jmp	#LR__2324
17ffc     11 13 02 F6 | 	mov	arg01, local03
18000     02 12 06 F1 | 	add	arg01, #2
18004     C4 15 B0 FD | 	call	#__system___gc_alloc_managed
18008     FD 24 0A F6 | 	mov	local04, result1 wz
1800c     28 00 90 AD |  if_e	jmp	#LR__2323
18010     11 17 02 F6 | 	mov	arg03, local03
18014     01 16 06 F1 | 	add	arg03, #1
18018     12 13 02 F6 | 	mov	arg01, local04
1801c     0F 15 02 F6 | 	mov	arg02, local01
18020     60 DA BF FD | 	call	#__system____builtin_memmove
18024     01 22 06 F1 | 	add	local03, #1
18028     12 23 02 F1 | 	add	local03, local04
1802c     11 01 48 FC | 	wrbyte	#0, local03
18030     12 FB 01 F6 | 	mov	result1, local04
18034     1C 00 90 FD | 	jmp	#LR__2325
18038                 | LR__2323
18038     12 FB 01 F6 | 	mov	result1, local04
1803c     14 00 90 FD | 	jmp	#LR__2325
18040                 | LR__2324
18040     01 22 86 F1 | 	sub	local03, #1
18044     00 22 56 F2 | 	cmps	local03, #0 wc
18048     9C FF 9F 3D |  if_ae	jmp	#LR__2322
1804c     26 01 00 FF 
18050     41 FB 05 F6 | 	mov	result1, ##@LR__4120
18054                 | LR__2325
18054     A7 F0 03 F6 | 	mov	ptra, fp
18058     B2 00 A0 FD | 	call	#popregs_
1805c                 | __system__RTrim_S_ret
1805c     2D 00 64 FD | 	ret
18060                 | 
18060                 | __system__Instr
18060     07 4A 05 F6 | 	mov	COUNT_, #7
18064     A8 00 A0 FD | 	call	#pushregs_
18068     09 1F 02 F6 | 	mov	local01, arg01
1806c     0A 21 02 F6 | 	mov	local02, arg02
18070     0B 23 02 F6 | 	mov	local03, arg03
18074     11 13 02 F6 | 	mov	arg01, local03
18078     09 25 02 F6 | 	mov	local04, arg01
1807c     97 06 48 FB | 	callpa	#(@LR__2331-@LR__2330)>>2,fcache_load_ptr_
18080                 | LR__2330
18080     12 FB C9 FA | 	rdbyte	result1, local04 wz
18084     01 24 06 51 |  if_ne	add	local04, #1
18088     F4 FF 9F 5D |  if_ne	jmp	#LR__2330
1808c                 | LR__2331
1808c     09 25 82 F1 | 	sub	local04, arg01
18090     12 27 02 F6 | 	mov	local05, local04
18094     10 13 02 F6 | 	mov	arg01, local02
18098     09 25 02 F6 | 	mov	local04, arg01
1809c     97 06 48 FB | 	callpa	#(@LR__2333-@LR__2332)>>2,fcache_load_ptr_
180a0                 | LR__2332
180a0     12 FB C9 FA | 	rdbyte	result1, local04 wz
180a4     01 24 06 51 |  if_ne	add	local04, #1
180a8     F4 FF 9F 5D |  if_ne	jmp	#LR__2332
180ac                 | LR__2333
180ac     09 25 82 F1 | 	sub	local04, arg01
180b0     12 FB 01 F6 | 	mov	result1, local04
180b4     FD 18 0A F6 | 	mov	arg04, result1 wz
180b8     00 FA 05 A6 |  if_e	mov	result1, #0
180bc     98 00 90 AD |  if_e	jmp	#LR__2337
180c0     00 26 0E F2 | 	cmp	local05, #0 wz
180c4     00 FA 05 A6 |  if_e	mov	result1, #0
180c8     8C 00 90 AD |  if_e	jmp	#LR__2337
180cc     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
180d0     00 FA 05 16 |  if_a	mov	result1, #0
180d4     80 00 90 1D |  if_a	jmp	#LR__2337
180d8     01 1E 56 F2 | 	cmps	local01, #1 wc
180dc     01 1E 06 C6 |  if_b	mov	local01, #1
180e0     11 29 C2 FA | 	rdbyte	local06, local03
180e4     01 26 0E F2 | 	cmp	local05, #1 wz
180e8     18 00 90 5D |  if_ne	jmp	#LR__2334
180ec     10 13 02 F6 | 	mov	arg01, local02
180f0     14 15 02 F6 | 	mov	arg02, local06
180f4     0F 17 02 F6 | 	mov	arg03, local01
180f8     00 18 06 F6 | 	mov	arg04, #0
180fc     68 30 B0 FD | 	call	#__system____ScanForChar
18100     54 00 90 FD | 	jmp	#LR__2337
18104                 | LR__2334
18104     0F 2B 02 F6 | 	mov	local07, local01
18108                 | LR__2335
18108     10 13 02 F6 | 	mov	arg01, local02
1810c     14 15 02 F6 | 	mov	arg02, local06
18110     15 17 02 F6 | 	mov	arg03, local07
18114     00 18 06 F6 | 	mov	arg04, #0
18118     4C 30 B0 FD | 	call	#__system____ScanForChar
1811c     FD 2A 0A F6 | 	mov	local07, result1 wz
18120     30 00 90 AD |  if_e	jmp	#LR__2336
18124     13 17 02 F6 | 	mov	arg03, local05
18128     10 13 02 F6 | 	mov	arg01, local02
1812c     15 15 02 F6 | 	mov	arg02, local07
18130     58 FB BF FD | 	call	#__system__Mid_S
18134     FD 12 02 F6 | 	mov	arg01, result1
18138     11 15 02 F6 | 	mov	arg02, local03
1813c     4C DA BF FD | 	call	#__system___string_cmp
18140     00 FA 0D F2 | 	cmp	result1, #0 wz
18144     15 FB 01 A6 |  if_e	mov	result1, local07
18148     0C 00 90 AD |  if_e	jmp	#LR__2337
1814c     13 2B 02 F1 | 	add	local07, local05
18150     B4 FF 9F FD | 	jmp	#LR__2335
18154                 | LR__2336
18154     00 FA 05 F6 | 	mov	result1, #0
18158                 | LR__2337
18158     A7 F0 03 F6 | 	mov	ptra, fp
1815c     B2 00 A0 FD | 	call	#popregs_
18160                 | __system__Instr_ret
18160     2D 00 64 FD | 	ret
18164                 | 
18164                 | __system___strerror
18164     00 12 56 F2 | 	cmps	arg01, #0 wc
18168     08 00 90 CD |  if_b	jmp	#LR__2340
1816c     1A 12 56 F2 | 	cmps	arg01, #26 wc
18170     04 00 90 CD |  if_b	jmp	#LR__2341
18174                 | LR__2340
18174     19 12 06 F6 | 	mov	arg01, #25
18178                 | LR__2341
18178     02 12 66 F0 | 	shl	arg01, #2
1817c     01 00 00 FF 
18180     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
18184     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
18188     09 FB 01 FB | 	rdlong	result1, arg01
1818c     01 00 00 FF 
18190     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
18194                 | __system___strerror_ret
18194     2D 00 64 FD | 	ret
18198                 | 
18198                 | __system___int64_shl
18198     20 16 CE F7 | 	test	arg03, #32 wz
1819c     09 15 02 56 |  if_ne	mov	arg02, arg01
181a0     00 12 06 56 |  if_ne	mov	arg01, #0
181a4     1F 16 CE F7 | 	test	arg03, #31 wz
181a8     18 00 90 AD |  if_e	jmp	#LR__2350
181ac     0B 15 62 F0 | 	shl	arg02, arg03
181b0     09 FB 01 F6 | 	mov	result1, arg01
181b4     0B FD 61 F6 | 	neg	result2, arg03
181b8     FE FA 41 F0 | 	shr	result1, result2
181bc     FD 14 42 F5 | 	or	arg02, result1
181c0     0B 13 62 F0 | 	shl	arg01, arg03
181c4                 | LR__2350
181c4     0A FD 01 F6 | 	mov	result2, arg02
181c8     09 FB 01 F6 | 	mov	result1, arg01
181cc                 | __system___int64_shl_ret
181cc     2D 00 64 FD | 	ret
181d0                 | 
181d0                 | __system___usepins
181d0     14 E8 05 F1 | 	add	ptr___system__dat__, #20
181d4     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
181d8     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
181dc     00 13 CA F7 | 	test	arg01, _var01 wz
181e0     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
181e4     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
181e8     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
181ec     01 15 CA A7 |  if_e	test	arg02, _var02 wz
181f0     00 FA 05 56 |  if_ne	mov	result1, #0
181f4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
181f8     14 E8 05 F1 | 	add	ptr___system__dat__, #20
181fc     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
18200     09 03 42 F5 | 	or	_var02, arg01
18204     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
18208     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1820c     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
18210     0A 03 42 F5 | 	or	_var02, arg02
18214     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
18218     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1821c     01 FA 65 F6 | 	neg	result1, #1
18220                 | __system___usepins_ret
18220     2D 00 64 FD | 	ret
18224                 | 
18224                 | __system___freepins
18224     14 E8 05 F1 | 	add	ptr___system__dat__, #20
18228     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1822c     09 01 22 F5 | 	andn	_var01, arg01
18230     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
18234     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18238     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1823c     0A 01 22 F5 | 	andn	_var01, arg02
18240     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
18244     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
18248                 | __system___freepins_ret
18248     2D 00 64 FD | 	ret
1824c                 | 
1824c                 | __system___float_fromuns
1824c     09 17 0A F6 | 	mov	arg03, arg01 wz
18250     0B FB 01 A6 |  if_e	mov	result1, arg03
18254     24 00 90 AD |  if_e	jmp	#LR__2360
18258     0B 15 92 F7 | 	encod	arg02, arg03 wc
1825c     01 14 06 C1 |  if_b	add	arg02, #1
18260     01 14 86 F1 | 	sub	arg02, #1
18264     1F 12 06 F6 | 	mov	arg01, #31
18268     0A 13 82 F1 | 	sub	arg01, arg02
1826c     09 17 62 F0 | 	shl	arg03, arg01
18270     02 16 46 F0 | 	shr	arg03, #2
18274     00 12 06 F6 | 	mov	arg01, #0
18278     74 08 B0 FD | 	call	#__system___float_Pack
1827c                 | LR__2360
1827c                 | __system___float_fromuns_ret
1827c     2D 00 64 FD | 	ret
18280                 | 
18280                 | __system___float_add
18280     0F 4A 05 F6 | 	mov	COUNT_, #15
18284     A8 00 A0 FD | 	call	#pushregs_
18288     09 1F 02 F6 | 	mov	local01, arg01
1828c     0A 21 02 F6 | 	mov	local02, arg02
18290     00 22 06 F6 | 	mov	local03, #0
18294     0F 25 02 F6 | 	mov	local04, local01
18298     12 27 02 F6 | 	mov	local05, local04
1829c     16 26 46 F7 | 	zerox	local05, #22
182a0     12 29 02 F6 | 	mov	local06, local04
182a4     01 28 66 F0 | 	shl	local06, #1
182a8     18 28 46 F0 | 	shr	local06, #24
182ac     1F 24 46 F0 | 	shr	local04, #31
182b0     10 13 02 F6 | 	mov	arg01, local02
182b4     09 FB 01 F6 | 	mov	result1, arg01
182b8     FD 2A 02 F6 | 	mov	local07, result1
182bc     15 2D 02 F6 | 	mov	local08, local07
182c0     16 2C 46 F7 | 	zerox	local08, #22
182c4     15 2F 02 F6 | 	mov	local09, local07
182c8     01 2E 66 F0 | 	shl	local09, #1
182cc     18 2E 46 F0 | 	shr	local09, #24
182d0     17 31 02 F6 | 	mov	local10, local09
182d4     1F 2A 46 F0 | 	shr	local07, #31
182d8     00 32 06 F6 | 	mov	local11, #0
182dc     00 34 06 F6 | 	mov	local12, #0
182e0     18 29 12 F2 | 	cmp	local06, local10 wc
182e4     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
182e8     2C 00 90 1D |  if_a	jmp	#LR__2370
182ec     16 27 12 32 |  if_ae	cmp	local05, local08 wc
182f0     24 00 90 3D |  if_ae	jmp	#LR__2370
182f4     13 37 02 F6 | 	mov	local13, local05
182f8     16 27 02 F6 | 	mov	local05, local08
182fc     1B 2D 02 F6 | 	mov	local08, local13
18300     14 37 02 F6 | 	mov	local13, local06
18304     18 29 02 F6 | 	mov	local06, local10
18308     1B 31 02 F6 | 	mov	local10, local13
1830c     12 37 02 F6 | 	mov	local13, local04
18310     15 25 02 F6 | 	mov	local04, local07
18314     1B 2B 02 F6 | 	mov	local07, local13
18318                 | LR__2370
18318     FF 28 0E F2 | 	cmp	local06, #255 wz
1831c     70 01 90 AD |  if_e	jmp	#LR__2385
18320     00 28 0E F2 | 	cmp	local06, #0 wz
18324     AC 01 90 AD |  if_e	jmp	#LR__2387
18328     17 26 26 F4 | 	bith	local05, #23
1832c                 | LR__2371
1832c     00 30 0E F2 | 	cmp	local10, #0 wz
18330     F0 01 90 AD |  if_e	jmp	#LR__2391
18334     17 2C 26 F4 | 	bith	local08, #23
18338                 | LR__2372
18338     7F 28 86 F1 | 	sub	local06, #127
1833c     7F 30 86 F1 | 	sub	local10, #127
18340     14 39 02 F6 | 	mov	local14, local06
18344     18 39 82 F1 | 	sub	local14, local10
18348     97 14 48 FB | 	callpa	#(@LR__2374-@LR__2373)>>2,fcache_load_ptr_
1834c                 | LR__2373
1834c     20 38 56 F2 | 	cmps	local14, #32 wc
18350     20 00 90 CD |  if_b	jmp	#LR__2375
18354     16 2F 02 F6 | 	mov	local09, local08
18358     00 32 0E F2 | 	cmp	local11, #0 wz
1835c     6F 32 62 FD | 	wrnz	local11
18360     19 2F 42 F5 | 	or	local09, local11
18364     17 33 02 F6 | 	mov	local11, local09
18368     00 2C 06 F6 | 	mov	local08, #0
1836c     20 38 86 F1 | 	sub	local14, #32
18370     D8 FF 9F FD | 	jmp	#LR__2373
18374                 | LR__2374
18374                 | LR__2375
18374     00 38 0E F2 | 	cmp	local14, #0 wz
18378     38 00 90 AD |  if_e	jmp	#LR__2376
1837c     16 37 02 F6 | 	mov	local13, local08
18380     20 30 06 F6 | 	mov	local10, #32
18384     1C 31 82 F1 | 	sub	local10, local14
18388     18 37 62 F0 | 	shl	local13, local10
1838c     19 31 02 F6 | 	mov	local10, local11
18390     20 2E 06 F6 | 	mov	local09, #32
18394     1C 2F 82 F1 | 	sub	local09, local14
18398     17 31 6A F0 | 	shl	local10, local09 wz
1839c     1C 33 42 F0 | 	shr	local11, local14
183a0     1C 2D 42 F0 | 	shr	local08, local14
183a4     1B 33 42 F5 | 	or	local11, local13
183a8     00 3A 06 F6 | 	mov	local15, #0
183ac     01 3A 06 56 |  if_ne	mov	local15, #1
183b0     1D 33 42 F5 | 	or	local11, local15
183b4                 | LR__2376
183b4     12 3B 02 F6 | 	mov	local15, local04
183b8     15 3B 62 F5 | 	xor	local15, local07
183bc     01 3A CE F7 | 	test	local15, #1 wz
183c0     18 00 90 AD |  if_e	jmp	#LR__2377
183c4     16 2D 22 F6 | 	not	local08, local08
183c8     19 33 22 F6 | 	not	local11, local11
183cc     01 32 0E F1 | 	add	local11, #1 wz
183d0     00 3A 06 F6 | 	mov	local15, #0
183d4     01 3A 06 A6 |  if_e	mov	local15, #1
183d8     1D 2D 02 F1 | 	add	local08, local15
183dc                 | LR__2377
183dc     19 35 12 F1 | 	add	local12, local11 wc
183e0     16 27 22 F1 | 	addx	local05, local08
183e4     00 26 56 F2 | 	cmps	local05, #0 wc
183e8     1C 00 90 3D |  if_ae	jmp	#LR__2378
183ec     01 24 66 F5 | 	xor	local04, #1
183f0     13 27 22 F6 | 	not	local05, local05
183f4     1A 35 22 F6 | 	not	local12, local12
183f8     01 34 0E F1 | 	add	local12, #1 wz
183fc     00 3A 06 F6 | 	mov	local15, #0
18400     01 3A 06 A6 |  if_e	mov	local15, #1
18404     1D 27 02 F1 | 	add	local05, local15
18408                 | LR__2378
18408     00 80 00 FF 
1840c     00 26 16 F2 | 	cmp	local05, ##16777216 wc
18410     28 00 90 CD |  if_b	jmp	#LR__2379
18414     01 28 06 F1 | 	add	local06, #1
18418     1A 39 02 F6 | 	mov	local14, local12
1841c     01 38 06 F5 | 	and	local14, #1
18420     01 34 46 F0 | 	shr	local12, #1
18424     13 3B 02 F6 | 	mov	local15, local05
18428     1F 3A 66 F0 | 	shl	local15, #31
1842c     1D 35 42 F5 | 	or	local12, local15
18430     1C 35 42 F5 | 	or	local12, local14
18434     01 26 46 F0 | 	shr	local05, #1
18438     3C 00 90 FD | 	jmp	#LR__2384
1843c                 | LR__2379
1843c     00 40 00 FF 
18440     00 26 16 F2 | 	cmp	local05, ##8388608 wc
18444     30 00 90 3D |  if_ae	jmp	#LR__2383
18448     00 26 0E F2 | 	cmp	local05, #0 wz
1844c     00 34 0E A2 |  if_e	cmp	local12, #0 wz
18450     08 24 46 A5 |  if_e	or	local04, #8
18454     01 24 26 A5 |  if_e	andn	local04, #1
18458     1C 00 90 AD |  if_e	jmp	#LR__2382
1845c                 | LR__2380
1845c     00 40 00 FF 
18460     00 26 16 F2 | 	cmp	local05, ##8388608 wc
18464     10 00 90 3D |  if_ae	jmp	#LR__2381
18468     1A 35 12 F1 | 	add	local12, local12 wc
1846c     13 27 22 F1 | 	addx	local05, local05
18470     01 28 86 F1 | 	sub	local06, #1
18474     E4 FF 9F FD | 	jmp	#LR__2380
18478                 | LR__2381
18478                 | LR__2382
18478                 | LR__2383
18478                 | LR__2384
18478     13 13 02 F6 | 	mov	arg01, local05
1847c     1A 15 02 F6 | 	mov	arg02, local12
18480     14 17 02 F6 | 	mov	arg03, local06
18484     12 19 02 F6 | 	mov	arg04, local04
18488     20 31 B0 FD | 	call	#__system__pack_0428
1848c     DC 00 90 FD | 	jmp	#LR__2395
18490                 | LR__2385
18490     FF 30 0E F2 | 	cmp	local10, #255 wz
18494     10 00 90 5D |  if_ne	jmp	#LR__2386
18498     12 2B 0A F2 | 	cmp	local07, local04 wz
1849c     00 F8 3F 5F 
184a0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
184a4     C4 00 90 5D |  if_ne	jmp	#LR__2395
184a8                 | LR__2386
184a8     00 26 0E F2 | 	cmp	local05, #0 wz
184ac     00 F8 3F 5F 
184b0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
184b4     B4 00 90 5D |  if_ne	jmp	#LR__2395
184b8     1A 15 02 F6 | 	mov	arg02, local12
184bc     14 17 02 F6 | 	mov	arg03, local06
184c0     12 19 02 F6 | 	mov	arg04, local04
184c4     02 18 46 F5 | 	or	arg04, #2
184c8     13 13 02 F6 | 	mov	arg01, local05
184cc     DC 30 B0 FD | 	call	#__system__pack_0428
184d0     98 00 90 FD | 	jmp	#LR__2395
184d4                 | LR__2387
184d4     00 26 0E F2 | 	cmp	local05, #0 wz
184d8     28 00 90 AD |  if_e	jmp	#LR__2390
184dc     01 26 66 F0 | 	shl	local05, #1
184e0     97 0E 48 FB | 	callpa	#(@LR__2389-@LR__2388)>>2,fcache_load_ptr_
184e4                 | LR__2388
184e4     00 40 00 FF 
184e8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
184ec     14 3B 02 C6 |  if_b	mov	local15, local06
184f0     01 3A 86 C1 |  if_b	sub	local15, #1
184f4     1D 29 02 C6 |  if_b	mov	local06, local15
184f8     01 26 66 C0 |  if_b	shl	local05, #1
184fc     E4 FF 9F CD |  if_b	jmp	#LR__2388
18500                 | LR__2389
18500     28 FE 9F FD | 	jmp	#LR__2371
18504                 | LR__2390
18504     15 25 02 F5 | 	and	local04, local07
18508     12 19 02 F6 | 	mov	arg04, local04
1850c     08 18 46 F5 | 	or	arg04, #8
18510     00 12 06 F6 | 	mov	arg01, #0
18514     00 14 06 F6 | 	mov	arg02, #0
18518     00 16 06 F6 | 	mov	arg03, #0
1851c     8C 30 B0 FD | 	call	#__system__pack_0428
18520     48 00 90 FD | 	jmp	#LR__2395
18524                 | LR__2391
18524     00 2C 0E F2 | 	cmp	local08, #0 wz
18528     28 00 90 AD |  if_e	jmp	#LR__2394
1852c     01 2C 66 F0 | 	shl	local08, #1
18530     97 0E 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
18534                 | LR__2392
18534     00 40 00 FF 
18538     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1853c     18 3B 02 C6 |  if_b	mov	local15, local10
18540     01 3A 86 C1 |  if_b	sub	local15, #1
18544     1D 31 02 C6 |  if_b	mov	local10, local15
18548     01 2C 66 C0 |  if_b	shl	local08, #1
1854c     E4 FF 9F CD |  if_b	jmp	#LR__2392
18550                 | LR__2393
18550     E4 FD 9F FD | 	jmp	#LR__2372
18554                 | LR__2394
18554     7F 28 86 F1 | 	sub	local06, #127
18558     13 13 02 F6 | 	mov	arg01, local05
1855c     1A 15 02 F6 | 	mov	arg02, local12
18560     14 17 02 F6 | 	mov	arg03, local06
18564     12 19 02 F6 | 	mov	arg04, local04
18568     40 30 B0 FD | 	call	#__system__pack_0428
1856c                 | LR__2395
1856c     A7 F0 03 F6 | 	mov	ptra, fp
18570     B2 00 A0 FD | 	call	#popregs_
18574                 | __system___float_add_ret
18574     2D 00 64 FD | 	ret
18578                 | 
18578                 | __system___float_mul
18578     0B 4A 05 F6 | 	mov	COUNT_, #11
1857c     A8 00 A0 FD | 	call	#pushregs_
18580     09 1F 02 F6 | 	mov	local01, arg01
18584     0A 21 02 F6 | 	mov	local02, arg02
18588     0F 23 02 F6 | 	mov	local03, local01
1858c     11 25 02 F6 | 	mov	local04, local03
18590     16 24 46 F7 | 	zerox	local04, #22
18594     11 27 02 F6 | 	mov	local05, local03
18598     01 26 66 F0 | 	shl	local05, #1
1859c     18 26 46 F0 | 	shr	local05, #24
185a0     1F 22 46 F0 | 	shr	local03, #31
185a4     10 FB 01 F6 | 	mov	result1, local02
185a8     FD 28 02 F6 | 	mov	local06, result1
185ac     14 2B 02 F6 | 	mov	local07, local06
185b0     16 2A 46 F7 | 	zerox	local07, #22
185b4     14 2D 02 F6 | 	mov	local08, local06
185b8     01 2C 66 F0 | 	shl	local08, #1
185bc     18 2C 46 F0 | 	shr	local08, #24
185c0     1F 28 46 F0 | 	shr	local06, #31
185c4     14 23 62 F5 | 	xor	local03, local06
185c8     FF 26 0E F2 | 	cmp	local05, #255 wz
185cc     90 00 90 AD |  if_e	jmp	#LR__2403
185d0     FF 2C 0E F2 | 	cmp	local08, #255 wz
185d4     D8 00 90 AD |  if_e	jmp	#LR__2405
185d8     00 26 0E F2 | 	cmp	local05, #0 wz
185dc     0C 01 90 AD |  if_e	jmp	#LR__2406
185e0     17 24 26 F4 | 	bith	local04, #23
185e4                 | LR__2400
185e4     00 2C 0E F2 | 	cmp	local08, #0 wz
185e8     44 01 90 AD |  if_e	jmp	#LR__2410
185ec     17 2A 26 F4 | 	bith	local07, #23
185f0                 | LR__2401
185f0     12 21 02 F6 | 	mov	local02, local04
185f4     04 20 66 F0 | 	shl	local02, #4
185f8     15 29 02 F6 | 	mov	local06, local07
185fc     05 28 66 F0 | 	shl	local06, #5
18600     14 21 02 FD | 	qmul	local02, local06
18604     16 27 02 F1 | 	add	local05, local08
18608     FE 26 86 F1 | 	sub	local05, #254
1860c     13 2F 02 F6 | 	mov	local09, local05
18610     04 24 66 F0 | 	shl	local04, #4
18614     05 2A 66 F0 | 	shl	local07, #5
18618     18 30 62 FD | 	getqx	local10
1861c     15 25 02 FD | 	qmul	local04, local07
18620     19 32 62 FD | 	getqy	local11
18624     00 80 00 FF 
18628     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1862c     18 00 90 CD |  if_b	jmp	#LR__2402
18630     01 2E 06 F1 | 	add	local09, #1
18634     01 30 46 F0 | 	shr	local10, #1
18638     19 2D 02 F6 | 	mov	local08, local11
1863c     1F 2C 66 F0 | 	shl	local08, #31
18640     16 31 42 F5 | 	or	local10, local08
18644     01 32 46 F0 | 	shr	local11, #1
18648                 | LR__2402
18648     19 13 02 F6 | 	mov	arg01, local11
1864c     18 15 02 F6 | 	mov	arg02, local10
18650     17 17 02 F6 | 	mov	arg03, local09
18654     11 19 02 F6 | 	mov	arg04, local03
18658     50 2F B0 FD | 	call	#__system__pack_0428
1865c     10 01 90 FD | 	jmp	#LR__2414
18660                 | LR__2403
18660     00 24 0E F2 | 	cmp	local04, #0 wz
18664     0F FB 01 56 |  if_ne	mov	result1, local01
18668     04 01 90 5D |  if_ne	jmp	#LR__2414
1866c     FF 2C 56 F2 | 	cmps	local08, #255 wc
18670     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
18674     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
18678     18 00 90 4D |  if_c_and_nz	jmp	#LR__2404
1867c     00 F8 3F CF 
18680     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
18684     E8 00 90 CD |  if_b	jmp	#LR__2414
18688     00 2A 0E F2 | 	cmp	local07, #0 wz
1868c     10 FB 01 56 |  if_ne	mov	result1, local02
18690     DC 00 90 5D |  if_ne	jmp	#LR__2414
18694                 | LR__2404
18694     02 22 46 F5 | 	or	local03, #2
18698     00 12 06 F6 | 	mov	arg01, #0
1869c     00 14 06 F6 | 	mov	arg02, #0
186a0     13 17 02 F6 | 	mov	arg03, local05
186a4     11 19 02 F6 | 	mov	arg04, local03
186a8     00 2F B0 FD | 	call	#__system__pack_0428
186ac     C0 00 90 FD | 	jmp	#LR__2414
186b0                 | LR__2405
186b0     00 26 0E F2 | 	cmp	local05, #0 wz
186b4     00 24 0E A2 |  if_e	cmp	local04, #0 wz
186b8     00 F8 3F AF 
186bc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
186c0     AC 00 90 AD |  if_e	jmp	#LR__2414
186c4     00 2A 0E F2 | 	cmp	local07, #0 wz
186c8     10 FB 01 56 |  if_ne	mov	result1, local02
186cc     A0 00 90 5D |  if_ne	jmp	#LR__2414
186d0     16 17 02 F6 | 	mov	arg03, local08
186d4     11 19 02 F6 | 	mov	arg04, local03
186d8     02 18 46 F5 | 	or	arg04, #2
186dc     00 12 06 F6 | 	mov	arg01, #0
186e0     00 14 06 F6 | 	mov	arg02, #0
186e4     C4 2E B0 FD | 	call	#__system__pack_0428
186e8     84 00 90 FD | 	jmp	#LR__2414
186ec                 | LR__2406
186ec     00 24 0E F2 | 	cmp	local04, #0 wz
186f0     20 00 90 AD |  if_e	jmp	#LR__2409
186f4     01 24 66 F0 | 	shl	local04, #1
186f8     97 0A 48 FB | 	callpa	#(@LR__2408-@LR__2407)>>2,fcache_load_ptr_
186fc                 | LR__2407
186fc     00 40 00 FF 
18700     00 24 16 F2 | 	cmp	local04, ##8388608 wc
18704     01 26 86 C1 |  if_b	sub	local05, #1
18708     01 24 66 C0 |  if_b	shl	local04, #1
1870c     EC FF 9F CD |  if_b	jmp	#LR__2407
18710                 | LR__2408
18710     D0 FE 9F FD | 	jmp	#LR__2400
18714                 | LR__2409
18714     08 22 46 F5 | 	or	local03, #8
18718     00 12 06 F6 | 	mov	arg01, #0
1871c     00 14 06 F6 | 	mov	arg02, #0
18720     00 16 06 F6 | 	mov	arg03, #0
18724     11 19 02 F6 | 	mov	arg04, local03
18728     80 2E B0 FD | 	call	#__system__pack_0428
1872c     40 00 90 FD | 	jmp	#LR__2414
18730                 | LR__2410
18730     00 2A 0E F2 | 	cmp	local07, #0 wz
18734     20 00 90 AD |  if_e	jmp	#LR__2413
18738     01 2A 66 F0 | 	shl	local07, #1
1873c     97 0A 48 FB | 	callpa	#(@LR__2412-@LR__2411)>>2,fcache_load_ptr_
18740                 | LR__2411
18740     00 40 00 FF 
18744     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
18748     01 2C 86 C1 |  if_b	sub	local08, #1
1874c     01 2A 66 C0 |  if_b	shl	local07, #1
18750     EC FF 9F CD |  if_b	jmp	#LR__2411
18754                 | LR__2412
18754     98 FE 9F FD | 	jmp	#LR__2401
18758                 | LR__2413
18758     08 22 46 F5 | 	or	local03, #8
1875c     00 12 06 F6 | 	mov	arg01, #0
18760     00 14 06 F6 | 	mov	arg02, #0
18764     00 16 06 F6 | 	mov	arg03, #0
18768     11 19 02 F6 | 	mov	arg04, local03
1876c     3C 2E B0 FD | 	call	#__system__pack_0428
18770                 | LR__2414
18770     A7 F0 03 F6 | 	mov	ptra, fp
18774     B2 00 A0 FD | 	call	#popregs_
18778                 | __system___float_mul_ret
18778     2D 00 64 FD | 	ret
1877c                 | 
1877c                 | __system___float_div
1877c     0E 4A 05 F6 | 	mov	COUNT_, #14
18780     A8 00 A0 FD | 	call	#pushregs_
18784     09 23 02 F6 | 	mov	local03, arg01
18788     0A 25 02 F6 | 	mov	local04, arg02
1878c     11 27 02 F6 | 	mov	local05, local03
18790     13 29 02 F6 | 	mov	local06, local05
18794     16 28 46 F7 | 	zerox	local06, #22
18798     13 2B 02 F6 | 	mov	local07, local05
1879c     01 2A 66 F0 | 	shl	local07, #1
187a0     18 2A 46 F0 | 	shr	local07, #24
187a4     1F 26 46 F0 | 	shr	local05, #31
187a8     12 FB 01 F6 | 	mov	result1, local04
187ac     FD 2C 02 F6 | 	mov	local08, result1
187b0     16 2F 02 F6 | 	mov	local09, local08
187b4     16 2E 46 F7 | 	zerox	local09, #22
187b8     16 31 02 F6 | 	mov	local10, local08
187bc     01 30 66 F0 | 	shl	local10, #1
187c0     18 30 46 F0 | 	shr	local10, #24
187c4     1F 2C 46 F0 | 	shr	local08, #31
187c8     16 27 62 F5 | 	xor	local05, local08
187cc     FF 2A 0E F2 | 	cmp	local07, #255 wz
187d0     D4 00 90 AD |  if_e	jmp	#LR__2425
187d4     FF 30 0E F2 | 	cmp	local10, #255 wz
187d8     04 01 90 AD |  if_e	jmp	#LR__2426
187dc     00 2A 0E F2 | 	cmp	local07, #0 wz
187e0     24 01 90 AD |  if_e	jmp	#LR__2427
187e4     17 28 26 F4 | 	bith	local06, #23
187e8                 | LR__2420
187e8     00 30 0E F2 | 	cmp	local10, #0 wz
187ec     70 01 90 AD |  if_e	jmp	#LR__2431
187f0     17 2E 26 F4 | 	bith	local09, #23
187f4                 | LR__2421
187f4     18 2B 82 F1 | 	sub	local07, local10
187f8     15 33 02 F6 | 	mov	local11, local07
187fc     14 13 02 F6 | 	mov	arg01, local06
18800     02 12 46 F0 | 	shr	arg01, #2
18804     1E 28 66 F0 | 	shl	local06, #30
18808     14 15 02 F6 | 	mov	arg02, local06
1880c     17 17 02 F6 | 	mov	arg03, local09
18810     28 12 62 FD | 	setq	arg01
18814     0B 15 12 FD | 	qdiv	arg02, arg03
18818     00 34 06 F6 | 	mov	local12, #0
1881c     18 1E 62 FD | 	getqx	local01
18820     19 FC 61 FD | 	getqy	result2
18824     FE 20 02 F6 | 	mov	local02, result2
18828     0F 37 02 F6 | 	mov	local13, local01
1882c     00 20 4E F2 | 	cmps	local02, #0 wz
18830     1B 39 02 F6 | 	mov	local14, local13
18834     19 38 66 F0 | 	shl	local14, #25
18838     01 34 06 56 |  if_ne	mov	local12, #1
1883c     1A 39 42 F5 | 	or	local14, local12
18840     07 36 46 F0 | 	shr	local13, #7
18844     00 80 00 FF 
18848     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1884c     1C 00 90 CD |  if_b	jmp	#LR__2422
18850     01 32 06 F1 | 	add	local11, #1
18854     01 38 46 F0 | 	shr	local14, #1
18858     1B 35 02 F6 | 	mov	local12, local13
1885c     1F 34 66 F0 | 	shl	local12, #31
18860     1A 39 42 F5 | 	or	local14, local12
18864     01 36 46 F0 | 	shr	local13, #1
18868     24 00 90 FD | 	jmp	#LR__2424
1886c                 | LR__2422
1886c     00 40 00 FF 
18870     00 36 16 F2 | 	cmp	local13, ##8388608 wc
18874     18 00 90 3D |  if_ae	jmp	#LR__2423
18878     01 32 86 F1 | 	sub	local11, #1
1887c     01 36 66 F0 | 	shl	local13, #1
18880     1C 35 02 F6 | 	mov	local12, local14
18884     1F 34 46 F0 | 	shr	local12, #31
18888     1A 37 42 F5 | 	or	local13, local12
1888c     01 38 66 F0 | 	shl	local14, #1
18890                 | LR__2423
18890                 | LR__2424
18890     1B 13 02 F6 | 	mov	arg01, local13
18894     1C 15 02 F6 | 	mov	arg02, local14
18898     19 17 02 F6 | 	mov	arg03, local11
1889c     13 19 02 F6 | 	mov	arg04, local05
188a0     08 2D B0 FD | 	call	#__system__pack_0428
188a4     F8 00 90 FD | 	jmp	#LR__2435
188a8                 | LR__2425
188a8     00 28 0E F2 | 	cmp	local06, #0 wz
188ac     11 FB 01 56 |  if_ne	mov	result1, local03
188b0     EC 00 90 5D |  if_ne	jmp	#LR__2435
188b4     FF 30 0E F2 | 	cmp	local10, #255 wz
188b8     00 F8 3F AF 
188bc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
188c0     DC 00 90 AD |  if_e	jmp	#LR__2435
188c4     02 26 46 F5 | 	or	local05, #2
188c8     00 12 06 F6 | 	mov	arg01, #0
188cc     00 14 06 F6 | 	mov	arg02, #0
188d0     15 17 02 F6 | 	mov	arg03, local07
188d4     13 19 02 F6 | 	mov	arg04, local05
188d8     D0 2C B0 FD | 	call	#__system__pack_0428
188dc     C0 00 90 FD | 	jmp	#LR__2435
188e0                 | LR__2426
188e0     00 2E 0E F2 | 	cmp	local09, #0 wz
188e4     12 FB 01 56 |  if_ne	mov	result1, local04
188e8     B4 00 90 5D |  if_ne	jmp	#LR__2435
188ec     13 19 02 F6 | 	mov	arg04, local05
188f0     08 18 46 F5 | 	or	arg04, #8
188f4     00 12 06 F6 | 	mov	arg01, #0
188f8     00 14 06 F6 | 	mov	arg02, #0
188fc     00 16 06 F6 | 	mov	arg03, #0
18900     A8 2C B0 FD | 	call	#__system__pack_0428
18904     98 00 90 FD | 	jmp	#LR__2435
18908                 | LR__2427
18908     00 28 0E F2 | 	cmp	local06, #0 wz
1890c     20 00 90 AD |  if_e	jmp	#LR__2430
18910     01 28 66 F0 | 	shl	local06, #1
18914     97 0A 48 FB | 	callpa	#(@LR__2429-@LR__2428)>>2,fcache_load_ptr_
18918                 | LR__2428
18918     00 40 00 FF 
1891c     00 28 16 F2 | 	cmp	local06, ##8388608 wc
18920     01 2A 86 C1 |  if_b	sub	local07, #1
18924     01 28 66 C0 |  if_b	shl	local06, #1
18928     EC FF 9F CD |  if_b	jmp	#LR__2428
1892c                 | LR__2429
1892c     B8 FE 9F FD | 	jmp	#LR__2420
18930                 | LR__2430
18930     00 30 0E F2 | 	cmp	local10, #0 wz
18934     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
18938     00 F8 3F AF 
1893c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
18940     5C 00 90 AD |  if_e	jmp	#LR__2435
18944     13 19 02 F6 | 	mov	arg04, local05
18948     08 18 46 F5 | 	or	arg04, #8
1894c     00 12 06 F6 | 	mov	arg01, #0
18950     00 14 06 F6 | 	mov	arg02, #0
18954     00 16 06 F6 | 	mov	arg03, #0
18958     50 2C B0 FD | 	call	#__system__pack_0428
1895c     40 00 90 FD | 	jmp	#LR__2435
18960                 | LR__2431
18960     00 2E 0E F2 | 	cmp	local09, #0 wz
18964     20 00 90 AD |  if_e	jmp	#LR__2434
18968     01 2E 66 F0 | 	shl	local09, #1
1896c     97 0A 48 FB | 	callpa	#(@LR__2433-@LR__2432)>>2,fcache_load_ptr_
18970                 | LR__2432
18970     00 40 00 FF 
18974     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
18978     01 30 86 C1 |  if_b	sub	local10, #1
1897c     01 2E 66 C0 |  if_b	shl	local09, #1
18980     EC FF 9F CD |  if_b	jmp	#LR__2432
18984                 | LR__2433
18984     6C FE 9F FD | 	jmp	#LR__2421
18988                 | LR__2434
18988     02 26 46 F5 | 	or	local05, #2
1898c     00 12 06 F6 | 	mov	arg01, #0
18990     00 14 06 F6 | 	mov	arg02, #0
18994     00 16 06 F6 | 	mov	arg03, #0
18998     13 19 02 F6 | 	mov	arg04, local05
1899c     0C 2C B0 FD | 	call	#__system__pack_0428
189a0                 | LR__2435
189a0     A7 F0 03 F6 | 	mov	ptra, fp
189a4     B2 00 A0 FD | 	call	#popregs_
189a8                 | __system___float_div_ret
189a8     2D 00 64 FD | 	ret
189ac                 | 
189ac                 | __system___float_cmp
189ac     00 C0 3F FF 
189b0     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
189b4     00 C0 3F CF 
189b8     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
189bc     0B FB 01 36 |  if_ae	mov	result1, arg03
189c0     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
189c4     00 C0 7F FF 
189c8     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
189cc     00 C0 7F CF 
189d0     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
189d4     0B FB 01 36 |  if_ae	mov	result1, arg03
189d8     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
189dc     00 12 56 F2 | 	cmps	arg01, #0 wc
189e0     2C 00 90 3D |  if_ae	jmp	#LR__2440
189e4     00 14 56 F2 | 	cmps	arg02, #0 wc
189e8     0A FB 01 C6 |  if_b	mov	result1, arg02
189ec     09 FB 81 C1 |  if_b	sub	result1, arg01
189f0     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
189f4     00 14 0E F2 | 	cmp	arg02, #0 wz
189f8     00 00 40 AF 
189fc     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
18a00     00 FA 05 A6 |  if_e	mov	result1, #0
18a04     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
18a08     01 FA 65 F6 | 	neg	result1, #1
18a0c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
18a10                 | LR__2440
18a10     00 14 56 F2 | 	cmps	arg02, #0 wc
18a14     1C 00 90 3D |  if_ae	jmp	#LR__2441
18a18     00 12 0E F2 | 	cmp	arg01, #0 wz
18a1c     00 00 40 AF 
18a20     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
18a24     00 FA 05 A6 |  if_e	mov	result1, #0
18a28     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
18a2c     01 FA 05 F6 | 	mov	result1, #1
18a30     08 00 90 FD | 	jmp	#__system___float_cmp_ret
18a34                 | LR__2441
18a34     0A 13 82 F1 | 	sub	arg01, arg02
18a38     09 FB 01 F6 | 	mov	result1, arg01
18a3c                 | __system___float_cmp_ret
18a3c     2D 00 64 FD | 	ret
18a40                 | 
18a40                 | __system___float_tointeger
18a40     02 4A 05 F6 | 	mov	COUNT_, #2
18a44     A8 00 A0 FD | 	call	#pushregs_
18a48     50 00 B0 FD | 	call	#__system___float_Unpack
18a4c     FF FF 7F FF 
18a50     FF FD 55 F2 | 	cmps	result2, ##-1 wc
18a54     34 00 90 CD |  if_b	jmp	#LR__2450
18a58     1F FC 55 F2 | 	cmps	result2, #31 wc
18a5c     2C 00 90 3D |  if_ae	jmp	#LR__2450
18a60     02 FE 65 F0 | 	shl	result3, #2
18a64     1E 1E 06 F6 | 	mov	local01, #30
18a68     FE 1E 82 F1 | 	sub	local01, result2
18a6c     0F FF 41 F0 | 	shr	result3, local01
18a70     FF 20 02 F6 | 	mov	local02, result3
18a74     0A 21 02 F1 | 	add	local02, arg02
18a78     01 20 46 F0 | 	shr	local02, #1
18a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
18a80     10 21 62 56 |  if_ne	neg	local02, local02
18a84     10 FB 01 F6 | 	mov	result1, local02
18a88     04 00 90 FD | 	jmp	#LR__2451
18a8c                 | LR__2450
18a8c     00 FA 05 F6 | 	mov	result1, #0
18a90                 | LR__2451
18a90     A7 F0 03 F6 | 	mov	ptra, fp
18a94     B2 00 A0 FD | 	call	#popregs_
18a98                 | __system___float_tointeger_ret
18a98     2D 00 64 FD | 	ret
18a9c                 | 
18a9c                 | __system___float_Unpack
18a9c     09 01 02 F6 | 	mov	_var01, arg01
18aa0     1F 00 46 F0 | 	shr	_var01, #31
18aa4     09 03 02 F6 | 	mov	_var02, arg01
18aa8     01 02 66 F0 | 	shl	_var02, #1
18aac     18 02 4E F0 | 	shr	_var02, #24 wz
18ab0     17 13 06 F4 | 	bitl	arg01, #279
18ab4     06 12 66 50 |  if_ne	shl	arg01, #6
18ab8     1D 12 26 54 |  if_ne	bith	arg01, #29
18abc     1C 00 90 5D |  if_ne	jmp	#LR__2460
18ac0     09 05 92 F7 | 	encod	_var03, arg01 wc
18ac4     01 04 06 C1 |  if_b	add	_var03, #1
18ac8     17 04 86 F1 | 	sub	_var03, #23
18acc     02 03 02 F6 | 	mov	_var02, _var03
18ad0     07 FC 05 F6 | 	mov	result2, #7
18ad4     02 FD 81 F1 | 	sub	result2, _var03
18ad8     FE 12 62 F0 | 	shl	arg01, result2
18adc                 | LR__2460
18adc     7F 02 86 F1 | 	sub	_var02, #127
18ae0     09 FF 01 F6 | 	mov	result3, arg01
18ae4     00 FB 01 F6 | 	mov	result1, _var01
18ae8     01 FD 01 F6 | 	mov	result2, _var02
18aec                 | __system___float_Unpack_ret
18aec     2D 00 64 FD | 	ret
18af0                 | 
18af0                 | __system___float_Pack
18af0     00 00 06 F6 | 	mov	_var01, #0
18af4     00 16 0E F2 | 	cmp	arg03, #0 wz
18af8     8C 00 90 AD |  if_e	jmp	#LR__2471
18afc     0B 03 92 F7 | 	encod	_var02, arg03 wc
18b00     01 02 06 C1 |  if_b	add	_var02, #1
18b04     21 00 06 F6 | 	mov	_var01, #33
18b08     01 01 82 F1 | 	sub	_var01, _var02
18b0c     00 17 62 F0 | 	shl	arg03, _var01
18b10     03 02 06 F6 | 	mov	_var02, #3
18b14     00 03 82 F1 | 	sub	_var02, _var01
18b18     01 15 02 F1 | 	add	arg02, _var02
18b1c     0A 05 02 F6 | 	mov	_var03, arg02
18b20     00 17 06 F1 | 	add	arg03, #256
18b24     0B 03 02 F6 | 	mov	_var02, arg03
18b28     FF 02 2E F5 | 	andn	_var02, #255 wz
18b2c     01 04 06 A1 |  if_e	add	_var03, #1
18b30     7F 04 06 F1 | 	add	_var03, #127
18b34     FF FF 7F FF 
18b38     E9 05 46 F3 | 	fges	_var03, ##-23
18b3c     FF 04 66 F3 | 	fles	_var03, #255
18b40     01 04 56 F2 | 	cmps	_var03, #1 wc
18b44     1C 00 90 3D |  if_ae	jmp	#LR__2470
18b48     01 16 46 F0 | 	shr	arg03, #1
18b4c     1F 02 C6 F9 | 	decod	_var02, #31
18b50     0B 03 02 F1 | 	add	_var02, arg03
18b54     02 05 62 F6 | 	neg	_var03, _var03
18b58     02 03 42 F0 | 	shr	_var02, _var03
18b5c     01 17 02 F6 | 	mov	arg03, _var02
18b60     00 04 06 F6 | 	mov	_var03, #0
18b64                 | LR__2470
18b64     09 FB 01 F6 | 	mov	result1, arg01
18b68     1F FA 65 F0 | 	shl	result1, #31
18b6c     02 03 02 F6 | 	mov	_var02, _var03
18b70     17 02 66 F0 | 	shl	_var02, #23
18b74     01 FB 41 F5 | 	or	result1, _var02
18b78     0B 07 02 F6 | 	mov	_var04, arg03
18b7c     09 06 46 F0 | 	shr	_var04, #9
18b80     03 FB 41 F5 | 	or	result1, _var04
18b84     04 00 90 FD | 	jmp	#__system___float_Pack_ret
18b88                 | LR__2471
18b88     00 FB 01 F6 | 	mov	result1, _var01
18b8c                 | __system___float_Pack_ret
18b8c     2D 00 64 FD | 	ret
18b90                 | 
18b90                 | __system___basic_print_float
18b90     05 4A 05 F6 | 	mov	COUNT_, #5
18b94     A8 00 A0 FD | 	call	#pushregs_
18b98     09 1F 02 F6 | 	mov	local01, arg01
18b9c     0A 21 02 F6 | 	mov	local02, arg02
18ba0     0B 23 0A F6 | 	mov	local03, arg03 wz
18ba4     0C 25 02 F6 | 	mov	local04, arg04
18ba8     14 00 90 5D |  if_ne	jmp	#LR__2480
18bac     23 24 0E F2 | 	cmp	local04, #35 wz
18bb0     80 02 10 AF 
18bb4     00 26 06 A6 |  if_e	mov	local05, ##537198592
18bb8     1D 26 C6 59 |  if_ne	decod	local05, #29
18bbc     13 23 02 F6 | 	mov	local03, local05
18bc0                 | LR__2480
18bc0     0F 13 02 F6 | 	mov	arg01, local01
18bc4     C8 24 B0 FD | 	call	#__system___gettxfunc
18bc8     FD 26 0A F6 | 	mov	local05, result1 wz
18bcc     00 FA 05 A6 |  if_e	mov	result1, #0
18bd0     13 13 02 56 |  if_ne	mov	arg01, local05
18bd4     11 15 02 56 |  if_ne	mov	arg02, local03
18bd8     10 17 02 56 |  if_ne	mov	arg03, local02
18bdc     12 19 02 56 |  if_ne	mov	arg04, local04
18be0     64 E0 BF 5D |  if_ne	call	#__system___fmtfloat
18be4     A7 F0 03 F6 | 	mov	ptra, fp
18be8     B2 00 A0 FD | 	call	#popregs_
18bec                 | __system___basic_print_float_ret
18bec     2D 00 64 FD | 	ret
18bf0                 | 
18bf0                 | __system____builtin_atoi
18bf0     07 4A 05 F6 | 	mov	COUNT_, #7
18bf4     A8 00 A0 FD | 	call	#pushregs_
18bf8                 | __system____builtin_atoi_enter
18bf8     09 1F 02 F6 | 	mov	local01, arg01
18bfc     0A 21 02 F6 | 	mov	local02, arg02
18c00     00 22 06 F6 | 	mov	local03, #0
18c04     00 24 06 F6 | 	mov	local04, #0
18c08     00 26 06 F6 | 	mov	local05, #0
18c0c     97 08 48 FB | 	callpa	#(@LR__2491-@LR__2490)>>2,fcache_load_ptr_
18c10                 | LR__2490
18c10     0F 29 C2 FA | 	rdbyte	local06, local01
18c14     20 28 0E F2 | 	cmp	local06, #32 wz
18c18     01 1E 06 A1 |  if_e	add	local01, #1
18c1c     F0 FF 9F AD |  if_e	jmp	#LR__2490
18c20                 | LR__2491
18c20     0F 2B C2 FA | 	rdbyte	local07, local01
18c24                 | LR__2492
18c24     2D 2A 0E F2 | 	cmp	local07, #45 wz
18c28     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
18c2c     18 00 90 5D |  if_ne	jmp	#LR__2493
18c30     01 1E 06 F1 | 	add	local01, #1
18c34     2D 2A 0E F2 | 	cmp	local07, #45 wz
18c38     01 28 06 A6 |  if_e	mov	local06, #1
18c3c     14 27 C2 A2 |  if_e	subr	local05, local06
18c40     0F 2B C2 FA | 	rdbyte	local07, local01
18c44     DC FF 9F FD | 	jmp	#LR__2492
18c48                 | LR__2493
18c48     97 48 48 FB | 	callpa	#(@LR__2501-@LR__2494)>>2,fcache_load_ptr_
18c4c                 | LR__2494
18c4c                 | LR__2495
18c4c     0F 2B C2 FA | 	rdbyte	local07, local01
18c50     5F 2A 0E F2 | 	cmp	local07, #95 wz
18c54     01 1E 06 F1 | 	add	local01, #1
18c58     F0 FF 9F AD |  if_e	jmp	#LR__2495
18c5c     30 2A 0E F2 | 	cmp	local07, #48 wz
18c60     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
18c64     00 24 06 A6 |  if_e	mov	local04, #0
18c68     60 00 90 AD |  if_e	jmp	#LR__2500
18c6c     31 2A 56 F2 | 	cmps	local07, #49 wc
18c70     18 00 90 CD |  if_b	jmp	#LR__2496
18c74     3A 2A 56 F2 | 	cmps	local07, #58 wc
18c78     15 25 02 C6 |  if_b	mov	local04, local07
18c7c     30 24 86 C1 |  if_b	sub	local04, #48
18c80     00 20 0E C2 |  if_b	cmp	local02, #0 wz
18c84     0A 20 06 86 |  if_c_and_z	mov	local02, #10
18c88     40 00 90 CD |  if_b	jmp	#LR__2499
18c8c                 | LR__2496
18c8c     0B 20 56 F2 | 	cmps	local02, #11 wc
18c90     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
18c94     14 00 90 CD |  if_b	jmp	#LR__2497
18c98     67 2A 56 F2 | 	cmps	local07, #103 wc
18c9c     61 2A 86 C1 |  if_b	sub	local07, #97
18ca0     0A 24 06 C6 |  if_b	mov	local04, #10
18ca4     15 25 02 C1 |  if_b	add	local04, local07
18ca8     20 00 90 CD |  if_b	jmp	#LR__2498
18cac                 | LR__2497
18cac     0B 20 56 F2 | 	cmps	local02, #11 wc
18cb0     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
18cb4     24 00 90 CD |  if_b	jmp	#LR__2502
18cb8     47 2A 56 F2 | 	cmps	local07, #71 wc
18cbc     41 2A 86 C1 |  if_b	sub	local07, #65
18cc0     0A 24 06 C6 |  if_b	mov	local04, #10
18cc4     15 25 02 C1 |  if_b	add	local04, local07
18cc8     10 00 90 3D |  if_ae	jmp	#LR__2502
18ccc                 | LR__2498
18ccc                 | LR__2499
18ccc                 | LR__2500
18ccc     11 21 02 FD | 	qmul	local02, local03
18cd0     18 22 62 FD | 	getqx	local03
18cd4     12 23 02 F1 | 	add	local03, local04
18cd8     70 FF 9F FD | 	jmp	#LR__2494
18cdc                 | LR__2501
18cdc                 | LR__2502
18cdc     00 20 0E F2 | 	cmp	local02, #0 wz
18ce0     64 00 90 5D |  if_ne	jmp	#LR__2508
18ce4     78 2A 0E F2 | 	cmp	local07, #120 wz
18ce8     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
18cec     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
18cf0     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
18cf4     14 00 90 5D |  if_ne	jmp	#LR__2503
18cf8     0F 13 02 F6 | 	mov	arg01, local01
18cfc     10 14 06 F6 | 	mov	arg02, #16
18d00     EC FE BF FD | 	call	#__system____builtin_atoi
18d04     FD 22 02 F6 | 	mov	local03, result1
18d08     3C 00 90 FD | 	jmp	#LR__2507
18d0c                 | LR__2503
18d0c     62 2A 0E F2 | 	cmp	local07, #98 wz
18d10     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
18d14     14 00 90 5D |  if_ne	jmp	#LR__2504
18d18     0F 13 02 F6 | 	mov	arg01, local01
18d1c     02 14 06 F6 | 	mov	arg02, #2
18d20     CC FE BF FD | 	call	#__system____builtin_atoi
18d24     FD 22 02 F6 | 	mov	local03, result1
18d28     1C 00 90 FD | 	jmp	#LR__2506
18d2c                 | LR__2504
18d2c     6F 2A 0E F2 | 	cmp	local07, #111 wz
18d30     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
18d34     10 00 90 5D |  if_ne	jmp	#LR__2505
18d38     0F 13 02 F6 | 	mov	arg01, local01
18d3c     08 14 06 F6 | 	mov	arg02, #8
18d40     AC FE BF FD | 	call	#__system____builtin_atoi
18d44     FD 22 02 F6 | 	mov	local03, result1
18d48                 | LR__2505
18d48                 | LR__2506
18d48                 | LR__2507
18d48                 | LR__2508
18d48     00 26 0E F2 | 	cmp	local05, #0 wz
18d4c     11 23 62 56 |  if_ne	neg	local03, local03
18d50     11 FB 01 F6 | 	mov	result1, local03
18d54     A7 F0 03 F6 | 	mov	ptra, fp
18d58     B2 00 A0 FD | 	call	#popregs_
18d5c                 | __system____builtin_atoi_ret
18d5c     2D 00 64 FD | 	ret
18d60                 | 
18d60                 | __system____builtin_atof
18d60     07 4A 05 F6 | 	mov	COUNT_, #7
18d64     A8 00 A0 FD | 	call	#pushregs_
18d68     09 1F 02 F6 | 	mov	local01, arg01
18d6c     00 20 06 F6 | 	mov	local02, #0
18d70     00 22 06 F6 | 	mov	local03, #0
18d74     00 24 06 F6 | 	mov	local04, #0
18d78     00 26 06 F6 | 	mov	local05, #0
18d7c     97 08 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
18d80                 | LR__2510
18d80     0F 17 C2 FA | 	rdbyte	arg03, local01
18d84     20 16 0E F2 | 	cmp	arg03, #32 wz
18d88     01 1E 06 A1 |  if_e	add	local01, #1
18d8c     F0 FF 9F AD |  if_e	jmp	#LR__2510
18d90                 | LR__2511
18d90     0F 29 C2 FA | 	rdbyte	local06, local01
18d94                 | LR__2512
18d94     2B 28 0E F2 | 	cmp	local06, #43 wz
18d98     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
18d9c     14 00 90 5D |  if_ne	jmp	#LR__2513
18da0     2D 28 0E F2 | 	cmp	local06, #45 wz
18da4     1F 24 E6 A4 |  if_e	bitnot	local04, #31
18da8     01 1E 06 F1 | 	add	local01, #1
18dac     0F 29 C2 FA | 	rdbyte	local06, local01
18db0     E0 FF 9F FD | 	jmp	#LR__2512
18db4                 | LR__2513
18db4                 | LR__2514
18db4     97 08 48 FB | 	callpa	#(@LR__2516-@LR__2515)>>2,fcache_load_ptr_
18db8                 | LR__2515
18db8     0F 29 C2 FA | 	rdbyte	local06, local01
18dbc     5F 28 0E F2 | 	cmp	local06, #95 wz
18dc0     01 1E 06 F1 | 	add	local01, #1
18dc4     F0 FF 9F AD |  if_e	jmp	#LR__2515
18dc8                 | LR__2516
18dc8     00 28 0E F2 | 	cmp	local06, #0 wz
18dcc     5C 00 90 AD |  if_e	jmp	#LR__2518
18dd0     30 28 56 F2 | 	cmps	local06, #48 wc
18dd4     44 00 90 CD |  if_b	jmp	#LR__2517
18dd8     3A 28 56 F2 | 	cmps	local06, #58 wc
18ddc     3C 00 90 3D |  if_ae	jmp	#LR__2517
18de0     10 13 02 F6 | 	mov	arg01, local02
18de4     00 90 20 FF 
18de8     00 14 06 F6 | 	mov	arg02, ##1092616192
18dec     88 F7 BF FD | 	call	#__system___float_mul
18df0     FD 20 02 F6 | 	mov	local02, result1
18df4     30 28 86 F1 | 	sub	local06, #48
18df8     14 13 02 F6 | 	mov	arg01, local06
18dfc     4C F4 BF FD | 	call	#__system___float_fromuns
18e00     FD 14 02 F6 | 	mov	arg02, result1
18e04     10 13 02 F6 | 	mov	arg01, local02
18e08     74 F4 BF FD | 	call	#__system___float_add
18e0c     FD 20 02 F6 | 	mov	local02, result1
18e10     00 26 0E F2 | 	cmp	local05, #0 wz
18e14     01 22 86 51 |  if_ne	sub	local03, #1
18e18     98 FF 9F FD | 	jmp	#LR__2514
18e1c                 | LR__2517
18e1c     2E 28 0E F2 | 	cmp	local06, #46 wz
18e20     00 26 0E A2 |  if_e	cmp	local05, #0 wz
18e24     01 26 06 A6 |  if_e	mov	local05, #1
18e28     88 FF 9F AD |  if_e	jmp	#LR__2514
18e2c                 | LR__2518
18e2c     45 28 0E F2 | 	cmp	local06, #69 wz
18e30     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
18e34     18 00 90 5D |  if_ne	jmp	#LR__2519
18e38     0F 13 02 F6 | 	mov	arg01, local01
18e3c     00 14 06 F6 | 	mov	arg02, #0
18e40     AC FD BF FD | 	call	#__system____builtin_atoi
18e44     11 FB 01 F1 | 	add	result1, local03
18e48     FD 2A 02 F6 | 	mov	local07, result1
18e4c     04 00 90 FD | 	jmp	#LR__2520
18e50                 | LR__2519
18e50     11 2B 02 F6 | 	mov	local07, local03
18e54                 | LR__2520
18e54     15 17 02 F6 | 	mov	arg03, local07
18e58     10 13 02 F6 | 	mov	arg01, local02
18e5c     00 90 20 FF 
18e60     00 14 06 F6 | 	mov	arg02, ##1092616192
18e64     44 04 B0 FD | 	call	#__system___float_pow_n
18e68     12 FB 61 F5 | 	xor	result1, local04
18e6c     A7 F0 03 F6 | 	mov	ptra, fp
18e70     B2 00 A0 FD | 	call	#popregs_
18e74                 | __system____builtin_atof_ret
18e74     2D 00 64 FD | 	ret
18e78                 | 
18e78                 | __system____builtin_ilogb
18e78     20 FC BF FD | 	call	#__system___float_Unpack
18e7c     00 FE 0D F2 | 	cmp	result3, #0 wz
18e80     00 00 40 AF 
18e84     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
18e88     24 00 90 AD |  if_e	jmp	#LR__2531
18e8c     80 FC 0D F2 | 	cmp	result2, #128 wz
18e90     18 00 90 5D |  if_ne	jmp	#LR__2530
18e94     00 00 10 FF 
18e98     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
18e9c     1E FA CD A9 |  if_e	bmask	result1, #30
18ea0     0C 00 90 AD |  if_e	jmp	#LR__2531
18ea4     1F FA C5 F9 | 	decod	result1, #31
18ea8     04 00 90 FD | 	jmp	#LR__2531
18eac                 | LR__2530
18eac     FE FA 01 F6 | 	mov	result1, result2
18eb0                 | LR__2531
18eb0                 | __system____builtin_ilogb_ret
18eb0     2D 00 64 FD | 	ret
18eb4                 | 
18eb4                 | __system____builtin_sinf
18eb4     03 4A 05 F6 | 	mov	COUNT_, #3
18eb8     A8 00 A0 FD | 	call	#pushregs_
18ebc     09 1F 02 F6 | 	mov	local01, arg01
18ec0     66 E6 1E FF 
18ec4     CD 14 06 F6 | 	mov	arg02, ##1036831949
18ec8     01 16 06 F6 | 	mov	arg03, #1
18ecc     DC FA BF FD | 	call	#__system___float_cmp
18ed0     00 FA 55 F2 | 	cmps	result1, #0 wc
18ed4     5C 00 90 3D |  if_ae	jmp	#LR__2540
18ed8     0F 13 02 F6 | 	mov	arg01, local01
18edc     66 E6 5E FF 
18ee0     CD 14 06 F6 | 	mov	arg02, ##-1110651699
18ee4     01 16 66 F6 | 	neg	arg03, #1
18ee8     C0 FA BF FD | 	call	#__system___float_cmp
18eec     01 FA 55 F2 | 	cmps	result1, #1 wc
18ef0     40 00 90 CD |  if_b	jmp	#LR__2540
18ef4     0F 13 02 F6 | 	mov	arg01, local01
18ef8     0F 15 02 F6 | 	mov	arg02, local01
18efc     78 F6 BF FD | 	call	#__system___float_mul
18f00     FD 12 02 F6 | 	mov	arg01, result1
18f04     0F 15 02 F6 | 	mov	arg02, local01
18f08     6C F6 BF FD | 	call	#__system___float_mul
18f0c     FD 12 02 F6 | 	mov	arg01, result1
18f10     00 60 20 FF 
18f14     00 14 06 F6 | 	mov	arg02, ##1086324736
18f18     60 F8 BF FD | 	call	#__system___float_div
18f1c     FD 14 02 F6 | 	mov	arg02, result1
18f20     0F 13 02 F6 | 	mov	arg01, local01
18f24     1F 14 E6 F4 | 	bitnot	arg02, #31
18f28     54 F3 BF FD | 	call	#__system___float_add
18f2c     FD 20 02 F6 | 	mov	local02, result1
18f30     54 00 90 FD | 	jmp	#LR__2541
18f34                 | LR__2540
18f34     0F 13 02 F6 | 	mov	arg01, local01
18f38     7C 91 26 FF 
18f3c     83 15 06 F6 | 	mov	arg02, ##1294137731
18f40     34 F6 BF FD | 	call	#__system___float_mul
18f44     FD 12 02 F6 | 	mov	arg01, result1
18f48     00 14 06 F6 | 	mov	arg02, #0
18f4c     F0 FA BF FD | 	call	#__system___float_tointeger
18f50     02 FA 65 F0 | 	shl	result1, #2
18f54     00 00 A0 FF 
18f58     FD 00 48 FD | 	qrotate	##1073741824, result1
18f5c     19 12 62 FD | 	getqy	arg01
18f60     09 13 52 F6 | 	abs	arg01, arg01 wc
18f64     1F 22 C6 C9 |  if_b	decod	local03, #31
18f68     00 22 06 36 |  if_ae	mov	local03, #0
18f6c     DC F2 BF FD | 	call	#__system___float_fromuns
18f70     11 FB 61 F5 | 	xor	result1, local03
18f74     FD 12 02 F6 | 	mov	arg01, result1
18f78     00 40 27 FF 
18f7c     00 14 06 F6 | 	mov	arg02, ##1317011456
18f80     F8 F7 BF FD | 	call	#__system___float_div
18f84     FD 20 02 F6 | 	mov	local02, result1
18f88                 | LR__2541
18f88     10 FB 01 F6 | 	mov	result1, local02
18f8c     A7 F0 03 F6 | 	mov	ptra, fp
18f90     B2 00 A0 FD | 	call	#popregs_
18f94                 | __system____builtin_sinf_ret
18f94     2D 00 64 FD | 	ret
18f98                 | 
18f98                 | __system____builtin_exp2f
18f98     04 4A 05 F6 | 	mov	COUNT_, #4
18f9c     A8 00 A0 FD | 	call	#pushregs_
18fa0     09 1F 02 F6 | 	mov	local01, arg01
18fa4     00 7F 21 FF 
18fa8     00 14 06 F6 | 	mov	arg02, ##1123942400
18fac     01 16 66 F6 | 	neg	arg03, #1
18fb0     F8 F9 BF FD | 	call	#__system___float_cmp
18fb4     00 FA 55 F2 | 	cmps	result1, #0 wc
18fb8     00 C0 3F 3F 
18fbc     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
18fc0     DC 00 90 3D |  if_ae	jmp	#LR__2551
18fc4     0F 13 02 F6 | 	mov	arg01, local01
18fc8     00 7F 61 FF 
18fcc     00 14 06 F6 | 	mov	arg02, ##-1023541248
18fd0     01 16 06 F6 | 	mov	arg03, #1
18fd4     D4 F9 BF FD | 	call	#__system___float_cmp
18fd8     00 FA 55 F2 | 	cmps	result1, #0 wc
18fdc     00 FA 05 C6 |  if_b	mov	result1, #0
18fe0     BC 00 90 CD |  if_b	jmp	#LR__2551
18fe4     0F 13 02 F6 | 	mov	arg01, local01
18fe8     00 14 06 F6 | 	mov	arg02, #0
18fec     50 FA BF FD | 	call	#__system___float_tointeger
18ff0     FD 20 02 F6 | 	mov	local02, result1
18ff4     10 13 52 F6 | 	abs	arg01, local02 wc
18ff8     1F 22 C6 C9 |  if_b	decod	local03, #31
18ffc     00 22 06 36 |  if_ae	mov	local03, #0
19000     48 F2 BF FD | 	call	#__system___float_fromuns
19004     11 FB 61 F5 | 	xor	result1, local03
19008     FD 14 02 F6 | 	mov	arg02, result1
1900c     0F 13 02 F6 | 	mov	arg01, local01
19010     1F 14 E6 F4 | 	bitnot	arg02, #31
19014     68 F2 BF FD | 	call	#__system___float_add
19018     FD 24 02 F6 | 	mov	local04, result1
1901c     12 13 02 F6 | 	mov	arg01, local04
19020     00 14 06 F6 | 	mov	arg02, #0
19024     01 16 06 F6 | 	mov	arg03, #1
19028     80 F9 BF FD | 	call	#__system___float_cmp
1902c     00 FA 55 F2 | 	cmps	result1, #0 wc
19030     18 00 90 3D |  if_ae	jmp	#LR__2550
19034     12 13 02 F6 | 	mov	arg01, local04
19038     00 C0 1F FF 
1903c     00 14 06 F6 | 	mov	arg02, ##1065353216
19040     3C F2 BF FD | 	call	#__system___float_add
19044     FD 24 02 F6 | 	mov	local04, result1
19048     01 20 86 F1 | 	sub	local02, #1
1904c                 | LR__2550
1904c     7F 20 06 F1 | 	add	local02, #127
19050     17 20 66 F0 | 	shl	local02, #23
19054     12 13 02 F6 | 	mov	arg01, local04
19058     00 80 26 FF 
1905c     00 14 06 F6 | 	mov	arg02, ##1291845632
19060     14 F5 BF FD | 	call	#__system___float_mul
19064     FD 12 02 F6 | 	mov	arg01, result1
19068     00 14 06 F6 | 	mov	arg02, #0
1906c     D0 F9 BF FD | 	call	#__system___float_tointeger
19070     FD 24 0A F6 | 	mov	local04, result1 wz
19074     10 FB 01 A6 |  if_e	mov	result1, local02
19078     24 00 90 AD |  if_e	jmp	#LR__2551
1907c     3E 24 26 F4 | 	bith	local04, #62
19080     0F 24 62 FD | 	qexp	local04
19084     10 13 02 F6 | 	mov	arg01, local02
19088     18 14 62 FD | 	getqx	arg02
1908c     01 14 06 F1 | 	add	arg02, #1
19090     01 14 46 F0 | 	shr	arg02, #1
19094     00 80 1F FF 
19098     00 14 06 F1 | 	add	arg02, ##1056964608
1909c     D8 F4 BF FD | 	call	#__system___float_mul
190a0                 | LR__2551
190a0     A7 F0 03 F6 | 	mov	ptra, fp
190a4     B2 00 A0 FD | 	call	#popregs_
190a8                 | __system____builtin_exp2f_ret
190a8     2D 00 64 FD | 	ret
190ac                 | 
190ac                 | __system____builtin_log2f
190ac     06 4A 05 F6 | 	mov	COUNT_, #6
190b0     A8 00 A0 FD | 	call	#pushregs_
190b4     09 1F 02 F6 | 	mov	local01, arg01
190b8     09 21 0A F6 | 	mov	local02, arg01 wz
190bc     00 00 40 5F 
190c0     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
190c4     00 40 00 AF 
190c8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
190cc     08 01 90 AD |  if_e	jmp	#LR__2564
190d0     00 20 56 F2 | 	cmps	local02, #0 wc
190d4     00 E0 3F CF 
190d8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
190dc     F8 00 90 CD |  if_b	jmp	#LR__2564
190e0     0F 13 02 F6 | 	mov	arg01, local01
190e4     00 90 20 FF 
190e8     00 14 06 F6 | 	mov	arg02, ##1092616192
190ec     01 16 06 F6 | 	mov	arg03, #1
190f0     B8 F8 BF FD | 	call	#__system___float_cmp
190f4     00 FA 0D F2 | 	cmp	result1, #0 wz
190f8     4D 2A 20 AF 
190fc     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
19100     D4 00 90 AD |  if_e	jmp	#LR__2564
19104     0F 13 02 F6 | 	mov	arg01, local01
19108     FC 16 20 FF 
1910c     54 14 06 F6 | 	mov	arg02, ##1076754516
19110     01 16 06 F6 | 	mov	arg03, #1
19114     94 F8 BF FD | 	call	#__system___float_cmp
19118     00 FA 0D F2 | 	cmp	result1, #0 wz
1911c     55 DC 1F AF 
19120     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
19124     B0 00 90 AD |  if_e	jmp	#LR__2564
19128     10 23 02 F6 | 	mov	local03, local02
1912c     17 22 46 F0 | 	shr	local03, #23
19130     11 23 E2 F8 | 	getbyte	local03, local03, #0
19134     17 21 06 F4 | 	bitl	local02, #279
19138     10 25 02 F6 | 	mov	local04, local02
1913c     FF 22 0E F2 | 	cmp	local03, #255 wz
19140     1C 00 90 5D |  if_ne	jmp	#LR__2560
19144     00 24 0E F2 | 	cmp	local04, #0 wz
19148     00 C0 3F 5F 
1914c     00 26 06 56 |  if_ne	mov	local05, ##2139095040
19150     00 E0 3F AF 
19154     00 26 06 A6 |  if_e	mov	local05, ##2143289344
19158     13 FB 01 F6 | 	mov	result1, local05
1915c     78 00 90 FD | 	jmp	#LR__2564
19160                 | LR__2560
19160     00 22 0E F2 | 	cmp	local03, #0 wz
19164     17 24 26 54 |  if_ne	bith	local04, #23
19168     7F 22 86 51 |  if_ne	sub	local03, #127
1916c     28 00 90 5D |  if_ne	jmp	#LR__2563
19170     00 24 0E F2 | 	cmp	local04, #0 wz
19174     00 40 00 AF 
19178     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1917c     58 00 90 AD |  if_e	jmp	#LR__2564
19180     7E 22 66 F6 | 	neg	local03, #126
19184     97 08 48 FB | 	callpa	#(@LR__2562-@LR__2561)>>2,fcache_load_ptr_
19188                 | LR__2561
19188     17 24 2E F4 | 	testbn	local04, #23 wz
1918c     01 24 66 A0 |  if_e	shl	local04, #1
19190     01 22 06 A1 |  if_e	add	local03, #1
19194     F0 FF 9F AD |  if_e	jmp	#LR__2561
19198                 | LR__2562
19198                 | LR__2563
19198     0E 24 62 FD | 	qlog	local04
1919c     01 22 86 F1 | 	sub	local03, #1
191a0     11 13 52 F6 | 	abs	arg01, local03 wc
191a4     1F 28 C6 C9 |  if_b	decod	local06, #31
191a8     00 28 06 36 |  if_ae	mov	local06, #0
191ac     18 26 62 FD | 	getqx	local05
191b0     9B 26 06 F4 | 	bitl	local05, #155
191b4     08 26 06 F1 | 	add	local05, #8
191b8     04 26 46 F0 | 	shr	local05, #4
191bc     00 C0 1F FF 
191c0     00 26 06 F1 | 	add	local05, ##1065353216
191c4     84 F0 BF FD | 	call	#__system___float_fromuns
191c8     14 FB 61 F5 | 	xor	result1, local06
191cc     FD 14 02 F6 | 	mov	arg02, result1
191d0     13 13 02 F6 | 	mov	arg01, local05
191d4     A8 F0 BF FD | 	call	#__system___float_add
191d8                 | LR__2564
191d8     A7 F0 03 F6 | 	mov	ptra, fp
191dc     B2 00 A0 FD | 	call	#popregs_
191e0                 | __system____builtin_log2f_ret
191e0     2D 00 64 FD | 	ret
191e4                 | 
191e4                 | __system____builtin_powf
191e4     04 4A 05 F6 | 	mov	COUNT_, #4
191e8     A8 00 A0 FD | 	call	#pushregs_
191ec     09 1F 02 F6 | 	mov	local01, arg01
191f0     0A 21 02 F6 | 	mov	local02, arg02
191f4     10 13 02 F6 | 	mov	arg01, local02
191f8     00 14 06 F6 | 	mov	arg02, #0
191fc     40 F8 BF FD | 	call	#__system___float_tointeger
19200     FD 22 02 F6 | 	mov	local03, result1
19204     11 13 52 F6 | 	abs	arg01, local03 wc
19208     1F 24 C6 C9 |  if_b	decod	local04, #31
1920c     00 24 06 36 |  if_ae	mov	local04, #0
19210     38 F0 BF FD | 	call	#__system___float_fromuns
19214     12 FB 61 F5 | 	xor	result1, local04
19218     FD 12 02 F6 | 	mov	arg01, result1
1921c     10 15 02 F6 | 	mov	arg02, local02
19220     01 16 06 F6 | 	mov	arg03, #1
19224     84 F7 BF FD | 	call	#__system___float_cmp
19228     00 FA 0D F2 | 	cmp	result1, #0 wz
1922c     18 00 90 5D |  if_ne	jmp	#LR__2570
19230     00 C0 1F FF 
19234     00 12 06 F6 | 	mov	arg01, ##1065353216
19238     0F 15 02 F6 | 	mov	arg02, local01
1923c     11 17 02 F6 | 	mov	arg03, local03
19240     68 00 B0 FD | 	call	#__system___float_pow_n
19244     58 00 90 FD | 	jmp	#LR__2571
19248                 | LR__2570
19248     0F 13 02 F6 | 	mov	arg01, local01
1924c     00 14 06 F6 | 	mov	arg02, #0
19250     01 16 06 F6 | 	mov	arg03, #1
19254     54 F7 BF FD | 	call	#__system___float_cmp
19258     00 FA 55 F2 | 	cmps	result1, #0 wc
1925c     00 E0 3F CF 
19260     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
19264     38 00 90 CD |  if_b	jmp	#LR__2571
19268     0F 13 02 F6 | 	mov	arg01, local01
1926c     00 14 06 F6 | 	mov	arg02, #0
19270     01 16 06 F6 | 	mov	arg03, #1
19274     34 F7 BF FD | 	call	#__system___float_cmp
19278     00 FA 0D F2 | 	cmp	result1, #0 wz
1927c     00 FA 05 A6 |  if_e	mov	result1, #0
19280     1C 00 90 AD |  if_e	jmp	#LR__2571
19284     0F 13 02 F6 | 	mov	arg01, local01
19288     20 FE BF FD | 	call	#__system____builtin_log2f
1928c     FD 12 02 F6 | 	mov	arg01, result1
19290     10 15 02 F6 | 	mov	arg02, local02
19294     E0 F2 BF FD | 	call	#__system___float_mul
19298     FD 12 02 F6 | 	mov	arg01, result1
1929c     F8 FC BF FD | 	call	#__system____builtin_exp2f
192a0                 | LR__2571
192a0     A7 F0 03 F6 | 	mov	ptra, fp
192a4     B2 00 A0 FD | 	call	#popregs_
192a8                 | __system____builtin_powf_ret
192a8     2D 00 64 FD | 	ret
192ac                 | 
192ac                 | __system___float_pow_n
192ac     05 4A 05 F6 | 	mov	COUNT_, #5
192b0     A8 00 A0 FD | 	call	#pushregs_
192b4     09 1F 02 F6 | 	mov	local01, arg01
192b8     0A 21 02 F6 | 	mov	local02, arg02
192bc     0B 23 02 F6 | 	mov	local03, arg03
192c0     00 22 56 F2 | 	cmps	local03, #0 wc
192c4     18 00 90 3D |  if_ae	jmp	#LR__2580
192c8     01 24 06 F6 | 	mov	local04, #1
192cc     11 23 62 F6 | 	neg	local03, local03
192d0     00 22 56 F2 | 	cmps	local03, #0 wc
192d4     00 FA 05 C6 |  if_b	mov	result1, #0
192d8     94 00 90 CD |  if_b	jmp	#LR__2588
192dc     04 00 90 FD | 	jmp	#LR__2581
192e0                 | LR__2580
192e0     00 24 06 F6 | 	mov	local04, #0
192e4                 | LR__2581
192e4     00 C0 1F FF 
192e8     00 26 06 F6 | 	mov	local05, ##1065353216
192ec                 | LR__2582
192ec     01 22 56 F2 | 	cmps	local03, #1 wc
192f0     30 00 90 CD |  if_b	jmp	#LR__2584
192f4     01 22 CE F7 | 	test	local03, #1 wz
192f8     10 00 90 AD |  if_e	jmp	#LR__2583
192fc     13 13 02 F6 | 	mov	arg01, local05
19300     10 15 02 F6 | 	mov	arg02, local02
19304     70 F2 BF FD | 	call	#__system___float_mul
19308     FD 26 02 F6 | 	mov	local05, result1
1930c                 | LR__2583
1930c     01 22 C6 F0 | 	sar	local03, #1
19310     10 13 02 F6 | 	mov	arg01, local02
19314     10 15 02 F6 | 	mov	arg02, local02
19318     5C F2 BF FD | 	call	#__system___float_mul
1931c     FD 20 02 F6 | 	mov	local02, result1
19320     C8 FF 9F FD | 	jmp	#LR__2582
19324                 | LR__2584
19324     00 24 0E F2 | 	cmp	local04, #0 wz
19328     14 00 90 AD |  if_e	jmp	#LR__2585
1932c     0F 13 02 F6 | 	mov	arg01, local01
19330     13 15 02 F6 | 	mov	arg02, local05
19334     44 F4 BF FD | 	call	#__system___float_div
19338     FD 26 02 F6 | 	mov	local05, result1
1933c     2C 00 90 FD | 	jmp	#LR__2587
19340                 | LR__2585
19340     0F 13 02 F6 | 	mov	arg01, local01
19344     00 C0 1F FF 
19348     00 14 06 F6 | 	mov	arg02, ##1065353216
1934c     01 16 06 F6 | 	mov	arg03, #1
19350     58 F6 BF FD | 	call	#__system___float_cmp
19354     00 FA 0D F2 | 	cmp	result1, #0 wz
19358     10 00 90 AD |  if_e	jmp	#LR__2586
1935c     0F 13 02 F6 | 	mov	arg01, local01
19360     13 15 02 F6 | 	mov	arg02, local05
19364     10 F2 BF FD | 	call	#__system___float_mul
19368     FD 26 02 F6 | 	mov	local05, result1
1936c                 | LR__2586
1936c                 | LR__2587
1936c     13 FB 01 F6 | 	mov	result1, local05
19370                 | LR__2588
19370     A7 F0 03 F6 | 	mov	ptra, fp
19374     B2 00 A0 FD | 	call	#popregs_
19378                 | __system___float_pow_n_ret
19378     2D 00 64 FD | 	ret
1937c                 | 
1937c                 | __system___gc_ptrs
1937c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
19380     00 03 02 F6 | 	mov	_var02, _var01
19384     76 01 00 FF 
19388     F8 03 06 F1 | 	add	_var02, ##191992
1938c     00 FD 09 FB | 	rdlong	result2, _var01 wz
19390     74 00 90 5D |  if_ne	jmp	#LR__2590
19394     01 FD 01 F6 | 	mov	result2, _var02
19398     00 FD 81 F1 | 	sub	result2, _var01
1939c     00 03 58 FC | 	wrword	#1, _var01
193a0     00 FB 01 F6 | 	mov	result1, _var01
193a4     02 FA 05 F1 | 	add	result1, #2
193a8     36 00 80 FF 
193ac     FD 20 59 FC | 	wrword	##27792, result1
193b0     00 FB 01 F6 | 	mov	result1, _var01
193b4     04 FA 05 F1 | 	add	result1, #4
193b8     FD 00 58 FC | 	wrword	#0, result1
193bc     00 FB 01 F6 | 	mov	result1, _var01
193c0     06 FA 05 F1 | 	add	result1, #6
193c4     FD 02 58 FC | 	wrword	#1, result1
193c8     10 00 06 F1 | 	add	_var01, #16
193cc     FE FC 51 F6 | 	abs	result2, result2 wc
193d0     04 FC 45 F0 | 	shr	result2, #4
193d4     FE FC 81 F6 | 	negc	result2, result2
193d8     00 FD 51 FC | 	wrword	result2, _var01
193dc     00 FD 01 F6 | 	mov	result2, _var01
193e0     02 FC 05 F1 | 	add	result2, #2
193e4     36 00 80 FF 
193e8     FE 1E 59 FC | 	wrword	##27791, result2
193ec     00 FD 01 F6 | 	mov	result2, _var01
193f0     04 FC 05 F1 | 	add	result2, #4
193f4     FE 00 58 FC | 	wrword	#0, result2
193f8     00 FD 01 F6 | 	mov	result2, _var01
193fc     06 FC 05 F1 | 	add	result2, #6
19400     FE 00 58 FC | 	wrword	#0, result2
19404     10 00 86 F1 | 	sub	_var01, #16
19408                 | LR__2590
19408     00 FB 01 F6 | 	mov	result1, _var01
1940c     01 FD 01 F6 | 	mov	result2, _var02
19410                 | __system___gc_ptrs_ret
19410     2D 00 64 FD | 	ret
19414                 | 
19414                 | __system___gc_tryalloc
19414     0B 4A 05 F6 | 	mov	COUNT_, #11
19418     A8 00 A0 FD | 	call	#pushregs_
1941c     09 1F 02 F6 | 	mov	local01, arg01
19420     0A 21 02 F6 | 	mov	local02, arg02
19424     54 FF BF FD | 	call	#__system___gc_ptrs
19428     FD 22 02 F6 | 	mov	local03, result1
1942c     FE 24 02 F6 | 	mov	local04, result2
19430     11 27 02 F6 | 	mov	local05, local03
19434     00 28 06 F6 | 	mov	local06, #0
19438     97 1E 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
1943c                 | LR__2600
1943c     13 2B 02 F6 | 	mov	local07, local05
19440     06 26 06 F1 | 	add	local05, #6
19444     13 15 EA FA | 	rdword	arg02, local05 wz
19448     11 13 02 F6 | 	mov	arg01, local03
1944c     00 FA 05 A6 |  if_e	mov	result1, #0
19450     04 14 66 50 |  if_ne	shl	arg02, #4
19454     0A 13 02 51 |  if_ne	add	arg01, arg02
19458     09 FB 01 56 |  if_ne	mov	result1, arg01
1945c     FD 26 0A F6 | 	mov	local05, result1 wz
19460     13 29 E2 5A |  if_ne	rdword	local06, local05
19464     00 26 0E F2 | 	cmp	local05, #0 wz
19468     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1946c     08 00 90 1D |  if_a	jmp	#LR__2602
19470     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
19474     C4 FF 9F 1D |  if_a	jmp	#LR__2600
19478                 | LR__2601
19478                 | LR__2602
19478     00 26 0E F2 | 	cmp	local05, #0 wz
1947c     13 FB 01 A6 |  if_e	mov	result1, local05
19480     3C 01 90 AD |  if_e	jmp	#LR__2605
19484     13 FD 01 F6 | 	mov	result2, local05
19488     06 FC 05 F1 | 	add	result2, #6
1948c     FE 2C E2 FA | 	rdword	local08, result2
19490     14 1F 52 F2 | 	cmps	local01, local06 wc
19494     C0 00 90 3D |  if_ae	jmp	#LR__2604
19498     13 1F 52 FC | 	wrword	local01, local05
1949c     13 13 02 F6 | 	mov	arg01, local05
194a0     0F 2D 02 F6 | 	mov	local08, local01
194a4     04 2C 66 F0 | 	shl	local08, #4
194a8     16 13 02 F1 | 	add	arg01, local08
194ac     0F 29 82 F1 | 	sub	local06, local01
194b0     09 29 52 FC | 	wrword	local06, arg01
194b4     09 2D 02 F6 | 	mov	local08, arg01
194b8     02 2C 06 F1 | 	add	local08, #2
194bc     36 00 80 FF 
194c0     16 1F 59 FC | 	wrword	##27791, local08
194c4     13 15 0A F6 | 	mov	arg02, local05 wz
194c8     00 FA 05 A6 |  if_e	mov	result1, #0
194cc     11 15 82 51 |  if_ne	sub	arg02, local03
194d0     04 14 46 50 |  if_ne	shr	arg02, #4
194d4     0A FB 01 56 |  if_ne	mov	result1, arg02
194d8     09 2D 02 F6 | 	mov	local08, arg01
194dc     04 2C 06 F1 | 	add	local08, #4
194e0     16 FB 51 FC | 	wrword	result1, local08
194e4     13 2D 02 F6 | 	mov	local08, local05
194e8     06 2C 06 F1 | 	add	local08, #6
194ec     09 15 02 F6 | 	mov	arg02, arg01
194f0     16 2D E2 FA | 	rdword	local08, local08
194f4     06 14 06 F1 | 	add	arg02, #6
194f8     0A 2D 52 FC | 	wrword	local08, arg02
194fc     09 2F 02 F6 | 	mov	local09, arg01
19500     17 15 0A F6 | 	mov	arg02, local09 wz
19504     00 FA 05 A6 |  if_e	mov	result1, #0
19508     11 15 82 51 |  if_ne	sub	arg02, local03
1950c     04 14 46 50 |  if_ne	shr	arg02, #4
19510     0A FB 01 56 |  if_ne	mov	result1, arg02
19514     FD 2C 02 F6 | 	mov	local08, result1
19518     09 31 EA FA | 	rdword	local10, arg01 wz
1951c     00 FA 05 A6 |  if_e	mov	result1, #0
19520     04 30 66 50 |  if_ne	shl	local10, #4
19524     18 13 02 51 |  if_ne	add	arg01, local10
19528     09 FB 01 56 |  if_ne	mov	result1, arg01
1952c     FD 32 0A F6 | 	mov	local11, result1 wz
19530     24 00 90 AD |  if_e	jmp	#LR__2603
19534     12 33 52 F2 | 	cmps	local11, local04 wc
19538     1C 00 90 3D |  if_ae	jmp	#LR__2603
1953c     17 15 0A F6 | 	mov	arg02, local09 wz
19540     00 FA 05 A6 |  if_e	mov	result1, #0
19544     11 15 82 51 |  if_ne	sub	arg02, local03
19548     04 14 46 50 |  if_ne	shr	arg02, #4
1954c     0A FB 01 56 |  if_ne	mov	result1, arg02
19550     04 32 06 F1 | 	add	local11, #4
19554     19 FB 51 FC | 	wrword	result1, local11
19558                 | LR__2603
19558                 | LR__2604
19558     06 2A 06 F1 | 	add	local07, #6
1955c     15 2D 52 FC | 	wrword	local08, local07
19560     36 00 00 FF 
19564     80 2E 06 F6 | 	mov	local09, ##27776
19568     10 2F 42 F5 | 	or	local09, local02
1956c     00 FA 05 F6 | 	mov	result1, #0
19570     01 FA 61 FD | 	cogid	result1
19574     FD 2E 42 F5 | 	or	local09, result1
19578     13 33 02 F6 | 	mov	local11, local05
1957c     02 32 06 F1 | 	add	local11, #2
19580     19 2F 52 FC | 	wrword	local09, local11
19584     11 2F 02 F6 | 	mov	local09, local03
19588     08 2E 06 F1 | 	add	local09, #8
1958c     13 33 02 F6 | 	mov	local11, local05
19590     17 2F E2 FA | 	rdword	local09, local09
19594     06 32 06 F1 | 	add	local11, #6
19598     19 2F 52 FC | 	wrword	local09, local11
1959c     13 15 0A F6 | 	mov	arg02, local05 wz
195a0     00 FA 05 A6 |  if_e	mov	result1, #0
195a4     11 15 82 51 |  if_ne	sub	arg02, local03
195a8     04 14 46 50 |  if_ne	shr	arg02, #4
195ac     0A FB 01 56 |  if_ne	mov	result1, arg02
195b0     08 22 06 F1 | 	add	local03, #8
195b4     11 FB 51 FC | 	wrword	result1, local03
195b8     08 26 06 F1 | 	add	local05, #8
195bc     13 FB 01 F6 | 	mov	result1, local05
195c0                 | LR__2605
195c0     A7 F0 03 F6 | 	mov	ptra, fp
195c4     B2 00 A0 FD | 	call	#popregs_
195c8                 | __system___gc_tryalloc_ret
195c8     2D 00 64 FD | 	ret
195cc                 | 
195cc                 | __system___gc_alloc_managed
195cc     01 4A 05 F6 | 	mov	COUNT_, #1
195d0     A8 00 A0 FD | 	call	#pushregs_
195d4     09 1F 02 F6 | 	mov	local01, arg01
195d8     00 14 06 F6 | 	mov	arg02, #0
195dc     1C 00 B0 FD | 	call	#__system___gc_doalloc
195e0     FD 14 0A F6 | 	mov	arg02, result1 wz
195e4     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
195e8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
195ec     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
195f0     A7 F0 03 F6 | 	mov	ptra, fp
195f4     B2 00 A0 FD | 	call	#popregs_
195f8                 | __system___gc_alloc_managed_ret
195f8     2D 00 64 FD | 	ret
195fc                 | 
195fc                 | __system___gc_doalloc
195fc     06 4A 05 F6 | 	mov	COUNT_, #6
19600     A8 00 A0 FD | 	call	#pushregs_
19604     09 1F 0A F6 | 	mov	local01, arg01 wz
19608     0A 21 02 F6 | 	mov	local02, arg02
1960c     00 FA 05 A6 |  if_e	mov	result1, #0
19610     8C 00 90 AD |  if_e	jmp	#LR__2617
19614     17 1E 06 F1 | 	add	local01, #23
19618     0F 1E 26 F5 | 	andn	local01, #15
1961c     04 1E 46 F0 | 	shr	local01, #4
19620     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19624     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19628     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1962c     34 C5 BF FD | 	call	#__system___lockmem
19630     0F 13 02 F6 | 	mov	arg01, local01
19634     10 15 02 F6 | 	mov	arg02, local02
19638     D8 FD BF FD | 	call	#__system___gc_tryalloc
1963c     FD 22 0A F6 | 	mov	local03, result1 wz
19640     14 00 90 5D |  if_ne	jmp	#LR__2610
19644     70 03 B0 FD | 	call	#__system___gc_docollect
19648     0F 13 02 F6 | 	mov	arg01, local01
1964c     10 15 02 F6 | 	mov	arg02, local02
19650     C0 FD BF FD | 	call	#__system___gc_tryalloc
19654     FD 22 02 F6 | 	mov	local03, result1
19658                 | LR__2610
19658     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1965c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19660     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19664     09 01 68 FC | 	wrlong	#0, arg01
19668     00 22 0E F2 | 	cmp	local03, #0 wz
1966c     2C 00 90 AD |  if_e	jmp	#LR__2616
19670     04 1E 66 F0 | 	shl	local01, #4
19674     08 1E 86 F1 | 	sub	local01, #8
19678     0F 25 52 F6 | 	abs	local04, local01 wc
1967c     02 24 46 F0 | 	shr	local04, #2
19680     12 27 8A F6 | 	negc	local05, local04 wz
19684     11 29 02 F6 | 	mov	local06, local03
19688     10 00 90 AD |  if_e	jmp	#LR__2615
1968c     97 06 48 FB | 	callpa	#(@LR__2613-@LR__2611)>>2,fcache_load_ptr_
19690                 | LR__2611
19690     13 05 D8 FC | 	rep	@LR__2614, local05
19694                 | LR__2612
19694     14 01 68 FC | 	wrlong	#0, local06
19698     04 28 06 F1 | 	add	local06, #4
1969c                 | LR__2613
1969c                 | LR__2614
1969c                 | LR__2615
1969c                 | LR__2616
1969c     11 FB 01 F6 | 	mov	result1, local03
196a0                 | LR__2617
196a0     A7 F0 03 F6 | 	mov	ptra, fp
196a4     B2 00 A0 FD | 	call	#popregs_
196a8                 | __system___gc_doalloc_ret
196a8     2D 00 64 FD | 	ret
196ac                 | 
196ac                 | __system___gc_isvalidptr
196ac     F8 16 06 F4 | 	bitl	arg03, #248
196b0     08 16 86 F1 | 	sub	arg03, #8
196b4     09 17 52 F2 | 	cmps	arg03, arg01 wc
196b8     08 00 90 CD |  if_b	jmp	#LR__2620
196bc     0A 17 52 F2 | 	cmps	arg03, arg02 wc
196c0     08 00 90 CD |  if_b	jmp	#LR__2621
196c4                 | LR__2620
196c4     00 FA 05 F6 | 	mov	result1, #0
196c8     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
196cc                 | LR__2621
196cc     0B 01 02 F6 | 	mov	_var01, arg03
196d0     09 01 62 F5 | 	xor	_var01, arg01
196d4     0F 00 CE F7 | 	test	_var01, #15 wz
196d8     00 FA 05 56 |  if_ne	mov	result1, #0
196dc     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
196e0     0B 01 02 F6 | 	mov	_var01, arg03
196e4     02 00 06 F1 | 	add	_var01, #2
196e8     00 01 E2 FA | 	rdword	_var01, _var01
196ec     7F 00 00 FF 
196f0     C0 01 06 F5 | 	and	_var01, ##65472
196f4     36 00 00 FF 
196f8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
196fc     00 FA 05 56 |  if_ne	mov	result1, #0
19700     0B FB 01 A6 |  if_e	mov	result1, arg03
19704                 | __system___gc_isvalidptr_ret
19704     2D 00 64 FD | 	ret
19708                 | 
19708                 | __system___gc_free
19708     09 17 02 F6 | 	mov	arg03, arg01
1970c     6C FC BF FD | 	call	#__system___gc_ptrs
19710     FD 12 02 F6 | 	mov	arg01, result1
19714     FE 14 02 F6 | 	mov	arg02, result2
19718     90 FF BF FD | 	call	#__system___gc_isvalidptr
1971c     FD 14 0A F6 | 	mov	arg02, result1 wz
19720     28 00 90 AD |  if_e	jmp	#LR__2630
19724     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19728     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1972c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19730     30 C4 BF FD | 	call	#__system___lockmem
19734     0A 13 02 F6 | 	mov	arg01, arg02
19738     14 00 B0 FD | 	call	#__system___gc_dofree
1973c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19740     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19744     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19748     09 01 68 FC | 	wrlong	#0, arg01
1974c                 | LR__2630
1974c                 | __system___gc_free_ret
1974c     2D 00 64 FD | 	ret
19750                 | 
19750                 | __system___gc_dofree
19750     06 4A 05 F6 | 	mov	COUNT_, #6
19754     A8 00 A0 FD | 	call	#pushregs_
19758     09 1F 02 F6 | 	mov	local01, arg01
1975c     1C FC BF FD | 	call	#__system___gc_ptrs
19760     FD 20 02 F6 | 	mov	local02, result1
19764     FE 22 02 F6 | 	mov	local03, result2
19768     0F 15 02 F6 | 	mov	arg02, local01
1976c     02 14 06 F1 | 	add	arg02, #2
19770     36 00 80 FF 
19774     0A 1F 59 FC | 	wrword	##27791, arg02
19778     0F 25 02 F6 | 	mov	local04, local01
1977c     0F 13 02 F6 | 	mov	arg01, local01
19780     09 27 EA FA | 	rdword	local05, arg01 wz
19784     00 FA 05 A6 |  if_e	mov	result1, #0
19788     04 26 66 50 |  if_ne	shl	local05, #4
1978c     13 13 02 51 |  if_ne	add	arg01, local05
19790     09 FB 01 56 |  if_ne	mov	result1, arg01
19794     FD 28 02 F6 | 	mov	local06, result1
19798     97 24 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1979c                 | LR__2640
1979c     04 24 06 F1 | 	add	local04, #4
197a0     12 15 EA FA | 	rdword	arg02, local04 wz
197a4     10 13 02 F6 | 	mov	arg01, local02
197a8     00 FA 05 A6 |  if_e	mov	result1, #0
197ac     04 14 66 50 |  if_ne	shl	arg02, #4
197b0     0A 13 02 51 |  if_ne	add	arg01, arg02
197b4     09 FB 01 56 |  if_ne	mov	result1, arg01
197b8     FD 24 0A F6 | 	mov	local04, result1 wz
197bc     24 00 90 AD |  if_e	jmp	#LR__2642
197c0     12 13 02 F6 | 	mov	arg01, local04
197c4     00 FA 05 F6 | 	mov	result1, #0
197c8     02 12 06 F1 | 	add	arg01, #2
197cc     09 13 E2 FA | 	rdword	arg01, arg01
197d0     36 00 00 FF 
197d4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
197d8     01 FA 65 A6 |  if_e	neg	result1, #1
197dc     00 FA 0D F2 | 	cmp	result1, #0 wz
197e0     B8 FF 9F AD |  if_e	jmp	#LR__2640
197e4                 | LR__2641
197e4                 | LR__2642
197e4     00 24 0E F2 | 	cmp	local04, #0 wz
197e8     10 25 02 A6 |  if_e	mov	local04, local02
197ec     12 15 02 F6 | 	mov	arg02, local04
197f0     06 14 06 F1 | 	add	arg02, #6
197f4     0F 13 02 F6 | 	mov	arg01, local01
197f8     0A 15 E2 FA | 	rdword	arg02, arg02
197fc     06 12 06 F1 | 	add	arg01, #6
19800     09 15 52 FC | 	wrword	arg02, arg01
19804     0F 15 0A F6 | 	mov	arg02, local01 wz
19808     00 FA 05 A6 |  if_e	mov	result1, #0
1980c     10 15 82 51 |  if_ne	sub	arg02, local02
19810     04 14 46 50 |  if_ne	shr	arg02, #4
19814     0A FB 01 56 |  if_ne	mov	result1, arg02
19818     12 15 02 F6 | 	mov	arg02, local04
1981c     06 14 06 F1 | 	add	arg02, #6
19820     0A FB 51 FC | 	wrword	result1, arg02
19824     10 25 0A F2 | 	cmp	local04, local02 wz
19828     A4 00 90 AD |  if_e	jmp	#LR__2645
1982c     12 13 02 F6 | 	mov	arg01, local04
19830     09 27 EA FA | 	rdword	local05, arg01 wz
19834     00 FA 05 A6 |  if_e	mov	result1, #0
19838     04 26 66 50 |  if_ne	shl	local05, #4
1983c     13 13 02 51 |  if_ne	add	arg01, local05
19840     09 FB 01 56 |  if_ne	mov	result1, arg01
19844     0F FB 09 F2 | 	cmp	result1, local01 wz
19848     84 00 90 5D |  if_ne	jmp	#LR__2644
1984c     12 29 E2 FA | 	rdword	local06, local04
19850     0F 15 E2 FA | 	rdword	arg02, local01
19854     0A 29 02 F1 | 	add	local06, arg02
19858     12 29 52 FC | 	wrword	local06, local04
1985c     0F 29 02 F6 | 	mov	local06, local01
19860     02 28 06 F1 | 	add	local06, #2
19864     14 01 58 FC | 	wrword	#0, local06
19868     0F 13 02 F6 | 	mov	arg01, local01
1986c     09 27 EA FA | 	rdword	local05, arg01 wz
19870     00 FA 05 A6 |  if_e	mov	result1, #0
19874     04 26 66 50 |  if_ne	shl	local05, #4
19878     13 13 02 51 |  if_ne	add	arg01, local05
1987c     09 FB 01 56 |  if_ne	mov	result1, arg01
19880     FD 28 02 F6 | 	mov	local06, result1
19884     11 29 52 F2 | 	cmps	local06, local03 wc
19888     20 00 90 3D |  if_ae	jmp	#LR__2643
1988c     12 15 0A F6 | 	mov	arg02, local04 wz
19890     00 FA 05 A6 |  if_e	mov	result1, #0
19894     10 15 82 51 |  if_ne	sub	arg02, local02
19898     04 14 46 50 |  if_ne	shr	arg02, #4
1989c     0A FB 01 56 |  if_ne	mov	result1, arg02
198a0     14 15 02 F6 | 	mov	arg02, local06
198a4     04 14 06 F1 | 	add	arg02, #4
198a8     0A FB 51 FC | 	wrword	result1, arg02
198ac                 | LR__2643
198ac     0F 15 02 F6 | 	mov	arg02, local01
198b0     06 14 06 F1 | 	add	arg02, #6
198b4     12 FD 01 F6 | 	mov	result2, local04
198b8     0A 15 E2 FA | 	rdword	arg02, arg02
198bc     06 FC 05 F1 | 	add	result2, #6
198c0     FE 14 52 FC | 	wrword	arg02, result2
198c4     06 1E 06 F1 | 	add	local01, #6
198c8     0F 01 58 FC | 	wrword	#0, local01
198cc     12 1F 02 F6 | 	mov	local01, local04
198d0                 | LR__2644
198d0                 | LR__2645
198d0     0F 13 02 F6 | 	mov	arg01, local01
198d4     09 27 EA FA | 	rdword	local05, arg01 wz
198d8     00 FA 05 A6 |  if_e	mov	result1, #0
198dc     04 26 66 50 |  if_ne	shl	local05, #4
198e0     13 13 02 51 |  if_ne	add	arg01, local05
198e4     09 FB 01 56 |  if_ne	mov	result1, arg01
198e8     FD 14 0A F6 | 	mov	arg02, result1 wz
198ec     B8 00 90 AD |  if_e	jmp	#LR__2647
198f0     11 15 52 F2 | 	cmps	arg02, local03 wc
198f4     B0 00 90 3D |  if_ae	jmp	#LR__2647
198f8     0A 13 02 F6 | 	mov	arg01, arg02
198fc     00 FA 05 F6 | 	mov	result1, #0
19900     02 12 06 F1 | 	add	arg01, #2
19904     09 13 E2 FA | 	rdword	arg01, arg01
19908     36 00 00 FF 
1990c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
19910     01 FA 65 A6 |  if_e	neg	result1, #1
19914     00 FA 0D F2 | 	cmp	result1, #0 wz
19918     8C 00 90 AD |  if_e	jmp	#LR__2647
1991c     0F 25 02 F6 | 	mov	local04, local01
19920     12 29 E2 FA | 	rdword	local06, local04
19924     0A 13 02 F6 | 	mov	arg01, arg02
19928     09 1F E2 FA | 	rdword	local01, arg01
1992c     0F 29 02 F1 | 	add	local06, local01
19930     12 29 52 FC | 	wrword	local06, local04
19934     09 29 02 F6 | 	mov	local06, arg01
19938     06 28 06 F1 | 	add	local06, #6
1993c     12 1F 02 F6 | 	mov	local01, local04
19940     14 29 E2 FA | 	rdword	local06, local06
19944     06 1E 06 F1 | 	add	local01, #6
19948     0F 29 52 FC | 	wrword	local06, local01
1994c     09 29 02 F6 | 	mov	local06, arg01
19950     02 28 06 F1 | 	add	local06, #2
19954     14 55 59 FC | 	wrword	#170, local06
19958     09 29 02 F6 | 	mov	local06, arg01
1995c     06 28 06 F1 | 	add	local06, #6
19960     14 01 58 FC | 	wrword	#0, local06
19964     09 27 EA FA | 	rdword	local05, arg01 wz
19968     00 FA 05 A6 |  if_e	mov	result1, #0
1996c     04 26 66 50 |  if_ne	shl	local05, #4
19970     13 13 02 51 |  if_ne	add	arg01, local05
19974     09 FB 01 56 |  if_ne	mov	result1, arg01
19978     FD 28 0A F6 | 	mov	local06, result1 wz
1997c     28 00 90 AD |  if_e	jmp	#LR__2646
19980     11 29 52 F2 | 	cmps	local06, local03 wc
19984     20 00 90 3D |  if_ae	jmp	#LR__2646
19988     12 15 0A F6 | 	mov	arg02, local04 wz
1998c     00 FA 05 A6 |  if_e	mov	result1, #0
19990     10 15 82 51 |  if_ne	sub	arg02, local02
19994     04 14 46 50 |  if_ne	shr	arg02, #4
19998     0A FB 01 56 |  if_ne	mov	result1, arg02
1999c     14 25 02 F6 | 	mov	local04, local06
199a0     04 24 06 F1 | 	add	local04, #4
199a4     12 FB 51 FC | 	wrword	result1, local04
199a8                 | LR__2646
199a8                 | LR__2647
199a8     14 FB 01 F6 | 	mov	result1, local06
199ac     A7 F0 03 F6 | 	mov	ptra, fp
199b0     B2 00 A0 FD | 	call	#popregs_
199b4                 | __system___gc_dofree_ret
199b4     2D 00 64 FD | 	ret
199b8                 | 
199b8                 | __system___gc_docollect
199b8     05 4A 05 F6 | 	mov	COUNT_, #5
199bc     A8 00 A0 FD | 	call	#pushregs_
199c0     B8 F9 BF FD | 	call	#__system___gc_ptrs
199c4     FE 1E 02 F6 | 	mov	local01, result2
199c8     FD 20 02 F6 | 	mov	local02, result1
199cc     10 13 02 F6 | 	mov	arg01, local02
199d0     09 23 EA FA | 	rdword	local03, arg01 wz
199d4     00 FA 05 A6 |  if_e	mov	result1, #0
199d8     04 22 66 50 |  if_ne	shl	local03, #4
199dc     11 13 02 51 |  if_ne	add	arg01, local03
199e0     09 FB 01 56 |  if_ne	mov	result1, arg01
199e4     FD 24 0A F6 | 	mov	local04, result1 wz
199e8     00 FA 05 F6 | 	mov	result1, #0
199ec     01 FA 61 FD | 	cogid	result1
199f0     FD 26 02 F6 | 	mov	local05, result1
199f4     48 00 90 AD |  if_e	jmp	#LR__2652
199f8     97 22 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
199fc                 | LR__2650
199fc     0F 25 52 F2 | 	cmps	local04, local01 wc
19a00     3C 00 90 3D |  if_ae	jmp	#LR__2652
19a04     12 15 02 F6 | 	mov	arg02, local04
19a08     02 14 06 F1 | 	add	arg02, #2
19a0c     0A 15 E2 FA | 	rdword	arg02, arg02
19a10     20 14 26 F5 | 	andn	arg02, #32
19a14     12 13 02 F6 | 	mov	arg01, local04
19a18     02 12 06 F1 | 	add	arg01, #2
19a1c     09 15 52 FC | 	wrword	arg02, arg01
19a20     12 13 02 F6 | 	mov	arg01, local04
19a24     09 23 EA FA | 	rdword	local03, arg01 wz
19a28     00 FA 05 A6 |  if_e	mov	result1, #0
19a2c     04 22 66 50 |  if_ne	shl	local03, #4
19a30     11 13 02 51 |  if_ne	add	arg01, local03
19a34     09 FB 01 56 |  if_ne	mov	result1, arg01
19a38     FD 24 0A F6 | 	mov	local04, result1 wz
19a3c     BC FF 9F 5D |  if_ne	jmp	#LR__2650
19a40                 | LR__2651
19a40                 | LR__2652
19a40     00 22 06 F6 | 	mov	local03, #0
19a44     00 12 06 F6 | 	mov	arg01, #0
19a48     F0 C0 BF FD | 	call	#__system____topofstack
19a4c     FD 14 02 F6 | 	mov	arg02, result1
19a50     11 13 02 F6 | 	mov	arg01, local03
19a54     90 00 B0 FD | 	call	#__system___gc_markhub
19a58     1C 01 B0 FD | 	call	#__system___gc_markcog
19a5c     10 13 02 F6 | 	mov	arg01, local02
19a60     09 23 EA FA | 	rdword	local03, arg01 wz
19a64     00 FA 05 A6 |  if_e	mov	result1, #0
19a68     04 22 66 50 |  if_ne	shl	local03, #4
19a6c     11 13 02 51 |  if_ne	add	arg01, local03
19a70     09 FB 01 56 |  if_ne	mov	result1, arg01
19a74     FD 20 0A F6 | 	mov	local02, result1 wz
19a78     60 00 90 AD |  if_e	jmp	#LR__2656
19a7c                 | LR__2653
19a7c     10 25 02 F6 | 	mov	local04, local02
19a80     12 13 02 F6 | 	mov	arg01, local04
19a84     09 23 EA FA | 	rdword	local03, arg01 wz
19a88     00 FA 05 A6 |  if_e	mov	result1, #0
19a8c     04 22 66 50 |  if_ne	shl	local03, #4
19a90     11 13 02 51 |  if_ne	add	arg01, local03
19a94     09 FB 01 56 |  if_ne	mov	result1, arg01
19a98     FD 20 02 F6 | 	mov	local02, result1
19a9c     12 15 02 F6 | 	mov	arg02, local04
19aa0     02 14 06 F1 | 	add	arg02, #2
19aa4     0A 15 E2 FA | 	rdword	arg02, arg02
19aa8     20 14 CE F7 | 	test	arg02, #32 wz
19aac     10 14 CE A7 |  if_e	test	arg02, #16 wz
19ab0     1C 00 90 5D |  if_ne	jmp	#LR__2655
19ab4     0A 15 42 F8 | 	getnib	arg02, arg02, #0
19ab8     13 15 0A F2 | 	cmp	arg02, local05 wz
19abc     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
19ac0     0C 00 90 5D |  if_ne	jmp	#LR__2654
19ac4     12 13 02 F6 | 	mov	arg01, local04
19ac8     84 FC BF FD | 	call	#__system___gc_dofree
19acc     FD 20 02 F6 | 	mov	local02, result1
19ad0                 | LR__2654
19ad0                 | LR__2655
19ad0     00 20 0E F2 | 	cmp	local02, #0 wz
19ad4     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
19ad8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2653
19adc                 | LR__2656
19adc     A7 F0 03 F6 | 	mov	ptra, fp
19ae0     B2 00 A0 FD | 	call	#popregs_
19ae4                 | __system___gc_docollect_ret
19ae4     2D 00 64 FD | 	ret
19ae8                 | 
19ae8                 | __system___gc_markhub
19ae8     04 4A 05 F6 | 	mov	COUNT_, #4
19aec     A8 00 A0 FD | 	call	#pushregs_
19af0     09 1F 02 F6 | 	mov	local01, arg01
19af4     0A 21 02 F6 | 	mov	local02, arg02
19af8     80 F8 BF FD | 	call	#__system___gc_ptrs
19afc     FD 22 02 F6 | 	mov	local03, result1
19b00     FE 24 02 F6 | 	mov	local04, result2
19b04                 | LR__2660
19b04     10 1F 52 F2 | 	cmps	local01, local02 wc
19b08     60 00 90 3D |  if_ae	jmp	#LR__2661
19b0c     0F 17 02 FB | 	rdlong	arg03, local01
19b10     04 1E 06 F1 | 	add	local01, #4
19b14     12 15 02 F6 | 	mov	arg02, local04
19b18     11 13 02 F6 | 	mov	arg01, local03
19b1c     8C FB BF FD | 	call	#__system___gc_isvalidptr
19b20     FD 16 0A F6 | 	mov	arg03, result1 wz
19b24     DC FF 9F AD |  if_e	jmp	#LR__2660
19b28     0B 13 02 F6 | 	mov	arg01, arg03
19b2c     00 FA 05 F6 | 	mov	result1, #0
19b30     02 12 06 F1 | 	add	arg01, #2
19b34     09 13 E2 FA | 	rdword	arg01, arg01
19b38     36 00 00 FF 
19b3c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
19b40     01 FA 65 A6 |  if_e	neg	result1, #1
19b44     00 FA 0D F2 | 	cmp	result1, #0 wz
19b48     B8 FF 9F 5D |  if_ne	jmp	#LR__2660
19b4c     0B FD 01 F6 | 	mov	result2, arg03
19b50     02 FC 05 F1 | 	add	result2, #2
19b54     FE FC E1 FA | 	rdword	result2, result2
19b58     0F FC 25 F5 | 	andn	result2, #15
19b5c     2E FC 45 F5 | 	or	result2, #46
19b60     02 16 06 F1 | 	add	arg03, #2
19b64     0B FD 51 FC | 	wrword	result2, arg03
19b68     98 FF 9F FD | 	jmp	#LR__2660
19b6c                 | LR__2661
19b6c     A7 F0 03 F6 | 	mov	ptra, fp
19b70     B2 00 A0 FD | 	call	#popregs_
19b74                 | __system___gc_markhub_ret
19b74     2D 00 64 FD | 	ret
19b78                 | 
19b78                 | __system___gc_markcog
19b78     04 4A 05 F6 | 	mov	COUNT_, #4
19b7c     A8 00 A0 FD | 	call	#pushregs_
19b80     F8 F7 BF FD | 	call	#__system___gc_ptrs
19b84     FD 1E 02 F6 | 	mov	local01, result1
19b88     FE 20 02 F6 | 	mov	local02, result2
19b8c     EF 23 06 F6 | 	mov	local03, #495
19b90                 | LR__2670
19b90                 | 	'.live	local03
19b90     00 22 96 F9 | 	alts	local03, #0
19b94     11 25 02 F6 | 	mov	local04, local03
19b98     0F 13 02 F6 | 	mov	arg01, local01
19b9c     10 15 02 F6 | 	mov	arg02, local02
19ba0     12 17 02 F6 | 	mov	arg03, local04
19ba4     04 FB BF FD | 	call	#__system___gc_isvalidptr
19ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
19bac     18 00 90 AD |  if_e	jmp	#LR__2671
19bb0     FD 24 02 F6 | 	mov	local04, result1
19bb4     02 24 06 F1 | 	add	local04, #2
19bb8     12 25 E2 FA | 	rdword	local04, local04
19bbc     20 24 46 F5 | 	or	local04, #32
19bc0     02 FA 05 F1 | 	add	result1, #2
19bc4     FD 24 52 FC | 	wrword	local04, result1
19bc8                 | LR__2671
19bc8     01 22 86 F1 | 	sub	local03, #1
19bcc     00 22 56 F2 | 	cmps	local03, #0 wc
19bd0     BC FF 9F 3D |  if_ae	jmp	#LR__2670
19bd4     A7 F0 03 F6 | 	mov	ptra, fp
19bd8     B2 00 A0 FD | 	call	#popregs_
19bdc                 | __system___gc_markcog_ret
19bdc     2D 00 64 FD | 	ret
19be0                 | 
19be0                 | __system__opendir
19be0     06 4A 05 F6 | 	mov	COUNT_, #6
19be4     A8 00 A0 FD | 	call	#pushregs_
19be8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19bec     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
19bf0     09 15 02 F6 | 	mov	arg02, arg01
19bf4     0F 13 02 F6 | 	mov	arg01, local01
19bf8     00 16 06 F6 | 	mov	arg03, #0
19bfc     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19c00     F8 C6 BF FD | 	call	#__system____getvfsforfile
19c04     FD 20 0A F6 | 	mov	local02, result1 wz
19c08     10 00 90 AD |  if_e	jmp	#LR__2680
19c0c     28 20 06 F1 | 	add	local02, #40
19c10     10 17 0A FB | 	rdlong	arg03, local02 wz
19c14     28 20 86 F1 | 	sub	local02, #40
19c18     14 00 90 5D |  if_ne	jmp	#LR__2681
19c1c                 | LR__2680
19c1c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19c20     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19c24     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19c28     00 FA 05 F6 | 	mov	result1, #0
19c2c     90 00 90 FD | 	jmp	#LR__2683
19c30                 | LR__2681
19c30     5C 12 06 F6 | 	mov	arg01, #92
19c34     10 14 06 F6 | 	mov	arg02, #16
19c38     C0 F9 BF FD | 	call	#__system___gc_doalloc
19c3c     FD 22 0A F6 | 	mov	local03, result1 wz
19c40     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19c44     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
19c48     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19c4c     00 FA 05 A6 |  if_e	mov	result1, #0
19c50     6C 00 90 AD |  if_e	jmp	#LR__2683
19c54     28 20 06 F1 | 	add	local02, #40
19c58     10 25 02 FB | 	rdlong	local04, local02
19c5c     12 27 02 F6 | 	mov	local05, local04
19c60     28 20 86 F1 | 	sub	local02, #40
19c64     13 26 46 F7 | 	zerox	local05, #19
19c68     14 24 46 F0 | 	shr	local04, #20
19c6c     02 24 66 F0 | 	shl	local04, #2
19c70     ED 24 02 F1 | 	add	local04, __methods__
19c74     12 25 02 FB | 	rdlong	local04, local04
19c78     11 13 02 F6 | 	mov	arg01, local03
19c7c     0F 15 02 F6 | 	mov	arg02, local01
19c80     F2 28 02 F6 | 	mov	local06, objptr
19c84     13 E5 01 F6 | 	mov	objptr, local05
19c88     2D 24 62 FD | 	call	local04
19c8c     14 E5 01 F6 | 	mov	objptr, local06
19c90     FD 16 0A F6 | 	mov	arg03, result1 wz
19c94     20 00 90 AD |  if_e	jmp	#LR__2682
19c98     00 16 4E F2 | 	cmps	arg03, #0 wz
19c9c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19ca0     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
19ca4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19ca8     11 13 02 F6 | 	mov	arg01, local03
19cac     58 FA BF FD | 	call	#__system___gc_free
19cb0     00 FA 05 F6 | 	mov	result1, #0
19cb4     08 00 90 FD | 	jmp	#LR__2683
19cb8                 | LR__2682
19cb8     11 21 62 FC | 	wrlong	local02, local03
19cbc     11 FB 01 F6 | 	mov	result1, local03
19cc0                 | LR__2683
19cc0     A7 F0 03 F6 | 	mov	ptra, fp
19cc4     B2 00 A0 FD | 	call	#popregs_
19cc8                 | __system__opendir_ret
19cc8     2D 00 64 FD | 	ret
19ccc                 | 
19ccc                 | __system__closedir
19ccc     04 4A 05 F6 | 	mov	COUNT_, #4
19cd0     A8 00 A0 FD | 	call	#pushregs_
19cd4     09 1F 02 F6 | 	mov	local01, arg01
19cd8     0F 13 02 FB | 	rdlong	arg01, local01
19cdc     2C 12 06 F1 | 	add	arg01, #44
19ce0     09 21 02 FB | 	rdlong	local02, arg01
19ce4     10 23 02 F6 | 	mov	local03, local02
19ce8     13 22 46 F7 | 	zerox	local03, #19
19cec     14 20 46 F0 | 	shr	local02, #20
19cf0     02 20 66 F0 | 	shl	local02, #2
19cf4     ED 20 02 F1 | 	add	local02, __methods__
19cf8     10 21 02 FB | 	rdlong	local02, local02
19cfc     0F 13 02 F6 | 	mov	arg01, local01
19d00     F2 24 02 F6 | 	mov	local04, objptr
19d04     11 E5 01 F6 | 	mov	objptr, local03
19d08     2D 20 62 FD | 	call	local02
19d0c     12 E5 01 F6 | 	mov	objptr, local04
19d10     FD 24 02 F6 | 	mov	local04, result1
19d14     0F 13 02 F6 | 	mov	arg01, local01
19d18     EC F9 BF FD | 	call	#__system___gc_free
19d1c     00 24 4E F2 | 	cmps	local04, #0 wz
19d20     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19d24     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
19d28     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19d2c     01 FA 65 56 |  if_ne	neg	result1, #1
19d30     00 FA 05 A6 |  if_e	mov	result1, #0
19d34     A7 F0 03 F6 | 	mov	ptra, fp
19d38     B2 00 A0 FD | 	call	#popregs_
19d3c                 | __system__closedir_ret
19d3c     2D 00 64 FD | 	ret
19d40                 | 
19d40                 | __system__readdir
19d40     04 4A 05 F6 | 	mov	COUNT_, #4
19d44     A8 00 A0 FD | 	call	#pushregs_
19d48     09 15 0A FB | 	rdlong	arg02, arg01 wz
19d4c     08 12 06 F1 | 	add	arg01, #8
19d50     09 1F 02 F6 | 	mov	local01, arg01
19d54     08 12 86 F1 | 	sub	arg01, #8
19d58     00 FA 05 A6 |  if_e	mov	result1, #0
19d5c     5C 00 90 AD |  if_e	jmp	#LR__2691
19d60     30 14 06 F1 | 	add	arg02, #48
19d64     0A 21 02 FB | 	rdlong	local02, arg02
19d68     10 23 02 F6 | 	mov	local03, local02
19d6c     13 22 46 F7 | 	zerox	local03, #19
19d70     14 20 46 F0 | 	shr	local02, #20
19d74     02 20 66 F0 | 	shl	local02, #2
19d78     ED 20 02 F1 | 	add	local02, __methods__
19d7c     10 21 02 FB | 	rdlong	local02, local02
19d80     0F 15 02 F6 | 	mov	arg02, local01
19d84     F2 24 02 F6 | 	mov	local04, objptr
19d88     11 E5 01 F6 | 	mov	objptr, local03
19d8c     2D 20 62 FD | 	call	local02
19d90     12 E5 01 F6 | 	mov	objptr, local04
19d94     00 FA 4D F2 | 	cmps	result1, #0 wz
19d98     1C 00 90 AD |  if_e	jmp	#LR__2690
19d9c     01 FA 55 F2 | 	cmps	result1, #1 wc
19da0     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
19da4     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19da8     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
19dac     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19db0     00 FA 05 F6 | 	mov	result1, #0
19db4     04 00 90 FD | 	jmp	#LR__2691
19db8                 | LR__2690
19db8     0F FB 01 F6 | 	mov	result1, local01
19dbc                 | LR__2691
19dbc     A7 F0 03 F6 | 	mov	ptra, fp
19dc0     B2 00 A0 FD | 	call	#popregs_
19dc4                 | __system__readdir_ret
19dc4     2D 00 64 FD | 	ret
19dc8                 | 
19dc8                 | __system___openraw
19dc8     15 4A 05 F6 | 	mov	COUNT_, #21
19dcc     A8 00 A0 FD | 	call	#pushregs_
19dd0     09 1F 02 F6 | 	mov	local01, arg01
19dd4     0A 21 02 F6 | 	mov	local02, arg02
19dd8     0B 23 02 F6 | 	mov	local03, arg03
19ddc     0C 25 02 F6 | 	mov	local04, arg04
19de0     04 26 06 F6 | 	mov	local05, #4
19de4     0F 29 02 F6 | 	mov	local06, local01
19de8     00 2A 06 F6 | 	mov	local07, #0
19dec     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19df0     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
19df4     16 13 02 F6 | 	mov	arg01, local08
19df8     10 15 02 F6 | 	mov	arg02, local02
19dfc     00 16 06 F6 | 	mov	arg03, #0
19e00     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19e04     F4 C4 BF FD | 	call	#__system____getvfsforfile
19e08     FD 2E 0A F6 | 	mov	local09, result1 wz
19e0c     10 00 90 AD |  if_e	jmp	#LR__2700
19e10     20 2E 06 F1 | 	add	local09, #32
19e14     17 FB 09 FB | 	rdlong	result1, local09 wz
19e18     20 2E 86 F1 | 	sub	local09, #32
19e1c     14 00 90 5D |  if_ne	jmp	#LR__2701
19e20                 | LR__2700
19e20     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19e24     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19e28     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19e2c     01 FA 65 F6 | 	neg	result1, #1
19e30     8C 02 90 FD | 	jmp	#LR__2714
19e34                 | LR__2701
19e34     14 13 02 F6 | 	mov	arg01, local06
19e38     00 14 06 F6 | 	mov	arg02, #0
19e3c     34 16 06 F6 | 	mov	arg03, #52
19e40     09 31 02 F6 | 	mov	local10, arg01
19e44     98 00 A0 FD | 	call	#\builtin_bytefill_
19e48     20 2E 06 F1 | 	add	local09, #32
19e4c     17 33 02 FB | 	rdlong	local11, local09
19e50     19 35 02 F6 | 	mov	local12, local11
19e54     19 37 02 F6 | 	mov	local13, local11
19e58     20 2E 86 F1 | 	sub	local09, #32
19e5c     1B 39 02 F6 | 	mov	local14, local13
19e60     13 34 46 F7 | 	zerox	local12, #19
19e64     14 38 46 F0 | 	shr	local14, #20
19e68     02 38 66 F0 | 	shl	local14, #2
19e6c     ED 38 02 F1 | 	add	local14, __methods__
19e70     1C 39 02 FB | 	rdlong	local14, local14
19e74     14 3B 02 F6 | 	mov	local15, local06
19e78     16 3D 02 F6 | 	mov	local16, local08
19e7c     11 3F 02 F6 | 	mov	local17, local03
19e80     1D 13 02 F6 | 	mov	arg01, local15
19e84     1E 15 02 F6 | 	mov	arg02, local16
19e88     1F 17 02 F6 | 	mov	arg03, local17
19e8c     F2 40 02 F6 | 	mov	local18, objptr
19e90     1A E5 01 F6 | 	mov	objptr, local12
19e94     2D 38 62 FD | 	call	local14
19e98     20 E5 01 F6 | 	mov	objptr, local18
19e9c     FD 42 0A F6 | 	mov	local19, result1 wz
19ea0     04 22 CE 57 |  if_ne	test	local03, #4 wz
19ea4     58 00 90 AD |  if_e	jmp	#LR__2702
19ea8     24 2E 06 F1 | 	add	local09, #36
19eac     17 33 02 FB | 	rdlong	local11, local09
19eb0     19 35 02 F6 | 	mov	local12, local11
19eb4     19 37 02 F6 | 	mov	local13, local11
19eb8     24 2E 86 F1 | 	sub	local09, #36
19ebc     1B 39 02 F6 | 	mov	local14, local13
19ec0     13 34 46 F7 | 	zerox	local12, #19
19ec4     14 38 46 F0 | 	shr	local14, #20
19ec8     02 38 66 F0 | 	shl	local14, #2
19ecc     ED 38 02 F1 | 	add	local14, __methods__
19ed0     1C 39 02 FB | 	rdlong	local14, local14
19ed4     14 3B 02 F6 | 	mov	local15, local06
19ed8     16 3D 02 F6 | 	mov	local16, local08
19edc     12 3F 02 F6 | 	mov	local17, local04
19ee0     1D 13 02 F6 | 	mov	arg01, local15
19ee4     1E 15 02 F6 | 	mov	arg02, local16
19ee8     1F 17 02 F6 | 	mov	arg03, local17
19eec     F2 40 02 F6 | 	mov	local18, objptr
19ef0     1A E5 01 F6 | 	mov	objptr, local12
19ef4     2D 38 62 FD | 	call	local14
19ef8     20 E5 01 F6 | 	mov	objptr, local18
19efc     FD 42 02 F6 | 	mov	local19, result1
19f00                 | LR__2702
19f00     00 42 0E F2 | 	cmp	local19, #0 wz
19f04     8C 01 90 5D |  if_ne	jmp	#LR__2712
19f08     11 45 02 F6 | 	mov	local20, local03
19f0c     03 44 0E F5 | 	and	local20, #3 wz
19f10     02 26 46 55 |  if_ne	or	local05, #2
19f14     01 44 0E F2 | 	cmp	local20, #1 wz
19f18     01 26 46 55 |  if_ne	or	local05, #1
19f1c     20 22 CE F7 | 	test	local03, #32 wz
19f20     C0 26 46 55 |  if_ne	or	local05, #192
19f24     08 28 06 F1 | 	add	local06, #8
19f28     14 27 62 FC | 	wrlong	local05, local06
19f2c     0C 28 06 F1 | 	add	local06, #12
19f30     14 47 0A FB | 	rdlong	local21, local06 wz
19f34     14 28 86 F1 | 	sub	local06, #20
19f38     18 00 90 5D |  if_ne	jmp	#LR__2703
19f3c     04 2E 06 F1 | 	add	local09, #4
19f40     17 47 02 FB | 	rdlong	local21, local09
19f44     04 2E 86 F1 | 	sub	local09, #4
19f48     14 28 06 F1 | 	add	local06, #20
19f4c     14 47 62 FC | 	wrlong	local21, local06
19f50     14 28 86 F1 | 	sub	local06, #20
19f54                 | LR__2703
19f54     18 28 06 F1 | 	add	local06, #24
19f58     14 47 0A FB | 	rdlong	local21, local06 wz
19f5c     18 28 86 F1 | 	sub	local06, #24
19f60     18 00 90 5D |  if_ne	jmp	#LR__2704
19f64     08 2E 06 F1 | 	add	local09, #8
19f68     17 47 02 FB | 	rdlong	local21, local09
19f6c     08 2E 86 F1 | 	sub	local09, #8
19f70     18 28 06 F1 | 	add	local06, #24
19f74     14 47 62 FC | 	wrlong	local21, local06
19f78     18 28 86 F1 | 	sub	local06, #24
19f7c                 | LR__2704
19f7c     24 28 06 F1 | 	add	local06, #36
19f80     14 47 0A FB | 	rdlong	local21, local06 wz
19f84     24 28 86 F1 | 	sub	local06, #36
19f88     17 47 02 AB |  if_e	rdlong	local21, local09
19f8c     24 28 06 A1 |  if_e	add	local06, #36
19f90     14 47 62 AC |  if_e	wrlong	local21, local06
19f94     24 28 86 A1 |  if_e	sub	local06, #36
19f98     28 28 06 F1 | 	add	local06, #40
19f9c     14 47 0A FB | 	rdlong	local21, local06 wz
19fa0     28 28 86 F1 | 	sub	local06, #40
19fa4     18 00 90 5D |  if_ne	jmp	#LR__2705
19fa8     10 2E 06 F1 | 	add	local09, #16
19fac     17 47 02 FB | 	rdlong	local21, local09
19fb0     10 2E 86 F1 | 	sub	local09, #16
19fb4     28 28 06 F1 | 	add	local06, #40
19fb8     14 47 62 FC | 	wrlong	local21, local06
19fbc     28 28 86 F1 | 	sub	local06, #40
19fc0                 | LR__2705
19fc0     30 28 06 F1 | 	add	local06, #48
19fc4     14 47 0A FB | 	rdlong	local21, local06 wz
19fc8     30 28 86 F1 | 	sub	local06, #48
19fcc     18 00 90 5D |  if_ne	jmp	#LR__2706
19fd0     0C 2E 06 F1 | 	add	local09, #12
19fd4     17 47 02 FB | 	rdlong	local21, local09
19fd8     0C 2E 86 F1 | 	sub	local09, #12
19fdc     30 28 06 F1 | 	add	local06, #48
19fe0     14 47 62 FC | 	wrlong	local21, local06
19fe4     30 28 86 F1 | 	sub	local06, #48
19fe8                 | LR__2706
19fe8     1C 28 06 F1 | 	add	local06, #28
19fec     14 47 0A FB | 	rdlong	local21, local06 wz
19ff0     1C 28 86 F1 | 	sub	local06, #28
19ff4     1C 00 90 5D |  if_ne	jmp	#LR__2707
19ff8     01 2A 06 F6 | 	mov	local07, #1
19ffc     F2 12 02 F6 | 	mov	arg01, objptr
1a000     00 B0 02 FF 
1a004     00 12 46 F5 | 	or	arg01, ##90177536
1a008     1C 28 06 F1 | 	add	local06, #28
1a00c     14 13 62 FC | 	wrlong	arg01, local06
1a010     1C 28 86 F1 | 	sub	local06, #28
1a014                 | LR__2707
1a014     20 28 06 F1 | 	add	local06, #32
1a018     14 47 0A FB | 	rdlong	local21, local06 wz
1a01c     20 28 86 F1 | 	sub	local06, #32
1a020     1C 00 90 5D |  if_ne	jmp	#LR__2708
1a024     01 2A 06 F6 | 	mov	local07, #1
1a028     F2 12 02 F6 | 	mov	arg01, objptr
1a02c     00 B8 02 FF 
1a030     00 12 46 F5 | 	or	arg01, ##91226112
1a034     20 28 06 F1 | 	add	local06, #32
1a038     14 13 62 FC | 	wrlong	arg01, local06
1a03c     20 28 86 F1 | 	sub	local06, #32
1a040                 | LR__2708
1a040     2C 28 06 F1 | 	add	local06, #44
1a044     14 47 0A FB | 	rdlong	local21, local06 wz
1a048     2C 28 86 F1 | 	sub	local06, #44
1a04c     44 00 90 5D |  if_ne	jmp	#LR__2711
1a050     14 2E 06 F1 | 	add	local09, #20
1a054     17 47 0A FB | 	rdlong	local21, local09 wz
1a058     14 2E 86 F1 | 	sub	local09, #20
1a05c     18 00 90 AD |  if_e	jmp	#LR__2709
1a060     14 2E 06 F1 | 	add	local09, #20
1a064     17 47 02 FB | 	rdlong	local21, local09
1a068     2C 28 06 F1 | 	add	local06, #44
1a06c     14 47 62 FC | 	wrlong	local21, local06
1a070     2C 28 86 F1 | 	sub	local06, #44
1a074     1C 00 90 FD | 	jmp	#LR__2710
1a078                 | LR__2709
1a078     01 2A 06 F6 | 	mov	local07, #1
1a07c     F2 12 02 F6 | 	mov	arg01, objptr
1a080     00 C0 02 FF 
1a084     00 12 46 F5 | 	or	arg01, ##92274688
1a088     2C 28 06 F1 | 	add	local06, #44
1a08c     14 13 62 FC | 	wrlong	arg01, local06
1a090     2C 28 86 F1 | 	sub	local06, #44
1a094                 | LR__2710
1a094                 | LR__2711
1a094                 | LR__2712
1a094     00 2A 0E F2 | 	cmp	local07, #0 wz
1a098     14 13 02 56 |  if_ne	mov	arg01, local06
1a09c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1a0a0     00 42 0E F2 | 	cmp	local19, #0 wz
1a0a4     00 12 06 A6 |  if_e	mov	arg01, #0
1a0a8     10 00 90 5D |  if_ne	jmp	#LR__2713
1a0ac     00 12 4E F2 | 	cmps	arg01, #0 wz
1a0b0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a0b4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a0b8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a0bc                 | LR__2713
1a0bc     21 FB 01 F6 | 	mov	result1, local19
1a0c0                 | LR__2714
1a0c0     A7 F0 03 F6 | 	mov	ptra, fp
1a0c4     B2 00 A0 FD | 	call	#popregs_
1a0c8                 | __system___openraw_ret
1a0c8     2D 00 64 FD | 	ret
1a0cc                 | 
1a0cc                 | __system___closeraw
1a0cc     05 4A 05 F6 | 	mov	COUNT_, #5
1a0d0     A8 00 A0 FD | 	call	#pushregs_
1a0d4     09 1F 02 F6 | 	mov	local01, arg01
1a0d8     00 20 06 F6 | 	mov	local02, #0
1a0dc     08 1E 06 F1 | 	add	local01, #8
1a0e0     0F FB 09 FB | 	rdlong	result1, local01 wz
1a0e4     08 1E 86 F1 | 	sub	local01, #8
1a0e8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a0ec     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1a0f0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a0f4     01 FA 65 A6 |  if_e	neg	result1, #1
1a0f8     A8 00 90 AD |  if_e	jmp	#LR__2722
1a0fc     2C 1E 06 F1 | 	add	local01, #44
1a100     0F FB 09 FB | 	rdlong	result1, local01 wz
1a104     2C 1E 86 F1 | 	sub	local01, #44
1a108     38 00 90 AD |  if_e	jmp	#LR__2720
1a10c     2C 1E 06 F1 | 	add	local01, #44
1a110     0F 23 02 FB | 	rdlong	local03, local01
1a114     11 25 02 F6 | 	mov	local04, local03
1a118     2C 1E 86 F1 | 	sub	local01, #44
1a11c     13 24 46 F7 | 	zerox	local04, #19
1a120     14 22 46 F0 | 	shr	local03, #20
1a124     02 22 66 F0 | 	shl	local03, #2
1a128     ED 22 02 F1 | 	add	local03, __methods__
1a12c     11 23 02 FB | 	rdlong	local03, local03
1a130     0F 13 02 F6 | 	mov	arg01, local01
1a134     F2 26 02 F6 | 	mov	local05, objptr
1a138     12 E5 01 F6 | 	mov	objptr, local04
1a13c     2D 22 62 FD | 	call	local03
1a140     13 E5 01 F6 | 	mov	objptr, local05
1a144                 | LR__2720
1a144     24 1E 06 F1 | 	add	local01, #36
1a148     0F 27 0A FB | 	rdlong	local05, local01 wz
1a14c     24 1E 86 F1 | 	sub	local01, #36
1a150     3C 00 90 AD |  if_e	jmp	#LR__2721
1a154     24 1E 06 F1 | 	add	local01, #36
1a158     0F 23 02 FB | 	rdlong	local03, local01
1a15c     11 25 02 F6 | 	mov	local04, local03
1a160     24 1E 86 F1 | 	sub	local01, #36
1a164     13 24 46 F7 | 	zerox	local04, #19
1a168     14 22 46 F0 | 	shr	local03, #20
1a16c     02 22 66 F0 | 	shl	local03, #2
1a170     ED 22 02 F1 | 	add	local03, __methods__
1a174     11 23 02 FB | 	rdlong	local03, local03
1a178     0F 13 02 F6 | 	mov	arg01, local01
1a17c     F2 26 02 F6 | 	mov	local05, objptr
1a180     12 E5 01 F6 | 	mov	objptr, local04
1a184     2D 22 62 FD | 	call	local03
1a188     13 E5 01 F6 | 	mov	objptr, local05
1a18c     FD 20 02 F6 | 	mov	local02, result1
1a190                 | LR__2721
1a190     0F 13 02 F6 | 	mov	arg01, local01
1a194     00 14 06 F6 | 	mov	arg02, #0
1a198     34 16 06 F6 | 	mov	arg03, #52
1a19c     98 00 A0 FD | 	call	#\builtin_bytefill_
1a1a0     10 FB 01 F6 | 	mov	result1, local02
1a1a4                 | LR__2722
1a1a4     A7 F0 03 F6 | 	mov	ptra, fp
1a1a8     B2 00 A0 FD | 	call	#popregs_
1a1ac                 | __system___closeraw_ret
1a1ac     2D 00 64 FD | 	ret
1a1b0                 | 
1a1b0                 | __system___vfs_open_sdcardx
1a1b0     0B 4A 05 F6 | 	mov	COUNT_, #11
1a1b4     A8 00 A0 FD | 	call	#pushregs_
1a1b8     09 23 02 F6 | 	mov	local03, arg01
1a1bc     0A 25 02 F6 | 	mov	local04, arg02
1a1c0     0B 27 02 F6 | 	mov	local05, arg03
1a1c4     0C 29 02 F6 | 	mov	local06, arg04
1a1c8     01 00 00 FF 
1a1cc     24 12 06 F6 | 	mov	arg01, ##548
1a1d0     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1a1d4     FD 2A 02 F6 | 	mov	local07, result1
1a1d8     01 00 00 FF 
1a1dc     34 12 06 F6 | 	mov	arg01, ##564
1a1e0     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1a1e4     FD 2C 02 F6 | 	mov	local08, result1
1a1e8     11 19 02 F6 | 	mov	arg04, local03
1a1ec     1F 18 C6 F0 | 	sar	arg04, #31
1a1f0     11 17 02 F6 | 	mov	arg03, local03
1a1f4     01 12 06 F6 | 	mov	arg01, #1
1a1f8     00 14 06 F6 | 	mov	arg02, #0
1a1fc     98 DF BF FD | 	call	#__system___int64_shl
1a200     FD 1E 02 F6 | 	mov	local01, result1
1a204     FE 2E 02 F6 | 	mov	local09, result2
1a208     12 19 02 F6 | 	mov	arg04, local04
1a20c     1F 18 C6 F0 | 	sar	arg04, #31
1a210     12 17 02 F6 | 	mov	arg03, local04
1a214     01 12 06 F6 | 	mov	arg01, #1
1a218     00 14 06 F6 | 	mov	arg02, #0
1a21c     78 DF BF FD | 	call	#__system___int64_shl
1a220     FD 1E 42 F5 | 	or	local01, result1
1a224     FE 2E 42 F5 | 	or	local09, result2
1a228     13 19 02 F6 | 	mov	arg04, local05
1a22c     1F 18 C6 F0 | 	sar	arg04, #31
1a230     13 17 02 F6 | 	mov	arg03, local05
1a234     01 12 06 F6 | 	mov	arg01, #1
1a238     00 14 06 F6 | 	mov	arg02, #0
1a23c     58 DF BF FD | 	call	#__system___int64_shl
1a240     FD 1E 42 F5 | 	or	local01, result1
1a244     FE 2E 42 F5 | 	or	local09, result2
1a248     14 19 02 F6 | 	mov	arg04, local06
1a24c     1F 18 C6 F0 | 	sar	arg04, #31
1a250     14 17 02 F6 | 	mov	arg03, local06
1a254     01 12 06 F6 | 	mov	arg01, #1
1a258     00 14 06 F6 | 	mov	arg02, #0
1a25c     38 DF BF FD | 	call	#__system___int64_shl
1a260     17 15 02 F6 | 	mov	arg02, local09
1a264     FD 1E 42 F5 | 	or	local01, result1
1a268     0A FD 41 F5 | 	or	result2, arg02
1a26c     FE 20 02 F6 | 	mov	local02, result2
1a270     0F 13 02 F6 | 	mov	arg01, local01
1a274     10 15 02 F6 | 	mov	arg02, local02
1a278     54 DF BF FD | 	call	#__system___usepins
1a27c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a280     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a284     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1a288     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a28c     00 FA 05 A6 |  if_e	mov	result1, #0
1a290     B4 00 90 AD |  if_e	jmp	#LR__2732
1a294     0F 31 02 F6 | 	mov	local10, local01
1a298     10 2F 02 F6 | 	mov	local09, local02
1a29c     01 00 00 FF 
1a2a0     08 2A 06 F1 | 	add	local07, ##520
1a2a4     15 31 62 FC | 	wrlong	local10, local07
1a2a8     04 2A 06 F1 | 	add	local07, #4
1a2ac     15 2F 62 FC | 	wrlong	local09, local07
1a2b0     01 00 00 FF 
1a2b4     0C 2A 86 F1 | 	sub	local07, ##524
1a2b8     14 1B 02 F6 | 	mov	arg05, local06
1a2bc     00 12 06 F6 | 	mov	arg01, #0
1a2c0     11 15 02 F6 | 	mov	arg02, local03
1a2c4     12 17 02 F6 | 	mov	arg03, local04
1a2c8     13 19 02 F6 | 	mov	arg04, local05
1a2cc     F2 30 02 F6 | 	mov	local10, objptr
1a2d0     15 E5 01 F6 | 	mov	objptr, local07
1a2d4     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1a2d8     18 E5 01 F6 | 	mov	objptr, local10
1a2dc     FD 32 0A F6 | 	mov	local11, result1 wz
1a2e0     24 00 90 5D |  if_ne	jmp	#LR__2730
1a2e4     26 01 00 FF 
1a2e8     9A 15 06 F6 | 	mov	arg02, ##@LR__4127
1a2ec     16 13 02 F6 | 	mov	arg01, local08
1a2f0     00 16 06 F6 | 	mov	arg03, #0
1a2f4     F2 32 02 F6 | 	mov	local11, objptr
1a2f8     15 E5 01 F6 | 	mov	objptr, local07
1a2fc     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
1a300     19 E5 01 F6 | 	mov	objptr, local11
1a304     FD 32 02 F6 | 	mov	local11, result1
1a308                 | LR__2730
1a308     00 32 0E F2 | 	cmp	local11, #0 wz
1a30c     24 00 90 AD |  if_e	jmp	#LR__2731
1a310     0F 13 02 F6 | 	mov	arg01, local01
1a314     10 15 02 F6 | 	mov	arg02, local02
1a318     08 DF BF FD | 	call	#__system___freepins
1a31c     19 13 6A F6 | 	neg	arg01, local11 wz
1a320     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a324     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a328     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a32c     00 FA 05 F6 | 	mov	result1, #0
1a330     14 00 90 FD | 	jmp	#LR__2732
1a334                 | LR__2731
1a334     15 13 02 F6 | 	mov	arg01, local07
1a338     F2 32 02 F6 | 	mov	local11, objptr
1a33c     15 E5 01 F6 | 	mov	objptr, local07
1a340     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1a344     19 E5 01 F6 | 	mov	objptr, local11
1a348                 | LR__2732
1a348     A7 F0 03 F6 | 	mov	ptra, fp
1a34c     B2 00 A0 FD | 	call	#popregs_
1a350                 | __system___vfs_open_sdcardx_ret
1a350     2D 00 64 FD | 	ret
1a354                 | 
1a354                 | __system____default_getc
1a354     03 4A 05 F6 | 	mov	COUNT_, #3
1a358     A8 00 A0 FD | 	call	#pushregs_
1a35c     09 1F 02 F6 | 	mov	local01, arg01
1a360     0F 21 02 FB | 	rdlong	local02, local01
1a364     08 20 06 F1 | 	add	local02, #8
1a368     10 23 02 FB | 	rdlong	local03, local02
1a36c     02 22 CE F7 | 	test	local03, #2 wz
1a370     0F 13 02 56 |  if_ne	mov	arg01, local01
1a374     00 01 B0 5D |  if_ne	call	#__system____default_flush
1a378     10 23 02 FB | 	rdlong	local03, local02
1a37c     01 22 46 F5 | 	or	local03, #1
1a380     10 23 62 FC | 	wrlong	local03, local02
1a384     08 20 86 F1 | 	sub	local02, #8
1a388     10 23 0A FB | 	rdlong	local03, local02 wz
1a38c     0C 00 90 5D |  if_ne	jmp	#LR__2740
1a390     0F 13 02 F6 | 	mov	arg01, local01
1a394     64 16 B0 FD | 	call	#__system____default_filbuf
1a398     FD 22 02 F6 | 	mov	local03, result1
1a39c                 | LR__2740
1a39c     01 22 56 F2 | 	cmps	local03, #1 wc
1a3a0     01 FA 65 C6 |  if_b	neg	result1, #1
1a3a4     1C 00 90 CD |  if_b	jmp	#LR__2741
1a3a8     01 22 86 F1 | 	sub	local03, #1
1a3ac     10 23 62 FC | 	wrlong	local03, local02
1a3b0     04 20 06 F1 | 	add	local02, #4
1a3b4     10 23 02 FB | 	rdlong	local03, local02
1a3b8     11 FB C1 FA | 	rdbyte	result1, local03
1a3bc     01 22 06 F1 | 	add	local03, #1
1a3c0     10 23 62 FC | 	wrlong	local03, local02
1a3c4                 | LR__2741
1a3c4     A7 F0 03 F6 | 	mov	ptra, fp
1a3c8     B2 00 A0 FD | 	call	#popregs_
1a3cc                 | __system____default_getc_ret
1a3cc     2D 00 64 FD | 	ret
1a3d0                 | 
1a3d0                 | __system____default_putc
1a3d0     06 4A 05 F6 | 	mov	COUNT_, #6
1a3d4     A8 00 A0 FD | 	call	#pushregs_
1a3d8     09 1F 02 F6 | 	mov	local01, arg01
1a3dc     0A 21 02 F6 | 	mov	local02, arg02
1a3e0     10 23 02 FB | 	rdlong	local03, local02
1a3e4     08 22 06 F1 | 	add	local03, #8
1a3e8     11 FB 01 FB | 	rdlong	result1, local03
1a3ec     01 FA CD F7 | 	test	result1, #1 wz
1a3f0     10 13 02 56 |  if_ne	mov	arg01, local02
1a3f4     80 00 B0 5D |  if_ne	call	#__system____default_flush
1a3f8     11 25 02 FB | 	rdlong	local04, local03
1a3fc     02 24 46 F5 | 	or	local04, #2
1a400     11 25 62 FC | 	wrlong	local04, local03
1a404     08 22 86 F1 | 	sub	local03, #8
1a408     11 27 02 FB | 	rdlong	local05, local03
1a40c     10 22 06 F1 | 	add	local03, #16
1a410     11 15 02 FB | 	rdlong	arg02, local03
1a414     10 22 86 F1 | 	sub	local03, #16
1a418     13 FB 01 F6 | 	mov	result1, local05
1a41c     0A FB 01 F1 | 	add	result1, arg02
1a420     FD 1E 42 FC | 	wrbyte	local01, result1
1a424     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1a428     01 26 06 F1 | 	add	local05, #1
1a42c     11 27 62 FC | 	wrlong	local05, local03
1a430     06 20 06 F1 | 	add	local02, #6
1a434     10 29 EA FA | 	rdword	local06, local02 wz
1a438     06 20 86 F1 | 	sub	local02, #6
1a43c     0C 22 06 51 |  if_ne	add	local03, #12
1a440     11 25 02 5B |  if_ne	rdlong	local04, local03
1a444     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1a448     0C 00 90 AD |  if_e	jmp	#LR__2750
1a44c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1a450     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1a454     10 00 90 5D |  if_ne	jmp	#LR__2751
1a458                 | LR__2750
1a458     10 13 02 F6 | 	mov	arg01, local02
1a45c     18 00 B0 FD | 	call	#__system____default_flush
1a460     00 FA 0D F2 | 	cmp	result1, #0 wz
1a464     01 1E 66 56 |  if_ne	neg	local01, #1
1a468                 | LR__2751
1a468     0F FB 01 F6 | 	mov	result1, local01
1a46c     A7 F0 03 F6 | 	mov	ptra, fp
1a470     B2 00 A0 FD | 	call	#popregs_
1a474                 | __system____default_putc_ret
1a474     2D 00 64 FD | 	ret
1a478                 | 
1a478                 | __system____default_flush
1a478     06 4A 05 F6 | 	mov	COUNT_, #6
1a47c     A8 00 A0 FD | 	call	#pushregs_
1a480     09 1F 02 F6 | 	mov	local01, arg01
1a484     0F 21 02 FB | 	rdlong	local02, local01
1a488     10 23 02 FB | 	rdlong	local03, local02
1a48c     08 20 06 F1 | 	add	local02, #8
1a490     10 FB 01 FB | 	rdlong	result1, local02
1a494     08 20 86 F1 | 	sub	local02, #8
1a498     02 FA CD F7 | 	test	result1, #2 wz
1a49c     D0 00 90 AD |  if_e	jmp	#LR__2762
1a4a0     01 22 56 F2 | 	cmps	local03, #1 wc
1a4a4     20 01 90 CD |  if_b	jmp	#LR__2764
1a4a8     08 1E 06 F1 | 	add	local01, #8
1a4ac     0F FB 01 FB | 	rdlong	result1, local01
1a4b0     08 1E 86 F1 | 	sub	local01, #8
1a4b4     40 FA CD F7 | 	test	result1, #64 wz
1a4b8     68 00 90 AD |  if_e	jmp	#LR__2761
1a4bc     08 1E 06 F1 | 	add	local01, #8
1a4c0     0F 17 02 FB | 	rdlong	arg03, local01
1a4c4     08 1E 86 F1 | 	sub	local01, #8
1a4c8     80 16 CE F7 | 	test	arg03, #128 wz
1a4cc     54 00 90 AD |  if_e	jmp	#LR__2760
1a4d0     30 1E 06 F1 | 	add	local01, #48
1a4d4     0F 25 02 FB | 	rdlong	local04, local01
1a4d8     12 27 02 F6 | 	mov	local05, local04
1a4dc     30 1E 86 F1 | 	sub	local01, #48
1a4e0     13 26 46 F7 | 	zerox	local05, #19
1a4e4     14 24 46 F0 | 	shr	local04, #20
1a4e8     02 24 66 F0 | 	shl	local04, #2
1a4ec     ED 24 02 F1 | 	add	local04, __methods__
1a4f0     12 25 02 FB | 	rdlong	local04, local04
1a4f4     0F 13 02 F6 | 	mov	arg01, local01
1a4f8     00 14 06 F6 | 	mov	arg02, #0
1a4fc     02 16 06 F6 | 	mov	arg03, #2
1a500     F2 28 02 F6 | 	mov	local06, objptr
1a504     13 E5 01 F6 | 	mov	objptr, local05
1a508     2D 24 62 FD | 	call	local04
1a50c     14 E5 01 F6 | 	mov	objptr, local06
1a510     08 1E 06 F1 | 	add	local01, #8
1a514     0F 29 02 FB | 	rdlong	local06, local01
1a518     80 28 26 F5 | 	andn	local06, #128
1a51c     0F 29 62 FC | 	wrlong	local06, local01
1a520     08 1E 86 F1 | 	sub	local01, #8
1a524                 | LR__2760
1a524                 | LR__2761
1a524     18 1E 06 F1 | 	add	local01, #24
1a528     0F 25 02 FB | 	rdlong	local04, local01
1a52c     12 27 02 F6 | 	mov	local05, local04
1a530     18 1E 86 F1 | 	sub	local01, #24
1a534     13 26 46 F7 | 	zerox	local05, #19
1a538     14 24 46 F0 | 	shr	local04, #20
1a53c     02 24 66 F0 | 	shl	local04, #2
1a540     ED 24 02 F1 | 	add	local04, __methods__
1a544     12 25 02 FB | 	rdlong	local04, local04
1a548     10 20 06 F1 | 	add	local02, #16
1a54c     10 15 02 FB | 	rdlong	arg02, local02
1a550     10 20 86 F1 | 	sub	local02, #16
1a554     0F 13 02 F6 | 	mov	arg01, local01
1a558     11 17 02 F6 | 	mov	arg03, local03
1a55c     F2 28 02 F6 | 	mov	local06, objptr
1a560     13 E5 01 F6 | 	mov	objptr, local05
1a564     2D 24 62 FD | 	call	local04
1a568     14 E5 01 F6 | 	mov	objptr, local06
1a56c     58 00 90 FD | 	jmp	#LR__2764
1a570                 | LR__2762
1a570     08 20 06 F1 | 	add	local02, #8
1a574     10 29 02 FB | 	rdlong	local06, local02
1a578     08 20 86 F1 | 	sub	local02, #8
1a57c     01 28 CE F7 | 	test	local06, #1 wz
1a580     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1a584     40 00 90 AD |  if_e	jmp	#LR__2763
1a588     30 1E 06 F1 | 	add	local01, #48
1a58c     0F 25 02 FB | 	rdlong	local04, local01
1a590     12 27 02 F6 | 	mov	local05, local04
1a594     30 1E 86 F1 | 	sub	local01, #48
1a598     13 26 46 F7 | 	zerox	local05, #19
1a59c     14 24 46 F0 | 	shr	local04, #20
1a5a0     02 24 66 F0 | 	shl	local04, #2
1a5a4     ED 24 02 F1 | 	add	local04, __methods__
1a5a8     12 25 02 FB | 	rdlong	local04, local04
1a5ac     0F 13 02 F6 | 	mov	arg01, local01
1a5b0     11 15 62 F6 | 	neg	arg02, local03
1a5b4     01 16 06 F6 | 	mov	arg03, #1
1a5b8     F2 28 02 F6 | 	mov	local06, objptr
1a5bc     13 E5 01 F6 | 	mov	objptr, local05
1a5c0     2D 24 62 FD | 	call	local04
1a5c4     14 E5 01 F6 | 	mov	objptr, local06
1a5c8                 | LR__2763
1a5c8                 | LR__2764
1a5c8     10 01 68 FC | 	wrlong	#0, local02
1a5cc     04 20 06 F1 | 	add	local02, #4
1a5d0     10 01 68 FC | 	wrlong	#0, local02
1a5d4     04 20 06 F1 | 	add	local02, #4
1a5d8     10 01 68 FC | 	wrlong	#0, local02
1a5dc     00 FA 05 F6 | 	mov	result1, #0
1a5e0     A7 F0 03 F6 | 	mov	ptra, fp
1a5e4     B2 00 A0 FD | 	call	#popregs_
1a5e8                 | __system____default_flush_ret
1a5e8     2D 00 64 FD | 	ret
1a5ec                 | 
1a5ec                 | __system____default_buffer_init
1a5ec     02 4A 05 F6 | 	mov	COUNT_, #2
1a5f0     A8 00 A0 FD | 	call	#pushregs_
1a5f4     09 1F 02 F6 | 	mov	local01, arg01
1a5f8     0F 21 02 FB | 	rdlong	local02, local01
1a5fc     0F 13 02 F6 | 	mov	arg01, local01
1a600     F8 02 B0 FD | 	call	#__system___isatty
1a604     00 FA 0D F2 | 	cmp	result1, #0 wz
1a608     06 1E 06 51 |  if_ne	add	local01, #6
1a60c     0F 0B 58 5C |  if_ne	wrword	#5, local01
1a610     06 1E 06 A1 |  if_e	add	local01, #6
1a614     0F 0D 58 AC |  if_e	wrword	#6, local01
1a618     14 20 06 F1 | 	add	local02, #20
1a61c     10 1F 02 F6 | 	mov	local01, local02
1a620     04 20 86 F1 | 	sub	local02, #4
1a624     10 1F 62 FC | 	wrlong	local01, local02
1a628     04 20 86 F1 | 	sub	local02, #4
1a62c     02 00 80 FF 
1a630     10 01 68 FC | 	wrlong	##1024, local02
1a634     00 FA 05 F6 | 	mov	result1, #0
1a638     A7 F0 03 F6 | 	mov	ptra, fp
1a63c     B2 00 A0 FD | 	call	#popregs_
1a640                 | __system____default_buffer_init_ret
1a640     2D 00 64 FD | 	ret
1a644                 | 
1a644                 | __system__stat
1a644     04 4A 05 F6 | 	mov	COUNT_, #4
1a648     A8 00 A0 FD | 	call	#pushregs_
1a64c     0A 1F 02 F6 | 	mov	local01, arg02
1a650     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1a654     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1a658     09 15 02 F6 | 	mov	arg02, arg01
1a65c     10 13 02 F6 | 	mov	arg01, local02
1a660     00 16 06 F6 | 	mov	arg03, #0
1a664     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1a668     90 BC BF FD | 	call	#__system____getvfsforfile
1a66c     FD 22 0A F6 | 	mov	local03, result1 wz
1a670     10 00 90 AD |  if_e	jmp	#LR__2770
1a674     34 22 06 F1 | 	add	local03, #52
1a678     11 17 0A FB | 	rdlong	arg03, local03 wz
1a67c     34 22 86 F1 | 	sub	local03, #52
1a680     14 00 90 5D |  if_ne	jmp	#LR__2771
1a684                 | LR__2770
1a684     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a688     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1a68c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a690     01 FA 65 F6 | 	neg	result1, #1
1a694     68 00 90 FD | 	jmp	#LR__2772
1a698                 | LR__2771
1a698     0F 13 02 F6 | 	mov	arg01, local01
1a69c     00 14 06 F6 | 	mov	arg02, #0
1a6a0     30 16 06 F6 | 	mov	arg03, #48
1a6a4     09 25 02 F6 | 	mov	local04, arg01
1a6a8     98 00 A0 FD | 	call	#\builtin_bytefill_
1a6ac     12 FB 01 F6 | 	mov	result1, local04
1a6b0     10 13 CA FA | 	rdbyte	arg01, local02 wz
1a6b4     08 1E 06 A1 |  if_e	add	local01, #8
1a6b8     08 00 80 AF 
1a6bc     0F FF 6B AC |  if_e	wrlong	##4607, local01
1a6c0     00 FA 05 A6 |  if_e	mov	result1, #0
1a6c4     38 00 90 AD |  if_e	jmp	#LR__2772
1a6c8     34 22 06 F1 | 	add	local03, #52
1a6cc     11 23 02 FB | 	rdlong	local03, local03
1a6d0     11 25 02 F6 | 	mov	local04, local03
1a6d4     13 22 46 F7 | 	zerox	local03, #19
1a6d8     14 24 46 F0 | 	shr	local04, #20
1a6dc     02 24 66 F0 | 	shl	local04, #2
1a6e0     ED 24 02 F1 | 	add	local04, __methods__
1a6e4     12 25 02 FB | 	rdlong	local04, local04
1a6e8     10 13 02 F6 | 	mov	arg01, local02
1a6ec     0F 15 02 F6 | 	mov	arg02, local01
1a6f0     F2 20 02 F6 | 	mov	local02, objptr
1a6f4     11 E5 01 F6 | 	mov	objptr, local03
1a6f8     2D 24 62 FD | 	call	local04
1a6fc     10 E5 01 F6 | 	mov	objptr, local02
1a700                 | LR__2772
1a700     A7 F0 03 F6 | 	mov	ptra, fp
1a704     B2 00 A0 FD | 	call	#popregs_
1a708                 | __system__stat_ret
1a708     2D 00 64 FD | 	ret
1a70c                 | 
1a70c                 | __system__read
1a70c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a710     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a714     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a718     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a71c     01 FA 65 36 |  if_ae	neg	result1, #1
1a720     20 00 90 3D |  if_ae	jmp	#LR__2780
1a724     34 12 06 FD | 	qmul	arg01, #52
1a728     02 00 00 FF 
1a72c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a730     18 12 62 FD | 	getqx	arg01
1a734     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1a738     02 00 00 FF 
1a73c     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a740     D0 0F B0 FD | 	call	#__system___vfsread
1a744                 | LR__2780
1a744                 | __system__read_ret
1a744     2D 00 64 FD | 	ret
1a748                 | 
1a748                 | __system__close
1a748     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a74c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a750     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a754     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a758     01 FA 65 36 |  if_ae	neg	result1, #1
1a75c     20 00 90 3D |  if_ae	jmp	#LR__2790
1a760     34 12 06 FD | 	qmul	arg01, #52
1a764     02 00 00 FF 
1a768     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a76c     18 12 62 FD | 	getqx	arg01
1a770     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1a774     02 00 00 FF 
1a778     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a77c     4C F9 BF FD | 	call	#__system___closeraw
1a780                 | LR__2790
1a780                 | __system__close_ret
1a780     2D 00 64 FD | 	ret
1a784                 | 
1a784                 | __system__lseek
1a784     06 4A 05 F6 | 	mov	COUNT_, #6
1a788     A8 00 A0 FD | 	call	#pushregs_
1a78c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a790     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a794     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a798     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a79c     01 FA 65 36 |  if_ae	neg	result1, #1
1a7a0     C4 00 90 3D |  if_ae	jmp	#LR__2801
1a7a4     34 12 06 FD | 	qmul	arg01, #52
1a7a8     02 00 00 FF 
1a7ac     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a7b0     18 1E 62 FD | 	getqx	local01
1a7b4     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1a7b8     30 1E 06 F1 | 	add	local01, #48
1a7bc     0F 13 0A FB | 	rdlong	arg01, local01 wz
1a7c0     30 1E 86 F1 | 	sub	local01, #48
1a7c4     02 00 00 FF 
1a7c8     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a7cc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a7d0     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1a7d4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a7d8     01 FA 65 A6 |  if_e	neg	result1, #1
1a7dc     88 00 90 AD |  if_e	jmp	#LR__2801
1a7e0     08 1E 06 F1 | 	add	local01, #8
1a7e4     0F 21 02 FB | 	rdlong	local02, local01
1a7e8     08 1E 86 F1 | 	sub	local01, #8
1a7ec     40 20 CE F7 | 	test	local02, #64 wz
1a7f0     08 1E 06 51 |  if_ne	add	local01, #8
1a7f4     0F 21 02 5B |  if_ne	rdlong	local02, local01
1a7f8     80 20 46 55 |  if_ne	or	local02, #128
1a7fc     0F 21 62 5C |  if_ne	wrlong	local02, local01
1a800     08 1E 86 51 |  if_ne	sub	local01, #8
1a804     30 1E 06 F1 | 	add	local01, #48
1a808     0F 23 02 FB | 	rdlong	local03, local01
1a80c     11 25 02 F6 | 	mov	local04, local03
1a810     30 1E 86 F1 | 	sub	local01, #48
1a814     13 24 46 F7 | 	zerox	local04, #19
1a818     14 22 46 F0 | 	shr	local03, #20
1a81c     02 22 66 F0 | 	shl	local03, #2
1a820     ED 22 02 F1 | 	add	local03, __methods__
1a824     11 23 02 FB | 	rdlong	local03, local03
1a828     0F 13 02 F6 | 	mov	arg01, local01
1a82c     F2 26 02 F6 | 	mov	local05, objptr
1a830     12 E5 01 F6 | 	mov	objptr, local04
1a834     2D 22 62 FD | 	call	local03
1a838     13 E5 01 F6 | 	mov	objptr, local05
1a83c     FD 28 02 F6 | 	mov	local06, result1
1a840     00 28 56 F2 | 	cmps	local06, #0 wc
1a844     1C 00 90 3D |  if_ae	jmp	#LR__2800
1a848     14 13 6A F6 | 	neg	arg01, local06 wz
1a84c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a850     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a854     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a858     01 FA 65 56 |  if_ne	neg	result1, #1
1a85c     00 FA 05 A6 |  if_e	mov	result1, #0
1a860     04 00 90 FD | 	jmp	#LR__2801
1a864                 | LR__2800
1a864     14 FB 01 F6 | 	mov	result1, local06
1a868                 | LR__2801
1a868     A7 F0 03 F6 | 	mov	ptra, fp
1a86c     B2 00 A0 FD | 	call	#popregs_
1a870                 | __system__lseek_ret
1a870     2D 00 64 FD | 	ret
1a874                 | 
1a874                 | __system___ioctl
1a874     03 4A 05 F6 | 	mov	COUNT_, #3
1a878     A8 00 A0 FD | 	call	#pushregs_
1a87c     00 12 4E F2 | 	cmps	arg01, #0 wz
1a880     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a884     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1a888     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a88c     01 FA 65 A6 |  if_e	neg	result1, #1
1a890     5C 00 90 AD |  if_e	jmp	#LR__2811
1a894     28 12 06 F1 | 	add	arg01, #40
1a898     09 1F 02 FB | 	rdlong	local01, arg01
1a89c     0F 21 02 F6 | 	mov	local02, local01
1a8a0     28 12 86 F1 | 	sub	arg01, #40
1a8a4     13 20 46 F7 | 	zerox	local02, #19
1a8a8     14 1E 46 F0 | 	shr	local01, #20
1a8ac     02 1E 66 F0 | 	shl	local01, #2
1a8b0     ED 1E 02 F1 | 	add	local01, __methods__
1a8b4     0F 1F 02 FB | 	rdlong	local01, local01
1a8b8     F2 22 02 F6 | 	mov	local03, objptr
1a8bc     10 E5 01 F6 | 	mov	objptr, local02
1a8c0     2D 1E 62 FD | 	call	local01
1a8c4     11 E5 01 F6 | 	mov	objptr, local03
1a8c8     FD 12 0A F6 | 	mov	arg01, result1 wz
1a8cc     1C 00 90 AD |  if_e	jmp	#LR__2810
1a8d0     00 12 4E F2 | 	cmps	arg01, #0 wz
1a8d4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a8d8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a8dc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a8e0     01 FA 65 56 |  if_ne	neg	result1, #1
1a8e4     00 FA 05 A6 |  if_e	mov	result1, #0
1a8e8     04 00 90 FD | 	jmp	#LR__2811
1a8ec                 | LR__2810
1a8ec     00 FA 05 F6 | 	mov	result1, #0
1a8f0                 | LR__2811
1a8f0     A7 F0 03 F6 | 	mov	ptra, fp
1a8f4     B2 00 A0 FD | 	call	#popregs_
1a8f8                 | __system___ioctl_ret
1a8f8     2D 00 64 FD | 	ret
1a8fc                 | 
1a8fc                 | __system___isatty
1a8fc     00 4A 05 F6 | 	mov	COUNT_, #0
1a900     A8 00 A0 FD | 	call	#pushregs_
1a904     0C F0 07 F1 | 	add	ptra, #12
1a908     04 4E 05 F1 | 	add	fp, #4
1a90c     A7 12 62 FC | 	wrlong	arg01, fp
1a910     04 4E 05 F1 | 	add	fp, #4
1a914     A7 16 02 F6 | 	mov	arg03, fp
1a918     08 4E 85 F1 | 	sub	fp, #8
1a91c     00 15 06 F6 | 	mov	arg02, #256
1a920     50 FF BF FD | 	call	#__system___ioctl
1a924     00 FA 0D F2 | 	cmp	result1, #0 wz
1a928     01 FA 05 A6 |  if_e	mov	result1, #1
1a92c     00 FA 05 56 |  if_ne	mov	result1, #0
1a930     A7 F0 03 F6 | 	mov	ptra, fp
1a934     B2 00 A0 FD | 	call	#popregs_
1a938                 | __system___isatty_ret
1a938     2D 00 64 FD | 	ret
1a93c                 | 
1a93c                 | __system____getftab
1a93c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a940     34 12 06 CD |  if_b	qmul	arg01, #52
1a944     00 FA 05 36 |  if_ae	mov	result1, #0
1a948     02 00 00 CF 
1a94c     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1a950     18 FA 61 CD |  if_b	getqx	result1
1a954     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1a958     02 00 00 CF 
1a95c     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1a960                 | __system____getftab_ret
1a960     2D 00 64 FD | 	ret
1a964                 | 
1a964                 | __system__strncpy
1a964     09 01 02 F6 | 	mov	_var01, arg01
1a968                 | LR__2820
1a968     01 16 86 F1 | 	sub	arg03, #1
1a96c     00 16 56 F2 | 	cmps	arg03, #0 wc
1a970     18 00 90 CD |  if_b	jmp	#LR__2821
1a974     0A FB C1 FA | 	rdbyte	result1, arg02
1a978     00 FB 41 FC | 	wrbyte	result1, _var01
1a97c     01 14 06 F1 | 	add	arg02, #1
1a980     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a984     01 00 06 F1 | 	add	_var01, #1
1a988     DC FF 9F 5D |  if_ne	jmp	#LR__2820
1a98c                 | LR__2821
1a98c     97 0C 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
1a990                 | LR__2822
1a990     01 16 86 F1 | 	sub	arg03, #1
1a994     00 16 56 F2 | 	cmps	arg03, #0 wc
1a998     00 03 02 36 |  if_ae	mov	_var02, _var01
1a99c     01 00 06 31 |  if_ae	add	_var01, #1
1a9a0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1a9a4     E8 FF 9F 3D |  if_ae	jmp	#LR__2822
1a9a8                 | LR__2823
1a9a8     09 FB 01 F6 | 	mov	result1, arg01
1a9ac                 | __system__strncpy_ret
1a9ac     2D 00 64 FD | 	ret
1a9b0                 | 
1a9b0                 | __system__strncat
1a9b0     00 14 4E F2 | 	cmps	arg02, #0 wz
1a9b4     50 00 90 AD |  if_e	jmp	#LR__2834
1a9b8     01 16 16 F2 | 	cmp	arg03, #1 wc
1a9bc     48 00 90 CD |  if_b	jmp	#LR__2834
1a9c0     09 01 02 F6 | 	mov	_var01, arg01
1a9c4     97 1E 48 FB | 	callpa	#(@LR__2832-@LR__2830)>>2,fcache_load_ptr_
1a9c8                 | LR__2830
1a9c8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a9cc     01 00 06 51 |  if_ne	add	_var01, #1
1a9d0     F4 FF 9F 5D |  if_ne	jmp	#LR__2830
1a9d4     0B 03 02 F6 | 	mov	_var02, arg03
1a9d8                 | LR__2831
1a9d8     0A 05 C2 FA | 	rdbyte	_var03, arg02
1a9dc     02 07 02 F6 | 	mov	_var04, _var03
1a9e0     07 06 4E F7 | 	zerox	_var04, #7 wz
1a9e4     01 14 06 F1 | 	add	arg02, #1
1a9e8     18 00 90 AD |  if_e	jmp	#LR__2833
1a9ec     01 02 86 F1 | 	sub	_var02, #1
1a9f0     00 02 56 F2 | 	cmps	_var02, #0 wc
1a9f4     00 07 02 36 |  if_ae	mov	_var04, _var01
1a9f8     01 00 06 31 |  if_ae	add	_var01, #1
1a9fc     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1aa00     D4 FF 9F 3D |  if_ae	jmp	#LR__2831
1aa04                 | LR__2832
1aa04                 | LR__2833
1aa04     00 01 48 FC | 	wrbyte	#0, _var01
1aa08                 | LR__2834
1aa08     09 FB 01 F6 | 	mov	result1, arg01
1aa0c                 | __system__strncat_ret
1aa0c     2D 00 64 FD | 	ret
1aa10                 | 
1aa10                 | __system__strncmp
1aa10     09 01 0A F6 | 	mov	_var01, arg01 wz
1aa14     14 00 90 5D |  if_ne	jmp	#LR__2840
1aa18     00 14 0E F2 | 	cmp	arg02, #0 wz
1aa1c     01 02 66 56 |  if_ne	neg	_var02, #1
1aa20     00 02 06 A6 |  if_e	mov	_var02, #0
1aa24     01 FB 01 F6 | 	mov	result1, _var02
1aa28     74 00 90 FD | 	jmp	#__system__strncmp_ret
1aa2c                 | LR__2840
1aa2c     00 14 0E F2 | 	cmp	arg02, #0 wz
1aa30     01 FA 05 A6 |  if_e	mov	result1, #1
1aa34     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1aa38     0B 05 02 F6 | 	mov	_var03, arg03
1aa3c     97 16 48 FB | 	callpa	#(@LR__2842-@LR__2841)>>2,fcache_load_ptr_
1aa40                 | LR__2841
1aa40     00 07 C2 FA | 	rdbyte	_var04, _var01
1aa44     0A 09 02 F6 | 	mov	_var05, arg02
1aa48     04 0B C2 FA | 	rdbyte	_var06, _var05
1aa4c     01 04 86 F1 | 	sub	_var03, #1
1aa50     00 04 56 F2 | 	cmps	_var03, #0 wc
1aa54     01 00 06 F1 | 	add	_var01, #1
1aa58     01 14 06 F1 | 	add	arg02, #1
1aa5c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1aa60     08 00 90 2D |  if_nc_and_z	jmp	#LR__2843
1aa64     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1aa68     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2841
1aa6c                 | LR__2842
1aa6c                 | LR__2843
1aa6c     00 04 56 F2 | 	cmps	_var03, #0 wc
1aa70     00 FA 05 C6 |  if_b	mov	result1, #0
1aa74     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1aa78     05 07 0A F2 | 	cmp	_var04, _var06 wz
1aa7c     00 FA 05 A6 |  if_e	mov	result1, #0
1aa80     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1aa84     00 06 0E F2 | 	cmp	_var04, #0 wz
1aa88     01 FA 65 A6 |  if_e	neg	result1, #1
1aa8c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1aa90     00 0A 0E F2 | 	cmp	_var06, #0 wz
1aa94     01 FA 05 A6 |  if_e	mov	result1, #1
1aa98     03 FB 01 56 |  if_ne	mov	result1, _var04
1aa9c     05 FB 81 51 |  if_ne	sub	result1, _var06
1aaa0                 | __system__strncmp_ret
1aaa0     2D 00 64 FD | 	ret
1aaa4                 | 
1aaa4                 | __system____root_opendir
1aaa4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1aaa8     04 12 06 F1 | 	add	arg01, #4
1aaac     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1aab0     00 FA 05 F6 | 	mov	result1, #0
1aab4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1aab8                 | __system____root_opendir_ret
1aab8     2D 00 64 FD | 	ret
1aabc                 | 
1aabc                 | __system____root_readdir
1aabc     03 4A 05 F6 | 	mov	COUNT_, #3
1aac0     A8 00 A0 FD | 	call	#pushregs_
1aac4     09 1F 02 F6 | 	mov	local01, arg01
1aac8     0A 21 02 F6 | 	mov	local02, arg02
1aacc     04 1E 06 F1 | 	add	local01, #4
1aad0     0F 23 02 FB | 	rdlong	local03, local01
1aad4     04 1E 86 F1 | 	sub	local01, #4
1aad8                 | LR__2850
1aad8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1aadc     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1aae0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1aae4     01 FA 65 A6 |  if_e	neg	result1, #1
1aae8     48 00 90 AD |  if_e	jmp	#LR__2851
1aaec     11 17 0A FB | 	rdlong	arg03, local03 wz
1aaf0     04 22 06 A1 |  if_e	add	local03, #4
1aaf4     E0 FF 9F AD |  if_e	jmp	#LR__2850
1aaf8     11 15 02 FB | 	rdlong	arg02, local03
1aafc     01 14 06 F1 | 	add	arg02, #1
1ab00     10 13 02 F6 | 	mov	arg01, local02
1ab04     40 16 06 F6 | 	mov	arg03, #64
1ab08     58 FE BF FD | 	call	#__system__strncpy
1ab0c     50 20 06 F1 | 	add	local02, #80
1ab10     10 03 48 FC | 	wrbyte	#1, local02
1ab14     08 20 86 F1 | 	sub	local02, #8
1ab18     10 01 68 FC | 	wrlong	#0, local02
1ab1c     04 20 06 F1 | 	add	local02, #4
1ab20     10 01 68 FC | 	wrlong	#0, local02
1ab24     04 22 06 F1 | 	add	local03, #4
1ab28     04 1E 06 F1 | 	add	local01, #4
1ab2c     0F 23 62 FC | 	wrlong	local03, local01
1ab30     00 FA 05 F6 | 	mov	result1, #0
1ab34                 | LR__2851
1ab34     A7 F0 03 F6 | 	mov	ptra, fp
1ab38     B2 00 A0 FD | 	call	#popregs_
1ab3c                 | __system____root_readdir_ret
1ab3c     2D 00 64 FD | 	ret
1ab40                 | 
1ab40                 | __system____root_closedir
1ab40     00 FA 05 F6 | 	mov	result1, #0
1ab44                 | __system____root_closedir_ret
1ab44     2D 00 64 FD | 	ret
1ab48                 | 
1ab48                 | __system____root_stat
1ab48     0A 01 02 F6 | 	mov	_var01, arg02
1ab4c     00 13 02 F6 | 	mov	arg01, _var01
1ab50     00 14 06 F6 | 	mov	arg02, #0
1ab54     30 16 06 F6 | 	mov	arg03, #48
1ab58     98 00 A0 FD | 	call	#\builtin_bytefill_
1ab5c     08 00 06 F1 | 	add	_var01, #8
1ab60     08 00 80 FF 
1ab64     00 FF 6B FC | 	wrlong	##4607, _var01
1ab68     00 FA 05 F6 | 	mov	result1, #0
1ab6c                 | __system____root_stat_ret
1ab6c     2D 00 64 FD | 	ret
1ab70                 | 
1ab70                 | __system___normalizeName
1ab70     00 00 06 F6 | 	mov	_var01, #0
1ab74     09 03 02 F6 | 	mov	_var02, arg01
1ab78     01 05 02 F6 | 	mov	_var03, _var02
1ab7c                 | LR__2860
1ab7c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1ab80     5C 01 90 AD |  if_e	jmp	#LR__2879
1ab84     00 00 0E F2 | 	cmp	_var01, #0 wz
1ab88     02 07 02 56 |  if_ne	mov	_var04, _var03
1ab8c     01 04 06 51 |  if_ne	add	_var03, #1
1ab90     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1ab94     00 00 06 56 |  if_ne	mov	_var01, #0
1ab98     01 07 C2 FA | 	rdbyte	_var04, _var02
1ab9c     2E 06 0E F2 | 	cmp	_var04, #46 wz
1aba0     D8 00 90 5D |  if_ne	jmp	#LR__2872
1aba4     01 02 06 F1 | 	add	_var02, #1
1aba8     01 07 C2 FA | 	rdbyte	_var04, _var02
1abac     01 02 86 F1 | 	sub	_var02, #1
1abb0     2F 06 0E F2 | 	cmp	_var04, #47 wz
1abb4     18 00 90 AD |  if_e	jmp	#LR__2861
1abb8     01 02 06 F1 | 	add	_var02, #1
1abbc     01 09 C2 FA | 	rdbyte	_var05, _var02
1abc0     01 02 86 F1 | 	sub	_var02, #1
1abc4     04 0B 02 F6 | 	mov	_var06, _var05
1abc8     07 0A 4E F7 | 	zerox	_var06, #7 wz
1abcc     10 00 90 5D |  if_ne	jmp	#LR__2862
1abd0                 | LR__2861
1abd0     01 0D 02 F6 | 	mov	_var07, _var02
1abd4     01 0C 06 F1 | 	add	_var07, #1
1abd8     06 03 02 F6 | 	mov	_var02, _var07
1abdc     E0 00 90 FD | 	jmp	#LR__2876
1abe0                 | LR__2862
1abe0     01 02 06 F1 | 	add	_var02, #1
1abe4     01 0D C2 FA | 	rdbyte	_var07, _var02
1abe8     01 02 86 F1 | 	sub	_var02, #1
1abec     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1abf0     2E 06 0E F2 | 	cmp	_var04, #46 wz
1abf4     84 00 90 5D |  if_ne	jmp	#LR__2871
1abf8     02 02 06 F1 | 	add	_var02, #2
1abfc     01 0D C2 FA | 	rdbyte	_var07, _var02
1ac00     02 02 86 F1 | 	sub	_var02, #2
1ac04     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1ac08     2F 06 0E F2 | 	cmp	_var04, #47 wz
1ac0c     18 00 90 AD |  if_e	jmp	#LR__2863
1ac10     02 02 06 F1 | 	add	_var02, #2
1ac14     01 09 C2 FA | 	rdbyte	_var05, _var02
1ac18     02 02 86 F1 | 	sub	_var02, #2
1ac1c     04 0B 02 F6 | 	mov	_var06, _var05
1ac20     07 0A 4E F7 | 	zerox	_var06, #7 wz
1ac24     54 00 90 5D |  if_ne	jmp	#LR__2870
1ac28                 | LR__2863
1ac28     02 02 06 F1 | 	add	_var02, #2
1ac2c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1ac30     40 00 90 ED |  if_be	jmp	#LR__2869
1ac34     02 0F 02 F6 | 	mov	_var08, _var03
1ac38     01 0E 86 F1 | 	sub	_var08, #1
1ac3c                 | LR__2864
1ac3c     07 07 C2 FA | 	rdbyte	_var04, _var08
1ac40     2F 06 0E F2 | 	cmp	_var04, #47 wz
1ac44     0C 00 90 5D |  if_ne	jmp	#LR__2865
1ac48     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1ac4c     01 0E 86 11 |  if_a	sub	_var08, #1
1ac50     E8 FF 9F 1D |  if_a	jmp	#LR__2864
1ac54                 | LR__2865
1ac54     97 0C 48 FB | 	callpa	#(@LR__2867-@LR__2866)>>2,fcache_load_ptr_
1ac58                 | LR__2866
1ac58     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1ac5c     10 00 90 ED |  if_be	jmp	#LR__2868
1ac60     07 07 C2 FA | 	rdbyte	_var04, _var08
1ac64     2F 06 0E F2 | 	cmp	_var04, #47 wz
1ac68     01 0E 86 51 |  if_ne	sub	_var08, #1
1ac6c     E8 FF 9F 5D |  if_ne	jmp	#LR__2866
1ac70                 | LR__2867
1ac70                 | LR__2868
1ac70     07 05 02 F6 | 	mov	_var03, _var08
1ac74                 | LR__2869
1ac74     01 00 06 F6 | 	mov	_var01, #1
1ac78     44 00 90 FD | 	jmp	#LR__2876
1ac7c                 | LR__2870
1ac7c                 | LR__2871
1ac7c                 | LR__2872
1ac7c     97 18 48 FB | 	callpa	#(@LR__2874-@LR__2873)>>2,fcache_load_ptr_
1ac80                 | LR__2873
1ac80     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1ac84     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1ac88     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1ac8c     20 00 90 AD |  if_e	jmp	#LR__2875
1ac90     01 0B 02 F6 | 	mov	_var06, _var02
1ac94     01 09 02 F6 | 	mov	_var05, _var02
1ac98     01 08 06 F1 | 	add	_var05, #1
1ac9c     05 11 C2 FA | 	rdbyte	_var09, _var06
1aca0     04 03 02 F6 | 	mov	_var02, _var05
1aca4     02 11 42 FC | 	wrbyte	_var09, _var03
1aca8     01 04 06 F1 | 	add	_var03, #1
1acac     D0 FF 9F FD | 	jmp	#LR__2873
1acb0                 | LR__2874
1acb0                 | LR__2875
1acb0     01 07 C2 FA | 	rdbyte	_var04, _var02
1acb4     2F 06 0E F2 | 	cmp	_var04, #47 wz
1acb8     C0 FE 9F 5D |  if_ne	jmp	#LR__2860
1acbc     01 00 06 F6 | 	mov	_var01, #1
1acc0                 | LR__2876
1acc0     97 0C 48 FB | 	callpa	#(@LR__2878-@LR__2877)>>2,fcache_load_ptr_
1acc4                 | LR__2877
1acc4     01 07 C2 FA | 	rdbyte	_var04, _var02
1acc8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1accc     01 0D 02 A6 |  if_e	mov	_var07, _var02
1acd0     01 0C 06 A1 |  if_e	add	_var07, #1
1acd4     06 03 02 A6 |  if_e	mov	_var02, _var07
1acd8     E8 FF 9F AD |  if_e	jmp	#LR__2877
1acdc                 | LR__2878
1acdc     9C FE 9F FD | 	jmp	#LR__2860
1ace0                 | LR__2879
1ace0     02 01 48 FC | 	wrbyte	#0, _var03
1ace4                 | __system___normalizeName_ret
1ace4     2D 00 64 FD | 	ret
1ace8                 | 
1ace8                 | __system___strrev
1ace8     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1acec     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1acf0     09 03 02 F6 | 	mov	_var02, arg01
1acf4     97 1A 48 FB | 	callpa	#(@LR__2882-@LR__2880)>>2,fcache_load_ptr_
1acf8                 | LR__2880
1acf8     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1acfc     01 02 06 51 |  if_ne	add	_var02, #1
1ad00     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
1ad04     01 02 86 F1 | 	sub	_var02, #1
1ad08                 | LR__2881
1ad08     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1ad0c     1C 00 90 ED |  if_be	jmp	#LR__2883
1ad10     09 01 C2 FA | 	rdbyte	_var01, arg01
1ad14     01 05 C2 FA | 	rdbyte	_var03, _var02
1ad18     09 05 42 FC | 	wrbyte	_var03, arg01
1ad1c     01 01 42 FC | 	wrbyte	_var01, _var02
1ad20     01 12 06 F1 | 	add	arg01, #1
1ad24     01 02 86 F1 | 	sub	_var02, #1
1ad28     DC FF 9F FD | 	jmp	#LR__2881
1ad2c                 | LR__2882
1ad2c                 | LR__2883
1ad2c                 | __system___strrev_ret
1ad2c     2D 00 64 FD | 	ret
1ad30                 | 
1ad30                 | __system___fmtpad
1ad30     06 4A 05 F6 | 	mov	COUNT_, #6
1ad34     A8 00 A0 FD | 	call	#pushregs_
1ad38     09 1F 02 F6 | 	mov	local01, arg01
1ad3c     0A 21 02 F6 | 	mov	local02, arg02
1ad40     0B 23 02 F6 | 	mov	local03, arg03
1ad44     10 13 EA F8 | 	getbyte	arg01, local02, #1
1ad48     16 20 46 F0 | 	shr	local02, #22
1ad4c     03 20 0E F5 | 	and	local02, #3 wz
1ad50     00 24 06 F6 | 	mov	local04, #0
1ad54     01 20 06 A6 |  if_e	mov	local02, #1
1ad58     0C 21 CA F7 | 	test	local02, arg04 wz
1ad5c     00 FA 05 A6 |  if_e	mov	result1, #0
1ad60     88 00 90 AD |  if_e	jmp	#LR__2893
1ad64     09 23 C2 F2 | 	subr	local03, arg01
1ad68     01 22 56 F2 | 	cmps	local03, #1 wc
1ad6c     00 FA 05 C6 |  if_b	mov	result1, #0
1ad70     78 00 90 CD |  if_b	jmp	#LR__2893
1ad74     03 20 0E F2 | 	cmp	local02, #3 wz
1ad78     18 00 90 5D |  if_ne	jmp	#LR__2890
1ad7c     01 18 0E F2 | 	cmp	arg04, #1 wz
1ad80     6E 20 62 FD | 	wrz	local02
1ad84     10 23 02 F1 | 	add	local03, local02
1ad88     11 23 52 F6 | 	abs	local03, local03 wc
1ad8c     01 22 46 F0 | 	shr	local03, #1
1ad90     11 23 82 F6 | 	negc	local03, local03
1ad94                 | LR__2890
1ad94     01 22 56 F2 | 	cmps	local03, #1 wc
1ad98     4C 00 90 CD |  if_b	jmp	#LR__2892
1ad9c     11 27 02 F6 | 	mov	local05, local03
1ada0                 | LR__2891
1ada0     0F 21 02 F6 | 	mov	local02, local01
1ada4     0F 29 02 F6 | 	mov	local06, local01
1ada8     13 20 46 F7 | 	zerox	local02, #19
1adac     14 28 46 F0 | 	shr	local06, #20
1adb0     02 28 66 F0 | 	shl	local06, #2
1adb4     ED 28 02 F1 | 	add	local06, __methods__
1adb8     14 29 02 FB | 	rdlong	local06, local06
1adbc     20 12 06 F6 | 	mov	arg01, #32
1adc0     F2 22 02 F6 | 	mov	local03, objptr
1adc4     10 E5 01 F6 | 	mov	objptr, local02
1adc8     2D 28 62 FD | 	call	local06
1adcc     11 E5 01 F6 | 	mov	objptr, local03
1add0     FD 28 02 F6 | 	mov	local06, result1
1add4     00 28 56 F2 | 	cmps	local06, #0 wc
1add8     14 FB 01 C6 |  if_b	mov	result1, local06
1addc     0C 00 90 CD |  if_b	jmp	#LR__2893
1ade0     14 25 02 F1 | 	add	local04, local06
1ade4     EE 27 6E FB | 	djnz	local05, #LR__2891
1ade8                 | LR__2892
1ade8     12 FB 01 F6 | 	mov	result1, local04
1adec                 | LR__2893
1adec     A7 F0 03 F6 | 	mov	ptra, fp
1adf0     B2 00 A0 FD | 	call	#popregs_
1adf4                 | __system___fmtpad_ret
1adf4     2D 00 64 FD | 	ret
1adf8                 | 
1adf8                 | __system___uitoa
1adf8     04 4A 05 F6 | 	mov	COUNT_, #4
1adfc     A8 00 A0 FD | 	call	#pushregs_
1ae00     09 1F 02 F6 | 	mov	local01, arg01
1ae04     00 1A 4E F2 | 	cmps	arg05, #0 wz
1ae08     0F 1B 02 F6 | 	mov	arg05, local01
1ae0c     00 20 06 F6 | 	mov	local02, #0
1ae10     37 22 06 56 |  if_ne	mov	local03, #55
1ae14     57 22 06 A6 |  if_e	mov	local03, #87
1ae18                 | LR__2900
1ae18     0B 15 12 FD | 	qdiv	arg02, arg03
1ae1c     19 24 62 FD | 	getqy	local04
1ae20     0B 15 12 FD | 	qdiv	arg02, arg03
1ae24     0A 24 16 F2 | 	cmp	local04, #10 wc
1ae28     30 24 06 C1 |  if_b	add	local04, #48
1ae2c     11 25 02 31 |  if_ae	add	local04, local03
1ae30     0D 25 42 FC | 	wrbyte	local04, arg05
1ae34     01 1A 06 F1 | 	add	arg05, #1
1ae38     01 20 06 F1 | 	add	local02, #1
1ae3c     18 14 62 FD | 	getqx	arg02
1ae40     00 14 0E F2 | 	cmp	arg02, #0 wz
1ae44     D0 FF 9F 5D |  if_ne	jmp	#LR__2900
1ae48     0C 21 12 F2 | 	cmp	local02, arg04 wc
1ae4c     C8 FF 9F CD |  if_b	jmp	#LR__2900
1ae50     0D 01 48 FC | 	wrbyte	#0, arg05
1ae54     0F 13 02 F6 | 	mov	arg01, local01
1ae58     8C FE BF FD | 	call	#__system___strrev
1ae5c     10 FB 01 F6 | 	mov	result1, local02
1ae60     A7 F0 03 F6 | 	mov	ptra, fp
1ae64     B2 00 A0 FD | 	call	#popregs_
1ae68                 | __system___uitoa_ret
1ae68     2D 00 64 FD | 	ret
1ae6c                 | 
1ae6c                 | __system__disassemble_0320
1ae6c     10 4A 05 F6 | 	mov	COUNT_, #16
1ae70     A8 00 A0 FD | 	call	#pushregs_
1ae74     09 1F 02 F6 | 	mov	local01, arg01
1ae78     0A 21 02 F6 | 	mov	local02, arg02
1ae7c     0B 23 02 F6 | 	mov	local03, arg03
1ae80     0C 25 02 F6 | 	mov	local04, arg04
1ae84     0D 27 02 F6 | 	mov	local05, arg05
1ae88     13 13 52 F6 | 	abs	arg01, local05 wc
1ae8c     1F 28 C6 C9 |  if_b	decod	local06, #31
1ae90     00 28 06 36 |  if_ae	mov	local06, #0
1ae94     B4 D3 BF FD | 	call	#__system___float_fromuns
1ae98     14 FB 61 F5 | 	xor	result1, local06
1ae9c     FD 2A 02 F6 | 	mov	local07, result1
1aea0     00 2C 06 F6 | 	mov	local08, #0
1aea4     0F 13 02 F6 | 	mov	arg01, local01
1aea8     00 14 06 F6 | 	mov	arg02, #0
1aeac     01 16 06 F6 | 	mov	arg03, #1
1aeb0     F8 DA BF FD | 	call	#__system___float_cmp
1aeb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1aeb8     00 2E 06 A6 |  if_e	mov	local09, #0
1aebc     10 01 68 AC |  if_e	wrlong	#0, local02
1aec0     11 2F 62 AC |  if_e	wrlong	local09, local03
1aec4     8C 01 90 AD |  if_e	jmp	#LR__2922
1aec8     0F 13 02 F6 | 	mov	arg01, local01
1aecc     A8 DF BF FD | 	call	#__system____builtin_ilogb
1aed0     FD 30 02 F6 | 	mov	local10, result1
1aed4     0A 26 0E F2 | 	cmp	local05, #10 wz
1aed8     24 00 90 5D |  if_ne	jmp	#LR__2910
1aedc     18 2F 02 F6 | 	mov	local09, local10
1aee0     01 2E 66 F0 | 	shl	local09, #1
1aee4     18 2F 02 F1 | 	add	local09, local10
1aee8     17 31 52 F6 | 	abs	local10, local09 wc
1aeec     0A 30 16 FD | 	qdiv	local10, #10
1aef0     09 32 06 F6 | 	mov	local11, #9
1aef4     18 30 62 FD | 	getqx	local10
1aef8     18 31 82 F6 | 	negc	local10, local10
1aefc     04 00 90 FD | 	jmp	#LR__2911
1af00                 | LR__2910
1af00     18 32 06 F6 | 	mov	local11, #24
1af04                 | LR__2911
1af04                 | LR__2912
1af04     08 2C 56 F2 | 	cmps	local08, #8 wc
1af08     01 2C 06 F1 | 	add	local08, #1
1af0c     60 00 90 3D |  if_ae	jmp	#LR__2913
1af10     00 C0 1F FF 
1af14     00 12 06 F6 | 	mov	arg01, ##1065353216
1af18     15 15 02 F6 | 	mov	arg02, local07
1af1c     18 17 02 F6 | 	mov	arg03, local10
1af20     88 E3 BF FD | 	call	#__system___float_pow_n
1af24     FD 14 02 F6 | 	mov	arg02, result1
1af28     0F 13 02 F6 | 	mov	arg01, local01
1af2c     4C D8 BF FD | 	call	#__system___float_div
1af30     FD 34 02 F6 | 	mov	local12, result1
1af34     1A 13 02 F6 | 	mov	arg01, local12
1af38     00 C0 1F FF 
1af3c     00 14 06 F6 | 	mov	arg02, ##1065353216
1af40     01 16 06 F6 | 	mov	arg03, #1
1af44     64 DA BF FD | 	call	#__system___float_cmp
1af48     00 FA 55 F2 | 	cmps	result1, #0 wc
1af4c     01 30 86 C1 |  if_b	sub	local10, #1
1af50     B0 FF 9F CD |  if_b	jmp	#LR__2912
1af54     15 15 02 F6 | 	mov	arg02, local07
1af58     1A 13 02 F6 | 	mov	arg01, local12
1af5c     01 16 66 F6 | 	neg	arg03, #1
1af60     48 DA BF FD | 	call	#__system___float_cmp
1af64     00 FA 55 F2 | 	cmps	result1, #0 wc
1af68     01 30 06 31 |  if_ae	add	local10, #1
1af6c     94 FF 9F 3D |  if_ae	jmp	#LR__2912
1af70                 | LR__2913
1af70     1A 13 02 F6 | 	mov	arg01, local12
1af74     00 DF BF FD | 	call	#__system____builtin_ilogb
1af78     FD 36 02 F6 | 	mov	local13, result1
1af7c     1A 39 02 F6 | 	mov	local14, local12
1af80     17 39 06 F4 | 	bitl	local14, #279
1af84     17 38 26 F4 | 	bith	local14, #23
1af88     1B 39 62 F0 | 	shl	local14, local13
1af8c     02 26 0E F2 | 	cmp	local05, #2 wz
1af90     02 24 66 A0 |  if_e	shl	local04, #2
1af94     00 3A 06 F6 | 	mov	local15, #0
1af98     00 24 56 F2 | 	cmps	local04, #0 wc
1af9c     10 00 90 3D |  if_ae	jmp	#LR__2914
1afa0     18 25 C2 F2 | 	subr	local04, local10
1afa4     00 24 56 F2 | 	cmps	local04, #0 wc
1afa8     A0 00 90 CD |  if_b	jmp	#LR__2921
1afac     04 00 90 FD | 	jmp	#LR__2915
1afb0                 | LR__2914
1afb0     01 24 06 F1 | 	add	local04, #1
1afb4                 | LR__2915
1afb4     19 25 7A F3 | 	fles	local04, local11 wcz
1afb8     01 3C 06 F6 | 	mov	local16, #1
1afbc     97 22 48 FB | 	callpa	#(@LR__2917-@LR__2916)>>2,fcache_load_ptr_
1afc0                 | LR__2916
1afc0     00 40 00 FF 
1afc4     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1afc8     38 00 90 3D |  if_ae	jmp	#LR__2918
1afcc     01 24 56 F2 | 	cmps	local04, #1 wc
1afd0     01 24 86 F1 | 	sub	local04, #1
1afd4     2C 00 90 CD |  if_b	jmp	#LR__2918
1afd8     13 3B 02 FD | 	qmul	local15, local05
1afdc     1C 37 02 F6 | 	mov	local13, local14
1afe0     17 36 46 F0 | 	shr	local13, #23
1afe4     17 39 06 F4 | 	bitl	local14, #279
1afe8     18 3A 62 FD | 	getqx	local15
1afec     13 3D 02 FD | 	qmul	local16, local05
1aff0     18 3C 62 FD | 	getqx	local16
1aff4     13 39 02 FD | 	qmul	local14, local05
1aff8     1B 3B 02 F1 | 	add	local15, local13
1affc     18 38 62 FD | 	getqx	local14
1b000     BC FF 9F FD | 	jmp	#LR__2916
1b004                 | LR__2917
1b004                 | LR__2918
1b004     13 2F 02 F6 | 	mov	local09, local05
1b008     17 2E 66 F0 | 	shl	local09, #23
1b00c     17 37 52 F6 | 	abs	local13, local09 wc
1b010     01 36 46 F0 | 	shr	local13, #1
1b014     1B 37 82 F6 | 	negc	local13, local13
1b018     1B 39 1A F2 | 	cmp	local14, local13 wcz
1b01c     20 00 90 1D |  if_a	jmp	#LR__2919
1b020     17 26 66 F0 | 	shl	local05, #23
1b024     13 37 52 F6 | 	abs	local13, local05 wc
1b028     01 36 46 F0 | 	shr	local13, #1
1b02c     1B 37 82 F6 | 	negc	local13, local13
1b030     1B 39 0A F2 | 	cmp	local14, local13 wz
1b034     14 00 90 5D |  if_ne	jmp	#LR__2920
1b038     01 3A CE F7 | 	test	local15, #1 wz
1b03c     0C 00 90 AD |  if_e	jmp	#LR__2920
1b040                 | LR__2919
1b040     01 3A 06 F1 | 	add	local15, #1
1b044     1E 3B 0A F2 | 	cmp	local15, local16 wz
1b048     01 30 06 A1 |  if_e	add	local10, #1
1b04c                 | LR__2920
1b04c                 | LR__2921
1b04c     10 3B 62 FC | 	wrlong	local15, local02
1b050     11 31 62 FC | 	wrlong	local10, local03
1b054                 | LR__2922
1b054     A7 F0 03 F6 | 	mov	ptra, fp
1b058     B2 00 A0 FD | 	call	#popregs_
1b05c                 | __system__disassemble_0320_ret
1b05c     2D 00 64 FD | 	ret
1b060                 | 
1b060                 | __system__emitsign_0322
1b060     00 FA 05 F6 | 	mov	result1, #0
1b064     00 14 0E F2 | 	cmp	arg02, #0 wz
1b068     09 01 02 56 |  if_ne	mov	_var01, arg01
1b06c     01 12 06 51 |  if_ne	add	arg01, #1
1b070     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1b074     01 FA 05 56 |  if_ne	mov	result1, #1
1b078     00 16 0E F2 | 	cmp	arg03, #0 wz
1b07c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1b080     01 12 06 51 |  if_ne	add	arg01, #1
1b084     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1b088     02 FA 05 51 |  if_ne	add	result1, #2
1b08c                 | __system__emitsign_0322_ret
1b08c     2D 00 64 FD | 	ret
1b090                 | 
1b090                 | __system___gettxfunc
1b090     01 4A 05 F6 | 	mov	COUNT_, #1
1b094     A8 00 A0 FD | 	call	#pushregs_
1b098     A0 F8 BF FD | 	call	#__system____getftab
1b09c     FD 1E 0A F6 | 	mov	local01, result1 wz
1b0a0     10 00 90 AD |  if_e	jmp	#LR__2930
1b0a4     08 1E 06 F1 | 	add	local01, #8
1b0a8     0F 15 0A FB | 	rdlong	arg02, local01 wz
1b0ac     08 1E 86 F1 | 	sub	local01, #8
1b0b0     08 00 90 5D |  if_ne	jmp	#LR__2931
1b0b4                 | LR__2930
1b0b4     00 FA 05 F6 | 	mov	result1, #0
1b0b8     0C 00 90 FD | 	jmp	#LR__2932
1b0bc                 | LR__2931
1b0bc     00 78 02 FF 
1b0c0     00 1E 46 F5 | 	or	local01, ##82837504
1b0c4     0F FB 01 F6 | 	mov	result1, local01
1b0c8                 | LR__2932
1b0c8     A7 F0 03 F6 | 	mov	ptra, fp
1b0cc     B2 00 A0 FD | 	call	#popregs_
1b0d0                 | __system___gettxfunc_ret
1b0d0     2D 00 64 FD | 	ret
1b0d4                 | 
1b0d4                 | __system___getrxfunc
1b0d4     01 4A 05 F6 | 	mov	COUNT_, #1
1b0d8     A8 00 A0 FD | 	call	#pushregs_
1b0dc     5C F8 BF FD | 	call	#__system____getftab
1b0e0     FD 1E 0A F6 | 	mov	local01, result1 wz
1b0e4     10 00 90 AD |  if_e	jmp	#LR__2940
1b0e8     08 1E 06 F1 | 	add	local01, #8
1b0ec     0F 15 0A FB | 	rdlong	arg02, local01 wz
1b0f0     08 1E 86 F1 | 	sub	local01, #8
1b0f4     08 00 90 5D |  if_ne	jmp	#LR__2941
1b0f8                 | LR__2940
1b0f8     00 FA 05 F6 | 	mov	result1, #0
1b0fc     0C 00 90 FD | 	jmp	#LR__2942
1b100                 | LR__2941
1b100     00 80 02 FF 
1b104     00 1E 46 F5 | 	or	local01, ##83886080
1b108     0F FB 01 F6 | 	mov	result1, local01
1b10c                 | LR__2942
1b10c     A7 F0 03 F6 | 	mov	ptra, fp
1b110     B2 00 A0 FD | 	call	#popregs_
1b114                 | __system___getrxfunc_ret
1b114     2D 00 64 FD | 	ret
1b118                 | 
1b118                 | __system___getiolock_0362
1b118     01 4A 05 F6 | 	mov	COUNT_, #1
1b11c     A8 00 A0 FD | 	call	#pushregs_
1b120     18 F8 BF FD | 	call	#__system____getftab
1b124     FD 1E 0A F6 | 	mov	local01, result1 wz
1b128     10 00 90 AD |  if_e	jmp	#LR__2950
1b12c     08 1E 06 F1 | 	add	local01, #8
1b130     0F FB 09 FB | 	rdlong	result1, local01 wz
1b134     08 1E 86 F1 | 	sub	local01, #8
1b138     18 00 90 5D |  if_ne	jmp	#LR__2951
1b13c                 | LR__2950
1b13c     01 00 00 FF 
1b140     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1b144     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1b148     01 00 00 FF 
1b14c     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1b150     08 00 90 FD | 	jmp	#LR__2952
1b154                 | LR__2951
1b154     0C 1E 06 F1 | 	add	local01, #12
1b158     0F FB 01 F6 | 	mov	result1, local01
1b15c                 | LR__2952
1b15c     A7 F0 03 F6 | 	mov	ptra, fp
1b160     B2 00 A0 FD | 	call	#popregs_
1b164                 | __system___getiolock_0362_ret
1b164     2D 00 64 FD | 	ret
1b168                 | 
1b168                 | __system____ScanForChar
1b168     09 01 02 F6 | 	mov	_var01, arg01
1b16c     09 03 02 F6 | 	mov	_var02, arg01
1b170     97 06 48 FB | 	callpa	#(@LR__2961-@LR__2960)>>2,fcache_load_ptr_
1b174                 | LR__2960
1b174     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1b178     01 02 06 51 |  if_ne	add	_var02, #1
1b17c     F4 FF 9F 5D |  if_ne	jmp	#LR__2960
1b180                 | LR__2961
1b180     09 03 82 F1 | 	sub	_var02, arg01
1b184     01 FB 01 F6 | 	mov	result1, _var02
1b188     FD 12 0A F6 | 	mov	arg01, result1 wz
1b18c     00 FA 05 A6 |  if_e	mov	result1, #0
1b190     B8 00 90 AD |  if_e	jmp	#LR__2968
1b194     0A 05 02 F6 | 	mov	_var03, arg02
1b198     07 04 4E F7 | 	zerox	_var03, #7 wz
1b19c     00 FA 05 A6 |  if_e	mov	result1, #0
1b1a0     A8 00 90 AD |  if_e	jmp	#LR__2968
1b1a4     01 16 16 F2 | 	cmp	arg03, #1 wc
1b1a8     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1b1ac     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1b1b0     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1b1b4     94 00 90 4D |  if_c_and_nz	jmp	#LR__2968
1b1b8     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1b1bc     10 00 90 ED |  if_be	jmp	#LR__2962
1b1c0     00 18 0E F2 | 	cmp	arg04, #0 wz
1b1c4     00 FA 05 A6 |  if_e	mov	result1, #0
1b1c8     80 00 90 AD |  if_e	jmp	#LR__2968
1b1cc     09 17 02 F6 | 	mov	arg03, arg01
1b1d0                 | LR__2962
1b1d0     01 16 86 F1 | 	sub	arg03, #1
1b1d4     00 18 0E F2 | 	cmp	arg04, #0 wz
1b1d8     38 00 90 5D |  if_ne	jmp	#LR__2964
1b1dc     0B 07 02 F6 | 	mov	_var04, arg03
1b1e0     09 09 02 F6 | 	mov	_var05, arg01
1b1e4                 | LR__2963
1b1e4     04 07 12 F2 | 	cmp	_var04, _var05 wc
1b1e8     5C 00 90 3D |  if_ae	jmp	#LR__2967
1b1ec     03 05 02 F6 | 	mov	_var03, _var04
1b1f0     00 05 02 F1 | 	add	_var03, _var01
1b1f4     02 05 C2 FA | 	rdbyte	_var03, _var03
1b1f8     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1b1fc     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1b200     01 06 06 A1 |  if_e	add	_var04, #1
1b204     03 FB 01 A6 |  if_e	mov	result1, _var04
1b208     40 00 90 AD |  if_e	jmp	#LR__2968
1b20c     01 06 06 F1 | 	add	_var04, #1
1b210     D0 FF 9F FD | 	jmp	#LR__2963
1b214                 | LR__2964
1b214     0B 07 02 F6 | 	mov	_var04, arg03
1b218                 | LR__2965
1b218     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1b21c     28 00 90 1D |  if_a	jmp	#LR__2966
1b220     03 09 02 F6 | 	mov	_var05, _var04
1b224     00 09 02 F1 | 	add	_var05, _var01
1b228     04 05 C2 FA | 	rdbyte	_var03, _var05
1b22c     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1b230     04 05 0A F2 | 	cmp	_var03, _var05 wz
1b234     01 06 06 A1 |  if_e	add	_var04, #1
1b238     03 FB 01 A6 |  if_e	mov	result1, _var04
1b23c     0C 00 90 AD |  if_e	jmp	#LR__2968
1b240     01 06 86 F1 | 	sub	_var04, #1
1b244     D0 FF 9F FD | 	jmp	#LR__2965
1b248                 | LR__2966
1b248                 | LR__2967
1b248     00 FA 05 F6 | 	mov	result1, #0
1b24c                 | LR__2968
1b24c                 | __system____ScanForChar_ret
1b24c     2D 00 64 FD | 	ret
1b250                 | 
1b250                 | __system___basic_dir
1b250     05 4A 05 F6 | 	mov	COUNT_, #5
1b254     A8 00 A0 FD | 	call	#pushregs_
1b258     4C F0 07 F1 | 	add	ptra, #76
1b25c     04 4E 05 F1 | 	add	fp, #4
1b260     A7 12 62 FC | 	wrlong	arg01, fp
1b264     04 4E 05 F1 | 	add	fp, #4
1b268     A7 14 62 FC | 	wrlong	arg02, fp
1b26c     04 4E 85 F1 | 	sub	fp, #4
1b270     A7 14 0A FB | 	rdlong	arg02, fp wz
1b274     04 4E 85 F1 | 	sub	fp, #4
1b278     04 4E 05 51 |  if_ne	add	fp, #4
1b27c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1b280     04 4E 85 51 |  if_ne	sub	fp, #4
1b284     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1b288     70 00 90 AD |  if_e	jmp	#LR__2970
1b28c     03 00 00 FF 
1b290     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b294     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b298     03 00 00 FF 
1b29c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b2a0     03 00 00 5F 
1b2a4     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1b2a8     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1b2ac     03 00 00 5F 
1b2b0     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1b2b4     14 EA BF 5D |  if_ne	call	#__system__closedir
1b2b8     26 01 00 FF 
1b2bc     9C 13 06 F6 | 	mov	arg01, ##@LR__4128
1b2c0     1C E9 BF FD | 	call	#__system__opendir
1b2c4     03 00 00 FF 
1b2c8     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b2cc     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1b2d0     08 4E 05 F1 | 	add	fp, #8
1b2d4     A7 20 02 FB | 	rdlong	local02, fp
1b2d8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b2dc     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1b2e0     04 4E 85 F1 | 	sub	fp, #4
1b2e4     A7 20 02 FB | 	rdlong	local02, fp
1b2e8     04 4E 85 F1 | 	sub	fp, #4
1b2ec     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b2f0     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1b2f4     03 00 00 FF 
1b2f8     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1b2fc                 | LR__2970
1b2fc     03 00 00 FF 
1b300     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b304     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b308     03 00 00 FF 
1b30c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b310     26 01 00 AF 
1b314     9E FB 05 A6 |  if_e	mov	result1, ##@LR__4129
1b318     84 02 90 AD |  if_e	jmp	#LR__2983
1b31c                 | LR__2971
1b31c     03 00 00 FF 
1b320     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b324     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1b328     03 00 00 FF 
1b32c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b330     0C EA BF FD | 	call	#__system__readdir
1b334     0C 4E 05 F1 | 	add	fp, #12
1b338     A7 FA 61 FC | 	wrlong	result1, fp
1b33c     0C 4E 85 F1 | 	sub	fp, #12
1b340     00 FA 0D F2 | 	cmp	result1, #0 wz
1b344     38 00 90 5D |  if_ne	jmp	#LR__2972
1b348     03 00 00 FF 
1b34c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b350     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1b354     03 00 00 FF 
1b358     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b35c     6C E9 BF FD | 	call	#__system__closedir
1b360     03 00 00 FF 
1b364     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b368     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1b36c     03 00 00 FF 
1b370     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b374     26 01 00 FF 
1b378     A0 FB 05 F6 | 	mov	result1, ##@LR__4130
1b37c     20 02 90 FD | 	jmp	#LR__2983
1b380                 | LR__2972
1b380     0C 4E 05 F1 | 	add	fp, #12
1b384     A7 12 02 FB | 	rdlong	arg01, fp
1b388     0C 4E 85 F1 | 	sub	fp, #12
1b38c     03 00 00 FF 
1b390     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1b394     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1b398     03 00 00 FF 
1b39c     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1b3a0     48 07 B0 FD | 	call	#__system___pat_match
1b3a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3a8     70 FF 9F AD |  if_e	jmp	#LR__2971
1b3ac     03 00 00 FF 
1b3b0     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1b3b4     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b3b8     03 00 00 FF 
1b3bc     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1b3c0     78 01 90 AD |  if_e	jmp	#LR__2979
1b3c4     0C 4E 05 F1 | 	add	fp, #12
1b3c8     A7 12 02 FB | 	rdlong	arg01, fp
1b3cc     04 4E 05 F1 | 	add	fp, #4
1b3d0     A7 14 02 F6 | 	mov	arg02, fp
1b3d4     10 4E 85 F1 | 	sub	fp, #16
1b3d8     68 F2 BF FD | 	call	#__system__stat
1b3dc     40 4E 05 F1 | 	add	fp, #64
1b3e0     A7 FA 61 FC | 	wrlong	result1, fp
1b3e4     40 4E 85 F1 | 	sub	fp, #64
1b3e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3ec     26 01 00 5F 
1b3f0     A2 FB 05 56 |  if_ne	mov	result1, ##@LR__4131
1b3f4     A8 01 90 5D |  if_ne	jmp	#LR__2983
1b3f8     18 4E 05 F1 | 	add	fp, #24
1b3fc     A7 20 02 FB | 	rdlong	local02, fp
1b400     78 00 00 FF 
1b404     00 20 06 F5 | 	and	local02, ##61440
1b408     2C 4E 05 F1 | 	add	fp, #44
1b40c     A7 20 62 FC | 	wrlong	local02, fp
1b410     38 4E 85 F1 | 	sub	fp, #56
1b414     A7 20 02 FB | 	rdlong	local02, fp
1b418     0C 4E 85 F1 | 	sub	fp, #12
1b41c     10 21 C2 FA | 	rdbyte	local02, local02
1b420     2E 20 0E F2 | 	cmp	local02, #46 wz
1b424     08 4E 05 A1 |  if_e	add	fp, #8
1b428     A7 04 68 AC |  if_e	wrlong	#2, fp
1b42c     08 4E C5 F3 | 	sumz	fp, #8
1b430     A7 00 68 5C |  if_ne	wrlong	#0, fp
1b434     08 4E 85 51 |  if_ne	sub	fp, #8
1b438     44 4E 05 F1 | 	add	fp, #68
1b43c     A7 20 02 FB | 	rdlong	local02, fp
1b440     44 4E 85 F1 | 	sub	fp, #68
1b444     08 00 00 FF 
1b448     00 20 0E F2 | 	cmp	local02, ##4096 wz
1b44c     18 00 90 5D |  if_ne	jmp	#LR__2973
1b450     08 4E 05 F1 | 	add	fp, #8
1b454     A7 20 02 FB | 	rdlong	local02, fp
1b458     10 20 46 F5 | 	or	local02, #16
1b45c     A7 20 62 FC | 	wrlong	local02, fp
1b460     08 4E 85 F1 | 	sub	fp, #8
1b464     AC 00 90 FD | 	jmp	#LR__2978
1b468                 | LR__2973
1b468     44 4E 05 F1 | 	add	fp, #68
1b46c     A7 20 02 FB | 	rdlong	local02, fp
1b470     44 4E 85 F1 | 	sub	fp, #68
1b474     10 00 00 FF 
1b478     00 20 0E F2 | 	cmp	local02, ##8192 wz
1b47c     44 4E 05 51 |  if_ne	add	fp, #68
1b480     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1b484     44 4E 85 51 |  if_ne	sub	fp, #68
1b488     18 00 00 5F 
1b48c     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1b490     44 4E 05 51 |  if_ne	add	fp, #68
1b494     0F 23 02 56 |  if_ne	mov	local03, local01
1b498     44 4E 85 51 |  if_ne	sub	fp, #68
1b49c     20 00 00 5F 
1b4a0     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1b4a4     18 00 90 5D |  if_ne	jmp	#LR__2974
1b4a8     08 4E 05 F1 | 	add	fp, #8
1b4ac     A7 20 02 FB | 	rdlong	local02, fp
1b4b0     04 20 46 F5 | 	or	local02, #4
1b4b4     A7 20 62 FC | 	wrlong	local02, fp
1b4b8     08 4E 85 F1 | 	sub	fp, #8
1b4bc     54 00 90 FD | 	jmp	#LR__2977
1b4c0                 | LR__2974
1b4c0     18 4E 05 F1 | 	add	fp, #24
1b4c4     A7 20 02 FB | 	rdlong	local02, fp
1b4c8     18 4E 85 F1 | 	sub	fp, #24
1b4cc     92 20 CE F7 | 	test	local02, #146 wz
1b4d0     18 00 90 5D |  if_ne	jmp	#LR__2975
1b4d4     08 4E 05 F1 | 	add	fp, #8
1b4d8     A7 20 02 FB | 	rdlong	local02, fp
1b4dc     01 20 46 F5 | 	or	local02, #1
1b4e0     A7 20 62 FC | 	wrlong	local02, fp
1b4e4     08 4E 85 F1 | 	sub	fp, #8
1b4e8     28 00 90 FD | 	jmp	#LR__2976
1b4ec                 | LR__2975
1b4ec     44 4E 05 F1 | 	add	fp, #68
1b4f0     A7 24 02 FB | 	rdlong	local04, fp
1b4f4     44 4E 85 F1 | 	sub	fp, #68
1b4f8     08 00 00 FF 
1b4fc     00 24 0E F2 | 	cmp	local04, ##4096 wz
1b500     08 4E 05 51 |  if_ne	add	fp, #8
1b504     A7 24 02 5B |  if_ne	rdlong	local04, fp
1b508     20 24 46 55 |  if_ne	or	local04, #32
1b50c     A7 24 62 5C |  if_ne	wrlong	local04, fp
1b510     08 4E 85 51 |  if_ne	sub	fp, #8
1b514                 | LR__2976
1b514                 | LR__2977
1b514                 | LR__2978
1b514     08 4E 05 F1 | 	add	fp, #8
1b518     A7 24 02 FB | 	rdlong	local04, fp
1b51c     08 4E 85 F1 | 	sub	fp, #8
1b520     03 00 00 FF 
1b524     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1b528     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1b52c     03 00 00 FF 
1b530     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1b534     0F 25 CA F7 | 	test	local04, local01 wz
1b538     E0 FD 9F AD |  if_e	jmp	#LR__2971
1b53c                 | LR__2979
1b53c     0C 4E 05 F1 | 	add	fp, #12
1b540     A7 12 02 FB | 	rdlong	arg01, fp
1b544     0C 4E 85 F1 | 	sub	fp, #12
1b548     09 27 02 F6 | 	mov	local05, arg01
1b54c     97 06 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
1b550                 | LR__2980
1b550     13 FB C9 FA | 	rdbyte	result1, local05 wz
1b554     01 26 06 51 |  if_ne	add	local05, #1
1b558     F4 FF 9F 5D |  if_ne	jmp	#LR__2980
1b55c                 | LR__2981
1b55c     13 13 C2 F2 | 	subr	arg01, local05
1b560     01 12 06 F1 | 	add	arg01, #1
1b564     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1b568     48 4E 05 F1 | 	add	fp, #72
1b56c     A7 FA 61 FC | 	wrlong	result1, fp
1b570     48 4E 85 F1 | 	sub	fp, #72
1b574     00 FA 0D F2 | 	cmp	result1, #0 wz
1b578     18 00 90 AD |  if_e	jmp	#LR__2982
1b57c     48 4E 05 F1 | 	add	fp, #72
1b580     A7 12 02 FB | 	rdlong	arg01, fp
1b584     3C 4E 85 F1 | 	sub	fp, #60
1b588     A7 14 02 FB | 	rdlong	arg02, fp
1b58c     0C 4E 85 F1 | 	sub	fp, #12
1b590     84 A5 BF FD | 	call	#__system____builtin_strcpy
1b594                 | LR__2982
1b594     48 4E 05 F1 | 	add	fp, #72
1b598     A7 FA 01 FB | 	rdlong	result1, fp
1b59c     48 4E 85 F1 | 	sub	fp, #72
1b5a0                 | LR__2983
1b5a0     A7 F0 03 F6 | 	mov	ptra, fp
1b5a4     B2 00 A0 FD | 	call	#popregs_
1b5a8                 | __system___basic_dir_ret
1b5a8     2D 00 64 FD | 	ret
1b5ac                 | 
1b5ac                 | __system__pack_0428
1b5ac     09 01 02 F6 | 	mov	_var01, arg01
1b5b0     7F 16 06 F1 | 	add	arg03, #127
1b5b4     04 18 CE F7 | 	test	arg04, #4 wz
1b5b8     10 00 90 AD |  if_e	jmp	#LR__2990
1b5bc     00 00 0E F2 | 	cmp	_var01, #0 wz
1b5c0     16 00 C6 A9 |  if_e	decod	_var01, #22
1b5c4     F7 00 26 F4 | 	bith	_var01, #247
1b5c8     B4 00 90 FD | 	jmp	#LR__2999
1b5cc                 | LR__2990
1b5cc     02 18 CE F7 | 	test	arg04, #2 wz
1b5d0     00 C0 3F 5F 
1b5d4     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1b5d8     00 14 06 56 |  if_ne	mov	arg02, #0
1b5dc     A0 00 90 5D |  if_ne	jmp	#LR__2998
1b5e0     08 18 CE F7 | 	test	arg04, #8 wz
1b5e4     00 00 06 56 |  if_ne	mov	_var01, #0
1b5e8     94 00 90 5D |  if_ne	jmp	#LR__2997
1b5ec     FF 16 56 F2 | 	cmps	arg03, #255 wc
1b5f0     00 C0 3F 3F 
1b5f4     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1b5f8     00 14 06 36 |  if_ae	mov	arg02, #0
1b5fc     80 00 90 3D |  if_ae	jmp	#LR__2996
1b600     01 16 56 F2 | 	cmps	arg03, #1 wc
1b604     6C 00 90 3D |  if_ae	jmp	#LR__2994
1b608     01 14 46 F0 | 	shr	arg02, #1
1b60c     00 03 02 F6 | 	mov	_var02, _var01
1b610     01 02 06 F5 | 	and	_var02, #1
1b614     1F 02 66 F0 | 	shl	_var02, #31
1b618     01 15 42 F5 | 	or	arg02, _var02
1b61c     01 00 46 F0 | 	shr	_var01, #1
1b620     97 1E 48 FB | 	callpa	#(@LR__2992-@LR__2991)>>2,fcache_load_ptr_
1b624                 | LR__2991
1b624     00 16 56 F2 | 	cmps	arg03, #0 wc
1b628     34 00 90 3D |  if_ae	jmp	#LR__2993
1b62c     00 00 0E F2 | 	cmp	_var01, #0 wz
1b630     2C 00 90 AD |  if_e	jmp	#LR__2993
1b634     0A 13 02 F6 | 	mov	arg01, arg02
1b638     01 12 06 F5 | 	and	arg01, #1
1b63c     01 16 06 F1 | 	add	arg03, #1
1b640     01 14 46 F0 | 	shr	arg02, #1
1b644     00 03 02 F6 | 	mov	_var02, _var01
1b648     01 02 06 F5 | 	and	_var02, #1
1b64c     1F 02 66 F0 | 	shl	_var02, #31
1b650     01 15 42 F5 | 	or	arg02, _var02
1b654     09 15 42 F5 | 	or	arg02, arg01
1b658     01 00 46 F0 | 	shr	_var01, #1
1b65c     C4 FF 9F FD | 	jmp	#LR__2991
1b660                 | LR__2992
1b660                 | LR__2993
1b660     00 16 56 F2 | 	cmps	arg03, #0 wc
1b664     18 00 90 3D |  if_ae	jmp	#LR__2995
1b668     00 14 0E F2 | 	cmp	arg02, #0 wz
1b66c     6F 14 62 FD | 	wrnz	arg02
1b670     0C 00 90 FD | 	jmp	#LR__2995
1b674                 | LR__2994
1b674     17 01 06 F4 | 	bitl	_var01, #279
1b678     17 16 66 F0 | 	shl	arg03, #23
1b67c     0B 01 42 F5 | 	or	_var01, arg03
1b680                 | LR__2995
1b680                 | LR__2996
1b680                 | LR__2997
1b680                 | LR__2998
1b680                 | LR__2999
1b680     01 00 CE F7 | 	test	_var01, #1 wz
1b684     01 14 46 55 |  if_ne	or	arg02, #1
1b688     0A 17 02 F6 | 	mov	arg03, arg02
1b68c     00 02 06 F6 | 	mov	_var02, #0
1b690     FF FF 3F FF 
1b694     FF 15 06 F1 | 	add	arg02, ##2147483647
1b698     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1b69c     01 02 06 C6 |  if_b	mov	_var02, #1
1b6a0     01 01 02 F1 | 	add	_var01, _var02
1b6a4     01 18 CE F7 | 	test	arg04, #1 wz
1b6a8     1F 00 26 54 |  if_ne	bith	_var01, #31
1b6ac     00 FB 01 F6 | 	mov	result1, _var01
1b6b0                 | __system__pack_0428_ret
1b6b0     2D 00 64 FD | 	ret
1b6b4                 | 
1b6b4                 | __system___rxtxioctl_0517
1b6b4     00 15 0E F2 | 	cmp	arg02, #256 wz
1b6b8     0C 00 90 AD |  if_e	jmp	#LR__3000
1b6bc     01 15 0E F2 | 	cmp	arg02, #257 wz
1b6c0     1C 00 90 AD |  if_e	jmp	#LR__3001
1b6c4     30 00 90 FD | 	jmp	#LR__3002
1b6c8                 | LR__3000
1b6c8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1b6cc     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b6d0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1b6d4     0B FB 61 FC | 	wrlong	result1, arg03
1b6d8     00 FA 05 F6 | 	mov	result1, #0
1b6dc     28 00 90 FD | 	jmp	#LR__3003
1b6e0                 | LR__3001
1b6e0     0B 13 02 FB | 	rdlong	arg01, arg03
1b6e4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1b6e8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b6ec     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1b6f0     00 FA 05 F6 | 	mov	result1, #0
1b6f4     10 00 90 FD | 	jmp	#LR__3003
1b6f8                 | LR__3002
1b6f8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b6fc     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1b700     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b704     01 FA 65 F6 | 	neg	result1, #1
1b708                 | LR__3003
1b708                 | __system___rxtxioctl_0517_ret
1b708     2D 00 64 FD | 	ret
1b70c                 | 
1b70c                 | __system____dummy_flush_0518
1b70c     00 FA 05 F6 | 	mov	result1, #0
1b710                 | __system____dummy_flush_0518_ret
1b710     2D 00 64 FD | 	ret
1b714                 | 
1b714                 | __system___vfsread
1b714     03 4A 05 F6 | 	mov	COUNT_, #3
1b718     A8 00 A0 FD | 	call	#pushregs_
1b71c     28 F0 07 F1 | 	add	ptra, #40
1b720     04 4E 05 F1 | 	add	fp, #4
1b724     A7 12 62 FC | 	wrlong	arg01, fp
1b728     04 4E 05 F1 | 	add	fp, #4
1b72c     A7 14 62 FC | 	wrlong	arg02, fp
1b730     04 4E 05 F1 | 	add	fp, #4
1b734     A7 16 62 FC | 	wrlong	arg03, fp
1b738     04 4E 85 F1 | 	sub	fp, #4
1b73c     A7 FA 01 FB | 	rdlong	result1, fp
1b740     14 4E 05 F1 | 	add	fp, #20
1b744     A7 FA 61 FC | 	wrlong	result1, fp
1b748     04 4E 05 F1 | 	add	fp, #4
1b74c     A7 00 68 FC | 	wrlong	#0, fp
1b750     1C 4E 85 F1 | 	sub	fp, #28
1b754     A7 12 02 FB | 	rdlong	arg01, fp
1b758     04 4E 85 F1 | 	sub	fp, #4
1b75c     08 12 06 F1 | 	add	arg01, #8
1b760     09 FB 01 FB | 	rdlong	result1, arg01
1b764     01 FA CD F7 | 	test	result1, #1 wz
1b768     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b76c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1b770     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b774     01 FA 65 A6 |  if_e	neg	result1, #1
1b778     74 02 90 AD |  if_e	jmp	#LR__3016
1b77c     04 4E 05 F1 | 	add	fp, #4
1b780     A7 12 02 FB | 	rdlong	arg01, fp
1b784     04 4E 85 F1 | 	sub	fp, #4
1b788     14 12 06 F1 | 	add	arg01, #20
1b78c     09 FB 09 FB | 	rdlong	result1, arg01 wz
1b790     B8 00 90 AD |  if_e	jmp	#LR__3011
1b794     04 4E 05 F1 | 	add	fp, #4
1b798     A7 12 02 FB | 	rdlong	arg01, fp
1b79c     09 17 02 F6 | 	mov	arg03, arg01
1b7a0     14 16 06 F1 | 	add	arg03, #20
1b7a4     0B 1F 02 FB | 	rdlong	local01, arg03
1b7a8     0F 21 02 F6 | 	mov	local02, local01
1b7ac     13 1E 46 F7 | 	zerox	local01, #19
1b7b0     14 20 46 F0 | 	shr	local02, #20
1b7b4     02 20 66 F0 | 	shl	local02, #2
1b7b8     ED 20 02 F1 | 	add	local02, __methods__
1b7bc     10 21 02 FB | 	rdlong	local02, local02
1b7c0     04 4E 05 F1 | 	add	fp, #4
1b7c4     A7 14 02 FB | 	rdlong	arg02, fp
1b7c8     04 4E 05 F1 | 	add	fp, #4
1b7cc     A7 16 02 FB | 	rdlong	arg03, fp
1b7d0     0C 4E 85 F1 | 	sub	fp, #12
1b7d4     F2 22 02 F6 | 	mov	local03, objptr
1b7d8     0F E5 01 F6 | 	mov	objptr, local01
1b7dc     2D 20 62 FD | 	call	local02
1b7e0     11 E5 01 F6 | 	mov	objptr, local03
1b7e4     10 4E 05 F1 | 	add	fp, #16
1b7e8     A7 FA 61 FC | 	wrlong	result1, fp
1b7ec     10 4E 85 F1 | 	sub	fp, #16
1b7f0     00 FA 55 F2 | 	cmps	result1, #0 wc
1b7f4     44 00 90 3D |  if_ae	jmp	#LR__3010
1b7f8     04 4E 05 F1 | 	add	fp, #4
1b7fc     A7 22 02 FB | 	rdlong	local03, fp
1b800     11 1F 02 F6 | 	mov	local01, local03
1b804     08 22 06 F1 | 	add	local03, #8
1b808     11 21 02 FB | 	rdlong	local02, local03
1b80c     20 20 46 F5 | 	or	local02, #32
1b810     08 1E 06 F1 | 	add	local01, #8
1b814     0F 21 62 FC | 	wrlong	local02, local01
1b818     0C 4E 05 F1 | 	add	fp, #12
1b81c     A7 12 0A FB | 	rdlong	arg01, fp wz
1b820     10 4E 85 F1 | 	sub	fp, #16
1b824     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b828     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b82c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b830     01 FA 65 56 |  if_ne	neg	result1, #1
1b834     00 FA 05 A6 |  if_e	mov	result1, #0
1b838     B4 01 90 FD | 	jmp	#LR__3016
1b83c                 | LR__3010
1b83c     10 4E 05 F1 | 	add	fp, #16
1b840     A7 FA 01 FB | 	rdlong	result1, fp
1b844     10 4E 85 F1 | 	sub	fp, #16
1b848     A4 01 90 FD | 	jmp	#LR__3016
1b84c                 | LR__3011
1b84c     04 4E 05 F1 | 	add	fp, #4
1b850     A7 12 02 FB | 	rdlong	arg01, fp
1b854     20 12 06 F1 | 	add	arg01, #32
1b858     09 13 0A FB | 	rdlong	arg01, arg01 wz
1b85c     14 4E 05 F1 | 	add	fp, #20
1b860     A7 12 62 FC | 	wrlong	arg01, fp
1b864     18 4E 85 F1 | 	sub	fp, #24
1b868     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b86c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1b870     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b874     01 FA 65 A6 |  if_e	neg	result1, #1
1b878     74 01 90 AD |  if_e	jmp	#LR__3016
1b87c     04 4E 05 F1 | 	add	fp, #4
1b880     A7 22 02 FB | 	rdlong	local03, fp
1b884     04 4E 85 F1 | 	sub	fp, #4
1b888     28 22 06 F1 | 	add	local03, #40
1b88c     11 21 0A FB | 	rdlong	local02, local03 wz
1b890     7C 00 90 AD |  if_e	jmp	#LR__3013
1b894     04 4E 05 F1 | 	add	fp, #4
1b898     A7 12 02 FB | 	rdlong	arg01, fp
1b89c     09 23 02 F6 | 	mov	local03, arg01
1b8a0     28 22 06 F1 | 	add	local03, #40
1b8a4     11 1F 02 FB | 	rdlong	local01, local03
1b8a8     0F 21 02 F6 | 	mov	local02, local01
1b8ac     13 1E 46 F7 | 	zerox	local01, #19
1b8b0     14 20 46 F0 | 	shr	local02, #20
1b8b4     02 20 66 F0 | 	shl	local02, #2
1b8b8     ED 20 02 F1 | 	add	local02, __methods__
1b8bc     10 21 02 FB | 	rdlong	local02, local02
1b8c0     20 4E 05 F1 | 	add	fp, #32
1b8c4     A7 16 02 F6 | 	mov	arg03, fp
1b8c8     24 4E 85 F1 | 	sub	fp, #36
1b8cc     00 15 06 F6 | 	mov	arg02, #256
1b8d0     F2 22 02 F6 | 	mov	local03, objptr
1b8d4     0F E5 01 F6 | 	mov	objptr, local01
1b8d8     2D 20 62 FD | 	call	local02
1b8dc     11 E5 01 F6 | 	mov	objptr, local03
1b8e0     10 4E 05 F1 | 	add	fp, #16
1b8e4     A7 FA 61 FC | 	wrlong	result1, fp
1b8e8     00 FA 4D F2 | 	cmps	result1, #0 wz
1b8ec     10 4E 85 F1 | 	sub	fp, #16
1b8f0     1C 00 90 5D |  if_ne	jmp	#LR__3012
1b8f4     24 4E 05 F1 | 	add	fp, #36
1b8f8     A7 20 02 FB | 	rdlong	local02, fp
1b8fc     24 4E 85 F1 | 	sub	fp, #36
1b900     02 20 CE F7 | 	test	local02, #2 wz
1b904     20 4E 05 51 |  if_ne	add	fp, #32
1b908     A7 02 68 5C |  if_ne	wrlong	#1, fp
1b90c     20 4E 85 51 |  if_ne	sub	fp, #32
1b910                 | LR__3012
1b910                 | LR__3013
1b910     10 4E 05 F1 | 	add	fp, #16
1b914     A7 00 68 FC | 	wrlong	#0, fp
1b918     10 4E 85 F1 | 	sub	fp, #16
1b91c                 | LR__3014
1b91c     0C 4E 05 F1 | 	add	fp, #12
1b920     A7 22 02 FB | 	rdlong	local03, fp
1b924     0C 4E 85 F1 | 	sub	fp, #12
1b928     01 22 16 F2 | 	cmp	local03, #1 wc
1b92c     B4 00 90 CD |  if_b	jmp	#LR__3015
1b930     18 4E 05 F1 | 	add	fp, #24
1b934     A7 20 02 FB | 	rdlong	local02, fp
1b938     10 23 02 F6 | 	mov	local03, local02
1b93c     13 22 46 F7 | 	zerox	local03, #19
1b940     14 20 46 F0 | 	shr	local02, #20
1b944     02 20 66 F0 | 	shl	local02, #2
1b948     ED 20 02 F1 | 	add	local02, __methods__
1b94c     10 21 02 FB | 	rdlong	local02, local02
1b950     14 4E 85 F1 | 	sub	fp, #20
1b954     A7 12 02 FB | 	rdlong	arg01, fp
1b958     04 4E 85 F1 | 	sub	fp, #4
1b95c     F2 1E 02 F6 | 	mov	local01, objptr
1b960     11 E5 01 F6 | 	mov	objptr, local03
1b964     2D 20 62 FD | 	call	local02
1b968     0F E5 01 F6 | 	mov	objptr, local01
1b96c     14 4E 05 F1 | 	add	fp, #20
1b970     A7 FA 61 FC | 	wrlong	result1, fp
1b974     14 4E 85 F1 | 	sub	fp, #20
1b978     00 FA 55 F2 | 	cmps	result1, #0 wc
1b97c     64 00 90 CD |  if_b	jmp	#LR__3015
1b980     1C 4E 05 F1 | 	add	fp, #28
1b984     A7 22 02 FB | 	rdlong	local03, fp
1b988     11 21 02 F6 | 	mov	local02, local03
1b98c     01 20 06 F1 | 	add	local02, #1
1b990     A7 20 62 FC | 	wrlong	local02, fp
1b994     08 4E 85 F1 | 	sub	fp, #8
1b998     A7 20 02 FB | 	rdlong	local02, fp
1b99c     11 21 42 FC | 	wrbyte	local02, local03
1b9a0     04 4E 85 F1 | 	sub	fp, #4
1b9a4     A7 22 02 FB | 	rdlong	local03, fp
1b9a8     01 22 06 F1 | 	add	local03, #1
1b9ac     A7 22 62 FC | 	wrlong	local03, fp
1b9b0     04 4E 85 F1 | 	sub	fp, #4
1b9b4     A7 22 02 FB | 	rdlong	local03, fp
1b9b8     01 22 86 F1 | 	sub	local03, #1
1b9bc     A7 22 62 FC | 	wrlong	local03, fp
1b9c0     14 4E 05 F1 | 	add	fp, #20
1b9c4     A7 22 0A FB | 	rdlong	local03, fp wz
1b9c8     20 4E 85 F1 | 	sub	fp, #32
1b9cc     4C FF 9F AD |  if_e	jmp	#LR__3014
1b9d0     14 4E 05 F1 | 	add	fp, #20
1b9d4     A7 20 02 FB | 	rdlong	local02, fp
1b9d8     14 4E 85 F1 | 	sub	fp, #20
1b9dc     0A 20 0E F2 | 	cmp	local02, #10 wz
1b9e0     38 FF 9F 5D |  if_ne	jmp	#LR__3014
1b9e4                 | LR__3015
1b9e4     10 4E 05 F1 | 	add	fp, #16
1b9e8     A7 FA 01 FB | 	rdlong	result1, fp
1b9ec     10 4E 85 F1 | 	sub	fp, #16
1b9f0                 | LR__3016
1b9f0     A7 F0 03 F6 | 	mov	ptra, fp
1b9f4     B2 00 A0 FD | 	call	#popregs_
1b9f8                 | __system___vfsread_ret
1b9f8     2D 00 64 FD | 	ret
1b9fc                 | 
1b9fc                 | __system____default_filbuf
1b9fc     04 4A 05 F6 | 	mov	COUNT_, #4
1ba00     A8 00 A0 FD | 	call	#pushregs_
1ba04     09 1F 02 F6 | 	mov	local01, arg01
1ba08     0F 21 02 FB | 	rdlong	local02, local01
1ba0c     0C 20 06 F1 | 	add	local02, #12
1ba10     10 FB 09 FB | 	rdlong	result1, local02 wz
1ba14     0C 20 86 F1 | 	sub	local02, #12
1ba18     20 00 90 5D |  if_ne	jmp	#LR__3020
1ba1c     14 20 06 F1 | 	add	local02, #20
1ba20     10 FB 01 F6 | 	mov	result1, local02
1ba24     04 20 86 F1 | 	sub	local02, #4
1ba28     10 FB 61 FC | 	wrlong	result1, local02
1ba2c     04 20 86 F1 | 	sub	local02, #4
1ba30     02 00 80 FF 
1ba34     10 01 68 FC | 	wrlong	##1024, local02
1ba38     0C 20 86 F1 | 	sub	local02, #12
1ba3c                 | LR__3020
1ba3c     14 1E 06 F1 | 	add	local01, #20
1ba40     0F 23 02 FB | 	rdlong	local03, local01
1ba44     11 25 02 F6 | 	mov	local04, local03
1ba48     14 1E 86 F1 | 	sub	local01, #20
1ba4c     13 24 46 F7 | 	zerox	local04, #19
1ba50     14 22 46 F0 | 	shr	local03, #20
1ba54     02 22 66 F0 | 	shl	local03, #2
1ba58     ED 22 02 F1 | 	add	local03, __methods__
1ba5c     11 23 02 FB | 	rdlong	local03, local03
1ba60     10 20 06 F1 | 	add	local02, #16
1ba64     10 15 02 FB | 	rdlong	arg02, local02
1ba68     04 20 86 F1 | 	sub	local02, #4
1ba6c     10 17 02 FB | 	rdlong	arg03, local02
1ba70     0C 20 86 F1 | 	sub	local02, #12
1ba74     0F 13 02 F6 | 	mov	arg01, local01
1ba78     F2 1E 02 F6 | 	mov	local01, objptr
1ba7c     12 E5 01 F6 | 	mov	objptr, local04
1ba80     2D 22 62 FD | 	call	local03
1ba84     0F E5 01 F6 | 	mov	objptr, local01
1ba88     FD 24 02 F6 | 	mov	local04, result1
1ba8c     00 24 56 F2 | 	cmps	local04, #0 wc
1ba90     01 FA 65 C6 |  if_b	neg	result1, #1
1ba94     28 00 90 CD |  if_b	jmp	#LR__3021
1ba98     10 25 62 FC | 	wrlong	local04, local02
1ba9c     10 20 06 F1 | 	add	local02, #16
1baa0     10 23 02 FB | 	rdlong	local03, local02
1baa4     0C 20 86 F1 | 	sub	local02, #12
1baa8     10 23 62 FC | 	wrlong	local03, local02
1baac     04 20 06 F1 | 	add	local02, #4
1bab0     10 23 02 FB | 	rdlong	local03, local02
1bab4     01 22 46 F5 | 	or	local03, #1
1bab8     10 23 62 FC | 	wrlong	local03, local02
1babc     12 FB 01 F6 | 	mov	result1, local04
1bac0                 | LR__3021
1bac0     A7 F0 03 F6 | 	mov	ptra, fp
1bac4     B2 00 A0 FD | 	call	#popregs_
1bac8                 | __system____default_filbuf_ret
1bac8     2D 00 64 FD | 	ret
1bacc                 | 
1bacc                 | __system__getlower_0903
1bacc     41 12 56 F2 | 	cmps	arg01, #65 wc
1bad0     10 00 90 CD |  if_b	jmp	#LR__3030
1bad4     5B 12 56 F2 | 	cmps	arg01, #91 wc
1bad8     09 FB 01 C6 |  if_b	mov	result1, arg01
1badc     20 FA 05 C1 |  if_b	add	result1, #32
1bae0     04 00 90 CD |  if_b	jmp	#__system__getlower_0903_ret
1bae4                 | LR__3030
1bae4     09 FB 01 F6 | 	mov	result1, arg01
1bae8                 | __system__getlower_0903_ret
1bae8     2D 00 64 FD | 	ret
1baec                 | 
1baec                 | __system___pat_match
1baec     08 4A 05 F6 | 	mov	COUNT_, #8
1baf0     A8 00 A0 FD | 	call	#pushregs_
1baf4     09 1F 02 F6 | 	mov	local01, arg01
1baf8                 | LR__3040
1baf8     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1bafc     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1bb00     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1bb04     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1bb08     2C 00 90 AD |  if_e	jmp	#LR__3041
1bb0c     0A 13 C2 FA | 	rdbyte	arg01, arg02
1bb10     B8 FF BF FD | 	call	#__system__getlower_0903
1bb14     FD 22 02 F6 | 	mov	local03, result1
1bb18     0F 13 C2 FA | 	rdbyte	arg01, local01
1bb1c     AC FF BF FD | 	call	#__system__getlower_0903
1bb20     11 FB 09 F2 | 	cmp	result1, local03 wz
1bb24     00 FA 05 56 |  if_ne	mov	result1, #0
1bb28     FC 00 90 5D |  if_ne	jmp	#LR__3049
1bb2c     01 1E 06 F1 | 	add	local01, #1
1bb30     01 14 06 F1 | 	add	arg02, #1
1bb34     C0 FF 9F FD | 	jmp	#LR__3040
1bb38                 | LR__3041
1bb38     0A 23 C2 FA | 	rdbyte	local03, arg02
1bb3c     2A 22 0E F2 | 	cmp	local03, #42 wz
1bb40     D4 00 90 5D |  if_ne	jmp	#LR__3048
1bb44     01 14 06 F1 | 	add	arg02, #1
1bb48     0A 21 C2 FA | 	rdbyte	local02, arg02
1bb4c     01 14 86 F1 | 	sub	arg02, #1
1bb50     2E 20 0E F2 | 	cmp	local02, #46 wz
1bb54     28 00 90 5D |  if_ne	jmp	#LR__3042
1bb58     02 14 06 F1 | 	add	arg02, #2
1bb5c     0A 21 C2 FA | 	rdbyte	local02, arg02
1bb60     02 14 86 F1 | 	sub	arg02, #2
1bb64     2A 20 0E F2 | 	cmp	local02, #42 wz
1bb68     03 14 06 A1 |  if_e	add	arg02, #3
1bb6c     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1bb70     03 14 86 A1 |  if_e	sub	arg02, #3
1bb74     12 27 0A A6 |  if_e	mov	local05, local04 wz
1bb78     01 FA 05 A6 |  if_e	mov	result1, #1
1bb7c     A8 00 90 AD |  if_e	jmp	#LR__3049
1bb80                 | LR__3042
1bb80     01 14 06 F1 | 	add	arg02, #1
1bb84     00 28 06 F6 | 	mov	local06, #0
1bb88     97 1E 48 FB | 	callpa	#(@LR__3045-@LR__3043)>>2,fcache_load_ptr_
1bb8c                 | LR__3043
1bb8c     14 2B 02 F6 | 	mov	local07, local06
1bb90     0A 2B 02 F1 | 	add	local07, arg02
1bb94     15 2B CA FA | 	rdbyte	local07, local07 wz
1bb98     14 27 02 56 |  if_ne	mov	local05, local06
1bb9c     01 26 06 51 |  if_ne	add	local05, #1
1bba0     13 29 02 56 |  if_ne	mov	local06, local05
1bba4     E4 FF 9F 5D |  if_ne	jmp	#LR__3043
1bba8     00 2C 06 F6 | 	mov	local08, #0
1bbac                 | LR__3044
1bbac     16 2B 02 F6 | 	mov	local07, local08
1bbb0     0F 2B 02 F1 | 	add	local07, local01
1bbb4     15 2B CA FA | 	rdbyte	local07, local07 wz
1bbb8     16 27 02 56 |  if_ne	mov	local05, local08
1bbbc     01 26 06 51 |  if_ne	add	local05, #1
1bbc0     13 2D 02 56 |  if_ne	mov	local08, local05
1bbc4     E4 FF 9F 5D |  if_ne	jmp	#LR__3044
1bbc8                 | LR__3045
1bbc8     14 2D 52 F2 | 	cmps	local08, local06 wc
1bbcc     00 FA 05 C6 |  if_b	mov	result1, #0
1bbd0     54 00 90 CD |  if_b	jmp	#LR__3049
1bbd4     16 21 02 F6 | 	mov	local02, local08
1bbd8     14 21 82 F1 | 	sub	local02, local06
1bbdc     10 1F 02 F1 | 	add	local01, local02
1bbe0                 | LR__3046
1bbe0     01 28 56 F2 | 	cmps	local06, #1 wc
1bbe4     30 00 90 CD |  if_b	jmp	#LR__3047
1bbe8     0F 13 C2 FA | 	rdbyte	arg01, local01
1bbec     DC FE BF FD | 	call	#__system__getlower_0903
1bbf0     FD 2C 02 F6 | 	mov	local08, result1
1bbf4     0A 13 C2 FA | 	rdbyte	arg01, arg02
1bbf8     D0 FE BF FD | 	call	#__system__getlower_0903
1bbfc     FD 2C 0A F2 | 	cmp	local08, result1 wz
1bc00     00 FA 05 56 |  if_ne	mov	result1, #0
1bc04     20 00 90 5D |  if_ne	jmp	#LR__3049
1bc08     01 1E 06 F1 | 	add	local01, #1
1bc0c     01 14 06 F1 | 	add	arg02, #1
1bc10     01 28 86 F1 | 	sub	local06, #1
1bc14     C8 FF 9F FD | 	jmp	#LR__3046
1bc18                 | LR__3047
1bc18                 | LR__3048
1bc18     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1bc1c     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1bc20     01 FA 05 A6 |  if_e	mov	result1, #1
1bc24     00 FA 05 56 |  if_ne	mov	result1, #0
1bc28                 | LR__3049
1bc28     A7 F0 03 F6 | 	mov	ptra, fp
1bc2c     B2 00 A0 FD | 	call	#popregs_
1bc30                 | __system___pat_match_ret
1bc30     2D 00 64 FD | 	ret
1bc34                 | 
1bc34                 | _fatfs_cc_ff_uni2oem
1bc34     00 00 06 F6 | 	mov	_var01, #0
1bc38     80 12 16 F2 | 	cmp	arg01, #128 wc
1bc3c     09 01 02 C6 |  if_b	mov	_var01, arg01
1bc40     58 00 90 CD |  if_b	jmp	#LR__3054
1bc44     80 00 00 FF 
1bc48     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1bc4c     4C 00 90 3D |  if_ae	jmp	#LR__3053
1bc50     0A FB 31 F9 | 	getword	result1, arg02, #0
1bc54     01 00 00 FF 
1bc58     52 FB 0D F2 | 	cmp	result1, ##850 wz
1bc5c     3C 00 90 5D |  if_ne	jmp	#LR__3053
1bc60                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1bc60     00 00 06 F6 | 	mov	_var01, #0
1bc64     97 14 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
1bc68                 | LR__3050
1bc68     00 FB 31 F9 | 	getword	result1, _var01, #0
1bc6c     80 FA 15 F2 | 	cmp	result1, #128 wc
1bc70     1C 00 90 3D |  if_ae	jmp	#LR__3052
1bc74     00 FB 31 F9 | 	getword	result1, _var01, #0
1bc78     01 FA 65 F0 | 	shl	result1, #1
1bc7c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1bc80     FD FA E1 FA | 	rdword	result1, result1
1bc84     FD 12 0A F2 | 	cmp	arg01, result1 wz
1bc88     01 00 06 51 |  if_ne	add	_var01, #1
1bc8c     D8 FF 9F 5D |  if_ne	jmp	#LR__3050
1bc90                 | LR__3051
1bc90                 | LR__3052
1bc90     00 01 32 F9 | 	getword	_var01, _var01, #0
1bc94     80 00 06 F1 | 	add	_var01, #128
1bc98     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1bc9c                 | LR__3053
1bc9c                 | LR__3054
1bc9c                 | ' 			c = (c + 0x80) & 0xFF;
1bc9c                 | ' 		}
1bc9c                 | ' 	}
1bc9c                 | ' 
1bc9c                 | ' 	return c;
1bc9c     00 FB 01 F6 | 	mov	result1, _var01
1bca0                 | _fatfs_cc_ff_uni2oem_ret
1bca0     2D 00 64 FD | 	ret
1bca4                 | 
1bca4                 | _fatfs_cc_ff_oem2uni
1bca4     00 00 06 F6 | 	mov	_var01, #0
1bca8     09 FB 31 F9 | 	getword	result1, arg01, #0
1bcac     80 FA 15 F2 | 	cmp	result1, #128 wc
1bcb0     09 01 02 C6 |  if_b	mov	_var01, arg01
1bcb4     2C 00 90 CD |  if_b	jmp	#LR__3061
1bcb8     0A 15 32 F9 | 	getword	arg02, arg02, #0
1bcbc     01 00 00 FF 
1bcc0     52 15 0E F2 | 	cmp	arg02, ##850 wz
1bcc4     1C 00 90 5D |  if_ne	jmp	#LR__3060
1bcc8     09 FB 31 F9 | 	getword	result1, arg01, #0
1bccc     00 FB 15 F2 | 	cmp	result1, #256 wc
1bcd0     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1bcd4     80 12 86 C1 |  if_b	sub	arg01, #128
1bcd8     01 12 66 C0 |  if_b	shl	arg01, #1
1bcdc     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1bce0     09 01 E2 CA |  if_b	rdword	_var01, arg01
1bce4                 | LR__3060
1bce4                 | LR__3061
1bce4                 | ' 		}
1bce4                 | ' 	}
1bce4                 | ' 
1bce4                 | ' 	return c;
1bce4     00 FB 01 F6 | 	mov	result1, _var01
1bce8                 | _fatfs_cc_ff_oem2uni_ret
1bce8     2D 00 64 FD | 	ret
1bcec                 | 
1bcec                 | _fatfs_cc_ff_wtoupper
1bcec     09 01 02 F6 | 	mov	_var01, arg01
1bcf0     80 00 00 FF 
1bcf4     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1bcf8     60 01 90 3D |  if_ae	jmp	#LR__3083
1bcfc     00 03 02 F6 | 	mov	_var02, _var01
1bd00     01 01 32 F9 | 	getword	_var01, _var02, #0
1bd04     08 00 00 FF 
1bd08     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1bd0c     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1bd10     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1bd14     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1bd18     01 00 00 3F 
1bd1c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1bd20     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1bd24     01 00 00 3F 
1bd28     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1bd2c     02 07 02 F6 | 	mov	_var04, _var03
1bd30                 | ' 		uc = (WORD)uni;
1bd30                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1bd30                 | ' 		for (;;) {
1bd30                 | LR__3070
1bd30     03 09 E2 FA | 	rdword	_var05, _var04
1bd34     04 05 02 F6 | 	mov	_var03, _var05
1bd38     0F 04 4E F7 | 	zerox	_var03, #15 wz
1bd3c     02 06 06 F1 | 	add	_var04, #2
1bd40     14 01 90 AD |  if_e	jmp	#LR__3082
1bd44     01 05 32 F9 | 	getword	_var03, _var02, #0
1bd48     04 01 32 F9 | 	getword	_var01, _var05, #0
1bd4c     00 05 12 F2 | 	cmp	_var03, _var01 wc
1bd50     04 01 90 CD |  if_b	jmp	#LR__3082
1bd54     03 0B E2 FA | 	rdword	_var06, _var04
1bd58     05 0D 32 F9 | 	getword	_var07, _var06, #0
1bd5c     08 0C 46 F0 | 	shr	_var07, #8
1bd60     05 0B 32 F9 | 	getword	_var06, _var06, #0
1bd64     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1bd68     01 05 32 F9 | 	getword	_var03, _var02, #0
1bd6c     04 0F 32 F9 | 	getword	_var08, _var05, #0
1bd70     05 01 32 F9 | 	getword	_var01, _var06, #0
1bd74     00 0F 02 F1 | 	add	_var08, _var01
1bd78     07 05 52 F2 | 	cmps	_var03, _var08 wc
1bd7c     02 06 06 F1 | 	add	_var04, #2
1bd80     C4 00 90 3D |  if_ae	jmp	#LR__3081
1bd84                 | ' 				switch (cmd) {
1bd84     06 11 32 F9 | 	getword	_var09, _var07, #0
1bd88     09 10 26 F3 | 	fle	_var09, #9
1bd8c     30 10 62 FD | 	jmprel	_var09
1bd90                 | LR__3071
1bd90     24 00 90 FD | 	jmp	#LR__3072
1bd94     3C 00 90 FD | 	jmp	#LR__3073
1bd98     54 00 90 FD | 	jmp	#LR__3074
1bd9c     5C 00 90 FD | 	jmp	#LR__3075
1bda0     64 00 90 FD | 	jmp	#LR__3076
1bda4     6C 00 90 FD | 	jmp	#LR__3077
1bda8     74 00 90 FD | 	jmp	#LR__3078
1bdac     7C 00 90 FD | 	jmp	#LR__3079
1bdb0     84 00 90 FD | 	jmp	#LR__3080
1bdb4     A0 00 90 FD | 	jmp	#LR__3082
1bdb8                 | LR__3072
1bdb8     01 03 32 F9 | 	getword	_var02, _var02, #0
1bdbc     04 09 32 F9 | 	getword	_var05, _var05, #0
1bdc0     04 03 82 F1 | 	sub	_var02, _var05
1bdc4     01 02 66 F0 | 	shl	_var02, #1
1bdc8     03 03 02 F1 | 	add	_var02, _var04
1bdcc     01 03 E2 FA | 	rdword	_var02, _var02
1bdd0     84 00 90 FD | 	jmp	#LR__3082
1bdd4                 | LR__3073
1bdd4     01 05 32 F9 | 	getword	_var03, _var02, #0
1bdd8     01 03 32 F9 | 	getword	_var02, _var02, #0
1bddc     04 09 32 F9 | 	getword	_var05, _var05, #0
1bde0     04 03 82 F1 | 	sub	_var02, _var05
1bde4     01 02 06 F5 | 	and	_var02, #1
1bde8     02 03 C2 F2 | 	subr	_var02, _var03
1bdec     68 00 90 FD | 	jmp	#LR__3082
1bdf0                 | LR__3074
1bdf0     01 03 32 F9 | 	getword	_var02, _var02, #0
1bdf4     10 02 86 F1 | 	sub	_var02, #16
1bdf8     5C 00 90 FD | 	jmp	#LR__3082
1bdfc                 | LR__3075
1bdfc     01 03 32 F9 | 	getword	_var02, _var02, #0
1be00     20 02 86 F1 | 	sub	_var02, #32
1be04     50 00 90 FD | 	jmp	#LR__3082
1be08                 | LR__3076
1be08     01 03 32 F9 | 	getword	_var02, _var02, #0
1be0c     30 02 86 F1 | 	sub	_var02, #48
1be10     44 00 90 FD | 	jmp	#LR__3082
1be14                 | LR__3077
1be14     01 03 32 F9 | 	getword	_var02, _var02, #0
1be18     1A 02 86 F1 | 	sub	_var02, #26
1be1c     38 00 90 FD | 	jmp	#LR__3082
1be20                 | LR__3078
1be20     01 03 32 F9 | 	getword	_var02, _var02, #0
1be24     08 02 06 F1 | 	add	_var02, #8
1be28     2C 00 90 FD | 	jmp	#LR__3082
1be2c                 | LR__3079
1be2c     01 03 32 F9 | 	getword	_var02, _var02, #0
1be30     50 02 86 F1 | 	sub	_var02, #80
1be34     20 00 90 FD | 	jmp	#LR__3082
1be38                 | LR__3080
1be38     01 03 32 F9 | 	getword	_var02, _var02, #0
1be3c     0E 00 00 FF 
1be40     60 02 86 F1 | 	sub	_var02, ##7264
1be44                 | ' 				}
1be44                 | ' 				break;
1be44     10 00 90 FD | 	jmp	#LR__3082
1be48                 | LR__3081
1be48     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1be4c     02 0A 06 AA |  if_e	mul	_var06, #2
1be50     05 07 02 A1 |  if_e	add	_var04, _var06
1be54     D8 FE 9F FD | 	jmp	#LR__3070
1be58                 | LR__3082
1be58     01 01 32 F9 | 	getword	_var01, _var02, #0
1be5c                 | LR__3083
1be5c                 | ' 		}
1be5c                 | ' 		uni = uc;
1be5c                 | ' 	}
1be5c                 | ' 
1be5c                 | ' 	return uni;
1be5c     00 FB 01 F6 | 	mov	result1, _var01
1be60                 | _fatfs_cc_ff_wtoupper_ret
1be60     2D 00 64 FD | 	ret
1be64                 | 
1be64                 | _fatfs_cc_strncpy
1be64     09 01 02 F6 | 	mov	_var01, arg01
1be68     97 12 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
1be6c                 | ' 
1be6c                 | ' 	dscan = dst;
1be6c                 | ' 	sscan = src;
1be6c                 | ' 	count = n;
1be6c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1be6c                 | LR__3090
1be6c     01 16 86 F1 | 	sub	arg03, #1
1be70     00 16 56 F2 | 	cmps	arg03, #0 wc
1be74     18 00 90 CD |  if_b	jmp	#LR__3092
1be78     0A FB C1 FA | 	rdbyte	result1, arg02
1be7c     00 FB 41 FC | 	wrbyte	result1, _var01
1be80     01 14 06 F1 | 	add	arg02, #1
1be84     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1be88                 | ' 		continue;
1be88     01 00 06 F1 | 	add	_var01, #1
1be8c     DC FF 9F 5D |  if_ne	jmp	#LR__3090
1be90                 | LR__3091
1be90                 | LR__3092
1be90     97 0C 48 FB | 	callpa	#(@LR__3094-@LR__3093)>>2,fcache_load_ptr_
1be94                 | ' 	while (--count >= 0)
1be94                 | LR__3093
1be94     01 16 86 F1 | 	sub	arg03, #1
1be98     00 16 56 F2 | 	cmps	arg03, #0 wc
1be9c     00 03 02 36 |  if_ae	mov	_var02, _var01
1bea0     01 00 06 31 |  if_ae	add	_var01, #1
1bea4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1bea8     E8 FF 9F 3D |  if_ae	jmp	#LR__3093
1beac                 | LR__3094
1beac                 | ' 		*dscan++ = '\0';
1beac                 | ' 	return(dst);
1beac     09 FB 01 F6 | 	mov	result1, arg01
1beb0                 | _fatfs_cc_strncpy_ret
1beb0     2D 00 64 FD | 	ret
1beb4                 | 
1beb4                 | _fatfs_cc_memcmp
1beb4                 | ' 	for (n = size; n > 0; n--)
1beb4     00 16 0E F2 | 	cmp	arg03, #0 wz
1beb8     28 00 90 AD |  if_e	jmp	#LR__3101
1bebc                 | LR__3100
1bebc     09 01 C2 FA | 	rdbyte	_var01, arg01
1bec0     0A 03 C2 FA | 	rdbyte	_var02, arg02
1bec4     01 01 0A F2 | 	cmp	_var01, _var02 wz
1bec8     01 12 06 A1 |  if_e	add	arg01, #1
1becc     01 14 06 A1 |  if_e	add	arg02, #1
1bed0                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1bed0     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1bed4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1bed8     01 FB 81 51 |  if_ne	sub	result1, _var02
1bedc     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1bee0     F6 17 6E FB | 	djnz	arg03, #LR__3100
1bee4                 | LR__3101
1bee4                 | ' 
1bee4                 | ' 	return(0);
1bee4     00 FA 05 F6 | 	mov	result1, #0
1bee8                 | _fatfs_cc_memcmp_ret
1bee8     2D 00 64 FD | 	ret
1beec                 | 
1beec                 | _fatfs_cc_strncmp
1beec     09 01 0A F6 | 	mov	_var01, arg01 wz
1bef0     14 00 90 5D |  if_ne	jmp	#LR__3110
1bef4                 | ' 		return scan2 ? -1 : 0;
1bef4     00 14 0E F2 | 	cmp	arg02, #0 wz
1bef8     01 02 66 56 |  if_ne	neg	_var02, #1
1befc     00 02 06 A6 |  if_e	mov	_var02, #0
1bf00     01 FB 01 F6 | 	mov	result1, _var02
1bf04     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1bf08                 | LR__3110
1bf08     00 14 0E F2 | 	cmp	arg02, #0 wz
1bf0c     01 FA 05 A6 |  if_e	mov	result1, #1
1bf10     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bf14     0B 05 02 F6 | 	mov	_var03, arg03
1bf18     97 16 48 FB | 	callpa	#(@LR__3112-@LR__3111)>>2,fcache_load_ptr_
1bf1c                 | ' 	count = n;
1bf1c                 | ' 	do {
1bf1c                 | LR__3111
1bf1c     00 07 C2 FA | 	rdbyte	_var04, _var01
1bf20     0A 09 02 F6 | 	mov	_var05, arg02
1bf24     04 0B C2 FA | 	rdbyte	_var06, _var05
1bf28     01 04 86 F1 | 	sub	_var03, #1
1bf2c     00 04 56 F2 | 	cmps	_var03, #0 wc
1bf30     01 00 06 F1 | 	add	_var01, #1
1bf34     01 14 06 F1 | 	add	arg02, #1
1bf38     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1bf3c     08 00 90 2D |  if_nc_and_z	jmp	#LR__3113
1bf40     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1bf44     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3111
1bf48                 | LR__3112
1bf48                 | LR__3113
1bf48     00 04 56 F2 | 	cmps	_var03, #0 wc
1bf4c                 | ' 		return(0);
1bf4c     00 FA 05 C6 |  if_b	mov	result1, #0
1bf50     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1bf54     05 07 0A F2 | 	cmp	_var04, _var06 wz
1bf58                 | ' 		return(0);
1bf58     00 FA 05 A6 |  if_e	mov	result1, #0
1bf5c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bf60     00 06 0E F2 | 	cmp	_var04, #0 wz
1bf64                 | ' 		return(-1);
1bf64     01 FA 65 A6 |  if_e	neg	result1, #1
1bf68     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bf6c     00 0A 0E F2 | 	cmp	_var06, #0 wz
1bf70                 | ' 		return(1);
1bf70     01 FA 05 A6 |  if_e	mov	result1, #1
1bf74                 | ' 		return(c1 - c2);
1bf74     03 FB 01 56 |  if_ne	mov	result1, _var04
1bf78     05 FB 81 51 |  if_ne	sub	result1, _var06
1bf7c                 | _fatfs_cc_strncmp_ret
1bf7c     2D 00 64 FD | 	ret
1bf80                 | 
1bf80                 | _fatfs_cc_strchr
1bf80                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1bf80                 | ' 	while ((c = *s++) != (char) charwanted)
1bf80                 | LR__3120
1bf80     09 01 02 F6 | 	mov	_var01, arg01
1bf84     00 03 C2 FA | 	rdbyte	_var02, _var01
1bf88     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1bf8c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1bf90     03 05 0A F2 | 	cmp	_var03, _var04 wz
1bf94     01 12 06 F1 | 	add	arg01, #1
1bf98     14 00 90 AD |  if_e	jmp	#LR__3121
1bf9c     01 05 02 F6 | 	mov	_var03, _var02
1bfa0     07 04 4E F7 | 	zerox	_var03, #7 wz
1bfa4     00 FA 05 A6 |  if_e	mov	result1, #0
1bfa8     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1bfac     D0 FF 9F FD | 	jmp	#LR__3120
1bfb0                 | LR__3121
1bfb0                 | ' 	return((char *)--s);
1bfb0     01 12 86 F1 | 	sub	arg01, #1
1bfb4     09 FB 01 F6 | 	mov	result1, arg01
1bfb8                 | _fatfs_cc_strchr_ret
1bfb8     2D 00 64 FD | 	ret
1bfbc                 | 
1bfbc                 | _fatfs_cc_disk_initialize
1bfbc     04 4A 05 F6 | 	mov	COUNT_, #4
1bfc0     A8 00 A0 FD | 	call	#pushregs_
1bfc4     40 F0 07 F1 | 	add	ptra, #64
1bfc8     04 4E 05 F1 | 	add	fp, #4
1bfcc     A7 12 42 FC | 	wrbyte	arg01, fp
1bfd0     01 00 00 FF 
1bfd4     14 E4 05 F1 | 	add	objptr, ##532
1bfd8     F2 18 02 FB | 	rdlong	arg04, objptr
1bfdc     2C 4E 05 F1 | 	add	fp, #44
1bfe0     A7 18 62 FC | 	wrlong	arg04, fp
1bfe4     04 E4 85 F1 | 	sub	objptr, #4
1bfe8     F2 18 02 FB | 	rdlong	arg04, objptr
1bfec     04 4E 05 F1 | 	add	fp, #4
1bff0     A7 18 62 FC | 	wrlong	arg04, fp
1bff4     08 E4 05 F1 | 	add	objptr, #8
1bff8     F2 18 02 FB | 	rdlong	arg04, objptr
1bffc     04 4E 05 F1 | 	add	fp, #4
1c000     A7 18 62 FC | 	wrlong	arg04, fp
1c004     04 E4 05 F1 | 	add	objptr, #4
1c008     F2 18 02 FB | 	rdlong	arg04, objptr
1c00c     04 4E 05 F1 | 	add	fp, #4
1c010     A7 18 62 FC | 	wrlong	arg04, fp
1c014     04 E4 05 F1 | 	add	objptr, #4
1c018     F2 02 48 FC | 	wrbyte	#1, objptr
1c01c     01 00 00 FF 
1c020     20 E4 85 F1 | 	sub	objptr, ##544
1c024     38 4E 85 F1 | 	sub	fp, #56
1c028     A7 18 CA FA | 	rdbyte	arg04, fp wz
1c02c     04 4E 85 F1 | 	sub	fp, #4
1c030                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1c030                 | '             return RES_NOTRDY;
1c030     03 FA 05 56 |  if_ne	mov	result1, #3
1c034     D8 05 90 5D |  if_ne	jmp	#LR__3148
1c038     13 00 00 FF 
1c03c     10 13 06 F6 | 	mov	arg01, ##10000
1c040     80 9E BF FD | 	call	#__system___waitus
1c044     30 4E 05 F1 | 	add	fp, #48
1c048     A7 12 02 FB | 	rdlong	arg01, fp
1c04c     09 01 08 FC | 	wrpin	#0, arg01
1c050     04 4E 05 F1 | 	add	fp, #4
1c054     A7 12 02 FB | 	rdlong	arg01, fp
1c058     09 01 08 FC | 	wrpin	#0, arg01
1c05c     04 4E 05 F1 | 	add	fp, #4
1c060     A7 12 02 FB | 	rdlong	arg01, fp
1c064     09 01 08 FC | 	wrpin	#0, arg01
1c068     04 4E 05 F1 | 	add	fp, #4
1c06c     A7 12 02 FB | 	rdlong	arg01, fp
1c070     09 00 80 FF 
1c074     09 01 08 FC | 	wrpin	##4608, arg01
1c078     0C 4E 85 F1 | 	sub	fp, #12
1c07c     A7 12 02 FB | 	rdlong	arg01, fp
1c080     59 12 62 FD | 	drvh	arg01
1c084     04 4E 05 F1 | 	add	fp, #4
1c088     A7 12 02 FB | 	rdlong	arg01, fp
1c08c     59 12 62 FD | 	drvh	arg01
1c090     04 4E 05 F1 | 	add	fp, #4
1c094     A7 12 02 FB | 	rdlong	arg01, fp
1c098     59 12 62 FD | 	drvh	arg01
1c09c     04 4E 05 F1 | 	add	fp, #4
1c0a0     A7 12 02 FB | 	rdlong	arg01, fp
1c0a4     59 12 62 FD | 	drvh	arg01
1c0a8     20 4E 85 F1 | 	sub	fp, #32
1c0ac     00 04 80 FF 
1c0b0     A7 20 68 FC | 	wrlong	##524304, fp
1c0b4     04 4E 05 F1 | 	add	fp, #4
1c0b8     20 03 80 FF 
1c0bc     A7 90 68 FC | 	wrlong	##409672, fp
1c0c0     14 4E 05 F1 | 	add	fp, #20
1c0c4     A7 1E 02 FB | 	rdlong	local01, fp
1c0c8     18 4E 85 F1 | 	sub	fp, #24
1c0cc     A7 16 02 FB | 	rdlong	arg03, fp
1c0d0     40 1E 62 FD | 	dirl	local01
1c0d4     A0 03 80 FF 
1c0d8     0F 91 08 FC | 	wrpin	##475208, local01
1c0dc     0F 17 12 FC | 	wxpin	arg03, local01
1c0e0     0F 01 28 FC | 	wypin	#0, local01
1c0e4     41 1E 62 FD | 	dirh	local01
1c0e8     1C 4E 05 F1 | 	add	fp, #28
1c0ec     A7 20 02 FB | 	rdlong	local02, fp
1c0f0     10 1F 82 F1 | 	sub	local01, local02
1c0f4     07 1E 06 F5 | 	and	local01, #7
1c0f8     18 1E 66 F0 | 	shl	local01, #24
1c0fc     78 14 06 F6 | 	mov	arg02, #120
1c100     0F 15 42 F5 | 	or	arg02, local01
1c104     14 4E 85 F1 | 	sub	fp, #20
1c108     A7 14 62 FC | 	wrlong	arg02, fp
1c10c     14 4E 05 F1 | 	add	fp, #20
1c110     A7 12 02 FB | 	rdlong	arg01, fp
1c114     10 14 26 F4 | 	bith	arg02, #16
1c118     40 12 62 FD | 	dirl	arg01
1c11c     09 15 02 FC | 	wrpin	arg02, arg01
1c120     09 3F 18 FC | 	wxpin	#31, arg01
1c124     FF FF FF FF 
1c128     09 FF 2B FC | 	wypin	##-1, arg01
1c12c     41 12 62 FD | 	dirh	arg01
1c130     04 4E 85 F1 | 	sub	fp, #4
1c134     A7 14 02 FB | 	rdlong	arg02, fp
1c138     08 4E 05 F1 | 	add	fp, #8
1c13c     A7 22 02 FB | 	rdlong	local03, fp
1c140     11 15 82 F1 | 	sub	arg02, local03
1c144     07 14 06 F5 | 	and	arg02, #7
1c148     18 14 66 F0 | 	shl	arg02, #24
1c14c     14 4E 85 F1 | 	sub	fp, #20
1c150     A7 14 62 FC | 	wrlong	arg02, fp
1c154     29 00 00 FF 
1c158     7A 14 46 F5 | 	or	arg02, ##21114
1c15c     A7 14 62 FC | 	wrlong	arg02, fp
1c160     14 4E 05 F1 | 	add	fp, #20
1c164     A7 12 02 FB | 	rdlong	arg01, fp
1c168     40 12 62 FD | 	dirl	arg01
1c16c     09 15 02 FC | 	wrpin	arg02, arg01
1c170     09 4F 18 FC | 	wxpin	#39, arg01
1c174     09 01 28 FC | 	wypin	#0, arg01
1c178     41 12 62 FD | 	dirh	arg01
1c17c     28 4E 85 F1 | 	sub	fp, #40
1c180     A7 12 02 F6 | 	mov	arg01, fp
1c184     14 4E 85 F1 | 	sub	fp, #20
1c188     0A 14 06 F6 | 	mov	arg02, #10
1c18c     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0937
1c190     00 12 06 F6 | 	mov	arg01, #0
1c194     00 14 06 F6 | 	mov	arg02, #0
1c198     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c19c     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0947
1c1a0     64 12 06 F6 | 	mov	arg01, #100
1c1a4     1C 9D BF FD | 	call	#__system___waitus
1c1a8     14 4E 05 F1 | 	add	fp, #20
1c1ac     A7 12 02 F6 | 	mov	arg01, fp
1c1b0     14 4E 85 F1 | 	sub	fp, #20
1c1b4     0A 14 06 F6 | 	mov	arg02, #10
1c1b8     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0937
1c1bc     0C 4E 05 F1 | 	add	fp, #12
1c1c0     A7 00 48 FC | 	wrbyte	#0, fp
1c1c4     0C 4E 85 F1 | 	sub	fp, #12
1c1c8     00 12 06 F6 | 	mov	arg01, #0
1c1cc     00 14 06 F6 | 	mov	arg02, #0
1c1d0     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c1d4     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1c1d8     01 18 0E F2 | 	cmp	arg04, #1 wz
1c1dc     B8 03 90 5D |  if_ne	jmp	#LR__3147
1c1e0     08 12 06 F6 | 	mov	arg01, #8
1c1e4     AA 15 06 F6 | 	mov	arg02, #426
1c1e8     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c1ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c1f0     01 FA 0D F2 | 	cmp	result1, #1 wz
1c1f4     98 01 90 5D |  if_ne	jmp	#LR__3133
1c1f8     14 4E 05 F1 | 	add	fp, #20
1c1fc     A7 12 02 F6 | 	mov	arg01, fp
1c200     14 4E 85 F1 | 	sub	fp, #20
1c204     04 14 06 F6 | 	mov	arg02, #4
1c208     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0937
1c20c     16 4E 05 F1 | 	add	fp, #22
1c210     A7 24 C2 FA | 	rdbyte	local04, fp
1c214     16 4E 85 F1 | 	sub	fp, #22
1c218     01 24 0E F2 | 	cmp	local04, #1 wz
1c21c     17 4E 05 A1 |  if_e	add	fp, #23
1c220     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1c224     17 4E 85 A1 |  if_e	sub	fp, #23
1c228     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1c22c     68 03 90 5D |  if_ne	jmp	#LR__3146
1c230                 | ' 				for (tmr = 1000; tmr; tmr--) {
1c230     18 4E 05 F1 | 	add	fp, #24
1c234     01 00 80 FF 
1c238     A7 D0 6B FC | 	wrlong	##1000, fp
1c23c     18 4E 85 F1 | 	sub	fp, #24
1c240                 | LR__3130
1c240     18 4E 05 F1 | 	add	fp, #24
1c244     A7 1E 0A FB | 	rdlong	local01, fp wz
1c248     18 4E 85 F1 | 	sub	fp, #24
1c24c     3C 00 90 AD |  if_e	jmp	#LR__3131
1c250     A9 12 06 F6 | 	mov	arg01, #169
1c254     1E 14 C6 F9 | 	decod	arg02, #30
1c258     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c25c     FD 24 02 F6 | 	mov	local04, result1
1c260     07 24 4E F7 | 	zerox	local04, #7 wz
1c264     24 00 90 AD |  if_e	jmp	#LR__3131
1c268     01 00 00 FF 
1c26c     E8 13 06 F6 | 	mov	arg01, ##1000
1c270     50 9C BF FD | 	call	#__system___waitus
1c274     18 4E 05 F1 | 	add	fp, #24
1c278     A7 24 02 FB | 	rdlong	local04, fp
1c27c     01 24 86 F1 | 	sub	local04, #1
1c280     A7 24 62 FC | 	wrlong	local04, fp
1c284     18 4E 85 F1 | 	sub	fp, #24
1c288     B4 FF 9F FD | 	jmp	#LR__3130
1c28c                 | LR__3131
1c28c     18 4E 05 F1 | 	add	fp, #24
1c290     A7 24 0A FB | 	rdlong	local04, fp wz
1c294     18 4E 85 F1 | 	sub	fp, #24
1c298     4C 00 90 AD |  if_e	jmp	#LR__3132
1c29c     3A 12 06 F6 | 	mov	arg01, #58
1c2a0     00 14 06 F6 | 	mov	arg02, #0
1c2a4     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c2a8     FD 22 02 F6 | 	mov	local03, result1
1c2ac     07 22 4E F7 | 	zerox	local03, #7 wz
1c2b0     34 00 90 5D |  if_ne	jmp	#LR__3132
1c2b4     14 4E 05 F1 | 	add	fp, #20
1c2b8     A7 12 02 F6 | 	mov	arg01, fp
1c2bc     14 4E 85 F1 | 	sub	fp, #20
1c2c0     04 14 06 F6 | 	mov	arg02, #4
1c2c4     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0937
1c2c8     14 4E 05 F1 | 	add	fp, #20
1c2cc     A7 1E C2 FA | 	rdbyte	local01, fp
1c2d0     40 1E CE F7 | 	test	local01, #64 wz
1c2d4     0C 24 06 56 |  if_ne	mov	local04, #12
1c2d8     04 24 06 A6 |  if_e	mov	local04, #4
1c2dc     08 4E 85 F1 | 	sub	fp, #8
1c2e0     A7 24 42 FC | 	wrbyte	local04, fp
1c2e4     0C 4E 85 F1 | 	sub	fp, #12
1c2e8                 | LR__3132
1c2e8     14 24 06 FB | 	rdlong	local04, #20
1c2ec     18 4E 05 F1 | 	add	fp, #24
1c2f0     A7 24 62 FC | 	wrlong	local04, fp
1c2f4     0C 4E 05 F1 | 	add	fp, #12
1c2f8     A7 24 02 FB | 	rdlong	local04, fp
1c2fc     1B 24 26 F4 | 	bith	local04, #27
1c300     A7 24 62 FC | 	wrlong	local04, fp
1c304     0C 4E 85 F1 | 	sub	fp, #12
1c308     A7 24 02 FB | 	rdlong	local04, fp
1c30c     18 4E 85 F1 | 	sub	fp, #24
1c310     68 78 04 FF 
1c314     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1c318     1C 4E 05 C1 |  if_b	add	fp, #28
1c31c     00 01 80 CF 
1c320     A7 08 68 CC |  if_b	wrlong	##131076, fp
1c324     1C 4E 85 C1 |  if_b	sub	fp, #28
1c328     6C 02 90 CD |  if_b	jmp	#LR__3146
1c32c     18 4E 05 F1 | 	add	fp, #24
1c330     A7 24 02 FB | 	rdlong	local04, fp
1c334     18 4E 85 F1 | 	sub	fp, #24
1c338     E1 F5 05 FF 
1c33c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c340     1C 4E 05 C1 |  if_b	add	fp, #28
1c344     00 01 80 CF 
1c348     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1c34c     1C 4E 85 C1 |  if_b	sub	fp, #28
1c350     44 02 90 CD |  if_b	jmp	#LR__3146
1c354     18 4E 05 F1 | 	add	fp, #24
1c358     A7 24 02 FB | 	rdlong	local04, fp
1c35c     18 4E 85 F1 | 	sub	fp, #24
1c360     3B 58 08 FF 
1c364     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1c368     1C 4E 05 C1 |  if_b	add	fp, #28
1c36c     00 01 80 CF 
1c370     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1c374     1C 4E 85 C1 |  if_b	sub	fp, #28
1c378     1C 02 90 CD |  if_b	jmp	#LR__3146
1c37c     1C 4E 05 F1 | 	add	fp, #28
1c380     80 01 80 FF 
1c384     A7 10 68 FC | 	wrlong	##196616, fp
1c388     1C 4E 85 F1 | 	sub	fp, #28
1c38c     08 02 90 FD | 	jmp	#LR__3146
1c390                 | LR__3133
1c390     A9 12 06 F6 | 	mov	arg01, #169
1c394     00 14 06 F6 | 	mov	arg02, #0
1c398     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c39c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1c3a0     02 24 16 F2 | 	cmp	local04, #2 wc
1c3a4     18 00 90 3D |  if_ae	jmp	#LR__3134
1c3a8     0C 4E 05 F1 | 	add	fp, #12
1c3ac     A7 04 48 FC | 	wrbyte	#2, fp
1c3b0     04 4E 05 F1 | 	add	fp, #4
1c3b4     A7 52 49 FC | 	wrbyte	#169, fp
1c3b8     10 4E 85 F1 | 	sub	fp, #16
1c3bc     14 00 90 FD | 	jmp	#LR__3135
1c3c0                 | LR__3134
1c3c0     0C 4E 05 F1 | 	add	fp, #12
1c3c4     A7 02 48 FC | 	wrbyte	#1, fp
1c3c8     04 4E 05 F1 | 	add	fp, #4
1c3cc     A7 02 48 FC | 	wrbyte	#1, fp
1c3d0     10 4E 85 F1 | 	sub	fp, #16
1c3d4                 | LR__3135
1c3d4                 | ' 				ty =  0x01 ; cmd =  (1) ;
1c3d4                 | ' 			}
1c3d4                 | ' 			for (tmr = 1000; tmr; tmr--) {
1c3d4     18 4E 05 F1 | 	add	fp, #24
1c3d8     01 00 80 FF 
1c3dc     A7 D0 6B FC | 	wrlong	##1000, fp
1c3e0     18 4E 85 F1 | 	sub	fp, #24
1c3e4                 | LR__3136
1c3e4     18 4E 05 F1 | 	add	fp, #24
1c3e8     A7 22 0A FB | 	rdlong	local03, fp wz
1c3ec     18 4E 85 F1 | 	sub	fp, #24
1c3f0     44 00 90 AD |  if_e	jmp	#LR__3137
1c3f4     10 4E 05 F1 | 	add	fp, #16
1c3f8     A7 12 C2 FA | 	rdbyte	arg01, fp
1c3fc     10 4E 85 F1 | 	sub	fp, #16
1c400     00 14 06 F6 | 	mov	arg02, #0
1c404     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c408     FD 24 02 F6 | 	mov	local04, result1
1c40c     07 24 4E F7 | 	zerox	local04, #7 wz
1c410     24 00 90 AD |  if_e	jmp	#LR__3137
1c414     01 00 00 FF 
1c418     E8 13 06 F6 | 	mov	arg01, ##1000
1c41c     A4 9A BF FD | 	call	#__system___waitus
1c420     18 4E 05 F1 | 	add	fp, #24
1c424     A7 24 02 FB | 	rdlong	local04, fp
1c428     01 24 86 F1 | 	sub	local04, #1
1c42c     A7 24 62 FC | 	wrlong	local04, fp
1c430     18 4E 85 F1 | 	sub	fp, #24
1c434     AC FF 9F FD | 	jmp	#LR__3136
1c438                 | LR__3137
1c438     18 4E 05 F1 | 	add	fp, #24
1c43c     A7 24 0A FB | 	rdlong	local04, fp wz
1c440     18 4E 85 F1 | 	sub	fp, #24
1c444     14 00 90 AD |  if_e	jmp	#LR__3138
1c448     10 12 06 F6 | 	mov	arg01, #16
1c44c     09 14 C6 F9 | 	decod	arg02, #9
1c450     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c454     07 FA 4D F7 | 	zerox	result1, #7 wz
1c458     0C 00 90 AD |  if_e	jmp	#LR__3139
1c45c                 | LR__3138
1c45c     0C 4E 05 F1 | 	add	fp, #12
1c460     A7 00 48 FC | 	wrbyte	#0, fp
1c464     0C 4E 85 F1 | 	sub	fp, #12
1c468                 | LR__3139
1c468     14 24 06 FB | 	rdlong	local04, #20
1c46c     18 4E 05 F1 | 	add	fp, #24
1c470     A7 24 62 FC | 	wrlong	local04, fp
1c474     18 4E 85 F1 | 	sub	fp, #24
1c478     F0 FA 02 FF 
1c47c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1c480     18 00 90 3D |  if_ae	jmp	#LR__3140
1c484     24 4E 05 F1 | 	add	fp, #36
1c488     A7 24 02 FB | 	rdlong	local04, fp
1c48c     1B 24 26 F4 | 	bith	local04, #27
1c490     A7 24 62 FC | 	wrlong	local04, fp
1c494     24 4E 85 F1 | 	sub	fp, #36
1c498     2C 00 90 FD | 	jmp	#LR__3141
1c49c                 | LR__3140
1c49c     18 4E 05 F1 | 	add	fp, #24
1c4a0     A7 24 02 FB | 	rdlong	local04, fp
1c4a4     18 4E 85 F1 | 	sub	fp, #24
1c4a8     E1 F5 05 FF 
1c4ac     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c4b0     24 4E 05 C1 |  if_b	add	fp, #36
1c4b4     A7 24 02 CB |  if_b	rdlong	local04, fp
1c4b8     80 00 04 CF 
1c4bc     00 24 46 C5 |  if_b	or	local04, ##134283264
1c4c0     A7 24 62 CC |  if_b	wrlong	local04, fp
1c4c4     24 4E 85 C1 |  if_b	sub	fp, #36
1c4c8                 | LR__3141
1c4c8     18 4E 05 F1 | 	add	fp, #24
1c4cc     A7 24 02 FB | 	rdlong	local04, fp
1c4d0     18 4E 85 F1 | 	sub	fp, #24
1c4d4     F0 FA 02 FF 
1c4d8     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1c4dc     1C 4E 05 C1 |  if_b	add	fp, #28
1c4e0     00 01 80 CF 
1c4e4     A7 08 68 CC |  if_b	wrlong	##131076, fp
1c4e8     1C 4E 85 C1 |  if_b	sub	fp, #28
1c4ec     A8 00 90 CD |  if_b	jmp	#LR__3145
1c4f0     18 4E 05 F1 | 	add	fp, #24
1c4f4     A7 24 02 FB | 	rdlong	local04, fp
1c4f8     18 4E 85 F1 | 	sub	fp, #24
1c4fc     68 78 04 FF 
1c500     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1c504     1C 4E 05 C1 |  if_b	add	fp, #28
1c508     80 01 80 CF 
1c50c     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1c510     1C 4E 85 C1 |  if_b	sub	fp, #28
1c514     80 00 90 CD |  if_b	jmp	#LR__3144
1c518     18 4E 05 F1 | 	add	fp, #24
1c51c     A7 24 02 FB | 	rdlong	local04, fp
1c520     18 4E 85 F1 | 	sub	fp, #24
1c524     E1 F5 05 FF 
1c528     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c52c     1C 4E 05 C1 |  if_b	add	fp, #28
1c530     00 02 80 CF 
1c534     A7 10 68 CC |  if_b	wrlong	##262152, fp
1c538     1C 4E 85 C1 |  if_b	sub	fp, #28
1c53c     58 00 90 CD |  if_b	jmp	#LR__3143
1c540     18 4E 05 F1 | 	add	fp, #24
1c544     A7 24 02 FB | 	rdlong	local04, fp
1c548     18 4E 85 F1 | 	sub	fp, #24
1c54c     59 73 07 FF 
1c550     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1c554     1C 4E 05 C1 |  if_b	add	fp, #28
1c558     80 02 80 CF 
1c55c     A7 14 68 CC |  if_b	wrlong	##327690, fp
1c560     1C 4E 85 C1 |  if_b	sub	fp, #28
1c564     30 00 90 CD |  if_b	jmp	#LR__3142
1c568     18 4E 05 F1 | 	add	fp, #24
1c56c     A7 24 02 FB | 	rdlong	local04, fp
1c570     18 4E 85 F1 | 	sub	fp, #24
1c574     D1 F0 08 FF 
1c578     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1c57c     1C 4E 05 C1 |  if_b	add	fp, #28
1c580     00 03 80 CF 
1c584     A7 18 68 CC |  if_b	wrlong	##393228, fp
1c588     1C 4E 85 F3 | 	sumc	fp, #28
1c58c     80 03 80 3F 
1c590     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1c594     1C 4E 85 31 |  if_ae	sub	fp, #28
1c598                 | LR__3142
1c598                 | LR__3143
1c598                 | LR__3144
1c598                 | LR__3145
1c598                 | LR__3146
1c598                 | LR__3147
1c598     0C 4E 05 F1 | 	add	fp, #12
1c59c     A7 24 C2 FA | 	rdbyte	local04, fp
1c5a0     01 00 00 FF 
1c5a4     21 E4 05 F1 | 	add	objptr, ##545
1c5a8     F2 24 42 FC | 	wrbyte	local04, objptr
1c5ac     A7 1E CA FA | 	rdbyte	local01, fp wz
1c5b0     00 24 06 56 |  if_ne	mov	local04, #0
1c5b4     01 24 06 A6 |  if_e	mov	local04, #1
1c5b8     20 4E 05 F1 | 	add	fp, #32
1c5bc     A7 24 42 FC | 	wrbyte	local04, fp
1c5c0     A7 24 C2 FA | 	rdbyte	local04, fp
1c5c4     2C 4E 85 F1 | 	sub	fp, #44
1c5c8     01 E4 85 F1 | 	sub	objptr, #1
1c5cc     F2 24 42 FC | 	wrbyte	local04, objptr
1c5d0     01 00 00 FF 
1c5d4     20 E4 85 F1 | 	sub	objptr, ##544
1c5d8     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0947
1c5dc     34 4E 05 F1 | 	add	fp, #52
1c5e0     A7 12 02 FB | 	rdlong	arg01, fp
1c5e4     18 4E 85 F1 | 	sub	fp, #24
1c5e8     A7 14 02 FB | 	rdlong	arg02, fp
1c5ec     09 15 12 FC | 	wxpin	arg02, arg01
1c5f0     1C 4E 05 F1 | 	add	fp, #28
1c5f4     A7 12 02 FB | 	rdlong	arg01, fp
1c5f8     14 4E 85 F1 | 	sub	fp, #20
1c5fc     A7 14 02 FB | 	rdlong	arg02, fp
1c600     09 15 02 FC | 	wrpin	arg02, arg01
1c604                 | ' 
1c604                 | ' 		}
1c604                 | ' 	}
1c604                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1c604                 | ' 	CardType = ty;
1c604                 | ' 	s = ty ? 0 :  0x01 ;
1c604                 | ' 	Stat = s;
1c604                 | ' 
1c604                 | ' 	deselect();
1c604                 | ' 
1c604                 | ' 
1c604                 | ' 	_wxpin( PIN_CLK, ck_div );
1c604                 | ' 	_wrpin( PIN_DI, spm_tx );
1c604                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1c604                 | ' 	return s;
1c604     08 4E 05 F1 | 	add	fp, #8
1c608     A7 FA C1 FA | 	rdbyte	result1, fp
1c60c     2C 4E 85 F1 | 	sub	fp, #44
1c610                 | LR__3148
1c610     A7 F0 03 F6 | 	mov	ptra, fp
1c614     B2 00 A0 FD | 	call	#popregs_
1c618                 | _fatfs_cc_disk_initialize_ret
1c618     2D 00 64 FD | 	ret
1c61c                 | 
1c61c                 | _fatfs_cc_disk_read
1c61c     05 4A 05 F6 | 	mov	COUNT_, #5
1c620     A8 00 A0 FD | 	call	#pushregs_
1c624     0A 1F 02 F6 | 	mov	local01, arg02
1c628     0B 21 02 F6 | 	mov	local02, arg03
1c62c     0C 23 02 F6 | 	mov	local03, arg04
1c630     00 12 0E F2 | 	cmp	arg01, #0 wz
1c634     01 FA 05 56 |  if_ne	mov	result1, #1
1c638                 | ' 
1c638                 | ' 	return Stat;
1c638     01 00 00 AF 
1c63c     20 E4 05 A1 |  if_e	add	objptr, ##544
1c640     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c644     01 00 00 AF 
1c648     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c64c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c650     01 FA CD F7 | 	test	result1, #1 wz
1c654     03 FA 05 56 |  if_ne	mov	result1, #3
1c658     84 00 90 5D |  if_ne	jmp	#LR__3152
1c65c     01 00 00 FF 
1c660     21 E4 05 F1 | 	add	objptr, ##545
1c664     F2 24 C2 FA | 	rdbyte	local04, objptr
1c668     01 00 00 FF 
1c66c     21 E4 85 F1 | 	sub	objptr, ##545
1c670     08 24 CE F7 | 	test	local04, #8 wz
1c674     09 20 66 A0 |  if_e	shl	local02, #9
1c678     02 22 16 F2 | 	cmp	local03, #2 wc
1c67c     12 24 06 36 |  if_ae	mov	local04, #18
1c680     11 24 06 C6 |  if_b	mov	local04, #17
1c684     10 15 02 F6 | 	mov	arg02, local02
1c688     12 13 02 F6 | 	mov	arg01, local04
1c68c     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c690     FD 26 02 F6 | 	mov	local05, result1
1c694     07 26 4E F7 | 	zerox	local05, #7 wz
1c698     30 00 90 5D |  if_ne	jmp	#LR__3151
1c69c                 | ' 		do {
1c69c                 | LR__3150
1c69c     0F 13 02 F6 | 	mov	arg01, local01
1c6a0     09 14 C6 F9 | 	decod	arg02, #9
1c6a4     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0955
1c6a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6ac     01 00 00 5F 
1c6b0     00 1E 06 51 |  if_ne	add	local01, ##512
1c6b4     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3150
1c6b8     12 25 E2 F8 | 	getbyte	local04, local04, #0
1c6bc     12 24 0E F2 | 	cmp	local04, #18 wz
1c6c0     0C 12 06 A6 |  if_e	mov	arg01, #12
1c6c4     00 14 06 A6 |  if_e	mov	arg02, #0
1c6c8     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0961
1c6cc                 | LR__3151
1c6cc     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0947
1c6d0                 | ' 	}
1c6d0                 | ' 	deselect();
1c6d0                 | ' 
1c6d0                 | ' 	return count ? RES_ERROR : RES_OK;
1c6d0     00 22 0E F2 | 	cmp	local03, #0 wz
1c6d4     01 26 06 56 |  if_ne	mov	local05, #1
1c6d8     00 26 06 A6 |  if_e	mov	local05, #0
1c6dc     13 FB 01 F6 | 	mov	result1, local05
1c6e0                 | LR__3152
1c6e0     A7 F0 03 F6 | 	mov	ptra, fp
1c6e4     B2 00 A0 FD | 	call	#popregs_
1c6e8                 | _fatfs_cc_disk_read_ret
1c6e8     2D 00 64 FD | 	ret
1c6ec                 | 
1c6ec                 | _fatfs_cc_disk_write
1c6ec     04 4A 05 F6 | 	mov	COUNT_, #4
1c6f0     A8 00 A0 FD | 	call	#pushregs_
1c6f4     0A 1F 02 F6 | 	mov	local01, arg02
1c6f8     0C 21 02 F6 | 	mov	local02, arg04
1c6fc     0B 23 02 F6 | 	mov	local03, arg03
1c700     00 12 0E F2 | 	cmp	arg01, #0 wz
1c704     01 FA 05 56 |  if_ne	mov	result1, #1
1c708                 | ' 
1c708                 | ' 	return Stat;
1c708     01 00 00 AF 
1c70c     20 E4 05 A1 |  if_e	add	objptr, ##544
1c710     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c714     01 00 00 AF 
1c718     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c71c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c720     01 FA CD F7 | 	test	result1, #1 wz
1c724     03 FA 05 56 |  if_ne	mov	result1, #3
1c728     D4 00 90 5D |  if_ne	jmp	#LR__3164
1c72c     01 00 00 FF 
1c730     21 E4 05 F1 | 	add	objptr, ##545
1c734     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c738     01 00 00 FF 
1c73c     21 E4 85 F1 | 	sub	objptr, ##545
1c740     08 16 CE F7 | 	test	arg03, #8 wz
1c744     09 22 66 A0 |  if_e	shl	local03, #9
1c748     01 20 0E F2 | 	cmp	local02, #1 wz
1c74c     30 00 90 5D |  if_ne	jmp	#LR__3160
1c750     18 12 06 F6 | 	mov	arg01, #24
1c754     11 15 02 F6 | 	mov	arg02, local03
1c758     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c75c     FD 24 02 F6 | 	mov	local04, result1
1c760     07 24 4E F7 | 	zerox	local04, #7 wz
1c764     84 00 90 5D |  if_ne	jmp	#LR__3163
1c768     0F 13 02 F6 | 	mov	arg01, local01
1c76c     FE 14 06 F6 | 	mov	arg02, #254
1c770     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0957
1c774     00 FA 0D F2 | 	cmp	result1, #0 wz
1c778     00 20 06 56 |  if_ne	mov	local02, #0
1c77c     6C 00 90 FD | 	jmp	#LR__3163
1c780                 | LR__3160
1c780     01 00 00 FF 
1c784     21 E4 05 F1 | 	add	objptr, ##545
1c788     F2 24 C2 FA | 	rdbyte	local04, objptr
1c78c     01 00 00 FF 
1c790     21 E4 85 F1 | 	sub	objptr, ##545
1c794     06 24 CE F7 | 	test	local04, #6 wz
1c798     97 12 06 56 |  if_ne	mov	arg01, #151
1c79c     10 15 02 56 |  if_ne	mov	arg02, local02
1c7a0     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0961
1c7a4     11 15 02 F6 | 	mov	arg02, local03
1c7a8     19 12 06 F6 | 	mov	arg01, #25
1c7ac     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c7b0     FD 24 02 F6 | 	mov	local04, result1
1c7b4     07 24 4E F7 | 	zerox	local04, #7 wz
1c7b8     30 00 90 5D |  if_ne	jmp	#LR__3162
1c7bc                 | ' 			do {
1c7bc                 | LR__3161
1c7bc     0F 13 02 F6 | 	mov	arg01, local01
1c7c0     FC 14 06 F6 | 	mov	arg02, #252
1c7c4     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0957
1c7c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7cc     01 00 00 5F 
1c7d0     00 1E 06 51 |  if_ne	add	local01, ##512
1c7d4     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3161
1c7d8     00 12 06 F6 | 	mov	arg01, #0
1c7dc     FD 14 06 F6 | 	mov	arg02, #253
1c7e0     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0957
1c7e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7e8     01 20 06 A6 |  if_e	mov	local02, #1
1c7ec                 | LR__3162
1c7ec                 | LR__3163
1c7ec     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0947
1c7f0                 | ' 				count = 1;
1c7f0                 | ' 		}
1c7f0                 | ' 	}
1c7f0                 | ' 	deselect();
1c7f0                 | ' 
1c7f0                 | ' 	return count ? RES_ERROR : RES_OK;
1c7f0     00 20 0E F2 | 	cmp	local02, #0 wz
1c7f4     01 24 06 56 |  if_ne	mov	local04, #1
1c7f8     00 24 06 A6 |  if_e	mov	local04, #0
1c7fc     12 FB 01 F6 | 	mov	result1, local04
1c800                 | LR__3164
1c800     A7 F0 03 F6 | 	mov	ptra, fp
1c804     B2 00 A0 FD | 	call	#popregs_
1c808                 | _fatfs_cc_disk_write_ret
1c808     2D 00 64 FD | 	ret
1c80c                 | 
1c80c                 | _fatfs_cc_disk_ioctl
1c80c     01 4A 05 F6 | 	mov	COUNT_, #1
1c810     A8 00 A0 FD | 	call	#pushregs_
1c814     30 F0 07 F1 | 	add	ptra, #48
1c818     04 4E 05 F1 | 	add	fp, #4
1c81c     A7 12 42 FC | 	wrbyte	arg01, fp
1c820     04 4E 05 F1 | 	add	fp, #4
1c824     A7 14 42 FC | 	wrbyte	arg02, fp
1c828     04 4E 05 F1 | 	add	fp, #4
1c82c     A7 16 62 FC | 	wrlong	arg03, fp
1c830     08 4E 85 F1 | 	sub	fp, #8
1c834     A7 12 CA FA | 	rdbyte	arg01, fp wz
1c838     04 4E 85 F1 | 	sub	fp, #4
1c83c     01 FA 05 56 |  if_ne	mov	result1, #1
1c840                 | ' 
1c840                 | ' 	return Stat;
1c840     01 00 00 AF 
1c844     20 E4 05 A1 |  if_e	add	objptr, ##544
1c848     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c84c     01 00 00 AF 
1c850     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c854     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c858     01 FA CD F7 | 	test	result1, #1 wz
1c85c     03 FA 05 56 |  if_ne	mov	result1, #3
1c860     E4 01 90 5D |  if_ne	jmp	#LR__3178
1c864     10 4E 05 F1 | 	add	fp, #16
1c868     A7 02 68 FC | 	wrlong	#1, fp
1c86c                 | ' 
1c86c                 | ' 	res = RES_ERROR;
1c86c                 | ' 	switch (ctrl) {
1c86c     08 4E 85 F1 | 	sub	fp, #8
1c870     A7 1E C2 FA | 	rdbyte	local01, fp
1c874     08 4E 85 F1 | 	sub	fp, #8
1c878     04 1E 26 F3 | 	fle	local01, #4
1c87c     30 1E 62 FD | 	jmprel	local01
1c880                 | LR__3170
1c880     10 00 90 FD | 	jmp	#LR__3171
1c884     24 00 90 FD | 	jmp	#LR__3172
1c888     A0 01 90 FD | 	jmp	#LR__3176
1c88c     80 01 90 FD | 	jmp	#LR__3175
1c890     98 01 90 FD | 	jmp	#LR__3176
1c894                 | LR__3171
1c894     B0 79 B0 FD | 	call	#_fatfs_cc_select_0951
1c898     00 FA 0D F2 | 	cmp	result1, #0 wz
1c89c     10 4E 05 51 |  if_ne	add	fp, #16
1c8a0     A7 00 68 5C |  if_ne	wrlong	#0, fp
1c8a4     10 4E 85 51 |  if_ne	sub	fp, #16
1c8a8                 | ' 			break;
1c8a8     8C 01 90 FD | 	jmp	#LR__3177
1c8ac                 | LR__3172
1c8ac     09 12 06 F6 | 	mov	arg01, #9
1c8b0     00 14 06 F6 | 	mov	arg02, #0
1c8b4     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0961
1c8b8     FD 1E 02 F6 | 	mov	local01, result1
1c8bc     07 1E 4E F7 | 	zerox	local01, #7 wz
1c8c0     74 01 90 5D |  if_ne	jmp	#LR__3177
1c8c4     18 4E 05 F1 | 	add	fp, #24
1c8c8     A7 12 02 F6 | 	mov	arg01, fp
1c8cc     18 4E 85 F1 | 	sub	fp, #24
1c8d0     10 14 06 F6 | 	mov	arg02, #16
1c8d4     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0955
1c8d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c8dc     58 01 90 AD |  if_e	jmp	#LR__3177
1c8e0     18 4E 05 F1 | 	add	fp, #24
1c8e4     A7 1E C2 FA | 	rdbyte	local01, fp
1c8e8     18 4E 85 F1 | 	sub	fp, #24
1c8ec     06 1E 46 F0 | 	shr	local01, #6
1c8f0     01 1E 0E F2 | 	cmp	local01, #1 wz
1c8f4     5C 00 90 5D |  if_ne	jmp	#LR__3173
1c8f8     21 4E 05 F1 | 	add	fp, #33
1c8fc     A7 1E C2 FA | 	rdbyte	local01, fp
1c900     01 4E 85 F1 | 	sub	fp, #1
1c904     A7 FA C1 FA | 	rdbyte	result1, fp
1c908     FD FA 31 F9 | 	getword	result1, result1, #0
1c90c     08 FA 65 F0 | 	shl	result1, #8
1c910     FD 1E 02 F1 | 	add	local01, result1
1c914     01 4E 85 F1 | 	sub	fp, #1
1c918     A7 FA C1 FA | 	rdbyte	result1, fp
1c91c     3F FA 05 F5 | 	and	result1, #63
1c920     10 FA 65 F0 | 	shl	result1, #16
1c924     FD 1E 02 F1 | 	add	local01, result1
1c928     01 1E 06 F1 | 	add	local01, #1
1c92c     09 4E 05 F1 | 	add	fp, #9
1c930     A7 1E 62 FC | 	wrlong	local01, fp
1c934     1C 4E 85 F1 | 	sub	fp, #28
1c938     A7 1E 02 FB | 	rdlong	local01, fp
1c93c     1C 4E 05 F1 | 	add	fp, #28
1c940     A7 FA 01 FB | 	rdlong	result1, fp
1c944     28 4E 85 F1 | 	sub	fp, #40
1c948     0A FA 65 F0 | 	shl	result1, #10
1c94c     0F FB 61 FC | 	wrlong	result1, local01
1c950     AC 00 90 FD | 	jmp	#LR__3174
1c954                 | LR__3173
1c954     1D 4E 05 F1 | 	add	fp, #29
1c958     A7 1E C2 FA | 	rdbyte	local01, fp
1c95c     0F 1F 42 F8 | 	getnib	local01, local01, #0
1c960     05 4E 05 F1 | 	add	fp, #5
1c964     A7 FA C1 FA | 	rdbyte	result1, fp
1c968     80 FA 05 F5 | 	and	result1, #128
1c96c     07 FA C5 F0 | 	sar	result1, #7
1c970     FD 1E 02 F1 | 	add	local01, result1
1c974     01 4E 85 F1 | 	sub	fp, #1
1c978     A7 FA C1 FA | 	rdbyte	result1, fp
1c97c     03 FA 05 F5 | 	and	result1, #3
1c980     01 FA 65 F0 | 	shl	result1, #1
1c984     FD 1E 02 F1 | 	add	local01, result1
1c988     02 1E 06 F1 | 	add	local01, #2
1c98c     0D 4E 85 F1 | 	sub	fp, #13
1c990     A7 1E 42 FC | 	wrbyte	local01, fp
1c994     0C 4E 05 F1 | 	add	fp, #12
1c998     A7 1E C2 FA | 	rdbyte	local01, fp
1c99c     06 1E 46 F0 | 	shr	local01, #6
1c9a0     01 4E 85 F1 | 	sub	fp, #1
1c9a4     A7 FA C1 FA | 	rdbyte	result1, fp
1c9a8     FD FA 31 F9 | 	getword	result1, result1, #0
1c9ac     02 FA 65 F0 | 	shl	result1, #2
1c9b0     FD 1E 02 F1 | 	add	local01, result1
1c9b4     01 4E 85 F1 | 	sub	fp, #1
1c9b8     A7 FA C1 FA | 	rdbyte	result1, fp
1c9bc     03 FA 05 F5 | 	and	result1, #3
1c9c0     FD FA 31 F9 | 	getword	result1, result1, #0
1c9c4     0A FA 65 F0 | 	shl	result1, #10
1c9c8     FD 1E 02 F1 | 	add	local01, result1
1c9cc     01 1E 06 F1 | 	add	local01, #1
1c9d0     0A 4E 05 F1 | 	add	fp, #10
1c9d4     A7 1E 62 FC | 	wrlong	local01, fp
1c9d8     1C 4E 85 F1 | 	sub	fp, #28
1c9dc     A7 1E 02 FB | 	rdlong	local01, fp
1c9e0     1C 4E 05 F1 | 	add	fp, #28
1c9e4     A7 FA 01 FB | 	rdlong	result1, fp
1c9e8     14 4E 85 F1 | 	sub	fp, #20
1c9ec     A7 16 C2 FA | 	rdbyte	arg03, fp
1c9f0     14 4E 85 F1 | 	sub	fp, #20
1c9f4     09 16 86 F1 | 	sub	arg03, #9
1c9f8     0B FB 61 F0 | 	shl	result1, arg03
1c9fc     0F FB 61 FC | 	wrlong	result1, local01
1ca00                 | LR__3174
1ca00     10 4E 05 F1 | 	add	fp, #16
1ca04     A7 00 68 FC | 	wrlong	#0, fp
1ca08     10 4E 85 F1 | 	sub	fp, #16
1ca0c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1ca0c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1ca0c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1ca0c                 | ' 				}
1ca0c                 | ' 				res = RES_OK;
1ca0c                 | ' 			}
1ca0c                 | ' 			break;
1ca0c     28 00 90 FD | 	jmp	#LR__3177
1ca10                 | LR__3175
1ca10     0C 4E 05 F1 | 	add	fp, #12
1ca14     A7 1E 02 FB | 	rdlong	local01, fp
1ca18     0F 01 69 FC | 	wrlong	#128, local01
1ca1c     04 4E 05 F1 | 	add	fp, #4
1ca20     A7 00 68 FC | 	wrlong	#0, fp
1ca24     10 4E 85 F1 | 	sub	fp, #16
1ca28                 | ' 			*(DWORD*)buff = 128;
1ca28                 | ' 			res = RES_OK;
1ca28                 | ' 			break;
1ca28     0C 00 90 FD | 	jmp	#LR__3177
1ca2c                 | LR__3176
1ca2c     10 4E 05 F1 | 	add	fp, #16
1ca30     A7 08 68 FC | 	wrlong	#4, fp
1ca34     10 4E 85 F1 | 	sub	fp, #16
1ca38                 | LR__3177
1ca38     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0947
1ca3c                 | ' 			res = RES_PARERR;
1ca3c                 | ' 	}
1ca3c                 | ' 
1ca3c                 | ' 	deselect();
1ca3c                 | ' 
1ca3c                 | ' 	return res;
1ca3c     10 4E 05 F1 | 	add	fp, #16
1ca40     A7 FA 01 FB | 	rdlong	result1, fp
1ca44     10 4E 85 F1 | 	sub	fp, #16
1ca48                 | LR__3178
1ca48     A7 F0 03 F6 | 	mov	ptra, fp
1ca4c     B2 00 A0 FD | 	call	#popregs_
1ca50                 | _fatfs_cc_disk_ioctl_ret
1ca50     2D 00 64 FD | 	ret
1ca54                 | 
1ca54                 | _fatfs_cc_disk_setpins
1ca54     00 12 0E F2 | 	cmp	arg01, #0 wz
1ca58     01 FA 65 56 |  if_ne	neg	result1, #1
1ca5c     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1ca60     01 00 00 FF 
1ca64     10 E4 05 F1 | 	add	objptr, ##528
1ca68     F2 14 62 FC | 	wrlong	arg02, objptr
1ca6c     04 E4 05 F1 | 	add	objptr, #4
1ca70     F2 16 62 FC | 	wrlong	arg03, objptr
1ca74     04 E4 05 F1 | 	add	objptr, #4
1ca78     F2 18 62 FC | 	wrlong	arg04, objptr
1ca7c     04 E4 05 F1 | 	add	objptr, #4
1ca80     F2 1A 62 FC | 	wrlong	arg05, objptr
1ca84     01 00 00 FF 
1ca88     1C E4 85 F1 | 	sub	objptr, ##540
1ca8c     00 FA 05 F6 | 	mov	result1, #0
1ca90                 | _fatfs_cc_disk_setpins_ret
1ca90     2D 00 64 FD | 	ret
1ca94                 | 
1ca94                 | _fatfs_cc_tchar2uni
1ca94     09 01 02 FB | 	rdlong	_var01, arg01
1ca98     00 03 02 F6 | 	mov	_var02, _var01
1ca9c     01 00 06 F1 | 	add	_var01, #1
1caa0     00 05 02 F6 | 	mov	_var03, _var01
1caa4     01 07 C2 FA | 	rdbyte	_var04, _var02
1caa8     80 06 CE F7 | 	test	_var04, #128 wz
1caac     E8 00 90 AD |  if_e	jmp	#LR__3187
1cab0     03 09 02 F6 | 	mov	_var05, _var04
1cab4     E0 08 06 F5 | 	and	_var05, #224
1cab8     C0 08 0E F2 | 	cmp	_var05, #192 wz
1cabc     1F 06 06 A5 |  if_e	and	_var04, #31
1cac0     01 0A 06 A6 |  if_e	mov	_var06, #1
1cac4     34 00 90 AD |  if_e	jmp	#LR__3181
1cac8     03 09 02 F6 | 	mov	_var05, _var04
1cacc     F0 08 06 F5 | 	and	_var05, #240
1cad0     E0 08 0E F2 | 	cmp	_var05, #224 wz
1cad4     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1cad8     02 0A 06 A6 |  if_e	mov	_var06, #2
1cadc     1C 00 90 AD |  if_e	jmp	#LR__3180
1cae0     03 09 02 F6 | 	mov	_var05, _var04
1cae4     F8 08 06 F5 | 	and	_var05, #248
1cae8     F0 08 0E F2 | 	cmp	_var05, #240 wz
1caec     07 06 06 A5 |  if_e	and	_var04, #7
1caf0     03 0A 06 A6 |  if_e	mov	_var06, #3
1caf4                 | ' 			return 0xFFFFFFFF;
1caf4     01 FA 65 56 |  if_ne	neg	result1, #1
1caf8     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1cafc                 | LR__3180
1cafc                 | LR__3181
1cafc                 | ' 		}
1cafc                 | ' 		do {
1cafc                 | LR__3182
1cafc     02 0D C2 FA | 	rdbyte	_var07, _var03
1cb00     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1cb04     C0 08 06 F5 | 	and	_var05, #192
1cb08     80 08 0E F2 | 	cmp	_var05, #128 wz
1cb0c     01 04 06 F1 | 	add	_var03, #1
1cb10     01 FA 65 56 |  if_ne	neg	result1, #1
1cb14     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1cb18     06 06 66 F0 | 	shl	_var04, #6
1cb1c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1cb20     3F 02 06 F5 | 	and	_var02, #63
1cb24     01 07 42 F5 | 	or	_var04, _var02
1cb28     F4 0B 6E FB | 	djnz	_var06, #LR__3182
1cb2c     80 06 16 F2 | 	cmp	_var04, #128 wc
1cb30     24 00 90 CD |  if_b	jmp	#LR__3184
1cb34     6C 00 00 FF 
1cb38     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1cb3c     0C 00 90 CD |  if_b	jmp	#LR__3183
1cb40     70 00 00 FF 
1cb44     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1cb48     0C 00 90 CD |  if_b	jmp	#LR__3184
1cb4c                 | LR__3183
1cb4c     80 08 00 FF 
1cb50     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1cb54     08 00 90 CD |  if_b	jmp	#LR__3185
1cb58                 | LR__3184
1cb58     01 FA 65 F6 | 	neg	result1, #1
1cb5c     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1cb60                 | LR__3185
1cb60     80 00 00 FF 
1cb64     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1cb68     2C 00 90 CD |  if_b	jmp	#LR__3186
1cb6c     03 03 02 F6 | 	mov	_var02, _var04
1cb70     80 00 00 FF 
1cb74     00 02 86 F1 | 	sub	_var02, ##65536
1cb78     06 02 66 F0 | 	shl	_var02, #6
1cb7c     80 FF 01 FF 
1cb80     00 02 06 F5 | 	and	_var02, ##67043328
1cb84     6E 00 6C FF 
1cb88     00 08 06 F6 | 	mov	_var05, ##-671032320
1cb8c     01 09 42 F5 | 	or	_var05, _var02
1cb90     09 06 46 F7 | 	zerox	_var04, #9
1cb94     04 07 42 F5 | 	or	_var04, _var05
1cb98                 | LR__3186
1cb98                 | LR__3187
1cb98     09 05 62 FC | 	wrlong	_var03, arg01
1cb9c                 | ' 	}
1cb9c                 | ' #line 811 "ff.c"
1cb9c                 | ' 	*str = p;
1cb9c                 | ' 	return uc;
1cb9c     03 FB 01 F6 | 	mov	result1, _var04
1cba0                 | _fatfs_cc_tchar2uni_ret
1cba0     2D 00 64 FD | 	ret
1cba4                 | 
1cba4                 | _fatfs_cc_put_utf
1cba4     80 12 16 F2 | 	cmp	arg01, #128 wc
1cba8     18 00 90 3D |  if_ae	jmp	#LR__3190
1cbac     01 16 16 F2 | 	cmp	arg03, #1 wc
1cbb0     00 FA 05 C6 |  if_b	mov	result1, #0
1cbb4     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1cbb8     0A 13 42 FC | 	wrbyte	arg01, arg02
1cbbc                 | ' 		*buf = (TCHAR)chr;
1cbbc                 | ' 		return 1;
1cbbc     01 FA 05 F6 | 	mov	result1, #1
1cbc0     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1cbc4                 | LR__3190
1cbc4     04 00 00 FF 
1cbc8     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1cbcc     40 00 90 3D |  if_ae	jmp	#LR__3191
1cbd0     02 16 16 F2 | 	cmp	arg03, #2 wc
1cbd4     00 FA 05 C6 |  if_b	mov	result1, #0
1cbd8     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1cbdc     09 FB 01 F6 | 	mov	result1, arg01
1cbe0     06 FA 45 F0 | 	shr	result1, #6
1cbe4     1F FA 05 F5 | 	and	result1, #31
1cbe8     C0 16 06 F6 | 	mov	arg03, #192
1cbec     FD 16 42 F5 | 	or	arg03, result1
1cbf0     0A 17 42 FC | 	wrbyte	arg03, arg02
1cbf4     01 14 06 F1 | 	add	arg02, #1
1cbf8     3F 12 06 F5 | 	and	arg01, #63
1cbfc     80 FA 05 F6 | 	mov	result1, #128
1cc00     09 FB 41 F5 | 	or	result1, arg01
1cc04     0A FB 41 FC | 	wrbyte	result1, arg02
1cc08                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1cc08                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1cc08                 | ' 		return 2;
1cc08     02 FA 05 F6 | 	mov	result1, #2
1cc0c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1cc10                 | LR__3191
1cc10     80 00 00 FF 
1cc14     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1cc18     70 00 90 3D |  if_ae	jmp	#LR__3194
1cc1c     03 16 16 F2 | 	cmp	arg03, #3 wc
1cc20     18 00 90 CD |  if_b	jmp	#LR__3192
1cc24     6C 00 00 FF 
1cc28     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1cc2c     14 00 90 CD |  if_b	jmp	#LR__3193
1cc30     70 00 00 FF 
1cc34     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1cc38     08 00 90 3D |  if_ae	jmp	#LR__3193
1cc3c                 | LR__3192
1cc3c     00 FA 05 F6 | 	mov	result1, #0
1cc40     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1cc44                 | LR__3193
1cc44     09 FB 59 F8 | 	getnib	result1, arg01, #3
1cc48     E0 16 06 F6 | 	mov	arg03, #224
1cc4c     FD 16 42 F5 | 	or	arg03, result1
1cc50     0A 17 42 FC | 	wrbyte	arg03, arg02
1cc54     01 14 06 F1 | 	add	arg02, #1
1cc58     09 FB 01 F6 | 	mov	result1, arg01
1cc5c     06 FA 45 F0 | 	shr	result1, #6
1cc60     3F FA 05 F5 | 	and	result1, #63
1cc64     80 16 06 F6 | 	mov	arg03, #128
1cc68     FD 16 42 F5 | 	or	arg03, result1
1cc6c     0A 17 42 FC | 	wrbyte	arg03, arg02
1cc70     01 14 06 F1 | 	add	arg02, #1
1cc74     3F 12 06 F5 | 	and	arg01, #63
1cc78     80 FA 05 F6 | 	mov	result1, #128
1cc7c     09 FB 41 F5 | 	or	result1, arg01
1cc80     0A FB 41 FC | 	wrbyte	result1, arg02
1cc84                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1cc84                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1cc84                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1cc84                 | ' 		return 3;
1cc84     03 FA 05 F6 | 	mov	result1, #3
1cc88     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1cc8c                 | LR__3194
1cc8c     04 16 16 F2 | 	cmp	arg03, #4 wc
1cc90     00 FA 05 C6 |  if_b	mov	result1, #0
1cc94     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1cc98     09 01 02 F6 | 	mov	_var01, arg01
1cc9c     E0 01 06 F4 | 	bitl	_var01, #480
1cca0     00 00 6C FF 
1cca4     00 00 86 F1 | 	sub	_var01, ##-671088640
1cca8     06 00 46 F0 | 	shr	_var01, #6
1ccac     09 13 32 F9 | 	getword	arg01, arg01, #0
1ccb0     6E 00 00 FF 
1ccb4     00 12 86 F1 | 	sub	arg01, ##56320
1ccb8     00 08 00 FF 
1ccbc     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1ccc0     02 00 00 CF 
1ccc4     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1ccc8     00 FA 05 36 |  if_ae	mov	result1, #0
1cccc     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1ccd0     09 01 42 F5 | 	or	_var01, arg01
1ccd4     80 00 00 FF 
1ccd8     00 00 06 F1 | 	add	_var01, ##65536
1ccdc     00 FB 01 F6 | 	mov	result1, _var01
1cce0     12 FA 45 F0 | 	shr	result1, #18
1cce4     07 FA 05 F5 | 	and	result1, #7
1cce8     F0 16 06 F6 | 	mov	arg03, #240
1ccec     FD 16 42 F5 | 	or	arg03, result1
1ccf0     0A 17 42 FC | 	wrbyte	arg03, arg02
1ccf4     01 14 06 F1 | 	add	arg02, #1
1ccf8     00 FB 01 F6 | 	mov	result1, _var01
1ccfc     0C FA 45 F0 | 	shr	result1, #12
1cd00     3F FA 05 F5 | 	and	result1, #63
1cd04     80 16 06 F6 | 	mov	arg03, #128
1cd08     FD 16 42 F5 | 	or	arg03, result1
1cd0c     0A 17 42 FC | 	wrbyte	arg03, arg02
1cd10     01 14 06 F1 | 	add	arg02, #1
1cd14     00 FB 01 F6 | 	mov	result1, _var01
1cd18     06 FA 45 F0 | 	shr	result1, #6
1cd1c     3F FA 05 F5 | 	and	result1, #63
1cd20     80 16 06 F6 | 	mov	arg03, #128
1cd24     FD 16 42 F5 | 	or	arg03, result1
1cd28     0A 17 42 FC | 	wrbyte	arg03, arg02
1cd2c     01 14 06 F1 | 	add	arg02, #1
1cd30     3F 00 06 F5 | 	and	_var01, #63
1cd34     80 FA 05 F6 | 	mov	result1, #128
1cd38     00 FB 41 F5 | 	or	result1, _var01
1cd3c     0A FB 41 FC | 	wrbyte	result1, arg02
1cd40                 | ' 	chr = (hc | chr) + 0x10000;
1cd40                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1cd40                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1cd40                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1cd40                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1cd40                 | ' 	return 4;
1cd40     04 FA 05 F6 | 	mov	result1, #4
1cd44                 | _fatfs_cc_put_utf_ret
1cd44     2D 00 64 FD | 	ret
1cd48                 | 
1cd48                 | _fatfs_cc_sync_window
1cd48     02 4A 05 F6 | 	mov	COUNT_, #2
1cd4c     A8 00 A0 FD | 	call	#pushregs_
1cd50     09 1F 02 F6 | 	mov	local01, arg01
1cd54     00 20 06 F6 | 	mov	local02, #0
1cd58     03 1E 06 F1 | 	add	local01, #3
1cd5c     0F FB C9 FA | 	rdbyte	result1, local01 wz
1cd60     03 1E 86 F1 | 	sub	local01, #3
1cd64     A4 00 90 AD |  if_e	jmp	#LR__3202
1cd68     01 1E 06 F1 | 	add	local01, #1
1cd6c     0F 13 C2 FA | 	rdbyte	arg01, local01
1cd70     33 1E 06 F1 | 	add	local01, #51
1cd74     0F 15 02 F6 | 	mov	arg02, local01
1cd78     04 1E 86 F1 | 	sub	local01, #4
1cd7c     0F 17 02 FB | 	rdlong	arg03, local01
1cd80     30 1E 86 F1 | 	sub	local01, #48
1cd84     01 18 06 F6 | 	mov	arg04, #1
1cd88     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1cd8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd90     74 00 90 5D |  if_ne	jmp	#LR__3200
1cd94     03 1E 06 F1 | 	add	local01, #3
1cd98     0F 01 48 FC | 	wrbyte	#0, local01
1cd9c     2D 1E 06 F1 | 	add	local01, #45
1cda0     0F FB 01 FB | 	rdlong	result1, local01
1cda4     0C 1E 86 F1 | 	sub	local01, #12
1cda8     0F 19 02 FB | 	rdlong	arg04, local01
1cdac     0C FB 81 F1 | 	sub	result1, arg04
1cdb0     08 1E 86 F1 | 	sub	local01, #8
1cdb4     0F 19 02 FB | 	rdlong	arg04, local01
1cdb8     1C 1E 86 F1 | 	sub	local01, #28
1cdbc     0C FB 11 F2 | 	cmp	result1, arg04 wc
1cdc0     48 00 90 3D |  if_ae	jmp	#LR__3201
1cdc4     02 1E 06 F1 | 	add	local01, #2
1cdc8     0F 19 C2 FA | 	rdbyte	arg04, local01
1cdcc     02 1E 86 F1 | 	sub	local01, #2
1cdd0     02 18 0E F2 | 	cmp	arg04, #2 wz
1cdd4     34 00 90 5D |  if_ne	jmp	#LR__3201
1cdd8     01 1E 06 F1 | 	add	local01, #1
1cddc     0F 13 C2 FA | 	rdbyte	arg01, local01
1cde0     33 1E 06 F1 | 	add	local01, #51
1cde4     0F 15 02 F6 | 	mov	arg02, local01
1cde8     04 1E 86 F1 | 	sub	local01, #4
1cdec     0F 17 02 FB | 	rdlong	arg03, local01
1cdf0     14 1E 86 F1 | 	sub	local01, #20
1cdf4     0F 1F 02 FB | 	rdlong	local01, local01
1cdf8     0F 17 02 F1 | 	add	arg03, local01
1cdfc     01 18 06 F6 | 	mov	arg04, #1
1ce00     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1ce04     04 00 90 FD | 	jmp	#LR__3201
1ce08                 | LR__3200
1ce08     01 20 06 F6 | 	mov	local02, #1
1ce0c                 | LR__3201
1ce0c                 | LR__3202
1ce0c                 | ' 			res = FR_DISK_ERR;
1ce0c                 | ' 		}
1ce0c                 | ' 	}
1ce0c                 | ' 	return res;
1ce0c     10 FB 01 F6 | 	mov	result1, local02
1ce10     A7 F0 03 F6 | 	mov	ptra, fp
1ce14     B2 00 A0 FD | 	call	#popregs_
1ce18                 | _fatfs_cc_sync_window_ret
1ce18     2D 00 64 FD | 	ret
1ce1c                 | 
1ce1c                 | _fatfs_cc_move_window
1ce1c     03 4A 05 F6 | 	mov	COUNT_, #3
1ce20     A8 00 A0 FD | 	call	#pushregs_
1ce24     09 1F 02 F6 | 	mov	local01, arg01
1ce28     0A 21 02 F6 | 	mov	local02, arg02
1ce2c     00 22 06 F6 | 	mov	local03, #0
1ce30     30 1E 06 F1 | 	add	local01, #48
1ce34     0F 19 02 FB | 	rdlong	arg04, local01
1ce38     30 1E 86 F1 | 	sub	local01, #48
1ce3c     0C 21 0A F2 | 	cmp	local02, arg04 wz
1ce40     40 00 90 AD |  if_e	jmp	#LR__3211
1ce44     0F 13 02 F6 | 	mov	arg01, local01
1ce48     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1ce4c     FD 22 0A F6 | 	mov	local03, result1 wz
1ce50     30 00 90 5D |  if_ne	jmp	#LR__3210
1ce54     01 1E 06 F1 | 	add	local01, #1
1ce58     0F 13 C2 FA | 	rdbyte	arg01, local01
1ce5c     33 1E 06 F1 | 	add	local01, #51
1ce60     0F 15 02 F6 | 	mov	arg02, local01
1ce64     10 17 02 F6 | 	mov	arg03, local02
1ce68     01 18 06 F6 | 	mov	arg04, #1
1ce6c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1ce70     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce74     01 20 66 56 |  if_ne	neg	local02, #1
1ce78     01 22 06 56 |  if_ne	mov	local03, #1
1ce7c     04 1E 86 F1 | 	sub	local01, #4
1ce80     0F 21 62 FC | 	wrlong	local02, local01
1ce84                 | LR__3210
1ce84                 | LR__3211
1ce84                 | ' 				sect = (LBA_t)0 - 1;
1ce84                 | ' 				res = FR_DISK_ERR;
1ce84                 | ' 			}
1ce84                 | ' 			fs->winsect = sect;
1ce84                 | ' 		}
1ce84                 | ' 	}
1ce84                 | ' 	return res;
1ce84     11 FB 01 F6 | 	mov	result1, local03
1ce88     A7 F0 03 F6 | 	mov	ptra, fp
1ce8c     B2 00 A0 FD | 	call	#popregs_
1ce90                 | _fatfs_cc_move_window_ret
1ce90     2D 00 64 FD | 	ret
1ce94                 | 
1ce94                 | _fatfs_cc_sync_fs
1ce94     02 4A 05 F6 | 	mov	COUNT_, #2
1ce98     A8 00 A0 FD | 	call	#pushregs_
1ce9c     09 1F 02 F6 | 	mov	local01, arg01
1cea0     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1cea4     FD 20 0A F6 | 	mov	local02, result1 wz
1cea8     D8 00 90 5D |  if_ne	jmp	#LR__3221
1ceac     0F 19 C2 FA | 	rdbyte	arg04, local01
1ceb0     03 18 0E F2 | 	cmp	arg04, #3 wz
1ceb4     04 1E 06 A1 |  if_e	add	local01, #4
1ceb8     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1cebc     04 1E 86 A1 |  if_e	sub	local01, #4
1cec0     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1cec4     A0 00 90 5D |  if_ne	jmp	#LR__3220
1cec8     34 1E 06 F1 | 	add	local01, #52
1cecc     0F 13 02 F6 | 	mov	arg01, local01
1ced0     00 14 06 F6 | 	mov	arg02, #0
1ced4     09 16 C6 F9 | 	decod	arg03, #9
1ced8     98 00 A0 FD | 	call	#\builtin_bytefill_
1cedc     0F 13 02 F6 | 	mov	arg01, local01
1cee0     FE 13 06 F1 | 	add	arg01, #510
1cee4     55 00 80 FF 
1cee8     09 AB 58 FC | 	wrword	##43605, arg01
1ceec     A9 B0 A0 FF 
1cef0     0F A5 68 FC | 	wrlong	##1096897106, local01
1cef4     0F 13 02 F6 | 	mov	arg01, local01
1cef8     E4 13 06 F1 | 	add	arg01, #484
1cefc     B9 A0 B0 FF 
1cf00     09 E5 68 FC | 	wrlong	##1631679090, arg01
1cf04     0F 13 02 F6 | 	mov	arg01, local01
1cf08     E8 13 06 F1 | 	add	arg01, #488
1cf0c     20 1E 86 F1 | 	sub	local01, #32
1cf10     0F 15 02 FB | 	rdlong	arg02, local01
1cf14     09 15 62 FC | 	wrlong	arg02, arg01
1cf18     20 1E 06 F1 | 	add	local01, #32
1cf1c     0F 13 02 F6 | 	mov	arg01, local01
1cf20     EC 13 06 F1 | 	add	arg01, #492
1cf24     24 1E 86 F1 | 	sub	local01, #36
1cf28     0F 15 02 FB | 	rdlong	arg02, local01
1cf2c     09 15 62 FC | 	wrlong	arg02, arg01
1cf30     10 1E 06 F1 | 	add	local01, #16
1cf34     0F 17 02 FB | 	rdlong	arg03, local01
1cf38     01 16 06 F1 | 	add	arg03, #1
1cf3c     10 1E 06 F1 | 	add	local01, #16
1cf40     0F 17 62 FC | 	wrlong	arg03, local01
1cf44     2F 1E 86 F1 | 	sub	local01, #47
1cf48     0F 13 C2 FA | 	rdbyte	arg01, local01
1cf4c     33 1E 06 F1 | 	add	local01, #51
1cf50     0F 15 02 F6 | 	mov	arg02, local01
1cf54     01 18 06 F6 | 	mov	arg04, #1
1cf58     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1cf5c     30 1E 86 F1 | 	sub	local01, #48
1cf60     0F 01 48 FC | 	wrbyte	#0, local01
1cf64     04 1E 86 F1 | 	sub	local01, #4
1cf68                 | LR__3220
1cf68     01 1E 06 F1 | 	add	local01, #1
1cf6c     0F 13 C2 FA | 	rdbyte	arg01, local01
1cf70     00 14 06 F6 | 	mov	arg02, #0
1cf74     00 16 06 F6 | 	mov	arg03, #0
1cf78     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1cf7c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf80     01 20 06 56 |  if_ne	mov	local02, #1
1cf84                 | LR__3221
1cf84                 | ' 	}
1cf84                 | ' 
1cf84                 | ' 	return res;
1cf84     10 FB 01 F6 | 	mov	result1, local02
1cf88     A7 F0 03 F6 | 	mov	ptra, fp
1cf8c     B2 00 A0 FD | 	call	#popregs_
1cf90                 | _fatfs_cc_sync_fs_ret
1cf90     2D 00 64 FD | 	ret
1cf94                 | 
1cf94                 | _fatfs_cc_clst2sect
1cf94     02 14 86 F1 | 	sub	arg02, #2
1cf98     18 12 06 F1 | 	add	arg01, #24
1cf9c     09 01 02 FB | 	rdlong	_var01, arg01
1cfa0     18 12 86 F1 | 	sub	arg01, #24
1cfa4     02 00 86 F1 | 	sub	_var01, #2
1cfa8     00 15 12 F2 | 	cmp	arg02, _var01 wc
1cfac     00 FA 05 36 |  if_ae	mov	result1, #0
1cfb0     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1cfb4     0A 12 06 F1 | 	add	arg01, #10
1cfb8     09 01 E2 FA | 	rdword	_var01, arg01
1cfbc     0A 01 02 FD | 	qmul	_var01, arg02
1cfc0                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1cfc0     22 12 06 F1 | 	add	arg01, #34
1cfc4     09 FB 01 FB | 	rdlong	result1, arg01
1cfc8     18 00 62 FD | 	getqx	_var01
1cfcc     00 FB 01 F1 | 	add	result1, _var01
1cfd0                 | _fatfs_cc_clst2sect_ret
1cfd0     2D 00 64 FD | 	ret
1cfd4                 | 
1cfd4                 | _fatfs_cc_get_fat
1cfd4     07 4A 05 F6 | 	mov	COUNT_, #7
1cfd8     A8 00 A0 FD | 	call	#pushregs_
1cfdc     0A 1F 02 F6 | 	mov	local01, arg02
1cfe0     09 21 02 FB | 	rdlong	local02, arg01
1cfe4     02 1E 16 F2 | 	cmp	local01, #2 wc
1cfe8     14 00 90 CD |  if_b	jmp	#LR__3230
1cfec     18 20 06 F1 | 	add	local02, #24
1cff0     10 23 02 FB | 	rdlong	local03, local02
1cff4     18 20 86 F1 | 	sub	local02, #24
1cff8     11 1F 12 F2 | 	cmp	local01, local03 wc
1cffc     08 00 90 CD |  if_b	jmp	#LR__3231
1d000                 | LR__3230
1d000     01 24 06 F6 | 	mov	local04, #1
1d004     60 01 90 FD | 	jmp	#LR__3238
1d008                 | LR__3231
1d008     01 24 66 F6 | 	neg	local04, #1
1d00c                 | ' 		val = 0xFFFFFFFF;
1d00c                 | ' 
1d00c                 | ' 		switch (fs->fs_type) {
1d00c     10 27 C2 FA | 	rdbyte	local05, local02
1d010     01 26 86 F1 | 	sub	local05, #1
1d014     03 26 26 F3 | 	fle	local05, #3
1d018     30 26 62 FD | 	jmprel	local05
1d01c                 | LR__3232
1d01c     0C 00 90 FD | 	jmp	#LR__3233
1d020     B8 00 90 FD | 	jmp	#LR__3234
1d024     F8 00 90 FD | 	jmp	#LR__3235
1d028     38 01 90 FD | 	jmp	#LR__3236
1d02c                 | LR__3233
1d02c     0F 27 02 F6 | 	mov	local05, local01
1d030     0F 13 02 F6 | 	mov	arg01, local01
1d034     01 12 46 F0 | 	shr	arg01, #1
1d038     09 27 02 F1 | 	add	local05, arg01
1d03c     10 13 02 F6 | 	mov	arg01, local02
1d040     13 29 02 F6 | 	mov	local06, local05
1d044     09 28 46 F0 | 	shr	local06, #9
1d048     24 20 06 F1 | 	add	local02, #36
1d04c     10 15 02 FB | 	rdlong	arg02, local02
1d050     24 20 86 F1 | 	sub	local02, #36
1d054     14 15 02 F1 | 	add	arg02, local06
1d058     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1d05c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d060     04 01 90 5D |  if_ne	jmp	#LR__3237
1d064     13 29 02 F6 | 	mov	local06, local05
1d068     FF 29 06 F5 | 	and	local06, #511
1d06c     34 20 06 F1 | 	add	local02, #52
1d070     10 29 02 F1 | 	add	local06, local02
1d074     14 2B C2 FA | 	rdbyte	local07, local06
1d078     34 20 86 F1 | 	sub	local02, #52
1d07c     10 13 02 F6 | 	mov	arg01, local02
1d080     01 26 06 F1 | 	add	local05, #1
1d084     13 29 02 F6 | 	mov	local06, local05
1d088     09 28 46 F0 | 	shr	local06, #9
1d08c     24 20 06 F1 | 	add	local02, #36
1d090     10 15 02 FB | 	rdlong	arg02, local02
1d094     24 20 86 F1 | 	sub	local02, #36
1d098     14 15 02 F1 | 	add	arg02, local06
1d09c     7C FD BF FD | 	call	#_fatfs_cc_move_window
1d0a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d0a4     C0 00 90 5D |  if_ne	jmp	#LR__3237
1d0a8     FF 27 06 F5 | 	and	local05, #511
1d0ac     34 20 06 F1 | 	add	local02, #52
1d0b0     10 27 02 F1 | 	add	local05, local02
1d0b4     13 29 C2 FA | 	rdbyte	local06, local05
1d0b8     08 28 66 F0 | 	shl	local06, #8
1d0bc     14 2B 42 F5 | 	or	local07, local06
1d0c0     01 1E CE F7 | 	test	local01, #1 wz
1d0c4     04 2A 46 50 |  if_ne	shr	local07, #4
1d0c8     15 23 02 56 |  if_ne	mov	local03, local07
1d0cc     0B 2A 46 A7 |  if_e	zerox	local07, #11
1d0d0     15 23 02 A6 |  if_e	mov	local03, local07
1d0d4     11 25 02 F6 | 	mov	local04, local03
1d0d8                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1d0d8                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1d0d8                 | ' 			break;
1d0d8     8C 00 90 FD | 	jmp	#LR__3237
1d0dc                 | LR__3234
1d0dc     10 13 02 F6 | 	mov	arg01, local02
1d0e0     0F 29 02 F6 | 	mov	local06, local01
1d0e4     08 28 46 F0 | 	shr	local06, #8
1d0e8     24 20 06 F1 | 	add	local02, #36
1d0ec     10 15 02 FB | 	rdlong	arg02, local02
1d0f0     24 20 86 F1 | 	sub	local02, #36
1d0f4     14 15 02 F1 | 	add	arg02, local06
1d0f8     20 FD BF FD | 	call	#_fatfs_cc_move_window
1d0fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1d100     64 00 90 5D |  if_ne	jmp	#LR__3237
1d104     34 20 06 F1 | 	add	local02, #52
1d108     01 1E 66 F0 | 	shl	local01, #1
1d10c     FF 1F 06 F5 | 	and	local01, #511
1d110     0F 21 02 F1 | 	add	local02, local01
1d114                 | ' {
1d114                 | ' 
1d114                 | ' 	return *((WORD*)ptr);
1d114     10 FB E1 FA | 	rdword	result1, local02
1d118     FD 24 32 F9 | 	getword	local04, result1, #0
1d11c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1d11c                 | ' 			break;
1d11c     48 00 90 FD | 	jmp	#LR__3237
1d120                 | LR__3235
1d120     10 13 02 F6 | 	mov	arg01, local02
1d124     0F 29 02 F6 | 	mov	local06, local01
1d128     07 28 46 F0 | 	shr	local06, #7
1d12c     24 20 06 F1 | 	add	local02, #36
1d130     10 15 02 FB | 	rdlong	arg02, local02
1d134     24 20 86 F1 | 	sub	local02, #36
1d138     14 15 02 F1 | 	add	arg02, local06
1d13c     DC FC BF FD | 	call	#_fatfs_cc_move_window
1d140     00 FA 0D F2 | 	cmp	result1, #0 wz
1d144     20 00 90 5D |  if_ne	jmp	#LR__3237
1d148     34 20 06 F1 | 	add	local02, #52
1d14c     02 1E 66 F0 | 	shl	local01, #2
1d150     FF 1F 06 F5 | 	and	local01, #511
1d154     0F 21 02 F1 | 	add	local02, local01
1d158                 | ' {
1d158                 | ' 
1d158                 | ' 	return *((DWORD*)ptr);
1d158     10 25 02 FB | 	rdlong	local04, local02
1d15c     7C 24 06 F4 | 	bitl	local04, #124
1d160                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1d160                 | ' 			break;
1d160     04 00 90 FD | 	jmp	#LR__3237
1d164                 | LR__3236
1d164     01 24 06 F6 | 	mov	local04, #1
1d168                 | LR__3237
1d168                 | LR__3238
1d168                 | ' 			val = 1;
1d168                 | ' 		}
1d168                 | ' 	}
1d168                 | ' 
1d168                 | ' 	return val;
1d168     12 FB 01 F6 | 	mov	result1, local04
1d16c     A7 F0 03 F6 | 	mov	ptra, fp
1d170     B2 00 A0 FD | 	call	#popregs_
1d174                 | _fatfs_cc_get_fat_ret
1d174     2D 00 64 FD | 	ret
1d178                 | 
1d178                 | _fatfs_cc_put_fat
1d178     08 4A 05 F6 | 	mov	COUNT_, #8
1d17c     A8 00 A0 FD | 	call	#pushregs_
1d180     09 1F 02 F6 | 	mov	local01, arg01
1d184     0A 21 02 F6 | 	mov	local02, arg02
1d188     0B 23 02 F6 | 	mov	local03, arg03
1d18c     02 24 06 F6 | 	mov	local04, #2
1d190     02 20 16 F2 | 	cmp	local02, #2 wc
1d194     E0 01 90 CD |  if_b	jmp	#LR__3247
1d198     18 1E 06 F1 | 	add	local01, #24
1d19c     0F 27 02 FB | 	rdlong	local05, local01
1d1a0     18 1E 86 F1 | 	sub	local01, #24
1d1a4     13 21 12 F2 | 	cmp	local02, local05 wc
1d1a8     CC 01 90 3D |  if_ae	jmp	#LR__3247
1d1ac                 | ' 		switch (fs->fs_type) {
1d1ac     0F 29 C2 FA | 	rdbyte	local06, local01
1d1b0     01 28 86 F1 | 	sub	local06, #1
1d1b4     03 28 26 F3 | 	fle	local06, #3
1d1b8     30 28 62 FD | 	jmprel	local06
1d1bc                 | LR__3240
1d1bc     0C 00 90 FD | 	jmp	#LR__3241
1d1c0     F8 00 90 FD | 	jmp	#LR__3244
1d1c4     40 01 90 FD | 	jmp	#LR__3245
1d1c8     AC 01 90 FD | 	jmp	#LR__3246
1d1cc                 | LR__3241
1d1cc     10 2B 02 F6 | 	mov	local07, local02
1d1d0     10 27 02 F6 | 	mov	local05, local02
1d1d4     01 26 46 F0 | 	shr	local05, #1
1d1d8     13 2B 02 F1 | 	add	local07, local05
1d1dc     0F 13 02 F6 | 	mov	arg01, local01
1d1e0     15 29 02 F6 | 	mov	local06, local07
1d1e4     09 28 46 F0 | 	shr	local06, #9
1d1e8     24 1E 06 F1 | 	add	local01, #36
1d1ec     0F 15 02 FB | 	rdlong	arg02, local01
1d1f0     24 1E 86 F1 | 	sub	local01, #36
1d1f4     14 15 02 F1 | 	add	arg02, local06
1d1f8     20 FC BF FD | 	call	#_fatfs_cc_move_window
1d1fc     FD 24 0A F6 | 	mov	local04, result1 wz
1d200     74 01 90 5D |  if_ne	jmp	#LR__3246
1d204     34 1E 06 F1 | 	add	local01, #52
1d208     0F 2D 02 F6 | 	mov	local08, local01
1d20c     15 27 02 F6 | 	mov	local05, local07
1d210     FF 27 06 F5 | 	and	local05, #511
1d214     13 2D 02 F1 | 	add	local08, local05
1d218     01 20 CE F7 | 	test	local02, #1 wz
1d21c     34 1E 86 F1 | 	sub	local01, #52
1d220     01 2A 06 F1 | 	add	local07, #1
1d224     18 00 90 AD |  if_e	jmp	#LR__3242
1d228     16 27 C2 FA | 	rdbyte	local05, local08
1d22c     13 27 42 F8 | 	getnib	local05, local05, #0
1d230     11 29 E2 F8 | 	getbyte	local06, local03, #0
1d234     04 28 66 F0 | 	shl	local06, #4
1d238     14 27 42 F5 | 	or	local05, local06
1d23c     04 00 90 FD | 	jmp	#LR__3243
1d240                 | LR__3242
1d240     11 27 02 F6 | 	mov	local05, local03
1d244                 | LR__3243
1d244     16 27 42 FC | 	wrbyte	local05, local08
1d248     03 1E 06 F1 | 	add	local01, #3
1d24c     0F 03 48 FC | 	wrbyte	#1, local01
1d250     03 1E 86 F1 | 	sub	local01, #3
1d254     0F 13 02 F6 | 	mov	arg01, local01
1d258     15 2D 02 F6 | 	mov	local08, local07
1d25c     09 2C 46 F0 | 	shr	local08, #9
1d260     24 1E 06 F1 | 	add	local01, #36
1d264     0F 15 02 FB | 	rdlong	arg02, local01
1d268     24 1E 86 F1 | 	sub	local01, #36
1d26c     16 15 02 F1 | 	add	arg02, local08
1d270     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1d274     FD 24 0A F6 | 	mov	local04, result1 wz
1d278     FC 00 90 5D |  if_ne	jmp	#LR__3246
1d27c     34 1E 06 F1 | 	add	local01, #52
1d280     0F 2D 02 F6 | 	mov	local08, local01
1d284     FF 2B 06 F5 | 	and	local07, #511
1d288     15 2D 02 F1 | 	add	local08, local07
1d28c     01 20 CE F7 | 	test	local02, #1 wz
1d290     04 22 46 50 |  if_ne	shr	local03, #4
1d294     11 27 02 56 |  if_ne	mov	local05, local03
1d298     16 27 C2 AA |  if_e	rdbyte	local05, local08
1d29c     F0 26 06 A5 |  if_e	and	local05, #240
1d2a0     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1d2a4     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1d2a8     11 27 42 A5 |  if_e	or	local05, local03
1d2ac     16 27 42 FC | 	wrbyte	local05, local08
1d2b0     31 1E 86 F1 | 	sub	local01, #49
1d2b4     0F 03 48 FC | 	wrbyte	#1, local01
1d2b8                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1d2b8                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1d2b8                 | ' 			fs->wflag = 1;
1d2b8                 | ' 			break;
1d2b8     BC 00 90 FD | 	jmp	#LR__3246
1d2bc                 | LR__3244
1d2bc     0F 13 02 F6 | 	mov	arg01, local01
1d2c0     10 2D 02 F6 | 	mov	local08, local02
1d2c4     08 2C 46 F0 | 	shr	local08, #8
1d2c8     24 1E 06 F1 | 	add	local01, #36
1d2cc     0F 15 02 FB | 	rdlong	arg02, local01
1d2d0     24 1E 86 F1 | 	sub	local01, #36
1d2d4     16 15 02 F1 | 	add	arg02, local08
1d2d8     40 FB BF FD | 	call	#_fatfs_cc_move_window
1d2dc     FD 24 0A F6 | 	mov	local04, result1 wz
1d2e0     94 00 90 5D |  if_ne	jmp	#LR__3246
1d2e4     34 1E 06 F1 | 	add	local01, #52
1d2e8     0F 13 02 F6 | 	mov	arg01, local01
1d2ec     01 20 66 F0 | 	shl	local02, #1
1d2f0     FF 21 06 F5 | 	and	local02, #511
1d2f4     10 13 02 F1 | 	add	arg01, local02
1d2f8     09 23 52 FC | 	wrword	local03, arg01
1d2fc     31 1E 86 F1 | 	sub	local01, #49
1d300     0F 03 48 FC | 	wrbyte	#1, local01
1d304                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1d304                 | ' 			fs->wflag = 1;
1d304                 | ' 			break;
1d304     70 00 90 FD | 	jmp	#LR__3246
1d308                 | LR__3245
1d308     0F 13 02 F6 | 	mov	arg01, local01
1d30c     10 2D 02 F6 | 	mov	local08, local02
1d310     07 2C 46 F0 | 	shr	local08, #7
1d314     24 1E 06 F1 | 	add	local01, #36
1d318     0F 15 02 FB | 	rdlong	arg02, local01
1d31c     24 1E 86 F1 | 	sub	local01, #36
1d320     16 15 02 F1 | 	add	arg02, local08
1d324     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1d328     FD 24 0A F6 | 	mov	local04, result1 wz
1d32c     48 00 90 5D |  if_ne	jmp	#LR__3246
1d330     7C 22 06 F4 | 	bitl	local03, #124
1d334     34 1E 06 F1 | 	add	local01, #52
1d338     10 2D 02 F6 | 	mov	local08, local02
1d33c     02 2C 66 F0 | 	shl	local08, #2
1d340     FF 2D 06 F5 | 	and	local08, #511
1d344     0F 13 02 F6 | 	mov	arg01, local01
1d348     16 13 02 F1 | 	add	arg01, local08
1d34c                 | ' {
1d34c                 | ' 
1d34c                 | ' 	return *((DWORD*)ptr);
1d34c     09 2D 02 FB | 	rdlong	local08, arg01
1d350     00 00 78 FF 
1d354     00 2C 06 F5 | 	and	local08, ##-268435456
1d358     16 23 42 F5 | 	or	local03, local08
1d35c     0F 13 02 F6 | 	mov	arg01, local01
1d360     02 20 66 F0 | 	shl	local02, #2
1d364     FF 21 06 F5 | 	and	local02, #511
1d368     10 13 02 F1 | 	add	arg01, local02
1d36c     09 23 62 FC | 	wrlong	local03, arg01
1d370     31 1E 86 F1 | 	sub	local01, #49
1d374     0F 03 48 FC | 	wrbyte	#1, local01
1d378                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1d378                 | ' 			}
1d378                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1d378                 | ' 			fs->wflag = 1;
1d378                 | ' 			break;
1d378                 | LR__3246
1d378                 | LR__3247
1d378                 | ' 		}
1d378                 | ' 	}
1d378                 | ' 	return res;
1d378     12 FB 01 F6 | 	mov	result1, local04
1d37c     A7 F0 03 F6 | 	mov	ptra, fp
1d380     B2 00 A0 FD | 	call	#popregs_
1d384                 | _fatfs_cc_put_fat_ret
1d384     2D 00 64 FD | 	ret
1d388                 | 
1d388                 | _fatfs_cc_remove_chain
1d388     05 4A 05 F6 | 	mov	COUNT_, #5
1d38c     A8 00 A0 FD | 	call	#pushregs_
1d390     09 1F 02 F6 | 	mov	local01, arg01
1d394     0A 21 02 F6 | 	mov	local02, arg02
1d398     0B 23 02 F6 | 	mov	local03, arg03
1d39c     0F 25 02 FB | 	rdlong	local04, local01
1d3a0     02 20 16 F2 | 	cmp	local02, #2 wc
1d3a4     14 00 90 CD |  if_b	jmp	#LR__3250
1d3a8     18 24 06 F1 | 	add	local04, #24
1d3ac     12 FB 01 FB | 	rdlong	result1, local04
1d3b0     18 24 86 F1 | 	sub	local04, #24
1d3b4     FD 20 12 F2 | 	cmp	local02, result1 wc
1d3b8     08 00 90 CD |  if_b	jmp	#LR__3251
1d3bc                 | LR__3250
1d3bc     02 FA 05 F6 | 	mov	result1, #2
1d3c0     CC 00 90 FD | 	jmp	#LR__3256
1d3c4                 | LR__3251
1d3c4     00 22 0E F2 | 	cmp	local03, #0 wz
1d3c8     18 00 90 AD |  if_e	jmp	#LR__3252
1d3cc     11 15 02 F6 | 	mov	arg02, local03
1d3d0     12 13 02 F6 | 	mov	arg01, local04
1d3d4     01 16 66 F6 | 	neg	arg03, #1
1d3d8     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1d3dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1d3e0     AC 00 90 5D |  if_ne	jmp	#LR__3256
1d3e4                 | LR__3252
1d3e4                 | ' 	}
1d3e4                 | ' 
1d3e4                 | ' 
1d3e4                 | ' 	do {
1d3e4                 | LR__3253
1d3e4     10 15 02 F6 | 	mov	arg02, local02
1d3e8     0F 13 02 F6 | 	mov	arg01, local01
1d3ec     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1d3f0     FD 26 0A F6 | 	mov	local05, result1 wz
1d3f4     94 00 90 AD |  if_e	jmp	#LR__3255
1d3f8     01 26 0E F2 | 	cmp	local05, #1 wz
1d3fc     02 FA 05 A6 |  if_e	mov	result1, #2
1d400     8C 00 90 AD |  if_e	jmp	#LR__3256
1d404     FF FF 7F FF 
1d408     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d40c     01 FA 05 A6 |  if_e	mov	result1, #1
1d410     7C 00 90 AD |  if_e	jmp	#LR__3256
1d414     10 15 02 F6 | 	mov	arg02, local02
1d418     12 13 02 F6 | 	mov	arg01, local04
1d41c     00 16 06 F6 | 	mov	arg03, #0
1d420     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1d424     FD 22 0A F6 | 	mov	local03, result1 wz
1d428     11 FB 01 56 |  if_ne	mov	result1, local03
1d42c     60 00 90 5D |  if_ne	jmp	#LR__3256
1d430     18 24 06 F1 | 	add	local04, #24
1d434     12 23 02 FB | 	rdlong	local03, local04
1d438     02 22 86 F1 | 	sub	local03, #2
1d43c     04 24 86 F1 | 	sub	local04, #4
1d440     12 21 02 FB | 	rdlong	local02, local04
1d444     14 24 86 F1 | 	sub	local04, #20
1d448     11 21 12 F2 | 	cmp	local02, local03 wc
1d44c     24 00 90 3D |  if_ae	jmp	#LR__3254
1d450     14 24 06 F1 | 	add	local04, #20
1d454     12 23 02 FB | 	rdlong	local03, local04
1d458     01 22 06 F1 | 	add	local03, #1
1d45c     12 23 62 FC | 	wrlong	local03, local04
1d460     10 24 86 F1 | 	sub	local04, #16
1d464     12 23 C2 FA | 	rdbyte	local03, local04
1d468     01 22 46 F5 | 	or	local03, #1
1d46c     12 23 42 FC | 	wrbyte	local03, local04
1d470     04 24 86 F1 | 	sub	local04, #4
1d474                 | LR__3254
1d474     13 21 02 F6 | 	mov	local02, local05
1d478     18 24 06 F1 | 	add	local04, #24
1d47c     12 27 02 FB | 	rdlong	local05, local04
1d480     18 24 86 F1 | 	sub	local04, #24
1d484     13 21 12 F2 | 	cmp	local02, local05 wc
1d488     58 FF 9F CD |  if_b	jmp	#LR__3253
1d48c                 | LR__3255
1d48c                 | ' #line 1500 "ff.c"
1d48c                 | ' 	return FR_OK;
1d48c     00 FA 05 F6 | 	mov	result1, #0
1d490                 | LR__3256
1d490     A7 F0 03 F6 | 	mov	ptra, fp
1d494     B2 00 A0 FD | 	call	#popregs_
1d498                 | _fatfs_cc_remove_chain_ret
1d498     2D 00 64 FD | 	ret
1d49c                 | 
1d49c                 | _fatfs_cc_create_chain
1d49c     09 4A 05 F6 | 	mov	COUNT_, #9
1d4a0     A8 00 A0 FD | 	call	#pushregs_
1d4a4     09 1F 02 F6 | 	mov	local01, arg01
1d4a8     0A 21 0A F6 | 	mov	local02, arg02 wz
1d4ac     0F 23 02 FB | 	rdlong	local03, local01
1d4b0     28 00 90 5D |  if_ne	jmp	#LR__3260
1d4b4     10 22 06 F1 | 	add	local03, #16
1d4b8     11 25 0A FB | 	rdlong	local04, local03 wz
1d4bc     10 22 86 F1 | 	sub	local03, #16
1d4c0     18 22 06 51 |  if_ne	add	local03, #24
1d4c4     11 27 02 5B |  if_ne	rdlong	local05, local03
1d4c8     18 22 86 51 |  if_ne	sub	local03, #24
1d4cc     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1d4d0     50 00 90 4D |  if_c_and_nz	jmp	#LR__3261
1d4d4     01 24 06 F6 | 	mov	local04, #1
1d4d8     48 00 90 FD | 	jmp	#LR__3261
1d4dc                 | LR__3260
1d4dc     10 15 02 F6 | 	mov	arg02, local02
1d4e0     0F 13 02 F6 | 	mov	arg01, local01
1d4e4     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1d4e8     FD 24 02 F6 | 	mov	local04, result1
1d4ec     02 24 16 F2 | 	cmp	local04, #2 wc
1d4f0     01 FA 05 C6 |  if_b	mov	result1, #1
1d4f4     BC 01 90 CD |  if_b	jmp	#LR__3271
1d4f8     FF FF 7F FF 
1d4fc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1d500     12 FB 01 A6 |  if_e	mov	result1, local04
1d504     AC 01 90 AD |  if_e	jmp	#LR__3271
1d508     18 22 06 F1 | 	add	local03, #24
1d50c     11 27 02 FB | 	rdlong	local05, local03
1d510     18 22 86 F1 | 	sub	local03, #24
1d514     13 25 12 F2 | 	cmp	local04, local05 wc
1d518     12 FB 01 C6 |  if_b	mov	result1, local04
1d51c     94 01 90 CD |  if_b	jmp	#LR__3271
1d520     10 25 02 F6 | 	mov	local04, local02
1d524                 | LR__3261
1d524     14 22 06 F1 | 	add	local03, #20
1d528     11 27 0A FB | 	rdlong	local05, local03 wz
1d52c     14 22 86 F1 | 	sub	local03, #20
1d530     00 FA 05 A6 |  if_e	mov	result1, #0
1d534     7C 01 90 AD |  if_e	jmp	#LR__3271
1d538     00 28 06 F6 | 	mov	local06, #0
1d53c     10 25 0A F2 | 	cmp	local04, local02 wz
1d540     74 00 90 5D |  if_ne	jmp	#LR__3264
1d544     12 29 02 F6 | 	mov	local06, local04
1d548     01 28 06 F1 | 	add	local06, #1
1d54c     18 22 06 F1 | 	add	local03, #24
1d550     11 27 02 FB | 	rdlong	local05, local03
1d554     18 22 86 F1 | 	sub	local03, #24
1d558     13 29 12 F2 | 	cmp	local06, local05 wc
1d55c     02 28 06 36 |  if_ae	mov	local06, #2
1d560     14 15 02 F6 | 	mov	arg02, local06
1d564     0F 13 02 F6 | 	mov	arg01, local01
1d568     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1d56c     FD 26 02 F6 | 	mov	local05, result1
1d570     01 26 0E F2 | 	cmp	local05, #1 wz
1d574     FF FF 7F 5F 
1d578     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1d57c     13 FB 01 A6 |  if_e	mov	result1, local05
1d580     30 01 90 AD |  if_e	jmp	#LR__3271
1d584     00 26 0E F2 | 	cmp	local05, #0 wz
1d588     2C 00 90 AD |  if_e	jmp	#LR__3263
1d58c     10 22 06 F1 | 	add	local03, #16
1d590     11 2B 02 FB | 	rdlong	local07, local03
1d594     10 22 86 F1 | 	sub	local03, #16
1d598     02 2A 16 F2 | 	cmp	local07, #2 wc
1d59c     14 00 90 CD |  if_b	jmp	#LR__3262
1d5a0     18 22 06 F1 | 	add	local03, #24
1d5a4     11 27 02 FB | 	rdlong	local05, local03
1d5a8     18 22 86 F1 | 	sub	local03, #24
1d5ac     13 2B 12 F2 | 	cmp	local07, local05 wc
1d5b0     15 25 02 C6 |  if_b	mov	local04, local07
1d5b4                 | LR__3262
1d5b4     00 28 06 F6 | 	mov	local06, #0
1d5b8                 | LR__3263
1d5b8                 | LR__3264
1d5b8     00 28 0E F2 | 	cmp	local06, #0 wz
1d5bc     60 00 90 5D |  if_ne	jmp	#LR__3267
1d5c0     12 29 02 F6 | 	mov	local06, local04
1d5c4                 | ' 			ncl = scl;
1d5c4                 | ' 			for (;;) {
1d5c4                 | LR__3265
1d5c4     01 28 06 F1 | 	add	local06, #1
1d5c8     18 22 06 F1 | 	add	local03, #24
1d5cc     11 27 02 FB | 	rdlong	local05, local03
1d5d0     18 22 86 F1 | 	sub	local03, #24
1d5d4     13 29 12 F2 | 	cmp	local06, local05 wc
1d5d8     02 28 06 36 |  if_ae	mov	local06, #2
1d5dc     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1d5e0     00 FA 05 16 |  if_a	mov	result1, #0
1d5e4     CC 00 90 1D |  if_a	jmp	#LR__3271
1d5e8     14 15 02 F6 | 	mov	arg02, local06
1d5ec     0F 13 02 F6 | 	mov	arg01, local01
1d5f0     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1d5f4     FD 2A 0A F6 | 	mov	local07, result1 wz
1d5f8     24 00 90 AD |  if_e	jmp	#LR__3266
1d5fc     01 2A 0E F2 | 	cmp	local07, #1 wz
1d600     FF FF 7F 5F 
1d604     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1d608     15 FB 01 A6 |  if_e	mov	result1, local07
1d60c     A4 00 90 AD |  if_e	jmp	#LR__3271
1d610     12 29 0A F2 | 	cmp	local06, local04 wz
1d614     00 FA 05 A6 |  if_e	mov	result1, #0
1d618     98 00 90 AD |  if_e	jmp	#LR__3271
1d61c     A4 FF 9F FD | 	jmp	#LR__3265
1d620                 | LR__3266
1d620                 | LR__3267
1d620     11 13 02 F6 | 	mov	arg01, local03
1d624     14 15 02 F6 | 	mov	arg02, local06
1d628     01 16 66 F6 | 	neg	arg03, #1
1d62c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1d630     FD 2C 0A F6 | 	mov	local08, result1 wz
1d634     1C 00 90 5D |  if_ne	jmp	#LR__3268
1d638     00 20 0E F2 | 	cmp	local02, #0 wz
1d63c     14 00 90 AD |  if_e	jmp	#LR__3268
1d640     11 13 02 F6 | 	mov	arg01, local03
1d644     10 15 02 F6 | 	mov	arg02, local02
1d648     14 17 02 F6 | 	mov	arg03, local06
1d64c     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1d650     FD 2C 02 F6 | 	mov	local08, result1
1d654                 | LR__3268
1d654     00 2C 0E F2 | 	cmp	local08, #0 wz
1d658     4C 00 90 5D |  if_ne	jmp	#LR__3269
1d65c     10 22 06 F1 | 	add	local03, #16
1d660     11 29 62 FC | 	wrlong	local06, local03
1d664     08 22 06 F1 | 	add	local03, #8
1d668     11 27 02 FB | 	rdlong	local05, local03
1d66c     02 26 86 F1 | 	sub	local05, #2
1d670     04 22 86 F1 | 	sub	local03, #4
1d674     11 2F 02 FB | 	rdlong	local09, local03
1d678     14 22 86 F1 | 	sub	local03, #20
1d67c     13 2F 1A F2 | 	cmp	local09, local05 wcz
1d680     14 22 06 E1 |  if_be	add	local03, #20
1d684     11 2F 02 EB |  if_be	rdlong	local09, local03
1d688     01 2E 86 E1 |  if_be	sub	local09, #1
1d68c     11 2F 62 EC |  if_be	wrlong	local09, local03
1d690     14 22 86 E1 |  if_be	sub	local03, #20
1d694     04 22 06 F1 | 	add	local03, #4
1d698     11 27 C2 FA | 	rdbyte	local05, local03
1d69c     01 26 46 F5 | 	or	local05, #1
1d6a0     11 27 42 FC | 	wrbyte	local05, local03
1d6a4     08 00 90 FD | 	jmp	#LR__3270
1d6a8                 | LR__3269
1d6a8     01 2C 0E F2 | 	cmp	local08, #1 wz
1d6ac     01 28 C6 F6 | 	negz	local06, #1
1d6b0                 | LR__3270
1d6b0                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1d6b0                 | ' 	}
1d6b0                 | ' 
1d6b0                 | ' 	return ncl;
1d6b0     14 FB 01 F6 | 	mov	result1, local06
1d6b4                 | LR__3271
1d6b4     A7 F0 03 F6 | 	mov	ptra, fp
1d6b8     B2 00 A0 FD | 	call	#popregs_
1d6bc                 | _fatfs_cc_create_chain_ret
1d6bc     2D 00 64 FD | 	ret
1d6c0                 | 
1d6c0                 | _fatfs_cc_dir_clear
1d6c0     06 4A 05 F6 | 	mov	COUNT_, #6
1d6c4     A8 00 A0 FD | 	call	#pushregs_
1d6c8     09 1F 02 F6 | 	mov	local01, arg01
1d6cc     0A 21 02 F6 | 	mov	local02, arg02
1d6d0     0F 13 02 F6 | 	mov	arg01, local01
1d6d4     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1d6d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1d6dc     01 FA 05 56 |  if_ne	mov	result1, #1
1d6e0     90 00 90 5D |  if_ne	jmp	#LR__3282
1d6e4     0F 13 02 F6 | 	mov	arg01, local01
1d6e8     10 15 02 F6 | 	mov	arg02, local02
1d6ec     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1d6f0     FD 22 02 F6 | 	mov	local03, result1
1d6f4     30 1E 06 F1 | 	add	local01, #48
1d6f8     0F 23 62 FC | 	wrlong	local03, local01
1d6fc     04 1E 06 F1 | 	add	local01, #4
1d700     0F 13 02 F6 | 	mov	arg01, local01
1d704     00 14 06 F6 | 	mov	arg02, #0
1d708     09 16 C6 F9 | 	decod	arg03, #9
1d70c     98 00 A0 FD | 	call	#\builtin_bytefill_
1d710     0F 25 02 F6 | 	mov	local04, local01
1d714                 | ' #line 1667 "ff.c"
1d714                 | ' 	{
1d714                 | ' 		ibuf = fs->win; szb = 1;
1d714                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1d714     00 26 06 F6 | 	mov	local05, #0
1d718     34 1E 86 F1 | 	sub	local01, #52
1d71c                 | LR__3280
1d71c     0A 1E 06 F1 | 	add	local01, #10
1d720     0F 29 E2 FA | 	rdword	local06, local01
1d724     0A 1E 86 F1 | 	sub	local01, #10
1d728     14 27 12 F2 | 	cmp	local05, local06 wc
1d72c     2C 00 90 3D |  if_ae	jmp	#LR__3281
1d730     01 1E 06 F1 | 	add	local01, #1
1d734     0F 13 C2 FA | 	rdbyte	arg01, local01
1d738     01 1E 86 F1 | 	sub	local01, #1
1d73c     12 15 02 F6 | 	mov	arg02, local04
1d740     11 17 02 F6 | 	mov	arg03, local03
1d744     13 17 02 F1 | 	add	arg03, local05
1d748     01 18 06 F6 | 	mov	arg04, #1
1d74c     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1d750     00 FA 0D F2 | 	cmp	result1, #0 wz
1d754     01 26 06 A1 |  if_e	add	local05, #1
1d758     C0 FF 9F AD |  if_e	jmp	#LR__3280
1d75c                 | LR__3281
1d75c                 | ' 	}
1d75c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1d75c     0A 1E 06 F1 | 	add	local01, #10
1d760     0F 25 E2 FA | 	rdword	local04, local01
1d764     12 27 0A F2 | 	cmp	local05, local04 wz
1d768     00 28 06 A6 |  if_e	mov	local06, #0
1d76c     01 28 06 56 |  if_ne	mov	local06, #1
1d770     14 FB 01 F6 | 	mov	result1, local06
1d774                 | LR__3282
1d774     A7 F0 03 F6 | 	mov	ptra, fp
1d778     B2 00 A0 FD | 	call	#popregs_
1d77c                 | _fatfs_cc_dir_clear_ret
1d77c     2D 00 64 FD | 	ret
1d780                 | 
1d780                 | _fatfs_cc_dir_sdi
1d780     06 4A 05 F6 | 	mov	COUNT_, #6
1d784     A8 00 A0 FD | 	call	#pushregs_
1d788     09 1F 02 F6 | 	mov	local01, arg01
1d78c     0A 21 02 F6 | 	mov	local02, arg02
1d790     0F 23 02 FB | 	rdlong	local03, local01
1d794     00 10 00 FF 
1d798     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1d79c     1F 20 CE C7 |  if_b	test	local02, #31 wz
1d7a0                 | ' 		return FR_INT_ERR;
1d7a0     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1d7a4     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3296
1d7a8     10 1E 06 F1 | 	add	local01, #16
1d7ac     0F 21 62 FC | 	wrlong	local02, local01
1d7b0     08 1E 86 F1 | 	sub	local01, #8
1d7b4     0F 25 0A FB | 	rdlong	local04, local01 wz
1d7b8     08 1E 86 F1 | 	sub	local01, #8
1d7bc     11 27 C2 AA |  if_e	rdbyte	local05, local03
1d7c0     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1d7c4     28 22 06 21 |  if_nc_and_z	add	local03, #40
1d7c8     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1d7cc     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1d7d0     00 24 0E F2 | 	cmp	local04, #0 wz
1d7d4     3C 00 90 5D |  if_ne	jmp	#LR__3290
1d7d8     10 27 02 F6 | 	mov	local05, local02
1d7dc     05 26 46 F0 | 	shr	local05, #5
1d7e0     08 22 06 F1 | 	add	local03, #8
1d7e4     11 15 E2 FA | 	rdword	arg02, local03
1d7e8     08 22 86 F1 | 	sub	local03, #8
1d7ec     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d7f0     02 FA 05 36 |  if_ae	mov	result1, #2
1d7f4     E4 00 90 3D |  if_ae	jmp	#LR__3296
1d7f8     28 22 06 F1 | 	add	local03, #40
1d7fc     11 27 02 FB | 	rdlong	local05, local03
1d800     28 22 86 F1 | 	sub	local03, #40
1d804     18 1E 06 F1 | 	add	local01, #24
1d808     0F 27 62 FC | 	wrlong	local05, local01
1d80c     18 1E 86 F1 | 	sub	local01, #24
1d810     7C 00 90 FD | 	jmp	#LR__3295
1d814                 | LR__3290
1d814     0A 22 06 F1 | 	add	local03, #10
1d818     11 29 E2 FA | 	rdword	local06, local03
1d81c     0A 22 86 F1 | 	sub	local03, #10
1d820     09 28 66 F0 | 	shl	local06, #9
1d824                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1d824                 | ' 		while (ofs >= csz) {
1d824                 | LR__3291
1d824     14 21 12 F2 | 	cmp	local02, local06 wc
1d828     4C 00 90 CD |  if_b	jmp	#LR__3294
1d82c     0F 13 02 F6 | 	mov	arg01, local01
1d830     12 15 02 F6 | 	mov	arg02, local04
1d834     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1d838     FD 24 02 F6 | 	mov	local04, result1
1d83c     FF FF 7F FF 
1d840     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1d844     01 FA 05 A6 |  if_e	mov	result1, #1
1d848     90 00 90 AD |  if_e	jmp	#LR__3296
1d84c     02 24 16 F2 | 	cmp	local04, #2 wc
1d850     14 00 90 CD |  if_b	jmp	#LR__3292
1d854     18 22 06 F1 | 	add	local03, #24
1d858     11 27 02 FB | 	rdlong	local05, local03
1d85c     18 22 86 F1 | 	sub	local03, #24
1d860     13 25 12 F2 | 	cmp	local04, local05 wc
1d864     08 00 90 CD |  if_b	jmp	#LR__3293
1d868                 | LR__3292
1d868     02 FA 05 F6 | 	mov	result1, #2
1d86c     6C 00 90 FD | 	jmp	#LR__3296
1d870                 | LR__3293
1d870     14 21 82 F1 | 	sub	local02, local06
1d874     AC FF 9F FD | 	jmp	#LR__3291
1d878                 | LR__3294
1d878     11 13 02 F6 | 	mov	arg01, local03
1d87c     12 15 02 F6 | 	mov	arg02, local04
1d880     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1d884     18 1E 06 F1 | 	add	local01, #24
1d888     0F FB 61 FC | 	wrlong	result1, local01
1d88c     18 1E 86 F1 | 	sub	local01, #24
1d890                 | LR__3295
1d890     14 1E 06 F1 | 	add	local01, #20
1d894     0F 25 62 FC | 	wrlong	local04, local01
1d898     04 1E 06 F1 | 	add	local01, #4
1d89c     0F 27 0A FB | 	rdlong	local05, local01 wz
1d8a0     18 1E 86 F1 | 	sub	local01, #24
1d8a4     02 FA 05 A6 |  if_e	mov	result1, #2
1d8a8     30 00 90 AD |  if_e	jmp	#LR__3296
1d8ac     10 29 02 F6 | 	mov	local06, local02
1d8b0     09 28 46 F0 | 	shr	local06, #9
1d8b4     18 1E 06 F1 | 	add	local01, #24
1d8b8     0F 27 02 FB | 	rdlong	local05, local01
1d8bc     14 27 02 F1 | 	add	local05, local06
1d8c0     0F 27 62 FC | 	wrlong	local05, local01
1d8c4     34 22 06 F1 | 	add	local03, #52
1d8c8     FF 21 06 F5 | 	and	local02, #511
1d8cc     10 23 02 F1 | 	add	local03, local02
1d8d0     04 1E 06 F1 | 	add	local01, #4
1d8d4     0F 23 62 FC | 	wrlong	local03, local01
1d8d8                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1d8d8                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1d8d8                 | ' 
1d8d8                 | ' 	return FR_OK;
1d8d8     00 FA 05 F6 | 	mov	result1, #0
1d8dc                 | LR__3296
1d8dc     A7 F0 03 F6 | 	mov	ptra, fp
1d8e0     B2 00 A0 FD | 	call	#popregs_
1d8e4                 | _fatfs_cc_dir_sdi_ret
1d8e4     2D 00 64 FD | 	ret
1d8e8                 | 
1d8e8                 | _fatfs_cc_dir_next
1d8e8     05 4A 05 F6 | 	mov	COUNT_, #5
1d8ec     A8 00 A0 FD | 	call	#pushregs_
1d8f0     09 1F 02 F6 | 	mov	local01, arg01
1d8f4     0A 21 02 F6 | 	mov	local02, arg02
1d8f8     0F 23 02 FB | 	rdlong	local03, local01
1d8fc     10 1E 06 F1 | 	add	local01, #16
1d900     0F 25 02 FB | 	rdlong	local04, local01
1d904     10 1E 86 F1 | 	sub	local01, #16
1d908     20 24 06 F1 | 	add	local04, #32
1d90c     00 10 00 FF 
1d910     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1d914     18 1E 06 31 |  if_ae	add	local01, #24
1d918     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d91c     18 1E 86 31 |  if_ae	sub	local01, #24
1d920     18 1E 06 F1 | 	add	local01, #24
1d924     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d928     18 1E 86 F1 | 	sub	local01, #24
1d92c     04 FA 05 A6 |  if_e	mov	result1, #4
1d930     64 01 90 AD |  if_e	jmp	#LR__3305
1d934     FF 25 CE F7 | 	test	local04, #511 wz
1d938     3C 01 90 5D |  if_ne	jmp	#LR__3304
1d93c     18 1E 06 F1 | 	add	local01, #24
1d940     0F 15 02 FB | 	rdlong	arg02, local01
1d944     01 14 06 F1 | 	add	arg02, #1
1d948     0F 15 62 FC | 	wrlong	arg02, local01
1d94c     04 1E 86 F1 | 	sub	local01, #4
1d950     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d954     14 1E 86 F1 | 	sub	local01, #20
1d958     2C 00 90 5D |  if_ne	jmp	#LR__3300
1d95c     12 15 02 F6 | 	mov	arg02, local04
1d960     05 14 46 F0 | 	shr	arg02, #5
1d964     08 22 06 F1 | 	add	local03, #8
1d968     11 21 E2 FA | 	rdword	local02, local03
1d96c     08 22 86 F1 | 	sub	local03, #8
1d970     10 15 12 F2 | 	cmp	arg02, local02 wc
1d974     18 1E 06 31 |  if_ae	add	local01, #24
1d978     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d97c                 | ' 				dp->sect = 0; return FR_NO_FILE;
1d97c     04 FA 05 36 |  if_ae	mov	result1, #4
1d980     14 01 90 3D |  if_ae	jmp	#LR__3305
1d984     F0 00 90 FD | 	jmp	#LR__3303
1d988                 | LR__3300
1d988     12 13 02 F6 | 	mov	arg01, local04
1d98c     09 12 46 F0 | 	shr	arg01, #9
1d990     0A 22 06 F1 | 	add	local03, #10
1d994     11 15 E2 FA | 	rdword	arg02, local03
1d998     0A 22 86 F1 | 	sub	local03, #10
1d99c     01 14 86 F1 | 	sub	arg02, #1
1d9a0     0A 13 CA F7 | 	test	arg01, arg02 wz
1d9a4     D0 00 90 5D |  if_ne	jmp	#LR__3302
1d9a8     0F 13 02 F6 | 	mov	arg01, local01
1d9ac     14 1E 06 F1 | 	add	local01, #20
1d9b0     0F 15 02 FB | 	rdlong	arg02, local01
1d9b4     14 1E 86 F1 | 	sub	local01, #20
1d9b8     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1d9bc     FD 26 02 F6 | 	mov	local05, result1
1d9c0     02 26 16 F2 | 	cmp	local05, #2 wc
1d9c4     02 FA 05 C6 |  if_b	mov	result1, #2
1d9c8     CC 00 90 CD |  if_b	jmp	#LR__3305
1d9cc     FF FF 7F FF 
1d9d0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d9d4     01 FA 05 A6 |  if_e	mov	result1, #1
1d9d8     BC 00 90 AD |  if_e	jmp	#LR__3305
1d9dc     18 22 06 F1 | 	add	local03, #24
1d9e0     11 15 02 FB | 	rdlong	arg02, local03
1d9e4     18 22 86 F1 | 	sub	local03, #24
1d9e8     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d9ec     68 00 90 CD |  if_b	jmp	#LR__3301
1d9f0     00 20 0E F2 | 	cmp	local02, #0 wz
1d9f4     18 1E 06 A1 |  if_e	add	local01, #24
1d9f8     0F 01 68 AC |  if_e	wrlong	#0, local01
1d9fc                 | ' 						dp->sect = 0; return FR_NO_FILE;
1d9fc     04 FA 05 A6 |  if_e	mov	result1, #4
1da00     94 00 90 AD |  if_e	jmp	#LR__3305
1da04     0F 13 02 F6 | 	mov	arg01, local01
1da08     14 1E 06 F1 | 	add	local01, #20
1da0c     0F 15 02 FB | 	rdlong	arg02, local01
1da10     14 1E 86 F1 | 	sub	local01, #20
1da14     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1da18     FD 26 0A F6 | 	mov	local05, result1 wz
1da1c     07 FA 05 A6 |  if_e	mov	result1, #7
1da20     74 00 90 AD |  if_e	jmp	#LR__3305
1da24     01 26 0E F2 | 	cmp	local05, #1 wz
1da28     02 FA 05 A6 |  if_e	mov	result1, #2
1da2c     68 00 90 AD |  if_e	jmp	#LR__3305
1da30     FF FF 7F FF 
1da34     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1da38     01 FA 05 A6 |  if_e	mov	result1, #1
1da3c     58 00 90 AD |  if_e	jmp	#LR__3305
1da40     13 15 02 F6 | 	mov	arg02, local05
1da44     11 13 02 F6 | 	mov	arg01, local03
1da48     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1da4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1da50     01 FA 05 56 |  if_ne	mov	result1, #1
1da54     40 00 90 5D |  if_ne	jmp	#LR__3305
1da58                 | LR__3301
1da58     14 1E 06 F1 | 	add	local01, #20
1da5c     0F 27 62 FC | 	wrlong	local05, local01
1da60     11 13 02 F6 | 	mov	arg01, local03
1da64     13 15 02 F6 | 	mov	arg02, local05
1da68     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1da6c     04 1E 06 F1 | 	add	local01, #4
1da70     0F FB 61 FC | 	wrlong	result1, local01
1da74     18 1E 86 F1 | 	sub	local01, #24
1da78                 | LR__3302
1da78                 | LR__3303
1da78                 | LR__3304
1da78     10 1E 06 F1 | 	add	local01, #16
1da7c     0F 25 62 FC | 	wrlong	local04, local01
1da80     34 22 06 F1 | 	add	local03, #52
1da84     FF 25 06 F5 | 	and	local04, #511
1da88     12 23 02 F1 | 	add	local03, local04
1da8c     0C 1E 06 F1 | 	add	local01, #12
1da90     0F 23 62 FC | 	wrlong	local03, local01
1da94                 | ' #line 1771 "ff.c"
1da94                 | ' 				}
1da94                 | ' 				dp->clust = clst;
1da94                 | ' 				dp->sect = clst2sect(fs, clst);
1da94                 | ' 			}
1da94                 | ' 		}
1da94                 | ' 	}
1da94                 | ' 	dp->dptr = ofs;
1da94                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1da94                 | ' 
1da94                 | ' 	return FR_OK;
1da94     00 FA 05 F6 | 	mov	result1, #0
1da98                 | LR__3305
1da98     A7 F0 03 F6 | 	mov	ptra, fp
1da9c     B2 00 A0 FD | 	call	#popregs_
1daa0                 | _fatfs_cc_dir_next_ret
1daa0     2D 00 64 FD | 	ret
1daa4                 | 
1daa4                 | _fatfs_cc_dir_alloc
1daa4     08 4A 05 F6 | 	mov	COUNT_, #8
1daa8     A8 00 A0 FD | 	call	#pushregs_
1daac     09 1F 02 F6 | 	mov	local01, arg01
1dab0     0A 21 02 F6 | 	mov	local02, arg02
1dab4     0F 23 02 FB | 	rdlong	local03, local01
1dab8     0F 13 02 F6 | 	mov	arg01, local01
1dabc     00 14 06 F6 | 	mov	arg02, #0
1dac0     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1dac4     FD 24 0A F6 | 	mov	local04, result1 wz
1dac8     70 00 90 5D |  if_ne	jmp	#LR__3314
1dacc     00 26 06 F6 | 	mov	local05, #0
1dad0                 | ' 		n = 0;
1dad0                 | ' 		do {
1dad0                 | LR__3310
1dad0     18 1E 06 F1 | 	add	local01, #24
1dad4     0F 15 02 FB | 	rdlong	arg02, local01
1dad8     18 1E 86 F1 | 	sub	local01, #24
1dadc     11 13 02 F6 | 	mov	arg01, local03
1dae0     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1dae4     FD 24 0A F6 | 	mov	local04, result1 wz
1dae8     50 00 90 5D |  if_ne	jmp	#LR__3313
1daec     1C 1E 06 F1 | 	add	local01, #28
1daf0     0F 29 02 FB | 	rdlong	local06, local01
1daf4     1C 1E 86 F1 | 	sub	local01, #28
1daf8     14 29 C2 FA | 	rdbyte	local06, local06
1dafc     E5 28 0E F2 | 	cmp	local06, #229 wz
1db00     1C 1E 06 51 |  if_ne	add	local01, #28
1db04     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1db08     1C 1E 86 51 |  if_ne	sub	local01, #28
1db0c     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1db10     10 00 90 5D |  if_ne	jmp	#LR__3311
1db14     01 26 06 F1 | 	add	local05, #1
1db18     10 27 0A F2 | 	cmp	local05, local02 wz
1db1c     1C 00 90 AD |  if_e	jmp	#LR__3313
1db20     04 00 90 FD | 	jmp	#LR__3312
1db24                 | LR__3311
1db24     00 26 06 F6 | 	mov	local05, #0
1db28                 | LR__3312
1db28     0F 13 02 F6 | 	mov	arg01, local01
1db2c     01 14 06 F6 | 	mov	arg02, #1
1db30     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1db34     FD 24 0A F6 | 	mov	local04, result1 wz
1db38     94 FF 9F AD |  if_e	jmp	#LR__3310
1db3c                 | LR__3313
1db3c                 | LR__3314
1db3c     04 24 0E F2 | 	cmp	local04, #4 wz
1db40     07 24 06 A6 |  if_e	mov	local04, #7
1db44                 | ' 	return res;
1db44     12 FB 01 F6 | 	mov	result1, local04
1db48     A7 F0 03 F6 | 	mov	ptra, fp
1db4c     B2 00 A0 FD | 	call	#popregs_
1db50                 | _fatfs_cc_dir_alloc_ret
1db50     2D 00 64 FD | 	ret
1db54                 | 
1db54                 | _fatfs_cc_ld_clust
1db54     09 01 02 F6 | 	mov	_var01, arg01
1db58     0A 13 02 F6 | 	mov	arg01, arg02
1db5c     1A 12 06 F1 | 	add	arg01, #26
1db60                 | ' {
1db60                 | ' 
1db60                 | ' 	return *((WORD*)ptr);
1db60     09 FB E1 FA | 	rdword	result1, arg01
1db64     FD 12 32 F9 | 	getword	arg01, result1, #0
1db68     00 01 C2 FA | 	rdbyte	_var01, _var01
1db6c     03 00 0E F2 | 	cmp	_var01, #3 wz
1db70     14 14 06 A1 |  if_e	add	arg02, #20
1db74                 | ' {
1db74                 | ' 
1db74                 | ' 	return *((WORD*)ptr);
1db74     0A FB E1 AA |  if_e	rdword	result1, arg02
1db78     10 FA 65 A0 |  if_e	shl	result1, #16
1db7c     FD 12 42 A5 |  if_e	or	arg01, result1
1db80                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1db80                 | ' 	}
1db80                 | ' 
1db80                 | ' 	return cl;
1db80     09 FB 01 F6 | 	mov	result1, arg01
1db84                 | _fatfs_cc_ld_clust_ret
1db84     2D 00 64 FD | 	ret
1db88                 | 
1db88                 | _fatfs_cc_st_clust
1db88     09 01 02 F6 | 	mov	_var01, arg01
1db8c     0A 13 02 F6 | 	mov	arg01, arg02
1db90     1A 12 06 F1 | 	add	arg01, #26
1db94     09 17 52 FC | 	wrword	arg03, arg01
1db98     00 01 C2 FA | 	rdbyte	_var01, _var01
1db9c     03 00 0E F2 | 	cmp	_var01, #3 wz
1dba0     14 14 06 A1 |  if_e	add	arg02, #20
1dba4     10 16 46 A0 |  if_e	shr	arg03, #16
1dba8     0A 17 52 AC |  if_e	wrword	arg03, arg02
1dbac                 | _fatfs_cc_st_clust_ret
1dbac     2D 00 64 FD | 	ret
1dbb0                 | 
1dbb0                 | _fatfs_cc_cmp_lfn
1dbb0     07 4A 05 F6 | 	mov	COUNT_, #7
1dbb4     A8 00 A0 FD | 	call	#pushregs_
1dbb8     09 1F 02 F6 | 	mov	local01, arg01
1dbbc     0A 13 02 F6 | 	mov	arg01, arg02
1dbc0     1A 12 06 F1 | 	add	arg01, #26
1dbc4                 | ' {
1dbc4                 | ' 
1dbc4                 | ' 	return *((WORD*)ptr);
1dbc4     09 FB E9 FA | 	rdword	result1, arg01 wz
1dbc8     00 FA 05 56 |  if_ne	mov	result1, #0
1dbcc     E0 00 90 5D |  if_ne	jmp	#LR__3326
1dbd0     0A 21 C2 FA | 	rdbyte	local02, arg02
1dbd4     3F 20 06 F5 | 	and	local02, #63
1dbd8     01 20 86 F1 | 	sub	local02, #1
1dbdc     0D 20 06 FD | 	qmul	local02, #13
1dbe0                 | ' 
1dbe0                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1dbe0                 | ' 
1dbe0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1dbe0     01 22 06 F6 | 	mov	local03, #1
1dbe4     00 24 06 F6 | 	mov	local04, #0
1dbe8     18 26 62 FD | 	getqx	local05
1dbec                 | LR__3320
1dbec     0D 24 16 F2 | 	cmp	local04, #13 wc
1dbf0     9C 00 90 3D |  if_ae	jmp	#LR__3325
1dbf4     0A 13 02 F6 | 	mov	arg01, arg02
1dbf8     12 21 02 F6 | 	mov	local02, local04
1dbfc     01 00 00 FF 
1dc00     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1dc04     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1dc08     10 21 C2 FA | 	rdbyte	local02, local02
1dc0c     01 20 06 FA | 	mul	local02, #1
1dc10     10 13 02 F1 | 	add	arg01, local02
1dc14     01 00 00 FF 
1dc18     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1dc1c                 | ' {
1dc1c                 | ' 
1dc1c                 | ' 	return *((WORD*)ptr);
1dc1c     09 FB E1 FA | 	rdword	result1, arg01
1dc20     FD 28 02 F6 | 	mov	local06, result1
1dc24     11 21 02 F6 | 	mov	local02, local03
1dc28     0F 20 4E F7 | 	zerox	local02, #15 wz
1dc2c     44 00 90 AD |  if_e	jmp	#LR__3323
1dc30     00 27 16 F2 | 	cmp	local05, #256 wc
1dc34     2C 00 90 3D |  if_ae	jmp	#LR__3321
1dc38     14 13 32 F9 | 	getword	arg01, local06, #0
1dc3c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1dc40     FD 20 02 F6 | 	mov	local02, result1
1dc44     13 23 02 F6 | 	mov	local03, local05
1dc48     01 22 66 F0 | 	shl	local03, #1
1dc4c     0F 23 02 F1 | 	add	local03, local01
1dc50     11 13 E2 FA | 	rdword	arg01, local03
1dc54     01 26 06 F1 | 	add	local05, #1
1dc58     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1dc5c     FD 20 0A F2 | 	cmp	local02, result1 wz
1dc60     08 00 90 AD |  if_e	jmp	#LR__3322
1dc64                 | LR__3321
1dc64                 | ' 				return 0;
1dc64     00 FA 05 F6 | 	mov	result1, #0
1dc68     44 00 90 FD | 	jmp	#LR__3326
1dc6c                 | LR__3322
1dc6c     14 23 02 F6 | 	mov	local03, local06
1dc70     14 00 90 FD | 	jmp	#LR__3324
1dc74                 | LR__3323
1dc74     14 29 32 F9 | 	getword	local06, local06, #0
1dc78     7F 00 00 FF 
1dc7c     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1dc80     00 FA 05 56 |  if_ne	mov	result1, #0
1dc84     28 00 90 5D |  if_ne	jmp	#LR__3326
1dc88                 | LR__3324
1dc88     01 24 06 F1 | 	add	local04, #1
1dc8c     5C FF 9F FD | 	jmp	#LR__3320
1dc90                 | LR__3325
1dc90     0A 21 C2 FA | 	rdbyte	local02, arg02
1dc94     40 20 CE F7 | 	test	local02, #64 wz
1dc98     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1dc9c     01 26 66 50 |  if_ne	shl	local05, #1
1dca0     0F 27 02 51 |  if_ne	add	local05, local01
1dca4     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1dca8     00 FA 05 56 |  if_ne	mov	result1, #0
1dcac                 | ' 
1dcac                 | ' 	return 1;
1dcac     01 FA 05 A6 |  if_e	mov	result1, #1
1dcb0                 | LR__3326
1dcb0     A7 F0 03 F6 | 	mov	ptra, fp
1dcb4     B2 00 A0 FD | 	call	#popregs_
1dcb8                 | _fatfs_cc_cmp_lfn_ret
1dcb8     2D 00 64 FD | 	ret
1dcbc                 | 
1dcbc                 | _fatfs_cc_pick_lfn
1dcbc     09 01 02 F6 | 	mov	_var01, arg01
1dcc0     0A 13 02 F6 | 	mov	arg01, arg02
1dcc4     1A 12 06 F1 | 	add	arg01, #26
1dcc8                 | ' {
1dcc8                 | ' 
1dcc8                 | ' 	return *((WORD*)ptr);
1dcc8     09 FB E9 FA | 	rdword	result1, arg01 wz
1dccc     00 FA 05 56 |  if_ne	mov	result1, #0
1dcd0     D4 00 90 5D |  if_ne	jmp	#LR__3335
1dcd4     0A 03 C2 FA | 	rdbyte	_var02, arg02
1dcd8     40 02 26 F5 | 	andn	_var02, #64
1dcdc     01 02 86 F1 | 	sub	_var02, #1
1dce0     0D 02 06 FD | 	qmul	_var02, #13
1dce4                 | ' 
1dce4                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1dce4                 | ' 
1dce4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1dce4     01 04 06 F6 | 	mov	_var03, #1
1dce8     00 06 06 F6 | 	mov	_var04, #0
1dcec     18 08 62 FD | 	getqx	_var05
1dcf0                 | LR__3330
1dcf0     0D 06 16 F2 | 	cmp	_var04, #13 wc
1dcf4     80 00 90 3D |  if_ae	jmp	#LR__3333
1dcf8     0A 13 02 F6 | 	mov	arg01, arg02
1dcfc     03 03 02 F6 | 	mov	_var02, _var04
1dd00     01 00 00 FF 
1dd04     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1dd08     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1dd0c     01 03 C2 FA | 	rdbyte	_var02, _var02
1dd10     01 02 06 FA | 	mul	_var02, #1
1dd14     01 13 02 F1 | 	add	arg01, _var02
1dd18     01 00 00 FF 
1dd1c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1dd20                 | ' {
1dd20                 | ' 
1dd20                 | ' 	return *((WORD*)ptr);
1dd20     09 FB E1 FA | 	rdword	result1, arg01
1dd24     FD 0A 02 F6 | 	mov	_var06, result1
1dd28     02 03 02 F6 | 	mov	_var02, _var03
1dd2c     0F 02 4E F7 | 	zerox	_var02, #15 wz
1dd30     28 00 90 AD |  if_e	jmp	#LR__3331
1dd34     00 09 16 F2 | 	cmp	_var05, #256 wc
1dd38     00 FA 05 36 |  if_ae	mov	result1, #0
1dd3c     68 00 90 3D |  if_ae	jmp	#LR__3335
1dd40     04 03 02 F6 | 	mov	_var02, _var05
1dd44     01 02 66 F0 | 	shl	_var02, #1
1dd48     00 03 02 F1 | 	add	_var02, _var01
1dd4c     05 05 02 F6 | 	mov	_var03, _var06
1dd50     01 05 52 FC | 	wrword	_var03, _var02
1dd54     01 08 06 F1 | 	add	_var05, #1
1dd58     14 00 90 FD | 	jmp	#LR__3332
1dd5c                 | LR__3331
1dd5c     05 0B 32 F9 | 	getword	_var06, _var06, #0
1dd60     7F 00 00 FF 
1dd64     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1dd68     00 FA 05 56 |  if_ne	mov	result1, #0
1dd6c     38 00 90 5D |  if_ne	jmp	#LR__3335
1dd70                 | LR__3332
1dd70     01 06 06 F1 | 	add	_var04, #1
1dd74     78 FF 9F FD | 	jmp	#LR__3330
1dd78                 | LR__3333
1dd78     0A 03 C2 FA | 	rdbyte	_var02, arg02
1dd7c     40 02 CE F7 | 	test	_var02, #64 wz
1dd80     02 0D 02 56 |  if_ne	mov	_var07, _var03
1dd84     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1dd88     18 00 90 AD |  if_e	jmp	#LR__3334
1dd8c     00 09 16 F2 | 	cmp	_var05, #256 wc
1dd90     00 FA 05 36 |  if_ae	mov	result1, #0
1dd94     10 00 90 3D |  if_ae	jmp	#LR__3335
1dd98     01 08 66 F0 | 	shl	_var05, #1
1dd9c     00 09 02 F1 | 	add	_var05, _var01
1dda0     04 01 58 FC | 	wrword	#0, _var05
1dda4                 | LR__3334
1dda4                 | ' 		lfnbuf[i] = 0;
1dda4                 | ' 	}
1dda4                 | ' 
1dda4                 | ' 	return 1;
1dda4     01 FA 05 F6 | 	mov	result1, #1
1dda8                 | LR__3335
1dda8                 | _fatfs_cc_pick_lfn_ret
1dda8     2D 00 64 FD | 	ret
1ddac                 | 
1ddac                 | _fatfs_cc_put_lfn
1ddac     0D 14 06 F1 | 	add	arg02, #13
1ddb0     0A 19 42 FC | 	wrbyte	arg04, arg02
1ddb4     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1ddb8     01 18 86 F1 | 	sub	arg04, #1
1ddbc     0D 18 06 FD | 	qmul	arg04, #13
1ddc0     09 01 02 F6 | 	mov	_var01, arg01
1ddc4     02 14 86 F1 | 	sub	arg02, #2
1ddc8     0A 1F 48 FC | 	wrbyte	#15, arg02
1ddcc     01 14 06 F1 | 	add	arg02, #1
1ddd0     0A 01 48 FC | 	wrbyte	#0, arg02
1ddd4     0C 14 86 F1 | 	sub	arg02, #12
1ddd8     0A 13 02 F6 | 	mov	arg01, arg02
1dddc     1A 12 06 F1 | 	add	arg01, #26
1dde0     09 01 58 FC | 	wrword	#0, arg01
1dde4     00 02 06 F6 | 	mov	_var02, #0
1dde8     00 04 06 F6 | 	mov	_var03, #0
1ddec                 | ' 	BYTE* dir,
1ddec                 | ' 	BYTE ord,
1ddec                 | ' 	BYTE sum
1ddec                 | ' )
1ddec                 | ' {
1ddec                 | ' 	UINT i, s;
1ddec                 | ' 	WCHAR wc;
1ddec                 | ' 
1ddec                 | ' 
1ddec                 | ' 	dir[ 13 ] = sum;
1ddec                 | ' 	dir[ 11 ] =  0x0F ;
1ddec                 | ' 	dir[ 12 ] = 0;
1ddec                 | ' 	st_word(dir +  26 , 0);
1ddec                 | ' 
1ddec                 | ' 	i = (ord - 1) * 13;
1ddec                 | ' 	s = wc = 0;
1ddec                 | ' 	do {
1ddec     01 00 00 FF 
1ddf0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1ddf4     18 06 62 FD | 	getqx	_var04
1ddf8     97 2A 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
1ddfc                 | LR__3340
1ddfc     01 19 32 F9 | 	getword	arg04, _var02, #0
1de00     7F 00 00 FF 
1de04     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1de08     03 13 02 56 |  if_ne	mov	arg01, _var04
1de0c     01 06 06 51 |  if_ne	add	_var04, #1
1de10     01 12 66 50 |  if_ne	shl	arg01, #1
1de14     00 13 02 51 |  if_ne	add	arg01, _var01
1de18     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1de1c     0A 13 02 F6 | 	mov	arg01, arg02
1de20     02 19 02 F6 | 	mov	arg04, _var03
1de24     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1de28     0C 19 C2 FA | 	rdbyte	arg04, arg04
1de2c     01 18 06 FA | 	mul	arg04, #1
1de30     0C 13 02 F1 | 	add	arg01, arg04
1de34     09 03 52 FC | 	wrword	_var02, arg01
1de38     01 19 02 F6 | 	mov	arg04, _var02
1de3c     0F 18 4E F7 | 	zerox	arg04, #15 wz
1de40     0F 02 CE A9 |  if_e	bmask	_var02, #15
1de44     01 04 06 F1 | 	add	_var03, #1
1de48     0D 04 16 F2 | 	cmp	_var03, #13 wc
1de4c     AC FF 9F CD |  if_b	jmp	#LR__3340
1de50                 | LR__3341
1de50     01 00 00 FF 
1de54     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1de58     01 03 32 F9 | 	getword	_var02, _var02, #0
1de5c     7F 00 00 FF 
1de60     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1de64     01 06 66 50 |  if_ne	shl	_var04, #1
1de68     00 07 02 51 |  if_ne	add	_var04, _var01
1de6c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1de70     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1de74     40 16 46 A5 |  if_e	or	arg03, #64
1de78     0A 17 42 FC | 	wrbyte	arg03, arg02
1de7c                 | _fatfs_cc_put_lfn_ret
1de7c     2D 00 64 FD | 	ret
1de80                 | 
1de80                 | _fatfs_cc_gen_numname
1de80     08 4A 05 F6 | 	mov	COUNT_, #8
1de84     A8 00 A0 FD | 	call	#pushregs_
1de88     2C F0 07 F1 | 	add	ptra, #44
1de8c     09 1F 02 F6 | 	mov	local01, arg01
1de90     0A 21 02 F6 | 	mov	local02, arg02
1de94     0B 23 02 F6 | 	mov	local03, arg03
1de98     0C 25 02 F6 | 	mov	local04, arg04
1de9c     0F 13 02 F6 | 	mov	arg01, local01
1dea0     10 15 02 F6 | 	mov	arg02, local02
1dea4     0B 16 06 F6 | 	mov	arg03, #11
1dea8     D8 7B BF FD | 	call	#__system____builtin_memmove
1deac     06 24 16 F2 | 	cmp	local04, #6 wc
1deb0     48 00 90 CD |  if_b	jmp	#LR__3355
1deb4     12 27 02 F6 | 	mov	local05, local04
1deb8     97 1E 48 FB | 	callpa	#(@LR__3353-@LR__3350)>>2,fcache_load_ptr_
1debc                 | ' 		sreg = seq;
1debc                 | ' 		while (*lfn) {
1debc                 | LR__3350
1debc     11 29 EA FA | 	rdword	local06, local03 wz
1dec0     34 00 90 AD |  if_e	jmp	#LR__3354
1dec4     11 2B E2 FA | 	rdword	local07, local03
1dec8                 | ' 			wc = *lfn++;
1dec8                 | ' 			for (i = 0; i < 16; i++) {
1dec8     02 22 06 F1 | 	add	local03, #2
1decc     10 12 DC FC | 	rep	@LR__3352, #16
1ded0                 | LR__3351
1ded0     01 26 66 F0 | 	shl	local05, #1
1ded4     15 29 32 F9 | 	getword	local06, local07, #0
1ded8     01 28 06 F5 | 	and	local06, #1
1dedc     14 27 02 F1 | 	add	local05, local06
1dee0     15 2B 32 F9 | 	getword	local07, local07, #0
1dee4     01 2A 46 F0 | 	shr	local07, #1
1dee8     10 26 2E F4 | 	testbn	local05, #16 wz
1deec     88 00 00 5F 
1def0     21 26 66 55 |  if_ne	xor	local05, ##69665
1def4                 | LR__3352
1def4     C4 FF 9F FD | 	jmp	#LR__3350
1def8                 | LR__3353
1def8                 | LR__3354
1def8     13 25 02 F6 | 	mov	local04, local05
1defc                 | LR__3355
1defc     07 2A 06 F6 | 	mov	local07, #7
1df00                 | ' 			}
1df00                 | ' 		}
1df00                 | ' 		seq = (UINT)sreg;
1df00                 | ' 	}
1df00                 | ' 
1df00                 | ' 
1df00                 | ' 	i = 7;
1df00                 | ' 	do {
1df00     10 4E 05 F1 | 	add	fp, #16
1df04     97 1A 48 FB | 	callpa	#(@LR__3357-@LR__3356)>>2,fcache_load_ptr_
1df08                 | LR__3356
1df08     12 27 42 F8 | 	getnib	local05, local04, #0
1df0c     30 26 06 F1 | 	add	local05, #48
1df10     04 24 46 F0 | 	shr	local04, #4
1df14     13 29 E2 F8 | 	getbyte	local06, local05, #0
1df18     3A 28 16 F2 | 	cmp	local06, #58 wc
1df1c     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1df20     07 26 06 31 |  if_ae	add	local05, #7
1df24     15 29 02 F6 | 	mov	local06, local07
1df28     01 2A 8E F1 | 	sub	local07, #1 wz
1df2c     A7 28 02 F1 | 	add	local06, fp
1df30     14 27 42 FC | 	wrbyte	local05, local06
1df34     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1df38     CC FF 9F 5D |  if_ne	jmp	#LR__3356
1df3c                 | LR__3357
1df3c     15 29 02 F6 | 	mov	local06, local07
1df40     A7 28 02 F1 | 	add	local06, fp
1df44     14 FD 48 FC | 	wrbyte	#126, local06
1df48                 | ' 	ns[i] = '~';
1df48                 | ' 
1df48                 | ' 
1df48                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1df48     00 26 06 F6 | 	mov	local05, #0
1df4c     10 4E 85 F1 | 	sub	fp, #16
1df50     97 2A 48 FB | 	callpa	#(@LR__3360-@LR__3358)>>2,fcache_load_ptr_
1df54                 | LR__3358
1df54     15 27 12 F2 | 	cmp	local05, local07 wc
1df58     4C 00 90 3D |  if_ae	jmp	#LR__3361
1df5c     13 29 02 F6 | 	mov	local06, local05
1df60     0F 29 02 F1 | 	add	local06, local01
1df64     14 29 C2 FA | 	rdbyte	local06, local06
1df68     20 28 0E F2 | 	cmp	local06, #32 wz
1df6c     38 00 90 AD |  if_e	jmp	#LR__3361
1df70     13 13 02 F6 | 	mov	arg01, local05
1df74     0F 13 02 F1 | 	add	arg01, local01
1df78     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1df7c     00 FA 05 56 |  if_ne	mov	result1, #0
1df80                 | ' 
1df80                 | ' 	return 0;
1df80     00 FA 05 A6 |  if_e	mov	result1, #0
1df84     00 FA 0D F2 | 	cmp	result1, #0 wz
1df88     14 00 90 AD |  if_e	jmp	#LR__3359
1df8c     15 29 02 F6 | 	mov	local06, local07
1df90     01 28 86 F1 | 	sub	local06, #1
1df94     14 27 0A F2 | 	cmp	local05, local06 wz
1df98     0C 00 90 AD |  if_e	jmp	#LR__3361
1df9c     01 26 06 F1 | 	add	local05, #1
1dfa0                 | LR__3359
1dfa0     01 26 06 F1 | 	add	local05, #1
1dfa4     AC FF 9F FD | 	jmp	#LR__3358
1dfa8                 | LR__3360
1dfa8                 | LR__3361
1dfa8     97 20 48 FB | 	callpa	#(@LR__3365-@LR__3362)>>2,fcache_load_ptr_
1dfac                 | ' 			j++;
1dfac                 | ' 		}
1dfac                 | ' 	}
1dfac                 | ' 	do {
1dfac                 | LR__3362
1dfac     13 29 02 F6 | 	mov	local06, local05
1dfb0     0F 29 02 F1 | 	add	local06, local01
1dfb4     08 2A 16 F2 | 	cmp	local07, #8 wc
1dfb8     01 26 06 F1 | 	add	local05, #1
1dfbc     1C 00 90 3D |  if_ae	jmp	#LR__3363
1dfc0     15 25 02 F6 | 	mov	local04, local07
1dfc4     10 4E 05 F1 | 	add	fp, #16
1dfc8     A7 24 02 F1 | 	add	local04, fp
1dfcc     12 2D C2 FA | 	rdbyte	local08, local04
1dfd0     01 2A 06 F1 | 	add	local07, #1
1dfd4     10 4E 85 F1 | 	sub	fp, #16
1dfd8     04 00 90 FD | 	jmp	#LR__3364
1dfdc                 | LR__3363
1dfdc     20 2C 06 F6 | 	mov	local08, #32
1dfe0                 | LR__3364
1dfe0     14 2D 42 FC | 	wrbyte	local08, local06
1dfe4     08 26 16 F2 | 	cmp	local05, #8 wc
1dfe8     C0 FF 9F CD |  if_b	jmp	#LR__3362
1dfec                 | LR__3365
1dfec     A7 F0 03 F6 | 	mov	ptra, fp
1dff0     B2 00 A0 FD | 	call	#popregs_
1dff4                 | _fatfs_cc_gen_numname_ret
1dff4     2D 00 64 FD | 	ret
1dff8                 | 
1dff8                 | _fatfs_cc_sum_sfn
1dff8     00 00 06 F6 | 	mov	_var01, #0
1dffc                 | ' )
1dffc                 | ' {
1dffc                 | ' 	BYTE sum = 0;
1dffc                 | ' 	UINT n = 11;
1dffc                 | ' 
1dffc                 | ' 	do {
1dffc     97 12 48 FB | 	callpa	#(@LR__3372-@LR__3370)>>2,fcache_load_ptr_
1e000                 | LR__3370
1e000     0B 10 DC FC | 	rep	@LR__3373, #11
1e004                 | LR__3371
1e004     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1e008     01 FA 45 F0 | 	shr	result1, #1
1e00c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1e010     07 00 66 F0 | 	shl	_var01, #7
1e014     00 FB 01 F1 | 	add	result1, _var01
1e018     09 01 C2 FA | 	rdbyte	_var01, arg01
1e01c     FD 00 02 F1 | 	add	_var01, result1
1e020     01 12 06 F1 | 	add	arg01, #1
1e024                 | LR__3372
1e024                 | LR__3373
1e024                 | ' 	return sum;
1e024     00 FB 01 F6 | 	mov	result1, _var01
1e028                 | _fatfs_cc_sum_sfn_ret
1e028     2D 00 64 FD | 	ret
1e02c                 | 
1e02c                 | _fatfs_cc_dir_read
1e02c     0C 4A 05 F6 | 	mov	COUNT_, #12
1e030     A8 00 A0 FD | 	call	#pushregs_
1e034     09 1F 02 F6 | 	mov	local01, arg01
1e038     0A 21 02 F6 | 	mov	local02, arg02
1e03c     04 22 06 F6 | 	mov	local03, #4
1e040     0F 25 02 FB | 	rdlong	local04, local01
1e044     FF 26 06 F6 | 	mov	local05, #255
1e048     FF 28 06 F6 | 	mov	local06, #255
1e04c                 | ' )
1e04c                 | ' {
1e04c                 | ' 	FRESULT res = FR_NO_FILE;
1e04c                 | ' 	FATFS *fs = dp->obj.fs;
1e04c                 | ' 	BYTE attr, b;
1e04c                 | ' 
1e04c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1e04c                 | ' 
1e04c                 | ' 
1e04c                 | ' 	while (dp->sect) {
1e04c                 | LR__3380
1e04c     18 1E 06 F1 | 	add	local01, #24
1e050     0F FB 09 FB | 	rdlong	result1, local01 wz
1e054     18 1E 86 F1 | 	sub	local01, #24
1e058     AC 01 90 AD |  if_e	jmp	#LR__3390
1e05c     18 1E 06 F1 | 	add	local01, #24
1e060     0F 15 02 FB | 	rdlong	arg02, local01
1e064     18 1E 86 F1 | 	sub	local01, #24
1e068     12 13 02 F6 | 	mov	arg01, local04
1e06c     AC ED BF FD | 	call	#_fatfs_cc_move_window
1e070     FD 22 0A F6 | 	mov	local03, result1 wz
1e074     90 01 90 5D |  if_ne	jmp	#LR__3390
1e078     1C 1E 06 F1 | 	add	local01, #28
1e07c     0F FB 01 FB | 	rdlong	result1, local01
1e080     1C 1E 86 F1 | 	sub	local01, #28
1e084     FD 2A C2 FA | 	rdbyte	local07, result1
1e088     15 FB 01 F6 | 	mov	result1, local07
1e08c     07 FA 4D F7 | 	zerox	result1, #7 wz
1e090     04 22 06 A6 |  if_e	mov	local03, #4
1e094                 | ' 			res = FR_NO_FILE; break;
1e094     70 01 90 AD |  if_e	jmp	#LR__3390
1e098     1C 1E 06 F1 | 	add	local01, #28
1e09c     0F 2D 02 FB | 	rdlong	local08, local01
1e0a0     0B 2C 06 F1 | 	add	local08, #11
1e0a4     16 2F C2 FA | 	rdbyte	local09, local08
1e0a8     3F 2E 06 F5 | 	and	local09, #63
1e0ac     16 1E 86 F1 | 	sub	local01, #22
1e0b0     0F 2F 42 FC | 	wrbyte	local09, local01
1e0b4     06 1E 86 F1 | 	sub	local01, #6
1e0b8     15 FB E1 F8 | 	getbyte	result1, local07, #0
1e0bc     E5 FA 0D F2 | 	cmp	result1, #229 wz
1e0c0     15 2D 02 56 |  if_ne	mov	local08, local07
1e0c4     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1e0c8     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1e0cc     1C 00 90 AD |  if_e	jmp	#LR__3381
1e0d0     00 30 06 F6 | 	mov	local10, #0
1e0d4     17 2D E2 F8 | 	getbyte	local08, local09, #0
1e0d8     20 2C 26 F5 | 	andn	local08, #32
1e0dc     08 2C 0E F2 | 	cmp	local08, #8 wz
1e0e0     01 30 06 A6 |  if_e	mov	local10, #1
1e0e4     10 31 0A F2 | 	cmp	local10, local02 wz
1e0e8     08 00 90 AD |  if_e	jmp	#LR__3382
1e0ec                 | LR__3381
1e0ec     FF 26 06 F6 | 	mov	local05, #255
1e0f0     00 01 90 FD | 	jmp	#LR__3389
1e0f4                 | LR__3382
1e0f4     17 2F E2 F8 | 	getbyte	local09, local09, #0
1e0f8     0F 2E 0E F2 | 	cmp	local09, #15 wz
1e0fc     B4 00 90 5D |  if_ne	jmp	#LR__3386
1e100     15 33 E2 F8 | 	getbyte	local11, local07, #0
1e104     40 32 CE F7 | 	test	local11, #64 wz
1e108     30 00 90 AD |  if_e	jmp	#LR__3383
1e10c     1C 1E 06 F1 | 	add	local01, #28
1e110     0F 33 02 FB | 	rdlong	local11, local01
1e114     0D 32 06 F1 | 	add	local11, #13
1e118     19 29 C2 FA | 	rdbyte	local06, local11
1e11c     15 2B E2 F8 | 	getbyte	local07, local07, #0
1e120     BF 2A 06 F5 | 	and	local07, #191
1e124     15 27 02 F6 | 	mov	local05, local07
1e128     0C 1E 86 F1 | 	sub	local01, #12
1e12c     0F 33 02 FB | 	rdlong	local11, local01
1e130     1C 1E 06 F1 | 	add	local01, #28
1e134     0F 33 62 FC | 	wrlong	local11, local01
1e138     2C 1E 86 F1 | 	sub	local01, #44
1e13c                 | LR__3383
1e13c     15 2D E2 F8 | 	getbyte	local08, local07, #0
1e140     13 31 E2 F8 | 	getbyte	local10, local05, #0
1e144     18 2D 0A F2 | 	cmp	local08, local10 wz
1e148     5C 00 90 5D |  if_ne	jmp	#LR__3384
1e14c     14 31 E2 F8 | 	getbyte	local10, local06, #0
1e150     1C 1E 06 F1 | 	add	local01, #28
1e154     0F 2F 02 FB | 	rdlong	local09, local01
1e158     1C 1E 86 F1 | 	sub	local01, #28
1e15c     0D 2E 06 F1 | 	add	local09, #13
1e160     17 2D C2 FA | 	rdbyte	local08, local09
1e164     16 2F E2 F8 | 	getbyte	local09, local08, #0
1e168     17 31 0A F2 | 	cmp	local10, local09 wz
1e16c     38 00 90 5D |  if_ne	jmp	#LR__3384
1e170     0C 24 06 F1 | 	add	local04, #12
1e174     12 13 02 FB | 	rdlong	arg01, local04
1e178     0C 24 86 F1 | 	sub	local04, #12
1e17c     1C 1E 06 F1 | 	add	local01, #28
1e180     0F 35 02 FB | 	rdlong	local12, local01
1e184     1C 1E 86 F1 | 	sub	local01, #28
1e188     1A 15 02 F6 | 	mov	arg02, local12
1e18c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1e190     00 FA 4D F2 | 	cmps	result1, #0 wz
1e194     13 35 02 56 |  if_ne	mov	local12, local05
1e198     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1e19c     01 34 86 51 |  if_ne	sub	local12, #1
1e1a0     1A 33 02 56 |  if_ne	mov	local11, local12
1e1a4     04 00 90 5D |  if_ne	jmp	#LR__3385
1e1a8                 | LR__3384
1e1a8     FF 32 06 F6 | 	mov	local11, #255
1e1ac                 | LR__3385
1e1ac     19 27 02 F6 | 	mov	local05, local11
1e1b0     40 00 90 FD | 	jmp	#LR__3388
1e1b4                 | LR__3386
1e1b4     13 33 02 F6 | 	mov	local11, local05
1e1b8     07 32 4E F7 | 	zerox	local11, #7 wz
1e1bc     20 00 90 5D |  if_ne	jmp	#LR__3387
1e1c0     14 29 E2 F8 | 	getbyte	local06, local06, #0
1e1c4     1C 1E 06 F1 | 	add	local01, #28
1e1c8     0F 13 02 FB | 	rdlong	arg01, local01
1e1cc     1C 1E 86 F1 | 	sub	local01, #28
1e1d0     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1e1d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e1d8     FD 28 0A F2 | 	cmp	local06, result1 wz
1e1dc     28 00 90 AD |  if_e	jmp	#LR__3390
1e1e0                 | LR__3387
1e1e0     2C 1E 06 F1 | 	add	local01, #44
1e1e4     FF FF FF FF 
1e1e8     0F FF 6B FC | 	wrlong	##-1, local01
1e1ec     2C 1E 86 F1 | 	sub	local01, #44
1e1f0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1e1f0                 | ' 					}
1e1f0                 | ' 					break;
1e1f0     14 00 90 FD | 	jmp	#LR__3390
1e1f4                 | LR__3388
1e1f4                 | LR__3389
1e1f4     0F 13 02 F6 | 	mov	arg01, local01
1e1f8     00 14 06 F6 | 	mov	arg02, #0
1e1fc     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1e200     FD 22 0A F6 | 	mov	local03, result1 wz
1e204     44 FE 9F AD |  if_e	jmp	#LR__3380
1e208                 | LR__3390
1e208     00 22 0E F2 | 	cmp	local03, #0 wz
1e20c     18 1E 06 51 |  if_ne	add	local01, #24
1e210     0F 01 68 5C |  if_ne	wrlong	#0, local01
1e214                 | ' 	return res;
1e214     11 FB 01 F6 | 	mov	result1, local03
1e218     A7 F0 03 F6 | 	mov	ptra, fp
1e21c     B2 00 A0 FD | 	call	#popregs_
1e220                 | _fatfs_cc_dir_read_ret
1e220     2D 00 64 FD | 	ret
1e224                 | 
1e224                 | _fatfs_cc_dir_find
1e224     0B 4A 05 F6 | 	mov	COUNT_, #11
1e228     A8 00 A0 FD | 	call	#pushregs_
1e22c     09 1F 02 F6 | 	mov	local01, arg01
1e230     0F 21 02 FB | 	rdlong	local02, local01
1e234     0F 13 02 F6 | 	mov	arg01, local01
1e238     00 14 06 F6 | 	mov	arg02, #0
1e23c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1e240     00 FA 0D F2 | 	cmp	result1, #0 wz
1e244     18 02 90 5D |  if_ne	jmp	#LR__3412
1e248     FF 22 06 F6 | 	mov	local03, #255
1e24c     FF 24 06 F6 | 	mov	local04, #255
1e250     2C 1E 06 F1 | 	add	local01, #44
1e254     FF FF FF FF 
1e258     0F FF 6B FC | 	wrlong	##-1, local01
1e25c     2C 1E 86 F1 | 	sub	local01, #44
1e260                 | ' #line 2404 "ff.c"
1e260                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1e260                 | ' 
1e260                 | ' 	do {
1e260                 | LR__3400
1e260     18 1E 06 F1 | 	add	local01, #24
1e264     0F 15 02 FB | 	rdlong	arg02, local01
1e268     18 1E 86 F1 | 	sub	local01, #24
1e26c     10 13 02 F6 | 	mov	arg01, local02
1e270     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1e274     FD 26 0A F6 | 	mov	local05, result1 wz
1e278     E0 01 90 5D |  if_ne	jmp	#LR__3411
1e27c     1C 1E 06 F1 | 	add	local01, #28
1e280     0F 17 02 FB | 	rdlong	arg03, local01
1e284     1C 1E 86 F1 | 	sub	local01, #28
1e288     0B 29 C2 FA | 	rdbyte	local06, arg03
1e28c     14 17 02 F6 | 	mov	arg03, local06
1e290     07 16 4E F7 | 	zerox	arg03, #7 wz
1e294     04 26 06 A6 |  if_e	mov	local05, #4
1e298     C0 01 90 AD |  if_e	jmp	#LR__3411
1e29c     1C 1E 06 F1 | 	add	local01, #28
1e2a0     0F 2B 02 FB | 	rdlong	local07, local01
1e2a4     15 17 02 F6 | 	mov	arg03, local07
1e2a8     0B 16 06 F1 | 	add	arg03, #11
1e2ac     0B 2D C2 FA | 	rdbyte	local08, arg03
1e2b0     3F 2C 06 F5 | 	and	local08, #63
1e2b4     16 1E 86 F1 | 	sub	local01, #22
1e2b8     0F 2D 42 FC | 	wrbyte	local08, local01
1e2bc     06 1E 86 F1 | 	sub	local01, #6
1e2c0     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1e2c4     E5 16 0E F2 | 	cmp	arg03, #229 wz
1e2c8     18 00 90 AD |  if_e	jmp	#LR__3401
1e2cc     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1e2d0     08 16 CE F7 | 	test	arg03, #8 wz
1e2d4     16 2B 02 56 |  if_ne	mov	local07, local08
1e2d8     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1e2dc     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1e2e0     18 00 90 AD |  if_e	jmp	#LR__3402
1e2e4                 | LR__3401
1e2e4     FF 24 06 F6 | 	mov	local04, #255
1e2e8     2C 1E 06 F1 | 	add	local01, #44
1e2ec     FF FF FF FF 
1e2f0     0F FF 6B FC | 	wrlong	##-1, local01
1e2f4     2C 1E 86 F1 | 	sub	local01, #44
1e2f8     4C 01 90 FD | 	jmp	#LR__3410
1e2fc                 | LR__3402
1e2fc     16 2D E2 F8 | 	getbyte	local08, local08, #0
1e300     0F 2C 0E F2 | 	cmp	local08, #15 wz
1e304     C8 00 90 5D |  if_ne	jmp	#LR__3406
1e308     2B 1E 06 F1 | 	add	local01, #43
1e30c     0F 2D C2 FA | 	rdbyte	local08, local01
1e310     2B 1E 86 F1 | 	sub	local01, #43
1e314     40 2C CE F7 | 	test	local08, #64 wz
1e318     2C 01 90 5D |  if_ne	jmp	#LR__3409
1e31c     14 2F E2 F8 | 	getbyte	local09, local06, #0
1e320     40 2E CE F7 | 	test	local09, #64 wz
1e324     30 00 90 AD |  if_e	jmp	#LR__3403
1e328     1C 1E 06 F1 | 	add	local01, #28
1e32c     0F 2F 02 FB | 	rdlong	local09, local01
1e330     0D 2E 06 F1 | 	add	local09, #13
1e334     17 23 C2 FA | 	rdbyte	local03, local09
1e338     14 29 E2 F8 | 	getbyte	local06, local06, #0
1e33c     BF 28 06 F5 | 	and	local06, #191
1e340     14 25 02 F6 | 	mov	local04, local06
1e344     0C 1E 86 F1 | 	sub	local01, #12
1e348     0F 2F 02 FB | 	rdlong	local09, local01
1e34c     1C 1E 06 F1 | 	add	local01, #28
1e350     0F 2F 62 FC | 	wrlong	local09, local01
1e354     2C 1E 86 F1 | 	sub	local01, #44
1e358                 | LR__3403
1e358     14 31 E2 F8 | 	getbyte	local10, local06, #0
1e35c     12 2B E2 F8 | 	getbyte	local07, local04, #0
1e360     15 31 0A F2 | 	cmp	local10, local07 wz
1e364     5C 00 90 5D |  if_ne	jmp	#LR__3404
1e368     11 2D E2 F8 | 	getbyte	local08, local03, #0
1e36c     1C 1E 06 F1 | 	add	local01, #28
1e370     0F 2B 02 FB | 	rdlong	local07, local01
1e374     1C 1E 86 F1 | 	sub	local01, #28
1e378     0D 2A 06 F1 | 	add	local07, #13
1e37c     15 29 C2 FA | 	rdbyte	local06, local07
1e380     14 2B E2 F8 | 	getbyte	local07, local06, #0
1e384     15 2D 0A F2 | 	cmp	local08, local07 wz
1e388     38 00 90 5D |  if_ne	jmp	#LR__3404
1e38c     0C 20 06 F1 | 	add	local02, #12
1e390     10 13 02 FB | 	rdlong	arg01, local02
1e394     0C 20 86 F1 | 	sub	local02, #12
1e398     1C 1E 06 F1 | 	add	local01, #28
1e39c     0F 33 02 FB | 	rdlong	local11, local01
1e3a0     1C 1E 86 F1 | 	sub	local01, #28
1e3a4     19 15 02 F6 | 	mov	arg02, local11
1e3a8     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1e3ac     00 FA 4D F2 | 	cmps	result1, #0 wz
1e3b0     12 33 02 56 |  if_ne	mov	local11, local04
1e3b4     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1e3b8     01 32 86 51 |  if_ne	sub	local11, #1
1e3bc     19 2F 02 56 |  if_ne	mov	local09, local11
1e3c0     04 00 90 5D |  if_ne	jmp	#LR__3405
1e3c4                 | LR__3404
1e3c4     FF 2E 06 F6 | 	mov	local09, #255
1e3c8                 | LR__3405
1e3c8     17 25 02 F6 | 	mov	local04, local09
1e3cc     78 00 90 FD | 	jmp	#LR__3409
1e3d0                 | LR__3406
1e3d0     12 2F 02 F6 | 	mov	local09, local04
1e3d4     07 2E 4E F7 | 	zerox	local09, #7 wz
1e3d8     20 00 90 5D |  if_ne	jmp	#LR__3407
1e3dc     11 31 E2 F8 | 	getbyte	local10, local03, #0
1e3e0     1C 1E 06 F1 | 	add	local01, #28
1e3e4     0F 13 02 FB | 	rdlong	arg01, local01
1e3e8     1C 1E 86 F1 | 	sub	local01, #28
1e3ec     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1e3f0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e3f4     FD 30 0A F2 | 	cmp	local10, result1 wz
1e3f8     60 00 90 AD |  if_e	jmp	#LR__3411
1e3fc                 | LR__3407
1e3fc     2B 1E 06 F1 | 	add	local01, #43
1e400     0F 2F C2 FA | 	rdbyte	local09, local01
1e404     2B 1E 86 F1 | 	sub	local01, #43
1e408     01 2E CE F7 | 	test	local09, #1 wz
1e40c     24 00 90 5D |  if_ne	jmp	#LR__3408
1e410     1C 1E 06 F1 | 	add	local01, #28
1e414     0F 13 02 FB | 	rdlong	arg01, local01
1e418     04 1E 06 F1 | 	add	local01, #4
1e41c     0F 15 02 F6 | 	mov	arg02, local01
1e420     20 1E 86 F1 | 	sub	local01, #32
1e424     0B 16 06 F6 | 	mov	arg03, #11
1e428     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1e42c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e430     28 00 90 AD |  if_e	jmp	#LR__3411
1e434                 | LR__3408
1e434     FF 24 06 F6 | 	mov	local04, #255
1e438     2C 1E 06 F1 | 	add	local01, #44
1e43c     FF FF FF FF 
1e440     0F FF 6B FC | 	wrlong	##-1, local01
1e444     2C 1E 86 F1 | 	sub	local01, #44
1e448                 | LR__3409
1e448                 | LR__3410
1e448     0F 13 02 F6 | 	mov	arg01, local01
1e44c     00 14 06 F6 | 	mov	arg02, #0
1e450     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1e454     FD 26 0A F6 | 	mov	local05, result1 wz
1e458     04 FE 9F AD |  if_e	jmp	#LR__3400
1e45c                 | LR__3411
1e45c                 | ' 
1e45c                 | ' 	return res;
1e45c     13 FB 01 F6 | 	mov	result1, local05
1e460                 | LR__3412
1e460     A7 F0 03 F6 | 	mov	ptra, fp
1e464     B2 00 A0 FD | 	call	#popregs_
1e468                 | _fatfs_cc_dir_find_ret
1e468     2D 00 64 FD | 	ret
1e46c                 | 
1e46c                 | _fatfs_cc_dir_register
1e46c     0A 4A 05 F6 | 	mov	COUNT_, #10
1e470     A8 00 A0 FD | 	call	#pushregs_
1e474     2C F0 07 F1 | 	add	ptra, #44
1e478     04 4E 05 F1 | 	add	fp, #4
1e47c     A7 12 62 FC | 	wrlong	arg01, fp
1e480     09 1F 02 FB | 	rdlong	local01, arg01
1e484     08 4E 05 F1 | 	add	fp, #8
1e488     A7 1E 62 FC | 	wrlong	local01, fp
1e48c     08 4E 85 F1 | 	sub	fp, #8
1e490     A7 20 02 FB | 	rdlong	local02, fp
1e494     04 4E 85 F1 | 	sub	fp, #4
1e498     2B 20 06 F1 | 	add	local02, #43
1e49c     10 21 C2 FA | 	rdbyte	local02, local02
1e4a0     A0 20 CE F7 | 	test	local02, #160 wz
1e4a4     06 FA 05 56 |  if_ne	mov	result1, #6
1e4a8     F8 03 90 5D |  if_ne	jmp	#LR__3435
1e4ac                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1e4ac     14 4E 05 F1 | 	add	fp, #20
1e4b0     A7 00 68 FC | 	wrlong	#0, fp
1e4b4     14 4E 85 F1 | 	sub	fp, #20
1e4b8     97 28 48 FB | 	callpa	#(@LR__3421-@LR__3420)>>2,fcache_load_ptr_
1e4bc                 | LR__3420
1e4bc     0C 4E 05 F1 | 	add	fp, #12
1e4c0     A7 20 02 FB | 	rdlong	local02, fp
1e4c4     0C 20 06 F1 | 	add	local02, #12
1e4c8     10 23 02 FB | 	rdlong	local03, local02
1e4cc     08 4E 05 F1 | 	add	fp, #8
1e4d0     A7 24 02 FB | 	rdlong	local04, fp
1e4d4     14 4E 85 F1 | 	sub	fp, #20
1e4d8     01 24 66 F0 | 	shl	local04, #1
1e4dc     11 25 02 F1 | 	add	local04, local03
1e4e0     12 21 EA FA | 	rdword	local02, local04 wz
1e4e4     24 00 90 AD |  if_e	jmp	#LR__3422
1e4e8     14 4E 05 F1 | 	add	fp, #20
1e4ec     A7 26 02 FB | 	rdlong	local05, fp
1e4f0     13 29 02 F6 | 	mov	local06, local05
1e4f4     13 2B 02 F6 | 	mov	local07, local05
1e4f8     15 2D 02 F6 | 	mov	local08, local07
1e4fc     01 2C 06 F1 | 	add	local08, #1
1e500     A7 2C 62 FC | 	wrlong	local08, fp
1e504     14 4E 85 F1 | 	sub	fp, #20
1e508     B0 FF 9F FD | 	jmp	#LR__3420
1e50c                 | LR__3421
1e50c                 | LR__3422
1e50c     1C 4E 05 F1 | 	add	fp, #28
1e510     A7 12 02 F6 | 	mov	arg01, fp
1e514     18 4E 85 F1 | 	sub	fp, #24
1e518     A7 14 02 FB | 	rdlong	arg02, fp
1e51c     04 4E 85 F1 | 	sub	fp, #4
1e520     20 14 06 F1 | 	add	arg02, #32
1e524     0C 16 06 F6 | 	mov	arg03, #12
1e528     58 75 BF FD | 	call	#__system____builtin_memmove
1e52c     27 4E 05 F1 | 	add	fp, #39
1e530     A7 2E C2 FA | 	rdbyte	local09, fp
1e534     27 4E 85 F1 | 	sub	fp, #39
1e538     01 2E CE F7 | 	test	local09, #1 wz
1e53c     F4 00 90 AD |  if_e	jmp	#LR__3425
1e540     04 4E 05 F1 | 	add	fp, #4
1e544     A7 30 02 FB | 	rdlong	local10, fp
1e548     2B 30 06 F1 | 	add	local10, #43
1e54c     18 81 48 FC | 	wrbyte	#64, local10
1e550                 | ' 		dp->fn[ 11 ] =  0x40 ;
1e550                 | ' 		for (n = 1; n < 100; n++) {
1e550     0C 4E 05 F1 | 	add	fp, #12
1e554     A7 02 68 FC | 	wrlong	#1, fp
1e558     10 4E 85 F1 | 	sub	fp, #16
1e55c                 | LR__3423
1e55c     10 4E 05 F1 | 	add	fp, #16
1e560     A7 20 02 FB | 	rdlong	local02, fp
1e564     10 4E 85 F1 | 	sub	fp, #16
1e568     64 20 16 F2 | 	cmp	local02, #100 wc
1e56c     70 00 90 3D |  if_ae	jmp	#LR__3424
1e570     04 4E 05 F1 | 	add	fp, #4
1e574     A7 12 02 FB | 	rdlong	arg01, fp
1e578     20 12 06 F1 | 	add	arg01, #32
1e57c     18 4E 05 F1 | 	add	fp, #24
1e580     A7 14 02 F6 | 	mov	arg02, fp
1e584     10 4E 85 F1 | 	sub	fp, #16
1e588     A7 30 02 FB | 	rdlong	local10, fp
1e58c     0C 30 06 F1 | 	add	local10, #12
1e590     18 17 02 FB | 	rdlong	arg03, local10
1e594     04 4E 05 F1 | 	add	fp, #4
1e598     A7 18 02 FB | 	rdlong	arg04, fp
1e59c     10 4E 85 F1 | 	sub	fp, #16
1e5a0     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1e5a4     04 4E 05 F1 | 	add	fp, #4
1e5a8     A7 12 02 FB | 	rdlong	arg01, fp
1e5ac     04 4E 85 F1 | 	sub	fp, #4
1e5b0     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1e5b4     08 4E 05 F1 | 	add	fp, #8
1e5b8     A7 FA 61 FC | 	wrlong	result1, fp
1e5bc     00 FA 4D F2 | 	cmps	result1, #0 wz
1e5c0     08 4E 85 F1 | 	sub	fp, #8
1e5c4     18 00 90 5D |  if_ne	jmp	#LR__3424
1e5c8     10 4E 05 F1 | 	add	fp, #16
1e5cc     A7 30 02 FB | 	rdlong	local10, fp
1e5d0     01 30 06 F1 | 	add	local10, #1
1e5d4     A7 30 62 FC | 	wrlong	local10, fp
1e5d8     10 4E 85 F1 | 	sub	fp, #16
1e5dc     7C FF 9F FD | 	jmp	#LR__3423
1e5e0                 | LR__3424
1e5e0     10 4E 05 F1 | 	add	fp, #16
1e5e4     A7 30 02 FB | 	rdlong	local10, fp
1e5e8     10 4E 85 F1 | 	sub	fp, #16
1e5ec     64 30 0E F2 | 	cmp	local10, #100 wz
1e5f0     07 FA 05 A6 |  if_e	mov	result1, #7
1e5f4     AC 02 90 AD |  if_e	jmp	#LR__3435
1e5f8     08 4E 05 F1 | 	add	fp, #8
1e5fc     A7 30 02 FB | 	rdlong	local10, fp
1e600     08 4E 85 F1 | 	sub	fp, #8
1e604     04 30 0E F2 | 	cmp	local10, #4 wz
1e608     08 4E 05 51 |  if_ne	add	fp, #8
1e60c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1e610     08 4E 85 51 |  if_ne	sub	fp, #8
1e614     8C 02 90 5D |  if_ne	jmp	#LR__3435
1e618     04 4E 05 F1 | 	add	fp, #4
1e61c     A7 30 02 FB | 	rdlong	local10, fp
1e620     23 4E 05 F1 | 	add	fp, #35
1e624     A7 1E C2 FA | 	rdbyte	local01, fp
1e628     27 4E 85 F1 | 	sub	fp, #39
1e62c     2B 30 06 F1 | 	add	local10, #43
1e630     18 1F 42 FC | 	wrbyte	local01, local10
1e634                 | LR__3425
1e634     27 4E 05 F1 | 	add	fp, #39
1e638     A7 20 C2 FA | 	rdbyte	local02, fp
1e63c     27 4E 85 F1 | 	sub	fp, #39
1e640     02 20 CE F7 | 	test	local02, #2 wz
1e644     20 00 90 AD |  if_e	jmp	#LR__3426
1e648     14 4E 05 F1 | 	add	fp, #20
1e64c     A7 30 02 FB | 	rdlong	local10, fp
1e650     0C 30 06 F1 | 	add	local10, #12
1e654     0D 30 16 FD | 	qdiv	local10, #13
1e658     14 4E 85 F1 | 	sub	fp, #20
1e65c     18 30 62 FD | 	getqx	local10
1e660     01 30 06 F1 | 	add	local10, #1
1e664     04 00 90 FD | 	jmp	#LR__3427
1e668                 | LR__3426
1e668     01 30 06 F6 | 	mov	local10, #1
1e66c                 | LR__3427
1e66c     18 4E 05 F1 | 	add	fp, #24
1e670     A7 30 62 FC | 	wrlong	local10, fp
1e674     14 4E 85 F1 | 	sub	fp, #20
1e678     A7 12 02 FB | 	rdlong	arg01, fp
1e67c     18 15 02 F6 | 	mov	arg02, local10
1e680     04 4E 85 F1 | 	sub	fp, #4
1e684     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1e688     08 4E 05 F1 | 	add	fp, #8
1e68c     A7 FA 61 FC | 	wrlong	result1, fp
1e690     08 4E 85 F1 | 	sub	fp, #8
1e694     00 FA 0D F2 | 	cmp	result1, #0 wz
1e698     38 01 90 5D |  if_ne	jmp	#LR__3432
1e69c     18 4E 05 F1 | 	add	fp, #24
1e6a0     A7 30 02 FB | 	rdlong	local10, fp
1e6a4     01 30 8E F1 | 	sub	local10, #1 wz
1e6a8     A7 30 62 FC | 	wrlong	local10, fp
1e6ac     18 4E 85 F1 | 	sub	fp, #24
1e6b0     20 01 90 AD |  if_e	jmp	#LR__3432
1e6b4     04 4E 05 F1 | 	add	fp, #4
1e6b8     A7 30 02 FB | 	rdlong	local10, fp
1e6bc     18 13 02 F6 | 	mov	arg01, local10
1e6c0     14 4E 05 F1 | 	add	fp, #20
1e6c4     A7 18 02 FB | 	rdlong	arg04, fp
1e6c8     18 4E 85 F1 | 	sub	fp, #24
1e6cc     05 18 66 F0 | 	shl	arg04, #5
1e6d0     10 30 06 F1 | 	add	local10, #16
1e6d4     18 15 02 FB | 	rdlong	arg02, local10
1e6d8     0C 15 82 F1 | 	sub	arg02, arg04
1e6dc     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1e6e0     08 4E 05 F1 | 	add	fp, #8
1e6e4     A7 FA 61 FC | 	wrlong	result1, fp
1e6e8     08 4E 85 F1 | 	sub	fp, #8
1e6ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1e6f0     E0 00 90 5D |  if_ne	jmp	#LR__3431
1e6f4     04 4E 05 F1 | 	add	fp, #4
1e6f8     A7 12 02 FB | 	rdlong	arg01, fp
1e6fc     04 4E 85 F1 | 	sub	fp, #4
1e700     20 12 06 F1 | 	add	arg01, #32
1e704     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1e708     FD 30 02 F6 | 	mov	local10, result1
1e70c     28 4E 05 F1 | 	add	fp, #40
1e710     A7 30 42 FC | 	wrbyte	local10, fp
1e714     28 4E 85 F1 | 	sub	fp, #40
1e718                 | ' 			sum = sum_sfn(dp->fn);
1e718                 | ' 			do {
1e718                 | LR__3428
1e718     0C 4E 05 F1 | 	add	fp, #12
1e71c     A7 12 02 FB | 	rdlong	arg01, fp
1e720     08 4E 85 F1 | 	sub	fp, #8
1e724     A7 1E 02 FB | 	rdlong	local01, fp
1e728     04 4E 85 F1 | 	sub	fp, #4
1e72c     18 1E 06 F1 | 	add	local01, #24
1e730     0F 15 02 FB | 	rdlong	arg02, local01
1e734     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1e738     08 4E 05 F1 | 	add	fp, #8
1e73c     A7 FA 61 FC | 	wrlong	result1, fp
1e740     00 FA 4D F2 | 	cmps	result1, #0 wz
1e744     08 4E 85 F1 | 	sub	fp, #8
1e748     88 00 90 5D |  if_ne	jmp	#LR__3430
1e74c     0C 4E 05 F1 | 	add	fp, #12
1e750     A7 20 02 FB | 	rdlong	local02, fp
1e754     0C 20 06 F1 | 	add	local02, #12
1e758     10 13 02 FB | 	rdlong	arg01, local02
1e75c     08 4E 85 F1 | 	sub	fp, #8
1e760     A7 1E 02 FB | 	rdlong	local01, fp
1e764     1C 1E 06 F1 | 	add	local01, #28
1e768     0F 15 02 FB | 	rdlong	arg02, local01
1e76c     14 4E 05 F1 | 	add	fp, #20
1e770     A7 16 02 FB | 	rdlong	arg03, fp
1e774     10 4E 05 F1 | 	add	fp, #16
1e778     A7 18 C2 FA | 	rdbyte	arg04, fp
1e77c     28 4E 85 F1 | 	sub	fp, #40
1e780     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1e784     0C 4E 05 F1 | 	add	fp, #12
1e788     A7 30 02 FB | 	rdlong	local10, fp
1e78c     03 30 06 F1 | 	add	local10, #3
1e790     18 03 48 FC | 	wrbyte	#1, local10
1e794     08 4E 85 F1 | 	sub	fp, #8
1e798     A7 12 02 FB | 	rdlong	arg01, fp
1e79c     04 4E 85 F1 | 	sub	fp, #4
1e7a0     00 14 06 F6 | 	mov	arg02, #0
1e7a4     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1e7a8     08 4E 05 F1 | 	add	fp, #8
1e7ac     A7 FA 61 FC | 	wrlong	result1, fp
1e7b0     00 FA 4D F2 | 	cmps	result1, #0 wz
1e7b4     08 4E 85 F1 | 	sub	fp, #8
1e7b8     18 00 90 5D |  if_ne	jmp	#LR__3429
1e7bc     18 4E 05 F1 | 	add	fp, #24
1e7c0     A7 30 02 FB | 	rdlong	local10, fp
1e7c4     01 30 8E F1 | 	sub	local10, #1 wz
1e7c8     A7 30 62 FC | 	wrlong	local10, fp
1e7cc     18 4E 85 F1 | 	sub	fp, #24
1e7d0     44 FF 9F 5D |  if_ne	jmp	#LR__3428
1e7d4                 | LR__3429
1e7d4                 | LR__3430
1e7d4                 | LR__3431
1e7d4                 | LR__3432
1e7d4     08 4E 05 F1 | 	add	fp, #8
1e7d8     A7 30 0A FB | 	rdlong	local10, fp wz
1e7dc     08 4E 85 F1 | 	sub	fp, #8
1e7e0     B4 00 90 5D |  if_ne	jmp	#LR__3434
1e7e4     0C 4E 05 F1 | 	add	fp, #12
1e7e8     A7 12 02 FB | 	rdlong	arg01, fp
1e7ec     08 4E 85 F1 | 	sub	fp, #8
1e7f0     A7 1E 02 FB | 	rdlong	local01, fp
1e7f4     04 4E 85 F1 | 	sub	fp, #4
1e7f8     18 1E 06 F1 | 	add	local01, #24
1e7fc     0F 15 02 FB | 	rdlong	arg02, local01
1e800     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1e804     08 4E 05 F1 | 	add	fp, #8
1e808     A7 FA 61 FC | 	wrlong	result1, fp
1e80c     08 4E 85 F1 | 	sub	fp, #8
1e810     00 FA 0D F2 | 	cmp	result1, #0 wz
1e814     80 00 90 5D |  if_ne	jmp	#LR__3433
1e818     04 4E 05 F1 | 	add	fp, #4
1e81c     A7 20 02 FB | 	rdlong	local02, fp
1e820     04 4E 85 F1 | 	sub	fp, #4
1e824     1C 20 06 F1 | 	add	local02, #28
1e828     10 13 02 FB | 	rdlong	arg01, local02
1e82c     00 14 06 F6 | 	mov	arg02, #0
1e830     20 16 06 F6 | 	mov	arg03, #32
1e834     98 00 A0 FD | 	call	#\builtin_bytefill_
1e838     04 4E 05 F1 | 	add	fp, #4
1e83c     A7 14 02 FB | 	rdlong	arg02, fp
1e840     0A 1F 02 F6 | 	mov	local01, arg02
1e844     1C 1E 06 F1 | 	add	local01, #28
1e848     0F 13 02 FB | 	rdlong	arg01, local01
1e84c     04 4E 85 F1 | 	sub	fp, #4
1e850     20 14 06 F1 | 	add	arg02, #32
1e854     0B 16 06 F6 | 	mov	arg03, #11
1e858     28 72 BF FD | 	call	#__system____builtin_memmove
1e85c     04 4E 05 F1 | 	add	fp, #4
1e860     A7 2E 02 FB | 	rdlong	local09, fp
1e864     17 31 02 F6 | 	mov	local10, local09
1e868     1C 30 06 F1 | 	add	local10, #28
1e86c     18 1F 02 FB | 	rdlong	local01, local10
1e870     2B 2E 06 F1 | 	add	local09, #43
1e874     17 31 C2 FA | 	rdbyte	local10, local09
1e878     18 30 06 F5 | 	and	local10, #24
1e87c     0C 1E 06 F1 | 	add	local01, #12
1e880     0F 31 42 FC | 	wrbyte	local10, local01
1e884     08 4E 05 F1 | 	add	fp, #8
1e888     A7 30 02 FB | 	rdlong	local10, fp
1e88c     0C 4E 85 F1 | 	sub	fp, #12
1e890     03 30 06 F1 | 	add	local10, #3
1e894     18 03 48 FC | 	wrbyte	#1, local10
1e898                 | LR__3433
1e898                 | LR__3434
1e898                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1e898                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1e898                 | ' 
1e898                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1e898                 | ' 
1e898                 | ' 			fs->wflag = 1;
1e898                 | ' 		}
1e898                 | ' 	}
1e898                 | ' 
1e898                 | ' 	return res;
1e898     08 4E 05 F1 | 	add	fp, #8
1e89c     A7 FA 01 FB | 	rdlong	result1, fp
1e8a0     08 4E 85 F1 | 	sub	fp, #8
1e8a4                 | LR__3435
1e8a4     A7 F0 03 F6 | 	mov	ptra, fp
1e8a8     B2 00 A0 FD | 	call	#popregs_
1e8ac                 | _fatfs_cc_dir_register_ret
1e8ac     2D 00 64 FD | 	ret
1e8b0                 | 
1e8b0                 | _fatfs_cc_dir_remove
1e8b0     05 4A 05 F6 | 	mov	COUNT_, #5
1e8b4     A8 00 A0 FD | 	call	#pushregs_
1e8b8     09 1F 02 F6 | 	mov	local01, arg01
1e8bc     0F 21 02 FB | 	rdlong	local02, local01
1e8c0     10 1E 06 F1 | 	add	local01, #16
1e8c4     0F 23 02 FB | 	rdlong	local03, local01
1e8c8     1C 1E 06 F1 | 	add	local01, #28
1e8cc     0F 15 02 FB | 	rdlong	arg02, local01
1e8d0     2C 1E 86 F1 | 	sub	local01, #44
1e8d4     FF FF 7F FF 
1e8d8     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1e8dc     00 24 06 A6 |  if_e	mov	local04, #0
1e8e0     18 00 90 AD |  if_e	jmp	#LR__3440
1e8e4     0F 13 02 F6 | 	mov	arg01, local01
1e8e8     2C 1E 06 F1 | 	add	local01, #44
1e8ec     0F 15 02 FB | 	rdlong	arg02, local01
1e8f0     2C 1E 86 F1 | 	sub	local01, #44
1e8f4     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1e8f8     FD 24 02 F6 | 	mov	local04, result1
1e8fc                 | LR__3440
1e8fc     12 27 0A F6 | 	mov	local05, local04 wz
1e900     64 00 90 5D |  if_ne	jmp	#LR__3443
1e904                 | ' 		do {
1e904                 | LR__3441
1e904     18 1E 06 F1 | 	add	local01, #24
1e908     0F 15 02 FB | 	rdlong	arg02, local01
1e90c     18 1E 86 F1 | 	sub	local01, #24
1e910     10 13 02 F6 | 	mov	arg01, local02
1e914     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1e918     FD 26 0A F6 | 	mov	local05, result1 wz
1e91c     40 00 90 5D |  if_ne	jmp	#LR__3442
1e920     1C 1E 06 F1 | 	add	local01, #28
1e924     0F 25 02 FB | 	rdlong	local04, local01
1e928     12 CB 49 FC | 	wrbyte	#229, local04
1e92c     03 20 06 F1 | 	add	local02, #3
1e930     10 03 48 FC | 	wrbyte	#1, local02
1e934     03 20 86 F1 | 	sub	local02, #3
1e938     0C 1E 86 F1 | 	sub	local01, #12
1e93c     0F 25 02 FB | 	rdlong	local04, local01
1e940     10 1E 86 F1 | 	sub	local01, #16
1e944     11 25 12 F2 | 	cmp	local04, local03 wc
1e948     14 00 90 3D |  if_ae	jmp	#LR__3442
1e94c     0F 13 02 F6 | 	mov	arg01, local01
1e950     00 14 06 F6 | 	mov	arg02, #0
1e954     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1e958     FD 26 0A F6 | 	mov	local05, result1 wz
1e95c     A4 FF 9F AD |  if_e	jmp	#LR__3441
1e960                 | LR__3442
1e960     04 26 0E F2 | 	cmp	local05, #4 wz
1e964     02 26 06 A6 |  if_e	mov	local05, #2
1e968                 | LR__3443
1e968                 | ' 	}
1e968                 | ' #line 2590 "ff.c"
1e968                 | ' 	return res;
1e968     13 FB 01 F6 | 	mov	result1, local05
1e96c     A7 F0 03 F6 | 	mov	ptra, fp
1e970     B2 00 A0 FD | 	call	#popregs_
1e974                 | _fatfs_cc_dir_remove_ret
1e974     2D 00 64 FD | 	ret
1e978                 | 
1e978                 | _fatfs_cc_get_fileinfo
1e978     0F 4A 05 F6 | 	mov	COUNT_, #15
1e97c     A8 00 A0 FD | 	call	#pushregs_
1e980     09 1F 02 F6 | 	mov	local01, arg01
1e984     0A 21 02 F6 | 	mov	local02, arg02
1e988     0F 23 02 FB | 	rdlong	local03, local01
1e98c     1C 20 06 F1 | 	add	local02, #28
1e990     10 01 48 FC | 	wrbyte	#0, local02
1e994     1C 20 86 F1 | 	sub	local02, #28
1e998     18 1E 06 F1 | 	add	local01, #24
1e99c     0F 25 0A FB | 	rdlong	local04, local01 wz
1e9a0     18 1E 86 F1 | 	sub	local01, #24
1e9a4     90 03 90 AD |  if_e	jmp	#LR__3464
1e9a8     2C 1E 06 F1 | 	add	local01, #44
1e9ac     0F 25 02 FB | 	rdlong	local04, local01
1e9b0     2C 1E 86 F1 | 	sub	local01, #44
1e9b4     FF FF 7F FF 
1e9b8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1e9bc     D8 00 90 AD |  if_e	jmp	#LR__3453
1e9c0     00 26 06 F6 | 	mov	local05, #0
1e9c4     00 28 06 F6 | 	mov	local06, #0
1e9c8     00 2A 06 F6 | 	mov	local07, #0
1e9cc                 | ' 			si = di = 0;
1e9cc                 | ' 			hs = 0;
1e9cc                 | ' 			while (fs->lfnbuf[si] != 0) {
1e9cc                 | LR__3450
1e9cc     0C 22 06 F1 | 	add	local03, #12
1e9d0     11 25 02 FB | 	rdlong	local04, local03
1e9d4     0C 22 86 F1 | 	sub	local03, #12
1e9d8     14 2D 02 F6 | 	mov	local08, local06
1e9dc     01 2C 66 F0 | 	shl	local08, #1
1e9e0     12 2D 02 F1 | 	add	local08, local04
1e9e4     16 25 EA FA | 	rdword	local04, local08 wz
1e9e8     90 00 90 AD |  if_e	jmp	#LR__3452
1e9ec     0C 22 06 F1 | 	add	local03, #12
1e9f0     11 2F 02 FB | 	rdlong	local09, local03
1e9f4     0C 22 86 F1 | 	sub	local03, #12
1e9f8     14 31 02 F6 | 	mov	local10, local06
1e9fc     01 30 66 F0 | 	shl	local10, #1
1ea00     17 31 02 F1 | 	add	local10, local09
1ea04     18 33 E2 FA | 	rdword	local11, local10
1ea08     15 25 02 F6 | 	mov	local04, local07
1ea0c     0F 24 4E F7 | 	zerox	local04, #15 wz
1ea10     01 28 06 F1 | 	add	local06, #1
1ea14     24 00 90 5D |  if_ne	jmp	#LR__3451
1ea18     19 35 32 F9 | 	getword	local12, local11, #0
1ea1c     6C 00 00 FF 
1ea20     00 34 16 F2 | 	cmp	local12, ##55296 wc
1ea24     14 00 90 CD |  if_b	jmp	#LR__3451
1ea28     19 37 32 F9 | 	getword	local13, local11, #0
1ea2c     70 00 00 FF 
1ea30     00 36 16 F2 | 	cmp	local13, ##57344 wc
1ea34     19 2B 02 C6 |  if_b	mov	local07, local11
1ea38                 | ' 					hs = wc; continue;
1ea38     90 FF 9F CD |  if_b	jmp	#LR__3450
1ea3c                 | LR__3451
1ea3c     15 13 32 F9 | 	getword	arg01, local07, #0
1ea40     10 12 66 F0 | 	shl	arg01, #16
1ea44     19 33 32 F9 | 	getword	local11, local11, #0
1ea48     19 13 42 F5 | 	or	arg01, local11
1ea4c     13 15 02 F6 | 	mov	arg02, local05
1ea50     1C 20 06 F1 | 	add	local02, #28
1ea54     10 15 02 F1 | 	add	arg02, local02
1ea58     FF 16 06 F6 | 	mov	arg03, #255
1ea5c     13 17 82 F1 | 	sub	arg03, local05
1ea60     1C 20 86 F1 | 	sub	local02, #28
1ea64     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1ea68     FD 38 0A F6 | 	mov	local14, result1 wz
1ea6c     00 26 06 A6 |  if_e	mov	local05, #0
1ea70     1C 27 02 51 |  if_ne	add	local05, local14
1ea74     00 2A 06 56 |  if_ne	mov	local07, #0
1ea78     50 FF 9F 5D |  if_ne	jmp	#LR__3450
1ea7c                 | LR__3452
1ea7c     15 25 02 F6 | 	mov	local04, local07
1ea80     0F 24 4E F7 | 	zerox	local04, #15 wz
1ea84     00 26 06 56 |  if_ne	mov	local05, #0
1ea88     1C 20 06 F1 | 	add	local02, #28
1ea8c     10 27 02 F1 | 	add	local05, local02
1ea90     13 01 48 FC | 	wrbyte	#0, local05
1ea94     1C 20 86 F1 | 	sub	local02, #28
1ea98                 | LR__3453
1ea98     00 26 06 F6 | 	mov	local05, #0
1ea9c     00 28 06 F6 | 	mov	local06, #0
1eaa0                 | ' 			fno->fname[di] = 0;
1eaa0                 | ' 		}
1eaa0                 | ' 	}
1eaa0                 | ' 
1eaa0                 | ' 	si = di = 0;
1eaa0                 | ' 	while (si < 11) {
1eaa0                 | LR__3454
1eaa0     0B 28 16 F2 | 	cmp	local06, #11 wc
1eaa4     20 01 90 3D |  if_ae	jmp	#LR__3457
1eaa8     1C 1E 06 F1 | 	add	local01, #28
1eaac     0F 2F 02 FB | 	rdlong	local09, local01
1eab0     1C 1E 86 F1 | 	sub	local01, #28
1eab4     14 31 02 F6 | 	mov	local10, local06
1eab8     17 31 02 F1 | 	add	local10, local09
1eabc     18 33 C2 FA | 	rdbyte	local11, local10
1eac0     19 25 32 F9 | 	getword	local04, local11, #0
1eac4     20 24 0E F2 | 	cmp	local04, #32 wz
1eac8     01 28 06 F1 | 	add	local06, #1
1eacc     D0 FF 9F AD |  if_e	jmp	#LR__3454
1ead0     19 25 32 F9 | 	getword	local04, local11, #0
1ead4     05 24 0E F2 | 	cmp	local04, #5 wz
1ead8     E5 32 06 A6 |  if_e	mov	local11, #229
1eadc     09 28 0E F2 | 	cmp	local06, #9 wz
1eae0     20 00 90 5D |  if_ne	jmp	#LR__3455
1eae4     0C 26 16 F2 | 	cmp	local05, #12 wc
1eae8     18 00 90 3D |  if_ae	jmp	#LR__3455
1eaec     13 37 02 F6 | 	mov	local13, local05
1eaf0     0C 20 06 F1 | 	add	local02, #12
1eaf4     10 37 02 F1 | 	add	local13, local02
1eaf8     1B 5D 48 FC | 	wrbyte	#46, local13
1eafc     01 26 06 F1 | 	add	local05, #1
1eb00     0C 20 86 F1 | 	sub	local02, #12
1eb04                 | LR__3455
1eb04     19 13 32 F9 | 	getword	arg01, local11, #0
1eb08     07 12 4E F7 | 	zerox	arg01, #7 wz
1eb0c     00 FA 05 56 |  if_ne	mov	result1, #0
1eb10                 | ' 
1eb10                 | ' 	return 0;
1eb10     00 FA 05 A6 |  if_e	mov	result1, #0
1eb14     00 FA 0D F2 | 	cmp	result1, #0 wz
1eb18     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1eb1c     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1eb20     50 00 90 AD |  if_e	jmp	#LR__3456
1eb24     1C 1E 06 F1 | 	add	local01, #28
1eb28     0F 31 02 FB | 	rdlong	local10, local01
1eb2c     1C 1E 86 F1 | 	sub	local01, #28
1eb30     14 2D 02 F6 | 	mov	local08, local06
1eb34     18 2D 02 F1 | 	add	local08, local10
1eb38     16 13 CA FA | 	rdbyte	arg01, local08 wz
1eb3c     00 FA 05 56 |  if_ne	mov	result1, #0
1eb40                 | ' 
1eb40                 | ' 	return 0;
1eb40     00 FA 05 A6 |  if_e	mov	result1, #0
1eb44     00 FA 0D F2 | 	cmp	result1, #0 wz
1eb48     28 00 90 AD |  if_e	jmp	#LR__3456
1eb4c     19 33 32 F9 | 	getword	local11, local11, #0
1eb50     08 32 66 F0 | 	shl	local11, #8
1eb54     1C 1E 06 F1 | 	add	local01, #28
1eb58     0F 39 02 FB | 	rdlong	local14, local01
1eb5c     1C 1E 86 F1 | 	sub	local01, #28
1eb60     14 2F 02 F6 | 	mov	local09, local06
1eb64     1C 2F 02 F1 | 	add	local09, local14
1eb68     17 35 C2 FA | 	rdbyte	local12, local09
1eb6c     1A 33 42 F5 | 	or	local11, local12
1eb70     01 28 06 F1 | 	add	local06, #1
1eb74                 | LR__3456
1eb74     19 13 02 F6 | 	mov	arg01, local11
1eb78     01 00 00 FF 
1eb7c     52 15 06 F6 | 	mov	arg02, ##850
1eb80     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1eb84     FD 32 02 F6 | 	mov	local11, result1
1eb88     19 25 02 F6 | 	mov	local04, local11
1eb8c     0F 24 4E F7 | 	zerox	local04, #15 wz
1eb90     00 26 06 A6 |  if_e	mov	local05, #0
1eb94     30 00 90 AD |  if_e	jmp	#LR__3457
1eb98     19 13 32 F9 | 	getword	arg01, local11, #0
1eb9c     13 15 02 F6 | 	mov	arg02, local05
1eba0     0C 20 06 F1 | 	add	local02, #12
1eba4     10 15 02 F1 | 	add	arg02, local02
1eba8     0C 16 06 F6 | 	mov	arg03, #12
1ebac     13 17 82 F1 | 	sub	arg03, local05
1ebb0     0C 20 86 F1 | 	sub	local02, #12
1ebb4     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1ebb8     FD 38 0A F6 | 	mov	local14, result1 wz
1ebbc     00 26 06 A6 |  if_e	mov	local05, #0
1ebc0     1C 27 02 51 |  if_ne	add	local05, local14
1ebc4     D8 FE 9F 5D |  if_ne	jmp	#LR__3454
1ebc8                 | LR__3457
1ebc8     13 25 02 F6 | 	mov	local04, local05
1ebcc     0C 20 06 F1 | 	add	local02, #12
1ebd0     10 25 02 F1 | 	add	local04, local02
1ebd4     12 01 48 FC | 	wrbyte	#0, local04
1ebd8     10 20 06 F1 | 	add	local02, #16
1ebdc     10 25 CA FA | 	rdbyte	local04, local02 wz
1ebe0     1C 20 86 F1 | 	sub	local02, #28
1ebe4     F8 00 90 5D |  if_ne	jmp	#LR__3463
1ebe8     00 26 0E F2 | 	cmp	local05, #0 wz
1ebec     1C 00 90 5D |  if_ne	jmp	#LR__3458
1ebf0     13 37 02 F6 | 	mov	local13, local05
1ebf4     1C 20 06 F1 | 	add	local02, #28
1ebf8     10 37 02 F1 | 	add	local13, local02
1ebfc     1B 7F 48 FC | 	wrbyte	#63, local13
1ec00     01 26 06 F1 | 	add	local05, #1
1ec04     1C 20 86 F1 | 	sub	local02, #28
1ec08     A4 00 90 FD | 	jmp	#LR__3462
1ec0c                 | LR__3458
1ec0c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1ec0c     00 26 06 F6 | 	mov	local05, #0
1ec10     00 28 06 F6 | 	mov	local06, #0
1ec14     08 3A 06 F6 | 	mov	local15, #8
1ec18                 | LR__3459
1ec18     14 25 02 F6 | 	mov	local04, local06
1ec1c     0C 20 06 F1 | 	add	local02, #12
1ec20     10 25 02 F1 | 	add	local04, local02
1ec24     12 37 CA FA | 	rdbyte	local13, local04 wz
1ec28     0C 20 86 F1 | 	sub	local02, #12
1ec2c     80 00 90 AD |  if_e	jmp	#LR__3461
1ec30     14 2D 02 F6 | 	mov	local08, local06
1ec34     0C 20 06 F1 | 	add	local02, #12
1ec38     10 2D 02 F1 | 	add	local08, local02
1ec3c     16 33 C2 FA | 	rdbyte	local11, local08
1ec40     19 39 32 F9 | 	getword	local14, local11, #0
1ec44     2E 38 0E F2 | 	cmp	local14, #46 wz
1ec48     0C 20 86 F1 | 	sub	local02, #12
1ec4c     10 3A 06 A6 |  if_e	mov	local15, #16
1ec50     19 39 32 F9 | 	getword	local14, local11, #0
1ec54     41 38 16 F2 | 	cmp	local14, #65 wc
1ec58     30 00 90 CD |  if_b	jmp	#LR__3460
1ec5c     19 2D 32 F9 | 	getword	local08, local11, #0
1ec60     5B 2C 16 F2 | 	cmp	local08, #91 wc
1ec64     24 00 90 3D |  if_ae	jmp	#LR__3460
1ec68     1C 1E 06 F1 | 	add	local01, #28
1ec6c     0F 2F 02 FB | 	rdlong	local09, local01
1ec70     1C 1E 86 F1 | 	sub	local01, #28
1ec74     0C 2E 06 F1 | 	add	local09, #12
1ec78     17 31 C2 FA | 	rdbyte	local10, local09
1ec7c     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1ec80     1C 31 CA F7 | 	test	local10, local14 wz
1ec84     19 33 32 59 |  if_ne	getword	local11, local11, #0
1ec88     20 32 06 51 |  if_ne	add	local11, #32
1ec8c                 | LR__3460
1ec8c     13 39 02 F6 | 	mov	local14, local05
1ec90     1C 20 06 F1 | 	add	local02, #28
1ec94     10 39 02 F1 | 	add	local14, local02
1ec98     19 33 32 F9 | 	getword	local11, local11, #0
1ec9c     1C 33 42 FC | 	wrbyte	local11, local14
1eca0     01 28 06 F1 | 	add	local06, #1
1eca4     01 26 06 F1 | 	add	local05, #1
1eca8     1C 20 86 F1 | 	sub	local02, #28
1ecac     68 FF 9F FD | 	jmp	#LR__3459
1ecb0                 | LR__3461
1ecb0                 | LR__3462
1ecb0     1C 20 06 F1 | 	add	local02, #28
1ecb4     10 27 02 F1 | 	add	local05, local02
1ecb8     13 01 48 FC | 	wrbyte	#0, local05
1ecbc     1C 1E 06 F1 | 	add	local01, #28
1ecc0     0F 25 02 FB | 	rdlong	local04, local01
1ecc4     1C 1E 86 F1 | 	sub	local01, #28
1ecc8     0C 24 06 F1 | 	add	local04, #12
1eccc     12 37 CA FA | 	rdbyte	local13, local04 wz
1ecd0     1C 20 86 F1 | 	sub	local02, #28
1ecd4     0C 20 06 A1 |  if_e	add	local02, #12
1ecd8     10 01 48 AC |  if_e	wrbyte	#0, local02
1ecdc     0C 20 86 A1 |  if_e	sub	local02, #12
1ece0                 | LR__3463
1ece0     1C 1E 06 F1 | 	add	local01, #28
1ece4     0F 35 02 FB | 	rdlong	local12, local01
1ece8     0B 34 06 F1 | 	add	local12, #11
1ecec     1A 25 C2 FA | 	rdbyte	local04, local12
1ecf0     3F 24 06 F5 | 	and	local04, #63
1ecf4     08 20 06 F1 | 	add	local02, #8
1ecf8     10 25 42 FC | 	wrbyte	local04, local02
1ecfc     08 20 86 F1 | 	sub	local02, #8
1ed00     0F 13 02 FB | 	rdlong	arg01, local01
1ed04     1C 12 06 F1 | 	add	arg01, #28
1ed08                 | ' {
1ed08                 | ' 
1ed08                 | ' 	return *((DWORD*)ptr);
1ed08     09 FB 01 FB | 	rdlong	result1, arg01
1ed0c     10 FB 61 FC | 	wrlong	result1, local02
1ed10     0F 13 02 FB | 	rdlong	arg01, local01
1ed14     16 12 06 F1 | 	add	arg01, #22
1ed18                 | ' {
1ed18                 | ' 
1ed18                 | ' 	return *((WORD*)ptr);
1ed18     09 FB E1 FA | 	rdword	result1, arg01
1ed1c     06 20 06 F1 | 	add	local02, #6
1ed20     10 FB 51 FC | 	wrword	result1, local02
1ed24     0F 13 02 FB | 	rdlong	arg01, local01
1ed28     18 12 06 F1 | 	add	arg01, #24
1ed2c                 | ' {
1ed2c                 | ' 
1ed2c                 | ' 	return *((WORD*)ptr);
1ed2c     09 FB E1 FA | 	rdword	result1, arg01
1ed30     02 20 86 F1 | 	sub	local02, #2
1ed34     10 FB 51 FC | 	wrword	result1, local02
1ed38                 | LR__3464
1ed38     A7 F0 03 F6 | 	mov	ptra, fp
1ed3c     B2 00 A0 FD | 	call	#popregs_
1ed40                 | _fatfs_cc_get_fileinfo_ret
1ed40     2D 00 64 FD | 	ret
1ed44                 | 
1ed44                 | _fatfs_cc_create_name
1ed44     0D 4A 05 F6 | 	mov	COUNT_, #13
1ed48     A8 00 A0 FD | 	call	#pushregs_
1ed4c     34 F0 07 F1 | 	add	ptra, #52
1ed50     04 4E 05 F1 | 	add	fp, #4
1ed54     A7 12 62 FC | 	wrlong	arg01, fp
1ed58     04 4E 05 F1 | 	add	fp, #4
1ed5c     A7 14 62 FC | 	wrlong	arg02, fp
1ed60     0A FB 01 FB | 	rdlong	result1, arg02
1ed64     28 4E 05 F1 | 	add	fp, #40
1ed68     A7 FA 61 FC | 	wrlong	result1, fp
1ed6c     2C 4E 85 F1 | 	sub	fp, #44
1ed70     A7 FA 01 FB | 	rdlong	result1, fp
1ed74     FD 1E 02 FB | 	rdlong	local01, result1
1ed78     0C 1E 06 F1 | 	add	local01, #12
1ed7c     0F 21 02 FB | 	rdlong	local02, local01
1ed80     14 4E 05 F1 | 	add	fp, #20
1ed84     A7 20 62 FC | 	wrlong	local02, fp
1ed88     14 4E 05 F1 | 	add	fp, #20
1ed8c     A7 00 68 FC | 	wrlong	#0, fp
1ed90     2C 4E 85 F1 | 	sub	fp, #44
1ed94                 | ' 
1ed94                 | ' 
1ed94                 | ' 
1ed94                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1ed94                 | ' 	for (;;) {
1ed94                 | LR__3470
1ed94     30 4E 05 F1 | 	add	fp, #48
1ed98     A7 12 02 F6 | 	mov	arg01, fp
1ed9c     30 4E 85 F1 | 	sub	fp, #48
1eda0     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1eda4     1C 4E 05 F1 | 	add	fp, #28
1eda8     A7 FA 61 FC | 	wrlong	result1, fp
1edac     1C 4E 85 F1 | 	sub	fp, #28
1edb0     FF FF 7F FF 
1edb4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1edb8     06 FA 05 A6 |  if_e	mov	result1, #6
1edbc     74 08 90 AD |  if_e	jmp	#LR__3510
1edc0     1C 4E 05 F1 | 	add	fp, #28
1edc4     A7 1E 02 FB | 	rdlong	local01, fp
1edc8     1C 4E 85 F1 | 	sub	fp, #28
1edcc     80 00 00 FF 
1edd0     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1edd4     3C 00 90 CD |  if_b	jmp	#LR__3471
1edd8     18 4E 05 F1 | 	add	fp, #24
1eddc     A7 22 02 FB | 	rdlong	local03, fp
1ede0     14 4E 05 F1 | 	add	fp, #20
1ede4     A7 1E 02 FB | 	rdlong	local01, fp
1ede8     0F 25 02 F6 | 	mov	local04, local01
1edec     01 24 06 F1 | 	add	local04, #1
1edf0     A7 24 62 FC | 	wrlong	local04, fp
1edf4     01 1E 66 F0 | 	shl	local01, #1
1edf8     11 1F 02 F1 | 	add	local01, local03
1edfc     10 4E 85 F1 | 	sub	fp, #16
1ee00     A7 26 02 FB | 	rdlong	local05, fp
1ee04     1C 4E 85 F1 | 	sub	fp, #28
1ee08     13 29 02 F6 | 	mov	local06, local05
1ee0c     10 28 46 F0 | 	shr	local06, #16
1ee10     0F 29 52 FC | 	wrword	local06, local01
1ee14                 | LR__3471
1ee14     1C 4E 05 F1 | 	add	fp, #28
1ee18     A7 1E 02 FB | 	rdlong	local01, fp
1ee1c     08 4E 85 F1 | 	sub	fp, #8
1ee20     A7 1E 52 FC | 	wrword	local01, fp
1ee24     A7 1E E2 FA | 	rdword	local01, fp
1ee28     14 4E 85 F1 | 	sub	fp, #20
1ee2c     20 1E 16 F2 | 	cmp	local01, #32 wc
1ee30     B0 00 90 CD |  if_b	jmp	#LR__3473
1ee34     14 4E 05 F1 | 	add	fp, #20
1ee38     A7 1E E2 FA | 	rdword	local01, fp
1ee3c     14 4E 85 F1 | 	sub	fp, #20
1ee40     2F 1E 0E F2 | 	cmp	local01, #47 wz
1ee44     14 4E 05 51 |  if_ne	add	fp, #20
1ee48     A7 24 E2 5A |  if_ne	rdword	local04, fp
1ee4c     14 4E 85 51 |  if_ne	sub	fp, #20
1ee50     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1ee54     8C 00 90 AD |  if_e	jmp	#LR__3473
1ee58     14 4E 05 F1 | 	add	fp, #20
1ee5c     A7 12 E2 FA | 	rdword	arg01, fp
1ee60     14 4E 85 F1 | 	sub	fp, #20
1ee64     80 12 16 F2 | 	cmp	arg01, #128 wc
1ee68     24 00 90 3D |  if_ae	jmp	#LR__3472
1ee6c     26 01 00 FF 
1ee70     A4 13 06 F6 | 	mov	arg01, ##@LR__4132
1ee74     14 4E 05 F1 | 	add	fp, #20
1ee78     A7 14 E2 FA | 	rdword	arg02, fp
1ee7c     14 4E 85 F1 | 	sub	fp, #20
1ee80     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1ee84     00 FA 0D F2 | 	cmp	result1, #0 wz
1ee88     06 FA 05 56 |  if_ne	mov	result1, #6
1ee8c     A4 07 90 5D |  if_ne	jmp	#LR__3510
1ee90                 | LR__3472
1ee90     2C 4E 05 F1 | 	add	fp, #44
1ee94     A7 28 02 FB | 	rdlong	local06, fp
1ee98     2C 4E 85 F1 | 	sub	fp, #44
1ee9c     FF 28 16 F2 | 	cmp	local06, #255 wc
1eea0     06 FA 05 36 |  if_ae	mov	result1, #6
1eea4     8C 07 90 3D |  if_ae	jmp	#LR__3510
1eea8     18 4E 05 F1 | 	add	fp, #24
1eeac     A7 22 02 FB | 	rdlong	local03, fp
1eeb0     14 4E 05 F1 | 	add	fp, #20
1eeb4     A7 20 02 FB | 	rdlong	local02, fp
1eeb8     10 25 02 F6 | 	mov	local04, local02
1eebc     01 24 06 F1 | 	add	local04, #1
1eec0     A7 24 62 FC | 	wrlong	local04, fp
1eec4     10 1F 02 F6 | 	mov	local01, local02
1eec8     01 1E 66 F0 | 	shl	local01, #1
1eecc     11 1F 02 F1 | 	add	local01, local03
1eed0     18 4E 85 F1 | 	sub	fp, #24
1eed4     A7 28 E2 FA | 	rdword	local06, fp
1eed8     14 4E 85 F1 | 	sub	fp, #20
1eedc     0F 29 52 FC | 	wrword	local06, local01
1eee0     B0 FE 9F FD | 	jmp	#LR__3470
1eee4                 | LR__3473
1eee4     14 4E 05 F1 | 	add	fp, #20
1eee8     A7 2A E2 FA | 	rdword	local07, fp
1eeec     14 4E 85 F1 | 	sub	fp, #20
1eef0     20 2A 16 F2 | 	cmp	local07, #32 wc
1eef4     10 4E 05 C1 |  if_b	add	fp, #16
1eef8     A7 08 48 CC |  if_b	wrbyte	#4, fp
1eefc     10 4E 85 C1 |  if_b	sub	fp, #16
1ef00     74 00 90 CD |  if_b	jmp	#LR__3478
1ef04     97 24 48 FB | 	callpa	#(@LR__3476-@LR__3474)>>2,fcache_load_ptr_
1ef08                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1ef08                 | LR__3474
1ef08     30 4E 05 F1 | 	add	fp, #48
1ef0c     A7 24 02 FB | 	rdlong	local04, fp
1ef10     30 4E 85 F1 | 	sub	fp, #48
1ef14     12 2B C2 FA | 	rdbyte	local07, local04
1ef18     2F 2A 0E F2 | 	cmp	local07, #47 wz
1ef1c     18 00 90 AD |  if_e	jmp	#LR__3475
1ef20     30 4E 05 F1 | 	add	fp, #48
1ef24     A7 24 02 FB | 	rdlong	local04, fp
1ef28     30 4E 85 F1 | 	sub	fp, #48
1ef2c     12 21 C2 FA | 	rdbyte	local02, local04
1ef30     5C 20 0E F2 | 	cmp	local02, #92 wz
1ef34     18 00 90 5D |  if_ne	jmp	#LR__3477
1ef38                 | LR__3475
1ef38     30 4E 05 F1 | 	add	fp, #48
1ef3c     A7 1E 02 FB | 	rdlong	local01, fp
1ef40     01 1E 06 F1 | 	add	local01, #1
1ef44     A7 1E 62 FC | 	wrlong	local01, fp
1ef48     30 4E 85 F1 | 	sub	fp, #48
1ef4c     B8 FF 9F FD | 	jmp	#LR__3474
1ef50                 | LR__3476
1ef50                 | LR__3477
1ef50     10 4E 05 F1 | 	add	fp, #16
1ef54     A7 00 48 FC | 	wrbyte	#0, fp
1ef58     20 4E 05 F1 | 	add	fp, #32
1ef5c     A7 28 02 FB | 	rdlong	local06, fp
1ef60     30 4E 85 F1 | 	sub	fp, #48
1ef64     14 2B C2 FA | 	rdbyte	local07, local06
1ef68     20 2A 16 F2 | 	cmp	local07, #32 wc
1ef6c     10 4E 05 C1 |  if_b	add	fp, #16
1ef70     A7 08 48 CC |  if_b	wrbyte	#4, fp
1ef74     10 4E 85 C1 |  if_b	sub	fp, #16
1ef78                 | LR__3478
1ef78     08 4E 05 F1 | 	add	fp, #8
1ef7c     A7 2A 02 FB | 	rdlong	local07, fp
1ef80     28 4E 05 F1 | 	add	fp, #40
1ef84     A7 1E 02 FB | 	rdlong	local01, fp
1ef88     30 4E 85 F1 | 	sub	fp, #48
1ef8c     15 1F 62 FC | 	wrlong	local01, local07
1ef90     97 38 48 FB | 	callpa	#(@LR__3480-@LR__3479)>>2,fcache_load_ptr_
1ef94                 | ' 	}
1ef94                 | ' 	*path = p;
1ef94                 | ' #line 2862 "ff.c"
1ef94                 | ' 	while (di) {
1ef94                 | LR__3479
1ef94     2C 4E 05 F1 | 	add	fp, #44
1ef98     A7 2A 0A FB | 	rdlong	local07, fp wz
1ef9c     2C 4E 85 F1 | 	sub	fp, #44
1efa0     60 00 90 AD |  if_e	jmp	#LR__3481
1efa4     18 4E 05 F1 | 	add	fp, #24
1efa8     A7 28 02 FB | 	rdlong	local06, fp
1efac     14 4E 05 F1 | 	add	fp, #20
1efb0     A7 24 02 FB | 	rdlong	local04, fp
1efb4     01 24 86 F1 | 	sub	local04, #1
1efb8     01 24 66 F0 | 	shl	local04, #1
1efbc     14 25 02 F1 | 	add	local04, local06
1efc0     12 29 E2 FA | 	rdword	local06, local04
1efc4     18 4E 85 F1 | 	sub	fp, #24
1efc8     A7 28 52 FC | 	wrword	local06, fp
1efcc     A7 2A E2 FA | 	rdword	local07, fp
1efd0     14 4E 85 F1 | 	sub	fp, #20
1efd4     20 2A 0E F2 | 	cmp	local07, #32 wz
1efd8     14 4E 05 51 |  if_ne	add	fp, #20
1efdc     A7 1E E2 5A |  if_ne	rdword	local01, fp
1efe0     14 4E 85 51 |  if_ne	sub	fp, #20
1efe4     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1efe8     18 00 90 5D |  if_ne	jmp	#LR__3481
1efec     2C 4E 05 F1 | 	add	fp, #44
1eff0     A7 1E 02 FB | 	rdlong	local01, fp
1eff4     01 1E 86 F1 | 	sub	local01, #1
1eff8     A7 1E 62 FC | 	wrlong	local01, fp
1effc     2C 4E 85 F1 | 	sub	fp, #44
1f000     90 FF 9F FD | 	jmp	#LR__3479
1f004                 | LR__3480
1f004                 | LR__3481
1f004     18 4E 05 F1 | 	add	fp, #24
1f008     A7 2C 02 FB | 	rdlong	local08, fp
1f00c     14 4E 05 F1 | 	add	fp, #20
1f010     A7 24 02 FB | 	rdlong	local04, fp
1f014     01 24 66 F0 | 	shl	local04, #1
1f018     16 25 02 F1 | 	add	local04, local08
1f01c     12 01 58 FC | 	wrword	#0, local04
1f020     A7 2A 0A FB | 	rdlong	local07, fp wz
1f024     2C 4E 85 F1 | 	sub	fp, #44
1f028     06 FA 05 A6 |  if_e	mov	result1, #6
1f02c     04 06 90 AD |  if_e	jmp	#LR__3510
1f030                 | ' 
1f030                 | ' 
1f030                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1f030     28 4E 05 F1 | 	add	fp, #40
1f034     A7 00 68 FC | 	wrlong	#0, fp
1f038     28 4E 85 F1 | 	sub	fp, #40
1f03c     97 22 48 FB | 	callpa	#(@LR__3483-@LR__3482)>>2,fcache_load_ptr_
1f040                 | LR__3482
1f040     18 4E 05 F1 | 	add	fp, #24
1f044     A7 2E 02 FB | 	rdlong	local09, fp
1f048     10 4E 05 F1 | 	add	fp, #16
1f04c     A7 30 02 FB | 	rdlong	local10, fp
1f050     28 4E 85 F1 | 	sub	fp, #40
1f054     01 30 66 F0 | 	shl	local10, #1
1f058     17 31 02 F1 | 	add	local10, local09
1f05c     18 33 E2 FA | 	rdword	local11, local10
1f060     20 32 0E F2 | 	cmp	local11, #32 wz
1f064     1C 00 90 5D |  if_ne	jmp	#LR__3484
1f068     28 4E 05 F1 | 	add	fp, #40
1f06c     A7 34 02 FB | 	rdlong	local12, fp
1f070     1A 27 02 F6 | 	mov	local05, local12
1f074     01 26 06 F1 | 	add	local05, #1
1f078     A7 26 62 FC | 	wrlong	local05, fp
1f07c     28 4E 85 F1 | 	sub	fp, #40
1f080     BC FF 9F FD | 	jmp	#LR__3482
1f084                 | LR__3483
1f084                 | LR__3484
1f084     28 4E 05 F1 | 	add	fp, #40
1f088     A7 2A 02 FB | 	rdlong	local07, fp
1f08c     28 4E 85 F1 | 	sub	fp, #40
1f090     01 2A 16 F2 | 	cmp	local07, #1 wc
1f094     28 00 90 3D |  if_ae	jmp	#LR__3485
1f098     18 4E 05 F1 | 	add	fp, #24
1f09c     A7 22 02 FB | 	rdlong	local03, fp
1f0a0     10 4E 05 F1 | 	add	fp, #16
1f0a4     A7 2E 02 FB | 	rdlong	local09, fp
1f0a8     28 4E 85 F1 | 	sub	fp, #40
1f0ac     01 2E 66 F0 | 	shl	local09, #1
1f0b0     11 2F 02 F1 | 	add	local09, local03
1f0b4     17 1F E2 FA | 	rdword	local01, local09
1f0b8     2E 1E 0E F2 | 	cmp	local01, #46 wz
1f0bc     14 00 90 5D |  if_ne	jmp	#LR__3486
1f0c0                 | LR__3485
1f0c0     10 4E 05 F1 | 	add	fp, #16
1f0c4     A7 2A C2 FA | 	rdbyte	local07, fp
1f0c8     03 2A 46 F5 | 	or	local07, #3
1f0cc     A7 2A 42 FC | 	wrbyte	local07, fp
1f0d0     10 4E 85 F1 | 	sub	fp, #16
1f0d4                 | LR__3486
1f0d4     97 2C 48 FB | 	callpa	#(@LR__3488-@LR__3487)>>2,fcache_load_ptr_
1f0d8                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1f0d8                 | LR__3487
1f0d8     2C 4E 05 F1 | 	add	fp, #44
1f0dc     A7 2A 02 FB | 	rdlong	local07, fp
1f0e0     2C 4E 85 F1 | 	sub	fp, #44
1f0e4     01 2A 16 F2 | 	cmp	local07, #1 wc
1f0e8     44 00 90 CD |  if_b	jmp	#LR__3489
1f0ec     18 4E 05 F1 | 	add	fp, #24
1f0f0     A7 28 02 FB | 	rdlong	local06, fp
1f0f4     14 4E 05 F1 | 	add	fp, #20
1f0f8     A7 22 02 FB | 	rdlong	local03, fp
1f0fc     2C 4E 85 F1 | 	sub	fp, #44
1f100     01 22 86 F1 | 	sub	local03, #1
1f104     01 22 66 F0 | 	shl	local03, #1
1f108     14 23 02 F1 | 	add	local03, local06
1f10c     11 1F E2 FA | 	rdword	local01, local03
1f110     2E 1E 0E F2 | 	cmp	local01, #46 wz
1f114     18 00 90 AD |  if_e	jmp	#LR__3489
1f118     2C 4E 05 F1 | 	add	fp, #44
1f11c     A7 1E 02 FB | 	rdlong	local01, fp
1f120     01 1E 86 F1 | 	sub	local01, #1
1f124     A7 1E 62 FC | 	wrlong	local01, fp
1f128     2C 4E 85 F1 | 	sub	fp, #44
1f12c     A8 FF 9F FD | 	jmp	#LR__3487
1f130                 | LR__3488
1f130                 | LR__3489
1f130     04 4E 05 F1 | 	add	fp, #4
1f134     A7 12 02 FB | 	rdlong	arg01, fp
1f138     04 4E 85 F1 | 	sub	fp, #4
1f13c     20 12 06 F1 | 	add	arg01, #32
1f140     20 14 06 F6 | 	mov	arg02, #32
1f144     0B 16 06 F6 | 	mov	arg03, #11
1f148     09 37 02 F6 | 	mov	local13, arg01
1f14c     98 00 A0 FD | 	call	#\builtin_bytefill_
1f150     1B FB 01 F6 | 	mov	result1, local13
1f154     0C 4E 05 F1 | 	add	fp, #12
1f158     A7 00 48 FC | 	wrbyte	#0, fp
1f15c     A7 2A C2 FA | 	rdbyte	local07, fp
1f160     14 4E 05 F1 | 	add	fp, #20
1f164     A7 2A 62 FC | 	wrlong	local07, fp
1f168     04 4E 05 F1 | 	add	fp, #4
1f16c     A7 10 68 FC | 	wrlong	#8, fp
1f170     24 4E 85 F1 | 	sub	fp, #36
1f174                 | ' 
1f174                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1f174                 | ' 	i = b = 0; ni = 8;
1f174                 | ' 	for (;;) {
1f174                 | LR__3490
1f174     18 4E 05 F1 | 	add	fp, #24
1f178     A7 22 02 FB | 	rdlong	local03, fp
1f17c     10 4E 05 F1 | 	add	fp, #16
1f180     A7 2E 02 FB | 	rdlong	local09, fp
1f184     17 25 02 F6 | 	mov	local04, local09
1f188     01 24 06 F1 | 	add	local04, #1
1f18c     A7 24 62 FC | 	wrlong	local04, fp
1f190     01 2E 66 F0 | 	shl	local09, #1
1f194     11 2F 02 F1 | 	add	local09, local03
1f198     17 29 E2 FA | 	rdword	local06, local09
1f19c     14 4E 85 F1 | 	sub	fp, #20
1f1a0     A7 28 52 FC | 	wrword	local06, fp
1f1a4     A7 2A EA FA | 	rdword	local07, fp wz
1f1a8     14 4E 85 F1 | 	sub	fp, #20
1f1ac     74 03 90 AD |  if_e	jmp	#LR__3506
1f1b0     14 4E 05 F1 | 	add	fp, #20
1f1b4     A7 2A E2 FA | 	rdword	local07, fp
1f1b8     14 4E 85 F1 | 	sub	fp, #20
1f1bc     20 2A 0E F2 | 	cmp	local07, #32 wz
1f1c0     30 00 90 AD |  if_e	jmp	#LR__3491
1f1c4     14 4E 05 F1 | 	add	fp, #20
1f1c8     A7 1E E2 FA | 	rdword	local01, fp
1f1cc     14 4E 85 F1 | 	sub	fp, #20
1f1d0     2E 1E 0E F2 | 	cmp	local01, #46 wz
1f1d4     34 00 90 5D |  if_ne	jmp	#LR__3492
1f1d8     28 4E 05 F1 | 	add	fp, #40
1f1dc     A7 24 02 FB | 	rdlong	local04, fp
1f1e0     04 4E 05 F1 | 	add	fp, #4
1f1e4     A7 30 02 FB | 	rdlong	local10, fp
1f1e8     2C 4E 85 F1 | 	sub	fp, #44
1f1ec     18 25 0A F2 | 	cmp	local04, local10 wz
1f1f0     18 00 90 AD |  if_e	jmp	#LR__3492
1f1f4                 | LR__3491
1f1f4     10 4E 05 F1 | 	add	fp, #16
1f1f8     A7 2A C2 FA | 	rdbyte	local07, fp
1f1fc     03 2A 46 F5 | 	or	local07, #3
1f200     A7 2A 42 FC | 	wrbyte	local07, fp
1f204     10 4E 85 F1 | 	sub	fp, #16
1f208                 | ' 			cf |=  0x01  |  0x02 ;
1f208                 | ' 			continue;
1f208     68 FF 9F FD | 	jmp	#LR__3490
1f20c                 | LR__3492
1f20c     20 4E 05 F1 | 	add	fp, #32
1f210     A7 2A 02 FB | 	rdlong	local07, fp
1f214     04 4E 05 F1 | 	add	fp, #4
1f218     A7 1E 02 FB | 	rdlong	local01, fp
1f21c     24 4E 85 F1 | 	sub	fp, #36
1f220     0F 2B 12 F2 | 	cmp	local07, local01 wc
1f224     1C 00 90 3D |  if_ae	jmp	#LR__3493
1f228     28 4E 05 F1 | 	add	fp, #40
1f22c     A7 2C 02 FB | 	rdlong	local08, fp
1f230     04 4E 05 F1 | 	add	fp, #4
1f234     A7 30 02 FB | 	rdlong	local10, fp
1f238     2C 4E 85 F1 | 	sub	fp, #44
1f23c     18 2D 0A F2 | 	cmp	local08, local10 wz
1f240     B0 00 90 5D |  if_ne	jmp	#LR__3495
1f244                 | LR__3493
1f244     24 4E 05 F1 | 	add	fp, #36
1f248     A7 2A 02 FB | 	rdlong	local07, fp
1f24c     24 4E 85 F1 | 	sub	fp, #36
1f250     0B 2A 0E F2 | 	cmp	local07, #11 wz
1f254     18 00 90 5D |  if_ne	jmp	#LR__3494
1f258     10 4E 05 F1 | 	add	fp, #16
1f25c     A7 2A C2 FA | 	rdbyte	local07, fp
1f260     03 2A 46 F5 | 	or	local07, #3
1f264     A7 2A 42 FC | 	wrbyte	local07, fp
1f268     10 4E 85 F1 | 	sub	fp, #16
1f26c                 | ' 				cf |=  0x01  |  0x02 ;
1f26c                 | ' 				break;
1f26c     B4 02 90 FD | 	jmp	#LR__3506
1f270                 | LR__3494
1f270     28 4E 05 F1 | 	add	fp, #40
1f274     A7 2A 02 FB | 	rdlong	local07, fp
1f278     04 4E 05 F1 | 	add	fp, #4
1f27c     A7 1E 02 FB | 	rdlong	local01, fp
1f280     2C 4E 85 F1 | 	sub	fp, #44
1f284     0F 2B 0A F2 | 	cmp	local07, local01 wz
1f288     10 4E 05 51 |  if_ne	add	fp, #16
1f28c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f290     03 2A 46 55 |  if_ne	or	local07, #3
1f294     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f298     10 4E 85 51 |  if_ne	sub	fp, #16
1f29c     28 4E 05 F1 | 	add	fp, #40
1f2a0     A7 2A 02 FB | 	rdlong	local07, fp
1f2a4     04 4E 05 F1 | 	add	fp, #4
1f2a8     A7 20 02 FB | 	rdlong	local02, fp
1f2ac     2C 4E 85 F1 | 	sub	fp, #44
1f2b0     10 2B 1A F2 | 	cmp	local07, local02 wcz
1f2b4     6C 02 90 1D |  if_a	jmp	#LR__3506
1f2b8     2C 4E 05 F1 | 	add	fp, #44
1f2bc     A7 2A 02 FB | 	rdlong	local07, fp
1f2c0     04 4E 85 F1 | 	sub	fp, #4
1f2c4     A7 2A 62 FC | 	wrlong	local07, fp
1f2c8     08 4E 85 F1 | 	sub	fp, #8
1f2cc     A7 10 68 FC | 	wrlong	#8, fp
1f2d0     04 4E 05 F1 | 	add	fp, #4
1f2d4     A7 16 68 FC | 	wrlong	#11, fp
1f2d8     18 4E 85 F1 | 	sub	fp, #24
1f2dc     A7 32 C2 FA | 	rdbyte	local11, fp
1f2e0     19 2B E2 F8 | 	getbyte	local07, local11, #0
1f2e4     02 2A 66 F0 | 	shl	local07, #2
1f2e8     A7 2A 42 FC | 	wrbyte	local07, fp
1f2ec     0C 4E 85 F1 | 	sub	fp, #12
1f2f0                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1f2f0                 | ' 			continue;
1f2f0     80 FE 9F FD | 	jmp	#LR__3490
1f2f4                 | LR__3495
1f2f4     14 4E 05 F1 | 	add	fp, #20
1f2f8     A7 2A E2 FA | 	rdword	local07, fp
1f2fc     14 4E 85 F1 | 	sub	fp, #20
1f300     80 2A 16 F2 | 	cmp	local07, #128 wc
1f304     6C 00 90 CD |  if_b	jmp	#LR__3497
1f308     10 4E 05 F1 | 	add	fp, #16
1f30c     A7 2A C2 FA | 	rdbyte	local07, fp
1f310     02 2A 46 F5 | 	or	local07, #2
1f314     A7 2A 42 FC | 	wrbyte	local07, fp
1f318     04 4E 05 F1 | 	add	fp, #4
1f31c     A7 12 E2 FA | 	rdword	arg01, fp
1f320     14 4E 85 F1 | 	sub	fp, #20
1f324     01 00 00 FF 
1f328     52 15 06 F6 | 	mov	arg02, ##850
1f32c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1f330     14 4E 05 F1 | 	add	fp, #20
1f334     A7 FA 51 FC | 	wrword	result1, fp
1f338     A7 2A E2 FA | 	rdword	local07, fp
1f33c     14 4E 85 F1 | 	sub	fp, #20
1f340     80 2A CE F7 | 	test	local07, #128 wz
1f344     2C 00 90 AD |  if_e	jmp	#LR__3496
1f348     14 4E 05 F1 | 	add	fp, #20
1f34c     A7 20 E2 FA | 	rdword	local02, fp
1f350     7F 20 06 F5 | 	and	local02, #127
1f354     01 00 00 FF 
1f358     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1f35c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1f360     10 2B C2 FA | 	rdbyte	local07, local02
1f364     A7 2A 52 FC | 	wrword	local07, fp
1f368     14 4E 85 F1 | 	sub	fp, #20
1f36c     01 00 00 FF 
1f370     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1f374                 | LR__3496
1f374                 | LR__3497
1f374     14 4E 05 F1 | 	add	fp, #20
1f378     A7 2A E2 FA | 	rdword	local07, fp
1f37c     14 4E 85 F1 | 	sub	fp, #20
1f380     00 2B 16 F2 | 	cmp	local07, #256 wc
1f384     88 00 90 CD |  if_b	jmp	#LR__3499
1f388     24 4E 05 F1 | 	add	fp, #36
1f38c     A7 2A 02 FB | 	rdlong	local07, fp
1f390     01 2A 86 F1 | 	sub	local07, #1
1f394     04 4E 85 F1 | 	sub	fp, #4
1f398     A7 20 02 FB | 	rdlong	local02, fp
1f39c     20 4E 85 F1 | 	sub	fp, #32
1f3a0     15 21 12 F2 | 	cmp	local02, local07 wc
1f3a4     2C 00 90 CD |  if_b	jmp	#LR__3498
1f3a8     10 4E 05 F1 | 	add	fp, #16
1f3ac     A7 32 C2 FA | 	rdbyte	local11, fp
1f3b0     19 2B E2 F8 | 	getbyte	local07, local11, #0
1f3b4     03 2A 46 F5 | 	or	local07, #3
1f3b8     A7 2A 42 FC | 	wrbyte	local07, fp
1f3bc     14 4E 05 F1 | 	add	fp, #20
1f3c0     A7 2A 02 FB | 	rdlong	local07, fp
1f3c4     04 4E 85 F1 | 	sub	fp, #4
1f3c8     A7 2A 62 FC | 	wrlong	local07, fp
1f3cc     20 4E 85 F1 | 	sub	fp, #32
1f3d0                 | ' 				cf |=  0x01  |  0x02 ;
1f3d0                 | ' 				i = ni; continue;
1f3d0     A0 FD 9F FD | 	jmp	#LR__3490
1f3d4                 | LR__3498
1f3d4     04 4E 05 F1 | 	add	fp, #4
1f3d8     A7 2E 02 FB | 	rdlong	local09, fp
1f3dc     1C 4E 05 F1 | 	add	fp, #28
1f3e0     A7 30 02 FB | 	rdlong	local10, fp
1f3e4     18 25 02 F6 | 	mov	local04, local10
1f3e8     01 24 06 F1 | 	add	local04, #1
1f3ec     A7 24 62 FC | 	wrlong	local04, fp
1f3f0     20 2E 06 F1 | 	add	local09, #32
1f3f4     17 31 02 F1 | 	add	local10, local09
1f3f8     0C 4E 85 F1 | 	sub	fp, #12
1f3fc     A7 22 E2 FA | 	rdword	local03, fp
1f400     14 4E 85 F1 | 	sub	fp, #20
1f404     08 22 46 F0 | 	shr	local03, #8
1f408     18 23 42 FC | 	wrbyte	local03, local10
1f40c     D4 00 90 FD | 	jmp	#LR__3505
1f410                 | LR__3499
1f410     14 4E 05 F1 | 	add	fp, #20
1f414     A7 2A EA FA | 	rdword	local07, fp wz
1f418     14 4E 85 F1 | 	sub	fp, #20
1f41c     20 00 90 AD |  if_e	jmp	#LR__3500
1f420     26 01 00 FF 
1f424     AD 13 06 F6 | 	mov	arg01, ##@LR__4133
1f428     14 4E 05 F1 | 	add	fp, #20
1f42c     A7 14 E2 FA | 	rdword	arg02, fp
1f430     14 4E 85 F1 | 	sub	fp, #20
1f434     48 CB BF FD | 	call	#_fatfs_cc_strchr
1f438     00 FA 0D F2 | 	cmp	result1, #0 wz
1f43c     20 00 90 AD |  if_e	jmp	#LR__3501
1f440                 | LR__3500
1f440     14 4E 05 F1 | 	add	fp, #20
1f444     A7 BE 58 FC | 	wrword	#95, fp
1f448     04 4E 85 F1 | 	sub	fp, #4
1f44c     A7 2A C2 FA | 	rdbyte	local07, fp
1f450     03 2A 46 F5 | 	or	local07, #3
1f454     A7 2A 42 FC | 	wrbyte	local07, fp
1f458     10 4E 85 F1 | 	sub	fp, #16
1f45c     84 00 90 FD | 	jmp	#LR__3504
1f460                 | LR__3501
1f460     14 4E 05 F1 | 	add	fp, #20
1f464     A7 2A E2 FA | 	rdword	local07, fp
1f468     14 4E 85 F1 | 	sub	fp, #20
1f46c     41 2A 16 F2 | 	cmp	local07, #65 wc
1f470     24 00 90 CD |  if_b	jmp	#LR__3502
1f474     14 4E 05 F1 | 	add	fp, #20
1f478     A7 1E E2 FA | 	rdword	local01, fp
1f47c     14 4E 85 F1 | 	sub	fp, #20
1f480     5B 1E 16 F2 | 	cmp	local01, #91 wc
1f484     0C 4E 05 C1 |  if_b	add	fp, #12
1f488     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1f48c     02 2A 46 C5 |  if_b	or	local07, #2
1f490     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1f494     0C 4E 85 C1 |  if_b	sub	fp, #12
1f498                 | LR__3502
1f498     14 4E 05 F1 | 	add	fp, #20
1f49c     A7 2A E2 FA | 	rdword	local07, fp
1f4a0     14 4E 85 F1 | 	sub	fp, #20
1f4a4     61 2A 16 F2 | 	cmp	local07, #97 wc
1f4a8     38 00 90 CD |  if_b	jmp	#LR__3503
1f4ac     14 4E 05 F1 | 	add	fp, #20
1f4b0     A7 1E E2 FA | 	rdword	local01, fp
1f4b4     14 4E 85 F1 | 	sub	fp, #20
1f4b8     7B 1E 16 F2 | 	cmp	local01, #123 wc
1f4bc     24 00 90 3D |  if_ae	jmp	#LR__3503
1f4c0     0C 4E 05 F1 | 	add	fp, #12
1f4c4     A7 2A C2 FA | 	rdbyte	local07, fp
1f4c8     01 2A 46 F5 | 	or	local07, #1
1f4cc     A7 2A 42 FC | 	wrbyte	local07, fp
1f4d0     08 4E 05 F1 | 	add	fp, #8
1f4d4     A7 2A E2 FA | 	rdword	local07, fp
1f4d8     20 2A 86 F1 | 	sub	local07, #32
1f4dc     A7 2A 52 FC | 	wrword	local07, fp
1f4e0     14 4E 85 F1 | 	sub	fp, #20
1f4e4                 | LR__3503
1f4e4                 | LR__3504
1f4e4                 | LR__3505
1f4e4     04 4E 05 F1 | 	add	fp, #4
1f4e8     A7 32 02 FB | 	rdlong	local11, fp
1f4ec     19 2F 02 F6 | 	mov	local09, local11
1f4f0     1C 4E 05 F1 | 	add	fp, #28
1f4f4     A7 20 02 FB | 	rdlong	local02, fp
1f4f8     10 25 02 F6 | 	mov	local04, local02
1f4fc     01 24 06 F1 | 	add	local04, #1
1f500     A7 24 62 FC | 	wrlong	local04, fp
1f504     10 31 02 F6 | 	mov	local10, local02
1f508     20 2E 06 F1 | 	add	local09, #32
1f50c     17 31 02 F1 | 	add	local10, local09
1f510     0C 4E 85 F1 | 	sub	fp, #12
1f514     A7 22 E2 FA | 	rdword	local03, fp
1f518     14 4E 85 F1 | 	sub	fp, #20
1f51c     18 23 42 FC | 	wrbyte	local03, local10
1f520     50 FC 9F FD | 	jmp	#LR__3490
1f524                 | LR__3506
1f524     04 4E 05 F1 | 	add	fp, #4
1f528     A7 32 02 FB | 	rdlong	local11, fp
1f52c     04 4E 85 F1 | 	sub	fp, #4
1f530     20 32 06 F1 | 	add	local11, #32
1f534     19 2B C2 FA | 	rdbyte	local07, local11
1f538     E5 2A 0E F2 | 	cmp	local07, #229 wz
1f53c     04 4E 05 A1 |  if_e	add	fp, #4
1f540     A7 2A 02 AB |  if_e	rdlong	local07, fp
1f544     04 4E 85 A1 |  if_e	sub	fp, #4
1f548     20 2A 06 A1 |  if_e	add	local07, #32
1f54c     15 0B 48 AC |  if_e	wrbyte	#5, local07
1f550     24 4E 05 F1 | 	add	fp, #36
1f554     A7 2A 02 FB | 	rdlong	local07, fp
1f558     24 4E 85 F1 | 	sub	fp, #36
1f55c     08 2A 0E F2 | 	cmp	local07, #8 wz
1f560     0C 4E 05 A1 |  if_e	add	fp, #12
1f564     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1f568     02 2A 66 A0 |  if_e	shl	local07, #2
1f56c     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1f570     0C 4E 85 A1 |  if_e	sub	fp, #12
1f574     0C 4E 05 F1 | 	add	fp, #12
1f578     A7 2A C2 FA | 	rdbyte	local07, fp
1f57c     0C 4E 85 F1 | 	sub	fp, #12
1f580     0C 2A 06 F5 | 	and	local07, #12
1f584     0C 2A 0E F2 | 	cmp	local07, #12 wz
1f588     18 00 90 AD |  if_e	jmp	#LR__3507
1f58c     0C 4E 05 F1 | 	add	fp, #12
1f590     A7 1E C2 FA | 	rdbyte	local01, fp
1f594     0C 4E 85 F1 | 	sub	fp, #12
1f598     03 1E 06 F5 | 	and	local01, #3
1f59c     03 1E 0E F2 | 	cmp	local01, #3 wz
1f5a0     14 00 90 5D |  if_ne	jmp	#LR__3508
1f5a4                 | LR__3507
1f5a4     10 4E 05 F1 | 	add	fp, #16
1f5a8     A7 2A C2 FA | 	rdbyte	local07, fp
1f5ac     02 2A 46 F5 | 	or	local07, #2
1f5b0     A7 2A 42 FC | 	wrbyte	local07, fp
1f5b4     10 4E 85 F1 | 	sub	fp, #16
1f5b8                 | LR__3508
1f5b8     10 4E 05 F1 | 	add	fp, #16
1f5bc     A7 2A C2 FA | 	rdbyte	local07, fp
1f5c0     10 4E 85 F1 | 	sub	fp, #16
1f5c4     02 2A CE F7 | 	test	local07, #2 wz
1f5c8     48 00 90 5D |  if_ne	jmp	#LR__3509
1f5cc     0C 4E 05 F1 | 	add	fp, #12
1f5d0     A7 2A C2 FA | 	rdbyte	local07, fp
1f5d4     0C 4E 85 F1 | 	sub	fp, #12
1f5d8     01 2A CE F7 | 	test	local07, #1 wz
1f5dc     10 4E 05 51 |  if_ne	add	fp, #16
1f5e0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f5e4     10 2A 46 55 |  if_ne	or	local07, #16
1f5e8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f5ec     10 4E 85 51 |  if_ne	sub	fp, #16
1f5f0     0C 4E 05 F1 | 	add	fp, #12
1f5f4     A7 2A C2 FA | 	rdbyte	local07, fp
1f5f8     0C 4E 85 F1 | 	sub	fp, #12
1f5fc     04 2A CE F7 | 	test	local07, #4 wz
1f600     10 4E 05 51 |  if_ne	add	fp, #16
1f604     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f608     08 2A 46 55 |  if_ne	or	local07, #8
1f60c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f610     10 4E 85 51 |  if_ne	sub	fp, #16
1f614                 | LR__3509
1f614     04 4E 05 F1 | 	add	fp, #4
1f618     A7 2A 02 FB | 	rdlong	local07, fp
1f61c     0C 4E 05 F1 | 	add	fp, #12
1f620     A7 1E C2 FA | 	rdbyte	local01, fp
1f624     10 4E 85 F1 | 	sub	fp, #16
1f628     2B 2A 06 F1 | 	add	local07, #43
1f62c     15 1F 42 FC | 	wrbyte	local01, local07
1f630                 | ' 	}
1f630                 | ' 
1f630                 | ' 	dp->fn[ 11 ] = cf;
1f630                 | ' 
1f630                 | ' 	return FR_OK;
1f630     00 FA 05 F6 | 	mov	result1, #0
1f634                 | LR__3510
1f634     A7 F0 03 F6 | 	mov	ptra, fp
1f638     B2 00 A0 FD | 	call	#popregs_
1f63c                 | _fatfs_cc_create_name_ret
1f63c     2D 00 64 FD | 	ret
1f640                 | 
1f640                 | _fatfs_cc_follow_path
1f640     02 4A 05 F6 | 	mov	COUNT_, #2
1f644     A8 00 A0 FD | 	call	#pushregs_
1f648     18 F0 07 F1 | 	add	ptra, #24
1f64c     04 4E 05 F1 | 	add	fp, #4
1f650     A7 12 62 FC | 	wrlong	arg01, fp
1f654     04 4E 05 F1 | 	add	fp, #4
1f658     A7 14 62 FC | 	wrlong	arg02, fp
1f65c     04 4E 85 F1 | 	sub	fp, #4
1f660     A7 FA 01 FB | 	rdlong	result1, fp
1f664     FD 1E 02 FB | 	rdlong	local01, result1
1f668     10 4E 05 F1 | 	add	fp, #16
1f66c     A7 1E 62 FC | 	wrlong	local01, fp
1f670     14 4E 85 F1 | 	sub	fp, #20
1f674     97 24 48 FB | 	callpa	#(@LR__3522-@LR__3520)>>2,fcache_load_ptr_
1f678                 | ' )
1f678                 | ' {
1f678                 | ' 	FRESULT res;
1f678                 | ' 	BYTE ns;
1f678                 | ' 	FATFS *fs = dp->obj.fs;
1f678                 | ' #line 3034 "ff.c"
1f678                 | ' 	{
1f678                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1f678                 | LR__3520
1f678     08 4E 05 F1 | 	add	fp, #8
1f67c     A7 1E 02 FB | 	rdlong	local01, fp
1f680     08 4E 85 F1 | 	sub	fp, #8
1f684     0F 1F C2 FA | 	rdbyte	local01, local01
1f688     2F 1E 0E F2 | 	cmp	local01, #47 wz
1f68c     18 00 90 AD |  if_e	jmp	#LR__3521
1f690     08 4E 05 F1 | 	add	fp, #8
1f694     A7 1E 02 FB | 	rdlong	local01, fp
1f698     08 4E 85 F1 | 	sub	fp, #8
1f69c     0F 1F C2 FA | 	rdbyte	local01, local01
1f6a0     5C 1E 0E F2 | 	cmp	local01, #92 wz
1f6a4     18 00 90 5D |  if_ne	jmp	#LR__3523
1f6a8                 | LR__3521
1f6a8     08 4E 05 F1 | 	add	fp, #8
1f6ac     A7 1E 02 FB | 	rdlong	local01, fp
1f6b0     01 1E 06 F1 | 	add	local01, #1
1f6b4     A7 1E 62 FC | 	wrlong	local01, fp
1f6b8     08 4E 85 F1 | 	sub	fp, #8
1f6bc     B8 FF 9F FD | 	jmp	#LR__3520
1f6c0                 | LR__3522
1f6c0                 | LR__3523
1f6c0     04 4E 05 F1 | 	add	fp, #4
1f6c4     A7 1E 02 FB | 	rdlong	local01, fp
1f6c8     08 1E 06 F1 | 	add	local01, #8
1f6cc     0F 01 68 FC | 	wrlong	#0, local01
1f6d0     04 4E 05 F1 | 	add	fp, #4
1f6d4     A7 1E 02 FB | 	rdlong	local01, fp
1f6d8     08 4E 85 F1 | 	sub	fp, #8
1f6dc     0F 1F C2 FA | 	rdbyte	local01, local01
1f6e0     20 1E 16 F2 | 	cmp	local01, #32 wc
1f6e4     30 00 90 3D |  if_ae	jmp	#LR__3524
1f6e8     04 4E 05 F1 | 	add	fp, #4
1f6ec     A7 1E 02 FB | 	rdlong	local01, fp
1f6f0     2B 1E 06 F1 | 	add	local01, #43
1f6f4     0F 01 49 FC | 	wrbyte	#128, local01
1f6f8     A7 12 02 FB | 	rdlong	arg01, fp
1f6fc     04 4E 85 F1 | 	sub	fp, #4
1f700     00 14 06 F6 | 	mov	arg02, #0
1f704     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1f708     0C 4E 05 F1 | 	add	fp, #12
1f70c     A7 FA 61 FC | 	wrlong	result1, fp
1f710     0C 4E 85 F1 | 	sub	fp, #12
1f714     1C 01 90 FD | 	jmp	#LR__3528
1f718                 | LR__3524
1f718                 | ' 		for (;;) {
1f718                 | LR__3525
1f718     04 4E 05 F1 | 	add	fp, #4
1f71c     A7 12 02 FB | 	rdlong	arg01, fp
1f720     04 4E 05 F1 | 	add	fp, #4
1f724     A7 14 02 F6 | 	mov	arg02, fp
1f728     08 4E 85 F1 | 	sub	fp, #8
1f72c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1f730     0C 4E 05 F1 | 	add	fp, #12
1f734     A7 FA 61 FC | 	wrlong	result1, fp
1f738     00 FA 4D F2 | 	cmps	result1, #0 wz
1f73c     0C 4E 85 F1 | 	sub	fp, #12
1f740     F0 00 90 5D |  if_ne	jmp	#LR__3527
1f744     04 4E 05 F1 | 	add	fp, #4
1f748     A7 12 02 FB | 	rdlong	arg01, fp
1f74c     04 4E 85 F1 | 	sub	fp, #4
1f750     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1f754     0C 4E 05 F1 | 	add	fp, #12
1f758     A7 FA 61 FC | 	wrlong	result1, fp
1f75c     08 4E 85 F1 | 	sub	fp, #8
1f760     A7 1E 02 FB | 	rdlong	local01, fp
1f764     2B 1E 06 F1 | 	add	local01, #43
1f768     0F 1F C2 FA | 	rdbyte	local01, local01
1f76c     0C 4E 05 F1 | 	add	fp, #12
1f770     A7 1E 42 FC | 	wrbyte	local01, fp
1f774     04 4E 85 F1 | 	sub	fp, #4
1f778     A7 1E 0A FB | 	rdlong	local01, fp wz
1f77c     0C 4E 85 F1 | 	sub	fp, #12
1f780     34 00 90 AD |  if_e	jmp	#LR__3526
1f784     0C 4E 05 F1 | 	add	fp, #12
1f788     A7 1E 02 FB | 	rdlong	local01, fp
1f78c     0C 4E 85 F1 | 	sub	fp, #12
1f790     04 1E 0E F2 | 	cmp	local01, #4 wz
1f794     9C 00 90 5D |  if_ne	jmp	#LR__3527
1f798     10 4E 05 F1 | 	add	fp, #16
1f79c     A7 1E C2 FA | 	rdbyte	local01, fp
1f7a0     10 4E 85 F1 | 	sub	fp, #16
1f7a4     04 1E CE F7 | 	test	local01, #4 wz
1f7a8     0C 4E 05 A1 |  if_e	add	fp, #12
1f7ac     A7 0A 68 AC |  if_e	wrlong	#5, fp
1f7b0     0C 4E 85 A1 |  if_e	sub	fp, #12
1f7b4                 | ' 					}
1f7b4                 | ' 				}
1f7b4                 | ' 				break;
1f7b4     7C 00 90 FD | 	jmp	#LR__3527
1f7b8                 | LR__3526
1f7b8     10 4E 05 F1 | 	add	fp, #16
1f7bc     A7 1E C2 FA | 	rdbyte	local01, fp
1f7c0     10 4E 85 F1 | 	sub	fp, #16
1f7c4     04 1E CE F7 | 	test	local01, #4 wz
1f7c8     68 00 90 5D |  if_ne	jmp	#LR__3527
1f7cc     04 4E 05 F1 | 	add	fp, #4
1f7d0     A7 1E 02 FB | 	rdlong	local01, fp
1f7d4     04 4E 85 F1 | 	sub	fp, #4
1f7d8     06 1E 06 F1 | 	add	local01, #6
1f7dc     0F 1F C2 FA | 	rdbyte	local01, local01
1f7e0     10 1E CE F7 | 	test	local01, #16 wz
1f7e4     0C 4E 05 A1 |  if_e	add	fp, #12
1f7e8     A7 0A 68 AC |  if_e	wrlong	#5, fp
1f7ec     0C 4E 85 A1 |  if_e	sub	fp, #12
1f7f0                 | ' 				res = FR_NO_PATH; break;
1f7f0     40 00 90 AD |  if_e	jmp	#LR__3527
1f7f4     04 4E 05 F1 | 	add	fp, #4
1f7f8     A7 20 02 FB | 	rdlong	local02, fp
1f7fc     10 1F 02 F6 | 	mov	local01, local02
1f800     10 4E 05 F1 | 	add	fp, #16
1f804     A7 14 02 FB | 	rdlong	arg02, fp
1f808     0A 13 02 F6 | 	mov	arg01, arg02
1f80c     34 14 06 F1 | 	add	arg02, #52
1f810     14 4E 85 F1 | 	sub	fp, #20
1f814     10 20 06 F1 | 	add	local02, #16
1f818     10 21 02 FB | 	rdlong	local02, local02
1f81c     FF 21 06 F5 | 	and	local02, #511
1f820     10 15 02 F1 | 	add	arg02, local02
1f824     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1f828     08 1E 06 F1 | 	add	local01, #8
1f82c     0F FB 61 FC | 	wrlong	result1, local01
1f830     E4 FE 9F FD | 	jmp	#LR__3525
1f834                 | LR__3527
1f834                 | LR__3528
1f834                 | ' 			}
1f834                 | ' #line 3090 "ff.c"
1f834                 | ' 			{
1f834                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1f834                 | ' 			}
1f834                 | ' 		}
1f834                 | ' 	}
1f834                 | ' 
1f834                 | ' 	return res;
1f834     0C 4E 05 F1 | 	add	fp, #12
1f838     A7 FA 01 FB | 	rdlong	result1, fp
1f83c     0C 4E 85 F1 | 	sub	fp, #12
1f840     A7 F0 03 F6 | 	mov	ptra, fp
1f844     B2 00 A0 FD | 	call	#popregs_
1f848                 | _fatfs_cc_follow_path_ret
1f848     2D 00 64 FD | 	ret
1f84c                 | 
1f84c                 | _fatfs_cc_get_ldnumber
1f84c     01 00 66 F6 | 	neg	_var01, #1
1f850     09 03 0A FB | 	rdlong	_var02, arg01 wz
1f854     01 05 02 F6 | 	mov	_var03, _var02
1f858     01 FA 65 A6 |  if_e	neg	result1, #1
1f85c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1f860     97 10 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
1f864                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1f864                 | LR__3530
1f864     02 07 C2 FA | 	rdbyte	_var04, _var03
1f868     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1f86c     20 FA 15 F2 | 	cmp	result1, #32 wc
1f870     01 04 06 F1 | 	add	_var03, #1
1f874     03 09 02 36 |  if_ae	mov	_var05, _var04
1f878     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1f87c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1f880     E0 FF 9F 1D |  if_a	jmp	#LR__3530
1f884                 | LR__3531
1f884     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1f888     3A 06 0E F2 | 	cmp	_var04, #58 wz
1f88c     40 00 90 5D |  if_ne	jmp	#LR__3533
1f890     01 0A 06 F6 | 	mov	_var06, #1
1f894     01 09 C2 FA | 	rdbyte	_var05, _var02
1f898     30 08 16 F2 | 	cmp	_var05, #48 wc
1f89c     1C 00 90 CD |  if_b	jmp	#LR__3532
1f8a0     01 09 C2 FA | 	rdbyte	_var05, _var02
1f8a4     3A 08 16 F2 | 	cmp	_var05, #58 wc
1f8a8     01 0D 02 C6 |  if_b	mov	_var07, _var02
1f8ac     02 0C 06 C1 |  if_b	add	_var07, #2
1f8b0     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1f8b4     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1f8b8     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1f8bc                 | LR__3532
1f8bc     01 0A 56 F2 | 	cmps	_var06, #1 wc
1f8c0     05 01 02 C6 |  if_b	mov	_var01, _var06
1f8c4     09 05 62 CC |  if_b	wrlong	_var03, arg01
1f8c8                 | ' 			vol = i;
1f8c8                 | ' 			*path = tt;
1f8c8                 | ' 		}
1f8c8                 | ' 		return vol;
1f8c8     00 FB 01 F6 | 	mov	result1, _var01
1f8cc     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1f8d0                 | LR__3533
1f8d0                 | ' 	}
1f8d0                 | ' #line 3170 "ff.c"
1f8d0                 | ' 	vol = 0;
1f8d0                 | ' 
1f8d0                 | ' 	return vol;
1f8d0     00 FA 05 F6 | 	mov	result1, #0
1f8d4                 | _fatfs_cc_get_ldnumber_ret
1f8d4     2D 00 64 FD | 	ret
1f8d8                 | 
1f8d8                 | _fatfs_cc_check_fs
1f8d8     04 4A 05 F6 | 	mov	COUNT_, #4
1f8dc     A8 00 A0 FD | 	call	#pushregs_
1f8e0     09 1F 02 F6 | 	mov	local01, arg01
1f8e4     03 1E 06 F1 | 	add	local01, #3
1f8e8     0F 01 48 FC | 	wrbyte	#0, local01
1f8ec     2D 1E 06 F1 | 	add	local01, #45
1f8f0     FF FF FF FF 
1f8f4     0F FF 6B FC | 	wrlong	##-1, local01
1f8f8     30 1E 86 F1 | 	sub	local01, #48
1f8fc     0F 13 02 F6 | 	mov	arg01, local01
1f900     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1f904     00 FA 0D F2 | 	cmp	result1, #0 wz
1f908     04 FA 05 56 |  if_ne	mov	result1, #4
1f90c     94 01 90 5D |  if_ne	jmp	#LR__3544
1f910     34 1E 06 F1 | 	add	local01, #52
1f914     0F 13 02 F6 | 	mov	arg01, local01
1f918     FE 13 06 F1 | 	add	arg01, #510
1f91c                 | ' {
1f91c                 | ' 
1f91c                 | ' 	return *((WORD*)ptr);
1f91c     09 21 E2 FA | 	rdword	local02, arg01
1f920     0F 23 C2 FA | 	rdbyte	local03, local01
1f924     34 1E 86 F1 | 	sub	local01, #52
1f928     11 25 E2 F8 | 	getbyte	local04, local03, #0
1f92c     EB 24 0E F2 | 	cmp	local04, #235 wz
1f930     11 17 02 56 |  if_ne	mov	arg03, local03
1f934     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1f938     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1f93c     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1f940     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1f944     44 01 90 5D |  if_ne	jmp	#LR__3543
1f948     10 25 32 F9 | 	getword	local04, local02, #0
1f94c     55 00 00 FF 
1f950     55 24 0E F2 | 	cmp	local04, ##43605 wz
1f954     2C 00 90 5D |  if_ne	jmp	#LR__3540
1f958     34 1E 06 F1 | 	add	local01, #52
1f95c     0F 13 02 F6 | 	mov	arg01, local01
1f960     34 1E 86 F1 | 	sub	local01, #52
1f964     52 12 06 F1 | 	add	arg01, #82
1f968     26 01 00 FF 
1f96c     B4 15 06 F6 | 	mov	arg02, ##@LR__4134
1f970     08 16 06 F6 | 	mov	arg03, #8
1f974     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1f978     00 FA 0D F2 | 	cmp	result1, #0 wz
1f97c                 | ' 			return 0;
1f97c     00 FA 05 A6 |  if_e	mov	result1, #0
1f980     20 01 90 AD |  if_e	jmp	#LR__3544
1f984                 | LR__3540
1f984     34 1E 06 F1 | 	add	local01, #52
1f988     0F 13 02 F6 | 	mov	arg01, local01
1f98c     0B 12 06 F1 | 	add	arg01, #11
1f990                 | ' {
1f990                 | ' 
1f990                 | ' 	return *((WORD*)ptr);
1f990     09 FB E1 FA | 	rdword	result1, arg01
1f994     0D 1E 06 F1 | 	add	local01, #13
1f998     0F 23 C2 FA | 	rdbyte	local03, local01
1f99c     41 1E 86 F1 | 	sub	local01, #65
1f9a0     FD 24 32 F9 | 	getword	local04, result1, #0
1f9a4     FD 14 32 F9 | 	getword	arg02, result1, #0
1f9a8     01 14 86 F1 | 	sub	arg02, #1
1f9ac     0A 25 CA F7 | 	test	local04, arg02 wz
1f9b0     D8 00 90 5D |  if_ne	jmp	#LR__3542
1f9b4     FD 14 32 F9 | 	getword	arg02, result1, #0
1f9b8     01 00 00 FF 
1f9bc     00 14 16 F2 | 	cmp	arg02, ##512 wc
1f9c0     C8 00 90 CD |  if_b	jmp	#LR__3542
1f9c4     FD 14 32 F9 | 	getword	arg02, result1, #0
1f9c8     01 00 00 FF 
1f9cc     01 14 16 F2 | 	cmp	arg02, ##513 wc
1f9d0     B8 00 90 3D |  if_ae	jmp	#LR__3542
1f9d4     11 13 02 F6 | 	mov	arg01, local03
1f9d8     07 12 4E F7 | 	zerox	arg01, #7 wz
1f9dc     AC 00 90 AD |  if_e	jmp	#LR__3542
1f9e0     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1f9e4     11 23 E2 F8 | 	getbyte	local03, local03, #0
1f9e8     01 22 86 F1 | 	sub	local03, #1
1f9ec     11 13 CA F7 | 	test	arg01, local03 wz
1f9f0     98 00 90 5D |  if_ne	jmp	#LR__3542
1f9f4     34 1E 06 F1 | 	add	local01, #52
1f9f8     0F 13 02 F6 | 	mov	arg01, local01
1f9fc     34 1E 86 F1 | 	sub	local01, #52
1fa00     0E 12 06 F1 | 	add	arg01, #14
1fa04                 | ' {
1fa04                 | ' 
1fa04                 | ' 	return *((WORD*)ptr);
1fa04     09 FB E9 FA | 	rdword	result1, arg01 wz
1fa08     80 00 90 AD |  if_e	jmp	#LR__3542
1fa0c     44 1E 06 F1 | 	add	local01, #68
1fa10     0F 13 C2 FA | 	rdbyte	arg01, local01
1fa14     44 1E 86 F1 | 	sub	local01, #68
1fa18     01 12 86 F1 | 	sub	arg01, #1
1fa1c     02 12 16 F2 | 	cmp	arg01, #2 wc
1fa20     68 00 90 3D |  if_ae	jmp	#LR__3542
1fa24     34 1E 06 F1 | 	add	local01, #52
1fa28     0F 13 02 F6 | 	mov	arg01, local01
1fa2c     34 1E 86 F1 | 	sub	local01, #52
1fa30     11 12 06 F1 | 	add	arg01, #17
1fa34                 | ' {
1fa34                 | ' 
1fa34                 | ' 	return *((WORD*)ptr);
1fa34     09 FB E9 FA | 	rdword	result1, arg01 wz
1fa38     50 00 90 AD |  if_e	jmp	#LR__3542
1fa3c     34 1E 06 F1 | 	add	local01, #52
1fa40     0F 13 02 F6 | 	mov	arg01, local01
1fa44     34 1E 86 F1 | 	sub	local01, #52
1fa48     13 12 06 F1 | 	add	arg01, #19
1fa4c                 | ' {
1fa4c                 | ' 
1fa4c                 | ' 	return *((WORD*)ptr);
1fa4c     09 FB E1 FA | 	rdword	result1, arg01
1fa50     FD 22 32 F9 | 	getword	local03, result1, #0
1fa54     80 22 16 F2 | 	cmp	local03, #128 wc
1fa58     20 00 90 3D |  if_ae	jmp	#LR__3541
1fa5c     34 1E 06 F1 | 	add	local01, #52
1fa60     0F 13 02 F6 | 	mov	arg01, local01
1fa64     34 1E 86 F1 | 	sub	local01, #52
1fa68     20 12 06 F1 | 	add	arg01, #32
1fa6c                 | ' {
1fa6c                 | ' 
1fa6c                 | ' 	return *((DWORD*)ptr);
1fa6c     09 FB 01 FB | 	rdlong	result1, arg01
1fa70     80 00 00 FF 
1fa74     00 FA 15 F2 | 	cmp	result1, ##65536 wc
1fa78     10 00 90 CD |  if_b	jmp	#LR__3542
1fa7c                 | LR__3541
1fa7c     4A 1E 06 F1 | 	add	local01, #74
1fa80                 | ' {
1fa80                 | ' 
1fa80                 | ' 	return *((WORD*)ptr);
1fa80     0F FB E9 FA | 	rdword	result1, local01 wz
1fa84                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1fa84                 | ' 			&& ld_word(fs->win +  14 ) != 0
1fa84                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1fa84                 | ' 			&& ld_word(fs->win +  17 ) != 0
1fa84                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1fa84                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1fa84                 | ' 				return 0;
1fa84     00 FA 05 56 |  if_ne	mov	result1, #0
1fa88     18 00 90 5D |  if_ne	jmp	#LR__3544
1fa8c                 | LR__3542
1fa8c                 | LR__3543
1fa8c                 | ' 		}
1fa8c                 | ' 	}
1fa8c                 | ' 	return sign == 0xAA55 ? 2 : 3;
1fa8c     10 23 32 F9 | 	getword	local03, local02, #0
1fa90     55 00 00 FF 
1fa94     55 22 0E F2 | 	cmp	local03, ##43605 wz
1fa98     02 24 06 A6 |  if_e	mov	local04, #2
1fa9c     03 24 06 56 |  if_ne	mov	local04, #3
1faa0     12 FB 01 F6 | 	mov	result1, local04
1faa4                 | LR__3544
1faa4     A7 F0 03 F6 | 	mov	ptra, fp
1faa8     B2 00 A0 FD | 	call	#popregs_
1faac                 | _fatfs_cc_check_fs_ret
1faac     2D 00 64 FD | 	ret
1fab0                 | 
1fab0                 | _fatfs_cc_find_volume
1fab0     05 4A 05 F6 | 	mov	COUNT_, #5
1fab4     A8 00 A0 FD | 	call	#pushregs_
1fab8     24 F0 07 F1 | 	add	ptra, #36
1fabc     09 1F 02 F6 | 	mov	local01, arg01
1fac0     0A 21 02 F6 | 	mov	local02, arg02
1fac4     0F 13 02 F6 | 	mov	arg01, local01
1fac8     00 14 06 F6 | 	mov	arg02, #0
1facc     08 FE BF FD | 	call	#_fatfs_cc_check_fs
1fad0     02 FA 0D F2 | 	cmp	result1, #2 wz
1fad4     0C 00 90 AD |  if_e	jmp	#LR__3550
1fad8     03 FA 15 F2 | 	cmp	result1, #3 wc
1fadc     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1fae0     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3558
1fae4                 | LR__3550
1fae4                 | ' 	for (i = 0; i < 4; i++) {
1fae4     00 22 06 F6 | 	mov	local03, #0
1fae8     97 26 48 FB | 	callpa	#(@LR__3552-@LR__3551)>>2,fcache_load_ptr_
1faec                 | LR__3551
1faec     04 22 16 F2 | 	cmp	local03, #4 wc
1faf0     44 00 90 3D |  if_ae	jmp	#LR__3553
1faf4     11 25 02 F6 | 	mov	local04, local03
1faf8     02 24 66 F0 | 	shl	local04, #2
1fafc     14 4E 05 F1 | 	add	fp, #20
1fb00     A7 24 02 F1 | 	add	local04, fp
1fb04     34 1E 06 F1 | 	add	local01, #52
1fb08     0F 13 02 F6 | 	mov	arg01, local01
1fb0c     34 1E 86 F1 | 	sub	local01, #52
1fb10     BE 13 06 F1 | 	add	arg01, #446
1fb14     11 15 02 F6 | 	mov	arg02, local03
1fb18     04 14 66 F0 | 	shl	arg02, #4
1fb1c     0A 13 02 F1 | 	add	arg01, arg02
1fb20     08 12 06 F1 | 	add	arg01, #8
1fb24                 | ' {
1fb24                 | ' 
1fb24                 | ' 	return *((DWORD*)ptr);
1fb24     09 FB 01 FB | 	rdlong	result1, arg01
1fb28     14 4E 85 F1 | 	sub	fp, #20
1fb2c     12 FB 61 FC | 	wrlong	result1, local04
1fb30     01 22 06 F1 | 	add	local03, #1
1fb34     B4 FF 9F FD | 	jmp	#LR__3551
1fb38                 | LR__3552
1fb38                 | LR__3553
1fb38     00 20 0E F2 | 	cmp	local02, #0 wz
1fb3c     10 25 02 56 |  if_ne	mov	local04, local02
1fb40     01 24 86 51 |  if_ne	sub	local04, #1
1fb44     00 24 06 A6 |  if_e	mov	local04, #0
1fb48     12 23 02 F6 | 	mov	local03, local04
1fb4c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1fb4c                 | ' 	}
1fb4c                 | ' 	i = part ? part - 1 : 0;
1fb4c                 | ' 	do {
1fb4c                 | LR__3554
1fb4c     11 25 02 F6 | 	mov	local04, local03
1fb50     02 24 66 F0 | 	shl	local04, #2
1fb54     14 4E 05 F1 | 	add	fp, #20
1fb58     A7 24 02 F1 | 	add	local04, fp
1fb5c     12 25 0A FB | 	rdlong	local04, local04 wz
1fb60     14 4E 85 F1 | 	sub	fp, #20
1fb64     28 00 90 AD |  if_e	jmp	#LR__3555
1fb68     11 25 02 F6 | 	mov	local04, local03
1fb6c     02 24 66 F0 | 	shl	local04, #2
1fb70     14 4E 05 F1 | 	add	fp, #20
1fb74     A7 24 02 F1 | 	add	local04, fp
1fb78     12 15 02 FB | 	rdlong	arg02, local04
1fb7c     0F 13 02 F6 | 	mov	arg01, local01
1fb80     14 4E 85 F1 | 	sub	fp, #20
1fb84     50 FD BF FD | 	call	#_fatfs_cc_check_fs
1fb88     FD 24 02 F6 | 	mov	local04, result1
1fb8c     04 00 90 FD | 	jmp	#LR__3556
1fb90                 | LR__3555
1fb90     03 24 06 F6 | 	mov	local04, #3
1fb94                 | LR__3556
1fb94     12 27 02 F6 | 	mov	local05, local04
1fb98     00 20 0E F2 | 	cmp	local02, #0 wz
1fb9c     02 26 16 A2 |  if_e	cmp	local05, #2 wc
1fba0     0C 00 90 8D |  if_c_and_z	jmp	#LR__3557
1fba4     01 22 06 A1 |  if_e	add	local03, #1
1fba8     04 22 16 A2 |  if_e	cmp	local03, #4 wc
1fbac     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3554
1fbb0                 | LR__3557
1fbb0                 | ' 	return fmt;
1fbb0     13 FB 01 F6 | 	mov	result1, local05
1fbb4                 | LR__3558
1fbb4     A7 F0 03 F6 | 	mov	ptra, fp
1fbb8     B2 00 A0 FD | 	call	#popregs_
1fbbc                 | _fatfs_cc_find_volume_ret
1fbbc     2D 00 64 FD | 	ret
1fbc0                 | 
1fbc0                 | _fatfs_cc_mount_volume
1fbc0     0B 4A 05 F6 | 	mov	COUNT_, #11
1fbc4     A8 00 A0 FD | 	call	#pushregs_
1fbc8     0A 1F 02 F6 | 	mov	local01, arg02
1fbcc     0B 21 02 F6 | 	mov	local02, arg03
1fbd0     0F 01 68 FC | 	wrlong	#0, local01
1fbd4     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
1fbd8     FD 22 02 F6 | 	mov	local03, result1
1fbdc     00 22 56 F2 | 	cmps	local03, #0 wc
1fbe0     0B FA 05 C6 |  if_b	mov	result1, #11
1fbe4     3C 05 90 CD |  if_b	jmp	#LR__3570
1fbe8     11 17 02 F6 | 	mov	arg03, local03
1fbec     02 16 66 F0 | 	shl	arg03, #2
1fbf0     F2 16 02 F1 | 	add	arg03, objptr
1fbf4     0B 25 0A FB | 	rdlong	local04, arg03 wz
1fbf8     0C FA 05 A6 |  if_e	mov	result1, #12
1fbfc     24 05 90 AD |  if_e	jmp	#LR__3570
1fc00     0F 25 62 FC | 	wrlong	local04, local01
1fc04     10 21 E2 F8 | 	getbyte	local02, local02, #0
1fc08     FE 20 06 F5 | 	and	local02, #254
1fc0c     12 17 CA FA | 	rdbyte	arg03, local04 wz
1fc10     4C 00 90 AD |  if_e	jmp	#LR__3561
1fc14     01 24 06 F1 | 	add	local04, #1
1fc18     12 13 CA FA | 	rdbyte	arg01, local04 wz
1fc1c     01 24 86 F1 | 	sub	local04, #1
1fc20     01 FA 05 56 |  if_ne	mov	result1, #1
1fc24                 | ' 
1fc24                 | ' 	return Stat;
1fc24     01 00 00 AF 
1fc28     20 E4 05 A1 |  if_e	add	objptr, ##544
1fc2c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fc30     01 00 00 AF 
1fc34     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fc38     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
1fc3c     01 16 CE F7 | 	test	arg03, #1 wz
1fc40     1C 00 90 5D |  if_ne	jmp	#LR__3560
1fc44     00 20 0E F2 | 	cmp	local02, #0 wz
1fc48     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
1fc4c     04 FA CD 57 |  if_ne	test	result1, #4 wz
1fc50                 | ' 				return FR_WRITE_PROTECTED;
1fc50     0A FA 05 56 |  if_ne	mov	result1, #10
1fc54     CC 04 90 5D |  if_ne	jmp	#LR__3570
1fc58                 | ' 			}
1fc58                 | ' 			return FR_OK;
1fc58     00 FA 05 F6 | 	mov	result1, #0
1fc5c     C4 04 90 FD | 	jmp	#LR__3570
1fc60                 | LR__3560
1fc60                 | LR__3561
1fc60     12 01 48 FC | 	wrbyte	#0, local04
1fc64     01 24 06 F1 | 	add	local04, #1
1fc68     12 23 42 FC | 	wrbyte	local03, local04
1fc6c     12 13 C2 FA | 	rdbyte	arg01, local04
1fc70     01 24 86 F1 | 	sub	local04, #1
1fc74     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
1fc78     FD 16 02 F6 | 	mov	arg03, result1
1fc7c     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
1fc80     01 26 CE F7 | 	test	local05, #1 wz
1fc84                 | ' 		return FR_NOT_READY;
1fc84     03 FA 05 56 |  if_ne	mov	result1, #3
1fc88     98 04 90 5D |  if_ne	jmp	#LR__3570
1fc8c     00 20 0E F2 | 	cmp	local02, #0 wz
1fc90     0B 27 02 56 |  if_ne	mov	local05, arg03
1fc94     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
1fc98     04 26 CE 57 |  if_ne	test	local05, #4 wz
1fc9c                 | ' 		return FR_WRITE_PROTECTED;
1fc9c     0A FA 05 56 |  if_ne	mov	result1, #10
1fca0     80 04 90 5D |  if_ne	jmp	#LR__3570
1fca4     12 13 02 F6 | 	mov	arg01, local04
1fca8     00 14 06 F6 | 	mov	arg02, #0
1fcac     00 FE BF FD | 	call	#_fatfs_cc_find_volume
1fcb0     FD 12 02 F6 | 	mov	arg01, result1
1fcb4     04 12 0E F2 | 	cmp	arg01, #4 wz
1fcb8     01 FA 05 A6 |  if_e	mov	result1, #1
1fcbc     64 04 90 AD |  if_e	jmp	#LR__3570
1fcc0     02 12 16 F2 | 	cmp	arg01, #2 wc
1fcc4     0D FA 05 36 |  if_ae	mov	result1, #13
1fcc8     58 04 90 3D |  if_ae	jmp	#LR__3570
1fccc     30 24 06 F1 | 	add	local04, #48
1fcd0     12 29 02 FB | 	rdlong	local06, local04
1fcd4     04 24 06 F1 | 	add	local04, #4
1fcd8     12 13 02 F6 | 	mov	arg01, local04
1fcdc     34 24 86 F1 | 	sub	local04, #52
1fce0     0B 12 06 F1 | 	add	arg01, #11
1fce4                 | ' {
1fce4                 | ' 
1fce4                 | ' 	return *((WORD*)ptr);
1fce4     09 FB E1 FA | 	rdword	result1, arg01
1fce8     01 00 00 FF 
1fcec     00 FA 0D F2 | 	cmp	result1, ##512 wz
1fcf0     0D FA 05 56 |  if_ne	mov	result1, #13
1fcf4     2C 04 90 5D |  if_ne	jmp	#LR__3570
1fcf8     34 24 06 F1 | 	add	local04, #52
1fcfc     12 13 02 F6 | 	mov	arg01, local04
1fd00     34 24 86 F1 | 	sub	local04, #52
1fd04     16 12 06 F1 | 	add	arg01, #22
1fd08                 | ' {
1fd08                 | ' 
1fd08                 | ' 	return *((WORD*)ptr);
1fd08     09 FB E1 FA | 	rdword	result1, arg01
1fd0c     FD 2A 0A F6 | 	mov	local07, result1 wz
1fd10     18 00 90 5D |  if_ne	jmp	#LR__3562
1fd14     34 24 06 F1 | 	add	local04, #52
1fd18     12 13 02 F6 | 	mov	arg01, local04
1fd1c     34 24 86 F1 | 	sub	local04, #52
1fd20     24 12 06 F1 | 	add	arg01, #36
1fd24                 | ' {
1fd24                 | ' 
1fd24                 | ' 	return *((DWORD*)ptr);
1fd24     09 FB 01 FB | 	rdlong	result1, arg01
1fd28     FD 2A 02 F6 | 	mov	local07, result1
1fd2c                 | LR__3562
1fd2c     1C 24 06 F1 | 	add	local04, #28
1fd30     12 2B 62 FC | 	wrlong	local07, local04
1fd34     28 24 06 F1 | 	add	local04, #40
1fd38     12 27 C2 FA | 	rdbyte	local05, local04
1fd3c     42 24 86 F1 | 	sub	local04, #66
1fd40     12 27 42 FC | 	wrbyte	local05, local04
1fd44     12 27 C2 FA | 	rdbyte	local05, local04
1fd48     02 24 86 F1 | 	sub	local04, #2
1fd4c     01 26 0E F2 | 	cmp	local05, #1 wz
1fd50     02 24 06 51 |  if_ne	add	local04, #2
1fd54     12 27 C2 5A |  if_ne	rdbyte	local05, local04
1fd58     02 24 86 51 |  if_ne	sub	local04, #2
1fd5c     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
1fd60     0D FA 05 56 |  if_ne	mov	result1, #13
1fd64     BC 03 90 5D |  if_ne	jmp	#LR__3570
1fd68     02 24 06 F1 | 	add	local04, #2
1fd6c     12 27 C2 FA | 	rdbyte	local05, local04
1fd70     13 2B 02 FD | 	qmul	local07, local05
1fd74     3F 24 06 F1 | 	add	local04, #63
1fd78     12 27 C2 FA | 	rdbyte	local05, local04
1fd7c     37 24 86 F1 | 	sub	local04, #55
1fd80     12 27 52 FC | 	wrword	local05, local04
1fd84     12 27 EA FA | 	rdword	local05, local04 wz
1fd88     0A 24 86 F1 | 	sub	local04, #10
1fd8c     18 2A 62 FD | 	getqx	local07
1fd90     20 00 90 AD |  if_e	jmp	#LR__3563
1fd94     0A 24 06 F1 | 	add	local04, #10
1fd98     12 27 E2 FA | 	rdword	local05, local04
1fd9c     13 23 32 F9 | 	getword	local03, local05, #0
1fda0     0A 24 86 F1 | 	sub	local04, #10
1fda4     13 27 32 F9 | 	getword	local05, local05, #0
1fda8     01 26 86 F1 | 	sub	local05, #1
1fdac     13 23 CA F7 | 	test	local03, local05 wz
1fdb0     08 00 90 AD |  if_e	jmp	#LR__3564
1fdb4                 | LR__3563
1fdb4     0D FA 05 F6 | 	mov	result1, #13
1fdb8     68 03 90 FD | 	jmp	#LR__3570
1fdbc                 | LR__3564
1fdbc     34 24 06 F1 | 	add	local04, #52
1fdc0     12 13 02 F6 | 	mov	arg01, local04
1fdc4     11 12 06 F1 | 	add	arg01, #17
1fdc8                 | ' {
1fdc8                 | ' 
1fdc8                 | ' 	return *((WORD*)ptr);
1fdc8     09 FB E1 FA | 	rdword	result1, arg01
1fdcc     2C 24 86 F1 | 	sub	local04, #44
1fdd0     12 FB 51 FC | 	wrword	result1, local04
1fdd4     12 27 E2 FA | 	rdword	local05, local04
1fdd8     08 24 86 F1 | 	sub	local04, #8
1fddc     13 13 52 F6 | 	abs	arg01, local05 wc
1fde0     09 13 42 F8 | 	getnib	arg01, arg01, #0
1fde4     09 13 8A F6 | 	negc	arg01, arg01 wz
1fde8     0D FA 05 56 |  if_ne	mov	result1, #13
1fdec     34 03 90 5D |  if_ne	jmp	#LR__3570
1fdf0     34 24 06 F1 | 	add	local04, #52
1fdf4     12 13 02 F6 | 	mov	arg01, local04
1fdf8     34 24 86 F1 | 	sub	local04, #52
1fdfc     13 12 06 F1 | 	add	arg01, #19
1fe00                 | ' {
1fe00                 | ' 
1fe00                 | ' 	return *((WORD*)ptr);
1fe00     09 FB E1 FA | 	rdword	result1, arg01
1fe04     FD 2C 0A F6 | 	mov	local08, result1 wz
1fe08     34 24 06 A1 |  if_e	add	local04, #52
1fe0c     12 13 02 A6 |  if_e	mov	arg01, local04
1fe10     34 24 86 A1 |  if_e	sub	local04, #52
1fe14     20 12 06 A1 |  if_e	add	arg01, #32
1fe18                 | ' {
1fe18                 | ' 
1fe18                 | ' 	return *((DWORD*)ptr);
1fe18     09 2D 02 AB |  if_e	rdlong	local08, arg01
1fe1c     34 24 06 F1 | 	add	local04, #52
1fe20     12 13 02 F6 | 	mov	arg01, local04
1fe24     34 24 86 F1 | 	sub	local04, #52
1fe28     0E 12 06 F1 | 	add	arg01, #14
1fe2c                 | ' {
1fe2c                 | ' 
1fe2c                 | ' 	return *((WORD*)ptr);
1fe2c     09 FB E1 FA | 	rdword	result1, arg01
1fe30     FD 12 02 F6 | 	mov	arg01, result1
1fe34     09 27 02 F6 | 	mov	local05, arg01
1fe38     0F 26 4E F7 | 	zerox	local05, #15 wz
1fe3c     0D FA 05 A6 |  if_e	mov	result1, #13
1fe40     E0 02 90 AD |  if_e	jmp	#LR__3570
1fe44     09 2F 32 F9 | 	getword	local09, arg01, #0
1fe48     15 2F 02 F1 | 	add	local09, local07
1fe4c     08 24 06 F1 | 	add	local04, #8
1fe50     12 27 E2 FA | 	rdword	local05, local04
1fe54     08 24 86 F1 | 	sub	local04, #8
1fe58     13 27 52 F6 | 	abs	local05, local05 wc
1fe5c     04 26 46 F0 | 	shr	local05, #4
1fe60     13 2F 82 F3 | 	sumc	local09, local05
1fe64     17 2D 12 F2 | 	cmp	local08, local09 wc
1fe68     0D FA 05 C6 |  if_b	mov	result1, #13
1fe6c     B4 02 90 CD |  if_b	jmp	#LR__3570
1fe70     17 2D 82 F1 | 	sub	local08, local09
1fe74     0A 24 06 F1 | 	add	local04, #10
1fe78     12 27 E2 FA | 	rdword	local05, local04
1fe7c     13 2D 12 FD | 	qdiv	local08, local05
1fe80     0A 24 86 F1 | 	sub	local04, #10
1fe84     18 26 62 FD | 	getqx	local05
1fe88     00 26 0E F2 | 	cmp	local05, #0 wz
1fe8c     0D FA 05 A6 |  if_e	mov	result1, #13
1fe90     90 02 90 AD |  if_e	jmp	#LR__3570
1fe94     00 30 06 F6 | 	mov	local10, #0
1fe98     FF FF 07 FF 
1fe9c     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
1fea0     03 30 06 C6 |  if_b	mov	local10, #3
1fea4     7F 00 00 FF 
1fea8     F6 27 16 F2 | 	cmp	local05, ##65526 wc
1feac     02 30 06 C6 |  if_b	mov	local10, #2
1feb0     07 00 00 FF 
1feb4     F6 27 16 F2 | 	cmp	local05, ##4086 wc
1feb8     01 30 06 C6 |  if_b	mov	local10, #1
1febc     00 30 0E F2 | 	cmp	local10, #0 wz
1fec0     0D FA 05 A6 |  if_e	mov	result1, #13
1fec4     5C 02 90 AD |  if_e	jmp	#LR__3570
1fec8     02 26 06 F1 | 	add	local05, #2
1fecc     18 24 06 F1 | 	add	local04, #24
1fed0     12 27 62 FC | 	wrlong	local05, local04
1fed4     08 24 06 F1 | 	add	local04, #8
1fed8     12 29 62 FC | 	wrlong	local06, local04
1fedc     14 27 02 F6 | 	mov	local05, local06
1fee0     09 13 32 F9 | 	getword	arg01, arg01, #0
1fee4     09 27 02 F1 | 	add	local05, arg01
1fee8     04 24 06 F1 | 	add	local04, #4
1feec     12 27 62 FC | 	wrlong	local05, local04
1fef0     14 27 02 F6 | 	mov	local05, local06
1fef4     17 27 02 F1 | 	add	local05, local09
1fef8     08 24 06 F1 | 	add	local04, #8
1fefc     12 27 62 FC | 	wrlong	local05, local04
1ff00     2C 24 86 F1 | 	sub	local04, #44
1ff04     03 30 0E F2 | 	cmp	local10, #3 wz
1ff08     5C 00 90 5D |  if_ne	jmp	#LR__3565
1ff0c     34 24 06 F1 | 	add	local04, #52
1ff10     12 13 02 F6 | 	mov	arg01, local04
1ff14     34 24 86 F1 | 	sub	local04, #52
1ff18     2A 12 06 F1 | 	add	arg01, #42
1ff1c                 | ' {
1ff1c                 | ' 
1ff1c                 | ' 	return *((WORD*)ptr);
1ff1c     09 FB E9 FA | 	rdword	result1, arg01 wz
1ff20     0D FA 05 56 |  if_ne	mov	result1, #13
1ff24     FC 01 90 5D |  if_ne	jmp	#LR__3570
1ff28     08 24 06 F1 | 	add	local04, #8
1ff2c     12 27 EA FA | 	rdword	local05, local04 wz
1ff30     08 24 86 F1 | 	sub	local04, #8
1ff34     0D FA 05 56 |  if_ne	mov	result1, #13
1ff38     E8 01 90 5D |  if_ne	jmp	#LR__3570
1ff3c     34 24 06 F1 | 	add	local04, #52
1ff40     12 13 02 F6 | 	mov	arg01, local04
1ff44     2C 12 06 F1 | 	add	arg01, #44
1ff48                 | ' {
1ff48                 | ' 
1ff48                 | ' 	return *((DWORD*)ptr);
1ff48     09 FB 01 FB | 	rdlong	result1, arg01
1ff4c     0C 24 86 F1 | 	sub	local04, #12
1ff50     12 FB 61 FC | 	wrlong	result1, local04
1ff54     10 24 86 F1 | 	sub	local04, #16
1ff58     12 33 02 FB | 	rdlong	local11, local04
1ff5c     18 24 86 F1 | 	sub	local04, #24
1ff60     02 32 66 F0 | 	shl	local11, #2
1ff64     6C 00 90 FD | 	jmp	#LR__3567
1ff68                 | LR__3565
1ff68     08 24 06 F1 | 	add	local04, #8
1ff6c     12 27 EA FA | 	rdword	local05, local04 wz
1ff70     08 24 86 F1 | 	sub	local04, #8
1ff74     0D FA 05 A6 |  if_e	mov	result1, #13
1ff78     A8 01 90 AD |  if_e	jmp	#LR__3570
1ff7c     24 24 06 F1 | 	add	local04, #36
1ff80     12 27 02 FB | 	rdlong	local05, local04
1ff84     15 27 02 F1 | 	add	local05, local07
1ff88     04 24 06 F1 | 	add	local04, #4
1ff8c     12 27 62 FC | 	wrlong	local05, local04
1ff90     28 24 86 F1 | 	sub	local04, #40
1ff94     02 30 0E F2 | 	cmp	local10, #2 wz
1ff98     18 24 06 A1 |  if_e	add	local04, #24
1ff9c     12 27 02 AB |  if_e	rdlong	local05, local04
1ffa0     18 24 86 A1 |  if_e	sub	local04, #24
1ffa4     01 26 66 A0 |  if_e	shl	local05, #1
1ffa8     24 00 90 AD |  if_e	jmp	#LR__3566
1ffac     18 24 06 F1 | 	add	local04, #24
1ffb0     12 33 02 FB | 	rdlong	local11, local04
1ffb4     19 27 02 F6 | 	mov	local05, local11
1ffb8     01 26 66 F0 | 	shl	local05, #1
1ffbc     19 27 02 F1 | 	add	local05, local11
1ffc0     01 26 46 F0 | 	shr	local05, #1
1ffc4     18 24 86 F1 | 	sub	local04, #24
1ffc8     01 32 06 F5 | 	and	local11, #1
1ffcc     19 27 02 F1 | 	add	local05, local11
1ffd0                 | LR__3566
1ffd0     13 33 02 F6 | 	mov	local11, local05
1ffd4                 | LR__3567
1ffd4     FF 33 06 F1 | 	add	local11, #511
1ffd8     09 32 46 F0 | 	shr	local11, #9
1ffdc     1C 24 06 F1 | 	add	local04, #28
1ffe0     12 17 02 FB | 	rdlong	arg03, local04
1ffe4     1C 24 86 F1 | 	sub	local04, #28
1ffe8     19 17 12 F2 | 	cmp	arg03, local11 wc
1ffec     0D FA 05 C6 |  if_b	mov	result1, #13
1fff0     30 01 90 CD |  if_b	jmp	#LR__3570
1fff4     14 24 06 F1 | 	add	local04, #20
1fff8     FF FF FF FF 
1fffc     12 FF 6B FC | 	wrlong	##-1, local04
20000     04 24 86 F1 | 	sub	local04, #4
20004     FF FF FF FF 
20008     12 FF 6B FC | 	wrlong	##-1, local04
2000c     0C 24 86 F1 | 	sub	local04, #12
20010     12 01 49 FC | 	wrbyte	#128, local04
20014     04 24 86 F1 | 	sub	local04, #4
20018     03 30 0E F2 | 	cmp	local10, #3 wz
2001c     D0 00 90 5D |  if_ne	jmp	#LR__3569
20020     34 24 06 F1 | 	add	local04, #52
20024     12 13 02 F6 | 	mov	arg01, local04
20028     34 24 86 F1 | 	sub	local04, #52
2002c     30 12 06 F1 | 	add	arg01, #48
20030                 | ' {
20030                 | ' 
20030                 | ' 	return *((WORD*)ptr);
20030     09 FB E1 FA | 	rdword	result1, arg01
20034     FD 26 32 F9 | 	getword	local05, result1, #0
20038     01 26 0E F2 | 	cmp	local05, #1 wz
2003c     B0 00 90 5D |  if_ne	jmp	#LR__3569
20040     01 28 06 F1 | 	add	local06, #1
20044     12 13 02 F6 | 	mov	arg01, local04
20048     14 15 02 F6 | 	mov	arg02, local06
2004c     CC CD BF FD | 	call	#_fatfs_cc_move_window
20050     00 FA 0D F2 | 	cmp	result1, #0 wz
20054     98 00 90 5D |  if_ne	jmp	#LR__3569
20058     04 24 06 F1 | 	add	local04, #4
2005c     12 01 48 FC | 	wrbyte	#0, local04
20060     30 24 06 F1 | 	add	local04, #48
20064     12 13 02 F6 | 	mov	arg01, local04
20068     34 24 86 F1 | 	sub	local04, #52
2006c     FE 13 06 F1 | 	add	arg01, #510
20070                 | ' {
20070                 | ' 
20070                 | ' 	return *((WORD*)ptr);
20070     09 FB E1 FA | 	rdword	result1, arg01
20074     FD 26 32 F9 | 	getword	local05, result1, #0
20078     55 00 00 FF 
2007c     55 26 0E F2 | 	cmp	local05, ##43605 wz
20080     34 24 06 A1 |  if_e	add	local04, #52
20084     12 13 02 A6 |  if_e	mov	arg01, local04
20088     34 24 86 A1 |  if_e	sub	local04, #52
2008c                 | ' {
2008c                 | ' 
2008c                 | ' 	return *((DWORD*)ptr);
2008c     09 FB 01 AB |  if_e	rdlong	result1, arg01
20090     A9 B0 20 AF 
20094     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
20098     54 00 90 5D |  if_ne	jmp	#LR__3568
2009c     34 24 06 F1 | 	add	local04, #52
200a0     12 13 02 F6 | 	mov	arg01, local04
200a4     34 24 86 F1 | 	sub	local04, #52
200a8     E4 13 06 F1 | 	add	arg01, #484
200ac                 | ' {
200ac                 | ' 
200ac                 | ' 	return *((DWORD*)ptr);
200ac     09 FB 01 FB | 	rdlong	result1, arg01
200b0     B9 A0 30 FF 
200b4     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
200b8     34 00 90 5D |  if_ne	jmp	#LR__3568
200bc     34 24 06 F1 | 	add	local04, #52
200c0     12 13 02 F6 | 	mov	arg01, local04
200c4     E8 13 06 F1 | 	add	arg01, #488
200c8                 | ' {
200c8                 | ' 
200c8                 | ' 	return *((DWORD*)ptr);
200c8     09 FB 01 FB | 	rdlong	result1, arg01
200cc     20 24 86 F1 | 	sub	local04, #32
200d0     12 FB 61 FC | 	wrlong	result1, local04
200d4     20 24 06 F1 | 	add	local04, #32
200d8     12 13 02 F6 | 	mov	arg01, local04
200dc     EC 13 06 F1 | 	add	arg01, #492
200e0                 | ' {
200e0                 | ' 
200e0                 | ' 	return *((DWORD*)ptr);
200e0     09 FB 01 FB | 	rdlong	result1, arg01
200e4     24 24 86 F1 | 	sub	local04, #36
200e8     12 FB 61 FC | 	wrlong	result1, local04
200ec     10 24 86 F1 | 	sub	local04, #16
200f0                 | LR__3568
200f0                 | LR__3569
200f0     12 31 42 FC | 	wrbyte	local10, local04
200f4     04 E4 05 F1 | 	add	objptr, #4
200f8     F2 26 E2 FA | 	rdword	local05, objptr
200fc     01 26 06 F1 | 	add	local05, #1
20100     F2 26 52 FC | 	wrword	local05, objptr
20104     F2 32 E2 FA | 	rdword	local11, objptr
20108     06 24 06 F1 | 	add	local04, #6
2010c     12 33 52 FC | 	wrword	local11, local04
20110     04 E4 05 F1 | 	add	objptr, #4
20114     06 24 06 F1 | 	add	local04, #6
20118     12 E5 61 FC | 	wrlong	objptr, local04
2011c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2011c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2011c                 | ' 			{
2011c                 | ' 
2011c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2011c                 | ' 
2011c                 | ' 
2011c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2011c                 | ' 
2011c                 | ' 			}
2011c                 | ' 		}
2011c                 | ' 
2011c                 | ' 
2011c                 | ' 	}
2011c                 | ' 
2011c                 | ' 	fs->fs_type = (BYTE)fmt;
2011c                 | ' 	fs->id = ++Fsid;
2011c                 | ' 
2011c                 | ' 	fs->lfnbuf = LfnBuf;
2011c                 | ' #line 3567 "ff.c"
2011c                 | ' 	return FR_OK;
2011c     00 FA 05 F6 | 	mov	result1, #0
20120     08 E4 85 F1 | 	sub	objptr, #8
20124                 | LR__3570
20124     A7 F0 03 F6 | 	mov	ptra, fp
20128     B2 00 A0 FD | 	call	#popregs_
2012c                 | _fatfs_cc_mount_volume_ret
2012c     2D 00 64 FD | 	ret
20130                 | 
20130                 | _fatfs_cc_validate
20130     09 01 0A F6 | 	mov	_var01, arg01 wz
20134     09 02 06 F6 | 	mov	_var02, #9
20138     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2013c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
20140     50 00 90 AD |  if_e	jmp	#LR__3580
20144     04 00 06 F1 | 	add	_var01, #4
20148     00 07 E2 FA | 	rdword	_var04, _var01
2014c     04 00 86 F1 | 	sub	_var01, #4
20150     00 13 02 FB | 	rdlong	arg01, _var01
20154     06 12 06 F1 | 	add	arg01, #6
20158     09 FB E1 FA | 	rdword	result1, arg01
2015c     FD 06 0A F2 | 	cmp	_var04, result1 wz
20160     30 00 90 5D |  if_ne	jmp	#LR__3580
20164     00 07 02 FB | 	rdlong	_var04, _var01
20168     01 06 06 F1 | 	add	_var04, #1
2016c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
20170     01 FA 05 56 |  if_ne	mov	result1, #1
20174                 | ' 
20174                 | ' 	return Stat;
20174     01 00 00 AF 
20178     20 E4 05 A1 |  if_e	add	objptr, ##544
2017c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
20180     01 00 00 AF 
20184     20 E4 85 A1 |  if_e	sub	objptr, ##544
20188     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2018c     01 04 CE F7 | 	test	_var03, #1 wz
20190     00 02 06 A6 |  if_e	mov	_var02, #0
20194                 | LR__3580
20194     00 02 0E F2 | 	cmp	_var02, #0 wz
20198     00 05 02 AB |  if_e	rdlong	_var03, _var01
2019c     00 04 06 56 |  if_ne	mov	_var03, #0
201a0     0A 05 62 FC | 	wrlong	_var03, arg02
201a4                 | ' 			res = FR_OK;
201a4                 | ' 		}
201a4                 | ' 
201a4                 | ' 	}
201a4                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
201a4                 | ' 	return res;
201a4     01 FB 01 F6 | 	mov	result1, _var02
201a8                 | _fatfs_cc_validate_ret
201a8     2D 00 64 FD | 	ret
201ac                 | 
201ac                 | _fatfs_cc_f_mount
201ac     01 4A 05 F6 | 	mov	COUNT_, #1
201b0     A8 00 A0 FD | 	call	#pushregs_
201b4     20 F0 07 F1 | 	add	ptra, #32
201b8     04 4E 05 F1 | 	add	fp, #4
201bc     A7 12 62 FC | 	wrlong	arg01, fp
201c0     04 4E 05 F1 | 	add	fp, #4
201c4     A7 14 62 FC | 	wrlong	arg02, fp
201c8     04 4E 05 F1 | 	add	fp, #4
201cc     A7 16 42 FC | 	wrbyte	arg03, fp
201d0     04 4E 85 F1 | 	sub	fp, #4
201d4     A7 16 02 FB | 	rdlong	arg03, fp
201d8     14 4E 05 F1 | 	add	fp, #20
201dc     A7 16 62 FC | 	wrlong	arg03, fp
201e0     A7 12 02 F6 | 	mov	arg01, fp
201e4     1C 4E 85 F1 | 	sub	fp, #28
201e8     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
201ec     14 4E 05 F1 | 	add	fp, #20
201f0     A7 FA 61 FC | 	wrlong	result1, fp
201f4     14 4E 85 F1 | 	sub	fp, #20
201f8     00 FA 55 F2 | 	cmps	result1, #0 wc
201fc     0B FA 05 C6 |  if_b	mov	result1, #11
20200     C0 00 90 CD |  if_b	jmp	#LR__3591
20204     14 4E 05 F1 | 	add	fp, #20
20208     A7 16 02 FB | 	rdlong	arg03, fp
2020c     02 16 66 F0 | 	shl	arg03, #2
20210     F2 16 02 F1 | 	add	arg03, objptr
20214     0B 17 0A FB | 	rdlong	arg03, arg03 wz
20218     04 4E 85 F1 | 	sub	fp, #4
2021c     A7 16 62 FC | 	wrlong	arg03, fp
20220     10 4E 85 F1 | 	sub	fp, #16
20224     28 00 90 AD |  if_e	jmp	#LR__3590
20228     10 4E 05 F1 | 	add	fp, #16
2022c     A7 16 02 FB | 	rdlong	arg03, fp
20230     10 4E 85 F1 | 	sub	fp, #16
20234     01 16 06 F1 | 	add	arg03, #1
20238     0B 13 C2 FA | 	rdbyte	arg01, arg03
2023c     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
20240     10 4E 05 F1 | 	add	fp, #16
20244     A7 16 02 FB | 	rdlong	arg03, fp
20248     10 4E 85 F1 | 	sub	fp, #16
2024c     0B 01 48 FC | 	wrbyte	#0, arg03
20250                 | LR__3590
20250     04 4E 05 F1 | 	add	fp, #4
20254     A7 1E 0A FB | 	rdlong	local01, fp wz
20258     04 4E 85 F1 | 	sub	fp, #4
2025c     04 4E 05 51 |  if_ne	add	fp, #4
20260     A7 1E 02 5B |  if_ne	rdlong	local01, fp
20264     04 4E 85 51 |  if_ne	sub	fp, #4
20268     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2026c     14 4E 05 F1 | 	add	fp, #20
20270     A7 1E 02 FB | 	rdlong	local01, fp
20274     02 1E 66 F0 | 	shl	local01, #2
20278     F2 1E 02 F1 | 	add	local01, objptr
2027c     10 4E 85 F1 | 	sub	fp, #16
20280     A7 16 02 FB | 	rdlong	arg03, fp
20284     0F 17 62 FC | 	wrlong	arg03, local01
20288     08 4E 05 F1 | 	add	fp, #8
2028c     A7 1E CA FA | 	rdbyte	local01, fp wz
20290     0C 4E 85 F1 | 	sub	fp, #12
20294     00 FA 05 A6 |  if_e	mov	result1, #0
20298     28 00 90 AD |  if_e	jmp	#LR__3591
2029c     08 4E 05 F1 | 	add	fp, #8
202a0     A7 12 02 F6 | 	mov	arg01, fp
202a4     04 4E 85 F1 | 	sub	fp, #4
202a8     A7 14 02 F6 | 	mov	arg02, fp
202ac     04 4E 85 F1 | 	sub	fp, #4
202b0     00 16 06 F6 | 	mov	arg03, #0
202b4     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
202b8     18 4E 05 F1 | 	add	fp, #24
202bc     A7 FA 61 FC | 	wrlong	result1, fp
202c0                 | ' 
202c0                 | ' 	res = mount_volume(&path, &fs, 0);
202c0                 | ' 	return res ;
202c0     18 4E 85 F1 | 	sub	fp, #24
202c4                 | LR__3591
202c4     A7 F0 03 F6 | 	mov	ptra, fp
202c8     B2 00 A0 FD | 	call	#popregs_
202cc                 | _fatfs_cc_f_mount_ret
202cc     2D 00 64 FD | 	ret
202d0                 | 
202d0                 | _fatfs_cc_f_open
202d0     02 4A 05 F6 | 	mov	COUNT_, #2
202d4     A8 00 A0 FD | 	call	#pushregs_
202d8     60 F0 07 F1 | 	add	ptra, #96
202dc     04 4E 05 F1 | 	add	fp, #4
202e0     A7 12 62 FC | 	wrlong	arg01, fp
202e4     04 4E 05 F1 | 	add	fp, #4
202e8     A7 14 62 FC | 	wrlong	arg02, fp
202ec     04 4E 05 F1 | 	add	fp, #4
202f0     A7 16 42 FC | 	wrbyte	arg03, fp
202f4     08 4E 85 F1 | 	sub	fp, #8
202f8     A7 18 0A FB | 	rdlong	arg04, fp wz
202fc     04 4E 85 F1 | 	sub	fp, #4
20300     09 FA 05 A6 |  if_e	mov	result1, #9
20304     98 06 90 AD |  if_e	jmp	#LR__3617
20308     0C 4E 05 F1 | 	add	fp, #12
2030c     A7 18 C2 FA | 	rdbyte	arg04, fp
20310     3F 18 06 F5 | 	and	arg04, #63
20314     A7 18 42 FC | 	wrbyte	arg04, fp
20318     04 4E 85 F1 | 	sub	fp, #4
2031c     A7 12 02 F6 | 	mov	arg01, fp
20320     3C 4E 05 F1 | 	add	fp, #60
20324     A7 14 02 F6 | 	mov	arg02, fp
20328     38 4E 85 F1 | 	sub	fp, #56
2032c     A7 16 C2 FA | 	rdbyte	arg03, fp
20330     0C 4E 85 F1 | 	sub	fp, #12
20334     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
20338     10 4E 05 F1 | 	add	fp, #16
2033c     A7 FA 61 FC | 	wrlong	result1, fp
20340     10 4E 85 F1 | 	sub	fp, #16
20344     00 FA 0D F2 | 	cmp	result1, #0 wz
20348     2C 06 90 5D |  if_ne	jmp	#LR__3616
2034c     44 4E 05 F1 | 	add	fp, #68
20350     A7 18 02 FB | 	rdlong	arg04, fp
20354     30 4E 85 F1 | 	sub	fp, #48
20358     A7 18 62 FC | 	wrlong	arg04, fp
2035c     A7 12 02 F6 | 	mov	arg01, fp
20360     0C 4E 85 F1 | 	sub	fp, #12
20364     A7 1E 02 FB | 	rdlong	local01, fp
20368     08 4E 85 F1 | 	sub	fp, #8
2036c     0F 15 02 F6 | 	mov	arg02, local01
20370     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
20374     10 4E 05 F1 | 	add	fp, #16
20378     A7 FA 61 FC | 	wrlong	result1, fp
2037c     10 4E 85 F1 | 	sub	fp, #16
20380     00 FA 0D F2 | 	cmp	result1, #0 wz
20384     1C 00 90 5D |  if_ne	jmp	#LR__3600
20388     3F 4E 05 F1 | 	add	fp, #63
2038c     A7 18 C2 FA | 	rdbyte	arg04, fp
20390     3F 4E 85 F1 | 	sub	fp, #63
20394     80 18 CE F7 | 	test	arg04, #128 wz
20398     10 4E 05 51 |  if_ne	add	fp, #16
2039c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
203a0     10 4E 85 51 |  if_ne	sub	fp, #16
203a4                 | LR__3600
203a4     0C 4E 05 F1 | 	add	fp, #12
203a8     A7 18 C2 FA | 	rdbyte	arg04, fp
203ac     0C 4E 85 F1 | 	sub	fp, #12
203b0     1C 18 CE F7 | 	test	arg04, #28 wz
203b4     F0 01 90 AD |  if_e	jmp	#LR__3605
203b8     10 4E 05 F1 | 	add	fp, #16
203bc     A7 1E 0A FB | 	rdlong	local01, fp wz
203c0     10 4E 85 F1 | 	sub	fp, #16
203c4     48 00 90 AD |  if_e	jmp	#LR__3602
203c8     10 4E 05 F1 | 	add	fp, #16
203cc     A7 18 02 FB | 	rdlong	arg04, fp
203d0     10 4E 85 F1 | 	sub	fp, #16
203d4     04 18 0E F2 | 	cmp	arg04, #4 wz
203d8     1C 00 90 5D |  if_ne	jmp	#LR__3601
203dc     14 4E 05 F1 | 	add	fp, #20
203e0     A7 12 02 F6 | 	mov	arg01, fp
203e4     14 4E 85 F1 | 	sub	fp, #20
203e8     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
203ec     10 4E 05 F1 | 	add	fp, #16
203f0     A7 FA 61 FC | 	wrlong	result1, fp
203f4     10 4E 85 F1 | 	sub	fp, #16
203f8                 | LR__3601
203f8     0C 4E 05 F1 | 	add	fp, #12
203fc     A7 1E C2 FA | 	rdbyte	local01, fp
20400     08 1E 46 F5 | 	or	local01, #8
20404     A7 1E 42 FC | 	wrbyte	local01, fp
20408     0C 4E 85 F1 | 	sub	fp, #12
2040c     3C 00 90 FD | 	jmp	#LR__3604
20410                 | LR__3602
20410     1A 4E 05 F1 | 	add	fp, #26
20414     A7 1E C2 FA | 	rdbyte	local01, fp
20418     1A 4E 85 F1 | 	sub	fp, #26
2041c     11 1E CE F7 | 	test	local01, #17 wz
20420     10 4E 05 51 |  if_ne	add	fp, #16
20424     A7 0E 68 5C |  if_ne	wrlong	#7, fp
20428     10 4E 85 51 |  if_ne	sub	fp, #16
2042c     1C 00 90 5D |  if_ne	jmp	#LR__3603
20430     0C 4E 05 F1 | 	add	fp, #12
20434     A7 1E C2 FA | 	rdbyte	local01, fp
20438     0C 4E 85 F1 | 	sub	fp, #12
2043c     04 1E CE F7 | 	test	local01, #4 wz
20440     10 4E 05 51 |  if_ne	add	fp, #16
20444     A7 10 68 5C |  if_ne	wrlong	#8, fp
20448     10 4E 85 51 |  if_ne	sub	fp, #16
2044c                 | LR__3603
2044c                 | LR__3604
2044c     10 4E 05 F1 | 	add	fp, #16
20450     A7 1E 0A FB | 	rdlong	local01, fp wz
20454     10 4E 85 F1 | 	sub	fp, #16
20458     A8 01 90 5D |  if_ne	jmp	#LR__3608
2045c     0C 4E 05 F1 | 	add	fp, #12
20460     A7 1E C2 FA | 	rdbyte	local01, fp
20464     0C 4E 85 F1 | 	sub	fp, #12
20468     08 1E CE F7 | 	test	local01, #8 wz
2046c     94 01 90 AD |  if_e	jmp	#LR__3608
20470     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
20474     54 4E 05 F1 | 	add	fp, #84
20478     A7 FA 61 FC | 	wrlong	result1, fp
2047c     24 4E 85 F1 | 	sub	fp, #36
20480     A7 12 02 FB | 	rdlong	arg01, fp
20484     0E 12 06 F1 | 	add	arg01, #14
20488     09 FB 61 FC | 	wrlong	result1, arg01
2048c     A7 12 02 FB | 	rdlong	arg01, fp
20490     16 12 06 F1 | 	add	arg01, #22
20494     24 4E 05 F1 | 	add	fp, #36
20498     A7 14 02 FB | 	rdlong	arg02, fp
2049c     09 15 62 FC | 	wrlong	arg02, arg01
204a0     10 4E 85 F1 | 	sub	fp, #16
204a4     A7 12 02 FB | 	rdlong	arg01, fp
204a8     14 4E 85 F1 | 	sub	fp, #20
204ac     A7 14 02 FB | 	rdlong	arg02, fp
204b0     30 4E 85 F1 | 	sub	fp, #48
204b4     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
204b8     48 4E 05 F1 | 	add	fp, #72
204bc     A7 FA 61 FC | 	wrlong	result1, fp
204c0     18 4E 85 F1 | 	sub	fp, #24
204c4     A7 1E 02 FB | 	rdlong	local01, fp
204c8     0B 1E 06 F1 | 	add	local01, #11
204cc     0F 41 48 FC | 	wrbyte	#32, local01
204d0     14 4E 05 F1 | 	add	fp, #20
204d4     A7 12 02 FB | 	rdlong	arg01, fp
204d8     14 4E 85 F1 | 	sub	fp, #20
204dc     A7 14 02 FB | 	rdlong	arg02, fp
204e0     30 4E 85 F1 | 	sub	fp, #48
204e4     00 16 06 F6 | 	mov	arg03, #0
204e8     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
204ec     30 4E 05 F1 | 	add	fp, #48
204f0     A7 12 02 FB | 	rdlong	arg01, fp
204f4     1C 12 06 F1 | 	add	arg01, #28
204f8     09 01 68 FC | 	wrlong	#0, arg01
204fc     14 4E 05 F1 | 	add	fp, #20
20500     A7 1E 02 FB | 	rdlong	local01, fp
20504     03 1E 06 F1 | 	add	local01, #3
20508     0F 03 48 FC | 	wrbyte	#1, local01
2050c     04 4E 05 F1 | 	add	fp, #4
20510     A7 1E 0A FB | 	rdlong	local01, fp wz
20514     48 4E 85 F1 | 	sub	fp, #72
20518     E8 00 90 AD |  if_e	jmp	#LR__3608
2051c     44 4E 05 F1 | 	add	fp, #68
20520     A7 1E 02 FB | 	rdlong	local01, fp
20524     30 1E 06 F1 | 	add	local01, #48
20528     0F 1F 02 FB | 	rdlong	local01, local01
2052c     14 4E 05 F1 | 	add	fp, #20
20530     A7 1E 62 FC | 	wrlong	local01, fp
20534     44 4E 85 F1 | 	sub	fp, #68
20538     A7 12 02 F6 | 	mov	arg01, fp
2053c     34 4E 05 F1 | 	add	fp, #52
20540     A7 14 02 FB | 	rdlong	arg02, fp
20544     48 4E 85 F1 | 	sub	fp, #72
20548     00 16 06 F6 | 	mov	arg03, #0
2054c     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
20550     10 4E 05 F1 | 	add	fp, #16
20554     A7 FA 61 FC | 	wrlong	result1, fp
20558     10 4E 85 F1 | 	sub	fp, #16
2055c     00 FA 0D F2 | 	cmp	result1, #0 wz
20560     A0 00 90 5D |  if_ne	jmp	#LR__3608
20564     44 4E 05 F1 | 	add	fp, #68
20568     A7 12 02 FB | 	rdlong	arg01, fp
2056c     14 4E 05 F1 | 	add	fp, #20
20570     A7 14 02 FB | 	rdlong	arg02, fp
20574     58 4E 85 F1 | 	sub	fp, #88
20578     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2057c     10 4E 05 F1 | 	add	fp, #16
20580     A7 FA 61 FC | 	wrlong	result1, fp
20584     34 4E 05 F1 | 	add	fp, #52
20588     A7 18 02 FB | 	rdlong	arg04, fp
2058c     04 4E 05 F1 | 	add	fp, #4
20590     A7 1E 02 FB | 	rdlong	local01, fp
20594     48 4E 85 F1 | 	sub	fp, #72
20598     01 1E 86 F1 | 	sub	local01, #1
2059c     10 18 06 F1 | 	add	arg04, #16
205a0     0C 1F 62 FC | 	wrlong	local01, arg04
205a4     5C 00 90 FD | 	jmp	#LR__3608
205a8                 | LR__3605
205a8     10 4E 05 F1 | 	add	fp, #16
205ac     A7 18 0A FB | 	rdlong	arg04, fp wz
205b0     10 4E 85 F1 | 	sub	fp, #16
205b4     4C 00 90 5D |  if_ne	jmp	#LR__3607
205b8     1A 4E 05 F1 | 	add	fp, #26
205bc     A7 18 C2 FA | 	rdbyte	arg04, fp
205c0     1A 4E 85 F1 | 	sub	fp, #26
205c4     10 18 CE F7 | 	test	arg04, #16 wz
205c8     10 4E 05 51 |  if_ne	add	fp, #16
205cc     A7 08 68 5C |  if_ne	wrlong	#4, fp
205d0     10 4E 85 51 |  if_ne	sub	fp, #16
205d4     2C 00 90 5D |  if_ne	jmp	#LR__3606
205d8     0C 4E 05 F1 | 	add	fp, #12
205dc     A7 18 C2 FA | 	rdbyte	arg04, fp
205e0     0C 4E 85 F1 | 	sub	fp, #12
205e4     02 18 CE F7 | 	test	arg04, #2 wz
205e8     1A 4E 05 51 |  if_ne	add	fp, #26
205ec     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
205f0     1A 4E 85 51 |  if_ne	sub	fp, #26
205f4     01 1E CE 57 |  if_ne	test	local01, #1 wz
205f8     10 4E 05 51 |  if_ne	add	fp, #16
205fc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
20600     10 4E 85 51 |  if_ne	sub	fp, #16
20604                 | LR__3606
20604                 | LR__3607
20604                 | LR__3608
20604     10 4E 05 F1 | 	add	fp, #16
20608     A7 1E 0A FB | 	rdlong	local01, fp wz
2060c     10 4E 85 F1 | 	sub	fp, #16
20610     60 00 90 5D |  if_ne	jmp	#LR__3609
20614     0C 4E 05 F1 | 	add	fp, #12
20618     A7 20 C2 FA | 	rdbyte	local02, fp
2061c     0C 4E 85 F1 | 	sub	fp, #12
20620     08 20 CE F7 | 	test	local02, #8 wz
20624     0C 4E 05 51 |  if_ne	add	fp, #12
20628     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2062c     40 20 46 55 |  if_ne	or	local02, #64
20630     A7 20 42 5C |  if_ne	wrbyte	local02, fp
20634     0C 4E 85 51 |  if_ne	sub	fp, #12
20638     04 4E 05 F1 | 	add	fp, #4
2063c     A7 20 02 FB | 	rdlong	local02, fp
20640     40 4E 05 F1 | 	add	fp, #64
20644     A7 1E 02 FB | 	rdlong	local01, fp
20648     30 1E 06 F1 | 	add	local01, #48
2064c     0F 1F 02 FB | 	rdlong	local01, local01
20650     20 20 06 F1 | 	add	local02, #32
20654     10 1F 62 FC | 	wrlong	local01, local02
20658     40 4E 85 F1 | 	sub	fp, #64
2065c     A7 20 02 FB | 	rdlong	local02, fp
20660     2C 4E 05 F1 | 	add	fp, #44
20664     A7 1E 02 FB | 	rdlong	local01, fp
20668     30 4E 85 F1 | 	sub	fp, #48
2066c     24 20 06 F1 | 	add	local02, #36
20670     10 1F 62 FC | 	wrlong	local01, local02
20674                 | LR__3609
20674     10 4E 05 F1 | 	add	fp, #16
20678     A7 20 0A FB | 	rdlong	local02, fp wz
2067c     10 4E 85 F1 | 	sub	fp, #16
20680     F4 02 90 5D |  if_ne	jmp	#LR__3615
20684     04 4E 05 F1 | 	add	fp, #4
20688     A7 20 02 FB | 	rdlong	local02, fp
2068c     40 4E 05 F1 | 	add	fp, #64
20690     A7 12 02 FB | 	rdlong	arg01, fp
20694     14 4E 85 F1 | 	sub	fp, #20
20698     A7 14 02 FB | 	rdlong	arg02, fp
2069c     30 4E 85 F1 | 	sub	fp, #48
206a0     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
206a4     08 20 06 F1 | 	add	local02, #8
206a8     10 FB 61 FC | 	wrlong	result1, local02
206ac     04 4E 05 F1 | 	add	fp, #4
206b0     A7 20 02 FB | 	rdlong	local02, fp
206b4     2C 4E 05 F1 | 	add	fp, #44
206b8     A7 12 02 FB | 	rdlong	arg01, fp
206bc     1C 12 06 F1 | 	add	arg01, #28
206c0                 | ' {
206c0                 | ' 
206c0                 | ' 	return *((DWORD*)ptr);
206c0     09 FB 01 FB | 	rdlong	result1, arg01
206c4     0C 20 06 F1 | 	add	local02, #12
206c8     10 FB 61 FC | 	wrlong	result1, local02
206cc     2C 4E 85 F1 | 	sub	fp, #44
206d0     A7 20 02 FB | 	rdlong	local02, fp
206d4     40 4E 05 F1 | 	add	fp, #64
206d8     A7 1E 02 FB | 	rdlong	local01, fp
206dc     10 1F 62 FC | 	wrlong	local01, local02
206e0     40 4E 85 F1 | 	sub	fp, #64
206e4     A7 20 02 FB | 	rdlong	local02, fp
206e8     40 4E 05 F1 | 	add	fp, #64
206ec     A7 1E 02 FB | 	rdlong	local01, fp
206f0     06 1E 06 F1 | 	add	local01, #6
206f4     0F 1F E2 FA | 	rdword	local01, local01
206f8     04 20 06 F1 | 	add	local02, #4
206fc     10 1F 52 FC | 	wrword	local01, local02
20700     40 4E 85 F1 | 	sub	fp, #64
20704     A7 20 02 FB | 	rdlong	local02, fp
20708     08 4E 05 F1 | 	add	fp, #8
2070c     A7 1E C2 FA | 	rdbyte	local01, fp
20710     10 20 06 F1 | 	add	local02, #16
20714     10 1F 42 FC | 	wrbyte	local01, local02
20718     08 4E 85 F1 | 	sub	fp, #8
2071c     A7 20 02 FB | 	rdlong	local02, fp
20720     11 20 06 F1 | 	add	local02, #17
20724     10 01 48 FC | 	wrbyte	#0, local02
20728     A7 20 02 FB | 	rdlong	local02, fp
2072c     1C 20 06 F1 | 	add	local02, #28
20730     10 01 68 FC | 	wrlong	#0, local02
20734     A7 20 02 FB | 	rdlong	local02, fp
20738     14 20 06 F1 | 	add	local02, #20
2073c     10 01 68 FC | 	wrlong	#0, local02
20740     A7 12 02 FB | 	rdlong	arg01, fp
20744     04 4E 85 F1 | 	sub	fp, #4
20748     28 12 06 F1 | 	add	arg01, #40
2074c     00 14 06 F6 | 	mov	arg02, #0
20750     09 16 C6 F9 | 	decod	arg03, #9
20754     98 00 A0 FD | 	call	#\builtin_bytefill_
20758     0C 4E 05 F1 | 	add	fp, #12
2075c     A7 20 C2 FA | 	rdbyte	local02, fp
20760     0C 4E 85 F1 | 	sub	fp, #12
20764     20 20 CE F7 | 	test	local02, #32 wz
20768     0C 02 90 AD |  if_e	jmp	#LR__3614
2076c     04 4E 05 F1 | 	add	fp, #4
20770     A7 1E 02 FB | 	rdlong	local01, fp
20774     04 4E 85 F1 | 	sub	fp, #4
20778     0C 1E 06 F1 | 	add	local01, #12
2077c     0F 21 02 FB | 	rdlong	local02, local01
20780     01 20 16 F2 | 	cmp	local02, #1 wc
20784     F0 01 90 CD |  if_b	jmp	#LR__3614
20788     04 4E 05 F1 | 	add	fp, #4
2078c     A7 1E 02 FB | 	rdlong	local01, fp
20790     0F 21 02 F6 | 	mov	local02, local01
20794     0C 1E 06 F1 | 	add	local01, #12
20798     0F 1F 02 FB | 	rdlong	local01, local01
2079c     14 20 06 F1 | 	add	local02, #20
207a0     10 1F 62 FC | 	wrlong	local01, local02
207a4     40 4E 05 F1 | 	add	fp, #64
207a8     A7 20 02 FB | 	rdlong	local02, fp
207ac     0A 20 06 F1 | 	add	local02, #10
207b0     10 21 E2 FA | 	rdword	local02, local02
207b4     09 20 66 F0 | 	shl	local02, #9
207b8     08 4E 05 F1 | 	add	fp, #8
207bc     A7 20 62 FC | 	wrlong	local02, fp
207c0     48 4E 85 F1 | 	sub	fp, #72
207c4     A7 20 02 FB | 	rdlong	local02, fp
207c8     08 20 06 F1 | 	add	local02, #8
207cc     10 1F 02 FB | 	rdlong	local01, local02
207d0     4C 4E 05 F1 | 	add	fp, #76
207d4     A7 1E 62 FC | 	wrlong	local01, fp
207d8                 | ' 				fp->fptr = fp->obj.objsize;
207d8                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
207d8                 | ' 				clst = fp->obj.sclust;
207d8                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
207d8     4C 4E 85 F1 | 	sub	fp, #76
207dc     A7 20 02 FB | 	rdlong	local02, fp
207e0     0C 20 06 F1 | 	add	local02, #12
207e4     10 1F 02 FB | 	rdlong	local01, local02
207e8     58 4E 05 F1 | 	add	fp, #88
207ec     A7 1E 62 FC | 	wrlong	local01, fp
207f0     5C 4E 85 F1 | 	sub	fp, #92
207f4                 | LR__3610
207f4     10 4E 05 F1 | 	add	fp, #16
207f8     A7 20 0A FB | 	rdlong	local02, fp wz
207fc     10 4E 85 F1 | 	sub	fp, #16
20800     94 00 90 5D |  if_ne	jmp	#LR__3611
20804     5C 4E 05 F1 | 	add	fp, #92
20808     A7 20 02 FB | 	rdlong	local02, fp
2080c     10 4E 85 F1 | 	sub	fp, #16
20810     A7 1E 02 FB | 	rdlong	local01, fp
20814     4C 4E 85 F1 | 	sub	fp, #76
20818     0F 21 1A F2 | 	cmp	local02, local01 wcz
2081c     78 00 90 ED |  if_be	jmp	#LR__3611
20820     04 4E 05 F1 | 	add	fp, #4
20824     A7 12 02 FB | 	rdlong	arg01, fp
20828     4C 4E 05 F1 | 	add	fp, #76
2082c     A7 14 02 FB | 	rdlong	arg02, fp
20830     50 4E 85 F1 | 	sub	fp, #80
20834     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
20838     50 4E 05 F1 | 	add	fp, #80
2083c     A7 FA 61 FC | 	wrlong	result1, fp
20840     50 4E 85 F1 | 	sub	fp, #80
20844     02 FA 15 F2 | 	cmp	result1, #2 wc
20848     10 4E 05 C1 |  if_b	add	fp, #16
2084c     A7 04 68 CC |  if_b	wrlong	#2, fp
20850     10 4E 85 C1 |  if_b	sub	fp, #16
20854     50 4E 05 F1 | 	add	fp, #80
20858     A7 20 02 FB | 	rdlong	local02, fp
2085c     50 4E 85 F1 | 	sub	fp, #80
20860     FF FF 7F FF 
20864     FF 21 0E F2 | 	cmp	local02, ##-1 wz
20868     10 4E 05 A1 |  if_e	add	fp, #16
2086c     A7 02 68 AC |  if_e	wrlong	#1, fp
20870     10 4E 85 A1 |  if_e	sub	fp, #16
20874     5C 4E 05 F1 | 	add	fp, #92
20878     A7 20 02 FB | 	rdlong	local02, fp
2087c     10 4E 85 F1 | 	sub	fp, #16
20880     A7 1E 02 FB | 	rdlong	local01, fp
20884     0F 21 82 F1 | 	sub	local02, local01
20888     10 4E 05 F1 | 	add	fp, #16
2088c     A7 20 62 FC | 	wrlong	local02, fp
20890     5C 4E 85 F1 | 	sub	fp, #92
20894     5C FF 9F FD | 	jmp	#LR__3610
20898                 | LR__3611
20898     04 4E 05 F1 | 	add	fp, #4
2089c     A7 20 02 FB | 	rdlong	local02, fp
208a0     4C 4E 05 F1 | 	add	fp, #76
208a4     A7 1E 02 FB | 	rdlong	local01, fp
208a8     18 20 06 F1 | 	add	local02, #24
208ac     10 1F 62 FC | 	wrlong	local01, local02
208b0     40 4E 85 F1 | 	sub	fp, #64
208b4     A7 20 0A FB | 	rdlong	local02, fp wz
208b8     10 4E 85 F1 | 	sub	fp, #16
208bc     B8 00 90 5D |  if_ne	jmp	#LR__3613
208c0     5C 4E 05 F1 | 	add	fp, #92
208c4     A7 1E 02 FB | 	rdlong	local01, fp
208c8     5C 4E 85 F1 | 	sub	fp, #92
208cc     FF 1F CE F7 | 	test	local01, #511 wz
208d0     A4 00 90 AD |  if_e	jmp	#LR__3613
208d4     44 4E 05 F1 | 	add	fp, #68
208d8     A7 12 02 FB | 	rdlong	arg01, fp
208dc     0C 4E 05 F1 | 	add	fp, #12
208e0     A7 14 02 FB | 	rdlong	arg02, fp
208e4     50 4E 85 F1 | 	sub	fp, #80
208e8     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
208ec     58 4E 05 F1 | 	add	fp, #88
208f0     A7 FA 61 FC | 	wrlong	result1, fp
208f4     00 FA 4D F2 | 	cmps	result1, #0 wz
208f8     58 4E 85 F1 | 	sub	fp, #88
208fc     10 4E 05 A1 |  if_e	add	fp, #16
20900     A7 04 68 AC |  if_e	wrlong	#2, fp
20904     10 4E 85 A1 |  if_e	sub	fp, #16
20908     6C 00 90 AD |  if_e	jmp	#LR__3612
2090c     04 4E 05 F1 | 	add	fp, #4
20910     A7 20 02 FB | 	rdlong	local02, fp
20914     54 4E 05 F1 | 	add	fp, #84
20918     A7 1E 02 FB | 	rdlong	local01, fp
2091c     04 4E 05 F1 | 	add	fp, #4
20920     A7 18 02 FB | 	rdlong	arg04, fp
20924     09 18 46 F0 | 	shr	arg04, #9
20928     0C 1F 02 F1 | 	add	local01, arg04
2092c     1C 20 06 F1 | 	add	local02, #28
20930     10 1F 62 FC | 	wrlong	local01, local02
20934     18 4E 85 F1 | 	sub	fp, #24
20938     A7 20 02 FB | 	rdlong	local02, fp
2093c     01 20 06 F1 | 	add	local02, #1
20940     10 13 C2 FA | 	rdbyte	arg01, local02
20944     40 4E 85 F1 | 	sub	fp, #64
20948     A7 20 02 FB | 	rdlong	local02, fp
2094c     10 15 02 F6 | 	mov	arg02, local02
20950     28 14 06 F1 | 	add	arg02, #40
20954     04 4E 85 F1 | 	sub	fp, #4
20958     1C 20 06 F1 | 	add	local02, #28
2095c     10 17 02 FB | 	rdlong	arg03, local02
20960     01 18 06 F6 | 	mov	arg04, #1
20964     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
20968     00 FA 0D F2 | 	cmp	result1, #0 wz
2096c     10 4E 05 51 |  if_ne	add	fp, #16
20970     A7 02 68 5C |  if_ne	wrlong	#1, fp
20974     10 4E 85 51 |  if_ne	sub	fp, #16
20978                 | LR__3612
20978                 | LR__3613
20978                 | LR__3614
20978                 | LR__3615
20978                 | LR__3616
20978     10 4E 05 F1 | 	add	fp, #16
2097c     A7 20 0A FB | 	rdlong	local02, fp wz
20980     10 4E 85 F1 | 	sub	fp, #16
20984     04 4E 05 51 |  if_ne	add	fp, #4
20988     A7 20 02 5B |  if_ne	rdlong	local02, fp
2098c     04 4E 85 51 |  if_ne	sub	fp, #4
20990     10 01 68 5C |  if_ne	wrlong	#0, local02
20994                 | ' 
20994                 | ' 	return res ;
20994     10 4E 05 F1 | 	add	fp, #16
20998     A7 FA 01 FB | 	rdlong	result1, fp
2099c     10 4E 85 F1 | 	sub	fp, #16
209a0                 | LR__3617
209a0     A7 F0 03 F6 | 	mov	ptra, fp
209a4     B2 00 A0 FD | 	call	#popregs_
209a8                 | _fatfs_cc_f_open_ret
209a8     2D 00 64 FD | 	ret
209ac                 | 
209ac                 | _fatfs_cc_f_read
209ac     0E 4A 05 F6 | 	mov	COUNT_, #14
209b0     A8 00 A0 FD | 	call	#pushregs_
209b4     38 F0 07 F1 | 	add	ptra, #56
209b8     04 4E 05 F1 | 	add	fp, #4
209bc     A7 12 62 FC | 	wrlong	arg01, fp
209c0     04 4E 05 F1 | 	add	fp, #4
209c4     A7 14 62 FC | 	wrlong	arg02, fp
209c8     04 4E 05 F1 | 	add	fp, #4
209cc     A7 16 62 FC | 	wrlong	arg03, fp
209d0     04 4E 05 F1 | 	add	fp, #4
209d4     A7 18 62 FC | 	wrlong	arg04, fp
209d8     08 4E 85 F1 | 	sub	fp, #8
209dc     A7 FA 01 FB | 	rdlong	result1, fp
209e0     2C 4E 05 F1 | 	add	fp, #44
209e4     A7 FA 61 FC | 	wrlong	result1, fp
209e8     24 4E 85 F1 | 	sub	fp, #36
209ec     A7 FA 01 FB | 	rdlong	result1, fp
209f0     FD 00 68 FC | 	wrlong	#0, result1
209f4     0C 4E 85 F1 | 	sub	fp, #12
209f8     A7 12 02 FB | 	rdlong	arg01, fp
209fc     14 4E 05 F1 | 	add	fp, #20
20a00     A7 14 02 F6 | 	mov	arg02, fp
20a04     18 4E 85 F1 | 	sub	fp, #24
20a08     24 F7 BF FD | 	call	#_fatfs_cc_validate
20a0c     14 4E 05 F1 | 	add	fp, #20
20a10     A7 FA 61 FC | 	wrlong	result1, fp
20a14     00 FA 4D F2 | 	cmps	result1, #0 wz
20a18     14 4E 85 F1 | 	sub	fp, #20
20a1c     20 00 90 5D |  if_ne	jmp	#LR__3620
20a20     04 4E 05 F1 | 	add	fp, #4
20a24     A7 14 02 FB | 	rdlong	arg02, fp
20a28     11 14 06 F1 | 	add	arg02, #17
20a2c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
20a30     10 4E 05 F1 | 	add	fp, #16
20a34     A7 14 62 FC | 	wrlong	arg02, fp
20a38     14 4E 85 F1 | 	sub	fp, #20
20a3c     10 00 90 AD |  if_e	jmp	#LR__3621
20a40                 | LR__3620
20a40     14 4E 05 F1 | 	add	fp, #20
20a44     A7 FA 01 FB | 	rdlong	result1, fp
20a48     14 4E 85 F1 | 	sub	fp, #20
20a4c     EC 05 90 FD | 	jmp	#LR__3640
20a50                 | LR__3621
20a50     04 4E 05 F1 | 	add	fp, #4
20a54     A7 18 02 FB | 	rdlong	arg04, fp
20a58     04 4E 85 F1 | 	sub	fp, #4
20a5c     10 18 06 F1 | 	add	arg04, #16
20a60     0C 19 C2 FA | 	rdbyte	arg04, arg04
20a64     01 18 CE F7 | 	test	arg04, #1 wz
20a68     07 FA 05 A6 |  if_e	mov	result1, #7
20a6c     CC 05 90 AD |  if_e	jmp	#LR__3640
20a70     04 4E 05 F1 | 	add	fp, #4
20a74     A7 1E 02 FB | 	rdlong	local01, fp
20a78     0F 21 02 F6 | 	mov	local02, local01
20a7c     0C 20 06 F1 | 	add	local02, #12
20a80     10 23 02 FB | 	rdlong	local03, local02
20a84     14 1E 06 F1 | 	add	local01, #20
20a88     0F 1F 02 FB | 	rdlong	local01, local01
20a8c     0F 23 82 F1 | 	sub	local03, local01
20a90     20 4E 05 F1 | 	add	fp, #32
20a94     A7 22 62 FC | 	wrlong	local03, fp
20a98     18 4E 85 F1 | 	sub	fp, #24
20a9c     A7 24 02 FB | 	rdlong	local04, fp
20aa0     0C 4E 85 F1 | 	sub	fp, #12
20aa4     11 25 1A F2 | 	cmp	local04, local03 wcz
20aa8     24 4E 05 11 |  if_a	add	fp, #36
20aac     A7 24 02 1B |  if_a	rdlong	local04, fp
20ab0     18 4E 85 11 |  if_a	sub	fp, #24
20ab4     A7 24 62 1C |  if_a	wrlong	local04, fp
20ab8     0C 4E 85 11 |  if_a	sub	fp, #12
20abc                 | ' 
20abc                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
20abc                 | LR__3622
20abc     0C 4E 05 F1 | 	add	fp, #12
20ac0     A7 20 02 FB | 	rdlong	local02, fp
20ac4     0C 4E 85 F1 | 	sub	fp, #12
20ac8     10 25 02 F6 | 	mov	local04, local02
20acc     01 24 16 F2 | 	cmp	local04, #1 wc
20ad0     64 05 90 CD |  if_b	jmp	#LR__3639
20ad4     04 4E 05 F1 | 	add	fp, #4
20ad8     A7 22 02 FB | 	rdlong	local03, fp
20adc     04 4E 85 F1 | 	sub	fp, #4
20ae0     14 22 06 F1 | 	add	local03, #20
20ae4     11 23 02 FB | 	rdlong	local03, local03
20ae8     FF 23 CE F7 | 	test	local03, #511 wz
20aec     3C 04 90 5D |  if_ne	jmp	#LR__3637
20af0     04 4E 05 F1 | 	add	fp, #4
20af4     A7 1E 02 FB | 	rdlong	local01, fp
20af8     14 1E 06 F1 | 	add	local01, #20
20afc     0F 23 02 FB | 	rdlong	local03, local01
20b00     09 22 46 F0 | 	shr	local03, #9
20b04     14 4E 05 F1 | 	add	fp, #20
20b08     A7 26 02 FB | 	rdlong	local05, fp
20b0c     13 29 02 F6 | 	mov	local06, local05
20b10     0A 28 06 F1 | 	add	local06, #10
20b14     14 2B E2 FA | 	rdword	local07, local06
20b18     0A 28 86 F1 | 	sub	local06, #10
20b1c     15 2D 32 F9 | 	getword	local08, local07, #0
20b20     01 2C 86 F1 | 	sub	local08, #1
20b24     16 23 0A F5 | 	and	local03, local08 wz
20b28     18 4E 05 F1 | 	add	fp, #24
20b2c     A7 22 62 FC | 	wrlong	local03, fp
20b30     30 4E 85 F1 | 	sub	fp, #48
20b34     E0 00 90 5D |  if_ne	jmp	#LR__3627
20b38     04 4E 05 F1 | 	add	fp, #4
20b3c     A7 22 02 FB | 	rdlong	local03, fp
20b40     04 4E 85 F1 | 	sub	fp, #4
20b44     14 22 06 F1 | 	add	local03, #20
20b48     11 23 0A FB | 	rdlong	local03, local03 wz
20b4c     20 00 90 5D |  if_ne	jmp	#LR__3623
20b50     04 4E 05 F1 | 	add	fp, #4
20b54     A7 22 02 FB | 	rdlong	local03, fp
20b58     08 22 06 F1 | 	add	local03, #8
20b5c     11 23 02 FB | 	rdlong	local03, local03
20b60     18 4E 05 F1 | 	add	fp, #24
20b64     A7 22 62 FC | 	wrlong	local03, fp
20b68     1C 4E 85 F1 | 	sub	fp, #28
20b6c     28 00 90 FD | 	jmp	#LR__3624
20b70                 | LR__3623
20b70     04 4E 05 F1 | 	add	fp, #4
20b74     A7 2C 02 FB | 	rdlong	local08, fp
20b78     16 13 02 F6 | 	mov	arg01, local08
20b7c     04 4E 85 F1 | 	sub	fp, #4
20b80     18 2C 06 F1 | 	add	local08, #24
20b84     16 15 02 FB | 	rdlong	arg02, local08
20b88     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
20b8c     1C 4E 05 F1 | 	add	fp, #28
20b90     A7 FA 61 FC | 	wrlong	result1, fp
20b94     1C 4E 85 F1 | 	sub	fp, #28
20b98                 | LR__3624
20b98     1C 4E 05 F1 | 	add	fp, #28
20b9c     A7 22 02 FB | 	rdlong	local03, fp
20ba0     1C 4E 85 F1 | 	sub	fp, #28
20ba4     02 22 16 F2 | 	cmp	local03, #2 wc
20ba8     1C 00 90 3D |  if_ae	jmp	#LR__3625
20bac     04 4E 05 F1 | 	add	fp, #4
20bb0     A7 22 02 FB | 	rdlong	local03, fp
20bb4     04 4E 85 F1 | 	sub	fp, #4
20bb8     11 22 06 F1 | 	add	local03, #17
20bbc     11 05 48 FC | 	wrbyte	#2, local03
20bc0     02 FA 05 F6 | 	mov	result1, #2
20bc4     74 04 90 FD | 	jmp	#LR__3640
20bc8                 | LR__3625
20bc8     1C 4E 05 F1 | 	add	fp, #28
20bcc     A7 22 02 FB | 	rdlong	local03, fp
20bd0     1C 4E 85 F1 | 	sub	fp, #28
20bd4     FF FF 7F FF 
20bd8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20bdc     1C 00 90 5D |  if_ne	jmp	#LR__3626
20be0     04 4E 05 F1 | 	add	fp, #4
20be4     A7 22 02 FB | 	rdlong	local03, fp
20be8     04 4E 85 F1 | 	sub	fp, #4
20bec     11 22 06 F1 | 	add	local03, #17
20bf0     11 03 48 FC | 	wrbyte	#1, local03
20bf4     01 FA 05 F6 | 	mov	result1, #1
20bf8     40 04 90 FD | 	jmp	#LR__3640
20bfc                 | LR__3626
20bfc     04 4E 05 F1 | 	add	fp, #4
20c00     A7 22 02 FB | 	rdlong	local03, fp
20c04     18 4E 05 F1 | 	add	fp, #24
20c08     A7 2C 02 FB | 	rdlong	local08, fp
20c0c     1C 4E 85 F1 | 	sub	fp, #28
20c10     18 22 06 F1 | 	add	local03, #24
20c14     11 2D 62 FC | 	wrlong	local08, local03
20c18                 | LR__3627
20c18     18 4E 05 F1 | 	add	fp, #24
20c1c     A7 12 02 FB | 	rdlong	arg01, fp
20c20     14 4E 85 F1 | 	sub	fp, #20
20c24     A7 22 02 FB | 	rdlong	local03, fp
20c28     04 4E 85 F1 | 	sub	fp, #4
20c2c     18 22 06 F1 | 	add	local03, #24
20c30     11 15 02 FB | 	rdlong	arg02, local03
20c34     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
20c38     20 4E 05 F1 | 	add	fp, #32
20c3c     A7 FA 61 FC | 	wrlong	result1, fp
20c40     20 4E 85 F1 | 	sub	fp, #32
20c44     00 FA 0D F2 | 	cmp	result1, #0 wz
20c48     1C 00 90 5D |  if_ne	jmp	#LR__3628
20c4c     04 4E 05 F1 | 	add	fp, #4
20c50     A7 22 02 FB | 	rdlong	local03, fp
20c54     04 4E 85 F1 | 	sub	fp, #4
20c58     11 22 06 F1 | 	add	local03, #17
20c5c     11 05 48 FC | 	wrbyte	#2, local03
20c60     02 FA 05 F6 | 	mov	result1, #2
20c64     D4 03 90 FD | 	jmp	#LR__3640
20c68                 | LR__3628
20c68     20 4E 05 F1 | 	add	fp, #32
20c6c     A7 22 02 FB | 	rdlong	local03, fp
20c70     10 4E 05 F1 | 	add	fp, #16
20c74     A7 2C 02 FB | 	rdlong	local08, fp
20c78     16 23 02 F1 | 	add	local03, local08
20c7c     10 4E 85 F1 | 	sub	fp, #16
20c80     A7 22 62 FC | 	wrlong	local03, fp
20c84     14 4E 85 F1 | 	sub	fp, #20
20c88     A7 22 02 FB | 	rdlong	local03, fp
20c8c     09 22 46 F0 | 	shr	local03, #9
20c90     20 4E 05 F1 | 	add	fp, #32
20c94     A7 22 62 FC | 	wrlong	local03, fp
20c98     2C 4E 85 F1 | 	sub	fp, #44
20c9c     01 22 16 F2 | 	cmp	local03, #1 wc
20ca0     5C 01 90 CD |  if_b	jmp	#LR__3632
20ca4     30 4E 05 F1 | 	add	fp, #48
20ca8     A7 22 02 FB | 	rdlong	local03, fp
20cac     04 4E 85 F1 | 	sub	fp, #4
20cb0     A7 2C 02 FB | 	rdlong	local08, fp
20cb4     16 23 02 F1 | 	add	local03, local08
20cb8     14 4E 85 F1 | 	sub	fp, #20
20cbc     A7 2C 02 FB | 	rdlong	local08, fp
20cc0     18 4E 85 F1 | 	sub	fp, #24
20cc4     0A 2C 06 F1 | 	add	local08, #10
20cc8     16 2D E2 FA | 	rdword	local08, local08
20ccc     16 23 1A F2 | 	cmp	local03, local08 wcz
20cd0     28 00 90 ED |  if_be	jmp	#LR__3629
20cd4     18 4E 05 F1 | 	add	fp, #24
20cd8     A7 1E 02 FB | 	rdlong	local01, fp
20cdc     0A 1E 06 F1 | 	add	local01, #10
20ce0     0F 23 E2 FA | 	rdword	local03, local01
20ce4     18 4E 05 F1 | 	add	fp, #24
20ce8     A7 2C 02 FB | 	rdlong	local08, fp
20cec     16 23 82 F1 | 	sub	local03, local08
20cf0     04 4E 85 F1 | 	sub	fp, #4
20cf4     A7 22 62 FC | 	wrlong	local03, fp
20cf8     2C 4E 85 F1 | 	sub	fp, #44
20cfc                 | LR__3629
20cfc     18 4E 05 F1 | 	add	fp, #24
20d00     A7 1E 02 FB | 	rdlong	local01, fp
20d04     01 1E 06 F1 | 	add	local01, #1
20d08     0F 13 C2 FA | 	rdbyte	arg01, local01
20d0c     1C 4E 05 F1 | 	add	fp, #28
20d10     A7 14 02 FB | 	rdlong	arg02, fp
20d14     14 4E 85 F1 | 	sub	fp, #20
20d18     A7 16 02 FB | 	rdlong	arg03, fp
20d1c     0C 4E 05 F1 | 	add	fp, #12
20d20     A7 18 02 FB | 	rdlong	arg04, fp
20d24     2C 4E 85 F1 | 	sub	fp, #44
20d28     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
20d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
20d30     1C 00 90 AD |  if_e	jmp	#LR__3630
20d34     04 4E 05 F1 | 	add	fp, #4
20d38     A7 22 02 FB | 	rdlong	local03, fp
20d3c     04 4E 85 F1 | 	sub	fp, #4
20d40     11 22 06 F1 | 	add	local03, #17
20d44     11 03 48 FC | 	wrbyte	#1, local03
20d48     01 FA 05 F6 | 	mov	result1, #1
20d4c     EC 02 90 FD | 	jmp	#LR__3640
20d50                 | LR__3630
20d50     04 4E 05 F1 | 	add	fp, #4
20d54     A7 1E 02 FB | 	rdlong	local01, fp
20d58     04 4E 85 F1 | 	sub	fp, #4
20d5c     10 1E 06 F1 | 	add	local01, #16
20d60     0F 23 C2 FA | 	rdbyte	local03, local01
20d64     80 22 CE F7 | 	test	local03, #128 wz
20d68     78 00 90 AD |  if_e	jmp	#LR__3631
20d6c     04 4E 05 F1 | 	add	fp, #4
20d70     A7 2C 02 FB | 	rdlong	local08, fp
20d74     1C 2C 06 F1 | 	add	local08, #28
20d78     16 2D 02 FB | 	rdlong	local08, local08
20d7c     1C 4E 05 F1 | 	add	fp, #28
20d80     A7 2E 02 FB | 	rdlong	local09, fp
20d84     17 2D 82 F1 | 	sub	local08, local09
20d88     0C 4E 05 F1 | 	add	fp, #12
20d8c     A7 30 02 FB | 	rdlong	local10, fp
20d90     2C 4E 85 F1 | 	sub	fp, #44
20d94     18 33 02 F6 | 	mov	local11, local10
20d98     19 2D 12 F2 | 	cmp	local08, local11 wc
20d9c     44 00 90 3D |  if_ae	jmp	#LR__3631
20da0     34 4E 05 F1 | 	add	fp, #52
20da4     A7 12 02 FB | 	rdlong	arg01, fp
20da8     30 4E 85 F1 | 	sub	fp, #48
20dac     A7 14 02 FB | 	rdlong	arg02, fp
20db0     0A 33 02 F6 | 	mov	local11, arg02
20db4     1C 32 06 F1 | 	add	local11, #28
20db8     19 2F 02 FB | 	rdlong	local09, local11
20dbc     1C 4E 05 F1 | 	add	fp, #28
20dc0     A7 26 02 FB | 	rdlong	local05, fp
20dc4     13 2F 82 F1 | 	sub	local09, local05
20dc8     09 2E 66 F0 | 	shl	local09, #9
20dcc     17 33 02 F6 | 	mov	local11, local09
20dd0     17 13 02 F1 | 	add	arg01, local09
20dd4     20 4E 85 F1 | 	sub	fp, #32
20dd8     28 14 06 F1 | 	add	arg02, #40
20ddc     09 16 C6 F9 | 	decod	arg03, #9
20de0     A0 4C BF FD | 	call	#__system____builtin_memmove
20de4                 | LR__3631
20de4     2C 4E 05 F1 | 	add	fp, #44
20de8     A7 22 02 FB | 	rdlong	local03, fp
20dec     09 22 66 F0 | 	shl	local03, #9
20df0     04 4E 85 F1 | 	sub	fp, #4
20df4     A7 22 62 FC | 	wrlong	local03, fp
20df8     28 4E 85 F1 | 	sub	fp, #40
20dfc                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
20dfc                 | ' 				}
20dfc                 | ' 
20dfc                 | ' 
20dfc                 | ' 				rcnt =  ((UINT) 512 )  * cc;
20dfc                 | ' 				continue;
20dfc     B4 01 90 FD | 	jmp	#LR__3638
20e00                 | LR__3632
20e00     04 4E 05 F1 | 	add	fp, #4
20e04     A7 22 02 FB | 	rdlong	local03, fp
20e08     1C 22 06 F1 | 	add	local03, #28
20e0c     11 23 02 FB | 	rdlong	local03, local03
20e10     1C 4E 05 F1 | 	add	fp, #28
20e14     A7 1E 02 FB | 	rdlong	local01, fp
20e18     20 4E 85 F1 | 	sub	fp, #32
20e1c     0F 23 0A F2 | 	cmp	local03, local01 wz
20e20     EC 00 90 AD |  if_e	jmp	#LR__3636
20e24     04 4E 05 F1 | 	add	fp, #4
20e28     A7 1E 02 FB | 	rdlong	local01, fp
20e2c     04 4E 85 F1 | 	sub	fp, #4
20e30     10 1E 06 F1 | 	add	local01, #16
20e34     0F 23 C2 FA | 	rdbyte	local03, local01
20e38     80 22 CE F7 | 	test	local03, #128 wz
20e3c     7C 00 90 AD |  if_e	jmp	#LR__3634
20e40     18 4E 05 F1 | 	add	fp, #24
20e44     A7 1E 02 FB | 	rdlong	local01, fp
20e48     01 1E 06 F1 | 	add	local01, #1
20e4c     0F 13 C2 FA | 	rdbyte	arg01, local01
20e50     14 4E 85 F1 | 	sub	fp, #20
20e54     A7 22 02 FB | 	rdlong	local03, fp
20e58     11 15 02 F6 | 	mov	arg02, local03
20e5c     28 14 06 F1 | 	add	arg02, #40
20e60     04 4E 85 F1 | 	sub	fp, #4
20e64     1C 22 06 F1 | 	add	local03, #28
20e68     11 17 02 FB | 	rdlong	arg03, local03
20e6c     01 18 06 F6 | 	mov	arg04, #1
20e70     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
20e74     00 FA 0D F2 | 	cmp	result1, #0 wz
20e78     1C 00 90 AD |  if_e	jmp	#LR__3633
20e7c     04 4E 05 F1 | 	add	fp, #4
20e80     A7 22 02 FB | 	rdlong	local03, fp
20e84     04 4E 85 F1 | 	sub	fp, #4
20e88     11 22 06 F1 | 	add	local03, #17
20e8c     11 03 48 FC | 	wrbyte	#1, local03
20e90     01 FA 05 F6 | 	mov	result1, #1
20e94     A4 01 90 FD | 	jmp	#LR__3640
20e98                 | LR__3633
20e98     04 4E 05 F1 | 	add	fp, #4
20e9c     A7 32 02 FB | 	rdlong	local11, fp
20ea0     19 23 02 F6 | 	mov	local03, local11
20ea4     04 4E 85 F1 | 	sub	fp, #4
20ea8     10 32 06 F1 | 	add	local11, #16
20eac     19 33 C2 FA | 	rdbyte	local11, local11
20eb0     7F 32 06 F5 | 	and	local11, #127
20eb4     10 22 06 F1 | 	add	local03, #16
20eb8     11 33 42 FC | 	wrbyte	local11, local03
20ebc                 | LR__3634
20ebc     18 4E 05 F1 | 	add	fp, #24
20ec0     A7 1E 02 FB | 	rdlong	local01, fp
20ec4     01 1E 06 F1 | 	add	local01, #1
20ec8     0F 13 C2 FA | 	rdbyte	arg01, local01
20ecc     14 4E 85 F1 | 	sub	fp, #20
20ed0     A7 14 02 FB | 	rdlong	arg02, fp
20ed4     28 14 06 F1 | 	add	arg02, #40
20ed8     1C 4E 05 F1 | 	add	fp, #28
20edc     A7 16 02 FB | 	rdlong	arg03, fp
20ee0     20 4E 85 F1 | 	sub	fp, #32
20ee4     01 18 06 F6 | 	mov	arg04, #1
20ee8     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
20eec     00 FA 0D F2 | 	cmp	result1, #0 wz
20ef0     1C 00 90 AD |  if_e	jmp	#LR__3635
20ef4     04 4E 05 F1 | 	add	fp, #4
20ef8     A7 22 02 FB | 	rdlong	local03, fp
20efc     04 4E 85 F1 | 	sub	fp, #4
20f00     11 22 06 F1 | 	add	local03, #17
20f04     11 03 48 FC | 	wrbyte	#1, local03
20f08     01 FA 05 F6 | 	mov	result1, #1
20f0c     2C 01 90 FD | 	jmp	#LR__3640
20f10                 | LR__3635
20f10                 | LR__3636
20f10     04 4E 05 F1 | 	add	fp, #4
20f14     A7 22 02 FB | 	rdlong	local03, fp
20f18     1C 4E 05 F1 | 	add	fp, #28
20f1c     A7 32 02 FB | 	rdlong	local11, fp
20f20     20 4E 85 F1 | 	sub	fp, #32
20f24     1C 22 06 F1 | 	add	local03, #28
20f28     11 33 62 FC | 	wrlong	local11, local03
20f2c                 | LR__3637
20f2c     04 4E 05 F1 | 	add	fp, #4
20f30     A7 1E 02 FB | 	rdlong	local01, fp
20f34     14 1E 06 F1 | 	add	local01, #20
20f38     0F 33 02 FB | 	rdlong	local11, local01
20f3c     FF 33 06 F5 | 	and	local11, #511
20f40     09 22 C6 F9 | 	decod	local03, #9
20f44     19 23 82 F1 | 	sub	local03, local11
20f48     24 4E 05 F1 | 	add	fp, #36
20f4c     A7 22 62 FC | 	wrlong	local03, fp
20f50     1C 4E 85 F1 | 	sub	fp, #28
20f54     A7 32 02 FB | 	rdlong	local11, fp
20f58     0C 4E 85 F1 | 	sub	fp, #12
20f5c     19 23 1A F2 | 	cmp	local03, local11 wcz
20f60     0C 4E 05 11 |  if_a	add	fp, #12
20f64     A7 22 02 1B |  if_a	rdlong	local03, fp
20f68     1C 4E 05 11 |  if_a	add	fp, #28
20f6c     A7 22 62 1C |  if_a	wrlong	local03, fp
20f70     28 4E 85 11 |  if_a	sub	fp, #40
20f74     34 4E 05 F1 | 	add	fp, #52
20f78     A7 12 02 FB | 	rdlong	arg01, fp
20f7c     30 4E 85 F1 | 	sub	fp, #48
20f80     A7 28 02 FB | 	rdlong	local06, fp
20f84     14 15 02 F6 | 	mov	arg02, local06
20f88     28 14 06 F1 | 	add	arg02, #40
20f8c     14 28 06 F1 | 	add	local06, #20
20f90     14 33 02 FB | 	rdlong	local11, local06
20f94     19 2F 02 F6 | 	mov	local09, local11
20f98     17 31 02 F6 | 	mov	local10, local09
20f9c     FF 31 06 F5 | 	and	local10, #511
20fa0     18 15 02 F1 | 	add	arg02, local10
20fa4     24 4E 05 F1 | 	add	fp, #36
20fa8     A7 16 02 FB | 	rdlong	arg03, fp
20fac     28 4E 85 F1 | 	sub	fp, #40
20fb0     D0 4A BF FD | 	call	#__system____builtin_memmove
20fb4                 | LR__3638
20fb4     0C 4E 05 F1 | 	add	fp, #12
20fb8     A7 22 02 FB | 	rdlong	local03, fp
20fbc     1C 4E 05 F1 | 	add	fp, #28
20fc0     A7 2C 02 FB | 	rdlong	local08, fp
20fc4     16 23 82 F1 | 	sub	local03, local08
20fc8     1C 4E 85 F1 | 	sub	fp, #28
20fcc     A7 22 62 FC | 	wrlong	local03, fp
20fd0     04 4E 05 F1 | 	add	fp, #4
20fd4     A7 1E 02 FB | 	rdlong	local01, fp
20fd8     0F 2B 02 FB | 	rdlong	local07, local01
20fdc     18 4E 05 F1 | 	add	fp, #24
20fe0     A7 2C 02 FB | 	rdlong	local08, fp
20fe4     16 2B 02 F1 | 	add	local07, local08
20fe8     0F 2B 62 FC | 	wrlong	local07, local01
20fec     0C 4E 05 F1 | 	add	fp, #12
20ff0     A7 22 02 FB | 	rdlong	local03, fp
20ff4     0C 4E 85 F1 | 	sub	fp, #12
20ff8     A7 34 02 FB | 	rdlong	local12, fp
20ffc     1A 23 02 F1 | 	add	local03, local12
21000     0C 4E 05 F1 | 	add	fp, #12
21004     A7 22 62 FC | 	wrlong	local03, fp
21008     30 4E 85 F1 | 	sub	fp, #48
2100c     A7 36 02 FB | 	rdlong	local13, fp
21010     1B 23 02 F6 | 	mov	local03, local13
21014     14 36 06 F1 | 	add	local13, #20
21018     1B 39 02 FB | 	rdlong	local14, local13
2101c     24 4E 05 F1 | 	add	fp, #36
21020     A7 28 02 FB | 	rdlong	local06, fp
21024     28 4E 85 F1 | 	sub	fp, #40
21028     14 39 02 F1 | 	add	local14, local06
2102c     14 22 06 F1 | 	add	local03, #20
21030     11 39 62 FC | 	wrlong	local14, local03
21034     84 FA 9F FD | 	jmp	#LR__3622
21038                 | LR__3639
21038                 | ' 
21038                 | ' 
21038                 | ' 
21038                 | ' 
21038                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
21038                 | ' 
21038                 | ' 	}
21038                 | ' 
21038                 | ' 	return FR_OK ;
21038     00 FA 05 F6 | 	mov	result1, #0
2103c                 | LR__3640
2103c     A7 F0 03 F6 | 	mov	ptra, fp
21040     B2 00 A0 FD | 	call	#popregs_
21044                 | _fatfs_cc_f_read_ret
21044     2D 00 64 FD | 	ret
21048                 | 
21048                 | _fatfs_cc_f_write
21048     15 4A 05 F6 | 	mov	COUNT_, #21
2104c     A8 00 A0 FD | 	call	#pushregs_
21050     34 F0 07 F1 | 	add	ptra, #52
21054     04 4E 05 F1 | 	add	fp, #4
21058     A7 12 62 FC | 	wrlong	arg01, fp
2105c     04 4E 05 F1 | 	add	fp, #4
21060     A7 14 62 FC | 	wrlong	arg02, fp
21064     04 4E 05 F1 | 	add	fp, #4
21068     A7 16 62 FC | 	wrlong	arg03, fp
2106c     04 4E 05 F1 | 	add	fp, #4
21070     A7 18 62 FC | 	wrlong	arg04, fp
21074     08 4E 85 F1 | 	sub	fp, #8
21078     A7 FA 01 FB | 	rdlong	result1, fp
2107c     28 4E 05 F1 | 	add	fp, #40
21080     A7 FA 61 FC | 	wrlong	result1, fp
21084     20 4E 85 F1 | 	sub	fp, #32
21088     A7 FA 01 FB | 	rdlong	result1, fp
2108c     FD 00 68 FC | 	wrlong	#0, result1
21090     0C 4E 85 F1 | 	sub	fp, #12
21094     A7 12 02 FB | 	rdlong	arg01, fp
21098     14 4E 05 F1 | 	add	fp, #20
2109c     A7 14 02 F6 | 	mov	arg02, fp
210a0     18 4E 85 F1 | 	sub	fp, #24
210a4     88 F0 BF FD | 	call	#_fatfs_cc_validate
210a8     14 4E 05 F1 | 	add	fp, #20
210ac     A7 FA 61 FC | 	wrlong	result1, fp
210b0     00 FA 4D F2 | 	cmps	result1, #0 wz
210b4     14 4E 85 F1 | 	sub	fp, #20
210b8     20 00 90 5D |  if_ne	jmp	#LR__3650
210bc     04 4E 05 F1 | 	add	fp, #4
210c0     A7 14 02 FB | 	rdlong	arg02, fp
210c4     11 14 06 F1 | 	add	arg02, #17
210c8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
210cc     10 4E 05 F1 | 	add	fp, #16
210d0     A7 14 62 FC | 	wrlong	arg02, fp
210d4     14 4E 85 F1 | 	sub	fp, #20
210d8     10 00 90 AD |  if_e	jmp	#LR__3651
210dc                 | LR__3650
210dc     14 4E 05 F1 | 	add	fp, #20
210e0     A7 FA 01 FB | 	rdlong	result1, fp
210e4     14 4E 85 F1 | 	sub	fp, #20
210e8     44 07 90 FD | 	jmp	#LR__3673
210ec                 | LR__3651
210ec     04 4E 05 F1 | 	add	fp, #4
210f0     A7 14 02 FB | 	rdlong	arg02, fp
210f4     04 4E 85 F1 | 	sub	fp, #4
210f8     10 14 06 F1 | 	add	arg02, #16
210fc     0A 15 C2 FA | 	rdbyte	arg02, arg02
21100     02 14 CE F7 | 	test	arg02, #2 wz
21104     07 FA 05 A6 |  if_e	mov	result1, #7
21108     24 07 90 AD |  if_e	jmp	#LR__3673
2110c     04 4E 05 F1 | 	add	fp, #4
21110     A7 14 02 FB | 	rdlong	arg02, fp
21114     0A 13 02 F6 | 	mov	arg01, arg02
21118     14 12 06 F1 | 	add	arg01, #20
2111c     09 13 02 FB | 	rdlong	arg01, arg01
21120     08 4E 05 F1 | 	add	fp, #8
21124     A7 FA 01 FB | 	rdlong	result1, fp
21128     FD 12 02 F1 | 	add	arg01, result1
2112c     0C 4E 85 F1 | 	sub	fp, #12
21130     14 14 06 F1 | 	add	arg02, #20
21134     0A FB 01 FB | 	rdlong	result1, arg02
21138     FD 12 12 F2 | 	cmp	arg01, result1 wc
2113c     24 00 90 3D |  if_ae	jmp	#LR__3652
21140     04 4E 05 F1 | 	add	fp, #4
21144     A7 14 02 FB | 	rdlong	arg02, fp
21148     01 FA 65 F6 | 	neg	result1, #1
2114c     14 14 06 F1 | 	add	arg02, #20
21150     0A 15 02 FB | 	rdlong	arg02, arg02
21154     0A FB 81 F1 | 	sub	result1, arg02
21158     08 4E 05 F1 | 	add	fp, #8
2115c     A7 FA 61 FC | 	wrlong	result1, fp
21160     0C 4E 85 F1 | 	sub	fp, #12
21164                 | LR__3652
21164                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
21164                 | ' 	}
21164                 | ' 
21164                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
21164                 | LR__3653
21164     0C 4E 05 F1 | 	add	fp, #12
21168     A7 FA 01 FB | 	rdlong	result1, fp
2116c     0C 4E 85 F1 | 	sub	fp, #12
21170     01 FA 15 F2 | 	cmp	result1, #1 wc
21174     90 06 90 CD |  if_b	jmp	#LR__3672
21178     04 4E 05 F1 | 	add	fp, #4
2117c     A7 FA 01 FB | 	rdlong	result1, fp
21180     04 4E 85 F1 | 	sub	fp, #4
21184     14 FA 05 F1 | 	add	result1, #20
21188     FD FA 01 FB | 	rdlong	result1, result1
2118c     FF FB CD F7 | 	test	result1, #511 wz
21190     D8 04 90 5D |  if_ne	jmp	#LR__3668
21194     04 4E 05 F1 | 	add	fp, #4
21198     A7 FA 01 FB | 	rdlong	result1, fp
2119c     14 FA 05 F1 | 	add	result1, #20
211a0     FD FA 01 FB | 	rdlong	result1, result1
211a4     09 FA 45 F0 | 	shr	result1, #9
211a8     14 4E 05 F1 | 	add	fp, #20
211ac     A7 14 02 FB | 	rdlong	arg02, fp
211b0     0A 14 06 F1 | 	add	arg02, #10
211b4     0A 19 E2 FA | 	rdword	arg04, arg02
211b8     0C 15 32 F9 | 	getword	arg02, arg04, #0
211bc     01 14 86 F1 | 	sub	arg02, #1
211c0     0A FB 09 F5 | 	and	result1, arg02 wz
211c4     14 4E 05 F1 | 	add	fp, #20
211c8     A7 FA 61 FC | 	wrlong	result1, fp
211cc     2C 4E 85 F1 | 	sub	fp, #44
211d0     44 01 90 5D |  if_ne	jmp	#LR__3659
211d4     04 4E 05 F1 | 	add	fp, #4
211d8     A7 FA 01 FB | 	rdlong	result1, fp
211dc     04 4E 85 F1 | 	sub	fp, #4
211e0     14 FA 05 F1 | 	add	result1, #20
211e4     FD 14 0A FB | 	rdlong	arg02, result1 wz
211e8     44 00 90 5D |  if_ne	jmp	#LR__3654
211ec     04 4E 05 F1 | 	add	fp, #4
211f0     A7 14 02 FB | 	rdlong	arg02, fp
211f4     08 14 06 F1 | 	add	arg02, #8
211f8     0A 15 0A FB | 	rdlong	arg02, arg02 wz
211fc     18 4E 05 F1 | 	add	fp, #24
21200     A7 14 62 FC | 	wrlong	arg02, fp
21204     1C 4E 85 F1 | 	sub	fp, #28
21208     4C 00 90 5D |  if_ne	jmp	#LR__3655
2120c     04 4E 05 F1 | 	add	fp, #4
21210     A7 12 02 FB | 	rdlong	arg01, fp
21214     04 4E 85 F1 | 	sub	fp, #4
21218     00 14 06 F6 | 	mov	arg02, #0
2121c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
21220     1C 4E 05 F1 | 	add	fp, #28
21224     A7 FA 61 FC | 	wrlong	result1, fp
21228     1C 4E 85 F1 | 	sub	fp, #28
2122c     28 00 90 FD | 	jmp	#LR__3655
21230                 | LR__3654
21230     04 4E 05 F1 | 	add	fp, #4
21234     A7 18 02 FB | 	rdlong	arg04, fp
21238     0C 13 02 F6 | 	mov	arg01, arg04
2123c     04 4E 85 F1 | 	sub	fp, #4
21240     18 18 06 F1 | 	add	arg04, #24
21244     0C 15 02 FB | 	rdlong	arg02, arg04
21248     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2124c     1C 4E 05 F1 | 	add	fp, #28
21250     A7 FA 61 FC | 	wrlong	result1, fp
21254     1C 4E 85 F1 | 	sub	fp, #28
21258                 | LR__3655
21258     1C 4E 05 F1 | 	add	fp, #28
2125c     A7 FA 09 FB | 	rdlong	result1, fp wz
21260     1C 4E 85 F1 | 	sub	fp, #28
21264     A0 05 90 AD |  if_e	jmp	#LR__3672
21268     1C 4E 05 F1 | 	add	fp, #28
2126c     A7 FA 01 FB | 	rdlong	result1, fp
21270     1C 4E 85 F1 | 	sub	fp, #28
21274     01 FA 0D F2 | 	cmp	result1, #1 wz
21278     1C 00 90 5D |  if_ne	jmp	#LR__3656
2127c     04 4E 05 F1 | 	add	fp, #4
21280     A7 FA 01 FB | 	rdlong	result1, fp
21284     04 4E 85 F1 | 	sub	fp, #4
21288     11 FA 05 F1 | 	add	result1, #17
2128c     FD 04 48 FC | 	wrbyte	#2, result1
21290     02 FA 05 F6 | 	mov	result1, #2
21294     98 05 90 FD | 	jmp	#LR__3673
21298                 | LR__3656
21298     1C 4E 05 F1 | 	add	fp, #28
2129c     A7 FA 01 FB | 	rdlong	result1, fp
212a0     1C 4E 85 F1 | 	sub	fp, #28
212a4     FF FF 7F FF 
212a8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
212ac     1C 00 90 5D |  if_ne	jmp	#LR__3657
212b0     04 4E 05 F1 | 	add	fp, #4
212b4     A7 FA 01 FB | 	rdlong	result1, fp
212b8     04 4E 85 F1 | 	sub	fp, #4
212bc     11 FA 05 F1 | 	add	result1, #17
212c0     FD 02 48 FC | 	wrbyte	#1, result1
212c4     01 FA 05 F6 | 	mov	result1, #1
212c8     64 05 90 FD | 	jmp	#LR__3673
212cc                 | LR__3657
212cc     04 4E 05 F1 | 	add	fp, #4
212d0     A7 FA 01 FB | 	rdlong	result1, fp
212d4     18 4E 05 F1 | 	add	fp, #24
212d8     A7 18 02 FB | 	rdlong	arg04, fp
212dc     18 FA 05 F1 | 	add	result1, #24
212e0     FD 18 62 FC | 	wrlong	arg04, result1
212e4     18 4E 85 F1 | 	sub	fp, #24
212e8     A7 FA 01 FB | 	rdlong	result1, fp
212ec     04 4E 85 F1 | 	sub	fp, #4
212f0     08 FA 05 F1 | 	add	result1, #8
212f4     FD FA 09 FB | 	rdlong	result1, result1 wz
212f8     1C 00 90 5D |  if_ne	jmp	#LR__3658
212fc     04 4E 05 F1 | 	add	fp, #4
21300     A7 18 02 FB | 	rdlong	arg04, fp
21304     18 4E 05 F1 | 	add	fp, #24
21308     A7 FA 01 FB | 	rdlong	result1, fp
2130c     1C 4E 85 F1 | 	sub	fp, #28
21310     08 18 06 F1 | 	add	arg04, #8
21314     0C FB 61 FC | 	wrlong	result1, arg04
21318                 | LR__3658
21318                 | LR__3659
21318     04 4E 05 F1 | 	add	fp, #4
2131c     A7 18 02 FB | 	rdlong	arg04, fp
21320     04 4E 85 F1 | 	sub	fp, #4
21324     10 18 06 F1 | 	add	arg04, #16
21328     0C 19 C2 FA | 	rdbyte	arg04, arg04
2132c     80 18 CE F7 | 	test	arg04, #128 wz
21330     7C 00 90 AD |  if_e	jmp	#LR__3661
21334     18 4E 05 F1 | 	add	fp, #24
21338     A7 18 02 FB | 	rdlong	arg04, fp
2133c     01 18 06 F1 | 	add	arg04, #1
21340     0C 13 C2 FA | 	rdbyte	arg01, arg04
21344     14 4E 85 F1 | 	sub	fp, #20
21348     A7 18 02 FB | 	rdlong	arg04, fp
2134c     0C 15 02 F6 | 	mov	arg02, arg04
21350     28 14 06 F1 | 	add	arg02, #40
21354     04 4E 85 F1 | 	sub	fp, #4
21358     1C 18 06 F1 | 	add	arg04, #28
2135c     0C 17 02 FB | 	rdlong	arg03, arg04
21360     01 18 06 F6 | 	mov	arg04, #1
21364     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
21368     00 FA 0D F2 | 	cmp	result1, #0 wz
2136c     1C 00 90 AD |  if_e	jmp	#LR__3660
21370     04 4E 05 F1 | 	add	fp, #4
21374     A7 FA 01 FB | 	rdlong	result1, fp
21378     04 4E 85 F1 | 	sub	fp, #4
2137c     11 FA 05 F1 | 	add	result1, #17
21380     FD 02 48 FC | 	wrbyte	#1, result1
21384     01 FA 05 F6 | 	mov	result1, #1
21388     A4 04 90 FD | 	jmp	#LR__3673
2138c                 | LR__3660
2138c     04 4E 05 F1 | 	add	fp, #4
21390     A7 18 02 FB | 	rdlong	arg04, fp
21394     0C FB 01 F6 | 	mov	result1, arg04
21398     04 4E 85 F1 | 	sub	fp, #4
2139c     10 18 06 F1 | 	add	arg04, #16
213a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
213a4     7F 18 06 F5 | 	and	arg04, #127
213a8     10 FA 05 F1 | 	add	result1, #16
213ac     FD 18 42 FC | 	wrbyte	arg04, result1
213b0                 | LR__3661
213b0     18 4E 05 F1 | 	add	fp, #24
213b4     A7 12 02 FB | 	rdlong	arg01, fp
213b8     14 4E 85 F1 | 	sub	fp, #20
213bc     A7 14 02 FB | 	rdlong	arg02, fp
213c0     04 4E 85 F1 | 	sub	fp, #4
213c4     18 14 06 F1 | 	add	arg02, #24
213c8     0A 15 02 FB | 	rdlong	arg02, arg02
213cc     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
213d0     20 4E 05 F1 | 	add	fp, #32
213d4     A7 FA 61 FC | 	wrlong	result1, fp
213d8     20 4E 85 F1 | 	sub	fp, #32
213dc     00 FA 0D F2 | 	cmp	result1, #0 wz
213e0     1C 00 90 5D |  if_ne	jmp	#LR__3662
213e4     04 4E 05 F1 | 	add	fp, #4
213e8     A7 FA 01 FB | 	rdlong	result1, fp
213ec     04 4E 85 F1 | 	sub	fp, #4
213f0     11 FA 05 F1 | 	add	result1, #17
213f4     FD 04 48 FC | 	wrbyte	#2, result1
213f8     02 FA 05 F6 | 	mov	result1, #2
213fc     30 04 90 FD | 	jmp	#LR__3673
21400                 | LR__3662
21400     20 4E 05 F1 | 	add	fp, #32
21404     A7 FA 01 FB | 	rdlong	result1, fp
21408     0C 4E 05 F1 | 	add	fp, #12
2140c     A7 1E 02 FB | 	rdlong	local01, fp
21410     0F FB 01 F1 | 	add	result1, local01
21414     0C 4E 85 F1 | 	sub	fp, #12
21418     A7 FA 61 FC | 	wrlong	result1, fp
2141c     14 4E 85 F1 | 	sub	fp, #20
21420     A7 FA 01 FB | 	rdlong	result1, fp
21424     09 FA 45 F0 | 	shr	result1, #9
21428     1C 4E 05 F1 | 	add	fp, #28
2142c     A7 FA 61 FC | 	wrlong	result1, fp
21430     28 4E 85 F1 | 	sub	fp, #40
21434     01 FA 15 F2 | 	cmp	result1, #1 wc
21438     60 01 90 CD |  if_b	jmp	#LR__3666
2143c     2C 4E 05 F1 | 	add	fp, #44
21440     A7 FA 01 FB | 	rdlong	result1, fp
21444     04 4E 85 F1 | 	sub	fp, #4
21448     A7 18 02 FB | 	rdlong	arg04, fp
2144c     0C FB 01 F1 | 	add	result1, arg04
21450     10 4E 85 F1 | 	sub	fp, #16
21454     A7 18 02 FB | 	rdlong	arg04, fp
21458     18 4E 85 F1 | 	sub	fp, #24
2145c     0A 18 06 F1 | 	add	arg04, #10
21460     0C 19 E2 FA | 	rdword	arg04, arg04
21464     0C FB 19 F2 | 	cmp	result1, arg04 wcz
21468     28 00 90 ED |  if_be	jmp	#LR__3663
2146c     18 4E 05 F1 | 	add	fp, #24
21470     A7 FA 01 FB | 	rdlong	result1, fp
21474     0A FA 05 F1 | 	add	result1, #10
21478     FD FA E1 FA | 	rdword	result1, result1
2147c     14 4E 05 F1 | 	add	fp, #20
21480     A7 18 02 FB | 	rdlong	arg04, fp
21484     0C FB 81 F1 | 	sub	result1, arg04
21488     04 4E 85 F1 | 	sub	fp, #4
2148c     A7 FA 61 FC | 	wrlong	result1, fp
21490     28 4E 85 F1 | 	sub	fp, #40
21494                 | LR__3663
21494     18 4E 05 F1 | 	add	fp, #24
21498     A7 18 02 FB | 	rdlong	arg04, fp
2149c     01 18 06 F1 | 	add	arg04, #1
214a0     0C 13 C2 FA | 	rdbyte	arg01, arg04
214a4     18 4E 05 F1 | 	add	fp, #24
214a8     A7 14 02 FB | 	rdlong	arg02, fp
214ac     10 4E 85 F1 | 	sub	fp, #16
214b0     A7 16 02 FB | 	rdlong	arg03, fp
214b4     08 4E 05 F1 | 	add	fp, #8
214b8     A7 18 02 FB | 	rdlong	arg04, fp
214bc     28 4E 85 F1 | 	sub	fp, #40
214c0     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
214c4     00 FA 0D F2 | 	cmp	result1, #0 wz
214c8     1C 00 90 AD |  if_e	jmp	#LR__3664
214cc     04 4E 05 F1 | 	add	fp, #4
214d0     A7 1E 02 FB | 	rdlong	local01, fp
214d4     04 4E 85 F1 | 	sub	fp, #4
214d8     11 1E 06 F1 | 	add	local01, #17
214dc     0F 03 48 FC | 	wrbyte	#1, local01
214e0     01 FA 05 F6 | 	mov	result1, #1
214e4     48 03 90 FD | 	jmp	#LR__3673
214e8                 | LR__3664
214e8     04 4E 05 F1 | 	add	fp, #4
214ec     A7 FA 01 FB | 	rdlong	result1, fp
214f0     1C FA 05 F1 | 	add	result1, #28
214f4     FD FA 01 FB | 	rdlong	result1, result1
214f8     1C 4E 05 F1 | 	add	fp, #28
214fc     A7 20 02 FB | 	rdlong	local02, fp
21500     10 FB 81 F1 | 	sub	result1, local02
21504     08 4E 05 F1 | 	add	fp, #8
21508     A7 18 02 FB | 	rdlong	arg04, fp
2150c     28 4E 85 F1 | 	sub	fp, #40
21510     0C FB 11 F2 | 	cmp	result1, arg04 wc
21514     68 00 90 3D |  if_ae	jmp	#LR__3665
21518     04 4E 05 F1 | 	add	fp, #4
2151c     A7 12 02 FB | 	rdlong	arg01, fp
21520     28 12 06 F1 | 	add	arg01, #40
21524     2C 4E 05 F1 | 	add	fp, #44
21528     A7 14 02 FB | 	rdlong	arg02, fp
2152c     2C 4E 85 F1 | 	sub	fp, #44
21530     A7 FA 01 FB | 	rdlong	result1, fp
21534     1C FA 05 F1 | 	add	result1, #28
21538     FD 22 02 FB | 	rdlong	local03, result1
2153c     1C 4E 05 F1 | 	add	fp, #28
21540     A7 18 02 FB | 	rdlong	arg04, fp
21544     20 4E 85 F1 | 	sub	fp, #32
21548     0C 23 82 F1 | 	sub	local03, arg04
2154c     09 22 66 F0 | 	shl	local03, #9
21550     11 15 02 F1 | 	add	arg02, local03
21554     09 16 C6 F9 | 	decod	arg03, #9
21558     28 45 BF FD | 	call	#__system____builtin_memmove
2155c     04 4E 05 F1 | 	add	fp, #4
21560     A7 18 02 FB | 	rdlong	arg04, fp
21564     0C FB 01 F6 | 	mov	result1, arg04
21568     04 4E 85 F1 | 	sub	fp, #4
2156c     10 18 06 F1 | 	add	arg04, #16
21570     0C 19 C2 FA | 	rdbyte	arg04, arg04
21574     7F 18 06 F5 | 	and	arg04, #127
21578     10 FA 05 F1 | 	add	result1, #16
2157c     FD 18 42 FC | 	wrbyte	arg04, result1
21580                 | LR__3665
21580     28 4E 05 F1 | 	add	fp, #40
21584     A7 FA 01 FB | 	rdlong	result1, fp
21588     09 FA 65 F0 | 	shl	result1, #9
2158c     04 4E 85 F1 | 	sub	fp, #4
21590     A7 FA 61 FC | 	wrlong	result1, fp
21594     24 4E 85 F1 | 	sub	fp, #36
21598                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
21598                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
21598                 | ' 				}
21598                 | ' 
21598                 | ' 
21598                 | ' 				wcnt =  ((UINT) 512 )  * cc;
21598                 | ' 				continue;
21598     74 01 90 FD | 	jmp	#LR__3669
2159c                 | LR__3666
2159c     04 4E 05 F1 | 	add	fp, #4
215a0     A7 20 02 FB | 	rdlong	local02, fp
215a4     1C 20 06 F1 | 	add	local02, #28
215a8     10 FB 01 FB | 	rdlong	result1, local02
215ac     1C 4E 05 F1 | 	add	fp, #28
215b0     A7 20 02 FB | 	rdlong	local02, fp
215b4     20 4E 85 F1 | 	sub	fp, #32
215b8     10 FB 09 F2 | 	cmp	result1, local02 wz
215bc     90 00 90 AD |  if_e	jmp	#LR__3667
215c0     04 4E 05 F1 | 	add	fp, #4
215c4     A7 FA 01 FB | 	rdlong	result1, fp
215c8     FD 22 02 F6 | 	mov	local03, result1
215cc     04 4E 85 F1 | 	sub	fp, #4
215d0     14 22 06 F1 | 	add	local03, #20
215d4     11 23 02 FB | 	rdlong	local03, local03
215d8     0C FA 05 F1 | 	add	result1, #12
215dc     FD 24 02 FB | 	rdlong	local04, result1
215e0     12 27 02 F6 | 	mov	local05, local04
215e4     13 23 12 F2 | 	cmp	local03, local05 wc
215e8     64 00 90 3D |  if_ae	jmp	#LR__3667
215ec     18 4E 05 F1 | 	add	fp, #24
215f0     A7 18 02 FB | 	rdlong	arg04, fp
215f4     01 18 06 F1 | 	add	arg04, #1
215f8     0C 13 C2 FA | 	rdbyte	arg01, arg04
215fc     14 4E 85 F1 | 	sub	fp, #20
21600     A7 28 02 FB | 	rdlong	local06, fp
21604     28 28 06 F1 | 	add	local06, #40
21608     14 2B 02 F6 | 	mov	local07, local06
2160c     1C 4E 05 F1 | 	add	fp, #28
21610     A7 2C 02 FB | 	rdlong	local08, fp
21614     20 4E 85 F1 | 	sub	fp, #32
21618     01 2E 06 F6 | 	mov	local09, #1
2161c     15 15 02 F6 | 	mov	arg02, local07
21620     16 17 02 F6 | 	mov	arg03, local08
21624     01 18 06 F6 | 	mov	arg04, #1
21628     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2162c     FD 30 0A F6 | 	mov	local10, result1 wz
21630     1C 00 90 AD |  if_e	jmp	#LR__3667
21634     04 4E 05 F1 | 	add	fp, #4
21638     A7 30 02 FB | 	rdlong	local10, fp
2163c     04 4E 85 F1 | 	sub	fp, #4
21640     11 30 06 F1 | 	add	local10, #17
21644     18 03 48 FC | 	wrbyte	#1, local10
21648                 | ' 				fp->fptr < fp->obj.objsize &&
21648                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
21648                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
21648     01 FA 05 F6 | 	mov	result1, #1
2164c     E0 01 90 FD | 	jmp	#LR__3673
21650                 | LR__3667
21650     04 4E 05 F1 | 	add	fp, #4
21654     A7 18 02 FB | 	rdlong	arg04, fp
21658     1C 4E 05 F1 | 	add	fp, #28
2165c     A7 FA 01 FB | 	rdlong	result1, fp
21660     20 4E 85 F1 | 	sub	fp, #32
21664     1C 18 06 F1 | 	add	arg04, #28
21668     0C FB 61 FC | 	wrlong	result1, arg04
2166c                 | LR__3668
2166c     04 4E 05 F1 | 	add	fp, #4
21670     A7 FA 01 FB | 	rdlong	result1, fp
21674     14 FA 05 F1 | 	add	result1, #20
21678     FD FA 01 FB | 	rdlong	result1, result1
2167c     FF FB 05 F5 | 	and	result1, #511
21680     09 32 C6 F9 | 	decod	local11, #9
21684     FD 32 82 F1 | 	sub	local11, result1
21688     20 4E 05 F1 | 	add	fp, #32
2168c     A7 32 62 FC | 	wrlong	local11, fp
21690     18 4E 85 F1 | 	sub	fp, #24
21694     A7 FA 01 FB | 	rdlong	result1, fp
21698     0C 4E 85 F1 | 	sub	fp, #12
2169c     FD 32 1A F2 | 	cmp	local11, result1 wcz
216a0     0C 4E 05 11 |  if_a	add	fp, #12
216a4     A7 32 02 1B |  if_a	rdlong	local11, fp
216a8     18 4E 05 11 |  if_a	add	fp, #24
216ac     A7 32 62 1C |  if_a	wrlong	local11, fp
216b0     24 4E 85 11 |  if_a	sub	fp, #36
216b4     04 4E 05 F1 | 	add	fp, #4
216b8     A7 32 02 FB | 	rdlong	local11, fp
216bc     19 13 02 F6 | 	mov	arg01, local11
216c0     28 12 06 F1 | 	add	arg01, #40
216c4     14 32 06 F1 | 	add	local11, #20
216c8     19 33 02 FB | 	rdlong	local11, local11
216cc     FF 33 06 F5 | 	and	local11, #511
216d0     19 13 02 F1 | 	add	arg01, local11
216d4     2C 4E 05 F1 | 	add	fp, #44
216d8     A7 14 02 FB | 	rdlong	arg02, fp
216dc     0C 4E 85 F1 | 	sub	fp, #12
216e0     A7 16 02 FB | 	rdlong	arg03, fp
216e4     24 4E 85 F1 | 	sub	fp, #36
216e8     98 43 BF FD | 	call	#__system____builtin_memmove
216ec     04 4E 05 F1 | 	add	fp, #4
216f0     A7 FA 01 FB | 	rdlong	result1, fp
216f4     FD 32 02 F6 | 	mov	local11, result1
216f8     04 4E 85 F1 | 	sub	fp, #4
216fc     10 FA 05 F1 | 	add	result1, #16
21700     FD FA C1 FA | 	rdbyte	result1, result1
21704     80 FA 45 F5 | 	or	result1, #128
21708     10 32 06 F1 | 	add	local11, #16
2170c     19 FB 41 FC | 	wrbyte	result1, local11
21710                 | LR__3669
21710     0C 4E 05 F1 | 	add	fp, #12
21714     A7 32 02 FB | 	rdlong	local11, fp
21718     18 4E 05 F1 | 	add	fp, #24
2171c     A7 FA 01 FB | 	rdlong	result1, fp
21720     FD 32 82 F1 | 	sub	local11, result1
21724     18 4E 85 F1 | 	sub	fp, #24
21728     A7 32 62 FC | 	wrlong	local11, fp
2172c     04 4E 05 F1 | 	add	fp, #4
21730     A7 34 02 FB | 	rdlong	local12, fp
21734     1A 33 02 FB | 	rdlong	local11, local12
21738     14 4E 05 F1 | 	add	fp, #20
2173c     A7 36 02 FB | 	rdlong	local13, fp
21740     1B 33 02 F1 | 	add	local11, local13
21744     1A 33 62 FC | 	wrlong	local11, local12
21748     0C 4E 05 F1 | 	add	fp, #12
2174c     A7 32 02 FB | 	rdlong	local11, fp
21750     0C 4E 85 F1 | 	sub	fp, #12
21754     A7 38 02 FB | 	rdlong	local14, fp
21758     1C 33 02 F1 | 	add	local11, local14
2175c     0C 4E 05 F1 | 	add	fp, #12
21760     A7 32 62 FC | 	wrlong	local11, fp
21764     2C 4E 85 F1 | 	sub	fp, #44
21768     A7 3A 02 FB | 	rdlong	local15, fp
2176c     1D 33 02 F6 | 	mov	local11, local15
21770     14 3A 06 F1 | 	add	local15, #20
21774     1D 3B 02 FB | 	rdlong	local15, local15
21778     20 4E 05 F1 | 	add	fp, #32
2177c     A7 3C 02 FB | 	rdlong	local16, fp
21780     1E 3B 02 F1 | 	add	local15, local16
21784     14 32 06 F1 | 	add	local11, #20
21788     19 3B 62 FC | 	wrlong	local15, local11
2178c     20 4E 85 F1 | 	sub	fp, #32
21790     A7 3E 02 FB | 	rdlong	local17, fp
21794     1F 33 02 F6 | 	mov	local11, local17
21798     1F 41 02 F6 | 	mov	local18, local17
2179c     04 4E 85 F1 | 	sub	fp, #4
217a0     14 3E 06 F1 | 	add	local17, #20
217a4     1F 43 02 FB | 	rdlong	local19, local17
217a8     0C 40 06 F1 | 	add	local18, #12
217ac     20 45 02 FB | 	rdlong	local20, local18
217b0     22 43 1A F2 | 	cmp	local19, local20 wcz
217b4     24 00 90 ED |  if_be	jmp	#LR__3670
217b8     04 4E 05 F1 | 	add	fp, #4
217bc     A7 26 02 FB | 	rdlong	local05, fp
217c0     04 4E 85 F1 | 	sub	fp, #4
217c4     13 23 02 F6 | 	mov	local03, local05
217c8     14 22 06 F1 | 	add	local03, #20
217cc     11 25 02 FB | 	rdlong	local04, local03
217d0     14 22 86 F1 | 	sub	local03, #20
217d4     12 47 02 F6 | 	mov	local21, local04
217d8     20 00 90 FD | 	jmp	#LR__3671
217dc                 | LR__3670
217dc     04 4E 05 F1 | 	add	fp, #4
217e0     A7 2A 02 FB | 	rdlong	local07, fp
217e4     04 4E 85 F1 | 	sub	fp, #4
217e8     15 31 02 F6 | 	mov	local10, local07
217ec     0C 30 06 F1 | 	add	local10, #12
217f0     18 2D 02 FB | 	rdlong	local08, local10
217f4     0C 30 86 F1 | 	sub	local10, #12
217f8     16 47 02 F6 | 	mov	local21, local08
217fc                 | LR__3671
217fc     0C 32 06 F1 | 	add	local11, #12
21800     19 47 62 FC | 	wrlong	local21, local11
21804     5C F9 9F FD | 	jmp	#LR__3653
21808                 | LR__3672
21808     04 4E 05 F1 | 	add	fp, #4
2180c     A7 34 02 FB | 	rdlong	local12, fp
21810     1A 1F 02 F6 | 	mov	local01, local12
21814     04 4E 85 F1 | 	sub	fp, #4
21818     10 34 06 F1 | 	add	local12, #16
2181c     1A 33 C2 FA | 	rdbyte	local11, local12
21820     40 32 46 F5 | 	or	local11, #64
21824     10 1E 06 F1 | 	add	local01, #16
21828     0F 33 42 FC | 	wrbyte	local11, local01
2182c                 | ' 
2182c                 | ' 
2182c                 | ' 
2182c                 | ' 
2182c                 | ' 
2182c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2182c                 | ' 		fp->flag |=  0x80 ;
2182c                 | ' 
2182c                 | ' 	}
2182c                 | ' 
2182c                 | ' 	fp->flag |=  0x40 ;
2182c                 | ' 
2182c                 | ' 	return FR_OK ;
2182c     00 FA 05 F6 | 	mov	result1, #0
21830                 | LR__3673
21830     A7 F0 03 F6 | 	mov	ptra, fp
21834     B2 00 A0 FD | 	call	#popregs_
21838                 | _fatfs_cc_f_write_ret
21838     2D 00 64 FD | 	ret
2183c                 | 
2183c                 | _fatfs_cc_f_sync
2183c     00 4A 05 F6 | 	mov	COUNT_, #0
21840     A8 00 A0 FD | 	call	#pushregs_
21844     18 F0 07 F1 | 	add	ptra, #24
21848     04 4E 05 F1 | 	add	fp, #4
2184c     A7 12 62 FC | 	wrlong	arg01, fp
21850     08 4E 05 F1 | 	add	fp, #8
21854     A7 14 02 F6 | 	mov	arg02, fp
21858     0C 4E 85 F1 | 	sub	fp, #12
2185c     D0 E8 BF FD | 	call	#_fatfs_cc_validate
21860     08 4E 05 F1 | 	add	fp, #8
21864     A7 FA 61 FC | 	wrlong	result1, fp
21868     08 4E 85 F1 | 	sub	fp, #8
2186c     00 FA 0D F2 | 	cmp	result1, #0 wz
21870     C0 01 90 5D |  if_ne	jmp	#LR__3683
21874     04 4E 05 F1 | 	add	fp, #4
21878     A7 18 02 FB | 	rdlong	arg04, fp
2187c     04 4E 85 F1 | 	sub	fp, #4
21880     10 18 06 F1 | 	add	arg04, #16
21884     0C 19 C2 FA | 	rdbyte	arg04, arg04
21888     40 18 CE F7 | 	test	arg04, #64 wz
2188c     A4 01 90 AD |  if_e	jmp	#LR__3682
21890     04 4E 05 F1 | 	add	fp, #4
21894     A7 18 02 FB | 	rdlong	arg04, fp
21898     04 4E 85 F1 | 	sub	fp, #4
2189c     10 18 06 F1 | 	add	arg04, #16
218a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
218a4     80 18 CE F7 | 	test	arg04, #128 wz
218a8     64 00 90 AD |  if_e	jmp	#LR__3680
218ac     0C 4E 05 F1 | 	add	fp, #12
218b0     A7 18 02 FB | 	rdlong	arg04, fp
218b4     01 18 06 F1 | 	add	arg04, #1
218b8     0C 13 C2 FA | 	rdbyte	arg01, arg04
218bc     08 4E 85 F1 | 	sub	fp, #8
218c0     A7 18 02 FB | 	rdlong	arg04, fp
218c4     0C 15 02 F6 | 	mov	arg02, arg04
218c8     28 14 06 F1 | 	add	arg02, #40
218cc     04 4E 85 F1 | 	sub	fp, #4
218d0     1C 18 06 F1 | 	add	arg04, #28
218d4     0C 17 02 FB | 	rdlong	arg03, arg04
218d8     01 18 06 F6 | 	mov	arg04, #1
218dc     0C AE BF FD | 	call	#_fatfs_cc_disk_write
218e0     00 FA 0D F2 | 	cmp	result1, #0 wz
218e4     01 FA 05 56 |  if_ne	mov	result1, #1
218e8     54 01 90 5D |  if_ne	jmp	#LR__3684
218ec     04 4E 05 F1 | 	add	fp, #4
218f0     A7 18 02 FB | 	rdlong	arg04, fp
218f4     0C 17 02 F6 | 	mov	arg03, arg04
218f8     04 4E 85 F1 | 	sub	fp, #4
218fc     10 18 06 F1 | 	add	arg04, #16
21900     0C 19 C2 FA | 	rdbyte	arg04, arg04
21904     7F 18 06 F5 | 	and	arg04, #127
21908     10 16 06 F1 | 	add	arg03, #16
2190c     0B 19 42 FC | 	wrbyte	arg04, arg03
21910                 | LR__3680
21910     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
21914     10 4E 05 F1 | 	add	fp, #16
21918     A7 FA 61 FC | 	wrlong	result1, fp
2191c     04 4E 85 F1 | 	sub	fp, #4
21920     A7 12 02 FB | 	rdlong	arg01, fp
21924     08 4E 85 F1 | 	sub	fp, #8
21928     A7 18 02 FB | 	rdlong	arg04, fp
2192c     04 4E 85 F1 | 	sub	fp, #4
21930     20 18 06 F1 | 	add	arg04, #32
21934     0C 15 02 FB | 	rdlong	arg02, arg04
21938     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2193c     08 4E 05 F1 | 	add	fp, #8
21940     A7 FA 61 FC | 	wrlong	result1, fp
21944     08 4E 85 F1 | 	sub	fp, #8
21948     00 FA 0D F2 | 	cmp	result1, #0 wz
2194c     E4 00 90 5D |  if_ne	jmp	#LR__3681
21950     04 4E 05 F1 | 	add	fp, #4
21954     A7 18 02 FB | 	rdlong	arg04, fp
21958     24 18 06 F1 | 	add	arg04, #36
2195c     0C 19 02 FB | 	rdlong	arg04, arg04
21960     10 4E 05 F1 | 	add	fp, #16
21964     A7 18 62 FC | 	wrlong	arg04, fp
21968     0C 17 02 F6 | 	mov	arg03, arg04
2196c     0B 16 06 F1 | 	add	arg03, #11
21970     0B 17 C2 FA | 	rdbyte	arg03, arg03
21974     20 16 46 F5 | 	or	arg03, #32
21978     0B 18 06 F1 | 	add	arg04, #11
2197c     0C 17 42 FC | 	wrbyte	arg03, arg04
21980     10 4E 85 F1 | 	sub	fp, #16
21984     A7 18 02 FB | 	rdlong	arg04, fp
21988     0C 13 02 FB | 	rdlong	arg01, arg04
2198c     10 4E 05 F1 | 	add	fp, #16
21990     A7 14 02 FB | 	rdlong	arg02, fp
21994     14 4E 85 F1 | 	sub	fp, #20
21998     08 18 06 F1 | 	add	arg04, #8
2199c     0C 17 02 FB | 	rdlong	arg03, arg04
219a0     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
219a4     14 4E 05 F1 | 	add	fp, #20
219a8     A7 12 02 FB | 	rdlong	arg01, fp
219ac     1C 12 06 F1 | 	add	arg01, #28
219b0     10 4E 85 F1 | 	sub	fp, #16
219b4     A7 18 02 FB | 	rdlong	arg04, fp
219b8     0C 18 06 F1 | 	add	arg04, #12
219bc     0C 15 02 FB | 	rdlong	arg02, arg04
219c0     09 15 62 FC | 	wrlong	arg02, arg01
219c4     10 4E 05 F1 | 	add	fp, #16
219c8     A7 12 02 FB | 	rdlong	arg01, fp
219cc     16 12 06 F1 | 	add	arg01, #22
219d0     04 4E 85 F1 | 	sub	fp, #4
219d4     A7 14 02 FB | 	rdlong	arg02, fp
219d8     09 15 62 FC | 	wrlong	arg02, arg01
219dc     04 4E 05 F1 | 	add	fp, #4
219e0     A7 12 02 FB | 	rdlong	arg01, fp
219e4     12 12 06 F1 | 	add	arg01, #18
219e8     09 01 58 FC | 	wrword	#0, arg01
219ec     08 4E 85 F1 | 	sub	fp, #8
219f0     A7 18 02 FB | 	rdlong	arg04, fp
219f4     03 18 06 F1 | 	add	arg04, #3
219f8     0C 03 48 FC | 	wrbyte	#1, arg04
219fc     A7 12 02 FB | 	rdlong	arg01, fp
21a00     0C 4E 85 F1 | 	sub	fp, #12
21a04     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
21a08     08 4E 05 F1 | 	add	fp, #8
21a0c     A7 FA 61 FC | 	wrlong	result1, fp
21a10     04 4E 85 F1 | 	sub	fp, #4
21a14     A7 18 02 FB | 	rdlong	arg04, fp
21a18     0C 17 02 F6 | 	mov	arg03, arg04
21a1c     04 4E 85 F1 | 	sub	fp, #4
21a20     10 18 06 F1 | 	add	arg04, #16
21a24     0C 19 C2 FA | 	rdbyte	arg04, arg04
21a28     BF 18 06 F5 | 	and	arg04, #191
21a2c     10 16 06 F1 | 	add	arg03, #16
21a30     0B 19 42 FC | 	wrbyte	arg04, arg03
21a34                 | LR__3681
21a34                 | LR__3682
21a34                 | LR__3683
21a34                 | ' 					dir = fp->dir_ptr;
21a34                 | ' 					dir[ 11 ] |=  0x20 ;
21a34                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
21a34                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
21a34                 | ' 					st_dword(dir +  22 , tm);
21a34                 | ' 					st_word(dir +  18 , 0);
21a34                 | ' 					fs->wflag = 1;
21a34                 | ' 					res = sync_fs(fs);
21a34                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
21a34                 | ' 				}
21a34                 | ' 			}
21a34                 | ' 		}
21a34                 | ' 	}
21a34                 | ' 
21a34                 | ' 	return res ;
21a34     08 4E 05 F1 | 	add	fp, #8
21a38     A7 FA 01 FB | 	rdlong	result1, fp
21a3c     08 4E 85 F1 | 	sub	fp, #8
21a40                 | LR__3684
21a40     A7 F0 03 F6 | 	mov	ptra, fp
21a44     B2 00 A0 FD | 	call	#popregs_
21a48                 | _fatfs_cc_f_sync_ret
21a48     2D 00 64 FD | 	ret
21a4c                 | 
21a4c                 | _fatfs_cc_f_close
21a4c     01 4A 05 F6 | 	mov	COUNT_, #1
21a50     A8 00 A0 FD | 	call	#pushregs_
21a54     10 F0 07 F1 | 	add	ptra, #16
21a58     04 4E 05 F1 | 	add	fp, #4
21a5c     A7 12 62 FC | 	wrlong	arg01, fp
21a60     04 4E 85 F1 | 	sub	fp, #4
21a64     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
21a68     08 4E 05 F1 | 	add	fp, #8
21a6c     A7 FA 61 FC | 	wrlong	result1, fp
21a70     08 4E 85 F1 | 	sub	fp, #8
21a74     00 FA 0D F2 | 	cmp	result1, #0 wz
21a78     38 00 90 5D |  if_ne	jmp	#LR__3690
21a7c     04 4E 05 F1 | 	add	fp, #4
21a80     A7 12 02 FB | 	rdlong	arg01, fp
21a84     08 4E 05 F1 | 	add	fp, #8
21a88     A7 14 02 F6 | 	mov	arg02, fp
21a8c     0C 4E 85 F1 | 	sub	fp, #12
21a90     9C E6 BF FD | 	call	#_fatfs_cc_validate
21a94     08 4E 05 F1 | 	add	fp, #8
21a98     A7 FA 61 FC | 	wrlong	result1, fp
21a9c     08 4E 85 F1 | 	sub	fp, #8
21aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
21aa4     04 4E 05 A1 |  if_e	add	fp, #4
21aa8     A7 1E 02 AB |  if_e	rdlong	local01, fp
21aac     04 4E 85 A1 |  if_e	sub	fp, #4
21ab0     0F 01 68 AC |  if_e	wrlong	#0, local01
21ab4                 | LR__3690
21ab4                 | ' 
21ab4                 | ' 
21ab4                 | ' 
21ab4                 | ' 
21ab4                 | ' 			fp->obj.fs = 0;
21ab4                 | ' #line 4192 "ff.c"
21ab4                 | ' 		}
21ab4                 | ' 	}
21ab4                 | ' 	return res;
21ab4     08 4E 05 F1 | 	add	fp, #8
21ab8     A7 FA 01 FB | 	rdlong	result1, fp
21abc     08 4E 85 F1 | 	sub	fp, #8
21ac0     A7 F0 03 F6 | 	mov	ptra, fp
21ac4     B2 00 A0 FD | 	call	#popregs_
21ac8                 | _fatfs_cc_f_close_ret
21ac8     2D 00 64 FD | 	ret
21acc                 | 
21acc                 | _fatfs_cc_f_lseek
21acc     00 4A 05 F6 | 	mov	COUNT_, #0
21ad0     A8 00 A0 FD | 	call	#pushregs_
21ad4     24 F0 07 F1 | 	add	ptra, #36
21ad8     04 4E 05 F1 | 	add	fp, #4
21adc     A7 12 62 FC | 	wrlong	arg01, fp
21ae0     04 4E 05 F1 | 	add	fp, #4
21ae4     A7 14 62 FC | 	wrlong	arg02, fp
21ae8     04 4E 85 F1 | 	sub	fp, #4
21aec     A7 12 02 FB | 	rdlong	arg01, fp
21af0     0C 4E 05 F1 | 	add	fp, #12
21af4     A7 14 02 F6 | 	mov	arg02, fp
21af8     10 4E 85 F1 | 	sub	fp, #16
21afc     30 E6 BF FD | 	call	#_fatfs_cc_validate
21b00     0C 4E 05 F1 | 	add	fp, #12
21b04     A7 FA 61 FC | 	wrlong	result1, fp
21b08     0C 4E 85 F1 | 	sub	fp, #12
21b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
21b10     1C 00 90 5D |  if_ne	jmp	#LR__3700
21b14     04 4E 05 F1 | 	add	fp, #4
21b18     A7 18 02 FB | 	rdlong	arg04, fp
21b1c     11 18 06 F1 | 	add	arg04, #17
21b20     0C 19 C2 FA | 	rdbyte	arg04, arg04
21b24     08 4E 05 F1 | 	add	fp, #8
21b28     A7 18 62 FC | 	wrlong	arg04, fp
21b2c     0C 4E 85 F1 | 	sub	fp, #12
21b30                 | LR__3700
21b30     0C 4E 05 F1 | 	add	fp, #12
21b34     A7 18 0A FB | 	rdlong	arg04, fp wz
21b38     0C 4E 85 F1 | 	sub	fp, #12
21b3c     0C 4E 05 51 |  if_ne	add	fp, #12
21b40     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21b44     0C 4E 85 51 |  if_ne	sub	fp, #12
21b48     40 06 90 5D |  if_ne	jmp	#LR__3723
21b4c     04 4E 05 F1 | 	add	fp, #4
21b50     A7 18 02 FB | 	rdlong	arg04, fp
21b54     04 4E 05 F1 | 	add	fp, #4
21b58     A7 16 02 FB | 	rdlong	arg03, fp
21b5c     08 4E 85 F1 | 	sub	fp, #8
21b60     0C 18 06 F1 | 	add	arg04, #12
21b64     0C 19 02 FB | 	rdlong	arg04, arg04
21b68     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
21b6c     3C 00 90 ED |  if_be	jmp	#LR__3701
21b70     04 4E 05 F1 | 	add	fp, #4
21b74     A7 16 02 FB | 	rdlong	arg03, fp
21b78     04 4E 85 F1 | 	sub	fp, #4
21b7c     10 16 06 F1 | 	add	arg03, #16
21b80     0B 17 C2 FA | 	rdbyte	arg03, arg03
21b84     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21b88     02 16 CE F7 | 	test	arg03, #2 wz
21b8c     1C 00 90 5D |  if_ne	jmp	#LR__3701
21b90     04 4E 05 F1 | 	add	fp, #4
21b94     A7 16 02 FB | 	rdlong	arg03, fp
21b98     0C 16 06 F1 | 	add	arg03, #12
21b9c     0B 17 02 FB | 	rdlong	arg03, arg03
21ba0     04 4E 05 F1 | 	add	fp, #4
21ba4     A7 16 62 FC | 	wrlong	arg03, fp
21ba8     08 4E 85 F1 | 	sub	fp, #8
21bac                 | LR__3701
21bac     04 4E 05 F1 | 	add	fp, #4
21bb0     A7 16 02 FB | 	rdlong	arg03, fp
21bb4     14 16 06 F1 | 	add	arg03, #20
21bb8     0B 17 02 FB | 	rdlong	arg03, arg03
21bbc     1C 4E 05 F1 | 	add	fp, #28
21bc0     A7 16 62 FC | 	wrlong	arg03, fp
21bc4     1C 4E 85 F1 | 	sub	fp, #28
21bc8     A7 16 02 FB | 	rdlong	arg03, fp
21bcc     18 4E 05 F1 | 	add	fp, #24
21bd0     A7 00 68 FC | 	wrlong	#0, fp
21bd4     14 16 06 F1 | 	add	arg03, #20
21bd8     0B 01 68 FC | 	wrlong	#0, arg03
21bdc     14 4E 85 F1 | 	sub	fp, #20
21be0     A7 16 02 FB | 	rdlong	arg03, fp
21be4     08 4E 85 F1 | 	sub	fp, #8
21be8     01 16 16 F2 | 	cmp	arg03, #1 wc
21bec     E4 03 90 CD |  if_b	jmp	#LR__3717
21bf0     10 4E 05 F1 | 	add	fp, #16
21bf4     A7 16 02 FB | 	rdlong	arg03, fp
21bf8     0A 16 06 F1 | 	add	arg03, #10
21bfc     0B 19 E2 FA | 	rdword	arg04, arg03
21c00     09 18 66 F0 | 	shl	arg04, #9
21c04     08 4E 05 F1 | 	add	fp, #8
21c08     A7 18 62 FC | 	wrlong	arg04, fp
21c0c     08 4E 05 F1 | 	add	fp, #8
21c10     A7 18 02 FB | 	rdlong	arg04, fp
21c14     20 4E 85 F1 | 	sub	fp, #32
21c18     01 18 16 F2 | 	cmp	arg04, #1 wc
21c1c     AC 00 90 CD |  if_b	jmp	#LR__3702
21c20     08 4E 05 F1 | 	add	fp, #8
21c24     A7 18 02 FB | 	rdlong	arg04, fp
21c28     01 18 86 F1 | 	sub	arg04, #1
21c2c     10 4E 05 F1 | 	add	fp, #16
21c30     A7 16 02 FB | 	rdlong	arg03, fp
21c34     0B 19 12 FD | 	qdiv	arg04, arg03
21c38     08 4E 05 F1 | 	add	fp, #8
21c3c     A7 FA 01 FB | 	rdlong	result1, fp
21c40     01 FA 85 F1 | 	sub	result1, #1
21c44     18 18 62 FD | 	getqx	arg04
21c48     0B FB 11 FD | 	qdiv	result1, arg03
21c4c     20 4E 85 F1 | 	sub	fp, #32
21c50     18 16 62 FD | 	getqx	arg03
21c54     0B 19 12 F2 | 	cmp	arg04, arg03 wc
21c58     70 00 90 CD |  if_b	jmp	#LR__3702
21c5c     04 4E 05 F1 | 	add	fp, #4
21c60     A7 16 02 FB | 	rdlong	arg03, fp
21c64     1C 4E 05 F1 | 	add	fp, #28
21c68     A7 FA 01 FB | 	rdlong	result1, fp
21c6c     01 FA 85 F1 | 	sub	result1, #1
21c70     08 4E 85 F1 | 	sub	fp, #8
21c74     A7 18 02 FB | 	rdlong	arg04, fp
21c78     01 18 86 F1 | 	sub	arg04, #1
21c7c     0C FB 21 F5 | 	andn	result1, arg04
21c80     14 16 06 F1 | 	add	arg03, #20
21c84     0B FB 61 FC | 	wrlong	result1, arg03
21c88     10 4E 85 F1 | 	sub	fp, #16
21c8c     A7 16 02 FB | 	rdlong	arg03, fp
21c90     04 4E 85 F1 | 	sub	fp, #4
21c94     A7 18 02 FB | 	rdlong	arg04, fp
21c98     14 18 06 F1 | 	add	arg04, #20
21c9c     0C 19 02 FB | 	rdlong	arg04, arg04
21ca0     0C 17 82 F1 | 	sub	arg03, arg04
21ca4     04 4E 05 F1 | 	add	fp, #4
21ca8     A7 16 62 FC | 	wrlong	arg03, fp
21cac     04 4E 85 F1 | 	sub	fp, #4
21cb0     A7 16 02 FB | 	rdlong	arg03, fp
21cb4     18 16 06 F1 | 	add	arg03, #24
21cb8     0B 17 02 FB | 	rdlong	arg03, arg03
21cbc     10 4E 05 F1 | 	add	fp, #16
21cc0     A7 16 62 FC | 	wrlong	arg03, fp
21cc4     14 4E 85 F1 | 	sub	fp, #20
21cc8     D0 00 90 FD | 	jmp	#LR__3706
21ccc                 | LR__3702
21ccc     04 4E 05 F1 | 	add	fp, #4
21cd0     A7 16 02 FB | 	rdlong	arg03, fp
21cd4     08 16 06 F1 | 	add	arg03, #8
21cd8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
21cdc     10 4E 05 F1 | 	add	fp, #16
21ce0     A7 16 62 FC | 	wrlong	arg03, fp
21ce4     14 4E 85 F1 | 	sub	fp, #20
21ce8     94 00 90 5D |  if_ne	jmp	#LR__3705
21cec     04 4E 05 F1 | 	add	fp, #4
21cf0     A7 12 02 FB | 	rdlong	arg01, fp
21cf4     04 4E 85 F1 | 	sub	fp, #4
21cf8     00 14 06 F6 | 	mov	arg02, #0
21cfc     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
21d00     14 4E 05 F1 | 	add	fp, #20
21d04     A7 FA 61 FC | 	wrlong	result1, fp
21d08     14 4E 85 F1 | 	sub	fp, #20
21d0c     01 FA 0D F2 | 	cmp	result1, #1 wz
21d10     1C 00 90 5D |  if_ne	jmp	#LR__3703
21d14     04 4E 05 F1 | 	add	fp, #4
21d18     A7 16 02 FB | 	rdlong	arg03, fp
21d1c     04 4E 85 F1 | 	sub	fp, #4
21d20     11 16 06 F1 | 	add	arg03, #17
21d24     0B 05 48 FC | 	wrbyte	#2, arg03
21d28     02 FA 05 F6 | 	mov	result1, #2
21d2c     5C 04 90 FD | 	jmp	#LR__3723
21d30                 | LR__3703
21d30     14 4E 05 F1 | 	add	fp, #20
21d34     A7 FA 01 FB | 	rdlong	result1, fp
21d38     14 4E 85 F1 | 	sub	fp, #20
21d3c     FF FF 7F FF 
21d40     FF FB 0D F2 | 	cmp	result1, ##-1 wz
21d44     1C 00 90 5D |  if_ne	jmp	#LR__3704
21d48     04 4E 05 F1 | 	add	fp, #4
21d4c     A7 16 02 FB | 	rdlong	arg03, fp
21d50     04 4E 85 F1 | 	sub	fp, #4
21d54     11 16 06 F1 | 	add	arg03, #17
21d58     0B 03 48 FC | 	wrbyte	#1, arg03
21d5c     01 FA 05 F6 | 	mov	result1, #1
21d60     28 04 90 FD | 	jmp	#LR__3723
21d64                 | LR__3704
21d64     04 4E 05 F1 | 	add	fp, #4
21d68     A7 16 02 FB | 	rdlong	arg03, fp
21d6c     10 4E 05 F1 | 	add	fp, #16
21d70     A7 18 02 FB | 	rdlong	arg04, fp
21d74     14 4E 85 F1 | 	sub	fp, #20
21d78     08 16 06 F1 | 	add	arg03, #8
21d7c     0B 19 62 FC | 	wrlong	arg04, arg03
21d80                 | LR__3705
21d80     04 4E 05 F1 | 	add	fp, #4
21d84     A7 16 02 FB | 	rdlong	arg03, fp
21d88     10 4E 05 F1 | 	add	fp, #16
21d8c     A7 18 02 FB | 	rdlong	arg04, fp
21d90     14 4E 85 F1 | 	sub	fp, #20
21d94     18 16 06 F1 | 	add	arg03, #24
21d98     0B 19 62 FC | 	wrlong	arg04, arg03
21d9c                 | LR__3706
21d9c     14 4E 05 F1 | 	add	fp, #20
21da0     A7 16 0A FB | 	rdlong	arg03, fp wz
21da4     14 4E 85 F1 | 	sub	fp, #20
21da8     28 02 90 AD |  if_e	jmp	#LR__3716
21dac                 | ' 				while (ofs > bcs) {
21dac                 | LR__3707
21dac     08 4E 05 F1 | 	add	fp, #8
21db0     A7 18 02 FB | 	rdlong	arg04, fp
21db4     10 4E 05 F1 | 	add	fp, #16
21db8     A7 16 02 FB | 	rdlong	arg03, fp
21dbc     18 4E 85 F1 | 	sub	fp, #24
21dc0     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
21dc4     68 01 90 ED |  if_be	jmp	#LR__3713
21dc8     08 4E 05 F1 | 	add	fp, #8
21dcc     A7 18 02 FB | 	rdlong	arg04, fp
21dd0     10 4E 05 F1 | 	add	fp, #16
21dd4     A7 16 02 FB | 	rdlong	arg03, fp
21dd8     0B 19 82 F1 | 	sub	arg04, arg03
21ddc     10 4E 85 F1 | 	sub	fp, #16
21de0     A7 18 62 FC | 	wrlong	arg04, fp
21de4     04 4E 85 F1 | 	sub	fp, #4
21de8     A7 18 02 FB | 	rdlong	arg04, fp
21dec     0C FB 01 F6 | 	mov	result1, arg04
21df0     14 18 06 F1 | 	add	arg04, #20
21df4     0C 19 02 FB | 	rdlong	arg04, arg04
21df8     14 4E 05 F1 | 	add	fp, #20
21dfc     A7 16 02 FB | 	rdlong	arg03, fp
21e00     0B 19 02 F1 | 	add	arg04, arg03
21e04     14 FA 05 F1 | 	add	result1, #20
21e08     FD 18 62 FC | 	wrlong	arg04, result1
21e0c     14 4E 85 F1 | 	sub	fp, #20
21e10     A7 16 02 FB | 	rdlong	arg03, fp
21e14     04 4E 85 F1 | 	sub	fp, #4
21e18     10 16 06 F1 | 	add	arg03, #16
21e1c     0B 17 C2 FA | 	rdbyte	arg03, arg03
21e20     02 16 CE F7 | 	test	arg03, #2 wz
21e24     3C 00 90 AD |  if_e	jmp	#LR__3708
21e28     04 4E 05 F1 | 	add	fp, #4
21e2c     A7 12 02 FB | 	rdlong	arg01, fp
21e30     10 4E 05 F1 | 	add	fp, #16
21e34     A7 14 02 FB | 	rdlong	arg02, fp
21e38     14 4E 85 F1 | 	sub	fp, #20
21e3c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
21e40     14 4E 05 F1 | 	add	fp, #20
21e44     A7 FA 61 FC | 	wrlong	result1, fp
21e48     00 FA 4D F2 | 	cmps	result1, #0 wz
21e4c     14 4E 85 F1 | 	sub	fp, #20
21e50     08 4E 05 A1 |  if_e	add	fp, #8
21e54     A7 00 68 AC |  if_e	wrlong	#0, fp
21e58     08 4E 85 A1 |  if_e	sub	fp, #8
21e5c                 | ' 							ofs = 0; break;
21e5c     D0 00 90 AD |  if_e	jmp	#LR__3713
21e60     24 00 90 FD | 	jmp	#LR__3709
21e64                 | LR__3708
21e64     04 4E 05 F1 | 	add	fp, #4
21e68     A7 12 02 FB | 	rdlong	arg01, fp
21e6c     10 4E 05 F1 | 	add	fp, #16
21e70     A7 14 02 FB | 	rdlong	arg02, fp
21e74     14 4E 85 F1 | 	sub	fp, #20
21e78     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
21e7c     14 4E 05 F1 | 	add	fp, #20
21e80     A7 FA 61 FC | 	wrlong	result1, fp
21e84     14 4E 85 F1 | 	sub	fp, #20
21e88                 | LR__3709
21e88     14 4E 05 F1 | 	add	fp, #20
21e8c     A7 16 02 FB | 	rdlong	arg03, fp
21e90     14 4E 85 F1 | 	sub	fp, #20
21e94     FF FF 7F FF 
21e98     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
21e9c     1C 00 90 5D |  if_ne	jmp	#LR__3710
21ea0     04 4E 05 F1 | 	add	fp, #4
21ea4     A7 16 02 FB | 	rdlong	arg03, fp
21ea8     04 4E 85 F1 | 	sub	fp, #4
21eac     11 16 06 F1 | 	add	arg03, #17
21eb0     0B 03 48 FC | 	wrbyte	#1, arg03
21eb4     01 FA 05 F6 | 	mov	result1, #1
21eb8     D0 02 90 FD | 	jmp	#LR__3723
21ebc                 | LR__3710
21ebc     14 4E 05 F1 | 	add	fp, #20
21ec0     A7 16 02 FB | 	rdlong	arg03, fp
21ec4     14 4E 85 F1 | 	sub	fp, #20
21ec8     02 16 16 F2 | 	cmp	arg03, #2 wc
21ecc     24 00 90 CD |  if_b	jmp	#LR__3711
21ed0     10 4E 05 F1 | 	add	fp, #16
21ed4     A7 18 02 FB | 	rdlong	arg04, fp
21ed8     04 4E 05 F1 | 	add	fp, #4
21edc     A7 16 02 FB | 	rdlong	arg03, fp
21ee0     14 4E 85 F1 | 	sub	fp, #20
21ee4     18 18 06 F1 | 	add	arg04, #24
21ee8     0C 19 02 FB | 	rdlong	arg04, arg04
21eec     0C 17 12 F2 | 	cmp	arg03, arg04 wc
21ef0     1C 00 90 CD |  if_b	jmp	#LR__3712
21ef4                 | LR__3711
21ef4     04 4E 05 F1 | 	add	fp, #4
21ef8     A7 16 02 FB | 	rdlong	arg03, fp
21efc     04 4E 85 F1 | 	sub	fp, #4
21f00     11 16 06 F1 | 	add	arg03, #17
21f04     0B 05 48 FC | 	wrbyte	#2, arg03
21f08     02 FA 05 F6 | 	mov	result1, #2
21f0c     7C 02 90 FD | 	jmp	#LR__3723
21f10                 | LR__3712
21f10     04 4E 05 F1 | 	add	fp, #4
21f14     A7 18 02 FB | 	rdlong	arg04, fp
21f18     10 4E 05 F1 | 	add	fp, #16
21f1c     A7 16 02 FB | 	rdlong	arg03, fp
21f20     14 4E 85 F1 | 	sub	fp, #20
21f24     18 18 06 F1 | 	add	arg04, #24
21f28     0C 17 62 FC | 	wrlong	arg03, arg04
21f2c     7C FE 9F FD | 	jmp	#LR__3707
21f30                 | LR__3713
21f30     04 4E 05 F1 | 	add	fp, #4
21f34     A7 16 02 FB | 	rdlong	arg03, fp
21f38     0B 13 02 F6 | 	mov	arg01, arg03
21f3c     14 16 06 F1 | 	add	arg03, #20
21f40     0B 15 02 FB | 	rdlong	arg02, arg03
21f44     04 4E 05 F1 | 	add	fp, #4
21f48     A7 16 02 FB | 	rdlong	arg03, fp
21f4c     0B 15 02 F1 | 	add	arg02, arg03
21f50     14 12 06 F1 | 	add	arg01, #20
21f54     09 15 62 FC | 	wrlong	arg02, arg01
21f58     A7 16 02 FB | 	rdlong	arg03, fp
21f5c     08 4E 85 F1 | 	sub	fp, #8
21f60     FF 17 CE F7 | 	test	arg03, #511 wz
21f64     6C 00 90 AD |  if_e	jmp	#LR__3715
21f68     10 4E 05 F1 | 	add	fp, #16
21f6c     A7 12 02 FB | 	rdlong	arg01, fp
21f70     04 4E 05 F1 | 	add	fp, #4
21f74     A7 14 02 FB | 	rdlong	arg02, fp
21f78     14 4E 85 F1 | 	sub	fp, #20
21f7c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
21f80     1C 4E 05 F1 | 	add	fp, #28
21f84     A7 FA 61 FC | 	wrlong	result1, fp
21f88     1C 4E 85 F1 | 	sub	fp, #28
21f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
21f90     1C 00 90 5D |  if_ne	jmp	#LR__3714
21f94     04 4E 05 F1 | 	add	fp, #4
21f98     A7 16 02 FB | 	rdlong	arg03, fp
21f9c     04 4E 85 F1 | 	sub	fp, #4
21fa0     11 16 06 F1 | 	add	arg03, #17
21fa4     0B 05 48 FC | 	wrbyte	#2, arg03
21fa8     02 FA 05 F6 | 	mov	result1, #2
21fac     DC 01 90 FD | 	jmp	#LR__3723
21fb0                 | LR__3714
21fb0     1C 4E 05 F1 | 	add	fp, #28
21fb4     A7 18 02 FB | 	rdlong	arg04, fp
21fb8     14 4E 85 F1 | 	sub	fp, #20
21fbc     A7 16 02 FB | 	rdlong	arg03, fp
21fc0     09 16 46 F0 | 	shr	arg03, #9
21fc4     0B 19 02 F1 | 	add	arg04, arg03
21fc8     14 4E 05 F1 | 	add	fp, #20
21fcc     A7 18 62 FC | 	wrlong	arg04, fp
21fd0     1C 4E 85 F1 | 	sub	fp, #28
21fd4                 | LR__3715
21fd4                 | LR__3716
21fd4                 | LR__3717
21fd4     04 4E 05 F1 | 	add	fp, #4
21fd8     A7 18 02 FB | 	rdlong	arg04, fp
21fdc     0C 17 02 F6 | 	mov	arg03, arg04
21fe0     04 4E 85 F1 | 	sub	fp, #4
21fe4     14 16 06 F1 | 	add	arg03, #20
21fe8     0B 17 02 FB | 	rdlong	arg03, arg03
21fec     0C 18 06 F1 | 	add	arg04, #12
21ff0     0C 19 02 FB | 	rdlong	arg04, arg04
21ff4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
21ff8     3C 00 90 ED |  if_be	jmp	#LR__3718
21ffc     04 4E 05 F1 | 	add	fp, #4
22000     A7 18 02 FB | 	rdlong	arg04, fp
22004     0C 17 02 F6 | 	mov	arg03, arg04
22008     14 18 06 F1 | 	add	arg04, #20
2200c     0C 19 02 FB | 	rdlong	arg04, arg04
22010     0C 16 06 F1 | 	add	arg03, #12
22014     0B 19 62 FC | 	wrlong	arg04, arg03
22018     A7 18 02 FB | 	rdlong	arg04, fp
2201c     0C 17 02 F6 | 	mov	arg03, arg04
22020     04 4E 85 F1 | 	sub	fp, #4
22024     10 18 06 F1 | 	add	arg04, #16
22028     0C 19 C2 FA | 	rdbyte	arg04, arg04
2202c     40 18 46 F5 | 	or	arg04, #64
22030     10 16 06 F1 | 	add	arg03, #16
22034     0B 19 42 FC | 	wrbyte	arg04, arg03
22038                 | LR__3718
22038     04 4E 05 F1 | 	add	fp, #4
2203c     A7 16 02 FB | 	rdlong	arg03, fp
22040     04 4E 85 F1 | 	sub	fp, #4
22044     14 16 06 F1 | 	add	arg03, #20
22048     0B 17 02 FB | 	rdlong	arg03, arg03
2204c     FF 17 CE F7 | 	test	arg03, #511 wz
22050     2C 01 90 AD |  if_e	jmp	#LR__3722
22054     04 4E 05 F1 | 	add	fp, #4
22058     A7 18 02 FB | 	rdlong	arg04, fp
2205c     18 4E 05 F1 | 	add	fp, #24
22060     A7 16 02 FB | 	rdlong	arg03, fp
22064     1C 4E 85 F1 | 	sub	fp, #28
22068     1C 18 06 F1 | 	add	arg04, #28
2206c     0C 19 02 FB | 	rdlong	arg04, arg04
22070     0C 17 0A F2 | 	cmp	arg03, arg04 wz
22074     08 01 90 AD |  if_e	jmp	#LR__3722
22078     04 4E 05 F1 | 	add	fp, #4
2207c     A7 16 02 FB | 	rdlong	arg03, fp
22080     04 4E 85 F1 | 	sub	fp, #4
22084     10 16 06 F1 | 	add	arg03, #16
22088     0B 17 C2 FA | 	rdbyte	arg03, arg03
2208c     80 16 CE F7 | 	test	arg03, #128 wz
22090     7C 00 90 AD |  if_e	jmp	#LR__3720
22094     10 4E 05 F1 | 	add	fp, #16
22098     A7 16 02 FB | 	rdlong	arg03, fp
2209c     01 16 06 F1 | 	add	arg03, #1
220a0     0B 13 C2 FA | 	rdbyte	arg01, arg03
220a4     0C 4E 85 F1 | 	sub	fp, #12
220a8     A7 16 02 FB | 	rdlong	arg03, fp
220ac     0B 15 02 F6 | 	mov	arg02, arg03
220b0     28 14 06 F1 | 	add	arg02, #40
220b4     04 4E 85 F1 | 	sub	fp, #4
220b8     1C 16 06 F1 | 	add	arg03, #28
220bc     0B 17 02 FB | 	rdlong	arg03, arg03
220c0     01 18 06 F6 | 	mov	arg04, #1
220c4     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
220c8     00 FA 0D F2 | 	cmp	result1, #0 wz
220cc     1C 00 90 AD |  if_e	jmp	#LR__3719
220d0     04 4E 05 F1 | 	add	fp, #4
220d4     A7 16 02 FB | 	rdlong	arg03, fp
220d8     04 4E 85 F1 | 	sub	fp, #4
220dc     11 16 06 F1 | 	add	arg03, #17
220e0     0B 03 48 FC | 	wrbyte	#1, arg03
220e4     01 FA 05 F6 | 	mov	result1, #1
220e8     A0 00 90 FD | 	jmp	#LR__3723
220ec                 | LR__3719
220ec     04 4E 05 F1 | 	add	fp, #4
220f0     A7 18 02 FB | 	rdlong	arg04, fp
220f4     0C 17 02 F6 | 	mov	arg03, arg04
220f8     04 4E 85 F1 | 	sub	fp, #4
220fc     10 18 06 F1 | 	add	arg04, #16
22100     0C 19 C2 FA | 	rdbyte	arg04, arg04
22104     7F 18 06 F5 | 	and	arg04, #127
22108     10 16 06 F1 | 	add	arg03, #16
2210c     0B 19 42 FC | 	wrbyte	arg04, arg03
22110                 | LR__3720
22110     10 4E 05 F1 | 	add	fp, #16
22114     A7 16 02 FB | 	rdlong	arg03, fp
22118     01 16 06 F1 | 	add	arg03, #1
2211c     0B 13 C2 FA | 	rdbyte	arg01, arg03
22120     0C 4E 85 F1 | 	sub	fp, #12
22124     A7 14 02 FB | 	rdlong	arg02, fp
22128     28 14 06 F1 | 	add	arg02, #40
2212c     18 4E 05 F1 | 	add	fp, #24
22130     A7 16 02 FB | 	rdlong	arg03, fp
22134     1C 4E 85 F1 | 	sub	fp, #28
22138     01 18 06 F6 | 	mov	arg04, #1
2213c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
22140     00 FA 0D F2 | 	cmp	result1, #0 wz
22144     1C 00 90 AD |  if_e	jmp	#LR__3721
22148     04 4E 05 F1 | 	add	fp, #4
2214c     A7 16 02 FB | 	rdlong	arg03, fp
22150     04 4E 85 F1 | 	sub	fp, #4
22154     11 16 06 F1 | 	add	arg03, #17
22158     0B 03 48 FC | 	wrbyte	#1, arg03
2215c     01 FA 05 F6 | 	mov	result1, #1
22160     28 00 90 FD | 	jmp	#LR__3723
22164                 | LR__3721
22164     04 4E 05 F1 | 	add	fp, #4
22168     A7 18 02 FB | 	rdlong	arg04, fp
2216c     18 4E 05 F1 | 	add	fp, #24
22170     A7 16 02 FB | 	rdlong	arg03, fp
22174     1C 4E 85 F1 | 	sub	fp, #28
22178     1C 18 06 F1 | 	add	arg04, #28
2217c     0C 17 62 FC | 	wrlong	arg03, arg04
22180                 | LR__3722
22180                 | ' 
22180                 | ' 			fp->sect = nsect;
22180                 | ' 		}
22180                 | ' 	}
22180                 | ' 
22180                 | ' 	return res ;
22180     0C 4E 05 F1 | 	add	fp, #12
22184     A7 FA 01 FB | 	rdlong	result1, fp
22188     0C 4E 85 F1 | 	sub	fp, #12
2218c                 | LR__3723
2218c     A7 F0 03 F6 | 	mov	ptra, fp
22190     B2 00 A0 FD | 	call	#popregs_
22194                 | _fatfs_cc_f_lseek_ret
22194     2D 00 64 FD | 	ret
22198                 | 
22198                 | _fatfs_cc_f_opendir
22198     01 4A 05 F6 | 	mov	COUNT_, #1
2219c     A8 00 A0 FD | 	call	#pushregs_
221a0     14 F0 07 F1 | 	add	ptra, #20
221a4     04 4E 05 F1 | 	add	fp, #4
221a8     A7 12 62 FC | 	wrlong	arg01, fp
221ac     04 4E 05 F1 | 	add	fp, #4
221b0     A7 14 62 FC | 	wrlong	arg02, fp
221b4     04 4E 85 F1 | 	sub	fp, #4
221b8     A7 16 0A FB | 	rdlong	arg03, fp wz
221bc     04 4E 85 F1 | 	sub	fp, #4
221c0     09 FA 05 A6 |  if_e	mov	result1, #9
221c4     78 01 90 AD |  if_e	jmp	#LR__3736
221c8     08 4E 05 F1 | 	add	fp, #8
221cc     A7 12 02 F6 | 	mov	arg01, fp
221d0     08 4E 05 F1 | 	add	fp, #8
221d4     A7 14 02 F6 | 	mov	arg02, fp
221d8     10 4E 85 F1 | 	sub	fp, #16
221dc     00 16 06 F6 | 	mov	arg03, #0
221e0     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
221e4     0C 4E 05 F1 | 	add	fp, #12
221e8     A7 FA 61 FC | 	wrlong	result1, fp
221ec     0C 4E 85 F1 | 	sub	fp, #12
221f0     00 FA 0D F2 | 	cmp	result1, #0 wz
221f4     20 01 90 5D |  if_ne	jmp	#LR__3735
221f8     04 4E 05 F1 | 	add	fp, #4
221fc     A7 16 02 FB | 	rdlong	arg03, fp
22200     0C 4E 05 F1 | 	add	fp, #12
22204     A7 FA 01 FB | 	rdlong	result1, fp
22208     0B FB 61 FC | 	wrlong	result1, arg03
2220c     0C 4E 85 F1 | 	sub	fp, #12
22210     A7 12 02 FB | 	rdlong	arg01, fp
22214     04 4E 05 F1 | 	add	fp, #4
22218     A7 14 02 FB | 	rdlong	arg02, fp
2221c     08 4E 85 F1 | 	sub	fp, #8
22220     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
22224     0C 4E 05 F1 | 	add	fp, #12
22228     A7 FA 61 FC | 	wrlong	result1, fp
2222c     0C 4E 85 F1 | 	sub	fp, #12
22230     00 FA 0D F2 | 	cmp	result1, #0 wz
22234     C4 00 90 5D |  if_ne	jmp	#LR__3734
22238     04 4E 05 F1 | 	add	fp, #4
2223c     A7 16 02 FB | 	rdlong	arg03, fp
22240     04 4E 85 F1 | 	sub	fp, #4
22244     2B 16 06 F1 | 	add	arg03, #43
22248     0B 17 C2 FA | 	rdbyte	arg03, arg03
2224c     80 16 CE F7 | 	test	arg03, #128 wz
22250     58 00 90 5D |  if_ne	jmp	#LR__3732
22254     04 4E 05 F1 | 	add	fp, #4
22258     A7 16 02 FB | 	rdlong	arg03, fp
2225c     04 4E 85 F1 | 	sub	fp, #4
22260     06 16 06 F1 | 	add	arg03, #6
22264     0B 17 C2 FA | 	rdbyte	arg03, arg03
22268     10 16 CE F7 | 	test	arg03, #16 wz
2226c     30 00 90 AD |  if_e	jmp	#LR__3730
22270     04 4E 05 F1 | 	add	fp, #4
22274     A7 16 02 FB | 	rdlong	arg03, fp
22278     0B 1F 02 F6 | 	mov	local01, arg03
2227c     0C 4E 05 F1 | 	add	fp, #12
22280     A7 12 02 FB | 	rdlong	arg01, fp
22284     10 4E 85 F1 | 	sub	fp, #16
22288     1C 16 06 F1 | 	add	arg03, #28
2228c     0B 15 02 FB | 	rdlong	arg02, arg03
22290     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
22294     08 1E 06 F1 | 	add	local01, #8
22298     0F FB 61 FC | 	wrlong	result1, local01
2229c     0C 00 90 FD | 	jmp	#LR__3731
222a0                 | LR__3730
222a0     0C 4E 05 F1 | 	add	fp, #12
222a4     A7 0A 68 FC | 	wrlong	#5, fp
222a8     0C 4E 85 F1 | 	sub	fp, #12
222ac                 | LR__3731
222ac                 | LR__3732
222ac     0C 4E 05 F1 | 	add	fp, #12
222b0     A7 1E 0A FB | 	rdlong	local01, fp wz
222b4     0C 4E 85 F1 | 	sub	fp, #12
222b8     40 00 90 5D |  if_ne	jmp	#LR__3733
222bc     04 4E 05 F1 | 	add	fp, #4
222c0     A7 1E 02 FB | 	rdlong	local01, fp
222c4     0C 4E 05 F1 | 	add	fp, #12
222c8     A7 16 02 FB | 	rdlong	arg03, fp
222cc     06 16 06 F1 | 	add	arg03, #6
222d0     0B 17 E2 FA | 	rdword	arg03, arg03
222d4     04 1E 06 F1 | 	add	local01, #4
222d8     0F 17 52 FC | 	wrword	arg03, local01
222dc     0C 4E 85 F1 | 	sub	fp, #12
222e0     A7 12 02 FB | 	rdlong	arg01, fp
222e4     04 4E 85 F1 | 	sub	fp, #4
222e8     00 14 06 F6 | 	mov	arg02, #0
222ec     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
222f0     0C 4E 05 F1 | 	add	fp, #12
222f4     A7 FA 61 FC | 	wrlong	result1, fp
222f8     0C 4E 85 F1 | 	sub	fp, #12
222fc                 | LR__3733
222fc                 | LR__3734
222fc     0C 4E 05 F1 | 	add	fp, #12
22300     A7 1E 02 FB | 	rdlong	local01, fp
22304     0C 4E 85 F1 | 	sub	fp, #12
22308     04 1E 0E F2 | 	cmp	local01, #4 wz
2230c     0C 4E 05 A1 |  if_e	add	fp, #12
22310     A7 0A 68 AC |  if_e	wrlong	#5, fp
22314     0C 4E 85 A1 |  if_e	sub	fp, #12
22318                 | LR__3735
22318     0C 4E 05 F1 | 	add	fp, #12
2231c     A7 1E 0A FB | 	rdlong	local01, fp wz
22320     0C 4E 85 F1 | 	sub	fp, #12
22324     04 4E 05 51 |  if_ne	add	fp, #4
22328     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2232c     04 4E 85 51 |  if_ne	sub	fp, #4
22330     0F 01 68 5C |  if_ne	wrlong	#0, local01
22334                 | ' 
22334                 | ' 	return res ;
22334     0C 4E 05 F1 | 	add	fp, #12
22338     A7 FA 01 FB | 	rdlong	result1, fp
2233c     0C 4E 85 F1 | 	sub	fp, #12
22340                 | LR__3736
22340     A7 F0 03 F6 | 	mov	ptra, fp
22344     B2 00 A0 FD | 	call	#popregs_
22348                 | _fatfs_cc_f_opendir_ret
22348     2D 00 64 FD | 	ret
2234c                 | 
2234c                 | _fatfs_cc_f_closedir
2234c     00 4A 05 F6 | 	mov	COUNT_, #0
22350     A8 00 A0 FD | 	call	#pushregs_
22354     10 F0 07 F1 | 	add	ptra, #16
22358     04 4E 05 F1 | 	add	fp, #4
2235c     A7 12 62 FC | 	wrlong	arg01, fp
22360     08 4E 05 F1 | 	add	fp, #8
22364     A7 14 02 F6 | 	mov	arg02, fp
22368     0C 4E 85 F1 | 	sub	fp, #12
2236c     C0 DD BF FD | 	call	#_fatfs_cc_validate
22370     08 4E 05 F1 | 	add	fp, #8
22374     A7 FA 61 FC | 	wrlong	result1, fp
22378     08 4E 85 F1 | 	sub	fp, #8
2237c     00 FA 0D F2 | 	cmp	result1, #0 wz
22380     04 4E 05 A1 |  if_e	add	fp, #4
22384     A7 FA 01 AB |  if_e	rdlong	result1, fp
22388     04 4E 85 A1 |  if_e	sub	fp, #4
2238c     FD 00 68 AC |  if_e	wrlong	#0, result1
22390                 | ' 
22390                 | ' 
22390                 | ' 
22390                 | ' 
22390                 | ' 		dp->obj.fs = 0;
22390                 | ' #line 4633 "ff.c"
22390                 | ' 	}
22390                 | ' 	return res;
22390     08 4E 05 F1 | 	add	fp, #8
22394     A7 FA 01 FB | 	rdlong	result1, fp
22398     08 4E 85 F1 | 	sub	fp, #8
2239c     A7 F0 03 F6 | 	mov	ptra, fp
223a0     B2 00 A0 FD | 	call	#popregs_
223a4                 | _fatfs_cc_f_closedir_ret
223a4     2D 00 64 FD | 	ret
223a8                 | 
223a8                 | _fatfs_cc_f_readdir
223a8     00 4A 05 F6 | 	mov	COUNT_, #0
223ac     A8 00 A0 FD | 	call	#pushregs_
223b0     14 F0 07 F1 | 	add	ptra, #20
223b4     04 4E 05 F1 | 	add	fp, #4
223b8     A7 12 62 FC | 	wrlong	arg01, fp
223bc     04 4E 05 F1 | 	add	fp, #4
223c0     A7 14 62 FC | 	wrlong	arg02, fp
223c4     04 4E 85 F1 | 	sub	fp, #4
223c8     A7 12 02 FB | 	rdlong	arg01, fp
223cc     0C 4E 05 F1 | 	add	fp, #12
223d0     A7 14 02 F6 | 	mov	arg02, fp
223d4     10 4E 85 F1 | 	sub	fp, #16
223d8     54 DD BF FD | 	call	#_fatfs_cc_validate
223dc     0C 4E 05 F1 | 	add	fp, #12
223e0     A7 FA 61 FC | 	wrlong	result1, fp
223e4     0C 4E 85 F1 | 	sub	fp, #12
223e8     00 FA 0D F2 | 	cmp	result1, #0 wz
223ec     BC 00 90 5D |  if_ne	jmp	#LR__3743
223f0     08 4E 05 F1 | 	add	fp, #8
223f4     A7 FA 09 FB | 	rdlong	result1, fp wz
223f8     08 4E 85 F1 | 	sub	fp, #8
223fc     24 00 90 5D |  if_ne	jmp	#LR__3740
22400     04 4E 05 F1 | 	add	fp, #4
22404     A7 12 02 FB | 	rdlong	arg01, fp
22408     04 4E 85 F1 | 	sub	fp, #4
2240c     00 14 06 F6 | 	mov	arg02, #0
22410     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
22414     0C 4E 05 F1 | 	add	fp, #12
22418     A7 FA 61 FC | 	wrlong	result1, fp
2241c     0C 4E 85 F1 | 	sub	fp, #12
22420     88 00 90 FD | 	jmp	#LR__3742
22424                 | LR__3740
22424     04 4E 05 F1 | 	add	fp, #4
22428     A7 12 02 FB | 	rdlong	arg01, fp
2242c     04 4E 85 F1 | 	sub	fp, #4
22430     00 14 06 F6 | 	mov	arg02, #0
22434     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
22438     0C 4E 05 F1 | 	add	fp, #12
2243c     A7 FA 61 FC | 	wrlong	result1, fp
22440     0C 4E 85 F1 | 	sub	fp, #12
22444     04 FA 0D F2 | 	cmp	result1, #4 wz
22448     0C 4E 05 A1 |  if_e	add	fp, #12
2244c     A7 00 68 AC |  if_e	wrlong	#0, fp
22450     0C 4E 85 A1 |  if_e	sub	fp, #12
22454     0C 4E 05 F1 | 	add	fp, #12
22458     A7 FA 09 FB | 	rdlong	result1, fp wz
2245c     0C 4E 85 F1 | 	sub	fp, #12
22460     48 00 90 5D |  if_ne	jmp	#LR__3741
22464     04 4E 05 F1 | 	add	fp, #4
22468     A7 12 02 FB | 	rdlong	arg01, fp
2246c     04 4E 05 F1 | 	add	fp, #4
22470     A7 14 02 FB | 	rdlong	arg02, fp
22474     08 4E 85 F1 | 	sub	fp, #8
22478     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2247c     04 4E 05 F1 | 	add	fp, #4
22480     A7 12 02 FB | 	rdlong	arg01, fp
22484     04 4E 85 F1 | 	sub	fp, #4
22488     00 14 06 F6 | 	mov	arg02, #0
2248c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
22490     0C 4E 05 F1 | 	add	fp, #12
22494     A7 FA 61 FC | 	wrlong	result1, fp
22498     0C 4E 85 F1 | 	sub	fp, #12
2249c     04 FA 0D F2 | 	cmp	result1, #4 wz
224a0     0C 4E 05 A1 |  if_e	add	fp, #12
224a4     A7 00 68 AC |  if_e	wrlong	#0, fp
224a8     0C 4E 85 A1 |  if_e	sub	fp, #12
224ac                 | LR__3741
224ac                 | LR__3742
224ac                 | LR__3743
224ac                 | ' 			}
224ac                 | ' 			;
224ac                 | ' 		}
224ac                 | ' 	}
224ac                 | ' 	return res ;
224ac     0C 4E 05 F1 | 	add	fp, #12
224b0     A7 FA 01 FB | 	rdlong	result1, fp
224b4     0C 4E 85 F1 | 	sub	fp, #12
224b8     A7 F0 03 F6 | 	mov	ptra, fp
224bc     B2 00 A0 FD | 	call	#popregs_
224c0                 | _fatfs_cc_f_readdir_ret
224c0     2D 00 64 FD | 	ret
224c4                 | 
224c4                 | _fatfs_cc_f_stat
224c4     00 4A 05 F6 | 	mov	COUNT_, #0
224c8     A8 00 A0 FD | 	call	#pushregs_
224cc     40 F0 07 F1 | 	add	ptra, #64
224d0     04 4E 05 F1 | 	add	fp, #4
224d4     A7 12 62 FC | 	wrlong	arg01, fp
224d8     04 4E 05 F1 | 	add	fp, #4
224dc     A7 14 62 FC | 	wrlong	arg02, fp
224e0     04 4E 85 F1 | 	sub	fp, #4
224e4     A7 12 02 F6 | 	mov	arg01, fp
224e8     0C 4E 05 F1 | 	add	fp, #12
224ec     A7 14 02 F6 | 	mov	arg02, fp
224f0     10 4E 85 F1 | 	sub	fp, #16
224f4     00 16 06 F6 | 	mov	arg03, #0
224f8     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
224fc     0C 4E 05 F1 | 	add	fp, #12
22500     A7 FA 61 FC | 	wrlong	result1, fp
22504     0C 4E 85 F1 | 	sub	fp, #12
22508     00 FA 0D F2 | 	cmp	result1, #0 wz
2250c     74 00 90 5D |  if_ne	jmp	#LR__3753
22510     10 4E 05 F1 | 	add	fp, #16
22514     A7 12 02 F6 | 	mov	arg01, fp
22518     0C 4E 85 F1 | 	sub	fp, #12
2251c     A7 14 02 FB | 	rdlong	arg02, fp
22520     04 4E 85 F1 | 	sub	fp, #4
22524     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
22528     0C 4E 05 F1 | 	add	fp, #12
2252c     A7 FA 61 FC | 	wrlong	result1, fp
22530     0C 4E 85 F1 | 	sub	fp, #12
22534     00 FA 0D F2 | 	cmp	result1, #0 wz
22538     48 00 90 5D |  if_ne	jmp	#LR__3752
2253c     3B 4E 05 F1 | 	add	fp, #59
22540     A7 FA C1 FA | 	rdbyte	result1, fp
22544     3B 4E 85 F1 | 	sub	fp, #59
22548     80 FA CD F7 | 	test	result1, #128 wz
2254c     0C 4E 05 51 |  if_ne	add	fp, #12
22550     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22554     0C 4E 85 51 |  if_ne	sub	fp, #12
22558     28 00 90 5D |  if_ne	jmp	#LR__3751
2255c     08 4E 05 F1 | 	add	fp, #8
22560     A7 FA 09 FB | 	rdlong	result1, fp wz
22564     08 4E 85 F1 | 	sub	fp, #8
22568     18 00 90 AD |  if_e	jmp	#LR__3750
2256c     10 4E 05 F1 | 	add	fp, #16
22570     A7 12 02 F6 | 	mov	arg01, fp
22574     08 4E 85 F1 | 	sub	fp, #8
22578     A7 14 02 FB | 	rdlong	arg02, fp
2257c     08 4E 85 F1 | 	sub	fp, #8
22580     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
22584                 | LR__3750
22584                 | LR__3751
22584                 | LR__3752
22584                 | LR__3753
22584                 | ' 			}
22584                 | ' 		}
22584                 | ' 		;
22584                 | ' 	}
22584                 | ' 
22584                 | ' 	return res ;
22584     0C 4E 05 F1 | 	add	fp, #12
22588     A7 FA 01 FB | 	rdlong	result1, fp
2258c     0C 4E 85 F1 | 	sub	fp, #12
22590     A7 F0 03 F6 | 	mov	ptra, fp
22594     B2 00 A0 FD | 	call	#popregs_
22598                 | _fatfs_cc_f_stat_ret
22598     2D 00 64 FD | 	ret
2259c                 | 
2259c                 | _fatfs_cc_f_unlink
2259c     00 4A 05 F6 | 	mov	COUNT_, #0
225a0     A8 00 A0 FD | 	call	#pushregs_
225a4     74 F0 07 F1 | 	add	ptra, #116
225a8     04 4E 05 F1 | 	add	fp, #4
225ac     A7 12 62 FC | 	wrlong	arg01, fp
225b0     68 4E 05 F1 | 	add	fp, #104
225b4     A7 00 68 FC | 	wrlong	#0, fp
225b8     68 4E 85 F1 | 	sub	fp, #104
225bc     A7 12 02 F6 | 	mov	arg01, fp
225c0     6C 4E 05 F1 | 	add	fp, #108
225c4     A7 14 02 F6 | 	mov	arg02, fp
225c8     70 4E 85 F1 | 	sub	fp, #112
225cc     02 16 06 F6 | 	mov	arg03, #2
225d0     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
225d4     08 4E 05 F1 | 	add	fp, #8
225d8     A7 FA 61 FC | 	wrlong	result1, fp
225dc     08 4E 85 F1 | 	sub	fp, #8
225e0     00 FA 0D F2 | 	cmp	result1, #0 wz
225e4     E4 01 90 5D |  if_ne	jmp	#LR__3768
225e8     70 4E 05 F1 | 	add	fp, #112
225ec     A7 16 02 FB | 	rdlong	arg03, fp
225f0     64 4E 85 F1 | 	sub	fp, #100
225f4     A7 16 62 FC | 	wrlong	arg03, fp
225f8     A7 12 02 F6 | 	mov	arg01, fp
225fc     08 4E 85 F1 | 	sub	fp, #8
22600     A7 14 02 FB | 	rdlong	arg02, fp
22604     04 4E 85 F1 | 	sub	fp, #4
22608     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2260c     08 4E 05 F1 | 	add	fp, #8
22610     A7 FA 61 FC | 	wrlong	result1, fp
22614     00 FA 4D F2 | 	cmps	result1, #0 wz
22618     08 4E 85 F1 | 	sub	fp, #8
2261c     AC 01 90 5D |  if_ne	jmp	#LR__3767
22620     37 4E 05 F1 | 	add	fp, #55
22624     A7 FA C1 FA | 	rdbyte	result1, fp
22628     37 4E 85 F1 | 	sub	fp, #55
2262c     80 FA CD F7 | 	test	result1, #128 wz
22630     08 4E 05 51 |  if_ne	add	fp, #8
22634     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22638     08 4E 85 51 |  if_ne	sub	fp, #8
2263c     1C 00 90 5D |  if_ne	jmp	#LR__3760
22640     12 4E 05 F1 | 	add	fp, #18
22644     A7 FA C1 FA | 	rdbyte	result1, fp
22648     12 4E 85 F1 | 	sub	fp, #18
2264c     01 FA CD F7 | 	test	result1, #1 wz
22650     08 4E 05 51 |  if_ne	add	fp, #8
22654     A7 0E 68 5C |  if_ne	wrlong	#7, fp
22658     08 4E 85 51 |  if_ne	sub	fp, #8
2265c                 | LR__3760
2265c     08 4E 05 F1 | 	add	fp, #8
22660     A7 FA 09 FB | 	rdlong	result1, fp wz
22664     08 4E 85 F1 | 	sub	fp, #8
22668     C8 00 90 5D |  if_ne	jmp	#LR__3763
2266c     70 4E 05 F1 | 	add	fp, #112
22670     A7 12 02 FB | 	rdlong	arg01, fp
22674     48 4E 85 F1 | 	sub	fp, #72
22678     A7 14 02 FB | 	rdlong	arg02, fp
2267c     28 4E 85 F1 | 	sub	fp, #40
22680     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
22684     6C 4E 05 F1 | 	add	fp, #108
22688     A7 FA 61 FC | 	wrlong	result1, fp
2268c     5A 4E 85 F1 | 	sub	fp, #90
22690     A7 FA C1 FA | 	rdbyte	result1, fp
22694     12 4E 85 F1 | 	sub	fp, #18
22698     10 FA CD F7 | 	test	result1, #16 wz
2269c     94 00 90 AD |  if_e	jmp	#LR__3762
226a0     70 4E 05 F1 | 	add	fp, #112
226a4     A7 FA 01 FB | 	rdlong	result1, fp
226a8     34 4E 85 F1 | 	sub	fp, #52
226ac     A7 FA 61 FC | 	wrlong	result1, fp
226b0     30 4E 05 F1 | 	add	fp, #48
226b4     A7 16 02 FB | 	rdlong	arg03, fp
226b8     28 4E 85 F1 | 	sub	fp, #40
226bc     A7 16 62 FC | 	wrlong	arg03, fp
226c0     08 4E 85 F1 | 	sub	fp, #8
226c4     A7 12 02 F6 | 	mov	arg01, fp
226c8     3C 4E 85 F1 | 	sub	fp, #60
226cc     00 14 06 F6 | 	mov	arg02, #0
226d0     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
226d4     08 4E 05 F1 | 	add	fp, #8
226d8     A7 FA 61 FC | 	wrlong	result1, fp
226dc     08 4E 85 F1 | 	sub	fp, #8
226e0     00 FA 0D F2 | 	cmp	result1, #0 wz
226e4     4C 00 90 5D |  if_ne	jmp	#LR__3761
226e8     3C 4E 05 F1 | 	add	fp, #60
226ec     A7 12 02 F6 | 	mov	arg01, fp
226f0     3C 4E 85 F1 | 	sub	fp, #60
226f4     00 14 06 F6 | 	mov	arg02, #0
226f8     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
226fc     08 4E 05 F1 | 	add	fp, #8
22700     A7 FA 61 FC | 	wrlong	result1, fp
22704     00 FA 4D F2 | 	cmps	result1, #0 wz
22708     08 4E 85 F1 | 	sub	fp, #8
2270c     08 4E 05 A1 |  if_e	add	fp, #8
22710     A7 0E 68 AC |  if_e	wrlong	#7, fp
22714     08 4E 85 A1 |  if_e	sub	fp, #8
22718     08 4E 05 F1 | 	add	fp, #8
2271c     A7 FA 01 FB | 	rdlong	result1, fp
22720     08 4E 85 F1 | 	sub	fp, #8
22724     04 FA 0D F2 | 	cmp	result1, #4 wz
22728     08 4E 05 A1 |  if_e	add	fp, #8
2272c     A7 00 68 AC |  if_e	wrlong	#0, fp
22730     08 4E 85 A1 |  if_e	sub	fp, #8
22734                 | LR__3761
22734                 | LR__3762
22734                 | LR__3763
22734     08 4E 05 F1 | 	add	fp, #8
22738     A7 FA 09 FB | 	rdlong	result1, fp wz
2273c     08 4E 85 F1 | 	sub	fp, #8
22740     88 00 90 5D |  if_ne	jmp	#LR__3766
22744     0C 4E 05 F1 | 	add	fp, #12
22748     A7 12 02 F6 | 	mov	arg01, fp
2274c     0C 4E 85 F1 | 	sub	fp, #12
22750     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
22754     08 4E 05 F1 | 	add	fp, #8
22758     A7 FA 61 FC | 	wrlong	result1, fp
2275c     08 4E 85 F1 | 	sub	fp, #8
22760     00 FA 0D F2 | 	cmp	result1, #0 wz
22764     38 00 90 5D |  if_ne	jmp	#LR__3764
22768     6C 4E 05 F1 | 	add	fp, #108
2276c     A7 FA 09 FB | 	rdlong	result1, fp wz
22770     6C 4E 85 F1 | 	sub	fp, #108
22774     28 00 90 AD |  if_e	jmp	#LR__3764
22778     0C 4E 05 F1 | 	add	fp, #12
2277c     A7 12 02 F6 | 	mov	arg01, fp
22780     60 4E 05 F1 | 	add	fp, #96
22784     A7 14 02 FB | 	rdlong	arg02, fp
22788     6C 4E 85 F1 | 	sub	fp, #108
2278c     00 16 06 F6 | 	mov	arg03, #0
22790     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
22794     08 4E 05 F1 | 	add	fp, #8
22798     A7 FA 61 FC | 	wrlong	result1, fp
2279c     08 4E 85 F1 | 	sub	fp, #8
227a0                 | LR__3764
227a0     08 4E 05 F1 | 	add	fp, #8
227a4     A7 FA 09 FB | 	rdlong	result1, fp wz
227a8     08 4E 85 F1 | 	sub	fp, #8
227ac     1C 00 90 5D |  if_ne	jmp	#LR__3765
227b0     70 4E 05 F1 | 	add	fp, #112
227b4     A7 12 02 FB | 	rdlong	arg01, fp
227b8     70 4E 85 F1 | 	sub	fp, #112
227bc     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
227c0     08 4E 05 F1 | 	add	fp, #8
227c4     A7 FA 61 FC | 	wrlong	result1, fp
227c8     08 4E 85 F1 | 	sub	fp, #8
227cc                 | LR__3765
227cc                 | LR__3766
227cc                 | LR__3767
227cc                 | LR__3768
227cc                 | ' 			}
227cc                 | ' 		}
227cc                 | ' 		;
227cc                 | ' 	}
227cc                 | ' 
227cc                 | ' 	return res ;
227cc     08 4E 05 F1 | 	add	fp, #8
227d0     A7 FA 01 FB | 	rdlong	result1, fp
227d4     08 4E 85 F1 | 	sub	fp, #8
227d8     A7 F0 03 F6 | 	mov	ptra, fp
227dc     B2 00 A0 FD | 	call	#popregs_
227e0                 | _fatfs_cc_f_unlink_ret
227e0     2D 00 64 FD | 	ret
227e4                 | 
227e4                 | _fatfs_cc_f_mkdir
227e4     00 4A 05 F6 | 	mov	COUNT_, #0
227e8     A8 00 A0 FD | 	call	#pushregs_
227ec     5C F0 07 F1 | 	add	ptra, #92
227f0     04 4E 05 F1 | 	add	fp, #4
227f4     A7 12 62 FC | 	wrlong	arg01, fp
227f8     A7 12 02 F6 | 	mov	arg01, fp
227fc     48 4E 05 F1 | 	add	fp, #72
22800     A7 14 02 F6 | 	mov	arg02, fp
22804     4C 4E 85 F1 | 	sub	fp, #76
22808     02 16 06 F6 | 	mov	arg03, #2
2280c     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
22810     08 4E 05 F1 | 	add	fp, #8
22814     A7 FA 61 FC | 	wrlong	result1, fp
22818     08 4E 85 F1 | 	sub	fp, #8
2281c     00 FA 0D F2 | 	cmp	result1, #0 wz
22820     C4 02 90 5D |  if_ne	jmp	#LR__3775
22824     4C 4E 05 F1 | 	add	fp, #76
22828     A7 16 02 FB | 	rdlong	arg03, fp
2282c     40 4E 85 F1 | 	sub	fp, #64
22830     A7 16 62 FC | 	wrlong	arg03, fp
22834     A7 12 02 F6 | 	mov	arg01, fp
22838     08 4E 85 F1 | 	sub	fp, #8
2283c     A7 14 02 FB | 	rdlong	arg02, fp
22840     04 4E 85 F1 | 	sub	fp, #4
22844     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
22848     08 4E 05 F1 | 	add	fp, #8
2284c     A7 FA 61 FC | 	wrlong	result1, fp
22850     00 FA 4D F2 | 	cmps	result1, #0 wz
22854     08 4E 85 F1 | 	sub	fp, #8
22858     08 4E 05 A1 |  if_e	add	fp, #8
2285c     A7 10 68 AC |  if_e	wrlong	#8, fp
22860     08 4E 85 A1 |  if_e	sub	fp, #8
22864     08 4E 05 F1 | 	add	fp, #8
22868     A7 FA 01 FB | 	rdlong	result1, fp
2286c     08 4E 85 F1 | 	sub	fp, #8
22870     04 FA 0D F2 | 	cmp	result1, #4 wz
22874     70 02 90 5D |  if_ne	jmp	#LR__3774
22878     4C 4E 05 F1 | 	add	fp, #76
2287c     A7 16 02 FB | 	rdlong	arg03, fp
22880     10 4E 85 F1 | 	sub	fp, #16
22884     A7 16 62 FC | 	wrlong	arg03, fp
22888     A7 12 02 F6 | 	mov	arg01, fp
2288c     3C 4E 85 F1 | 	sub	fp, #60
22890     00 14 06 F6 | 	mov	arg02, #0
22894     04 AC BF FD | 	call	#_fatfs_cc_create_chain
22898     50 4E 05 F1 | 	add	fp, #80
2289c     A7 FA 61 FC | 	wrlong	result1, fp
228a0     48 4E 85 F1 | 	sub	fp, #72
228a4     A7 00 68 FC | 	wrlong	#0, fp
228a8     48 4E 05 F1 | 	add	fp, #72
228ac     A7 FA 09 FB | 	rdlong	result1, fp wz
228b0     50 4E 85 F1 | 	sub	fp, #80
228b4     08 4E 05 A1 |  if_e	add	fp, #8
228b8     A7 0E 68 AC |  if_e	wrlong	#7, fp
228bc     08 4E 85 A1 |  if_e	sub	fp, #8
228c0     50 4E 05 F1 | 	add	fp, #80
228c4     A7 FA 01 FB | 	rdlong	result1, fp
228c8     50 4E 85 F1 | 	sub	fp, #80
228cc     01 FA 0D F2 | 	cmp	result1, #1 wz
228d0     08 4E 05 A1 |  if_e	add	fp, #8
228d4     A7 04 68 AC |  if_e	wrlong	#2, fp
228d8     08 4E 85 A1 |  if_e	sub	fp, #8
228dc     50 4E 05 F1 | 	add	fp, #80
228e0     A7 16 02 FB | 	rdlong	arg03, fp
228e4     50 4E 85 F1 | 	sub	fp, #80
228e8     FF FF 7F FF 
228ec     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
228f0     08 4E 05 A1 |  if_e	add	fp, #8
228f4     A7 02 68 AC |  if_e	wrlong	#1, fp
228f8     08 4E 85 A1 |  if_e	sub	fp, #8
228fc     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
22900     58 4E 05 F1 | 	add	fp, #88
22904     A7 FA 61 FC | 	wrlong	result1, fp
22908     50 4E 85 F1 | 	sub	fp, #80
2290c     A7 FA 09 FB | 	rdlong	result1, fp wz
22910     08 4E 85 F1 | 	sub	fp, #8
22914     1C 01 90 5D |  if_ne	jmp	#LR__3771
22918     4C 4E 05 F1 | 	add	fp, #76
2291c     A7 12 02 FB | 	rdlong	arg01, fp
22920     04 4E 05 F1 | 	add	fp, #4
22924     A7 14 02 FB | 	rdlong	arg02, fp
22928     50 4E 85 F1 | 	sub	fp, #80
2292c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
22930     08 4E 05 F1 | 	add	fp, #8
22934     A7 FA 61 FC | 	wrlong	result1, fp
22938     00 FA 4D F2 | 	cmps	result1, #0 wz
2293c     08 4E 85 F1 | 	sub	fp, #8
22940     F0 00 90 5D |  if_ne	jmp	#LR__3770
22944     4C 4E 05 F1 | 	add	fp, #76
22948     A7 12 02 FB | 	rdlong	arg01, fp
2294c     4C 4E 85 F1 | 	sub	fp, #76
22950     34 12 06 F1 | 	add	arg01, #52
22954     20 14 06 F6 | 	mov	arg02, #32
22958     0B 16 06 F6 | 	mov	arg03, #11
2295c     98 00 A0 FD | 	call	#\builtin_bytefill_
22960     4C 4E 05 F1 | 	add	fp, #76
22964     A7 FA 01 FB | 	rdlong	result1, fp
22968     34 FA 05 F1 | 	add	result1, #52
2296c     FD 5C 48 FC | 	wrbyte	#46, result1
22970     A7 16 02 FB | 	rdlong	arg03, fp
22974     3F 16 06 F1 | 	add	arg03, #63
22978     0B 21 48 FC | 	wrbyte	#16, arg03
2297c     A7 12 02 FB | 	rdlong	arg01, fp
22980     4A 12 06 F1 | 	add	arg01, #74
22984     0C 4E 05 F1 | 	add	fp, #12
22988     A7 14 02 FB | 	rdlong	arg02, fp
2298c     09 15 62 FC | 	wrlong	arg02, arg01
22990     0C 4E 85 F1 | 	sub	fp, #12
22994     A7 14 02 FB | 	rdlong	arg02, fp
22998     0A 13 02 F6 | 	mov	arg01, arg02
2299c     34 14 06 F1 | 	add	arg02, #52
229a0     04 4E 05 F1 | 	add	fp, #4
229a4     A7 16 02 FB | 	rdlong	arg03, fp
229a8     50 4E 85 F1 | 	sub	fp, #80
229ac     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
229b0     4C 4E 05 F1 | 	add	fp, #76
229b4     A7 14 02 FB | 	rdlong	arg02, fp
229b8     0A 13 02 F6 | 	mov	arg01, arg02
229bc     54 12 06 F1 | 	add	arg01, #84
229c0     4C 4E 85 F1 | 	sub	fp, #76
229c4     34 14 06 F1 | 	add	arg02, #52
229c8     20 16 06 F6 | 	mov	arg03, #32
229cc     B4 30 BF FD | 	call	#__system____builtin_memmove
229d0     4C 4E 05 F1 | 	add	fp, #76
229d4     A7 16 02 FB | 	rdlong	arg03, fp
229d8     55 16 06 F1 | 	add	arg03, #85
229dc     0B 5D 48 FC | 	wrbyte	#46, arg03
229e0     38 4E 85 F1 | 	sub	fp, #56
229e4     A7 16 02 FB | 	rdlong	arg03, fp
229e8     40 4E 05 F1 | 	add	fp, #64
229ec     A7 16 62 FC | 	wrlong	arg03, fp
229f0     08 4E 85 F1 | 	sub	fp, #8
229f4     A7 14 02 FB | 	rdlong	arg02, fp
229f8     0A 13 02 F6 | 	mov	arg01, arg02
229fc     54 14 06 F1 | 	add	arg02, #84
22a00     4C 4E 85 F1 | 	sub	fp, #76
22a04     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
22a08     4C 4E 05 F1 | 	add	fp, #76
22a0c     A7 16 02 FB | 	rdlong	arg03, fp
22a10     03 16 06 F1 | 	add	arg03, #3
22a14     0B 03 48 FC | 	wrbyte	#1, arg03
22a18     40 4E 85 F1 | 	sub	fp, #64
22a1c     A7 12 02 F6 | 	mov	arg01, fp
22a20     0C 4E 85 F1 | 	sub	fp, #12
22a24     44 BA BF FD | 	call	#_fatfs_cc_dir_register
22a28     08 4E 05 F1 | 	add	fp, #8
22a2c     A7 FA 61 FC | 	wrlong	result1, fp
22a30     08 4E 85 F1 | 	sub	fp, #8
22a34                 | LR__3770
22a34                 | LR__3771
22a34     08 4E 05 F1 | 	add	fp, #8
22a38     A7 FA 09 FB | 	rdlong	result1, fp wz
22a3c     08 4E 85 F1 | 	sub	fp, #8
22a40     88 00 90 5D |  if_ne	jmp	#LR__3772
22a44     28 4E 05 F1 | 	add	fp, #40
22a48     A7 12 02 FB | 	rdlong	arg01, fp
22a4c     16 12 06 F1 | 	add	arg01, #22
22a50     30 4E 05 F1 | 	add	fp, #48
22a54     A7 14 02 FB | 	rdlong	arg02, fp
22a58     09 15 62 FC | 	wrlong	arg02, arg01
22a5c     0C 4E 85 F1 | 	sub	fp, #12
22a60     A7 12 02 FB | 	rdlong	arg01, fp
22a64     24 4E 85 F1 | 	sub	fp, #36
22a68     A7 14 02 FB | 	rdlong	arg02, fp
22a6c     28 4E 05 F1 | 	add	fp, #40
22a70     A7 16 02 FB | 	rdlong	arg03, fp
22a74     50 4E 85 F1 | 	sub	fp, #80
22a78     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
22a7c     28 4E 05 F1 | 	add	fp, #40
22a80     A7 FA 01 FB | 	rdlong	result1, fp
22a84     0B FA 05 F1 | 	add	result1, #11
22a88     FD 20 48 FC | 	wrbyte	#16, result1
22a8c     24 4E 05 F1 | 	add	fp, #36
22a90     A7 FA 01 FB | 	rdlong	result1, fp
22a94     03 FA 05 F1 | 	add	result1, #3
22a98     FD 02 48 FC | 	wrbyte	#1, result1
22a9c     44 4E 85 F1 | 	sub	fp, #68
22aa0     A7 FA 09 FB | 	rdlong	result1, fp wz
22aa4     08 4E 85 F1 | 	sub	fp, #8
22aa8     3C 00 90 5D |  if_ne	jmp	#LR__3773
22aac     4C 4E 05 F1 | 	add	fp, #76
22ab0     A7 12 02 FB | 	rdlong	arg01, fp
22ab4     4C 4E 85 F1 | 	sub	fp, #76
22ab8     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
22abc     08 4E 05 F1 | 	add	fp, #8
22ac0     A7 FA 61 FC | 	wrlong	result1, fp
22ac4     08 4E 85 F1 | 	sub	fp, #8
22ac8     1C 00 90 FD | 	jmp	#LR__3773
22acc                 | LR__3772
22acc     3C 4E 05 F1 | 	add	fp, #60
22ad0     A7 12 02 F6 | 	mov	arg01, fp
22ad4     14 4E 05 F1 | 	add	fp, #20
22ad8     A7 14 02 FB | 	rdlong	arg02, fp
22adc     50 4E 85 F1 | 	sub	fp, #80
22ae0     00 16 06 F6 | 	mov	arg03, #0
22ae4     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
22ae8                 | LR__3773
22ae8                 | LR__3774
22ae8                 | LR__3775
22ae8                 | ' 				remove_chain(&sobj, dcl, 0);
22ae8                 | ' 			}
22ae8                 | ' 		}
22ae8                 | ' 		;
22ae8                 | ' 	}
22ae8                 | ' 
22ae8                 | ' 	return res ;
22ae8     08 4E 05 F1 | 	add	fp, #8
22aec     A7 FA 01 FB | 	rdlong	result1, fp
22af0     08 4E 85 F1 | 	sub	fp, #8
22af4     A7 F0 03 F6 | 	mov	ptra, fp
22af8     B2 00 A0 FD | 	call	#popregs_
22afc                 | _fatfs_cc_f_mkdir_ret
22afc     2D 00 64 FD | 	ret
22b00                 | 
22b00                 | _fatfs_cc_f_rename
22b00     01 4A 05 F6 | 	mov	COUNT_, #1
22b04     A8 00 A0 FD | 	call	#pushregs_
22b08     9C F0 07 F1 | 	add	ptra, #156
22b0c     04 4E 05 F1 | 	add	fp, #4
22b10     A7 12 62 FC | 	wrlong	arg01, fp
22b14     04 4E 05 F1 | 	add	fp, #4
22b18     A7 14 62 FC | 	wrlong	arg02, fp
22b1c     A7 12 02 F6 | 	mov	arg01, fp
22b20     08 4E 85 F1 | 	sub	fp, #8
22b24     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
22b28     04 4E 05 F1 | 	add	fp, #4
22b2c     A7 12 02 F6 | 	mov	arg01, fp
22b30     6C 4E 05 F1 | 	add	fp, #108
22b34     A7 14 02 F6 | 	mov	arg02, fp
22b38     70 4E 85 F1 | 	sub	fp, #112
22b3c     02 16 06 F6 | 	mov	arg03, #2
22b40     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
22b44     0C 4E 05 F1 | 	add	fp, #12
22b48     A7 FA 61 FC | 	wrlong	result1, fp
22b4c     0C 4E 85 F1 | 	sub	fp, #12
22b50     00 FA 0D F2 | 	cmp	result1, #0 wz
22b54     44 03 90 5D |  if_ne	jmp	#LR__3793
22b58     70 4E 05 F1 | 	add	fp, #112
22b5c     A7 16 02 FB | 	rdlong	arg03, fp
22b60     60 4E 85 F1 | 	sub	fp, #96
22b64     A7 16 62 FC | 	wrlong	arg03, fp
22b68     A7 12 02 F6 | 	mov	arg01, fp
22b6c     0C 4E 85 F1 | 	sub	fp, #12
22b70     A7 14 02 FB | 	rdlong	arg02, fp
22b74     04 4E 85 F1 | 	sub	fp, #4
22b78     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
22b7c     0C 4E 05 F1 | 	add	fp, #12
22b80     A7 FA 61 FC | 	wrlong	result1, fp
22b84     00 FA 4D F2 | 	cmps	result1, #0 wz
22b88     0C 4E 85 F1 | 	sub	fp, #12
22b8c     1C 00 90 5D |  if_ne	jmp	#LR__3780
22b90     3B 4E 05 F1 | 	add	fp, #59
22b94     A7 FA C1 FA | 	rdbyte	result1, fp
22b98     3B 4E 85 F1 | 	sub	fp, #59
22b9c     A0 FA CD F7 | 	test	result1, #160 wz
22ba0     0C 4E 05 51 |  if_ne	add	fp, #12
22ba4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22ba8     0C 4E 85 51 |  if_ne	sub	fp, #12
22bac                 | LR__3780
22bac     0C 4E 05 F1 | 	add	fp, #12
22bb0     A7 1E 0A FB | 	rdlong	local01, fp wz
22bb4     0C 4E 85 F1 | 	sub	fp, #12
22bb8     E0 02 90 5D |  if_ne	jmp	#LR__3792
22bbc     74 4E 05 F1 | 	add	fp, #116
22bc0     A7 12 02 F6 | 	mov	arg01, fp
22bc4     48 4E 85 F1 | 	sub	fp, #72
22bc8     A7 14 02 FB | 	rdlong	arg02, fp
22bcc     2C 4E 85 F1 | 	sub	fp, #44
22bd0     20 16 06 F6 | 	mov	arg03, #32
22bd4     AC 2E BF FD | 	call	#__system____builtin_memmove
22bd8     40 4E 05 F1 | 	add	fp, #64
22bdc     A7 12 02 F6 | 	mov	arg01, fp
22be0     30 4E 85 F1 | 	sub	fp, #48
22be4     A7 14 02 F6 | 	mov	arg02, fp
22be8     10 4E 85 F1 | 	sub	fp, #16
22bec     30 16 06 F6 | 	mov	arg03, #48
22bf0     90 2E BF FD | 	call	#__system____builtin_memmove
22bf4     40 4E 05 F1 | 	add	fp, #64
22bf8     A7 12 02 F6 | 	mov	arg01, fp
22bfc     38 4E 85 F1 | 	sub	fp, #56
22c00     A7 14 02 FB | 	rdlong	arg02, fp
22c04     08 4E 85 F1 | 	sub	fp, #8
22c08     34 CA BF FD | 	call	#_fatfs_cc_follow_path
22c0c     0C 4E 05 F1 | 	add	fp, #12
22c10     A7 FA 61 FC | 	wrlong	result1, fp
22c14     0C 4E 85 F1 | 	sub	fp, #12
22c18     00 FA 0D F2 | 	cmp	result1, #0 wz
22c1c     4C 00 90 5D |  if_ne	jmp	#LR__3783
22c20     48 4E 05 F1 | 	add	fp, #72
22c24     A7 FA 01 FB | 	rdlong	result1, fp
22c28     30 4E 85 F1 | 	sub	fp, #48
22c2c     A7 16 02 FB | 	rdlong	arg03, fp
22c30     18 4E 85 F1 | 	sub	fp, #24
22c34     0B FB 09 F2 | 	cmp	result1, arg03 wz
22c38     20 00 90 5D |  if_ne	jmp	#LR__3781
22c3c     50 4E 05 F1 | 	add	fp, #80
22c40     A7 FA 01 FB | 	rdlong	result1, fp
22c44     30 4E 85 F1 | 	sub	fp, #48
22c48     A7 16 02 FB | 	rdlong	arg03, fp
22c4c     20 4E 85 F1 | 	sub	fp, #32
22c50     0B FB 09 F2 | 	cmp	result1, arg03 wz
22c54     04 1E 06 A6 |  if_e	mov	local01, #4
22c58     04 00 90 AD |  if_e	jmp	#LR__3782
22c5c                 | LR__3781
22c5c     08 1E 06 F6 | 	mov	local01, #8
22c60                 | LR__3782
22c60     0C 4E 05 F1 | 	add	fp, #12
22c64     A7 1E 62 FC | 	wrlong	local01, fp
22c68     0C 4E 85 F1 | 	sub	fp, #12
22c6c                 | LR__3783
22c6c     0C 4E 05 F1 | 	add	fp, #12
22c70     A7 1E 02 FB | 	rdlong	local01, fp
22c74     0C 4E 85 F1 | 	sub	fp, #12
22c78     04 1E 0E F2 | 	cmp	local01, #4 wz
22c7c     CC 01 90 5D |  if_ne	jmp	#LR__3789
22c80     40 4E 05 F1 | 	add	fp, #64
22c84     A7 12 02 F6 | 	mov	arg01, fp
22c88     40 4E 85 F1 | 	sub	fp, #64
22c8c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
22c90     0C 4E 05 F1 | 	add	fp, #12
22c94     A7 FA 61 FC | 	wrlong	result1, fp
22c98     0C 4E 85 F1 | 	sub	fp, #12
22c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
22ca0     A8 01 90 5D |  if_ne	jmp	#LR__3788
22ca4     5C 4E 05 F1 | 	add	fp, #92
22ca8     A7 12 02 FB | 	rdlong	arg01, fp
22cac     38 4E 05 F1 | 	add	fp, #56
22cb0     A7 12 62 FC | 	wrlong	arg01, fp
22cb4     0D 12 06 F1 | 	add	arg01, #13
22cb8     20 4E 85 F1 | 	sub	fp, #32
22cbc     A7 14 02 F6 | 	mov	arg02, fp
22cc0     74 4E 85 F1 | 	sub	fp, #116
22cc4     0D 14 06 F1 | 	add	arg02, #13
22cc8     13 16 06 F6 | 	mov	arg03, #19
22ccc     B4 2D BF FD | 	call	#__system____builtin_memmove
22cd0     94 4E 05 F1 | 	add	fp, #148
22cd4     A7 1E 02 FB | 	rdlong	local01, fp
22cd8     15 4E 85 F1 | 	sub	fp, #21
22cdc     A7 FA C1 FA | 	rdbyte	result1, fp
22ce0     0B 1E 06 F1 | 	add	local01, #11
22ce4     0F FB 41 FC | 	wrbyte	result1, local01
22ce8     15 4E 05 F1 | 	add	fp, #21
22cec     A7 1E 02 FB | 	rdlong	local01, fp
22cf0     94 4E 85 F1 | 	sub	fp, #148
22cf4     0B 1E 06 F1 | 	add	local01, #11
22cf8     0F 1F C2 FA | 	rdbyte	local01, local01
22cfc     10 1E CE F7 | 	test	local01, #16 wz
22d00     24 00 90 5D |  if_ne	jmp	#LR__3784
22d04     94 4E 05 F1 | 	add	fp, #148
22d08     A7 FA 01 FB | 	rdlong	result1, fp
22d0c     FD 1E 02 F6 | 	mov	local01, result1
22d10     94 4E 85 F1 | 	sub	fp, #148
22d14     0B FA 05 F1 | 	add	result1, #11
22d18     FD FA C1 FA | 	rdbyte	result1, result1
22d1c     20 FA 45 F5 | 	or	result1, #32
22d20     0B 1E 06 F1 | 	add	local01, #11
22d24     0F FB 41 FC | 	wrbyte	result1, local01
22d28                 | LR__3784
22d28     70 4E 05 F1 | 	add	fp, #112
22d2c     A7 1E 02 FB | 	rdlong	local01, fp
22d30     03 1E 06 F1 | 	add	local01, #3
22d34     0F 03 48 FC | 	wrbyte	#1, local01
22d38     24 4E 05 F1 | 	add	fp, #36
22d3c     A7 1E 02 FB | 	rdlong	local01, fp
22d40     94 4E 85 F1 | 	sub	fp, #148
22d44     0B 1E 06 F1 | 	add	local01, #11
22d48     0F 1F C2 FA | 	rdbyte	local01, local01
22d4c     10 1E CE F7 | 	test	local01, #16 wz
22d50     F8 00 90 AD |  if_e	jmp	#LR__3787
22d54     18 4E 05 F1 | 	add	fp, #24
22d58     A7 16 02 FB | 	rdlong	arg03, fp
22d5c     30 4E 05 F1 | 	add	fp, #48
22d60     A7 1E 02 FB | 	rdlong	local01, fp
22d64     48 4E 85 F1 | 	sub	fp, #72
22d68     0F 17 0A F2 | 	cmp	arg03, local01 wz
22d6c     DC 00 90 AD |  if_e	jmp	#LR__3787
22d70     70 4E 05 F1 | 	add	fp, #112
22d74     A7 12 02 FB | 	rdlong	arg01, fp
22d78     09 1F 02 F6 | 	mov	local01, arg01
22d7c     24 4E 05 F1 | 	add	fp, #36
22d80     A7 14 02 FB | 	rdlong	arg02, fp
22d84     94 4E 85 F1 | 	sub	fp, #148
22d88     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
22d8c     FD 14 02 F6 | 	mov	arg02, result1
22d90     0F 13 02 F6 | 	mov	arg01, local01
22d94     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
22d98     98 4E 05 F1 | 	add	fp, #152
22d9c     A7 FA 61 FC | 	wrlong	result1, fp
22da0     00 FA 4D F2 | 	cmps	result1, #0 wz
22da4     98 4E 85 F1 | 	sub	fp, #152
22da8     0C 4E 05 A1 |  if_e	add	fp, #12
22dac     A7 04 68 AC |  if_e	wrlong	#2, fp
22db0     0C 4E 85 A1 |  if_e	sub	fp, #12
22db4     94 00 90 AD |  if_e	jmp	#LR__3786
22db8     70 4E 05 F1 | 	add	fp, #112
22dbc     A7 12 02 FB | 	rdlong	arg01, fp
22dc0     28 4E 05 F1 | 	add	fp, #40
22dc4     A7 14 02 FB | 	rdlong	arg02, fp
22dc8     98 4E 85 F1 | 	sub	fp, #152
22dcc     4C A0 BF FD | 	call	#_fatfs_cc_move_window
22dd0     0C 4E 05 F1 | 	add	fp, #12
22dd4     A7 FA 61 FC | 	wrlong	result1, fp
22dd8     64 4E 05 F1 | 	add	fp, #100
22ddc     A7 1E 02 FB | 	rdlong	local01, fp
22de0     54 1E 06 F1 | 	add	local01, #84
22de4     24 4E 05 F1 | 	add	fp, #36
22de8     A7 1E 62 FC | 	wrlong	local01, fp
22dec     88 4E 85 F1 | 	sub	fp, #136
22df0     A7 1E 0A FB | 	rdlong	local01, fp wz
22df4     0C 4E 85 F1 | 	sub	fp, #12
22df8     50 00 90 5D |  if_ne	jmp	#LR__3785
22dfc     94 4E 05 F1 | 	add	fp, #148
22e00     A7 1E 02 FB | 	rdlong	local01, fp
22e04     94 4E 85 F1 | 	sub	fp, #148
22e08     01 1E 06 F1 | 	add	local01, #1
22e0c     0F 1F C2 FA | 	rdbyte	local01, local01
22e10     2E 1E 0E F2 | 	cmp	local01, #46 wz
22e14     34 00 90 5D |  if_ne	jmp	#LR__3785
22e18     70 4E 05 F1 | 	add	fp, #112
22e1c     A7 12 02 FB | 	rdlong	arg01, fp
22e20     24 4E 05 F1 | 	add	fp, #36
22e24     A7 14 02 FB | 	rdlong	arg02, fp
22e28     4C 4E 85 F1 | 	sub	fp, #76
22e2c     A7 16 02 FB | 	rdlong	arg03, fp
22e30     48 4E 85 F1 | 	sub	fp, #72
22e34     50 AD BF FD | 	call	#_fatfs_cc_st_clust
22e38     70 4E 05 F1 | 	add	fp, #112
22e3c     A7 1E 02 FB | 	rdlong	local01, fp
22e40     70 4E 85 F1 | 	sub	fp, #112
22e44     03 1E 06 F1 | 	add	local01, #3
22e48     0F 03 48 FC | 	wrbyte	#1, local01
22e4c                 | LR__3785
22e4c                 | LR__3786
22e4c                 | LR__3787
22e4c                 | LR__3788
22e4c                 | LR__3789
22e4c     0C 4E 05 F1 | 	add	fp, #12
22e50     A7 1E 0A FB | 	rdlong	local01, fp wz
22e54     0C 4E 85 F1 | 	sub	fp, #12
22e58     40 00 90 5D |  if_ne	jmp	#LR__3791
22e5c     10 4E 05 F1 | 	add	fp, #16
22e60     A7 12 02 F6 | 	mov	arg01, fp
22e64     10 4E 85 F1 | 	sub	fp, #16
22e68     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
22e6c     0C 4E 05 F1 | 	add	fp, #12
22e70     A7 FA 61 FC | 	wrlong	result1, fp
22e74     0C 4E 85 F1 | 	sub	fp, #12
22e78     00 FA 0D F2 | 	cmp	result1, #0 wz
22e7c     1C 00 90 5D |  if_ne	jmp	#LR__3790
22e80     70 4E 05 F1 | 	add	fp, #112
22e84     A7 12 02 FB | 	rdlong	arg01, fp
22e88     70 4E 85 F1 | 	sub	fp, #112
22e8c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
22e90     0C 4E 05 F1 | 	add	fp, #12
22e94     A7 FA 61 FC | 	wrlong	result1, fp
22e98     0C 4E 85 F1 | 	sub	fp, #12
22e9c                 | LR__3790
22e9c                 | LR__3791
22e9c                 | LR__3792
22e9c                 | LR__3793
22e9c                 | ' 					res = sync_fs(fs);
22e9c                 | ' 				}
22e9c                 | ' 			}
22e9c                 | ' 
22e9c                 | ' 		}
22e9c                 | ' 		;
22e9c                 | ' 	}
22e9c                 | ' 
22e9c                 | ' 	return res ;
22e9c     0C 4E 05 F1 | 	add	fp, #12
22ea0     A7 FA 01 FB | 	rdlong	result1, fp
22ea4     0C 4E 85 F1 | 	sub	fp, #12
22ea8     A7 F0 03 F6 | 	mov	ptra, fp
22eac     B2 00 A0 FD | 	call	#popregs_
22eb0                 | _fatfs_cc_f_rename_ret
22eb0     2D 00 64 FD | 	ret
22eb4                 | 
22eb4                 | _fatfs_cc_time
22eb4     00 4A 05 F6 | 	mov	COUNT_, #0
22eb8     A8 00 A0 FD | 	call	#pushregs_
22ebc     14 F0 07 F1 | 	add	ptra, #20
22ec0     04 4E 05 F1 | 	add	fp, #4
22ec4     A7 12 62 FC | 	wrlong	arg01, fp
22ec8     04 4E 05 F1 | 	add	fp, #4
22ecc     A7 12 02 F6 | 	mov	arg01, fp
22ed0     08 4E 85 F1 | 	sub	fp, #8
22ed4     00 14 06 F6 | 	mov	arg02, #0
22ed8     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
22edc     08 4E 05 F1 | 	add	fp, #8
22ee0     A7 FA 01 FB | 	rdlong	result1, fp
22ee4     08 4E 05 F1 | 	add	fp, #8
22ee8     A7 FA 61 FC | 	wrlong	result1, fp
22eec     0C 4E 85 F1 | 	sub	fp, #12
22ef0     A7 FA 09 FB | 	rdlong	result1, fp wz
22ef4     04 4E 85 F1 | 	sub	fp, #4
22ef8     18 00 90 AD |  if_e	jmp	#LR__3800
22efc     04 4E 05 F1 | 	add	fp, #4
22f00     A7 FA 01 FB | 	rdlong	result1, fp
22f04     0C 4E 05 F1 | 	add	fp, #12
22f08     A7 14 02 FB | 	rdlong	arg02, fp
22f0c     10 4E 85 F1 | 	sub	fp, #16
22f10     FD 14 62 FC | 	wrlong	arg02, result1
22f14                 | LR__3800
22f14                 | '         *tp = now;
22f14                 | '     return now;
22f14     10 4E 05 F1 | 	add	fp, #16
22f18     A7 FA 01 FB | 	rdlong	result1, fp
22f1c     10 4E 85 F1 | 	sub	fp, #16
22f20     A7 F0 03 F6 | 	mov	ptra, fp
22f24     B2 00 A0 FD | 	call	#popregs_
22f28                 | _fatfs_cc_time_ret
22f28     2D 00 64 FD | 	ret
22f2c                 | 
22f2c                 | _fatfs_cc_mktime
22f2c     06 4A 05 F6 | 	mov	COUNT_, #6
22f30     A8 00 A0 FD | 	call	#pushregs_
22f34     09 1F 02 F6 | 	mov	local01, arg01
22f38     14 1E 06 F1 | 	add	local01, #20
22f3c     0F 13 02 FB | 	rdlong	arg01, local01
22f40     14 1E 86 F1 | 	sub	local01, #20
22f44     46 12 56 F2 | 	cmps	arg01, #70 wc
22f48                 | '                 return (time_t) -1;
22f48     01 FA 65 C6 |  if_b	neg	result1, #1
22f4c     7C 01 90 CD |  if_b	jmp	#LR__3814
22f50     03 00 00 FF 
22f54     6C 21 06 F6 | 	mov	local02, ##1900
22f58     14 1E 06 F1 | 	add	local01, #20
22f5c     0F FB 01 FB | 	rdlong	result1, local01
22f60     FD 20 02 F1 | 	add	local02, result1
22f64     08 1E 86 F1 | 	sub	local01, #8
22f68     0F 23 02 FB | 	rdlong	local03, local01
22f6c     01 22 86 F1 | 	sub	local03, #1
22f70     04 1E 06 F1 | 	add	local01, #4
22f74     0F 13 02 FB | 	rdlong	arg01, local01
22f78     10 1E 86 F1 | 	sub	local01, #16
22f7c     02 12 66 F0 | 	shl	arg01, #2
22f80     02 00 00 FF 
22f84     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
22f88     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22f8c     09 FB 01 FB | 	rdlong	result1, arg01
22f90     FD 22 02 F1 | 	add	local03, result1
22f94     10 13 02 F6 | 	mov	arg01, local02
22f98     02 00 00 FF 
22f9c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
22fa0     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
22fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
22fa8     1C 00 90 AD |  if_e	jmp	#LR__3810
22fac     00 24 06 F6 | 	mov	local04, #0
22fb0     10 1E 06 F1 | 	add	local01, #16
22fb4     0F FB 01 FB | 	rdlong	result1, local01
22fb8     10 1E 86 F1 | 	sub	local01, #16
22fbc     02 FA 55 F2 | 	cmps	result1, #2 wc
22fc0     01 24 06 36 |  if_ae	mov	local04, #1
22fc4     04 00 90 FD | 	jmp	#LR__3811
22fc8                 | LR__3810
22fc8     00 24 06 F6 | 	mov	local04, #0
22fcc                 | LR__3811
22fcc     04 1E 06 F1 | 	add	local01, #4
22fd0     0F FB 01 FB | 	rdlong	result1, local01
22fd4     04 1E 86 F1 | 	sub	local01, #4
22fd8     0F 27 02 FB | 	rdlong	local05, local01
22fdc     08 1E 06 F1 | 	add	local01, #8
22fe0     0F 13 02 FB | 	rdlong	arg01, local01
22fe4     07 00 00 FF 
22fe8     10 12 06 FD | 	qmul	arg01, ##3600
22fec     12 23 02 F1 | 	add	local03, local04
22ff0     FD 24 02 F6 | 	mov	local04, result1
22ff4     04 24 66 F0 | 	shl	local04, #4
22ff8     FD 24 82 F1 | 	sub	local04, result1
22ffc     02 24 66 F0 | 	shl	local04, #2
23000     12 27 02 F1 | 	add	local05, local04
23004     08 1E 86 F1 | 	sub	local01, #8
23008     18 24 62 FD | 	getqx	local04
2300c     A8 00 00 FF 
23010     80 23 06 FD | 	qmul	local03, ##86400
23014     12 27 02 F1 | 	add	local05, local04
23018     10 23 02 F6 | 	mov	local03, local02
2301c     03 00 00 FF 
23020     B2 23 86 F1 | 	sub	local03, ##1970
23024     18 24 62 FD | 	getqx	local04
23028     99 F0 00 FF 
2302c     80 23 06 FD | 	qmul	local03, ##31536000
23030     12 27 02 F1 | 	add	local05, local04
23034     10 23 02 F6 | 	mov	local03, local02
23038     03 00 00 FF 
2303c     B1 23 86 F1 | 	sub	local03, ##1969
23040     11 29 52 F6 | 	abs	local06, local03 wc
23044     02 28 46 F0 | 	shr	local06, #2
23048     14 29 82 F6 | 	negc	local06, local06
2304c     03 00 00 FF 
23050     D1 21 56 F2 | 	cmps	local02, ##2001 wc
23054     18 24 62 FD | 	getqx	local04
23058     12 27 02 F1 | 	add	local05, local04
2305c     18 00 90 CD |  if_b	jmp	#LR__3812
23060     03 00 00 FF 
23064     D0 21 86 F1 | 	sub	local02, ##2000
23068     10 25 52 F6 | 	abs	local04, local02 wc
2306c     64 24 16 FD | 	qdiv	local04, #100
23070     18 24 62 FD | 	getqx	local04
23074     12 29 A2 F3 | 	sumnc	local06, local04
23078                 | LR__3812
23078     A8 00 00 FF 
2307c     80 29 06 FD | 	qmul	local06, ##86400
23080     18 28 62 FD | 	getqx	local06
23084     14 27 02 F1 | 	add	local05, local06
23088     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2308c     02 00 00 FF 
23090     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
23094     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
23098     14 27 02 F1 | 	add	local05, local06
2309c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
230a0     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
230a4     02 00 00 FF 
230a8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
230ac     01 22 0E F2 | 	cmp	local03, #1 wz
230b0     14 00 90 5D |  if_ne	jmp	#LR__3813
230b4     0F 13 02 F6 | 	mov	arg01, local01
230b8     D8 19 B0 FD | 	call	#_fatfs_cc___indst
230bc     00 FA 0D F2 | 	cmp	result1, #0 wz
230c0     07 00 00 5F 
230c4     10 26 86 51 |  if_ne	sub	local05, ##3600
230c8                 | LR__3813
230c8                 | '                 s -=  (3600L) ;
230c8                 | ' 
230c8                 | '         return s;
230c8     13 FB 01 F6 | 	mov	result1, local05
230cc                 | LR__3814
230cc     A7 F0 03 F6 | 	mov	ptra, fp
230d0     B2 00 A0 FD | 	call	#popregs_
230d4                 | _fatfs_cc_mktime_ret
230d4     2D 00 64 FD | 	ret
230d8                 | 
230d8                 | _fatfs_cc__gmtime_r
230d8     03 4A 05 F6 | 	mov	COUNT_, #3
230dc     A8 00 A0 FD | 	call	#pushregs_
230e0     09 1F 02 FB | 	rdlong	local01, arg01
230e4     A8 00 00 FF 
230e8     80 1F 16 FD | 	qdiv	local01, ##86400
230ec     18 FA 61 FD | 	getqx	result1
230f0     04 FA 05 F1 | 	add	result1, #4
230f4     07 FA 15 FD | 	qdiv	result1, #7
230f8     18 14 06 F1 | 	add	arg02, #24
230fc     D1 7F 27 FF 
23100     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
23104     D1 7F 27 3F 
23108     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2310c     03 00 00 3F 
23110     DC 21 06 36 |  if_ae	mov	local02, ##2012
23114     03 00 00 CF 
23118     B2 21 06 C6 |  if_b	mov	local02, ##1970
2311c                 | ' 	  year = 1970;
2311c                 | ' 	}
2311c                 | ' 
2311c                 | ' 	for(;;) {
2311c     19 FA 61 FD | 	getqy	result1
23120     0A FB 61 FC | 	wrlong	result1, arg02
23124     18 14 86 F1 | 	sub	arg02, #24
23128                 | LR__3820
23128     10 13 02 F6 | 	mov	arg01, local02
2312c     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
23130     00 FA 0D F2 | 	cmp	result1, #0 wz
23134     42 F1 00 5F 
23138     00 23 06 56 |  if_ne	mov	local03, ##31622400
2313c     99 F0 00 AF 
23140     80 23 06 A6 |  if_e	mov	local03, ##31536000
23144     11 1F 12 F2 | 	cmp	local01, local03 wc
23148                 | ' 	    break;
23148     01 20 06 31 |  if_ae	add	local02, #1
2314c     11 1F 82 31 |  if_ae	sub	local01, local03
23150     D4 FF 9F 3D |  if_ae	jmp	#LR__3820
23154     A8 00 00 FF 
23158     80 1F 16 FD | 	qdiv	local01, ##86400
2315c     10 23 02 F6 | 	mov	local03, local02
23160     03 00 00 FF 
23164     6C 23 86 F1 | 	sub	local03, ##1900
23168     14 14 06 F1 | 	add	arg02, #20
2316c     0A 23 62 FC | 	wrlong	local03, arg02
23170     08 14 06 F1 | 	add	arg02, #8
23174     10 13 02 F6 | 	mov	arg01, local02
23178     18 20 62 FD | 	getqx	local02
2317c     0A 21 62 FC | 	wrlong	local02, arg02
23180     1C 14 86 F1 | 	sub	arg02, #28
23184     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
23188     00 FA 0D F2 | 	cmp	result1, #0 wz
2318c     1D 22 06 56 |  if_ne	mov	local03, #29
23190     1C 22 06 A6 |  if_e	mov	local03, #28
23194     02 00 00 FF 
23198     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2319c     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
231a0     02 00 00 FF 
231a4     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
231a8                 | ' 
231a8                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
231a8                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
231a8     00 12 06 F6 | 	mov	arg01, #0
231ac     97 2A 48 FB | 	callpa	#(@LR__3822-@LR__3821)>>2,fcache_load_ptr_
231b0                 | LR__3821
231b0     09 23 02 F6 | 	mov	local03, arg01
231b4     02 22 66 F0 | 	shl	local03, #2
231b8     02 00 00 FF 
231bc     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
231c0     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
231c4     11 23 02 FB | 	rdlong	local03, local03
231c8     11 21 52 F2 | 	cmps	local02, local03 wc
231cc     02 00 00 FF 
231d0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
231d4     2C 00 90 CD |  if_b	jmp	#LR__3823
231d8     09 23 02 F6 | 	mov	local03, arg01
231dc     02 22 66 F0 | 	shl	local03, #2
231e0     02 00 00 FF 
231e4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
231e8     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
231ec     11 23 02 FB | 	rdlong	local03, local03
231f0     11 21 82 F1 | 	sub	local02, local03
231f4     01 12 06 F1 | 	add	arg01, #1
231f8     02 00 00 FF 
231fc     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
23200     AC FF 9F FD | 	jmp	#LR__3821
23204                 | LR__3822
23204                 | LR__3823
23204     A8 00 00 FF 
23208     80 1F 16 FD | 	qdiv	local01, ##86400
2320c     10 14 06 F1 | 	add	arg02, #16
23210     0A 13 62 FC | 	wrlong	arg01, arg02
23214     01 20 06 F1 | 	add	local02, #1
23218     04 14 86 F1 | 	sub	arg02, #4
2321c     0A 21 62 FC | 	wrlong	local02, arg02
23220     19 1E 62 FD | 	getqy	local01
23224     07 00 00 FF 
23228     10 1E 16 FD | 	qdiv	local01, ##3600
2322c     18 22 62 FD | 	getqx	local03
23230     07 00 00 FF 
23234     10 1E 16 FD | 	qdiv	local01, ##3600
23238     04 14 86 F1 | 	sub	arg02, #4
2323c     0A 23 62 FC | 	wrlong	local03, arg02
23240     19 1E 62 FD | 	getqy	local01
23244     3C 1E 16 FD | 	qdiv	local01, #60
23248     18 22 62 FD | 	getqx	local03
2324c     3C 1E 16 FD | 	qdiv	local01, #60
23250     04 14 86 F1 | 	sub	arg02, #4
23254     0A 23 62 FC | 	wrlong	local03, arg02
23258     04 14 86 F1 | 	sub	arg02, #4
2325c                 | '         stm->tm_isdst = 0;
2325c                 | ' 
2325c                 | ' ;
2325c                 | '         return stm;
2325c     0A FB 01 F6 | 	mov	result1, arg02
23260     19 22 62 FD | 	getqy	local03
23264     0A 23 62 FC | 	wrlong	local03, arg02
23268     20 14 06 F1 | 	add	arg02, #32
2326c     0A 01 68 FC | 	wrlong	#0, arg02
23270     A7 F0 03 F6 | 	mov	ptra, fp
23274     B2 00 A0 FD | 	call	#popregs_
23278                 | _fatfs_cc__gmtime_r_ret
23278     2D 00 64 FD | 	ret
2327c                 | 
2327c                 | _fatfs_cc__tzset
2327c     26 01 00 FF 
23280     BD 13 06 F6 | 	mov	arg01, ##@LR__4135
23284     34 00 B0 FD | 	call	#_fatfs_cc_getenv
23288     FD 12 02 F6 | 	mov	arg01, result1
2328c     02 00 00 FF 
23290     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
23294     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
23298     02 00 00 FF 
2329c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
232a0     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
232a4     02 00 00 FF 
232a8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
232ac     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
232b0     02 00 00 FF 
232b4     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
232b8                 | _fatfs_cc__tzset_ret
232b8     2D 00 64 FD | 	ret
232bc                 | 
232bc                 | _fatfs_cc_getenv
232bc     06 4A 05 F6 | 	mov	COUNT_, #6
232c0     A8 00 A0 FD | 	call	#pushregs_
232c4     09 1F 02 F6 | 	mov	local01, arg01
232c8     09 21 02 F6 | 	mov	local02, arg01
232cc     97 06 48 FB | 	callpa	#(@LR__3831-@LR__3830)>>2,fcache_load_ptr_
232d0                 | LR__3830
232d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
232d4     01 20 06 51 |  if_ne	add	local02, #1
232d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3830
232dc                 | LR__3831
232dc     09 21 82 F1 | 	sub	local02, arg01
232e0     10 FB 01 F6 | 	mov	result1, local02
232e4     02 00 00 FF 
232e8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
232ec     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
232f0     02 00 00 FF 
232f4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
232f8                 | '             return 0;
232f8     00 FA 05 A6 |  if_e	mov	result1, #0
232fc     5C 00 90 AD |  if_e	jmp	#LR__3834
23300                 | ' 
23300                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
23300     02 00 00 FF 
23304     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
23308     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2330c     02 00 00 FF 
23310     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
23314                 | LR__3832
23314     11 25 0A FB | 	rdlong	local04, local03 wz
23318     3C 00 90 AD |  if_e	jmp	#LR__3833
2331c     12 13 02 F6 | 	mov	arg01, local04
23320     0F 15 02 F6 | 	mov	arg02, local01
23324     10 17 02 F6 | 	mov	arg03, local02
23328     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2332c     00 FA 0D F2 | 	cmp	result1, #0 wz
23330     10 27 02 A6 |  if_e	mov	local05, local02
23334     12 27 02 A1 |  if_e	add	local05, local04
23338     13 29 C2 AA |  if_e	rdbyte	local06, local05
2333c     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
23340                 | ' 			return name+len+1;
23340     10 25 02 A1 |  if_e	add	local04, local02
23344     01 24 06 A1 |  if_e	add	local04, #1
23348     12 FB 01 A6 |  if_e	mov	result1, local04
2334c     0C 00 90 AD |  if_e	jmp	#LR__3834
23350     04 22 06 F1 | 	add	local03, #4
23354     BC FF 9F FD | 	jmp	#LR__3832
23358                 | LR__3833
23358                 | ' 	}
23358                 | ' 	return 0;
23358     00 FA 05 F6 | 	mov	result1, #0
2335c                 | LR__3834
2335c     A7 F0 03 F6 | 	mov	ptra, fp
23360     B2 00 A0 FD | 	call	#popregs_
23364                 | _fatfs_cc_getenv_ret
23364     2D 00 64 FD | 	ret
23368                 | 
23368                 | _fatfs_cc__get_fattime
23368     00 4A 05 F6 | 	mov	COUNT_, #0
2336c     A8 00 A0 FD | 	call	#pushregs_
23370     34 F0 07 F1 | 	add	ptra, #52
23374     00 12 06 F6 | 	mov	arg01, #0
23378     38 FB BF FD | 	call	#_fatfs_cc_time
2337c     04 4E 05 F1 | 	add	fp, #4
23380     A7 FA 61 FC | 	wrlong	result1, fp
23384     A7 12 02 F6 | 	mov	arg01, fp
23388     0C 4E 05 F1 | 	add	fp, #12
2338c     A7 14 02 F6 | 	mov	arg02, fp
23390     10 4E 85 F1 | 	sub	fp, #16
23394     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
23398     24 4E 05 F1 | 	add	fp, #36
2339c     A7 14 02 FB | 	rdlong	arg02, fp
233a0     50 14 86 F1 | 	sub	arg02, #80
233a4     09 14 66 F0 | 	shl	arg02, #9
233a8     04 4E 85 F1 | 	sub	fp, #4
233ac     A7 FA 01 FB | 	rdlong	result1, fp
233b0     01 FA 05 F1 | 	add	result1, #1
233b4     05 FA 65 F0 | 	shl	result1, #5
233b8     FD 14 42 F5 | 	or	arg02, result1
233bc     04 4E 85 F1 | 	sub	fp, #4
233c0     A7 FA 01 FB | 	rdlong	result1, fp
233c4     FD 14 42 F5 | 	or	arg02, result1
233c8     14 4E 85 F1 | 	sub	fp, #20
233cc     A7 14 62 FC | 	wrlong	arg02, fp
233d0     10 4E 05 F1 | 	add	fp, #16
233d4     A7 14 02 FB | 	rdlong	arg02, fp
233d8     0B 14 66 F0 | 	shl	arg02, #11
233dc     04 4E 85 F1 | 	sub	fp, #4
233e0     A7 FA 01 FB | 	rdlong	result1, fp
233e4     05 FA 65 F0 | 	shl	result1, #5
233e8     FD 14 42 F5 | 	or	arg02, result1
233ec     04 4E 85 F1 | 	sub	fp, #4
233f0     A7 FA 01 FB | 	rdlong	result1, fp
233f4     FD 14 42 F5 | 	or	arg02, result1
233f8     04 4E 85 F1 | 	sub	fp, #4
233fc     A7 14 62 FC | 	wrlong	arg02, fp
23400                 | ' 
23400                 | '     now = time(0);
23400                 | '     _gmtime_r (&now, &date);
23400                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
23400                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
23400                 | '     return (ffdate << 16) | fftime;
23400     04 4E 85 F1 | 	sub	fp, #4
23404     A7 FA 01 FB | 	rdlong	result1, fp
23408     10 FA 65 F0 | 	shl	result1, #16
2340c     08 4E 85 F1 | 	sub	fp, #8
23410     0A FB 41 F5 | 	or	result1, arg02
23414     A7 F0 03 F6 | 	mov	ptra, fp
23418     B2 00 A0 FD | 	call	#popregs_
2341c                 | _fatfs_cc__get_fattime_ret
2341c     2D 00 64 FD | 	ret
23420                 | 
23420                 | _fatfs_cc_unixtime_0781
23420     00 4A 05 F6 | 	mov	COUNT_, #0
23424     A8 00 A0 FD | 	call	#pushregs_
23428     34 F0 07 F1 | 	add	ptra, #52
2342c     04 4E 05 F1 | 	add	fp, #4
23430     A7 12 62 FC | 	wrlong	arg01, fp
23434     04 4E 05 F1 | 	add	fp, #4
23438     A7 14 62 FC | 	wrlong	arg02, fp
2343c     04 4E 85 F1 | 	sub	fp, #4
23440     A7 14 02 FB | 	rdlong	arg02, fp
23444     09 14 46 F0 | 	shr	arg02, #9
23448     7F 14 06 F5 | 	and	arg02, #127
2344c     50 FA 05 F6 | 	mov	result1, #80
23450     0A FB 01 F1 | 	add	result1, arg02
23454     20 4E 05 F1 | 	add	fp, #32
23458     A7 FA 61 FC | 	wrlong	result1, fp
2345c     20 4E 85 F1 | 	sub	fp, #32
23460     A7 FA 01 FB | 	rdlong	result1, fp
23464     05 FA 45 F0 | 	shr	result1, #5
23468     FD FA 41 F8 | 	getnib	result1, result1, #0
2346c     01 FA 85 F1 | 	sub	result1, #1
23470     1C 4E 05 F1 | 	add	fp, #28
23474     A7 FA 61 FC | 	wrlong	result1, fp
23478     1C 4E 85 F1 | 	sub	fp, #28
2347c     A7 FA 01 FB | 	rdlong	result1, fp
23480     1F FA 05 F5 | 	and	result1, #31
23484     18 4E 05 F1 | 	add	fp, #24
23488     A7 FA 61 FC | 	wrlong	result1, fp
2348c     14 4E 85 F1 | 	sub	fp, #20
23490     A7 FA 01 FB | 	rdlong	result1, fp
23494     0B FA 45 F0 | 	shr	result1, #11
23498     1F FA 05 F5 | 	and	result1, #31
2349c     10 4E 05 F1 | 	add	fp, #16
234a0     A7 FA 61 FC | 	wrlong	result1, fp
234a4     10 4E 85 F1 | 	sub	fp, #16
234a8     A7 FA 01 FB | 	rdlong	result1, fp
234ac     05 FA 45 F0 | 	shr	result1, #5
234b0     3F FA 05 F5 | 	and	result1, #63
234b4     0C 4E 05 F1 | 	add	fp, #12
234b8     A7 FA 61 FC | 	wrlong	result1, fp
234bc     0C 4E 85 F1 | 	sub	fp, #12
234c0     A7 14 02 FB | 	rdlong	arg02, fp
234c4     1F 14 06 F5 | 	and	arg02, #31
234c8     01 14 66 F0 | 	shl	arg02, #1
234cc     08 4E 05 F1 | 	add	fp, #8
234d0     A7 14 62 FC | 	wrlong	arg02, fp
234d4     A7 12 02 F6 | 	mov	arg01, fp
234d8     10 4E 85 F1 | 	sub	fp, #16
234dc     4C FA BF FD | 	call	#_fatfs_cc_mktime
234e0     0C 4E 05 F1 | 	add	fp, #12
234e4     A7 FA 61 FC | 	wrlong	result1, fp
234e8                 | ' 
234e8                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
234e8                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
234e8                 | '     date.tm_mday = (dosdate & 0x1f);
234e8                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
234e8                 | '     date.tm_min = (dostime >> 5) & 0x3f;
234e8                 | '     date.tm_sec = (dostime & 0x1f) << 1;
234e8                 | ' 
234e8                 | '     t = mktime(&date);
234e8                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
234e8                 | '     return t;
234e8     0C 4E 85 F1 | 	sub	fp, #12
234ec     A7 F0 03 F6 | 	mov	ptra, fp
234f0     B2 00 A0 FD | 	call	#popregs_
234f4                 | _fatfs_cc_unixtime_0781_ret
234f4     2D 00 64 FD | 	ret
234f8                 | 
234f8                 | _fatfs_cc__set_dos_error_0783
234f8     09 01 02 F6 | 	mov	_var01, arg01
234fc                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
234fc                 | '     switch (derr) {
234fc     14 00 26 F3 | 	fle	_var01, #20
23500     30 00 62 FD | 	jmprel	_var01
23504                 | LR__3840
23504     50 00 90 FD | 	jmp	#LR__3841
23508     84 00 90 FD | 	jmp	#LR__3855
2350c     80 00 90 FD | 	jmp	#LR__3856
23510     7C 00 90 FD | 	jmp	#LR__3857
23514     48 00 90 FD | 	jmp	#LR__3842
23518     44 00 90 FD | 	jmp	#LR__3843
2351c     40 00 90 FD | 	jmp	#LR__3844
23520     44 00 90 FD | 	jmp	#LR__3845
23524     48 00 90 FD | 	jmp	#LR__3847
23528     54 00 90 FD | 	jmp	#LR__3850
2352c     38 00 90 FD | 	jmp	#LR__3846
23530     4C 00 90 FD | 	jmp	#LR__3851
23534     48 00 90 FD | 	jmp	#LR__3852
23538     44 00 90 FD | 	jmp	#LR__3853
2353c     50 00 90 FD | 	jmp	#LR__3858
23540     4C 00 90 FD | 	jmp	#LR__3858
23544     48 00 90 FD | 	jmp	#LR__3858
23548     2C 00 90 FD | 	jmp	#LR__3848
2354c     38 00 90 FD | 	jmp	#LR__3854
23550     2C 00 90 FD | 	jmp	#LR__3849
23554     38 00 90 FD | 	jmp	#LR__3858
23558                 | LR__3841
23558     00 02 06 F6 | 	mov	_var02, #0
2355c                 | '         r = 0;
2355c                 | '         break;
2355c     34 00 90 FD | 	jmp	#LR__3859
23560                 | LR__3842
23560                 | LR__3843
23560                 | LR__3844
23560     04 02 06 F6 | 	mov	_var02, #4
23564                 | '         r =  4 ;
23564                 | '         break;
23564     2C 00 90 FD | 	jmp	#LR__3859
23568                 | LR__3845
23568                 | LR__3846
23568     06 02 06 F6 | 	mov	_var02, #6
2356c                 | '         r =  6 ;
2356c                 | '         break;
2356c     24 00 90 FD | 	jmp	#LR__3859
23570                 | LR__3847
23570     09 02 06 F6 | 	mov	_var02, #9
23574                 | '         r =  9 ;
23574                 | '         break;
23574     1C 00 90 FD | 	jmp	#LR__3859
23578                 | LR__3848
23578     07 02 06 F6 | 	mov	_var02, #7
2357c                 | '         r =  7 ;
2357c                 | '         break;
2357c     14 00 90 FD | 	jmp	#LR__3859
23580                 | LR__3849
23580                 | LR__3850
23580                 | LR__3851
23580                 | LR__3852
23580                 | LR__3853
23580     0A 02 06 F6 | 	mov	_var02, #10
23584                 | '         r =  10 ;
23584                 | '         break;
23584     0C 00 90 FD | 	jmp	#LR__3859
23588                 | LR__3854
23588     0B 02 06 F6 | 	mov	_var02, #11
2358c                 | '         r =  11 ;
2358c                 | '         break;
2358c     04 00 90 FD | 	jmp	#LR__3859
23590                 | LR__3855
23590                 | LR__3856
23590                 | LR__3857
23590                 | LR__3858
23590     0C 02 06 F6 | 	mov	_var02, #12
23594                 | '         r =  12 ;
23594                 | '         break;
23594                 | LR__3859
23594                 | '     }
23594                 | '     return _seterror(r);
23594     00 02 4E F2 | 	cmps	_var02, #0 wz
23598     20 E8 05 F1 | 	add	ptr___system__dat__, #32
2359c     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
235a0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
235a4     01 FA 65 56 |  if_ne	neg	result1, #1
235a8     00 FA 05 A6 |  if_e	mov	result1, #0
235ac                 | _fatfs_cc__set_dos_error_0783_ret
235ac     2D 00 64 FD | 	ret
235b0                 | 
235b0                 | _fatfs_cc_v_creat
235b0     04 4A 05 F6 | 	mov	COUNT_, #4
235b4     A8 00 A0 FD | 	call	#pushregs_
235b8     09 1F 02 F6 | 	mov	local01, arg01
235bc     0A 21 02 F6 | 	mov	local02, arg02
235c0     03 00 00 FF 
235c4     3C 12 06 F6 | 	mov	arg01, ##1596
235c8                 | '     return _gc_alloc(size);
235c8     10 14 06 F6 | 	mov	arg02, #16
235cc     2C 60 BF FD | 	call	#__system___gc_doalloc
235d0     FD 22 0A F6 | 	mov	local03, result1 wz
235d4                 | '       return _seterror( 7 );
235d4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
235d8     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
235dc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
235e0     01 FA 65 A6 |  if_e	neg	result1, #1
235e4     58 00 90 AD |  if_e	jmp	#LR__3861
235e8     11 13 02 F6 | 	mov	arg01, local03
235ec     00 14 06 F6 | 	mov	arg02, #0
235f0     03 00 00 FF 
235f4     3C 16 06 F6 | 	mov	arg03, ##1596
235f8     98 00 A0 FD | 	call	#\builtin_bytefill_
235fc     02 00 00 FF 
23600     14 22 06 F1 | 	add	local03, ##1044
23604     11 13 02 F6 | 	mov	arg01, local03
23608     02 00 00 FF 
2360c     14 22 86 F1 | 	sub	local03, ##1044
23610     10 15 02 F6 | 	mov	arg02, local02
23614     07 16 06 F6 | 	mov	arg03, #7
23618     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2361c     FD 24 0A F6 | 	mov	local04, result1 wz
23620     14 00 90 AD |  if_e	jmp	#LR__3860
23624     11 13 02 F6 | 	mov	arg01, local03
23628                 | '     return _gc_free(ptr);
23628     DC 60 BF FD | 	call	#__system___gc_free
2362c                 | '     free(f);
2362c                 | '     return _set_dos_error(r);
2362c     12 13 02 F6 | 	mov	arg01, local04
23630     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23634     08 00 90 FD | 	jmp	#LR__3861
23638                 | LR__3860
23638     0F 23 62 FC | 	wrlong	local03, local01
2363c                 | '   }
2363c                 | '   fil->vfsdata = f;
2363c                 | '   return 0;
2363c     00 FA 05 F6 | 	mov	result1, #0
23640                 | LR__3861
23640     A7 F0 03 F6 | 	mov	ptra, fp
23644     B2 00 A0 FD | 	call	#popregs_
23648                 | _fatfs_cc_v_creat_ret
23648     2D 00 64 FD | 	ret
2364c                 | 
2364c                 | _fatfs_cc_v_close
2364c     02 4A 05 F6 | 	mov	COUNT_, #2
23650     A8 00 A0 FD | 	call	#pushregs_
23654     09 1F 02 FB | 	rdlong	local01, arg01
23658     02 00 00 FF 
2365c     14 1E 06 F1 | 	add	local01, ##1044
23660     0F 13 02 F6 | 	mov	arg01, local01
23664     02 00 00 FF 
23668     14 1E 86 F1 | 	sub	local01, ##1044
2366c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
23670     FD 20 02 F6 | 	mov	local02, result1
23674     0F 13 02 F6 | 	mov	arg01, local01
23678                 | '     return _gc_free(ptr);
23678     8C 60 BF FD | 	call	#__system___gc_free
2367c                 | '     FAT_FIL *f = fil->vfsdata;
2367c                 | '     r=f_close(&f->fil);
2367c                 | '     free(f);
2367c                 | '     return _set_dos_error(r);
2367c     10 13 02 F6 | 	mov	arg01, local02
23680     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23684     A7 F0 03 F6 | 	mov	ptra, fp
23688     B2 00 A0 FD | 	call	#popregs_
2368c                 | _fatfs_cc_v_close_ret
2368c     2D 00 64 FD | 	ret
23690                 | 
23690                 | _fatfs_cc_v_opendir
23690     04 4A 05 F6 | 	mov	COUNT_, #4
23694     A8 00 A0 FD | 	call	#pushregs_
23698     09 1F 02 F6 | 	mov	local01, arg01
2369c     0A 21 02 F6 | 	mov	local02, arg02
236a0     30 12 06 F6 | 	mov	arg01, #48
236a4                 | '     return _gc_alloc(size);
236a4     10 14 06 F6 | 	mov	arg02, #16
236a8     50 5F BF FD | 	call	#__system___gc_doalloc
236ac     FD 22 0A F6 | 	mov	local03, result1 wz
236b0                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
236b0                 | '       return _seterror( 7 );
236b0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
236b4     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
236b8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
236bc     01 FA 65 A6 |  if_e	neg	result1, #1
236c0     34 00 90 AD |  if_e	jmp	#LR__3871
236c4     10 15 02 F6 | 	mov	arg02, local02
236c8     11 13 02 F6 | 	mov	arg01, local03
236cc     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
236d0     FD 24 0A F6 | 	mov	local04, result1 wz
236d4     14 00 90 AD |  if_e	jmp	#LR__3870
236d8     11 13 02 F6 | 	mov	arg01, local03
236dc                 | '     return _gc_free(ptr);
236dc     28 60 BF FD | 	call	#__system___gc_free
236e0                 | '         free(f);
236e0                 | '         return _set_dos_error(r);
236e0     12 13 02 F6 | 	mov	arg01, local04
236e4     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0783
236e8     0C 00 90 FD | 	jmp	#LR__3871
236ec                 | LR__3870
236ec     04 1E 06 F1 | 	add	local01, #4
236f0     0F 23 62 FC | 	wrlong	local03, local01
236f4                 | '     }
236f4                 | '     dir->vfsdata = f;
236f4                 | '     return 0;
236f4     00 FA 05 F6 | 	mov	result1, #0
236f8                 | LR__3871
236f8     A7 F0 03 F6 | 	mov	ptra, fp
236fc     B2 00 A0 FD | 	call	#popregs_
23700                 | _fatfs_cc_v_opendir_ret
23700     2D 00 64 FD | 	ret
23704                 | 
23704                 | _fatfs_cc_v_closedir
23704     02 4A 05 F6 | 	mov	COUNT_, #2
23708     A8 00 A0 FD | 	call	#pushregs_
2370c     04 12 06 F1 | 	add	arg01, #4
23710     09 1F 02 FB | 	rdlong	local01, arg01
23714     0F 13 02 F6 | 	mov	arg01, local01
23718     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2371c     FD 20 02 F6 | 	mov	local02, result1
23720     0F 13 02 F6 | 	mov	arg01, local01
23724                 | '     return _gc_free(ptr);
23724     E0 5F BF FD | 	call	#__system___gc_free
23728     00 20 0E F2 | 	cmp	local02, #0 wz
2372c     10 13 02 56 |  if_ne	mov	arg01, local02
23730     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0783
23734                 | '     return r;
23734     10 FB 01 F6 | 	mov	result1, local02
23738     A7 F0 03 F6 | 	mov	ptra, fp
2373c     B2 00 A0 FD | 	call	#popregs_
23740                 | _fatfs_cc_v_closedir_ret
23740     2D 00 64 FD | 	ret
23744                 | 
23744                 | _fatfs_cc_v_readdir
23744     01 4A 05 F6 | 	mov	COUNT_, #1
23748     A8 00 A0 FD | 	call	#pushregs_
2374c     2C F1 07 F1 | 	add	ptra, #300
23750     04 4E 05 F1 | 	add	fp, #4
23754     A7 12 62 FC | 	wrlong	arg01, fp
23758     04 4E 05 F1 | 	add	fp, #4
2375c     A7 14 62 FC | 	wrlong	arg02, fp
23760     04 4E 85 F1 | 	sub	fp, #4
23764     A7 16 02 FB | 	rdlong	arg03, fp
23768     04 16 06 F1 | 	add	arg03, #4
2376c     0B 13 02 FB | 	rdlong	arg01, arg03
23770     08 4E 05 F1 | 	add	fp, #8
23774     A7 14 02 F6 | 	mov	arg02, fp
23778     0C 4E 85 F1 | 	sub	fp, #12
2377c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
23780     28 4F 05 F1 | 	add	fp, #296
23784     A7 FA 61 FC | 	wrlong	result1, fp
23788     28 4F 85 F1 | 	sub	fp, #296
2378c     00 FA 0D F2 | 	cmp	result1, #0 wz
23790     14 00 90 AD |  if_e	jmp	#LR__3880
23794                 | '         return _set_dos_error(r);
23794     28 4F 05 F1 | 	add	fp, #296
23798     A7 12 02 FB | 	rdlong	arg01, fp
2379c     28 4F 85 F1 | 	sub	fp, #296
237a0     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0783
237a4     C4 00 90 FD | 	jmp	#LR__3883
237a8                 | LR__3880
237a8     28 4E 05 F1 | 	add	fp, #40
237ac     A7 16 CA FA | 	rdbyte	arg03, fp wz
237b0     28 4E 85 F1 | 	sub	fp, #40
237b4                 | '         return -1;
237b4     01 FA 65 A6 |  if_e	neg	result1, #1
237b8     B0 00 90 AD |  if_e	jmp	#LR__3883
237bc     08 4E 05 F1 | 	add	fp, #8
237c0     A7 12 02 FB | 	rdlong	arg01, fp
237c4     20 4E 05 F1 | 	add	fp, #32
237c8     A7 14 02 F6 | 	mov	arg02, fp
237cc     28 4E 85 F1 | 	sub	fp, #40
237d0     3F 16 06 F6 | 	mov	arg03, #63
237d4     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
237d8     08 4E 05 F1 | 	add	fp, #8
237dc     A7 16 02 FB | 	rdlong	arg03, fp
237e0     3F 16 06 F1 | 	add	arg03, #63
237e4     0B 01 48 FC | 	wrbyte	#0, arg03
237e8     0C 4E 05 F1 | 	add	fp, #12
237ec     A7 16 C2 FA | 	rdbyte	arg03, fp
237f0     14 4E 85 F1 | 	sub	fp, #20
237f4     10 16 CE F7 | 	test	arg03, #16 wz
237f8     18 00 90 AD |  if_e	jmp	#LR__3881
237fc     08 4E 05 F1 | 	add	fp, #8
23800     A7 16 02 FB | 	rdlong	arg03, fp
23804     08 4E 85 F1 | 	sub	fp, #8
23808     50 16 06 F1 | 	add	arg03, #80
2380c     0B 03 48 FC | 	wrbyte	#1, arg03
23810     14 00 90 FD | 	jmp	#LR__3882
23814                 | LR__3881
23814     08 4E 05 F1 | 	add	fp, #8
23818     A7 16 02 FB | 	rdlong	arg03, fp
2381c     08 4E 85 F1 | 	sub	fp, #8
23820     50 16 06 F1 | 	add	arg03, #80
23824     0B 01 48 FC | 	wrbyte	#0, arg03
23828                 | LR__3882
23828     08 4E 05 F1 | 	add	fp, #8
2382c     A7 16 02 FB | 	rdlong	arg03, fp
23830     04 4E 05 F1 | 	add	fp, #4
23834     A7 14 02 FB | 	rdlong	arg02, fp
23838     48 16 06 F1 | 	add	arg03, #72
2383c     0B 15 62 FC | 	wrlong	arg02, arg03
23840     04 4E 85 F1 | 	sub	fp, #4
23844     A7 1E 02 FB | 	rdlong	local01, fp
23848     08 4E 05 F1 | 	add	fp, #8
2384c     A7 12 E2 FA | 	rdword	arg01, fp
23850     02 4E 05 F1 | 	add	fp, #2
23854     A7 14 E2 FA | 	rdword	arg02, fp
23858     12 4E 85 F1 | 	sub	fp, #18
2385c     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0781
23860     4C 1E 06 F1 | 	add	local01, #76
23864     0F FB 61 FC | 	wrlong	result1, local01
23868                 | '         ent->d_type =  (0) ;
23868                 | '     }
23868                 | '     ent->d_size = finfo.fsize;
23868                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
23868                 | '     return 0;
23868     00 FA 05 F6 | 	mov	result1, #0
2386c                 | LR__3883
2386c     A7 F0 03 F6 | 	mov	ptra, fp
23870     B2 00 A0 FD | 	call	#popregs_
23874                 | _fatfs_cc_v_readdir_ret
23874     2D 00 64 FD | 	ret
23878                 | 
23878                 | _fatfs_cc_v_stat
23878     03 4A 05 F6 | 	mov	COUNT_, #3
2387c     A8 00 A0 FD | 	call	#pushregs_
23880     30 F1 07 F1 | 	add	ptra, #304
23884     04 4E 05 F1 | 	add	fp, #4
23888     A7 12 62 FC | 	wrlong	arg01, fp
2388c     04 4E 05 F1 | 	add	fp, #4
23890     A7 14 62 FC | 	wrlong	arg02, fp
23894     08 4E 85 F1 | 	sub	fp, #8
23898     0A 13 02 F6 | 	mov	arg01, arg02
2389c     00 14 06 F6 | 	mov	arg02, #0
238a0     30 16 06 F6 | 	mov	arg03, #48
238a4     98 00 A0 FD | 	call	#\builtin_bytefill_
238a8     04 4E 05 F1 | 	add	fp, #4
238ac     A7 FA 01 FB | 	rdlong	result1, fp
238b0     04 4E 85 F1 | 	sub	fp, #4
238b4     FD FA C9 FA | 	rdbyte	result1, result1 wz
238b8     2C 00 90 AD |  if_e	jmp	#LR__3890
238bc     04 4E 05 F1 | 	add	fp, #4
238c0     A7 FA 01 FB | 	rdlong	result1, fp
238c4     04 4E 85 F1 | 	sub	fp, #4
238c8     FD FA C1 FA | 	rdbyte	result1, result1
238cc     2E FA 0D F2 | 	cmp	result1, #46 wz
238d0     04 4E 05 A1 |  if_e	add	fp, #4
238d4     A7 1E 02 AB |  if_e	rdlong	local01, fp
238d8     04 4E 85 A1 |  if_e	sub	fp, #4
238dc     01 1E 06 A1 |  if_e	add	local01, #1
238e0     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
238e4     18 00 90 5D |  if_ne	jmp	#LR__3891
238e8                 | LR__3890
238e8     18 4E 05 F1 | 	add	fp, #24
238ec     A7 20 48 FC | 	wrbyte	#16, fp
238f0     0C 4E 85 F1 | 	sub	fp, #12
238f4     A7 00 68 FC | 	wrlong	#0, fp
238f8     0C 4E 85 F1 | 	sub	fp, #12
238fc     24 00 90 FD | 	jmp	#LR__3892
23900                 | LR__3891
23900     04 4E 05 F1 | 	add	fp, #4
23904     A7 12 02 FB | 	rdlong	arg01, fp
23908     0C 4E 05 F1 | 	add	fp, #12
2390c     A7 14 02 F6 | 	mov	arg02, fp
23910     10 4E 85 F1 | 	sub	fp, #16
23914     AC EB BF FD | 	call	#_fatfs_cc_f_stat
23918     0C 4E 05 F1 | 	add	fp, #12
2391c     A7 FA 61 FC | 	wrlong	result1, fp
23920     0C 4E 85 F1 | 	sub	fp, #12
23924                 | LR__3892
23924     0C 4E 05 F1 | 	add	fp, #12
23928     A7 20 0A FB | 	rdlong	local02, fp wz
2392c     0C 4E 85 F1 | 	sub	fp, #12
23930     14 00 90 AD |  if_e	jmp	#LR__3893
23934                 | '         return _set_dos_error(r);
23934     0C 4E 05 F1 | 	add	fp, #12
23938     A7 12 02 FB | 	rdlong	arg01, fp
2393c     0C 4E 85 F1 | 	sub	fp, #12
23940     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23944     14 01 90 FD | 	jmp	#LR__3894
23948                 | LR__3893
23948     2C 4F 05 F1 | 	add	fp, #300
2394c     A7 48 6A FC | 	wrlong	#292, fp
23950     14 4F 85 F1 | 	sub	fp, #276
23954     A7 22 C2 FA | 	rdbyte	local03, fp
23958     18 4E 85 F1 | 	sub	fp, #24
2395c     01 22 CE F7 | 	test	local03, #1 wz
23960     2C 4F 05 51 |  if_ne	add	fp, #300
23964     A7 22 02 5B |  if_ne	rdlong	local03, fp
23968     92 22 46 55 |  if_ne	or	local03, #146
2396c     A7 22 62 5C |  if_ne	wrlong	local03, fp
23970     2C 4F 85 51 |  if_ne	sub	fp, #300
23974     18 4E 05 F1 | 	add	fp, #24
23978     A7 22 C2 FA | 	rdbyte	local03, fp
2397c     18 4E 85 F1 | 	sub	fp, #24
23980     10 22 CE F7 | 	test	local03, #16 wz
23984     2C 4F 05 51 |  if_ne	add	fp, #300
23988     A7 22 02 5B |  if_ne	rdlong	local03, fp
2398c     08 00 00 5F 
23990     49 22 46 55 |  if_ne	or	local03, ##4169
23994     A7 22 62 5C |  if_ne	wrlong	local03, fp
23998     2C 4F 85 51 |  if_ne	sub	fp, #300
2399c     08 4E 05 F1 | 	add	fp, #8
239a0     A7 22 02 FB | 	rdlong	local03, fp
239a4     24 4F 05 F1 | 	add	fp, #292
239a8     A7 20 02 FB | 	rdlong	local02, fp
239ac     08 22 06 F1 | 	add	local03, #8
239b0     11 21 62 FC | 	wrlong	local02, local03
239b4     24 4F 85 F1 | 	sub	fp, #292
239b8     A7 22 02 FB | 	rdlong	local03, fp
239bc     0C 22 06 F1 | 	add	local03, #12
239c0     11 03 68 FC | 	wrlong	#1, local03
239c4     A7 22 02 FB | 	rdlong	local03, fp
239c8     08 4E 05 F1 | 	add	fp, #8
239cc     A7 20 02 FB | 	rdlong	local02, fp
239d0     18 22 06 F1 | 	add	local03, #24
239d4     11 21 62 FC | 	wrlong	local02, local03
239d8     08 4E 85 F1 | 	sub	fp, #8
239dc     A7 22 02 FB | 	rdlong	local03, fp
239e0     1C 22 06 F1 | 	add	local03, #28
239e4     01 00 80 FF 
239e8     11 01 68 FC | 	wrlong	##512, local03
239ec     A7 20 02 FB | 	rdlong	local02, fp
239f0     10 23 02 F6 | 	mov	local03, local02
239f4     18 20 06 F1 | 	add	local02, #24
239f8     10 21 02 FB | 	rdlong	local02, local02
239fc     FF 21 06 F1 | 	add	local02, #511
23a00     10 21 52 F6 | 	abs	local02, local02 wc
23a04     09 20 46 F0 | 	shr	local02, #9
23a08     10 21 82 F6 | 	negc	local02, local02
23a0c     20 22 06 F1 | 	add	local03, #32
23a10     11 21 62 FC | 	wrlong	local02, local03
23a14     A7 20 02 FB | 	rdlong	local02, fp
23a18     10 23 02 F6 | 	mov	local03, local02
23a1c     10 1F 02 F6 | 	mov	local01, local02
23a20     0C 4E 05 F1 | 	add	fp, #12
23a24     A7 12 E2 FA | 	rdword	arg01, fp
23a28     02 4E 05 F1 | 	add	fp, #2
23a2c     A7 14 E2 FA | 	rdword	arg02, fp
23a30     16 4E 85 F1 | 	sub	fp, #22
23a34     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0781
23a38     2C 1E 06 F1 | 	add	local01, #44
23a3c     0F FB 61 FC | 	wrlong	result1, local01
23a40     28 20 06 F1 | 	add	local02, #40
23a44     10 FB 61 FC | 	wrlong	result1, local02
23a48     24 22 06 F1 | 	add	local03, #36
23a4c     11 FB 61 FC | 	wrlong	result1, local03
23a50                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
23a50                 | '     }
23a50                 | '     buf->st_mode = mode;
23a50                 | '     buf->st_nlink = 1;
23a50                 | '     buf->st_size = finfo.fsize;
23a50                 | '     buf->st_blksize = 512;
23a50                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
23a50                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
23a50                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23a50                 | '     return r;
23a50     0C 4E 05 F1 | 	add	fp, #12
23a54     A7 FA 01 FB | 	rdlong	result1, fp
23a58     0C 4E 85 F1 | 	sub	fp, #12
23a5c                 | LR__3894
23a5c     A7 F0 03 F6 | 	mov	ptra, fp
23a60     B2 00 A0 FD | 	call	#popregs_
23a64                 | _fatfs_cc_v_stat_ret
23a64     2D 00 64 FD | 	ret
23a68                 | 
23a68                 | _fatfs_cc_v_read
23a68     00 4A 05 F6 | 	mov	COUNT_, #0
23a6c     A8 00 A0 FD | 	call	#pushregs_
23a70     1C F0 07 F1 | 	add	ptra, #28
23a74     04 4E 05 F1 | 	add	fp, #4
23a78     A7 12 62 FC | 	wrlong	arg01, fp
23a7c     04 4E 05 F1 | 	add	fp, #4
23a80     A7 14 62 FC | 	wrlong	arg02, fp
23a84     04 4E 05 F1 | 	add	fp, #4
23a88     A7 16 62 FC | 	wrlong	arg03, fp
23a8c     08 4E 85 F1 | 	sub	fp, #8
23a90     A7 12 02 FB | 	rdlong	arg01, fp
23a94     09 13 0A FB | 	rdlong	arg01, arg01 wz
23a98     0C 4E 05 F1 | 	add	fp, #12
23a9c     A7 12 62 FC | 	wrlong	arg01, fp
23aa0     10 4E 85 F1 | 	sub	fp, #16
23aa4                 | '         return _seterror( 5 );
23aa4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23aa8     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23aac     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23ab0     01 FA 65 A6 |  if_e	neg	result1, #1
23ab4     B8 00 90 AD |  if_e	jmp	#LR__3902
23ab8     10 4E 05 F1 | 	add	fp, #16
23abc     A7 12 02 FB | 	rdlong	arg01, fp
23ac0     02 00 00 FF 
23ac4     14 12 06 F1 | 	add	arg01, ##1044
23ac8     08 4E 85 F1 | 	sub	fp, #8
23acc     A7 14 02 FB | 	rdlong	arg02, fp
23ad0     04 4E 05 F1 | 	add	fp, #4
23ad4     A7 16 02 FB | 	rdlong	arg03, fp
23ad8     0C 4E 05 F1 | 	add	fp, #12
23adc     A7 18 02 F6 | 	mov	arg04, fp
23ae0     18 4E 85 F1 | 	sub	fp, #24
23ae4     C4 CE BF FD | 	call	#_fatfs_cc_f_read
23ae8     14 4E 05 F1 | 	add	fp, #20
23aec     A7 FA 61 FC | 	wrlong	result1, fp
23af0     14 4E 85 F1 | 	sub	fp, #20
23af4     00 FA 0D F2 | 	cmp	result1, #0 wz
23af8     34 00 90 AD |  if_e	jmp	#LR__3900
23afc     04 4E 05 F1 | 	add	fp, #4
23b00     A7 18 02 FB | 	rdlong	arg04, fp
23b04     0C 17 02 F6 | 	mov	arg03, arg04
23b08     08 18 06 F1 | 	add	arg04, #8
23b0c     0C 19 02 FB | 	rdlong	arg04, arg04
23b10     20 18 46 F5 | 	or	arg04, #32
23b14     08 16 06 F1 | 	add	arg03, #8
23b18     0B 19 62 FC | 	wrlong	arg04, arg03
23b1c                 | '         fil->state |=  (0x20) ;
23b1c                 | '         return _set_dos_error(r);
23b1c     10 4E 05 F1 | 	add	fp, #16
23b20     A7 12 02 FB | 	rdlong	arg01, fp
23b24     14 4E 85 F1 | 	sub	fp, #20
23b28     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23b2c     40 00 90 FD | 	jmp	#LR__3902
23b30                 | LR__3900
23b30     18 4E 05 F1 | 	add	fp, #24
23b34     A7 FA 09 FB | 	rdlong	result1, fp wz
23b38     18 4E 85 F1 | 	sub	fp, #24
23b3c     24 00 90 5D |  if_ne	jmp	#LR__3901
23b40     04 4E 05 F1 | 	add	fp, #4
23b44     A7 FA 01 FB | 	rdlong	result1, fp
23b48     FD 18 02 F6 | 	mov	arg04, result1
23b4c     04 4E 85 F1 | 	sub	fp, #4
23b50     08 FA 05 F1 | 	add	result1, #8
23b54     FD FA 01 FB | 	rdlong	result1, result1
23b58     10 FA 45 F5 | 	or	result1, #16
23b5c     08 18 06 F1 | 	add	arg04, #8
23b60     0C FB 61 FC | 	wrlong	result1, arg04
23b64                 | LR__3901
23b64                 | '         fil->state |=  (0x10) ;
23b64                 | '     }
23b64                 | '     return x;
23b64     18 4E 05 F1 | 	add	fp, #24
23b68     A7 FA 01 FB | 	rdlong	result1, fp
23b6c     18 4E 85 F1 | 	sub	fp, #24
23b70                 | LR__3902
23b70     A7 F0 03 F6 | 	mov	ptra, fp
23b74     B2 00 A0 FD | 	call	#popregs_
23b78                 | _fatfs_cc_v_read_ret
23b78     2D 00 64 FD | 	ret
23b7c                 | 
23b7c                 | _fatfs_cc_v_write
23b7c     00 4A 05 F6 | 	mov	COUNT_, #0
23b80     A8 00 A0 FD | 	call	#pushregs_
23b84     1C F0 07 F1 | 	add	ptra, #28
23b88     04 4E 05 F1 | 	add	fp, #4
23b8c     A7 12 62 FC | 	wrlong	arg01, fp
23b90     04 4E 05 F1 | 	add	fp, #4
23b94     A7 14 62 FC | 	wrlong	arg02, fp
23b98     04 4E 05 F1 | 	add	fp, #4
23b9c     A7 16 62 FC | 	wrlong	arg03, fp
23ba0     08 4E 85 F1 | 	sub	fp, #8
23ba4     A7 12 02 FB | 	rdlong	arg01, fp
23ba8     09 13 0A FB | 	rdlong	arg01, arg01 wz
23bac     0C 4E 05 F1 | 	add	fp, #12
23bb0     A7 12 62 FC | 	wrlong	arg01, fp
23bb4     10 4E 85 F1 | 	sub	fp, #16
23bb8                 | '         return _seterror( 5 );
23bb8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23bbc     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23bc0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23bc4     01 FA 65 A6 |  if_e	neg	result1, #1
23bc8     84 00 90 AD |  if_e	jmp	#LR__3911
23bcc     10 4E 05 F1 | 	add	fp, #16
23bd0     A7 12 02 FB | 	rdlong	arg01, fp
23bd4     02 00 00 FF 
23bd8     14 12 06 F1 | 	add	arg01, ##1044
23bdc     08 4E 85 F1 | 	sub	fp, #8
23be0     A7 14 02 FB | 	rdlong	arg02, fp
23be4     04 4E 05 F1 | 	add	fp, #4
23be8     A7 16 02 FB | 	rdlong	arg03, fp
23bec     0C 4E 05 F1 | 	add	fp, #12
23bf0     A7 18 02 F6 | 	mov	arg04, fp
23bf4     18 4E 85 F1 | 	sub	fp, #24
23bf8     4C D4 BF FD | 	call	#_fatfs_cc_f_write
23bfc     14 4E 05 F1 | 	add	fp, #20
23c00     A7 FA 61 FC | 	wrlong	result1, fp
23c04     14 4E 85 F1 | 	sub	fp, #20
23c08     00 FA 0D F2 | 	cmp	result1, #0 wz
23c0c     34 00 90 AD |  if_e	jmp	#LR__3910
23c10     04 4E 05 F1 | 	add	fp, #4
23c14     A7 18 02 FB | 	rdlong	arg04, fp
23c18     0C 17 02 F6 | 	mov	arg03, arg04
23c1c     08 18 06 F1 | 	add	arg04, #8
23c20     0C 19 02 FB | 	rdlong	arg04, arg04
23c24     20 18 46 F5 | 	or	arg04, #32
23c28     08 16 06 F1 | 	add	arg03, #8
23c2c     0B 19 62 FC | 	wrlong	arg04, arg03
23c30                 | '         fil->state |=  (0x20) ;
23c30                 | '         return _set_dos_error(r);
23c30     10 4E 05 F1 | 	add	fp, #16
23c34     A7 12 02 FB | 	rdlong	arg01, fp
23c38     14 4E 85 F1 | 	sub	fp, #20
23c3c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23c40     0C 00 90 FD | 	jmp	#LR__3911
23c44                 | LR__3910
23c44                 | '     }
23c44                 | '     return x;
23c44     18 4E 05 F1 | 	add	fp, #24
23c48     A7 FA 01 FB | 	rdlong	result1, fp
23c4c     18 4E 85 F1 | 	sub	fp, #24
23c50                 | LR__3911
23c50     A7 F0 03 F6 | 	mov	ptra, fp
23c54     B2 00 A0 FD | 	call	#popregs_
23c58                 | _fatfs_cc_v_write_ret
23c58     2D 00 64 FD | 	ret
23c5c                 | 
23c5c                 | _fatfs_cc_v_lseek
23c5c     04 4A 05 F6 | 	mov	COUNT_, #4
23c60     A8 00 A0 FD | 	call	#pushregs_
23c64     0A 1F 02 F6 | 	mov	local01, arg02
23c68     0B 21 02 F6 | 	mov	local02, arg03
23c6c     09 23 02 FB | 	rdlong	local03, arg01
23c70     02 00 00 FF 
23c74     14 22 0E F1 | 	add	local03, ##1044 wz
23c78                 | '         return _seterror( 5 );
23c78     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23c7c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23c80     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23c84     01 FA 65 A6 |  if_e	neg	result1, #1
23c88     4C 00 90 AD |  if_e	jmp	#LR__3922
23c8c     00 20 0E F2 | 	cmp	local02, #0 wz
23c90     24 00 90 AD |  if_e	jmp	#LR__3920
23c94     01 20 0E F2 | 	cmp	local02, #1 wz
23c98     14 22 06 A1 |  if_e	add	local03, #20
23c9c     11 25 02 AB |  if_e	rdlong	local04, local03
23ca0     14 22 86 A1 |  if_e	sub	local03, #20
23ca4     12 1F 02 A1 |  if_e	add	local01, local04
23ca8     0C 22 06 51 |  if_ne	add	local03, #12
23cac     11 25 02 5B |  if_ne	rdlong	local04, local03
23cb0     0C 22 86 51 |  if_ne	sub	local03, #12
23cb4     12 1F 02 51 |  if_ne	add	local01, local04
23cb8                 | LR__3920
23cb8     0F 15 02 F6 | 	mov	arg02, local01
23cbc     11 13 02 F6 | 	mov	arg01, local03
23cc0     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
23cc4     FD 12 0A F6 | 	mov	arg01, result1 wz
23cc8     08 00 90 AD |  if_e	jmp	#LR__3921
23ccc                 | '         return _set_dos_error(result);
23ccc     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23cd0     04 00 90 FD | 	jmp	#LR__3922
23cd4                 | LR__3921
23cd4                 | '     }
23cd4                 | '     return offset;
23cd4     0F FB 01 F6 | 	mov	result1, local01
23cd8                 | LR__3922
23cd8     A7 F0 03 F6 | 	mov	ptra, fp
23cdc     B2 00 A0 FD | 	call	#popregs_
23ce0                 | _fatfs_cc_v_lseek_ret
23ce0     2D 00 64 FD | 	ret
23ce4                 | 
23ce4                 | _fatfs_cc_v_ioctl
23ce4                 | ' {
23ce4                 | '     return _seterror( 10 );
23ce4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
23ce8     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
23cec     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
23cf0     01 FA 65 F6 | 	neg	result1, #1
23cf4                 | _fatfs_cc_v_ioctl_ret
23cf4     2D 00 64 FD | 	ret
23cf8                 | 
23cf8                 | _fatfs_cc_v_mkdir
23cf8     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
23cfc     FD 12 02 F6 | 	mov	arg01, result1
23d00                 | ' 
23d00                 | '     r = f_mkdir(name);
23d00                 | '     return _set_dos_error(r);
23d00     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23d04                 | _fatfs_cc_v_mkdir_ret
23d04     2D 00 64 FD | 	ret
23d08                 | 
23d08                 | _fatfs_cc_v_remove
23d08     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
23d0c     FD 12 02 F6 | 	mov	arg01, result1
23d10                 | ' 
23d10                 | '     r = f_unlink(name);
23d10                 | '     return _set_dos_error(r);
23d10     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23d14                 | _fatfs_cc_v_remove_ret
23d14     2D 00 64 FD | 	ret
23d18                 | 
23d18                 | _fatfs_cc_v_rmdir
23d18     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
23d1c     FD 12 02 F6 | 	mov	arg01, result1
23d20                 | ' 
23d20                 | '     r = f_unlink(name);
23d20                 | '     return _set_dos_error(r);
23d20     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23d24                 | _fatfs_cc_v_rmdir_ret
23d24     2D 00 64 FD | 	ret
23d28                 | 
23d28                 | _fatfs_cc_v_rename
23d28     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
23d2c     FD 12 02 F6 | 	mov	arg01, result1
23d30                 | '     return _set_dos_error(r);
23d30     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23d34                 | _fatfs_cc_v_rename_ret
23d34     2D 00 64 FD | 	ret
23d38                 | 
23d38                 | _fatfs_cc_v_open
23d38     07 4A 05 F6 | 	mov	COUNT_, #7
23d3c     A8 00 A0 FD | 	call	#pushregs_
23d40     09 1F 02 F6 | 	mov	local01, arg01
23d44     0A 21 02 F6 | 	mov	local02, arg02
23d48     0B 23 02 F6 | 	mov	local03, arg03
23d4c     03 00 00 FF 
23d50     3C 12 06 F6 | 	mov	arg01, ##1596
23d54                 | '     return _gc_alloc(size);
23d54     10 14 06 F6 | 	mov	arg02, #16
23d58     A0 58 BF FD | 	call	#__system___gc_doalloc
23d5c     FD 24 0A F6 | 	mov	local04, result1 wz
23d60                 | '       return _seterror( 7 );
23d60     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23d64     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23d68     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23d6c     01 FA 65 A6 |  if_e	neg	result1, #1
23d70     98 00 90 AD |  if_e	jmp	#LR__3936
23d74     12 13 02 F6 | 	mov	arg01, local04
23d78     00 14 06 F6 | 	mov	arg02, #0
23d7c     03 00 00 FF 
23d80     3C 16 06 F6 | 	mov	arg03, ##1596
23d84     98 00 A0 FD | 	call	#\builtin_bytefill_
23d88                 | '   switch (flags & 3) {
23d88     11 27 02 F6 | 	mov	local05, local03
23d8c     03 26 0E F5 | 	and	local05, #3 wz
23d90     0C 00 90 AD |  if_e	jmp	#LR__3930
23d94     01 26 0E F2 | 	cmp	local05, #1 wz
23d98     0C 00 90 AD |  if_e	jmp	#LR__3931
23d9c     10 00 90 FD | 	jmp	#LR__3932
23da0                 | LR__3930
23da0     01 28 06 F6 | 	mov	local06, #1
23da4                 | '       fs_flags =  0x01 ;
23da4                 | '       break;
23da4     0C 00 90 FD | 	jmp	#LR__3933
23da8                 | LR__3931
23da8     02 28 06 F6 | 	mov	local06, #2
23dac                 | '       fs_flags =  0x02 ;
23dac                 | '       break;
23dac     04 00 90 FD | 	jmp	#LR__3933
23db0                 | LR__3932
23db0     03 28 06 F6 | 	mov	local06, #3
23db4                 | '       fs_flags =  0x01  |  0x02 ;
23db4                 | '       break;
23db4                 | LR__3933
23db4     08 22 CE F7 | 	test	local03, #8 wz
23db8     18 28 46 55 |  if_ne	or	local06, #24
23dbc     08 00 90 5D |  if_ne	jmp	#LR__3934
23dc0     20 22 CE F7 | 	test	local03, #32 wz
23dc4     30 28 46 55 |  if_ne	or	local06, #48
23dc8                 | LR__3934
23dc8     02 00 00 FF 
23dcc     14 24 06 F1 | 	add	local04, ##1044
23dd0     12 13 02 F6 | 	mov	arg01, local04
23dd4     02 00 00 FF 
23dd8     14 24 86 F1 | 	sub	local04, ##1044
23ddc     10 15 02 F6 | 	mov	arg02, local02
23de0     14 17 02 F6 | 	mov	arg03, local06
23de4     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
23de8     FD 2A 0A F6 | 	mov	local07, result1 wz
23dec     14 00 90 AD |  if_e	jmp	#LR__3935
23df0     12 13 02 F6 | 	mov	arg01, local04
23df4                 | '     return _gc_free(ptr);
23df4     10 59 BF FD | 	call	#__system___gc_free
23df8                 | '     free(f);
23df8                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23df8                 | '     return _set_dos_error(r);
23df8     15 13 02 F6 | 	mov	arg01, local07
23dfc     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23e00     08 00 90 FD | 	jmp	#LR__3936
23e04                 | LR__3935
23e04     0F 25 62 FC | 	wrlong	local04, local01
23e08                 | '   }
23e08                 | '   fil->vfsdata = f;
23e08                 | '   return 0;
23e08     00 FA 05 F6 | 	mov	result1, #0
23e0c                 | LR__3936
23e0c     A7 F0 03 F6 | 	mov	ptra, fp
23e10     B2 00 A0 FD | 	call	#popregs_
23e14                 | _fatfs_cc_v_open_ret
23e14     2D 00 64 FD | 	ret
23e18                 | 
23e18                 | _fatfs_cc_v_flush
23e18     09 13 02 FB | 	rdlong	arg01, arg01
23e1c     02 00 00 FF 
23e20     14 12 0E F1 | 	add	arg01, ##1044 wz
23e24                 | '         return _seterror( 5 );
23e24     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23e28     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23e2c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23e30     01 FA 65 A6 |  if_e	neg	result1, #1
23e34     0C 00 90 AD |  if_e	jmp	#LR__3940
23e38     00 DA BF FD | 	call	#_fatfs_cc_f_sync
23e3c     FD 12 02 F6 | 	mov	arg01, result1
23e40                 | '     }
23e40                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23e40                 | '     result = f_sync(f);
23e40                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23e40                 | '     return _set_dos_error(result);
23e40     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0783
23e44                 | LR__3940
23e44                 | _fatfs_cc_v_flush_ret
23e44     2D 00 64 FD | 	ret
23e48                 | 
23e48                 | _fatfs_cc_v_init
23e48                 | ' {
23e48                 | '     return 0;
23e48     00 FA 05 F6 | 	mov	result1, #0
23e4c                 | _fatfs_cc_v_init_ret
23e4c     2D 00 64 FD | 	ret
23e50                 | 
23e50                 | _fatfs_cc_v_deinit
23e50     26 01 00 FF 
23e54     C0 15 06 F6 | 	mov	arg02, ##@LR__4136
23e58     00 12 06 F6 | 	mov	arg01, #0
23e5c     00 16 06 F6 | 	mov	arg03, #0
23e60     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
23e64     01 00 00 FF 
23e68     08 E4 05 F1 | 	add	objptr, ##520
23e6c     F2 12 02 FB | 	rdlong	arg01, objptr
23e70     04 E4 05 F1 | 	add	objptr, #4
23e74     F2 14 02 FB | 	rdlong	arg02, objptr
23e78     01 00 00 FF 
23e7c     0C E4 85 F1 | 	sub	objptr, ##524
23e80     A0 43 BF FD | 	call	#__system___freepins
23e84                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23e84                 | '     _freepins(f_pinmask);
23e84                 | '     return 0;
23e84     00 FA 05 F6 | 	mov	result1, #0
23e88                 | _fatfs_cc_v_deinit_ret
23e88     2D 00 64 FD | 	ret
23e8c                 | 
23e8c                 | _fatfs_cc_get_vfs
23e8c     01 4A 05 F6 | 	mov	COUNT_, #1
23e90     A8 00 A0 FD | 	call	#pushregs_
23e94     09 1F 02 F6 | 	mov	local01, arg01
23e98     50 12 06 F6 | 	mov	arg01, #80
23e9c     2C 57 BF FD | 	call	#__system___gc_alloc_managed
23ea0     FD 12 02 F6 | 	mov	arg01, result1
23ea4     F2 FA 01 F6 | 	mov	result1, objptr
23ea8     00 C8 02 FF 
23eac     00 FA 45 F5 | 	or	result1, ##93323264
23eb0     09 FB 61 FC | 	wrlong	result1, arg01
23eb4     F2 FA 01 F6 | 	mov	result1, objptr
23eb8     00 D0 02 FF 
23ebc     00 FA 45 F5 | 	or	result1, ##94371840
23ec0     04 12 06 F1 | 	add	arg01, #4
23ec4     09 FB 61 FC | 	wrlong	result1, arg01
23ec8     F2 FA 01 F6 | 	mov	result1, objptr
23ecc     00 D8 02 FF 
23ed0     00 FA 45 F5 | 	or	result1, ##95420416
23ed4     04 12 06 F1 | 	add	arg01, #4
23ed8     09 FB 61 FC | 	wrlong	result1, arg01
23edc     F2 FA 01 F6 | 	mov	result1, objptr
23ee0     00 E0 02 FF 
23ee4     00 FA 45 F5 | 	or	result1, ##96468992
23ee8     04 12 06 F1 | 	add	arg01, #4
23eec     09 FB 61 FC | 	wrlong	result1, arg01
23ef0     F2 FA 01 F6 | 	mov	result1, objptr
23ef4     00 E8 02 FF 
23ef8     00 FA 45 F5 | 	or	result1, ##97517568
23efc     04 12 06 F1 | 	add	arg01, #4
23f00     09 FB 61 FC | 	wrlong	result1, arg01
23f04     04 12 06 F1 | 	add	arg01, #4
23f08     09 01 68 FC | 	wrlong	#0, arg01
23f0c     04 12 06 F1 | 	add	arg01, #4
23f10     09 1F 62 FC | 	wrlong	local01, arg01
23f14     04 12 06 F1 | 	add	arg01, #4
23f18     09 01 68 FC | 	wrlong	#0, arg01
23f1c     F2 FA 01 F6 | 	mov	result1, objptr
23f20     00 F0 02 FF 
23f24     00 FA 45 F5 | 	or	result1, ##98566144
23f28     04 12 06 F1 | 	add	arg01, #4
23f2c     09 FB 61 FC | 	wrlong	result1, arg01
23f30     F2 FA 01 F6 | 	mov	result1, objptr
23f34     00 F8 02 FF 
23f38     00 FA 45 F5 | 	or	result1, ##99614720
23f3c     04 12 06 F1 | 	add	arg01, #4
23f40     09 FB 61 FC | 	wrlong	result1, arg01
23f44     F2 FA 01 F6 | 	mov	result1, objptr
23f48     39 FA 25 F4 | 	bith	result1, #57
23f4c     04 12 06 F1 | 	add	arg01, #4
23f50     09 FB 61 FC | 	wrlong	result1, arg01
23f54     F2 FA 01 F6 | 	mov	result1, objptr
23f58     00 08 03 FF 
23f5c     00 FA 45 F5 | 	or	result1, ##101711872
23f60     04 12 06 F1 | 	add	arg01, #4
23f64     09 FB 61 FC | 	wrlong	result1, arg01
23f68     F2 FA 01 F6 | 	mov	result1, objptr
23f6c     00 10 03 FF 
23f70     00 FA 45 F5 | 	or	result1, ##102760448
23f74     04 12 06 F1 | 	add	arg01, #4
23f78     09 FB 61 FC | 	wrlong	result1, arg01
23f7c     F2 FA 01 F6 | 	mov	result1, objptr
23f80     00 18 03 FF 
23f84     00 FA 45 F5 | 	or	result1, ##103809024
23f88     04 12 06 F1 | 	add	arg01, #4
23f8c     09 FB 61 FC | 	wrlong	result1, arg01
23f90     F2 FA 01 F6 | 	mov	result1, objptr
23f94     00 20 03 FF 
23f98     00 FA 45 F5 | 	or	result1, ##104857600
23f9c     04 12 06 F1 | 	add	arg01, #4
23fa0     09 FB 61 FC | 	wrlong	result1, arg01
23fa4     F2 FA 01 F6 | 	mov	result1, objptr
23fa8     00 28 03 FF 
23fac     00 FA 45 F5 | 	or	result1, ##105906176
23fb0     04 12 06 F1 | 	add	arg01, #4
23fb4     09 FB 61 FC | 	wrlong	result1, arg01
23fb8     F2 FA 01 F6 | 	mov	result1, objptr
23fbc     00 30 03 FF 
23fc0     00 FA 45 F5 | 	or	result1, ##106954752
23fc4     04 12 06 F1 | 	add	arg01, #4
23fc8     09 FB 61 FC | 	wrlong	result1, arg01
23fcc     F2 FA 01 F6 | 	mov	result1, objptr
23fd0     00 38 03 FF 
23fd4     00 FA 45 F5 | 	or	result1, ##108003328
23fd8     04 12 06 F1 | 	add	arg01, #4
23fdc     09 FB 61 FC | 	wrlong	result1, arg01
23fe0     F2 FA 01 F6 | 	mov	result1, objptr
23fe4     00 40 03 FF 
23fe8     00 FA 45 F5 | 	or	result1, ##109051904
23fec     04 12 06 F1 | 	add	arg01, #4
23ff0     09 FB 61 FC | 	wrlong	result1, arg01
23ff4     F2 FA 01 F6 | 	mov	result1, objptr
23ff8     00 48 03 FF 
23ffc     00 FA 45 F5 | 	or	result1, ##110100480
24000     04 12 06 F1 | 	add	arg01, #4
24004     09 FB 61 FC | 	wrlong	result1, arg01
24008     4C 12 86 F1 | 	sub	arg01, #76
2400c                 | ' 
2400c                 | '     v->close = &v_close;
2400c                 | '     v->read = &v_read;
2400c                 | '     v->write = &v_write;
2400c                 | '     v->lseek = &v_lseek;
2400c                 | '     v->ioctl = &v_ioctl;
2400c                 | '     v->flush = 0;
2400c                 | '     v->vfs_data = ptr;
2400c                 | '     v->reserved = 0;
2400c                 | ' 
2400c                 | '     v->open = &v_open;
2400c                 | '     v->creat = &v_creat;
2400c                 | '     v->opendir = &v_opendir;
2400c                 | '     v->closedir = &v_closedir;
2400c                 | '     v->readdir = &v_readdir;
2400c                 | '     v->stat = &v_stat;
2400c                 | ' 
2400c                 | '     v->mkdir = &v_mkdir;
2400c                 | '     v->rmdir = &v_rmdir;
2400c                 | ' 
2400c                 | '     v->remove = &v_remove;
2400c                 | '     v->rename = &v_rename;
2400c                 | ' 
2400c                 | '     v->init = &v_init;
2400c                 | '     v->deinit = &v_deinit;
2400c                 | ' 
2400c                 | '     return v;
2400c     09 FB 01 F6 | 	mov	result1, arg01
24010     A7 F0 03 F6 | 	mov	ptra, fp
24014     B2 00 A0 FD | 	call	#popregs_
24018                 | _fatfs_cc_get_vfs_ret
24018     2D 00 64 FD | 	ret
2401c                 | 
2401c                 | _fatfs_cc_xmit_mmc_0930
2401c     01 00 00 FF 
24020     10 E4 05 F1 | 	add	objptr, ##528
24024     F2 00 02 FB | 	rdlong	_var01, objptr
24028     08 E4 05 F1 | 	add	objptr, #8
2402c     F2 02 02 FB | 	rdlong	_var02, objptr
24030     01 00 00 FF 
24034     18 E4 85 F1 | 	sub	objptr, ##536
24038     40 02 62 FD | 	dirl	_var02
2403c     28 02 64 FD | 	setq	#1
24040     09 05 02 FB | 	rdlong	_var03, arg01
24044     69 04 62 FD | 	rev	_var03
24048     1B 04 FE F9 | 	movbyts	_var03, #27
2404c     01 05 22 FC | 	wypin	_var03, _var02
24050     0A 05 02 F6 | 	mov	_var03, arg02
24054     02 14 4E F0 | 	shr	arg02, #2 wz
24058     03 04 66 F0 | 	shl	_var03, #3
2405c     00 05 22 FC | 	wypin	_var03, _var01
24060     41 02 62 FD | 	dirh	_var02
24064     08 12 06 F1 | 	add	arg01, #8
24068     69 06 62 FD | 	rev	_var04
2406c     1B 06 FE F9 | 	movbyts	_var04, #27
24070                 | LR__3950
24070     01 07 22 5C |  if_ne	wypin	_var04, _var02
24074     09 07 02 5B |  if_ne	rdlong	_var04, arg01
24078     04 12 06 51 |  if_ne	add	arg01, #4
2407c     69 06 62 5D |  if_ne	rev	_var04
24080     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
24084                 | LR__3951
24084     40 02 72 5D |  if_ne	testp	_var02 wc
24088     F8 FF 9F 1D |  if_a	jmp	#LR__3951
2408c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3950
24090                 | LR__3952
24090     40 00 72 FD | 	testp	_var01 wc
24094     F8 FF 9F 3D |  if_ae	jmp	#LR__3952
24098     40 02 62 FD | 	dirl	_var02
2409c     FF FF FF FF 
240a0     01 FF 2B FC | 	wypin	##-1, _var02
240a4     41 02 62 FD | 	dirh	_var02
240a8                 | _fatfs_cc_xmit_mmc_0930_ret
240a8     2D 00 64 FD | 	ret
240ac                 | 
240ac                 | _fatfs_cc_rcvr_mmc_0937
240ac     01 00 00 FF 
240b0     10 E4 05 F1 | 	add	objptr, ##528
240b4     F2 00 02 FB | 	rdlong	_var01, objptr
240b8     0C E4 05 F1 | 	add	objptr, #12
240bc     F2 02 02 FB | 	rdlong	_var02, objptr
240c0     01 00 00 FF 
240c4     1C E4 85 F1 | 	sub	objptr, ##540
240c8     01 03 08 FC | 	akpin	_var02
240cc     0A 05 0A F6 | 	mov	_var03, arg02 wz
240d0     02 04 4E F0 | 	shr	_var03, #2 wz
240d4     30 00 90 AD |  if_e	jmp	#LR__3962
240d8     02 07 02 F6 | 	mov	_var04, _var03
240dc     05 06 66 F0 | 	shl	_var04, #5
240e0     00 07 22 FC | 	wypin	_var04, _var01
240e4     01 7F 18 FC | 	wxpin	#63, _var02
240e8                 | LR__3960
240e8                 | LR__3961
240e8     40 02 72 FD | 	testp	_var02 wc
240ec     F8 FF 9F 3D |  if_ae	jmp	#LR__3961
240f0     01 07 8A FA | 	rdpin	_var04, _var02
240f4     69 06 62 FD | 	rev	_var04
240f8     1B 06 FE F9 | 	movbyts	_var04, #27
240fc     09 07 62 FC | 	wrlong	_var04, arg01
24100     04 12 06 F1 | 	add	arg01, #4
24104     F8 05 6E FB | 	djnz	_var03, #LR__3960
24108                 | LR__3962
24108     03 14 0E F5 | 	and	arg02, #3 wz
2410c     24 00 90 AD |  if_e	jmp	#LR__3965
24110     01 4F 18 FC | 	wxpin	#39, _var02
24114                 | LR__3963
24114     00 11 28 FC | 	wypin	#8, _var01
24118                 | LR__3964
24118     40 02 72 FD | 	testp	_var02 wc
2411c     F8 FF 9F 3D |  if_ae	jmp	#LR__3964
24120     01 07 8A FA | 	rdpin	_var04, _var02
24124     69 06 62 FD | 	rev	_var04
24128     09 07 42 FC | 	wrbyte	_var04, arg01
2412c     01 12 06 F1 | 	add	arg01, #1
24130     F8 15 6E FB | 	djnz	arg02, #LR__3963
24134                 | LR__3965
24134                 | _fatfs_cc_rcvr_mmc_0937_ret
24134     2D 00 64 FD | 	ret
24138                 | 
24138                 | _fatfs_cc_wait_ready_0941
24138     01 4A 05 F6 | 	mov	COUNT_, #1
2413c     A8 00 A0 FD | 	call	#pushregs_
24140     10 F0 07 F1 | 	add	ptra, #16
24144     1A FA 61 FD | 	getct	result1
24148     08 4E 05 F1 | 	add	fp, #8
2414c     A7 FA 61 FC | 	wrlong	result1, fp
24150     14 1E 06 FB | 	rdlong	local01, #20
24154     01 1E 46 F0 | 	shr	local01, #1
24158     04 4E 05 F1 | 	add	fp, #4
2415c     A7 1E 62 FC | 	wrlong	local01, fp
24160     0C 4E 85 F1 | 	sub	fp, #12
24164                 | ' {
24164                 | ' 	BYTE d;
24164                 | ' 	UINT tmr, tmout;
24164                 | ' 
24164                 | ' 	tmr = _cnt();
24164                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
24164                 | ' 	for(;;) {
24164                 | LR__3970
24164     04 4E 05 F1 | 	add	fp, #4
24168     A7 12 02 F6 | 	mov	arg01, fp
2416c     04 4E 85 F1 | 	sub	fp, #4
24170     01 14 06 F6 | 	mov	arg02, #1
24174     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0937
24178     04 4E 05 F1 | 	add	fp, #4
2417c     A7 1E C2 FA | 	rdbyte	local01, fp
24180     04 4E 85 F1 | 	sub	fp, #4
24184     FF 1E 0E F2 | 	cmp	local01, #255 wz
24188     01 FA 05 A6 |  if_e	mov	result1, #1
2418c     28 00 90 AD |  if_e	jmp	#LR__3971
24190     1A FA 61 FD | 	getct	result1
24194     08 4E 05 F1 | 	add	fp, #8
24198     A7 1E 02 FB | 	rdlong	local01, fp
2419c     0F FB 81 F1 | 	sub	result1, local01
241a0     04 4E 05 F1 | 	add	fp, #4
241a4     A7 1E 02 FB | 	rdlong	local01, fp
241a8     0C 4E 85 F1 | 	sub	fp, #12
241ac     0F FB 11 F2 | 	cmp	result1, local01 wc
241b0     00 FA 05 36 |  if_ae	mov	result1, #0
241b4     AC FF 9F CD |  if_b	jmp	#LR__3970
241b8                 | LR__3971
241b8     A7 F0 03 F6 | 	mov	ptra, fp
241bc     B2 00 A0 FD | 	call	#popregs_
241c0                 | _fatfs_cc_wait_ready_0941_ret
241c0     2D 00 64 FD | 	ret
241c4                 | 
241c4                 | _fatfs_cc_deselect_0947
241c4     00 4A 05 F6 | 	mov	COUNT_, #0
241c8     A8 00 A0 FD | 	call	#pushregs_
241cc     14 F0 07 F1 | 	add	ptra, #20
241d0     01 00 00 FF 
241d4     14 E4 05 F1 | 	add	objptr, ##532
241d8     F2 14 02 FB | 	rdlong	arg02, objptr
241dc     04 4E 05 F1 | 	add	fp, #4
241e0     A7 14 62 FC | 	wrlong	arg02, fp
241e4     04 E4 85 F1 | 	sub	objptr, #4
241e8     F2 14 02 FB | 	rdlong	arg02, objptr
241ec     04 4E 05 F1 | 	add	fp, #4
241f0     A7 14 62 FC | 	wrlong	arg02, fp
241f4     08 E4 05 F1 | 	add	objptr, #8
241f8     F2 14 02 FB | 	rdlong	arg02, objptr
241fc     04 4E 05 F1 | 	add	fp, #4
24200     A7 14 62 FC | 	wrlong	arg02, fp
24204     04 E4 05 F1 | 	add	objptr, #4
24208     F2 14 02 FB | 	rdlong	arg02, objptr
2420c     01 00 00 FF 
24210     1C E4 85 F1 | 	sub	objptr, ##540
24214     04 4E 05 F1 | 	add	fp, #4
24218     A7 14 62 FC | 	wrlong	arg02, fp
2421c     0C 4E 85 F1 | 	sub	fp, #12
24220     A7 12 02 FB | 	rdlong	arg01, fp
24224     04 4E 85 F1 | 	sub	fp, #4
24228     59 12 62 FD | 	drvh	arg01
2422c     1F 20 64 FD | 	waitx	#16
24230     A7 12 02 F6 | 	mov	arg01, fp
24234     01 14 06 F6 | 	mov	arg02, #1
24238     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0937
2423c     A7 F0 03 F6 | 	mov	ptra, fp
24240     B2 00 A0 FD | 	call	#popregs_
24244                 | _fatfs_cc_deselect_0947_ret
24244     2D 00 64 FD | 	ret
24248                 | 
24248                 | _fatfs_cc_select_0951
24248     00 4A 05 F6 | 	mov	COUNT_, #0
2424c     A8 00 A0 FD | 	call	#pushregs_
24250     10 F0 07 F1 | 	add	ptra, #16
24254     01 00 00 FF 
24258     14 E4 05 F1 | 	add	objptr, ##532
2425c     F2 14 02 FB | 	rdlong	arg02, objptr
24260     08 4E 05 F1 | 	add	fp, #8
24264     A7 14 62 FC | 	wrlong	arg02, fp
24268     08 E4 05 F1 | 	add	objptr, #8
2426c     F2 12 02 FB | 	rdlong	arg01, objptr
24270     01 00 00 FF 
24274     1C E4 85 F1 | 	sub	objptr, ##540
24278     04 4E 05 F1 | 	add	fp, #4
2427c     A7 12 62 FC | 	wrlong	arg01, fp
24280     50 12 62 FD | 	fltl	arg01
24284     04 4E 85 F1 | 	sub	fp, #4
24288     A7 12 02 FB | 	rdlong	arg01, fp
2428c     58 12 62 FD | 	drvl	arg01
24290     1F 20 64 FD | 	waitx	#16
24294     04 4E 05 F1 | 	add	fp, #4
24298     A7 12 02 FB | 	rdlong	arg01, fp
2429c     41 12 62 FD | 	dirh	arg01
242a0     08 4E 85 F1 | 	sub	fp, #8
242a4     A7 12 02 F6 | 	mov	arg01, fp
242a8     04 4E 85 F1 | 	sub	fp, #4
242ac     01 14 06 F6 | 	mov	arg02, #1
242b0     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0937
242b4     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0941
242b8     00 FA 0D F2 | 	cmp	result1, #0 wz
242bc     01 FA 05 56 |  if_ne	mov	result1, #1
242c0     08 00 90 5D |  if_ne	jmp	#LR__3980
242c4     FC FE BF FD | 	call	#_fatfs_cc_deselect_0947
242c8                 | ' 
242c8                 | ' 	deselect();
242c8                 | ' 	return 0;
242c8     00 FA 05 F6 | 	mov	result1, #0
242cc                 | LR__3980
242cc     A7 F0 03 F6 | 	mov	ptra, fp
242d0     B2 00 A0 FD | 	call	#popregs_
242d4                 | _fatfs_cc_select_0951_ret
242d4     2D 00 64 FD | 	ret
242d8                 | 
242d8                 | _fatfs_cc_rcvr_datablock_0955
242d8     01 4A 05 F6 | 	mov	COUNT_, #1
242dc     A8 00 A0 FD | 	call	#pushregs_
242e0     18 F0 07 F1 | 	add	ptra, #24
242e4     04 4E 05 F1 | 	add	fp, #4
242e8     A7 12 62 FC | 	wrlong	arg01, fp
242ec     04 4E 05 F1 | 	add	fp, #4
242f0     A7 14 62 FC | 	wrlong	arg02, fp
242f4     1A FA 61 FD | 	getct	result1
242f8     08 4E 05 F1 | 	add	fp, #8
242fc     A7 FA 61 FC | 	wrlong	result1, fp
24300     14 1E 06 FB | 	rdlong	local01, #20
24304     03 1E 46 F0 | 	shr	local01, #3
24308     04 4E 05 F1 | 	add	fp, #4
2430c     A7 1E 62 FC | 	wrlong	local01, fp
24310     14 4E 85 F1 | 	sub	fp, #20
24314                 | ' 	BYTE *buff,
24314                 | ' 	UINT btr
24314                 | ' )
24314                 | ' {
24314                 | ' 	BYTE d[2];
24314                 | ' 	UINT tmr, tmout;
24314                 | ' 
24314                 | ' 	tmr = _cnt();
24314                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
24314                 | ' 	for(;;) {
24314                 | LR__3990
24314     0C 4E 05 F1 | 	add	fp, #12
24318     A7 12 02 F6 | 	mov	arg01, fp
2431c     0C 4E 85 F1 | 	sub	fp, #12
24320     01 14 06 F6 | 	mov	arg02, #1
24324     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0937
24328     0C 4E 05 F1 | 	add	fp, #12
2432c     A7 1E C2 FA | 	rdbyte	local01, fp
24330     0C 4E 85 F1 | 	sub	fp, #12
24334     FF 1E 0E F2 | 	cmp	local01, #255 wz
24338     28 00 90 5D |  if_ne	jmp	#LR__3991
2433c     1A FA 61 FD | 	getct	result1
24340     FD 1E 02 F6 | 	mov	local01, result1
24344     10 4E 05 F1 | 	add	fp, #16
24348     A7 14 02 FB | 	rdlong	arg02, fp
2434c     0A 1F 82 F1 | 	sub	local01, arg02
24350     04 4E 05 F1 | 	add	fp, #4
24354     A7 14 02 FB | 	rdlong	arg02, fp
24358     14 4E 85 F1 | 	sub	fp, #20
2435c     0A 1F 12 F2 | 	cmp	local01, arg02 wc
24360     B0 FF 9F CD |  if_b	jmp	#LR__3990
24364                 | LR__3991
24364     0C 4E 05 F1 | 	add	fp, #12
24368     A7 1E C2 FA | 	rdbyte	local01, fp
2436c     0C 4E 85 F1 | 	sub	fp, #12
24370     FE 1E 0E F2 | 	cmp	local01, #254 wz
24374     00 FA 05 56 |  if_ne	mov	result1, #0
24378     30 00 90 5D |  if_ne	jmp	#LR__3992
2437c     04 4E 05 F1 | 	add	fp, #4
24380     A7 12 02 FB | 	rdlong	arg01, fp
24384     04 4E 05 F1 | 	add	fp, #4
24388     A7 14 02 FB | 	rdlong	arg02, fp
2438c     08 4E 85 F1 | 	sub	fp, #8
24390     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0937
24394     0C 4E 05 F1 | 	add	fp, #12
24398     A7 12 02 F6 | 	mov	arg01, fp
2439c     0C 4E 85 F1 | 	sub	fp, #12
243a0     02 14 06 F6 | 	mov	arg02, #2
243a4     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0937
243a8                 | ' 
243a8                 | ' 	rcvr_mmc(buff, btr);
243a8                 | ' 	rcvr_mmc(d, 2);
243a8                 | ' 
243a8                 | ' 	return 1;
243a8     01 FA 05 F6 | 	mov	result1, #1
243ac                 | LR__3992
243ac     A7 F0 03 F6 | 	mov	ptra, fp
243b0     B2 00 A0 FD | 	call	#popregs_
243b4                 | _fatfs_cc_rcvr_datablock_0955_ret
243b4     2D 00 64 FD | 	ret
243b8                 | 
243b8                 | _fatfs_cc_xmit_datablock_0957
243b8     00 4A 05 F6 | 	mov	COUNT_, #0
243bc     A8 00 A0 FD | 	call	#pushregs_
243c0     10 F0 07 F1 | 	add	ptra, #16
243c4     04 4E 05 F1 | 	add	fp, #4
243c8     A7 12 62 FC | 	wrlong	arg01, fp
243cc     04 4E 05 F1 | 	add	fp, #4
243d0     A7 14 42 FC | 	wrbyte	arg02, fp
243d4     08 4E 85 F1 | 	sub	fp, #8
243d8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0941
243dc     00 FA 0D F2 | 	cmp	result1, #0 wz
243e0     00 FA 05 A6 |  if_e	mov	result1, #0
243e4     90 00 90 AD |  if_e	jmp	#LR__4001
243e8     08 4E 05 F1 | 	add	fp, #8
243ec     A7 14 C2 FA | 	rdbyte	arg02, fp
243f0     04 4E 05 F1 | 	add	fp, #4
243f4     A7 14 42 FC | 	wrbyte	arg02, fp
243f8     A7 12 02 F6 | 	mov	arg01, fp
243fc     0C 4E 85 F1 | 	sub	fp, #12
24400     01 14 06 F6 | 	mov	arg02, #1
24404     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0930
24408     08 4E 05 F1 | 	add	fp, #8
2440c     A7 14 C2 FA | 	rdbyte	arg02, fp
24410     08 4E 85 F1 | 	sub	fp, #8
24414     FD 14 0E F2 | 	cmp	arg02, #253 wz
24418     58 00 90 AD |  if_e	jmp	#LR__4000
2441c     04 4E 05 F1 | 	add	fp, #4
24420     A7 12 02 FB | 	rdlong	arg01, fp
24424     04 4E 85 F1 | 	sub	fp, #4
24428     09 14 C6 F9 | 	decod	arg02, #9
2442c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0930
24430     0C 4E 05 F1 | 	add	fp, #12
24434     A7 12 02 F6 | 	mov	arg01, fp
24438     0C 4E 85 F1 | 	sub	fp, #12
2443c     02 14 06 F6 | 	mov	arg02, #2
24440     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0937
24444     0C 4E 05 F1 | 	add	fp, #12
24448     A7 12 02 F6 | 	mov	arg01, fp
2444c     0C 4E 85 F1 | 	sub	fp, #12
24450     01 14 06 F6 | 	mov	arg02, #1
24454     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0937
24458     0C 4E 05 F1 | 	add	fp, #12
2445c     A7 14 C2 FA | 	rdbyte	arg02, fp
24460     0C 4E 85 F1 | 	sub	fp, #12
24464     1F 14 06 F5 | 	and	arg02, #31
24468     05 14 0E F2 | 	cmp	arg02, #5 wz
2446c                 | ' 			return 0;
2446c     00 FA 05 56 |  if_ne	mov	result1, #0
24470     04 00 90 5D |  if_ne	jmp	#LR__4001
24474                 | LR__4000
24474                 | ' 	}
24474                 | ' 
24474                 | ' 	return 1;
24474     01 FA 05 F6 | 	mov	result1, #1
24478                 | LR__4001
24478     A7 F0 03 F6 | 	mov	ptra, fp
2447c     B2 00 A0 FD | 	call	#popregs_
24480                 | _fatfs_cc_xmit_datablock_0957_ret
24480     2D 00 64 FD | 	ret
24484                 | 
24484                 | _fatfs_cc_send_cmd_0961
24484     01 4A 05 F6 | 	mov	COUNT_, #1
24488     A8 00 A0 FD | 	call	#pushregs_
2448c     1C F0 07 F1 | 	add	ptra, #28
24490                 | _fatfs_cc_send_cmd_0961_enter
24490     04 4E 05 F1 | 	add	fp, #4
24494     A7 12 42 FC | 	wrbyte	arg01, fp
24498     04 4E 05 F1 | 	add	fp, #4
2449c     A7 14 62 FC | 	wrlong	arg02, fp
244a0     04 4E 85 F1 | 	sub	fp, #4
244a4     A7 FA C1 FA | 	rdbyte	result1, fp
244a8     04 4E 85 F1 | 	sub	fp, #4
244ac     80 FA CD F7 | 	test	result1, #128 wz
244b0     44 00 90 AD |  if_e	jmp	#LR__4010
244b4     04 4E 05 F1 | 	add	fp, #4
244b8     A7 14 C2 FA | 	rdbyte	arg02, fp
244bc     7F 14 06 F5 | 	and	arg02, #127
244c0     A7 14 42 FC | 	wrbyte	arg02, fp
244c4     04 4E 85 F1 | 	sub	fp, #4
244c8     37 12 06 F6 | 	mov	arg01, #55
244cc     00 14 06 F6 | 	mov	arg02, #0
244d0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0961
244d4     0C 4E 05 F1 | 	add	fp, #12
244d8     A7 FA 41 FC | 	wrbyte	result1, fp
244dc     A7 14 C2 FA | 	rdbyte	arg02, fp
244e0     0C 4E 85 F1 | 	sub	fp, #12
244e4     02 14 16 F2 | 	cmp	arg02, #2 wc
244e8     0C 4E 05 31 |  if_ae	add	fp, #12
244ec     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
244f0     0C 4E 85 31 |  if_ae	sub	fp, #12
244f4     6C 01 90 3D |  if_ae	jmp	#LR__4014
244f8                 | LR__4010
244f8     04 4E 05 F1 | 	add	fp, #4
244fc     A7 14 C2 FA | 	rdbyte	arg02, fp
24500     04 4E 85 F1 | 	sub	fp, #4
24504     0C 14 0E F2 | 	cmp	arg02, #12 wz
24508     14 00 90 AD |  if_e	jmp	#LR__4011
2450c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0947
24510     34 FD BF FD | 	call	#_fatfs_cc_select_0951
24514     00 FA 0D F2 | 	cmp	result1, #0 wz
24518     FF FA 05 A6 |  if_e	mov	result1, #255
2451c     44 01 90 AD |  if_e	jmp	#LR__4014
24520                 | LR__4011
24520     04 4E 05 F1 | 	add	fp, #4
24524     A7 14 C2 FA | 	rdbyte	arg02, fp
24528     40 FA 05 F6 | 	mov	result1, #64
2452c     0A FB 41 F5 | 	or	result1, arg02
24530     10 4E 05 F1 | 	add	fp, #16
24534     A7 FA 41 FC | 	wrbyte	result1, fp
24538     0C 4E 85 F1 | 	sub	fp, #12
2453c     A7 FA 01 FB | 	rdlong	result1, fp
24540     18 FA 45 F0 | 	shr	result1, #24
24544     0D 4E 05 F1 | 	add	fp, #13
24548     A7 FA 41 FC | 	wrbyte	result1, fp
2454c     0D 4E 85 F1 | 	sub	fp, #13
24550     A7 FA 01 FB | 	rdlong	result1, fp
24554     10 FA 45 F0 | 	shr	result1, #16
24558     0E 4E 05 F1 | 	add	fp, #14
2455c     A7 FA 41 FC | 	wrbyte	result1, fp
24560     0E 4E 85 F1 | 	sub	fp, #14
24564     A7 FA 01 FB | 	rdlong	result1, fp
24568     08 FA 45 F0 | 	shr	result1, #8
2456c     0F 4E 05 F1 | 	add	fp, #15
24570     A7 FA 41 FC | 	wrbyte	result1, fp
24574     0F 4E 85 F1 | 	sub	fp, #15
24578     A7 FA 01 FB | 	rdlong	result1, fp
2457c     10 4E 05 F1 | 	add	fp, #16
24580     A7 FA 41 FC | 	wrbyte	result1, fp
24584     0C 4E 85 F1 | 	sub	fp, #12
24588     A7 02 48 FC | 	wrbyte	#1, fp
2458c     08 4E 85 F1 | 	sub	fp, #8
24590     A7 FA C9 FA | 	rdbyte	result1, fp wz
24594     04 4E 85 F1 | 	sub	fp, #4
24598     0C 4E 05 A1 |  if_e	add	fp, #12
2459c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
245a0     0C 4E 85 A1 |  if_e	sub	fp, #12
245a4     04 4E 05 F1 | 	add	fp, #4
245a8     A7 FA C1 FA | 	rdbyte	result1, fp
245ac     04 4E 85 F1 | 	sub	fp, #4
245b0     08 FA 0D F2 | 	cmp	result1, #8 wz
245b4     0C 4E 05 A1 |  if_e	add	fp, #12
245b8     A7 0E 49 AC |  if_e	wrbyte	#135, fp
245bc     0C 4E 85 A1 |  if_e	sub	fp, #12
245c0     0C 4E 05 F1 | 	add	fp, #12
245c4     A7 14 C2 FA | 	rdbyte	arg02, fp
245c8     0D 4E 05 F1 | 	add	fp, #13
245cc     A7 14 42 FC | 	wrbyte	arg02, fp
245d0     05 4E 85 F1 | 	sub	fp, #5
245d4     A7 12 02 F6 | 	mov	arg01, fp
245d8     14 4E 85 F1 | 	sub	fp, #20
245dc     06 14 06 F6 | 	mov	arg02, #6
245e0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0930
245e4     04 4E 05 F1 | 	add	fp, #4
245e8     A7 1E C2 FA | 	rdbyte	local01, fp
245ec     04 4E 85 F1 | 	sub	fp, #4
245f0     0C 1E 0E F2 | 	cmp	local01, #12 wz
245f4     10 4E 05 A1 |  if_e	add	fp, #16
245f8     A7 12 02 A6 |  if_e	mov	arg01, fp
245fc     10 4E 85 A1 |  if_e	sub	fp, #16
24600     01 14 06 A6 |  if_e	mov	arg02, #1
24604     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0937
24608     0C 4E 05 F1 | 	add	fp, #12
2460c     A7 14 48 FC | 	wrbyte	#10, fp
24610     0C 4E 85 F1 | 	sub	fp, #12
24614                 | ' 	n = 10;
24614                 | ' 	do
24614                 | LR__4012
24614     10 4E 05 F1 | 	add	fp, #16
24618     A7 12 02 F6 | 	mov	arg01, fp
2461c     10 4E 85 F1 | 	sub	fp, #16
24620     01 14 06 F6 | 	mov	arg02, #1
24624     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0937
24628     10 4E 05 F1 | 	add	fp, #16
2462c     A7 1E C2 FA | 	rdbyte	local01, fp
24630     10 4E 85 F1 | 	sub	fp, #16
24634     80 1E CE F7 | 	test	local01, #128 wz
24638     1C 00 90 AD |  if_e	jmp	#LR__4013
2463c     0C 4E 05 F1 | 	add	fp, #12
24640     A7 1E C2 FA | 	rdbyte	local01, fp
24644     01 1E 86 F1 | 	sub	local01, #1
24648     A7 1E 42 FC | 	wrbyte	local01, fp
2464c     A7 1E CA FA | 	rdbyte	local01, fp wz
24650     0C 4E 85 F1 | 	sub	fp, #12
24654     BC FF 9F 5D |  if_ne	jmp	#LR__4012
24658                 | LR__4013
24658                 | ' 
24658                 | ' 	return d;
24658     10 4E 05 F1 | 	add	fp, #16
2465c     A7 FA C1 FA | 	rdbyte	result1, fp
24660     10 4E 85 F1 | 	sub	fp, #16
24664                 | LR__4014
24664     A7 F0 03 F6 | 	mov	ptra, fp
24668     B2 00 A0 FD | 	call	#popregs_
2466c                 | _fatfs_cc_send_cmd_0961_ret
2466c     2D 00 64 FD | 	ret
24670                 | 
24670                 | _fatfs_cc_disk_deinitialize
24670     03 4A 05 F6 | 	mov	COUNT_, #3
24674     A8 00 A0 FD | 	call	#pushregs_
24678     00 12 4E F2 | 	cmps	arg01, #0 wz
2467c     01 00 00 FF 
24680     14 E4 05 F1 | 	add	objptr, ##532
24684     F2 12 02 FB | 	rdlong	arg01, objptr
24688     04 E4 85 F1 | 	sub	objptr, #4
2468c     F2 1E 02 FB | 	rdlong	local01, objptr
24690     08 E4 05 F1 | 	add	objptr, #8
24694     F2 20 02 FB | 	rdlong	local02, objptr
24698     04 E4 05 F1 | 	add	objptr, #4
2469c     F2 22 02 FB | 	rdlong	local03, objptr
246a0     01 00 00 FF 
246a4     1C E4 85 F1 | 	sub	objptr, ##540
246a8                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
246a8                 | '         return RES_NOTRDY;
246a8     03 FA 05 56 |  if_ne	mov	result1, #3
246ac     2C 00 90 5D |  if_ne	jmp	#LR__4020
246b0     50 12 62 FD | 	fltl	arg01
246b4     09 01 08 FC | 	wrpin	#0, arg01
246b8     50 1E 62 FD | 	fltl	local01
246bc     0F 01 08 FC | 	wrpin	#0, local01
246c0     50 20 62 FD | 	fltl	local02
246c4     10 01 08 FC | 	wrpin	#0, local02
246c8     50 22 62 FD | 	fltl	local03
246cc     11 01 08 FC | 	wrpin	#0, local03
246d0     0A 12 06 F6 | 	mov	arg01, #10
246d4     80 17 BF FD | 	call	#__system___waitms
246d8                 | '     }
246d8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
246d8                 | '     _pinclear(PIN_SS);
246d8                 | '     _pinclear(PIN_CLK);
246d8                 | '     _pinclear(PIN_DI);
246d8                 | '     _pinclear(PIN_DO);
246d8                 | ' 
246d8                 | '     _waitms(10);
246d8                 | ' 
246d8                 | '     return 0;
246d8     00 FA 05 F6 | 	mov	result1, #0
246dc                 | LR__4020
246dc     A7 F0 03 F6 | 	mov	ptra, fp
246e0     B2 00 A0 FD | 	call	#popregs_
246e4                 | _fatfs_cc_disk_deinitialize_ret
246e4     2D 00 64 FD | 	ret
246e8                 | 
246e8                 | _fatfs_cc_gettimeofday
246e8     04 4A 05 F6 | 	mov	COUNT_, #4
246ec     A8 00 A0 FD | 	call	#pushregs_
246f0     09 1F 02 F6 | 	mov	local01, arg01
246f4     3C 13 BF FD | 	call	#__system___getus
246f8     FD 12 02 F6 | 	mov	arg01, result1
246fc     02 00 00 FF 
24700     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
24704     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
24708     09 FB 01 F6 | 	mov	result1, arg01
2470c     10 FB 81 F1 | 	sub	result1, local02
24710     A1 07 00 FF 
24714     40 FA 15 FD | 	qdiv	result1, ##1000000
24718     02 00 00 FF 
2471c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
24720     18 20 62 FD | 	getqx	local02
24724     A1 07 00 FF 
24728     40 FA 15 FD | 	qdiv	result1, ##1000000
2472c     00 20 0E F2 | 	cmp	local02, #0 wz
24730     19 22 62 FD | 	getqy	local03
24734     28 00 90 AD |  if_e	jmp	#LR__4030
24738     02 00 00 FF 
2473c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
24740     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
24744     10 25 02 F1 | 	add	local04, local02
24748     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2474c     11 13 82 F1 | 	sub	arg01, local03
24750     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
24754     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
24758     02 00 00 FF 
2475c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
24760                 | LR__4030
24760     02 00 00 FF 
24764     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
24768     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2476c     02 00 00 FF 
24770     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
24774     0F 25 62 FC | 	wrlong	local04, local01
24778     04 1E 06 F1 | 	add	local01, #4
2477c     0F 23 62 FC | 	wrlong	local03, local01
24780                 | '         lastsec += secs;
24780                 | '         lastus = now - leftover;
24780                 | '     }
24780                 | '     tv->tv_sec = lastsec;
24780                 | '     tv->tv_usec = leftover;
24780                 | '     return 0;
24780     00 FA 05 F6 | 	mov	result1, #0
24784     A7 F0 03 F6 | 	mov	ptra, fp
24788     B2 00 A0 FD | 	call	#popregs_
2478c                 | _fatfs_cc_gettimeofday_ret
2478c     2D 00 64 FD | 	ret
24790                 | 
24790                 | _fatfs_cc__is_leap_year
24790     09 FB 51 F6 | 	abs	result1, arg01 wc
24794     03 FA 05 F5 | 	and	result1, #3
24798     FD FA 89 F6 | 	negc	result1, result1 wz
2479c     38 00 90 5D |  if_ne	jmp	#LR__4041
247a0     09 FB 51 F6 | 	abs	result1, arg01 wc
247a4     64 FA 15 FD | 	qdiv	result1, #100
247a8     19 FA 61 FD | 	getqy	result1
247ac     FD FA 89 F6 | 	negc	result1, result1 wz
247b0     1C 00 90 5D |  if_ne	jmp	#LR__4040
247b4     09 FB 51 F6 | 	abs	result1, arg01 wc
247b8     90 FB 15 FD | 	qdiv	result1, #400
247bc                 | '       return (0 == y % 400);
247bc     00 FA 05 F6 | 	mov	result1, #0
247c0     19 00 62 FD | 	getqy	_var01
247c4     00 01 8A F6 | 	negc	_var01, _var01 wz
247c8     01 FA 05 A6 |  if_e	mov	result1, #1
247cc     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
247d0                 | LR__4040
247d0                 | '     return 1;
247d0     01 FA 05 F6 | 	mov	result1, #1
247d4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
247d8                 | LR__4041
247d8                 | '   }
247d8                 | '   return 0;
247d8     00 FA 05 F6 | 	mov	result1, #0
247dc                 | _fatfs_cc__is_leap_year_ret
247dc     2D 00 64 FD | 	ret
247e0                 | 
247e0                 | _fatfs_cc___tzoffset
247e0     09 01 0A F6 | 	mov	_var01, arg01 wz
247e4     FF FF FF FF 
247e8     0A FF 6B FC | 	wrlong	##-1, arg02
247ec     01 02 06 F6 | 	mov	_var02, #1
247f0     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
247f4                 | '                 return 0;
247f4     00 FA 05 A6 |  if_e	mov	result1, #0
247f8     94 02 90 AD |  if_e	jmp	#LR__4067
247fc     0A 01 68 FC | 	wrlong	#0, arg02
24800     02 00 00 FF 
24804     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24808     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2480c                 | ' 
2480c                 | '        *hasdst = 0;
2480c                 | ' 
2480c                 | ' 	n = stdname;
2480c                 | '         while (*s && isalpha(*s)) {
2480c     02 00 00 FF 
24810     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
24814     97 28 48 FB | 	callpa	#(@LR__4051-@LR__4050)>>2,fcache_load_ptr_
24818                 | LR__4050
24818     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2481c     48 00 90 AD |  if_e	jmp	#LR__4052
24820     00 13 C2 FA | 	rdbyte	arg01, _var01
24824                 | ' {
24824                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
24824     80 12 36 F3 | 	fle	arg01, #128 wc
24828                 | '     return __ctype[c];
24828     02 00 00 FF 
2482c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24830     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24834     09 FB C1 FA | 	rdbyte	result1, arg01
24838     02 00 00 FF 
2483c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24840     0C FA CD F7 | 	test	result1, #12 wz
24844     20 00 90 AD |  if_e	jmp	#LR__4052
24848     00 09 02 F6 | 	mov	_var05, _var01
2484c     00 0B 02 F6 | 	mov	_var06, _var01
24850     01 0A 06 F1 | 	add	_var06, #1
24854     04 0D C2 FA | 	rdbyte	_var07, _var05
24858     05 01 02 F6 | 	mov	_var01, _var06
2485c     03 0D 42 FC | 	wrbyte	_var07, _var04
24860     01 06 06 F1 | 	add	_var04, #1
24864     B0 FF 9F FD | 	jmp	#LR__4050
24868                 | LR__4051
24868                 | LR__4052
24868     03 01 48 FC | 	wrbyte	#0, _var04
2486c     00 0E 06 F6 | 	mov	_var08, #0
24870     00 05 C2 FA | 	rdbyte	_var03, _var01
24874     2D 04 0E F2 | 	cmp	_var03, #45 wz
24878     01 02 66 A6 |  if_e	neg	_var02, #1
2487c     01 00 06 A1 |  if_e	add	_var01, #1
24880     97 28 48 FB | 	callpa	#(@LR__4054-@LR__4053)>>2,fcache_load_ptr_
24884                 | '                 sgn = -1;
24884                 | '                 s++;
24884                 | '         }
24884                 | '         while (isdigit(*s)) {
24884                 | LR__4053
24884     00 13 C2 FA | 	rdbyte	arg01, _var01
24888                 | ' {
24888                 | '   return  (__ctype_get(c) & 0x02 ) ;
24888     80 12 36 F3 | 	fle	arg01, #128 wc
2488c                 | '     return __ctype[c];
2488c     02 00 00 FF 
24890     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24894     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24898     09 FB C1 FA | 	rdbyte	result1, arg01
2489c     02 00 00 FF 
248a0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
248a4     02 FA CD F7 | 	test	result1, #2 wz
248a8     28 00 90 AD |  if_e	jmp	#LR__4055
248ac     07 05 02 F6 | 	mov	_var03, _var08
248b0     02 04 66 F0 | 	shl	_var03, #2
248b4     07 05 02 F1 | 	add	_var03, _var08
248b8     01 04 66 F0 | 	shl	_var03, #1
248bc     00 09 C2 FA | 	rdbyte	_var05, _var01
248c0     30 08 86 F1 | 	sub	_var05, #48
248c4     04 05 02 F1 | 	add	_var03, _var05
248c8     02 0F 02 F6 | 	mov	_var08, _var03
248cc     01 00 06 F1 | 	add	_var01, #1
248d0     B0 FF 9F FD | 	jmp	#LR__4053
248d4                 | LR__4054
248d4                 | LR__4055
248d4     07 00 00 FF 
248d8     10 0E 06 FD | 	qmul	_var08, ##3600
248dc     00 05 C2 FA | 	rdbyte	_var03, _var01
248e0     3A 04 0E F2 | 	cmp	_var03, #58 wz
248e4     18 10 62 FD | 	getqx	_var09
248e8     70 00 90 5D |  if_ne	jmp	#LR__4059
248ec     00 0E 06 F6 | 	mov	_var08, #0
248f0     01 00 06 F1 | 	add	_var01, #1
248f4     97 28 48 FB | 	callpa	#(@LR__4057-@LR__4056)>>2,fcache_load_ptr_
248f8                 | '                 x = 0;
248f8                 | '                 s++;
248f8                 | '                 while (isdigit(*s)) {
248f8                 | LR__4056
248f8     00 13 C2 FA | 	rdbyte	arg01, _var01
248fc                 | ' {
248fc                 | '   return  (__ctype_get(c) & 0x02 ) ;
248fc     80 12 36 F3 | 	fle	arg01, #128 wc
24900                 | '     return __ctype[c];
24900     02 00 00 FF 
24904     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24908     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2490c     09 FB C1 FA | 	rdbyte	result1, arg01
24910     02 00 00 FF 
24914     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24918     02 FA CD F7 | 	test	result1, #2 wz
2491c     28 00 90 AD |  if_e	jmp	#LR__4058
24920     07 05 02 F6 | 	mov	_var03, _var08
24924     02 04 66 F0 | 	shl	_var03, #2
24928     07 05 02 F1 | 	add	_var03, _var08
2492c     01 04 66 F0 | 	shl	_var03, #1
24930     00 09 C2 FA | 	rdbyte	_var05, _var01
24934     30 08 86 F1 | 	sub	_var05, #48
24938     04 05 02 F1 | 	add	_var03, _var05
2493c     02 0F 02 F6 | 	mov	_var08, _var03
24940     01 00 06 F1 | 	add	_var01, #1
24944     B0 FF 9F FD | 	jmp	#LR__4056
24948                 | LR__4057
24948                 | LR__4058
24948     07 0D 02 F6 | 	mov	_var07, _var08
2494c     04 0C 66 F0 | 	shl	_var07, #4
24950     07 0D 82 F1 | 	sub	_var07, _var08
24954     02 0C 66 F0 | 	shl	_var07, #2
24958     06 11 02 F1 | 	add	_var09, _var07
2495c                 | LR__4059
2495c     02 00 00 FF 
24960     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24964     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
24968     00 13 C2 FA | 	rdbyte	arg01, _var01
2496c                 | ' {
2496c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2496c     80 12 36 F3 | 	fle	arg01, #128 wc
24970                 | '     return __ctype[c];
24970     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
24974     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24978     09 FB C1 FA | 	rdbyte	result1, arg01
2497c     02 00 00 FF 
24980     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24984     0C FA CD F7 | 	test	result1, #12 wz
24988     50 00 90 AD |  if_e	jmp	#LR__4062
2498c     0A 03 68 FC | 	wrlong	#1, arg02
24990                 | '                 *hasdst = 1;
24990                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
24990                 | LR__4060
24990     00 05 CA FA | 	rdbyte	_var03, _var01 wz
24994     44 00 90 AD |  if_e	jmp	#LR__4061
24998     00 13 C2 FA | 	rdbyte	arg01, _var01
2499c                 | ' {
2499c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2499c     80 12 36 F3 | 	fle	arg01, #128 wc
249a0                 | '     return __ctype[c];
249a0     02 00 00 FF 
249a4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
249a8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
249ac     09 FB C1 FA | 	rdbyte	result1, arg01
249b0     02 00 00 FF 
249b4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
249b8     0C FA CD F7 | 	test	result1, #12 wz
249bc     1C 00 90 AD |  if_e	jmp	#LR__4061
249c0     00 0B 02 F6 | 	mov	_var06, _var01
249c4     01 0A 06 F1 | 	add	_var06, #1
249c8     00 0D C2 FA | 	rdbyte	_var07, _var01
249cc     05 01 02 F6 | 	mov	_var01, _var06
249d0     03 0D 42 FC | 	wrbyte	_var07, _var04
249d4     01 06 06 F1 | 	add	_var04, #1
249d8     B4 FF 9F FD | 	jmp	#LR__4060
249dc                 | LR__4061
249dc                 | LR__4062
249dc     03 01 48 FC | 	wrbyte	#0, _var04
249e0     02 00 00 FF 
249e4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
249e8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
249ec     02 00 00 FF 
249f0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
249f4     20 00 90 AD |  if_e	jmp	#LR__4063
249f8     02 00 00 FF 
249fc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24a00     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24a04     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
24a08     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24a0c     02 00 00 FF 
24a10     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
24a14     1C 00 90 FD | 	jmp	#LR__4064
24a18                 | LR__4063
24a18     02 00 00 FF 
24a1c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
24a20     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24a24     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
24a28     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24a2c     02 00 00 FF 
24a30     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
24a34                 | LR__4064
24a34     02 00 00 FF 
24a38     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24a3c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
24a40     02 00 00 FF 
24a44     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
24a48     20 00 90 AD |  if_e	jmp	#LR__4065
24a4c     02 00 00 FF 
24a50     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24a54     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24a58     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
24a5c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24a60     02 00 00 FF 
24a64     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
24a68     1C 00 90 FD | 	jmp	#LR__4066
24a6c                 | LR__4065
24a6c     02 00 00 FF 
24a70     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24a74     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24a78     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
24a7c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24a80     02 00 00 FF 
24a84     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
24a88                 | LR__4066
24a88     08 03 02 FD | 	qmul	_var02, _var09
24a8c                 | ' 		_tzname[1] = stdname;
24a8c                 | ' 
24a8c                 | '         return sgn * off;
24a8c     18 FA 61 FD | 	getqx	result1
24a90                 | LR__4067
24a90                 | _fatfs_cc___tzoffset_ret
24a90     2D 00 64 FD | 	ret
24a94                 | 
24a94                 | _fatfs_cc___indst
24a94     10 12 06 F1 | 	add	arg01, #16
24a98     09 01 02 FB | 	rdlong	_var01, arg01
24a9c     10 12 86 F1 | 	sub	arg01, #16
24aa0     02 00 0E F2 | 	cmp	_var01, #2 wz
24aa4     30 00 90 5D |  if_ne	jmp	#LR__4070
24aa8     07 00 06 F6 | 	mov	_var01, #7
24aac     18 12 06 F1 | 	add	arg01, #24
24ab0     09 03 02 FB | 	rdlong	_var02, arg01
24ab4     01 01 02 F1 | 	add	_var01, _var02
24ab8     0C 12 86 F1 | 	sub	arg01, #12
24abc     09 05 02 FB | 	rdlong	_var03, arg01
24ac0     02 01 82 F1 | 	sub	_var01, _var03
24ac4     00 00 56 F2 | 	cmps	_var01, #0 wc
24ac8                 | '                         return 1;
24ac8     01 FA 05 C6 |  if_b	mov	result1, #1
24acc     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
24ad0                 | '                 return 0;
24ad0     00 FA 05 F6 | 	mov	result1, #0
24ad4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
24ad8                 | LR__4070
24ad8     10 12 06 F1 | 	add	arg01, #16
24adc     09 01 02 FB | 	rdlong	_var01, arg01
24ae0     10 12 86 F1 | 	sub	arg01, #16
24ae4     0A 00 0E F2 | 	cmp	_var01, #10 wz
24ae8     28 00 90 5D |  if_ne	jmp	#LR__4071
24aec     18 12 06 F1 | 	add	arg01, #24
24af0     09 01 02 FB | 	rdlong	_var01, arg01
24af4     0C 12 86 F1 | 	sub	arg01, #12
24af8     09 07 02 FB | 	rdlong	_var04, arg01
24afc     03 01 82 F1 | 	sub	_var01, _var04
24b00     00 00 56 F2 | 	cmps	_var01, #0 wc
24b04                 | '                         return 0;
24b04     00 FA 05 C6 |  if_b	mov	result1, #0
24b08     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
24b0c                 | '                 return 1;
24b0c     01 FA 05 F6 | 	mov	result1, #1
24b10     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
24b14                 | LR__4071
24b14                 | '         }
24b14                 | ' 
24b14                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
24b14     00 00 06 F6 | 	mov	_var01, #0
24b18     10 12 06 F1 | 	add	arg01, #16
24b1c     09 03 02 FB | 	rdlong	_var02, arg01
24b20     10 12 86 F1 | 	sub	arg01, #16
24b24     03 02 56 F2 | 	cmps	_var02, #3 wc
24b28     10 00 90 CD |  if_b	jmp	#LR__4072
24b2c     10 12 06 F1 | 	add	arg01, #16
24b30     09 05 02 FB | 	rdlong	_var03, arg01
24b34     0A 04 56 F2 | 	cmps	_var03, #10 wc
24b38     01 00 06 C6 |  if_b	mov	_var01, #1
24b3c                 | LR__4072
24b3c     00 FB 01 F6 | 	mov	result1, _var01
24b40                 | _fatfs_cc___indst_ret
24b40     2D 00 64 FD | 	ret
24b44                 | 
24b44                 | ' 	
24b44                 | ' 	FUNCTION pfunc(c as integer) as integer
24b44                 | ___strs_cl_pfunc
24b44                 | ' 		if (i < 16) then
24b44     04 E4 05 F1 | 	add	objptr, #4
24b48     F2 FA 01 FB | 	rdlong	result1, objptr
24b4c     04 E4 85 F1 | 	sub	objptr, #4
24b50     10 FA 55 F2 | 	cmps	result1, #16 wc
24b54     2C 00 90 3D |  if_ae	jmp	#LR__4080
24b58     F2 FA 01 FB | 	rdlong	result1, objptr
24b5c     04 E4 05 F1 | 	add	objptr, #4
24b60     F2 00 02 FB | 	rdlong	_var01, objptr
24b64     FD 00 02 F1 | 	add	_var01, result1
24b68     00 13 42 FC | 	wrbyte	arg01, _var01
24b6c     F2 FA 01 FB | 	rdlong	result1, objptr
24b70     01 FA 05 F1 | 	add	result1, #1
24b74     F2 FA 61 FC | 	wrlong	result1, objptr
24b78     04 E4 85 F1 | 	sub	objptr, #4
24b7c                 | ' 			p(i) = c
24b7c                 | ' 			i = i+1
24b7c                 | ' 			return 1
24b7c     01 FA 05 F6 | 	mov	result1, #1
24b80     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
24b84                 | LR__4080
24b84                 | ' 			return -1
24b84     01 FA 65 F6 | 	neg	result1, #1
24b88                 | ___strs_cl_pfunc_ret
24b88     2D 00 64 FD | 	ret
24b8c                 | 
24b8c                 | __struct__s_vfs_file_t_putchar
24b8c     04 4A 05 F6 | 	mov	COUNT_, #4
24b90     A8 00 A0 FD | 	call	#pushregs_
24b94     1C E4 05 F1 | 	add	objptr, #28
24b98     F2 1E 0A FB | 	rdlong	local01, objptr wz
24b9c     1C E4 85 F1 | 	sub	objptr, #28
24ba0     00 FA 05 A6 |  if_e	mov	result1, #0
24ba4     48 00 90 AD |  if_e	jmp	#LR__4090
24ba8     1C E4 05 F1 | 	add	objptr, #28
24bac     F2 20 02 FB | 	rdlong	local02, objptr
24bb0     10 23 02 F6 | 	mov	local03, local02
24bb4     1C E4 85 F1 | 	sub	objptr, #28
24bb8     13 22 46 F7 | 	zerox	local03, #19
24bbc     14 20 46 F0 | 	shr	local02, #20
24bc0     02 20 66 F0 | 	shl	local02, #2
24bc4     ED 20 02 F1 | 	add	local02, __methods__
24bc8     10 21 02 FB | 	rdlong	local02, local02
24bcc     F2 14 02 F6 | 	mov	arg02, objptr
24bd0     F2 24 02 F6 | 	mov	local04, objptr
24bd4     11 E5 01 F6 | 	mov	objptr, local03
24bd8     2D 20 62 FD | 	call	local02
24bdc     12 E5 01 F6 | 	mov	objptr, local04
24be0                 | '     return (i < 0) ? 0 : 1;
24be0     00 FA 55 F2 | 	cmps	result1, #0 wc
24be4     00 1E 06 C6 |  if_b	mov	local01, #0
24be8     01 1E 06 36 |  if_ae	mov	local01, #1
24bec     0F FB 01 F6 | 	mov	result1, local01
24bf0                 | LR__4090
24bf0     A7 F0 03 F6 | 	mov	ptra, fp
24bf4     B2 00 A0 FD | 	call	#popregs_
24bf8                 | __struct__s_vfs_file_t_putchar_ret
24bf8     2D 00 64 FD | 	ret
24bfc                 | 
24bfc                 | __struct__s_vfs_file_t_getchar
24bfc     03 4A 05 F6 | 	mov	COUNT_, #3
24c00     A8 00 A0 FD | 	call	#pushregs_
24c04     20 E4 05 F1 | 	add	objptr, #32
24c08     F2 12 0A FB | 	rdlong	arg01, objptr wz
24c0c     20 E4 85 F1 | 	sub	objptr, #32
24c10     01 FA 65 A6 |  if_e	neg	result1, #1
24c14     38 00 90 AD |  if_e	jmp	#LR__4100
24c18                 | '     return getcf(__this);
24c18     20 E4 05 F1 | 	add	objptr, #32
24c1c     F2 1E 02 FB | 	rdlong	local01, objptr
24c20     0F 21 02 F6 | 	mov	local02, local01
24c24     20 E4 85 F1 | 	sub	objptr, #32
24c28     13 20 46 F7 | 	zerox	local02, #19
24c2c     14 1E 46 F0 | 	shr	local01, #20
24c30     02 1E 66 F0 | 	shl	local01, #2
24c34     ED 1E 02 F1 | 	add	local01, __methods__
24c38     0F 1F 02 FB | 	rdlong	local01, local01
24c3c     F2 12 02 F6 | 	mov	arg01, objptr
24c40     F2 22 02 F6 | 	mov	local03, objptr
24c44     10 E5 01 F6 | 	mov	objptr, local02
24c48     2D 1E 62 FD | 	call	local01
24c4c     11 E5 01 F6 | 	mov	objptr, local03
24c50                 | LR__4100
24c50     A7 F0 03 F6 | 	mov	ptra, fp
24c54     B2 00 A0 FD | 	call	#popregs_
24c58                 | __struct__s_vfs_file_t_getchar_ret
24c58     2D 00 64 FD | 	ret
24c5c                 | 
24c5c                 | __struct___bas_wrap_sender_tx
24c5c     03 4A 05 F6 | 	mov	COUNT_, #3
24c60     A8 00 A0 FD | 	call	#pushregs_
24c64     F2 1E 02 FB | 	rdlong	local01, objptr
24c68     0F 21 02 F6 | 	mov	local02, local01
24c6c     13 1E 46 F7 | 	zerox	local01, #19
24c70     14 20 46 F0 | 	shr	local02, #20
24c74     02 20 66 F0 | 	shl	local02, #2
24c78     ED 20 02 F1 | 	add	local02, __methods__
24c7c     10 21 02 FB | 	rdlong	local02, local02
24c80     F2 22 02 F6 | 	mov	local03, objptr
24c84     0F E5 01 F6 | 	mov	objptr, local01
24c88     2D 20 62 FD | 	call	local02
24c8c     11 E5 01 F6 | 	mov	objptr, local03
24c90     01 FA 05 F6 | 	mov	result1, #1
24c94     A7 F0 03 F6 | 	mov	ptra, fp
24c98     B2 00 A0 FD | 	call	#popregs_
24c9c                 | __struct___bas_wrap_sender_tx_ret
24c9c     2D 00 64 FD | 	ret
24ca0                 | 
24ca0                 | __struct___bas_wrap_sender_rx
24ca0     03 4A 05 F6 | 	mov	COUNT_, #3
24ca4     A8 00 A0 FD | 	call	#pushregs_
24ca8     04 E4 05 F1 | 	add	objptr, #4
24cac     F2 1E 02 FB | 	rdlong	local01, objptr
24cb0     0F 21 02 F6 | 	mov	local02, local01
24cb4     04 E4 85 F1 | 	sub	objptr, #4
24cb8     13 20 46 F7 | 	zerox	local02, #19
24cbc     14 1E 46 F0 | 	shr	local01, #20
24cc0     02 1E 66 F0 | 	shl	local01, #2
24cc4     ED 1E 02 F1 | 	add	local01, __methods__
24cc8     0F 1F 02 FB | 	rdlong	local01, local01
24ccc     F2 22 02 F6 | 	mov	local03, objptr
24cd0     10 E5 01 F6 | 	mov	objptr, local02
24cd4     2D 1E 62 FD | 	call	local01
24cd8     11 E5 01 F6 | 	mov	objptr, local03
24cdc     A7 F0 03 F6 | 	mov	ptra, fp
24ce0     B2 00 A0 FD | 	call	#popregs_
24ce4                 | __struct___bas_wrap_sender_rx_ret
24ce4     2D 00 64 FD | 	ret
24ce8                 | 
24ce8                 | __struct___bas_wrap_sender_close
24ce8     03 4A 05 F6 | 	mov	COUNT_, #3
24cec     A8 00 A0 FD | 	call	#pushregs_
24cf0     08 E4 05 F1 | 	add	objptr, #8
24cf4     F2 1E 02 FB | 	rdlong	local01, objptr
24cf8     0F 21 02 F6 | 	mov	local02, local01
24cfc     08 E4 85 F1 | 	sub	objptr, #8
24d00     13 20 46 F7 | 	zerox	local02, #19
24d04     14 1E 46 F0 | 	shr	local01, #20
24d08     02 1E 66 F0 | 	shl	local01, #2
24d0c     ED 1E 02 F1 | 	add	local01, __methods__
24d10     0F 1F 02 FB | 	rdlong	local01, local01
24d14     F2 22 02 F6 | 	mov	local03, objptr
24d18     10 E5 01 F6 | 	mov	objptr, local02
24d1c     2D 1E 62 FD | 	call	local01
24d20     11 E5 01 F6 | 	mov	objptr, local03
24d24     A7 F0 03 F6 | 	mov	ptra, fp
24d28     B2 00 A0 FD | 	call	#popregs_
24d2c                 | __struct___bas_wrap_sender_close_ret
24d2c     2D 00 64 FD | 	ret
24d30                 | 
24d30                 | LR__4110
24d30     2F          | 	byte	"/"
24d31     00          | 	byte	0
24d32                 | LR__4111
24d32     69 6E 66    | 	byte	"inf"
24d35     00          | 	byte	0
24d36                 | LR__4112
24d36     6E 61 6E    | 	byte	"nan"
24d39     00          | 	byte	0
24d3a                 | LR__4113
24d3a                 | 	byte	
24d3a     00          | 	byte	0
24d3b                 | LR__4114
24d3b                 | 	byte	
24d3b     00          | 	byte	0
24d3c                 | LR__4115
24d3c                 | 	byte	
24d3c     00          | 	byte	0
24d3d                 | LR__4116
24d3d                 | 	byte	
24d3d     00          | 	byte	0
24d3e                 | LR__4117
24d3e                 | 	byte	
24d3e     00          | 	byte	0
24d3f                 | LR__4118
24d3f                 | 	byte	
24d3f     00          | 	byte	0
24d40                 | LR__4119
24d40                 | 	byte	
24d40     00          | 	byte	0
24d41                 | LR__4120
24d41                 | 	byte	
24d41     00          | 	byte	0
24d42                 | LR__4121
24d42     00          | 	byte	0
24d43     00          | 	byte	0
24d44                 | LR__4122
24d44     00          | 	byte	0
24d45     00          | 	byte	0
24d46                 | LR__4123
24d46     00          | 	byte	0
24d47     00          | 	byte	0
24d48                 | LR__4124
24d48     20 21 21 21 
24d4c     20 63 6F 72 
24d50     72 75 70 74 
24d54     65 64 20 68 
24d58     65 61 70 3F 
24d5c     3F 3F 20 21 
24d60     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
24d63     00          | 	byte	0
24d64                 | LR__4125
24d64     20 21 21 21 
24d68     20 6F 75 74 
24d6c     20 6F 66 20 
24d70     68 65 61 70 
24d74     20 6D 65 6D 
24d78     6F 72 79 20 
24d7c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
24d80     00          | 	byte	0
24d81                 | LR__4126
24d81     20 21 21 21 
24d85     20 63 6F 72 
24d89     72 75 70 74 
24d8d     65 64 20 68 
24d91     65 61 70 20 
24d95     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
24d99     00          | 	byte	0
24d9a                 | LR__4127
24d9a     00          | 	byte	0
24d9b     00          | 	byte	0
24d9c                 | LR__4128
24d9c     2E          | 	byte	"."
24d9d     00          | 	byte	0
24d9e                 | LR__4129
24d9e     00          | 	byte	0
24d9f     00          | 	byte	0
24da0                 | LR__4130
24da0     00          | 	byte	0
24da1     00          | 	byte	0
24da2                 | LR__4131
24da2     00          | 	byte	0
24da3     00          | 	byte	0
24da4                 | LR__4132
24da4     2A 3A 3C 3E 
24da8     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
24dac     00          | 	byte	0
24dad                 | LR__4133
24dad     2B 2C 3B 3D 
24db1     5B 5D       | 	byte	"+,;=[]"
24db3     00          | 	byte	0
24db4                 | LR__4134
24db4     46 41 54 33 
24db8     32 20 20 20 | 	byte	"FAT32   "
24dbc     00          | 	byte	0
24dbd                 | LR__4135
24dbd     54 5A       | 	byte	"TZ"
24dbf     00          | 	byte	0
24dc0                 | LR__4136
24dc0     00          | 	byte	0
24dc1     00          | 	byte	0
24dc2                 | LR__4137
24dc2                 | 	byte	
24dc2     00          | 	byte	0
24dc3                 | LR__4138
24dc3                 | 	byte	
24dc3     00          | 	byte	0
24dc4                 | LR__4139
24dc4     3A          | 	byte	":"
24dc5     00          | 	byte	0
24dc6                 | LR__4140
24dc6                 | 	byte	
24dc6     00          | 	byte	0
24dc7                 | LR__4141
24dc7                 | 	byte	
24dc7     00          | 	byte	0
24dc8                 | LR__4142
24dc8                 | 	byte	
24dc8     00          | 	byte	0
24dc9                 | LR__4143
24dc9                 | 	byte	
24dc9     00          | 	byte	0
24dca                 | LR__4144
24dca                 | 	byte	
24dca     00          | 	byte	0
24dcb                 | LR__4145
24dcb                 | 	byte	
24dcb     00          | 	byte	0
24dcc                 | LR__4146
24dcc                 | 	byte	
24dcc     00          | 	byte	0
24dcd                 | LR__4147
24dcd     22          | 	byte	34
24dce     00          | 	byte	0
24dcf                 | LR__4148
24dcf     22          | 	byte	34
24dd0     00          | 	byte	0
24dd1                 | LR__4149
24dd1     22          | 	byte	34
24dd2     00          | 	byte	0
24dd3                 | LR__4150
24dd3     22          | 	byte	34
24dd4     00          | 	byte	0
24dd5                 | LR__4151
24dd5     22          | 	byte	34
24dd6     00          | 	byte	0
24dd7                 | LR__4152
24dd7     3E          | 	byte	">"
24dd8     00          | 	byte	0
24dd9                 | LR__4153
24dd9     3E          | 	byte	">"
24dda     00          | 	byte	0
24ddb                 | LR__4154
24ddb     2B          | 	byte	"+"
24ddc     00          | 	byte	0
24ddd                 | LR__4155
24ddd     2D          | 	byte	"-"
24dde     00          | 	byte	0
24ddf                 | LR__4156
24ddf     2A          | 	byte	"*"
24de0     00          | 	byte	0
24de1                 | LR__4157
24de1     2F          | 	byte	"/"
24de2     00          | 	byte	0
24de3                 | LR__4158
24de3     5E          | 	byte	"^"
24de4     00          | 	byte	0
24de5                 | LR__4159
24de5     3D          | 	byte	"="
24de6     00          | 	byte	0
24de7                 | LR__4160
24de7     2B          | 	byte	"+"
24de8     00          | 	byte	0
24de9                 | LR__4161
24de9     2B          | 	byte	"+"
24dea     00          | 	byte	0
24deb                 | LR__4162
24deb     2D          | 	byte	"-"
24dec     00          | 	byte	0
24ded                 | LR__4163
24ded     2D          | 	byte	"-"
24dee     00          | 	byte	0
24def                 | LR__4164
24def     3C          | 	byte	"<"
24df0     00          | 	byte	0
24df1                 | LR__4165
24df1     3E          | 	byte	">"
24df2     00          | 	byte	0
24df3                 | LR__4166
24df3     22          | 	byte	34
24df4     00          | 	byte	0
24df5                 | LR__4167
24df5     22          | 	byte	34
24df6     00          | 	byte	0
24df7                 | LR__4168
24df7                 | 	byte	
24df7     00          | 	byte	0
24df8                 | LR__4169
24df8     6C 6F 61 64 | 	byte	"load"
24dfc     00          | 	byte	0
24dfd                 | LR__4170
24dfd     73 61 76 65 | 	byte	"save"
24e01     00          | 	byte	0
24e02                 | LR__4171
24e02     62 72 75 6E | 	byte	"brun"
24e06     00          | 	byte	0
24e07                 | LR__4172
24e07     6D 6F 75 73 
24e0b     65          | 	byte	"mouse"
24e0c     00          | 	byte	0
24e0d                 | LR__4173
24e0d     63 75 72 73 
24e11     6F 72       | 	byte	"cursor"
24e13     00          | 	byte	0
24e14                 | LR__4174
24e14     63 6C 69 63 
24e18     6B          | 	byte	"click"
24e19     00          | 	byte	0
24e1a                 | LR__4175
24e1a     6F 6E       | 	byte	"on"
24e1c     00          | 	byte	0
24e1d                 | LR__4176
24e1d     31          | 	byte	"1"
24e1e     00          | 	byte	0
24e1f                 | LR__4177
24e1f     6F 66 66    | 	byte	"off"
24e22     00          | 	byte	0
24e23                 | LR__4178
24e23     30          | 	byte	"0"
24e24     00          | 	byte	0
24e25                 | LR__4179
24e25                 | 	byte	
24e25     00          | 	byte	0
24e26                 | LR__4180
24e26                 | 	byte	
24e26     00          | 	byte	0
24e27                 | LR__4181
24e27                 | 	byte	
24e27     00          | 	byte	0
24e28                 | LR__4182
24e28                 | 	byte	
24e28     00          | 	byte	0
24e29                 | LR__4183
24e29     20 55 73 65 
24e2d     72 20 66 75 
24e31     6E 63 74 69 
24e35     6F 6E 73 20 
24e39     61 6E 64 20 
24e3d     61 72 72 61 
24e41     79 73 20 6E 
24e45     6F 74 20 79 
24e49     65 74 20 69 
24e4d     6D 70 6C 65 
24e51     6D 65 6E 74 
24e55     65 64       | 	byte	" User functions and arrays not yet implemented"
24e57     00          | 	byte	0
24e58                 | LR__4184
24e58                 | 	byte	
24e58     00          | 	byte	0
24e59                 | LR__4185
24e59                 | 	byte	
24e59     00          | 	byte	0
24e5a                 | LR__4186
24e5a     52 65 61 64 
24e5e     79          | 	byte	"Ready"
24e5f     00          | 	byte	0
24e60                 | LR__4187
24e60     2B          | 	byte	"+"
24e61     00          | 	byte	0
24e62                 | LR__4188
24e62     2D          | 	byte	"-"
24e63     00          | 	byte	0
24e64                 | LR__4189
24e64     6F 72       | 	byte	"or"
24e66     00          | 	byte	0
24e67                 | LR__4190
24e67     78 6F 72    | 	byte	"xor"
24e6a     00          | 	byte	0
24e6b                 | LR__4191
24e6b     2A          | 	byte	"*"
24e6c     00          | 	byte	0
24e6d                 | LR__4192
24e6d     2F          | 	byte	"/"
24e6e     00          | 	byte	0
24e6f                 | LR__4193
24e6f     61 6E 64    | 	byte	"and"
24e72     00          | 	byte	0
24e73                 | LR__4194
24e73     64 69 76    | 	byte	"div"
24e76     00          | 	byte	0
24e77                 | LR__4195
24e77     6D 6F 64    | 	byte	"mod"
24e7a     00          | 	byte	0
24e7b                 | LR__4196
24e7b     73 68 6C    | 	byte	"shl"
24e7e     00          | 	byte	0
24e7f                 | LR__4197
24e7f     73 68 72    | 	byte	"shr"
24e82     00          | 	byte	0
24e83                 | LR__4198
24e83     5E          | 	byte	"^"
24e84     00          | 	byte	0
24e85                 | LR__4199
24e85     6E 6F 74    | 	byte	"not"
24e88     00          | 	byte	0
24e89                 | LR__4200
24e89     40          | 	byte	"@"
24e8a     00          | 	byte	0
24e8b                 | LR__4201
24e8b     3D          | 	byte	"="
24e8c     00          | 	byte	0
24e8d                 | LR__4202
24e8d     3E 3D       | 	byte	">="
24e8f     00          | 	byte	0
24e90                 | LR__4203
24e90     3C 3D       | 	byte	"<="
24e92     00          | 	byte	0
24e93                 | LR__4204
24e93     3C          | 	byte	"<"
24e94     00          | 	byte	0
24e95                 | LR__4205
24e95     3E          | 	byte	">"
24e96     00          | 	byte	0
24e97                 | LR__4206
24e97     3C 3E       | 	byte	"<>"
24e99     00          | 	byte	0
24e9a                 | LR__4207
24e9a     2B 2B       | 	byte	"++"
24e9c     00          | 	byte	0
24e9d                 | LR__4208
24e9d     2D 2D       | 	byte	"--"
24e9f     00          | 	byte	0
24ea0                 | LR__4209
24ea0     2B          | 	byte	"+"
24ea1     00          | 	byte	0
24ea2                 | LR__4210
24ea2     2D          | 	byte	"-"
24ea3     00          | 	byte	0
24ea4                 | LR__4211
24ea4     3D          | 	byte	"="
24ea5     00          | 	byte	0
24ea6                 | LR__4212
24ea6     2C          | 	byte	","
24ea7     00          | 	byte	0
24ea8                 | LR__4213
24ea8     2A          | 	byte	"*"
24ea9     00          | 	byte	0
24eaa                 | LR__4214
24eaa     2F          | 	byte	"/"
24eab     00          | 	byte	0
24eac                 | LR__4215
24eac     3B          | 	byte	";"
24ead     00          | 	byte	0
24eae                 | LR__4216
24eae     22          | 	byte	34
24eaf     00          | 	byte	0
24eb0                 | LR__4217
24eb0     5E          | 	byte	"^"
24eb1     00          | 	byte	0
24eb2                 | LR__4218
24eb2     29          | 	byte	")"
24eb3     00          | 	byte	0
24eb4                 | LR__4219
24eb4     28          | 	byte	"("
24eb5     00          | 	byte	0
24eb6                 | LR__4220
24eb6     3A          | 	byte	":"
24eb7     00          | 	byte	0
24eb8                 | LR__4221
24eb8     20          | 	byte	" "
24eb9     00          | 	byte	0
24eba                 | LR__4222
24eba     3E          | 	byte	">"
24ebb     00          | 	byte	0
24ebc                 | LR__4223
24ebc     3C          | 	byte	"<"
24ebd     00          | 	byte	0
24ebe                 | LR__4224
24ebe     3D          | 	byte	"="
24ebf     00          | 	byte	0
24ec0                 | LR__4225
24ec0     63 6C 73    | 	byte	"cls"
24ec3     00          | 	byte	0
24ec4                 | LR__4226
24ec4     6E 65 77    | 	byte	"new"
24ec7     00          | 	byte	0
24ec8                 | LR__4227
24ec8     70 6C 6F 74 | 	byte	"plot"
24ecc     00          | 	byte	0
24ecd                 | LR__4228
24ecd     64 72 61 77 | 	byte	"draw"
24ed1     00          | 	byte	0
24ed2                 | LR__4229
24ed2     70 72 69 6E 
24ed6     74          | 	byte	"print"
24ed7     00          | 	byte	0
24ed8                 | LR__4230
24ed8     63 69 72 63 
24edc     6C 65       | 	byte	"circle"
24ede     00          | 	byte	0
24edf                 | LR__4231
24edf     66 63 69 72 
24ee3     63 6C 65    | 	byte	"fcircle"
24ee6     00          | 	byte	0
24ee7                 | LR__4232
24ee7     62 6F 78    | 	byte	"box"
24eea     00          | 	byte	0
24eeb                 | LR__4233
24eeb     66 72 61 6D 
24eef     65          | 	byte	"frame"
24ef0     00          | 	byte	0
24ef1                 | LR__4234
24ef1     63 6F 6C 6F 
24ef5     72          | 	byte	"color"
24ef6     00          | 	byte	0
24ef7                 | LR__4235
24ef7     70 72 69 6E 
24efb     74          | 	byte	"print"
24efc     00          | 	byte	0
24efd                 | LR__4236
24efd     6C 69 73 74 | 	byte	"list"
24f01     00          | 	byte	0
24f02                 | LR__4237
24f02     72 75 6E    | 	byte	"run"
24f05     00          | 	byte	0
24f06                 | LR__4238
24f06     67 6F 74 6F | 	byte	"goto"
24f0a     00          | 	byte	0
24f0b                 | LR__4239
24f0b     63 73 61 76 
24f0f     65          | 	byte	"csave"
24f10     00          | 	byte	0
24f11                 | LR__4240
24f11     73 61 76 65 | 	byte	"save"
24f15     00          | 	byte	0
24f16                 | LR__4241
24f16     6C 6F 61 64 | 	byte	"load"
24f1a     00          | 	byte	0
24f1b                 | LR__4242
24f1b     62 72 75 6E | 	byte	"brun"
24f1f     00          | 	byte	0
24f20                 | LR__4243
24f20     70 69 6E 77 
24f24     72 69 74 65 | 	byte	"pinwrite"
24f28     00          | 	byte	0
24f29                 | LR__4244
24f29     77 61 69 74 
24f2d     6D 73       | 	byte	"waitms"
24f2f     00          | 	byte	0
24f30                 | LR__4245
24f30     77 61 69 74 
24f34     76 62 6C    | 	byte	"waitvbl"
24f37     00          | 	byte	0
24f38                 | LR__4246
24f38     69 66       | 	byte	"if"
24f3a     00          | 	byte	0
24f3b                 | LR__4247
24f3b     65 6C 73 65 | 	byte	"else"
24f3f     00          | 	byte	0
24f40                 | LR__4248
24f40     74 68 65 6E | 	byte	"then"
24f44     00          | 	byte	0
24f45                 | LR__4249
24f45     62 65 65 70 | 	byte	"beep"
24f49     00          | 	byte	0
24f4a                 | LR__4250
24f4a     64 69 72    | 	byte	"dir"
24f4d     00          | 	byte	0
24f4e                 | LR__4251
24f4e     66 6F 72    | 	byte	"for"
24f51     00          | 	byte	0
24f52                 | LR__4252
24f52     6E 65 78 74 | 	byte	"next"
24f56     00          | 	byte	0
24f57                 | LR__4253
24f57     70 61 70 65 
24f5b     72          | 	byte	"paper"
24f5c     00          | 	byte	0
24f5d                 | LR__4254
24f5d     69 6E 6B    | 	byte	"ink"
24f60     00          | 	byte	0
24f61                 | LR__4255
24f61     66 6F 6E 74 | 	byte	"font"
24f65     00          | 	byte	0
24f66                 | LR__4256
24f66     6D 6F 64 65 | 	byte	"mode"
24f6a     00          | 	byte	0
24f6b                 | LR__4257
24f6b     6D 6F 75 73 
24f6f     65          | 	byte	"mouse"
24f70     00          | 	byte	0
24f71                 | LR__4258
24f71     63 75 72 73 
24f75     6F 72       | 	byte	"cursor"
24f77     00          | 	byte	0
24f78                 | LR__4259
24f78     63 6C 69 63 
24f7c     6B          | 	byte	"click"
24f7d     00          | 	byte	0
24f7e                 | LR__4260
24f7e     64 65 66 73 
24f82     70 72 69 74 
24f86     65          | 	byte	"defsprite"
24f87     00          | 	byte	0
24f88                 | LR__4261
24f88     73 70 72 69 
24f8c     74 65       | 	byte	"sprite"
24f8e     00          | 	byte	0
24f8f                 | LR__4262
24f8f     77 61 69 74 
24f93     63 6C 6F 63 
24f97     6B          | 	byte	"waitclock"
24f98     00          | 	byte	0
24f99                 | LR__4263
24f99     66 69 6C 6C | 	byte	"fill"
24f9d     00          | 	byte	0
24f9e                 | LR__4264
24f9e     64 69 6D    | 	byte	"dim"
24fa1     00          | 	byte	0
24fa2                 | LR__4265
24fa2     64 65 66 73 
24fa6     6E 64       | 	byte	"defsnd"
24fa8     00          | 	byte	0
24fa9                 | LR__4266
24fa9     64 65 66 65 
24fad     6E 76       | 	byte	"defenv"
24faf     00          | 	byte	0
24fb0                 | LR__4267
24fb0     70 6C 61 79 | 	byte	"play"
24fb4     00          | 	byte	0
24fb5                 | LR__4268
24fb5     72 6E 64    | 	byte	"rnd"
24fb8     00          | 	byte	0
24fb9                 | LR__4269
24fb9     6D 6F 75 73 
24fbd     65 78       | 	byte	"mousex"
24fbf     00          | 	byte	0
24fc0                 | LR__4270
24fc0     6D 6F 75 73 
24fc4     65 79       | 	byte	"mousey"
24fc6     00          | 	byte	0
24fc7                 | LR__4271
24fc7     6D 6F 75 73 
24fcb     65 6B       | 	byte	"mousek"
24fcd     00          | 	byte	0
24fce                 | LR__4272
24fce     6D 6F 75 73 
24fd2     65 77       | 	byte	"mousew"
24fd4     00          | 	byte	0
24fd5                 | LR__4273
24fd5     67 65 74 74 
24fd9     69 6D 65    | 	byte	"gettime"
24fdc     00          | 	byte	0
24fdd                 | LR__4274
24fdd     73 69 6E    | 	byte	"sin"
24fe0     00          | 	byte	0
24fe1                 | LR__4275
24fe1     73 74 69 63 
24fe5     6B          | 	byte	"stick"
24fe6     00          | 	byte	0
24fe7                 | LR__4276
24fe7     73 74 72 69 
24feb     67          | 	byte	"strig"
24fec     00          | 	byte	0
24fed                 | LR__4277
24fed     67 65 74 70 
24ff1     69 78 65 6C | 	byte	"getpixel"
24ff5     00          | 	byte	0
24ff6                 | LR__4278
24ff6     61          | 	byte	"a"
24ff7     00          | 	byte	0
24ff8                 | LR__4279
24ff8     7A          | 	byte	"z"
24ff9     00          | 	byte	0
24ffa                 | LR__4280
24ffa     5F          | 	byte	"_"
24ffb     00          | 	byte	0
24ffc                 | LR__4281
24ffc     61          | 	byte	"a"
24ffd     00          | 	byte	0
24ffe                 | LR__4282
24ffe     7A          | 	byte	"z"
24fff     00          | 	byte	0
25000                 | LR__4283
25000     30          | 	byte	"0"
25001     00          | 	byte	0
25002                 | LR__4284
25002     39          | 	byte	"9"
25003     00          | 	byte	0
25004                 | LR__4285
25004     5F          | 	byte	"_"
25005     00          | 	byte	0
25006                 | LR__4286
25006     2E          | 	byte	"."
25007     00          | 	byte	0
25008                 | LR__4287
25008     61          | 	byte	"a"
25009     00          | 	byte	0
2500a                 | LR__4288
2500a     7A          | 	byte	"z"
2500b     00          | 	byte	0
2500c                 | LR__4289
2500c     30          | 	byte	"0"
2500d     00          | 	byte	0
2500e                 | LR__4290
2500e     39          | 	byte	"9"
2500f     00          | 	byte	0
25010                 | LR__4291
25010     5F          | 	byte	"_"
25011     00          | 	byte	0
25012                 | LR__4292
25012     24          | 	byte	"$"
25013     00          | 	byte	0
25014                 | LR__4293
25014     25          | 	byte	"%"
25015     00          | 	byte	0
25016                 | LR__4294
25016     21          | 	byte	"!"
25017     00          | 	byte	0
25018                 | LR__4295
25018     30          | 	byte	"0"
25019     00          | 	byte	0
2501a                 | LR__4296
2501a     39          | 	byte	"9"
2501b     00          | 	byte	0
2501c                 | LR__4297
2501c     2E          | 	byte	"."
2501d     00          | 	byte	0
2501e                 | LR__4298
2501e     24          | 	byte	"$"
2501f     00          | 	byte	0
25020                 | LR__4299
25020     25          | 	byte	"%"
25021     00          | 	byte	0
25022                 | LR__4300
25022     2D          | 	byte	"-"
25023     00          | 	byte	0
25024                 | LR__4301
25024     2E          | 	byte	"."
25025     00          | 	byte	0
25026                 | LR__4302
25026     30          | 	byte	"0"
25027     00          | 	byte	0
25028                 | LR__4303
25028     39          | 	byte	"9"
25029     00          | 	byte	0
2502a                 | LR__4304
2502a     5F          | 	byte	"_"
2502b     00          | 	byte	0
2502c                 | LR__4305
2502c     2E          | 	byte	"."
2502d     00          | 	byte	0
2502e                 | LR__4306
2502e     45          | 	byte	"E"
2502f     00          | 	byte	0
25030                 | LR__4307
25030     65          | 	byte	"e"
25031     00          | 	byte	0
25032                 | LR__4308
25032     2D          | 	byte	"-"
25033     00          | 	byte	0
25034                 | LR__4309
25034     2D          | 	byte	"-"
25035     00          | 	byte	0
25036                 | LR__4310
25036     65          | 	byte	"e"
25037     00          | 	byte	0
25038                 | LR__4311
25038     2E          | 	byte	"."
25039     00          | 	byte	0
2503a                 | LR__4312
2503a     45          | 	byte	"E"
2503b     00          | 	byte	0
2503c                 | LR__4313
2503c     65          | 	byte	"e"
2503d     00          | 	byte	0
2503e                 | LR__4314
2503e     30          | 	byte	"0"
2503f     00          | 	byte	0
25040                 | LR__4315
25040     39          | 	byte	"9"
25041     00          | 	byte	0
25042                 | LR__4316
25042     24          | 	byte	"$"
25043     00          | 	byte	0
25044                 | LR__4317
25044     25          | 	byte	"%"
25045     00          | 	byte	0
25046                 | LR__4318
25046     2D          | 	byte	"-"
25047     00          | 	byte	0
25048                 | LR__4319
25048     30          | 	byte	"0"
25049     00          | 	byte	0
2504a                 | LR__4320
2504a     39          | 	byte	"9"
2504b     00          | 	byte	0
2504c                 | LR__4321
2504c     5F          | 	byte	"_"
2504d     00          | 	byte	0
2504e                 | LR__4322
2504e     30          | 	byte	"0"
2504f     00          | 	byte	0
25050                 | LR__4323
25050     39          | 	byte	"9"
25051     00          | 	byte	0
25052                 | LR__4324
25052     5F          | 	byte	"_"
25053     00          | 	byte	0
25054                 | LR__4325
25054     22          | 	byte	34
25055     00          | 	byte	0
25056                 | LR__4326
25056     22          | 	byte	34
25057     00          | 	byte	0
25058                 | LR__4327
25058     49 6E 20 63 
2505c     6F 6D 70 69 
25060     6C 65 5F 69 
25064     6D 6D 65 64 
25068     69 61 74 65 
2506c     3A          | 	byte	"In compile_immediate:"
2506d     00          | 	byte	0
2506e                 | LR__4328
2506e     20          | 	byte	" "
2506f     00          | 	byte	0
25070                 | LR__4329
25070     28          | 	byte	"("
25071     00          | 	byte	0
25072                 | LR__4330
25072     61 73       | 	byte	"as"
25074     00          | 	byte	0
25075                 | LR__4331
25075     61 73       | 	byte	"as"
25077     00          | 	byte	0
25078                 | LR__4332
25078     2C          | 	byte	","
25079     00          | 	byte	0
2507a                 | LR__4333
2507a     29          | 	byte	")"
2507b     00          | 	byte	0
2507c                 | LR__4334
2507c     29          | 	byte	")"
2507d     00          | 	byte	0
2507e                 | LR__4335
2507e     61 73       | 	byte	"as"
25080     00          | 	byte	0
25081                 | LR__4336
25081     62 79 74 65 | 	byte	"byte"
25085     00          | 	byte	0
25086                 | LR__4337
25086     75 62 79 74 
2508a     65          | 	byte	"ubyte"
2508b     00          | 	byte	0
2508c                 | LR__4338
2508c     73 68 6F 72 
25090     74          | 	byte	"short"
25091     00          | 	byte	0
25092                 | LR__4339
25092     75 73 68 6F 
25096     72 74       | 	byte	"ushort"
25098     00          | 	byte	0
25099                 | LR__4340
25099     6C 6F 6E 67 | 	byte	"long"
2509d     00          | 	byte	0
2509e                 | LR__4341
2509e     69 6E 74 65 
250a2     67 65 72    | 	byte	"integer"
250a5     00          | 	byte	0
250a6                 | LR__4342
250a6     75 6C 6F 6E 
250aa     67          | 	byte	"ulong"
250ab     00          | 	byte	0
250ac                 | LR__4343
250ac     69 6E 74 36 
250b0     34          | 	byte	"int64"
250b1     00          | 	byte	0
250b2                 | LR__4344
250b2     75 69 6E 74 
250b6     36 34       | 	byte	"uint64"
250b8     00          | 	byte	0
250b9                 | LR__4345
250b9     73 69 6E 67 
250bd     6C 65       | 	byte	"single"
250bf     00          | 	byte	0
250c0                 | LR__4346
250c0     64 6F 75 62 
250c4     6C 65       | 	byte	"double"
250c6     00          | 	byte	0
250c7                 | LR__4347
250c7     73 74 72 69 
250cb     6E 67       | 	byte	"string"
250cd     00          | 	byte	0
250ce                 | LR__4348
250ce     74 6F       | 	byte	"to"
250d0     00          | 	byte	0
250d1                 | LR__4349
250d1     73 74 65 70 | 	byte	"step"
250d5     00          | 	byte	0
250d6                 | LR__4350
250d6     57 65 20 68 
250da     61 76 65 20 
250de     61 20 73 6C 
250e2     6F 77 20 67 
250e6     6F 74 6F 2C 
250ea     20 74 6F 64 
250ee     6F 20 20    | 	byte	"We have a slow goto, todo  "
250f1     00          | 	byte	0
250f2                 | LR__4351
250f2     6E 6F 6E 61 
250f6     6D 65 2E 62 
250fa     61 73       | 	byte	"noname.bas"
250fc     00          | 	byte	0
250fd                 | LR__4352
250fd                 | 	byte	
250fd     00          | 	byte	0
250fe                 | LR__4353
250fe     6E 6F 6E 61 
25102     6D 65 2E 62 
25106     61 73       | 	byte	"noname.bas"
25108     00          | 	byte	0
25109                 | LR__4354
25109     2F          | 	byte	"/"
2510a     00          | 	byte	0
2510b                 | LR__4355
2510b                 | 	byte	
2510b     00          | 	byte	0
2510c                 | LR__4356
2510c                 | 	byte	
2510c     00          | 	byte	0
2510d                 | LR__4357
2510d     6E 6F 6E 61 
25111     6D 65 2E 62 
25115     61 73       | 	byte	"noname.bas"
25117     00          | 	byte	0
25118                 | LR__4358
25118     2F          | 	byte	"/"
25119     00          | 	byte	0
2511a                 | LR__4359
2511a     53 79 73 74 
2511e     65 6D 20 65 
25122     72 72 6F 72 
25126     20          | 	byte	"System error "
25127     00          | 	byte	0
25128                 | LR__4360
25128     3A 20       | 	byte	": "
2512a     00          | 	byte	0
2512b                 | LR__4361
2512b     2F          | 	byte	"/"
2512c     00          | 	byte	0
2512d                 | LR__4362
2512d     30          | 	byte	"0"
2512e     00          | 	byte	0
2512f                 | LR__4363
2512f     39          | 	byte	"9"
25130     00          | 	byte	0
25131                 | LR__4364
25131                 | 	byte	
25131     00          | 	byte	0
25132                 | LR__4365
25132     53 74 6F 70 
25136     70 65 64 20 
2513a     61 74 20 6C 
2513e     69 6E 65 20 | 	byte	"Stopped at line "
25142     00          | 	byte	0
25143                 | LR__4366
25143                 | 	byte	
25143     00          | 	byte	0
25144                 | LR__4367
25144                 | 	byte	
25144     00          | 	byte	0
25145                 | LR__4368
25145     2F 73 64 2F 
25149     6D 65 64 69 
2514d     61 2F 73 2F | 	byte	"/sd/media/s/"
25151     00          | 	byte	0
25152                 | LR__4369
25152     53 79 73 74 
25156     65 6D 20 65 
2515a     72 72 6F 72 
2515e     20          | 	byte	"System error "
2515f     00          | 	byte	0
25160                 | LR__4370
25160     3A 20       | 	byte	": "
25162     00          | 	byte	0
25163                 | LR__4371
25163     45 72 72 6F 
25167     72 20       | 	byte	"Error "
25169     00          | 	byte	0
2516a                 | LR__4372
2516a     3A 20       | 	byte	": "
2516c     00          | 	byte	0
2516d                 | LR__4373
2516d                 | 	byte	
2516d     00          | 	byte	0
2516e                 | LR__4374
2516e     72 6E 64 3A 
25172     20          | 	byte	"rnd: "
25173     00          | 	byte	0
25174                 | LR__4375
25174     72 6E 64 3A 
25178     20          | 	byte	"rnd: "
25179     00          | 	byte	0
2517a                 | LR__4376
2517a     73 69 6E 3A 
2517e     20          | 	byte	"sin: "
2517f     00          | 	byte	0
25180                 | LR__4377
25180     73 69 6E 3A 
25184     20          | 	byte	"sin: "
25185     00          | 	byte	0
25186                 | LR__4378
25186     73 74 69 63 
2518a     6B 3A 20    | 	byte	"stick: "
2518d     00          | 	byte	0
2518e                 | LR__4379
2518e     73 74 72 69 
25192     67 3A 20    | 	byte	"strig: "
25195     00          | 	byte	0
25196                 | LR__4380
25196     67 65 74 70 
2519a     69 78 65 6C 
2519e     3A 20       | 	byte	"getpixel: "
251a0     00          | 	byte	0
251a1                 | LR__4381
251a1                 | 	byte	
251a1     00          | 	byte	0
251a2                 | LR__4382
251a2     2F 73 64 2F 
251a6     62 61 73    | 	byte	"/sd/bas"
251a9     00          | 	byte	0
251aa                 | LR__4383
251aa     57 6F 72 6B 
251ae     69 6E 67 20 
251b2     64 69 72 65 
251b6     63 74 6F 72 
251ba     79 3A 20    | 	byte	"Working directory: "
251bd     00          | 	byte	0
251be                 | LR__4384
251be     2A          | 	byte	"*"
251bf     00          | 	byte	0
251c0                 | LR__4385
251c0                 | 	byte	
251c0     00          | 	byte	0
251c1                 | LR__4386
251c1     5B 64 69 72 
251c5     5D 20       | 	byte	"[dir] "
251c7     00          | 	byte	0
251c8                 | LR__4387
251c8     2A          | 	byte	"*"
251c9     00          | 	byte	0
251ca                 | LR__4388
251ca                 | 	byte	
251ca     00          | 	byte	0
251cb                 | LR__4389
251cb     2D 2D 2D 2D 
251cf     2D 6D 6F 72 
251d3     65 2C 20 70 
251d7     72 65 73 73 
251db     20 61 6E 79 
251df     20 6B 65 79 | 	byte	"-----more, press any key"
251e3     00          | 	byte	0
251e4                 | LR__4390
251e4     20 20 20 20 
      ...             
251fc     20 20 20 20 
25200     20          | 	byte	"                             "
25201     00          | 	byte	0
25202                 | LR__4391
25202     2F          | 	byte	"/"
25203     00          | 	byte	0
25204                 | LR__4392
25204     2F 73 64 2F 
25208     62 69 6E 2F | 	byte	"/sd/bin/"
2520c     00          | 	byte	0
2520d                 | LR__4393
2520d     53 79 73 74 
25211     65 6D 20 65 
25215     72 72 6F 72 
25219     20          | 	byte	"System error "
2521a     00          | 	byte	0
2521b                 | LR__4394
2521b     3A 20       | 	byte	": "
2521d     00          | 	byte	0
2521e                 | LR__4395
2521e                 | 	byte	
2521e     00          | 	byte	0
2521f                 | LR__4396
2521f     45 78 70 65 
25223     63 74 65 64 
25227     20 6E 75 6D 
2522b     62 65 72 2C 
2522f     20 67 6F 74 
25233     20 73 6F 6D 
25237     65 74 68 69 
2523b     6E 67 20 65 
2523f     6C 73 65 2E | 	byte	"Expected number, got something else."
25243     00          | 	byte	0
25244                 | LR__4397
25244     43 61 6E 6E 
25248     6F 74 20 61 
2524c     64 64 20 61 
25250     20 6E 75 6D 
25254     62 65 72 20 
25258     74 6F 20 61 
2525c     20 73 74 72 
25260     69 6E 67 2E | 	byte	"Cannot add a number to a string."
25264     00          | 	byte	0
25265                 | LR__4398
25265     43 61 6E 6E 
25269     6F 74 20 73 
2526d     75 62 73 74 
25271     72 61 63 74 
25275     20 73 74 72 
25279     69 6E 67 73 
2527d     2E          | 	byte	"Cannot substract strings."
2527e     00          | 	byte	0
2527f                 | LR__4399
2527f     55 6E 6B 6E 
25283     6F 77 6E 20 
25287     65 72 72 6F 
2528b     72 20 77 68 
2528f     69 6C 65 20 
25293     61 64 64 69 
25297     6E 67 2E    | 	byte	"Unknown error while adding."
2529a     00          | 	byte	0
2529b                 | LR__4400
2529b     55 6E 6B 6E 
2529f     6F 77 6E 20 
252a3     65 72 72 6F 
252a7     72 20 77 68 
252ab     69 6C 65 20 
252af     73 75 62 73 
252b3     74 72 61 63 
252b7     74 69 6E 67 
252bb     2E          | 	byte	"Unknown error while substracting."
252bc     00          | 	byte	0
252bd                 | LR__4401
252bd     43 61 6E 6E 
252c1     6F 74 20 64 
252c5     6F 20 6C 6F 
252c9     67 69 63 20 
252cd     6F 70 65 72 
252d1     61 74 69 6F 
252d5     6E 20 6F 6E 
252d9     20 73 74 72 
252dd     69 6E 67 20 
252e1     6F 72 20 66 
252e5     6C 6F 61 74 
252e9     2E          | 	byte	"Cannot do logic operation on string or float."
252ea     00          | 	byte	0
252eb                 | LR__4402
252eb     55 6E 6B 6E 
252ef     6F 77 6E 20 
252f3     65 72 72 6F 
252f7     72 20 77 68 
252fb     69 6C 65 20 
252ff     64 6F 69 6E 
25303     67 20 6C 6F 
25307     67 69 63 20 
2530b     6F 70 65 72 
2530f     61 74 69 6F 
25313     6E 2E       | 	byte	"Unknown error while doing logic operation."
25315     00          | 	byte	0
25316                 | LR__4403
25316     43 61 6E 6E 
2531a     6F 74 20 6D 
2531e     75 6C 74 69 
25322     70 6C 79 20 
25326     73 74 72 69 
2532a     6E 67 73 2E | 	byte	"Cannot multiply strings."
2532e     00          | 	byte	0
2532f                 | LR__4404
2532f     55 6E 6B 6E 
25333     6F 77 6E 20 
25337     65 72 72 6F 
2533b     72 20 77 68 
2533f     69 6C 65 20 
25343     6D 75 6C 74 
25347     69 70 6C 79 
2534b     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2534f     00          | 	byte	0
25350                 | LR__4405
25350     43 61 6E 6E 
25354     6F 74 20 64 
25358     69 76 69 64 
2535c     65 20 73 74 
25360     72 69 6E 67 
25364     73 2E       | 	byte	"Cannot divide strings."
25366     00          | 	byte	0
25367                 | LR__4406
25367     55 6E 6B 6E 
2536b     6F 77 6E 20 
2536f     65 72 72 6F 
25373     72 20 77 68 
25377     69 6C 65 20 
2537b     64 69 76 69 
2537f     64 69 6E 67 
25383     2E          | 	byte	"Unknown error while dividing."
25384     00          | 	byte	0
25385                 | LR__4407
25385     43 61 6E 6E 
25389     6F 74 20 63 
2538d     6F 6D 70 75 
25391     74 65 20 61 
25395     20 70 6F 77 
25399     65 72 20 6F 
2539d     66 20 61 20 
253a1     73 74 72 69 
253a5     6E 67 2E    | 	byte	"Cannot compute a power of a string."
253a8     00          | 	byte	0
253a9                 | LR__4408
253a9     55 6E 6B 6E 
253ad     6F 77 6E 20 
253b1     65 72 72 6F 
253b5     72 20 77 68 
253b9     69 6C 65 20 
253bd     63 6F 6D 70 
253c1     75 74 69 6E 
253c5     67 20 61 20 
253c9     70 6F 77 65 
253cd     72 2E       | 	byte	"Unknown error while computing a power."
253cf     00          | 	byte	0
253d0                 | LR__4409
253d0     52 69 67 68 
253d4     74 20 70 61 
253d8     72 65 6E 74 
253dc     68 65 73 69 
253e0     73 20 65 78 
253e4     70 65 63 74 
253e8     65 64 2E    | 	byte	"Right parenthesis expected."
253eb     00          | 	byte	0
253ec                 | LR__4410
253ec     45 78 70 65 
253f0     63 74 65 64 
253f4     20 73 74 72 
253f8     69 6E 67 2E | 	byte	"Expected string."
253fc     00          | 	byte	0
253fd                 | LR__4411
253fd     45 78 70 65 
25401     63 74 65 64 
25405     20 66 6C 6F 
25409     61 74 2E    | 	byte	"Expected float."
2540c     00          | 	byte	0
2540d                 | LR__4412
2540d     45 78 70 65 
25411     63 74 65 64 
25415     20 75 6E 73 
25419     69 67 6E 65 
2541d     64 20 69 6E 
25421     74 65 67 65 
25425     72 2E       | 	byte	"Expected unsigned integer."
25427     00          | 	byte	0
25428                 | LR__4413
25428     45 78 70 65 
2542c     63 74 65 64 
25430     20 69 6E 74 
25434     65 67 65 72 
25438     2E          | 	byte	"Expected integer."
25439     00          | 	byte	0
2543a                 | LR__4414
2543a     4E 6F 20 6D 
2543e     6F 72 65 20 
25442     76 61 72 69 
25446     61 62 6C 65 
2544a     20 73 6C 6F 
2544e     74 73 2E    | 	byte	"No more variable slots."
25451     00          | 	byte	0
25452                 | LR__4415
25452     56 61 72 69 
25456     61 62 6C 65 
2545a     20 6E 6F 74 
2545e     20 66 6F 75 
25462     6E 64 2E    | 	byte	"Variable not found."
25465     00          | 	byte	0
25466                 | LR__4416
25466     43 6F 6D 6D 
2546a     61 20 65 78 
2546e     70 65 63 74 
25472     65 64 2E    | 	byte	"Comma expected."
25475     00          | 	byte	0
25476                 | LR__4417
25476     43 6F 6D 6D 
2547a     61 20 6F 72 
2547e     20 73 65 6D 
25482     69 63 6F 6C 
25486     6F 6E 20 65 
2548a     78 70 65 63 
2548e     74 65 64 2E | 	byte	"Comma or semicolon expected."
25492     00          | 	byte	0
25493                 | LR__4418
25493     55 6E 6B 6E 
25497     6F 77 6E 20 
2549b     63 6F 6D 6D 
2549f     61 6E 64 2E | 	byte	"Unknown command."
254a3     00          | 	byte	0
254a4                 | LR__4419
254a4     53 74 61 63 
254a8     6B 20 75 6E 
254ac     64 65 72 66 
254b0     6C 6F 77 2E | 	byte	"Stack underflow."
254b4     00          | 	byte	0
254b5                 | LR__4420
254b5     43 61 6E 6E 
254b9     6F 74 20 65 
254bd     78 65 63 75 
254c1     74 65 20 67 
254c5     6F 74 6F 20 
254c9     69 6E 20 74 
254cd     68 65 20 69 
254d1     6D 6D 65 64 
254d5     69 61 74 65 
254d9     20 6D 6F 64 
254dd     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
254df     00          | 	byte	0
254e0                 | LR__4421
254e0     43 61 6E 6E 
254e4     6F 74 20 6C 
254e8     6F 61 64 20 
254ec     66 72 6F 6D 
254f0     20 74 68 69 
254f4     73 20 66 69 
254f8     6C 65 2E    | 	byte	"Cannot load from this file."
254fb     00          | 	byte	0
254fc                 | LR__4422
254fc     54 68 65 20 
25500     70 72 6F 67 
25504     72 61 6D 20 
25508     69 73 20 65 
2550c     6D 70 74 79 
25510     2E          | 	byte	"The program is empty."
25511     00          | 	byte	0
25512                 | LR__4423
25512     49 66 20 61 
25516     66 74 65 72 
2551a     20 69 66 2E | 	byte	"If after if."
2551e     00          | 	byte	0
2551f                 | LR__4424
2551f     45 6D 70 74 
25523     79 20 65 78 
25527     70 72 65 73 
2552b     73 69 6F 6E 
2552f     2E          | 	byte	"Empty expression."
25530     00          | 	byte	0
25531                 | LR__4425
25531     53 74 72 69 
25535     6E 67 20 65 
25539     78 70 65 63 
2553d     74 65 64 2E | 	byte	"String expected."
25541     00          | 	byte	0
25542                 | LR__4426
25542     49 6E 74 65 
25546     72 70 72 65 
2554a     74 65 72 20 
2554e     69 6E 74 65 
25552     72 6E 61 6C 
25556     20 65 72 72 
2555a     6F 72 2E    | 	byte	"Interpreter internal error."
2555d     00          | 	byte	0
2555e                 | LR__4427
2555e     45 78 70 65 
25562     63 74 65 64 
25566     20 61 73 73 
2556a     69 67 6E 2E | 	byte	"Expected assign."
2556e     00          | 	byte	0
2556f                 | LR__4428
2556f     45 78 70 65 
25573     63 74 65 64 
25577     20 27 74 6F 
2557b     27 2E       | 	byte	"Expected 'to'."
2557d     00          | 	byte	0
2557e                 | LR__4429
2557e     45 78 70 65 
25582     63 74 65 64 
25586     20 69 6E 74 
2558a     65 67 65 72 
2558e     20 76 61 72 
25592     69 61 62 6C 
25596     65 2E       | 	byte	"Expected integer variable."
25598     00          | 	byte	0
25599                 | LR__4430
25599     55 6E 69 6E 
2559d     69 74 69 61 
255a1     6C 69 7A 65 
255a5     64 20 76 61 
255a9     72 69 61 62 
255ad     6C 65 20 69 
255b1     6E 20 27 6E 
255b5     65 78 74 27 
255b9     2C 20 75 73 
255bd     65 20 27 66 
255c1     6F 72 27 20 
255c5     62 65 66 6F 
255c9     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
255cc     00          | 	byte	0
255cd                 | LR__4431
255cd     4E 6F 20 6D 
255d1     6F 72 65 20 
255d5     73 6C 6F 74 
255d9     73 20 66 6F 
255dd     72 20 27 66 
255e1     6F 72 27 2E | 	byte	"No more slots for 'for'."
255e5     00          | 	byte	0
255e6                 | LR__4432
255e6     27 4E 65 78 
255ea     74 27 20 64 
255ee     6F 65 73 6E 
255f2     27 74 20 6D 
255f6     61 74 63 68 
255fa     20 27 66 6F 
255fe     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
25601     00          | 	byte	0
25602                 | LR__4433
25602     27 47 6F 74 
25606     6F 27 20 74 
2560a     61 72 67 65 
2560e     74 20 6C 69 
25612     6E 65 20 6E 
25616     6F 74 20 66 
2561a     6F 75 6E 64 
2561e     2E          | 	byte	"'Goto' target line not found."
2561f     00          | 	byte	0
25620                 | LR__4434
25620     42 61 64 20 
25624     6E 75 6D 62 
25628     65 72 20 6F 
2562c     66 20 70 61 
25630     72 61 6D 65 
25634     74 65 72 73 | 	byte	"Bad number of parameters"
25638     00          | 	byte	0
25639                 | LR__4435
25639     46 75 6E 63 
2563d     74 69 6F 6E 
25641     20 75 6E 64 
25645     65 66 69 6E 
25649     65 64 20 66 
2564d     6F 72 20 73 
25651     74 72 69 6E 
25655     67 73       | 	byte	"Function undefined for strings"
25657     00          | 	byte	0
25658                 | LR__4436
25658     42 61 64 20 
2565c     70 61 72 61 
25660     6D 65 74 65 
25664     72 2E       | 	byte	"Bad parameter."
25666     00          | 	byte	0
25667                 | LR__4437
25667     43 61 6E 6E 
2566b     6F 74 20 64 
2566f     65 63 6C 61 
25673     72 65 20 61 
25677     6E 20 61 72 
2567b     72 61 79 3A 
2567f     20 74 68 65 
25683     20 76 61 72 
25687     69 61 62 6C 
2568b     65 20 65 78 
2568f     69 73 74 73 
25693     2E          | 	byte	"Cannot declare an array: the variable exists."
25694     00          | 	byte	0
25695                 | LR__4438
25695     45 78 70 65 
25699     63 74 65 64 
2569d     20 27 28 27 
256a1     2E          | 	byte	"Expected '('."
256a2     00          | 	byte	0
256a3                 | LR__4439
256a3     45 78 70 65 
256a7     63 74 65 64 
256ab     20 27 29 27 
256af     20 6F 72 20 
256b3     27 2C 27 2E | 	byte	"Expected ')' or ','."
256b7     00          | 	byte	0
256b8                 | LR__4440
256b8     4E 6F 20 6D 
256bc     6F 72 65 20 
256c0     74 68 61 6E 
256c4     20 33 20 64 
256c8     69 6D 65 6E 
256cc     73 69 6F 6E 
256d0     73 20 73 75 
256d4     70 70 6F 72 
256d8     74 65 64    | 	byte	"No more than 3 dimensions supported"
256db     00          | 	byte	0
256dc                 | LR__4441
256dc     56 61 72 69 
256e0     61 62 6C 65 
256e4     20 6E 61 6D 
256e8     65 20 65 78 
256ec     70 65 63 74 
256f0     65 64       | 	byte	"Variable name expected"
256f2     00          | 	byte	0
256f3                 | LR__4442
256f3     54 79 70 65 
256f7     20 6E 61 6D 
256fb     65 20 65 78 
256ff     70 65 63 74 
25703     65 64       | 	byte	"Type name expected"
25705     00          | 	byte	0
25706                 | LR__4443
25706     54 79 70 65 
2570a     20 6E 6F 74 
2570e     20 73 75 70 
25712     70 6F 72 74 
25716     65 64 20 79 
2571a     65 74       | 	byte	"Type not supported yet"
2571c     00          | 	byte	0
2571d                 | LR__4444
2571d     45 72 72 6F 
25721     72 20       | 	byte	"Error "
25723     00          | 	byte	0
25724                 | LR__4445
25724     3A 20       | 	byte	": "
25726     00          | 	byte	0
25727                 | LR__4446
25727     2F 73 64    | 	byte	"/sd"
2572a     00          | 	byte	0
2572b                 | LR__4447
2572b     2F 73 64 2F 
2572f     62 61 73    | 	byte	"/sd/bas"
25732     00          | 	byte	0
25733                 | LR__4448
25733     2F 73 64 2F 
25737     62 61 73    | 	byte	"/sd/bas"
2573a     00          | 	byte	0
2573b                 | LR__4449
2573b     20 42 41 53 
2573f     49 43 20 62 
25743     79 74 65 73 
25747     20 66 72 65 
2574b     65          | 	byte	" BASIC bytes free"
2574c     00          | 	byte	0
2574d                 | LR__4450
2574d     52 65 61 64 
25751     79          | 	byte	"Ready"
25752     00          | 	byte	0
25753                 | LR__4451
25753     20          | 	byte	" "
25754     00          | 	byte	0
25755                 | LR__4452
25755     20          | 	byte	" "
25756     00          | 	byte	0
25757                 | LR__4453
25757                 | 	byte	
25757     00          | 	byte	0
25758                 | LR__4454
25758                 | 	byte	
25758     00          | 	byte	0
25759     00 00 00    | 	alignl
2575c                 | _dat_
2575c     00 00 00 00 
25760     00 00 00 00 
25764     00 00 00 00 
25768     00 00 00 00 | 	byte	$00[16]
2576c     61 41 17 0E 
25770     62 42 00 00 
25774     63 43 19 10 
25778     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2577c     65 45 18 0F 
25780     66 46 00 00 
25784     67 47 00 00 
25788     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2578c     69 49 00 00 
25790     6A 4A 00 00 
25794     6B 4B 00 00 
25798     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2579c     6D 4D 00 00 
257a0     6E 4E 1A 11 
257a4     6F 4F 1E 15 
257a8     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
257ac     71 51 00 00 
257b0     72 52 00 00 
257b4     73 53 1B 12 
257b8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
257bc     75 55 00 00 
257c0     76 56 00 00 
257c4     77 57 00 00 
257c8     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
257cc     79 59 00 00 
257d0     7A 5A 1D 14 
257d4     31 21 04 00 
257d8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
257dc     33 23 06 00 
257e0     34 24 07 00 
257e4     35 25 08 00 
257e8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
257ec     37 26 0A 00 
257f0     38 2A 0B 00 
257f4     39 28 0C 00 
257f8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
257fc     8D 8D 00 00 
25800     9B 9B 00 00 
25804     88 88 00 00 
25808     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2580c     20 20 00 00 
25810     2D 5F 00 00 
25814     3D 2B 00 00 
25818     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2581c     5D 7D 00 00 
25820     5C 7C 00 00 
25824     23 7E 00 00 
25828     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2582c     27 22 00 00 
25830     60 7E 03 00 
25834     2C 3C 00 00 
25838     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2583c     2F 3F 00 00 
25840     B9 B9 00 00 
25844     BA 00 00 00 
25848     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2584c     BC 00 00 00 
25850     BD 00 00 00 
25854     BE 00 00 00 
25858     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2585c     C0 00 00 00 
25860     C1 00 00 00 
25864     C2 00 00 00 
25868     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2586c     C4 00 00 00 
25870     C5 00 00 00 
25874     C6 00 00 00 
25878     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2587c     C8 00 00 00 
25880     C9 00 00 00 
25884     CA 00 00 00 
25888     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2588c     7F 7F 00 00 
25890     CC 00 00 00 
25894     CD 00 00 00 
25898     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2589c     CF 00 00 00 
258a0     D0 00 00 00 
258a4     D1 00 00 00 
258a8     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
258ac     2F 2F 00 00 
258b0     2A 2A 00 00 
258b4     2D 2D 00 00 
258b8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
258bc     8D 8D 00 00 
258c0     31 31 00 00 
258c4     32 32 00 00 
258c8     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
258cc     34 34 00 00 
258d0     35 35 00 00 
258d4     36 36 00 00 
258d8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
258dc     38 38 00 00 
258e0     39 39 00 00 
258e4     30 30 00 00 
258e8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
258ec     5C 7C 00 00 
258f0     00 00 00 00 
258f4     00 00 00 00 
258f8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
258fc     00 00 00 00 
      ...             
25954     00 00 00 00 
25958     00 00 00 00 | 	byte	$00[96]
2595c     2B 00 A6 F2 
25960     24 A7 09 80 
25964     5B 88 4D 89 
25968     80 88 A5 88 | atari_spl file "atari.spl"
2596c     6D 88 B8 88 
25970     80 88 CB 88 
25974     92 88 A5 88 
25978     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2597c     A5 88 CA 88 
25980     A6 88 DD 88 
25984     B8 88 AB 89 
25988     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2598c     C8 AD C6 F1 
25990     91 06 B6 FF 
25994     13 00 4A 00 
25998     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2599c     5D 00 5E 00 
259a0     5D 00 5E 00 
259a4     5E 00 5D 00 
259a8     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
259ac     38 00 83 00 
259b0     25 00 83 00 
259b4     C3 FE D1 04 
259b8     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
259bc     48 88 38 85 
259c0     41 8A CB 88 
259c4     28 89 B8 88 
259c8     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
259cc     15 89 03 89 
259d0     02 89 15 89 
259d4     16 89 15 89 
259d8     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
259dc     15 89 3A 89 
259e0     72 89 E3 89 
259e4     52 83 AD 97 
259e8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
259ec     0C 02 B6 FF 
259f0     E1 00 A8 00 
259f4     F3 00 A8 00 
259f8     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
259fc     CE 00 CD 00 
25a00     CD 00 BA 00 
25a04     E1 00 BB 00 
25a08     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
25a0c     DF 00 C9 FF 
25a10     E6 01 B6 06 
25a14     EE DD 8D 98 
25a18     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
25a1c     97 89 73 89 
25a20     3B 89 60 89 
25a24     60 89 60 89 
25a28     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
25a2c     73 89 72 89 
25a30     85 89 73 89 
25a34     AA 89 60 89 
25a38     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
25a3c     E8 8A 18 86 
25a40     92 88 A5 C2 
25a44     E0 00 C3 05 
25a48     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
25a4c     F2 00 64 01 
25a50     06 01 3E 01 
25a54     2B 01 2B 01 
25a58     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
25a5c     2B 01 2A 01 
25a60     2B 01 2B 01 
25a64     2B 01 18 01 
25a68     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
25a6c     39 07 61 F3 
25a70     C0 AF 37 85 
25a74     0F 88 8B 8A 
25a78     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
25a7c     AB 89 D0 89 
25a80     AB 89 D0 89 
25a84     D0 89 CF 89 
25a88     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
25a8c     D0 89 F5 89 
25a90     BD 89 08 8A 
25a94     CF 89 E8 8A 
25a98     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
25a9c     53 B3 0D F8 
25aa0     F4 07 38 00 
25aa4     63 01 63 01 
25aa8     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
25aac     88 01 88 01 
25ab0     76 01 88 01 
25ab4     88 01 89 01 
25ab8     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
25abc     75 01 AE 01 
25ac0     76 01 88 01 
25ac4     4A 00 46 06 
25ac8     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
25acc     08 8A 9A 86 
25ad0     33 8B 08 8A 
25ad4     2D 8A F5 89 
25ad8     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
25adc     2D 8A 2D 8A 
25ae0     2E 8A 1B 8A 
25ae4     40 8A 2D 8A 
25ae8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
25aec     2E 8A 79 8A 
25af0     66 8A C8 8B 
25af4     72 82 2B 97 
25af8     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
25afc     1D 02 05 01 
25b00     F8 01 C0 01 
25b04     0B 02 C0 01 
25b08     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
25b0c     F9 01 D3 01 
25b10     F8 01 D3 01 
25b14     F8 01 D2 01 
25b18     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
25b1c     E6 01 2B 01 
25b20     8E 02 5F 07 
25b24     F7 E2 ED 9C 
25b28     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
25b2c     E8 8A 78 8A 
25b30     78 8A 65 8A 
25b34     8B 8A 78 8A 
25b38     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
25b3c     8B 8A 9D 8A 
25b40     9D 8A 8B 8A 
25b44     C2 8A 78 8A 
25b48     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
25b4c     70 8C 18 86 
25b50     8B 8A 23 C9 
25b54     CB 03 C4 05 
25b58     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
25b5c     0B 02 7B 02 
25b60     1E 02 55 02 
25b64     30 02 43 02 
25b68     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
25b6c     43 02 44 02 
25b70     43 02 30 02 
25b74     68 02 31 02 
25b78     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
25b7c     07 08 3F F7 
25b80     73 B2 13 85 
25b84     15 89 ED 8B 
25b88     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
25b8c     B0 8A FB 8A 
25b90     D5 8A FA 8A 
25b94     E8 8A FB 8A 
25b98     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
25b9c     E8 8A 21 8B 
25ba0     E7 8A 33 8B 
25ba4     E8 8A 26 8C 
25ba8     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
25bac     8D B0 27 F6 
25bb0     9C 08 AD 01 
25bb4     7B 02 8D 02 
25bb8     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
25bbc     A1 02 A0 02 
25bc0     A1 02 A0 02 
25bc4     A0 02 A0 02 
25bc8     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
25bcc     7B 02 D8 02 
25bd0     7B 02 C6 02 
25bd4     3E 01 C3 05 
25bd8     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
25bdc     00 8C 2A 86 
25be0     E0 8C FA 8A 
25be4     6A 8B FB 8A 
25be8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
25bec     45 8B 45 8B 
25bf0     45 8B 6B 8B 
25bf4     46 8B 59 8B 
25bf8     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
25bfc     6B 8B 6B 8B 
25c00     6B 8B 6B 8B 
25c04     7D 8B 7D 8B 
25c08     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
25c0c     90 8B 91 8B 
25c10     90 8B 90 8B 
25c14     A3 8B A3 8B 
25c18     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
25c1c     B5 8B B6 8B 
25c20     B5 8B B5 8B 
25c24     B6 8B C8 8B 
25c28     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
25c2c     C8 8B DA 8B 
25c30     DB 8B DB 8B 
25c34     DB 8B DC 8B 
25c38     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
25c3c     EE 8B EE 8B 
25c40     00 8C 01 8C 
25c44     00 8C 01 8C 
25c48     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
25c4c     12 8C 13 8C 
25c50     13 8C 26 8C 
25c54     26 8C 26 8C 
25c58     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
25c5c     38 8C 38 8C 
25c60     38 8C 38 8C 
25c64     4B 8C 4B 8C 
25c68     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
25c6c     5E 8C 5E 8C 
25c70     5E 8C 5E 8C 
25c74     70 8C 70 8C 
25c78     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
25c7c     70 8C 83 8C 
25c80     83 8C 83 8C 
25c84     83 8C 96 8C 
25c88     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
25c8c     95 8C A9 8C 
25c90     A9 8C A8 8C 
25c94     A8 8C A8 8C 
25c98     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
25c9c     BB 8C BB 8C 
25ca0     BB 8C CE 8C 
25ca4     CE 8C CE 8C 
25ca8     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
25cac     E0 8C E1 8C 
25cb0     E1 8C E0 8C 
25cb4     F4 8C F2 8C 
25cb8     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
25cbc     05 8D 05 8D 
25cc0     06 8D 06 8D 
25cc4     19 8D 19 8D 
25cc8     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
25ccc     18 8D 2B 8D 
25cd0     2B 8D 2B 8D 
25cd4     2A 8D 3E 8D 
25cd8     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
25cdc     3E 8D 51 8D 
25ce0     50 8D 50 8D 
25ce4     50 8D 51 8D 
25ce8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
25cec     63 8D 64 8D 
25cf0     76 8D 75 8D 
25cf4     75 8D 76 8D 
25cf8     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
25cfc     88 8D 88 8D 
25d00     89 8D 9B 8D 
25d04     9A 8D 9B 8D 
25d08     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
25d0c     AD 8D AE 8D 
25d10     AD 8D AE 8D 
25d14     C1 8D C1 8D 
25d18     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
25d1c     D3 8D D3 8D 
25d20     D3 8D D3 8D 
25d24     D3 8D E6 8D 
25d28     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
25d2c     E6 8D E6 8D 
25d30     F9 8D F9 8D 
25d34     F9 8D F8 8D 
25d38     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
25d3c     0B 8E 0B 8E 
25d40     1D 8E 1D 8E 
25d44     1E 8E 1E 8E 
25d48     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
25d4c     31 8E 31 8E 
25d50     31 8E 42 8E 
25d54     43 8E 43 8E 
25d58     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
25d5c     56 8E 56 8E 
25d60     55 8E 56 8E 
25d64     68 8E 69 8E 
25d68     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
25d6c     69 8E 7B 8E 
25d70     7C 8E 7B 8E 
25d74     7B 8E 8D 8E 
25d78     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
25d7c     8D 8E A1 8E 
25d80     A0 8E A1 8E 
25d84     A1 8E A0 8E 
25d88     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
25d8c     B3 8E B3 8E 
25d90     C6 8E C5 8E 
25d94     C6 8E C6 8E 
25d98     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
25d9c     D8 8E D9 8E 
25da0     D8 8E EC 8E 
25da4     EB 8E EC 8E 
25da8     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
25dac     FE 8E FE 8E 
25db0     FE 8E FE 8E 
25db4     10 8F 10 8F 
25db8     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
25dbc     11 8F 23 8F 
25dc0     24 8F 23 8F 
25dc4     24 8F 37 8F 
25dc8     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
25dcc     36 8F 36 8F 
25dd0     48 8F 49 8F 
25dd4     49 8F 49 8F 
25dd8     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
25ddc     5B 8F 5C 8F 
25de0     5B 8F 6E 8F 
25de4     6E 8F 6E 8F 
25de8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
25dec     81 8F 81 8F 
25df0     81 8F 81 8F 
25df4     93 8F 93 8F 
25df8     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
25dfc     93 8F A6 8F 
25e00     A6 8F A6 8F 
25e04     A6 8F B9 8F 
25e08     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
25e0c     B9 8F B9 8F 
25e10     CC 8F CB 8F 
25e14     CB 8F CC 8F 
25e18     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
25e1c     DF 8F DE 8F 
25e20     DE 8F F1 8F 
25e24     F1 8F F1 8F 
25e28     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
25e2c     03 90 04 90 
25e30     04 90 04 90 
25e34     16 90 17 90 
25e38     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
25e3c     29 90 28 90 
25e40     29 90 28 90 
25e44     29 90 3C 90 
25e48     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
25e4c     3C 90 4F 90 
25e50     4E 90 4E 90 
25e54     4E 90 4E 90 
25e58     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
25e5c     61 90 61 90 
25e60     73 90 74 90 
25e64     74 90 74 90 
25e68     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
25e6c     87 90 86 90 
25e70     87 90 86 90 
25e74     99 90 99 90 
25e78     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
25e7c     AB 90 AB 90 
25e80     AC 90 AB 90 
25e84     AB 90 BF 90 
25e88     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
25e8c     BE 90 D1 90 
25e90     D0 90 D1 90 
25e94     D1 90 D1 90 
25e98     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
25e9c     E3 90 E4 90 
25ea0     F6 90 F6 90 
25ea4     F6 90 F6 90 
25ea8     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
25eac     09 91 0A 91 
25eb0     0A 91 1C 91 
25eb4     1C 91 1C 91 
25eb8     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
25ebc     2F 91 2E 91 
25ec0     2F 91 2F 91 
25ec4     2E 91 41 91 
25ec8     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
25ecc     41 91 53 91 
25ed0     54 91 54 91 
25ed4     53 91 54 91 
25ed8     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
25edc     67 91 67 91 
25ee0     79 91 7A 91 
25ee4     79 91 78 91 
25ee8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
25eec     8C 91 8B 91 
25ef0     8C 91 8C 91 
25ef4     9E 91 9E 91 
25ef8     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
25efc     B1 91 B1 91 
25f00     B2 91 B1 91 
25f04     B1 91 C4 91 
25f08     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
25f0c     C4 91 D6 91 
25f10     D7 91 D7 91 
25f14     D7 91 D6 91 
25f18     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
25f1c     EA 91 EA 91 
25f20     EA 91 FC 91 
25f24     FC 91 FB 91 
25f28     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
25f2c     0E 92 0F 92 
25f30     0F 92 0E 92 
25f34     21 92 21 92 
25f38     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
25f3c     21 92 34 92 
25f40     33 92 34 92 
25f44     34 92 47 92 
25f48     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
25f4c     46 92 47 92 
25f50     59 92 59 92 
25f54     59 92 59 92 
25f58     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
25f5c     6C 92 6C 92 
25f60     6B 92 7E 92 
25f64     7E 92 7E 92 
25f68     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
25f6c     92 92 91 92 
25f70     91 92 90 92 
25f74     91 92 A4 92 
25f78     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
25f7c     A3 92 B6 92 
25f80     B6 92 B7 92 
25f84     B7 92 B6 92 
25f88     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
25f8c     CA 92 C9 92 
25f90     CA 92 DC 92 
25f94     DC 92 DC 92 
25f98     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
25f9c     EF 92 EF 92 
25fa0     EF 92 EF 92 
25fa4     01 93 01 93 
25fa8     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
25fac     15 93 14 93 
25fb0     14 93 14 93 
25fb4     14 93 27 93 
25fb8     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
25fbc     27 93 39 93 
25fc0     3A 93 39 93 
25fc4     39 93 39 93 
25fc8     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
25fcc     4B 93 4C 93 
25fd0     5F 93 5F 93 
25fd4     5F 93 5E 93 
25fd8     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
25fdc     5F 93 84 93 
25fe0     4C 93 96 93 
25fe4     5F 93 AE 94 
25fe8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
25fec     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
25ff0     7A D7 00 80 
25ff4     87 8A 48 8F 
25ff8     EC 8C 76 8D 
25ffc     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
26000     3C 8D 82 8D 
26004     42 8D 88 8D 
26008     8C 8D 8E 8D 
2600c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
26010     97 8D DE 8D 
26014     E1 8D F1 8E 
26018     D8 8C A3 83 
2601c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
26020     65 71 C9 65 
26024     FC 64 C4 65 
26028     C1 65 BF 65 
2602c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
26030     B6 65 B4 65 
26034     B2 65 AE 65 
26038     AC 65 ED 65 
2603c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
26040     5E 65 25 66 
26044     FA 62 23 6B 
26048     B5 6C 61 0A 
2604c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
26050     5D 90 BE 8D 
26054     47 8E C3 8D 
26058     09 8E C9 8D 
2605c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
26060     15 8E 19 8E 
26064     1B 8E 62 8E 
26068     64 8E 68 8E 
2606c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
26070     B5 8E 4C 90 
26074     FA 84 3C 9D 
26078     98 13 79 6D 
2607c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
26080     D9 66 50 66 
26084     D4 66 4B 66 
26088     8C 66 46 66 
2608c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
26090     81 66 3A 66 
26094     7C 66 36 66 
26098     76 66 30 66 
2609c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
260a0     6B 66 88 72 
260a4     BF 37 E7 B7 
260a8     75 83 8B 8E 
260ac     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
260b0     94 8E 96 8E 
260b4     DD 8E 9C 8E 
260b8     E2 8E A2 8E 
260bc     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
260c0     EE 8E AE 8E 
260c4     38 8F B5 8E 
260c8     3F 8F FD 8E 
260cc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
260d0     A5 87 1E E3 
260d4     6D 5D FA 71 
260d8     41 64 25 67 
260dc     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
260e0     D9 66 1A 67 
260e4     18 67 15 67 
260e8     12 67 0F 67 
260ec     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
260f0     07 67 C0 66 
260f4     01 67 BC 66 
260f8     B8 66 DE 64 
260fc     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
26100     43 E5 1F 8B 
26104     14 8A F1 90 
26108     1C 8F 63 8F 
2610c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
26110     29 8F 6E 8F 
26114     72 8F 75 8F 
26118     34 8F BE 8F 
2611c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
26120     84 8F 87 8F 
26124     CC 8F 56 90 
26128     67 91 49 80 
2612c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
26130     46 77 A6 66 
26134     E8 66 B0 67 
26138     AD 67 ED 67 
2613c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
26140     A2 67 E3 67 
26144     9D 67 9A 67 
26148     98 67 94 67 
2614c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
26150     49 67 CD 67 
26154     28 65 5F 6E 
26158     82 67 3A 01 
2615c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
26160     C2 91 A9 8F 
26164     EF 8F AE 8F 
26168     F4 8F B5 8F 
2616c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
26170     01 90 03 90 
26174     07 90 09 90 
26178     0C 90 53 90 
2617c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
26180     18 90 44 93 
26184     85 84 D6 9D 
26188     87 1F 2F 75 
2618c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
26190     C4 68 F6 67 
26194     BE 68 F1 67 
26198     76 68 2E 68 
2619c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
261a0     27 68 24 68 
261a4     64 68 1E 68 
261a8     5F 68 19 68 
261ac     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
261b0     DC 68 56 72 
261b4     7E 36 C2 B8 
261b8     D7 84 73 90 
261bc     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
261c0     7B 90 7F 90 
261c4     82 90 84 90 
261c8     CB 90 8B 90 
261cc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
261d0     D7 90 96 90 
261d4     20 91 59 90 
261d8     25 91 A2 90 
261dc     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
261e0     D0 89 40 EE 
261e4     12 64 C4 71 
261e8     29 66 0C 69 
261ec     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
261f0     C0 68 02 69 
261f4     FE 68 FB 68 
261f8     F9 68 F6 68 
261fc     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
26200     EE 68 A8 68 
26204     2C 69 5F 68 
26208     E2 68 81 66 
2620c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
26210     1E EB A6 8A 
26214     73 8B 5E 93 
26218     7B 90 48 91 
2621c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
26220     0D 91 11 91 
26224     14 91 16 91 
26228     5C 91 1C 91 
2622c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
26230     68 91 AF 91 
26234     2A 91 B5 91 
26238     75 91 1A 94 
2623c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
26240     70 0E CB 6C 
26244     5D 6E C4 67 
26248     99 69 54 69 
2624c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
26250     D2 69 49 69 
26254     89 69 86 69 
26258     40 69 C4 69 
2625c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
26260     35 69 76 69 
26264     58 67 EB 6D 
26268     E9 6D 89 0F 
2626c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
26270     33 94 94 91 
26274     D9 91 56 91 
26278     E0 91 9F 91 
2627c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
26280     EC 91 EE 91 
26284     F1 91 F4 91 
26288     F7 91 3D 92 
2628c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
26290     46 92 21 94 
26294     11 89 A4 9D 
26298     FD 0E 8F 6C 
2629c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
262a0     28 6A E1 69 
262a4     65 6A 1F 6A 
262a8     5F 6A 1A 6A 
262ac     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
262b0     54 6A 0F 6A 
262b4     4F 6A 09 6A 
262b8     06 6A 03 6A 
262bc     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
262c0     23 68 69 77 
262c4     3A 4D 38 CA 
262c8     38 86 4E 91 
262cc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
262d0     64 92 24 92 
262d4     6A 92 2A 92 
262d8     70 92 30 92 
262dc     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
262e0     7B 92 7E 92 
262e4     C5 92 84 92 
262e8     CB 92 8A 92 
262ec     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
262f0     4D 8D F9 E2 
262f4     97 59 FE 74 
262f8     DB 68 6D 6A 
262fc     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
26300     A8 6A A5 6A 
26304     A3 6A 9F 6A 
26308     9D 6A 9B 6A 
2630c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
26310     D6 6A 8F 6A 
26314     CF 6A 46 6A 
26318     CA 6A E1 67 
2631c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
26320     D3 F7 15 92 
26324     90 8C BF 94 
26328     A6 92 EB 92 
2632c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
26330     B1 92 F7 92 
26334     FA 92 FD 92 
26338     00 93 02 93 
2633c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
26340     4F 93 52 93 
26344     54 93 22 94 
26348     5A 93 8F 88 
2634c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
26350     1C 77 07 6C 
26354     E8 69 7A 6B 
26358     34 6B 75 6B 
2635c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
26360     29 6B 26 6B 
26364     24 6B 21 6B 
26368     1D 6B 5E 6B 
2636c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
26370     12 6B 52 6B 
26374     34 69 34 6E 
26378     BA 73 A4 24 
2637c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
26380     7A 94 B3 93 
26384     72 93 31 93 
26388     78 93 7A 93 
2638c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
26390     83 93 86 93 
26394     89 93 D0 93 
26398     D2 93 D5 93 
2639c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
263a0     DD 93 40 96 
263a4     30 8B 99 9C 
263a8     52 10 94 71 
263ac     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
263b0     46 6C 79 6B 
263b4     40 6C B7 6B 
263b8     F7 6B B1 6B 
263bc     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
263c0     EC 6B A5 6B 
263c4     A2 6B 9F 6B 
263c8     9D 6B 9A 6B 
263cc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
263d0     C8 6A E4 76 
263d4     20 4B F9 CE 
263d8     2E 8A 1A 92 
263dc     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
263e0     FB 93 BA 93 
263e4     01 94 03 94 
263e8     4A 94 09 94 
263ec     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
263f0     55 94 14 94 
263f4     9E 94 1A 94 
263f8     61 94 20 94 
263fc     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
26400     3E 87 E5 CD 
26404     5F 50 6C 78 
26408     B5 6A 04 6C 
2640c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
26410     83 6C 7F 6C 
26414     7C 6C 36 6C 
26418     76 6C 74 6C 
2641c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
26420     6B 6C 25 6C 
26424     66 6C 1F 6C 
26428     1D 6C 41 6A 
2642c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
26430     BA FA FC 94 
26434     5B 8D 97 96 
26438     3B 94 C5 94 
2643c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
26440     89 94 8C 94 
26444     8F 94 92 94 
26448     94 94 DB 94 
2644c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
26450     E4 94 E7 94 
26454     2D 95 74 95 
26458     C8 96 15 89 
2645c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
26460     CB 75 31 6F 
26464     7E 6B 10 6D 
26468     C9 6C 0A 6D 
2646c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
26470     BD 6C FF 6C 
26474     FB 6C F9 6C 
26478     B2 6C F3 6C 
2647c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
26480     A7 6C E8 6C 
26484     0D 6B 85 6F 
26488     C7 74 10 28 
2648c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
26490     96 96 47 95 
26494     06 95 0A 95 
26498     0C 95 0F 95 
2649c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
264a0     17 95 5E 95 
264a4     61 95 63 95 
264a8     22 95 AC 95 
264ac     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
264b0     72 95 17 98 
264b4     59 8E 01 96 
264b8     CF FC 5A 68 
264bc     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
264c0     96 6D 50 6D 
264c4     D5 6D 4A 6D 
264c8     8C 6D 89 6D 
264cc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
264d0     80 6D 3A 6D 
264d4     7A 6D 77 6D 
264d8     75 6D 71 6D 
264dc     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
264e0     18 6C BC 78 
264e4     9A 4F 7E CF 
264e8     1F 89 F1 93 
264ec     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
264f0     D2 95 4E 95 
264f4     D7 95 53 95 
264f8     DD 95 E0 95 
264fc     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
26500     A5 95 EB 95 
26504     EE 95 F0 95 
26508     37 96 B3 95 
2650c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
26510     1A 98 D5 8D 
26514     C5 9F CD 0F 
26518     0F 71 F3 73 
2651c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
26520     D9 6D 5E 6E 
26524     D3 6D 58 6E 
26528     12 6E 0F 6E 
2652c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
26530     49 6E BF 6D 
26534     87 6E 76 6D 
26538     81 6E 11 6B 
2653c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
26540     3F 09 44 95 
26544     E5 8D 3F 99 
26548     D4 95 A2 96 
2654c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
26550     23 96 69 96 
26554     6B 96 6E 96 
26558     71 96 74 96 
2655c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
26560     BF 96 3C 96 
26564     C6 96 C8 96 
26568     A3 98 51 8D 
2656c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
26570     CF 75 29 73 
26574     90 6C EC 6E 
26578     62 6E E7 6E 
2657c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
26580     9A 6E 98 6E 
26584     95 6E 91 6E 
26588     8E 6E CF 6E 
2658c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
26590     40 6E C3 6E 
26594     E8 6C 45 6F 
26598     A5 7B C9 35 
2659c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
265a0     2D 98 23 97 
265a4     E1 96 A0 96 
265a8     A4 96 EA 96 
265ac     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
265b0     AF 96 F4 96 
265b4     F8 96 3E 97 
265b8     FD 96 43 97 
265bc     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
265c0     08 97 6B 99 
265c4     D6 92 88 91 
265c8     D8 EE 84 66 
265cc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
265d0     2E 6F E7 6E 
265d4     6C 6F 24 6F 
265d8     21 6F 1F 6F 
265dc     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
265e0     17 6F 13 6F 
265e4     54 6F 0E 6F 
265e8     0B 6F 4B 6F 
265ec     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
265f0     27 6D 1C 7B 
265f4     19 59 9F DB 
265f8     66 8E BC 94 
265fc     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
26600     67 97 26 97 
26604     6D 97 2B 97 
26608     72 97 32 97 
2660c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
26610     C1 97 7F 97 
26614     C6 97 85 97 
26618     CB 97 CE 97 
2661c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
26620     EC 8A C4 C6 
26624     68 4C F4 7D 
26628     63 6E E8 6E 
2662c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
26630     ED 6F A7 6F 
26634     E7 6F A0 6F 
26638     E1 6F 9B 6F 
2663c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
26640     D5 6F 8F 6F 
26644     CE 6F 45 6F 
26648     86 6F 68 6D 
2664c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
26650     C0 13 AD A2 
26654     A7 8E 79 99 
26658     E6 97 E8 97 
2665c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
26660     F1 97 F3 97 
26664     F6 97 F9 97 
26668     FB 97 FE 97 
2666c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
26670     4A 98 0A 98 
26674     93 98 0F 98 
26678     7F 9B BF 8C 
2667c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
26680     91 7B 62 73 
26684     1A 6E B9 70 
26688     EB 6F B3 70 
2668c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
26690     25 70 20 70 
26694     1E 70 1B 70 
26698     18 70 15 70 
2669c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
266a0     0D 70 09 70 
266a4     07 70 03 70 
266a8     01 70 FD 6F 
266ac     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
266b0     F6 6F F2 6F 
266b4     EF 6F EC 6F 
266b8     2C 70 E6 6F 
266bc     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
266c0     DD 6F 97 6F 
266c4     D7 6F 84 6E 
266c8     8F 6F 3F 7D 
266cc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
266ce     01 00 00 00 
266d2     00 00 00 00 
266d6     00 00 00 00 
266da     00 00 00 00 | mouse  file "mouse.def"
266de     00 00 00 00 
266e2     00 00 00 00 
266e6     00 00 00 00 
266ea     00 00 00 00 | 	byte	$00[16]
266ee     01 01 00 00 
266f2     00 00 00 00 
266f6     00 00 00 00 
266fa     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
266fe     00 00 00 00 
26702     00 00 00 00 
26706     00 00 00 00 
2670a     00 00 00 00 | 	byte	$00[16]
2670e     01 0D 01 00 
26712     00 00 00 00 
26716     00 00 00 00 
2671a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2671e     00 00 00 00 
26722     00 00 00 00 
26726     00 00 00 00 
2672a     00 00 00 00 | 	byte	$00[16]
2672e     01 0D 0D 01 
26732     00 00 00 00 
26736     00 00 00 00 
2673a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2673e     00 00 00 00 
26742     00 00 00 00 
26746     00 00 00 00 
2674a     00 00 00 00 | 	byte	$00[16]
2674e     01 0D 0D 0D 
26752     01 00 00 00 
26756     00 00 00 00 
2675a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2675e     00 00 00 00 
26762     00 00 00 00 
26766     00 00 00 00 
2676a     00 00 00 00 | 	byte	$00[16]
2676e     01 0D 0D 0D 
26772     0D 01 00 00 
26776     00 00 00 00 
2677a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2677e     00 00 00 00 
26782     00 00 00 00 
26786     00 00 00 00 
2678a     00 00 00 00 | 	byte	$00[16]
2678e     01 0D 0D 0D 
26792     0D 0D 01 00 
26796     00 00 00 00 
2679a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2679e     00 00 00 00 
267a2     00 00 00 00 
267a6     00 00 00 00 
267aa     00 00 00 00 | 	byte	$00[16]
267ae     01 0D 0D 0D 
267b2     0D 0D 0D 01 
267b6     00 00 00 00 
267ba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
267be     00 00 00 00 
267c2     00 00 00 00 
267c6     00 00 00 00 
267ca     00 00 00 00 | 	byte	$00[16]
267ce     01 0D 0D 0D 
267d2     0D 0D 0D 0C 
267d6     01 00 00 00 
267da     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
267de     00 00 00 00 
267e2     00 00 00 00 
267e6     00 00 00 00 
267ea     00 00 00 00 | 	byte	$00[16]
267ee     01 0D 0D 0D 
267f2     0D 0D 0D 0D 
267f6     0C 01 00 00 
267fa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
267fe     00 00 00 00 
26802     00 00 00 00 
26806     00 00 00 00 
2680a     00 00 00 00 | 	byte	$00[16]
2680e     01 0D 0D 0D 
26812     0D 0D 0D 0D 
26816     0D 0C 01 00 
2681a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2681e     00 00 00 00 
26822     00 00 00 00 
26826     00 00 00 00 
2682a     00 00 00 00 | 	byte	$00[16]
2682e     01 0D 0D 0D 
26832     0D 0D 0D 0D 
26836     0D 0D 0B 01 
2683a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2683e     00 00 00 00 
26842     00 00 00 00 
26846     00 00 00 00 
2684a     00 00 00 00 | 	byte	$00[16]
2684e     01 0D 0D 0D 
26852     0C 0D 0D 03 
26856     01 01 01 01 
2685a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2685e     00 00 00 00 
26862     00 00 00 00 
26866     00 00 00 00 
2686a     00 00 00 00 | 	byte	$00[16]
2686e     01 0D 0D 0C 
26872     01 09 0D 03 
26876     00 00 00 00 
2687a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2687e     00 00 00 00 
26882     00 00 00 00 
26886     00 00 00 00 
2688a     00 00 00 00 | 	byte	$00[16]
2688e     01 0D 0C 00 
26892     00 01 0D 0B 
26896     01 00 00 00 
2689a     00 00 00 00 | 	byte	$01, $0d, $0c, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2689e     00 00 00 00 
268a2     00 00 00 00 
268a6     00 00 00 00 
268aa     00 00 00 00 | 	byte	$00[16]
268ae     01 0C 00 00 
268b2     00 01 0A 0D 
268b6     01 00 00 00 
268ba     00 00 00 00 | 	byte	$01, $0c, $00, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
268be     00 00 00 00 
268c2     00 00 00 00 
268c6     00 00 00 00 
268ca     00 00 00 00 | 	byte	$00[16]
268ce     01 00 00 00 
268d2     00 00 01 0D 
268d6     0B 01 00 00 
268da     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
268de     00 00 00 00 
268e2     00 00 00 00 
268e6     00 00 00 00 
268ea     00 00 00 00 
268ee     00 00 00 00 
268f2     00 00       | 	byte	$00[22]
268f4     01 0B 0D 01 
268f8     00 00 00 00 
268fc     00 00 00 00 
26900     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26904     00 00 00 00 
26908     00 00 00 00 
2690c     00 00 00 00 
26910     00 00 00 00 
26914     00          | 	byte	$00[17]
26915     01 00 00 00 
26919     00 00 00 00 
2691d     00 00 00 00 
26921     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26925     00 00 00 00 
      ...             
26ac9     00 00 00 00 
26acd     00          | 	byte	$00[425]
26ace                 | 
26ace     00 00       |              	org
26ad0 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
26ad4 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
26ad8 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
26adc 003             | 
26adc 003 00 30 04 F6 |                 mov     psramaddr,#0
26ae0 004             | 
26ae0 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
26ae4 005 20 00 00 FF 
26ae8 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
26aec 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
26af0 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
26af4 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
26af8 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
26afc 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
26b00 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
26b04 00d             | 
26b04 00d 20 00 00 FF 
26b08 00e 00 30 04 F1 |                 add 	psramaddr,##16384
26b0c 00f E0 03 00 FF 
26b10 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
26b14 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
26b18 012             | 
26b18 012             |                 
26b18 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
26b1c 013             |     
26b1c 013 01 2C 60 FD |                 cogid 	t11				' get id
26b20 014 00 00 EC FC |                 coginit #0,#0				' start the new program
26b24 015 03 2C 60 FD |                 cogstop t11				' stop the loader
26b28 016             | 
26b28 016 00 00 00 00 | t11 		long 	0
26b2c 017 00 FF 07 00 | mailbox 	long 	$7FF00
26b30 018 00 00 00 00 | psramaddr 	long 	0
26b34 019 00 00 00 00 | pslockval	long 	0
26b38 01a 00 00 00 00 | cmd             long    0
26b3c 01b 00 00 00 00 | buf1            long    0
26b40 01c 00 40 00 00 | buf2            long    16384
26b44 01d 48 6B 02 00 | 	long	@@@_dat_ + 5100
26b48 01e 50 32 20 52 
26b4c 01f 65 74 72 6F 
26b50 020 6D 61 63 68 
26b54 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
26b58 022 42 41 53 49 
26b5c 023 43 20 76 65 
26b60 024 72 73 69 6F 
26b64 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
26b68 026 32 33 00 00 | 	byte	$32, $33, $00, $00
26b6c 027             | 	alignl
26b6c 027             | _hg010b_spin2_dat_
26b6c 027             | 
26b6c 027 00 00 00 00 
26b70 028 00 00 00 00 
26b74 029 00 00 00 00 
26b78 02a 00 00 00 00 
26b7c 02b 00 00 00    | vga_font       file "vgafont.def"
26b7f 02b 7E 81 A5 81 
26b83 02c 81 BD 99 81 
26b87 02d 81 7E 00 00 
26b8b 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
26b8f 02f 7E FF DB FF 
26b93 030 FF C3 E7 FF 
26b97 031 FF 7E 00 00 
26b9b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
26b9f 033 00 36 7F 7F 
26ba3 034 7F 7F 3E 1C 
26ba7 035 08 00 00 00 
26bab 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
26baf 037 00 08 1C 3E 
26bb3 038 7F 3E 1C 08 
26bb7 039 00 00 00 00 
26bbb 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
26bbf 03b 18 3C 3C E7 
26bc3 03c E7 E7 18 18 
26bc7 03d 3C 00 00 00 
26bcb 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
26bcf 03f 18 3C 7E FF 
26bd3 040 FF 7E 18 18 
26bd7 041 3C 00 00 00 
26bdb 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
26bdf 043 00 00 00 18 
26be3 044 3C 3C 18 00 
26be7 045 00 00 00 00 
26beb 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
26bef 047 FF FF FF E7 
26bf3 048 C3 C3 E7 FF 
26bf7 049 FF FF FF FF 
26bfb 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
26bff 04b 00 00 3C 66 
26c03 04c 42 42 66 3C 
26c07 04d 00 00 00 00 
26c0b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
26c0f 04f FF FF C3 99 
26c13 050 BD BD 99 C3 
26c17 051 FF FF FF FF 
26c1b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
26c1f 053 78 70 58 4C 
26c23 054 1E 33 33 33 
26c27 055 33 1E 00 00 
26c2b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
26c2f 057 3C 66 66 66 
26c33 058 66 3C 18 7E 
26c37 059 18 18 00 00 
26c3b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
26c3f 05b FC CC FC 0C 
26c43 05c 0C 0C 0C 0E 
26c47 05d 0F 07 00 00 
26c4b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
26c4f 05f FE C6 FE C6 
26c53 060 C6 C6 C6 E6 
26c57 061 E7 67 03 00 
26c5b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
26c5f 063 18 18 DB 3C 
26c63 064 E7 3C DB 18 
26c67 065 18 00 00 00 
26c6b 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
26c6f 067 03 07 0F 1F 
26c73 068 7F 1F 0F 07 
26c77 069 03 01 00 00 
26c7b 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
26c7f 06b 60 70 78 7C 
26c83 06c 7F 7C 78 70 
26c87 06d 60 40 00 00 
26c8b 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
26c8f 06f 18 3C 7E 18 
26c93 070 18 18 7E 3C 
26c97 071 18 00 00 00 
26c9b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
26c9f 073 66 66 66 66 
26ca3 074 66 66 66    | 	byte	$66[7]
26ca6 075 00 66 66 00 
26caa 076 00 00 00 00 
26cae 077 00 FE DB DB 
26cb2 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
26cb6 079 D8 D8 D8 00 
26cba 07a 00 00 00 3E 
26cbe 07b 63 06 1C 36 
26cc2 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
26cc6 07d 30 63 3E 00 
26cca 07e 00 00 00 00 
26cce 07f 00 00 00 00 
26cd2 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
26cd6 081 7F 7F 7F 00 
26cda 082 00 00 00 00 
26cde 083 00 18 3C 7E 
26ce2 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
26ce6 085 3C 18 7E 00 
26cea 086 00 00 00 00 
26cee 087 00 18 3C 7E 
26cf2 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
26cf6 089 18 18 18 00 
26cfa 08a 00 00 00 00 
26cfe 08b 00 18 18 18 
26d02 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26d06 08d 7E 3C 18 00 
26d0a 08e 00 00 00 00 
26d0e 08f 00 00 00 18 
26d12 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
26d16 091 00 00 00 00 
26d1a 092 00 00 00 00 
26d1e 093 00 00 00    | 	byte	$00[11]
26d21 094 0C 06 7F 06 
26d25 095 0C 00 00 00 
26d29 096 00 00 00 00 
26d2d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26d31 098 00 03 03 03 
26d35 099 7F 00 00 00 
26d39 09a 00 00 00 00 
26d3d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26d41 09c 14 36 7F 36 
26d45 09d 14 00 00 00 
26d49 09e 00 00 00 00 
26d4d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
26d51 0a0 1C 1C 3E 3E 
26d55 0a1 7F 7F 00 00 
26d59 0a2 00 00 00 00 
26d5d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
26d61 0a4 7F 3E 3E 1C 
26d65 0a5 1C 08 00 00 
26d69 0a6 00 00 00 00 
26d6d 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26d71 0a8 00 00 00 00 
26d75 0a9 00 00 00 00 
26d79 0aa 00 00 00 00 
26d7d 0ab 00 00       | 	byte	$00[14]
26d7f 0ab 18 3C 3C 3C 
26d83 0ac 18 18 18 00 
26d87 0ad 18 18 00 00 
26d8b 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
26d8f 0af 66 24 00 00 
26d93 0b0 00 00 00 00 
26d97 0b1 00 00 00 00 
26d9b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26d9f 0b3 00 36 36 7F 
26da3 0b4 36 36 36 7F 
26da7 0b5 36 36 00 00 
26dab 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
26daf 0b7 3E 63 43 03 
26db3 0b8 3E 60 60 61 
26db7 0b9 63 3E 18 18 
26dbb 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
26dbf 0bb 00 00 43 63 
26dc3 0bc 30 18 0C 06 
26dc7 0bd 63 61 00 00 
26dcb 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
26dcf 0bf 1C 36 36 1C 
26dd3 0c0 6E 3B 33 33 
26dd7 0c1 33 6E 00 00 
26ddb 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
26ddf 0c3 0C 0C 0C 06 
26de3 0c4 00 00 00 00 
26de7 0c5 00 00 00 00 
26deb 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26def 0c7 30 18 0C 0C 
26df3 0c8 0C 0C 0C 0C 
26df7 0c9 18 30 00 00 
26dfb 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
26dff 0cb 0C 18 30 30 
26e03 0cc 30 30 30 30 
26e07 0cd 18 0C 00 00 
26e0b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
26e0f 0cf 00 00 00 66 
26e13 0d0 3C FF 3C 66 
26e17 0d1 00 00 00 00 
26e1b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
26e1f 0d3 00 00 00 18 
26e23 0d4 18 7E 18 18 
26e27 0d5 00 00 00 00 
26e2b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
26e2f 0d7 00 00 00 00 
26e33 0d8 00 00 00 00 | 	byte	$00[8]
26e37 0d9 18 18 18 0C 
26e3b 0da 00 00 00 00 
26e3f 0db 00 00 00 00 
26e43 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
26e47 0dd 00 00 00 00 
26e4b 0de 00 00 00 00 
26e4f 0df 00 00 00 00 
26e53 0e0 00 00 00 00 | 	byte	$00[16]
26e57 0e1 18 18 00 00 
26e5b 0e2 00 00 00 00 
26e5f 0e3 00 00 40 60 
26e63 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
26e67 0e5 03 01 00 00 
26e6b 0e6 00 00 00 00 
26e6f 0e7 1C 36 63 63 
26e73 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
26e77 0e9 36 1C 00 00 
26e7b 0ea 00 00 00 00 
26e7f 0eb 18 1C 1E 18 
26e83 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
26e87 0ed 18 7E 00 00 
26e8b 0ee 00 00 00 00 
26e8f 0ef 3E 63 60 30 
26e93 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
26e97 0f1 63 7F 00 00 
26e9b 0f2 00 00 00 00 
26e9f 0f3 3E 63 60 60 
26ea3 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
26ea7 0f5 63 3E 00 00 
26eab 0f6 00 00 00 00 
26eaf 0f7 30 38 3C 36 
26eb3 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
26eb7 0f9 30 78 00 00 
26ebb 0fa 00 00 00 00 
26ebf 0fb 7F 03 03 03 
26ec3 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
26ec7 0fd 63 3E 00 00 
26ecb 0fe 00 00 00 00 
26ecf 0ff 1C 06 03 03 
26ed3 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
26ed7 101 63 3E 00 00 
26edb 102 00 00 00 00 
26edf 103 7F 63 60 60 
26ee3 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
26ee7 105 0C 0C 00 00 
26eeb 106 00 00 00 00 
26eef 107 3E 63 63 63 
26ef3 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
26ef7 109 63 3E 00 00 
26efb 10a 00 00 00 00 
26eff 10b 3E 63 63 63 
26f03 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
26f07 10d 30 1E 00 00 
26f0b 10e 00 00 00 00 
26f0f 10f 00 00 00 18 
26f13 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
26f17 111 18 18 00 00 
26f1b 112 00 00 00 00 
26f1f 113 00 00 00 18 
26f23 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
26f27 115 18 18 0C 00 
26f2b 116 00 00 00 00 
26f2f 117 00 60 30 18 
26f33 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
26f37 119 30 60 00 00 
26f3b 11a 00 00 00 00 
26f3f 11b 00 00 00 7E 
26f43 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
26f47 11d 00 00 00 00 
26f4b 11e 00 00 00 00 
26f4f 11f 00          | 	byte	$00[9]
26f50 120 06 0C 18 30 
26f54 121 60 30 18 0C 
26f58 122 06 00 00 00 
26f5c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
26f60 124 63 63 30 18 
26f64 125 18 18 00 18 
26f68 126 18 00 00 00 
26f6c 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
26f70 128 3E 63 63 7B 
26f74 129 7B 7B 3B 03 
26f78 12a 3E 00 00 00 
26f7c 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
26f80 12c 1C 36 63 63 
26f84 12d 7F 63 63 63 
26f88 12e 63 00 00 00 
26f8c 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
26f90 130 66 66 66 3E 
26f94 131 66 66 66 66 
26f98 132 3F 00 00 00 
26f9c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
26fa0 134 66 43 03 03 
26fa4 135 03 03 43 66 
26fa8 136 3C 00 00 00 
26fac 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
26fb0 138 36 66 66 66 
26fb4 139 66 66 66 36 
26fb8 13a 1F 00 00 00 
26fbc 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
26fc0 13c 66 46 16 1E 
26fc4 13d 16 06 46 66 
26fc8 13e 7F 00 00 00 
26fcc 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
26fd0 140 66 46 16 1E 
26fd4 141 16 06 06 06 
26fd8 142 0F 00 00 00 
26fdc 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
26fe0 144 66 43 03 03 
26fe4 145 7B 63 63 66 
26fe8 146 5C 00 00 00 
26fec 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
26ff0 148 63 63 63 7F 
26ff4 149 63 63 63 63 
26ff8 14a 63 00 00 00 
26ffc 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
27000 14c 18 18 18 18 
27004 14d 18 18 18 18 | 	byte	$18[8]
27008 14e 3C 00 00 00 
2700c 14f 00 00 00 78 
27010 150 30 30 30 30 
27014 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
27018 152 1E 00 00 00 
2701c 153 00 00 00 67 
27020 154 66 66 36 1E 
27024 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
27028 156 67 00 00 00 
2702c 157 00 00 00 0F 
27030 158 06 06 06 06 
27034 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
27038 15a 7F 00 00 00 
2703c 15b 00 00 00 63 
27040 15c 77 7F 7F 6B 
27044 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
27048 15e 63 00 00 00 
2704c 15f 00 00 00 63 
27050 160 67 6F 7F 7B 
27054 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
27058 162 63 00 00 00 
2705c 163 00 00 00 3E 
27060 164 63 63 63 63 
27064 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
27068 166 3E 00 00 00 
2706c 167 00 00 00 3F 
27070 168 66 66 66 3E 
27074 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
27078 16a 0F 00 00 00 
2707c 16b 00 00 00 3E 
27080 16c 63 63 63 63 
27084 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
27088 16e 3E 30 70 00 
2708c 16f 00 00 00 3F 
27090 170 66 66 66 3E 
27094 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
27098 172 67 00 00 00 
2709c 173 00 00 00 3E 
270a0 174 63 63 06 1C 
270a4 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
270a8 176 3E 00 00 00 
270ac 177 00 00 00 7E 
270b0 178 7E 5A 18 18 
270b4 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
270b8 17a 3C 00 00 00 
270bc 17b 00 00 00 63 
270c0 17c 63 63 63 63 
270c4 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
270c8 17e 3E 00 00 00 
270cc 17f 00 00 00 63 
270d0 180 63 63 63 63 
270d4 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
270d8 182 08 00 00 00 
270dc 183 00 00 00 63 
270e0 184 63 63 63 6B 
270e4 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
270e8 186 36 00 00 00 
270ec 187 00 00 00 63 
270f0 188 63 36 3E 1C 
270f4 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
270f8 18a 63 00 00 00 
270fc 18b 00 00 00 66 
27100 18c 66 66 66 3C 
27104 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
27108 18e 3C 00 00 00 
2710c 18f 00 00 00 7F 
27110 190 63 61 30 18 
27114 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
27118 192 7F 00 00 00 
2711c 193 00 00 00 3C 
27120 194 0C 0C 0C 0C 
27124 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
27128 196 3C 00 00 00 
2712c 197 00 00 00 00 
27130 198 01 03 07 0E 
27134 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
27138 19a 40 00 00 00 
2713c 19b 00 00 00 3C 
27140 19c 30 30 30 30 
27144 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
27148 19e 3C 00 00 00 
2714c 19f 1C 36 00 00 
27150 1a0 00 00 00 00 
27154 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27158 1a2 00 00 00 00 
2715c 1a3 00 00 00 00 
27160 1a4 00 00 00 00 
27164 1a5 00 00 00 00 
27168 1a6 00          | 	byte	$00[17]
27169 1a6 FF 00 00 0C 
2716d 1a7 18 00 00 00 
27171 1a8 00 00 00 00 
27175 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27179 1aa 00 00 00 00 
2717d 1ab 00 00 00 00 
27181 1ac 00          | 	byte	$00[9]
27182 1ac 1E 30 3E 33 
27186 1ad 33 33 6E 00 
2718a 1ae 00 00 00 00 
2718e 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
27192 1b0 1E 36 66 66 
27196 1b1 66 66 3E 00 
2719a 1b2 00 00 00 00 
2719e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
271a2 1b4 3E 63 03 03 
271a6 1b5 03 63 3E 00 
271aa 1b6 00 00 00 00 
271ae 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
271b2 1b8 3C 36 33 33 
271b6 1b9 33 33 6E 00 
271ba 1ba 00 00 00 00 
271be 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
271c2 1bc 3E 63 7F 03 
271c6 1bd 03 63 3E 00 
271ca 1be 00 00 00 00 
271ce 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
271d2 1c0 0C 1E 0C 0C 
271d6 1c1 0C 0C 1E 00 
271da 1c2 00 00 00 00 
271de 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
271e2 1c4 6E 33 33 33 
271e6 1c5 33 33 3E 30 
271ea 1c6 33 1E 00 00 
271ee 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
271f2 1c8 36 6E 66 66 
271f6 1c9 66 66 67 00 
271fa 1ca 00 00 00 00 
271fe 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
27202 1cc 1C 18 18 18 
27206 1cd 18 18 3C 00 
2720a 1ce 00 00 00 00 
2720e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
27212 1d0 70 60 60 60 
27216 1d1 60 60 60 66 
2721a 1d2 66 3C 00 00 
2721e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
27222 1d4 66 36 1E 1E 
27226 1d5 36 66 67 00 
2722a 1d6 00 00 00 00 
2722e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
27232 1d8 18 18 18 18 
27236 1d9 18 18       | 	byte	$18[6]
27238 1da 3C 00 00 00 
2723c 1db 00 00 00 00 
27240 1dc 00 00 37 7F 
27244 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
27248 1de 63 00 00 00 
2724c 1df 00 00 00 00 
27250 1e0 00 00 3B 66 
27254 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
27258 1e2 66 00 00 00 
2725c 1e3 00 00 00 00 
27260 1e4 00 00 3E 63 
27264 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
27268 1e6 3E 00 00 00 
2726c 1e7 00 00 00 00 
27270 1e8 00 00 3B 66 
27274 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
27278 1ea 3E 06 06 0F 
2727c 1eb 00 00 00 00 
27280 1ec 00 00 6E 33 
27284 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
27288 1ee 3E 30 30 78 
2728c 1ef 00 00 00 00 
27290 1f0 00 00 3B 6E 
27294 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
27298 1f2 0F 00 00 00 
2729c 1f3 00 00 00 00 
272a0 1f4 00 00 3E 63 
272a4 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
272a8 1f6 3E 00 00 00 
272ac 1f7 00 00 00 08 
272b0 1f8 0C 0C 3F 0C 
272b4 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
272b8 1fa 38 00 00 00 
272bc 1fb 00 00 00 00 
272c0 1fc 00 00 33 33 
272c4 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
272c8 1fe 6E 00 00 00 
272cc 1ff 00 00 00 00 
272d0 200 00 00 63 63 
272d4 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
272d8 202 1C 00 00 00 
272dc 203 00 00 00 00 
272e0 204 00 00 63 63 
272e4 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
272e8 206 36 00 00 00 
272ec 207 00 00 00 00 
272f0 208 00 00 63 36 
272f4 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
272f8 20a 63 00 00 00 
272fc 20b 00 00 00 00 
27300 20c 00 00 63 63 
27304 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
27308 20e 7E 60 30 1F 
2730c 20f 00 00 00 00 
27310 210 00 00 7F 33 
27314 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
27318 212 7F 00 00 00 
2731c 213 00 00 00 70 
27320 214 18 18 18 0E 
27324 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
27328 216 70 00 00 00 
2732c 217 00 00 00 18 
27330 218 18 18 18 18 
27334 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
27338 21a 18 00 00 00 
2733c 21b 00 00 00 0E 
27340 21c 18 18 18 70 
27344 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
27348 21e 0E 00 00 00 
2734c 21f 6E 3B 00 00 
27350 220 00 00 00 00 
27354 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27358 222 00 00 00 00 
2735c 223 00 00 00 00 
27360 224 00 00       | 	byte	$00[10]
27362 224 08 1C 36 63 
27366 225 63 63 7F 00 
2736a 226 00 00 00 00 
2736e 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
27372 228 03 03 03 03 
27376 229 43 66 3C 18 
2737a 22a 30 1E 00 00 
2737e 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
27382 22c 33 33 33 33 
27386 22d 33 33       | 	byte	$33[6]
27388 22e 6E 00 00 00 
2738c 22f 00 00 60 30 
27390 230 18 00 3E 63 
27394 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
27398 232 3E 00 00 00 
2739c 233 00 00 08 1C 
273a0 234 36 00 1E 30 
273a4 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
273a8 236 6E 00 00 00 
273ac 237 00 00 00 00 
273b0 238 33 00 1E 30 
273b4 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
273b8 23a 6E 00 00 00 
273bc 23b 00 00 1C 36 
273c0 23c 1C 00 33 33 
273c4 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
273c8 23e 6E 00 00 00 
273cc 23f 00 00 60 30 
273d0 240 18 00 3E 63 
273d4 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
273d8 242 3E 00 00 00 
273dc 243 00 00 00 00 
273e0 244 00 00 3E 63 
273e4 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
273e8 246 3E 18 30 1E 
273ec 247 00 00 00 1C 
273f0 248 58 78 38 18 
273f4 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
273f8 24a 3C 00 00 00 
273fc 24b 00 00 00 00 
27400 24c 63 00 3E 63 
27404 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
27408 24e 3E 00 00 00 
2740c 24f 66 33 00 3E 
27410 250 63 63 63 63 
27414 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
27418 252 3E 00 00 00 
2741c 253 00 00 CC 66 
27420 254 33 00 3E 63 
27424 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
27428 256 3E 00 00 00 
2742c 257 00 00 18 3C 
27430 258 66 00 1C 18 
27434 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
27438 25a 3C 00 00 00 
2743c 25b 30 18 00 7F 
27440 25c 63 61 30 18 
27444 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
27448 25e 7F 00 00 00 
2744c 25f 00 63 00 08 
27450 260 1C 36 63 63 
27454 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
27458 262 63 00 00 00 
2745c 263 30 18 00 3C 
27460 264 66 43 03 03 
27464 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
27468 266 3C 00 00 00 
2746c 267 30 18 00 7F 
27470 268 66 46 16 1E 
27474 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
27478 26a 7F 00 00 00 
2747c 26b 0C 06 00 0F 
27480 26c 06 06 06 06 
27484 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
27488 26e 7F 00 00 00 
2748c 26f 30 18 00 1C 
27490 270 18 18 18 18 
27494 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
27498 272 3C 00 00 00 
2749c 273 00 00 08 1C 
274a0 274 36 00 3E 63 
274a4 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
274a8 276 3E 00 00 00 
274ac 277 00 00 00 00 
274b0 278 63 00 3E 63 
274b4 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
274b8 27a 3E 00 00 00 
274bc 27b 00 00 00 6F 
274c0 27c 46 26 06 06 
274c4 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
274c8 27e 7F 00 00 00 
274cc 27f 00 00 00 6E 
274d0 280 4C 2C 0C 0C 
274d4 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
274d8 282 1E 00 00 00 
274dc 283 30 18 00 3E 
274e0 284 63 63 06 1C 
274e4 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
274e8 286 3E 00 00 00 
274ec 287 00 00 60 30 
274f0 288 18 00 3E 63 
274f4 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
274f8 28a 3E 00 00 00 
274fc 28b 00 63 00 3E 
27500 28c 63 63 63 63 
27504 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
27508 28e 3E 00 00 00 
2750c 28f 00 63 00 63 
27510 290 63 63 63 63 
27514 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
27518 292 3E 00 00 00 
2751c 293 6C 38 00 7E 
27520 294 7E 5A 18 18 
27524 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
27528 296 3C 00 00 00 
2752c 297 00 00 60 48 
27530 298 2C 0C 3F 0C 
27534 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
27538 29a 38 00 00 00 
2753c 29b 00 00 00 0F 
27540 29c 26 36 1E 0E 
27544 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
27548 29e 7F 00 00 00 
2754c 29f 00 00 00 00 
27550 2a0 00 63 36 1C 
27554 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
27558 2a2 00 00 00 00 
2755c 2a3 00 00       | 	byte	$00[6]
2755e 2a3 36 1C 08 00 
27562 2a4 3E 63 03 03 
27566 2a5 03 63 3E 00 
2756a 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2756e 2a7 30 18 0C 00 
27572 2a8 1E 30 3E 33 
27576 2a9 33 33 6E 00 
2757a 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2757e 2ab 60 30 18 00 
27582 2ac 1C 18 18 18 
27586 2ad 18 18 3C 00 
2758a 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2758e 2af 60 30 18 00 
27592 2b0 3E 63 63 63 
27596 2b1 63 63 3E 00 
2759a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2759e 2b3 30 18 0C 00 
275a2 2b4 33 33 33 33 
275a6 2b5 33 33 6E 00 
275aa 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
275ae 2b7 00 08 1C 36 
275b2 2b8 63 63 7F 63 
275b6 2b9 63 63 63 18 
275ba 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
275be 2bb 00 00 00 00 
275c2 2bc 1E 30 3E 33 
275c6 2bd 33 33 6E 18 
275ca 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
275ce 2bf 00 7F 63 61 
275d2 2c0 30 18 0C 06 
275d6 2c1 43 63 7F 00 
275da 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
275de 2c3 36 1C 08 00 
275e2 2c4 7F 33 18 0C 
275e6 2c5 06 63 7F 00 
275ea 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
275ee 2c7 00 7F 66 46 
275f2 2c8 16 1E 16 06 
275f6 2c9 46 66 7F 18 
275fa 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
275fe 2cb 00 00 00 00 
27602 2cc 3E 63 7F 03 
27606 2cd 03 63 3E 18 
2760a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2760e 2cf 00 3C 66 03 
27612 2d0 1F 03 0F 03 
27616 2d1 03 66 3C 00 
2761a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2761e 2d3 60 30 18 00 
27622 2d4 7F 33 18 0C 
27626 2d5 06 63 7F 00 
2762a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2762e 2d7 00 3C 66 43 
27632 2d8 03 03 03 03 
27636 2d9 43 66 3C 00 
2763a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2763e 2db 00 00 00 00 
27642 2dc 3E 63 06 1C 
27646 2dd 30 63 3E 18 
2764a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2764e 2df 00 00 00 00 
27652 2e0 00 00       | 	byte	$00[6]
27654 2e1 6C 36 1B 36 
27658 2e2 6C 00 00 00 
2765c 2e3 00 00 00 00 
27660 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27664 2e5 1B 36 6C 36 
27668 2e6 1B 00 00 00 
2766c 2e7 88 22 88 22 
27670 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
27674 2e9 88 22 88 22 
27678 2ea 88 22 88 22 
2767c 2eb AA 55 AA 55 
27680 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
27684 2ed AA 55 AA 55 
27688 2ee AA 55 AA 55 
2768c 2ef BB EE BB EE 
27690 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
27694 2f1 BB EE BB EE 
27698 2f2 BB EE BB EE 
2769c 2f3 18 18 18 18 
276a0 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
276a4 2f5 18 18 18 18 
276a8 2f6 18 18 18 18 
276ac 2f7 18 18 18 18 
276b0 2f8 18 18 18    | 	byte	$18[15]
276b3 2f8 1F 18 18 18 
276b7 2f9 18 18 18 18 
276bb 2fa 18 30 18 00 
276bf 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
276c3 2fc 63 7F 63 63 
276c7 2fd 63 63 00 00 
276cb 2fe 00 1C 36 00 
276cf 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
276d3 300 63 7F 63 63 
276d7 301 63 63 00 00 
276db 302 00 36 1C 00 
276df 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
276e3 304 1E 16 06 46 
276e7 305 66 7F 00 00 
276eb 306 00 00 00 00 
276ef 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
276f3 308 1C 30 60 63 
276f7 309 63 3E 18 30 
276fb 30a 1E 6C 6C 6C 
276ff 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
27703 30c 6F 6C 6C 6C 
27707 30d 6C 6C 6C 6C 
2770b 30e 6C 6C 6C 6C 
2770f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27713 310 6C 6C 6C 6C 
27717 311 6C 6C 6C 6C 
2771b 312 6C          | 	byte	$6c[9]
2771c 313 00 00 00 00 
27720 314 00          | 	byte	$00[5]
27721 314 7F 60 6F 6C 
27725 315 6C 6C 6C 6C 
27729 316 6C 6C 6C 6C 
2772d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27731 318 6F 60 7F 00 
27735 319 00 00 00 00 
27739 31a 00 00 00 18 
2773d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
27741 31c 61 30 18 0C 
27745 31d 06 43 63 7F 
27749 31e 00 00 00 00 
2774d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
27751 320 00 7F 33 18 
27755 321 0C 06 63 7F 
27759 322 00 00 00 00 
2775d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
27761 324 00 00 1F 18 
27765 325 18 18 18 18 
27769 326 18 18 18 18 
2776d 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27771 328 18 18 F8 00 
27775 329 00 00 00 00 
27779 32a 00 00 00 18 
2777d 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
27781 32c 18 18 FF 00 
27785 32d 00 00 00 00 
27789 32e 00 00 00 00 
2778d 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27791 330 00 00 FF 18 
27795 331 18 18 18 18 
27799 332 18 18 18 18 
2779d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
277a1 334 18 18 F8 18 
277a5 335 18 18 18 18 
277a9 336 18 18 18 00 
277ad 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
277b1 338 00 00 FF 00 
277b5 339 00 00 00 00 
277b9 33a 00 00 00 18 
277bd 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
277c1 33c 18 18 FF 18 
277c5 33d 18 18 18 18 
277c9 33e 18 18 18 63 
277cd 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
277d1 340 36 63 63 7F 
277d5 341 63 63 63 63 
277d9 342 00 00 00 00 
277dd 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
277e1 344 00 1E 30 3E 
277e5 345 33 33 33 6E 
277e9 346 00 00 00 6C 
277ed 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
277f1 348 EC 0C FC 00 
277f5 349 00 00 00 00 
277f9 34a 00 00 00 00 
277fd 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27801 34c FC 0C EC 6C 
27805 34d 6C 6C 6C 6C 
27809 34e 6C 6C 6C 6C 
2780d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27811 350 EF 00 FF 00 
27815 351 00 00 00 00 
27819 352 00 00 00 00 
2781d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27821 354 FF 00 EF 6C 
27825 355 6C 6C 6C 6C 
27829 356 6C 6C 6C 6C 
2782d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27831 358 EC 0C EC 6C 
27835 359 6C 6C 6C 6C 
27839 35a 6C 6C 6C 00 
2783d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
27841 35c FF 00 FF 00 
27845 35d 00 00 00 00 
27849 35e 00 00 00 6C 
2784d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
27851 360 EF 00 EF 6C 
27855 361 6C 6C 6C 6C 
27859 362 6C 6C 6C 00 
2785d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
27861 364 63 3E 63 63 
27865 365 63 63 3E 63 
27869 366 00 00 00 00 
2786d 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
27871 368 30 3C 36 33 
27875 369 33 33 33 6E 
27879 36a 00 00 00 00 
2787d 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
27881 36c 66 66 6F 66 
27885 36d 66 66 36 1F 
27889 36e 00 00 00 36 
2788d 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
27891 370 66 66 66 66 
27895 371 66 66       | 	byte	$66[6]
27897 371 36 1F 00 00 
2789b 372 00 00 63 00 
2789f 373 7F 66 46 16 
278a3 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
278a7 375 66 7F 00 00 
278ab 376 00 6C 38 00 
278af 377 38 30 30 3C 
278b3 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
278b7 379 33 6E 00 00 
278bb 37a 00 36 1C 00 
278bf 37b 63 67 6F 7F 
278c3 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
278c7 37d 63 63 00 00 
278cb 37e 00 30 18 00 
278cf 37f 3C 18 18 18 
278d3 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
278d7 381 18 3C 00 00 
278db 382 00 3C 66 00 
278df 383 3C 18 18 18 
278e3 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
278e7 385 18 3C 00 00 
278eb 386 00 00 00 36 
278ef 387 1C 08 00 3E 
278f3 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
278f7 389 63 3E 00 00 
278fb 38a 00 18 18 18 
278ff 38b 18 18 18 18 
27903 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
27907 38d 00 00 00 00 
2790b 38e 00 00 00 00 
2790f 38f 00 00 00 00 | 	byte	$00[12]
27913 390 F8 18 18 18 
27917 391 18 18 18 18 
2791b 392 18 FF FF FF 
2791f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
27923 394 FF FF FF FF 
27927 395 FF FF FF FF 
2792b 396 FF          | 	byte	$ff[9]
2792c 397 00 00 00 00 
27930 398 00 00 00    | 	byte	$00[7]
27933 398 FF FF FF FF 
27937 399 FF FF FF FF 
2793b 39a FF          | 	byte	$ff[9]
2793c 39b 00 00 00 7E 
27940 39c 7E 5A 18 18 
27944 39d 18 18 18 18 
27948 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2794c 39f 1C 36 1C 63 
27950 3a0 63 63 63 63 
27954 3a1 63 63 63 63 
27958 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2795c 3a3 FF FF FF FF 
27960 3a4 FF FF FF    | 	byte	$ff[7]
27963 3a4 00 00 00 00 
27967 3a5 00 00 00 00 
2796b 3a6 00          | 	byte	$00[9]
2796c 3a7 30 18 00 3E 
27970 3a8 63 63 63 63 
27974 3a9 63 63 63 63 
27978 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2797c 3ab 00 00 00 1E 
27980 3ac 33 33 33 1B 
27984 3ad 33 63 63 63 
27988 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2798c 3af 1C 36 00 3E 
27990 3b0 63 63 63 63 
27994 3b1 63 63 63 63 
27998 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2799c 3b3 30 18 00 63 
279a0 3b4 67 6F 7F 7B 
279a4 3b5 73 63 63 63 
279a8 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
279ac 3b7 00 00 60 30 
279b0 3b8 18 00 3B 66 
279b4 3b9 66 66 66 66 
279b8 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
279bc 3bb 00 00 36 1C 
279c0 3bc 08 00 3B 66 
279c4 3bd 66 66 66 66 
279c8 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
279cc 3bf 36 1C 00 3E 
279d0 3c0 63 63 06 1C 
279d4 3c1 30 60 63 63 
279d8 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
279dc 3c3 00 00 36 1C 
279e0 3c4 08 00 3E 63 
279e4 3c5 06 1C 30 63 
279e8 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
279ec 3c7 30 18 00 3F 
279f0 3c8 66 66 66 3E 
279f4 3c9 36 66 66 66 
279f8 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
279fc 3cb 30 18 00 63 
27a00 3cc 63 63 63 63 
27a04 3cd 63 63 63 63 
27a08 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27a0c 3cf 00 00 60 30 
27a10 3d0 18 00 3B 6E 
27a14 3d1 66 06 06 06 
27a18 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
27a1c 3d3 66 33 00 63 
27a20 3d4 63 63 63 63 
27a24 3d5 63 63 63 63 
27a28 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27a2c 3d7 00 00 60 30 
27a30 3d8 18 00 63 63 
27a34 3d9 63 63 63 63 
27a38 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
27a3c 3db 30 18 00 66 
27a40 3dc 66 66 66 3C 
27a44 3dd 18 18 18 18 
27a48 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
27a4c 3df 00 00 00 08 
27a50 3e0 0C 0C 3F 0C 
27a54 3e1 0C 0C 0C 6C 
27a58 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
27a5c 3e3 30 18 00 00 
27a60 3e4 00 00 00 00 
27a64 3e5 00 00 00 00 
27a68 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27a6c 3e7 00 00 00 00 
27a70 3e8 00 00 00 00 | 	byte	$00[8]
27a74 3e9 7F 00 00 00 
27a78 3ea 00 00 00 00 
27a7c 3eb 66 33 00 00 
27a80 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
27a84 3ed 00 00 00 00 
27a88 3ee 00 00 00 00 
27a8c 3ef 00 00 00 00 
27a90 3f0 00 00 00 00 
27a94 3f1 00 00 00 00 
27a98 3f2 00          | 	byte	$00[21]
27a99 3f2 0C 06 3C 36 
27a9d 3f3 1C 00 00 00 
27aa1 3f4 00 00 00 00 
27aa5 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27aa9 3f6 00 00 00 63 
27aad 3f7 3E 00 00 00 
27ab1 3f8 00 00 00 00 
27ab5 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27ab9 3fa 00 00 00 00 
27abd 3fb 3E 63 06 1C 
27ac1 3fc 36 63 63 36 
27ac5 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
27ac9 3fe 00 00 00 00 
27acd 3ff 00 00 00 00 | 	byte	$00[8]
27ad1 400 18 00 7E 00 
27ad5 401 18 00 00 00 
27ad9 402 00 00 00 00 
27add 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27ae1 404 00 00 00 00 
27ae5 405 00 00 00 00 | 	byte	$00[8]
27ae9 406 18 30 1E 00 
27aed 407 00 00 1C 36 
27af1 408 36 1C 00 00 
27af5 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
27af9 40a 00 00 00 00 
27afd 40b 63 00 00 00 
27b01 40c 00 00 00 00 
27b05 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27b09 40e 00 00 00 18 
27b0d 40f 18 00 00 00 
27b11 410 00 00 00 00 
27b15 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27b19 412 00 00 00 00 
27b1d 413 00          | 	byte	$00[5]
27b1e 413 CC 66 33 00 
27b22 414 33 33 33 33 
27b26 415 33 33 6E 00 
27b2a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
27b2e 417 00 3F 66 66 
27b32 418 66 3E 36 66 
27b36 419 66 66 6F 00 
27b3a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
27b3e 41b 36 1C 08 00 
27b42 41c 3B 6E 66 06 
27b46 41d 06 06 0F 00 
27b4a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
27b4e 41f 00 00 00 7E 
27b52 420 7E 7E 7E 7E 
27b56 421 7E 7E 00 00 
27b5a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
27b5e 423 00 00 00 00 
27b62 424 00 00 00 00 
27b66 425 00 00 00 00 
27b6a 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27b6c 427             | 'vga_font       file "vgafont.def"
27b6c 427 00 00 00 00 
      ...             
27b9c 433 00 00 00 00 
27ba0 434 00 00 00    | st_font        file "st4font.def"
27ba3 434 FF FF 00 00 
27ba7 435 00 00 00 00 
27bab 436 00 18 18 18 
27baf 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27bb3 438 18 18 18 18 
27bb7 439 18 18 18 18 
27bbb 43a 18          | 	byte	$18[9]
27bbc 43b 00 00 00 00 
27bc0 43c 00 00 00    | 	byte	$00[7]
27bc3 43c FF FF 18 18 
27bc7 43d 18 18 18 18 
27bcb 43e 18 18 18 18 
27bcf 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27bd3 440 FF FF 00 00 
27bd7 441 00 00 00 00 
27bdb 442 00 18 18 18 
27bdf 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27be3 444 1F 1F 18 18 
27be7 445 18 18 18 18 
27beb 446 18 18 18 18 
27bef 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27bf3 448 F8 F8 18 18 
27bf7 449 18 18 18 18 
27bfb 44a 18 00 00 00 
27bff 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27c03 44c 1F 1F 18 18 
27c07 44d 18 18 18 18 
27c0b 44e 18 00 00 00 
27c0f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27c13 450 F8 F8 18 18 
27c17 451 18 18 18 18 
27c1b 452 18 18 18 18 
27c1f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27c23 454 1F 1F 00 00 
27c27 455 00 00 00 00 
27c2b 456 00 18 18 18 
27c2f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27c33 458 F8 F8 00 00 
27c37 459 00 00 00 00 
27c3b 45a 00 18 18 18 
27c3f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27c43 45c FF FF 18 18 
27c47 45d 18 18 18 18 
27c4b 45e 18 00 00 18 
27c4f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
27c53 460 66 7E 7E 66 
27c57 461 66 66 66 30 
27c5b 462 18 00 00 7E 
27c5f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
27c63 464 3E 06 06 06 
27c67 465 06 7E 7E 18 
27c6b 466 0C 30 18 3C 
27c6f 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
27c73 468 06 06 06 66 
27c77 469 66 7E 3C 00 
27c7b 46a 00 30 18 66 
27c7f 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
27c83 46c 7E 7E 76 76 
27c87 46d 66 66 66 00 
27c8b 46e 00 30 18 7C 
27c8f 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
27c93 470 1C 38 70 60 
27c97 471 60 7E 3E 00 
27c9b 472 00 30 18 7E 
27c9f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
27ca3 474 18 0C 0C 06 
27ca7 475 06 7E 7E 00 
27cab 476 00 18 18 00 
27caf 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
27cb3 478 18 18 0C 0C 
27cb7 479 06 7E 7E 00 
27cbb 47a 00 30 18 3C 
27cbf 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
27cc3 47c 66 66 66 66 
27cc7 47d 66          | 	byte	$66[5]
27cc8 47e 7E 3C 00 00 
27ccc 47f 00 00 06 06 
27cd0 480 06 06 16 1E 
27cd4 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
27cd8 482 7E 7E 00 00 
27cdc 483 00 00 00 00 
27ce0 484 00 3C 7C 60 
27ce4 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
27ce8 486 7E 7C 30 18 
27cec 487 00 00 00 00 
27cf0 488 00 3C 7E 66 
27cf4 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
27cf8 48a 7E 7C 18 0C 
27cfc 48b 00 00 30 18 
27d00 48c 00 3C 3E 06 
27d04 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
27d08 48e 7E 7C 00 00 
27d0c 48f 00 00 30 18 
27d10 490 00 3E 7E 66 
27d14 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
27d18 492 66 66 00 00 
27d1c 493 00 00 30 18 
27d20 494 00 7C 7E 06 
27d24 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
27d28 496 7E 3E 00 00 
27d2c 497 00 00 30 18 
27d30 498 00 7E 7E 30 
27d34 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
27d38 49a 7E 7E 00 00 
27d3c 49b 00 00 18 18 
27d40 49c 00 7E 7E 30 
27d44 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
27d48 49e 7E 7E 00 00 
27d4c 49f 00 00 30 18 
27d50 4a0 00 3C 7E 66 
27d54 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
27d58 4a2 7E 3C 00 00 
27d5c 4a3 00 00 1C 1C 
27d60 4a4 18 18 38 3C 
27d64 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
27d68 4a6 3C 3C 00 00 
27d6c 4a7 00 00 00 00 
27d70 4a8 00 00 00 00 
27d74 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27d78 4aa 00 00 00 00 
27d7c 4ab 00 00       | 	byte	$00[6]
27d7e 4ab 18 18 18 18 
27d82 4ac 18 18 18 18 | 	byte	$18[8]
27d86 4ad 00 00 18 18 
27d8a 4ae 00 00 00 00 
27d8e 4af 66 66 66 66 
27d92 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
27d96 4b1 00 00 00 00 
27d9a 4b2 00 00 00 00 
27d9e 4b3 00          | 	byte	$00[9]
27d9f 4b3 66 66 FF FF 
27da3 4b4 66 66 FF FF 
27da7 4b5 66 66 00 00 
27dab 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
27daf 4b7 7C 7E 06 06 
27db3 4b8 3E 7C 60 60 
27db7 4b9 7E 3E 18 18 
27dbb 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
27dbf 4bb 66 30 30 18 
27dc3 4bc 18 0C 0C 66 
27dc7 4bd 66 00 00 00 
27dcb 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
27dcf 4bf 66 66 3C 1C 
27dd3 4c0 1C FC FE 66 
27dd7 4c1 66 FE FC 00 
27ddb 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
27ddf 4c3 18 18 18 18 
27de3 4c4 00 00 00 00 
27de7 4c5 00 00 00 00 
27deb 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
27def 4c7 18 1C 0C 0C 
27df3 4c8 0C 0C 0C 0C 
27df7 4c9 1C 18 30 00 
27dfb 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
27dff 4cb 18 38 30 30 
27e03 4cc 30 30 30 30 
27e07 4cd 38 18 0C 00 
27e0b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
27e0f 4cf 66 66 3C 3C 
27e13 4d0 FF FF 3C 3C 
27e17 4d1 66 66 00 00 
27e1b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
27e1f 4d3 00 18 18 18 
27e23 4d4 7E 7E 18 18 
27e27 4d5 18 00 00 00 
27e2b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27e2f 4d7 00 00 00 00 
27e33 4d8 00 00       | 	byte	$00[6]
27e35 4d9 18 18 18 18 
27e39 4da 18          | 	byte	$18[5]
27e3a 4da 0C 04 00 00 
27e3e 4db 00 00 00 00 
27e42 4dc 7E 7E 00 00 
27e46 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
27e4a 4de 00 00 00 00 
27e4e 4df 00 00 00 00 
27e52 4e0 00 00 00 00 
27e56 4e1 00          | 	byte	$00[13]
27e57 4e1 18 18 18 00 
27e5b 4e2 00 00 00 60 
27e5f 4e3 60 60 30 30 
27e63 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
27e67 4e5 06 06 06 00 
27e6b 4e6 00 00 00 3C 
27e6f 4e7 7E 66 66 66 
27e73 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
27e77 4e9 66 7E 3C 00 
27e7b 4ea 00 00 00 18 
27e7f 4eb 18 1C 1C 18 
27e83 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
27e87 4ed 18 7E 7E 00 
27e8b 4ee 00 00 00 3C 
27e8f 4ef 7E 66 66 30 
27e93 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
27e97 4f1 0C 7E 7E 00 
27e9b 4f2 00 00 00 7E 
27e9f 4f3 7E 30 30 18 
27ea3 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
27ea7 4f5 66 7E 3C 00 
27eab 4f6 00 00 00 30 
27eaf 4f7 30 38 38 3C 
27eb3 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
27eb7 4f9 7E 30 30 00 
27ebb 4fa 00 00 00 7E 
27ebf 4fb 7E 06 06 3E 
27ec3 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
27ec7 4fd 66 7E 3C 00 
27ecb 4fe 00 00 00 38 
27ecf 4ff 3C 0E 06 06 
27ed3 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
27ed7 501 66 7E 3C 00 
27edb 502 00 00 00 7E 
27edf 503 7E 60 60 30 
27ee3 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
27ee7 505 0C 0C 0C 00 
27eeb 506 00 00 00 3C 
27eef 507 7E 66 66 3C 
27ef3 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
27ef7 509 66 7E 3C 00 
27efb 50a 00 00 00 3C 
27eff 50b 7E 66 66 7E 
27f03 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
27f07 50d 70 3C 1C 00 
27f0b 50e 00 00 00 00 
27f0f 50f 00 00 18 18 
27f13 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
27f17 511 18 18 18 00 
27f1b 512 00 00 00 00 
27f1f 513 00 00 18 18 
27f23 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
27f27 515 18 18 18 0C 
27f2b 516 04 00 00 00 
27f2f 517 70 38 1C 0E 
27f33 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
27f37 519 70 00 00 00 
27f3b 51a 00 00 00 00 
27f3f 51b 00 00 7E 7E 
27f43 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
27f47 51d 00 00 00 00 
27f4b 51e 00 00 00 00 | 	byte	$00[8]
27f4f 51f 0E 1C 38 70 
27f53 520 E0 70 38 1C 
27f57 521 0E 00 00 00 
27f5b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
27f5f 523 7E 66 66 30 
27f63 524 30 18 18 18 
27f67 525 00 18 18 00 
27f6b 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
27f6f 527 7E 66 66 66 
27f73 528 66 36 06 66 
27f77 529 66 7E 3C 00 
27f7b 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
27f7f 52b 3C 7E 66 66 
27f83 52c 66 7E 7E 66 
27f87 52d 66 66 66 00 
27f8b 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
27f8f 52f 7E 66 66 7E 
27f93 530 3E 66 66 66 
27f97 531 66 7E 3E 00 
27f9b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
27f9f 533 7E 66 66 06 
27fa3 534 06 06 06 66 
27fa7 535 66 7E 3C 00 
27fab 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
27faf 537 7E 66 66 66 
27fb3 538 66 66 66 66 
27fb7 539 66 7E 3E 00 
27fbb 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
27fbf 53b 7E 06 06 3E 
27fc3 53c 3E 06 06 06 
27fc7 53d 06 7E 7E 00 
27fcb 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
27fcf 53f 7E 06 06 3E 
27fd3 540 3E 06 06 06 
27fd7 541 06 06 06 00 
27fdb 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
27fdf 543 7E 06 06 76 
27fe3 544 76 66 66 66 
27fe7 545 66 7E 3C 00 
27feb 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
27fef 547 66 66 66 7E 
27ff3 548 7E 66 66 66 
27ff7 549 66 66 66 00 
27ffb 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
27fff 54b 7E 18 18 18 
28003 54c 18 18 18 18 
28007 54d 18 7E 7E 00 
2800b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2800f 54f 60 60 60 60 
28013 550 60 60 60    | 	byte	$60[7]
28016 551 66 66 7E 3C 
2801a 552 00 00 00 00 
2801e 553 66 66 36 36 
28022 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
28026 555 66 66 C6 C6 
2802a 556 00 00 00 00 
2802e 557 06 06 06 06 
28032 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
28036 559 06 06 7E 7E 
2803a 55a 00 00 00 00 
2803e 55b C6 C6 EE EE 
28042 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
28046 55d C6 C6 C6 C6 
2804a 55e 00 00 00 00 
2804e 55f 66 66 66 6E 
28052 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
28056 561 76 66 66 66 
2805a 562 00 00 00 00 
2805e 563 3C 7E 66 66 
28062 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
28066 565 66 66 7E 3C 
2806a 566 00 00 00 00 
2806e 567 3E 7E 66 66 
28072 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
28076 569 06 06 06 06 
2807a 56a 00 00 00 00 
2807e 56b 3C 7E 66 66 
28082 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
28086 56d 66 56 3E 6C 
2808a 56e 00 00 00 00 
2808e 56f 3E 7E 66 66 
28092 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
28096 571 66 66 C6 C6 
2809a 572 00 00 00 00 
2809e 573 7C 7E 06 06 
280a2 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
280a6 575 60 60 7E 3E 
280aa 576 00 00 00 00 
280ae 577 7E 7E 18 18 
280b2 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
280b6 579 18 18 18 18 
280ba 57a 00 00 00 00 
280be 57b 66 66 66 66 
280c2 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
280c6 57d 66 66 7E 3C 
280ca 57e 00 00 00 00 
280ce 57f 66 66 66 66 
280d2 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
280d6 581 3C 3C 18 18 
280da 582 00 00 00 00 
280de 583 C6 C6 C6 C6 
280e2 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
280e6 585 FE EE C6 82 
280ea 586 00 00 00 00 
280ee 587 66 66 66 3C 
280f2 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
280f6 589 3C 66 66 66 
280fa 58a 00 00 00 00 
280fe 58b 66 66 66 66 
28102 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
28106 58d 18 18 18 18 
2810a 58e 00 00 00 00 
2810e 58f 7E 7E 30 30 
28112 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
28116 591 06 06 7E 7E 
2811a 592 00 00 00 00 
2811e 593 3C 3C 0C 0C 
28122 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
28126 595 0C 0C 3C 3C 
2812a 596 00 00 00 00 
2812e 597 06 06 0C 0C 
28132 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
28136 599 60 60 C0 C0 
2813a 59a 00 00 00 00 
2813e 59b 3C 3C 30 30 
28142 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
28146 59d 30 30 3C 3C 
2814a 59e 00 00 00 00 
2814e 59f 18 18 3C 3C 
28152 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
28156 5a1 00 00 00 00 
2815a 5a2 00 00 00 00 
2815e 5a3 00 00 00 00 
28162 5a4 00 00 00 00 
28166 5a5 00 00       | 	byte	$00[18]
28168 5a6 FE FE 00 00 
2816c 5a7 00 00 0C 0C 
28170 5a8 18 18 00 00 
28174 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
28178 5aa 00 00 00 00 
2817c 5ab 00 00 00 00 
28180 5ac 00          | 	byte	$00[9]
28181 5ac 3C 7C 60 7C 
28185 5ad 7E 66 66 7E 
28189 5ae 7C 00 00 00 
2818d 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
28191 5b0 3E 7E 66 66 
28195 5b1 66 66 66 7E 
28199 5b2 3E 00 00 00 
2819d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
281a1 5b4 3C 3E 06 06 
281a5 5b5 06 06 06 7E 
281a9 5b6 7C 00 00 00 
281ad 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
281b1 5b8 7C 7E 66 66 
281b5 5b9 66 66 66 7E 
281b9 5ba 7C 00 00 00 
281bd 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
281c1 5bc 3C 7E 66 66 
281c5 5bd 7E 06 06 7E 
281c9 5be 7C 00 00 00 
281cd 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
281d1 5c0 18 7E 7E 18 
281d5 5c1 18 18 18 18 
281d9 5c2 18 00 00 00 
281dd 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
281e1 5c4 7C 7E 66 66 
281e5 5c5 66 66 7E 7C 
281e9 5c6 60 7E 3E 00 
281ed 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
281f1 5c8 3E 7E 66 66 
281f5 5c9 66 66 66 66 
281f9 5ca 66 00 00 00 
281fd 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
28201 5cc 1C 1C 18 18 
28205 5cd 18 18 18 3C 
28209 5ce 3C 00 00 00 
2820d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
28211 5d0 30 30 30 30 
28215 5d1 30 30 30 30 
28219 5d2 30          | 	byte	$30[9]
2821a 5d2 3E 1E 00 00 
2821e 5d3 06 06 06 36 
28222 5d4 36 1E 1E 1E 
28226 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2822a 5d6 00 00 00 00 
2822e 5d7 1C 1C 18 18 
28232 5d8 18 18 18 18 
28236 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2823a 5da 00 00 00 00 
2823e 5db 00 00 00    | 	byte	$00[7]
28241 5dc 6C FE FE D6 
28245 5dd D6 C6 C6 C6 
28249 5de C6 00 00 00 
2824d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
28251 5e0 3E 7E 66 66 
28255 5e1 66 66 66 66 
28259 5e2 66 00 00 00 
2825d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
28261 5e4 3C 7E 66 66 
28265 5e5 66 66 66 7E 
28269 5e6 3C 00 00 00 
2826d 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
28271 5e8 3E 7E 66 66 
28275 5e9 66 66 66 7E 
28279 5ea 3E 06 06 00 
2827d 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
28281 5ec 7C 7E 66 66 
28285 5ed 66 66 66 7E 
28289 5ee 7C 60 60 00 
2828d 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
28291 5f0 3E 7E 66 06 
28295 5f1 06 06 06 06 
28299 5f2 06 00 00 00 
2829d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
282a1 5f4 7C 7E 06 0E 
282a5 5f5 3C 70 60 7E 
282a9 5f6 3E 00 00 00 
282ad 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
282b1 5f8 7E 7E 18 18 
282b5 5f9 18 18 18 78 
282b9 5fa 70 00 00 00 
282bd 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
282c1 5fc 66 66 66 66 
282c5 5fd 66 66 66    | 	byte	$66[7]
282c8 5fe 7E 7C 00 00 
282cc 5ff 00 00 00 00 
282d0 600 00 66 66 66 
282d4 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
282d8 602 18 18 00 00 
282dc 603 00 00 00 00 
282e0 604 00 C6 C6 D6 
282e4 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
282e8 606 C6 82 00 00 
282ec 607 00 00 00 00 
282f0 608 00 66 66 3C 
282f4 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
282f8 60a 66 66 00 00 
282fc 60b 00 00 00 00 
28300 60c 00 66 66 66 
28304 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
28308 60e 7C 60 7E 3E 
2830c 60f 00 00 00 00 
28310 610 00 7E 7E 30 
28314 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
28318 612 7E 7E 00 00 
2831c 613 00 00 30 18 
28320 614 18 18 18 0C 
28324 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
28328 616 18 30 00 00 
2832c 617 00 00 18 18 
28330 618 18 18 18 18 
28334 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28338 61a 18 18 00 00 
2833c 61b 00 00 0C 18 
28340 61c 18 18 18 30 
28344 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
28348 61e 18 0C 00 00 
2834c 61f 00 00 6C 7E 
28350 620 36 00 00 00 
28354 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
28358 622 00 00 00 00 
2835c 623 00 00 00 00 
28360 624 00          | 	byte	$00[9]
28361 624 18 18 18 18 
28365 625 18 18 00 00 
28369 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2836c 627             | 'amiga_font     file "amigafont.def"
2836c 627 00 6C FE FE 
28370 628 7C 38 10 00 
28374 629 18 18 18 F8 
28378 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2837c 62b C0 C0 C0 C0 
28380 62c C0 C0 C0 C0 | 	byte	$c0[8]
28384 62d 18 18 18 1F 
28388 62e 1F 00 00 00 
2838c 62f 18 18 18 1F 
28390 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
28394 631 00 00 00 1F 
28398 632 1F 18 18 18 
2839c 633 C0 E0 70 38 
283a0 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
283a4 635 03 07 0E 1C 
283a8 636 38 70 E0 C0 
283ac 637 80 C0 E0 F0 
283b0 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
283b4 639 00 00 00 00 
283b8 63a F0 F0 F0 F0 
283bc 63b 01 03 07 0F 
283c0 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
283c4 63d F0 F0 F0 F0 
283c8 63e 00 00 00 00 
283cc 63f 0F 0F 0F 0F 
283d0 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
283d4 641 FF FF 00 00 
283d8 642 00 00 00 00 
283dc 643 00 00 00 00 
283e0 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
283e4 645 00 00 00 00 
283e8 646 0F 0F 0F 0F 
283ec 647 00 38 38 EE 
283f0 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
283f4 649 00 00 00 F8 
283f8 64a F8 18 18 18 
283fc 64b 00 00 00 FF 
28400 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
28404 64d 18 18 18 FF 
28408 64e FF 18 18 18 
2840c 64f 00 00 3C 7E 
28410 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
28414 651 00 00 00 00 
28418 652 FF FF FF FF 
2841c 653 03 03 03 03 
28420 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
28424 655 00 00 00 FF 
28428 656 FF 18 18 18 
2842c 657 18 18 18 FF 
28430 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
28434 659 0F 0F 0F 0F 
28438 65a 0F 0F 0F 0F | 	byte	$0f[8]
2843c 65b 18 18 18 F8 
28440 65c F8 00 00 00 
28444 65d 1E 06 1E 06 
28448 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2844c 65f 00 18 3C 7E 
28450 660 18 18 18 00 
28454 661 00 18 18 18 
28458 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2845c 663 00 18 0C 7E 
28460 664 0C 18 00 00 
28464 665 00 18 30 7E 
28468 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2846c 667 00 00 00 00 
28470 668 00 00 00 00 
28474 669 00          | 	byte	$00[9]
28475 669 18 18 18 18 
28479 66a 00 18 00 00 
2847d 66b 66 66 66 00 
28481 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
28485 66d 66 FF 66 66 
28489 66e FF 66 00 18 
2848d 66f 7C 06 3C 60 
28491 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
28495 671 66 36 18 0C 
28499 672 66 62 00 38 
2849d 673 6C 38 1C F6 
284a1 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
284a5 675 18 18 18 00 
284a9 676 00 00 00 00 
284ad 677 70 38 18 18 
284b1 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
284b5 679 0E 1C 18 18 
284b9 67a 1C 0E 00 00 
284bd 67b 66 3C FF 3C 
284c1 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
284c5 67d 18 18 7E 18 
284c9 67e 18 00 00 00 
284cd 67f 00 00 00 00 
284d1 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
284d5 681 00 00 7E 00 
284d9 682 00 00 00 00 
284dd 683 00 00 00 00 
284e1 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
284e5 685 60 30 18 0C 
284e9 686 06 02 00 00 
284ed 687 3C 66 76 6E 
284f1 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
284f5 689 18 1C 18 18 
284f9 68a 18 7E 00 00 
284fd 68b 3C 66 30 18 
28501 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
28505 68d 7E 30 18 30 
28509 68e 66 3C 00 00 
2850d 68f 30 38 3C 36 
28511 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
28515 691 7E 06 3E 60 
28519 692 66 3C 00 00 
2851d 693 3C 06 3E 66 
28521 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
28525 695 7E 60 30 18 
28529 696 0C 0C 00 00 
2852d 697 3C 66 3C 66 
28531 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
28535 699 3C 66 7C 60 
28539 69a 30 1C 00 00 
2853d 69b 00 18 18 00 
28541 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
28545 69d 00 18 18 00 
28549 69e 18 18 0C 60 
2854d 69f 30 18 0C 18 
28551 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
28555 6a1 00 7E 00 00 
28559 6a2 7E 00 00 06 
2855d 6a3 0C 18 30 18 
28561 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
28565 6a5 3C 66 30 18 
28569 6a6 00 18 00 00 
2856d 6a7 3C 66 76 76 
28571 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
28575 6a9 18 3C 66 66 
28579 6aa 7E 66 00 00 
2857d 6ab 3E 66 3E 66 
28581 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
28585 6ad 3C 66 06 06 
28589 6ae 66 3C 00 00 
2858d 6af 1E 36 66 66 
28591 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
28595 6b1 7E 06 3E 06 
28599 6b2 06 7E 00 00 
2859d 6b3 7E 06 3E 06 
285a1 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
285a5 6b5 7C 06 06 76 
285a9 6b6 66 7C 00 00 
285ad 6b7 66 66 7E 66 
285b1 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
285b5 6b9 7E 18 18 18 
285b9 6ba 18 7E 00 00 
285bd 6bb 60 60 60 60 
285c1 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
285c5 6bd 66 36 1E 1E 
285c9 6be 36 66 00 00 
285cd 6bf 06 06 06 06 
285d1 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
285d5 6c1 C6 EE FE D6 
285d9 6c2 C6 C6 00 00 
285dd 6c3 66 6E 7E 7E 
285e1 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
285e5 6c5 3C 66 66 66 
285e9 6c6 66 3C 00 00 
285ed 6c7 3E 66 66 3E 
285f1 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
285f5 6c9 3C 66 66 66 
285f9 6ca 36 6C 00 00 
285fd 6cb 3E 66 66 3E 
28601 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
28605 6cd 3C 06 3C 60 
28609 6ce 60 3C 00 00 
2860d 6cf 7E 18 18 18 
28611 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
28615 6d1 66 66 66 66 
28619 6d2 66          | 	byte	$66[5]
2861a 6d2 7E 00 00 66 
2861e 6d3 66 66 66 3C 
28622 6d4 18 00 00 C6 
28626 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2862a 6d6 C6 00 00 66 
2862e 6d7 66 3C 3C 66 
28632 6d8 66 00 00 66 
28636 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2863a 6da 18 00 00 7E 
2863e 6db 30 18 0C 06 
28642 6dc 7E 00 00 78 
28646 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2864a 6de 78 00 00 02 
2864e 6df 06 0C 18 30 
28652 6e0 60 00 00 1E 
28656 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2865a 6e2 1E 00 00 10 
2865e 6e3 38 6C C6 00 
28662 6e4 00 00 00 00 
28666 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2866a 6e6 FF 00 00 18 
2866e 6e7 3C 7E 7E 3C 
28672 6e8 18 00 00 00 
28676 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2867a 6ea 7C 00 00 06 
2867e 6eb 06 3E 66 66 
28682 6ec 3E 00 00 00 
28686 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2868a 6ee 3C 00 00 60 
2868e 6ef 60 7C 66 66 
28692 6f0 7C 00 00 00 
28696 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2869a 6f2 3C 00 00 70 
2869e 6f3 18 7C 18 18 
286a2 6f4 18 00 00 00 
286a6 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
286aa 6f6 60 3E 00 06 
286ae 6f7 06 3E 66 66 
286b2 6f8 66 00 00 18 
286b6 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
286ba 6fa 3C 00 00 60 
286be 6fb 00 60 60 60 
286c2 6fc 60 3C 00 06 
286c6 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
286ca 6fe 66 00 00 1C 
286ce 6ff 18 18 18 18 
286d2 700 3C 00 00 00 
286d6 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
286da 702 C6 00 00 00 
286de 703 3E 66 66 66 
286e2 704 66 00 00 00 
286e6 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
286ea 706 3C 00 00 00 
286ee 707 3E 66 66 3E 
286f2 708 06 06 00 00 
286f6 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
286fa 70a 60 60 00 00 
286fe 70b 3E 66 06 06 
28702 70c 06 00 00 00 
28706 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2870a 70e 3E 00 00 18 
2870e 70f 7E 18 18 18 
28712 710 70 00 00 00 
28716 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2871a 712 7C 00 00 00 
2871e 713 66 66 66 3C 
28722 714 18 00 00 00 
28726 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2872a 716 6C 00 00 00 
2872e 717 66 3C 18 3C 
28732 718 66 00 00 00 
28736 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2873a 71a 30 1E 00 00 
2873e 71b 7E 30 18 0C 
28742 71c 7E 00 00 18 
28746 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2874a 71e 3C 00 18 18 
2874e 71f 18 18 18 18 
28752 720 18 18 00 7E 
28756 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2875a 722 60 00 10 18 
2875e 723 1C 1E 1C 18 
28762 724 10 00 08 18 
28766 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2876a 726 08 00       | 	byte	$08, $00
2876c 727 00 00 00 00 
28770 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
28771 728 80 00 00 00 
28775 729 00 80 00 00 
28779 72a 80 80 00 00 
2877d 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
28781 72c 80 00 80 00 
28785 72d 00 40 80 00 
28789 72e AA AA AA 00 
2878d 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
28791 730 FF 00 00 00 
28795 731 00 FF 00 00 
28799 732 FF FF 00 00 
2879d 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
287a1 734 FF 00 FF 00 
287a5 735 00 FF FF 00 
287a9 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
287ac 737 00 00 00 00 
287b0 738 00          | ataripalette   file "ataripalettep2.def"
287b1 738 11 11 11 00 
287b5 739 22 22 22 00 
287b9 73a 33 33 33 00 
287bd 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
287c1 73c 55 55 55 00 
287c5 73d 66 66 66 00 
287c9 73e 77 77 77 00 
287cd 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
287d1 740 99 99 99 00 
287d5 741 AA AA AA 00 
287d9 742 BB BB BB 00 
287dd 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
287e1 744 DD DD DD 00 
287e5 745 EE EE EE 00 
287e9 746 FF FF FF 00 
287ed 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
287f1 748 00 14 40 00 
287f5 749 00 1E 60 00 
287f9 74a 00 28 80 00 
287fd 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
28801 74c 00 3C BF 00 
28805 74d 00 46 DF 00 
28809 74e 00 50 FF 00 
2880d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
28811 750 39 77 FF 00 
28815 751 55 8A FF 00 
28819 752 71 9E FF 00 
2881d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
28821 754 AA C5 FF 00 
28825 755 C6 D8 FF 00 
28829 756 E3 EC FF 00 
2882d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
28831 758 00 00 40 00 
28835 759 00 00 60 00 
28839 75a 00 00 80 00 
2883d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
28841 75c 00 00 BF 00 
28845 75d 00 00 DF 00 
28849 75e 00 00 FF 00 
2884d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
28851 760 39 39 FF 00 
28855 761 55 55 FF 00 
28859 762 71 71 FF 00 
2885d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
28861 764 AA AA FF 00 
28865 765 C6 C6 FF 00 
28869 766 E3 E3 FF 00 
2886d 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
28871 768 20 00 40 00 
28875 769 30 00 60 00 
28879 76a 40 00 80 00 
2887d 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
28881 76c 60 00 BF 00 
28885 76d 70 00 DF 00 
28889 76e 80 00 FF 00 
2888d 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
28891 770 9C 39 FF 00 
28895 771 AA 55 FF 00 
28899 772 B8 71 FF 00 
2889d 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
288a1 774 D5 AA FF 00 
288a5 775 E3 C6 FF 00 
288a9 776 F1 E3 FF 00 
288ad 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
288b1 778 40 00 40 00 
288b5 779 60 00 60 00 
288b9 77a 80 00 80 00 
288bd 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
288c1 77c BF 00 BF 00 
288c5 77d DF 00 DF 00 
288c9 77e FF 00 FF 00 
288cd 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
288d1 780 FF 39 FF 00 
288d5 781 FF 55 FF 00 
288d9 782 FF 71 FF 00 
288dd 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
288e1 784 FF AA FF 00 
288e5 785 FF C6 FF 00 
288e9 786 FF E3 FF 00 
288ed 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
288f1 788 40 00 20 00 
288f5 789 60 00 30 00 
288f9 78a 80 00 40 00 
288fd 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
28901 78c BF 00 60 00 
28905 78d DF 00 70 00 
28909 78e FF 00 80 00 
2890d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
28911 790 FF 39 9C 00 
28915 791 FF 55 AA 00 
28919 792 FF 71 B8 00 
2891d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
28921 794 FF AA D5 00 
28925 795 FF C6 E3 00 
28929 796 FF E3 F1 00 
2892d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
28931 798 40 00 00 00 
28935 799 60 00 00 00 
28939 79a 80 00 00 00 
2893d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
28941 79c BF 00 00 00 
28945 79d DF 00 00 00 
28949 79e FF 00 00 00 
2894d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
28951 7a0 FF 39 39 00 
28955 7a1 FF 55 55 00 
28959 7a2 FF 71 71 00 
2895d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
28961 7a4 FF AA AA 00 
28965 7a5 FF C6 C6 00 
28969 7a6 FF E3 E3 00 
2896d 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
28971 7a8 40 10 00 00 
28975 7a9 60 18 00 00 
28979 7aa 80 20 00 00 
2897d 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
28981 7ac BF 30 00 00 
28985 7ad DF 38 00 00 
28989 7ae FF 40 00 00 
2898d 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
28991 7b0 FF 6A 39 00 
28995 7b1 FF 80 55 00 
28999 7b2 FF 95 71 00 
2899d 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
289a1 7b4 FF BF AA 00 
289a5 7b5 FF D5 C6 00 
289a9 7b6 FF EA E3 00 
289ad 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
289b1 7b8 40 20 00 00 
289b5 7b9 60 30 00 00 
289b9 7ba 80 40 00 00 
289bd 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
289c1 7bc BF 60 00 00 
289c5 7bd DF 70 00 00 
289c9 7be FF 80 00 00 
289cd 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
289d1 7c0 FF 9C 39 00 
289d5 7c1 FF AA 55 00 
289d9 7c2 FF B8 71 00 
289dd 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
289e1 7c4 FF D5 AA 00 
289e5 7c5 FF E3 C6 00 
289e9 7c6 FF F1 E3 00 
289ed 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
289f1 7c8 40 30 00 00 
289f5 7c9 60 48 00 00 
289f9 7ca 80 60 00 00 
289fd 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
28a01 7cc BF 90 00 00 
28a05 7cd DF A8 00 00 
28a09 7ce FF C0 00 00 
28a0d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
28a11 7d0 FF CE 39 00 
28a15 7d1 FF D5 55 00 
28a19 7d2 FF DC 71 00 
28a1d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
28a21 7d4 FF EA AA 00 
28a25 7d5 FF F1 C6 00 
28a29 7d6 FF F8 E3 00 
28a2d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
28a31 7d8 30 40 00 00 
28a35 7d9 48 60 00 00 
28a39 7da 60 80 00 00 
28a3d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
28a41 7dc 90 BF 00 00 
28a45 7dd A8 DF 00 00 
28a49 7de C0 FF 00 00 
28a4d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
28a51 7e0 CE FF 39 00 
28a55 7e1 D5 FF 55 00 
28a59 7e2 DC FF 71 00 
28a5d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
28a61 7e4 EA FF AA 00 
28a65 7e5 F1 FF C6 00 
28a69 7e6 F8 FF E3 00 
28a6d 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
28a71 7e8 00 40 00 00 
28a75 7e9 00 60 00 00 
28a79 7ea 00 80 00 00 
28a7d 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
28a81 7ec 00 BF 00 00 
28a85 7ed 00 DF 00 00 
28a89 7ee 00 FF 00 00 
28a8d 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
28a91 7f0 39 FF 39 00 
28a95 7f1 55 FF 55 00 
28a99 7f2 71 FF 71 00 
28a9d 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
28aa1 7f4 AA FF AA 00 
28aa5 7f5 C6 FF C6 00 
28aa9 7f6 E3 FF E3 00 
28aad 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
28ab1 7f8 00 40 14 00 
28ab5 7f9 00 60 1E 00 
28ab9 7fa 00 80 28 00 
28abd 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
28ac1 7fc 00 BF 3C 00 
28ac5 7fd 00 DF 46 00 
28ac9 7fe 00 FF 50 00 
28acd 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
28ad1 800 39 FF 77 00 
28ad5 801 55 FF 8A 00 
28ad9 802 71 FF 9E 00 
28add 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
28ae1 804 AA FF C5 00 
28ae5 805 C6 FF D8 00 
28ae9 806 E3 FF EC 00 
28aed 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
28af1 808 00 40 28 00 
28af5 809 00 60 3C 00 
28af9 80a 00 80 50 00 
28afd 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
28b01 80c 00 BF 78 00 
28b05 80d 00 DF 8C 00 
28b09 80e 00 FF A0 00 
28b0d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
28b11 810 39 FF B5 00 
28b15 811 55 FF C0 00 
28b19 812 71 FF CA 00 
28b1d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
28b21 814 AA FF DF 00 
28b25 815 C6 FF EA 00 
28b29 816 E3 FF F4 00 
28b2d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
28b31 818 00 40 40 00 
28b35 819 00 60 60 00 
28b39 81a 00 80 80 00 
28b3d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
28b41 81c 00 BF BF 00 
28b45 81d 00 DF DF 00 
28b49 81e 00 FF FF 00 
28b4d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
28b51 820 39 FF FF 00 
28b55 821 55 FF FF 00 
28b59 822 71 FF FF 00 
28b5d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
28b61 824 AA FF FF 00 
28b65 825 C6 FF FF 00 
28b69 826 E3 FF FF 00 
28b6d 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
28b71 828 00 28 40 00 
28b75 829 00 3C 60 00 
28b79 82a 00 50 80 00 
28b7d 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
28b81 82c 00 78 BF 00 
28b85 82d 00 8C DF 00 
28b89 82e 00 A0 FF 00 
28b8d 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
28b91 830 39 B5 FF 00 
28b95 831 55 C0 FF 00 
28b99 832 71 CA FF 00 
28b9d 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
28ba1 834 AA DF FF 00 
28ba5 835 C6 EA FF 00 
28ba9 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
28bac 837             | 
28bac 837             | '**********************************************************************************
28bac 837             | '
28bac 837             | '        Timings and colors definitions
28bac 837             | '
28bac 837             | '**********************************************************************************
28bac 837             | 
28bac 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
28bac 837 10 00 00 00 
28bb0 838 50 00 00 00 
28bb4 839 0C 00 00 00 
28bb8 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
28bbc 83b 08 00 00 00 
28bc0 83c 04 00 00 00 
28bc4 83d 08 00 00 00 
28bc8 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
28bcc 83f 40 02 00 00 
28bd0 840 6A 8C 15 14 
28bd4 841 FB 06 B7 01 
28bd8 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
28bdc 843 00 00 00 00 
28be0 844 C0 00 00 00 
28be4 845 00 00 00 00 
28be8 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28bec 847 00 75 C7 97 
28bf0 848 27 47 F6 0A 
28bf4 849 05 79 CB 9B 
28bf8 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
28bfc 84b             | 
28bfc 84b             | ''--------  Initialization  ----------------------------------------------------------------
28bfc 84b             | 
28bfc 84b 28 0C 64 FD | hdmi            setq    #6
28c00 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
28c04 84d 28 10 64 FD |                 setq    #8
28c08 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
28c0c 84f             | 
28c0c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
28c10 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
28c14 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
28c18 852 D6 C6 01 F1 |                 add     t1,hbase
28c1c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
28c20 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
28c24 855 7B 0B 80 5F 
28c28 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
28c2c 857 66 66 86 FF 
28c30 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
28c34 859             | '
28c34 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
28c38 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
28c3c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
28c40 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
28c44 85d             | 
28c44 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
28c48 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
28c4c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
28c50 860             | 
28c50 860             | ''--------  frame rendering main loop  ---------------------------------------------------
28c50 860             | 
28c50 860 28 06 64 FD | p101            setq 	#3
28c54 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
28c58 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
28c5c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
28c60 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
28c64 865 00 A0 05 F6 |                 mov     dlinum, #0
28c68 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
28c6c 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
28c70 868             | 
28c70 868             | 
28c70 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
28c74 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
28c78 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
28c7c 86b             |                 
28c7c 86b             | 
28c7c 86b             | 
28c7c 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
28c7c 86b             |   
28c7c 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
28c80 86c 29 FE 65 3D |          if_nc  setq2   #255
28c84 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
28c88 86e             | 
28c88 86e             | '' -----   up porch (before the picture)
28c88 86e             | 
28c88 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
28c8c 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
28c90 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
28c94 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
28c98 872             |  
28c98 872             |    
28c98 872             |  
28c98 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
28c9c 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
28ca0 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
28ca4 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
28ca8 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
28cac 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
28cb0 878             | 
28cb0 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
28cb4 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
28cb8 87a 48 00 B0 FD | 		call    #dli
28cbc 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
28cc0 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
28cc4 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
28cc8 87e             |                 	
28cc8 87e             |                 
28cc8 87e             | 
28cc8 87e             |  
28cc8 87e             | '' ------- the main screen drawing starts here
28cc8 87e             | 
28cc8 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
28ccc 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
28cd0 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
28cd4 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
28cd8 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
28cdc 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
28ce0 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
28ce4 885             |               
28ce4 885             | 
28ce4 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
28ce8 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
28cec 887             | 
28cec 887             | ' ---------------- All visible lines displayed now, start vblank  
28cec 887             | 
28cec 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
28cf0 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
28cf4 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
28cf8 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
28cfc 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
28d00 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
28d04 88d             | 
28d04 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
28d04 88d             | 
28d04 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
28d04 88d             | 
28d04 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
28d08 88e             | 
28d08 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
28d0c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
28d10 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
28d14 891             | 
28d14 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
28d18 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
28d1c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
28d20 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
28d24 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
28d28 896             | 
28d28 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
28d2c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
28d30 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
28d34 899 70 00 90 AD |     if_z        jmp     #preload
28d38 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
28d3c 89b 94 00 90 AD |     if_z        jmp     #preload2
28d40 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
28d44 89d 0C 00 90 AD |     if_z        jmp     #p390
28d48 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
28d4c 89f 28 00 90 AD |     if_z        jmp     #p391  
28d50 8a0             | 
28d50 8a0 2D 00 64 FD | p308            ret
28d54 8a1             |    
28d54 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
28d58 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
28d5c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
28d60 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
28d64 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
28d68 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
28d6c 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
28d70 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
28d74 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
28d78 8aa             |  
28d78 8aa             | '' --------  Reload palette. To do 
28d78 8aa             | 
28d78 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
28d7c 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
28d80 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
28d84 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
28d88 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
28d8c 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
28d90 8b0 70 FF 9F FD |         	jmp     #dli                
28d94 8b1             |       
28d94 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
28d94 8b1             | 
28d94 8b1             | 
28d94 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
28d94 8b1             | 
28d94 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
28d98 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
28d9c 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
28da0 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
28da4 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
28da8 8b6             |         
28da8 8b6             | '' -------------- Preload a line from PSRAM        
28da8 8b6             |         
28da8 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
28dac 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
28db0 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
28db4 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
28db8 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
28dbc 8bb             | 
28dbc 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
28dc0 8bc 32 B7 01 F6 |                 mov     buf2,a1024
28dc4 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
28dc8 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
28dcc 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
28dd0 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
28dd4 8c1             |  
28dd4 8c1             |  
28dd4 8c1             | preload2      '  incmod  dlinum,#3
28dd4 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
28dd8 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
28ddc 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
28de0 8c4 28 02 64 FD |                 setq	#1
28de4 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
28de8 8c6             |                 
28de8 8c6             | 
28de8 8c6             | '' -------------- Draw sprites
28de8 8c6             | 
28de8 8c6 CF 5C 02 F6 | sprite          mov t8,frames
28dec 8c7 10 5C 0E F5 | 		and t8,#16 wz
28df0 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
28df4 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
28df8 8ca             | 		
28df8 8ca             | 
28df8 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
28dfc 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
28e00 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
28e04 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
28e08 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
28e0c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
28e10 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
28e14 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
28e18 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
28e1c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
28e20 8d4 01 52 86 F1 |                 sub     sprite_h,#1
28e24 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
28e28 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
28e2c 8d7             | 
28e2c 8d7             | 
28e2c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
28e30 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
28e34 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
28e38 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
28e3c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
28e40 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
28e44 8dd 00 5E 06 F6 |                 mov 	t9,#0
28e48 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
28e4c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
28e50 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
28e54 8e1             |      
28e54 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
28e58 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
28e5c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
28e60 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
28e64 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
28e68 8e6             |                 
28e68 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
28e6c 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
28e70 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
28e74 8e9             |   		
28e74 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
28e78 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
28e7c 8eb             | 
28e7c 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
28e80 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
28e84 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
28e88 8ee             |  
28e88 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
28e8c 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
28e90 8f0 10 00 90 CD |      if_c 	jmp     #p899		
28e94 8f1             | 	
28e94 8f1             | 	
28e94 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
28e98 8f2 28 CD 01 F1 | 		add	t4,sprite_w
28e9c 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
28ea0 8f4             | 
28ea0 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
28ea4 8f5             | 
28ea4 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
28ea8 8f6 01 58 86 F1 | 	 	sub     t6,#1
28eac 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
28eb0 8f8             | 
28eb0 8f8 28 58 62 FD |                 setq   	t6
28eb4 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
28eb8 8fa 28 5D 02 F6 |                 mov t8,sprite_w
28ebc 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
28ec0 8fc 24 00 90 AD |         if_z    jmp #p898
28ec4 8fd             |          
28ec4 8fd             |         
28ec4 8fd 70 5F 06 F6 |                 mov  t9,#368
28ec8 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
28ecc 8ff             | 
28ecc 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
28ed0 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
28ed4 901 FF FF 7F FF 
28ed8 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
28edc 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
28ee0 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
28ee4 905 2D 01 00 F5 |                 and 0-0, t7
28ee8 906             |                
28ee8 906             | 
28ee8 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
28eec 907 E5 E0 7A FA |                 wmlong 368,t3				
28ef0 908             |                 
28ef0 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
28ef4 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
28ef8 90a 2D 00 64 FD |                 ret
28efc 90b             | 	
28efc 90b             | 	
28efc 90b             |                
28efc 90b             |  
28efc 90b             | '' -------------- Graphics line ------------------------------------------------------------
28efc 90b             |  
28efc 90b             | 
28efc 90b             | '' consts and vars
28efc 90b             | 
28efc 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
28f00 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
28f04 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
28f08 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
28f0c 90f             | 
28f0c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
28f10 910             | 
28f10 910             | '------ these longs will be set by setmode function
28f10 910             | 
28f10 910 00 00 00 00 | m_bs            long    0        'blanks before sync
28f14 911 00 00 00 00 | m_sn            long    0        'sync
28f18 912 00 00 00 00 | m_bv            long    0        'blanks before visible
28f1c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
28f20 914             | 'm_border        long    0        'left/right borders
28f20 914 00 00 00 00 | i_upporch       long    0        'up porch lines
28f24 915 00 00 00 00 | i_vsync         long    0        'vsync lines
28f28 916 00 00 00 00 | i_downporch     long    0        'down porch lines
28f2c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
28f30 918 00 00 00 00 | i_totalvis      long    0
28f34 919             | 
28f34 919             | '-------------------------------------
28f34 919             |  
28f34 919 00 00 00 00 | linenum         long    0
28f38 91a 00 00 00 00 | frames          long    0
28f3c 91b 00 00 00 00 | dlinum long 0
28f40 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
28f44 91d             | 
28f44 91d 00 00 00 00 | vblankptr       long    0
28f48 91e 00 00 00 00 | modeptr         long    0
28f4c 91f 00 00 00 00 | paletteptr      long    0
28f50 920 00 00 00 00 | dlptr           long    0
28f54 921 01 00 00 00 | hbase           long    1
28f58 922 00 00 00 00 | mailbox         long    0
28f5c 923 00 00 00 00 | spriteptr          long 0
28f60 924             | 
28f60 924 00 00 00 00 | cmd             long    0
28f64 925 00 B0 07 00 | buf1            long    $80000-16384-4096
28f68 926 00 04 00 00 | buf2            long    1024
28f6c 927 01 00 00 00 | dlptr2          long    1
28f70 928 01 00 00 00 | dl              long    1
28f74 929             | 
28f74 929 00 00 00 00 | buf1c long 0
28f78 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
28f7c 92b 01 00 00 00 | framebuf2       long    1
28f80 92c 01 00 00 00 | hsync0          long    1
28f84 92d 01 00 00 00 | hsync1          long    1
28f88 92e             | 
28f88 92e 01 00 00 00 | t1              long    1
28f8c 92f 00 00 00 00 | t2 long 0
28f90 930 00 00 00 00 | t3 long 0
28f94 931 00 00 00 00 | t4 long 0
28f98 932             | 
28f98 932 00 00 00 00 | rcnt            long    0  'dl repeat count
28f9c 933 00 00 00 00 | rcnt2           long    0
28fa0 934 00 00 00 00 | rcnt2a          long    0
28fa4 935 00 00 00 00 | roffset         long    0
28fa8 936 00 00 00 00 | rdl             long    0  'dl repeat line
28fac 937 00 00 00 00 | dlc             long    0  'dl command
28fb0 938             | 
28fb0 938 FF FF FF FF | affffffff       long    $ffffffff
28fb4 939 00 00 00 00 | sprite1pointer long 0
28fb8 93a 00 00 00 00 | sprite1xy      long 0
28fbc 93b 00 00 00 00 | sprite1wh      long 0
28fc0 93c 00 00 00 00 | sprite2pointer long 0
28fc4 93d 00 00 00 00 | sprite2xy      long 0
28fc8 93e 00 00 00 00 | sprite2wh      long 0
28fcc 93f 00 00 00 00 | sprite3pointer long 0
28fd0 940 00 00 00 00 | sprite3xy      long 0
28fd4 941 00 00 00 00 | sprite3wh      long 0
28fd8 942 00 00 00 00 | sprite4pointer long 0
28fdc 943 00 00 00 00 | sprite4xy      long 0
28fe0 944 00 00 00 00 | sprite4wh      long 0
28fe4 945 00 00 00 00 | sprite5pointer long 0
28fe8 946 00 00 00 00 | sprite5xy      long 0
28fec 947 00 00 00 00 | sprite5wh      long 0
28ff0 948 00 00 00 00 | sprite6pointer long 0
28ff4 949 00 00 00 00 | sprite6xy      long 0
28ff8 94a 00 00 00 00 | sprite6wh      long 0
28ffc 94b 00 00 00 00 | sprite7pointer long 0
29000 94c 00 00 00 00 | sprite7xy      long 0
29004 94d 00 00 00 00 | sprite7wh      long 0
29008 94e 00 00 00 00 | sprite8pointer long 0
2900c 94f 00 00 00 00 | sprite8xy      long 0
29010 950 00 00 00 00 | sprite8wh      long 0
29014 951 00 00 00 00 | sprite9pointer long 0
29018 952 00 00 00 00 | sprite9xy      long 0
2901c 953 00 00 00 00 | sprite9wh      long 0
29020 954 00 00 00 00 | sprite10pointer long 0
29024 955 00 00 00 00 | sprite10xy      long 0
29028 956 00 00 00 00 | sprite10wh      long 0
2902c 957 00 00 00 00 | sprite11pointer long 0
29030 958 00 00 00 00 | sprite11xy      long 0
29034 959 00 00 00 00 | sprite11wh      long 0
29038 95a 00 00 00 00 | sprite12pointer long 0
2903c 95b 00 00 00 00 | sprite12xy      long 0
29040 95c 00 00 00 00 | sprite12wh      long 0
29044 95d 00 00 00 00 | sprite13pointer long 0
29048 95e 00 00 00 00 | sprite13xy      long 0
2904c 95f 00 00 00 00 | sprite13wh      long 0
29050 960 00 00 00 00 | sprite14pointer long 0
29054 961 00 00 00 00 | sprite14xy      long 0
29058 962 00 00 00 00 | sprite14wh      long 0
2905c 963 00 00 00 00 | sprite15pointer long 0
29060 964 00 00 00 00 | sprite15xy      long 0
29064 965 00 00 00 00 | sprite15wh      long 0
29068 966 00 00 00 00 | sprite16pointer long 0
2906c 967 00 00 00 00 | sprite16xy      long 0
29070 968 00 00 00 00 | sprite16wh      long 0
29074 969 00 00 00 00 | sprite17pointer long 0
29078 96a 00 00 00 00 | sprite17xy      long 0
2907c 96b 00 00 00 00 | sprite17wh      long 0
29080 96c 00 00 00 00 | sprite18pointer long 0
29084 96d 00 00 00 00 | sprite18xy      long 0
29088 96e 00 00 00 00 | sprite18wh      long 0
2908c 96f 00 00 00 00 | spritenum long 0
29090 970             | 
29090 970 00 00 00 00 | spriteline long 0
29094 971 84 03 00 00 | sprite_x long 900
29098 972 00 00 00 00 | sprite_y long 0
2909c 973 10 00 00 00 | sprite_w long 16
290a0 974 40 00 00 00 | sprite_h long 64
290a4 975 00 00 00 00 | l2 long 0
290a8 976 00 00 00 00 | t5 long 0
290ac 977 00 00 00 00 | t6 long 0
290b0 978 00 00 00 00 | t7 long 0
290b4 979 00 00 00 00 | t8 long 0
290b8 97a 00 00 00 00 | t9 long 0
290bc 97b 00 00 00 00 | preloadaddr long 0
290c0 97c 00 00 00 00 | preloadlineaddr long 0
290c4 97d 00 04 00 00 | a1024 long 1024
290c8 97e             | 
290c8 97e E0 03 00 00 | aa long 992
290cc 97f FF 03 00 00 | a1023 long 1023
290d0 980 00 10 00 00 | a4096 long 4096
290d4 981             |  fit 368
290d4 981             | _psram_spin2_dat_
290d4 981 00 00 00 00 
      ...             
291cc 9bf 00 00 00 00 
291d0 9c0 00 00 00 00 |     listdata long 0[8*8]
291d4 9c1             |             orgh
291d4                 | 
291d4                 | ' driver state
291d4     FF FF FF FF | drivercog   long    -1  ' COG id of driver
291d8     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
291dc                 | 
291dc                 | ' delay profile
291dc     07 00 00 00 
291e0     00 CF 7B 05 
291e4     80 D1 F0 08 
291e8     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
291ec     80 C4 60 0F 
291f0     80 39 7A 12 
291f4     40 2D D9 13 
291f8     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
291fc                 | 
291fc                 | ' data to be passed to driver when starting it
291fc                 | startupData
291fc     00 00 00 00 |     long    0           ' current frequency
29200     00 00 00 00 |     long    FLAGS       ' optional flags for driver
29204     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
29208     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2920c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
29210     1C 92 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
29214     9C 92 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
29218     BC 92 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2921c                 | 
2921c                 | ' data for memory
2921c                 | deviceData
2921c                 |     ' 16 bank parameters follow (16MB per bank)
2921c     00 00 00 00 
      ...             
29254     00 00 00 00 
29258     00 00 00 00 |     long    0[16]                               ' banks 0-15
2925c                 |     ' 16 banks of pin parameters follow
2925c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
29260     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
29264     FF FF FF FF 
      ...             
29294     FF FF FF FF 
29298     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2929c                 | 
2929c                 | ' data for COG polling
2929c                 | qosData 
2929c     00 00 FF FF 
292a0     00 00 FF FF 
292a4     00 00 FF FF 
292a8     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
292ac     00 00 FF FF 
292b0     00 00 FF FF 
292b4     00 00 FF FF 
292b8     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
292bc                 |     
292bc                 | ' mailbox storage
292bc                 | 
292bc                 | mailboxes
292bc     00 00 00 00 
      ...             
29314     00 00 00 00 
29318     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2931c                 | 	alignl
2931c                 | _psram16drv_spin2_dat_
2931c                 |                             orgh
2931c     00 00 00 00 
      ...             
29334     00 00 00 00 
29338     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2933c                 | 
2933c                 | driver_start
2933c                 |                             org
2933c 000             | '..................................................................................................
2933c 000             | ' Memory layout for COG RAM once operational:
2933c 000             | '
2933c 000             | '  COG RAM address      Usage
2933c 000             | '  ---------------      ----
2933c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2933c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2933c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2933c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2933c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2933c 000             | '  ~$198-$1F3           State and register variables
2933c 000             | '
2933c 000             | ' Also during driver COG startup:
2933c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2933c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2933c 000             | '..................................................................................................
2933c 000             |                             
2933c 000             | ' Mailbox storage after vector initialization
2933c 000             | 
2933c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
29340 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
29344 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
29348 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2934c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
29350 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
29354 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
29358 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2935c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
29360 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
29364 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
29368 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2936c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
29370 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
29374 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
29378 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2937c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
29380 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
29384 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
29388 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2938c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
29390 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
29394 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
29398 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2939c 018             | 
2939c 018             | ' Mailbox parameter addresses per COG once patched
2939c 018             |                             
2939c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
293a0 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
293a4 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
293a8 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
293ac 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
293b0 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
293b4 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
293b8 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
293bc 020             | 
293bc 020             | '..................................................................................................
293bc 020             | ' Per COG request and state setup and service branching
293bc 020             |         
293bc 020             | cog0                 
293bc 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
293c0 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
293c4 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
293c8 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
293cc 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
293d0 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
293d4 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
293d8 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
293dc 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
293e0 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
293e4 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
293e8 02b 33 CA 63 FD |                             execf   request-0               'jump to service
293ec 02c             | cog1                        
293ec 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
293f0 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
293f4 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
293f8 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
293fc 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29400 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29404 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
29408 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2940c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
29410 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
29414 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29418 037 33 CA 63 FD |                             execf   request-0               'jump to service
2941c 038             | cog2                         
2941c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
29420 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
29424 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
29428 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2942c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29430 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29434 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
29438 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2943c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
29440 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
29444 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29448 043 33 CA 63 FD |                             execf   request-0               'jump to service
2944c 044             | cog3                        
2944c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
29450 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
29454 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
29458 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2945c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29460 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29464 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
29468 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2946c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
29470 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
29474 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29478 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2947c 050             | cog4                        
2947c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
29480 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
29484 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
29488 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2948c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29490 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29494 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
29498 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2949c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
294a0 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
294a4 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
294a8 05b 33 CA 63 FD |                             execf   request-0               'jump to service
294ac 05c             | cog5                        
294ac 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
294b0 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
294b4 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
294b8 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
294bc 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
294c0 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
294c4 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
294c8 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
294cc 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
294d0 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
294d4 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
294d8 067 33 CA 63 FD |                             execf   request-0               'jump to service
294dc 068             | cog6                        
294dc 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
294e0 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
294e4 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
294e8 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
294ec 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
294f0 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
294f4 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
294f8 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
294fc 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
29500 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
29504 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29508 073 33 CA 63 FD |                             execf   request-0               'jump to service
2950c 074             | cog7                        
2950c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
29510 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
29514 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
29518 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2951c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29520 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29524 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
29528 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2952c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
29530 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
29534 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29538 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2953c 080             |                             fit     128
2953c 080             | 
2953c 080             |                             fit     128
2953c 080             | pad                         long    0[128-$]                'align init code to $80
2953c 080             | 
2953c 080             | '..................................................................................................
2953c 080             | 
2953c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2953c 080             | 
2953c 080             | init                        
2953c 080             |                             ' get driver scratch long address in hub
2953c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
29540 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
29544 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
29548 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2954c 084             |                     
2954c 084             |                             ' read in the additional LUT RAM code
2954c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
29550 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
29554 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
29558 087             | 
29558 087             |                             ' read the startup parameters
29558 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2955c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
29560 089             | 
29560 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
29560 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
29564 08a             | 
29564 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
29568 08b 01 00 00 5F 
2956c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
29570 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
29574 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
29578 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2957c 090             | 
2957c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2957c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
29580 091 01 00 00 FF 
29584 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
29588 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2958c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
29590 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
29594 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
29598 097 08 DE 47 F5 |                             or      a, #8
2959c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
295a0 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
295a4 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
295a8 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
295ac 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
295b0 09d 01 DE 07 F1 |                             add     a, #1
295b4 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
295b8 09f             |  
295b8 09f             |                             ' setup device control pin states
295b8 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
295bc 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
295c0 0a1 01 00 00 FF 
295c4 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
295c8 0a3             | 
295c8 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
295cc 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
295d0 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
295d4 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
295d8 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
295dc 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
295e0 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
295e4 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
295e8 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
295ec 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
295f0 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
295f4 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
295f8 0af             | pinloop
295f8 0af             |                             ' generate minimum CE high time before access
295f8 0af A1 07 00 FF 
295fc 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
29600 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
29604 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
29608 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2960c 0b4 1F DE 63 FD |                             waitx   a                       'delay
29610 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
29614 0b6             | 
29614 0b6             |                             ' setup the COG mailboxes and addresses 
29614 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
29618 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2961c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
29620 0b9             | 
29620 0b9 28 2E 64 FD |                             setq    #24-1
29624 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
29628 0bb             | 
29628 0bb             |                             ' setup the polling loop for active COGs 
29628 0bb 01 C2 63 FD |                             cogid   id
2962c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
29630 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
29634 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
29638 0bf 0A F0 07 F6 |                             mov     ptra, #10
2963c 0c0 E1 F1 03 FA |                             mul     ptra, id
29640 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
29644 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
29648 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2964c 0c4 03 C2 07 FA |                             mul     id, #3
29650 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
29654 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
29658 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2965c 0c8 D8 01 B0 FD |                             call    #reloadcogs
29660 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
29664 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
29668 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
29668 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2966c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
29670 0cd 08 04 DC FC |                             rep     #2, #8
29674 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
29678 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2967c 0d0             | 
2967c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2967c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2967c 0d0 01 C2 63 FD |                             cogid   id
29680 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
29684 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
29688 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2968c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
29690 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
29694 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
29698 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2969c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
296a0 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
296a4 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
296a8 0db 3F E4 A7 F9 |                             alti    d, #%111_111
296ac 0dc 00 00 00 F6 |                             mov     0-0, 0-0
296b0 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
296b4 0de A5 E5 03 F1 |                             add     d, const512
296b8 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
296bc 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
296c0 0e1 00 00 00 F6 |                             mov     0-0, 0-0
296c4 0e2             |                             
296c4 0e2             |                             ' setup register values for control vector loop setup after we return
296c4 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
296c8 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
296cc 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
296d0 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
296d4 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
296d8 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
296dc 0e8 D0 C3 8F F9 |                             altd    id, #id0
296e0 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
296e4 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
296e8 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
296ec 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
296f0 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
296f4 0ee             |  
296f4 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
296f8 0ef 07 CA 07 F5 |                             and     request, #7
296fc 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
29700 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
29704 0f2             |                             fit     $100                    'ensure all init code fits this space
29704 0f2             | 
29704 0f2             |                             fit     $100                    'ensure all init code fits this space
29704 0f2             | 
29704 0f2 00 00 00 00 
      ...             
29734 0fe 00 00 00 00 
29738 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2973c 100             | 
2973c 100             | '..................................................................................................
2973c 100             | ' Error result handling and COG notification of request completion
2973c 100             | 
2973c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
29740 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
29744 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
29748 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2974c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
29750 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
29754 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
29758 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2975c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
29760 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
29764 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
29768 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2976c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
29770 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
29774 10e             | ' Poller re-starts here after a COG is serviced
29774 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
29778 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2977c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
29780 111             | ' Main dynamic polling loop repeats until a request arrives
29780 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
29784 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
29788 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2978c 114             | 
2978c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
29790 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
29794 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
29798 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2979c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
297a0 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
297a4 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
297a8 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
297ac 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
297b0 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
297b4 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
297b8 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
297bc 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
297c0 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
297c4 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
297c8 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
297cc 124             | 
297cc 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
297d0 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
297d4 126             |  
297d4 126             | '..................................................................................................
297d4 126             | ' List handler                               
297d4 126             | 
297d4 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
297d8 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
297dc 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
297e0 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
297e4 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
297e8 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
297ec 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
297f0 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
297f4 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
297f8 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
297fc 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
29800 131 33 00 60 FD |                             execf   0-0                     'process the request 
29804 132             | 
29804 132             | '..................................................................................................
29804 132             | ' Restoring per COG state and resuming where we left off
29804 132             | 
29804 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
29808 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2980c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
29810 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
29814 136 D8 CB FB F8 |                             getbyte request, addr1, #3
29818 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2981c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
29820 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
29824 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
29828 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2982c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
29830 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
29834 13e             |                    
29834 13e             | '..................................................................................................
29834 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
29834 13e             | 
29834 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
29838 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2983c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
29840 141 D0 DF B7 F9 |                             setd    a, #id0
29844 142 D8 DF BF F9 |                             sets    a, #addr1
29848 143 FE FF FF FF 
2984c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
29850 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
29854 146 3F DE A7 F9 |                             alti    a, #%111_111 
29858 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2985c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
29860 149 01 E2 63 FD |                             cogid   c
29864 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
29868 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2986c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
29870 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
29874 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
29878 14f 00 E0 03 F6 |                             mov     b, 0-0
2987c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
29880 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
29884 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
29888 153 0C 00 90 AD |             if_z            jmp     #excluded               
2988c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
29890 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
29894 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
29898 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2989c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
298a0 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
298a4 15a             | 
298a4 15a             | 'determine priority cogs and build instructions for the polling sequence
298a4 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
298a8 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
298ac 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
298b0 15d             | 
298b0 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
298b4 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
298b8 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
298bc 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
298c0 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
298c4 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
298c8 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
298cc 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
298d0 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
298d4 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
298d8 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
298dc 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
298e0 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
298e4 16a             | endprioloop
298e4 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
298e8 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
298ec 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
298f0 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
298f4 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
298f8 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
298fc 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
29900 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
29904 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
29908 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2990c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
29910 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
29914 176             | 
29914 176             | ' populate the round robin COG polling instructions
29914 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
29918 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2991c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
29920 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
29924 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
29928 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2992c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
29930 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
29934 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
29938 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2993c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
29940 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
29944 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
29948 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2994c 184             | '..................................................................................................
2994c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2994c 184             | 
2994c 184             | set_latency                                                 '            (a) set latency
2994c 184             | get_latency                                                 '            (b) get latency
2994c 184             | set_burst                                                   '            (c) set burst size of bank
2994c 184             | get_burst                                                   '            (d) get burst size of bank
2994c 184             |                                                             '            (e) dump state
2994c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
29950 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
29954 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
29958 187             |                                                             ' | | | | e  account for following AUGS
29958 187 04 00 00 FF 
2995c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
29960 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
29964 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
29968 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2996c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
29970 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
29974 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
29978 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2997c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
29980 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
29984 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
29988 193             | 
29988 193             | '..................................................................................................
29988 193             | ' Misc EXECF code
29988 193             | 
29988 193 33 72 63 FD | start_read_exec             execf   newburstr
2998c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
29990 195 33 78 63 FD | continue_read_exec          execf   lockedreads
29994 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
29998 197             | 
29998 197             | '..................................................................................................
29998 197             | ' Variables
29998 197             | 
29998 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2999c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
299a0 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
299a4 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
299a8 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
299ac 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
299b0 19d             | 
299b0 19d 00 00 00 80 | xfreq1          long    $80000000
299b4 19e 00 00 00 40 | xfreq2          long    $40000000
299b8 19f 03 00 00 00 | delay           long    3
299bc 1a0             | 
299bc 1a0             | lutcodeaddr                 
299bc 1a0             | startupparams
299bc 1a0             | excludedcogs                                    'careful: shared register use!
299bc 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
299c0 1a1 00 00 00 00 | flags           long    0
299c4 1a2             | mask                                            'careful: shared register use!
299c4 1a2 00 00 00 00 | resetmaskA      long    0
299c8 1a3             | limit                                           'careful: shared register use!
299c8 1a3 00 00 00 00 | resetmaskB      long    0
299cc 1a4 00 00 00 00 | datapins        long    0
299d0 1a5             | const512                                        'careful: shared register use!
299d0 1a5 00 00 00 00 | devicelist      long    0
299d4 1a6 00 00 00 00 | coglist         long    0
299d8 1a7 00 00 00 00 | mbox            long    0 
299dc 1a8             | 
299dc 1a8             | clkpin                                          'shared with code patched during init
299dc 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
299e0 1a9             | cspin                                           'shared with code patched during init
299e0 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
299e4 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
299e8 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
299ec 1ac 01 00 00 00 | clkdelay        long    1
299f0 1ad 00 00 00 00 | regdatabus      long    0
299f4 1ae             | 
299f4 1ae 10 00 00 00 | deviceaddr      long    $10
299f8 1af             | rrcounter
299f8 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
299fc 1b0             | 
299fc 1b0             | ' jump addresses for the per COG handlers
299fc 1b0 20 00 00 00 | cog0_handler    long    cog0
29a00 1b1 2C 00 00 00 | cog1_handler    long    cog1
29a04 1b2 38 00 00 00 | cog2_handler    long    cog2
29a08 1b3 44 00 00 00 | cog3_handler    long    cog3
29a0c 1b4 50 00 00 00 | cog4_handler    long    cog4
29a10 1b5 5C 00 00 00 | cog5_handler    long    cog5
29a14 1b6 68 00 00 00 | cog6_handler    long    cog6
29a18 1b7 74 00 00 00 | cog7_handler    long    cog7
29a1c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
29a20 1b9             | 
29a20 1b9             | ' EXECF sequences
29a20 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
29a24 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
29a28 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
29a2c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
29a30 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
29a34 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
29a38 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
29a3c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
29a3c 1c0             | 
29a3c 1c0             | 
29a3c 1c0             | ' SKIPF sequences
29a3c 1c0             | skiptable
29a3c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
29a40 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
29a44 1c2 00 00 00 00 |                 long    0                      ' read modify write long
29a48 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
29a4c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
29a50 1c5 00 00 00 00 | pattern2        long    0
29a54 1c6 00 00 00 00 | pattern3        long    0
29a58 1c7 77 02 00 00 | singlelong      long    %1001110111  
29a5c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
29a60 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
29a64 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
29a68 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
29a6c 1cc             | 
29a6c 1cc             | ' LUT RAM address values
29a6c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
29a70 1cd DD 02 00 00 | continue_read   long    continue_read_lut
29a74 1ce DB 02 00 00 | continue_write  long    continue_write_lut
29a78 1cf F6 02 00 00 | noread          long    noread_lut
29a7c 1d0             | 
29a7c 1d0 00 00 00 00 | id0             long    0
29a80 1d1 01 00 00 00 | id1             long    1
29a84 1d2 02 00 00 00 | id2             long    2
29a88 1d3 03 00 00 00 | id3             long    3
29a8c 1d4 04 00 00 00 | id4             long    4
29a90 1d5 05 00 00 00 | id5             long    5
29a94 1d6 06 00 00 00 | id6             long    6
29a98 1d7 07 00 00 00 | id7             long    7
29a9c 1d8             | 
29a9c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
29a9c 1d8             | 'and COG updates and need to follow immediately after id0-id7
29a9c 1d8 00 00 00 00 | addr1           long    0
29aa0 1d9 00 00 00 00 | hubdata         long    0
29aa4 1da 00 00 00 00 | count           long    0
29aa8 1db 00 00 00 00 | addr2           long    0
29aac 1dc 00 00 00 00 | total           long    0
29ab0 1dd 00 00 00 00 | offset1         long    0
29ab4 1de 00 00 00 00 | offset2         long    0
29ab8 1df 00 00 00 00 | link            long    0
29abc 1e0             | 
29abc 1e0             | burstwrite                                      'note shared register use during init
29abc 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
29ac0 1e1 00 00 00 00 | id              long    0
29ac4 1e2             | 
29ac4 1e2 00 00 00 00 | header          long    0
29ac8 1e3 00 00 00 00 | trailer         long    0
29acc 1e4 00 00 00 00 | cmdaddr         long    0
29ad0 1e5 00 00 00 00 | request         long    0
29ad4 1e6 00 00 00 00 | rrlimit         long    0
29ad8 1e7 00 00 00 00 | pinconfig       long    0
29adc 1e8 00 00 00 00 | clks            long    0
29ae0 1e9 00 00 00 00 | resume          long    0
29ae4 1ea 00 00 00 00 | orighubsize     long    0
29ae8 1eb 00 00 00 00 | wrclks          long    0
29aec 1ec             | 
29aec 1ec 00 00 00 00 | pattern         long    0
29af0 1ed 00 00 00 00 | hubscratch      long    0
29af4 1ee 00 10 00 00 | val4k           long    4096
29af8 1ef             | 
29af8 1ef             | ' temporary general purpose regs
29af8 1ef 00 00 00 00 | a               long    0
29afc 1f0 00 00 00 00 | b               long    0
29b00 1f1 00 00 00 00 | c               long    0
29b04 1f2 00 00 00 00 | d               long    0
29b08 1f3             |                 fit     502
29b08 1f3             | 
29b08 1f3             |                 fit     502
29b08 1f3             | 
29b08 1f3             | '..................................................................................................
29b08 1f3             | 
29b08 1f3             |             orgh
29b08                 | 
29b08                 | lut_code
29b08                 | 'HW init code up to 80 longs
29b08                 | 
29b08                 | '..................................................................................................
29b08                 | ' Memory layout for LUT RAM once operational:
29b08                 | '
29b08                 | '  LUT RAM address      Usage
29b08                 | '  ---------------      ----
29b08                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
29b08                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
29b08                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
29b08                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
29b08                 | '
29b08                 | ' Also during driver COG startup:
29b08                 | ' $230-$24F is used for HW init setup
29b08                 | ' $250-$26F is used as temporary vector storage 
29b08                 | '..................................................................................................
29b08                 | 
29b08                 |                 org $230    
29b08 230             | 
29b08 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
29b08 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
29b0c 231 24 16 60 FD |                             pollxfi
29b10 232 FF AA 2A FF 
29b14 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
29b18 234 28 00 B0 FD |                             call    #sendqspi
29b1c 235 07 F8 07 FF 
29b20 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
29b24 237 28 00 B0 FD |                             call    #sendspi
29b28 238 F8 07 78 FF 
29b2c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
29b30 23a 1C 00 B0 FD |                             call    #sendspi
29b34 23b 7F 78 78 FF 
29b38 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
29b3c 23d 10 00 B0 FD |                             call    #sendspi 
29b40 23e 2D 00 64 FD |                             ret
29b44 23f             | 
29b44 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
29b48 240 32 0C 64 FD |                             skipf   #%110
29b4c 241 9C EF 03 F6 |                             mov     pb, xsendimm
29b50 242             | 
29b50 242 10 D0 07 F6 | sendspi                     mov     clks, #16
29b54 243 97 EF 03 F6 |                             mov     pb, ximm8lut
29b58 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
29b5c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
29b60 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
29b64 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
29b68 248 24 36 60 FD |                             waitxfi                         'wait for the completion
29b6c 249 50 48 63 FD |                             fltl    datapins                'float data bus
29b70 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
29b74 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
29b78 24c             | 
29b78 24c 00 00 00 00 
29b7c 24d 00 00 00 00 
29b80 24e 00 00 00 00 
29b84 24f 00 00 00 00 |                 long    0[$270-32-$]
29b88 250             |                 fit     $270-32  ' keep room for 32 vector longs
29b88 250             |     
29b88 250             |                 fit     $270-32  ' keep room for 32 vector longs
29b88 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
29b88 250             | rw_vect ' PSRAM jump vectors
29b88 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
29b8c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
29b90 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
29b94 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
29b98 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
29b9c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
29ba0 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
29ba4 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
29ba8 258             | ro_vect ' R/O PSRAM jump vectors
29ba8 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
29bac 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
29bb0 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
29bb4 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
29bb8 25c 00 01 00 00 |                 long    unsupported
29bbc 25d 00 01 00 00 |                 long    unsupported
29bc0 25e 00 01 00 00 |                 long    unsupported
29bc4 25f 00 01 00 00 |                 long    unsupported
29bc8 260             | ctrl_vect ' Control jump vectors
29bc8 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
29bcc 261 00 01 00 00 |                 long    unsupported
29bd0 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
29bd4 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
29bd8 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
29bdc 265 00 01 00 00 |                 long    unsupported
29be0 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
29be4 267 3E 01 00 00 |                 long    reconfig 
29be8 268             | no_vect ' Invalid bank jump vectors
29be8 268 01 01 00 00 |                 long    invalidbank
29bec 269 01 01 00 00 |                 long    invalidbank
29bf0 26a 01 01 00 00 |                 long    invalidbank
29bf4 26b 01 01 00 00 |                 long    invalidbank
29bf8 26c 01 01 00 00 |                 long    invalidbank
29bfc 26d 01 01 00 00 |                 long    invalidbank
29c00 26e 01 01 00 00 |                 long    invalidbank
29c04 26f 01 01 00 00 |                 long    invalidbank
29c08 270             |                 fit     $270
29c08 270             | 
29c08 270             |                 fit     $270
29c08 270             | '..................................................................................................
29c08 270             | ' PSRAM READS
29c08 270             |                                                             ' a b c d e f
29c08 270             |                                                             ' B W L B R L  (a) byte read
29c08 270             |                                                             ' Y O O U E O  (b) word read
29c08 270             |                                                             ' T R N R S C  (c) long read
29c08 270             |                                                             ' E D G S U K  (d) new burst read
29c08 270             |                                                             '       T M E  (e) resumed sub-burst
29c08 270             |                                                             '         E D  (f) locked sub-burst
29c08 270             | 
29c08 270             | 
29c08 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
29c0c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
29c10 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
29c14 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
29c18 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
29c1c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
29c20 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
29c24 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
29c28 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
29c2c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
29c30 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
29c34 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
29c38 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
29c3c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
29c40 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
29c44 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
29c48 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
29c4c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
29c50 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
29c54 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
29c58 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
29c5c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
29c60 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
29c64 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
29c68 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
29c6c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
29c70 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
29c74 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
29c78 28c             | 
29c78 28c             |                             ' fall through to read bursts
29c78 28c             |                         
29c78 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
29c78 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
29c7c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
29c80 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
29c84 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
29c88 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
29c8c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
29c90 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
29c94 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
29c98 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
29c9c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
29ca0 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
29ca4 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
29ca8 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
29cac 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
29cb0 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
29cb4 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
29cb8 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
29cbc 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
29cc0 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
29cc4 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
29cc8 2a0 E8 D1 03 F1 |                             add     clks, clks
29ccc 2a1             | readcommon
29ccc 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
29cd0 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
29cd4 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
29cd8 2a4             | 
29cd8 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
29cdc 2a5 69 C8 63 FD |                             rev     cmdaddr
29ce0 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
29ce4 2a7 61 C8 63 FD |                             mergeb  cmdaddr
29ce8 2a8             | 
29ce8 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
29cec 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
29cf0 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
29cf0 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
29cf4 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
29cf8 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
29cfc 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
29d00 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
29d00 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
29d04 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
29d08 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
29d0c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
29d10 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
29d14 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
29d18 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
29d18 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
29d1c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
29d20 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
29d24 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
29d28 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
29d2c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
29d30 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
29d34 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
29d38 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
29d3c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
29d40 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
29d44 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
29d48 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
29d4c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
29d50 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
29d50 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
29d54 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
29d58 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
29d5c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
29d60 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
29d64 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
29d68 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
29d6c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
29d70 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
29d74 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
29d78 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
29d7c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
29d80 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
29d84 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
29d88 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
29d8c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
29d90 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
29d94 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
29d98 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
29d9c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
29da0 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
29da4 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
29da8 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
29dac 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
29db0 2da 10 03 90 FD |                             jmp     #writecommon
29db4 2db             | 
29db4 2db             | '..................................................................................................
29db4 2db             | ' Burst continuation testing
29db4 2db             | 
29db4 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
29db8 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
29dbc 2dd             | continue_read_lut          
29dbc 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
29dc0 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
29dc4 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
29dc8 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
29dcc 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
29dd0 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
29dd4 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
29dd8 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
29ddc 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
29de0 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
29de4 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
29de8 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
29dec 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
29df0 2ea             | 
29df0 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
29df4 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
29df8 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
29dfc 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
29e00 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
29e04 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
29e08 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
29e0c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
29e10 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
29e14 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
29e18 2f4 2A 1C 66 0D |             _ret_           push    #poller
29e1c 2f5             | 
29e1c 2f5             | 
29e1c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
29e20 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
29e20 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
29e24 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
29e28 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
29e2c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
29e30 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
29e34 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
29e38 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
29e3c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
29e40 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
29e44 2ff             | '..................................................................................................
29e44 2ff             | ' Completion of requests
29e44 2ff             | 
29e44 2ff             | complete_rw_lut             
29e44 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
29e48 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
29e4c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
29e50 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
29e54 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
29e58 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
29e5c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
29e60 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
29e64 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
29e68 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
29e6c 309 32 62 64 AD |             if_z            skipf   #%110001
29e70 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
29e74 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
29e78 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
29e7c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
29e80 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
29e84 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
29e88 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
29e8c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
29e90 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
29e94 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
29e98 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
29e9c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
29ea0 316             |                                                             ' skipcase (a) gfx copy to/from hub
29ea0 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
29ea0 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
29ea0 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
29ea4 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
29ea8 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
29eac 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
29eb0 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
29eb4 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
29eb8 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
29ebc 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
29ec0 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
29ec4 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
29ec8 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
29ecc 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
29ed0 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
29ed4 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
29ed8 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
29edc 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
29ee0 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
29ee4 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
29ee8 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
29eec 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
29ef0 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
29ef4 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
29ef8 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
29efc 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
29f00 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
29f04 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
29f08 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
29f0c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
29f10 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
29f14 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
29f18 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
29f1c 335 DF B7 03 A6 |             if_z            mov     addr2, link
29f20 336 34 FF 9F AD |             if_z            jmp     #checknext
29f24 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
29f28 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
29f2c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
29f30 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
29f34 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
29f38 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
29f3c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
29f40 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
29f44 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
29f48 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
29f4c 341             | 
29f4c 341             | '..................................................................................................
29f4c 341             | ' PSRAM WRITES
29f4c 341             |                                                             '  a b c d e f g h
29f4c 341             | 
29f4c 341             |                                                             '  B W L F B R L L (a) byte write(s)
29f4c 341             |                                                             '  Y O O I U E O O (b) word write(s)
29f4c 341             |                                                             '  T R N L R S C C (c) long write(s)
29f4c 341             |                                                             '  E D G L S U K K (d) resumed fill
29f4c 341             |                                                             '          T M E E (e) new burst write
29f4c 341             |                                                             '            E D D (f) resumed burst
29f4c 341             |                                                             '              F B (g) locked fill
29f4c 341             |                                                             '              I U (h) locked burst write
29f4c 341             |                                                             '              L R 
29f4c 341             |                                                             '              L S 
29f4c 341             |                                                             '                T 
29f4c 341             | 
29f4c 341             | w_single                   
29f4c 341             | w_fill_cont           
29f4c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
29f50 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
29f54 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
29f58 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
29f5c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
29f60 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
29f64 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
29f68 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
29f6c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
29f70 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
29f74 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
29f78 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
29f7c 34d             |                ' disable call to r_resume_burst for single longs when z=0
29f7c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
29f80 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
29f84 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
29f88 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
29f8c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
29f90 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
29f94 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
29f98 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
29f9c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
29fa0 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
29fa4 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
29fa8 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
29fac 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
29fb0 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
29fb4 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
29fb8 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
29fbc 35d             |         
29fbc 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
29fbc 35d             |             '
29fbc 35d             |             '  At least one of these 3 optional components will be sent
29fbc 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
29fbc 35d             |             '     body - N x full longs of data
29fbc 35d             |             '     trailer - last partial long of data
29fbc 35d             |             '
29fbc 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
29fbc 35d             |             '
29fbc 35d             |             'Case    Type                           Sends
29fbc 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
29fbc 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
29fbc 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
29fbc 35d             |             ' 4)     Multiple long fill             body only
29fbc 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
29fbc 35d             | 
29fbc 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
29fbc 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
29fc0 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
29fc4 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
29fc8 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
29fcc 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
29fd0 362 13 8C 07 F6 |                             mov     pattern3, #%10011
29fd4 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
29fd8 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
29fdc 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
29fe0 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
29fe4 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
29fe8 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
29fec 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
29ff0 36a             |                             
29ff0 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29ff4 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
29ff8 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
29ffc 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2a000 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2a004 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2a008 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2a00c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2a010 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2a014 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2a018 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2a01c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2a020 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2a024 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2a028 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2a02c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2a030 37a             | 
2a030 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2a034 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2a038 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2a03c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2a040 37e             |                  
2a040 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2a044 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2a048 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2a04c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2a050 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2a054 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2a058 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2a05c 385             | 
2a05c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2a060 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2a064 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2a068 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2a06c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2a070 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2a074 38b             | 
2a074 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2a074 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2a078 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2a07c 38d 2A B0 63 FD |                             push    addr1                   'save address
2a080 38e             | 
2a080 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2a080 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2a084 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2a088 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2a08c 391             |             
2a08c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2a090 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2a094 393 2B B0 63 FD |                             pop     addr1                   'restore address
2a098 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2a09c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2a0a0 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2a0a4 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2a0a8 398             | 
2a0a8 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2a0ac 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2a0b0 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2a0b4 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2a0b8 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2a0bc 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2a0c0 39e             | 
2a0c0 39e             |                             'trailer is done
2a0c0 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2a0c4 39f             | 
2a0c4 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2a0c8 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2a0cc 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2a0d0 3a2             | 
2a0d0 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2a0d4 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2a0d8 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2a0dc 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2a0e0 3a6             |                             
2a0e0 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2a0e4 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2a0e8 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2a0ec 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2a0f0 3aa             |                                                          
2a0f0 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2a0f4 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2a0f8 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2a0fc 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2a100 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2a104 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2a108 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2a10c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2a110 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2a114 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2a118 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2a11c 3b5             |  
2a11c 3b5 59 52 63 FD |                             drvh    cspin
2a120 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2a124 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2a128 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2a12c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2a130 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2a134 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2a138 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2a13c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2a140 3be EA E5 03 F6 |                             mov     d, orighubsize
2a144 3bf EF E5 63 F0 |                             shl     d, a
2a148 3c0 F2 E3 83 F1 |                             sub     c, d
2a14c 3c1 DD E3 03 F1 |                             add     c, offset1
2a150 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2a154 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2a158 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2a15c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2a160 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2a164 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2a168 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2a16c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2a170 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2a174 3cb BB D3 03 F6 |                             mov     resume, restorefill
2a178 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2a17c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2a180 3ce 6C FC BF CD |             if_c            call    #yield
2a184 3cf 2D 00 64 FD |                             ret
2a188 3d0             |                            
2a188 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2a188 3d0             |                       '     rczl    pa                      'rotate left into address offset
2a188 3d0             |                       '     rczl    c wcz                   'restore count and flags
2a188 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2a18c 3d1 02 EC 67 F0 |                             shl     pa, #2
2a190 3d2 28 06 64 AD |             if_z            setq    #3
2a194 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2a198 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2a19c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2a1a0 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2a1a4 3d7             | 
2a1a4 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2a1a8 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2a1ac 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2a1b0 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2a1b4 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2a1b8 3dc             |                 fit 1024-32
2a1b8 3dc             |         
2a1b8 3dc             | 
2a1b8 3dc             | '..................................................................................................
2a1b8 3dc             | 
2a1b8 3dc             |                 fit 1024-32
2a1b8 3dc 00 00 00 00 
2a1bc 3dd 00 00 00 00 
2a1c0 3de 00 00 00 00 
2a1c4 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2a1c8 3e0             |                 org 1024-32
2a1c8 000             | 
2a1c8 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2a1c8 000 00 00 00 00 |                 long $0000
2a1cc 001 11 11 00 00 |                 long $1111
2a1d0 002 22 22 00 00 |                 long $2222
2a1d4 003 33 33 00 00 |                 long $3333
2a1d8 004 44 44 00 00 |                 long $4444
2a1dc 005 55 55 00 00 |                 long $5555
2a1e0 006 66 66 00 00 |                 long $6666
2a1e4 007 77 77 00 00 |                 long $7777
2a1e8 008 88 88 00 00 |                 long $8888
2a1ec 009 99 99 00 00 |                 long $9999
2a1f0 00a AA AA 00 00 |                 long $aaaa
2a1f4 00b BB BB 00 00 |                 long $bbbb
2a1f8 00c CC CC 00 00 |                 long $cccc
2a1fc 00d DD DD 00 00 |                 long $dddd
2a200 00e EE EE 00 00 |                 long $eeee
2a204 00f FF FF 00 00 |                 long $ffff
2a208 010             | 
2a208 010             | 'masks
2a208 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2a20c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2a210 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2a214 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2a218 014             | 
2a218 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2a21c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2a220 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2a224 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2a228 018             | 
2a228 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2a22c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2a230 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2a234 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2a238 01c             | 
2a238 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2a23c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2a240 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2a244 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2a248 020             |         fit 1024
2a248 020             | 
2a248 020             |         fit 1024
2a248 020             | 
2a248 020             | '--------------------------------------------------------------------------------------------------
2a248 020             |         orgh
2a248                 | 
2a248                 | gfxexpansion
2a248                 |                             'simple line drawing graphics expansion of memory driver
2a248                 |                             'jmp     #donerepeats                'just return for now
2a248                 | 
2a248     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2a24c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2a250     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2a254     DD E1 03 F6 |                             mov     b, offset1              'get error term
2a258     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2a25c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2a260     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2a264     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2a268     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2a26c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2a270     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2a274     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2a278     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2a27c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2a280     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2a284     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2a288     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2a28c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2a290     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2a294     DC E5 33 F9 |                             getword d, total, #0            'get line width
2a298     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2a29c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2a2a0     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2a2a4     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2a2a8     C3 03 80 FD |                             jmp     #readmask               'continue filling
2a2ac                 | 	alignl
2a2ac                 | _usbnew_spin2_dat_
2a2ac                 |                 org     $000
2a2ac 000             | 
2a2ac 000             | usb_host_start
2a2ac 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2a2b0 001             | 
2a2b0 001 03 00 00 FF 
2a2b4 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2a2b8 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2a2bc 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2a2c0 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2a2c4 006 29 70 63 FD |                 setq2   htmp
2a2c8 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2a2cc 008             | 
2a2cc 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2a2d0 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2a2d4 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2a2d8 00b             | 
2a2d8 00b             | '------------------------------------------------------------------------------
2a2d8 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2a2d8 00b             | ' special because the receiving function must not respond with either STALL or
2a2d8 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2a2d8 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2a2d8 00b             | ' corrupt packet, it must ignore the transaction
2a2d8 00b             | '------------------------------------------------------------------------------
2a2d8 00b             | ' On entry:
2a2d8 00b             | '   PTRA - start address of the SETUP data struct.
2a2d8 00b             | ' On exit:
2a2d8 00b             | '   retval - PID_ACK on success, otherwise error code.
2a2d8 00b             | '------------------------------------------------------------------------------
2a2d8 00b             | txn_setup
2a2d8 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2a2dc 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2a2e0 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2a2e4 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2a2e8 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2a2ec 010             | .setup
2a2ec 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2a2f0 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a2f4 012 2D 00 64 AD |         if_z    ret
2a2f8 013 7C 0B B0 FD |                 call    #retry_wait
2a2fc 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a300 015 2D 00 64 AD |         if_z    ret
2a304 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2a308 017 E0 FF 9F FD |                 jmp     #.setup
2a30c 018             | 
2a30c 018             | '------------------------------------------------------------------------------
2a30c 018             | ' IN/INTERRUPT transaction.
2a30c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2a30c 018             | '------------------------------------------------------------------------------
2a30c 018             | ' On entry:
2a30c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2a30c 018             | '     CRC(b19..23).
2a30c 018             | ' On exit:
2a30c 018             | '------------------------------------------------------------------------------
2a30c 018             | txn_in
2a30c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2a310 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2a314 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2a318 01b             | 
2a318 01b             |                 ' Fall through to urx_packet
2a318 01b             | 
2a318 01b             | '------------------------------------------------------------------------------
2a318 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2a318 01b             | ' received are handshakes and IN DATAx.
2a318 01b             | '------------------------------------------------------------------------------
2a318 01b             | ' On entry:
2a318 01b             | ' On exit:
2a318 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2a318 01b             | '     returned.
2a318 01b             | '------------------------------------------------------------------------------
2a318 01b             | urx_packet
2a318 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2a31c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2a320 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2a324 01e 1A 92 63 FD |                 getct   hct2
2a328 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2a32c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2a330 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2a334 022             | .wait_sop
2a334 022 22 A7 8A FA |                 rdpin   urx, dm
2a338 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2a33c 024 08 00 90 CD |         if_c    jmp     #.get_pid
2a340 025 FC 25 CC FB |                 jnct2   #.wait_sop
2a344 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2a348 027             | .get_pid
2a348 027 28 02 B0 FD |                 call    #urx_next
2a34c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2a350 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2a354 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2a358 02b             | .chk_pid
2a358 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a35c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2a360 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2a364 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2a368 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2a36c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2a370 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2a374 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2a378 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2a37c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2a380 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2a384 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2a388 037             | .ack_resend
2a388 037 22 A7 82 FA |                 rqpin   urx, dm
2a38c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2a390 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2a394 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2a398 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2a39c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2a3a0 03d             | .chk_eop
2a3a0 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a3a4 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2a3a8 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2a3ac 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2a3b0 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2a3b4 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2a3b8 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2a3bc 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2a3c0 045 2D 00 64 FD |                 ret
2a3c4 046             | .idle
2a3c4 046 22 A7 82 FA |                 rqpin   urx, dm
2a3c8 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2a3cc 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2a3d0 049 2D 00 64 FD |                 ret
2a3d4 04a             | 
2a3d4 04a             | '------------------------------------------------------------------------------
2a3d4 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2a3d4 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2a3d4 04a             | ' if one is required.
2a3d4 04a             | '------------------------------------------------------------------------------
2a3d4 04a             | ' On entry:
2a3d4 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2a3d4 04a             | ' On exit:
2a3d4 04a             | '------------------------------------------------------------------------------
2a3d4 04a             | utx_token
2a3d4 04a 22 A7 82 FA |                 rqpin   urx, dm
2a3d8 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2a3dc 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2a3e0 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2a3e4 04e 34 0D B0 CD |         if_c    call    #utx_pre
2a3e8 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2a3ec 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2a3f0 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2a3f4 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2a3f8 053             | .next_byte
2a3f8 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2a3fc 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2a400 055             | .wait
2a400 055 40 46 72 FD |                 testp   dp                      wc
2a404 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a408 057 23 03 08 FC |                 akpin   dp
2a40c 058 22 A5 22 FC |                 wypin   utx, dm
2a410 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2a414 05a             | 
2a414 05a             | '------------------------------------------------------------------------------
2a414 05a             | ' SETUP/OUT/INTERRUPT transaction.
2a414 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2a414 05a             | '------------------------------------------------------------------------------
2a414 05a             | ' On entry:
2a414 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2a414 05a             | '     CRC(b19..23).
2a414 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2a414 05a             | '   pkt_data - count of DATAx payload bytes to send.
2a414 05a             | ' On exit:
2a414 05a             | '------------------------------------------------------------------------------
2a414 05a             | txn_out
2a414 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2a418 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2a41c 05c 00 00 C0 FF 
2a420 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2a424 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2a428 05f             | 
2a428 05f             |                 ' Fall through to utx_data
2a428 05f             | 
2a428 05f             | '------------------------------------------------------------------------------
2a428 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2a428 05f             | ' calculated while the data byte is being shifted out. Since data stage
2a428 05f             | ' success/fail is not determined until the status stage of the transaction,
2a428 05f             | ' this routine is only concerned about the current DATAx packet.
2a428 05f             | '------------------------------------------------------------------------------
2a428 05f             | ' On entry:
2a428 05f             | '   PTRA - hub start address of the data to read.
2a428 05f             | '   pkt_cnt - data payload size.
2a428 05f             | ' On exit:
2a428 05f             | '------------------------------------------------------------------------------
2a428 05f             | utx_data
2a428 05f 22 A7 82 FA |                 rqpin   urx, dm
2a42c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2a430 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2a434 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2a438 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2a43c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2a440 065 D8 0C B0 CD |         if_c    call    #utx_pre
2a444 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2a448 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2a44c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2a450 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2a454 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2a458 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2a45c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2a460 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2a464 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2a468 06f             | .read_byte
2a468 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2a46c 070 F0 00 B0 FD |                 call    #utx_byte
2a470 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2a474 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2a478 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2a47c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2a480 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2a484 076             | .send_crc
2a484 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2a488 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2a48c 078 D0 00 B0 FD |                 call    #utx_byte
2a490 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2a494 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2a498 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2a49c 07c             | 
2a49c 07c             | '------------------------------------------------------------------------------
2a49c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2a49c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2a49c 07c             | ' expects that the packet includes at least the CRC word.
2a49c 07c             | '
2a49c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2a49c 07c             | ' was requested, which makes it difficult to determine where the data stops
2a49c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2a49c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2a49c 07c             | ' USB-16 expected residual value of 0xB001.
2a49c 07c             | '
2a49c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2a49c 07c             | ' so the caller can verify IN success before writing the data to its final
2a49c 07c             | ' destination.
2a49c 07c             | '------------------------------------------------------------------------------
2a49c 07c             | ' On entry:
2a49c 07c             | '   pkt_data - max byte count expected to be in the packet.
2a49c 07c             | '   newb_flg - signals new byte ready when toggled.
2a49c 07c             | ' On exit:
2a49c 07c             | '   pkt_cnt - actual number of bytes read.
2a49c 07c             | '------------------------------------------------------------------------------
2a49c 07c             | urx_data
2a49c 07c F7 75 03 F6 |                 mov     htmp2, pb
2a4a0 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2a4a4 07e 00 00 C0 FF 
2a4a8 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2a4ac 080 BA EF 03 F6 |                 mov     pb, htmp2
2a4b0 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2a4b4 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2a4b8 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2a4bc 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2a4c0 085             | .wait_byte
2a4c0 085             | ' In-line rx for max speed
2a4c0 085 22 A7 82 FA |                 rqpin   urx, dm
2a4c4 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2a4c8 087 53 A5 02 F5 |                 and     utx, urx
2a4cc 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2a4d0 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2a4d4 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2a4d8 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2a4dc 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2a4e0 08d DC FF 9F FD |                 jmp     #.wait_byte
2a4e4 08e             | .get_byte
2a4e4 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2a4e8 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2a4ec 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2a4f0 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2a4f4 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2a4f8 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2a4fc 094             | .end_crc
2a4fc 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2a500 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2a504 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2a508 097 2D 00 64 1D |         if_a    ret
2a50c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2a50c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2a50c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2a50c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2a50c 098 22 A7 82 FA |                 rqpin   urx, dm
2a510 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2a514 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2a518 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2a518 09b             | .chk_crc
2a518 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2a51c 09c 58 00 00 FF 
2a520 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2a524 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2a528 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2a52c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2a530 0a1 34 09 B0 FD |                 call    #poll_waitx
2a534 0a2             | 
2a534 0a2             |                 ' Fall through to utx_handshake
2a534 0a2             | 
2a534 0a2             | '------------------------------------------------------------------------------
2a534 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2a534 0a2             | ' the appropriate IP delay has been inserted.
2a534 0a2             | '------------------------------------------------------------------------------
2a534 0a2             | ' On entry:
2a534 0a2             | '   retval - handshake PID to send.
2a534 0a2             | ' On exit:
2a534 0a2             | '   retval unchanged.
2a534 0a2             | '------------------------------------------------------------------------------
2a534 0a2             | utx_handshake
2a534 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2a538 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2a53c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2a540 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2a544 0a6 5F A5 02 F6 |                 mov     utx, retval
2a548 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2a54c 0a8             | .idle
2a54c 0a8 22 A7 82 FA |                 rqpin   urx, dm
2a550 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2a554 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2a558 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2a55c 0ac 08 09 90 FD |                 jmp     #poll_waitx
2a560 0ad             | 
2a560 0ad             | '------------------------------------------------------------------------------
2a560 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2a560 0ad             | '------------------------------------------------------------------------------
2a560 0ad             | ' On entry:
2a560 0ad             | '   utx - byte to transmit.
2a560 0ad             | ' On exit:
2a560 0ad             | '------------------------------------------------------------------------------
2a560 0ad             | utx_byte
2a560 0ad 40 46 72 FD |                 testp   dp                      wc
2a564 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2a568 0af 23 03 08 FC |                 akpin   dp
2a56c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2a570 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2a574 0b2             | 
2a574 0b2             | '------------------------------------------------------------------------------
2a574 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2a574 0b2             | '------------------------------------------------------------------------------
2a574 0b2             | ' On entry:
2a574 0b2             | ' On exit:
2a574 0b2             | '   retval - the byte read.
2a574 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2a574 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2a574 0b2             | '     received.
2a574 0b2             | '------------------------------------------------------------------------------
2a574 0b2             | urx_next
2a574 0b2 22 A7 8A FA |                 rdpin   urx, dm
2a578 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2a57c 0b4 53 A5 02 F5 |                 and     utx, urx
2a580 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2a584 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2a588 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2a58c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2a590 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2a594 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2a598 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2a59c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2a5a0 0bd 2D 00 64 FD |                 ret
2a5a4 0be             | 
2a5a4 0be             | '------------------------------------------------------------------------------
2a5a4 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2a5a4 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2a5a4 0be             | ' length, and the PID is not included in the CRC calculation:
2a5a4 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2a5a4 0be             | '  CRC5  ENDP ADDRESS PID
2a5a4 0be             | ' %00000_1111_1111111_xxxxxxxx
2a5a4 0be             | '------------------------------------------------------------------------------
2a5a4 0be             | ' On entry:
2a5a4 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2a5a4 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2a5a4 0be             | ' On exit:
2a5a4 0be             | '   ep_addr_pid - CRC value appended to the packet.
2a5a4 0be             | '------------------------------------------------------------------------------
2a5a4 0be             | calc_crc5
2a5a4 0be FF 03 00 FF 
2a5a8 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2a5ac 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2a5b0 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2a5b4 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2a5b8 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2a5bc 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2a5c0 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2a5c4 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2a5c8 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2a5cc 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2a5d0 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2a5d4 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2a5d8 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2a5dc 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2a5e0 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2a5e4 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2a5e8 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2a5ec 0d0             | 
2a5ec 0d0             | '------------------------------------------------------------------------------
2a5ec 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2a5ec 0d0             | '------------------------------------------------------------------------------
2a5ec 0d0             | isr1_fsframe
2a5ec 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2a5f0 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a5f4 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a5f8 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2a5fc 0d4             | .wait
2a5fc 0d4 40 46 72 FD |                 testp   dp                      wc
2a600 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a604 0d6 23 03 08 FC |                 akpin   dp
2a608 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2a60c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2a610 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2a614 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2a618 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2a61c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2a620 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2a624 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2a628 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2a62c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2a630 0e1 2C FF BF FD |                 call    #utx_byte
2a634 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2a638 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2a63c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2a640 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2a644 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2a648 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2a64c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2a650 0e9 5B A5 42 F5 |                 or      utx, icrc
2a654 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2a658 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2a65c 0ec 20 00 90 FD |                 jmp     #isr1_wait
2a660 0ed             | isr1_lsframe
2a660 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2a664 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a668 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a66c 0f0             | .wait
2a66c 0f0 40 46 72 FD |                 testp   dp                      wc
2a670 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a674 0f2 23 03 08 FC |                 akpin   dp
2a678 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2a67c 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2a680 0f5             | isr1_wait
2a680 0f5 22 A5 82 FA |                 rqpin   utx, dm
2a684 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2a688 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2a68c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2a690 0f9 03 00 00 FF 
2a694 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2a698 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2a69c 0fc F5 FF 3B FB |                 reti1
2a6a0 0fd             | 
2a6a0 0fd             | '------------------------------------------------------------------------------
2a6a0 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2a6a0 0fd             | ' transaction will complete before the next frame is triggered.
2a6a0 0fd             | '------------------------------------------------------------------------------
2a6a0 0fd             | ' On entry:
2a6a0 0fd             | ' On exit:
2a6a0 0fd             | '------------------------------------------------------------------------------
2a6a0 0fd             | wait_txn_ok
2a6a0 0fd 1A 74 63 FD |                 getct   htmp2
2a6a4 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2a6a8 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a6ac 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2a6b0 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2a6b4 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2a6b8 103 2D 00 64 FD |                 ret
2a6bc 104             | 
2a6bc 104             | '------------------------------------------------------------------------------
2a6bc 104             | ' A device connection was detected, or a bus reset was requested by the USB
2a6bc 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2a6bc 104             | ' and perform a reset sequence prior to device enumeration.
2a6bc 104             | '------------------------------------------------------------------------------
2a6bc 104             | dev_reset
2a6bc 104 22 A7 82 FA |                 rqpin   urx, dm
2a6c0 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2a6c4 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2a6c8 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2a6cc 108             | reset
2a6cc 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2a6d0 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2a6d4 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2a6d8 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a6dc 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2a6e0 10d 1A 92 62 FD |                 getct   iframe_ct_base
2a6e4 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a6e8 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a6ec 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2a6f0 111 24 70 07 F1 |                 add     htmp, #36
2a6f4 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2a6f8 113             | .framewait
2a6f8 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2a6fc 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2a700 115 2D 00 64 FD |                 ret
2a704 116             | 
2a704 116             | '------------------------------------------------------------------------------
2a704 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2a704 116             | '------------------------------------------------------------------------------
2a704 116             | ' On entry:
2a704 116             | '   PTRA - source address.
2a704 116             | '   PB - destination address.
2a704 116             | '   hr0 - length of copy, in bytes.
2a704 116             | ' On exit:
2a704 116             | '------------------------------------------------------------------------------
2a704 116             | hmemcpy
2a704 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2a708 117 F7 71 43 FC |                 wrbyte  htmp, pb
2a70c 118 01 EE 07 F1 |                 add     pb, #1
2a710 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2a714 11a             | 
2a714 11a             | '------------------------------------------------------------------------------
2a714 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2a714 11a             | ' loop until the errant device is disconnected.
2a714 11a             | '------------------------------------------------------------------------------
2a714 11a             | ' On entry:
2a714 11a             | ' On exit:
2a714 11a             | '------------------------------------------------------------------------------
2a714 11a             | host_error
2a714 11a             |           if ERROR_LED >= 0
2a714 11a             |           end
2a714 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2a718 11b             | 
2a718 11b             | '------------------------------------------------------------------------------
2a718 11b             | ' Get HID descriptor buffer for current port
2a718 11b             | '------------------------------------------------------------------------------
2a718 11b             | ' On entry:
2a718 11b             | ' On exit:
2a718 11b             | '   PB - HID descriptor buffer pointer
2a718 11b             | '------------------------------------------------------------------------------
2a718 11b             | get_hid_descr_buffer
2a718 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2a71c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2a720 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2a724 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2a728 11f             | 
2a728 11f             | 
2a728 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2a72c 120             | 
2a72c 120             | ' USB commands and error codes
2a72c 120 00 00 00 00 | cmd_data        long    0
2a730 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2a734 122             | 
2a734 122             | ' Parameters block assigned at cog startup
2a734 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2a738 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2a73c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2a740 125             | if ACTIVITY_LED >= 0
2a740 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2a740 125             | end
2a740 125             | if ERROR_LED >= 0
2a740 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2a740 125             | end
2a740 125 00 00 00 00 | hid_descr_p     long    0
2a744 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2a744 126             | 'hkbd_report_p   long    0
2a744 126 00 00 00 00 | hub_descr_p     long    0
2a748 127 00 00 00 00 | urx_buff_p      long    0
2a74c 128 00 00 00 00 | dev_desc_buff_p long    0
2a750 129 00 00 00 00 | con_desc_buff_p long    0
2a754 12a 00 00 00 00 | cache_start_p   long    0
2a758 12b 00 00 00 00 | cache_end_p     long    0
2a75c 12c             | if EMUPAD_MAX_PLAYER > 0
2a75c 12c             | emupad_out_ptr  long    0
2a75c 12c             | end
2a75c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2a760 12d             | 
2a760 12d             | hdev_init_start
2a760 12d             | hdev_port       res     1
2a760 12d             | hdev_port       res     1
2a760 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2a760 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2a760 12d             | kbm_next_datax  res     1
2a760 12d             | kbm_next_datax  res     1
2a760 12d             | hub_intf_num    res     1
2a760 12d             | hub_intf_num    res     1
2a760 12d             | hub_next_datax  res     1
2a760 12d             | hub_next_datax  res     1
2a760 12d             | hub_status_chg  res     1
2a760 12d             | hub_status_chg  res     1
2a760 12d             | hub_port_status res     1
2a760 12d             | hub_port_status res     1
2a760 12d             | if HAVE_MOUSE
2a760 12d             | ms_intf_num     res     1
2a760 12d             | ms_intf_num     res     1
2a760 12d             | ms_in_max_pkt   res     1
2a760 12d             | ms_in_max_pkt   res     1
2a760 12d             | end
2a760 12d             | kb_intf_num     res     1
2a760 12d             | kb_intf_num     res     1
2a760 12d             | kb_interval     res     1
2a760 12d             | kb_interval     res     1
2a760 12d             | kb_in_max_pkt   res     1
2a760 12d             | kb_in_max_pkt   res     1
2a760 12d             | kb_max_index    res     1
2a760 12d             | kb_max_index    res     1
2a760 12d             | kb_led_states   res     1
2a760 12d             | kb_led_states   res     1
2a760 12d             | gp_intf_num     res     1
2a760 12d             | gp_intf_num     res     1
2a760 12d             | gp_interval     res     1
2a760 12d             | gp_interval     res     1
2a760 12d             | gp_max_index    res     1
2a760 12d             | gp_max_index    res     1
2a760 12d             | gp_descr_len    res     1+MAX_DEVICES
2a760 12d             | gp_descr_len    res     1+MAX_DEVICES
2a760 12d             | hdev_init_end
2a760 12d             | 
2a760 12d             | ' Initialized at cog startup:
2a760 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2a760 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2a760 12d             | iframe_ct_new   res     1
2a760 12d             | iframe_ct_new   res     1
2a760 12d             | iframe_ct_base  res     1
2a760 12d             | iframe_ct_base  res     1
2a760 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2a760 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2a760 12d             | 
2a760 12d             | ' This register block is reset to zero when a USB device connects
2a760 12d             | hreg_init_start
2a760 12d             | hstatus         res     1         ' Host status flags
2a760 12d             | hstatus         res     1         ' Host status flags
2a760 12d             | hctwait         res     1         ' Poll-based wait clocks
2a760 12d             | hctwait         res     1         ' Poll-based wait clocks
2a760 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2a760 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2a760 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2a760 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2a760 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2a760 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2a760 12d             | xfer_retry      res     1         ' Control transfer retry count
2a760 12d             | xfer_retry      res     1         ' Control transfer retry count
2a760 12d             | retry           res     1         ' Transaction retry count
2a760 12d             | retry           res     1         ' Transaction retry count
2a760 12d             | utx             res     1         ' Byte to transmit on USB
2a760 12d             | utx             res     1         ' Byte to transmit on USB
2a760 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2a760 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2a760 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2a760 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2a760 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2a760 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2a760 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2a760 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2a760 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2a760 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2a760 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2a760 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2a760 12d             | frame           res     1         ' USB 1ms frame counter value
2a760 12d             | frame           res     1         ' USB 1ms frame counter value
2a760 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2a760 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2a760 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2a760 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2a760 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2a760 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2a760 12d             | crc             res     1         ' Used for CRC16 calculation
2a760 12d             | crc             res     1         ' Used for CRC16 calculation
2a760 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2a760 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2a760 12d             | retval          res     1         ' Global success/fail return parameter
2a760 12d             | retval          res     1         ' Global success/fail return parameter
2a760 12d             | context_retval  res     1         ' Operation contextual return parameter
2a760 12d             | context_retval  res     1         ' Operation contextual return parameter
2a760 12d             | ' Device stuff
2a760 12d             | hdev_id         res     1+MAX_DEVICES
2a760 12d             | hdev_id         res     1+MAX_DEVICES
2a760 12d             | hdev_bcd        res     1
2a760 12d             | hdev_bcd        res     1
2a760 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2a760 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2a760 12d             | ' Keyboard/mouse stuff
2a760 12d             | hctrl_ep_addr   res     1
2a760 12d             | hctrl_ep_addr   res     1
2a760 12d             | hctrl_max_pkt   res     1
2a760 12d             | hctrl_max_pkt   res     1
2a760 12d             | hconfig_base    res     1
2a760 12d             | hconfig_base    res     1
2a760 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2a760 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2a760 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2a760 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2a760 12d             | hdev_class      res     1
2a760 12d             | hdev_class      res     1
2a760 12d             | hdev_subclass   res     1
2a760 12d             | hdev_subclass   res     1
2a760 12d             | hdev_protocol   res     1
2a760 12d             | hdev_protocol   res     1
2a760 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2a760 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2a760 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2a760 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2a760 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2a760 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2a760 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2a760 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2a760 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2a760 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2a760 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2a760 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2a760 12d             | if HAVE_MOUSE
2a760 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2a760 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2a760 12d             | end
2a760 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2a760 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2a760 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2a760 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2a760 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2a760 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2a760 12d             | hdev_out_addr   res     1
2a760 12d             | hdev_out_addr   res     1
2a760 12d             | 
2a760 12d             | if EMUPAD_MAX_PLAYER > 0
2a760 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2a760 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2a760 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2a760 12d             | end
2a760 12d             | 
2a760 12d             | hreg_init_end
2a760 12d             | 
2a760 12d             | hidr_start
2a760 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2a760 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2a760 12d             | hidr_flags      res     1
2a760 12d             | hidr_flags      res     1
2a760 12d             | hidr_axis       res     3
2a760 12d             | hidr_axis       res     3
2a760 12d             | hidr_buttons    res     1
2a760 12d             | hidr_buttons    res     1
2a760 12d             | hidr_hats       res     1
2a760 12d             | hidr_hats       res     1
2a760 12d             | '' Above are actually useful values, 6 longs
2a760 12d             | hidr_id         res     1
2a760 12d             | hidr_id         res     1
2a760 12d             | hidr_state      res     1
2a760 12d             | hidr_state      res     1
2a760 12d             | hidr_size       res     1
2a760 12d             | hidr_size       res     1
2a760 12d             | hidr_count      res     1
2a760 12d             | hidr_count      res     1
2a760 12d             | hidr_offset     res     1
2a760 12d             | hidr_offset     res     1
2a760 12d             | hidr_usage_idx  res     1
2a760 12d             | hidr_usage_idx  res     1
2a760 12d             | hidr_lminmax    res     1
2a760 12d             | hidr_lminmax    res     1
2a760 12d             | hidr_pminmax    res     1
2a760 12d             | hidr_pminmax    res     1
2a760 12d             | hidr_type       res     1
2a760 12d             | hidr_type       res     1
2a760 12d             | hidr_end
2a760 12d             | 
2a760 12d             | ' Variables dependent on the system freqency
2a760 12d             | _var_64_lower_  res     1
2a760 12d             | _var_64_lower_  res     1
2a760 12d             | _var_64_upper_  res     1
2a760 12d             | _var_64_upper_  res     1
2a760 12d             | _12Mbps_        res     1
2a760 12d             | _12Mbps_        res     1
2a760 12d             | _1_5Mbps_       res     1
2a760 12d             | _1_5Mbps_       res     1
2a760 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2a760 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2a760 12d             | _1us_           res     1         ' 1us
2a760 12d             | _1us_           res     1         ' 1us
2a760 12d             | _10us_          res     1         ' 10us
2a760 12d             | _10us_          res     1         ' 10us
2a760 12d             | _33us_          res     1         ' 33us
2a760 12d             | _33us_          res     1         ' 33us
2a760 12d             | _txn_err_       res     1         ' 250us
2a760 12d             | _txn_err_       res     1         ' 250us
2a760 12d             | _500us_         res     1         ' 500us
2a760 12d             | _500us_         res     1         ' 500us
2a760 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2a760 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2a760 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2a760 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2a760 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2a760 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2a760 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2a760 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2a760 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2a760 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2a760 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2a760 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2a760 12d             | _preamble_wait_ res     1
2a760 12d             | _preamble_wait_ res     1
2a760 12d             | _1ms_           res     1         ' 1ms
2a760 12d             | _1ms_           res     1         ' 1ms
2a760 12d             | _2ms_           res     1         ' 2ms
2a760 12d             | _2ms_           res     1         ' 2ms
2a760 12d             | _suspend_wait_  res     1         ' 3ms
2a760 12d             | _suspend_wait_  res     1         ' 3ms
2a760 12d             | _4ms_           res     1         ' 4ms
2a760 12d             | _4ms_           res     1         ' 4ms
2a760 12d             | _xfer_wait_     res     1         ' 5ms
2a760 12d             | _xfer_wait_     res     1         ' 5ms
2a760 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2a760 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2a760 12d             | _reset_hold_    res     1         ' 15ms
2a760 12d             | _reset_hold_    res     1         ' 15ms
2a760 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2a760 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2a760 12d             | _21ms_          res     1         ' 21ms
2a760 12d             | _21ms_          res     1         ' 21ms
2a760 12d             | _100ms_         res     1         ' 100ms
2a760 12d             | _100ms_         res     1         ' 100ms
2a760 12d             | _500ms_         res     1         ' 500ms
2a760 12d             | _500ms_         res     1         ' 500ms
2a760 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2a760 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2a760 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2a760 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2a760 12d             | '------------------------------------------------------------------------------
2a760 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2a760 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2a760 12d             | _usb_d_ls_nco_  res     1
2a760 12d             | _usb_d_ls_nco_  res     1
2a760 12d             | _usb_h_fs_nco_  res     1
2a760 12d             | _usb_h_fs_nco_  res     1
2a760 12d             | _usb_d_fs_nco_  res     1
2a760 12d             | _usb_d_fs_nco_  res     1
2a760 12d             | '------------------------------------------------------------------------------
2a760 12d             | ' Scratch registers
2a760 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2a760 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2a760 12d             | htmp1           res     1
2a760 12d             | htmp1           res     1
2a760 12d             | htmp2           res     1
2a760 12d             | htmp2           res     1
2a760 12d             | htmp3           res     1
2a760 12d             | htmp3           res     1
2a760 12d             | hrep            res     1         ' Repeat count
2a760 12d             | hrep            res     1         ' Repeat count
2a760 12d             | hsave0          res     1         ' Subroutine parameter saves
2a760 12d             | hsave0          res     1         ' Subroutine parameter saves
2a760 12d             | hsave1          res     1
2a760 12d             | hsave1          res     1
2a760 12d             | hsave2          res     1
2a760 12d             | hsave2          res     1
2a760 12d             | isrtmp1         res     1
2a760 12d             | isrtmp1         res     1
2a760 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2a760 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2a760 12d             | hr0             res     1         ' Multi-purpose registers
2a760 12d             | hr0             res     1         ' Multi-purpose registers
2a760 12d             | hr1             res     1
2a760 12d             | hr1             res     1
2a760 12d             | hr2             res     1
2a760 12d             | hr2             res     1
2a760 12d             | hr3             res     1
2a760 12d             | hr3             res     1
2a760 12d             | hpar1           res     1         ' Routine entry/exit parameters
2a760 12d             | hpar1           res     1         ' Routine entry/exit parameters
2a760 12d             | hpar2           res     1
2a760 12d             | hpar2           res     1
2a760 12d             | hpar3           res     1
2a760 12d             | hpar3           res     1
2a760 12d             | hct2            res     1         ' Function response bus turn-around timer
2a760 12d             | hct2            res     1         ' Function response bus turn-around timer
2a760 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2a760 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2a760 12d             | mod_cnt         res     1         ' Used in idle loops
2a760 12d             | mod_cnt         res     1         ' Used in idle loops
2a760 12d             |                 fit     $1F0
2a760 12d             |                 org     $200
2a760 200             | hlut_start
2a760 200             | 
2a760 200             | '------------------------------------------------------------------------------
2a760 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2a760 200             | ' settings to startup defaults.
2a760 200             | '------------------------------------------------------------------------------
2a760 200             | ' On entry:
2a760 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2a760 200             | '------------------------------------------------------------------------------
2a760 200             | set_speed_full
2a760 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2a764 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2a768 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2a76c 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2a770 204             | '                ret                             wcz     ' Restore caller flags on exit
2a770 204             | 
2a770 204             | '------------------------------------------------------------------------------
2a770 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2a770 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2a770 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2a770 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2a770 204             | ' putting the smart pins into reset.
2a770 204             | '------------------------------------------------------------------------------
2a770 204             | ' On entry:
2a770 204             | ' On exit: CZ flags restored to caller states
2a770 204             | '------------------------------------------------------------------------------
2a770 204             | set_speed_low
2a770 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2a774 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2a778 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2a77c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2a780 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2a784 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2a788 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2a78c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2a790 20c             | 
2a790 20c             | '------------------------------------------------------------------------------
2a790 20c             | ' Perform configuration stuff required when a device intitially connects.
2a790 20c             | '------------------------------------------------------------------------------
2a790 20c             | ' On entry:
2a790 20c             | ' On exit:
2a790 20c             | '------------------------------------------------------------------------------
2a790 20c             | on_connect
2a790 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2a794 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2a798 20e             | .retry
2a798 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a79c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2a7a0 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2a7a4 211 00 08 00 FF 
2a7a8 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2a7ac 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2a7b0 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a7b4 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2a7b8 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2a7bc 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2a7c0 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a7c4 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2a7c8 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2a7cc 21b 4C 03 B0 FD |                 call    #poll_waitx
2a7d0 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2a7d4 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2a7d8 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2a7dc 21f B8 FF 9F FD |                 jmp     #.retry
2a7e0 220             | .get_dev_desc
2a7e0 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2a7e4 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2a7e8 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2a7ec 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2a7f0 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2a7f4 225 88 FB BF FD |                 call    #reset
2a7f8 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2a7fc 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a800 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2a804 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2a808 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a80c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2a810 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2a814 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2a818 22e 04 00 00 FF 
2a81c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2a820 230 34 FA BF FD |                 call    #calc_crc5
2a824 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2a828 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a82c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2a830 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2a834 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2a838 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2a83c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a840 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2a844 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2a848 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2a84c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2a850 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2a854 23d C4 02 B0 FD |                 call    #poll_waitx
2a858 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2a85c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a860 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2a864 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2a868 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2a86c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a870 244 2D 00 64 5D |         if_nz   ret
2a874 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2a878 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2a87c 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2a880 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2a884 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2a888 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2a88c 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2a890 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2a894 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2a898 24e 2C FB 9F CD |         if_b    jmp     #host_error
2a89c 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2a8a0 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a8a4 251 2D EC 63 FD |                 call    pa
2a8a8 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2a8ac 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a8b0 254 2C EC 63 FD |                 jmp     pa
2a8b4 255             | 
2a8b4 255             | '------------------------------------------------------------------------------
2a8b4 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2a8b4 255             | ' Status reporting is always in the function-to-host direction.
2a8b4 255             | '------------------------------------------------------------------------------
2a8b4 255             | ' On entry:
2a8b4 255             | '   PTRA - start address of the SETUP data in hub.
2a8b4 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2a8b4 255             | '     stage.
2a8b4 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2a8b4 255             | ' On exit:
2a8b4 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2a8b4 255             | '     contains the count of data stage bytes actually received, which must
2a8b4 255             | '     always be <= the count requested.
2a8b4 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2a8b4 255             | '     more specific USB operation error code.
2a8b4 255             | '------------------------------------------------------------------------------
2a8b4 255             | control_read
2a8b4 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2a8b8 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2a8bc 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2a8c0 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2a8c4 259             | .xfer_start
2a8c4 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2a8c8 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2a8cc 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a8d0 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2a8d4 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2a8d8 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2a8dc 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2a8e0 260 61 00 00 FF 
2a8e4 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2a8e8 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2a8ec 263             | .data
2a8ec 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2a8f0 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2a8f4 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2a8f8 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2a8fc 267             | .nak_retry
2a8fc 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2a900 268             | .in_retry
2a900 268 BC F6 BF FD |                 call    #txn_in
2a904 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2a908 26a 28 00 90 AD |         if_z    jmp     #.commit
2a90c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a910 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2a914 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a918 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2a91c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2a920 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2a924 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2a928 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a92c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2a930 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2a934 275             | .commit
2a934 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2a938 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2a93c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2a940 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2a944 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2a948 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2a94c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2a950 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2a954 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2a958 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2a95c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2a960 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2a964 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2a968 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2a96c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2a970 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2a974 285             | .pre_status
2a974 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2a978 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2a97c 287 00 B0 06 F6 |                 mov     pkt_data, #0
2a980 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2a984 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a988 28a 61 00 00 FF 
2a98c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2a990 28c             | .out_retry
2a990 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2a994 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a998 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2a99c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a9a0 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2a9a4 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a9a8 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2a9ac 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2a9b0 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a9b4 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2a9b8 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2a9bc 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2a9bc 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2a9bc 297             | ' ControlRead() transfer gets things unstuck most of the time...
2a9bc 297             | .xfer_retry
2a9bc 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2a9c0 298 58 01 B0 FD |                 call    #poll_waitx
2a9c4 299 8C F9 BF FD |                 call    #wait_txn_ok
2a9c8 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2a9cc 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2a9d0 29c C8 EF 03 F6 |                 mov     pb, hpar3
2a9d4 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2a9d8 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2a9dc 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2a9e0 2a0             | 
2a9e0 2a0             | '------------------------------------------------------------------------------
2a9e0 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2a9e0 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2a9e0 2a0             | ' the SETUP data struct is filled with the required values.
2a9e0 2a0             | '------------------------------------------------------------------------------
2a9e0 2a0             | ' On entry:
2a9e0 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2a9e0 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2a9e0 2a0             | '     stage.
2a9e0 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2a9e0 2a0             | ' On exit:
2a9e0 2a0             | '   retval - used to convey the success/failure of each stage.
2a9e0 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2a9e0 2a0             | '     more specific USB operation error code.
2a9e0 2a0             | '------------------------------------------------------------------------------
2a9e0 2a0             | control_write
2a9e0 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a9e4 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2a9e8 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2a9ec 2a3             | 
2a9ec 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2a9f0 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2a9f4 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2a9f8 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2a9fc 2a7             | .xfer_start
2a9fc 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2aa00 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2aa04 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2aa08 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2aa0c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2aa10 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2aa14 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2aa18 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2aa1c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2aa20 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2aa24 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2aa28 2b2             | .data
2aa28 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2aa2c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2aa30 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2aa34 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2aa38 2b6             | .out_retry
2aa38 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2aa3c 2b7 88 F6 BF FD |                 call    #txn_out
2aa40 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2aa44 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2aa48 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2aa4c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2aa50 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2aa54 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2aa58 2be             | .commit
2aa58 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2aa5c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2aa60 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2aa64 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2aa68 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2aa6c 2c3             | pre_status_in
2aa6c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2aa70 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2aa74 2c5             | .status_retry
2aa74 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2aa78 2c6 44 F5 BF FD |                 call    #txn_in
2aa7c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2aa80 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2aa84 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2aa88 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2aa8c 2cb 2D 00 64 AD |         if_z    ret
2aa90 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2aa94 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2aa98 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2aa9c 2cf             | '               ret                                     ' Caller must handle transfer retirement
2aa9c 2cf             | 
2aa9c 2cf             | '------------------------------------------------------------------------------
2aa9c 2cf             | ' Execute an IN interrupt transaction.
2aa9c 2cf             | '------------------------------------------------------------------------------
2aa9c 2cf             | ' On entry:
2aa9c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2aa9c 2cf             | '   hpar2 - Address of the IN data buffer
2aa9c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2aa9c 2cf             | ' On exit:
2aa9c 2cf             | '   retval - the result of the operation.
2aa9c 2cf             | '   hpar3 - the count of IN data bytes actually received.
2aa9c 2cf             | '------------------------------------------------------------------------------
2aa9c 2cf             | do_int_in
2aa9c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2aaa0 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2aaa4 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2aaa8 2d2             | 
2aaa8 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2aaac 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2aab0 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2aab4 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2aab8 2d6             | .retry
2aab8 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2aabc 2d7 00 F5 BF FD |                 call    #txn_in
2aac0 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2aac4 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2aac8 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2aacc 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2aad0 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2aad4 2dd 54 00 B0 FD |                 call    #retry_wait
2aad8 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2aadc 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2aae0 2e0 D4 FF 9F FD |                 jmp     #.retry
2aae4 2e1             | .commit
2aae4 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2aae8 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2aaec 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2aaf0 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2aaf4 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2aaf8 2e6             | .post_ret
2aaf8 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2aafc 2e7             | 
2aafc 2e7             | 
2aafc 2e7             | '------------------------------------------------------------------------------
2aafc 2e7             | ' Resets the downstream hub port to FS
2aafc 2e7             | '------------------------------------------------------------------------------
2aafc 2e7             | dwnstream_reset
2aafc 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ab00 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2ab04 2e9             | 
2ab04 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2ab08 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2ab0c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ab10 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ab14 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2ab18 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2ab1c 2ef             | 
2ab1c 2ef             | '------------------------------------------------------------------------------
2ab1c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2ab1c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2ab1c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2ab1c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2ab1c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2ab1c 2ef             | '------------------------------------------------------------------------------
2ab1c 2ef             | ' On entry:
2ab1c 2ef             | '   hctwait - wait interval in sysclocks.
2ab1c 2ef             | ' On exit:
2ab1c 2ef             | '------------------------------------------------------------------------------
2ab1c 2ef             | poll_waitx
2ab1c 2ef 1A 92 63 FD |                 getct   hct2
2ab20 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2ab24 2f1             | .wait
2ab24 2f1 FF 25 CC FB |                 jnct2   #.wait
2ab28 2f2 2D 00 64 FD |                 ret
2ab2c 2f3             | 
2ab2c 2f3             | '------------------------------------------------------------------------------
2ab2c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2ab2c 2f3             | '------------------------------------------------------------------------------
2ab2c 2f3             | ' On entry:
2ab2c 2f3             | '   retval - transaction response PID or error code.
2ab2c 2f3             | ' On exit:
2ab2c 2f3             | '------------------------------------------------------------------------------
2ab2c 2f3             | retry_wait
2ab2c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ab30 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2ab34 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2ab38 2f6 14 00 90 AD |         if_z    jmp     #.nak
2ab3c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2ab40 2f8 D8 FF BF FD |                 call    #poll_waitx
2ab44 2f9             | .dec
2ab44 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2ab48 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2ab4c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2ab50 2fc             | .nak
2ab50 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2ab54 2fd C4 FF BF FD |                 call    #poll_waitx
2ab58 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2ab5c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2ab60 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2ab64 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2ab68 302 2D 00 64 FD |                 ret
2ab6c 303             | 
2ab6c 303             | host_reset
2ab6c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2ab70 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2ab74 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2ab74 305 BD 01 05 FF 
2ab78 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2ab7c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2ab80 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2ab84 309             | ' Check to see if the system clock has been changed.
2ab84 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2ab88 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2ab8c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2ab90 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2ab94 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2ab98 30e 40 46 62 FD |                 dirl    dp
2ab9c 30f             | 
2ab9c 30f 28 02 64 FD |                 setq    #1
2aba0 310 80 00 80 FF 
2aba4 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2aba8 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2abac 313             | .enable
2abac 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2abb0 314 41 46 62 FD |                 dirh    dp
2abb4 315 1F 36 63 FD |                 waitx   _1us_
2abb8 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2abbc 317             | 
2abbc 317             |                 ' Handle Port protection enable and startup delay
2abbc 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2abc0 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2abc4 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2abc8 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2abcc 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2abd0 31c             | 
2abd0 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2abd4 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2abd8 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2abdc 31f 00 00 04 F6 |                 mov     0-0, #0
2abe0 320             | .regloop
2abe0 320             | 
2abe0 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2abe0 320             | 
2abe0 320             | discon_entry
2abe0 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2abe4 321             | 
2abe4 321             |               
2abe4 321             |         if HAVE_HIDPAD
2abe4 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2abe8 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2abec 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2abf0 324 F7 01 68 FC |                 wrlong  #0,pb
2abf4 325             |         end
2abf4 325             |         if EMUPAD_MAX_PLAYER > 0
2abf4 325             |         end
2abf4 325             | 
2abf4 325             |                 ' Fall through to disconnected loop
2abf4 325             | 
2abf4 325             | '-----------------------------------------------------------------------------------------------------------------
2abf4 325             | ' Device connect handling (Section 7.1.7.3).
2abf4 325             | '-----------------------------------------------------------------------------------------------------------------
2abf4 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2abf4 325             | ' device to connect (Section 7.1.7.3).
2abf4 325             | '-----------------------------------------------------------------------------------------------------------------
2abf4 325             | disconnected
2abf4 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2abf8 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2abfc 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2ac00 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2ac04 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2ac08 32a             |         if ACTIVITY_LED >= 0
2ac08 32a             |         end
2ac08 32a 22 A7 82 FA |                 rqpin   urx, dm
2ac0c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2ac10 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2ac14 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2ac18 32e             | .se1_test
2ac18 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2ac1c 32f FC FE BF FD |                 call    #poll_waitx
2ac20 330 22 A7 82 FA |                 rqpin   urx, dm
2ac24 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2ac28 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2ac2c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2ac30 334             | .se1            'SE1 is a fatal error condition
2ac30 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2ac34 335 E4 FE BF FD |                 call    #poll_waitx
2ac38 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2ac3c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2ac40 338             | .connect_test                                           ' Test lines until stable J/K state seen
2ac40 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2ac44 339 22 A7 82 FA |                 rqpin   urx, dm
2ac48 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2ac4c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2ac50 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2ac54 33d             | connected
2ac54 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2ac58 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2ac5c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2ac60 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2ac64 341             | .set_pulse
2ac64 341 1A 64 63 FD |                 getct   _pulse_time_
2ac68 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2ac6c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2ac6c 343             | ' of 1ms and make a correction, if necessary.
2ac6c 343             | '                mov     htmp, _1ms_
2ac6c 343             | '                subs    htmp, iframe_delta
2ac6c 343             | '                adds    _frame1ms_clks_, htmp
2ac6c 343             | '                debug(udec(_frame1ms_clks_))
2ac6c 343             | 
2ac6c 343             |                 ' Fall through to idle/processing loop
2ac6c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2ac70 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2ac74 345             | 
2ac74 345             | hidle
2ac74 345 22 A7 82 FA |                 rqpin   urx, dm
2ac78 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2ac7c 347 98 00 90 CD |         if_c    jmp     #.se0_test
2ac80 348 24 06 70 FD |                 pollct3                         wc
2ac84 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2ac88 34a 1A 94 63 FD |                 getct   hct3
2ac8c 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2ac90 34c             | 
2ac90 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2ac94 34d 00 70 E3 F8 |                 getbyte htmp
2ac98 34e             | 
2ac98 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2ac9c 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2aca0 350 40 00 90 AD |         if_z    jmp     #.poll
2aca4 351             | 
2aca4 351             |         if _HAVE_GAMEPAD
2aca4 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2aca8 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2acac 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2acb0 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2acb4 355 2C 00 90 AD |         if_z    jmp     #.poll
2acb8 356             |         end
2acb8 356             | 
2acb8 356             |         if HAVE_MOUSE
2acb8 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2acbc 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2acc0 358 20 00 90 AD |         if_z    jmp     #.poll
2acc4 359             |         end
2acc4 359             | 
2acc4 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2acc8 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2accc 35b 14 00 90 AD |         if_z    jmp     #.poll
2acd0 35c             | 
2acd0 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2acd4 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2acd8 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2acdc 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2ace0 360             |         if HAVE_MOUSE
2ace0 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2ace4 361             |         else
2ace4 361             |         end
2ace4 361             | 
2ace4 361             | .poll
2ace4 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2ace8 362 2D EC 63 FD |                 call    pa
2acec 363             | .skip_poll
2acec 363             | 
2acec 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2acf0 364             | 
2acf0 364             | .nopoll
2acf0 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2acf4 365 44 00 90 AD |         if_z    jmp     #hsuspend
2acf8 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2acfc 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2ad00 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2ad04 369 1A 84 63 FD |                 getct   hr0
2ad08 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2ad0c 36b             |         if ACTIVITY_LED >= 0
2ad0c 36b             |         end
2ad0c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2ad10 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2ad14 36d 5C FF 9F FD |                 jmp     #hidle
2ad18 36e             | ' Check for extended SE0 state on the bus
2ad18 36e             | .se0_test
2ad18 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2ad1c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2ad20 370 22 A7 82 FA |                 rqpin   urx, dm
2ad24 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2ad28 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2ad2c 373 24 F6 BF FD |                 call    #wait_txn_ok
2ad30 374 00 00 80 FF 
2ad34 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2ad38 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2ad38 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2ad3c 377             | 
2ad3c 377             | hsuspend
2ad3c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2ad40 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2ad44 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2ad48 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2ad4c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2ad50 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2ad54 37d             | 
2ad54 37d             |                 ' Fall through to resume wait loop
2ad54 37d             | 
2ad54 37d             | hwait_resume
2ad54 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2ad58 37e 02 86 47 F0 |                 shr     hr1, #2
2ad5c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2ad60 380             |         if ACTIVITY_LED >= 0
2ad60 380             |         end
2ad60 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2ad64 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2ad68 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2ad6c 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2ad70 384 18 00 90 AD |         if_z    jmp     #.resume
2ad74 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2ad78 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2ad7c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2ad80 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2ad84 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2ad88 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2ad8c 38b             | .resume
2ad8c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2ad90 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2ad94 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2ad98 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2ad9c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2ada0 390 1F 70 63 FD |                 waitx   htmp
2ada4 391 22 07 28 FC |                 wypin   #OUT_J, dm
2ada8 392 01 70 47 F0 |                 shr     htmp, #1
2adac 393 1F 70 63 FD |                 waitx   htmp
2adb0 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2adb4 395 1A 92 62 FD |                 getct   iframe_ct_base
2adb8 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2adbc 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2adc0 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2adc4 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2adc8 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2adcc 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2add0 39c             | 
2add0 39c             | '------------------------------------------------------------------------------
2add0 39c             | ' Send preamble to enable low-speed HUB ports
2add0 39c             | '------------------------------------------------------------------------------
2add0 39c             | ' On entry:
2add0 39c             | ' On exit:
2add0 39c             | '   USB baud rate set to low-speed
2add0 39c             | '------------------------------------------------------------------------------
2add0 39c             | utx_pre
2add0 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2add4 39d 40 46 62 FD |                 dirl    dp
2add8 39e 28 02 64 FD |                 setq    #1
2addc 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2ade0 3a0 58 44 62 FD |                 drvl    dm
2ade4 3a1 59 46 62 FD |                 drvh    dp
2ade8 3a2             | 
2ade8 3a2 1E 00 00 FF 
2adec 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2adf0 3a4             | 
2adf0 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2adf4 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2adf8 3a6 28 02 64 3D |         if_nc   setq    #1
2adfc 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2ae00 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2ae04 3a9             | .l1
2ae04 3a9             | 
2ae04 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2ae08 3aa 40 46 62 FD |                 dirl    dp
2ae0c 3ab 28 02 64 FD |                 setq    #1
2ae10 3ac 80 00 80 FF 
2ae14 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2ae18 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2ae1c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2ae20 3b0 41 46 62 FD |                 dirh    dp
2ae24 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2ae28 3b2             | 
2ae28 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2ae2c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2ae30 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2ae34 3b5             | 
2ae34 3b5             | hlut_end
2ae34 3b5             |                 fit     $400
2ae34 3b5             |                 orgh
2ae34                 | if OVERLAP_MEMORY
2ae34                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2ae34                 | end
2ae34                 | '------------------------------------------------------------------------------
2ae34                 | ' Routines called from cog space.
2ae34                 | '------------------------------------------------------------------------------
2ae34                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2ae34                 | '------------------------------------------------------------------------------
2ae34                 | 
2ae34                 | '------------------------------------------------------------------------------
2ae34                 | ' USB host cog initialization.
2ae34                 | '------------------------------------------------------------------------------
2ae34                 | usb_host_init
2ae34                 |                 ' Initialize buffer pointers
2ae34                 |         if OVERLAP_MEMORY
2ae34                 |         else
2ae34     40 15 B0 FE |                 loc     pb, #hid_descr
2ae38                 |         end
2ae38     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2ae3c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2ae3c                 |                 {
2ae3c                 |                 }
2ae3c                 |         
2ae3c                 |                 {
2ae3c                 |                 }
2ae3c                 |                 'loc     pb,#hkbd_report
2ae3c                 |                 'mov     hkbd_report_p,pb
2ae3c                 | 
2ae3c     08 1D B0 FE |                 loc     pb, #hub_descr
2ae40     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2ae44     1D 1D B0 FE |                 loc     pb, #urx_buff
2ae48     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2ae4c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2ae50     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2ae54     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2ae58     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2ae5c     18 15 B0 FE |                 loc     pb, #usb_cache_start
2ae60     F7 55 02 F6 |                 mov     cache_start_p, pb
2ae64     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2ae68     F7 57 02 F6 |                 mov     cache_end_p, pb
2ae6c                 | 
2ae6c                 |         if ERROR_LED >= 0
2ae6c                 |         end
2ae6c                 | 
2ae6c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2ae6c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2ae6c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2ae6c                 | ' Configure and enable the Serial Host USB port.
2ae6c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2ae70                 | 
2ae70                 | '------------------------------------------------------------------------------
2ae70                 | ' Timing calculations happen before any interrupt(s) are enabled.
2ae70                 | '------------------------------------------------------------------------------
2ae70                 | ' On entry:
2ae70                 | '   htmp - current CLKFREQ value.
2ae70                 | '------------------------------------------------------------------------------
2ae70                 | hinit_usb_timings
2ae70                 | '                getct   htmp2
2ae70     B8 59 02 F6 |                 mov     save_sysclk, htmp
2ae74     8D 5B 80 FF 
2ae78     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2ae7c     18 30 63 FD |                 getqx   _12Mbps_
2ae80     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2ae84     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2ae88     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2ae8c     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2ae90     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2ae94     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2ae98     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2ae9c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2aea0     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2aea4     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2aea8     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2aeac     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2aeb0     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2aeb4     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2aeb8     80 00 00 FF 
2aebc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2aec0     18 2C 63 FD |                 getqx   _var_64_lower_
2aec4     19 2E 63 FD |                 getqy   _var_64_upper_
2aec8     28 2C 63 FD |                 setq    _var_64_lower_
2aecc     65 CD 1D FF 
2aed0     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2aed4     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2aed8     01 00 00 FF 
2aedc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2aee0     18 2C 63 FD |                 getqx   _var_64_lower_
2aee4     19 2E 63 FD |                 getqy   _var_64_upper_
2aee8     28 2C 63 FD |                 setq    _var_64_lower_
2aeec     A1 07 00 FF 
2aef0     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2aef4     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2aef8     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2aefc     09 36 57 F0 |                 shr     _1us_, #9               wc
2af00     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2af04     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2af08     18 38 63 FD |                 getqx   _10us_
2af0c     09 38 57 F0 |                 shr     _10us_, #9              wc
2af10     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2af14     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2af18     18 3A 63 FD |                 getqx   _33us_
2af1c     09 3A 57 F0 |                 shr     _33us_, #9              wc
2af20     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2af24     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2af28     18 3C 63 FD |                 getqx   _txn_err_
2af2c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2af30     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2af34     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2af38     18 3E 63 FD |                 getqx   _500us_
2af3c     09 3E 57 F0 |                 shr     _500us_, #9             wc
2af40     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2af44     01 00 00 FF 
2af48     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2af4c     18 40 63 FD |                 getqx   _txn_ok_ls_
2af50     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2af54     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2af58     01 00 00 FF 
2af5c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2af60     18 42 63 FD |                 getqx   _txn_ok_fs_
2af64     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2af68     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2af6c     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2af70     05 00 00 FF 
2af74     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2af78     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2af7c     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2af80     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2af84     1C 00 00 FF 
2af88     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2af8c     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2af90     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2af94     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2af98     00 00 00 FF 
2af9c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2afa0     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2afa4     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2afa8     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2afac     04 00 00 FF 
2afb0     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2afb4     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2afb8     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2afbc     8D 5B 00 FF 
2afc0     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2afc4     18 4C 63 FD |                 getqx   _preamble_wait_
2afc8     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2afcc     01 00 00 FF 
2afd0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2afd4     18 2C 63 FD |                 getqx   _var_64_lower_
2afd8     19 2E 63 FD |                 getqy   _var_64_upper_
2afdc     28 2C 63 FD |                 setq    _var_64_lower_
2afe0     01 00 00 FF 
2afe4     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2afe8     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2afec     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2aff0     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2aff4     FF FF 7F FF 
2aff8     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2affc     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2b000     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2b004     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2b008     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2b00c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2b010     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2b014     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2b018     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2b01c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2b020     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2b024     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2b028     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2b02c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2b030     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2b034     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2b038     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2b03c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2b040     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2b044     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2b048     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2b04c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2b050     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2b054     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2b058     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2b05c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2b060     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2b064                 | '        _ret_   mov     _1sec_, save_sysclk
2b064                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2b064                 | '                ret
2b064                 | {
2b064                 | }
2b064                 | 
2b064                 | '------------------------------------------------------------------------------
2b064                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2b064                 | ' one. If it is, start the task progression that will configure the device for
2b064                 | ' use.
2b064                 | '------------------------------------------------------------------------------
2b064                 | ' On entry:
2b064                 | '   hconfig_base - start address of the cached config descriptor chain.
2b064                 | ' On exit:
2b064                 | '------------------------------------------------------------------------------
2b064                 | hparse_con_desc
2b064     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2b068     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2b06c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2b070     4E 70 FF F9 |                 movbyts htmp,#%%1032
2b074     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2b078                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2b078                 | 
2b078     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2b07c     6E ED 03 F1 |                 add     pa, hconfig_base
2b080     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2b084                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2b084                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2b084                 | ' that defines a keyboard and/or mouse.
2b084     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2b088                 | .next_intf
2b088     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2b08c     BC 01 90 3D |         if_ae   jmp     #hset_config
2b090     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2b094     75 F3 03 F1 |                 add     ptrb, hnext_desc
2b098     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2b09c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2b0a0     0C 00 90 AD |         if_z    jmp     #.intf
2b0a4     80 71 C7 FA |                 rdbyte  htmp, ptrb
2b0a8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2b0ac     D8 FF 9F FD |                 jmp     #.next_intf
2b0b0                 | .intf
2b0b0     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2b0b4     00 90 07 F6 |                 mov     hpar3, #0
2b0b8     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2b0bc     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2b0c0     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2b0c4     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2b0c8                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2b0c8                 | 
2b0c8                 | .endp
2b0c8     80 71 C7 FA |                 rdbyte  htmp, ptrb
2b0cc     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2b0d0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2b0d4     78 00 90 3D |         if_ae   jmp     #.get_device
2b0d8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2b0dc     75 F3 03 F1 |                 add     ptrb, hnext_desc
2b0e0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2b0e4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2b0e8     64 00 90 AD |         if_z    jmp     #.get_device
2b0ec     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2b0f0     04 00 90 AD |         if_z    jmp     #.get_ep
2b0f4     D0 FF 9F FD |                 jmp     #.endp
2b0f8                 | .get_ep
2b0f8     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2b0fc     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2b100     0F 86 67 F0 |                 shl     hr1, #8 + 7
2b104     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2b108     3F 00 00 FF 
2b10c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2b110     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2b114     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2b118     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2b11c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b120     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2b124     A0 FF 9F FD |                 jmp     #.endp
2b128                 | .in_ep
2b128     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2b12c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2b130                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2b130     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2b134     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2b138     8C FF 9F FD |                 jmp     #.endp
2b13c                 | .out_ep
2b13c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2b140     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2b144                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2b144     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2b148     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2b14c     78 FF 9F FD |                 jmp     #.endp
2b150                 | 
2b150                 | .get_device
2b150     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2b154     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2b158     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2b15c     68 00 90 AD |         if_z    jmp     #.gamepad
2b160     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2b164     AC 00 90 AD |         if_z    jmp     #.hub
2b168     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2b16c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2b170     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2b174     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2b178     4C 00 90 AD |         if_z    jmp     #.gamepad
2b17c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2b180     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2b184                 | .keyboard
2b184     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2b188                 |         if HAVE_MOUSE
2b188     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2b18c                 |         else
2b18c                 |         end
2b18c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2b190     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2b194     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2b198     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2b19c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2b1a0     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2b1a4                 |                 'debug(udec(kb_intf_num))
2b1a4                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2b1a4     E0 FE 9F FD |                 jmp     #.next_intf
2b1a8                 | if HAVE_MOUSE
2b1a8                 | .mouse
2b1a8     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2b1ac     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2b1b0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2b1b4     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2b1b8     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2b1bc                 |                 'getbyte ms_interval, hr2, #3
2b1bc     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2b1c0     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2b1c4                 |                 'debug(udec(kb_intf_num))
2b1c4                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2b1c4     C0 FE 9F FD |                 jmp     #.next_intf
2b1c8                 | end
2b1c8                 | .gamepad
2b1c8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2b1cc     C7 71 63 F5 |                 xor     htmp, hpar2
2b1d0     3F 00 00 FF 
2b1d4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b1d8     AC FE 9F AD |         if_z    jmp     #.next_intf
2b1dc                 |         if HAVE_MOUSE
2b1dc     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2b1e0     C7 71 63 F5 |                 xor     htmp, hpar2
2b1e4     3F 00 00 FF 
2b1e8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b1ec     98 FE 9F AD |         if_z    jmp     #.next_intf
2b1f0                 |         end
2b1f0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2b1f4     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2b1f8     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2b1fc                 | 
2b1fc     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2b200     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2b204     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b208     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2b20c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2b210                 |                 'debug(udec(gp_intf_num))
2b210                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2b210     74 FE 9F FD |                 jmp     #.next_intf
2b214                 | .hub
2b214     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2b218     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2b21c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2b220     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2b224     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2b228     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2b22c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2b230     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2b234     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2b238     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2b23c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b240     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2b244     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2b248                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2b248     3C FE 9F FD |                 jmp     #.next_intf
2b24c                 | 
2b24c                 | '------------------------------------------------------------------------------
2b24c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2b24c                 | ' it according to its function, or functions. In the case of this boot protocol
2b24c                 | ' keyboard/mouse class driver:
2b24c                 | ' - SetConfiguration(config_num)
2b24c                 | ' - SetProtocol(boot)
2b24c                 | ' - SetIdle(indefinite)
2b24c                 | ' - Enter the device interrupt IN polling task stage.
2b24c                 | '------------------------------------------------------------------------------
2b24c                 | ' On entry:
2b24c                 | ' On exit:
2b24c                 | '------------------------------------------------------------------------------
2b24c                 | hset_config
2b24c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2b24c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2b24c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2b250     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b254     00 00 0C F2 |                 cmp     0-0, #0                 wz
2b258     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2b25c                 |         if HAVE_MOUSE
2b25c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2b260                 |         end
2b260     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2b264     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2b268                 | .set_config
2b268     6C 0E D0 FE |                 loc     ptra, #set_config
2b26c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2b270     6E ED 03 F1 |                 add     pa, hconfig_base
2b274     F6 8D C3 FA |                 rdbyte  hpar1, pa
2b278     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2b27c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2b280     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2b284     A0 02 A0 FD |                 call    #control_write
2b288     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b28c     2D 00 64 5D |         if_nz   ret
2b290                 | .kbd_config
2b290     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2b294     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2b298                 | 
2b298     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2b29c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2b2a0     3F 00 00 FF 
2b2a4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b2a8     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2b2ac                 | 
2b2ac     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2b2b0     34 0E D0 FE |                 loc     ptra, #set_protocol
2b2b4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2b2b8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b2bc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2b2c0     A0 02 A0 FD |                 call    #control_write
2b2c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b2c8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2b2cc     E4 02 90 5D |         if_nz   jmp     #.notify_client
2b2d0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2b2d4     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2b2d8     30 03 B0 FD |                 call    #hset_idle
2b2dc                 |                 'cmp     retval, #PID_ACK        wz
2b2dc                 |         'if_nz   mov     hkbd_ep_addr, #0
2b2dc                 |         'if_nz   jmp     #.notify_client
2b2dc     A8 99 02 F6 |                 mov     hctwait, _2ms_
2b2e0     EF 02 A0 FD |                 call    #poll_waitx
2b2e4     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2b2e8     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2b2ec     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2b2f0     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2b2f4     2C 03 B0 FD |                 call    #hset_kbdled_report
2b2f8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b2fc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2b300     B0 02 90 5D |         if_nz   jmp     #.notify_client
2b304     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2b308     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b30c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b310     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2b314     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2b318     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2b31c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2b320     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2b324     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2b328     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2b32c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2b330                 |         if !!HAVE_MOUSE
2b330                 |         end
2b330                 | 
2b330                 | .mouse_config
2b330                 | if HAVE_MOUSE
2b330     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2b334     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2b338     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2b33c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2b340     3F 00 00 FF 
2b344     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b348     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2b34c                 | 
2b34c                 |                 debug("mouse passed addr check")
2b34c                 | 
2b34c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2b350     00 00 80 FF 
2b354     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2b358     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2b35c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b360     55 02 A0 FD |                 call    #control_read
2b364     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b368     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2b36c     44 02 90 5D |         if_nz   jmp     #.notify_client
2b370     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2b374     56 01 00 F6 |                 mov     0-0, total_data
2b378     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b37c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2b37c                 | 
2b37c     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2b380     64 0D D0 FE |                 loc     ptra, #set_protocol
2b384     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2b388     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b38c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2b390     A0 02 A0 FD |                 call    #control_write
2b394     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b398     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2b39c     14 02 90 5D |         if_nz   jmp     #.notify_client
2b3a0                 |                 debug("mouse passed SetProtocol")
2b3a0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2b3a4     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2b3a8     60 02 B0 FD |                 call    #hset_idle
2b3ac                 |                 'cmp     retval, #PID_ACK        wz
2b3ac                 |         'if_nz   mov     hmouse_ep_addr, #0
2b3ac                 |         'if_nz   jmp     #.notify_client
2b3ac                 |                 debug("mouse passed SetIdle")
2b3ac     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2b3b0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b3b4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b3b8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2b3bc     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2b3c0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2b3c4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2b3c8     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2b3cc     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2b3d0     3F 00 00 FF 
2b3d4     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2b3d8     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2b3dc     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2b3e0     D0 01 90 FD |                 jmp     #.notify_client
2b3e4                 | end
2b3e4                 | .gamepad_config
2b3e4                 | if _HAVE_GAMEPAD
2b3e4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b3e8     00 00 0C F2 |                 cmp     0-0, #0                 wz
2b3ec     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2b3f0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b3f4     00 70 03 F6 |                 mov     htmp, 0-0
2b3f8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2b3fc     3F 00 00 FF 
2b400     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b404     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2b408                 | 
2b408     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b40c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2b410     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b414     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b418     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2b41c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b420     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2b424     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2b428     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2b42c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b430     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b434     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2b438     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2b43c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2b440                 | 
2b440                 |                 if EMUPAD_MAX_PLAYER > 0
2b440                 |                 
2b440                 | .rule_loop           
2b440                 |                 end
2b440                 | 
2b440     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2b444     5C 00 90 AD |         if_e    jmp     #.xinput
2b448     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2b44c     00 70 03 F6 |                 mov     htmp,0-0
2b450     01 A6 02 FF 
2b454     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2b458     7C 00 90 AD |         if_e    jmp     #.ps3
2b45c                 | 
2b45c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2b460     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2b464     00 00 80 5F 
2b468     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2b46c     03 00 80 AF 
2b470     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2b474     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2b478     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b47c     55 02 A0 FD |                 call    #control_read
2b480     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b484     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2b488     00 00 04 56 |         if_nz   mov     0-0, #0
2b48c     24 01 90 5D |         if_nz   jmp     #.notify_client
2b490     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2b494     56 01 00 F6 |                 mov     0-0, total_data
2b498     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b49c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2b49c                 | 
2b49c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2b4a0     10 01 90 FD |                 jmp     #.notify_client
2b4a4                 | .xinput
2b4a4     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2b4a8     2D EF 03 F6 |                 mov     pb,hdev_port
2b4ac     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2b4b0     03 EE 27 F3 |                 fle     pb,#3
2b4b4     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2b4b8     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2b4bc                 | 
2b4bc     03 B0 06 F6 |                 mov     pkt_data, #3
2b4c0     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2b4c4     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2b4c8     5A 00 A0 FD |                 call    #txn_out
2b4cc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2b4d0                 | 
2b4d0     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2b4d4     DC 00 90 FD |                 jmp     #.notify_client
2b4d8                 | .ps3
2b4d8     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2b4dc     2D EF 03 F6 |                 mov     pb,hdev_port
2b4e0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2b4e4     04 EE 27 F3 |                 fle     pb,#4
2b4e8     F7 EF C3 F9 |                 decod   pb
2b4ec     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2b4f0                 | 
2b4f0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2b4f4     00 0C D0 FE |                 loc     ptra, #set_report
2b4f8     01 00 80 FF 
2b4fc     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2b500     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b504     03 61 5C FC |                 wrword  #48, ptra[wLength]
2b508     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2b50c     A0 02 A0 FD |                 call    #control_write
2b510                 | 
2b510     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2b514     E0 0B D0 FE |                 loc     ptra, #set_report
2b518     01 00 80 FF 
2b51c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2b520     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b524     03 09 5C FC |                 wrword  #4, ptra[wLength]
2b528     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2b52c     A0 02 A0 FD |                 call    #control_write
2b530     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2b534     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2b538     00 00 04 56 |         if_nz   mov     0-0, #0
2b53c     74 00 90 5D |         if_nz   jmp     #.notify_client
2b540                 | 
2b540     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2b544     6C 00 90 FD |                 jmp     #.notify_client
2b548                 | end
2b548                 | 
2b548                 | .hub_config
2b548     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2b54c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2b550     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2b554     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2b558     3F 00 00 FF 
2b55c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b560     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2b564                 | 
2b564     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2b568     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2b56c     26 EF 03 F6 |                 mov     pb, hub_descr_p
2b570     55 02 A0 FD |                 call    #control_read
2b574     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b578     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2b57c     34 00 90 5D |         if_nz   jmp     #.notify_client
2b580                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2b580                 | 
2b580     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2b584     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2b588     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2b58c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2b58c                 | .pwr_loop
2b58c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2b590     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2b594     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2b598     A0 02 A0 FD |                 call    #control_write
2b59c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2b5a0                 | 
2b5a0     B1 99 02 F6 |                 mov     hctwait, _500ms_
2b5a4     B0 99 02 F1 |                 add     hctwait, _100ms_
2b5a8     EF 02 A0 FD |                 call    #poll_waitx
2b5ac                 | 
2b5ac     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2b5b0     00 00 90 FD |                 jmp     #.notify_client
2b5b4                 | 
2b5b4                 | .notify_client
2b5b4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2b5b8     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2b5bc                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2b5bc                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2b5bc     2D 00 64 FD |                 ret
2b5c0                 | 
2b5c0                 | '------------------------------------------------------------------------------
2b5c0                 | ' Initialize the keyboard/mouse data area to start-up values.
2b5c0                 | '------------------------------------------------------------------------------
2b5c0                 | ' On entry:
2b5c0                 | ' On exit:
2b5c0                 | '------------------------------------------------------------------------------
2b5c0                 | init_kbdm_data
2b5c0     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2b5c4     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2b5c8                 | 
2b5c8     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2b5cc     2B ED 03 F6 |                 mov     pa, cache_end_p
2b5d0                 | .loop
2b5d0     61 01 4C FC |                 wrbyte  #0, ptra++
2b5d4     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2b5d8     F4 FF 9F CD |         if_b    jmp     #.loop
2b5dc                 |         
2b5dc                 |         if EMUPAD_MAX_PLAYER > 0
2b5dc                 |         end
2b5dc                 | 
2b5dc                 | 
2b5dc     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2b5e0                 | .regloop
2b5e0     00 EC 8F F9 |                 altd    pa
2b5e4     00 00 04 F6 |                 mov     0-0, #0
2b5e8     01 EC 07 F1 |                 add     pa, #1
2b5ec     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2b5f0     EC FF 9F 5D |         if_nz   jmp     #.regloop
2b5f4                 | 
2b5f4     E1 E1 61 FF 
2b5f8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2b5fc     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2b600     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2b604     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2b608                 | 
2b608     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2b60c                 | 
2b60c                 | '------------------------------------------------------------------------------
2b60c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2b60c                 | ' function.
2b60c                 | '------------------------------------------------------------------------------
2b60c                 | ' On entry:
2b60c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2b60c                 | '   hpar2 - index number of the target interface.
2b60c                 | ' On exit:
2b60c                 | '------------------------------------------------------------------------------
2b60c                 | hset_idle
2b60c     A8 99 02 F6 |                 mov     hctwait, _2ms_
2b610     EF 02 A0 FD |                 call    #poll_waitx
2b614     D8 0A D0 FE |                 loc     ptra, #set_idle
2b618     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2b61c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2b620     A0 02 80 FD |                 jmp     #control_write
2b624                 | 
2b624                 | '------------------------------------------------------------------------------
2b624                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2b624                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2b624                 | '------------------------------------------------------------------------------
2b624                 | ' On entry:
2b624                 | '   ep_addr_pid - device address and enpoint for the request.
2b624                 | ' On exit:
2b624                 | '   retval - transaction result.
2b624                 | '------------------------------------------------------------------------------
2b624                 | hset_kbdled_report
2b624     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2b628     CC 0A D0 FE |                 loc     ptra, #set_report
2b62c     01 00 80 FF 
2b630     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2b634     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b638     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2b63c     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b640     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2b644     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2b648                 | 
2b648                 | '------------------------------------------------------------------------------
2b648                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2b648                 | '------------------------------------------------------------------------------
2b648                 | ' On entry:
2b648                 | ' On exit:
2b648                 | '------------------------------------------------------------------------------
2b648                 | hget_kbd_in_report
2b648     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2b64c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b650     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2b654     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2b658     CF 02 A0 FD |                 call    #do_int_in
2b65c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b660     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b664                 | 
2b664     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b668     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b66c                 | 
2b66c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2b670     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b674     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2b678     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2b67c                 | 
2b67c     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2b680     18 00 B0 FD |                 call    #hkbd_compare
2b684                 |         if EMUPAD_MAX_PLAYER > 0
2b684                 |         end
2b684                 | 
2b684                 | .led_check
2b684     3B 71 03 F6 |                 mov     htmp, kb_led_states
2b688     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2b68c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2b690     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2b694     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2b698     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2b69c                 | 
2b69c                 | '------------------------------------------------------------------------------
2b69c                 | ' Compare current and previous keyboard data buffers for keypress changes.
2b69c                 | '------------------------------------------------------------------------------
2b69c                 | hkbd_compare
2b69c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b6a0     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2b6a4     61 73 07 FB |                 rdlong  htmp1, ptra++
2b6a8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2b6ac     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2b6b0     61 73 07 FB |                 rdlong  htmp1, ptra++
2b6b4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2b6b8     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2b6bc     2D 00 64 AD |         if_z    ret
2b6c0                 | 
2b6c0     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2b6c4                 | 
2b6c4                 |                 ' Handle modifiers
2b6c4     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2b6c8     00 87 C7 FA |                 rdbyte  hr1, ptra
2b6cc     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2b6d0     63 86 63 FD |                 mergew  hr1
2b6d4     08 EC 07 F6 |                 mov     pa,#8
2b6d8                 | .modloop
2b6d8     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2b6dc     E8 8C 07 F6 |                 mov     hpar1,#$E8
2b6e0     F6 8D 83 F1 |                 sub     hpar1,pa
2b6e4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2b6e8     FB ED 6F FB |                 djnz    pa,#.modloop
2b6ec                 | 
2b6ec     6F E0 75 FD | .release        modc    _set    wc
2b6f0                 |                 'alts    hdev_port, #hid_report_p
2b6f0                 |                 'mov     ptra, hid_report_p
2b6f0     02 F0 07 F1 |                 add     ptra, #2
2b6f4     06 EC 07 F6 |                 mov     pa, #6
2b6f8     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2b6fc     20 00 90 AD |         if_z    jmp     #.rl3
2b700     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2b704     02 F2 07 F1 |                 add     ptrb, #2
2b708     06 EE 07 F6 |                 mov     pb, #6
2b70c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2b710     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2b714     08 00 90 AD |         if_z    jmp     #.rl3
2b718     FC EF 6F FB |                 djnz    pb, #.rl2
2b71c     68 00 B0 FD |                 call    #hkbd_translate
2b720     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2b724                 | 
2b724     00 90 07 F6 |                 mov     hpar3, #0
2b728     1F 90 27 F4 |                 bith    hpar3, #31
2b72c                 | 
2b72c     6F 00 74 FD | .press          modc    _clr    wc
2b730     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b734     02 F0 07 F1 |                 add     ptra, #2
2b738     06 EC 07 F6 |                 mov     pa, #6
2b73c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2b740     20 00 90 AD |         if_z    jmp     #.pl3
2b744     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2b748     02 F2 07 F1 |                 add     ptrb, #2
2b74c     06 EE 07 F6 |                 mov     pb, #6
2b750     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2b754     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2b758     08 00 90 AD |         if_z    jmp     #.pl3
2b75c     FC EF 6F FB |                 djnz    pb, #.pl2
2b760     24 00 B0 FD |                 call    #hkbd_translate
2b764     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2b768                 | 
2b768     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2b76c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2b770     28 02 64 FD |                 setq #1
2b774     61 73 07 FB |                 rdlong  htmp1, ptra++
2b778     28 02 64 FD |                 setq #1
2b77c     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2b780     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2b784                 | 
2b784     2D 00 64 FD |                 ret
2b788                 | 
2b788                 | '------------------------------------------------------------------------------
2b788                 | ' Translate keyboard scancode to ASCII
2b788                 | '------------------------------------------------------------------------------
2b788                 | ' On entry:
2b788                 | '   hpar1 - scancode
2b788                 | '   hpar2 - key modifiers state
2b788                 | '       c - pressed (0) or released (1) flag
2b788                 | ' On exit:
2b788                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2b788                 | '               30..17 = unused
2b788                 | '                   18 = scroll-lock state 
2b788                 | '                   17 = caps-lock state
2b788                 | '                   16 = num-lock state 
2b788                 | '                15..8 = key modifiers state
2b788                 | '                 7..0 = scancode
2b788                 | '------------------------------------------------------------------------------
2b788                 | hkbd_translate
2b788     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2b78c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2b790     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2b794     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2b798     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2b79c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2b7a0                 | 
2b7a0                 |         if EMUPAD_MAX_PLAYER > 0
2b7a0                 | 
2b7a0                 |         if EMUPAD_BT0_BIT >= 0
2b7a0                 |         end
2b7a0                 |         if EMUPAD_BT1_BIT >= 0
2b7a0                 |         end
2b7a0                 |         if EMUPAD_BT2_BIT >= 0
2b7a0                 |         end
2b7a0                 |         if EMUPAD_BT3_BIT >= 0
2b7a0                 |         end
2b7a0                 |         if EMUPAD_BT4_BIT >= 0
2b7a0                 |         end
2b7a0                 |         if EMUPAD_BT5_BIT >= 0
2b7a0                 |         end
2b7a0                 |         if EMUPAD_BT6_BIT >= 0
2b7a0                 |         end
2b7a0                 |         if EMUPAD_BT7_BIT >= 0
2b7a0                 |         end
2b7a0                 |         if EMUPAD_BT8_BIT >= 0
2b7a0                 |         end
2b7a0                 |         if EMUPAD_BT9_BIT >= 0
2b7a0                 |         end
2b7a0                 | 
2b7a0                 |         end
2b7a0     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2b7a4     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2b7a8     1F 8C 47 F4 |                 bitc    hpar1, #31
2b7ac                 |         if KEYQUEUE_SIZE > 0
2b7ac     C4 09 B0 FE |                 loc pb,#keyq_head
2b7b0     F7 71 E3 FA |                 rdword htmp,pb
2b7b4     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2b7b8     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2b7bc     B8 75 03 F6 |                 mov htmp2,htmp
2b7c0     04 74 07 FA |                 mul htmp2,#4
2b7c4     F7 75 03 F1 |                 add htmp2,pb
2b7c8     02 74 07 F1 |                 add htmp2,#2
2b7cc     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2b7d0     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2b7d4     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2b7d8     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2b7dc                 |         end
2b7dc     2D 00 7C FD |                 ret wcz
2b7e0                 | 
2b7e0                 | if HAVE_MOUSE
2b7e0                 | '------------------------------------------------------------------------------
2b7e0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2b7e0                 | '------------------------------------------------------------------------------
2b7e0                 | ' On entry:
2b7e0                 | ' On exit:
2b7e0                 | '------------------------------------------------------------------------------
2b7e0                 | hget_mouse_in_report
2b7e0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2b7e4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b7e8     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2b7ec     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2b7f0     CF 02 A0 FD |                 call    #do_int_in
2b7f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b7f8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b7fc                 | 
2b7fc     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b800     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b804                 | 
2b804     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2b808     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b80c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2b810     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2b814                 | 
2b814     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b818     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2b81c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2b820     01 90 87 31 |         if_ae   sub     hpar3, #1
2b824                 | 
2b824     40 09 90 FE |                 loc     pa, #mouse_limits
2b828     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2b82c                 | 
2b82c                 |                 ' load xacc,yacc,zacc
2b82c     28 04 64 FD |                 setq    #3-1
2b830     80 87 07 FB |                 rdlong  hr1,ptrb
2b834                 |                 ' load limits and outptr
2b834     28 04 64 FD |                 setq    #3-1
2b838     F6 73 03 FB |                 rdlong  htmp1,pa
2b83c                 | 
2b83c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2b840     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2b844     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2b848     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2b84c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2b850     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2b854     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2b858     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2b85c                 |               
2b85c                 | 
2b85c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2b860     07 70 67 F7 |                 signx   htmp, #7
2b864     B8 87 03 F1 |                 add     hr1,htmp
2b868     00 72 0F F2 |                 cmp     htmp1,#0 wz
2b86c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2b870     00 86 47 53 |         if_ne   fges    hr1,#0
2b874                 | 
2b874     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2b878     07 70 67 F7 |                 signx   htmp, #7
2b87c     B8 89 03 F1 |                 add     hr2,htmp
2b880     00 74 0F F2 |                 cmp     htmp2,#0 wz
2b884     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2b888     00 88 47 53 |         if_ne   fges    hr2,#0
2b88c                 |                 
2b88c                 | 
2b88c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2b890     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2b894     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2b898     B8 8B 03 A1 |         if_z    add     hr3,htmp
2b89c                 | 
2b89c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2b8a0     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2b8a4                 | 
2b8a4                 |                 ' write back accumulators
2b8a4     28 04 64 FD |                 setq    #3-1
2b8a8     80 87 67 FC |                 wrlong  hr1,ptrb
2b8ac                 |                 ' if outptr set, write X/Y words
2b8ac     00 76 0F F2 |                 cmp htmp3,#0                    wz
2b8b0     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2b8b4     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2b8b8     2D 00 64 FD |                 ret
2b8bc                 | end
2b8bc                 | 
2b8bc                 | '------------------------------------------------------------------------------
2b8bc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2b8bc                 | '------------------------------------------------------------------------------
2b8bc                 | ' On entry:
2b8bc                 | ' On exit:
2b8bc                 | '------------------------------------------------------------------------------
2b8bc                 | if _HAVE_GAMEPAD
2b8bc                 | hget_gp_in_report
2b8bc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b8c0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2b8c4                 | 
2b8c4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b8c8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2b8cc     00 90 E3 F8 |                 getbyte hpar3
2b8d0     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2b8d4     CF 02 A0 FD |                 call    #do_int_in
2b8d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b8dc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b8e0                 | 
2b8e0     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b8e4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b8e8                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2b8e8                 | 
2b8e8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2b8ec     00 70 E3 F8 |                 getbyte htmp                            ' |
2b8f0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b8f4     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2b8f8     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2b8fc     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2b900     B8 01 C0 F8 |                 setbyte htmp                            ' |
2b904                 | 
2b904                 | ' Note: the following code compares the current and previous reports
2b904                 | ' and process the data if there are changes to ease the debug output.
2b904                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2b904                 | ' gpPreReport buffer.
2b904                 | 
2b904                 |                 ' ----- start of block to remove
2b904                 |                 {
2b904                 |                 }
2b904                 |                 ' ----- end of block to remove
2b904     F4 04 90 FE |                 loc pa,#hpad_translate
2b908     2A EC 63 FD |                 push pa
2b90c                 | 
2b90c                 |                 ' FALL THROUGH !!!!
2b90c                 | 
2b90c                 | '------------------------------------------------------------------------------
2b90c                 | ' Decode controller report
2b90c                 | '------------------------------------------------------------------------------
2b90c                 | hid_decode
2b90c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2b90c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2b910     00 04 00 FF 
2b914     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2b918                 | 
2b918     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2b91c                 | 
2b91c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2b920     00 2A E3 F8 |                 getbyte hidr_type
2b924     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2b928     34 02 90 AD |         if_z    jmp     #hpad_xinput
2b92c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2b930     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2b934     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2b938     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2b93c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2b940                 |                 
2b940                 | 
2b940                 | '------------------------------------------------------------------------------
2b940                 | ' Handle HID controller (or mouse now
2b940                 | ' On entry:
2b940                 | '   ptrb - controller report
2b940                 | '------------------------------------------------------------------------------
2b940                 | hpad_hid
2b940     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b944     F7 F1 03 F6 |                 mov     ptra, pb
2b948     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2b94c     00 EC 03 F6 |                 mov     pa, 0-0
2b950                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2b950     19 2A 3B FF 
2b954     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2b958                 | 
2b958                 | .next
2b958     00 EC 5F F2 |                 cmps    pa, #0      wcz
2b95c     2D 00 7C ED |         if_be   ret     wcz
2b960                 | 
2b960     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2b964     01 EC 87 F1 |                 sub     pa, #1
2b968     00 8E 07 F6 |                 mov     hpar2, #0
2b96c                 | 
2b96c     C6 71 03 F6 |                 mov     htmp, hpar1
2b970     03 70 07 F5 |                 and     htmp, #$03
2b974     01 70 0F F2 |                 cmp     htmp, #1    wz
2b978     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2b97c     07 8E 67 A7 |         if_z    signx   hpar2,#7
2b980     01 EC 87 A1 |         if_z    sub     pa, #1
2b984     02 70 0F F2 |                 cmp     htmp, #2    wz
2b988     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2b98c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2b990     02 EC 87 A1 |         if_z    sub     pa, #2
2b994     03 70 0F F2 |                 cmp     htmp, #3    wz
2b998     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2b99c     04 EC 87 A1 |         if_z    sub     pa, #4
2b9a0                 | 
2b9a0     FC 8C 07 F5 |                 and     hpar1, #$FC
2b9a4                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2b9a4                 | 
2b9a4     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2b9a8     0C 01 90 AD |         if_z    jmp     #.report_id
2b9ac     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2b9b0     24 01 90 AD |         if_z    jmp     #.usage_page
2b9b4     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2b9b8     2C 01 90 AD |         if_z    jmp     #.usage
2b9bc     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2b9c0     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2b9c4     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2b9c8     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2b9cc     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2b9d0     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2b9d4     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2b9d8     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2b9dc     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2b9e0     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2b9e4     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2b9e8     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2b9ec     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2b9f0     64 FF 9F 5D |         if_nz   jmp     #.next
2b9f4                 | 
2b9f4     D8 1D A7 FB |                 tjf     hidr_state,#.next
2b9f8                 | 
2b9f8     03 8E 07 F5 |                 and     hpar2, #$03
2b9fc     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2ba00     18 00 90 5D |         if_nz   jmp     #.skip
2ba04                 | 
2ba04     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2ba08     20 00 90 AD |         if_z    jmp     #.axes
2ba0c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2ba10     5C 00 90 AD |         if_z    jmp     #.hats
2ba14     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2ba18     70 00 90 AD |         if_z    jmp     #.buttons
2ba1c                 | .skip
2ba1c     8F 71 03 F6 |                 mov     htmp, hidr_size
2ba20     90 71 03 FA |                 mul     htmp, hidr_count
2ba24     B8 23 03 F1 |                 add     hidr_offset, htmp
2ba28     2C FF 9F FD |                 jmp     #.next
2ba2c                 | .axes
2ba2c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2ba2c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2ba30     90 87 03 F6 |                 mov     hr1, hidr_count
2ba34                 | .l1
2ba34     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2ba38     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2ba3c     04 03 B0 FD |                 call    #hpad_getbits
2ba40     64 03 B0 FD |                 call    #hpad_normalize
2ba44     06 84 1F F2 |                 cmp     hr0, #6         wcz
2ba48     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2ba4c     00 88 43 C8 |         if_b    getnib  hr2
2ba50     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2ba54     5F 01 20 C9 |         if_b    setword retval
2ba58     01 84 07 C1 |         if_b    add     hr0, #1
2ba5c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2ba60     F4 87 6F FB |                 djnz    hr1, #.l1
2ba64                 | 
2ba64     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2ba68     01 1C 07 F6 |                 mov     hidr_state, #1
2ba6c     E8 FE 9F FD |                 jmp     #.next
2ba70                 | .hats
2ba70                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2ba70     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2ba74     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2ba78     C8 02 B0 FD |                 call    #hpad_getbits
2ba7c     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2ba80     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2ba84     01 1C 07 F6 |                 mov     hidr_state, #1
2ba88     90 FF 9F FD |                 jmp     #.skip
2ba8c                 | .buttons
2ba8c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2ba8c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2ba90     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2ba94     90 8F 03 FA |                 mul     hpar2, hidr_count
2ba98     A8 02 B0 FD |                 call    #hpad_getbits
2ba9c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2baa0     B8 BF 62 F0 |                 shl     retval, htmp
2baa4     5F 17 43 F5 |                 or      hidr_buttons, retval
2baa8     90 71 03 F1 |                 add     htmp, hidr_count
2baac     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2bab0     01 1C 07 F6 |                 mov     hidr_state, #1
2bab4     64 FF 9F FD |                 jmp     #.skip
2bab8                 | .report_id
2bab8     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2babc     2D 00 7C 5D |         if_nz   ret     wcz
2bac0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2bac4     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2bac8     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2bacc     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2bad0     01 F2 87 51 |         if_nz   sub     ptrb,#1
2bad4     80 FE 9F FD |                 jmp     #.next
2bad8                 | .usage_page
2bad8     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2badc     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2bae0     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2bae4     70 FE 9F FD |                 jmp     #.next
2bae8                 | .usage
2bae8     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2baec     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2baf0     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2baf4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2baf8     5C FE 9F AD |         if_z    jmp     #.next
2bafc     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2bb00     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2bb04     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2bb08     4C FE 9F AD |         if_z    jmp     #.next
2bb0c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2bb10     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2bb14     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2bb18     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2bb1c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2bb20     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2bb24     10 00 90 AD |         if_z    jmp     #.usage_axis
2bb28     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2bb2c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2bb30     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2bb34     20 FE 9F FD |                 jmp     #.next
2bb38                 | .usage_axis
2bb38     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2bb3c     18 FE 9F CD |         if_b    jmp     #.next
2bb40     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2bb44     C7 01 00 F8 |                 setnib  hpar2
2bb48                 | 
2bb48     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2bb4c     C7 8F C3 F9 |                 decod   hpar2
2bb50     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2bb54                 | 
2bb54     01 24 07 F1 |                 add     hidr_usage_idx, #1
2bb58     02 1C 07 F6 |                 mov     hidr_state, #2
2bb5c     F8 FD 9F FD |                 jmp     #.next
2bb60                 | 
2bb60                 | '------------------------------------------------------------------------------
2bb60                 | ' Handle XInput controller
2bb60                 | ' On entry:
2bb60                 | '   ptrb - controller report
2bb60                 | '------------------------------------------------------------------------------
2bb60                 | '   Default implementation translates the report to a pseudo-defacto hid
2bb60                 | '   standard and jumps to hpad_translate for actions.
2bb60                 | '   Implementors may take specific actions for this kind of controller.
2bb60                 | '------------------------------------------------------------------------------
2bb60                 | hpad_xinput
2bb60     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2bb64     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2bb68     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2bb6c     14 70 0F F2 |                 cmp     htmp, #$14      wz
2bb70     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2bb74                 | 
2bb74                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2bb74                 | 
2bb74     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2bb78     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2bb7c                 | 
2bb7c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2bb80     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2bb84     5F BF 22 F6 |                 not     retval
2bb88     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2bb8c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2bb90     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2bb94     5F BF 22 F6 |                 not     retval
2bb98     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2bb9c                 | 
2bb9c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2bba0     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2bba4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2bba8     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2bbac     F8 01 B0 FD |                 call    #hpad_normalize
2bbb0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2bbb4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2bbb8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2bbbc     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2bbc0     E4 01 B0 FD |                 call    #hpad_normalize
2bbc4     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2bbc8                 | 
2bbc8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2bbcc     81 BF E6 FA |                 rdword  retval, ptrb[1]
2bbd0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2bbd4     00 16 47 F4 |                 bitc    hidr_buttons, #0
2bbd8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2bbdc     01 16 47 F4 |                 bitc    hidr_buttons, #1
2bbe0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2bbe4     02 16 47 F4 |                 bitc    hidr_buttons, #2
2bbe8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2bbec     03 16 47 F4 |                 bitc    hidr_buttons, #3
2bbf0     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2bbf4     04 16 47 F4 |                 bitc    hidr_buttons, #4
2bbf8     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2bbfc     05 16 47 F4 |                 bitc    hidr_buttons, #5
2bc00     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2bc04     08 16 47 F4 |                 bitc    hidr_buttons, #8
2bc08     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2bc0c     09 16 47 F4 |                 bitc    hidr_buttons, #9
2bc10     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2bc14     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2bc18     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2bc1c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2bc20     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2bc24     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2bc28                 | 
2bc28     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2bc2c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2bc30     7A BB 7A FF 
2bc34     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2bc38     F9 FF 7F FF 
2bc3c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2bc40     B9 71 5F F9 |                 altgn   htmp, #htmp1
2bc44     00 70 43 F8 |                 getnib  htmp
2bc48     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2bc4c                 | 
2bc4c     AC 01 90 FD |                 jmp     #hpad_translate
2bc50                 | 
2bc50                 | '------------------------------------------------------------------------------
2bc50                 | ' Handle PS3 controller
2bc50                 | ' On entry:
2bc50                 | '   ptrb - controller report
2bc50                 | '------------------------------------------------------------------------------
2bc50                 | '   Default implementation translates the report to a pseudo-defacto hid
2bc50                 | '   standard and jumps to hpad_translate for actions.
2bc50                 | '   Implementors may take specific actions for this kind of controller.
2bc50                 | '------------------------------------------------------------------------------
2bc50                 | hpad_ps3
2bc50     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2bc54     01 70 0F F2 |                 cmp     htmp, #$01      wz
2bc58     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2bc5c                 | 
2bc5c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2bc5c                 | 
2bc5c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2bc60     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2bc64     40 01 B0 FD |                 call    #hpad_normalize
2bc68     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2bc6c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2bc70     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2bc74     30 01 B0 FD |                 call    #hpad_normalize
2bc78     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2bc7c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2bc80     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2bc84     20 01 B0 FD |                 call    #hpad_normalize
2bc88     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2bc8c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2bc90     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2bc94     10 01 B0 FD |                 call    #hpad_normalize
2bc98     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2bc9c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2bca0     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2bca4                 | 
2bca4     08 8C 07 F6 |                 mov     hpar1, #8
2bca8     13 8E 07 F6 |                 mov     hpar2, #19
2bcac     94 00 B0 FD |                 call    #hpad_getbits
2bcb0                 | 
2bcb0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2bcb4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2bcb8     00 16 47 F4 |                 bitc    hidr_buttons, #0
2bcbc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2bcc0     01 16 47 F4 |                 bitc    hidr_buttons, #1
2bcc4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2bcc8     02 16 47 F4 |                 bitc    hidr_buttons, #2
2bccc     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2bcd0     03 16 47 F4 |                 bitc    hidr_buttons, #3
2bcd4     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2bcd8     04 16 47 F4 |                 bitc    hidr_buttons, #4
2bcdc     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2bce0     05 16 47 F4 |                 bitc    hidr_buttons, #5
2bce4     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2bce8     06 16 47 F4 |                 bitc    hidr_buttons, #6
2bcec     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2bcf0     07 16 47 F4 |                 bitc    hidr_buttons, #7
2bcf4     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2bcf8     08 16 47 F4 |                 bitc    hidr_buttons, #8
2bcfc     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2bd00     09 16 47 F4 |                 bitc    hidr_buttons, #9
2bd04     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2bd08     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2bd0c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2bd10     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2bd14     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2bd18     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2bd1c                 | 
2bd1c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2bd20     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2bd24     09 FA 79 FF 
2bd28     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2bd2c     FF FA 7F FF 
2bd30     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2bd34     B9 71 5F F9 |                 altgn   htmp, #htmp1
2bd38     00 70 43 F8 |                 getnib  htmp
2bd3c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2bd40                 | 
2bd40     B8 00 90 FD |                 jmp     #hpad_translate
2bd44                 | 
2bd44                 | '------------------------------------------------------------------------------
2bd44                 | ' Read bits from report data buffer
2bd44                 | '------------------------------------------------------------------------------
2bd44                 | ' On entry:
2bd44                 | '   PTRB - report buffer
2bd44                 | '   hpar1 - start bit
2bd44                 | '   hpar2 - number of bits
2bd44                 | ' On exit:
2bd44                 | '   retval - bits
2bd44                 | '------------------------------------------------------------------------------
2bd44                 | hpad_getbits
2bd44     C6 71 03 F6 |                 mov     htmp, hpar1
2bd48     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2bd4c     F9 71 03 F1 |                 add     htmp, ptrb
2bd50     B8 BF 02 FB |                 rdlong  retval, htmp
2bd54                 | 
2bd54     C6 73 03 F6 |                 mov     htmp1, hpar1
2bd58     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2bd5c     B9 BF 42 F0 |                 shr     retval, htmp1
2bd60                 | 
2bd60     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2bd64     10 00 90 1D |         if_a    jmp     #.l1
2bd68                 | 
2bd68     C7 8F C3 F9 |                 decod   hpar2
2bd6c     01 8E 87 F1 |                 sub     hpar2, #1
2bd70     C7 BF 02 F5 |                 and     retval, hpar2
2bd74     2D 00 64 FD |                 ret
2bd78                 | .l1
2bd78     FF 7F 00 FF 
2bd7c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2bd80     03 70 07 F1 |                 add     htmp, #3
2bd84     B8 75 03 FB |                 rdlong  htmp2, htmp
2bd88     18 8E 87 F1 |                 sub     hpar2, #24
2bd8c     C7 8F C3 F9 |                 decod   hpar2
2bd90     01 8E 87 F1 |                 sub     hpar2, #1
2bd94     B9 75 43 F0 |                 shr     htmp2, htmp1
2bd98     C7 75 03 F5 |                 and     htmp2, hpar2
2bd9c     18 74 67 F0 |                 shl     htmp2, #24
2bda0     BA BF 42 F5 |                 or      retval, htmp2
2bda4     2D 00 64 FD |                 ret
2bda8                 | 
2bda8                 | '------------------------------------------------------------------------------
2bda8                 | ' Normalize value to signed word (-32768 / 32767)
2bda8                 | '------------------------------------------------------------------------------
2bda8                 | ' On entry:
2bda8                 | '   retval - value to normalize
2bda8                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2bda8                 | '   - or -
2bda8                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2bda8                 | '   hidr_size - value bits length
2bda8                 | ' On exit:
2bda8                 | '   retval - normalized value
2bda8                 | '------------------------------------------------------------------------------
2bda8                 | hpad_normalize
2bda8     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2bdac     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2bdb0     2D 00 64 AD |         if_z    ret
2bdb4     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2bdb8     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2bdbc     0F 72 77 F7 |                 signx   htmp1, #15      wc
2bdc0     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2bdc4     00 BE 66 C7 |         if_c    signx   retval, #0-0
2bdc8     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2bdcc     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2bdd0     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2bdd4     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2bdd8     B8 71 53 F6 |                 abs     htmp            wc
2bddc     1F BE 0E F4 |                 testb   retval, #31     wz
2bde0     5F BF 42 F6 |                 abs     retval
2bde4     B8 BF 12 FD |                 qdiv    retval, htmp
2bde8     18 BE 62 FD |                 getqx   retval
2bdec     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2bdf0     C0 FF 7F FF 
2bdf4     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2bdf8     2D 00 64 FD |                 ret
2bdfc                 | 
2bdfc                 | '------------------------------------------------------------------------------
2bdfc                 | ' Perform controller actions
2bdfc                 | ' On entry:
2bdfc                 | '    hidr_id        report id
2bdfc                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2bdfc                 | '                      X = hidr_axis+0, #0
2bdfc                 | '                      Y = hidr_axis+0, #1
2bdfc                 | '                      Z = hidr_axis+1, #0
2bdfc                 | '                     RX = hidr_axis+1, #1
2bdfc                 | '                     RY = hidr_axis+2, #0
2bdfc                 | '                     RZ = hidr_axis+2, #1
2bdfc                 | '    hidr_buttons   buttons state (bits 0 to 31)
2bdfc                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2bdfc                 | '
2bdfc                 | '                     -------3 -------2 -------1 -------0 byte
2bdfc                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2bdfc                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2bdfc                 | '                                zyx||| |||||||| ++++++++ n. buttons
2bdfc                 | '                                |||||| ||||++++--------- n. axes
2bdfc                 | '                                |||||| ++++------------- n. hats
2bdfc                 | '                                ++++++------------------ valid axes
2bdfc                 | '------------------------------------------------------------------------------
2bdfc                 | hpad_translate
2bdfc                 | 
2bdfc                 | 
2bdfc                 |         if HAVE_HIDPAD
2bdfc     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2be00     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2be04     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2be08     01 70 E7 F2 |                 cmpsub  htmp,#1
2be0c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2be10     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2be14     2D 00 7C 3D |         if_ae   ret     wcz
2be18     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2be1c     B8 F3 03 F1 |                 add     ptrb,htmp
2be20     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2be24     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2be28     28 0C 64 FD |                 setq    #7-1
2be2c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2be30                 |         end
2be30                 | 
2be30                 | 
2be30                 |         if EMUPAD_MAX_PLAYER > 0
2be30                 | .emupad_no_hat
2be30                 |         if EMUPAD_BT0_BIT >= 0
2be30                 |         end
2be30                 |         if EMUPAD_BT1_BIT >= 0
2be30                 |         end
2be30                 |         if EMUPAD_BT2_BIT >= 0
2be30                 |         end
2be30                 |         if EMUPAD_BT3_BIT >= 0
2be30                 |         end
2be30                 |         if EMUPAD_BT4_BIT >= 0
2be30                 |         end
2be30                 |         if EMUPAD_BT5_BIT >= 0
2be30                 |         end
2be30                 |         if EMUPAD_BT6_BIT >= 0
2be30                 |         end
2be30                 |         if EMUPAD_BT7_BIT >= 0
2be30                 |         end
2be30                 |         if EMUPAD_BT8_BIT >= 0
2be30                 |         end
2be30                 |         if EMUPAD_BT9_BIT >= 0
2be30                 |         end
2be30                 | .emupad_slot_over
2be30                 |         end
2be30                 | 
2be30                 |         if 0
2be30                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2be30                 | 
2be30                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2be30                 | 
2be30                 |         end
2be30     2D 00 64 FD |                 ret
2be34                 | end
2be34                 | 
2be34                 | if EMUPAD_MAX_PLAYER > 0
2be34                 | '------------------------------------------------------------------------------
2be34                 | ' Clear EmuPad state
2be34                 | '------------------------------------------------------------------------------
2be34                 | emupad_reset
2be34                 | 
2be34                 | '------------------------------------------------------------------------------
2be34                 | ' Get EmuPad Player number for current device (into retval)
2be34                 | ' Z flag is also set if current device is valid
2be34                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2be34                 | '------------------------------------------------------------------------------
2be34                 | emupad_getnum
2be34                 | .loop
2be34                 | '------------------------------------------------------------------------------
2be34                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2be34                 | '------------------------------------------------------------------------------
2be34                 | emupad_discon
2be34                 | .loop         
2be34                 |         
2be34                 |         ' FALL THROUGH!!!
2be34                 | 
2be34                 | '------------------------------------------------------------------------------
2be34                 | ' Update EmuPad reports (all of them...)
2be34                 | '------------------------------------------------------------------------------
2be34                 | emupad_write_reports
2be34                 | .devloop
2be34                 | 
2be34                 | end
2be34                 | 
2be34                 | 
2be34                 | '------------------------------------------------------------------------------
2be34                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2be34                 | '------------------------------------------------------------------------------
2be34                 | ' On entry:
2be34                 | ' On exit:
2be34                 | '------------------------------------------------------------------------------
2be34                 | hget_hub_status
2be34     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2be38     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2be3c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2be40     01 90 2F F9 |                 setword hpar3, #1, #1
2be44     CF 02 A0 FD |                 call    #do_int_in
2be48     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2be4c     0C 00 90 AD |         if_z    jmp     #.data
2be50     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2be54     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2be58     2D 00 64 FD |                 ret
2be5c                 | .data
2be5c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2be60     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2be64                 | 
2be64     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2be68     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2be6c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2be70     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2be74                 |                 debug(ubin_long(hub_status_chg))
2be74                 | 
2be74     01 5A 06 F6 |                 mov     hdev_port, #1
2be78                 | .loop
2be78     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2be7c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2be80     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2be84     F0 FF 9F 3D |         if_nc   jmp     #.loop
2be88     2D 00 64 FD |                 ret
2be8c                 | 
2be8c                 | hub_port_handler
2be8c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2be90     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2be94     27 EF 03 F6 |                 mov     pb, urx_buff_p
2be98     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2be9c     55 02 A0 FD |                 call    #control_read
2bea0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2bea4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2bea4                 | 
2bea4     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2bea8     50 01 90 5D |         if_x0   jmp     #.other
2beac     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2beb0     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2beb4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2beb8     A0 02 A0 FD |                 call    #control_write
2bebc     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2bec0     7C 01 90 5D |         if_x0   jmp     #.disconnect
2bec4     B0 99 02 F6 |                 mov     hctwait, _100ms_
2bec8     EF 02 A0 FD |                 call    #poll_waitx
2becc                 | 
2becc     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2bed0     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2bed4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bed8     A0 02 A0 FD |                 call    #control_write
2bedc                 | 
2bedc     02 76 07 F6 |                 mov     htmp3, #2
2bee0                 | .wait_reset
2bee0     AC 99 02 F6 |                 mov     hctwait, _8ms_
2bee4     EF 02 A0 FD |                 call    #poll_waitx
2bee8     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2beec     27 EF 03 F6 |                 mov     pb, urx_buff_p
2bef0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bef4     55 02 A0 FD |                 call    #control_read
2bef8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2befc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2bf00     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2bf04                 | 
2bf04     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2bf08     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2bf0c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bf10     A0 02 A0 FD |                 call    #control_write
2bf14                 | 
2bf14     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2bf18                 | .wait_recover
2bf18     A7 99 02 F6 |                 mov     hctwait, _1ms_
2bf1c     EF 02 A0 FD |                 call    #poll_waitx
2bf20     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2bf24                 | 
2bf24     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2bf28     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2bf2c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2bf30                 | 
2bf30     00 08 00 FF 
2bf34     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2bf38     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2bf3c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2bf40     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2bf44     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2bf48     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bf4c     48 01 90 5D |         if_nz   jmp     #.done
2bf50                 | .get_dev_desc
2bf50     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2bf54     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2bf58     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2bf5c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2bf60     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2bf64     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2bf68     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2bf6c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bf70     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2bf74     AC 99 02 F6 |                 mov     hctwait, _8ms_
2bf78     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2bf7c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2bf80     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2bf84     BE 00 A0 FD |                 call    #calc_crc5
2bf88     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2bf8c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2bf90     F7 AD C2 FA |                 rdbyte  total_data, pb
2bf94     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2bf98     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2bf9c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bfa0     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2bfa4     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2bfa8     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2bfac                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2bfac     9F 99 02 F6 |                 mov     hctwait, _500us_
2bfb0     EF 02 A0 FD |                 call    #poll_waitx
2bfb4     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2bfb8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2bfbc     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2bfc0     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2bfc4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bfc8     CC 00 90 5D |         if_nz   jmp     #.done
2bfcc     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2bfd0     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2bfd4     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2bfd8     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2bfdc     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2bfe0     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2bfe4     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2bfe8     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2bfec     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2bff0     A4 00 90 CD |         if_b    jmp     #.done
2bff4     6C F0 BF FD |                 call    #hparse_con_desc
2bff8     9C 00 90 FD |                 jmp     #.done
2bffc                 | 
2bffc                 | .other
2bffc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2c000     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2c004     28 00 90 AD |         if_x1   jmp     #.reset_feature
2c008     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2c00c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2c010     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2c014     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2c018     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2c01c     10 00 90 AD |         if_x1   jmp     #.reset_feature
2c020     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2c024     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2c028     04 00 90 AD |         if_x1   jmp     #.reset_feature
2c02c     68 00 90 FD |                 jmp     #.done
2c030                 | .reset_feature
2c030     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2c034     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2c038     A0 02 A0 FD |                 call    #control_write
2c03c     58 00 90 FD |                 jmp     #.done
2c040                 | .disconnect
2c040                 | 
2c040     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2c044     00 70 E3 F8 |                 getbyte htmp
2c048     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2c04c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2c050     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2c054     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2c058     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2c05c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2c060                 |         if EMUPAD_MAX_PLAYER > 0
2c060                 |         end
2c060                 |         if HAVE_MOUSE
2c060     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2c064     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2c068     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2c06c                 |         end
2c06c                 |         if HAVE_HIDPAD
2c06c     14 0A F0 FE |                 loc ptrb,#hidpad_report
2c070     2D 71 03 F6 |                 mov htmp,hdev_port
2c074     01 70 E7 F2 |                 cmpsub htmp,#1
2c078     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2c07c     B8 F3 03 F1 |                 add ptrb,htmp
2c080     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2c084     80 01 6C FC |                 wrlong #0,ptrb
2c088                 |         end
2c088                 | 
2c088     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2c08c     00 00 C4 F8 |                 setbyte #0
2c090     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2c094     00 00 04 F6 |                 mov     0-0, #0
2c098                 | 
2c098                 | .done
2c098     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2c09c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2c0a0     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2c0a4     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2c0a8     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2c0ac     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2c0b0                 | 
2c0b0     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2c0b4     27 EF 03 F6 |                 mov     pb, urx_buff_p
2c0b8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2c0bc     55 02 A0 FD |                 call    #control_read
2c0c0     00 69 06 FB |                 rdlong  hub_port_status, ptra
2c0c4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2c0c4     2D 00 64 FD |                 ret
2c0c8                 | 
2c0c8                 | '------------------------------------------------------------------------------
2c0c8                 | ' Partially populated SETUP packets
2c0c8                 | '------------------------------------------------------------------------------
2c0c8     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2c0c9     06          |                 byte    REQ_GET_DESC
2c0ca     00 01       |                 word    TYPE_DEVICE << 8
2c0cc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2c0ce     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2c0d0     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2c0d1     06          |                 byte    REQ_GET_DESC
2c0d2     00 02       |                 word    TYPE_CONFIG << 8
2c0d4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2c0d6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2c0d8     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2c0d9     09          |                 byte    REQ_SET_CONFIG
2c0da     00 00       |                 word    0       ' Configuration value
2c0dc     00 00       |                 word    0       ' Zero
2c0de     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2c0e0     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2c0e1     05          |                 byte    REQ_SET_ADDR
2c0e2     00 00       |                 word    0       ' Zero
2c0e4     00 00       |                 word    0       ' Zero
2c0e6     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2c0e8                 | '------------------------------------------------------------------------------
2c0e8                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2c0e8                 | ' wValue field dictates which protocol should be used.
2c0e8                 | '
2c0e8                 | ' When initialized, all devices default to report protocol. However the host
2c0e8                 | ' should not make any assumptions about the device state and should set the
2c0e8                 | ' desired protocol whenever initializing a device.
2c0e8                 | '------------------------------------------------------------------------------
2c0e8     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2c0e9     0B          |                 byte    HID_SET_PROTO
2c0ea     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2c0ec                 |                                                 ' (HID 1.11 Section 7.2.6).
2c0ec     00 00       |                 word    0               ' Interface index number.
2c0ee     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2c0f0                 | '------------------------------------------------------------------------------
2c0f0     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2c0f1     0A          |                 byte    HID_SET_IDLE
2c0f2     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2c0f4                 |                                         ' reporting until a change is detected in the report data
2c0f4                 | 
2c0f4                 |                                         ' (HID 1.11 Section 7.2.4).
2c0f4     00 00       |                 word    0       ' Interface index number.
2c0f6     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2c0f8     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2c0f9     09          |                 byte    HID_SET_REPORT
2c0fa     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2c0fc                 |                                         ' (HID 1.11 Section 7.2.2).
2c0fc     00 00       |                 word    0       ' Interface index number.
2c0fe     00 00       |                 word    0       ' Size of the report, in bytes.
2c100     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2c101     06          |                 byte    REQ_GET_DESC
2c102     00 22       |                 word    TYPE_REPORT << 8
2c104     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2c106     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2c108                 | '------------------------------------------------------------------------------
2c108     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2c109     06          |                 byte    REQ_GET_DESC
2c10a     00 29       |                 word    TYPE_HUB << 8
2c10c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2c10e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2c110     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2c111     03          |                 byte    REQ_SET_FEATURE
2c112     00 00       |                 word    0       ' port power
2c114     01 00       |                 word    1       ' Port index number (1+)
2c116     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2c118     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2c119     01          |                 byte    REQ_CLEAR_FEATURE
2c11a     00 00       |                 word    0       ' port power
2c11c     01 00       |                 word    1       ' Port index number (1+)
2c11e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2c120     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2c121     00          |                 byte    REQ_GET_STATUS
2c122     00 00       |                 word    0
2c124     01 00       |                 word    1       ' Port index number (1+)
2c126     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2c128                 | '------------------------------------------------------------------------------
2c128                 | if _HAVE_GAMEPAD
2c128     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2c12c                 | ps3_command_buff
2c12c     00 00 00 00 
2c130     00          |                 byte    $00, $00, $00, $00, $00
2c131     00 00 00 00 
2c135     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2c136     FF 27 10 00 
2c13a     32          |                 byte    $FF, $27, $10, $00, $32
2c13b     FF 27 10 00 
2c13f     32          |                 byte    $FF, $27, $10, $00, $32
2c140     FF 27 10 00 
2c144     32          |                 byte    $FF, $27, $10, $00, $32
2c145     FF 27 10 00 
2c149     32          |                 byte    $FF, $27, $10, $00, $32
2c14a     00 00 00 00 
2c14e     00          |                 byte    $00, $00, $00, $00, $00
2c14f     00 00 00 00 
2c153     00          |                 byte    $00, $00, $00, $00, $00
2c154     00 00 00 00 
2c158     00          |                 byte    $00, $00, $00, $00, $00
2c159     00 00 00    |                 byte    $00, $00, $00
2c15c                 | '------------------------------------------------------------------------------
2c15c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2c15f                 |                                         ' 0x01 All blinking
2c15f                 |                                         ' 0x02 1 flashes, then on
2c15f                 |                                         ' 0x03 2 flashes, then on
2c15f                 |                                         ' 0x04 3 flashes, then on
2c15f                 |                                         ' 0x05 4 flashes, then on
2c15f                 |                                         ' 0x06 1 on
2c15f                 |                                         ' 0x07 2 on
2c15f                 |                                         ' 0x08 3 on
2c15f                 |                                         ' 0x09 4 on
2c15f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2c15f                 |                                         ' 0x0B Blinking*
2c15f                 |                                         ' 0x0C Slow blinking*
2c15f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2c15f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2c162     00          |                 byte    $00             ' Left rumble
2c163     00          |                 byte    $00             ' Right rumble
2c164     00 00 00    |                 byte    $00, $00, $00
2c167     00          | end
2c168                 | alignl
2c168                 | 
2c168                 | if HAVE_MOUSE
2c168     00 00 00 00 
2c16c     00 00 00 00 | mouse_limits long 0[2]
2c170     00 00 00 00 | mouse_outptr long 0
2c174                 | end
2c174                 | 
2c174                 | if KEYQUEUE_SIZE > 0
2c174     00          | keyq_head byte 0
2c175     00          | keyq_tail byte 0
2c176     00 00 00 00 
      ...             
2c372     00 00 00 00 
2c376     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2c378                 | alignl
2c378                 | end
2c378                 | 
2c378                 | if EMUPAD_MAX_PLAYER > 0
2c378                 | emupad_rule_buffer
2c378                 | if EMUPAD_BUILTIN_RULES
2c378                 | file "padmap_builtin.dat"
2c378                 | end
2c378                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2c378                 | '' Default rule directly follows!
2c378                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2c378                 | end
2c378                 | 
2c378                 | '------------------------------------------------------------------------------
2c378                 | ' The USB data cache area gets zero-filled at every device disconnect
2c378                 | '------------------------------------------------------------------------------
2c378                 | usb_cache_start
2c378                 | 
2c378                 | ' HID descriptor and report buffers
2c378                 | if !!OVERLAP_MEMORY
2c378     00 00 00 00 
      ...             
2ca70     00 00 00 00 
2ca74     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2ca78                 | end
2ca78     00 00 00 00 
2ca7c     00 00 00 00 | hkbd_report     byte    0[8]
2ca80     00 00 00 00 | hkbd_led_rep    byte    0
2ca84                 | alignl
2ca84                 | 
2ca84                 | if HAVE_HIDPAD
2ca84     00 00 00 00 
      ...             
2cb40     00 00 00 00 
2cb44     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2cb48                 | end
2cb48                 | 
2cb48                 | ' HUB descriptor
2cb48     00          | hub_descr       byte    0   ' bDescLength
2cb49     00          |                 byte    0   ' bDescriptorType
2cb4a     00          |                 byte    0   ' bNbrPorts
2cb4b     00 00       |                 word    0   ' wHubCharacteristics
2cb4d     00          |                 byte    0   ' bPwrOn2PwrGood
2cb4e     00          |                 byte    0   ' bHubContrCurrent
2cb4f     00          |                 byte    0   ' DeviceRemoveable
2cb50     00          |                 byte    0   ' PortPwrCtrlMask
2cb51                 | 
2cb51                 | usb_cache_end
2cb51                 | 
2cb51                 | if HAVE_MOUSE
2cb51     00 00 00 00 | mouse_xacc      long 0
2cb55     00 00 00 00 | mouse_yacc      long 0
2cb59     00 00 00 00 | mouse_zacc      long 0
2cb5d     00          | mouse_bstate    byte 0
2cb5e     00          | mouse_lpending  byte 0
2cb5f     00          | mouse_rpending  byte 0
2cb60     00          | mouse_mpending  byte 0
2cb61     00          | mouse_lock      byte 0
2cb62     00 00 00    |                 byte 0[3] ' padding
2cb65                 | end
2cb65                 | 
2cb65     00 00 00 00 
      ...             
2cbdd     00 00 00 00 
2cbe1     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2cbe5     00 00 00 00 
2cbe9     00 00 00 00 
2cbed     00 00 00 00 
2cbf1     00 00 00 00 
2cbf5     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2cbf7     00 00 00 00 
      ...             
2ccef     00 00 00 00 
2ccf3     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2ccf7                 | 
2ccf7     00          | driver_cog      byte    0                       ' Current driver cog + 1
2ccf8                 | 	alignl
2ccf8                 | _Audio093b_8_sc_spin2_dat_
2ccf8                 | 
2ccf8                 | audio       org     0
2ccf8                 | 
2ccf8     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2ccfc     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2cd00     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2cd04                 | 
2cd04     01 EC 63 FD |             cogid   pa                   ' compute cogid
2cd08     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2cd0c     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2cd10     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2cd14                 | 
2cd14     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2cd18     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2cd1c     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2cd20     0F CA 05 FC |             wrpin   dac,#right
2cd24     0F BE 1C FC |             wxpin   #95,#right    
2cd28     41 9C 64 FD |             dirh    #left addpins 1
2cd2c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2cd30     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2cd34     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2cd38                 |             
2cd38                 | '---------------------------------------------------------------------------------        
2cd38                 | '----------------- The main loop -------------------------------------------------
2cd38                 | '---------------------------------------------------------------------------------
2cd38                 | 
2cd38     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2cd3c     10 00 90 CD |       if_c  jmp     #loop1
2cd40                 |   
2cd40     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2cd44     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2cd48     B1 00 80 F1 |             sub     0-0,a40000000
2cd4c     FD A9 6D FB |             djnz    cn,#p402
2cd50                 |     
2cd50     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2cd54     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2cd58     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2cd5c     01 A8 05 C6 |     if_c    mov     cn,#1
2cd60     B6 AA 39 F3 |             fle     ct,time3 wcz
2cd64     02 A8 05 C6 |     if_c    mov     cn,#2     
2cd68     B7 AA 39 F3 |             fle     ct,time4 wcz
2cd6c     03 A8 05 C6 |     if_c    mov     cn,#3
2cd70     B8 AA 39 F3 |             fle     ct,time5 wcz
2cd74     04 A8 05 C6 |     if_c    mov     cn,#4
2cd78     B9 AA 39 F3 |             fle     ct,time6 wcz
2cd7c     05 A8 05 C6 |     if_c    mov     cn,#5
2cd80     BA AA 39 F3 |             fle     ct,time7 wcz
2cd84     06 A8 05 C6 |     if_c    mov     cn,#6
2cd88     BB AA 39 F3 |             fle     ct,time8 wcz
2cd8c     07 A8 05 C6 |     if_c    mov     cn,#7
2cd90                 | 
2cd90                 | 
2cd90                 | '----------------------------------------------------------------------------------
2cd90                 | '------------- Compute channel samples --------------------------------------------
2cd90                 | '----------------------------------------------------------------------------------
2cd90                 | 
2cd90                 | 
2cd90     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2cd94     05 78 65 F0 |             shl     channeladd,#5
2cd98     BC F0 03 F1 |             add     ptra,channeladd
2cd9c                 | 
2cd9c     28 0E 64 FD |             setq    #7                        ' read parameters
2cda0     00 8F 05 FB |             rdlong  pointer0,ptra
2cda4                 | '            testb   command0,#29 wz
2cda4                 | '    if_nz   jmp     #p408
2cda4                 | '    	    getword envptr,command0,#0
2cda4                 | '    	    getbyte envspeed,command0,#2
2cda4                 | '    	    jmp     #p404                     'if envelope then no sample rate
2cda4                 |     	    
2cda4     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2cda8     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2cdac     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2cdb0     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2cdb4     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2cdb8     00 7C 0D F2 |             cmp     qq,#0 wz                         
2cdbc     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2cdc0     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2cdc4                 |             
2cdc4     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2cdc8     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2cdcc     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2cdd0                 | 
2cdd0                 | 
2cdd0     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2cdd4     C8 B0 39 F9 |             getword oldrs,sample0,#1
2cdd8     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2cddc     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2cde0     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2cde4     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2cde8                 | 
2cde8     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2cdec     00 AC 01 F6 |             mov     dt0,0-0    
2cdf0     B3 AC 81 F1 |             sub     dt0,time0
2cdf4                 |             
2cdf4     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2cdf8     CF 00 00 F1 |             add     0-0,afreq0  	
2cdfc                 | 
2cdfc     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2ce00     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2ce04     08 8E 45 F0 |             shr     pointer0,#8
2ce08                 |          
2ce08     1F 92 0D F4 |             testb   sstart0,#31 wz            
2ce0c     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2ce10     1C 92 0D F4 |             testb   sstart0,#28 wz            
2ce14     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2ce18                 |             
2ce18     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2ce1c     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2ce20     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2ce24                 |             
2ce24     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2ce28     C9 7C 01 F1 |             add     qq,sstart0            
2ce2c                 | 
2ce2c                 | 
2ce2c                 | 
2ce2c     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2ce30     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2ce34     04 01 B0 1D |     if_gt   call    #cache_read
2ce38                 |          
2ce38                 |          
2ce38                 |  
2ce38                 |          
2ce38     1F 92 0D F4 |             testb   sstart0,#31 wz 
2ce3c     08 7E 65 50 |     if_nz   shl     spl,#8
2ce40     08 8E 65 50 |     if_nz   shl     pointer0,#8
2ce44     07 8E 65 A0 |     if_z    shl     pointer0,#7
2ce48     1C 92 0D F4 |             testb   sstart0,#28 wz            
2ce4c     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2ce50     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2ce54                 |     
2ce54                 | 
2ce54     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2ce58     00 7E 01 F6 |             mov     spl,0-0
2ce5c                 |  
2ce5c     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2ce60     00 B2 01 F6 |             mov     ls0,0-0
2ce64     20 00 00 FF 
2ce68     00 7C 05 F6 |             mov     qq,##16384
2ce6c     D2 7C 81 F1 |             sub     qq,apan0
2ce70     BE 7E 31 FA |             scas    spl,qq
2ce74     00 B4 01 F6 |             mov     rs0, 0-0
2ce78                 | 
2ce78     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2ce7c     DA B8 01 F1 |             add     rs,rs0
2ce80     D7 B6 81 F1 |             sub     ls,oldls
2ce84     D9 B6 01 F1 |             add     ls,ls0
2ce88                 |    
2ce88     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2ce8c     D9 90 21 F9 |             setword sample0,ls0,#0
2ce90                 |             
2ce90     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2ce94     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2ce98     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2ce9c     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2cea0     04 00 00 AF 
2cea4     00 68 05 A1 |     if_z    add     time1,##2048
2cea8     B4 6A 01 A6 |     if_z    mov     time2,time1
2ceac     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2ceb0                 |             
2ceb0     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2ceb4     00 8F 65 FC |             wrlong  pointer0,ptra
2ceb8     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2cebc                 |                       
2cebc     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2cec0     FF 7B 25 A7 |     if_z    decmod  front, #511          
2cec4                 |          
2cec4     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2cec8     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2cecc     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2ced0     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2ced4                 | 	    
2ced4                 | 		    
2ced4     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2ced8     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2cedc     D8 BC 01 F6 |             mov     newsample, oldrs       
2cee0                 | 
2cee0     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2cee4     D6 66 01 F1 |             add     time0,dt0    
2cee8                 |                                      
2cee8     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2ceec     60 FE 9F AD |     if_z    jmp     #loop1
2cef0     D6 7C 01 F6 |             mov     qq,dt0
2cef4                 |   
2cef4     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2cef8     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2cefc     F4 FF 9F AD |     if_e    jmp     #p301    
2cf00                 | 		
2cf00     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2cf04     20 00 90 AD |     if_z    jmp #p302	   
2cf08                 |  
2cf08                 |  
2cf08     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2cf0c     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2cf10     02 C6 65 C0 |     if_c    shl scptr2,#2
2cf14     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2cf18     60 C6 65 FC |             wrlong scptr2,#$60
2cf1c     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2cf20     01 00 00 CF 
2cf24     7F C4 05 C7 |     if_c    incmod scptr,##639
2cf28                 | 			    
2cf28     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2cf2c     00 00 00 FF 
2cf30     FF 7B 05 F7 |             incmod  front, ##511
2cf34     EF 7D 6D FB |             djnz    qq,#p301
2cf38                 |             
2cf38     FC FD 9F FD |             jmp     #loop            'loop
2cf3c                 | 
2cf3c                 | '----------------------------------------------------------------------------------
2cf3c                 | '------------- This is the end of the main loop -----------------------------------
2cf3c                 | '----------------------------------------------------------------------------------
2cf3c                 | 
2cf3c                 | '----------------------------------------------------------------------------------
2cf3c                 | '------------- PSRAM cache ----------- --------------------------------------------
2cf3c                 | '----------------------------------------------------------------------------------
2cf3c                 | 
2cf3c                 | ' There are 8 cache pointers for 8 channels
2cf3c                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2cf3c                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2cf3c                 | 
2cf3c                 | 
2cf3c     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2cf40                 |             
2cf40     BE E8 01 F6 | 	    mov     addrhi,qq		
2cf44     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2cf48     E8 A8 95 F9 | 	    alts    cn,#cache1            
2cf4c     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2cf50     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2cf54                 | 	
2cf54     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2cf58     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2cf5c     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2cf60     08 E0 65 F0 | 	    shl     cmd,#8
2cf64     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2cf68     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2cf6c     08 E2 65 F0 |             shl     hubaddr,#8                  '
2cf70     E7 E2 01 F1 |             add     hubaddr,hubptr 
2cf74     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2cf78     28 04 64 FD |             setq    #2                          ' write 3 longs
2cf7c     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2cf80     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2cf84     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2cf88                 |             
2cf88                 | 	
2cf88     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2cf8c     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2cf90     E7 7C 01 F1 | 	    add     qq,hubptr
2cf94     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2cf98     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2cf9c                 |           
2cf9c                 | 
2cf9c                 | '--------------------------------------------------------------------------
2cf9c                 | '------ Interrupt service -------------------------------------------------
2cf9c                 | '------ Output the sample, get the next one if exists ---------------------
2cf9c                 | '--------------------------------------------------------------------------
2cf9c                 | 
2cf9c     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2cfa0     0F 88 25 FC |             wypin   rsample,#right       '4
2cfa4     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2cfa8     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2cfac     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2cfb0     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2cfb4     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2cfb8                 |     
2cfb8     F5 FF 3B FB |             reti1                        '17/19 
2cfbc                 |           
2cfbc                 | '---------------------------------------------------------------------------
2cfbc                 | '-------- End of interrupt -------------------------------------------------
2cfbc                 | '---------------------------------------------------------------------------    
2cfbc                 | 
2cfbc                 | 
2cfbc                 | '---------------------------------------------------------------------------
2cfbc                 | '------- Variables ---------------------------------------------------------
2cfbc                 | '---------------------------------------------------------------------------
2cfbc                 | 
2cfbc                 | ' constants
2cfbc                 | 
2cfbc     00 00 00 40 | a40000000   long $40000000
2cfc0     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2cfc4                 | 
2cfc4                 | ' Time variables
2cfc4                 | 
2cfc4     00 00 00 00 | time0       long 0    ' Global sample computing time
2cfc8     01 00 00 00 | time1       long 1    ' Local channels time
2cfcc     02 00 00 00 | time2       long 2
2cfd0     03 00 00 00 | time3       long 3
2cfd4     04 00 00 00 | time4       long 4
2cfd8     05 00 00 00 | time5       long 5
2cfdc     06 00 00 00 | time6       long 6
2cfe0     07 00 00 00 | time7       long 7
2cfe4     08 00 00 00 | time8       long 8
2cfe8                 | 
2cfe8     00 00 00 00 | channeladd long 0
2cfec                 | 
2cfec     00 00 00 00 | front       long 0
2cff0                 | 
2cff0                 | ' temporary variables 
2cff0     00 00 00 00 | qq          long 0
2cff4     00 00 00 00 | spl         long 0
2cff8     00 00 00 00 | zero        long 0
2cffc     00 00 00 00 | mailbox     long 0
2d000     00 00 00 00 | mailbox2 long 0
2d004                 | 
2d004                 | ' Interrupt ISR variables
2d004                 | 
2d004     00 00 00 00 | lsample     long 0
2d008     00 00 00 00 | rsample     long 0
2d00c     00 00 00 00 | lsnext      long 0
2d010     00 00 00 00 | rsnext      long 0 
2d014                 | 
2d014                 | ' channel parameter block
2d014                 | 
2d014     00 00 00 00 | pointer0    long 0     
2d018     00 00 00 00 | sample0     long 0
2d01c     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2d020     00 00 00 00 | lstart0     long 0
2d024     00 00 00 00 | lend0       long 0
2d028     00 00 00 00 | volpan0     long 0
2d02c     00 00 00 00 | freqskip0   long 0
2d030     00 00 00 00 | command0    long 0
2d034                 | 
2d034     00 00 00 00 | afreq0      long 0
2d038     00 00 00 00 | askip0      long 0
2d03c     00 00 00 00 | avol0       long 0
2d040     00 00 00 00 | apan0       long 0
2d044                 | 
2d044     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2d048     00 00 00 00 | cn          long 0
2d04c     00 00 00 00 | ct          long 0
2d050     00 00 00 00 | dt0         long 0
2d054                 | 
2d054                 | ' Samples
2d054     00 00 00 00 | oldls       long 0
2d058     00 00 00 00 | oldrs       long 0
2d05c                 | 
2d05c     00 00 00 00 | ls0         long 0
2d060     00 00 00 00 | rs0         long 0
2d064                 | 
2d064     00 00 00 00 | ls          long 0    
2d068     00 00 00 00 | rs          long 0
2d06c                 | 
2d06c     00 00 00 00 | oldsample   long 0
2d070     00 00 00 00 | newsample   long 0
2d074                 | 
2d074     00 00 00 00 | nrsample    long 0
2d078     00 00 00 00 | nlsample    long 0
2d07c                 | 
2d07c     00 00 00 00 | scbase long 0
2d080     00 00 00 00 | scptr long 0
2d084     00 00 00 00 | scptr2 long 0
2d088     00 00 00 00 | scope long 0
2d08c                 | 
2d08c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2d090     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2d094                 | 
2d094     00 18 07 00 | hubptr      long $71800
2d098     00 00 00 00 | cache1      long 0
2d09c     00 00 00 00 | cache2      long 0
2d0a0     00 00 00 00 | cache3      long 0
2d0a4     00 00 00 00 | cache4      long 0
2d0a8     00 00 00 00 | cache5      long 0
2d0ac     00 00 00 00 | cache6      long 0
2d0b0     00 00 00 00 | cache7      long 0
2d0b4     00 00 00 00 | cache8      long 0
2d0b8                 | 
2d0b8                 | 
2d0b8     00 00 00 00 | cmd         long 0
2d0bc     00 00 00 00 | hubaddr     long 0
2d0c0     00 01 00 00 | count       long 256
2d0c4     00 00 00 00 | addrlo long 0
2d0c8     00 00 00 00 | addrhi long 0
2d0cc     00 00 00 00 | pointer00 long 0
2d0d0     00 00 00 00 
2d0d4     00 00 00 00 | null  			long 	0,0           ' for channel reset
2d0d8                 | 	alignl
2d0d8                 | __system__dat_
2d0d8     00 00 00 00 
2d0dc     00 00 00 00 | 	byte	$00[8]
2d0e0     03 00 00 00 
2d0e4     00 00 00 00 
2d0e8     00 00 00 00 
2d0ec     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d0f0     00 00 00 00 
      ...             
2d37c     00 00 00 00 
2d380     00 00 00 00 | 	byte	$00[660]
2d384     00 00 20 05 | 	long	(82 {__system____root_opendir})<<20
2d388     00 00 30 05 | 	long	(83 {__system____root_closedir})<<20
2d38c     00 00 40 05 | 	long	(84 {__system____root_readdir})<<20
2d390     00 00 50 05 | 	long	(85 {__system____root_stat})<<20
2d394     00 00 00 00 
2d398     00 00 00 00 
2d39c     00 00 00 00 
2d3a0     00 00 00 00 
2d3a4     00 00 00 00 
2d3a8     00 00 00 00 
2d3ac     00 00 00 00 | 	byte	$00[28]
2d3b0     18 D4 02 00 | 	long	@@@__system__dat_ + 832
2d3b4     1B D4 02 00 | 	long	@@@__system__dat_ + 835
2d3b8     3C D4 02 00 | 	long	@@@__system__dat_ + 868
2d3bc     55 D4 02 00 | 	long	@@@__system__dat_ + 893
2d3c0     70 D4 02 00 | 	long	@@@__system__dat_ + 920
2d3c4     8A D4 02 00 | 	long	@@@__system__dat_ + 946
2d3c8     9A D4 02 00 | 	long	@@@__system__dat_ + 962
2d3cc     AC D4 02 00 | 	long	@@@__system__dat_ + 980
2d3d0     BE D4 02 00 | 	long	@@@__system__dat_ + 998
2d3d4     D0 D4 02 00 | 	long	@@@__system__dat_ + 1016
2d3d8     DC D4 02 00 | 	long	@@@__system__dat_ + 1028
2d3dc     ED D4 02 00 | 	long	@@@__system__dat_ + 1045
2d3e0     01 D5 02 00 | 	long	@@@__system__dat_ + 1065
2d3e4     0B D5 02 00 | 	long	@@@__system__dat_ + 1075
2d3e8     1B D5 02 00 | 	long	@@@__system__dat_ + 1091
2d3ec     2A D5 02 00 | 	long	@@@__system__dat_ + 1106
2d3f0     40 D5 02 00 | 	long	@@@__system__dat_ + 1128
2d3f4     59 D5 02 00 | 	long	@@@__system__dat_ + 1153
2d3f8     6D D5 02 00 | 	long	@@@__system__dat_ + 1173
2d3fc     7B D5 02 00 | 	long	@@@__system__dat_ + 1187
2d400     8F D5 02 00 | 	long	@@@__system__dat_ + 1207
2d404     9B D5 02 00 | 	long	@@@__system__dat_ + 1219
2d408     AD D5 02 00 | 	long	@@@__system__dat_ + 1237
2d40c     C5 D5 02 00 | 	long	@@@__system__dat_ + 1261
2d410     D7 D5 02 00 | 	long	@@@__system__dat_ + 1279
2d414     EA D5 02 00 | 	long	@@@__system__dat_ + 1298
2d418     4F 4B 00 4E 
2d41c     75 6D 65 72 
2d420     69 63 61 6C 
2d424     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2d428     75 6D 65 6E 
2d42c     74 20 6F 75 
2d430     74 20 6F 66 
2d434     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2d438     61 69 6E 00 
2d43c     52 65 73 75 
2d440     6C 74 20 6E 
2d444     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2d448     65 70 72 65 
2d44c     73 65 6E 74 
2d450     61 62 6C 65 
2d454     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2d458     65 67 61 6C 
2d45c     20 6D 75 6C 
2d460     74 69 62 79 
2d464     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2d468     65 71 75 65 
2d46c     6E 63 65 00 
2d470     4E 6F 20 73 
2d474     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2d478     66 69 6C 65 
2d47c     20 6F 72 20 
2d480     64 69 72 65 
2d484     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2d488     79 00 42 61 
2d48c     64 20 66 69 
2d490     6C 65 20 6E 
2d494     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2d498     72 00 50 65 
2d49c     72 6D 69 73 
2d4a0     73 69 6F 6E 
2d4a4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2d4a8     69 65 64 00 
2d4ac     4E 6F 74 20 
2d4b0     65 6E 6F 75 
2d4b4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2d4b8     65 6D 6F 72 
2d4bc     79 00 54 65 
2d4c0     6D 70 6F 72 
2d4c4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2d4c8     66 61 69 6C 
2d4cc     75 72 65 00 
2d4d0     46 69 6C 65 
2d4d4     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2d4d8     73 74 73 00 
2d4dc     49 6E 76 61 
2d4e0     6C 69 64 20 
2d4e4     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2d4e8     6D 65 6E 74 
2d4ec     00 54 6F 6F 
2d4f0     20 6D 61 6E 
2d4f4     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2d4f8     65 6E 20 66 
2d4fc     69 6C 65 73 
2d500     00 49 2F 4F 
2d504     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2d508     6F 72 00 4E 
2d50c     6F 74 20 61 
2d510     20 64 69 72 
2d514     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2d518     72 79 00 49 
2d51c     73 20 61 20 
2d520     64 69 72 65 
2d524     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2d528     79 00 52 65 
2d52c     61 64 20 6F 
2d530     6E 6C 79 20 
2d534     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2d538     20 73 79 73 
2d53c     74 65 6D 00 
2d540     46 75 6E 63 
2d544     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2d548     20 6E 6F 74 
2d54c     20 69 6D 70 
2d550     6C 65 6D 65 
2d554     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2d558     00 44 69 72 
2d55c     65 63 74 6F 
2d560     72 79 20 6E 
2d564     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2d568     6D 70 74 79 
2d56c     00 4E 61 6D 
2d570     65 20 74 6F 
2d574     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2d578     6E 67 00 44 
2d57c     65 76 69 63 
2d580     65 20 6E 6F 
2d584     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2d588     65 6B 61 62 
2d58c     6C 65 00 42 
2d590     61 64 20 61 
2d594     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2d598     73 73 00 42 
2d59c     72 6F 6B 65 
2d5a0     6E 20 63 6F 
2d5a4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2d5a8     74 69 6F 6E 
2d5ac     00 44 65 76 
2d5b0     69 63 65 20 
2d5b4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2d5b8     65 73 6F 75 
2d5bc     72 63 65 20 
2d5c0     62 75 73 79 
2d5c4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2d5c8     73 73 20 64 
2d5cc     65 76 69 63 
2d5d0     65 20 6C 69 
2d5d4     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2d5d8     6F 20 73 70 
2d5dc     61 63 65 20 
2d5e0     6F 6E 20 64 
2d5e4     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2d5e8     65 00 55 6E 
2d5ec     6B 6E 6F 77 
2d5f0     6E 20 65 72 
2d5f4     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2d5f8     00 00 00 00 
2d5fc     00 00 00 00 | 	byte	$00[8]
2d600     05 00 00 00 
2d604     00 00 00 00 
2d608     00 00 00 00 
2d60c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d610     00 00 00 00 | 	byte	$00, $00, $00, $00
2d614     00 00 A0 06 | 	long	(106 {__system___tx})<<20
2d618     00 00 B0 06 | 	long	(107 {__system___rx})<<20
2d61c     00 00 00 00 | 	byte	$00, $00, $00, $00
2d620     00 00 C0 06 | 	long	(108 {__system___rxtxioctl_0517})<<20
2d624     00 00 D0 06 | 	long	(109 {__system____dummy_flush_0518})<<20
2d628     00 00 00 00 
2d62c     00 00 00 00 | 	byte	$00[8]
2d630     01 00 00 00 
2d634     06 00 00 00 
2d638     00 00 00 00 
2d63c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d640     00 00 00 00 
2d644     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d648     00 00 A0 06 | 	long	(106 {__system___tx})<<20
2d64c     00 00 B0 06 | 	long	(107 {__system___rx})<<20
2d650     00 00 00 00 | 	byte	$00, $00, $00, $00
2d654     00 00 C0 06 | 	long	(108 {__system___rxtxioctl_0517})<<20
2d658     00 00 D0 06 | 	long	(109 {__system____dummy_flush_0518})<<20
2d65c     00 00 00 00 
2d660     00 00 00 00 | 	byte	$00[8]
2d664     01 00 00 00 
2d668     06 00 00 00 
2d66c     00 00 00 00 
2d670     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d674     00 00 00 00 
2d678     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d67c     00 00 A0 06 | 	long	(106 {__system___tx})<<20
2d680     00 00 B0 06 | 	long	(107 {__system___rx})<<20
2d684     00 00 00 00 | 	byte	$00, $00, $00, $00
2d688     00 00 C0 06 | 	long	(108 {__system___rxtxioctl_0517})<<20
2d68c     00 00 D0 06 | 	long	(109 {__system____dummy_flush_0518})<<20
2d690     00 00 00 00 
      ...             
2d800     00 00 00 00 
2d804     00 00 00 00 | 	byte	$00[376]
2d808     0C D8 02 00 | 	long	@@@__system__dat_ + 1844
2d80c     00 00 00 00 
2d810     00 00 00 00 
2d814     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d818                 | 	alignl
2d818                 | _fatfs_cc_dat_
2d818     C7 00 FC 00 
2d81c     E9 00 E2 00 
2d820     E4 00 E0 00 
2d824     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2d828     EA 00 EB 00 
2d82c     E8 00 EF 00 
2d830     EE 00 EC 00 
2d834     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2d838     C9 00 E6 00 
2d83c     C6 00 F4 00 
2d840     F6 00 F2 00 
2d844     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2d848     FF 00 D6 00 
2d84c     DC 00 F8 00 
2d850     A3 00 D8 00 
2d854     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2d858     E1 00 ED 00 
2d85c     F3 00 FA 00 
2d860     F1 00 D1 00 
2d864     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2d868     BF 00 AE 00 
2d86c     AC 00 BD 00 
2d870     BC 00 A1 00 
2d874     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2d878     91 25 92 25 
2d87c     93 25 02 25 
2d880     24 25 C1 00 
2d884     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2d888     A9 00 63 25 
2d88c     51 25 57 25 
2d890     5D 25 A2 00 
2d894     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2d898     14 25 34 25 
2d89c     2C 25 1C 25 
2d8a0     00 25 3C 25 
2d8a4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2d8a8     5A 25 54 25 
2d8ac     69 25 66 25 
2d8b0     60 25 50 25 
2d8b4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2d8b8     F0 00 D0 00 
2d8bc     CA 00 CB 00 
2d8c0     C8 00 31 01 
2d8c4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2d8c8     CF 00 18 25 
2d8cc     0C 25 88 25 
2d8d0     84 25 A6 00 
2d8d4     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2d8d8     D3 00 DF 00 
2d8dc     D4 00 D2 00 
2d8e0     F5 00 D5 00 
2d8e4     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2d8e8     DE 00 DA 00 
2d8ec     DB 00 D9 00 
2d8f0     FD 00 DD 00 
2d8f4     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2d8f8     AD 00 B1 00 
2d8fc     17 20 BE 00 
2d900     B6 00 A7 00 
2d904     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2d908     B0 00 A8 00 
2d90c     B7 00 B9 00 
2d910     B3 00 B2 00 
2d914     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2d918     61 00 1A 03 
2d91c     E0 00 17 03 
2d920     F8 00 07 03 
2d924     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2d928     78 01 00 01 
2d92c     30 01 32 01 
2d930     06 01 39 01 
2d934     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2d938     2E 01 79 01 
2d93c     06 01 80 01 
2d940     4D 00 43 02 
2d944     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2d948     82 01 84 01 
2d94c     84 01 86 01 
2d950     87 01 87 01 
2d954     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2d958     8B 01 8B 01 
2d95c     8D 01 8E 01 
2d960     8F 01 90 01 
2d964     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2d968     93 01 94 01 
2d96c     F6 01 96 01 
2d970     97 01 98 01 
2d974     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2d978     9B 01 9C 01 
2d97c     9D 01 20 02 
2d980     9F 01 A0 01 
2d984     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2d988     A2 01 A4 01 
2d98c     A4 01 A6 01 
2d990     A7 01 A7 01 
2d994     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2d998     AB 01 AC 01 
2d99c     AC 01 AE 01 
2d9a0     AF 01 AF 01 
2d9a4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2d9a8     B3 01 B3 01 
2d9ac     B5 01 B5 01 
2d9b0     B7 01 B8 01 
2d9b4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2d9b8     BB 01 BC 01 
2d9bc     BC 01 BE 01 
2d9c0     F7 01 C0 01 
2d9c4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2d9c8     C3 01 C4 01 
2d9cc     C5 01 C4 01 
2d9d0     C7 01 C8 01 
2d9d4     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2d9d8     CB 01 CA 01 
2d9dc     CD 01 10 01 
2d9e0     DD 01 01 00 
2d9e4     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2d9e8     12 01 F3 01 
2d9ec     03 00 F1 01 
2d9f0     F4 01 F4 01 
2d9f4     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2d9f8     22 02 12 01 
2d9fc     3A 02 09 00 
2da00     65 2C 3B 02 
2da04     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2da08     66 2C 3F 02 
2da0c     40 02 41 02 
2da10     41 02 46 02 
2da14     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2da18     40 00 81 01 
2da1c     86 01 55 02 
2da20     89 01 8A 01 
2da24     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2da28     5A 02 90 01 
2da2c     5C 02 5D 02 
2da30     5E 02 5F 02 
2da34     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2da38     62 02 94 01 
2da3c     64 02 65 02 
2da40     66 02 67 02 
2da44     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2da48     6A 02 62 2C 
2da4c     6C 02 6D 02 
2da50     6E 02 9C 01 
2da54     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2da58     9D 01 73 02 
2da5c     74 02 9F 01 
2da60     76 02 77 02 
2da64     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2da68     7A 02 7B 02 
2da6c     7C 02 64 2C 
2da70     7E 02 7F 02 
2da74     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2da78     82 02 A9 01 
2da7c     84 02 85 02 
2da80     86 02 87 02 
2da84     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2da88     B1 01 B2 01 
2da8c     45 02 8D 02 
2da90     8E 02 8F 02 
2da94     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2da98     B7 01 7B 03 
2da9c     03 00 FD 03 
2daa0     FE 03 FF 03 
2daa4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2daa8     86 03 88 03 
2daac     89 03 8A 03 
2dab0     B1 03 11 03 
2dab4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2dab8     A3 03 A3 03 
2dabc     C4 03 08 03 
2dac0     CC 03 03 00 
2dac4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2dac8     8F 03 D8 03 
2dacc     18 01 F2 03 
2dad0     0A 00 F9 03 
2dad4     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2dad8     F5 03 F6 03 
2dadc     F7 03 F7 03 
2dae0     F9 03 FA 03 
2dae4     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2dae8     20 03 50 04 
2daec     10 07 60 04 
2daf0     22 01 8A 04 
2daf4     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2daf8     0E 01 CF 04 
2dafc     01 00 C0 04 
2db00     D0 04 44 01 
2db04     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2db08     00 00 7D 1D 
2db0c     01 00 63 2C 
2db10     00 1E 96 01 
2db14     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2db18     00 1F 08 06 
2db1c     10 1F 06 06 
2db20     20 1F 08 06 
2db24     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2db28     40 1F 06 06 
2db2c     51 1F 07 00 
2db30     59 1F 52 1F 
2db34     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2db38     5D 1F 56 1F 
2db3c     5F 1F 60 1F 
2db40     08 06 70 1F 
2db44     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2db48     BB 1F C8 1F 
2db4c     C9 1F CA 1F 
2db50     CB 1F DA 1F 
2db54     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2db58     F9 1F EA 1F 
2db5c     EB 1F FA 1F 
2db60     FB 1F 80 1F 
2db64     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2db68     08 06 A0 1F 
2db6c     08 06 B0 1F 
2db70     04 00 B8 1F 
2db74     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2db78     BC 1F CC 1F 
2db7c     01 00 C3 1F 
2db80     D0 1F 02 06 
2db84     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2db88     E5 1F 01 00 
2db8c     EC 1F F3 1F 
2db90     01 00 FC 1F 
2db94     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2db98     32 21 70 21 
2db9c     10 02 84 21 
2dba0     01 00 83 21 
2dba4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2dba8     30 2C 2F 04 
2dbac     60 2C 02 01 
2dbb0     67 2C 06 01 
2dbb4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2dbb8     80 2C 64 01 
2dbbc     00 2D 26 08 
2dbc0     41 FF 1A 03 
2dbc4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2dbc8     05 07 09 0E 
2dbcc     10 12 14 16 
2dbd0     18 1C 1E 43 
2dbd4     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2dbd8     41 41 43 45 
2dbdc     45 45 49 49 
2dbe0     49 41 41 45 
2dbe4     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2dbe8     4F 55 55 59 
2dbec     4F 55 4F 9C 
2dbf0     4F 9E 9F 41 
2dbf4     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2dbf8     A5 A6 A7 A8 
2dbfc     A9 AA AB AC 
2dc00     AD AE AF B0 
2dc04     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2dc08     41 41 41 B8 
2dc0c     B9 BA BB BC 
2dc10     BD BE BF C0 
2dc14     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2dc18     C5 41 41 C8 
2dc1c     C9 CA CB CC 
2dc20     CD CE CF D1 
2dc24     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2dc28     49 49 49 49 
2dc2c     D9 DA DB DC 
2dc30     DD 49 DF 4F 
2dc34     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2dc38     4F E6 E8 E8 
2dc3c     55 55 55 59 
2dc40     59 EE EF F0 
2dc44     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2dc48     F5 F6 F7 F8 
2dc4c     F9 FA FB FC 
2dc50     FD FE FF 00 
2dc54     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2dc58     00 00 00 00 | 	byte	$00, $00, $00, $00
2dc5c     00 00 90 05 | 	long	(89 {_fatfs_cc_v_close})<<20
2dc60     00 00 A0 05 | 	long	(90 {_fatfs_cc_v_read})<<20
2dc64     00 00 B0 05 | 	long	(91 {_fatfs_cc_v_write})<<20
2dc68     00 00 C0 05 | 	long	(92 {_fatfs_cc_v_lseek})<<20
2dc6c     00 00 D0 05 | 	long	(93 {_fatfs_cc_v_ioctl})<<20
2dc70     00 00 E0 06 | 	long	(110 {_fatfs_cc_v_flush})<<20
2dc74     00 00 00 00 
2dc78     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2dc7c     00 00 E0 05 | 	long	(94 {_fatfs_cc_v_open})<<20
2dc80     00 00 F0 05 | 	long	(95 {_fatfs_cc_v_creat})<<20
2dc84     00 00 00 06 | 	long	(96 {_fatfs_cc_v_opendir})<<20
2dc88     00 00 10 06 | 	long	(97 {_fatfs_cc_v_closedir})<<20
2dc8c     00 00 20 06 | 	long	(98 {_fatfs_cc_v_readdir})<<20
2dc90     00 00 30 06 | 	long	(99 {_fatfs_cc_v_stat})<<20
2dc94     00 00 40 06 | 	long	(100 {_fatfs_cc_v_mkdir})<<20
2dc98     00 00 50 06 | 	long	(101 {_fatfs_cc_v_rmdir})<<20
2dc9c     00 00 60 06 | 	long	(102 {_fatfs_cc_v_remove})<<20
2dca0     00 00 70 06 | 	long	(103 {_fatfs_cc_v_rename})<<20
2dca4     00 00 80 06 | 	long	(104 {_fatfs_cc_v_init})<<20
2dca8     00 00 90 06 | 	long	(105 {_fatfs_cc_v_deinit})<<20
2dcac     FF FF FF FF 
2dcb0     1F 00 00 00 
2dcb4     1C 00 00 00 
2dcb8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2dcbc     1E 00 00 00 
2dcc0     1F 00 00 00 
2dcc4     1E 00 00 00 
2dcc8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2dccc     1F 00 00 00 
2dcd0     1E 00 00 00 
2dcd4     1F 00 00 00 
2dcd8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2dcdc     1F 00 00 00 
2dce0     00 00 00 00 
2dce4     1F 00 00 00 
2dce8     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2dcec     5A 00 00 00 
2dcf0     78 00 00 00 
2dcf4     97 00 00 00 
2dcf8     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2dcfc     D4 00 00 00 
2dd00     F3 00 00 00 
2dd04     11 01 00 00 
2dd08     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2dd0c     4E 01 00 00 
2dd10     6D 01 00 00 
2dd14     FF FF FF FF 
2dd18     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2dd1c     00 00 00 00 
      ...             
2dd34     00 00 00 00 
2dd38     00 00 00 00 | 	byte	$00[32]
2dd3c     5A DD 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2dd40     5E DD 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2dd44     00 00 00 00 
2dd48     00 00 00 00 
2dd4c     00 00 00 00 
2dd50     00 00 00 00 
2dd54     00 00       | 	byte	$00[18]
2dd56     3F 3F 3F 00 
2dd5a     55 43 54 00 
2dd5e     55 43 54 00 
2dd62     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2dd66     00 00 00 00 
2dd6a     00 00 00    | 	byte	$00[7]
2dd6d     CA 9A 3B 00 
2dd71     00 00 00 01 
2dd75     01 01 01 01 
2dd79     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2dd7d     91 11 11 11 
2dd81     11 01 01 01 
2dd85     01 01 01 01 
2dd89     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2dd8d     01 01 01 01 
2dd91     01 01 01    | 	byte	$01[7]
2dd94     90 20 20 20 
2dd98     20 20 20 20 
2dd9c     20 20 20 20 
2dda0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2dda4     42 42 42 42 
2dda8     42 42 42 42 
2ddac     42 42       | 	byte	$42[10]
2ddae     20 20 20 20 
2ddb2     20 20 20    | 	byte	$20[7]
2ddb5     44 44 44 44 
2ddb9     44 44       | 	byte	$44[6]
2ddbb     04 04 04 04 
2ddbf     04 04 04 04 
2ddc3     04 04 04 04 
2ddc7     04 04 04 04 
2ddcb     04 04 04 04 | 	byte	$04[20]
2ddcf     20 20 20 20 
2ddd3     20 20       | 	byte	$20[6]
2ddd5     48 48 48 48 
2ddd9     48 48       | 	byte	$48[6]
2dddb     08 08 08 08 
2dddf     08 08 08 08 
2dde3     08 08 08 08 
2dde7     08 08 08 08 
2ddeb     08 08 08 08 | 	byte	$08[20]
2ddef     20 20 20 20 
2ddf3     01 00 00 00 
2ddf7     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2ddf8                 | __methodtable__
2ddf8     08 18 01 00 | 	long	@_do_no_command
2ddfc     74 BC 00 00 | 	long	@_do_plus
2de00     54 C0 00 00 | 	long	@_do_minus
2de04     1C C5 00 00 | 	long	@_do_or
2de08     34 C6 00 00 | 	long	@_do_mul
2de0c     C0 CB 00 00 | 	long	@_do_fdiv
2de10     04 C4 00 00 | 	long	@_do_and
2de14     A0 C9 00 00 | 	long	@_do_div
2de18     88 CD 00 00 | 	long	@_do_mod
2de1c     A8 CF 00 00 | 	long	@_do_shl
2de20     C0 D0 00 00 | 	long	@_do_shr
2de24     D8 D1 00 00 | 	long	@_do_power
2de28     E8 B6 00 00 | 	long	@_do_getvar
2de2c     24 8B 00 00 | 	long	@_do_push
2de30     30 B0 00 00 | 	long	@_do_assign
2de34     60 FA 00 00 | 	long	@_do_cls
2de38     60 AA 00 00 | 	long	@_do_new
2de3c     04 FB 00 00 | 	long	@_do_plot
2de40     3C FC 00 00 | 	long	@_do_draw
2de44     24 06 01 00 | 	long	@_do_print
2de48     1C FF 00 00 | 	long	@_do_circle
2de4c     A4 FD 00 00 | 	long	@_do_fcircle
2de50     94 00 01 00 | 	long	@_do_box
2de54     3C 04 01 00 | 	long	@_do_frame
2de58     CC FA 00 00 | 	long	@_do_color
2de5c     28 6B 00 00 | 	long	@_do_for
2de60     54 6D 00 00 | 	long	@_do_next
2de64     C4 A7 00 00 | 	long	@_do_list
2de68     74 9B 00 00 | 	long	@_do_run
2de6c     EC AE 00 00 | 	long	@_do_error
2de70     E8 AB 00 00 | 	long	@_do_fast_goto
2de74     D8 AC 00 00 | 	long	@_do_find_goto
2de78     E8 AE 00 00 | 	long	@_do_slow_goto
2de7c     10 EA 00 00 | 	long	@_do_converttoint
2de80     68 91 00 00 | 	long	@_test_csave
2de84     BC 94 00 00 | 	long	@_do_save
2de88     A8 97 00 00 | 	long	@_do_load
2de8c     C0 0E 01 00 | 	long	@_do_pinwrite
2de90     D8 0E 01 00 | 	long	@_do_waitms
2de94     14 10 01 00 | 	long	@_do_waitvbl
2de98     1C 13 01 00 | 	long	@_do_if
2de9c     00 14 01 00 | 	long	@_do_else
2dea0     24 14 01 00 | 	long	@_do_nothing
2dea4     A0 D3 00 00 | 	long	@_do_eq
2dea8     D0 DE 00 00 | 	long	@_do_ge
2deac     90 E2 00 00 | 	long	@_do_le
2deb0     60 D7 00 00 | 	long	@_do_gt
2deb4     20 DB 00 00 | 	long	@_do_lt
2deb8     50 E6 00 00 | 	long	@_do_ne
2debc     64 EC 00 00 | 	long	@_do_rnd
2dec0     28 14 01 00 | 	long	@_do_brun
2dec4     F4 16 01 00 | 	long	@_do_beep
2dec8     44 10 01 00 | 	long	@_do_dir
2decc     D0 0A 01 00 | 	long	@_do_paper
2ded0     58 0B 01 00 | 	long	@_do_ink
2ded4     F4 0B 01 00 | 	long	@_do_font
2ded8     70 0C 01 00 | 	long	@_do_mode
2dedc     60 16 01 00 | 	long	@_do_mouse
2dee0     F8 F9 00 00 | 	long	@_do_gettime
2dee4     94 16 01 00 | 	long	@_do_cursor
2dee8     C8 16 01 00 | 	long	@_do_click
2deec     E8 F8 00 00 | 	long	@_do_mousex
2def0     2C F9 00 00 | 	long	@_do_mousey
2def4     B4 F9 00 00 | 	long	@_do_mousek
2def8     70 F9 00 00 | 	long	@_do_mousew
2defc     2C EE 00 00 | 	long	@_do_sin
2df00     14 F0 00 00 | 	long	@_do_stick
2df04     98 F1 00 00 | 	long	@_do_strig
2df08     FC F7 00 00 | 	long	@_do_sprite
2df0c     6C F4 00 00 | 	long	@_do_defsprite
2df10     1C F3 00 00 | 	long	@_do_getpixel
2df14     20 10 01 00 | 	long	@_do_waitclock
2df18     14 18 01 00 | 	long	@_do_negative
2df1c     7C 02 01 00 | 	long	@_do_fill
2df20     A0 9E 00 00 | 	long	@_do_defsnd
2df24     24 49 01 00 | 	long	@_hg010b_spin2_putchar
2df28     5C 4C 02 00 | 	long	@__struct___bas_wrap_sender_tx
2df2c     A0 4C 02 00 | 	long	@__struct___bas_wrap_sender_rx
2df30     E8 4C 02 00 | 	long	@__struct___bas_wrap_sender_close
2df34     8C 4B 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2df38     FC 4B 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2df3c     44 4B 02 00 | 	long	@___strs_cl_pfunc
2df40     A4 AA 01 00 | 	long	@__system____root_opendir
2df44     40 AB 01 00 | 	long	@__system____root_closedir
2df48     BC AA 01 00 | 	long	@__system____root_readdir
2df4c     48 AB 01 00 | 	long	@__system____root_stat
2df50     D0 A3 01 00 | 	long	@__system____default_putc
2df54     54 A3 01 00 | 	long	@__system____default_getc
2df58     78 A4 01 00 | 	long	@__system____default_flush
2df5c     4C 36 02 00 | 	long	@_fatfs_cc_v_close
2df60     68 3A 02 00 | 	long	@_fatfs_cc_v_read
2df64     7C 3B 02 00 | 	long	@_fatfs_cc_v_write
2df68     5C 3C 02 00 | 	long	@_fatfs_cc_v_lseek
2df6c     E4 3C 02 00 | 	long	@_fatfs_cc_v_ioctl
2df70     38 3D 02 00 | 	long	@_fatfs_cc_v_open
2df74     B0 35 02 00 | 	long	@_fatfs_cc_v_creat
2df78     90 36 02 00 | 	long	@_fatfs_cc_v_opendir
2df7c     04 37 02 00 | 	long	@_fatfs_cc_v_closedir
2df80     44 37 02 00 | 	long	@_fatfs_cc_v_readdir
2df84     78 38 02 00 | 	long	@_fatfs_cc_v_stat
2df88     F8 3C 02 00 | 	long	@_fatfs_cc_v_mkdir
2df8c     18 3D 02 00 | 	long	@_fatfs_cc_v_rmdir
2df90     08 3D 02 00 | 	long	@_fatfs_cc_v_remove
2df94     28 3D 02 00 | 	long	@_fatfs_cc_v_rename
2df98     48 3E 02 00 | 	long	@_fatfs_cc_v_init
2df9c     50 3E 02 00 | 	long	@_fatfs_cc_v_deinit
2dfa0     5C 5C 01 00 | 	long	@__system___tx
2dfa4     9C 5C 01 00 | 	long	@__system___rx
2dfa8     B4 B6 01 00 | 	long	@__system___rxtxioctl_0517
2dfac     0C B7 01 00 | 	long	@__system____dummy_flush_0518
2dfb0     18 3E 02 00 | 	long	@_fatfs_cc_v_flush
2dfb4                 | __heap_base
2dfb4     00 00 00 00 
      ...             
5cdb4     00 00 00 00 
5cdb8     00 00 00 00 | 	long	0[48002]
5cdbc                 | objmem
5cdbc     00 00 00 00 
      ...             
6c274     00 00 00 00 
6c278     00 00 00 00 | 	long	0[15664]
6c27c                 | stackspace
6c27c     00 00 00 00 | 	long	0[1]
6c280 100             | 	org	COG_BSS_START
6c280 100             | _var01
6c280 100             | 	res	1
6c280 101             | _var02
6c280 101             | 	res	1
6c280 102             | _var03
6c280 102             | 	res	1
6c280 103             | _var04
6c280 103             | 	res	1
6c280 104             | _var05
6c280 104             | 	res	1
6c280 105             | _var06
6c280 105             | 	res	1
6c280 106             | _var07
6c280 106             | 	res	1
6c280 107             | _var08
6c280 107             | 	res	1
6c280 108             | _var09
6c280 108             | 	res	1
6c280 109             | arg01
6c280 109             | 	res	1
6c280 10a             | arg02
6c280 10a             | 	res	1
6c280 10b             | arg03
6c280 10b             | 	res	1
6c280 10c             | arg04
6c280 10c             | 	res	1
6c280 10d             | arg05
6c280 10d             | 	res	1
6c280 10e             | arg06
6c280 10e             | 	res	1
6c280 10f             | local01
6c280 10f             | 	res	1
6c280 110             | local02
6c280 110             | 	res	1
6c280 111             | local03
6c280 111             | 	res	1
6c280 112             | local04
6c280 112             | 	res	1
6c280 113             | local05
6c280 113             | 	res	1
6c280 114             | local06
6c280 114             | 	res	1
6c280 115             | local07
6c280 115             | 	res	1
6c280 116             | local08
6c280 116             | 	res	1
6c280 117             | local09
6c280 117             | 	res	1
6c280 118             | local10
6c280 118             | 	res	1
6c280 119             | local11
6c280 119             | 	res	1
6c280 11a             | local12
6c280 11a             | 	res	1
6c280 11b             | local13
6c280 11b             | 	res	1
6c280 11c             | local14
6c280 11c             | 	res	1
6c280 11d             | local15
6c280 11d             | 	res	1
6c280 11e             | local16
6c280 11e             | 	res	1
6c280 11f             | local17
6c280 11f             | 	res	1
6c280 120             | local18
6c280 120             | 	res	1
6c280 121             | local19
6c280 121             | 	res	1
6c280 122             | local20
6c280 122             | 	res	1
6c280 123             | local21
6c280 123             | 	res	1
6c280 124             | local22
6c280 124             | 	res	1
6c280 125             | local23
6c280 125             | 	res	1
6c280 126             | local24
6c280 126             | 	res	1
6c280 127             | local25
6c280 127             | 	res	1
6c280 128             | local26
6c280 128             | 	res	1
6c280 129             | local27
6c280 129             | 	res	1
6c280 12a             | local28
6c280 12a             | 	res	1
6c280 12b             | local29
6c280 12b             | 	res	1
6c280 12c             | local30
6c280 12c             | 	res	1
6c280 12d             | local31
6c280 12d             | 	res	1
6c280 12e             | local32
6c280 12e             | 	res	1
6c280 12f             | muldiva_
6c280 12f             | 	res	1
6c280 130             | muldivb_
6c280 130             | 	res	1
6c280 131             | 	fit	480
6c280 131             | 
